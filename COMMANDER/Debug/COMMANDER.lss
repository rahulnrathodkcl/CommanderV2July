
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001ba94  00010000  00010000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002ba94  0002ba94  0002ba94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000204  20000000  0002ba9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000c04  20000400  0002c000  00030400  2**10
                  ALLOC
  4 .stack        00002004  20001004  0002cc04  00030400  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00080159  00000000  00000000  00030285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008ba5  00000000  00000000  000b03de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ac67  00000000  00000000  000b8f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001dc8  00000000  00000000  000c3bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001be8  00000000  00000000  000c59b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000287db  00000000  00000000  000c759a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027cfd  00000000  00000000  000efd75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a2a09  00000000  00000000  00117a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000074fc  00000000  00000000  001ba47c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <exception_table>:
   10000:	08 30 00 20 85 56 02 00 7d 57 02 00 7d 57 02 00     .0. .V..}W..}W..
	...
   1002c:	75 f7 01 00 00 00 00 00 00 00 00 00 a1 f8 01 00     u...............
   1003c:	e9 f8 01 00 7d 57 02 00 7d 57 02 00 e1 1f 02 00     ....}W..}W......
   1004c:	f1 f0 01 00 09 30 02 00 7d 57 02 00 09 eb 01 00     .....0..}W......
   1005c:	7d 57 02 00 75 30 02 00 01 2e 02 00 19 2e 02 00     }W..u0..........
   1006c:	31 2e 02 00 49 2e 02 00 61 2e 02 00 79 2e 02 00     1...I...a...y...
   1007c:	05 20 02 00 19 20 02 00 2d 20 02 00 bd 20 02 00     . ... ..- ... ..
   1008c:	d1 20 02 00 e5 20 02 00 f9 20 02 00 0d 21 02 00     . ... ... ...!..
   1009c:	e9 e8 01 00 ad 31 02 00 cd ea 01 00 7d 57 02 00     .....1......}W..
   100ac:	7d 57 02 00 00 00 00 00                             }W......

000100b4 <__do_global_dtors_aux>:
   100b4:	b510      	push	{r4, lr}
   100b6:	4c06      	ldr	r4, [pc, #24]	; (100d0 <__do_global_dtors_aux+0x1c>)
   100b8:	7823      	ldrb	r3, [r4, #0]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d107      	bne.n	100ce <__do_global_dtors_aux+0x1a>
   100be:	4b05      	ldr	r3, [pc, #20]	; (100d4 <__do_global_dtors_aux+0x20>)
   100c0:	2b00      	cmp	r3, #0
   100c2:	d002      	beq.n	100ca <__do_global_dtors_aux+0x16>
   100c4:	4804      	ldr	r0, [pc, #16]	; (100d8 <__do_global_dtors_aux+0x24>)
   100c6:	e000      	b.n	100ca <__do_global_dtors_aux+0x16>
   100c8:	bf00      	nop
   100ca:	2301      	movs	r3, #1
   100cc:	7023      	strb	r3, [r4, #0]
   100ce:	bd10      	pop	{r4, pc}
   100d0:	20000400 	.word	0x20000400
   100d4:	00000000 	.word	0x00000000
   100d8:	0002ba9c 	.word	0x0002ba9c

000100dc <frame_dummy>:
   100dc:	4b08      	ldr	r3, [pc, #32]	; (10100 <frame_dummy+0x24>)
   100de:	b510      	push	{r4, lr}
   100e0:	2b00      	cmp	r3, #0
   100e2:	d003      	beq.n	100ec <frame_dummy+0x10>
   100e4:	4907      	ldr	r1, [pc, #28]	; (10104 <frame_dummy+0x28>)
   100e6:	4808      	ldr	r0, [pc, #32]	; (10108 <frame_dummy+0x2c>)
   100e8:	e000      	b.n	100ec <frame_dummy+0x10>
   100ea:	bf00      	nop
   100ec:	4807      	ldr	r0, [pc, #28]	; (1010c <frame_dummy+0x30>)
   100ee:	6803      	ldr	r3, [r0, #0]
   100f0:	2b00      	cmp	r3, #0
   100f2:	d100      	bne.n	100f6 <frame_dummy+0x1a>
   100f4:	bd10      	pop	{r4, pc}
   100f6:	4b06      	ldr	r3, [pc, #24]	; (10110 <frame_dummy+0x34>)
   100f8:	2b00      	cmp	r3, #0
   100fa:	d0fb      	beq.n	100f4 <frame_dummy+0x18>
   100fc:	4798      	blx	r3
   100fe:	e7f9      	b.n	100f4 <frame_dummy+0x18>
   10100:	00000000 	.word	0x00000000
   10104:	20000404 	.word	0x20000404
   10108:	0002ba9c 	.word	0x0002ba9c
   1010c:	0002ba9c 	.word	0x0002ba9c
   10110:	00000000 	.word	0x00000000

00010114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
   10114:	b590      	push	{r4, r7, lr}
   10116:	b083      	sub	sp, #12
   10118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
   1011a:	1dfc      	adds	r4, r7, #7
   1011c:	4b0a      	ldr	r3, [pc, #40]	; (10148 <configure_eeprom+0x34>)
   1011e:	4798      	blx	r3
   10120:	0003      	movs	r3, r0
   10122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
   10124:	1dfb      	adds	r3, r7, #7
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2b16      	cmp	r3, #22
   1012a:	d100      	bne.n	1012e <configure_eeprom+0x1a>
	{
		while (true);
   1012c:	e7fe      	b.n	1012c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
   1012e:	1dfb      	adds	r3, r7, #7
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	2b00      	cmp	r3, #0
   10134:	d003      	beq.n	1013e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
   10136:	4b05      	ldr	r3, [pc, #20]	; (1014c <configure_eeprom+0x38>)
   10138:	4798      	blx	r3
		eeprom_emulator_init();
   1013a:	4b03      	ldr	r3, [pc, #12]	; (10148 <configure_eeprom+0x34>)
   1013c:	4798      	blx	r3
	}
}
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	46bd      	mov	sp, r7
   10142:	b003      	add	sp, #12
   10144:	bd90      	pop	{r4, r7, pc}
   10146:	46c0      	nop			; (mov r8, r8)
   10148:	00024225 	.word	0x00024225
   1014c:	0002430d 	.word	0x0002430d

00010150 <init_eeprom>:

void init_eeprom(void)
{
   10150:	b580      	push	{r7, lr}
   10152:	af00      	add	r7, sp, #0
	configure_eeprom();
   10154:	4bf7      	ldr	r3, [pc, #988]	; (10534 <init_eeprom+0x3e4>)
   10156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   10158:	4bf7      	ldr	r3, [pc, #988]	; (10538 <init_eeprom+0x3e8>)
   1015a:	0019      	movs	r1, r3
   1015c:	2000      	movs	r0, #0
   1015e:	4bf7      	ldr	r3, [pc, #988]	; (1053c <init_eeprom+0x3ec>)
   10160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
   10162:	49f5      	ldr	r1, [pc, #980]	; (10538 <init_eeprom+0x3e8>)
   10164:	4bf6      	ldr	r3, [pc, #984]	; (10540 <init_eeprom+0x3f0>)
   10166:	221c      	movs	r2, #28
   10168:	0018      	movs	r0, r3
   1016a:	4bf6      	ldr	r3, [pc, #984]	; (10544 <init_eeprom+0x3f4>)
   1016c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
   1016e:	4bf4      	ldr	r3, [pc, #976]	; (10540 <init_eeprom+0x3f0>)
   10170:	791b      	ldrb	r3, [r3, #4]
   10172:	2b55      	cmp	r3, #85	; 0x55
   10174:	d02c      	beq.n	101d0 <init_eeprom+0x80>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
   10176:	4bf2      	ldr	r3, [pc, #968]	; (10540 <init_eeprom+0x3f0>)
   10178:	2200      	movs	r2, #0
   1017a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
   1017c:	4bf0      	ldr	r3, [pc, #960]	; (10540 <init_eeprom+0x3f0>)
   1017e:	2255      	movs	r2, #85	; 0x55
   10180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
   10182:	4bef      	ldr	r3, [pc, #956]	; (10540 <init_eeprom+0x3f0>)
   10184:	2200      	movs	r2, #0
   10186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   10188:	4bed      	ldr	r3, [pc, #948]	; (10540 <init_eeprom+0x3f0>)
   1018a:	2200      	movs	r2, #0
   1018c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   1018e:	4bec      	ldr	r3, [pc, #944]	; (10540 <init_eeprom+0x3f0>)
   10190:	2200      	movs	r2, #0
   10192:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries= 0;
   10194:	4bea      	ldr	r3, [pc, #936]	; (10540 <init_eeprom+0x3f0>)
   10196:	2200      	movs	r2, #0
   10198:	721a      	strb	r2, [r3, #8]
		
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   1019a:	4beb      	ldr	r3, [pc, #940]	; (10548 <init_eeprom+0x3f8>)
   1019c:	2210      	movs	r2, #16
   1019e:	2100      	movs	r1, #0
   101a0:	0018      	movs	r0, r3
   101a2:	4bea      	ldr	r3, [pc, #936]	; (1054c <init_eeprom+0x3fc>)
   101a4:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   101a6:	4be8      	ldr	r3, [pc, #928]	; (10548 <init_eeprom+0x3f8>)
   101a8:	4ae9      	ldr	r2, [pc, #932]	; (10550 <init_eeprom+0x400>)
   101aa:	ca03      	ldmia	r2!, {r0, r1}
   101ac:	c303      	stmia	r3!, {r0, r1}
   101ae:	8811      	ldrh	r1, [r2, #0]
   101b0:	8019      	strh	r1, [r3, #0]
   101b2:	7892      	ldrb	r2, [r2, #2]
   101b4:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   101b6:	49e2      	ldr	r1, [pc, #904]	; (10540 <init_eeprom+0x3f0>)
   101b8:	4bdf      	ldr	r3, [pc, #892]	; (10538 <init_eeprom+0x3e8>)
   101ba:	221c      	movs	r2, #28
   101bc:	0018      	movs	r0, r3
   101be:	4be1      	ldr	r3, [pc, #900]	; (10544 <init_eeprom+0x3f4>)
   101c0:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   101c2:	4bdd      	ldr	r3, [pc, #884]	; (10538 <init_eeprom+0x3e8>)
   101c4:	0019      	movs	r1, r3
   101c6:	2000      	movs	r0, #0
   101c8:	4be2      	ldr	r3, [pc, #904]	; (10554 <init_eeprom+0x404>)
   101ca:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   101cc:	4be2      	ldr	r3, [pc, #904]	; (10558 <init_eeprom+0x408>)
   101ce:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
   101d0:	4bd9      	ldr	r3, [pc, #868]	; (10538 <init_eeprom+0x3e8>)
   101d2:	0019      	movs	r1, r3
   101d4:	2001      	movs	r0, #1
   101d6:	4bd9      	ldr	r3, [pc, #868]	; (1053c <init_eeprom+0x3ec>)
   101d8:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
   101da:	49d7      	ldr	r1, [pc, #860]	; (10538 <init_eeprom+0x3e8>)
   101dc:	4bdf      	ldr	r3, [pc, #892]	; (1055c <init_eeprom+0x40c>)
   101de:	2238      	movs	r2, #56	; 0x38
   101e0:	0018      	movs	r0, r3
   101e2:	4bd8      	ldr	r3, [pc, #864]	; (10544 <init_eeprom+0x3f4>)
   101e4:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
   101e6:	4bdd      	ldr	r3, [pc, #884]	; (1055c <init_eeprom+0x40c>)
   101e8:	791b      	ldrb	r3, [r3, #4]
   101ea:	2b55      	cmp	r3, #85	; 0x55
   101ec:	d02e      	beq.n	1024c <init_eeprom+0xfc>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
   101ee:	4bdb      	ldr	r3, [pc, #876]	; (1055c <init_eeprom+0x40c>)
   101f0:	2200      	movs	r2, #0
   101f2:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
   101f4:	4bd9      	ldr	r3, [pc, #868]	; (1055c <init_eeprom+0x40c>)
   101f6:	2255      	movs	r2, #85	; 0x55
   101f8:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
   101fa:	4bd9      	ldr	r3, [pc, #868]	; (10560 <init_eeprom+0x410>)
   101fc:	221e      	movs	r2, #30
   101fe:	2100      	movs	r1, #0
   10200:	0018      	movs	r0, r3
   10202:	4bd2      	ldr	r3, [pc, #840]	; (1054c <init_eeprom+0x3fc>)
   10204:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
   10206:	4ad6      	ldr	r2, [pc, #856]	; (10560 <init_eeprom+0x410>)
   10208:	4bd6      	ldr	r3, [pc, #856]	; (10564 <init_eeprom+0x414>)
   1020a:	0010      	movs	r0, r2
   1020c:	0019      	movs	r1, r3
   1020e:	2310      	movs	r3, #16
   10210:	001a      	movs	r2, r3
   10212:	4bcc      	ldr	r3, [pc, #816]	; (10544 <init_eeprom+0x3f4>)
   10214:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
   10216:	4bd4      	ldr	r3, [pc, #848]	; (10568 <init_eeprom+0x418>)
   10218:	2214      	movs	r2, #20
   1021a:	2100      	movs	r1, #0
   1021c:	0018      	movs	r0, r3
   1021e:	4bcb      	ldr	r3, [pc, #812]	; (1054c <init_eeprom+0x3fc>)
   10220:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
   10222:	4ad1      	ldr	r2, [pc, #836]	; (10568 <init_eeprom+0x418>)
   10224:	4bd1      	ldr	r3, [pc, #836]	; (1056c <init_eeprom+0x41c>)
   10226:	0010      	movs	r0, r2
   10228:	0019      	movs	r1, r3
   1022a:	230b      	movs	r3, #11
   1022c:	001a      	movs	r2, r3
   1022e:	4bc5      	ldr	r3, [pc, #788]	; (10544 <init_eeprom+0x3f4>)
   10230:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
   10232:	49ca      	ldr	r1, [pc, #808]	; (1055c <init_eeprom+0x40c>)
   10234:	4bc0      	ldr	r3, [pc, #768]	; (10538 <init_eeprom+0x3e8>)
   10236:	2238      	movs	r2, #56	; 0x38
   10238:	0018      	movs	r0, r3
   1023a:	4bc2      	ldr	r3, [pc, #776]	; (10544 <init_eeprom+0x3f4>)
   1023c:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
   1023e:	4bbe      	ldr	r3, [pc, #760]	; (10538 <init_eeprom+0x3e8>)
   10240:	0019      	movs	r1, r3
   10242:	2001      	movs	r0, #1
   10244:	4bc3      	ldr	r3, [pc, #780]	; (10554 <init_eeprom+0x404>)
   10246:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10248:	4bc3      	ldr	r3, [pc, #780]	; (10558 <init_eeprom+0x408>)
   1024a:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
   1024c:	4bba      	ldr	r3, [pc, #744]	; (10538 <init_eeprom+0x3e8>)
   1024e:	0019      	movs	r1, r3
   10250:	2002      	movs	r0, #2
   10252:	4bba      	ldr	r3, [pc, #744]	; (1053c <init_eeprom+0x3ec>)
   10254:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
   10256:	49b8      	ldr	r1, [pc, #736]	; (10538 <init_eeprom+0x3e8>)
   10258:	4bc5      	ldr	r3, [pc, #788]	; (10570 <init_eeprom+0x420>)
   1025a:	2238      	movs	r2, #56	; 0x38
   1025c:	0018      	movs	r0, r3
   1025e:	4bb9      	ldr	r3, [pc, #740]	; (10544 <init_eeprom+0x3f4>)
   10260:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
   10262:	4bc3      	ldr	r3, [pc, #780]	; (10570 <init_eeprom+0x420>)
   10264:	791b      	ldrb	r3, [r3, #4]
   10266:	2b55      	cmp	r3, #85	; 0x55
   10268:	d03c      	beq.n	102e4 <init_eeprom+0x194>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
   1026a:	4bc1      	ldr	r3, [pc, #772]	; (10570 <init_eeprom+0x420>)
   1026c:	2200      	movs	r2, #0
   1026e:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
   10270:	4bbf      	ldr	r3, [pc, #764]	; (10570 <init_eeprom+0x420>)
   10272:	2255      	movs	r2, #85	; 0x55
   10274:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
   10276:	4bbf      	ldr	r3, [pc, #764]	; (10574 <init_eeprom+0x424>)
   10278:	2210      	movs	r2, #16
   1027a:	2100      	movs	r1, #0
   1027c:	0018      	movs	r0, r3
   1027e:	4bb3      	ldr	r3, [pc, #716]	; (1054c <init_eeprom+0x3fc>)
   10280:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
   10282:	4bbb      	ldr	r3, [pc, #748]	; (10570 <init_eeprom+0x420>)
   10284:	2205      	movs	r2, #5
   10286:	49bc      	ldr	r1, [pc, #752]	; (10578 <init_eeprom+0x428>)
   10288:	189b      	adds	r3, r3, r2
   1028a:	2210      	movs	r2, #16
   1028c:	0018      	movs	r0, r3
   1028e:	4bad      	ldr	r3, [pc, #692]	; (10544 <init_eeprom+0x3f4>)
   10290:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
   10292:	4bba      	ldr	r3, [pc, #744]	; (1057c <init_eeprom+0x42c>)
   10294:	2210      	movs	r2, #16
   10296:	2100      	movs	r1, #0
   10298:	0018      	movs	r0, r3
   1029a:	4bac      	ldr	r3, [pc, #688]	; (1054c <init_eeprom+0x3fc>)
   1029c:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
   1029e:	4ab8      	ldr	r2, [pc, #736]	; (10580 <init_eeprom+0x430>)
   102a0:	4bb8      	ldr	r3, [pc, #736]	; (10584 <init_eeprom+0x434>)
   102a2:	0010      	movs	r0, r2
   102a4:	0019      	movs	r1, r3
   102a6:	230a      	movs	r3, #10
   102a8:	001a      	movs	r2, r3
   102aa:	4ba6      	ldr	r3, [pc, #664]	; (10544 <init_eeprom+0x3f4>)
   102ac:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
   102ae:	4bb3      	ldr	r3, [pc, #716]	; (1057c <init_eeprom+0x42c>)
   102b0:	2210      	movs	r2, #16
   102b2:	2100      	movs	r1, #0
   102b4:	0018      	movs	r0, r3
   102b6:	4ba5      	ldr	r3, [pc, #660]	; (1054c <init_eeprom+0x3fc>)
   102b8:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
   102ba:	4ab0      	ldr	r2, [pc, #704]	; (1057c <init_eeprom+0x42c>)
   102bc:	4bb2      	ldr	r3, [pc, #712]	; (10588 <init_eeprom+0x438>)
   102be:	0010      	movs	r0, r2
   102c0:	0019      	movs	r1, r3
   102c2:	230d      	movs	r3, #13
   102c4:	001a      	movs	r2, r3
   102c6:	4b9f      	ldr	r3, [pc, #636]	; (10544 <init_eeprom+0x3f4>)
   102c8:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
   102ca:	49a9      	ldr	r1, [pc, #676]	; (10570 <init_eeprom+0x420>)
   102cc:	4b9a      	ldr	r3, [pc, #616]	; (10538 <init_eeprom+0x3e8>)
   102ce:	2238      	movs	r2, #56	; 0x38
   102d0:	0018      	movs	r0, r3
   102d2:	4b9c      	ldr	r3, [pc, #624]	; (10544 <init_eeprom+0x3f4>)
   102d4:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
   102d6:	4b98      	ldr	r3, [pc, #608]	; (10538 <init_eeprom+0x3e8>)
   102d8:	0019      	movs	r1, r3
   102da:	2002      	movs	r0, #2
   102dc:	4b9d      	ldr	r3, [pc, #628]	; (10554 <init_eeprom+0x404>)
   102de:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   102e0:	4b9d      	ldr	r3, [pc, #628]	; (10558 <init_eeprom+0x408>)
   102e2:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
   102e4:	4b94      	ldr	r3, [pc, #592]	; (10538 <init_eeprom+0x3e8>)
   102e6:	0019      	movs	r1, r3
   102e8:	2008      	movs	r0, #8
   102ea:	4b94      	ldr	r3, [pc, #592]	; (1053c <init_eeprom+0x3ec>)
   102ec:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
   102ee:	4aa7      	ldr	r2, [pc, #668]	; (1058c <init_eeprom+0x43c>)
   102f0:	4b91      	ldr	r3, [pc, #580]	; (10538 <init_eeprom+0x3e8>)
   102f2:	0010      	movs	r0, r2
   102f4:	0019      	movs	r1, r3
   102f6:	2308      	movs	r3, #8
   102f8:	001a      	movs	r2, r3
   102fa:	4b92      	ldr	r3, [pc, #584]	; (10544 <init_eeprom+0x3f4>)
   102fc:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
   102fe:	4ba3      	ldr	r3, [pc, #652]	; (1058c <init_eeprom+0x43c>)
   10300:	781b      	ldrb	r3, [r3, #0]
   10302:	2b55      	cmp	r3, #85	; 0x55
   10304:	d01d      	beq.n	10342 <init_eeprom+0x1f2>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
   10306:	4ba1      	ldr	r3, [pc, #644]	; (1058c <init_eeprom+0x43c>)
   10308:	2255      	movs	r2, #85	; 0x55
   1030a:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
   1030c:	4b9f      	ldr	r3, [pc, #636]	; (1058c <init_eeprom+0x43c>)
   1030e:	220f      	movs	r2, #15
   10310:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
   10312:	4b9e      	ldr	r3, [pc, #632]	; (1058c <init_eeprom+0x43c>)
   10314:	2200      	movs	r2, #0
   10316:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
   10318:	4b9c      	ldr	r3, [pc, #624]	; (1058c <init_eeprom+0x43c>)
   1031a:	2200      	movs	r2, #0
   1031c:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
   1031e:	4b9b      	ldr	r3, [pc, #620]	; (1058c <init_eeprom+0x43c>)
   10320:	2201      	movs	r2, #1
   10322:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10324:	4a84      	ldr	r2, [pc, #528]	; (10538 <init_eeprom+0x3e8>)
   10326:	4b99      	ldr	r3, [pc, #612]	; (1058c <init_eeprom+0x43c>)
   10328:	0010      	movs	r0, r2
   1032a:	0019      	movs	r1, r3
   1032c:	2308      	movs	r3, #8
   1032e:	001a      	movs	r2, r3
   10330:	4b84      	ldr	r3, [pc, #528]	; (10544 <init_eeprom+0x3f4>)
   10332:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10334:	4b80      	ldr	r3, [pc, #512]	; (10538 <init_eeprom+0x3e8>)
   10336:	0019      	movs	r1, r3
   10338:	2008      	movs	r0, #8
   1033a:	4b86      	ldr	r3, [pc, #536]	; (10554 <init_eeprom+0x404>)
   1033c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1033e:	4b86      	ldr	r3, [pc, #536]	; (10558 <init_eeprom+0x408>)
   10340:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
   10342:	4b93      	ldr	r3, [pc, #588]	; (10590 <init_eeprom+0x440>)
   10344:	0019      	movs	r1, r3
   10346:	2003      	movs	r0, #3
   10348:	4b92      	ldr	r3, [pc, #584]	; (10594 <init_eeprom+0x444>)
   1034a:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
   1034c:	4b92      	ldr	r3, [pc, #584]	; (10598 <init_eeprom+0x448>)
   1034e:	0019      	movs	r1, r3
   10350:	2004      	movs	r0, #4
   10352:	4b90      	ldr	r3, [pc, #576]	; (10594 <init_eeprom+0x444>)
   10354:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
   10356:	4b91      	ldr	r3, [pc, #580]	; (1059c <init_eeprom+0x44c>)
   10358:	0019      	movs	r1, r3
   1035a:	2005      	movs	r0, #5
   1035c:	4b8d      	ldr	r3, [pc, #564]	; (10594 <init_eeprom+0x444>)
   1035e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
   10360:	4b8f      	ldr	r3, [pc, #572]	; (105a0 <init_eeprom+0x450>)
   10362:	0019      	movs	r1, r3
   10364:	2006      	movs	r0, #6
   10366:	4b8b      	ldr	r3, [pc, #556]	; (10594 <init_eeprom+0x444>)
   10368:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
   1036a:	4b8e      	ldr	r3, [pc, #568]	; (105a4 <init_eeprom+0x454>)
   1036c:	0019      	movs	r1, r3
   1036e:	2007      	movs	r0, #7
   10370:	4b88      	ldr	r3, [pc, #544]	; (10594 <init_eeprom+0x444>)
   10372:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
   10374:	4b76      	ldr	r3, [pc, #472]	; (10550 <init_eeprom+0x400>)
   10376:	0019      	movs	r1, r3
   10378:	2009      	movs	r0, #9
   1037a:	4b86      	ldr	r3, [pc, #536]	; (10594 <init_eeprom+0x444>)
   1037c:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
   1037e:	4b74      	ldr	r3, [pc, #464]	; (10550 <init_eeprom+0x400>)
   10380:	0019      	movs	r1, r3
   10382:	200a      	movs	r0, #10
   10384:	4b83      	ldr	r3, [pc, #524]	; (10594 <init_eeprom+0x444>)
   10386:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
   10388:	4b71      	ldr	r3, [pc, #452]	; (10550 <init_eeprom+0x400>)
   1038a:	0019      	movs	r1, r3
   1038c:	200b      	movs	r0, #11
   1038e:	4b81      	ldr	r3, [pc, #516]	; (10594 <init_eeprom+0x444>)
   10390:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
   10392:	4b6f      	ldr	r3, [pc, #444]	; (10550 <init_eeprom+0x400>)
   10394:	0019      	movs	r1, r3
   10396:	200c      	movs	r0, #12
   10398:	4b7e      	ldr	r3, [pc, #504]	; (10594 <init_eeprom+0x444>)
   1039a:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
   1039c:	4b6c      	ldr	r3, [pc, #432]	; (10550 <init_eeprom+0x400>)
   1039e:	0019      	movs	r1, r3
   103a0:	200d      	movs	r0, #13
   103a2:	4b7c      	ldr	r3, [pc, #496]	; (10594 <init_eeprom+0x444>)
   103a4:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
   103a6:	4b6a      	ldr	r3, [pc, #424]	; (10550 <init_eeprom+0x400>)
   103a8:	0019      	movs	r1, r3
   103aa:	200e      	movs	r0, #14
   103ac:	4b79      	ldr	r3, [pc, #484]	; (10594 <init_eeprom+0x444>)
   103ae:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
   103b0:	4b67      	ldr	r3, [pc, #412]	; (10550 <init_eeprom+0x400>)
   103b2:	0019      	movs	r1, r3
   103b4:	200f      	movs	r0, #15
   103b6:	4b77      	ldr	r3, [pc, #476]	; (10594 <init_eeprom+0x444>)
   103b8:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
   103ba:	4b65      	ldr	r3, [pc, #404]	; (10550 <init_eeprom+0x400>)
   103bc:	0019      	movs	r1, r3
   103be:	2010      	movs	r0, #16
   103c0:	4b74      	ldr	r3, [pc, #464]	; (10594 <init_eeprom+0x444>)
   103c2:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
   103c4:	4b62      	ldr	r3, [pc, #392]	; (10550 <init_eeprom+0x400>)
   103c6:	0019      	movs	r1, r3
   103c8:	2011      	movs	r0, #17
   103ca:	4b72      	ldr	r3, [pc, #456]	; (10594 <init_eeprom+0x444>)
   103cc:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
   103ce:	4b60      	ldr	r3, [pc, #384]	; (10550 <init_eeprom+0x400>)
   103d0:	0019      	movs	r1, r3
   103d2:	2012      	movs	r0, #18
   103d4:	4b6f      	ldr	r3, [pc, #444]	; (10594 <init_eeprom+0x444>)
   103d6:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
   103d8:	4b5d      	ldr	r3, [pc, #372]	; (10550 <init_eeprom+0x400>)
   103da:	0019      	movs	r1, r3
   103dc:	2013      	movs	r0, #19
   103de:	4b6d      	ldr	r3, [pc, #436]	; (10594 <init_eeprom+0x444>)
   103e0:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
   103e2:	4b5b      	ldr	r3, [pc, #364]	; (10550 <init_eeprom+0x400>)
   103e4:	0019      	movs	r1, r3
   103e6:	2014      	movs	r0, #20
   103e8:	4b6a      	ldr	r3, [pc, #424]	; (10594 <init_eeprom+0x444>)
   103ea:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
   103ec:	4b58      	ldr	r3, [pc, #352]	; (10550 <init_eeprom+0x400>)
   103ee:	0019      	movs	r1, r3
   103f0:	2015      	movs	r0, #21
   103f2:	4b68      	ldr	r3, [pc, #416]	; (10594 <init_eeprom+0x444>)
   103f4:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
   103f6:	4b56      	ldr	r3, [pc, #344]	; (10550 <init_eeprom+0x400>)
   103f8:	0019      	movs	r1, r3
   103fa:	2016      	movs	r0, #22
   103fc:	4b65      	ldr	r3, [pc, #404]	; (10594 <init_eeprom+0x444>)
   103fe:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
   10400:	4b53      	ldr	r3, [pc, #332]	; (10550 <init_eeprom+0x400>)
   10402:	0019      	movs	r1, r3
   10404:	2017      	movs	r0, #23
   10406:	4b63      	ldr	r3, [pc, #396]	; (10594 <init_eeprom+0x444>)
   10408:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1040a:	4b4b      	ldr	r3, [pc, #300]	; (10538 <init_eeprom+0x3e8>)
   1040c:	0019      	movs	r1, r3
   1040e:	2018      	movs	r0, #24
   10410:	4b4a      	ldr	r3, [pc, #296]	; (1053c <init_eeprom+0x3ec>)
   10412:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
   10414:	4a64      	ldr	r2, [pc, #400]	; (105a8 <init_eeprom+0x458>)
   10416:	4b48      	ldr	r3, [pc, #288]	; (10538 <init_eeprom+0x3e8>)
   10418:	0010      	movs	r0, r2
   1041a:	0019      	movs	r1, r3
   1041c:	2318      	movs	r3, #24
   1041e:	001a      	movs	r2, r3
   10420:	4b48      	ldr	r3, [pc, #288]	; (10544 <init_eeprom+0x3f4>)
   10422:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
   10424:	4b60      	ldr	r3, [pc, #384]	; (105a8 <init_eeprom+0x458>)
   10426:	781b      	ldrb	r3, [r3, #0]
   10428:	2b55      	cmp	r3, #85	; 0x55
   1042a:	d025      	beq.n	10478 <init_eeprom+0x328>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
   1042c:	4b5e      	ldr	r3, [pc, #376]	; (105a8 <init_eeprom+0x458>)
   1042e:	2255      	movs	r2, #85	; 0x55
   10430:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
   10432:	4b5d      	ldr	r3, [pc, #372]	; (105a8 <init_eeprom+0x458>)
   10434:	2200      	movs	r2, #0
   10436:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
   10438:	4b5b      	ldr	r3, [pc, #364]	; (105a8 <init_eeprom+0x458>)
   1043a:	2200      	movs	r2, #0
   1043c:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
   1043e:	4b5b      	ldr	r3, [pc, #364]	; (105ac <init_eeprom+0x45c>)
   10440:	2214      	movs	r2, #20
   10442:	2100      	movs	r1, #0
   10444:	0018      	movs	r0, r3
   10446:	4b41      	ldr	r3, [pc, #260]	; (1054c <init_eeprom+0x3fc>)
   10448:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
   1044a:	4a58      	ldr	r2, [pc, #352]	; (105ac <init_eeprom+0x45c>)
   1044c:	4b40      	ldr	r3, [pc, #256]	; (10550 <init_eeprom+0x400>)
   1044e:	0010      	movs	r0, r2
   10450:	0019      	movs	r1, r3
   10452:	230b      	movs	r3, #11
   10454:	001a      	movs	r2, r3
   10456:	4b3b      	ldr	r3, [pc, #236]	; (10544 <init_eeprom+0x3f4>)
   10458:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1045a:	4a37      	ldr	r2, [pc, #220]	; (10538 <init_eeprom+0x3e8>)
   1045c:	4b52      	ldr	r3, [pc, #328]	; (105a8 <init_eeprom+0x458>)
   1045e:	0010      	movs	r0, r2
   10460:	0019      	movs	r1, r3
   10462:	2318      	movs	r3, #24
   10464:	001a      	movs	r2, r3
   10466:	4b37      	ldr	r3, [pc, #220]	; (10544 <init_eeprom+0x3f4>)
   10468:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1046a:	4b33      	ldr	r3, [pc, #204]	; (10538 <init_eeprom+0x3e8>)
   1046c:	0019      	movs	r1, r3
   1046e:	2018      	movs	r0, #24
   10470:	4b38      	ldr	r3, [pc, #224]	; (10554 <init_eeprom+0x404>)
   10472:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10474:	4b38      	ldr	r3, [pc, #224]	; (10558 <init_eeprom+0x408>)
   10476:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
   10478:	4b2f      	ldr	r3, [pc, #188]	; (10538 <init_eeprom+0x3e8>)
   1047a:	0019      	movs	r1, r3
   1047c:	2019      	movs	r0, #25
   1047e:	4b2f      	ldr	r3, [pc, #188]	; (1053c <init_eeprom+0x3ec>)
   10480:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
   10482:	4a4b      	ldr	r2, [pc, #300]	; (105b0 <init_eeprom+0x460>)
   10484:	4b2c      	ldr	r3, [pc, #176]	; (10538 <init_eeprom+0x3e8>)
   10486:	0010      	movs	r0, r2
   10488:	0019      	movs	r1, r3
   1048a:	2330      	movs	r3, #48	; 0x30
   1048c:	001a      	movs	r2, r3
   1048e:	4b2d      	ldr	r3, [pc, #180]	; (10544 <init_eeprom+0x3f4>)
   10490:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
   10492:	4b47      	ldr	r3, [pc, #284]	; (105b0 <init_eeprom+0x460>)
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2b55      	cmp	r3, #85	; 0x55
   10498:	d03c      	beq.n	10514 <init_eeprom+0x3c4>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
   1049a:	4b45      	ldr	r3, [pc, #276]	; (105b0 <init_eeprom+0x460>)
   1049c:	2255      	movs	r2, #85	; 0x55
   1049e:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
   104a0:	4b44      	ldr	r3, [pc, #272]	; (105b4 <init_eeprom+0x464>)
   104a2:	2214      	movs	r2, #20
   104a4:	2100      	movs	r1, #0
   104a6:	0018      	movs	r0, r3
   104a8:	4b28      	ldr	r3, [pc, #160]	; (1054c <init_eeprom+0x3fc>)
   104aa:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
   104ac:	4a41      	ldr	r2, [pc, #260]	; (105b4 <init_eeprom+0x464>)
   104ae:	4b28      	ldr	r3, [pc, #160]	; (10550 <init_eeprom+0x400>)
   104b0:	0010      	movs	r0, r2
   104b2:	0019      	movs	r1, r3
   104b4:	230b      	movs	r3, #11
   104b6:	001a      	movs	r2, r3
   104b8:	4b22      	ldr	r3, [pc, #136]	; (10544 <init_eeprom+0x3f4>)
   104ba:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
   104bc:	4b3e      	ldr	r3, [pc, #248]	; (105b8 <init_eeprom+0x468>)
   104be:	2214      	movs	r2, #20
   104c0:	2100      	movs	r1, #0
   104c2:	0018      	movs	r0, r3
   104c4:	4b21      	ldr	r3, [pc, #132]	; (1054c <init_eeprom+0x3fc>)
   104c6:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
   104c8:	4a3b      	ldr	r2, [pc, #236]	; (105b8 <init_eeprom+0x468>)
   104ca:	4b21      	ldr	r3, [pc, #132]	; (10550 <init_eeprom+0x400>)
   104cc:	0010      	movs	r0, r2
   104ce:	0019      	movs	r1, r3
   104d0:	230b      	movs	r3, #11
   104d2:	001a      	movs	r2, r3
   104d4:	4b1b      	ldr	r3, [pc, #108]	; (10544 <init_eeprom+0x3f4>)
   104d6:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
   104d8:	4b35      	ldr	r3, [pc, #212]	; (105b0 <init_eeprom+0x460>)
   104da:	2200      	movs	r2, #0
   104dc:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
   104de:	4b34      	ldr	r3, [pc, #208]	; (105b0 <init_eeprom+0x460>)
   104e0:	2200      	movs	r2, #0
   104e2:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
   104e4:	4b32      	ldr	r3, [pc, #200]	; (105b0 <init_eeprom+0x460>)
   104e6:	2200      	movs	r2, #0
   104e8:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
   104ea:	4b31      	ldr	r3, [pc, #196]	; (105b0 <init_eeprom+0x460>)
   104ec:	2200      	movs	r2, #0
   104ee:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
   104f0:	4b2f      	ldr	r3, [pc, #188]	; (105b0 <init_eeprom+0x460>)
   104f2:	2200      	movs	r2, #0
   104f4:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   104f6:	4a10      	ldr	r2, [pc, #64]	; (10538 <init_eeprom+0x3e8>)
   104f8:	4b2d      	ldr	r3, [pc, #180]	; (105b0 <init_eeprom+0x460>)
   104fa:	0010      	movs	r0, r2
   104fc:	0019      	movs	r1, r3
   104fe:	2330      	movs	r3, #48	; 0x30
   10500:	001a      	movs	r2, r3
   10502:	4b10      	ldr	r3, [pc, #64]	; (10544 <init_eeprom+0x3f4>)
   10504:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10506:	4b0c      	ldr	r3, [pc, #48]	; (10538 <init_eeprom+0x3e8>)
   10508:	0019      	movs	r1, r3
   1050a:	2019      	movs	r0, #25
   1050c:	4b11      	ldr	r3, [pc, #68]	; (10554 <init_eeprom+0x404>)
   1050e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10510:	4b11      	ldr	r3, [pc, #68]	; (10558 <init_eeprom+0x408>)
   10512:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10514:	4b08      	ldr	r3, [pc, #32]	; (10538 <init_eeprom+0x3e8>)
   10516:	0019      	movs	r1, r3
   10518:	201a      	movs	r0, #26
   1051a:	4b08      	ldr	r3, [pc, #32]	; (1053c <init_eeprom+0x3ec>)
   1051c:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
   1051e:	4906      	ldr	r1, [pc, #24]	; (10538 <init_eeprom+0x3e8>)
   10520:	4b26      	ldr	r3, [pc, #152]	; (105bc <init_eeprom+0x46c>)
   10522:	2230      	movs	r2, #48	; 0x30
   10524:	0018      	movs	r0, r3
   10526:	4b07      	ldr	r3, [pc, #28]	; (10544 <init_eeprom+0x3f4>)
   10528:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   1052a:	4b24      	ldr	r3, [pc, #144]	; (105bc <init_eeprom+0x46c>)
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	b2db      	uxtb	r3, r3
   10530:	e046      	b.n	105c0 <init_eeprom+0x470>
   10532:	46c0      	nop			; (mov r8, r8)
   10534:	00010115 	.word	0x00010115
   10538:	20000784 	.word	0x20000784
   1053c:	0002443d 	.word	0x0002443d
   10540:	200007f8 	.word	0x200007f8
   10544:	00029725 	.word	0x00029725
   10548:	20000804 	.word	0x20000804
   1054c:	0002975b 	.word	0x0002975b
   10550:	0002a35c 	.word	0x0002a35c
   10554:	00024331 	.word	0x00024331
   10558:	000244d9 	.word	0x000244d9
   1055c:	2000071c 	.word	0x2000071c
   10560:	20000721 	.word	0x20000721
   10564:	0002a368 	.word	0x0002a368
   10568:	2000073f 	.word	0x2000073f
   1056c:	0002a378 	.word	0x0002a378
   10570:	200007c0 	.word	0x200007c0
   10574:	200007c5 	.word	0x200007c5
   10578:	0002a384 	.word	0x0002a384
   1057c:	200007e5 	.word	0x200007e5
   10580:	200007d5 	.word	0x200007d5
   10584:	0002a394 	.word	0x0002a394
   10588:	0002a3a0 	.word	0x0002a3a0
   1058c:	20000814 	.word	0x20000814
   10590:	0002a3b0 	.word	0x0002a3b0
   10594:	0001072d 	.word	0x0001072d
   10598:	0002a3bc 	.word	0x0002a3bc
   1059c:	0002a3c8 	.word	0x0002a3c8
   105a0:	0002a3d4 	.word	0x0002a3d4
   105a4:	0002a3e0 	.word	0x0002a3e0
   105a8:	2000083c 	.word	0x2000083c
   105ac:	20000840 	.word	0x20000840
   105b0:	20000754 	.word	0x20000754
   105b4:	2000075c 	.word	0x2000075c
   105b8:	20000770 	.word	0x20000770
   105bc:	20000854 	.word	0x20000854
   105c0:	2b55      	cmp	r3, #85	; 0x55
   105c2:	d065      	beq.n	10690 <init_eeprom+0x540>
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
   105c4:	4b51      	ldr	r3, [pc, #324]	; (1070c <init_eeprom+0x5bc>)
   105c6:	2255      	movs	r2, #85	; 0x55
   105c8:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
   105ca:	4b50      	ldr	r3, [pc, #320]	; (1070c <init_eeprom+0x5bc>)
   105cc:	2200      	movs	r2, #0
   105ce:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
   105d0:	4b4e      	ldr	r3, [pc, #312]	; (1070c <init_eeprom+0x5bc>)
   105d2:	2232      	movs	r2, #50	; 0x32
   105d4:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
   105d6:	4b4d      	ldr	r3, [pc, #308]	; (1070c <init_eeprom+0x5bc>)
   105d8:	224f      	movs	r2, #79	; 0x4f
   105da:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
   105dc:	4b4b      	ldr	r3, [pc, #300]	; (1070c <init_eeprom+0x5bc>)
   105de:	2254      	movs	r2, #84	; 0x54
   105e0:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
   105e2:	4b4a      	ldr	r3, [pc, #296]	; (1070c <init_eeprom+0x5bc>)
   105e4:	2202      	movs	r2, #2
   105e6:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
   105e8:	4b48      	ldr	r3, [pc, #288]	; (1070c <init_eeprom+0x5bc>)
   105ea:	2200      	movs	r2, #0
   105ec:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
   105ee:	4b47      	ldr	r3, [pc, #284]	; (1070c <init_eeprom+0x5bc>)
   105f0:	2200      	movs	r2, #0
   105f2:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
   105f4:	4b45      	ldr	r3, [pc, #276]	; (1070c <init_eeprom+0x5bc>)
   105f6:	2200      	movs	r2, #0
   105f8:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
   105fa:	4b44      	ldr	r3, [pc, #272]	; (1070c <init_eeprom+0x5bc>)
   105fc:	2200      	movs	r2, #0
   105fe:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
   10600:	4b42      	ldr	r3, [pc, #264]	; (1070c <init_eeprom+0x5bc>)
   10602:	2200      	movs	r2, #0
   10604:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
   10606:	4b41      	ldr	r3, [pc, #260]	; (1070c <init_eeprom+0x5bc>)
   10608:	2200      	movs	r2, #0
   1060a:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
   1060c:	4b3f      	ldr	r3, [pc, #252]	; (1070c <init_eeprom+0x5bc>)
   1060e:	2200      	movs	r2, #0
   10610:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
   10612:	4b3e      	ldr	r3, [pc, #248]	; (1070c <init_eeprom+0x5bc>)
   10614:	2200      	movs	r2, #0
   10616:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
   10618:	4b3c      	ldr	r3, [pc, #240]	; (1070c <init_eeprom+0x5bc>)
   1061a:	2200      	movs	r2, #0
   1061c:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
   1061e:	4b3b      	ldr	r3, [pc, #236]	; (1070c <init_eeprom+0x5bc>)
   10620:	2200      	movs	r2, #0
   10622:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
   10624:	4b39      	ldr	r3, [pc, #228]	; (1070c <init_eeprom+0x5bc>)
   10626:	2200      	movs	r2, #0
   10628:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
   1062a:	4b38      	ldr	r3, [pc, #224]	; (1070c <init_eeprom+0x5bc>)
   1062c:	2255      	movs	r2, #85	; 0x55
   1062e:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
   10630:	4b36      	ldr	r3, [pc, #216]	; (1070c <init_eeprom+0x5bc>)
   10632:	2278      	movs	r2, #120	; 0x78
   10634:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
   10636:	4b35      	ldr	r3, [pc, #212]	; (1070c <init_eeprom+0x5bc>)
   10638:	2200      	movs	r2, #0
   1063a:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
   1063c:	4b33      	ldr	r3, [pc, #204]	; (1070c <init_eeprom+0x5bc>)
   1063e:	2200      	movs	r2, #0
   10640:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
   10642:	4b32      	ldr	r3, [pc, #200]	; (1070c <init_eeprom+0x5bc>)
   10644:	2220      	movs	r2, #32
   10646:	2101      	movs	r1, #1
   10648:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
   1064a:	4b30      	ldr	r3, [pc, #192]	; (1070c <init_eeprom+0x5bc>)
   1064c:	2250      	movs	r2, #80	; 0x50
   1064e:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
   10650:	4b2e      	ldr	r3, [pc, #184]	; (1070c <init_eeprom+0x5bc>)
   10652:	2224      	movs	r2, #36	; 0x24
   10654:	2101      	movs	r1, #1
   10656:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_ON;
   10658:	4b2c      	ldr	r3, [pc, #176]	; (1070c <init_eeprom+0x5bc>)
   1065a:	2225      	movs	r2, #37	; 0x25
   1065c:	2102      	movs	r1, #2
   1065e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.over_under_DetectionMethod	= MOTOR_UNDEROVER_DETECTION_CURRENT;
   10660:	4b2a      	ldr	r3, [pc, #168]	; (1070c <init_eeprom+0x5bc>)
   10662:	2226      	movs	r2, #38	; 0x26
   10664:	2102      	movs	r1, #2
   10666:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypass			= MOTOR_VOLTAGE_BYPASS_OFF;
   10668:	4b28      	ldr	r3, [pc, #160]	; (1070c <init_eeprom+0x5bc>)
   1066a:	2227      	movs	r2, #39	; 0x27
   1066c:	2100      	movs	r1, #0
   1066e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypassTime		= 10000L;
   10670:	4b26      	ldr	r3, [pc, #152]	; (1070c <init_eeprom+0x5bc>)
   10672:	4a27      	ldr	r2, [pc, #156]	; (10710 <init_eeprom+0x5c0>)
   10674:	629a      	str	r2, [r3, #40]	; 0x28

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   10676:	4925      	ldr	r1, [pc, #148]	; (1070c <init_eeprom+0x5bc>)
   10678:	4b26      	ldr	r3, [pc, #152]	; (10714 <init_eeprom+0x5c4>)
   1067a:	2230      	movs	r2, #48	; 0x30
   1067c:	0018      	movs	r0, r3
   1067e:	4b26      	ldr	r3, [pc, #152]	; (10718 <init_eeprom+0x5c8>)
   10680:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10682:	4b24      	ldr	r3, [pc, #144]	; (10714 <init_eeprom+0x5c4>)
   10684:	0019      	movs	r1, r3
   10686:	201a      	movs	r0, #26
   10688:	4b24      	ldr	r3, [pc, #144]	; (1071c <init_eeprom+0x5cc>)
   1068a:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1068c:	4b24      	ldr	r3, [pc, #144]	; (10720 <init_eeprom+0x5d0>)
   1068e:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   10690:	4b20      	ldr	r3, [pc, #128]	; (10714 <init_eeprom+0x5c4>)
   10692:	0019      	movs	r1, r3
   10694:	201b      	movs	r0, #27
   10696:	4b23      	ldr	r3, [pc, #140]	; (10724 <init_eeprom+0x5d4>)
   10698:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
   1069a:	491e      	ldr	r1, [pc, #120]	; (10714 <init_eeprom+0x5c4>)
   1069c:	4b22      	ldr	r3, [pc, #136]	; (10728 <init_eeprom+0x5d8>)
   1069e:	2210      	movs	r2, #16
   106a0:	0018      	movs	r0, r3
   106a2:	4b1d      	ldr	r3, [pc, #116]	; (10718 <init_eeprom+0x5c8>)
   106a4:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   106a6:	4b20      	ldr	r3, [pc, #128]	; (10728 <init_eeprom+0x5d8>)
   106a8:	781b      	ldrb	r3, [r3, #0]
   106aa:	2b55      	cmp	r3, #85	; 0x55
   106ac:	d02a      	beq.n	10704 <init_eeprom+0x5b4>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
   106ae:	4b1e      	ldr	r3, [pc, #120]	; (10728 <init_eeprom+0x5d8>)
   106b0:	2255      	movs	r2, #85	; 0x55
   106b2:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
   106b4:	4b1c      	ldr	r3, [pc, #112]	; (10728 <init_eeprom+0x5d8>)
   106b6:	2201      	movs	r2, #1
   106b8:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
   106ba:	4b1b      	ldr	r3, [pc, #108]	; (10728 <init_eeprom+0x5d8>)
   106bc:	2201      	movs	r2, #1
   106be:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
   106c0:	4b19      	ldr	r3, [pc, #100]	; (10728 <init_eeprom+0x5d8>)
   106c2:	2200      	movs	r2, #0
   106c4:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
   106c6:	4b18      	ldr	r3, [pc, #96]	; (10728 <init_eeprom+0x5d8>)
   106c8:	2200      	movs	r2, #0
   106ca:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
   106cc:	4b16      	ldr	r3, [pc, #88]	; (10728 <init_eeprom+0x5d8>)
   106ce:	2200      	movs	r2, #0
   106d0:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
   106d2:	4b15      	ldr	r3, [pc, #84]	; (10728 <init_eeprom+0x5d8>)
   106d4:	2200      	movs	r2, #0
   106d6:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
   106d8:	4b13      	ldr	r3, [pc, #76]	; (10728 <init_eeprom+0x5d8>)
   106da:	2200      	movs	r2, #0
   106dc:	71da      	strb	r2, [r3, #7]
		
		factory_settings_parameter_struct.DeviceId_ee				= 0;
   106de:	4b12      	ldr	r3, [pc, #72]	; (10728 <init_eeprom+0x5d8>)
   106e0:	2200      	movs	r2, #0
   106e2:	609a      	str	r2, [r3, #8]
		factory_settings_parameter_struct.dateCode					= 0;
   106e4:	4b10      	ldr	r3, [pc, #64]	; (10728 <init_eeprom+0x5d8>)
   106e6:	2200      	movs	r2, #0
   106e8:	60da      	str	r2, [r3, #12]

		//memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
		//strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
   106ea:	490f      	ldr	r1, [pc, #60]	; (10728 <init_eeprom+0x5d8>)
   106ec:	4b09      	ldr	r3, [pc, #36]	; (10714 <init_eeprom+0x5c4>)
   106ee:	2210      	movs	r2, #16
   106f0:	0018      	movs	r0, r3
   106f2:	4b09      	ldr	r3, [pc, #36]	; (10718 <init_eeprom+0x5c8>)
   106f4:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   106f6:	4b07      	ldr	r3, [pc, #28]	; (10714 <init_eeprom+0x5c4>)
   106f8:	0019      	movs	r1, r3
   106fa:	201b      	movs	r0, #27
   106fc:	4b07      	ldr	r3, [pc, #28]	; (1071c <init_eeprom+0x5cc>)
   106fe:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10700:	4b07      	ldr	r3, [pc, #28]	; (10720 <init_eeprom+0x5d0>)
   10702:	4798      	blx	r3
	}
}
   10704:	46c0      	nop			; (mov r8, r8)
   10706:	46bd      	mov	sp, r7
   10708:	bd80      	pop	{r7, pc}
   1070a:	46c0      	nop			; (mov r8, r8)
   1070c:	20000854 	.word	0x20000854
   10710:	00002710 	.word	0x00002710
   10714:	20000784 	.word	0x20000784
   10718:	00029725 	.word	0x00029725
   1071c:	00024331 	.word	0x00024331
   10720:	000244d9 	.word	0x000244d9
   10724:	0002443d 	.word	0x0002443d
   10728:	2000082c 	.word	0x2000082c

0001072c <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
   1072c:	b580      	push	{r7, lr}
   1072e:	b088      	sub	sp, #32
   10730:	af00      	add	r7, sp, #0
   10732:	0002      	movs	r2, r0
   10734:	6039      	str	r1, [r7, #0]
   10736:	1dfb      	adds	r3, r7, #7
   10738:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
   1073a:	4b28      	ldr	r3, [pc, #160]	; (107dc <config_mobile_no_ee+0xb0>)
   1073c:	223c      	movs	r2, #60	; 0x3c
   1073e:	2100      	movs	r1, #0
   10740:	0018      	movs	r0, r3
   10742:	4b27      	ldr	r3, [pc, #156]	; (107e0 <config_mobile_no_ee+0xb4>)
   10744:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
   10746:	4a25      	ldr	r2, [pc, #148]	; (107dc <config_mobile_no_ee+0xb0>)
   10748:	1dfb      	adds	r3, r7, #7
   1074a:	781b      	ldrb	r3, [r3, #0]
   1074c:	0011      	movs	r1, r2
   1074e:	0018      	movs	r0, r3
   10750:	4b24      	ldr	r3, [pc, #144]	; (107e4 <config_mobile_no_ee+0xb8>)
   10752:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10754:	2308      	movs	r3, #8
   10756:	18fa      	adds	r2, r7, r3
   10758:	4b20      	ldr	r3, [pc, #128]	; (107dc <config_mobile_no_ee+0xb0>)
   1075a:	0010      	movs	r0, r2
   1075c:	0019      	movs	r1, r3
   1075e:	2318      	movs	r3, #24
   10760:	001a      	movs	r2, r3
   10762:	4b21      	ldr	r3, [pc, #132]	; (107e8 <config_mobile_no_ee+0xbc>)
   10764:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
   10766:	2308      	movs	r3, #8
   10768:	18fb      	adds	r3, r7, r3
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	2b55      	cmp	r3, #85	; 0x55
   1076e:	d031      	beq.n	107d4 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
   10770:	2308      	movs	r3, #8
   10772:	18fb      	adds	r3, r7, r3
   10774:	2255      	movs	r2, #85	; 0x55
   10776:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
   10778:	2308      	movs	r3, #8
   1077a:	18fb      	adds	r3, r7, r3
   1077c:	2200      	movs	r2, #0
   1077e:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
   10780:	2308      	movs	r3, #8
   10782:	18fb      	adds	r3, r7, r3
   10784:	2200      	movs	r2, #0
   10786:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
   10788:	2308      	movs	r3, #8
   1078a:	18fb      	adds	r3, r7, r3
   1078c:	2200      	movs	r2, #0
   1078e:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10790:	2308      	movs	r3, #8
   10792:	18fb      	adds	r3, r7, r3
   10794:	3304      	adds	r3, #4
   10796:	2214      	movs	r2, #20
   10798:	2100      	movs	r1, #0
   1079a:	0018      	movs	r0, r3
   1079c:	4b10      	ldr	r3, [pc, #64]	; (107e0 <config_mobile_no_ee+0xb4>)
   1079e:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
   107a0:	683a      	ldr	r2, [r7, #0]
   107a2:	2308      	movs	r3, #8
   107a4:	18fb      	adds	r3, r7, r3
   107a6:	3304      	adds	r3, #4
   107a8:	0011      	movs	r1, r2
   107aa:	0018      	movs	r0, r3
   107ac:	4b0f      	ldr	r3, [pc, #60]	; (107ec <config_mobile_no_ee+0xc0>)
   107ae:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
   107b0:	4a0a      	ldr	r2, [pc, #40]	; (107dc <config_mobile_no_ee+0xb0>)
   107b2:	2308      	movs	r3, #8
   107b4:	18fb      	adds	r3, r7, r3
   107b6:	0010      	movs	r0, r2
   107b8:	0019      	movs	r1, r3
   107ba:	2318      	movs	r3, #24
   107bc:	001a      	movs	r2, r3
   107be:	4b0a      	ldr	r3, [pc, #40]	; (107e8 <config_mobile_no_ee+0xbc>)
   107c0:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
   107c2:	4a06      	ldr	r2, [pc, #24]	; (107dc <config_mobile_no_ee+0xb0>)
   107c4:	1dfb      	adds	r3, r7, #7
   107c6:	781b      	ldrb	r3, [r3, #0]
   107c8:	0011      	movs	r1, r2
   107ca:	0018      	movs	r0, r3
   107cc:	4b08      	ldr	r3, [pc, #32]	; (107f0 <config_mobile_no_ee+0xc4>)
   107ce:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   107d0:	4b08      	ldr	r3, [pc, #32]	; (107f4 <config_mobile_no_ee+0xc8>)
   107d2:	4798      	blx	r3
	}
}
   107d4:	46c0      	nop			; (mov r8, r8)
   107d6:	46bd      	mov	sp, r7
   107d8:	b008      	add	sp, #32
   107da:	bd80      	pop	{r7, pc}
   107dc:	20000784 	.word	0x20000784
   107e0:	0002975b 	.word	0x0002975b
   107e4:	0002443d 	.word	0x0002443d
   107e8:	00029725 	.word	0x00029725
   107ec:	000299db 	.word	0x000299db
   107f0:	00024331 	.word	0x00024331
   107f4:	000244d9 	.word	0x000244d9

000107f8 <getNumbers>:


void getNumbers(char *string)
{
   107f8:	b580      	push	{r7, lr}
   107fa:	b08a      	sub	sp, #40	; 0x28
   107fc:	af00      	add	r7, sp, #0
   107fe:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
   10800:	687b      	ldr	r3, [r7, #4]
   10802:	2200      	movs	r2, #0
   10804:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10806:	2327      	movs	r3, #39	; 0x27
   10808:	18fb      	adds	r3, r7, r3
   1080a:	2200      	movs	r2, #0
   1080c:	701a      	strb	r2, [r3, #0]
   1080e:	e063      	b.n	108d8 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10810:	4b37      	ldr	r3, [pc, #220]	; (108f0 <getNumbers+0xf8>)
   10812:	223c      	movs	r2, #60	; 0x3c
   10814:	2100      	movs	r1, #0
   10816:	0018      	movs	r0, r3
   10818:	4b36      	ldr	r3, [pc, #216]	; (108f4 <getNumbers+0xfc>)
   1081a:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   1081c:	2327      	movs	r3, #39	; 0x27
   1081e:	18fb      	adds	r3, r7, r3
   10820:	781b      	ldrb	r3, [r3, #0]
   10822:	3309      	adds	r3, #9
   10824:	b2db      	uxtb	r3, r3
   10826:	4a32      	ldr	r2, [pc, #200]	; (108f0 <getNumbers+0xf8>)
   10828:	0011      	movs	r1, r2
   1082a:	0018      	movs	r0, r3
   1082c:	4b32      	ldr	r3, [pc, #200]	; (108f8 <getNumbers+0x100>)
   1082e:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10830:	230c      	movs	r3, #12
   10832:	18fa      	adds	r2, r7, r3
   10834:	4b2e      	ldr	r3, [pc, #184]	; (108f0 <getNumbers+0xf8>)
   10836:	0010      	movs	r0, r2
   10838:	0019      	movs	r1, r3
   1083a:	2318      	movs	r3, #24
   1083c:	001a      	movs	r2, r3
   1083e:	4b2f      	ldr	r3, [pc, #188]	; (108fc <getNumbers+0x104>)
   10840:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
   10842:	4b2f      	ldr	r3, [pc, #188]	; (10900 <getNumbers+0x108>)
   10844:	78db      	ldrb	r3, [r3, #3]
   10846:	2227      	movs	r2, #39	; 0x27
   10848:	18ba      	adds	r2, r7, r2
   1084a:	7812      	ldrb	r2, [r2, #0]
   1084c:	429a      	cmp	r2, r3
   1084e:	d10f      	bne.n	10870 <getNumbers+0x78>
		{
			strcat(string,"P:");
   10850:	687b      	ldr	r3, [r7, #4]
   10852:	0018      	movs	r0, r3
   10854:	4b2b      	ldr	r3, [pc, #172]	; (10904 <getNumbers+0x10c>)
   10856:	4798      	blx	r3
   10858:	0003      	movs	r3, r0
   1085a:	001a      	movs	r2, r3
   1085c:	687b      	ldr	r3, [r7, #4]
   1085e:	189a      	adds	r2, r3, r2
   10860:	4b29      	ldr	r3, [pc, #164]	; (10908 <getNumbers+0x110>)
   10862:	0010      	movs	r0, r2
   10864:	0019      	movs	r1, r3
   10866:	2303      	movs	r3, #3
   10868:	001a      	movs	r2, r3
   1086a:	4b24      	ldr	r3, [pc, #144]	; (108fc <getNumbers+0x104>)
   1086c:	4798      	blx	r3
   1086e:	e015      	b.n	1089c <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
   10870:	4b23      	ldr	r3, [pc, #140]	; (10900 <getNumbers+0x108>)
   10872:	791b      	ldrb	r3, [r3, #4]
   10874:	2227      	movs	r2, #39	; 0x27
   10876:	18ba      	adds	r2, r7, r2
   10878:	7812      	ldrb	r2, [r2, #0]
   1087a:	429a      	cmp	r2, r3
   1087c:	d10e      	bne.n	1089c <getNumbers+0xa4>
		{
			strcat(string,"S:");
   1087e:	687b      	ldr	r3, [r7, #4]
   10880:	0018      	movs	r0, r3
   10882:	4b20      	ldr	r3, [pc, #128]	; (10904 <getNumbers+0x10c>)
   10884:	4798      	blx	r3
   10886:	0003      	movs	r3, r0
   10888:	001a      	movs	r2, r3
   1088a:	687b      	ldr	r3, [r7, #4]
   1088c:	189a      	adds	r2, r3, r2
   1088e:	4b1f      	ldr	r3, [pc, #124]	; (1090c <getNumbers+0x114>)
   10890:	0010      	movs	r0, r2
   10892:	0019      	movs	r1, r3
   10894:	2303      	movs	r3, #3
   10896:	001a      	movs	r2, r3
   10898:	4b18      	ldr	r3, [pc, #96]	; (108fc <getNumbers+0x104>)
   1089a:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
   1089c:	230c      	movs	r3, #12
   1089e:	18fb      	adds	r3, r7, r3
   108a0:	1d1a      	adds	r2, r3, #4
   108a2:	687b      	ldr	r3, [r7, #4]
   108a4:	0011      	movs	r1, r2
   108a6:	0018      	movs	r0, r3
   108a8:	4b19      	ldr	r3, [pc, #100]	; (10910 <getNumbers+0x118>)
   108aa:	4798      	blx	r3
		strcat(string,"\n");
   108ac:	687b      	ldr	r3, [r7, #4]
   108ae:	0018      	movs	r0, r3
   108b0:	4b14      	ldr	r3, [pc, #80]	; (10904 <getNumbers+0x10c>)
   108b2:	4798      	blx	r3
   108b4:	0003      	movs	r3, r0
   108b6:	001a      	movs	r2, r3
   108b8:	687b      	ldr	r3, [r7, #4]
   108ba:	189a      	adds	r2, r3, r2
   108bc:	4b15      	ldr	r3, [pc, #84]	; (10914 <getNumbers+0x11c>)
   108be:	0010      	movs	r0, r2
   108c0:	0019      	movs	r1, r3
   108c2:	2302      	movs	r3, #2
   108c4:	001a      	movs	r2, r3
   108c6:	4b0d      	ldr	r3, [pc, #52]	; (108fc <getNumbers+0x104>)
   108c8:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   108ca:	2327      	movs	r3, #39	; 0x27
   108cc:	18fb      	adds	r3, r7, r3
   108ce:	781a      	ldrb	r2, [r3, #0]
   108d0:	2327      	movs	r3, #39	; 0x27
   108d2:	18fb      	adds	r3, r7, r3
   108d4:	3201      	adds	r2, #1
   108d6:	701a      	strb	r2, [r3, #0]
   108d8:	4b09      	ldr	r3, [pc, #36]	; (10900 <getNumbers+0x108>)
   108da:	789b      	ldrb	r3, [r3, #2]
   108dc:	2227      	movs	r2, #39	; 0x27
   108de:	18ba      	adds	r2, r7, r2
   108e0:	7812      	ldrb	r2, [r2, #0]
   108e2:	429a      	cmp	r2, r3
   108e4:	d394      	bcc.n	10810 <getNumbers+0x18>
	}
}
   108e6:	46c0      	nop			; (mov r8, r8)
   108e8:	46bd      	mov	sp, r7
   108ea:	b00a      	add	sp, #40	; 0x28
   108ec:	bd80      	pop	{r7, pc}
   108ee:	46c0      	nop			; (mov r8, r8)
   108f0:	20000784 	.word	0x20000784
   108f4:	0002975b 	.word	0x0002975b
   108f8:	0002443d 	.word	0x0002443d
   108fc:	00029725 	.word	0x00029725
   10900:	20000814 	.word	0x20000814
   10904:	000299eb 	.word	0x000299eb
   10908:	0002a3ec 	.word	0x0002a3ec
   1090c:	0002a3f0 	.word	0x0002a3f0
   10910:	000299a5 	.word	0x000299a5
   10914:	0002a3f4 	.word	0x0002a3f4

00010918 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
   10918:	b580      	push	{r7, lr}
   1091a:	b088      	sub	sp, #32
   1091c:	af00      	add	r7, sp, #0
   1091e:	6078      	str	r0, [r7, #4]
   10920:	000a      	movs	r2, r1
   10922:	1cfb      	adds	r3, r7, #3
   10924:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
   10926:	687b      	ldr	r3, [r7, #4]
   10928:	2200      	movs	r2, #0
   1092a:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
   1092c:	4b15      	ldr	r3, [pc, #84]	; (10984 <getIndexedNumber+0x6c>)
   1092e:	789b      	ldrb	r3, [r3, #2]
   10930:	1cfa      	adds	r2, r7, #3
   10932:	7812      	ldrb	r2, [r2, #0]
   10934:	429a      	cmp	r2, r3
   10936:	d21f      	bcs.n	10978 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10938:	4b13      	ldr	r3, [pc, #76]	; (10988 <getIndexedNumber+0x70>)
   1093a:	223c      	movs	r2, #60	; 0x3c
   1093c:	2100      	movs	r1, #0
   1093e:	0018      	movs	r0, r3
   10940:	4b12      	ldr	r3, [pc, #72]	; (1098c <getIndexedNumber+0x74>)
   10942:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
   10944:	1cfb      	adds	r3, r7, #3
   10946:	781b      	ldrb	r3, [r3, #0]
   10948:	3309      	adds	r3, #9
   1094a:	b2db      	uxtb	r3, r3
   1094c:	4a0e      	ldr	r2, [pc, #56]	; (10988 <getIndexedNumber+0x70>)
   1094e:	0011      	movs	r1, r2
   10950:	0018      	movs	r0, r3
   10952:	4b0f      	ldr	r3, [pc, #60]	; (10990 <getIndexedNumber+0x78>)
   10954:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10956:	2308      	movs	r3, #8
   10958:	18fa      	adds	r2, r7, r3
   1095a:	4b0b      	ldr	r3, [pc, #44]	; (10988 <getIndexedNumber+0x70>)
   1095c:	0010      	movs	r0, r2
   1095e:	0019      	movs	r1, r3
   10960:	2318      	movs	r3, #24
   10962:	001a      	movs	r2, r3
   10964:	4b0b      	ldr	r3, [pc, #44]	; (10994 <getIndexedNumber+0x7c>)
   10966:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
   10968:	2308      	movs	r3, #8
   1096a:	18fb      	adds	r3, r7, r3
   1096c:	1d1a      	adds	r2, r3, #4
   1096e:	687b      	ldr	r3, [r7, #4]
   10970:	0011      	movs	r1, r2
   10972:	0018      	movs	r0, r3
   10974:	4b08      	ldr	r3, [pc, #32]	; (10998 <getIndexedNumber+0x80>)
   10976:	4798      	blx	r3
	}
	return IndexNo;
   10978:	687b      	ldr	r3, [r7, #4]
}
   1097a:	0018      	movs	r0, r3
   1097c:	46bd      	mov	sp, r7
   1097e:	b008      	add	sp, #32
   10980:	bd80      	pop	{r7, pc}
   10982:	46c0      	nop			; (mov r8, r8)
   10984:	20000814 	.word	0x20000814
   10988:	20000784 	.word	0x20000784
   1098c:	0002975b 	.word	0x0002975b
   10990:	0002443d 	.word	0x0002443d
   10994:	00029725 	.word	0x00029725
   10998:	000299a5 	.word	0x000299a5

0001099c <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
   1099c:	b580      	push	{r7, lr}
   1099e:	b088      	sub	sp, #32
   109a0:	af00      	add	r7, sp, #0
   109a2:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   109a4:	4b14      	ldr	r3, [pc, #80]	; (109f8 <isPrimaryNumber+0x5c>)
   109a6:	789b      	ldrb	r3, [r3, #2]
   109a8:	2b00      	cmp	r3, #0
   109aa:	d020      	beq.n	109ee <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
   109ac:	230c      	movs	r3, #12
   109ae:	18fb      	adds	r3, r7, r3
   109b0:	0018      	movs	r0, r3
   109b2:	2314      	movs	r3, #20
   109b4:	001a      	movs	r2, r3
   109b6:	2100      	movs	r1, #0
   109b8:	4b10      	ldr	r3, [pc, #64]	; (109fc <isPrimaryNumber+0x60>)
   109ba:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
   109bc:	4b0e      	ldr	r3, [pc, #56]	; (109f8 <isPrimaryNumber+0x5c>)
   109be:	78da      	ldrb	r2, [r3, #3]
   109c0:	230c      	movs	r3, #12
   109c2:	18fb      	adds	r3, r7, r3
   109c4:	0011      	movs	r1, r2
   109c6:	0018      	movs	r0, r3
   109c8:	4b0d      	ldr	r3, [pc, #52]	; (10a00 <isPrimaryNumber+0x64>)
   109ca:	4798      	blx	r3
		if(strstr(number,primaryNumber))
   109cc:	230c      	movs	r3, #12
   109ce:	18fa      	adds	r2, r7, r3
   109d0:	687b      	ldr	r3, [r7, #4]
   109d2:	0011      	movs	r1, r2
   109d4:	0018      	movs	r0, r3
   109d6:	4b0b      	ldr	r3, [pc, #44]	; (10a04 <isPrimaryNumber+0x68>)
   109d8:	4798      	blx	r3
   109da:	1e03      	subs	r3, r0, #0
   109dc:	d001      	beq.n	109e2 <isPrimaryNumber+0x46>
		{
			return true;
   109de:	2301      	movs	r3, #1
   109e0:	e006      	b.n	109f0 <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
   109e2:	687b      	ldr	r3, [r7, #4]
   109e4:	0018      	movs	r0, r3
   109e6:	4b08      	ldr	r3, [pc, #32]	; (10a08 <isPrimaryNumber+0x6c>)
   109e8:	4798      	blx	r3
   109ea:	0003      	movs	r3, r0
   109ec:	e000      	b.n	109f0 <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
   109ee:	2300      	movs	r3, #0
}
   109f0:	0018      	movs	r0, r3
   109f2:	46bd      	mov	sp, r7
   109f4:	b008      	add	sp, #32
   109f6:	bd80      	pop	{r7, pc}
   109f8:	20000814 	.word	0x20000814
   109fc:	0002975b 	.word	0x0002975b
   10a00:	00010919 	.word	0x00010919
   10a04:	00029a1b 	.word	0x00029a1b
   10a08:	00010a0d 	.word	0x00010a0d

00010a0c <isAlterNumber>:

bool isAlterNumber(char *number)
{
   10a0c:	b580      	push	{r7, lr}
   10a0e:	b082      	sub	sp, #8
   10a10:	af00      	add	r7, sp, #0
   10a12:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   10a14:	4b0b      	ldr	r3, [pc, #44]	; (10a44 <isAlterNumber+0x38>)
   10a16:	789b      	ldrb	r3, [r3, #2]
   10a18:	2b00      	cmp	r3, #0
   10a1a:	d00d      	beq.n	10a38 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
   10a1c:	4b0a      	ldr	r3, [pc, #40]	; (10a48 <isAlterNumber+0x3c>)
   10a1e:	789b      	ldrb	r3, [r3, #2]
   10a20:	2b00      	cmp	r3, #0
   10a22:	d009      	beq.n	10a38 <isAlterNumber+0x2c>
   10a24:	4a09      	ldr	r2, [pc, #36]	; (10a4c <isAlterNumber+0x40>)
   10a26:	687b      	ldr	r3, [r7, #4]
   10a28:	0011      	movs	r1, r2
   10a2a:	0018      	movs	r0, r3
   10a2c:	4b08      	ldr	r3, [pc, #32]	; (10a50 <isAlterNumber+0x44>)
   10a2e:	4798      	blx	r3
   10a30:	1e03      	subs	r3, r0, #0
   10a32:	d001      	beq.n	10a38 <isAlterNumber+0x2c>
		{
			return true;
   10a34:	2301      	movs	r3, #1
   10a36:	e000      	b.n	10a3a <isAlterNumber+0x2e>
		}
	}
	return false;
   10a38:	2300      	movs	r3, #0
}
   10a3a:	0018      	movs	r0, r3
   10a3c:	46bd      	mov	sp, r7
   10a3e:	b002      	add	sp, #8
   10a40:	bd80      	pop	{r7, pc}
   10a42:	46c0      	nop			; (mov r8, r8)
   10a44:	20000814 	.word	0x20000814
   10a48:	2000083c 	.word	0x2000083c
   10a4c:	20000840 	.word	0x20000840
   10a50:	00029a1b 	.word	0x00029a1b

00010a54 <isM2MNumber>:

bool isM2MNumber(char *number)
{
   10a54:	b580      	push	{r7, lr}
   10a56:	b082      	sub	sp, #8
   10a58:	af00      	add	r7, sp, #0
   10a5a:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
   10a5c:	4b09      	ldr	r3, [pc, #36]	; (10a84 <isM2MNumber+0x30>)
   10a5e:	785b      	ldrb	r3, [r3, #1]
   10a60:	2b00      	cmp	r3, #0
   10a62:	d009      	beq.n	10a78 <isM2MNumber+0x24>
   10a64:	4a08      	ldr	r2, [pc, #32]	; (10a88 <isM2MNumber+0x34>)
   10a66:	687b      	ldr	r3, [r7, #4]
   10a68:	0011      	movs	r1, r2
   10a6a:	0018      	movs	r0, r3
   10a6c:	4b07      	ldr	r3, [pc, #28]	; (10a8c <isM2MNumber+0x38>)
   10a6e:	4798      	blx	r3
   10a70:	1e03      	subs	r3, r0, #0
   10a72:	d001      	beq.n	10a78 <isM2MNumber+0x24>
	{
		return true;
   10a74:	2301      	movs	r3, #1
   10a76:	e000      	b.n	10a7a <isM2MNumber+0x26>
	}
	return false;
   10a78:	2300      	movs	r3, #0
}
   10a7a:	0018      	movs	r0, r3
   10a7c:	46bd      	mov	sp, r7
   10a7e:	b002      	add	sp, #8
   10a80:	bd80      	pop	{r7, pc}
   10a82:	46c0      	nop			; (mov r8, r8)
   10a84:	20000754 	.word	0x20000754
   10a88:	2000075c 	.word	0x2000075c
   10a8c:	00029a1b 	.word	0x00029a1b

00010a90 <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
   10a90:	b580      	push	{r7, lr}
   10a92:	b082      	sub	sp, #8
   10a94:	af00      	add	r7, sp, #0
   10a96:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
   10a98:	4b09      	ldr	r3, [pc, #36]	; (10ac0 <isM2MRemoteNumber+0x30>)
   10a9a:	78db      	ldrb	r3, [r3, #3]
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	d009      	beq.n	10ab4 <isM2MRemoteNumber+0x24>
   10aa0:	4a08      	ldr	r2, [pc, #32]	; (10ac4 <isM2MRemoteNumber+0x34>)
   10aa2:	687b      	ldr	r3, [r7, #4]
   10aa4:	0011      	movs	r1, r2
   10aa6:	0018      	movs	r0, r3
   10aa8:	4b07      	ldr	r3, [pc, #28]	; (10ac8 <isM2MRemoteNumber+0x38>)
   10aaa:	4798      	blx	r3
   10aac:	1e03      	subs	r3, r0, #0
   10aae:	d001      	beq.n	10ab4 <isM2MRemoteNumber+0x24>
	{
		return true;
   10ab0:	2301      	movs	r3, #1
   10ab2:	e000      	b.n	10ab6 <isM2MRemoteNumber+0x26>
	}
	return false;
   10ab4:	2300      	movs	r3, #0
}
   10ab6:	0018      	movs	r0, r3
   10ab8:	46bd      	mov	sp, r7
   10aba:	b002      	add	sp, #8
   10abc:	bd80      	pop	{r7, pc}
   10abe:	46c0      	nop			; (mov r8, r8)
   10ac0:	20000754 	.word	0x20000754
   10ac4:	20000770 	.word	0x20000770
   10ac8:	00029a1b 	.word	0x00029a1b

00010acc <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
   10acc:	b580      	push	{r7, lr}
   10ace:	b082      	sub	sp, #8
   10ad0:	af00      	add	r7, sp, #0
   10ad2:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
   10ad4:	4b09      	ldr	r3, [pc, #36]	; (10afc <getM2MNumber+0x30>)
   10ad6:	785b      	ldrb	r3, [r3, #1]
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d006      	beq.n	10aea <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
   10adc:	4a08      	ldr	r2, [pc, #32]	; (10b00 <getM2MNumber+0x34>)
   10ade:	687b      	ldr	r3, [r7, #4]
   10ae0:	0011      	movs	r1, r2
   10ae2:	0018      	movs	r0, r3
   10ae4:	4b07      	ldr	r3, [pc, #28]	; (10b04 <getM2MNumber+0x38>)
   10ae6:	4798      	blx	r3
   10ae8:	e002      	b.n	10af0 <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
   10aea:	687b      	ldr	r3, [r7, #4]
   10aec:	2200      	movs	r2, #0
   10aee:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
   10af0:	687b      	ldr	r3, [r7, #4]
}
   10af2:	0018      	movs	r0, r3
   10af4:	46bd      	mov	sp, r7
   10af6:	b002      	add	sp, #8
   10af8:	bd80      	pop	{r7, pc}
   10afa:	46c0      	nop			; (mov r8, r8)
   10afc:	20000754 	.word	0x20000754
   10b00:	2000075c 	.word	0x2000075c
   10b04:	000299db 	.word	0x000299db

00010b08 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
   10b08:	b580      	push	{r7, lr}
   10b0a:	b082      	sub	sp, #8
   10b0c:	af00      	add	r7, sp, #0
   10b0e:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
   10b10:	4b09      	ldr	r3, [pc, #36]	; (10b38 <getM2MRemoteNumber+0x30>)
   10b12:	78db      	ldrb	r3, [r3, #3]
   10b14:	2b00      	cmp	r3, #0
   10b16:	d006      	beq.n	10b26 <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
   10b18:	4a08      	ldr	r2, [pc, #32]	; (10b3c <getM2MRemoteNumber+0x34>)
   10b1a:	687b      	ldr	r3, [r7, #4]
   10b1c:	0011      	movs	r1, r2
   10b1e:	0018      	movs	r0, r3
   10b20:	4b07      	ldr	r3, [pc, #28]	; (10b40 <getM2MRemoteNumber+0x38>)
   10b22:	4798      	blx	r3
   10b24:	e002      	b.n	10b2c <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
   10b26:	687b      	ldr	r3, [r7, #4]
   10b28:	2200      	movs	r2, #0
   10b2a:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
   10b2c:	687b      	ldr	r3, [r7, #4]
}
   10b2e:	0018      	movs	r0, r3
   10b30:	46bd      	mov	sp, r7
   10b32:	b002      	add	sp, #8
   10b34:	bd80      	pop	{r7, pc}
   10b36:	46c0      	nop			; (mov r8, r8)
   10b38:	20000754 	.word	0x20000754
   10b3c:	20000770 	.word	0x20000770
   10b40:	000299db 	.word	0x000299db

00010b44 <setM2MVerify>:

void setM2MVerify(bool flag)
{
   10b44:	b580      	push	{r7, lr}
   10b46:	b082      	sub	sp, #8
   10b48:	af00      	add	r7, sp, #0
   10b4a:	0002      	movs	r2, r0
   10b4c:	1dfb      	adds	r3, r7, #7
   10b4e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
   10b50:	1dfb      	adds	r3, r7, #7
   10b52:	781a      	ldrb	r2, [r3, #0]
   10b54:	4b0a      	ldr	r3, [pc, #40]	; (10b80 <setM2MVerify+0x3c>)
   10b56:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b58:	4a0a      	ldr	r2, [pc, #40]	; (10b84 <setM2MVerify+0x40>)
   10b5a:	4b09      	ldr	r3, [pc, #36]	; (10b80 <setM2MVerify+0x3c>)
   10b5c:	0010      	movs	r0, r2
   10b5e:	0019      	movs	r1, r3
   10b60:	2330      	movs	r3, #48	; 0x30
   10b62:	001a      	movs	r2, r3
   10b64:	4b08      	ldr	r3, [pc, #32]	; (10b88 <setM2MVerify+0x44>)
   10b66:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10b68:	4b06      	ldr	r3, [pc, #24]	; (10b84 <setM2MVerify+0x40>)
   10b6a:	0019      	movs	r1, r3
   10b6c:	2019      	movs	r0, #25
   10b6e:	4b07      	ldr	r3, [pc, #28]	; (10b8c <setM2MVerify+0x48>)
   10b70:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10b72:	4b07      	ldr	r3, [pc, #28]	; (10b90 <setM2MVerify+0x4c>)
   10b74:	4798      	blx	r3
}
   10b76:	46c0      	nop			; (mov r8, r8)
   10b78:	46bd      	mov	sp, r7
   10b7a:	b002      	add	sp, #8
   10b7c:	bd80      	pop	{r7, pc}
   10b7e:	46c0      	nop			; (mov r8, r8)
   10b80:	20000754 	.word	0x20000754
   10b84:	20000784 	.word	0x20000784
   10b88:	00029725 	.word	0x00029725
   10b8c:	00024331 	.word	0x00024331
   10b90:	000244d9 	.word	0x000244d9

00010b94 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
   10b94:	b580      	push	{r7, lr}
   10b96:	b082      	sub	sp, #8
   10b98:	af00      	add	r7, sp, #0
   10b9a:	0002      	movs	r2, r0
   10b9c:	1dfb      	adds	r3, r7, #7
   10b9e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
   10ba0:	1dfb      	adds	r3, r7, #7
   10ba2:	781a      	ldrb	r2, [r3, #0]
   10ba4:	4b0a      	ldr	r3, [pc, #40]	; (10bd0 <setM2MRemoteVerified+0x3c>)
   10ba6:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10ba8:	4a0a      	ldr	r2, [pc, #40]	; (10bd4 <setM2MRemoteVerified+0x40>)
   10baa:	4b09      	ldr	r3, [pc, #36]	; (10bd0 <setM2MRemoteVerified+0x3c>)
   10bac:	0010      	movs	r0, r2
   10bae:	0019      	movs	r1, r3
   10bb0:	2330      	movs	r3, #48	; 0x30
   10bb2:	001a      	movs	r2, r3
   10bb4:	4b08      	ldr	r3, [pc, #32]	; (10bd8 <setM2MRemoteVerified+0x44>)
   10bb6:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10bb8:	4b06      	ldr	r3, [pc, #24]	; (10bd4 <setM2MRemoteVerified+0x40>)
   10bba:	0019      	movs	r1, r3
   10bbc:	2019      	movs	r0, #25
   10bbe:	4b07      	ldr	r3, [pc, #28]	; (10bdc <setM2MRemoteVerified+0x48>)
   10bc0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10bc2:	4b07      	ldr	r3, [pc, #28]	; (10be0 <setM2MRemoteVerified+0x4c>)
   10bc4:	4798      	blx	r3
}
   10bc6:	46c0      	nop			; (mov r8, r8)
   10bc8:	46bd      	mov	sp, r7
   10bca:	b002      	add	sp, #8
   10bcc:	bd80      	pop	{r7, pc}
   10bce:	46c0      	nop			; (mov r8, r8)
   10bd0:	20000754 	.word	0x20000754
   10bd4:	20000784 	.word	0x20000784
   10bd8:	00029725 	.word	0x00029725
   10bdc:	00024331 	.word	0x00024331
   10be0:	000244d9 	.word	0x000244d9

00010be4 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
   10be4:	b580      	push	{r7, lr}
   10be6:	b082      	sub	sp, #8
   10be8:	af00      	add	r7, sp, #0
   10bea:	0002      	movs	r2, r0
   10bec:	1dfb      	adds	r3, r7, #7
   10bee:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
   10bf0:	1dfb      	adds	r3, r7, #7
   10bf2:	781a      	ldrb	r2, [r3, #0]
   10bf4:	4b0f      	ldr	r3, [pc, #60]	; (10c34 <saveM2MSettings+0x50>)
   10bf6:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
   10bf8:	1dfb      	adds	r3, r7, #7
   10bfa:	781b      	ldrb	r3, [r3, #0]
   10bfc:	2201      	movs	r2, #1
   10bfe:	4053      	eors	r3, r2
   10c00:	b2db      	uxtb	r3, r3
   10c02:	2b00      	cmp	r3, #0
   10c04:	d002      	beq.n	10c0c <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
   10c06:	4b0b      	ldr	r3, [pc, #44]	; (10c34 <saveM2MSettings+0x50>)
   10c08:	2200      	movs	r2, #0
   10c0a:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c0c:	4a0a      	ldr	r2, [pc, #40]	; (10c38 <saveM2MSettings+0x54>)
   10c0e:	4b09      	ldr	r3, [pc, #36]	; (10c34 <saveM2MSettings+0x50>)
   10c10:	0010      	movs	r0, r2
   10c12:	0019      	movs	r1, r3
   10c14:	2330      	movs	r3, #48	; 0x30
   10c16:	001a      	movs	r2, r3
   10c18:	4b08      	ldr	r3, [pc, #32]	; (10c3c <saveM2MSettings+0x58>)
   10c1a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c1c:	4b06      	ldr	r3, [pc, #24]	; (10c38 <saveM2MSettings+0x54>)
   10c1e:	0019      	movs	r1, r3
   10c20:	2019      	movs	r0, #25
   10c22:	4b07      	ldr	r3, [pc, #28]	; (10c40 <saveM2MSettings+0x5c>)
   10c24:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c26:	4b07      	ldr	r3, [pc, #28]	; (10c44 <saveM2MSettings+0x60>)
   10c28:	4798      	blx	r3
}
   10c2a:	46c0      	nop			; (mov r8, r8)
   10c2c:	46bd      	mov	sp, r7
   10c2e:	b002      	add	sp, #8
   10c30:	bd80      	pop	{r7, pc}
   10c32:	46c0      	nop			; (mov r8, r8)
   10c34:	20000754 	.word	0x20000754
   10c38:	20000784 	.word	0x20000784
   10c3c:	00029725 	.word	0x00029725
   10c40:	00024331 	.word	0x00024331
   10c44:	000244d9 	.word	0x000244d9

00010c48 <addM2MNumber>:

void addM2MNumber(char *no)
{
   10c48:	b580      	push	{r7, lr}
   10c4a:	b082      	sub	sp, #8
   10c4c:	af00      	add	r7, sp, #0
   10c4e:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
   10c50:	4b0f      	ldr	r3, [pc, #60]	; (10c90 <addM2MNumber+0x48>)
   10c52:	2201      	movs	r2, #1
   10c54:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
   10c56:	687a      	ldr	r2, [r7, #4]
   10c58:	4b0e      	ldr	r3, [pc, #56]	; (10c94 <addM2MNumber+0x4c>)
   10c5a:	0011      	movs	r1, r2
   10c5c:	0018      	movs	r0, r3
   10c5e:	4b0e      	ldr	r3, [pc, #56]	; (10c98 <addM2MNumber+0x50>)
   10c60:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c62:	4a0e      	ldr	r2, [pc, #56]	; (10c9c <addM2MNumber+0x54>)
   10c64:	4b0a      	ldr	r3, [pc, #40]	; (10c90 <addM2MNumber+0x48>)
   10c66:	0010      	movs	r0, r2
   10c68:	0019      	movs	r1, r3
   10c6a:	2330      	movs	r3, #48	; 0x30
   10c6c:	001a      	movs	r2, r3
   10c6e:	4b0c      	ldr	r3, [pc, #48]	; (10ca0 <addM2MNumber+0x58>)
   10c70:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c72:	4b0a      	ldr	r3, [pc, #40]	; (10c9c <addM2MNumber+0x54>)
   10c74:	0019      	movs	r1, r3
   10c76:	2019      	movs	r0, #25
   10c78:	4b0a      	ldr	r3, [pc, #40]	; (10ca4 <addM2MNumber+0x5c>)
   10c7a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c7c:	4b0a      	ldr	r3, [pc, #40]	; (10ca8 <addM2MNumber+0x60>)
   10c7e:	4798      	blx	r3
	setM2MVerify(false);
   10c80:	2000      	movs	r0, #0
   10c82:	4b0a      	ldr	r3, [pc, #40]	; (10cac <addM2MNumber+0x64>)
   10c84:	4798      	blx	r3
}
   10c86:	46c0      	nop			; (mov r8, r8)
   10c88:	46bd      	mov	sp, r7
   10c8a:	b002      	add	sp, #8
   10c8c:	bd80      	pop	{r7, pc}
   10c8e:	46c0      	nop			; (mov r8, r8)
   10c90:	20000754 	.word	0x20000754
   10c94:	2000075c 	.word	0x2000075c
   10c98:	000299db 	.word	0x000299db
   10c9c:	20000784 	.word	0x20000784
   10ca0:	00029725 	.word	0x00029725
   10ca4:	00024331 	.word	0x00024331
   10ca8:	000244d9 	.word	0x000244d9
   10cac:	00010b45 	.word	0x00010b45

00010cb0 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
   10cb0:	b580      	push	{r7, lr}
   10cb2:	b082      	sub	sp, #8
   10cb4:	af00      	add	r7, sp, #0
   10cb6:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
   10cb8:	4b10      	ldr	r3, [pc, #64]	; (10cfc <addM2MRemoteNumber+0x4c>)
   10cba:	2201      	movs	r2, #1
   10cbc:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
   10cbe:	687a      	ldr	r2, [r7, #4]
   10cc0:	4b0f      	ldr	r3, [pc, #60]	; (10d00 <addM2MRemoteNumber+0x50>)
   10cc2:	0011      	movs	r1, r2
   10cc4:	0018      	movs	r0, r3
   10cc6:	4b0f      	ldr	r3, [pc, #60]	; (10d04 <addM2MRemoteNumber+0x54>)
   10cc8:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10cca:	4a0f      	ldr	r2, [pc, #60]	; (10d08 <addM2MRemoteNumber+0x58>)
   10ccc:	4b0b      	ldr	r3, [pc, #44]	; (10cfc <addM2MRemoteNumber+0x4c>)
   10cce:	0010      	movs	r0, r2
   10cd0:	0019      	movs	r1, r3
   10cd2:	2330      	movs	r3, #48	; 0x30
   10cd4:	001a      	movs	r2, r3
   10cd6:	4b0d      	ldr	r3, [pc, #52]	; (10d0c <addM2MRemoteNumber+0x5c>)
   10cd8:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10cda:	4b0b      	ldr	r3, [pc, #44]	; (10d08 <addM2MRemoteNumber+0x58>)
   10cdc:	0019      	movs	r1, r3
   10cde:	2019      	movs	r0, #25
   10ce0:	4b0b      	ldr	r3, [pc, #44]	; (10d10 <addM2MRemoteNumber+0x60>)
   10ce2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10ce4:	4b0b      	ldr	r3, [pc, #44]	; (10d14 <addM2MRemoteNumber+0x64>)
   10ce6:	4798      	blx	r3
	setM2MRemoteVerified(false);
   10ce8:	2000      	movs	r0, #0
   10cea:	4b0b      	ldr	r3, [pc, #44]	; (10d18 <addM2MRemoteNumber+0x68>)
   10cec:	4798      	blx	r3
	saveM2MSettings(false);
   10cee:	2000      	movs	r0, #0
   10cf0:	4b0a      	ldr	r3, [pc, #40]	; (10d1c <addM2MRemoteNumber+0x6c>)
   10cf2:	4798      	blx	r3
}
   10cf4:	46c0      	nop			; (mov r8, r8)
   10cf6:	46bd      	mov	sp, r7
   10cf8:	b002      	add	sp, #8
   10cfa:	bd80      	pop	{r7, pc}
   10cfc:	20000754 	.word	0x20000754
   10d00:	20000770 	.word	0x20000770
   10d04:	000299db 	.word	0x000299db
   10d08:	20000784 	.word	0x20000784
   10d0c:	00029725 	.word	0x00029725
   10d10:	00024331 	.word	0x00024331
   10d14:	000244d9 	.word	0x000244d9
   10d18:	00010b95 	.word	0x00010b95
   10d1c:	00010be5 	.word	0x00010be5

00010d20 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
   10d20:	b580      	push	{r7, lr}
   10d22:	b08e      	sub	sp, #56	; 0x38
   10d24:	af00      	add	r7, sp, #0
   10d26:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10d28:	4b28      	ldr	r3, [pc, #160]	; (10dcc <getActiveNumber+0xac>)
   10d2a:	789b      	ldrb	r3, [r3, #2]
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	d02b      	beq.n	10d88 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
   10d30:	4b27      	ldr	r3, [pc, #156]	; (10dd0 <getActiveNumber+0xb0>)
   10d32:	785b      	ldrb	r3, [r3, #1]
   10d34:	2b00      	cmp	r3, #0
   10d36:	d006      	beq.n	10d46 <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
   10d38:	4a26      	ldr	r2, [pc, #152]	; (10dd4 <getActiveNumber+0xb4>)
   10d3a:	687b      	ldr	r3, [r7, #4]
   10d3c:	0011      	movs	r1, r2
   10d3e:	0018      	movs	r0, r3
   10d40:	4b25      	ldr	r3, [pc, #148]	; (10dd8 <getActiveNumber+0xb8>)
   10d42:	4798      	blx	r3
   10d44:	e03c      	b.n	10dc0 <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10d46:	4b25      	ldr	r3, [pc, #148]	; (10ddc <getActiveNumber+0xbc>)
   10d48:	223c      	movs	r2, #60	; 0x3c
   10d4a:	2100      	movs	r1, #0
   10d4c:	0018      	movs	r0, r3
   10d4e:	4b24      	ldr	r3, [pc, #144]	; (10de0 <getActiveNumber+0xc0>)
   10d50:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   10d52:	4b1e      	ldr	r3, [pc, #120]	; (10dcc <getActiveNumber+0xac>)
   10d54:	78db      	ldrb	r3, [r3, #3]
   10d56:	3309      	adds	r3, #9
   10d58:	b2db      	uxtb	r3, r3
   10d5a:	4a20      	ldr	r2, [pc, #128]	; (10ddc <getActiveNumber+0xbc>)
   10d5c:	0011      	movs	r1, r2
   10d5e:	0018      	movs	r0, r3
   10d60:	4b20      	ldr	r3, [pc, #128]	; (10de4 <getActiveNumber+0xc4>)
   10d62:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d64:	2320      	movs	r3, #32
   10d66:	18fa      	adds	r2, r7, r3
   10d68:	4b1c      	ldr	r3, [pc, #112]	; (10ddc <getActiveNumber+0xbc>)
   10d6a:	0010      	movs	r0, r2
   10d6c:	0019      	movs	r1, r3
   10d6e:	2318      	movs	r3, #24
   10d70:	001a      	movs	r2, r3
   10d72:	4b1d      	ldr	r3, [pc, #116]	; (10de8 <getActiveNumber+0xc8>)
   10d74:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10d76:	2320      	movs	r3, #32
   10d78:	18fb      	adds	r3, r7, r3
   10d7a:	1d1a      	adds	r2, r3, #4
   10d7c:	687b      	ldr	r3, [r7, #4]
   10d7e:	0011      	movs	r1, r2
   10d80:	0018      	movs	r0, r3
   10d82:	4b15      	ldr	r3, [pc, #84]	; (10dd8 <getActiveNumber+0xb8>)
   10d84:	4798      	blx	r3
   10d86:	e01b      	b.n	10dc0 <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10d88:	4b14      	ldr	r3, [pc, #80]	; (10ddc <getActiveNumber+0xbc>)
   10d8a:	223c      	movs	r2, #60	; 0x3c
   10d8c:	2100      	movs	r1, #0
   10d8e:	0018      	movs	r0, r3
   10d90:	4b13      	ldr	r3, [pc, #76]	; (10de0 <getActiveNumber+0xc0>)
   10d92:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   10d94:	4b11      	ldr	r3, [pc, #68]	; (10ddc <getActiveNumber+0xbc>)
   10d96:	0019      	movs	r1, r3
   10d98:	2003      	movs	r0, #3
   10d9a:	4b12      	ldr	r3, [pc, #72]	; (10de4 <getActiveNumber+0xc4>)
   10d9c:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d9e:	2308      	movs	r3, #8
   10da0:	18fa      	adds	r2, r7, r3
   10da2:	4b0e      	ldr	r3, [pc, #56]	; (10ddc <getActiveNumber+0xbc>)
   10da4:	0010      	movs	r0, r2
   10da6:	0019      	movs	r1, r3
   10da8:	2318      	movs	r3, #24
   10daa:	001a      	movs	r2, r3
   10dac:	4b0e      	ldr	r3, [pc, #56]	; (10de8 <getActiveNumber+0xc8>)
   10dae:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10db0:	2308      	movs	r3, #8
   10db2:	18fb      	adds	r3, r7, r3
   10db4:	1d1a      	adds	r2, r3, #4
   10db6:	687b      	ldr	r3, [r7, #4]
   10db8:	0011      	movs	r1, r2
   10dba:	0018      	movs	r0, r3
   10dbc:	4b06      	ldr	r3, [pc, #24]	; (10dd8 <getActiveNumber+0xb8>)
   10dbe:	4798      	blx	r3
	}
	
	return ActiveNo;
   10dc0:	687b      	ldr	r3, [r7, #4]
}
   10dc2:	0018      	movs	r0, r3
   10dc4:	46bd      	mov	sp, r7
   10dc6:	b00e      	add	sp, #56	; 0x38
   10dc8:	bd80      	pop	{r7, pc}
   10dca:	46c0      	nop			; (mov r8, r8)
   10dcc:	20000814 	.word	0x20000814
   10dd0:	2000083c 	.word	0x2000083c
   10dd4:	20000840 	.word	0x20000840
   10dd8:	000299db 	.word	0x000299db
   10ddc:	20000784 	.word	0x20000784
   10de0:	0002975b 	.word	0x0002975b
   10de4:	0002443d 	.word	0x0002443d
   10de8:	00029725 	.word	0x00029725

00010dec <checkExists>:
uint8_t checkExists(char *number)
{
   10dec:	b580      	push	{r7, lr}
   10dee:	b08a      	sub	sp, #40	; 0x28
   10df0:	af00      	add	r7, sp, #0
   10df2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10df4:	4b33      	ldr	r3, [pc, #204]	; (10ec4 <checkExists+0xd8>)
   10df6:	789b      	ldrb	r3, [r3, #2]
   10df8:	2b00      	cmp	r3, #0
   10dfa:	d039      	beq.n	10e70 <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10dfc:	2327      	movs	r3, #39	; 0x27
   10dfe:	18fb      	adds	r3, r7, r3
   10e00:	2200      	movs	r2, #0
   10e02:	701a      	strb	r2, [r3, #0]
   10e04:	e02d      	b.n	10e62 <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10e06:	4b30      	ldr	r3, [pc, #192]	; (10ec8 <checkExists+0xdc>)
   10e08:	223c      	movs	r2, #60	; 0x3c
   10e0a:	2100      	movs	r1, #0
   10e0c:	0018      	movs	r0, r3
   10e0e:	4b2f      	ldr	r3, [pc, #188]	; (10ecc <checkExists+0xe0>)
   10e10:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10e12:	2327      	movs	r3, #39	; 0x27
   10e14:	18fb      	adds	r3, r7, r3
   10e16:	781b      	ldrb	r3, [r3, #0]
   10e18:	3309      	adds	r3, #9
   10e1a:	b2db      	uxtb	r3, r3
   10e1c:	4a2a      	ldr	r2, [pc, #168]	; (10ec8 <checkExists+0xdc>)
   10e1e:	0011      	movs	r1, r2
   10e20:	0018      	movs	r0, r3
   10e22:	4b2b      	ldr	r3, [pc, #172]	; (10ed0 <checkExists+0xe4>)
   10e24:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10e26:	230c      	movs	r3, #12
   10e28:	18fa      	adds	r2, r7, r3
   10e2a:	4b27      	ldr	r3, [pc, #156]	; (10ec8 <checkExists+0xdc>)
   10e2c:	0010      	movs	r0, r2
   10e2e:	0019      	movs	r1, r3
   10e30:	2318      	movs	r3, #24
   10e32:	001a      	movs	r2, r3
   10e34:	4b27      	ldr	r3, [pc, #156]	; (10ed4 <checkExists+0xe8>)
   10e36:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
   10e38:	230c      	movs	r3, #12
   10e3a:	18fb      	adds	r3, r7, r3
   10e3c:	1d1a      	adds	r2, r3, #4
   10e3e:	687b      	ldr	r3, [r7, #4]
   10e40:	0011      	movs	r1, r2
   10e42:	0018      	movs	r0, r3
   10e44:	4b24      	ldr	r3, [pc, #144]	; (10ed8 <checkExists+0xec>)
   10e46:	4798      	blx	r3
   10e48:	1e03      	subs	r3, r0, #0
   10e4a:	d003      	beq.n	10e54 <checkExists+0x68>
			{
				return i;
   10e4c:	2327      	movs	r3, #39	; 0x27
   10e4e:	18fb      	adds	r3, r7, r3
   10e50:	781b      	ldrb	r3, [r3, #0]
   10e52:	e032      	b.n	10eba <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10e54:	2327      	movs	r3, #39	; 0x27
   10e56:	18fb      	adds	r3, r7, r3
   10e58:	781a      	ldrb	r2, [r3, #0]
   10e5a:	2327      	movs	r3, #39	; 0x27
   10e5c:	18fb      	adds	r3, r7, r3
   10e5e:	3201      	adds	r2, #1
   10e60:	701a      	strb	r2, [r3, #0]
   10e62:	4b18      	ldr	r3, [pc, #96]	; (10ec4 <checkExists+0xd8>)
   10e64:	789b      	ldrb	r3, [r3, #2]
   10e66:	2227      	movs	r2, #39	; 0x27
   10e68:	18ba      	adds	r2, r7, r2
   10e6a:	7812      	ldrb	r2, [r2, #0]
   10e6c:	429a      	cmp	r2, r3
   10e6e:	d3ca      	bcc.n	10e06 <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
   10e70:	687b      	ldr	r3, [r7, #4]
   10e72:	0018      	movs	r0, r3
   10e74:	4b19      	ldr	r3, [pc, #100]	; (10edc <checkExists+0xf0>)
   10e76:	4798      	blx	r3
   10e78:	1e03      	subs	r3, r0, #0
   10e7a:	d001      	beq.n	10e80 <checkExists+0x94>
	{
		return 0xFD;
   10e7c:	23fd      	movs	r3, #253	; 0xfd
   10e7e:	e01c      	b.n	10eba <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
   10e80:	4b17      	ldr	r3, [pc, #92]	; (10ee0 <checkExists+0xf4>)
   10e82:	789b      	ldrb	r3, [r3, #2]
   10e84:	2b00      	cmp	r3, #0
   10e86:	d007      	beq.n	10e98 <checkExists+0xac>
   10e88:	687b      	ldr	r3, [r7, #4]
   10e8a:	0018      	movs	r0, r3
   10e8c:	4b15      	ldr	r3, [pc, #84]	; (10ee4 <checkExists+0xf8>)
   10e8e:	4798      	blx	r3
   10e90:	1e03      	subs	r3, r0, #0
   10e92:	d001      	beq.n	10e98 <checkExists+0xac>
	{
		return 0xFE;
   10e94:	23fe      	movs	r3, #254	; 0xfe
   10e96:	e010      	b.n	10eba <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   10e98:	4b13      	ldr	r3, [pc, #76]	; (10ee8 <checkExists+0xfc>)
   10e9a:	78db      	ldrb	r3, [r3, #3]
   10e9c:	2b00      	cmp	r3, #0
   10e9e:	d00b      	beq.n	10eb8 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
   10ea0:	4b0f      	ldr	r3, [pc, #60]	; (10ee0 <checkExists+0xf4>)
   10ea2:	791b      	ldrb	r3, [r3, #4]
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d007      	beq.n	10eb8 <checkExists+0xcc>
   10ea8:	687b      	ldr	r3, [r7, #4]
   10eaa:	0018      	movs	r0, r3
   10eac:	4b0f      	ldr	r3, [pc, #60]	; (10eec <checkExists+0x100>)
   10eae:	4798      	blx	r3
   10eb0:	1e03      	subs	r3, r0, #0
   10eb2:	d001      	beq.n	10eb8 <checkExists+0xcc>
		{
			return 0xFE;
   10eb4:	23fe      	movs	r3, #254	; 0xfe
   10eb6:	e000      	b.n	10eba <checkExists+0xce>
		}
	}
	return 0xFF;
   10eb8:	23ff      	movs	r3, #255	; 0xff
}
   10eba:	0018      	movs	r0, r3
   10ebc:	46bd      	mov	sp, r7
   10ebe:	b00a      	add	sp, #40	; 0x28
   10ec0:	bd80      	pop	{r7, pc}
   10ec2:	46c0      	nop			; (mov r8, r8)
   10ec4:	20000814 	.word	0x20000814
   10ec8:	20000784 	.word	0x20000784
   10ecc:	0002975b 	.word	0x0002975b
   10ed0:	0002443d 	.word	0x0002443d
   10ed4:	00029725 	.word	0x00029725
   10ed8:	00029a1b 	.word	0x00029a1b
   10edc:	00010a0d 	.word	0x00010a0d
   10ee0:	20000754 	.word	0x20000754
   10ee4:	00010a55 	.word	0x00010a55
   10ee8:	2000082c 	.word	0x2000082c
   10eec:	00010a91 	.word	0x00010a91

00010ef0 <addNumber>:

bool addNumber(char *number)
{
   10ef0:	b580      	push	{r7, lr}
   10ef2:	b088      	sub	sp, #32
   10ef4:	af00      	add	r7, sp, #0
   10ef6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
   10ef8:	4b33      	ldr	r3, [pc, #204]	; (10fc8 <addNumber+0xd8>)
   10efa:	789a      	ldrb	r2, [r3, #2]
   10efc:	4b32      	ldr	r3, [pc, #200]	; (10fc8 <addNumber+0xd8>)
   10efe:	785b      	ldrb	r3, [r3, #1]
   10f00:	429a      	cmp	r2, r3
   10f02:	d101      	bne.n	10f08 <addNumber+0x18>
	{
		return false;
   10f04:	2300      	movs	r3, #0
   10f06:	e05a      	b.n	10fbe <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
   10f08:	687b      	ldr	r3, [r7, #4]
   10f0a:	0018      	movs	r0, r3
   10f0c:	4b2f      	ldr	r3, [pc, #188]	; (10fcc <addNumber+0xdc>)
   10f0e:	4798      	blx	r3
   10f10:	0003      	movs	r3, r0
   10f12:	2bf0      	cmp	r3, #240	; 0xf0
   10f14:	d952      	bls.n	10fbc <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10f16:	4b2e      	ldr	r3, [pc, #184]	; (10fd0 <addNumber+0xe0>)
   10f18:	223c      	movs	r2, #60	; 0x3c
   10f1a:	2100      	movs	r1, #0
   10f1c:	0018      	movs	r0, r3
   10f1e:	4b2d      	ldr	r3, [pc, #180]	; (10fd4 <addNumber+0xe4>)
   10f20:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f22:	4b29      	ldr	r3, [pc, #164]	; (10fc8 <addNumber+0xd8>)
   10f24:	789b      	ldrb	r3, [r3, #2]
   10f26:	3309      	adds	r3, #9
   10f28:	b2db      	uxtb	r3, r3
   10f2a:	4a29      	ldr	r2, [pc, #164]	; (10fd0 <addNumber+0xe0>)
   10f2c:	0011      	movs	r1, r2
   10f2e:	0018      	movs	r0, r3
   10f30:	4b29      	ldr	r3, [pc, #164]	; (10fd8 <addNumber+0xe8>)
   10f32:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10f34:	2308      	movs	r3, #8
   10f36:	18fa      	adds	r2, r7, r3
   10f38:	4b25      	ldr	r3, [pc, #148]	; (10fd0 <addNumber+0xe0>)
   10f3a:	0010      	movs	r0, r2
   10f3c:	0019      	movs	r1, r3
   10f3e:	2318      	movs	r3, #24
   10f40:	001a      	movs	r2, r3
   10f42:	4b26      	ldr	r3, [pc, #152]	; (10fdc <addNumber+0xec>)
   10f44:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10f46:	2308      	movs	r3, #8
   10f48:	18fb      	adds	r3, r7, r3
   10f4a:	3304      	adds	r3, #4
   10f4c:	2214      	movs	r2, #20
   10f4e:	2100      	movs	r1, #0
   10f50:	0018      	movs	r0, r3
   10f52:	4b20      	ldr	r3, [pc, #128]	; (10fd4 <addNumber+0xe4>)
   10f54:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
   10f56:	687a      	ldr	r2, [r7, #4]
   10f58:	2308      	movs	r3, #8
   10f5a:	18fb      	adds	r3, r7, r3
   10f5c:	3304      	adds	r3, #4
   10f5e:	0011      	movs	r1, r2
   10f60:	0018      	movs	r0, r3
   10f62:	4b1f      	ldr	r3, [pc, #124]	; (10fe0 <addNumber+0xf0>)
   10f64:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
   10f66:	4a1a      	ldr	r2, [pc, #104]	; (10fd0 <addNumber+0xe0>)
   10f68:	2308      	movs	r3, #8
   10f6a:	18fb      	adds	r3, r7, r3
   10f6c:	0010      	movs	r0, r2
   10f6e:	0019      	movs	r1, r3
   10f70:	2318      	movs	r3, #24
   10f72:	001a      	movs	r2, r3
   10f74:	4b19      	ldr	r3, [pc, #100]	; (10fdc <addNumber+0xec>)
   10f76:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f78:	4b13      	ldr	r3, [pc, #76]	; (10fc8 <addNumber+0xd8>)
   10f7a:	789b      	ldrb	r3, [r3, #2]
   10f7c:	3309      	adds	r3, #9
   10f7e:	b2db      	uxtb	r3, r3
   10f80:	4a13      	ldr	r2, [pc, #76]	; (10fd0 <addNumber+0xe0>)
   10f82:	0011      	movs	r1, r2
   10f84:	0018      	movs	r0, r3
   10f86:	4b17      	ldr	r3, [pc, #92]	; (10fe4 <addNumber+0xf4>)
   10f88:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10f8a:	4b17      	ldr	r3, [pc, #92]	; (10fe8 <addNumber+0xf8>)
   10f8c:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
   10f8e:	4b0e      	ldr	r3, [pc, #56]	; (10fc8 <addNumber+0xd8>)
   10f90:	789b      	ldrb	r3, [r3, #2]
   10f92:	3301      	adds	r3, #1
   10f94:	b2da      	uxtb	r2, r3
   10f96:	4b0c      	ldr	r3, [pc, #48]	; (10fc8 <addNumber+0xd8>)
   10f98:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10f9a:	4a0d      	ldr	r2, [pc, #52]	; (10fd0 <addNumber+0xe0>)
   10f9c:	4b0a      	ldr	r3, [pc, #40]	; (10fc8 <addNumber+0xd8>)
   10f9e:	0010      	movs	r0, r2
   10fa0:	0019      	movs	r1, r3
   10fa2:	2308      	movs	r3, #8
   10fa4:	001a      	movs	r2, r3
   10fa6:	4b0d      	ldr	r3, [pc, #52]	; (10fdc <addNumber+0xec>)
   10fa8:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10faa:	4b09      	ldr	r3, [pc, #36]	; (10fd0 <addNumber+0xe0>)
   10fac:	0019      	movs	r1, r3
   10fae:	2008      	movs	r0, #8
   10fb0:	4b0c      	ldr	r3, [pc, #48]	; (10fe4 <addNumber+0xf4>)
   10fb2:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10fb4:	4b0c      	ldr	r3, [pc, #48]	; (10fe8 <addNumber+0xf8>)
   10fb6:	4798      	blx	r3
			
			return true;
   10fb8:	2301      	movs	r3, #1
   10fba:	e000      	b.n	10fbe <addNumber+0xce>
		}
	}
	return false;
   10fbc:	2300      	movs	r3, #0
}
   10fbe:	0018      	movs	r0, r3
   10fc0:	46bd      	mov	sp, r7
   10fc2:	b008      	add	sp, #32
   10fc4:	bd80      	pop	{r7, pc}
   10fc6:	46c0      	nop			; (mov r8, r8)
   10fc8:	20000814 	.word	0x20000814
   10fcc:	00010ded 	.word	0x00010ded
   10fd0:	20000784 	.word	0x20000784
   10fd4:	0002975b 	.word	0x0002975b
   10fd8:	0002443d 	.word	0x0002443d
   10fdc:	00029725 	.word	0x00029725
   10fe0:	000299db 	.word	0x000299db
   10fe4:	00024331 	.word	0x00024331
   10fe8:	000244d9 	.word	0x000244d9

00010fec <removeNumber>:

bool removeNumber(char *numer)
{
   10fec:	b590      	push	{r4, r7, lr}
   10fee:	b085      	sub	sp, #20
   10ff0:	af00      	add	r7, sp, #0
   10ff2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
   10ff4:	4b3d      	ldr	r3, [pc, #244]	; (110ec <removeNumber+0x100>)
   10ff6:	789b      	ldrb	r3, [r3, #2]
   10ff8:	2b01      	cmp	r3, #1
   10ffa:	d801      	bhi.n	11000 <removeNumber+0x14>
	{
		return false;
   10ffc:	2300      	movs	r3, #0
   10ffe:	e071      	b.n	110e4 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
   11000:	230e      	movs	r3, #14
   11002:	18fc      	adds	r4, r7, r3
   11004:	687b      	ldr	r3, [r7, #4]
   11006:	0018      	movs	r0, r3
   11008:	4b39      	ldr	r3, [pc, #228]	; (110f0 <removeNumber+0x104>)
   1100a:	4798      	blx	r3
   1100c:	0003      	movs	r3, r0
   1100e:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
   11010:	4b36      	ldr	r3, [pc, #216]	; (110ec <removeNumber+0x100>)
   11012:	785b      	ldrb	r3, [r3, #1]
   11014:	220e      	movs	r2, #14
   11016:	18ba      	adds	r2, r7, r2
   11018:	7812      	ldrb	r2, [r2, #0]
   1101a:	429a      	cmp	r2, r3
   1101c:	d261      	bcs.n	110e2 <removeNumber+0xf6>
   1101e:	4b33      	ldr	r3, [pc, #204]	; (110ec <removeNumber+0x100>)
   11020:	78db      	ldrb	r3, [r3, #3]
   11022:	220e      	movs	r2, #14
   11024:	18ba      	adds	r2, r7, r2
   11026:	7812      	ldrb	r2, [r2, #0]
   11028:	429a      	cmp	r2, r3
   1102a:	d05a      	beq.n	110e2 <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   1102c:	230f      	movs	r3, #15
   1102e:	18fb      	adds	r3, r7, r3
   11030:	220e      	movs	r2, #14
   11032:	18ba      	adds	r2, r7, r2
   11034:	7812      	ldrb	r2, [r2, #0]
   11036:	701a      	strb	r2, [r3, #0]
   11038:	e022      	b.n	11080 <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
   1103a:	4b2e      	ldr	r3, [pc, #184]	; (110f4 <removeNumber+0x108>)
   1103c:	223c      	movs	r2, #60	; 0x3c
   1103e:	2100      	movs	r1, #0
   11040:	0018      	movs	r0, r3
   11042:	4b2d      	ldr	r3, [pc, #180]	; (110f8 <removeNumber+0x10c>)
   11044:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
   11046:	230f      	movs	r3, #15
   11048:	18fb      	adds	r3, r7, r3
   1104a:	781b      	ldrb	r3, [r3, #0]
   1104c:	330a      	adds	r3, #10
   1104e:	b2db      	uxtb	r3, r3
   11050:	4a28      	ldr	r2, [pc, #160]	; (110f4 <removeNumber+0x108>)
   11052:	0011      	movs	r1, r2
   11054:	0018      	movs	r0, r3
   11056:	4b29      	ldr	r3, [pc, #164]	; (110fc <removeNumber+0x110>)
   11058:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   1105a:	230f      	movs	r3, #15
   1105c:	18fb      	adds	r3, r7, r3
   1105e:	781b      	ldrb	r3, [r3, #0]
   11060:	3309      	adds	r3, #9
   11062:	b2db      	uxtb	r3, r3
   11064:	4a23      	ldr	r2, [pc, #140]	; (110f4 <removeNumber+0x108>)
   11066:	0011      	movs	r1, r2
   11068:	0018      	movs	r0, r3
   1106a:	4b25      	ldr	r3, [pc, #148]	; (11100 <removeNumber+0x114>)
   1106c:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
   1106e:	4b25      	ldr	r3, [pc, #148]	; (11104 <removeNumber+0x118>)
   11070:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11072:	230f      	movs	r3, #15
   11074:	18fb      	adds	r3, r7, r3
   11076:	781a      	ldrb	r2, [r3, #0]
   11078:	230f      	movs	r3, #15
   1107a:	18fb      	adds	r3, r7, r3
   1107c:	3201      	adds	r2, #1
   1107e:	701a      	strb	r2, [r3, #0]
   11080:	230f      	movs	r3, #15
   11082:	18fb      	adds	r3, r7, r3
   11084:	781a      	ldrb	r2, [r3, #0]
   11086:	4b19      	ldr	r3, [pc, #100]	; (110ec <removeNumber+0x100>)
   11088:	789b      	ldrb	r3, [r3, #2]
   1108a:	3b01      	subs	r3, #1
   1108c:	429a      	cmp	r2, r3
   1108e:	dbd4      	blt.n	1103a <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
   11090:	4b16      	ldr	r3, [pc, #88]	; (110ec <removeNumber+0x100>)
   11092:	789b      	ldrb	r3, [r3, #2]
   11094:	3b01      	subs	r3, #1
   11096:	b2da      	uxtb	r2, r3
   11098:	4b14      	ldr	r3, [pc, #80]	; (110ec <removeNumber+0x100>)
   1109a:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
   1109c:	4b13      	ldr	r3, [pc, #76]	; (110ec <removeNumber+0x100>)
   1109e:	791b      	ldrb	r3, [r3, #4]
   110a0:	220e      	movs	r2, #14
   110a2:	18ba      	adds	r2, r7, r2
   110a4:	7812      	ldrb	r2, [r2, #0]
   110a6:	429a      	cmp	r2, r3
   110a8:	d007      	beq.n	110ba <removeNumber+0xce>
   110aa:	230e      	movs	r3, #14
   110ac:	18fb      	adds	r3, r7, r3
   110ae:	781a      	ldrb	r2, [r3, #0]
   110b0:	4b0e      	ldr	r3, [pc, #56]	; (110ec <removeNumber+0x100>)
   110b2:	789b      	ldrb	r3, [r3, #2]
   110b4:	3b01      	subs	r3, #1
   110b6:	429a      	cmp	r2, r3
   110b8:	dd02      	ble.n	110c0 <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
   110ba:	4b0c      	ldr	r3, [pc, #48]	; (110ec <removeNumber+0x100>)
   110bc:	2201      	movs	r2, #1
   110be:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   110c0:	4a0c      	ldr	r2, [pc, #48]	; (110f4 <removeNumber+0x108>)
   110c2:	4b0a      	ldr	r3, [pc, #40]	; (110ec <removeNumber+0x100>)
   110c4:	0010      	movs	r0, r2
   110c6:	0019      	movs	r1, r3
   110c8:	2308      	movs	r3, #8
   110ca:	001a      	movs	r2, r3
   110cc:	4b0e      	ldr	r3, [pc, #56]	; (11108 <removeNumber+0x11c>)
   110ce:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   110d0:	4b08      	ldr	r3, [pc, #32]	; (110f4 <removeNumber+0x108>)
   110d2:	0019      	movs	r1, r3
   110d4:	2008      	movs	r0, #8
   110d6:	4b0a      	ldr	r3, [pc, #40]	; (11100 <removeNumber+0x114>)
   110d8:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   110da:	4b0a      	ldr	r3, [pc, #40]	; (11104 <removeNumber+0x118>)
   110dc:	4798      	blx	r3
			return true;
   110de:	2301      	movs	r3, #1
   110e0:	e000      	b.n	110e4 <removeNumber+0xf8>
		}
	}
	return false;
   110e2:	2300      	movs	r3, #0
}
   110e4:	0018      	movs	r0, r3
   110e6:	46bd      	mov	sp, r7
   110e8:	b005      	add	sp, #20
   110ea:	bd90      	pop	{r4, r7, pc}
   110ec:	20000814 	.word	0x20000814
   110f0:	00010ded 	.word	0x00010ded
   110f4:	20000784 	.word	0x20000784
   110f8:	0002975b 	.word	0x0002975b
   110fc:	0002443d 	.word	0x0002443d
   11100:	00024331 	.word	0x00024331
   11104:	000244d9 	.word	0x000244d9
   11108:	00029725 	.word	0x00029725

0001110c <clearNumbers>:

void clearNumbers(bool admin)
{
   1110c:	b580      	push	{r7, lr}
   1110e:	b082      	sub	sp, #8
   11110:	af00      	add	r7, sp, #0
   11112:	0002      	movs	r2, r0
   11114:	1dfb      	adds	r3, r7, #7
   11116:	701a      	strb	r2, [r3, #0]
	if (admin)
   11118:	1dfb      	adds	r3, r7, #7
   1111a:	781b      	ldrb	r3, [r3, #0]
   1111c:	2b00      	cmp	r3, #0
   1111e:	d003      	beq.n	11128 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
   11120:	4b28      	ldr	r3, [pc, #160]	; (111c4 <clearNumbers+0xb8>)
   11122:	2200      	movs	r2, #0
   11124:	709a      	strb	r2, [r3, #2]
   11126:	e018      	b.n	1115a <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
   11128:	4b27      	ldr	r3, [pc, #156]	; (111c8 <clearNumbers+0xbc>)
   1112a:	223c      	movs	r2, #60	; 0x3c
   1112c:	2100      	movs	r1, #0
   1112e:	0018      	movs	r0, r3
   11130:	4b26      	ldr	r3, [pc, #152]	; (111cc <clearNumbers+0xc0>)
   11132:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   11134:	4b23      	ldr	r3, [pc, #140]	; (111c4 <clearNumbers+0xb8>)
   11136:	78db      	ldrb	r3, [r3, #3]
   11138:	3309      	adds	r3, #9
   1113a:	b2db      	uxtb	r3, r3
   1113c:	4a22      	ldr	r2, [pc, #136]	; (111c8 <clearNumbers+0xbc>)
   1113e:	0011      	movs	r1, r2
   11140:	0018      	movs	r0, r3
   11142:	4b23      	ldr	r3, [pc, #140]	; (111d0 <clearNumbers+0xc4>)
   11144:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
   11146:	4b20      	ldr	r3, [pc, #128]	; (111c8 <clearNumbers+0xbc>)
   11148:	0019      	movs	r1, r3
   1114a:	2009      	movs	r0, #9
   1114c:	4b21      	ldr	r3, [pc, #132]	; (111d4 <clearNumbers+0xc8>)
   1114e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11150:	4b21      	ldr	r3, [pc, #132]	; (111d8 <clearNumbers+0xcc>)
   11152:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
   11154:	4b1b      	ldr	r3, [pc, #108]	; (111c4 <clearNumbers+0xb8>)
   11156:	2201      	movs	r2, #1
   11158:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
   1115a:	4b1a      	ldr	r3, [pc, #104]	; (111c4 <clearNumbers+0xb8>)
   1115c:	2200      	movs	r2, #0
   1115e:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11160:	4b18      	ldr	r3, [pc, #96]	; (111c4 <clearNumbers+0xb8>)
   11162:	2201      	movs	r2, #1
   11164:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11166:	4a18      	ldr	r2, [pc, #96]	; (111c8 <clearNumbers+0xbc>)
   11168:	4b16      	ldr	r3, [pc, #88]	; (111c4 <clearNumbers+0xb8>)
   1116a:	0010      	movs	r0, r2
   1116c:	0019      	movs	r1, r3
   1116e:	2308      	movs	r3, #8
   11170:	001a      	movs	r2, r3
   11172:	4b1a      	ldr	r3, [pc, #104]	; (111dc <clearNumbers+0xd0>)
   11174:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
   11176:	4b13      	ldr	r3, [pc, #76]	; (111c4 <clearNumbers+0xb8>)
   11178:	2200      	movs	r2, #0
   1117a:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   1117c:	4b11      	ldr	r3, [pc, #68]	; (111c4 <clearNumbers+0xb8>)
   1117e:	2201      	movs	r2, #1
   11180:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11182:	4b11      	ldr	r3, [pc, #68]	; (111c8 <clearNumbers+0xbc>)
   11184:	0019      	movs	r1, r3
   11186:	2008      	movs	r0, #8
   11188:	4b12      	ldr	r3, [pc, #72]	; (111d4 <clearNumbers+0xc8>)
   1118a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1118c:	4b12      	ldr	r3, [pc, #72]	; (111d8 <clearNumbers+0xcc>)
   1118e:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
   11190:	2000      	movs	r0, #0
   11192:	4b13      	ldr	r3, [pc, #76]	; (111e0 <clearNumbers+0xd4>)
   11194:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
   11196:	4b13      	ldr	r3, [pc, #76]	; (111e4 <clearNumbers+0xd8>)
   11198:	2200      	movs	r2, #0
   1119a:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1119c:	4a0a      	ldr	r2, [pc, #40]	; (111c8 <clearNumbers+0xbc>)
   1119e:	4b11      	ldr	r3, [pc, #68]	; (111e4 <clearNumbers+0xd8>)
   111a0:	0010      	movs	r0, r2
   111a2:	0019      	movs	r1, r3
   111a4:	2318      	movs	r3, #24
   111a6:	001a      	movs	r2, r3
   111a8:	4b0c      	ldr	r3, [pc, #48]	; (111dc <clearNumbers+0xd0>)
   111aa:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   111ac:	4b06      	ldr	r3, [pc, #24]	; (111c8 <clearNumbers+0xbc>)
   111ae:	0019      	movs	r1, r3
   111b0:	2018      	movs	r0, #24
   111b2:	4b08      	ldr	r3, [pc, #32]	; (111d4 <clearNumbers+0xc8>)
   111b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   111b6:	4b08      	ldr	r3, [pc, #32]	; (111d8 <clearNumbers+0xcc>)
   111b8:	4798      	blx	r3
}
   111ba:	46c0      	nop			; (mov r8, r8)
   111bc:	46bd      	mov	sp, r7
   111be:	b002      	add	sp, #8
   111c0:	bd80      	pop	{r7, pc}
   111c2:	46c0      	nop			; (mov r8, r8)
   111c4:	20000814 	.word	0x20000814
   111c8:	20000784 	.word	0x20000784
   111cc:	0002975b 	.word	0x0002975b
   111d0:	0002443d 	.word	0x0002443d
   111d4:	00024331 	.word	0x00024331
   111d8:	000244d9 	.word	0x000244d9
   111dc:	00029725 	.word	0x00029725
   111e0:	000111e9 	.word	0x000111e9
   111e4:	2000083c 	.word	0x2000083c

000111e8 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
   111e8:	b580      	push	{r7, lr}
   111ea:	b082      	sub	sp, #8
   111ec:	af00      	add	r7, sp, #0
   111ee:	0002      	movs	r2, r0
   111f0:	1dfb      	adds	r3, r7, #7
   111f2:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
   111f4:	1dfb      	adds	r3, r7, #7
   111f6:	781a      	ldrb	r2, [r3, #0]
   111f8:	4b0a      	ldr	r3, [pc, #40]	; (11224 <saveAlterNumberSetting+0x3c>)
   111fa:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   111fc:	4a0a      	ldr	r2, [pc, #40]	; (11228 <saveAlterNumberSetting+0x40>)
   111fe:	4b09      	ldr	r3, [pc, #36]	; (11224 <saveAlterNumberSetting+0x3c>)
   11200:	0010      	movs	r0, r2
   11202:	0019      	movs	r1, r3
   11204:	2318      	movs	r3, #24
   11206:	001a      	movs	r2, r3
   11208:	4b08      	ldr	r3, [pc, #32]	; (1122c <saveAlterNumberSetting+0x44>)
   1120a:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1120c:	4b06      	ldr	r3, [pc, #24]	; (11228 <saveAlterNumberSetting+0x40>)
   1120e:	0019      	movs	r1, r3
   11210:	2018      	movs	r0, #24
   11212:	4b07      	ldr	r3, [pc, #28]	; (11230 <saveAlterNumberSetting+0x48>)
   11214:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11216:	4b07      	ldr	r3, [pc, #28]	; (11234 <saveAlterNumberSetting+0x4c>)
   11218:	4798      	blx	r3
}
   1121a:	46c0      	nop			; (mov r8, r8)
   1121c:	46bd      	mov	sp, r7
   1121e:	b002      	add	sp, #8
   11220:	bd80      	pop	{r7, pc}
   11222:	46c0      	nop			; (mov r8, r8)
   11224:	2000083c 	.word	0x2000083c
   11228:	20000784 	.word	0x20000784
   1122c:	00029725 	.word	0x00029725
   11230:	00024331 	.word	0x00024331
   11234:	000244d9 	.word	0x000244d9

00011238 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
   11238:	b580      	push	{r7, lr}
   1123a:	b082      	sub	sp, #8
   1123c:	af00      	add	r7, sp, #0
   1123e:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   11240:	4b11      	ldr	r3, [pc, #68]	; (11288 <addAlternateNumber+0x50>)
   11242:	789b      	ldrb	r3, [r3, #2]
   11244:	2b00      	cmp	r3, #0
   11246:	d019      	beq.n	1127c <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
   11248:	4b10      	ldr	r3, [pc, #64]	; (1128c <addAlternateNumber+0x54>)
   1124a:	2201      	movs	r2, #1
   1124c:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
   1124e:	687a      	ldr	r2, [r7, #4]
   11250:	4b0f      	ldr	r3, [pc, #60]	; (11290 <addAlternateNumber+0x58>)
   11252:	0011      	movs	r1, r2
   11254:	0018      	movs	r0, r3
   11256:	4b0f      	ldr	r3, [pc, #60]	; (11294 <addAlternateNumber+0x5c>)
   11258:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1125a:	4a0f      	ldr	r2, [pc, #60]	; (11298 <addAlternateNumber+0x60>)
   1125c:	4b0b      	ldr	r3, [pc, #44]	; (1128c <addAlternateNumber+0x54>)
   1125e:	0010      	movs	r0, r2
   11260:	0019      	movs	r1, r3
   11262:	2318      	movs	r3, #24
   11264:	001a      	movs	r2, r3
   11266:	4b0d      	ldr	r3, [pc, #52]	; (1129c <addAlternateNumber+0x64>)
   11268:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1126a:	4b0b      	ldr	r3, [pc, #44]	; (11298 <addAlternateNumber+0x60>)
   1126c:	0019      	movs	r1, r3
   1126e:	2018      	movs	r0, #24
   11270:	4b0b      	ldr	r3, [pc, #44]	; (112a0 <addAlternateNumber+0x68>)
   11272:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11274:	4b0b      	ldr	r3, [pc, #44]	; (112a4 <addAlternateNumber+0x6c>)
   11276:	4798      	blx	r3
		
		return true;
   11278:	2301      	movs	r3, #1
   1127a:	e000      	b.n	1127e <addAlternateNumber+0x46>
	}
	return false;
   1127c:	2300      	movs	r3, #0
}
   1127e:	0018      	movs	r0, r3
   11280:	46bd      	mov	sp, r7
   11282:	b002      	add	sp, #8
   11284:	bd80      	pop	{r7, pc}
   11286:	46c0      	nop			; (mov r8, r8)
   11288:	20000814 	.word	0x20000814
   1128c:	2000083c 	.word	0x2000083c
   11290:	20000840 	.word	0x20000840
   11294:	000299db 	.word	0x000299db
   11298:	20000784 	.word	0x20000784
   1129c:	00029725 	.word	0x00029725
   112a0:	00024331 	.word	0x00024331
   112a4:	000244d9 	.word	0x000244d9

000112a8 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
   112a8:	b580      	push	{r7, lr}
   112aa:	b082      	sub	sp, #8
   112ac:	af00      	add	r7, sp, #0
   112ae:	0002      	movs	r2, r0
   112b0:	1dfb      	adds	r3, r7, #7
   112b2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
   112b4:	1dfb      	adds	r3, r7, #7
   112b6:	781a      	ldrb	r2, [r3, #0]
   112b8:	4b09      	ldr	r3, [pc, #36]	; (112e0 <saveAutoStartSettings+0x38>)
   112ba:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112bc:	4908      	ldr	r1, [pc, #32]	; (112e0 <saveAutoStartSettings+0x38>)
   112be:	4b09      	ldr	r3, [pc, #36]	; (112e4 <saveAutoStartSettings+0x3c>)
   112c0:	2230      	movs	r2, #48	; 0x30
   112c2:	0018      	movs	r0, r3
   112c4:	4b08      	ldr	r3, [pc, #32]	; (112e8 <saveAutoStartSettings+0x40>)
   112c6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   112c8:	4b06      	ldr	r3, [pc, #24]	; (112e4 <saveAutoStartSettings+0x3c>)
   112ca:	0019      	movs	r1, r3
   112cc:	201a      	movs	r0, #26
   112ce:	4b07      	ldr	r3, [pc, #28]	; (112ec <saveAutoStartSettings+0x44>)
   112d0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   112d2:	4b07      	ldr	r3, [pc, #28]	; (112f0 <saveAutoStartSettings+0x48>)
   112d4:	4798      	blx	r3
}
   112d6:	46c0      	nop			; (mov r8, r8)
   112d8:	46bd      	mov	sp, r7
   112da:	b002      	add	sp, #8
   112dc:	bd80      	pop	{r7, pc}
   112de:	46c0      	nop			; (mov r8, r8)
   112e0:	20000854 	.word	0x20000854
   112e4:	20000784 	.word	0x20000784
   112e8:	00029725 	.word	0x00029725
   112ec:	00024331 	.word	0x00024331
   112f0:	000244d9 	.word	0x000244d9

000112f4 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
   112f4:	b580      	push	{r7, lr}
   112f6:	b082      	sub	sp, #8
   112f8:	af00      	add	r7, sp, #0
   112fa:	0002      	movs	r2, r0
   112fc:	1dbb      	adds	r3, r7, #6
   112fe:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
   11300:	4b0a      	ldr	r3, [pc, #40]	; (1132c <saveAutoStartTimeSettings+0x38>)
   11302:	1dba      	adds	r2, r7, #6
   11304:	8812      	ldrh	r2, [r2, #0]
   11306:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11308:	4908      	ldr	r1, [pc, #32]	; (1132c <saveAutoStartTimeSettings+0x38>)
   1130a:	4b09      	ldr	r3, [pc, #36]	; (11330 <saveAutoStartTimeSettings+0x3c>)
   1130c:	2230      	movs	r2, #48	; 0x30
   1130e:	0018      	movs	r0, r3
   11310:	4b08      	ldr	r3, [pc, #32]	; (11334 <saveAutoStartTimeSettings+0x40>)
   11312:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11314:	4b06      	ldr	r3, [pc, #24]	; (11330 <saveAutoStartTimeSettings+0x3c>)
   11316:	0019      	movs	r1, r3
   11318:	201a      	movs	r0, #26
   1131a:	4b07      	ldr	r3, [pc, #28]	; (11338 <saveAutoStartTimeSettings+0x44>)
   1131c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1131e:	4b07      	ldr	r3, [pc, #28]	; (1133c <saveAutoStartTimeSettings+0x48>)
   11320:	4798      	blx	r3
}
   11322:	46c0      	nop			; (mov r8, r8)
   11324:	46bd      	mov	sp, r7
   11326:	b002      	add	sp, #8
   11328:	bd80      	pop	{r7, pc}
   1132a:	46c0      	nop			; (mov r8, r8)
   1132c:	20000854 	.word	0x20000854
   11330:	20000784 	.word	0x20000784
   11334:	00029725 	.word	0x00029725
   11338:	00024331 	.word	0x00024331
   1133c:	000244d9 	.word	0x000244d9

00011340 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
   11340:	b580      	push	{r7, lr}
   11342:	b082      	sub	sp, #8
   11344:	af00      	add	r7, sp, #0
   11346:	0002      	movs	r2, r0
   11348:	1dfb      	adds	r3, r7, #7
   1134a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
   1134c:	4b0a      	ldr	r3, [pc, #40]	; (11378 <saveDNDSettings+0x38>)
   1134e:	1dfa      	adds	r2, r7, #7
   11350:	7812      	ldrb	r2, [r2, #0]
   11352:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11354:	4908      	ldr	r1, [pc, #32]	; (11378 <saveDNDSettings+0x38>)
   11356:	4b09      	ldr	r3, [pc, #36]	; (1137c <saveDNDSettings+0x3c>)
   11358:	2230      	movs	r2, #48	; 0x30
   1135a:	0018      	movs	r0, r3
   1135c:	4b08      	ldr	r3, [pc, #32]	; (11380 <saveDNDSettings+0x40>)
   1135e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11360:	4b06      	ldr	r3, [pc, #24]	; (1137c <saveDNDSettings+0x3c>)
   11362:	0019      	movs	r1, r3
   11364:	201a      	movs	r0, #26
   11366:	4b07      	ldr	r3, [pc, #28]	; (11384 <saveDNDSettings+0x44>)
   11368:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1136a:	4b07      	ldr	r3, [pc, #28]	; (11388 <saveDNDSettings+0x48>)
   1136c:	4798      	blx	r3
}
   1136e:	46c0      	nop			; (mov r8, r8)
   11370:	46bd      	mov	sp, r7
   11372:	b002      	add	sp, #8
   11374:	bd80      	pop	{r7, pc}
   11376:	46c0      	nop			; (mov r8, r8)
   11378:	20000854 	.word	0x20000854
   1137c:	20000784 	.word	0x20000784
   11380:	00029725 	.word	0x00029725
   11384:	00024331 	.word	0x00024331
   11388:	000244d9 	.word	0x000244d9

0001138c <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
   1138c:	b580      	push	{r7, lr}
   1138e:	b082      	sub	sp, #8
   11390:	af00      	add	r7, sp, #0
   11392:	0002      	movs	r2, r0
   11394:	1dfb      	adds	r3, r7, #7
   11396:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
   11398:	4b0a      	ldr	r3, [pc, #40]	; (113c4 <saveResponseSettings+0x38>)
   1139a:	1dfa      	adds	r2, r7, #7
   1139c:	7812      	ldrb	r2, [r2, #0]
   1139e:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   113a0:	4908      	ldr	r1, [pc, #32]	; (113c4 <saveResponseSettings+0x38>)
   113a2:	4b09      	ldr	r3, [pc, #36]	; (113c8 <saveResponseSettings+0x3c>)
   113a4:	2230      	movs	r2, #48	; 0x30
   113a6:	0018      	movs	r0, r3
   113a8:	4b08      	ldr	r3, [pc, #32]	; (113cc <saveResponseSettings+0x40>)
   113aa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   113ac:	4b06      	ldr	r3, [pc, #24]	; (113c8 <saveResponseSettings+0x3c>)
   113ae:	0019      	movs	r1, r3
   113b0:	201a      	movs	r0, #26
   113b2:	4b07      	ldr	r3, [pc, #28]	; (113d0 <saveResponseSettings+0x44>)
   113b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   113b6:	4b07      	ldr	r3, [pc, #28]	; (113d4 <saveResponseSettings+0x48>)
   113b8:	4798      	blx	r3
}
   113ba:	46c0      	nop			; (mov r8, r8)
   113bc:	46bd      	mov	sp, r7
   113be:	b002      	add	sp, #8
   113c0:	bd80      	pop	{r7, pc}
   113c2:	46c0      	nop			; (mov r8, r8)
   113c4:	20000854 	.word	0x20000854
   113c8:	20000784 	.word	0x20000784
   113cc:	00029725 	.word	0x00029725
   113d0:	00024331 	.word	0x00024331
   113d4:	000244d9 	.word	0x000244d9

000113d8 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
   113d8:	b5b0      	push	{r4, r5, r7, lr}
   113da:	b082      	sub	sp, #8
   113dc:	af00      	add	r7, sp, #0
   113de:	0005      	movs	r5, r0
   113e0:	000c      	movs	r4, r1
   113e2:	0010      	movs	r0, r2
   113e4:	0019      	movs	r1, r3
   113e6:	1dfb      	adds	r3, r7, #7
   113e8:	1c2a      	adds	r2, r5, #0
   113ea:	701a      	strb	r2, [r3, #0]
   113ec:	1dbb      	adds	r3, r7, #6
   113ee:	1c22      	adds	r2, r4, #0
   113f0:	701a      	strb	r2, [r3, #0]
   113f2:	1d7b      	adds	r3, r7, #5
   113f4:	1c02      	adds	r2, r0, #0
   113f6:	701a      	strb	r2, [r3, #0]
   113f8:	1d3b      	adds	r3, r7, #4
   113fa:	1c0a      	adds	r2, r1, #0
   113fc:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
   113fe:	1dfb      	adds	r3, r7, #7
   11400:	781a      	ldrb	r2, [r3, #0]
   11402:	4b14      	ldr	r3, [pc, #80]	; (11454 <saveNoCallSettings+0x7c>)
   11404:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
   11406:	4b13      	ldr	r3, [pc, #76]	; (11454 <saveNoCallSettings+0x7c>)
   11408:	7a5b      	ldrb	r3, [r3, #9]
   1140a:	b2db      	uxtb	r3, r3
   1140c:	2b00      	cmp	r3, #0
   1140e:	d010      	beq.n	11432 <saveNoCallSettings+0x5a>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
   11410:	4b10      	ldr	r3, [pc, #64]	; (11454 <saveNoCallSettings+0x7c>)
   11412:	1dba      	adds	r2, r7, #6
   11414:	7812      	ldrb	r2, [r2, #0]
   11416:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
   11418:	4b0e      	ldr	r3, [pc, #56]	; (11454 <saveNoCallSettings+0x7c>)
   1141a:	1d7a      	adds	r2, r7, #5
   1141c:	7812      	ldrb	r2, [r2, #0]
   1141e:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
   11420:	4b0c      	ldr	r3, [pc, #48]	; (11454 <saveNoCallSettings+0x7c>)
   11422:	1d3a      	adds	r2, r7, #4
   11424:	7812      	ldrb	r2, [r2, #0]
   11426:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
   11428:	4b0a      	ldr	r3, [pc, #40]	; (11454 <saveNoCallSettings+0x7c>)
   1142a:	2218      	movs	r2, #24
   1142c:	18ba      	adds	r2, r7, r2
   1142e:	7812      	ldrb	r2, [r2, #0]
   11430:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11432:	4908      	ldr	r1, [pc, #32]	; (11454 <saveNoCallSettings+0x7c>)
   11434:	4b08      	ldr	r3, [pc, #32]	; (11458 <saveNoCallSettings+0x80>)
   11436:	2230      	movs	r2, #48	; 0x30
   11438:	0018      	movs	r0, r3
   1143a:	4b08      	ldr	r3, [pc, #32]	; (1145c <saveNoCallSettings+0x84>)
   1143c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1143e:	4b06      	ldr	r3, [pc, #24]	; (11458 <saveNoCallSettings+0x80>)
   11440:	0019      	movs	r1, r3
   11442:	201a      	movs	r0, #26
   11444:	4b06      	ldr	r3, [pc, #24]	; (11460 <saveNoCallSettings+0x88>)
   11446:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11448:	4b06      	ldr	r3, [pc, #24]	; (11464 <saveNoCallSettings+0x8c>)
   1144a:	4798      	blx	r3
}
   1144c:	46c0      	nop			; (mov r8, r8)
   1144e:	46bd      	mov	sp, r7
   11450:	b002      	add	sp, #8
   11452:	bdb0      	pop	{r4, r5, r7, pc}
   11454:	20000854 	.word	0x20000854
   11458:	20000784 	.word	0x20000784
   1145c:	00029725 	.word	0x00029725
   11460:	00024331 	.word	0x00024331
   11464:	000244d9 	.word	0x000244d9

00011468 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
   11468:	b580      	push	{r7, lr}
   1146a:	b082      	sub	sp, #8
   1146c:	af00      	add	r7, sp, #0
   1146e:	0002      	movs	r2, r0
   11470:	1dfb      	adds	r3, r7, #7
   11472:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
   11474:	1dfb      	adds	r3, r7, #7
   11476:	781a      	ldrb	r2, [r3, #0]
   11478:	4b09      	ldr	r3, [pc, #36]	; (114a0 <saveWaterBypassSettings+0x38>)
   1147a:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1147c:	4908      	ldr	r1, [pc, #32]	; (114a0 <saveWaterBypassSettings+0x38>)
   1147e:	4b09      	ldr	r3, [pc, #36]	; (114a4 <saveWaterBypassSettings+0x3c>)
   11480:	2230      	movs	r2, #48	; 0x30
   11482:	0018      	movs	r0, r3
   11484:	4b08      	ldr	r3, [pc, #32]	; (114a8 <saveWaterBypassSettings+0x40>)
   11486:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11488:	4b06      	ldr	r3, [pc, #24]	; (114a4 <saveWaterBypassSettings+0x3c>)
   1148a:	0019      	movs	r1, r3
   1148c:	201a      	movs	r0, #26
   1148e:	4b07      	ldr	r3, [pc, #28]	; (114ac <saveWaterBypassSettings+0x44>)
   11490:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11492:	4b07      	ldr	r3, [pc, #28]	; (114b0 <saveWaterBypassSettings+0x48>)
   11494:	4798      	blx	r3
}
   11496:	46c0      	nop			; (mov r8, r8)
   11498:	46bd      	mov	sp, r7
   1149a:	b002      	add	sp, #8
   1149c:	bd80      	pop	{r7, pc}
   1149e:	46c0      	nop			; (mov r8, r8)
   114a0:	20000854 	.word	0x20000854
   114a4:	20000784 	.word	0x20000784
   114a8:	00029725 	.word	0x00029725
   114ac:	00024331 	.word	0x00024331
   114b0:	000244d9 	.word	0x000244d9

000114b4 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
   114b4:	b580      	push	{r7, lr}
   114b6:	b082      	sub	sp, #8
   114b8:	af00      	add	r7, sp, #0
   114ba:	0002      	movs	r2, r0
   114bc:	1dfb      	adds	r3, r7, #7
   114be:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
   114c0:	1dfb      	adds	r3, r7, #7
   114c2:	781a      	ldrb	r2, [r3, #0]
   114c4:	4b09      	ldr	r3, [pc, #36]	; (114ec <savePreventOverFlowSettings+0x38>)
   114c6:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   114c8:	4908      	ldr	r1, [pc, #32]	; (114ec <savePreventOverFlowSettings+0x38>)
   114ca:	4b09      	ldr	r3, [pc, #36]	; (114f0 <savePreventOverFlowSettings+0x3c>)
   114cc:	2230      	movs	r2, #48	; 0x30
   114ce:	0018      	movs	r0, r3
   114d0:	4b08      	ldr	r3, [pc, #32]	; (114f4 <savePreventOverFlowSettings+0x40>)
   114d2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   114d4:	4b06      	ldr	r3, [pc, #24]	; (114f0 <savePreventOverFlowSettings+0x3c>)
   114d6:	0019      	movs	r1, r3
   114d8:	201a      	movs	r0, #26
   114da:	4b07      	ldr	r3, [pc, #28]	; (114f8 <savePreventOverFlowSettings+0x44>)
   114dc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   114de:	4b07      	ldr	r3, [pc, #28]	; (114fc <savePreventOverFlowSettings+0x48>)
   114e0:	4798      	blx	r3
}
   114e2:	46c0      	nop			; (mov r8, r8)
   114e4:	46bd      	mov	sp, r7
   114e6:	b002      	add	sp, #8
   114e8:	bd80      	pop	{r7, pc}
   114ea:	46c0      	nop			; (mov r8, r8)
   114ec:	20000854 	.word	0x20000854
   114f0:	20000784 	.word	0x20000784
   114f4:	00029725 	.word	0x00029725
   114f8:	00024331 	.word	0x00024331
   114fc:	000244d9 	.word	0x000244d9

00011500 <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
   11500:	b580      	push	{r7, lr}
   11502:	b082      	sub	sp, #8
   11504:	af00      	add	r7, sp, #0
   11506:	0002      	movs	r2, r0
   11508:	1dfb      	adds	r3, r7, #7
   1150a:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
   1150c:	1dfb      	adds	r3, r7, #7
   1150e:	781b      	ldrb	r3, [r3, #0]
   11510:	2b64      	cmp	r3, #100	; 0x64
   11512:	d919      	bls.n	11548 <setOverloadPer+0x48>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
   11514:	4b0f      	ldr	r3, [pc, #60]	; (11554 <setOverloadPer+0x54>)
   11516:	1dfa      	adds	r2, r7, #7
   11518:	7812      	ldrb	r2, [r2, #0]
   1151a:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1151c:	490d      	ldr	r1, [pc, #52]	; (11554 <setOverloadPer+0x54>)
   1151e:	4b0e      	ldr	r3, [pc, #56]	; (11558 <setOverloadPer+0x58>)
   11520:	2230      	movs	r2, #48	; 0x30
   11522:	0018      	movs	r0, r3
   11524:	4b0d      	ldr	r3, [pc, #52]	; (1155c <setOverloadPer+0x5c>)
   11526:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11528:	4b0b      	ldr	r3, [pc, #44]	; (11558 <setOverloadPer+0x58>)
   1152a:	0019      	movs	r1, r3
   1152c:	201a      	movs	r0, #26
   1152e:	4b0c      	ldr	r3, [pc, #48]	; (11560 <setOverloadPer+0x60>)
   11530:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11532:	4b0c      	ldr	r3, [pc, #48]	; (11564 <setOverloadPer+0x64>)
   11534:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
   11536:	4b07      	ldr	r3, [pc, #28]	; (11554 <setOverloadPer+0x54>)
   11538:	7bdb      	ldrb	r3, [r3, #15]
   1153a:	b2db      	uxtb	r3, r3
   1153c:	2b00      	cmp	r3, #0
   1153e:	d001      	beq.n	11544 <setOverloadPer+0x44>
		{
			calcCurrentValues();
   11540:	4b09      	ldr	r3, [pc, #36]	; (11568 <setOverloadPer+0x68>)
   11542:	4798      	blx	r3
		}
		return true;
   11544:	2301      	movs	r3, #1
   11546:	e000      	b.n	1154a <setOverloadPer+0x4a>
	}
	return false;
   11548:	2300      	movs	r3, #0
}
   1154a:	0018      	movs	r0, r3
   1154c:	46bd      	mov	sp, r7
   1154e:	b002      	add	sp, #8
   11550:	bd80      	pop	{r7, pc}
   11552:	46c0      	nop			; (mov r8, r8)
   11554:	20000854 	.word	0x20000854
   11558:	20000784 	.word	0x20000784
   1155c:	00029725 	.word	0x00029725
   11560:	00024331 	.word	0x00024331
   11564:	000244d9 	.word	0x000244d9
   11568:	000117ed 	.word	0x000117ed

0001156c <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
   1156c:	b580      	push	{r7, lr}
   1156e:	b082      	sub	sp, #8
   11570:	af00      	add	r7, sp, #0
   11572:	0002      	movs	r2, r0
   11574:	1dfb      	adds	r3, r7, #7
   11576:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
   11578:	1dfb      	adds	r3, r7, #7
   1157a:	781b      	ldrb	r3, [r3, #0]
   1157c:	2b00      	cmp	r3, #0
   1157e:	d01d      	beq.n	115bc <setUnderloadPer+0x50>
   11580:	1dfb      	adds	r3, r7, #7
   11582:	781b      	ldrb	r3, [r3, #0]
   11584:	2b63      	cmp	r3, #99	; 0x63
   11586:	d819      	bhi.n	115bc <setUnderloadPer+0x50>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
   11588:	4b0f      	ldr	r3, [pc, #60]	; (115c8 <setUnderloadPer+0x5c>)
   1158a:	1dfa      	adds	r2, r7, #7
   1158c:	7812      	ldrb	r2, [r2, #0]
   1158e:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11590:	490d      	ldr	r1, [pc, #52]	; (115c8 <setUnderloadPer+0x5c>)
   11592:	4b0e      	ldr	r3, [pc, #56]	; (115cc <setUnderloadPer+0x60>)
   11594:	2230      	movs	r2, #48	; 0x30
   11596:	0018      	movs	r0, r3
   11598:	4b0d      	ldr	r3, [pc, #52]	; (115d0 <setUnderloadPer+0x64>)
   1159a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1159c:	4b0b      	ldr	r3, [pc, #44]	; (115cc <setUnderloadPer+0x60>)
   1159e:	0019      	movs	r1, r3
   115a0:	201a      	movs	r0, #26
   115a2:	4b0c      	ldr	r3, [pc, #48]	; (115d4 <setUnderloadPer+0x68>)
   115a4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   115a6:	4b0c      	ldr	r3, [pc, #48]	; (115d8 <setUnderloadPer+0x6c>)
   115a8:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
   115aa:	4b07      	ldr	r3, [pc, #28]	; (115c8 <setUnderloadPer+0x5c>)
   115ac:	7bdb      	ldrb	r3, [r3, #15]
   115ae:	b2db      	uxtb	r3, r3
   115b0:	2b00      	cmp	r3, #0
   115b2:	d001      	beq.n	115b8 <setUnderloadPer+0x4c>
		{
			calcCurrentValues();
   115b4:	4b09      	ldr	r3, [pc, #36]	; (115dc <setUnderloadPer+0x70>)
   115b6:	4798      	blx	r3
		}
		return true;
   115b8:	2301      	movs	r3, #1
   115ba:	e000      	b.n	115be <setUnderloadPer+0x52>
	}
	return false;
   115bc:	2300      	movs	r3, #0
}
   115be:	0018      	movs	r0, r3
   115c0:	46bd      	mov	sp, r7
   115c2:	b002      	add	sp, #8
   115c4:	bd80      	pop	{r7, pc}
   115c6:	46c0      	nop			; (mov r8, r8)
   115c8:	20000854 	.word	0x20000854
   115cc:	20000784 	.word	0x20000784
   115d0:	00029725 	.word	0x00029725
   115d4:	00024331 	.word	0x00024331
   115d8:	000244d9 	.word	0x000244d9
   115dc:	000117ed 	.word	0x000117ed

000115e0 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
   115e0:	b580      	push	{r7, lr}
   115e2:	b082      	sub	sp, #8
   115e4:	af00      	add	r7, sp, #0
   115e6:	0002      	movs	r2, r0
   115e8:	1dfb      	adds	r3, r7, #7
   115ea:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
   115ec:	1dfb      	adds	r3, r7, #7
   115ee:	7819      	ldrb	r1, [r3, #0]
   115f0:	4b09      	ldr	r3, [pc, #36]	; (11618 <saveSinglePhasingSettings+0x38>)
   115f2:	2220      	movs	r2, #32
   115f4:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   115f6:	4908      	ldr	r1, [pc, #32]	; (11618 <saveSinglePhasingSettings+0x38>)
   115f8:	4b08      	ldr	r3, [pc, #32]	; (1161c <saveSinglePhasingSettings+0x3c>)
   115fa:	2230      	movs	r2, #48	; 0x30
   115fc:	0018      	movs	r0, r3
   115fe:	4b08      	ldr	r3, [pc, #32]	; (11620 <saveSinglePhasingSettings+0x40>)
   11600:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11602:	4b06      	ldr	r3, [pc, #24]	; (1161c <saveSinglePhasingSettings+0x3c>)
   11604:	0019      	movs	r1, r3
   11606:	201a      	movs	r0, #26
   11608:	4b06      	ldr	r3, [pc, #24]	; (11624 <saveSinglePhasingSettings+0x44>)
   1160a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1160c:	4b06      	ldr	r3, [pc, #24]	; (11628 <saveSinglePhasingSettings+0x48>)
   1160e:	4798      	blx	r3
}
   11610:	46c0      	nop			; (mov r8, r8)
   11612:	46bd      	mov	sp, r7
   11614:	b002      	add	sp, #8
   11616:	bd80      	pop	{r7, pc}
   11618:	20000854 	.word	0x20000854
   1161c:	20000784 	.word	0x20000784
   11620:	00029725 	.word	0x00029725
   11624:	00024331 	.word	0x00024331
   11628:	000244d9 	.word	0x000244d9

0001162c <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
   1162c:	b580      	push	{r7, lr}
   1162e:	b082      	sub	sp, #8
   11630:	af00      	add	r7, sp, #0
   11632:	0002      	movs	r2, r0
   11634:	1dbb      	adds	r3, r7, #6
   11636:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
   11638:	4b0a      	ldr	r3, [pc, #40]	; (11664 <saveSinglePhasingVoltage+0x38>)
   1163a:	1dba      	adds	r2, r7, #6
   1163c:	8812      	ldrh	r2, [r2, #0]
   1163e:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11640:	4908      	ldr	r1, [pc, #32]	; (11664 <saveSinglePhasingVoltage+0x38>)
   11642:	4b09      	ldr	r3, [pc, #36]	; (11668 <saveSinglePhasingVoltage+0x3c>)
   11644:	2230      	movs	r2, #48	; 0x30
   11646:	0018      	movs	r0, r3
   11648:	4b08      	ldr	r3, [pc, #32]	; (1166c <saveSinglePhasingVoltage+0x40>)
   1164a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1164c:	4b06      	ldr	r3, [pc, #24]	; (11668 <saveSinglePhasingVoltage+0x3c>)
   1164e:	0019      	movs	r1, r3
   11650:	201a      	movs	r0, #26
   11652:	4b07      	ldr	r3, [pc, #28]	; (11670 <saveSinglePhasingVoltage+0x44>)
   11654:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11656:	4b07      	ldr	r3, [pc, #28]	; (11674 <saveSinglePhasingVoltage+0x48>)
   11658:	4798      	blx	r3
}
   1165a:	46c0      	nop			; (mov r8, r8)
   1165c:	46bd      	mov	sp, r7
   1165e:	b002      	add	sp, #8
   11660:	bd80      	pop	{r7, pc}
   11662:	46c0      	nop			; (mov r8, r8)
   11664:	20000854 	.word	0x20000854
   11668:	20000784 	.word	0x20000784
   1166c:	00029725 	.word	0x00029725
   11670:	00024331 	.word	0x00024331
   11674:	000244d9 	.word	0x000244d9

00011678 <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
   11678:	b580      	push	{r7, lr}
   1167a:	b082      	sub	sp, #8
   1167c:	af00      	add	r7, sp, #0
   1167e:	0002      	movs	r2, r0
   11680:	1dfb      	adds	r3, r7, #7
   11682:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
   11684:	1dfb      	adds	r3, r7, #7
   11686:	7819      	ldrb	r1, [r3, #0]
   11688:	4b09      	ldr	r3, [pc, #36]	; (116b0 <savePhaseSequenceProtectionSettings+0x38>)
   1168a:	2224      	movs	r2, #36	; 0x24
   1168c:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1168e:	4908      	ldr	r1, [pc, #32]	; (116b0 <savePhaseSequenceProtectionSettings+0x38>)
   11690:	4b08      	ldr	r3, [pc, #32]	; (116b4 <savePhaseSequenceProtectionSettings+0x3c>)
   11692:	2230      	movs	r2, #48	; 0x30
   11694:	0018      	movs	r0, r3
   11696:	4b08      	ldr	r3, [pc, #32]	; (116b8 <savePhaseSequenceProtectionSettings+0x40>)
   11698:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1169a:	4b06      	ldr	r3, [pc, #24]	; (116b4 <savePhaseSequenceProtectionSettings+0x3c>)
   1169c:	0019      	movs	r1, r3
   1169e:	201a      	movs	r0, #26
   116a0:	4b06      	ldr	r3, [pc, #24]	; (116bc <savePhaseSequenceProtectionSettings+0x44>)
   116a2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116a4:	4b06      	ldr	r3, [pc, #24]	; (116c0 <savePhaseSequenceProtectionSettings+0x48>)
   116a6:	4798      	blx	r3
}
   116a8:	46c0      	nop			; (mov r8, r8)
   116aa:	46bd      	mov	sp, r7
   116ac:	b002      	add	sp, #8
   116ae:	bd80      	pop	{r7, pc}
   116b0:	20000854 	.word	0x20000854
   116b4:	20000784 	.word	0x20000784
   116b8:	00029725 	.word	0x00029725
   116bc:	00024331 	.word	0x00024331
   116c0:	000244d9 	.word	0x000244d9

000116c4 <saveUnderOverDetectionMethodSettings>:


void saveUnderOverDetectionMethodSettings(uint8_t oumethodDetection)
{
   116c4:	b580      	push	{r7, lr}
   116c6:	b082      	sub	sp, #8
   116c8:	af00      	add	r7, sp, #0
   116ca:	0002      	movs	r2, r0
   116cc:	1dfb      	adds	r3, r7, #7
   116ce:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.over_under_DetectionMethod = oumethodDetection;
   116d0:	4b0a      	ldr	r3, [pc, #40]	; (116fc <saveUnderOverDetectionMethodSettings+0x38>)
   116d2:	1dfa      	adds	r2, r7, #7
   116d4:	2126      	movs	r1, #38	; 0x26
   116d6:	7812      	ldrb	r2, [r2, #0]
   116d8:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   116da:	4908      	ldr	r1, [pc, #32]	; (116fc <saveUnderOverDetectionMethodSettings+0x38>)
   116dc:	4b08      	ldr	r3, [pc, #32]	; (11700 <saveUnderOverDetectionMethodSettings+0x3c>)
   116de:	2230      	movs	r2, #48	; 0x30
   116e0:	0018      	movs	r0, r3
   116e2:	4b08      	ldr	r3, [pc, #32]	; (11704 <saveUnderOverDetectionMethodSettings+0x40>)
   116e4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   116e6:	4b06      	ldr	r3, [pc, #24]	; (11700 <saveUnderOverDetectionMethodSettings+0x3c>)
   116e8:	0019      	movs	r1, r3
   116ea:	201a      	movs	r0, #26
   116ec:	4b06      	ldr	r3, [pc, #24]	; (11708 <saveUnderOverDetectionMethodSettings+0x44>)
   116ee:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116f0:	4b06      	ldr	r3, [pc, #24]	; (1170c <saveUnderOverDetectionMethodSettings+0x48>)
   116f2:	4798      	blx	r3
}
   116f4:	46c0      	nop			; (mov r8, r8)
   116f6:	46bd      	mov	sp, r7
   116f8:	b002      	add	sp, #8
   116fa:	bd80      	pop	{r7, pc}
   116fc:	20000854 	.word	0x20000854
   11700:	20000784 	.word	0x20000784
   11704:	00029725 	.word	0x00029725
   11708:	00024331 	.word	0x00024331
   1170c:	000244d9 	.word	0x000244d9

00011710 <saveMotorVoltageBypassSettings>:

void saveMotorVoltageBypassSettings(bool flag)
{
   11710:	b580      	push	{r7, lr}
   11712:	b082      	sub	sp, #8
   11714:	af00      	add	r7, sp, #0
   11716:	0002      	movs	r2, r0
   11718:	1dfb      	adds	r3, r7, #7
   1171a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.motorVoltageBypass=flag;
   1171c:	1dfb      	adds	r3, r7, #7
   1171e:	7819      	ldrb	r1, [r3, #0]
   11720:	4b09      	ldr	r3, [pc, #36]	; (11748 <saveMotorVoltageBypassSettings+0x38>)
   11722:	2227      	movs	r2, #39	; 0x27
   11724:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11726:	4908      	ldr	r1, [pc, #32]	; (11748 <saveMotorVoltageBypassSettings+0x38>)
   11728:	4b08      	ldr	r3, [pc, #32]	; (1174c <saveMotorVoltageBypassSettings+0x3c>)
   1172a:	2230      	movs	r2, #48	; 0x30
   1172c:	0018      	movs	r0, r3
   1172e:	4b08      	ldr	r3, [pc, #32]	; (11750 <saveMotorVoltageBypassSettings+0x40>)
   11730:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11732:	4b06      	ldr	r3, [pc, #24]	; (1174c <saveMotorVoltageBypassSettings+0x3c>)
   11734:	0019      	movs	r1, r3
   11736:	201a      	movs	r0, #26
   11738:	4b06      	ldr	r3, [pc, #24]	; (11754 <saveMotorVoltageBypassSettings+0x44>)
   1173a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1173c:	4b06      	ldr	r3, [pc, #24]	; (11758 <saveMotorVoltageBypassSettings+0x48>)
   1173e:	4798      	blx	r3
}
   11740:	46c0      	nop			; (mov r8, r8)
   11742:	46bd      	mov	sp, r7
   11744:	b002      	add	sp, #8
   11746:	bd80      	pop	{r7, pc}
   11748:	20000854 	.word	0x20000854
   1174c:	20000784 	.word	0x20000784
   11750:	00029725 	.word	0x00029725
   11754:	00024331 	.word	0x00024331
   11758:	000244d9 	.word	0x000244d9

0001175c <saveMotorVoltageBypasssTimeSettings>:

void saveMotorVoltageBypasssTimeSettings(uint32_t value)
{
   1175c:	b580      	push	{r7, lr}
   1175e:	b082      	sub	sp, #8
   11760:	af00      	add	r7, sp, #0
   11762:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.motorVoltageBypassTime=value;
   11764:	4b09      	ldr	r3, [pc, #36]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x30>)
   11766:	687a      	ldr	r2, [r7, #4]
   11768:	629a      	str	r2, [r3, #40]	; 0x28
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1176a:	4908      	ldr	r1, [pc, #32]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x30>)
   1176c:	4b08      	ldr	r3, [pc, #32]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x34>)
   1176e:	2230      	movs	r2, #48	; 0x30
   11770:	0018      	movs	r0, r3
   11772:	4b08      	ldr	r3, [pc, #32]	; (11794 <saveMotorVoltageBypasssTimeSettings+0x38>)
   11774:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11776:	4b06      	ldr	r3, [pc, #24]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x34>)
   11778:	0019      	movs	r1, r3
   1177a:	201a      	movs	r0, #26
   1177c:	4b06      	ldr	r3, [pc, #24]	; (11798 <saveMotorVoltageBypasssTimeSettings+0x3c>)
   1177e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11780:	4b06      	ldr	r3, [pc, #24]	; (1179c <saveMotorVoltageBypasssTimeSettings+0x40>)
   11782:	4798      	blx	r3
}
   11784:	46c0      	nop			; (mov r8, r8)
   11786:	46bd      	mov	sp, r7
   11788:	b002      	add	sp, #8
   1178a:	bd80      	pop	{r7, pc}
   1178c:	20000854 	.word	0x20000854
   11790:	20000784 	.word	0x20000784
   11794:	00029725 	.word	0x00029725
   11798:	00024331 	.word	0x00024331
   1179c:	000244d9 	.word	0x000244d9

000117a0 <saveMotorFeedbackDetectionSettings>:

void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
   117a0:	b580      	push	{r7, lr}
   117a2:	b082      	sub	sp, #8
   117a4:	af00      	add	r7, sp, #0
   117a6:	0002      	movs	r2, r0
   117a8:	1dfb      	adds	r3, r7, #7
   117aa:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
   117ac:	4b0a      	ldr	r3, [pc, #40]	; (117d8 <saveMotorFeedbackDetectionSettings+0x38>)
   117ae:	1dfa      	adds	r2, r7, #7
   117b0:	2125      	movs	r1, #37	; 0x25
   117b2:	7812      	ldrb	r2, [r2, #0]
   117b4:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   117b6:	4908      	ldr	r1, [pc, #32]	; (117d8 <saveMotorFeedbackDetectionSettings+0x38>)
   117b8:	4b08      	ldr	r3, [pc, #32]	; (117dc <saveMotorFeedbackDetectionSettings+0x3c>)
   117ba:	2230      	movs	r2, #48	; 0x30
   117bc:	0018      	movs	r0, r3
   117be:	4b08      	ldr	r3, [pc, #32]	; (117e0 <saveMotorFeedbackDetectionSettings+0x40>)
   117c0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   117c2:	4b06      	ldr	r3, [pc, #24]	; (117dc <saveMotorFeedbackDetectionSettings+0x3c>)
   117c4:	0019      	movs	r1, r3
   117c6:	201a      	movs	r0, #26
   117c8:	4b06      	ldr	r3, [pc, #24]	; (117e4 <saveMotorFeedbackDetectionSettings+0x44>)
   117ca:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   117cc:	4b06      	ldr	r3, [pc, #24]	; (117e8 <saveMotorFeedbackDetectionSettings+0x48>)
   117ce:	4798      	blx	r3
}
   117d0:	46c0      	nop			; (mov r8, r8)
   117d2:	46bd      	mov	sp, r7
   117d4:	b002      	add	sp, #8
   117d6:	bd80      	pop	{r7, pc}
   117d8:	20000854 	.word	0x20000854
   117dc:	20000784 	.word	0x20000784
   117e0:	00029725 	.word	0x00029725
   117e4:	00024331 	.word	0x00024331
   117e8:	000244d9 	.word	0x000244d9

000117ec <calcCurrentValues>:


void calcCurrentValues(void)
{
   117ec:	b590      	push	{r4, r7, lr}
   117ee:	b083      	sub	sp, #12
   117f0:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
   117f2:	4b2c      	ldr	r3, [pc, #176]	; (118a4 <calcCurrentValues+0xb8>)
   117f4:	691a      	ldr	r2, [r3, #16]
   117f6:	4b2c      	ldr	r3, [pc, #176]	; (118a8 <calcCurrentValues+0xbc>)
   117f8:	0010      	movs	r0, r2
   117fa:	4798      	blx	r3
   117fc:	1c04      	adds	r4, r0, #0
   117fe:	4b29      	ldr	r3, [pc, #164]	; (118a4 <calcCurrentValues+0xb8>)
   11800:	7f1b      	ldrb	r3, [r3, #28]
   11802:	b2da      	uxtb	r2, r3
   11804:	4b28      	ldr	r3, [pc, #160]	; (118a8 <calcCurrentValues+0xbc>)
   11806:	0010      	movs	r0, r2
   11808:	4798      	blx	r3
   1180a:	1c02      	adds	r2, r0, #0
   1180c:	4b27      	ldr	r3, [pc, #156]	; (118ac <calcCurrentValues+0xc0>)
   1180e:	1c11      	adds	r1, r2, #0
   11810:	1c20      	adds	r0, r4, #0
   11812:	4798      	blx	r3
   11814:	1c03      	adds	r3, r0, #0
   11816:	1c1a      	adds	r2, r3, #0
   11818:	4b25      	ldr	r3, [pc, #148]	; (118b0 <calcCurrentValues+0xc4>)
   1181a:	1c10      	adds	r0, r2, #0
   1181c:	4798      	blx	r3
   1181e:	4c25      	ldr	r4, [pc, #148]	; (118b4 <calcCurrentValues+0xc8>)
   11820:	2200      	movs	r2, #0
   11822:	4b25      	ldr	r3, [pc, #148]	; (118b8 <calcCurrentValues+0xcc>)
   11824:	47a0      	blx	r4
   11826:	0003      	movs	r3, r0
   11828:	000c      	movs	r4, r1
   1182a:	0019      	movs	r1, r3
   1182c:	0022      	movs	r2, r4
   1182e:	1dbc      	adds	r4, r7, #6
   11830:	4b22      	ldr	r3, [pc, #136]	; (118bc <calcCurrentValues+0xd0>)
   11832:	0008      	movs	r0, r1
   11834:	0011      	movs	r1, r2
   11836:	4798      	blx	r3
   11838:	0003      	movs	r3, r0
   1183a:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
   1183c:	1dbb      	adds	r3, r7, #6
   1183e:	881b      	ldrh	r3, [r3, #0]
   11840:	0018      	movs	r0, r3
   11842:	4b1f      	ldr	r3, [pc, #124]	; (118c0 <calcCurrentValues+0xd4>)
   11844:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
   11846:	4b17      	ldr	r3, [pc, #92]	; (118a4 <calcCurrentValues+0xb8>)
   11848:	691a      	ldr	r2, [r3, #16]
   1184a:	4b17      	ldr	r3, [pc, #92]	; (118a8 <calcCurrentValues+0xbc>)
   1184c:	0010      	movs	r0, r2
   1184e:	4798      	blx	r3
   11850:	1c04      	adds	r4, r0, #0
   11852:	4b14      	ldr	r3, [pc, #80]	; (118a4 <calcCurrentValues+0xb8>)
   11854:	7f5b      	ldrb	r3, [r3, #29]
   11856:	b2da      	uxtb	r2, r3
   11858:	4b13      	ldr	r3, [pc, #76]	; (118a8 <calcCurrentValues+0xbc>)
   1185a:	0010      	movs	r0, r2
   1185c:	4798      	blx	r3
   1185e:	1c02      	adds	r2, r0, #0
   11860:	4b12      	ldr	r3, [pc, #72]	; (118ac <calcCurrentValues+0xc0>)
   11862:	1c11      	adds	r1, r2, #0
   11864:	1c20      	adds	r0, r4, #0
   11866:	4798      	blx	r3
   11868:	1c03      	adds	r3, r0, #0
   1186a:	1c1a      	adds	r2, r3, #0
   1186c:	4b10      	ldr	r3, [pc, #64]	; (118b0 <calcCurrentValues+0xc4>)
   1186e:	1c10      	adds	r0, r2, #0
   11870:	4798      	blx	r3
   11872:	4c10      	ldr	r4, [pc, #64]	; (118b4 <calcCurrentValues+0xc8>)
   11874:	2200      	movs	r2, #0
   11876:	4b10      	ldr	r3, [pc, #64]	; (118b8 <calcCurrentValues+0xcc>)
   11878:	47a0      	blx	r4
   1187a:	0003      	movs	r3, r0
   1187c:	000c      	movs	r4, r1
   1187e:	0019      	movs	r1, r3
   11880:	0022      	movs	r2, r4
   11882:	1dbc      	adds	r4, r7, #6
   11884:	4b0d      	ldr	r3, [pc, #52]	; (118bc <calcCurrentValues+0xd0>)
   11886:	0008      	movs	r0, r1
   11888:	0011      	movs	r1, r2
   1188a:	4798      	blx	r3
   1188c:	0003      	movs	r3, r0
   1188e:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
   11890:	1dbb      	adds	r3, r7, #6
   11892:	881b      	ldrh	r3, [r3, #0]
   11894:	0018      	movs	r0, r3
   11896:	4b0b      	ldr	r3, [pc, #44]	; (118c4 <calcCurrentValues+0xd8>)
   11898:	4798      	blx	r3
}
   1189a:	46c0      	nop			; (mov r8, r8)
   1189c:	46bd      	mov	sp, r7
   1189e:	b003      	add	sp, #12
   118a0:	bd90      	pop	{r4, r7, pc}
   118a2:	46c0      	nop			; (mov r8, r8)
   118a4:	20000854 	.word	0x20000854
   118a8:	0002796d 	.word	0x0002796d
   118ac:	0002772d 	.word	0x0002772d
   118b0:	00029549 	.word	0x00029549
   118b4:	00028019 	.word	0x00028019
   118b8:	40590000 	.word	0x40590000
   118bc:	000272e1 	.word	0x000272e1
   118c0:	000118c9 	.word	0x000118c9
   118c4:	0001190d 	.word	0x0001190d

000118c8 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
   118c8:	b580      	push	{r7, lr}
   118ca:	b082      	sub	sp, #8
   118cc:	af00      	add	r7, sp, #0
   118ce:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
   118d0:	4b09      	ldr	r3, [pc, #36]	; (118f8 <setUnderloadValue+0x30>)
   118d2:	687a      	ldr	r2, [r7, #4]
   118d4:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   118d6:	4908      	ldr	r1, [pc, #32]	; (118f8 <setUnderloadValue+0x30>)
   118d8:	4b08      	ldr	r3, [pc, #32]	; (118fc <setUnderloadValue+0x34>)
   118da:	2230      	movs	r2, #48	; 0x30
   118dc:	0018      	movs	r0, r3
   118de:	4b08      	ldr	r3, [pc, #32]	; (11900 <setUnderloadValue+0x38>)
   118e0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   118e2:	4b06      	ldr	r3, [pc, #24]	; (118fc <setUnderloadValue+0x34>)
   118e4:	0019      	movs	r1, r3
   118e6:	201a      	movs	r0, #26
   118e8:	4b06      	ldr	r3, [pc, #24]	; (11904 <setUnderloadValue+0x3c>)
   118ea:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   118ec:	4b06      	ldr	r3, [pc, #24]	; (11908 <setUnderloadValue+0x40>)
   118ee:	4798      	blx	r3
}
   118f0:	46c0      	nop			; (mov r8, r8)
   118f2:	46bd      	mov	sp, r7
   118f4:	b002      	add	sp, #8
   118f6:	bd80      	pop	{r7, pc}
   118f8:	20000854 	.word	0x20000854
   118fc:	20000784 	.word	0x20000784
   11900:	00029725 	.word	0x00029725
   11904:	00024331 	.word	0x00024331
   11908:	000244d9 	.word	0x000244d9

0001190c <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
   1190c:	b580      	push	{r7, lr}
   1190e:	b082      	sub	sp, #8
   11910:	af00      	add	r7, sp, #0
   11912:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
   11914:	4b09      	ldr	r3, [pc, #36]	; (1193c <setOverloadValue+0x30>)
   11916:	687a      	ldr	r2, [r7, #4]
   11918:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1191a:	4908      	ldr	r1, [pc, #32]	; (1193c <setOverloadValue+0x30>)
   1191c:	4b08      	ldr	r3, [pc, #32]	; (11940 <setOverloadValue+0x34>)
   1191e:	2230      	movs	r2, #48	; 0x30
   11920:	0018      	movs	r0, r3
   11922:	4b08      	ldr	r3, [pc, #32]	; (11944 <setOverloadValue+0x38>)
   11924:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11926:	4b06      	ldr	r3, [pc, #24]	; (11940 <setOverloadValue+0x34>)
   11928:	0019      	movs	r1, r3
   1192a:	201a      	movs	r0, #26
   1192c:	4b06      	ldr	r3, [pc, #24]	; (11948 <setOverloadValue+0x3c>)
   1192e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11930:	4b06      	ldr	r3, [pc, #24]	; (1194c <setOverloadValue+0x40>)
   11932:	4798      	blx	r3
}
   11934:	46c0      	nop			; (mov r8, r8)
   11936:	46bd      	mov	sp, r7
   11938:	b002      	add	sp, #8
   1193a:	bd80      	pop	{r7, pc}
   1193c:	20000854 	.word	0x20000854
   11940:	20000784 	.word	0x20000784
   11944:	00029725 	.word	0x00029725
   11948:	00024331 	.word	0x00024331
   1194c:	000244d9 	.word	0x000244d9

00011950 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
   11950:	b580      	push	{r7, lr}
   11952:	b082      	sub	sp, #8
   11954:	af00      	add	r7, sp, #0
   11956:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
   11958:	4b09      	ldr	r3, [pc, #36]	; (11980 <setNormalLoadValue+0x30>)
   1195a:	687a      	ldr	r2, [r7, #4]
   1195c:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1195e:	4908      	ldr	r1, [pc, #32]	; (11980 <setNormalLoadValue+0x30>)
   11960:	4b08      	ldr	r3, [pc, #32]	; (11984 <setNormalLoadValue+0x34>)
   11962:	2230      	movs	r2, #48	; 0x30
   11964:	0018      	movs	r0, r3
   11966:	4b08      	ldr	r3, [pc, #32]	; (11988 <setNormalLoadValue+0x38>)
   11968:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1196a:	4b06      	ldr	r3, [pc, #24]	; (11984 <setNormalLoadValue+0x34>)
   1196c:	0019      	movs	r1, r3
   1196e:	201a      	movs	r0, #26
   11970:	4b06      	ldr	r3, [pc, #24]	; (1198c <setNormalLoadValue+0x3c>)
   11972:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11974:	4b06      	ldr	r3, [pc, #24]	; (11990 <setNormalLoadValue+0x40>)
   11976:	4798      	blx	r3
}
   11978:	46c0      	nop			; (mov r8, r8)
   1197a:	46bd      	mov	sp, r7
   1197c:	b002      	add	sp, #8
   1197e:	bd80      	pop	{r7, pc}
   11980:	20000854 	.word	0x20000854
   11984:	20000784 	.word	0x20000784
   11988:	00029725 	.word	0x00029725
   1198c:	00024331 	.word	0x00024331
   11990:	000244d9 	.word	0x000244d9

00011994 <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
   11994:	b580      	push	{r7, lr}
   11996:	b082      	sub	sp, #8
   11998:	af00      	add	r7, sp, #0
   1199a:	0002      	movs	r2, r0
   1199c:	1dfb      	adds	r3, r7, #7
   1199e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
   119a0:	1dfb      	adds	r3, r7, #7
   119a2:	781a      	ldrb	r2, [r3, #0]
   119a4:	4b09      	ldr	r3, [pc, #36]	; (119cc <setCurrentDetection+0x38>)
   119a6:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119a8:	4908      	ldr	r1, [pc, #32]	; (119cc <setCurrentDetection+0x38>)
   119aa:	4b09      	ldr	r3, [pc, #36]	; (119d0 <setCurrentDetection+0x3c>)
   119ac:	2230      	movs	r2, #48	; 0x30
   119ae:	0018      	movs	r0, r3
   119b0:	4b08      	ldr	r3, [pc, #32]	; (119d4 <setCurrentDetection+0x40>)
   119b2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119b4:	4b06      	ldr	r3, [pc, #24]	; (119d0 <setCurrentDetection+0x3c>)
   119b6:	0019      	movs	r1, r3
   119b8:	201a      	movs	r0, #26
   119ba:	4b07      	ldr	r3, [pc, #28]	; (119d8 <setCurrentDetection+0x44>)
   119bc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119be:	4b07      	ldr	r3, [pc, #28]	; (119dc <setCurrentDetection+0x48>)
   119c0:	4798      	blx	r3
}
   119c2:	46c0      	nop			; (mov r8, r8)
   119c4:	46bd      	mov	sp, r7
   119c6:	b002      	add	sp, #8
   119c8:	bd80      	pop	{r7, pc}
   119ca:	46c0      	nop			; (mov r8, r8)
   119cc:	20000854 	.word	0x20000854
   119d0:	20000784 	.word	0x20000784
   119d4:	00029725 	.word	0x00029725
   119d8:	00024331 	.word	0x00024331
   119dc:	000244d9 	.word	0x000244d9

000119e0 <saveStarDeltaTimer>:
	//strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
   119e0:	b580      	push	{r7, lr}
   119e2:	b082      	sub	sp, #8
   119e4:	af00      	add	r7, sp, #0
   119e6:	0002      	movs	r2, r0
   119e8:	1dbb      	adds	r3, r7, #6
   119ea:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
   119ec:	4b0a      	ldr	r3, [pc, #40]	; (11a18 <saveStarDeltaTimer+0x38>)
   119ee:	1dba      	adds	r2, r7, #6
   119f0:	8812      	ldrh	r2, [r2, #0]
   119f2:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119f4:	4908      	ldr	r1, [pc, #32]	; (11a18 <saveStarDeltaTimer+0x38>)
   119f6:	4b09      	ldr	r3, [pc, #36]	; (11a1c <saveStarDeltaTimer+0x3c>)
   119f8:	2230      	movs	r2, #48	; 0x30
   119fa:	0018      	movs	r0, r3
   119fc:	4b08      	ldr	r3, [pc, #32]	; (11a20 <saveStarDeltaTimer+0x40>)
   119fe:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a00:	4b06      	ldr	r3, [pc, #24]	; (11a1c <saveStarDeltaTimer+0x3c>)
   11a02:	0019      	movs	r1, r3
   11a04:	201a      	movs	r0, #26
   11a06:	4b07      	ldr	r3, [pc, #28]	; (11a24 <saveStarDeltaTimer+0x44>)
   11a08:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a0a:	4b07      	ldr	r3, [pc, #28]	; (11a28 <saveStarDeltaTimer+0x48>)
   11a0c:	4798      	blx	r3
}
   11a0e:	46c0      	nop			; (mov r8, r8)
   11a10:	46bd      	mov	sp, r7
   11a12:	b002      	add	sp, #8
   11a14:	bd80      	pop	{r7, pc}
   11a16:	46c0      	nop			; (mov r8, r8)
   11a18:	20000854 	.word	0x20000854
   11a1c:	20000784 	.word	0x20000784
   11a20:	00029725 	.word	0x00029725
   11a24:	00024331 	.word	0x00024331
   11a28:	000244d9 	.word	0x000244d9

00011a2c <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
   11a2c:	b580      	push	{r7, lr}
   11a2e:	b082      	sub	sp, #8
   11a30:	af00      	add	r7, sp, #0
   11a32:	0002      	movs	r2, r0
   11a34:	1dfb      	adds	r3, r7, #7
   11a36:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
   11a38:	4b0a      	ldr	r3, [pc, #40]	; (11a64 <saveEventStageSettings+0x38>)
   11a3a:	1dfa      	adds	r2, r7, #7
   11a3c:	7812      	ldrb	r2, [r2, #0]
   11a3e:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11a40:	4908      	ldr	r1, [pc, #32]	; (11a64 <saveEventStageSettings+0x38>)
   11a42:	4b09      	ldr	r3, [pc, #36]	; (11a68 <saveEventStageSettings+0x3c>)
   11a44:	2230      	movs	r2, #48	; 0x30
   11a46:	0018      	movs	r0, r3
   11a48:	4b08      	ldr	r3, [pc, #32]	; (11a6c <saveEventStageSettings+0x40>)
   11a4a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a4c:	4b06      	ldr	r3, [pc, #24]	; (11a68 <saveEventStageSettings+0x3c>)
   11a4e:	0019      	movs	r1, r3
   11a50:	201a      	movs	r0, #26
   11a52:	4b07      	ldr	r3, [pc, #28]	; (11a70 <saveEventStageSettings+0x44>)
   11a54:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a56:	4b07      	ldr	r3, [pc, #28]	; (11a74 <saveEventStageSettings+0x48>)
   11a58:	4798      	blx	r3
}
   11a5a:	46c0      	nop			; (mov r8, r8)
   11a5c:	46bd      	mov	sp, r7
   11a5e:	b002      	add	sp, #8
   11a60:	bd80      	pop	{r7, pc}
   11a62:	46c0      	nop			; (mov r8, r8)
   11a64:	20000854 	.word	0x20000854
   11a68:	20000784 	.word	0x20000784
   11a6c:	00029725 	.word	0x00029725
   11a70:	00024331 	.word	0x00024331
   11a74:	000244d9 	.word	0x000244d9

00011a78 <isAdmin>:

bool isAdmin(char *number)
{
   11a78:	b580      	push	{r7, lr}
   11a7a:	b08a      	sub	sp, #40	; 0x28
   11a7c:	af00      	add	r7, sp, #0
   11a7e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
   11a80:	2327      	movs	r3, #39	; 0x27
   11a82:	18fb      	adds	r3, r7, r3
   11a84:	2200      	movs	r2, #0
   11a86:	701a      	strb	r2, [r3, #0]
   11a88:	e02b      	b.n	11ae2 <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   11a8a:	4b1b      	ldr	r3, [pc, #108]	; (11af8 <isAdmin+0x80>)
   11a8c:	223c      	movs	r2, #60	; 0x3c
   11a8e:	2100      	movs	r1, #0
   11a90:	0018      	movs	r0, r3
   11a92:	4b1a      	ldr	r3, [pc, #104]	; (11afc <isAdmin+0x84>)
   11a94:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
   11a96:	2327      	movs	r3, #39	; 0x27
   11a98:	18fb      	adds	r3, r7, r3
   11a9a:	781b      	ldrb	r3, [r3, #0]
   11a9c:	3303      	adds	r3, #3
   11a9e:	b2db      	uxtb	r3, r3
   11aa0:	4a15      	ldr	r2, [pc, #84]	; (11af8 <isAdmin+0x80>)
   11aa2:	0011      	movs	r1, r2
   11aa4:	0018      	movs	r0, r3
   11aa6:	4b16      	ldr	r3, [pc, #88]	; (11b00 <isAdmin+0x88>)
   11aa8:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   11aaa:	230c      	movs	r3, #12
   11aac:	18fa      	adds	r2, r7, r3
   11aae:	4b12      	ldr	r3, [pc, #72]	; (11af8 <isAdmin+0x80>)
   11ab0:	0010      	movs	r0, r2
   11ab2:	0019      	movs	r1, r3
   11ab4:	2318      	movs	r3, #24
   11ab6:	001a      	movs	r2, r3
   11ab8:	4b12      	ldr	r3, [pc, #72]	; (11b04 <isAdmin+0x8c>)
   11aba:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
   11abc:	230c      	movs	r3, #12
   11abe:	18fb      	adds	r3, r7, r3
   11ac0:	1d1a      	adds	r2, r3, #4
   11ac2:	687b      	ldr	r3, [r7, #4]
   11ac4:	0011      	movs	r1, r2
   11ac6:	0018      	movs	r0, r3
   11ac8:	4b0f      	ldr	r3, [pc, #60]	; (11b08 <isAdmin+0x90>)
   11aca:	4798      	blx	r3
   11acc:	1e03      	subs	r3, r0, #0
   11ace:	d001      	beq.n	11ad4 <isAdmin+0x5c>
		{
			return true;
   11ad0:	2301      	movs	r3, #1
   11ad2:	e00c      	b.n	11aee <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
   11ad4:	2327      	movs	r3, #39	; 0x27
   11ad6:	18fb      	adds	r3, r7, r3
   11ad8:	781a      	ldrb	r2, [r3, #0]
   11ada:	2327      	movs	r3, #39	; 0x27
   11adc:	18fb      	adds	r3, r7, r3
   11ade:	3201      	adds	r2, #1
   11ae0:	701a      	strb	r2, [r3, #0]
   11ae2:	2327      	movs	r3, #39	; 0x27
   11ae4:	18fb      	adds	r3, r7, r3
   11ae6:	781b      	ldrb	r3, [r3, #0]
   11ae8:	2b04      	cmp	r3, #4
   11aea:	d9ce      	bls.n	11a8a <isAdmin+0x12>
		}
	}
	return false;
   11aec:	2300      	movs	r3, #0
}
   11aee:	0018      	movs	r0, r3
   11af0:	46bd      	mov	sp, r7
   11af2:	b00a      	add	sp, #40	; 0x28
   11af4:	bd80      	pop	{r7, pc}
   11af6:	46c0      	nop			; (mov r8, r8)
   11af8:	20000784 	.word	0x20000784
   11afc:	0002975b 	.word	0x0002975b
   11b00:	0002443d 	.word	0x0002443d
   11b04:	00029725 	.word	0x00029725
   11b08:	00029a1b 	.word	0x00029a1b

00011b0c <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
   11b0c:	b580      	push	{r7, lr}
   11b0e:	b082      	sub	sp, #8
   11b10:	af00      	add	r7, sp, #0
   11b12:	0002      	movs	r2, r0
   11b14:	1dfb      	adds	r3, r7, #7
   11b16:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
   11b18:	4b0b      	ldr	r3, [pc, #44]	; (11b48 <setPrimaryNumberIndex+0x3c>)
   11b1a:	1dfa      	adds	r2, r7, #7
   11b1c:	7812      	ldrb	r2, [r2, #0]
   11b1e:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b20:	4a0a      	ldr	r2, [pc, #40]	; (11b4c <setPrimaryNumberIndex+0x40>)
   11b22:	4b09      	ldr	r3, [pc, #36]	; (11b48 <setPrimaryNumberIndex+0x3c>)
   11b24:	0010      	movs	r0, r2
   11b26:	0019      	movs	r1, r3
   11b28:	2308      	movs	r3, #8
   11b2a:	001a      	movs	r2, r3
   11b2c:	4b08      	ldr	r3, [pc, #32]	; (11b50 <setPrimaryNumberIndex+0x44>)
   11b2e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b30:	4b06      	ldr	r3, [pc, #24]	; (11b4c <setPrimaryNumberIndex+0x40>)
   11b32:	0019      	movs	r1, r3
   11b34:	2008      	movs	r0, #8
   11b36:	4b07      	ldr	r3, [pc, #28]	; (11b54 <setPrimaryNumberIndex+0x48>)
   11b38:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b3a:	4b07      	ldr	r3, [pc, #28]	; (11b58 <setPrimaryNumberIndex+0x4c>)
   11b3c:	4798      	blx	r3

}
   11b3e:	46c0      	nop			; (mov r8, r8)
   11b40:	46bd      	mov	sp, r7
   11b42:	b002      	add	sp, #8
   11b44:	bd80      	pop	{r7, pc}
   11b46:	46c0      	nop			; (mov r8, r8)
   11b48:	20000814 	.word	0x20000814
   11b4c:	20000784 	.word	0x20000784
   11b50:	00029725 	.word	0x00029725
   11b54:	00024331 	.word	0x00024331
   11b58:	000244d9 	.word	0x000244d9

00011b5c <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
   11b5c:	b580      	push	{r7, lr}
   11b5e:	b082      	sub	sp, #8
   11b60:	af00      	add	r7, sp, #0
   11b62:	0002      	movs	r2, r0
   11b64:	1dfb      	adds	r3, r7, #7
   11b66:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
   11b68:	4b0b      	ldr	r3, [pc, #44]	; (11b98 <setSecondaryNumberIndex+0x3c>)
   11b6a:	1dfa      	adds	r2, r7, #7
   11b6c:	7812      	ldrb	r2, [r2, #0]
   11b6e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b70:	4a0a      	ldr	r2, [pc, #40]	; (11b9c <setSecondaryNumberIndex+0x40>)
   11b72:	4b09      	ldr	r3, [pc, #36]	; (11b98 <setSecondaryNumberIndex+0x3c>)
   11b74:	0010      	movs	r0, r2
   11b76:	0019      	movs	r1, r3
   11b78:	2308      	movs	r3, #8
   11b7a:	001a      	movs	r2, r3
   11b7c:	4b08      	ldr	r3, [pc, #32]	; (11ba0 <setSecondaryNumberIndex+0x44>)
   11b7e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b80:	4b06      	ldr	r3, [pc, #24]	; (11b9c <setSecondaryNumberIndex+0x40>)
   11b82:	0019      	movs	r1, r3
   11b84:	2008      	movs	r0, #8
   11b86:	4b07      	ldr	r3, [pc, #28]	; (11ba4 <setSecondaryNumberIndex+0x48>)
   11b88:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b8a:	4b07      	ldr	r3, [pc, #28]	; (11ba8 <setSecondaryNumberIndex+0x4c>)
   11b8c:	4798      	blx	r3
}
   11b8e:	46c0      	nop			; (mov r8, r8)
   11b90:	46bd      	mov	sp, r7
   11b92:	b002      	add	sp, #8
   11b94:	bd80      	pop	{r7, pc}
   11b96:	46c0      	nop			; (mov r8, r8)
   11b98:	20000814 	.word	0x20000814
   11b9c:	20000784 	.word	0x20000784
   11ba0:	00029725 	.word	0x00029725
   11ba4:	00024331 	.word	0x00024331
   11ba8:	000244d9 	.word	0x000244d9

00011bac <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
   11bac:	b590      	push	{r4, r7, lr}
   11bae:	b085      	sub	sp, #20
   11bb0:	af00      	add	r7, sp, #0
   11bb2:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11bb4:	230e      	movs	r3, #14
   11bb6:	18fc      	adds	r4, r7, r3
   11bb8:	687b      	ldr	r3, [r7, #4]
   11bba:	0018      	movs	r0, r3
   11bbc:	4b21      	ldr	r3, [pc, #132]	; (11c44 <addPrimaryIndexedNumber+0x98>)
   11bbe:	4798      	blx	r3
   11bc0:	0003      	movs	r3, r0
   11bc2:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
   11bc4:	230f      	movs	r3, #15
   11bc6:	18fb      	adds	r3, r7, r3
   11bc8:	22ff      	movs	r2, #255	; 0xff
   11bca:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
   11bcc:	4b1e      	ldr	r3, [pc, #120]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11bce:	785b      	ldrb	r3, [r3, #1]
   11bd0:	220e      	movs	r2, #14
   11bd2:	18ba      	adds	r2, r7, r2
   11bd4:	7812      	ldrb	r2, [r2, #0]
   11bd6:	429a      	cmp	r2, r3
   11bd8:	d309      	bcc.n	11bee <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
   11bda:	230f      	movs	r3, #15
   11bdc:	18fb      	adds	r3, r7, r3
   11bde:	4a1a      	ldr	r2, [pc, #104]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11be0:	7892      	ldrb	r2, [r2, #2]
   11be2:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11be4:	687b      	ldr	r3, [r7, #4]
   11be6:	0018      	movs	r0, r3
   11be8:	4b18      	ldr	r3, [pc, #96]	; (11c4c <addPrimaryIndexedNumber+0xa0>)
   11bea:	4798      	blx	r3
   11bec:	e00c      	b.n	11c08 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
   11bee:	4b16      	ldr	r3, [pc, #88]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11bf0:	785b      	ldrb	r3, [r3, #1]
   11bf2:	220e      	movs	r2, #14
   11bf4:	18ba      	adds	r2, r7, r2
   11bf6:	7812      	ldrb	r2, [r2, #0]
   11bf8:	429a      	cmp	r2, r3
   11bfa:	d205      	bcs.n	11c08 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
   11bfc:	230f      	movs	r3, #15
   11bfe:	18fb      	adds	r3, r7, r3
   11c00:	220e      	movs	r2, #14
   11c02:	18ba      	adds	r2, r7, r2
   11c04:	7812      	ldrb	r2, [r2, #0]
   11c06:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
   11c08:	4b0f      	ldr	r3, [pc, #60]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c0a:	785b      	ldrb	r3, [r3, #1]
   11c0c:	220f      	movs	r2, #15
   11c0e:	18ba      	adds	r2, r7, r2
   11c10:	7812      	ldrb	r2, [r2, #0]
   11c12:	429a      	cmp	r2, r3
   11c14:	d210      	bcs.n	11c38 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
   11c16:	4b0c      	ldr	r3, [pc, #48]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c18:	789b      	ldrb	r3, [r3, #2]
   11c1a:	2b01      	cmp	r3, #1
   11c1c:	d904      	bls.n	11c28 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
   11c1e:	4b0a      	ldr	r3, [pc, #40]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c20:	78db      	ldrb	r3, [r3, #3]
   11c22:	0018      	movs	r0, r3
   11c24:	4b0a      	ldr	r3, [pc, #40]	; (11c50 <addPrimaryIndexedNumber+0xa4>)
   11c26:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
   11c28:	230f      	movs	r3, #15
   11c2a:	18fb      	adds	r3, r7, r3
   11c2c:	781b      	ldrb	r3, [r3, #0]
   11c2e:	0018      	movs	r0, r3
   11c30:	4b08      	ldr	r3, [pc, #32]	; (11c54 <addPrimaryIndexedNumber+0xa8>)
   11c32:	4798      	blx	r3
		return true;
   11c34:	2301      	movs	r3, #1
   11c36:	e000      	b.n	11c3a <addPrimaryIndexedNumber+0x8e>
	}

	return false;
   11c38:	2300      	movs	r3, #0
}
   11c3a:	0018      	movs	r0, r3
   11c3c:	46bd      	mov	sp, r7
   11c3e:	b005      	add	sp, #20
   11c40:	bd90      	pop	{r4, r7, pc}
   11c42:	46c0      	nop			; (mov r8, r8)
   11c44:	00010ded 	.word	0x00010ded
   11c48:	20000814 	.word	0x20000814
   11c4c:	00010ef1 	.word	0x00010ef1
   11c50:	00011b5d 	.word	0x00011b5d
   11c54:	00011b0d 	.word	0x00011b0d

00011c58 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
   11c58:	b590      	push	{r4, r7, lr}
   11c5a:	b085      	sub	sp, #20
   11c5c:	af00      	add	r7, sp, #0
   11c5e:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
   11c60:	4b21      	ldr	r3, [pc, #132]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c62:	789b      	ldrb	r3, [r3, #2]
   11c64:	2b01      	cmp	r3, #1
   11c66:	d801      	bhi.n	11c6c <addSecondaryIndexedNumber+0x14>
	return false;
   11c68:	2300      	movs	r3, #0
   11c6a:	e039      	b.n	11ce0 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11c6c:	230e      	movs	r3, #14
   11c6e:	18fc      	adds	r4, r7, r3
   11c70:	687b      	ldr	r3, [r7, #4]
   11c72:	0018      	movs	r0, r3
   11c74:	4b1d      	ldr	r3, [pc, #116]	; (11cec <addSecondaryIndexedNumber+0x94>)
   11c76:	4798      	blx	r3
   11c78:	0003      	movs	r3, r0
   11c7a:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
   11c7c:	230f      	movs	r3, #15
   11c7e:	18fb      	adds	r3, r7, r3
   11c80:	22ff      	movs	r2, #255	; 0xff
   11c82:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
   11c84:	4b18      	ldr	r3, [pc, #96]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c86:	785b      	ldrb	r3, [r3, #1]
   11c88:	220e      	movs	r2, #14
   11c8a:	18ba      	adds	r2, r7, r2
   11c8c:	7812      	ldrb	r2, [r2, #0]
   11c8e:	429a      	cmp	r2, r3
   11c90:	d309      	bcc.n	11ca6 <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
   11c92:	230f      	movs	r3, #15
   11c94:	18fb      	adds	r3, r7, r3
   11c96:	4a14      	ldr	r2, [pc, #80]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c98:	7892      	ldrb	r2, [r2, #2]
   11c9a:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11c9c:	687b      	ldr	r3, [r7, #4]
   11c9e:	0018      	movs	r0, r3
   11ca0:	4b13      	ldr	r3, [pc, #76]	; (11cf0 <addSecondaryIndexedNumber+0x98>)
   11ca2:	4798      	blx	r3
   11ca4:	e00c      	b.n	11cc0 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
   11ca6:	4b10      	ldr	r3, [pc, #64]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11ca8:	785b      	ldrb	r3, [r3, #1]
   11caa:	220e      	movs	r2, #14
   11cac:	18ba      	adds	r2, r7, r2
   11cae:	7812      	ldrb	r2, [r2, #0]
   11cb0:	429a      	cmp	r2, r3
   11cb2:	d205      	bcs.n	11cc0 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
   11cb4:	230f      	movs	r3, #15
   11cb6:	18fb      	adds	r3, r7, r3
   11cb8:	220e      	movs	r2, #14
   11cba:	18ba      	adds	r2, r7, r2
   11cbc:	7812      	ldrb	r2, [r2, #0]
   11cbe:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
   11cc0:	4b09      	ldr	r3, [pc, #36]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11cc2:	785b      	ldrb	r3, [r3, #1]
   11cc4:	220f      	movs	r2, #15
   11cc6:	18ba      	adds	r2, r7, r2
   11cc8:	7812      	ldrb	r2, [r2, #0]
   11cca:	429a      	cmp	r2, r3
   11ccc:	d207      	bcs.n	11cde <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
   11cce:	230f      	movs	r3, #15
   11cd0:	18fb      	adds	r3, r7, r3
   11cd2:	781b      	ldrb	r3, [r3, #0]
   11cd4:	0018      	movs	r0, r3
   11cd6:	4b07      	ldr	r3, [pc, #28]	; (11cf4 <addSecondaryIndexedNumber+0x9c>)
   11cd8:	4798      	blx	r3
		return true;
   11cda:	2301      	movs	r3, #1
   11cdc:	e000      	b.n	11ce0 <addSecondaryIndexedNumber+0x88>
	}
	return false;
   11cde:	2300      	movs	r3, #0
}
   11ce0:	0018      	movs	r0, r3
   11ce2:	46bd      	mov	sp, r7
   11ce4:	b005      	add	sp, #20
   11ce6:	bd90      	pop	{r4, r7, pc}
   11ce8:	20000814 	.word	0x20000814
   11cec:	00010ded 	.word	0x00010ded
   11cf0:	00010ef1 	.word	0x00010ef1
   11cf4:	00011b5d 	.word	0x00011b5d

00011cf8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   11cf8:	b580      	push	{r7, lr}
   11cfa:	b082      	sub	sp, #8
   11cfc:	af00      	add	r7, sp, #0
   11cfe:	0002      	movs	r2, r0
   11d00:	1dfb      	adds	r3, r7, #7
   11d02:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d04:	4b06      	ldr	r3, [pc, #24]	; (11d20 <system_interrupt_enable+0x28>)
   11d06:	1dfa      	adds	r2, r7, #7
   11d08:	7812      	ldrb	r2, [r2, #0]
   11d0a:	0011      	movs	r1, r2
   11d0c:	221f      	movs	r2, #31
   11d0e:	400a      	ands	r2, r1
   11d10:	2101      	movs	r1, #1
   11d12:	4091      	lsls	r1, r2
   11d14:	000a      	movs	r2, r1
   11d16:	601a      	str	r2, [r3, #0]
}
   11d18:	46c0      	nop			; (mov r8, r8)
   11d1a:	46bd      	mov	sp, r7
   11d1c:	b002      	add	sp, #8
   11d1e:	bd80      	pop	{r7, pc}
   11d20:	e000e100 	.word	0xe000e100

00011d24 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   11d24:	b580      	push	{r7, lr}
   11d26:	b082      	sub	sp, #8
   11d28:	af00      	add	r7, sp, #0
   11d2a:	0002      	movs	r2, r0
   11d2c:	1dfb      	adds	r3, r7, #7
   11d2e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d30:	4a07      	ldr	r2, [pc, #28]	; (11d50 <system_interrupt_disable+0x2c>)
   11d32:	1dfb      	adds	r3, r7, #7
   11d34:	781b      	ldrb	r3, [r3, #0]
   11d36:	0019      	movs	r1, r3
   11d38:	231f      	movs	r3, #31
   11d3a:	400b      	ands	r3, r1
   11d3c:	2101      	movs	r1, #1
   11d3e:	4099      	lsls	r1, r3
   11d40:	000b      	movs	r3, r1
   11d42:	0019      	movs	r1, r3
   11d44:	2380      	movs	r3, #128	; 0x80
   11d46:	50d1      	str	r1, [r2, r3]
}
   11d48:	46c0      	nop			; (mov r8, r8)
   11d4a:	46bd      	mov	sp, r7
   11d4c:	b002      	add	sp, #8
   11d4e:	bd80      	pop	{r7, pc}
   11d50:	e000e100 	.word	0xe000e100

00011d54 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11d54:	b580      	push	{r7, lr}
   11d56:	b084      	sub	sp, #16
   11d58:	af00      	add	r7, sp, #0
   11d5a:	0002      	movs	r2, r0
   11d5c:	1dfb      	adds	r3, r7, #7
   11d5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11d60:	230f      	movs	r3, #15
   11d62:	18fb      	adds	r3, r7, r3
   11d64:	1dfa      	adds	r2, r7, #7
   11d66:	7812      	ldrb	r2, [r2, #0]
   11d68:	09d2      	lsrs	r2, r2, #7
   11d6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11d6c:	230e      	movs	r3, #14
   11d6e:	18fb      	adds	r3, r7, r3
   11d70:	1dfa      	adds	r2, r7, #7
   11d72:	7812      	ldrb	r2, [r2, #0]
   11d74:	0952      	lsrs	r2, r2, #5
   11d76:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11d78:	4b0d      	ldr	r3, [pc, #52]	; (11db0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11d7a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11d7c:	230f      	movs	r3, #15
   11d7e:	18fb      	adds	r3, r7, r3
   11d80:	781b      	ldrb	r3, [r3, #0]
   11d82:	2b00      	cmp	r3, #0
   11d84:	d10f      	bne.n	11da6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11d86:	230f      	movs	r3, #15
   11d88:	18fb      	adds	r3, r7, r3
   11d8a:	781b      	ldrb	r3, [r3, #0]
   11d8c:	009b      	lsls	r3, r3, #2
   11d8e:	2210      	movs	r2, #16
   11d90:	4694      	mov	ip, r2
   11d92:	44bc      	add	ip, r7
   11d94:	4463      	add	r3, ip
   11d96:	3b08      	subs	r3, #8
   11d98:	681a      	ldr	r2, [r3, #0]
   11d9a:	230e      	movs	r3, #14
   11d9c:	18fb      	adds	r3, r7, r3
   11d9e:	781b      	ldrb	r3, [r3, #0]
   11da0:	01db      	lsls	r3, r3, #7
   11da2:	18d3      	adds	r3, r2, r3
   11da4:	e000      	b.n	11da8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   11da6:	2300      	movs	r3, #0
	}
}
   11da8:	0018      	movs	r0, r3
   11daa:	46bd      	mov	sp, r7
   11dac:	b004      	add	sp, #16
   11dae:	bd80      	pop	{r7, pc}
   11db0:	41004400 	.word	0x41004400

00011db4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11db4:	b580      	push	{r7, lr}
   11db6:	b082      	sub	sp, #8
   11db8:	af00      	add	r7, sp, #0
   11dba:	0002      	movs	r2, r0
   11dbc:	1dfb      	adds	r3, r7, #7
   11dbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11dc0:	1dfb      	adds	r3, r7, #7
   11dc2:	781b      	ldrb	r3, [r3, #0]
   11dc4:	0018      	movs	r0, r3
   11dc6:	4b03      	ldr	r3, [pc, #12]	; (11dd4 <port_get_group_from_gpio_pin+0x20>)
   11dc8:	4798      	blx	r3
   11dca:	0003      	movs	r3, r0
}
   11dcc:	0018      	movs	r0, r3
   11dce:	46bd      	mov	sp, r7
   11dd0:	b002      	add	sp, #8
   11dd2:	bd80      	pop	{r7, pc}
   11dd4:	00011d55 	.word	0x00011d55

00011dd8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   11dd8:	b580      	push	{r7, lr}
   11dda:	b082      	sub	sp, #8
   11ddc:	af00      	add	r7, sp, #0
   11dde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   11de0:	687b      	ldr	r3, [r7, #4]
   11de2:	2200      	movs	r2, #0
   11de4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11de6:	687b      	ldr	r3, [r7, #4]
   11de8:	2201      	movs	r2, #1
   11dea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11dec:	687b      	ldr	r3, [r7, #4]
   11dee:	2200      	movs	r2, #0
   11df0:	709a      	strb	r2, [r3, #2]
}
   11df2:	46c0      	nop			; (mov r8, r8)
   11df4:	46bd      	mov	sp, r7
   11df6:	b002      	add	sp, #8
   11df8:	bd80      	pop	{r7, pc}
	...

00011dfc <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   11dfc:	b580      	push	{r7, lr}
   11dfe:	b084      	sub	sp, #16
   11e00:	af00      	add	r7, sp, #0
   11e02:	0002      	movs	r2, r0
   11e04:	1dfb      	adds	r3, r7, #7
   11e06:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e08:	1dfb      	adds	r3, r7, #7
   11e0a:	781b      	ldrb	r3, [r3, #0]
   11e0c:	0018      	movs	r0, r3
   11e0e:	4b0b      	ldr	r3, [pc, #44]	; (11e3c <port_pin_get_input_level+0x40>)
   11e10:	4798      	blx	r3
   11e12:	0003      	movs	r3, r0
   11e14:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e16:	1dfb      	adds	r3, r7, #7
   11e18:	781b      	ldrb	r3, [r3, #0]
   11e1a:	221f      	movs	r2, #31
   11e1c:	4013      	ands	r3, r2
   11e1e:	2201      	movs	r2, #1
   11e20:	409a      	lsls	r2, r3
   11e22:	0013      	movs	r3, r2
   11e24:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   11e26:	68fb      	ldr	r3, [r7, #12]
   11e28:	6a1b      	ldr	r3, [r3, #32]
   11e2a:	68ba      	ldr	r2, [r7, #8]
   11e2c:	4013      	ands	r3, r2
   11e2e:	1e5a      	subs	r2, r3, #1
   11e30:	4193      	sbcs	r3, r2
   11e32:	b2db      	uxtb	r3, r3
}
   11e34:	0018      	movs	r0, r3
   11e36:	46bd      	mov	sp, r7
   11e38:	b004      	add	sp, #16
   11e3a:	bd80      	pop	{r7, pc}
   11e3c:	00011db5 	.word	0x00011db5

00011e40 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11e40:	b580      	push	{r7, lr}
   11e42:	b084      	sub	sp, #16
   11e44:	af00      	add	r7, sp, #0
   11e46:	0002      	movs	r2, r0
   11e48:	1dfb      	adds	r3, r7, #7
   11e4a:	701a      	strb	r2, [r3, #0]
   11e4c:	1dbb      	adds	r3, r7, #6
   11e4e:	1c0a      	adds	r2, r1, #0
   11e50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e52:	1dfb      	adds	r3, r7, #7
   11e54:	781b      	ldrb	r3, [r3, #0]
   11e56:	0018      	movs	r0, r3
   11e58:	4b0d      	ldr	r3, [pc, #52]	; (11e90 <port_pin_set_output_level+0x50>)
   11e5a:	4798      	blx	r3
   11e5c:	0003      	movs	r3, r0
   11e5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e60:	1dfb      	adds	r3, r7, #7
   11e62:	781b      	ldrb	r3, [r3, #0]
   11e64:	221f      	movs	r2, #31
   11e66:	4013      	ands	r3, r2
   11e68:	2201      	movs	r2, #1
   11e6a:	409a      	lsls	r2, r3
   11e6c:	0013      	movs	r3, r2
   11e6e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11e70:	1dbb      	adds	r3, r7, #6
   11e72:	781b      	ldrb	r3, [r3, #0]
   11e74:	2b00      	cmp	r3, #0
   11e76:	d003      	beq.n	11e80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11e78:	68fb      	ldr	r3, [r7, #12]
   11e7a:	68ba      	ldr	r2, [r7, #8]
   11e7c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   11e7e:	e002      	b.n	11e86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11e80:	68fb      	ldr	r3, [r7, #12]
   11e82:	68ba      	ldr	r2, [r7, #8]
   11e84:	615a      	str	r2, [r3, #20]
}
   11e86:	46c0      	nop			; (mov r8, r8)
   11e88:	46bd      	mov	sp, r7
   11e8a:	b004      	add	sp, #16
   11e8c:	bd80      	pop	{r7, pc}
   11e8e:	46c0      	nop			; (mov r8, r8)
   11e90:	00011db5 	.word	0x00011db5

00011e94 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   11e94:	b580      	push	{r7, lr}
   11e96:	b084      	sub	sp, #16
   11e98:	af00      	add	r7, sp, #0
   11e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   11e9c:	687b      	ldr	r3, [r7, #4]
   11e9e:	681b      	ldr	r3, [r3, #0]
   11ea0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   11ea2:	68fb      	ldr	r3, [r7, #12]
   11ea4:	69db      	ldr	r3, [r3, #28]
   11ea6:	1e5a      	subs	r2, r3, #1
   11ea8:	4193      	sbcs	r3, r2
   11eaa:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   11eac:	0018      	movs	r0, r3
   11eae:	46bd      	mov	sp, r7
   11eb0:	b004      	add	sp, #16
   11eb2:	bd80      	pop	{r7, pc}

00011eb4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   11eb4:	b580      	push	{r7, lr}
   11eb6:	b082      	sub	sp, #8
   11eb8:	af00      	add	r7, sp, #0
   11eba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   11ebc:	46c0      	nop			; (mov r8, r8)
   11ebe:	687b      	ldr	r3, [r7, #4]
   11ec0:	0018      	movs	r0, r3
   11ec2:	4b04      	ldr	r3, [pc, #16]	; (11ed4 <_usart_wait_for_sync+0x20>)
   11ec4:	4798      	blx	r3
   11ec6:	1e03      	subs	r3, r0, #0
   11ec8:	d1f9      	bne.n	11ebe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   11eca:	46c0      	nop			; (mov r8, r8)
   11ecc:	46bd      	mov	sp, r7
   11ece:	b002      	add	sp, #8
   11ed0:	bd80      	pop	{r7, pc}
   11ed2:	46c0      	nop			; (mov r8, r8)
   11ed4:	00011e95 	.word	0x00011e95

00011ed8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   11ed8:	b580      	push	{r7, lr}
   11eda:	b082      	sub	sp, #8
   11edc:	af00      	add	r7, sp, #0
   11ede:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   11ee0:	687b      	ldr	r3, [r7, #4]
   11ee2:	2280      	movs	r2, #128	; 0x80
   11ee4:	05d2      	lsls	r2, r2, #23
   11ee6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   11ee8:	687b      	ldr	r3, [r7, #4]
   11eea:	2200      	movs	r2, #0
   11eec:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   11eee:	687b      	ldr	r3, [r7, #4]
   11ef0:	22ff      	movs	r2, #255	; 0xff
   11ef2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   11ef4:	687b      	ldr	r3, [r7, #4]
   11ef6:	2200      	movs	r2, #0
   11ef8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   11efa:	687b      	ldr	r3, [r7, #4]
   11efc:	2200      	movs	r2, #0
   11efe:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   11f00:	687b      	ldr	r3, [r7, #4]
   11f02:	2296      	movs	r2, #150	; 0x96
   11f04:	0192      	lsls	r2, r2, #6
   11f06:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   11f08:	687b      	ldr	r3, [r7, #4]
   11f0a:	2224      	movs	r2, #36	; 0x24
   11f0c:	2101      	movs	r1, #1
   11f0e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   11f10:	687b      	ldr	r3, [r7, #4]
   11f12:	2225      	movs	r2, #37	; 0x25
   11f14:	2101      	movs	r1, #1
   11f16:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   11f18:	687b      	ldr	r3, [r7, #4]
   11f1a:	2226      	movs	r2, #38	; 0x26
   11f1c:	2100      	movs	r1, #0
   11f1e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   11f20:	687b      	ldr	r3, [r7, #4]
   11f22:	2227      	movs	r2, #39	; 0x27
   11f24:	2100      	movs	r1, #0
   11f26:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   11f28:	687b      	ldr	r3, [r7, #4]
   11f2a:	2200      	movs	r2, #0
   11f2c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   11f2e:	687b      	ldr	r3, [r7, #4]
   11f30:	2288      	movs	r2, #136	; 0x88
   11f32:	0352      	lsls	r2, r2, #13
   11f34:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   11f36:	687b      	ldr	r3, [r7, #4]
   11f38:	222c      	movs	r2, #44	; 0x2c
   11f3a:	2100      	movs	r1, #0
   11f3c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   11f3e:	687b      	ldr	r3, [r7, #4]
   11f40:	222d      	movs	r2, #45	; 0x2d
   11f42:	2100      	movs	r1, #0
   11f44:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11f46:	687b      	ldr	r3, [r7, #4]
   11f48:	2200      	movs	r2, #0
   11f4a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11f4c:	687b      	ldr	r3, [r7, #4]
   11f4e:	2200      	movs	r2, #0
   11f50:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   11f52:	687b      	ldr	r3, [r7, #4]
   11f54:	2200      	movs	r2, #0
   11f56:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   11f58:	687b      	ldr	r3, [r7, #4]
   11f5a:	2200      	movs	r2, #0
   11f5c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   11f5e:	687b      	ldr	r3, [r7, #4]
   11f60:	2200      	movs	r2, #0
   11f62:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   11f64:	687b      	ldr	r3, [r7, #4]
   11f66:	2200      	movs	r2, #0
   11f68:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   11f6a:	687b      	ldr	r3, [r7, #4]
   11f6c:	2200      	movs	r2, #0
   11f6e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   11f70:	687b      	ldr	r3, [r7, #4]
   11f72:	2200      	movs	r2, #0
   11f74:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   11f76:	687b      	ldr	r3, [r7, #4]
   11f78:	2200      	movs	r2, #0
   11f7a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   11f7c:	687b      	ldr	r3, [r7, #4]
   11f7e:	2200      	movs	r2, #0
   11f80:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   11f82:	687b      	ldr	r3, [r7, #4]
   11f84:	2213      	movs	r2, #19
   11f86:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   11f88:	687b      	ldr	r3, [r7, #4]
   11f8a:	2200      	movs	r2, #0
   11f8c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   11f8e:	46c0      	nop			; (mov r8, r8)
   11f90:	46bd      	mov	sp, r7
   11f92:	b002      	add	sp, #8
   11f94:	bd80      	pop	{r7, pc}
	...

00011f98 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   11f98:	b580      	push	{r7, lr}
   11f9a:	b084      	sub	sp, #16
   11f9c:	af00      	add	r7, sp, #0
   11f9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fa0:	687b      	ldr	r3, [r7, #4]
   11fa2:	681b      	ldr	r3, [r3, #0]
   11fa4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   11fa6:	687b      	ldr	r3, [r7, #4]
   11fa8:	681b      	ldr	r3, [r3, #0]
   11faa:	0018      	movs	r0, r3
   11fac:	4b09      	ldr	r3, [pc, #36]	; (11fd4 <usart_enable+0x3c>)
   11fae:	4798      	blx	r3
   11fb0:	0003      	movs	r3, r0
   11fb2:	0018      	movs	r0, r3
   11fb4:	4b08      	ldr	r3, [pc, #32]	; (11fd8 <usart_enable+0x40>)
   11fb6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11fb8:	687b      	ldr	r3, [r7, #4]
   11fba:	0018      	movs	r0, r3
   11fbc:	4b07      	ldr	r3, [pc, #28]	; (11fdc <usart_enable+0x44>)
   11fbe:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   11fc0:	68fb      	ldr	r3, [r7, #12]
   11fc2:	681b      	ldr	r3, [r3, #0]
   11fc4:	2202      	movs	r2, #2
   11fc6:	431a      	orrs	r2, r3
   11fc8:	68fb      	ldr	r3, [r7, #12]
   11fca:	601a      	str	r2, [r3, #0]
}
   11fcc:	46c0      	nop			; (mov r8, r8)
   11fce:	46bd      	mov	sp, r7
   11fd0:	b004      	add	sp, #16
   11fd2:	bd80      	pop	{r7, pc}
   11fd4:	00022dbd 	.word	0x00022dbd
   11fd8:	00011cf9 	.word	0x00011cf9
   11fdc:	00011eb5 	.word	0x00011eb5

00011fe0 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
   11fe0:	b580      	push	{r7, lr}
   11fe2:	b084      	sub	sp, #16
   11fe4:	af00      	add	r7, sp, #0
   11fe6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fe8:	687b      	ldr	r3, [r7, #4]
   11fea:	681b      	ldr	r3, [r3, #0]
   11fec:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   11fee:	687b      	ldr	r3, [r7, #4]
   11ff0:	681b      	ldr	r3, [r3, #0]
   11ff2:	0018      	movs	r0, r3
   11ff4:	4b0a      	ldr	r3, [pc, #40]	; (12020 <usart_disable+0x40>)
   11ff6:	4798      	blx	r3
   11ff8:	0003      	movs	r3, r0
   11ffa:	0018      	movs	r0, r3
   11ffc:	4b09      	ldr	r3, [pc, #36]	; (12024 <usart_disable+0x44>)
   11ffe:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12000:	687b      	ldr	r3, [r7, #4]
   12002:	0018      	movs	r0, r3
   12004:	4b08      	ldr	r3, [pc, #32]	; (12028 <usart_disable+0x48>)
   12006:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   12008:	68fb      	ldr	r3, [r7, #12]
   1200a:	681b      	ldr	r3, [r3, #0]
   1200c:	2202      	movs	r2, #2
   1200e:	4393      	bics	r3, r2
   12010:	001a      	movs	r2, r3
   12012:	68fb      	ldr	r3, [r7, #12]
   12014:	601a      	str	r2, [r3, #0]
}
   12016:	46c0      	nop			; (mov r8, r8)
   12018:	46bd      	mov	sp, r7
   1201a:	b004      	add	sp, #16
   1201c:	bd80      	pop	{r7, pc}
   1201e:	46c0      	nop			; (mov r8, r8)
   12020:	00022dbd 	.word	0x00022dbd
   12024:	00011d25 	.word	0x00011d25
   12028:	00011eb5 	.word	0x00011eb5

0001202c <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
   1202c:	b580      	push	{r7, lr}
   1202e:	b084      	sub	sp, #16
   12030:	af00      	add	r7, sp, #0
   12032:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   12034:	687b      	ldr	r3, [r7, #4]
   12036:	681b      	ldr	r3, [r3, #0]
   12038:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
   1203a:	687b      	ldr	r3, [r7, #4]
   1203c:	0018      	movs	r0, r3
   1203e:	4b06      	ldr	r3, [pc, #24]	; (12058 <usart_reset+0x2c>)
   12040:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12042:	687b      	ldr	r3, [r7, #4]
   12044:	0018      	movs	r0, r3
   12046:	4b05      	ldr	r3, [pc, #20]	; (1205c <usart_reset+0x30>)
   12048:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
   1204a:	68fb      	ldr	r3, [r7, #12]
   1204c:	2201      	movs	r2, #1
   1204e:	601a      	str	r2, [r3, #0]
}
   12050:	46c0      	nop			; (mov r8, r8)
   12052:	46bd      	mov	sp, r7
   12054:	b004      	add	sp, #16
   12056:	bd80      	pop	{r7, pc}
   12058:	00011fe1 	.word	0x00011fe1
   1205c:	00011eb5 	.word	0x00011eb5

00012060 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
*
*  \param[in]  timer  ID of the timer that has expired.
*/
static void gsm_timer_callback(TimerHandle_t timer)
{
   12060:	b580      	push	{r7, lr}
   12062:	b082      	sub	sp, #8
   12064:	af00      	add	r7, sp, #0
   12066:	6078      	str	r0, [r7, #4]
}
   12068:	46c0      	nop			; (mov r8, r8)
   1206a:	46bd      	mov	sp, r7
   1206c:	b002      	add	sp, #8
   1206e:	bd80      	pop	{r7, pc}

00012070 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
   12070:	b580      	push	{r7, lr}
   12072:	b082      	sub	sp, #8
   12074:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   12076:	4b09      	ldr	r3, [pc, #36]	; (1209c <Flush_RX_Buffer+0x2c>)
   12078:	681b      	ldr	r3, [r3, #0]
   1207a:	1cf9      	adds	r1, r7, #3
   1207c:	2200      	movs	r2, #0
   1207e:	0018      	movs	r0, r3
   12080:	4b07      	ldr	r3, [pc, #28]	; (120a0 <Flush_RX_Buffer+0x30>)
   12082:	4798      	blx	r3
   12084:	0003      	movs	r3, r0
   12086:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
   12088:	687b      	ldr	r3, [r7, #4]
   1208a:	2b00      	cmp	r3, #0
   1208c:	d000      	beq.n	12090 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   1208e:	e7f2      	b.n	12076 <Flush_RX_Buffer+0x6>
		{
			break;
   12090:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   12092:	46c0      	nop			; (mov r8, r8)
   12094:	46bd      	mov	sp, r7
   12096:	b002      	add	sp, #8
   12098:	bd80      	pop	{r7, pc}
   1209a:	46c0      	nop			; (mov r8, r8)
   1209c:	2000041c 	.word	0x2000041c
   120a0:	0001ffa1 	.word	0x0001ffa1

000120a4 <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
   120a4:	b590      	push	{r4, r7, lr}
   120a6:	b085      	sub	sp, #20
   120a8:	af00      	add	r7, sp, #0
   120aa:	0002      	movs	r2, r0
   120ac:	1dfb      	adds	r3, r7, #7
   120ae:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
   120b0:	4b18      	ldr	r3, [pc, #96]	; (12114 <gsm_rx_handler+0x70>)
   120b2:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
   120b4:	68fb      	ldr	r3, [r7, #12]
   120b6:	7e1b      	ldrb	r3, [r3, #24]
   120b8:	b2db      	uxtb	r3, r3
   120ba:	001a      	movs	r2, r3
   120bc:	2304      	movs	r3, #4
   120be:	4013      	ands	r3, r2
   120c0:	d023      	beq.n	1210a <gsm_rx_handler+0x66>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
   120c2:	68fb      	ldr	r3, [r7, #12]
   120c4:	8b5b      	ldrh	r3, [r3, #26]
   120c6:	b29b      	uxth	r3, r3
   120c8:	b2da      	uxtb	r2, r3
   120ca:	230b      	movs	r3, #11
   120cc:	18fb      	adds	r3, r7, r3
   120ce:	2106      	movs	r1, #6
   120d0:	400a      	ands	r2, r1
   120d2:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
   120d4:	230b      	movs	r3, #11
   120d6:	18fb      	adds	r3, r7, r3
   120d8:	781b      	ldrb	r3, [r3, #0]
   120da:	2b00      	cmp	r3, #0
   120dc:	d006      	beq.n	120ec <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
   120de:	230b      	movs	r3, #11
   120e0:	18fb      	adds	r3, r7, r3
   120e2:	781b      	ldrb	r3, [r3, #0]
   120e4:	b29a      	uxth	r2, r3
   120e6:	68fb      	ldr	r3, [r7, #12]
   120e8:	835a      	strh	r2, [r3, #26]
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
			//gsm_module_exit_sleep(true);
		}
	}
}
   120ea:	e00e      	b.n	1210a <gsm_rx_handler+0x66>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   120ec:	68fb      	ldr	r3, [r7, #12]
   120ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   120f0:	b29b      	uxth	r3, r3
   120f2:	b2da      	uxtb	r2, r3
   120f4:	230a      	movs	r3, #10
   120f6:	18fb      	adds	r3, r7, r3
   120f8:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
   120fa:	4b07      	ldr	r3, [pc, #28]	; (12118 <gsm_rx_handler+0x74>)
   120fc:	6818      	ldr	r0, [r3, #0]
   120fe:	230a      	movs	r3, #10
   12100:	18f9      	adds	r1, r7, r3
   12102:	2300      	movs	r3, #0
   12104:	2200      	movs	r2, #0
   12106:	4c05      	ldr	r4, [pc, #20]	; (1211c <gsm_rx_handler+0x78>)
   12108:	47a0      	blx	r4
}
   1210a:	46c0      	nop			; (mov r8, r8)
   1210c:	46bd      	mov	sp, r7
   1210e:	b005      	add	sp, #20
   12110:	bd90      	pop	{r4, r7, pc}
   12112:	46c0      	nop			; (mov r8, r8)
   12114:	42001400 	.word	0x42001400
   12118:	2000041c 	.word	0x2000041c
   1211c:	0001fe81 	.word	0x0001fe81

00012120 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
   12120:	b580      	push	{r7, lr}
   12122:	af00      	add	r7, sp, #0
	isRinging = !port_pin_get_input_level(GSM_RING_PIN);
   12124:	2031      	movs	r0, #49	; 0x31
   12126:	4b0b      	ldr	r3, [pc, #44]	; (12154 <gsm_ring_detect_pin_callback+0x34>)
   12128:	4798      	blx	r3
   1212a:	0003      	movs	r3, r0
   1212c:	1e5a      	subs	r2, r3, #1
   1212e:	4193      	sbcs	r3, r2
   12130:	b2db      	uxtb	r3, r3
   12132:	2201      	movs	r2, #1
   12134:	4053      	eors	r3, r2
   12136:	b2db      	uxtb	r3, r3
   12138:	1c1a      	adds	r2, r3, #0
   1213a:	2301      	movs	r3, #1
   1213c:	4013      	ands	r3, r2
   1213e:	b2da      	uxtb	r2, r3
   12140:	4b05      	ldr	r3, [pc, #20]	; (12158 <gsm_ring_detect_pin_callback+0x38>)
   12142:	701a      	strb	r2, [r3, #0]
	lastRingStateChangeTime = xTaskGetTickCountFromISR();
   12144:	4b05      	ldr	r3, [pc, #20]	; (1215c <gsm_ring_detect_pin_callback+0x3c>)
   12146:	4798      	blx	r3
   12148:	0002      	movs	r2, r0
   1214a:	4b05      	ldr	r3, [pc, #20]	; (12160 <gsm_ring_detect_pin_callback+0x40>)
   1214c:	601a      	str	r2, [r3, #0]
}
   1214e:	46c0      	nop			; (mov r8, r8)
   12150:	46bd      	mov	sp, r7
   12152:	bd80      	pop	{r7, pc}
   12154:	00011dfd 	.word	0x00011dfd
   12158:	2000088e 	.word	0x2000088e
   1215c:	00020dc9 	.word	0x00020dc9
   12160:	200008cc 	.word	0x200008cc

00012164 <gsm_init>:

void gsm_init(void)
{
   12164:	b590      	push	{r4, r7, lr}
   12166:	b097      	sub	sp, #92	; 0x5c
   12168:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
   1216a:	234c      	movs	r3, #76	; 0x4c
   1216c:	18fb      	adds	r3, r7, r3
   1216e:	0018      	movs	r0, r3
   12170:	4b4d      	ldr	r3, [pc, #308]	; (122a8 <gsm_init+0x144>)
   12172:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
   12174:	234c      	movs	r3, #76	; 0x4c
   12176:	18fb      	adds	r3, r7, r3
   12178:	2201      	movs	r2, #1
   1217a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
   1217c:	234c      	movs	r3, #76	; 0x4c
   1217e:	18fb      	adds	r3, r7, r3
   12180:	0019      	movs	r1, r3
   12182:	2014      	movs	r0, #20
   12184:	4b49      	ldr	r3, [pc, #292]	; (122ac <gsm_init+0x148>)
   12186:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
   12188:	2100      	movs	r1, #0
   1218a:	2014      	movs	r0, #20
   1218c:	4b48      	ldr	r3, [pc, #288]	; (122b0 <gsm_init+0x14c>)
   1218e:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   12190:	2340      	movs	r3, #64	; 0x40
   12192:	18fb      	adds	r3, r7, r3
   12194:	0018      	movs	r0, r3
   12196:	4b47      	ldr	r3, [pc, #284]	; (122b4 <gsm_init+0x150>)
   12198:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
   1219a:	2340      	movs	r3, #64	; 0x40
   1219c:	18fb      	adds	r3, r7, r3
   1219e:	2231      	movs	r2, #49	; 0x31
   121a0:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
   121a2:	2340      	movs	r3, #64	; 0x40
   121a4:	18fb      	adds	r3, r7, r3
   121a6:	2200      	movs	r2, #0
   121a8:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   121aa:	2340      	movs	r3, #64	; 0x40
   121ac:	18fb      	adds	r3, r7, r3
   121ae:	2201      	movs	r2, #1
   121b0:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   121b2:	2340      	movs	r3, #64	; 0x40
   121b4:	18fb      	adds	r3, r7, r3
   121b6:	2203      	movs	r2, #3
   121b8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
   121ba:	2340      	movs	r3, #64	; 0x40
   121bc:	18fb      	adds	r3, r7, r3
   121be:	0019      	movs	r1, r3
   121c0:	2001      	movs	r0, #1
   121c2:	4b3d      	ldr	r3, [pc, #244]	; (122b8 <gsm_init+0x154>)
   121c4:	4798      	blx	r3
	
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   121c6:	2100      	movs	r1, #0
   121c8:	2001      	movs	r0, #1
   121ca:	4b3c      	ldr	r3, [pc, #240]	; (122bc <gsm_init+0x158>)
   121cc:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   121ce:	4b3c      	ldr	r3, [pc, #240]	; (122c0 <gsm_init+0x15c>)
   121d0:	2200      	movs	r2, #0
   121d2:	2101      	movs	r1, #1
   121d4:	0018      	movs	r0, r3
   121d6:	4b3b      	ldr	r3, [pc, #236]	; (122c4 <gsm_init+0x160>)
   121d8:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
   121da:	2200      	movs	r2, #0
   121dc:	2101      	movs	r1, #1
   121de:	20f0      	movs	r0, #240	; 0xf0
   121e0:	4b39      	ldr	r3, [pc, #228]	; (122c8 <gsm_init+0x164>)
   121e2:	4798      	blx	r3
   121e4:	0002      	movs	r2, r0
   121e6:	4b39      	ldr	r3, [pc, #228]	; (122cc <gsm_init+0x168>)
   121e8:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
   121ea:	4939      	ldr	r1, [pc, #228]	; (122d0 <gsm_init+0x16c>)
   121ec:	4839      	ldr	r0, [pc, #228]	; (122d4 <gsm_init+0x170>)
   121ee:	4b3a      	ldr	r3, [pc, #232]	; (122d8 <gsm_init+0x174>)
   121f0:	9300      	str	r3, [sp, #0]
   121f2:	2300      	movs	r3, #0
   121f4:	2200      	movs	r2, #0
   121f6:	4c39      	ldr	r4, [pc, #228]	; (122dc <gsm_init+0x178>)
   121f8:	47a0      	blx	r4
   121fa:	0002      	movs	r2, r0
   121fc:	4b38      	ldr	r3, [pc, #224]	; (122e0 <gsm_init+0x17c>)
   121fe:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
   12200:	2203      	movs	r2, #3
   12202:	2100      	movs	r1, #0
   12204:	2001      	movs	r0, #1
   12206:	4b30      	ldr	r3, [pc, #192]	; (122c8 <gsm_init+0x164>)
   12208:	4798      	blx	r3
   1220a:	0002      	movs	r2, r0
   1220c:	4b35      	ldr	r3, [pc, #212]	; (122e4 <gsm_init+0x180>)
   1220e:	601a      	str	r2, [r3, #0]
   12210:	4b34      	ldr	r3, [pc, #208]	; (122e4 <gsm_init+0x180>)
   12212:	681b      	ldr	r3, [r3, #0]
   12214:	2b00      	cmp	r3, #0
   12216:	d006      	beq.n	12226 <gsm_init+0xc2>
   12218:	4b32      	ldr	r3, [pc, #200]	; (122e4 <gsm_init+0x180>)
   1221a:	6818      	ldr	r0, [r3, #0]
   1221c:	2300      	movs	r3, #0
   1221e:	2200      	movs	r2, #0
   12220:	2100      	movs	r1, #0
   12222:	4c31      	ldr	r4, [pc, #196]	; (122e8 <gsm_init+0x184>)
   12224:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   12226:	003b      	movs	r3, r7
   12228:	0018      	movs	r0, r3
   1222a:	4b30      	ldr	r3, [pc, #192]	; (122ec <gsm_init+0x188>)
   1222c:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
   1222e:	003b      	movs	r3, r7
   12230:	2296      	movs	r2, #150	; 0x96
   12232:	01d2      	lsls	r2, r2, #7
   12234:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
   12236:	003b      	movs	r3, r7
   12238:	2280      	movs	r2, #128	; 0x80
   1223a:	0352      	lsls	r2, r2, #13
   1223c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
   1223e:	003b      	movs	r3, r7
   12240:	4a2b      	ldr	r2, [pc, #172]	; (122f0 <gsm_init+0x18c>)
   12242:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
   12244:	003b      	movs	r3, r7
   12246:	4a2b      	ldr	r2, [pc, #172]	; (122f4 <gsm_init+0x190>)
   12248:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
   1224a:	003b      	movs	r3, r7
   1224c:	2201      	movs	r2, #1
   1224e:	4252      	negs	r2, r2
   12250:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
   12252:	003b      	movs	r3, r7
   12254:	2201      	movs	r2, #1
   12256:	4252      	negs	r2, r2
   12258:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
   1225a:	003b      	movs	r3, r7
   1225c:	222c      	movs	r2, #44	; 0x2c
   1225e:	2101      	movs	r1, #1
   12260:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   12262:	e003      	b.n	1226c <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
   12264:	4b24      	ldr	r3, [pc, #144]	; (122f8 <gsm_init+0x194>)
   12266:	0018      	movs	r0, r3
   12268:	4b24      	ldr	r3, [pc, #144]	; (122fc <gsm_init+0x198>)
   1226a:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   1226c:	003a      	movs	r2, r7
   1226e:	4924      	ldr	r1, [pc, #144]	; (12300 <gsm_init+0x19c>)
   12270:	4b21      	ldr	r3, [pc, #132]	; (122f8 <gsm_init+0x194>)
   12272:	0018      	movs	r0, r3
   12274:	4b23      	ldr	r3, [pc, #140]	; (12304 <gsm_init+0x1a0>)
   12276:	4798      	blx	r3
   12278:	1e03      	subs	r3, r0, #0
   1227a:	d1f3      	bne.n	12264 <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
   1227c:	4b1e      	ldr	r3, [pc, #120]	; (122f8 <gsm_init+0x194>)
   1227e:	0018      	movs	r0, r3
   12280:	4b21      	ldr	r3, [pc, #132]	; (12308 <gsm_init+0x1a4>)
   12282:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
   12284:	4b1e      	ldr	r3, [pc, #120]	; (12300 <gsm_init+0x19c>)
   12286:	0018      	movs	r0, r3
   12288:	4b20      	ldr	r3, [pc, #128]	; (1230c <gsm_init+0x1a8>)
   1228a:	4798      	blx	r3
   1228c:	0003      	movs	r3, r0
   1228e:	001a      	movs	r2, r3
   12290:	4b1f      	ldr	r3, [pc, #124]	; (12310 <gsm_init+0x1ac>)
   12292:	0019      	movs	r1, r3
   12294:	0010      	movs	r0, r2
   12296:	4b1f      	ldr	r3, [pc, #124]	; (12314 <gsm_init+0x1b0>)
   12298:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
   1229a:	4b19      	ldr	r3, [pc, #100]	; (12300 <gsm_init+0x19c>)
   1229c:	2204      	movs	r2, #4
   1229e:	759a      	strb	r2, [r3, #22]
}
   122a0:	46c0      	nop			; (mov r8, r8)
   122a2:	46bd      	mov	sp, r7
   122a4:	b015      	add	sp, #84	; 0x54
   122a6:	bd90      	pop	{r4, r7, pc}
   122a8:	00011dd9 	.word	0x00011dd9
   122ac:	000238b1 	.word	0x000238b1
   122b0:	00011e41 	.word	0x00011e41
   122b4:	0001eeed 	.word	0x0001eeed
   122b8:	0001ef21 	.word	0x0001ef21
   122bc:	00022fc1 	.word	0x00022fc1
   122c0:	00012121 	.word	0x00012121
   122c4:	00022f5d 	.word	0x00022f5d
   122c8:	0001fbe5 	.word	0x0001fbe5
   122cc:	2000041c 	.word	0x2000041c
   122d0:	00001388 	.word	0x00001388
   122d4:	0002a3fc 	.word	0x0002a3fc
   122d8:	00012061 	.word	0x00012061
   122dc:	00021969 	.word	0x00021969
   122e0:	20000420 	.word	0x20000420
   122e4:	20000424 	.word	0x20000424
   122e8:	0001fca1 	.word	0x0001fca1
   122ec:	00011ed9 	.word	0x00011ed9
   122f0:	00160002 	.word	0x00160002
   122f4:	00170002 	.word	0x00170002
   122f8:	20000898 	.word	0x20000898
   122fc:	0001202d 	.word	0x0001202d
   12300:	42001400 	.word	0x42001400
   12304:	000225b5 	.word	0x000225b5
   12308:	00011f99 	.word	0x00011f99
   1230c:	0001f681 	.word	0x0001f681
   12310:	000120a5 	.word	0x000120a5
   12314:	00022d51 	.word	0x00022d51

00012318 <gsm_module_exit_sleep>:

void gsm_module_exit_sleep(bool calledFromRead)
{
   12318:	b580      	push	{r7, lr}
   1231a:	b082      	sub	sp, #8
   1231c:	af00      	add	r7, sp, #0
   1231e:	0002      	movs	r2, r0
   12320:	1dfb      	adds	r3, r7, #7
   12322:	701a      	strb	r2, [r3, #0]
	if (!isGSMModuleAwake)
   12324:	4b12      	ldr	r3, [pc, #72]	; (12370 <gsm_module_exit_sleep+0x58>)
   12326:	781b      	ldrb	r3, [r3, #0]
   12328:	b2db      	uxtb	r3, r3
   1232a:	2201      	movs	r2, #1
   1232c:	4053      	eors	r3, r2
   1232e:	b2db      	uxtb	r3, r3
   12330:	2b00      	cmp	r3, #0
   12332:	d010      	beq.n	12356 <gsm_module_exit_sleep+0x3e>
	{
		port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   12334:	2101      	movs	r1, #1
   12336:	2014      	movs	r0, #20
   12338:	4b0e      	ldr	r3, [pc, #56]	; (12374 <gsm_module_exit_sleep+0x5c>)
   1233a:	4798      	blx	r3
		isGSMModuleAwake = true;
   1233c:	4b0c      	ldr	r3, [pc, #48]	; (12370 <gsm_module_exit_sleep+0x58>)
   1233e:	2201      	movs	r2, #1
   12340:	701a      	strb	r2, [r3, #0]
		if (!calledFromRead)
   12342:	1dfb      	adds	r3, r7, #7
   12344:	781b      	ldrb	r3, [r3, #0]
   12346:	2201      	movs	r2, #1
   12348:	4053      	eors	r3, r2
   1234a:	b2db      	uxtb	r3, r3
   1234c:	2b00      	cmp	r3, #0
   1234e:	d002      	beq.n	12356 <gsm_module_exit_sleep+0x3e>
		{
			vTaskDelay(100 / portTICK_PERIOD_MS);
   12350:	2064      	movs	r0, #100	; 0x64
   12352:	4b09      	ldr	r3, [pc, #36]	; (12378 <gsm_module_exit_sleep+0x60>)
   12354:	4798      	blx	r3
		}
	}
	lastToLastGSMCommunicationTime=lastGSMCommunicationTime;
   12356:	4b09      	ldr	r3, [pc, #36]	; (1237c <gsm_module_exit_sleep+0x64>)
   12358:	681a      	ldr	r2, [r3, #0]
   1235a:	4b09      	ldr	r3, [pc, #36]	; (12380 <gsm_module_exit_sleep+0x68>)
   1235c:	601a      	str	r2, [r3, #0]
	lastGSMCommunicationTime=xTaskGetTickCount();
   1235e:	4b09      	ldr	r3, [pc, #36]	; (12384 <gsm_module_exit_sleep+0x6c>)
   12360:	4798      	blx	r3
   12362:	0002      	movs	r2, r0
   12364:	4b05      	ldr	r3, [pc, #20]	; (1237c <gsm_module_exit_sleep+0x64>)
   12366:	601a      	str	r2, [r3, #0]
}
   12368:	46c0      	nop			; (mov r8, r8)
   1236a:	46bd      	mov	sp, r7
   1236c:	b002      	add	sp, #8
   1236e:	bd80      	pop	{r7, pc}
   12370:	20000884 	.word	0x20000884
   12374:	00011e41 	.word	0x00011e41
   12378:	00020a49 	.word	0x00020a49
   1237c:	20000894 	.word	0x20000894
   12380:	20000890 	.word	0x20000890
   12384:	00020dad 	.word	0x00020dad

00012388 <gsm_module_enter_sleep>:

void gsm_module_enter_sleep(void)
{
   12388:	b580      	push	{r7, lr}
   1238a:	af00      	add	r7, sp, #0
	//port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_DEACTIVE);
	isGSMModuleAwake = false;
   1238c:	4b02      	ldr	r3, [pc, #8]	; (12398 <gsm_module_enter_sleep+0x10>)
   1238e:	2200      	movs	r2, #0
   12390:	701a      	strb	r2, [r3, #0]
}
   12392:	46c0      	nop			; (mov r8, r8)
   12394:	46bd      	mov	sp, r7
   12396:	bd80      	pop	{r7, pc}
   12398:	20000884 	.word	0x20000884

0001239c <gsm_module_sleep_elligible>:

bool gsm_module_sleep_elligible(void)
{
   1239c:	b580      	push	{r7, lr}
   1239e:	b082      	sub	sp, #8
   123a0:	af00      	add	r7, sp, #0
	if(isGSMModuleAwake)
   123a2:	4b0e      	ldr	r3, [pc, #56]	; (123dc <gsm_module_sleep_elligible+0x40>)
   123a4:	781b      	ldrb	r3, [r3, #0]
   123a6:	b2db      	uxtb	r3, r3
   123a8:	2b00      	cmp	r3, #0
   123aa:	d011      	beq.n	123d0 <gsm_module_sleep_elligible+0x34>
	{
		bool ret=false;
   123ac:	1dfb      	adds	r3, r7, #7
   123ae:	2200      	movs	r2, #0
   123b0:	701a      	strb	r2, [r3, #0]
		ret= ((xTaskGetTickCount() - lastGSMCommunicationTime)>=30000L);
   123b2:	4b0b      	ldr	r3, [pc, #44]	; (123e0 <gsm_module_sleep_elligible+0x44>)
   123b4:	4798      	blx	r3
   123b6:	0002      	movs	r2, r0
   123b8:	4b0a      	ldr	r3, [pc, #40]	; (123e4 <gsm_module_sleep_elligible+0x48>)
   123ba:	681b      	ldr	r3, [r3, #0]
   123bc:	1ad2      	subs	r2, r2, r3
   123be:	1dfb      	adds	r3, r7, #7
   123c0:	4909      	ldr	r1, [pc, #36]	; (123e8 <gsm_module_sleep_elligible+0x4c>)
   123c2:	4291      	cmp	r1, r2
   123c4:	4192      	sbcs	r2, r2
   123c6:	4252      	negs	r2, r2
   123c8:	701a      	strb	r2, [r3, #0]
		return ret;
   123ca:	1dfb      	adds	r3, r7, #7
   123cc:	781b      	ldrb	r3, [r3, #0]
   123ce:	e000      	b.n	123d2 <gsm_module_sleep_elligible+0x36>
	}
	return true;
   123d0:	2301      	movs	r3, #1
}
   123d2:	0018      	movs	r0, r3
   123d4:	46bd      	mov	sp, r7
   123d6:	b002      	add	sp, #8
   123d8:	bd80      	pop	{r7, pc}
   123da:	46c0      	nop			; (mov r8, r8)
   123dc:	20000884 	.word	0x20000884
   123e0:	00020dad 	.word	0x00020dad
   123e4:	20000894 	.word	0x20000894
   123e8:	0000752f 	.word	0x0000752f

000123ec <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
   123ec:	b590      	push	{r4, r7, lr}
   123ee:	b08b      	sub	sp, #44	; 0x2c
   123f0:	af02      	add	r7, sp, #8
   123f2:	60f8      	str	r0, [r7, #12]
   123f4:	60b9      	str	r1, [r7, #8]
   123f6:	607a      	str	r2, [r7, #4]
   123f8:	001a      	movs	r2, r3
   123fa:	1cfb      	adds	r3, r7, #3
   123fc:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
   123fe:	4b69      	ldr	r3, [pc, #420]	; (125a4 <gsm_send_at_command+0x1b8>)
   12400:	681b      	ldr	r3, [r3, #0]
   12402:	2101      	movs	r1, #1
   12404:	0018      	movs	r0, r3
   12406:	4b68      	ldr	r3, [pc, #416]	; (125a8 <gsm_send_at_command+0x1bc>)
   12408:	4798      	blx	r3
   1240a:	1e03      	subs	r3, r0, #0
   1240c:	d101      	bne.n	12412 <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
   1240e:	2302      	movs	r3, #2
   12410:	e0c4      	b.n	1259c <gsm_send_at_command+0x1b0>
	}
	
	
	/* Enable DTR and wait for the module to be ready to accept a command */
	gsm_module_exit_sleep(false);
   12412:	2000      	movs	r0, #0
   12414:	4b65      	ldr	r3, [pc, #404]	; (125ac <gsm_send_at_command+0x1c0>)
   12416:	4798      	blx	r3
	/*                                                                      */
	
	//lastGSMCommandTime=xTaskGetTickCount();
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
   12418:	4b65      	ldr	r3, [pc, #404]	; (125b0 <gsm_send_at_command+0x1c4>)
   1241a:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
   1241c:	231f      	movs	r3, #31
   1241e:	18fb      	adds	r3, r7, r3
   12420:	2200      	movs	r2, #0
   12422:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
   12424:	231e      	movs	r3, #30
   12426:	18fb      	adds	r3, r7, r3
   12428:	2200      	movs	r2, #0
   1242a:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
   1242c:	2313      	movs	r3, #19
   1242e:	18fb      	adds	r3, r7, r3
   12430:	2200      	movs	r2, #0
   12432:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
   12434:	2101      	movs	r1, #1
   12436:	20f0      	movs	r0, #240	; 0xf0
   12438:	4b5e      	ldr	r3, [pc, #376]	; (125b4 <gsm_send_at_command+0x1c8>)
   1243a:	4798      	blx	r3
   1243c:	0003      	movs	r3, r0
   1243e:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
   12440:	69bb      	ldr	r3, [r7, #24]
   12442:	2b00      	cmp	r3, #0
   12444:	d108      	bne.n	12458 <gsm_send_at_command+0x6c>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		xSemaphoreGive(gsm_busy_semaphore);
   12446:	4b57      	ldr	r3, [pc, #348]	; (125a4 <gsm_send_at_command+0x1b8>)
   12448:	6818      	ldr	r0, [r3, #0]
   1244a:	2300      	movs	r3, #0
   1244c:	2200      	movs	r2, #0
   1244e:	2100      	movs	r1, #0
   12450:	4c59      	ldr	r4, [pc, #356]	; (125b8 <gsm_send_at_command+0x1cc>)
   12452:	47a0      	blx	r4
		return 0;
   12454:	2300      	movs	r3, #0
   12456:	e0a1      	b.n	1259c <gsm_send_at_command+0x1b0>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
   12458:	69bb      	ldr	r3, [r7, #24]
   1245a:	22f0      	movs	r2, #240	; 0xf0
   1245c:	2100      	movs	r1, #0
   1245e:	0018      	movs	r0, r3
   12460:	4b56      	ldr	r3, [pc, #344]	; (125bc <gsm_send_at_command+0x1d0>)
   12462:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));
   12464:	68fb      	ldr	r3, [r7, #12]
   12466:	0018      	movs	r0, r3
   12468:	4b55      	ldr	r3, [pc, #340]	; (125c0 <gsm_send_at_command+0x1d4>)
   1246a:	4798      	blx	r3
   1246c:	0003      	movs	r3, r0
   1246e:	b29a      	uxth	r2, r3
   12470:	68f9      	ldr	r1, [r7, #12]
   12472:	4b54      	ldr	r3, [pc, #336]	; (125c4 <gsm_send_at_command+0x1d8>)
   12474:	0018      	movs	r0, r3
   12476:	4b54      	ldr	r3, [pc, #336]	; (125c8 <gsm_send_at_command+0x1dc>)
   12478:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
   1247a:	4b54      	ldr	r3, [pc, #336]	; (125cc <gsm_send_at_command+0x1e0>)
   1247c:	6818      	ldr	r0, [r3, #0]
   1247e:	687a      	ldr	r2, [r7, #4]
   12480:	2301      	movs	r3, #1
   12482:	425b      	negs	r3, r3
   12484:	9300      	str	r3, [sp, #0]
   12486:	2300      	movs	r3, #0
   12488:	2104      	movs	r1, #4
   1248a:	4c51      	ldr	r4, [pc, #324]	; (125d0 <gsm_send_at_command+0x1e4>)
   1248c:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
   1248e:	4b4f      	ldr	r3, [pc, #316]	; (125cc <gsm_send_at_command+0x1e0>)
   12490:	681b      	ldr	r3, [r3, #0]
   12492:	0018      	movs	r0, r3
   12494:	4b4f      	ldr	r3, [pc, #316]	; (125d4 <gsm_send_at_command+0x1e8>)
   12496:	4798      	blx	r3
   12498:	1e03      	subs	r3, r0, #0
   1249a:	d03e      	beq.n	1251a <gsm_send_at_command+0x12e>
		{
			if (u8tRx_Index<240)
   1249c:	231e      	movs	r3, #30
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	781b      	ldrb	r3, [r3, #0]
   124a2:	2bef      	cmp	r3, #239	; 0xef
   124a4:	d81c      	bhi.n	124e0 <gsm_send_at_command+0xf4>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
   124a6:	4b4c      	ldr	r3, [pc, #304]	; (125d8 <gsm_send_at_command+0x1ec>)
   124a8:	681b      	ldr	r3, [r3, #0]
   124aa:	2213      	movs	r2, #19
   124ac:	18b9      	adds	r1, r7, r2
   124ae:	2200      	movs	r2, #0
   124b0:	0018      	movs	r0, r3
   124b2:	4b4a      	ldr	r3, [pc, #296]	; (125dc <gsm_send_at_command+0x1f0>)
   124b4:	4798      	blx	r3
   124b6:	0003      	movs	r3, r0
   124b8:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
   124ba:	697b      	ldr	r3, [r7, #20]
   124bc:	2b00      	cmp	r3, #0
   124be:	d00f      	beq.n	124e0 <gsm_send_at_command+0xf4>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
   124c0:	231e      	movs	r3, #30
   124c2:	18fb      	adds	r3, r7, r3
   124c4:	781b      	ldrb	r3, [r3, #0]
   124c6:	69ba      	ldr	r2, [r7, #24]
   124c8:	18d3      	adds	r3, r2, r3
   124ca:	2213      	movs	r2, #19
   124cc:	18ba      	adds	r2, r7, r2
   124ce:	7812      	ldrb	r2, [r2, #0]
   124d0:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
   124d2:	231e      	movs	r3, #30
   124d4:	18fb      	adds	r3, r7, r3
   124d6:	781a      	ldrb	r2, [r3, #0]
   124d8:	231e      	movs	r3, #30
   124da:	18fb      	adds	r3, r7, r3
   124dc:	3201      	adds	r2, #1
   124de:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
   124e0:	68bb      	ldr	r3, [r7, #8]
   124e2:	2b00      	cmp	r3, #0
   124e4:	d00c      	beq.n	12500 <gsm_send_at_command+0x114>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
   124e6:	68ba      	ldr	r2, [r7, #8]
   124e8:	69bb      	ldr	r3, [r7, #24]
   124ea:	0011      	movs	r1, r2
   124ec:	0018      	movs	r0, r3
   124ee:	4b3c      	ldr	r3, [pc, #240]	; (125e0 <gsm_send_at_command+0x1f4>)
   124f0:	4798      	blx	r3
   124f2:	1e03      	subs	r3, r0, #0
   124f4:	d004      	beq.n	12500 <gsm_send_at_command+0x114>
				{
					err_no = GSM_ERROR_NONE;
   124f6:	231f      	movs	r3, #31
   124f8:	18fb      	adds	r3, r7, r3
   124fa:	2200      	movs	r2, #0
   124fc:	701a      	strb	r2, [r3, #0]
					break;
   124fe:	e024      	b.n	1254a <gsm_send_at_command+0x15e>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
   12500:	4a38      	ldr	r2, [pc, #224]	; (125e4 <gsm_send_at_command+0x1f8>)
   12502:	69bb      	ldr	r3, [r7, #24]
   12504:	0011      	movs	r1, r2
   12506:	0018      	movs	r0, r3
   12508:	4b35      	ldr	r3, [pc, #212]	; (125e0 <gsm_send_at_command+0x1f4>)
   1250a:	4798      	blx	r3
   1250c:	1e03      	subs	r3, r0, #0
   1250e:	d0be      	beq.n	1248e <gsm_send_at_command+0xa2>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
   12510:	231f      	movs	r3, #31
   12512:	18fb      	adds	r3, r7, r3
   12514:	220b      	movs	r2, #11
   12516:	701a      	strb	r2, [r3, #0]
				break;
   12518:	e017      	b.n	1254a <gsm_send_at_command+0x15e>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
   1251a:	4b2c      	ldr	r3, [pc, #176]	; (125cc <gsm_send_at_command+0x1e0>)
   1251c:	6818      	ldr	r0, [r3, #0]
   1251e:	2301      	movs	r3, #1
   12520:	425b      	negs	r3, r3
   12522:	9300      	str	r3, [sp, #0]
   12524:	2300      	movs	r3, #0
   12526:	2200      	movs	r2, #0
   12528:	2103      	movs	r1, #3
   1252a:	4c29      	ldr	r4, [pc, #164]	; (125d0 <gsm_send_at_command+0x1e4>)
   1252c:	47a0      	blx	r4
			if (u8tRx_Index==0)
   1252e:	231e      	movs	r3, #30
   12530:	18fb      	adds	r3, r7, r3
   12532:	781b      	ldrb	r3, [r3, #0]
   12534:	2b00      	cmp	r3, #0
   12536:	d104      	bne.n	12542 <gsm_send_at_command+0x156>
			{
				err_no = GSM_ERROR_TIMEOUT;
   12538:	231f      	movs	r3, #31
   1253a:	18fb      	adds	r3, r7, r3
   1253c:	2207      	movs	r2, #7
   1253e:	701a      	strb	r2, [r3, #0]
				break;
   12540:	e003      	b.n	1254a <gsm_send_at_command+0x15e>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
   12542:	231f      	movs	r3, #31
   12544:	18fb      	adds	r3, r7, r3
   12546:	2208      	movs	r2, #8
   12548:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
   1254a:	1cfb      	adds	r3, r7, #3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2b00      	cmp	r3, #0
   12550:	d016      	beq.n	12580 <gsm_send_at_command+0x194>
   12552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12554:	2b00      	cmp	r3, #0
   12556:	d013      	beq.n	12580 <gsm_send_at_command+0x194>
   12558:	1cfa      	adds	r2, r7, #3
   1255a:	231e      	movs	r3, #30
   1255c:	18fb      	adds	r3, r7, r3
   1255e:	7812      	ldrb	r2, [r2, #0]
   12560:	781b      	ldrb	r3, [r3, #0]
   12562:	429a      	cmp	r2, r3
   12564:	d90c      	bls.n	12580 <gsm_send_at_command+0x194>
   12566:	231f      	movs	r3, #31
   12568:	18fb      	adds	r3, r7, r3
   1256a:	781b      	ldrb	r3, [r3, #0]
   1256c:	2b00      	cmp	r3, #0
   1256e:	d107      	bne.n	12580 <gsm_send_at_command+0x194>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
   12570:	231e      	movs	r3, #30
   12572:	18fb      	adds	r3, r7, r3
   12574:	781a      	ldrb	r2, [r3, #0]
   12576:	69b9      	ldr	r1, [r7, #24]
   12578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1257a:	0018      	movs	r0, r3
   1257c:	4b1a      	ldr	r3, [pc, #104]	; (125e8 <gsm_send_at_command+0x1fc>)
   1257e:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
   12580:	4b08      	ldr	r3, [pc, #32]	; (125a4 <gsm_send_at_command+0x1b8>)
   12582:	6818      	ldr	r0, [r3, #0]
   12584:	2300      	movs	r3, #0
   12586:	2200      	movs	r2, #0
   12588:	2100      	movs	r1, #0
   1258a:	4c0b      	ldr	r4, [pc, #44]	; (125b8 <gsm_send_at_command+0x1cc>)
   1258c:	47a0      	blx	r4
	free(aDataBuffer);
   1258e:	69bb      	ldr	r3, [r7, #24]
   12590:	0018      	movs	r0, r3
   12592:	4b16      	ldr	r3, [pc, #88]	; (125ec <gsm_send_at_command+0x200>)
   12594:	4798      	blx	r3
	return err_no;
   12596:	231f      	movs	r3, #31
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781b      	ldrb	r3, [r3, #0]
}
   1259c:	0018      	movs	r0, r3
   1259e:	46bd      	mov	sp, r7
   125a0:	b009      	add	sp, #36	; 0x24
   125a2:	bd90      	pop	{r4, r7, pc}
   125a4:	20000424 	.word	0x20000424
   125a8:	00020141 	.word	0x00020141
   125ac:	00012319 	.word	0x00012319
   125b0:	00012071 	.word	0x00012071
   125b4:	0002964d 	.word	0x0002964d
   125b8:	0001fca1 	.word	0x0001fca1
   125bc:	0002975b 	.word	0x0002975b
   125c0:	000299eb 	.word	0x000299eb
   125c4:	20000898 	.word	0x20000898
   125c8:	0002288d 	.word	0x0002288d
   125cc:	20000420 	.word	0x20000420
   125d0:	00021a0d 	.word	0x00021a0d
   125d4:	00021f89 	.word	0x00021f89
   125d8:	2000041c 	.word	0x2000041c
   125dc:	0001ffa1 	.word	0x0001ffa1
   125e0:	00029a1b 	.word	0x00029a1b
   125e4:	0002a408 	.word	0x0002a408
   125e8:	00029725 	.word	0x00029725
   125ec:	000296ed 	.word	0x000296ed

000125f0 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
   125f0:	b590      	push	{r4, r7, lr}
   125f2:	b083      	sub	sp, #12
   125f4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
   125f6:	4a06      	ldr	r2, [pc, #24]	; (12610 <gsm_check_module+0x20>)
   125f8:	4906      	ldr	r1, [pc, #24]	; (12614 <gsm_check_module+0x24>)
   125fa:	4807      	ldr	r0, [pc, #28]	; (12618 <gsm_check_module+0x28>)
   125fc:	2300      	movs	r3, #0
   125fe:	9300      	str	r3, [sp, #0]
   12600:	2300      	movs	r3, #0
   12602:	4c06      	ldr	r4, [pc, #24]	; (1261c <gsm_check_module+0x2c>)
   12604:	47a0      	blx	r4
   12606:	0003      	movs	r3, r0
}
   12608:	0018      	movs	r0, r3
   1260a:	46bd      	mov	sp, r7
   1260c:	b001      	add	sp, #4
   1260e:	bd90      	pop	{r4, r7, pc}
   12610:	00001388 	.word	0x00001388
   12614:	0002a410 	.word	0x0002a410
   12618:	0002a414 	.word	0x0002a414
   1261c:	000123ed 	.word	0x000123ed

00012620 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
   12620:	b5b0      	push	{r4, r5, r7, lr}
   12622:	b084      	sub	sp, #16
   12624:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
   12626:	1dfc      	adds	r4, r7, #7
   12628:	4a12      	ldr	r2, [pc, #72]	; (12674 <gsm_is_network_registered+0x54>)
   1262a:	4913      	ldr	r1, [pc, #76]	; (12678 <gsm_is_network_registered+0x58>)
   1262c:	4813      	ldr	r0, [pc, #76]	; (1267c <gsm_is_network_registered+0x5c>)
   1262e:	2300      	movs	r3, #0
   12630:	9300      	str	r3, [sp, #0]
   12632:	2300      	movs	r3, #0
   12634:	4d12      	ldr	r5, [pc, #72]	; (12680 <gsm_is_network_registered+0x60>)
   12636:	47a8      	blx	r5
   12638:	0003      	movs	r3, r0
   1263a:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
   1263c:	1dfb      	adds	r3, r7, #7
   1263e:	781b      	ldrb	r3, [r3, #0]
   12640:	2b00      	cmp	r3, #0
   12642:	d101      	bne.n	12648 <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;
   12644:	2309      	movs	r3, #9
   12646:	e011      	b.n	1266c <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
   12648:	1dbc      	adds	r4, r7, #6
   1264a:	4a0a      	ldr	r2, [pc, #40]	; (12674 <gsm_is_network_registered+0x54>)
   1264c:	490d      	ldr	r1, [pc, #52]	; (12684 <gsm_is_network_registered+0x64>)
   1264e:	480b      	ldr	r0, [pc, #44]	; (1267c <gsm_is_network_registered+0x5c>)
   12650:	2300      	movs	r3, #0
   12652:	9300      	str	r3, [sp, #0]
   12654:	2300      	movs	r3, #0
   12656:	4d0a      	ldr	r5, [pc, #40]	; (12680 <gsm_is_network_registered+0x60>)
   12658:	47a8      	blx	r5
   1265a:	0003      	movs	r3, r0
   1265c:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
   1265e:	1dbb      	adds	r3, r7, #6
   12660:	781b      	ldrb	r3, [r3, #0]
   12662:	2b00      	cmp	r3, #0
   12664:	d101      	bne.n	1266a <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
   12666:	2309      	movs	r3, #9
   12668:	e000      	b.n	1266c <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
   1266a:	230a      	movs	r3, #10
			}
		}
	}
}
   1266c:	0018      	movs	r0, r3
   1266e:	46bd      	mov	sp, r7
   12670:	b002      	add	sp, #8
   12672:	bdb0      	pop	{r4, r5, r7, pc}
   12674:	00001388 	.word	0x00001388
   12678:	0002a424 	.word	0x0002a424
   1267c:	0002a430 	.word	0x0002a430
   12680:	000123ed 	.word	0x000123ed
   12684:	0002a43c 	.word	0x0002a43c

00012688 <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
   12688:	b590      	push	{r4, r7, lr}
   1268a:	b089      	sub	sp, #36	; 0x24
   1268c:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
   1268e:	1d3b      	adds	r3, r7, #4
   12690:	0018      	movs	r0, r3
   12692:	2314      	movs	r3, #20
   12694:	001a      	movs	r2, r3
   12696:	2100      	movs	r1, #0
   12698:	4b0a      	ldr	r3, [pc, #40]	; (126c4 <gsm_set_baudrate+0x3c>)
   1269a:	4798      	blx	r3
	
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
   1269c:	2396      	movs	r3, #150	; 0x96
   1269e:	01da      	lsls	r2, r3, #7
   126a0:	4909      	ldr	r1, [pc, #36]	; (126c8 <gsm_set_baudrate+0x40>)
   126a2:	1d3b      	adds	r3, r7, #4
   126a4:	0018      	movs	r0, r3
   126a6:	4b09      	ldr	r3, [pc, #36]	; (126cc <gsm_set_baudrate+0x44>)
   126a8:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
   126aa:	4a09      	ldr	r2, [pc, #36]	; (126d0 <gsm_set_baudrate+0x48>)
   126ac:	4909      	ldr	r1, [pc, #36]	; (126d4 <gsm_set_baudrate+0x4c>)
   126ae:	1d38      	adds	r0, r7, #4
   126b0:	2300      	movs	r3, #0
   126b2:	9300      	str	r3, [sp, #0]
   126b4:	2300      	movs	r3, #0
   126b6:	4c08      	ldr	r4, [pc, #32]	; (126d8 <gsm_set_baudrate+0x50>)
   126b8:	47a0      	blx	r4
   126ba:	0003      	movs	r3, r0
}
   126bc:	0018      	movs	r0, r3
   126be:	46bd      	mov	sp, r7
   126c0:	b007      	add	sp, #28
   126c2:	bd90      	pop	{r4, r7, pc}
   126c4:	0002975b 	.word	0x0002975b
   126c8:	0002a448 	.word	0x0002a448
   126cc:	00029961 	.word	0x00029961
   126d0:	00001388 	.word	0x00001388
   126d4:	0002a410 	.word	0x0002a410
   126d8:	000123ed 	.word	0x000123ed

000126dc <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
   126dc:	b590      	push	{r4, r7, lr}
   126de:	b083      	sub	sp, #12
   126e0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
   126e2:	4a06      	ldr	r2, [pc, #24]	; (126fc <gsm_detect_simcard+0x20>)
   126e4:	4906      	ldr	r1, [pc, #24]	; (12700 <gsm_detect_simcard+0x24>)
   126e6:	4807      	ldr	r0, [pc, #28]	; (12704 <gsm_detect_simcard+0x28>)
   126e8:	2300      	movs	r3, #0
   126ea:	9300      	str	r3, [sp, #0]
   126ec:	2300      	movs	r3, #0
   126ee:	4c06      	ldr	r4, [pc, #24]	; (12708 <gsm_detect_simcard+0x2c>)
   126f0:	47a0      	blx	r4
   126f2:	0003      	movs	r3, r0
}
   126f4:	0018      	movs	r0, r3
   126f6:	46bd      	mov	sp, r7
   126f8:	b001      	add	sp, #4
   126fa:	bd90      	pop	{r4, r7, pc}
   126fc:	00001388 	.word	0x00001388
   12700:	0002a4b8 	.word	0x0002a4b8
   12704:	0002a4c8 	.word	0x0002a4c8
   12708:	000123ed 	.word	0x000123ed

0001270c <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
   1270c:	b590      	push	{r4, r7, lr}
   1270e:	b083      	sub	sp, #12
   12710:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
   12712:	4a06      	ldr	r2, [pc, #24]	; (1272c <gsm_delete_all_sms+0x20>)
   12714:	4906      	ldr	r1, [pc, #24]	; (12730 <gsm_delete_all_sms+0x24>)
   12716:	4807      	ldr	r0, [pc, #28]	; (12734 <gsm_delete_all_sms+0x28>)
   12718:	2300      	movs	r3, #0
   1271a:	9300      	str	r3, [sp, #0]
   1271c:	2300      	movs	r3, #0
   1271e:	4c06      	ldr	r4, [pc, #24]	; (12738 <gsm_delete_all_sms+0x2c>)
   12720:	47a0      	blx	r4
   12722:	0003      	movs	r3, r0
}
   12724:	0018      	movs	r0, r3
   12726:	46bd      	mov	sp, r7
   12728:	b001      	add	sp, #4
   1272a:	bd90      	pop	{r4, r7, pc}
   1272c:	000061a8 	.word	0x000061a8
   12730:	0002a410 	.word	0x0002a410
   12734:	0002a4d4 	.word	0x0002a4d4
   12738:	000123ed 	.word	0x000123ed

0001273c <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
   1273c:	b590      	push	{r4, r7, lr}
   1273e:	b083      	sub	sp, #12
   12740:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12742:	4a06      	ldr	r2, [pc, #24]	; (1275c <gsm_store_active_profile+0x20>)
   12744:	4906      	ldr	r1, [pc, #24]	; (12760 <gsm_store_active_profile+0x24>)
   12746:	4807      	ldr	r0, [pc, #28]	; (12764 <gsm_store_active_profile+0x28>)
   12748:	2300      	movs	r3, #0
   1274a:	9300      	str	r3, [sp, #0]
   1274c:	2300      	movs	r3, #0
   1274e:	4c06      	ldr	r4, [pc, #24]	; (12768 <gsm_store_active_profile+0x2c>)
   12750:	47a0      	blx	r4
   12752:	0003      	movs	r3, r0
}
   12754:	0018      	movs	r0, r3
   12756:	46bd      	mov	sp, r7
   12758:	b001      	add	sp, #4
   1275a:	bd90      	pop	{r4, r7, pc}
   1275c:	00001388 	.word	0x00001388
   12760:	0002a410 	.word	0x0002a410
   12764:	0002a4e8 	.word	0x0002a4e8
   12768:	000123ed 	.word	0x000123ed

0001276c <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
   1276c:	b590      	push	{r4, r7, lr}
   1276e:	b083      	sub	sp, #12
   12770:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12772:	4a06      	ldr	r2, [pc, #24]	; (1278c <gsm_enable_calling_line_identification+0x20>)
   12774:	4906      	ldr	r1, [pc, #24]	; (12790 <gsm_enable_calling_line_identification+0x24>)
   12776:	4807      	ldr	r0, [pc, #28]	; (12794 <gsm_enable_calling_line_identification+0x28>)
   12778:	2300      	movs	r3, #0
   1277a:	9300      	str	r3, [sp, #0]
   1277c:	2300      	movs	r3, #0
   1277e:	4c06      	ldr	r4, [pc, #24]	; (12798 <gsm_enable_calling_line_identification+0x2c>)
   12780:	47a0      	blx	r4
   12782:	0003      	movs	r3, r0
}
   12784:	0018      	movs	r0, r3
   12786:	46bd      	mov	sp, r7
   12788:	b001      	add	sp, #4
   1278a:	bd90      	pop	{r4, r7, pc}
   1278c:	00003a98 	.word	0x00003a98
   12790:	0002a410 	.word	0x0002a410
   12794:	0002a4f0 	.word	0x0002a4f0
   12798:	000123ed 	.word	0x000123ed

0001279c <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
   1279c:	b590      	push	{r4, r7, lr}
   1279e:	b083      	sub	sp, #12
   127a0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   127a2:	4a06      	ldr	r2, [pc, #24]	; (127bc <gsm_enable_connected_line_identification_presentation+0x20>)
   127a4:	4906      	ldr	r1, [pc, #24]	; (127c0 <gsm_enable_connected_line_identification_presentation+0x24>)
   127a6:	4807      	ldr	r0, [pc, #28]	; (127c4 <gsm_enable_connected_line_identification_presentation+0x28>)
   127a8:	2300      	movs	r3, #0
   127aa:	9300      	str	r3, [sp, #0]
   127ac:	2300      	movs	r3, #0
   127ae:	4c06      	ldr	r4, [pc, #24]	; (127c8 <gsm_enable_connected_line_identification_presentation+0x2c>)
   127b0:	47a0      	blx	r4
   127b2:	0003      	movs	r3, r0
}
   127b4:	0018      	movs	r0, r3
   127b6:	46bd      	mov	sp, r7
   127b8:	b001      	add	sp, #4
   127ba:	bd90      	pop	{r4, r7, pc}
   127bc:	00001388 	.word	0x00001388
   127c0:	0002a410 	.word	0x0002a410
   127c4:	0002a4fc 	.word	0x0002a4fc
   127c8:	000123ed 	.word	0x000123ed

000127cc <gsm_enable_sleep_mode>:


//The +CSCLK value can not be reset by AT&F or ATZ command.
enum gsm_error gsm_enable_sleep_mode(void)
{
   127cc:	b590      	push	{r4, r7, lr}
   127ce:	b083      	sub	sp, #12
   127d0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSCLK=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   127d2:	4a06      	ldr	r2, [pc, #24]	; (127ec <gsm_enable_sleep_mode+0x20>)
   127d4:	4906      	ldr	r1, [pc, #24]	; (127f0 <gsm_enable_sleep_mode+0x24>)
   127d6:	4807      	ldr	r0, [pc, #28]	; (127f4 <gsm_enable_sleep_mode+0x28>)
   127d8:	2300      	movs	r3, #0
   127da:	9300      	str	r3, [sp, #0]
   127dc:	2300      	movs	r3, #0
   127de:	4c06      	ldr	r4, [pc, #24]	; (127f8 <gsm_enable_sleep_mode+0x2c>)
   127e0:	47a0      	blx	r4
   127e2:	0003      	movs	r3, r0
}
   127e4:	0018      	movs	r0, r3
   127e6:	46bd      	mov	sp, r7
   127e8:	b001      	add	sp, #4
   127ea:	bd90      	pop	{r4, r7, pc}
   127ec:	00002710 	.word	0x00002710
   127f0:	0002a410 	.word	0x0002a410
   127f4:	0002a508 	.word	0x0002a508
   127f8:	000123ed 	.word	0x000123ed

000127fc <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
   127fc:	b590      	push	{r4, r7, lr}
   127fe:	b083      	sub	sp, #12
   12800:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12802:	4a06      	ldr	r2, [pc, #24]	; (1281c <gsm_enable_list_current_calls_of_ME+0x20>)
   12804:	4906      	ldr	r1, [pc, #24]	; (12820 <gsm_enable_list_current_calls_of_ME+0x24>)
   12806:	4807      	ldr	r0, [pc, #28]	; (12824 <gsm_enable_list_current_calls_of_ME+0x28>)
   12808:	2300      	movs	r3, #0
   1280a:	9300      	str	r3, [sp, #0]
   1280c:	2300      	movs	r3, #0
   1280e:	4c06      	ldr	r4, [pc, #24]	; (12828 <gsm_enable_list_current_calls_of_ME+0x2c>)
   12810:	47a0      	blx	r4
   12812:	0003      	movs	r3, r0
}
   12814:	0018      	movs	r0, r3
   12816:	46bd      	mov	sp, r7
   12818:	b001      	add	sp, #4
   1281a:	bd90      	pop	{r4, r7, pc}
   1281c:	00001388 	.word	0x00001388
   12820:	0002a410 	.word	0x0002a410
   12824:	0002a530 	.word	0x0002a530
   12828:	000123ed 	.word	0x000123ed

0001282c <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
   1282c:	b590      	push	{r4, r7, lr}
   1282e:	b083      	sub	sp, #12
   12830:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12832:	4a06      	ldr	r2, [pc, #24]	; (1284c <gsm_factory_reset+0x20>)
   12834:	4906      	ldr	r1, [pc, #24]	; (12850 <gsm_factory_reset+0x24>)
   12836:	4807      	ldr	r0, [pc, #28]	; (12854 <gsm_factory_reset+0x28>)
   12838:	2300      	movs	r3, #0
   1283a:	9300      	str	r3, [sp, #0]
   1283c:	2300      	movs	r3, #0
   1283e:	4c06      	ldr	r4, [pc, #24]	; (12858 <gsm_factory_reset+0x2c>)
   12840:	47a0      	blx	r4
   12842:	0003      	movs	r3, r0
}
   12844:	0018      	movs	r0, r3
   12846:	46bd      	mov	sp, r7
   12848:	b001      	add	sp, #4
   1284a:	bd90      	pop	{r4, r7, pc}
   1284c:	00003a98 	.word	0x00003a98
   12850:	0002a410 	.word	0x0002a410
   12854:	0002a53c 	.word	0x0002a53c
   12858:	000123ed 	.word	0x000123ed

0001285c <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
   1285c:	b590      	push	{r4, r7, lr}
   1285e:	b083      	sub	sp, #12
   12860:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12862:	4a06      	ldr	r2, [pc, #24]	; (1287c <gsm_echo_off+0x20>)
   12864:	4906      	ldr	r1, [pc, #24]	; (12880 <gsm_echo_off+0x24>)
   12866:	4807      	ldr	r0, [pc, #28]	; (12884 <gsm_echo_off+0x28>)
   12868:	2300      	movs	r3, #0
   1286a:	9300      	str	r3, [sp, #0]
   1286c:	2300      	movs	r3, #0
   1286e:	4c06      	ldr	r4, [pc, #24]	; (12888 <gsm_echo_off+0x2c>)
   12870:	47a0      	blx	r4
   12872:	0003      	movs	r3, r0
}
   12874:	0018      	movs	r0, r3
   12876:	46bd      	mov	sp, r7
   12878:	b001      	add	sp, #4
   1287a:	bd90      	pop	{r4, r7, pc}
   1287c:	00001388 	.word	0x00001388
   12880:	0002a410 	.word	0x0002a410
   12884:	0002a544 	.word	0x0002a544
   12888:	000123ed 	.word	0x000123ed

0001288c <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
   1288c:	b590      	push	{r4, r7, lr}
   1288e:	b083      	sub	sp, #12
   12890:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12892:	4a06      	ldr	r2, [pc, #24]	; (128ac <gsm_select_sms_message_formate_text_mode+0x20>)
   12894:	4906      	ldr	r1, [pc, #24]	; (128b0 <gsm_select_sms_message_formate_text_mode+0x24>)
   12896:	4807      	ldr	r0, [pc, #28]	; (128b4 <gsm_select_sms_message_formate_text_mode+0x28>)
   12898:	2300      	movs	r3, #0
   1289a:	9300      	str	r3, [sp, #0]
   1289c:	2300      	movs	r3, #0
   1289e:	4c06      	ldr	r4, [pc, #24]	; (128b8 <gsm_select_sms_message_formate_text_mode+0x2c>)
   128a0:	47a0      	blx	r4
   128a2:	0003      	movs	r3, r0
}
   128a4:	0018      	movs	r0, r3
   128a6:	46bd      	mov	sp, r7
   128a8:	b001      	add	sp, #4
   128aa:	bd90      	pop	{r4, r7, pc}
   128ac:	00001388 	.word	0x00001388
   128b0:	0002a410 	.word	0x0002a410
   128b4:	0002a54c 	.word	0x0002a54c
   128b8:	000123ed 	.word	0x000123ed

000128bc <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
   128bc:	b590      	push	{r4, r7, lr}
   128be:	b083      	sub	sp, #12
   128c0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
   128c2:	4a06      	ldr	r2, [pc, #24]	; (128dc <gsm_set_sms_text_mode_parameter+0x20>)
   128c4:	4906      	ldr	r1, [pc, #24]	; (128e0 <gsm_set_sms_text_mode_parameter+0x24>)
   128c6:	4807      	ldr	r0, [pc, #28]	; (128e4 <gsm_set_sms_text_mode_parameter+0x28>)
   128c8:	2300      	movs	r3, #0
   128ca:	9300      	str	r3, [sp, #0]
   128cc:	2300      	movs	r3, #0
   128ce:	4c06      	ldr	r4, [pc, #24]	; (128e8 <gsm_set_sms_text_mode_parameter+0x2c>)
   128d0:	47a0      	blx	r4
   128d2:	0003      	movs	r3, r0
}
   128d4:	0018      	movs	r0, r3
   128d6:	46bd      	mov	sp, r7
   128d8:	b001      	add	sp, #4
   128da:	bd90      	pop	{r4, r7, pc}
   128dc:	00001b58 	.word	0x00001b58
   128e0:	0002a410 	.word	0x0002a410
   128e4:	0002a558 	.word	0x0002a558
   128e8:	000123ed 	.word	0x000123ed

000128ec <gsm_getsignalstrength>:
20--25   4
26--31   5

*/
uint8_t gsm_getsignalstrength(void)
{
   128ec:	b5b0      	push	{r4, r5, r7, lr}
   128ee:	b088      	sub	sp, #32
   128f0:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
   128f2:	2316      	movs	r3, #22
   128f4:	18fb      	adds	r3, r7, r3
   128f6:	2264      	movs	r2, #100	; 0x64
   128f8:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   128fa:	2316      	movs	r3, #22
   128fc:	18fb      	adds	r3, r7, r3
   128fe:	781b      	ldrb	r3, [r3, #0]
   12900:	2101      	movs	r1, #1
   12902:	0018      	movs	r0, r3
   12904:	4b62      	ldr	r3, [pc, #392]	; (12a90 <gsm_getsignalstrength+0x1a4>)
   12906:	4798      	blx	r3
   12908:	0003      	movs	r3, r0
   1290a:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
   1290c:	693b      	ldr	r3, [r7, #16]
   1290e:	2b00      	cmp	r3, #0
   12910:	d105      	bne.n	1291e <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
   12912:	693b      	ldr	r3, [r7, #16]
   12914:	0018      	movs	r0, r3
   12916:	4b5f      	ldr	r3, [pc, #380]	; (12a94 <gsm_getsignalstrength+0x1a8>)
   12918:	4798      	blx	r3
		return 0;
   1291a:	2300      	movs	r3, #0
   1291c:	e0b4      	b.n	12a88 <gsm_getsignalstrength+0x19c>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   1291e:	2316      	movs	r3, #22
   12920:	18fb      	adds	r3, r7, r3
   12922:	781a      	ldrb	r2, [r3, #0]
   12924:	693b      	ldr	r3, [r7, #16]
   12926:	2100      	movs	r1, #0
   12928:	0018      	movs	r0, r3
   1292a:	4b5b      	ldr	r3, [pc, #364]	; (12a98 <gsm_getsignalstrength+0x1ac>)
   1292c:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
   1292e:	230f      	movs	r3, #15
   12930:	18fc      	adds	r4, r7, r3
   12932:	2316      	movs	r3, #22
   12934:	18fb      	adds	r3, r7, r3
   12936:	781a      	ldrb	r2, [r3, #0]
   12938:	4d58      	ldr	r5, [pc, #352]	; (12a9c <gsm_getsignalstrength+0x1b0>)
   1293a:	4959      	ldr	r1, [pc, #356]	; (12aa0 <gsm_getsignalstrength+0x1b4>)
   1293c:	4859      	ldr	r0, [pc, #356]	; (12aa4 <gsm_getsignalstrength+0x1b8>)
   1293e:	693b      	ldr	r3, [r7, #16]
   12940:	9300      	str	r3, [sp, #0]
   12942:	0013      	movs	r3, r2
   12944:	002a      	movs	r2, r5
   12946:	4d58      	ldr	r5, [pc, #352]	; (12aa8 <gsm_getsignalstrength+0x1bc>)
   12948:	47a8      	blx	r5
   1294a:	0003      	movs	r3, r0
   1294c:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
   1294e:	230f      	movs	r3, #15
   12950:	18fb      	adds	r3, r7, r3
   12952:	781b      	ldrb	r3, [r3, #0]
   12954:	2b00      	cmp	r3, #0
   12956:	d000      	beq.n	1295a <gsm_getsignalstrength+0x6e>
   12958:	e08b      	b.n	12a72 <gsm_getsignalstrength+0x186>
	{
		if(strstr(cmdx,"+CSQ:"))
   1295a:	4a54      	ldr	r2, [pc, #336]	; (12aac <gsm_getsignalstrength+0x1c0>)
   1295c:	693b      	ldr	r3, [r7, #16]
   1295e:	0011      	movs	r1, r2
   12960:	0018      	movs	r0, r3
   12962:	4b53      	ldr	r3, [pc, #332]	; (12ab0 <gsm_getsignalstrength+0x1c4>)
   12964:	4798      	blx	r3
   12966:	1e03      	subs	r3, r0, #0
   12968:	d100      	bne.n	1296c <gsm_getsignalstrength+0x80>
   1296a:	e086      	b.n	12a7a <gsm_getsignalstrength+0x18e>
		{
			if (strstr(cmdx,"99")==NULL)
   1296c:	4a51      	ldr	r2, [pc, #324]	; (12ab4 <gsm_getsignalstrength+0x1c8>)
   1296e:	693b      	ldr	r3, [r7, #16]
   12970:	0011      	movs	r1, r2
   12972:	0018      	movs	r0, r3
   12974:	4b4e      	ldr	r3, [pc, #312]	; (12ab0 <gsm_getsignalstrength+0x1c4>)
   12976:	4798      	blx	r3
   12978:	1e03      	subs	r3, r0, #0
   1297a:	d000      	beq.n	1297e <gsm_getsignalstrength+0x92>
   1297c:	e074      	b.n	12a68 <gsm_getsignalstrength+0x17c>
			{
				char *ptr_tocken;
				ptr_tocken = strtok(cmdx,":");
   1297e:	4a4e      	ldr	r2, [pc, #312]	; (12ab8 <gsm_getsignalstrength+0x1cc>)
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	0011      	movs	r1, r2
   12984:	0018      	movs	r0, r3
   12986:	4b4d      	ldr	r3, [pc, #308]	; (12abc <gsm_getsignalstrength+0x1d0>)
   12988:	4798      	blx	r3
   1298a:	0003      	movs	r3, r0
   1298c:	60bb      	str	r3, [r7, #8]
				ptr_tocken = strtok(NULL,":");
   1298e:	4b4a      	ldr	r3, [pc, #296]	; (12ab8 <gsm_getsignalstrength+0x1cc>)
   12990:	0019      	movs	r1, r3
   12992:	2000      	movs	r0, #0
   12994:	4b49      	ldr	r3, [pc, #292]	; (12abc <gsm_getsignalstrength+0x1d0>)
   12996:	4798      	blx	r3
   12998:	0003      	movs	r3, r0
   1299a:	60bb      	str	r3, [r7, #8]
				ptr_tocken = strtok(ptr_tocken,",");
   1299c:	4a48      	ldr	r2, [pc, #288]	; (12ac0 <gsm_getsignalstrength+0x1d4>)
   1299e:	68bb      	ldr	r3, [r7, #8]
   129a0:	0011      	movs	r1, r2
   129a2:	0018      	movs	r0, r3
   129a4:	4b45      	ldr	r3, [pc, #276]	; (12abc <gsm_getsignalstrength+0x1d0>)
   129a6:	4798      	blx	r3
   129a8:	0003      	movs	r3, r0
   129aa:	60bb      	str	r3, [r7, #8]
				//RemoveSpaces(ptr_tocken);
				uint8_t nw = atoi(ptr_tocken);
   129ac:	68bb      	ldr	r3, [r7, #8]
   129ae:	0018      	movs	r0, r3
   129b0:	4b44      	ldr	r3, [pc, #272]	; (12ac4 <gsm_getsignalstrength+0x1d8>)
   129b2:	4798      	blx	r3
   129b4:	0002      	movs	r2, r0
   129b6:	1dfb      	adds	r3, r7, #7
   129b8:	701a      	strb	r2, [r3, #0]
				if (nw==0 || nw==1 || nw== 99)
   129ba:	1dfb      	adds	r3, r7, #7
   129bc:	781b      	ldrb	r3, [r3, #0]
   129be:	2b00      	cmp	r3, #0
   129c0:	d007      	beq.n	129d2 <gsm_getsignalstrength+0xe6>
   129c2:	1dfb      	adds	r3, r7, #7
   129c4:	781b      	ldrb	r3, [r3, #0]
   129c6:	2b01      	cmp	r3, #1
   129c8:	d003      	beq.n	129d2 <gsm_getsignalstrength+0xe6>
   129ca:	1dfb      	adds	r3, r7, #7
   129cc:	781b      	ldrb	r3, [r3, #0]
   129ce:	2b63      	cmp	r3, #99	; 0x63
   129d0:	d104      	bne.n	129dc <gsm_getsignalstrength+0xf0>
				{
					sig_strength = 0;
   129d2:	2317      	movs	r3, #23
   129d4:	18fb      	adds	r3, r7, r3
   129d6:	2200      	movs	r2, #0
   129d8:	701a      	strb	r2, [r3, #0]
   129da:	e04e      	b.n	12a7a <gsm_getsignalstrength+0x18e>
				}
				else
				{
					if (nw>=2 && nw<=7)
   129dc:	1dfb      	adds	r3, r7, #7
   129de:	781b      	ldrb	r3, [r3, #0]
   129e0:	2b01      	cmp	r3, #1
   129e2:	d908      	bls.n	129f6 <gsm_getsignalstrength+0x10a>
   129e4:	1dfb      	adds	r3, r7, #7
   129e6:	781b      	ldrb	r3, [r3, #0]
   129e8:	2b07      	cmp	r3, #7
   129ea:	d804      	bhi.n	129f6 <gsm_getsignalstrength+0x10a>
					{
						sig_strength = 1;
   129ec:	2317      	movs	r3, #23
   129ee:	18fb      	adds	r3, r7, r3
   129f0:	2201      	movs	r2, #1
   129f2:	701a      	strb	r2, [r3, #0]
   129f4:	e041      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=8 && nw<=13)
   129f6:	1dfb      	adds	r3, r7, #7
   129f8:	781b      	ldrb	r3, [r3, #0]
   129fa:	2b07      	cmp	r3, #7
   129fc:	d908      	bls.n	12a10 <gsm_getsignalstrength+0x124>
   129fe:	1dfb      	adds	r3, r7, #7
   12a00:	781b      	ldrb	r3, [r3, #0]
   12a02:	2b0d      	cmp	r3, #13
   12a04:	d804      	bhi.n	12a10 <gsm_getsignalstrength+0x124>
					{
						sig_strength = 2;
   12a06:	2317      	movs	r3, #23
   12a08:	18fb      	adds	r3, r7, r3
   12a0a:	2202      	movs	r2, #2
   12a0c:	701a      	strb	r2, [r3, #0]
   12a0e:	e034      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=14 && nw<=19)
   12a10:	1dfb      	adds	r3, r7, #7
   12a12:	781b      	ldrb	r3, [r3, #0]
   12a14:	2b0d      	cmp	r3, #13
   12a16:	d908      	bls.n	12a2a <gsm_getsignalstrength+0x13e>
   12a18:	1dfb      	adds	r3, r7, #7
   12a1a:	781b      	ldrb	r3, [r3, #0]
   12a1c:	2b13      	cmp	r3, #19
   12a1e:	d804      	bhi.n	12a2a <gsm_getsignalstrength+0x13e>
					{
						sig_strength = 3;
   12a20:	2317      	movs	r3, #23
   12a22:	18fb      	adds	r3, r7, r3
   12a24:	2203      	movs	r2, #3
   12a26:	701a      	strb	r2, [r3, #0]
   12a28:	e027      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=20 && nw<=25)
   12a2a:	1dfb      	adds	r3, r7, #7
   12a2c:	781b      	ldrb	r3, [r3, #0]
   12a2e:	2b13      	cmp	r3, #19
   12a30:	d908      	bls.n	12a44 <gsm_getsignalstrength+0x158>
   12a32:	1dfb      	adds	r3, r7, #7
   12a34:	781b      	ldrb	r3, [r3, #0]
   12a36:	2b19      	cmp	r3, #25
   12a38:	d804      	bhi.n	12a44 <gsm_getsignalstrength+0x158>
					{
						sig_strength = 4;
   12a3a:	2317      	movs	r3, #23
   12a3c:	18fb      	adds	r3, r7, r3
   12a3e:	2204      	movs	r2, #4
   12a40:	701a      	strb	r2, [r3, #0]
   12a42:	e01a      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=26 && nw<=31)
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	2b19      	cmp	r3, #25
   12a4a:	d908      	bls.n	12a5e <gsm_getsignalstrength+0x172>
   12a4c:	1dfb      	adds	r3, r7, #7
   12a4e:	781b      	ldrb	r3, [r3, #0]
   12a50:	2b1f      	cmp	r3, #31
   12a52:	d804      	bhi.n	12a5e <gsm_getsignalstrength+0x172>
					{
						sig_strength = 5;
   12a54:	2317      	movs	r3, #23
   12a56:	18fb      	adds	r3, r7, r3
   12a58:	2205      	movs	r2, #5
   12a5a:	701a      	strb	r2, [r3, #0]
   12a5c:	e00d      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
					else
					{
						sig_strength = 0;
   12a5e:	2317      	movs	r3, #23
   12a60:	18fb      	adds	r3, r7, r3
   12a62:	2200      	movs	r2, #0
   12a64:	701a      	strb	r2, [r3, #0]
   12a66:	e008      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
				}
			}
			else
			{
				sig_strength = 0;
   12a68:	2317      	movs	r3, #23
   12a6a:	18fb      	adds	r3, r7, r3
   12a6c:	2200      	movs	r2, #0
   12a6e:	701a      	strb	r2, [r3, #0]
   12a70:	e003      	b.n	12a7a <gsm_getsignalstrength+0x18e>
			}
		}
	}
	else
	{
		sig_strength = 0;
   12a72:	2317      	movs	r3, #23
   12a74:	18fb      	adds	r3, r7, r3
   12a76:	2200      	movs	r2, #0
   12a78:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
   12a7a:	693b      	ldr	r3, [r7, #16]
   12a7c:	0018      	movs	r0, r3
   12a7e:	4b05      	ldr	r3, [pc, #20]	; (12a94 <gsm_getsignalstrength+0x1a8>)
   12a80:	4798      	blx	r3
	
	return sig_strength;
   12a82:	2317      	movs	r3, #23
   12a84:	18fb      	adds	r3, r7, r3
   12a86:	781b      	ldrb	r3, [r3, #0]
}
   12a88:	0018      	movs	r0, r3
   12a8a:	46bd      	mov	sp, r7
   12a8c:	b006      	add	sp, #24
   12a8e:	bdb0      	pop	{r4, r5, r7, pc}
   12a90:	0002964d 	.word	0x0002964d
   12a94:	000296ed 	.word	0x000296ed
   12a98:	0002975b 	.word	0x0002975b
   12a9c:	00001388 	.word	0x00001388
   12aa0:	0002a410 	.word	0x0002a410
   12aa4:	0002a584 	.word	0x0002a584
   12aa8:	000123ed 	.word	0x000123ed
   12aac:	0002a58c 	.word	0x0002a58c
   12ab0:	00029a1b 	.word	0x00029a1b
   12ab4:	0002a594 	.word	0x0002a594
   12ab8:	0002a528 	.word	0x0002a528
   12abc:	00029a4d 	.word	0x00029a4d
   12ac0:	0002a52c 	.word	0x0002a52c
   12ac4:	00029641 	.word	0x00029641

00012ac8 <RemoveSpaces>:

void RemoveSpaces(char* source)
{
   12ac8:	b580      	push	{r7, lr}
   12aca:	b084      	sub	sp, #16
   12acc:	af00      	add	r7, sp, #0
   12ace:	6078      	str	r0, [r7, #4]
	char* i = source;
   12ad0:	687b      	ldr	r3, [r7, #4]
   12ad2:	60fb      	str	r3, [r7, #12]
	char* j = source;
   12ad4:	687b      	ldr	r3, [r7, #4]
   12ad6:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
   12ad8:	e00c      	b.n	12af4 <RemoveSpaces+0x2c>
	{
		*i = *j++;
   12ada:	68bb      	ldr	r3, [r7, #8]
   12adc:	1c5a      	adds	r2, r3, #1
   12ade:	60ba      	str	r2, [r7, #8]
   12ae0:	781a      	ldrb	r2, [r3, #0]
   12ae2:	68fb      	ldr	r3, [r7, #12]
   12ae4:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
   12ae6:	68fb      	ldr	r3, [r7, #12]
   12ae8:	781b      	ldrb	r3, [r3, #0]
   12aea:	2b20      	cmp	r3, #32
   12aec:	d002      	beq.n	12af4 <RemoveSpaces+0x2c>
		i++;
   12aee:	68fb      	ldr	r3, [r7, #12]
   12af0:	3301      	adds	r3, #1
   12af2:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
   12af4:	68bb      	ldr	r3, [r7, #8]
   12af6:	781b      	ldrb	r3, [r3, #0]
   12af8:	2b00      	cmp	r3, #0
   12afa:	d1ee      	bne.n	12ada <RemoveSpaces+0x12>
	}
	*i = 0;
   12afc:	68fb      	ldr	r3, [r7, #12]
   12afe:	2200      	movs	r2, #0
   12b00:	701a      	strb	r2, [r3, #0]
}
   12b02:	46c0      	nop			; (mov r8, r8)
   12b04:	46bd      	mov	sp, r7
   12b06:	b004      	add	sp, #16
   12b08:	bd80      	pop	{r7, pc}
	...

00012b0c <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
   12b0c:	b590      	push	{r4, r7, lr}
   12b0e:	b083      	sub	sp, #12
   12b10:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
   12b12:	4a06      	ldr	r2, [pc, #24]	; (12b2c <gsm_enable_new_sms_message_indications+0x20>)
   12b14:	4906      	ldr	r1, [pc, #24]	; (12b30 <gsm_enable_new_sms_message_indications+0x24>)
   12b16:	4807      	ldr	r0, [pc, #28]	; (12b34 <gsm_enable_new_sms_message_indications+0x28>)
   12b18:	2300      	movs	r3, #0
   12b1a:	9300      	str	r3, [sp, #0]
   12b1c:	2300      	movs	r3, #0
   12b1e:	4c06      	ldr	r4, [pc, #24]	; (12b38 <gsm_enable_new_sms_message_indications+0x2c>)
   12b20:	47a0      	blx	r4
   12b22:	0003      	movs	r3, r0
}
   12b24:	0018      	movs	r0, r3
   12b26:	46bd      	mov	sp, r7
   12b28:	b001      	add	sp, #4
   12b2a:	bd90      	pop	{r4, r7, pc}
   12b2c:	00001388 	.word	0x00001388
   12b30:	0002a410 	.word	0x0002a410
   12b34:	0002a598 	.word	0x0002a598
   12b38:	000123ed 	.word	0x000123ed

00012b3c <gsm_enable_csqn_urc>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_enable_csqn_urc(void)
{
   12b3c:	b590      	push	{r4, r7, lr}
   12b3e:	b083      	sub	sp, #12
   12b40:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+EXUNSOL=\"SQ\",1\r"), (const char*)RESPONS_OK,1000,0,NULL);
   12b42:	23fa      	movs	r3, #250	; 0xfa
   12b44:	009a      	lsls	r2, r3, #2
   12b46:	4906      	ldr	r1, [pc, #24]	; (12b60 <gsm_enable_csqn_urc+0x24>)
   12b48:	4806      	ldr	r0, [pc, #24]	; (12b64 <gsm_enable_csqn_urc+0x28>)
   12b4a:	2300      	movs	r3, #0
   12b4c:	9300      	str	r3, [sp, #0]
   12b4e:	2300      	movs	r3, #0
   12b50:	4c05      	ldr	r4, [pc, #20]	; (12b68 <gsm_enable_csqn_urc+0x2c>)
   12b52:	47a0      	blx	r4
   12b54:	0003      	movs	r3, r0
}
   12b56:	0018      	movs	r0, r3
   12b58:	46bd      	mov	sp, r7
   12b5a:	b001      	add	sp, #4
   12b5c:	bd90      	pop	{r4, r7, pc}
   12b5e:	46c0      	nop			; (mov r8, r8)
   12b60:	0002a410 	.word	0x0002a410
   12b64:	0002a5c0 	.word	0x0002a5c0
   12b68:	000123ed 	.word	0x000123ed

00012b6c <gsm_disable_csqn_urc>:

enum gsm_error gsm_disable_csqn_urc(void)
{
   12b6c:	b590      	push	{r4, r7, lr}
   12b6e:	b083      	sub	sp, #12
   12b70:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+EXUNSOL=\"SQ\",0\r"), (const char*)RESPONS_OK,1000,0,NULL);
   12b72:	23fa      	movs	r3, #250	; 0xfa
   12b74:	009a      	lsls	r2, r3, #2
   12b76:	4906      	ldr	r1, [pc, #24]	; (12b90 <gsm_disable_csqn_urc+0x24>)
   12b78:	4806      	ldr	r0, [pc, #24]	; (12b94 <gsm_disable_csqn_urc+0x28>)
   12b7a:	2300      	movs	r3, #0
   12b7c:	9300      	str	r3, [sp, #0]
   12b7e:	2300      	movs	r3, #0
   12b80:	4c05      	ldr	r4, [pc, #20]	; (12b98 <gsm_disable_csqn_urc+0x2c>)
   12b82:	47a0      	blx	r4
   12b84:	0003      	movs	r3, r0
}
   12b86:	0018      	movs	r0, r3
   12b88:	46bd      	mov	sp, r7
   12b8a:	b001      	add	sp, #4
   12b8c:	bd90      	pop	{r4, r7, pc}
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	0002a410 	.word	0x0002a410
   12b94:	0002a5d4 	.word	0x0002a5d4
   12b98:	000123ed 	.word	0x000123ed

00012b9c <gsm_send_sms>:


enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
   12b9c:	b5b0      	push	{r4, r5, r7, lr}
   12b9e:	b088      	sub	sp, #32
   12ba0:	af02      	add	r7, sp, #8
   12ba2:	6078      	str	r0, [r7, #4]
   12ba4:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250)
   12ba6:	683b      	ldr	r3, [r7, #0]
   12ba8:	0018      	movs	r0, r3
   12baa:	4b3b      	ldr	r3, [pc, #236]	; (12c98 <gsm_send_sms+0xfc>)
   12bac:	4798      	blx	r3
   12bae:	0003      	movs	r3, r0
   12bb0:	2bfa      	cmp	r3, #250	; 0xfa
   12bb2:	d901      	bls.n	12bb8 <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
   12bb4:	2303      	movs	r3, #3
   12bb6:	e06b      	b.n	12c90 <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6)
   12bb8:	687b      	ldr	r3, [r7, #4]
   12bba:	0018      	movs	r0, r3
   12bbc:	4b36      	ldr	r3, [pc, #216]	; (12c98 <gsm_send_sms+0xfc>)
   12bbe:	4798      	blx	r3
   12bc0:	0003      	movs	r3, r0
   12bc2:	2b05      	cmp	r3, #5
   12bc4:	d801      	bhi.n	12bca <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
   12bc6:	2304      	movs	r3, #4
   12bc8:	e062      	b.n	12c90 <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
   12bca:	2317      	movs	r3, #23
   12bcc:	18fb      	adds	r3, r7, r3
   12bce:	22fa      	movs	r2, #250	; 0xfa
   12bd0:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12bd2:	2317      	movs	r3, #23
   12bd4:	18fb      	adds	r3, r7, r3
   12bd6:	781b      	ldrb	r3, [r3, #0]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2f      	ldr	r3, [pc, #188]	; (12c9c <gsm_send_sms+0x100>)
   12bde:	4798      	blx	r3
   12be0:	0003      	movs	r3, r0
   12be2:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
   12be4:	693b      	ldr	r3, [r7, #16]
   12be6:	2b00      	cmp	r3, #0
   12be8:	d101      	bne.n	12bee <gsm_send_sms+0x52>
	{
		return 0;
   12bea:	2300      	movs	r3, #0
   12bec:	e050      	b.n	12c90 <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12bee:	2317      	movs	r3, #23
   12bf0:	18fb      	adds	r3, r7, r3
   12bf2:	781a      	ldrb	r2, [r3, #0]
   12bf4:	693b      	ldr	r3, [r7, #16]
   12bf6:	2100      	movs	r1, #0
   12bf8:	0018      	movs	r0, r3
   12bfa:	4b29      	ldr	r3, [pc, #164]	; (12ca0 <gsm_send_sms+0x104>)
   12bfc:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
   12bfe:	2317      	movs	r3, #23
   12c00:	18fb      	adds	r3, r7, r3
   12c02:	7819      	ldrb	r1, [r3, #0]
   12c04:	687b      	ldr	r3, [r7, #4]
   12c06:	4a27      	ldr	r2, [pc, #156]	; (12ca4 <gsm_send_sms+0x108>)
   12c08:	6938      	ldr	r0, [r7, #16]
   12c0a:	4c27      	ldr	r4, [pc, #156]	; (12ca8 <gsm_send_sms+0x10c>)
   12c0c:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
   12c0e:	4a27      	ldr	r2, [pc, #156]	; (12cac <gsm_send_sms+0x110>)
   12c10:	4927      	ldr	r1, [pc, #156]	; (12cb0 <gsm_send_sms+0x114>)
   12c12:	6938      	ldr	r0, [r7, #16]
   12c14:	2300      	movs	r3, #0
   12c16:	9300      	str	r3, [sp, #0]
   12c18:	2300      	movs	r3, #0
   12c1a:	4c26      	ldr	r4, [pc, #152]	; (12cb4 <gsm_send_sms+0x118>)
   12c1c:	47a0      	blx	r4
   12c1e:	1e03      	subs	r3, r0, #0
   12c20:	d131      	bne.n	12c86 <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
   12c22:	23fa      	movs	r3, #250	; 0xfa
   12c24:	005b      	lsls	r3, r3, #1
   12c26:	0018      	movs	r0, r3
   12c28:	4b23      	ldr	r3, [pc, #140]	; (12cb8 <gsm_send_sms+0x11c>)
   12c2a:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
   12c2c:	2317      	movs	r3, #23
   12c2e:	18fb      	adds	r3, r7, r3
   12c30:	781a      	ldrb	r2, [r3, #0]
   12c32:	693b      	ldr	r3, [r7, #16]
   12c34:	2100      	movs	r1, #0
   12c36:	0018      	movs	r0, r3
   12c38:	4b19      	ldr	r3, [pc, #100]	; (12ca0 <gsm_send_sms+0x104>)
   12c3a:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
   12c3c:	2317      	movs	r3, #23
   12c3e:	18fb      	adds	r3, r7, r3
   12c40:	7819      	ldrb	r1, [r3, #0]
   12c42:	683b      	ldr	r3, [r7, #0]
   12c44:	4a1d      	ldr	r2, [pc, #116]	; (12cbc <gsm_send_sms+0x120>)
   12c46:	6938      	ldr	r0, [r7, #16]
   12c48:	4c17      	ldr	r4, [pc, #92]	; (12ca8 <gsm_send_sms+0x10c>)
   12c4a:	47a0      	blx	r4
		
		err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
   12c4c:	230f      	movs	r3, #15
   12c4e:	18fc      	adds	r4, r7, r3
   12c50:	4a16      	ldr	r2, [pc, #88]	; (12cac <gsm_send_sms+0x110>)
   12c52:	491b      	ldr	r1, [pc, #108]	; (12cc0 <gsm_send_sms+0x124>)
   12c54:	6938      	ldr	r0, [r7, #16]
   12c56:	2300      	movs	r3, #0
   12c58:	9300      	str	r3, [sp, #0]
   12c5a:	2300      	movs	r3, #0
   12c5c:	4d15      	ldr	r5, [pc, #84]	; (12cb4 <gsm_send_sms+0x118>)
   12c5e:	47a8      	blx	r5
   12c60:	0003      	movs	r3, r0
   12c62:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
   12c64:	230f      	movs	r3, #15
   12c66:	18fb      	adds	r3, r7, r3
   12c68:	781b      	ldrb	r3, [r3, #0]
   12c6a:	2b00      	cmp	r3, #0
   12c6c:	d105      	bne.n	12c7a <gsm_send_sms+0xde>
		{
			free(cmdx);
   12c6e:	693b      	ldr	r3, [r7, #16]
   12c70:	0018      	movs	r0, r3
   12c72:	4b14      	ldr	r3, [pc, #80]	; (12cc4 <gsm_send_sms+0x128>)
   12c74:	4798      	blx	r3
			return GSM_ERROR_NONE;
   12c76:	2300      	movs	r3, #0
   12c78:	e00a      	b.n	12c90 <gsm_send_sms+0xf4>
		}
		else
		{
			free(cmdx);
   12c7a:	693b      	ldr	r3, [r7, #16]
   12c7c:	0018      	movs	r0, r3
   12c7e:	4b11      	ldr	r3, [pc, #68]	; (12cc4 <gsm_send_sms+0x128>)
   12c80:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
   12c82:	2306      	movs	r3, #6
   12c84:	e004      	b.n	12c90 <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
   12c86:	693b      	ldr	r3, [r7, #16]
   12c88:	0018      	movs	r0, r3
   12c8a:	4b0e      	ldr	r3, [pc, #56]	; (12cc4 <gsm_send_sms+0x128>)
   12c8c:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
   12c8e:	2306      	movs	r3, #6
	}
}
   12c90:	0018      	movs	r0, r3
   12c92:	46bd      	mov	sp, r7
   12c94:	b006      	add	sp, #24
   12c96:	bdb0      	pop	{r4, r5, r7, pc}
   12c98:	000299eb 	.word	0x000299eb
   12c9c:	0002964d 	.word	0x0002964d
   12ca0:	0002975b 	.word	0x0002975b
   12ca4:	0002a5e8 	.word	0x0002a5e8
   12ca8:	000298fd 	.word	0x000298fd
   12cac:	0000ea60 	.word	0x0000ea60
   12cb0:	0002a5f8 	.word	0x0002a5f8
   12cb4:	000123ed 	.word	0x000123ed
   12cb8:	00020a49 	.word	0x00020a49
   12cbc:	0002a5fc 	.word	0x0002a5fc
   12cc0:	0002a410 	.word	0x0002a410
   12cc4:	000296ed 	.word	0x000296ed

00012cc8 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
   12cc8:	b590      	push	{r4, r7, lr}
   12cca:	b08f      	sub	sp, #60	; 0x3c
   12ccc:	af02      	add	r7, sp, #8
   12cce:	60b9      	str	r1, [r7, #8]
   12cd0:	0011      	movs	r1, r2
   12cd2:	607b      	str	r3, [r7, #4]
   12cd4:	230f      	movs	r3, #15
   12cd6:	18fb      	adds	r3, r7, r3
   12cd8:	1c02      	adds	r2, r0, #0
   12cda:	701a      	strb	r2, [r3, #0]
   12cdc:	230e      	movs	r3, #14
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	1c0a      	adds	r2, r1, #0
   12ce2:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
   12ce4:	232f      	movs	r3, #47	; 0x2f
   12ce6:	18fb      	adds	r3, r7, r3
   12ce8:	22e6      	movs	r2, #230	; 0xe6
   12cea:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12cec:	232f      	movs	r3, #47	; 0x2f
   12cee:	18fb      	adds	r3, r7, r3
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	2101      	movs	r1, #1
   12cf4:	0018      	movs	r0, r3
   12cf6:	4b6e      	ldr	r3, [pc, #440]	; (12eb0 <gsm_read_sms+0x1e8>)
   12cf8:	4798      	blx	r3
   12cfa:	0003      	movs	r3, r0
   12cfc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
   12cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d00:	2b00      	cmp	r3, #0
   12d02:	d105      	bne.n	12d10 <gsm_read_sms+0x48>
	{
		free(cmdx);
   12d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d06:	0018      	movs	r0, r3
   12d08:	4b6a      	ldr	r3, [pc, #424]	; (12eb4 <gsm_read_sms+0x1ec>)
   12d0a:	4798      	blx	r3
		return 0;
   12d0c:	2300      	movs	r3, #0
   12d0e:	e0ca      	b.n	12ea6 <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12d10:	232f      	movs	r3, #47	; 0x2f
   12d12:	18fb      	adds	r3, r7, r3
   12d14:	781a      	ldrb	r2, [r3, #0]
   12d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d18:	2100      	movs	r1, #0
   12d1a:	0018      	movs	r0, r3
   12d1c:	4b66      	ldr	r3, [pc, #408]	; (12eb8 <gsm_read_sms+0x1f0>)
   12d1e:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
   12d20:	2310      	movs	r3, #16
   12d22:	18fb      	adds	r3, r7, r3
   12d24:	0018      	movs	r0, r3
   12d26:	230a      	movs	r3, #10
   12d28:	001a      	movs	r2, r3
   12d2a:	2100      	movs	r1, #0
   12d2c:	4b62      	ldr	r3, [pc, #392]	; (12eb8 <gsm_read_sms+0x1f0>)
   12d2e:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
   12d30:	232f      	movs	r3, #47	; 0x2f
   12d32:	18fb      	adds	r3, r7, r3
   12d34:	7819      	ldrb	r1, [r3, #0]
   12d36:	230f      	movs	r3, #15
   12d38:	18fb      	adds	r3, r7, r3
   12d3a:	781b      	ldrb	r3, [r3, #0]
   12d3c:	4a5f      	ldr	r2, [pc, #380]	; (12ebc <gsm_read_sms+0x1f4>)
   12d3e:	2010      	movs	r0, #16
   12d40:	1838      	adds	r0, r7, r0
   12d42:	4c5f      	ldr	r4, [pc, #380]	; (12ec0 <gsm_read_sms+0x1f8>)
   12d44:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
   12d46:	232f      	movs	r3, #47	; 0x2f
   12d48:	18fb      	adds	r3, r7, r3
   12d4a:	781a      	ldrb	r2, [r3, #0]
   12d4c:	4c5d      	ldr	r4, [pc, #372]	; (12ec4 <gsm_read_sms+0x1fc>)
   12d4e:	495e      	ldr	r1, [pc, #376]	; (12ec8 <gsm_read_sms+0x200>)
   12d50:	2310      	movs	r3, #16
   12d52:	18f8      	adds	r0, r7, r3
   12d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d56:	9300      	str	r3, [sp, #0]
   12d58:	0013      	movs	r3, r2
   12d5a:	0022      	movs	r2, r4
   12d5c:	4c5b      	ldr	r4, [pc, #364]	; (12ecc <gsm_read_sms+0x204>)
   12d5e:	47a0      	blx	r4
   12d60:	1e03      	subs	r3, r0, #0
   12d62:	d000      	beq.n	12d66 <gsm_read_sms+0x9e>
   12d64:	e094      	b.n	12e90 <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
   12d66:	4a5a      	ldr	r2, [pc, #360]	; (12ed0 <gsm_read_sms+0x208>)
   12d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d6a:	0011      	movs	r1, r2
   12d6c:	0018      	movs	r0, r3
   12d6e:	4b59      	ldr	r3, [pc, #356]	; (12ed4 <gsm_read_sms+0x20c>)
   12d70:	4798      	blx	r3
   12d72:	0003      	movs	r3, r0
   12d74:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
   12d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d78:	2b00      	cmp	r3, #0
   12d7a:	d100      	bne.n	12d7e <gsm_read_sms+0xb6>
   12d7c:	e082      	b.n	12e84 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
   12d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d80:	212c      	movs	r1, #44	; 0x2c
   12d82:	0018      	movs	r0, r3
   12d84:	4b54      	ldr	r3, [pc, #336]	; (12ed8 <gsm_read_sms+0x210>)
   12d86:	4798      	blx	r3
   12d88:	0003      	movs	r3, r0
   12d8a:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
   12d8c:	6a3b      	ldr	r3, [r7, #32]
   12d8e:	3302      	adds	r3, #2
   12d90:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
   12d92:	69fb      	ldr	r3, [r7, #28]
   12d94:	2122      	movs	r1, #34	; 0x22
   12d96:	0018      	movs	r0, r3
   12d98:	4b4f      	ldr	r3, [pc, #316]	; (12ed8 <gsm_read_sms+0x210>)
   12d9a:	4798      	blx	r3
   12d9c:	0003      	movs	r3, r0
   12d9e:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
   12da0:	6a3b      	ldr	r3, [r7, #32]
   12da2:	2b00      	cmp	r3, #0
   12da4:	d02a      	beq.n	12dfc <gsm_read_sms+0x134>
			{
				*p_char = 0;
   12da6:	6a3b      	ldr	r3, [r7, #32]
   12da8:	2200      	movs	r2, #0
   12daa:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
   12dac:	69fb      	ldr	r3, [r7, #28]
   12dae:	0018      	movs	r0, r3
   12db0:	4b4a      	ldr	r3, [pc, #296]	; (12edc <gsm_read_sms+0x214>)
   12db2:	4798      	blx	r3
   12db4:	0002      	movs	r2, r0
   12db6:	231b      	movs	r3, #27
   12db8:	18fb      	adds	r3, r7, r3
   12dba:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
   12dbc:	231b      	movs	r3, #27
   12dbe:	18fa      	adds	r2, r7, r3
   12dc0:	230e      	movs	r3, #14
   12dc2:	18fb      	adds	r3, r7, r3
   12dc4:	7812      	ldrb	r2, [r2, #0]
   12dc6:	781b      	ldrb	r3, [r3, #0]
   12dc8:	429a      	cmp	r2, r3
   12dca:	d206      	bcs.n	12dda <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
   12dcc:	69fa      	ldr	r2, [r7, #28]
   12dce:	68bb      	ldr	r3, [r7, #8]
   12dd0:	0011      	movs	r1, r2
   12dd2:	0018      	movs	r0, r3
   12dd4:	4b42      	ldr	r3, [pc, #264]	; (12ee0 <gsm_read_sms+0x218>)
   12dd6:	4798      	blx	r3
   12dd8:	e010      	b.n	12dfc <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
   12dda:	230e      	movs	r3, #14
   12ddc:	18fb      	adds	r3, r7, r3
   12dde:	781b      	ldrb	r3, [r3, #0]
   12de0:	3b01      	subs	r3, #1
   12de2:	001a      	movs	r2, r3
   12de4:	69f9      	ldr	r1, [r7, #28]
   12de6:	68bb      	ldr	r3, [r7, #8]
   12de8:	0018      	movs	r0, r3
   12dea:	4b3e      	ldr	r3, [pc, #248]	; (12ee4 <gsm_read_sms+0x21c>)
   12dec:	4798      	blx	r3
					phone_number[max_phone_len]=0;
   12dee:	230e      	movs	r3, #14
   12df0:	18fb      	adds	r3, r7, r3
   12df2:	781b      	ldrb	r3, [r3, #0]
   12df4:	68ba      	ldr	r2, [r7, #8]
   12df6:	18d3      	adds	r3, r2, r3
   12df8:	2200      	movs	r2, #0
   12dfa:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
   12dfc:	6a3b      	ldr	r3, [r7, #32]
   12dfe:	3301      	adds	r3, #1
   12e00:	210a      	movs	r1, #10
   12e02:	0018      	movs	r0, r3
   12e04:	4b34      	ldr	r3, [pc, #208]	; (12ed8 <gsm_read_sms+0x210>)
   12e06:	4798      	blx	r3
   12e08:	0003      	movs	r3, r0
   12e0a:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
   12e0c:	6a3b      	ldr	r3, [r7, #32]
   12e0e:	2b00      	cmp	r3, #0
   12e10:	d044      	beq.n	12e9c <gsm_read_sms+0x1d4>
			{
				p_char++;
   12e12:	6a3b      	ldr	r3, [r7, #32]
   12e14:	3301      	adds	r3, #1
   12e16:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
   12e18:	6a3b      	ldr	r3, [r7, #32]
   12e1a:	210d      	movs	r1, #13
   12e1c:	0018      	movs	r0, r3
   12e1e:	4b2e      	ldr	r3, [pc, #184]	; (12ed8 <gsm_read_sms+0x210>)
   12e20:	4798      	blx	r3
   12e22:	0003      	movs	r3, r0
   12e24:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
   12e26:	69fb      	ldr	r3, [r7, #28]
   12e28:	2b00      	cmp	r3, #0
   12e2a:	d002      	beq.n	12e32 <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
   12e2c:	69fb      	ldr	r3, [r7, #28]
   12e2e:	2200      	movs	r2, #0
   12e30:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
   12e32:	6a3b      	ldr	r3, [r7, #32]
   12e34:	0018      	movs	r0, r3
   12e36:	4b29      	ldr	r3, [pc, #164]	; (12edc <gsm_read_sms+0x214>)
   12e38:	4798      	blx	r3
   12e3a:	0002      	movs	r2, r0
   12e3c:	231b      	movs	r3, #27
   12e3e:	18fb      	adds	r3, r7, r3
   12e40:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
   12e42:	231b      	movs	r3, #27
   12e44:	18fb      	adds	r3, r7, r3
   12e46:	2240      	movs	r2, #64	; 0x40
   12e48:	18b9      	adds	r1, r7, r2
   12e4a:	781a      	ldrb	r2, [r3, #0]
   12e4c:	780b      	ldrb	r3, [r1, #0]
   12e4e:	429a      	cmp	r2, r3
   12e50:	d206      	bcs.n	12e60 <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
   12e52:	6a3a      	ldr	r2, [r7, #32]
   12e54:	687b      	ldr	r3, [r7, #4]
   12e56:	0011      	movs	r1, r2
   12e58:	0018      	movs	r0, r3
   12e5a:	4b21      	ldr	r3, [pc, #132]	; (12ee0 <gsm_read_sms+0x218>)
   12e5c:	4798      	blx	r3
   12e5e:	e01d      	b.n	12e9c <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
   12e60:	2340      	movs	r3, #64	; 0x40
   12e62:	18fb      	adds	r3, r7, r3
   12e64:	781b      	ldrb	r3, [r3, #0]
   12e66:	3b01      	subs	r3, #1
   12e68:	001a      	movs	r2, r3
   12e6a:	6a39      	ldr	r1, [r7, #32]
   12e6c:	687b      	ldr	r3, [r7, #4]
   12e6e:	0018      	movs	r0, r3
   12e70:	4b1c      	ldr	r3, [pc, #112]	; (12ee4 <gsm_read_sms+0x21c>)
   12e72:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
   12e74:	2340      	movs	r3, #64	; 0x40
   12e76:	18fb      	adds	r3, r7, r3
   12e78:	781b      	ldrb	r3, [r3, #0]
   12e7a:	687a      	ldr	r2, [r7, #4]
   12e7c:	18d3      	adds	r3, r2, r3
   12e7e:	2200      	movs	r2, #0
   12e80:	701a      	strb	r2, [r3, #0]
   12e82:	e00b      	b.n	12e9c <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
   12e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e86:	0018      	movs	r0, r3
   12e88:	4b0a      	ldr	r3, [pc, #40]	; (12eb4 <gsm_read_sms+0x1ec>)
   12e8a:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e8c:	230c      	movs	r3, #12
   12e8e:	e00a      	b.n	12ea6 <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
   12e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e92:	0018      	movs	r0, r3
   12e94:	4b07      	ldr	r3, [pc, #28]	; (12eb4 <gsm_read_sms+0x1ec>)
   12e96:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e98:	230c      	movs	r3, #12
   12e9a:	e004      	b.n	12ea6 <gsm_read_sms+0x1de>
	}
	free(cmdx);
   12e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e9e:	0018      	movs	r0, r3
   12ea0:	4b04      	ldr	r3, [pc, #16]	; (12eb4 <gsm_read_sms+0x1ec>)
   12ea2:	4798      	blx	r3
	return GSM_ERROR_NONE;
   12ea4:	2300      	movs	r3, #0
}
   12ea6:	0018      	movs	r0, r3
   12ea8:	46bd      	mov	sp, r7
   12eaa:	b00d      	add	sp, #52	; 0x34
   12eac:	bd90      	pop	{r4, r7, pc}
   12eae:	46c0      	nop			; (mov r8, r8)
   12eb0:	0002964d 	.word	0x0002964d
   12eb4:	000296ed 	.word	0x000296ed
   12eb8:	0002975b 	.word	0x0002975b
   12ebc:	0002a648 	.word	0x0002a648
   12ec0:	000298fd 	.word	0x000298fd
   12ec4:	00001388 	.word	0x00001388
   12ec8:	0002a410 	.word	0x0002a410
   12ecc:	000123ed 	.word	0x000123ed
   12ed0:	0002a654 	.word	0x0002a654
   12ed4:	00029a1b 	.word	0x00029a1b
   12ed8:	000299bf 	.word	0x000299bf
   12edc:	000299eb 	.word	0x000299eb
   12ee0:	000299db 	.word	0x000299db
   12ee4:	00029725 	.word	0x00029725

00012ee8 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
   12ee8:	b5b0      	push	{r4, r5, r7, lr}
   12eea:	b088      	sub	sp, #32
   12eec:	af02      	add	r7, sp, #8
   12eee:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12ef0:	2317      	movs	r3, #23
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	221e      	movs	r2, #30
   12ef6:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12ef8:	2317      	movs	r3, #23
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	781b      	ldrb	r3, [r3, #0]
   12efe:	2101      	movs	r1, #1
   12f00:	0018      	movs	r0, r3
   12f02:	4b18      	ldr	r3, [pc, #96]	; (12f64 <gsm_call_to_dial_a_number+0x7c>)
   12f04:	4798      	blx	r3
   12f06:	0003      	movs	r3, r0
   12f08:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	2b00      	cmp	r3, #0
   12f0e:	d101      	bne.n	12f14 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
   12f10:	2300      	movs	r3, #0
   12f12:	e023      	b.n	12f5c <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12f14:	2317      	movs	r3, #23
   12f16:	18fb      	adds	r3, r7, r3
   12f18:	781a      	ldrb	r2, [r3, #0]
   12f1a:	693b      	ldr	r3, [r7, #16]
   12f1c:	2100      	movs	r1, #0
   12f1e:	0018      	movs	r0, r3
   12f20:	4b11      	ldr	r3, [pc, #68]	; (12f68 <gsm_call_to_dial_a_number+0x80>)
   12f22:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
   12f24:	2317      	movs	r3, #23
   12f26:	18fb      	adds	r3, r7, r3
   12f28:	7819      	ldrb	r1, [r3, #0]
   12f2a:	687b      	ldr	r3, [r7, #4]
   12f2c:	4a0f      	ldr	r2, [pc, #60]	; (12f6c <gsm_call_to_dial_a_number+0x84>)
   12f2e:	6938      	ldr	r0, [r7, #16]
   12f30:	4c0f      	ldr	r4, [pc, #60]	; (12f70 <gsm_call_to_dial_a_number+0x88>)
   12f32:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
   12f34:	230f      	movs	r3, #15
   12f36:	18fc      	adds	r4, r7, r3
   12f38:	23fa      	movs	r3, #250	; 0xfa
   12f3a:	00da      	lsls	r2, r3, #3
   12f3c:	490d      	ldr	r1, [pc, #52]	; (12f74 <gsm_call_to_dial_a_number+0x8c>)
   12f3e:	6938      	ldr	r0, [r7, #16]
   12f40:	2300      	movs	r3, #0
   12f42:	9300      	str	r3, [sp, #0]
   12f44:	2300      	movs	r3, #0
   12f46:	4d0c      	ldr	r5, [pc, #48]	; (12f78 <gsm_call_to_dial_a_number+0x90>)
   12f48:	47a8      	blx	r5
   12f4a:	0003      	movs	r3, r0
   12f4c:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12f4e:	693b      	ldr	r3, [r7, #16]
   12f50:	0018      	movs	r0, r3
   12f52:	4b0a      	ldr	r3, [pc, #40]	; (12f7c <gsm_call_to_dial_a_number+0x94>)
   12f54:	4798      	blx	r3
	return err;
   12f56:	230f      	movs	r3, #15
   12f58:	18fb      	adds	r3, r7, r3
   12f5a:	781b      	ldrb	r3, [r3, #0]
	
}
   12f5c:	0018      	movs	r0, r3
   12f5e:	46bd      	mov	sp, r7
   12f60:	b006      	add	sp, #24
   12f62:	bdb0      	pop	{r4, r5, r7, pc}
   12f64:	0002964d 	.word	0x0002964d
   12f68:	0002975b 	.word	0x0002975b
   12f6c:	0002a65c 	.word	0x0002a65c
   12f70:	000298fd 	.word	0x000298fd
   12f74:	0002a410 	.word	0x0002a410
   12f78:	000123ed 	.word	0x000123ed
   12f7c:	000296ed 	.word	0x000296ed

00012f80 <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
   12f80:	b590      	push	{r4, r7, lr}
   12f82:	b083      	sub	sp, #12
   12f84:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12f86:	4a06      	ldr	r2, [pc, #24]	; (12fa0 <gsm_answer_an_incomming_call+0x20>)
   12f88:	4906      	ldr	r1, [pc, #24]	; (12fa4 <gsm_answer_an_incomming_call+0x24>)
   12f8a:	4807      	ldr	r0, [pc, #28]	; (12fa8 <gsm_answer_an_incomming_call+0x28>)
   12f8c:	2300      	movs	r3, #0
   12f8e:	9300      	str	r3, [sp, #0]
   12f90:	2300      	movs	r3, #0
   12f92:	4c06      	ldr	r4, [pc, #24]	; (12fac <gsm_answer_an_incomming_call+0x2c>)
   12f94:	47a0      	blx	r4
   12f96:	0003      	movs	r3, r0
}
   12f98:	0018      	movs	r0, r3
   12f9a:	46bd      	mov	sp, r7
   12f9c:	b001      	add	sp, #4
   12f9e:	bd90      	pop	{r4, r7, pc}
   12fa0:	00001388 	.word	0x00001388
   12fa4:	0002a410 	.word	0x0002a410
   12fa8:	0002a664 	.word	0x0002a664
   12fac:	000123ed 	.word	0x000123ed

00012fb0 <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
   12fb0:	b590      	push	{r4, r7, lr}
   12fb2:	b083      	sub	sp, #12
   12fb4:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   12fb6:	4a06      	ldr	r2, [pc, #24]	; (12fd0 <gsm_enable_network_time_update+0x20>)
   12fb8:	4906      	ldr	r1, [pc, #24]	; (12fd4 <gsm_enable_network_time_update+0x24>)
   12fba:	4807      	ldr	r0, [pc, #28]	; (12fd8 <gsm_enable_network_time_update+0x28>)
   12fbc:	2300      	movs	r3, #0
   12fbe:	9300      	str	r3, [sp, #0]
   12fc0:	2300      	movs	r3, #0
   12fc2:	4c06      	ldr	r4, [pc, #24]	; (12fdc <gsm_enable_network_time_update+0x2c>)
   12fc4:	47a0      	blx	r4
   12fc6:	0003      	movs	r3, r0
}
   12fc8:	0018      	movs	r0, r3
   12fca:	46bd      	mov	sp, r7
   12fcc:	b001      	add	sp, #4
   12fce:	bd90      	pop	{r4, r7, pc}
   12fd0:	00002710 	.word	0x00002710
   12fd4:	0002a410 	.word	0x0002a410
   12fd8:	0002a66c 	.word	0x0002a66c
   12fdc:	000123ed 	.word	0x000123ed

00012fe0 <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
   12fe0:	b590      	push	{r4, r7, lr}
   12fe2:	b083      	sub	sp, #12
   12fe4:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12fe6:	4a06      	ldr	r2, [pc, #24]	; (13000 <gsm_enable_DTMF_detection+0x20>)
   12fe8:	4906      	ldr	r1, [pc, #24]	; (13004 <gsm_enable_DTMF_detection+0x24>)
   12fea:	4807      	ldr	r0, [pc, #28]	; (13008 <gsm_enable_DTMF_detection+0x28>)
   12fec:	2300      	movs	r3, #0
   12fee:	9300      	str	r3, [sp, #0]
   12ff0:	2300      	movs	r3, #0
   12ff2:	4c06      	ldr	r4, [pc, #24]	; (1300c <gsm_enable_DTMF_detection+0x2c>)
   12ff4:	47a0      	blx	r4
   12ff6:	0003      	movs	r3, r0
}
   12ff8:	0018      	movs	r0, r3
   12ffa:	46bd      	mov	sp, r7
   12ffc:	b001      	add	sp, #4
   12ffe:	bd90      	pop	{r4, r7, pc}
   13000:	00001388 	.word	0x00001388
   13004:	0002a410 	.word	0x0002a410
   13008:	0002a684 	.word	0x0002a684
   1300c:	000123ed 	.word	0x000123ed

00013010 <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
   13010:	b5b0      	push	{r4, r5, r7, lr}
   13012:	b088      	sub	sp, #32
   13014:	af02      	add	r7, sp, #8
   13016:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   13018:	2317      	movs	r3, #23
   1301a:	18fb      	adds	r3, r7, r3
   1301c:	221e      	movs	r2, #30
   1301e:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   13020:	2317      	movs	r3, #23
   13022:	18fb      	adds	r3, r7, r3
   13024:	781b      	ldrb	r3, [r3, #0]
   13026:	2101      	movs	r1, #1
   13028:	0018      	movs	r0, r3
   1302a:	4b18      	ldr	r3, [pc, #96]	; (1308c <gsm_send_DTMF_Tone+0x7c>)
   1302c:	4798      	blx	r3
   1302e:	0003      	movs	r3, r0
   13030:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   13032:	693b      	ldr	r3, [r7, #16]
   13034:	2b00      	cmp	r3, #0
   13036:	d101      	bne.n	1303c <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
   13038:	2300      	movs	r3, #0
   1303a:	e022      	b.n	13082 <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   1303c:	2317      	movs	r3, #23
   1303e:	18fb      	adds	r3, r7, r3
   13040:	781a      	ldrb	r2, [r3, #0]
   13042:	693b      	ldr	r3, [r7, #16]
   13044:	2100      	movs	r1, #0
   13046:	0018      	movs	r0, r3
   13048:	4b11      	ldr	r3, [pc, #68]	; (13090 <gsm_send_DTMF_Tone+0x80>)
   1304a:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
   1304c:	2317      	movs	r3, #23
   1304e:	18fb      	adds	r3, r7, r3
   13050:	7819      	ldrb	r1, [r3, #0]
   13052:	687b      	ldr	r3, [r7, #4]
   13054:	4a0f      	ldr	r2, [pc, #60]	; (13094 <gsm_send_DTMF_Tone+0x84>)
   13056:	6938      	ldr	r0, [r7, #16]
   13058:	4c0f      	ldr	r4, [pc, #60]	; (13098 <gsm_send_DTMF_Tone+0x88>)
   1305a:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
   1305c:	230f      	movs	r3, #15
   1305e:	18fc      	adds	r4, r7, r3
   13060:	4a0e      	ldr	r2, [pc, #56]	; (1309c <gsm_send_DTMF_Tone+0x8c>)
   13062:	490f      	ldr	r1, [pc, #60]	; (130a0 <gsm_send_DTMF_Tone+0x90>)
   13064:	6938      	ldr	r0, [r7, #16]
   13066:	2300      	movs	r3, #0
   13068:	9300      	str	r3, [sp, #0]
   1306a:	2300      	movs	r3, #0
   1306c:	4d0d      	ldr	r5, [pc, #52]	; (130a4 <gsm_send_DTMF_Tone+0x94>)
   1306e:	47a8      	blx	r5
   13070:	0003      	movs	r3, r0
   13072:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   13074:	693b      	ldr	r3, [r7, #16]
   13076:	0018      	movs	r0, r3
   13078:	4b0b      	ldr	r3, [pc, #44]	; (130a8 <gsm_send_DTMF_Tone+0x98>)
   1307a:	4798      	blx	r3
	return err;
   1307c:	230f      	movs	r3, #15
   1307e:	18fb      	adds	r3, r7, r3
   13080:	781b      	ldrb	r3, [r3, #0]
}
   13082:	0018      	movs	r0, r3
   13084:	46bd      	mov	sp, r7
   13086:	b006      	add	sp, #24
   13088:	bdb0      	pop	{r4, r5, r7, pc}
   1308a:	46c0      	nop			; (mov r8, r8)
   1308c:	0002964d 	.word	0x0002964d
   13090:	0002975b 	.word	0x0002975b
   13094:	0002a690 	.word	0x0002a690
   13098:	000298fd 	.word	0x000298fd
   1309c:	00001388 	.word	0x00001388
   130a0:	0002a410 	.word	0x0002a410
   130a4:	000123ed 	.word	0x000123ed
   130a8:	000296ed 	.word	0x000296ed

000130ac <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
   130ac:	b590      	push	{r4, r7, lr}
   130ae:	b083      	sub	sp, #12
   130b0:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
   130b2:	4a06      	ldr	r2, [pc, #24]	; (130cc <gsm_hangup_call+0x20>)
   130b4:	4906      	ldr	r1, [pc, #24]	; (130d0 <gsm_hangup_call+0x24>)
   130b6:	4807      	ldr	r0, [pc, #28]	; (130d4 <gsm_hangup_call+0x28>)
   130b8:	2300      	movs	r3, #0
   130ba:	9300      	str	r3, [sp, #0]
   130bc:	2300      	movs	r3, #0
   130be:	4c06      	ldr	r4, [pc, #24]	; (130d8 <gsm_hangup_call+0x2c>)
   130c0:	47a0      	blx	r4
   130c2:	0003      	movs	r3, r0
}
   130c4:	0018      	movs	r0, r3
   130c6:	46bd      	mov	sp, r7
   130c8:	b001      	add	sp, #4
   130ca:	bd90      	pop	{r4, r7, pc}
   130cc:	00001388 	.word	0x00001388
   130d0:	0002a410 	.word	0x0002a410
   130d4:	0002a6a0 	.word	0x0002a6a0
   130d8:	000123ed 	.word	0x000123ed

000130dc <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
   130dc:	b590      	push	{r4, r7, lr}
   130de:	b083      	sub	sp, #12
   130e0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
   130e2:	4a06      	ldr	r2, [pc, #24]	; (130fc <gsm_disable_call_waiting+0x20>)
   130e4:	4906      	ldr	r1, [pc, #24]	; (13100 <gsm_disable_call_waiting+0x24>)
   130e6:	4807      	ldr	r0, [pc, #28]	; (13104 <gsm_disable_call_waiting+0x28>)
   130e8:	2300      	movs	r3, #0
   130ea:	9300      	str	r3, [sp, #0]
   130ec:	2300      	movs	r3, #0
   130ee:	4c06      	ldr	r4, [pc, #24]	; (13108 <gsm_disable_call_waiting+0x2c>)
   130f0:	47a0      	blx	r4
   130f2:	0003      	movs	r3, r0
}
   130f4:	0018      	movs	r0, r3
   130f6:	46bd      	mov	sp, r7
   130f8:	b001      	add	sp, #4
   130fa:	bd90      	pop	{r4, r7, pc}
   130fc:	00004650 	.word	0x00004650
   13100:	0002a410 	.word	0x0002a410
   13104:	0002a6ac 	.word	0x0002a6ac
   13108:	000123ed 	.word	0x000123ed

0001310c <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
   1310c:	b590      	push	{r4, r7, lr}
   1310e:	b083      	sub	sp, #12
   13110:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,500,0, NULL);
   13112:	23fa      	movs	r3, #250	; 0xfa
   13114:	005a      	lsls	r2, r3, #1
   13116:	4906      	ldr	r1, [pc, #24]	; (13130 <gsm_stop_play_record_file+0x24>)
   13118:	4806      	ldr	r0, [pc, #24]	; (13134 <gsm_stop_play_record_file+0x28>)
   1311a:	2300      	movs	r3, #0
   1311c:	9300      	str	r3, [sp, #0]
   1311e:	2300      	movs	r3, #0
   13120:	4c05      	ldr	r4, [pc, #20]	; (13138 <gsm_stop_play_record_file+0x2c>)
   13122:	47a0      	blx	r4
   13124:	0003      	movs	r3, r0
}
   13126:	0018      	movs	r0, r3
   13128:	46bd      	mov	sp, r7
   1312a:	b001      	add	sp, #4
   1312c:	bd90      	pop	{r4, r7, pc}
   1312e:	46c0      	nop			; (mov r8, r8)
   13130:	0002a410 	.word	0x0002a410
   13134:	0002a6dc 	.word	0x0002a6dc
   13138:	000123ed 	.word	0x000123ed

0001313c <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
   1313c:	b590      	push	{r4, r7, lr}
   1313e:	b087      	sub	sp, #28
   13140:	af02      	add	r7, sp, #8
   13142:	6078      	str	r0, [r7, #4]
   13144:	000a      	movs	r2, r1
   13146:	1cfb      	adds	r3, r7, #3
   13148:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
   1314a:	230f      	movs	r3, #15
   1314c:	18fb      	adds	r3, r7, r3
   1314e:	2200      	movs	r2, #0
   13150:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
   13152:	1cfb      	adds	r3, r7, #3
   13154:	781b      	ldrb	r3, [r3, #0]
   13156:	2b00      	cmp	r3, #0
   13158:	d003      	beq.n	13162 <gsm_play_record_file+0x26>
	{
		repeat = 1;
   1315a:	230f      	movs	r3, #15
   1315c:	18fb      	adds	r3, r7, r3
   1315e:	2201      	movs	r2, #1
   13160:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
   13162:	230e      	movs	r3, #14
   13164:	18fb      	adds	r3, r7, r3
   13166:	2232      	movs	r2, #50	; 0x32
   13168:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   1316a:	230e      	movs	r3, #14
   1316c:	18fb      	adds	r3, r7, r3
   1316e:	781b      	ldrb	r3, [r3, #0]
   13170:	2101      	movs	r1, #1
   13172:	0018      	movs	r0, r3
   13174:	4b17      	ldr	r3, [pc, #92]	; (131d4 <gsm_play_record_file+0x98>)
   13176:	4798      	blx	r3
   13178:	0003      	movs	r3, r0
   1317a:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
   1317c:	68bb      	ldr	r3, [r7, #8]
   1317e:	2b00      	cmp	r3, #0
   13180:	d101      	bne.n	13186 <gsm_play_record_file+0x4a>
	{
		return 0;
   13182:	2300      	movs	r3, #0
   13184:	e022      	b.n	131cc <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   13186:	230e      	movs	r3, #14
   13188:	18fb      	adds	r3, r7, r3
   1318a:	781a      	ldrb	r2, [r3, #0]
   1318c:	68bb      	ldr	r3, [r7, #8]
   1318e:	2100      	movs	r1, #0
   13190:	0018      	movs	r0, r3
   13192:	4b11      	ldr	r3, [pc, #68]	; (131d8 <gsm_play_record_file+0x9c>)
   13194:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
   13196:	230e      	movs	r3, #14
   13198:	18fb      	adds	r3, r7, r3
   1319a:	7819      	ldrb	r1, [r3, #0]
   1319c:	230f      	movs	r3, #15
   1319e:	18fb      	adds	r3, r7, r3
   131a0:	781b      	ldrb	r3, [r3, #0]
   131a2:	687c      	ldr	r4, [r7, #4]
   131a4:	4a0d      	ldr	r2, [pc, #52]	; (131dc <gsm_play_record_file+0xa0>)
   131a6:	68b8      	ldr	r0, [r7, #8]
   131a8:	9300      	str	r3, [sp, #0]
   131aa:	0023      	movs	r3, r4
   131ac:	4c0c      	ldr	r4, [pc, #48]	; (131e0 <gsm_play_record_file+0xa4>)
   131ae:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
   131b0:	23fa      	movs	r3, #250	; 0xfa
   131b2:	00da      	lsls	r2, r3, #3
   131b4:	490b      	ldr	r1, [pc, #44]	; (131e4 <gsm_play_record_file+0xa8>)
   131b6:	68b8      	ldr	r0, [r7, #8]
   131b8:	2300      	movs	r3, #0
   131ba:	9300      	str	r3, [sp, #0]
   131bc:	2300      	movs	r3, #0
   131be:	4c0a      	ldr	r4, [pc, #40]	; (131e8 <gsm_play_record_file+0xac>)
   131c0:	47a0      	blx	r4
	free(cmdx);
   131c2:	68bb      	ldr	r3, [r7, #8]
   131c4:	0018      	movs	r0, r3
   131c6:	4b09      	ldr	r3, [pc, #36]	; (131ec <gsm_play_record_file+0xb0>)
   131c8:	4798      	blx	r3
	return GSM_ERROR_NONE;
   131ca:	2300      	movs	r3, #0
	
}
   131cc:	0018      	movs	r0, r3
   131ce:	46bd      	mov	sp, r7
   131d0:	b005      	add	sp, #20
   131d2:	bd90      	pop	{r4, r7, pc}
   131d4:	0002964d 	.word	0x0002964d
   131d8:	0002975b 	.word	0x0002975b
   131dc:	0002a6e8 	.word	0x0002a6e8
   131e0:	000298fd 	.word	0x000298fd
   131e4:	0002a410 	.word	0x0002a410
   131e8:	000123ed 	.word	0x000123ed
   131ec:	000296ed 	.word	0x000296ed

000131f0 <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
   131f0:	b5b0      	push	{r4, r5, r7, lr}
   131f2:	b086      	sub	sp, #24
   131f4:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
   131f6:	230f      	movs	r3, #15
   131f8:	18fb      	adds	r3, r7, r3
   131fa:	2246      	movs	r2, #70	; 0x46
   131fc:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   131fe:	230f      	movs	r3, #15
   13200:	18fb      	adds	r3, r7, r3
   13202:	781b      	ldrb	r3, [r3, #0]
   13204:	2101      	movs	r1, #1
   13206:	0018      	movs	r0, r3
   13208:	4b57      	ldr	r3, [pc, #348]	; (13368 <gsm_get_internal_rtc_time+0x178>)
   1320a:	4798      	blx	r3
   1320c:	0003      	movs	r3, r0
   1320e:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
   13210:	68bb      	ldr	r3, [r7, #8]
   13212:	2b00      	cmp	r3, #0
   13214:	d105      	bne.n	13222 <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
   13216:	68bb      	ldr	r3, [r7, #8]
   13218:	0018      	movs	r0, r3
   1321a:	4b54      	ldr	r3, [pc, #336]	; (1336c <gsm_get_internal_rtc_time+0x17c>)
   1321c:	4798      	blx	r3
		return 0;
   1321e:	2300      	movs	r3, #0
   13220:	e09d      	b.n	1335e <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   13222:	230f      	movs	r3, #15
   13224:	18fb      	adds	r3, r7, r3
   13226:	781a      	ldrb	r2, [r3, #0]
   13228:	68bb      	ldr	r3, [r7, #8]
   1322a:	2100      	movs	r1, #0
   1322c:	0018      	movs	r0, r3
   1322e:	4b50      	ldr	r3, [pc, #320]	; (13370 <gsm_get_internal_rtc_time+0x180>)
   13230:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
   13232:	1dfc      	adds	r4, r7, #7
   13234:	230f      	movs	r3, #15
   13236:	18fb      	adds	r3, r7, r3
   13238:	781a      	ldrb	r2, [r3, #0]
   1323a:	4d4e      	ldr	r5, [pc, #312]	; (13374 <gsm_get_internal_rtc_time+0x184>)
   1323c:	494e      	ldr	r1, [pc, #312]	; (13378 <gsm_get_internal_rtc_time+0x188>)
   1323e:	484f      	ldr	r0, [pc, #316]	; (1337c <gsm_get_internal_rtc_time+0x18c>)
   13240:	68bb      	ldr	r3, [r7, #8]
   13242:	9300      	str	r3, [sp, #0]
   13244:	0013      	movs	r3, r2
   13246:	002a      	movs	r2, r5
   13248:	4d4d      	ldr	r5, [pc, #308]	; (13380 <gsm_get_internal_rtc_time+0x190>)
   1324a:	47a8      	blx	r5
   1324c:	0003      	movs	r3, r0
   1324e:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
   13250:	1dfb      	adds	r3, r7, #7
   13252:	781b      	ldrb	r3, [r3, #0]
   13254:	2b00      	cmp	r3, #0
   13256:	d16a      	bne.n	1332e <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
   13258:	4a4a      	ldr	r2, [pc, #296]	; (13384 <gsm_get_internal_rtc_time+0x194>)
   1325a:	68bb      	ldr	r3, [r7, #8]
   1325c:	0011      	movs	r1, r2
   1325e:	0018      	movs	r0, r3
   13260:	4b49      	ldr	r3, [pc, #292]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   13262:	4798      	blx	r3
   13264:	0003      	movs	r3, r0
   13266:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
   13268:	4b46      	ldr	r3, [pc, #280]	; (13384 <gsm_get_internal_rtc_time+0x194>)
   1326a:	0019      	movs	r1, r3
   1326c:	2000      	movs	r0, #0
   1326e:	4b46      	ldr	r3, [pc, #280]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   13270:	4798      	blx	r3
   13272:	0003      	movs	r3, r0
   13274:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
   13276:	4a45      	ldr	r2, [pc, #276]	; (1338c <gsm_get_internal_rtc_time+0x19c>)
   13278:	683b      	ldr	r3, [r7, #0]
   1327a:	0011      	movs	r1, r2
   1327c:	0018      	movs	r0, r3
   1327e:	4b42      	ldr	r3, [pc, #264]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   13280:	4798      	blx	r3
   13282:	0003      	movs	r3, r0
   13284:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
   13286:	683b      	ldr	r3, [r7, #0]
   13288:	0018      	movs	r0, r3
   1328a:	4b41      	ldr	r3, [pc, #260]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   1328c:	4798      	blx	r3
   1328e:	0003      	movs	r3, r0
   13290:	b2da      	uxtb	r2, r3
   13292:	4b40      	ldr	r3, [pc, #256]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   13294:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
   13296:	4b3d      	ldr	r3, [pc, #244]	; (1338c <gsm_get_internal_rtc_time+0x19c>)
   13298:	0019      	movs	r1, r3
   1329a:	2000      	movs	r0, #0
   1329c:	4b3a      	ldr	r3, [pc, #232]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   1329e:	4798      	blx	r3
   132a0:	0003      	movs	r3, r0
   132a2:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
   132a4:	683b      	ldr	r3, [r7, #0]
   132a6:	0018      	movs	r0, r3
   132a8:	4b39      	ldr	r3, [pc, #228]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   132aa:	4798      	blx	r3
   132ac:	0003      	movs	r3, r0
   132ae:	b2da      	uxtb	r2, r3
   132b0:	4b38      	ldr	r3, [pc, #224]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   132b2:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
   132b4:	4b38      	ldr	r3, [pc, #224]	; (13398 <gsm_get_internal_rtc_time+0x1a8>)
   132b6:	0019      	movs	r1, r3
   132b8:	2000      	movs	r0, #0
   132ba:	4b33      	ldr	r3, [pc, #204]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   132bc:	4798      	blx	r3
   132be:	0003      	movs	r3, r0
   132c0:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
   132c2:	683b      	ldr	r3, [r7, #0]
   132c4:	0018      	movs	r0, r3
   132c6:	4b32      	ldr	r3, [pc, #200]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   132c8:	4798      	blx	r3
   132ca:	0003      	movs	r3, r0
   132cc:	b2da      	uxtb	r2, r3
   132ce:	4b31      	ldr	r3, [pc, #196]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   132d0:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
   132d2:	4b32      	ldr	r3, [pc, #200]	; (1339c <gsm_get_internal_rtc_time+0x1ac>)
   132d4:	0019      	movs	r1, r3
   132d6:	2000      	movs	r0, #0
   132d8:	4b2b      	ldr	r3, [pc, #172]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   132da:	4798      	blx	r3
   132dc:	0003      	movs	r3, r0
   132de:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
   132e0:	683b      	ldr	r3, [r7, #0]
   132e2:	0018      	movs	r0, r3
   132e4:	4b2a      	ldr	r3, [pc, #168]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   132e6:	4798      	blx	r3
   132e8:	0003      	movs	r3, r0
   132ea:	b2da      	uxtb	r2, r3
   132ec:	4b29      	ldr	r3, [pc, #164]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   132ee:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
   132f0:	4b2a      	ldr	r3, [pc, #168]	; (1339c <gsm_get_internal_rtc_time+0x1ac>)
   132f2:	0019      	movs	r1, r3
   132f4:	2000      	movs	r0, #0
   132f6:	4b24      	ldr	r3, [pc, #144]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   132f8:	4798      	blx	r3
   132fa:	0003      	movs	r3, r0
   132fc:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
   132fe:	683b      	ldr	r3, [r7, #0]
   13300:	0018      	movs	r0, r3
   13302:	4b23      	ldr	r3, [pc, #140]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   13304:	4798      	blx	r3
   13306:	0003      	movs	r3, r0
   13308:	b2da      	uxtb	r2, r3
   1330a:	4b22      	ldr	r3, [pc, #136]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   1330c:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
   1330e:	4b24      	ldr	r3, [pc, #144]	; (133a0 <gsm_get_internal_rtc_time+0x1b0>)
   13310:	0019      	movs	r1, r3
   13312:	2000      	movs	r0, #0
   13314:	4b1c      	ldr	r3, [pc, #112]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   13316:	4798      	blx	r3
   13318:	0003      	movs	r3, r0
   1331a:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
   1331c:	683b      	ldr	r3, [r7, #0]
   1331e:	0018      	movs	r0, r3
   13320:	4b1b      	ldr	r3, [pc, #108]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   13322:	4798      	blx	r3
   13324:	0003      	movs	r3, r0
   13326:	b2da      	uxtb	r2, r3
   13328:	4b1a      	ldr	r3, [pc, #104]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   1332a:	715a      	strb	r2, [r3, #5]
   1332c:	e011      	b.n	13352 <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
   1332e:	4b19      	ldr	r3, [pc, #100]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   13330:	2200      	movs	r2, #0
   13332:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
   13334:	4b17      	ldr	r3, [pc, #92]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   13336:	2200      	movs	r2, #0
   13338:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
   1333a:	4b16      	ldr	r3, [pc, #88]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   1333c:	2200      	movs	r2, #0
   1333e:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
   13340:	4b14      	ldr	r3, [pc, #80]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   13342:	2200      	movs	r2, #0
   13344:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
   13346:	4b13      	ldr	r3, [pc, #76]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   13348:	2200      	movs	r2, #0
   1334a:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
   1334c:	4b11      	ldr	r3, [pc, #68]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   1334e:	2200      	movs	r2, #0
   13350:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
   13352:	68bb      	ldr	r3, [r7, #8]
   13354:	0018      	movs	r0, r3
   13356:	4b05      	ldr	r3, [pc, #20]	; (1336c <gsm_get_internal_rtc_time+0x17c>)
   13358:	4798      	blx	r3
	return err;
   1335a:	1dfb      	adds	r3, r7, #7
   1335c:	781b      	ldrb	r3, [r3, #0]
}
   1335e:	0018      	movs	r0, r3
   13360:	46bd      	mov	sp, r7
   13362:	b004      	add	sp, #16
   13364:	bdb0      	pop	{r4, r5, r7, pc}
   13366:	46c0      	nop			; (mov r8, r8)
   13368:	0002964d 	.word	0x0002964d
   1336c:	000296ed 	.word	0x000296ed
   13370:	0002975b 	.word	0x0002975b
   13374:	00001388 	.word	0x00001388
   13378:	0002a410 	.word	0x0002a410
   1337c:	0002a70c 	.word	0x0002a70c
   13380:	000123ed 	.word	0x000123ed
   13384:	0002a718 	.word	0x0002a718
   13388:	00029a4d 	.word	0x00029a4d
   1338c:	0002a71c 	.word	0x0002a71c
   13390:	00029641 	.word	0x00029641
   13394:	20000888 	.word	0x20000888
   13398:	0002a52c 	.word	0x0002a52c
   1339c:	0002a528 	.word	0x0002a528
   133a0:	0002a720 	.word	0x0002a720

000133a4 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
   133a4:	b580      	push	{r7, lr}
   133a6:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
   133a8:	4b34      	ldr	r3, [pc, #208]	; (1347c <gsm_config_module+0xd8>)
   133aa:	4798      	blx	r3
   133ac:	1e03      	subs	r3, r0, #0
   133ae:	d000      	beq.n	133b2 <gsm_config_module+0xe>
   133b0:	e05e      	b.n	13470 <gsm_config_module+0xcc>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
   133b2:	4b33      	ldr	r3, [pc, #204]	; (13480 <gsm_config_module+0xdc>)
   133b4:	4798      	blx	r3
   133b6:	1e03      	subs	r3, r0, #0
   133b8:	d000      	beq.n	133bc <gsm_config_module+0x18>
   133ba:	e057      	b.n	1346c <gsm_config_module+0xc8>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
   133bc:	23fa      	movs	r3, #250	; 0xfa
   133be:	00db      	lsls	r3, r3, #3
   133c0:	0018      	movs	r0, r3
   133c2:	4b30      	ldr	r3, [pc, #192]	; (13484 <gsm_config_module+0xe0>)
   133c4:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
   133c6:	4b30      	ldr	r3, [pc, #192]	; (13488 <gsm_config_module+0xe4>)
   133c8:	4798      	blx	r3
   133ca:	1e03      	subs	r3, r0, #0
   133cc:	d14c      	bne.n	13468 <gsm_config_module+0xc4>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
   133ce:	4b2f      	ldr	r3, [pc, #188]	; (1348c <gsm_config_module+0xe8>)
   133d0:	4798      	blx	r3
   133d2:	1e03      	subs	r3, r0, #0
   133d4:	d14e      	bne.n	13474 <gsm_config_module+0xd0>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
   133d6:	4b2e      	ldr	r3, [pc, #184]	; (13490 <gsm_config_module+0xec>)
   133d8:	4798      	blx	r3
   133da:	1e03      	subs	r3, r0, #0
   133dc:	d142      	bne.n	13464 <gsm_config_module+0xc0>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
   133de:	23fa      	movs	r3, #250	; 0xfa
   133e0:	00db      	lsls	r3, r3, #3
   133e2:	0018      	movs	r0, r3
   133e4:	4b27      	ldr	r3, [pc, #156]	; (13484 <gsm_config_module+0xe0>)
   133e6:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
   133e8:	4b2a      	ldr	r3, [pc, #168]	; (13494 <gsm_config_module+0xf0>)
   133ea:	4798      	blx	r3
   133ec:	1e03      	subs	r3, r0, #0
   133ee:	d137      	bne.n	13460 <gsm_config_module+0xbc>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
   133f0:	4b29      	ldr	r3, [pc, #164]	; (13498 <gsm_config_module+0xf4>)
   133f2:	4798      	blx	r3
   133f4:	1e03      	subs	r3, r0, #0
   133f6:	d131      	bne.n	1345c <gsm_config_module+0xb8>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
   133f8:	4b28      	ldr	r3, [pc, #160]	; (1349c <gsm_config_module+0xf8>)
   133fa:	4798      	blx	r3
   133fc:	1e03      	subs	r3, r0, #0
   133fe:	d12b      	bne.n	13458 <gsm_config_module+0xb4>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
   13400:	4b27      	ldr	r3, [pc, #156]	; (134a0 <gsm_config_module+0xfc>)
   13402:	4798      	blx	r3
   13404:	1e03      	subs	r3, r0, #0
   13406:	d125      	bne.n	13454 <gsm_config_module+0xb0>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
   13408:	4b26      	ldr	r3, [pc, #152]	; (134a4 <gsm_config_module+0x100>)
   1340a:	4798      	blx	r3
   1340c:	1e03      	subs	r3, r0, #0
   1340e:	d11f      	bne.n	13450 <gsm_config_module+0xac>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
   13410:	4b25      	ldr	r3, [pc, #148]	; (134a8 <gsm_config_module+0x104>)
   13412:	4798      	blx	r3
   13414:	1e03      	subs	r3, r0, #0
   13416:	d119      	bne.n	1344c <gsm_config_module+0xa8>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
   13418:	4b24      	ldr	r3, [pc, #144]	; (134ac <gsm_config_module+0x108>)
   1341a:	4798      	blx	r3
   1341c:	1e03      	subs	r3, r0, #0
   1341e:	d113      	bne.n	13448 <gsm_config_module+0xa4>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
   13420:	4b23      	ldr	r3, [pc, #140]	; (134b0 <gsm_config_module+0x10c>)
   13422:	4798      	blx	r3
   13424:	1e03      	subs	r3, r0, #0
   13426:	d10d      	bne.n	13444 <gsm_config_module+0xa0>
													{
														if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
   13428:	4b22      	ldr	r3, [pc, #136]	; (134b4 <gsm_config_module+0x110>)
   1342a:	4798      	blx	r3
   1342c:	1e03      	subs	r3, r0, #0
   1342e:	d107      	bne.n	13440 <gsm_config_module+0x9c>
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
   13430:	4b21      	ldr	r3, [pc, #132]	; (134b8 <gsm_config_module+0x114>)
   13432:	4798      	blx	r3
   13434:	1e03      	subs	r3, r0, #0
   13436:	d101      	bne.n	1343c <gsm_config_module+0x98>
															{
																return GSM_ERROR_NONE;
   13438:	2300      	movs	r3, #0
   1343a:	e01c      	b.n	13476 <gsm_config_module+0xd2>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
   1343c:	2310      	movs	r3, #16
   1343e:	e01a      	b.n	13476 <gsm_config_module+0xd2>
															}
														}
														else
														{
															return GSM_ERROR_CONFIG_FAILED;
   13440:	2310      	movs	r3, #16
   13442:	e018      	b.n	13476 <gsm_config_module+0xd2>
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
   13444:	2310      	movs	r3, #16
   13446:	e016      	b.n	13476 <gsm_config_module+0xd2>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
   13448:	2310      	movs	r3, #16
   1344a:	e014      	b.n	13476 <gsm_config_module+0xd2>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
   1344c:	2310      	movs	r3, #16
   1344e:	e012      	b.n	13476 <gsm_config_module+0xd2>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
   13450:	2310      	movs	r3, #16
   13452:	e010      	b.n	13476 <gsm_config_module+0xd2>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
   13454:	2310      	movs	r3, #16
   13456:	e00e      	b.n	13476 <gsm_config_module+0xd2>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
   13458:	2310      	movs	r3, #16
   1345a:	e00c      	b.n	13476 <gsm_config_module+0xd2>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
   1345c:	2310      	movs	r3, #16
   1345e:	e00a      	b.n	13476 <gsm_config_module+0xd2>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
   13460:	2310      	movs	r3, #16
   13462:	e008      	b.n	13476 <gsm_config_module+0xd2>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
   13464:	2310      	movs	r3, #16
   13466:	e006      	b.n	13476 <gsm_config_module+0xd2>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
   13468:	2310      	movs	r3, #16
   1346a:	e004      	b.n	13476 <gsm_config_module+0xd2>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
   1346c:	2310      	movs	r3, #16
   1346e:	e002      	b.n	13476 <gsm_config_module+0xd2>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
   13470:	2310      	movs	r3, #16
   13472:	e000      	b.n	13476 <gsm_config_module+0xd2>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
   13474:	2310      	movs	r3, #16
}
   13476:	0018      	movs	r0, r3
   13478:	46bd      	mov	sp, r7
   1347a:	bd80      	pop	{r7, pc}
   1347c:	000125f1 	.word	0x000125f1
   13480:	0001282d 	.word	0x0001282d
   13484:	00020a49 	.word	0x00020a49
   13488:	000126dd 	.word	0x000126dd
   1348c:	0001285d 	.word	0x0001285d
   13490:	00012689 	.word	0x00012689
   13494:	0001276d 	.word	0x0001276d
   13498:	0001279d 	.word	0x0001279d
   1349c:	000127fd 	.word	0x000127fd
   134a0:	0001288d 	.word	0x0001288d
   134a4:	000128bd 	.word	0x000128bd
   134a8:	00012b0d 	.word	0x00012b0d
   134ac:	00012fb1 	.word	0x00012fb1
   134b0:	00012fe1 	.word	0x00012fe1
   134b4:	000127cd 	.word	0x000127cd
   134b8:	0001273d 	.word	0x0001273d

000134bc <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
   134bc:	b580      	push	{r7, lr}
   134be:	b084      	sub	sp, #16
   134c0:	af00      	add	r7, sp, #0
   134c2:	6078      	str	r0, [r7, #4]
   134c4:	000a      	movs	r2, r1
   134c6:	1cfb      	adds	r3, r7, #3
   134c8:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
   134ca:	230f      	movs	r3, #15
   134cc:	18fb      	adds	r3, r7, r3
   134ce:	2200      	movs	r2, #0
   134d0:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   134d2:	e026      	b.n	13522 <gsm_read_response_line+0x66>
	{
		
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
   134d4:	4b1f      	ldr	r3, [pc, #124]	; (13554 <gsm_read_response_line+0x98>)
   134d6:	6818      	ldr	r0, [r3, #0]
   134d8:	23fa      	movs	r3, #250	; 0xfa
   134da:	005a      	lsls	r2, r3, #1
   134dc:	230e      	movs	r3, #14
   134de:	18fb      	adds	r3, r7, r3
   134e0:	0019      	movs	r1, r3
   134e2:	4b1d      	ldr	r3, [pc, #116]	; (13558 <gsm_read_response_line+0x9c>)
   134e4:	4798      	blx	r3
   134e6:	1e03      	subs	r3, r0, #0
   134e8:	d101      	bne.n	134ee <gsm_read_response_line+0x32>
		{
			return false;
   134ea:	2300      	movs	r3, #0
   134ec:	e02d      	b.n	1354a <gsm_read_response_line+0x8e>
		}

		if (curr_rx == '\n')
   134ee:	230e      	movs	r3, #14
   134f0:	18fb      	adds	r3, r7, r3
   134f2:	781b      	ldrb	r3, [r3, #0]
   134f4:	2b0a      	cmp	r3, #10
   134f6:	d014      	beq.n	13522 <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r')
   134f8:	230e      	movs	r3, #14
   134fa:	18fb      	adds	r3, r7, r3
   134fc:	781b      	ldrb	r3, [r3, #0]
   134fe:	2b0d      	cmp	r3, #13
   13500:	d014      	beq.n	1352c <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
   13502:	687b      	ldr	r3, [r7, #4]
   13504:	1c5a      	adds	r2, r3, #1
   13506:	607a      	str	r2, [r7, #4]
   13508:	220e      	movs	r2, #14
   1350a:	18ba      	adds	r2, r7, r2
   1350c:	7812      	ldrb	r2, [r2, #0]
   1350e:	701a      	strb	r2, [r3, #0]
			length--;
   13510:	1cfb      	adds	r3, r7, #3
   13512:	781a      	ldrb	r2, [r3, #0]
   13514:	1cfb      	adds	r3, r7, #3
   13516:	3a01      	subs	r2, #1
   13518:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
   1351a:	230f      	movs	r3, #15
   1351c:	18fb      	adds	r3, r7, r3
   1351e:	2201      	movs	r2, #1
   13520:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   13522:	1cfb      	adds	r3, r7, #3
   13524:	781b      	ldrb	r3, [r3, #0]
   13526:	2b01      	cmp	r3, #1
   13528:	d8d4      	bhi.n	134d4 <gsm_read_response_line+0x18>
   1352a:	e000      	b.n	1352e <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
   1352c:	46c0      	nop			; (mov r8, r8)
		}
	}

	if(line_non_empty)
   1352e:	230f      	movs	r3, #15
   13530:	18fb      	adds	r3, r7, r3
   13532:	781b      	ldrb	r3, [r3, #0]
   13534:	2b00      	cmp	r3, #0
   13536:	d002      	beq.n	1353e <gsm_read_response_line+0x82>
	{
		gsm_module_exit_sleep(true);
   13538:	2001      	movs	r0, #1
   1353a:	4b08      	ldr	r3, [pc, #32]	; (1355c <gsm_read_response_line+0xa0>)
   1353c:	4798      	blx	r3
	}

	*(buffer) = '\0';
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	2200      	movs	r2, #0
   13542:	701a      	strb	r2, [r3, #0]
	return line_non_empty;
   13544:	230f      	movs	r3, #15
   13546:	18fb      	adds	r3, r7, r3
   13548:	781b      	ldrb	r3, [r3, #0]
}
   1354a:	0018      	movs	r0, r3
   1354c:	46bd      	mov	sp, r7
   1354e:	b004      	add	sp, #16
   13550:	bd80      	pop	{r7, pc}
   13552:	46c0      	nop			; (mov r8, r8)
   13554:	2000041c 	.word	0x2000041c
   13558:	0001ffa1 	.word	0x0001ffa1
   1355c:	00012319 	.word	0x00012319

00013560 <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
   13560:	b580      	push	{r7, lr}
   13562:	b084      	sub	sp, #16
   13564:	af00      	add	r7, sp, #0
   13566:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
   13568:	230f      	movs	r3, #15
   1356a:	18fb      	adds	r3, r7, r3
   1356c:	2200      	movs	r2, #0
   1356e:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
   13570:	4a15      	ldr	r2, [pc, #84]	; (135c8 <gsm_responseLine_isNew_SMS_Received+0x68>)
   13572:	687b      	ldr	r3, [r7, #4]
   13574:	0011      	movs	r1, r2
   13576:	0018      	movs	r0, r3
   13578:	4b14      	ldr	r3, [pc, #80]	; (135cc <gsm_responseLine_isNew_SMS_Received+0x6c>)
   1357a:	4798      	blx	r3
   1357c:	1e03      	subs	r3, r0, #0
   1357e:	d017      	beq.n	135b0 <gsm_responseLine_isNew_SMS_Received+0x50>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
   13580:	4a13      	ldr	r2, [pc, #76]	; (135d0 <gsm_responseLine_isNew_SMS_Received+0x70>)
   13582:	687b      	ldr	r3, [r7, #4]
   13584:	0011      	movs	r1, r2
   13586:	0018      	movs	r0, r3
   13588:	4b12      	ldr	r3, [pc, #72]	; (135d4 <gsm_responseLine_isNew_SMS_Received+0x74>)
   1358a:	4798      	blx	r3
   1358c:	0003      	movs	r3, r0
   1358e:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
   13590:	4b0f      	ldr	r3, [pc, #60]	; (135d0 <gsm_responseLine_isNew_SMS_Received+0x70>)
   13592:	0019      	movs	r1, r3
   13594:	2000      	movs	r0, #0
   13596:	4b0f      	ldr	r3, [pc, #60]	; (135d4 <gsm_responseLine_isNew_SMS_Received+0x74>)
   13598:	4798      	blx	r3
   1359a:	0003      	movs	r3, r0
   1359c:	60bb      	str	r3, [r7, #8]
		
		//RemoveSpaces(ptr_tocken);
		
		sms_index = atoi(ptr_tocken);
   1359e:	68bb      	ldr	r3, [r7, #8]
   135a0:	0018      	movs	r0, r3
   135a2:	4b0d      	ldr	r3, [pc, #52]	; (135d8 <gsm_responseLine_isNew_SMS_Received+0x78>)
   135a4:	4798      	blx	r3
   135a6:	0002      	movs	r2, r0
   135a8:	230f      	movs	r3, #15
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	701a      	strb	r2, [r3, #0]
   135ae:	e003      	b.n	135b8 <gsm_responseLine_isNew_SMS_Received+0x58>
		
	}
	else
	{
		sms_index =  0;
   135b0:	230f      	movs	r3, #15
   135b2:	18fb      	adds	r3, r7, r3
   135b4:	2200      	movs	r2, #0
   135b6:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
   135b8:	230f      	movs	r3, #15
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	781b      	ldrb	r3, [r3, #0]
}
   135be:	0018      	movs	r0, r3
   135c0:	46bd      	mov	sp, r7
   135c2:	b004      	add	sp, #16
   135c4:	bd80      	pop	{r7, pc}
   135c6:	46c0      	nop			; (mov r8, r8)
   135c8:	0002a724 	.word	0x0002a724
   135cc:	00029a1b 	.word	0x00029a1b
   135d0:	0002a52c 	.word	0x0002a52c
   135d4:	00029a4d 	.word	0x00029a4d
   135d8:	00029641 	.word	0x00029641

000135dc <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
   135dc:	b580      	push	{r7, lr}
   135de:	b082      	sub	sp, #8
   135e0:	af00      	add	r7, sp, #0
   135e2:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
   135e4:	4a07      	ldr	r2, [pc, #28]	; (13604 <gsm_responseLine_isRinging+0x28>)
   135e6:	687b      	ldr	r3, [r7, #4]
   135e8:	0011      	movs	r1, r2
   135ea:	0018      	movs	r0, r3
   135ec:	4b06      	ldr	r3, [pc, #24]	; (13608 <gsm_responseLine_isRinging+0x2c>)
   135ee:	4798      	blx	r3
   135f0:	1e03      	subs	r3, r0, #0
   135f2:	d001      	beq.n	135f8 <gsm_responseLine_isRinging+0x1c>
	{
		return true;
   135f4:	2301      	movs	r3, #1
   135f6:	e000      	b.n	135fa <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
   135f8:	2300      	movs	r3, #0
	}
}
   135fa:	0018      	movs	r0, r3
   135fc:	46bd      	mov	sp, r7
   135fe:	b002      	add	sp, #8
   13600:	bd80      	pop	{r7, pc}
   13602:	46c0      	nop			; (mov r8, r8)
   13604:	0002a72c 	.word	0x0002a72c
   13608:	00029a1b 	.word	0x00029a1b

0001360c <gsm_responseLine_isCSQN>:

bool gsm_responseLine_isCSQN(char *response, volatile uint8_t *signal)
{
   1360c:	b580      	push	{r7, lr}
   1360e:	b084      	sub	sp, #16
   13610:	af00      	add	r7, sp, #0
   13612:	6078      	str	r0, [r7, #4]
   13614:	6039      	str	r1, [r7, #0]
//"+CSQN: 20,0"
	if(strstr(response,"+CSQN"))
   13616:	4a4c      	ldr	r2, [pc, #304]	; (13748 <gsm_responseLine_isCSQN+0x13c>)
   13618:	687b      	ldr	r3, [r7, #4]
   1361a:	0011      	movs	r1, r2
   1361c:	0018      	movs	r0, r3
   1361e:	4b4b      	ldr	r3, [pc, #300]	; (1374c <gsm_responseLine_isCSQN+0x140>)
   13620:	4798      	blx	r3
   13622:	1e03      	subs	r3, r0, #0
   13624:	d100      	bne.n	13628 <gsm_responseLine_isCSQN+0x1c>
   13626:	e089      	b.n	1373c <gsm_responseLine_isCSQN+0x130>
	{
		if (strstr(response,"99")==NULL)
   13628:	4a49      	ldr	r2, [pc, #292]	; (13750 <gsm_responseLine_isCSQN+0x144>)
   1362a:	687b      	ldr	r3, [r7, #4]
   1362c:	0011      	movs	r1, r2
   1362e:	0018      	movs	r0, r3
   13630:	4b46      	ldr	r3, [pc, #280]	; (1374c <gsm_responseLine_isCSQN+0x140>)
   13632:	4798      	blx	r3
   13634:	1e03      	subs	r3, r0, #0
   13636:	d000      	beq.n	1363a <gsm_responseLine_isCSQN+0x2e>
   13638:	e07b      	b.n	13732 <gsm_responseLine_isCSQN+0x126>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(response,":");
   1363a:	4a46      	ldr	r2, [pc, #280]	; (13754 <gsm_responseLine_isCSQN+0x148>)
   1363c:	687b      	ldr	r3, [r7, #4]
   1363e:	0011      	movs	r1, r2
   13640:	0018      	movs	r0, r3
   13642:	4b45      	ldr	r3, [pc, #276]	; (13758 <gsm_responseLine_isCSQN+0x14c>)
   13644:	4798      	blx	r3
   13646:	0003      	movs	r3, r0
   13648:	60fb      	str	r3, [r7, #12]
			ptr_tocken = strtok(NULL,":");
   1364a:	4b42      	ldr	r3, [pc, #264]	; (13754 <gsm_responseLine_isCSQN+0x148>)
   1364c:	0019      	movs	r1, r3
   1364e:	2000      	movs	r0, #0
   13650:	4b41      	ldr	r3, [pc, #260]	; (13758 <gsm_responseLine_isCSQN+0x14c>)
   13652:	4798      	blx	r3
   13654:	0003      	movs	r3, r0
   13656:	60fb      	str	r3, [r7, #12]
			ptr_tocken = strtok(ptr_tocken,",");
   13658:	4a40      	ldr	r2, [pc, #256]	; (1375c <gsm_responseLine_isCSQN+0x150>)
   1365a:	68fb      	ldr	r3, [r7, #12]
   1365c:	0011      	movs	r1, r2
   1365e:	0018      	movs	r0, r3
   13660:	4b3d      	ldr	r3, [pc, #244]	; (13758 <gsm_responseLine_isCSQN+0x14c>)
   13662:	4798      	blx	r3
   13664:	0003      	movs	r3, r0
   13666:	60fb      	str	r3, [r7, #12]
			//RemoveSpaces(ptr_tocken);
			uint8_t nw = atoi(ptr_tocken);
   13668:	68fb      	ldr	r3, [r7, #12]
   1366a:	0018      	movs	r0, r3
   1366c:	4b3c      	ldr	r3, [pc, #240]	; (13760 <gsm_responseLine_isCSQN+0x154>)
   1366e:	4798      	blx	r3
   13670:	0002      	movs	r2, r0
   13672:	230b      	movs	r3, #11
   13674:	18fb      	adds	r3, r7, r3
   13676:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   13678:	230b      	movs	r3, #11
   1367a:	18fb      	adds	r3, r7, r3
   1367c:	781b      	ldrb	r3, [r3, #0]
   1367e:	2b00      	cmp	r3, #0
   13680:	d009      	beq.n	13696 <gsm_responseLine_isCSQN+0x8a>
   13682:	230b      	movs	r3, #11
   13684:	18fb      	adds	r3, r7, r3
   13686:	781b      	ldrb	r3, [r3, #0]
   13688:	2b01      	cmp	r3, #1
   1368a:	d004      	beq.n	13696 <gsm_responseLine_isCSQN+0x8a>
   1368c:	230b      	movs	r3, #11
   1368e:	18fb      	adds	r3, r7, r3
   13690:	781b      	ldrb	r3, [r3, #0]
   13692:	2b63      	cmp	r3, #99	; 0x63
   13694:	d103      	bne.n	1369e <gsm_responseLine_isCSQN+0x92>
			{
				*signal= 0;
   13696:	683b      	ldr	r3, [r7, #0]
   13698:	2200      	movs	r2, #0
   1369a:	701a      	strb	r2, [r3, #0]
   1369c:	e04c      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
			}
			else
			{
				if (nw>=2 && nw<=7)
   1369e:	230b      	movs	r3, #11
   136a0:	18fb      	adds	r3, r7, r3
   136a2:	781b      	ldrb	r3, [r3, #0]
   136a4:	2b01      	cmp	r3, #1
   136a6:	d908      	bls.n	136ba <gsm_responseLine_isCSQN+0xae>
   136a8:	230b      	movs	r3, #11
   136aa:	18fb      	adds	r3, r7, r3
   136ac:	781b      	ldrb	r3, [r3, #0]
   136ae:	2b07      	cmp	r3, #7
   136b0:	d803      	bhi.n	136ba <gsm_responseLine_isCSQN+0xae>
				{
					*signal= 1;
   136b2:	683b      	ldr	r3, [r7, #0]
   136b4:	2201      	movs	r2, #1
   136b6:	701a      	strb	r2, [r3, #0]
   136b8:	e03e      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=8 && nw<=13)
   136ba:	230b      	movs	r3, #11
   136bc:	18fb      	adds	r3, r7, r3
   136be:	781b      	ldrb	r3, [r3, #0]
   136c0:	2b07      	cmp	r3, #7
   136c2:	d908      	bls.n	136d6 <gsm_responseLine_isCSQN+0xca>
   136c4:	230b      	movs	r3, #11
   136c6:	18fb      	adds	r3, r7, r3
   136c8:	781b      	ldrb	r3, [r3, #0]
   136ca:	2b0d      	cmp	r3, #13
   136cc:	d803      	bhi.n	136d6 <gsm_responseLine_isCSQN+0xca>
				{
					*signal= 2;
   136ce:	683b      	ldr	r3, [r7, #0]
   136d0:	2202      	movs	r2, #2
   136d2:	701a      	strb	r2, [r3, #0]
   136d4:	e030      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=14 && nw<=19)
   136d6:	230b      	movs	r3, #11
   136d8:	18fb      	adds	r3, r7, r3
   136da:	781b      	ldrb	r3, [r3, #0]
   136dc:	2b0d      	cmp	r3, #13
   136de:	d908      	bls.n	136f2 <gsm_responseLine_isCSQN+0xe6>
   136e0:	230b      	movs	r3, #11
   136e2:	18fb      	adds	r3, r7, r3
   136e4:	781b      	ldrb	r3, [r3, #0]
   136e6:	2b13      	cmp	r3, #19
   136e8:	d803      	bhi.n	136f2 <gsm_responseLine_isCSQN+0xe6>
				{
					*signal= 3;
   136ea:	683b      	ldr	r3, [r7, #0]
   136ec:	2203      	movs	r2, #3
   136ee:	701a      	strb	r2, [r3, #0]
   136f0:	e022      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=20 && nw<=25)
   136f2:	230b      	movs	r3, #11
   136f4:	18fb      	adds	r3, r7, r3
   136f6:	781b      	ldrb	r3, [r3, #0]
   136f8:	2b13      	cmp	r3, #19
   136fa:	d908      	bls.n	1370e <gsm_responseLine_isCSQN+0x102>
   136fc:	230b      	movs	r3, #11
   136fe:	18fb      	adds	r3, r7, r3
   13700:	781b      	ldrb	r3, [r3, #0]
   13702:	2b19      	cmp	r3, #25
   13704:	d803      	bhi.n	1370e <gsm_responseLine_isCSQN+0x102>
				{
					*signal= 4;
   13706:	683b      	ldr	r3, [r7, #0]
   13708:	2204      	movs	r2, #4
   1370a:	701a      	strb	r2, [r3, #0]
   1370c:	e014      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=26 && nw<=31)
   1370e:	230b      	movs	r3, #11
   13710:	18fb      	adds	r3, r7, r3
   13712:	781b      	ldrb	r3, [r3, #0]
   13714:	2b19      	cmp	r3, #25
   13716:	d908      	bls.n	1372a <gsm_responseLine_isCSQN+0x11e>
   13718:	230b      	movs	r3, #11
   1371a:	18fb      	adds	r3, r7, r3
   1371c:	781b      	ldrb	r3, [r3, #0]
   1371e:	2b1f      	cmp	r3, #31
   13720:	d803      	bhi.n	1372a <gsm_responseLine_isCSQN+0x11e>
				{
					*signal= 5;
   13722:	683b      	ldr	r3, [r7, #0]
   13724:	2205      	movs	r2, #5
   13726:	701a      	strb	r2, [r3, #0]
   13728:	e006      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
				else
				{
					*signal= 0;
   1372a:	683b      	ldr	r3, [r7, #0]
   1372c:	2200      	movs	r2, #0
   1372e:	701a      	strb	r2, [r3, #0]
   13730:	e002      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
			}
		}
		else
		{
			*signal= 0;
   13732:	683b      	ldr	r3, [r7, #0]
   13734:	2200      	movs	r2, #0
   13736:	701a      	strb	r2, [r3, #0]
		}
		return true;
   13738:	2301      	movs	r3, #1
   1373a:	e000      	b.n	1373e <gsm_responseLine_isCSQN+0x132>
	}
	
	return false;
   1373c:	2300      	movs	r3, #0
}
   1373e:	0018      	movs	r0, r3
   13740:	46bd      	mov	sp, r7
   13742:	b004      	add	sp, #16
   13744:	bd80      	pop	{r7, pc}
   13746:	46c0      	nop			; (mov r8, r8)
   13748:	0002a734 	.word	0x0002a734
   1374c:	00029a1b 	.word	0x00029a1b
   13750:	0002a594 	.word	0x0002a594
   13754:	0002a528 	.word	0x0002a528
   13758:	00029a4d 	.word	0x00029a4d
   1375c:	0002a52c 	.word	0x0002a52c
   13760:	00029641 	.word	0x00029641

00013764 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
   13764:	b580      	push	{r7, lr}
   13766:	b084      	sub	sp, #16
   13768:	af00      	add	r7, sp, #0
   1376a:	6078      	str	r0, [r7, #4]
   1376c:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
   1376e:	4a1e      	ldr	r2, [pc, #120]	; (137e8 <gsm_responseLine_get_IncommingCallNo+0x84>)
   13770:	687b      	ldr	r3, [r7, #4]
   13772:	0011      	movs	r1, r2
   13774:	0018      	movs	r0, r3
   13776:	4b1d      	ldr	r3, [pc, #116]	; (137ec <gsm_responseLine_get_IncommingCallNo+0x88>)
   13778:	4798      	blx	r3
   1377a:	1e03      	subs	r3, r0, #0
   1377c:	d02e      	beq.n	137dc <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,":");
   1377e:	4a1c      	ldr	r2, [pc, #112]	; (137f0 <gsm_responseLine_get_IncommingCallNo+0x8c>)
   13780:	687b      	ldr	r3, [r7, #4]
   13782:	0011      	movs	r1, r2
   13784:	0018      	movs	r0, r3
   13786:	4b1b      	ldr	r3, [pc, #108]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   13788:	4798      	blx	r3
   1378a:	0003      	movs	r3, r0
   1378c:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,",");
   1378e:	4b1a      	ldr	r3, [pc, #104]	; (137f8 <gsm_responseLine_get_IncommingCallNo+0x94>)
   13790:	0019      	movs	r1, r3
   13792:	2000      	movs	r0, #0
   13794:	4b17      	ldr	r3, [pc, #92]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   13796:	4798      	blx	r3
   13798:	0003      	movs	r3, r0
   1379a:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(ptr_tocken,"\"");
   1379c:	4a17      	ldr	r2, [pc, #92]	; (137fc <gsm_responseLine_get_IncommingCallNo+0x98>)
   1379e:	68fb      	ldr	r3, [r7, #12]
   137a0:	0011      	movs	r1, r2
   137a2:	0018      	movs	r0, r3
   137a4:	4b13      	ldr	r3, [pc, #76]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   137a6:	4798      	blx	r3
   137a8:	0003      	movs	r3, r0
   137aa:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,"\"");
   137ac:	4b13      	ldr	r3, [pc, #76]	; (137fc <gsm_responseLine_get_IncommingCallNo+0x98>)
   137ae:	0019      	movs	r1, r3
   137b0:	2000      	movs	r0, #0
   137b2:	4b10      	ldr	r3, [pc, #64]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   137b4:	4798      	blx	r3
   137b6:	0003      	movs	r3, r0
   137b8:	60fb      	str	r3, [r7, #12]
		
		if (!strstr(ptr_tocken,"+"))
   137ba:	68fb      	ldr	r3, [r7, #12]
   137bc:	212b      	movs	r1, #43	; 0x2b
   137be:	0018      	movs	r0, r3
   137c0:	4b0f      	ldr	r3, [pc, #60]	; (13800 <gsm_responseLine_get_IncommingCallNo+0x9c>)
   137c2:	4798      	blx	r3
   137c4:	1e03      	subs	r3, r0, #0
   137c6:	d101      	bne.n	137cc <gsm_responseLine_get_IncommingCallNo+0x68>
		{
			return false;
   137c8:	2300      	movs	r3, #0
   137ca:	e008      	b.n	137de <gsm_responseLine_get_IncommingCallNo+0x7a>
		}
		strcpy(phone_number, (char *)(ptr_tocken));
   137cc:	68fa      	ldr	r2, [r7, #12]
   137ce:	683b      	ldr	r3, [r7, #0]
   137d0:	0011      	movs	r1, r2
   137d2:	0018      	movs	r0, r3
   137d4:	4b0b      	ldr	r3, [pc, #44]	; (13804 <gsm_responseLine_get_IncommingCallNo+0xa0>)
   137d6:	4798      	blx	r3
		return true;
   137d8:	2301      	movs	r3, #1
   137da:	e000      	b.n	137de <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
   137dc:	2300      	movs	r3, #0
	}
}
   137de:	0018      	movs	r0, r3
   137e0:	46bd      	mov	sp, r7
   137e2:	b004      	add	sp, #16
   137e4:	bd80      	pop	{r7, pc}
   137e6:	46c0      	nop			; (mov r8, r8)
   137e8:	0002a73c 	.word	0x0002a73c
   137ec:	00029a1b 	.word	0x00029a1b
   137f0:	0002a528 	.word	0x0002a528
   137f4:	00029a4d 	.word	0x00029a4d
   137f8:	0002a52c 	.word	0x0002a52c
   137fc:	0002a718 	.word	0x0002a718
   13800:	000299bf 	.word	0x000299bf
   13804:	000299db 	.word	0x000299db

00013808 <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
   13808:	b580      	push	{r7, lr}
   1380a:	b082      	sub	sp, #8
   1380c:	af00      	add	r7, sp, #0
   1380e:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
   13810:	4a16      	ldr	r2, [pc, #88]	; (1386c <gsm_responseLine_isCallCut+0x64>)
   13812:	687b      	ldr	r3, [r7, #4]
   13814:	0011      	movs	r1, r2
   13816:	0018      	movs	r0, r3
   13818:	4b15      	ldr	r3, [pc, #84]	; (13870 <gsm_responseLine_isCallCut+0x68>)
   1381a:	4798      	blx	r3
   1381c:	1e03      	subs	r3, r0, #0
   1381e:	d001      	beq.n	13824 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
   13820:	2301      	movs	r3, #1
   13822:	e01e      	b.n	13862 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
   13824:	4a13      	ldr	r2, [pc, #76]	; (13874 <gsm_responseLine_isCallCut+0x6c>)
   13826:	687b      	ldr	r3, [r7, #4]
   13828:	0011      	movs	r1, r2
   1382a:	0018      	movs	r0, r3
   1382c:	4b10      	ldr	r3, [pc, #64]	; (13870 <gsm_responseLine_isCallCut+0x68>)
   1382e:	4798      	blx	r3
   13830:	1e03      	subs	r3, r0, #0
   13832:	d001      	beq.n	13838 <gsm_responseLine_isCallCut+0x30>
	{
		return true;
   13834:	2301      	movs	r3, #1
   13836:	e014      	b.n	13862 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
   13838:	4a0f      	ldr	r2, [pc, #60]	; (13878 <gsm_responseLine_isCallCut+0x70>)
   1383a:	687b      	ldr	r3, [r7, #4]
   1383c:	0011      	movs	r1, r2
   1383e:	0018      	movs	r0, r3
   13840:	4b0b      	ldr	r3, [pc, #44]	; (13870 <gsm_responseLine_isCallCut+0x68>)
   13842:	4798      	blx	r3
   13844:	1e03      	subs	r3, r0, #0
   13846:	d001      	beq.n	1384c <gsm_responseLine_isCallCut+0x44>
	{
		return true;
   13848:	2301      	movs	r3, #1
   1384a:	e00a      	b.n	13862 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
   1384c:	4a0b      	ldr	r2, [pc, #44]	; (1387c <gsm_responseLine_isCallCut+0x74>)
   1384e:	687b      	ldr	r3, [r7, #4]
   13850:	0011      	movs	r1, r2
   13852:	0018      	movs	r0, r3
   13854:	4b06      	ldr	r3, [pc, #24]	; (13870 <gsm_responseLine_isCallCut+0x68>)
   13856:	4798      	blx	r3
   13858:	1e03      	subs	r3, r0, #0
   1385a:	d001      	beq.n	13860 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
   1385c:	2301      	movs	r3, #1
   1385e:	e000      	b.n	13862 <gsm_responseLine_isCallCut+0x5a>
	}

	return false;
   13860:	2300      	movs	r3, #0
}
   13862:	0018      	movs	r0, r3
   13864:	46bd      	mov	sp, r7
   13866:	b002      	add	sp, #8
   13868:	bd80      	pop	{r7, pc}
   1386a:	46c0      	nop			; (mov r8, r8)
   1386c:	0002a744 	.word	0x0002a744
   13870:	00029a1b 	.word	0x00029a1b
   13874:	0002a750 	.word	0x0002a750
   13878:	0002a758 	.word	0x0002a758
   1387c:	0002a408 	.word	0x0002a408

00013880 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
   13880:	b580      	push	{r7, lr}
   13882:	b082      	sub	sp, #8
   13884:	af00      	add	r7, sp, #0
   13886:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
   13888:	4a07      	ldr	r2, [pc, #28]	; (138a8 <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
   1388a:	687b      	ldr	r3, [r7, #4]
   1388c:	0011      	movs	r1, r2
   1388e:	0018      	movs	r0, r3
   13890:	4b06      	ldr	r3, [pc, #24]	; (138ac <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
   13892:	4798      	blx	r3
   13894:	1e03      	subs	r3, r0, #0
   13896:	d001      	beq.n	1389c <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
   13898:	2301      	movs	r3, #1
   1389a:	e000      	b.n	1389e <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
   1389c:	2300      	movs	r3, #0
	}
}
   1389e:	0018      	movs	r0, r3
   138a0:	46bd      	mov	sp, r7
   138a2:	b002      	add	sp, #8
   138a4:	bd80      	pop	{r7, pc}
   138a6:	46c0      	nop			; (mov r8, r8)
   138a8:	0002a764 	.word	0x0002a764
   138ac:	00029a1b 	.word	0x00029a1b

000138b0 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
   138b0:	b580      	push	{r7, lr}
   138b2:	b082      	sub	sp, #8
   138b4:	af00      	add	r7, sp, #0
   138b6:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
   138b8:	4a07      	ldr	r2, [pc, #28]	; (138d8 <gsm_responseLine_is_StopSound_Received+0x28>)
   138ba:	687b      	ldr	r3, [r7, #4]
   138bc:	0011      	movs	r1, r2
   138be:	0018      	movs	r0, r3
   138c0:	4b06      	ldr	r3, [pc, #24]	; (138dc <gsm_responseLine_is_StopSound_Received+0x2c>)
   138c2:	4798      	blx	r3
   138c4:	1e03      	subs	r3, r0, #0
   138c6:	d001      	beq.n	138cc <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
   138c8:	2301      	movs	r3, #1
   138ca:	e000      	b.n	138ce <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
   138cc:	2300      	movs	r3, #0
	}
}
   138ce:	0018      	movs	r0, r3
   138d0:	46bd      	mov	sp, r7
   138d2:	b002      	add	sp, #8
   138d4:	bd80      	pop	{r7, pc}
   138d6:	46c0      	nop			; (mov r8, r8)
   138d8:	0002a76c 	.word	0x0002a76c
   138dc:	00029a1b 	.word	0x00029a1b

000138e0 <system_pinmux_get_group_from_gpio_pin>:
{
   138e0:	b580      	push	{r7, lr}
   138e2:	b084      	sub	sp, #16
   138e4:	af00      	add	r7, sp, #0
   138e6:	0002      	movs	r2, r0
   138e8:	1dfb      	adds	r3, r7, #7
   138ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   138ec:	230f      	movs	r3, #15
   138ee:	18fb      	adds	r3, r7, r3
   138f0:	1dfa      	adds	r2, r7, #7
   138f2:	7812      	ldrb	r2, [r2, #0]
   138f4:	09d2      	lsrs	r2, r2, #7
   138f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   138f8:	230e      	movs	r3, #14
   138fa:	18fb      	adds	r3, r7, r3
   138fc:	1dfa      	adds	r2, r7, #7
   138fe:	7812      	ldrb	r2, [r2, #0]
   13900:	0952      	lsrs	r2, r2, #5
   13902:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13904:	4b0d      	ldr	r3, [pc, #52]	; (1393c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13906:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13908:	230f      	movs	r3, #15
   1390a:	18fb      	adds	r3, r7, r3
   1390c:	781b      	ldrb	r3, [r3, #0]
   1390e:	2b00      	cmp	r3, #0
   13910:	d10f      	bne.n	13932 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13912:	230f      	movs	r3, #15
   13914:	18fb      	adds	r3, r7, r3
   13916:	781b      	ldrb	r3, [r3, #0]
   13918:	009b      	lsls	r3, r3, #2
   1391a:	2210      	movs	r2, #16
   1391c:	4694      	mov	ip, r2
   1391e:	44bc      	add	ip, r7
   13920:	4463      	add	r3, ip
   13922:	3b08      	subs	r3, #8
   13924:	681a      	ldr	r2, [r3, #0]
   13926:	230e      	movs	r3, #14
   13928:	18fb      	adds	r3, r7, r3
   1392a:	781b      	ldrb	r3, [r3, #0]
   1392c:	01db      	lsls	r3, r3, #7
   1392e:	18d3      	adds	r3, r2, r3
   13930:	e000      	b.n	13934 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13932:	2300      	movs	r3, #0
}
   13934:	0018      	movs	r0, r3
   13936:	46bd      	mov	sp, r7
   13938:	b004      	add	sp, #16
   1393a:	bd80      	pop	{r7, pc}
   1393c:	41004400 	.word	0x41004400

00013940 <port_get_group_from_gpio_pin>:
{
   13940:	b580      	push	{r7, lr}
   13942:	b082      	sub	sp, #8
   13944:	af00      	add	r7, sp, #0
   13946:	0002      	movs	r2, r0
   13948:	1dfb      	adds	r3, r7, #7
   1394a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1394c:	1dfb      	adds	r3, r7, #7
   1394e:	781b      	ldrb	r3, [r3, #0]
   13950:	0018      	movs	r0, r3
   13952:	4b03      	ldr	r3, [pc, #12]	; (13960 <port_get_group_from_gpio_pin+0x20>)
   13954:	4798      	blx	r3
   13956:	0003      	movs	r3, r0
}
   13958:	0018      	movs	r0, r3
   1395a:	46bd      	mov	sp, r7
   1395c:	b002      	add	sp, #8
   1395e:	bd80      	pop	{r7, pc}
   13960:	000138e1 	.word	0x000138e1

00013964 <port_get_config_defaults>:
{
   13964:	b580      	push	{r7, lr}
   13966:	b082      	sub	sp, #8
   13968:	af00      	add	r7, sp, #0
   1396a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1396c:	687b      	ldr	r3, [r7, #4]
   1396e:	2200      	movs	r2, #0
   13970:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   13972:	687b      	ldr	r3, [r7, #4]
   13974:	2201      	movs	r2, #1
   13976:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   13978:	687b      	ldr	r3, [r7, #4]
   1397a:	2200      	movs	r2, #0
   1397c:	709a      	strb	r2, [r3, #2]
}
   1397e:	46c0      	nop			; (mov r8, r8)
   13980:	46bd      	mov	sp, r7
   13982:	b002      	add	sp, #8
   13984:	bd80      	pop	{r7, pc}
	...

00013988 <port_pin_set_output_level>:
{
   13988:	b580      	push	{r7, lr}
   1398a:	b084      	sub	sp, #16
   1398c:	af00      	add	r7, sp, #0
   1398e:	0002      	movs	r2, r0
   13990:	1dfb      	adds	r3, r7, #7
   13992:	701a      	strb	r2, [r3, #0]
   13994:	1dbb      	adds	r3, r7, #6
   13996:	1c0a      	adds	r2, r1, #0
   13998:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1399a:	1dfb      	adds	r3, r7, #7
   1399c:	781b      	ldrb	r3, [r3, #0]
   1399e:	0018      	movs	r0, r3
   139a0:	4b0d      	ldr	r3, [pc, #52]	; (139d8 <port_pin_set_output_level+0x50>)
   139a2:	4798      	blx	r3
   139a4:	0003      	movs	r3, r0
   139a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   139a8:	1dfb      	adds	r3, r7, #7
   139aa:	781b      	ldrb	r3, [r3, #0]
   139ac:	221f      	movs	r2, #31
   139ae:	4013      	ands	r3, r2
   139b0:	2201      	movs	r2, #1
   139b2:	409a      	lsls	r2, r3
   139b4:	0013      	movs	r3, r2
   139b6:	60bb      	str	r3, [r7, #8]
	if (level) {
   139b8:	1dbb      	adds	r3, r7, #6
   139ba:	781b      	ldrb	r3, [r3, #0]
   139bc:	2b00      	cmp	r3, #0
   139be:	d003      	beq.n	139c8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   139c0:	68fb      	ldr	r3, [r7, #12]
   139c2:	68ba      	ldr	r2, [r7, #8]
   139c4:	619a      	str	r2, [r3, #24]
}
   139c6:	e002      	b.n	139ce <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   139c8:	68fb      	ldr	r3, [r7, #12]
   139ca:	68ba      	ldr	r2, [r7, #8]
   139cc:	615a      	str	r2, [r3, #20]
}
   139ce:	46c0      	nop			; (mov r8, r8)
   139d0:	46bd      	mov	sp, r7
   139d2:	b004      	add	sp, #16
   139d4:	bd80      	pop	{r7, pc}
   139d6:	46c0      	nop			; (mov r8, r8)
   139d8:	00013941 	.word	0x00013941

000139dc <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
   139dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   139de:	b08b      	sub	sp, #44	; 0x2c
   139e0:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
   139e2:	230b      	movs	r3, #11
   139e4:	2218      	movs	r2, #24
   139e6:	4694      	mov	ip, r2
   139e8:	44bc      	add	ip, r7
   139ea:	4463      	add	r3, ip
   139ec:	2210      	movs	r2, #16
   139ee:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
   139f0:	230a      	movs	r3, #10
   139f2:	2218      	movs	r2, #24
   139f4:	4694      	mov	ip, r2
   139f6:	44bc      	add	ip, r7
   139f8:	4463      	add	r3, ip
   139fa:	2202      	movs	r2, #2
   139fc:	701a      	strb	r2, [r3, #0]
	delay_init();
   139fe:	4b90      	ldr	r3, [pc, #576]	; (13c40 <LCD_init+0x264>)
   13a00:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
   13a02:	4b90      	ldr	r3, [pc, #576]	; (13c44 <LCD_init+0x268>)
   13a04:	223f      	movs	r2, #63	; 0x3f
   13a06:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
   13a08:	4b8f      	ldr	r3, [pc, #572]	; (13c48 <LCD_init+0x26c>)
   13a0a:	223e      	movs	r2, #62	; 0x3e
   13a0c:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
   13a0e:	4b8f      	ldr	r3, [pc, #572]	; (13c4c <LCD_init+0x270>)
   13a10:	2221      	movs	r2, #33	; 0x21
   13a12:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
   13a14:	4b8d      	ldr	r3, [pc, #564]	; (13c4c <LCD_init+0x270>)
   13a16:	2220      	movs	r2, #32
   13a18:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
   13a1a:	4b8c      	ldr	r3, [pc, #560]	; (13c4c <LCD_init+0x270>)
   13a1c:	2223      	movs	r2, #35	; 0x23
   13a1e:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
   13a20:	4b8a      	ldr	r3, [pc, #552]	; (13c4c <LCD_init+0x270>)
   13a22:	2222      	movs	r2, #34	; 0x22
   13a24:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   13a26:	4b8a      	ldr	r3, [pc, #552]	; (13c50 <LCD_init+0x274>)
   13a28:	2200      	movs	r2, #0
   13a2a:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
   13a2c:	230a      	movs	r3, #10
   13a2e:	2218      	movs	r2, #24
   13a30:	4694      	mov	ip, r2
   13a32:	44bc      	add	ip, r7
   13a34:	4463      	add	r3, ip
   13a36:	781b      	ldrb	r3, [r3, #0]
   13a38:	2b01      	cmp	r3, #1
   13a3a:	d906      	bls.n	13a4a <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
   13a3c:	4b84      	ldr	r3, [pc, #528]	; (13c50 <LCD_init+0x274>)
   13a3e:	781b      	ldrb	r3, [r3, #0]
   13a40:	2208      	movs	r2, #8
   13a42:	4313      	orrs	r3, r2
   13a44:	b2da      	uxtb	r2, r3
   13a46:	4b82      	ldr	r3, [pc, #520]	; (13c50 <LCD_init+0x274>)
   13a48:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
   13a4a:	4b82      	ldr	r3, [pc, #520]	; (13c54 <LCD_init+0x278>)
   13a4c:	220a      	movs	r2, #10
   13a4e:	2118      	movs	r1, #24
   13a50:	468c      	mov	ip, r1
   13a52:	44bc      	add	ip, r7
   13a54:	4462      	add	r2, ip
   13a56:	7812      	ldrb	r2, [r2, #0]
   13a58:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
   13a5a:	230b      	movs	r3, #11
   13a5c:	2218      	movs	r2, #24
   13a5e:	4694      	mov	ip, r2
   13a60:	44bc      	add	ip, r7
   13a62:	4463      	add	r3, ip
   13a64:	781a      	ldrb	r2, [r3, #0]
   13a66:	230b      	movs	r3, #11
   13a68:	2118      	movs	r1, #24
   13a6a:	468c      	mov	ip, r1
   13a6c:	44bc      	add	ip, r7
   13a6e:	4463      	add	r3, ip
   13a70:	781b      	ldrb	r3, [r3, #0]
   13a72:	3340      	adds	r3, #64	; 0x40
   13a74:	2140      	movs	r1, #64	; 0x40
   13a76:	2000      	movs	r0, #0
   13a78:	4c77      	ldr	r4, [pc, #476]	; (13c58 <LCD_init+0x27c>)
   13a7a:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   13a7c:	231c      	movs	r3, #28
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	0018      	movs	r0, r3
   13a82:	4b76      	ldr	r3, [pc, #472]	; (13c5c <LCD_init+0x280>)
   13a84:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   13a86:	231c      	movs	r3, #28
   13a88:	18fb      	adds	r3, r7, r3
   13a8a:	2201      	movs	r2, #1
   13a8c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
   13a8e:	4b6d      	ldr	r3, [pc, #436]	; (13c44 <LCD_init+0x268>)
   13a90:	781b      	ldrb	r3, [r3, #0]
   13a92:	221c      	movs	r2, #28
   13a94:	18ba      	adds	r2, r7, r2
   13a96:	0011      	movs	r1, r2
   13a98:	0018      	movs	r0, r3
   13a9a:	4b71      	ldr	r3, [pc, #452]	; (13c60 <LCD_init+0x284>)
   13a9c:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
   13a9e:	4b6a      	ldr	r3, [pc, #424]	; (13c48 <LCD_init+0x26c>)
   13aa0:	781b      	ldrb	r3, [r3, #0]
   13aa2:	221c      	movs	r2, #28
   13aa4:	18ba      	adds	r2, r7, r2
   13aa6:	0011      	movs	r1, r2
   13aa8:	0018      	movs	r0, r3
   13aaa:	4b6d      	ldr	r3, [pc, #436]	; (13c60 <LCD_init+0x284>)
   13aac:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
   13aae:	2300      	movs	r3, #0
   13ab0:	627b      	str	r3, [r7, #36]	; 0x24
   13ab2:	e00c      	b.n	13ace <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
   13ab4:	4a65      	ldr	r2, [pc, #404]	; (13c4c <LCD_init+0x270>)
   13ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ab8:	18d3      	adds	r3, r2, r3
   13aba:	781b      	ldrb	r3, [r3, #0]
   13abc:	221c      	movs	r2, #28
   13abe:	18ba      	adds	r2, r7, r2
   13ac0:	0011      	movs	r1, r2
   13ac2:	0018      	movs	r0, r3
   13ac4:	4b66      	ldr	r3, [pc, #408]	; (13c60 <LCD_init+0x284>)
   13ac6:	4798      	blx	r3
	for (int i=0; i<4; ++i)
   13ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13aca:	3301      	adds	r3, #1
   13acc:	627b      	str	r3, [r7, #36]	; 0x24
   13ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ad0:	2b03      	cmp	r3, #3
   13ad2:	ddef      	ble.n	13ab4 <LCD_init+0xd8>
	}
	delay_us(50000);
   13ad4:	2000      	movs	r0, #0
   13ad6:	4b63      	ldr	r3, [pc, #396]	; (13c64 <LCD_init+0x288>)
   13ad8:	4798      	blx	r3
   13ada:	0003      	movs	r3, r0
   13adc:	613b      	str	r3, [r7, #16]
   13ade:	2300      	movs	r3, #0
   13ae0:	617b      	str	r3, [r7, #20]
   13ae2:	4c61      	ldr	r4, [pc, #388]	; (13c68 <LCD_init+0x28c>)
   13ae4:	4a61      	ldr	r2, [pc, #388]	; (13c6c <LCD_init+0x290>)
   13ae6:	2300      	movs	r3, #0
   13ae8:	6938      	ldr	r0, [r7, #16]
   13aea:	6979      	ldr	r1, [r7, #20]
   13aec:	47a0      	blx	r4
   13aee:	0003      	movs	r3, r0
   13af0:	000c      	movs	r4, r1
   13af2:	0019      	movs	r1, r3
   13af4:	0022      	movs	r2, r4
   13af6:	4b5e      	ldr	r3, [pc, #376]	; (13c70 <LCD_init+0x294>)
   13af8:	2400      	movs	r4, #0
   13afa:	18c9      	adds	r1, r1, r3
   13afc:	4162      	adcs	r2, r4
   13afe:	0008      	movs	r0, r1
   13b00:	0011      	movs	r1, r2
   13b02:	4c5c      	ldr	r4, [pc, #368]	; (13c74 <LCD_init+0x298>)
   13b04:	4a5c      	ldr	r2, [pc, #368]	; (13c78 <LCD_init+0x29c>)
   13b06:	2300      	movs	r3, #0
   13b08:	47a0      	blx	r4
   13b0a:	0003      	movs	r3, r0
   13b0c:	000c      	movs	r4, r1
   13b0e:	0018      	movs	r0, r3
   13b10:	4b5a      	ldr	r3, [pc, #360]	; (13c7c <LCD_init+0x2a0>)
   13b12:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
   13b14:	4b4b      	ldr	r3, [pc, #300]	; (13c44 <LCD_init+0x268>)
   13b16:	781b      	ldrb	r3, [r3, #0]
   13b18:	2100      	movs	r1, #0
   13b1a:	0018      	movs	r0, r3
   13b1c:	4b58      	ldr	r3, [pc, #352]	; (13c80 <LCD_init+0x2a4>)
   13b1e:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
   13b20:	4b49      	ldr	r3, [pc, #292]	; (13c48 <LCD_init+0x26c>)
   13b22:	781b      	ldrb	r3, [r3, #0]
   13b24:	2100      	movs	r1, #0
   13b26:	0018      	movs	r0, r3
   13b28:	4b55      	ldr	r3, [pc, #340]	; (13c80 <LCD_init+0x2a4>)
   13b2a:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
   13b2c:	2003      	movs	r0, #3
   13b2e:	4b55      	ldr	r3, [pc, #340]	; (13c84 <LCD_init+0x2a8>)
   13b30:	4798      	blx	r3
	 delay_us(4500); 
   13b32:	2000      	movs	r0, #0
   13b34:	4b4b      	ldr	r3, [pc, #300]	; (13c64 <LCD_init+0x288>)
   13b36:	4798      	blx	r3
   13b38:	0003      	movs	r3, r0
   13b3a:	60bb      	str	r3, [r7, #8]
   13b3c:	2300      	movs	r3, #0
   13b3e:	60fb      	str	r3, [r7, #12]
   13b40:	4c49      	ldr	r4, [pc, #292]	; (13c68 <LCD_init+0x28c>)
   13b42:	4a51      	ldr	r2, [pc, #324]	; (13c88 <LCD_init+0x2ac>)
   13b44:	2300      	movs	r3, #0
   13b46:	68b8      	ldr	r0, [r7, #8]
   13b48:	68f9      	ldr	r1, [r7, #12]
   13b4a:	47a0      	blx	r4
   13b4c:	0003      	movs	r3, r0
   13b4e:	000c      	movs	r4, r1
   13b50:	0019      	movs	r1, r3
   13b52:	0022      	movs	r2, r4
   13b54:	4b46      	ldr	r3, [pc, #280]	; (13c70 <LCD_init+0x294>)
   13b56:	2400      	movs	r4, #0
   13b58:	18c9      	adds	r1, r1, r3
   13b5a:	4162      	adcs	r2, r4
   13b5c:	0008      	movs	r0, r1
   13b5e:	0011      	movs	r1, r2
   13b60:	4c44      	ldr	r4, [pc, #272]	; (13c74 <LCD_init+0x298>)
   13b62:	4a45      	ldr	r2, [pc, #276]	; (13c78 <LCD_init+0x29c>)
   13b64:	2300      	movs	r3, #0
   13b66:	47a0      	blx	r4
   13b68:	0003      	movs	r3, r0
   13b6a:	000c      	movs	r4, r1
   13b6c:	0018      	movs	r0, r3
   13b6e:	4b43      	ldr	r3, [pc, #268]	; (13c7c <LCD_init+0x2a0>)
   13b70:	4798      	blx	r3
	 
	 write4bits(0x03);
   13b72:	2003      	movs	r0, #3
   13b74:	4b43      	ldr	r3, [pc, #268]	; (13c84 <LCD_init+0x2a8>)
   13b76:	4798      	blx	r3
	 delay_us(4500); 
   13b78:	2000      	movs	r0, #0
   13b7a:	4b3a      	ldr	r3, [pc, #232]	; (13c64 <LCD_init+0x288>)
   13b7c:	4798      	blx	r3
   13b7e:	0003      	movs	r3, r0
   13b80:	603b      	str	r3, [r7, #0]
   13b82:	2300      	movs	r3, #0
   13b84:	607b      	str	r3, [r7, #4]
   13b86:	4c38      	ldr	r4, [pc, #224]	; (13c68 <LCD_init+0x28c>)
   13b88:	4a3f      	ldr	r2, [pc, #252]	; (13c88 <LCD_init+0x2ac>)
   13b8a:	2300      	movs	r3, #0
   13b8c:	6838      	ldr	r0, [r7, #0]
   13b8e:	6879      	ldr	r1, [r7, #4]
   13b90:	47a0      	blx	r4
   13b92:	0003      	movs	r3, r0
   13b94:	000c      	movs	r4, r1
   13b96:	0019      	movs	r1, r3
   13b98:	0022      	movs	r2, r4
   13b9a:	4b35      	ldr	r3, [pc, #212]	; (13c70 <LCD_init+0x294>)
   13b9c:	2400      	movs	r4, #0
   13b9e:	18c9      	adds	r1, r1, r3
   13ba0:	4162      	adcs	r2, r4
   13ba2:	0008      	movs	r0, r1
   13ba4:	0011      	movs	r1, r2
   13ba6:	4c33      	ldr	r4, [pc, #204]	; (13c74 <LCD_init+0x298>)
   13ba8:	4a33      	ldr	r2, [pc, #204]	; (13c78 <LCD_init+0x29c>)
   13baa:	2300      	movs	r3, #0
   13bac:	47a0      	blx	r4
   13bae:	0003      	movs	r3, r0
   13bb0:	000c      	movs	r4, r1
   13bb2:	0018      	movs	r0, r3
   13bb4:	4b31      	ldr	r3, [pc, #196]	; (13c7c <LCD_init+0x2a0>)
   13bb6:	4798      	blx	r3
	
	 write4bits(0x03);
   13bb8:	2003      	movs	r0, #3
   13bba:	4b32      	ldr	r3, [pc, #200]	; (13c84 <LCD_init+0x2a8>)
   13bbc:	4798      	blx	r3
	 delay_us(150);
   13bbe:	2000      	movs	r0, #0
   13bc0:	4b28      	ldr	r3, [pc, #160]	; (13c64 <LCD_init+0x288>)
   13bc2:	4798      	blx	r3
   13bc4:	0003      	movs	r3, r0
   13bc6:	001d      	movs	r5, r3
   13bc8:	2300      	movs	r3, #0
   13bca:	001e      	movs	r6, r3
   13bcc:	4c26      	ldr	r4, [pc, #152]	; (13c68 <LCD_init+0x28c>)
   13bce:	2296      	movs	r2, #150	; 0x96
   13bd0:	2300      	movs	r3, #0
   13bd2:	0028      	movs	r0, r5
   13bd4:	0031      	movs	r1, r6
   13bd6:	47a0      	blx	r4
   13bd8:	0003      	movs	r3, r0
   13bda:	000c      	movs	r4, r1
   13bdc:	0019      	movs	r1, r3
   13bde:	0022      	movs	r2, r4
   13be0:	4b23      	ldr	r3, [pc, #140]	; (13c70 <LCD_init+0x294>)
   13be2:	2400      	movs	r4, #0
   13be4:	18c9      	adds	r1, r1, r3
   13be6:	4162      	adcs	r2, r4
   13be8:	0008      	movs	r0, r1
   13bea:	0011      	movs	r1, r2
   13bec:	4c21      	ldr	r4, [pc, #132]	; (13c74 <LCD_init+0x298>)
   13bee:	4a22      	ldr	r2, [pc, #136]	; (13c78 <LCD_init+0x29c>)
   13bf0:	2300      	movs	r3, #0
   13bf2:	47a0      	blx	r4
   13bf4:	0003      	movs	r3, r0
   13bf6:	000c      	movs	r4, r1
   13bf8:	0018      	movs	r0, r3
   13bfa:	4b20      	ldr	r3, [pc, #128]	; (13c7c <LCD_init+0x2a0>)
   13bfc:	4798      	blx	r3

	 write4bits(0x02);
   13bfe:	2002      	movs	r0, #2
   13c00:	4b20      	ldr	r3, [pc, #128]	; (13c84 <LCD_init+0x2a8>)
   13c02:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
   13c04:	4b12      	ldr	r3, [pc, #72]	; (13c50 <LCD_init+0x274>)
   13c06:	781b      	ldrb	r3, [r3, #0]
   13c08:	2220      	movs	r2, #32
   13c0a:	4313      	orrs	r3, r2
   13c0c:	b2db      	uxtb	r3, r3
   13c0e:	0018      	movs	r0, r3
   13c10:	4b1e      	ldr	r3, [pc, #120]	; (13c8c <LCD_init+0x2b0>)
   13c12:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   13c14:	4b1e      	ldr	r3, [pc, #120]	; (13c90 <LCD_init+0x2b4>)
   13c16:	2204      	movs	r2, #4
   13c18:	701a      	strb	r2, [r3, #0]
	LCD_display();
   13c1a:	4b1e      	ldr	r3, [pc, #120]	; (13c94 <LCD_init+0x2b8>)
   13c1c:	4798      	blx	r3
	LCD_clear();
   13c1e:	4b1e      	ldr	r3, [pc, #120]	; (13c98 <LCD_init+0x2bc>)
   13c20:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   13c22:	4b1e      	ldr	r3, [pc, #120]	; (13c9c <LCD_init+0x2c0>)
   13c24:	2202      	movs	r2, #2
   13c26:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
   13c28:	4b1c      	ldr	r3, [pc, #112]	; (13c9c <LCD_init+0x2c0>)
   13c2a:	781b      	ldrb	r3, [r3, #0]
   13c2c:	2204      	movs	r2, #4
   13c2e:	4313      	orrs	r3, r2
   13c30:	b2db      	uxtb	r3, r3
   13c32:	0018      	movs	r0, r3
   13c34:	4b15      	ldr	r3, [pc, #84]	; (13c8c <LCD_init+0x2b0>)
   13c36:	4798      	blx	r3
}
   13c38:	46c0      	nop			; (mov r8, r8)
   13c3a:	46bd      	mov	sp, r7
   13c3c:	b00b      	add	sp, #44	; 0x2c
   13c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c40:	0002325d 	.word	0x0002325d
   13c44:	200008e0 	.word	0x200008e0
   13c48:	200008df 	.word	0x200008df
   13c4c:	200008d8 	.word	0x200008d8
   13c50:	200008dd 	.word	0x200008dd
   13c54:	200008d6 	.word	0x200008d6
   13c58:	00013d4d 	.word	0x00013d4d
   13c5c:	00013965 	.word	0x00013965
   13c60:	000238b1 	.word	0x000238b1
   13c64:	0002521d 	.word	0x0002521d
   13c68:	0002728d 	.word	0x0002728d
   13c6c:	0000c350 	.word	0x0000c350
   13c70:	006acfbf 	.word	0x006acfbf
   13c74:	0002724d 	.word	0x0002724d
   13c78:	006acfc0 	.word	0x006acfc0
   13c7c:	20000001 	.word	0x20000001
   13c80:	00013989 	.word	0x00013989
   13c84:	00013d89 	.word	0x00013d89
   13c88:	00001194 	.word	0x00001194
   13c8c:	00013ecd 	.word	0x00013ecd
   13c90:	200008d5 	.word	0x200008d5
   13c94:	000140b5 	.word	0x000140b5
   13c98:	00013f6d 	.word	0x00013f6d
   13c9c:	200008dc 	.word	0x200008dc

00013ca0 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
   13ca0:	b580      	push	{r7, lr}
   13ca2:	b082      	sub	sp, #8
   13ca4:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   13ca6:	1d3b      	adds	r3, r7, #4
   13ca8:	0018      	movs	r0, r3
   13caa:	4b08      	ldr	r3, [pc, #32]	; (13ccc <LCD_PWR_CONFIG+0x2c>)
   13cac:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
   13cae:	1d3b      	adds	r3, r7, #4
   13cb0:	2201      	movs	r2, #1
   13cb2:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   13cb4:	1d3b      	adds	r3, r7, #4
   13cb6:	2200      	movs	r2, #0
   13cb8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
   13cba:	1d3b      	adds	r3, r7, #4
   13cbc:	0019      	movs	r1, r3
   13cbe:	2024      	movs	r0, #36	; 0x24
   13cc0:	4b03      	ldr	r3, [pc, #12]	; (13cd0 <LCD_PWR_CONFIG+0x30>)
   13cc2:	4798      	blx	r3
}
   13cc4:	46c0      	nop			; (mov r8, r8)
   13cc6:	46bd      	mov	sp, r7
   13cc8:	b002      	add	sp, #8
   13cca:	bd80      	pop	{r7, pc}
   13ccc:	00013965 	.word	0x00013965
   13cd0:	000238b1 	.word	0x000238b1

00013cd4 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
   13cd4:	b580      	push	{r7, lr}
   13cd6:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
   13cd8:	2101      	movs	r1, #1
   13cda:	2024      	movs	r0, #36	; 0x24
   13cdc:	4b02      	ldr	r3, [pc, #8]	; (13ce8 <LCD_PWR_EN+0x14>)
   13cde:	4798      	blx	r3
}
   13ce0:	46c0      	nop			; (mov r8, r8)
   13ce2:	46bd      	mov	sp, r7
   13ce4:	bd80      	pop	{r7, pc}
   13ce6:	46c0      	nop			; (mov r8, r8)
   13ce8:	00013989 	.word	0x00013989

00013cec <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
   13cec:	b580      	push	{r7, lr}
   13cee:	b082      	sub	sp, #8
   13cf0:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
   13cf2:	2100      	movs	r1, #0
   13cf4:	2024      	movs	r0, #36	; 0x24
   13cf6:	4b11      	ldr	r3, [pc, #68]	; (13d3c <LCD_PWR_DIS+0x50>)
   13cf8:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
   13cfa:	2300      	movs	r3, #0
   13cfc:	607b      	str	r3, [r7, #4]
   13cfe:	e00a      	b.n	13d16 <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
   13d00:	4a0f      	ldr	r2, [pc, #60]	; (13d40 <LCD_PWR_DIS+0x54>)
   13d02:	687b      	ldr	r3, [r7, #4]
   13d04:	18d3      	adds	r3, r2, r3
   13d06:	781b      	ldrb	r3, [r3, #0]
   13d08:	2100      	movs	r1, #0
   13d0a:	0018      	movs	r0, r3
   13d0c:	4b0b      	ldr	r3, [pc, #44]	; (13d3c <LCD_PWR_DIS+0x50>)
   13d0e:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
   13d10:	687b      	ldr	r3, [r7, #4]
   13d12:	3301      	adds	r3, #1
   13d14:	607b      	str	r3, [r7, #4]
   13d16:	687b      	ldr	r3, [r7, #4]
   13d18:	2b03      	cmp	r3, #3
   13d1a:	ddf1      	ble.n	13d00 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
   13d1c:	4b09      	ldr	r3, [pc, #36]	; (13d44 <LCD_PWR_DIS+0x58>)
   13d1e:	781b      	ldrb	r3, [r3, #0]
   13d20:	2100      	movs	r1, #0
   13d22:	0018      	movs	r0, r3
   13d24:	4b05      	ldr	r3, [pc, #20]	; (13d3c <LCD_PWR_DIS+0x50>)
   13d26:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
   13d28:	4b07      	ldr	r3, [pc, #28]	; (13d48 <LCD_PWR_DIS+0x5c>)
   13d2a:	781b      	ldrb	r3, [r3, #0]
   13d2c:	2100      	movs	r1, #0
   13d2e:	0018      	movs	r0, r3
   13d30:	4b02      	ldr	r3, [pc, #8]	; (13d3c <LCD_PWR_DIS+0x50>)
   13d32:	4798      	blx	r3
	
}
   13d34:	46c0      	nop			; (mov r8, r8)
   13d36:	46bd      	mov	sp, r7
   13d38:	b002      	add	sp, #8
   13d3a:	bd80      	pop	{r7, pc}
   13d3c:	00013989 	.word	0x00013989
   13d40:	200008d8 	.word	0x200008d8
   13d44:	200008df 	.word	0x200008df
   13d48:	200008e0 	.word	0x200008e0

00013d4c <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
   13d4c:	b580      	push	{r7, lr}
   13d4e:	b084      	sub	sp, #16
   13d50:	af00      	add	r7, sp, #0
   13d52:	60f8      	str	r0, [r7, #12]
   13d54:	60b9      	str	r1, [r7, #8]
   13d56:	607a      	str	r2, [r7, #4]
   13d58:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
   13d5a:	68fb      	ldr	r3, [r7, #12]
   13d5c:	b2da      	uxtb	r2, r3
   13d5e:	4b09      	ldr	r3, [pc, #36]	; (13d84 <LCD_setRowOffsets+0x38>)
   13d60:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
   13d62:	68bb      	ldr	r3, [r7, #8]
   13d64:	b2da      	uxtb	r2, r3
   13d66:	4b07      	ldr	r3, [pc, #28]	; (13d84 <LCD_setRowOffsets+0x38>)
   13d68:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
   13d6a:	687b      	ldr	r3, [r7, #4]
   13d6c:	b2da      	uxtb	r2, r3
   13d6e:	4b05      	ldr	r3, [pc, #20]	; (13d84 <LCD_setRowOffsets+0x38>)
   13d70:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
   13d72:	683b      	ldr	r3, [r7, #0]
   13d74:	b2da      	uxtb	r2, r3
   13d76:	4b03      	ldr	r3, [pc, #12]	; (13d84 <LCD_setRowOffsets+0x38>)
   13d78:	70da      	strb	r2, [r3, #3]
}
   13d7a:	46c0      	nop			; (mov r8, r8)
   13d7c:	46bd      	mov	sp, r7
   13d7e:	b004      	add	sp, #16
   13d80:	bd80      	pop	{r7, pc}
   13d82:	46c0      	nop			; (mov r8, r8)
   13d84:	200008d0 	.word	0x200008d0

00013d88 <write4bits>:

void write4bits(uint8_t value)
{
   13d88:	b580      	push	{r7, lr}
   13d8a:	b084      	sub	sp, #16
   13d8c:	af00      	add	r7, sp, #0
   13d8e:	0002      	movs	r2, r0
   13d90:	1dfb      	adds	r3, r7, #7
   13d92:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
   13d94:	2300      	movs	r3, #0
   13d96:	60fb      	str	r3, [r7, #12]
   13d98:	e013      	b.n	13dc2 <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
   13d9a:	4a0e      	ldr	r2, [pc, #56]	; (13dd4 <write4bits+0x4c>)
   13d9c:	68fb      	ldr	r3, [r7, #12]
   13d9e:	18d3      	adds	r3, r2, r3
   13da0:	7818      	ldrb	r0, [r3, #0]
   13da2:	1dfb      	adds	r3, r7, #7
   13da4:	781a      	ldrb	r2, [r3, #0]
   13da6:	68fb      	ldr	r3, [r7, #12]
   13da8:	411a      	asrs	r2, r3
   13daa:	0013      	movs	r3, r2
   13dac:	2201      	movs	r2, #1
   13dae:	4013      	ands	r3, r2
   13db0:	1e5a      	subs	r2, r3, #1
   13db2:	4193      	sbcs	r3, r2
   13db4:	b2db      	uxtb	r3, r3
   13db6:	0019      	movs	r1, r3
   13db8:	4b07      	ldr	r3, [pc, #28]	; (13dd8 <write4bits+0x50>)
   13dba:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
   13dbc:	68fb      	ldr	r3, [r7, #12]
   13dbe:	3301      	adds	r3, #1
   13dc0:	60fb      	str	r3, [r7, #12]
   13dc2:	68fb      	ldr	r3, [r7, #12]
   13dc4:	2b03      	cmp	r3, #3
   13dc6:	dde8      	ble.n	13d9a <write4bits+0x12>
	}
	pulseEnable();
   13dc8:	4b04      	ldr	r3, [pc, #16]	; (13ddc <write4bits+0x54>)
   13dca:	4798      	blx	r3
}
   13dcc:	46c0      	nop			; (mov r8, r8)
   13dce:	46bd      	mov	sp, r7
   13dd0:	b004      	add	sp, #16
   13dd2:	bd80      	pop	{r7, pc}
   13dd4:	200008d8 	.word	0x200008d8
   13dd8:	00013989 	.word	0x00013989
   13ddc:	00013de1 	.word	0x00013de1

00013de0 <pulseEnable>:



void pulseEnable(void)
{
   13de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13de2:	b085      	sub	sp, #20
   13de4:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
   13de6:	4b31      	ldr	r3, [pc, #196]	; (13eac <pulseEnable+0xcc>)
   13de8:	781b      	ldrb	r3, [r3, #0]
   13dea:	2100      	movs	r1, #0
   13dec:	0018      	movs	r0, r3
   13dee:	4b30      	ldr	r3, [pc, #192]	; (13eb0 <pulseEnable+0xd0>)
   13df0:	4798      	blx	r3
 	delay_us(1);
   13df2:	2000      	movs	r0, #0
   13df4:	4b2f      	ldr	r3, [pc, #188]	; (13eb4 <pulseEnable+0xd4>)
   13df6:	4798      	blx	r3
   13df8:	0003      	movs	r3, r0
   13dfa:	60bb      	str	r3, [r7, #8]
   13dfc:	2300      	movs	r3, #0
   13dfe:	60fb      	str	r3, [r7, #12]
   13e00:	4b2d      	ldr	r3, [pc, #180]	; (13eb8 <pulseEnable+0xd8>)
   13e02:	2400      	movs	r4, #0
   13e04:	68b8      	ldr	r0, [r7, #8]
   13e06:	68f9      	ldr	r1, [r7, #12]
   13e08:	18c0      	adds	r0, r0, r3
   13e0a:	4161      	adcs	r1, r4
   13e0c:	4c2b      	ldr	r4, [pc, #172]	; (13ebc <pulseEnable+0xdc>)
   13e0e:	4a2c      	ldr	r2, [pc, #176]	; (13ec0 <pulseEnable+0xe0>)
   13e10:	2300      	movs	r3, #0
   13e12:	47a0      	blx	r4
   13e14:	0003      	movs	r3, r0
   13e16:	000c      	movs	r4, r1
   13e18:	0018      	movs	r0, r3
   13e1a:	4b2a      	ldr	r3, [pc, #168]	; (13ec4 <pulseEnable+0xe4>)
   13e1c:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
   13e1e:	4b23      	ldr	r3, [pc, #140]	; (13eac <pulseEnable+0xcc>)
   13e20:	781b      	ldrb	r3, [r3, #0]
   13e22:	2101      	movs	r1, #1
   13e24:	0018      	movs	r0, r3
   13e26:	4b22      	ldr	r3, [pc, #136]	; (13eb0 <pulseEnable+0xd0>)
   13e28:	4798      	blx	r3
 	delay_us(1);
   13e2a:	2000      	movs	r0, #0
   13e2c:	4b21      	ldr	r3, [pc, #132]	; (13eb4 <pulseEnable+0xd4>)
   13e2e:	4798      	blx	r3
   13e30:	0003      	movs	r3, r0
   13e32:	001d      	movs	r5, r3
   13e34:	2300      	movs	r3, #0
   13e36:	001e      	movs	r6, r3
   13e38:	4b1f      	ldr	r3, [pc, #124]	; (13eb8 <pulseEnable+0xd8>)
   13e3a:	2400      	movs	r4, #0
   13e3c:	0028      	movs	r0, r5
   13e3e:	0031      	movs	r1, r6
   13e40:	18c0      	adds	r0, r0, r3
   13e42:	4161      	adcs	r1, r4
   13e44:	4c1d      	ldr	r4, [pc, #116]	; (13ebc <pulseEnable+0xdc>)
   13e46:	4a1e      	ldr	r2, [pc, #120]	; (13ec0 <pulseEnable+0xe0>)
   13e48:	2300      	movs	r3, #0
   13e4a:	47a0      	blx	r4
   13e4c:	0003      	movs	r3, r0
   13e4e:	000c      	movs	r4, r1
   13e50:	0018      	movs	r0, r3
   13e52:	4b1c      	ldr	r3, [pc, #112]	; (13ec4 <pulseEnable+0xe4>)
   13e54:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
   13e56:	4b15      	ldr	r3, [pc, #84]	; (13eac <pulseEnable+0xcc>)
   13e58:	781b      	ldrb	r3, [r3, #0]
   13e5a:	2100      	movs	r1, #0
   13e5c:	0018      	movs	r0, r3
   13e5e:	4b14      	ldr	r3, [pc, #80]	; (13eb0 <pulseEnable+0xd0>)
   13e60:	4798      	blx	r3
 	delay_us(100);
   13e62:	2000      	movs	r0, #0
   13e64:	4b13      	ldr	r3, [pc, #76]	; (13eb4 <pulseEnable+0xd4>)
   13e66:	4798      	blx	r3
   13e68:	0003      	movs	r3, r0
   13e6a:	603b      	str	r3, [r7, #0]
   13e6c:	2300      	movs	r3, #0
   13e6e:	607b      	str	r3, [r7, #4]
   13e70:	4c15      	ldr	r4, [pc, #84]	; (13ec8 <pulseEnable+0xe8>)
   13e72:	2264      	movs	r2, #100	; 0x64
   13e74:	2300      	movs	r3, #0
   13e76:	6838      	ldr	r0, [r7, #0]
   13e78:	6879      	ldr	r1, [r7, #4]
   13e7a:	47a0      	blx	r4
   13e7c:	0003      	movs	r3, r0
   13e7e:	000c      	movs	r4, r1
   13e80:	0019      	movs	r1, r3
   13e82:	0022      	movs	r2, r4
   13e84:	4b0c      	ldr	r3, [pc, #48]	; (13eb8 <pulseEnable+0xd8>)
   13e86:	2400      	movs	r4, #0
   13e88:	18c9      	adds	r1, r1, r3
   13e8a:	4162      	adcs	r2, r4
   13e8c:	0008      	movs	r0, r1
   13e8e:	0011      	movs	r1, r2
   13e90:	4c0a      	ldr	r4, [pc, #40]	; (13ebc <pulseEnable+0xdc>)
   13e92:	4a0b      	ldr	r2, [pc, #44]	; (13ec0 <pulseEnable+0xe0>)
   13e94:	2300      	movs	r3, #0
   13e96:	47a0      	blx	r4
   13e98:	0003      	movs	r3, r0
   13e9a:	000c      	movs	r4, r1
   13e9c:	0018      	movs	r0, r3
   13e9e:	4b09      	ldr	r3, [pc, #36]	; (13ec4 <pulseEnable+0xe4>)
   13ea0:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
   13ea2:	46c0      	nop			; (mov r8, r8)
   13ea4:	46bd      	mov	sp, r7
   13ea6:	b005      	add	sp, #20
   13ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13eaa:	46c0      	nop			; (mov r8, r8)
   13eac:	200008df 	.word	0x200008df
   13eb0:	00013989 	.word	0x00013989
   13eb4:	0002521d 	.word	0x0002521d
   13eb8:	006acfbf 	.word	0x006acfbf
   13ebc:	0002724d 	.word	0x0002724d
   13ec0:	006acfc0 	.word	0x006acfc0
   13ec4:	20000001 	.word	0x20000001
   13ec8:	0002728d 	.word	0x0002728d

00013ecc <command>:

inline void command(uint8_t value) 
{
   13ecc:	b580      	push	{r7, lr}
   13ece:	b082      	sub	sp, #8
   13ed0:	af00      	add	r7, sp, #0
   13ed2:	0002      	movs	r2, r0
   13ed4:	1dfb      	adds	r3, r7, #7
   13ed6:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
   13ed8:	1dfb      	adds	r3, r7, #7
   13eda:	781b      	ldrb	r3, [r3, #0]
   13edc:	2100      	movs	r1, #0
   13ede:	0018      	movs	r0, r3
   13ee0:	4b02      	ldr	r3, [pc, #8]	; (13eec <command+0x20>)
   13ee2:	4798      	blx	r3
}
   13ee4:	46c0      	nop			; (mov r8, r8)
   13ee6:	46bd      	mov	sp, r7
   13ee8:	b002      	add	sp, #8
   13eea:	bd80      	pop	{r7, pc}
   13eec:	00013f19 	.word	0x00013f19

00013ef0 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
   13ef0:	b580      	push	{r7, lr}
   13ef2:	b082      	sub	sp, #8
   13ef4:	af00      	add	r7, sp, #0
   13ef6:	0002      	movs	r2, r0
   13ef8:	1dfb      	adds	r3, r7, #7
   13efa:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
   13efc:	1dfb      	adds	r3, r7, #7
   13efe:	781b      	ldrb	r3, [r3, #0]
   13f00:	2101      	movs	r1, #1
   13f02:	0018      	movs	r0, r3
   13f04:	4b03      	ldr	r3, [pc, #12]	; (13f14 <LCD_write+0x24>)
   13f06:	4798      	blx	r3
	return 1;
   13f08:	2301      	movs	r3, #1
}
   13f0a:	0018      	movs	r0, r3
   13f0c:	46bd      	mov	sp, r7
   13f0e:	b002      	add	sp, #8
   13f10:	bd80      	pop	{r7, pc}
   13f12:	46c0      	nop			; (mov r8, r8)
   13f14:	00013f19 	.word	0x00013f19

00013f18 <send>:

void send(uint8_t value, uint8_t mode) 
{
   13f18:	b580      	push	{r7, lr}
   13f1a:	b082      	sub	sp, #8
   13f1c:	af00      	add	r7, sp, #0
   13f1e:	0002      	movs	r2, r0
   13f20:	1dfb      	adds	r3, r7, #7
   13f22:	701a      	strb	r2, [r3, #0]
   13f24:	1dbb      	adds	r3, r7, #6
   13f26:	1c0a      	adds	r2, r1, #0
   13f28:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
   13f2a:	4b0d      	ldr	r3, [pc, #52]	; (13f60 <send+0x48>)
   13f2c:	781a      	ldrb	r2, [r3, #0]
   13f2e:	1dbb      	adds	r3, r7, #6
   13f30:	781b      	ldrb	r3, [r3, #0]
   13f32:	1e59      	subs	r1, r3, #1
   13f34:	418b      	sbcs	r3, r1
   13f36:	b2db      	uxtb	r3, r3
   13f38:	0019      	movs	r1, r3
   13f3a:	0010      	movs	r0, r2
   13f3c:	4b09      	ldr	r3, [pc, #36]	; (13f64 <send+0x4c>)
   13f3e:	4798      	blx	r3
	
	{
		write4bits(value>>4);
   13f40:	1dfb      	adds	r3, r7, #7
   13f42:	781b      	ldrb	r3, [r3, #0]
   13f44:	091b      	lsrs	r3, r3, #4
   13f46:	b2db      	uxtb	r3, r3
   13f48:	0018      	movs	r0, r3
   13f4a:	4b07      	ldr	r3, [pc, #28]	; (13f68 <send+0x50>)
   13f4c:	4798      	blx	r3
		write4bits(value);
   13f4e:	1dfb      	adds	r3, r7, #7
   13f50:	781b      	ldrb	r3, [r3, #0]
   13f52:	0018      	movs	r0, r3
   13f54:	4b04      	ldr	r3, [pc, #16]	; (13f68 <send+0x50>)
   13f56:	4798      	blx	r3
	}
}
   13f58:	46c0      	nop			; (mov r8, r8)
   13f5a:	46bd      	mov	sp, r7
   13f5c:	b002      	add	sp, #8
   13f5e:	bd80      	pop	{r7, pc}
   13f60:	200008e0 	.word	0x200008e0
   13f64:	00013989 	.word	0x00013989
   13f68:	00013d89 	.word	0x00013d89

00013f6c <LCD_clear>:

void LCD_clear(void)
{
   13f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f6e:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
   13f70:	2001      	movs	r0, #1
   13f72:	4b13      	ldr	r3, [pc, #76]	; (13fc0 <LCD_clear+0x54>)
   13f74:	4798      	blx	r3
	delay_us(2000);
   13f76:	2000      	movs	r0, #0
   13f78:	4b12      	ldr	r3, [pc, #72]	; (13fc4 <LCD_clear+0x58>)
   13f7a:	4798      	blx	r3
   13f7c:	0003      	movs	r3, r0
   13f7e:	001d      	movs	r5, r3
   13f80:	2300      	movs	r3, #0
   13f82:	001e      	movs	r6, r3
   13f84:	4c10      	ldr	r4, [pc, #64]	; (13fc8 <LCD_clear+0x5c>)
   13f86:	22fa      	movs	r2, #250	; 0xfa
   13f88:	00d2      	lsls	r2, r2, #3
   13f8a:	2300      	movs	r3, #0
   13f8c:	0028      	movs	r0, r5
   13f8e:	0031      	movs	r1, r6
   13f90:	47a0      	blx	r4
   13f92:	0003      	movs	r3, r0
   13f94:	000c      	movs	r4, r1
   13f96:	0019      	movs	r1, r3
   13f98:	0022      	movs	r2, r4
   13f9a:	4b0c      	ldr	r3, [pc, #48]	; (13fcc <LCD_clear+0x60>)
   13f9c:	2400      	movs	r4, #0
   13f9e:	18c9      	adds	r1, r1, r3
   13fa0:	4162      	adcs	r2, r4
   13fa2:	0008      	movs	r0, r1
   13fa4:	0011      	movs	r1, r2
   13fa6:	4c0a      	ldr	r4, [pc, #40]	; (13fd0 <LCD_clear+0x64>)
   13fa8:	4a0a      	ldr	r2, [pc, #40]	; (13fd4 <LCD_clear+0x68>)
   13faa:	2300      	movs	r3, #0
   13fac:	47a0      	blx	r4
   13fae:	0003      	movs	r3, r0
   13fb0:	000c      	movs	r4, r1
   13fb2:	0018      	movs	r0, r3
   13fb4:	4b08      	ldr	r3, [pc, #32]	; (13fd8 <LCD_clear+0x6c>)
   13fb6:	4798      	blx	r3
}
   13fb8:	46c0      	nop			; (mov r8, r8)
   13fba:	46bd      	mov	sp, r7
   13fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fbe:	46c0      	nop			; (mov r8, r8)
   13fc0:	00013ecd 	.word	0x00013ecd
   13fc4:	0002521d 	.word	0x0002521d
   13fc8:	0002728d 	.word	0x0002728d
   13fcc:	006acfbf 	.word	0x006acfbf
   13fd0:	0002724d 	.word	0x0002724d
   13fd4:	006acfc0 	.word	0x006acfc0
   13fd8:	20000001 	.word	0x20000001

00013fdc <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
   13fdc:	b580      	push	{r7, lr}
   13fde:	b084      	sub	sp, #16
   13fe0:	af00      	add	r7, sp, #0
   13fe2:	0002      	movs	r2, r0
   13fe4:	6039      	str	r1, [r7, #0]
   13fe6:	1dfb      	adds	r3, r7, #7
   13fe8:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
   13fea:	1dfb      	adds	r3, r7, #7
   13fec:	1dfa      	adds	r2, r7, #7
   13fee:	7812      	ldrb	r2, [r2, #0]
   13ff0:	2107      	movs	r1, #7
   13ff2:	400a      	ands	r2, r1
   13ff4:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
   13ff6:	1dfb      	adds	r3, r7, #7
   13ff8:	781b      	ldrb	r3, [r3, #0]
   13ffa:	00db      	lsls	r3, r3, #3
   13ffc:	b25b      	sxtb	r3, r3
   13ffe:	2240      	movs	r2, #64	; 0x40
   14000:	4313      	orrs	r3, r2
   14002:	b25b      	sxtb	r3, r3
   14004:	b2db      	uxtb	r3, r3
   14006:	0018      	movs	r0, r3
   14008:	4b0a      	ldr	r3, [pc, #40]	; (14034 <LCD_Create_Custom_createChar+0x58>)
   1400a:	4798      	blx	r3
	for (int i=0; i<8; i++)
   1400c:	2300      	movs	r3, #0
   1400e:	60fb      	str	r3, [r7, #12]
   14010:	e009      	b.n	14026 <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
   14012:	68fb      	ldr	r3, [r7, #12]
   14014:	683a      	ldr	r2, [r7, #0]
   14016:	18d3      	adds	r3, r2, r3
   14018:	781b      	ldrb	r3, [r3, #0]
   1401a:	0018      	movs	r0, r3
   1401c:	4b06      	ldr	r3, [pc, #24]	; (14038 <LCD_Create_Custom_createChar+0x5c>)
   1401e:	4798      	blx	r3
	for (int i=0; i<8; i++)
   14020:	68fb      	ldr	r3, [r7, #12]
   14022:	3301      	adds	r3, #1
   14024:	60fb      	str	r3, [r7, #12]
   14026:	68fb      	ldr	r3, [r7, #12]
   14028:	2b07      	cmp	r3, #7
   1402a:	ddf2      	ble.n	14012 <LCD_Create_Custom_createChar+0x36>
	}
}
   1402c:	46c0      	nop			; (mov r8, r8)
   1402e:	46bd      	mov	sp, r7
   14030:	b004      	add	sp, #16
   14032:	bd80      	pop	{r7, pc}
   14034:	00013ecd 	.word	0x00013ecd
   14038:	00013ef1 	.word	0x00013ef1

0001403c <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
   1403c:	b580      	push	{r7, lr}
   1403e:	b084      	sub	sp, #16
   14040:	af00      	add	r7, sp, #0
   14042:	0002      	movs	r2, r0
   14044:	1dfb      	adds	r3, r7, #7
   14046:	701a      	strb	r2, [r3, #0]
   14048:	1dbb      	adds	r3, r7, #6
   1404a:	1c0a      	adds	r2, r1, #0
   1404c:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
   1404e:	2304      	movs	r3, #4
   14050:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
   14052:	1dbb      	adds	r3, r7, #6
   14054:	781a      	ldrb	r2, [r3, #0]
   14056:	68fb      	ldr	r3, [r7, #12]
   14058:	429a      	cmp	r2, r3
   1405a:	d304      	bcc.n	14066 <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
   1405c:	68fb      	ldr	r3, [r7, #12]
   1405e:	b2da      	uxtb	r2, r3
   14060:	1dbb      	adds	r3, r7, #6
   14062:	3a01      	subs	r2, #1
   14064:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
   14066:	4b10      	ldr	r3, [pc, #64]	; (140a8 <LCD_setCursor+0x6c>)
   14068:	781b      	ldrb	r3, [r3, #0]
   1406a:	1dba      	adds	r2, r7, #6
   1406c:	7812      	ldrb	r2, [r2, #0]
   1406e:	429a      	cmp	r2, r3
   14070:	d304      	bcc.n	1407c <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
   14072:	4b0d      	ldr	r3, [pc, #52]	; (140a8 <LCD_setCursor+0x6c>)
   14074:	781a      	ldrb	r2, [r3, #0]
   14076:	1dbb      	adds	r3, r7, #6
   14078:	3a01      	subs	r2, #1
   1407a:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
   1407c:	1dbb      	adds	r3, r7, #6
   1407e:	781b      	ldrb	r3, [r3, #0]
   14080:	4a0a      	ldr	r2, [pc, #40]	; (140ac <LCD_setCursor+0x70>)
   14082:	5cd2      	ldrb	r2, [r2, r3]
   14084:	1dfb      	adds	r3, r7, #7
   14086:	781b      	ldrb	r3, [r3, #0]
   14088:	18d3      	adds	r3, r2, r3
   1408a:	b2db      	uxtb	r3, r3
   1408c:	b25b      	sxtb	r3, r3
   1408e:	2280      	movs	r2, #128	; 0x80
   14090:	4252      	negs	r2, r2
   14092:	4313      	orrs	r3, r2
   14094:	b25b      	sxtb	r3, r3
   14096:	b2db      	uxtb	r3, r3
   14098:	0018      	movs	r0, r3
   1409a:	4b05      	ldr	r3, [pc, #20]	; (140b0 <LCD_setCursor+0x74>)
   1409c:	4798      	blx	r3
}
   1409e:	46c0      	nop			; (mov r8, r8)
   140a0:	46bd      	mov	sp, r7
   140a2:	b004      	add	sp, #16
   140a4:	bd80      	pop	{r7, pc}
   140a6:	46c0      	nop			; (mov r8, r8)
   140a8:	200008d6 	.word	0x200008d6
   140ac:	200008d0 	.word	0x200008d0
   140b0:	00013ecd 	.word	0x00013ecd

000140b4 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
   140b4:	b580      	push	{r7, lr}
   140b6:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
   140b8:	4b08      	ldr	r3, [pc, #32]	; (140dc <LCD_display+0x28>)
   140ba:	781b      	ldrb	r3, [r3, #0]
   140bc:	2204      	movs	r2, #4
   140be:	4313      	orrs	r3, r2
   140c0:	b2da      	uxtb	r2, r3
   140c2:	4b06      	ldr	r3, [pc, #24]	; (140dc <LCD_display+0x28>)
   140c4:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
   140c6:	4b05      	ldr	r3, [pc, #20]	; (140dc <LCD_display+0x28>)
   140c8:	781b      	ldrb	r3, [r3, #0]
   140ca:	2208      	movs	r2, #8
   140cc:	4313      	orrs	r3, r2
   140ce:	b2db      	uxtb	r3, r3
   140d0:	0018      	movs	r0, r3
   140d2:	4b03      	ldr	r3, [pc, #12]	; (140e0 <LCD_display+0x2c>)
   140d4:	4798      	blx	r3
}
   140d6:	46c0      	nop			; (mov r8, r8)
   140d8:	46bd      	mov	sp, r7
   140da:	bd80      	pop	{r7, pc}
   140dc:	200008d5 	.word	0x200008d5
   140e0:	00013ecd 	.word	0x00013ecd

000140e4 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
   140e4:	b580      	push	{r7, lr}
   140e6:	b084      	sub	sp, #16
   140e8:	af00      	add	r7, sp, #0
   140ea:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
   140ec:	687b      	ldr	r3, [r7, #4]
   140ee:	0018      	movs	r0, r3
   140f0:	4b0f      	ldr	r3, [pc, #60]	; (14130 <Buffer_writer+0x4c>)
   140f2:	4798      	blx	r3
   140f4:	0003      	movs	r3, r0
   140f6:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
   140f8:	2300      	movs	r3, #0
   140fa:	60bb      	str	r3, [r7, #8]
	while (size--) {
   140fc:	e00b      	b.n	14116 <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
   140fe:	687b      	ldr	r3, [r7, #4]
   14100:	1c5a      	adds	r2, r3, #1
   14102:	607a      	str	r2, [r7, #4]
   14104:	781b      	ldrb	r3, [r3, #0]
   14106:	0018      	movs	r0, r3
   14108:	4b0a      	ldr	r3, [pc, #40]	; (14134 <Buffer_writer+0x50>)
   1410a:	4798      	blx	r3
   1410c:	1e03      	subs	r3, r0, #0
   1410e:	d008      	beq.n	14122 <Buffer_writer+0x3e>
   14110:	68bb      	ldr	r3, [r7, #8]
   14112:	3301      	adds	r3, #1
   14114:	60bb      	str	r3, [r7, #8]
	while (size--) {
   14116:	68fb      	ldr	r3, [r7, #12]
   14118:	1e5a      	subs	r2, r3, #1
   1411a:	60fa      	str	r2, [r7, #12]
   1411c:	2b00      	cmp	r3, #0
   1411e:	d1ee      	bne.n	140fe <Buffer_writer+0x1a>
   14120:	e000      	b.n	14124 <Buffer_writer+0x40>
		else break;
   14122:	46c0      	nop			; (mov r8, r8)
	}
	return n;
   14124:	68bb      	ldr	r3, [r7, #8]
}
   14126:	0018      	movs	r0, r3
   14128:	46bd      	mov	sp, r7
   1412a:	b004      	add	sp, #16
   1412c:	bd80      	pop	{r7, pc}
   1412e:	46c0      	nop			; (mov r8, r8)
   14130:	000299eb 	.word	0x000299eb
   14134:	00013ef1 	.word	0x00013ef1

00014138 <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
   14138:	b40f      	push	{r0, r1, r2, r3}
   1413a:	b580      	push	{r7, lr}
   1413c:	b084      	sub	sp, #16
   1413e:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
   14140:	69bb      	ldr	r3, [r7, #24]
   14142:	0018      	movs	r0, r3
   14144:	4b11      	ldr	r3, [pc, #68]	; (1418c <lcd_printf+0x54>)
   14146:	4798      	blx	r3
   14148:	0003      	movs	r3, r0
   1414a:	3303      	adds	r3, #3
   1414c:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
   1414e:	68fb      	ldr	r3, [r7, #12]
   14150:	0018      	movs	r0, r3
   14152:	4b0f      	ldr	r3, [pc, #60]	; (14190 <lcd_printf+0x58>)
   14154:	4798      	blx	r3
   14156:	0003      	movs	r3, r0
   14158:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
   1415a:	231c      	movs	r3, #28
   1415c:	18fb      	adds	r3, r7, r3
   1415e:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
   14160:	687a      	ldr	r2, [r7, #4]
   14162:	69b9      	ldr	r1, [r7, #24]
   14164:	68bb      	ldr	r3, [r7, #8]
   14166:	0018      	movs	r0, r3
   14168:	4b0a      	ldr	r3, [pc, #40]	; (14194 <lcd_printf+0x5c>)
   1416a:	4798      	blx	r3
	Buffer_writer(lcd_buff);
   1416c:	68bb      	ldr	r3, [r7, #8]
   1416e:	0018      	movs	r0, r3
   14170:	4b09      	ldr	r3, [pc, #36]	; (14198 <lcd_printf+0x60>)
   14172:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
   14174:	68bb      	ldr	r3, [r7, #8]
   14176:	0018      	movs	r0, r3
   14178:	4b08      	ldr	r3, [pc, #32]	; (1419c <lcd_printf+0x64>)
   1417a:	4798      	blx	r3
}
   1417c:	46c0      	nop			; (mov r8, r8)
   1417e:	46bd      	mov	sp, r7
   14180:	b004      	add	sp, #16
   14182:	bc80      	pop	{r7}
   14184:	bc08      	pop	{r3}
   14186:	b004      	add	sp, #16
   14188:	4718      	bx	r3
   1418a:	46c0      	nop			; (mov r8, r8)
   1418c:	000299eb 	.word	0x000299eb
   14190:	000296d9 	.word	0x000296d9
   14194:	00029cd9 	.word	0x00029cd9
   14198:	000140e5 	.word	0x000140e5
   1419c:	000296ed 	.word	0x000296ed

000141a0 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
   141a0:	b580      	push	{r7, lr}
   141a2:	b084      	sub	sp, #16
   141a4:	af00      	add	r7, sp, #0
   141a6:	6078      	str	r0, [r7, #4]
	if (!str) return;
   141a8:	687b      	ldr	r3, [r7, #4]
   141aa:	2b00      	cmp	r3, #0
   141ac:	d028      	beq.n	14200 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
   141ae:	687b      	ldr	r3, [r7, #4]
   141b0:	60fb      	str	r3, [r7, #12]
   141b2:	e020      	b.n	141f6 <StringtoUpperCase+0x56>
		*p = toupper(*p);
   141b4:	230b      	movs	r3, #11
   141b6:	18fb      	adds	r3, r7, r3
   141b8:	68fa      	ldr	r2, [r7, #12]
   141ba:	7812      	ldrb	r2, [r2, #0]
   141bc:	701a      	strb	r2, [r3, #0]
   141be:	4b12      	ldr	r3, [pc, #72]	; (14208 <StringtoUpperCase+0x68>)
   141c0:	4798      	blx	r3
   141c2:	0002      	movs	r2, r0
   141c4:	230b      	movs	r3, #11
   141c6:	18fb      	adds	r3, r7, r3
   141c8:	781b      	ldrb	r3, [r3, #0]
   141ca:	3301      	adds	r3, #1
   141cc:	18d3      	adds	r3, r2, r3
   141ce:	781b      	ldrb	r3, [r3, #0]
   141d0:	001a      	movs	r2, r3
   141d2:	2303      	movs	r3, #3
   141d4:	4013      	ands	r3, r2
   141d6:	2b02      	cmp	r3, #2
   141d8:	d104      	bne.n	141e4 <StringtoUpperCase+0x44>
   141da:	230b      	movs	r3, #11
   141dc:	18fb      	adds	r3, r7, r3
   141de:	781b      	ldrb	r3, [r3, #0]
   141e0:	3b20      	subs	r3, #32
   141e2:	e002      	b.n	141ea <StringtoUpperCase+0x4a>
   141e4:	230b      	movs	r3, #11
   141e6:	18fb      	adds	r3, r7, r3
   141e8:	781b      	ldrb	r3, [r3, #0]
   141ea:	b2da      	uxtb	r2, r3
   141ec:	68fb      	ldr	r3, [r7, #12]
   141ee:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
   141f0:	68fb      	ldr	r3, [r7, #12]
   141f2:	3301      	adds	r3, #1
   141f4:	60fb      	str	r3, [r7, #12]
   141f6:	68fb      	ldr	r3, [r7, #12]
   141f8:	781b      	ldrb	r3, [r3, #0]
   141fa:	2b00      	cmp	r3, #0
   141fc:	d1da      	bne.n	141b4 <StringtoUpperCase+0x14>
   141fe:	e000      	b.n	14202 <StringtoUpperCase+0x62>
	if (!str) return;
   14200:	46c0      	nop			; (mov r8, r8)
	}
}
   14202:	46bd      	mov	sp, r7
   14204:	b004      	add	sp, #16
   14206:	bd80      	pop	{r7, pc}
   14208:	000296bd 	.word	0x000296bd

0001420c <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
   1420c:	b580      	push	{r7, lr}
   1420e:	b084      	sub	sp, #16
   14210:	af00      	add	r7, sp, #0
   14212:	6078      	str	r0, [r7, #4]
   14214:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
   14216:	683b      	ldr	r3, [r7, #0]
   14218:	0018      	movs	r0, r3
   1421a:	4b10      	ldr	r3, [pc, #64]	; (1425c <StringstartsWith+0x50>)
   1421c:	4798      	blx	r3
   1421e:	0003      	movs	r3, r0
   14220:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
   14222:	687b      	ldr	r3, [r7, #4]
   14224:	0018      	movs	r0, r3
   14226:	4b0d      	ldr	r3, [pc, #52]	; (1425c <StringstartsWith+0x50>)
   14228:	4798      	blx	r3
   1422a:	0003      	movs	r3, r0
   1422c:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
   1422e:	68ba      	ldr	r2, [r7, #8]
   14230:	68fb      	ldr	r3, [r7, #12]
   14232:	429a      	cmp	r2, r3
   14234:	d309      	bcc.n	1424a <StringstartsWith+0x3e>
   14236:	68fa      	ldr	r2, [r7, #12]
   14238:	6879      	ldr	r1, [r7, #4]
   1423a:	683b      	ldr	r3, [r7, #0]
   1423c:	0018      	movs	r0, r3
   1423e:	4b08      	ldr	r3, [pc, #32]	; (14260 <StringstartsWith+0x54>)
   14240:	4798      	blx	r3
   14242:	1e03      	subs	r3, r0, #0
   14244:	d101      	bne.n	1424a <StringstartsWith+0x3e>
   14246:	2301      	movs	r3, #1
   14248:	e000      	b.n	1424c <StringstartsWith+0x40>
   1424a:	2300      	movs	r3, #0
   1424c:	1c1a      	adds	r2, r3, #0
   1424e:	2301      	movs	r3, #1
   14250:	4013      	ands	r3, r2
   14252:	b2db      	uxtb	r3, r3
}
   14254:	0018      	movs	r0, r3
   14256:	46bd      	mov	sp, r7
   14258:	b004      	add	sp, #16
   1425a:	bd80      	pop	{r7, pc}
   1425c:	000299eb 	.word	0x000299eb
   14260:	000299f9 	.word	0x000299f9

00014264 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14264:	b580      	push	{r7, lr}
   14266:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14268:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   1426c:	4b02      	ldr	r3, [pc, #8]	; (14278 <NVIC_SystemReset+0x14>)
   1426e:	4a03      	ldr	r2, [pc, #12]	; (1427c <NVIC_SystemReset+0x18>)
   14270:	60da      	str	r2, [r3, #12]
   14272:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   14276:	e7fe      	b.n	14276 <NVIC_SystemReset+0x12>
   14278:	e000ed00 	.word	0xe000ed00
   1427c:	05fa0004 	.word	0x05fa0004

00014280 <system_pinmux_get_group_from_gpio_pin>:
{
   14280:	b580      	push	{r7, lr}
   14282:	b084      	sub	sp, #16
   14284:	af00      	add	r7, sp, #0
   14286:	0002      	movs	r2, r0
   14288:	1dfb      	adds	r3, r7, #7
   1428a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1428c:	230f      	movs	r3, #15
   1428e:	18fb      	adds	r3, r7, r3
   14290:	1dfa      	adds	r2, r7, #7
   14292:	7812      	ldrb	r2, [r2, #0]
   14294:	09d2      	lsrs	r2, r2, #7
   14296:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14298:	230e      	movs	r3, #14
   1429a:	18fb      	adds	r3, r7, r3
   1429c:	1dfa      	adds	r2, r7, #7
   1429e:	7812      	ldrb	r2, [r2, #0]
   142a0:	0952      	lsrs	r2, r2, #5
   142a2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   142a4:	4b0d      	ldr	r3, [pc, #52]	; (142dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   142a6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   142a8:	230f      	movs	r3, #15
   142aa:	18fb      	adds	r3, r7, r3
   142ac:	781b      	ldrb	r3, [r3, #0]
   142ae:	2b00      	cmp	r3, #0
   142b0:	d10f      	bne.n	142d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   142b2:	230f      	movs	r3, #15
   142b4:	18fb      	adds	r3, r7, r3
   142b6:	781b      	ldrb	r3, [r3, #0]
   142b8:	009b      	lsls	r3, r3, #2
   142ba:	2210      	movs	r2, #16
   142bc:	4694      	mov	ip, r2
   142be:	44bc      	add	ip, r7
   142c0:	4463      	add	r3, ip
   142c2:	3b08      	subs	r3, #8
   142c4:	681a      	ldr	r2, [r3, #0]
   142c6:	230e      	movs	r3, #14
   142c8:	18fb      	adds	r3, r7, r3
   142ca:	781b      	ldrb	r3, [r3, #0]
   142cc:	01db      	lsls	r3, r3, #7
   142ce:	18d3      	adds	r3, r2, r3
   142d0:	e000      	b.n	142d4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   142d2:	2300      	movs	r3, #0
}
   142d4:	0018      	movs	r0, r3
   142d6:	46bd      	mov	sp, r7
   142d8:	b004      	add	sp, #16
   142da:	bd80      	pop	{r7, pc}
   142dc:	41004400 	.word	0x41004400

000142e0 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   142e0:	b580      	push	{r7, lr}
   142e2:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   142e4:	4b02      	ldr	r3, [pc, #8]	; (142f0 <system_reset+0x10>)
   142e6:	4798      	blx	r3
}
   142e8:	46c0      	nop			; (mov r8, r8)
   142ea:	46bd      	mov	sp, r7
   142ec:	bd80      	pop	{r7, pc}
   142ee:	46c0      	nop			; (mov r8, r8)
   142f0:	00014265 	.word	0x00014265

000142f4 <port_get_group_from_gpio_pin>:
{
   142f4:	b580      	push	{r7, lr}
   142f6:	b082      	sub	sp, #8
   142f8:	af00      	add	r7, sp, #0
   142fa:	0002      	movs	r2, r0
   142fc:	1dfb      	adds	r3, r7, #7
   142fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14300:	1dfb      	adds	r3, r7, #7
   14302:	781b      	ldrb	r3, [r3, #0]
   14304:	0018      	movs	r0, r3
   14306:	4b03      	ldr	r3, [pc, #12]	; (14314 <port_get_group_from_gpio_pin+0x20>)
   14308:	4798      	blx	r3
   1430a:	0003      	movs	r3, r0
}
   1430c:	0018      	movs	r0, r3
   1430e:	46bd      	mov	sp, r7
   14310:	b002      	add	sp, #8
   14312:	bd80      	pop	{r7, pc}
   14314:	00014281 	.word	0x00014281

00014318 <port_get_config_defaults>:
{
   14318:	b580      	push	{r7, lr}
   1431a:	b082      	sub	sp, #8
   1431c:	af00      	add	r7, sp, #0
   1431e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   14320:	687b      	ldr	r3, [r7, #4]
   14322:	2200      	movs	r2, #0
   14324:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   14326:	687b      	ldr	r3, [r7, #4]
   14328:	2201      	movs	r2, #1
   1432a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1432c:	687b      	ldr	r3, [r7, #4]
   1432e:	2200      	movs	r2, #0
   14330:	709a      	strb	r2, [r3, #2]
}
   14332:	46c0      	nop			; (mov r8, r8)
   14334:	46bd      	mov	sp, r7
   14336:	b002      	add	sp, #8
   14338:	bd80      	pop	{r7, pc}
	...

0001433c <port_pin_get_input_level>:
{
   1433c:	b580      	push	{r7, lr}
   1433e:	b084      	sub	sp, #16
   14340:	af00      	add	r7, sp, #0
   14342:	0002      	movs	r2, r0
   14344:	1dfb      	adds	r3, r7, #7
   14346:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14348:	1dfb      	adds	r3, r7, #7
   1434a:	781b      	ldrb	r3, [r3, #0]
   1434c:	0018      	movs	r0, r3
   1434e:	4b0b      	ldr	r3, [pc, #44]	; (1437c <port_pin_get_input_level+0x40>)
   14350:	4798      	blx	r3
   14352:	0003      	movs	r3, r0
   14354:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14356:	1dfb      	adds	r3, r7, #7
   14358:	781b      	ldrb	r3, [r3, #0]
   1435a:	221f      	movs	r2, #31
   1435c:	4013      	ands	r3, r2
   1435e:	2201      	movs	r2, #1
   14360:	409a      	lsls	r2, r3
   14362:	0013      	movs	r3, r2
   14364:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   14366:	68fb      	ldr	r3, [r7, #12]
   14368:	6a1b      	ldr	r3, [r3, #32]
   1436a:	68ba      	ldr	r2, [r7, #8]
   1436c:	4013      	ands	r3, r2
   1436e:	1e5a      	subs	r2, r3, #1
   14370:	4193      	sbcs	r3, r2
   14372:	b2db      	uxtb	r3, r3
}
   14374:	0018      	movs	r0, r3
   14376:	46bd      	mov	sp, r7
   14378:	b004      	add	sp, #16
   1437a:	bd80      	pop	{r7, pc}
   1437c:	000142f5 	.word	0x000142f5

00014380 <port_pin_set_output_level>:
{
   14380:	b580      	push	{r7, lr}
   14382:	b084      	sub	sp, #16
   14384:	af00      	add	r7, sp, #0
   14386:	0002      	movs	r2, r0
   14388:	1dfb      	adds	r3, r7, #7
   1438a:	701a      	strb	r2, [r3, #0]
   1438c:	1dbb      	adds	r3, r7, #6
   1438e:	1c0a      	adds	r2, r1, #0
   14390:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14392:	1dfb      	adds	r3, r7, #7
   14394:	781b      	ldrb	r3, [r3, #0]
   14396:	0018      	movs	r0, r3
   14398:	4b0d      	ldr	r3, [pc, #52]	; (143d0 <port_pin_set_output_level+0x50>)
   1439a:	4798      	blx	r3
   1439c:	0003      	movs	r3, r0
   1439e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   143a0:	1dfb      	adds	r3, r7, #7
   143a2:	781b      	ldrb	r3, [r3, #0]
   143a4:	221f      	movs	r2, #31
   143a6:	4013      	ands	r3, r2
   143a8:	2201      	movs	r2, #1
   143aa:	409a      	lsls	r2, r3
   143ac:	0013      	movs	r3, r2
   143ae:	60bb      	str	r3, [r7, #8]
	if (level) {
   143b0:	1dbb      	adds	r3, r7, #6
   143b2:	781b      	ldrb	r3, [r3, #0]
   143b4:	2b00      	cmp	r3, #0
   143b6:	d003      	beq.n	143c0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   143b8:	68fb      	ldr	r3, [r7, #12]
   143ba:	68ba      	ldr	r2, [r7, #8]
   143bc:	619a      	str	r2, [r3, #24]
}
   143be:	e002      	b.n	143c6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   143c0:	68fb      	ldr	r3, [r7, #12]
   143c2:	68ba      	ldr	r2, [r7, #8]
   143c4:	615a      	str	r2, [r3, #20]
}
   143c6:	46c0      	nop			; (mov r8, r8)
   143c8:	46bd      	mov	sp, r7
   143ca:	b004      	add	sp, #16
   143cc:	bd80      	pop	{r7, pc}
   143ce:	46c0      	nop			; (mov r8, r8)
   143d0:	000142f5 	.word	0x000142f5

000143d4 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
   143d4:	b580      	push	{r7, lr}
   143d6:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
   143d8:	4b0b      	ldr	r3, [pc, #44]	; (14408 <setObtainEvent+0x34>)
   143da:	781b      	ldrb	r3, [r3, #0]
   143dc:	2201      	movs	r2, #1
   143de:	4053      	eors	r3, r2
   143e0:	b2db      	uxtb	r3, r3
   143e2:	2b00      	cmp	r3, #0
   143e4:	d00c      	beq.n	14400 <setObtainEvent+0x2c>
   143e6:	4b09      	ldr	r3, [pc, #36]	; (1440c <setObtainEvent+0x38>)
   143e8:	4798      	blx	r3
   143ea:	0002      	movs	r2, r0
   143ec:	4b08      	ldr	r3, [pc, #32]	; (14410 <setObtainEvent+0x3c>)
   143ee:	681b      	ldr	r3, [r3, #0]
   143f0:	1ad2      	subs	r2, r2, r3
   143f2:	23fa      	movs	r3, #250	; 0xfa
   143f4:	009b      	lsls	r3, r3, #2
   143f6:	429a      	cmp	r2, r3
   143f8:	d902      	bls.n	14400 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
   143fa:	4b03      	ldr	r3, [pc, #12]	; (14408 <setObtainEvent+0x34>)
   143fc:	2201      	movs	r2, #1
   143fe:	701a      	strb	r2, [r3, #0]
	}
}
   14400:	46c0      	nop			; (mov r8, r8)
   14402:	46bd      	mov	sp, r7
   14404:	bd80      	pop	{r7, pc}
   14406:	46c0      	nop			; (mov r8, r8)
   14408:	20000972 	.word	0x20000972
   1440c:	00020dad 	.word	0x00020dad
   14410:	20000a14 	.word	0x20000a14

00014414 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
   14414:	b580      	push	{r7, lr}
   14416:	b082      	sub	sp, #8
   14418:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
   1441a:	1dfb      	adds	r3, r7, #7
   1441c:	2201      	movs	r2, #1
   1441e:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
   14420:	4b23      	ldr	r3, [pc, #140]	; (144b0 <operateOnStagedEvent+0x9c>)
   14422:	781b      	ldrb	r3, [r3, #0]
   14424:	2b00      	cmp	r3, #0
   14426:	d003      	beq.n	14430 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
   14428:	1dfb      	adds	r3, r7, #7
   1442a:	4a22      	ldr	r2, [pc, #136]	; (144b4 <operateOnStagedEvent+0xa0>)
   1442c:	7a12      	ldrb	r2, [r2, #8]
   1442e:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
   14430:	4b21      	ldr	r3, [pc, #132]	; (144b8 <operateOnStagedEvent+0xa4>)
   14432:	781b      	ldrb	r3, [r3, #0]
   14434:	2b00      	cmp	r3, #0
   14436:	d037      	beq.n	144a8 <operateOnStagedEvent+0x94>
   14438:	4b20      	ldr	r3, [pc, #128]	; (144bc <operateOnStagedEvent+0xa8>)
   1443a:	781b      	ldrb	r3, [r3, #0]
   1443c:	2b01      	cmp	r3, #1
   1443e:	d00b      	beq.n	14458 <operateOnStagedEvent+0x44>
   14440:	4b1f      	ldr	r3, [pc, #124]	; (144c0 <operateOnStagedEvent+0xac>)
   14442:	4798      	blx	r3
   14444:	0002      	movs	r2, r0
   14446:	4b1f      	ldr	r3, [pc, #124]	; (144c4 <operateOnStagedEvent+0xb0>)
   14448:	681b      	ldr	r3, [r3, #0]
   1444a:	1ad2      	subs	r2, r2, r3
   1444c:	1dfb      	adds	r3, r7, #7
   1444e:	781b      	ldrb	r3, [r3, #0]
   14450:	491d      	ldr	r1, [pc, #116]	; (144c8 <operateOnStagedEvent+0xb4>)
   14452:	434b      	muls	r3, r1
   14454:	429a      	cmp	r2, r3
   14456:	d927      	bls.n	144a8 <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   14458:	4b1c      	ldr	r3, [pc, #112]	; (144cc <operateOnStagedEvent+0xb8>)
   1445a:	78db      	ldrb	r3, [r3, #3]
   1445c:	2b00      	cmp	r3, #0
   1445e:	d01a      	beq.n	14496 <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
   14460:	4b13      	ldr	r3, [pc, #76]	; (144b0 <operateOnStagedEvent+0x9c>)
   14462:	781b      	ldrb	r3, [r3, #0]
   14464:	2b00      	cmp	r3, #0
   14466:	d007      	beq.n	14478 <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
   14468:	4b19      	ldr	r3, [pc, #100]	; (144d0 <operateOnStagedEvent+0xbc>)
   1446a:	781a      	ldrb	r2, [r3, #0]
   1446c:	4b19      	ldr	r3, [pc, #100]	; (144d4 <operateOnStagedEvent+0xc0>)
   1446e:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
   14470:	4b0f      	ldr	r3, [pc, #60]	; (144b0 <operateOnStagedEvent+0x9c>)
   14472:	2200      	movs	r2, #0
   14474:	701a      	strb	r2, [r3, #0]
   14476:	e015      	b.n	144a4 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
   14478:	4b17      	ldr	r3, [pc, #92]	; (144d8 <operateOnStagedEvent+0xc4>)
   1447a:	781b      	ldrb	r3, [r3, #0]
   1447c:	2b00      	cmp	r3, #0
   1447e:	d011      	beq.n	144a4 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
   14480:	4b13      	ldr	r3, [pc, #76]	; (144d0 <operateOnStagedEvent+0xbc>)
   14482:	781a      	ldrb	r2, [r3, #0]
   14484:	4b15      	ldr	r3, [pc, #84]	; (144dc <operateOnStagedEvent+0xc8>)
   14486:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
   14488:	4b15      	ldr	r3, [pc, #84]	; (144e0 <operateOnStagedEvent+0xcc>)
   1448a:	2201      	movs	r2, #1
   1448c:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
   1448e:	4b12      	ldr	r3, [pc, #72]	; (144d8 <operateOnStagedEvent+0xc4>)
   14490:	2200      	movs	r2, #0
   14492:	701a      	strb	r2, [r3, #0]
   14494:	e006      	b.n	144a4 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
   14496:	4b0e      	ldr	r3, [pc, #56]	; (144d0 <operateOnStagedEvent+0xbc>)
   14498:	781a      	ldrb	r2, [r3, #0]
   1449a:	4b0e      	ldr	r3, [pc, #56]	; (144d4 <operateOnStagedEvent+0xc0>)
   1449c:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
   1449e:	4b04      	ldr	r3, [pc, #16]	; (144b0 <operateOnStagedEvent+0x9c>)
   144a0:	2200      	movs	r2, #0
   144a2:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
   144a4:	4b0f      	ldr	r3, [pc, #60]	; (144e4 <operateOnStagedEvent+0xd0>)
   144a6:	4798      	blx	r3
	}
}
   144a8:	46c0      	nop			; (mov r8, r8)
   144aa:	46bd      	mov	sp, r7
   144ac:	b002      	add	sp, #8
   144ae:	bd80      	pop	{r7, pc}
   144b0:	200009d7 	.word	0x200009d7
   144b4:	20000854 	.word	0x20000854
   144b8:	20000972 	.word	0x20000972
   144bc:	200008e5 	.word	0x200008e5
   144c0:	00020dad 	.word	0x00020dad
   144c4:	200009f4 	.word	0x200009f4
   144c8:	0000ea60 	.word	0x0000ea60
   144cc:	2000082c 	.word	0x2000082c
   144d0:	20000975 	.word	0x20000975
   144d4:	20000963 	.word	0x20000963
   144d8:	2000098e 	.word	0x2000098e
   144dc:	2000092d 	.word	0x2000092d
   144e0:	20000943 	.word	0x20000943
   144e4:	000144e9 	.word	0x000144e9

000144e8 <makeResponseAction>:

void makeResponseAction(void)
{
   144e8:	b580      	push	{r7, lr}
   144ea:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
   144ec:	4b08      	ldr	r3, [pc, #32]	; (14510 <makeResponseAction+0x28>)
   144ee:	795b      	ldrb	r3, [r3, #5]
   144f0:	b2db      	uxtb	r3, r3
   144f2:	2b4e      	cmp	r3, #78	; 0x4e
   144f4:	d103      	bne.n	144fe <makeResponseAction+0x16>
   144f6:	4b07      	ldr	r3, [pc, #28]	; (14514 <makeResponseAction+0x2c>)
   144f8:	781b      	ldrb	r3, [r3, #0]
   144fa:	2b00      	cmp	r3, #0
   144fc:	d004      	beq.n	14508 <makeResponseAction+0x20>
	{
		freezeIncomingCalls = true;
   144fe:	4b06      	ldr	r3, [pc, #24]	; (14518 <makeResponseAction+0x30>)
   14500:	2201      	movs	r2, #1
   14502:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
   14504:	4b05      	ldr	r3, [pc, #20]	; (1451c <makeResponseAction+0x34>)
   14506:	4798      	blx	r3
	}
}
   14508:	46c0      	nop			; (mov r8, r8)
   1450a:	46bd      	mov	sp, r7
   1450c:	bd80      	pop	{r7, pc}
   1450e:	46c0      	nop			; (mov r8, r8)
   14510:	20000854 	.word	0x20000854
   14514:	20000943 	.word	0x20000943
   14518:	20000944 	.word	0x20000944
   1451c:	00014755 	.word	0x00014755

00014520 <endCall>:

void endCall(void)
{
   14520:	b580      	push	{r7, lr}
   14522:	af00      	add	r7, sp, #0
	nr  = 0;
   14524:	4b6d      	ldr	r3, [pc, #436]	; (146dc <endCall+0x1bc>)
   14526:	2200      	movs	r2, #0
   14528:	701a      	strb	r2, [r3, #0]
	inCall=false;
   1452a:	4b6d      	ldr	r3, [pc, #436]	; (146e0 <endCall+0x1c0>)
   1452c:	2200      	movs	r2, #0
   1452e:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
   14530:	4b6c      	ldr	r3, [pc, #432]	; (146e4 <endCall+0x1c4>)
   14532:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   14534:	2200      	movs	r2, #0
   14536:	2100      	movs	r1, #0
   14538:	2000      	movs	r0, #0
   1453a:	4b6b      	ldr	r3, [pc, #428]	; (146e8 <endCall+0x1c8>)
   1453c:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
   1453e:	23fa      	movs	r3, #250	; 0xfa
   14540:	009b      	lsls	r3, r3, #2
   14542:	0018      	movs	r0, r3
   14544:	4b69      	ldr	r3, [pc, #420]	; (146ec <endCall+0x1cc>)
   14546:	4798      	blx	r3
	freezeIncomingCalls = false;
   14548:	4b69      	ldr	r3, [pc, #420]	; (146f0 <endCall+0x1d0>)
   1454a:	2200      	movs	r2, #0
   1454c:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1454e:	4b69      	ldr	r3, [pc, #420]	; (146f4 <endCall+0x1d4>)
   14550:	785b      	ldrb	r3, [r3, #1]
   14552:	2b00      	cmp	r3, #0
   14554:	d002      	beq.n	1455c <endCall+0x3c>
	{
		zeroPressed=false;
   14556:	4b68      	ldr	r3, [pc, #416]	; (146f8 <endCall+0x1d8>)
   14558:	2200      	movs	r2, #0
   1455a:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   1455c:	4b65      	ldr	r3, [pc, #404]	; (146f4 <endCall+0x1d4>)
   1455e:	78db      	ldrb	r3, [r3, #3]
   14560:	2b01      	cmp	r3, #1
   14562:	d11d      	bne.n	145a0 <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
   14564:	4b65      	ldr	r3, [pc, #404]	; (146fc <endCall+0x1dc>)
   14566:	781b      	ldrb	r3, [r3, #0]
   14568:	b2db      	uxtb	r3, r3
   1456a:	2b4e      	cmp	r3, #78	; 0x4e
   1456c:	d004      	beq.n	14578 <endCall+0x58>
   1456e:	4b63      	ldr	r3, [pc, #396]	; (146fc <endCall+0x1dc>)
   14570:	781b      	ldrb	r3, [r3, #0]
   14572:	b2db      	uxtb	r3, r3
   14574:	2b52      	cmp	r3, #82	; 0x52
   14576:	d10d      	bne.n	14594 <endCall+0x74>
   14578:	4b61      	ldr	r3, [pc, #388]	; (14700 <endCall+0x1e0>)
   1457a:	781b      	ldrb	r3, [r3, #0]
   1457c:	b2db      	uxtb	r3, r3
   1457e:	2b4f      	cmp	r3, #79	; 0x4f
   14580:	d108      	bne.n	14594 <endCall+0x74>
   14582:	4b60      	ldr	r3, [pc, #384]	; (14704 <endCall+0x1e4>)
   14584:	781b      	ldrb	r3, [r3, #0]
   14586:	2201      	movs	r2, #1
   14588:	4053      	eors	r3, r2
   1458a:	b2db      	uxtb	r3, r3
   1458c:	2b00      	cmp	r3, #0
   1458e:	d001      	beq.n	14594 <endCall+0x74>
   14590:	2301      	movs	r3, #1
   14592:	e000      	b.n	14596 <endCall+0x76>
   14594:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   14596:	1c1a      	adds	r2, r3, #0
   14598:	2301      	movs	r3, #1
   1459a:	4013      	ands	r3, r2
   1459c:	b2db      	uxtb	r3, r3
   1459e:	e015      	b.n	145cc <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
   145a0:	4b56      	ldr	r3, [pc, #344]	; (146fc <endCall+0x1dc>)
   145a2:	781b      	ldrb	r3, [r3, #0]
   145a4:	b2db      	uxtb	r3, r3
   145a6:	2b4e      	cmp	r3, #78	; 0x4e
   145a8:	d004      	beq.n	145b4 <endCall+0x94>
   145aa:	4b54      	ldr	r3, [pc, #336]	; (146fc <endCall+0x1dc>)
   145ac:	781b      	ldrb	r3, [r3, #0]
   145ae:	b2db      	uxtb	r3, r3
   145b0:	2b52      	cmp	r3, #82	; 0x52
   145b2:	d106      	bne.n	145c2 <endCall+0xa2>
   145b4:	4b52      	ldr	r3, [pc, #328]	; (14700 <endCall+0x1e0>)
   145b6:	781b      	ldrb	r3, [r3, #0]
   145b8:	b2db      	uxtb	r3, r3
   145ba:	2b4f      	cmp	r3, #79	; 0x4f
   145bc:	d101      	bne.n	145c2 <endCall+0xa2>
   145be:	2301      	movs	r3, #1
   145c0:	e000      	b.n	145c4 <endCall+0xa4>
   145c2:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   145c4:	1c1a      	adds	r2, r3, #0
   145c6:	2301      	movs	r3, #1
   145c8:	4013      	ands	r3, r2
   145ca:	b2db      	uxtb	r3, r3
   145cc:	2b00      	cmp	r3, #0
   145ce:	d022      	beq.n	14616 <endCall+0xf6>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
   145d0:	4b4d      	ldr	r3, [pc, #308]	; (14708 <endCall+0x1e8>)
   145d2:	781b      	ldrb	r3, [r3, #0]
   145d4:	2b00      	cmp	r3, #0
   145d6:	d11e      	bne.n	14616 <endCall+0xf6>
   145d8:	4b4c      	ldr	r3, [pc, #304]	; (1470c <endCall+0x1ec>)
   145da:	781b      	ldrb	r3, [r3, #0]
   145dc:	2201      	movs	r2, #1
   145de:	4053      	eors	r3, r2
   145e0:	b2db      	uxtb	r3, r3
   145e2:	2b00      	cmp	r3, #0
   145e4:	d017      	beq.n	14616 <endCall+0xf6>
   145e6:	4b4a      	ldr	r3, [pc, #296]	; (14710 <endCall+0x1f0>)
   145e8:	795b      	ldrb	r3, [r3, #5]
   145ea:	b2db      	uxtb	r3, r3
   145ec:	2b54      	cmp	r3, #84	; 0x54
   145ee:	d112      	bne.n	14616 <endCall+0xf6>
   145f0:	4b48      	ldr	r3, [pc, #288]	; (14714 <endCall+0x1f4>)
   145f2:	789b      	ldrb	r3, [r3, #2]
   145f4:	2b01      	cmp	r3, #1
   145f6:	d90e      	bls.n	14616 <endCall+0xf6>
		{
			retries=1;
   145f8:	4b43      	ldr	r3, [pc, #268]	; (14708 <endCall+0x1e8>)
   145fa:	2201      	movs	r2, #1
   145fc:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   145fe:	4b46      	ldr	r3, [pc, #280]	; (14718 <endCall+0x1f8>)
   14600:	2201      	movs	r2, #1
   14602:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
   14604:	4b45      	ldr	r3, [pc, #276]	; (1471c <endCall+0x1fc>)
   14606:	4798      	blx	r3
   14608:	0002      	movs	r2, r0
   1460a:	4b45      	ldr	r3, [pc, #276]	; (14720 <endCall+0x200>)
   1460c:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
   1460e:	4b45      	ldr	r3, [pc, #276]	; (14724 <endCall+0x204>)
   14610:	781a      	ldrb	r2, [r3, #0]
   14612:	4b45      	ldr	r3, [pc, #276]	; (14728 <endCall+0x208>)
   14614:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14616:	4b37      	ldr	r3, [pc, #220]	; (146f4 <endCall+0x1d4>)
   14618:	78db      	ldrb	r3, [r3, #3]
   1461a:	2b00      	cmp	r3, #0
   1461c:	d047      	beq.n	146ae <endCall+0x18e>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
   1461e:	4b37      	ldr	r3, [pc, #220]	; (146fc <endCall+0x1dc>)
   14620:	781b      	ldrb	r3, [r3, #0]
   14622:	b2db      	uxtb	r3, r3
   14624:	2b49      	cmp	r3, #73	; 0x49
   14626:	d004      	beq.n	14632 <endCall+0x112>
   14628:	4b34      	ldr	r3, [pc, #208]	; (146fc <endCall+0x1dc>)
   1462a:	781b      	ldrb	r3, [r3, #0]
   1462c:	b2db      	uxtb	r3, r3
   1462e:	2b52      	cmp	r3, #82	; 0x52
   14630:	d137      	bne.n	146a2 <endCall+0x182>
   14632:	4b33      	ldr	r3, [pc, #204]	; (14700 <endCall+0x1e0>)
   14634:	781b      	ldrb	r3, [r3, #0]
   14636:	b2db      	uxtb	r3, r3
   14638:	2b4f      	cmp	r3, #79	; 0x4f
   1463a:	d132      	bne.n	146a2 <endCall+0x182>
   1463c:	4b31      	ldr	r3, [pc, #196]	; (14704 <endCall+0x1e4>)
   1463e:	781b      	ldrb	r3, [r3, #0]
   14640:	2b00      	cmp	r3, #0
   14642:	d02e      	beq.n	146a2 <endCall+0x182>
   14644:	4b39      	ldr	r3, [pc, #228]	; (1472c <endCall+0x20c>)
   14646:	795b      	ldrb	r3, [r3, #5]
   14648:	2b00      	cmp	r3, #0
   1464a:	d02a      	beq.n	146a2 <endCall+0x182>
		{
			m2mEventCalls++;
   1464c:	4b38      	ldr	r3, [pc, #224]	; (14730 <endCall+0x210>)
   1464e:	781b      	ldrb	r3, [r3, #0]
   14650:	3301      	adds	r3, #1
   14652:	b2da      	uxtb	r2, r3
   14654:	4b36      	ldr	r3, [pc, #216]	; (14730 <endCall+0x210>)
   14656:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
   14658:	4b36      	ldr	r3, [pc, #216]	; (14734 <endCall+0x214>)
   1465a:	781b      	ldrb	r3, [r3, #0]
   1465c:	2b00      	cmp	r3, #0
   1465e:	d006      	beq.n	1466e <endCall+0x14e>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
   14660:	4b35      	ldr	r3, [pc, #212]	; (14738 <endCall+0x218>)
   14662:	781b      	ldrb	r3, [r3, #0]
   14664:	2100      	movs	r1, #0
   14666:	0018      	movs	r0, r3
   14668:	4b34      	ldr	r3, [pc, #208]	; (1473c <endCall+0x21c>)
   1466a:	4798      	blx	r3
   1466c:	e016      	b.n	1469c <endCall+0x17c>
			}
			else
			{
				if(m2mEventCalls<2)
   1466e:	4b30      	ldr	r3, [pc, #192]	; (14730 <endCall+0x210>)
   14670:	781b      	ldrb	r3, [r3, #0]
   14672:	2b01      	cmp	r3, #1
   14674:	d80c      	bhi.n	14690 <endCall+0x170>
				{
					tempEventStageTime=xTaskGetTickCount();
   14676:	4b29      	ldr	r3, [pc, #164]	; (1471c <endCall+0x1fc>)
   14678:	4798      	blx	r3
   1467a:	0002      	movs	r2, r0
   1467c:	4b28      	ldr	r3, [pc, #160]	; (14720 <endCall+0x200>)
   1467e:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
   14680:	4b2d      	ldr	r3, [pc, #180]	; (14738 <endCall+0x218>)
   14682:	781a      	ldrb	r2, [r3, #0]
   14684:	4b28      	ldr	r3, [pc, #160]	; (14728 <endCall+0x208>)
   14686:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
   14688:	4b2d      	ldr	r3, [pc, #180]	; (14740 <endCall+0x220>)
   1468a:	2201      	movs	r2, #1
   1468c:	701a      	strb	r2, [r3, #0]
   1468e:	e005      	b.n	1469c <endCall+0x17c>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
   14690:	4b29      	ldr	r3, [pc, #164]	; (14738 <endCall+0x218>)
   14692:	781b      	ldrb	r3, [r3, #0]
   14694:	2103      	movs	r1, #3
   14696:	0018      	movs	r0, r3
   14698:	4b28      	ldr	r3, [pc, #160]	; (1473c <endCall+0x21c>)
   1469a:	4798      	blx	r3
				}
			}
			m2mEvent = false;
   1469c:	4b19      	ldr	r3, [pc, #100]	; (14704 <endCall+0x1e4>)
   1469e:	2200      	movs	r2, #0
   146a0:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
   146a2:	4b28      	ldr	r3, [pc, #160]	; (14744 <endCall+0x224>)
   146a4:	2200      	movs	r2, #0
   146a6:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
   146a8:	4b22      	ldr	r3, [pc, #136]	; (14734 <endCall+0x214>)
   146aa:	2200      	movs	r2, #0
   146ac:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
   146ae:	4b17      	ldr	r3, [pc, #92]	; (1470c <endCall+0x1ec>)
   146b0:	2200      	movs	r2, #0
   146b2:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   146b4:	4b11      	ldr	r3, [pc, #68]	; (146fc <endCall+0x1dc>)
   146b6:	224e      	movs	r2, #78	; 0x4e
   146b8:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   146ba:	4b11      	ldr	r3, [pc, #68]	; (14700 <endCall+0x1e0>)
   146bc:	224e      	movs	r2, #78	; 0x4e
   146be:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
   146c0:	4b21      	ldr	r3, [pc, #132]	; (14748 <endCall+0x228>)
   146c2:	2200      	movs	r2, #0
   146c4:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
   146c6:	4b15      	ldr	r3, [pc, #84]	; (1471c <endCall+0x1fc>)
   146c8:	4798      	blx	r3
   146ca:	0002      	movs	r2, r0
   146cc:	4b1f      	ldr	r3, [pc, #124]	; (1474c <endCall+0x22c>)
   146ce:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
   146d0:	4b1f      	ldr	r3, [pc, #124]	; (14750 <endCall+0x230>)
   146d2:	2200      	movs	r2, #0
   146d4:	701a      	strb	r2, [r3, #0]
}
   146d6:	46c0      	nop			; (mov r8, r8)
   146d8:	46bd      	mov	sp, r7
   146da:	bd80      	pop	{r7, pc}
   146dc:	200008e4 	.word	0x200008e4
   146e0:	2000099c 	.word	0x2000099c
   146e4:	000130ad 	.word	0x000130ad
   146e8:	0001db19 	.word	0x0001db19
   146ec:	00020a49 	.word	0x00020a49
   146f0:	20000944 	.word	0x20000944
   146f4:	2000082c 	.word	0x2000082c
   146f8:	20000a0f 	.word	0x20000a0f
   146fc:	200009e0 	.word	0x200009e0
   14700:	2000098f 	.word	0x2000098f
   14704:	20000943 	.word	0x20000943
   14708:	200008e5 	.word	0x200008e5
   1470c:	2000099e 	.word	0x2000099e
   14710:	20000854 	.word	0x20000854
   14714:	20000814 	.word	0x20000814
   14718:	200009d7 	.word	0x200009d7
   1471c:	00020dad 	.word	0x00020dad
   14720:	200009f4 	.word	0x200009f4
   14724:	20000963 	.word	0x20000963
   14728:	20000975 	.word	0x20000975
   1472c:	20000754 	.word	0x20000754
   14730:	200009d8 	.word	0x200009d8
   14734:	2000092c 	.word	0x2000092c
   14738:	2000092d 	.word	0x2000092d
   1473c:	0001ca99 	.word	0x0001ca99
   14740:	2000098e 	.word	0x2000098e
   14744:	200009d4 	.word	0x200009d4
   14748:	20000998 	.word	0x20000998
   1474c:	20000a14 	.word	0x20000a14
   14750:	20000972 	.word	0x20000972

00014754 <makeCall>:


void makeCall(void)
{
   14754:	b580      	push	{r7, lr}
   14756:	b086      	sub	sp, #24
   14758:	af00      	add	r7, sp, #0
	inCall=true;
   1475a:	4b20      	ldr	r3, [pc, #128]	; (147dc <makeCall+0x88>)
   1475c:	2201      	movs	r2, #1
   1475e:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
   14760:	1d3b      	adds	r3, r7, #4
   14762:	0018      	movs	r0, r3
   14764:	2314      	movs	r3, #20
   14766:	001a      	movs	r2, r3
   14768:	2100      	movs	r1, #0
   1476a:	4b1d      	ldr	r3, [pc, #116]	; (147e0 <makeCall+0x8c>)
   1476c:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
   1476e:	4b1d      	ldr	r3, [pc, #116]	; (147e4 <makeCall+0x90>)
   14770:	795b      	ldrb	r3, [r3, #5]
   14772:	2b00      	cmp	r3, #0
   14774:	d008      	beq.n	14788 <makeCall+0x34>
   14776:	4b1c      	ldr	r3, [pc, #112]	; (147e8 <makeCall+0x94>)
   14778:	781b      	ldrb	r3, [r3, #0]
   1477a:	2b00      	cmp	r3, #0
   1477c:	d004      	beq.n	14788 <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
   1477e:	1d3b      	adds	r3, r7, #4
   14780:	0018      	movs	r0, r3
   14782:	4b1a      	ldr	r3, [pc, #104]	; (147ec <makeCall+0x98>)
   14784:	4798      	blx	r3
   14786:	e00f      	b.n	147a8 <makeCall+0x54>
	}
	else
	{
		if(retries)
   14788:	4b19      	ldr	r3, [pc, #100]	; (147f0 <makeCall+0x9c>)
   1478a:	781b      	ldrb	r3, [r3, #0]
   1478c:	2b00      	cmp	r3, #0
   1478e:	d007      	beq.n	147a0 <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
   14790:	4b18      	ldr	r3, [pc, #96]	; (147f4 <makeCall+0xa0>)
   14792:	791a      	ldrb	r2, [r3, #4]
   14794:	1d3b      	adds	r3, r7, #4
   14796:	0011      	movs	r1, r2
   14798:	0018      	movs	r0, r3
   1479a:	4b17      	ldr	r3, [pc, #92]	; (147f8 <makeCall+0xa4>)
   1479c:	4798      	blx	r3
   1479e:	e003      	b.n	147a8 <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
   147a0:	1d3b      	adds	r3, r7, #4
   147a2:	0018      	movs	r0, r3
   147a4:	4b15      	ldr	r3, [pc, #84]	; (147fc <makeCall+0xa8>)
   147a6:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
   147a8:	1d3b      	adds	r3, r7, #4
   147aa:	0018      	movs	r0, r3
   147ac:	4b14      	ldr	r3, [pc, #80]	; (14800 <makeCall+0xac>)
   147ae:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
   147b0:	1d3b      	adds	r3, r7, #4
   147b2:	2200      	movs	r2, #0
   147b4:	0019      	movs	r1, r3
   147b6:	2003      	movs	r0, #3
   147b8:	4b12      	ldr	r3, [pc, #72]	; (14804 <makeCall+0xb0>)
   147ba:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   147bc:	4b12      	ldr	r3, [pc, #72]	; (14808 <makeCall+0xb4>)
   147be:	4798      	blx	r3
   147c0:	0002      	movs	r2, r0
   147c2:	4b12      	ldr	r3, [pc, #72]	; (1480c <makeCall+0xb8>)
   147c4:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
   147c6:	4b12      	ldr	r3, [pc, #72]	; (14810 <makeCall+0xbc>)
   147c8:	2252      	movs	r2, #82	; 0x52
   147ca:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
   147cc:	4b11      	ldr	r3, [pc, #68]	; (14814 <makeCall+0xc0>)
   147ce:	224f      	movs	r2, #79	; 0x4f
   147d0:	701a      	strb	r2, [r3, #0]
}
   147d2:	46c0      	nop			; (mov r8, r8)
   147d4:	46bd      	mov	sp, r7
   147d6:	b006      	add	sp, #24
   147d8:	bd80      	pop	{r7, pc}
   147da:	46c0      	nop			; (mov r8, r8)
   147dc:	2000099c 	.word	0x2000099c
   147e0:	0002975b 	.word	0x0002975b
   147e4:	20000754 	.word	0x20000754
   147e8:	20000943 	.word	0x20000943
   147ec:	00010b09 	.word	0x00010b09
   147f0:	200008e5 	.word	0x200008e5
   147f4:	20000814 	.word	0x20000814
   147f8:	00010919 	.word	0x00010919
   147fc:	00010d21 	.word	0x00010d21
   14800:	00012ee9 	.word	0x00012ee9
   14804:	0001db19 	.word	0x0001db19
   14808:	00020dad 	.word	0x00020dad
   1480c:	20000a18 	.word	0x20000a18
   14810:	200009e0 	.word	0x200009e0
   14814:	2000098f 	.word	0x2000098f

00014818 <acceptCall>:

void acceptCall(void)
{
   14818:	b580      	push	{r7, lr}
   1481a:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
   1481c:	4b09      	ldr	r3, [pc, #36]	; (14844 <acceptCall+0x2c>)
   1481e:	2200      	movs	r2, #0
   14820:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
   14822:	4b09      	ldr	r3, [pc, #36]	; (14848 <acceptCall+0x30>)
   14824:	2201      	movs	r2, #1
   14826:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
   14828:	4b08      	ldr	r3, [pc, #32]	; (1484c <acceptCall+0x34>)
   1482a:	4798      	blx	r3
	currentStatus = 'I';
   1482c:	4b08      	ldr	r3, [pc, #32]	; (14850 <acceptCall+0x38>)
   1482e:	2249      	movs	r2, #73	; 0x49
   14830:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
   14832:	4b08      	ldr	r3, [pc, #32]	; (14854 <acceptCall+0x3c>)
   14834:	2249      	movs	r2, #73	; 0x49
   14836:	701a      	strb	r2, [r3, #0]
	statusOnCall();
   14838:	4b07      	ldr	r3, [pc, #28]	; (14858 <acceptCall+0x40>)
   1483a:	4798      	blx	r3
	//playSound('M',true);
	//displayInIncomingCall
}
   1483c:	46c0      	nop			; (mov r8, r8)
   1483e:	46bd      	mov	sp, r7
   14840:	bd80      	pop	{r7, pc}
   14842:	46c0      	nop			; (mov r8, r8)
   14844:	20000998 	.word	0x20000998
   14848:	2000099e 	.word	0x2000099e
   1484c:	00012f81 	.word	0x00012f81
   14850:	200009e0 	.word	0x200009e0
   14854:	2000098f 	.word	0x2000098f
   14858:	0001c949 	.word	0x0001c949

0001485c <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
   1485c:	b580      	push	{r7, lr}
   1485e:	b082      	sub	sp, #8
   14860:	af00      	add	r7, sp, #0
   14862:	0002      	movs	r2, r0
   14864:	1dfb      	adds	r3, r7, #7
   14866:	701a      	strb	r2, [r3, #0]
   14868:	1dbb      	adds	r3, r7, #6
   1486a:	1c0a      	adds	r2, r1, #0
   1486c:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
   1486e:	4b14      	ldr	r3, [pc, #80]	; (148c0 <playSound+0x64>)
   14870:	4798      	blx	r3
	bplaySound = true;
   14872:	4b14      	ldr	r3, [pc, #80]	; (148c4 <playSound+0x68>)
   14874:	2201      	movs	r2, #1
   14876:	701a      	strb	r2, [r3, #0]
	if (newAction)
   14878:	1dbb      	adds	r3, r7, #6
   1487a:	781b      	ldrb	r3, [r3, #0]
   1487c:	2b00      	cmp	r3, #0
   1487e:	d016      	beq.n	148ae <playSound+0x52>
	{
		maxPlayingFiles=1;
   14880:	4b11      	ldr	r3, [pc, #68]	; (148c8 <playSound+0x6c>)
   14882:	2201      	movs	r2, #1
   14884:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
   14886:	4b11      	ldr	r3, [pc, #68]	; (148cc <playSound+0x70>)
   14888:	2200      	movs	r2, #0
   1488a:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
   1488c:	4b0f      	ldr	r3, [pc, #60]	; (148cc <playSound+0x70>)
   1488e:	781b      	ldrb	r3, [r3, #0]
   14890:	0019      	movs	r1, r3
   14892:	4b0f      	ldr	r3, [pc, #60]	; (148d0 <playSound+0x74>)
   14894:	1dfa      	adds	r2, r7, #7
   14896:	7812      	ldrb	r2, [r2, #0]
   14898:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
   1489a:	4b0c      	ldr	r3, [pc, #48]	; (148cc <playSound+0x70>)
   1489c:	781b      	ldrb	r3, [r3, #0]
   1489e:	3301      	adds	r3, #1
   148a0:	4a0b      	ldr	r2, [pc, #44]	; (148d0 <playSound+0x74>)
   148a2:	2100      	movs	r1, #0
   148a4:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
   148a6:	4b0b      	ldr	r3, [pc, #44]	; (148d4 <playSound+0x78>)
   148a8:	1dfa      	adds	r2, r7, #7
   148aa:	7812      	ldrb	r2, [r2, #0]
   148ac:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
   148ae:	4b0a      	ldr	r3, [pc, #40]	; (148d8 <playSound+0x7c>)
   148b0:	1dfa      	adds	r2, r7, #7
   148b2:	7812      	ldrb	r2, [r2, #0]
   148b4:	701a      	strb	r2, [r3, #0]
}
   148b6:	46c0      	nop			; (mov r8, r8)
   148b8:	46bd      	mov	sp, r7
   148ba:	b002      	add	sp, #8
   148bc:	bd80      	pop	{r7, pc}
   148be:	46c0      	nop			; (mov r8, r8)
   148c0:	0001310d 	.word	0x0001310d
   148c4:	20000a66 	.word	0x20000a66
   148c8:	200009d9 	.word	0x200009d9
   148cc:	200009c9 	.word	0x200009c9
   148d0:	2000094c 	.word	0x2000094c
   148d4:	20000963 	.word	0x20000963
   148d8:	200009c7 	.word	0x200009c7

000148dc <playSoundElligible>:

bool playSoundElligible(void)
{
   148dc:	b580      	push	{r7, lr}
   148de:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
   148e0:	4b0d      	ldr	r3, [pc, #52]	; (14918 <playSoundElligible+0x3c>)
   148e2:	781b      	ldrb	r3, [r3, #0]
   148e4:	2b00      	cmp	r3, #0
   148e6:	d00e      	beq.n	14906 <playSoundElligible+0x2a>
   148e8:	4b0c      	ldr	r3, [pc, #48]	; (1491c <playSoundElligible+0x40>)
   148ea:	4798      	blx	r3
   148ec:	0002      	movs	r2, r0
   148ee:	4b0c      	ldr	r3, [pc, #48]	; (14920 <playSoundElligible+0x44>)
   148f0:	681b      	ldr	r3, [r3, #0]
   148f2:	1ad3      	subs	r3, r2, r3
   148f4:	4a0b      	ldr	r2, [pc, #44]	; (14924 <playSoundElligible+0x48>)
   148f6:	7812      	ldrb	r2, [r2, #0]
   148f8:	0011      	movs	r1, r2
   148fa:	2264      	movs	r2, #100	; 0x64
   148fc:	434a      	muls	r2, r1
   148fe:	4293      	cmp	r3, r2
   14900:	d901      	bls.n	14906 <playSoundElligible+0x2a>
   14902:	2301      	movs	r3, #1
   14904:	e000      	b.n	14908 <playSoundElligible+0x2c>
   14906:	2300      	movs	r3, #0
   14908:	1c1a      	adds	r2, r3, #0
   1490a:	2301      	movs	r3, #1
   1490c:	4013      	ands	r3, r2
   1490e:	b2db      	uxtb	r3, r3
}
   14910:	0018      	movs	r0, r3
   14912:	46bd      	mov	sp, r7
   14914:	bd80      	pop	{r7, pc}
   14916:	46c0      	nop			; (mov r8, r8)
   14918:	20000a66 	.word	0x20000a66
   1491c:	00020dad 	.word	0x00020dad
   14920:	20000a40 	.word	0x20000a40
   14924:	200009da 	.word	0x200009da

00014928 <triggerPlaySound>:

void triggerPlaySound(void)
{
   14928:	b580      	push	{r7, lr}
   1492a:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
   1492c:	4b0b      	ldr	r3, [pc, #44]	; (1495c <triggerPlaySound+0x34>)
   1492e:	781b      	ldrb	r3, [r3, #0]
   14930:	2b01      	cmp	r3, #1
   14932:	d906      	bls.n	14942 <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
   14934:	4b0a      	ldr	r3, [pc, #40]	; (14960 <triggerPlaySound+0x38>)
   14936:	781b      	ldrb	r3, [r3, #0]
   14938:	2100      	movs	r1, #0
   1493a:	0018      	movs	r0, r3
   1493c:	4b09      	ldr	r3, [pc, #36]	; (14964 <triggerPlaySound+0x3c>)
   1493e:	4798      	blx	r3
   14940:	e005      	b.n	1494e <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
   14942:	4b07      	ldr	r3, [pc, #28]	; (14960 <triggerPlaySound+0x38>)
   14944:	781b      	ldrb	r3, [r3, #0]
   14946:	2101      	movs	r1, #1
   14948:	0018      	movs	r0, r3
   1494a:	4b06      	ldr	r3, [pc, #24]	; (14964 <triggerPlaySound+0x3c>)
   1494c:	4798      	blx	r3
	}
	bplaySound = false;
   1494e:	4b06      	ldr	r3, [pc, #24]	; (14968 <triggerPlaySound+0x40>)
   14950:	2200      	movs	r2, #0
   14952:	701a      	strb	r2, [r3, #0]
}
   14954:	46c0      	nop			; (mov r8, r8)
   14956:	46bd      	mov	sp, r7
   14958:	bd80      	pop	{r7, pc}
   1495a:	46c0      	nop			; (mov r8, r8)
   1495c:	200009d9 	.word	0x200009d9
   14960:	200009c7 	.word	0x200009c7
   14964:	0001313d 	.word	0x0001313d
   14968:	20000a66 	.word	0x20000a66

0001496c <playSoundAgain>:

void playSoundAgain(char *string)
{
   1496c:	b580      	push	{r7, lr}
   1496e:	b082      	sub	sp, #8
   14970:	af00      	add	r7, sp, #0
   14972:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
   14974:	4b1c      	ldr	r3, [pc, #112]	; (149e8 <playSoundAgain+0x7c>)
   14976:	781b      	ldrb	r3, [r3, #0]
   14978:	2201      	movs	r2, #1
   1497a:	4053      	eors	r3, r2
   1497c:	b2db      	uxtb	r3, r3
   1497e:	2b00      	cmp	r3, #0
   14980:	d02e      	beq.n	149e0 <playSoundAgain+0x74>
   14982:	687b      	ldr	r3, [r7, #4]
   14984:	0018      	movs	r0, r3
   14986:	4b19      	ldr	r3, [pc, #100]	; (149ec <playSoundAgain+0x80>)
   14988:	4798      	blx	r3
   1498a:	1e03      	subs	r3, r0, #0
   1498c:	d028      	beq.n	149e0 <playSoundAgain+0x74>
	{
		if(maxPlayingFiles>1)
   1498e:	4b18      	ldr	r3, [pc, #96]	; (149f0 <playSoundAgain+0x84>)
   14990:	781b      	ldrb	r3, [r3, #0]
   14992:	2b01      	cmp	r3, #1
   14994:	d91c      	bls.n	149d0 <playSoundAgain+0x64>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
   14996:	4b17      	ldr	r3, [pc, #92]	; (149f4 <playSoundAgain+0x88>)
   14998:	781b      	ldrb	r3, [r3, #0]
   1499a:	001a      	movs	r2, r3
   1499c:	4b14      	ldr	r3, [pc, #80]	; (149f0 <playSoundAgain+0x84>)
   1499e:	781b      	ldrb	r3, [r3, #0]
   149a0:	3b01      	subs	r3, #1
   149a2:	429a      	cmp	r2, r3
   149a4:	da0f      	bge.n	149c6 <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
   149a6:	4b13      	ldr	r3, [pc, #76]	; (149f4 <playSoundAgain+0x88>)
   149a8:	781b      	ldrb	r3, [r3, #0]
   149aa:	3301      	adds	r3, #1
   149ac:	b2da      	uxtb	r2, r3
   149ae:	4b11      	ldr	r3, [pc, #68]	; (149f4 <playSoundAgain+0x88>)
   149b0:	701a      	strb	r2, [r3, #0]
   149b2:	4b10      	ldr	r3, [pc, #64]	; (149f4 <playSoundAgain+0x88>)
   149b4:	781b      	ldrb	r3, [r3, #0]
   149b6:	001a      	movs	r2, r3
   149b8:	4b0f      	ldr	r3, [pc, #60]	; (149f8 <playSoundAgain+0x8c>)
   149ba:	5c9b      	ldrb	r3, [r3, r2]
   149bc:	2100      	movs	r1, #0
   149be:	0018      	movs	r0, r3
   149c0:	4b0e      	ldr	r3, [pc, #56]	; (149fc <playSoundAgain+0x90>)
   149c2:	4798      	blx	r3
		else if(maxPlayingFiles==1)
		{
			playSound('M',true);
		}
	}
}
   149c4:	e00c      	b.n	149e0 <playSoundAgain+0x74>
				playSound('M',true);
   149c6:	2101      	movs	r1, #1
   149c8:	204d      	movs	r0, #77	; 0x4d
   149ca:	4b0c      	ldr	r3, [pc, #48]	; (149fc <playSoundAgain+0x90>)
   149cc:	4798      	blx	r3
}
   149ce:	e007      	b.n	149e0 <playSoundAgain+0x74>
		else if(maxPlayingFiles==1)
   149d0:	4b07      	ldr	r3, [pc, #28]	; (149f0 <playSoundAgain+0x84>)
   149d2:	781b      	ldrb	r3, [r3, #0]
   149d4:	2b01      	cmp	r3, #1
   149d6:	d103      	bne.n	149e0 <playSoundAgain+0x74>
			playSound('M',true);
   149d8:	2101      	movs	r1, #1
   149da:	204d      	movs	r0, #77	; 0x4d
   149dc:	4b07      	ldr	r3, [pc, #28]	; (149fc <playSoundAgain+0x90>)
   149de:	4798      	blx	r3
}
   149e0:	46c0      	nop			; (mov r8, r8)
   149e2:	46bd      	mov	sp, r7
   149e4:	b002      	add	sp, #8
   149e6:	bd80      	pop	{r7, pc}
   149e8:	20000a66 	.word	0x20000a66
   149ec:	000138b1 	.word	0x000138b1
   149f0:	200009d9 	.word	0x200009d9
   149f4:	200009c9 	.word	0x200009c9
   149f8:	2000094c 	.word	0x2000094c
   149fc:	0001485d 	.word	0x0001485d

00014a00 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
   14a00:	b580      	push	{r7, lr}
   14a02:	b082      	sub	sp, #8
   14a04:	af00      	add	r7, sp, #0
   14a06:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
   14a08:	687b      	ldr	r3, [r7, #4]
   14a0a:	0018      	movs	r0, r3
   14a0c:	4b14      	ldr	r3, [pc, #80]	; (14a60 <playRepeatedFiles+0x60>)
   14a0e:	4798      	blx	r3
   14a10:	0003      	movs	r3, r0
   14a12:	2b0e      	cmp	r3, #14
   14a14:	d81f      	bhi.n	14a56 <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
   14a16:	4b13      	ldr	r3, [pc, #76]	; (14a64 <playRepeatedFiles+0x64>)
   14a18:	2200      	movs	r2, #0
   14a1a:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
   14a1c:	687b      	ldr	r3, [r7, #4]
   14a1e:	0018      	movs	r0, r3
   14a20:	4b0f      	ldr	r3, [pc, #60]	; (14a60 <playRepeatedFiles+0x60>)
   14a22:	4798      	blx	r3
   14a24:	0003      	movs	r3, r0
   14a26:	b2da      	uxtb	r2, r3
   14a28:	4b0f      	ldr	r3, [pc, #60]	; (14a68 <playRepeatedFiles+0x68>)
   14a2a:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
   14a2c:	687a      	ldr	r2, [r7, #4]
   14a2e:	4b0f      	ldr	r3, [pc, #60]	; (14a6c <playRepeatedFiles+0x6c>)
   14a30:	0011      	movs	r1, r2
   14a32:	0018      	movs	r0, r3
   14a34:	4b0e      	ldr	r3, [pc, #56]	; (14a70 <playRepeatedFiles+0x70>)
   14a36:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
   14a38:	4b0e      	ldr	r3, [pc, #56]	; (14a74 <playRepeatedFiles+0x74>)
   14a3a:	4798      	blx	r3
   14a3c:	0002      	movs	r2, r0
   14a3e:	4b0e      	ldr	r3, [pc, #56]	; (14a78 <playRepeatedFiles+0x78>)
   14a40:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
   14a42:	4b08      	ldr	r3, [pc, #32]	; (14a64 <playRepeatedFiles+0x64>)
   14a44:	781b      	ldrb	r3, [r3, #0]
   14a46:	001a      	movs	r2, r3
   14a48:	4b08      	ldr	r3, [pc, #32]	; (14a6c <playRepeatedFiles+0x6c>)
   14a4a:	5c9a      	ldrb	r2, [r3, r2]
   14a4c:	4b0b      	ldr	r3, [pc, #44]	; (14a7c <playRepeatedFiles+0x7c>)
   14a4e:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
   14a50:	4b0b      	ldr	r3, [pc, #44]	; (14a80 <playRepeatedFiles+0x80>)
   14a52:	2201      	movs	r2, #1
   14a54:	701a      	strb	r2, [r3, #0]
	}
}
   14a56:	46c0      	nop			; (mov r8, r8)
   14a58:	46bd      	mov	sp, r7
   14a5a:	b002      	add	sp, #8
   14a5c:	bd80      	pop	{r7, pc}
   14a5e:	46c0      	nop			; (mov r8, r8)
   14a60:	000299eb 	.word	0x000299eb
   14a64:	200009c9 	.word	0x200009c9
   14a68:	200009d9 	.word	0x200009d9
   14a6c:	2000094c 	.word	0x2000094c
   14a70:	000299db 	.word	0x000299db
   14a74:	00020dad 	.word	0x00020dad
   14a78:	20000a40 	.word	0x20000a40
   14a7c:	200009c7 	.word	0x200009c7
   14a80:	20000a66 	.word	0x20000a66

00014a84 <callTimerExpire>:

bool callTimerExpire(void)
{
   14a84:	b580      	push	{r7, lr}
   14a86:	af00      	add	r7, sp, #0
	if(isRinging)
   14a88:	4b12      	ldr	r3, [pc, #72]	; (14ad4 <callTimerExpire+0x50>)
   14a8a:	781b      	ldrb	r3, [r3, #0]
   14a8c:	b2db      	uxtb	r3, r3
   14a8e:	2b00      	cmp	r3, #0
   14a90:	d00a      	beq.n	14aa8 <callTimerExpire+0x24>
	{
		if(xTaskGetTickCount()-lastRingStateChangeTime>3000)
   14a92:	4b11      	ldr	r3, [pc, #68]	; (14ad8 <callTimerExpire+0x54>)
   14a94:	4798      	blx	r3
   14a96:	0002      	movs	r2, r0
   14a98:	4b10      	ldr	r3, [pc, #64]	; (14adc <callTimerExpire+0x58>)
   14a9a:	681b      	ldr	r3, [r3, #0]
   14a9c:	1ad3      	subs	r3, r2, r3
   14a9e:	4a10      	ldr	r2, [pc, #64]	; (14ae0 <callTimerExpire+0x5c>)
   14aa0:	4293      	cmp	r3, r2
   14aa2:	d912      	bls.n	14aca <callTimerExpire+0x46>
		{
			return true;
   14aa4:	2301      	movs	r3, #1
   14aa6:	e011      	b.n	14acc <callTimerExpire+0x48>
		}
	}
	else
	{
		return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
   14aa8:	4b0b      	ldr	r3, [pc, #44]	; (14ad8 <callTimerExpire+0x54>)
   14aaa:	4798      	blx	r3
   14aac:	0002      	movs	r2, r0
   14aae:	4b0d      	ldr	r3, [pc, #52]	; (14ae4 <callTimerExpire+0x60>)
   14ab0:	681b      	ldr	r3, [r3, #0]
   14ab2:	1ad2      	subs	r2, r2, r3
   14ab4:	4b0c      	ldr	r3, [pc, #48]	; (14ae8 <callTimerExpire+0x64>)
   14ab6:	881b      	ldrh	r3, [r3, #0]
   14ab8:	0019      	movs	r1, r3
   14aba:	2364      	movs	r3, #100	; 0x64
   14abc:	434b      	muls	r3, r1
   14abe:	0019      	movs	r1, r3
   14ac0:	2300      	movs	r3, #0
   14ac2:	428a      	cmp	r2, r1
   14ac4:	415b      	adcs	r3, r3
   14ac6:	b2db      	uxtb	r3, r3
   14ac8:	e000      	b.n	14acc <callTimerExpire+0x48>
	}
	return false;
   14aca:	2300      	movs	r3, #0
}
   14acc:	0018      	movs	r0, r3
   14ace:	46bd      	mov	sp, r7
   14ad0:	bd80      	pop	{r7, pc}
   14ad2:	46c0      	nop			; (mov r8, r8)
   14ad4:	2000088e 	.word	0x2000088e
   14ad8:	00020dad 	.word	0x00020dad
   14adc:	200008cc 	.word	0x200008cc
   14ae0:	00000bb8 	.word	0x00000bb8
   14ae4:	20000a18 	.word	0x20000a18
   14ae8:	20000964 	.word	0x20000964

00014aec <OutGoingcallState>:

char OutGoingcallState(char *response)
{
   14aec:	b580      	push	{r7, lr}
   14aee:	b082      	sub	sp, #8
   14af0:	af00      	add	r7, sp, #0
   14af2:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
   14af4:	4a16      	ldr	r2, [pc, #88]	; (14b50 <OutGoingcallState+0x64>)
   14af6:	687b      	ldr	r3, [r7, #4]
   14af8:	0011      	movs	r1, r2
   14afa:	0018      	movs	r0, r3
   14afc:	4b15      	ldr	r3, [pc, #84]	; (14b54 <OutGoingcallState+0x68>)
   14afe:	4798      	blx	r3
   14b00:	1e03      	subs	r3, r0, #0
   14b02:	d001      	beq.n	14b08 <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
   14b04:	2344      	movs	r3, #68	; 0x44
   14b06:	e01e      	b.n	14b46 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
   14b08:	4a13      	ldr	r2, [pc, #76]	; (14b58 <OutGoingcallState+0x6c>)
   14b0a:	687b      	ldr	r3, [r7, #4]
   14b0c:	0011      	movs	r1, r2
   14b0e:	0018      	movs	r0, r3
   14b10:	4b10      	ldr	r3, [pc, #64]	; (14b54 <OutGoingcallState+0x68>)
   14b12:	4798      	blx	r3
   14b14:	1e03      	subs	r3, r0, #0
   14b16:	d001      	beq.n	14b1c <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
   14b18:	2352      	movs	r3, #82	; 0x52
   14b1a:	e014      	b.n	14b46 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
   14b1c:	4a0f      	ldr	r2, [pc, #60]	; (14b5c <OutGoingcallState+0x70>)
   14b1e:	687b      	ldr	r3, [r7, #4]
   14b20:	0011      	movs	r1, r2
   14b22:	0018      	movs	r0, r3
   14b24:	4b0b      	ldr	r3, [pc, #44]	; (14b54 <OutGoingcallState+0x68>)
   14b26:	4798      	blx	r3
   14b28:	1e03      	subs	r3, r0, #0
   14b2a:	d001      	beq.n	14b30 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
   14b2c:	2349      	movs	r3, #73	; 0x49
   14b2e:	e00a      	b.n	14b46 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
   14b30:	4a0b      	ldr	r2, [pc, #44]	; (14b60 <OutGoingcallState+0x74>)
   14b32:	687b      	ldr	r3, [r7, #4]
   14b34:	0011      	movs	r1, r2
   14b36:	0018      	movs	r0, r3
   14b38:	4b06      	ldr	r3, [pc, #24]	; (14b54 <OutGoingcallState+0x68>)
   14b3a:	4798      	blx	r3
   14b3c:	1e03      	subs	r3, r0, #0
   14b3e:	d001      	beq.n	14b44 <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
   14b40:	2345      	movs	r3, #69	; 0x45
   14b42:	e000      	b.n	14b46 <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
   14b44:	234e      	movs	r3, #78	; 0x4e
	}
}
   14b46:	0018      	movs	r0, r3
   14b48:	46bd      	mov	sp, r7
   14b4a:	b002      	add	sp, #8
   14b4c:	bd80      	pop	{r7, pc}
   14b4e:	46c0      	nop			; (mov r8, r8)
   14b50:	0002a98c 	.word	0x0002a98c
   14b54:	00029a1b 	.word	0x00029a1b
   14b58:	0002a99c 	.word	0x0002a99c
   14b5c:	0002a9ac 	.word	0x0002a9ac
   14b60:	0002a9bc 	.word	0x0002a9bc

00014b64 <checkForSIMStatus>:

void checkForSIMStatus()
{
   14b64:	b590      	push	{r4, r7, lr}
   14b66:	b083      	sub	sp, #12
   14b68:	af00      	add	r7, sp, #0
	uint8_t temp = 2;
   14b6a:	1dfb      	adds	r3, r7, #7
   14b6c:	2202      	movs	r2, #2
   14b6e:	701a      	strb	r2, [r3, #0]
	while(temp--)
   14b70:	e012      	b.n	14b98 <checkForSIMStatus+0x34>
	{
		enum gsm_error temp;
		temp = gsm_check_module();
   14b72:	1dbc      	adds	r4, r7, #6
   14b74:	4b26      	ldr	r3, [pc, #152]	; (14c10 <checkForSIMStatus+0xac>)
   14b76:	4798      	blx	r3
   14b78:	0003      	movs	r3, r0
   14b7a:	7023      	strb	r3, [r4, #0]
		if(temp == GSM_ERROR_NONE)
   14b7c:	1dbb      	adds	r3, r7, #6
   14b7e:	781b      	ldrb	r3, [r3, #0]
   14b80:	2b00      	cmp	r3, #0
   14b82:	d041      	beq.n	14c08 <checkForSIMStatus+0xa4>
		{
			return;									// if SIM800 replies to the commands, than return from here.
		}
		else if(temp == GSM_ERROR_OPERATION_IN_PROGRESS)
   14b84:	1dbb      	adds	r3, r7, #6
   14b86:	781b      	ldrb	r3, [r3, #0]
   14b88:	2b02      	cmp	r3, #2
   14b8a:	d105      	bne.n	14b98 <checkForSIMStatus+0x34>
		{
				//if Semaphore not available, wait for 2 seconds
				uint32_t temp2 = xTaskGetTickCount();
   14b8c:	4b21      	ldr	r3, [pc, #132]	; (14c14 <checkForSIMStatus+0xb0>)
   14b8e:	4798      	blx	r3
   14b90:	0003      	movs	r3, r0
   14b92:	603b      	str	r3, [r7, #0]
				if(xTaskGetTickCount()-temp2<2000)
   14b94:	4b1f      	ldr	r3, [pc, #124]	; (14c14 <checkForSIMStatus+0xb0>)
   14b96:	4798      	blx	r3
	while(temp--)
   14b98:	1dfb      	adds	r3, r7, #7
   14b9a:	781b      	ldrb	r3, [r3, #0]
   14b9c:	1dfa      	adds	r2, r7, #7
   14b9e:	1e59      	subs	r1, r3, #1
   14ba0:	7011      	strb	r1, [r2, #0]
   14ba2:	2b00      	cmp	r3, #0
   14ba4:	d1e5      	bne.n	14b72 <checkForSIMStatus+0xe>
		}
	}
	
	// Some problem in communication  with SIM800, or SIM800 is OFF. Restart SIM800C.
	
	if(GSM_STATUS_OK)
   14ba6:	201b      	movs	r0, #27
   14ba8:	4b1b      	ldr	r3, [pc, #108]	; (14c18 <checkForSIMStatus+0xb4>)
   14baa:	4798      	blx	r3
   14bac:	1e03      	subs	r3, r0, #0
   14bae:	d01a      	beq.n	14be6 <checkForSIMStatus+0x82>
	{
		boolGsm_config_flag			=false;
   14bb0:	4b1a      	ldr	r3, [pc, #104]	; (14c1c <checkForSIMStatus+0xb8>)
   14bb2:	2200      	movs	r2, #0
   14bb4:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
   14bb6:	4b1a      	ldr	r3, [pc, #104]	; (14c20 <checkForSIMStatus+0xbc>)
   14bb8:	2200      	movs	r2, #0
   14bba:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
   14bbc:	4b19      	ldr	r3, [pc, #100]	; (14c24 <checkForSIMStatus+0xc0>)
   14bbe:	4a19      	ldr	r2, [pc, #100]	; (14c24 <checkForSIMStatus+0xc0>)
   14bc0:	6812      	ldr	r2, [r2, #0]
   14bc2:	2180      	movs	r1, #128	; 0x80
   14bc4:	0249      	lsls	r1, r1, #9
   14bc6:	430a      	orrs	r2, r1
   14bc8:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
   14bca:	4b17      	ldr	r3, [pc, #92]	; (14c28 <checkForSIMStatus+0xc4>)
   14bcc:	0018      	movs	r0, r3
   14bce:	4b17      	ldr	r3, [pc, #92]	; (14c2c <checkForSIMStatus+0xc8>)
   14bd0:	4798      	blx	r3
		GSM_PWR_OFF;
   14bd2:	4b14      	ldr	r3, [pc, #80]	; (14c24 <checkForSIMStatus+0xc0>)
   14bd4:	4a13      	ldr	r2, [pc, #76]	; (14c24 <checkForSIMStatus+0xc0>)
   14bd6:	6812      	ldr	r2, [r2, #0]
   14bd8:	4915      	ldr	r1, [pc, #84]	; (14c30 <checkForSIMStatus+0xcc>)
   14bda:	400a      	ands	r2, r1
   14bdc:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
   14bde:	4b15      	ldr	r3, [pc, #84]	; (14c34 <checkForSIMStatus+0xd0>)
   14be0:	0018      	movs	r0, r3
   14be2:	4b12      	ldr	r3, [pc, #72]	; (14c2c <checkForSIMStatus+0xc8>)
   14be4:	4798      	blx	r3
	}
	
	isGSMModuleAwake=false;
   14be6:	4b14      	ldr	r3, [pc, #80]	; (14c38 <checkForSIMStatus+0xd4>)
   14be8:	2200      	movs	r2, #0
   14bea:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   14bec:	2101      	movs	r1, #1
   14bee:	2014      	movs	r0, #20
   14bf0:	4b12      	ldr	r3, [pc, #72]	; (14c3c <checkForSIMStatus+0xd8>)
   14bf2:	4798      	blx	r3
	lastGSMCommunicationTime=0;
   14bf4:	4b12      	ldr	r3, [pc, #72]	; (14c40 <checkForSIMStatus+0xdc>)
   14bf6:	2200      	movs	r2, #0
   14bf8:	601a      	str	r2, [r3, #0]
	lastToLastGSMCommunicationTime=0;
   14bfa:	4b12      	ldr	r3, [pc, #72]	; (14c44 <checkForSIMStatus+0xe0>)
   14bfc:	2200      	movs	r2, #0
   14bfe:	601a      	str	r2, [r3, #0]
	gsm_module_exit_sleep(false);				//to switch DTR pin so that sim remains active
   14c00:	2000      	movs	r0, #0
   14c02:	4b11      	ldr	r3, [pc, #68]	; (14c48 <checkForSIMStatus+0xe4>)
   14c04:	4798      	blx	r3
   14c06:	e000      	b.n	14c0a <checkForSIMStatus+0xa6>
			return;									// if SIM800 replies to the commands, than return from here.
   14c08:	46c0      	nop			; (mov r8, r8)

}
   14c0a:	46bd      	mov	sp, r7
   14c0c:	b003      	add	sp, #12
   14c0e:	bd90      	pop	{r4, r7, pc}
   14c10:	000125f1 	.word	0x000125f1
   14c14:	00020dad 	.word	0x00020dad
   14c18:	0001433d 	.word	0x0001433d
   14c1c:	200009c8 	.word	0x200009c8
   14c20:	200009d5 	.word	0x200009d5
   14c24:	41004490 	.word	0x41004490
   14c28:	00000bb8 	.word	0x00000bb8
   14c2c:	00020a49 	.word	0x00020a49
   14c30:	fffeffff 	.word	0xfffeffff
   14c34:	00001388 	.word	0x00001388
   14c38:	20000884 	.word	0x20000884
   14c3c:	00014381 	.word	0x00014381
   14c40:	20000894 	.word	0x20000894
   14c44:	20000890 	.word	0x20000890
   14c48:	00012319 	.word	0x00012319

00014c4c <registerEvent>:



bool registerEvent(char eventType)
{
   14c4c:	b580      	push	{r7, lr}
   14c4e:	b082      	sub	sp, #8
   14c50:	af00      	add	r7, sp, #0
   14c52:	0002      	movs	r2, r0
   14c54:	1dfb      	adds	r3, r7, #7
   14c56:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
   14c58:	4b36      	ldr	r3, [pc, #216]	; (14d34 <registerEvent+0xe8>)
   14c5a:	789b      	ldrb	r3, [r3, #2]
   14c5c:	2b00      	cmp	r3, #0
   14c5e:	d004      	beq.n	14c6a <registerEvent+0x1e>
   14c60:	4b35      	ldr	r3, [pc, #212]	; (14d38 <registerEvent+0xec>)
   14c62:	795b      	ldrb	r3, [r3, #5]
   14c64:	b2db      	uxtb	r3, r3
   14c66:	2b4e      	cmp	r3, #78	; 0x4e
   14c68:	d101      	bne.n	14c6e <registerEvent+0x22>
	{
		return true;
   14c6a:	2301      	movs	r3, #1
   14c6c:	e05d      	b.n	14d2a <registerEvent+0xde>
	}
	if (!initialized)
   14c6e:	4b33      	ldr	r3, [pc, #204]	; (14d3c <registerEvent+0xf0>)
   14c70:	781b      	ldrb	r3, [r3, #0]
   14c72:	b2db      	uxtb	r3, r3
   14c74:	2201      	movs	r2, #1
   14c76:	4053      	eors	r3, r2
   14c78:	b2db      	uxtb	r3, r3
   14c7a:	2b00      	cmp	r3, #0
   14c7c:	d001      	beq.n	14c82 <registerEvent+0x36>
	{
		return true;
   14c7e:	2301      	movs	r3, #1
   14c80:	e053      	b.n	14d2a <registerEvent+0xde>
	}
	if(!eventStaged && actionType==eventType)
   14c82:	4b2f      	ldr	r3, [pc, #188]	; (14d40 <registerEvent+0xf4>)
   14c84:	781b      	ldrb	r3, [r3, #0]
   14c86:	2201      	movs	r2, #1
   14c88:	4053      	eors	r3, r2
   14c8a:	b2db      	uxtb	r3, r3
   14c8c:	2b00      	cmp	r3, #0
   14c8e:	d007      	beq.n	14ca0 <registerEvent+0x54>
   14c90:	4b2c      	ldr	r3, [pc, #176]	; (14d44 <registerEvent+0xf8>)
   14c92:	781b      	ldrb	r3, [r3, #0]
   14c94:	1dfa      	adds	r2, r7, #7
   14c96:	7812      	ldrb	r2, [r2, #0]
   14c98:	429a      	cmp	r2, r3
   14c9a:	d101      	bne.n	14ca0 <registerEvent+0x54>
	{
		return true;
   14c9c:	2301      	movs	r3, #1
   14c9e:	e044      	b.n	14d2a <registerEvent+0xde>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14ca0:	4b29      	ldr	r3, [pc, #164]	; (14d48 <registerEvent+0xfc>)
   14ca2:	781b      	ldrb	r3, [r3, #0]
   14ca4:	b2db      	uxtb	r3, r3
   14ca6:	2b4e      	cmp	r3, #78	; 0x4e
   14ca8:	d13e      	bne.n	14d28 <registerEvent+0xdc>
   14caa:	4b28      	ldr	r3, [pc, #160]	; (14d4c <registerEvent+0x100>)
   14cac:	781b      	ldrb	r3, [r3, #0]
   14cae:	b2db      	uxtb	r3, r3
   14cb0:	2b4e      	cmp	r3, #78	; 0x4e
   14cb2:	d139      	bne.n	14d28 <registerEvent+0xdc>
   14cb4:	4b26      	ldr	r3, [pc, #152]	; (14d50 <registerEvent+0x104>)
   14cb6:	781b      	ldrb	r3, [r3, #0]
   14cb8:	2b00      	cmp	r3, #0
   14cba:	d035      	beq.n	14d28 <registerEvent+0xdc>
   14cbc:	4b20      	ldr	r3, [pc, #128]	; (14d40 <registerEvent+0xf4>)
   14cbe:	781b      	ldrb	r3, [r3, #0]
   14cc0:	2201      	movs	r2, #1
   14cc2:	4053      	eors	r3, r2
   14cc4:	b2db      	uxtb	r3, r3
   14cc6:	2b00      	cmp	r3, #0
   14cc8:	d02e      	beq.n	14d28 <registerEvent+0xdc>
   14cca:	4b22      	ldr	r3, [pc, #136]	; (14d54 <registerEvent+0x108>)
   14ccc:	781b      	ldrb	r3, [r3, #0]
   14cce:	2201      	movs	r2, #1
   14cd0:	4053      	eors	r3, r2
   14cd2:	b2db      	uxtb	r3, r3
   14cd4:	2b00      	cmp	r3, #0
   14cd6:	d027      	beq.n	14d28 <registerEvent+0xdc>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
   14cd8:	4b17      	ldr	r3, [pc, #92]	; (14d38 <registerEvent+0xec>)
   14cda:	7a5b      	ldrb	r3, [r3, #9]
   14cdc:	b2db      	uxtb	r3, r3
   14cde:	2b00      	cmp	r3, #0
   14ce0:	d005      	beq.n	14cee <registerEvent+0xa2>
   14ce2:	4b1d      	ldr	r3, [pc, #116]	; (14d58 <registerEvent+0x10c>)
   14ce4:	4798      	blx	r3
   14ce6:	1e03      	subs	r3, r0, #0
   14ce8:	d001      	beq.n	14cee <registerEvent+0xa2>
		{
			return true;
   14cea:	2301      	movs	r3, #1
   14cec:	e01d      	b.n	14d2a <registerEvent+0xde>
		}
		retries=0;
   14cee:	4b1b      	ldr	r3, [pc, #108]	; (14d5c <registerEvent+0x110>)
   14cf0:	2200      	movs	r2, #0
   14cf2:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
   14cf4:	4b10      	ldr	r3, [pc, #64]	; (14d38 <registerEvent+0xec>)
   14cf6:	7a1b      	ldrb	r3, [r3, #8]
   14cf8:	b2db      	uxtb	r3, r3
   14cfa:	2b00      	cmp	r3, #0
   14cfc:	d00c      	beq.n	14d18 <registerEvent+0xcc>
		{
			tempEventStageTime=xTaskGetTickCount();
   14cfe:	4b18      	ldr	r3, [pc, #96]	; (14d60 <registerEvent+0x114>)
   14d00:	4798      	blx	r3
   14d02:	0002      	movs	r2, r0
   14d04:	4b17      	ldr	r3, [pc, #92]	; (14d64 <registerEvent+0x118>)
   14d06:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
   14d08:	4b17      	ldr	r3, [pc, #92]	; (14d68 <registerEvent+0x11c>)
   14d0a:	1dfa      	adds	r2, r7, #7
   14d0c:	7812      	ldrb	r2, [r2, #0]
   14d0e:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   14d10:	4b0b      	ldr	r3, [pc, #44]	; (14d40 <registerEvent+0xf4>)
   14d12:	2201      	movs	r2, #1
   14d14:	701a      	strb	r2, [r3, #0]
   14d16:	e005      	b.n	14d24 <registerEvent+0xd8>
		}
		else
		{
			actionType = eventType;
   14d18:	4b0a      	ldr	r3, [pc, #40]	; (14d44 <registerEvent+0xf8>)
   14d1a:	1dfa      	adds	r2, r7, #7
   14d1c:	7812      	ldrb	r2, [r2, #0]
   14d1e:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
   14d20:	4b12      	ldr	r3, [pc, #72]	; (14d6c <registerEvent+0x120>)
   14d22:	4798      	blx	r3
		}
		return true;
   14d24:	2301      	movs	r3, #1
   14d26:	e000      	b.n	14d2a <registerEvent+0xde>
	}
	else
	{
		return false;
   14d28:	2300      	movs	r3, #0
	}
}
   14d2a:	0018      	movs	r0, r3
   14d2c:	46bd      	mov	sp, r7
   14d2e:	b002      	add	sp, #8
   14d30:	bd80      	pop	{r7, pc}
   14d32:	46c0      	nop			; (mov r8, r8)
   14d34:	20000814 	.word	0x20000814
   14d38:	20000854 	.word	0x20000854
   14d3c:	2000099d 	.word	0x2000099d
   14d40:	200009d7 	.word	0x200009d7
   14d44:	20000963 	.word	0x20000963
   14d48:	200009e0 	.word	0x200009e0
   14d4c:	2000098f 	.word	0x2000098f
   14d50:	20000972 	.word	0x20000972
   14d54:	2000098e 	.word	0x2000098e
   14d58:	00017cad 	.word	0x00017cad
   14d5c:	200008e5 	.word	0x200008e5
   14d60:	00020dad 	.word	0x00020dad
   14d64:	200009f4 	.word	0x200009f4
   14d68:	20000975 	.word	0x20000975
   14d6c:	000144e9 	.word	0x000144e9

00014d70 <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
   14d70:	b580      	push	{r7, lr}
   14d72:	b082      	sub	sp, #8
   14d74:	af00      	add	r7, sp, #0
   14d76:	0002      	movs	r2, r0
   14d78:	1dfb      	adds	r3, r7, #7
   14d7a:	701a      	strb	r2, [r3, #0]
	if (!initialized)
   14d7c:	4b20      	ldr	r3, [pc, #128]	; (14e00 <registerM2MEvent+0x90>)
   14d7e:	781b      	ldrb	r3, [r3, #0]
   14d80:	b2db      	uxtb	r3, r3
   14d82:	2201      	movs	r2, #1
   14d84:	4053      	eors	r3, r2
   14d86:	b2db      	uxtb	r3, r3
   14d88:	2b00      	cmp	r3, #0
   14d8a:	d006      	beq.n	14d9a <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
   14d8c:	1dfb      	adds	r3, r7, #7
   14d8e:	781b      	ldrb	r3, [r3, #0]
   14d90:	2100      	movs	r1, #0
   14d92:	0018      	movs	r0, r3
   14d94:	4b1b      	ldr	r3, [pc, #108]	; (14e04 <registerM2MEvent+0x94>)
   14d96:	4798      	blx	r3
		return;
   14d98:	e02e      	b.n	14df8 <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14d9a:	4b1b      	ldr	r3, [pc, #108]	; (14e08 <registerM2MEvent+0x98>)
   14d9c:	781b      	ldrb	r3, [r3, #0]
   14d9e:	b2db      	uxtb	r3, r3
   14da0:	2b4e      	cmp	r3, #78	; 0x4e
   14da2:	d129      	bne.n	14df8 <registerM2MEvent+0x88>
   14da4:	4b19      	ldr	r3, [pc, #100]	; (14e0c <registerM2MEvent+0x9c>)
   14da6:	781b      	ldrb	r3, [r3, #0]
   14da8:	b2db      	uxtb	r3, r3
   14daa:	2b4e      	cmp	r3, #78	; 0x4e
   14dac:	d124      	bne.n	14df8 <registerM2MEvent+0x88>
   14dae:	4b18      	ldr	r3, [pc, #96]	; (14e10 <registerM2MEvent+0xa0>)
   14db0:	781b      	ldrb	r3, [r3, #0]
   14db2:	2b00      	cmp	r3, #0
   14db4:	d020      	beq.n	14df8 <registerM2MEvent+0x88>
   14db6:	4b17      	ldr	r3, [pc, #92]	; (14e14 <registerM2MEvent+0xa4>)
   14db8:	781b      	ldrb	r3, [r3, #0]
   14dba:	2201      	movs	r2, #1
   14dbc:	4053      	eors	r3, r2
   14dbe:	b2db      	uxtb	r3, r3
   14dc0:	2b00      	cmp	r3, #0
   14dc2:	d019      	beq.n	14df8 <registerM2MEvent+0x88>
   14dc4:	4b14      	ldr	r3, [pc, #80]	; (14e18 <registerM2MEvent+0xa8>)
   14dc6:	781b      	ldrb	r3, [r3, #0]
   14dc8:	2201      	movs	r2, #1
   14dca:	4053      	eors	r3, r2
   14dcc:	b2db      	uxtb	r3, r3
   14dce:	2b00      	cmp	r3, #0
   14dd0:	d012      	beq.n	14df8 <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
   14dd2:	1dfb      	adds	r3, r7, #7
   14dd4:	781b      	ldrb	r3, [r3, #0]
   14dd6:	2102      	movs	r1, #2
   14dd8:	0018      	movs	r0, r3
   14dda:	4b0a      	ldr	r3, [pc, #40]	; (14e04 <registerM2MEvent+0x94>)
   14ddc:	4798      	blx	r3
		m2mEvent=true;
   14dde:	4b0f      	ldr	r3, [pc, #60]	; (14e1c <registerM2MEvent+0xac>)
   14de0:	2201      	movs	r2, #1
   14de2:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
   14de4:	4b0e      	ldr	r3, [pc, #56]	; (14e20 <registerM2MEvent+0xb0>)
   14de6:	1dfa      	adds	r2, r7, #7
   14de8:	7812      	ldrb	r2, [r2, #0]
   14dea:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
   14dec:	4b0d      	ldr	r3, [pc, #52]	; (14e24 <registerM2MEvent+0xb4>)
   14dee:	2200      	movs	r2, #0
   14df0:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
   14df2:	4b0d      	ldr	r3, [pc, #52]	; (14e28 <registerM2MEvent+0xb8>)
   14df4:	4798      	blx	r3
		return;
   14df6:	46c0      	nop			; (mov r8, r8)
	}
}
   14df8:	46bd      	mov	sp, r7
   14dfa:	b002      	add	sp, #8
   14dfc:	bd80      	pop	{r7, pc}
   14dfe:	46c0      	nop			; (mov r8, r8)
   14e00:	2000099d 	.word	0x2000099d
   14e04:	0001ca99 	.word	0x0001ca99
   14e08:	200009e0 	.word	0x200009e0
   14e0c:	2000098f 	.word	0x2000098f
   14e10:	20000972 	.word	0x20000972
   14e14:	200009d7 	.word	0x200009d7
   14e18:	2000098e 	.word	0x2000098e
   14e1c:	20000943 	.word	0x20000943
   14e20:	2000092d 	.word	0x2000092d
   14e24:	200009d8 	.word	0x200009d8
   14e28:	000144e9 	.word	0x000144e9

00014e2c <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
   14e2c:	b580      	push	{r7, lr}
   14e2e:	b082      	sub	sp, #8
   14e30:	af00      	add	r7, sp, #0
   14e32:	0002      	movs	r2, r0
   14e34:	1dfb      	adds	r3, r7, #7
   14e36:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
   14e38:	4b07      	ldr	r3, [pc, #28]	; (14e58 <setMotorMGRResponse+0x2c>)
   14e3a:	781b      	ldrb	r3, [r3, #0]
   14e3c:	b2db      	uxtb	r3, r3
   14e3e:	2b49      	cmp	r3, #73	; 0x49
   14e40:	d106      	bne.n	14e50 <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
   14e42:	1dfb      	adds	r3, r7, #7
   14e44:	781b      	ldrb	r3, [r3, #0]
   14e46:	2101      	movs	r1, #1
   14e48:	0018      	movs	r0, r3
   14e4a:	4b04      	ldr	r3, [pc, #16]	; (14e5c <setMotorMGRResponse+0x30>)
   14e4c:	4798      	blx	r3
   14e4e:	e000      	b.n	14e52 <setMotorMGRResponse+0x26>
		return;
   14e50:	46c0      	nop			; (mov r8, r8)
}
   14e52:	46bd      	mov	sp, r7
   14e54:	b002      	add	sp, #8
   14e56:	bd80      	pop	{r7, pc}
   14e58:	200009e0 	.word	0x200009e0
   14e5c:	0001485d 	.word	0x0001485d

00014e60 <checkRespSMS>:

void checkRespSMS(char t1)
{
   14e60:	b580      	push	{r7, lr}
   14e62:	b082      	sub	sp, #8
   14e64:	af00      	add	r7, sp, #0
   14e66:	0002      	movs	r2, r0
   14e68:	1dfb      	adds	r3, r7, #7
   14e6a:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
   14e6c:	4b0c      	ldr	r3, [pc, #48]	; (14ea0 <checkRespSMS+0x40>)
   14e6e:	781b      	ldrb	r3, [r3, #0]
   14e70:	2201      	movs	r2, #1
   14e72:	4053      	eors	r3, r2
   14e74:	b2db      	uxtb	r3, r3
   14e76:	2b00      	cmp	r3, #0
   14e78:	d00e      	beq.n	14e98 <checkRespSMS+0x38>
   14e7a:	4b0a      	ldr	r3, [pc, #40]	; (14ea4 <checkRespSMS+0x44>)
   14e7c:	795b      	ldrb	r3, [r3, #5]
   14e7e:	b2db      	uxtb	r3, r3
   14e80:	2b41      	cmp	r3, #65	; 0x41
   14e82:	d109      	bne.n	14e98 <checkRespSMS+0x38>
	{
		actionType = t1;
   14e84:	4b08      	ldr	r3, [pc, #32]	; (14ea8 <checkRespSMS+0x48>)
   14e86:	1dfa      	adds	r2, r7, #7
   14e88:	7812      	ldrb	r2, [r2, #0]
   14e8a:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
   14e8c:	4b07      	ldr	r3, [pc, #28]	; (14eac <checkRespSMS+0x4c>)
   14e8e:	2200      	movs	r2, #0
   14e90:	2100      	movs	r1, #0
   14e92:	0018      	movs	r0, r3
   14e94:	4b06      	ldr	r3, [pc, #24]	; (14eb0 <checkRespSMS+0x50>)
   14e96:	4798      	blx	r3
	}
}
   14e98:	46c0      	nop			; (mov r8, r8)
   14e9a:	46bd      	mov	sp, r7
   14e9c:	b002      	add	sp, #8
   14e9e:	bd80      	pop	{r7, pc}
   14ea0:	2000099e 	.word	0x2000099e
   14ea4:	20000854 	.word	0x20000854
   14ea8:	20000963 	.word	0x20000963
   14eac:	0002a9cc 	.word	0x0002a9cc
   14eb0:	00017da9 	.word	0x00017da9

00014eb4 <subDTMF>:

void subDTMF(void)
{
   14eb4:	b580      	push	{r7, lr}
   14eb6:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
   14eb8:	4b04      	ldr	r3, [pc, #16]	; (14ecc <subDTMF+0x18>)
   14eba:	4798      	blx	r3
	callCutWait =xTaskGetTickCount();
   14ebc:	4b04      	ldr	r3, [pc, #16]	; (14ed0 <subDTMF+0x1c>)
   14ebe:	4798      	blx	r3
   14ec0:	0002      	movs	r2, r0
   14ec2:	4b04      	ldr	r3, [pc, #16]	; (14ed4 <subDTMF+0x20>)
   14ec4:	601a      	str	r2, [r3, #0]
}
   14ec6:	46c0      	nop			; (mov r8, r8)
   14ec8:	46bd      	mov	sp, r7
   14eca:	bd80      	pop	{r7, pc}
   14ecc:	0001310d 	.word	0x0001310d
   14ed0:	00020dad 	.word	0x00020dad
   14ed4:	20000a18 	.word	0x20000a18

00014ed8 <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
   14ed8:	b580      	push	{r7, lr}
   14eda:	b084      	sub	sp, #16
   14edc:	af00      	add	r7, sp, #0
   14ede:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
   14ee0:	230f      	movs	r3, #15
   14ee2:	18fb      	adds	r3, r7, r3
   14ee4:	687a      	ldr	r2, [r7, #4]
   14ee6:	7812      	ldrb	r2, [r2, #0]
   14ee8:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14eea:	4b6a      	ldr	r3, [pc, #424]	; (15094 <processOnDTMF+0x1bc>)
   14eec:	78db      	ldrb	r3, [r3, #3]
   14eee:	2b00      	cmp	r3, #0
   14ef0:	d010      	beq.n	14f14 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
   14ef2:	4b69      	ldr	r3, [pc, #420]	; (15098 <processOnDTMF+0x1c0>)
   14ef4:	781b      	ldrb	r3, [r3, #0]
   14ef6:	2b00      	cmp	r3, #0
   14ef8:	d100      	bne.n	14efc <processOnDTMF+0x24>
   14efa:	e0c7      	b.n	1508c <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
   14efc:	230f      	movs	r3, #15
   14efe:	18fb      	adds	r3, r7, r3
   14f00:	781b      	ldrb	r3, [r3, #0]
   14f02:	2b41      	cmp	r3, #65	; 0x41
   14f04:	d000      	beq.n	14f08 <processOnDTMF+0x30>
   14f06:	e0c1      	b.n	1508c <processOnDTMF+0x1b4>
			{
				m2mAck=true;
   14f08:	4b64      	ldr	r3, [pc, #400]	; (1509c <processOnDTMF+0x1c4>)
   14f0a:	2201      	movs	r2, #1
   14f0c:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
   14f0e:	4b64      	ldr	r3, [pc, #400]	; (150a0 <processOnDTMF+0x1c8>)
   14f10:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
   14f12:	e0bb      	b.n	1508c <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
   14f14:	230f      	movs	r3, #15
   14f16:	18fb      	adds	r3, r7, r3
   14f18:	781b      	ldrb	r3, [r3, #0]
   14f1a:	2b31      	cmp	r3, #49	; 0x31
   14f1c:	d106      	bne.n	14f2c <processOnDTMF+0x54>
			subDTMF();
   14f1e:	4b61      	ldr	r3, [pc, #388]	; (150a4 <processOnDTMF+0x1cc>)
   14f20:	4798      	blx	r3
			startMotor(true,false);
   14f22:	2100      	movs	r1, #0
   14f24:	2001      	movs	r0, #1
   14f26:	4b60      	ldr	r3, [pc, #384]	; (150a8 <processOnDTMF+0x1d0>)
   14f28:	4798      	blx	r3
}
   14f2a:	e0af      	b.n	1508c <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
   14f2c:	230f      	movs	r3, #15
   14f2e:	18fb      	adds	r3, r7, r3
   14f30:	781b      	ldrb	r3, [r3, #0]
   14f32:	2b32      	cmp	r3, #50	; 0x32
   14f34:	d107      	bne.n	14f46 <processOnDTMF+0x6e>
			subDTMF();
   14f36:	4b5b      	ldr	r3, [pc, #364]	; (150a4 <processOnDTMF+0x1cc>)
   14f38:	4798      	blx	r3
			stopMotor(true,false,false);
   14f3a:	2200      	movs	r2, #0
   14f3c:	2100      	movs	r1, #0
   14f3e:	2001      	movs	r0, #1
   14f40:	4b5a      	ldr	r3, [pc, #360]	; (150ac <processOnDTMF+0x1d4>)
   14f42:	4798      	blx	r3
}
   14f44:	e0a2      	b.n	1508c <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
   14f46:	230f      	movs	r3, #15
   14f48:	18fb      	adds	r3, r7, r3
   14f4a:	781b      	ldrb	r3, [r3, #0]
   14f4c:	2b33      	cmp	r3, #51	; 0x33
   14f4e:	d104      	bne.n	14f5a <processOnDTMF+0x82>
			subDTMF();
   14f50:	4b54      	ldr	r3, [pc, #336]	; (150a4 <processOnDTMF+0x1cc>)
   14f52:	4798      	blx	r3
			statusOnCall();
   14f54:	4b56      	ldr	r3, [pc, #344]	; (150b0 <processOnDTMF+0x1d8>)
   14f56:	4798      	blx	r3
}
   14f58:	e098      	b.n	1508c <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
   14f5a:	230f      	movs	r3, #15
   14f5c:	18fb      	adds	r3, r7, r3
   14f5e:	781b      	ldrb	r3, [r3, #0]
   14f60:	2b34      	cmp	r3, #52	; 0x34
   14f62:	d10a      	bne.n	14f7a <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
   14f64:	4b4b      	ldr	r3, [pc, #300]	; (15094 <processOnDTMF+0x1bc>)
   14f66:	795b      	ldrb	r3, [r3, #5]
   14f68:	2b00      	cmp	r3, #0
   14f6a:	d100      	bne.n	14f6e <processOnDTMF+0x96>
   14f6c:	e08e      	b.n	1508c <processOnDTMF+0x1b4>
				subDTMF();
   14f6e:	4b4d      	ldr	r3, [pc, #308]	; (150a4 <processOnDTMF+0x1cc>)
   14f70:	4798      	blx	r3
				waterStatusOnCall(false);
   14f72:	2000      	movs	r0, #0
   14f74:	4b4f      	ldr	r3, [pc, #316]	; (150b4 <processOnDTMF+0x1dc>)
   14f76:	4798      	blx	r3
}
   14f78:	e088      	b.n	1508c <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
   14f7a:	230f      	movs	r3, #15
   14f7c:	18fb      	adds	r3, r7, r3
   14f7e:	781b      	ldrb	r3, [r3, #0]
   14f80:	2b35      	cmp	r3, #53	; 0x35
   14f82:	d10a      	bne.n	14f9a <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
   14f84:	4b43      	ldr	r3, [pc, #268]	; (15094 <processOnDTMF+0x1bc>)
   14f86:	791b      	ldrb	r3, [r3, #4]
   14f88:	2b00      	cmp	r3, #0
   14f8a:	d100      	bne.n	14f8e <processOnDTMF+0xb6>
   14f8c:	e07e      	b.n	1508c <processOnDTMF+0x1b4>
				subDTMF();
   14f8e:	4b45      	ldr	r3, [pc, #276]	; (150a4 <processOnDTMF+0x1cc>)
   14f90:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
   14f92:	2000      	movs	r0, #0
   14f94:	4b48      	ldr	r3, [pc, #288]	; (150b8 <processOnDTMF+0x1e0>)
   14f96:	4798      	blx	r3
}
   14f98:	e078      	b.n	1508c <processOnDTMF+0x1b4>
		else if(dtmf == '0')
   14f9a:	230f      	movs	r3, #15
   14f9c:	18fb      	adds	r3, r7, r3
   14f9e:	781b      	ldrb	r3, [r3, #0]
   14fa0:	2b30      	cmp	r3, #48	; 0x30
   14fa2:	d114      	bne.n	14fce <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14fa4:	4b3b      	ldr	r3, [pc, #236]	; (15094 <processOnDTMF+0x1bc>)
   14fa6:	785b      	ldrb	r3, [r3, #1]
   14fa8:	2b00      	cmp	r3, #0
   14faa:	d100      	bne.n	14fae <processOnDTMF+0xd6>
   14fac:	e06e      	b.n	1508c <processOnDTMF+0x1b4>
				if(zeroPressed)
   14fae:	4b43      	ldr	r3, [pc, #268]	; (150bc <processOnDTMF+0x1e4>)
   14fb0:	781b      	ldrb	r3, [r3, #0]
   14fb2:	2b00      	cmp	r3, #0
   14fb4:	d007      	beq.n	14fc6 <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
   14fb6:	4b42      	ldr	r3, [pc, #264]	; (150c0 <processOnDTMF+0x1e8>)
   14fb8:	4798      	blx	r3
					subDTMF();
   14fba:	4b3a      	ldr	r3, [pc, #232]	; (150a4 <processOnDTMF+0x1cc>)
   14fbc:	4798      	blx	r3
					zeroPressed=false;
   14fbe:	4b3f      	ldr	r3, [pc, #252]	; (150bc <processOnDTMF+0x1e4>)
   14fc0:	2200      	movs	r2, #0
   14fc2:	701a      	strb	r2, [r3, #0]
}
   14fc4:	e062      	b.n	1508c <processOnDTMF+0x1b4>
					zeroPressed=true;
   14fc6:	4b3d      	ldr	r3, [pc, #244]	; (150bc <processOnDTMF+0x1e4>)
   14fc8:	2201      	movs	r2, #1
   14fca:	701a      	strb	r2, [r3, #0]
}
   14fcc:	e05e      	b.n	1508c <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
   14fce:	230f      	movs	r3, #15
   14fd0:	18fb      	adds	r3, r7, r3
   14fd2:	781b      	ldrb	r3, [r3, #0]
   14fd4:	2b37      	cmp	r3, #55	; 0x37
   14fd6:	d108      	bne.n	14fea <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
   14fd8:	4b2e      	ldr	r3, [pc, #184]	; (15094 <processOnDTMF+0x1bc>)
   14fda:	789b      	ldrb	r3, [r3, #2]
   14fdc:	2b00      	cmp	r3, #0
   14fde:	d055      	beq.n	1508c <processOnDTMF+0x1b4>
				subDTMF();
   14fe0:	4b30      	ldr	r3, [pc, #192]	; (150a4 <processOnDTMF+0x1cc>)
   14fe2:	4798      	blx	r3
				speakAmpere();
   14fe4:	4b37      	ldr	r3, [pc, #220]	; (150c4 <processOnDTMF+0x1ec>)
   14fe6:	4798      	blx	r3
}
   14fe8:	e050      	b.n	1508c <processOnDTMF+0x1b4>
		else if(dtmf=='D')
   14fea:	230f      	movs	r3, #15
   14fec:	18fb      	adds	r3, r7, r3
   14fee:	781b      	ldrb	r3, [r3, #0]
   14ff0:	2b44      	cmp	r3, #68	; 0x44
   14ff2:	d10d      	bne.n	15010 <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14ff4:	2001      	movs	r0, #1
   14ff6:	4b34      	ldr	r3, [pc, #208]	; (150c8 <processOnDTMF+0x1f0>)
   14ff8:	4798      	blx	r3
			resetAutoStart(true);
   14ffa:	2001      	movs	r0, #1
   14ffc:	4b33      	ldr	r3, [pc, #204]	; (150cc <processOnDTMF+0x1f4>)
   14ffe:	4798      	blx	r3
			startMotor(false,false);
   15000:	2100      	movs	r1, #0
   15002:	2000      	movs	r0, #0
   15004:	4b28      	ldr	r3, [pc, #160]	; (150a8 <processOnDTMF+0x1d0>)
   15006:	4798      	blx	r3
			sendDTMFTone(0xFF);
   15008:	20ff      	movs	r0, #255	; 0xff
   1500a:	4b31      	ldr	r3, [pc, #196]	; (150d0 <processOnDTMF+0x1f8>)
   1500c:	4798      	blx	r3
}
   1500e:	e03d      	b.n	1508c <processOnDTMF+0x1b4>
		else if(dtmf=='C')
   15010:	230f      	movs	r3, #15
   15012:	18fb      	adds	r3, r7, r3
   15014:	781b      	ldrb	r3, [r3, #0]
   15016:	2b43      	cmp	r3, #67	; 0x43
   15018:	d10b      	bne.n	15032 <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
   1501a:	2000      	movs	r0, #0
   1501c:	4b2a      	ldr	r3, [pc, #168]	; (150c8 <processOnDTMF+0x1f0>)
   1501e:	4798      	blx	r3
			stopMotor(false,false,true);
   15020:	2201      	movs	r2, #1
   15022:	2100      	movs	r1, #0
   15024:	2000      	movs	r0, #0
   15026:	4b21      	ldr	r3, [pc, #132]	; (150ac <processOnDTMF+0x1d4>)
   15028:	4798      	blx	r3
			sendDTMFTone(0xFF);
   1502a:	20ff      	movs	r0, #255	; 0xff
   1502c:	4b28      	ldr	r3, [pc, #160]	; (150d0 <processOnDTMF+0x1f8>)
   1502e:	4798      	blx	r3
}
   15030:	e02c      	b.n	1508c <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
   15032:	230f      	movs	r3, #15
   15034:	18fb      	adds	r3, r7, r3
   15036:	781b      	ldrb	r3, [r3, #0]
   15038:	2b38      	cmp	r3, #56	; 0x38
   1503a:	d10c      	bne.n	15056 <processOnDTMF+0x17e>
			subDTMF();
   1503c:	4b19      	ldr	r3, [pc, #100]	; (150a4 <processOnDTMF+0x1cc>)
   1503e:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   15040:	2001      	movs	r0, #1
   15042:	4b21      	ldr	r3, [pc, #132]	; (150c8 <processOnDTMF+0x1f0>)
   15044:	4798      	blx	r3
			resetAutoStart(true);
   15046:	2001      	movs	r0, #1
   15048:	4b20      	ldr	r3, [pc, #128]	; (150cc <processOnDTMF+0x1f4>)
   1504a:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
   1504c:	2101      	movs	r1, #1
   1504e:	2029      	movs	r0, #41	; 0x29
   15050:	4b20      	ldr	r3, [pc, #128]	; (150d4 <processOnDTMF+0x1fc>)
   15052:	4798      	blx	r3
}
   15054:	e01a      	b.n	1508c <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
   15056:	230f      	movs	r3, #15
   15058:	18fb      	adds	r3, r7, r3
   1505a:	781b      	ldrb	r3, [r3, #0]
   1505c:	2b39      	cmp	r3, #57	; 0x39
   1505e:	d10c      	bne.n	1507a <processOnDTMF+0x1a2>
			subDTMF();
   15060:	4b10      	ldr	r3, [pc, #64]	; (150a4 <processOnDTMF+0x1cc>)
   15062:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
   15064:	2000      	movs	r0, #0
   15066:	4b18      	ldr	r3, [pc, #96]	; (150c8 <processOnDTMF+0x1f0>)
   15068:	4798      	blx	r3
			resetAutoStart(true);
   1506a:	2001      	movs	r0, #1
   1506c:	4b17      	ldr	r3, [pc, #92]	; (150cc <processOnDTMF+0x1f4>)
   1506e:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
   15070:	2101      	movs	r1, #1
   15072:	205b      	movs	r0, #91	; 0x5b
   15074:	4b17      	ldr	r3, [pc, #92]	; (150d4 <processOnDTMF+0x1fc>)
   15076:	4798      	blx	r3
}
   15078:	e008      	b.n	1508c <processOnDTMF+0x1b4>
		else if(dtmf == '*')
   1507a:	230f      	movs	r3, #15
   1507c:	18fb      	adds	r3, r7, r3
   1507e:	781b      	ldrb	r3, [r3, #0]
   15080:	2b2a      	cmp	r3, #42	; 0x2a
   15082:	d103      	bne.n	1508c <processOnDTMF+0x1b4>
			subDTMF();
   15084:	4b07      	ldr	r3, [pc, #28]	; (150a4 <processOnDTMF+0x1cc>)
   15086:	4798      	blx	r3
			voltageOnCall();
   15088:	4b13      	ldr	r3, [pc, #76]	; (150d8 <processOnDTMF+0x200>)
   1508a:	4798      	blx	r3
}
   1508c:	46c0      	nop			; (mov r8, r8)
   1508e:	46bd      	mov	sp, r7
   15090:	b004      	add	sp, #16
   15092:	bd80      	pop	{r7, pc}
   15094:	2000082c 	.word	0x2000082c
   15098:	20000943 	.word	0x20000943
   1509c:	2000092c 	.word	0x2000092c
   150a0:	000130ad 	.word	0x000130ad
   150a4:	00014eb5 	.word	0x00014eb5
   150a8:	0001c315 	.word	0x0001c315
   150ac:	0001c4fd 	.word	0x0001c4fd
   150b0:	0001c949 	.word	0x0001c949
   150b4:	0001a345 	.word	0x0001a345
   150b8:	0001a1fd 	.word	0x0001a1fd
   150bc:	20000a0f 	.word	0x20000a0f
   150c0:	0001aec1 	.word	0x0001aec1
   150c4:	0001afb9 	.word	0x0001afb9
   150c8:	000112a9 	.word	0x000112a9
   150cc:	0001bef9 	.word	0x0001bef9
   150d0:	00017f65 	.word	0x00017f65
   150d4:	0001485d 	.word	0x0001485d
   150d8:	0001ca59 	.word	0x0001ca59

000150dc <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
   150dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   150de:	46de      	mov	lr, fp
   150e0:	4657      	mov	r7, sl
   150e2:	464e      	mov	r6, r9
   150e4:	4645      	mov	r5, r8
   150e6:	b5e0      	push	{r5, r6, r7, lr}
   150e8:	b0e7      	sub	sp, #412	; 0x19c
   150ea:	af10      	add	r7, sp, #64	; 0x40
   150ec:	62f8      	str	r0, [r7, #44]	; 0x2c
   150ee:	000c      	movs	r4, r1
   150f0:	0010      	movs	r0, r2
   150f2:	0019      	movs	r1, r3
   150f4:	4beb      	ldr	r3, [pc, #940]	; (154a4 <processOnSMS+0x3c8>)
   150f6:	2298      	movs	r2, #152	; 0x98
   150f8:	0052      	lsls	r2, r2, #1
   150fa:	4694      	mov	ip, r2
   150fc:	2220      	movs	r2, #32
   150fe:	4690      	mov	r8, r2
   15100:	2208      	movs	r2, #8
   15102:	4691      	mov	r9, r2
   15104:	44b9      	add	r9, r7
   15106:	44c8      	add	r8, r9
   15108:	44c4      	add	ip, r8
   1510a:	4463      	add	r3, ip
   1510c:	1c22      	adds	r2, r4, #0
   1510e:	701a      	strb	r2, [r3, #0]
   15110:	4be5      	ldr	r3, [pc, #916]	; (154a8 <processOnSMS+0x3cc>)
   15112:	2298      	movs	r2, #152	; 0x98
   15114:	0052      	lsls	r2, r2, #1
   15116:	4694      	mov	ip, r2
   15118:	2220      	movs	r2, #32
   1511a:	4690      	mov	r8, r2
   1511c:	2208      	movs	r2, #8
   1511e:	4691      	mov	r9, r2
   15120:	44b9      	add	r9, r7
   15122:	44c8      	add	r8, r9
   15124:	44c4      	add	ip, r8
   15126:	4463      	add	r3, ip
   15128:	1c02      	adds	r2, r0, #0
   1512a:	701a      	strb	r2, [r3, #0]
   1512c:	4bdf      	ldr	r3, [pc, #892]	; (154ac <processOnSMS+0x3d0>)
   1512e:	2298      	movs	r2, #152	; 0x98
   15130:	0052      	lsls	r2, r2, #1
   15132:	4694      	mov	ip, r2
   15134:	2220      	movs	r2, #32
   15136:	4690      	mov	r8, r2
   15138:	2208      	movs	r2, #8
   1513a:	4691      	mov	r9, r2
   1513c:	44b9      	add	r9, r7
   1513e:	44c8      	add	r8, r9
   15140:	44c4      	add	ip, r8
   15142:	4463      	add	r3, ip
   15144:	1c0a      	adds	r2, r1, #0
   15146:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
   15148:	2330      	movs	r3, #48	; 0x30
   1514a:	33ff      	adds	r3, #255	; 0xff
   1514c:	2220      	movs	r2, #32
   1514e:	4694      	mov	ip, r2
   15150:	2208      	movs	r2, #8
   15152:	4690      	mov	r8, r2
   15154:	44b8      	add	r8, r7
   15156:	44c4      	add	ip, r8
   15158:	4463      	add	r3, ip
   1515a:	2200      	movs	r2, #0
   1515c:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
   1515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15160:	228c      	movs	r2, #140	; 0x8c
   15162:	0052      	lsls	r2, r2, #1
   15164:	2120      	movs	r1, #32
   15166:	468c      	mov	ip, r1
   15168:	2108      	movs	r1, #8
   1516a:	4688      	mov	r8, r1
   1516c:	44b8      	add	r8, r7
   1516e:	44c4      	add	ip, r8
   15170:	4462      	add	r2, ip
   15172:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
   15174:	4bcd      	ldr	r3, [pc, #820]	; (154ac <processOnSMS+0x3d0>)
   15176:	2298      	movs	r2, #152	; 0x98
   15178:	0052      	lsls	r2, r2, #1
   1517a:	4694      	mov	ip, r2
   1517c:	2220      	movs	r2, #32
   1517e:	4690      	mov	r8, r2
   15180:	2208      	movs	r2, #8
   15182:	4691      	mov	r9, r2
   15184:	44b9      	add	r9, r7
   15186:	44c8      	add	r8, r9
   15188:	44c4      	add	ip, r8
   1518a:	4463      	add	r3, ip
   1518c:	781b      	ldrb	r3, [r3, #0]
   1518e:	2b00      	cmp	r3, #0
   15190:	d00e      	beq.n	151b0 <processOnSMS+0xd4>
	{
		if(!StringstartsWith(received_command,"AMON"))
   15192:	4ac7      	ldr	r2, [pc, #796]	; (154b0 <processOnSMS+0x3d4>)
   15194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15196:	0011      	movs	r1, r2
   15198:	0018      	movs	r0, r3
   1519a:	4bc6      	ldr	r3, [pc, #792]	; (154b4 <processOnSMS+0x3d8>)
   1519c:	4798      	blx	r3
   1519e:	0003      	movs	r3, r0
   151a0:	001a      	movs	r2, r3
   151a2:	2301      	movs	r3, #1
   151a4:	4053      	eors	r3, r2
   151a6:	b2db      	uxtb	r3, r3
   151a8:	2b00      	cmp	r3, #0
   151aa:	d001      	beq.n	151b0 <processOnSMS+0xd4>
   151ac:	f002 fcbb 	bl	17b26 <processOnSMS+0x2a4a>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
   151b0:	4ac1      	ldr	r2, [pc, #772]	; (154b8 <processOnSMS+0x3dc>)
   151b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   151b4:	0011      	movs	r1, r2
   151b6:	0018      	movs	r0, r3
   151b8:	4bbe      	ldr	r3, [pc, #760]	; (154b4 <processOnSMS+0x3d8>)
   151ba:	4798      	blx	r3
   151bc:	1e03      	subs	r3, r0, #0
   151be:	d02c      	beq.n	1521a <processOnSMS+0x13e>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
   151c0:	4bbe      	ldr	r3, [pc, #760]	; (154bc <processOnSMS+0x3e0>)
   151c2:	2201      	movs	r2, #1
   151c4:	715a      	strb	r2, [r3, #5]
			memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   151c6:	4bbe      	ldr	r3, [pc, #760]	; (154c0 <processOnSMS+0x3e4>)
   151c8:	2210      	movs	r2, #16
   151ca:	2100      	movs	r1, #0
   151cc:	0018      	movs	r0, r3
   151ce:	4bbd      	ldr	r3, [pc, #756]	; (154c4 <processOnSMS+0x3e8>)
   151d0:	4798      	blx	r3
			strcpy(bootloader_parameter.firmware_updater_mobile_no,phone_number);
   151d2:	23ac      	movs	r3, #172	; 0xac
   151d4:	005b      	lsls	r3, r3, #1
   151d6:	2220      	movs	r2, #32
   151d8:	4694      	mov	ip, r2
   151da:	2208      	movs	r2, #8
   151dc:	4690      	mov	r8, r2
   151de:	44b8      	add	r8, r7
   151e0:	44c4      	add	ip, r8
   151e2:	4463      	add	r3, ip
   151e4:	681a      	ldr	r2, [r3, #0]
   151e6:	4bb6      	ldr	r3, [pc, #728]	; (154c0 <processOnSMS+0x3e4>)
   151e8:	0011      	movs	r1, r2
   151ea:	0018      	movs	r0, r3
   151ec:	4bb6      	ldr	r3, [pc, #728]	; (154c8 <processOnSMS+0x3ec>)
   151ee:	4798      	blx	r3
			gsm_module_exit_sleep(false);
   151f0:	2000      	movs	r0, #0
   151f2:	4bb6      	ldr	r3, [pc, #728]	; (154cc <processOnSMS+0x3f0>)
   151f4:	4798      	blx	r3

			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   151f6:	49b1      	ldr	r1, [pc, #708]	; (154bc <processOnSMS+0x3e0>)
   151f8:	4bb5      	ldr	r3, [pc, #724]	; (154d0 <processOnSMS+0x3f4>)
   151fa:	221c      	movs	r2, #28
   151fc:	0018      	movs	r0, r3
   151fe:	4bb5      	ldr	r3, [pc, #724]	; (154d4 <processOnSMS+0x3f8>)
   15200:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   15202:	4bb3      	ldr	r3, [pc, #716]	; (154d0 <processOnSMS+0x3f4>)
   15204:	0019      	movs	r1, r3
   15206:	2000      	movs	r0, #0
   15208:	4bb3      	ldr	r3, [pc, #716]	; (154d8 <processOnSMS+0x3fc>)
   1520a:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   1520c:	4bb3      	ldr	r3, [pc, #716]	; (154dc <processOnSMS+0x400>)
   1520e:	4798      	blx	r3
			vTaskDelay(100);
   15210:	2064      	movs	r0, #100	; 0x64
   15212:	4bb3      	ldr	r3, [pc, #716]	; (154e0 <processOnSMS+0x404>)
   15214:	4798      	blx	r3
			system_reset();
   15216:	4bb3      	ldr	r3, [pc, #716]	; (154e4 <processOnSMS+0x408>)
   15218:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
   1521a:	4ab3      	ldr	r2, [pc, #716]	; (154e8 <processOnSMS+0x40c>)
   1521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1521e:	0011      	movs	r1, r2
   15220:	0018      	movs	r0, r3
   15222:	4ba4      	ldr	r3, [pc, #656]	; (154b4 <processOnSMS+0x3d8>)
   15224:	4798      	blx	r3
   15226:	1e03      	subs	r3, r0, #0
   15228:	d05b      	beq.n	152e2 <processOnSMS+0x206>
	{
		enum gsm_error err = gsm_disable_call_waiting();
   1522a:	2318      	movs	r3, #24
   1522c:	33ff      	adds	r3, #255	; 0xff
   1522e:	2220      	movs	r2, #32
   15230:	2108      	movs	r1, #8
   15232:	468c      	mov	ip, r1
   15234:	44bc      	add	ip, r7
   15236:	4462      	add	r2, ip
   15238:	18d4      	adds	r4, r2, r3
   1523a:	4bac      	ldr	r3, [pc, #688]	; (154ec <processOnSMS+0x410>)
   1523c:	4798      	blx	r3
   1523e:	0003      	movs	r3, r0
   15240:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
   15242:	2330      	movs	r3, #48	; 0x30
   15244:	33ff      	adds	r3, #255	; 0xff
   15246:	2220      	movs	r2, #32
   15248:	4694      	mov	ip, r2
   1524a:	2208      	movs	r2, #8
   1524c:	4690      	mov	r8, r2
   1524e:	44b8      	add	r8, r7
   15250:	44c4      	add	ip, r8
   15252:	4463      	add	r3, ip
   15254:	2201      	movs	r2, #1
   15256:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   15258:	4b93      	ldr	r3, [pc, #588]	; (154a8 <processOnSMS+0x3cc>)
   1525a:	2298      	movs	r2, #152	; 0x98
   1525c:	0052      	lsls	r2, r2, #1
   1525e:	4694      	mov	ip, r2
   15260:	2220      	movs	r2, #32
   15262:	4690      	mov	r8, r2
   15264:	2208      	movs	r2, #8
   15266:	4691      	mov	r9, r2
   15268:	44b9      	add	r9, r7
   1526a:	44c8      	add	r8, r9
   1526c:	44c4      	add	ip, r8
   1526e:	4463      	add	r3, ip
   15270:	781b      	ldrb	r3, [r3, #0]
   15272:	2b00      	cmp	r3, #0
   15274:	d101      	bne.n	1527a <processOnSMS+0x19e>
   15276:	f002 fbf0 	bl	17a5a <processOnSMS+0x297e>
		{
			if (err == GSM_ERROR_NONE)
   1527a:	2318      	movs	r3, #24
   1527c:	33ff      	adds	r3, #255	; 0xff
   1527e:	2220      	movs	r2, #32
   15280:	4694      	mov	ip, r2
   15282:	2208      	movs	r2, #8
   15284:	4690      	mov	r8, r2
   15286:	44b8      	add	r8, r7
   15288:	44c4      	add	ip, r8
   1528a:	4463      	add	r3, ip
   1528c:	781b      	ldrb	r3, [r3, #0]
   1528e:	2b00      	cmp	r3, #0
   15290:	d112      	bne.n	152b8 <processOnSMS+0x1dc>
			{
				strcpy(resep_msg,"CALL WAIING DISABLE: SUCCESS");
   15292:	230c      	movs	r3, #12
   15294:	2220      	movs	r2, #32
   15296:	4694      	mov	ip, r2
   15298:	2208      	movs	r2, #8
   1529a:	4690      	mov	r8, r2
   1529c:	44b8      	add	r8, r7
   1529e:	44c4      	add	ip, r8
   152a0:	4463      	add	r3, ip
   152a2:	4a93      	ldr	r2, [pc, #588]	; (154f0 <processOnSMS+0x414>)
   152a4:	ca13      	ldmia	r2!, {r0, r1, r4}
   152a6:	c313      	stmia	r3!, {r0, r1, r4}
   152a8:	ca13      	ldmia	r2!, {r0, r1, r4}
   152aa:	c313      	stmia	r3!, {r0, r1, r4}
   152ac:	6811      	ldr	r1, [r2, #0]
   152ae:	6019      	str	r1, [r3, #0]
   152b0:	7912      	ldrb	r2, [r2, #4]
   152b2:	711a      	strb	r2, [r3, #4]
   152b4:	f002 fbd1 	bl	17a5a <processOnSMS+0x297e>
			}
			else
			{
				strcpy(resep_msg,"CALL WAITTING DISABLE : FAILED");
   152b8:	230c      	movs	r3, #12
   152ba:	2220      	movs	r2, #32
   152bc:	4694      	mov	ip, r2
   152be:	2208      	movs	r2, #8
   152c0:	4690      	mov	r8, r2
   152c2:	44b8      	add	r8, r7
   152c4:	44c4      	add	ip, r8
   152c6:	4463      	add	r3, ip
   152c8:	4a8a      	ldr	r2, [pc, #552]	; (154f4 <processOnSMS+0x418>)
   152ca:	ca13      	ldmia	r2!, {r0, r1, r4}
   152cc:	c313      	stmia	r3!, {r0, r1, r4}
   152ce:	ca13      	ldmia	r2!, {r0, r1, r4}
   152d0:	c313      	stmia	r3!, {r0, r1, r4}
   152d2:	6811      	ldr	r1, [r2, #0]
   152d4:	6019      	str	r1, [r3, #0]
   152d6:	8891      	ldrh	r1, [r2, #4]
   152d8:	8099      	strh	r1, [r3, #4]
   152da:	7992      	ldrb	r2, [r2, #6]
   152dc:	719a      	strb	r2, [r3, #6]
   152de:	f002 fbbc 	bl	17a5a <processOnSMS+0x297e>
			}
		}
	}
	else if(StringstartsWith(received_command, "SETREV"))
   152e2:	4a85      	ldr	r2, [pc, #532]	; (154f8 <processOnSMS+0x41c>)
   152e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   152e6:	0011      	movs	r1, r2
   152e8:	0018      	movs	r0, r3
   152ea:	4b72      	ldr	r3, [pc, #456]	; (154b4 <processOnSMS+0x3d8>)
   152ec:	4798      	blx	r3
   152ee:	1e03      	subs	r3, r0, #0
   152f0:	d077      	beq.n	153e2 <processOnSMS+0x306>
	{
		incomingSMSProcessed=true;
   152f2:	2330      	movs	r3, #48	; 0x30
   152f4:	33ff      	adds	r3, #255	; 0xff
   152f6:	2220      	movs	r2, #32
   152f8:	4694      	mov	ip, r2
   152fa:	2208      	movs	r2, #8
   152fc:	4690      	mov	r8, r2
   152fe:	44b8      	add	r8, r7
   15300:	44c4      	add	ip, r8
   15302:	4463      	add	r3, ip
   15304:	2201      	movs	r2, #1
   15306:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15308:	4b7c      	ldr	r3, [pc, #496]	; (154fc <processOnSMS+0x420>)
   1530a:	689b      	ldr	r3, [r3, #8]
   1530c:	469a      	mov	sl, r3
				factory_settings_parameter_struct.DeviceId_ee,VERSION_NO,
				user_settings_parameter_struct.autoStartAddress,
   1530e:	4b7c      	ldr	r3, [pc, #496]	; (15500 <processOnSMS+0x424>)
   15310:	785b      	ldrb	r3, [r3, #1]
   15312:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15314:	469b      	mov	fp, r3
				user_settings_parameter_struct.detectSinglePhasing,
   15316:	4b7a      	ldr	r3, [pc, #488]	; (15500 <processOnSMS+0x424>)
   15318:	2220      	movs	r2, #32
   1531a:	5c9b      	ldrb	r3, [r3, r2]
   1531c:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1531e:	627b      	str	r3, [r7, #36]	; 0x24
				user_settings_parameter_struct.singlePhasingVoltage,
   15320:	4b77      	ldr	r3, [pc, #476]	; (15500 <processOnSMS+0x424>)
   15322:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   15324:	b29b      	uxth	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15326:	623b      	str	r3, [r7, #32]
				user_settings_parameter_struct.detectPhaseSequence,
   15328:	4b75      	ldr	r3, [pc, #468]	; (15500 <processOnSMS+0x424>)
   1532a:	2224      	movs	r2, #36	; 0x24
   1532c:	5c9b      	ldrb	r3, [r3, r2]
   1532e:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15330:	61fb      	str	r3, [r7, #28]
				user_settings_parameter_struct.dndAddress,
   15332:	4b73      	ldr	r3, [pc, #460]	; (15500 <processOnSMS+0x424>)
   15334:	791b      	ldrb	r3, [r3, #4]
   15336:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15338:	61bb      	str	r3, [r7, #24]
				user_settings_parameter_struct.detectMotorFeedback,
   1533a:	4b71      	ldr	r3, [pc, #452]	; (15500 <processOnSMS+0x424>)
   1533c:	2225      	movs	r2, #37	; 0x25
   1533e:	5c9b      	ldrb	r3, [r3, r2]
   15340:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15342:	617b      	str	r3, [r7, #20]
				user_settings_parameter_struct.over_under_DetectionMethod,
   15344:	4b6e      	ldr	r3, [pc, #440]	; (15500 <processOnSMS+0x424>)
   15346:	2226      	movs	r2, #38	; 0x26
   15348:	5c9b      	ldrb	r3, [r3, r2]
   1534a:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1534c:	613b      	str	r3, [r7, #16]
				user_settings_parameter_struct.motorVoltageBypass,
   1534e:	4b6c      	ldr	r3, [pc, #432]	; (15500 <processOnSMS+0x424>)
   15350:	2227      	movs	r2, #39	; 0x27
   15352:	5c9b      	ldrb	r3, [r3, r2]
   15354:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15356:	60fb      	str	r3, [r7, #12]
   15358:	4b69      	ldr	r3, [pc, #420]	; (15500 <processOnSMS+0x424>)
   1535a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
				user_settings_parameter_struct.motorVoltageBypassTime,
				user_settings_parameter_struct.responseAddress,
   1535c:	4b68      	ldr	r3, [pc, #416]	; (15500 <processOnSMS+0x424>)
   1535e:	795b      	ldrb	r3, [r3, #5]
   15360:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15362:	4699      	mov	r9, r3
				user_settings_parameter_struct.underloadPerAddress,
   15364:	4b66      	ldr	r3, [pc, #408]	; (15500 <processOnSMS+0x424>)
   15366:	7f1b      	ldrb	r3, [r3, #28]
   15368:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1536a:	603b      	str	r3, [r7, #0]
				user_settings_parameter_struct.overloadPerAddress,
   1536c:	4b64      	ldr	r3, [pc, #400]	; (15500 <processOnSMS+0x424>)
   1536e:	7f5b      	ldrb	r3, [r3, #29]
   15370:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15372:	60bb      	str	r3, [r7, #8]
				user_settings_parameter_struct.eventStageAddress,
   15374:	4b62      	ldr	r3, [pc, #392]	; (15500 <processOnSMS+0x424>)
   15376:	7a1b      	ldrb	r3, [r3, #8]
   15378:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1537a:	001d      	movs	r5, r3
				user_settings_parameter_struct.starDeltaTimerAddress,
   1537c:	4b60      	ldr	r3, [pc, #384]	; (15500 <processOnSMS+0x424>)
   1537e:	88db      	ldrh	r3, [r3, #6]
   15380:	b29b      	uxth	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15382:	001c      	movs	r4, r3
				user_settings_parameter_struct.autoStartTimeAddress);
   15384:	4b5e      	ldr	r3, [pc, #376]	; (15500 <processOnSMS+0x424>)
   15386:	885b      	ldrh	r3, [r3, #2]
   15388:	b29b      	uxth	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1538a:	607b      	str	r3, [r7, #4]
   1538c:	4a5d      	ldr	r2, [pc, #372]	; (15504 <processOnSMS+0x428>)
   1538e:	495e      	ldr	r1, [pc, #376]	; (15508 <processOnSMS+0x42c>)
   15390:	200c      	movs	r0, #12
   15392:	2320      	movs	r3, #32
   15394:	469c      	mov	ip, r3
   15396:	2308      	movs	r3, #8
   15398:	4698      	mov	r8, r3
   1539a:	44b8      	add	r8, r7
   1539c:	44c4      	add	ip, r8
   1539e:	4460      	add	r0, ip
   153a0:	687b      	ldr	r3, [r7, #4]
   153a2:	930e      	str	r3, [sp, #56]	; 0x38
   153a4:	940d      	str	r4, [sp, #52]	; 0x34
   153a6:	950c      	str	r5, [sp, #48]	; 0x30
   153a8:	68bc      	ldr	r4, [r7, #8]
   153aa:	940b      	str	r4, [sp, #44]	; 0x2c
   153ac:	683c      	ldr	r4, [r7, #0]
   153ae:	940a      	str	r4, [sp, #40]	; 0x28
   153b0:	464c      	mov	r4, r9
   153b2:	9409      	str	r4, [sp, #36]	; 0x24
   153b4:	9608      	str	r6, [sp, #32]
   153b6:	68fc      	ldr	r4, [r7, #12]
   153b8:	9407      	str	r4, [sp, #28]
   153ba:	693c      	ldr	r4, [r7, #16]
   153bc:	9406      	str	r4, [sp, #24]
   153be:	697c      	ldr	r4, [r7, #20]
   153c0:	9405      	str	r4, [sp, #20]
   153c2:	69bc      	ldr	r4, [r7, #24]
   153c4:	9404      	str	r4, [sp, #16]
   153c6:	69fc      	ldr	r4, [r7, #28]
   153c8:	9403      	str	r4, [sp, #12]
   153ca:	6a3c      	ldr	r4, [r7, #32]
   153cc:	9402      	str	r4, [sp, #8]
   153ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   153d0:	9301      	str	r3, [sp, #4]
   153d2:	465b      	mov	r3, fp
   153d4:	9300      	str	r3, [sp, #0]
   153d6:	0013      	movs	r3, r2
   153d8:	4652      	mov	r2, sl
   153da:	4c4c      	ldr	r4, [pc, #304]	; (1550c <processOnSMS+0x430>)
   153dc:	47a0      	blx	r4
   153de:	f002 fb3c 	bl	17a5a <processOnSMS+0x297e>
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
   153e2:	4a4b      	ldr	r2, [pc, #300]	; (15510 <processOnSMS+0x434>)
   153e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   153e6:	0011      	movs	r1, r2
   153e8:	0018      	movs	r0, r3
   153ea:	4b32      	ldr	r3, [pc, #200]	; (154b4 <processOnSMS+0x3d8>)
   153ec:	4798      	blx	r3
   153ee:	1e03      	subs	r3, r0, #0
   153f0:	d03c      	beq.n	1546c <processOnSMS+0x390>
	{
		clearNumbers(admin);
   153f2:	4b2c      	ldr	r3, [pc, #176]	; (154a4 <processOnSMS+0x3c8>)
   153f4:	2298      	movs	r2, #152	; 0x98
   153f6:	0052      	lsls	r2, r2, #1
   153f8:	4694      	mov	ip, r2
   153fa:	2220      	movs	r2, #32
   153fc:	4690      	mov	r8, r2
   153fe:	2208      	movs	r2, #8
   15400:	4691      	mov	r9, r2
   15402:	44b9      	add	r9, r7
   15404:	44c8      	add	r8, r9
   15406:	44c4      	add	ip, r8
   15408:	4463      	add	r3, ip
   1540a:	781b      	ldrb	r3, [r3, #0]
   1540c:	0018      	movs	r0, r3
   1540e:	4b41      	ldr	r3, [pc, #260]	; (15514 <processOnSMS+0x438>)
   15410:	4798      	blx	r3
		incomingSMSProcessed=true;
   15412:	2330      	movs	r3, #48	; 0x30
   15414:	33ff      	adds	r3, #255	; 0xff
   15416:	2220      	movs	r2, #32
   15418:	4694      	mov	ip, r2
   1541a:	2208      	movs	r2, #8
   1541c:	4690      	mov	r8, r2
   1541e:	44b8      	add	r8, r7
   15420:	44c4      	add	ip, r8
   15422:	4463      	add	r3, ip
   15424:	2201      	movs	r2, #1
   15426:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   15428:	4b1f      	ldr	r3, [pc, #124]	; (154a8 <processOnSMS+0x3cc>)
   1542a:	2298      	movs	r2, #152	; 0x98
   1542c:	0052      	lsls	r2, r2, #1
   1542e:	4694      	mov	ip, r2
   15430:	2220      	movs	r2, #32
   15432:	4690      	mov	r8, r2
   15434:	2208      	movs	r2, #8
   15436:	4691      	mov	r9, r2
   15438:	44b9      	add	r9, r7
   1543a:	44c8      	add	r8, r9
   1543c:	44c4      	add	ip, r8
   1543e:	4463      	add	r3, ip
   15440:	781b      	ldrb	r3, [r3, #0]
   15442:	2b00      	cmp	r3, #0
   15444:	d101      	bne.n	1544a <processOnSMS+0x36e>
   15446:	f002 fb08 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
   1544a:	230c      	movs	r3, #12
   1544c:	2220      	movs	r2, #32
   1544e:	4694      	mov	ip, r2
   15450:	2208      	movs	r2, #8
   15452:	4690      	mov	r8, r2
   15454:	44b8      	add	r8, r7
   15456:	44c4      	add	ip, r8
   15458:	4463      	add	r3, ip
   1545a:	4a2f      	ldr	r2, [pc, #188]	; (15518 <processOnSMS+0x43c>)
   1545c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1545e:	c313      	stmia	r3!, {r0, r1, r4}
   15460:	ca13      	ldmia	r2!, {r0, r1, r4}
   15462:	c313      	stmia	r3!, {r0, r1, r4}
   15464:	7812      	ldrb	r2, [r2, #0]
   15466:	701a      	strb	r2, [r3, #0]
   15468:	f002 faf7 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
   1546c:	4a2b      	ldr	r2, [pc, #172]	; (1551c <processOnSMS+0x440>)
   1546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15470:	0011      	movs	r1, r2
   15472:	0018      	movs	r0, r3
   15474:	4b0f      	ldr	r3, [pc, #60]	; (154b4 <processOnSMS+0x3d8>)
   15476:	4798      	blx	r3
   15478:	1e03      	subs	r3, r0, #0
   1547a:	d100      	bne.n	1547e <processOnSMS+0x3a2>
   1547c:	e0c2      	b.n	15604 <processOnSMS+0x528>
	{
		saveAutoStartSettings(false);
   1547e:	2000      	movs	r0, #0
   15480:	4b27      	ldr	r3, [pc, #156]	; (15520 <processOnSMS+0x444>)
   15482:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15484:	4b1d      	ldr	r3, [pc, #116]	; (154fc <processOnSMS+0x420>)
   15486:	795b      	ldrb	r3, [r3, #5]
   15488:	2b00      	cmp	r3, #0
   1548a:	d052      	beq.n	15532 <processOnSMS+0x456>
		{
			saveWaterBypassSettings(false);
   1548c:	2000      	movs	r0, #0
   1548e:	4b25      	ldr	r3, [pc, #148]	; (15524 <processOnSMS+0x448>)
   15490:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
   15492:	4b1a      	ldr	r3, [pc, #104]	; (154fc <processOnSMS+0x420>)
   15494:	78db      	ldrb	r3, [r3, #3]
   15496:	2b00      	cmp	r3, #0
   15498:	d048      	beq.n	1552c <processOnSMS+0x450>
			{
				saveM2MSettings(false);
   1549a:	2000      	movs	r0, #0
   1549c:	4b22      	ldr	r3, [pc, #136]	; (15528 <processOnSMS+0x44c>)
   1549e:	4798      	blx	r3
   154a0:	e047      	b.n	15532 <processOnSMS+0x456>
   154a2:	46c0      	nop			; (mov r8, r8)
   154a4:	fffffed3 	.word	0xfffffed3
   154a8:	fffffed2 	.word	0xfffffed2
   154ac:	fffffed1 	.word	0xfffffed1
   154b0:	0002a9d0 	.word	0x0002a9d0
   154b4:	0001420d 	.word	0x0001420d
   154b8:	0002a9d8 	.word	0x0002a9d8
   154bc:	200007f8 	.word	0x200007f8
   154c0:	20000804 	.word	0x20000804
   154c4:	0002975b 	.word	0x0002975b
   154c8:	000299db 	.word	0x000299db
   154cc:	00012319 	.word	0x00012319
   154d0:	20000784 	.word	0x20000784
   154d4:	00029725 	.word	0x00029725
   154d8:	00024331 	.word	0x00024331
   154dc:	000244d9 	.word	0x000244d9
   154e0:	00020a49 	.word	0x00020a49
   154e4:	000142e1 	.word	0x000142e1
   154e8:	0002a9e0 	.word	0x0002a9e0
   154ec:	000130dd 	.word	0x000130dd
   154f0:	0002a9e8 	.word	0x0002a9e8
   154f4:	0002aa08 	.word	0x0002aa08
   154f8:	0002aa28 	.word	0x0002aa28
   154fc:	2000082c 	.word	0x2000082c
   15500:	20000854 	.word	0x20000854
   15504:	0002aa30 	.word	0x0002aa30
   15508:	0002aa44 	.word	0x0002aa44
   1550c:	00029961 	.word	0x00029961
   15510:	0002aad0 	.word	0x0002aad0
   15514:	0001110d 	.word	0x0001110d
   15518:	0002aadc 	.word	0x0002aadc
   1551c:	0002aaf8 	.word	0x0002aaf8
   15520:	000112a9 	.word	0x000112a9
   15524:	00011469 	.word	0x00011469
   15528:	00010be5 	.word	0x00010be5
			}
			else
			{
				savePreventOverFlowSettings(false);
   1552c:	2000      	movs	r0, #0
   1552e:	4bd4      	ldr	r3, [pc, #848]	; (15880 <processOnSMS+0x7a4>)
   15530:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   15532:	4bd4      	ldr	r3, [pc, #848]	; (15884 <processOnSMS+0x7a8>)
   15534:	785b      	ldrb	r3, [r3, #1]
   15536:	2b00      	cmp	r3, #0
   15538:	d008      	beq.n	1554c <processOnSMS+0x470>
		{
			setOverloadPer(120);
   1553a:	2078      	movs	r0, #120	; 0x78
   1553c:	4bd2      	ldr	r3, [pc, #840]	; (15888 <processOnSMS+0x7ac>)
   1553e:	4798      	blx	r3
			setUnderloadPer(85);
   15540:	2055      	movs	r0, #85	; 0x55
   15542:	4bd2      	ldr	r3, [pc, #840]	; (1588c <processOnSMS+0x7b0>)
   15544:	4798      	blx	r3
			setCurrentDetection(false);
   15546:	2000      	movs	r0, #0
   15548:	4bd1      	ldr	r3, [pc, #836]	; (15890 <processOnSMS+0x7b4>)
   1554a:	4798      	blx	r3
		}
		saveSinglePhasingSettings(true);
   1554c:	2001      	movs	r0, #1
   1554e:	4bd1      	ldr	r3, [pc, #836]	; (15894 <processOnSMS+0x7b8>)
   15550:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
   15552:	2050      	movs	r0, #80	; 0x50
   15554:	4bd0      	ldr	r3, [pc, #832]	; (15898 <processOnSMS+0x7bc>)
   15556:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
   15558:	2001      	movs	r0, #1
   1555a:	4bd0      	ldr	r3, [pc, #832]	; (1589c <processOnSMS+0x7c0>)
   1555c:	4798      	blx	r3
		saveDNDSettings(false);
   1555e:	2000      	movs	r0, #0
   15560:	4bcf      	ldr	r3, [pc, #828]	; (158a0 <processOnSMS+0x7c4>)
   15562:	4798      	blx	r3
		saveMotorFeedbackDetectionSettings(MOTORFEEDBACK_DETECTION_ON);
   15564:	2002      	movs	r0, #2
   15566:	4bcf      	ldr	r3, [pc, #828]	; (158a4 <processOnSMS+0x7c8>)
   15568:	4798      	blx	r3
		saveUnderOverDetectionMethodSettings(MOTOR_UNDEROVER_DETECTION_CURRENT);
   1556a:	2002      	movs	r0, #2
   1556c:	4bce      	ldr	r3, [pc, #824]	; (158a8 <processOnSMS+0x7cc>)
   1556e:	4798      	blx	r3
		saveMotorVoltageBypassSettings(MOTOR_VOLTAGE_BYPASS_OFF);
   15570:	2000      	movs	r0, #0
   15572:	4bce      	ldr	r3, [pc, #824]	; (158ac <processOnSMS+0x7d0>)
   15574:	4798      	blx	r3
		saveMotorVoltageBypasssTimeSettings(10000L);
   15576:	4bce      	ldr	r3, [pc, #824]	; (158b0 <processOnSMS+0x7d4>)
   15578:	0018      	movs	r0, r3
   1557a:	4bce      	ldr	r3, [pc, #824]	; (158b4 <processOnSMS+0x7d8>)
   1557c:	4798      	blx	r3
		saveResponseSettings('T');
   1557e:	2054      	movs	r0, #84	; 0x54
   15580:	4bcd      	ldr	r3, [pc, #820]	; (158b8 <processOnSMS+0x7dc>)
   15582:	4798      	blx	r3
		
		saveNoCallSettings(false,0,0,0,0);
   15584:	2300      	movs	r3, #0
   15586:	9300      	str	r3, [sp, #0]
   15588:	2300      	movs	r3, #0
   1558a:	2200      	movs	r2, #0
   1558c:	2100      	movs	r1, #0
   1558e:	2000      	movs	r0, #0
   15590:	4cca      	ldr	r4, [pc, #808]	; (158bc <processOnSMS+0x7e0>)
   15592:	47a0      	blx	r4
		saveEventStageSettings(0);
   15594:	2000      	movs	r0, #0
   15596:	4bca      	ldr	r3, [pc, #808]	; (158c0 <processOnSMS+0x7e4>)
   15598:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
   1559a:	2032      	movs	r0, #50	; 0x32
   1559c:	4bc9      	ldr	r3, [pc, #804]	; (158c4 <processOnSMS+0x7e8>)
   1559e:	4798      	blx	r3
		saveStarDeltaTimer(2);
   155a0:	2002      	movs	r0, #2
   155a2:	4bc9      	ldr	r3, [pc, #804]	; (158c8 <processOnSMS+0x7ec>)
   155a4:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   155a6:	2330      	movs	r3, #48	; 0x30
   155a8:	33ff      	adds	r3, #255	; 0xff
   155aa:	2220      	movs	r2, #32
   155ac:	4694      	mov	ip, r2
   155ae:	2208      	movs	r2, #8
   155b0:	4690      	mov	r8, r2
   155b2:	44b8      	add	r8, r7
   155b4:	44c4      	add	ip, r8
   155b6:	4463      	add	r3, ip
   155b8:	2201      	movs	r2, #1
   155ba:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   155bc:	4bc3      	ldr	r3, [pc, #780]	; (158cc <processOnSMS+0x7f0>)
   155be:	2298      	movs	r2, #152	; 0x98
   155c0:	0052      	lsls	r2, r2, #1
   155c2:	4694      	mov	ip, r2
   155c4:	2220      	movs	r2, #32
   155c6:	4690      	mov	r8, r2
   155c8:	2208      	movs	r2, #8
   155ca:	4691      	mov	r9, r2
   155cc:	44b9      	add	r9, r7
   155ce:	44c8      	add	r8, r9
   155d0:	44c4      	add	ip, r8
   155d2:	4463      	add	r3, ip
   155d4:	781b      	ldrb	r3, [r3, #0]
   155d6:	2b00      	cmp	r3, #0
   155d8:	d101      	bne.n	155de <processOnSMS+0x502>
   155da:	f002 fa3e 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
   155de:	230c      	movs	r3, #12
   155e0:	2220      	movs	r2, #32
   155e2:	4694      	mov	ip, r2
   155e4:	2208      	movs	r2, #8
   155e6:	4690      	mov	r8, r2
   155e8:	44b8      	add	r8, r7
   155ea:	44c4      	add	ip, r8
   155ec:	4463      	add	r3, ip
   155ee:	4ab8      	ldr	r2, [pc, #736]	; (158d0 <processOnSMS+0x7f4>)
   155f0:	ca13      	ldmia	r2!, {r0, r1, r4}
   155f2:	c313      	stmia	r3!, {r0, r1, r4}
   155f4:	ca13      	ldmia	r2!, {r0, r1, r4}
   155f6:	c313      	stmia	r3!, {r0, r1, r4}
   155f8:	ca13      	ldmia	r2!, {r0, r1, r4}
   155fa:	c313      	stmia	r3!, {r0, r1, r4}
   155fc:	7812      	ldrb	r2, [r2, #0]
   155fe:	701a      	strb	r2, [r3, #0]
   15600:	f002 fa2b 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
   15604:	4ab3      	ldr	r2, [pc, #716]	; (158d4 <processOnSMS+0x7f8>)
   15606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15608:	0011      	movs	r1, r2
   1560a:	0018      	movs	r0, r3
   1560c:	4bb2      	ldr	r3, [pc, #712]	; (158d8 <processOnSMS+0x7fc>)
   1560e:	4798      	blx	r3
   15610:	1e03      	subs	r3, r0, #0
   15612:	d047      	beq.n	156a4 <processOnSMS+0x5c8>
	{
		response_sms_processed_cmd = true;
   15614:	4bad      	ldr	r3, [pc, #692]	; (158cc <processOnSMS+0x7f0>)
   15616:	2298      	movs	r2, #152	; 0x98
   15618:	0052      	lsls	r2, r2, #1
   1561a:	4694      	mov	ip, r2
   1561c:	2220      	movs	r2, #32
   1561e:	4690      	mov	r8, r2
   15620:	2208      	movs	r2, #8
   15622:	4691      	mov	r9, r2
   15624:	44b9      	add	r9, r7
   15626:	44c8      	add	r8, r9
   15628:	44c4      	add	ip, r8
   1562a:	4463      	add	r3, ip
   1562c:	2201      	movs	r2, #1
   1562e:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   15630:	2330      	movs	r3, #48	; 0x30
   15632:	33ff      	adds	r3, #255	; 0xff
   15634:	2220      	movs	r2, #32
   15636:	4694      	mov	ip, r2
   15638:	2208      	movs	r2, #8
   1563a:	4690      	mov	r8, r2
   1563c:	44b8      	add	r8, r7
   1563e:	44c4      	add	ip, r8
   15640:	4463      	add	r3, ip
   15642:	2201      	movs	r2, #1
   15644:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
   15646:	230c      	movs	r3, #12
   15648:	2220      	movs	r2, #32
   1564a:	4694      	mov	ip, r2
   1564c:	2208      	movs	r2, #8
   1564e:	4690      	mov	r8, r2
   15650:	44b8      	add	r8, r7
   15652:	44c4      	add	ip, r8
   15654:	4463      	add	r3, ip
   15656:	22fa      	movs	r2, #250	; 0xfa
   15658:	2100      	movs	r1, #0
   1565a:	0018      	movs	r0, r3
   1565c:	4b9f      	ldr	r3, [pc, #636]	; (158dc <processOnSMS+0x800>)
   1565e:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
   15660:	4b9f      	ldr	r3, [pc, #636]	; (158e0 <processOnSMS+0x804>)
   15662:	789b      	ldrb	r3, [r3, #2]
   15664:	2b00      	cmp	r3, #0
   15666:	d110      	bne.n	1568a <processOnSMS+0x5ae>
		{
			strcpy(resep_msg,"No Numbers Exists");
   15668:	230c      	movs	r3, #12
   1566a:	2220      	movs	r2, #32
   1566c:	4694      	mov	ip, r2
   1566e:	2208      	movs	r2, #8
   15670:	4690      	mov	r8, r2
   15672:	44b8      	add	r8, r7
   15674:	44c4      	add	ip, r8
   15676:	4463      	add	r3, ip
   15678:	4a9a      	ldr	r2, [pc, #616]	; (158e4 <processOnSMS+0x808>)
   1567a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1567c:	c313      	stmia	r3!, {r0, r1, r4}
   1567e:	6811      	ldr	r1, [r2, #0]
   15680:	6019      	str	r1, [r3, #0]
   15682:	8892      	ldrh	r2, [r2, #4]
   15684:	809a      	strh	r2, [r3, #4]
   15686:	f002 f9e8 	bl	17a5a <processOnSMS+0x297e>
		}
		else
		{
			getNumbers(resep_msg);
   1568a:	230c      	movs	r3, #12
   1568c:	2220      	movs	r2, #32
   1568e:	4694      	mov	ip, r2
   15690:	2208      	movs	r2, #8
   15692:	4690      	mov	r8, r2
   15694:	44b8      	add	r8, r7
   15696:	44c4      	add	ip, r8
   15698:	4463      	add	r3, ip
   1569a:	0018      	movs	r0, r3
   1569c:	4b92      	ldr	r3, [pc, #584]	; (158e8 <processOnSMS+0x80c>)
   1569e:	4798      	blx	r3
   156a0:	f002 f9db 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
   156a4:	4a91      	ldr	r2, [pc, #580]	; (158ec <processOnSMS+0x810>)
   156a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   156a8:	0011      	movs	r1, r2
   156aa:	0018      	movs	r0, r3
   156ac:	4b8a      	ldr	r3, [pc, #552]	; (158d8 <processOnSMS+0x7fc>)
   156ae:	4798      	blx	r3
   156b0:	1e03      	subs	r3, r0, #0
   156b2:	d003      	beq.n	156bc <processOnSMS+0x5e0>
	{
		system_reset();
   156b4:	4b8e      	ldr	r3, [pc, #568]	; (158f0 <processOnSMS+0x814>)
   156b6:	4798      	blx	r3
   156b8:	f002 f9cf 	bl	17a5a <processOnSMS+0x297e>
	}
	else if (StringstartsWith(received_command,"DID"))
   156bc:	4a8d      	ldr	r2, [pc, #564]	; (158f4 <processOnSMS+0x818>)
   156be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   156c0:	0011      	movs	r1, r2
   156c2:	0018      	movs	r0, r3
   156c4:	4b84      	ldr	r3, [pc, #528]	; (158d8 <processOnSMS+0x7fc>)
   156c6:	4798      	blx	r3
   156c8:	1e03      	subs	r3, r0, #0
   156ca:	d028      	beq.n	1571e <processOnSMS+0x642>
	{
		response_sms_processed_cmd=true;
   156cc:	4b7f      	ldr	r3, [pc, #508]	; (158cc <processOnSMS+0x7f0>)
   156ce:	2298      	movs	r2, #152	; 0x98
   156d0:	0052      	lsls	r2, r2, #1
   156d2:	4694      	mov	ip, r2
   156d4:	2220      	movs	r2, #32
   156d6:	4690      	mov	r8, r2
   156d8:	2208      	movs	r2, #8
   156da:	4691      	mov	r9, r2
   156dc:	44b9      	add	r9, r7
   156de:	44c8      	add	r8, r9
   156e0:	44c4      	add	ip, r8
   156e2:	4463      	add	r3, ip
   156e4:	2201      	movs	r2, #1
   156e6:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   156e8:	2330      	movs	r3, #48	; 0x30
   156ea:	33ff      	adds	r3, #255	; 0xff
   156ec:	2220      	movs	r2, #32
   156ee:	4694      	mov	ip, r2
   156f0:	2208      	movs	r2, #8
   156f2:	4690      	mov	r8, r2
   156f4:	44b8      	add	r8, r7
   156f6:	44c4      	add	ip, r8
   156f8:	4463      	add	r3, ip
   156fa:	2201      	movs	r2, #1
   156fc:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"%lu %s",factory_settings_parameter_struct.DeviceId_ee,VERSION_NO);
   156fe:	4b61      	ldr	r3, [pc, #388]	; (15884 <processOnSMS+0x7a8>)
   15700:	689a      	ldr	r2, [r3, #8]
   15702:	4b7d      	ldr	r3, [pc, #500]	; (158f8 <processOnSMS+0x81c>)
   15704:	497d      	ldr	r1, [pc, #500]	; (158fc <processOnSMS+0x820>)
   15706:	200c      	movs	r0, #12
   15708:	2420      	movs	r4, #32
   1570a:	46a4      	mov	ip, r4
   1570c:	2408      	movs	r4, #8
   1570e:	46a0      	mov	r8, r4
   15710:	44b8      	add	r8, r7
   15712:	44c4      	add	ip, r8
   15714:	4460      	add	r0, ip
   15716:	4c7a      	ldr	r4, [pc, #488]	; (15900 <processOnSMS+0x824>)
   15718:	47a0      	blx	r4
   1571a:	f002 f99e 	bl	17a5a <processOnSMS+0x297e>
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
   1571e:	4a79      	ldr	r2, [pc, #484]	; (15904 <processOnSMS+0x828>)
   15720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15722:	0011      	movs	r1, r2
   15724:	0018      	movs	r0, r3
   15726:	4b6c      	ldr	r3, [pc, #432]	; (158d8 <processOnSMS+0x7fc>)
   15728:	4798      	blx	r3
   1572a:	1e03      	subs	r3, r0, #0
   1572c:	d030      	beq.n	15790 <processOnSMS+0x6b4>
	{
		saveAutoStartSettings(true);
   1572e:	2001      	movs	r0, #1
   15730:	4b75      	ldr	r3, [pc, #468]	; (15908 <processOnSMS+0x82c>)
   15732:	4798      	blx	r3
		resetAutoStart(true);
   15734:	2001      	movs	r0, #1
   15736:	4b75      	ldr	r3, [pc, #468]	; (1590c <processOnSMS+0x830>)
   15738:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1573a:	2330      	movs	r3, #48	; 0x30
   1573c:	33ff      	adds	r3, #255	; 0xff
   1573e:	2220      	movs	r2, #32
   15740:	4694      	mov	ip, r2
   15742:	2208      	movs	r2, #8
   15744:	4690      	mov	r8, r2
   15746:	44b8      	add	r8, r7
   15748:	44c4      	add	ip, r8
   1574a:	4463      	add	r3, ip
   1574c:	2201      	movs	r2, #1
   1574e:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15750:	4b5e      	ldr	r3, [pc, #376]	; (158cc <processOnSMS+0x7f0>)
   15752:	2298      	movs	r2, #152	; 0x98
   15754:	0052      	lsls	r2, r2, #1
   15756:	4694      	mov	ip, r2
   15758:	2220      	movs	r2, #32
   1575a:	4690      	mov	r8, r2
   1575c:	2208      	movs	r2, #8
   1575e:	4691      	mov	r9, r2
   15760:	44b9      	add	r9, r7
   15762:	44c8      	add	r8, r9
   15764:	44c4      	add	ip, r8
   15766:	4463      	add	r3, ip
   15768:	781b      	ldrb	r3, [r3, #0]
   1576a:	2b00      	cmp	r3, #0
   1576c:	d101      	bne.n	15772 <processOnSMS+0x696>
   1576e:	f002 f974 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"MOTOR AUTO : ON");
   15772:	230c      	movs	r3, #12
   15774:	2220      	movs	r2, #32
   15776:	4694      	mov	ip, r2
   15778:	2208      	movs	r2, #8
   1577a:	4690      	mov	r8, r2
   1577c:	44b8      	add	r8, r7
   1577e:	44c4      	add	ip, r8
   15780:	4463      	add	r3, ip
   15782:	4a63      	ldr	r2, [pc, #396]	; (15910 <processOnSMS+0x834>)
   15784:	ca13      	ldmia	r2!, {r0, r1, r4}
   15786:	c313      	stmia	r3!, {r0, r1, r4}
   15788:	6812      	ldr	r2, [r2, #0]
   1578a:	601a      	str	r2, [r3, #0]
   1578c:	f002 f965 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
   15790:	4a60      	ldr	r2, [pc, #384]	; (15914 <processOnSMS+0x838>)
   15792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15794:	0011      	movs	r1, r2
   15796:	0018      	movs	r0, r3
   15798:	4b4f      	ldr	r3, [pc, #316]	; (158d8 <processOnSMS+0x7fc>)
   1579a:	4798      	blx	r3
   1579c:	1e03      	subs	r3, r0, #0
   1579e:	d032      	beq.n	15806 <processOnSMS+0x72a>
	{
		saveAutoStartSettings(false);
   157a0:	2000      	movs	r0, #0
   157a2:	4b59      	ldr	r3, [pc, #356]	; (15908 <processOnSMS+0x82c>)
   157a4:	4798      	blx	r3
		resetAutoStart(true);
   157a6:	2001      	movs	r0, #1
   157a8:	4b58      	ldr	r3, [pc, #352]	; (1590c <processOnSMS+0x830>)
   157aa:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   157ac:	2330      	movs	r3, #48	; 0x30
   157ae:	33ff      	adds	r3, #255	; 0xff
   157b0:	2220      	movs	r2, #32
   157b2:	4694      	mov	ip, r2
   157b4:	2208      	movs	r2, #8
   157b6:	4690      	mov	r8, r2
   157b8:	44b8      	add	r8, r7
   157ba:	44c4      	add	ip, r8
   157bc:	4463      	add	r3, ip
   157be:	2201      	movs	r2, #1
   157c0:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   157c2:	4b42      	ldr	r3, [pc, #264]	; (158cc <processOnSMS+0x7f0>)
   157c4:	2298      	movs	r2, #152	; 0x98
   157c6:	0052      	lsls	r2, r2, #1
   157c8:	4694      	mov	ip, r2
   157ca:	2220      	movs	r2, #32
   157cc:	4690      	mov	r8, r2
   157ce:	2208      	movs	r2, #8
   157d0:	4691      	mov	r9, r2
   157d2:	44b9      	add	r9, r7
   157d4:	44c8      	add	r8, r9
   157d6:	44c4      	add	ip, r8
   157d8:	4463      	add	r3, ip
   157da:	781b      	ldrb	r3, [r3, #0]
   157dc:	2b00      	cmp	r3, #0
   157de:	d101      	bne.n	157e4 <processOnSMS+0x708>
   157e0:	f002 f93b 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"MOTOR AUTO : OFF");
   157e4:	230c      	movs	r3, #12
   157e6:	2220      	movs	r2, #32
   157e8:	4694      	mov	ip, r2
   157ea:	2208      	movs	r2, #8
   157ec:	4690      	mov	r8, r2
   157ee:	44b8      	add	r8, r7
   157f0:	44c4      	add	ip, r8
   157f2:	4463      	add	r3, ip
   157f4:	4a48      	ldr	r2, [pc, #288]	; (15918 <processOnSMS+0x83c>)
   157f6:	ca13      	ldmia	r2!, {r0, r1, r4}
   157f8:	c313      	stmia	r3!, {r0, r1, r4}
   157fa:	6811      	ldr	r1, [r2, #0]
   157fc:	6019      	str	r1, [r3, #0]
   157fe:	7912      	ldrb	r2, [r2, #4]
   15800:	711a      	strb	r2, [r3, #4]
   15802:	f002 f92a 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
   15806:	4a45      	ldr	r2, [pc, #276]	; (1591c <processOnSMS+0x840>)
   15808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1580a:	0011      	movs	r1, r2
   1580c:	0018      	movs	r0, r3
   1580e:	4b32      	ldr	r3, [pc, #200]	; (158d8 <processOnSMS+0x7fc>)
   15810:	4798      	blx	r3
   15812:	1e03      	subs	r3, r0, #0
   15814:	d100      	bne.n	15818 <processOnSMS+0x73c>
   15816:	e087      	b.n	15928 <processOnSMS+0x84c>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15818:	4b1a      	ldr	r3, [pc, #104]	; (15884 <processOnSMS+0x7a8>)
   1581a:	795b      	ldrb	r3, [r3, #5]
   1581c:	2b00      	cmp	r3, #0
   1581e:	d101      	bne.n	15824 <processOnSMS+0x748>
   15820:	f002 f91b 	bl	17a5a <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   15824:	2330      	movs	r3, #48	; 0x30
   15826:	33ff      	adds	r3, #255	; 0xff
   15828:	2220      	movs	r2, #32
   1582a:	4694      	mov	ip, r2
   1582c:	2208      	movs	r2, #8
   1582e:	4690      	mov	r8, r2
   15830:	44b8      	add	r8, r7
   15832:	44c4      	add	ip, r8
   15834:	4463      	add	r3, ip
   15836:	2201      	movs	r2, #1
   15838:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
   1583a:	2001      	movs	r0, #1
   1583c:	4b38      	ldr	r3, [pc, #224]	; (15920 <processOnSMS+0x844>)
   1583e:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   15840:	4b22      	ldr	r3, [pc, #136]	; (158cc <processOnSMS+0x7f0>)
   15842:	2298      	movs	r2, #152	; 0x98
   15844:	0052      	lsls	r2, r2, #1
   15846:	4694      	mov	ip, r2
   15848:	2220      	movs	r2, #32
   1584a:	4690      	mov	r8, r2
   1584c:	2208      	movs	r2, #8
   1584e:	4691      	mov	r9, r2
   15850:	44b9      	add	r9, r7
   15852:	44c8      	add	r8, r9
   15854:	44c4      	add	ip, r8
   15856:	4463      	add	r3, ip
   15858:	781b      	ldrb	r3, [r3, #0]
   1585a:	2b00      	cmp	r3, #0
   1585c:	d101      	bne.n	15862 <processOnSMS+0x786>
   1585e:	f002 f8fc 	bl	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
   15862:	230c      	movs	r3, #12
   15864:	2220      	movs	r2, #32
   15866:	4694      	mov	ip, r2
   15868:	2208      	movs	r2, #8
   1586a:	4690      	mov	r8, r2
   1586c:	44b8      	add	r8, r7
   1586e:	44c4      	add	ip, r8
   15870:	4463      	add	r3, ip
   15872:	4a2c      	ldr	r2, [pc, #176]	; (15924 <processOnSMS+0x848>)
   15874:	ca13      	ldmia	r2!, {r0, r1, r4}
   15876:	c313      	stmia	r3!, {r0, r1, r4}
   15878:	6812      	ldr	r2, [r2, #0]
   1587a:	601a      	str	r2, [r3, #0]
   1587c:	f002 f8ed 	bl	17a5a <processOnSMS+0x297e>
   15880:	000114b5 	.word	0x000114b5
   15884:	2000082c 	.word	0x2000082c
   15888:	00011501 	.word	0x00011501
   1588c:	0001156d 	.word	0x0001156d
   15890:	00011995 	.word	0x00011995
   15894:	000115e1 	.word	0x000115e1
   15898:	0001162d 	.word	0x0001162d
   1589c:	00011679 	.word	0x00011679
   158a0:	00011341 	.word	0x00011341
   158a4:	000117a1 	.word	0x000117a1
   158a8:	000116c5 	.word	0x000116c5
   158ac:	00011711 	.word	0x00011711
   158b0:	00002710 	.word	0x00002710
   158b4:	0001175d 	.word	0x0001175d
   158b8:	0001138d 	.word	0x0001138d
   158bc:	000113d9 	.word	0x000113d9
   158c0:	00011a2d 	.word	0x00011a2d
   158c4:	000112f5 	.word	0x000112f5
   158c8:	000119e1 	.word	0x000119e1
   158cc:	fffffed2 	.word	0xfffffed2
   158d0:	0002ab00 	.word	0x0002ab00
   158d4:	0002ab28 	.word	0x0002ab28
   158d8:	0001420d 	.word	0x0001420d
   158dc:	0002975b 	.word	0x0002975b
   158e0:	20000814 	.word	0x20000814
   158e4:	0002ab2c 	.word	0x0002ab2c
   158e8:	000107f9 	.word	0x000107f9
   158ec:	0002ab40 	.word	0x0002ab40
   158f0:	000142e1 	.word	0x000142e1
   158f4:	0002ab48 	.word	0x0002ab48
   158f8:	0002aa30 	.word	0x0002aa30
   158fc:	0002ab4c 	.word	0x0002ab4c
   15900:	00029961 	.word	0x00029961
   15904:	0002ab54 	.word	0x0002ab54
   15908:	000112a9 	.word	0x000112a9
   1590c:	0001bef9 	.word	0x0001bef9
   15910:	0002ab5c 	.word	0x0002ab5c
   15914:	0002ab6c 	.word	0x0002ab6c
   15918:	0002ab74 	.word	0x0002ab74
   1591c:	0002ab88 	.word	0x0002ab88
   15920:	00011469 	.word	0x00011469
   15924:	0002ab90 	.word	0x0002ab90
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
   15928:	4ad0      	ldr	r2, [pc, #832]	; (15c6c <processOnSMS+0xb90>)
   1592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1592c:	0011      	movs	r1, r2
   1592e:	0018      	movs	r0, r3
   15930:	4bcf      	ldr	r3, [pc, #828]	; (15c70 <processOnSMS+0xb94>)
   15932:	4798      	blx	r3
   15934:	1e03      	subs	r3, r0, #0
   15936:	d035      	beq.n	159a4 <processOnSMS+0x8c8>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15938:	4bce      	ldr	r3, [pc, #824]	; (15c74 <processOnSMS+0xb98>)
   1593a:	795b      	ldrb	r3, [r3, #5]
   1593c:	2b00      	cmp	r3, #0
   1593e:	d101      	bne.n	15944 <processOnSMS+0x868>
   15940:	f002 f88b 	bl	17a5a <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   15944:	2330      	movs	r3, #48	; 0x30
   15946:	33ff      	adds	r3, #255	; 0xff
   15948:	2220      	movs	r2, #32
   1594a:	4694      	mov	ip, r2
   1594c:	2208      	movs	r2, #8
   1594e:	4690      	mov	r8, r2
   15950:	44b8      	add	r8, r7
   15952:	44c4      	add	ip, r8
   15954:	4463      	add	r3, ip
   15956:	2201      	movs	r2, #1
   15958:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
   1595a:	2000      	movs	r0, #0
   1595c:	4bc6      	ldr	r3, [pc, #792]	; (15c78 <processOnSMS+0xb9c>)
   1595e:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   15960:	4bc6      	ldr	r3, [pc, #792]	; (15c7c <processOnSMS+0xba0>)
   15962:	2298      	movs	r2, #152	; 0x98
   15964:	0052      	lsls	r2, r2, #1
   15966:	4694      	mov	ip, r2
   15968:	2220      	movs	r2, #32
   1596a:	4690      	mov	r8, r2
   1596c:	2208      	movs	r2, #8
   1596e:	4691      	mov	r9, r2
   15970:	44b9      	add	r9, r7
   15972:	44c8      	add	r8, r9
   15974:	44c4      	add	ip, r8
   15976:	4463      	add	r3, ip
   15978:	781b      	ldrb	r3, [r3, #0]
   1597a:	2b00      	cmp	r3, #0
   1597c:	d101      	bne.n	15982 <processOnSMS+0x8a6>
   1597e:	f002 f86c 	bl	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
   15982:	230c      	movs	r3, #12
   15984:	2220      	movs	r2, #32
   15986:	4694      	mov	ip, r2
   15988:	2208      	movs	r2, #8
   1598a:	4690      	mov	r8, r2
   1598c:	44b8      	add	r8, r7
   1598e:	44c4      	add	ip, r8
   15990:	4463      	add	r3, ip
   15992:	4abb      	ldr	r2, [pc, #748]	; (15c80 <processOnSMS+0xba4>)
   15994:	ca13      	ldmia	r2!, {r0, r1, r4}
   15996:	c313      	stmia	r3!, {r0, r1, r4}
   15998:	6811      	ldr	r1, [r2, #0]
   1599a:	6019      	str	r1, [r3, #0]
   1599c:	7912      	ldrb	r2, [r2, #4]
   1599e:	711a      	strb	r2, [r3, #4]
   159a0:	f002 f85b 	bl	17a5a <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
   159a4:	4ab7      	ldr	r2, [pc, #732]	; (15c84 <processOnSMS+0xba8>)
   159a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   159a8:	0011      	movs	r1, r2
   159aa:	0018      	movs	r0, r3
   159ac:	4bb0      	ldr	r3, [pc, #704]	; (15c70 <processOnSMS+0xb94>)
   159ae:	4798      	blx	r3
   159b0:	1e03      	subs	r3, r0, #0
   159b2:	d02f      	beq.n	15a14 <processOnSMS+0x938>
	{
		saveSinglePhasingSettings(true);
   159b4:	2001      	movs	r0, #1
   159b6:	4bb4      	ldr	r3, [pc, #720]	; (15c88 <processOnSMS+0xbac>)
   159b8:	4798      	blx	r3
		incomingSMSProcessed=true;
   159ba:	2330      	movs	r3, #48	; 0x30
   159bc:	33ff      	adds	r3, #255	; 0xff
   159be:	2220      	movs	r2, #32
   159c0:	4694      	mov	ip, r2
   159c2:	2208      	movs	r2, #8
   159c4:	4690      	mov	r8, r2
   159c6:	44b8      	add	r8, r7
   159c8:	44c4      	add	ip, r8
   159ca:	4463      	add	r3, ip
   159cc:	2201      	movs	r2, #1
   159ce:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   159d0:	4baa      	ldr	r3, [pc, #680]	; (15c7c <processOnSMS+0xba0>)
   159d2:	2298      	movs	r2, #152	; 0x98
   159d4:	0052      	lsls	r2, r2, #1
   159d6:	4694      	mov	ip, r2
   159d8:	2220      	movs	r2, #32
   159da:	4690      	mov	r8, r2
   159dc:	2208      	movs	r2, #8
   159de:	4691      	mov	r9, r2
   159e0:	44b9      	add	r9, r7
   159e2:	44c8      	add	r8, r9
   159e4:	44c4      	add	ip, r8
   159e6:	4463      	add	r3, ip
   159e8:	781b      	ldrb	r3, [r3, #0]
   159ea:	2b00      	cmp	r3, #0
   159ec:	d101      	bne.n	159f2 <processOnSMS+0x916>
   159ee:	f002 f834 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"SPP ON");
   159f2:	230c      	movs	r3, #12
   159f4:	2220      	movs	r2, #32
   159f6:	4694      	mov	ip, r2
   159f8:	2208      	movs	r2, #8
   159fa:	4690      	mov	r8, r2
   159fc:	44b8      	add	r8, r7
   159fe:	44c4      	add	ip, r8
   15a00:	4463      	add	r3, ip
   15a02:	4aa2      	ldr	r2, [pc, #648]	; (15c8c <processOnSMS+0xbb0>)
   15a04:	6811      	ldr	r1, [r2, #0]
   15a06:	6019      	str	r1, [r3, #0]
   15a08:	8891      	ldrh	r1, [r2, #4]
   15a0a:	8099      	strh	r1, [r3, #4]
   15a0c:	7992      	ldrb	r2, [r2, #6]
   15a0e:	719a      	strb	r2, [r3, #6]
   15a10:	f002 f823 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
   15a14:	4a9e      	ldr	r2, [pc, #632]	; (15c90 <processOnSMS+0xbb4>)
   15a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15a18:	0011      	movs	r1, r2
   15a1a:	0018      	movs	r0, r3
   15a1c:	4b94      	ldr	r3, [pc, #592]	; (15c70 <processOnSMS+0xb94>)
   15a1e:	4798      	blx	r3
   15a20:	1e03      	subs	r3, r0, #0
   15a22:	d02b      	beq.n	15a7c <processOnSMS+0x9a0>
	{
		saveSinglePhasingSettings(false);
   15a24:	2000      	movs	r0, #0
   15a26:	4b98      	ldr	r3, [pc, #608]	; (15c88 <processOnSMS+0xbac>)
   15a28:	4798      	blx	r3
		incomingSMSProcessed=true;
   15a2a:	2330      	movs	r3, #48	; 0x30
   15a2c:	33ff      	adds	r3, #255	; 0xff
   15a2e:	2220      	movs	r2, #32
   15a30:	4694      	mov	ip, r2
   15a32:	2208      	movs	r2, #8
   15a34:	4690      	mov	r8, r2
   15a36:	44b8      	add	r8, r7
   15a38:	44c4      	add	ip, r8
   15a3a:	4463      	add	r3, ip
   15a3c:	2201      	movs	r2, #1
   15a3e:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15a40:	4b8e      	ldr	r3, [pc, #568]	; (15c7c <processOnSMS+0xba0>)
   15a42:	2298      	movs	r2, #152	; 0x98
   15a44:	0052      	lsls	r2, r2, #1
   15a46:	4694      	mov	ip, r2
   15a48:	2220      	movs	r2, #32
   15a4a:	4690      	mov	r8, r2
   15a4c:	2208      	movs	r2, #8
   15a4e:	4691      	mov	r9, r2
   15a50:	44b9      	add	r9, r7
   15a52:	44c8      	add	r8, r9
   15a54:	44c4      	add	ip, r8
   15a56:	4463      	add	r3, ip
   15a58:	781b      	ldrb	r3, [r3, #0]
   15a5a:	2b00      	cmp	r3, #0
   15a5c:	d101      	bne.n	15a62 <processOnSMS+0x986>
   15a5e:	f001 fffc 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"SPP OFF");
   15a62:	230c      	movs	r3, #12
   15a64:	2220      	movs	r2, #32
   15a66:	4694      	mov	ip, r2
   15a68:	2208      	movs	r2, #8
   15a6a:	4690      	mov	r8, r2
   15a6c:	44b8      	add	r8, r7
   15a6e:	44c4      	add	ip, r8
   15a70:	4463      	add	r3, ip
   15a72:	4a88      	ldr	r2, [pc, #544]	; (15c94 <processOnSMS+0xbb8>)
   15a74:	ca03      	ldmia	r2!, {r0, r1}
   15a76:	c303      	stmia	r3!, {r0, r1}
   15a78:	f001 ffef 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
   15a7c:	4a86      	ldr	r2, [pc, #536]	; (15c98 <processOnSMS+0xbbc>)
   15a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15a80:	0011      	movs	r1, r2
   15a82:	0018      	movs	r0, r3
   15a84:	4b7a      	ldr	r3, [pc, #488]	; (15c70 <processOnSMS+0xb94>)
   15a86:	4798      	blx	r3
   15a88:	1e03      	subs	r3, r0, #0
   15a8a:	d100      	bne.n	15a8e <processOnSMS+0x9b2>
   15a8c:	e083      	b.n	15b96 <processOnSMS+0xaba>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   15a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15a90:	1d1c      	adds	r4, r3, #4
   15a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15a94:	0018      	movs	r0, r3
   15a96:	4b81      	ldr	r3, [pc, #516]	; (15c9c <processOnSMS+0xbc0>)
   15a98:	4798      	blx	r3
   15a9a:	0002      	movs	r2, r0
   15a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15a9e:	0021      	movs	r1, r4
   15aa0:	0018      	movs	r0, r3
   15aa2:	4b7f      	ldr	r3, [pc, #508]	; (15ca0 <processOnSMS+0xbc4>)
   15aa4:	4798      	blx	r3
		uint16_t sppVoltage = atoi(received_command);
   15aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15aa8:	0018      	movs	r0, r3
   15aaa:	4b7e      	ldr	r3, [pc, #504]	; (15ca4 <processOnSMS+0xbc8>)
   15aac:	4798      	blx	r3
   15aae:	0002      	movs	r2, r0
   15ab0:	2396      	movs	r3, #150	; 0x96
   15ab2:	005b      	lsls	r3, r3, #1
   15ab4:	2120      	movs	r1, #32
   15ab6:	468c      	mov	ip, r1
   15ab8:	2108      	movs	r1, #8
   15aba:	4688      	mov	r8, r1
   15abc:	44b8      	add	r8, r7
   15abe:	44c4      	add	ip, r8
   15ac0:	4463      	add	r3, ip
   15ac2:	801a      	strh	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
   15ac4:	2396      	movs	r3, #150	; 0x96
   15ac6:	005b      	lsls	r3, r3, #1
   15ac8:	2220      	movs	r2, #32
   15aca:	4694      	mov	ip, r2
   15acc:	2208      	movs	r2, #8
   15ace:	4690      	mov	r8, r2
   15ad0:	44b8      	add	r8, r7
   15ad2:	44c4      	add	ip, r8
   15ad4:	4463      	add	r3, ip
   15ad6:	881b      	ldrh	r3, [r3, #0]
   15ad8:	2b13      	cmp	r3, #19
   15ada:	d80a      	bhi.n	15af2 <processOnSMS+0xa16>
   15adc:	2396      	movs	r3, #150	; 0x96
   15ade:	005b      	lsls	r3, r3, #1
   15ae0:	2220      	movs	r2, #32
   15ae2:	4694      	mov	ip, r2
   15ae4:	2208      	movs	r2, #8
   15ae6:	4690      	mov	r8, r2
   15ae8:	44b8      	add	r8, r7
   15aea:	44c4      	add	ip, r8
   15aec:	4463      	add	r3, ip
   15aee:	2214      	movs	r2, #20
   15af0:	801a      	strh	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
   15af2:	2396      	movs	r3, #150	; 0x96
   15af4:	005b      	lsls	r3, r3, #1
   15af6:	2220      	movs	r2, #32
   15af8:	4694      	mov	ip, r2
   15afa:	2208      	movs	r2, #8
   15afc:	4690      	mov	r8, r2
   15afe:	44b8      	add	r8, r7
   15b00:	44c4      	add	ip, r8
   15b02:	4463      	add	r3, ip
   15b04:	881a      	ldrh	r2, [r3, #0]
   15b06:	23dc      	movs	r3, #220	; 0xdc
   15b08:	005b      	lsls	r3, r3, #1
   15b0a:	429a      	cmp	r2, r3
   15b0c:	d90b      	bls.n	15b26 <processOnSMS+0xa4a>
   15b0e:	2396      	movs	r3, #150	; 0x96
   15b10:	005b      	lsls	r3, r3, #1
   15b12:	2220      	movs	r2, #32
   15b14:	4694      	mov	ip, r2
   15b16:	2208      	movs	r2, #8
   15b18:	4690      	mov	r8, r2
   15b1a:	44b8      	add	r8, r7
   15b1c:	44c4      	add	ip, r8
   15b1e:	4463      	add	r3, ip
   15b20:	22dc      	movs	r2, #220	; 0xdc
   15b22:	0052      	lsls	r2, r2, #1
   15b24:	801a      	strh	r2, [r3, #0]
		saveSinglePhasingVoltage(sppVoltage);
   15b26:	2396      	movs	r3, #150	; 0x96
   15b28:	005b      	lsls	r3, r3, #1
   15b2a:	2220      	movs	r2, #32
   15b2c:	4694      	mov	ip, r2
   15b2e:	2208      	movs	r2, #8
   15b30:	4690      	mov	r8, r2
   15b32:	44b8      	add	r8, r7
   15b34:	44c4      	add	ip, r8
   15b36:	4463      	add	r3, ip
   15b38:	881b      	ldrh	r3, [r3, #0]
   15b3a:	0018      	movs	r0, r3
   15b3c:	4b5a      	ldr	r3, [pc, #360]	; (15ca8 <processOnSMS+0xbcc>)
   15b3e:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15b40:	2330      	movs	r3, #48	; 0x30
   15b42:	33ff      	adds	r3, #255	; 0xff
   15b44:	2220      	movs	r2, #32
   15b46:	4694      	mov	ip, r2
   15b48:	2208      	movs	r2, #8
   15b4a:	4690      	mov	r8, r2
   15b4c:	44b8      	add	r8, r7
   15b4e:	44c4      	add	ip, r8
   15b50:	4463      	add	r3, ip
   15b52:	2201      	movs	r2, #1
   15b54:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
   15b56:	4b49      	ldr	r3, [pc, #292]	; (15c7c <processOnSMS+0xba0>)
   15b58:	2298      	movs	r2, #152	; 0x98
   15b5a:	0052      	lsls	r2, r2, #1
   15b5c:	4694      	mov	ip, r2
   15b5e:	2220      	movs	r2, #32
   15b60:	4690      	mov	r8, r2
   15b62:	2208      	movs	r2, #8
   15b64:	4691      	mov	r9, r2
   15b66:	44b9      	add	r9, r7
   15b68:	44c8      	add	r8, r9
   15b6a:	44c4      	add	ip, r8
   15b6c:	4463      	add	r3, ip
   15b6e:	781b      	ldrb	r3, [r3, #0]
   15b70:	2b00      	cmp	r3, #0
   15b72:	d101      	bne.n	15b78 <processOnSMS+0xa9c>
   15b74:	f001 ff71 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"SPP VOLT SET");
   15b78:	230c      	movs	r3, #12
   15b7a:	2220      	movs	r2, #32
   15b7c:	4694      	mov	ip, r2
   15b7e:	2208      	movs	r2, #8
   15b80:	4690      	mov	r8, r2
   15b82:	44b8      	add	r8, r7
   15b84:	44c4      	add	ip, r8
   15b86:	4463      	add	r3, ip
   15b88:	4a48      	ldr	r2, [pc, #288]	; (15cac <processOnSMS+0xbd0>)
   15b8a:	ca13      	ldmia	r2!, {r0, r1, r4}
   15b8c:	c313      	stmia	r3!, {r0, r1, r4}
   15b8e:	7812      	ldrb	r2, [r2, #0]
   15b90:	701a      	strb	r2, [r3, #0]
   15b92:	f001 ff62 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
   15b96:	4a46      	ldr	r2, [pc, #280]	; (15cb0 <processOnSMS+0xbd4>)
   15b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15b9a:	0011      	movs	r1, r2
   15b9c:	0018      	movs	r0, r3
   15b9e:	4b34      	ldr	r3, [pc, #208]	; (15c70 <processOnSMS+0xb94>)
   15ba0:	4798      	blx	r3
   15ba2:	1e03      	subs	r3, r0, #0
   15ba4:	d02b      	beq.n	15bfe <processOnSMS+0xb22>
	{
		savePhaseSequenceProtectionSettings(true);
   15ba6:	2001      	movs	r0, #1
   15ba8:	4b42      	ldr	r3, [pc, #264]	; (15cb4 <processOnSMS+0xbd8>)
   15baa:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15bac:	2330      	movs	r3, #48	; 0x30
   15bae:	33ff      	adds	r3, #255	; 0xff
   15bb0:	2220      	movs	r2, #32
   15bb2:	4694      	mov	ip, r2
   15bb4:	2208      	movs	r2, #8
   15bb6:	4690      	mov	r8, r2
   15bb8:	44b8      	add	r8, r7
   15bba:	44c4      	add	ip, r8
   15bbc:	4463      	add	r3, ip
   15bbe:	2201      	movs	r2, #1
   15bc0:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15bc2:	4b2e      	ldr	r3, [pc, #184]	; (15c7c <processOnSMS+0xba0>)
   15bc4:	2298      	movs	r2, #152	; 0x98
   15bc6:	0052      	lsls	r2, r2, #1
   15bc8:	4694      	mov	ip, r2
   15bca:	2220      	movs	r2, #32
   15bcc:	4690      	mov	r8, r2
   15bce:	2208      	movs	r2, #8
   15bd0:	4691      	mov	r9, r2
   15bd2:	44b9      	add	r9, r7
   15bd4:	44c8      	add	r8, r9
   15bd6:	44c4      	add	ip, r8
   15bd8:	4463      	add	r3, ip
   15bda:	781b      	ldrb	r3, [r3, #0]
   15bdc:	2b00      	cmp	r3, #0
   15bde:	d101      	bne.n	15be4 <processOnSMS+0xb08>
   15be0:	f001 ff3b 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"SEQP ON");
   15be4:	230c      	movs	r3, #12
   15be6:	2220      	movs	r2, #32
   15be8:	4694      	mov	ip, r2
   15bea:	2208      	movs	r2, #8
   15bec:	4690      	mov	r8, r2
   15bee:	44b8      	add	r8, r7
   15bf0:	44c4      	add	ip, r8
   15bf2:	4463      	add	r3, ip
   15bf4:	4a30      	ldr	r2, [pc, #192]	; (15cb8 <processOnSMS+0xbdc>)
   15bf6:	ca03      	ldmia	r2!, {r0, r1}
   15bf8:	c303      	stmia	r3!, {r0, r1}
   15bfa:	f001 ff2e 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
   15bfe:	4a2f      	ldr	r2, [pc, #188]	; (15cbc <processOnSMS+0xbe0>)
   15c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15c02:	0011      	movs	r1, r2
   15c04:	0018      	movs	r0, r3
   15c06:	4b1a      	ldr	r3, [pc, #104]	; (15c70 <processOnSMS+0xb94>)
   15c08:	4798      	blx	r3
   15c0a:	1e03      	subs	r3, r0, #0
   15c0c:	d05a      	beq.n	15cc4 <processOnSMS+0xbe8>
	{
		savePhaseSequenceProtectionSettings(false);
   15c0e:	2000      	movs	r0, #0
   15c10:	4b28      	ldr	r3, [pc, #160]	; (15cb4 <processOnSMS+0xbd8>)
   15c12:	4798      	blx	r3

		incomingSMSProcessed=true;
   15c14:	2330      	movs	r3, #48	; 0x30
   15c16:	33ff      	adds	r3, #255	; 0xff
   15c18:	2220      	movs	r2, #32
   15c1a:	4694      	mov	ip, r2
   15c1c:	2208      	movs	r2, #8
   15c1e:	4690      	mov	r8, r2
   15c20:	44b8      	add	r8, r7
   15c22:	44c4      	add	ip, r8
   15c24:	4463      	add	r3, ip
   15c26:	2201      	movs	r2, #1
   15c28:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15c2a:	4b14      	ldr	r3, [pc, #80]	; (15c7c <processOnSMS+0xba0>)
   15c2c:	2298      	movs	r2, #152	; 0x98
   15c2e:	0052      	lsls	r2, r2, #1
   15c30:	4694      	mov	ip, r2
   15c32:	2220      	movs	r2, #32
   15c34:	4690      	mov	r8, r2
   15c36:	2208      	movs	r2, #8
   15c38:	4691      	mov	r9, r2
   15c3a:	44b9      	add	r9, r7
   15c3c:	44c8      	add	r8, r9
   15c3e:	44c4      	add	ip, r8
   15c40:	4463      	add	r3, ip
   15c42:	781b      	ldrb	r3, [r3, #0]
   15c44:	2b00      	cmp	r3, #0
   15c46:	d101      	bne.n	15c4c <processOnSMS+0xb70>
   15c48:	f001 ff07 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"SEQP OFF");
   15c4c:	230c      	movs	r3, #12
   15c4e:	2220      	movs	r2, #32
   15c50:	4694      	mov	ip, r2
   15c52:	2208      	movs	r2, #8
   15c54:	4690      	mov	r8, r2
   15c56:	44b8      	add	r8, r7
   15c58:	44c4      	add	ip, r8
   15c5a:	4463      	add	r3, ip
   15c5c:	4a18      	ldr	r2, [pc, #96]	; (15cc0 <processOnSMS+0xbe4>)
   15c5e:	ca03      	ldmia	r2!, {r0, r1}
   15c60:	c303      	stmia	r3!, {r0, r1}
   15c62:	7812      	ldrb	r2, [r2, #0]
   15c64:	701a      	strb	r2, [r3, #0]
   15c66:	f001 fef8 	bl	17a5a <processOnSMS+0x297e>
   15c6a:	46c0      	nop			; (mov r8, r8)
   15c6c:	0002aba0 	.word	0x0002aba0
   15c70:	0001420d 	.word	0x0001420d
   15c74:	2000082c 	.word	0x2000082c
   15c78:	00011469 	.word	0x00011469
   15c7c:	fffffed2 	.word	0xfffffed2
   15c80:	0002aba8 	.word	0x0002aba8
   15c84:	0002abbc 	.word	0x0002abbc
   15c88:	000115e1 	.word	0x000115e1
   15c8c:	0002abc4 	.word	0x0002abc4
   15c90:	0002abcc 	.word	0x0002abcc
   15c94:	0002abd4 	.word	0x0002abd4
   15c98:	0002abdc 	.word	0x0002abdc
   15c9c:	000299eb 	.word	0x000299eb
   15ca0:	00029737 	.word	0x00029737
   15ca4:	00029641 	.word	0x00029641
   15ca8:	0001162d 	.word	0x0001162d
   15cac:	0002abe4 	.word	0x0002abe4
   15cb0:	0002abf4 	.word	0x0002abf4
   15cb4:	00011679 	.word	0x00011679
   15cb8:	0002abfc 	.word	0x0002abfc
   15cbc:	0002ac04 	.word	0x0002ac04
   15cc0:	0002ac0c 	.word	0x0002ac0c
		}
	}
	else if (StringstartsWith(received_command,"DND"))
   15cc4:	4aed      	ldr	r2, [pc, #948]	; (1607c <processOnSMS+0xfa0>)
   15cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15cc8:	0011      	movs	r1, r2
   15cca:	0018      	movs	r0, r3
   15ccc:	4bec      	ldr	r3, [pc, #944]	; (16080 <processOnSMS+0xfa4>)
   15cce:	4798      	blx	r3
   15cd0:	1e03      	subs	r3, r0, #0
   15cd2:	d100      	bne.n	15cd6 <processOnSMS+0xbfa>
   15cd4:	e07e      	b.n	15dd4 <processOnSMS+0xcf8>
	{
		if (strlen(received_command)>3)
   15cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15cd8:	0018      	movs	r0, r3
   15cda:	4bea      	ldr	r3, [pc, #936]	; (16084 <processOnSMS+0xfa8>)
   15cdc:	4798      	blx	r3
   15cde:	0003      	movs	r3, r0
   15ce0:	2b03      	cmp	r3, #3
   15ce2:	d801      	bhi.n	15ce8 <processOnSMS+0xc0c>
   15ce4:	f001 feb9 	bl	17a5a <processOnSMS+0x297e>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   15ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15cea:	1cdc      	adds	r4, r3, #3
   15cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15cee:	0018      	movs	r0, r3
   15cf0:	4be4      	ldr	r3, [pc, #912]	; (16084 <processOnSMS+0xfa8>)
   15cf2:	4798      	blx	r3
   15cf4:	0002      	movs	r2, r0
   15cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15cf8:	0021      	movs	r1, r4
   15cfa:	0018      	movs	r0, r3
   15cfc:	4be2      	ldr	r3, [pc, #904]	; (16088 <processOnSMS+0xfac>)
   15cfe:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
   15d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d02:	781b      	ldrb	r3, [r3, #0]
   15d04:	2b4c      	cmp	r3, #76	; 0x4c
   15d06:	d009      	beq.n	15d1c <processOnSMS+0xc40>
   15d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d0a:	781b      	ldrb	r3, [r3, #0]
   15d0c:	2b53      	cmp	r3, #83	; 0x53
   15d0e:	d005      	beq.n	15d1c <processOnSMS+0xc40>
   15d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d12:	781b      	ldrb	r3, [r3, #0]
   15d14:	2b4f      	cmp	r3, #79	; 0x4f
   15d16:	d001      	beq.n	15d1c <processOnSMS+0xc40>
   15d18:	f001 fe9f 	bl	17a5a <processOnSMS+0x297e>
			{
				saveDNDSettings((char)received_command[0]);  //save specific RESPONSE settings
   15d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d1e:	781b      	ldrb	r3, [r3, #0]
   15d20:	0018      	movs	r0, r3
   15d22:	4bda      	ldr	r3, [pc, #872]	; (1608c <processOnSMS+0xfb0>)
   15d24:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15d26:	2330      	movs	r3, #48	; 0x30
   15d28:	33ff      	adds	r3, #255	; 0xff
   15d2a:	2220      	movs	r2, #32
   15d2c:	4694      	mov	ip, r2
   15d2e:	2208      	movs	r2, #8
   15d30:	4690      	mov	r8, r2
   15d32:	44b8      	add	r8, r7
   15d34:	44c4      	add	ip, r8
   15d36:	4463      	add	r3, ip
   15d38:	2201      	movs	r2, #1
   15d3a:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15d3c:	4bd4      	ldr	r3, [pc, #848]	; (16090 <processOnSMS+0xfb4>)
   15d3e:	2298      	movs	r2, #152	; 0x98
   15d40:	0052      	lsls	r2, r2, #1
   15d42:	4694      	mov	ip, r2
   15d44:	2220      	movs	r2, #32
   15d46:	4690      	mov	r8, r2
   15d48:	2208      	movs	r2, #8
   15d4a:	4691      	mov	r9, r2
   15d4c:	44b9      	add	r9, r7
   15d4e:	44c8      	add	r8, r9
   15d50:	44c4      	add	ip, r8
   15d52:	4463      	add	r3, ip
   15d54:	781b      	ldrb	r3, [r3, #0]
   15d56:	2b00      	cmp	r3, #0
   15d58:	d101      	bne.n	15d5e <processOnSMS+0xc82>
   15d5a:	f001 fe7e 	bl	17a5a <processOnSMS+0x297e>
				{
					strcpy(resep_msg,"DND : ");
   15d5e:	230c      	movs	r3, #12
   15d60:	2220      	movs	r2, #32
   15d62:	4694      	mov	ip, r2
   15d64:	2208      	movs	r2, #8
   15d66:	4690      	mov	r8, r2
   15d68:	44b8      	add	r8, r7
   15d6a:	44c4      	add	ip, r8
   15d6c:	4463      	add	r3, ip
   15d6e:	4ac9      	ldr	r2, [pc, #804]	; (16094 <processOnSMS+0xfb8>)
   15d70:	6811      	ldr	r1, [r2, #0]
   15d72:	6019      	str	r1, [r3, #0]
   15d74:	8891      	ldrh	r1, [r2, #4]
   15d76:	8099      	strh	r1, [r3, #4]
   15d78:	7992      	ldrb	r2, [r2, #6]
   15d7a:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
   15d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15d7e:	230c      	movs	r3, #12
   15d80:	2120      	movs	r1, #32
   15d82:	468c      	mov	ip, r1
   15d84:	2108      	movs	r1, #8
   15d86:	4688      	mov	r8, r1
   15d88:	44b8      	add	r8, r7
   15d8a:	44c4      	add	ip, r8
   15d8c:	4463      	add	r3, ip
   15d8e:	0011      	movs	r1, r2
   15d90:	0018      	movs	r0, r3
   15d92:	4bc1      	ldr	r3, [pc, #772]	; (16098 <processOnSMS+0xfbc>)
   15d94:	4798      	blx	r3
					strcat(resep_msg," OK");
   15d96:	230c      	movs	r3, #12
   15d98:	2220      	movs	r2, #32
   15d9a:	4694      	mov	ip, r2
   15d9c:	2208      	movs	r2, #8
   15d9e:	4690      	mov	r8, r2
   15da0:	44b8      	add	r8, r7
   15da2:	44c4      	add	ip, r8
   15da4:	4463      	add	r3, ip
   15da6:	0018      	movs	r0, r3
   15da8:	4bb6      	ldr	r3, [pc, #728]	; (16084 <processOnSMS+0xfa8>)
   15daa:	4798      	blx	r3
   15dac:	0003      	movs	r3, r0
   15dae:	001a      	movs	r2, r3
   15db0:	230c      	movs	r3, #12
   15db2:	2120      	movs	r1, #32
   15db4:	468c      	mov	ip, r1
   15db6:	2108      	movs	r1, #8
   15db8:	4688      	mov	r8, r1
   15dba:	44b8      	add	r8, r7
   15dbc:	44c4      	add	ip, r8
   15dbe:	4463      	add	r3, ip
   15dc0:	189a      	adds	r2, r3, r2
   15dc2:	4bb6      	ldr	r3, [pc, #728]	; (1609c <processOnSMS+0xfc0>)
   15dc4:	0010      	movs	r0, r2
   15dc6:	0019      	movs	r1, r3
   15dc8:	2304      	movs	r3, #4
   15dca:	001a      	movs	r2, r3
   15dcc:	4bb4      	ldr	r3, [pc, #720]	; (160a0 <processOnSMS+0xfc4>)
   15dce:	4798      	blx	r3
   15dd0:	f001 fe43 	bl	17a5a <processOnSMS+0x297e>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
   15dd4:	4ab3      	ldr	r2, [pc, #716]	; (160a4 <processOnSMS+0xfc8>)
   15dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15dd8:	0011      	movs	r1, r2
   15dda:	0018      	movs	r0, r3
   15ddc:	4ba8      	ldr	r3, [pc, #672]	; (16080 <processOnSMS+0xfa4>)
   15dde:	4798      	blx	r3
   15de0:	1e03      	subs	r3, r0, #0
   15de2:	d100      	bne.n	15de6 <processOnSMS+0xd0a>
   15de4:	e08d      	b.n	15f02 <processOnSMS+0xe26>
	{
		if (strlen(received_command)>4)
   15de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15de8:	0018      	movs	r0, r3
   15dea:	4ba6      	ldr	r3, [pc, #664]	; (16084 <processOnSMS+0xfa8>)
   15dec:	4798      	blx	r3
   15dee:	0003      	movs	r3, r0
   15df0:	2b04      	cmp	r3, #4
   15df2:	d801      	bhi.n	15df8 <processOnSMS+0xd1c>
   15df4:	f001 fe31 	bl	17a5a <processOnSMS+0x297e>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15dfa:	1d1c      	adds	r4, r3, #4
   15dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15dfe:	0018      	movs	r0, r3
   15e00:	4ba0      	ldr	r3, [pc, #640]	; (16084 <processOnSMS+0xfa8>)
   15e02:	4798      	blx	r3
   15e04:	0002      	movs	r2, r0
   15e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e08:	0021      	movs	r1, r4
   15e0a:	0018      	movs	r0, r3
   15e0c:	4b9e      	ldr	r3, [pc, #632]	; (16088 <processOnSMS+0xfac>)
   15e0e:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
   15e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e12:	0018      	movs	r0, r3
   15e14:	4ba4      	ldr	r3, [pc, #656]	; (160a8 <processOnSMS+0xfcc>)
   15e16:	4798      	blx	r3
   15e18:	0002      	movs	r2, r0
   15e1a:	232c      	movs	r3, #44	; 0x2c
   15e1c:	33ff      	adds	r3, #255	; 0xff
   15e1e:	2120      	movs	r1, #32
   15e20:	468c      	mov	ip, r1
   15e22:	2108      	movs	r1, #8
   15e24:	4688      	mov	r8, r1
   15e26:	44b8      	add	r8, r7
   15e28:	44c4      	add	ip, r8
   15e2a:	4463      	add	r3, ip
   15e2c:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
   15e2e:	232c      	movs	r3, #44	; 0x2c
   15e30:	33ff      	adds	r3, #255	; 0xff
   15e32:	2220      	movs	r2, #32
   15e34:	4694      	mov	ip, r2
   15e36:	2208      	movs	r2, #8
   15e38:	4690      	mov	r8, r2
   15e3a:	44b8      	add	r8, r7
   15e3c:	44c4      	add	ip, r8
   15e3e:	4463      	add	r3, ip
   15e40:	781b      	ldrb	r3, [r3, #0]
   15e42:	2b02      	cmp	r3, #2
   15e44:	d901      	bls.n	15e4a <processOnSMS+0xd6e>
   15e46:	f001 fe08 	bl	17a5a <processOnSMS+0x297e>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
   15e4a:	232c      	movs	r3, #44	; 0x2c
   15e4c:	33ff      	adds	r3, #255	; 0xff
   15e4e:	2220      	movs	r2, #32
   15e50:	4694      	mov	ip, r2
   15e52:	2208      	movs	r2, #8
   15e54:	4690      	mov	r8, r2
   15e56:	44b8      	add	r8, r7
   15e58:	44c4      	add	ip, r8
   15e5a:	4463      	add	r3, ip
   15e5c:	781b      	ldrb	r3, [r3, #0]
   15e5e:	2b01      	cmp	r3, #1
   15e60:	d10e      	bne.n	15e80 <processOnSMS+0xda4>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
   15e62:	4b92      	ldr	r3, [pc, #584]	; (160ac <processOnSMS+0xfd0>)
   15e64:	785b      	ldrb	r3, [r3, #1]
   15e66:	2b00      	cmp	r3, #0
   15e68:	d10a      	bne.n	15e80 <processOnSMS+0xda4>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
   15e6a:	232c      	movs	r3, #44	; 0x2c
   15e6c:	33ff      	adds	r3, #255	; 0xff
   15e6e:	2220      	movs	r2, #32
   15e70:	4694      	mov	ip, r2
   15e72:	2208      	movs	r2, #8
   15e74:	4690      	mov	r8, r2
   15e76:	44b8      	add	r8, r7
   15e78:	44c4      	add	ip, r8
   15e7a:	4463      	add	r3, ip
   15e7c:	2200      	movs	r2, #0
   15e7e:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
   15e80:	232c      	movs	r3, #44	; 0x2c
   15e82:	33ff      	adds	r3, #255	; 0xff
   15e84:	2220      	movs	r2, #32
   15e86:	4694      	mov	ip, r2
   15e88:	2208      	movs	r2, #8
   15e8a:	4690      	mov	r8, r2
   15e8c:	44b8      	add	r8, r7
   15e8e:	44c4      	add	ip, r8
   15e90:	4463      	add	r3, ip
   15e92:	781b      	ldrb	r3, [r3, #0]
   15e94:	0018      	movs	r0, r3
   15e96:	4b86      	ldr	r3, [pc, #536]	; (160b0 <processOnSMS+0xfd4>)
   15e98:	4798      	blx	r3
				incomingSMSProcessed=true;
   15e9a:	2330      	movs	r3, #48	; 0x30
   15e9c:	33ff      	adds	r3, #255	; 0xff
   15e9e:	2220      	movs	r2, #32
   15ea0:	4694      	mov	ip, r2
   15ea2:	2208      	movs	r2, #8
   15ea4:	4690      	mov	r8, r2
   15ea6:	44b8      	add	r8, r7
   15ea8:	44c4      	add	ip, r8
   15eaa:	4463      	add	r3, ip
   15eac:	2201      	movs	r2, #1
   15eae:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15eb0:	4b77      	ldr	r3, [pc, #476]	; (16090 <processOnSMS+0xfb4>)
   15eb2:	2298      	movs	r2, #152	; 0x98
   15eb4:	0052      	lsls	r2, r2, #1
   15eb6:	4694      	mov	ip, r2
   15eb8:	2220      	movs	r2, #32
   15eba:	4690      	mov	r8, r2
   15ebc:	2208      	movs	r2, #8
   15ebe:	4691      	mov	r9, r2
   15ec0:	44b9      	add	r9, r7
   15ec2:	44c8      	add	r8, r9
   15ec4:	44c4      	add	ip, r8
   15ec6:	4463      	add	r3, ip
   15ec8:	781b      	ldrb	r3, [r3, #0]
   15eca:	2b00      	cmp	r3, #0
   15ecc:	d101      	bne.n	15ed2 <processOnSMS+0xdf6>
   15ece:	f001 fdc4 	bl	17a5a <processOnSMS+0x297e>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
   15ed2:	232c      	movs	r3, #44	; 0x2c
   15ed4:	33ff      	adds	r3, #255	; 0xff
   15ed6:	2220      	movs	r2, #32
   15ed8:	4694      	mov	ip, r2
   15eda:	2208      	movs	r2, #8
   15edc:	4690      	mov	r8, r2
   15ede:	44b8      	add	r8, r7
   15ee0:	44c4      	add	ip, r8
   15ee2:	4463      	add	r3, ip
   15ee4:	781a      	ldrb	r2, [r3, #0]
   15ee6:	4973      	ldr	r1, [pc, #460]	; (160b4 <processOnSMS+0xfd8>)
   15ee8:	230c      	movs	r3, #12
   15eea:	2020      	movs	r0, #32
   15eec:	4684      	mov	ip, r0
   15eee:	2008      	movs	r0, #8
   15ef0:	4680      	mov	r8, r0
   15ef2:	44b8      	add	r8, r7
   15ef4:	44c4      	add	ip, r8
   15ef6:	4463      	add	r3, ip
   15ef8:	0018      	movs	r0, r3
   15efa:	4b6f      	ldr	r3, [pc, #444]	; (160b8 <processOnSMS+0xfdc>)
   15efc:	4798      	blx	r3
   15efe:	f001 fdac 	bl	17a5a <processOnSMS+0x297e>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"UOMETHOD"))
   15f02:	4a6e      	ldr	r2, [pc, #440]	; (160bc <processOnSMS+0xfe0>)
   15f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15f06:	0011      	movs	r1, r2
   15f08:	0018      	movs	r0, r3
   15f0a:	4b5d      	ldr	r3, [pc, #372]	; (16080 <processOnSMS+0xfa4>)
   15f0c:	4798      	blx	r3
   15f0e:	1e03      	subs	r3, r0, #0
   15f10:	d100      	bne.n	15f14 <processOnSMS+0xe38>
   15f12:	e0d9      	b.n	160c8 <processOnSMS+0xfec>
	{
		if (strlen(received_command)>8)
   15f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15f16:	0018      	movs	r0, r3
   15f18:	4b5a      	ldr	r3, [pc, #360]	; (16084 <processOnSMS+0xfa8>)
   15f1a:	4798      	blx	r3
   15f1c:	0003      	movs	r3, r0
   15f1e:	2b08      	cmp	r3, #8
   15f20:	d801      	bhi.n	15f26 <processOnSMS+0xe4a>
   15f22:	f001 fd9a 	bl	17a5a <processOnSMS+0x297e>
		{
			memmove(received_command,received_command+8,strlen(received_command));
   15f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15f28:	3308      	adds	r3, #8
   15f2a:	001c      	movs	r4, r3
   15f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15f2e:	0018      	movs	r0, r3
   15f30:	4b54      	ldr	r3, [pc, #336]	; (16084 <processOnSMS+0xfa8>)
   15f32:	4798      	blx	r3
   15f34:	0002      	movs	r2, r0
   15f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15f38:	0021      	movs	r1, r4
   15f3a:	0018      	movs	r0, r3
   15f3c:	4b52      	ldr	r3, [pc, #328]	; (16088 <processOnSMS+0xfac>)
   15f3e:	4798      	blx	r3
			
			if(factory_settings_parameter_struct.ENABLE_CURRENT)
   15f40:	4b5a      	ldr	r3, [pc, #360]	; (160ac <processOnSMS+0xfd0>)
   15f42:	785b      	ldrb	r3, [r3, #1]
   15f44:	2b00      	cmp	r3, #0
   15f46:	d101      	bne.n	15f4c <processOnSMS+0xe70>
   15f48:	f001 fd87 	bl	17a5a <processOnSMS+0x297e>
			{
				uint8_t detectionMethod=0;
   15f4c:	2395      	movs	r3, #149	; 0x95
   15f4e:	005b      	lsls	r3, r3, #1
   15f50:	2220      	movs	r2, #32
   15f52:	4694      	mov	ip, r2
   15f54:	2208      	movs	r2, #8
   15f56:	4690      	mov	r8, r2
   15f58:	44b8      	add	r8, r7
   15f5a:	44c4      	add	ip, r8
   15f5c:	4463      	add	r3, ip
   15f5e:	2200      	movs	r2, #0
   15f60:	701a      	strb	r2, [r3, #0]
				if(received_command[0]=='C')
   15f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15f64:	781b      	ldrb	r3, [r3, #0]
   15f66:	2b43      	cmp	r3, #67	; 0x43
   15f68:	d10b      	bne.n	15f82 <processOnSMS+0xea6>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_CURRENT;
   15f6a:	2395      	movs	r3, #149	; 0x95
   15f6c:	005b      	lsls	r3, r3, #1
   15f6e:	2220      	movs	r2, #32
   15f70:	4694      	mov	ip, r2
   15f72:	2208      	movs	r2, #8
   15f74:	4690      	mov	r8, r2
   15f76:	44b8      	add	r8, r7
   15f78:	44c4      	add	ip, r8
   15f7a:	4463      	add	r3, ip
   15f7c:	2202      	movs	r2, #2
   15f7e:	701a      	strb	r2, [r3, #0]
   15f80:	e00e      	b.n	15fa0 <processOnSMS+0xec4>
				}
				else if(received_command[0]=='P')
   15f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15f84:	781b      	ldrb	r3, [r3, #0]
   15f86:	2b50      	cmp	r3, #80	; 0x50
   15f88:	d10a      	bne.n	15fa0 <processOnSMS+0xec4>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_POWER;
   15f8a:	2395      	movs	r3, #149	; 0x95
   15f8c:	005b      	lsls	r3, r3, #1
   15f8e:	2220      	movs	r2, #32
   15f90:	4694      	mov	ip, r2
   15f92:	2208      	movs	r2, #8
   15f94:	4690      	mov	r8, r2
   15f96:	44b8      	add	r8, r7
   15f98:	44c4      	add	ip, r8
   15f9a:	4463      	add	r3, ip
   15f9c:	2201      	movs	r2, #1
   15f9e:	701a      	strb	r2, [r3, #0]
				}
				
				if(detectionMethod!=0)
   15fa0:	2395      	movs	r3, #149	; 0x95
   15fa2:	005b      	lsls	r3, r3, #1
   15fa4:	2220      	movs	r2, #32
   15fa6:	4694      	mov	ip, r2
   15fa8:	2208      	movs	r2, #8
   15faa:	4690      	mov	r8, r2
   15fac:	44b8      	add	r8, r7
   15fae:	44c4      	add	ip, r8
   15fb0:	4463      	add	r3, ip
   15fb2:	781b      	ldrb	r3, [r3, #0]
   15fb4:	2b00      	cmp	r3, #0
   15fb6:	d101      	bne.n	15fbc <processOnSMS+0xee0>
   15fb8:	f001 fd4f 	bl	17a5a <processOnSMS+0x297e>
				{
					saveUnderOverDetectionMethodSettings(detectionMethod);
   15fbc:	2395      	movs	r3, #149	; 0x95
   15fbe:	005b      	lsls	r3, r3, #1
   15fc0:	2220      	movs	r2, #32
   15fc2:	4694      	mov	ip, r2
   15fc4:	2208      	movs	r2, #8
   15fc6:	4690      	mov	r8, r2
   15fc8:	44b8      	add	r8, r7
   15fca:	44c4      	add	ip, r8
   15fcc:	4463      	add	r3, ip
   15fce:	781b      	ldrb	r3, [r3, #0]
   15fd0:	0018      	movs	r0, r3
   15fd2:	4b3b      	ldr	r3, [pc, #236]	; (160c0 <processOnSMS+0xfe4>)
   15fd4:	4798      	blx	r3
					incomingSMSProcessed=true;
   15fd6:	2330      	movs	r3, #48	; 0x30
   15fd8:	33ff      	adds	r3, #255	; 0xff
   15fda:	2220      	movs	r2, #32
   15fdc:	4694      	mov	ip, r2
   15fde:	2208      	movs	r2, #8
   15fe0:	4690      	mov	r8, r2
   15fe2:	44b8      	add	r8, r7
   15fe4:	44c4      	add	ip, r8
   15fe6:	4463      	add	r3, ip
   15fe8:	2201      	movs	r2, #1
   15fea:	701a      	strb	r2, [r3, #0]
					if (response_sms_processed_cmd == true)
   15fec:	4b28      	ldr	r3, [pc, #160]	; (16090 <processOnSMS+0xfb4>)
   15fee:	2298      	movs	r2, #152	; 0x98
   15ff0:	0052      	lsls	r2, r2, #1
   15ff2:	4694      	mov	ip, r2
   15ff4:	2220      	movs	r2, #32
   15ff6:	4690      	mov	r8, r2
   15ff8:	2208      	movs	r2, #8
   15ffa:	4691      	mov	r9, r2
   15ffc:	44b9      	add	r9, r7
   15ffe:	44c8      	add	r8, r9
   16000:	44c4      	add	ip, r8
   16002:	4463      	add	r3, ip
   16004:	781b      	ldrb	r3, [r3, #0]
   16006:	2b00      	cmp	r3, #0
   16008:	d101      	bne.n	1600e <processOnSMS+0xf32>
   1600a:	f001 fd26 	bl	17a5a <processOnSMS+0x297e>
					{
						strcpy(resep_msg,"UOMETHOD : ");
   1600e:	230c      	movs	r3, #12
   16010:	2220      	movs	r2, #32
   16012:	4694      	mov	ip, r2
   16014:	2208      	movs	r2, #8
   16016:	4690      	mov	r8, r2
   16018:	44b8      	add	r8, r7
   1601a:	44c4      	add	ip, r8
   1601c:	4463      	add	r3, ip
   1601e:	4a29      	ldr	r2, [pc, #164]	; (160c4 <processOnSMS+0xfe8>)
   16020:	ca13      	ldmia	r2!, {r0, r1, r4}
   16022:	c313      	stmia	r3!, {r0, r1, r4}
						strcat(resep_msg,received_command);
   16024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16026:	230c      	movs	r3, #12
   16028:	2120      	movs	r1, #32
   1602a:	468c      	mov	ip, r1
   1602c:	2108      	movs	r1, #8
   1602e:	4688      	mov	r8, r1
   16030:	44b8      	add	r8, r7
   16032:	44c4      	add	ip, r8
   16034:	4463      	add	r3, ip
   16036:	0011      	movs	r1, r2
   16038:	0018      	movs	r0, r3
   1603a:	4b17      	ldr	r3, [pc, #92]	; (16098 <processOnSMS+0xfbc>)
   1603c:	4798      	blx	r3
						strcat(resep_msg," OK");
   1603e:	230c      	movs	r3, #12
   16040:	2220      	movs	r2, #32
   16042:	4694      	mov	ip, r2
   16044:	2208      	movs	r2, #8
   16046:	4690      	mov	r8, r2
   16048:	44b8      	add	r8, r7
   1604a:	44c4      	add	ip, r8
   1604c:	4463      	add	r3, ip
   1604e:	0018      	movs	r0, r3
   16050:	4b0c      	ldr	r3, [pc, #48]	; (16084 <processOnSMS+0xfa8>)
   16052:	4798      	blx	r3
   16054:	0003      	movs	r3, r0
   16056:	001a      	movs	r2, r3
   16058:	230c      	movs	r3, #12
   1605a:	2120      	movs	r1, #32
   1605c:	468c      	mov	ip, r1
   1605e:	2108      	movs	r1, #8
   16060:	4688      	mov	r8, r1
   16062:	44b8      	add	r8, r7
   16064:	44c4      	add	ip, r8
   16066:	4463      	add	r3, ip
   16068:	189a      	adds	r2, r3, r2
   1606a:	4b0c      	ldr	r3, [pc, #48]	; (1609c <processOnSMS+0xfc0>)
   1606c:	0010      	movs	r0, r2
   1606e:	0019      	movs	r1, r3
   16070:	2304      	movs	r3, #4
   16072:	001a      	movs	r2, r3
   16074:	4b0a      	ldr	r3, [pc, #40]	; (160a0 <processOnSMS+0xfc4>)
   16076:	4798      	blx	r3
   16078:	f001 fcef 	bl	17a5a <processOnSMS+0x297e>
   1607c:	0002ac18 	.word	0x0002ac18
   16080:	0001420d 	.word	0x0001420d
   16084:	000299eb 	.word	0x000299eb
   16088:	00029737 	.word	0x00029737
   1608c:	00011341 	.word	0x00011341
   16090:	fffffed2 	.word	0xfffffed2
   16094:	0002ac1c 	.word	0x0002ac1c
   16098:	000299a5 	.word	0x000299a5
   1609c:	0002ac24 	.word	0x0002ac24
   160a0:	00029725 	.word	0x00029725
   160a4:	0002ac28 	.word	0x0002ac28
   160a8:	00029641 	.word	0x00029641
   160ac:	2000082c 	.word	0x2000082c
   160b0:	000117a1 	.word	0x000117a1
   160b4:	0002ac30 	.word	0x0002ac30
   160b8:	00029961 	.word	0x00029961
   160bc:	0002ac3c 	.word	0x0002ac3c
   160c0:	000116c5 	.word	0x000116c5
   160c4:	0002ac48 	.word	0x0002ac48
					}
				}
			}
		}
	}
	else if(StringstartsWith(received_command,"MVBYPON"))
   160c8:	4ad1      	ldr	r2, [pc, #836]	; (16410 <processOnSMS+0x1334>)
   160ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160cc:	0011      	movs	r1, r2
   160ce:	0018      	movs	r0, r3
   160d0:	4bd0      	ldr	r3, [pc, #832]	; (16414 <processOnSMS+0x1338>)
   160d2:	4798      	blx	r3
   160d4:	1e03      	subs	r3, r0, #0
   160d6:	d02d      	beq.n	16134 <processOnSMS+0x1058>
	{
		saveMotorVoltageBypassSettings(true);
   160d8:	2001      	movs	r0, #1
   160da:	4bcf      	ldr	r3, [pc, #828]	; (16418 <processOnSMS+0x133c>)
   160dc:	4798      	blx	r3
		incomingSMSProcessed=true;
   160de:	2330      	movs	r3, #48	; 0x30
   160e0:	33ff      	adds	r3, #255	; 0xff
   160e2:	2220      	movs	r2, #32
   160e4:	4694      	mov	ip, r2
   160e6:	2208      	movs	r2, #8
   160e8:	4690      	mov	r8, r2
   160ea:	44b8      	add	r8, r7
   160ec:	44c4      	add	ip, r8
   160ee:	4463      	add	r3, ip
   160f0:	2201      	movs	r2, #1
   160f2:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   160f4:	4bc9      	ldr	r3, [pc, #804]	; (1641c <processOnSMS+0x1340>)
   160f6:	2298      	movs	r2, #152	; 0x98
   160f8:	0052      	lsls	r2, r2, #1
   160fa:	4694      	mov	ip, r2
   160fc:	2220      	movs	r2, #32
   160fe:	4690      	mov	r8, r2
   16100:	2208      	movs	r2, #8
   16102:	4691      	mov	r9, r2
   16104:	44b9      	add	r9, r7
   16106:	44c8      	add	r8, r9
   16108:	44c4      	add	ip, r8
   1610a:	4463      	add	r3, ip
   1610c:	781b      	ldrb	r3, [r3, #0]
   1610e:	2b00      	cmp	r3, #0
   16110:	d101      	bne.n	16116 <processOnSMS+0x103a>
   16112:	f001 fca2 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS ON");
   16116:	230c      	movs	r3, #12
   16118:	2220      	movs	r2, #32
   1611a:	4694      	mov	ip, r2
   1611c:	2208      	movs	r2, #8
   1611e:	4690      	mov	r8, r2
   16120:	44b8      	add	r8, r7
   16122:	44c4      	add	ip, r8
   16124:	4463      	add	r3, ip
   16126:	4abe      	ldr	r2, [pc, #760]	; (16420 <processOnSMS+0x1344>)
   16128:	ca13      	ldmia	r2!, {r0, r1, r4}
   1612a:	c313      	stmia	r3!, {r0, r1, r4}
   1612c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1612e:	c313      	stmia	r3!, {r0, r1, r4}
   16130:	f001 fc93 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPOFF"))
   16134:	4abb      	ldr	r2, [pc, #748]	; (16424 <processOnSMS+0x1348>)
   16136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16138:	0011      	movs	r1, r2
   1613a:	0018      	movs	r0, r3
   1613c:	4bb5      	ldr	r3, [pc, #724]	; (16414 <processOnSMS+0x1338>)
   1613e:	4798      	blx	r3
   16140:	1e03      	subs	r3, r0, #0
   16142:	d02f      	beq.n	161a4 <processOnSMS+0x10c8>
	{
		saveMotorVoltageBypassSettings(false);
   16144:	2000      	movs	r0, #0
   16146:	4bb4      	ldr	r3, [pc, #720]	; (16418 <processOnSMS+0x133c>)
   16148:	4798      	blx	r3
		incomingSMSProcessed=true;
   1614a:	2330      	movs	r3, #48	; 0x30
   1614c:	33ff      	adds	r3, #255	; 0xff
   1614e:	2220      	movs	r2, #32
   16150:	4694      	mov	ip, r2
   16152:	2208      	movs	r2, #8
   16154:	4690      	mov	r8, r2
   16156:	44b8      	add	r8, r7
   16158:	44c4      	add	ip, r8
   1615a:	4463      	add	r3, ip
   1615c:	2201      	movs	r2, #1
   1615e:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16160:	4bae      	ldr	r3, [pc, #696]	; (1641c <processOnSMS+0x1340>)
   16162:	2298      	movs	r2, #152	; 0x98
   16164:	0052      	lsls	r2, r2, #1
   16166:	4694      	mov	ip, r2
   16168:	2220      	movs	r2, #32
   1616a:	4690      	mov	r8, r2
   1616c:	2208      	movs	r2, #8
   1616e:	4691      	mov	r9, r2
   16170:	44b9      	add	r9, r7
   16172:	44c8      	add	r8, r9
   16174:	44c4      	add	ip, r8
   16176:	4463      	add	r3, ip
   16178:	781b      	ldrb	r3, [r3, #0]
   1617a:	2b00      	cmp	r3, #0
   1617c:	d101      	bne.n	16182 <processOnSMS+0x10a6>
   1617e:	f001 fc6c 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS OFF");
   16182:	230c      	movs	r3, #12
   16184:	2220      	movs	r2, #32
   16186:	4694      	mov	ip, r2
   16188:	2208      	movs	r2, #8
   1618a:	4690      	mov	r8, r2
   1618c:	44b8      	add	r8, r7
   1618e:	44c4      	add	ip, r8
   16190:	4463      	add	r3, ip
   16192:	4aa5      	ldr	r2, [pc, #660]	; (16428 <processOnSMS+0x134c>)
   16194:	ca13      	ldmia	r2!, {r0, r1, r4}
   16196:	c313      	stmia	r3!, {r0, r1, r4}
   16198:	ca13      	ldmia	r2!, {r0, r1, r4}
   1619a:	c313      	stmia	r3!, {r0, r1, r4}
   1619c:	7812      	ldrb	r2, [r2, #0]
   1619e:	701a      	strb	r2, [r3, #0]
   161a0:	f001 fc5b 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPT"))
   161a4:	4aa1      	ldr	r2, [pc, #644]	; (1642c <processOnSMS+0x1350>)
   161a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   161a8:	0011      	movs	r1, r2
   161aa:	0018      	movs	r0, r3
   161ac:	4b99      	ldr	r3, [pc, #612]	; (16414 <processOnSMS+0x1338>)
   161ae:	4798      	blx	r3
   161b0:	1e03      	subs	r3, r0, #0
   161b2:	d100      	bne.n	161b6 <processOnSMS+0x10da>
   161b4:	e0a3      	b.n	162fe <processOnSMS+0x1222>
	{
		memmove(received_command,received_command+6,strlen(received_command));
   161b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   161b8:	1d9c      	adds	r4, r3, #6
   161ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   161bc:	0018      	movs	r0, r3
   161be:	4b9c      	ldr	r3, [pc, #624]	; (16430 <processOnSMS+0x1354>)
   161c0:	4798      	blx	r3
   161c2:	0002      	movs	r2, r0
   161c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   161c6:	0021      	movs	r1, r4
   161c8:	0018      	movs	r0, r3
   161ca:	4b9a      	ldr	r3, [pc, #616]	; (16434 <processOnSMS+0x1358>)
   161cc:	4798      	blx	r3
		uint32_t voltageBypTime = atoi(received_command);
   161ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   161d0:	0018      	movs	r0, r3
   161d2:	4b99      	ldr	r3, [pc, #612]	; (16438 <processOnSMS+0x135c>)
   161d4:	4798      	blx	r3
   161d6:	0003      	movs	r3, r0
   161d8:	2292      	movs	r2, #146	; 0x92
   161da:	0052      	lsls	r2, r2, #1
   161dc:	2120      	movs	r1, #32
   161de:	468c      	mov	ip, r1
   161e0:	2108      	movs	r1, #8
   161e2:	4688      	mov	r8, r1
   161e4:	44b8      	add	r8, r7
   161e6:	44c4      	add	ip, r8
   161e8:	4462      	add	r2, ip
   161ea:	6013      	str	r3, [r2, #0]
		if (voltageBypTime<10) voltageBypTime = 10;
   161ec:	2392      	movs	r3, #146	; 0x92
   161ee:	005b      	lsls	r3, r3, #1
   161f0:	2220      	movs	r2, #32
   161f2:	4694      	mov	ip, r2
   161f4:	2208      	movs	r2, #8
   161f6:	4690      	mov	r8, r2
   161f8:	44b8      	add	r8, r7
   161fa:	44c4      	add	ip, r8
   161fc:	4463      	add	r3, ip
   161fe:	681b      	ldr	r3, [r3, #0]
   16200:	2b09      	cmp	r3, #9
   16202:	d80a      	bhi.n	1621a <processOnSMS+0x113e>
   16204:	230a      	movs	r3, #10
   16206:	2292      	movs	r2, #146	; 0x92
   16208:	0052      	lsls	r2, r2, #1
   1620a:	2120      	movs	r1, #32
   1620c:	468c      	mov	ip, r1
   1620e:	2108      	movs	r1, #8
   16210:	4688      	mov	r8, r1
   16212:	44b8      	add	r8, r7
   16214:	44c4      	add	ip, r8
   16216:	4462      	add	r2, ip
   16218:	6013      	str	r3, [r2, #0]
		if (voltageBypTime>3600L) voltageBypTime=3600L;
   1621a:	2392      	movs	r3, #146	; 0x92
   1621c:	005b      	lsls	r3, r3, #1
   1621e:	2220      	movs	r2, #32
   16220:	4694      	mov	ip, r2
   16222:	2208      	movs	r2, #8
   16224:	4690      	mov	r8, r2
   16226:	44b8      	add	r8, r7
   16228:	44c4      	add	ip, r8
   1622a:	4463      	add	r3, ip
   1622c:	681a      	ldr	r2, [r3, #0]
   1622e:	23e1      	movs	r3, #225	; 0xe1
   16230:	011b      	lsls	r3, r3, #4
   16232:	429a      	cmp	r2, r3
   16234:	d90b      	bls.n	1624e <processOnSMS+0x1172>
   16236:	23e1      	movs	r3, #225	; 0xe1
   16238:	011b      	lsls	r3, r3, #4
   1623a:	2292      	movs	r2, #146	; 0x92
   1623c:	0052      	lsls	r2, r2, #1
   1623e:	2120      	movs	r1, #32
   16240:	468c      	mov	ip, r1
   16242:	2108      	movs	r1, #8
   16244:	4688      	mov	r8, r1
   16246:	44b8      	add	r8, r7
   16248:	44c4      	add	ip, r8
   1624a:	4462      	add	r2, ip
   1624c:	6013      	str	r3, [r2, #0]
		
		voltageBypTime=voltageBypTime*1000L;
   1624e:	2392      	movs	r3, #146	; 0x92
   16250:	005b      	lsls	r3, r3, #1
   16252:	2220      	movs	r2, #32
   16254:	4694      	mov	ip, r2
   16256:	2208      	movs	r2, #8
   16258:	4690      	mov	r8, r2
   1625a:	44b8      	add	r8, r7
   1625c:	44c4      	add	ip, r8
   1625e:	4463      	add	r3, ip
   16260:	681b      	ldr	r3, [r3, #0]
   16262:	22fa      	movs	r2, #250	; 0xfa
   16264:	0092      	lsls	r2, r2, #2
   16266:	4353      	muls	r3, r2
   16268:	2292      	movs	r2, #146	; 0x92
   1626a:	0052      	lsls	r2, r2, #1
   1626c:	2120      	movs	r1, #32
   1626e:	468c      	mov	ip, r1
   16270:	2108      	movs	r1, #8
   16272:	4688      	mov	r8, r1
   16274:	44b8      	add	r8, r7
   16276:	44c4      	add	ip, r8
   16278:	4462      	add	r2, ip
   1627a:	6013      	str	r3, [r2, #0]
		
		saveMotorVoltageBypasssTimeSettings(voltageBypTime);
   1627c:	2392      	movs	r3, #146	; 0x92
   1627e:	005b      	lsls	r3, r3, #1
   16280:	2220      	movs	r2, #32
   16282:	4694      	mov	ip, r2
   16284:	2208      	movs	r2, #8
   16286:	4690      	mov	r8, r2
   16288:	44b8      	add	r8, r7
   1628a:	44c4      	add	ip, r8
   1628c:	4463      	add	r3, ip
   1628e:	681b      	ldr	r3, [r3, #0]
   16290:	0018      	movs	r0, r3
   16292:	4b6a      	ldr	r3, [pc, #424]	; (1643c <processOnSMS+0x1360>)
   16294:	4798      	blx	r3
		incomingSMSProcessed=true;
   16296:	2330      	movs	r3, #48	; 0x30
   16298:	33ff      	adds	r3, #255	; 0xff
   1629a:	2220      	movs	r2, #32
   1629c:	4694      	mov	ip, r2
   1629e:	2208      	movs	r2, #8
   162a0:	4690      	mov	r8, r2
   162a2:	44b8      	add	r8, r7
   162a4:	44c4      	add	ip, r8
   162a6:	4463      	add	r3, ip
   162a8:	2201      	movs	r2, #1
   162aa:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   162ac:	4b5b      	ldr	r3, [pc, #364]	; (1641c <processOnSMS+0x1340>)
   162ae:	2298      	movs	r2, #152	; 0x98
   162b0:	0052      	lsls	r2, r2, #1
   162b2:	4694      	mov	ip, r2
   162b4:	2220      	movs	r2, #32
   162b6:	4690      	mov	r8, r2
   162b8:	2208      	movs	r2, #8
   162ba:	4691      	mov	r9, r2
   162bc:	44b9      	add	r9, r7
   162be:	44c8      	add	r8, r9
   162c0:	44c4      	add	ip, r8
   162c2:	4463      	add	r3, ip
   162c4:	781b      	ldrb	r3, [r3, #0]
   162c6:	2b00      	cmp	r3, #0
   162c8:	d101      	bne.n	162ce <processOnSMS+0x11f2>
   162ca:	f001 fbc6 	bl	17a5a <processOnSMS+0x297e>
		{
			sprintf(resep_msg,"Motor Voltage Bypass Time Set to %d",voltageBypTime);
   162ce:	2392      	movs	r3, #146	; 0x92
   162d0:	005b      	lsls	r3, r3, #1
   162d2:	2220      	movs	r2, #32
   162d4:	4694      	mov	ip, r2
   162d6:	2208      	movs	r2, #8
   162d8:	4690      	mov	r8, r2
   162da:	44b8      	add	r8, r7
   162dc:	44c4      	add	ip, r8
   162de:	4463      	add	r3, ip
   162e0:	681a      	ldr	r2, [r3, #0]
   162e2:	4957      	ldr	r1, [pc, #348]	; (16440 <processOnSMS+0x1364>)
   162e4:	230c      	movs	r3, #12
   162e6:	2020      	movs	r0, #32
   162e8:	4684      	mov	ip, r0
   162ea:	2008      	movs	r0, #8
   162ec:	4680      	mov	r8, r0
   162ee:	44b8      	add	r8, r7
   162f0:	44c4      	add	ip, r8
   162f2:	4463      	add	r3, ip
   162f4:	0018      	movs	r0, r3
   162f6:	4b53      	ldr	r3, [pc, #332]	; (16444 <processOnSMS+0x1368>)
   162f8:	4798      	blx	r3
   162fa:	f001 fbae 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
   162fe:	4a52      	ldr	r2, [pc, #328]	; (16448 <processOnSMS+0x136c>)
   16300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16302:	0011      	movs	r1, r2
   16304:	0018      	movs	r0, r3
   16306:	4b43      	ldr	r3, [pc, #268]	; (16414 <processOnSMS+0x1338>)
   16308:	4798      	blx	r3
   1630a:	1e03      	subs	r3, r0, #0
   1630c:	d100      	bne.n	16310 <processOnSMS+0x1234>
   1630e:	e0a7      	b.n	16460 <processOnSMS+0x1384>
	{
		if (strlen(received_command)>4)
   16310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16312:	0018      	movs	r0, r3
   16314:	4b46      	ldr	r3, [pc, #280]	; (16430 <processOnSMS+0x1354>)
   16316:	4798      	blx	r3
   16318:	0003      	movs	r3, r0
   1631a:	2b04      	cmp	r3, #4
   1631c:	d801      	bhi.n	16322 <processOnSMS+0x1246>
   1631e:	f001 fb9c 	bl	17a5a <processOnSMS+0x297e>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   16322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16324:	1d1c      	adds	r4, r3, #4
   16326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16328:	0018      	movs	r0, r3
   1632a:	4b41      	ldr	r3, [pc, #260]	; (16430 <processOnSMS+0x1354>)
   1632c:	4798      	blx	r3
   1632e:	0002      	movs	r2, r0
   16330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16332:	0021      	movs	r1, r4
   16334:	0018      	movs	r0, r3
   16336:	4b3f      	ldr	r3, [pc, #252]	; (16434 <processOnSMS+0x1358>)
   16338:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
   1633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1633c:	781b      	ldrb	r3, [r3, #0]
   1633e:	2b43      	cmp	r3, #67	; 0x43
   16340:	d00d      	beq.n	1635e <processOnSMS+0x1282>
   16342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16344:	781b      	ldrb	r3, [r3, #0]
   16346:	2b41      	cmp	r3, #65	; 0x41
   16348:	d009      	beq.n	1635e <processOnSMS+0x1282>
   1634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1634c:	781b      	ldrb	r3, [r3, #0]
   1634e:	2b54      	cmp	r3, #84	; 0x54
   16350:	d005      	beq.n	1635e <processOnSMS+0x1282>
   16352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16354:	781b      	ldrb	r3, [r3, #0]
   16356:	2b4e      	cmp	r3, #78	; 0x4e
   16358:	d001      	beq.n	1635e <processOnSMS+0x1282>
   1635a:	f001 fb7e 	bl	17a5a <processOnSMS+0x297e>
			{
				saveResponseSettings((char)received_command[0]);  //save specific RESPONSE settings
   1635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16360:	781b      	ldrb	r3, [r3, #0]
   16362:	0018      	movs	r0, r3
   16364:	4b39      	ldr	r3, [pc, #228]	; (1644c <processOnSMS+0x1370>)
   16366:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   16368:	2330      	movs	r3, #48	; 0x30
   1636a:	33ff      	adds	r3, #255	; 0xff
   1636c:	2220      	movs	r2, #32
   1636e:	4694      	mov	ip, r2
   16370:	2208      	movs	r2, #8
   16372:	4690      	mov	r8, r2
   16374:	44b8      	add	r8, r7
   16376:	44c4      	add	ip, r8
   16378:	4463      	add	r3, ip
   1637a:	2201      	movs	r2, #1
   1637c:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   1637e:	4b27      	ldr	r3, [pc, #156]	; (1641c <processOnSMS+0x1340>)
   16380:	2298      	movs	r2, #152	; 0x98
   16382:	0052      	lsls	r2, r2, #1
   16384:	4694      	mov	ip, r2
   16386:	2220      	movs	r2, #32
   16388:	4690      	mov	r8, r2
   1638a:	2208      	movs	r2, #8
   1638c:	4691      	mov	r9, r2
   1638e:	44b9      	add	r9, r7
   16390:	44c8      	add	r8, r9
   16392:	44c4      	add	ip, r8
   16394:	4463      	add	r3, ip
   16396:	781b      	ldrb	r3, [r3, #0]
   16398:	2b00      	cmp	r3, #0
   1639a:	d101      	bne.n	163a0 <processOnSMS+0x12c4>
   1639c:	f001 fb5d 	bl	17a5a <processOnSMS+0x297e>
				{
					strcpy(resep_msg,"RESP : ");
   163a0:	230c      	movs	r3, #12
   163a2:	2220      	movs	r2, #32
   163a4:	4694      	mov	ip, r2
   163a6:	2208      	movs	r2, #8
   163a8:	4690      	mov	r8, r2
   163aa:	44b8      	add	r8, r7
   163ac:	44c4      	add	ip, r8
   163ae:	4463      	add	r3, ip
   163b0:	4a27      	ldr	r2, [pc, #156]	; (16450 <processOnSMS+0x1374>)
   163b2:	ca03      	ldmia	r2!, {r0, r1}
   163b4:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
   163b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   163b8:	230c      	movs	r3, #12
   163ba:	2120      	movs	r1, #32
   163bc:	468c      	mov	ip, r1
   163be:	2108      	movs	r1, #8
   163c0:	4688      	mov	r8, r1
   163c2:	44b8      	add	r8, r7
   163c4:	44c4      	add	ip, r8
   163c6:	4463      	add	r3, ip
   163c8:	0011      	movs	r1, r2
   163ca:	0018      	movs	r0, r3
   163cc:	4b21      	ldr	r3, [pc, #132]	; (16454 <processOnSMS+0x1378>)
   163ce:	4798      	blx	r3
					strcat(resep_msg," OK");
   163d0:	230c      	movs	r3, #12
   163d2:	2220      	movs	r2, #32
   163d4:	4694      	mov	ip, r2
   163d6:	2208      	movs	r2, #8
   163d8:	4690      	mov	r8, r2
   163da:	44b8      	add	r8, r7
   163dc:	44c4      	add	ip, r8
   163de:	4463      	add	r3, ip
   163e0:	0018      	movs	r0, r3
   163e2:	4b13      	ldr	r3, [pc, #76]	; (16430 <processOnSMS+0x1354>)
   163e4:	4798      	blx	r3
   163e6:	0003      	movs	r3, r0
   163e8:	001a      	movs	r2, r3
   163ea:	230c      	movs	r3, #12
   163ec:	2120      	movs	r1, #32
   163ee:	468c      	mov	ip, r1
   163f0:	2108      	movs	r1, #8
   163f2:	4688      	mov	r8, r1
   163f4:	44b8      	add	r8, r7
   163f6:	44c4      	add	ip, r8
   163f8:	4463      	add	r3, ip
   163fa:	189a      	adds	r2, r3, r2
   163fc:	4b16      	ldr	r3, [pc, #88]	; (16458 <processOnSMS+0x137c>)
   163fe:	0010      	movs	r0, r2
   16400:	0019      	movs	r1, r3
   16402:	2304      	movs	r3, #4
   16404:	001a      	movs	r2, r3
   16406:	4b15      	ldr	r3, [pc, #84]	; (1645c <processOnSMS+0x1380>)
   16408:	4798      	blx	r3
   1640a:	f001 fb26 	bl	17a5a <processOnSMS+0x297e>
   1640e:	46c0      	nop			; (mov r8, r8)
   16410:	0002ac54 	.word	0x0002ac54
   16414:	0001420d 	.word	0x0001420d
   16418:	00011711 	.word	0x00011711
   1641c:	fffffed2 	.word	0xfffffed2
   16420:	0002ac5c 	.word	0x0002ac5c
   16424:	0002ac74 	.word	0x0002ac74
   16428:	0002ac80 	.word	0x0002ac80
   1642c:	0002ac9c 	.word	0x0002ac9c
   16430:	000299eb 	.word	0x000299eb
   16434:	00029737 	.word	0x00029737
   16438:	00029641 	.word	0x00029641
   1643c:	0001175d 	.word	0x0001175d
   16440:	0002aca4 	.word	0x0002aca4
   16444:	00029961 	.word	0x00029961
   16448:	0002acc8 	.word	0x0002acc8
   1644c:	0001138d 	.word	0x0001138d
   16450:	0002acd0 	.word	0x0002acd0
   16454:	000299a5 	.word	0x000299a5
   16458:	0002ac24 	.word	0x0002ac24
   1645c:	00029725 	.word	0x00029725
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"OVR"))
   16460:	4ade      	ldr	r2, [pc, #888]	; (167dc <processOnSMS+0x1700>)
   16462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16464:	0011      	movs	r1, r2
   16466:	0018      	movs	r0, r3
   16468:	4bdd      	ldr	r3, [pc, #884]	; (167e0 <processOnSMS+0x1704>)
   1646a:	4798      	blx	r3
   1646c:	1e03      	subs	r3, r0, #0
   1646e:	d062      	beq.n	16536 <processOnSMS+0x145a>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   16470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16472:	1cdc      	adds	r4, r3, #3
   16474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16476:	0018      	movs	r0, r3
   16478:	4bda      	ldr	r3, [pc, #872]	; (167e4 <processOnSMS+0x1708>)
   1647a:	4798      	blx	r3
   1647c:	0002      	movs	r2, r0
   1647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16480:	0021      	movs	r1, r4
   16482:	0018      	movs	r0, r3
   16484:	4bd8      	ldr	r3, [pc, #864]	; (167e8 <processOnSMS+0x170c>)
   16486:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
   16488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1648a:	0018      	movs	r0, r3
   1648c:	4bd7      	ldr	r3, [pc, #860]	; (167ec <processOnSMS+0x1710>)
   1648e:	4798      	blx	r3
   16490:	0002      	movs	r2, r0
   16492:	238b      	movs	r3, #139	; 0x8b
   16494:	005b      	lsls	r3, r3, #1
   16496:	2120      	movs	r1, #32
   16498:	468c      	mov	ip, r1
   1649a:	2108      	movs	r1, #8
   1649c:	4688      	mov	r8, r1
   1649e:	44b8      	add	r8, r7
   164a0:	44c4      	add	ip, r8
   164a2:	4463      	add	r3, ip
   164a4:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
   164a6:	238b      	movs	r3, #139	; 0x8b
   164a8:	005b      	lsls	r3, r3, #1
   164aa:	2220      	movs	r2, #32
   164ac:	4694      	mov	ip, r2
   164ae:	2208      	movs	r2, #8
   164b0:	4690      	mov	r8, r2
   164b2:	44b8      	add	r8, r7
   164b4:	44c4      	add	ip, r8
   164b6:	4463      	add	r3, ip
   164b8:	781b      	ldrb	r3, [r3, #0]
   164ba:	2b68      	cmp	r3, #104	; 0x68
   164bc:	d801      	bhi.n	164c2 <processOnSMS+0x13e6>
   164be:	f001 facc 	bl	17a5a <processOnSMS+0x297e>
		{
			setOverloadPer(ovr_per);
   164c2:	238b      	movs	r3, #139	; 0x8b
   164c4:	005b      	lsls	r3, r3, #1
   164c6:	2220      	movs	r2, #32
   164c8:	4694      	mov	ip, r2
   164ca:	2208      	movs	r2, #8
   164cc:	4690      	mov	r8, r2
   164ce:	44b8      	add	r8, r7
   164d0:	44c4      	add	ip, r8
   164d2:	4463      	add	r3, ip
   164d4:	781b      	ldrb	r3, [r3, #0]
   164d6:	0018      	movs	r0, r3
   164d8:	4bc5      	ldr	r3, [pc, #788]	; (167f0 <processOnSMS+0x1714>)
   164da:	4798      	blx	r3
			incomingSMSProcessed=true;
   164dc:	2330      	movs	r3, #48	; 0x30
   164de:	33ff      	adds	r3, #255	; 0xff
   164e0:	2220      	movs	r2, #32
   164e2:	4694      	mov	ip, r2
   164e4:	2208      	movs	r2, #8
   164e6:	4690      	mov	r8, r2
   164e8:	44b8      	add	r8, r7
   164ea:	44c4      	add	ip, r8
   164ec:	4463      	add	r3, ip
   164ee:	2201      	movs	r2, #1
   164f0:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   164f2:	4bc0      	ldr	r3, [pc, #768]	; (167f4 <processOnSMS+0x1718>)
   164f4:	2298      	movs	r2, #152	; 0x98
   164f6:	0052      	lsls	r2, r2, #1
   164f8:	4694      	mov	ip, r2
   164fa:	2220      	movs	r2, #32
   164fc:	4690      	mov	r8, r2
   164fe:	2208      	movs	r2, #8
   16500:	4691      	mov	r9, r2
   16502:	44b9      	add	r9, r7
   16504:	44c8      	add	r8, r9
   16506:	44c4      	add	ip, r8
   16508:	4463      	add	r3, ip
   1650a:	781b      	ldrb	r3, [r3, #0]
   1650c:	2b00      	cmp	r3, #0
   1650e:	d101      	bne.n	16514 <processOnSMS+0x1438>
   16510:	f001 faa3 	bl	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"OVR SET OK");
   16514:	230c      	movs	r3, #12
   16516:	2220      	movs	r2, #32
   16518:	4694      	mov	ip, r2
   1651a:	2208      	movs	r2, #8
   1651c:	4690      	mov	r8, r2
   1651e:	44b8      	add	r8, r7
   16520:	44c4      	add	ip, r8
   16522:	4463      	add	r3, ip
   16524:	4ab4      	ldr	r2, [pc, #720]	; (167f8 <processOnSMS+0x171c>)
   16526:	ca03      	ldmia	r2!, {r0, r1}
   16528:	c303      	stmia	r3!, {r0, r1}
   1652a:	8811      	ldrh	r1, [r2, #0]
   1652c:	8019      	strh	r1, [r3, #0]
   1652e:	7892      	ldrb	r2, [r2, #2]
   16530:	709a      	strb	r2, [r3, #2]
   16532:	f001 fa92 	bl	17a5a <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
   16536:	4ab1      	ldr	r2, [pc, #708]	; (167fc <processOnSMS+0x1720>)
   16538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1653a:	0011      	movs	r1, r2
   1653c:	0018      	movs	r0, r3
   1653e:	4ba8      	ldr	r3, [pc, #672]	; (167e0 <processOnSMS+0x1704>)
   16540:	4798      	blx	r3
   16542:	1e03      	subs	r3, r0, #0
   16544:	d06c      	beq.n	16620 <processOnSMS+0x1544>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   16546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16548:	1d1c      	adds	r4, r3, #4
   1654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1654c:	0018      	movs	r0, r3
   1654e:	4ba5      	ldr	r3, [pc, #660]	; (167e4 <processOnSMS+0x1708>)
   16550:	4798      	blx	r3
   16552:	0002      	movs	r2, r0
   16554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16556:	0021      	movs	r1, r4
   16558:	0018      	movs	r0, r3
   1655a:	4ba3      	ldr	r3, [pc, #652]	; (167e8 <processOnSMS+0x170c>)
   1655c:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
   1655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16560:	0018      	movs	r0, r3
   16562:	4ba2      	ldr	r3, [pc, #648]	; (167ec <processOnSMS+0x1710>)
   16564:	4798      	blx	r3
   16566:	0002      	movs	r2, r0
   16568:	2316      	movs	r3, #22
   1656a:	33ff      	adds	r3, #255	; 0xff
   1656c:	2120      	movs	r1, #32
   1656e:	468c      	mov	ip, r1
   16570:	2108      	movs	r1, #8
   16572:	4688      	mov	r8, r1
   16574:	44b8      	add	r8, r7
   16576:	44c4      	add	ip, r8
   16578:	4463      	add	r3, ip
   1657a:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
   1657c:	2316      	movs	r3, #22
   1657e:	33ff      	adds	r3, #255	; 0xff
   16580:	2220      	movs	r2, #32
   16582:	4694      	mov	ip, r2
   16584:	2208      	movs	r2, #8
   16586:	4690      	mov	r8, r2
   16588:	44b8      	add	r8, r7
   1658a:	44c4      	add	ip, r8
   1658c:	4463      	add	r3, ip
   1658e:	781b      	ldrb	r3, [r3, #0]
   16590:	2b61      	cmp	r3, #97	; 0x61
   16592:	d901      	bls.n	16598 <processOnSMS+0x14bc>
   16594:	f001 fa61 	bl	17a5a <processOnSMS+0x297e>
   16598:	2316      	movs	r3, #22
   1659a:	33ff      	adds	r3, #255	; 0xff
   1659c:	2220      	movs	r2, #32
   1659e:	4694      	mov	ip, r2
   165a0:	2208      	movs	r2, #8
   165a2:	4690      	mov	r8, r2
   165a4:	44b8      	add	r8, r7
   165a6:	44c4      	add	ip, r8
   165a8:	4463      	add	r3, ip
   165aa:	781b      	ldrb	r3, [r3, #0]
   165ac:	2b00      	cmp	r3, #0
   165ae:	d101      	bne.n	165b4 <processOnSMS+0x14d8>
   165b0:	f001 fa53 	bl	17a5a <processOnSMS+0x297e>
		{

			setUnderloadPer(undr_per);
   165b4:	2316      	movs	r3, #22
   165b6:	33ff      	adds	r3, #255	; 0xff
   165b8:	2220      	movs	r2, #32
   165ba:	4694      	mov	ip, r2
   165bc:	2208      	movs	r2, #8
   165be:	4690      	mov	r8, r2
   165c0:	44b8      	add	r8, r7
   165c2:	44c4      	add	ip, r8
   165c4:	4463      	add	r3, ip
   165c6:	781b      	ldrb	r3, [r3, #0]
   165c8:	0018      	movs	r0, r3
   165ca:	4b8d      	ldr	r3, [pc, #564]	; (16800 <processOnSMS+0x1724>)
   165cc:	4798      	blx	r3

			incomingSMSProcessed=true;
   165ce:	2330      	movs	r3, #48	; 0x30
   165d0:	33ff      	adds	r3, #255	; 0xff
   165d2:	2220      	movs	r2, #32
   165d4:	4694      	mov	ip, r2
   165d6:	2208      	movs	r2, #8
   165d8:	4690      	mov	r8, r2
   165da:	44b8      	add	r8, r7
   165dc:	44c4      	add	ip, r8
   165de:	4463      	add	r3, ip
   165e0:	2201      	movs	r2, #1
   165e2:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   165e4:	4b83      	ldr	r3, [pc, #524]	; (167f4 <processOnSMS+0x1718>)
   165e6:	2298      	movs	r2, #152	; 0x98
   165e8:	0052      	lsls	r2, r2, #1
   165ea:	4694      	mov	ip, r2
   165ec:	2220      	movs	r2, #32
   165ee:	4690      	mov	r8, r2
   165f0:	2208      	movs	r2, #8
   165f2:	4691      	mov	r9, r2
   165f4:	44b9      	add	r9, r7
   165f6:	44c8      	add	r8, r9
   165f8:	44c4      	add	ip, r8
   165fa:	4463      	add	r3, ip
   165fc:	781b      	ldrb	r3, [r3, #0]
   165fe:	2b00      	cmp	r3, #0
   16600:	d101      	bne.n	16606 <processOnSMS+0x152a>
   16602:	f001 fa2a 	bl	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"UNDR SET OK");
   16606:	230c      	movs	r3, #12
   16608:	2220      	movs	r2, #32
   1660a:	4694      	mov	ip, r2
   1660c:	2208      	movs	r2, #8
   1660e:	4690      	mov	r8, r2
   16610:	44b8      	add	r8, r7
   16612:	44c4      	add	ip, r8
   16614:	4463      	add	r3, ip
   16616:	4a7b      	ldr	r2, [pc, #492]	; (16804 <processOnSMS+0x1728>)
   16618:	ca13      	ldmia	r2!, {r0, r1, r4}
   1661a:	c313      	stmia	r3!, {r0, r1, r4}
   1661c:	f001 fa1d 	bl	17a5a <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
   16620:	4a79      	ldr	r2, [pc, #484]	; (16808 <processOnSMS+0x172c>)
   16622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16624:	0011      	movs	r1, r2
   16626:	0018      	movs	r0, r3
   16628:	4b6d      	ldr	r3, [pc, #436]	; (167e0 <processOnSMS+0x1704>)
   1662a:	4798      	blx	r3
   1662c:	1e03      	subs	r3, r0, #0
   1662e:	d04b      	beq.n	166c8 <processOnSMS+0x15ec>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
   16630:	4b76      	ldr	r3, [pc, #472]	; (1680c <processOnSMS+0x1730>)
   16632:	785b      	ldrb	r3, [r3, #1]
   16634:	2b00      	cmp	r3, #0
   16636:	d101      	bne.n	1663c <processOnSMS+0x1560>
   16638:	f001 fa0f 	bl	17a5a <processOnSMS+0x297e>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
   1663c:	4b74      	ldr	r3, [pc, #464]	; (16810 <processOnSMS+0x1734>)
   1663e:	8a9b      	ldrh	r3, [r3, #20]
   16640:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   16642:	627b      	str	r3, [r7, #36]	; 0x24
			Analog_Parameter_Struct.Motor_Current_DecPart,
   16644:	4b72      	ldr	r3, [pc, #456]	; (16810 <processOnSMS+0x1734>)
   16646:	8adb      	ldrh	r3, [r3, #22]
   16648:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   1664a:	623b      	str	r3, [r7, #32]
   1664c:	4b71      	ldr	r3, [pc, #452]	; (16814 <processOnSMS+0x1738>)
   1664e:	691a      	ldr	r2, [r3, #16]
   16650:	4b70      	ldr	r3, [pc, #448]	; (16814 <processOnSMS+0x1738>)
   16652:	6959      	ldr	r1, [r3, #20]
   16654:	4b6f      	ldr	r3, [pc, #444]	; (16814 <processOnSMS+0x1738>)
   16656:	699b      	ldr	r3, [r3, #24]
   16658:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
   1665a:	486e      	ldr	r0, [pc, #440]	; (16814 <processOnSMS+0x1738>)
   1665c:	7f40      	ldrb	r0, [r0, #29]
   1665e:	b2c0      	uxtb	r0, r0
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   16660:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
   16662:	486c      	ldr	r0, [pc, #432]	; (16814 <processOnSMS+0x1738>)
   16664:	7f00      	ldrb	r0, [r0, #28]
   16666:	b2c0      	uxtb	r0, r0
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   16668:	0006      	movs	r6, r0
   1666a:	4c6b      	ldr	r4, [pc, #428]	; (16818 <processOnSMS+0x173c>)
   1666c:	200c      	movs	r0, #12
   1666e:	2320      	movs	r3, #32
   16670:	469c      	mov	ip, r3
   16672:	2308      	movs	r3, #8
   16674:	4699      	mov	r9, r3
   16676:	44b9      	add	r9, r7
   16678:	44cc      	add	ip, r9
   1667a:	4460      	add	r0, ip
   1667c:	9604      	str	r6, [sp, #16]
   1667e:	9503      	str	r5, [sp, #12]
   16680:	4643      	mov	r3, r8
   16682:	9302      	str	r3, [sp, #8]
   16684:	9101      	str	r1, [sp, #4]
   16686:	9200      	str	r2, [sp, #0]
   16688:	6a3b      	ldr	r3, [r7, #32]
   1668a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1668c:	0021      	movs	r1, r4
   1668e:	4c63      	ldr	r4, [pc, #396]	; (1681c <processOnSMS+0x1740>)
   16690:	47a0      	blx	r4
			response_sms_processed_cmd = true;
   16692:	4b58      	ldr	r3, [pc, #352]	; (167f4 <processOnSMS+0x1718>)
   16694:	2298      	movs	r2, #152	; 0x98
   16696:	0052      	lsls	r2, r2, #1
   16698:	4694      	mov	ip, r2
   1669a:	2220      	movs	r2, #32
   1669c:	4690      	mov	r8, r2
   1669e:	2208      	movs	r2, #8
   166a0:	4691      	mov	r9, r2
   166a2:	44b9      	add	r9, r7
   166a4:	44c8      	add	r8, r9
   166a6:	44c4      	add	ip, r8
   166a8:	4463      	add	r3, ip
   166aa:	2201      	movs	r2, #1
   166ac:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
   166ae:	2330      	movs	r3, #48	; 0x30
   166b0:	33ff      	adds	r3, #255	; 0xff
   166b2:	2220      	movs	r2, #32
   166b4:	4694      	mov	ip, r2
   166b6:	2208      	movs	r2, #8
   166b8:	4690      	mov	r8, r2
   166ba:	44b8      	add	r8, r7
   166bc:	44c4      	add	ip, r8
   166be:	4463      	add	r3, ip
   166c0:	2201      	movs	r2, #1
   166c2:	701a      	strb	r2, [r3, #0]
   166c4:	f001 f9c9 	bl	17a5a <processOnSMS+0x297e>
		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
   166c8:	4a55      	ldr	r2, [pc, #340]	; (16820 <processOnSMS+0x1744>)
   166ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   166cc:	0011      	movs	r1, r2
   166ce:	0018      	movs	r0, r3
   166d0:	4b43      	ldr	r3, [pc, #268]	; (167e0 <processOnSMS+0x1704>)
   166d2:	4798      	blx	r3
   166d4:	1e03      	subs	r3, r0, #0
   166d6:	d03b      	beq.n	16750 <processOnSMS+0x1674>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   166d8:	4b4c      	ldr	r3, [pc, #304]	; (1680c <processOnSMS+0x1730>)
   166da:	795b      	ldrb	r3, [r3, #5]
   166dc:	2b00      	cmp	r3, #0
   166de:	d101      	bne.n	166e4 <processOnSMS+0x1608>
   166e0:	f001 f9bb 	bl	17a5a <processOnSMS+0x297e>
   166e4:	4b49      	ldr	r3, [pc, #292]	; (1680c <processOnSMS+0x1730>)
   166e6:	78db      	ldrb	r3, [r3, #3]
   166e8:	2b00      	cmp	r3, #0
   166ea:	d001      	beq.n	166f0 <processOnSMS+0x1614>
   166ec:	f001 f9b5 	bl	17a5a <processOnSMS+0x297e>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
   166f0:	2001      	movs	r0, #1
   166f2:	4b4c      	ldr	r3, [pc, #304]	; (16824 <processOnSMS+0x1748>)
   166f4:	4798      	blx	r3
			
			incomingSMSProcessed=true;
   166f6:	2330      	movs	r3, #48	; 0x30
   166f8:	33ff      	adds	r3, #255	; 0xff
   166fa:	2220      	movs	r2, #32
   166fc:	4694      	mov	ip, r2
   166fe:	2208      	movs	r2, #8
   16700:	4690      	mov	r8, r2
   16702:	44b8      	add	r8, r7
   16704:	44c4      	add	ip, r8
   16706:	4463      	add	r3, ip
   16708:	2201      	movs	r2, #1
   1670a:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
   1670c:	4b39      	ldr	r3, [pc, #228]	; (167f4 <processOnSMS+0x1718>)
   1670e:	2298      	movs	r2, #152	; 0x98
   16710:	0052      	lsls	r2, r2, #1
   16712:	4694      	mov	ip, r2
   16714:	2220      	movs	r2, #32
   16716:	4690      	mov	r8, r2
   16718:	2208      	movs	r2, #8
   1671a:	4691      	mov	r9, r2
   1671c:	44b9      	add	r9, r7
   1671e:	44c8      	add	r8, r9
   16720:	44c4      	add	ip, r8
   16722:	4463      	add	r3, ip
   16724:	781b      	ldrb	r3, [r3, #0]
   16726:	2b00      	cmp	r3, #0
   16728:	d101      	bne.n	1672e <processOnSMS+0x1652>
   1672a:	f001 f996 	bl	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
   1672e:	230c      	movs	r3, #12
   16730:	2220      	movs	r2, #32
   16732:	4694      	mov	ip, r2
   16734:	2208      	movs	r2, #8
   16736:	4690      	mov	r8, r2
   16738:	44b8      	add	r8, r7
   1673a:	44c4      	add	ip, r8
   1673c:	4463      	add	r3, ip
   1673e:	4a3a      	ldr	r2, [pc, #232]	; (16828 <processOnSMS+0x174c>)
   16740:	ca13      	ldmia	r2!, {r0, r1, r4}
   16742:	c313      	stmia	r3!, {r0, r1, r4}
   16744:	ca13      	ldmia	r2!, {r0, r1, r4}
   16746:	c313      	stmia	r3!, {r0, r1, r4}
   16748:	6812      	ldr	r2, [r2, #0]
   1674a:	601a      	str	r2, [r3, #0]
   1674c:	f001 f985 	bl	17a5a <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
   16750:	4a36      	ldr	r2, [pc, #216]	; (1682c <processOnSMS+0x1750>)
   16752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16754:	0011      	movs	r1, r2
   16756:	0018      	movs	r0, r3
   16758:	4b21      	ldr	r3, [pc, #132]	; (167e0 <processOnSMS+0x1704>)
   1675a:	4798      	blx	r3
   1675c:	1e03      	subs	r3, r0, #0
   1675e:	d069      	beq.n	16834 <processOnSMS+0x1758>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   16760:	4b2a      	ldr	r3, [pc, #168]	; (1680c <processOnSMS+0x1730>)
   16762:	795b      	ldrb	r3, [r3, #5]
   16764:	2b00      	cmp	r3, #0
   16766:	d101      	bne.n	1676c <processOnSMS+0x1690>
   16768:	f001 f977 	bl	17a5a <processOnSMS+0x297e>
   1676c:	4b27      	ldr	r3, [pc, #156]	; (1680c <processOnSMS+0x1730>)
   1676e:	78db      	ldrb	r3, [r3, #3]
   16770:	2b00      	cmp	r3, #0
   16772:	d001      	beq.n	16778 <processOnSMS+0x169c>
   16774:	f001 f971 	bl	17a5a <processOnSMS+0x297e>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
   16778:	2000      	movs	r0, #0
   1677a:	4b2a      	ldr	r3, [pc, #168]	; (16824 <processOnSMS+0x1748>)
   1677c:	4798      	blx	r3

			incomingSMSProcessed=true;
   1677e:	2330      	movs	r3, #48	; 0x30
   16780:	33ff      	adds	r3, #255	; 0xff
   16782:	2220      	movs	r2, #32
   16784:	4694      	mov	ip, r2
   16786:	2208      	movs	r2, #8
   16788:	4690      	mov	r8, r2
   1678a:	44b8      	add	r8, r7
   1678c:	44c4      	add	ip, r8
   1678e:	4463      	add	r3, ip
   16790:	2201      	movs	r2, #1
   16792:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
   16794:	4b17      	ldr	r3, [pc, #92]	; (167f4 <processOnSMS+0x1718>)
   16796:	2298      	movs	r2, #152	; 0x98
   16798:	0052      	lsls	r2, r2, #1
   1679a:	4694      	mov	ip, r2
   1679c:	2220      	movs	r2, #32
   1679e:	4690      	mov	r8, r2
   167a0:	2208      	movs	r2, #8
   167a2:	4691      	mov	r9, r2
   167a4:	44b9      	add	r9, r7
   167a6:	44c8      	add	r8, r9
   167a8:	44c4      	add	ip, r8
   167aa:	4463      	add	r3, ip
   167ac:	781b      	ldrb	r3, [r3, #0]
   167ae:	2b00      	cmp	r3, #0
   167b0:	d101      	bne.n	167b6 <processOnSMS+0x16da>
   167b2:	f001 f952 	bl	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
   167b6:	230c      	movs	r3, #12
   167b8:	2220      	movs	r2, #32
   167ba:	4694      	mov	ip, r2
   167bc:	2208      	movs	r2, #8
   167be:	4690      	mov	r8, r2
   167c0:	44b8      	add	r8, r7
   167c2:	44c4      	add	ip, r8
   167c4:	4463      	add	r3, ip
   167c6:	4a1a      	ldr	r2, [pc, #104]	; (16830 <processOnSMS+0x1754>)
   167c8:	ca13      	ldmia	r2!, {r0, r1, r4}
   167ca:	c313      	stmia	r3!, {r0, r1, r4}
   167cc:	ca13      	ldmia	r2!, {r0, r1, r4}
   167ce:	c313      	stmia	r3!, {r0, r1, r4}
   167d0:	6811      	ldr	r1, [r2, #0]
   167d2:	6019      	str	r1, [r3, #0]
   167d4:	7912      	ldrb	r2, [r2, #4]
   167d6:	711a      	strb	r2, [r3, #4]
   167d8:	f001 f93f 	bl	17a5a <processOnSMS+0x297e>
   167dc:	0002acd8 	.word	0x0002acd8
   167e0:	0001420d 	.word	0x0001420d
   167e4:	000299eb 	.word	0x000299eb
   167e8:	00029737 	.word	0x00029737
   167ec:	00029641 	.word	0x00029641
   167f0:	00011501 	.word	0x00011501
   167f4:	fffffed2 	.word	0xfffffed2
   167f8:	0002acdc 	.word	0x0002acdc
   167fc:	0002ace8 	.word	0x0002ace8
   16800:	0001156d 	.word	0x0001156d
   16804:	0002acf0 	.word	0x0002acf0
   16808:	0002acfc 	.word	0x0002acfc
   1680c:	2000082c 	.word	0x2000082c
   16810:	200008e8 	.word	0x200008e8
   16814:	20000854 	.word	0x20000854
   16818:	0002ad04 	.word	0x0002ad04
   1681c:	00029961 	.word	0x00029961
   16820:	0002ad28 	.word	0x0002ad28
   16824:	000114b5 	.word	0x000114b5
   16828:	0002ad30 	.word	0x0002ad30
   1682c:	0002ad4c 	.word	0x0002ad4c
   16830:	0002ad54 	.word	0x0002ad54
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
   16834:	4ae7      	ldr	r2, [pc, #924]	; (16bd4 <processOnSMS+0x1af8>)
   16836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16838:	0011      	movs	r1, r2
   1683a:	0018      	movs	r0, r3
   1683c:	4be6      	ldr	r3, [pc, #920]	; (16bd8 <processOnSMS+0x1afc>)
   1683e:	4798      	blx	r3
   16840:	1e03      	subs	r3, r0, #0
   16842:	d06e      	beq.n	16922 <processOnSMS+0x1846>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   16844:	4be5      	ldr	r3, [pc, #916]	; (16bdc <processOnSMS+0x1b00>)
   16846:	78db      	ldrb	r3, [r3, #3]
   16848:	2b00      	cmp	r3, #0
   1684a:	d101      	bne.n	16850 <processOnSMS+0x1774>
   1684c:	f001 f905 	bl	17a5a <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   16850:	2330      	movs	r3, #48	; 0x30
   16852:	33ff      	adds	r3, #255	; 0xff
   16854:	2220      	movs	r2, #32
   16856:	4694      	mov	ip, r2
   16858:	2208      	movs	r2, #8
   1685a:	4690      	mov	r8, r2
   1685c:	44b8      	add	r8, r7
   1685e:	44c4      	add	ip, r8
   16860:	4463      	add	r3, ip
   16862:	2201      	movs	r2, #1
   16864:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
   16866:	4bde      	ldr	r3, [pc, #888]	; (16be0 <processOnSMS+0x1b04>)
   16868:	78db      	ldrb	r3, [r3, #3]
   1686a:	2b00      	cmp	r3, #0
   1686c:	d038      	beq.n	168e0 <processOnSMS+0x1804>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
   1686e:	4bdc      	ldr	r3, [pc, #880]	; (16be0 <processOnSMS+0x1b04>)
   16870:	791b      	ldrb	r3, [r3, #4]
   16872:	2b00      	cmp	r3, #0
   16874:	d111      	bne.n	1689a <processOnSMS+0x17be>
				{
					response_sms_processed_cmd = false;
   16876:	4bdb      	ldr	r3, [pc, #876]	; (16be4 <processOnSMS+0x1b08>)
   16878:	2298      	movs	r2, #152	; 0x98
   1687a:	0052      	lsls	r2, r2, #1
   1687c:	4694      	mov	ip, r2
   1687e:	2220      	movs	r2, #32
   16880:	4690      	mov	r8, r2
   16882:	2208      	movs	r2, #8
   16884:	4691      	mov	r9, r2
   16886:	44b9      	add	r9, r7
   16888:	44c8      	add	r8, r9
   1688a:	44c4      	add	ip, r8
   1688c:	4463      	add	r3, ip
   1688e:	2200      	movs	r2, #0
   16890:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
   16892:	4bd5      	ldr	r3, [pc, #852]	; (16be8 <processOnSMS+0x1b0c>)
   16894:	4798      	blx	r3
   16896:	f001 f8e0 	bl	17a5a <processOnSMS+0x297e>
				}
				else
				{
					response_sms_processed_cmd = true;
   1689a:	4bd2      	ldr	r3, [pc, #840]	; (16be4 <processOnSMS+0x1b08>)
   1689c:	2298      	movs	r2, #152	; 0x98
   1689e:	0052      	lsls	r2, r2, #1
   168a0:	4694      	mov	ip, r2
   168a2:	2220      	movs	r2, #32
   168a4:	4690      	mov	r8, r2
   168a6:	2208      	movs	r2, #8
   168a8:	4691      	mov	r9, r2
   168aa:	44b9      	add	r9, r7
   168ac:	44c8      	add	r8, r9
   168ae:	44c4      	add	ip, r8
   168b0:	4463      	add	r3, ip
   168b2:	2201      	movs	r2, #1
   168b4:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
   168b6:	230c      	movs	r3, #12
   168b8:	2220      	movs	r2, #32
   168ba:	4694      	mov	ip, r2
   168bc:	2208      	movs	r2, #8
   168be:	4690      	mov	r8, r2
   168c0:	44b8      	add	r8, r7
   168c2:	44c4      	add	ip, r8
   168c4:	4463      	add	r3, ip
   168c6:	4ac9      	ldr	r2, [pc, #804]	; (16bec <processOnSMS+0x1b10>)
   168c8:	ca13      	ldmia	r2!, {r0, r1, r4}
   168ca:	c313      	stmia	r3!, {r0, r1, r4}
   168cc:	ca13      	ldmia	r2!, {r0, r1, r4}
   168ce:	c313      	stmia	r3!, {r0, r1, r4}
   168d0:	ca13      	ldmia	r2!, {r0, r1, r4}
   168d2:	c313      	stmia	r3!, {r0, r1, r4}
   168d4:	ca03      	ldmia	r2!, {r0, r1}
   168d6:	c303      	stmia	r3!, {r0, r1}
   168d8:	8812      	ldrh	r2, [r2, #0]
   168da:	801a      	strh	r2, [r3, #0]
   168dc:	f001 f8bd 	bl	17a5a <processOnSMS+0x297e>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
   168e0:	4bc0      	ldr	r3, [pc, #768]	; (16be4 <processOnSMS+0x1b08>)
   168e2:	2298      	movs	r2, #152	; 0x98
   168e4:	0052      	lsls	r2, r2, #1
   168e6:	4694      	mov	ip, r2
   168e8:	2220      	movs	r2, #32
   168ea:	4690      	mov	r8, r2
   168ec:	2208      	movs	r2, #8
   168ee:	4691      	mov	r9, r2
   168f0:	44b9      	add	r9, r7
   168f2:	44c8      	add	r8, r9
   168f4:	44c4      	add	ip, r8
   168f6:	4463      	add	r3, ip
   168f8:	2201      	movs	r2, #1
   168fa:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
   168fc:	230c      	movs	r3, #12
   168fe:	2220      	movs	r2, #32
   16900:	4694      	mov	ip, r2
   16902:	2208      	movs	r2, #8
   16904:	4690      	mov	r8, r2
   16906:	44b8      	add	r8, r7
   16908:	44c4      	add	ip, r8
   1690a:	4463      	add	r3, ip
   1690c:	4ab8      	ldr	r2, [pc, #736]	; (16bf0 <processOnSMS+0x1b14>)
   1690e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16910:	c313      	stmia	r3!, {r0, r1, r4}
   16912:	ca13      	ldmia	r2!, {r0, r1, r4}
   16914:	c313      	stmia	r3!, {r0, r1, r4}
   16916:	ca13      	ldmia	r2!, {r0, r1, r4}
   16918:	c313      	stmia	r3!, {r0, r1, r4}
   1691a:	7812      	ldrb	r2, [r2, #0]
   1691c:	701a      	strb	r2, [r3, #0]
   1691e:	f001 f89c 	bl	17a5a <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
   16922:	4ab4      	ldr	r2, [pc, #720]	; (16bf4 <processOnSMS+0x1b18>)
   16924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16926:	0011      	movs	r1, r2
   16928:	0018      	movs	r0, r3
   1692a:	4bab      	ldr	r3, [pc, #684]	; (16bd8 <processOnSMS+0x1afc>)
   1692c:	4798      	blx	r3
   1692e:	1e03      	subs	r3, r0, #0
   16930:	d033      	beq.n	1699a <processOnSMS+0x18be>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   16932:	4baa      	ldr	r3, [pc, #680]	; (16bdc <processOnSMS+0x1b00>)
   16934:	78db      	ldrb	r3, [r3, #3]
   16936:	2b00      	cmp	r3, #0
   16938:	d101      	bne.n	1693e <processOnSMS+0x1862>
   1693a:	f001 f88e 	bl	17a5a <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   1693e:	2330      	movs	r3, #48	; 0x30
   16940:	33ff      	adds	r3, #255	; 0xff
   16942:	2220      	movs	r2, #32
   16944:	4694      	mov	ip, r2
   16946:	2208      	movs	r2, #8
   16948:	4690      	mov	r8, r2
   1694a:	44b8      	add	r8, r7
   1694c:	44c4      	add	ip, r8
   1694e:	4463      	add	r3, ip
   16950:	2201      	movs	r2, #1
   16952:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
   16954:	2000      	movs	r0, #0
   16956:	4ba8      	ldr	r3, [pc, #672]	; (16bf8 <processOnSMS+0x1b1c>)
   16958:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   1695a:	4ba2      	ldr	r3, [pc, #648]	; (16be4 <processOnSMS+0x1b08>)
   1695c:	2298      	movs	r2, #152	; 0x98
   1695e:	0052      	lsls	r2, r2, #1
   16960:	4694      	mov	ip, r2
   16962:	2220      	movs	r2, #32
   16964:	4690      	mov	r8, r2
   16966:	2208      	movs	r2, #8
   16968:	4691      	mov	r9, r2
   1696a:	44b9      	add	r9, r7
   1696c:	44c8      	add	r8, r9
   1696e:	44c4      	add	ip, r8
   16970:	4463      	add	r3, ip
   16972:	781b      	ldrb	r3, [r3, #0]
   16974:	2b00      	cmp	r3, #0
   16976:	d101      	bne.n	1697c <processOnSMS+0x18a0>
   16978:	f001 f86f 	bl	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
   1697c:	230c      	movs	r3, #12
   1697e:	2220      	movs	r2, #32
   16980:	4694      	mov	ip, r2
   16982:	2208      	movs	r2, #8
   16984:	4690      	mov	r8, r2
   16986:	44b8      	add	r8, r7
   16988:	44c4      	add	ip, r8
   1698a:	4463      	add	r3, ip
   1698c:	4a9b      	ldr	r2, [pc, #620]	; (16bfc <processOnSMS+0x1b20>)
   1698e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16990:	c313      	stmia	r3!, {r0, r1, r4}
   16992:	6812      	ldr	r2, [r2, #0]
   16994:	601a      	str	r2, [r3, #0]
   16996:	f001 f860 	bl	17a5a <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
   1699a:	4a99      	ldr	r2, [pc, #612]	; (16c00 <processOnSMS+0x1b24>)
   1699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1699e:	0011      	movs	r1, r2
   169a0:	0018      	movs	r0, r3
   169a2:	4b8d      	ldr	r3, [pc, #564]	; (16bd8 <processOnSMS+0x1afc>)
   169a4:	4798      	blx	r3
   169a6:	1e03      	subs	r3, r0, #0
   169a8:	d025      	beq.n	169f6 <processOnSMS+0x191a>
	{
		incomingSMSProcessed=true;
   169aa:	2330      	movs	r3, #48	; 0x30
   169ac:	33ff      	adds	r3, #255	; 0xff
   169ae:	2220      	movs	r2, #32
   169b0:	4694      	mov	ip, r2
   169b2:	2208      	movs	r2, #8
   169b4:	4690      	mov	r8, r2
   169b6:	44b8      	add	r8, r7
   169b8:	44c4      	add	ip, r8
   169ba:	4463      	add	r3, ip
   169bc:	2201      	movs	r2, #1
   169be:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
   169c0:	4b88      	ldr	r3, [pc, #544]	; (16be4 <processOnSMS+0x1b08>)
   169c2:	2298      	movs	r2, #152	; 0x98
   169c4:	0052      	lsls	r2, r2, #1
   169c6:	4694      	mov	ip, r2
   169c8:	2220      	movs	r2, #32
   169ca:	4690      	mov	r8, r2
   169cc:	2208      	movs	r2, #8
   169ce:	4691      	mov	r9, r2
   169d0:	44b9      	add	r9, r7
   169d2:	44c8      	add	r8, r9
   169d4:	44c4      	add	ip, r8
   169d6:	4463      	add	r3, ip
   169d8:	2201      	movs	r2, #1
   169da:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(resep_msg);
   169dc:	230c      	movs	r3, #12
   169de:	2220      	movs	r2, #32
   169e0:	4694      	mov	ip, r2
   169e2:	2208      	movs	r2, #8
   169e4:	4690      	mov	r8, r2
   169e6:	44b8      	add	r8, r7
   169e8:	44c4      	add	ip, r8
   169ea:	4463      	add	r3, ip
   169ec:	0018      	movs	r0, r3
   169ee:	4b85      	ldr	r3, [pc, #532]	; (16c04 <processOnSMS+0x1b28>)
   169f0:	4798      	blx	r3
   169f2:	f001 f832 	bl	17a5a <processOnSMS+0x297e>
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
   169f6:	4a84      	ldr	r2, [pc, #528]	; (16c08 <processOnSMS+0x1b2c>)
   169f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   169fa:	0011      	movs	r1, r2
   169fc:	0018      	movs	r0, r3
   169fe:	4b76      	ldr	r3, [pc, #472]	; (16bd8 <processOnSMS+0x1afc>)
   16a00:	4798      	blx	r3
   16a02:	1e03      	subs	r3, r0, #0
   16a04:	d073      	beq.n	16aee <processOnSMS+0x1a12>
   16a06:	4b81      	ldr	r3, [pc, #516]	; (16c0c <processOnSMS+0x1b30>)
   16a08:	2298      	movs	r2, #152	; 0x98
   16a0a:	0052      	lsls	r2, r2, #1
   16a0c:	4694      	mov	ip, r2
   16a0e:	2220      	movs	r2, #32
   16a10:	4690      	mov	r8, r2
   16a12:	2208      	movs	r2, #8
   16a14:	4691      	mov	r9, r2
   16a16:	44b9      	add	r9, r7
   16a18:	44c8      	add	r8, r9
   16a1a:	44c4      	add	ip, r8
   16a1c:	4463      	add	r3, ip
   16a1e:	781b      	ldrb	r3, [r3, #0]
   16a20:	2b00      	cmp	r3, #0
   16a22:	d10e      	bne.n	16a42 <processOnSMS+0x1966>
   16a24:	4b7a      	ldr	r3, [pc, #488]	; (16c10 <processOnSMS+0x1b34>)
   16a26:	2298      	movs	r2, #152	; 0x98
   16a28:	0052      	lsls	r2, r2, #1
   16a2a:	4694      	mov	ip, r2
   16a2c:	2220      	movs	r2, #32
   16a2e:	4690      	mov	r8, r2
   16a30:	2208      	movs	r2, #8
   16a32:	4691      	mov	r9, r2
   16a34:	44b9      	add	r9, r7
   16a36:	44c8      	add	r8, r9
   16a38:	44c4      	add	ip, r8
   16a3a:	4463      	add	r3, ip
   16a3c:	781b      	ldrb	r3, [r3, #0]
   16a3e:	2b00      	cmp	r3, #0
   16a40:	d055      	beq.n	16aee <processOnSMS+0x1a12>
	{
		incomingSMSProcessed=true;
   16a42:	2330      	movs	r3, #48	; 0x30
   16a44:	33ff      	adds	r3, #255	; 0xff
   16a46:	2220      	movs	r2, #32
   16a48:	4694      	mov	ip, r2
   16a4a:	2208      	movs	r2, #8
   16a4c:	4690      	mov	r8, r2
   16a4e:	44b8      	add	r8, r7
   16a50:	44c4      	add	ip, r8
   16a52:	4463      	add	r3, ip
   16a54:	2201      	movs	r2, #1
   16a56:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
   16a58:	4b6e      	ldr	r3, [pc, #440]	; (16c14 <processOnSMS+0x1b38>)
   16a5a:	789b      	ldrb	r3, [r3, #2]
   16a5c:	2b00      	cmp	r3, #0
   16a5e:	d022      	beq.n	16aa6 <processOnSMS+0x19ca>
		{
			saveAlterNumberSetting(true);
   16a60:	2001      	movs	r0, #1
   16a62:	4b6d      	ldr	r3, [pc, #436]	; (16c18 <processOnSMS+0x1b3c>)
   16a64:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   16a66:	4b5f      	ldr	r3, [pc, #380]	; (16be4 <processOnSMS+0x1b08>)
   16a68:	2298      	movs	r2, #152	; 0x98
   16a6a:	0052      	lsls	r2, r2, #1
   16a6c:	4694      	mov	ip, r2
   16a6e:	2220      	movs	r2, #32
   16a70:	4690      	mov	r8, r2
   16a72:	2208      	movs	r2, #8
   16a74:	4691      	mov	r9, r2
   16a76:	44b9      	add	r9, r7
   16a78:	44c8      	add	r8, r9
   16a7a:	44c4      	add	ip, r8
   16a7c:	4463      	add	r3, ip
   16a7e:	781b      	ldrb	r3, [r3, #0]
   16a80:	2b00      	cmp	r3, #0
   16a82:	d101      	bne.n	16a88 <processOnSMS+0x19ac>
   16a84:	f000 ffe8 	bl	17a58 <processOnSMS+0x297c>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
   16a88:	230c      	movs	r3, #12
   16a8a:	2220      	movs	r2, #32
   16a8c:	4694      	mov	ip, r2
   16a8e:	2208      	movs	r2, #8
   16a90:	4690      	mov	r8, r2
   16a92:	44b8      	add	r8, r7
   16a94:	44c4      	add	ip, r8
   16a96:	4463      	add	r3, ip
   16a98:	4a60      	ldr	r2, [pc, #384]	; (16c1c <processOnSMS+0x1b40>)
   16a9a:	ca13      	ldmia	r2!, {r0, r1, r4}
   16a9c:	c313      	stmia	r3!, {r0, r1, r4}
   16a9e:	ca03      	ldmia	r2!, {r0, r1}
   16aa0:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
   16aa2:	f000 ffd9 	bl	17a58 <processOnSMS+0x297c>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
   16aa6:	4b4f      	ldr	r3, [pc, #316]	; (16be4 <processOnSMS+0x1b08>)
   16aa8:	2298      	movs	r2, #152	; 0x98
   16aaa:	0052      	lsls	r2, r2, #1
   16aac:	4694      	mov	ip, r2
   16aae:	2220      	movs	r2, #32
   16ab0:	4690      	mov	r8, r2
   16ab2:	2208      	movs	r2, #8
   16ab4:	4691      	mov	r9, r2
   16ab6:	44b9      	add	r9, r7
   16ab8:	44c8      	add	r8, r9
   16aba:	44c4      	add	ip, r8
   16abc:	4463      	add	r3, ip
   16abe:	781b      	ldrb	r3, [r3, #0]
   16ac0:	2b00      	cmp	r3, #0
   16ac2:	d101      	bne.n	16ac8 <processOnSMS+0x19ec>
   16ac4:	f000 ffc8 	bl	17a58 <processOnSMS+0x297c>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
   16ac8:	230c      	movs	r3, #12
   16aca:	2220      	movs	r2, #32
   16acc:	4694      	mov	ip, r2
   16ace:	2208      	movs	r2, #8
   16ad0:	4690      	mov	r8, r2
   16ad2:	44b8      	add	r8, r7
   16ad4:	44c4      	add	ip, r8
   16ad6:	4463      	add	r3, ip
   16ad8:	4a51      	ldr	r2, [pc, #324]	; (16c20 <processOnSMS+0x1b44>)
   16ada:	ca13      	ldmia	r2!, {r0, r1, r4}
   16adc:	c313      	stmia	r3!, {r0, r1, r4}
   16ade:	ca13      	ldmia	r2!, {r0, r1, r4}
   16ae0:	c313      	stmia	r3!, {r0, r1, r4}
   16ae2:	6811      	ldr	r1, [r2, #0]
   16ae4:	6019      	str	r1, [r3, #0]
   16ae6:	7912      	ldrb	r2, [r2, #4]
   16ae8:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
   16aea:	f000 ffb5 	bl	17a58 <processOnSMS+0x297c>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
   16aee:	4a4d      	ldr	r2, [pc, #308]	; (16c24 <processOnSMS+0x1b48>)
   16af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16af2:	0011      	movs	r1, r2
   16af4:	0018      	movs	r0, r3
   16af6:	4b38      	ldr	r3, [pc, #224]	; (16bd8 <processOnSMS+0x1afc>)
   16af8:	4798      	blx	r3
   16afa:	1e03      	subs	r3, r0, #0
   16afc:	d02f      	beq.n	16b5e <processOnSMS+0x1a82>
	{
		saveAlterNumberSetting(false);
   16afe:	2000      	movs	r0, #0
   16b00:	4b45      	ldr	r3, [pc, #276]	; (16c18 <processOnSMS+0x1b3c>)
   16b02:	4798      	blx	r3
		incomingSMSProcessed=true;
   16b04:	2330      	movs	r3, #48	; 0x30
   16b06:	33ff      	adds	r3, #255	; 0xff
   16b08:	2220      	movs	r2, #32
   16b0a:	4694      	mov	ip, r2
   16b0c:	2208      	movs	r2, #8
   16b0e:	4690      	mov	r8, r2
   16b10:	44b8      	add	r8, r7
   16b12:	44c4      	add	ip, r8
   16b14:	4463      	add	r3, ip
   16b16:	2201      	movs	r2, #1
   16b18:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16b1a:	4b32      	ldr	r3, [pc, #200]	; (16be4 <processOnSMS+0x1b08>)
   16b1c:	2298      	movs	r2, #152	; 0x98
   16b1e:	0052      	lsls	r2, r2, #1
   16b20:	4694      	mov	ip, r2
   16b22:	2220      	movs	r2, #32
   16b24:	4690      	mov	r8, r2
   16b26:	2208      	movs	r2, #8
   16b28:	4691      	mov	r9, r2
   16b2a:	44b9      	add	r9, r7
   16b2c:	44c8      	add	r8, r9
   16b2e:	44c4      	add	ip, r8
   16b30:	4463      	add	r3, ip
   16b32:	781b      	ldrb	r3, [r3, #0]
   16b34:	2b00      	cmp	r3, #0
   16b36:	d101      	bne.n	16b3c <processOnSMS+0x1a60>
   16b38:	f000 ff8f 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
   16b3c:	230c      	movs	r3, #12
   16b3e:	2220      	movs	r2, #32
   16b40:	4694      	mov	ip, r2
   16b42:	2208      	movs	r2, #8
   16b44:	4690      	mov	r8, r2
   16b46:	44b8      	add	r8, r7
   16b48:	44c4      	add	ip, r8
   16b4a:	4463      	add	r3, ip
   16b4c:	4a36      	ldr	r2, [pc, #216]	; (16c28 <processOnSMS+0x1b4c>)
   16b4e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16b50:	c313      	stmia	r3!, {r0, r1, r4}
   16b52:	ca13      	ldmia	r2!, {r0, r1, r4}
   16b54:	c313      	stmia	r3!, {r0, r1, r4}
   16b56:	6812      	ldr	r2, [r2, #0]
   16b58:	601a      	str	r2, [r3, #0]
   16b5a:	f000 ff7e 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
   16b5e:	4a33      	ldr	r2, [pc, #204]	; (16c2c <processOnSMS+0x1b50>)
   16b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b62:	0011      	movs	r1, r2
   16b64:	0018      	movs	r0, r3
   16b66:	4b1c      	ldr	r3, [pc, #112]	; (16bd8 <processOnSMS+0x1afc>)
   16b68:	4798      	blx	r3
   16b6a:	1e03      	subs	r3, r0, #0
   16b6c:	d064      	beq.n	16c38 <processOnSMS+0x1b5c>
	{
		saveNoCallSettings(false,0,0,0,0);
   16b6e:	2300      	movs	r3, #0
   16b70:	9300      	str	r3, [sp, #0]
   16b72:	2300      	movs	r3, #0
   16b74:	2200      	movs	r2, #0
   16b76:	2100      	movs	r1, #0
   16b78:	2000      	movs	r0, #0
   16b7a:	4c2d      	ldr	r4, [pc, #180]	; (16c30 <processOnSMS+0x1b54>)
   16b7c:	47a0      	blx	r4
		incomingSMSProcessed=true;
   16b7e:	2330      	movs	r3, #48	; 0x30
   16b80:	33ff      	adds	r3, #255	; 0xff
   16b82:	2220      	movs	r2, #32
   16b84:	4694      	mov	ip, r2
   16b86:	2208      	movs	r2, #8
   16b88:	4690      	mov	r8, r2
   16b8a:	44b8      	add	r8, r7
   16b8c:	44c4      	add	ip, r8
   16b8e:	4463      	add	r3, ip
   16b90:	2201      	movs	r2, #1
   16b92:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   16b94:	4b13      	ldr	r3, [pc, #76]	; (16be4 <processOnSMS+0x1b08>)
   16b96:	2298      	movs	r2, #152	; 0x98
   16b98:	0052      	lsls	r2, r2, #1
   16b9a:	4694      	mov	ip, r2
   16b9c:	2220      	movs	r2, #32
   16b9e:	4690      	mov	r8, r2
   16ba0:	2208      	movs	r2, #8
   16ba2:	4691      	mov	r9, r2
   16ba4:	44b9      	add	r9, r7
   16ba6:	44c8      	add	r8, r9
   16ba8:	44c4      	add	ip, r8
   16baa:	4463      	add	r3, ip
   16bac:	781b      	ldrb	r3, [r3, #0]
   16bae:	2b00      	cmp	r3, #0
   16bb0:	d101      	bne.n	16bb6 <processOnSMS+0x1ada>
   16bb2:	f000 ff52 	bl	17a5a <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
   16bb6:	230c      	movs	r3, #12
   16bb8:	2220      	movs	r2, #32
   16bba:	4694      	mov	ip, r2
   16bbc:	2208      	movs	r2, #8
   16bbe:	4690      	mov	r8, r2
   16bc0:	44b8      	add	r8, r7
   16bc2:	44c4      	add	ip, r8
   16bc4:	4463      	add	r3, ip
   16bc6:	4a1b      	ldr	r2, [pc, #108]	; (16c34 <processOnSMS+0x1b58>)
   16bc8:	ca13      	ldmia	r2!, {r0, r1, r4}
   16bca:	c313      	stmia	r3!, {r0, r1, r4}
   16bcc:	ca03      	ldmia	r2!, {r0, r1}
   16bce:	c303      	stmia	r3!, {r0, r1}
   16bd0:	f000 ff43 	bl	17a5a <processOnSMS+0x297e>
   16bd4:	0002ad74 	.word	0x0002ad74
   16bd8:	0001420d 	.word	0x0001420d
   16bdc:	2000082c 	.word	0x2000082c
   16be0:	20000754 	.word	0x20000754
   16be4:	fffffed2 	.word	0xfffffed2
   16be8:	00017d89 	.word	0x00017d89
   16bec:	0002ad7c 	.word	0x0002ad7c
   16bf0:	0002adac 	.word	0x0002adac
   16bf4:	0002add4 	.word	0x0002add4
   16bf8:	00010be5 	.word	0x00010be5
   16bfc:	0002addc 	.word	0x0002addc
   16c00:	0002adec 	.word	0x0002adec
   16c04:	00017b4d 	.word	0x00017b4d
   16c08:	0002a9d0 	.word	0x0002a9d0
   16c0c:	fffffed3 	.word	0xfffffed3
   16c10:	fffffed1 	.word	0xfffffed1
   16c14:	2000083c 	.word	0x2000083c
   16c18:	000111e9 	.word	0x000111e9
   16c1c:	0002adf4 	.word	0x0002adf4
   16c20:	0002ae08 	.word	0x0002ae08
   16c24:	0002ae28 	.word	0x0002ae28
   16c28:	0002ae30 	.word	0x0002ae30
   16c2c:	0002ae4c 	.word	0x0002ae4c
   16c30:	000113d9 	.word	0x000113d9
   16c34:	0002ae54 	.word	0x0002ae54
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
   16c38:	4adc      	ldr	r2, [pc, #880]	; (16fac <processOnSMS+0x1ed0>)
   16c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c3c:	0011      	movs	r1, r2
   16c3e:	0018      	movs	r0, r3
   16c40:	4bdb      	ldr	r3, [pc, #876]	; (16fb0 <processOnSMS+0x1ed4>)
   16c42:	4798      	blx	r3
   16c44:	1e03      	subs	r3, r0, #0
   16c46:	d053      	beq.n	16cf0 <processOnSMS+0x1c14>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
   16c48:	230a      	movs	r3, #10
   16c4a:	2220      	movs	r2, #32
   16c4c:	2108      	movs	r1, #8
   16c4e:	468c      	mov	ip, r1
   16c50:	44bc      	add	ip, r7
   16c52:	4462      	add	r2, ip
   16c54:	18d2      	adds	r2, r2, r3
   16c56:	230b      	movs	r3, #11
   16c58:	2120      	movs	r1, #32
   16c5a:	468c      	mov	ip, r1
   16c5c:	2108      	movs	r1, #8
   16c5e:	4688      	mov	r8, r1
   16c60:	44b8      	add	r8, r7
   16c62:	44c4      	add	ip, r8
   16c64:	4463      	add	r3, ip
   16c66:	0011      	movs	r1, r2
   16c68:	0018      	movs	r0, r3
   16c6a:	4bd2      	ldr	r3, [pc, #840]	; (16fb4 <processOnSMS+0x1ed8>)
   16c6c:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
   16c6e:	4bd2      	ldr	r3, [pc, #840]	; (16fb8 <processOnSMS+0x1edc>)
   16c70:	2298      	movs	r2, #152	; 0x98
   16c72:	0052      	lsls	r2, r2, #1
   16c74:	4694      	mov	ip, r2
   16c76:	2220      	movs	r2, #32
   16c78:	4690      	mov	r8, r2
   16c7a:	2208      	movs	r2, #8
   16c7c:	4691      	mov	r9, r2
   16c7e:	44b9      	add	r9, r7
   16c80:	44c8      	add	r8, r9
   16c82:	44c4      	add	ip, r8
   16c84:	4463      	add	r3, ip
   16c86:	781b      	ldrb	r3, [r3, #0]
   16c88:	001a      	movs	r2, r3
   16c8a:	4bcc      	ldr	r3, [pc, #816]	; (16fbc <processOnSMS+0x1ee0>)
   16c8c:	2198      	movs	r1, #152	; 0x98
   16c8e:	0049      	lsls	r1, r1, #1
   16c90:	468c      	mov	ip, r1
   16c92:	2120      	movs	r1, #32
   16c94:	4688      	mov	r8, r1
   16c96:	2108      	movs	r1, #8
   16c98:	4689      	mov	r9, r1
   16c9a:	44b9      	add	r9, r7
   16c9c:	44c8      	add	r8, r9
   16c9e:	44c4      	add	ip, r8
   16ca0:	4463      	add	r3, ip
   16ca2:	781b      	ldrb	r3, [r3, #0]
   16ca4:	49c6      	ldr	r1, [pc, #792]	; (16fc0 <processOnSMS+0x1ee4>)
   16ca6:	200c      	movs	r0, #12
   16ca8:	2420      	movs	r4, #32
   16caa:	46a4      	mov	ip, r4
   16cac:	2408      	movs	r4, #8
   16cae:	46a0      	mov	r8, r4
   16cb0:	44b8      	add	r8, r7
   16cb2:	44c4      	add	ip, r8
   16cb4:	4460      	add	r0, ip
   16cb6:	4cc3      	ldr	r4, [pc, #780]	; (16fc4 <processOnSMS+0x1ee8>)
   16cb8:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
   16cba:	2330      	movs	r3, #48	; 0x30
   16cbc:	33ff      	adds	r3, #255	; 0xff
   16cbe:	2220      	movs	r2, #32
   16cc0:	4694      	mov	ip, r2
   16cc2:	2208      	movs	r2, #8
   16cc4:	4690      	mov	r8, r2
   16cc6:	44b8      	add	r8, r7
   16cc8:	44c4      	add	ip, r8
   16cca:	4463      	add	r3, ip
   16ccc:	2201      	movs	r2, #1
   16cce:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
   16cd0:	4bbd      	ldr	r3, [pc, #756]	; (16fc8 <processOnSMS+0x1eec>)
   16cd2:	2298      	movs	r2, #152	; 0x98
   16cd4:	0052      	lsls	r2, r2, #1
   16cd6:	4694      	mov	ip, r2
   16cd8:	2220      	movs	r2, #32
   16cda:	4690      	mov	r8, r2
   16cdc:	2208      	movs	r2, #8
   16cde:	4691      	mov	r9, r2
   16ce0:	44b9      	add	r9, r7
   16ce2:	44c8      	add	r8, r9
   16ce4:	44c4      	add	ip, r8
   16ce6:	4463      	add	r3, ip
   16ce8:	2201      	movs	r2, #1
   16cea:	701a      	strb	r2, [r3, #0]
   16cec:	f000 feb5 	bl	17a5a <processOnSMS+0x297e>
	}
	else if (StringstartsWith(received_command,"SETTIME"))
   16cf0:	4ab6      	ldr	r2, [pc, #728]	; (16fcc <processOnSMS+0x1ef0>)
   16cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cf4:	0011      	movs	r1, r2
   16cf6:	0018      	movs	r0, r3
   16cf8:	4bad      	ldr	r3, [pc, #692]	; (16fb0 <processOnSMS+0x1ed4>)
   16cfa:	4798      	blx	r3
   16cfc:	1e03      	subs	r3, r0, #0
   16cfe:	d001      	beq.n	16d04 <processOnSMS+0x1c28>
   16d00:	f000 feab 	bl	17a5a <processOnSMS+0x297e>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
   16d04:	4ab2      	ldr	r2, [pc, #712]	; (16fd0 <processOnSMS+0x1ef4>)
   16d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16d08:	0011      	movs	r1, r2
   16d0a:	0018      	movs	r0, r3
   16d0c:	4ba8      	ldr	r3, [pc, #672]	; (16fb0 <processOnSMS+0x1ed4>)
   16d0e:	4798      	blx	r3
   16d10:	1e03      	subs	r3, r0, #0
   16d12:	d100      	bne.n	16d16 <processOnSMS+0x1c3a>
   16d14:	e1b7      	b.n	17086 <processOnSMS+0x1faa>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
   16d16:	4aaf      	ldr	r2, [pc, #700]	; (16fd4 <processOnSMS+0x1ef8>)
   16d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16d1a:	0011      	movs	r1, r2
   16d1c:	0018      	movs	r0, r3
   16d1e:	4bae      	ldr	r3, [pc, #696]	; (16fd8 <processOnSMS+0x1efc>)
   16d20:	4798      	blx	r3
   16d22:	0003      	movs	r3, r0
   16d24:	2288      	movs	r2, #136	; 0x88
   16d26:	0052      	lsls	r2, r2, #1
   16d28:	2120      	movs	r1, #32
   16d2a:	468c      	mov	ip, r1
   16d2c:	2108      	movs	r1, #8
   16d2e:	4688      	mov	r8, r1
   16d30:	44b8      	add	r8, r7
   16d32:	44c4      	add	ip, r8
   16d34:	4462      	add	r2, ip
   16d36:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
   16d38:	4ba8      	ldr	r3, [pc, #672]	; (16fdc <processOnSMS+0x1f00>)
   16d3a:	0019      	movs	r1, r3
   16d3c:	2000      	movs	r0, #0
   16d3e:	4ba6      	ldr	r3, [pc, #664]	; (16fd8 <processOnSMS+0x1efc>)
   16d40:	4798      	blx	r3
   16d42:	0003      	movs	r3, r0
   16d44:	2288      	movs	r2, #136	; 0x88
   16d46:	0052      	lsls	r2, r2, #1
   16d48:	2120      	movs	r1, #32
   16d4a:	468c      	mov	ip, r1
   16d4c:	2108      	movs	r1, #8
   16d4e:	4688      	mov	r8, r1
   16d50:	44b8      	add	r8, r7
   16d52:	44c4      	add	ip, r8
   16d54:	4462      	add	r2, ip
   16d56:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
   16d58:	2388      	movs	r3, #136	; 0x88
   16d5a:	005b      	lsls	r3, r3, #1
   16d5c:	2220      	movs	r2, #32
   16d5e:	4694      	mov	ip, r2
   16d60:	2208      	movs	r2, #8
   16d62:	4690      	mov	r8, r2
   16d64:	44b8      	add	r8, r7
   16d66:	44c4      	add	ip, r8
   16d68:	4463      	add	r3, ip
   16d6a:	681b      	ldr	r3, [r3, #0]
   16d6c:	781b      	ldrb	r3, [r3, #0]
   16d6e:	0018      	movs	r0, r3
   16d70:	4b9b      	ldr	r3, [pc, #620]	; (16fe0 <processOnSMS+0x1f04>)
   16d72:	4798      	blx	r3
   16d74:	0002      	movs	r2, r0
   16d76:	2310      	movs	r3, #16
   16d78:	33ff      	adds	r3, #255	; 0xff
   16d7a:	2120      	movs	r1, #32
   16d7c:	468c      	mov	ip, r1
   16d7e:	2108      	movs	r1, #8
   16d80:	4688      	mov	r8, r1
   16d82:	44b8      	add	r8, r7
   16d84:	44c4      	add	ip, r8
   16d86:	4463      	add	r3, ip
   16d88:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
   16d8a:	4b92      	ldr	r3, [pc, #584]	; (16fd4 <processOnSMS+0x1ef8>)
   16d8c:	0019      	movs	r1, r3
   16d8e:	2000      	movs	r0, #0
   16d90:	4b91      	ldr	r3, [pc, #580]	; (16fd8 <processOnSMS+0x1efc>)
   16d92:	4798      	blx	r3
   16d94:	0003      	movs	r3, r0
   16d96:	2288      	movs	r2, #136	; 0x88
   16d98:	0052      	lsls	r2, r2, #1
   16d9a:	2120      	movs	r1, #32
   16d9c:	468c      	mov	ip, r1
   16d9e:	2108      	movs	r1, #8
   16da0:	4688      	mov	r8, r1
   16da2:	44b8      	add	r8, r7
   16da4:	44c4      	add	ip, r8
   16da6:	4462      	add	r2, ip
   16da8:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
   16daa:	2388      	movs	r3, #136	; 0x88
   16dac:	005b      	lsls	r3, r3, #1
   16dae:	2220      	movs	r2, #32
   16db0:	4694      	mov	ip, r2
   16db2:	2208      	movs	r2, #8
   16db4:	4690      	mov	r8, r2
   16db6:	44b8      	add	r8, r7
   16db8:	44c4      	add	ip, r8
   16dba:	4463      	add	r3, ip
   16dbc:	681b      	ldr	r3, [r3, #0]
   16dbe:	781b      	ldrb	r3, [r3, #0]
   16dc0:	0018      	movs	r0, r3
   16dc2:	4b87      	ldr	r3, [pc, #540]	; (16fe0 <processOnSMS+0x1f04>)
   16dc4:	4798      	blx	r3
   16dc6:	0002      	movs	r2, r0
   16dc8:	2387      	movs	r3, #135	; 0x87
   16dca:	005b      	lsls	r3, r3, #1
   16dcc:	2120      	movs	r1, #32
   16dce:	468c      	mov	ip, r1
   16dd0:	2108      	movs	r1, #8
   16dd2:	4688      	mov	r8, r1
   16dd4:	44b8      	add	r8, r7
   16dd6:	44c4      	add	ip, r8
   16dd8:	4463      	add	r3, ip
   16dda:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16ddc:	4b7f      	ldr	r3, [pc, #508]	; (16fdc <processOnSMS+0x1f00>)
   16dde:	0019      	movs	r1, r3
   16de0:	2000      	movs	r0, #0
   16de2:	4b7d      	ldr	r3, [pc, #500]	; (16fd8 <processOnSMS+0x1efc>)
   16de4:	4798      	blx	r3
   16de6:	0003      	movs	r3, r0
   16de8:	2288      	movs	r2, #136	; 0x88
   16dea:	0052      	lsls	r2, r2, #1
   16dec:	2120      	movs	r1, #32
   16dee:	468c      	mov	ip, r1
   16df0:	2108      	movs	r1, #8
   16df2:	4688      	mov	r8, r1
   16df4:	44b8      	add	r8, r7
   16df6:	44c4      	add	ip, r8
   16df8:	4462      	add	r2, ip
   16dfa:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
   16dfc:	2388      	movs	r3, #136	; 0x88
   16dfe:	005b      	lsls	r3, r3, #1
   16e00:	2220      	movs	r2, #32
   16e02:	4694      	mov	ip, r2
   16e04:	2208      	movs	r2, #8
   16e06:	4690      	mov	r8, r2
   16e08:	44b8      	add	r8, r7
   16e0a:	44c4      	add	ip, r8
   16e0c:	4463      	add	r3, ip
   16e0e:	681b      	ldr	r3, [r3, #0]
   16e10:	781b      	ldrb	r3, [r3, #0]
   16e12:	0018      	movs	r0, r3
   16e14:	4b72      	ldr	r3, [pc, #456]	; (16fe0 <processOnSMS+0x1f04>)
   16e16:	4798      	blx	r3
   16e18:	0002      	movs	r2, r0
   16e1a:	230e      	movs	r3, #14
   16e1c:	33ff      	adds	r3, #255	; 0xff
   16e1e:	2120      	movs	r1, #32
   16e20:	468c      	mov	ip, r1
   16e22:	2108      	movs	r1, #8
   16e24:	4688      	mov	r8, r1
   16e26:	44b8      	add	r8, r7
   16e28:	44c4      	add	ip, r8
   16e2a:	4463      	add	r3, ip
   16e2c:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16e2e:	4b6b      	ldr	r3, [pc, #428]	; (16fdc <processOnSMS+0x1f00>)
   16e30:	0019      	movs	r1, r3
   16e32:	2000      	movs	r0, #0
   16e34:	4b68      	ldr	r3, [pc, #416]	; (16fd8 <processOnSMS+0x1efc>)
   16e36:	4798      	blx	r3
   16e38:	0003      	movs	r3, r0
   16e3a:	2288      	movs	r2, #136	; 0x88
   16e3c:	0052      	lsls	r2, r2, #1
   16e3e:	2120      	movs	r1, #32
   16e40:	468c      	mov	ip, r1
   16e42:	2108      	movs	r1, #8
   16e44:	4688      	mov	r8, r1
   16e46:	44b8      	add	r8, r7
   16e48:	44c4      	add	ip, r8
   16e4a:	4462      	add	r2, ip
   16e4c:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
   16e4e:	2388      	movs	r3, #136	; 0x88
   16e50:	005b      	lsls	r3, r3, #1
   16e52:	2220      	movs	r2, #32
   16e54:	4694      	mov	ip, r2
   16e56:	2208      	movs	r2, #8
   16e58:	4690      	mov	r8, r2
   16e5a:	44b8      	add	r8, r7
   16e5c:	44c4      	add	ip, r8
   16e5e:	4463      	add	r3, ip
   16e60:	681b      	ldr	r3, [r3, #0]
   16e62:	781b      	ldrb	r3, [r3, #0]
   16e64:	0018      	movs	r0, r3
   16e66:	4b5e      	ldr	r3, [pc, #376]	; (16fe0 <processOnSMS+0x1f04>)
   16e68:	4798      	blx	r3
   16e6a:	0002      	movs	r2, r0
   16e6c:	2386      	movs	r3, #134	; 0x86
   16e6e:	005b      	lsls	r3, r3, #1
   16e70:	2120      	movs	r1, #32
   16e72:	468c      	mov	ip, r1
   16e74:	2108      	movs	r1, #8
   16e76:	4688      	mov	r8, r1
   16e78:	44b8      	add	r8, r7
   16e7a:	44c4      	add	ip, r8
   16e7c:	4463      	add	r3, ip
   16e7e:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
   16e80:	2310      	movs	r3, #16
   16e82:	33ff      	adds	r3, #255	; 0xff
   16e84:	2220      	movs	r2, #32
   16e86:	4694      	mov	ip, r2
   16e88:	2208      	movs	r2, #8
   16e8a:	4690      	mov	r8, r2
   16e8c:	44b8      	add	r8, r7
   16e8e:	44c4      	add	ip, r8
   16e90:	4463      	add	r3, ip
   16e92:	781b      	ldrb	r3, [r3, #0]
   16e94:	2b17      	cmp	r3, #23
   16e96:	d901      	bls.n	16e9c <processOnSMS+0x1dc0>
   16e98:	f000 fddf 	bl	17a5a <processOnSMS+0x297e>
   16e9c:	2387      	movs	r3, #135	; 0x87
   16e9e:	005b      	lsls	r3, r3, #1
   16ea0:	2220      	movs	r2, #32
   16ea2:	4694      	mov	ip, r2
   16ea4:	2208      	movs	r2, #8
   16ea6:	4690      	mov	r8, r2
   16ea8:	44b8      	add	r8, r7
   16eaa:	44c4      	add	ip, r8
   16eac:	4463      	add	r3, ip
   16eae:	781b      	ldrb	r3, [r3, #0]
   16eb0:	2b3b      	cmp	r3, #59	; 0x3b
   16eb2:	d901      	bls.n	16eb8 <processOnSMS+0x1ddc>
   16eb4:	f000 fdd1 	bl	17a5a <processOnSMS+0x297e>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
   16eb8:	230e      	movs	r3, #14
   16eba:	33ff      	adds	r3, #255	; 0xff
   16ebc:	2220      	movs	r2, #32
   16ebe:	4694      	mov	ip, r2
   16ec0:	2208      	movs	r2, #8
   16ec2:	4690      	mov	r8, r2
   16ec4:	44b8      	add	r8, r7
   16ec6:	44c4      	add	ip, r8
   16ec8:	4463      	add	r3, ip
   16eca:	781b      	ldrb	r3, [r3, #0]
   16ecc:	2b17      	cmp	r3, #23
   16ece:	d901      	bls.n	16ed4 <processOnSMS+0x1df8>
   16ed0:	f000 fdc3 	bl	17a5a <processOnSMS+0x297e>
   16ed4:	2386      	movs	r3, #134	; 0x86
   16ed6:	005b      	lsls	r3, r3, #1
   16ed8:	2220      	movs	r2, #32
   16eda:	4694      	mov	ip, r2
   16edc:	2208      	movs	r2, #8
   16ede:	4690      	mov	r8, r2
   16ee0:	44b8      	add	r8, r7
   16ee2:	44c4      	add	ip, r8
   16ee4:	4463      	add	r3, ip
   16ee6:	781b      	ldrb	r3, [r3, #0]
   16ee8:	2b3b      	cmp	r3, #59	; 0x3b
   16eea:	d901      	bls.n	16ef0 <processOnSMS+0x1e14>
   16eec:	f000 fdb5 	bl	17a5a <processOnSMS+0x297e>
			{
				incomingSMSProcessed=true;
   16ef0:	2330      	movs	r3, #48	; 0x30
   16ef2:	33ff      	adds	r3, #255	; 0xff
   16ef4:	2220      	movs	r2, #32
   16ef6:	4694      	mov	ip, r2
   16ef8:	2208      	movs	r2, #8
   16efa:	4690      	mov	r8, r2
   16efc:	44b8      	add	r8, r7
   16efe:	44c4      	add	ip, r8
   16f00:	4463      	add	r3, ip
   16f02:	2201      	movs	r2, #1
   16f04:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
   16f06:	2310      	movs	r3, #16
   16f08:	33ff      	adds	r3, #255	; 0xff
   16f0a:	2220      	movs	r2, #32
   16f0c:	2108      	movs	r1, #8
   16f0e:	468c      	mov	ip, r1
   16f10:	44bc      	add	ip, r7
   16f12:	4462      	add	r2, ip
   16f14:	18d2      	adds	r2, r2, r3
   16f16:	230e      	movs	r3, #14
   16f18:	33ff      	adds	r3, #255	; 0xff
   16f1a:	2120      	movs	r1, #32
   16f1c:	468c      	mov	ip, r1
   16f1e:	2108      	movs	r1, #8
   16f20:	4688      	mov	r8, r1
   16f22:	44b8      	add	r8, r7
   16f24:	44c4      	add	ip, r8
   16f26:	4463      	add	r3, ip
   16f28:	7812      	ldrb	r2, [r2, #0]
   16f2a:	781b      	ldrb	r3, [r3, #0]
   16f2c:	429a      	cmp	r2, r3
   16f2e:	d15d      	bne.n	16fec <processOnSMS+0x1f10>
   16f30:	2387      	movs	r3, #135	; 0x87
   16f32:	005b      	lsls	r3, r3, #1
   16f34:	2220      	movs	r2, #32
   16f36:	2108      	movs	r1, #8
   16f38:	468c      	mov	ip, r1
   16f3a:	44bc      	add	ip, r7
   16f3c:	4462      	add	r2, ip
   16f3e:	18d2      	adds	r2, r2, r3
   16f40:	2386      	movs	r3, #134	; 0x86
   16f42:	005b      	lsls	r3, r3, #1
   16f44:	2120      	movs	r1, #32
   16f46:	468c      	mov	ip, r1
   16f48:	2108      	movs	r1, #8
   16f4a:	4688      	mov	r8, r1
   16f4c:	44b8      	add	r8, r7
   16f4e:	44c4      	add	ip, r8
   16f50:	4463      	add	r3, ip
   16f52:	7812      	ldrb	r2, [r2, #0]
   16f54:	781b      	ldrb	r3, [r3, #0]
   16f56:	429a      	cmp	r2, r3
   16f58:	d148      	bne.n	16fec <processOnSMS+0x1f10>
				{
					saveNoCallSettings(false,0,0,0,0);
   16f5a:	2300      	movs	r3, #0
   16f5c:	9300      	str	r3, [sp, #0]
   16f5e:	2300      	movs	r3, #0
   16f60:	2200      	movs	r2, #0
   16f62:	2100      	movs	r1, #0
   16f64:	2000      	movs	r0, #0
   16f66:	4c1f      	ldr	r4, [pc, #124]	; (16fe4 <processOnSMS+0x1f08>)
   16f68:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   16f6a:	4b17      	ldr	r3, [pc, #92]	; (16fc8 <processOnSMS+0x1eec>)
   16f6c:	2298      	movs	r2, #152	; 0x98
   16f6e:	0052      	lsls	r2, r2, #1
   16f70:	4694      	mov	ip, r2
   16f72:	2220      	movs	r2, #32
   16f74:	4690      	mov	r8, r2
   16f76:	2208      	movs	r2, #8
   16f78:	4691      	mov	r9, r2
   16f7a:	44b9      	add	r9, r7
   16f7c:	44c8      	add	r8, r9
   16f7e:	44c4      	add	ip, r8
   16f80:	4463      	add	r3, ip
   16f82:	781b      	ldrb	r3, [r3, #0]
   16f84:	2b00      	cmp	r3, #0
   16f86:	d101      	bne.n	16f8c <processOnSMS+0x1eb0>
   16f88:	f000 fd67 	bl	17a5a <processOnSMS+0x297e>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
   16f8c:	230c      	movs	r3, #12
   16f8e:	2220      	movs	r2, #32
   16f90:	4694      	mov	ip, r2
   16f92:	2208      	movs	r2, #8
   16f94:	4690      	mov	r8, r2
   16f96:	44b8      	add	r8, r7
   16f98:	44c4      	add	ip, r8
   16f9a:	4463      	add	r3, ip
   16f9c:	4a12      	ldr	r2, [pc, #72]	; (16fe8 <processOnSMS+0x1f0c>)
   16f9e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16fa0:	c313      	stmia	r3!, {r0, r1, r4}
   16fa2:	ca03      	ldmia	r2!, {r0, r1}
   16fa4:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
   16fa6:	f000 fd58 	bl	17a5a <processOnSMS+0x297e>
   16faa:	46c0      	nop			; (mov r8, r8)
   16fac:	0002ae68 	.word	0x0002ae68
   16fb0:	0001420d 	.word	0x0001420d
   16fb4:	00017fc1 	.word	0x00017fc1
   16fb8:	fffffedb 	.word	0xfffffedb
   16fbc:	fffffeda 	.word	0xfffffeda
   16fc0:	0002ae70 	.word	0x0002ae70
   16fc4:	00029961 	.word	0x00029961
   16fc8:	fffffed2 	.word	0xfffffed2
   16fcc:	0002ae80 	.word	0x0002ae80
   16fd0:	0002ae88 	.word	0x0002ae88
   16fd4:	0002ae90 	.word	0x0002ae90
   16fd8:	00029a4d 	.word	0x00029a4d
   16fdc:	0002ae94 	.word	0x0002ae94
   16fe0:	00029641 	.word	0x00029641
   16fe4:	000113d9 	.word	0x000113d9
   16fe8:	0002ae54 	.word	0x0002ae54
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
   16fec:	230e      	movs	r3, #14
   16fee:	33ff      	adds	r3, #255	; 0xff
   16ff0:	2220      	movs	r2, #32
   16ff2:	4694      	mov	ip, r2
   16ff4:	2208      	movs	r2, #8
   16ff6:	4690      	mov	r8, r2
   16ff8:	44b8      	add	r8, r7
   16ffa:	44c4      	add	ip, r8
   16ffc:	4463      	add	r3, ip
   16ffe:	7818      	ldrb	r0, [r3, #0]
   17000:	2387      	movs	r3, #135	; 0x87
   17002:	005b      	lsls	r3, r3, #1
   17004:	2220      	movs	r2, #32
   17006:	4694      	mov	ip, r2
   17008:	2208      	movs	r2, #8
   1700a:	4690      	mov	r8, r2
   1700c:	44b8      	add	r8, r7
   1700e:	44c4      	add	ip, r8
   17010:	4463      	add	r3, ip
   17012:	781a      	ldrb	r2, [r3, #0]
   17014:	2310      	movs	r3, #16
   17016:	33ff      	adds	r3, #255	; 0xff
   17018:	2120      	movs	r1, #32
   1701a:	468c      	mov	ip, r1
   1701c:	2108      	movs	r1, #8
   1701e:	4688      	mov	r8, r1
   17020:	44b8      	add	r8, r7
   17022:	44c4      	add	ip, r8
   17024:	4463      	add	r3, ip
   17026:	7819      	ldrb	r1, [r3, #0]
   17028:	2386      	movs	r3, #134	; 0x86
   1702a:	005b      	lsls	r3, r3, #1
   1702c:	2420      	movs	r4, #32
   1702e:	46a4      	mov	ip, r4
   17030:	2408      	movs	r4, #8
   17032:	46a0      	mov	r8, r4
   17034:	44b8      	add	r8, r7
   17036:	44c4      	add	ip, r8
   17038:	4463      	add	r3, ip
   1703a:	781b      	ldrb	r3, [r3, #0]
   1703c:	9300      	str	r3, [sp, #0]
   1703e:	0003      	movs	r3, r0
   17040:	2001      	movs	r0, #1
   17042:	4ce4      	ldr	r4, [pc, #912]	; (173d4 <processOnSMS+0x22f8>)
   17044:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   17046:	4be4      	ldr	r3, [pc, #912]	; (173d8 <processOnSMS+0x22fc>)
   17048:	2298      	movs	r2, #152	; 0x98
   1704a:	0052      	lsls	r2, r2, #1
   1704c:	4694      	mov	ip, r2
   1704e:	2220      	movs	r2, #32
   17050:	4690      	mov	r8, r2
   17052:	2208      	movs	r2, #8
   17054:	4691      	mov	r9, r2
   17056:	44b9      	add	r9, r7
   17058:	44c8      	add	r8, r9
   1705a:	44c4      	add	ip, r8
   1705c:	4463      	add	r3, ip
   1705e:	781b      	ldrb	r3, [r3, #0]
   17060:	2b00      	cmp	r3, #0
   17062:	d101      	bne.n	17068 <processOnSMS+0x1f8c>
   17064:	f000 fcf9 	bl	17a5a <processOnSMS+0x297e>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
   17068:	230c      	movs	r3, #12
   1706a:	2220      	movs	r2, #32
   1706c:	4694      	mov	ip, r2
   1706e:	2208      	movs	r2, #8
   17070:	4690      	mov	r8, r2
   17072:	44b8      	add	r8, r7
   17074:	44c4      	add	ip, r8
   17076:	4463      	add	r3, ip
   17078:	4ad8      	ldr	r2, [pc, #864]	; (173dc <processOnSMS+0x2300>)
   1707a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1707c:	c313      	stmia	r3!, {r0, r1, r4}
   1707e:	ca03      	ldmia	r2!, {r0, r1}
   17080:	c303      	stmia	r3!, {r0, r1}
   17082:	f000 fcea 	bl	17a5a <processOnSMS+0x297e>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
   17086:	4ad6      	ldr	r2, [pc, #856]	; (173e0 <processOnSMS+0x2304>)
   17088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1708a:	0011      	movs	r1, r2
   1708c:	0018      	movs	r0, r3
   1708e:	4bd5      	ldr	r3, [pc, #852]	; (173e4 <processOnSMS+0x2308>)
   17090:	4798      	blx	r3
   17092:	1e03      	subs	r3, r0, #0
   17094:	d073      	beq.n	1717e <processOnSMS+0x20a2>
	{
		memmove(received_command,received_command+5,strlen(received_command));
   17096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17098:	1d5c      	adds	r4, r3, #5
   1709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1709c:	0018      	movs	r0, r3
   1709e:	4bd2      	ldr	r3, [pc, #840]	; (173e8 <processOnSMS+0x230c>)
   170a0:	4798      	blx	r3
   170a2:	0002      	movs	r2, r0
   170a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   170a6:	0021      	movs	r1, r4
   170a8:	0018      	movs	r0, r3
   170aa:	4bd0      	ldr	r3, [pc, #832]	; (173ec <processOnSMS+0x2310>)
   170ac:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
   170ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   170b0:	0018      	movs	r0, r3
   170b2:	4bcf      	ldr	r3, [pc, #828]	; (173f0 <processOnSMS+0x2314>)
   170b4:	4798      	blx	r3
   170b6:	0002      	movs	r2, r0
   170b8:	2391      	movs	r3, #145	; 0x91
   170ba:	005b      	lsls	r3, r3, #1
   170bc:	2120      	movs	r1, #32
   170be:	468c      	mov	ip, r1
   170c0:	2108      	movs	r1, #8
   170c2:	4688      	mov	r8, r1
   170c4:	44b8      	add	r8, r7
   170c6:	44c4      	add	ip, r8
   170c8:	4463      	add	r3, ip
   170ca:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
   170cc:	2391      	movs	r3, #145	; 0x91
   170ce:	005b      	lsls	r3, r3, #1
   170d0:	2220      	movs	r2, #32
   170d2:	4694      	mov	ip, r2
   170d4:	2208      	movs	r2, #8
   170d6:	4690      	mov	r8, r2
   170d8:	44b8      	add	r8, r7
   170da:	44c4      	add	ip, r8
   170dc:	4463      	add	r3, ip
   170de:	881b      	ldrh	r3, [r3, #0]
   170e0:	2b05      	cmp	r3, #5
   170e2:	d90a      	bls.n	170fa <processOnSMS+0x201e>
   170e4:	2391      	movs	r3, #145	; 0x91
   170e6:	005b      	lsls	r3, r3, #1
   170e8:	2220      	movs	r2, #32
   170ea:	4694      	mov	ip, r2
   170ec:	2208      	movs	r2, #8
   170ee:	4690      	mov	r8, r2
   170f0:	44b8      	add	r8, r7
   170f2:	44c4      	add	ip, r8
   170f4:	4463      	add	r3, ip
   170f6:	2205      	movs	r2, #5
   170f8:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
   170fa:	2391      	movs	r3, #145	; 0x91
   170fc:	005b      	lsls	r3, r3, #1
   170fe:	2220      	movs	r2, #32
   17100:	4694      	mov	ip, r2
   17102:	2208      	movs	r2, #8
   17104:	4690      	mov	r8, r2
   17106:	44b8      	add	r8, r7
   17108:	44c4      	add	ip, r8
   1710a:	4463      	add	r3, ip
   1710c:	881b      	ldrh	r3, [r3, #0]
   1710e:	b2db      	uxtb	r3, r3
   17110:	0018      	movs	r0, r3
   17112:	4bb8      	ldr	r3, [pc, #736]	; (173f4 <processOnSMS+0x2318>)
   17114:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   17116:	2330      	movs	r3, #48	; 0x30
   17118:	33ff      	adds	r3, #255	; 0xff
   1711a:	2220      	movs	r2, #32
   1711c:	4694      	mov	ip, r2
   1711e:	2208      	movs	r2, #8
   17120:	4690      	mov	r8, r2
   17122:	44b8      	add	r8, r7
   17124:	44c4      	add	ip, r8
   17126:	4463      	add	r3, ip
   17128:	2201      	movs	r2, #1
   1712a:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
   1712c:	4baa      	ldr	r3, [pc, #680]	; (173d8 <processOnSMS+0x22fc>)
   1712e:	2298      	movs	r2, #152	; 0x98
   17130:	0052      	lsls	r2, r2, #1
   17132:	4694      	mov	ip, r2
   17134:	2220      	movs	r2, #32
   17136:	4690      	mov	r8, r2
   17138:	2208      	movs	r2, #8
   1713a:	4691      	mov	r9, r2
   1713c:	44b9      	add	r9, r7
   1713e:	44c8      	add	r8, r9
   17140:	44c4      	add	ip, r8
   17142:	4463      	add	r3, ip
   17144:	781b      	ldrb	r3, [r3, #0]
   17146:	2b00      	cmp	r3, #0
   17148:	d101      	bne.n	1714e <processOnSMS+0x2072>
   1714a:	f000 fc86 	bl	17a5a <processOnSMS+0x297e>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
   1714e:	2391      	movs	r3, #145	; 0x91
   17150:	005b      	lsls	r3, r3, #1
   17152:	2220      	movs	r2, #32
   17154:	4694      	mov	ip, r2
   17156:	2208      	movs	r2, #8
   17158:	4690      	mov	r8, r2
   1715a:	44b8      	add	r8, r7
   1715c:	44c4      	add	ip, r8
   1715e:	4463      	add	r3, ip
   17160:	881a      	ldrh	r2, [r3, #0]
   17162:	49a5      	ldr	r1, [pc, #660]	; (173f8 <processOnSMS+0x231c>)
   17164:	230c      	movs	r3, #12
   17166:	2020      	movs	r0, #32
   17168:	4684      	mov	ip, r0
   1716a:	2008      	movs	r0, #8
   1716c:	4680      	mov	r8, r0
   1716e:	44b8      	add	r8, r7
   17170:	44c4      	add	ip, r8
   17172:	4463      	add	r3, ip
   17174:	0018      	movs	r0, r3
   17176:	4ba1      	ldr	r3, [pc, #644]	; (173fc <processOnSMS+0x2320>)
   17178:	4798      	blx	r3
   1717a:	f000 fc6e 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
   1717e:	4aa0      	ldr	r2, [pc, #640]	; (17400 <processOnSMS+0x2324>)
   17180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17182:	0011      	movs	r1, r2
   17184:	0018      	movs	r0, r3
   17186:	4b97      	ldr	r3, [pc, #604]	; (173e4 <processOnSMS+0x2308>)
   17188:	4798      	blx	r3
   1718a:	1e03      	subs	r3, r0, #0
   1718c:	d100      	bne.n	17190 <processOnSMS+0x20b4>
   1718e:	e08b      	b.n	172a8 <processOnSMS+0x21cc>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   17190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17192:	3308      	adds	r3, #8
   17194:	001c      	movs	r4, r3
   17196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17198:	0018      	movs	r0, r3
   1719a:	4b93      	ldr	r3, [pc, #588]	; (173e8 <processOnSMS+0x230c>)
   1719c:	4798      	blx	r3
   1719e:	0002      	movs	r2, r0
   171a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171a2:	0021      	movs	r1, r4
   171a4:	0018      	movs	r0, r3
   171a6:	4b91      	ldr	r3, [pc, #580]	; (173ec <processOnSMS+0x2310>)
   171a8:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
   171aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171ac:	0018      	movs	r0, r3
   171ae:	4b90      	ldr	r3, [pc, #576]	; (173f0 <processOnSMS+0x2314>)
   171b0:	4798      	blx	r3
   171b2:	0002      	movs	r2, r0
   171b4:	2390      	movs	r3, #144	; 0x90
   171b6:	005b      	lsls	r3, r3, #1
   171b8:	2120      	movs	r1, #32
   171ba:	468c      	mov	ip, r1
   171bc:	2108      	movs	r1, #8
   171be:	4688      	mov	r8, r1
   171c0:	44b8      	add	r8, r7
   171c2:	44c4      	add	ip, r8
   171c4:	4463      	add	r3, ip
   171c6:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
   171c8:	2390      	movs	r3, #144	; 0x90
   171ca:	005b      	lsls	r3, r3, #1
   171cc:	2220      	movs	r2, #32
   171ce:	4694      	mov	ip, r2
   171d0:	2208      	movs	r2, #8
   171d2:	4690      	mov	r8, r2
   171d4:	44b8      	add	r8, r7
   171d6:	44c4      	add	ip, r8
   171d8:	4463      	add	r3, ip
   171da:	881b      	ldrh	r3, [r3, #0]
   171dc:	2b01      	cmp	r3, #1
   171de:	d80a      	bhi.n	171f6 <processOnSMS+0x211a>
		{
			STARTIME = 2;
   171e0:	2390      	movs	r3, #144	; 0x90
   171e2:	005b      	lsls	r3, r3, #1
   171e4:	2220      	movs	r2, #32
   171e6:	4694      	mov	ip, r2
   171e8:	2208      	movs	r2, #8
   171ea:	4690      	mov	r8, r2
   171ec:	44b8      	add	r8, r7
   171ee:	44c4      	add	ip, r8
   171f0:	4463      	add	r3, ip
   171f2:	2202      	movs	r2, #2
   171f4:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 65000L)
   171f6:	2390      	movs	r3, #144	; 0x90
   171f8:	005b      	lsls	r3, r3, #1
   171fa:	2220      	movs	r2, #32
   171fc:	4694      	mov	ip, r2
   171fe:	2208      	movs	r2, #8
   17200:	4690      	mov	r8, r2
   17202:	44b8      	add	r8, r7
   17204:	44c4      	add	ip, r8
   17206:	4463      	add	r3, ip
   17208:	881b      	ldrh	r3, [r3, #0]
   1720a:	4a7e      	ldr	r2, [pc, #504]	; (17404 <processOnSMS+0x2328>)
   1720c:	4293      	cmp	r3, r2
   1720e:	d90a      	bls.n	17226 <processOnSMS+0x214a>
		{
			STARTIME = 65000L;
   17210:	2390      	movs	r3, #144	; 0x90
   17212:	005b      	lsls	r3, r3, #1
   17214:	2220      	movs	r2, #32
   17216:	4694      	mov	ip, r2
   17218:	2208      	movs	r2, #8
   1721a:	4690      	mov	r8, r2
   1721c:	44b8      	add	r8, r7
   1721e:	44c4      	add	ip, r8
   17220:	4463      	add	r3, ip
   17222:	4a79      	ldr	r2, [pc, #484]	; (17408 <processOnSMS+0x232c>)
   17224:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
   17226:	2390      	movs	r3, #144	; 0x90
   17228:	005b      	lsls	r3, r3, #1
   1722a:	2220      	movs	r2, #32
   1722c:	4694      	mov	ip, r2
   1722e:	2208      	movs	r2, #8
   17230:	4690      	mov	r8, r2
   17232:	44b8      	add	r8, r7
   17234:	44c4      	add	ip, r8
   17236:	4463      	add	r3, ip
   17238:	881b      	ldrh	r3, [r3, #0]
   1723a:	0018      	movs	r0, r3
   1723c:	4b73      	ldr	r3, [pc, #460]	; (1740c <processOnSMS+0x2330>)
   1723e:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   17240:	2330      	movs	r3, #48	; 0x30
   17242:	33ff      	adds	r3, #255	; 0xff
   17244:	2220      	movs	r2, #32
   17246:	4694      	mov	ip, r2
   17248:	2208      	movs	r2, #8
   1724a:	4690      	mov	r8, r2
   1724c:	44b8      	add	r8, r7
   1724e:	44c4      	add	ip, r8
   17250:	4463      	add	r3, ip
   17252:	2201      	movs	r2, #1
   17254:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   17256:	4b60      	ldr	r3, [pc, #384]	; (173d8 <processOnSMS+0x22fc>)
   17258:	2298      	movs	r2, #152	; 0x98
   1725a:	0052      	lsls	r2, r2, #1
   1725c:	4694      	mov	ip, r2
   1725e:	2220      	movs	r2, #32
   17260:	4690      	mov	r8, r2
   17262:	2208      	movs	r2, #8
   17264:	4691      	mov	r9, r2
   17266:	44b9      	add	r9, r7
   17268:	44c8      	add	r8, r9
   1726a:	44c4      	add	ip, r8
   1726c:	4463      	add	r3, ip
   1726e:	781b      	ldrb	r3, [r3, #0]
   17270:	2b00      	cmp	r3, #0
   17272:	d101      	bne.n	17278 <processOnSMS+0x219c>
   17274:	f000 fbf1 	bl	17a5a <processOnSMS+0x297e>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
   17278:	2390      	movs	r3, #144	; 0x90
   1727a:	005b      	lsls	r3, r3, #1
   1727c:	2220      	movs	r2, #32
   1727e:	4694      	mov	ip, r2
   17280:	2208      	movs	r2, #8
   17282:	4690      	mov	r8, r2
   17284:	44b8      	add	r8, r7
   17286:	44c4      	add	ip, r8
   17288:	4463      	add	r3, ip
   1728a:	881a      	ldrh	r2, [r3, #0]
   1728c:	4960      	ldr	r1, [pc, #384]	; (17410 <processOnSMS+0x2334>)
   1728e:	230c      	movs	r3, #12
   17290:	2020      	movs	r0, #32
   17292:	4684      	mov	ip, r0
   17294:	2008      	movs	r0, #8
   17296:	4680      	mov	r8, r0
   17298:	44b8      	add	r8, r7
   1729a:	44c4      	add	ip, r8
   1729c:	4463      	add	r3, ip
   1729e:	0018      	movs	r0, r3
   172a0:	4b56      	ldr	r3, [pc, #344]	; (173fc <processOnSMS+0x2320>)
   172a2:	4798      	blx	r3
   172a4:	f000 fbd9 	bl	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
   172a8:	4a5a      	ldr	r2, [pc, #360]	; (17414 <processOnSMS+0x2338>)
   172aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   172ac:	0011      	movs	r1, r2
   172ae:	0018      	movs	r0, r3
   172b0:	4b4c      	ldr	r3, [pc, #304]	; (173e4 <processOnSMS+0x2308>)
   172b2:	4798      	blx	r3
   172b4:	1e03      	subs	r3, r0, #0
   172b6:	d100      	bne.n	172ba <processOnSMS+0x21de>
   172b8:	e0b2      	b.n	17420 <processOnSMS+0x2344>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   172ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   172bc:	3308      	adds	r3, #8
   172be:	001c      	movs	r4, r3
   172c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   172c2:	0018      	movs	r0, r3
   172c4:	4b48      	ldr	r3, [pc, #288]	; (173e8 <processOnSMS+0x230c>)
   172c6:	4798      	blx	r3
   172c8:	0002      	movs	r2, r0
   172ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   172cc:	0021      	movs	r1, r4
   172ce:	0018      	movs	r0, r3
   172d0:	4b46      	ldr	r3, [pc, #280]	; (173ec <processOnSMS+0x2310>)
   172d2:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
   172d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   172d6:	0018      	movs	r0, r3
   172d8:	4b45      	ldr	r3, [pc, #276]	; (173f0 <processOnSMS+0x2314>)
   172da:	4798      	blx	r3
   172dc:	0002      	movs	r2, r0
   172de:	238f      	movs	r3, #143	; 0x8f
   172e0:	005b      	lsls	r3, r3, #1
   172e2:	2120      	movs	r1, #32
   172e4:	468c      	mov	ip, r1
   172e6:	2108      	movs	r1, #8
   172e8:	4688      	mov	r8, r1
   172ea:	44b8      	add	r8, r7
   172ec:	44c4      	add	ip, r8
   172ee:	4463      	add	r3, ip
   172f0:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
   172f2:	238f      	movs	r3, #143	; 0x8f
   172f4:	005b      	lsls	r3, r3, #1
   172f6:	2220      	movs	r2, #32
   172f8:	4694      	mov	ip, r2
   172fa:	2208      	movs	r2, #8
   172fc:	4690      	mov	r8, r2
   172fe:	44b8      	add	r8, r7
   17300:	44c4      	add	ip, r8
   17302:	4463      	add	r3, ip
   17304:	881b      	ldrh	r3, [r3, #0]
   17306:	2b31      	cmp	r3, #49	; 0x31
   17308:	d80a      	bhi.n	17320 <processOnSMS+0x2244>
		{
			AUTOTIME = 50;
   1730a:	238f      	movs	r3, #143	; 0x8f
   1730c:	005b      	lsls	r3, r3, #1
   1730e:	2220      	movs	r2, #32
   17310:	4694      	mov	ip, r2
   17312:	2208      	movs	r2, #8
   17314:	4690      	mov	r8, r2
   17316:	44b8      	add	r8, r7
   17318:	44c4      	add	ip, r8
   1731a:	4463      	add	r3, ip
   1731c:	2232      	movs	r2, #50	; 0x32
   1731e:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
   17320:	238f      	movs	r3, #143	; 0x8f
   17322:	005b      	lsls	r3, r3, #1
   17324:	2220      	movs	r2, #32
   17326:	4694      	mov	ip, r2
   17328:	2208      	movs	r2, #8
   1732a:	4690      	mov	r8, r2
   1732c:	44b8      	add	r8, r7
   1732e:	44c4      	add	ip, r8
   17330:	4463      	add	r3, ip
   17332:	881a      	ldrh	r2, [r3, #0]
   17334:	23e1      	movs	r3, #225	; 0xe1
   17336:	01db      	lsls	r3, r3, #7
   17338:	429a      	cmp	r2, r3
   1733a:	d90b      	bls.n	17354 <processOnSMS+0x2278>
		{
			AUTOTIME = 28800;
   1733c:	238f      	movs	r3, #143	; 0x8f
   1733e:	005b      	lsls	r3, r3, #1
   17340:	2220      	movs	r2, #32
   17342:	4694      	mov	ip, r2
   17344:	2208      	movs	r2, #8
   17346:	4690      	mov	r8, r2
   17348:	44b8      	add	r8, r7
   1734a:	44c4      	add	ip, r8
   1734c:	4463      	add	r3, ip
   1734e:	22e1      	movs	r2, #225	; 0xe1
   17350:	01d2      	lsls	r2, r2, #7
   17352:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
   17354:	238f      	movs	r3, #143	; 0x8f
   17356:	005b      	lsls	r3, r3, #1
   17358:	2220      	movs	r2, #32
   1735a:	4694      	mov	ip, r2
   1735c:	2208      	movs	r2, #8
   1735e:	4690      	mov	r8, r2
   17360:	44b8      	add	r8, r7
   17362:	44c4      	add	ip, r8
   17364:	4463      	add	r3, ip
   17366:	881b      	ldrh	r3, [r3, #0]
   17368:	0018      	movs	r0, r3
   1736a:	4b2b      	ldr	r3, [pc, #172]	; (17418 <processOnSMS+0x233c>)
   1736c:	4798      	blx	r3
		incomingSMSProcessed=true;
   1736e:	2330      	movs	r3, #48	; 0x30
   17370:	33ff      	adds	r3, #255	; 0xff
   17372:	2220      	movs	r2, #32
   17374:	4694      	mov	ip, r2
   17376:	2208      	movs	r2, #8
   17378:	4690      	mov	r8, r2
   1737a:	44b8      	add	r8, r7
   1737c:	44c4      	add	ip, r8
   1737e:	4463      	add	r3, ip
   17380:	2201      	movs	r2, #1
   17382:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   17384:	4b14      	ldr	r3, [pc, #80]	; (173d8 <processOnSMS+0x22fc>)
   17386:	2298      	movs	r2, #152	; 0x98
   17388:	0052      	lsls	r2, r2, #1
   1738a:	4694      	mov	ip, r2
   1738c:	2220      	movs	r2, #32
   1738e:	4690      	mov	r8, r2
   17390:	2208      	movs	r2, #8
   17392:	4691      	mov	r9, r2
   17394:	44b9      	add	r9, r7
   17396:	44c8      	add	r8, r9
   17398:	44c4      	add	ip, r8
   1739a:	4463      	add	r3, ip
   1739c:	781b      	ldrb	r3, [r3, #0]
   1739e:	2b00      	cmp	r3, #0
   173a0:	d100      	bne.n	173a4 <processOnSMS+0x22c8>
   173a2:	e35a      	b.n	17a5a <processOnSMS+0x297e>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
   173a4:	238f      	movs	r3, #143	; 0x8f
   173a6:	005b      	lsls	r3, r3, #1
   173a8:	2220      	movs	r2, #32
   173aa:	4694      	mov	ip, r2
   173ac:	2208      	movs	r2, #8
   173ae:	4690      	mov	r8, r2
   173b0:	44b8      	add	r8, r7
   173b2:	44c4      	add	ip, r8
   173b4:	4463      	add	r3, ip
   173b6:	881a      	ldrh	r2, [r3, #0]
   173b8:	4918      	ldr	r1, [pc, #96]	; (1741c <processOnSMS+0x2340>)
   173ba:	230c      	movs	r3, #12
   173bc:	2020      	movs	r0, #32
   173be:	4684      	mov	ip, r0
   173c0:	2008      	movs	r0, #8
   173c2:	4680      	mov	r8, r0
   173c4:	44b8      	add	r8, r7
   173c6:	44c4      	add	ip, r8
   173c8:	4463      	add	r3, ip
   173ca:	0018      	movs	r0, r3
   173cc:	4b0b      	ldr	r3, [pc, #44]	; (173fc <processOnSMS+0x2320>)
   173ce:	4798      	blx	r3
   173d0:	e343      	b.n	17a5a <processOnSMS+0x297e>
   173d2:	46c0      	nop			; (mov r8, r8)
   173d4:	000113d9 	.word	0x000113d9
   173d8:	fffffed2 	.word	0xfffffed2
   173dc:	0002ae98 	.word	0x0002ae98
   173e0:	0002aeac 	.word	0x0002aeac
   173e4:	0001420d 	.word	0x0001420d
   173e8:	000299eb 	.word	0x000299eb
   173ec:	00029737 	.word	0x00029737
   173f0:	00029641 	.word	0x00029641
   173f4:	00011a2d 	.word	0x00011a2d
   173f8:	0002aeb4 	.word	0x0002aeb4
   173fc:	00029961 	.word	0x00029961
   17400:	0002aecc 	.word	0x0002aecc
   17404:	0000fde8 	.word	0x0000fde8
   17408:	fffffde8 	.word	0xfffffde8
   1740c:	000119e1 	.word	0x000119e1
   17410:	0002aed8 	.word	0x0002aed8
   17414:	0002aef0 	.word	0x0002aef0
   17418:	000112f5 	.word	0x000112f5
   1741c:	0002aefc 	.word	0x0002aefc
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
   17420:	4a95      	ldr	r2, [pc, #596]	; (17678 <processOnSMS+0x259c>)
   17422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17424:	0011      	movs	r1, r2
   17426:	0018      	movs	r0, r3
   17428:	4b94      	ldr	r3, [pc, #592]	; (1767c <processOnSMS+0x25a0>)
   1742a:	4798      	blx	r3
   1742c:	1e03      	subs	r3, r0, #0
   1742e:	d000      	beq.n	17432 <processOnSMS+0x2356>
   17430:	e313      	b.n	17a5a <processOnSMS+0x297e>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
   17432:	4a93      	ldr	r2, [pc, #588]	; (17680 <processOnSMS+0x25a4>)
   17434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17436:	0011      	movs	r1, r2
   17438:	0018      	movs	r0, r3
   1743a:	4b90      	ldr	r3, [pc, #576]	; (1767c <processOnSMS+0x25a0>)
   1743c:	4798      	blx	r3
   1743e:	1e03      	subs	r3, r0, #0
   17440:	d029      	beq.n	17496 <processOnSMS+0x23ba>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   17442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17444:	1cdc      	adds	r4, r3, #3
   17446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17448:	0018      	movs	r0, r3
   1744a:	4b8e      	ldr	r3, [pc, #568]	; (17684 <processOnSMS+0x25a8>)
   1744c:	4798      	blx	r3
   1744e:	0002      	movs	r2, r0
   17450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17452:	0021      	movs	r1, r4
   17454:	0018      	movs	r0, r3
   17456:	4b8c      	ldr	r3, [pc, #560]	; (17688 <processOnSMS+0x25ac>)
   17458:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
   1745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1745c:	0018      	movs	r0, r3
   1745e:	4b8b      	ldr	r3, [pc, #556]	; (1768c <processOnSMS+0x25b0>)
   17460:	4798      	blx	r3
   17462:	1e03      	subs	r3, r0, #0
   17464:	d100      	bne.n	17468 <processOnSMS+0x238c>
   17466:	e2f8      	b.n	17a5a <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   17468:	2330      	movs	r3, #48	; 0x30
   1746a:	33ff      	adds	r3, #255	; 0xff
   1746c:	2220      	movs	r2, #32
   1746e:	4694      	mov	ip, r2
   17470:	2208      	movs	r2, #8
   17472:	4690      	mov	r8, r2
   17474:	44b8      	add	r8, r7
   17476:	44c4      	add	ip, r8
   17478:	4463      	add	r3, ip
   1747a:	2201      	movs	r2, #1
   1747c:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
   1747e:	230c      	movs	r3, #12
   17480:	2220      	movs	r2, #32
   17482:	4694      	mov	ip, r2
   17484:	2208      	movs	r2, #8
   17486:	4690      	mov	r8, r2
   17488:	44b8      	add	r8, r7
   1748a:	44c4      	add	ip, r8
   1748c:	4463      	add	r3, ip
   1748e:	4a80      	ldr	r2, [pc, #512]	; (17690 <processOnSMS+0x25b4>)
   17490:	ca13      	ldmia	r2!, {r0, r1, r4}
   17492:	c313      	stmia	r3!, {r0, r1, r4}
   17494:	e2e1      	b.n	17a5a <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
   17496:	4a7f      	ldr	r2, [pc, #508]	; (17694 <processOnSMS+0x25b8>)
   17498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1749a:	0011      	movs	r1, r2
   1749c:	0018      	movs	r0, r3
   1749e:	4b77      	ldr	r3, [pc, #476]	; (1767c <processOnSMS+0x25a0>)
   174a0:	4798      	blx	r3
   174a2:	1e03      	subs	r3, r0, #0
   174a4:	d029      	beq.n	174fa <processOnSMS+0x241e>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   174a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   174a8:	1cdc      	adds	r4, r3, #3
   174aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   174ac:	0018      	movs	r0, r3
   174ae:	4b75      	ldr	r3, [pc, #468]	; (17684 <processOnSMS+0x25a8>)
   174b0:	4798      	blx	r3
   174b2:	0002      	movs	r2, r0
   174b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   174b6:	0021      	movs	r1, r4
   174b8:	0018      	movs	r0, r3
   174ba:	4b73      	ldr	r3, [pc, #460]	; (17688 <processOnSMS+0x25ac>)
   174bc:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
   174be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   174c0:	0018      	movs	r0, r3
   174c2:	4b75      	ldr	r3, [pc, #468]	; (17698 <processOnSMS+0x25bc>)
   174c4:	4798      	blx	r3
   174c6:	1e03      	subs	r3, r0, #0
   174c8:	d100      	bne.n	174cc <processOnSMS+0x23f0>
   174ca:	e2c6      	b.n	17a5a <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   174cc:	2330      	movs	r3, #48	; 0x30
   174ce:	33ff      	adds	r3, #255	; 0xff
   174d0:	2220      	movs	r2, #32
   174d2:	4694      	mov	ip, r2
   174d4:	2208      	movs	r2, #8
   174d6:	4690      	mov	r8, r2
   174d8:	44b8      	add	r8, r7
   174da:	44c4      	add	ip, r8
   174dc:	4463      	add	r3, ip
   174de:	2201      	movs	r2, #1
   174e0:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
   174e2:	230c      	movs	r3, #12
   174e4:	2220      	movs	r2, #32
   174e6:	4694      	mov	ip, r2
   174e8:	2208      	movs	r2, #8
   174ea:	4690      	mov	r8, r2
   174ec:	44b8      	add	r8, r7
   174ee:	44c4      	add	ip, r8
   174f0:	4463      	add	r3, ip
   174f2:	4a6a      	ldr	r2, [pc, #424]	; (1769c <processOnSMS+0x25c0>)
   174f4:	ca13      	ldmia	r2!, {r0, r1, r4}
   174f6:	c313      	stmia	r3!, {r0, r1, r4}
   174f8:	e2af      	b.n	17a5a <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"M+"))
   174fa:	4a69      	ldr	r2, [pc, #420]	; (176a0 <processOnSMS+0x25c4>)
   174fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   174fe:	0011      	movs	r1, r2
   17500:	0018      	movs	r0, r3
   17502:	4b5e      	ldr	r3, [pc, #376]	; (1767c <processOnSMS+0x25a0>)
   17504:	4798      	blx	r3
   17506:	1e03      	subs	r3, r0, #0
   17508:	d100      	bne.n	1750c <processOnSMS+0x2430>
   1750a:	e0d9      	b.n	176c0 <processOnSMS+0x25e4>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   1750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1750e:	1c9c      	adds	r4, r3, #2
   17510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17512:	0018      	movs	r0, r3
   17514:	4b5b      	ldr	r3, [pc, #364]	; (17684 <processOnSMS+0x25a8>)
   17516:	4798      	blx	r3
   17518:	0002      	movs	r2, r0
   1751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1751c:	0021      	movs	r1, r4
   1751e:	0018      	movs	r0, r3
   17520:	4b59      	ldr	r3, [pc, #356]	; (17688 <processOnSMS+0x25ac>)
   17522:	4798      	blx	r3
		bool result = addNumber(received_command);
   17524:	230c      	movs	r3, #12
   17526:	33ff      	adds	r3, #255	; 0xff
   17528:	2220      	movs	r2, #32
   1752a:	2108      	movs	r1, #8
   1752c:	468c      	mov	ip, r1
   1752e:	44bc      	add	ip, r7
   17530:	4462      	add	r2, ip
   17532:	18d4      	adds	r4, r2, r3
   17534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17536:	0018      	movs	r0, r3
   17538:	4b5a      	ldr	r3, [pc, #360]	; (176a4 <processOnSMS+0x25c8>)
   1753a:	4798      	blx	r3
   1753c:	0003      	movs	r3, r0
   1753e:	7023      	strb	r3, [r4, #0]
		if(result)
   17540:	230c      	movs	r3, #12
   17542:	33ff      	adds	r3, #255	; 0xff
   17544:	2220      	movs	r2, #32
   17546:	4694      	mov	ip, r2
   17548:	2208      	movs	r2, #8
   1754a:	4690      	mov	r8, r2
   1754c:	44b8      	add	r8, r7
   1754e:	44c4      	add	ip, r8
   17550:	4463      	add	r3, ip
   17552:	781b      	ldrb	r3, [r3, #0]
   17554:	2b00      	cmp	r3, #0
   17556:	d100      	bne.n	1755a <processOnSMS+0x247e>
   17558:	e27f      	b.n	17a5a <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   1755a:	2330      	movs	r3, #48	; 0x30
   1755c:	33ff      	adds	r3, #255	; 0xff
   1755e:	2220      	movs	r2, #32
   17560:	4694      	mov	ip, r2
   17562:	2208      	movs	r2, #8
   17564:	4690      	mov	r8, r2
   17566:	44b8      	add	r8, r7
   17568:	44c4      	add	ip, r8
   1756a:	4463      	add	r3, ip
   1756c:	2201      	movs	r2, #1
   1756e:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
   17570:	4b4d      	ldr	r3, [pc, #308]	; (176a8 <processOnSMS+0x25cc>)
   17572:	2298      	movs	r2, #152	; 0x98
   17574:	0052      	lsls	r2, r2, #1
   17576:	4694      	mov	ip, r2
   17578:	2220      	movs	r2, #32
   1757a:	4690      	mov	r8, r2
   1757c:	2208      	movs	r2, #8
   1757e:	4691      	mov	r9, r2
   17580:	44b9      	add	r9, r7
   17582:	44c8      	add	r8, r9
   17584:	44c4      	add	ip, r8
   17586:	4463      	add	r3, ip
   17588:	781b      	ldrb	r3, [r3, #0]
   1758a:	2b00      	cmp	r3, #0
   1758c:	d100      	bne.n	17590 <processOnSMS+0x24b4>
   1758e:	e264      	b.n	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"MOBILE NO:");
   17590:	230c      	movs	r3, #12
   17592:	2220      	movs	r2, #32
   17594:	4694      	mov	ip, r2
   17596:	2208      	movs	r2, #8
   17598:	4690      	mov	r8, r2
   1759a:	44b8      	add	r8, r7
   1759c:	44c4      	add	ip, r8
   1759e:	4463      	add	r3, ip
   175a0:	4a42      	ldr	r2, [pc, #264]	; (176ac <processOnSMS+0x25d0>)
   175a2:	ca03      	ldmia	r2!, {r0, r1}
   175a4:	c303      	stmia	r3!, {r0, r1}
   175a6:	8811      	ldrh	r1, [r2, #0]
   175a8:	8019      	strh	r1, [r3, #0]
   175aa:	7892      	ldrb	r2, [r2, #2]
   175ac:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   175ae:	230c      	movs	r3, #12
   175b0:	2220      	movs	r2, #32
   175b2:	4694      	mov	ip, r2
   175b4:	2208      	movs	r2, #8
   175b6:	4690      	mov	r8, r2
   175b8:	44b8      	add	r8, r7
   175ba:	44c4      	add	ip, r8
   175bc:	4463      	add	r3, ip
   175be:	0018      	movs	r0, r3
   175c0:	4b30      	ldr	r3, [pc, #192]	; (17684 <processOnSMS+0x25a8>)
   175c2:	4798      	blx	r3
   175c4:	0003      	movs	r3, r0
   175c6:	001a      	movs	r2, r3
   175c8:	230c      	movs	r3, #12
   175ca:	2120      	movs	r1, #32
   175cc:	468c      	mov	ip, r1
   175ce:	2108      	movs	r1, #8
   175d0:	4688      	mov	r8, r1
   175d2:	44b8      	add	r8, r7
   175d4:	44c4      	add	ip, r8
   175d6:	4463      	add	r3, ip
   175d8:	189a      	adds	r2, r3, r2
   175da:	4b35      	ldr	r3, [pc, #212]	; (176b0 <processOnSMS+0x25d4>)
   175dc:	0010      	movs	r0, r2
   175de:	0019      	movs	r1, r3
   175e0:	2302      	movs	r3, #2
   175e2:	001a      	movs	r2, r3
   175e4:	4b33      	ldr	r3, [pc, #204]	; (176b4 <processOnSMS+0x25d8>)
   175e6:	4798      	blx	r3
				strcat(resep_msg,received_command);
   175e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   175ea:	230c      	movs	r3, #12
   175ec:	2120      	movs	r1, #32
   175ee:	468c      	mov	ip, r1
   175f0:	2108      	movs	r1, #8
   175f2:	4688      	mov	r8, r1
   175f4:	44b8      	add	r8, r7
   175f6:	44c4      	add	ip, r8
   175f8:	4463      	add	r3, ip
   175fa:	0011      	movs	r1, r2
   175fc:	0018      	movs	r0, r3
   175fe:	4b2e      	ldr	r3, [pc, #184]	; (176b8 <processOnSMS+0x25dc>)
   17600:	4798      	blx	r3
				strcat(resep_msg,"\n");
   17602:	230c      	movs	r3, #12
   17604:	2220      	movs	r2, #32
   17606:	4694      	mov	ip, r2
   17608:	2208      	movs	r2, #8
   1760a:	4690      	mov	r8, r2
   1760c:	44b8      	add	r8, r7
   1760e:	44c4      	add	ip, r8
   17610:	4463      	add	r3, ip
   17612:	0018      	movs	r0, r3
   17614:	4b1b      	ldr	r3, [pc, #108]	; (17684 <processOnSMS+0x25a8>)
   17616:	4798      	blx	r3
   17618:	0003      	movs	r3, r0
   1761a:	001a      	movs	r2, r3
   1761c:	230c      	movs	r3, #12
   1761e:	2120      	movs	r1, #32
   17620:	468c      	mov	ip, r1
   17622:	2108      	movs	r1, #8
   17624:	4688      	mov	r8, r1
   17626:	44b8      	add	r8, r7
   17628:	44c4      	add	ip, r8
   1762a:	4463      	add	r3, ip
   1762c:	189a      	adds	r2, r3, r2
   1762e:	4b20      	ldr	r3, [pc, #128]	; (176b0 <processOnSMS+0x25d4>)
   17630:	0010      	movs	r0, r2
   17632:	0019      	movs	r1, r3
   17634:	2302      	movs	r3, #2
   17636:	001a      	movs	r2, r3
   17638:	4b1e      	ldr	r3, [pc, #120]	; (176b4 <processOnSMS+0x25d8>)
   1763a:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
   1763c:	230c      	movs	r3, #12
   1763e:	2220      	movs	r2, #32
   17640:	4694      	mov	ip, r2
   17642:	2208      	movs	r2, #8
   17644:	4690      	mov	r8, r2
   17646:	44b8      	add	r8, r7
   17648:	44c4      	add	ip, r8
   1764a:	4463      	add	r3, ip
   1764c:	0018      	movs	r0, r3
   1764e:	4b0d      	ldr	r3, [pc, #52]	; (17684 <processOnSMS+0x25a8>)
   17650:	4798      	blx	r3
   17652:	0003      	movs	r3, r0
   17654:	001a      	movs	r2, r3
   17656:	230c      	movs	r3, #12
   17658:	2120      	movs	r1, #32
   1765a:	468c      	mov	ip, r1
   1765c:	2108      	movs	r1, #8
   1765e:	4688      	mov	r8, r1
   17660:	44b8      	add	r8, r7
   17662:	44c4      	add	ip, r8
   17664:	4463      	add	r3, ip
   17666:	189a      	adds	r2, r3, r2
   17668:	4b14      	ldr	r3, [pc, #80]	; (176bc <processOnSMS+0x25e0>)
   1766a:	0010      	movs	r0, r2
   1766c:	0019      	movs	r1, r3
   1766e:	2313      	movs	r3, #19
   17670:	001a      	movs	r2, r3
   17672:	4b10      	ldr	r3, [pc, #64]	; (176b4 <processOnSMS+0x25d8>)
   17674:	4798      	blx	r3
   17676:	e1f0      	b.n	17a5a <processOnSMS+0x297e>
   17678:	0002af14 	.word	0x0002af14
   1767c:	0001420d 	.word	0x0001420d
   17680:	0002af18 	.word	0x0002af18
   17684:	000299eb 	.word	0x000299eb
   17688:	00029737 	.word	0x00029737
   1768c:	00011bad 	.word	0x00011bad
   17690:	0002af1c 	.word	0x0002af1c
   17694:	0002af28 	.word	0x0002af28
   17698:	00011c59 	.word	0x00011c59
   1769c:	0002af2c 	.word	0x0002af2c
   176a0:	0002af38 	.word	0x0002af38
   176a4:	00010ef1 	.word	0x00010ef1
   176a8:	fffffed2 	.word	0xfffffed2
   176ac:	0002af3c 	.word	0x0002af3c
   176b0:	0002af48 	.word	0x0002af48
   176b4:	00029725 	.word	0x00029725
   176b8:	000299a5 	.word	0x000299a5
   176bc:	0002af4c 	.word	0x0002af4c
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
   176c0:	4ad0      	ldr	r2, [pc, #832]	; (17a04 <processOnSMS+0x2928>)
   176c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   176c4:	0011      	movs	r1, r2
   176c6:	0018      	movs	r0, r3
   176c8:	4bcf      	ldr	r3, [pc, #828]	; (17a08 <processOnSMS+0x292c>)
   176ca:	4798      	blx	r3
   176cc:	1e03      	subs	r3, r0, #0
   176ce:	d100      	bne.n	176d2 <processOnSMS+0x25f6>
   176d0:	e0b5      	b.n	1783e <processOnSMS+0x2762>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   176d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   176d4:	1c9c      	adds	r4, r3, #2
   176d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   176d8:	0018      	movs	r0, r3
   176da:	4bcc      	ldr	r3, [pc, #816]	; (17a0c <processOnSMS+0x2930>)
   176dc:	4798      	blx	r3
   176de:	0002      	movs	r2, r0
   176e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   176e2:	0021      	movs	r1, r4
   176e4:	0018      	movs	r0, r3
   176e6:	4bca      	ldr	r3, [pc, #808]	; (17a10 <processOnSMS+0x2934>)
   176e8:	4798      	blx	r3
		bool result = removeNumber(received_command);
   176ea:	2385      	movs	r3, #133	; 0x85
   176ec:	005b      	lsls	r3, r3, #1
   176ee:	2220      	movs	r2, #32
   176f0:	2108      	movs	r1, #8
   176f2:	468c      	mov	ip, r1
   176f4:	44bc      	add	ip, r7
   176f6:	4462      	add	r2, ip
   176f8:	18d4      	adds	r4, r2, r3
   176fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   176fc:	0018      	movs	r0, r3
   176fe:	4bc5      	ldr	r3, [pc, #788]	; (17a14 <processOnSMS+0x2938>)
   17700:	4798      	blx	r3
   17702:	0003      	movs	r3, r0
   17704:	7023      	strb	r3, [r4, #0]
		if(result)
   17706:	2385      	movs	r3, #133	; 0x85
   17708:	005b      	lsls	r3, r3, #1
   1770a:	2220      	movs	r2, #32
   1770c:	4694      	mov	ip, r2
   1770e:	2208      	movs	r2, #8
   17710:	4690      	mov	r8, r2
   17712:	44b8      	add	r8, r7
   17714:	44c4      	add	ip, r8
   17716:	4463      	add	r3, ip
   17718:	781b      	ldrb	r3, [r3, #0]
   1771a:	2b00      	cmp	r3, #0
   1771c:	d100      	bne.n	17720 <processOnSMS+0x2644>
   1771e:	e19c      	b.n	17a5a <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   17720:	2330      	movs	r3, #48	; 0x30
   17722:	33ff      	adds	r3, #255	; 0xff
   17724:	2220      	movs	r2, #32
   17726:	4694      	mov	ip, r2
   17728:	2208      	movs	r2, #8
   1772a:	4690      	mov	r8, r2
   1772c:	44b8      	add	r8, r7
   1772e:	44c4      	add	ip, r8
   17730:	4463      	add	r3, ip
   17732:	2201      	movs	r2, #1
   17734:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   17736:	4bb8      	ldr	r3, [pc, #736]	; (17a18 <processOnSMS+0x293c>)
   17738:	2298      	movs	r2, #152	; 0x98
   1773a:	0052      	lsls	r2, r2, #1
   1773c:	4694      	mov	ip, r2
   1773e:	2220      	movs	r2, #32
   17740:	4690      	mov	r8, r2
   17742:	2208      	movs	r2, #8
   17744:	4691      	mov	r9, r2
   17746:	44b9      	add	r9, r7
   17748:	44c8      	add	r8, r9
   1774a:	44c4      	add	ip, r8
   1774c:	4463      	add	r3, ip
   1774e:	781b      	ldrb	r3, [r3, #0]
   17750:	2b00      	cmp	r3, #0
   17752:	d100      	bne.n	17756 <processOnSMS+0x267a>
   17754:	e181      	b.n	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"MOBILE NO:");
   17756:	230c      	movs	r3, #12
   17758:	2220      	movs	r2, #32
   1775a:	4694      	mov	ip, r2
   1775c:	2208      	movs	r2, #8
   1775e:	4690      	mov	r8, r2
   17760:	44b8      	add	r8, r7
   17762:	44c4      	add	ip, r8
   17764:	4463      	add	r3, ip
   17766:	4aad      	ldr	r2, [pc, #692]	; (17a1c <processOnSMS+0x2940>)
   17768:	ca03      	ldmia	r2!, {r0, r1}
   1776a:	c303      	stmia	r3!, {r0, r1}
   1776c:	8811      	ldrh	r1, [r2, #0]
   1776e:	8019      	strh	r1, [r3, #0]
   17770:	7892      	ldrb	r2, [r2, #2]
   17772:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   17774:	230c      	movs	r3, #12
   17776:	2220      	movs	r2, #32
   17778:	4694      	mov	ip, r2
   1777a:	2208      	movs	r2, #8
   1777c:	4690      	mov	r8, r2
   1777e:	44b8      	add	r8, r7
   17780:	44c4      	add	ip, r8
   17782:	4463      	add	r3, ip
   17784:	0018      	movs	r0, r3
   17786:	4ba1      	ldr	r3, [pc, #644]	; (17a0c <processOnSMS+0x2930>)
   17788:	4798      	blx	r3
   1778a:	0003      	movs	r3, r0
   1778c:	001a      	movs	r2, r3
   1778e:	230c      	movs	r3, #12
   17790:	2120      	movs	r1, #32
   17792:	468c      	mov	ip, r1
   17794:	2108      	movs	r1, #8
   17796:	4688      	mov	r8, r1
   17798:	44b8      	add	r8, r7
   1779a:	44c4      	add	ip, r8
   1779c:	4463      	add	r3, ip
   1779e:	189a      	adds	r2, r3, r2
   177a0:	4b9f      	ldr	r3, [pc, #636]	; (17a20 <processOnSMS+0x2944>)
   177a2:	0010      	movs	r0, r2
   177a4:	0019      	movs	r1, r3
   177a6:	2302      	movs	r3, #2
   177a8:	001a      	movs	r2, r3
   177aa:	4b9e      	ldr	r3, [pc, #632]	; (17a24 <processOnSMS+0x2948>)
   177ac:	4798      	blx	r3
				strcat(resep_msg,received_command);
   177ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   177b0:	230c      	movs	r3, #12
   177b2:	2120      	movs	r1, #32
   177b4:	468c      	mov	ip, r1
   177b6:	2108      	movs	r1, #8
   177b8:	4688      	mov	r8, r1
   177ba:	44b8      	add	r8, r7
   177bc:	44c4      	add	ip, r8
   177be:	4463      	add	r3, ip
   177c0:	0011      	movs	r1, r2
   177c2:	0018      	movs	r0, r3
   177c4:	4b98      	ldr	r3, [pc, #608]	; (17a28 <processOnSMS+0x294c>)
   177c6:	4798      	blx	r3
				strcat(resep_msg,"\n");
   177c8:	230c      	movs	r3, #12
   177ca:	2220      	movs	r2, #32
   177cc:	4694      	mov	ip, r2
   177ce:	2208      	movs	r2, #8
   177d0:	4690      	mov	r8, r2
   177d2:	44b8      	add	r8, r7
   177d4:	44c4      	add	ip, r8
   177d6:	4463      	add	r3, ip
   177d8:	0018      	movs	r0, r3
   177da:	4b8c      	ldr	r3, [pc, #560]	; (17a0c <processOnSMS+0x2930>)
   177dc:	4798      	blx	r3
   177de:	0003      	movs	r3, r0
   177e0:	001a      	movs	r2, r3
   177e2:	230c      	movs	r3, #12
   177e4:	2120      	movs	r1, #32
   177e6:	468c      	mov	ip, r1
   177e8:	2108      	movs	r1, #8
   177ea:	4688      	mov	r8, r1
   177ec:	44b8      	add	r8, r7
   177ee:	44c4      	add	ip, r8
   177f0:	4463      	add	r3, ip
   177f2:	189a      	adds	r2, r3, r2
   177f4:	4b8a      	ldr	r3, [pc, #552]	; (17a20 <processOnSMS+0x2944>)
   177f6:	0010      	movs	r0, r2
   177f8:	0019      	movs	r1, r3
   177fa:	2302      	movs	r3, #2
   177fc:	001a      	movs	r2, r3
   177fe:	4b89      	ldr	r3, [pc, #548]	; (17a24 <processOnSMS+0x2948>)
   17800:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
   17802:	230c      	movs	r3, #12
   17804:	2220      	movs	r2, #32
   17806:	4694      	mov	ip, r2
   17808:	2208      	movs	r2, #8
   1780a:	4690      	mov	r8, r2
   1780c:	44b8      	add	r8, r7
   1780e:	44c4      	add	ip, r8
   17810:	4463      	add	r3, ip
   17812:	0018      	movs	r0, r3
   17814:	4b7d      	ldr	r3, [pc, #500]	; (17a0c <processOnSMS+0x2930>)
   17816:	4798      	blx	r3
   17818:	0003      	movs	r3, r0
   1781a:	001a      	movs	r2, r3
   1781c:	230c      	movs	r3, #12
   1781e:	2120      	movs	r1, #32
   17820:	468c      	mov	ip, r1
   17822:	2108      	movs	r1, #8
   17824:	4688      	mov	r8, r1
   17826:	44b8      	add	r8, r7
   17828:	44c4      	add	ip, r8
   1782a:	4463      	add	r3, ip
   1782c:	189a      	adds	r2, r3, r2
   1782e:	4b7f      	ldr	r3, [pc, #508]	; (17a2c <processOnSMS+0x2950>)
   17830:	0010      	movs	r0, r2
   17832:	0019      	movs	r1, r3
   17834:	2315      	movs	r3, #21
   17836:	001a      	movs	r2, r3
   17838:	4b7a      	ldr	r3, [pc, #488]	; (17a24 <processOnSMS+0x2948>)
   1783a:	4798      	blx	r3
   1783c:	e10d      	b.n	17a5a <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
   1783e:	4a7c      	ldr	r2, [pc, #496]	; (17a30 <processOnSMS+0x2954>)
   17840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17842:	0011      	movs	r1, r2
   17844:	0018      	movs	r0, r3
   17846:	4b70      	ldr	r3, [pc, #448]	; (17a08 <processOnSMS+0x292c>)
   17848:	4798      	blx	r3
   1784a:	1e03      	subs	r3, r0, #0
   1784c:	d053      	beq.n	178f6 <processOnSMS+0x281a>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   1784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17850:	1cdc      	adds	r4, r3, #3
   17852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17854:	0018      	movs	r0, r3
   17856:	4b6d      	ldr	r3, [pc, #436]	; (17a0c <processOnSMS+0x2930>)
   17858:	4798      	blx	r3
   1785a:	0002      	movs	r2, r0
   1785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1785e:	0021      	movs	r1, r4
   17860:	0018      	movs	r0, r3
   17862:	4b6b      	ldr	r3, [pc, #428]	; (17a10 <processOnSMS+0x2934>)
   17864:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
   17866:	230a      	movs	r3, #10
   17868:	33ff      	adds	r3, #255	; 0xff
   1786a:	2220      	movs	r2, #32
   1786c:	2108      	movs	r1, #8
   1786e:	468c      	mov	ip, r1
   17870:	44bc      	add	ip, r7
   17872:	4462      	add	r2, ip
   17874:	18d4      	adds	r4, r2, r3
   17876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17878:	0018      	movs	r0, r3
   1787a:	4b6e      	ldr	r3, [pc, #440]	; (17a34 <processOnSMS+0x2958>)
   1787c:	4798      	blx	r3
   1787e:	0003      	movs	r3, r0
   17880:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
   17882:	2330      	movs	r3, #48	; 0x30
   17884:	33ff      	adds	r3, #255	; 0xff
   17886:	2220      	movs	r2, #32
   17888:	4694      	mov	ip, r2
   1788a:	2208      	movs	r2, #8
   1788c:	4690      	mov	r8, r2
   1788e:	44b8      	add	r8, r7
   17890:	44c4      	add	ip, r8
   17892:	4463      	add	r3, ip
   17894:	2201      	movs	r2, #1
   17896:	701a      	strb	r2, [r3, #0]
			if(result)
   17898:	230a      	movs	r3, #10
   1789a:	33ff      	adds	r3, #255	; 0xff
   1789c:	2220      	movs	r2, #32
   1789e:	4694      	mov	ip, r2
   178a0:	2208      	movs	r2, #8
   178a2:	4690      	mov	r8, r2
   178a4:	44b8      	add	r8, r7
   178a6:	44c4      	add	ip, r8
   178a8:	4463      	add	r3, ip
   178aa:	781b      	ldrb	r3, [r3, #0]
   178ac:	2b00      	cmp	r3, #0
   178ae:	d100      	bne.n	178b2 <processOnSMS+0x27d6>
   178b0:	e0d3      	b.n	17a5a <processOnSMS+0x297e>
			{
				if (response_sms_processed_cmd == true)
   178b2:	4b59      	ldr	r3, [pc, #356]	; (17a18 <processOnSMS+0x293c>)
   178b4:	2298      	movs	r2, #152	; 0x98
   178b6:	0052      	lsls	r2, r2, #1
   178b8:	4694      	mov	ip, r2
   178ba:	2220      	movs	r2, #32
   178bc:	4690      	mov	r8, r2
   178be:	2208      	movs	r2, #8
   178c0:	4691      	mov	r9, r2
   178c2:	44b9      	add	r9, r7
   178c4:	44c8      	add	r8, r9
   178c6:	44c4      	add	ip, r8
   178c8:	4463      	add	r3, ip
   178ca:	781b      	ldrb	r3, [r3, #0]
   178cc:	2b00      	cmp	r3, #0
   178ce:	d100      	bne.n	178d2 <processOnSMS+0x27f6>
   178d0:	e0c3      	b.n	17a5a <processOnSMS+0x297e>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE ADD SUCCESS");
   178d2:	230c      	movs	r3, #12
   178d4:	2220      	movs	r2, #32
   178d6:	4694      	mov	ip, r2
   178d8:	2208      	movs	r2, #8
   178da:	4690      	mov	r8, r2
   178dc:	44b8      	add	r8, r7
   178de:	44c4      	add	ip, r8
   178e0:	4463      	add	r3, ip
   178e2:	4a55      	ldr	r2, [pc, #340]	; (17a38 <processOnSMS+0x295c>)
   178e4:	ca13      	ldmia	r2!, {r0, r1, r4}
   178e6:	c313      	stmia	r3!, {r0, r1, r4}
   178e8:	ca13      	ldmia	r2!, {r0, r1, r4}
   178ea:	c313      	stmia	r3!, {r0, r1, r4}
   178ec:	6811      	ldr	r1, [r2, #0]
   178ee:	6019      	str	r1, [r3, #0]
   178f0:	7912      	ldrb	r2, [r2, #4]
   178f2:	711a      	strb	r2, [r3, #4]
   178f4:	e0b1      	b.n	17a5a <processOnSMS+0x297e>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
   178f6:	4a51      	ldr	r2, [pc, #324]	; (17a3c <processOnSMS+0x2960>)
   178f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   178fa:	0011      	movs	r1, r2
   178fc:	0018      	movs	r0, r3
   178fe:	4b42      	ldr	r3, [pc, #264]	; (17a08 <processOnSMS+0x292c>)
   17900:	4798      	blx	r3
   17902:	1e03      	subs	r3, r0, #0
   17904:	d038      	beq.n	17978 <processOnSMS+0x289c>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   17906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17908:	1cdc      	adds	r4, r3, #3
   1790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1790c:	0018      	movs	r0, r3
   1790e:	4b3f      	ldr	r3, [pc, #252]	; (17a0c <processOnSMS+0x2930>)
   17910:	4798      	blx	r3
   17912:	0002      	movs	r2, r0
   17914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17916:	0021      	movs	r1, r4
   17918:	0018      	movs	r0, r3
   1791a:	4b3d      	ldr	r3, [pc, #244]	; (17a10 <processOnSMS+0x2934>)
   1791c:	4798      	blx	r3
			addM2MNumber(received_command);
   1791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17920:	0018      	movs	r0, r3
   17922:	4b47      	ldr	r3, [pc, #284]	; (17a40 <processOnSMS+0x2964>)
   17924:	4798      	blx	r3
			incomingSMSProcessed=true;
   17926:	2330      	movs	r3, #48	; 0x30
   17928:	33ff      	adds	r3, #255	; 0xff
   1792a:	2220      	movs	r2, #32
   1792c:	4694      	mov	ip, r2
   1792e:	2208      	movs	r2, #8
   17930:	4690      	mov	r8, r2
   17932:	44b8      	add	r8, r7
   17934:	44c4      	add	ip, r8
   17936:	4463      	add	r3, ip
   17938:	2201      	movs	r2, #1
   1793a:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   1793c:	4b36      	ldr	r3, [pc, #216]	; (17a18 <processOnSMS+0x293c>)
   1793e:	2298      	movs	r2, #152	; 0x98
   17940:	0052      	lsls	r2, r2, #1
   17942:	4694      	mov	ip, r2
   17944:	2220      	movs	r2, #32
   17946:	4690      	mov	r8, r2
   17948:	2208      	movs	r2, #8
   1794a:	4691      	mov	r9, r2
   1794c:	44b9      	add	r9, r7
   1794e:	44c8      	add	r8, r9
   17950:	44c4      	add	ip, r8
   17952:	4463      	add	r3, ip
   17954:	781b      	ldrb	r3, [r3, #0]
   17956:	2b00      	cmp	r3, #0
   17958:	d100      	bne.n	1795c <processOnSMS+0x2880>
   1795a:	e07e      	b.n	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
   1795c:	230c      	movs	r3, #12
   1795e:	2220      	movs	r2, #32
   17960:	4694      	mov	ip, r2
   17962:	2208      	movs	r2, #8
   17964:	4690      	mov	r8, r2
   17966:	44b8      	add	r8, r7
   17968:	44c4      	add	ip, r8
   1796a:	4463      	add	r3, ip
   1796c:	4a35      	ldr	r2, [pc, #212]	; (17a44 <processOnSMS+0x2968>)
   1796e:	ca13      	ldmia	r2!, {r0, r1, r4}
   17970:	c313      	stmia	r3!, {r0, r1, r4}
   17972:	8812      	ldrh	r2, [r2, #0]
   17974:	801a      	strh	r2, [r3, #0]
   17976:	e070      	b.n	17a5a <processOnSMS+0x297e>
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
   17978:	4a33      	ldr	r2, [pc, #204]	; (17a48 <processOnSMS+0x296c>)
   1797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1797c:	0011      	movs	r1, r2
   1797e:	0018      	movs	r0, r3
   17980:	4b21      	ldr	r3, [pc, #132]	; (17a08 <processOnSMS+0x292c>)
   17982:	4798      	blx	r3
   17984:	1e03      	subs	r3, r0, #0
   17986:	d068      	beq.n	17a5a <processOnSMS+0x297e>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
   17988:	4b30      	ldr	r3, [pc, #192]	; (17a4c <processOnSMS+0x2970>)
   1798a:	78db      	ldrb	r3, [r3, #3]
   1798c:	2b00      	cmp	r3, #0
   1798e:	d064      	beq.n	17a5a <processOnSMS+0x297e>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   17990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17992:	1cdc      	adds	r4, r3, #3
   17994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17996:	0018      	movs	r0, r3
   17998:	4b1c      	ldr	r3, [pc, #112]	; (17a0c <processOnSMS+0x2930>)
   1799a:	4798      	blx	r3
   1799c:	0002      	movs	r2, r0
   1799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   179a0:	0021      	movs	r1, r4
   179a2:	0018      	movs	r0, r3
   179a4:	4b1a      	ldr	r3, [pc, #104]	; (17a10 <processOnSMS+0x2934>)
   179a6:	4798      	blx	r3
			incomingSMSProcessed=true;
   179a8:	2330      	movs	r3, #48	; 0x30
   179aa:	33ff      	adds	r3, #255	; 0xff
   179ac:	2220      	movs	r2, #32
   179ae:	4694      	mov	ip, r2
   179b0:	2208      	movs	r2, #8
   179b2:	4690      	mov	r8, r2
   179b4:	44b8      	add	r8, r7
   179b6:	44c4      	add	ip, r8
   179b8:	4463      	add	r3, ip
   179ba:	2201      	movs	r2, #1
   179bc:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
   179be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   179c0:	0018      	movs	r0, r3
   179c2:	4b23      	ldr	r3, [pc, #140]	; (17a50 <processOnSMS+0x2974>)
   179c4:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   179c6:	4b14      	ldr	r3, [pc, #80]	; (17a18 <processOnSMS+0x293c>)
   179c8:	2298      	movs	r2, #152	; 0x98
   179ca:	0052      	lsls	r2, r2, #1
   179cc:	4694      	mov	ip, r2
   179ce:	2220      	movs	r2, #32
   179d0:	4690      	mov	r8, r2
   179d2:	2208      	movs	r2, #8
   179d4:	4691      	mov	r9, r2
   179d6:	44b9      	add	r9, r7
   179d8:	44c8      	add	r8, r9
   179da:	44c4      	add	ip, r8
   179dc:	4463      	add	r3, ip
   179de:	781b      	ldrb	r3, [r3, #0]
   179e0:	2b00      	cmp	r3, #0
   179e2:	d03a      	beq.n	17a5a <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
   179e4:	230c      	movs	r3, #12
   179e6:	2220      	movs	r2, #32
   179e8:	4694      	mov	ip, r2
   179ea:	2208      	movs	r2, #8
   179ec:	4690      	mov	r8, r2
   179ee:	44b8      	add	r8, r7
   179f0:	44c4      	add	ip, r8
   179f2:	4463      	add	r3, ip
   179f4:	4a17      	ldr	r2, [pc, #92]	; (17a54 <processOnSMS+0x2978>)
   179f6:	ca13      	ldmia	r2!, {r0, r1, r4}
   179f8:	c313      	stmia	r3!, {r0, r1, r4}
   179fa:	ca03      	ldmia	r2!, {r0, r1}
   179fc:	c303      	stmia	r3!, {r0, r1}
   179fe:	7812      	ldrb	r2, [r2, #0]
   17a00:	701a      	strb	r2, [r3, #0]
   17a02:	e02a      	b.n	17a5a <processOnSMS+0x297e>
   17a04:	0002af60 	.word	0x0002af60
   17a08:	0001420d 	.word	0x0001420d
   17a0c:	000299eb 	.word	0x000299eb
   17a10:	00029737 	.word	0x00029737
   17a14:	00010fed 	.word	0x00010fed
   17a18:	fffffed2 	.word	0xfffffed2
   17a1c:	0002af3c 	.word	0x0002af3c
   17a20:	0002af48 	.word	0x0002af48
   17a24:	00029725 	.word	0x00029725
   17a28:	000299a5 	.word	0x000299a5
   17a2c:	0002af64 	.word	0x0002af64
   17a30:	0002af7c 	.word	0x0002af7c
   17a34:	00011239 	.word	0x00011239
   17a38:	0002af80 	.word	0x0002af80
   17a3c:	0002afa0 	.word	0x0002afa0
   17a40:	00010c49 	.word	0x00010c49
   17a44:	0002afa4 	.word	0x0002afa4
   17a48:	0002afb4 	.word	0x0002afb4
   17a4c:	2000082c 	.word	0x2000082c
   17a50:	00010cb1 	.word	0x00010cb1
   17a54:	0002afb8 	.word	0x0002afb8
		if (alternateNumber_struct.alterNumberPresent)
   17a58:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
   17a5a:	4b37      	ldr	r3, [pc, #220]	; (17b38 <processOnSMS+0x2a5c>)
   17a5c:	2298      	movs	r2, #152	; 0x98
   17a5e:	0052      	lsls	r2, r2, #1
   17a60:	4694      	mov	ip, r2
   17a62:	2220      	movs	r2, #32
   17a64:	4690      	mov	r8, r2
   17a66:	2208      	movs	r2, #8
   17a68:	4691      	mov	r9, r2
   17a6a:	44b9      	add	r9, r7
   17a6c:	44c8      	add	r8, r9
   17a6e:	44c4      	add	ip, r8
   17a70:	4463      	add	r3, ip
   17a72:	781b      	ldrb	r3, [r3, #0]
   17a74:	2b00      	cmp	r3, #0
   17a76:	d057      	beq.n	17b28 <processOnSMS+0x2a4c>
	{
		if(!incomingSMSProcessed)
   17a78:	2330      	movs	r3, #48	; 0x30
   17a7a:	33ff      	adds	r3, #255	; 0xff
   17a7c:	2220      	movs	r2, #32
   17a7e:	4694      	mov	ip, r2
   17a80:	2208      	movs	r2, #8
   17a82:	4690      	mov	r8, r2
   17a84:	44b8      	add	r8, r7
   17a86:	44c4      	add	ip, r8
   17a88:	4463      	add	r3, ip
   17a8a:	781b      	ldrb	r3, [r3, #0]
   17a8c:	2201      	movs	r2, #1
   17a8e:	4053      	eors	r3, r2
   17a90:	b2db      	uxtb	r3, r3
   17a92:	2b00      	cmp	r3, #0
   17a94:	d022      	beq.n	17adc <processOnSMS+0x2a00>
		{
			strcpy(resep_msg, "ERROR : ");
   17a96:	230c      	movs	r3, #12
   17a98:	2220      	movs	r2, #32
   17a9a:	4694      	mov	ip, r2
   17a9c:	2208      	movs	r2, #8
   17a9e:	4690      	mov	r8, r2
   17aa0:	44b8      	add	r8, r7
   17aa2:	44c4      	add	ip, r8
   17aa4:	4463      	add	r3, ip
   17aa6:	4a25      	ldr	r2, [pc, #148]	; (17b3c <processOnSMS+0x2a60>)
   17aa8:	ca03      	ldmia	r2!, {r0, r1}
   17aaa:	c303      	stmia	r3!, {r0, r1}
   17aac:	7812      	ldrb	r2, [r2, #0]
   17aae:	701a      	strb	r2, [r3, #0]
			strcat(resep_msg, copy_received_command);
   17ab0:	238c      	movs	r3, #140	; 0x8c
   17ab2:	005b      	lsls	r3, r3, #1
   17ab4:	2220      	movs	r2, #32
   17ab6:	4694      	mov	ip, r2
   17ab8:	2208      	movs	r2, #8
   17aba:	4690      	mov	r8, r2
   17abc:	44b8      	add	r8, r7
   17abe:	44c4      	add	ip, r8
   17ac0:	4463      	add	r3, ip
   17ac2:	681a      	ldr	r2, [r3, #0]
   17ac4:	230c      	movs	r3, #12
   17ac6:	2120      	movs	r1, #32
   17ac8:	468c      	mov	ip, r1
   17aca:	2108      	movs	r1, #8
   17acc:	4688      	mov	r8, r1
   17ace:	44b8      	add	r8, r7
   17ad0:	44c4      	add	ip, r8
   17ad2:	4463      	add	r3, ip
   17ad4:	0011      	movs	r1, r2
   17ad6:	0018      	movs	r0, r3
   17ad8:	4b19      	ldr	r3, [pc, #100]	; (17b40 <processOnSMS+0x2a64>)
   17ada:	4798      	blx	r3
			//sprintf(resep_msg,"ERROR : %s",*copy_received_command);
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17adc:	23ac      	movs	r3, #172	; 0xac
   17ade:	005b      	lsls	r3, r3, #1
   17ae0:	2220      	movs	r2, #32
   17ae2:	4694      	mov	ip, r2
   17ae4:	2208      	movs	r2, #8
   17ae6:	4690      	mov	r8, r2
   17ae8:	44b8      	add	r8, r7
   17aea:	44c4      	add	ip, r8
   17aec:	4463      	add	r3, ip
   17aee:	681b      	ldr	r3, [r3, #0]
   17af0:	2200      	movs	r2, #0
   17af2:	0019      	movs	r1, r3
   17af4:	2005      	movs	r0, #5
   17af6:	4b13      	ldr	r3, [pc, #76]	; (17b44 <processOnSMS+0x2a68>)
   17af8:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
   17afa:	230c      	movs	r3, #12
   17afc:	2220      	movs	r2, #32
   17afe:	2108      	movs	r1, #8
   17b00:	468c      	mov	ip, r1
   17b02:	44bc      	add	ip, r7
   17b04:	4462      	add	r2, ip
   17b06:	18d2      	adds	r2, r2, r3
   17b08:	23ac      	movs	r3, #172	; 0xac
   17b0a:	005b      	lsls	r3, r3, #1
   17b0c:	2120      	movs	r1, #32
   17b0e:	468c      	mov	ip, r1
   17b10:	2108      	movs	r1, #8
   17b12:	4688      	mov	r8, r1
   17b14:	44b8      	add	r8, r7
   17b16:	44c4      	add	ip, r8
   17b18:	4463      	add	r3, ip
   17b1a:	681b      	ldr	r3, [r3, #0]
   17b1c:	0011      	movs	r1, r2
   17b1e:	0018      	movs	r0, r3
   17b20:	4b09      	ldr	r3, [pc, #36]	; (17b48 <processOnSMS+0x2a6c>)
   17b22:	4798      	blx	r3
   17b24:	e000      	b.n	17b28 <processOnSMS+0x2a4c>
		return;
   17b26:	46c0      	nop			; (mov r8, r8)
	}
}
   17b28:	46bd      	mov	sp, r7
   17b2a:	b057      	add	sp, #348	; 0x15c
   17b2c:	bc3c      	pop	{r2, r3, r4, r5}
   17b2e:	4690      	mov	r8, r2
   17b30:	4699      	mov	r9, r3
   17b32:	46a2      	mov	sl, r4
   17b34:	46ab      	mov	fp, r5
   17b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17b38:	fffffed2 	.word	0xfffffed2
   17b3c:	0002afd0 	.word	0x0002afd0
   17b40:	000299a5 	.word	0x000299a5
   17b44:	0001db19 	.word	0x0001db19
   17b48:	00012b9d 	.word	0x00012b9d

00017b4c <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
   17b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b4e:	46c6      	mov	lr, r8
   17b50:	b500      	push	{lr}
   17b52:	b092      	sub	sp, #72	; 0x48
   17b54:	af08      	add	r7, sp, #32
   17b56:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
   17b58:	2327      	movs	r3, #39	; 0x27
   17b5a:	18fc      	adds	r4, r7, r3
   17b5c:	4b37      	ldr	r3, [pc, #220]	; (17c3c <buildStatusMessage+0xf0>)
   17b5e:	4798      	blx	r3
   17b60:	0003      	movs	r3, r0
   17b62:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
   17b64:	4b36      	ldr	r3, [pc, #216]	; (17c40 <buildStatusMessage+0xf4>)
   17b66:	785b      	ldrb	r3, [r3, #1]
   17b68:	b2db      	uxtb	r3, r3
   17b6a:	2b02      	cmp	r3, #2
   17b6c:	d009      	beq.n	17b82 <buildStatusMessage+0x36>
   17b6e:	2b03      	cmp	r3, #3
   17b70:	d10d      	bne.n	17b8e <buildStatusMessage+0x42>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
   17b72:	231c      	movs	r3, #28
   17b74:	18fb      	adds	r3, r7, r3
   17b76:	4a33      	ldr	r2, [pc, #204]	; (17c44 <buildStatusMessage+0xf8>)
   17b78:	8811      	ldrh	r1, [r2, #0]
   17b7a:	8019      	strh	r1, [r3, #0]
   17b7c:	7892      	ldrb	r2, [r2, #2]
   17b7e:	709a      	strb	r2, [r3, #2]
		break;
   17b80:	e00a      	b.n	17b98 <buildStatusMessage+0x4c>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
   17b82:	231c      	movs	r3, #28
   17b84:	18fb      	adds	r3, r7, r3
   17b86:	4a30      	ldr	r2, [pc, #192]	; (17c48 <buildStatusMessage+0xfc>)
   17b88:	ca03      	ldmia	r2!, {r0, r1}
   17b8a:	c303      	stmia	r3!, {r0, r1}
		break;
   17b8c:	e004      	b.n	17b98 <buildStatusMessage+0x4c>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
   17b8e:	231c      	movs	r3, #28
   17b90:	18fb      	adds	r3, r7, r3
   17b92:	4a2e      	ldr	r2, [pc, #184]	; (17c4c <buildStatusMessage+0x100>)
   17b94:	601a      	str	r2, [r3, #0]
		break;
   17b96:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   17b98:	4b29      	ldr	r3, [pc, #164]	; (17c40 <buildStatusMessage+0xf4>)
   17b9a:	781b      	ldrb	r3, [r3, #0]
   17b9c:	b2db      	uxtb	r3, r3
   17b9e:	2b02      	cmp	r3, #2
   17ba0:	d107      	bne.n	17bb2 <buildStatusMessage+0x66>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
   17ba2:	2314      	movs	r3, #20
   17ba4:	18fb      	adds	r3, r7, r3
   17ba6:	4a2a      	ldr	r2, [pc, #168]	; (17c50 <buildStatusMessage+0x104>)
   17ba8:	8811      	ldrh	r1, [r2, #0]
   17baa:	8019      	strh	r1, [r3, #0]
   17bac:	7892      	ldrb	r2, [r2, #2]
   17bae:	709a      	strb	r2, [r3, #2]
   17bb0:	e006      	b.n	17bc0 <buildStatusMessage+0x74>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
   17bb2:	2314      	movs	r3, #20
   17bb4:	18fb      	adds	r3, r7, r3
   17bb6:	4a27      	ldr	r2, [pc, #156]	; (17c54 <buildStatusMessage+0x108>)
   17bb8:	6811      	ldr	r1, [r2, #0]
   17bba:	6019      	str	r1, [r3, #0]
   17bbc:	8892      	ldrh	r2, [r2, #4]
   17bbe:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
   17bc0:	4b25      	ldr	r3, [pc, #148]	; (17c58 <buildStatusMessage+0x10c>)
   17bc2:	4798      	blx	r3
   17bc4:	1e03      	subs	r3, r0, #0
   17bc6:	d007      	beq.n	17bd8 <buildStatusMessage+0x8c>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
   17bc8:	230c      	movs	r3, #12
   17bca:	18fb      	adds	r3, r7, r3
   17bcc:	4a1d      	ldr	r2, [pc, #116]	; (17c44 <buildStatusMessage+0xf8>)
   17bce:	8811      	ldrh	r1, [r2, #0]
   17bd0:	8019      	strh	r1, [r3, #0]
   17bd2:	7892      	ldrb	r2, [r2, #2]
   17bd4:	709a      	strb	r2, [r3, #2]
   17bd6:	e003      	b.n	17be0 <buildStatusMessage+0x94>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
   17bd8:	230c      	movs	r3, #12
   17bda:	18fb      	adds	r3, r7, r3
   17bdc:	4a1b      	ldr	r2, [pc, #108]	; (17c4c <buildStatusMessage+0x100>)
   17bde:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d\nBattery: %d%%",
   17be0:	4b1e      	ldr	r3, [pc, #120]	; (17c5c <buildStatusMessage+0x110>)
   17be2:	681c      	ldr	r4, [r3, #0]
   17be4:	4b1d      	ldr	r3, [pc, #116]	; (17c5c <buildStatusMessage+0x110>)
   17be6:	685d      	ldr	r5, [r3, #4]
   17be8:	4b1c      	ldr	r3, [pc, #112]	; (17c5c <buildStatusMessage+0x110>)
   17bea:	689b      	ldr	r3, [r3, #8]
   17bec:	4698      	mov	r8, r3
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network, Analog_Parameter_Struct.Battery_percentage);
   17bee:	4a1b      	ldr	r2, [pc, #108]	; (17c5c <buildStatusMessage+0x110>)
   17bf0:	8a92      	ldrh	r2, [r2, #20]
   17bf2:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d\nBattery: %d%%",
   17bf4:	0016      	movs	r6, r2
   17bf6:	2227      	movs	r2, #39	; 0x27
   17bf8:	18ba      	adds	r2, r7, r2
   17bfa:	7812      	ldrb	r2, [r2, #0]
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network, Analog_Parameter_Struct.Battery_percentage);
   17bfc:	4917      	ldr	r1, [pc, #92]	; (17c5c <buildStatusMessage+0x110>)
   17bfe:	7f09      	ldrb	r1, [r1, #28]
   17c00:	b2c9      	uxtb	r1, r1
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d\nBattery: %d%%",
   17c02:	468c      	mov	ip, r1
   17c04:	4916      	ldr	r1, [pc, #88]	; (17c60 <buildStatusMessage+0x114>)
   17c06:	6878      	ldr	r0, [r7, #4]
   17c08:	4663      	mov	r3, ip
   17c0a:	9306      	str	r3, [sp, #24]
   17c0c:	9205      	str	r2, [sp, #20]
   17c0e:	9604      	str	r6, [sp, #16]
   17c10:	230c      	movs	r3, #12
   17c12:	18fa      	adds	r2, r7, r3
   17c14:	9203      	str	r2, [sp, #12]
   17c16:	2314      	movs	r3, #20
   17c18:	18fa      	adds	r2, r7, r3
   17c1a:	9202      	str	r2, [sp, #8]
   17c1c:	231c      	movs	r3, #28
   17c1e:	18fa      	adds	r2, r7, r3
   17c20:	9201      	str	r2, [sp, #4]
   17c22:	4643      	mov	r3, r8
   17c24:	9300      	str	r3, [sp, #0]
   17c26:	002b      	movs	r3, r5
   17c28:	0022      	movs	r2, r4
   17c2a:	4c0e      	ldr	r4, [pc, #56]	; (17c64 <buildStatusMessage+0x118>)
   17c2c:	47a0      	blx	r4
}
   17c2e:	46c0      	nop			; (mov r8, r8)
   17c30:	46bd      	mov	sp, r7
   17c32:	b00a      	add	sp, #40	; 0x28
   17c34:	bc04      	pop	{r2}
   17c36:	4690      	mov	r8, r2
   17c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c3a:	46c0      	nop			; (mov r8, r8)
   17c3c:	000128ed 	.word	0x000128ed
   17c40:	20000948 	.word	0x20000948
   17c44:	0002afdc 	.word	0x0002afdc
   17c48:	0002afe0 	.word	0x0002afe0
   17c4c:	0046464f 	.word	0x0046464f
   17c50:	0002afe8 	.word	0x0002afe8
   17c54:	0002afec 	.word	0x0002afec
   17c58:	0001bbf1 	.word	0x0001bbf1
   17c5c:	200008e8 	.word	0x200008e8
   17c60:	0002aff4 	.word	0x0002aff4
   17c64:	00029961 	.word	0x00029961

00017c68 <checkNumber>:


bool checkNumber(char *number)
{
   17c68:	b580      	push	{r7, lr}
   17c6a:	b082      	sub	sp, #8
   17c6c:	af00      	add	r7, sp, #0
   17c6e:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
   17c70:	687b      	ldr	r3, [r7, #4]
   17c72:	0018      	movs	r0, r3
   17c74:	4b0a      	ldr	r3, [pc, #40]	; (17ca0 <checkNumber+0x38>)
   17c76:	4798      	blx	r3
   17c78:	1e03      	subs	r3, r0, #0
   17c7a:	d109      	bne.n	17c90 <checkNumber+0x28>
   17c7c:	687b      	ldr	r3, [r7, #4]
   17c7e:	0018      	movs	r0, r3
   17c80:	4b08      	ldr	r3, [pc, #32]	; (17ca4 <checkNumber+0x3c>)
   17c82:	4798      	blx	r3
   17c84:	0003      	movs	r3, r0
   17c86:	001a      	movs	r2, r3
   17c88:	4b07      	ldr	r3, [pc, #28]	; (17ca8 <checkNumber+0x40>)
   17c8a:	785b      	ldrb	r3, [r3, #1]
   17c8c:	429a      	cmp	r2, r3
   17c8e:	d201      	bcs.n	17c94 <checkNumber+0x2c>
	{
		return true;
   17c90:	2301      	movs	r3, #1
   17c92:	e000      	b.n	17c96 <checkNumber+0x2e>
	}
	else
	{
		return false;
   17c94:	2300      	movs	r3, #0
	}
}
   17c96:	0018      	movs	r0, r3
   17c98:	46bd      	mov	sp, r7
   17c9a:	b002      	add	sp, #8
   17c9c:	bd80      	pop	{r7, pc}
   17c9e:	46c0      	nop			; (mov r8, r8)
   17ca0:	00011a79 	.word	0x00011a79
   17ca4:	00010ded 	.word	0x00010ded
   17ca8:	20000814 	.word	0x20000814

00017cac <checkNoCallTime>:

bool checkNoCallTime(void)
{
   17cac:	b580      	push	{r7, lr}
   17cae:	b082      	sub	sp, #8
   17cb0:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
   17cb2:	1dba      	adds	r2, r7, #6
   17cb4:	1dfb      	adds	r3, r7, #7
   17cb6:	0011      	movs	r1, r2
   17cb8:	0018      	movs	r0, r3
   17cba:	4b31      	ldr	r3, [pc, #196]	; (17d80 <checkNoCallTime+0xd4>)
   17cbc:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
   17cbe:	4b31      	ldr	r3, [pc, #196]	; (17d84 <checkNoCallTime+0xd8>)
   17cc0:	7a9b      	ldrb	r3, [r3, #10]
   17cc2:	b2da      	uxtb	r2, r3
   17cc4:	1dfb      	adds	r3, r7, #7
   17cc6:	781b      	ldrb	r3, [r3, #0]
   17cc8:	429a      	cmp	r2, r3
   17cca:	d854      	bhi.n	17d76 <checkNoCallTime+0xca>
   17ccc:	4b2d      	ldr	r3, [pc, #180]	; (17d84 <checkNoCallTime+0xd8>)
   17cce:	7b1b      	ldrb	r3, [r3, #12]
   17cd0:	b2da      	uxtb	r2, r3
   17cd2:	1dfb      	adds	r3, r7, #7
   17cd4:	781b      	ldrb	r3, [r3, #0]
   17cd6:	429a      	cmp	r2, r3
   17cd8:	d34d      	bcc.n	17d76 <checkNoCallTime+0xca>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
   17cda:	4b2a      	ldr	r3, [pc, #168]	; (17d84 <checkNoCallTime+0xd8>)
   17cdc:	7a9b      	ldrb	r3, [r3, #10]
   17cde:	b2da      	uxtb	r2, r3
   17ce0:	4b28      	ldr	r3, [pc, #160]	; (17d84 <checkNoCallTime+0xd8>)
   17ce2:	7b1b      	ldrb	r3, [r3, #12]
   17ce4:	b2db      	uxtb	r3, r3
   17ce6:	429a      	cmp	r2, r3
   17ce8:	d111      	bne.n	17d0e <checkNoCallTime+0x62>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   17cea:	4b26      	ldr	r3, [pc, #152]	; (17d84 <checkNoCallTime+0xd8>)
   17cec:	7adb      	ldrb	r3, [r3, #11]
   17cee:	b2da      	uxtb	r2, r3
   17cf0:	1dbb      	adds	r3, r7, #6
   17cf2:	781b      	ldrb	r3, [r3, #0]
   17cf4:	429a      	cmp	r2, r3
   17cf6:	d808      	bhi.n	17d0a <checkNoCallTime+0x5e>
   17cf8:	4b22      	ldr	r3, [pc, #136]	; (17d84 <checkNoCallTime+0xd8>)
   17cfa:	7b5b      	ldrb	r3, [r3, #13]
   17cfc:	b2da      	uxtb	r2, r3
   17cfe:	1dbb      	adds	r3, r7, #6
   17d00:	781b      	ldrb	r3, [r3, #0]
   17d02:	429a      	cmp	r2, r3
   17d04:	d301      	bcc.n	17d0a <checkNoCallTime+0x5e>
			return true;
   17d06:	2301      	movs	r3, #1
   17d08:	e036      	b.n	17d78 <checkNoCallTime+0xcc>
			else
			return false;
   17d0a:	2300      	movs	r3, #0
   17d0c:	e034      	b.n	17d78 <checkNoCallTime+0xcc>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
   17d0e:	4b1d      	ldr	r3, [pc, #116]	; (17d84 <checkNoCallTime+0xd8>)
   17d10:	7a9b      	ldrb	r3, [r3, #10]
   17d12:	b2da      	uxtb	r2, r3
   17d14:	1dfb      	adds	r3, r7, #7
   17d16:	781b      	ldrb	r3, [r3, #0]
   17d18:	429a      	cmp	r2, r3
   17d1a:	d10a      	bne.n	17d32 <checkNoCallTime+0x86>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
   17d1c:	4b19      	ldr	r3, [pc, #100]	; (17d84 <checkNoCallTime+0xd8>)
   17d1e:	7adb      	ldrb	r3, [r3, #11]
   17d20:	b2da      	uxtb	r2, r3
   17d22:	1dbb      	adds	r3, r7, #6
   17d24:	781b      	ldrb	r3, [r3, #0]
   17d26:	429a      	cmp	r2, r3
   17d28:	d801      	bhi.n	17d2e <checkNoCallTime+0x82>
			return true;
   17d2a:	2301      	movs	r3, #1
   17d2c:	e024      	b.n	17d78 <checkNoCallTime+0xcc>
			else
			return false;
   17d2e:	2300      	movs	r3, #0
   17d30:	e022      	b.n	17d78 <checkNoCallTime+0xcc>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
   17d32:	4b14      	ldr	r3, [pc, #80]	; (17d84 <checkNoCallTime+0xd8>)
   17d34:	7b1b      	ldrb	r3, [r3, #12]
   17d36:	b2da      	uxtb	r2, r3
   17d38:	1dfb      	adds	r3, r7, #7
   17d3a:	781b      	ldrb	r3, [r3, #0]
   17d3c:	429a      	cmp	r2, r3
   17d3e:	d10a      	bne.n	17d56 <checkNoCallTime+0xaa>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   17d40:	4b10      	ldr	r3, [pc, #64]	; (17d84 <checkNoCallTime+0xd8>)
   17d42:	7b5b      	ldrb	r3, [r3, #13]
   17d44:	b2da      	uxtb	r2, r3
   17d46:	1dbb      	adds	r3, r7, #6
   17d48:	781b      	ldrb	r3, [r3, #0]
   17d4a:	429a      	cmp	r2, r3
   17d4c:	d301      	bcc.n	17d52 <checkNoCallTime+0xa6>
			return true;
   17d4e:	2301      	movs	r3, #1
   17d50:	e012      	b.n	17d78 <checkNoCallTime+0xcc>
			else
			return false;
   17d52:	2300      	movs	r3, #0
   17d54:	e010      	b.n	17d78 <checkNoCallTime+0xcc>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
   17d56:	4b0b      	ldr	r3, [pc, #44]	; (17d84 <checkNoCallTime+0xd8>)
   17d58:	7a9b      	ldrb	r3, [r3, #10]
   17d5a:	b2da      	uxtb	r2, r3
   17d5c:	1dfb      	adds	r3, r7, #7
   17d5e:	781b      	ldrb	r3, [r3, #0]
   17d60:	429a      	cmp	r2, r3
   17d62:	d208      	bcs.n	17d76 <checkNoCallTime+0xca>
   17d64:	4b07      	ldr	r3, [pc, #28]	; (17d84 <checkNoCallTime+0xd8>)
   17d66:	7b1b      	ldrb	r3, [r3, #12]
   17d68:	b2da      	uxtb	r2, r3
   17d6a:	1dfb      	adds	r3, r7, #7
   17d6c:	781b      	ldrb	r3, [r3, #0]
   17d6e:	429a      	cmp	r2, r3
   17d70:	d901      	bls.n	17d76 <checkNoCallTime+0xca>
		return true;
   17d72:	2301      	movs	r3, #1
   17d74:	e000      	b.n	17d78 <checkNoCallTime+0xcc>
	}
	return false;
   17d76:	2300      	movs	r3, #0
}
   17d78:	0018      	movs	r0, r3
   17d7a:	46bd      	mov	sp, r7
   17d7c:	b002      	add	sp, #8
   17d7e:	bd80      	pop	{r7, pc}
   17d80:	00017fc1 	.word	0x00017fc1
   17d84:	20000854 	.word	0x20000854

00017d88 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
   17d88:	b580      	push	{r7, lr}
   17d8a:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
   17d8c:	4b04      	ldr	r3, [pc, #16]	; (17da0 <verifyRemoteNumber+0x18>)
   17d8e:	2201      	movs	r2, #1
   17d90:	2101      	movs	r1, #1
   17d92:	0018      	movs	r0, r3
   17d94:	4b03      	ldr	r3, [pc, #12]	; (17da4 <verifyRemoteNumber+0x1c>)
   17d96:	4798      	blx	r3
}
   17d98:	46c0      	nop			; (mov r8, r8)
   17d9a:	46bd      	mov	sp, r7
   17d9c:	bd80      	pop	{r7, pc}
   17d9e:	46c0      	nop			; (mov r8, r8)
   17da0:	0002b050 	.word	0x0002b050
   17da4:	00017da9 	.word	0x00017da9

00017da8 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
   17da8:	b580      	push	{r7, lr}
   17daa:	b08e      	sub	sp, #56	; 0x38
   17dac:	af00      	add	r7, sp, #0
   17dae:	6078      	str	r0, [r7, #4]
   17db0:	0008      	movs	r0, r1
   17db2:	0011      	movs	r1, r2
   17db4:	1cfb      	adds	r3, r7, #3
   17db6:	1c02      	adds	r2, r0, #0
   17db8:	701a      	strb	r2, [r3, #0]
   17dba:	1cbb      	adds	r3, r7, #2
   17dbc:	1c0a      	adds	r2, r1, #0
   17dbe:	701a      	strb	r2, [r3, #0]
	inCall=true;
   17dc0:	4b55      	ldr	r3, [pc, #340]	; (17f18 <sendSMS+0x170>)
   17dc2:	2201      	movs	r2, #1
   17dc4:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
   17dc6:	1cfb      	adds	r3, r7, #3
   17dc8:	781b      	ldrb	r3, [r3, #0]
   17dca:	2201      	movs	r2, #1
   17dcc:	4053      	eors	r3, r2
   17dce:	b2db      	uxtb	r3, r3
   17dd0:	2b00      	cmp	r3, #0
   17dd2:	d048      	beq.n	17e66 <sendSMS+0xbe>
	{
		switch(actionType)
   17dd4:	4b51      	ldr	r3, [pc, #324]	; (17f1c <sendSMS+0x174>)
   17dd6:	781b      	ldrb	r3, [r3, #0]
   17dd8:	3b43      	subs	r3, #67	; 0x43
   17dda:	2b12      	cmp	r3, #18
   17ddc:	d900      	bls.n	17de0 <sendSMS+0x38>
   17dde:	e096      	b.n	17f0e <sendSMS+0x166>
   17de0:	009a      	lsls	r2, r3, #2
   17de2:	4b4f      	ldr	r3, [pc, #316]	; (17f20 <sendSMS+0x178>)
   17de4:	18d3      	adds	r3, r2, r3
   17de6:	681b      	ldr	r3, [r3, #0]
   17de8:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
   17dea:	687b      	ldr	r3, [r7, #4]
   17dec:	0018      	movs	r0, r3
   17dee:	4b4d      	ldr	r3, [pc, #308]	; (17f24 <sendSMS+0x17c>)
   17df0:	4798      	blx	r3
   17df2:	0003      	movs	r3, r0
   17df4:	001a      	movs	r2, r3
   17df6:	687b      	ldr	r3, [r7, #4]
   17df8:	189a      	adds	r2, r3, r2
   17dfa:	4b4b      	ldr	r3, [pc, #300]	; (17f28 <sendSMS+0x180>)
   17dfc:	0010      	movs	r0, r2
   17dfe:	0019      	movs	r1, r3
   17e00:	2307      	movs	r3, #7
   17e02:	001a      	movs	r2, r3
   17e04:	4b49      	ldr	r3, [pc, #292]	; (17f2c <sendSMS+0x184>)
   17e06:	4798      	blx	r3
			strcat(msg,STR_ON);
   17e08:	687b      	ldr	r3, [r7, #4]
   17e0a:	0018      	movs	r0, r3
   17e0c:	4b45      	ldr	r3, [pc, #276]	; (17f24 <sendSMS+0x17c>)
   17e0e:	4798      	blx	r3
   17e10:	0003      	movs	r3, r0
   17e12:	001a      	movs	r2, r3
   17e14:	687b      	ldr	r3, [r7, #4]
   17e16:	189a      	adds	r2, r3, r2
   17e18:	4b45      	ldr	r3, [pc, #276]	; (17f30 <sendSMS+0x188>)
   17e1a:	0010      	movs	r0, r2
   17e1c:	0019      	movs	r1, r3
   17e1e:	2303      	movs	r3, #3
   17e20:	001a      	movs	r2, r3
   17e22:	4b42      	ldr	r3, [pc, #264]	; (17f2c <sendSMS+0x184>)
   17e24:	4798      	blx	r3
			break;
   17e26:	e01e      	b.n	17e66 <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
   17e28:	687b      	ldr	r3, [r7, #4]
   17e2a:	0018      	movs	r0, r3
   17e2c:	4b3d      	ldr	r3, [pc, #244]	; (17f24 <sendSMS+0x17c>)
   17e2e:	4798      	blx	r3
   17e30:	0003      	movs	r3, r0
   17e32:	001a      	movs	r2, r3
   17e34:	687b      	ldr	r3, [r7, #4]
   17e36:	189a      	adds	r2, r3, r2
   17e38:	4b3b      	ldr	r3, [pc, #236]	; (17f28 <sendSMS+0x180>)
   17e3a:	0010      	movs	r0, r2
   17e3c:	0019      	movs	r1, r3
   17e3e:	2307      	movs	r3, #7
   17e40:	001a      	movs	r2, r3
   17e42:	4b3a      	ldr	r3, [pc, #232]	; (17f2c <sendSMS+0x184>)
   17e44:	4798      	blx	r3
			strcat(msg,STR_OFF);
   17e46:	687b      	ldr	r3, [r7, #4]
   17e48:	0018      	movs	r0, r3
   17e4a:	4b36      	ldr	r3, [pc, #216]	; (17f24 <sendSMS+0x17c>)
   17e4c:	4798      	blx	r3
   17e4e:	0003      	movs	r3, r0
   17e50:	001a      	movs	r2, r3
   17e52:	687b      	ldr	r3, [r7, #4]
   17e54:	189a      	adds	r2, r3, r2
   17e56:	4b37      	ldr	r3, [pc, #220]	; (17f34 <sendSMS+0x18c>)
   17e58:	0010      	movs	r0, r2
   17e5a:	0019      	movs	r1, r3
   17e5c:	2304      	movs	r3, #4
   17e5e:	001a      	movs	r2, r3
   17e60:	4b32      	ldr	r3, [pc, #200]	; (17f2c <sendSMS+0x184>)
   17e62:	4798      	blx	r3
			break;
   17e64:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
   17e66:	1cbb      	adds	r3, r7, #2
   17e68:	781b      	ldrb	r3, [r3, #0]
   17e6a:	2b02      	cmp	r3, #2
   17e6c:	d105      	bne.n	17e7a <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
   17e6e:	2324      	movs	r3, #36	; 0x24
   17e70:	18fb      	adds	r3, r7, r3
   17e72:	0018      	movs	r0, r3
   17e74:	4b30      	ldr	r3, [pc, #192]	; (17f38 <sendSMS+0x190>)
   17e76:	4798      	blx	r3
   17e78:	e034      	b.n	17ee4 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
   17e7a:	1cbb      	adds	r3, r7, #2
   17e7c:	781b      	ldrb	r3, [r3, #0]
   17e7e:	2b01      	cmp	r3, #1
   17e80:	d109      	bne.n	17e96 <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   17e82:	4b2e      	ldr	r3, [pc, #184]	; (17f3c <sendSMS+0x194>)
   17e84:	78db      	ldrb	r3, [r3, #3]
   17e86:	2b00      	cmp	r3, #0
   17e88:	d02c      	beq.n	17ee4 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
   17e8a:	2324      	movs	r3, #36	; 0x24
   17e8c:	18fb      	adds	r3, r7, r3
   17e8e:	0018      	movs	r0, r3
   17e90:	4b2b      	ldr	r3, [pc, #172]	; (17f40 <sendSMS+0x198>)
   17e92:	4798      	blx	r3
   17e94:	e026      	b.n	17ee4 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
   17e96:	4b2b      	ldr	r3, [pc, #172]	; (17f44 <sendSMS+0x19c>)
   17e98:	781b      	ldrb	r3, [r3, #0]
   17e9a:	2b00      	cmp	r3, #0
   17e9c:	d01d      	beq.n	17eda <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   17e9e:	4b2a      	ldr	r3, [pc, #168]	; (17f48 <sendSMS+0x1a0>)
   17ea0:	223c      	movs	r2, #60	; 0x3c
   17ea2:	2100      	movs	r1, #0
   17ea4:	0018      	movs	r0, r3
   17ea6:	4b29      	ldr	r3, [pc, #164]	; (17f4c <sendSMS+0x1a4>)
   17ea8:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   17eaa:	4b27      	ldr	r3, [pc, #156]	; (17f48 <sendSMS+0x1a0>)
   17eac:	0019      	movs	r1, r3
   17eae:	2003      	movs	r0, #3
   17eb0:	4b27      	ldr	r3, [pc, #156]	; (17f50 <sendSMS+0x1a8>)
   17eb2:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   17eb4:	230c      	movs	r3, #12
   17eb6:	18fa      	adds	r2, r7, r3
   17eb8:	4b23      	ldr	r3, [pc, #140]	; (17f48 <sendSMS+0x1a0>)
   17eba:	0010      	movs	r0, r2
   17ebc:	0019      	movs	r1, r3
   17ebe:	2318      	movs	r3, #24
   17ec0:	001a      	movs	r2, r3
   17ec2:	4b1a      	ldr	r3, [pc, #104]	; (17f2c <sendSMS+0x184>)
   17ec4:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
   17ec6:	230c      	movs	r3, #12
   17ec8:	18fb      	adds	r3, r7, r3
   17eca:	1d1a      	adds	r2, r3, #4
   17ecc:	2324      	movs	r3, #36	; 0x24
   17ece:	18fb      	adds	r3, r7, r3
   17ed0:	0011      	movs	r1, r2
   17ed2:	0018      	movs	r0, r3
   17ed4:	4b1f      	ldr	r3, [pc, #124]	; (17f54 <sendSMS+0x1ac>)
   17ed6:	4798      	blx	r3
   17ed8:	e004      	b.n	17ee4 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
   17eda:	2324      	movs	r3, #36	; 0x24
   17edc:	18fb      	adds	r3, r7, r3
   17ede:	0018      	movs	r0, r3
   17ee0:	4b1d      	ldr	r3, [pc, #116]	; (17f58 <sendSMS+0x1b0>)
   17ee2:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17ee4:	2324      	movs	r3, #36	; 0x24
   17ee6:	18fb      	adds	r3, r7, r3
   17ee8:	2200      	movs	r2, #0
   17eea:	0019      	movs	r1, r3
   17eec:	2005      	movs	r0, #5
   17eee:	4b1b      	ldr	r3, [pc, #108]	; (17f5c <sendSMS+0x1b4>)
   17ef0:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
   17ef2:	687a      	ldr	r2, [r7, #4]
   17ef4:	2324      	movs	r3, #36	; 0x24
   17ef6:	18fb      	adds	r3, r7, r3
   17ef8:	0011      	movs	r1, r2
   17efa:	0018      	movs	r0, r3
   17efc:	4b18      	ldr	r3, [pc, #96]	; (17f60 <sendSMS+0x1b8>)
   17efe:	4798      	blx	r3
	isMsgFromAdmin = false;
   17f00:	4b10      	ldr	r3, [pc, #64]	; (17f44 <sendSMS+0x19c>)
   17f02:	2200      	movs	r2, #0
   17f04:	701a      	strb	r2, [r3, #0]
	inCall=false;
   17f06:	4b04      	ldr	r3, [pc, #16]	; (17f18 <sendSMS+0x170>)
   17f08:	2200      	movs	r2, #0
   17f0a:	701a      	strb	r2, [r3, #0]
   17f0c:	e000      	b.n	17f10 <sendSMS+0x168>
			return;
   17f0e:	46c0      	nop			; (mov r8, r8)
}
   17f10:	46bd      	mov	sp, r7
   17f12:	b00e      	add	sp, #56	; 0x38
   17f14:	bd80      	pop	{r7, pc}
   17f16:	46c0      	nop			; (mov r8, r8)
   17f18:	2000099c 	.word	0x2000099c
   17f1c:	20000963 	.word	0x20000963
   17f20:	0002b0d4 	.word	0x0002b0d4
   17f24:	000299eb 	.word	0x000299eb
   17f28:	0002b058 	.word	0x0002b058
   17f2c:	00029725 	.word	0x00029725
   17f30:	0002afdc 	.word	0x0002afdc
   17f34:	0002b060 	.word	0x0002b060
   17f38:	00010acd 	.word	0x00010acd
   17f3c:	2000082c 	.word	0x2000082c
   17f40:	00010b09 	.word	0x00010b09
   17f44:	20000977 	.word	0x20000977
   17f48:	20000784 	.word	0x20000784
   17f4c:	0002975b 	.word	0x0002975b
   17f50:	0002443d 	.word	0x0002443d
   17f54:	000299db 	.word	0x000299db
   17f58:	00010d21 	.word	0x00010d21
   17f5c:	0001db19 	.word	0x0001db19
   17f60:	00012b9d 	.word	0x00012b9d

00017f64 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
   17f64:	b580      	push	{r7, lr}
   17f66:	b082      	sub	sp, #8
   17f68:	af00      	add	r7, sp, #0
   17f6a:	0002      	movs	r2, r0
   17f6c:	1dfb      	adds	r3, r7, #7
   17f6e:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
   17f70:	1dfb      	adds	r3, r7, #7
   17f72:	781b      	ldrb	r3, [r3, #0]
   17f74:	2bff      	cmp	r3, #255	; 0xff
   17f76:	d103      	bne.n	17f80 <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
   17f78:	2041      	movs	r0, #65	; 0x41
   17f7a:	4b0f      	ldr	r3, [pc, #60]	; (17fb8 <sendDTMFTone+0x54>)
   17f7c:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
   17f7e:	e016      	b.n	17fae <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
   17f80:	1dfb      	adds	r3, r7, #7
   17f82:	781b      	ldrb	r3, [r3, #0]
   17f84:	2b00      	cmp	r3, #0
   17f86:	d107      	bne.n	17f98 <sendDTMFTone+0x34>
   17f88:	4b0c      	ldr	r3, [pc, #48]	; (17fbc <sendDTMFTone+0x58>)
   17f8a:	78db      	ldrb	r3, [r3, #3]
   17f8c:	2b00      	cmp	r3, #0
   17f8e:	d003      	beq.n	17f98 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
   17f90:	2044      	movs	r0, #68	; 0x44
   17f92:	4b09      	ldr	r3, [pc, #36]	; (17fb8 <sendDTMFTone+0x54>)
   17f94:	4798      	blx	r3
}
   17f96:	e00a      	b.n	17fae <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
   17f98:	1dfb      	adds	r3, r7, #7
   17f9a:	781b      	ldrb	r3, [r3, #0]
   17f9c:	2b01      	cmp	r3, #1
   17f9e:	d106      	bne.n	17fae <sendDTMFTone+0x4a>
   17fa0:	4b06      	ldr	r3, [pc, #24]	; (17fbc <sendDTMFTone+0x58>)
   17fa2:	78db      	ldrb	r3, [r3, #3]
   17fa4:	2b00      	cmp	r3, #0
   17fa6:	d002      	beq.n	17fae <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
   17fa8:	2043      	movs	r0, #67	; 0x43
   17faa:	4b03      	ldr	r3, [pc, #12]	; (17fb8 <sendDTMFTone+0x54>)
   17fac:	4798      	blx	r3
}
   17fae:	46c0      	nop			; (mov r8, r8)
   17fb0:	46bd      	mov	sp, r7
   17fb2:	b002      	add	sp, #8
   17fb4:	bd80      	pop	{r7, pc}
   17fb6:	46c0      	nop			; (mov r8, r8)
   17fb8:	00013011 	.word	0x00013011
   17fbc:	2000082c 	.word	0x2000082c

00017fc0 <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
   17fc0:	b580      	push	{r7, lr}
   17fc2:	b082      	sub	sp, #8
   17fc4:	af00      	add	r7, sp, #0
   17fc6:	6078      	str	r0, [r7, #4]
   17fc8:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
   17fca:	4b09      	ldr	r3, [pc, #36]	; (17ff0 <getSystemTime+0x30>)
   17fcc:	4798      	blx	r3
   17fce:	1e03      	subs	r3, r0, #0
   17fd0:	d109      	bne.n	17fe6 <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
   17fd2:	4b08      	ldr	r3, [pc, #32]	; (17ff4 <getSystemTime+0x34>)
   17fd4:	78db      	ldrb	r3, [r3, #3]
   17fd6:	b2da      	uxtb	r2, r3
   17fd8:	687b      	ldr	r3, [r7, #4]
   17fda:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
   17fdc:	4b05      	ldr	r3, [pc, #20]	; (17ff4 <getSystemTime+0x34>)
   17fde:	791b      	ldrb	r3, [r3, #4]
   17fe0:	b2da      	uxtb	r2, r3
   17fe2:	683b      	ldr	r3, [r7, #0]
   17fe4:	701a      	strb	r2, [r3, #0]
	}
}
   17fe6:	46c0      	nop			; (mov r8, r8)
   17fe8:	46bd      	mov	sp, r7
   17fea:	b002      	add	sp, #8
   17fec:	bd80      	pop	{r7, pc}
   17fee:	46c0      	nop			; (mov r8, r8)
   17ff0:	000131f1 	.word	0x000131f1
   17ff4:	20000888 	.word	0x20000888

00017ff8 <checkSMSForPassCode>:


bool checkSMSForPassCode(char *receivedSMS)
{
   17ff8:	b590      	push	{r4, r7, lr}
   17ffa:	b087      	sub	sp, #28
   17ffc:	af00      	add	r7, sp, #0
   17ffe:	6078      	str	r0, [r7, #4]
	char passCode[10]={0};
   18000:	2308      	movs	r3, #8
   18002:	18fb      	adds	r3, r7, r3
   18004:	0018      	movs	r0, r3
   18006:	230a      	movs	r3, #10
   18008:	001a      	movs	r2, r3
   1800a:	2100      	movs	r1, #0
   1800c:	4b2c      	ldr	r3, [pc, #176]	; (180c0 <checkSMSForPassCode+0xc8>)
   1800e:	4798      	blx	r3
	uint32_t pCodeint = factory_settings_parameter_struct.DeviceId_ee + (factory_settings_parameter_struct.dateCode<<1);
   18010:	4b2c      	ldr	r3, [pc, #176]	; (180c4 <checkSMSForPassCode+0xcc>)
   18012:	689a      	ldr	r2, [r3, #8]
   18014:	4b2b      	ldr	r3, [pc, #172]	; (180c4 <checkSMSForPassCode+0xcc>)
   18016:	68db      	ldr	r3, [r3, #12]
   18018:	005b      	lsls	r3, r3, #1
   1801a:	18d3      	adds	r3, r2, r3
   1801c:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint >> 4;
   1801e:	697b      	ldr	r3, [r7, #20]
   18020:	091b      	lsrs	r3, r3, #4
   18022:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint << 4;
   18024:	697b      	ldr	r3, [r7, #20]
   18026:	011b      	lsls	r3, r3, #4
   18028:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint % 1000000L;
   1802a:	697a      	ldr	r2, [r7, #20]
   1802c:	4b26      	ldr	r3, [pc, #152]	; (180c8 <checkSMSForPassCode+0xd0>)
   1802e:	4927      	ldr	r1, [pc, #156]	; (180cc <checkSMSForPassCode+0xd4>)
   18030:	0010      	movs	r0, r2
   18032:	4798      	blx	r3
   18034:	000b      	movs	r3, r1
   18036:	617b      	str	r3, [r7, #20]
	
	sprintf(passCode, "~%u~",pCodeint);
   18038:	697a      	ldr	r2, [r7, #20]
   1803a:	4925      	ldr	r1, [pc, #148]	; (180d0 <checkSMSForPassCode+0xd8>)
   1803c:	2308      	movs	r3, #8
   1803e:	18fb      	adds	r3, r7, r3
   18040:	0018      	movs	r0, r3
   18042:	4b24      	ldr	r3, [pc, #144]	; (180d4 <checkSMSForPassCode+0xdc>)
   18044:	4798      	blx	r3
	
	if(strstr(receivedSMS,passCode))							//check passCode exists
   18046:	2308      	movs	r3, #8
   18048:	18fa      	adds	r2, r7, r3
   1804a:	687b      	ldr	r3, [r7, #4]
   1804c:	0011      	movs	r1, r2
   1804e:	0018      	movs	r0, r3
   18050:	4b21      	ldr	r3, [pc, #132]	; (180d8 <checkSMSForPassCode+0xe0>)
   18052:	4798      	blx	r3
   18054:	1e03      	subs	r3, r0, #0
   18056:	d013      	beq.n	18080 <checkSMSForPassCode+0x88>
	{
		memmove(receivedSMS,receivedSMS+strlen(passCode),strlen(receivedSMS));		//discard passPhrase
   18058:	2308      	movs	r3, #8
   1805a:	18fb      	adds	r3, r7, r3
   1805c:	0018      	movs	r0, r3
   1805e:	4b1f      	ldr	r3, [pc, #124]	; (180dc <checkSMSForPassCode+0xe4>)
   18060:	4798      	blx	r3
   18062:	0002      	movs	r2, r0
   18064:	687b      	ldr	r3, [r7, #4]
   18066:	189c      	adds	r4, r3, r2
   18068:	687b      	ldr	r3, [r7, #4]
   1806a:	0018      	movs	r0, r3
   1806c:	4b1b      	ldr	r3, [pc, #108]	; (180dc <checkSMSForPassCode+0xe4>)
   1806e:	4798      	blx	r3
   18070:	0002      	movs	r2, r0
   18072:	687b      	ldr	r3, [r7, #4]
   18074:	0021      	movs	r1, r4
   18076:	0018      	movs	r0, r3
   18078:	4b19      	ldr	r3, [pc, #100]	; (180e0 <checkSMSForPassCode+0xe8>)
   1807a:	4798      	blx	r3
		return true;
   1807c:	2301      	movs	r3, #1
   1807e:	e01a      	b.n	180b6 <checkSMSForPassCode+0xbe>
	}
	
	if(user_count_struct.current_user_no_count==0 && StringstartsWith(receivedSMS,"****"))
   18080:	4b18      	ldr	r3, [pc, #96]	; (180e4 <checkSMSForPassCode+0xec>)
   18082:	789b      	ldrb	r3, [r3, #2]
   18084:	2b00      	cmp	r3, #0
   18086:	d115      	bne.n	180b4 <checkSMSForPassCode+0xbc>
   18088:	4a17      	ldr	r2, [pc, #92]	; (180e8 <checkSMSForPassCode+0xf0>)
   1808a:	687b      	ldr	r3, [r7, #4]
   1808c:	0011      	movs	r1, r2
   1808e:	0018      	movs	r0, r3
   18090:	4b16      	ldr	r3, [pc, #88]	; (180ec <checkSMSForPassCode+0xf4>)
   18092:	4798      	blx	r3
   18094:	1e03      	subs	r3, r0, #0
   18096:	d00d      	beq.n	180b4 <checkSMSForPassCode+0xbc>
	{
		memmove(receivedSMS,receivedSMS+4,strlen(receivedSMS));		//discard passPhrase
   18098:	687b      	ldr	r3, [r7, #4]
   1809a:	1d1c      	adds	r4, r3, #4
   1809c:	687b      	ldr	r3, [r7, #4]
   1809e:	0018      	movs	r0, r3
   180a0:	4b0e      	ldr	r3, [pc, #56]	; (180dc <checkSMSForPassCode+0xe4>)
   180a2:	4798      	blx	r3
   180a4:	0002      	movs	r2, r0
   180a6:	687b      	ldr	r3, [r7, #4]
   180a8:	0021      	movs	r1, r4
   180aa:	0018      	movs	r0, r3
   180ac:	4b0c      	ldr	r3, [pc, #48]	; (180e0 <checkSMSForPassCode+0xe8>)
   180ae:	4798      	blx	r3
		return true;
   180b0:	2301      	movs	r3, #1
   180b2:	e000      	b.n	180b6 <checkSMSForPassCode+0xbe>
	}
	
	return false;
   180b4:	2300      	movs	r3, #0
}
   180b6:	0018      	movs	r0, r3
   180b8:	46bd      	mov	sp, r7
   180ba:	b007      	add	sp, #28
   180bc:	bd90      	pop	{r4, r7, pc}
   180be:	46c0      	nop			; (mov r8, r8)
   180c0:	0002975b 	.word	0x0002975b
   180c4:	2000082c 	.word	0x2000082c
   180c8:	00026ff1 	.word	0x00026ff1
   180cc:	000f4240 	.word	0x000f4240
   180d0:	0002b064 	.word	0x0002b064
   180d4:	00029961 	.word	0x00029961
   180d8:	00029a1b 	.word	0x00029a1b
   180dc:	000299eb 	.word	0x000299eb
   180e0:	00029737 	.word	0x00029737
   180e4:	20000814 	.word	0x20000814
   180e8:	0002b06c 	.word	0x0002b06c
   180ec:	0001420d 	.word	0x0001420d

000180f0 <sendFWUpdateSMS>:

void sendFWUpdateSMS(void)
{
   180f0:	b590      	push	{r4, r7, lr}
   180f2:	b08f      	sub	sp, #60	; 0x3c
   180f4:	af00      	add	r7, sp, #0
	if(bootloader_parameter.firmware_update_process_completed)
   180f6:	4b3c      	ldr	r3, [pc, #240]	; (181e8 <sendFWUpdateSMS+0xf8>)
   180f8:	799b      	ldrb	r3, [r3, #6]
   180fa:	2b00      	cmp	r3, #0
   180fc:	d06f      	beq.n	181de <sendFWUpdateSMS+0xee>
	{
		char uResp_SMS[25]={0};
   180fe:	231c      	movs	r3, #28
   18100:	18fb      	adds	r3, r7, r3
   18102:	0018      	movs	r0, r3
   18104:	2319      	movs	r3, #25
   18106:	001a      	movs	r2, r3
   18108:	2100      	movs	r1, #0
   1810a:	4b38      	ldr	r3, [pc, #224]	; (181ec <sendFWUpdateSMS+0xfc>)
   1810c:	4798      	blx	r3
		
		/*Firmware update Completed Successfully*/
		if(bootloader_parameter.firmware_update_error_code==0)
   1810e:	4b36      	ldr	r3, [pc, #216]	; (181e8 <sendFWUpdateSMS+0xf8>)
   18110:	79db      	ldrb	r3, [r3, #7]
   18112:	2b00      	cmp	r3, #0
   18114:	d109      	bne.n	1812a <sendFWUpdateSMS+0x3a>
		{
			strcpy(uResp_SMS,"F/W Update Completed");
   18116:	231c      	movs	r3, #28
   18118:	18fb      	adds	r3, r7, r3
   1811a:	4a35      	ldr	r2, [pc, #212]	; (181f0 <sendFWUpdateSMS+0x100>)
   1811c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1811e:	c313      	stmia	r3!, {r0, r1, r4}
   18120:	ca03      	ldmia	r2!, {r0, r1}
   18122:	c303      	stmia	r3!, {r0, r1}
   18124:	7812      	ldrb	r2, [r2, #0]
   18126:	701a      	strb	r2, [r3, #0]
   18128:	e008      	b.n	1813c <sendFWUpdateSMS+0x4c>
		}
		/*Error in Firmware update*/
		else
		{
			strcpy(uResp_SMS,"F/W Update Error");
   1812a:	231c      	movs	r3, #28
   1812c:	18fb      	adds	r3, r7, r3
   1812e:	4a31      	ldr	r2, [pc, #196]	; (181f4 <sendFWUpdateSMS+0x104>)
   18130:	ca13      	ldmia	r2!, {r0, r1, r4}
   18132:	c313      	stmia	r3!, {r0, r1, r4}
   18134:	6811      	ldr	r1, [r2, #0]
   18136:	6019      	str	r1, [r3, #0]
   18138:	7912      	ldrb	r2, [r2, #4]
   1813a:	711a      	strb	r2, [r3, #4]
		}
		
		if(bootloader_parameter.firmware_updater_mobile_no[0]!='0')
   1813c:	4b2a      	ldr	r3, [pc, #168]	; (181e8 <sendFWUpdateSMS+0xf8>)
   1813e:	7b1b      	ldrb	r3, [r3, #12]
   18140:	2b30      	cmp	r3, #48	; 0x30
   18142:	d007      	beq.n	18154 <sendFWUpdateSMS+0x64>
		{
			gsm_send_sms(bootloader_parameter.firmware_updater_mobile_no,uResp_SMS);
   18144:	231c      	movs	r3, #28
   18146:	18fa      	adds	r2, r7, r3
   18148:	4b2b      	ldr	r3, [pc, #172]	; (181f8 <sendFWUpdateSMS+0x108>)
   1814a:	0011      	movs	r1, r2
   1814c:	0018      	movs	r0, r3
   1814e:	4b2b      	ldr	r3, [pc, #172]	; (181fc <sendFWUpdateSMS+0x10c>)
   18150:	4798      	blx	r3
   18152:	e01a      	b.n	1818a <sendFWUpdateSMS+0x9a>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   18154:	4b2a      	ldr	r3, [pc, #168]	; (18200 <sendFWUpdateSMS+0x110>)
   18156:	223c      	movs	r2, #60	; 0x3c
   18158:	2100      	movs	r1, #0
   1815a:	0018      	movs	r0, r3
   1815c:	4b23      	ldr	r3, [pc, #140]	; (181ec <sendFWUpdateSMS+0xfc>)
   1815e:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   18160:	4b27      	ldr	r3, [pc, #156]	; (18200 <sendFWUpdateSMS+0x110>)
   18162:	0019      	movs	r1, r3
   18164:	2003      	movs	r0, #3
   18166:	4b27      	ldr	r3, [pc, #156]	; (18204 <sendFWUpdateSMS+0x114>)
   18168:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   1816a:	1d3a      	adds	r2, r7, #4
   1816c:	4b24      	ldr	r3, [pc, #144]	; (18200 <sendFWUpdateSMS+0x110>)
   1816e:	0010      	movs	r0, r2
   18170:	0019      	movs	r1, r3
   18172:	2318      	movs	r3, #24
   18174:	001a      	movs	r2, r3
   18176:	4b24      	ldr	r3, [pc, #144]	; (18208 <sendFWUpdateSMS+0x118>)
   18178:	4798      	blx	r3

			gsm_send_sms(mobile_no.mobile_no_ee,uResp_SMS);
   1817a:	231c      	movs	r3, #28
   1817c:	18fa      	adds	r2, r7, r3
   1817e:	1d3b      	adds	r3, r7, #4
   18180:	3304      	adds	r3, #4
   18182:	0011      	movs	r1, r2
   18184:	0018      	movs	r0, r3
   18186:	4b1d      	ldr	r3, [pc, #116]	; (181fc <sendFWUpdateSMS+0x10c>)
   18188:	4798      	blx	r3
		}
		
		bootloader_parameter.ulongintDiscard = 0;
   1818a:	4b17      	ldr	r3, [pc, #92]	; (181e8 <sendFWUpdateSMS+0xf8>)
   1818c:	2200      	movs	r2, #0
   1818e:	601a      	str	r2, [r3, #0]
		bootloader_parameter.firmware_download_pending = false;
   18190:	4b15      	ldr	r3, [pc, #84]	; (181e8 <sendFWUpdateSMS+0xf8>)
   18192:	2200      	movs	r2, #0
   18194:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   18196:	4b14      	ldr	r3, [pc, #80]	; (181e8 <sendFWUpdateSMS+0xf8>)
   18198:	2200      	movs	r2, #0
   1819a:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   1819c:	4b12      	ldr	r3, [pc, #72]	; (181e8 <sendFWUpdateSMS+0xf8>)
   1819e:	2200      	movs	r2, #0
   181a0:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries = 0;
   181a2:	4b11      	ldr	r3, [pc, #68]	; (181e8 <sendFWUpdateSMS+0xf8>)
   181a4:	2200      	movs	r2, #0
   181a6:	721a      	strb	r2, [r3, #8]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   181a8:	4b13      	ldr	r3, [pc, #76]	; (181f8 <sendFWUpdateSMS+0x108>)
   181aa:	2210      	movs	r2, #16
   181ac:	2100      	movs	r1, #0
   181ae:	0018      	movs	r0, r3
   181b0:	4b0e      	ldr	r3, [pc, #56]	; (181ec <sendFWUpdateSMS+0xfc>)
   181b2:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   181b4:	4b10      	ldr	r3, [pc, #64]	; (181f8 <sendFWUpdateSMS+0x108>)
   181b6:	4a15      	ldr	r2, [pc, #84]	; (1820c <sendFWUpdateSMS+0x11c>)
   181b8:	ca03      	ldmia	r2!, {r0, r1}
   181ba:	c303      	stmia	r3!, {r0, r1}
   181bc:	8811      	ldrh	r1, [r2, #0]
   181be:	8019      	strh	r1, [r3, #0]
   181c0:	7892      	ldrb	r2, [r2, #2]
   181c2:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   181c4:	4908      	ldr	r1, [pc, #32]	; (181e8 <sendFWUpdateSMS+0xf8>)
   181c6:	4b0e      	ldr	r3, [pc, #56]	; (18200 <sendFWUpdateSMS+0x110>)
   181c8:	221c      	movs	r2, #28
   181ca:	0018      	movs	r0, r3
   181cc:	4b0e      	ldr	r3, [pc, #56]	; (18208 <sendFWUpdateSMS+0x118>)
   181ce:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   181d0:	4b0b      	ldr	r3, [pc, #44]	; (18200 <sendFWUpdateSMS+0x110>)
   181d2:	0019      	movs	r1, r3
   181d4:	2000      	movs	r0, #0
   181d6:	4b0e      	ldr	r3, [pc, #56]	; (18210 <sendFWUpdateSMS+0x120>)
   181d8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   181da:	4b0e      	ldr	r3, [pc, #56]	; (18214 <sendFWUpdateSMS+0x124>)
   181dc:	4798      	blx	r3
	}
}
   181de:	46c0      	nop			; (mov r8, r8)
   181e0:	46bd      	mov	sp, r7
   181e2:	b00f      	add	sp, #60	; 0x3c
   181e4:	bd90      	pop	{r4, r7, pc}
   181e6:	46c0      	nop			; (mov r8, r8)
   181e8:	200007f8 	.word	0x200007f8
   181ec:	0002975b 	.word	0x0002975b
   181f0:	0002b074 	.word	0x0002b074
   181f4:	0002b08c 	.word	0x0002b08c
   181f8:	20000804 	.word	0x20000804
   181fc:	00012b9d 	.word	0x00012b9d
   18200:	20000784 	.word	0x20000784
   18204:	0002443d 	.word	0x0002443d
   18208:	00029725 	.word	0x00029725
   1820c:	0002b0a0 	.word	0x0002b0a0
   18210:	00024331 	.word	0x00024331
   18214:	000244d9 	.word	0x000244d9

00018218 <vTask_GSM_service>:


static void vTask_GSM_service(void *params)
{
   18218:	b590      	push	{r4, r7, lr}
   1821a:	b0cf      	sub	sp, #316	; 0x13c
   1821c:	af02      	add	r7, sp, #8
   1821e:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
   18220:	2300      	movs	r3, #0
   18222:	2296      	movs	r2, #150	; 0x96
   18224:	0052      	lsls	r2, r2, #1
   18226:	18ba      	adds	r2, r7, r2
   18228:	6013      	str	r3, [r2, #0]
	GSM_PWR_AS_OP;
   1822a:	4bcc      	ldr	r3, [pc, #816]	; (1855c <vTask_GSM_service+0x344>)
   1822c:	4acb      	ldr	r2, [pc, #812]	; (1855c <vTask_GSM_service+0x344>)
   1822e:	6812      	ldr	r2, [r2, #0]
   18230:	2180      	movs	r1, #128	; 0x80
   18232:	0249      	lsls	r1, r1, #9
   18234:	430a      	orrs	r2, r1
   18236:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   18238:	2388      	movs	r3, #136	; 0x88
   1823a:	005b      	lsls	r3, r3, #1
   1823c:	18fb      	adds	r3, r7, r3
   1823e:	0018      	movs	r0, r3
   18240:	4bc7      	ldr	r3, [pc, #796]	; (18560 <vTask_GSM_service+0x348>)
   18242:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
   18244:	2388      	movs	r3, #136	; 0x88
   18246:	005b      	lsls	r3, r3, #1
   18248:	18fb      	adds	r3, r7, r3
   1824a:	2200      	movs	r2, #0
   1824c:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   1824e:	2388      	movs	r3, #136	; 0x88
   18250:	005b      	lsls	r3, r3, #1
   18252:	18fb      	adds	r3, r7, r3
   18254:	2200      	movs	r2, #0
   18256:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
   18258:	2388      	movs	r3, #136	; 0x88
   1825a:	005b      	lsls	r3, r3, #1
   1825c:	18fb      	adds	r3, r7, r3
   1825e:	0019      	movs	r1, r3
   18260:	201b      	movs	r0, #27
   18262:	4bc0      	ldr	r3, [pc, #768]	; (18564 <vTask_GSM_service+0x34c>)
   18264:	4798      	blx	r3
	
	gsm_init();
   18266:	4bc0      	ldr	r3, [pc, #768]	; (18568 <vTask_GSM_service+0x350>)
   18268:	4798      	blx	r3
	
	initialized = false;
   1826a:	4bc0      	ldr	r3, [pc, #768]	; (1856c <vTask_GSM_service+0x354>)
   1826c:	2200      	movs	r2, #0
   1826e:	701a      	strb	r2, [r3, #0]
	
	
	inCall=false;
   18270:	4bbf      	ldr	r3, [pc, #764]	; (18570 <vTask_GSM_service+0x358>)
   18272:	2200      	movs	r2, #0
   18274:	701a      	strb	r2, [r3, #0]
	simReInit=false;
   18276:	4bbf      	ldr	r3, [pc, #764]	; (18574 <vTask_GSM_service+0x35c>)
   18278:	2200      	movs	r2, #0
   1827a:	701a      	strb	r2, [r3, #0]
	
	isRinging = false;
   1827c:	4bbe      	ldr	r3, [pc, #760]	; (18578 <vTask_GSM_service+0x360>)
   1827e:	2200      	movs	r2, #0
   18280:	701a      	strb	r2, [r3, #0]
	
	boolGsm_config_flag			=false;
   18282:	4bbe      	ldr	r3, [pc, #760]	; (1857c <vTask_GSM_service+0x364>)
   18284:	2200      	movs	r2, #0
   18286:	701a      	strb	r2, [r3, #0]
	boolOne_Time_Msg_Delete_Flag   =false;
   18288:	4bbd      	ldr	r3, [pc, #756]	; (18580 <vTask_GSM_service+0x368>)
   1828a:	2200      	movs	r2, #0
   1828c:	701a      	strb	r2, [r3, #0]
	
	lastRingStateChangeTime=0;
   1828e:	4bbd      	ldr	r3, [pc, #756]	; (18584 <vTask_GSM_service+0x36c>)
   18290:	2200      	movs	r2, #0
   18292:	601a      	str	r2, [r3, #0]
	
	Signal_Strength = 0;
   18294:	4bbc      	ldr	r3, [pc, #752]	; (18588 <vTask_GSM_service+0x370>)
   18296:	2200      	movs	r2, #0
   18298:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
   1829a:	4bbc      	ldr	r3, [pc, #752]	; (1858c <vTask_GSM_service+0x374>)
   1829c:	2205      	movs	r2, #5
   1829e:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
   182a0:	4bbb      	ldr	r3, [pc, #748]	; (18590 <vTask_GSM_service+0x378>)
   182a2:	2200      	movs	r2, #0
   182a4:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
   182a6:	4bbb      	ldr	r3, [pc, #748]	; (18594 <vTask_GSM_service+0x37c>)
   182a8:	2291      	movs	r2, #145	; 0x91
   182aa:	0092      	lsls	r2, r2, #2
   182ac:	801a      	strh	r2, [r3, #0]
	nr = 0;
   182ae:	4bba      	ldr	r3, [pc, #744]	; (18598 <vTask_GSM_service+0x380>)
   182b0:	2200      	movs	r2, #0
   182b2:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   182b4:	4bb9      	ldr	r3, [pc, #740]	; (1859c <vTask_GSM_service+0x384>)
   182b6:	224e      	movs	r2, #78	; 0x4e
   182b8:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   182ba:	4bb9      	ldr	r3, [pc, #740]	; (185a0 <vTask_GSM_service+0x388>)
   182bc:	224e      	movs	r2, #78	; 0x4e
   182be:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
   182c0:	4bb8      	ldr	r3, [pc, #736]	; (185a4 <vTask_GSM_service+0x38c>)
   182c2:	2200      	movs	r2, #0
   182c4:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
   182c6:	4bb8      	ldr	r3, [pc, #736]	; (185a8 <vTask_GSM_service+0x390>)
   182c8:	2200      	movs	r2, #0
   182ca:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
   182cc:	4bb7      	ldr	r3, [pc, #732]	; (185ac <vTask_GSM_service+0x394>)
   182ce:	2201      	movs	r2, #1
   182d0:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
   182d2:	4bb7      	ldr	r3, [pc, #732]	; (185b0 <vTask_GSM_service+0x398>)
   182d4:	2200      	movs	r2, #0
   182d6:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
   182d8:	4bb6      	ldr	r3, [pc, #728]	; (185b4 <vTask_GSM_service+0x39c>)
   182da:	2200      	movs	r2, #0
   182dc:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
   182de:	4bb6      	ldr	r3, [pc, #728]	; (185b8 <vTask_GSM_service+0x3a0>)
   182e0:	224e      	movs	r2, #78	; 0x4e
   182e2:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
   182e4:	4bb5      	ldr	r3, [pc, #724]	; (185bc <vTask_GSM_service+0x3a4>)
   182e6:	2200      	movs	r2, #0
   182e8:	701a      	strb	r2, [r3, #0]
	retries=0;
   182ea:	4bb5      	ldr	r3, [pc, #724]	; (185c0 <vTask_GSM_service+0x3a8>)
   182ec:	2200      	movs	r2, #0
   182ee:	701a      	strb	r2, [r3, #0]
	autoNetworkDetection=false;
   182f0:	4bb4      	ldr	r3, [pc, #720]	; (185c4 <vTask_GSM_service+0x3ac>)
   182f2:	2200      	movs	r2, #0
   182f4:	701a      	strb	r2, [r3, #0]
	mcuWakeUpFromSleep=false;
   182f6:	4bb4      	ldr	r3, [pc, #720]	; (185c8 <vTask_GSM_service+0x3b0>)
   182f8:	2200      	movs	r2, #0
   182fa:	701a      	strb	r2, [r3, #0]
	
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   182fc:	4bb3      	ldr	r3, [pc, #716]	; (185cc <vTask_GSM_service+0x3b4>)
   182fe:	785b      	ldrb	r3, [r3, #1]
   18300:	2b00      	cmp	r3, #0
   18302:	d002      	beq.n	1830a <vTask_GSM_service+0xf2>
	{
		zeroPressed=false;
   18304:	4bb2      	ldr	r3, [pc, #712]	; (185d0 <vTask_GSM_service+0x3b8>)
   18306:	2200      	movs	r2, #0
   18308:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1830a:	4bb0      	ldr	r3, [pc, #704]	; (185cc <vTask_GSM_service+0x3b4>)
   1830c:	78db      	ldrb	r3, [r3, #3]
   1830e:	2b00      	cmp	r3, #0
   18310:	d012      	beq.n	18338 <vTask_GSM_service+0x120>
	{
		m2mAck=false;
   18312:	4bb0      	ldr	r3, [pc, #704]	; (185d4 <vTask_GSM_service+0x3bc>)
   18314:	2200      	movs	r2, #0
   18316:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
   18318:	4baf      	ldr	r3, [pc, #700]	; (185d8 <vTask_GSM_service+0x3c0>)
   1831a:	2200      	movs	r2, #0
   1831c:	701a      	strb	r2, [r3, #0]
   1831e:	4bae      	ldr	r3, [pc, #696]	; (185d8 <vTask_GSM_service+0x3c0>)
   18320:	781a      	ldrb	r2, [r3, #0]
   18322:	4bae      	ldr	r3, [pc, #696]	; (185dc <vTask_GSM_service+0x3c4>)
   18324:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
   18326:	4bae      	ldr	r3, [pc, #696]	; (185e0 <vTask_GSM_service+0x3c8>)
   18328:	2200      	movs	r2, #0
   1832a:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
   1832c:	4bad      	ldr	r3, [pc, #692]	; (185e4 <vTask_GSM_service+0x3cc>)
   1832e:	2200      	movs	r2, #0
   18330:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
   18332:	4bad      	ldr	r3, [pc, #692]	; (185e8 <vTask_GSM_service+0x3d0>)
   18334:	2200      	movs	r2, #0
   18336:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
   18338:	201b      	movs	r0, #27
   1833a:	4bac      	ldr	r3, [pc, #688]	; (185ec <vTask_GSM_service+0x3d4>)
   1833c:	4798      	blx	r3
   1833e:	1e03      	subs	r3, r0, #0
   18340:	d01a      	beq.n	18378 <vTask_GSM_service+0x160>
	{
		boolGsm_config_flag			=false;
   18342:	4b8e      	ldr	r3, [pc, #568]	; (1857c <vTask_GSM_service+0x364>)
   18344:	2200      	movs	r2, #0
   18346:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
   18348:	4b8d      	ldr	r3, [pc, #564]	; (18580 <vTask_GSM_service+0x368>)
   1834a:	2200      	movs	r2, #0
   1834c:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
   1834e:	4ba8      	ldr	r3, [pc, #672]	; (185f0 <vTask_GSM_service+0x3d8>)
   18350:	4aa7      	ldr	r2, [pc, #668]	; (185f0 <vTask_GSM_service+0x3d8>)
   18352:	6812      	ldr	r2, [r2, #0]
   18354:	2180      	movs	r1, #128	; 0x80
   18356:	0249      	lsls	r1, r1, #9
   18358:	430a      	orrs	r2, r1
   1835a:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
   1835c:	4ba5      	ldr	r3, [pc, #660]	; (185f4 <vTask_GSM_service+0x3dc>)
   1835e:	0018      	movs	r0, r3
   18360:	4ba5      	ldr	r3, [pc, #660]	; (185f8 <vTask_GSM_service+0x3e0>)
   18362:	4798      	blx	r3
		GSM_PWR_OFF;
   18364:	4ba2      	ldr	r3, [pc, #648]	; (185f0 <vTask_GSM_service+0x3d8>)
   18366:	4aa2      	ldr	r2, [pc, #648]	; (185f0 <vTask_GSM_service+0x3d8>)
   18368:	6812      	ldr	r2, [r2, #0]
   1836a:	49a4      	ldr	r1, [pc, #656]	; (185fc <vTask_GSM_service+0x3e4>)
   1836c:	400a      	ands	r2, r1
   1836e:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
   18370:	4ba3      	ldr	r3, [pc, #652]	; (18600 <vTask_GSM_service+0x3e8>)
   18372:	0018      	movs	r0, r3
   18374:	4ba0      	ldr	r3, [pc, #640]	; (185f8 <vTask_GSM_service+0x3e0>)
   18376:	4798      	blx	r3
	}
	
	isGSMModuleAwake=false;
   18378:	4ba2      	ldr	r3, [pc, #648]	; (18604 <vTask_GSM_service+0x3ec>)
   1837a:	2200      	movs	r2, #0
   1837c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   1837e:	2101      	movs	r1, #1
   18380:	2014      	movs	r0, #20
   18382:	4ba1      	ldr	r3, [pc, #644]	; (18608 <vTask_GSM_service+0x3f0>)
   18384:	4798      	blx	r3
	lastGSMCommunicationTime=0;
   18386:	4ba1      	ldr	r3, [pc, #644]	; (1860c <vTask_GSM_service+0x3f4>)
   18388:	2200      	movs	r2, #0
   1838a:	601a      	str	r2, [r3, #0]
	lastToLastGSMCommunicationTime=0;
   1838c:	4ba0      	ldr	r3, [pc, #640]	; (18610 <vTask_GSM_service+0x3f8>)
   1838e:	2200      	movs	r2, #0
   18390:	601a      	str	r2, [r3, #0]
	gsm_module_exit_sleep(false);				//to switch DTR pin so that sim remains active
   18392:	2000      	movs	r0, #0
   18394:	4b9f      	ldr	r3, [pc, #636]	; (18614 <vTask_GSM_service+0x3fc>)
   18396:	4798      	blx	r3
	{

		/************************************************************************/
		/*  Check for Call Timer Expire in case GSM Status is not OK            */
		/************************************************************************/
		if (currentStatus == 'I' || currentStatus == 'R')
   18398:	4b80      	ldr	r3, [pc, #512]	; (1859c <vTask_GSM_service+0x384>)
   1839a:	781b      	ldrb	r3, [r3, #0]
   1839c:	b2db      	uxtb	r3, r3
   1839e:	2b49      	cmp	r3, #73	; 0x49
   183a0:	d004      	beq.n	183ac <vTask_GSM_service+0x194>
   183a2:	4b7e      	ldr	r3, [pc, #504]	; (1859c <vTask_GSM_service+0x384>)
   183a4:	781b      	ldrb	r3, [r3, #0]
   183a6:	b2db      	uxtb	r3, r3
   183a8:	2b52      	cmp	r3, #82	; 0x52
   183aa:	d112      	bne.n	183d2 <vTask_GSM_service+0x1ba>
		{
			if (callTimerExpire())
   183ac:	4b9a      	ldr	r3, [pc, #616]	; (18618 <vTask_GSM_service+0x400>)
   183ae:	4798      	blx	r3
   183b0:	1e03      	subs	r3, r0, #0
   183b2:	d00e      	beq.n	183d2 <vTask_GSM_service+0x1ba>
			{
				char t1 = actionType;
   183b4:	2328      	movs	r3, #40	; 0x28
   183b6:	33ff      	adds	r3, #255	; 0xff
   183b8:	18fb      	adds	r3, r7, r3
   183ba:	4a98      	ldr	r2, [pc, #608]	; (1861c <vTask_GSM_service+0x404>)
   183bc:	7812      	ldrb	r2, [r2, #0]
   183be:	701a      	strb	r2, [r3, #0]
				endCall();
   183c0:	4b97      	ldr	r3, [pc, #604]	; (18620 <vTask_GSM_service+0x408>)
   183c2:	4798      	blx	r3
				checkRespSMS(t1);
   183c4:	2328      	movs	r3, #40	; 0x28
   183c6:	33ff      	adds	r3, #255	; 0xff
   183c8:	18fb      	adds	r3, r7, r3
   183ca:	781b      	ldrb	r3, [r3, #0]
   183cc:	0018      	movs	r0, r3
   183ce:	4b95      	ldr	r3, [pc, #596]	; (18624 <vTask_GSM_service+0x40c>)
   183d0:	4798      	blx	r3
			}
		}
		/************************************************************************/
		
		if (GSM_STATUS_OK)
   183d2:	201b      	movs	r0, #27
   183d4:	4b85      	ldr	r3, [pc, #532]	; (185ec <vTask_GSM_service+0x3d4>)
   183d6:	4798      	blx	r3
   183d8:	1e03      	subs	r3, r0, #0
   183da:	d101      	bne.n	183e0 <vTask_GSM_service+0x1c8>
   183dc:	f000 fd12 	bl	18e04 <vTask_GSM_service+0xbec>
		{
			if (boolGsm_config_flag == false)
   183e0:	4b66      	ldr	r3, [pc, #408]	; (1857c <vTask_GSM_service+0x364>)
   183e2:	781b      	ldrb	r3, [r3, #0]
   183e4:	b2db      	uxtb	r3, r3
   183e6:	2201      	movs	r2, #1
   183e8:	4053      	eors	r3, r2
   183ea:	b2db      	uxtb	r3, r3
   183ec:	2b00      	cmp	r3, #0
   183ee:	d02d      	beq.n	1844c <vTask_GSM_service+0x234>
			{
				
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
   183f0:	4b8d      	ldr	r3, [pc, #564]	; (18628 <vTask_GSM_service+0x410>)
   183f2:	4798      	blx	r3
   183f4:	0003      	movs	r3, r0
   183f6:	2b09      	cmp	r3, #9
   183f8:	d122      	bne.n	18440 <vTask_GSM_service+0x228>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
   183fa:	4b8c      	ldr	r3, [pc, #560]	; (1862c <vTask_GSM_service+0x414>)
   183fc:	4798      	blx	r3
   183fe:	1e03      	subs	r3, r0, #0
   18400:	d11a      	bne.n	18438 <vTask_GSM_service+0x220>
					{
						if(gsm_enable_csqn_urc()==GSM_ERROR_NONE)
   18402:	4b8b      	ldr	r3, [pc, #556]	; (18630 <vTask_GSM_service+0x418>)
   18404:	4798      	blx	r3
   18406:	1e03      	subs	r3, r0, #0
   18408:	d102      	bne.n	18410 <vTask_GSM_service+0x1f8>
						{
							autoNetworkDetection = true;
   1840a:	4b6e      	ldr	r3, [pc, #440]	; (185c4 <vTask_GSM_service+0x3ac>)
   1840c:	2201      	movs	r2, #1
   1840e:	701a      	strb	r2, [r3, #0]
						}
						
						Signal_Strength = gsm_getsignalstrength();
   18410:	4b88      	ldr	r3, [pc, #544]	; (18634 <vTask_GSM_service+0x41c>)
   18412:	4798      	blx	r3
   18414:	0003      	movs	r3, r0
   18416:	001a      	movs	r2, r3
   18418:	4b5b      	ldr	r3, [pc, #364]	; (18588 <vTask_GSM_service+0x370>)
   1841a:	701a      	strb	r2, [r3, #0]
						network_update_time = xTaskGetTickCount();
   1841c:	4b86      	ldr	r3, [pc, #536]	; (18638 <vTask_GSM_service+0x420>)
   1841e:	4798      	blx	r3
   18420:	0003      	movs	r3, r0
   18422:	2296      	movs	r2, #150	; 0x96
   18424:	0052      	lsls	r2, r2, #1
   18426:	18ba      	adds	r2, r7, r2
   18428:	6013      	str	r3, [r2, #0]
							
						boolGsm_config_flag = true;
   1842a:	4b54      	ldr	r3, [pc, #336]	; (1857c <vTask_GSM_service+0x364>)
   1842c:	2201      	movs	r2, #1
   1842e:	701a      	strb	r2, [r3, #0]
						gsmStatusChange=true;
   18430:	4b82      	ldr	r3, [pc, #520]	; (1863c <vTask_GSM_service+0x424>)
   18432:	2201      	movs	r2, #1
   18434:	701a      	strb	r2, [r3, #0]
   18436:	e7af      	b.n	18398 <vTask_GSM_service+0x180>
					}
					else
					{
						boolGsm_config_flag = false;
   18438:	4b50      	ldr	r3, [pc, #320]	; (1857c <vTask_GSM_service+0x364>)
   1843a:	2200      	movs	r2, #0
   1843c:	701a      	strb	r2, [r3, #0]
   1843e:	e7ab      	b.n	18398 <vTask_GSM_service+0x180>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
   18440:	23fa      	movs	r3, #250	; 0xfa
   18442:	00db      	lsls	r3, r3, #3
   18444:	0018      	movs	r0, r3
   18446:	4b6c      	ldr	r3, [pc, #432]	; (185f8 <vTask_GSM_service+0x3e0>)
   18448:	4798      	blx	r3
   1844a:	e7a5      	b.n	18398 <vTask_GSM_service+0x180>
				}
			}
			else
			{
				if(mcuWakeUpFromSleep)
   1844c:	4b5e      	ldr	r3, [pc, #376]	; (185c8 <vTask_GSM_service+0x3b0>)
   1844e:	781b      	ldrb	r3, [r3, #0]
   18450:	b2db      	uxtb	r3, r3
   18452:	2b00      	cmp	r3, #0
   18454:	d00c      	beq.n	18470 <vTask_GSM_service+0x258>
				{
					mcuWakeUpFromSleep=false;
   18456:	4b5c      	ldr	r3, [pc, #368]	; (185c8 <vTask_GSM_service+0x3b0>)
   18458:	2200      	movs	r2, #0
   1845a:	701a      	strb	r2, [r3, #0]
					gsm_module_exit_sleep(false);
   1845c:	2000      	movs	r0, #0
   1845e:	4b6d      	ldr	r3, [pc, #436]	; (18614 <vTask_GSM_service+0x3fc>)
   18460:	4798      	blx	r3
					if(gsm_enable_csqn_urc()==GSM_ERROR_NONE)
   18462:	4b73      	ldr	r3, [pc, #460]	; (18630 <vTask_GSM_service+0x418>)
   18464:	4798      	blx	r3
   18466:	1e03      	subs	r3, r0, #0
   18468:	d102      	bne.n	18470 <vTask_GSM_service+0x258>
					{
						autoNetworkDetection = true;
   1846a:	4b56      	ldr	r3, [pc, #344]	; (185c4 <vTask_GSM_service+0x3ac>)
   1846c:	2201      	movs	r2, #1
   1846e:	701a      	strb	r2, [r3, #0]
				
				
				/************************************************************************/
				/* Firmware Update Status SMS                                           */
				/************************************************************************/
				if(bootloader_parameter.firmware_update_process_completed)
   18470:	4b73      	ldr	r3, [pc, #460]	; (18640 <vTask_GSM_service+0x428>)
   18472:	799b      	ldrb	r3, [r3, #6]
   18474:	2b00      	cmp	r3, #0
   18476:	d001      	beq.n	1847c <vTask_GSM_service+0x264>
				{
					sendFWUpdateSMS();
   18478:	4b72      	ldr	r3, [pc, #456]	; (18644 <vTask_GSM_service+0x42c>)
   1847a:	4798      	blx	r3
				}
				
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
   1847c:	4b40      	ldr	r3, [pc, #256]	; (18580 <vTask_GSM_service+0x368>)
   1847e:	781b      	ldrb	r3, [r3, #0]
   18480:	b2db      	uxtb	r3, r3
   18482:	2201      	movs	r2, #1
   18484:	4053      	eors	r3, r2
   18486:	b2db      	uxtb	r3, r3
   18488:	2b00      	cmp	r3, #0
   1848a:	d015      	beq.n	184b8 <vTask_GSM_service+0x2a0>
   1848c:	4b3b      	ldr	r3, [pc, #236]	; (1857c <vTask_GSM_service+0x364>)
   1848e:	781b      	ldrb	r3, [r3, #0]
   18490:	b2db      	uxtb	r3, r3
   18492:	2b00      	cmp	r3, #0
   18494:	d010      	beq.n	184b8 <vTask_GSM_service+0x2a0>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   18496:	4b6c      	ldr	r3, [pc, #432]	; (18648 <vTask_GSM_service+0x430>)
   18498:	4798      	blx	r3
   1849a:	1e03      	subs	r3, r0, #0
   1849c:	d107      	bne.n	184ae <vTask_GSM_service+0x296>
					{
						boolOne_Time_Msg_Delete_Flag = true;
   1849e:	4b38      	ldr	r3, [pc, #224]	; (18580 <vTask_GSM_service+0x368>)
   184a0:	2201      	movs	r2, #1
   184a2:	701a      	strb	r2, [r3, #0]
						initialized = true;
   184a4:	4b31      	ldr	r3, [pc, #196]	; (1856c <vTask_GSM_service+0x354>)
   184a6:	2201      	movs	r2, #1
   184a8:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   184aa:	f000 fccc 	bl	18e46 <vTask_GSM_service+0xc2e>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
   184ae:	4b34      	ldr	r3, [pc, #208]	; (18580 <vTask_GSM_service+0x368>)
   184b0:	2200      	movs	r2, #0
   184b2:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   184b4:	f000 fcc7 	bl	18e46 <vTask_GSM_service+0xc2e>
					}
				}
				else
				{
					
					if (currentStatus == 'N' && currentCallStatus == 'N')
   184b8:	4b38      	ldr	r3, [pc, #224]	; (1859c <vTask_GSM_service+0x384>)
   184ba:	781b      	ldrb	r3, [r3, #0]
   184bc:	b2db      	uxtb	r3, r3
   184be:	2b4e      	cmp	r3, #78	; 0x4e
   184c0:	d000      	beq.n	184c4 <vTask_GSM_service+0x2ac>
   184c2:	e0d3      	b.n	1866c <vTask_GSM_service+0x454>
   184c4:	4b36      	ldr	r3, [pc, #216]	; (185a0 <vTask_GSM_service+0x388>)
   184c6:	781b      	ldrb	r3, [r3, #0]
   184c8:	b2db      	uxtb	r3, r3
   184ca:	2b4e      	cmp	r3, #78	; 0x4e
   184cc:	d000      	beq.n	184d0 <vTask_GSM_service+0x2b8>
   184ce:	e0cd      	b.n	1866c <vTask_GSM_service+0x454>
					{
						if(getAllPhaseState()==AC_OFF &&  isGSMModuleAwake && gsm_module_sleep_elligible())
   184d0:	4b5e      	ldr	r3, [pc, #376]	; (1864c <vTask_GSM_service+0x434>)
   184d2:	4798      	blx	r3
   184d4:	1e03      	subs	r3, r0, #0
   184d6:	d115      	bne.n	18504 <vTask_GSM_service+0x2ec>
   184d8:	4b4a      	ldr	r3, [pc, #296]	; (18604 <vTask_GSM_service+0x3ec>)
   184da:	781b      	ldrb	r3, [r3, #0]
   184dc:	b2db      	uxtb	r3, r3
   184de:	2b00      	cmp	r3, #0
   184e0:	d010      	beq.n	18504 <vTask_GSM_service+0x2ec>
   184e2:	4b5b      	ldr	r3, [pc, #364]	; (18650 <vTask_GSM_service+0x438>)
   184e4:	4798      	blx	r3
   184e6:	1e03      	subs	r3, r0, #0
   184e8:	d00c      	beq.n	18504 <vTask_GSM_service+0x2ec>
						{
							if(motor_checkSleepElligible())
   184ea:	4b5a      	ldr	r3, [pc, #360]	; (18654 <vTask_GSM_service+0x43c>)
   184ec:	4798      	blx	r3
   184ee:	1e03      	subs	r3, r0, #0
   184f0:	d008      	beq.n	18504 <vTask_GSM_service+0x2ec>
							{
								if(gsm_disable_csqn_urc()==GSM_ERROR_NONE)
   184f2:	4b59      	ldr	r3, [pc, #356]	; (18658 <vTask_GSM_service+0x440>)
   184f4:	4798      	blx	r3
   184f6:	1e03      	subs	r3, r0, #0
   184f8:	d102      	bne.n	18500 <vTask_GSM_service+0x2e8>
								{
									autoNetworkDetection=false;
   184fa:	4b32      	ldr	r3, [pc, #200]	; (185c4 <vTask_GSM_service+0x3ac>)
   184fc:	2200      	movs	r2, #0
   184fe:	701a      	strb	r2, [r3, #0]
								}
								gsm_module_enter_sleep();				//this statement goes after sending AT command, to ignore the wakeup of the module done by sending AT Command.
   18500:	4b56      	ldr	r3, [pc, #344]	; (1865c <vTask_GSM_service+0x444>)
   18502:	4798      	blx	r3
							}
						}

						if(isGSMModuleAwake)
   18504:	4b3f      	ldr	r3, [pc, #252]	; (18604 <vTask_GSM_service+0x3ec>)
   18506:	781b      	ldrb	r3, [r3, #0]
   18508:	b2db      	uxtb	r3, r3
   1850a:	2b00      	cmp	r3, #0
   1850c:	d017      	beq.n	1853e <vTask_GSM_service+0x326>
						{
							////Update network
							if (((xTaskGetTickCount() - network_update_time)>= (1*60*1000)))
   1850e:	4b4a      	ldr	r3, [pc, #296]	; (18638 <vTask_GSM_service+0x420>)
   18510:	4798      	blx	r3
   18512:	0002      	movs	r2, r0
   18514:	2396      	movs	r3, #150	; 0x96
   18516:	005b      	lsls	r3, r3, #1
   18518:	18fb      	adds	r3, r7, r3
   1851a:	681b      	ldr	r3, [r3, #0]
   1851c:	1ad3      	subs	r3, r2, r3
   1851e:	4a50      	ldr	r2, [pc, #320]	; (18660 <vTask_GSM_service+0x448>)
   18520:	4293      	cmp	r3, r2
   18522:	d90c      	bls.n	1853e <vTask_GSM_service+0x326>
							{
								network_update_time = xTaskGetTickCount();
   18524:	4b44      	ldr	r3, [pc, #272]	; (18638 <vTask_GSM_service+0x420>)
   18526:	4798      	blx	r3
   18528:	0003      	movs	r3, r0
   1852a:	2296      	movs	r2, #150	; 0x96
   1852c:	0052      	lsls	r2, r2, #1
   1852e:	18ba      	adds	r2, r7, r2
   18530:	6013      	str	r3, [r2, #0]
								Signal_Strength = gsm_getsignalstrength();
   18532:	4b40      	ldr	r3, [pc, #256]	; (18634 <vTask_GSM_service+0x41c>)
   18534:	4798      	blx	r3
   18536:	0003      	movs	r3, r0
   18538:	001a      	movs	r2, r3
   1853a:	4b13      	ldr	r3, [pc, #76]	; (18588 <vTask_GSM_service+0x370>)
   1853c:	701a      	strb	r2, [r3, #0]
							}
						}
						
						setObtainEvent();
   1853e:	4b49      	ldr	r3, [pc, #292]	; (18664 <vTask_GSM_service+0x44c>)
   18540:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   18542:	4b1c      	ldr	r3, [pc, #112]	; (185b4 <vTask_GSM_service+0x39c>)
   18544:	781b      	ldrb	r3, [r3, #0]
   18546:	2b00      	cmp	r3, #0
   18548:	d104      	bne.n	18554 <vTask_GSM_service+0x33c>
   1854a:	4b25      	ldr	r3, [pc, #148]	; (185e0 <vTask_GSM_service+0x3c8>)
   1854c:	781b      	ldrb	r3, [r3, #0]
   1854e:	2b00      	cmp	r3, #0
   18550:	d100      	bne.n	18554 <vTask_GSM_service+0x33c>
   18552:	e0d4      	b.n	186fe <vTask_GSM_service+0x4e6>
						{
							operateOnStagedEvent();
   18554:	4b44      	ldr	r3, [pc, #272]	; (18668 <vTask_GSM_service+0x450>)
   18556:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   18558:	e0d1      	b.n	186fe <vTask_GSM_service+0x4e6>
   1855a:	46c0      	nop			; (mov r8, r8)
   1855c:	41004480 	.word	0x41004480
   18560:	00014319 	.word	0x00014319
   18564:	000238b1 	.word	0x000238b1
   18568:	00012165 	.word	0x00012165
   1856c:	2000099d 	.word	0x2000099d
   18570:	2000099c 	.word	0x2000099c
   18574:	2000097f 	.word	0x2000097f
   18578:	2000088e 	.word	0x2000088e
   1857c:	200009c8 	.word	0x200009c8
   18580:	200009d5 	.word	0x200009d5
   18584:	200008cc 	.word	0x200008cc
   18588:	20000989 	.word	0x20000989
   1858c:	200009da 	.word	0x200009da
   18590:	20000a66 	.word	0x20000a66
   18594:	20000964 	.word	0x20000964
   18598:	200008e4 	.word	0x200008e4
   1859c:	200009e0 	.word	0x200009e0
   185a0:	2000098f 	.word	0x2000098f
   185a4:	2000099e 	.word	0x2000099e
   185a8:	20000944 	.word	0x20000944
   185ac:	20000972 	.word	0x20000972
   185b0:	20000977 	.word	0x20000977
   185b4:	200009d7 	.word	0x200009d7
   185b8:	20000975 	.word	0x20000975
   185bc:	20000998 	.word	0x20000998
   185c0:	200008e5 	.word	0x200008e5
   185c4:	20000a65 	.word	0x20000a65
   185c8:	20000a44 	.word	0x20000a44
   185cc:	2000082c 	.word	0x2000082c
   185d0:	20000a0f 	.word	0x20000a0f
   185d4:	2000092c 	.word	0x2000092c
   185d8:	2000092d 	.word	0x2000092d
   185dc:	200009d8 	.word	0x200009d8
   185e0:	2000098e 	.word	0x2000098e
   185e4:	20000943 	.word	0x20000943
   185e8:	200009d4 	.word	0x200009d4
   185ec:	0001433d 	.word	0x0001433d
   185f0:	41004490 	.word	0x41004490
   185f4:	00000bb8 	.word	0x00000bb8
   185f8:	00020a49 	.word	0x00020a49
   185fc:	fffeffff 	.word	0xfffeffff
   18600:	00001388 	.word	0x00001388
   18604:	20000884 	.word	0x20000884
   18608:	00014381 	.word	0x00014381
   1860c:	20000894 	.word	0x20000894
   18610:	20000890 	.word	0x20000890
   18614:	00012319 	.word	0x00012319
   18618:	00014a85 	.word	0x00014a85
   1861c:	20000963 	.word	0x20000963
   18620:	00014521 	.word	0x00014521
   18624:	00014e61 	.word	0x00014e61
   18628:	00012621 	.word	0x00012621
   1862c:	000133a5 	.word	0x000133a5
   18630:	00012b3d 	.word	0x00012b3d
   18634:	000128ed 	.word	0x000128ed
   18638:	00020dad 	.word	0x00020dad
   1863c:	200008de 	.word	0x200008de
   18640:	200007f8 	.word	0x200007f8
   18644:	000180f1 	.word	0x000180f1
   18648:	0001270d 	.word	0x0001270d
   1864c:	0001bb89 	.word	0x0001bb89
   18650:	0001239d 	.word	0x0001239d
   18654:	0001d63d 	.word	0x0001d63d
   18658:	00012b6d 	.word	0x00012b6d
   1865c:	00012389 	.word	0x00012389
   18660:	0000ea5f 	.word	0x0000ea5f
   18664:	000143d5 	.word	0x000143d5
   18668:	00014415 	.word	0x00014415
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
   1866c:	4bbf      	ldr	r3, [pc, #764]	; (1896c <vTask_GSM_service+0x754>)
   1866e:	781b      	ldrb	r3, [r3, #0]
   18670:	b2db      	uxtb	r3, r3
   18672:	2b49      	cmp	r3, #73	; 0x49
   18674:	d004      	beq.n	18680 <vTask_GSM_service+0x468>
   18676:	4bbd      	ldr	r3, [pc, #756]	; (1896c <vTask_GSM_service+0x754>)
   18678:	781b      	ldrb	r3, [r3, #0]
   1867a:	b2db      	uxtb	r3, r3
   1867c:	2b52      	cmp	r3, #82	; 0x52
   1867e:	d13f      	bne.n	18700 <vTask_GSM_service+0x4e8>
					{
						if (callTimerExpire())
   18680:	4bbb      	ldr	r3, [pc, #748]	; (18970 <vTask_GSM_service+0x758>)
   18682:	4798      	blx	r3
   18684:	1e03      	subs	r3, r0, #0
   18686:	d00e      	beq.n	186a6 <vTask_GSM_service+0x48e>
						{
							char t1 = actionType;
   18688:	2393      	movs	r3, #147	; 0x93
   1868a:	005b      	lsls	r3, r3, #1
   1868c:	18fb      	adds	r3, r7, r3
   1868e:	4ab9      	ldr	r2, [pc, #740]	; (18974 <vTask_GSM_service+0x75c>)
   18690:	7812      	ldrb	r2, [r2, #0]
   18692:	701a      	strb	r2, [r3, #0]
							endCall();
   18694:	4bb8      	ldr	r3, [pc, #736]	; (18978 <vTask_GSM_service+0x760>)
   18696:	4798      	blx	r3
							checkRespSMS(t1);
   18698:	2393      	movs	r3, #147	; 0x93
   1869a:	005b      	lsls	r3, r3, #1
   1869c:	18fb      	adds	r3, r7, r3
   1869e:	781b      	ldrb	r3, [r3, #0]
   186a0:	0018      	movs	r0, r3
   186a2:	4bb6      	ldr	r3, [pc, #728]	; (1897c <vTask_GSM_service+0x764>)
   186a4:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
   186a6:	4bb6      	ldr	r3, [pc, #728]	; (18980 <vTask_GSM_service+0x768>)
   186a8:	78db      	ldrb	r3, [r3, #3]
   186aa:	2b00      	cmp	r3, #0
   186ac:	d020      	beq.n	186f0 <vTask_GSM_service+0x4d8>
						{
							if(m2mEvent && callAccepted)
   186ae:	4bb5      	ldr	r3, [pc, #724]	; (18984 <vTask_GSM_service+0x76c>)
   186b0:	781b      	ldrb	r3, [r3, #0]
   186b2:	2b00      	cmp	r3, #0
   186b4:	d01c      	beq.n	186f0 <vTask_GSM_service+0x4d8>
   186b6:	4bb4      	ldr	r3, [pc, #720]	; (18988 <vTask_GSM_service+0x770>)
   186b8:	781b      	ldrb	r3, [r3, #0]
   186ba:	2b00      	cmp	r3, #0
   186bc:	d018      	beq.n	186f0 <vTask_GSM_service+0x4d8>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
   186be:	4bb3      	ldr	r3, [pc, #716]	; (1898c <vTask_GSM_service+0x774>)
   186c0:	781b      	ldrb	r3, [r3, #0]
   186c2:	2201      	movs	r2, #1
   186c4:	4053      	eors	r3, r2
   186c6:	b2db      	uxtb	r3, r3
   186c8:	2b00      	cmp	r3, #0
   186ca:	d011      	beq.n	186f0 <vTask_GSM_service+0x4d8>
   186cc:	4bb0      	ldr	r3, [pc, #704]	; (18990 <vTask_GSM_service+0x778>)
   186ce:	4798      	blx	r3
   186d0:	0002      	movs	r2, r0
   186d2:	4bb0      	ldr	r3, [pc, #704]	; (18994 <vTask_GSM_service+0x77c>)
   186d4:	681b      	ldr	r3, [r3, #0]
   186d6:	1ad2      	subs	r2, r2, r3
   186d8:	23fa      	movs	r3, #250	; 0xfa
   186da:	00db      	lsls	r3, r3, #3
   186dc:	429a      	cmp	r2, r3
   186de:	d907      	bls.n	186f0 <vTask_GSM_service+0x4d8>
								{
									keyPressed=true;
   186e0:	4baa      	ldr	r3, [pc, #680]	; (1898c <vTask_GSM_service+0x774>)
   186e2:	2201      	movs	r2, #1
   186e4:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
   186e6:	4bac      	ldr	r3, [pc, #688]	; (18998 <vTask_GSM_service+0x780>)
   186e8:	781b      	ldrb	r3, [r3, #0]
   186ea:	0018      	movs	r0, r3
   186ec:	4bab      	ldr	r3, [pc, #684]	; (1899c <vTask_GSM_service+0x784>)
   186ee:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
   186f0:	4bab      	ldr	r3, [pc, #684]	; (189a0 <vTask_GSM_service+0x788>)
   186f2:	4798      	blx	r3
   186f4:	1e03      	subs	r3, r0, #0
   186f6:	d003      	beq.n	18700 <vTask_GSM_service+0x4e8>
						{
							triggerPlaySound();
   186f8:	4baa      	ldr	r3, [pc, #680]	; (189a4 <vTask_GSM_service+0x78c>)
   186fa:	4798      	blx	r3
   186fc:	e000      	b.n	18700 <vTask_GSM_service+0x4e8>
						if (eventStaged || m2mEventStaged)
   186fe:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
   18700:	4ba9      	ldr	r3, [pc, #676]	; (189a8 <vTask_GSM_service+0x790>)
   18702:	2298      	movs	r2, #152	; 0x98
   18704:	0052      	lsls	r2, r2, #1
   18706:	4694      	mov	ip, r2
   18708:	44bc      	add	ip, r7
   1870a:	4463      	add	r3, ip
   1870c:	0018      	movs	r0, r3
   1870e:	2340      	movs	r3, #64	; 0x40
   18710:	001a      	movs	r2, r3
   18712:	2100      	movs	r1, #0
   18714:	4ba5      	ldr	r3, [pc, #660]	; (189ac <vTask_GSM_service+0x794>)
   18716:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
   18718:	230c      	movs	r3, #12
   1871a:	18fb      	adds	r3, r7, r3
   1871c:	2140      	movs	r1, #64	; 0x40
   1871e:	0018      	movs	r0, r3
   18720:	4ba3      	ldr	r3, [pc, #652]	; (189b0 <vTask_GSM_service+0x798>)
   18722:	4798      	blx	r3
   18724:	1e03      	subs	r3, r0, #0
   18726:	d100      	bne.n	1872a <vTask_GSM_service+0x512>
   18728:	e636      	b.n	18398 <vTask_GSM_service+0x180>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
   1872a:	2326      	movs	r3, #38	; 0x26
   1872c:	33ff      	adds	r3, #255	; 0xff
   1872e:	18fc      	adds	r4, r7, r3
   18730:	230c      	movs	r3, #12
   18732:	18fb      	adds	r3, r7, r3
   18734:	0018      	movs	r0, r3
   18736:	4b9f      	ldr	r3, [pc, #636]	; (189b4 <vTask_GSM_service+0x79c>)
   18738:	4798      	blx	r3
   1873a:	0003      	movs	r3, r0
   1873c:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
   1873e:	2326      	movs	r3, #38	; 0x26
   18740:	33ff      	adds	r3, #255	; 0xff
   18742:	18fb      	adds	r3, r7, r3
   18744:	781b      	ldrb	r3, [r3, #0]
   18746:	2b00      	cmp	r3, #0
   18748:	d100      	bne.n	1874c <vTask_GSM_service+0x534>
   1874a:	e0f6      	b.n	1893a <vTask_GSM_service+0x722>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
   1874c:	234c      	movs	r3, #76	; 0x4c
   1874e:	18fa      	adds	r2, r7, r3
   18750:	1c79      	adds	r1, r7, #1
   18752:	31ff      	adds	r1, #255	; 0xff
   18754:	2326      	movs	r3, #38	; 0x26
   18756:	33ff      	adds	r3, #255	; 0xff
   18758:	18fb      	adds	r3, r7, r3
   1875a:	7818      	ldrb	r0, [r3, #0]
   1875c:	23a0      	movs	r3, #160	; 0xa0
   1875e:	9300      	str	r3, [sp, #0]
   18760:	0013      	movs	r3, r2
   18762:	220f      	movs	r2, #15
   18764:	4c94      	ldr	r4, [pc, #592]	; (189b8 <vTask_GSM_service+0x7a0>)
   18766:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
   18768:	232c      	movs	r3, #44	; 0x2c
   1876a:	33ff      	adds	r3, #255	; 0xff
   1876c:	18fc      	adds	r4, r7, r3
   1876e:	1c7b      	adds	r3, r7, #1
   18770:	33ff      	adds	r3, #255	; 0xff
   18772:	0018      	movs	r0, r3
   18774:	4b91      	ldr	r3, [pc, #580]	; (189bc <vTask_GSM_service+0x7a4>)
   18776:	4798      	blx	r3
   18778:	0003      	movs	r3, r0
   1877a:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
   1877c:	2392      	movs	r3, #146	; 0x92
   1877e:	005b      	lsls	r3, r3, #1
   18780:	18fc      	adds	r4, r7, r3
   18782:	1c7b      	adds	r3, r7, #1
   18784:	33ff      	adds	r3, #255	; 0xff
   18786:	0018      	movs	r0, r3
   18788:	4b8d      	ldr	r3, [pc, #564]	; (189c0 <vTask_GSM_service+0x7a8>)
   1878a:	4798      	blx	r3
   1878c:	0003      	movs	r3, r0
   1878e:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
   18790:	2324      	movs	r3, #36	; 0x24
   18792:	33ff      	adds	r3, #255	; 0xff
   18794:	18fc      	adds	r4, r7, r3
   18796:	1c7b      	adds	r3, r7, #1
   18798:	33ff      	adds	r3, #255	; 0xff
   1879a:	0018      	movs	r0, r3
   1879c:	4b89      	ldr	r3, [pc, #548]	; (189c4 <vTask_GSM_service+0x7ac>)
   1879e:	4798      	blx	r3
   187a0:	0003      	movs	r3, r0
   187a2:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
   187a4:	2395      	movs	r3, #149	; 0x95
   187a6:	005b      	lsls	r3, r3, #1
   187a8:	18fb      	adds	r3, r7, r3
   187aa:	2201      	movs	r2, #1
   187ac:	701a      	strb	r2, [r3, #0]
							
							if(admin)
   187ae:	232c      	movs	r3, #44	; 0x2c
   187b0:	33ff      	adds	r3, #255	; 0xff
   187b2:	18fb      	adds	r3, r7, r3
   187b4:	781b      	ldrb	r3, [r3, #0]
   187b6:	2b00      	cmp	r3, #0
   187b8:	d006      	beq.n	187c8 <vTask_GSM_service+0x5b0>
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
   187ba:	4b83      	ldr	r3, [pc, #524]	; (189c8 <vTask_GSM_service+0x7b0>)
   187bc:	2200      	movs	r2, #0
   187be:	0019      	movs	r1, r3
   187c0:	2004      	movs	r0, #4
   187c2:	4b82      	ldr	r3, [pc, #520]	; (189cc <vTask_GSM_service+0x7b4>)
   187c4:	4798      	blx	r3
   187c6:	e006      	b.n	187d6 <vTask_GSM_service+0x5be>
							}
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
   187c8:	1c7b      	adds	r3, r7, #1
   187ca:	33ff      	adds	r3, #255	; 0xff
   187cc:	2200      	movs	r2, #0
   187ce:	0019      	movs	r1, r3
   187d0:	2004      	movs	r0, #4
   187d2:	4b7e      	ldr	r3, [pc, #504]	; (189cc <vTask_GSM_service+0x7b4>)
   187d4:	4798      	blx	r3
							}
							
							StringtoUpperCase(Received_SMS);
   187d6:	234c      	movs	r3, #76	; 0x4c
   187d8:	18fb      	adds	r3, r7, r3
   187da:	0018      	movs	r0, r3
   187dc:	4b7c      	ldr	r3, [pc, #496]	; (189d0 <vTask_GSM_service+0x7b8>)
   187de:	4798      	blx	r3
							
							if(!admin)
   187e0:	232c      	movs	r3, #44	; 0x2c
   187e2:	33ff      	adds	r3, #255	; 0xff
   187e4:	18fb      	adds	r3, r7, r3
   187e6:	781b      	ldrb	r3, [r3, #0]
   187e8:	2201      	movs	r2, #1
   187ea:	4053      	eors	r3, r2
   187ec:	b2db      	uxtb	r3, r3
   187ee:	2b00      	cmp	r3, #0
   187f0:	d009      	beq.n	18806 <vTask_GSM_service+0x5ee>
							{
								admin = checkSMSForPassCode(Received_SMS);
   187f2:	232c      	movs	r3, #44	; 0x2c
   187f4:	33ff      	adds	r3, #255	; 0xff
   187f6:	18fc      	adds	r4, r7, r3
   187f8:	234c      	movs	r3, #76	; 0x4c
   187fa:	18fb      	adds	r3, r7, r3
   187fc:	0018      	movs	r0, r3
   187fe:	4b75      	ldr	r3, [pc, #468]	; (189d4 <vTask_GSM_service+0x7bc>)
   18800:	4798      	blx	r3
   18802:	0003      	movs	r3, r0
   18804:	7023      	strb	r3, [r4, #0]
							}

							
							if (admin || primaryUser || alterUsr)
   18806:	232c      	movs	r3, #44	; 0x2c
   18808:	33ff      	adds	r3, #255	; 0xff
   1880a:	18fb      	adds	r3, r7, r3
   1880c:	781b      	ldrb	r3, [r3, #0]
   1880e:	2b00      	cmp	r3, #0
   18810:	d10b      	bne.n	1882a <vTask_GSM_service+0x612>
   18812:	2392      	movs	r3, #146	; 0x92
   18814:	005b      	lsls	r3, r3, #1
   18816:	18fb      	adds	r3, r7, r3
   18818:	781b      	ldrb	r3, [r3, #0]
   1881a:	2b00      	cmp	r3, #0
   1881c:	d105      	bne.n	1882a <vTask_GSM_service+0x612>
   1881e:	2324      	movs	r3, #36	; 0x24
   18820:	33ff      	adds	r3, #255	; 0xff
   18822:	18fb      	adds	r3, r7, r3
   18824:	781b      	ldrb	r3, [r3, #0]
   18826:	2b00      	cmp	r3, #0
   18828:	d031      	beq.n	1888e <vTask_GSM_service+0x676>
							{
								if(StringstartsWith(Received_SMS,"#"))
   1882a:	4a6b      	ldr	r2, [pc, #428]	; (189d8 <vTask_GSM_service+0x7c0>)
   1882c:	234c      	movs	r3, #76	; 0x4c
   1882e:	18fb      	adds	r3, r7, r3
   18830:	0011      	movs	r1, r2
   18832:	0018      	movs	r0, r3
   18834:	4b69      	ldr	r3, [pc, #420]	; (189dc <vTask_GSM_service+0x7c4>)
   18836:	4798      	blx	r3
   18838:	1e03      	subs	r3, r0, #0
   1883a:	d013      	beq.n	18864 <vTask_GSM_service+0x64c>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
   1883c:	234c      	movs	r3, #76	; 0x4c
   1883e:	18fc      	adds	r4, r7, r3
   18840:	3401      	adds	r4, #1
   18842:	234c      	movs	r3, #76	; 0x4c
   18844:	18fb      	adds	r3, r7, r3
   18846:	0018      	movs	r0, r3
   18848:	4b65      	ldr	r3, [pc, #404]	; (189e0 <vTask_GSM_service+0x7c8>)
   1884a:	4798      	blx	r3
   1884c:	0002      	movs	r2, r0
   1884e:	234c      	movs	r3, #76	; 0x4c
   18850:	18fb      	adds	r3, r7, r3
   18852:	0021      	movs	r1, r4
   18854:	0018      	movs	r0, r3
   18856:	4b63      	ldr	r3, [pc, #396]	; (189e4 <vTask_GSM_service+0x7cc>)
   18858:	4798      	blx	r3
									response_sms_processed_cmd=false;
   1885a:	2395      	movs	r3, #149	; 0x95
   1885c:	005b      	lsls	r3, r3, #1
   1885e:	18fb      	adds	r3, r7, r3
   18860:	2200      	movs	r2, #0
   18862:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
   18864:	2324      	movs	r3, #36	; 0x24
   18866:	33ff      	adds	r3, #255	; 0xff
   18868:	18fb      	adds	r3, r7, r3
   1886a:	781c      	ldrb	r4, [r3, #0]
   1886c:	2395      	movs	r3, #149	; 0x95
   1886e:	005b      	lsls	r3, r3, #1
   18870:	18fb      	adds	r3, r7, r3
   18872:	781a      	ldrb	r2, [r3, #0]
   18874:	232c      	movs	r3, #44	; 0x2c
   18876:	33ff      	adds	r3, #255	; 0xff
   18878:	18fb      	adds	r3, r7, r3
   1887a:	7819      	ldrb	r1, [r3, #0]
   1887c:	234c      	movs	r3, #76	; 0x4c
   1887e:	18f8      	adds	r0, r7, r3
   18880:	1c7b      	adds	r3, r7, #1
   18882:	33ff      	adds	r3, #255	; 0xff
   18884:	9300      	str	r3, [sp, #0]
   18886:	0023      	movs	r3, r4
   18888:	4c57      	ldr	r4, [pc, #348]	; (189e8 <vTask_GSM_service+0x7d0>)
   1888a:	47a0      	blx	r4
   1888c:	e053      	b.n	18936 <vTask_GSM_service+0x71e>
							}
							else if(isM2MNumber(phone_number))
   1888e:	1c7b      	adds	r3, r7, #1
   18890:	33ff      	adds	r3, #255	; 0xff
   18892:	0018      	movs	r0, r3
   18894:	4b55      	ldr	r3, [pc, #340]	; (189ec <vTask_GSM_service+0x7d4>)
   18896:	4798      	blx	r3
   18898:	1e03      	subs	r3, r0, #0
   1889a:	d01f      	beq.n	188dc <vTask_GSM_service+0x6c4>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
   1889c:	4a54      	ldr	r2, [pc, #336]	; (189f0 <vTask_GSM_service+0x7d8>)
   1889e:	234c      	movs	r3, #76	; 0x4c
   188a0:	18fb      	adds	r3, r7, r3
   188a2:	0011      	movs	r1, r2
   188a4:	0018      	movs	r0, r3
   188a6:	4b4d      	ldr	r3, [pc, #308]	; (189dc <vTask_GSM_service+0x7c4>)
   188a8:	4798      	blx	r3
   188aa:	1e03      	subs	r3, r0, #0
   188ac:	d043      	beq.n	18936 <vTask_GSM_service+0x71e>
								{
									setM2MVerify(true);
   188ae:	2001      	movs	r0, #1
   188b0:	4b50      	ldr	r3, [pc, #320]	; (189f4 <vTask_GSM_service+0x7dc>)
   188b2:	4798      	blx	r3
									getM2MNumber(phone_number);
   188b4:	1c7b      	adds	r3, r7, #1
   188b6:	33ff      	adds	r3, #255	; 0xff
   188b8:	0018      	movs	r0, r3
   188ba:	4b4f      	ldr	r3, [pc, #316]	; (189f8 <vTask_GSM_service+0x7e0>)
   188bc:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   188be:	1c7b      	adds	r3, r7, #1
   188c0:	33ff      	adds	r3, #255	; 0xff
   188c2:	2200      	movs	r2, #0
   188c4:	0019      	movs	r1, r3
   188c6:	2005      	movs	r0, #5
   188c8:	4b40      	ldr	r3, [pc, #256]	; (189cc <vTask_GSM_service+0x7b4>)
   188ca:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
   188cc:	4a4b      	ldr	r2, [pc, #300]	; (189fc <vTask_GSM_service+0x7e4>)
   188ce:	1c7b      	adds	r3, r7, #1
   188d0:	33ff      	adds	r3, #255	; 0xff
   188d2:	0011      	movs	r1, r2
   188d4:	0018      	movs	r0, r3
   188d6:	4b4a      	ldr	r3, [pc, #296]	; (18a00 <vTask_GSM_service+0x7e8>)
   188d8:	4798      	blx	r3
   188da:	e02c      	b.n	18936 <vTask_GSM_service+0x71e>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
   188dc:	4b28      	ldr	r3, [pc, #160]	; (18980 <vTask_GSM_service+0x768>)
   188de:	78db      	ldrb	r3, [r3, #3]
   188e0:	2b00      	cmp	r3, #0
   188e2:	d028      	beq.n	18936 <vTask_GSM_service+0x71e>
   188e4:	1c7b      	adds	r3, r7, #1
   188e6:	33ff      	adds	r3, #255	; 0xff
   188e8:	0018      	movs	r0, r3
   188ea:	4b46      	ldr	r3, [pc, #280]	; (18a04 <vTask_GSM_service+0x7ec>)
   188ec:	4798      	blx	r3
   188ee:	1e03      	subs	r3, r0, #0
   188f0:	d021      	beq.n	18936 <vTask_GSM_service+0x71e>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
   188f2:	4a42      	ldr	r2, [pc, #264]	; (189fc <vTask_GSM_service+0x7e4>)
   188f4:	234c      	movs	r3, #76	; 0x4c
   188f6:	18fb      	adds	r3, r7, r3
   188f8:	0011      	movs	r1, r2
   188fa:	0018      	movs	r0, r3
   188fc:	4b37      	ldr	r3, [pc, #220]	; (189dc <vTask_GSM_service+0x7c4>)
   188fe:	4798      	blx	r3
   18900:	1e03      	subs	r3, r0, #0
   18902:	d018      	beq.n	18936 <vTask_GSM_service+0x71e>
								{
									setM2MRemoteVerified(true);
   18904:	2001      	movs	r0, #1
   18906:	4b40      	ldr	r3, [pc, #256]	; (18a08 <vTask_GSM_service+0x7f0>)
   18908:	4798      	blx	r3
									saveM2MSettings(true);
   1890a:	2001      	movs	r0, #1
   1890c:	4b3f      	ldr	r3, [pc, #252]	; (18a0c <vTask_GSM_service+0x7f4>)
   1890e:	4798      	blx	r3
									getActiveNumber(phone_number);
   18910:	1c7b      	adds	r3, r7, #1
   18912:	33ff      	adds	r3, #255	; 0xff
   18914:	0018      	movs	r0, r3
   18916:	4b3e      	ldr	r3, [pc, #248]	; (18a10 <vTask_GSM_service+0x7f8>)
   18918:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   1891a:	1c7b      	adds	r3, r7, #1
   1891c:	33ff      	adds	r3, #255	; 0xff
   1891e:	2200      	movs	r2, #0
   18920:	0019      	movs	r1, r3
   18922:	2005      	movs	r0, #5
   18924:	4b29      	ldr	r3, [pc, #164]	; (189cc <vTask_GSM_service+0x7b4>)
   18926:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
   18928:	4a3a      	ldr	r2, [pc, #232]	; (18a14 <vTask_GSM_service+0x7fc>)
   1892a:	1c7b      	adds	r3, r7, #1
   1892c:	33ff      	adds	r3, #255	; 0xff
   1892e:	0011      	movs	r1, r2
   18930:	0018      	movs	r0, r3
   18932:	4b33      	ldr	r3, [pc, #204]	; (18a00 <vTask_GSM_service+0x7e8>)
   18934:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
   18936:	4b38      	ldr	r3, [pc, #224]	; (18a18 <vTask_GSM_service+0x800>)
   18938:	4798      	blx	r3


						/************************************************************************/
						/* Automatic Detection of Network Using CSQN URC, and continue to next loop*/
						/************************************************************************/
						if(autoNetworkDetection && gsm_responseLine_isCSQN(response,&Signal_Strength))
   1893a:	4b38      	ldr	r3, [pc, #224]	; (18a1c <vTask_GSM_service+0x804>)
   1893c:	781b      	ldrb	r3, [r3, #0]
   1893e:	2b00      	cmp	r3, #0
   18940:	d076      	beq.n	18a30 <vTask_GSM_service+0x818>
   18942:	4a37      	ldr	r2, [pc, #220]	; (18a20 <vTask_GSM_service+0x808>)
   18944:	230c      	movs	r3, #12
   18946:	18fb      	adds	r3, r7, r3
   18948:	0011      	movs	r1, r2
   1894a:	0018      	movs	r0, r3
   1894c:	4b35      	ldr	r3, [pc, #212]	; (18a24 <vTask_GSM_service+0x80c>)
   1894e:	4798      	blx	r3
   18950:	1e03      	subs	r3, r0, #0
   18952:	d06d      	beq.n	18a30 <vTask_GSM_service+0x818>
						{
							lastGSMCommunicationTime=lastToLastGSMCommunicationTime;
   18954:	4b34      	ldr	r3, [pc, #208]	; (18a28 <vTask_GSM_service+0x810>)
   18956:	681a      	ldr	r2, [r3, #0]
   18958:	4b34      	ldr	r3, [pc, #208]	; (18a2c <vTask_GSM_service+0x814>)
   1895a:	601a      	str	r2, [r3, #0]
							network_update_time = xTaskGetTickCount();
   1895c:	4b0c      	ldr	r3, [pc, #48]	; (18990 <vTask_GSM_service+0x778>)
   1895e:	4798      	blx	r3
   18960:	0003      	movs	r3, r0
   18962:	2296      	movs	r2, #150	; 0x96
   18964:	0052      	lsls	r2, r2, #1
   18966:	18ba      	adds	r2, r7, r2
   18968:	6013      	str	r3, [r2, #0]
   1896a:	e515      	b.n	18398 <vTask_GSM_service+0x180>
   1896c:	200009e0 	.word	0x200009e0
   18970:	00014a85 	.word	0x00014a85
   18974:	20000963 	.word	0x20000963
   18978:	00014521 	.word	0x00014521
   1897c:	00014e61 	.word	0x00014e61
   18980:	2000082c 	.word	0x2000082c
   18984:	20000943 	.word	0x20000943
   18988:	2000099e 	.word	0x2000099e
   1898c:	200009d4 	.word	0x200009d4
   18990:	00020dad 	.word	0x00020dad
   18994:	20000a18 	.word	0x20000a18
   18998:	2000092d 	.word	0x2000092d
   1899c:	00017f65 	.word	0x00017f65
   189a0:	000148dd 	.word	0x000148dd
   189a4:	00014929 	.word	0x00014929
   189a8:	fffffedc 	.word	0xfffffedc
   189ac:	0002975b 	.word	0x0002975b
   189b0:	000134bd 	.word	0x000134bd
   189b4:	00013561 	.word	0x00013561
   189b8:	00012cc9 	.word	0x00012cc9
   189bc:	00011a79 	.word	0x00011a79
   189c0:	0001099d 	.word	0x0001099d
   189c4:	00010a0d 	.word	0x00010a0d
   189c8:	0002b0ac 	.word	0x0002b0ac
   189cc:	0001db19 	.word	0x0001db19
   189d0:	000141a1 	.word	0x000141a1
   189d4:	00017ff9 	.word	0x00017ff9
   189d8:	0002b0b4 	.word	0x0002b0b4
   189dc:	0001420d 	.word	0x0001420d
   189e0:	000299eb 	.word	0x000299eb
   189e4:	00029737 	.word	0x00029737
   189e8:	000150dd 	.word	0x000150dd
   189ec:	00010a55 	.word	0x00010a55
   189f0:	0002b050 	.word	0x0002b050
   189f4:	00010b45 	.word	0x00010b45
   189f8:	00010acd 	.word	0x00010acd
   189fc:	0002b0b8 	.word	0x0002b0b8
   18a00:	00012b9d 	.word	0x00012b9d
   18a04:	00010a91 	.word	0x00010a91
   18a08:	00010b95 	.word	0x00010b95
   18a0c:	00010be5 	.word	0x00010be5
   18a10:	00010d21 	.word	0x00010d21
   18a14:	0002b0c0 	.word	0x0002b0c0
   18a18:	0001270d 	.word	0x0001270d
   18a1c:	20000a65 	.word	0x20000a65
   18a20:	20000989 	.word	0x20000989
   18a24:	0001360d 	.word	0x0001360d
   18a28:	20000890 	.word	0x20000890
   18a2c:	20000894 	.word	0x20000894
							continue;
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
   18a30:	4bd8      	ldr	r3, [pc, #864]	; (18d94 <vTask_GSM_service+0xb7c>)
   18a32:	781b      	ldrb	r3, [r3, #0]
   18a34:	2201      	movs	r2, #1
   18a36:	4053      	eors	r3, r2
   18a38:	b2db      	uxtb	r3, r3
   18a3a:	2b00      	cmp	r3, #0
   18a3c:	d100      	bne.n	18a40 <vTask_GSM_service+0x828>
   18a3e:	e099      	b.n	18b74 <vTask_GSM_service+0x95c>
   18a40:	4bd5      	ldr	r3, [pc, #852]	; (18d98 <vTask_GSM_service+0xb80>)
   18a42:	781b      	ldrb	r3, [r3, #0]
   18a44:	b2db      	uxtb	r3, r3
   18a46:	2b4e      	cmp	r3, #78	; 0x4e
   18a48:	d005      	beq.n	18a56 <vTask_GSM_service+0x83e>
   18a4a:	4bd3      	ldr	r3, [pc, #844]	; (18d98 <vTask_GSM_service+0xb80>)
   18a4c:	781b      	ldrb	r3, [r3, #0]
   18a4e:	b2db      	uxtb	r3, r3
   18a50:	2b52      	cmp	r3, #82	; 0x52
   18a52:	d000      	beq.n	18a56 <vTask_GSM_service+0x83e>
   18a54:	e08e      	b.n	18b74 <vTask_GSM_service+0x95c>
   18a56:	4bd1      	ldr	r3, [pc, #836]	; (18d9c <vTask_GSM_service+0xb84>)
   18a58:	781b      	ldrb	r3, [r3, #0]
   18a5a:	b2db      	uxtb	r3, r3
   18a5c:	2b4e      	cmp	r3, #78	; 0x4e
   18a5e:	d005      	beq.n	18a6c <vTask_GSM_service+0x854>
   18a60:	4bce      	ldr	r3, [pc, #824]	; (18d9c <vTask_GSM_service+0xb84>)
   18a62:	781b      	ldrb	r3, [r3, #0]
   18a64:	b2db      	uxtb	r3, r3
   18a66:	2b49      	cmp	r3, #73	; 0x49
   18a68:	d000      	beq.n	18a6c <vTask_GSM_service+0x854>
   18a6a:	e083      	b.n	18b74 <vTask_GSM_service+0x95c>
						{
							if (gsm_responseLine_isRinging(response))
   18a6c:	230c      	movs	r3, #12
   18a6e:	18fb      	adds	r3, r7, r3
   18a70:	0018      	movs	r0, r3
   18a72:	4bcb      	ldr	r3, [pc, #812]	; (18da0 <vTask_GSM_service+0xb88>)
   18a74:	4798      	blx	r3
   18a76:	1e03      	subs	r3, r0, #0
   18a78:	d071      	beq.n	18b5e <vTask_GSM_service+0x946>
							{
								currentStatus = 'R';
   18a7a:	4bc7      	ldr	r3, [pc, #796]	; (18d98 <vTask_GSM_service+0xb80>)
   18a7c:	2252      	movs	r2, #82	; 0x52
   18a7e:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
   18a80:	4bc6      	ldr	r3, [pc, #792]	; (18d9c <vTask_GSM_service+0xb84>)
   18a82:	2249      	movs	r2, #73	; 0x49
   18a84:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
   18a86:	23ec      	movs	r3, #236	; 0xec
   18a88:	18fb      	adds	r3, r7, r3
   18a8a:	0018      	movs	r0, r3
   18a8c:	2314      	movs	r3, #20
   18a8e:	001a      	movs	r2, r3
   18a90:	2100      	movs	r1, #0
   18a92:	4bc4      	ldr	r3, [pc, #784]	; (18da4 <vTask_GSM_service+0xb8c>)
   18a94:	4798      	blx	r3
								inCall = true;
   18a96:	4bc4      	ldr	r3, [pc, #784]	; (18da8 <vTask_GSM_service+0xb90>)
   18a98:	2201      	movs	r2, #1
   18a9a:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
   18a9c:	232a      	movs	r3, #42	; 0x2a
   18a9e:	33ff      	adds	r3, #255	; 0xff
   18aa0:	18fb      	adds	r3, r7, r3
   18aa2:	2200      	movs	r2, #0
   18aa4:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
   18aa6:	2394      	movs	r3, #148	; 0x94
   18aa8:	005b      	lsls	r3, r3, #1
   18aaa:	18fb      	adds	r3, r7, r3
   18aac:	2200      	movs	r2, #0
   18aae:	701a      	strb	r2, [r3, #0]
   18ab0:	e02f      	b.n	18b12 <vTask_GSM_service+0x8fa>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
   18ab2:	23fa      	movs	r3, #250	; 0xfa
   18ab4:	005b      	lsls	r3, r3, #1
   18ab6:	0018      	movs	r0, r3
   18ab8:	4bbc      	ldr	r3, [pc, #752]	; (18dac <vTask_GSM_service+0xb94>)
   18aba:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
   18abc:	230c      	movs	r3, #12
   18abe:	18fb      	adds	r3, r7, r3
   18ac0:	2140      	movs	r1, #64	; 0x40
   18ac2:	0018      	movs	r0, r3
   18ac4:	4bba      	ldr	r3, [pc, #744]	; (18db0 <vTask_GSM_service+0xb98>)
   18ac6:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
   18ac8:	23ec      	movs	r3, #236	; 0xec
   18aca:	18fa      	adds	r2, r7, r3
   18acc:	230c      	movs	r3, #12
   18ace:	18fb      	adds	r3, r7, r3
   18ad0:	0011      	movs	r1, r2
   18ad2:	0018      	movs	r0, r3
   18ad4:	4bb7      	ldr	r3, [pc, #732]	; (18db4 <vTask_GSM_service+0xb9c>)
   18ad6:	4798      	blx	r3
   18ad8:	1e03      	subs	r3, r0, #0
   18ada:	d011      	beq.n	18b00 <vTask_GSM_service+0x8e8>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
   18adc:	23ec      	movs	r3, #236	; 0xec
   18ade:	18fb      	adds	r3, r7, r3
   18ae0:	2200      	movs	r2, #0
   18ae2:	0019      	movs	r1, r3
   18ae4:	2001      	movs	r0, #1
   18ae6:	4bb4      	ldr	r3, [pc, #720]	; (18db8 <vTask_GSM_service+0xba0>)
   18ae8:	4798      	blx	r3
										new_call = true;
   18aea:	232a      	movs	r3, #42	; 0x2a
   18aec:	33ff      	adds	r3, #255	; 0xff
   18aee:	18fb      	adds	r3, r7, r3
   18af0:	2201      	movs	r2, #1
   18af2:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
   18af4:	4bb1      	ldr	r3, [pc, #708]	; (18dbc <vTask_GSM_service+0xba4>)
   18af6:	4798      	blx	r3
   18af8:	0002      	movs	r2, r0
   18afa:	4bb1      	ldr	r3, [pc, #708]	; (18dc0 <vTask_GSM_service+0xba8>)
   18afc:	601a      	str	r2, [r3, #0]
										break;
   18afe:	e00e      	b.n	18b1e <vTask_GSM_service+0x906>
								for (uint8_t i=0;i<4;i++)
   18b00:	2394      	movs	r3, #148	; 0x94
   18b02:	005b      	lsls	r3, r3, #1
   18b04:	18fb      	adds	r3, r7, r3
   18b06:	781a      	ldrb	r2, [r3, #0]
   18b08:	2394      	movs	r3, #148	; 0x94
   18b0a:	005b      	lsls	r3, r3, #1
   18b0c:	18fb      	adds	r3, r7, r3
   18b0e:	3201      	adds	r2, #1
   18b10:	701a      	strb	r2, [r3, #0]
   18b12:	2394      	movs	r3, #148	; 0x94
   18b14:	005b      	lsls	r3, r3, #1
   18b16:	18fb      	adds	r3, r7, r3
   18b18:	781b      	ldrb	r3, [r3, #0]
   18b1a:	2b03      	cmp	r3, #3
   18b1c:	d9c9      	bls.n	18ab2 <vTask_GSM_service+0x89a>
									}
								}
								if (new_call)
   18b1e:	232a      	movs	r3, #42	; 0x2a
   18b20:	33ff      	adds	r3, #255	; 0xff
   18b22:	18fb      	adds	r3, r7, r3
   18b24:	781b      	ldrb	r3, [r3, #0]
   18b26:	2b00      	cmp	r3, #0
   18b28:	d100      	bne.n	18b2c <vTask_GSM_service+0x914>
   18b2a:	e188      	b.n	18e3e <vTask_GSM_service+0xc26>
								{
									new_call = false;
   18b2c:	232a      	movs	r3, #42	; 0x2a
   18b2e:	33ff      	adds	r3, #255	; 0xff
   18b30:	18fb      	adds	r3, r7, r3
   18b32:	2200      	movs	r2, #0
   18b34:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
   18b36:	23ec      	movs	r3, #236	; 0xec
   18b38:	18fb      	adds	r3, r7, r3
   18b3a:	0018      	movs	r0, r3
   18b3c:	4ba1      	ldr	r3, [pc, #644]	; (18dc4 <vTask_GSM_service+0xbac>)
   18b3e:	4798      	blx	r3
   18b40:	1e03      	subs	r3, r0, #0
   18b42:	d009      	beq.n	18b58 <vTask_GSM_service+0x940>
									{
										acceptCall();
   18b44:	4ba0      	ldr	r3, [pc, #640]	; (18dc8 <vTask_GSM_service+0xbb0>)
   18b46:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
   18b48:	23ec      	movs	r3, #236	; 0xec
   18b4a:	18fb      	adds	r3, r7, r3
   18b4c:	2200      	movs	r2, #0
   18b4e:	0019      	movs	r1, r3
   18b50:	2002      	movs	r0, #2
   18b52:	4b99      	ldr	r3, [pc, #612]	; (18db8 <vTask_GSM_service+0xba0>)
   18b54:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   18b56:	e172      	b.n	18e3e <vTask_GSM_service+0xc26>
									}
									else
									{
										endCall();
   18b58:	4b9c      	ldr	r3, [pc, #624]	; (18dcc <vTask_GSM_service+0xbb4>)
   18b5a:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   18b5c:	e16f      	b.n	18e3e <vTask_GSM_service+0xc26>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
   18b5e:	230c      	movs	r3, #12
   18b60:	18fb      	adds	r3, r7, r3
   18b62:	0018      	movs	r0, r3
   18b64:	4b9a      	ldr	r3, [pc, #616]	; (18dd0 <vTask_GSM_service+0xbb8>)
   18b66:	4798      	blx	r3
   18b68:	1e03      	subs	r3, r0, #0
   18b6a:	d100      	bne.n	18b6e <vTask_GSM_service+0x956>
   18b6c:	e167      	b.n	18e3e <vTask_GSM_service+0xc26>
							{
								endCall();
   18b6e:	4b97      	ldr	r3, [pc, #604]	; (18dcc <vTask_GSM_service+0xbb4>)
   18b70:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   18b72:	e164      	b.n	18e3e <vTask_GSM_service+0xc26>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
   18b74:	4b87      	ldr	r3, [pc, #540]	; (18d94 <vTask_GSM_service+0xb7c>)
   18b76:	781b      	ldrb	r3, [r3, #0]
   18b78:	2201      	movs	r2, #1
   18b7a:	4053      	eors	r3, r2
   18b7c:	b2db      	uxtb	r3, r3
   18b7e:	2b00      	cmp	r3, #0
   18b80:	d045      	beq.n	18c0e <vTask_GSM_service+0x9f6>
   18b82:	4b85      	ldr	r3, [pc, #532]	; (18d98 <vTask_GSM_service+0xb80>)
   18b84:	781b      	ldrb	r3, [r3, #0]
   18b86:	b2db      	uxtb	r3, r3
   18b88:	2b49      	cmp	r3, #73	; 0x49
   18b8a:	d140      	bne.n	18c0e <vTask_GSM_service+0x9f6>
   18b8c:	4b83      	ldr	r3, [pc, #524]	; (18d9c <vTask_GSM_service+0xb84>)
   18b8e:	781b      	ldrb	r3, [r3, #0]
   18b90:	b2db      	uxtb	r3, r3
   18b92:	2b49      	cmp	r3, #73	; 0x49
   18b94:	d13b      	bne.n	18c0e <vTask_GSM_service+0x9f6>
						{
							if (gsm_responseLine_isCallCut(response))
   18b96:	230c      	movs	r3, #12
   18b98:	18fb      	adds	r3, r7, r3
   18b9a:	0018      	movs	r0, r3
   18b9c:	4b8c      	ldr	r3, [pc, #560]	; (18dd0 <vTask_GSM_service+0xbb8>)
   18b9e:	4798      	blx	r3
   18ba0:	1e03      	subs	r3, r0, #0
   18ba2:	d002      	beq.n	18baa <vTask_GSM_service+0x992>
							{
								endCall();
   18ba4:	4b89      	ldr	r3, [pc, #548]	; (18dcc <vTask_GSM_service+0xbb4>)
   18ba6:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   18ba8:	e14d      	b.n	18e46 <vTask_GSM_service+0xc2e>
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
   18baa:	230c      	movs	r3, #12
   18bac:	18fb      	adds	r3, r7, r3
   18bae:	0018      	movs	r0, r3
   18bb0:	4b88      	ldr	r3, [pc, #544]	; (18dd4 <vTask_GSM_service+0xbbc>)
   18bb2:	4798      	blx	r3
   18bb4:	1e03      	subs	r3, r0, #0
   18bb6:	d024      	beq.n	18c02 <vTask_GSM_service+0x9ea>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   18bb8:	4a87      	ldr	r2, [pc, #540]	; (18dd8 <vTask_GSM_service+0xbc0>)
   18bba:	230c      	movs	r3, #12
   18bbc:	18fb      	adds	r3, r7, r3
   18bbe:	0011      	movs	r1, r2
   18bc0:	0018      	movs	r0, r3
   18bc2:	4b86      	ldr	r3, [pc, #536]	; (18ddc <vTask_GSM_service+0xbc4>)
   18bc4:	4798      	blx	r3
   18bc6:	0003      	movs	r3, r0
   18bc8:	228e      	movs	r2, #142	; 0x8e
   18bca:	0052      	lsls	r2, r2, #1
   18bcc:	18ba      	adds	r2, r7, r2
   18bce:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   18bd0:	4b81      	ldr	r3, [pc, #516]	; (18dd8 <vTask_GSM_service+0xbc0>)
   18bd2:	0019      	movs	r1, r3
   18bd4:	2000      	movs	r0, #0
   18bd6:	4b81      	ldr	r3, [pc, #516]	; (18ddc <vTask_GSM_service+0xbc4>)
   18bd8:	4798      	blx	r3
   18bda:	0003      	movs	r3, r0
   18bdc:	228e      	movs	r2, #142	; 0x8e
   18bde:	0052      	lsls	r2, r2, #1
   18be0:	18ba      	adds	r2, r7, r2
   18be2:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   18be4:	238e      	movs	r3, #142	; 0x8e
   18be6:	005b      	lsls	r3, r3, #1
   18be8:	18fb      	adds	r3, r7, r3
   18bea:	681b      	ldr	r3, [r3, #0]
   18bec:	0018      	movs	r0, r3
   18bee:	4b7c      	ldr	r3, [pc, #496]	; (18de0 <vTask_GSM_service+0xbc8>)
   18bf0:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   18bf2:	238e      	movs	r3, #142	; 0x8e
   18bf4:	005b      	lsls	r3, r3, #1
   18bf6:	18fb      	adds	r3, r7, r3
   18bf8:	681b      	ldr	r3, [r3, #0]
   18bfa:	0018      	movs	r0, r3
   18bfc:	4b79      	ldr	r3, [pc, #484]	; (18de4 <vTask_GSM_service+0xbcc>)
   18bfe:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   18c00:	e121      	b.n	18e46 <vTask_GSM_service+0xc2e>
							}
							else
							{
								playSoundAgain(response);
   18c02:	230c      	movs	r3, #12
   18c04:	18fb      	adds	r3, r7, r3
   18c06:	0018      	movs	r0, r3
   18c08:	4b77      	ldr	r3, [pc, #476]	; (18de8 <vTask_GSM_service+0xbd0>)
   18c0a:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   18c0c:	e11b      	b.n	18e46 <vTask_GSM_service+0xc2e>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
   18c0e:	4b62      	ldr	r3, [pc, #392]	; (18d98 <vTask_GSM_service+0xb80>)
   18c10:	781b      	ldrb	r3, [r3, #0]
   18c12:	b2db      	uxtb	r3, r3
   18c14:	2b4e      	cmp	r3, #78	; 0x4e
   18c16:	d004      	beq.n	18c22 <vTask_GSM_service+0xa0a>
   18c18:	4b5f      	ldr	r3, [pc, #380]	; (18d98 <vTask_GSM_service+0xb80>)
   18c1a:	781b      	ldrb	r3, [r3, #0]
   18c1c:	b2db      	uxtb	r3, r3
   18c1e:	2b52      	cmp	r3, #82	; 0x52
   18c20:	d163      	bne.n	18cea <vTask_GSM_service+0xad2>
   18c22:	4b5e      	ldr	r3, [pc, #376]	; (18d9c <vTask_GSM_service+0xb84>)
   18c24:	781b      	ldrb	r3, [r3, #0]
   18c26:	b2db      	uxtb	r3, r3
   18c28:	2b4f      	cmp	r3, #79	; 0x4f
   18c2a:	d15e      	bne.n	18cea <vTask_GSM_service+0xad2>
						{
							if (OutGoingcallState(response) == 'R')
   18c2c:	230c      	movs	r3, #12
   18c2e:	18fb      	adds	r3, r7, r3
   18c30:	0018      	movs	r0, r3
   18c32:	4b6e      	ldr	r3, [pc, #440]	; (18dec <vTask_GSM_service+0xbd4>)
   18c34:	4798      	blx	r3
   18c36:	0003      	movs	r3, r0
   18c38:	2b52      	cmp	r3, #82	; 0x52
   18c3a:	d10b      	bne.n	18c54 <vTask_GSM_service+0xa3c>
							{
								callCutWait = xTaskGetTickCount();
   18c3c:	4b5f      	ldr	r3, [pc, #380]	; (18dbc <vTask_GSM_service+0xba4>)
   18c3e:	4798      	blx	r3
   18c40:	0002      	movs	r2, r0
   18c42:	4b5f      	ldr	r3, [pc, #380]	; (18dc0 <vTask_GSM_service+0xba8>)
   18c44:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
   18c46:	4b54      	ldr	r3, [pc, #336]	; (18d98 <vTask_GSM_service+0xb80>)
   18c48:	2252      	movs	r2, #82	; 0x52
   18c4a:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   18c4c:	4b53      	ldr	r3, [pc, #332]	; (18d9c <vTask_GSM_service+0xb84>)
   18c4e:	224f      	movs	r2, #79	; 0x4f
   18c50:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
   18c52:	e0f7      	b.n	18e44 <vTask_GSM_service+0xc2c>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
   18c54:	230c      	movs	r3, #12
   18c56:	18fb      	adds	r3, r7, r3
   18c58:	0018      	movs	r0, r3
   18c5a:	4b5d      	ldr	r3, [pc, #372]	; (18dd0 <vTask_GSM_service+0xbb8>)
   18c5c:	4798      	blx	r3
   18c5e:	1e03      	subs	r3, r0, #0
   18c60:	d107      	bne.n	18c72 <vTask_GSM_service+0xa5a>
   18c62:	230c      	movs	r3, #12
   18c64:	18fb      	adds	r3, r7, r3
   18c66:	0018      	movs	r0, r3
   18c68:	4b60      	ldr	r3, [pc, #384]	; (18dec <vTask_GSM_service+0xbd4>)
   18c6a:	4798      	blx	r3
   18c6c:	0003      	movs	r3, r0
   18c6e:	2b45      	cmp	r3, #69	; 0x45
   18c70:	d110      	bne.n	18c94 <vTask_GSM_service+0xa7c>
							{
								char t1 = actionType;
   18c72:	231c      	movs	r3, #28
   18c74:	33ff      	adds	r3, #255	; 0xff
   18c76:	18fb      	adds	r3, r7, r3
   18c78:	4a5d      	ldr	r2, [pc, #372]	; (18df0 <vTask_GSM_service+0xbd8>)
   18c7a:	7812      	ldrb	r2, [r2, #0]
   18c7c:	701a      	strb	r2, [r3, #0]
								endCall();
   18c7e:	4b53      	ldr	r3, [pc, #332]	; (18dcc <vTask_GSM_service+0xbb4>)
   18c80:	4798      	blx	r3
								checkRespSMS(t1);
   18c82:	231c      	movs	r3, #28
   18c84:	33ff      	adds	r3, #255	; 0xff
   18c86:	18fb      	adds	r3, r7, r3
   18c88:	781b      	ldrb	r3, [r3, #0]
   18c8a:	0018      	movs	r0, r3
   18c8c:	4b59      	ldr	r3, [pc, #356]	; (18df4 <vTask_GSM_service+0xbdc>)
   18c8e:	4798      	blx	r3
							{
   18c90:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
   18c92:	e0d7      	b.n	18e44 <vTask_GSM_service+0xc2c>
							}
							else if (OutGoingcallState(response) == 'I')
   18c94:	230c      	movs	r3, #12
   18c96:	18fb      	adds	r3, r7, r3
   18c98:	0018      	movs	r0, r3
   18c9a:	4b54      	ldr	r3, [pc, #336]	; (18dec <vTask_GSM_service+0xbd4>)
   18c9c:	4798      	blx	r3
   18c9e:	0003      	movs	r3, r0
   18ca0:	2b49      	cmp	r3, #73	; 0x49
   18ca2:	d000      	beq.n	18ca6 <vTask_GSM_service+0xa8e>
   18ca4:	e0ce      	b.n	18e44 <vTask_GSM_service+0xc2c>
							{
								callCutWait = xTaskGetTickCount();
   18ca6:	4b45      	ldr	r3, [pc, #276]	; (18dbc <vTask_GSM_service+0xba4>)
   18ca8:	4798      	blx	r3
   18caa:	0002      	movs	r2, r0
   18cac:	4b44      	ldr	r3, [pc, #272]	; (18dc0 <vTask_GSM_service+0xba8>)
   18cae:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
   18cb0:	4b39      	ldr	r3, [pc, #228]	; (18d98 <vTask_GSM_service+0xb80>)
   18cb2:	2249      	movs	r2, #73	; 0x49
   18cb4:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   18cb6:	4b39      	ldr	r3, [pc, #228]	; (18d9c <vTask_GSM_service+0xb84>)
   18cb8:	224f      	movs	r2, #79	; 0x4f
   18cba:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
   18cbc:	4b4e      	ldr	r3, [pc, #312]	; (18df8 <vTask_GSM_service+0xbe0>)
   18cbe:	2201      	movs	r2, #1
   18cc0:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
   18cc2:	2201      	movs	r2, #1
   18cc4:	2100      	movs	r1, #0
   18cc6:	2002      	movs	r0, #2
   18cc8:	4b3b      	ldr	r3, [pc, #236]	; (18db8 <vTask_GSM_service+0xba0>)
   18cca:	4798      	blx	r3
								if (!m2mEvent)
   18ccc:	4b4b      	ldr	r3, [pc, #300]	; (18dfc <vTask_GSM_service+0xbe4>)
   18cce:	781b      	ldrb	r3, [r3, #0]
   18cd0:	2201      	movs	r2, #1
   18cd2:	4053      	eors	r3, r2
   18cd4:	b2db      	uxtb	r3, r3
   18cd6:	2b00      	cmp	r3, #0
   18cd8:	d100      	bne.n	18cdc <vTask_GSM_service+0xac4>
   18cda:	e0b3      	b.n	18e44 <vTask_GSM_service+0xc2c>
								{
									playSound(actionType,true);
   18cdc:	4b44      	ldr	r3, [pc, #272]	; (18df0 <vTask_GSM_service+0xbd8>)
   18cde:	781b      	ldrb	r3, [r3, #0]
   18ce0:	2101      	movs	r1, #1
   18ce2:	0018      	movs	r0, r3
   18ce4:	4b46      	ldr	r3, [pc, #280]	; (18e00 <vTask_GSM_service+0xbe8>)
   18ce6:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
   18ce8:	e0ac      	b.n	18e44 <vTask_GSM_service+0xc2c>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
   18cea:	4b2b      	ldr	r3, [pc, #172]	; (18d98 <vTask_GSM_service+0xb80>)
   18cec:	781b      	ldrb	r3, [r3, #0]
   18cee:	b2db      	uxtb	r3, r3
   18cf0:	2b49      	cmp	r3, #73	; 0x49
   18cf2:	d001      	beq.n	18cf8 <vTask_GSM_service+0xae0>
   18cf4:	f7ff fb50 	bl	18398 <vTask_GSM_service+0x180>
   18cf8:	4b28      	ldr	r3, [pc, #160]	; (18d9c <vTask_GSM_service+0xb84>)
   18cfa:	781b      	ldrb	r3, [r3, #0]
   18cfc:	b2db      	uxtb	r3, r3
   18cfe:	2b4f      	cmp	r3, #79	; 0x4f
   18d00:	d001      	beq.n	18d06 <vTask_GSM_service+0xaee>
   18d02:	f7ff fb49 	bl	18398 <vTask_GSM_service+0x180>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
   18d06:	230c      	movs	r3, #12
   18d08:	18fb      	adds	r3, r7, r3
   18d0a:	0018      	movs	r0, r3
   18d0c:	4b30      	ldr	r3, [pc, #192]	; (18dd0 <vTask_GSM_service+0xbb8>)
   18d0e:	4798      	blx	r3
   18d10:	1e03      	subs	r3, r0, #0
   18d12:	d107      	bne.n	18d24 <vTask_GSM_service+0xb0c>
   18d14:	230c      	movs	r3, #12
   18d16:	18fb      	adds	r3, r7, r3
   18d18:	0018      	movs	r0, r3
   18d1a:	4b34      	ldr	r3, [pc, #208]	; (18dec <vTask_GSM_service+0xbd4>)
   18d1c:	4798      	blx	r3
   18d1e:	0003      	movs	r3, r0
   18d20:	2b45      	cmp	r3, #69	; 0x45
   18d22:	d102      	bne.n	18d2a <vTask_GSM_service+0xb12>
							{
								endCall();
   18d24:	4b29      	ldr	r3, [pc, #164]	; (18dcc <vTask_GSM_service+0xbb4>)
   18d26:	4798      	blx	r3
   18d28:	e08d      	b.n	18e46 <vTask_GSM_service+0xc2e>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
   18d2a:	230c      	movs	r3, #12
   18d2c:	18fb      	adds	r3, r7, r3
   18d2e:	0018      	movs	r0, r3
   18d30:	4b28      	ldr	r3, [pc, #160]	; (18dd4 <vTask_GSM_service+0xbbc>)
   18d32:	4798      	blx	r3
   18d34:	1e03      	subs	r3, r0, #0
   18d36:	d025      	beq.n	18d84 <vTask_GSM_service+0xb6c>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   18d38:	4a27      	ldr	r2, [pc, #156]	; (18dd8 <vTask_GSM_service+0xbc0>)
   18d3a:	230c      	movs	r3, #12
   18d3c:	18fb      	adds	r3, r7, r3
   18d3e:	0011      	movs	r1, r2
   18d40:	0018      	movs	r0, r3
   18d42:	4b26      	ldr	r3, [pc, #152]	; (18ddc <vTask_GSM_service+0xbc4>)
   18d44:	4798      	blx	r3
   18d46:	0003      	movs	r3, r0
   18d48:	228a      	movs	r2, #138	; 0x8a
   18d4a:	0052      	lsls	r2, r2, #1
   18d4c:	18ba      	adds	r2, r7, r2
   18d4e:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   18d50:	4b21      	ldr	r3, [pc, #132]	; (18dd8 <vTask_GSM_service+0xbc0>)
   18d52:	0019      	movs	r1, r3
   18d54:	2000      	movs	r0, #0
   18d56:	4b21      	ldr	r3, [pc, #132]	; (18ddc <vTask_GSM_service+0xbc4>)
   18d58:	4798      	blx	r3
   18d5a:	0003      	movs	r3, r0
   18d5c:	228a      	movs	r2, #138	; 0x8a
   18d5e:	0052      	lsls	r2, r2, #1
   18d60:	18ba      	adds	r2, r7, r2
   18d62:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   18d64:	238a      	movs	r3, #138	; 0x8a
   18d66:	005b      	lsls	r3, r3, #1
   18d68:	18fb      	adds	r3, r7, r3
   18d6a:	681b      	ldr	r3, [r3, #0]
   18d6c:	0018      	movs	r0, r3
   18d6e:	4b1c      	ldr	r3, [pc, #112]	; (18de0 <vTask_GSM_service+0xbc8>)
   18d70:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   18d72:	238a      	movs	r3, #138	; 0x8a
   18d74:	005b      	lsls	r3, r3, #1
   18d76:	18fb      	adds	r3, r7, r3
   18d78:	681b      	ldr	r3, [r3, #0]
   18d7a:	0018      	movs	r0, r3
   18d7c:	4b19      	ldr	r3, [pc, #100]	; (18de4 <vTask_GSM_service+0xbcc>)
   18d7e:	4798      	blx	r3
   18d80:	f7ff fb0a 	bl	18398 <vTask_GSM_service+0x180>
							}
							else
							{
								playSoundAgain(response);
   18d84:	230c      	movs	r3, #12
   18d86:	18fb      	adds	r3, r7, r3
   18d88:	0018      	movs	r0, r3
   18d8a:	4b17      	ldr	r3, [pc, #92]	; (18de8 <vTask_GSM_service+0xbd0>)
   18d8c:	4798      	blx	r3
   18d8e:	f7ff fb03 	bl	18398 <vTask_GSM_service+0x180>
   18d92:	46c0      	nop			; (mov r8, r8)
   18d94:	20000944 	.word	0x20000944
   18d98:	200009e0 	.word	0x200009e0
   18d9c:	2000098f 	.word	0x2000098f
   18da0:	000135dd 	.word	0x000135dd
   18da4:	0002975b 	.word	0x0002975b
   18da8:	2000099c 	.word	0x2000099c
   18dac:	00020a49 	.word	0x00020a49
   18db0:	000134bd 	.word	0x000134bd
   18db4:	00013765 	.word	0x00013765
   18db8:	0001db19 	.word	0x0001db19
   18dbc:	00020dad 	.word	0x00020dad
   18dc0:	20000a18 	.word	0x20000a18
   18dc4:	00017c69 	.word	0x00017c69
   18dc8:	00014819 	.word	0x00014819
   18dcc:	00014521 	.word	0x00014521
   18dd0:	00013809 	.word	0x00013809
   18dd4:	00013881 	.word	0x00013881
   18dd8:	0002b0d0 	.word	0x0002b0d0
   18ddc:	00029a4d 	.word	0x00029a4d
   18de0:	00012ac9 	.word	0x00012ac9
   18de4:	00014ed9 	.word	0x00014ed9
   18de8:	0001496d 	.word	0x0001496d
   18dec:	00014aed 	.word	0x00014aed
   18df0:	20000963 	.word	0x20000963
   18df4:	00014e61 	.word	0x00014e61
   18df8:	2000099e 	.word	0x2000099e
   18dfc:	20000943 	.word	0x20000943
   18e00:	0001485d 	.word	0x0001485d
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
   18e04:	4b11      	ldr	r3, [pc, #68]	; (18e4c <vTask_GSM_service+0xc34>)
   18e06:	2200      	movs	r2, #0
   18e08:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
   18e0a:	4b11      	ldr	r3, [pc, #68]	; (18e50 <vTask_GSM_service+0xc38>)
   18e0c:	2200      	movs	r2, #0
   18e0e:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
   18e10:	4b10      	ldr	r3, [pc, #64]	; (18e54 <vTask_GSM_service+0xc3c>)
   18e12:	4a10      	ldr	r2, [pc, #64]	; (18e54 <vTask_GSM_service+0xc3c>)
   18e14:	6812      	ldr	r2, [r2, #0]
   18e16:	2180      	movs	r1, #128	; 0x80
   18e18:	0249      	lsls	r1, r1, #9
   18e1a:	430a      	orrs	r2, r1
   18e1c:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
   18e1e:	4b0e      	ldr	r3, [pc, #56]	; (18e58 <vTask_GSM_service+0xc40>)
   18e20:	0018      	movs	r0, r3
   18e22:	4b0e      	ldr	r3, [pc, #56]	; (18e5c <vTask_GSM_service+0xc44>)
   18e24:	4798      	blx	r3
			GSM_PWR_OFF;
   18e26:	4b0b      	ldr	r3, [pc, #44]	; (18e54 <vTask_GSM_service+0xc3c>)
   18e28:	4a0a      	ldr	r2, [pc, #40]	; (18e54 <vTask_GSM_service+0xc3c>)
   18e2a:	6812      	ldr	r2, [r2, #0]
   18e2c:	490c      	ldr	r1, [pc, #48]	; (18e60 <vTask_GSM_service+0xc48>)
   18e2e:	400a      	ands	r2, r1
   18e30:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
   18e32:	4b0c      	ldr	r3, [pc, #48]	; (18e64 <vTask_GSM_service+0xc4c>)
   18e34:	0018      	movs	r0, r3
   18e36:	4b09      	ldr	r3, [pc, #36]	; (18e5c <vTask_GSM_service+0xc44>)
   18e38:	4798      	blx	r3
   18e3a:	f7ff faad 	bl	18398 <vTask_GSM_service+0x180>
							if (gsm_responseLine_isRinging(response))
   18e3e:	46c0      	nop			; (mov r8, r8)
   18e40:	f7ff faaa 	bl	18398 <vTask_GSM_service+0x180>
							if (OutGoingcallState(response) == 'R')
   18e44:	46c0      	nop			; (mov r8, r8)
		if (currentStatus == 'I' || currentStatus == 'R')
   18e46:	f7ff faa7 	bl	18398 <vTask_GSM_service+0x180>
   18e4a:	46c0      	nop			; (mov r8, r8)
   18e4c:	200009c8 	.word	0x200009c8
   18e50:	200009d5 	.word	0x200009d5
   18e54:	41004490 	.word	0x41004490
   18e58:	00000bb8 	.word	0x00000bb8
   18e5c:	00020a49 	.word	0x00020a49
   18e60:	fffeffff 	.word	0xfffeffff
   18e64:	00001388 	.word	0x00001388

00018e68 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
   18e68:	b590      	push	{r4, r7, lr}
   18e6a:	b083      	sub	sp, #12
   18e6c:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)1200,NULL,1,NULL);
   18e6e:	2396      	movs	r3, #150	; 0x96
   18e70:	00da      	lsls	r2, r3, #3
   18e72:	4806      	ldr	r0, [pc, #24]	; (18e8c <start_gsm_service+0x24>)
   18e74:	2300      	movs	r3, #0
   18e76:	9301      	str	r3, [sp, #4]
   18e78:	2301      	movs	r3, #1
   18e7a:	9300      	str	r3, [sp, #0]
   18e7c:	2300      	movs	r3, #0
   18e7e:	2100      	movs	r1, #0
   18e80:	4c03      	ldr	r4, [pc, #12]	; (18e90 <start_gsm_service+0x28>)
   18e82:	47a0      	blx	r4
}
   18e84:	46c0      	nop			; (mov r8, r8)
   18e86:	46bd      	mov	sp, r7
   18e88:	b001      	add	sp, #4
   18e8a:	bd90      	pop	{r4, r7, pc}
   18e8c:	00018219 	.word	0x00018219
   18e90:	00020709 	.word	0x00020709

00018e94 <busy>:

bool busy(void)
{
   18e94:	b580      	push	{r7, lr}
   18e96:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
   18e98:	4b09      	ldr	r3, [pc, #36]	; (18ec0 <busy+0x2c>)
   18e9a:	781b      	ldrb	r3, [r3, #0]
   18e9c:	2b00      	cmp	r3, #0
   18e9e:	d104      	bne.n	18eaa <busy+0x16>
   18ea0:	4b08      	ldr	r3, [pc, #32]	; (18ec4 <busy+0x30>)
   18ea2:	781b      	ldrb	r3, [r3, #0]
   18ea4:	b2db      	uxtb	r3, r3
   18ea6:	2b00      	cmp	r3, #0
   18ea8:	d001      	beq.n	18eae <busy+0x1a>
   18eaa:	2301      	movs	r3, #1
   18eac:	e000      	b.n	18eb0 <busy+0x1c>
   18eae:	2300      	movs	r3, #0
   18eb0:	1c1a      	adds	r2, r3, #0
   18eb2:	2301      	movs	r3, #1
   18eb4:	4013      	ands	r3, r2
   18eb6:	b2db      	uxtb	r3, r3
}
   18eb8:	0018      	movs	r0, r3
   18eba:	46bd      	mov	sp, r7
   18ebc:	bd80      	pop	{r7, pc}
   18ebe:	46c0      	nop			; (mov r8, r8)
   18ec0:	2000099c 	.word	0x2000099c
   18ec4:	2000088e 	.word	0x2000088e

00018ec8 <checkNotInCall>:

bool checkNotInCall(void)
{
   18ec8:	b580      	push	{r7, lr}
   18eca:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
   18ecc:	4b13      	ldr	r3, [pc, #76]	; (18f1c <checkNotInCall+0x54>)
   18ece:	781b      	ldrb	r3, [r3, #0]
   18ed0:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
   18ed2:	2b4e      	cmp	r3, #78	; 0x4e
   18ed4:	d11a      	bne.n	18f0c <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
   18ed6:	4b12      	ldr	r3, [pc, #72]	; (18f20 <checkNotInCall+0x58>)
   18ed8:	781b      	ldrb	r3, [r3, #0]
   18eda:	b2db      	uxtb	r3, r3
   18edc:	2b4e      	cmp	r3, #78	; 0x4e
   18ede:	d115      	bne.n	18f0c <checkNotInCall+0x44>
   18ee0:	4b10      	ldr	r3, [pc, #64]	; (18f24 <checkNotInCall+0x5c>)
   18ee2:	781b      	ldrb	r3, [r3, #0]
   18ee4:	2b00      	cmp	r3, #0
   18ee6:	d011      	beq.n	18f0c <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
   18ee8:	4b0f      	ldr	r3, [pc, #60]	; (18f28 <checkNotInCall+0x60>)
   18eea:	781b      	ldrb	r3, [r3, #0]
   18eec:	2201      	movs	r2, #1
   18eee:	4053      	eors	r3, r2
   18ef0:	b2db      	uxtb	r3, r3
   18ef2:	2b00      	cmp	r3, #0
   18ef4:	d00a      	beq.n	18f0c <checkNotInCall+0x44>
   18ef6:	4b0d      	ldr	r3, [pc, #52]	; (18f2c <checkNotInCall+0x64>)
   18ef8:	4798      	blx	r3
   18efa:	0003      	movs	r3, r0
   18efc:	001a      	movs	r2, r3
   18efe:	2301      	movs	r3, #1
   18f00:	4053      	eors	r3, r2
   18f02:	b2db      	uxtb	r3, r3
   18f04:	2b00      	cmp	r3, #0
   18f06:	d001      	beq.n	18f0c <checkNotInCall+0x44>
   18f08:	2301      	movs	r3, #1
   18f0a:	e000      	b.n	18f0e <checkNotInCall+0x46>
   18f0c:	2300      	movs	r3, #0
   18f0e:	1c1a      	adds	r2, r3, #0
   18f10:	2301      	movs	r3, #1
   18f12:	4013      	ands	r3, r2
   18f14:	b2db      	uxtb	r3, r3
}
   18f16:	0018      	movs	r0, r3
   18f18:	46bd      	mov	sp, r7
   18f1a:	bd80      	pop	{r7, pc}
   18f1c:	200009e0 	.word	0x200009e0
   18f20:	2000098f 	.word	0x2000098f
   18f24:	20000972 	.word	0x20000972
   18f28:	20000944 	.word	0x20000944
   18f2c:	00018e95 	.word	0x00018e95

00018f30 <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
   18f30:	b580      	push	{r7, lr}
   18f32:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
   18f34:	4b21      	ldr	r3, [pc, #132]	; (18fbc <gsm_checkSleepElligible+0x8c>)
   18f36:	78db      	ldrb	r3, [r3, #3]
   18f38:	2b00      	cmp	r3, #0
   18f3a:	d021      	beq.n	18f80 <gsm_checkSleepElligible+0x50>
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !m2mEventStaged && !eventStaged);
   18f3c:	4b20      	ldr	r3, [pc, #128]	; (18fc0 <gsm_checkSleepElligible+0x90>)
   18f3e:	781b      	ldrb	r3, [r3, #0]
   18f40:	b2db      	uxtb	r3, r3
   18f42:	2201      	movs	r2, #1
   18f44:	4053      	eors	r3, r2
   18f46:	b2db      	uxtb	r3, r3
   18f48:	2b00      	cmp	r3, #0
   18f4a:	d013      	beq.n	18f74 <gsm_checkSleepElligible+0x44>
   18f4c:	4b1d      	ldr	r3, [pc, #116]	; (18fc4 <gsm_checkSleepElligible+0x94>)
   18f4e:	4798      	blx	r3
   18f50:	1e03      	subs	r3, r0, #0
   18f52:	d00f      	beq.n	18f74 <gsm_checkSleepElligible+0x44>
   18f54:	4b1c      	ldr	r3, [pc, #112]	; (18fc8 <gsm_checkSleepElligible+0x98>)
   18f56:	781b      	ldrb	r3, [r3, #0]
   18f58:	2201      	movs	r2, #1
   18f5a:	4053      	eors	r3, r2
   18f5c:	b2db      	uxtb	r3, r3
   18f5e:	2b00      	cmp	r3, #0
   18f60:	d008      	beq.n	18f74 <gsm_checkSleepElligible+0x44>
   18f62:	4b1a      	ldr	r3, [pc, #104]	; (18fcc <gsm_checkSleepElligible+0x9c>)
   18f64:	781b      	ldrb	r3, [r3, #0]
   18f66:	2201      	movs	r2, #1
   18f68:	4053      	eors	r3, r2
   18f6a:	b2db      	uxtb	r3, r3
   18f6c:	2b00      	cmp	r3, #0
   18f6e:	d001      	beq.n	18f74 <gsm_checkSleepElligible+0x44>
   18f70:	2301      	movs	r3, #1
   18f72:	e000      	b.n	18f76 <gsm_checkSleepElligible+0x46>
   18f74:	2300      	movs	r3, #0
   18f76:	1c1a      	adds	r2, r3, #0
   18f78:	2301      	movs	r3, #1
   18f7a:	4013      	ands	r3, r2
   18f7c:	b2db      	uxtb	r3, r3
   18f7e:	e019      	b.n	18fb4 <gsm_checkSleepElligible+0x84>
	}
	else
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !eventStaged);
   18f80:	4b0f      	ldr	r3, [pc, #60]	; (18fc0 <gsm_checkSleepElligible+0x90>)
   18f82:	781b      	ldrb	r3, [r3, #0]
   18f84:	b2db      	uxtb	r3, r3
   18f86:	2201      	movs	r2, #1
   18f88:	4053      	eors	r3, r2
   18f8a:	b2db      	uxtb	r3, r3
   18f8c:	2b00      	cmp	r3, #0
   18f8e:	d00c      	beq.n	18faa <gsm_checkSleepElligible+0x7a>
   18f90:	4b0c      	ldr	r3, [pc, #48]	; (18fc4 <gsm_checkSleepElligible+0x94>)
   18f92:	4798      	blx	r3
   18f94:	1e03      	subs	r3, r0, #0
   18f96:	d008      	beq.n	18faa <gsm_checkSleepElligible+0x7a>
   18f98:	4b0c      	ldr	r3, [pc, #48]	; (18fcc <gsm_checkSleepElligible+0x9c>)
   18f9a:	781b      	ldrb	r3, [r3, #0]
   18f9c:	2201      	movs	r2, #1
   18f9e:	4053      	eors	r3, r2
   18fa0:	b2db      	uxtb	r3, r3
   18fa2:	2b00      	cmp	r3, #0
   18fa4:	d001      	beq.n	18faa <gsm_checkSleepElligible+0x7a>
   18fa6:	2301      	movs	r3, #1
   18fa8:	e000      	b.n	18fac <gsm_checkSleepElligible+0x7c>
   18faa:	2300      	movs	r3, #0
   18fac:	1c1a      	adds	r2, r3, #0
   18fae:	2301      	movs	r3, #1
   18fb0:	4013      	ands	r3, r2
   18fb2:	b2db      	uxtb	r3, r3
	}
   18fb4:	0018      	movs	r0, r3
   18fb6:	46bd      	mov	sp, r7
   18fb8:	bd80      	pop	{r7, pc}
   18fba:	46c0      	nop			; (mov r8, r8)
   18fbc:	2000082c 	.word	0x2000082c
   18fc0:	20000884 	.word	0x20000884
   18fc4:	00018ec9 	.word	0x00018ec9
   18fc8:	2000098e 	.word	0x2000098e
   18fcc:	200009d7 	.word	0x200009d7

00018fd0 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
   18fd0:	b590      	push	{r4, r7, lr}
   18fd2:	b095      	sub	sp, #84	; 0x54
   18fd4:	af02      	add	r7, sp, #8
   18fd6:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	gsmStatusChange=true;
   18fd8:	4be4      	ldr	r3, [pc, #912]	; (1936c <lcd_displaying_task+0x39c>)
   18fda:	2201      	movs	r2, #1
   18fdc:	701a      	strb	r2, [r3, #0]
	lcd_in_sleep =false;
   18fde:	4be4      	ldr	r3, [pc, #912]	; (19370 <lcd_displaying_task+0x3a0>)
   18fe0:	2200      	movs	r2, #0
   18fe2:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   18fe4:	4be3      	ldr	r3, [pc, #908]	; (19374 <lcd_displaying_task+0x3a4>)
   18fe6:	2201      	movs	r2, #1
   18fe8:	701a      	strb	r2, [r3, #0]
	LCD_PWR_CONFIG();
   18fea:	4be3      	ldr	r3, [pc, #908]	; (19378 <lcd_displaying_task+0x3a8>)
   18fec:	4798      	blx	r3
	LCD_PWR_EN();
   18fee:	4be3      	ldr	r3, [pc, #908]	; (1937c <lcd_displaying_task+0x3ac>)
   18ff0:	4798      	blx	r3
	vTaskDelay(500);
   18ff2:	23fa      	movs	r3, #250	; 0xfa
   18ff4:	005b      	lsls	r3, r3, #1
   18ff6:	0018      	movs	r0, r3
   18ff8:	4be1      	ldr	r3, [pc, #900]	; (19380 <lcd_displaying_task+0x3b0>)
   18ffa:	4798      	blx	r3
	
	LCD_init();
   18ffc:	4be1      	ldr	r3, [pc, #900]	; (19384 <lcd_displaying_task+0x3b4>)
   18ffe:	4798      	blx	r3
	
	uint8_t screen=1;
   19000:	2347      	movs	r3, #71	; 0x47
   19002:	18fb      	adds	r3, r7, r3
   19004:	2201      	movs	r2, #1
   19006:	701a      	strb	r2, [r3, #0]
	//bool four_sec_timer_is_active = true;
	//bool two_sec_timer_is_active = false;
	
	uint8_t time=0;
   19008:	233a      	movs	r3, #58	; 0x3a
   1900a:	18fb      	adds	r3, r7, r3
   1900c:	2200      	movs	r2, #0
   1900e:	701a      	strb	r2, [r3, #0]
	
	
	
	
	LCD_clear();
   19010:	4bdd      	ldr	r3, [pc, #884]	; (19388 <lcd_displaying_task+0x3b8>)
   19012:	4798      	blx	r3
	LCD_setCursor(0,0);
   19014:	2100      	movs	r1, #0
   19016:	2000      	movs	r0, #0
   19018:	4bdc      	ldr	r3, [pc, #880]	; (1938c <lcd_displaying_task+0x3bc>)
   1901a:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
   1901c:	4bdc      	ldr	r3, [pc, #880]	; (19390 <lcd_displaying_task+0x3c0>)
   1901e:	0018      	movs	r0, r3
   19020:	4bdc      	ldr	r3, [pc, #880]	; (19394 <lcd_displaying_task+0x3c4>)
   19022:	4798      	blx	r3
	LCD_setCursor(0,1);
   19024:	2101      	movs	r1, #1
   19026:	2000      	movs	r0, #0
   19028:	4bd8      	ldr	r3, [pc, #864]	; (1938c <lcd_displaying_task+0x3bc>)
   1902a:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
   1902c:	4bda      	ldr	r3, [pc, #872]	; (19398 <lcd_displaying_task+0x3c8>)
   1902e:	0018      	movs	r0, r3
   19030:	4bd8      	ldr	r3, [pc, #864]	; (19394 <lcd_displaying_task+0x3c4>)
   19032:	4798      	blx	r3
	vTaskDelay(3000);
   19034:	4bd9      	ldr	r3, [pc, #868]	; (1939c <lcd_displaying_task+0x3cc>)
   19036:	0018      	movs	r0, r3
   19038:	4bd1      	ldr	r3, [pc, #836]	; (19380 <lcd_displaying_task+0x3b0>)
   1903a:	4798      	blx	r3
	
	LCD_clear();
   1903c:	4bd2      	ldr	r3, [pc, #840]	; (19388 <lcd_displaying_task+0x3b8>)
   1903e:	4798      	blx	r3
	LCD_setCursor(0,0);
   19040:	2100      	movs	r1, #0
   19042:	2000      	movs	r0, #0
   19044:	4bd1      	ldr	r3, [pc, #836]	; (1938c <lcd_displaying_task+0x3bc>)
   19046:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
   19048:	4bd5      	ldr	r3, [pc, #852]	; (193a0 <lcd_displaying_task+0x3d0>)
   1904a:	0018      	movs	r0, r3
   1904c:	4bd1      	ldr	r3, [pc, #836]	; (19394 <lcd_displaying_task+0x3c4>)
   1904e:	4798      	blx	r3
	LCD_setCursor(0,1);
   19050:	2101      	movs	r1, #1
   19052:	2000      	movs	r0, #0
   19054:	4bcd      	ldr	r3, [pc, #820]	; (1938c <lcd_displaying_task+0x3bc>)
   19056:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
   19058:	4ad2      	ldr	r2, [pc, #840]	; (193a4 <lcd_displaying_task+0x3d4>)
   1905a:	4bd3      	ldr	r3, [pc, #844]	; (193a8 <lcd_displaying_task+0x3d8>)
   1905c:	0011      	movs	r1, r2
   1905e:	0018      	movs	r0, r3
   19060:	4bcc      	ldr	r3, [pc, #816]	; (19394 <lcd_displaying_task+0x3c4>)
   19062:	4798      	blx	r3
	vTaskDelay(2000);
   19064:	23fa      	movs	r3, #250	; 0xfa
   19066:	00db      	lsls	r3, r3, #3
   19068:	0018      	movs	r0, r3
   1906a:	4bc5      	ldr	r3, [pc, #788]	; (19380 <lcd_displaying_task+0x3b0>)
   1906c:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
   1906e:	23fa      	movs	r3, #250	; 0xfa
   19070:	0119      	lsls	r1, r3, #4
   19072:	4bce      	ldr	r3, [pc, #824]	; (193ac <lcd_displaying_task+0x3dc>)
   19074:	9300      	str	r3, [sp, #0]
   19076:	2300      	movs	r3, #0
   19078:	2201      	movs	r2, #1
   1907a:	2000      	movs	r0, #0
   1907c:	4ccc      	ldr	r4, [pc, #816]	; (193b0 <lcd_displaying_task+0x3e0>)
   1907e:	47a0      	blx	r4
   19080:	0002      	movs	r2, r0
   19082:	4bcc      	ldr	r3, [pc, #816]	; (193b4 <lcd_displaying_task+0x3e4>)
   19084:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
   19086:	4bcb      	ldr	r3, [pc, #812]	; (193b4 <lcd_displaying_task+0x3e4>)
   19088:	681c      	ldr	r4, [r3, #0]
   1908a:	4bcb      	ldr	r3, [pc, #812]	; (193b8 <lcd_displaying_task+0x3e8>)
   1908c:	4798      	blx	r3
   1908e:	0002      	movs	r2, r0
   19090:	2300      	movs	r3, #0
   19092:	9300      	str	r3, [sp, #0]
   19094:	2300      	movs	r3, #0
   19096:	2101      	movs	r1, #1
   19098:	0020      	movs	r0, r4
   1909a:	4cc8      	ldr	r4, [pc, #800]	; (193bc <lcd_displaying_task+0x3ec>)
   1909c:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
   1909e:	4bb4      	ldr	r3, [pc, #720]	; (19370 <lcd_displaying_task+0x3a0>)
   190a0:	781b      	ldrb	r3, [r3, #0]
   190a2:	b2db      	uxtb	r3, r3
   190a4:	2b00      	cmp	r3, #0
   190a6:	d009      	beq.n	190bc <lcd_displaying_task+0xec>
		{
			lcd_in_sleep = false;
   190a8:	4bb1      	ldr	r3, [pc, #708]	; (19370 <lcd_displaying_task+0x3a0>)
   190aa:	2200      	movs	r2, #0
   190ac:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
   190ae:	4bb3      	ldr	r3, [pc, #716]	; (1937c <lcd_displaying_task+0x3ac>)
   190b0:	4798      	blx	r3
			vTaskDelay(100);
   190b2:	2064      	movs	r0, #100	; 0x64
   190b4:	4bb2      	ldr	r3, [pc, #712]	; (19380 <lcd_displaying_task+0x3b0>)
   190b6:	4798      	blx	r3
			LCD_init();
   190b8:	4bb2      	ldr	r3, [pc, #712]	; (19384 <lcd_displaying_task+0x3b4>)
   190ba:	4798      	blx	r3
		}
		
		if(setNetworkCharacter)
   190bc:	4bad      	ldr	r3, [pc, #692]	; (19374 <lcd_displaying_task+0x3a4>)
   190be:	781b      	ldrb	r3, [r3, #0]
   190c0:	b2db      	uxtb	r3, r3
   190c2:	2b00      	cmp	r3, #0
   190c4:	d047      	beq.n	19156 <lcd_displaying_task+0x186>
		{
			setNetworkCharacter=false;
   190c6:	4bab      	ldr	r3, [pc, #684]	; (19374 <lcd_displaying_task+0x3a4>)
   190c8:	2200      	movs	r2, #0
   190ca:	701a      	strb	r2, [r3, #0]
			byte Network_0[8]={
   190cc:	2330      	movs	r3, #48	; 0x30
   190ce:	18fb      	adds	r3, r7, r3
   190d0:	0018      	movs	r0, r3
   190d2:	2308      	movs	r3, #8
   190d4:	001a      	movs	r2, r3
   190d6:	2100      	movs	r1, #0
   190d8:	4bb9      	ldr	r3, [pc, #740]	; (193c0 <lcd_displaying_task+0x3f0>)
   190da:	4798      	blx	r3
				0B00000,
				0B00000,
				0B00000
			};
			
			byte Network_1[8]={
   190dc:	2328      	movs	r3, #40	; 0x28
   190de:	18fb      	adds	r3, r7, r3
   190e0:	4ab8      	ldr	r2, [pc, #736]	; (193c4 <lcd_displaying_task+0x3f4>)
   190e2:	ca03      	ldmia	r2!, {r0, r1}
   190e4:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B00000,
				0B11111,
				0B11111
			};
			byte Network_2[8]={
   190e6:	2320      	movs	r3, #32
   190e8:	18fb      	adds	r3, r7, r3
   190ea:	4ab7      	ldr	r2, [pc, #732]	; (193c8 <lcd_displaying_task+0x3f8>)
   190ec:	ca03      	ldmia	r2!, {r0, r1}
   190ee:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_3[8]={
   190f0:	2318      	movs	r3, #24
   190f2:	18fb      	adds	r3, r7, r3
   190f4:	4ab5      	ldr	r2, [pc, #724]	; (193cc <lcd_displaying_task+0x3fc>)
   190f6:	ca03      	ldmia	r2!, {r0, r1}
   190f8:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_4[8]={
   190fa:	2310      	movs	r3, #16
   190fc:	18fb      	adds	r3, r7, r3
   190fe:	4ab4      	ldr	r2, [pc, #720]	; (193d0 <lcd_displaying_task+0x400>)
   19100:	ca03      	ldmia	r2!, {r0, r1}
   19102:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};

			byte Network_5[8]={
   19104:	2308      	movs	r3, #8
   19106:	18fb      	adds	r3, r7, r3
   19108:	4ab2      	ldr	r2, [pc, #712]	; (193d4 <lcd_displaying_task+0x404>)
   1910a:	ca03      	ldmia	r2!, {r0, r1}
   1910c:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};
			
			LCD_Create_Custom_createChar(0,Network_0);
   1910e:	2330      	movs	r3, #48	; 0x30
   19110:	18fb      	adds	r3, r7, r3
   19112:	0019      	movs	r1, r3
   19114:	2000      	movs	r0, #0
   19116:	4bb0      	ldr	r3, [pc, #704]	; (193d8 <lcd_displaying_task+0x408>)
   19118:	4798      	blx	r3
			LCD_Create_Custom_createChar(1,Network_1);
   1911a:	2328      	movs	r3, #40	; 0x28
   1911c:	18fb      	adds	r3, r7, r3
   1911e:	0019      	movs	r1, r3
   19120:	2001      	movs	r0, #1
   19122:	4bad      	ldr	r3, [pc, #692]	; (193d8 <lcd_displaying_task+0x408>)
   19124:	4798      	blx	r3
			LCD_Create_Custom_createChar(2,Network_2);
   19126:	2320      	movs	r3, #32
   19128:	18fb      	adds	r3, r7, r3
   1912a:	0019      	movs	r1, r3
   1912c:	2002      	movs	r0, #2
   1912e:	4baa      	ldr	r3, [pc, #680]	; (193d8 <lcd_displaying_task+0x408>)
   19130:	4798      	blx	r3
			LCD_Create_Custom_createChar(3,Network_3);
   19132:	2318      	movs	r3, #24
   19134:	18fb      	adds	r3, r7, r3
   19136:	0019      	movs	r1, r3
   19138:	2003      	movs	r0, #3
   1913a:	4ba7      	ldr	r3, [pc, #668]	; (193d8 <lcd_displaying_task+0x408>)
   1913c:	4798      	blx	r3
			LCD_Create_Custom_createChar(4,Network_4);
   1913e:	2310      	movs	r3, #16
   19140:	18fb      	adds	r3, r7, r3
   19142:	0019      	movs	r1, r3
   19144:	2004      	movs	r0, #4
   19146:	4ba4      	ldr	r3, [pc, #656]	; (193d8 <lcd_displaying_task+0x408>)
   19148:	4798      	blx	r3
			LCD_Create_Custom_createChar(5,Network_5);
   1914a:	2308      	movs	r3, #8
   1914c:	18fb      	adds	r3, r7, r3
   1914e:	0019      	movs	r1, r3
   19150:	2005      	movs	r0, #5
   19152:	4ba1      	ldr	r3, [pc, #644]	; (193d8 <lcd_displaying_task+0x408>)
   19154:	4798      	blx	r3
		}
		
		
		if(firstEvent)
   19156:	4ba1      	ldr	r3, [pc, #644]	; (193dc <lcd_displaying_task+0x40c>)
   19158:	781b      	ldrb	r3, [r3, #0]
   1915a:	b2db      	uxtb	r3, r3
   1915c:	2b00      	cmp	r3, #0
   1915e:	d014      	beq.n	1918a <lcd_displaying_task+0x1ba>
		{
			LCD_setCursor(0,0);
   19160:	2100      	movs	r1, #0
   19162:	2000      	movs	r0, #0
   19164:	4b89      	ldr	r3, [pc, #548]	; (1938c <lcd_displaying_task+0x3bc>)
   19166:	4798      	blx	r3
			lcd_printf("Initializing... ");
   19168:	4b9d      	ldr	r3, [pc, #628]	; (193e0 <lcd_displaying_task+0x410>)
   1916a:	0018      	movs	r0, r3
   1916c:	4b89      	ldr	r3, [pc, #548]	; (19394 <lcd_displaying_task+0x3c4>)
   1916e:	4798      	blx	r3
			LCD_setCursor(0,1);
   19170:	2101      	movs	r1, #1
   19172:	2000      	movs	r0, #0
   19174:	4b85      	ldr	r3, [pc, #532]	; (1938c <lcd_displaying_task+0x3bc>)
   19176:	4798      	blx	r3
			lcd_printf("COMMANDER v2    ");
   19178:	4b9a      	ldr	r3, [pc, #616]	; (193e4 <lcd_displaying_task+0x414>)
   1917a:	0018      	movs	r0, r3
   1917c:	4b85      	ldr	r3, [pc, #532]	; (19394 <lcd_displaying_task+0x3c4>)
   1917e:	4798      	blx	r3
			screen=1;
   19180:	2347      	movs	r3, #71	; 0x47
   19182:	18fb      	adds	r3, r7, r3
   19184:	2201      	movs	r2, #1
   19186:	701a      	strb	r2, [r3, #0]
   19188:	e2fd      	b.n	19786 <lcd_displaying_task+0x7b6>
		}
		else
		{
			if(gsmStatusChange)
   1918a:	4b78      	ldr	r3, [pc, #480]	; (1936c <lcd_displaying_task+0x39c>)
   1918c:	781b      	ldrb	r3, [r3, #0]
   1918e:	b2db      	uxtb	r3, r3
   19190:	2b00      	cmp	r3, #0
   19192:	d025      	beq.n	191e0 <lcd_displaying_task+0x210>
			{
				LCD_setCursor(0,0);
   19194:	2100      	movs	r1, #0
   19196:	2000      	movs	r0, #0
   19198:	4b7c      	ldr	r3, [pc, #496]	; (1938c <lcd_displaying_task+0x3bc>)
   1919a:	4798      	blx	r3
				lcd_printf("PHONE STATUS    ");
   1919c:	4b92      	ldr	r3, [pc, #584]	; (193e8 <lcd_displaying_task+0x418>)
   1919e:	0018      	movs	r0, r3
   191a0:	4b7c      	ldr	r3, [pc, #496]	; (19394 <lcd_displaying_task+0x3c4>)
   191a2:	4798      	blx	r3
				if(boolGsm_config_flag)
   191a4:	4b91      	ldr	r3, [pc, #580]	; (193ec <lcd_displaying_task+0x41c>)
   191a6:	781b      	ldrb	r3, [r3, #0]
   191a8:	b2db      	uxtb	r3, r3
   191aa:	2b00      	cmp	r3, #0
   191ac:	d008      	beq.n	191c0 <lcd_displaying_task+0x1f0>
				{
					LCD_setCursor(0,1);
   191ae:	2101      	movs	r1, #1
   191b0:	2000      	movs	r0, #0
   191b2:	4b76      	ldr	r3, [pc, #472]	; (1938c <lcd_displaying_task+0x3bc>)
   191b4:	4798      	blx	r3
					lcd_printf("ON              ");
   191b6:	4b8e      	ldr	r3, [pc, #568]	; (193f0 <lcd_displaying_task+0x420>)
   191b8:	0018      	movs	r0, r3
   191ba:	4b76      	ldr	r3, [pc, #472]	; (19394 <lcd_displaying_task+0x3c4>)
   191bc:	4798      	blx	r3
   191be:	e007      	b.n	191d0 <lcd_displaying_task+0x200>
				}
				else
				{
					LCD_setCursor(0,1);
   191c0:	2101      	movs	r1, #1
   191c2:	2000      	movs	r0, #0
   191c4:	4b71      	ldr	r3, [pc, #452]	; (1938c <lcd_displaying_task+0x3bc>)
   191c6:	4798      	blx	r3
					lcd_printf("OFF             ");
   191c8:	4b8a      	ldr	r3, [pc, #552]	; (193f4 <lcd_displaying_task+0x424>)
   191ca:	0018      	movs	r0, r3
   191cc:	4b71      	ldr	r3, [pc, #452]	; (19394 <lcd_displaying_task+0x3c4>)
   191ce:	4798      	blx	r3
				}
				gsmStatusChange = false;
   191d0:	4b66      	ldr	r3, [pc, #408]	; (1936c <lcd_displaying_task+0x39c>)
   191d2:	2200      	movs	r2, #0
   191d4:	701a      	strb	r2, [r3, #0]
				vTaskDelay(2000/portTICK_PERIOD_MS);
   191d6:	23fa      	movs	r3, #250	; 0xfa
   191d8:	00db      	lsls	r3, r3, #3
   191da:	0018      	movs	r0, r3
   191dc:	4b68      	ldr	r3, [pc, #416]	; (19380 <lcd_displaying_task+0x3b0>)
   191de:	4798      	blx	r3
			}
			
			switch(screen)
   191e0:	2347      	movs	r3, #71	; 0x47
   191e2:	18fb      	adds	r3, r7, r3
   191e4:	781b      	ldrb	r3, [r3, #0]
   191e6:	2b0a      	cmp	r3, #10
   191e8:	d900      	bls.n	191ec <lcd_displaying_task+0x21c>
   191ea:	e2cc      	b.n	19786 <lcd_displaying_task+0x7b6>
   191ec:	009a      	lsls	r2, r3, #2
   191ee:	4b82      	ldr	r3, [pc, #520]	; (193f8 <lcd_displaying_task+0x428>)
   191f0:	18d3      	adds	r3, r2, r3
   191f2:	681b      	ldr	r3, [r3, #0]
   191f4:	469f      	mov	pc, r3
			{
				case  1:
				{
					LCD_setCursor(0,0);
   191f6:	2100      	movs	r1, #0
   191f8:	2000      	movs	r0, #0
   191fa:	4b64      	ldr	r3, [pc, #400]	; (1938c <lcd_displaying_task+0x3bc>)
   191fc:	4798      	blx	r3
					lcd_printf("VRY   VYB   VBR ");
   191fe:	4b7f      	ldr	r3, [pc, #508]	; (193fc <lcd_displaying_task+0x42c>)
   19200:	0018      	movs	r0, r3
   19202:	4b64      	ldr	r3, [pc, #400]	; (19394 <lcd_displaying_task+0x3c4>)
   19204:	4798      	blx	r3
					LCD_setCursor(0,1);
   19206:	2101      	movs	r1, #1
   19208:	2000      	movs	r0, #0
   1920a:	4b60      	ldr	r3, [pc, #384]	; (1938c <lcd_displaying_task+0x3bc>)
   1920c:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
   1920e:	4b7c      	ldr	r3, [pc, #496]	; (19400 <lcd_displaying_task+0x430>)
   19210:	681a      	ldr	r2, [r3, #0]
   19212:	4b7c      	ldr	r3, [pc, #496]	; (19404 <lcd_displaying_task+0x434>)
   19214:	0011      	movs	r1, r2
   19216:	0018      	movs	r0, r3
   19218:	4b5e      	ldr	r3, [pc, #376]	; (19394 <lcd_displaying_task+0x3c4>)
   1921a:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
   1921c:	4b78      	ldr	r3, [pc, #480]	; (19400 <lcd_displaying_task+0x430>)
   1921e:	685a      	ldr	r2, [r3, #4]
   19220:	4b78      	ldr	r3, [pc, #480]	; (19404 <lcd_displaying_task+0x434>)
   19222:	0011      	movs	r1, r2
   19224:	0018      	movs	r0, r3
   19226:	4b5b      	ldr	r3, [pc, #364]	; (19394 <lcd_displaying_task+0x3c4>)
   19228:	4798      	blx	r3
					lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
   1922a:	4b75      	ldr	r3, [pc, #468]	; (19400 <lcd_displaying_task+0x430>)
   1922c:	689a      	ldr	r2, [r3, #8]
   1922e:	4b76      	ldr	r3, [pc, #472]	; (19408 <lcd_displaying_task+0x438>)
   19230:	0011      	movs	r1, r2
   19232:	0018      	movs	r0, r3
   19234:	4b57      	ldr	r3, [pc, #348]	; (19394 <lcd_displaying_task+0x3c4>)
   19236:	4798      	blx	r3
					break;
   19238:	e2a5      	b.n	19786 <lcd_displaying_task+0x7b6>
				}
				case 2:
				{
					LCD_setCursor(0,0);
   1923a:	2100      	movs	r1, #0
   1923c:	2000      	movs	r0, #0
   1923e:	4b53      	ldr	r3, [pc, #332]	; (1938c <lcd_displaying_task+0x3bc>)
   19240:	4798      	blx	r3
					lcd_printf("3 PHASE SEQ:");
   19242:	4b72      	ldr	r3, [pc, #456]	; (1940c <lcd_displaying_task+0x43c>)
   19244:	0018      	movs	r0, r3
   19246:	4b53      	ldr	r3, [pc, #332]	; (19394 <lcd_displaying_task+0x3c4>)
   19248:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1924a:	4b71      	ldr	r3, [pc, #452]	; (19410 <lcd_displaying_task+0x440>)
   1924c:	781b      	ldrb	r3, [r3, #0]
   1924e:	b2db      	uxtb	r3, r3
   19250:	2b02      	cmp	r3, #2
   19252:	d104      	bne.n	1925e <lcd_displaying_task+0x28e>
					{
						lcd_printf(" OK ");
   19254:	4b6f      	ldr	r3, [pc, #444]	; (19414 <lcd_displaying_task+0x444>)
   19256:	0018      	movs	r0, r3
   19258:	4b4e      	ldr	r3, [pc, #312]	; (19394 <lcd_displaying_task+0x3c4>)
   1925a:	4798      	blx	r3
   1925c:	e003      	b.n	19266 <lcd_displaying_task+0x296>
					}
					else
					{
						lcd_printf(" ERR");
   1925e:	4b6e      	ldr	r3, [pc, #440]	; (19418 <lcd_displaying_task+0x448>)
   19260:	0018      	movs	r0, r3
   19262:	4b4c      	ldr	r3, [pc, #304]	; (19394 <lcd_displaying_task+0x3c4>)
   19264:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   19266:	2101      	movs	r1, #1
   19268:	2000      	movs	r0, #0
   1926a:	4b48      	ldr	r3, [pc, #288]	; (1938c <lcd_displaying_task+0x3bc>)
   1926c:	4798      	blx	r3
					lcd_printf("PHASE STATE:");
   1926e:	4b6b      	ldr	r3, [pc, #428]	; (1941c <lcd_displaying_task+0x44c>)
   19270:	0018      	movs	r0, r3
   19272:	4b48      	ldr	r3, [pc, #288]	; (19394 <lcd_displaying_task+0x3c4>)
   19274:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
   19276:	4b66      	ldr	r3, [pc, #408]	; (19410 <lcd_displaying_task+0x440>)
   19278:	785b      	ldrb	r3, [r3, #1]
   1927a:	b2db      	uxtb	r3, r3
   1927c:	2b03      	cmp	r3, #3
   1927e:	d104      	bne.n	1928a <lcd_displaying_task+0x2ba>
					{
						lcd_printf(" 3PH ");
   19280:	4b67      	ldr	r3, [pc, #412]	; (19420 <lcd_displaying_task+0x450>)
   19282:	0018      	movs	r0, r3
   19284:	4b43      	ldr	r3, [pc, #268]	; (19394 <lcd_displaying_task+0x3c4>)
   19286:	4798      	blx	r3
					}
					else
					{
						lcd_printf(" OFF");
					}
					break;
   19288:	e27d      	b.n	19786 <lcd_displaying_task+0x7b6>
					else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
   1928a:	4b61      	ldr	r3, [pc, #388]	; (19410 <lcd_displaying_task+0x440>)
   1928c:	785b      	ldrb	r3, [r3, #1]
   1928e:	b2db      	uxtb	r3, r3
   19290:	2b02      	cmp	r3, #2
   19292:	d104      	bne.n	1929e <lcd_displaying_task+0x2ce>
						lcd_printf(" 2PH ");
   19294:	4b63      	ldr	r3, [pc, #396]	; (19424 <lcd_displaying_task+0x454>)
   19296:	0018      	movs	r0, r3
   19298:	4b3e      	ldr	r3, [pc, #248]	; (19394 <lcd_displaying_task+0x3c4>)
   1929a:	4798      	blx	r3
					break;
   1929c:	e273      	b.n	19786 <lcd_displaying_task+0x7b6>
						lcd_printf(" OFF");
   1929e:	4b62      	ldr	r3, [pc, #392]	; (19428 <lcd_displaying_task+0x458>)
   192a0:	0018      	movs	r0, r3
   192a2:	4b3c      	ldr	r3, [pc, #240]	; (19394 <lcd_displaying_task+0x3c4>)
   192a4:	4798      	blx	r3
					break;
   192a6:	e26e      	b.n	19786 <lcd_displaying_task+0x7b6>
				}
				case  3:
				{
					LCD_setCursor(0,0);
   192a8:	2100      	movs	r1, #0
   192aa:	2000      	movs	r0, #0
   192ac:	4b37      	ldr	r3, [pc, #220]	; (1938c <lcd_displaying_task+0x3bc>)
   192ae:	4798      	blx	r3
					if(!getMotorState())
   192b0:	4b5e      	ldr	r3, [pc, #376]	; (1942c <lcd_displaying_task+0x45c>)
   192b2:	4798      	blx	r3
   192b4:	0003      	movs	r3, r0
   192b6:	001a      	movs	r2, r3
   192b8:	2301      	movs	r3, #1
   192ba:	4053      	eors	r3, r2
   192bc:	b2db      	uxtb	r3, r3
   192be:	2b00      	cmp	r3, #0
   192c0:	d004      	beq.n	192cc <lcd_displaying_task+0x2fc>
					{
						lcd_printf("MOTOR :  OFF    ");
   192c2:	4b5b      	ldr	r3, [pc, #364]	; (19430 <lcd_displaying_task+0x460>)
   192c4:	0018      	movs	r0, r3
   192c6:	4b33      	ldr	r3, [pc, #204]	; (19394 <lcd_displaying_task+0x3c4>)
   192c8:	4798      	blx	r3
   192ca:	e003      	b.n	192d4 <lcd_displaying_task+0x304>
					}
					else
					{
						lcd_printf("MOTOR :  ON     ");
   192cc:	4b59      	ldr	r3, [pc, #356]	; (19434 <lcd_displaying_task+0x464>)
   192ce:	0018      	movs	r0, r3
   192d0:	4b30      	ldr	r3, [pc, #192]	; (19394 <lcd_displaying_task+0x3c4>)
   192d2:	4798      	blx	r3
					}
					
					LCD_setCursor(0,1);
   192d4:	2101      	movs	r1, #1
   192d6:	2000      	movs	r0, #0
   192d8:	4b2c      	ldr	r3, [pc, #176]	; (1938c <lcd_displaying_task+0x3bc>)
   192da:	4798      	blx	r3
					lcd_printf("                ");
   192dc:	4b56      	ldr	r3, [pc, #344]	; (19438 <lcd_displaying_task+0x468>)
   192de:	0018      	movs	r0, r3
   192e0:	4b2c      	ldr	r3, [pc, #176]	; (19394 <lcd_displaying_task+0x3c4>)
   192e2:	4798      	blx	r3
					if(user_settings_parameter_struct.autoStartAddress)
   192e4:	4b55      	ldr	r3, [pc, #340]	; (1943c <lcd_displaying_task+0x46c>)
   192e6:	785b      	ldrb	r3, [r3, #1]
   192e8:	b2db      	uxtb	r3, r3
   192ea:	2b00      	cmp	r3, #0
   192ec:	d004      	beq.n	192f8 <lcd_displaying_task+0x328>
					{
						lcd_printf("AUTO  :  ON     ");
   192ee:	4b54      	ldr	r3, [pc, #336]	; (19440 <lcd_displaying_task+0x470>)
   192f0:	0018      	movs	r0, r3
   192f2:	4b28      	ldr	r3, [pc, #160]	; (19394 <lcd_displaying_task+0x3c4>)
   192f4:	4798      	blx	r3
					//LCD_setCursor(0,0);
					//lcd_printf("MOTOR WATTAGE:  ");
					//LCD_setCursor(0,1);
					//lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
					//}
					break;
   192f6:	e246      	b.n	19786 <lcd_displaying_task+0x7b6>
						lcd_printf("AUTO  :  OFF    ");
   192f8:	4b52      	ldr	r3, [pc, #328]	; (19444 <lcd_displaying_task+0x474>)
   192fa:	0018      	movs	r0, r3
   192fc:	4b25      	ldr	r3, [pc, #148]	; (19394 <lcd_displaying_task+0x3c4>)
   192fe:	4798      	blx	r3
					break;
   19300:	e241      	b.n	19786 <lcd_displaying_task+0x7b6>
				}
				case  4:
				{
					LCD_setCursor(0,0);
   19302:	2100      	movs	r1, #0
   19304:	2000      	movs	r0, #0
   19306:	4b21      	ldr	r3, [pc, #132]	; (1938c <lcd_displaying_task+0x3bc>)
   19308:	4798      	blx	r3
					lcd_printf("MOTOR CURRENT:  ");
   1930a:	4b4f      	ldr	r3, [pc, #316]	; (19448 <lcd_displaying_task+0x478>)
   1930c:	0018      	movs	r0, r3
   1930e:	4b21      	ldr	r3, [pc, #132]	; (19394 <lcd_displaying_task+0x3c4>)
   19310:	4798      	blx	r3
					LCD_setCursor(0,1);
   19312:	2101      	movs	r1, #1
   19314:	2000      	movs	r0, #0
   19316:	4b1d      	ldr	r3, [pc, #116]	; (1938c <lcd_displaying_task+0x3bc>)
   19318:	4798      	blx	r3
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
   1931a:	4b39      	ldr	r3, [pc, #228]	; (19400 <lcd_displaying_task+0x430>)
   1931c:	8a9b      	ldrh	r3, [r3, #20]
   1931e:	b29b      	uxth	r3, r3
   19320:	0019      	movs	r1, r3
   19322:	4b37      	ldr	r3, [pc, #220]	; (19400 <lcd_displaying_task+0x430>)
   19324:	8adb      	ldrh	r3, [r3, #22]
   19326:	b29b      	uxth	r3, r3
   19328:	001a      	movs	r2, r3
   1932a:	4b48      	ldr	r3, [pc, #288]	; (1944c <lcd_displaying_task+0x47c>)
   1932c:	0018      	movs	r0, r3
   1932e:	4b19      	ldr	r3, [pc, #100]	; (19394 <lcd_displaying_task+0x3c4>)
   19330:	4798      	blx	r3
					break;
   19332:	e228      	b.n	19786 <lcd_displaying_task+0x7b6>
				}
				case 5:
				{
					LCD_setCursor(0,0);
   19334:	2100      	movs	r1, #0
   19336:	2000      	movs	r0, #0
   19338:	4b14      	ldr	r3, [pc, #80]	; (1938c <lcd_displaying_task+0x3bc>)
   1933a:	4798      	blx	r3
					lcd_printf("CURRENT SETTING ");
   1933c:	4b44      	ldr	r3, [pc, #272]	; (19450 <lcd_displaying_task+0x480>)
   1933e:	0018      	movs	r0, r3
   19340:	4b14      	ldr	r3, [pc, #80]	; (19394 <lcd_displaying_task+0x3c4>)
   19342:	4798      	blx	r3
					LCD_setCursor(0,1);
   19344:	2101      	movs	r1, #1
   19346:	2000      	movs	r0, #0
   19348:	4b10      	ldr	r3, [pc, #64]	; (1938c <lcd_displaying_task+0x3bc>)
   1934a:	4798      	blx	r3
					if(user_settings_parameter_struct.currentDetectionAddress)
   1934c:	4b3b      	ldr	r3, [pc, #236]	; (1943c <lcd_displaying_task+0x46c>)
   1934e:	7bdb      	ldrb	r3, [r3, #15]
   19350:	b2db      	uxtb	r3, r3
   19352:	2b00      	cmp	r3, #0
   19354:	d004      	beq.n	19360 <lcd_displaying_task+0x390>
					{
						lcd_printf("ON              ");
   19356:	4b26      	ldr	r3, [pc, #152]	; (193f0 <lcd_displaying_task+0x420>)
   19358:	0018      	movs	r0, r3
   1935a:	4b0e      	ldr	r3, [pc, #56]	; (19394 <lcd_displaying_task+0x3c4>)
   1935c:	4798      	blx	r3
					}
					else
					{
						lcd_printf("OFF             ");
					}
					break;
   1935e:	e212      	b.n	19786 <lcd_displaying_task+0x7b6>
						lcd_printf("OFF             ");
   19360:	4b24      	ldr	r3, [pc, #144]	; (193f4 <lcd_displaying_task+0x424>)
   19362:	0018      	movs	r0, r3
   19364:	4b0b      	ldr	r3, [pc, #44]	; (19394 <lcd_displaying_task+0x3c4>)
   19366:	4798      	blx	r3
					break;
   19368:	e20d      	b.n	19786 <lcd_displaying_task+0x7b6>
   1936a:	46c0      	nop			; (mov r8, r8)
   1936c:	200008de 	.word	0x200008de
   19370:	20000a68 	.word	0x20000a68
   19374:	20000a69 	.word	0x20000a69
   19378:	00013ca1 	.word	0x00013ca1
   1937c:	00013cd5 	.word	0x00013cd5
   19380:	00020a49 	.word	0x00020a49
   19384:	000139dd 	.word	0x000139dd
   19388:	00013f6d 	.word	0x00013f6d
   1938c:	0001403d 	.word	0x0001403d
   19390:	0002b120 	.word	0x0002b120
   19394:	00014139 	.word	0x00014139
   19398:	0002b134 	.word	0x0002b134
   1939c:	00000bb8 	.word	0x00000bb8
   193a0:	0002b148 	.word	0x0002b148
   193a4:	0002b15c 	.word	0x0002b15c
   193a8:	0002b170 	.word	0x0002b170
   193ac:	00019939 	.word	0x00019939
   193b0:	00021969 	.word	0x00021969
   193b4:	2000042c 	.word	0x2000042c
   193b8:	00020dad 	.word	0x00020dad
   193bc:	00021a0d 	.word	0x00021a0d
   193c0:	0002975b 	.word	0x0002975b
   193c4:	0002b3fc 	.word	0x0002b3fc
   193c8:	0002b404 	.word	0x0002b404
   193cc:	0002b40c 	.word	0x0002b40c
   193d0:	0002b414 	.word	0x0002b414
   193d4:	0002b41c 	.word	0x0002b41c
   193d8:	00013fdd 	.word	0x00013fdd
   193dc:	20000976 	.word	0x20000976
   193e0:	0002b174 	.word	0x0002b174
   193e4:	0002b188 	.word	0x0002b188
   193e8:	0002b19c 	.word	0x0002b19c
   193ec:	200009c8 	.word	0x200009c8
   193f0:	0002b1b0 	.word	0x0002b1b0
   193f4:	0002b1c4 	.word	0x0002b1c4
   193f8:	0002b424 	.word	0x0002b424
   193fc:	0002b1d8 	.word	0x0002b1d8
   19400:	200008e8 	.word	0x200008e8
   19404:	0002b1ec 	.word	0x0002b1ec
   19408:	0002b1f8 	.word	0x0002b1f8
   1940c:	0002b200 	.word	0x0002b200
   19410:	20000948 	.word	0x20000948
   19414:	0002b210 	.word	0x0002b210
   19418:	0002b218 	.word	0x0002b218
   1941c:	0002b220 	.word	0x0002b220
   19420:	0002b230 	.word	0x0002b230
   19424:	0002b238 	.word	0x0002b238
   19428:	0002b240 	.word	0x0002b240
   1942c:	0001bbf1 	.word	0x0001bbf1
   19430:	0002b248 	.word	0x0002b248
   19434:	0002b25c 	.word	0x0002b25c
   19438:	0002b270 	.word	0x0002b270
   1943c:	20000854 	.word	0x20000854
   19440:	0002b284 	.word	0x0002b284
   19444:	0002b298 	.word	0x0002b298
   19448:	0002b2ac 	.word	0x0002b2ac
   1944c:	0002b2c0 	.word	0x0002b2c0
   19450:	0002b2d8 	.word	0x0002b2d8
				}
				case 6:
				{
					if(user_settings_parameter_struct.currentDetectionAddress)
   19454:	4baa      	ldr	r3, [pc, #680]	; (19700 <lcd_displaying_task+0x730>)
   19456:	7bdb      	ldrb	r3, [r3, #15]
   19458:	b2db      	uxtb	r3, r3
   1945a:	2b00      	cmp	r3, #0
   1945c:	d100      	bne.n	19460 <lcd_displaying_task+0x490>
   1945e:	e14a      	b.n	196f6 <lcd_displaying_task+0x726>
					{
						LCD_setCursor(0,0);
   19460:	2100      	movs	r1, #0
   19462:	2000      	movs	r0, #0
   19464:	4ba7      	ldr	r3, [pc, #668]	; (19704 <lcd_displaying_task+0x734>)
   19466:	4798      	blx	r3
						//lcd_printf("                ");
						uint32_t temp_Int = user_settings_parameter_struct.overloadAddress / 100;
   19468:	4ba5      	ldr	r3, [pc, #660]	; (19700 <lcd_displaying_task+0x730>)
   1946a:	695a      	ldr	r2, [r3, #20]
   1946c:	4ba6      	ldr	r3, [pc, #664]	; (19708 <lcd_displaying_task+0x738>)
   1946e:	2164      	movs	r1, #100	; 0x64
   19470:	0010      	movs	r0, r2
   19472:	4798      	blx	r3
   19474:	0003      	movs	r3, r0
   19476:	643b      	str	r3, [r7, #64]	; 0x40
						uint32_t temp_Dec = user_settings_parameter_struct.overloadAddress % 100;
   19478:	4ba1      	ldr	r3, [pc, #644]	; (19700 <lcd_displaying_task+0x730>)
   1947a:	695a      	ldr	r2, [r3, #20]
   1947c:	4ba3      	ldr	r3, [pc, #652]	; (1970c <lcd_displaying_task+0x73c>)
   1947e:	2164      	movs	r1, #100	; 0x64
   19480:	0010      	movs	r0, r2
   19482:	4798      	blx	r3
   19484:	000b      	movs	r3, r1
   19486:	63fb      	str	r3, [r7, #60]	; 0x3c
						lcd_printf("OVER  : %03lu.%02lu  ",temp_Int,temp_Dec);
   19488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1948a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1948c:	4ba0      	ldr	r3, [pc, #640]	; (19710 <lcd_displaying_task+0x740>)
   1948e:	0018      	movs	r0, r3
   19490:	4ba0      	ldr	r3, [pc, #640]	; (19714 <lcd_displaying_task+0x744>)
   19492:	4798      	blx	r3
						LCD_setCursor(0,1);
   19494:	2101      	movs	r1, #1
   19496:	2000      	movs	r0, #0
   19498:	4b9a      	ldr	r3, [pc, #616]	; (19704 <lcd_displaying_task+0x734>)
   1949a:	4798      	blx	r3
						//lcd_printf("                ");
						temp_Int = user_settings_parameter_struct.underloadAddress / 100;
   1949c:	4b98      	ldr	r3, [pc, #608]	; (19700 <lcd_displaying_task+0x730>)
   1949e:	699a      	ldr	r2, [r3, #24]
   194a0:	4b99      	ldr	r3, [pc, #612]	; (19708 <lcd_displaying_task+0x738>)
   194a2:	2164      	movs	r1, #100	; 0x64
   194a4:	0010      	movs	r0, r2
   194a6:	4798      	blx	r3
   194a8:	0003      	movs	r3, r0
   194aa:	643b      	str	r3, [r7, #64]	; 0x40
						temp_Dec = user_settings_parameter_struct.underloadAddress % 100;
   194ac:	4b94      	ldr	r3, [pc, #592]	; (19700 <lcd_displaying_task+0x730>)
   194ae:	699a      	ldr	r2, [r3, #24]
   194b0:	4b96      	ldr	r3, [pc, #600]	; (1970c <lcd_displaying_task+0x73c>)
   194b2:	2164      	movs	r1, #100	; 0x64
   194b4:	0010      	movs	r0, r2
   194b6:	4798      	blx	r3
   194b8:	000b      	movs	r3, r1
   194ba:	63fb      	str	r3, [r7, #60]	; 0x3c
						lcd_printf("UNDER : %03lu.%02lu  ",temp_Int,temp_Dec);
   194bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   194be:	6c39      	ldr	r1, [r7, #64]	; 0x40
   194c0:	4b95      	ldr	r3, [pc, #596]	; (19718 <lcd_displaying_task+0x748>)
   194c2:	0018      	movs	r0, r3
   194c4:	4b93      	ldr	r3, [pc, #588]	; (19714 <lcd_displaying_task+0x744>)
   194c6:	4798      	blx	r3
					}
					break;
   194c8:	e115      	b.n	196f6 <lcd_displaying_task+0x726>
				}
				case 7:
				{
					LCD_setCursor(0,0);
   194ca:	2100      	movs	r1, #0
   194cc:	2000      	movs	r0, #0
   194ce:	4b8d      	ldr	r3, [pc, #564]	; (19704 <lcd_displaying_task+0x734>)
   194d0:	4798      	blx	r3
					lcd_printf("O-LEVEL : ");
   194d2:	4b92      	ldr	r3, [pc, #584]	; (1971c <lcd_displaying_task+0x74c>)
   194d4:	0018      	movs	r0, r3
   194d6:	4b8f      	ldr	r3, [pc, #572]	; (19714 <lcd_displaying_task+0x744>)
   194d8:	4798      	blx	r3
					if (overheadLevel == OVERHEADHIGHLEVEL)
   194da:	4b91      	ldr	r3, [pc, #580]	; (19720 <lcd_displaying_task+0x750>)
   194dc:	781b      	ldrb	r3, [r3, #0]
   194de:	b2db      	uxtb	r3, r3
   194e0:	2b02      	cmp	r3, #2
   194e2:	d104      	bne.n	194ee <lcd_displaying_task+0x51e>
					{
						lcd_printf("HIGH  ");
   194e4:	4b8f      	ldr	r3, [pc, #572]	; (19724 <lcd_displaying_task+0x754>)
   194e6:	0018      	movs	r0, r3
   194e8:	4b8a      	ldr	r3, [pc, #552]	; (19714 <lcd_displaying_task+0x744>)
   194ea:	4798      	blx	r3
   194ec:	e012      	b.n	19514 <lcd_displaying_task+0x544>
					}
					else if (overheadLevel == OVERHEADMIDLEVEL)
   194ee:	4b8c      	ldr	r3, [pc, #560]	; (19720 <lcd_displaying_task+0x750>)
   194f0:	781b      	ldrb	r3, [r3, #0]
   194f2:	b2db      	uxtb	r3, r3
   194f4:	2b01      	cmp	r3, #1
   194f6:	d104      	bne.n	19502 <lcd_displaying_task+0x532>
					{
						lcd_printf("MID   ");
   194f8:	4b8b      	ldr	r3, [pc, #556]	; (19728 <lcd_displaying_task+0x758>)
   194fa:	0018      	movs	r0, r3
   194fc:	4b85      	ldr	r3, [pc, #532]	; (19714 <lcd_displaying_task+0x744>)
   194fe:	4798      	blx	r3
   19500:	e008      	b.n	19514 <lcd_displaying_task+0x544>
					}
					else if (overheadLevel == OVERHEADCRITICALLEVEL)
   19502:	4b87      	ldr	r3, [pc, #540]	; (19720 <lcd_displaying_task+0x750>)
   19504:	781b      	ldrb	r3, [r3, #0]
   19506:	b2db      	uxtb	r3, r3
   19508:	2b00      	cmp	r3, #0
   1950a:	d103      	bne.n	19514 <lcd_displaying_task+0x544>
					{
						lcd_printf("LOW   ");
   1950c:	4b87      	ldr	r3, [pc, #540]	; (1972c <lcd_displaying_task+0x75c>)
   1950e:	0018      	movs	r0, r3
   19510:	4b80      	ldr	r3, [pc, #512]	; (19714 <lcd_displaying_task+0x744>)
   19512:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   19514:	2101      	movs	r1, #1
   19516:	2000      	movs	r0, #0
   19518:	4b7a      	ldr	r3, [pc, #488]	; (19704 <lcd_displaying_task+0x734>)
   1951a:	4798      	blx	r3
					lcd_printf("U-LEVEL : ");
   1951c:	4b84      	ldr	r3, [pc, #528]	; (19730 <lcd_displaying_task+0x760>)
   1951e:	0018      	movs	r0, r3
   19520:	4b7c      	ldr	r3, [pc, #496]	; (19714 <lcd_displaying_task+0x744>)
   19522:	4798      	blx	r3
					if (undergroundLevel == CRITICALLEVEL)
   19524:	4b83      	ldr	r3, [pc, #524]	; (19734 <lcd_displaying_task+0x764>)
   19526:	781b      	ldrb	r3, [r3, #0]
   19528:	2b00      	cmp	r3, #0
   1952a:	d104      	bne.n	19536 <lcd_displaying_task+0x566>
					{
						lcd_printf("CRTCL ");
   1952c:	4b82      	ldr	r3, [pc, #520]	; (19738 <lcd_displaying_task+0x768>)
   1952e:	0018      	movs	r0, r3
   19530:	4b78      	ldr	r3, [pc, #480]	; (19714 <lcd_displaying_task+0x744>)
   19532:	4798      	blx	r3
					}
					else if (undergroundLevel == HIGHLEVEL)
					{
						lcd_printf("HIGH  ");
					}
					break;
   19534:	e0e1      	b.n	196fa <lcd_displaying_task+0x72a>
					else if (undergroundLevel == LOWLEVEL)
   19536:	4b7f      	ldr	r3, [pc, #508]	; (19734 <lcd_displaying_task+0x764>)
   19538:	781b      	ldrb	r3, [r3, #0]
   1953a:	2b01      	cmp	r3, #1
   1953c:	d104      	bne.n	19548 <lcd_displaying_task+0x578>
						lcd_printf("LOW   ");
   1953e:	4b7b      	ldr	r3, [pc, #492]	; (1972c <lcd_displaying_task+0x75c>)
   19540:	0018      	movs	r0, r3
   19542:	4b74      	ldr	r3, [pc, #464]	; (19714 <lcd_displaying_task+0x744>)
   19544:	4798      	blx	r3
					break;
   19546:	e0d8      	b.n	196fa <lcd_displaying_task+0x72a>
					else if (undergroundLevel == MIDLEVEL)
   19548:	4b7a      	ldr	r3, [pc, #488]	; (19734 <lcd_displaying_task+0x764>)
   1954a:	781b      	ldrb	r3, [r3, #0]
   1954c:	2b02      	cmp	r3, #2
   1954e:	d104      	bne.n	1955a <lcd_displaying_task+0x58a>
						lcd_printf("MID   ");
   19550:	4b75      	ldr	r3, [pc, #468]	; (19728 <lcd_displaying_task+0x758>)
   19552:	0018      	movs	r0, r3
   19554:	4b6f      	ldr	r3, [pc, #444]	; (19714 <lcd_displaying_task+0x744>)
   19556:	4798      	blx	r3
					break;
   19558:	e0cf      	b.n	196fa <lcd_displaying_task+0x72a>
					else if (undergroundLevel == HIGHLEVEL)
   1955a:	4b76      	ldr	r3, [pc, #472]	; (19734 <lcd_displaying_task+0x764>)
   1955c:	781b      	ldrb	r3, [r3, #0]
   1955e:	2b03      	cmp	r3, #3
   19560:	d000      	beq.n	19564 <lcd_displaying_task+0x594>
   19562:	e0ca      	b.n	196fa <lcd_displaying_task+0x72a>
						lcd_printf("HIGH  ");
   19564:	4b6f      	ldr	r3, [pc, #444]	; (19724 <lcd_displaying_task+0x754>)
   19566:	0018      	movs	r0, r3
   19568:	4b6a      	ldr	r3, [pc, #424]	; (19714 <lcd_displaying_task+0x744>)
   1956a:	4798      	blx	r3
					break;
   1956c:	e0c5      	b.n	196fa <lcd_displaying_task+0x72a>
				}
				case 8:
				{
					LCD_setCursor(0,0);
   1956e:	2100      	movs	r1, #0
   19570:	2000      	movs	r0, #0
   19572:	4b64      	ldr	r3, [pc, #400]	; (19704 <lcd_displaying_task+0x734>)
   19574:	4798      	blx	r3
					lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
   19576:	4b71      	ldr	r3, [pc, #452]	; (1973c <lcd_displaying_task+0x76c>)
   19578:	7f1b      	ldrb	r3, [r3, #28]
   1957a:	b2db      	uxtb	r3, r3
   1957c:	001a      	movs	r2, r3
   1957e:	4b70      	ldr	r3, [pc, #448]	; (19740 <lcd_displaying_task+0x770>)
   19580:	0011      	movs	r1, r2
   19582:	0018      	movs	r0, r3
   19584:	4b63      	ldr	r3, [pc, #396]	; (19714 <lcd_displaying_task+0x744>)
   19586:	4798      	blx	r3
					LCD_setCursor(0,1);
   19588:	2101      	movs	r1, #1
   1958a:	2000      	movs	r0, #0
   1958c:	4b5d      	ldr	r3, [pc, #372]	; (19704 <lcd_displaying_task+0x734>)
   1958e:	4798      	blx	r3
					lcd_printf("SIGNAL : ");
   19590:	4b6c      	ldr	r3, [pc, #432]	; (19744 <lcd_displaying_task+0x774>)
   19592:	0018      	movs	r0, r3
   19594:	4b5f      	ldr	r3, [pc, #380]	; (19714 <lcd_displaying_task+0x744>)
   19596:	4798      	blx	r3
					LCD_setCursor(9,1);
   19598:	2101      	movs	r1, #1
   1959a:	2009      	movs	r0, #9
   1959c:	4b59      	ldr	r3, [pc, #356]	; (19704 <lcd_displaying_task+0x734>)
   1959e:	4798      	blx	r3
					lcd_printf("       ");
   195a0:	4b69      	ldr	r3, [pc, #420]	; (19748 <lcd_displaying_task+0x778>)
   195a2:	0018      	movs	r0, r3
   195a4:	4b5b      	ldr	r3, [pc, #364]	; (19714 <lcd_displaying_task+0x744>)
   195a6:	4798      	blx	r3
					LCD_setCursor(9,1);
   195a8:	2101      	movs	r1, #1
   195aa:	2009      	movs	r0, #9
   195ac:	4b55      	ldr	r3, [pc, #340]	; (19704 <lcd_displaying_task+0x734>)
   195ae:	4798      	blx	r3
					
					uint8_t tempSignal = Signal_Strength;
   195b0:	233b      	movs	r3, #59	; 0x3b
   195b2:	18fb      	adds	r3, r7, r3
   195b4:	4a65      	ldr	r2, [pc, #404]	; (1974c <lcd_displaying_task+0x77c>)
   195b6:	7812      	ldrb	r2, [r2, #0]
   195b8:	701a      	strb	r2, [r3, #0]
					for (uint8_t i=0;i<=tempSignal;i++)
   195ba:	2346      	movs	r3, #70	; 0x46
   195bc:	18fb      	adds	r3, r7, r3
   195be:	2200      	movs	r2, #0
   195c0:	701a      	strb	r2, [r3, #0]
   195c2:	e00c      	b.n	195de <lcd_displaying_task+0x60e>
					{
						LCD_write(i);
   195c4:	2346      	movs	r3, #70	; 0x46
   195c6:	18fb      	adds	r3, r7, r3
   195c8:	781b      	ldrb	r3, [r3, #0]
   195ca:	0018      	movs	r0, r3
   195cc:	4b60      	ldr	r3, [pc, #384]	; (19750 <lcd_displaying_task+0x780>)
   195ce:	4798      	blx	r3
					for (uint8_t i=0;i<=tempSignal;i++)
   195d0:	2346      	movs	r3, #70	; 0x46
   195d2:	18fb      	adds	r3, r7, r3
   195d4:	781a      	ldrb	r2, [r3, #0]
   195d6:	2346      	movs	r3, #70	; 0x46
   195d8:	18fb      	adds	r3, r7, r3
   195da:	3201      	adds	r2, #1
   195dc:	701a      	strb	r2, [r3, #0]
   195de:	2346      	movs	r3, #70	; 0x46
   195e0:	18fa      	adds	r2, r7, r3
   195e2:	233b      	movs	r3, #59	; 0x3b
   195e4:	18fb      	adds	r3, r7, r3
   195e6:	7812      	ldrb	r2, [r2, #0]
   195e8:	781b      	ldrb	r3, [r3, #0]
   195ea:	429a      	cmp	r2, r3
   195ec:	d9ea      	bls.n	195c4 <lcd_displaying_task+0x5f4>
					}

					break;
   195ee:	e0ca      	b.n	19786 <lcd_displaying_task+0x7b6>
				}
				case 9:
				{
					LCD_setCursor(0,0);
   195f0:	2100      	movs	r1, #0
   195f2:	2000      	movs	r0, #0
   195f4:	4b43      	ldr	r3, [pc, #268]	; (19704 <lcd_displaying_task+0x734>)
   195f6:	4798      	blx	r3
					switch(callStateOnLCD)
   195f8:	4b56      	ldr	r3, [pc, #344]	; (19754 <lcd_displaying_task+0x784>)
   195fa:	781b      	ldrb	r3, [r3, #0]
   195fc:	b2db      	uxtb	r3, r3
   195fe:	2b05      	cmp	r3, #5
   19600:	d900      	bls.n	19604 <lcd_displaying_task+0x634>
   19602:	e0bf      	b.n	19784 <lcd_displaying_task+0x7b4>
   19604:	009a      	lsls	r2, r3, #2
   19606:	4b54      	ldr	r3, [pc, #336]	; (19758 <lcd_displaying_task+0x788>)
   19608:	18d3      	adds	r3, r2, r3
   1960a:	681b      	ldr	r3, [r3, #0]
   1960c:	469f      	mov	pc, r3
					{
						case LCDCALLSTATE_RINGING:
						{
							lcd_printf("INCOMING CALL.. ");
   1960e:	4b53      	ldr	r3, [pc, #332]	; (1975c <lcd_displaying_task+0x78c>)
   19610:	0018      	movs	r0, r3
   19612:	4b40      	ldr	r3, [pc, #256]	; (19714 <lcd_displaying_task+0x744>)
   19614:	4798      	blx	r3
							LCD_setCursor(0,1);
   19616:	2101      	movs	r1, #1
   19618:	2000      	movs	r0, #0
   1961a:	4b3a      	ldr	r3, [pc, #232]	; (19704 <lcd_displaying_task+0x734>)
   1961c:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   1961e:	4a50      	ldr	r2, [pc, #320]	; (19760 <lcd_displaying_task+0x790>)
   19620:	4b50      	ldr	r3, [pc, #320]	; (19764 <lcd_displaying_task+0x794>)
   19622:	0011      	movs	r1, r2
   19624:	0018      	movs	r0, r3
   19626:	4b3b      	ldr	r3, [pc, #236]	; (19714 <lcd_displaying_task+0x744>)
   19628:	4798      	blx	r3
							break;
   1962a:	e045      	b.n	196b8 <lcd_displaying_task+0x6e8>
						}
						case LCDCALLSTATE_INCALL:
						{
							lcd_printf("IN CALL...      ");
   1962c:	4b4e      	ldr	r3, [pc, #312]	; (19768 <lcd_displaying_task+0x798>)
   1962e:	0018      	movs	r0, r3
   19630:	4b38      	ldr	r3, [pc, #224]	; (19714 <lcd_displaying_task+0x744>)
   19632:	4798      	blx	r3
							LCD_setCursor(0,1);
   19634:	2101      	movs	r1, #1
   19636:	2000      	movs	r0, #0
   19638:	4b32      	ldr	r3, [pc, #200]	; (19704 <lcd_displaying_task+0x734>)
   1963a:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   1963c:	4a48      	ldr	r2, [pc, #288]	; (19760 <lcd_displaying_task+0x790>)
   1963e:	4b49      	ldr	r3, [pc, #292]	; (19764 <lcd_displaying_task+0x794>)
   19640:	0011      	movs	r1, r2
   19642:	0018      	movs	r0, r3
   19644:	4b33      	ldr	r3, [pc, #204]	; (19714 <lcd_displaying_task+0x744>)
   19646:	4798      	blx	r3
							break;
   19648:	e036      	b.n	196b8 <lcd_displaying_task+0x6e8>
						}
						case LCDCALLSTATE_OUTGOING:
						{
							lcd_printf("DIALING...      ");
   1964a:	4b48      	ldr	r3, [pc, #288]	; (1976c <lcd_displaying_task+0x79c>)
   1964c:	0018      	movs	r0, r3
   1964e:	4b31      	ldr	r3, [pc, #196]	; (19714 <lcd_displaying_task+0x744>)
   19650:	4798      	blx	r3
							LCD_setCursor(0,1);
   19652:	2101      	movs	r1, #1
   19654:	2000      	movs	r0, #0
   19656:	4b2b      	ldr	r3, [pc, #172]	; (19704 <lcd_displaying_task+0x734>)
   19658:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   1965a:	4a41      	ldr	r2, [pc, #260]	; (19760 <lcd_displaying_task+0x790>)
   1965c:	4b41      	ldr	r3, [pc, #260]	; (19764 <lcd_displaying_task+0x794>)
   1965e:	0011      	movs	r1, r2
   19660:	0018      	movs	r0, r3
   19662:	4b2c      	ldr	r3, [pc, #176]	; (19714 <lcd_displaying_task+0x744>)
   19664:	4798      	blx	r3
							break;
   19666:	e027      	b.n	196b8 <lcd_displaying_task+0x6e8>
						}
						case LCDCALLSTATE_INCOMINGSMS:
						{
							lcd_printf("INCOMING SMS... ");
   19668:	4b41      	ldr	r3, [pc, #260]	; (19770 <lcd_displaying_task+0x7a0>)
   1966a:	0018      	movs	r0, r3
   1966c:	4b29      	ldr	r3, [pc, #164]	; (19714 <lcd_displaying_task+0x744>)
   1966e:	4798      	blx	r3
							LCD_setCursor(0,1);
   19670:	2101      	movs	r1, #1
   19672:	2000      	movs	r0, #0
   19674:	4b23      	ldr	r3, [pc, #140]	; (19704 <lcd_displaying_task+0x734>)
   19676:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   19678:	4a39      	ldr	r2, [pc, #228]	; (19760 <lcd_displaying_task+0x790>)
   1967a:	4b3a      	ldr	r3, [pc, #232]	; (19764 <lcd_displaying_task+0x794>)
   1967c:	0011      	movs	r1, r2
   1967e:	0018      	movs	r0, r3
   19680:	4b24      	ldr	r3, [pc, #144]	; (19714 <lcd_displaying_task+0x744>)
   19682:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   19684:	2200      	movs	r2, #0
   19686:	2100      	movs	r1, #0
   19688:	2000      	movs	r0, #0
   1968a:	4b3a      	ldr	r3, [pc, #232]	; (19774 <lcd_displaying_task+0x7a4>)
   1968c:	4798      	blx	r3
							break;
   1968e:	e013      	b.n	196b8 <lcd_displaying_task+0x6e8>
						}
						case LCDCALLSTATE_OUTGOINGSMS:
						{
							lcd_printf("OUTGOING SMS... ");
   19690:	4b39      	ldr	r3, [pc, #228]	; (19778 <lcd_displaying_task+0x7a8>)
   19692:	0018      	movs	r0, r3
   19694:	4b1f      	ldr	r3, [pc, #124]	; (19714 <lcd_displaying_task+0x744>)
   19696:	4798      	blx	r3
							LCD_setCursor(0,1);
   19698:	2101      	movs	r1, #1
   1969a:	2000      	movs	r0, #0
   1969c:	4b19      	ldr	r3, [pc, #100]	; (19704 <lcd_displaying_task+0x734>)
   1969e:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   196a0:	4a2f      	ldr	r2, [pc, #188]	; (19760 <lcd_displaying_task+0x790>)
   196a2:	4b30      	ldr	r3, [pc, #192]	; (19764 <lcd_displaying_task+0x794>)
   196a4:	0011      	movs	r1, r2
   196a6:	0018      	movs	r0, r3
   196a8:	4b1a      	ldr	r3, [pc, #104]	; (19714 <lcd_displaying_task+0x744>)
   196aa:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   196ac:	2200      	movs	r2, #0
   196ae:	2100      	movs	r1, #0
   196b0:	2000      	movs	r0, #0
   196b2:	4b30      	ldr	r3, [pc, #192]	; (19774 <lcd_displaying_task+0x7a4>)
   196b4:	4798      	blx	r3
							break;
   196b6:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
   196b8:	e064      	b.n	19784 <lcd_displaying_task+0x7b4>
				}
				case 10:
				{
					if(Analog_Parameter_Struct.Battery_percentage<35)
   196ba:	4b20      	ldr	r3, [pc, #128]	; (1973c <lcd_displaying_task+0x76c>)
   196bc:	7f1b      	ldrb	r3, [r3, #28]
   196be:	b2db      	uxtb	r3, r3
   196c0:	2b22      	cmp	r3, #34	; 0x22
   196c2:	d810      	bhi.n	196e6 <lcd_displaying_task+0x716>
					{
						LCD_setCursor(0,0);
   196c4:	2100      	movs	r1, #0
   196c6:	2000      	movs	r0, #0
   196c8:	4b0e      	ldr	r3, [pc, #56]	; (19704 <lcd_displaying_task+0x734>)
   196ca:	4798      	blx	r3
						lcd_printf("LOW BATTERY     ");
   196cc:	4b2b      	ldr	r3, [pc, #172]	; (1977c <lcd_displaying_task+0x7ac>)
   196ce:	0018      	movs	r0, r3
   196d0:	4b10      	ldr	r3, [pc, #64]	; (19714 <lcd_displaying_task+0x744>)
   196d2:	4798      	blx	r3
						LCD_setCursor(0,1);
   196d4:	2101      	movs	r1, #1
   196d6:	2000      	movs	r0, #0
   196d8:	4b0a      	ldr	r3, [pc, #40]	; (19704 <lcd_displaying_task+0x734>)
   196da:	4798      	blx	r3
						lcd_printf("                ");
   196dc:	4b28      	ldr	r3, [pc, #160]	; (19780 <lcd_displaying_task+0x7b0>)
   196de:	0018      	movs	r0, r3
   196e0:	4b0c      	ldr	r3, [pc, #48]	; (19714 <lcd_displaying_task+0x744>)
   196e2:	4798      	blx	r3
						break;
   196e4:	e04f      	b.n	19786 <lcd_displaying_task+0x7b6>
					}
					else
					{
						screen++;
   196e6:	2347      	movs	r3, #71	; 0x47
   196e8:	18fb      	adds	r3, r7, r3
   196ea:	781a      	ldrb	r2, [r3, #0]
   196ec:	2347      	movs	r3, #71	; 0x47
   196ee:	18fb      	adds	r3, r7, r3
   196f0:	3201      	adds	r2, #1
   196f2:	701a      	strb	r2, [r3, #0]
					}
					break;
   196f4:	e047      	b.n	19786 <lcd_displaying_task+0x7b6>
					break;
   196f6:	46c0      	nop			; (mov r8, r8)
   196f8:	e045      	b.n	19786 <lcd_displaying_task+0x7b6>
					break;
   196fa:	46c0      	nop			; (mov r8, r8)
   196fc:	e043      	b.n	19786 <lcd_displaying_task+0x7b6>
   196fe:	46c0      	nop			; (mov r8, r8)
   19700:	20000854 	.word	0x20000854
   19704:	0001403d 	.word	0x0001403d
   19708:	00026ee5 	.word	0x00026ee5
   1970c:	00026ff1 	.word	0x00026ff1
   19710:	0002b2ec 	.word	0x0002b2ec
   19714:	00014139 	.word	0x00014139
   19718:	0002b304 	.word	0x0002b304
   1971c:	0002b31c 	.word	0x0002b31c
   19720:	20000990 	.word	0x20000990
   19724:	0002b328 	.word	0x0002b328
   19728:	0002b330 	.word	0x0002b330
   1972c:	0002b338 	.word	0x0002b338
   19730:	0002b340 	.word	0x0002b340
   19734:	20000a5c 	.word	0x20000a5c
   19738:	0002b34c 	.word	0x0002b34c
   1973c:	200008e8 	.word	0x200008e8
   19740:	0002b354 	.word	0x0002b354
   19744:	0002b368 	.word	0x0002b368
   19748:	0002b374 	.word	0x0002b374
   1974c:	20000989 	.word	0x20000989
   19750:	00013ef1 	.word	0x00013ef1
   19754:	200009d6 	.word	0x200009d6
   19758:	0002b450 	.word	0x0002b450
   1975c:	0002b37c 	.word	0x0002b37c
   19760:	20000a48 	.word	0x20000a48
   19764:	0002b390 	.word	0x0002b390
   19768:	0002b398 	.word	0x0002b398
   1976c:	0002b3ac 	.word	0x0002b3ac
   19770:	0002b3c0 	.word	0x0002b3c0
   19774:	0001db19 	.word	0x0001db19
   19778:	0002b3d4 	.word	0x0002b3d4
   1977c:	0002b3e8 	.word	0x0002b3e8
   19780:	0002b270 	.word	0x0002b270
					break;
   19784:	46c0      	nop			; (mov r8, r8)
				//break;
				//}
			}
		}
		
		if (xQueueReceive(xfour_Second_Queue,&time,0))
   19786:	4b4e      	ldr	r3, [pc, #312]	; (198c0 <lcd_displaying_task+0x8f0>)
   19788:	681b      	ldr	r3, [r3, #0]
   1978a:	223a      	movs	r2, #58	; 0x3a
   1978c:	18b9      	adds	r1, r7, r2
   1978e:	2200      	movs	r2, #0
   19790:	0018      	movs	r0, r3
   19792:	4b4c      	ldr	r3, [pc, #304]	; (198c4 <lcd_displaying_task+0x8f4>)
   19794:	4798      	blx	r3
   19796:	1e03      	subs	r3, r0, #0
   19798:	d100      	bne.n	1979c <lcd_displaying_task+0x7cc>
   1979a:	e073      	b.n	19884 <lcd_displaying_task+0x8b4>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
   1979c:	4b4a      	ldr	r3, [pc, #296]	; (198c8 <lcd_displaying_task+0x8f8>)
   1979e:	6818      	ldr	r0, [r3, #0]
   197a0:	23fa      	movs	r3, #250	; 0xfa
   197a2:	011a      	lsls	r2, r3, #4
   197a4:	2301      	movs	r3, #1
   197a6:	425b      	negs	r3, r3
   197a8:	9300      	str	r3, [sp, #0]
   197aa:	2300      	movs	r3, #0
   197ac:	2104      	movs	r1, #4
   197ae:	4c47      	ldr	r4, [pc, #284]	; (198cc <lcd_displaying_task+0x8fc>)
   197b0:	47a0      	blx	r4
			if(varPauseDisplay==false)
   197b2:	4b47      	ldr	r3, [pc, #284]	; (198d0 <lcd_displaying_task+0x900>)
   197b4:	781b      	ldrb	r3, [r3, #0]
   197b6:	b2db      	uxtb	r3, r3
   197b8:	2201      	movs	r2, #1
   197ba:	4053      	eors	r3, r2
   197bc:	b2db      	uxtb	r3, r3
   197be:	2b00      	cmp	r3, #0
   197c0:	d060      	beq.n	19884 <lcd_displaying_task+0x8b4>
			{
				screen++;
   197c2:	2347      	movs	r3, #71	; 0x47
   197c4:	18fb      	adds	r3, r7, r3
   197c6:	781a      	ldrb	r2, [r3, #0]
   197c8:	2347      	movs	r3, #71	; 0x47
   197ca:	18fb      	adds	r3, r7, r3
   197cc:	3201      	adds	r2, #1
   197ce:	701a      	strb	r2, [r3, #0]
				if(!getMotorState() && screen==4)
   197d0:	4b40      	ldr	r3, [pc, #256]	; (198d4 <lcd_displaying_task+0x904>)
   197d2:	4798      	blx	r3
   197d4:	0003      	movs	r3, r0
   197d6:	001a      	movs	r2, r3
   197d8:	2301      	movs	r3, #1
   197da:	4053      	eors	r3, r2
   197dc:	b2db      	uxtb	r3, r3
   197de:	2b00      	cmp	r3, #0
   197e0:	d00b      	beq.n	197fa <lcd_displaying_task+0x82a>
   197e2:	2347      	movs	r3, #71	; 0x47
   197e4:	18fb      	adds	r3, r7, r3
   197e6:	781b      	ldrb	r3, [r3, #0]
   197e8:	2b04      	cmp	r3, #4
   197ea:	d106      	bne.n	197fa <lcd_displaying_task+0x82a>
				{
					screen++;
   197ec:	2347      	movs	r3, #71	; 0x47
   197ee:	18fb      	adds	r3, r7, r3
   197f0:	781a      	ldrb	r2, [r3, #0]
   197f2:	2347      	movs	r3, #71	; 0x47
   197f4:	18fb      	adds	r3, r7, r3
   197f6:	3201      	adds	r2, #1
   197f8:	701a      	strb	r2, [r3, #0]
				}
				
				if(screen==6 && (!user_settings_parameter_struct.currentDetectionAddress || !getMotorState()))
   197fa:	2347      	movs	r3, #71	; 0x47
   197fc:	18fb      	adds	r3, r7, r3
   197fe:	781b      	ldrb	r3, [r3, #0]
   19800:	2b06      	cmp	r3, #6
   19802:	d114      	bne.n	1982e <lcd_displaying_task+0x85e>
   19804:	4b34      	ldr	r3, [pc, #208]	; (198d8 <lcd_displaying_task+0x908>)
   19806:	7bdb      	ldrb	r3, [r3, #15]
   19808:	b2db      	uxtb	r3, r3
   1980a:	2b00      	cmp	r3, #0
   1980c:	d008      	beq.n	19820 <lcd_displaying_task+0x850>
   1980e:	4b31      	ldr	r3, [pc, #196]	; (198d4 <lcd_displaying_task+0x904>)
   19810:	4798      	blx	r3
   19812:	0003      	movs	r3, r0
   19814:	001a      	movs	r2, r3
   19816:	2301      	movs	r3, #1
   19818:	4053      	eors	r3, r2
   1981a:	b2db      	uxtb	r3, r3
   1981c:	2b00      	cmp	r3, #0
   1981e:	d006      	beq.n	1982e <lcd_displaying_task+0x85e>
				{
					screen++;
   19820:	2347      	movs	r3, #71	; 0x47
   19822:	18fb      	adds	r3, r7, r3
   19824:	781a      	ldrb	r2, [r3, #0]
   19826:	2347      	movs	r3, #71	; 0x47
   19828:	18fb      	adds	r3, r7, r3
   1982a:	3201      	adds	r2, #1
   1982c:	701a      	strb	r2, [r3, #0]
				}

				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==7)
   1982e:	4b2b      	ldr	r3, [pc, #172]	; (198dc <lcd_displaying_task+0x90c>)
   19830:	795b      	ldrb	r3, [r3, #5]
   19832:	2b00      	cmp	r3, #0
   19834:	d10b      	bne.n	1984e <lcd_displaying_task+0x87e>
   19836:	2347      	movs	r3, #71	; 0x47
   19838:	18fb      	adds	r3, r7, r3
   1983a:	781b      	ldrb	r3, [r3, #0]
   1983c:	2b07      	cmp	r3, #7
   1983e:	d106      	bne.n	1984e <lcd_displaying_task+0x87e>
				{
					screen++;
   19840:	2347      	movs	r3, #71	; 0x47
   19842:	18fb      	adds	r3, r7, r3
   19844:	781a      	ldrb	r2, [r3, #0]
   19846:	2347      	movs	r3, #71	; 0x47
   19848:	18fb      	adds	r3, r7, r3
   1984a:	3201      	adds	r2, #1
   1984c:	701a      	strb	r2, [r3, #0]
				}
				
				if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==9)
   1984e:	4b24      	ldr	r3, [pc, #144]	; (198e0 <lcd_displaying_task+0x910>)
   19850:	781b      	ldrb	r3, [r3, #0]
   19852:	b2db      	uxtb	r3, r3
   19854:	2b00      	cmp	r3, #0
   19856:	d10c      	bne.n	19872 <lcd_displaying_task+0x8a2>
   19858:	2347      	movs	r3, #71	; 0x47
   1985a:	18fb      	adds	r3, r7, r3
   1985c:	781b      	ldrb	r3, [r3, #0]
   1985e:	2b09      	cmp	r3, #9
   19860:	d107      	bne.n	19872 <lcd_displaying_task+0x8a2>
				{
					screen++;
   19862:	2347      	movs	r3, #71	; 0x47
   19864:	18fb      	adds	r3, r7, r3
   19866:	781a      	ldrb	r2, [r3, #0]
   19868:	2347      	movs	r3, #71	; 0x47
   1986a:	18fb      	adds	r3, r7, r3
   1986c:	3201      	adds	r2, #1
   1986e:	701a      	strb	r2, [r3, #0]
   19870:	e008      	b.n	19884 <lcd_displaying_task+0x8b4>
				}
				else if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   19872:	4b1b      	ldr	r3, [pc, #108]	; (198e0 <lcd_displaying_task+0x910>)
   19874:	781b      	ldrb	r3, [r3, #0]
   19876:	b2db      	uxtb	r3, r3
   19878:	2b00      	cmp	r3, #0
   1987a:	d003      	beq.n	19884 <lcd_displaying_task+0x8b4>
				{
					screen=9;
   1987c:	2347      	movs	r3, #71	; 0x47
   1987e:	18fb      	adds	r3, r7, r3
   19880:	2209      	movs	r2, #9
   19882:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		
		//screen = 8;
		vTaskDelay(500);
   19884:	23fa      	movs	r3, #250	; 0xfa
   19886:	005b      	lsls	r3, r3, #1
   19888:	0018      	movs	r0, r3
   1988a:	4b16      	ldr	r3, [pc, #88]	; (198e4 <lcd_displaying_task+0x914>)
   1988c:	4798      	blx	r3

		if (screen>10)
   1988e:	2347      	movs	r3, #71	; 0x47
   19890:	18fb      	adds	r3, r7, r3
   19892:	781b      	ldrb	r3, [r3, #0]
   19894:	2b0a      	cmp	r3, #10
   19896:	d801      	bhi.n	1989c <lcd_displaying_task+0x8cc>
   19898:	f7ff fc01 	bl	1909e <lcd_displaying_task+0xce>
		{
			screen=1;
   1989c:	2347      	movs	r3, #71	; 0x47
   1989e:	18fb      	adds	r3, r7, r3
   198a0:	2201      	movs	r2, #1
   198a2:	701a      	strb	r2, [r3, #0]
			
			LCD_PWR_DIS();
   198a4:	4b10      	ldr	r3, [pc, #64]	; (198e8 <lcd_displaying_task+0x918>)
   198a6:	4798      	blx	r3
			lcd_in_sleep = true;
   198a8:	4b10      	ldr	r3, [pc, #64]	; (198ec <lcd_displaying_task+0x91c>)
   198aa:	2201      	movs	r2, #1
   198ac:	701a      	strb	r2, [r3, #0]
			setNetworkCharacter=true;
   198ae:	4b10      	ldr	r3, [pc, #64]	; (198f0 <lcd_displaying_task+0x920>)
   198b0:	2201      	movs	r2, #1
   198b2:	701a      	strb	r2, [r3, #0]
			vTaskDelay(100/portTICK_PERIOD_MS);
   198b4:	2064      	movs	r0, #100	; 0x64
   198b6:	4b0b      	ldr	r3, [pc, #44]	; (198e4 <lcd_displaying_task+0x914>)
   198b8:	4798      	blx	r3
		if (lcd_in_sleep)
   198ba:	f7ff fbf0 	bl	1909e <lcd_displaying_task+0xce>
   198be:	46c0      	nop			; (mov r8, r8)
   198c0:	20000428 	.word	0x20000428
   198c4:	0001ffa1 	.word	0x0001ffa1
   198c8:	2000042c 	.word	0x2000042c
   198cc:	00021a0d 	.word	0x00021a0d
   198d0:	200009b0 	.word	0x200009b0
   198d4:	0001bbf1 	.word	0x0001bbf1
   198d8:	20000854 	.word	0x20000854
   198dc:	2000082c 	.word	0x2000082c
   198e0:	200009d6 	.word	0x200009d6
   198e4:	00020a49 	.word	0x00020a49
   198e8:	00013ced 	.word	0x00013ced
   198ec:	20000a68 	.word	0x20000a68
   198f0:	20000a69 	.word	0x20000a69

000198f4 <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
   198f4:	b590      	push	{r4, r7, lr}
   198f6:	b083      	sub	sp, #12
   198f8:	af02      	add	r7, sp, #8
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
   198fa:	2200      	movs	r2, #0
   198fc:	2101      	movs	r1, #1
   198fe:	2001      	movs	r0, #1
   19900:	4b09      	ldr	r3, [pc, #36]	; (19928 <start_lcd_service+0x34>)
   19902:	4798      	blx	r3
   19904:	0002      	movs	r2, r0
   19906:	4b09      	ldr	r3, [pc, #36]	; (1992c <start_lcd_service+0x38>)
   19908:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)500,NULL,1,NULL);
   1990a:	23fa      	movs	r3, #250	; 0xfa
   1990c:	005a      	lsls	r2, r3, #1
   1990e:	4808      	ldr	r0, [pc, #32]	; (19930 <start_lcd_service+0x3c>)
   19910:	2300      	movs	r3, #0
   19912:	9301      	str	r3, [sp, #4]
   19914:	2301      	movs	r3, #1
   19916:	9300      	str	r3, [sp, #0]
   19918:	2300      	movs	r3, #0
   1991a:	2100      	movs	r1, #0
   1991c:	4c05      	ldr	r4, [pc, #20]	; (19934 <start_lcd_service+0x40>)
   1991e:	47a0      	blx	r4
	
}
   19920:	46c0      	nop			; (mov r8, r8)
   19922:	46bd      	mov	sp, r7
   19924:	b001      	add	sp, #4
   19926:	bd90      	pop	{r4, r7, pc}
   19928:	0001fbe5 	.word	0x0001fbe5
   1992c:	20000428 	.word	0x20000428
   19930:	00018fd1 	.word	0x00018fd1
   19934:	00020709 	.word	0x00020709

00019938 <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
   19938:	b590      	push	{r4, r7, lr}
   1993a:	b085      	sub	sp, #20
   1993c:	af00      	add	r7, sp, #0
   1993e:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
   19940:	230f      	movs	r3, #15
   19942:	18fb      	adds	r3, r7, r3
   19944:	2201      	movs	r2, #1
   19946:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
   19948:	4b05      	ldr	r3, [pc, #20]	; (19960 <four_second_timer_callback+0x28>)
   1994a:	6818      	ldr	r0, [r3, #0]
   1994c:	230f      	movs	r3, #15
   1994e:	18f9      	adds	r1, r7, r3
   19950:	2300      	movs	r3, #0
   19952:	2200      	movs	r2, #0
   19954:	4c03      	ldr	r4, [pc, #12]	; (19964 <four_second_timer_callback+0x2c>)
   19956:	47a0      	blx	r4
}
   19958:	46c0      	nop			; (mov r8, r8)
   1995a:	46bd      	mov	sp, r7
   1995c:	b005      	add	sp, #20
   1995e:	bd90      	pop	{r4, r7, pc}
   19960:	20000428 	.word	0x20000428
   19964:	0001fe81 	.word	0x0001fe81

00019968 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
   19968:	b580      	push	{r7, lr}
   1996a:	b084      	sub	sp, #16
   1996c:	af00      	add	r7, sp, #0
   1996e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
   19970:	687b      	ldr	r3, [r7, #4]
   19972:	681b      	ldr	r3, [r3, #0]
   19974:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   19976:	68fb      	ldr	r3, [r7, #12]
   19978:	7a5b      	ldrb	r3, [r3, #9]
   1997a:	b2db      	uxtb	r3, r3
   1997c:	b25b      	sxtb	r3, r3
   1997e:	2b00      	cmp	r3, #0
   19980:	da01      	bge.n	19986 <ac_is_syncing+0x1e>
		return true;
   19982:	2301      	movs	r3, #1
   19984:	e000      	b.n	19988 <ac_is_syncing+0x20>
	}

	return false;
   19986:	2300      	movs	r3, #0
#endif
}
   19988:	0018      	movs	r0, r3
   1998a:	46bd      	mov	sp, r7
   1998c:	b004      	add	sp, #16
   1998e:	bd80      	pop	{r7, pc}

00019990 <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
   19990:	b580      	push	{r7, lr}
   19992:	b084      	sub	sp, #16
   19994:	af00      	add	r7, sp, #0
   19996:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   19998:	2300      	movs	r3, #0
   1999a:	60fb      	str	r3, [r7, #12]
   1999c:	e007      	b.n	199ae <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
   1999e:	687a      	ldr	r2, [r7, #4]
   199a0:	68fb      	ldr	r3, [r7, #12]
   199a2:	18d3      	adds	r3, r2, r3
   199a4:	2200      	movs	r2, #0
   199a6:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   199a8:	68fb      	ldr	r3, [r7, #12]
   199aa:	3301      	adds	r3, #1
   199ac:	60fb      	str	r3, [r7, #12]
   199ae:	68fb      	ldr	r3, [r7, #12]
   199b0:	2b00      	cmp	r3, #0
   199b2:	d0f4      	beq.n	1999e <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
   199b4:	687b      	ldr	r3, [r7, #4]
   199b6:	2200      	movs	r2, #0
   199b8:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
   199ba:	687b      	ldr	r3, [r7, #4]
   199bc:	2203      	movs	r2, #3
   199be:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
   199c0:	46c0      	nop			; (mov r8, r8)
   199c2:	46bd      	mov	sp, r7
   199c4:	b004      	add	sp, #16
   199c6:	bd80      	pop	{r7, pc}

000199c8 <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
   199c8:	b580      	push	{r7, lr}
   199ca:	b084      	sub	sp, #16
   199cc:	af00      	add	r7, sp, #0
   199ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   199d0:	687b      	ldr	r3, [r7, #4]
   199d2:	681b      	ldr	r3, [r3, #0]
   199d4:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   199d6:	46c0      	nop			; (mov r8, r8)
   199d8:	687b      	ldr	r3, [r7, #4]
   199da:	0018      	movs	r0, r3
   199dc:	4b07      	ldr	r3, [pc, #28]	; (199fc <ac_enable+0x34>)
   199de:	4798      	blx	r3
   199e0:	1e03      	subs	r3, r0, #0
   199e2:	d1f9      	bne.n	199d8 <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
   199e4:	68fb      	ldr	r3, [r7, #12]
   199e6:	781b      	ldrb	r3, [r3, #0]
   199e8:	b2db      	uxtb	r3, r3
   199ea:	2202      	movs	r2, #2
   199ec:	4313      	orrs	r3, r2
   199ee:	b2da      	uxtb	r2, r3
   199f0:	68fb      	ldr	r3, [r7, #12]
   199f2:	701a      	strb	r2, [r3, #0]
}
   199f4:	46c0      	nop			; (mov r8, r8)
   199f6:	46bd      	mov	sp, r7
   199f8:	b004      	add	sp, #16
   199fa:	bd80      	pop	{r7, pc}
   199fc:	00019969 	.word	0x00019969

00019a00 <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
   19a00:	b580      	push	{r7, lr}
   19a02:	b086      	sub	sp, #24
   19a04:	af00      	add	r7, sp, #0
   19a06:	6078      	str	r0, [r7, #4]
   19a08:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
   19a0a:	687b      	ldr	r3, [r7, #4]
   19a0c:	681b      	ldr	r3, [r3, #0]
   19a0e:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   19a10:	2300      	movs	r3, #0
   19a12:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   19a14:	2313      	movs	r3, #19
   19a16:	18fb      	adds	r3, r7, r3
   19a18:	2200      	movs	r2, #0
   19a1a:	701a      	strb	r2, [r3, #0]
   19a1c:	e017      	b.n	19a4e <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
   19a1e:	2313      	movs	r3, #19
   19a20:	18fb      	adds	r3, r7, r3
   19a22:	781b      	ldrb	r3, [r3, #0]
   19a24:	683a      	ldr	r2, [r7, #0]
   19a26:	5cd3      	ldrb	r3, [r2, r3]
   19a28:	2b00      	cmp	r3, #0
   19a2a:	d009      	beq.n	19a40 <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
   19a2c:	2313      	movs	r3, #19
   19a2e:	18fb      	adds	r3, r7, r3
   19a30:	781b      	ldrb	r3, [r3, #0]
   19a32:	2210      	movs	r2, #16
   19a34:	409a      	lsls	r2, r3
   19a36:	0013      	movs	r3, r2
   19a38:	001a      	movs	r2, r3
   19a3a:	697b      	ldr	r3, [r7, #20]
   19a3c:	4313      	orrs	r3, r2
   19a3e:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   19a40:	2313      	movs	r3, #19
   19a42:	18fb      	adds	r3, r7, r3
   19a44:	781a      	ldrb	r2, [r3, #0]
   19a46:	2313      	movs	r3, #19
   19a48:	18fb      	adds	r3, r7, r3
   19a4a:	3201      	adds	r2, #1
   19a4c:	701a      	strb	r2, [r3, #0]
   19a4e:	2313      	movs	r3, #19
   19a50:	18fb      	adds	r3, r7, r3
   19a52:	781b      	ldrb	r3, [r3, #0]
   19a54:	2b00      	cmp	r3, #0
   19a56:	d0e2      	beq.n	19a1e <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   19a58:	2312      	movs	r3, #18
   19a5a:	18fb      	adds	r3, r7, r3
   19a5c:	2200      	movs	r2, #0
   19a5e:	701a      	strb	r2, [r3, #0]
   19a60:	e02b      	b.n	19aba <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
   19a62:	2312      	movs	r3, #18
   19a64:	18fb      	adds	r3, r7, r3
   19a66:	781b      	ldrb	r3, [r3, #0]
   19a68:	683a      	ldr	r2, [r7, #0]
   19a6a:	18d3      	adds	r3, r2, r3
   19a6c:	78db      	ldrb	r3, [r3, #3]
   19a6e:	2b00      	cmp	r3, #0
   19a70:	d00a      	beq.n	19a88 <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
   19a72:	2312      	movs	r3, #18
   19a74:	18fb      	adds	r3, r7, r3
   19a76:	781b      	ldrb	r3, [r3, #0]
   19a78:	2280      	movs	r2, #128	; 0x80
   19a7a:	0052      	lsls	r2, r2, #1
   19a7c:	409a      	lsls	r2, r3
   19a7e:	0013      	movs	r3, r2
   19a80:	001a      	movs	r2, r3
   19a82:	697b      	ldr	r3, [r7, #20]
   19a84:	4313      	orrs	r3, r2
   19a86:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
   19a88:	2312      	movs	r3, #18
   19a8a:	18fb      	adds	r3, r7, r3
   19a8c:	781b      	ldrb	r3, [r3, #0]
   19a8e:	683a      	ldr	r2, [r7, #0]
   19a90:	18d3      	adds	r3, r2, r3
   19a92:	785b      	ldrb	r3, [r3, #1]
   19a94:	2b00      	cmp	r3, #0
   19a96:	d009      	beq.n	19aac <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
   19a98:	2312      	movs	r3, #18
   19a9a:	18fb      	adds	r3, r7, r3
   19a9c:	781b      	ldrb	r3, [r3, #0]
   19a9e:	2201      	movs	r2, #1
   19aa0:	409a      	lsls	r2, r3
   19aa2:	0013      	movs	r3, r2
   19aa4:	001a      	movs	r2, r3
   19aa6:	697b      	ldr	r3, [r7, #20]
   19aa8:	4313      	orrs	r3, r2
   19aaa:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   19aac:	2312      	movs	r3, #18
   19aae:	18fb      	adds	r3, r7, r3
   19ab0:	781a      	ldrb	r2, [r3, #0]
   19ab2:	2312      	movs	r3, #18
   19ab4:	18fb      	adds	r3, r7, r3
   19ab6:	3201      	adds	r2, #1
   19ab8:	701a      	strb	r2, [r3, #0]
   19aba:	2312      	movs	r3, #18
   19abc:	18fb      	adds	r3, r7, r3
   19abe:	781b      	ldrb	r3, [r3, #0]
   19ac0:	2b01      	cmp	r3, #1
   19ac2:	d9ce      	bls.n	19a62 <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
   19ac4:	68fb      	ldr	r3, [r7, #12]
   19ac6:	885b      	ldrh	r3, [r3, #2]
   19ac8:	b29a      	uxth	r2, r3
   19aca:	697b      	ldr	r3, [r7, #20]
   19acc:	b29b      	uxth	r3, r3
   19ace:	4313      	orrs	r3, r2
   19ad0:	b29a      	uxth	r2, r3
   19ad2:	68fb      	ldr	r3, [r7, #12]
   19ad4:	805a      	strh	r2, [r3, #2]
}
   19ad6:	46c0      	nop			; (mov r8, r8)
   19ad8:	46bd      	mov	sp, r7
   19ada:	b006      	add	sp, #24
   19adc:	bd80      	pop	{r7, pc}
	...

00019ae0 <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   19ae0:	b580      	push	{r7, lr}
   19ae2:	b084      	sub	sp, #16
   19ae4:	af00      	add	r7, sp, #0
   19ae6:	6078      	str	r0, [r7, #4]
   19ae8:	000a      	movs	r2, r1
   19aea:	1cfb      	adds	r3, r7, #3
   19aec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19aee:	687b      	ldr	r3, [r7, #4]
   19af0:	681b      	ldr	r3, [r3, #0]
   19af2:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   19af4:	46c0      	nop			; (mov r8, r8)
   19af6:	687b      	ldr	r3, [r7, #4]
   19af8:	0018      	movs	r0, r3
   19afa:	4b0b      	ldr	r3, [pc, #44]	; (19b28 <ac_chan_enable+0x48>)
   19afc:	4798      	blx	r3
   19afe:	1e03      	subs	r3, r0, #0
   19b00:	d1f9      	bne.n	19af6 <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
   19b02:	1cfb      	adds	r3, r7, #3
   19b04:	781a      	ldrb	r2, [r3, #0]
   19b06:	1cfb      	adds	r3, r7, #3
   19b08:	7819      	ldrb	r1, [r3, #0]
   19b0a:	68fb      	ldr	r3, [r7, #12]
   19b0c:	3104      	adds	r1, #4
   19b0e:	0089      	lsls	r1, r1, #2
   19b10:	58cb      	ldr	r3, [r1, r3]
   19b12:	2101      	movs	r1, #1
   19b14:	4319      	orrs	r1, r3
   19b16:	68fb      	ldr	r3, [r7, #12]
   19b18:	3204      	adds	r2, #4
   19b1a:	0092      	lsls	r2, r2, #2
   19b1c:	50d1      	str	r1, [r2, r3]
}
   19b1e:	46c0      	nop			; (mov r8, r8)
   19b20:	46bd      	mov	sp, r7
   19b22:	b004      	add	sp, #16
   19b24:	bd80      	pop	{r7, pc}
   19b26:	46c0      	nop			; (mov r8, r8)
   19b28:	00019969 	.word	0x00019969

00019b2c <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   19b2c:	b580      	push	{r7, lr}
   19b2e:	b084      	sub	sp, #16
   19b30:	af00      	add	r7, sp, #0
   19b32:	6078      	str	r0, [r7, #4]
   19b34:	000a      	movs	r2, r1
   19b36:	1cfb      	adds	r3, r7, #3
   19b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19b3a:	687b      	ldr	r3, [r7, #4]
   19b3c:	681b      	ldr	r3, [r3, #0]
   19b3e:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
   19b40:	68fb      	ldr	r3, [r7, #12]
   19b42:	7a5b      	ldrb	r3, [r3, #9]
   19b44:	b2db      	uxtb	r3, r3
   19b46:	0019      	movs	r1, r3
   19b48:	1cfb      	adds	r3, r7, #3
   19b4a:	781b      	ldrb	r3, [r3, #0]
   19b4c:	2201      	movs	r2, #1
   19b4e:	409a      	lsls	r2, r3
   19b50:	0013      	movs	r3, r2
   19b52:	400b      	ands	r3, r1
   19b54:	1e5a      	subs	r2, r3, #1
   19b56:	4193      	sbcs	r3, r2
   19b58:	b2db      	uxtb	r3, r3
}
   19b5a:	0018      	movs	r0, r3
   19b5c:	46bd      	mov	sp, r7
   19b5e:	b004      	add	sp, #16
   19b60:	bd80      	pop	{r7, pc}
	...

00019b64 <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   19b64:	b580      	push	{r7, lr}
   19b66:	b084      	sub	sp, #16
   19b68:	af00      	add	r7, sp, #0
   19b6a:	6078      	str	r0, [r7, #4]
   19b6c:	000a      	movs	r2, r1
   19b6e:	1cfb      	adds	r3, r7, #3
   19b70:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19b72:	687b      	ldr	r3, [r7, #4]
   19b74:	681b      	ldr	r3, [r3, #0]
   19b76:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
   19b78:	230f      	movs	r3, #15
   19b7a:	18fb      	adds	r3, r7, r3
   19b7c:	2200      	movs	r2, #0
   19b7e:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
   19b80:	68bb      	ldr	r3, [r7, #8]
   19b82:	799b      	ldrb	r3, [r3, #6]
   19b84:	b2db      	uxtb	r3, r3
   19b86:	001a      	movs	r2, r3
   19b88:	1cfb      	adds	r3, r7, #3
   19b8a:	781b      	ldrb	r3, [r3, #0]
   19b8c:	411a      	asrs	r2, r3
   19b8e:	0013      	movs	r3, r2
   19b90:	2201      	movs	r2, #1
   19b92:	4013      	ands	r3, r2
   19b94:	d003      	beq.n	19b9e <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
   19b96:	230f      	movs	r3, #15
   19b98:	18fb      	adds	r3, r7, r3
   19b9a:	2208      	movs	r2, #8
   19b9c:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
   19b9e:	1cfb      	adds	r3, r7, #3
   19ba0:	781a      	ldrb	r2, [r3, #0]
   19ba2:	687b      	ldr	r3, [r7, #4]
   19ba4:	0011      	movs	r1, r2
   19ba6:	0018      	movs	r0, r3
   19ba8:	4b1b      	ldr	r3, [pc, #108]	; (19c18 <ac_chan_get_status+0xb4>)
   19baa:	4798      	blx	r3
   19bac:	0003      	movs	r3, r0
   19bae:	001a      	movs	r2, r3
   19bb0:	2301      	movs	r3, #1
   19bb2:	4053      	eors	r3, r2
   19bb4:	b2db      	uxtb	r3, r3
   19bb6:	2b00      	cmp	r3, #0
   19bb8:	d00b      	beq.n	19bd2 <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
   19bba:	230f      	movs	r3, #15
   19bbc:	18fb      	adds	r3, r7, r3
   19bbe:	220f      	movs	r2, #15
   19bc0:	18ba      	adds	r2, r7, r2
   19bc2:	7812      	ldrb	r2, [r2, #0]
   19bc4:	2101      	movs	r1, #1
   19bc6:	430a      	orrs	r2, r1
   19bc8:	701a      	strb	r2, [r3, #0]
		return status_mask;
   19bca:	230f      	movs	r3, #15
   19bcc:	18fb      	adds	r3, r7, r3
   19bce:	781b      	ldrb	r3, [r3, #0]
   19bd0:	e01e      	b.n	19c10 <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
   19bd2:	68bb      	ldr	r3, [r7, #8]
   19bd4:	7a1b      	ldrb	r3, [r3, #8]
   19bd6:	b2db      	uxtb	r3, r3
   19bd8:	001a      	movs	r2, r3
   19bda:	1cfb      	adds	r3, r7, #3
   19bdc:	781b      	ldrb	r3, [r3, #0]
   19bde:	411a      	asrs	r2, r3
   19be0:	0013      	movs	r3, r2
   19be2:	2201      	movs	r2, #1
   19be4:	4013      	ands	r3, r2
   19be6:	d008      	beq.n	19bfa <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
   19be8:	230f      	movs	r3, #15
   19bea:	18fb      	adds	r3, r7, r3
   19bec:	220f      	movs	r2, #15
   19bee:	18ba      	adds	r2, r7, r2
   19bf0:	7812      	ldrb	r2, [r2, #0]
   19bf2:	2104      	movs	r1, #4
   19bf4:	430a      	orrs	r2, r1
   19bf6:	701a      	strb	r2, [r3, #0]
   19bf8:	e007      	b.n	19c0a <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
   19bfa:	230f      	movs	r3, #15
   19bfc:	18fb      	adds	r3, r7, r3
   19bfe:	220f      	movs	r2, #15
   19c00:	18ba      	adds	r2, r7, r2
   19c02:	7812      	ldrb	r2, [r2, #0]
   19c04:	2102      	movs	r1, #2
   19c06:	430a      	orrs	r2, r1
   19c08:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
   19c0a:	230f      	movs	r3, #15
   19c0c:	18fb      	adds	r3, r7, r3
   19c0e:	781b      	ldrb	r3, [r3, #0]
}
   19c10:	0018      	movs	r0, r3
   19c12:	46bd      	mov	sp, r7
   19c14:	b004      	add	sp, #16
   19c16:	bd80      	pop	{r7, pc}
   19c18:	00019b2d 	.word	0x00019b2d

00019c1c <system_interrupt_enable>:
{
   19c1c:	b580      	push	{r7, lr}
   19c1e:	b082      	sub	sp, #8
   19c20:	af00      	add	r7, sp, #0
   19c22:	0002      	movs	r2, r0
   19c24:	1dfb      	adds	r3, r7, #7
   19c26:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19c28:	4b06      	ldr	r3, [pc, #24]	; (19c44 <system_interrupt_enable+0x28>)
   19c2a:	1dfa      	adds	r2, r7, #7
   19c2c:	7812      	ldrb	r2, [r2, #0]
   19c2e:	0011      	movs	r1, r2
   19c30:	221f      	movs	r2, #31
   19c32:	400a      	ands	r2, r1
   19c34:	2101      	movs	r1, #1
   19c36:	4091      	lsls	r1, r2
   19c38:	000a      	movs	r2, r1
   19c3a:	601a      	str	r2, [r3, #0]
}
   19c3c:	46c0      	nop			; (mov r8, r8)
   19c3e:	46bd      	mov	sp, r7
   19c40:	b002      	add	sp, #8
   19c42:	bd80      	pop	{r7, pc}
   19c44:	e000e100 	.word	0xe000e100

00019c48 <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
   19c48:	b580      	push	{r7, lr}
   19c4a:	b084      	sub	sp, #16
   19c4c:	af00      	add	r7, sp, #0
   19c4e:	6078      	str	r0, [r7, #4]
   19c50:	000a      	movs	r2, r1
   19c52:	1cfb      	adds	r3, r7, #3
   19c54:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
   19c56:	687b      	ldr	r3, [r7, #4]
   19c58:	7e5b      	ldrb	r3, [r3, #25]
   19c5a:	b25a      	sxtb	r2, r3
   19c5c:	1cfb      	adds	r3, r7, #3
   19c5e:	781b      	ldrb	r3, [r3, #0]
   19c60:	2101      	movs	r1, #1
   19c62:	4099      	lsls	r1, r3
   19c64:	000b      	movs	r3, r1
   19c66:	b25b      	sxtb	r3, r3
   19c68:	4313      	orrs	r3, r2
   19c6a:	b25b      	sxtb	r3, r3
   19c6c:	b2da      	uxtb	r2, r3
   19c6e:	687b      	ldr	r3, [r7, #4]
   19c70:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
   19c72:	2300      	movs	r3, #0
   19c74:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
   19c76:	1cfb      	adds	r3, r7, #3
   19c78:	781b      	ldrb	r3, [r3, #0]
   19c7a:	2b01      	cmp	r3, #1
   19c7c:	d009      	beq.n	19c92 <ac_enable_callback+0x4a>
   19c7e:	2b04      	cmp	r3, #4
   19c80:	d00c      	beq.n	19c9c <ac_enable_callback+0x54>
   19c82:	2b00      	cmp	r3, #0
   19c84:	d000      	beq.n	19c88 <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
   19c86:	e00e      	b.n	19ca6 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
   19c88:	68fb      	ldr	r3, [r7, #12]
   19c8a:	2201      	movs	r2, #1
   19c8c:	4313      	orrs	r3, r2
   19c8e:	60fb      	str	r3, [r7, #12]
			break;
   19c90:	e009      	b.n	19ca6 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
   19c92:	68fb      	ldr	r3, [r7, #12]
   19c94:	2202      	movs	r2, #2
   19c96:	4313      	orrs	r3, r2
   19c98:	60fb      	str	r3, [r7, #12]
			break;
   19c9a:	e004      	b.n	19ca6 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
   19c9c:	68fb      	ldr	r3, [r7, #12]
   19c9e:	2210      	movs	r2, #16
   19ca0:	4313      	orrs	r3, r2
   19ca2:	60fb      	str	r3, [r7, #12]
			break;
   19ca4:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
   19ca6:	687b      	ldr	r3, [r7, #4]
   19ca8:	681b      	ldr	r3, [r3, #0]
   19caa:	68fa      	ldr	r2, [r7, #12]
   19cac:	b2d2      	uxtb	r2, r2
   19cae:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
   19cb0:	2018      	movs	r0, #24
   19cb2:	4b03      	ldr	r3, [pc, #12]	; (19cc0 <ac_enable_callback+0x78>)
   19cb4:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
   19cb6:	46c0      	nop			; (mov r8, r8)
   19cb8:	46bd      	mov	sp, r7
   19cba:	b004      	add	sp, #16
   19cbc:	bd80      	pop	{r7, pc}
   19cbe:	46c0      	nop			; (mov r8, r8)
   19cc0:	00019c1d 	.word	0x00019c1d

00019cc4 <system_pinmux_get_group_from_gpio_pin>:
{
   19cc4:	b580      	push	{r7, lr}
   19cc6:	b084      	sub	sp, #16
   19cc8:	af00      	add	r7, sp, #0
   19cca:	0002      	movs	r2, r0
   19ccc:	1dfb      	adds	r3, r7, #7
   19cce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   19cd0:	230f      	movs	r3, #15
   19cd2:	18fb      	adds	r3, r7, r3
   19cd4:	1dfa      	adds	r2, r7, #7
   19cd6:	7812      	ldrb	r2, [r2, #0]
   19cd8:	09d2      	lsrs	r2, r2, #7
   19cda:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   19cdc:	230e      	movs	r3, #14
   19cde:	18fb      	adds	r3, r7, r3
   19ce0:	1dfa      	adds	r2, r7, #7
   19ce2:	7812      	ldrb	r2, [r2, #0]
   19ce4:	0952      	lsrs	r2, r2, #5
   19ce6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   19ce8:	4b0d      	ldr	r3, [pc, #52]	; (19d20 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   19cea:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   19cec:	230f      	movs	r3, #15
   19cee:	18fb      	adds	r3, r7, r3
   19cf0:	781b      	ldrb	r3, [r3, #0]
   19cf2:	2b00      	cmp	r3, #0
   19cf4:	d10f      	bne.n	19d16 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   19cf6:	230f      	movs	r3, #15
   19cf8:	18fb      	adds	r3, r7, r3
   19cfa:	781b      	ldrb	r3, [r3, #0]
   19cfc:	009b      	lsls	r3, r3, #2
   19cfe:	2210      	movs	r2, #16
   19d00:	4694      	mov	ip, r2
   19d02:	44bc      	add	ip, r7
   19d04:	4463      	add	r3, ip
   19d06:	3b08      	subs	r3, #8
   19d08:	681a      	ldr	r2, [r3, #0]
   19d0a:	230e      	movs	r3, #14
   19d0c:	18fb      	adds	r3, r7, r3
   19d0e:	781b      	ldrb	r3, [r3, #0]
   19d10:	01db      	lsls	r3, r3, #7
   19d12:	18d3      	adds	r3, r2, r3
   19d14:	e000      	b.n	19d18 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   19d16:	2300      	movs	r3, #0
}
   19d18:	0018      	movs	r0, r3
   19d1a:	46bd      	mov	sp, r7
   19d1c:	b004      	add	sp, #16
   19d1e:	bd80      	pop	{r7, pc}
   19d20:	41004400 	.word	0x41004400

00019d24 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   19d24:	b580      	push	{r7, lr}
   19d26:	b084      	sub	sp, #16
   19d28:	af00      	add	r7, sp, #0
   19d2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   19d2c:	687b      	ldr	r3, [r7, #4]
   19d2e:	681b      	ldr	r3, [r3, #0]
   19d30:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   19d32:	68fb      	ldr	r3, [r7, #12]
   19d34:	7e5b      	ldrb	r3, [r3, #25]
   19d36:	b2db      	uxtb	r3, r3
   19d38:	b25b      	sxtb	r3, r3
   19d3a:	2b00      	cmp	r3, #0
   19d3c:	da01      	bge.n	19d42 <adc_is_syncing+0x1e>
		return true;
   19d3e:	2301      	movs	r3, #1
   19d40:	e000      	b.n	19d44 <adc_is_syncing+0x20>
	}

	return false;
   19d42:	2300      	movs	r3, #0
}
   19d44:	0018      	movs	r0, r3
   19d46:	46bd      	mov	sp, r7
   19d48:	b004      	add	sp, #16
   19d4a:	bd80      	pop	{r7, pc}

00019d4c <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   19d4c:	b580      	push	{r7, lr}
   19d4e:	b086      	sub	sp, #24
   19d50:	af00      	add	r7, sp, #0
   19d52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19d54:	687b      	ldr	r3, [r7, #4]
   19d56:	681b      	ldr	r3, [r3, #0]
   19d58:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   19d5a:	693b      	ldr	r3, [r7, #16]
   19d5c:	7e1b      	ldrb	r3, [r3, #24]
   19d5e:	b2db      	uxtb	r3, r3
   19d60:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   19d62:	2300      	movs	r3, #0
   19d64:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   19d66:	68fb      	ldr	r3, [r7, #12]
   19d68:	2201      	movs	r2, #1
   19d6a:	4013      	ands	r3, r2
   19d6c:	d003      	beq.n	19d76 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   19d6e:	697b      	ldr	r3, [r7, #20]
   19d70:	2201      	movs	r2, #1
   19d72:	4313      	orrs	r3, r2
   19d74:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   19d76:	68fb      	ldr	r3, [r7, #12]
   19d78:	2204      	movs	r2, #4
   19d7a:	4013      	ands	r3, r2
   19d7c:	d003      	beq.n	19d86 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   19d7e:	697b      	ldr	r3, [r7, #20]
   19d80:	2202      	movs	r2, #2
   19d82:	4313      	orrs	r3, r2
   19d84:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   19d86:	68fb      	ldr	r3, [r7, #12]
   19d88:	2202      	movs	r2, #2
   19d8a:	4013      	ands	r3, r2
   19d8c:	d003      	beq.n	19d96 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   19d8e:	697b      	ldr	r3, [r7, #20]
   19d90:	2204      	movs	r2, #4
   19d92:	4313      	orrs	r3, r2
   19d94:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   19d96:	697b      	ldr	r3, [r7, #20]
}
   19d98:	0018      	movs	r0, r3
   19d9a:	46bd      	mov	sp, r7
   19d9c:	b006      	add	sp, #24
   19d9e:	bd80      	pop	{r7, pc}

00019da0 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   19da0:	b580      	push	{r7, lr}
   19da2:	b084      	sub	sp, #16
   19da4:	af00      	add	r7, sp, #0
   19da6:	6078      	str	r0, [r7, #4]
   19da8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19daa:	687b      	ldr	r3, [r7, #4]
   19dac:	681b      	ldr	r3, [r3, #0]
   19dae:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   19db0:	2300      	movs	r3, #0
   19db2:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   19db4:	683b      	ldr	r3, [r7, #0]
   19db6:	2201      	movs	r2, #1
   19db8:	4013      	ands	r3, r2
   19dba:	d003      	beq.n	19dc4 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   19dbc:	68fb      	ldr	r3, [r7, #12]
   19dbe:	2201      	movs	r2, #1
   19dc0:	4313      	orrs	r3, r2
   19dc2:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   19dc4:	683b      	ldr	r3, [r7, #0]
   19dc6:	2202      	movs	r2, #2
   19dc8:	4013      	ands	r3, r2
   19dca:	d003      	beq.n	19dd4 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   19dcc:	68fb      	ldr	r3, [r7, #12]
   19dce:	2204      	movs	r2, #4
   19dd0:	4313      	orrs	r3, r2
   19dd2:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   19dd4:	683b      	ldr	r3, [r7, #0]
   19dd6:	2204      	movs	r2, #4
   19dd8:	4013      	ands	r3, r2
   19dda:	d003      	beq.n	19de4 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   19ddc:	68fb      	ldr	r3, [r7, #12]
   19dde:	2202      	movs	r2, #2
   19de0:	4313      	orrs	r3, r2
   19de2:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   19de4:	68fb      	ldr	r3, [r7, #12]
   19de6:	b2da      	uxtb	r2, r3
   19de8:	68bb      	ldr	r3, [r7, #8]
   19dea:	761a      	strb	r2, [r3, #24]
}
   19dec:	46c0      	nop			; (mov r8, r8)
   19dee:	46bd      	mov	sp, r7
   19df0:	b004      	add	sp, #16
   19df2:	bd80      	pop	{r7, pc}

00019df4 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   19df4:	b580      	push	{r7, lr}
   19df6:	b084      	sub	sp, #16
   19df8:	af00      	add	r7, sp, #0
   19dfa:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19dfc:	687b      	ldr	r3, [r7, #4]
   19dfe:	681b      	ldr	r3, [r3, #0]
   19e00:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19e02:	46c0      	nop			; (mov r8, r8)
   19e04:	687b      	ldr	r3, [r7, #4]
   19e06:	0018      	movs	r0, r3
   19e08:	4b10      	ldr	r3, [pc, #64]	; (19e4c <adc_enable+0x58>)
   19e0a:	4798      	blx	r3
   19e0c:	1e03      	subs	r3, r0, #0
   19e0e:	d1f9      	bne.n	19e04 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   19e10:	2017      	movs	r0, #23
   19e12:	4b0f      	ldr	r3, [pc, #60]	; (19e50 <adc_enable+0x5c>)
   19e14:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   19e16:	68fb      	ldr	r3, [r7, #12]
   19e18:	220f      	movs	r2, #15
   19e1a:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   19e1c:	68fb      	ldr	r3, [r7, #12]
   19e1e:	220f      	movs	r2, #15
   19e20:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   19e22:	68fb      	ldr	r3, [r7, #12]
   19e24:	781b      	ldrb	r3, [r3, #0]
   19e26:	b2db      	uxtb	r3, r3
   19e28:	2202      	movs	r2, #2
   19e2a:	4313      	orrs	r3, r2
   19e2c:	b2da      	uxtb	r2, r3
   19e2e:	68fb      	ldr	r3, [r7, #12]
   19e30:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   19e32:	46c0      	nop			; (mov r8, r8)
   19e34:	687b      	ldr	r3, [r7, #4]
   19e36:	0018      	movs	r0, r3
   19e38:	4b04      	ldr	r3, [pc, #16]	; (19e4c <adc_enable+0x58>)
   19e3a:	4798      	blx	r3
   19e3c:	1e03      	subs	r3, r0, #0
   19e3e:	d1f9      	bne.n	19e34 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   19e40:	2300      	movs	r3, #0
}
   19e42:	0018      	movs	r0, r3
   19e44:	46bd      	mov	sp, r7
   19e46:	b004      	add	sp, #16
   19e48:	bd80      	pop	{r7, pc}
   19e4a:	46c0      	nop			; (mov r8, r8)
   19e4c:	00019d25 	.word	0x00019d25
   19e50:	00019c1d 	.word	0x00019c1d

00019e54 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   19e54:	b580      	push	{r7, lr}
   19e56:	b084      	sub	sp, #16
   19e58:	af00      	add	r7, sp, #0
   19e5a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19e5c:	687b      	ldr	r3, [r7, #4]
   19e5e:	681b      	ldr	r3, [r3, #0]
   19e60:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19e62:	46c0      	nop			; (mov r8, r8)
   19e64:	687b      	ldr	r3, [r7, #4]
   19e66:	0018      	movs	r0, r3
   19e68:	4b0b      	ldr	r3, [pc, #44]	; (19e98 <adc_start_conversion+0x44>)
   19e6a:	4798      	blx	r3
   19e6c:	1e03      	subs	r3, r0, #0
   19e6e:	d1f9      	bne.n	19e64 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   19e70:	68fb      	ldr	r3, [r7, #12]
   19e72:	7b1b      	ldrb	r3, [r3, #12]
   19e74:	b2db      	uxtb	r3, r3
   19e76:	2202      	movs	r2, #2
   19e78:	4313      	orrs	r3, r2
   19e7a:	b2da      	uxtb	r2, r3
   19e7c:	68fb      	ldr	r3, [r7, #12]
   19e7e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   19e80:	46c0      	nop			; (mov r8, r8)
   19e82:	687b      	ldr	r3, [r7, #4]
   19e84:	0018      	movs	r0, r3
   19e86:	4b04      	ldr	r3, [pc, #16]	; (19e98 <adc_start_conversion+0x44>)
   19e88:	4798      	blx	r3
   19e8a:	1e03      	subs	r3, r0, #0
   19e8c:	d1f9      	bne.n	19e82 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   19e8e:	46c0      	nop			; (mov r8, r8)
   19e90:	46bd      	mov	sp, r7
   19e92:	b004      	add	sp, #16
   19e94:	bd80      	pop	{r7, pc}
   19e96:	46c0      	nop			; (mov r8, r8)
   19e98:	00019d25 	.word	0x00019d25

00019e9c <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   19e9c:	b580      	push	{r7, lr}
   19e9e:	b084      	sub	sp, #16
   19ea0:	af00      	add	r7, sp, #0
   19ea2:	6078      	str	r0, [r7, #4]
   19ea4:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   19ea6:	687b      	ldr	r3, [r7, #4]
   19ea8:	0018      	movs	r0, r3
   19eaa:	4b18      	ldr	r3, [pc, #96]	; (19f0c <adc_read+0x70>)
   19eac:	4798      	blx	r3
   19eae:	0002      	movs	r2, r0
   19eb0:	2301      	movs	r3, #1
   19eb2:	4013      	ands	r3, r2
   19eb4:	d101      	bne.n	19eba <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   19eb6:	2305      	movs	r3, #5
   19eb8:	e023      	b.n	19f02 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   19eba:	687b      	ldr	r3, [r7, #4]
   19ebc:	681b      	ldr	r3, [r3, #0]
   19ebe:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   19ec0:	46c0      	nop			; (mov r8, r8)
   19ec2:	687b      	ldr	r3, [r7, #4]
   19ec4:	0018      	movs	r0, r3
   19ec6:	4b12      	ldr	r3, [pc, #72]	; (19f10 <adc_read+0x74>)
   19ec8:	4798      	blx	r3
   19eca:	1e03      	subs	r3, r0, #0
   19ecc:	d1f9      	bne.n	19ec2 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   19ece:	68fb      	ldr	r3, [r7, #12]
   19ed0:	8b5b      	ldrh	r3, [r3, #26]
   19ed2:	b29a      	uxth	r2, r3
   19ed4:	683b      	ldr	r3, [r7, #0]
   19ed6:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   19ed8:	687b      	ldr	r3, [r7, #4]
   19eda:	2101      	movs	r1, #1
   19edc:	0018      	movs	r0, r3
   19ede:	4b0d      	ldr	r3, [pc, #52]	; (19f14 <adc_read+0x78>)
   19ee0:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   19ee2:	687b      	ldr	r3, [r7, #4]
   19ee4:	0018      	movs	r0, r3
   19ee6:	4b09      	ldr	r3, [pc, #36]	; (19f0c <adc_read+0x70>)
   19ee8:	4798      	blx	r3
   19eea:	0002      	movs	r2, r0
   19eec:	2304      	movs	r3, #4
   19eee:	4013      	ands	r3, r2
   19ef0:	d006      	beq.n	19f00 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   19ef2:	687b      	ldr	r3, [r7, #4]
   19ef4:	2104      	movs	r1, #4
   19ef6:	0018      	movs	r0, r3
   19ef8:	4b06      	ldr	r3, [pc, #24]	; (19f14 <adc_read+0x78>)
   19efa:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   19efc:	231e      	movs	r3, #30
   19efe:	e000      	b.n	19f02 <adc_read+0x66>
	}

	return STATUS_OK;
   19f00:	2300      	movs	r3, #0
}
   19f02:	0018      	movs	r0, r3
   19f04:	46bd      	mov	sp, r7
   19f06:	b004      	add	sp, #16
   19f08:	bd80      	pop	{r7, pc}
   19f0a:	46c0      	nop			; (mov r8, r8)
   19f0c:	00019d4d 	.word	0x00019d4d
   19f10:	00019d25 	.word	0x00019d25
   19f14:	00019da1 	.word	0x00019da1

00019f18 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
   19f18:	b580      	push	{r7, lr}
   19f1a:	b084      	sub	sp, #16
   19f1c:	af00      	add	r7, sp, #0
   19f1e:	6078      	str	r0, [r7, #4]
   19f20:	000a      	movs	r2, r1
   19f22:	1cfb      	adds	r3, r7, #3
   19f24:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19f26:	687b      	ldr	r3, [r7, #4]
   19f28:	681b      	ldr	r3, [r3, #0]
   19f2a:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19f2c:	46c0      	nop			; (mov r8, r8)
   19f2e:	687b      	ldr	r3, [r7, #4]
   19f30:	0018      	movs	r0, r3
   19f32:	4b0c      	ldr	r3, [pc, #48]	; (19f64 <adc_set_positive_input+0x4c>)
   19f34:	4798      	blx	r3
   19f36:	1e03      	subs	r3, r0, #0
   19f38:	d1f9      	bne.n	19f2e <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
   19f3a:	68fb      	ldr	r3, [r7, #12]
   19f3c:	691b      	ldr	r3, [r3, #16]
   19f3e:	221f      	movs	r2, #31
   19f40:	4393      	bics	r3, r2
   19f42:	001a      	movs	r2, r3
   19f44:	1cfb      	adds	r3, r7, #3
   19f46:	781b      	ldrb	r3, [r3, #0]
   19f48:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   19f4a:	68fb      	ldr	r3, [r7, #12]
   19f4c:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
   19f4e:	46c0      	nop			; (mov r8, r8)
   19f50:	687b      	ldr	r3, [r7, #4]
   19f52:	0018      	movs	r0, r3
   19f54:	4b03      	ldr	r3, [pc, #12]	; (19f64 <adc_set_positive_input+0x4c>)
   19f56:	4798      	blx	r3
   19f58:	1e03      	subs	r3, r0, #0
   19f5a:	d1f9      	bne.n	19f50 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
   19f5c:	46c0      	nop			; (mov r8, r8)
   19f5e:	46bd      	mov	sp, r7
   19f60:	b004      	add	sp, #16
   19f62:	bd80      	pop	{r7, pc}
   19f64:	00019d25 	.word	0x00019d25

00019f68 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   19f68:	b580      	push	{r7, lr}
   19f6a:	b084      	sub	sp, #16
   19f6c:	af00      	add	r7, sp, #0
   19f6e:	6078      	str	r0, [r7, #4]
   19f70:	000a      	movs	r2, r1
   19f72:	1cfb      	adds	r3, r7, #3
   19f74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19f76:	687b      	ldr	r3, [r7, #4]
   19f78:	681b      	ldr	r3, [r3, #0]
   19f7a:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
   19f7c:	68fb      	ldr	r3, [r7, #12]
   19f7e:	1cfa      	adds	r2, r7, #3
   19f80:	7812      	ldrb	r2, [r2, #0]
   19f82:	75da      	strb	r2, [r3, #23]
}
   19f84:	46c0      	nop			; (mov r8, r8)
   19f86:	46bd      	mov	sp, r7
   19f88:	b004      	add	sp, #16
   19f8a:	bd80      	pop	{r7, pc}

00019f8c <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
   19f8c:	b580      	push	{r7, lr}
   19f8e:	b082      	sub	sp, #8
   19f90:	af00      	add	r7, sp, #0
   19f92:	6078      	str	r0, [r7, #4]
   19f94:	000a      	movs	r2, r1
   19f96:	1cfb      	adds	r3, r7, #3
   19f98:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
   19f9a:	687b      	ldr	r3, [r7, #4]
   19f9c:	7edb      	ldrb	r3, [r3, #27]
   19f9e:	b25a      	sxtb	r2, r3
   19fa0:	1cfb      	adds	r3, r7, #3
   19fa2:	781b      	ldrb	r3, [r3, #0]
   19fa4:	2101      	movs	r1, #1
   19fa6:	4099      	lsls	r1, r3
   19fa8:	000b      	movs	r3, r1
   19faa:	b25b      	sxtb	r3, r3
   19fac:	4313      	orrs	r3, r2
   19fae:	b25b      	sxtb	r3, r3
   19fb0:	b2da      	uxtb	r2, r3
   19fb2:	687b      	ldr	r3, [r7, #4]
   19fb4:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
   19fb6:	1cfb      	adds	r3, r7, #3
   19fb8:	781b      	ldrb	r3, [r3, #0]
   19fba:	2b01      	cmp	r3, #1
   19fbc:	d104      	bne.n	19fc8 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
   19fbe:	687b      	ldr	r3, [r7, #4]
   19fc0:	2104      	movs	r1, #4
   19fc2:	0018      	movs	r0, r3
   19fc4:	4b07      	ldr	r3, [pc, #28]	; (19fe4 <adc_enable_callback+0x58>)
   19fc6:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
   19fc8:	1cfb      	adds	r3, r7, #3
   19fca:	781b      	ldrb	r3, [r3, #0]
   19fcc:	2b02      	cmp	r3, #2
   19fce:	d104      	bne.n	19fda <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
   19fd0:	687b      	ldr	r3, [r7, #4]
   19fd2:	2102      	movs	r1, #2
   19fd4:	0018      	movs	r0, r3
   19fd6:	4b03      	ldr	r3, [pc, #12]	; (19fe4 <adc_enable_callback+0x58>)
   19fd8:	4798      	blx	r3
	}
}
   19fda:	46c0      	nop			; (mov r8, r8)
   19fdc:	46bd      	mov	sp, r7
   19fde:	b002      	add	sp, #8
   19fe0:	bd80      	pop	{r7, pc}
   19fe2:	46c0      	nop			; (mov r8, r8)
   19fe4:	00019f69 	.word	0x00019f69

00019fe8 <port_get_group_from_gpio_pin>:
{
   19fe8:	b580      	push	{r7, lr}
   19fea:	b082      	sub	sp, #8
   19fec:	af00      	add	r7, sp, #0
   19fee:	0002      	movs	r2, r0
   19ff0:	1dfb      	adds	r3, r7, #7
   19ff2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   19ff4:	1dfb      	adds	r3, r7, #7
   19ff6:	781b      	ldrb	r3, [r3, #0]
   19ff8:	0018      	movs	r0, r3
   19ffa:	4b03      	ldr	r3, [pc, #12]	; (1a008 <port_get_group_from_gpio_pin+0x20>)
   19ffc:	4798      	blx	r3
   19ffe:	0003      	movs	r3, r0
}
   1a000:	0018      	movs	r0, r3
   1a002:	46bd      	mov	sp, r7
   1a004:	b002      	add	sp, #8
   1a006:	bd80      	pop	{r7, pc}
   1a008:	00019cc5 	.word	0x00019cc5

0001a00c <port_get_config_defaults>:
{
   1a00c:	b580      	push	{r7, lr}
   1a00e:	b082      	sub	sp, #8
   1a010:	af00      	add	r7, sp, #0
   1a012:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1a014:	687b      	ldr	r3, [r7, #4]
   1a016:	2200      	movs	r2, #0
   1a018:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1a01a:	687b      	ldr	r3, [r7, #4]
   1a01c:	2201      	movs	r2, #1
   1a01e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1a020:	687b      	ldr	r3, [r7, #4]
   1a022:	2200      	movs	r2, #0
   1a024:	709a      	strb	r2, [r3, #2]
}
   1a026:	46c0      	nop			; (mov r8, r8)
   1a028:	46bd      	mov	sp, r7
   1a02a:	b002      	add	sp, #8
   1a02c:	bd80      	pop	{r7, pc}
	...

0001a030 <port_pin_get_input_level>:
{
   1a030:	b580      	push	{r7, lr}
   1a032:	b084      	sub	sp, #16
   1a034:	af00      	add	r7, sp, #0
   1a036:	0002      	movs	r2, r0
   1a038:	1dfb      	adds	r3, r7, #7
   1a03a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1a03c:	1dfb      	adds	r3, r7, #7
   1a03e:	781b      	ldrb	r3, [r3, #0]
   1a040:	0018      	movs	r0, r3
   1a042:	4b0b      	ldr	r3, [pc, #44]	; (1a070 <port_pin_get_input_level+0x40>)
   1a044:	4798      	blx	r3
   1a046:	0003      	movs	r3, r0
   1a048:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1a04a:	1dfb      	adds	r3, r7, #7
   1a04c:	781b      	ldrb	r3, [r3, #0]
   1a04e:	221f      	movs	r2, #31
   1a050:	4013      	ands	r3, r2
   1a052:	2201      	movs	r2, #1
   1a054:	409a      	lsls	r2, r3
   1a056:	0013      	movs	r3, r2
   1a058:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   1a05a:	68fb      	ldr	r3, [r7, #12]
   1a05c:	6a1b      	ldr	r3, [r3, #32]
   1a05e:	68ba      	ldr	r2, [r7, #8]
   1a060:	4013      	ands	r3, r2
   1a062:	1e5a      	subs	r2, r3, #1
   1a064:	4193      	sbcs	r3, r2
   1a066:	b2db      	uxtb	r3, r3
}
   1a068:	0018      	movs	r0, r3
   1a06a:	46bd      	mov	sp, r7
   1a06c:	b004      	add	sp, #16
   1a06e:	bd80      	pop	{r7, pc}
   1a070:	00019fe9 	.word	0x00019fe9

0001a074 <port_pin_set_output_level>:
{
   1a074:	b580      	push	{r7, lr}
   1a076:	b084      	sub	sp, #16
   1a078:	af00      	add	r7, sp, #0
   1a07a:	0002      	movs	r2, r0
   1a07c:	1dfb      	adds	r3, r7, #7
   1a07e:	701a      	strb	r2, [r3, #0]
   1a080:	1dbb      	adds	r3, r7, #6
   1a082:	1c0a      	adds	r2, r1, #0
   1a084:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1a086:	1dfb      	adds	r3, r7, #7
   1a088:	781b      	ldrb	r3, [r3, #0]
   1a08a:	0018      	movs	r0, r3
   1a08c:	4b0d      	ldr	r3, [pc, #52]	; (1a0c4 <port_pin_set_output_level+0x50>)
   1a08e:	4798      	blx	r3
   1a090:	0003      	movs	r3, r0
   1a092:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1a094:	1dfb      	adds	r3, r7, #7
   1a096:	781b      	ldrb	r3, [r3, #0]
   1a098:	221f      	movs	r2, #31
   1a09a:	4013      	ands	r3, r2
   1a09c:	2201      	movs	r2, #1
   1a09e:	409a      	lsls	r2, r3
   1a0a0:	0013      	movs	r3, r2
   1a0a2:	60bb      	str	r3, [r7, #8]
	if (level) {
   1a0a4:	1dbb      	adds	r3, r7, #6
   1a0a6:	781b      	ldrb	r3, [r3, #0]
   1a0a8:	2b00      	cmp	r3, #0
   1a0aa:	d003      	beq.n	1a0b4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1a0ac:	68fb      	ldr	r3, [r7, #12]
   1a0ae:	68ba      	ldr	r2, [r7, #8]
   1a0b0:	619a      	str	r2, [r3, #24]
}
   1a0b2:	e002      	b.n	1a0ba <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1a0b4:	68fb      	ldr	r3, [r7, #12]
   1a0b6:	68ba      	ldr	r2, [r7, #8]
   1a0b8:	615a      	str	r2, [r3, #20]
}
   1a0ba:	46c0      	nop			; (mov r8, r8)
   1a0bc:	46bd      	mov	sp, r7
   1a0be:	b004      	add	sp, #16
   1a0c0:	bd80      	pop	{r7, pc}
   1a0c2:	46c0      	nop			; (mov r8, r8)
   1a0c4:	00019fe9 	.word	0x00019fe9

0001a0c8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   1a0c8:	b580      	push	{r7, lr}
   1a0ca:	b084      	sub	sp, #16
   1a0cc:	af00      	add	r7, sp, #0
   1a0ce:	0002      	movs	r2, r0
   1a0d0:	1dfb      	adds	r3, r7, #7
   1a0d2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1a0d4:	230f      	movs	r3, #15
   1a0d6:	18fb      	adds	r3, r7, r3
   1a0d8:	1dfa      	adds	r2, r7, #7
   1a0da:	7812      	ldrb	r2, [r2, #0]
   1a0dc:	0952      	lsrs	r2, r2, #5
   1a0de:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   1a0e0:	230f      	movs	r3, #15
   1a0e2:	18fb      	adds	r3, r7, r3
   1a0e4:	781b      	ldrb	r3, [r3, #0]
   1a0e6:	2b00      	cmp	r3, #0
   1a0e8:	d10c      	bne.n	1a104 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1a0ea:	4b09      	ldr	r3, [pc, #36]	; (1a110 <_extint_get_eic_from_channel+0x48>)
   1a0ec:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   1a0ee:	230f      	movs	r3, #15
   1a0f0:	18fb      	adds	r3, r7, r3
   1a0f2:	781b      	ldrb	r3, [r3, #0]
   1a0f4:	009b      	lsls	r3, r3, #2
   1a0f6:	2210      	movs	r2, #16
   1a0f8:	4694      	mov	ip, r2
   1a0fa:	44bc      	add	ip, r7
   1a0fc:	4463      	add	r3, ip
   1a0fe:	3b08      	subs	r3, #8
   1a100:	681b      	ldr	r3, [r3, #0]
   1a102:	e000      	b.n	1a106 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   1a104:	2300      	movs	r3, #0
	}
}
   1a106:	0018      	movs	r0, r3
   1a108:	46bd      	mov	sp, r7
   1a10a:	b004      	add	sp, #16
   1a10c:	bd80      	pop	{r7, pc}
   1a10e:	46c0      	nop			; (mov r8, r8)
   1a110:	40001800 	.word	0x40001800

0001a114 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   1a114:	b580      	push	{r7, lr}
   1a116:	b084      	sub	sp, #16
   1a118:	af00      	add	r7, sp, #0
   1a11a:	0002      	movs	r2, r0
   1a11c:	1dfb      	adds	r3, r7, #7
   1a11e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   1a120:	1dfb      	adds	r3, r7, #7
   1a122:	781b      	ldrb	r3, [r3, #0]
   1a124:	0018      	movs	r0, r3
   1a126:	4b09      	ldr	r3, [pc, #36]	; (1a14c <extint_chan_clear_detected+0x38>)
   1a128:	4798      	blx	r3
   1a12a:	0003      	movs	r3, r0
   1a12c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1a12e:	1dfb      	adds	r3, r7, #7
   1a130:	781b      	ldrb	r3, [r3, #0]
   1a132:	221f      	movs	r2, #31
   1a134:	4013      	ands	r3, r2
   1a136:	2201      	movs	r2, #1
   1a138:	409a      	lsls	r2, r3
   1a13a:	0013      	movs	r3, r2
   1a13c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   1a13e:	68fb      	ldr	r3, [r7, #12]
   1a140:	68ba      	ldr	r2, [r7, #8]
   1a142:	611a      	str	r2, [r3, #16]
}
   1a144:	46c0      	nop			; (mov r8, r8)
   1a146:	46bd      	mov	sp, r7
   1a148:	b004      	add	sp, #16
   1a14a:	bd80      	pop	{r7, pc}
   1a14c:	0001a0c9 	.word	0x0001a0c9

0001a150 <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
   1a150:	b580      	push	{r7, lr}
   1a152:	b082      	sub	sp, #8
   1a154:	af00      	add	r7, sp, #0
   1a156:	6078      	str	r0, [r7, #4]
   1a158:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
   1a15a:	200d      	movs	r0, #13
   1a15c:	4b08      	ldr	r3, [pc, #32]	; (1a180 <readOverHeadWaterSensorState+0x30>)
   1a15e:	4798      	blx	r3
   1a160:	0003      	movs	r3, r0
   1a162:	001a      	movs	r2, r3
   1a164:	687b      	ldr	r3, [r7, #4]
   1a166:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
   1a168:	202f      	movs	r0, #47	; 0x2f
   1a16a:	4b05      	ldr	r3, [pc, #20]	; (1a180 <readOverHeadWaterSensorState+0x30>)
   1a16c:	4798      	blx	r3
   1a16e:	0003      	movs	r3, r0
   1a170:	001a      	movs	r2, r3
   1a172:	683b      	ldr	r3, [r7, #0]
   1a174:	701a      	strb	r2, [r3, #0]
}
   1a176:	46c0      	nop			; (mov r8, r8)
   1a178:	46bd      	mov	sp, r7
   1a17a:	b002      	add	sp, #8
   1a17c:	bd80      	pop	{r7, pc}
   1a17e:	46c0      	nop			; (mov r8, r8)
   1a180:	0001a031 	.word	0x0001a031

0001a184 <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
   1a184:	b580      	push	{r7, lr}
   1a186:	b082      	sub	sp, #8
   1a188:	af00      	add	r7, sp, #0
   1a18a:	0002      	movs	r2, r0
   1a18c:	1dfb      	adds	r3, r7, #7
   1a18e:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
   1a190:	4b03      	ldr	r3, [pc, #12]	; (1a1a0 <updateOverheadLevel+0x1c>)
   1a192:	1dfa      	adds	r2, r7, #7
   1a194:	7812      	ldrb	r2, [r2, #0]
   1a196:	701a      	strb	r2, [r3, #0]
}
   1a198:	46c0      	nop			; (mov r8, r8)
   1a19a:	46bd      	mov	sp, r7
   1a19c:	b002      	add	sp, #8
   1a19e:	bd80      	pop	{r7, pc}
   1a1a0:	20000990 	.word	0x20000990

0001a1a4 <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
   1a1a4:	b580      	push	{r7, lr}
   1a1a6:	b082      	sub	sp, #8
   1a1a8:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
   1a1aa:	1d7a      	adds	r2, r7, #5
   1a1ac:	1dbb      	adds	r3, r7, #6
   1a1ae:	0011      	movs	r1, r2
   1a1b0:	0018      	movs	r0, r3
   1a1b2:	4b11      	ldr	r3, [pc, #68]	; (1a1f8 <getOverHeadWaterSensorState+0x54>)
   1a1b4:	4798      	blx	r3
	uint8_t ans=0;
   1a1b6:	1dfb      	adds	r3, r7, #7
   1a1b8:	2200      	movs	r2, #0
   1a1ba:	701a      	strb	r2, [r3, #0]
	if(!olow)
   1a1bc:	1dbb      	adds	r3, r7, #6
   1a1be:	781b      	ldrb	r3, [r3, #0]
   1a1c0:	2201      	movs	r2, #1
   1a1c2:	4053      	eors	r3, r2
   1a1c4:	b2db      	uxtb	r3, r3
   1a1c6:	2b00      	cmp	r3, #0
   1a1c8:	d010      	beq.n	1a1ec <getOverHeadWaterSensorState+0x48>
	{
		ans++;
   1a1ca:	1dfb      	adds	r3, r7, #7
   1a1cc:	781a      	ldrb	r2, [r3, #0]
   1a1ce:	1dfb      	adds	r3, r7, #7
   1a1d0:	3201      	adds	r2, #1
   1a1d2:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
   1a1d4:	1d7b      	adds	r3, r7, #5
   1a1d6:	781b      	ldrb	r3, [r3, #0]
   1a1d8:	2201      	movs	r2, #1
   1a1da:	4053      	eors	r3, r2
   1a1dc:	b2db      	uxtb	r3, r3
   1a1de:	2b00      	cmp	r3, #0
   1a1e0:	d004      	beq.n	1a1ec <getOverHeadWaterSensorState+0x48>
			{
				ans++;
   1a1e2:	1dfb      	adds	r3, r7, #7
   1a1e4:	781a      	ldrb	r2, [r3, #0]
   1a1e6:	1dfb      	adds	r3, r7, #7
   1a1e8:	3201      	adds	r2, #1
   1a1ea:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   1a1ec:	1dfb      	adds	r3, r7, #7
   1a1ee:	781b      	ldrb	r3, [r3, #0]
}
   1a1f0:	0018      	movs	r0, r3
   1a1f2:	46bd      	mov	sp, r7
   1a1f4:	b002      	add	sp, #8
   1a1f6:	bd80      	pop	{r7, pc}
   1a1f8:	0001a151 	.word	0x0001a151

0001a1fc <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
   1a1fc:	b590      	push	{r4, r7, lr}
   1a1fe:	b085      	sub	sp, #20
   1a200:	af00      	add	r7, sp, #0
   1a202:	0002      	movs	r2, r0
   1a204:	1dfb      	adds	r3, r7, #7
   1a206:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
   1a208:	230f      	movs	r3, #15
   1a20a:	18fc      	adds	r4, r7, r3
   1a20c:	4b15      	ldr	r3, [pc, #84]	; (1a264 <overHeadWaterStatusOnCall+0x68>)
   1a20e:	4798      	blx	r3
   1a210:	0003      	movs	r3, r0
   1a212:	7023      	strb	r3, [r4, #0]
	if(current)
   1a214:	1dfb      	adds	r3, r7, #7
   1a216:	781b      	ldrb	r3, [r3, #0]
   1a218:	2b00      	cmp	r3, #0
   1a21a:	d004      	beq.n	1a226 <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
   1a21c:	230f      	movs	r3, #15
   1a21e:	18fb      	adds	r3, r7, r3
   1a220:	4a11      	ldr	r2, [pc, #68]	; (1a268 <overHeadWaterStatusOnCall+0x6c>)
   1a222:	7812      	ldrb	r2, [r2, #0]
   1a224:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
   1a226:	230f      	movs	r3, #15
   1a228:	18fb      	adds	r3, r7, r3
   1a22a:	781b      	ldrb	r3, [r3, #0]
   1a22c:	2b02      	cmp	r3, #2
   1a22e:	d103      	bne.n	1a238 <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
   1a230:	2056      	movs	r0, #86	; 0x56
   1a232:	4b0e      	ldr	r3, [pc, #56]	; (1a26c <overHeadWaterStatusOnCall+0x70>)
   1a234:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
   1a236:	e010      	b.n	1a25a <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
   1a238:	230f      	movs	r3, #15
   1a23a:	18fb      	adds	r3, r7, r3
   1a23c:	781b      	ldrb	r3, [r3, #0]
   1a23e:	2b01      	cmp	r3, #1
   1a240:	d103      	bne.n	1a24a <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
   1a242:	2058      	movs	r0, #88	; 0x58
   1a244:	4b09      	ldr	r3, [pc, #36]	; (1a26c <overHeadWaterStatusOnCall+0x70>)
   1a246:	4798      	blx	r3
}
   1a248:	e007      	b.n	1a25a <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
   1a24a:	230f      	movs	r3, #15
   1a24c:	18fb      	adds	r3, r7, r3
   1a24e:	781b      	ldrb	r3, [r3, #0]
   1a250:	2b00      	cmp	r3, #0
   1a252:	d102      	bne.n	1a25a <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
   1a254:	2057      	movs	r0, #87	; 0x57
   1a256:	4b05      	ldr	r3, [pc, #20]	; (1a26c <overHeadWaterStatusOnCall+0x70>)
   1a258:	4798      	blx	r3
}
   1a25a:	46c0      	nop			; (mov r8, r8)
   1a25c:	46bd      	mov	sp, r7
   1a25e:	b005      	add	sp, #20
   1a260:	bd90      	pop	{r4, r7, pc}
   1a262:	46c0      	nop			; (mov r8, r8)
   1a264:	0001a1a5 	.word	0x0001a1a5
   1a268:	20000990 	.word	0x20000990
   1a26c:	00014e2d 	.word	0x00014e2d

0001a270 <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
   1a270:	b580      	push	{r7, lr}
   1a272:	b084      	sub	sp, #16
   1a274:	af00      	add	r7, sp, #0
   1a276:	60f8      	str	r0, [r7, #12]
   1a278:	60b9      	str	r1, [r7, #8]
   1a27a:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
   1a27c:	2037      	movs	r0, #55	; 0x37
   1a27e:	4b0c      	ldr	r3, [pc, #48]	; (1a2b0 <readWaterSensorState+0x40>)
   1a280:	4798      	blx	r3
   1a282:	0003      	movs	r3, r0
   1a284:	001a      	movs	r2, r3
   1a286:	68fb      	ldr	r3, [r7, #12]
   1a288:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
   1a28a:	200f      	movs	r0, #15
   1a28c:	4b08      	ldr	r3, [pc, #32]	; (1a2b0 <readWaterSensorState+0x40>)
   1a28e:	4798      	blx	r3
   1a290:	0003      	movs	r3, r0
   1a292:	001a      	movs	r2, r3
   1a294:	68bb      	ldr	r3, [r7, #8]
   1a296:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
   1a298:	200e      	movs	r0, #14
   1a29a:	4b05      	ldr	r3, [pc, #20]	; (1a2b0 <readWaterSensorState+0x40>)
   1a29c:	4798      	blx	r3
   1a29e:	0003      	movs	r3, r0
   1a2a0:	001a      	movs	r2, r3
   1a2a2:	687b      	ldr	r3, [r7, #4]
   1a2a4:	701a      	strb	r2, [r3, #0]
}
   1a2a6:	46c0      	nop			; (mov r8, r8)
   1a2a8:	46bd      	mov	sp, r7
   1a2aa:	b004      	add	sp, #16
   1a2ac:	bd80      	pop	{r7, pc}
   1a2ae:	46c0      	nop			; (mov r8, r8)
   1a2b0:	0001a031 	.word	0x0001a031

0001a2b4 <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
   1a2b4:	b580      	push	{r7, lr}
   1a2b6:	b082      	sub	sp, #8
   1a2b8:	af00      	add	r7, sp, #0
   1a2ba:	0002      	movs	r2, r0
   1a2bc:	1dfb      	adds	r3, r7, #7
   1a2be:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
   1a2c0:	4b03      	ldr	r3, [pc, #12]	; (1a2d0 <updateUndergroundLevel+0x1c>)
   1a2c2:	1dfa      	adds	r2, r7, #7
   1a2c4:	7812      	ldrb	r2, [r2, #0]
   1a2c6:	701a      	strb	r2, [r3, #0]
}
   1a2c8:	46c0      	nop			; (mov r8, r8)
   1a2ca:	46bd      	mov	sp, r7
   1a2cc:	b002      	add	sp, #8
   1a2ce:	bd80      	pop	{r7, pc}
   1a2d0:	20000a5c 	.word	0x20000a5c

0001a2d4 <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
   1a2d4:	b580      	push	{r7, lr}
   1a2d6:	b082      	sub	sp, #8
   1a2d8:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
   1a2da:	1d3a      	adds	r2, r7, #4
   1a2dc:	1d79      	adds	r1, r7, #5
   1a2de:	1dbb      	adds	r3, r7, #6
   1a2e0:	0018      	movs	r0, r3
   1a2e2:	4b17      	ldr	r3, [pc, #92]	; (1a340 <getWaterSensorState+0x6c>)
   1a2e4:	4798      	blx	r3
	uint8_t ans=0;
   1a2e6:	1dfb      	adds	r3, r7, #7
   1a2e8:	2200      	movs	r2, #0
   1a2ea:	701a      	strb	r2, [r3, #0]

	if(!l)
   1a2ec:	1dbb      	adds	r3, r7, #6
   1a2ee:	781b      	ldrb	r3, [r3, #0]
   1a2f0:	2201      	movs	r2, #1
   1a2f2:	4053      	eors	r3, r2
   1a2f4:	b2db      	uxtb	r3, r3
   1a2f6:	2b00      	cmp	r3, #0
   1a2f8:	d01c      	beq.n	1a334 <getWaterSensorState+0x60>
	{
		ans++;
   1a2fa:	1dfb      	adds	r3, r7, #7
   1a2fc:	781a      	ldrb	r2, [r3, #0]
   1a2fe:	1dfb      	adds	r3, r7, #7
   1a300:	3201      	adds	r2, #1
   1a302:	701a      	strb	r2, [r3, #0]
		if(!m)
   1a304:	1d7b      	adds	r3, r7, #5
   1a306:	781b      	ldrb	r3, [r3, #0]
   1a308:	2201      	movs	r2, #1
   1a30a:	4053      	eors	r3, r2
   1a30c:	b2db      	uxtb	r3, r3
   1a30e:	2b00      	cmp	r3, #0
   1a310:	d010      	beq.n	1a334 <getWaterSensorState+0x60>
		{
			ans++;
   1a312:	1dfb      	adds	r3, r7, #7
   1a314:	781a      	ldrb	r2, [r3, #0]
   1a316:	1dfb      	adds	r3, r7, #7
   1a318:	3201      	adds	r2, #1
   1a31a:	701a      	strb	r2, [r3, #0]
			if(!h)
   1a31c:	1d3b      	adds	r3, r7, #4
   1a31e:	781b      	ldrb	r3, [r3, #0]
   1a320:	2201      	movs	r2, #1
   1a322:	4053      	eors	r3, r2
   1a324:	b2db      	uxtb	r3, r3
   1a326:	2b00      	cmp	r3, #0
   1a328:	d004      	beq.n	1a334 <getWaterSensorState+0x60>
			{
				ans++;
   1a32a:	1dfb      	adds	r3, r7, #7
   1a32c:	781a      	ldrb	r2, [r3, #0]
   1a32e:	1dfb      	adds	r3, r7, #7
   1a330:	3201      	adds	r2, #1
   1a332:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   1a334:	1dfb      	adds	r3, r7, #7
   1a336:	781b      	ldrb	r3, [r3, #0]
}
   1a338:	0018      	movs	r0, r3
   1a33a:	46bd      	mov	sp, r7
   1a33c:	b002      	add	sp, #8
   1a33e:	bd80      	pop	{r7, pc}
   1a340:	0001a271 	.word	0x0001a271

0001a344 <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
   1a344:	b590      	push	{r4, r7, lr}
   1a346:	b085      	sub	sp, #20
   1a348:	af00      	add	r7, sp, #0
   1a34a:	0002      	movs	r2, r0
   1a34c:	1dfb      	adds	r3, r7, #7
   1a34e:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
   1a350:	230f      	movs	r3, #15
   1a352:	18fc      	adds	r4, r7, r3
   1a354:	4b19      	ldr	r3, [pc, #100]	; (1a3bc <waterStatusOnCall+0x78>)
   1a356:	4798      	blx	r3
   1a358:	0003      	movs	r3, r0
   1a35a:	7023      	strb	r3, [r4, #0]
	if(current)
   1a35c:	1dfb      	adds	r3, r7, #7
   1a35e:	781b      	ldrb	r3, [r3, #0]
   1a360:	2b00      	cmp	r3, #0
   1a362:	d004      	beq.n	1a36e <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
   1a364:	230f      	movs	r3, #15
   1a366:	18fb      	adds	r3, r7, r3
   1a368:	4a15      	ldr	r2, [pc, #84]	; (1a3c0 <waterStatusOnCall+0x7c>)
   1a36a:	7812      	ldrb	r2, [r2, #0]
   1a36c:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
   1a36e:	230f      	movs	r3, #15
   1a370:	18fb      	adds	r3, r7, r3
   1a372:	781b      	ldrb	r3, [r3, #0]
   1a374:	2b00      	cmp	r3, #0
   1a376:	d103      	bne.n	1a380 <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
   1a378:	2054      	movs	r0, #84	; 0x54
   1a37a:	4b12      	ldr	r3, [pc, #72]	; (1a3c4 <waterStatusOnCall+0x80>)
   1a37c:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
   1a37e:	e019      	b.n	1a3b4 <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
   1a380:	230f      	movs	r3, #15
   1a382:	18fb      	adds	r3, r7, r3
   1a384:	781b      	ldrb	r3, [r3, #0]
   1a386:	2b01      	cmp	r3, #1
   1a388:	d103      	bne.n	1a392 <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
   1a38a:	2051      	movs	r0, #81	; 0x51
   1a38c:	4b0d      	ldr	r3, [pc, #52]	; (1a3c4 <waterStatusOnCall+0x80>)
   1a38e:	4798      	blx	r3
}
   1a390:	e010      	b.n	1a3b4 <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
   1a392:	230f      	movs	r3, #15
   1a394:	18fb      	adds	r3, r7, r3
   1a396:	781b      	ldrb	r3, [r3, #0]
   1a398:	2b02      	cmp	r3, #2
   1a39a:	d103      	bne.n	1a3a4 <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
   1a39c:	2052      	movs	r0, #82	; 0x52
   1a39e:	4b09      	ldr	r3, [pc, #36]	; (1a3c4 <waterStatusOnCall+0x80>)
   1a3a0:	4798      	blx	r3
}
   1a3a2:	e007      	b.n	1a3b4 <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
   1a3a4:	230f      	movs	r3, #15
   1a3a6:	18fb      	adds	r3, r7, r3
   1a3a8:	781b      	ldrb	r3, [r3, #0]
   1a3aa:	2b03      	cmp	r3, #3
   1a3ac:	d102      	bne.n	1a3b4 <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
   1a3ae:	2045      	movs	r0, #69	; 0x45
   1a3b0:	4b04      	ldr	r3, [pc, #16]	; (1a3c4 <waterStatusOnCall+0x80>)
   1a3b2:	4798      	blx	r3
}
   1a3b4:	46c0      	nop			; (mov r8, r8)
   1a3b6:	46bd      	mov	sp, r7
   1a3b8:	b005      	add	sp, #20
   1a3ba:	bd90      	pop	{r4, r7, pc}
   1a3bc:	0001a2d5 	.word	0x0001a2d5
   1a3c0:	20000a5c 	.word	0x20000a5c
   1a3c4:	00014e2d 	.word	0x00014e2d

0001a3c8 <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
   1a3c8:	b590      	push	{r4, r7, lr}
   1a3ca:	b085      	sub	sp, #20
   1a3cc:	af00      	add	r7, sp, #0
   1a3ce:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
   1a3d0:	2308      	movs	r3, #8
   1a3d2:	18fb      	adds	r3, r7, r3
   1a3d4:	0018      	movs	r0, r3
   1a3d6:	4b8b      	ldr	r3, [pc, #556]	; (1a604 <Water_Level_Task+0x23c>)
   1a3d8:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
   1a3da:	2308      	movs	r3, #8
   1a3dc:	18fb      	adds	r3, r7, r3
   1a3de:	2200      	movs	r2, #0
   1a3e0:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
   1a3e2:	2308      	movs	r3, #8
   1a3e4:	18fb      	adds	r3, r7, r3
   1a3e6:	2201      	movs	r2, #1
   1a3e8:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
   1a3ea:	2308      	movs	r3, #8
   1a3ec:	18fb      	adds	r3, r7, r3
   1a3ee:	0019      	movs	r1, r3
   1a3f0:	202f      	movs	r0, #47	; 0x2f
   1a3f2:	4b85      	ldr	r3, [pc, #532]	; (1a608 <Water_Level_Task+0x240>)
   1a3f4:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
   1a3f6:	2308      	movs	r3, #8
   1a3f8:	18fb      	adds	r3, r7, r3
   1a3fa:	0019      	movs	r1, r3
   1a3fc:	200c      	movs	r0, #12
   1a3fe:	4b82      	ldr	r3, [pc, #520]	; (1a608 <Water_Level_Task+0x240>)
   1a400:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
   1a402:	2308      	movs	r3, #8
   1a404:	18fb      	adds	r3, r7, r3
   1a406:	0019      	movs	r1, r3
   1a408:	200d      	movs	r0, #13
   1a40a:	4b7f      	ldr	r3, [pc, #508]	; (1a608 <Water_Level_Task+0x240>)
   1a40c:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
   1a40e:	2308      	movs	r3, #8
   1a410:	18fb      	adds	r3, r7, r3
   1a412:	0019      	movs	r1, r3
   1a414:	200e      	movs	r0, #14
   1a416:	4b7c      	ldr	r3, [pc, #496]	; (1a608 <Water_Level_Task+0x240>)
   1a418:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
   1a41a:	2308      	movs	r3, #8
   1a41c:	18fb      	adds	r3, r7, r3
   1a41e:	0019      	movs	r1, r3
   1a420:	200f      	movs	r0, #15
   1a422:	4b79      	ldr	r3, [pc, #484]	; (1a608 <Water_Level_Task+0x240>)
   1a424:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
   1a426:	2308      	movs	r3, #8
   1a428:	18fb      	adds	r3, r7, r3
   1a42a:	0019      	movs	r1, r3
   1a42c:	2037      	movs	r0, #55	; 0x37
   1a42e:	4b76      	ldr	r3, [pc, #472]	; (1a608 <Water_Level_Task+0x240>)
   1a430:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
   1a432:	4b76      	ldr	r3, [pc, #472]	; (1a60c <Water_Level_Task+0x244>)
   1a434:	2202      	movs	r2, #2
   1a436:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
   1a438:	4b75      	ldr	r3, [pc, #468]	; (1a610 <Water_Level_Task+0x248>)
   1a43a:	2202      	movs	r2, #2
   1a43c:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
   1a43e:	4b75      	ldr	r3, [pc, #468]	; (1a614 <Water_Level_Task+0x24c>)
   1a440:	2201      	movs	r2, #1
   1a442:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
   1a444:	4b74      	ldr	r3, [pc, #464]	; (1a618 <Water_Level_Task+0x250>)
   1a446:	2201      	movs	r2, #1
   1a448:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
   1a44a:	4b74      	ldr	r3, [pc, #464]	; (1a61c <Water_Level_Task+0x254>)
   1a44c:	2200      	movs	r2, #0
   1a44e:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
   1a450:	230f      	movs	r3, #15
   1a452:	18fb      	adds	r3, r7, r3
   1a454:	2200      	movs	r2, #0
   1a456:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
   1a458:	4b71      	ldr	r3, [pc, #452]	; (1a620 <Water_Level_Task+0x258>)
   1a45a:	791b      	ldrb	r3, [r3, #4]
   1a45c:	2b00      	cmp	r3, #0
   1a45e:	d004      	beq.n	1a46a <Water_Level_Task+0xa2>
	{
		j = 19;
   1a460:	230f      	movs	r3, #15
   1a462:	18fb      	adds	r3, r7, r3
   1a464:	2213      	movs	r2, #19
   1a466:	701a      	strb	r2, [r3, #0]
   1a468:	e003      	b.n	1a472 <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
   1a46a:	230f      	movs	r3, #15
   1a46c:	18fb      	adds	r3, r7, r3
   1a46e:	2211      	movs	r2, #17
   1a470:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
   1a472:	230e      	movs	r3, #14
   1a474:	18fb      	adds	r3, r7, r3
   1a476:	220c      	movs	r2, #12
   1a478:	701a      	strb	r2, [r3, #0]
   1a47a:	e00c      	b.n	1a496 <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
   1a47c:	230e      	movs	r3, #14
   1a47e:	18fb      	adds	r3, r7, r3
   1a480:	781b      	ldrb	r3, [r3, #0]
   1a482:	4a68      	ldr	r2, [pc, #416]	; (1a624 <Water_Level_Task+0x25c>)
   1a484:	2101      	movs	r1, #1
   1a486:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
   1a488:	230e      	movs	r3, #14
   1a48a:	18fb      	adds	r3, r7, r3
   1a48c:	781a      	ldrb	r2, [r3, #0]
   1a48e:	230e      	movs	r3, #14
   1a490:	18fb      	adds	r3, r7, r3
   1a492:	3201      	adds	r2, #1
   1a494:	701a      	strb	r2, [r3, #0]
   1a496:	230e      	movs	r3, #14
   1a498:	18fa      	adds	r2, r7, r3
   1a49a:	230f      	movs	r3, #15
   1a49c:	18fb      	adds	r3, r7, r3
   1a49e:	7812      	ldrb	r2, [r2, #0]
   1a4a0:	781b      	ldrb	r3, [r3, #0]
   1a4a2:	429a      	cmp	r2, r3
   1a4a4:	d3ea      	bcc.n	1a47c <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
   1a4a6:	4b60      	ldr	r3, [pc, #384]	; (1a628 <Water_Level_Task+0x260>)
   1a4a8:	2249      	movs	r2, #73	; 0x49
   1a4aa:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
   1a4ac:	4b5e      	ldr	r3, [pc, #376]	; (1a628 <Water_Level_Task+0x260>)
   1a4ae:	2244      	movs	r2, #68	; 0x44
   1a4b0:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
   1a4b2:	4b5d      	ldr	r3, [pc, #372]	; (1a628 <Water_Level_Task+0x260>)
   1a4b4:	2248      	movs	r2, #72	; 0x48
   1a4b6:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
   1a4b8:	4b5b      	ldr	r3, [pc, #364]	; (1a628 <Water_Level_Task+0x260>)
   1a4ba:	2245      	movs	r2, #69	; 0x45
   1a4bc:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
   1a4be:	4b5a      	ldr	r3, [pc, #360]	; (1a628 <Water_Level_Task+0x260>)
   1a4c0:	225a      	movs	r2, #90	; 0x5a
   1a4c2:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
   1a4c4:	4b56      	ldr	r3, [pc, #344]	; (1a620 <Water_Level_Task+0x258>)
   1a4c6:	791b      	ldrb	r3, [r3, #4]
   1a4c8:	2b00      	cmp	r3, #0
   1a4ca:	d005      	beq.n	1a4d8 <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
   1a4cc:	4b56      	ldr	r3, [pc, #344]	; (1a628 <Water_Level_Task+0x260>)
   1a4ce:	2256      	movs	r2, #86	; 0x56
   1a4d0:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
   1a4d2:	4b55      	ldr	r3, [pc, #340]	; (1a628 <Water_Level_Task+0x260>)
   1a4d4:	2257      	movs	r2, #87	; 0x57
   1a4d6:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1a4d8:	4b51      	ldr	r3, [pc, #324]	; (1a620 <Water_Level_Task+0x258>)
   1a4da:	78db      	ldrb	r3, [r3, #3]
   1a4dc:	2b00      	cmp	r3, #0
   1a4de:	d00b      	beq.n	1a4f8 <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
   1a4e0:	4b52      	ldr	r3, [pc, #328]	; (1a62c <Water_Level_Task+0x264>)
   1a4e2:	2200      	movs	r2, #0
   1a4e4:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
   1a4e6:	4b51      	ldr	r3, [pc, #324]	; (1a62c <Water_Level_Task+0x264>)
   1a4e8:	2200      	movs	r2, #0
   1a4ea:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
   1a4ec:	4b50      	ldr	r3, [pc, #320]	; (1a630 <Water_Level_Task+0x268>)
   1a4ee:	220d      	movs	r2, #13
   1a4f0:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
   1a4f2:	4b4f      	ldr	r3, [pc, #316]	; (1a630 <Water_Level_Task+0x268>)
   1a4f4:	220f      	movs	r2, #15
   1a4f6:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
   1a4f8:	230c      	movs	r3, #12
   1a4fa:	18fb      	adds	r3, r7, r3
   1a4fc:	2200      	movs	r2, #0
   1a4fe:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
   1a500:	4b4c      	ldr	r3, [pc, #304]	; (1a634 <Water_Level_Task+0x26c>)
   1a502:	7fdb      	ldrb	r3, [r3, #31]
   1a504:	b2db      	uxtb	r3, r3
   1a506:	2b00      	cmp	r3, #0
   1a508:	d000      	beq.n	1a50c <Water_Level_Task+0x144>
   1a50a:	e073      	b.n	1a5f4 <Water_Level_Task+0x22c>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
   1a50c:	230b      	movs	r3, #11
   1a50e:	18fc      	adds	r4, r7, r3
   1a510:	4b49      	ldr	r3, [pc, #292]	; (1a638 <Water_Level_Task+0x270>)
   1a512:	4798      	blx	r3
   1a514:	0003      	movs	r3, r0
   1a516:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
   1a518:	4b41      	ldr	r3, [pc, #260]	; (1a620 <Water_Level_Task+0x258>)
   1a51a:	791b      	ldrb	r3, [r3, #4]
   1a51c:	2b00      	cmp	r3, #0
   1a51e:	d005      	beq.n	1a52c <Water_Level_Task+0x164>
			{
				oLevel =getOverHeadWaterSensorState();
   1a520:	230d      	movs	r3, #13
   1a522:	18fc      	adds	r4, r7, r3
   1a524:	4b45      	ldr	r3, [pc, #276]	; (1a63c <Water_Level_Task+0x274>)
   1a526:	4798      	blx	r3
   1a528:	0003      	movs	r3, r0
   1a52a:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   1a52c:	4b3c      	ldr	r3, [pc, #240]	; (1a620 <Water_Level_Task+0x258>)
   1a52e:	791b      	ldrb	r3, [r3, #4]
   1a530:	2b01      	cmp	r3, #1
   1a532:	d125      	bne.n	1a580 <Water_Level_Task+0x1b8>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
   1a534:	4b35      	ldr	r3, [pc, #212]	; (1a60c <Water_Level_Task+0x244>)
   1a536:	781b      	ldrb	r3, [r3, #0]
   1a538:	220b      	movs	r2, #11
   1a53a:	18ba      	adds	r2, r7, r2
   1a53c:	7812      	ldrb	r2, [r2, #0]
   1a53e:	429a      	cmp	r2, r3
   1a540:	d006      	beq.n	1a550 <Water_Level_Task+0x188>
   1a542:	4b33      	ldr	r3, [pc, #204]	; (1a610 <Water_Level_Task+0x248>)
   1a544:	781b      	ldrb	r3, [r3, #0]
   1a546:	220b      	movs	r2, #11
   1a548:	18ba      	adds	r2, r7, r2
   1a54a:	7812      	ldrb	r2, [r2, #0]
   1a54c:	429a      	cmp	r2, r3
   1a54e:	d00f      	beq.n	1a570 <Water_Level_Task+0x1a8>
   1a550:	4b30      	ldr	r3, [pc, #192]	; (1a614 <Water_Level_Task+0x24c>)
   1a552:	781b      	ldrb	r3, [r3, #0]
   1a554:	b2db      	uxtb	r3, r3
   1a556:	220d      	movs	r2, #13
   1a558:	18ba      	adds	r2, r7, r2
   1a55a:	7812      	ldrb	r2, [r2, #0]
   1a55c:	429a      	cmp	r2, r3
   1a55e:	d009      	beq.n	1a574 <Water_Level_Task+0x1ac>
   1a560:	4b2d      	ldr	r3, [pc, #180]	; (1a618 <Water_Level_Task+0x250>)
   1a562:	781b      	ldrb	r3, [r3, #0]
   1a564:	b2db      	uxtb	r3, r3
   1a566:	220d      	movs	r2, #13
   1a568:	18ba      	adds	r2, r7, r2
   1a56a:	7812      	ldrb	r2, [r2, #0]
   1a56c:	429a      	cmp	r2, r3
   1a56e:	d101      	bne.n	1a574 <Water_Level_Task+0x1ac>
   1a570:	2301      	movs	r3, #1
   1a572:	e000      	b.n	1a576 <Water_Level_Task+0x1ae>
   1a574:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   1a576:	1c1a      	adds	r2, r3, #0
   1a578:	2301      	movs	r3, #1
   1a57a:	4013      	ands	r3, r2
   1a57c:	b2db      	uxtb	r3, r3
   1a57e:	e014      	b.n	1a5aa <Water_Level_Task+0x1e2>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
   1a580:	4b22      	ldr	r3, [pc, #136]	; (1a60c <Water_Level_Task+0x244>)
   1a582:	781b      	ldrb	r3, [r3, #0]
   1a584:	220b      	movs	r2, #11
   1a586:	18ba      	adds	r2, r7, r2
   1a588:	7812      	ldrb	r2, [r2, #0]
   1a58a:	429a      	cmp	r2, r3
   1a58c:	d008      	beq.n	1a5a0 <Water_Level_Task+0x1d8>
   1a58e:	4b20      	ldr	r3, [pc, #128]	; (1a610 <Water_Level_Task+0x248>)
   1a590:	781b      	ldrb	r3, [r3, #0]
   1a592:	220b      	movs	r2, #11
   1a594:	18ba      	adds	r2, r7, r2
   1a596:	7812      	ldrb	r2, [r2, #0]
   1a598:	429a      	cmp	r2, r3
   1a59a:	d101      	bne.n	1a5a0 <Water_Level_Task+0x1d8>
   1a59c:	2301      	movs	r3, #1
   1a59e:	e000      	b.n	1a5a2 <Water_Level_Task+0x1da>
   1a5a0:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   1a5a2:	1c1a      	adds	r2, r3, #0
   1a5a4:	2301      	movs	r3, #1
   1a5a6:	4013      	ands	r3, r2
   1a5a8:	b2db      	uxtb	r3, r3
   1a5aa:	2b00      	cmp	r3, #0
   1a5ac:	d010      	beq.n	1a5d0 <Water_Level_Task+0x208>
			)
			{
				tempWaterEventCount++;
   1a5ae:	4b1b      	ldr	r3, [pc, #108]	; (1a61c <Water_Level_Task+0x254>)
   1a5b0:	781b      	ldrb	r3, [r3, #0]
   1a5b2:	3301      	adds	r3, #1
   1a5b4:	b2da      	uxtb	r2, r3
   1a5b6:	4b19      	ldr	r3, [pc, #100]	; (1a61c <Water_Level_Task+0x254>)
   1a5b8:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
   1a5ba:	4b18      	ldr	r3, [pc, #96]	; (1a61c <Water_Level_Task+0x254>)
   1a5bc:	781b      	ldrb	r3, [r3, #0]
   1a5be:	2b09      	cmp	r3, #9
   1a5c0:	d909      	bls.n	1a5d6 <Water_Level_Task+0x20e>
				{
					operateOnWaterEvent();
   1a5c2:	4b1f      	ldr	r3, [pc, #124]	; (1a640 <Water_Level_Task+0x278>)
   1a5c4:	4798      	blx	r3
					result=true;
   1a5c6:	230c      	movs	r3, #12
   1a5c8:	18fb      	adds	r3, r7, r3
   1a5ca:	2201      	movs	r2, #1
   1a5cc:	701a      	strb	r2, [r3, #0]
   1a5ce:	e002      	b.n	1a5d6 <Water_Level_Task+0x20e>
				}
			}
			else
			{
				tempWaterEventCount=0;
   1a5d0:	4b12      	ldr	r3, [pc, #72]	; (1a61c <Water_Level_Task+0x254>)
   1a5d2:	2200      	movs	r2, #0
   1a5d4:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
   1a5d6:	4b0e      	ldr	r3, [pc, #56]	; (1a610 <Water_Level_Task+0x248>)
   1a5d8:	220b      	movs	r2, #11
   1a5da:	18ba      	adds	r2, r7, r2
   1a5dc:	7812      	ldrb	r2, [r2, #0]
   1a5de:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
   1a5e0:	4b0f      	ldr	r3, [pc, #60]	; (1a620 <Water_Level_Task+0x258>)
   1a5e2:	791b      	ldrb	r3, [r3, #4]
   1a5e4:	2b00      	cmp	r3, #0
   1a5e6:	d009      	beq.n	1a5fc <Water_Level_Task+0x234>
			{
				tempOverheadLevel=oLevel;
   1a5e8:	4b0b      	ldr	r3, [pc, #44]	; (1a618 <Water_Level_Task+0x250>)
   1a5ea:	220d      	movs	r2, #13
   1a5ec:	18ba      	adds	r2, r7, r2
   1a5ee:	7812      	ldrb	r2, [r2, #0]
   1a5f0:	701a      	strb	r2, [r3, #0]
   1a5f2:	e003      	b.n	1a5fc <Water_Level_Task+0x234>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
   1a5f4:	4b13      	ldr	r3, [pc, #76]	; (1a644 <Water_Level_Task+0x27c>)
   1a5f6:	0018      	movs	r0, r3
   1a5f8:	4b13      	ldr	r3, [pc, #76]	; (1a648 <Water_Level_Task+0x280>)
   1a5fa:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
   1a5fc:	2064      	movs	r0, #100	; 0x64
   1a5fe:	4b12      	ldr	r3, [pc, #72]	; (1a648 <Water_Level_Task+0x280>)
   1a600:	4798      	blx	r3
	{
   1a602:	e779      	b.n	1a4f8 <Water_Level_Task+0x130>
   1a604:	0001a00d 	.word	0x0001a00d
   1a608:	000238b1 	.word	0x000238b1
   1a60c:	20000a5c 	.word	0x20000a5c
   1a610:	20000971 	.word	0x20000971
   1a614:	20000990 	.word	0x20000990
   1a618:	20000962 	.word	0x20000962
   1a61c:	2000098c 	.word	0x2000098c
   1a620:	2000082c 	.word	0x2000082c
   1a624:	20000918 	.word	0x20000918
   1a628:	200009fc 	.word	0x200009fc
   1a62c:	200009c4 	.word	0x200009c4
   1a630:	20000940 	.word	0x20000940
   1a634:	20000854 	.word	0x20000854
   1a638:	0001a2d5 	.word	0x0001a2d5
   1a63c:	0001a1a5 	.word	0x0001a1a5
   1a640:	0001a64d 	.word	0x0001a64d
   1a644:	00001388 	.word	0x00001388
   1a648:	00020a49 	.word	0x00020a49

0001a64c <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
   1a64c:	b580      	push	{r7, lr}
   1a64e:	b082      	sub	sp, #8
   1a650:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
   1a652:	1dfb      	adds	r3, r7, #7
   1a654:	4abd      	ldr	r2, [pc, #756]	; (1a94c <operateOnWaterEvent+0x300>)
   1a656:	7812      	ldrb	r2, [r2, #0]
   1a658:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
   1a65a:	1dbb      	adds	r3, r7, #6
   1a65c:	4abc      	ldr	r2, [pc, #752]	; (1a950 <operateOnWaterEvent+0x304>)
   1a65e:	7812      	ldrb	r2, [r2, #0]
   1a660:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
   1a662:	4bbc      	ldr	r3, [pc, #752]	; (1a954 <operateOnWaterEvent+0x308>)
   1a664:	781b      	ldrb	r3, [r3, #0]
   1a666:	1dfa      	adds	r2, r7, #7
   1a668:	7812      	ldrb	r2, [r2, #0]
   1a66a:	429a      	cmp	r2, r3
   1a66c:	d10c      	bne.n	1a688 <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1a66e:	4bba      	ldr	r3, [pc, #744]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a670:	791b      	ldrb	r3, [r3, #4]
   1a672:	2b00      	cmp	r3, #0
   1a674:	d000      	beq.n	1a678 <operateOnWaterEvent+0x2c>
   1a676:	e162      	b.n	1a93e <operateOnWaterEvent+0x2f2>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
   1a678:	4bb8      	ldr	r3, [pc, #736]	; (1a95c <operateOnWaterEvent+0x310>)
   1a67a:	781b      	ldrb	r3, [r3, #0]
   1a67c:	b2db      	uxtb	r3, r3
   1a67e:	1dba      	adds	r2, r7, #6
   1a680:	7812      	ldrb	r2, [r2, #0]
   1a682:	429a      	cmp	r2, r3
   1a684:	d100      	bne.n	1a688 <operateOnWaterEvent+0x3c>
   1a686:	e15c      	b.n	1a942 <operateOnWaterEvent+0x2f6>
			{
				return;
			}
		}
	}
	if (getMotorState())
   1a688:	4bb5      	ldr	r3, [pc, #724]	; (1a960 <operateOnWaterEvent+0x314>)
   1a68a:	4798      	blx	r3
   1a68c:	1e03      	subs	r3, r0, #0
   1a68e:	d100      	bne.n	1a692 <operateOnWaterEvent+0x46>
   1a690:	e0c4      	b.n	1a81c <operateOnWaterEvent+0x1d0>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
   1a692:	1dfb      	adds	r3, r7, #7
   1a694:	781b      	ldrb	r3, [r3, #0]
   1a696:	2b00      	cmp	r3, #0
   1a698:	d122      	bne.n	1a6e0 <operateOnWaterEvent+0x94>
   1a69a:	4bae      	ldr	r3, [pc, #696]	; (1a954 <operateOnWaterEvent+0x308>)
   1a69c:	781b      	ldrb	r3, [r3, #0]
   1a69e:	2b00      	cmp	r3, #0
   1a6a0:	d01e      	beq.n	1a6e0 <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
   1a6a2:	2200      	movs	r2, #0
   1a6a4:	2101      	movs	r1, #1
   1a6a6:	2000      	movs	r0, #0
   1a6a8:	4bae      	ldr	r3, [pc, #696]	; (1a964 <operateOnWaterEvent+0x318>)
   1a6aa:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
   1a6ac:	2049      	movs	r0, #73	; 0x49
   1a6ae:	4bae      	ldr	r3, [pc, #696]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a6b0:	4798      	blx	r3
   1a6b2:	0003      	movs	r3, r0
   1a6b4:	001a      	movs	r2, r3
   1a6b6:	4bad      	ldr	r3, [pc, #692]	; (1a96c <operateOnWaterEvent+0x320>)
   1a6b8:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a6ba:	4ba7      	ldr	r3, [pc, #668]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a6bc:	78db      	ldrb	r3, [r3, #3]
   1a6be:	2b00      	cmp	r3, #0
   1a6c0:	d100      	bne.n	1a6c4 <operateOnWaterEvent+0x78>
   1a6c2:	e072      	b.n	1a7aa <operateOnWaterEvent+0x15e>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
   1a6c4:	4baa      	ldr	r3, [pc, #680]	; (1a970 <operateOnWaterEvent+0x324>)
   1a6c6:	795b      	ldrb	r3, [r3, #5]
   1a6c8:	2b00      	cmp	r3, #0
   1a6ca:	d100      	bne.n	1a6ce <operateOnWaterEvent+0x82>
   1a6cc:	e06d      	b.n	1a7aa <operateOnWaterEvent+0x15e>
   1a6ce:	4ba1      	ldr	r3, [pc, #644]	; (1a954 <operateOnWaterEvent+0x308>)
   1a6d0:	781b      	ldrb	r3, [r3, #0]
   1a6d2:	2b01      	cmp	r3, #1
   1a6d4:	d800      	bhi.n	1a6d8 <operateOnWaterEvent+0x8c>
   1a6d6:	e068      	b.n	1a7aa <operateOnWaterEvent+0x15e>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   1a6d8:	4ba6      	ldr	r3, [pc, #664]	; (1a974 <operateOnWaterEvent+0x328>)
   1a6da:	2201      	movs	r2, #1
   1a6dc:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a6de:	e064      	b.n	1a7aa <operateOnWaterEvent+0x15e>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
   1a6e0:	1dfb      	adds	r3, r7, #7
   1a6e2:	781b      	ldrb	r3, [r3, #0]
   1a6e4:	2b03      	cmp	r3, #3
   1a6e6:	d130      	bne.n	1a74a <operateOnWaterEvent+0xfe>
   1a6e8:	4b9a      	ldr	r3, [pc, #616]	; (1a954 <operateOnWaterEvent+0x308>)
   1a6ea:	781b      	ldrb	r3, [r3, #0]
   1a6ec:	2b02      	cmp	r3, #2
   1a6ee:	d82c      	bhi.n	1a74a <operateOnWaterEvent+0xfe>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a6f0:	4b99      	ldr	r3, [pc, #612]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a6f2:	78db      	ldrb	r3, [r3, #3]
   1a6f4:	2b00      	cmp	r3, #0
   1a6f6:	d05b      	beq.n	1a7b0 <operateOnWaterEvent+0x164>
			{
				if (m2m_Numbers_struct.m2mSetting)
   1a6f8:	4b9d      	ldr	r3, [pc, #628]	; (1a970 <operateOnWaterEvent+0x324>)
   1a6fa:	795b      	ldrb	r3, [r3, #5]
   1a6fc:	2b00      	cmp	r3, #0
   1a6fe:	d003      	beq.n	1a708 <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   1a700:	4b9c      	ldr	r3, [pc, #624]	; (1a974 <operateOnWaterEvent+0x328>)
   1a702:	2201      	movs	r2, #1
   1a704:	705a      	strb	r2, [r3, #1]
   1a706:	e006      	b.n	1a716 <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
   1a708:	2045      	movs	r0, #69	; 0x45
   1a70a:	4b97      	ldr	r3, [pc, #604]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a70c:	4798      	blx	r3
   1a70e:	0003      	movs	r3, r0
   1a710:	001a      	movs	r2, r3
   1a712:	4b96      	ldr	r3, [pc, #600]	; (1a96c <operateOnWaterEvent+0x320>)
   1a714:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
   1a716:	4b98      	ldr	r3, [pc, #608]	; (1a978 <operateOnWaterEvent+0x32c>)
   1a718:	7f9b      	ldrb	r3, [r3, #30]
   1a71a:	b2db      	uxtb	r3, r3
   1a71c:	2b00      	cmp	r3, #0
   1a71e:	d00c      	beq.n	1a73a <operateOnWaterEvent+0xee>
				{
					stopMotor(false,true,false);
   1a720:	2200      	movs	r2, #0
   1a722:	2101      	movs	r1, #1
   1a724:	2000      	movs	r0, #0
   1a726:	4b8f      	ldr	r3, [pc, #572]	; (1a964 <operateOnWaterEvent+0x318>)
   1a728:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
   1a72a:	2048      	movs	r0, #72	; 0x48
   1a72c:	4b8e      	ldr	r3, [pc, #568]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a72e:	4798      	blx	r3
   1a730:	0003      	movs	r3, r0
   1a732:	001a      	movs	r2, r3
   1a734:	4b8d      	ldr	r3, [pc, #564]	; (1a96c <operateOnWaterEvent+0x320>)
   1a736:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a738:	e03a      	b.n	1a7b0 <operateOnWaterEvent+0x164>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   1a73a:	2045      	movs	r0, #69	; 0x45
   1a73c:	4b8a      	ldr	r3, [pc, #552]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a73e:	4798      	blx	r3
   1a740:	0003      	movs	r3, r0
   1a742:	001a      	movs	r2, r3
   1a744:	4b89      	ldr	r3, [pc, #548]	; (1a96c <operateOnWaterEvent+0x320>)
   1a746:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a748:	e032      	b.n	1a7b0 <operateOnWaterEvent+0x164>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
   1a74a:	1dfb      	adds	r3, r7, #7
   1a74c:	781b      	ldrb	r3, [r3, #0]
   1a74e:	2b01      	cmp	r3, #1
   1a750:	d11b      	bne.n	1a78a <operateOnWaterEvent+0x13e>
   1a752:	4b80      	ldr	r3, [pc, #512]	; (1a954 <operateOnWaterEvent+0x308>)
   1a754:	781b      	ldrb	r3, [r3, #0]
   1a756:	2b01      	cmp	r3, #1
   1a758:	d917      	bls.n	1a78a <operateOnWaterEvent+0x13e>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a75a:	4b7f      	ldr	r3, [pc, #508]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a75c:	78db      	ldrb	r3, [r3, #3]
   1a75e:	2b00      	cmp	r3, #0
   1a760:	d007      	beq.n	1a772 <operateOnWaterEvent+0x126>
			{
				if (m2m_Numbers_struct.m2mSetting)
   1a762:	4b83      	ldr	r3, [pc, #524]	; (1a970 <operateOnWaterEvent+0x324>)
   1a764:	795b      	ldrb	r3, [r3, #5]
   1a766:	2b00      	cmp	r3, #0
   1a768:	d021      	beq.n	1a7ae <operateOnWaterEvent+0x162>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   1a76a:	4b82      	ldr	r3, [pc, #520]	; (1a974 <operateOnWaterEvent+0x328>)
   1a76c:	2201      	movs	r2, #1
   1a76e:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a770:	e01d      	b.n	1a7ae <operateOnWaterEvent+0x162>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
   1a772:	4b79      	ldr	r3, [pc, #484]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a774:	79db      	ldrb	r3, [r3, #7]
   1a776:	2b00      	cmp	r3, #0
   1a778:	d019      	beq.n	1a7ae <operateOnWaterEvent+0x162>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
   1a77a:	2044      	movs	r0, #68	; 0x44
   1a77c:	4b7a      	ldr	r3, [pc, #488]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a77e:	4798      	blx	r3
   1a780:	0003      	movs	r3, r0
   1a782:	001a      	movs	r2, r3
   1a784:	4b79      	ldr	r3, [pc, #484]	; (1a96c <operateOnWaterEvent+0x320>)
   1a786:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a788:	e011      	b.n	1a7ae <operateOnWaterEvent+0x162>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
   1a78a:	1dfb      	adds	r3, r7, #7
   1a78c:	781b      	ldrb	r3, [r3, #0]
   1a78e:	2b02      	cmp	r3, #2
   1a790:	d10e      	bne.n	1a7b0 <operateOnWaterEvent+0x164>
   1a792:	4b70      	ldr	r3, [pc, #448]	; (1a954 <operateOnWaterEvent+0x308>)
   1a794:	781b      	ldrb	r3, [r3, #0]
   1a796:	2b01      	cmp	r3, #1
   1a798:	d80a      	bhi.n	1a7b0 <operateOnWaterEvent+0x164>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
   1a79a:	205a      	movs	r0, #90	; 0x5a
   1a79c:	4b72      	ldr	r3, [pc, #456]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a79e:	4798      	blx	r3
   1a7a0:	0003      	movs	r3, r0
   1a7a2:	001a      	movs	r2, r3
   1a7a4:	4b71      	ldr	r3, [pc, #452]	; (1a96c <operateOnWaterEvent+0x320>)
   1a7a6:	741a      	strb	r2, [r3, #16]
   1a7a8:	e002      	b.n	1a7b0 <operateOnWaterEvent+0x164>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a7aa:	46c0      	nop			; (mov r8, r8)
   1a7ac:	e000      	b.n	1a7b0 <operateOnWaterEvent+0x164>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a7ae:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   1a7b0:	4b69      	ldr	r3, [pc, #420]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a7b2:	791b      	ldrb	r3, [r3, #4]
   1a7b4:	2b00      	cmp	r3, #0
   1a7b6:	d100      	bne.n	1a7ba <operateOnWaterEvent+0x16e>
   1a7b8:	e0b2      	b.n	1a920 <operateOnWaterEvent+0x2d4>
		{
			if(oLevel!=overheadLevel)
   1a7ba:	4b68      	ldr	r3, [pc, #416]	; (1a95c <operateOnWaterEvent+0x310>)
   1a7bc:	781b      	ldrb	r3, [r3, #0]
   1a7be:	b2db      	uxtb	r3, r3
   1a7c0:	1dba      	adds	r2, r7, #6
   1a7c2:	7812      	ldrb	r2, [r2, #0]
   1a7c4:	429a      	cmp	r2, r3
   1a7c6:	d100      	bne.n	1a7ca <operateOnWaterEvent+0x17e>
   1a7c8:	e0aa      	b.n	1a920 <operateOnWaterEvent+0x2d4>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
   1a7ca:	1dbb      	adds	r3, r7, #6
   1a7cc:	781b      	ldrb	r3, [r3, #0]
   1a7ce:	2b02      	cmp	r3, #2
   1a7d0:	d111      	bne.n	1a7f6 <operateOnWaterEvent+0x1aa>
   1a7d2:	4b62      	ldr	r3, [pc, #392]	; (1a95c <operateOnWaterEvent+0x310>)
   1a7d4:	781b      	ldrb	r3, [r3, #0]
   1a7d6:	b2db      	uxtb	r3, r3
   1a7d8:	2b01      	cmp	r3, #1
   1a7da:	d80c      	bhi.n	1a7f6 <operateOnWaterEvent+0x1aa>
				{
					stopMotor(false,true,false);
   1a7dc:	2200      	movs	r2, #0
   1a7de:	2101      	movs	r1, #1
   1a7e0:	2000      	movs	r0, #0
   1a7e2:	4b60      	ldr	r3, [pc, #384]	; (1a964 <operateOnWaterEvent+0x318>)
   1a7e4:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
   1a7e6:	2056      	movs	r0, #86	; 0x56
   1a7e8:	4b5f      	ldr	r3, [pc, #380]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a7ea:	4798      	blx	r3
   1a7ec:	0003      	movs	r3, r0
   1a7ee:	001a      	movs	r2, r3
   1a7f0:	4b5e      	ldr	r3, [pc, #376]	; (1a96c <operateOnWaterEvent+0x320>)
   1a7f2:	745a      	strb	r2, [r3, #17]
   1a7f4:	e094      	b.n	1a920 <operateOnWaterEvent+0x2d4>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
   1a7f6:	1dbb      	adds	r3, r7, #6
   1a7f8:	781b      	ldrb	r3, [r3, #0]
   1a7fa:	2b00      	cmp	r3, #0
   1a7fc:	d000      	beq.n	1a800 <operateOnWaterEvent+0x1b4>
   1a7fe:	e08f      	b.n	1a920 <operateOnWaterEvent+0x2d4>
   1a800:	4b56      	ldr	r3, [pc, #344]	; (1a95c <operateOnWaterEvent+0x310>)
   1a802:	781b      	ldrb	r3, [r3, #0]
   1a804:	b2db      	uxtb	r3, r3
   1a806:	2b00      	cmp	r3, #0
   1a808:	d100      	bne.n	1a80c <operateOnWaterEvent+0x1c0>
   1a80a:	e089      	b.n	1a920 <operateOnWaterEvent+0x2d4>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
   1a80c:	2057      	movs	r0, #87	; 0x57
   1a80e:	4b56      	ldr	r3, [pc, #344]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a810:	4798      	blx	r3
   1a812:	0003      	movs	r3, r0
   1a814:	001a      	movs	r2, r3
   1a816:	4b55      	ldr	r3, [pc, #340]	; (1a96c <operateOnWaterEvent+0x320>)
   1a818:	749a      	strb	r2, [r3, #18]
   1a81a:	e081      	b.n	1a920 <operateOnWaterEvent+0x2d4>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1a81c:	4b4e      	ldr	r3, [pc, #312]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a81e:	78db      	ldrb	r3, [r3, #3]
   1a820:	2b00      	cmp	r3, #0
   1a822:	d027      	beq.n	1a874 <operateOnWaterEvent+0x228>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
   1a824:	4b52      	ldr	r3, [pc, #328]	; (1a970 <operateOnWaterEvent+0x324>)
   1a826:	795b      	ldrb	r3, [r3, #5]
   1a828:	2b00      	cmp	r3, #0
   1a82a:	d00b      	beq.n	1a844 <operateOnWaterEvent+0x1f8>
   1a82c:	1dfb      	adds	r3, r7, #7
   1a82e:	781b      	ldrb	r3, [r3, #0]
   1a830:	2b01      	cmp	r3, #1
   1a832:	d807      	bhi.n	1a844 <operateOnWaterEvent+0x1f8>
   1a834:	4b47      	ldr	r3, [pc, #284]	; (1a954 <operateOnWaterEvent+0x308>)
   1a836:	781b      	ldrb	r3, [r3, #0]
   1a838:	2b01      	cmp	r3, #1
   1a83a:	d903      	bls.n	1a844 <operateOnWaterEvent+0x1f8>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
   1a83c:	4b4d      	ldr	r3, [pc, #308]	; (1a974 <operateOnWaterEvent+0x328>)
   1a83e:	2201      	movs	r2, #1
   1a840:	701a      	strb	r2, [r3, #0]
   1a842:	e04d      	b.n	1a8e0 <operateOnWaterEvent+0x294>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
   1a844:	1dfb      	adds	r3, r7, #7
   1a846:	781b      	ldrb	r3, [r3, #0]
   1a848:	2b03      	cmp	r3, #3
   1a84a:	d149      	bne.n	1a8e0 <operateOnWaterEvent+0x294>
   1a84c:	4b41      	ldr	r3, [pc, #260]	; (1a954 <operateOnWaterEvent+0x308>)
   1a84e:	781b      	ldrb	r3, [r3, #0]
   1a850:	2b02      	cmp	r3, #2
   1a852:	d845      	bhi.n	1a8e0 <operateOnWaterEvent+0x294>
			{
				if(m2m_Numbers_struct.m2mSetting)
   1a854:	4b46      	ldr	r3, [pc, #280]	; (1a970 <operateOnWaterEvent+0x324>)
   1a856:	795b      	ldrb	r3, [r3, #5]
   1a858:	2b00      	cmp	r3, #0
   1a85a:	d003      	beq.n	1a864 <operateOnWaterEvent+0x218>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   1a85c:	4b45      	ldr	r3, [pc, #276]	; (1a974 <operateOnWaterEvent+0x328>)
   1a85e:	2201      	movs	r2, #1
   1a860:	705a      	strb	r2, [r3, #1]
   1a862:	e03d      	b.n	1a8e0 <operateOnWaterEvent+0x294>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   1a864:	2045      	movs	r0, #69	; 0x45
   1a866:	4b40      	ldr	r3, [pc, #256]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a868:	4798      	blx	r3
   1a86a:	0003      	movs	r3, r0
   1a86c:	001a      	movs	r2, r3
   1a86e:	4b3f      	ldr	r3, [pc, #252]	; (1a96c <operateOnWaterEvent+0x320>)
   1a870:	73da      	strb	r2, [r3, #15]
   1a872:	e035      	b.n	1a8e0 <operateOnWaterEvent+0x294>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
   1a874:	1dfb      	adds	r3, r7, #7
   1a876:	781b      	ldrb	r3, [r3, #0]
   1a878:	2b03      	cmp	r3, #3
   1a87a:	d10b      	bne.n	1a894 <operateOnWaterEvent+0x248>
   1a87c:	4b35      	ldr	r3, [pc, #212]	; (1a954 <operateOnWaterEvent+0x308>)
   1a87e:	781b      	ldrb	r3, [r3, #0]
   1a880:	2b02      	cmp	r3, #2
   1a882:	d807      	bhi.n	1a894 <operateOnWaterEvent+0x248>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   1a884:	2045      	movs	r0, #69	; 0x45
   1a886:	4b38      	ldr	r3, [pc, #224]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a888:	4798      	blx	r3
   1a88a:	0003      	movs	r3, r0
   1a88c:	001a      	movs	r2, r3
   1a88e:	4b37      	ldr	r3, [pc, #220]	; (1a96c <operateOnWaterEvent+0x320>)
   1a890:	73da      	strb	r2, [r3, #15]
   1a892:	e025      	b.n	1a8e0 <operateOnWaterEvent+0x294>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
   1a894:	1dfb      	adds	r3, r7, #7
   1a896:	781b      	ldrb	r3, [r3, #0]
   1a898:	2b02      	cmp	r3, #2
   1a89a:	d121      	bne.n	1a8e0 <operateOnWaterEvent+0x294>
   1a89c:	4b2d      	ldr	r3, [pc, #180]	; (1a954 <operateOnWaterEvent+0x308>)
   1a89e:	781b      	ldrb	r3, [r3, #0]
   1a8a0:	2b01      	cmp	r3, #1
   1a8a2:	d81d      	bhi.n	1a8e0 <operateOnWaterEvent+0x294>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
   1a8a4:	4b2c      	ldr	r3, [pc, #176]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a8a6:	791b      	ldrb	r3, [r3, #4]
   1a8a8:	2b00      	cmp	r3, #0
   1a8aa:	d00e      	beq.n	1a8ca <operateOnWaterEvent+0x27e>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
   1a8ac:	4b2a      	ldr	r3, [pc, #168]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a8ae:	799b      	ldrb	r3, [r3, #6]
   1a8b0:	2b00      	cmp	r3, #0
   1a8b2:	d00a      	beq.n	1a8ca <operateOnWaterEvent+0x27e>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
   1a8b4:	1dbb      	adds	r3, r7, #6
   1a8b6:	781b      	ldrb	r3, [r3, #0]
   1a8b8:	2b01      	cmp	r3, #1
   1a8ba:	d806      	bhi.n	1a8ca <operateOnWaterEvent+0x27e>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   1a8bc:	4b2e      	ldr	r3, [pc, #184]	; (1a978 <operateOnWaterEvent+0x32c>)
   1a8be:	785b      	ldrb	r3, [r3, #1]
   1a8c0:	b2db      	uxtb	r3, r3
   1a8c2:	2b00      	cmp	r3, #0
   1a8c4:	d001      	beq.n	1a8ca <operateOnWaterEvent+0x27e>
						{
							triggerAutoStart();
   1a8c6:	4b2d      	ldr	r3, [pc, #180]	; (1a97c <operateOnWaterEvent+0x330>)
   1a8c8:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
   1a8ca:	4b23      	ldr	r3, [pc, #140]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a8cc:	799b      	ldrb	r3, [r3, #6]
   1a8ce:	2b00      	cmp	r3, #0
   1a8d0:	d006      	beq.n	1a8e0 <operateOnWaterEvent+0x294>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   1a8d2:	4b29      	ldr	r3, [pc, #164]	; (1a978 <operateOnWaterEvent+0x32c>)
   1a8d4:	785b      	ldrb	r3, [r3, #1]
   1a8d6:	b2db      	uxtb	r3, r3
   1a8d8:	2b00      	cmp	r3, #0
   1a8da:	d001      	beq.n	1a8e0 <operateOnWaterEvent+0x294>
				{
					triggerAutoStart();
   1a8dc:	4b27      	ldr	r3, [pc, #156]	; (1a97c <operateOnWaterEvent+0x330>)
   1a8de:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   1a8e0:	4b1d      	ldr	r3, [pc, #116]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a8e2:	791b      	ldrb	r3, [r3, #4]
   1a8e4:	2b00      	cmp	r3, #0
   1a8e6:	d01b      	beq.n	1a920 <operateOnWaterEvent+0x2d4>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
   1a8e8:	1dbb      	adds	r3, r7, #6
   1a8ea:	781b      	ldrb	r3, [r3, #0]
   1a8ec:	2b00      	cmp	r3, #0
   1a8ee:	d117      	bne.n	1a920 <operateOnWaterEvent+0x2d4>
   1a8f0:	4b1a      	ldr	r3, [pc, #104]	; (1a95c <operateOnWaterEvent+0x310>)
   1a8f2:	781b      	ldrb	r3, [r3, #0]
   1a8f4:	b2db      	uxtb	r3, r3
   1a8f6:	2b00      	cmp	r3, #0
   1a8f8:	d012      	beq.n	1a920 <operateOnWaterEvent+0x2d4>
   1a8fa:	1dfb      	adds	r3, r7, #7
   1a8fc:	781b      	ldrb	r3, [r3, #0]
   1a8fe:	2b00      	cmp	r3, #0
   1a900:	d00e      	beq.n	1a920 <operateOnWaterEvent+0x2d4>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
   1a902:	4b1d      	ldr	r3, [pc, #116]	; (1a978 <operateOnWaterEvent+0x32c>)
   1a904:	785b      	ldrb	r3, [r3, #1]
   1a906:	b2db      	uxtb	r3, r3
   1a908:	2b00      	cmp	r3, #0
   1a90a:	d002      	beq.n	1a912 <operateOnWaterEvent+0x2c6>
				{
					triggerAutoStart();
   1a90c:	4b1b      	ldr	r3, [pc, #108]	; (1a97c <operateOnWaterEvent+0x330>)
   1a90e:	4798      	blx	r3
   1a910:	e006      	b.n	1a920 <operateOnWaterEvent+0x2d4>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
   1a912:	2057      	movs	r0, #87	; 0x57
   1a914:	4b14      	ldr	r3, [pc, #80]	; (1a968 <operateOnWaterEvent+0x31c>)
   1a916:	4798      	blx	r3
   1a918:	0003      	movs	r3, r0
   1a91a:	001a      	movs	r2, r3
   1a91c:	4b13      	ldr	r3, [pc, #76]	; (1a96c <operateOnWaterEvent+0x320>)
   1a91e:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
   1a920:	4b0d      	ldr	r3, [pc, #52]	; (1a958 <operateOnWaterEvent+0x30c>)
   1a922:	791b      	ldrb	r3, [r3, #4]
   1a924:	2b00      	cmp	r3, #0
   1a926:	d004      	beq.n	1a932 <operateOnWaterEvent+0x2e6>
	{
		updateOverheadLevel(oLevel);
   1a928:	1dbb      	adds	r3, r7, #6
   1a92a:	781b      	ldrb	r3, [r3, #0]
   1a92c:	0018      	movs	r0, r3
   1a92e:	4b14      	ldr	r3, [pc, #80]	; (1a980 <operateOnWaterEvent+0x334>)
   1a930:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
   1a932:	1dfb      	adds	r3, r7, #7
   1a934:	781b      	ldrb	r3, [r3, #0]
   1a936:	0018      	movs	r0, r3
   1a938:	4b12      	ldr	r3, [pc, #72]	; (1a984 <operateOnWaterEvent+0x338>)
   1a93a:	4798      	blx	r3
   1a93c:	e002      	b.n	1a944 <operateOnWaterEvent+0x2f8>
			return;
   1a93e:	46c0      	nop			; (mov r8, r8)
   1a940:	e000      	b.n	1a944 <operateOnWaterEvent+0x2f8>
				return;
   1a942:	46c0      	nop			; (mov r8, r8)
}
   1a944:	46bd      	mov	sp, r7
   1a946:	b002      	add	sp, #8
   1a948:	bd80      	pop	{r7, pc}
   1a94a:	46c0      	nop			; (mov r8, r8)
   1a94c:	20000971 	.word	0x20000971
   1a950:	20000962 	.word	0x20000962
   1a954:	20000a5c 	.word	0x20000a5c
   1a958:	2000082c 	.word	0x2000082c
   1a95c:	20000990 	.word	0x20000990
   1a960:	0001bbf1 	.word	0x0001bbf1
   1a964:	0001c4fd 	.word	0x0001c4fd
   1a968:	00014c4d 	.word	0x00014c4d
   1a96c:	20000918 	.word	0x20000918
   1a970:	20000754 	.word	0x20000754
   1a974:	200009c4 	.word	0x200009c4
   1a978:	20000854 	.word	0x20000854
   1a97c:	0001bf55 	.word	0x0001bf55
   1a980:	0001a185 	.word	0x0001a185
   1a984:	0001a2b5 	.word	0x0001a2b5

0001a988 <Configure_ADC0>:

void Configure_ADC0(void)
{
   1a988:	b580      	push	{r7, lr}
   1a98a:	b08c      	sub	sp, #48	; 0x30
   1a98c:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
   1a98e:	003b      	movs	r3, r7
   1a990:	0018      	movs	r0, r3
   1a992:	4b1a      	ldr	r3, [pc, #104]	; (1a9fc <Configure_ADC0+0x74>)
   1a994:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
   1a996:	003b      	movs	r3, r7
   1a998:	2213      	movs	r2, #19
   1a99a:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
   1a99c:	003b      	movs	r3, r7
   1a99e:	22c0      	movs	r2, #192	; 0xc0
   1a9a0:	0152      	lsls	r2, r2, #5
   1a9a2:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
   1a9a4:	003b      	movs	r3, r7
   1a9a6:	2203      	movs	r2, #3
   1a9a8:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
   1a9aa:	003b      	movs	r3, r7
   1a9ac:	2203      	movs	r2, #3
   1a9ae:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
   1a9b0:	003b      	movs	r3, r7
   1a9b2:	2200      	movs	r2, #0
   1a9b4:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
   1a9b6:	003b      	movs	r3, r7
   1a9b8:	2200      	movs	r2, #0
   1a9ba:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
   1a9bc:	003b      	movs	r3, r7
   1a9be:	2280      	movs	r2, #128	; 0x80
   1a9c0:	00d2      	lsls	r2, r2, #3
   1a9c2:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
   1a9c4:	003b      	movs	r3, r7
   1a9c6:	2201      	movs	r2, #1
   1a9c8:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
   1a9ca:	003a      	movs	r2, r7
   1a9cc:	490c      	ldr	r1, [pc, #48]	; (1aa00 <Configure_ADC0+0x78>)
   1a9ce:	4b0d      	ldr	r3, [pc, #52]	; (1aa04 <Configure_ADC0+0x7c>)
   1a9d0:	0018      	movs	r0, r3
   1a9d2:	4b0d      	ldr	r3, [pc, #52]	; (1aa08 <Configure_ADC0+0x80>)
   1a9d4:	4798      	blx	r3
	
	/************************************************************************/
	/*ADC Callback Setup                                                    */
	adc_register_callback(&adc_inst, adc_buffer_complete_callback, ADC_CALLBACK_READ_BUFFER);
   1a9d6:	490d      	ldr	r1, [pc, #52]	; (1aa0c <Configure_ADC0+0x84>)
   1a9d8:	4b0a      	ldr	r3, [pc, #40]	; (1aa04 <Configure_ADC0+0x7c>)
   1a9da:	2200      	movs	r2, #0
   1a9dc:	0018      	movs	r0, r3
   1a9de:	4b0c      	ldr	r3, [pc, #48]	; (1aa10 <Configure_ADC0+0x88>)
   1a9e0:	4798      	blx	r3
	adc_enable_callback(&adc_inst, ADC_CALLBACK_READ_BUFFER);
   1a9e2:	4b08      	ldr	r3, [pc, #32]	; (1aa04 <Configure_ADC0+0x7c>)
   1a9e4:	2100      	movs	r1, #0
   1a9e6:	0018      	movs	r0, r3
   1a9e8:	4b0a      	ldr	r3, [pc, #40]	; (1aa14 <Configure_ADC0+0x8c>)
   1a9ea:	4798      	blx	r3
	/************************************************************************/
	
	adc_enable(&adc_inst);
   1a9ec:	4b05      	ldr	r3, [pc, #20]	; (1aa04 <Configure_ADC0+0x7c>)
   1a9ee:	0018      	movs	r0, r3
   1a9f0:	4b09      	ldr	r3, [pc, #36]	; (1aa18 <Configure_ADC0+0x90>)
   1a9f2:	4798      	blx	r3
}
   1a9f4:	46c0      	nop			; (mov r8, r8)
   1a9f6:	46bd      	mov	sp, r7
   1a9f8:	b00c      	add	sp, #48	; 0x30
   1a9fa:	bd80      	pop	{r7, pc}
   1a9fc:	0001dfad 	.word	0x0001dfad
   1aa00:	42004000 	.word	0x42004000
   1aa04:	20000a20 	.word	0x20000a20
   1aa08:	0001e5fd 	.word	0x0001e5fd
   1aa0c:	0001aa1d 	.word	0x0001aa1d
   1aa10:	0001e8fd 	.word	0x0001e8fd
   1aa14:	00019f8d 	.word	0x00019f8d
   1aa18:	00019df5 	.word	0x00019df5

0001aa1c <adc_buffer_complete_callback>:

void adc_buffer_complete_callback(const struct adc_module *const module)
{
   1aa1c:	b580      	push	{r7, lr}
   1aa1e:	b082      	sub	sp, #8
   1aa20:	af00      	add	r7, sp, #0
   1aa22:	6078      	str	r0, [r7, #4]
	adc_read_buffer_done = true;
   1aa24:	4b06      	ldr	r3, [pc, #24]	; (1aa40 <adc_buffer_complete_callback+0x24>)
   1aa26:	2201      	movs	r2, #1
   1aa28:	701a      	strb	r2, [r3, #0]
	vTaskNotifyGiveFromISR(motorTask,NULL);
   1aa2a:	4b06      	ldr	r3, [pc, #24]	; (1aa44 <adc_buffer_complete_callback+0x28>)
   1aa2c:	681b      	ldr	r3, [r3, #0]
   1aa2e:	2100      	movs	r1, #0
   1aa30:	0018      	movs	r0, r3
   1aa32:	4b05      	ldr	r3, [pc, #20]	; (1aa48 <adc_buffer_complete_callback+0x2c>)
   1aa34:	4798      	blx	r3
}
   1aa36:	46c0      	nop			; (mov r8, r8)
   1aa38:	46bd      	mov	sp, r7
   1aa3a:	b002      	add	sp, #8
   1aa3c:	bd80      	pop	{r7, pc}
   1aa3e:	46c0      	nop			; (mov r8, r8)
   1aa40:	20000945 	.word	0x20000945
   1aa44:	20000438 	.word	0x20000438
   1aa48:	00021755 	.word	0x00021755

0001aa4c <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
   1aa4c:	b580      	push	{r7, lr}
   1aa4e:	b084      	sub	sp, #16
   1aa50:	af00      	add	r7, sp, #0
   1aa52:	6078      	str	r0, [r7, #4]
   1aa54:	000a      	movs	r2, r1
   1aa56:	1cbb      	adds	r3, r7, #2
   1aa58:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
   1aa5a:	687b      	ldr	r3, [r7, #4]
   1aa5c:	b2da      	uxtb	r2, r3
   1aa5e:	4b24      	ldr	r3, [pc, #144]	; (1aaf0 <Read_ADC0+0xa4>)
   1aa60:	0011      	movs	r1, r2
   1aa62:	0018      	movs	r0, r3
   1aa64:	4b23      	ldr	r3, [pc, #140]	; (1aaf4 <Read_ADC0+0xa8>)
   1aa66:	4798      	blx	r3
	uint16_t current_value = 0;
   1aa68:	2308      	movs	r3, #8
   1aa6a:	18fb      	adds	r3, r7, r3
   1aa6c:	2200      	movs	r2, #0
   1aa6e:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
   1aa70:	2300      	movs	r3, #0
   1aa72:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   1aa74:	230a      	movs	r3, #10
   1aa76:	18fb      	adds	r3, r7, r3
   1aa78:	2200      	movs	r2, #0
   1aa7a:	801a      	strh	r2, [r3, #0]
   1aa7c:	e026      	b.n	1aacc <Read_ADC0+0x80>
	{
		current_value = 0;
   1aa7e:	2308      	movs	r3, #8
   1aa80:	18fb      	adds	r3, r7, r3
   1aa82:	2200      	movs	r2, #0
   1aa84:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
   1aa86:	4b1a      	ldr	r3, [pc, #104]	; (1aaf0 <Read_ADC0+0xa4>)
   1aa88:	0018      	movs	r0, r3
   1aa8a:	4b1b      	ldr	r3, [pc, #108]	; (1aaf8 <Read_ADC0+0xac>)
   1aa8c:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
   1aa8e:	46c0      	nop			; (mov r8, r8)
   1aa90:	4b17      	ldr	r3, [pc, #92]	; (1aaf0 <Read_ADC0+0xa4>)
   1aa92:	0018      	movs	r0, r3
   1aa94:	4b19      	ldr	r3, [pc, #100]	; (1aafc <Read_ADC0+0xb0>)
   1aa96:	4798      	blx	r3
   1aa98:	0002      	movs	r2, r0
   1aa9a:	2301      	movs	r3, #1
   1aa9c:	4013      	ands	r3, r2
   1aa9e:	2b01      	cmp	r3, #1
   1aaa0:	d1f6      	bne.n	1aa90 <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
   1aaa2:	2308      	movs	r3, #8
   1aaa4:	18fa      	adds	r2, r7, r3
   1aaa6:	4b12      	ldr	r3, [pc, #72]	; (1aaf0 <Read_ADC0+0xa4>)
   1aaa8:	0011      	movs	r1, r2
   1aaaa:	0018      	movs	r0, r3
   1aaac:	4b14      	ldr	r3, [pc, #80]	; (1ab00 <Read_ADC0+0xb4>)
   1aaae:	4798      	blx	r3
		total_value+=current_value;
   1aab0:	2308      	movs	r3, #8
   1aab2:	18fb      	adds	r3, r7, r3
   1aab4:	881b      	ldrh	r3, [r3, #0]
   1aab6:	001a      	movs	r2, r3
   1aab8:	68fb      	ldr	r3, [r7, #12]
   1aaba:	189b      	adds	r3, r3, r2
   1aabc:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   1aabe:	230a      	movs	r3, #10
   1aac0:	18fb      	adds	r3, r7, r3
   1aac2:	881a      	ldrh	r2, [r3, #0]
   1aac4:	230a      	movs	r3, #10
   1aac6:	18fb      	adds	r3, r7, r3
   1aac8:	3201      	adds	r2, #1
   1aaca:	801a      	strh	r2, [r3, #0]
   1aacc:	230a      	movs	r3, #10
   1aace:	18fa      	adds	r2, r7, r3
   1aad0:	1cbb      	adds	r3, r7, #2
   1aad2:	8812      	ldrh	r2, [r2, #0]
   1aad4:	881b      	ldrh	r3, [r3, #0]
   1aad6:	429a      	cmp	r2, r3
   1aad8:	d3d1      	bcc.n	1aa7e <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
   1aada:	1cbb      	adds	r3, r7, #2
   1aadc:	881a      	ldrh	r2, [r3, #0]
   1aade:	4b09      	ldr	r3, [pc, #36]	; (1ab04 <Read_ADC0+0xb8>)
   1aae0:	0011      	movs	r1, r2
   1aae2:	68f8      	ldr	r0, [r7, #12]
   1aae4:	4798      	blx	r3
   1aae6:	0003      	movs	r3, r0
}
   1aae8:	0018      	movs	r0, r3
   1aaea:	46bd      	mov	sp, r7
   1aaec:	b004      	add	sp, #16
   1aaee:	bd80      	pop	{r7, pc}
   1aaf0:	20000a20 	.word	0x20000a20
   1aaf4:	00019f19 	.word	0x00019f19
   1aaf8:	00019e55 	.word	0x00019e55
   1aafc:	00019d4d 	.word	0x00019d4d
   1ab00:	00019e9d 	.word	0x00019e9d
   1ab04:	00026ee5 	.word	0x00026ee5

0001ab08 <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin, uint32_t oVoltage)
{
   1ab08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab0a:	b09b      	sub	sp, #108	; 0x6c
   1ab0c:	af00      	add	r7, sp, #0
   1ab0e:	6378      	str	r0, [r7, #52]	; 0x34
   1ab10:	6339      	str	r1, [r7, #48]	; 0x30
   1ab12:	466b      	mov	r3, sp
   1ab14:	607b      	str	r3, [r7, #4]
	delay_ms(5);
   1ab16:	2000      	movs	r0, #0
   1ab18:	4bd3      	ldr	r3, [pc, #844]	; (1ae68 <Read_Voltage_ADC0+0x360>)
   1ab1a:	4798      	blx	r3
   1ab1c:	0003      	movs	r3, r0
   1ab1e:	61bb      	str	r3, [r7, #24]
   1ab20:	2300      	movs	r3, #0
   1ab22:	61fb      	str	r3, [r7, #28]
   1ab24:	69b8      	ldr	r0, [r7, #24]
   1ab26:	69f9      	ldr	r1, [r7, #28]
   1ab28:	0003      	movs	r3, r0
   1ab2a:	000c      	movs	r4, r1
   1ab2c:	0f9a      	lsrs	r2, r3, #30
   1ab2e:	00a6      	lsls	r6, r4, #2
   1ab30:	4316      	orrs	r6, r2
   1ab32:	009d      	lsls	r5, r3, #2
   1ab34:	0003      	movs	r3, r0
   1ab36:	000c      	movs	r4, r1
   1ab38:	195b      	adds	r3, r3, r5
   1ab3a:	4174      	adcs	r4, r6
   1ab3c:	49cb      	ldr	r1, [pc, #812]	; (1ae6c <Read_Voltage_ADC0+0x364>)
   1ab3e:	2200      	movs	r2, #0
   1ab40:	185b      	adds	r3, r3, r1
   1ab42:	4154      	adcs	r4, r2
   1ab44:	0018      	movs	r0, r3
   1ab46:	0021      	movs	r1, r4
   1ab48:	4cc9      	ldr	r4, [pc, #804]	; (1ae70 <Read_Voltage_ADC0+0x368>)
   1ab4a:	4aca      	ldr	r2, [pc, #808]	; (1ae74 <Read_Voltage_ADC0+0x36c>)
   1ab4c:	2300      	movs	r3, #0
   1ab4e:	47a0      	blx	r4
   1ab50:	0003      	movs	r3, r0
   1ab52:	000c      	movs	r4, r1
   1ab54:	0018      	movs	r0, r3
   1ab56:	4bc8      	ldr	r3, [pc, #800]	; (1ae78 <Read_Voltage_ADC0+0x370>)
   1ab58:	4798      	blx	r3
	
	adc_set_positive_input(&adc_inst, adc_pin);
   1ab5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ab5c:	b2da      	uxtb	r2, r3
   1ab5e:	4bc7      	ldr	r3, [pc, #796]	; (1ae7c <Read_Voltage_ADC0+0x374>)
   1ab60:	0011      	movs	r1, r2
   1ab62:	0018      	movs	r0, r3
   1ab64:	4bc6      	ldr	r3, [pc, #792]	; (1ae80 <Read_Voltage_ADC0+0x378>)
   1ab66:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
   1ab68:	2324      	movs	r3, #36	; 0x24
   1ab6a:	2230      	movs	r2, #48	; 0x30
   1ab6c:	4694      	mov	ip, r2
   1ab6e:	44bc      	add	ip, r7
   1ab70:	4463      	add	r3, ip
   1ab72:	2288      	movs	r2, #136	; 0x88
   1ab74:	0092      	lsls	r2, r2, #2
   1ab76:	801a      	strh	r2, [r3, #0]
	uint16_t samples_buffer[no_of_samples];
   1ab78:	2324      	movs	r3, #36	; 0x24
   1ab7a:	2230      	movs	r2, #48	; 0x30
   1ab7c:	4694      	mov	ip, r2
   1ab7e:	44bc      	add	ip, r7
   1ab80:	4463      	add	r3, ip
   1ab82:	881b      	ldrh	r3, [r3, #0]
   1ab84:	001a      	movs	r2, r3
   1ab86:	3a01      	subs	r2, #1
   1ab88:	653a      	str	r2, [r7, #80]	; 0x50
   1ab8a:	613b      	str	r3, [r7, #16]
   1ab8c:	2200      	movs	r2, #0
   1ab8e:	617a      	str	r2, [r7, #20]
   1ab90:	6938      	ldr	r0, [r7, #16]
   1ab92:	6979      	ldr	r1, [r7, #20]
   1ab94:	0002      	movs	r2, r0
   1ab96:	0f12      	lsrs	r2, r2, #28
   1ab98:	000c      	movs	r4, r1
   1ab9a:	0124      	lsls	r4, r4, #4
   1ab9c:	62fc      	str	r4, [r7, #44]	; 0x2c
   1ab9e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   1aba0:	4314      	orrs	r4, r2
   1aba2:	62fc      	str	r4, [r7, #44]	; 0x2c
   1aba4:	0002      	movs	r2, r0
   1aba6:	0112      	lsls	r2, r2, #4
   1aba8:	62ba      	str	r2, [r7, #40]	; 0x28
   1abaa:	60bb      	str	r3, [r7, #8]
   1abac:	2200      	movs	r2, #0
   1abae:	60fa      	str	r2, [r7, #12]
   1abb0:	68b8      	ldr	r0, [r7, #8]
   1abb2:	68f9      	ldr	r1, [r7, #12]
   1abb4:	0002      	movs	r2, r0
   1abb6:	0f12      	lsrs	r2, r2, #28
   1abb8:	000c      	movs	r4, r1
   1abba:	0124      	lsls	r4, r4, #4
   1abbc:	627c      	str	r4, [r7, #36]	; 0x24
   1abbe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1abc0:	4314      	orrs	r4, r2
   1abc2:	627c      	str	r4, [r7, #36]	; 0x24
   1abc4:	0002      	movs	r2, r0
   1abc6:	0112      	lsls	r2, r2, #4
   1abc8:	623a      	str	r2, [r7, #32]
   1abca:	005b      	lsls	r3, r3, #1
   1abcc:	3301      	adds	r3, #1
   1abce:	3307      	adds	r3, #7
   1abd0:	08db      	lsrs	r3, r3, #3
   1abd2:	00db      	lsls	r3, r3, #3
   1abd4:	466a      	mov	r2, sp
   1abd6:	1ad3      	subs	r3, r2, r3
   1abd8:	469d      	mov	sp, r3
   1abda:	466b      	mov	r3, sp
   1abdc:	3301      	adds	r3, #1
   1abde:	085b      	lsrs	r3, r3, #1
   1abe0:	005b      	lsls	r3, r3, #1
   1abe2:	64fb      	str	r3, [r7, #76]	; 0x4c
	
	/************************************************************************/
	/*Using Buffered ADC to take Readings                                   */
	/************************************************************************/
	adc_read_buffer_done = false;
   1abe4:	4ba7      	ldr	r3, [pc, #668]	; (1ae84 <Read_Voltage_ADC0+0x37c>)
   1abe6:	2200      	movs	r2, #0
   1abe8:	701a      	strb	r2, [r3, #0]
	//uint32_t temp = xTaskGetTickCount();
	while(adc_read_buffer_job(&adc_inst, samples_buffer, no_of_samples)!=STATUS_OK)
   1abea:	46c0      	nop			; (mov r8, r8)
   1abec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1abee:	2324      	movs	r3, #36	; 0x24
   1abf0:	2230      	movs	r2, #48	; 0x30
   1abf2:	4694      	mov	ip, r2
   1abf4:	44bc      	add	ip, r7
   1abf6:	4463      	add	r3, ip
   1abf8:	881a      	ldrh	r2, [r3, #0]
   1abfa:	4ba0      	ldr	r3, [pc, #640]	; (1ae7c <Read_Voltage_ADC0+0x374>)
   1abfc:	0018      	movs	r0, r3
   1abfe:	4ba2      	ldr	r3, [pc, #648]	; (1ae88 <Read_Voltage_ADC0+0x380>)
   1ac00:	4798      	blx	r3
   1ac02:	1e03      	subs	r3, r0, #0
   1ac04:	d1f2      	bne.n	1abec <Read_Voltage_ADC0+0xe4>
	{}
	ulTaskNotifyTake(pdTRUE,100/portTICK_PERIOD_MS);
   1ac06:	2164      	movs	r1, #100	; 0x64
   1ac08:	2001      	movs	r0, #1
   1ac0a:	4ba0      	ldr	r3, [pc, #640]	; (1ae8c <Read_Voltage_ADC0+0x384>)
   1ac0c:	4798      	blx	r3
	//while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
	//}
	//}

	
	if(adc_read_buffer_done)
   1ac0e:	4b9d      	ldr	r3, [pc, #628]	; (1ae84 <Read_Voltage_ADC0+0x37c>)
   1ac10:	781b      	ldrb	r3, [r3, #0]
   1ac12:	2b00      	cmp	r3, #0
   1ac14:	d100      	bne.n	1ac18 <Read_Voltage_ADC0+0x110>
   1ac16:	e120      	b.n	1ae5a <Read_Voltage_ADC0+0x352>
	{
		
		
		uint32_t square = 0;
   1ac18:	2300      	movs	r3, #0
   1ac1a:	667b      	str	r3, [r7, #100]	; 0x64
		double  mean = 0.0;
   1ac1c:	2300      	movs	r3, #0
   1ac1e:	2400      	movs	r4, #0
   1ac20:	643b      	str	r3, [r7, #64]	; 0x40
   1ac22:	647c      	str	r4, [r7, #68]	; 0x44
		double  root = 0.0;
   1ac24:	2300      	movs	r3, #0
   1ac26:	2400      	movs	r4, #0
   1ac28:	63bb      	str	r3, [r7, #56]	; 0x38
   1ac2a:	63fc      	str	r4, [r7, #60]	; 0x3c
		uint16_t lastRead=0;
   1ac2c:	2332      	movs	r3, #50	; 0x32
   1ac2e:	2230      	movs	r2, #48	; 0x30
   1ac30:	4694      	mov	ip, r2
   1ac32:	44bc      	add	ip, r7
   1ac34:	4463      	add	r3, ip
   1ac36:	2200      	movs	r2, #0
   1ac38:	801a      	strh	r2, [r3, #0]
		
		int temp=0;
   1ac3a:	2300      	movs	r3, #0
   1ac3c:	65fb      	str	r3, [r7, #92]	; 0x5c
		bool highDetect = false;
   1ac3e:	232b      	movs	r3, #43	; 0x2b
   1ac40:	2230      	movs	r2, #48	; 0x30
   1ac42:	4694      	mov	ip, r2
   1ac44:	44bc      	add	ip, r7
   1ac46:	4463      	add	r3, ip
   1ac48:	2200      	movs	r2, #0
   1ac4a:	701a      	strb	r2, [r3, #0]
		uint16_t highDetectIndex;
		for (uint16_t i = 0; i < no_of_samples; i++)
   1ac4c:	2326      	movs	r3, #38	; 0x26
   1ac4e:	2230      	movs	r2, #48	; 0x30
   1ac50:	4694      	mov	ip, r2
   1ac52:	44bc      	add	ip, r7
   1ac54:	4463      	add	r3, ip
   1ac56:	2200      	movs	r2, #0
   1ac58:	801a      	strh	r2, [r3, #0]
   1ac5a:	e0c5      	b.n	1ade8 <Read_Voltage_ADC0+0x2e0>
		{
			if(i==0)
   1ac5c:	2326      	movs	r3, #38	; 0x26
   1ac5e:	2230      	movs	r2, #48	; 0x30
   1ac60:	4694      	mov	ip, r2
   1ac62:	44bc      	add	ip, r7
   1ac64:	4463      	add	r3, ip
   1ac66:	881b      	ldrh	r3, [r3, #0]
   1ac68:	2b00      	cmp	r3, #0
   1ac6a:	d10f      	bne.n	1ac8c <Read_Voltage_ADC0+0x184>
			{
				lastRead = samples_buffer[i];
   1ac6c:	2326      	movs	r3, #38	; 0x26
   1ac6e:	2230      	movs	r2, #48	; 0x30
   1ac70:	4694      	mov	ip, r2
   1ac72:	44bc      	add	ip, r7
   1ac74:	4463      	add	r3, ip
   1ac76:	8819      	ldrh	r1, [r3, #0]
   1ac78:	2332      	movs	r3, #50	; 0x32
   1ac7a:	2230      	movs	r2, #48	; 0x30
   1ac7c:	4694      	mov	ip, r2
   1ac7e:	44bc      	add	ip, r7
   1ac80:	4463      	add	r3, ip
   1ac82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1ac84:	0049      	lsls	r1, r1, #1
   1ac86:	5a8a      	ldrh	r2, [r1, r2]
   1ac88:	801a      	strh	r2, [r3, #0]
   1ac8a:	e07a      	b.n	1ad82 <Read_Voltage_ADC0+0x27a>
			}
			else
			{
				
				if(!highDetect)
   1ac8c:	232b      	movs	r3, #43	; 0x2b
   1ac8e:	2230      	movs	r2, #48	; 0x30
   1ac90:	4694      	mov	ip, r2
   1ac92:	44bc      	add	ip, r7
   1ac94:	4463      	add	r3, ip
   1ac96:	781b      	ldrb	r3, [r3, #0]
   1ac98:	2201      	movs	r2, #1
   1ac9a:	4053      	eors	r3, r2
   1ac9c:	b2db      	uxtb	r3, r3
   1ac9e:	2b00      	cmp	r3, #0
   1aca0:	d012      	beq.n	1acc8 <Read_Voltage_ADC0+0x1c0>
				{
					temp = samples_buffer[i] - lastRead;
   1aca2:	2326      	movs	r3, #38	; 0x26
   1aca4:	2230      	movs	r2, #48	; 0x30
   1aca6:	4694      	mov	ip, r2
   1aca8:	44bc      	add	ip, r7
   1acaa:	4463      	add	r3, ip
   1acac:	881a      	ldrh	r2, [r3, #0]
   1acae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1acb0:	0052      	lsls	r2, r2, #1
   1acb2:	5ad3      	ldrh	r3, [r2, r3]
   1acb4:	001a      	movs	r2, r3
   1acb6:	2332      	movs	r3, #50	; 0x32
   1acb8:	2130      	movs	r1, #48	; 0x30
   1acba:	468c      	mov	ip, r1
   1acbc:	44bc      	add	ip, r7
   1acbe:	4463      	add	r3, ip
   1acc0:	881b      	ldrh	r3, [r3, #0]
   1acc2:	1ad3      	subs	r3, r2, r3
   1acc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   1acc6:	e010      	b.n	1acea <Read_Voltage_ADC0+0x1e2>
				}
				else
				{
					temp = lastRead - samples_buffer[i];
   1acc8:	2332      	movs	r3, #50	; 0x32
   1acca:	2230      	movs	r2, #48	; 0x30
   1accc:	4694      	mov	ip, r2
   1acce:	44bc      	add	ip, r7
   1acd0:	4463      	add	r3, ip
   1acd2:	881b      	ldrh	r3, [r3, #0]
   1acd4:	2226      	movs	r2, #38	; 0x26
   1acd6:	2130      	movs	r1, #48	; 0x30
   1acd8:	468c      	mov	ip, r1
   1acda:	44bc      	add	ip, r7
   1acdc:	4462      	add	r2, ip
   1acde:	8811      	ldrh	r1, [r2, #0]
   1ace0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1ace2:	0049      	lsls	r1, r1, #1
   1ace4:	5a8a      	ldrh	r2, [r1, r2]
   1ace6:	1a9b      	subs	r3, r3, r2
   1ace8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				
				lastRead = samples_buffer[i];
   1acea:	2326      	movs	r3, #38	; 0x26
   1acec:	2230      	movs	r2, #48	; 0x30
   1acee:	4694      	mov	ip, r2
   1acf0:	44bc      	add	ip, r7
   1acf2:	4463      	add	r3, ip
   1acf4:	8819      	ldrh	r1, [r3, #0]
   1acf6:	2332      	movs	r3, #50	; 0x32
   1acf8:	2230      	movs	r2, #48	; 0x30
   1acfa:	4694      	mov	ip, r2
   1acfc:	44bc      	add	ip, r7
   1acfe:	4463      	add	r3, ip
   1ad00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1ad02:	0049      	lsls	r1, r1, #1
   1ad04:	5a8a      	ldrh	r2, [r1, r2]
   1ad06:	801a      	strh	r2, [r3, #0]
				
				if(temp>500)
   1ad08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1ad0a:	23fa      	movs	r3, #250	; 0xfa
   1ad0c:	005b      	lsls	r3, r3, #1
   1ad0e:	429a      	cmp	r2, r3
   1ad10:	dd37      	ble.n	1ad82 <Read_Voltage_ADC0+0x27a>
				{
					if(!highDetect)
   1ad12:	232b      	movs	r3, #43	; 0x2b
   1ad14:	2230      	movs	r2, #48	; 0x30
   1ad16:	4694      	mov	ip, r2
   1ad18:	44bc      	add	ip, r7
   1ad1a:	4463      	add	r3, ip
   1ad1c:	781b      	ldrb	r3, [r3, #0]
   1ad1e:	2201      	movs	r2, #1
   1ad20:	4053      	eors	r3, r2
   1ad22:	b2db      	uxtb	r3, r3
   1ad24:	2b00      	cmp	r3, #0
   1ad26:	d013      	beq.n	1ad50 <Read_Voltage_ADC0+0x248>
					{
						highDetect= true;
   1ad28:	232b      	movs	r3, #43	; 0x2b
   1ad2a:	2230      	movs	r2, #48	; 0x30
   1ad2c:	4694      	mov	ip, r2
   1ad2e:	44bc      	add	ip, r7
   1ad30:	4463      	add	r3, ip
   1ad32:	2201      	movs	r2, #1
   1ad34:	701a      	strb	r2, [r3, #0]
						highDetectIndex=i;
   1ad36:	2328      	movs	r3, #40	; 0x28
   1ad38:	2230      	movs	r2, #48	; 0x30
   1ad3a:	4694      	mov	ip, r2
   1ad3c:	44bc      	add	ip, r7
   1ad3e:	4463      	add	r3, ip
   1ad40:	2226      	movs	r2, #38	; 0x26
   1ad42:	2130      	movs	r1, #48	; 0x30
   1ad44:	468c      	mov	ip, r1
   1ad46:	44bc      	add	ip, r7
   1ad48:	4462      	add	r2, ip
   1ad4a:	8812      	ldrh	r2, [r2, #0]
   1ad4c:	801a      	strh	r2, [r3, #0]
   1ad4e:	e018      	b.n	1ad82 <Read_Voltage_ADC0+0x27a>
					}
					else
					{
						if(i-highDetectIndex<15)
   1ad50:	2326      	movs	r3, #38	; 0x26
   1ad52:	2230      	movs	r2, #48	; 0x30
   1ad54:	4694      	mov	ip, r2
   1ad56:	44bc      	add	ip, r7
   1ad58:	4463      	add	r3, ip
   1ad5a:	881a      	ldrh	r2, [r3, #0]
   1ad5c:	2328      	movs	r3, #40	; 0x28
   1ad5e:	2130      	movs	r1, #48	; 0x30
   1ad60:	468c      	mov	ip, r1
   1ad62:	44bc      	add	ip, r7
   1ad64:	4463      	add	r3, ip
   1ad66:	881b      	ldrh	r3, [r3, #0]
   1ad68:	1ad3      	subs	r3, r2, r3
   1ad6a:	2b0e      	cmp	r3, #14
   1ad6c:	dc09      	bgt.n	1ad82 <Read_Voltage_ADC0+0x27a>
						{
							invalidateVoltageReadings=true;
   1ad6e:	4b48      	ldr	r3, [pc, #288]	; (1ae90 <Read_Voltage_ADC0+0x388>)
   1ad70:	2201      	movs	r2, #1
   1ad72:	701a      	strb	r2, [r3, #0]
							invalidateVoltageReadingTime = xTaskGetTickCount();
   1ad74:	4b47      	ldr	r3, [pc, #284]	; (1ae94 <Read_Voltage_ADC0+0x38c>)
   1ad76:	4798      	blx	r3
   1ad78:	0002      	movs	r2, r0
   1ad7a:	4b47      	ldr	r3, [pc, #284]	; (1ae98 <Read_Voltage_ADC0+0x390>)
   1ad7c:	601a      	str	r2, [r3, #0]
							return 3999;
   1ad7e:	4b47      	ldr	r3, [pc, #284]	; (1ae9c <Read_Voltage_ADC0+0x394>)
   1ad80:	e06c      	b.n	1ae5c <Read_Voltage_ADC0+0x354>
						}
					}
				}
			}
			
			square += pow(samples_buffer[i], 2);
   1ad82:	2326      	movs	r3, #38	; 0x26
   1ad84:	2230      	movs	r2, #48	; 0x30
   1ad86:	4694      	mov	ip, r2
   1ad88:	44bc      	add	ip, r7
   1ad8a:	4463      	add	r3, ip
   1ad8c:	881a      	ldrh	r2, [r3, #0]
   1ad8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ad90:	0052      	lsls	r2, r2, #1
   1ad92:	5ad2      	ldrh	r2, [r2, r3]
   1ad94:	4b42      	ldr	r3, [pc, #264]	; (1aea0 <Read_Voltage_ADC0+0x398>)
   1ad96:	0010      	movs	r0, r2
   1ad98:	4798      	blx	r3
   1ad9a:	2300      	movs	r3, #0
   1ad9c:	2480      	movs	r4, #128	; 0x80
   1ad9e:	05e4      	lsls	r4, r4, #23
   1ada0:	001a      	movs	r2, r3
   1ada2:	0023      	movs	r3, r4
   1ada4:	4c3f      	ldr	r4, [pc, #252]	; (1aea4 <Read_Voltage_ADC0+0x39c>)
   1ada6:	47a0      	blx	r4
   1ada8:	0005      	movs	r5, r0
   1adaa:	000e      	movs	r6, r1
   1adac:	4b3c      	ldr	r3, [pc, #240]	; (1aea0 <Read_Voltage_ADC0+0x398>)
   1adae:	6e78      	ldr	r0, [r7, #100]	; 0x64
   1adb0:	4798      	blx	r3
   1adb2:	4c3d      	ldr	r4, [pc, #244]	; (1aea8 <Read_Voltage_ADC0+0x3a0>)
   1adb4:	002a      	movs	r2, r5
   1adb6:	0033      	movs	r3, r6
   1adb8:	47a0      	blx	r4
   1adba:	0003      	movs	r3, r0
   1adbc:	000c      	movs	r4, r1
   1adbe:	0019      	movs	r1, r3
   1adc0:	0022      	movs	r2, r4
   1adc2:	4b3a      	ldr	r3, [pc, #232]	; (1aeac <Read_Voltage_ADC0+0x3a4>)
   1adc4:	0008      	movs	r0, r1
   1adc6:	0011      	movs	r1, r2
   1adc8:	4798      	blx	r3
   1adca:	0003      	movs	r3, r0
   1adcc:	667b      	str	r3, [r7, #100]	; 0x64
		for (uint16_t i = 0; i < no_of_samples; i++)
   1adce:	2326      	movs	r3, #38	; 0x26
   1add0:	2230      	movs	r2, #48	; 0x30
   1add2:	4694      	mov	ip, r2
   1add4:	44bc      	add	ip, r7
   1add6:	4463      	add	r3, ip
   1add8:	881a      	ldrh	r2, [r3, #0]
   1adda:	2326      	movs	r3, #38	; 0x26
   1addc:	2130      	movs	r1, #48	; 0x30
   1adde:	468c      	mov	ip, r1
   1ade0:	44bc      	add	ip, r7
   1ade2:	4463      	add	r3, ip
   1ade4:	3201      	adds	r2, #1
   1ade6:	801a      	strh	r2, [r3, #0]
   1ade8:	2326      	movs	r3, #38	; 0x26
   1adea:	2230      	movs	r2, #48	; 0x30
   1adec:	18ba      	adds	r2, r7, r2
   1adee:	18d2      	adds	r2, r2, r3
   1adf0:	2324      	movs	r3, #36	; 0x24
   1adf2:	2130      	movs	r1, #48	; 0x30
   1adf4:	468c      	mov	ip, r1
   1adf6:	44bc      	add	ip, r7
   1adf8:	4463      	add	r3, ip
   1adfa:	8812      	ldrh	r2, [r2, #0]
   1adfc:	881b      	ldrh	r3, [r3, #0]
   1adfe:	429a      	cmp	r2, r3
   1ae00:	d200      	bcs.n	1ae04 <Read_Voltage_ADC0+0x2fc>
   1ae02:	e72b      	b.n	1ac5c <Read_Voltage_ADC0+0x154>
		}
		
		mean = (square / (float)(no_of_samples));
   1ae04:	4b2a      	ldr	r3, [pc, #168]	; (1aeb0 <Read_Voltage_ADC0+0x3a8>)
   1ae06:	6e78      	ldr	r0, [r7, #100]	; 0x64
   1ae08:	4798      	blx	r3
   1ae0a:	1c04      	adds	r4, r0, #0
   1ae0c:	2324      	movs	r3, #36	; 0x24
   1ae0e:	2230      	movs	r2, #48	; 0x30
   1ae10:	4694      	mov	ip, r2
   1ae12:	44bc      	add	ip, r7
   1ae14:	4463      	add	r3, ip
   1ae16:	881a      	ldrh	r2, [r3, #0]
   1ae18:	4b25      	ldr	r3, [pc, #148]	; (1aeb0 <Read_Voltage_ADC0+0x3a8>)
   1ae1a:	0010      	movs	r0, r2
   1ae1c:	4798      	blx	r3
   1ae1e:	1c02      	adds	r2, r0, #0
   1ae20:	4b24      	ldr	r3, [pc, #144]	; (1aeb4 <Read_Voltage_ADC0+0x3ac>)
   1ae22:	1c11      	adds	r1, r2, #0
   1ae24:	1c20      	adds	r0, r4, #0
   1ae26:	4798      	blx	r3
   1ae28:	1c03      	adds	r3, r0, #0
   1ae2a:	1c1a      	adds	r2, r3, #0
   1ae2c:	4b22      	ldr	r3, [pc, #136]	; (1aeb8 <Read_Voltage_ADC0+0x3b0>)
   1ae2e:	1c10      	adds	r0, r2, #0
   1ae30:	4798      	blx	r3
   1ae32:	0003      	movs	r3, r0
   1ae34:	000c      	movs	r4, r1
   1ae36:	643b      	str	r3, [r7, #64]	; 0x40
   1ae38:	647c      	str	r4, [r7, #68]	; 0x44
		// Calculate Root.
		root = sqrt(mean);
   1ae3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ae3c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1ae3e:	0018      	movs	r0, r3
   1ae40:	0021      	movs	r1, r4
   1ae42:	4b1e      	ldr	r3, [pc, #120]	; (1aebc <Read_Voltage_ADC0+0x3b4>)
   1ae44:	4798      	blx	r3
   1ae46:	0003      	movs	r3, r0
   1ae48:	000c      	movs	r4, r1
   1ae4a:	63bb      	str	r3, [r7, #56]	; 0x38
   1ae4c:	63fc      	str	r4, [r7, #60]	; 0x3c
		//{
			//delay_us(1);
		//}
		////
		
		return (uint32_t)root;
   1ae4e:	4b17      	ldr	r3, [pc, #92]	; (1aeac <Read_Voltage_ADC0+0x3a4>)
   1ae50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1ae52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1ae54:	4798      	blx	r3
   1ae56:	0003      	movs	r3, r0
   1ae58:	e000      	b.n	1ae5c <Read_Voltage_ADC0+0x354>
	}
	else
	{
		return 0;
   1ae5a:	2300      	movs	r3, #0
   1ae5c:	687a      	ldr	r2, [r7, #4]
   1ae5e:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
   1ae60:	0018      	movs	r0, r3
   1ae62:	46bd      	mov	sp, r7
   1ae64:	b01b      	add	sp, #108	; 0x6c
   1ae66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae68:	0002521d 	.word	0x0002521d
   1ae6c:	00001b57 	.word	0x00001b57
   1ae70:	0002724d 	.word	0x0002724d
   1ae74:	00001b58 	.word	0x00001b58
   1ae78:	20000001 	.word	0x20000001
   1ae7c:	20000a20 	.word	0x20000a20
   1ae80:	00019f19 	.word	0x00019f19
   1ae84:	20000945 	.word	0x20000945
   1ae88:	0001e93d 	.word	0x0001e93d
   1ae8c:	000216c1 	.word	0x000216c1
   1ae90:	20000a45 	.word	0x20000a45
   1ae94:	00020dad 	.word	0x00020dad
   1ae98:	200009a0 	.word	0x200009a0
   1ae9c:	00000f9f 	.word	0x00000f9f
   1aea0:	000294d9 	.word	0x000294d9
   1aea4:	00025c51 	.word	0x00025c51
   1aea8:	000279f9 	.word	0x000279f9
   1aeac:	000272e1 	.word	0x000272e1
   1aeb0:	0002796d 	.word	0x0002796d
   1aeb4:	0002749d 	.word	0x0002749d
   1aeb8:	00029549 	.word	0x00029549
   1aebc:	00025fa9 	.word	0x00025fa9

0001aec0 <autoSetCurrent>:

void autoSetCurrent(void)
{
   1aec0:	b580      	push	{r7, lr}
   1aec2:	b084      	sub	sp, #16
   1aec4:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
   1aec6:	4b2f      	ldr	r3, [pc, #188]	; (1af84 <autoSetCurrent+0xc4>)
   1aec8:	4798      	blx	r3
   1aeca:	1e03      	subs	r3, r0, #0
   1aecc:	d050      	beq.n	1af70 <autoSetCurrent+0xb0>
   1aece:	4b2e      	ldr	r3, [pc, #184]	; (1af88 <autoSetCurrent+0xc8>)
   1aed0:	781b      	ldrb	r3, [r3, #0]
   1aed2:	2201      	movs	r2, #1
   1aed4:	4053      	eors	r3, r2
   1aed6:	b2db      	uxtb	r3, r3
   1aed8:	2b00      	cmp	r3, #0
   1aeda:	d049      	beq.n	1af70 <autoSetCurrent+0xb0>
   1aedc:	4b2b      	ldr	r3, [pc, #172]	; (1af8c <autoSetCurrent+0xcc>)
   1aede:	781b      	ldrb	r3, [r3, #0]
   1aee0:	2201      	movs	r2, #1
   1aee2:	4053      	eors	r3, r2
   1aee4:	b2db      	uxtb	r3, r3
   1aee6:	2b00      	cmp	r3, #0
   1aee8:	d042      	beq.n	1af70 <autoSetCurrent+0xb0>
   1aeea:	4b29      	ldr	r3, [pc, #164]	; (1af90 <autoSetCurrent+0xd0>)
   1aeec:	781b      	ldrb	r3, [r3, #0]
   1aeee:	2201      	movs	r2, #1
   1aef0:	4053      	eors	r3, r2
   1aef2:	b2db      	uxtb	r3, r3
   1aef4:	2b00      	cmp	r3, #0
   1aef6:	d03b      	beq.n	1af70 <autoSetCurrent+0xb0>
   1aef8:	4b26      	ldr	r3, [pc, #152]	; (1af94 <autoSetCurrent+0xd4>)
   1aefa:	4798      	blx	r3
   1aefc:	1e03      	subs	r3, r0, #0
   1aefe:	d037      	beq.n	1af70 <autoSetCurrent+0xb0>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
   1af00:	4b25      	ldr	r3, [pc, #148]	; (1af98 <autoSetCurrent+0xd8>)
   1af02:	691b      	ldr	r3, [r3, #16]
   1af04:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
   1af06:	68fb      	ldr	r3, [r7, #12]
   1af08:	2bf9      	cmp	r3, #249	; 0xf9
   1af0a:	d806      	bhi.n	1af1a <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
   1af0c:	2000      	movs	r0, #0
   1af0e:	4b23      	ldr	r3, [pc, #140]	; (1af9c <autoSetCurrent+0xdc>)
   1af10:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
   1af12:	2059      	movs	r0, #89	; 0x59
   1af14:	4b22      	ldr	r3, [pc, #136]	; (1afa0 <autoSetCurrent+0xe0>)
   1af16:	4798      	blx	r3
			return;
   1af18:	e030      	b.n	1af7c <autoSetCurrent+0xbc>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
   1af1a:	4b22      	ldr	r3, [pc, #136]	; (1afa4 <autoSetCurrent+0xe4>)
   1af1c:	7f1b      	ldrb	r3, [r3, #28]
   1af1e:	b2db      	uxtb	r3, r3
   1af20:	001a      	movs	r2, r3
   1af22:	68fb      	ldr	r3, [r7, #12]
   1af24:	435a      	muls	r2, r3
   1af26:	4b20      	ldr	r3, [pc, #128]	; (1afa8 <autoSetCurrent+0xe8>)
   1af28:	2164      	movs	r1, #100	; 0x64
   1af2a:	0010      	movs	r0, r2
   1af2c:	4798      	blx	r3
   1af2e:	0003      	movs	r3, r0
   1af30:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
   1af32:	4b1c      	ldr	r3, [pc, #112]	; (1afa4 <autoSetCurrent+0xe4>)
   1af34:	7f5b      	ldrb	r3, [r3, #29]
   1af36:	b2db      	uxtb	r3, r3
   1af38:	001a      	movs	r2, r3
   1af3a:	68fb      	ldr	r3, [r7, #12]
   1af3c:	435a      	muls	r2, r3
   1af3e:	4b1a      	ldr	r3, [pc, #104]	; (1afa8 <autoSetCurrent+0xe8>)
   1af40:	2164      	movs	r1, #100	; 0x64
   1af42:	0010      	movs	r0, r2
   1af44:	4798      	blx	r3
   1af46:	0003      	movs	r3, r0
   1af48:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
   1af4a:	68fb      	ldr	r3, [r7, #12]
   1af4c:	0018      	movs	r0, r3
   1af4e:	4b17      	ldr	r3, [pc, #92]	; (1afac <autoSetCurrent+0xec>)
   1af50:	4798      	blx	r3
		setUnderloadValue(tempUnder);
   1af52:	68bb      	ldr	r3, [r7, #8]
   1af54:	0018      	movs	r0, r3
   1af56:	4b16      	ldr	r3, [pc, #88]	; (1afb0 <autoSetCurrent+0xf0>)
   1af58:	4798      	blx	r3
		setOverloadValue(tempOver);
   1af5a:	687b      	ldr	r3, [r7, #4]
   1af5c:	0018      	movs	r0, r3
   1af5e:	4b15      	ldr	r3, [pc, #84]	; (1afb4 <autoSetCurrent+0xf4>)
   1af60:	4798      	blx	r3
		setCurrentDetection(true);
   1af62:	2001      	movs	r0, #1
   1af64:	4b0d      	ldr	r3, [pc, #52]	; (1af9c <autoSetCurrent+0xdc>)
   1af66:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
   1af68:	204b      	movs	r0, #75	; 0x4b
   1af6a:	4b0d      	ldr	r3, [pc, #52]	; (1afa0 <autoSetCurrent+0xe0>)
   1af6c:	4798      	blx	r3
	{
   1af6e:	e005      	b.n	1af7c <autoSetCurrent+0xbc>
	}
	else
	{
		setCurrentDetection(false);
   1af70:	2000      	movs	r0, #0
   1af72:	4b0a      	ldr	r3, [pc, #40]	; (1af9c <autoSetCurrent+0xdc>)
   1af74:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
   1af76:	2059      	movs	r0, #89	; 0x59
   1af78:	4b09      	ldr	r3, [pc, #36]	; (1afa0 <autoSetCurrent+0xe0>)
   1af7a:	4798      	blx	r3
	}
}
   1af7c:	46bd      	mov	sp, r7
   1af7e:	b004      	add	sp, #16
   1af80:	bd80      	pop	{r7, pc}
   1af82:	46c0      	nop			; (mov r8, r8)
   1af84:	0001bbf1 	.word	0x0001bbf1
   1af88:	20000999 	.word	0x20000999
   1af8c:	2000099b 	.word	0x2000099b
   1af90:	20000988 	.word	0x20000988
   1af94:	0001bb89 	.word	0x0001bb89
   1af98:	200008e8 	.word	0x200008e8
   1af9c:	00011995 	.word	0x00011995
   1afa0:	00014e2d 	.word	0x00014e2d
   1afa4:	20000854 	.word	0x20000854
   1afa8:	00026ee5 	.word	0x00026ee5
   1afac:	00011951 	.word	0x00011951
   1afb0:	000118c9 	.word	0x000118c9
   1afb4:	0001190d 	.word	0x0001190d

0001afb8 <speakAmpere>:

void speakAmpere(void)
{
   1afb8:	b580      	push	{r7, lr}
   1afba:	b084      	sub	sp, #16
   1afbc:	af00      	add	r7, sp, #0
	if(getMotorState())
   1afbe:	4b0d      	ldr	r3, [pc, #52]	; (1aff4 <speakAmpere+0x3c>)
   1afc0:	4798      	blx	r3
   1afc2:	1e03      	subs	r3, r0, #0
   1afc4:	d00f      	beq.n	1afe6 <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1afc6:	4b0c      	ldr	r3, [pc, #48]	; (1aff8 <speakAmpere+0x40>)
   1afc8:	8a9b      	ldrh	r3, [r3, #20]
   1afca:	b29b      	uxth	r3, r3
   1afcc:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
   1afce:	1d39      	adds	r1, r7, #4
   1afd0:	68fb      	ldr	r3, [r7, #12]
   1afd2:	220a      	movs	r2, #10
   1afd4:	0018      	movs	r0, r3
   1afd6:	4b09      	ldr	r3, [pc, #36]	; (1affc <speakAmpere+0x44>)
   1afd8:	4798      	blx	r3
		playRepeatedFiles(cTemp);
   1afda:	1d3b      	adds	r3, r7, #4
   1afdc:	0018      	movs	r0, r3
   1afde:	4b08      	ldr	r3, [pc, #32]	; (1b000 <speakAmpere+0x48>)
   1afe0:	4798      	blx	r3
		return;
   1afe2:	46c0      	nop			; (mov r8, r8)
   1afe4:	e002      	b.n	1afec <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
   1afe6:	202d      	movs	r0, #45	; 0x2d
   1afe8:	4b06      	ldr	r3, [pc, #24]	; (1b004 <speakAmpere+0x4c>)
   1afea:	4798      	blx	r3
}
   1afec:	46bd      	mov	sp, r7
   1afee:	b004      	add	sp, #16
   1aff0:	bd80      	pop	{r7, pc}
   1aff2:	46c0      	nop			; (mov r8, r8)
   1aff4:	0001bbf1 	.word	0x0001bbf1
   1aff8:	200008e8 	.word	0x200008e8
   1affc:	00029ca1 	.word	0x00029ca1
   1b000:	00014a01 	.word	0x00014a01
   1b004:	00014e2d 	.word	0x00014e2d

0001b008 <PR2_ISR>:

void PR2_ISR(void)
{
   1b008:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b00a:	b08b      	sub	sp, #44	; 0x2c
   1b00c:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
   1b00e:	4b77      	ldr	r3, [pc, #476]	; (1b1ec <PR2_ISR+0x1e4>)
   1b010:	781b      	ldrb	r3, [r3, #0]
   1b012:	b2db      	uxtb	r3, r3
   1b014:	2b01      	cmp	r3, #1
   1b016:	d000      	beq.n	1b01a <PR2_ISR+0x12>
   1b018:	e0e3      	b.n	1b1e2 <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
   1b01a:	4b75      	ldr	r3, [pc, #468]	; (1b1f0 <PR2_ISR+0x1e8>)
   1b01c:	2200      	movs	r2, #0
   1b01e:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
   1b020:	2000      	movs	r0, #0
   1b022:	4b74      	ldr	r3, [pc, #464]	; (1b1f4 <PR2_ISR+0x1ec>)
   1b024:	4798      	blx	r3
   1b026:	0003      	movs	r3, r0
   1b028:	60bb      	str	r3, [r7, #8]
   1b02a:	2300      	movs	r3, #0
   1b02c:	60fb      	str	r3, [r7, #12]
   1b02e:	68bb      	ldr	r3, [r7, #8]
   1b030:	68fc      	ldr	r4, [r7, #12]
   1b032:	0f9a      	lsrs	r2, r3, #30
   1b034:	00a0      	lsls	r0, r4, #2
   1b036:	61f8      	str	r0, [r7, #28]
   1b038:	69f8      	ldr	r0, [r7, #28]
   1b03a:	4310      	orrs	r0, r2
   1b03c:	61f8      	str	r0, [r7, #28]
   1b03e:	009b      	lsls	r3, r3, #2
   1b040:	61bb      	str	r3, [r7, #24]
   1b042:	69bb      	ldr	r3, [r7, #24]
   1b044:	69fc      	ldr	r4, [r7, #28]
   1b046:	68b9      	ldr	r1, [r7, #8]
   1b048:	68fa      	ldr	r2, [r7, #12]
   1b04a:	185b      	adds	r3, r3, r1
   1b04c:	4154      	adcs	r4, r2
   1b04e:	496a      	ldr	r1, [pc, #424]	; (1b1f8 <PR2_ISR+0x1f0>)
   1b050:	2200      	movs	r2, #0
   1b052:	185b      	adds	r3, r3, r1
   1b054:	4154      	adcs	r4, r2
   1b056:	0018      	movs	r0, r3
   1b058:	0021      	movs	r1, r4
   1b05a:	4c68      	ldr	r4, [pc, #416]	; (1b1fc <PR2_ISR+0x1f4>)
   1b05c:	4a68      	ldr	r2, [pc, #416]	; (1b200 <PR2_ISR+0x1f8>)
   1b05e:	2300      	movs	r3, #0
   1b060:	47a0      	blx	r4
   1b062:	0003      	movs	r3, r0
   1b064:	000c      	movs	r4, r1
   1b066:	0018      	movs	r0, r3
   1b068:	4b66      	ldr	r3, [pc, #408]	; (1b204 <PR2_ISR+0x1fc>)
   1b06a:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
   1b06c:	2323      	movs	r3, #35	; 0x23
   1b06e:	18fb      	adds	r3, r7, r3
   1b070:	2200      	movs	r2, #0
   1b072:	701a      	strb	r2, [r3, #0]
   1b074:	2322      	movs	r3, #34	; 0x22
   1b076:	18fb      	adds	r3, r7, r3
   1b078:	2200      	movs	r2, #0
   1b07a:	701a      	strb	r2, [r3, #0]
   1b07c:	2321      	movs	r3, #33	; 0x21
   1b07e:	18fb      	adds	r3, r7, r3
   1b080:	2200      	movs	r2, #0
   1b082:	701a      	strb	r2, [r3, #0]
   1b084:	2320      	movs	r3, #32
   1b086:	18fb      	adds	r3, r7, r3
   1b088:	2200      	movs	r2, #0
   1b08a:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
   1b08c:	202b      	movs	r0, #43	; 0x2b
   1b08e:	4b5e      	ldr	r3, [pc, #376]	; (1b208 <PR2_ISR+0x200>)
   1b090:	4798      	blx	r3
   1b092:	1e03      	subs	r3, r0, #0
   1b094:	d100      	bne.n	1b098 <PR2_ISR+0x90>
   1b096:	e08e      	b.n	1b1b6 <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1b098:	2300      	movs	r3, #0
   1b09a:	627b      	str	r3, [r7, #36]	; 0x24
   1b09c:	e085      	b.n	1b1aa <PR2_ISR+0x1a2>
			{
				delay_us(25);
   1b09e:	2000      	movs	r0, #0
   1b0a0:	4b54      	ldr	r3, [pc, #336]	; (1b1f4 <PR2_ISR+0x1ec>)
   1b0a2:	4798      	blx	r3
   1b0a4:	0003      	movs	r3, r0
   1b0a6:	603b      	str	r3, [r7, #0]
   1b0a8:	2300      	movs	r3, #0
   1b0aa:	607b      	str	r3, [r7, #4]
   1b0ac:	6838      	ldr	r0, [r7, #0]
   1b0ae:	6879      	ldr	r1, [r7, #4]
   1b0b0:	0003      	movs	r3, r0
   1b0b2:	000c      	movs	r4, r1
   1b0b4:	0f9a      	lsrs	r2, r3, #30
   1b0b6:	00a6      	lsls	r6, r4, #2
   1b0b8:	4316      	orrs	r6, r2
   1b0ba:	009d      	lsls	r5, r3, #2
   1b0bc:	0003      	movs	r3, r0
   1b0be:	000c      	movs	r4, r1
   1b0c0:	195b      	adds	r3, r3, r5
   1b0c2:	4174      	adcs	r4, r6
   1b0c4:	0f9a      	lsrs	r2, r3, #30
   1b0c6:	00a1      	lsls	r1, r4, #2
   1b0c8:	6179      	str	r1, [r7, #20]
   1b0ca:	6979      	ldr	r1, [r7, #20]
   1b0cc:	4311      	orrs	r1, r2
   1b0ce:	6179      	str	r1, [r7, #20]
   1b0d0:	009a      	lsls	r2, r3, #2
   1b0d2:	613a      	str	r2, [r7, #16]
   1b0d4:	6939      	ldr	r1, [r7, #16]
   1b0d6:	697a      	ldr	r2, [r7, #20]
   1b0d8:	185b      	adds	r3, r3, r1
   1b0da:	4154      	adcs	r4, r2
   1b0dc:	494b      	ldr	r1, [pc, #300]	; (1b20c <PR2_ISR+0x204>)
   1b0de:	2200      	movs	r2, #0
   1b0e0:	185b      	adds	r3, r3, r1
   1b0e2:	4154      	adcs	r4, r2
   1b0e4:	0018      	movs	r0, r3
   1b0e6:	0021      	movs	r1, r4
   1b0e8:	4c44      	ldr	r4, [pc, #272]	; (1b1fc <PR2_ISR+0x1f4>)
   1b0ea:	4a49      	ldr	r2, [pc, #292]	; (1b210 <PR2_ISR+0x208>)
   1b0ec:	2300      	movs	r3, #0
   1b0ee:	47a0      	blx	r4
   1b0f0:	0003      	movs	r3, r0
   1b0f2:	000c      	movs	r4, r1
   1b0f4:	0018      	movs	r0, r3
   1b0f6:	4b43      	ldr	r3, [pc, #268]	; (1b204 <PR2_ISR+0x1fc>)
   1b0f8:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
   1b0fa:	202a      	movs	r0, #42	; 0x2a
   1b0fc:	4b42      	ldr	r3, [pc, #264]	; (1b208 <PR2_ISR+0x200>)
   1b0fe:	4798      	blx	r3
   1b100:	1e03      	subs	r3, r0, #0
   1b102:	d014      	beq.n	1b12e <PR2_ISR+0x126>
   1b104:	2323      	movs	r3, #35	; 0x23
   1b106:	18fb      	adds	r3, r7, r3
   1b108:	781b      	ldrb	r3, [r3, #0]
   1b10a:	b2db      	uxtb	r3, r3
   1b10c:	2b00      	cmp	r3, #0
   1b10e:	d10e      	bne.n	1b12e <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
   1b110:	2323      	movs	r3, #35	; 0x23
   1b112:	18fb      	adds	r3, r7, r3
   1b114:	2201      	movs	r2, #1
   1b116:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
   1b118:	2322      	movs	r3, #34	; 0x22
   1b11a:	18fb      	adds	r3, r7, r3
   1b11c:	781b      	ldrb	r3, [r3, #0]
   1b11e:	b2db      	uxtb	r3, r3
   1b120:	2b01      	cmp	r3, #1
   1b122:	d104      	bne.n	1b12e <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
   1b124:	2320      	movs	r3, #32
   1b126:	18fb      	adds	r3, r7, r3
   1b128:	2201      	movs	r2, #1
   1b12a:	701a      	strb	r2, [r3, #0]
						break;
   1b12c:	e043      	b.n	1b1b6 <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
   1b12e:	202a      	movs	r0, #42	; 0x2a
   1b130:	4b35      	ldr	r3, [pc, #212]	; (1b208 <PR2_ISR+0x200>)
   1b132:	4798      	blx	r3
   1b134:	0003      	movs	r3, r0
   1b136:	001a      	movs	r2, r3
   1b138:	2301      	movs	r3, #1
   1b13a:	4053      	eors	r3, r2
   1b13c:	b2db      	uxtb	r3, r3
   1b13e:	2b00      	cmp	r3, #0
   1b140:	d013      	beq.n	1b16a <PR2_ISR+0x162>
   1b142:	2322      	movs	r3, #34	; 0x22
   1b144:	18fb      	adds	r3, r7, r3
   1b146:	781b      	ldrb	r3, [r3, #0]
   1b148:	b2db      	uxtb	r3, r3
   1b14a:	2b00      	cmp	r3, #0
   1b14c:	d10d      	bne.n	1b16a <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
   1b14e:	2322      	movs	r3, #34	; 0x22
   1b150:	18fb      	adds	r3, r7, r3
   1b152:	2201      	movs	r2, #1
   1b154:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
   1b156:	2323      	movs	r3, #35	; 0x23
   1b158:	18fb      	adds	r3, r7, r3
   1b15a:	781b      	ldrb	r3, [r3, #0]
   1b15c:	b2db      	uxtb	r3, r3
   1b15e:	2b01      	cmp	r3, #1
   1b160:	d103      	bne.n	1b16a <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
   1b162:	2321      	movs	r3, #33	; 0x21
   1b164:	18fb      	adds	r3, r7, r3
   1b166:	2201      	movs	r2, #1
   1b168:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
   1b16a:	2321      	movs	r3, #33	; 0x21
   1b16c:	18fb      	adds	r3, r7, r3
   1b16e:	781b      	ldrb	r3, [r3, #0]
   1b170:	b2db      	uxtb	r3, r3
   1b172:	2b01      	cmp	r3, #1
   1b174:	d10c      	bne.n	1b190 <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
   1b176:	4b27      	ldr	r3, [pc, #156]	; (1b214 <PR2_ISR+0x20c>)
   1b178:	2202      	movs	r2, #2
   1b17a:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
   1b17c:	4b26      	ldr	r3, [pc, #152]	; (1b218 <PR2_ISR+0x210>)
   1b17e:	2202      	movs	r2, #2
   1b180:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
   1b182:	4b26      	ldr	r3, [pc, #152]	; (1b21c <PR2_ISR+0x214>)
   1b184:	2200      	movs	r2, #0
   1b186:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
   1b188:	4b18      	ldr	r3, [pc, #96]	; (1b1ec <PR2_ISR+0x1e4>)
   1b18a:	2200      	movs	r2, #0
   1b18c:	701a      	strb	r2, [r3, #0]
					break;
   1b18e:	e012      	b.n	1b1b6 <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
   1b190:	202b      	movs	r0, #43	; 0x2b
   1b192:	4b1d      	ldr	r3, [pc, #116]	; (1b208 <PR2_ISR+0x200>)
   1b194:	4798      	blx	r3
   1b196:	0003      	movs	r3, r0
   1b198:	001a      	movs	r2, r3
   1b19a:	2301      	movs	r3, #1
   1b19c:	4053      	eors	r3, r2
   1b19e:	b2db      	uxtb	r3, r3
   1b1a0:	2b00      	cmp	r3, #0
   1b1a2:	d107      	bne.n	1b1b4 <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b1a6:	3301      	adds	r3, #1
   1b1a8:	627b      	str	r3, [r7, #36]	; 0x24
   1b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b1ac:	2b77      	cmp	r3, #119	; 0x77
   1b1ae:	d800      	bhi.n	1b1b2 <PR2_ISR+0x1aa>
   1b1b0:	e775      	b.n	1b09e <PR2_ISR+0x96>
   1b1b2:	e000      	b.n	1b1b6 <PR2_ISR+0x1ae>
				{
					break;
   1b1b4:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
   1b1b6:	4b19      	ldr	r3, [pc, #100]	; (1b21c <PR2_ISR+0x214>)
   1b1b8:	781b      	ldrb	r3, [r3, #0]
   1b1ba:	b2db      	uxtb	r3, r3
   1b1bc:	3301      	adds	r3, #1
   1b1be:	b2db      	uxtb	r3, r3
   1b1c0:	4a16      	ldr	r2, [pc, #88]	; (1b21c <PR2_ISR+0x214>)
   1b1c2:	1c19      	adds	r1, r3, #0
   1b1c4:	7011      	strb	r1, [r2, #0]
   1b1c6:	2b02      	cmp	r3, #2
   1b1c8:	d90b      	bls.n	1b1e2 <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
   1b1ca:	4b14      	ldr	r3, [pc, #80]	; (1b21c <PR2_ISR+0x214>)
   1b1cc:	2200      	movs	r2, #0
   1b1ce:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1b1d0:	4b10      	ldr	r3, [pc, #64]	; (1b214 <PR2_ISR+0x20c>)
   1b1d2:	2201      	movs	r2, #1
   1b1d4:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1b1d6:	4b10      	ldr	r3, [pc, #64]	; (1b218 <PR2_ISR+0x210>)
   1b1d8:	2201      	movs	r2, #1
   1b1da:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
   1b1dc:	4b03      	ldr	r3, [pc, #12]	; (1b1ec <PR2_ISR+0x1e4>)
   1b1de:	2200      	movs	r2, #0
   1b1e0:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1b1e2:	46c0      	nop			; (mov r8, r8)
   1b1e4:	46bd      	mov	sp, r7
   1b1e6:	b00b      	add	sp, #44	; 0x2c
   1b1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b1ea:	46c0      	nop			; (mov r8, r8)
   1b1ec:	2000000c 	.word	0x2000000c
   1b1f0:	20000444 	.word	0x20000444
   1b1f4:	0002521d 	.word	0x0002521d
   1b1f8:	00001b57 	.word	0x00001b57
   1b1fc:	0002724d 	.word	0x0002724d
   1b200:	00001b58 	.word	0x00001b58
   1b204:	20000001 	.word	0x20000001
   1b208:	0001a031 	.word	0x0001a031
   1b20c:	006acfbf 	.word	0x006acfbf
   1b210:	006acfc0 	.word	0x006acfc0
   1b214:	20000948 	.word	0x20000948
   1b218:	20000440 	.word	0x20000440
   1b21c:	20000441 	.word	0x20000441

0001b220 <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
   1b220:	b580      	push	{r7, lr}
   1b222:	b084      	sub	sp, #16
   1b224:	af00      	add	r7, sp, #0
   1b226:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1b228:	4b12      	ldr	r3, [pc, #72]	; (1b274 <vTask_10ms_Timer+0x54>)
   1b22a:	4798      	blx	r3
   1b22c:	0003      	movs	r3, r0
   1b22e:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1b230:	230c      	movs	r3, #12
   1b232:	18fb      	adds	r3, r7, r3
   1b234:	210a      	movs	r1, #10
   1b236:	0018      	movs	r0, r3
   1b238:	4b0f      	ldr	r3, [pc, #60]	; (1b278 <vTask_10ms_Timer+0x58>)
   1b23a:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
   1b23c:	4b0f      	ldr	r3, [pc, #60]	; (1b27c <vTask_10ms_Timer+0x5c>)
   1b23e:	781b      	ldrb	r3, [r3, #0]
   1b240:	b2db      	uxtb	r3, r3
   1b242:	2b01      	cmp	r3, #1
   1b244:	d1f4      	bne.n	1b230 <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
   1b246:	4b0e      	ldr	r3, [pc, #56]	; (1b280 <vTask_10ms_Timer+0x60>)
   1b248:	781b      	ldrb	r3, [r3, #0]
   1b24a:	b2db      	uxtb	r3, r3
   1b24c:	3301      	adds	r3, #1
   1b24e:	b2db      	uxtb	r3, r3
   1b250:	4a0b      	ldr	r2, [pc, #44]	; (1b280 <vTask_10ms_Timer+0x60>)
   1b252:	1c19      	adds	r1, r3, #0
   1b254:	7011      	strb	r1, [r2, #0]
   1b256:	2b13      	cmp	r3, #19
   1b258:	d9ea      	bls.n	1b230 <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
   1b25a:	4b09      	ldr	r3, [pc, #36]	; (1b280 <vTask_10ms_Timer+0x60>)
   1b25c:	2200      	movs	r2, #0
   1b25e:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1b260:	4b08      	ldr	r3, [pc, #32]	; (1b284 <vTask_10ms_Timer+0x64>)
   1b262:	2201      	movs	r2, #1
   1b264:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1b266:	4b08      	ldr	r3, [pc, #32]	; (1b288 <vTask_10ms_Timer+0x68>)
   1b268:	2201      	movs	r2, #1
   1b26a:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
   1b26c:	4b03      	ldr	r3, [pc, #12]	; (1b27c <vTask_10ms_Timer+0x5c>)
   1b26e:	2200      	movs	r2, #0
   1b270:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1b272:	e7dd      	b.n	1b230 <vTask_10ms_Timer+0x10>
   1b274:	00020dad 	.word	0x00020dad
   1b278:	00020981 	.word	0x00020981
   1b27c:	2000000c 	.word	0x2000000c
   1b280:	20000444 	.word	0x20000444
   1b284:	20000948 	.word	0x20000948
   1b288:	20000440 	.word	0x20000440

0001b28c <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
   1b28c:	b580      	push	{r7, lr}
   1b28e:	b084      	sub	sp, #16
   1b290:	af00      	add	r7, sp, #0
   1b292:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1b294:	4b17      	ldr	r3, [pc, #92]	; (1b2f4 <vTask_100ms_Timer+0x68>)
   1b296:	4798      	blx	r3
   1b298:	0003      	movs	r3, r0
   1b29a:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1b29c:	230c      	movs	r3, #12
   1b29e:	18fb      	adds	r3, r7, r3
   1b2a0:	2164      	movs	r1, #100	; 0x64
   1b2a2:	0018      	movs	r0, r3
   1b2a4:	4b14      	ldr	r3, [pc, #80]	; (1b2f8 <vTask_100ms_Timer+0x6c>)
   1b2a6:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
   1b2a8:	4b14      	ldr	r3, [pc, #80]	; (1b2fc <vTask_100ms_Timer+0x70>)
   1b2aa:	781b      	ldrb	r3, [r3, #0]
   1b2ac:	b2db      	uxtb	r3, r3
   1b2ae:	1c5a      	adds	r2, r3, #1
   1b2b0:	b2d1      	uxtb	r1, r2
   1b2b2:	4a12      	ldr	r2, [pc, #72]	; (1b2fc <vTask_100ms_Timer+0x70>)
   1b2b4:	7011      	strb	r1, [r2, #0]
   1b2b6:	2b04      	cmp	r3, #4
   1b2b8:	d905      	bls.n	1b2c6 <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
   1b2ba:	4b10      	ldr	r3, [pc, #64]	; (1b2fc <vTask_100ms_Timer+0x70>)
   1b2bc:	2200      	movs	r2, #0
   1b2be:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
   1b2c0:	4b0f      	ldr	r3, [pc, #60]	; (1b300 <vTask_100ms_Timer+0x74>)
   1b2c2:	2201      	movs	r2, #1
   1b2c4:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
   1b2c6:	4b0f      	ldr	r3, [pc, #60]	; (1b304 <vTask_100ms_Timer+0x78>)
   1b2c8:	781b      	ldrb	r3, [r3, #0]
   1b2ca:	b2db      	uxtb	r3, r3
   1b2cc:	1c5a      	adds	r2, r3, #1
   1b2ce:	b2d1      	uxtb	r1, r2
   1b2d0:	4a0c      	ldr	r2, [pc, #48]	; (1b304 <vTask_100ms_Timer+0x78>)
   1b2d2:	7011      	strb	r1, [r2, #0]
   1b2d4:	2b04      	cmp	r3, #4
   1b2d6:	d9e1      	bls.n	1b29c <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
   1b2d8:	4b0a      	ldr	r3, [pc, #40]	; (1b304 <vTask_100ms_Timer+0x78>)
   1b2da:	2200      	movs	r2, #0
   1b2dc:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
   1b2de:	4b0a      	ldr	r3, [pc, #40]	; (1b308 <vTask_100ms_Timer+0x7c>)
   1b2e0:	2201      	movs	r2, #1
   1b2e2:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
   1b2e4:	4b09      	ldr	r3, [pc, #36]	; (1b30c <vTask_100ms_Timer+0x80>)
   1b2e6:	2200      	movs	r2, #0
   1b2e8:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
   1b2ea:	200b      	movs	r0, #11
   1b2ec:	4b08      	ldr	r3, [pc, #32]	; (1b310 <vTask_100ms_Timer+0x84>)
   1b2ee:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1b2f0:	e7d4      	b.n	1b29c <vTask_100ms_Timer+0x10>
   1b2f2:	46c0      	nop			; (mov r8, r8)
   1b2f4:	00020dad 	.word	0x00020dad
   1b2f8:	00020981 	.word	0x00020981
   1b2fc:	2000000d 	.word	0x2000000d
   1b300:	20000443 	.word	0x20000443
   1b304:	20000442 	.word	0x20000442
   1b308:	2000000c 	.word	0x2000000c
   1b30c:	20000444 	.word	0x20000444
   1b310:	0001a115 	.word	0x0001a115

0001b314 <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
   1b314:	b580      	push	{r7, lr}
   1b316:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
   1b318:	4b04      	ldr	r3, [pc, #16]	; (1b32c <should_Detect_New_Voltage+0x18>)
   1b31a:	781b      	ldrb	r3, [r3, #0]
   1b31c:	b2db      	uxtb	r3, r3
   1b31e:	425a      	negs	r2, r3
   1b320:	4153      	adcs	r3, r2
   1b322:	b2db      	uxtb	r3, r3
}
   1b324:	0018      	movs	r0, r3
   1b326:	46bd      	mov	sp, r7
   1b328:	bd80      	pop	{r7, pc}
   1b32a:	46c0      	nop			; (mov r8, r8)
   1b32c:	2000000d 	.word	0x2000000d

0001b330 <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
   1b330:	b590      	push	{r4, r7, lr}
   1b332:	b083      	sub	sp, #12
   1b334:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1b336:	4b25      	ldr	r3, [pc, #148]	; (1b3cc <detect_battery_voltage_and_percentage+0x9c>)
   1b338:	681a      	ldr	r2, [r3, #0]
   1b33a:	2301      	movs	r3, #1
   1b33c:	425b      	negs	r3, r3
   1b33e:	0019      	movs	r1, r3
   1b340:	0010      	movs	r0, r2
   1b342:	4b23      	ldr	r3, [pc, #140]	; (1b3d0 <detect_battery_voltage_and_percentage+0xa0>)
   1b344:	4798      	blx	r3
   1b346:	0003      	movs	r3, r0
   1b348:	2b01      	cmp	r3, #1
   1b34a:	d13b      	bne.n	1b3c4 <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
   1b34c:	21c8      	movs	r1, #200	; 0xc8
   1b34e:	2007      	movs	r0, #7
   1b350:	4b20      	ldr	r3, [pc, #128]	; (1b3d4 <detect_battery_voltage_and_percentage+0xa4>)
   1b352:	4798      	blx	r3
   1b354:	0003      	movs	r3, r0
   1b356:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
   1b358:	683b      	ldr	r3, [r7, #0]
   1b35a:	4a1f      	ldr	r2, [pc, #124]	; (1b3d8 <detect_battery_voltage_and_percentage+0xa8>)
   1b35c:	435a      	muls	r2, r3
   1b35e:	0010      	movs	r0, r2
   1b360:	4b1e      	ldr	r3, [pc, #120]	; (1b3dc <detect_battery_voltage_and_percentage+0xac>)
   1b362:	22fa      	movs	r2, #250	; 0xfa
   1b364:	0091      	lsls	r1, r2, #2
   1b366:	4798      	blx	r3
   1b368:	0003      	movs	r3, r0
   1b36a:	001a      	movs	r2, r3
   1b36c:	4b1c      	ldr	r3, [pc, #112]	; (1b3e0 <detect_battery_voltage_and_percentage+0xb0>)
   1b36e:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
   1b370:	1dfb      	adds	r3, r7, #7
   1b372:	2200      	movs	r2, #0
   1b374:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
   1b376:	4b1a      	ldr	r3, [pc, #104]	; (1b3e0 <detect_battery_voltage_and_percentage+0xb0>)
   1b378:	699b      	ldr	r3, [r3, #24]
   1b37a:	4a1a      	ldr	r2, [pc, #104]	; (1b3e4 <detect_battery_voltage_and_percentage+0xb4>)
   1b37c:	4293      	cmp	r3, r2
   1b37e:	d803      	bhi.n	1b388 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
   1b380:	1dfb      	adds	r3, r7, #7
   1b382:	2200      	movs	r2, #0
   1b384:	701a      	strb	r2, [r3, #0]
   1b386:	e012      	b.n	1b3ae <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
   1b388:	4b15      	ldr	r3, [pc, #84]	; (1b3e0 <detect_battery_voltage_and_percentage+0xb0>)
   1b38a:	699b      	ldr	r3, [r3, #24]
   1b38c:	4a16      	ldr	r2, [pc, #88]	; (1b3e8 <detect_battery_voltage_and_percentage+0xb8>)
   1b38e:	189a      	adds	r2, r3, r2
   1b390:	4b12      	ldr	r3, [pc, #72]	; (1b3dc <detect_battery_voltage_and_percentage+0xac>)
   1b392:	2109      	movs	r1, #9
   1b394:	0010      	movs	r0, r2
   1b396:	4798      	blx	r3
   1b398:	0003      	movs	r3, r0
   1b39a:	001a      	movs	r2, r3
   1b39c:	1dfb      	adds	r3, r7, #7
   1b39e:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
   1b3a0:	1dfb      	adds	r3, r7, #7
   1b3a2:	781b      	ldrb	r3, [r3, #0]
   1b3a4:	2b64      	cmp	r3, #100	; 0x64
   1b3a6:	d902      	bls.n	1b3ae <detect_battery_voltage_and_percentage+0x7e>
   1b3a8:	1dfb      	adds	r3, r7, #7
   1b3aa:	2264      	movs	r2, #100	; 0x64
   1b3ac:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
   1b3ae:	4b0c      	ldr	r3, [pc, #48]	; (1b3e0 <detect_battery_voltage_and_percentage+0xb0>)
   1b3b0:	1dfa      	adds	r2, r7, #7
   1b3b2:	7812      	ldrb	r2, [r2, #0]
   1b3b4:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
   1b3b6:	4b05      	ldr	r3, [pc, #20]	; (1b3cc <detect_battery_voltage_and_percentage+0x9c>)
   1b3b8:	6818      	ldr	r0, [r3, #0]
   1b3ba:	2300      	movs	r3, #0
   1b3bc:	2200      	movs	r2, #0
   1b3be:	2100      	movs	r1, #0
   1b3c0:	4c0a      	ldr	r4, [pc, #40]	; (1b3ec <detect_battery_voltage_and_percentage+0xbc>)
   1b3c2:	47a0      	blx	r4
	}
}
   1b3c4:	46c0      	nop			; (mov r8, r8)
   1b3c6:	46bd      	mov	sp, r7
   1b3c8:	b003      	add	sp, #12
   1b3ca:	bd90      	pop	{r4, r7, pc}
   1b3cc:	20000430 	.word	0x20000430
   1b3d0:	00020141 	.word	0x00020141
   1b3d4:	0001aa4d 	.word	0x0001aa4d
   1b3d8:	000005b1 	.word	0x000005b1
   1b3dc:	00026ee5 	.word	0x00026ee5
   1b3e0:	200008e8 	.word	0x200008e8
   1b3e4:	00000ce4 	.word	0x00000ce4
   1b3e8:	fffff31c 	.word	0xfffff31c
   1b3ec:	0001fca1 	.word	0x0001fca1

0001b3f0 <initPhaseRMStruct>:

void initPhaseRMStruct(struct rmsVoltage *phaseRMSStruct)
{
   1b3f0:	b580      	push	{r7, lr}
   1b3f2:	b084      	sub	sp, #16
   1b3f4:	af00      	add	r7, sp, #0
   1b3f6:	6078      	str	r0, [r7, #4]
	phaseRMSStruct->hasZeroReading = true;
   1b3f8:	687b      	ldr	r3, [r7, #4]
   1b3fa:	2201      	movs	r2, #1
   1b3fc:	735a      	strb	r2, [r3, #13]
	phaseRMSStruct->index=0;
   1b3fe:	687b      	ldr	r3, [r7, #4]
   1b400:	2200      	movs	r2, #0
   1b402:	731a      	strb	r2, [r3, #12]
	phaseRMSStruct->rmsVoltage=0;
   1b404:	687b      	ldr	r3, [r7, #4]
   1b406:	2200      	movs	r2, #0
   1b408:	815a      	strh	r2, [r3, #10]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1b40a:	230f      	movs	r3, #15
   1b40c:	18fb      	adds	r3, r7, r3
   1b40e:	2200      	movs	r2, #0
   1b410:	701a      	strb	r2, [r3, #0]
   1b412:	e00d      	b.n	1b430 <initPhaseRMStruct+0x40>
	{
		phaseRMSStruct->voltRange[cnt]=0;
   1b414:	230f      	movs	r3, #15
   1b416:	18fb      	adds	r3, r7, r3
   1b418:	781a      	ldrb	r2, [r3, #0]
   1b41a:	687b      	ldr	r3, [r7, #4]
   1b41c:	0052      	lsls	r2, r2, #1
   1b41e:	2100      	movs	r1, #0
   1b420:	52d1      	strh	r1, [r2, r3]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1b422:	230f      	movs	r3, #15
   1b424:	18fb      	adds	r3, r7, r3
   1b426:	781a      	ldrb	r2, [r3, #0]
   1b428:	230f      	movs	r3, #15
   1b42a:	18fb      	adds	r3, r7, r3
   1b42c:	3201      	adds	r2, #1
   1b42e:	701a      	strb	r2, [r3, #0]
   1b430:	230f      	movs	r3, #15
   1b432:	18fb      	adds	r3, r7, r3
   1b434:	781b      	ldrb	r3, [r3, #0]
   1b436:	2b04      	cmp	r3, #4
   1b438:	d9ec      	bls.n	1b414 <initPhaseRMStruct+0x24>
	}
}
   1b43a:	46c0      	nop			; (mov r8, r8)
   1b43c:	46bd      	mov	sp, r7
   1b43e:	b004      	add	sp, #16
   1b440:	bd80      	pop	{r7, pc}
	...

0001b444 <updateRMSValues>:

void updateRMSValues(struct rmsVoltage *phaseRMSStruct)
{
   1b444:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b446:	b089      	sub	sp, #36	; 0x24
   1b448:	af00      	add	r7, sp, #0
   1b44a:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t result=0;
   1b44c:	2300      	movs	r3, #0
   1b44e:	61bb      	str	r3, [r7, #24]
	double mean = 0.0;
   1b450:	2300      	movs	r3, #0
   1b452:	2400      	movs	r4, #0
   1b454:	613b      	str	r3, [r7, #16]
   1b456:	617c      	str	r4, [r7, #20]
	double root = 0.0;
   1b458:	2300      	movs	r3, #0
   1b45a:	2400      	movs	r4, #0
   1b45c:	60bb      	str	r3, [r7, #8]
   1b45e:	60fc      	str	r4, [r7, #12]
	phaseRMSStruct->hasZeroReading=false;
   1b460:	687b      	ldr	r3, [r7, #4]
   1b462:	2200      	movs	r2, #0
   1b464:	735a      	strb	r2, [r3, #13]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1b466:	231f      	movs	r3, #31
   1b468:	18fb      	adds	r3, r7, r3
   1b46a:	2200      	movs	r2, #0
   1b46c:	701a      	strb	r2, [r3, #0]
   1b46e:	e036      	b.n	1b4de <updateRMSValues+0x9a>
	{
		if(phaseRMSStruct->voltRange[cnt]==0)
   1b470:	231f      	movs	r3, #31
   1b472:	18fb      	adds	r3, r7, r3
   1b474:	781a      	ldrb	r2, [r3, #0]
   1b476:	687b      	ldr	r3, [r7, #4]
   1b478:	0052      	lsls	r2, r2, #1
   1b47a:	5ad3      	ldrh	r3, [r2, r3]
   1b47c:	2b00      	cmp	r3, #0
   1b47e:	d102      	bne.n	1b486 <updateRMSValues+0x42>
		{
			phaseRMSStruct->hasZeroReading=true;
   1b480:	687b      	ldr	r3, [r7, #4]
   1b482:	2201      	movs	r2, #1
   1b484:	735a      	strb	r2, [r3, #13]
		}
		result= result + pow(phaseRMSStruct->voltRange[cnt],2);
   1b486:	4b31      	ldr	r3, [pc, #196]	; (1b54c <updateRMSValues+0x108>)
   1b488:	69b8      	ldr	r0, [r7, #24]
   1b48a:	4798      	blx	r3
   1b48c:	0005      	movs	r5, r0
   1b48e:	000e      	movs	r6, r1
   1b490:	231f      	movs	r3, #31
   1b492:	18fb      	adds	r3, r7, r3
   1b494:	781a      	ldrb	r2, [r3, #0]
   1b496:	687b      	ldr	r3, [r7, #4]
   1b498:	0052      	lsls	r2, r2, #1
   1b49a:	5ad2      	ldrh	r2, [r2, r3]
   1b49c:	4b2b      	ldr	r3, [pc, #172]	; (1b54c <updateRMSValues+0x108>)
   1b49e:	0010      	movs	r0, r2
   1b4a0:	4798      	blx	r3
   1b4a2:	2300      	movs	r3, #0
   1b4a4:	2480      	movs	r4, #128	; 0x80
   1b4a6:	05e4      	lsls	r4, r4, #23
   1b4a8:	001a      	movs	r2, r3
   1b4aa:	0023      	movs	r3, r4
   1b4ac:	4c28      	ldr	r4, [pc, #160]	; (1b550 <updateRMSValues+0x10c>)
   1b4ae:	47a0      	blx	r4
   1b4b0:	0002      	movs	r2, r0
   1b4b2:	000b      	movs	r3, r1
   1b4b4:	4c27      	ldr	r4, [pc, #156]	; (1b554 <updateRMSValues+0x110>)
   1b4b6:	0028      	movs	r0, r5
   1b4b8:	0031      	movs	r1, r6
   1b4ba:	47a0      	blx	r4
   1b4bc:	0003      	movs	r3, r0
   1b4be:	000c      	movs	r4, r1
   1b4c0:	0019      	movs	r1, r3
   1b4c2:	0022      	movs	r2, r4
   1b4c4:	4b24      	ldr	r3, [pc, #144]	; (1b558 <updateRMSValues+0x114>)
   1b4c6:	0008      	movs	r0, r1
   1b4c8:	0011      	movs	r1, r2
   1b4ca:	4798      	blx	r3
   1b4cc:	0003      	movs	r3, r0
   1b4ce:	61bb      	str	r3, [r7, #24]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1b4d0:	231f      	movs	r3, #31
   1b4d2:	18fb      	adds	r3, r7, r3
   1b4d4:	781a      	ldrb	r2, [r3, #0]
   1b4d6:	231f      	movs	r3, #31
   1b4d8:	18fb      	adds	r3, r7, r3
   1b4da:	3201      	adds	r2, #1
   1b4dc:	701a      	strb	r2, [r3, #0]
   1b4de:	231f      	movs	r3, #31
   1b4e0:	18fb      	adds	r3, r7, r3
   1b4e2:	781b      	ldrb	r3, [r3, #0]
   1b4e4:	2b04      	cmp	r3, #4
   1b4e6:	d9c3      	bls.n	1b470 <updateRMSValues+0x2c>
	}
	mean= result / (float)NO_RMS_VOLTAGE_READINGS;
   1b4e8:	4b1c      	ldr	r3, [pc, #112]	; (1b55c <updateRMSValues+0x118>)
   1b4ea:	69b8      	ldr	r0, [r7, #24]
   1b4ec:	4798      	blx	r3
   1b4ee:	1c02      	adds	r2, r0, #0
   1b4f0:	4b1b      	ldr	r3, [pc, #108]	; (1b560 <updateRMSValues+0x11c>)
   1b4f2:	491c      	ldr	r1, [pc, #112]	; (1b564 <updateRMSValues+0x120>)
   1b4f4:	1c10      	adds	r0, r2, #0
   1b4f6:	4798      	blx	r3
   1b4f8:	1c03      	adds	r3, r0, #0
   1b4fa:	1c1a      	adds	r2, r3, #0
   1b4fc:	4b1a      	ldr	r3, [pc, #104]	; (1b568 <updateRMSValues+0x124>)
   1b4fe:	1c10      	adds	r0, r2, #0
   1b500:	4798      	blx	r3
   1b502:	0003      	movs	r3, r0
   1b504:	000c      	movs	r4, r1
   1b506:	613b      	str	r3, [r7, #16]
   1b508:	617c      	str	r4, [r7, #20]
	root = (uint32_t) (sqrt(mean));
   1b50a:	693b      	ldr	r3, [r7, #16]
   1b50c:	697c      	ldr	r4, [r7, #20]
   1b50e:	0018      	movs	r0, r3
   1b510:	0021      	movs	r1, r4
   1b512:	4b16      	ldr	r3, [pc, #88]	; (1b56c <updateRMSValues+0x128>)
   1b514:	4798      	blx	r3
   1b516:	000a      	movs	r2, r1
   1b518:	0001      	movs	r1, r0
   1b51a:	4b0f      	ldr	r3, [pc, #60]	; (1b558 <updateRMSValues+0x114>)
   1b51c:	0008      	movs	r0, r1
   1b51e:	0011      	movs	r1, r2
   1b520:	4798      	blx	r3
   1b522:	0002      	movs	r2, r0
   1b524:	4b09      	ldr	r3, [pc, #36]	; (1b54c <updateRMSValues+0x108>)
   1b526:	0010      	movs	r0, r2
   1b528:	4798      	blx	r3
   1b52a:	0003      	movs	r3, r0
   1b52c:	000c      	movs	r4, r1
   1b52e:	60bb      	str	r3, [r7, #8]
   1b530:	60fc      	str	r4, [r7, #12]
	
	phaseRMSStruct->rmsVoltage = (uint16_t) root;
   1b532:	4b09      	ldr	r3, [pc, #36]	; (1b558 <updateRMSValues+0x114>)
   1b534:	68b8      	ldr	r0, [r7, #8]
   1b536:	68f9      	ldr	r1, [r7, #12]
   1b538:	4798      	blx	r3
   1b53a:	0003      	movs	r3, r0
   1b53c:	b29a      	uxth	r2, r3
   1b53e:	687b      	ldr	r3, [r7, #4]
   1b540:	815a      	strh	r2, [r3, #10]
}
   1b542:	46c0      	nop			; (mov r8, r8)
   1b544:	46bd      	mov	sp, r7
   1b546:	b009      	add	sp, #36	; 0x24
   1b548:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b54a:	46c0      	nop			; (mov r8, r8)
   1b54c:	000294d9 	.word	0x000294d9
   1b550:	00025c51 	.word	0x00025c51
   1b554:	000279f9 	.word	0x000279f9
   1b558:	000272e1 	.word	0x000272e1
   1b55c:	0002796d 	.word	0x0002796d
   1b560:	0002749d 	.word	0x0002749d
   1b564:	40a00000 	.word	0x40a00000
   1b568:	00029549 	.word	0x00029549
   1b56c:	00025fa9 	.word	0x00025fa9

0001b570 <filterVoltage>:

uint16_t filterVoltage(enum phaseReading phase,uint16_t voltReading)
{
   1b570:	b590      	push	{r4, r7, lr}
   1b572:	b085      	sub	sp, #20
   1b574:	af00      	add	r7, sp, #0
   1b576:	0002      	movs	r2, r0
   1b578:	1dfb      	adds	r3, r7, #7
   1b57a:	701a      	strb	r2, [r3, #0]
   1b57c:	1d3b      	adds	r3, r7, #4
   1b57e:	1c0a      	adds	r2, r1, #0
   1b580:	801a      	strh	r2, [r3, #0]
	struct rmsVoltage *p1;
	if(phase==PHASE_RY)
   1b582:	1dfb      	adds	r3, r7, #7
   1b584:	781b      	ldrb	r3, [r3, #0]
   1b586:	2b00      	cmp	r3, #0
   1b588:	d102      	bne.n	1b590 <filterVoltage+0x20>
	{
		p1 = &struct_rmsRY;
   1b58a:	4b29      	ldr	r3, [pc, #164]	; (1b630 <filterVoltage+0xc0>)
   1b58c:	60fb      	str	r3, [r7, #12]
   1b58e:	e00c      	b.n	1b5aa <filterVoltage+0x3a>
	}
	else if(phase==PHASE_YB)
   1b590:	1dfb      	adds	r3, r7, #7
   1b592:	781b      	ldrb	r3, [r3, #0]
   1b594:	2b01      	cmp	r3, #1
   1b596:	d102      	bne.n	1b59e <filterVoltage+0x2e>
	{
		p1 = &struct_rmsYB;
   1b598:	4b26      	ldr	r3, [pc, #152]	; (1b634 <filterVoltage+0xc4>)
   1b59a:	60fb      	str	r3, [r7, #12]
   1b59c:	e005      	b.n	1b5aa <filterVoltage+0x3a>
	}
	else if(phase==PHASE_BR)
   1b59e:	1dfb      	adds	r3, r7, #7
   1b5a0:	781b      	ldrb	r3, [r3, #0]
   1b5a2:	2b02      	cmp	r3, #2
   1b5a4:	d101      	bne.n	1b5aa <filterVoltage+0x3a>
	{
		p1 = &struct_rmsBR;
   1b5a6:	4b24      	ldr	r3, [pc, #144]	; (1b638 <filterVoltage+0xc8>)
   1b5a8:	60fb      	str	r3, [r7, #12]
	}
	
	p1->voltRange[p1->index%NO_RMS_VOLTAGE_READINGS]=voltReading;
   1b5aa:	68fb      	ldr	r3, [r7, #12]
   1b5ac:	7b1a      	ldrb	r2, [r3, #12]
   1b5ae:	4b23      	ldr	r3, [pc, #140]	; (1b63c <filterVoltage+0xcc>)
   1b5b0:	2105      	movs	r1, #5
   1b5b2:	0010      	movs	r0, r2
   1b5b4:	4798      	blx	r3
   1b5b6:	000b      	movs	r3, r1
   1b5b8:	b2db      	uxtb	r3, r3
   1b5ba:	001a      	movs	r2, r3
   1b5bc:	68fb      	ldr	r3, [r7, #12]
   1b5be:	0052      	lsls	r2, r2, #1
   1b5c0:	1d39      	adds	r1, r7, #4
   1b5c2:	8809      	ldrh	r1, [r1, #0]
   1b5c4:	52d1      	strh	r1, [r2, r3]
	p1->index = ((p1->index) + 1 )%NO_RMS_VOLTAGE_READINGS;
   1b5c6:	68fb      	ldr	r3, [r7, #12]
   1b5c8:	7b1b      	ldrb	r3, [r3, #12]
   1b5ca:	1c5a      	adds	r2, r3, #1
   1b5cc:	4b1c      	ldr	r3, [pc, #112]	; (1b640 <filterVoltage+0xd0>)
   1b5ce:	2105      	movs	r1, #5
   1b5d0:	0010      	movs	r0, r2
   1b5d2:	4798      	blx	r3
   1b5d4:	000b      	movs	r3, r1
   1b5d6:	b2da      	uxtb	r2, r3
   1b5d8:	68fb      	ldr	r3, [r7, #12]
   1b5da:	731a      	strb	r2, [r3, #12]
	
	updateRMSValues(p1);
   1b5dc:	68fb      	ldr	r3, [r7, #12]
   1b5de:	0018      	movs	r0, r3
   1b5e0:	4b18      	ldr	r3, [pc, #96]	; (1b644 <filterVoltage+0xd4>)
   1b5e2:	4798      	blx	r3
	
	//if(voltReading > p1->rmsVoltage)
	{
		if(p1->hasZeroReading)
   1b5e4:	68fb      	ldr	r3, [r7, #12]
   1b5e6:	7b5b      	ldrb	r3, [r3, #13]
   1b5e8:	2b00      	cmp	r3, #0
   1b5ea:	d002      	beq.n	1b5f2 <filterVoltage+0x82>
		{
			return voltReading;
   1b5ec:	1d3b      	adds	r3, r7, #4
   1b5ee:	881b      	ldrh	r3, [r3, #0]
   1b5f0:	e019      	b.n	1b626 <filterVoltage+0xb6>
		
		//if ((voltReading - p1->rmsVoltage)>(p1->rmsVoltage * 6/100))
		//{
		//return p1->rmsVoltage;
		//}
		if((p1->rmsVoltage - voltReading)<(p1->rmsVoltage * 40/100))
   1b5f2:	68fb      	ldr	r3, [r7, #12]
   1b5f4:	895b      	ldrh	r3, [r3, #10]
   1b5f6:	001a      	movs	r2, r3
   1b5f8:	1d3b      	adds	r3, r7, #4
   1b5fa:	881b      	ldrh	r3, [r3, #0]
   1b5fc:	1ad4      	subs	r4, r2, r3
   1b5fe:	68fb      	ldr	r3, [r7, #12]
   1b600:	895b      	ldrh	r3, [r3, #10]
   1b602:	001a      	movs	r2, r3
   1b604:	0013      	movs	r3, r2
   1b606:	009b      	lsls	r3, r3, #2
   1b608:	189b      	adds	r3, r3, r2
   1b60a:	00db      	lsls	r3, r3, #3
   1b60c:	001a      	movs	r2, r3
   1b60e:	4b0e      	ldr	r3, [pc, #56]	; (1b648 <filterVoltage+0xd8>)
   1b610:	2164      	movs	r1, #100	; 0x64
   1b612:	0010      	movs	r0, r2
   1b614:	4798      	blx	r3
   1b616:	0003      	movs	r3, r0
   1b618:	429c      	cmp	r4, r3
   1b61a:	da02      	bge.n	1b622 <filterVoltage+0xb2>
		{
			return p1->rmsVoltage;
   1b61c:	68fb      	ldr	r3, [r7, #12]
   1b61e:	895b      	ldrh	r3, [r3, #10]
   1b620:	e001      	b.n	1b626 <filterVoltage+0xb6>
		}
		else
		{
			return voltReading;
   1b622:	1d3b      	adds	r3, r7, #4
   1b624:	881b      	ldrh	r3, [r3, #0]
		}
	}
	
	return voltReading;
}
   1b626:	0018      	movs	r0, r3
   1b628:	46bd      	mov	sp, r7
   1b62a:	b005      	add	sp, #20
   1b62c:	bd90      	pop	{r4, r7, pc}
   1b62e:	46c0      	nop			; (mov r8, r8)
   1b630:	200009b4 	.word	0x200009b4
   1b634:	20000930 	.word	0x20000930
   1b638:	200009e4 	.word	0x200009e4
   1b63c:	00026ff1 	.word	0x00026ff1
   1b640:	000271c5 	.word	0x000271c5
   1b644:	0001b445 	.word	0x0001b445
   1b648:	00026ff9 	.word	0x00026ff9

0001b64c <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
   1b64c:	b590      	push	{r4, r7, lr}
   1b64e:	b085      	sub	sp, #20
   1b650:	af00      	add	r7, sp, #0
	
	
	if(invalidateVoltageReadings)
   1b652:	4b69      	ldr	r3, [pc, #420]	; (1b7f8 <detect_Three_Phase_Voltage+0x1ac>)
   1b654:	781b      	ldrb	r3, [r3, #0]
   1b656:	2b00      	cmp	r3, #0
   1b658:	d00d      	beq.n	1b676 <detect_Three_Phase_Voltage+0x2a>
	{
		if(xTaskGetTickCount()-invalidateVoltageReadingTime>4000)
   1b65a:	4b68      	ldr	r3, [pc, #416]	; (1b7fc <detect_Three_Phase_Voltage+0x1b0>)
   1b65c:	4798      	blx	r3
   1b65e:	0002      	movs	r2, r0
   1b660:	4b67      	ldr	r3, [pc, #412]	; (1b800 <detect_Three_Phase_Voltage+0x1b4>)
   1b662:	681b      	ldr	r3, [r3, #0]
   1b664:	1ad2      	subs	r2, r2, r3
   1b666:	23fa      	movs	r3, #250	; 0xfa
   1b668:	011b      	lsls	r3, r3, #4
   1b66a:	429a      	cmp	r2, r3
   1b66c:	d800      	bhi.n	1b670 <detect_Three_Phase_Voltage+0x24>
   1b66e:	e0bf      	b.n	1b7f0 <detect_Three_Phase_Voltage+0x1a4>
		{
			invalidateVoltageReadings=false;
   1b670:	4b61      	ldr	r3, [pc, #388]	; (1b7f8 <detect_Three_Phase_Voltage+0x1ac>)
   1b672:	2200      	movs	r2, #0
   1b674:	701a      	strb	r2, [r3, #0]
		{
			return;
		}
	}
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1b676:	4b63      	ldr	r3, [pc, #396]	; (1b804 <detect_Three_Phase_Voltage+0x1b8>)
   1b678:	681a      	ldr	r2, [r3, #0]
   1b67a:	2301      	movs	r3, #1
   1b67c:	425b      	negs	r3, r3
   1b67e:	0019      	movs	r1, r3
   1b680:	0010      	movs	r0, r2
   1b682:	4b61      	ldr	r3, [pc, #388]	; (1b808 <detect_Three_Phase_Voltage+0x1bc>)
   1b684:	4798      	blx	r3
   1b686:	0003      	movs	r3, r0
   1b688:	2b01      	cmp	r3, #1
   1b68a:	d000      	beq.n	1b68e <detect_Three_Phase_Voltage+0x42>
   1b68c:	e0b1      	b.n	1b7f2 <detect_Three_Phase_Voltage+0x1a6>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19,Analog_Parameter_Struct.PhaseRY_Voltage);
   1b68e:	4b5f      	ldr	r3, [pc, #380]	; (1b80c <detect_Three_Phase_Voltage+0x1c0>)
   1b690:	681b      	ldr	r3, [r3, #0]
   1b692:	0019      	movs	r1, r3
   1b694:	2013      	movs	r0, #19
   1b696:	4b5e      	ldr	r3, [pc, #376]	; (1b810 <detect_Three_Phase_Voltage+0x1c4>)
   1b698:	4798      	blx	r3
   1b69a:	0003      	movs	r3, r0
   1b69c:	60fb      	str	r3, [r7, #12]
		if(invalidateVoltageReadings)
   1b69e:	4b56      	ldr	r3, [pc, #344]	; (1b7f8 <detect_Three_Phase_Voltage+0x1ac>)
   1b6a0:	781b      	ldrb	r3, [r3, #0]
   1b6a2:	2b00      	cmp	r3, #0
   1b6a4:	d007      	beq.n	1b6b6 <detect_Three_Phase_Voltage+0x6a>
		{
			xSemaphoreGive(xADC_Semaphore);
   1b6a6:	4b57      	ldr	r3, [pc, #348]	; (1b804 <detect_Three_Phase_Voltage+0x1b8>)
   1b6a8:	6818      	ldr	r0, [r3, #0]
   1b6aa:	2300      	movs	r3, #0
   1b6ac:	2200      	movs	r2, #0
   1b6ae:	2100      	movs	r1, #0
   1b6b0:	4c58      	ldr	r4, [pc, #352]	; (1b814 <detect_Three_Phase_Voltage+0x1c8>)
   1b6b2:	47a0      	blx	r4
			return;
   1b6b4:	e09d      	b.n	1b7f2 <detect_Three_Phase_Voltage+0x1a6>
		}
		adcRY = (adcRY-10);
   1b6b6:	68fb      	ldr	r3, [r7, #12]
   1b6b8:	3b0a      	subs	r3, #10
   1b6ba:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
   1b6bc:	68fb      	ldr	r3, [r7, #12]
   1b6be:	2b00      	cmp	r3, #0
   1b6c0:	da02      	bge.n	1b6c8 <detect_Three_Phase_Voltage+0x7c>
		{
			adcRY = 0;
   1b6c2:	2300      	movs	r3, #0
   1b6c4:	60fb      	str	r3, [r7, #12]
   1b6c6:	e010      	b.n	1b6ea <detect_Three_Phase_Voltage+0x9e>
		}
		else
		{
			adcRY = (((adcRY-10)*660)/1000);
   1b6c8:	68fb      	ldr	r3, [r7, #12]
   1b6ca:	3b0a      	subs	r3, #10
   1b6cc:	22a5      	movs	r2, #165	; 0xa5
   1b6ce:	0092      	lsls	r2, r2, #2
   1b6d0:	435a      	muls	r2, r3
   1b6d2:	0010      	movs	r0, r2
   1b6d4:	4b50      	ldr	r3, [pc, #320]	; (1b818 <detect_Three_Phase_Voltage+0x1cc>)
   1b6d6:	22fa      	movs	r2, #250	; 0xfa
   1b6d8:	0091      	lsls	r1, r2, #2
   1b6da:	4798      	blx	r3
   1b6dc:	0003      	movs	r3, r0
   1b6de:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
   1b6e0:	68fb      	ldr	r3, [r7, #12]
   1b6e2:	2b00      	cmp	r3, #0
   1b6e4:	da01      	bge.n	1b6ea <detect_Three_Phase_Voltage+0x9e>
			{
				adcRY = 0;
   1b6e6:	2300      	movs	r3, #0
   1b6e8:	60fb      	str	r3, [r7, #12]
			}
		}
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18,Analog_Parameter_Struct.PhaseYB_Voltage);
   1b6ea:	4b48      	ldr	r3, [pc, #288]	; (1b80c <detect_Three_Phase_Voltage+0x1c0>)
   1b6ec:	685b      	ldr	r3, [r3, #4]
   1b6ee:	0019      	movs	r1, r3
   1b6f0:	2012      	movs	r0, #18
   1b6f2:	4b47      	ldr	r3, [pc, #284]	; (1b810 <detect_Three_Phase_Voltage+0x1c4>)
   1b6f4:	4798      	blx	r3
   1b6f6:	0003      	movs	r3, r0
   1b6f8:	60bb      	str	r3, [r7, #8]
		if(invalidateVoltageReadings)
   1b6fa:	4b3f      	ldr	r3, [pc, #252]	; (1b7f8 <detect_Three_Phase_Voltage+0x1ac>)
   1b6fc:	781b      	ldrb	r3, [r3, #0]
   1b6fe:	2b00      	cmp	r3, #0
   1b700:	d007      	beq.n	1b712 <detect_Three_Phase_Voltage+0xc6>
		{
			xSemaphoreGive(xADC_Semaphore);
   1b702:	4b40      	ldr	r3, [pc, #256]	; (1b804 <detect_Three_Phase_Voltage+0x1b8>)
   1b704:	6818      	ldr	r0, [r3, #0]
   1b706:	2300      	movs	r3, #0
   1b708:	2200      	movs	r2, #0
   1b70a:	2100      	movs	r1, #0
   1b70c:	4c41      	ldr	r4, [pc, #260]	; (1b814 <detect_Three_Phase_Voltage+0x1c8>)
   1b70e:	47a0      	blx	r4
			return;
   1b710:	e06f      	b.n	1b7f2 <detect_Three_Phase_Voltage+0x1a6>
		}
		adcYB = (adcYB-10);
   1b712:	68bb      	ldr	r3, [r7, #8]
   1b714:	3b0a      	subs	r3, #10
   1b716:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
   1b718:	68bb      	ldr	r3, [r7, #8]
   1b71a:	2b00      	cmp	r3, #0
   1b71c:	da02      	bge.n	1b724 <detect_Three_Phase_Voltage+0xd8>
		{
			adcYB = 0;
   1b71e:	2300      	movs	r3, #0
   1b720:	60bb      	str	r3, [r7, #8]
   1b722:	e010      	b.n	1b746 <detect_Three_Phase_Voltage+0xfa>
		}
		else
		{
			adcYB = (((adcYB-10)*660)/1000);
   1b724:	68bb      	ldr	r3, [r7, #8]
   1b726:	3b0a      	subs	r3, #10
   1b728:	22a5      	movs	r2, #165	; 0xa5
   1b72a:	0092      	lsls	r2, r2, #2
   1b72c:	435a      	muls	r2, r3
   1b72e:	0010      	movs	r0, r2
   1b730:	4b39      	ldr	r3, [pc, #228]	; (1b818 <detect_Three_Phase_Voltage+0x1cc>)
   1b732:	22fa      	movs	r2, #250	; 0xfa
   1b734:	0091      	lsls	r1, r2, #2
   1b736:	4798      	blx	r3
   1b738:	0003      	movs	r3, r0
   1b73a:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
   1b73c:	68bb      	ldr	r3, [r7, #8]
   1b73e:	2b00      	cmp	r3, #0
   1b740:	da01      	bge.n	1b746 <detect_Three_Phase_Voltage+0xfa>
			{
				adcYB = 0;
   1b742:	2300      	movs	r3, #0
   1b744:	60bb      	str	r3, [r7, #8]
			}
		}

		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17,Analog_Parameter_Struct.PhaseBR_Voltage);
   1b746:	4b31      	ldr	r3, [pc, #196]	; (1b80c <detect_Three_Phase_Voltage+0x1c0>)
   1b748:	689b      	ldr	r3, [r3, #8]
   1b74a:	0019      	movs	r1, r3
   1b74c:	2011      	movs	r0, #17
   1b74e:	4b30      	ldr	r3, [pc, #192]	; (1b810 <detect_Three_Phase_Voltage+0x1c4>)
   1b750:	4798      	blx	r3
   1b752:	0003      	movs	r3, r0
   1b754:	607b      	str	r3, [r7, #4]
		if(invalidateVoltageReadings)
   1b756:	4b28      	ldr	r3, [pc, #160]	; (1b7f8 <detect_Three_Phase_Voltage+0x1ac>)
   1b758:	781b      	ldrb	r3, [r3, #0]
   1b75a:	2b00      	cmp	r3, #0
   1b75c:	d007      	beq.n	1b76e <detect_Three_Phase_Voltage+0x122>
		{
			xSemaphoreGive(xADC_Semaphore);
   1b75e:	4b29      	ldr	r3, [pc, #164]	; (1b804 <detect_Three_Phase_Voltage+0x1b8>)
   1b760:	6818      	ldr	r0, [r3, #0]
   1b762:	2300      	movs	r3, #0
   1b764:	2200      	movs	r2, #0
   1b766:	2100      	movs	r1, #0
   1b768:	4c2a      	ldr	r4, [pc, #168]	; (1b814 <detect_Three_Phase_Voltage+0x1c8>)
   1b76a:	47a0      	blx	r4
			return;
   1b76c:	e041      	b.n	1b7f2 <detect_Three_Phase_Voltage+0x1a6>
		}
		adcBR = (adcBR-12);
   1b76e:	687b      	ldr	r3, [r7, #4]
   1b770:	3b0c      	subs	r3, #12
   1b772:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
   1b774:	687b      	ldr	r3, [r7, #4]
   1b776:	2b00      	cmp	r3, #0
   1b778:	da02      	bge.n	1b780 <detect_Three_Phase_Voltage+0x134>
		{
			adcBR = 0;
   1b77a:	2300      	movs	r3, #0
   1b77c:	607b      	str	r3, [r7, #4]
   1b77e:	e00f      	b.n	1b7a0 <detect_Three_Phase_Voltage+0x154>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
   1b780:	687b      	ldr	r3, [r7, #4]
   1b782:	3b0c      	subs	r3, #12
   1b784:	4a25      	ldr	r2, [pc, #148]	; (1b81c <detect_Three_Phase_Voltage+0x1d0>)
   1b786:	435a      	muls	r2, r3
   1b788:	0010      	movs	r0, r2
   1b78a:	4b23      	ldr	r3, [pc, #140]	; (1b818 <detect_Three_Phase_Voltage+0x1cc>)
   1b78c:	22fa      	movs	r2, #250	; 0xfa
   1b78e:	0091      	lsls	r1, r2, #2
   1b790:	4798      	blx	r3
   1b792:	0003      	movs	r3, r0
   1b794:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
   1b796:	687b      	ldr	r3, [r7, #4]
   1b798:	2b00      	cmp	r3, #0
   1b79a:	da01      	bge.n	1b7a0 <detect_Three_Phase_Voltage+0x154>
			{
				adcBR = 0;
   1b79c:	2300      	movs	r3, #0
   1b79e:	607b      	str	r3, [r7, #4]
			}
		}
		
		Analog_Parameter_Struct.PhaseRY_Voltage = filterVoltage(PHASE_RY,adcRY);
   1b7a0:	68fb      	ldr	r3, [r7, #12]
   1b7a2:	b29b      	uxth	r3, r3
   1b7a4:	0019      	movs	r1, r3
   1b7a6:	2000      	movs	r0, #0
   1b7a8:	4b1d      	ldr	r3, [pc, #116]	; (1b820 <detect_Three_Phase_Voltage+0x1d4>)
   1b7aa:	4798      	blx	r3
   1b7ac:	0003      	movs	r3, r0
   1b7ae:	001a      	movs	r2, r3
   1b7b0:	4b16      	ldr	r3, [pc, #88]	; (1b80c <detect_Three_Phase_Voltage+0x1c0>)
   1b7b2:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = filterVoltage(PHASE_YB,adcYB);
   1b7b4:	68bb      	ldr	r3, [r7, #8]
   1b7b6:	b29b      	uxth	r3, r3
   1b7b8:	0019      	movs	r1, r3
   1b7ba:	2001      	movs	r0, #1
   1b7bc:	4b18      	ldr	r3, [pc, #96]	; (1b820 <detect_Three_Phase_Voltage+0x1d4>)
   1b7be:	4798      	blx	r3
   1b7c0:	0003      	movs	r3, r0
   1b7c2:	001a      	movs	r2, r3
   1b7c4:	4b11      	ldr	r3, [pc, #68]	; (1b80c <detect_Three_Phase_Voltage+0x1c0>)
   1b7c6:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = filterVoltage(PHASE_BR,adcBR);
   1b7c8:	687b      	ldr	r3, [r7, #4]
   1b7ca:	b29b      	uxth	r3, r3
   1b7cc:	0019      	movs	r1, r3
   1b7ce:	2002      	movs	r0, #2
   1b7d0:	4b13      	ldr	r3, [pc, #76]	; (1b820 <detect_Three_Phase_Voltage+0x1d4>)
   1b7d2:	4798      	blx	r3
   1b7d4:	0003      	movs	r3, r0
   1b7d6:	001a      	movs	r2, r3
   1b7d8:	4b0c      	ldr	r3, [pc, #48]	; (1b80c <detect_Three_Phase_Voltage+0x1c0>)
   1b7da:	609a      	str	r2, [r3, #8]
		
		//Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
		//Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
		//Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
		
		set_Three_Phase_State_From_Voltage();
   1b7dc:	4b11      	ldr	r3, [pc, #68]	; (1b824 <detect_Three_Phase_Voltage+0x1d8>)
   1b7de:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
   1b7e0:	4b08      	ldr	r3, [pc, #32]	; (1b804 <detect_Three_Phase_Voltage+0x1b8>)
   1b7e2:	6818      	ldr	r0, [r3, #0]
   1b7e4:	2300      	movs	r3, #0
   1b7e6:	2200      	movs	r2, #0
   1b7e8:	2100      	movs	r1, #0
   1b7ea:	4c0a      	ldr	r4, [pc, #40]	; (1b814 <detect_Three_Phase_Voltage+0x1c8>)
   1b7ec:	47a0      	blx	r4
   1b7ee:	e000      	b.n	1b7f2 <detect_Three_Phase_Voltage+0x1a6>
			return;
   1b7f0:	46c0      	nop			; (mov r8, r8)
	}
}
   1b7f2:	46bd      	mov	sp, r7
   1b7f4:	b005      	add	sp, #20
   1b7f6:	bd90      	pop	{r4, r7, pc}
   1b7f8:	20000a45 	.word	0x20000a45
   1b7fc:	00020dad 	.word	0x00020dad
   1b800:	200009a0 	.word	0x200009a0
   1b804:	20000430 	.word	0x20000430
   1b808:	00020141 	.word	0x00020141
   1b80c:	200008e8 	.word	0x200008e8
   1b810:	0001ab09 	.word	0x0001ab09
   1b814:	0001fca1 	.word	0x0001fca1
   1b818:	00026ff9 	.word	0x00026ff9
   1b81c:	0000029e 	.word	0x0000029e
   1b820:	0001b571 	.word	0x0001b571
   1b824:	0001b829 	.word	0x0001b829

0001b828 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
   1b828:	b580      	push	{r7, lr}
   1b82a:	b082      	sub	sp, #8
   1b82c:	af00      	add	r7, sp, #0
	
	if(startSequenceOn)
   1b82e:	4b33      	ldr	r3, [pc, #204]	; (1b8fc <set_Three_Phase_State_From_Voltage+0xd4>)
   1b830:	781b      	ldrb	r3, [r3, #0]
   1b832:	2b00      	cmp	r3, #0
   1b834:	d15d      	bne.n	1b8f2 <set_Three_Phase_State_From_Voltage+0xca>
	{
		return;
	}
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
   1b836:	1dfb      	adds	r3, r7, #7
   1b838:	4a31      	ldr	r2, [pc, #196]	; (1b900 <set_Three_Phase_State_From_Voltage+0xd8>)
   1b83a:	7852      	ldrb	r2, [r2, #1]
   1b83c:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 80) &&
   1b83e:	4b31      	ldr	r3, [pc, #196]	; (1b904 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b840:	681b      	ldr	r3, [r3, #0]
   1b842:	2b4f      	cmp	r3, #79	; 0x4f
   1b844:	d80b      	bhi.n	1b85e <set_Three_Phase_State_From_Voltage+0x36>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 80) &&
   1b846:	4b2f      	ldr	r3, [pc, #188]	; (1b904 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b848:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 80) &&
   1b84a:	2b4f      	cmp	r3, #79	; 0x4f
   1b84c:	d807      	bhi.n	1b85e <set_Three_Phase_State_From_Voltage+0x36>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 80))				// if All phase volt, less than 40
   1b84e:	4b2d      	ldr	r3, [pc, #180]	; (1b904 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b850:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 80) &&
   1b852:	2b4f      	cmp	r3, #79	; 0x4f
   1b854:	d803      	bhi.n	1b85e <set_Three_Phase_State_From_Voltage+0x36>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
   1b856:	4b2a      	ldr	r3, [pc, #168]	; (1b900 <set_Three_Phase_State_From_Voltage+0xd8>)
   1b858:	2200      	movs	r2, #0
   1b85a:	705a      	strb	r2, [r3, #1]
   1b85c:	e02d      	b.n	1b8ba <set_Three_Phase_State_From_Voltage+0x92>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1b85e:	4b29      	ldr	r3, [pc, #164]	; (1b904 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b860:	681a      	ldr	r2, [r3, #0]
   1b862:	4b28      	ldr	r3, [pc, #160]	; (1b904 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b864:	685b      	ldr	r3, [r3, #4]
   1b866:	1ad3      	subs	r3, r2, r3
   1b868:	17da      	asrs	r2, r3, #31
   1b86a:	189b      	adds	r3, r3, r2
   1b86c:	4053      	eors	r3, r2
   1b86e:	4a26      	ldr	r2, [pc, #152]	; (1b908 <set_Three_Phase_State_From_Voltage+0xe0>)
   1b870:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1b872:	b292      	uxth	r2, r2
   1b874:	4293      	cmp	r3, r2
   1b876:	dc19      	bgt.n	1b8ac <set_Three_Phase_State_From_Voltage+0x84>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1b878:	4b22      	ldr	r3, [pc, #136]	; (1b904 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b87a:	685a      	ldr	r2, [r3, #4]
   1b87c:	4b21      	ldr	r3, [pc, #132]	; (1b904 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b87e:	689b      	ldr	r3, [r3, #8]
   1b880:	1ad3      	subs	r3, r2, r3
   1b882:	17da      	asrs	r2, r3, #31
   1b884:	189b      	adds	r3, r3, r2
   1b886:	4053      	eors	r3, r2
   1b888:	4a1f      	ldr	r2, [pc, #124]	; (1b908 <set_Three_Phase_State_From_Voltage+0xe0>)
   1b88a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1b88c:	b292      	uxth	r2, r2
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1b88e:	4293      	cmp	r3, r2
   1b890:	dc0c      	bgt.n	1b8ac <set_Three_Phase_State_From_Voltage+0x84>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
   1b892:	4b1c      	ldr	r3, [pc, #112]	; (1b904 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b894:	689a      	ldr	r2, [r3, #8]
   1b896:	4b1b      	ldr	r3, [pc, #108]	; (1b904 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b898:	681b      	ldr	r3, [r3, #0]
   1b89a:	1ad3      	subs	r3, r2, r3
   1b89c:	17da      	asrs	r2, r3, #31
   1b89e:	189b      	adds	r3, r3, r2
   1b8a0:	4053      	eors	r3, r2
   1b8a2:	4a19      	ldr	r2, [pc, #100]	; (1b908 <set_Three_Phase_State_From_Voltage+0xe0>)
   1b8a4:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1b8a6:	b292      	uxth	r2, r2
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1b8a8:	4293      	cmp	r3, r2
   1b8aa:	dd03      	ble.n	1b8b4 <set_Three_Phase_State_From_Voltage+0x8c>
	{
			//if((Analog_Parameter_Struct.PhaseRY_Voltage>100 && Analog_Parameter_Struct.PhaseYB_Voltage>100) ||
			//(Analog_Parameter_Struct.PhaseYB_Voltage>100 && Analog_Parameter_Struct.PhaseBR_Voltage>100) ||
			//(Analog_Parameter_Struct.PhaseBR_Voltage>100 && Analog_Parameter_Struct.PhaseRY_Voltage>100))
			//{
				structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
   1b8ac:	4b14      	ldr	r3, [pc, #80]	; (1b900 <set_Three_Phase_State_From_Voltage+0xd8>)
   1b8ae:	2202      	movs	r2, #2
   1b8b0:	705a      	strb	r2, [r3, #1]
   1b8b2:	e002      	b.n	1b8ba <set_Three_Phase_State_From_Voltage+0x92>
				//structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
			//}
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
   1b8b4:	4b12      	ldr	r3, [pc, #72]	; (1b900 <set_Three_Phase_State_From_Voltage+0xd8>)
   1b8b6:	2203      	movs	r2, #3
   1b8b8:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
   1b8ba:	4b11      	ldr	r3, [pc, #68]	; (1b900 <set_Three_Phase_State_From_Voltage+0xd8>)
   1b8bc:	785b      	ldrb	r3, [r3, #1]
   1b8be:	b2da      	uxtb	r2, r3
   1b8c0:	4b12      	ldr	r3, [pc, #72]	; (1b90c <set_Three_Phase_State_From_Voltage+0xe4>)
   1b8c2:	781b      	ldrb	r3, [r3, #0]
   1b8c4:	b2db      	uxtb	r3, r3
   1b8c6:	429a      	cmp	r2, r3
   1b8c8:	d014      	beq.n	1b8f4 <set_Three_Phase_State_From_Voltage+0xcc>
	{
		if(!motorRelatedVoltageBypassOn)
   1b8ca:	4b11      	ldr	r3, [pc, #68]	; (1b910 <set_Three_Phase_State_From_Voltage+0xe8>)
   1b8cc:	781b      	ldrb	r3, [r3, #0]
   1b8ce:	2201      	movs	r2, #1
   1b8d0:	4053      	eors	r3, r2
   1b8d2:	b2db      	uxtb	r3, r3
   1b8d4:	2b00      	cmp	r3, #0
   1b8d6:	d00d      	beq.n	1b8f4 <set_Three_Phase_State_From_Voltage+0xcc>
		{
			last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
   1b8d8:	4b0e      	ldr	r3, [pc, #56]	; (1b914 <set_Three_Phase_State_From_Voltage+0xec>)
   1b8da:	1dfa      	adds	r2, r7, #7
   1b8dc:	7812      	ldrb	r2, [r2, #0]
   1b8de:	701a      	strb	r2, [r3, #0]
			current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
   1b8e0:	4b07      	ldr	r3, [pc, #28]	; (1b900 <set_Three_Phase_State_From_Voltage+0xd8>)
   1b8e2:	785b      	ldrb	r3, [r3, #1]
   1b8e4:	b2da      	uxtb	r2, r3
   1b8e6:	4b09      	ldr	r3, [pc, #36]	; (1b90c <set_Three_Phase_State_From_Voltage+0xe4>)
   1b8e8:	701a      	strb	r2, [r3, #0]
			eventOccured = true;
   1b8ea:	4b0b      	ldr	r3, [pc, #44]	; (1b918 <set_Three_Phase_State_From_Voltage+0xf0>)
   1b8ec:	2201      	movs	r2, #1
   1b8ee:	701a      	strb	r2, [r3, #0]
   1b8f0:	e000      	b.n	1b8f4 <set_Three_Phase_State_From_Voltage+0xcc>
		return;
   1b8f2:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1b8f4:	46bd      	mov	sp, r7
   1b8f6:	b002      	add	sp, #8
   1b8f8:	bd80      	pop	{r7, pc}
   1b8fa:	46c0      	nop			; (mov r8, r8)
   1b8fc:	20000999 	.word	0x20000999
   1b900:	20000948 	.word	0x20000948
   1b904:	200008e8 	.word	0x200008e8
   1b908:	20000854 	.word	0x20000854
   1b90c:	20000a46 	.word	0x20000a46
   1b910:	20000973 	.word	0x20000973
   1b914:	2000092b 	.word	0x2000092b
   1b918:	2000092e 	.word	0x2000092e

0001b91c <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
   1b91c:	b590      	push	{r4, r7, lr}
   1b91e:	b083      	sub	sp, #12
   1b920:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1b922:	4b32      	ldr	r3, [pc, #200]	; (1b9ec <detect_Motor_Current+0xd0>)
   1b924:	681a      	ldr	r2, [r3, #0]
   1b926:	2301      	movs	r3, #1
   1b928:	425b      	negs	r3, r3
   1b92a:	0019      	movs	r1, r3
   1b92c:	0010      	movs	r0, r2
   1b92e:	4b30      	ldr	r3, [pc, #192]	; (1b9f0 <detect_Motor_Current+0xd4>)
   1b930:	4798      	blx	r3
   1b932:	0003      	movs	r3, r0
   1b934:	2b01      	cmp	r3, #1
   1b936:	d154      	bne.n	1b9e2 <detect_Motor_Current+0xc6>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
   1b938:	21c8      	movs	r1, #200	; 0xc8
   1b93a:	2010      	movs	r0, #16
   1b93c:	4b2d      	ldr	r3, [pc, #180]	; (1b9f4 <detect_Motor_Current+0xd8>)
   1b93e:	4798      	blx	r3
   1b940:	0003      	movs	r3, r0
   1b942:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
   1b944:	687b      	ldr	r3, [r7, #4]
   1b946:	2b0f      	cmp	r3, #15
   1b948:	d903      	bls.n	1b952 <detect_Motor_Current+0x36>
		{
			ADCcurrent = ADCcurrent - 15;
   1b94a:	687b      	ldr	r3, [r7, #4]
   1b94c:	3b0f      	subs	r3, #15
   1b94e:	607b      	str	r3, [r7, #4]
   1b950:	e004      	b.n	1b95c <detect_Motor_Current+0x40>
		}
		else if(ADCcurrent <= 15)
   1b952:	687b      	ldr	r3, [r7, #4]
   1b954:	2b0f      	cmp	r3, #15
   1b956:	d801      	bhi.n	1b95c <detect_Motor_Current+0x40>
		{
			ADCcurrent = 0;
   1b958:	2300      	movs	r3, #0
   1b95a:	607b      	str	r3, [r7, #4]
		}
		
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
   1b95c:	4b26      	ldr	r3, [pc, #152]	; (1b9f8 <detect_Motor_Current+0xdc>)
   1b95e:	687a      	ldr	r2, [r7, #4]
   1b960:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
   1b962:	687b      	ldr	r3, [r7, #4]
   1b964:	4a25      	ldr	r2, [pc, #148]	; (1b9fc <detect_Motor_Current+0xe0>)
   1b966:	435a      	muls	r2, r3
   1b968:	0010      	movs	r0, r2
   1b96a:	4b25      	ldr	r3, [pc, #148]	; (1ba00 <detect_Motor_Current+0xe4>)
   1b96c:	22fa      	movs	r2, #250	; 0xfa
   1b96e:	0091      	lsls	r1, r2, #2
   1b970:	4798      	blx	r3
   1b972:	0003      	movs	r3, r0
   1b974:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
   1b976:	687b      	ldr	r3, [r7, #4]
   1b978:	4a22      	ldr	r2, [pc, #136]	; (1ba04 <detect_Motor_Current+0xe8>)
   1b97a:	4293      	cmp	r3, r2
   1b97c:	d810      	bhi.n	1b9a0 <detect_Motor_Current+0x84>
   1b97e:	687b      	ldr	r3, [r7, #4]
   1b980:	2b00      	cmp	r3, #0
   1b982:	d00d      	beq.n	1b9a0 <detect_Motor_Current+0x84>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
   1b984:	687b      	ldr	r3, [r7, #4]
   1b986:	4a20      	ldr	r2, [pc, #128]	; (1ba08 <detect_Motor_Current+0xec>)
   1b988:	4353      	muls	r3, r2
   1b98a:	4a20      	ldr	r2, [pc, #128]	; (1ba0c <detect_Motor_Current+0xf0>)
   1b98c:	1898      	adds	r0, r3, r2
   1b98e:	4b1c      	ldr	r3, [pc, #112]	; (1ba00 <detect_Motor_Current+0xe4>)
   1b990:	22fa      	movs	r2, #250	; 0xfa
   1b992:	0091      	lsls	r1, r2, #2
   1b994:	4798      	blx	r3
   1b996:	0003      	movs	r3, r0
   1b998:	001a      	movs	r2, r3
   1b99a:	687b      	ldr	r3, [r7, #4]
   1b99c:	189b      	adds	r3, r3, r2
   1b99e:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
   1b9a0:	4b15      	ldr	r3, [pc, #84]	; (1b9f8 <detect_Motor_Current+0xdc>)
   1b9a2:	687a      	ldr	r2, [r7, #4]
   1b9a4:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
   1b9a6:	687a      	ldr	r2, [r7, #4]
   1b9a8:	4b15      	ldr	r3, [pc, #84]	; (1ba00 <detect_Motor_Current+0xe4>)
   1b9aa:	2164      	movs	r1, #100	; 0x64
   1b9ac:	0010      	movs	r0, r2
   1b9ae:	4798      	blx	r3
   1b9b0:	0003      	movs	r3, r0
   1b9b2:	b29a      	uxth	r2, r3
   1b9b4:	4b10      	ldr	r3, [pc, #64]	; (1b9f8 <detect_Motor_Current+0xdc>)
   1b9b6:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
   1b9b8:	687a      	ldr	r2, [r7, #4]
   1b9ba:	4b15      	ldr	r3, [pc, #84]	; (1ba10 <detect_Motor_Current+0xf4>)
   1b9bc:	2164      	movs	r1, #100	; 0x64
   1b9be:	0010      	movs	r0, r2
   1b9c0:	4798      	blx	r3
   1b9c2:	000b      	movs	r3, r1
   1b9c4:	b29a      	uxth	r2, r3
   1b9c6:	4b0c      	ldr	r3, [pc, #48]	; (1b9f8 <detect_Motor_Current+0xdc>)
   1b9c8:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
   1b9ca:	4b12      	ldr	r3, [pc, #72]	; (1ba14 <detect_Motor_Current+0xf8>)
   1b9cc:	2200      	movs	r2, #0
   1b9ce:	701a      	strb	r2, [r3, #0]
		calcPowerConsumption();
   1b9d0:	4b11      	ldr	r3, [pc, #68]	; (1ba18 <detect_Motor_Current+0xfc>)
   1b9d2:	4798      	blx	r3
		
		xSemaphoreGive(xADC_Semaphore);
   1b9d4:	4b05      	ldr	r3, [pc, #20]	; (1b9ec <detect_Motor_Current+0xd0>)
   1b9d6:	6818      	ldr	r0, [r3, #0]
   1b9d8:	2300      	movs	r3, #0
   1b9da:	2200      	movs	r2, #0
   1b9dc:	2100      	movs	r1, #0
   1b9de:	4c0f      	ldr	r4, [pc, #60]	; (1ba1c <detect_Motor_Current+0x100>)
   1b9e0:	47a0      	blx	r4
	}
}
   1b9e2:	46c0      	nop			; (mov r8, r8)
   1b9e4:	46bd      	mov	sp, r7
   1b9e6:	b003      	add	sp, #12
   1b9e8:	bd90      	pop	{r4, r7, pc}
   1b9ea:	46c0      	nop			; (mov r8, r8)
   1b9ec:	20000430 	.word	0x20000430
   1b9f0:	00020141 	.word	0x00020141
   1b9f4:	0001aa4d 	.word	0x0001aa4d
   1b9f8:	200008e8 	.word	0x200008e8
   1b9fc:	00000d61 	.word	0x00000d61
   1ba00:	00026ee5 	.word	0x00026ee5
   1ba04:	000004af 	.word	0x000004af
   1ba08:	fffffef0 	.word	0xfffffef0
   1ba0c:	0004fb00 	.word	0x0004fb00
   1ba10:	00026ff1 	.word	0x00026ff1
   1ba14:	20000443 	.word	0x20000443
   1ba18:	0001ba21 	.word	0x0001ba21
   1ba1c:	0001fca1 	.word	0x0001fca1

0001ba20 <calcPowerConsumption>:

/************************************************************************/
/* To Calculate Power Consumption of Motor                              */
/************************************************************************/
void calcPowerConsumption(void)
{
   1ba20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba22:	b085      	sub	sp, #20
   1ba24:	af00      	add	r7, sp, #0
	uint16_t avgVotlage = Analog_Parameter_Struct.PhaseRY_Voltage + Analog_Parameter_Struct.PhaseYB_Voltage + Analog_Parameter_Struct.PhaseBR_Voltage;
   1ba26:	4b37      	ldr	r3, [pc, #220]	; (1bb04 <calcPowerConsumption+0xe4>)
   1ba28:	681b      	ldr	r3, [r3, #0]
   1ba2a:	b29a      	uxth	r2, r3
   1ba2c:	4b35      	ldr	r3, [pc, #212]	; (1bb04 <calcPowerConsumption+0xe4>)
   1ba2e:	685b      	ldr	r3, [r3, #4]
   1ba30:	b29b      	uxth	r3, r3
   1ba32:	18d3      	adds	r3, r2, r3
   1ba34:	b299      	uxth	r1, r3
   1ba36:	4b33      	ldr	r3, [pc, #204]	; (1bb04 <calcPowerConsumption+0xe4>)
   1ba38:	689b      	ldr	r3, [r3, #8]
   1ba3a:	b29a      	uxth	r2, r3
   1ba3c:	230e      	movs	r3, #14
   1ba3e:	18fb      	adds	r3, r7, r3
   1ba40:	188a      	adds	r2, r1, r2
   1ba42:	801a      	strh	r2, [r3, #0]
	
	double result = (avgVotlage/3.0) * (Analog_Parameter_Struct.Motor_Current/100.0);
   1ba44:	230e      	movs	r3, #14
   1ba46:	18fb      	adds	r3, r7, r3
   1ba48:	881a      	ldrh	r2, [r3, #0]
   1ba4a:	4b2f      	ldr	r3, [pc, #188]	; (1bb08 <calcPowerConsumption+0xe8>)
   1ba4c:	0010      	movs	r0, r2
   1ba4e:	4798      	blx	r3
   1ba50:	4c2e      	ldr	r4, [pc, #184]	; (1bb0c <calcPowerConsumption+0xec>)
   1ba52:	2200      	movs	r2, #0
   1ba54:	4b2e      	ldr	r3, [pc, #184]	; (1bb10 <calcPowerConsumption+0xf0>)
   1ba56:	47a0      	blx	r4
   1ba58:	0003      	movs	r3, r0
   1ba5a:	000c      	movs	r4, r1
   1ba5c:	001d      	movs	r5, r3
   1ba5e:	0026      	movs	r6, r4
   1ba60:	4b28      	ldr	r3, [pc, #160]	; (1bb04 <calcPowerConsumption+0xe4>)
   1ba62:	691a      	ldr	r2, [r3, #16]
   1ba64:	4b2b      	ldr	r3, [pc, #172]	; (1bb14 <calcPowerConsumption+0xf4>)
   1ba66:	0010      	movs	r0, r2
   1ba68:	4798      	blx	r3
   1ba6a:	4c28      	ldr	r4, [pc, #160]	; (1bb0c <calcPowerConsumption+0xec>)
   1ba6c:	2200      	movs	r2, #0
   1ba6e:	4b2a      	ldr	r3, [pc, #168]	; (1bb18 <calcPowerConsumption+0xf8>)
   1ba70:	47a0      	blx	r4
   1ba72:	0003      	movs	r3, r0
   1ba74:	000c      	movs	r4, r1
   1ba76:	001a      	movs	r2, r3
   1ba78:	0023      	movs	r3, r4
   1ba7a:	4c28      	ldr	r4, [pc, #160]	; (1bb1c <calcPowerConsumption+0xfc>)
   1ba7c:	0028      	movs	r0, r5
   1ba7e:	0031      	movs	r1, r6
   1ba80:	47a0      	blx	r4
   1ba82:	0003      	movs	r3, r0
   1ba84:	000c      	movs	r4, r1
   1ba86:	603b      	str	r3, [r7, #0]
   1ba88:	607c      	str	r4, [r7, #4]
	result = sqrt(3) * result * 85.0 / 100.0;
   1ba8a:	4c24      	ldr	r4, [pc, #144]	; (1bb1c <calcPowerConsumption+0xfc>)
   1ba8c:	4a24      	ldr	r2, [pc, #144]	; (1bb20 <calcPowerConsumption+0x100>)
   1ba8e:	4b25      	ldr	r3, [pc, #148]	; (1bb24 <calcPowerConsumption+0x104>)
   1ba90:	6838      	ldr	r0, [r7, #0]
   1ba92:	6879      	ldr	r1, [r7, #4]
   1ba94:	47a0      	blx	r4
   1ba96:	0003      	movs	r3, r0
   1ba98:	000c      	movs	r4, r1
   1ba9a:	0018      	movs	r0, r3
   1ba9c:	0021      	movs	r1, r4
   1ba9e:	4c1f      	ldr	r4, [pc, #124]	; (1bb1c <calcPowerConsumption+0xfc>)
   1baa0:	2200      	movs	r2, #0
   1baa2:	4b21      	ldr	r3, [pc, #132]	; (1bb28 <calcPowerConsumption+0x108>)
   1baa4:	47a0      	blx	r4
   1baa6:	0003      	movs	r3, r0
   1baa8:	000c      	movs	r4, r1
   1baaa:	0018      	movs	r0, r3
   1baac:	0021      	movs	r1, r4
   1baae:	4c17      	ldr	r4, [pc, #92]	; (1bb0c <calcPowerConsumption+0xec>)
   1bab0:	2200      	movs	r2, #0
   1bab2:	4b19      	ldr	r3, [pc, #100]	; (1bb18 <calcPowerConsumption+0xf8>)
   1bab4:	47a0      	blx	r4
   1bab6:	0003      	movs	r3, r0
   1bab8:	000c      	movs	r4, r1
   1baba:	603b      	str	r3, [r7, #0]
   1babc:	607c      	str	r4, [r7, #4]

	Analog_Parameter_Struct.Motor_Power = (uint32_t) result;
   1babe:	4b1b      	ldr	r3, [pc, #108]	; (1bb2c <calcPowerConsumption+0x10c>)
   1bac0:	6838      	ldr	r0, [r7, #0]
   1bac2:	6879      	ldr	r1, [r7, #4]
   1bac4:	4798      	blx	r3
   1bac6:	0002      	movs	r2, r0
   1bac8:	4b0e      	ldr	r3, [pc, #56]	; (1bb04 <calcPowerConsumption+0xe4>)
   1baca:	621a      	str	r2, [r3, #32]
	Analog_Parameter_Struct.Motor_Power_IntPart = (uint32_t) result / 1000;
   1bacc:	4b17      	ldr	r3, [pc, #92]	; (1bb2c <calcPowerConsumption+0x10c>)
   1bace:	6838      	ldr	r0, [r7, #0]
   1bad0:	6879      	ldr	r1, [r7, #4]
   1bad2:	4798      	blx	r3
   1bad4:	4b16      	ldr	r3, [pc, #88]	; (1bb30 <calcPowerConsumption+0x110>)
   1bad6:	22fa      	movs	r2, #250	; 0xfa
   1bad8:	0091      	lsls	r1, r2, #2
   1bada:	4798      	blx	r3
   1badc:	0003      	movs	r3, r0
   1bade:	b29a      	uxth	r2, r3
   1bae0:	4b08      	ldr	r3, [pc, #32]	; (1bb04 <calcPowerConsumption+0xe4>)
   1bae2:	849a      	strh	r2, [r3, #36]	; 0x24
	Analog_Parameter_Struct.Motor_Power_DecPart =  (uint32_t) result % 1000;
   1bae4:	4b11      	ldr	r3, [pc, #68]	; (1bb2c <calcPowerConsumption+0x10c>)
   1bae6:	6838      	ldr	r0, [r7, #0]
   1bae8:	6879      	ldr	r1, [r7, #4]
   1baea:	4798      	blx	r3
   1baec:	4b11      	ldr	r3, [pc, #68]	; (1bb34 <calcPowerConsumption+0x114>)
   1baee:	22fa      	movs	r2, #250	; 0xfa
   1baf0:	0091      	lsls	r1, r2, #2
   1baf2:	4798      	blx	r3
   1baf4:	000b      	movs	r3, r1
   1baf6:	001a      	movs	r2, r3
   1baf8:	4b02      	ldr	r3, [pc, #8]	; (1bb04 <calcPowerConsumption+0xe4>)
   1bafa:	629a      	str	r2, [r3, #40]	; 0x28
}
   1bafc:	46c0      	nop			; (mov r8, r8)
   1bafe:	46bd      	mov	sp, r7
   1bb00:	b005      	add	sp, #20
   1bb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bb04:	200008e8 	.word	0x200008e8
   1bb08:	00029455 	.word	0x00029455
   1bb0c:	00028019 	.word	0x00028019
   1bb10:	40080000 	.word	0x40080000
   1bb14:	000294d9 	.word	0x000294d9
   1bb18:	40590000 	.word	0x40590000
   1bb1c:	00028881 	.word	0x00028881
   1bb20:	e8584caa 	.word	0xe8584caa
   1bb24:	3ffbb67a 	.word	0x3ffbb67a
   1bb28:	40554000 	.word	0x40554000
   1bb2c:	000272e1 	.word	0x000272e1
   1bb30:	00026ee5 	.word	0x00026ee5
   1bb34:	00026ff1 	.word	0x00026ff1

0001bb38 <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
   1bb38:	b580      	push	{r7, lr}
   1bb3a:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
   1bb3c:	4b04      	ldr	r3, [pc, #16]	; (1bb50 <should_Detect_New_Current+0x18>)
   1bb3e:	781b      	ldrb	r3, [r3, #0]
   1bb40:	b2db      	uxtb	r3, r3
   1bb42:	3b01      	subs	r3, #1
   1bb44:	425a      	negs	r2, r3
   1bb46:	4153      	adcs	r3, r2
   1bb48:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
   1bb4a:	0018      	movs	r0, r3
   1bb4c:	46bd      	mov	sp, r7
   1bb4e:	bd80      	pop	{r7, pc}
   1bb50:	20000443 	.word	0x20000443

0001bb54 <getACPowerState>:

bool getACPowerState(void)
{
   1bb54:	b580      	push	{r7, lr}
   1bb56:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
   1bb58:	4b02      	ldr	r3, [pc, #8]	; (1bb64 <getACPowerState+0x10>)
   1bb5a:	781b      	ldrb	r3, [r3, #0]
   1bb5c:	b2db      	uxtb	r3, r3
}
   1bb5e:	0018      	movs	r0, r3
   1bb60:	46bd      	mov	sp, r7
   1bb62:	bd80      	pop	{r7, pc}
   1bb64:	200009c6 	.word	0x200009c6

0001bb68 <setACPowerState>:

void setACPowerState(bool state)
{
   1bb68:	b580      	push	{r7, lr}
   1bb6a:	b082      	sub	sp, #8
   1bb6c:	af00      	add	r7, sp, #0
   1bb6e:	0002      	movs	r2, r0
   1bb70:	1dfb      	adds	r3, r7, #7
   1bb72:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
   1bb74:	4b03      	ldr	r3, [pc, #12]	; (1bb84 <setACPowerState+0x1c>)
   1bb76:	1dfa      	adds	r2, r7, #7
   1bb78:	7812      	ldrb	r2, [r2, #0]
   1bb7a:	701a      	strb	r2, [r3, #0]
}
   1bb7c:	46c0      	nop			; (mov r8, r8)
   1bb7e:	46bd      	mov	sp, r7
   1bb80:	b002      	add	sp, #8
   1bb82:	bd80      	pop	{r7, pc}
   1bb84:	200009c6 	.word	0x200009c6

0001bb88 <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
   1bb88:	b580      	push	{r7, lr}
   1bb8a:	af00      	add	r7, sp, #0
	return allPhase;
   1bb8c:	4b02      	ldr	r3, [pc, #8]	; (1bb98 <getAllPhaseState+0x10>)
   1bb8e:	781b      	ldrb	r3, [r3, #0]
   1bb90:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
   1bb92:	0018      	movs	r0, r3
   1bb94:	46bd      	mov	sp, r7
   1bb96:	bd80      	pop	{r7, pc}
   1bb98:	20000961 	.word	0x20000961

0001bb9c <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
   1bb9c:	b580      	push	{r7, lr}
   1bb9e:	b082      	sub	sp, #8
   1bba0:	af00      	add	r7, sp, #0
   1bba2:	0002      	movs	r2, r0
   1bba4:	1dfb      	adds	r3, r7, #7
   1bba6:	701a      	strb	r2, [r3, #0]
	allPhase = state;
   1bba8:	4b03      	ldr	r3, [pc, #12]	; (1bbb8 <setAllPhaseState+0x1c>)
   1bbaa:	1dfa      	adds	r2, r7, #7
   1bbac:	7812      	ldrb	r2, [r2, #0]
   1bbae:	701a      	strb	r2, [r3, #0]
}
   1bbb0:	46c0      	nop			; (mov r8, r8)
   1bbb2:	46bd      	mov	sp, r7
   1bbb4:	b002      	add	sp, #8
   1bbb6:	bd80      	pop	{r7, pc}
   1bbb8:	20000961 	.word	0x20000961

0001bbbc <getPhaseSequence>:

bool getPhaseSequence()
{
   1bbbc:	b580      	push	{r7, lr}
   1bbbe:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
   1bbc0:	4b02      	ldr	r3, [pc, #8]	; (1bbcc <getPhaseSequence+0x10>)
   1bbc2:	781b      	ldrb	r3, [r3, #0]
   1bbc4:	b2db      	uxtb	r3, r3
}
   1bbc6:	0018      	movs	r0, r3
   1bbc8:	46bd      	mov	sp, r7
   1bbca:	bd80      	pop	{r7, pc}
   1bbcc:	20000974 	.word	0x20000974

0001bbd0 <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
   1bbd0:	b580      	push	{r7, lr}
   1bbd2:	b082      	sub	sp, #8
   1bbd4:	af00      	add	r7, sp, #0
   1bbd6:	0002      	movs	r2, r0
   1bbd8:	1dfb      	adds	r3, r7, #7
   1bbda:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
   1bbdc:	4b03      	ldr	r3, [pc, #12]	; (1bbec <setPhaseSequence+0x1c>)
   1bbde:	1dfa      	adds	r2, r7, #7
   1bbe0:	7812      	ldrb	r2, [r2, #0]
   1bbe2:	701a      	strb	r2, [r3, #0]
}
   1bbe4:	46c0      	nop			; (mov r8, r8)
   1bbe6:	46bd      	mov	sp, r7
   1bbe8:	b002      	add	sp, #8
   1bbea:	bd80      	pop	{r7, pc}
   1bbec:	20000974 	.word	0x20000974

0001bbf0 <getMotorState>:


bool getMotorState(void)
{
   1bbf0:	b580      	push	{r7, lr}
   1bbf2:	af00      	add	r7, sp, #0
	return mFeedback;
   1bbf4:	4b02      	ldr	r3, [pc, #8]	; (1bc00 <getMotorState+0x10>)
   1bbf6:	781b      	ldrb	r3, [r3, #0]
   1bbf8:	b2db      	uxtb	r3, r3
}
   1bbfa:	0018      	movs	r0, r3
   1bbfc:	46bd      	mov	sp, r7
   1bbfe:	bd80      	pop	{r7, pc}
   1bc00:	20000942 	.word	0x20000942

0001bc04 <setMotorState>:

void setMotorState(bool state)
{
   1bc04:	b580      	push	{r7, lr}
   1bc06:	b082      	sub	sp, #8
   1bc08:	af00      	add	r7, sp, #0
   1bc0a:	0002      	movs	r2, r0
   1bc0c:	1dfb      	adds	r3, r7, #7
   1bc0e:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
   1bc10:	4b0a      	ldr	r3, [pc, #40]	; (1bc3c <setMotorState+0x38>)
   1bc12:	1dfa      	adds	r2, r7, #7
   1bc14:	7812      	ldrb	r2, [r2, #0]
   1bc16:	701a      	strb	r2, [r3, #0]
	if (state)
   1bc18:	1dfb      	adds	r3, r7, #7
   1bc1a:	781b      	ldrb	r3, [r3, #0]
   1bc1c:	2b00      	cmp	r3, #0
   1bc1e:	d004      	beq.n	1bc2a <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
   1bc20:	2100      	movs	r1, #0
   1bc22:	2005      	movs	r0, #5
   1bc24:	4b06      	ldr	r3, [pc, #24]	; (1bc40 <setMotorState+0x3c>)
   1bc26:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
   1bc28:	e003      	b.n	1bc32 <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
   1bc2a:	2101      	movs	r1, #1
   1bc2c:	2005      	movs	r0, #5
   1bc2e:	4b04      	ldr	r3, [pc, #16]	; (1bc40 <setMotorState+0x3c>)
   1bc30:	4798      	blx	r3
}
   1bc32:	46c0      	nop			; (mov r8, r8)
   1bc34:	46bd      	mov	sp, r7
   1bc36:	b002      	add	sp, #8
   1bc38:	bd80      	pop	{r7, pc}
   1bc3a:	46c0      	nop			; (mov r8, r8)
   1bc3c:	20000942 	.word	0x20000942
   1bc40:	0001a075 	.word	0x0001a075

0001bc44 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
   1bc44:	b590      	push	{r4, r7, lr}
   1bc46:	b083      	sub	sp, #12
   1bc48:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
   1bc4a:	1d3b      	adds	r3, r7, #4
   1bc4c:	1d7a      	adds	r2, r7, #5
   1bc4e:	1db9      	adds	r1, r7, #6
   1bc50:	1df8      	adds	r0, r7, #7
   1bc52:	4c06      	ldr	r4, [pc, #24]	; (1bc6c <getMotorState_from_pin+0x28>)
   1bc54:	47a0      	blx	r4
	setMotorState(p3);
   1bc56:	1d7b      	adds	r3, r7, #5
   1bc58:	781b      	ldrb	r3, [r3, #0]
   1bc5a:	0018      	movs	r0, r3
   1bc5c:	4b04      	ldr	r3, [pc, #16]	; (1bc70 <getMotorState_from_pin+0x2c>)
   1bc5e:	4798      	blx	r3
	return p3;
   1bc60:	1d7b      	adds	r3, r7, #5
   1bc62:	781b      	ldrb	r3, [r3, #0]
}
   1bc64:	0018      	movs	r0, r3
   1bc66:	46bd      	mov	sp, r7
   1bc68:	b003      	add	sp, #12
   1bc6a:	bd90      	pop	{r4, r7, pc}
   1bc6c:	0001bc75 	.word	0x0001bc75
   1bc70:	0001bc05 	.word	0x0001bc05

0001bc74 <readSensorState>:



void readSensorState(uint8_t *localallPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
   1bc74:	b590      	push	{r4, r7, lr}
   1bc76:	b087      	sub	sp, #28
   1bc78:	af00      	add	r7, sp, #0
   1bc7a:	60f8      	str	r0, [r7, #12]
   1bc7c:	60b9      	str	r1, [r7, #8]
   1bc7e:	607a      	str	r2, [r7, #4]
   1bc80:	603b      	str	r3, [r7, #0]
	*localallPhase = structThreePhase_state.u8t_phase_ac_state;
   1bc82:	4b39      	ldr	r3, [pc, #228]	; (1bd68 <readSensorState+0xf4>)
   1bc84:	785b      	ldrb	r3, [r3, #1]
   1bc86:	b2da      	uxtb	r2, r3
   1bc88:	68fb      	ldr	r3, [r7, #12]
   1bc8a:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1bc8c:	4b36      	ldr	r3, [pc, #216]	; (1bd68 <readSensorState+0xf4>)
   1bc8e:	781b      	ldrb	r3, [r3, #0]
   1bc90:	b2db      	uxtb	r3, r3
   1bc92:	2b02      	cmp	r3, #2
   1bc94:	d103      	bne.n	1bc9e <readSensorState+0x2a>
	{
		*phaseSeq=true;
   1bc96:	68bb      	ldr	r3, [r7, #8]
   1bc98:	2201      	movs	r2, #1
   1bc9a:	701a      	strb	r2, [r3, #0]
   1bc9c:	e002      	b.n	1bca4 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
   1bc9e:	68bb      	ldr	r3, [r7, #8]
   1bca0:	2200      	movs	r2, #0
   1bca2:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
   1bca4:	4b31      	ldr	r3, [pc, #196]	; (1bd6c <readSensorState+0xf8>)
   1bca6:	2225      	movs	r2, #37	; 0x25
   1bca8:	5c9b      	ldrb	r3, [r3, r2]
   1bcaa:	b2db      	uxtb	r3, r3
   1bcac:	2b00      	cmp	r3, #0
   1bcae:	d106      	bne.n	1bcbe <readSensorState+0x4a>
	{
		*motor  = getMotorState();
   1bcb0:	4b2f      	ldr	r3, [pc, #188]	; (1bd70 <readSensorState+0xfc>)
   1bcb2:	4798      	blx	r3
   1bcb4:	0003      	movs	r3, r0
   1bcb6:	001a      	movs	r2, r3
   1bcb8:	687b      	ldr	r3, [r7, #4]
   1bcba:	701a      	strb	r2, [r3, #0]
   1bcbc:	e022      	b.n	1bd04 <readSensorState+0x90>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1bcbe:	4b2b      	ldr	r3, [pc, #172]	; (1bd6c <readSensorState+0xf8>)
   1bcc0:	2225      	movs	r2, #37	; 0x25
   1bcc2:	5c9b      	ldrb	r3, [r3, r2]
   1bcc4:	b2db      	uxtb	r3, r3
   1bcc6:	2b01      	cmp	r3, #1
   1bcc8:	d106      	bne.n	1bcd8 <readSensorState+0x64>
	{
		*motor = checkMotorStatusUsingCurrent();
   1bcca:	4b2a      	ldr	r3, [pc, #168]	; (1bd74 <readSensorState+0x100>)
   1bccc:	4798      	blx	r3
   1bcce:	0003      	movs	r3, r0
   1bcd0:	001a      	movs	r2, r3
   1bcd2:	687b      	ldr	r3, [r7, #4]
   1bcd4:	701a      	strb	r2, [r3, #0]
   1bcd6:	e015      	b.n	1bd04 <readSensorState+0x90>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
   1bcd8:	4b24      	ldr	r3, [pc, #144]	; (1bd6c <readSensorState+0xf8>)
   1bcda:	2225      	movs	r2, #37	; 0x25
   1bcdc:	5c9b      	ldrb	r3, [r3, r2]
   1bcde:	b2db      	uxtb	r3, r3
   1bce0:	2b02      	cmp	r3, #2
   1bce2:	d10f      	bne.n	1bd04 <readSensorState+0x90>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1bce4:	202e      	movs	r0, #46	; 0x2e
   1bce6:	4b24      	ldr	r3, [pc, #144]	; (1bd78 <readSensorState+0x104>)
   1bce8:	4798      	blx	r3
   1bcea:	0003      	movs	r3, r0
   1bcec:	1e5a      	subs	r2, r3, #1
   1bcee:	4193      	sbcs	r3, r2
   1bcf0:	b2db      	uxtb	r3, r3
   1bcf2:	2201      	movs	r2, #1
   1bcf4:	4053      	eors	r3, r2
   1bcf6:	b2db      	uxtb	r3, r3
   1bcf8:	1c1a      	adds	r2, r3, #0
   1bcfa:	2301      	movs	r3, #1
   1bcfc:	4013      	ands	r3, r2
   1bcfe:	b2da      	uxtb	r2, r3
   1bd00:	687b      	ldr	r3, [r7, #4]
   1bd02:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1bd04:	2317      	movs	r3, #23
   1bd06:	18fb      	adds	r3, r7, r3
   1bd08:	2201      	movs	r2, #1
   1bd0a:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1bd0c:	2317      	movs	r3, #23
   1bd0e:	18fc      	adds	r4, r7, r3
   1bd10:	4b1a      	ldr	r3, [pc, #104]	; (1bd7c <readSensorState+0x108>)
   1bd12:	2100      	movs	r1, #0
   1bd14:	0018      	movs	r0, r3
   1bd16:	4b1a      	ldr	r3, [pc, #104]	; (1bd80 <readSensorState+0x10c>)
   1bd18:	4798      	blx	r3
   1bd1a:	0003      	movs	r3, r0
   1bd1c:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1bd1e:	23fa      	movs	r3, #250	; 0xfa
   1bd20:	005b      	lsls	r3, r3, #1
   1bd22:	0018      	movs	r0, r3
   1bd24:	4b17      	ldr	r3, [pc, #92]	; (1bd84 <readSensorState+0x110>)
   1bd26:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1bd28:	2317      	movs	r3, #23
   1bd2a:	18fc      	adds	r4, r7, r3
   1bd2c:	4b13      	ldr	r3, [pc, #76]	; (1bd7c <readSensorState+0x108>)
   1bd2e:	2100      	movs	r1, #0
   1bd30:	0018      	movs	r0, r3
   1bd32:	4b13      	ldr	r3, [pc, #76]	; (1bd80 <readSensorState+0x10c>)
   1bd34:	4798      	blx	r3
   1bd36:	0003      	movs	r3, r0
   1bd38:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1bd3a:	2317      	movs	r3, #23
   1bd3c:	18fb      	adds	r3, r7, r3
   1bd3e:	781b      	ldrb	r3, [r3, #0]
   1bd40:	2204      	movs	r2, #4
   1bd42:	4013      	ands	r3, r2
   1bd44:	d003      	beq.n	1bd4e <readSensorState+0xda>
	{
		isACpowerAvailable = true;
   1bd46:	4b10      	ldr	r3, [pc, #64]	; (1bd88 <readSensorState+0x114>)
   1bd48:	2201      	movs	r2, #1
   1bd4a:	701a      	strb	r2, [r3, #0]
   1bd4c:	e002      	b.n	1bd54 <readSensorState+0xe0>
	}
	else
	{
		isACpowerAvailable = false;
   1bd4e:	4b0e      	ldr	r3, [pc, #56]	; (1bd88 <readSensorState+0x114>)
   1bd50:	2200      	movs	r2, #0
   1bd52:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
   1bd54:	4b0c      	ldr	r3, [pc, #48]	; (1bd88 <readSensorState+0x114>)
   1bd56:	781b      	ldrb	r3, [r3, #0]
   1bd58:	b2da      	uxtb	r2, r3
   1bd5a:	683b      	ldr	r3, [r7, #0]
   1bd5c:	701a      	strb	r2, [r3, #0]
}
   1bd5e:	46c0      	nop			; (mov r8, r8)
   1bd60:	46bd      	mov	sp, r7
   1bd62:	b007      	add	sp, #28
   1bd64:	bd90      	pop	{r4, r7, pc}
   1bd66:	46c0      	nop			; (mov r8, r8)
   1bd68:	20000948 	.word	0x20000948
   1bd6c:	20000854 	.word	0x20000854
   1bd70:	0001bbf1 	.word	0x0001bbf1
   1bd74:	0001bd8d 	.word	0x0001bd8d
   1bd78:	0001a031 	.word	0x0001a031
   1bd7c:	20000a90 	.word	0x20000a90
   1bd80:	00019b65 	.word	0x00019b65
   1bd84:	00020a49 	.word	0x00020a49
   1bd88:	2000098d 	.word	0x2000098d

0001bd8c <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
   1bd8c:	b580      	push	{r7, lr}
   1bd8e:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
   1bd90:	4b0e      	ldr	r3, [pc, #56]	; (1bdcc <checkMotorStatusUsingCurrent+0x40>)
   1bd92:	781b      	ldrb	r3, [r3, #0]
   1bd94:	2b00      	cmp	r3, #0
   1bd96:	d00d      	beq.n	1bdb4 <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
   1bd98:	4b0d      	ldr	r3, [pc, #52]	; (1bdd0 <checkMotorStatusUsingCurrent+0x44>)
   1bd9a:	8a9b      	ldrh	r3, [r3, #20]
   1bd9c:	b29a      	uxth	r2, r3
   1bd9e:	4b0d      	ldr	r3, [pc, #52]	; (1bdd4 <checkMotorStatusUsingCurrent+0x48>)
   1bda0:	781b      	ldrb	r3, [r3, #0]
   1bda2:	085b      	lsrs	r3, r3, #1
   1bda4:	b2db      	uxtb	r3, r3
   1bda6:	b29b      	uxth	r3, r3
   1bda8:	429a      	cmp	r2, r3
   1bdaa:	d801      	bhi.n	1bdb0 <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
   1bdac:	2300      	movs	r3, #0
   1bdae:	e009      	b.n	1bdc4 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
   1bdb0:	2301      	movs	r3, #1
   1bdb2:	e007      	b.n	1bdc4 <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
   1bdb4:	4b06      	ldr	r3, [pc, #24]	; (1bdd0 <checkMotorStatusUsingCurrent+0x44>)
   1bdb6:	8a9b      	ldrh	r3, [r3, #20]
   1bdb8:	b29b      	uxth	r3, r3
   1bdba:	2b04      	cmp	r3, #4
   1bdbc:	d901      	bls.n	1bdc2 <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
   1bdbe:	2301      	movs	r3, #1
   1bdc0:	e000      	b.n	1bdc4 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
   1bdc2:	2300      	movs	r3, #0
		}
	}
}
   1bdc4:	0018      	movs	r0, r3
   1bdc6:	46bd      	mov	sp, r7
   1bdc8:	bd80      	pop	{r7, pc}
   1bdca:	46c0      	nop			; (mov r8, r8)
   1bdcc:	20000a64 	.word	0x20000a64
   1bdd0:	200008e8 	.word	0x200008e8
   1bdd4:	200009f8 	.word	0x200009f8

0001bdd8 <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
   1bdd8:	b5b0      	push	{r4, r5, r7, lr}
   1bdda:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
   1bddc:	4b07      	ldr	r3, [pc, #28]	; (1bdfc <detectMotorStateChangeUsingCurrent+0x24>)
   1bdde:	4798      	blx	r3
   1bde0:	0003      	movs	r3, r0
   1bde2:	001c      	movs	r4, r3
   1bde4:	4b06      	ldr	r3, [pc, #24]	; (1be00 <detectMotorStateChangeUsingCurrent+0x28>)
   1bde6:	4798      	blx	r3
   1bde8:	0003      	movs	r3, r0
   1bdea:	429c      	cmp	r4, r3
   1bdec:	d001      	beq.n	1bdf2 <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
   1bdee:	2301      	movs	r3, #1
   1bdf0:	e000      	b.n	1bdf4 <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
   1bdf2:	2300      	movs	r3, #0
	}
}
   1bdf4:	0018      	movs	r0, r3
   1bdf6:	46bd      	mov	sp, r7
   1bdf8:	bdb0      	pop	{r4, r5, r7, pc}
   1bdfa:	46c0      	nop			; (mov r8, r8)
   1bdfc:	0001bbf1 	.word	0x0001bbf1
   1be00:	0001bd8d 	.word	0x0001bd8d

0001be04 <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
   1be04:	b5b0      	push	{r4, r5, r7, lr}
   1be06:	b084      	sub	sp, #16
   1be08:	af00      	add	r7, sp, #0
   1be0a:	0005      	movs	r5, r0
   1be0c:	000c      	movs	r4, r1
   1be0e:	0010      	movs	r0, r2
   1be10:	0019      	movs	r1, r3
   1be12:	1dfb      	adds	r3, r7, #7
   1be14:	1c2a      	adds	r2, r5, #0
   1be16:	701a      	strb	r2, [r3, #0]
   1be18:	1dbb      	adds	r3, r7, #6
   1be1a:	1c22      	adds	r2, r4, #0
   1be1c:	701a      	strb	r2, [r3, #0]
   1be1e:	1d7b      	adds	r3, r7, #5
   1be20:	1c02      	adds	r2, r0, #0
   1be22:	701a      	strb	r2, [r3, #0]
   1be24:	1d3b      	adds	r3, r7, #4
   1be26:	1c0a      	adds	r2, r1, #0
   1be28:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
   1be2a:	1dfb      	adds	r3, r7, #7
   1be2c:	781b      	ldrb	r3, [r3, #0]
   1be2e:	0018      	movs	r0, r3
   1be30:	4b28      	ldr	r3, [pc, #160]	; (1bed4 <updateSensorState+0xd0>)
   1be32:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
   1be34:	1dbb      	adds	r3, r7, #6
   1be36:	781b      	ldrb	r3, [r3, #0]
   1be38:	0018      	movs	r0, r3
   1be3a:	4b27      	ldr	r3, [pc, #156]	; (1bed8 <updateSensorState+0xd4>)
   1be3c:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
   1be3e:	1d7b      	adds	r3, r7, #5
   1be40:	781b      	ldrb	r3, [r3, #0]
   1be42:	0018      	movs	r0, r3
   1be44:	4b25      	ldr	r3, [pc, #148]	; (1bedc <updateSensorState+0xd8>)
   1be46:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
   1be48:	1d3b      	adds	r3, r7, #4
   1be4a:	781b      	ldrb	r3, [r3, #0]
   1be4c:	0018      	movs	r0, r3
   1be4e:	4b24      	ldr	r3, [pc, #144]	; (1bee0 <updateSensorState+0xdc>)
   1be50:	4798      	blx	r3
	
	//if(getAllPhaseState()==AC_3PH && getACPowerState())
	if(getAllPhaseState()==AC_3PH)
   1be52:	4b24      	ldr	r3, [pc, #144]	; (1bee4 <updateSensorState+0xe0>)
   1be54:	4798      	blx	r3
   1be56:	0003      	movs	r3, r0
   1be58:	2b03      	cmp	r3, #3
   1be5a:	d12c      	bne.n	1beb6 <updateSensorState+0xb2>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
   1be5c:	230f      	movs	r3, #15
   1be5e:	18fb      	adds	r3, r7, r3
   1be60:	2201      	movs	r2, #1
   1be62:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
   1be64:	4b20      	ldr	r3, [pc, #128]	; (1bee8 <updateSensorState+0xe4>)
   1be66:	2224      	movs	r2, #36	; 0x24
   1be68:	5c9b      	ldrb	r3, [r3, r2]
   1be6a:	b2db      	uxtb	r3, r3
   1be6c:	2b00      	cmp	r3, #0
   1be6e:	d005      	beq.n	1be7c <updateSensorState+0x78>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
   1be70:	230f      	movs	r3, #15
   1be72:	18fc      	adds	r4, r7, r3
   1be74:	4b1d      	ldr	r3, [pc, #116]	; (1beec <updateSensorState+0xe8>)
   1be76:	4798      	blx	r3
   1be78:	0003      	movs	r3, r0
   1be7a:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
   1be7c:	230f      	movs	r3, #15
   1be7e:	18fb      	adds	r3, r7, r3
   1be80:	781b      	ldrb	r3, [r3, #0]
   1be82:	2b00      	cmp	r3, #0
   1be84:	d004      	beq.n	1be90 <updateSensorState+0x8c>
		{
			THREEPHASE_OK_LED_ON;
   1be86:	2100      	movs	r1, #0
   1be88:	2027      	movs	r0, #39	; 0x27
   1be8a:	4b19      	ldr	r3, [pc, #100]	; (1bef0 <updateSensorState+0xec>)
   1be8c:	4798      	blx	r3
   1be8e:	e003      	b.n	1be98 <updateSensorState+0x94>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
   1be90:	2101      	movs	r1, #1
   1be92:	2027      	movs	r0, #39	; 0x27
   1be94:	4b16      	ldr	r3, [pc, #88]	; (1bef0 <updateSensorState+0xec>)
   1be96:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
   1be98:	4b13      	ldr	r3, [pc, #76]	; (1bee8 <updateSensorState+0xe4>)
   1be9a:	785b      	ldrb	r3, [r3, #1]
   1be9c:	b2db      	uxtb	r3, r3
   1be9e:	2b00      	cmp	r3, #0
   1bea0:	d004      	beq.n	1beac <updateSensorState+0xa8>
		{
			AUTO_ON_LED_ON;
   1bea2:	2100      	movs	r1, #0
   1bea4:	2028      	movs	r0, #40	; 0x28
   1bea6:	4b12      	ldr	r3, [pc, #72]	; (1bef0 <updateSensorState+0xec>)
   1bea8:	4798      	blx	r3
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
   1beaa:	e00f      	b.n	1becc <updateSensorState+0xc8>
			AUTO_ON_LED_OFF;
   1beac:	2101      	movs	r1, #1
   1beae:	2028      	movs	r0, #40	; 0x28
   1beb0:	4b0f      	ldr	r3, [pc, #60]	; (1bef0 <updateSensorState+0xec>)
   1beb2:	4798      	blx	r3
}
   1beb4:	e00a      	b.n	1becc <updateSensorState+0xc8>
		THREEPHASE_OK_LED_OFF;
   1beb6:	2101      	movs	r1, #1
   1beb8:	2027      	movs	r0, #39	; 0x27
   1beba:	4b0d      	ldr	r3, [pc, #52]	; (1bef0 <updateSensorState+0xec>)
   1bebc:	4798      	blx	r3
		AUTO_ON_LED_OFF;
   1bebe:	2101      	movs	r1, #1
   1bec0:	2028      	movs	r0, #40	; 0x28
   1bec2:	4b0b      	ldr	r3, [pc, #44]	; (1bef0 <updateSensorState+0xec>)
   1bec4:	4798      	blx	r3
		startTimerOn=false;
   1bec6:	4b0b      	ldr	r3, [pc, #44]	; (1bef4 <updateSensorState+0xf0>)
   1bec8:	2200      	movs	r2, #0
   1beca:	701a      	strb	r2, [r3, #0]
}
   1becc:	46c0      	nop			; (mov r8, r8)
   1bece:	46bd      	mov	sp, r7
   1bed0:	b004      	add	sp, #16
   1bed2:	bdb0      	pop	{r4, r5, r7, pc}
   1bed4:	0001bb9d 	.word	0x0001bb9d
   1bed8:	0001bbd1 	.word	0x0001bbd1
   1bedc:	0001bc05 	.word	0x0001bc05
   1bee0:	0001bb69 	.word	0x0001bb69
   1bee4:	0001bb89 	.word	0x0001bb89
   1bee8:	20000854 	.word	0x20000854
   1beec:	0001bbbd 	.word	0x0001bbbd
   1bef0:	0001a075 	.word	0x0001a075
   1bef4:	2000099a 	.word	0x2000099a

0001bef8 <resetAutoStart>:

void resetAutoStart(bool setChange)
{
   1bef8:	b580      	push	{r7, lr}
   1befa:	b082      	sub	sp, #8
   1befc:	af00      	add	r7, sp, #0
   1befe:	0002      	movs	r2, r0
   1bf00:	1dfb      	adds	r3, r7, #7
   1bf02:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
   1bf04:	4b0f      	ldr	r3, [pc, #60]	; (1bf44 <resetAutoStart+0x4c>)
   1bf06:	785b      	ldrb	r3, [r3, #1]
   1bf08:	b2db      	uxtb	r3, r3
   1bf0a:	2b00      	cmp	r3, #0
   1bf0c:	d107      	bne.n	1bf1e <resetAutoStart+0x26>
	{
		startTimerOn=false;
   1bf0e:	4b0e      	ldr	r3, [pc, #56]	; (1bf48 <resetAutoStart+0x50>)
   1bf10:	2200      	movs	r2, #0
   1bf12:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
   1bf14:	2101      	movs	r1, #1
   1bf16:	2028      	movs	r0, #40	; 0x28
   1bf18:	4b0c      	ldr	r3, [pc, #48]	; (1bf4c <resetAutoStart+0x54>)
   1bf1a:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
   1bf1c:	e00e      	b.n	1bf3c <resetAutoStart+0x44>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
   1bf1e:	4b09      	ldr	r3, [pc, #36]	; (1bf44 <resetAutoStart+0x4c>)
   1bf20:	785b      	ldrb	r3, [r3, #1]
   1bf22:	b2db      	uxtb	r3, r3
   1bf24:	2b00      	cmp	r3, #0
   1bf26:	d009      	beq.n	1bf3c <resetAutoStart+0x44>
		AUTO_ON_LED_ON;
   1bf28:	2100      	movs	r1, #0
   1bf2a:	2028      	movs	r0, #40	; 0x28
   1bf2c:	4b07      	ldr	r3, [pc, #28]	; (1bf4c <resetAutoStart+0x54>)
   1bf2e:	4798      	blx	r3
		if (setChange)
   1bf30:	1dfb      	adds	r3, r7, #7
   1bf32:	781b      	ldrb	r3, [r3, #0]
   1bf34:	2b00      	cmp	r3, #0
   1bf36:	d001      	beq.n	1bf3c <resetAutoStart+0x44>
			triggerAutoStart();
   1bf38:	4b05      	ldr	r3, [pc, #20]	; (1bf50 <resetAutoStart+0x58>)
   1bf3a:	4798      	blx	r3
}
   1bf3c:	46c0      	nop			; (mov r8, r8)
   1bf3e:	46bd      	mov	sp, r7
   1bf40:	b002      	add	sp, #8
   1bf42:	bd80      	pop	{r7, pc}
   1bf44:	20000854 	.word	0x20000854
   1bf48:	2000099a 	.word	0x2000099a
   1bf4c:	0001a075 	.word	0x0001a075
   1bf50:	0001bf55 	.word	0x0001bf55

0001bf54 <triggerAutoStart>:

void triggerAutoStart(void)
{
   1bf54:	b580      	push	{r7, lr}
   1bf56:	af00      	add	r7, sp, #0
	if (!getMotorState())
   1bf58:	4b0b      	ldr	r3, [pc, #44]	; (1bf88 <triggerAutoStart+0x34>)
   1bf5a:	4798      	blx	r3
   1bf5c:	0003      	movs	r3, r0
   1bf5e:	001a      	movs	r2, r3
   1bf60:	2301      	movs	r3, #1
   1bf62:	4053      	eors	r3, r2
   1bf64:	b2db      	uxtb	r3, r3
   1bf66:	2b00      	cmp	r3, #0
   1bf68:	d00b      	beq.n	1bf82 <triggerAutoStart+0x2e>
	{
		//if (getAllPhaseState() && getACPowerState())
		if (getAllPhaseState())
   1bf6a:	4b08      	ldr	r3, [pc, #32]	; (1bf8c <triggerAutoStart+0x38>)
   1bf6c:	4798      	blx	r3
   1bf6e:	1e03      	subs	r3, r0, #0
   1bf70:	d007      	beq.n	1bf82 <triggerAutoStart+0x2e>
		{
			startTimerOn = true;
   1bf72:	4b07      	ldr	r3, [pc, #28]	; (1bf90 <triggerAutoStart+0x3c>)
   1bf74:	2201      	movs	r2, #1
   1bf76:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
   1bf78:	4b06      	ldr	r3, [pc, #24]	; (1bf94 <triggerAutoStart+0x40>)
   1bf7a:	4798      	blx	r3
   1bf7c:	0002      	movs	r2, r0
   1bf7e:	4b06      	ldr	r3, [pc, #24]	; (1bf98 <triggerAutoStart+0x44>)
   1bf80:	601a      	str	r2, [r3, #0]
		}
	}
}
   1bf82:	46c0      	nop			; (mov r8, r8)
   1bf84:	46bd      	mov	sp, r7
   1bf86:	bd80      	pop	{r7, pc}
   1bf88:	0001bbf1 	.word	0x0001bbf1
   1bf8c:	0001bb89 	.word	0x0001bb89
   1bf90:	2000099a 	.word	0x2000099a
   1bf94:	00020dad 	.word	0x00020dad
   1bf98:	200009a4 	.word	0x200009a4

0001bf9c <operateOnEvent>:

void operateOnEvent(void)
{
   1bf9c:	b590      	push	{r4, r7, lr}
   1bf9e:	b083      	sub	sp, #12
   1bfa0:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
   1bfa2:	1d3b      	adds	r3, r7, #4
   1bfa4:	1d7a      	adds	r2, r7, #5
   1bfa6:	1db9      	adds	r1, r7, #6
   1bfa8:	1df8      	adds	r0, r7, #7
   1bfaa:	4c5e      	ldr	r4, [pc, #376]	; (1c124 <operateOnEvent+0x188>)
   1bfac:	47a0      	blx	r4
	eventOccured = false;
   1bfae:	4b5e      	ldr	r3, [pc, #376]	; (1c128 <operateOnEvent+0x18c>)
   1bfb0:	2200      	movs	r2, #0
   1bfb2:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	//if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()))
   1bfb4:	4b5d      	ldr	r3, [pc, #372]	; (1c12c <operateOnEvent+0x190>)
   1bfb6:	4798      	blx	r3
   1bfb8:	0003      	movs	r3, r0
   1bfba:	001a      	movs	r2, r3
   1bfbc:	1dfb      	adds	r3, r7, #7
   1bfbe:	781b      	ldrb	r3, [r3, #0]
   1bfc0:	429a      	cmp	r2, r3
   1bfc2:	d108      	bne.n	1bfd6 <operateOnEvent+0x3a>
   1bfc4:	4b5a      	ldr	r3, [pc, #360]	; (1c130 <operateOnEvent+0x194>)
   1bfc6:	4798      	blx	r3
   1bfc8:	0003      	movs	r3, r0
   1bfca:	001a      	movs	r2, r3
   1bfcc:	1d7b      	adds	r3, r7, #5
   1bfce:	781b      	ldrb	r3, [r3, #0]
   1bfd0:	429a      	cmp	r2, r3
   1bfd2:	d100      	bne.n	1bfd6 <operateOnEvent+0x3a>
   1bfd4:	e0a1      	b.n	1c11a <operateOnEvent+0x17e>
	{
		return;
	}
	if (getMotorState())	//motorOn
   1bfd6:	4b56      	ldr	r3, [pc, #344]	; (1c130 <operateOnEvent+0x194>)
   1bfd8:	4798      	blx	r3
   1bfda:	1e03      	subs	r3, r0, #0
   1bfdc:	d05d      	beq.n	1c09a <operateOnEvent+0xfe>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
   1bfde:	1dfb      	adds	r3, r7, #7
   1bfe0:	781b      	ldrb	r3, [r3, #0]
   1bfe2:	2b00      	cmp	r3, #0
   1bfe4:	d11e      	bne.n	1c024 <operateOnEvent+0x88>
   1bfe6:	1d7b      	adds	r3, r7, #5
   1bfe8:	781b      	ldrb	r3, [r3, #0]
   1bfea:	2201      	movs	r2, #1
   1bfec:	4053      	eors	r3, r2
   1bfee:	b2db      	uxtb	r3, r3
   1bff0:	2b00      	cmp	r3, #0
   1bff2:	d017      	beq.n	1c024 <operateOnEvent+0x88>
   1bff4:	1d3b      	adds	r3, r7, #4
   1bff6:	781b      	ldrb	r3, [r3, #0]
   1bff8:	2201      	movs	r2, #1
   1bffa:	4053      	eors	r3, r2
   1bffc:	b2db      	uxtb	r3, r3
   1bffe:	2b00      	cmp	r3, #0
   1c000:	d010      	beq.n	1c024 <operateOnEvent+0x88>
		{
			stopMotor(false,true,false);
   1c002:	2200      	movs	r2, #0
   1c004:	2101      	movs	r1, #1
   1c006:	2000      	movs	r0, #0
   1c008:	4b4a      	ldr	r3, [pc, #296]	; (1c134 <operateOnEvent+0x198>)
   1c00a:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
   1c00c:	2101      	movs	r1, #1
   1c00e:	2027      	movs	r0, #39	; 0x27
   1c010:	4b49      	ldr	r3, [pc, #292]	; (1c138 <operateOnEvent+0x19c>)
   1c012:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
   1c014:	2043      	movs	r0, #67	; 0x43
   1c016:	4b49      	ldr	r3, [pc, #292]	; (1c13c <operateOnEvent+0x1a0>)
   1c018:	4798      	blx	r3
   1c01a:	0003      	movs	r3, r0
   1c01c:	001a      	movs	r2, r3
   1c01e:	4b48      	ldr	r3, [pc, #288]	; (1c140 <operateOnEvent+0x1a4>)
   1c020:	719a      	strb	r2, [r3, #6]
   1c022:	e06f      	b.n	1c104 <operateOnEvent+0x168>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		//else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1c024:	4b47      	ldr	r3, [pc, #284]	; (1c144 <operateOnEvent+0x1a8>)
   1c026:	2220      	movs	r2, #32
   1c028:	5c9b      	ldrb	r3, [r3, r2]
   1c02a:	b2db      	uxtb	r3, r3
   1c02c:	2b00      	cmp	r3, #0
   1c02e:	d008      	beq.n	1c042 <operateOnEvent+0xa6>
   1c030:	1dfb      	adds	r3, r7, #7
   1c032:	781b      	ldrb	r3, [r3, #0]
   1c034:	2b03      	cmp	r3, #3
   1c036:	d104      	bne.n	1c042 <operateOnEvent+0xa6>
   1c038:	4b3c      	ldr	r3, [pc, #240]	; (1c12c <operateOnEvent+0x190>)
   1c03a:	4798      	blx	r3
   1c03c:	0003      	movs	r3, r0
   1c03e:	2b03      	cmp	r3, #3
   1c040:	d00e      	beq.n	1c060 <operateOnEvent+0xc4>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1c042:	4b40      	ldr	r3, [pc, #256]	; (1c144 <operateOnEvent+0x1a8>)
   1c044:	2220      	movs	r2, #32
   1c046:	5c9b      	ldrb	r3, [r3, r2]
   1c048:	b2db      	uxtb	r3, r3
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1c04a:	2b00      	cmp	r3, #0
   1c04c:	d112      	bne.n	1c074 <operateOnEvent+0xd8>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1c04e:	1dfb      	adds	r3, r7, #7
   1c050:	781b      	ldrb	r3, [r3, #0]
   1c052:	2b01      	cmp	r3, #1
   1c054:	d90e      	bls.n	1c074 <operateOnEvent+0xd8>
   1c056:	4b35      	ldr	r3, [pc, #212]	; (1c12c <operateOnEvent+0x190>)
   1c058:	4798      	blx	r3
   1c05a:	0003      	movs	r3, r0
   1c05c:	2b01      	cmp	r3, #1
   1c05e:	d909      	bls.n	1c074 <operateOnEvent+0xd8>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
   1c060:	1d7b      	adds	r3, r7, #5
   1c062:	781b      	ldrb	r3, [r3, #0]
   1c064:	2201      	movs	r2, #1
   1c066:	4053      	eors	r3, r2
   1c068:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1c06a:	2b00      	cmp	r3, #0
   1c06c:	d002      	beq.n	1c074 <operateOnEvent+0xd8>
		{
			unknownMotorOff();
   1c06e:	4b36      	ldr	r3, [pc, #216]	; (1c148 <operateOnEvent+0x1ac>)
   1c070:	4798      	blx	r3
   1c072:	e047      	b.n	1c104 <operateOnEvent+0x168>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1c074:	4b33      	ldr	r3, [pc, #204]	; (1c144 <operateOnEvent+0x1a8>)
   1c076:	2220      	movs	r2, #32
   1c078:	5c9b      	ldrb	r3, [r3, r2]
   1c07a:	b2db      	uxtb	r3, r3
   1c07c:	2b00      	cmp	r3, #0
   1c07e:	d041      	beq.n	1c104 <operateOnEvent+0x168>
		t3Phase==AC_2PH) /*&&																														// Only 2 Phase Present
   1c080:	1dfb      	adds	r3, r7, #7
   1c082:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1c084:	2b02      	cmp	r3, #2
   1c086:	d13d      	bne.n	1c104 <operateOnEvent+0x168>
		tacPhase)*/ ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
   1c088:	4b30      	ldr	r3, [pc, #192]	; (1c14c <operateOnEvent+0x1b0>)
   1c08a:	4798      	blx	r3
   1c08c:	0002      	movs	r2, r0
   1c08e:	4b30      	ldr	r3, [pc, #192]	; (1c150 <operateOnEvent+0x1b4>)
   1c090:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
   1c092:	4b30      	ldr	r3, [pc, #192]	; (1c154 <operateOnEvent+0x1b8>)
   1c094:	2201      	movs	r2, #1
   1c096:	701a      	strb	r2, [r3, #0]
   1c098:	e034      	b.n	1c104 <operateOnEvent+0x168>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
   1c09a:	1d7b      	adds	r3, r7, #5
   1c09c:	781b      	ldrb	r3, [r3, #0]
   1c09e:	2b00      	cmp	r3, #0
   1c0a0:	d028      	beq.n	1c0f4 <operateOnEvent+0x158>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
   1c0a2:	1dfb      	adds	r3, r7, #7
   1c0a4:	781b      	ldrb	r3, [r3, #0]
   1c0a6:	2b03      	cmp	r3, #3
   1c0a8:	d11e      	bne.n	1c0e8 <operateOnEvent+0x14c>
   1c0aa:	1dbb      	adds	r3, r7, #6
   1c0ac:	781b      	ldrb	r3, [r3, #0]
   1c0ae:	2b00      	cmp	r3, #0
   1c0b0:	d01a      	beq.n	1c0e8 <operateOnEvent+0x14c>
   1c0b2:	1d3b      	adds	r3, r7, #4
   1c0b4:	781b      	ldrb	r3, [r3, #0]
   1c0b6:	2b00      	cmp	r3, #0
   1c0b8:	d016      	beq.n	1c0e8 <operateOnEvent+0x14c>
			{
				if (startTimerOn)
   1c0ba:	4b27      	ldr	r3, [pc, #156]	; (1c158 <operateOnEvent+0x1bc>)
   1c0bc:	781b      	ldrb	r3, [r3, #0]
   1c0be:	2b00      	cmp	r3, #0
   1c0c0:	d002      	beq.n	1c0c8 <operateOnEvent+0x12c>
				{
					startTimerOn = false;
   1c0c2:	4b25      	ldr	r3, [pc, #148]	; (1c158 <operateOnEvent+0x1bc>)
   1c0c4:	2200      	movs	r2, #0
   1c0c6:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
   1c0c8:	2100      	movs	r1, #0
   1c0ca:	2027      	movs	r0, #39	; 0x27
   1c0cc:	4b1a      	ldr	r3, [pc, #104]	; (1c138 <operateOnEvent+0x19c>)
   1c0ce:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
   1c0d0:	2053      	movs	r0, #83	; 0x53
   1c0d2:	4b1a      	ldr	r3, [pc, #104]	; (1c13c <operateOnEvent+0x1a0>)
   1c0d4:	4798      	blx	r3
   1c0d6:	0003      	movs	r3, r0
   1c0d8:	001a      	movs	r2, r3
   1c0da:	4b19      	ldr	r3, [pc, #100]	; (1c140 <operateOnEvent+0x1a4>)
   1c0dc:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
   1c0de:	2101      	movs	r1, #1
   1c0e0:	2001      	movs	r0, #1
   1c0e2:	4b1e      	ldr	r3, [pc, #120]	; (1c15c <operateOnEvent+0x1c0>)
   1c0e4:	4798      	blx	r3
   1c0e6:	e00d      	b.n	1c104 <operateOnEvent+0x168>
			}
			else
			{
				stopMotor(false,true,false);
   1c0e8:	2200      	movs	r2, #0
   1c0ea:	2101      	movs	r1, #1
   1c0ec:	2000      	movs	r0, #0
   1c0ee:	4b11      	ldr	r3, [pc, #68]	; (1c134 <operateOnEvent+0x198>)
   1c0f0:	4798      	blx	r3
   1c0f2:	e007      	b.n	1c104 <operateOnEvent+0x168>
			}
		}
		else
		{
			waitStableLineOn = true;
   1c0f4:	4b1a      	ldr	r3, [pc, #104]	; (1c160 <operateOnEvent+0x1c4>)
   1c0f6:	2201      	movs	r2, #1
   1c0f8:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
   1c0fa:	4b14      	ldr	r3, [pc, #80]	; (1c14c <operateOnEvent+0x1b0>)
   1c0fc:	4798      	blx	r3
   1c0fe:	0002      	movs	r2, r0
   1c100:	4b18      	ldr	r3, [pc, #96]	; (1c164 <operateOnEvent+0x1c8>)
   1c102:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
   1c104:	1dfb      	adds	r3, r7, #7
   1c106:	7818      	ldrb	r0, [r3, #0]
   1c108:	1dbb      	adds	r3, r7, #6
   1c10a:	7819      	ldrb	r1, [r3, #0]
   1c10c:	1d7b      	adds	r3, r7, #5
   1c10e:	781a      	ldrb	r2, [r3, #0]
   1c110:	1d3b      	adds	r3, r7, #4
   1c112:	781b      	ldrb	r3, [r3, #0]
   1c114:	4c14      	ldr	r4, [pc, #80]	; (1c168 <operateOnEvent+0x1cc>)
   1c116:	47a0      	blx	r4
   1c118:	e000      	b.n	1c11c <operateOnEvent+0x180>
		return;
   1c11a:	46c0      	nop			; (mov r8, r8)
}
   1c11c:	46bd      	mov	sp, r7
   1c11e:	b003      	add	sp, #12
   1c120:	bd90      	pop	{r4, r7, pc}
   1c122:	46c0      	nop			; (mov r8, r8)
   1c124:	0001bc75 	.word	0x0001bc75
   1c128:	2000092e 	.word	0x2000092e
   1c12c:	0001bb89 	.word	0x0001bb89
   1c130:	0001bbf1 	.word	0x0001bbf1
   1c134:	0001c4fd 	.word	0x0001c4fd
   1c138:	0001a075 	.word	0x0001a075
   1c13c:	00014c4d 	.word	0x00014c4d
   1c140:	20000918 	.word	0x20000918
   1c144:	20000854 	.word	0x20000854
   1c148:	0001c629 	.word	0x0001c629
   1c14c:	00020dad 	.word	0x00020dad
   1c150:	20000978 	.word	0x20000978
   1c154:	20000991 	.word	0x20000991
   1c158:	2000099a 	.word	0x2000099a
   1c15c:	0001c315 	.word	0x0001c315
   1c160:	20000a11 	.word	0x20000a11
   1c164:	200009d0 	.word	0x200009d0
   1c168:	0001be05 	.word	0x0001be05

0001c16c <checkLineSensors>:

uint8_t checkLineSensors(void)
{
   1c16c:	b580      	push	{r7, lr}
   1c16e:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
   1c170:	4b02      	ldr	r3, [pc, #8]	; (1c17c <checkLineSensors+0x10>)
   1c172:	785b      	ldrb	r3, [r3, #1]
   1c174:	b2db      	uxtb	r3, r3
}
   1c176:	0018      	movs	r0, r3
   1c178:	46bd      	mov	sp, r7
   1c17a:	bd80      	pop	{r7, pc}
   1c17c:	20000948 	.word	0x20000948

0001c180 <operateOnStableLine>:

void operateOnStableLine(void)
{
   1c180:	b590      	push	{r4, r7, lr}
   1c182:	b083      	sub	sp, #12
   1c184:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
   1c186:	4b46      	ldr	r3, [pc, #280]	; (1c2a0 <operateOnStableLine+0x120>)
   1c188:	2200      	movs	r2, #0
   1c18a:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
   1c18c:	1dbc      	adds	r4, r7, #6
   1c18e:	4b45      	ldr	r3, [pc, #276]	; (1c2a4 <operateOnStableLine+0x124>)
   1c190:	4798      	blx	r3
   1c192:	0003      	movs	r3, r0
   1c194:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
   1c196:	1dbb      	adds	r3, r7, #6
   1c198:	781b      	ldrb	r3, [r3, #0]
   1c19a:	2b03      	cmp	r3, #3
   1c19c:	d138      	bne.n	1c210 <operateOnStableLine+0x90>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
   1c19e:	1dfb      	adds	r3, r7, #7
   1c1a0:	2201      	movs	r2, #1
   1c1a2:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
   1c1a4:	4b40      	ldr	r3, [pc, #256]	; (1c2a8 <operateOnStableLine+0x128>)
   1c1a6:	2224      	movs	r2, #36	; 0x24
   1c1a8:	5c9b      	ldrb	r3, [r3, r2]
   1c1aa:	b2db      	uxtb	r3, r3
   1c1ac:	2b00      	cmp	r3, #0
   1c1ae:	d004      	beq.n	1c1ba <operateOnStableLine+0x3a>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
   1c1b0:	1dfc      	adds	r4, r7, #7
   1c1b2:	4b3e      	ldr	r3, [pc, #248]	; (1c2ac <operateOnStableLine+0x12c>)
   1c1b4:	4798      	blx	r3
   1c1b6:	0003      	movs	r3, r0
   1c1b8:	7023      	strb	r3, [r4, #0]
		}
	
		checkForSIMStatus();
   1c1ba:	4b3d      	ldr	r3, [pc, #244]	; (1c2b0 <operateOnStableLine+0x130>)
   1c1bc:	4798      	blx	r3
		
		
		if(tempPhaseSeq)															// if correct phase seq than
   1c1be:	1dfb      	adds	r3, r7, #7
   1c1c0:	781b      	ldrb	r3, [r3, #0]
   1c1c2:	2b00      	cmp	r3, #0
   1c1c4:	d018      	beq.n	1c1f8 <operateOnStableLine+0x78>
		{
			THREEPHASE_OK_LED_ON;
   1c1c6:	2100      	movs	r1, #0
   1c1c8:	2027      	movs	r0, #39	; 0x27
   1c1ca:	4b3a      	ldr	r3, [pc, #232]	; (1c2b4 <operateOnStableLine+0x134>)
   1c1cc:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
   1c1ce:	4b36      	ldr	r3, [pc, #216]	; (1c2a8 <operateOnStableLine+0x128>)
   1c1d0:	785b      	ldrb	r3, [r3, #1]
   1c1d2:	b2db      	uxtb	r3, r3
   1c1d4:	2b00      	cmp	r3, #0
   1c1d6:	d002      	beq.n	1c1de <operateOnStableLine+0x5e>
			{
				triggerAutoStart();
   1c1d8:	4b37      	ldr	r3, [pc, #220]	; (1c2b8 <operateOnStableLine+0x138>)
   1c1da:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
   1c1dc:	e05b      	b.n	1c296 <operateOnStableLine+0x116>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
   1c1de:	4b32      	ldr	r3, [pc, #200]	; (1c2a8 <operateOnStableLine+0x128>)
   1c1e0:	791b      	ldrb	r3, [r3, #4]
   1c1e2:	b2db      	uxtb	r3, r3
   1c1e4:	2b4c      	cmp	r3, #76	; 0x4c
   1c1e6:	d056      	beq.n	1c296 <operateOnStableLine+0x116>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
   1c1e8:	2047      	movs	r0, #71	; 0x47
   1c1ea:	4b34      	ldr	r3, [pc, #208]	; (1c2bc <operateOnStableLine+0x13c>)
   1c1ec:	4798      	blx	r3
   1c1ee:	0003      	movs	r3, r0
   1c1f0:	001a      	movs	r2, r3
   1c1f2:	4b33      	ldr	r3, [pc, #204]	; (1c2c0 <operateOnStableLine+0x140>)
   1c1f4:	711a      	strb	r2, [r3, #4]
}
   1c1f6:	e04e      	b.n	1c296 <operateOnStableLine+0x116>
			THREEPHASE_OK_LED_OFF;
   1c1f8:	2101      	movs	r1, #1
   1c1fa:	2027      	movs	r0, #39	; 0x27
   1c1fc:	4b2d      	ldr	r3, [pc, #180]	; (1c2b4 <operateOnStableLine+0x134>)
   1c1fe:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
   1c200:	2041      	movs	r0, #65	; 0x41
   1c202:	4b2e      	ldr	r3, [pc, #184]	; (1c2bc <operateOnStableLine+0x13c>)
   1c204:	4798      	blx	r3
   1c206:	0003      	movs	r3, r0
   1c208:	001a      	movs	r2, r3
   1c20a:	4b2d      	ldr	r3, [pc, #180]	; (1c2c0 <operateOnStableLine+0x140>)
   1c20c:	725a      	strb	r2, [r3, #9]
}
   1c20e:	e042      	b.n	1c296 <operateOnStableLine+0x116>
	else if (temp == AC_2PH) //Got Power in 2 phase
   1c210:	1dbb      	adds	r3, r7, #6
   1c212:	781b      	ldrb	r3, [r3, #0]
   1c214:	2b02      	cmp	r3, #2
   1c216:	d116      	bne.n	1c246 <operateOnStableLine+0xc6>
		THREEPHASE_OK_LED_OFF;
   1c218:	2101      	movs	r1, #1
   1c21a:	2027      	movs	r0, #39	; 0x27
   1c21c:	4b25      	ldr	r3, [pc, #148]	; (1c2b4 <operateOnStableLine+0x134>)
   1c21e:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1c220:	4b21      	ldr	r3, [pc, #132]	; (1c2a8 <operateOnStableLine+0x128>)
   1c222:	791b      	ldrb	r3, [r3, #4]
   1c224:	b2db      	uxtb	r3, r3
   1c226:	2b4f      	cmp	r3, #79	; 0x4f
   1c228:	d135      	bne.n	1c296 <operateOnStableLine+0x116>
		user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
   1c22a:	4b1f      	ldr	r3, [pc, #124]	; (1c2a8 <operateOnStableLine+0x128>)
   1c22c:	2220      	movs	r2, #32
   1c22e:	5c9b      	ldrb	r3, [r3, r2]
   1c230:	b2db      	uxtb	r3, r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1c232:	2b00      	cmp	r3, #0
   1c234:	d02f      	beq.n	1c296 <operateOnStableLine+0x116>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
   1c236:	2041      	movs	r0, #65	; 0x41
   1c238:	4b20      	ldr	r3, [pc, #128]	; (1c2bc <operateOnStableLine+0x13c>)
   1c23a:	4798      	blx	r3
   1c23c:	0003      	movs	r3, r0
   1c23e:	001a      	movs	r2, r3
   1c240:	4b1f      	ldr	r3, [pc, #124]	; (1c2c0 <operateOnStableLine+0x140>)
   1c242:	725a      	strb	r2, [r3, #9]
}
   1c244:	e027      	b.n	1c296 <operateOnStableLine+0x116>
	else if (temp == AC_OFF)	//Lost Power in All Phase
   1c246:	1dbb      	adds	r3, r7, #6
   1c248:	781b      	ldrb	r3, [r3, #0]
   1c24a:	2b00      	cmp	r3, #0
   1c24c:	d123      	bne.n	1c296 <operateOnStableLine+0x116>
		THREEPHASE_OK_LED_OFF;
   1c24e:	2101      	movs	r1, #1
   1c250:	2027      	movs	r0, #39	; 0x27
   1c252:	4b18      	ldr	r3, [pc, #96]	; (1c2b4 <operateOnStableLine+0x134>)
   1c254:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1c256:	4b14      	ldr	r3, [pc, #80]	; (1c2a8 <operateOnStableLine+0x128>)
   1c258:	791b      	ldrb	r3, [r3, #4]
   1c25a:	b2db      	uxtb	r3, r3
   1c25c:	2b4f      	cmp	r3, #79	; 0x4f
   1c25e:	d013      	beq.n	1c288 <operateOnStableLine+0x108>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1c260:	4b18      	ldr	r3, [pc, #96]	; (1c2c4 <operateOnStableLine+0x144>)
   1c262:	781b      	ldrb	r3, [r3, #0]
   1c264:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1c266:	2b02      	cmp	r3, #2
   1c268:	d104      	bne.n	1c274 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1c26a:	4b0f      	ldr	r3, [pc, #60]	; (1c2a8 <operateOnStableLine+0x128>)
   1c26c:	791b      	ldrb	r3, [r3, #4]
   1c26e:	b2db      	uxtb	r3, r3
   1c270:	2b4f      	cmp	r3, #79	; 0x4f
   1c272:	d009      	beq.n	1c288 <operateOnStableLine+0x108>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1c274:	4b13      	ldr	r3, [pc, #76]	; (1c2c4 <operateOnStableLine+0x144>)
   1c276:	781b      	ldrb	r3, [r3, #0]
   1c278:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1c27a:	2b03      	cmp	r3, #3
   1c27c:	d10b      	bne.n	1c296 <operateOnStableLine+0x116>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1c27e:	4b0a      	ldr	r3, [pc, #40]	; (1c2a8 <operateOnStableLine+0x128>)
   1c280:	791b      	ldrb	r3, [r3, #4]
   1c282:	b2db      	uxtb	r3, r3
   1c284:	2b4c      	cmp	r3, #76	; 0x4c
   1c286:	d006      	beq.n	1c296 <operateOnStableLine+0x116>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
   1c288:	204c      	movs	r0, #76	; 0x4c
   1c28a:	4b0c      	ldr	r3, [pc, #48]	; (1c2bc <operateOnStableLine+0x13c>)
   1c28c:	4798      	blx	r3
   1c28e:	0003      	movs	r3, r0
   1c290:	001a      	movs	r2, r3
   1c292:	4b0b      	ldr	r3, [pc, #44]	; (1c2c0 <operateOnStableLine+0x140>)
   1c294:	715a      	strb	r2, [r3, #5]
}
   1c296:	46c0      	nop			; (mov r8, r8)
   1c298:	46bd      	mov	sp, r7
   1c29a:	b003      	add	sp, #12
   1c29c:	bd90      	pop	{r4, r7, pc}
   1c29e:	46c0      	nop			; (mov r8, r8)
   1c2a0:	20000a11 	.word	0x20000a11
   1c2a4:	0001c16d 	.word	0x0001c16d
   1c2a8:	20000854 	.word	0x20000854
   1c2ac:	0001bbbd 	.word	0x0001bbbd
   1c2b0:	00014b65 	.word	0x00014b65
   1c2b4:	0001a075 	.word	0x0001a075
   1c2b8:	0001bf55 	.word	0x0001bf55
   1c2bc:	00014c4d 	.word	0x00014c4d
   1c2c0:	20000918 	.word	0x20000918
   1c2c4:	2000092b 	.word	0x2000092b

0001c2c8 <waitStableLineOver>:

bool waitStableLineOver(void)
{
   1c2c8:	b580      	push	{r7, lr}
   1c2ca:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
   1c2cc:	4b0d      	ldr	r3, [pc, #52]	; (1c304 <waitStableLineOver+0x3c>)
   1c2ce:	781b      	ldrb	r3, [r3, #0]
   1c2d0:	2b00      	cmp	r3, #0
   1c2d2:	d00e      	beq.n	1c2f2 <waitStableLineOver+0x2a>
   1c2d4:	4b0c      	ldr	r3, [pc, #48]	; (1c308 <waitStableLineOver+0x40>)
   1c2d6:	4798      	blx	r3
   1c2d8:	0002      	movs	r2, r0
   1c2da:	4b0c      	ldr	r3, [pc, #48]	; (1c30c <waitStableLineOver+0x44>)
   1c2dc:	681b      	ldr	r3, [r3, #0]
   1c2de:	1ad3      	subs	r3, r2, r3
   1c2e0:	4a0b      	ldr	r2, [pc, #44]	; (1c310 <waitStableLineOver+0x48>)
   1c2e2:	7812      	ldrb	r2, [r2, #0]
   1c2e4:	0011      	movs	r1, r2
   1c2e6:	2264      	movs	r2, #100	; 0x64
   1c2e8:	434a      	muls	r2, r1
   1c2ea:	4293      	cmp	r3, r2
   1c2ec:	d301      	bcc.n	1c2f2 <waitStableLineOver+0x2a>
   1c2ee:	2301      	movs	r3, #1
   1c2f0:	e000      	b.n	1c2f4 <waitStableLineOver+0x2c>
   1c2f2:	2300      	movs	r3, #0
   1c2f4:	1c1a      	adds	r2, r3, #0
   1c2f6:	2301      	movs	r3, #1
   1c2f8:	4013      	ands	r3, r2
   1c2fa:	b2db      	uxtb	r3, r3
}
   1c2fc:	0018      	movs	r0, r3
   1c2fe:	46bd      	mov	sp, r7
   1c300:	bd80      	pop	{r7, pc}
   1c302:	46c0      	nop			; (mov r8, r8)
   1c304:	20000a11 	.word	0x20000a11
   1c308:	00020dad 	.word	0x00020dad
   1c30c:	200009d0 	.word	0x200009d0
   1c310:	200009e1 	.word	0x200009e1

0001c314 <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
   1c314:	b580      	push	{r7, lr}
   1c316:	b082      	sub	sp, #8
   1c318:	af00      	add	r7, sp, #0
   1c31a:	0002      	movs	r2, r0
   1c31c:	1dfb      	adds	r3, r7, #7
   1c31e:	701a      	strb	r2, [r3, #0]
   1c320:	1dbb      	adds	r3, r7, #6
   1c322:	1c0a      	adds	r2, r1, #0
   1c324:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
   1c326:	4b5f      	ldr	r3, [pc, #380]	; (1c4a4 <startMotor+0x190>)
   1c328:	2200      	movs	r2, #0
   1c32a:	701a      	strb	r2, [r3, #0]

	//if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
	//((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
	//((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
	
	if (forcedStart || 																														//AC Phase is Presnet
   1c32c:	1dbb      	adds	r3, r7, #6
   1c32e:	781b      	ldrb	r3, [r3, #0]
   1c330:	2b00      	cmp	r3, #0
   1c332:	d122      	bne.n	1c37a <startMotor+0x66>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1c334:	4b5c      	ldr	r3, [pc, #368]	; (1c4a8 <startMotor+0x194>)
   1c336:	4798      	blx	r3
   1c338:	0003      	movs	r3, r0
	if (forcedStart || 																														//AC Phase is Presnet
   1c33a:	2b03      	cmp	r3, #3
   1c33c:	d00c      	beq.n	1c358 <startMotor+0x44>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1c33e:	4b5a      	ldr	r3, [pc, #360]	; (1c4a8 <startMotor+0x194>)
   1c340:	4798      	blx	r3
   1c342:	0003      	movs	r3, r0
   1c344:	2b02      	cmp	r3, #2
   1c346:	d000      	beq.n	1c34a <startMotor+0x36>
   1c348:	e097      	b.n	1c47a <startMotor+0x166>
   1c34a:	4b58      	ldr	r3, [pc, #352]	; (1c4ac <startMotor+0x198>)
   1c34c:	2220      	movs	r2, #32
   1c34e:	5c9b      	ldrb	r3, [r3, r2]
   1c350:	b2db      	uxtb	r3, r3
   1c352:	2b00      	cmp	r3, #0
   1c354:	d000      	beq.n	1c358 <startMotor+0x44>
   1c356:	e090      	b.n	1c47a <startMotor+0x166>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1c358:	4b54      	ldr	r3, [pc, #336]	; (1c4ac <startMotor+0x198>)
   1c35a:	2224      	movs	r2, #36	; 0x24
   1c35c:	5c9b      	ldrb	r3, [r3, r2]
   1c35e:	b2db      	uxtb	r3, r3
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1c360:	2b00      	cmp	r3, #0
   1c362:	d003      	beq.n	1c36c <startMotor+0x58>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1c364:	4b52      	ldr	r3, [pc, #328]	; (1c4b0 <startMotor+0x19c>)
   1c366:	4798      	blx	r3
   1c368:	1e03      	subs	r3, r0, #0
   1c36a:	d106      	bne.n	1c37a <startMotor+0x66>
   1c36c:	4b4f      	ldr	r3, [pc, #316]	; (1c4ac <startMotor+0x198>)
   1c36e:	2224      	movs	r2, #36	; 0x24
   1c370:	5c9b      	ldrb	r3, [r3, r2]
   1c372:	b2db      	uxtb	r3, r3
   1c374:	2b00      	cmp	r3, #0
   1c376:	d000      	beq.n	1c37a <startMotor+0x66>
   1c378:	e07f      	b.n	1c47a <startMotor+0x166>
	{
		if (!getMotorState())
   1c37a:	4b4e      	ldr	r3, [pc, #312]	; (1c4b4 <startMotor+0x1a0>)
   1c37c:	4798      	blx	r3
   1c37e:	0003      	movs	r3, r0
   1c380:	001a      	movs	r2, r3
   1c382:	2301      	movs	r3, #1
   1c384:	4053      	eors	r3, r2
   1c386:	b2db      	uxtb	r3, r3
   1c388:	2b00      	cmp	r3, #0
   1c38a:	d100      	bne.n	1c38e <startMotor+0x7a>
   1c38c:	e06d      	b.n	1c46a <startMotor+0x156>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
   1c38e:	4b4a      	ldr	r3, [pc, #296]	; (1c4b8 <startMotor+0x1a4>)
   1c390:	795b      	ldrb	r3, [r3, #5]
   1c392:	2b00      	cmp	r3, #0
   1c394:	d036      	beq.n	1c404 <startMotor+0xf0>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
   1c396:	4b45      	ldr	r3, [pc, #276]	; (1c4ac <startMotor+0x198>)
   1c398:	7fdb      	ldrb	r3, [r3, #31]
   1c39a:	b2db      	uxtb	r3, r3
   1c39c:	2b00      	cmp	r3, #0
   1c39e:	d113      	bne.n	1c3c8 <startMotor+0xb4>
   1c3a0:	4b46      	ldr	r3, [pc, #280]	; (1c4bc <startMotor+0x1a8>)
   1c3a2:	4798      	blx	r3
   1c3a4:	1e03      	subs	r3, r0, #0
   1c3a6:	d10f      	bne.n	1c3c8 <startMotor+0xb4>
				{
					if (commanded)
   1c3a8:	1dfb      	adds	r3, r7, #7
   1c3aa:	781b      	ldrb	r3, [r3, #0]
   1c3ac:	2b00      	cmp	r3, #0
   1c3ae:	d003      	beq.n	1c3b8 <startMotor+0xa4>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
   1c3b0:	2054      	movs	r0, #84	; 0x54
   1c3b2:	4b43      	ldr	r3, [pc, #268]	; (1c4c0 <startMotor+0x1ac>)
   1c3b4:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
   1c3b6:	e071      	b.n	1c49c <startMotor+0x188>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1c3b8:	204e      	movs	r0, #78	; 0x4e
   1c3ba:	4b42      	ldr	r3, [pc, #264]	; (1c4c4 <startMotor+0x1b0>)
   1c3bc:	4798      	blx	r3
   1c3be:	0003      	movs	r3, r0
   1c3c0:	001a      	movs	r2, r3
   1c3c2:	4b41      	ldr	r3, [pc, #260]	; (1c4c8 <startMotor+0x1b4>)
   1c3c4:	701a      	strb	r2, [r3, #0]
					return;
   1c3c6:	e069      	b.n	1c49c <startMotor+0x188>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
   1c3c8:	4b3b      	ldr	r3, [pc, #236]	; (1c4b8 <startMotor+0x1a4>)
   1c3ca:	791b      	ldrb	r3, [r3, #4]
   1c3cc:	2b00      	cmp	r3, #0
   1c3ce:	d019      	beq.n	1c404 <startMotor+0xf0>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
   1c3d0:	4b36      	ldr	r3, [pc, #216]	; (1c4ac <startMotor+0x198>)
   1c3d2:	7fdb      	ldrb	r3, [r3, #31]
   1c3d4:	b2db      	uxtb	r3, r3
   1c3d6:	2b00      	cmp	r3, #0
   1c3d8:	d114      	bne.n	1c404 <startMotor+0xf0>
   1c3da:	4b3c      	ldr	r3, [pc, #240]	; (1c4cc <startMotor+0x1b8>)
   1c3dc:	4798      	blx	r3
   1c3de:	0003      	movs	r3, r0
   1c3e0:	2b02      	cmp	r3, #2
   1c3e2:	d10f      	bne.n	1c404 <startMotor+0xf0>
					{
						if(commanded)
   1c3e4:	1dfb      	adds	r3, r7, #7
   1c3e6:	781b      	ldrb	r3, [r3, #0]
   1c3e8:	2b00      	cmp	r3, #0
   1c3ea:	d003      	beq.n	1c3f4 <startMotor+0xe0>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
   1c3ec:	2056      	movs	r0, #86	; 0x56
   1c3ee:	4b34      	ldr	r3, [pc, #208]	; (1c4c0 <startMotor+0x1ac>)
   1c3f0:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
   1c3f2:	e053      	b.n	1c49c <startMotor+0x188>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
   1c3f4:	2056      	movs	r0, #86	; 0x56
   1c3f6:	4b33      	ldr	r3, [pc, #204]	; (1c4c4 <startMotor+0x1b0>)
   1c3f8:	4798      	blx	r3
   1c3fa:	0003      	movs	r3, r0
   1c3fc:	001a      	movs	r2, r3
   1c3fe:	4b32      	ldr	r3, [pc, #200]	; (1c4c8 <startMotor+0x1b4>)
   1c400:	745a      	strb	r2, [r3, #17]
						return;
   1c402:	e04b      	b.n	1c49c <startMotor+0x188>
					}
				}
			}

			STOP_RELAY_ON;
   1c404:	2101      	movs	r1, #1
   1c406:	202c      	movs	r0, #44	; 0x2c
   1c408:	4b31      	ldr	r3, [pc, #196]	; (1c4d0 <startMotor+0x1bc>)
   1c40a:	4798      	blx	r3
			START_RELAY_ON;
   1c40c:	2101      	movs	r1, #1
   1c40e:	202d      	movs	r0, #45	; 0x2d
   1c410:	4b2f      	ldr	r3, [pc, #188]	; (1c4d0 <startMotor+0x1bc>)
   1c412:	4798      	blx	r3
			stopMotorCommandGiven=false;
   1c414:	4b2f      	ldr	r3, [pc, #188]	; (1c4d4 <startMotor+0x1c0>)
   1c416:	2200      	movs	r2, #0
   1c418:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
   1c41a:	4b2f      	ldr	r3, [pc, #188]	; (1c4d8 <startMotor+0x1c4>)
   1c41c:	4798      	blx	r3
   1c41e:	0002      	movs	r2, r0
   1c420:	4b2e      	ldr	r3, [pc, #184]	; (1c4dc <startMotor+0x1c8>)
   1c422:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
   1c424:	4b2e      	ldr	r3, [pc, #184]	; (1c4e0 <startMotor+0x1cc>)
   1c426:	2201      	movs	r2, #1
   1c428:	701a      	strb	r2, [r3, #0]

			if(user_settings_parameter_struct.motorVoltageBypass==MOTOR_VOLTAGE_BYPASS_ON)
   1c42a:	4b20      	ldr	r3, [pc, #128]	; (1c4ac <startMotor+0x198>)
   1c42c:	2227      	movs	r2, #39	; 0x27
   1c42e:	5c9b      	ldrb	r3, [r3, r2]
   1c430:	b2db      	uxtb	r3, r3
   1c432:	2b01      	cmp	r3, #1
   1c434:	d107      	bne.n	1c446 <startMotor+0x132>
			{
				motorRelatedVoltageBypassOn=true;
   1c436:	4b2b      	ldr	r3, [pc, #172]	; (1c4e4 <startMotor+0x1d0>)
   1c438:	2201      	movs	r2, #1
   1c43a:	701a      	strb	r2, [r3, #0]
				motorVoltageBypassTimerTime=xTaskGetTickCount();
   1c43c:	4b26      	ldr	r3, [pc, #152]	; (1c4d8 <startMotor+0x1c4>)
   1c43e:	4798      	blx	r3
   1c440:	0002      	movs	r2, r0
   1c442:	4b29      	ldr	r3, [pc, #164]	; (1c4e8 <startMotor+0x1d4>)
   1c444:	601a      	str	r2, [r3, #0]
			}

			setMotorState(true);
   1c446:	2001      	movs	r0, #1
   1c448:	4b28      	ldr	r3, [pc, #160]	; (1c4ec <startMotor+0x1d8>)
   1c44a:	4798      	blx	r3

			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c44c:	4b1a      	ldr	r3, [pc, #104]	; (1c4b8 <startMotor+0x1a4>)
   1c44e:	785b      	ldrb	r3, [r3, #1]
   1c450:	2b00      	cmp	r3, #0
   1c452:	d005      	beq.n	1c460 <startMotor+0x14c>
			{
				enableCurrentBuffer=false;
   1c454:	4b26      	ldr	r3, [pc, #152]	; (1c4f0 <startMotor+0x1dc>)
   1c456:	2200      	movs	r2, #0
   1c458:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
   1c45a:	4b26      	ldr	r3, [pc, #152]	; (1c4f4 <startMotor+0x1e0>)
   1c45c:	2200      	movs	r2, #0
   1c45e:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
   1c460:	4b25      	ldr	r3, [pc, #148]	; (1c4f8 <startMotor+0x1e4>)
   1c462:	1dfa      	adds	r2, r7, #7
   1c464:	7812      	ldrb	r2, [r2, #0]
   1c466:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
   1c468:	e017      	b.n	1c49a <startMotor+0x186>
		}
		else
		{
			if (commanded)
   1c46a:	1dfb      	adds	r3, r7, #7
   1c46c:	781b      	ldrb	r3, [r3, #0]
   1c46e:	2b00      	cmp	r3, #0
   1c470:	d013      	beq.n	1c49a <startMotor+0x186>
			{
				setMotorMGRResponse('+');		//motor is already on
   1c472:	202b      	movs	r0, #43	; 0x2b
   1c474:	4b12      	ldr	r3, [pc, #72]	; (1c4c0 <startMotor+0x1ac>)
   1c476:	4798      	blx	r3
		if (!getMotorState())
   1c478:	e00f      	b.n	1c49a <startMotor+0x186>
			}
		}
	}
	else
	{
		if (commanded)
   1c47a:	1dfb      	adds	r3, r7, #7
   1c47c:	781b      	ldrb	r3, [r3, #0]
   1c47e:	2b00      	cmp	r3, #0
   1c480:	d003      	beq.n	1c48a <startMotor+0x176>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
   1c482:	204e      	movs	r0, #78	; 0x4e
   1c484:	4b0e      	ldr	r3, [pc, #56]	; (1c4c0 <startMotor+0x1ac>)
   1c486:	4798      	blx	r3
   1c488:	e008      	b.n	1c49c <startMotor+0x188>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1c48a:	204e      	movs	r0, #78	; 0x4e
   1c48c:	4b0d      	ldr	r3, [pc, #52]	; (1c4c4 <startMotor+0x1b0>)
   1c48e:	4798      	blx	r3
   1c490:	0003      	movs	r3, r0
   1c492:	001a      	movs	r2, r3
   1c494:	4b0c      	ldr	r3, [pc, #48]	; (1c4c8 <startMotor+0x1b4>)
   1c496:	701a      	strb	r2, [r3, #0]
   1c498:	e000      	b.n	1c49c <startMotor+0x188>
		if (!getMotorState())
   1c49a:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1c49c:	46bd      	mov	sp, r7
   1c49e:	b002      	add	sp, #8
   1c4a0:	bd80      	pop	{r7, pc}
   1c4a2:	46c0      	nop			; (mov r8, r8)
   1c4a4:	2000099a 	.word	0x2000099a
   1c4a8:	0001bb89 	.word	0x0001bb89
   1c4ac:	20000854 	.word	0x20000854
   1c4b0:	0001bbbd 	.word	0x0001bbbd
   1c4b4:	0001bbf1 	.word	0x0001bbf1
   1c4b8:	2000082c 	.word	0x2000082c
   1c4bc:	0001a2d5 	.word	0x0001a2d5
   1c4c0:	00014e2d 	.word	0x00014e2d
   1c4c4:	00014c4d 	.word	0x00014c4d
   1c4c8:	20000918 	.word	0x20000918
   1c4cc:	0001a1a5 	.word	0x0001a1a5
   1c4d0:	0001a075 	.word	0x0001a075
   1c4d4:	20000a64 	.word	0x20000a64
   1c4d8:	00020dad 	.word	0x00020dad
   1c4dc:	20000994 	.word	0x20000994
   1c4e0:	20000999 	.word	0x20000999
   1c4e4:	20000973 	.word	0x20000973
   1c4e8:	20000984 	.word	0x20000984
   1c4ec:	0001bc05 	.word	0x0001bc05
   1c4f0:	20000960 	.word	0x20000960
   1c4f4:	2000097e 	.word	0x2000097e
   1c4f8:	20000914 	.word	0x20000914

0001c4fc <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
   1c4fc:	b590      	push	{r4, r7, lr}
   1c4fe:	b083      	sub	sp, #12
   1c500:	af00      	add	r7, sp, #0
   1c502:	0004      	movs	r4, r0
   1c504:	0008      	movs	r0, r1
   1c506:	0011      	movs	r1, r2
   1c508:	1dfb      	adds	r3, r7, #7
   1c50a:	1c22      	adds	r2, r4, #0
   1c50c:	701a      	strb	r2, [r3, #0]
   1c50e:	1dbb      	adds	r3, r7, #6
   1c510:	1c02      	adds	r2, r0, #0
   1c512:	701a      	strb	r2, [r3, #0]
   1c514:	1d7b      	adds	r3, r7, #5
   1c516:	1c0a      	adds	r2, r1, #0
   1c518:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
   1c51a:	1dbb      	adds	r3, r7, #6
   1c51c:	781b      	ldrb	r3, [r3, #0]
   1c51e:	2b00      	cmp	r3, #0
   1c520:	d103      	bne.n	1c52a <stopMotor+0x2e>
   1c522:	4b22      	ldr	r3, [pc, #136]	; (1c5ac <stopMotor+0xb0>)
   1c524:	4798      	blx	r3
   1c526:	1e03      	subs	r3, r0, #0
   1c528:	d033      	beq.n	1c592 <stopMotor+0x96>
	{
		singlePhasingTimerOn = false;
   1c52a:	4b21      	ldr	r3, [pc, #132]	; (1c5b0 <stopMotor+0xb4>)
   1c52c:	2200      	movs	r2, #0
   1c52e:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1c530:	4b20      	ldr	r3, [pc, #128]	; (1c5b4 <stopMotor+0xb8>)
   1c532:	2225      	movs	r2, #37	; 0x25
   1c534:	5c9b      	ldrb	r3, [r3, r2]
   1c536:	b2db      	uxtb	r3, r3
   1c538:	2b01      	cmp	r3, #1
   1c53a:	d105      	bne.n	1c548 <stopMotor+0x4c>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1c53c:	4b1e      	ldr	r3, [pc, #120]	; (1c5b8 <stopMotor+0xbc>)
   1c53e:	8a9b      	ldrh	r3, [r3, #20]
   1c540:	b29b      	uxth	r3, r3
   1c542:	b2da      	uxtb	r2, r3
   1c544:	4b1d      	ldr	r3, [pc, #116]	; (1c5bc <stopMotor+0xc0>)
   1c546:	701a      	strb	r2, [r3, #0]
		}
		motorRelatedVoltageBypassOn=false;
   1c548:	4b1d      	ldr	r3, [pc, #116]	; (1c5c0 <stopMotor+0xc4>)
   1c54a:	2200      	movs	r2, #0
   1c54c:	701a      	strb	r2, [r3, #0]
		STOP_RELAY_OFF;
   1c54e:	2100      	movs	r1, #0
   1c550:	202c      	movs	r0, #44	; 0x2c
   1c552:	4b1c      	ldr	r3, [pc, #112]	; (1c5c4 <stopMotor+0xc8>)
   1c554:	4798      	blx	r3
		stopMotorCommandGiven=true;
   1c556:	4b1c      	ldr	r3, [pc, #112]	; (1c5c8 <stopMotor+0xcc>)
   1c558:	2201      	movs	r2, #1
   1c55a:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
   1c55c:	4b1b      	ldr	r3, [pc, #108]	; (1c5cc <stopMotor+0xd0>)
   1c55e:	4798      	blx	r3
   1c560:	0002      	movs	r2, r0
   1c562:	4b1b      	ldr	r3, [pc, #108]	; (1c5d0 <stopMotor+0xd4>)
   1c564:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
   1c566:	4b1b      	ldr	r3, [pc, #108]	; (1c5d4 <stopMotor+0xd8>)
   1c568:	2201      	movs	r2, #1
   1c56a:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
   1c56c:	2000      	movs	r0, #0
   1c56e:	4b1a      	ldr	r3, [pc, #104]	; (1c5d8 <stopMotor+0xdc>)
   1c570:	4798      	blx	r3
		gotOffCommand = commanded;
   1c572:	4b1a      	ldr	r3, [pc, #104]	; (1c5dc <stopMotor+0xe0>)
   1c574:	1dfa      	adds	r2, r7, #7
   1c576:	7812      	ldrb	r2, [r2, #0]
   1c578:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
   1c57a:	4b19      	ldr	r3, [pc, #100]	; (1c5e0 <stopMotor+0xe4>)
   1c57c:	1d7a      	adds	r2, r7, #5
   1c57e:	7812      	ldrb	r2, [r2, #0]
   1c580:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c582:	4b18      	ldr	r3, [pc, #96]	; (1c5e4 <stopMotor+0xe8>)
   1c584:	785b      	ldrb	r3, [r3, #1]
   1c586:	2b00      	cmp	r3, #0
   1c588:	d00b      	beq.n	1c5a2 <stopMotor+0xa6>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
   1c58a:	4b17      	ldr	r3, [pc, #92]	; (1c5e8 <stopMotor+0xec>)
   1c58c:	2200      	movs	r2, #0
   1c58e:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c590:	e007      	b.n	1c5a2 <stopMotor+0xa6>
		}
	}
	else
	{
		if (commanded)
   1c592:	1dfb      	adds	r3, r7, #7
   1c594:	781b      	ldrb	r3, [r3, #0]
   1c596:	2b00      	cmp	r3, #0
   1c598:	d003      	beq.n	1c5a2 <stopMotor+0xa6>
		{
			setMotorMGRResponse('-');	//motor is already off
   1c59a:	202d      	movs	r0, #45	; 0x2d
   1c59c:	4b13      	ldr	r3, [pc, #76]	; (1c5ec <stopMotor+0xf0>)
   1c59e:	4798      	blx	r3
		}
	}
}
   1c5a0:	e7ff      	b.n	1c5a2 <stopMotor+0xa6>
   1c5a2:	46c0      	nop			; (mov r8, r8)
   1c5a4:	46bd      	mov	sp, r7
   1c5a6:	b003      	add	sp, #12
   1c5a8:	bd90      	pop	{r4, r7, pc}
   1c5aa:	46c0      	nop			; (mov r8, r8)
   1c5ac:	0001bbf1 	.word	0x0001bbf1
   1c5b0:	20000991 	.word	0x20000991
   1c5b4:	20000854 	.word	0x20000854
   1c5b8:	200008e8 	.word	0x200008e8
   1c5bc:	200009f8 	.word	0x200009f8
   1c5c0:	20000973 	.word	0x20000973
   1c5c4:	0001a075 	.word	0x0001a075
   1c5c8:	20000a64 	.word	0x20000a64
   1c5cc:	00020dad 	.word	0x00020dad
   1c5d0:	200009ac 	.word	0x200009ac
   1c5d4:	20000988 	.word	0x20000988
   1c5d8:	0001bc05 	.word	0x0001bc05
   1c5dc:	20000a10 	.word	0x20000a10
   1c5e0:	200009a8 	.word	0x200009a8
   1c5e4:	2000082c 	.word	0x2000082c
   1c5e8:	2000097e 	.word	0x2000097e
   1c5ec:	00014e2d 	.word	0x00014e2d

0001c5f0 <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
   1c5f0:	b580      	push	{r7, lr}
   1c5f2:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - tempStartTimer) >= ((uint32_t)user_settings_parameter_struct.autoStartTimeAddress * 1000L));
   1c5f4:	4b09      	ldr	r3, [pc, #36]	; (1c61c <startMotorTimerOver+0x2c>)
   1c5f6:	4798      	blx	r3
   1c5f8:	0002      	movs	r2, r0
   1c5fa:	4b09      	ldr	r3, [pc, #36]	; (1c620 <startMotorTimerOver+0x30>)
   1c5fc:	681b      	ldr	r3, [r3, #0]
   1c5fe:	1ad1      	subs	r1, r2, r3
   1c600:	4b08      	ldr	r3, [pc, #32]	; (1c624 <startMotorTimerOver+0x34>)
   1c602:	885b      	ldrh	r3, [r3, #2]
   1c604:	b29b      	uxth	r3, r3
   1c606:	001a      	movs	r2, r3
   1c608:	23fa      	movs	r3, #250	; 0xfa
   1c60a:	009b      	lsls	r3, r3, #2
   1c60c:	435a      	muls	r2, r3
   1c60e:	2300      	movs	r3, #0
   1c610:	4291      	cmp	r1, r2
   1c612:	415b      	adcs	r3, r3
   1c614:	b2db      	uxtb	r3, r3
}
   1c616:	0018      	movs	r0, r3
   1c618:	46bd      	mov	sp, r7
   1c61a:	bd80      	pop	{r7, pc}
   1c61c:	00020dad 	.word	0x00020dad
   1c620:	200009a4 	.word	0x200009a4
   1c624:	20000854 	.word	0x20000854

0001c628 <unknownMotorOff>:

void unknownMotorOff(void)
{
   1c628:	b580      	push	{r7, lr}
   1c62a:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
   1c62c:	2200      	movs	r2, #0
   1c62e:	2101      	movs	r1, #1
   1c630:	2000      	movs	r0, #0
   1c632:	4b06      	ldr	r3, [pc, #24]	; (1c64c <unknownMotorOff+0x24>)
   1c634:	4798      	blx	r3
	simEventTemp[2] = registerEvent('_');
   1c636:	205f      	movs	r0, #95	; 0x5f
   1c638:	4b05      	ldr	r3, [pc, #20]	; (1c650 <unknownMotorOff+0x28>)
   1c63a:	4798      	blx	r3
   1c63c:	0003      	movs	r3, r0
   1c63e:	001a      	movs	r2, r3
   1c640:	4b04      	ldr	r3, [pc, #16]	; (1c654 <unknownMotorOff+0x2c>)
   1c642:	709a      	strb	r2, [r3, #2]
}
   1c644:	46c0      	nop			; (mov r8, r8)
   1c646:	46bd      	mov	sp, r7
   1c648:	bd80      	pop	{r7, pc}
   1c64a:	46c0      	nop			; (mov r8, r8)
   1c64c:	0001c4fd 	.word	0x0001c4fd
   1c650:	00014c4d 	.word	0x00014c4d
   1c654:	20000918 	.word	0x20000918

0001c658 <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
   1c658:	b580      	push	{r7, lr}
   1c65a:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > (((uint16_t)singlePhasingTime) * 100));
   1c65c:	4b0d      	ldr	r3, [pc, #52]	; (1c694 <singlePhasingTimerOver+0x3c>)
   1c65e:	781b      	ldrb	r3, [r3, #0]
   1c660:	2b00      	cmp	r3, #0
   1c662:	d00e      	beq.n	1c682 <singlePhasingTimerOver+0x2a>
   1c664:	4b0c      	ldr	r3, [pc, #48]	; (1c698 <singlePhasingTimerOver+0x40>)
   1c666:	4798      	blx	r3
   1c668:	0002      	movs	r2, r0
   1c66a:	4b0c      	ldr	r3, [pc, #48]	; (1c69c <singlePhasingTimerOver+0x44>)
   1c66c:	681b      	ldr	r3, [r3, #0]
   1c66e:	1ad3      	subs	r3, r2, r3
   1c670:	4a0b      	ldr	r2, [pc, #44]	; (1c6a0 <singlePhasingTimerOver+0x48>)
   1c672:	7812      	ldrb	r2, [r2, #0]
   1c674:	0011      	movs	r1, r2
   1c676:	2264      	movs	r2, #100	; 0x64
   1c678:	434a      	muls	r2, r1
   1c67a:	4293      	cmp	r3, r2
   1c67c:	d901      	bls.n	1c682 <singlePhasingTimerOver+0x2a>
   1c67e:	2301      	movs	r3, #1
   1c680:	e000      	b.n	1c684 <singlePhasingTimerOver+0x2c>
   1c682:	2300      	movs	r3, #0
   1c684:	1c1a      	adds	r2, r3, #0
   1c686:	2301      	movs	r3, #1
   1c688:	4013      	ands	r3, r2
   1c68a:	b2db      	uxtb	r3, r3
}
   1c68c:	0018      	movs	r0, r3
   1c68e:	46bd      	mov	sp, r7
   1c690:	bd80      	pop	{r7, pc}
   1c692:	46c0      	nop			; (mov r8, r8)
   1c694:	20000991 	.word	0x20000991
   1c698:	00020dad 	.word	0x00020dad
   1c69c:	20000978 	.word	0x20000978
   1c6a0:	20000970 	.word	0x20000970

0001c6a4 <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
   1c6a4:	b580      	push	{r7, lr}
   1c6a6:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
   1c6a8:	2101      	movs	r1, #1
   1c6aa:	2027      	movs	r0, #39	; 0x27
   1c6ac:	4b08      	ldr	r3, [pc, #32]	; (1c6d0 <operateOnSinglePhasing+0x2c>)
   1c6ae:	4798      	blx	r3
	stopMotor(false,true,false);
   1c6b0:	2200      	movs	r2, #0
   1c6b2:	2101      	movs	r1, #1
   1c6b4:	2000      	movs	r0, #0
   1c6b6:	4b07      	ldr	r3, [pc, #28]	; (1c6d4 <operateOnSinglePhasing+0x30>)
   1c6b8:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
   1c6ba:	2046      	movs	r0, #70	; 0x46
   1c6bc:	4b06      	ldr	r3, [pc, #24]	; (1c6d8 <operateOnSinglePhasing+0x34>)
   1c6be:	4798      	blx	r3
   1c6c0:	0003      	movs	r3, r0
   1c6c2:	001a      	movs	r2, r3
   1c6c4:	4b05      	ldr	r3, [pc, #20]	; (1c6dc <operateOnSinglePhasing+0x38>)
   1c6c6:	70da      	strb	r2, [r3, #3]
}
   1c6c8:	46c0      	nop			; (mov r8, r8)
   1c6ca:	46bd      	mov	sp, r7
   1c6cc:	bd80      	pop	{r7, pc}
   1c6ce:	46c0      	nop			; (mov r8, r8)
   1c6d0:	0001a075 	.word	0x0001a075
   1c6d4:	0001c4fd 	.word	0x0001c4fd
   1c6d8:	00014c4d 	.word	0x00014c4d
   1c6dc:	20000918 	.word	0x20000918

0001c6e0 <terminateStopRelay>:

void terminateStopRelay(void)
{
   1c6e0:	b580      	push	{r7, lr}
   1c6e2:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
   1c6e4:	4b28      	ldr	r3, [pc, #160]	; (1c788 <terminateStopRelay+0xa8>)
   1c6e6:	781b      	ldrb	r3, [r3, #0]
   1c6e8:	2b00      	cmp	r3, #0
   1c6ea:	d04a      	beq.n	1c782 <terminateStopRelay+0xa2>
   1c6ec:	4b27      	ldr	r3, [pc, #156]	; (1c78c <terminateStopRelay+0xac>)
   1c6ee:	4798      	blx	r3
   1c6f0:	0002      	movs	r2, r0
   1c6f2:	4b27      	ldr	r3, [pc, #156]	; (1c790 <terminateStopRelay+0xb0>)
   1c6f4:	681b      	ldr	r3, [r3, #0]
   1c6f6:	1ad3      	subs	r3, r2, r3
   1c6f8:	4a26      	ldr	r2, [pc, #152]	; (1c794 <terminateStopRelay+0xb4>)
   1c6fa:	7812      	ldrb	r2, [r2, #0]
   1c6fc:	0011      	movs	r1, r2
   1c6fe:	2264      	movs	r2, #100	; 0x64
   1c700:	434a      	muls	r2, r1
   1c702:	4293      	cmp	r3, r2
   1c704:	d93d      	bls.n	1c782 <terminateStopRelay+0xa2>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
   1c706:	4b20      	ldr	r3, [pc, #128]	; (1c788 <terminateStopRelay+0xa8>)
   1c708:	2200      	movs	r2, #0
   1c70a:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
   1c70c:	4b22      	ldr	r3, [pc, #136]	; (1c798 <terminateStopRelay+0xb8>)
   1c70e:	2201      	movs	r2, #1
   1c710:	701a      	strb	r2, [r3, #0]
		if(!getMotorState_from_pin())															//motor has turned off OR NOT
   1c712:	4b22      	ldr	r3, [pc, #136]	; (1c79c <terminateStopRelay+0xbc>)
   1c714:	4798      	blx	r3
   1c716:	0003      	movs	r3, r0
   1c718:	001a      	movs	r2, r3
   1c71a:	2301      	movs	r3, #1
   1c71c:	4053      	eors	r3, r2
   1c71e:	b2db      	uxtb	r3, r3
   1c720:	2b00      	cmp	r3, #0
   1c722:	d019      	beq.n	1c758 <terminateStopRelay+0x78>
		{
			if (gotOffCommand)
   1c724:	4b1e      	ldr	r3, [pc, #120]	; (1c7a0 <terminateStopRelay+0xc0>)
   1c726:	781b      	ldrb	r3, [r3, #0]
   1c728:	2b00      	cmp	r3, #0
   1c72a:	d006      	beq.n	1c73a <terminateStopRelay+0x5a>
			{
				gotOffCommand = false;
   1c72c:	4b1c      	ldr	r3, [pc, #112]	; (1c7a0 <terminateStopRelay+0xc0>)
   1c72e:	2200      	movs	r2, #0
   1c730:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
   1c732:	204f      	movs	r0, #79	; 0x4f
   1c734:	4b1b      	ldr	r3, [pc, #108]	; (1c7a4 <terminateStopRelay+0xc4>)
   1c736:	4798      	blx	r3
   1c738:	e020      	b.n	1c77c <terminateStopRelay+0x9c>
			}
			else if(offButtonPressed)
   1c73a:	4b1b      	ldr	r3, [pc, #108]	; (1c7a8 <terminateStopRelay+0xc8>)
   1c73c:	781b      	ldrb	r3, [r3, #0]
   1c73e:	2b00      	cmp	r3, #0
   1c740:	d01c      	beq.n	1c77c <terminateStopRelay+0x9c>
			{
				offButtonPressed=false;
   1c742:	4b19      	ldr	r3, [pc, #100]	; (1c7a8 <terminateStopRelay+0xc8>)
   1c744:	2200      	movs	r2, #0
   1c746:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
   1c748:	204f      	movs	r0, #79	; 0x4f
   1c74a:	4b18      	ldr	r3, [pc, #96]	; (1c7ac <terminateStopRelay+0xcc>)
   1c74c:	4798      	blx	r3
   1c74e:	0003      	movs	r3, r0
   1c750:	001a      	movs	r2, r3
   1c752:	4b17      	ldr	r3, [pc, #92]	; (1c7b0 <terminateStopRelay+0xd0>)
   1c754:	721a      	strb	r2, [r3, #8]
   1c756:	e011      	b.n	1c77c <terminateStopRelay+0x9c>
			}
		}
		else
		{
			if (gotOffCommand)
   1c758:	4b11      	ldr	r3, [pc, #68]	; (1c7a0 <terminateStopRelay+0xc0>)
   1c75a:	781b      	ldrb	r3, [r3, #0]
   1c75c:	2b00      	cmp	r3, #0
   1c75e:	d006      	beq.n	1c76e <terminateStopRelay+0x8e>
			{
				gotOffCommand = false;
   1c760:	4b0f      	ldr	r3, [pc, #60]	; (1c7a0 <terminateStopRelay+0xc0>)
   1c762:	2200      	movs	r2, #0
   1c764:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
   1c766:	2050      	movs	r0, #80	; 0x50
   1c768:	4b0e      	ldr	r3, [pc, #56]	; (1c7a4 <terminateStopRelay+0xc4>)
   1c76a:	4798      	blx	r3
   1c76c:	e006      	b.n	1c77c <terminateStopRelay+0x9c>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
   1c76e:	2050      	movs	r0, #80	; 0x50
   1c770:	4b0e      	ldr	r3, [pc, #56]	; (1c7ac <terminateStopRelay+0xcc>)
   1c772:	4798      	blx	r3
   1c774:	0003      	movs	r3, r0
   1c776:	001a      	movs	r2, r3
   1c778:	4b0d      	ldr	r3, [pc, #52]	; (1c7b0 <terminateStopRelay+0xd0>)
   1c77a:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
   1c77c:	4b0a      	ldr	r3, [pc, #40]	; (1c7a8 <terminateStopRelay+0xc8>)
   1c77e:	2200      	movs	r2, #0
   1c780:	701a      	strb	r2, [r3, #0]
	}
}
   1c782:	46c0      	nop			; (mov r8, r8)
   1c784:	46bd      	mov	sp, r7
   1c786:	bd80      	pop	{r7, pc}
   1c788:	20000988 	.word	0x20000988
   1c78c:	00020dad 	.word	0x00020dad
   1c790:	200009ac 	.word	0x200009ac
   1c794:	20000a67 	.word	0x20000a67
   1c798:	20000a64 	.word	0x20000a64
   1c79c:	0001bc45 	.word	0x0001bc45
   1c7a0:	20000a10 	.word	0x20000a10
   1c7a4:	00014e2d 	.word	0x00014e2d
   1c7a8:	200009a8 	.word	0x200009a8
   1c7ac:	00014c4d 	.word	0x00014c4d
   1c7b0:	20000918 	.word	0x20000918

0001c7b4 <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
   1c7b4:	b580      	push	{r7, lr}
   1c7b6:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
   1c7b8:	4b14      	ldr	r3, [pc, #80]	; (1c80c <terminateStarDeltaTimer+0x58>)
   1c7ba:	781b      	ldrb	r3, [r3, #0]
   1c7bc:	2b00      	cmp	r3, #0
   1c7be:	d021      	beq.n	1c804 <terminateStarDeltaTimer+0x50>
   1c7c0:	4b13      	ldr	r3, [pc, #76]	; (1c810 <terminateStarDeltaTimer+0x5c>)
   1c7c2:	4798      	blx	r3
   1c7c4:	0002      	movs	r2, r0
   1c7c6:	4b13      	ldr	r3, [pc, #76]	; (1c814 <terminateStarDeltaTimer+0x60>)
   1c7c8:	681b      	ldr	r3, [r3, #0]
   1c7ca:	1ad2      	subs	r2, r2, r3
   1c7cc:	4b12      	ldr	r3, [pc, #72]	; (1c818 <terminateStarDeltaTimer+0x64>)
   1c7ce:	88db      	ldrh	r3, [r3, #6]
   1c7d0:	b29b      	uxth	r3, r3
   1c7d2:	0019      	movs	r1, r3
   1c7d4:	23fa      	movs	r3, #250	; 0xfa
   1c7d6:	009b      	lsls	r3, r3, #2
   1c7d8:	434b      	muls	r3, r1
   1c7da:	429a      	cmp	r2, r3
   1c7dc:	d912      	bls.n	1c804 <terminateStarDeltaTimer+0x50>
	{
		START_RELAY_OFF;
   1c7de:	2100      	movs	r1, #0
   1c7e0:	202d      	movs	r0, #45	; 0x2d
   1c7e2:	4b0e      	ldr	r3, [pc, #56]	; (1c81c <terminateStarDeltaTimer+0x68>)
   1c7e4:	4798      	blx	r3
		starDeltaTimerOn=false;
   1c7e6:	4b09      	ldr	r3, [pc, #36]	; (1c80c <terminateStarDeltaTimer+0x58>)
   1c7e8:	2200      	movs	r2, #0
   1c7ea:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c7ec:	4b0c      	ldr	r3, [pc, #48]	; (1c820 <terminateStarDeltaTimer+0x6c>)
   1c7ee:	785b      	ldrb	r3, [r3, #1]
   1c7f0:	2b00      	cmp	r3, #0
   1c7f2:	d007      	beq.n	1c804 <terminateStarDeltaTimer+0x50>
		{
			enableCurrentBuffer=true;
   1c7f4:	4b0b      	ldr	r3, [pc, #44]	; (1c824 <terminateStarDeltaTimer+0x70>)
   1c7f6:	2201      	movs	r2, #1
   1c7f8:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
   1c7fa:	4b05      	ldr	r3, [pc, #20]	; (1c810 <terminateStarDeltaTimer+0x5c>)
   1c7fc:	4798      	blx	r3
   1c7fe:	0002      	movs	r2, r0
   1c800:	4b04      	ldr	r3, [pc, #16]	; (1c814 <terminateStarDeltaTimer+0x60>)
   1c802:	601a      	str	r2, [r3, #0]
		}
	}
}
   1c804:	46c0      	nop			; (mov r8, r8)
   1c806:	46bd      	mov	sp, r7
   1c808:	bd80      	pop	{r7, pc}
   1c80a:	46c0      	nop			; (mov r8, r8)
   1c80c:	2000099b 	.word	0x2000099b
   1c810:	00020dad 	.word	0x00020dad
   1c814:	20000994 	.word	0x20000994
   1c818:	20000854 	.word	0x20000854
   1c81c:	0001a075 	.word	0x0001a075
   1c820:	2000082c 	.word	0x2000082c
   1c824:	20000960 	.word	0x20000960

0001c828 <terminateStartRelay>:

void terminateStartRelay(void)
{
   1c828:	b590      	push	{r4, r7, lr}
   1c82a:	b083      	sub	sp, #12
   1c82c:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
   1c82e:	4b37      	ldr	r3, [pc, #220]	; (1c90c <terminateStartRelay+0xe4>)
   1c830:	781b      	ldrb	r3, [r3, #0]
   1c832:	2b00      	cmp	r3, #0
   1c834:	d066      	beq.n	1c904 <terminateStartRelay+0xdc>
   1c836:	4b36      	ldr	r3, [pc, #216]	; (1c910 <terminateStartRelay+0xe8>)
   1c838:	4798      	blx	r3
   1c83a:	0002      	movs	r2, r0
   1c83c:	4b35      	ldr	r3, [pc, #212]	; (1c914 <terminateStartRelay+0xec>)
   1c83e:	681b      	ldr	r3, [r3, #0]
   1c840:	1ad3      	subs	r3, r2, r3
   1c842:	4a35      	ldr	r2, [pc, #212]	; (1c918 <terminateStartRelay+0xf0>)
   1c844:	7812      	ldrb	r2, [r2, #0]
   1c846:	0011      	movs	r1, r2
   1c848:	2264      	movs	r2, #100	; 0x64
   1c84a:	434a      	muls	r2, r1
   1c84c:	4293      	cmp	r3, r2
   1c84e:	d959      	bls.n	1c904 <terminateStartRelay+0xdc>
	{
		if((((uint32_t)user_settings_parameter_struct.starDeltaTimerAddress) * 1000L) <= (((uint32_t)startSequenceTimerTime)*100))
   1c850:	4b32      	ldr	r3, [pc, #200]	; (1c91c <terminateStartRelay+0xf4>)
   1c852:	88db      	ldrh	r3, [r3, #6]
   1c854:	b29b      	uxth	r3, r3
   1c856:	001a      	movs	r2, r3
   1c858:	23fa      	movs	r3, #250	; 0xfa
   1c85a:	009b      	lsls	r3, r3, #2
   1c85c:	435a      	muls	r2, r3
   1c85e:	4b2e      	ldr	r3, [pc, #184]	; (1c918 <terminateStartRelay+0xf0>)
   1c860:	781b      	ldrb	r3, [r3, #0]
   1c862:	0019      	movs	r1, r3
   1c864:	2364      	movs	r3, #100	; 0x64
   1c866:	434b      	muls	r3, r1
   1c868:	429a      	cmp	r2, r3
   1c86a:	d810      	bhi.n	1c88e <terminateStartRelay+0x66>
		{
			START_RELAY_OFF;
   1c86c:	2100      	movs	r1, #0
   1c86e:	202d      	movs	r0, #45	; 0x2d
   1c870:	4b2b      	ldr	r3, [pc, #172]	; (1c920 <terminateStartRelay+0xf8>)
   1c872:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
   1c874:	4b26      	ldr	r3, [pc, #152]	; (1c910 <terminateStartRelay+0xe8>)
   1c876:	4798      	blx	r3
   1c878:	0002      	movs	r2, r0
   1c87a:	4b26      	ldr	r3, [pc, #152]	; (1c914 <terminateStartRelay+0xec>)
   1c87c:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c87e:	4b29      	ldr	r3, [pc, #164]	; (1c924 <terminateStartRelay+0xfc>)
   1c880:	785b      	ldrb	r3, [r3, #1]
   1c882:	2b00      	cmp	r3, #0
   1c884:	d006      	beq.n	1c894 <terminateStartRelay+0x6c>
			{
				enableCurrentBuffer=true;
   1c886:	4b28      	ldr	r3, [pc, #160]	; (1c928 <terminateStartRelay+0x100>)
   1c888:	2201      	movs	r2, #1
   1c88a:	701a      	strb	r2, [r3, #0]
   1c88c:	e002      	b.n	1c894 <terminateStartRelay+0x6c>
			}
		}
		else
		{
			starDeltaTimerOn=true;
   1c88e:	4b27      	ldr	r3, [pc, #156]	; (1c92c <terminateStartRelay+0x104>)
   1c890:	2201      	movs	r2, #1
   1c892:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
   1c894:	4b1d      	ldr	r3, [pc, #116]	; (1c90c <terminateStartRelay+0xe4>)
   1c896:	2200      	movs	r2, #0
   1c898:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
   1c89a:	1dfc      	adds	r4, r7, #7
   1c89c:	4b24      	ldr	r3, [pc, #144]	; (1c930 <terminateStartRelay+0x108>)
   1c89e:	4798      	blx	r3
   1c8a0:	0003      	movs	r3, r0
   1c8a2:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
   1c8a4:	4b23      	ldr	r3, [pc, #140]	; (1c934 <terminateStartRelay+0x10c>)
   1c8a6:	781b      	ldrb	r3, [r3, #0]
   1c8a8:	2b00      	cmp	r3, #0
   1c8aa:	d013      	beq.n	1c8d4 <terminateStartRelay+0xac>
		{
			gotOnCommand = false;
   1c8ac:	4b21      	ldr	r3, [pc, #132]	; (1c934 <terminateStartRelay+0x10c>)
   1c8ae:	2200      	movs	r2, #0
   1c8b0:	701a      	strb	r2, [r3, #0]
			if (motor)
   1c8b2:	1dfb      	adds	r3, r7, #7
   1c8b4:	781b      	ldrb	r3, [r3, #0]
   1c8b6:	2b00      	cmp	r3, #0
   1c8b8:	d003      	beq.n	1c8c2 <terminateStartRelay+0x9a>
			{
				setMotorMGRResponse('S'); // motor has started
   1c8ba:	2053      	movs	r0, #83	; 0x53
   1c8bc:	4b1e      	ldr	r3, [pc, #120]	; (1c938 <terminateStartRelay+0x110>)
   1c8be:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
   1c8c0:	e020      	b.n	1c904 <terminateStartRelay+0xdc>
				stopMotor(false,true,false);
   1c8c2:	2200      	movs	r2, #0
   1c8c4:	2101      	movs	r1, #1
   1c8c6:	2000      	movs	r0, #0
   1c8c8:	4b1c      	ldr	r3, [pc, #112]	; (1c93c <terminateStartRelay+0x114>)
   1c8ca:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
   1c8cc:	204e      	movs	r0, #78	; 0x4e
   1c8ce:	4b1a      	ldr	r3, [pc, #104]	; (1c938 <terminateStartRelay+0x110>)
   1c8d0:	4798      	blx	r3
}
   1c8d2:	e017      	b.n	1c904 <terminateStartRelay+0xdc>
			if (motor)
   1c8d4:	1dfb      	adds	r3, r7, #7
   1c8d6:	781b      	ldrb	r3, [r3, #0]
   1c8d8:	2b00      	cmp	r3, #0
   1c8da:	d007      	beq.n	1c8ec <terminateStartRelay+0xc4>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
   1c8dc:	2053      	movs	r0, #83	; 0x53
   1c8de:	4b18      	ldr	r3, [pc, #96]	; (1c940 <terminateStartRelay+0x118>)
   1c8e0:	4798      	blx	r3
   1c8e2:	0003      	movs	r3, r0
   1c8e4:	001a      	movs	r2, r3
   1c8e6:	4b17      	ldr	r3, [pc, #92]	; (1c944 <terminateStartRelay+0x11c>)
   1c8e8:	71da      	strb	r2, [r3, #7]
}
   1c8ea:	e00b      	b.n	1c904 <terminateStartRelay+0xdc>
				stopMotor(false,true,false);
   1c8ec:	2200      	movs	r2, #0
   1c8ee:	2101      	movs	r1, #1
   1c8f0:	2000      	movs	r0, #0
   1c8f2:	4b12      	ldr	r3, [pc, #72]	; (1c93c <terminateStartRelay+0x114>)
   1c8f4:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1c8f6:	204e      	movs	r0, #78	; 0x4e
   1c8f8:	4b11      	ldr	r3, [pc, #68]	; (1c940 <terminateStartRelay+0x118>)
   1c8fa:	4798      	blx	r3
   1c8fc:	0003      	movs	r3, r0
   1c8fe:	001a      	movs	r2, r3
   1c900:	4b10      	ldr	r3, [pc, #64]	; (1c944 <terminateStartRelay+0x11c>)
   1c902:	701a      	strb	r2, [r3, #0]
}
   1c904:	46c0      	nop			; (mov r8, r8)
   1c906:	46bd      	mov	sp, r7
   1c908:	b003      	add	sp, #12
   1c90a:	bd90      	pop	{r4, r7, pc}
   1c90c:	20000999 	.word	0x20000999
   1c910:	00020dad 	.word	0x00020dad
   1c914:	20000994 	.word	0x20000994
   1c918:	20000a1c 	.word	0x20000a1c
   1c91c:	20000854 	.word	0x20000854
   1c920:	0001a075 	.word	0x0001a075
   1c924:	2000082c 	.word	0x2000082c
   1c928:	20000960 	.word	0x20000960
   1c92c:	2000099b 	.word	0x2000099b
   1c930:	0001bc45 	.word	0x0001bc45
   1c934:	20000914 	.word	0x20000914
   1c938:	00014e2d 	.word	0x00014e2d
   1c93c:	0001c4fd 	.word	0x0001c4fd
   1c940:	00014c4d 	.word	0x00014c4d
   1c944:	20000918 	.word	0x20000918

0001c948 <statusOnCall>:

void statusOnCall(void)
{
   1c948:	b590      	push	{r4, r7, lr}
   1c94a:	b083      	sub	sp, #12
   1c94c:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
   1c94e:	1dfb      	adds	r3, r7, #7
   1c950:	2200      	movs	r2, #0
   1c952:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
   1c954:	1dbc      	adds	r4, r7, #6
   1c956:	4b3b      	ldr	r3, [pc, #236]	; (1ca44 <statusOnCall+0xfc>)
   1c958:	4798      	blx	r3
   1c95a:	0003      	movs	r3, r0
   1c95c:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
   1c95e:	1dbb      	adds	r3, r7, #6
   1c960:	781b      	ldrb	r3, [r3, #0]
   1c962:	2b00      	cmp	r3, #0
   1c964:	d109      	bne.n	1c97a <statusOnCall+0x32>
	{
		status[index++]='L';
   1c966:	1dfb      	adds	r3, r7, #7
   1c968:	781b      	ldrb	r3, [r3, #0]
   1c96a:	1dfa      	adds	r2, r7, #7
   1c96c:	1c59      	adds	r1, r3, #1
   1c96e:	7011      	strb	r1, [r2, #0]
   1c970:	001a      	movs	r2, r3
   1c972:	003b      	movs	r3, r7
   1c974:	214c      	movs	r1, #76	; 0x4c
   1c976:	5499      	strb	r1, [r3, r2]
   1c978:	e03b      	b.n	1c9f2 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
   1c97a:	1dbb      	adds	r3, r7, #6
   1c97c:	781b      	ldrb	r3, [r3, #0]
   1c97e:	2b02      	cmp	r3, #2
   1c980:	d109      	bne.n	1c996 <statusOnCall+0x4e>
	{
		status[index++]='A';
   1c982:	1dfb      	adds	r3, r7, #7
   1c984:	781b      	ldrb	r3, [r3, #0]
   1c986:	1dfa      	adds	r2, r7, #7
   1c988:	1c59      	adds	r1, r3, #1
   1c98a:	7011      	strb	r1, [r2, #0]
   1c98c:	001a      	movs	r2, r3
   1c98e:	003b      	movs	r3, r7
   1c990:	2141      	movs	r1, #65	; 0x41
   1c992:	5499      	strb	r1, [r3, r2]
   1c994:	e02d      	b.n	1c9f2 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
   1c996:	1dbb      	adds	r3, r7, #6
   1c998:	781b      	ldrb	r3, [r3, #0]
   1c99a:	2b03      	cmp	r3, #3
   1c99c:	d129      	bne.n	1c9f2 <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
   1c99e:	1d7c      	adds	r4, r7, #5
   1c9a0:	4b29      	ldr	r3, [pc, #164]	; (1ca48 <statusOnCall+0x100>)
   1c9a2:	4798      	blx	r3
   1c9a4:	0003      	movs	r3, r0
   1c9a6:	7023      	strb	r3, [r4, #0]
		if (temp)
   1c9a8:	1d7b      	adds	r3, r7, #5
   1c9aa:	781b      	ldrb	r3, [r3, #0]
   1c9ac:	2b00      	cmp	r3, #0
   1c9ae:	d009      	beq.n	1c9c4 <statusOnCall+0x7c>
		{
			status[index++]='+';
   1c9b0:	1dfb      	adds	r3, r7, #7
   1c9b2:	781b      	ldrb	r3, [r3, #0]
   1c9b4:	1dfa      	adds	r2, r7, #7
   1c9b6:	1c59      	adds	r1, r3, #1
   1c9b8:	7011      	strb	r1, [r2, #0]
   1c9ba:	001a      	movs	r2, r3
   1c9bc:	003b      	movs	r3, r7
   1c9be:	212b      	movs	r1, #43	; 0x2b
   1c9c0:	5499      	strb	r1, [r3, r2]
   1c9c2:	e016      	b.n	1c9f2 <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
   1c9c4:	1dfb      	adds	r3, r7, #7
   1c9c6:	781b      	ldrb	r3, [r3, #0]
   1c9c8:	1dfa      	adds	r2, r7, #7
   1c9ca:	1c59      	adds	r1, r3, #1
   1c9cc:	7011      	strb	r1, [r2, #0]
   1c9ce:	001a      	movs	r2, r3
   1c9d0:	003b      	movs	r3, r7
   1c9d2:	215f      	movs	r1, #95	; 0x5f
   1c9d4:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
   1c9d6:	4b1d      	ldr	r3, [pc, #116]	; (1ca4c <statusOnCall+0x104>)
   1c9d8:	781b      	ldrb	r3, [r3, #0]
   1c9da:	b2db      	uxtb	r3, r3
   1c9dc:	2b02      	cmp	r3, #2
   1c9de:	d008      	beq.n	1c9f2 <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
   1c9e0:	1dfb      	adds	r3, r7, #7
   1c9e2:	781b      	ldrb	r3, [r3, #0]
   1c9e4:	1dfa      	adds	r2, r7, #7
   1c9e6:	1c59      	adds	r1, r3, #1
   1c9e8:	7011      	strb	r1, [r2, #0]
   1c9ea:	001a      	movs	r2, r3
   1c9ec:	003b      	movs	r3, r7
   1c9ee:	2141      	movs	r1, #65	; 0x41
   1c9f0:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
   1c9f2:	4b17      	ldr	r3, [pc, #92]	; (1ca50 <statusOnCall+0x108>)
   1c9f4:	785b      	ldrb	r3, [r3, #1]
   1c9f6:	b2db      	uxtb	r3, r3
   1c9f8:	2b00      	cmp	r3, #0
   1c9fa:	d009      	beq.n	1ca10 <statusOnCall+0xc8>
	{
		status[index++]=')';
   1c9fc:	1dfb      	adds	r3, r7, #7
   1c9fe:	781b      	ldrb	r3, [r3, #0]
   1ca00:	1dfa      	adds	r2, r7, #7
   1ca02:	1c59      	adds	r1, r3, #1
   1ca04:	7011      	strb	r1, [r2, #0]
   1ca06:	001a      	movs	r2, r3
   1ca08:	003b      	movs	r3, r7
   1ca0a:	2129      	movs	r1, #41	; 0x29
   1ca0c:	5499      	strb	r1, [r3, r2]
   1ca0e:	e008      	b.n	1ca22 <statusOnCall+0xda>
	}
	else
	{
		status[index++]='[';
   1ca10:	1dfb      	adds	r3, r7, #7
   1ca12:	781b      	ldrb	r3, [r3, #0]
   1ca14:	1dfa      	adds	r2, r7, #7
   1ca16:	1c59      	adds	r1, r3, #1
   1ca18:	7011      	strb	r1, [r2, #0]
   1ca1a:	001a      	movs	r2, r3
   1ca1c:	003b      	movs	r3, r7
   1ca1e:	215b      	movs	r1, #91	; 0x5b
   1ca20:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
   1ca22:	1dfb      	adds	r3, r7, #7
   1ca24:	781b      	ldrb	r3, [r3, #0]
   1ca26:	1dfa      	adds	r2, r7, #7
   1ca28:	1c59      	adds	r1, r3, #1
   1ca2a:	7011      	strb	r1, [r2, #0]
   1ca2c:	001a      	movs	r2, r3
   1ca2e:	003b      	movs	r3, r7
   1ca30:	2100      	movs	r1, #0
   1ca32:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
   1ca34:	003b      	movs	r3, r7
   1ca36:	0018      	movs	r0, r3
   1ca38:	4b06      	ldr	r3, [pc, #24]	; (1ca54 <statusOnCall+0x10c>)
   1ca3a:	4798      	blx	r3
}
   1ca3c:	46c0      	nop			; (mov r8, r8)
   1ca3e:	46bd      	mov	sp, r7
   1ca40:	b003      	add	sp, #12
   1ca42:	bd90      	pop	{r4, r7, pc}
   1ca44:	0001c16d 	.word	0x0001c16d
   1ca48:	0001bc45 	.word	0x0001bc45
   1ca4c:	20000948 	.word	0x20000948
   1ca50:	20000854 	.word	0x20000854
   1ca54:	00014a01 	.word	0x00014a01

0001ca58 <voltageOnCall>:

void voltageOnCall(void)
{
   1ca58:	b590      	push	{r4, r7, lr}
   1ca5a:	b087      	sub	sp, #28
   1ca5c:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"]%lu{%lu}%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
   1ca5e:	4b0a      	ldr	r3, [pc, #40]	; (1ca88 <voltageOnCall+0x30>)
   1ca60:	681a      	ldr	r2, [r3, #0]
   1ca62:	4b09      	ldr	r3, [pc, #36]	; (1ca88 <voltageOnCall+0x30>)
   1ca64:	685c      	ldr	r4, [r3, #4]
   1ca66:	4b08      	ldr	r3, [pc, #32]	; (1ca88 <voltageOnCall+0x30>)
   1ca68:	689b      	ldr	r3, [r3, #8]
   1ca6a:	4908      	ldr	r1, [pc, #32]	; (1ca8c <voltageOnCall+0x34>)
   1ca6c:	0038      	movs	r0, r7
   1ca6e:	9300      	str	r3, [sp, #0]
   1ca70:	0023      	movs	r3, r4
   1ca72:	4c07      	ldr	r4, [pc, #28]	; (1ca90 <voltageOnCall+0x38>)
   1ca74:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
   1ca76:	003b      	movs	r3, r7
   1ca78:	0018      	movs	r0, r3
   1ca7a:	4b06      	ldr	r3, [pc, #24]	; (1ca94 <voltageOnCall+0x3c>)
   1ca7c:	4798      	blx	r3
}
   1ca7e:	46c0      	nop			; (mov r8, r8)
   1ca80:	46bd      	mov	sp, r7
   1ca82:	b005      	add	sp, #20
   1ca84:	bd90      	pop	{r4, r7, pc}
   1ca86:	46c0      	nop			; (mov r8, r8)
   1ca88:	200008e8 	.word	0x200008e8
   1ca8c:	0002b468 	.word	0x0002b468
   1ca90:	00029961 	.word	0x00029961
   1ca94:	00014a01 	.word	0x00014a01

0001ca98 <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
   1ca98:	b580      	push	{r7, lr}
   1ca9a:	b082      	sub	sp, #8
   1ca9c:	af00      	add	r7, sp, #0
   1ca9e:	0002      	movs	r2, r0
   1caa0:	1dfb      	adds	r3, r7, #7
   1caa2:	701a      	strb	r2, [r3, #0]
   1caa4:	1dbb      	adds	r3, r7, #6
   1caa6:	1c0a      	adds	r2, r1, #0
   1caa8:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
   1caaa:	1dfb      	adds	r3, r7, #7
   1caac:	781b      	ldrb	r3, [r3, #0]
   1caae:	4a0e      	ldr	r2, [pc, #56]	; (1cae8 <setM2MEventState+0x50>)
   1cab0:	5cd3      	ldrb	r3, [r2, r3]
   1cab2:	2b02      	cmp	r3, #2
   1cab4:	d10e      	bne.n	1cad4 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
   1cab6:	1dbb      	adds	r3, r7, #6
   1cab8:	781b      	ldrb	r3, [r3, #0]
   1caba:	2b03      	cmp	r3, #3
   1cabc:	d10a      	bne.n	1cad4 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
   1cabe:	1dbb      	adds	r3, r7, #6
   1cac0:	2200      	movs	r2, #0
   1cac2:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
   1cac4:	1dfb      	adds	r3, r7, #7
   1cac6:	781b      	ldrb	r3, [r3, #0]
   1cac8:	4a08      	ldr	r2, [pc, #32]	; (1caec <setM2MEventState+0x54>)
   1caca:	5cd3      	ldrb	r3, [r2, r3]
   1cacc:	001a      	movs	r2, r3
   1cace:	4b08      	ldr	r3, [pc, #32]	; (1caf0 <setM2MEventState+0x58>)
   1cad0:	2100      	movs	r1, #0
   1cad2:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
   1cad4:	1dfb      	adds	r3, r7, #7
   1cad6:	781b      	ldrb	r3, [r3, #0]
   1cad8:	4a03      	ldr	r2, [pc, #12]	; (1cae8 <setM2MEventState+0x50>)
   1cada:	1db9      	adds	r1, r7, #6
   1cadc:	7809      	ldrb	r1, [r1, #0]
   1cade:	54d1      	strb	r1, [r2, r3]
}
   1cae0:	46c0      	nop			; (mov r8, r8)
   1cae2:	46bd      	mov	sp, r7
   1cae4:	b002      	add	sp, #8
   1cae6:	bd80      	pop	{r7, pc}
   1cae8:	200009c4 	.word	0x200009c4
   1caec:	20000940 	.word	0x20000940
   1caf0:	20000918 	.word	0x20000918

0001caf4 <M2MEventManager>:

void M2MEventManager(void)
{
   1caf4:	b580      	push	{r7, lr}
   1caf6:	b082      	sub	sp, #8
   1caf8:	af00      	add	r7, sp, #0
	uint8_t j=2;
   1cafa:	1dfb      	adds	r3, r7, #7
   1cafc:	2202      	movs	r2, #2
   1cafe:	701a      	strb	r2, [r3, #0]
	while(j--)
   1cb00:	e00a      	b.n	1cb18 <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
   1cb02:	1dfb      	adds	r3, r7, #7
   1cb04:	781b      	ldrb	r3, [r3, #0]
   1cb06:	4a0a      	ldr	r2, [pc, #40]	; (1cb30 <M2MEventManager+0x3c>)
   1cb08:	5cd3      	ldrb	r3, [r2, r3]
   1cb0a:	2b01      	cmp	r3, #1
   1cb0c:	d104      	bne.n	1cb18 <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
   1cb0e:	1dfb      	adds	r3, r7, #7
   1cb10:	781b      	ldrb	r3, [r3, #0]
   1cb12:	0018      	movs	r0, r3
   1cb14:	4b07      	ldr	r3, [pc, #28]	; (1cb34 <M2MEventManager+0x40>)
   1cb16:	4798      	blx	r3
	while(j--)
   1cb18:	1dfb      	adds	r3, r7, #7
   1cb1a:	781b      	ldrb	r3, [r3, #0]
   1cb1c:	1dfa      	adds	r2, r7, #7
   1cb1e:	1e59      	subs	r1, r3, #1
   1cb20:	7011      	strb	r1, [r2, #0]
   1cb22:	2b00      	cmp	r3, #0
   1cb24:	d1ed      	bne.n	1cb02 <M2MEventManager+0xe>
		}
	}
}
   1cb26:	46c0      	nop			; (mov r8, r8)
   1cb28:	46bd      	mov	sp, r7
   1cb2a:	b002      	add	sp, #8
   1cb2c:	bd80      	pop	{r7, pc}
   1cb2e:	46c0      	nop			; (mov r8, r8)
   1cb30:	200009c4 	.word	0x200009c4
   1cb34:	00014d71 	.word	0x00014d71

0001cb38 <SIMEventManager>:

void SIMEventManager(void)
{
   1cb38:	b590      	push	{r4, r7, lr}
   1cb3a:	b083      	sub	sp, #12
   1cb3c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
   1cb3e:	1dfb      	adds	r3, r7, #7
   1cb40:	2200      	movs	r2, #0
   1cb42:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1cb44:	4b1e      	ldr	r3, [pc, #120]	; (1cbc0 <SIMEventManager+0x88>)
   1cb46:	795b      	ldrb	r3, [r3, #5]
   1cb48:	2b00      	cmp	r3, #0
   1cb4a:	d00b      	beq.n	1cb64 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1cb4c:	4b1c      	ldr	r3, [pc, #112]	; (1cbc0 <SIMEventManager+0x88>)
   1cb4e:	791b      	ldrb	r3, [r3, #4]
   1cb50:	2b00      	cmp	r3, #0
   1cb52:	d003      	beq.n	1cb5c <SIMEventManager+0x24>
		{
			i = 19;
   1cb54:	1dfb      	adds	r3, r7, #7
   1cb56:	2213      	movs	r2, #19
   1cb58:	701a      	strb	r2, [r3, #0]
   1cb5a:	e025      	b.n	1cba8 <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
   1cb5c:	1dfb      	adds	r3, r7, #7
   1cb5e:	2211      	movs	r2, #17
   1cb60:	701a      	strb	r2, [r3, #0]
   1cb62:	e021      	b.n	1cba8 <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1cb64:	4b16      	ldr	r3, [pc, #88]	; (1cbc0 <SIMEventManager+0x88>)
   1cb66:	785b      	ldrb	r3, [r3, #1]
   1cb68:	2b00      	cmp	r3, #0
   1cb6a:	d003      	beq.n	1cb74 <SIMEventManager+0x3c>
		{
			i = 14;
   1cb6c:	1dfb      	adds	r3, r7, #7
   1cb6e:	220e      	movs	r2, #14
   1cb70:	701a      	strb	r2, [r3, #0]
   1cb72:	e019      	b.n	1cba8 <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
   1cb74:	1dfb      	adds	r3, r7, #7
   1cb76:	220c      	movs	r2, #12
   1cb78:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
   1cb7a:	e015      	b.n	1cba8 <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
   1cb7c:	1dfb      	adds	r3, r7, #7
   1cb7e:	781b      	ldrb	r3, [r3, #0]
   1cb80:	4a10      	ldr	r2, [pc, #64]	; (1cbc4 <SIMEventManager+0x8c>)
   1cb82:	5cd3      	ldrb	r3, [r2, r3]
   1cb84:	2201      	movs	r2, #1
   1cb86:	4053      	eors	r3, r2
   1cb88:	b2db      	uxtb	r3, r3
   1cb8a:	2b00      	cmp	r3, #0
   1cb8c:	d00c      	beq.n	1cba8 <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
   1cb8e:	1dfb      	adds	r3, r7, #7
   1cb90:	781c      	ldrb	r4, [r3, #0]
   1cb92:	1dfb      	adds	r3, r7, #7
   1cb94:	781b      	ldrb	r3, [r3, #0]
   1cb96:	4a0c      	ldr	r2, [pc, #48]	; (1cbc8 <SIMEventManager+0x90>)
   1cb98:	5cd3      	ldrb	r3, [r2, r3]
   1cb9a:	0018      	movs	r0, r3
   1cb9c:	4b0b      	ldr	r3, [pc, #44]	; (1cbcc <SIMEventManager+0x94>)
   1cb9e:	4798      	blx	r3
   1cba0:	0003      	movs	r3, r0
   1cba2:	001a      	movs	r2, r3
   1cba4:	4b07      	ldr	r3, [pc, #28]	; (1cbc4 <SIMEventManager+0x8c>)
   1cba6:	551a      	strb	r2, [r3, r4]
	while(i--)
   1cba8:	1dfb      	adds	r3, r7, #7
   1cbaa:	781b      	ldrb	r3, [r3, #0]
   1cbac:	1dfa      	adds	r2, r7, #7
   1cbae:	1e59      	subs	r1, r3, #1
   1cbb0:	7011      	strb	r1, [r2, #0]
   1cbb2:	2b00      	cmp	r3, #0
   1cbb4:	d1e2      	bne.n	1cb7c <SIMEventManager+0x44>
	}
}
   1cbb6:	46c0      	nop			; (mov r8, r8)
   1cbb8:	46bd      	mov	sp, r7
   1cbba:	b003      	add	sp, #12
   1cbbc:	bd90      	pop	{r4, r7, pc}
   1cbbe:	46c0      	nop			; (mov r8, r8)
   1cbc0:	2000082c 	.word	0x2000082c
   1cbc4:	20000918 	.word	0x20000918
   1cbc8:	200009fc 	.word	0x200009fc
   1cbcc:	00014c4d 	.word	0x00014c4d

0001cbd0 <MotorVoltageBypassTimerOver>:

bool MotorVoltageBypassTimerOver(void)
{
   1cbd0:	b580      	push	{r7, lr}
   1cbd2:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount()-motorVoltageBypassTimerTime) > user_settings_parameter_struct.motorVoltageBypassTime);
   1cbd4:	4b07      	ldr	r3, [pc, #28]	; (1cbf4 <MotorVoltageBypassTimerOver+0x24>)
   1cbd6:	4798      	blx	r3
   1cbd8:	0002      	movs	r2, r0
   1cbda:	4b07      	ldr	r3, [pc, #28]	; (1cbf8 <MotorVoltageBypassTimerOver+0x28>)
   1cbdc:	681b      	ldr	r3, [r3, #0]
   1cbde:	1ad2      	subs	r2, r2, r3
   1cbe0:	4b06      	ldr	r3, [pc, #24]	; (1cbfc <MotorVoltageBypassTimerOver+0x2c>)
   1cbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cbe4:	4293      	cmp	r3, r2
   1cbe6:	419b      	sbcs	r3, r3
   1cbe8:	425b      	negs	r3, r3
   1cbea:	b2db      	uxtb	r3, r3
}
   1cbec:	0018      	movs	r0, r3
   1cbee:	46bd      	mov	sp, r7
   1cbf0:	bd80      	pop	{r7, pc}
   1cbf2:	46c0      	nop			; (mov r8, r8)
   1cbf4:	00020dad 	.word	0x00020dad
   1cbf8:	20000984 	.word	0x20000984
   1cbfc:	20000854 	.word	0x20000854

0001cc00 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
   1cc00:	b580      	push	{r7, lr}
   1cc02:	b084      	sub	sp, #16
   1cc04:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
   1cc06:	4b70      	ldr	r3, [pc, #448]	; (1cdc8 <checkCurrentConsumption+0x1c8>)
   1cc08:	781b      	ldrb	r3, [r3, #0]
   1cc0a:	2b00      	cmp	r3, #0
   1cc0c:	d000      	beq.n	1cc10 <checkCurrentConsumption+0x10>
   1cc0e:	e0d6      	b.n	1cdbe <checkCurrentConsumption+0x1be>
   1cc10:	4b6e      	ldr	r3, [pc, #440]	; (1cdcc <checkCurrentConsumption+0x1cc>)
   1cc12:	781b      	ldrb	r3, [r3, #0]
   1cc14:	2b00      	cmp	r3, #0
   1cc16:	d000      	beq.n	1cc1a <checkCurrentConsumption+0x1a>
   1cc18:	e0d1      	b.n	1cdbe <checkCurrentConsumption+0x1be>
   1cc1a:	4b6d      	ldr	r3, [pc, #436]	; (1cdd0 <checkCurrentConsumption+0x1d0>)
   1cc1c:	4798      	blx	r3
   1cc1e:	0003      	movs	r3, r0
   1cc20:	001a      	movs	r2, r3
   1cc22:	2301      	movs	r3, #1
   1cc24:	4053      	eors	r3, r2
   1cc26:	b2db      	uxtb	r3, r3
   1cc28:	2b00      	cmp	r3, #0
   1cc2a:	d000      	beq.n	1cc2e <checkCurrentConsumption+0x2e>
   1cc2c:	e0c7      	b.n	1cdbe <checkCurrentConsumption+0x1be>
   1cc2e:	4b69      	ldr	r3, [pc, #420]	; (1cdd4 <checkCurrentConsumption+0x1d4>)
   1cc30:	7bdb      	ldrb	r3, [r3, #15]
   1cc32:	b2db      	uxtb	r3, r3
   1cc34:	2b00      	cmp	r3, #0
   1cc36:	d100      	bne.n	1cc3a <checkCurrentConsumption+0x3a>
   1cc38:	e0c1      	b.n	1cdbe <checkCurrentConsumption+0x1be>
   1cc3a:	4b67      	ldr	r3, [pc, #412]	; (1cdd8 <checkCurrentConsumption+0x1d8>)
   1cc3c:	781b      	ldrb	r3, [r3, #0]
   1cc3e:	2b00      	cmp	r3, #0
   1cc40:	d000      	beq.n	1cc44 <checkCurrentConsumption+0x44>
   1cc42:	e0bc      	b.n	1cdbe <checkCurrentConsumption+0x1be>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
   1cc44:	4b65      	ldr	r3, [pc, #404]	; (1cddc <checkCurrentConsumption+0x1dc>)
   1cc46:	781b      	ldrb	r3, [r3, #0]
   1cc48:	2b00      	cmp	r3, #0
   1cc4a:	d00b      	beq.n	1cc64 <checkCurrentConsumption+0x64>
   1cc4c:	4b64      	ldr	r3, [pc, #400]	; (1cde0 <checkCurrentConsumption+0x1e0>)
   1cc4e:	4798      	blx	r3
   1cc50:	0002      	movs	r2, r0
   1cc52:	4b64      	ldr	r3, [pc, #400]	; (1cde4 <checkCurrentConsumption+0x1e4>)
   1cc54:	681b      	ldr	r3, [r3, #0]
   1cc56:	1ad3      	subs	r3, r2, r3
   1cc58:	4a63      	ldr	r2, [pc, #396]	; (1cde8 <checkCurrentConsumption+0x1e8>)
   1cc5a:	4293      	cmp	r3, r2
   1cc5c:	d902      	bls.n	1cc64 <checkCurrentConsumption+0x64>
	{
		enableCurrentBuffer=false;
   1cc5e:	4b5f      	ldr	r3, [pc, #380]	; (1cddc <checkCurrentConsumption+0x1dc>)
   1cc60:	2200      	movs	r2, #0
   1cc62:	701a      	strb	r2, [r3, #0]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp=0;
   1cc64:	2300      	movs	r3, #0
   1cc66:	60fb      	str	r3, [r7, #12]
	if(user_settings_parameter_struct.over_under_DetectionMethod== MOTOR_UNDEROVER_DETECTION_POWER)
   1cc68:	4b5a      	ldr	r3, [pc, #360]	; (1cdd4 <checkCurrentConsumption+0x1d4>)
   1cc6a:	2226      	movs	r2, #38	; 0x26
   1cc6c:	5c9b      	ldrb	r3, [r3, r2]
   1cc6e:	b2db      	uxtb	r3, r3
   1cc70:	2b01      	cmp	r3, #1
   1cc72:	d103      	bne.n	1cc7c <checkCurrentConsumption+0x7c>
	{
		temp = Analog_Parameter_Struct.Motor_Power;
   1cc74:	4b5d      	ldr	r3, [pc, #372]	; (1cdec <checkCurrentConsumption+0x1ec>)
   1cc76:	6a1b      	ldr	r3, [r3, #32]
   1cc78:	60fb      	str	r3, [r7, #12]
   1cc7a:	e002      	b.n	1cc82 <checkCurrentConsumption+0x82>
	}
	else
	{
		temp = Analog_Parameter_Struct.Motor_Current;
   1cc7c:	4b5b      	ldr	r3, [pc, #364]	; (1cdec <checkCurrentConsumption+0x1ec>)
   1cc7e:	691b      	ldr	r3, [r3, #16]
   1cc80:	60fb      	str	r3, [r7, #12]
	}
	
	uint32_t overLoadDetectValue=12000;
   1cc82:	4b5b      	ldr	r3, [pc, #364]	; (1cdf0 <checkCurrentConsumption+0x1f0>)
   1cc84:	60bb      	str	r3, [r7, #8]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
   1cc86:	4b55      	ldr	r3, [pc, #340]	; (1cddc <checkCurrentConsumption+0x1dc>)
   1cc88:	781b      	ldrb	r3, [r3, #0]
   1cc8a:	2b00      	cmp	r3, #0
   1cc8c:	d00b      	beq.n	1cca6 <checkCurrentConsumption+0xa6>
   1cc8e:	4b51      	ldr	r3, [pc, #324]	; (1cdd4 <checkCurrentConsumption+0x1d4>)
   1cc90:	691b      	ldr	r3, [r3, #16]
   1cc92:	005a      	lsls	r2, r3, #1
   1cc94:	68fb      	ldr	r3, [r7, #12]
   1cc96:	429a      	cmp	r2, r3
   1cc98:	d205      	bcs.n	1cca6 <checkCurrentConsumption+0xa6>
	{
		temp2 = CR_OVER2;
   1cc9a:	1dfb      	adds	r3, r7, #7
   1cc9c:	2202      	movs	r2, #2
   1cc9e:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
   1cca0:	4b54      	ldr	r3, [pc, #336]	; (1cdf4 <checkCurrentConsumption+0x1f4>)
   1cca2:	60bb      	str	r3, [r7, #8]
   1cca4:	e050      	b.n	1cd48 <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
   1cca6:	4b4d      	ldr	r3, [pc, #308]	; (1cddc <checkCurrentConsumption+0x1dc>)
   1cca8:	781b      	ldrb	r3, [r3, #0]
   1ccaa:	2201      	movs	r2, #1
   1ccac:	4053      	eors	r3, r2
   1ccae:	b2db      	uxtb	r3, r3
   1ccb0:	2b00      	cmp	r3, #0
   1ccb2:	d00c      	beq.n	1ccce <checkCurrentConsumption+0xce>
   1ccb4:	4b47      	ldr	r3, [pc, #284]	; (1cdd4 <checkCurrentConsumption+0x1d4>)
   1ccb6:	691b      	ldr	r3, [r3, #16]
   1ccb8:	005a      	lsls	r2, r3, #1
   1ccba:	68fb      	ldr	r3, [r7, #12]
   1ccbc:	429a      	cmp	r2, r3
   1ccbe:	d206      	bcs.n	1ccce <checkCurrentConsumption+0xce>
	{
		temp2 = CR_OVER;
   1ccc0:	1dfb      	adds	r3, r7, #7
   1ccc2:	2201      	movs	r2, #1
   1ccc4:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1ccc6:	68bb      	ldr	r3, [r7, #8]
   1ccc8:	089b      	lsrs	r3, r3, #2
   1ccca:	60bb      	str	r3, [r7, #8]
   1cccc:	e03c      	b.n	1cd48 <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
   1ccce:	4b43      	ldr	r3, [pc, #268]	; (1cddc <checkCurrentConsumption+0x1dc>)
   1ccd0:	781b      	ldrb	r3, [r3, #0]
   1ccd2:	2201      	movs	r2, #1
   1ccd4:	4053      	eors	r3, r2
   1ccd6:	b2db      	uxtb	r3, r3
   1ccd8:	2b00      	cmp	r3, #0
   1ccda:	d00f      	beq.n	1ccfc <checkCurrentConsumption+0xfc>
   1ccdc:	4b3d      	ldr	r3, [pc, #244]	; (1cdd4 <checkCurrentConsumption+0x1d4>)
   1ccde:	691a      	ldr	r2, [r3, #16]
   1cce0:	4b3c      	ldr	r3, [pc, #240]	; (1cdd4 <checkCurrentConsumption+0x1d4>)
   1cce2:	691b      	ldr	r3, [r3, #16]
   1cce4:	085b      	lsrs	r3, r3, #1
   1cce6:	18d2      	adds	r2, r2, r3
   1cce8:	68fb      	ldr	r3, [r7, #12]
   1ccea:	429a      	cmp	r2, r3
   1ccec:	d206      	bcs.n	1ccfc <checkCurrentConsumption+0xfc>
	{
		temp2 = CR_OVER;
   1ccee:	1dfb      	adds	r3, r7, #7
   1ccf0:	2201      	movs	r2, #1
   1ccf2:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
   1ccf4:	68bb      	ldr	r3, [r7, #8]
   1ccf6:	085b      	lsrs	r3, r3, #1
   1ccf8:	60bb      	str	r3, [r7, #8]
   1ccfa:	e025      	b.n	1cd48 <checkCurrentConsumption+0x148>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
   1ccfc:	4b37      	ldr	r3, [pc, #220]	; (1cddc <checkCurrentConsumption+0x1dc>)
   1ccfe:	781b      	ldrb	r3, [r3, #0]
   1cd00:	2201      	movs	r2, #1
   1cd02:	4053      	eors	r3, r2
   1cd04:	b2db      	uxtb	r3, r3
   1cd06:	2b00      	cmp	r3, #0
   1cd08:	d008      	beq.n	1cd1c <checkCurrentConsumption+0x11c>
   1cd0a:	4b32      	ldr	r3, [pc, #200]	; (1cdd4 <checkCurrentConsumption+0x1d4>)
   1cd0c:	695a      	ldr	r2, [r3, #20]
   1cd0e:	68fb      	ldr	r3, [r7, #12]
   1cd10:	429a      	cmp	r2, r3
   1cd12:	d203      	bcs.n	1cd1c <checkCurrentConsumption+0x11c>
	{
		temp2 = CR_OVER;
   1cd14:	1dfb      	adds	r3, r7, #7
   1cd16:	2201      	movs	r2, #1
   1cd18:	701a      	strb	r2, [r3, #0]
   1cd1a:	e015      	b.n	1cd48 <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp < user_settings_parameter_struct.underloadAddress)		// only consider noLoad after 30 secs
   1cd1c:	4b2f      	ldr	r3, [pc, #188]	; (1cddc <checkCurrentConsumption+0x1dc>)
   1cd1e:	781b      	ldrb	r3, [r3, #0]
   1cd20:	2201      	movs	r2, #1
   1cd22:	4053      	eors	r3, r2
   1cd24:	b2db      	uxtb	r3, r3
   1cd26:	2b00      	cmp	r3, #0
   1cd28:	d00b      	beq.n	1cd42 <checkCurrentConsumption+0x142>
   1cd2a:	4b2a      	ldr	r3, [pc, #168]	; (1cdd4 <checkCurrentConsumption+0x1d4>)
   1cd2c:	699a      	ldr	r2, [r3, #24]
   1cd2e:	68fb      	ldr	r3, [r7, #12]
   1cd30:	429a      	cmp	r2, r3
   1cd32:	d906      	bls.n	1cd42 <checkCurrentConsumption+0x142>
	{
		temp2 = CR_UNDER;
   1cd34:	1dfb      	adds	r3, r7, #7
   1cd36:	2202      	movs	r2, #2
   1cd38:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1cd3a:	68bb      	ldr	r3, [r7, #8]
   1cd3c:	089b      	lsrs	r3, r3, #2
   1cd3e:	60bb      	str	r3, [r7, #8]
   1cd40:	e002      	b.n	1cd48 <checkCurrentConsumption+0x148>
	//temp2 = CR_UNDER;
	//overLoadDetectValue=overLoadDetectValue>>2;
	//}
	else
	{
		temp2= CR_NORMAL;
   1cd42:	1dfb      	adds	r3, r7, #7
   1cd44:	2200      	movs	r2, #0
   1cd46:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
   1cd48:	4b2b      	ldr	r3, [pc, #172]	; (1cdf8 <checkCurrentConsumption+0x1f8>)
   1cd4a:	781b      	ldrb	r3, [r3, #0]
   1cd4c:	1dfa      	adds	r2, r7, #7
   1cd4e:	7812      	ldrb	r2, [r2, #0]
   1cd50:	429a      	cmp	r2, r3
   1cd52:	d12a      	bne.n	1cdaa <checkCurrentConsumption+0x1aa>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
   1cd54:	4b22      	ldr	r3, [pc, #136]	; (1cde0 <checkCurrentConsumption+0x1e0>)
   1cd56:	4798      	blx	r3
   1cd58:	0002      	movs	r2, r0
   1cd5a:	4b28      	ldr	r3, [pc, #160]	; (1cdfc <checkCurrentConsumption+0x1fc>)
   1cd5c:	681b      	ldr	r3, [r3, #0]
   1cd5e:	1ad2      	subs	r2, r2, r3
   1cd60:	68bb      	ldr	r3, [r7, #8]
   1cd62:	429a      	cmp	r2, r3
   1cd64:	d92c      	bls.n	1cdc0 <checkCurrentConsumption+0x1c0>
		{
			if(temp2==CR_OVER)
   1cd66:	1dfb      	adds	r3, r7, #7
   1cd68:	781b      	ldrb	r3, [r3, #0]
   1cd6a:	2b01      	cmp	r3, #1
   1cd6c:	d10c      	bne.n	1cd88 <checkCurrentConsumption+0x188>
			{
				stopMotor(false,true,false);
   1cd6e:	2200      	movs	r2, #0
   1cd70:	2101      	movs	r1, #1
   1cd72:	2000      	movs	r0, #0
   1cd74:	4b22      	ldr	r3, [pc, #136]	; (1ce00 <checkCurrentConsumption+0x200>)
   1cd76:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
   1cd78:	2042      	movs	r0, #66	; 0x42
   1cd7a:	4b22      	ldr	r3, [pc, #136]	; (1ce04 <checkCurrentConsumption+0x204>)
   1cd7c:	4798      	blx	r3
   1cd7e:	0003      	movs	r3, r0
   1cd80:	001a      	movs	r2, r3
   1cd82:	4b21      	ldr	r3, [pc, #132]	; (1ce08 <checkCurrentConsumption+0x208>)
   1cd84:	731a      	strb	r2, [r3, #12]
   1cd86:	e01b      	b.n	1cdc0 <checkCurrentConsumption+0x1c0>
			}
			else if(temp2==CR_UNDER)
   1cd88:	1dfb      	adds	r3, r7, #7
   1cd8a:	781b      	ldrb	r3, [r3, #0]
   1cd8c:	2b02      	cmp	r3, #2
   1cd8e:	d117      	bne.n	1cdc0 <checkCurrentConsumption+0x1c0>
			{
				stopMotor(false,true,false);
   1cd90:	2200      	movs	r2, #0
   1cd92:	2101      	movs	r1, #1
   1cd94:	2000      	movs	r0, #0
   1cd96:	4b1a      	ldr	r3, [pc, #104]	; (1ce00 <checkCurrentConsumption+0x200>)
   1cd98:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
   1cd9a:	204a      	movs	r0, #74	; 0x4a
   1cd9c:	4b19      	ldr	r3, [pc, #100]	; (1ce04 <checkCurrentConsumption+0x204>)
   1cd9e:	4798      	blx	r3
   1cda0:	0003      	movs	r3, r0
   1cda2:	001a      	movs	r2, r3
   1cda4:	4b18      	ldr	r3, [pc, #96]	; (1ce08 <checkCurrentConsumption+0x208>)
   1cda6:	735a      	strb	r2, [r3, #13]
   1cda8:	e00a      	b.n	1cdc0 <checkCurrentConsumption+0x1c0>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
   1cdaa:	4b0d      	ldr	r3, [pc, #52]	; (1cde0 <checkCurrentConsumption+0x1e0>)
   1cdac:	4798      	blx	r3
   1cdae:	0002      	movs	r2, r0
   1cdb0:	4b12      	ldr	r3, [pc, #72]	; (1cdfc <checkCurrentConsumption+0x1fc>)
   1cdb2:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
   1cdb4:	4b10      	ldr	r3, [pc, #64]	; (1cdf8 <checkCurrentConsumption+0x1f8>)
   1cdb6:	1dfa      	adds	r2, r7, #7
   1cdb8:	7812      	ldrb	r2, [r2, #0]
   1cdba:	701a      	strb	r2, [r3, #0]
   1cdbc:	e000      	b.n	1cdc0 <checkCurrentConsumption+0x1c0>
		return;
   1cdbe:	46c0      	nop			; (mov r8, r8)
	}
}
   1cdc0:	46bd      	mov	sp, r7
   1cdc2:	b004      	add	sp, #16
   1cdc4:	bd80      	pop	{r7, pc}
   1cdc6:	46c0      	nop			; (mov r8, r8)
   1cdc8:	20000999 	.word	0x20000999
   1cdcc:	20000988 	.word	0x20000988
   1cdd0:	0001bbf1 	.word	0x0001bbf1
   1cdd4:	20000854 	.word	0x20000854
   1cdd8:	2000099b 	.word	0x2000099b
   1cddc:	20000960 	.word	0x20000960
   1cde0:	00020dad 	.word	0x00020dad
   1cde4:	20000994 	.word	0x20000994
   1cde8:	00007530 	.word	0x00007530
   1cdec:	200008e8 	.word	0x200008e8
   1cdf0:	00002ee0 	.word	0x00002ee0
   1cdf4:	00004650 	.word	0x00004650
   1cdf8:	2000097e 	.word	0x2000097e
   1cdfc:	2000096c 	.word	0x2000096c
   1ce00:	0001c4fd 	.word	0x0001c4fd
   1ce04:	00014c4d 	.word	0x00014c4d
   1ce08:	20000918 	.word	0x20000918

0001ce0c <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
   1ce0c:	b580      	push	{r7, lr}
   1ce0e:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
   1ce10:	4b02      	ldr	r3, [pc, #8]	; (1ce1c <button_detect_pin_callback+0x10>)
   1ce12:	2201      	movs	r2, #1
   1ce14:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
   1ce16:	46c0      	nop			; (mov r8, r8)
   1ce18:	46bd      	mov	sp, r7
   1ce1a:	bd80      	pop	{r7, pc}
   1ce1c:	2000099f 	.word	0x2000099f

0001ce20 <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
   1ce20:	b590      	push	{r4, r7, lr}
   1ce22:	b087      	sub	sp, #28
   1ce24:	af00      	add	r7, sp, #0
   1ce26:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
   1ce28:	4bd5      	ldr	r3, [pc, #852]	; (1d180 <vTask_MOTORCONTROL+0x360>)
   1ce2a:	4798      	blx	r3
	
	configure_ac();
   1ce2c:	4bd5      	ldr	r3, [pc, #852]	; (1d184 <vTask_MOTORCONTROL+0x364>)
   1ce2e:	4798      	blx	r3
	//configure_rtc();
	//configure_event();
	
	
	//////////////////////////////////////////////////////////////////////////
		invalidateVoltageReadings=false;
   1ce30:	4bd5      	ldr	r3, [pc, #852]	; (1d188 <vTask_MOTORCONTROL+0x368>)
   1ce32:	2200      	movs	r2, #0
   1ce34:	701a      	strb	r2, [r3, #0]
		invalidateVoltageReadingTime=0;
   1ce36:	4bd5      	ldr	r3, [pc, #852]	; (1d18c <vTask_MOTORCONTROL+0x36c>)
   1ce38:	2200      	movs	r2, #0
   1ce3a:	601a      	str	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
   1ce3c:	4bd4      	ldr	r3, [pc, #848]	; (1d190 <vTask_MOTORCONTROL+0x370>)
   1ce3e:	2200      	movs	r2, #0
   1ce40:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
   1ce42:	4bd4      	ldr	r3, [pc, #848]	; (1d194 <vTask_MOTORCONTROL+0x374>)
   1ce44:	2200      	movs	r2, #0
   1ce46:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
   1ce48:	4bd3      	ldr	r3, [pc, #844]	; (1d198 <vTask_MOTORCONTROL+0x378>)
   1ce4a:	2200      	movs	r2, #0
   1ce4c:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1ce4e:	2315      	movs	r3, #21
   1ce50:	18fb      	adds	r3, r7, r3
   1ce52:	2201      	movs	r2, #1
   1ce54:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
   1ce56:	4bd1      	ldr	r3, [pc, #836]	; (1d19c <vTask_MOTORCONTROL+0x37c>)
   1ce58:	4798      	blx	r3
   1ce5a:	0003      	movs	r3, r0
   1ce5c:	613b      	str	r3, [r7, #16]
	firstEvent = true;
   1ce5e:	4bd0      	ldr	r3, [pc, #832]	; (1d1a0 <vTask_MOTORCONTROL+0x380>)
   1ce60:	2201      	movs	r2, #1
   1ce62:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1ce64:	2315      	movs	r3, #21
   1ce66:	18fc      	adds	r4, r7, r3
   1ce68:	4bce      	ldr	r3, [pc, #824]	; (1d1a4 <vTask_MOTORCONTROL+0x384>)
   1ce6a:	2100      	movs	r1, #0
   1ce6c:	0018      	movs	r0, r3
   1ce6e:	4bce      	ldr	r3, [pc, #824]	; (1d1a8 <vTask_MOTORCONTROL+0x388>)
   1ce70:	4798      	blx	r3
   1ce72:	0003      	movs	r3, r0
   1ce74:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1ce76:	23fa      	movs	r3, #250	; 0xfa
   1ce78:	005b      	lsls	r3, r3, #1
   1ce7a:	0018      	movs	r0, r3
   1ce7c:	4bcb      	ldr	r3, [pc, #812]	; (1d1ac <vTask_MOTORCONTROL+0x38c>)
   1ce7e:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1ce80:	2315      	movs	r3, #21
   1ce82:	18fc      	adds	r4, r7, r3
   1ce84:	4bc7      	ldr	r3, [pc, #796]	; (1d1a4 <vTask_MOTORCONTROL+0x384>)
   1ce86:	2100      	movs	r1, #0
   1ce88:	0018      	movs	r0, r3
   1ce8a:	4bc7      	ldr	r3, [pc, #796]	; (1d1a8 <vTask_MOTORCONTROL+0x388>)
   1ce8c:	4798      	blx	r3
   1ce8e:	0003      	movs	r3, r0
   1ce90:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1ce92:	2315      	movs	r3, #21
   1ce94:	18fb      	adds	r3, r7, r3
   1ce96:	781b      	ldrb	r3, [r3, #0]
   1ce98:	2204      	movs	r2, #4
   1ce9a:	4013      	ands	r3, r2
   1ce9c:	d003      	beq.n	1cea6 <vTask_MOTORCONTROL+0x86>
	{
		isACpowerAvailable = true;
   1ce9e:	4bc4      	ldr	r3, [pc, #784]	; (1d1b0 <vTask_MOTORCONTROL+0x390>)
   1cea0:	2201      	movs	r2, #1
   1cea2:	701a      	strb	r2, [r3, #0]
   1cea4:	e002      	b.n	1ceac <vTask_MOTORCONTROL+0x8c>
	}
	else
	{
		isACpowerAvailable = false;
   1cea6:	4bc2      	ldr	r3, [pc, #776]	; (1d1b0 <vTask_MOTORCONTROL+0x390>)
   1cea8:	2200      	movs	r2, #0
   1ceaa:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
   1ceac:	4bc1      	ldr	r3, [pc, #772]	; (1d1b4 <vTask_MOTORCONTROL+0x394>)
   1ceae:	2200      	movs	r2, #0
   1ceb0:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	stopMotorCommandGiven=false;
   1ceb2:	4bc1      	ldr	r3, [pc, #772]	; (1d1b8 <vTask_MOTORCONTROL+0x398>)
   1ceb4:	2200      	movs	r2, #0
   1ceb6:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent = false;
   1ceb8:	4bc0      	ldr	r3, [pc, #768]	; (1d1bc <vTask_MOTORCONTROL+0x39c>)
   1ceba:	2200      	movs	r2, #0
   1cebc:	701a      	strb	r2, [r3, #0]
	
	startTimerOn = false;
   1cebe:	4bc0      	ldr	r3, [pc, #768]	; (1d1c0 <vTask_MOTORCONTROL+0x3a0>)
   1cec0:	2200      	movs	r2, #0
   1cec2:	701a      	strb	r2, [r3, #0]

	waitStableLineTime = 50;
   1cec4:	4bbf      	ldr	r3, [pc, #764]	; (1d1c4 <vTask_MOTORCONTROL+0x3a4>)
   1cec6:	2232      	movs	r2, #50	; 0x32
   1cec8:	701a      	strb	r2, [r3, #0]
	waitStableLineOn = false;
   1ceca:	4bbf      	ldr	r3, [pc, #764]	; (1d1c8 <vTask_MOTORCONTROL+0x3a8>)
   1cecc:	2200      	movs	r2, #0
   1cece:	701a      	strb	r2, [r3, #0]
	
	singlePhasingTime = 6;
   1ced0:	4bbe      	ldr	r3, [pc, #760]	; (1d1cc <vTask_MOTORCONTROL+0x3ac>)
   1ced2:	2206      	movs	r2, #6
   1ced4:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
   1ced6:	4bbe      	ldr	r3, [pc, #760]	; (1d1d0 <vTask_MOTORCONTROL+0x3b0>)
   1ced8:	2200      	movs	r2, #0
   1ceda:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
   1cedc:	4bbd      	ldr	r3, [pc, #756]	; (1d1d4 <vTask_MOTORCONTROL+0x3b4>)
   1cede:	2214      	movs	r2, #20
   1cee0:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
   1cee2:	4bbd      	ldr	r3, [pc, #756]	; (1d1d8 <vTask_MOTORCONTROL+0x3b8>)
   1cee4:	2200      	movs	r2, #0
   1cee6:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
   1cee8:	4bbc      	ldr	r3, [pc, #752]	; (1d1dc <vTask_MOTORCONTROL+0x3bc>)
   1ceea:	2200      	movs	r2, #0
   1ceec:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
   1ceee:	4bbc      	ldr	r3, [pc, #752]	; (1d1e0 <vTask_MOTORCONTROL+0x3c0>)
   1cef0:	2214      	movs	r2, #20
   1cef2:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
   1cef4:	4bbb      	ldr	r3, [pc, #748]	; (1d1e4 <vTask_MOTORCONTROL+0x3c4>)
   1cef6:	2200      	movs	r2, #0
   1cef8:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
   1cefa:	2000      	movs	r0, #0
   1cefc:	4bba      	ldr	r3, [pc, #744]	; (1d1e8 <vTask_MOTORCONTROL+0x3c8>)
   1cefe:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
   1cf00:	2000      	movs	r0, #0
   1cf02:	4bba      	ldr	r3, [pc, #744]	; (1d1ec <vTask_MOTORCONTROL+0x3cc>)
   1cf04:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
   1cf06:	2000      	movs	r0, #0
   1cf08:	4bb9      	ldr	r3, [pc, #740]	; (1d1f0 <vTask_MOTORCONTROL+0x3d0>)
   1cf0a:	4798      	blx	r3

	initPhaseRMStruct(&struct_rmsRY);
   1cf0c:	4bb9      	ldr	r3, [pc, #740]	; (1d1f4 <vTask_MOTORCONTROL+0x3d4>)
   1cf0e:	0018      	movs	r0, r3
   1cf10:	4bb9      	ldr	r3, [pc, #740]	; (1d1f8 <vTask_MOTORCONTROL+0x3d8>)
   1cf12:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsYB);
   1cf14:	4bb9      	ldr	r3, [pc, #740]	; (1d1fc <vTask_MOTORCONTROL+0x3dc>)
   1cf16:	0018      	movs	r0, r3
   1cf18:	4bb7      	ldr	r3, [pc, #732]	; (1d1f8 <vTask_MOTORCONTROL+0x3d8>)
   1cf1a:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsBR);
   1cf1c:	4bb8      	ldr	r3, [pc, #736]	; (1d200 <vTask_MOTORCONTROL+0x3e0>)
   1cf1e:	0018      	movs	r0, r3
   1cf20:	4bb5      	ldr	r3, [pc, #724]	; (1d1f8 <vTask_MOTORCONTROL+0x3d8>)
   1cf22:	4798      	blx	r3
	
	lastPressTime=0;
   1cf24:	4bb7      	ldr	r3, [pc, #732]	; (1d204 <vTask_MOTORCONTROL+0x3e4>)
   1cf26:	2200      	movs	r2, #0
   1cf28:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
   1cf2a:	4bb7      	ldr	r3, [pc, #732]	; (1d208 <vTask_MOTORCONTROL+0x3e8>)
   1cf2c:	2200      	movs	r2, #0
   1cf2e:	701a      	strb	r2, [r3, #0]

	motorRelatedVoltageBypassOn=false;
   1cf30:	4bb6      	ldr	r3, [pc, #728]	; (1d20c <vTask_MOTORCONTROL+0x3ec>)
   1cf32:	2200      	movs	r2, #0
   1cf34:	701a      	strb	r2, [r3, #0]
	motorVoltageBypassTimerTime= 0;
   1cf36:	4bb6      	ldr	r3, [pc, #728]	; (1d210 <vTask_MOTORCONTROL+0x3f0>)
   1cf38:	2200      	movs	r2, #0
   1cf3a:	601a      	str	r2, [r3, #0]
	
	uint8_t i= 0;
   1cf3c:	2317      	movs	r3, #23
   1cf3e:	18fb      	adds	r3, r7, r3
   1cf40:	2200      	movs	r2, #0
   1cf42:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1cf44:	4bb3      	ldr	r3, [pc, #716]	; (1d214 <vTask_MOTORCONTROL+0x3f4>)
   1cf46:	785b      	ldrb	r3, [r3, #1]
   1cf48:	2b00      	cmp	r3, #0
   1cf4a:	d004      	beq.n	1cf56 <vTask_MOTORCONTROL+0x136>
	{
		i=14;
   1cf4c:	2317      	movs	r3, #23
   1cf4e:	18fb      	adds	r3, r7, r3
   1cf50:	220e      	movs	r2, #14
   1cf52:	701a      	strb	r2, [r3, #0]
   1cf54:	e00a      	b.n	1cf6c <vTask_MOTORCONTROL+0x14c>
	}
	else
	{
		i = 12;
   1cf56:	2317      	movs	r3, #23
   1cf58:	18fb      	adds	r3, r7, r3
   1cf5a:	220c      	movs	r2, #12
   1cf5c:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
   1cf5e:	e005      	b.n	1cf6c <vTask_MOTORCONTROL+0x14c>
	{
		simEventTemp[i] = true;
   1cf60:	2317      	movs	r3, #23
   1cf62:	18fb      	adds	r3, r7, r3
   1cf64:	781b      	ldrb	r3, [r3, #0]
   1cf66:	4aac      	ldr	r2, [pc, #688]	; (1d218 <vTask_MOTORCONTROL+0x3f8>)
   1cf68:	2101      	movs	r1, #1
   1cf6a:	54d1      	strb	r1, [r2, r3]
	while(i--)
   1cf6c:	2317      	movs	r3, #23
   1cf6e:	18fb      	adds	r3, r7, r3
   1cf70:	781b      	ldrb	r3, [r3, #0]
   1cf72:	2217      	movs	r2, #23
   1cf74:	18ba      	adds	r2, r7, r2
   1cf76:	1e59      	subs	r1, r3, #1
   1cf78:	7011      	strb	r1, [r2, #0]
   1cf7a:	2b00      	cmp	r3, #0
   1cf7c:	d1f0      	bne.n	1cf60 <vTask_MOTORCONTROL+0x140>
	}
	simEvent[0] = 'N';
   1cf7e:	4ba7      	ldr	r3, [pc, #668]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cf80:	224e      	movs	r2, #78	; 0x4e
   1cf82:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
   1cf84:	4ba5      	ldr	r3, [pc, #660]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cf86:	2250      	movs	r2, #80	; 0x50
   1cf88:	705a      	strb	r2, [r3, #1]
	simEvent[2] = '_';					//chnage the recording when playing from flash, as sim800c does not have enough space right now.
   1cf8a:	4ba4      	ldr	r3, [pc, #656]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cf8c:	225f      	movs	r2, #95	; 0x5f
   1cf8e:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
   1cf90:	4ba2      	ldr	r3, [pc, #648]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cf92:	2246      	movs	r2, #70	; 0x46
   1cf94:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
   1cf96:	4ba1      	ldr	r3, [pc, #644]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cf98:	2247      	movs	r2, #71	; 0x47
   1cf9a:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
   1cf9c:	4b9f      	ldr	r3, [pc, #636]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cf9e:	224c      	movs	r2, #76	; 0x4c
   1cfa0:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
   1cfa2:	4b9e      	ldr	r3, [pc, #632]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cfa4:	2243      	movs	r2, #67	; 0x43
   1cfa6:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
   1cfa8:	4b9c      	ldr	r3, [pc, #624]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cfaa:	2253      	movs	r2, #83	; 0x53
   1cfac:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
   1cfae:	4b9b      	ldr	r3, [pc, #620]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cfb0:	224f      	movs	r2, #79	; 0x4f
   1cfb2:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
   1cfb4:	4b99      	ldr	r3, [pc, #612]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cfb6:	2241      	movs	r2, #65	; 0x41
   1cfb8:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
   1cfba:	4b98      	ldr	r3, [pc, #608]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cfbc:	2229      	movs	r2, #41	; 0x29
   1cfbe:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
   1cfc0:	4b96      	ldr	r3, [pc, #600]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cfc2:	225b      	movs	r2, #91	; 0x5b
   1cfc4:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1cfc6:	4b93      	ldr	r3, [pc, #588]	; (1d214 <vTask_MOTORCONTROL+0x3f4>)
   1cfc8:	785b      	ldrb	r3, [r3, #1]
   1cfca:	2b00      	cmp	r3, #0
   1cfcc:	d005      	beq.n	1cfda <vTask_MOTORCONTROL+0x1ba>
	{
		simEvent[12] = 'B';		//Overload Event
   1cfce:	4b93      	ldr	r3, [pc, #588]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cfd0:	2242      	movs	r2, #66	; 0x42
   1cfd2:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
   1cfd4:	4b91      	ldr	r3, [pc, #580]	; (1d21c <vTask_MOTORCONTROL+0x3fc>)
   1cfd6:	224a      	movs	r2, #74	; 0x4a
   1cfd8:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
   1cfda:	2001      	movs	r0, #1
   1cfdc:	4b90      	ldr	r3, [pc, #576]	; (1d220 <vTask_MOTORCONTROL+0x400>)
   1cfde:	4798      	blx	r3
	eventOccured=true;
   1cfe0:	4b6d      	ldr	r3, [pc, #436]	; (1d198 <vTask_MOTORCONTROL+0x378>)
   1cfe2:	2201      	movs	r2, #1
   1cfe4:	701a      	strb	r2, [r3, #0]
	//port_pin_set_config(PIN_PA10, &adc_pin_config);
	//port_pin_set_config(PIN_PA11, &adc_pin_config);
	
	for (;;)
	{
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1cfe6:	4b8f      	ldr	r3, [pc, #572]	; (1d224 <vTask_MOTORCONTROL+0x404>)
   1cfe8:	681a      	ldr	r2, [r3, #0]
   1cfea:	2301      	movs	r3, #1
   1cfec:	425b      	negs	r3, r3
   1cfee:	0019      	movs	r1, r3
   1cff0:	0010      	movs	r0, r2
   1cff2:	4b8d      	ldr	r3, [pc, #564]	; (1d228 <vTask_MOTORCONTROL+0x408>)
   1cff4:	4798      	blx	r3
		if(taskPSet)
   1cff6:	4b8d      	ldr	r3, [pc, #564]	; (1d22c <vTask_MOTORCONTROL+0x40c>)
   1cff8:	781b      	ldrb	r3, [r3, #0]
   1cffa:	b2db      	uxtb	r3, r3
   1cffc:	2b00      	cmp	r3, #0
   1cffe:	d006      	beq.n	1d00e <vTask_MOTORCONTROL+0x1ee>
		{
			vTaskPrioritySet(NULL,1);
   1d000:	2101      	movs	r1, #1
   1d002:	2000      	movs	r0, #0
   1d004:	4b8a      	ldr	r3, [pc, #552]	; (1d230 <vTask_MOTORCONTROL+0x410>)
   1d006:	4798      	blx	r3
			taskPSet=false;
   1d008:	4b88      	ldr	r3, [pc, #544]	; (1d22c <vTask_MOTORCONTROL+0x40c>)
   1d00a:	2200      	movs	r2, #0
   1d00c:	701a      	strb	r2, [r3, #0]
		}
		xSemaphoreGive(xButton_Semaphore);
   1d00e:	4b85      	ldr	r3, [pc, #532]	; (1d224 <vTask_MOTORCONTROL+0x404>)
   1d010:	6818      	ldr	r0, [r3, #0]
   1d012:	2300      	movs	r3, #0
   1d014:	2200      	movs	r2, #0
   1d016:	2100      	movs	r1, #0
   1d018:	4c86      	ldr	r4, [pc, #536]	; (1d234 <vTask_MOTORCONTROL+0x414>)
   1d01a:	47a0      	blx	r4
		
		if(!startSequenceOn && !stopSequenceOn)
   1d01c:	4b6f      	ldr	r3, [pc, #444]	; (1d1dc <vTask_MOTORCONTROL+0x3bc>)
   1d01e:	781b      	ldrb	r3, [r3, #0]
   1d020:	2201      	movs	r2, #1
   1d022:	4053      	eors	r3, r2
   1d024:	b2db      	uxtb	r3, r3
   1d026:	2b00      	cmp	r3, #0
   1d028:	d045      	beq.n	1d0b6 <vTask_MOTORCONTROL+0x296>
   1d02a:	4b6e      	ldr	r3, [pc, #440]	; (1d1e4 <vTask_MOTORCONTROL+0x3c4>)
   1d02c:	781b      	ldrb	r3, [r3, #0]
   1d02e:	2201      	movs	r2, #1
   1d030:	4053      	eors	r3, r2
   1d032:	b2db      	uxtb	r3, r3
   1d034:	2b00      	cmp	r3, #0
   1d036:	d03e      	beq.n	1d0b6 <vTask_MOTORCONTROL+0x296>
		{
			uint8_t tempEventOccured=eventOccured;
   1d038:	4b57      	ldr	r3, [pc, #348]	; (1d198 <vTask_MOTORCONTROL+0x378>)
   1d03a:	781b      	ldrb	r3, [r3, #0]
   1d03c:	b2da      	uxtb	r2, r3
   1d03e:	230f      	movs	r3, #15
   1d040:	18fb      	adds	r3, r7, r3
   1d042:	701a      	strb	r2, [r3, #0]
			//uint8_t tempButtonEventOccured=buttonEventOccured;
			
			
			if(tempEventOccured)
   1d044:	230f      	movs	r3, #15
   1d046:	18fb      	adds	r3, r7, r3
   1d048:	781b      	ldrb	r3, [r3, #0]
   1d04a:	2b00      	cmp	r3, #0
   1d04c:	d02c      	beq.n	1d0a8 <vTask_MOTORCONTROL+0x288>
			{
				if(firstEvent)
   1d04e:	4b54      	ldr	r3, [pc, #336]	; (1d1a0 <vTask_MOTORCONTROL+0x380>)
   1d050:	781b      	ldrb	r3, [r3, #0]
   1d052:	b2db      	uxtb	r3, r3
   1d054:	2b00      	cmp	r3, #0
   1d056:	d010      	beq.n	1d07a <vTask_MOTORCONTROL+0x25a>
				{
					if((xTaskGetTickCount()-delayForFirstEvent>35000L) || boolGsm_config_flag)
   1d058:	4b50      	ldr	r3, [pc, #320]	; (1d19c <vTask_MOTORCONTROL+0x37c>)
   1d05a:	4798      	blx	r3
   1d05c:	0002      	movs	r2, r0
   1d05e:	693b      	ldr	r3, [r7, #16]
   1d060:	1ad3      	subs	r3, r2, r3
   1d062:	4a75      	ldr	r2, [pc, #468]	; (1d238 <vTask_MOTORCONTROL+0x418>)
   1d064:	4293      	cmp	r3, r2
   1d066:	d804      	bhi.n	1d072 <vTask_MOTORCONTROL+0x252>
   1d068:	4b74      	ldr	r3, [pc, #464]	; (1d23c <vTask_MOTORCONTROL+0x41c>)
   1d06a:	781b      	ldrb	r3, [r3, #0]
   1d06c:	b2db      	uxtb	r3, r3
   1d06e:	2b00      	cmp	r3, #0
   1d070:	d01a      	beq.n	1d0a8 <vTask_MOTORCONTROL+0x288>
					{
						firstEvent = false;
   1d072:	4b4b      	ldr	r3, [pc, #300]	; (1d1a0 <vTask_MOTORCONTROL+0x380>)
   1d074:	2200      	movs	r2, #0
   1d076:	701a      	strb	r2, [r3, #0]
   1d078:	e016      	b.n	1d0a8 <vTask_MOTORCONTROL+0x288>
					}
				}
				else
				{
					
					if(motorFeedbackEvent)
   1d07a:	4b50      	ldr	r3, [pc, #320]	; (1d1bc <vTask_MOTORCONTROL+0x39c>)
   1d07c:	781b      	ldrb	r3, [r3, #0]
   1d07e:	b2db      	uxtb	r3, r3
   1d080:	2b00      	cmp	r3, #0
   1d082:	d00f      	beq.n	1d0a4 <vTask_MOTORCONTROL+0x284>
					{
						if((xTaskGetTickCount()-motorFeedbackEventTime>1800))
   1d084:	4b45      	ldr	r3, [pc, #276]	; (1d19c <vTask_MOTORCONTROL+0x37c>)
   1d086:	4798      	blx	r3
   1d088:	0002      	movs	r2, r0
   1d08a:	4b6d      	ldr	r3, [pc, #436]	; (1d240 <vTask_MOTORCONTROL+0x420>)
   1d08c:	681b      	ldr	r3, [r3, #0]
   1d08e:	1ad2      	subs	r2, r2, r3
   1d090:	23e1      	movs	r3, #225	; 0xe1
   1d092:	00db      	lsls	r3, r3, #3
   1d094:	429a      	cmp	r2, r3
   1d096:	d907      	bls.n	1d0a8 <vTask_MOTORCONTROL+0x288>
						{
							motorFeedbackEvent=false;
   1d098:	4b48      	ldr	r3, [pc, #288]	; (1d1bc <vTask_MOTORCONTROL+0x39c>)
   1d09a:	2200      	movs	r2, #0
   1d09c:	701a      	strb	r2, [r3, #0]
							operateOnEvent();
   1d09e:	4b69      	ldr	r3, [pc, #420]	; (1d244 <vTask_MOTORCONTROL+0x424>)
   1d0a0:	4798      	blx	r3
   1d0a2:	e001      	b.n	1d0a8 <vTask_MOTORCONTROL+0x288>
						}
					}
					else
					{
						operateOnEvent();
   1d0a4:	4b67      	ldr	r3, [pc, #412]	; (1d244 <vTask_MOTORCONTROL+0x424>)
   1d0a6:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
   1d0a8:	4b57      	ldr	r3, [pc, #348]	; (1d208 <vTask_MOTORCONTROL+0x3e8>)
   1d0aa:	781b      	ldrb	r3, [r3, #0]
   1d0ac:	b2db      	uxtb	r3, r3
   1d0ae:	2b00      	cmp	r3, #0
   1d0b0:	d001      	beq.n	1d0b6 <vTask_MOTORCONTROL+0x296>
			{
				buttonFilter();
   1d0b2:	4b65      	ldr	r3, [pc, #404]	; (1d248 <vTask_MOTORCONTROL+0x428>)
   1d0b4:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
   1d0b6:	4b65      	ldr	r3, [pc, #404]	; (1d24c <vTask_MOTORCONTROL+0x42c>)
   1d0b8:	4798      	blx	r3
   1d0ba:	1e03      	subs	r3, r0, #0
   1d0bc:	d003      	beq.n	1d0c6 <vTask_MOTORCONTROL+0x2a6>
					detect_battery_voltage_and_percentage();
   1d0be:	4b64      	ldr	r3, [pc, #400]	; (1d250 <vTask_MOTORCONTROL+0x430>)
   1d0c0:	4798      	blx	r3
					detect_Three_Phase_Voltage();
   1d0c2:	4b64      	ldr	r3, [pc, #400]	; (1d254 <vTask_MOTORCONTROL+0x434>)
   1d0c4:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1d0c6:	4b53      	ldr	r3, [pc, #332]	; (1d214 <vTask_MOTORCONTROL+0x3f4>)
   1d0c8:	785b      	ldrb	r3, [r3, #1]
   1d0ca:	2b00      	cmp	r3, #0
   1d0cc:	d014      	beq.n	1d0f8 <vTask_MOTORCONTROL+0x2d8>
		{
			if(should_Detect_New_Current()) {
   1d0ce:	4b62      	ldr	r3, [pc, #392]	; (1d258 <vTask_MOTORCONTROL+0x438>)
   1d0d0:	4798      	blx	r3
   1d0d2:	1e03      	subs	r3, r0, #0
   1d0d4:	d010      	beq.n	1d0f8 <vTask_MOTORCONTROL+0x2d8>
				detect_Motor_Current();
   1d0d6:	4b61      	ldr	r3, [pc, #388]	; (1d25c <vTask_MOTORCONTROL+0x43c>)
   1d0d8:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
   1d0da:	4b61      	ldr	r3, [pc, #388]	; (1d260 <vTask_MOTORCONTROL+0x440>)
   1d0dc:	2225      	movs	r2, #37	; 0x25
   1d0de:	5c9b      	ldrb	r3, [r3, r2]
   1d0e0:	b2db      	uxtb	r3, r3
   1d0e2:	2b01      	cmp	r3, #1
   1d0e4:	d106      	bne.n	1d0f4 <vTask_MOTORCONTROL+0x2d4>
				{
					if(detectMotorStateChangeUsingCurrent())
   1d0e6:	4b5f      	ldr	r3, [pc, #380]	; (1d264 <vTask_MOTORCONTROL+0x444>)
   1d0e8:	4798      	blx	r3
   1d0ea:	1e03      	subs	r3, r0, #0
   1d0ec:	d002      	beq.n	1d0f4 <vTask_MOTORCONTROL+0x2d4>
					{
						eventOccured=true;
   1d0ee:	4b2a      	ldr	r3, [pc, #168]	; (1d198 <vTask_MOTORCONTROL+0x378>)
   1d0f0:	2201      	movs	r2, #1
   1d0f2:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
   1d0f4:	4b5c      	ldr	r3, [pc, #368]	; (1d268 <vTask_MOTORCONTROL+0x448>)
   1d0f6:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
   1d0f8:	4b33      	ldr	r3, [pc, #204]	; (1d1c8 <vTask_MOTORCONTROL+0x3a8>)
   1d0fa:	781b      	ldrb	r3, [r3, #0]
   1d0fc:	2b00      	cmp	r3, #0
   1d0fe:	d005      	beq.n	1d10c <vTask_MOTORCONTROL+0x2ec>
   1d100:	4b5a      	ldr	r3, [pc, #360]	; (1d26c <vTask_MOTORCONTROL+0x44c>)
   1d102:	4798      	blx	r3
   1d104:	1e03      	subs	r3, r0, #0
   1d106:	d001      	beq.n	1d10c <vTask_MOTORCONTROL+0x2ec>
		{
			operateOnStableLine();
   1d108:	4b59      	ldr	r3, [pc, #356]	; (1d270 <vTask_MOTORCONTROL+0x450>)
   1d10a:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000L)
   1d10c:	4b2a      	ldr	r3, [pc, #168]	; (1d1b8 <vTask_MOTORCONTROL+0x398>)
   1d10e:	781b      	ldrb	r3, [r3, #0]
   1d110:	2b00      	cmp	r3, #0
   1d112:	d00b      	beq.n	1d12c <vTask_MOTORCONTROL+0x30c>
   1d114:	4b21      	ldr	r3, [pc, #132]	; (1d19c <vTask_MOTORCONTROL+0x37c>)
   1d116:	4798      	blx	r3
   1d118:	0002      	movs	r2, r0
   1d11a:	4b56      	ldr	r3, [pc, #344]	; (1d274 <vTask_MOTORCONTROL+0x454>)
   1d11c:	681b      	ldr	r3, [r3, #0]
   1d11e:	1ad3      	subs	r3, r2, r3
   1d120:	4a55      	ldr	r2, [pc, #340]	; (1d278 <vTask_MOTORCONTROL+0x458>)
   1d122:	4293      	cmp	r3, r2
   1d124:	d902      	bls.n	1d12c <vTask_MOTORCONTROL+0x30c>
		{
			stopMotorCommandGiven=false;
   1d126:	4b24      	ldr	r3, [pc, #144]	; (1d1b8 <vTask_MOTORCONTROL+0x398>)
   1d128:	2200      	movs	r2, #0
   1d12a:	701a      	strb	r2, [r3, #0]
		}
		
		if(motorRelatedVoltageBypassOn)
   1d12c:	4b37      	ldr	r3, [pc, #220]	; (1d20c <vTask_MOTORCONTROL+0x3ec>)
   1d12e:	781b      	ldrb	r3, [r3, #0]
   1d130:	2b00      	cmp	r3, #0
   1d132:	d006      	beq.n	1d142 <vTask_MOTORCONTROL+0x322>
		{
			if(MotorVoltageBypassTimerOver())
   1d134:	4b51      	ldr	r3, [pc, #324]	; (1d27c <vTask_MOTORCONTROL+0x45c>)
   1d136:	4798      	blx	r3
   1d138:	1e03      	subs	r3, r0, #0
   1d13a:	d002      	beq.n	1d142 <vTask_MOTORCONTROL+0x322>
			{
				motorRelatedVoltageBypassOn=false;
   1d13c:	4b33      	ldr	r3, [pc, #204]	; (1d20c <vTask_MOTORCONTROL+0x3ec>)
   1d13e:	2200      	movs	r2, #0
   1d140:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(singlePhasingTimerOn)
   1d142:	4b23      	ldr	r3, [pc, #140]	; (1d1d0 <vTask_MOTORCONTROL+0x3b0>)
   1d144:	781b      	ldrb	r3, [r3, #0]
   1d146:	2b00      	cmp	r3, #0
   1d148:	d100      	bne.n	1d14c <vTask_MOTORCONTROL+0x32c>
   1d14a:	e0a2      	b.n	1d292 <vTask_MOTORCONTROL+0x472>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
   1d14c:	4b4c      	ldr	r3, [pc, #304]	; (1d280 <vTask_MOTORCONTROL+0x460>)
   1d14e:	785b      	ldrb	r3, [r3, #1]
   1d150:	b2db      	uxtb	r3, r3
   1d152:	2b03      	cmp	r3, #3
   1d154:	d003      	beq.n	1d15e <vTask_MOTORCONTROL+0x33e>
			{
				b = false;
   1d156:	2316      	movs	r3, #22
   1d158:	18fb      	adds	r3, r7, r3
   1d15a:	2200      	movs	r2, #0
   1d15c:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
   1d15e:	2316      	movs	r3, #22
   1d160:	18fb      	adds	r3, r7, r3
   1d162:	781b      	ldrb	r3, [r3, #0]
   1d164:	2201      	movs	r2, #1
   1d166:	4053      	eors	r3, r2
   1d168:	b2db      	uxtb	r3, r3
   1d16a:	2b00      	cmp	r3, #0
   1d16c:	d100      	bne.n	1d170 <vTask_MOTORCONTROL+0x350>
   1d16e:	e08d      	b.n	1d28c <vTask_MOTORCONTROL+0x46c>
			{
				if(singlePhasingTimerOver())
   1d170:	4b44      	ldr	r3, [pc, #272]	; (1d284 <vTask_MOTORCONTROL+0x464>)
   1d172:	4798      	blx	r3
   1d174:	1e03      	subs	r3, r0, #0
   1d176:	d100      	bne.n	1d17a <vTask_MOTORCONTROL+0x35a>
   1d178:	e08b      	b.n	1d292 <vTask_MOTORCONTROL+0x472>
				{
					operateOnSinglePhasing();
   1d17a:	4b43      	ldr	r3, [pc, #268]	; (1d288 <vTask_MOTORCONTROL+0x468>)
   1d17c:	4798      	blx	r3
   1d17e:	e088      	b.n	1d292 <vTask_MOTORCONTROL+0x472>
   1d180:	0001a989 	.word	0x0001a989
   1d184:	0001d7b1 	.word	0x0001d7b1
   1d188:	20000a45 	.word	0x20000a45
   1d18c:	200009a0 	.word	0x200009a0
   1d190:	20000a10 	.word	0x20000a10
   1d194:	20000914 	.word	0x20000914
   1d198:	2000092e 	.word	0x2000092e
   1d19c:	00020dad 	.word	0x00020dad
   1d1a0:	20000976 	.word	0x20000976
   1d1a4:	20000a90 	.word	0x20000a90
   1d1a8:	00019b65 	.word	0x00019b65
   1d1ac:	00020a49 	.word	0x00020a49
   1d1b0:	2000098d 	.word	0x2000098d
   1d1b4:	20000a46 	.word	0x20000a46
   1d1b8:	20000a64 	.word	0x20000a64
   1d1bc:	2000098a 	.word	0x2000098a
   1d1c0:	2000099a 	.word	0x2000099a
   1d1c4:	200009e1 	.word	0x200009e1
   1d1c8:	20000a11 	.word	0x20000a11
   1d1cc:	20000970 	.word	0x20000970
   1d1d0:	20000991 	.word	0x20000991
   1d1d4:	20000a1c 	.word	0x20000a1c
   1d1d8:	2000099b 	.word	0x2000099b
   1d1dc:	20000999 	.word	0x20000999
   1d1e0:	20000a67 	.word	0x20000a67
   1d1e4:	20000988 	.word	0x20000988
   1d1e8:	0001bb9d 	.word	0x0001bb9d
   1d1ec:	0001bc05 	.word	0x0001bc05
   1d1f0:	0001bb69 	.word	0x0001bb69
   1d1f4:	200009b4 	.word	0x200009b4
   1d1f8:	0001b3f1 	.word	0x0001b3f1
   1d1fc:	20000930 	.word	0x20000930
   1d200:	200009e4 	.word	0x200009e4
   1d204:	20000968 	.word	0x20000968
   1d208:	20000980 	.word	0x20000980
   1d20c:	20000973 	.word	0x20000973
   1d210:	20000984 	.word	0x20000984
   1d214:	2000082c 	.word	0x2000082c
   1d218:	20000918 	.word	0x20000918
   1d21c:	200009fc 	.word	0x200009fc
   1d220:	0001bef9 	.word	0x0001bef9
   1d224:	20000434 	.word	0x20000434
   1d228:	00020141 	.word	0x00020141
   1d22c:	20000a84 	.word	0x20000a84
   1d230:	00020aa5 	.word	0x00020aa5
   1d234:	0001fca1 	.word	0x0001fca1
   1d238:	000088b8 	.word	0x000088b8
   1d23c:	200009c8 	.word	0x200009c8
   1d240:	20000a60 	.word	0x20000a60
   1d244:	0001bf9d 	.word	0x0001bf9d
   1d248:	0001d9a5 	.word	0x0001d9a5
   1d24c:	0001b315 	.word	0x0001b315
   1d250:	0001b331 	.word	0x0001b331
   1d254:	0001b64d 	.word	0x0001b64d
   1d258:	0001bb39 	.word	0x0001bb39
   1d25c:	0001b91d 	.word	0x0001b91d
   1d260:	20000854 	.word	0x20000854
   1d264:	0001bdd9 	.word	0x0001bdd9
   1d268:	0001cc01 	.word	0x0001cc01
   1d26c:	0001c2c9 	.word	0x0001c2c9
   1d270:	0001c181 	.word	0x0001c181
   1d274:	200009ac 	.word	0x200009ac
   1d278:	00001388 	.word	0x00001388
   1d27c:	0001cbd1 	.word	0x0001cbd1
   1d280:	20000948 	.word	0x20000948
   1d284:	0001c659 	.word	0x0001c659
   1d288:	0001c6a5 	.word	0x0001c6a5
				}
			}
			else
			{
				singlePhasingTimerOn=false;
   1d28c:	4b15      	ldr	r3, [pc, #84]	; (1d2e4 <vTask_MOTORCONTROL+0x4c4>)
   1d28e:	2200      	movs	r2, #0
   1d290:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
   1d292:	4b15      	ldr	r3, [pc, #84]	; (1d2e8 <vTask_MOTORCONTROL+0x4c8>)
   1d294:	781b      	ldrb	r3, [r3, #0]
   1d296:	2b00      	cmp	r3, #0
   1d298:	d007      	beq.n	1d2aa <vTask_MOTORCONTROL+0x48a>
		{
			if (startMotorTimerOver())
   1d29a:	4b14      	ldr	r3, [pc, #80]	; (1d2ec <vTask_MOTORCONTROL+0x4cc>)
   1d29c:	4798      	blx	r3
   1d29e:	1e03      	subs	r3, r0, #0
   1d2a0:	d003      	beq.n	1d2aa <vTask_MOTORCONTROL+0x48a>
			{
				startMotor(false,false);
   1d2a2:	2100      	movs	r1, #0
   1d2a4:	2000      	movs	r0, #0
   1d2a6:	4b12      	ldr	r3, [pc, #72]	; (1d2f0 <vTask_MOTORCONTROL+0x4d0>)
   1d2a8:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
   1d2aa:	4b12      	ldr	r3, [pc, #72]	; (1d2f4 <vTask_MOTORCONTROL+0x4d4>)
   1d2ac:	781b      	ldrb	r3, [r3, #0]
   1d2ae:	2b00      	cmp	r3, #0
   1d2b0:	d001      	beq.n	1d2b6 <vTask_MOTORCONTROL+0x496>
		{
			terminateStartRelay();
   1d2b2:	4b11      	ldr	r3, [pc, #68]	; (1d2f8 <vTask_MOTORCONTROL+0x4d8>)
   1d2b4:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
   1d2b6:	4b11      	ldr	r3, [pc, #68]	; (1d2fc <vTask_MOTORCONTROL+0x4dc>)
   1d2b8:	781b      	ldrb	r3, [r3, #0]
   1d2ba:	2b00      	cmp	r3, #0
   1d2bc:	d001      	beq.n	1d2c2 <vTask_MOTORCONTROL+0x4a2>
		{
			terminateStarDeltaTimer();
   1d2be:	4b10      	ldr	r3, [pc, #64]	; (1d300 <vTask_MOTORCONTROL+0x4e0>)
   1d2c0:	4798      	blx	r3
		}
		if(stopSequenceOn)
   1d2c2:	4b10      	ldr	r3, [pc, #64]	; (1d304 <vTask_MOTORCONTROL+0x4e4>)
   1d2c4:	781b      	ldrb	r3, [r3, #0]
   1d2c6:	2b00      	cmp	r3, #0
   1d2c8:	d001      	beq.n	1d2ce <vTask_MOTORCONTROL+0x4ae>
		{
			terminateStopRelay();
   1d2ca:	4b0f      	ldr	r3, [pc, #60]	; (1d308 <vTask_MOTORCONTROL+0x4e8>)
   1d2cc:	4798      	blx	r3
		}
		
		SIMEventManager();
   1d2ce:	4b0f      	ldr	r3, [pc, #60]	; (1d30c <vTask_MOTORCONTROL+0x4ec>)
   1d2d0:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1d2d2:	4b0f      	ldr	r3, [pc, #60]	; (1d310 <vTask_MOTORCONTROL+0x4f0>)
   1d2d4:	78db      	ldrb	r3, [r3, #3]
   1d2d6:	2b00      	cmp	r3, #0
   1d2d8:	d100      	bne.n	1d2dc <vTask_MOTORCONTROL+0x4bc>
   1d2da:	e684      	b.n	1cfe6 <vTask_MOTORCONTROL+0x1c6>
		{
			M2MEventManager();
   1d2dc:	4b0d      	ldr	r3, [pc, #52]	; (1d314 <vTask_MOTORCONTROL+0x4f4>)
   1d2de:	4798      	blx	r3
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1d2e0:	e681      	b.n	1cfe6 <vTask_MOTORCONTROL+0x1c6>
   1d2e2:	46c0      	nop			; (mov r8, r8)
   1d2e4:	20000991 	.word	0x20000991
   1d2e8:	2000099a 	.word	0x2000099a
   1d2ec:	0001c5f1 	.word	0x0001c5f1
   1d2f0:	0001c315 	.word	0x0001c315
   1d2f4:	20000999 	.word	0x20000999
   1d2f8:	0001c829 	.word	0x0001c829
   1d2fc:	2000099b 	.word	0x2000099b
   1d300:	0001c7b5 	.word	0x0001c7b5
   1d304:	20000988 	.word	0x20000988
   1d308:	0001c6e1 	.word	0x0001c6e1
   1d30c:	0001cb39 	.word	0x0001cb39
   1d310:	2000082c 	.word	0x2000082c
   1d314:	0001caf5 	.word	0x0001caf5

0001d318 <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
   1d318:	b590      	push	{r4, r7, lr}
   1d31a:	b08b      	sub	sp, #44	; 0x2c
   1d31c:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
   1d31e:	2314      	movs	r3, #20
   1d320:	18fb      	adds	r3, r7, r3
   1d322:	0018      	movs	r0, r3
   1d324:	4bae      	ldr	r3, [pc, #696]	; (1d5e0 <start_motor_service+0x2c8>)
   1d326:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
   1d328:	2314      	movs	r3, #20
   1d32a:	18fb      	adds	r3, r7, r3
   1d32c:	222b      	movs	r2, #43	; 0x2b
   1d32e:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
   1d330:	2314      	movs	r3, #20
   1d332:	18fb      	adds	r3, r7, r3
   1d334:	2200      	movs	r2, #0
   1d336:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
   1d338:	2314      	movs	r3, #20
   1d33a:	18fb      	adds	r3, r7, r3
   1d33c:	2201      	movs	r2, #1
   1d33e:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
   1d340:	2314      	movs	r3, #20
   1d342:	18fb      	adds	r3, r7, r3
   1d344:	2201      	movs	r2, #1
   1d346:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = true;
   1d348:	2314      	movs	r3, #20
   1d34a:	18fb      	adds	r3, r7, r3
   1d34c:	2201      	movs	r2, #1
   1d34e:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
   1d350:	2314      	movs	r3, #20
   1d352:	18fb      	adds	r3, r7, r3
   1d354:	0019      	movs	r1, r3
   1d356:	200b      	movs	r0, #11
   1d358:	4ba2      	ldr	r3, [pc, #648]	; (1d5e4 <start_motor_service+0x2cc>)
   1d35a:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
   1d35c:	4ba2      	ldr	r3, [pc, #648]	; (1d5e8 <start_motor_service+0x2d0>)
   1d35e:	2200      	movs	r2, #0
   1d360:	210b      	movs	r1, #11
   1d362:	0018      	movs	r0, r3
   1d364:	4ba1      	ldr	r3, [pc, #644]	; (1d5ec <start_motor_service+0x2d4>)
   1d366:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
   1d368:	2100      	movs	r1, #0
   1d36a:	200b      	movs	r0, #11
   1d36c:	4ba0      	ldr	r3, [pc, #640]	; (1d5f0 <start_motor_service+0x2d8>)
   1d36e:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
   1d370:	2310      	movs	r3, #16
   1d372:	18fb      	adds	r3, r7, r3
   1d374:	0018      	movs	r0, r3
   1d376:	4b9f      	ldr	r3, [pc, #636]	; (1d5f4 <start_motor_service+0x2dc>)
   1d378:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
   1d37a:	2310      	movs	r3, #16
   1d37c:	18fb      	adds	r3, r7, r3
   1d37e:	2200      	movs	r2, #0
   1d380:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
   1d382:	2310      	movs	r3, #16
   1d384:	18fb      	adds	r3, r7, r3
   1d386:	2201      	movs	r2, #1
   1d388:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
   1d38a:	2310      	movs	r3, #16
   1d38c:	18fb      	adds	r3, r7, r3
   1d38e:	0019      	movs	r1, r3
   1d390:	202a      	movs	r0, #42	; 0x2a
   1d392:	4b99      	ldr	r3, [pc, #612]	; (1d5f8 <start_motor_service+0x2e0>)
   1d394:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
   1d396:	2203      	movs	r2, #3
   1d398:	2100      	movs	r1, #0
   1d39a:	2001      	movs	r0, #1
   1d39c:	4b97      	ldr	r3, [pc, #604]	; (1d5fc <start_motor_service+0x2e4>)
   1d39e:	4798      	blx	r3
   1d3a0:	0002      	movs	r2, r0
   1d3a2:	4b97      	ldr	r3, [pc, #604]	; (1d600 <start_motor_service+0x2e8>)
   1d3a4:	601a      	str	r2, [r3, #0]
   1d3a6:	4b96      	ldr	r3, [pc, #600]	; (1d600 <start_motor_service+0x2e8>)
   1d3a8:	681b      	ldr	r3, [r3, #0]
   1d3aa:	2b00      	cmp	r3, #0
   1d3ac:	d006      	beq.n	1d3bc <start_motor_service+0xa4>
   1d3ae:	4b94      	ldr	r3, [pc, #592]	; (1d600 <start_motor_service+0x2e8>)
   1d3b0:	6818      	ldr	r0, [r3, #0]
   1d3b2:	2300      	movs	r3, #0
   1d3b4:	2200      	movs	r2, #0
   1d3b6:	2100      	movs	r1, #0
   1d3b8:	4c92      	ldr	r4, [pc, #584]	; (1d604 <start_motor_service+0x2ec>)
   1d3ba:	47a0      	blx	r4
	
	vSemaphoreCreateBinary(xButton_Semaphore);
   1d3bc:	2203      	movs	r2, #3
   1d3be:	2100      	movs	r1, #0
   1d3c0:	2001      	movs	r0, #1
   1d3c2:	4b8e      	ldr	r3, [pc, #568]	; (1d5fc <start_motor_service+0x2e4>)
   1d3c4:	4798      	blx	r3
   1d3c6:	0002      	movs	r2, r0
   1d3c8:	4b8f      	ldr	r3, [pc, #572]	; (1d608 <start_motor_service+0x2f0>)
   1d3ca:	601a      	str	r2, [r3, #0]
   1d3cc:	4b8e      	ldr	r3, [pc, #568]	; (1d608 <start_motor_service+0x2f0>)
   1d3ce:	681b      	ldr	r3, [r3, #0]
   1d3d0:	2b00      	cmp	r3, #0
   1d3d2:	d006      	beq.n	1d3e2 <start_motor_service+0xca>
   1d3d4:	4b8c      	ldr	r3, [pc, #560]	; (1d608 <start_motor_service+0x2f0>)
   1d3d6:	6818      	ldr	r0, [r3, #0]
   1d3d8:	2300      	movs	r3, #0
   1d3da:	2200      	movs	r2, #0
   1d3dc:	2100      	movs	r1, #0
   1d3de:	4c89      	ldr	r4, [pc, #548]	; (1d604 <start_motor_service+0x2ec>)
   1d3e0:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
   1d3e2:	230c      	movs	r3, #12
   1d3e4:	18fb      	adds	r3, r7, r3
   1d3e6:	0018      	movs	r0, r3
   1d3e8:	4b82      	ldr	r3, [pc, #520]	; (1d5f4 <start_motor_service+0x2dc>)
   1d3ea:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
   1d3ec:	230c      	movs	r3, #12
   1d3ee:	18fb      	adds	r3, r7, r3
   1d3f0:	2201      	movs	r2, #1
   1d3f2:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
   1d3f4:	230c      	movs	r3, #12
   1d3f6:	18fb      	adds	r3, r7, r3
   1d3f8:	2200      	movs	r2, #0
   1d3fa:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
   1d3fc:	230c      	movs	r3, #12
   1d3fe:	18fb      	adds	r3, r7, r3
   1d400:	0019      	movs	r1, r3
   1d402:	202d      	movs	r0, #45	; 0x2d
   1d404:	4b7c      	ldr	r3, [pc, #496]	; (1d5f8 <start_motor_service+0x2e0>)
   1d406:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
   1d408:	230c      	movs	r3, #12
   1d40a:	18fb      	adds	r3, r7, r3
   1d40c:	0019      	movs	r1, r3
   1d40e:	202c      	movs	r0, #44	; 0x2c
   1d410:	4b79      	ldr	r3, [pc, #484]	; (1d5f8 <start_motor_service+0x2e0>)
   1d412:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
   1d414:	230c      	movs	r3, #12
   1d416:	18fb      	adds	r3, r7, r3
   1d418:	0019      	movs	r1, r3
   1d41a:	2028      	movs	r0, #40	; 0x28
   1d41c:	4b76      	ldr	r3, [pc, #472]	; (1d5f8 <start_motor_service+0x2e0>)
   1d41e:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
   1d420:	230c      	movs	r3, #12
   1d422:	18fb      	adds	r3, r7, r3
   1d424:	0019      	movs	r1, r3
   1d426:	2027      	movs	r0, #39	; 0x27
   1d428:	4b73      	ldr	r3, [pc, #460]	; (1d5f8 <start_motor_service+0x2e0>)
   1d42a:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
   1d42c:	230c      	movs	r3, #12
   1d42e:	18fb      	adds	r3, r7, r3
   1d430:	0019      	movs	r1, r3
   1d432:	2005      	movs	r0, #5
   1d434:	4b70      	ldr	r3, [pc, #448]	; (1d5f8 <start_motor_service+0x2e0>)
   1d436:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
   1d438:	2101      	movs	r1, #1
   1d43a:	2028      	movs	r0, #40	; 0x28
   1d43c:	4b73      	ldr	r3, [pc, #460]	; (1d60c <start_motor_service+0x2f4>)
   1d43e:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
   1d440:	2101      	movs	r1, #1
   1d442:	2005      	movs	r0, #5
   1d444:	4b71      	ldr	r3, [pc, #452]	; (1d60c <start_motor_service+0x2f4>)
   1d446:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
   1d448:	2101      	movs	r1, #1
   1d44a:	2027      	movs	r0, #39	; 0x27
   1d44c:	4b6f      	ldr	r3, [pc, #444]	; (1d60c <start_motor_service+0x2f4>)
   1d44e:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   1d450:	003b      	movs	r3, r7
   1d452:	0018      	movs	r0, r3
   1d454:	4b62      	ldr	r3, [pc, #392]	; (1d5e0 <start_motor_service+0x2c8>)
   1d456:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
   1d458:	003b      	movs	r3, r7
   1d45a:	222e      	movs	r2, #46	; 0x2e
   1d45c:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
   1d45e:	003b      	movs	r3, r7
   1d460:	2200      	movs	r2, #0
   1d462:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
   1d464:	003b      	movs	r3, r7
   1d466:	2200      	movs	r2, #0
   1d468:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1d46a:	003b      	movs	r3, r7
   1d46c:	2203      	movs	r2, #3
   1d46e:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
   1d470:	003b      	movs	r3, r7
   1d472:	0019      	movs	r1, r3
   1d474:	200e      	movs	r0, #14
   1d476:	4b5b      	ldr	r3, [pc, #364]	; (1d5e4 <start_motor_service+0x2cc>)
   1d478:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1d47a:	2100      	movs	r1, #0
   1d47c:	200e      	movs	r0, #14
   1d47e:	4b5c      	ldr	r3, [pc, #368]	; (1d5f0 <start_motor_service+0x2d8>)
   1d480:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1d482:	4b63      	ldr	r3, [pc, #396]	; (1d610 <start_motor_service+0x2f8>)
   1d484:	2200      	movs	r2, #0
   1d486:	210e      	movs	r1, #14
   1d488:	0018      	movs	r0, r3
   1d48a:	4b58      	ldr	r3, [pc, #352]	; (1d5ec <start_motor_service+0x2d4>)
   1d48c:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
   1d48e:	003b      	movs	r3, r7
   1d490:	2226      	movs	r2, #38	; 0x26
   1d492:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
   1d494:	003b      	movs	r3, r7
   1d496:	2200      	movs	r2, #0
   1d498:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1d49a:	003b      	movs	r3, r7
   1d49c:	2201      	movs	r2, #1
   1d49e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1d4a0:	003b      	movs	r3, r7
   1d4a2:	2202      	movs	r2, #2
   1d4a4:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
   1d4a6:	003b      	movs	r3, r7
   1d4a8:	0019      	movs	r1, r3
   1d4aa:	2006      	movs	r0, #6
   1d4ac:	4b4d      	ldr	r3, [pc, #308]	; (1d5e4 <start_motor_service+0x2cc>)
   1d4ae:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1d4b0:	2100      	movs	r1, #0
   1d4b2:	2006      	movs	r0, #6
   1d4b4:	4b4e      	ldr	r3, [pc, #312]	; (1d5f0 <start_motor_service+0x2d8>)
   1d4b6:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1d4b8:	4b56      	ldr	r3, [pc, #344]	; (1d614 <start_motor_service+0x2fc>)
   1d4ba:	2200      	movs	r2, #0
   1d4bc:	2106      	movs	r1, #6
   1d4be:	0018      	movs	r0, r3
   1d4c0:	4b4a      	ldr	r3, [pc, #296]	; (1d5ec <start_motor_service+0x2d4>)
   1d4c2:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
   1d4c4:	003b      	movs	r3, r7
   1d4c6:	2225      	movs	r2, #37	; 0x25
   1d4c8:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
   1d4ca:	003b      	movs	r3, r7
   1d4cc:	2200      	movs	r2, #0
   1d4ce:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1d4d0:	003b      	movs	r3, r7
   1d4d2:	2201      	movs	r2, #1
   1d4d4:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1d4d6:	003b      	movs	r3, r7
   1d4d8:	2202      	movs	r2, #2
   1d4da:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
   1d4dc:	003b      	movs	r3, r7
   1d4de:	0019      	movs	r1, r3
   1d4e0:	2005      	movs	r0, #5
   1d4e2:	4b40      	ldr	r3, [pc, #256]	; (1d5e4 <start_motor_service+0x2cc>)
   1d4e4:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1d4e6:	2100      	movs	r1, #0
   1d4e8:	2005      	movs	r0, #5
   1d4ea:	4b41      	ldr	r3, [pc, #260]	; (1d5f0 <start_motor_service+0x2d8>)
   1d4ec:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1d4ee:	4b49      	ldr	r3, [pc, #292]	; (1d614 <start_motor_service+0x2fc>)
   1d4f0:	2200      	movs	r2, #0
   1d4f2:	2105      	movs	r1, #5
   1d4f4:	0018      	movs	r0, r3
   1d4f6:	4b3d      	ldr	r3, [pc, #244]	; (1d5ec <start_motor_service+0x2d4>)
   1d4f8:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
   1d4fa:	003b      	movs	r3, r7
   1d4fc:	221c      	movs	r2, #28
   1d4fe:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
   1d500:	003b      	movs	r3, r7
   1d502:	2200      	movs	r2, #0
   1d504:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1d506:	003b      	movs	r3, r7
   1d508:	2201      	movs	r2, #1
   1d50a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1d50c:	003b      	movs	r3, r7
   1d50e:	2202      	movs	r2, #2
   1d510:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
   1d512:	003b      	movs	r3, r7
   1d514:	0019      	movs	r1, r3
   1d516:	2008      	movs	r0, #8
   1d518:	4b32      	ldr	r3, [pc, #200]	; (1d5e4 <start_motor_service+0x2cc>)
   1d51a:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1d51c:	2100      	movs	r1, #0
   1d51e:	2008      	movs	r0, #8
   1d520:	4b33      	ldr	r3, [pc, #204]	; (1d5f0 <start_motor_service+0x2d8>)
   1d522:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1d524:	4b3b      	ldr	r3, [pc, #236]	; (1d614 <start_motor_service+0x2fc>)
   1d526:	2200      	movs	r2, #0
   1d528:	2108      	movs	r1, #8
   1d52a:	0018      	movs	r0, r3
   1d52c:	4b2f      	ldr	r3, [pc, #188]	; (1d5ec <start_motor_service+0x2d4>)
   1d52e:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
   1d530:	003b      	movs	r3, r7
   1d532:	2229      	movs	r2, #41	; 0x29
   1d534:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
   1d536:	003b      	movs	r3, r7
   1d538:	2200      	movs	r2, #0
   1d53a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1d53c:	003b      	movs	r3, r7
   1d53e:	2201      	movs	r2, #1
   1d540:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1d542:	003b      	movs	r3, r7
   1d544:	2202      	movs	r2, #2
   1d546:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
   1d548:	003b      	movs	r3, r7
   1d54a:	0019      	movs	r1, r3
   1d54c:	2009      	movs	r0, #9
   1d54e:	4b25      	ldr	r3, [pc, #148]	; (1d5e4 <start_motor_service+0x2cc>)
   1d550:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1d552:	2100      	movs	r1, #0
   1d554:	2009      	movs	r0, #9
   1d556:	4b26      	ldr	r3, [pc, #152]	; (1d5f0 <start_motor_service+0x2d8>)
   1d558:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1d55a:	4b2e      	ldr	r3, [pc, #184]	; (1d614 <start_motor_service+0x2fc>)
   1d55c:	2200      	movs	r2, #0
   1d55e:	2109      	movs	r1, #9
   1d560:	0018      	movs	r0, r3
   1d562:	4b22      	ldr	r3, [pc, #136]	; (1d5ec <start_motor_service+0x2d4>)
   1d564:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1d566:	482c      	ldr	r0, [pc, #176]	; (1d618 <start_motor_service+0x300>)
   1d568:	2300      	movs	r3, #0
   1d56a:	9301      	str	r3, [sp, #4]
   1d56c:	2301      	movs	r3, #1
   1d56e:	9300      	str	r3, [sp, #0]
   1d570:	2300      	movs	r3, #0
   1d572:	2282      	movs	r2, #130	; 0x82
   1d574:	2100      	movs	r1, #0
   1d576:	4c29      	ldr	r4, [pc, #164]	; (1d61c <start_motor_service+0x304>)
   1d578:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1d57a:	4829      	ldr	r0, [pc, #164]	; (1d620 <start_motor_service+0x308>)
   1d57c:	2300      	movs	r3, #0
   1d57e:	9301      	str	r3, [sp, #4]
   1d580:	2301      	movs	r3, #1
   1d582:	9300      	str	r3, [sp, #0]
   1d584:	2300      	movs	r3, #0
   1d586:	2282      	movs	r2, #130	; 0x82
   1d588:	2100      	movs	r1, #0
   1d58a:	4c24      	ldr	r4, [pc, #144]	; (1d61c <start_motor_service+0x304>)
   1d58c:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
   1d58e:	4825      	ldr	r0, [pc, #148]	; (1d624 <start_motor_service+0x30c>)
   1d590:	4b25      	ldr	r3, [pc, #148]	; (1d628 <start_motor_service+0x310>)
   1d592:	9301      	str	r3, [sp, #4]
   1d594:	2301      	movs	r3, #1
   1d596:	9300      	str	r3, [sp, #0]
   1d598:	2300      	movs	r3, #0
   1d59a:	2282      	movs	r2, #130	; 0x82
   1d59c:	2100      	movs	r1, #0
   1d59e:	4c1f      	ldr	r4, [pc, #124]	; (1d61c <start_motor_service+0x304>)
   1d5a0:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
   1d5a2:	4b22      	ldr	r3, [pc, #136]	; (1d62c <start_motor_service+0x314>)
   1d5a4:	795b      	ldrb	r3, [r3, #5]
   1d5a6:	2b00      	cmp	r3, #0
   1d5a8:	d00a      	beq.n	1d5c0 <start_motor_service+0x2a8>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
   1d5aa:	23af      	movs	r3, #175	; 0xaf
   1d5ac:	009a      	lsls	r2, r3, #2
   1d5ae:	4820      	ldr	r0, [pc, #128]	; (1d630 <start_motor_service+0x318>)
   1d5b0:	2300      	movs	r3, #0
   1d5b2:	9301      	str	r3, [sp, #4]
   1d5b4:	2301      	movs	r3, #1
   1d5b6:	9300      	str	r3, [sp, #0]
   1d5b8:	2300      	movs	r3, #0
   1d5ba:	2100      	movs	r1, #0
   1d5bc:	4c17      	ldr	r4, [pc, #92]	; (1d61c <start_motor_service+0x304>)
   1d5be:	47a0      	blx	r4
	}
	
	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)900,NULL,1, &motorTask);
   1d5c0:	23e1      	movs	r3, #225	; 0xe1
   1d5c2:	009a      	lsls	r2, r3, #2
   1d5c4:	481b      	ldr	r0, [pc, #108]	; (1d634 <start_motor_service+0x31c>)
   1d5c6:	4b1c      	ldr	r3, [pc, #112]	; (1d638 <start_motor_service+0x320>)
   1d5c8:	9301      	str	r3, [sp, #4]
   1d5ca:	2301      	movs	r3, #1
   1d5cc:	9300      	str	r3, [sp, #0]
   1d5ce:	2300      	movs	r3, #0
   1d5d0:	2100      	movs	r1, #0
   1d5d2:	4c12      	ldr	r4, [pc, #72]	; (1d61c <start_motor_service+0x304>)
   1d5d4:	47a0      	blx	r4

}
   1d5d6:	46c0      	nop			; (mov r8, r8)
   1d5d8:	46bd      	mov	sp, r7
   1d5da:	b009      	add	sp, #36	; 0x24
   1d5dc:	bd90      	pop	{r4, r7, pc}
   1d5de:	46c0      	nop			; (mov r8, r8)
   1d5e0:	0001eeed 	.word	0x0001eeed
   1d5e4:	0001ef21 	.word	0x0001ef21
   1d5e8:	0001b009 	.word	0x0001b009
   1d5ec:	00022f5d 	.word	0x00022f5d
   1d5f0:	00022fc1 	.word	0x00022fc1
   1d5f4:	0001a00d 	.word	0x0001a00d
   1d5f8:	000238b1 	.word	0x000238b1
   1d5fc:	0001fbe5 	.word	0x0001fbe5
   1d600:	20000430 	.word	0x20000430
   1d604:	0001fca1 	.word	0x0001fca1
   1d608:	20000434 	.word	0x20000434
   1d60c:	0001a075 	.word	0x0001a075
   1d610:	0001d8b9 	.word	0x0001d8b9
   1d614:	0001ce0d 	.word	0x0001ce0d
   1d618:	0001b221 	.word	0x0001b221
   1d61c:	00020709 	.word	0x00020709
   1d620:	0001b28d 	.word	0x0001b28d
   1d624:	0001db81 	.word	0x0001db81
   1d628:	2000043c 	.word	0x2000043c
   1d62c:	2000082c 	.word	0x2000082c
   1d630:	0001a3c9 	.word	0x0001a3c9
   1d634:	0001ce21 	.word	0x0001ce21
   1d638:	20000438 	.word	0x20000438

0001d63c <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
   1d63c:	b580      	push	{r7, lr}
   1d63e:	b082      	sub	sp, #8
   1d640:	af00      	add	r7, sp, #0
	uint8_t j = 0;
   1d642:	1dfb      	adds	r3, r7, #7
   1d644:	2200      	movs	r2, #0
   1d646:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1d648:	4b4c      	ldr	r3, [pc, #304]	; (1d77c <motor_checkSleepElligible+0x140>)
   1d64a:	795b      	ldrb	r3, [r3, #5]
   1d64c:	2b00      	cmp	r3, #0
   1d64e:	d00b      	beq.n	1d668 <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1d650:	4b4a      	ldr	r3, [pc, #296]	; (1d77c <motor_checkSleepElligible+0x140>)
   1d652:	791b      	ldrb	r3, [r3, #4]
   1d654:	2b00      	cmp	r3, #0
   1d656:	d003      	beq.n	1d660 <motor_checkSleepElligible+0x24>
		{
			j = 19;
   1d658:	1dfb      	adds	r3, r7, #7
   1d65a:	2213      	movs	r2, #19
   1d65c:	701a      	strb	r2, [r3, #0]
   1d65e:	e00e      	b.n	1d67e <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
   1d660:	1dfb      	adds	r3, r7, #7
   1d662:	2211      	movs	r2, #17
   1d664:	701a      	strb	r2, [r3, #0]
   1d666:	e00a      	b.n	1d67e <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1d668:	4b44      	ldr	r3, [pc, #272]	; (1d77c <motor_checkSleepElligible+0x140>)
   1d66a:	785b      	ldrb	r3, [r3, #1]
   1d66c:	2b00      	cmp	r3, #0
   1d66e:	d003      	beq.n	1d678 <motor_checkSleepElligible+0x3c>
		{
			j = 14;
   1d670:	1dfb      	adds	r3, r7, #7
   1d672:	220e      	movs	r2, #14
   1d674:	701a      	strb	r2, [r3, #0]
   1d676:	e002      	b.n	1d67e <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
   1d678:	1dfb      	adds	r3, r7, #7
   1d67a:	220c      	movs	r2, #12
   1d67c:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
   1d67e:	1dbb      	adds	r3, r7, #6
   1d680:	2201      	movs	r2, #1
   1d682:	701a      	strb	r2, [r3, #0]
	while(j--)
   1d684:	e00c      	b.n	1d6a0 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
   1d686:	1dfb      	adds	r3, r7, #7
   1d688:	781b      	ldrb	r3, [r3, #0]
   1d68a:	4a3d      	ldr	r2, [pc, #244]	; (1d780 <motor_checkSleepElligible+0x144>)
   1d68c:	5cd3      	ldrb	r3, [r2, r3]
   1d68e:	2201      	movs	r2, #1
   1d690:	4053      	eors	r3, r2
   1d692:	b2db      	uxtb	r3, r3
   1d694:	2b00      	cmp	r3, #0
   1d696:	d003      	beq.n	1d6a0 <motor_checkSleepElligible+0x64>
		{
			event=false;
   1d698:	1dbb      	adds	r3, r7, #6
   1d69a:	2200      	movs	r2, #0
   1d69c:	701a      	strb	r2, [r3, #0]
			break;
   1d69e:	e006      	b.n	1d6ae <motor_checkSleepElligible+0x72>
	while(j--)
   1d6a0:	1dfb      	adds	r3, r7, #7
   1d6a2:	781b      	ldrb	r3, [r3, #0]
   1d6a4:	1dfa      	adds	r2, r7, #7
   1d6a6:	1e59      	subs	r1, r3, #1
   1d6a8:	7011      	strb	r1, [r2, #0]
   1d6aa:	2b00      	cmp	r3, #0
   1d6ac:	d1eb      	bne.n	1d686 <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1d6ae:	4b33      	ldr	r3, [pc, #204]	; (1d77c <motor_checkSleepElligible+0x140>)
   1d6b0:	78db      	ldrb	r3, [r3, #3]
   1d6b2:	2b00      	cmp	r3, #0
   1d6b4:	d00e      	beq.n	1d6d4 <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
   1d6b6:	1dbb      	adds	r3, r7, #6
   1d6b8:	781b      	ldrb	r3, [r3, #0]
   1d6ba:	2b00      	cmp	r3, #0
   1d6bc:	d003      	beq.n	1d6c6 <motor_checkSleepElligible+0x8a>
   1d6be:	4b31      	ldr	r3, [pc, #196]	; (1d784 <motor_checkSleepElligible+0x148>)
   1d6c0:	781b      	ldrb	r3, [r3, #0]
   1d6c2:	2b01      	cmp	r3, #1
   1d6c4:	d003      	beq.n	1d6ce <motor_checkSleepElligible+0x92>
   1d6c6:	4b2f      	ldr	r3, [pc, #188]	; (1d784 <motor_checkSleepElligible+0x148>)
   1d6c8:	785b      	ldrb	r3, [r3, #1]
   1d6ca:	2b01      	cmp	r3, #1
   1d6cc:	d102      	bne.n	1d6d4 <motor_checkSleepElligible+0x98>
		{
			event = false;
   1d6ce:	1dbb      	adds	r3, r7, #6
   1d6d0:	2200      	movs	r2, #0
   1d6d2:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1d6d4:	4b2c      	ldr	r3, [pc, #176]	; (1d788 <motor_checkSleepElligible+0x14c>)
   1d6d6:	4798      	blx	r3
   1d6d8:	1e03      	subs	r3, r0, #0
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1d6da:	d145      	bne.n	1d768 <motor_checkSleepElligible+0x12c>
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1d6dc:	4b2b      	ldr	r3, [pc, #172]	; (1d78c <motor_checkSleepElligible+0x150>)
   1d6de:	781b      	ldrb	r3, [r3, #0]
   1d6e0:	b2db      	uxtb	r3, r3
   1d6e2:	2201      	movs	r2, #1
   1d6e4:	4053      	eors	r3, r2
   1d6e6:	b2db      	uxtb	r3, r3
   1d6e8:	2b00      	cmp	r3, #0
   1d6ea:	d03d      	beq.n	1d768 <motor_checkSleepElligible+0x12c>
   1d6ec:	1dbb      	adds	r3, r7, #6
   1d6ee:	781b      	ldrb	r3, [r3, #0]
   1d6f0:	2b00      	cmp	r3, #0
   1d6f2:	d039      	beq.n	1d768 <motor_checkSleepElligible+0x12c>
   1d6f4:	4b26      	ldr	r3, [pc, #152]	; (1d790 <motor_checkSleepElligible+0x154>)
   1d6f6:	781b      	ldrb	r3, [r3, #0]
   1d6f8:	2201      	movs	r2, #1
   1d6fa:	4053      	eors	r3, r2
   1d6fc:	b2db      	uxtb	r3, r3
   1d6fe:	2b00      	cmp	r3, #0
   1d700:	d032      	beq.n	1d768 <motor_checkSleepElligible+0x12c>
   1d702:	4b24      	ldr	r3, [pc, #144]	; (1d794 <motor_checkSleepElligible+0x158>)
   1d704:	781b      	ldrb	r3, [r3, #0]
   1d706:	2201      	movs	r2, #1
   1d708:	4053      	eors	r3, r2
   1d70a:	b2db      	uxtb	r3, r3
   1d70c:	2b00      	cmp	r3, #0
   1d70e:	d02b      	beq.n	1d768 <motor_checkSleepElligible+0x12c>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1d710:	4b21      	ldr	r3, [pc, #132]	; (1d798 <motor_checkSleepElligible+0x15c>)
   1d712:	781b      	ldrb	r3, [r3, #0]
   1d714:	2201      	movs	r2, #1
   1d716:	4053      	eors	r3, r2
   1d718:	b2db      	uxtb	r3, r3
   1d71a:	2b00      	cmp	r3, #0
   1d71c:	d024      	beq.n	1d768 <motor_checkSleepElligible+0x12c>
   1d71e:	4b1f      	ldr	r3, [pc, #124]	; (1d79c <motor_checkSleepElligible+0x160>)
   1d720:	781b      	ldrb	r3, [r3, #0]
   1d722:	2201      	movs	r2, #1
   1d724:	4053      	eors	r3, r2
   1d726:	b2db      	uxtb	r3, r3
   1d728:	2b00      	cmp	r3, #0
   1d72a:	d01d      	beq.n	1d768 <motor_checkSleepElligible+0x12c>
   1d72c:	4b1c      	ldr	r3, [pc, #112]	; (1d7a0 <motor_checkSleepElligible+0x164>)
   1d72e:	781b      	ldrb	r3, [r3, #0]
   1d730:	2201      	movs	r2, #1
   1d732:	4053      	eors	r3, r2
   1d734:	b2db      	uxtb	r3, r3
   1d736:	2b00      	cmp	r3, #0
   1d738:	d016      	beq.n	1d768 <motor_checkSleepElligible+0x12c>
   1d73a:	4b1a      	ldr	r3, [pc, #104]	; (1d7a4 <motor_checkSleepElligible+0x168>)
   1d73c:	781b      	ldrb	r3, [r3, #0]
   1d73e:	b2db      	uxtb	r3, r3
   1d740:	2201      	movs	r2, #1
   1d742:	4053      	eors	r3, r2
   1d744:	b2db      	uxtb	r3, r3
   1d746:	2b00      	cmp	r3, #0
   1d748:	d00e      	beq.n	1d768 <motor_checkSleepElligible+0x12c>
   1d74a:	4b17      	ldr	r3, [pc, #92]	; (1d7a8 <motor_checkSleepElligible+0x16c>)
   1d74c:	781b      	ldrb	r3, [r3, #0]
   1d74e:	b2db      	uxtb	r3, r3
   1d750:	2201      	movs	r2, #1
   1d752:	4053      	eors	r3, r2
   1d754:	b2db      	uxtb	r3, r3
   1d756:	2b00      	cmp	r3, #0
   1d758:	d006      	beq.n	1d768 <motor_checkSleepElligible+0x12c>
   1d75a:	4b14      	ldr	r3, [pc, #80]	; (1d7ac <motor_checkSleepElligible+0x170>)
   1d75c:	781b      	ldrb	r3, [r3, #0]
   1d75e:	b2db      	uxtb	r3, r3
   1d760:	2b00      	cmp	r3, #0
   1d762:	d101      	bne.n	1d768 <motor_checkSleepElligible+0x12c>
   1d764:	2301      	movs	r3, #1
   1d766:	e000      	b.n	1d76a <motor_checkSleepElligible+0x12e>
   1d768:	2300      	movs	r3, #0
   1d76a:	1c1a      	adds	r2, r3, #0
   1d76c:	2301      	movs	r3, #1
   1d76e:	4013      	ands	r3, r2
   1d770:	b2db      	uxtb	r3, r3
	
}
   1d772:	0018      	movs	r0, r3
   1d774:	46bd      	mov	sp, r7
   1d776:	b002      	add	sp, #8
   1d778:	bd80      	pop	{r7, pc}
   1d77a:	46c0      	nop			; (mov r8, r8)
   1d77c:	2000082c 	.word	0x2000082c
   1d780:	20000918 	.word	0x20000918
   1d784:	200009c4 	.word	0x200009c4
   1d788:	0001bb89 	.word	0x0001bb89
   1d78c:	2000092e 	.word	0x2000092e
   1d790:	20000a11 	.word	0x20000a11
   1d794:	20000991 	.word	0x20000991
   1d798:	2000099a 	.word	0x2000099a
   1d79c:	20000999 	.word	0x20000999
   1d7a0:	20000988 	.word	0x20000988
   1d7a4:	20000976 	.word	0x20000976
   1d7a8:	2000099f 	.word	0x2000099f
   1d7ac:	20000980 	.word	0x20000980

0001d7b0 <configure_ac>:


void configure_ac(void)
{
   1d7b0:	b580      	push	{r7, lr}
   1d7b2:	b08a      	sub	sp, #40	; 0x28
   1d7b4:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
   1d7b6:	231c      	movs	r3, #28
   1d7b8:	18fb      	adds	r3, r7, r3
   1d7ba:	0018      	movs	r0, r3
   1d7bc:	2305      	movs	r3, #5
   1d7be:	001a      	movs	r2, r3
   1d7c0:	2100      	movs	r1, #0
   1d7c2:	4b2c      	ldr	r3, [pc, #176]	; (1d874 <configure_ac+0xc4>)
   1d7c4:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	//struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
   1d7c6:	2324      	movs	r3, #36	; 0x24
   1d7c8:	18fb      	adds	r3, r7, r3
   1d7ca:	0018      	movs	r0, r3
   1d7cc:	4b2a      	ldr	r3, [pc, #168]	; (1d878 <configure_ac+0xc8>)
   1d7ce:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
   1d7d0:	2324      	movs	r3, #36	; 0x24
   1d7d2:	18fb      	adds	r3, r7, r3
   1d7d4:	2201      	movs	r2, #1
   1d7d6:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
   1d7d8:	2324      	movs	r3, #36	; 0x24
   1d7da:	18fb      	adds	r3, r7, r3
   1d7dc:	2206      	movs	r2, #6
   1d7de:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
   1d7e0:	2324      	movs	r3, #36	; 0x24
   1d7e2:	18fa      	adds	r2, r7, r3
   1d7e4:	4925      	ldr	r1, [pc, #148]	; (1d87c <configure_ac+0xcc>)
   1d7e6:	4b26      	ldr	r3, [pc, #152]	; (1d880 <configure_ac+0xd0>)
   1d7e8:	0018      	movs	r0, r3
   1d7ea:	4b26      	ldr	r3, [pc, #152]	; (1d884 <configure_ac+0xd4>)
   1d7ec:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
   1d7ee:	1d3b      	adds	r3, r7, #4
   1d7f0:	2200      	movs	r2, #0
   1d7f2:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
   1d7f4:	1d3b      	adds	r3, r7, #4
   1d7f6:	2200      	movs	r2, #0
   1d7f8:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
   1d7fa:	1d3b      	adds	r3, r7, #4
   1d7fc:	2200      	movs	r2, #0
   1d7fe:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
   1d800:	1d3b      	adds	r3, r7, #4
   1d802:	2200      	movs	r2, #0
   1d804:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
   1d806:	1d3b      	adds	r3, r7, #4
   1d808:	2200      	movs	r2, #0
   1d80a:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
   1d80c:	1d3b      	adds	r3, r7, #4
   1d80e:	22a0      	movs	r2, #160	; 0xa0
   1d810:	00d2      	lsls	r2, r2, #3
   1d812:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
   1d814:	1d3b      	adds	r3, r7, #4
   1d816:	222d      	movs	r2, #45	; 0x2d
   1d818:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
   1d81a:	1d3b      	adds	r3, r7, #4
   1d81c:	2200      	movs	r2, #0
   1d81e:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
   1d820:	1d3a      	adds	r2, r7, #4
   1d822:	4b17      	ldr	r3, [pc, #92]	; (1d880 <configure_ac+0xd0>)
   1d824:	2100      	movs	r1, #0
   1d826:	0018      	movs	r0, r3
   1d828:	4b17      	ldr	r3, [pc, #92]	; (1d888 <configure_ac+0xd8>)
   1d82a:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
   1d82c:	4b14      	ldr	r3, [pc, #80]	; (1d880 <configure_ac+0xd0>)
   1d82e:	2100      	movs	r1, #0
   1d830:	0018      	movs	r0, r3
   1d832:	4b16      	ldr	r3, [pc, #88]	; (1d88c <configure_ac+0xdc>)
   1d834:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
   1d836:	231c      	movs	r3, #28
   1d838:	18fb      	adds	r3, r7, r3
   1d83a:	2201      	movs	r2, #1
   1d83c:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
   1d83e:	231c      	movs	r3, #28
   1d840:	18fa      	adds	r2, r7, r3
   1d842:	4b0f      	ldr	r3, [pc, #60]	; (1d880 <configure_ac+0xd0>)
   1d844:	0011      	movs	r1, r2
   1d846:	0018      	movs	r0, r3
   1d848:	4b11      	ldr	r3, [pc, #68]	; (1d890 <configure_ac+0xe0>)
   1d84a:	4798      	blx	r3
	
	ac_enable(&ac_instance);
   1d84c:	4b0c      	ldr	r3, [pc, #48]	; (1d880 <configure_ac+0xd0>)
   1d84e:	0018      	movs	r0, r3
   1d850:	4b10      	ldr	r3, [pc, #64]	; (1d894 <configure_ac+0xe4>)
   1d852:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
   1d854:	4910      	ldr	r1, [pc, #64]	; (1d898 <configure_ac+0xe8>)
   1d856:	4b0a      	ldr	r3, [pc, #40]	; (1d880 <configure_ac+0xd0>)
   1d858:	2200      	movs	r2, #0
   1d85a:	0018      	movs	r0, r3
   1d85c:	4b0f      	ldr	r3, [pc, #60]	; (1d89c <configure_ac+0xec>)
   1d85e:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
   1d860:	4b07      	ldr	r3, [pc, #28]	; (1d880 <configure_ac+0xd0>)
   1d862:	2100      	movs	r1, #0
   1d864:	0018      	movs	r0, r3
   1d866:	4b0e      	ldr	r3, [pc, #56]	; (1d8a0 <configure_ac+0xf0>)
   1d868:	4798      	blx	r3
}
   1d86a:	46c0      	nop			; (mov r8, r8)
   1d86c:	46bd      	mov	sp, r7
   1d86e:	b00a      	add	sp, #40	; 0x28
   1d870:	bd80      	pop	{r7, pc}
   1d872:	46c0      	nop			; (mov r8, r8)
   1d874:	0002975b 	.word	0x0002975b
   1d878:	00019991 	.word	0x00019991
   1d87c:	42004400 	.word	0x42004400
   1d880:	20000a90 	.word	0x20000a90
   1d884:	0001dd15 	.word	0x0001dd15
   1d888:	0001ddf5 	.word	0x0001ddf5
   1d88c:	00019ae1 	.word	0x00019ae1
   1d890:	00019a01 	.word	0x00019a01
   1d894:	000199c9 	.word	0x000199c9
   1d898:	0001d8a5 	.word	0x0001d8a5
   1d89c:	00023169 	.word	0x00023169
   1d8a0:	00019c49 	.word	0x00019c49

0001d8a4 <ac_detect_callback>:
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
	rtc_count_enable(&rtc_instance);
}

void ac_detect_callback(struct ac_module *const module_inst)
{
   1d8a4:	b580      	push	{r7, lr}
   1d8a6:	b082      	sub	sp, #8
   1d8a8:	af00      	add	r7, sp, #0
   1d8aa:	6078      	str	r0, [r7, #4]
	asm("NOP");
   1d8ac:	46c0      	nop			; (mov r8, r8)
	;
	//eventOccured = true;
}
   1d8ae:	46c0      	nop			; (mov r8, r8)
   1d8b0:	46bd      	mov	sp, r7
   1d8b2:	b002      	add	sp, #8
   1d8b4:	bd80      	pop	{r7, pc}
	...

0001d8b8 <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
   1d8b8:	b580      	push	{r7, lr}
   1d8ba:	af00      	add	r7, sp, #0
	eventOccured = true;
   1d8bc:	4b06      	ldr	r3, [pc, #24]	; (1d8d8 <motor_feedback_callback+0x20>)
   1d8be:	2201      	movs	r2, #1
   1d8c0:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent=true;
   1d8c2:	4b06      	ldr	r3, [pc, #24]	; (1d8dc <motor_feedback_callback+0x24>)
   1d8c4:	2201      	movs	r2, #1
   1d8c6:	701a      	strb	r2, [r3, #0]
	motorFeedbackEventTime=xTaskGetTickCountFromISR();
   1d8c8:	4b05      	ldr	r3, [pc, #20]	; (1d8e0 <motor_feedback_callback+0x28>)
   1d8ca:	4798      	blx	r3
   1d8cc:	0002      	movs	r2, r0
   1d8ce:	4b05      	ldr	r3, [pc, #20]	; (1d8e4 <motor_feedback_callback+0x2c>)
   1d8d0:	601a      	str	r2, [r3, #0]
}
   1d8d2:	46c0      	nop			; (mov r8, r8)
   1d8d4:	46bd      	mov	sp, r7
   1d8d6:	bd80      	pop	{r7, pc}
   1d8d8:	2000092e 	.word	0x2000092e
   1d8dc:	2000098a 	.word	0x2000098a
   1d8e0:	00020dc9 	.word	0x00020dc9
   1d8e4:	20000a60 	.word	0x20000a60

0001d8e8 <operateOnButtonEvent>:
	events_allocate(&resource, &conf_event);
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
}

void operateOnButtonEvent(void)
{
   1d8e8:	b580      	push	{r7, lr}
   1d8ea:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
   1d8ec:	4b28      	ldr	r3, [pc, #160]	; (1d990 <operateOnButtonEvent+0xa8>)
   1d8ee:	2200      	movs	r2, #0
   1d8f0:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
   1d8f2:	2026      	movs	r0, #38	; 0x26
   1d8f4:	4b27      	ldr	r3, [pc, #156]	; (1d994 <operateOnButtonEvent+0xac>)
   1d8f6:	4798      	blx	r3
   1d8f8:	0003      	movs	r3, r0
   1d8fa:	001a      	movs	r2, r3
   1d8fc:	2301      	movs	r3, #1
   1d8fe:	4053      	eors	r3, r2
   1d900:	b2db      	uxtb	r3, r3
   1d902:	2b00      	cmp	r3, #0
   1d904:	d008      	beq.n	1d918 <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
   1d906:	4b24      	ldr	r3, [pc, #144]	; (1d998 <operateOnButtonEvent+0xb0>)
   1d908:	4798      	blx	r3
   1d90a:	0002      	movs	r2, r0
   1d90c:	4b23      	ldr	r3, [pc, #140]	; (1d99c <operateOnButtonEvent+0xb4>)
   1d90e:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
   1d910:	4b23      	ldr	r3, [pc, #140]	; (1d9a0 <operateOnButtonEvent+0xb8>)
   1d912:	2201      	movs	r2, #1
   1d914:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
   1d916:	e037      	b.n	1d988 <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
   1d918:	2025      	movs	r0, #37	; 0x25
   1d91a:	4b1e      	ldr	r3, [pc, #120]	; (1d994 <operateOnButtonEvent+0xac>)
   1d91c:	4798      	blx	r3
   1d91e:	0003      	movs	r3, r0
   1d920:	001a      	movs	r2, r3
   1d922:	2301      	movs	r3, #1
   1d924:	4053      	eors	r3, r2
   1d926:	b2db      	uxtb	r3, r3
   1d928:	2b00      	cmp	r3, #0
   1d92a:	d008      	beq.n	1d93e <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
   1d92c:	4b1a      	ldr	r3, [pc, #104]	; (1d998 <operateOnButtonEvent+0xb0>)
   1d92e:	4798      	blx	r3
   1d930:	0002      	movs	r2, r0
   1d932:	4b1a      	ldr	r3, [pc, #104]	; (1d99c <operateOnButtonEvent+0xb4>)
   1d934:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
   1d936:	4b1a      	ldr	r3, [pc, #104]	; (1d9a0 <operateOnButtonEvent+0xb8>)
   1d938:	2202      	movs	r2, #2
   1d93a:	701a      	strb	r2, [r3, #0]
}
   1d93c:	e024      	b.n	1d988 <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
   1d93e:	201c      	movs	r0, #28
   1d940:	4b14      	ldr	r3, [pc, #80]	; (1d994 <operateOnButtonEvent+0xac>)
   1d942:	4798      	blx	r3
   1d944:	0003      	movs	r3, r0
   1d946:	001a      	movs	r2, r3
   1d948:	2301      	movs	r3, #1
   1d94a:	4053      	eors	r3, r2
   1d94c:	b2db      	uxtb	r3, r3
   1d94e:	2b00      	cmp	r3, #0
   1d950:	d008      	beq.n	1d964 <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
   1d952:	4b11      	ldr	r3, [pc, #68]	; (1d998 <operateOnButtonEvent+0xb0>)
   1d954:	4798      	blx	r3
   1d956:	0002      	movs	r2, r0
   1d958:	4b10      	ldr	r3, [pc, #64]	; (1d99c <operateOnButtonEvent+0xb4>)
   1d95a:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
   1d95c:	4b10      	ldr	r3, [pc, #64]	; (1d9a0 <operateOnButtonEvent+0xb8>)
   1d95e:	2203      	movs	r2, #3
   1d960:	701a      	strb	r2, [r3, #0]
}
   1d962:	e011      	b.n	1d988 <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
   1d964:	2029      	movs	r0, #41	; 0x29
   1d966:	4b0b      	ldr	r3, [pc, #44]	; (1d994 <operateOnButtonEvent+0xac>)
   1d968:	4798      	blx	r3
   1d96a:	0003      	movs	r3, r0
   1d96c:	001a      	movs	r2, r3
   1d96e:	2301      	movs	r3, #1
   1d970:	4053      	eors	r3, r2
   1d972:	b2db      	uxtb	r3, r3
   1d974:	2b00      	cmp	r3, #0
   1d976:	d007      	beq.n	1d988 <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
   1d978:	4b07      	ldr	r3, [pc, #28]	; (1d998 <operateOnButtonEvent+0xb0>)
   1d97a:	4798      	blx	r3
   1d97c:	0002      	movs	r2, r0
   1d97e:	4b07      	ldr	r3, [pc, #28]	; (1d99c <operateOnButtonEvent+0xb4>)
   1d980:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
   1d982:	4b07      	ldr	r3, [pc, #28]	; (1d9a0 <operateOnButtonEvent+0xb8>)
   1d984:	2204      	movs	r2, #4
   1d986:	701a      	strb	r2, [r3, #0]
}
   1d988:	46c0      	nop			; (mov r8, r8)
   1d98a:	46bd      	mov	sp, r7
   1d98c:	bd80      	pop	{r7, pc}
   1d98e:	46c0      	nop			; (mov r8, r8)
   1d990:	2000099f 	.word	0x2000099f
   1d994:	0001a031 	.word	0x0001a031
   1d998:	00020dad 	.word	0x00020dad
   1d99c:	20000968 	.word	0x20000968
   1d9a0:	20000980 	.word	0x20000980

0001d9a4 <buttonFilter>:

void buttonFilter(void)
{
   1d9a4:	b580      	push	{r7, lr}
   1d9a6:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
   1d9a8:	4b48      	ldr	r3, [pc, #288]	; (1dacc <buttonFilter+0x128>)
   1d9aa:	781b      	ldrb	r3, [r3, #0]
   1d9ac:	b2db      	uxtb	r3, r3
   1d9ae:	2b00      	cmp	r3, #0
   1d9b0:	d100      	bne.n	1d9b4 <buttonFilter+0x10>
   1d9b2:	e088      	b.n	1dac6 <buttonFilter+0x122>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
   1d9b4:	4b45      	ldr	r3, [pc, #276]	; (1dacc <buttonFilter+0x128>)
   1d9b6:	781b      	ldrb	r3, [r3, #0]
   1d9b8:	b2db      	uxtb	r3, r3
   1d9ba:	2b01      	cmp	r3, #1
   1d9bc:	d111      	bne.n	1d9e2 <buttonFilter+0x3e>
   1d9be:	2026      	movs	r0, #38	; 0x26
   1d9c0:	4b43      	ldr	r3, [pc, #268]	; (1dad0 <buttonFilter+0x12c>)
   1d9c2:	4798      	blx	r3
   1d9c4:	0003      	movs	r3, r0
   1d9c6:	001a      	movs	r2, r3
   1d9c8:	2301      	movs	r3, #1
   1d9ca:	4053      	eors	r3, r2
   1d9cc:	b2db      	uxtb	r3, r3
   1d9ce:	2b00      	cmp	r3, #0
   1d9d0:	d007      	beq.n	1d9e2 <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
   1d9d2:	4b3e      	ldr	r3, [pc, #248]	; (1dacc <buttonFilter+0x128>)
   1d9d4:	2200      	movs	r2, #0
   1d9d6:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
   1d9d8:	2100      	movs	r1, #0
   1d9da:	2000      	movs	r0, #0
   1d9dc:	4b3d      	ldr	r3, [pc, #244]	; (1dad4 <buttonFilter+0x130>)
   1d9de:	4798      	blx	r3
   1d9e0:	e071      	b.n	1dac6 <buttonFilter+0x122>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
   1d9e2:	4b3a      	ldr	r3, [pc, #232]	; (1dacc <buttonFilter+0x128>)
   1d9e4:	781b      	ldrb	r3, [r3, #0]
   1d9e6:	b2db      	uxtb	r3, r3
   1d9e8:	2b02      	cmp	r3, #2
   1d9ea:	d112      	bne.n	1da12 <buttonFilter+0x6e>
   1d9ec:	2025      	movs	r0, #37	; 0x25
   1d9ee:	4b38      	ldr	r3, [pc, #224]	; (1dad0 <buttonFilter+0x12c>)
   1d9f0:	4798      	blx	r3
   1d9f2:	0003      	movs	r3, r0
   1d9f4:	001a      	movs	r2, r3
   1d9f6:	2301      	movs	r3, #1
   1d9f8:	4053      	eors	r3, r2
   1d9fa:	b2db      	uxtb	r3, r3
   1d9fc:	2b00      	cmp	r3, #0
   1d9fe:	d008      	beq.n	1da12 <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
   1da00:	4b32      	ldr	r3, [pc, #200]	; (1dacc <buttonFilter+0x128>)
   1da02:	2200      	movs	r2, #0
   1da04:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
   1da06:	2201      	movs	r2, #1
   1da08:	2100      	movs	r1, #0
   1da0a:	2000      	movs	r0, #0
   1da0c:	4b32      	ldr	r3, [pc, #200]	; (1dad8 <buttonFilter+0x134>)
   1da0e:	4798      	blx	r3
   1da10:	e059      	b.n	1dac6 <buttonFilter+0x122>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
   1da12:	4b2e      	ldr	r3, [pc, #184]	; (1dacc <buttonFilter+0x128>)
   1da14:	781b      	ldrb	r3, [r3, #0]
   1da16:	b2db      	uxtb	r3, r3
   1da18:	2b03      	cmp	r3, #3
   1da1a:	d12d      	bne.n	1da78 <buttonFilter+0xd4>
   1da1c:	201c      	movs	r0, #28
   1da1e:	4b2c      	ldr	r3, [pc, #176]	; (1dad0 <buttonFilter+0x12c>)
   1da20:	4798      	blx	r3
   1da22:	0003      	movs	r3, r0
   1da24:	001a      	movs	r2, r3
   1da26:	2301      	movs	r3, #1
   1da28:	4053      	eors	r3, r2
   1da2a:	b2db      	uxtb	r3, r3
   1da2c:	2b00      	cmp	r3, #0
   1da2e:	d023      	beq.n	1da78 <buttonFilter+0xd4>
		{
			lastButtonEvent=0;
   1da30:	4b26      	ldr	r3, [pc, #152]	; (1dacc <buttonFilter+0x128>)
   1da32:	2200      	movs	r2, #0
   1da34:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
   1da36:	4b29      	ldr	r3, [pc, #164]	; (1dadc <buttonFilter+0x138>)
   1da38:	785b      	ldrb	r3, [r3, #1]
   1da3a:	b2db      	uxtb	r3, r3
   1da3c:	425a      	negs	r2, r3
   1da3e:	4153      	adcs	r3, r2
   1da40:	b2db      	uxtb	r3, r3
   1da42:	0018      	movs	r0, r3
   1da44:	4b26      	ldr	r3, [pc, #152]	; (1dae0 <buttonFilter+0x13c>)
   1da46:	4798      	blx	r3
			resetAutoStart(true);
   1da48:	2001      	movs	r0, #1
   1da4a:	4b26      	ldr	r3, [pc, #152]	; (1dae4 <buttonFilter+0x140>)
   1da4c:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
   1da4e:	4b23      	ldr	r3, [pc, #140]	; (1dadc <buttonFilter+0x138>)
   1da50:	785b      	ldrb	r3, [r3, #1]
   1da52:	b2db      	uxtb	r3, r3
   1da54:	2b00      	cmp	r3, #0
   1da56:	d007      	beq.n	1da68 <buttonFilter+0xc4>
			{
				simEventTemp[10] = registerEvent(')');
   1da58:	2029      	movs	r0, #41	; 0x29
   1da5a:	4b23      	ldr	r3, [pc, #140]	; (1dae8 <buttonFilter+0x144>)
   1da5c:	4798      	blx	r3
   1da5e:	0003      	movs	r3, r0
   1da60:	001a      	movs	r2, r3
   1da62:	4b22      	ldr	r3, [pc, #136]	; (1daec <buttonFilter+0x148>)
   1da64:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
   1da66:	e02e      	b.n	1dac6 <buttonFilter+0x122>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
   1da68:	205b      	movs	r0, #91	; 0x5b
   1da6a:	4b1f      	ldr	r3, [pc, #124]	; (1dae8 <buttonFilter+0x144>)
   1da6c:	4798      	blx	r3
   1da6e:	0003      	movs	r3, r0
   1da70:	001a      	movs	r2, r3
   1da72:	4b1e      	ldr	r3, [pc, #120]	; (1daec <buttonFilter+0x148>)
   1da74:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
   1da76:	e026      	b.n	1dac6 <buttonFilter+0x122>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
   1da78:	4b14      	ldr	r3, [pc, #80]	; (1dacc <buttonFilter+0x128>)
   1da7a:	781b      	ldrb	r3, [r3, #0]
   1da7c:	b2db      	uxtb	r3, r3
   1da7e:	2b04      	cmp	r3, #4
   1da80:	d11d      	bne.n	1dabe <buttonFilter+0x11a>
   1da82:	2029      	movs	r0, #41	; 0x29
   1da84:	4b12      	ldr	r3, [pc, #72]	; (1dad0 <buttonFilter+0x12c>)
   1da86:	4798      	blx	r3
   1da88:	0003      	movs	r3, r0
   1da8a:	001a      	movs	r2, r3
   1da8c:	2301      	movs	r3, #1
   1da8e:	4053      	eors	r3, r2
   1da90:	b2db      	uxtb	r3, r3
   1da92:	2b00      	cmp	r3, #0
   1da94:	d013      	beq.n	1dabe <buttonFilter+0x11a>
		{
			lastButtonEvent=0;
   1da96:	4b0d      	ldr	r3, [pc, #52]	; (1dacc <buttonFilter+0x128>)
   1da98:	2200      	movs	r2, #0
   1da9a:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
   1da9c:	4b14      	ldr	r3, [pc, #80]	; (1daf0 <buttonFilter+0x14c>)
   1da9e:	781b      	ldrb	r3, [r3, #0]
   1daa0:	b2db      	uxtb	r3, r3
   1daa2:	1e5a      	subs	r2, r3, #1
   1daa4:	4193      	sbcs	r3, r2
   1daa6:	b2db      	uxtb	r3, r3
   1daa8:	2201      	movs	r2, #1
   1daaa:	4053      	eors	r3, r2
   1daac:	b2db      	uxtb	r3, r3
   1daae:	1c1a      	adds	r2, r3, #0
   1dab0:	2301      	movs	r3, #1
   1dab2:	4013      	ands	r3, r2
   1dab4:	b2db      	uxtb	r3, r3
   1dab6:	0018      	movs	r0, r3
   1dab8:	4b0e      	ldr	r3, [pc, #56]	; (1daf4 <buttonFilter+0x150>)
   1daba:	4798      	blx	r3
   1dabc:	e003      	b.n	1dac6 <buttonFilter+0x122>
		}
		else
		{
			lastButtonEvent=0;
   1dabe:	4b03      	ldr	r3, [pc, #12]	; (1dacc <buttonFilter+0x128>)
   1dac0:	2200      	movs	r2, #0
   1dac2:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1dac4:	e7ff      	b.n	1dac6 <buttonFilter+0x122>
   1dac6:	46c0      	nop			; (mov r8, r8)
   1dac8:	46bd      	mov	sp, r7
   1daca:	bd80      	pop	{r7, pc}
   1dacc:	20000980 	.word	0x20000980
   1dad0:	0001a031 	.word	0x0001a031
   1dad4:	0001c315 	.word	0x0001c315
   1dad8:	0001c4fd 	.word	0x0001c4fd
   1dadc:	20000854 	.word	0x20000854
   1dae0:	000112a9 	.word	0x000112a9
   1dae4:	0001bef9 	.word	0x0001bef9
   1dae8:	00014c4d 	.word	0x00014c4d
   1daec:	20000918 	.word	0x20000918
   1daf0:	200009b0 	.word	0x200009b0
   1daf4:	0001daf9 	.word	0x0001daf9

0001daf8 <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
   1daf8:	b580      	push	{r7, lr}
   1dafa:	b082      	sub	sp, #8
   1dafc:	af00      	add	r7, sp, #0
   1dafe:	0002      	movs	r2, r0
   1db00:	1dfb      	adds	r3, r7, #7
   1db02:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
   1db04:	4b03      	ldr	r3, [pc, #12]	; (1db14 <setDisplayPause+0x1c>)
   1db06:	1dfa      	adds	r2, r7, #7
   1db08:	7812      	ldrb	r2, [r2, #0]
   1db0a:	701a      	strb	r2, [r3, #0]
}
   1db0c:	46c0      	nop			; (mov r8, r8)
   1db0e:	46bd      	mov	sp, r7
   1db10:	b002      	add	sp, #8
   1db12:	bd80      	pop	{r7, pc}
   1db14:	200009b0 	.word	0x200009b0

0001db18 <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
   1db18:	b580      	push	{r7, lr}
   1db1a:	b082      	sub	sp, #8
   1db1c:	af00      	add	r7, sp, #0
   1db1e:	6039      	str	r1, [r7, #0]
   1db20:	0011      	movs	r1, r2
   1db22:	1dfb      	adds	r3, r7, #7
   1db24:	1c02      	adds	r2, r0, #0
   1db26:	701a      	strb	r2, [r3, #0]
   1db28:	1dbb      	adds	r3, r7, #6
   1db2a:	1c0a      	adds	r2, r1, #0
   1db2c:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
   1db2e:	4b10      	ldr	r3, [pc, #64]	; (1db70 <setCallStateOnLCD+0x58>)
   1db30:	1dfa      	adds	r2, r7, #7
   1db32:	7812      	ldrb	r2, [r2, #0]
   1db34:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
   1db36:	1dbb      	adds	r3, r7, #6
   1db38:	781b      	ldrb	r3, [r3, #0]
   1db3a:	2201      	movs	r2, #1
   1db3c:	4053      	eors	r3, r2
   1db3e:	b2db      	uxtb	r3, r3
   1db40:	2b00      	cmp	r3, #0
   1db42:	d010      	beq.n	1db66 <setCallStateOnLCD+0x4e>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
   1db44:	4b0b      	ldr	r3, [pc, #44]	; (1db74 <setCallStateOnLCD+0x5c>)
   1db46:	2214      	movs	r2, #20
   1db48:	2100      	movs	r1, #0
   1db4a:	0018      	movs	r0, r3
   1db4c:	4b0a      	ldr	r3, [pc, #40]	; (1db78 <setCallStateOnLCD+0x60>)
   1db4e:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1db50:	4b07      	ldr	r3, [pc, #28]	; (1db70 <setCallStateOnLCD+0x58>)
   1db52:	781b      	ldrb	r3, [r3, #0]
   1db54:	b2db      	uxtb	r3, r3
   1db56:	2b00      	cmp	r3, #0
   1db58:	d005      	beq.n	1db66 <setCallStateOnLCD+0x4e>
		{
			strcpy(numberOnLCD,number);
   1db5a:	683a      	ldr	r2, [r7, #0]
   1db5c:	4b05      	ldr	r3, [pc, #20]	; (1db74 <setCallStateOnLCD+0x5c>)
   1db5e:	0011      	movs	r1, r2
   1db60:	0018      	movs	r0, r3
   1db62:	4b06      	ldr	r3, [pc, #24]	; (1db7c <setCallStateOnLCD+0x64>)
   1db64:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
   1db66:	46c0      	nop			; (mov r8, r8)
   1db68:	46bd      	mov	sp, r7
   1db6a:	b002      	add	sp, #8
   1db6c:	bd80      	pop	{r7, pc}
   1db6e:	46c0      	nop			; (mov r8, r8)
   1db70:	200009d6 	.word	0x200009d6
   1db74:	20000a48 	.word	0x20000a48
   1db78:	0002975b 	.word	0x0002975b
   1db7c:	000299db 	.word	0x000299db

0001db80 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
   1db80:	b590      	push	{r4, r7, lr}
   1db82:	b085      	sub	sp, #20
   1db84:	af00      	add	r7, sp, #0
   1db86:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1db88:	4b17      	ldr	r3, [pc, #92]	; (1dbe8 <vTask_50ms_Timer+0x68>)
   1db8a:	4798      	blx	r3
   1db8c:	0003      	movs	r3, r0
   1db8e:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1db90:	230c      	movs	r3, #12
   1db92:	18fb      	adds	r3, r7, r3
   1db94:	2119      	movs	r1, #25
   1db96:	0018      	movs	r0, r3
   1db98:	4b14      	ldr	r3, [pc, #80]	; (1dbec <vTask_50ms_Timer+0x6c>)
   1db9a:	4798      	blx	r3
		if(buttonEventOccured)
   1db9c:	4b14      	ldr	r3, [pc, #80]	; (1dbf0 <vTask_50ms_Timer+0x70>)
   1db9e:	781b      	ldrb	r3, [r3, #0]
   1dba0:	b2db      	uxtb	r3, r3
   1dba2:	2b00      	cmp	r3, #0
   1dba4:	d001      	beq.n	1dbaa <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
   1dba6:	4b13      	ldr	r3, [pc, #76]	; (1dbf4 <vTask_50ms_Timer+0x74>)
   1dba8:	4798      	blx	r3
		}

		xSemaphoreTake(xButton_Semaphore,portMAX_DELAY);
   1dbaa:	4b13      	ldr	r3, [pc, #76]	; (1dbf8 <vTask_50ms_Timer+0x78>)
   1dbac:	681a      	ldr	r2, [r3, #0]
   1dbae:	2301      	movs	r3, #1
   1dbb0:	425b      	negs	r3, r3
   1dbb2:	0019      	movs	r1, r3
   1dbb4:	0010      	movs	r0, r2
   1dbb6:	4b11      	ldr	r3, [pc, #68]	; (1dbfc <vTask_50ms_Timer+0x7c>)
   1dbb8:	4798      	blx	r3
		if(lastButtonEvent>0)
   1dbba:	4b11      	ldr	r3, [pc, #68]	; (1dc00 <vTask_50ms_Timer+0x80>)
   1dbbc:	781b      	ldrb	r3, [r3, #0]
   1dbbe:	b2db      	uxtb	r3, r3
   1dbc0:	2b00      	cmp	r3, #0
   1dbc2:	d008      	beq.n	1dbd6 <vTask_50ms_Timer+0x56>
		{
			taskPSet=true;
   1dbc4:	4b0f      	ldr	r3, [pc, #60]	; (1dc04 <vTask_50ms_Timer+0x84>)
   1dbc6:	2201      	movs	r2, #1
   1dbc8:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
   1dbca:	4b0f      	ldr	r3, [pc, #60]	; (1dc08 <vTask_50ms_Timer+0x88>)
   1dbcc:	681b      	ldr	r3, [r3, #0]
   1dbce:	2102      	movs	r1, #2
   1dbd0:	0018      	movs	r0, r3
   1dbd2:	4b0e      	ldr	r3, [pc, #56]	; (1dc0c <vTask_50ms_Timer+0x8c>)
   1dbd4:	4798      	blx	r3
		}
		xSemaphoreGive(xButton_Semaphore);
   1dbd6:	4b08      	ldr	r3, [pc, #32]	; (1dbf8 <vTask_50ms_Timer+0x78>)
   1dbd8:	6818      	ldr	r0, [r3, #0]
   1dbda:	2300      	movs	r3, #0
   1dbdc:	2200      	movs	r2, #0
   1dbde:	2100      	movs	r1, #0
   1dbe0:	4c0b      	ldr	r4, [pc, #44]	; (1dc10 <vTask_50ms_Timer+0x90>)
   1dbe2:	47a0      	blx	r4
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1dbe4:	e7d4      	b.n	1db90 <vTask_50ms_Timer+0x10>
   1dbe6:	46c0      	nop			; (mov r8, r8)
   1dbe8:	00020dad 	.word	0x00020dad
   1dbec:	00020981 	.word	0x00020981
   1dbf0:	2000099f 	.word	0x2000099f
   1dbf4:	0001d8e9 	.word	0x0001d8e9
   1dbf8:	20000434 	.word	0x20000434
   1dbfc:	00020141 	.word	0x00020141
   1dc00:	20000980 	.word	0x20000980
   1dc04:	20000a84 	.word	0x20000a84
   1dc08:	20000438 	.word	0x20000438
   1dc0c:	00020aa5 	.word	0x00020aa5
   1dc10:	0001fca1 	.word	0x0001fca1

0001dc14 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1dc14:	b580      	push	{r7, lr}
   1dc16:	b082      	sub	sp, #8
   1dc18:	af00      	add	r7, sp, #0
   1dc1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1dc1c:	687b      	ldr	r3, [r7, #4]
   1dc1e:	2200      	movs	r2, #0
   1dc20:	701a      	strb	r2, [r3, #0]
}
   1dc22:	46c0      	nop			; (mov r8, r8)
   1dc24:	46bd      	mov	sp, r7
   1dc26:	b002      	add	sp, #8
   1dc28:	bd80      	pop	{r7, pc}
	...

0001dc2c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1dc2c:	b580      	push	{r7, lr}
   1dc2e:	b082      	sub	sp, #8
   1dc30:	af00      	add	r7, sp, #0
   1dc32:	0002      	movs	r2, r0
   1dc34:	6039      	str	r1, [r7, #0]
   1dc36:	1dfb      	adds	r3, r7, #7
   1dc38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1dc3a:	1dfb      	adds	r3, r7, #7
   1dc3c:	781b      	ldrb	r3, [r3, #0]
   1dc3e:	2b01      	cmp	r3, #1
   1dc40:	d00a      	beq.n	1dc58 <system_apb_clock_set_mask+0x2c>
   1dc42:	2b02      	cmp	r3, #2
   1dc44:	d00f      	beq.n	1dc66 <system_apb_clock_set_mask+0x3a>
   1dc46:	2b00      	cmp	r3, #0
   1dc48:	d114      	bne.n	1dc74 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1dc4a:	4b0e      	ldr	r3, [pc, #56]	; (1dc84 <system_apb_clock_set_mask+0x58>)
   1dc4c:	4a0d      	ldr	r2, [pc, #52]	; (1dc84 <system_apb_clock_set_mask+0x58>)
   1dc4e:	6991      	ldr	r1, [r2, #24]
   1dc50:	683a      	ldr	r2, [r7, #0]
   1dc52:	430a      	orrs	r2, r1
   1dc54:	619a      	str	r2, [r3, #24]
			break;
   1dc56:	e00f      	b.n	1dc78 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1dc58:	4b0a      	ldr	r3, [pc, #40]	; (1dc84 <system_apb_clock_set_mask+0x58>)
   1dc5a:	4a0a      	ldr	r2, [pc, #40]	; (1dc84 <system_apb_clock_set_mask+0x58>)
   1dc5c:	69d1      	ldr	r1, [r2, #28]
   1dc5e:	683a      	ldr	r2, [r7, #0]
   1dc60:	430a      	orrs	r2, r1
   1dc62:	61da      	str	r2, [r3, #28]
			break;
   1dc64:	e008      	b.n	1dc78 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1dc66:	4b07      	ldr	r3, [pc, #28]	; (1dc84 <system_apb_clock_set_mask+0x58>)
   1dc68:	4a06      	ldr	r2, [pc, #24]	; (1dc84 <system_apb_clock_set_mask+0x58>)
   1dc6a:	6a11      	ldr	r1, [r2, #32]
   1dc6c:	683a      	ldr	r2, [r7, #0]
   1dc6e:	430a      	orrs	r2, r1
   1dc70:	621a      	str	r2, [r3, #32]
			break;
   1dc72:	e001      	b.n	1dc78 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1dc74:	2317      	movs	r3, #23
   1dc76:	e000      	b.n	1dc7a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   1dc78:	2300      	movs	r3, #0
}
   1dc7a:	0018      	movs	r0, r3
   1dc7c:	46bd      	mov	sp, r7
   1dc7e:	b002      	add	sp, #8
   1dc80:	bd80      	pop	{r7, pc}
   1dc82:	46c0      	nop			; (mov r8, r8)
   1dc84:	40000400 	.word	0x40000400

0001dc88 <ac_is_syncing>:
{
   1dc88:	b580      	push	{r7, lr}
   1dc8a:	b084      	sub	sp, #16
   1dc8c:	af00      	add	r7, sp, #0
   1dc8e:	6078      	str	r0, [r7, #4]
	Ac *const ac_module = module_inst->hw;
   1dc90:	687b      	ldr	r3, [r7, #4]
   1dc92:	681b      	ldr	r3, [r3, #0]
   1dc94:	60fb      	str	r3, [r7, #12]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1dc96:	68fb      	ldr	r3, [r7, #12]
   1dc98:	7a5b      	ldrb	r3, [r3, #9]
   1dc9a:	b2db      	uxtb	r3, r3
   1dc9c:	b25b      	sxtb	r3, r3
   1dc9e:	2b00      	cmp	r3, #0
   1dca0:	da01      	bge.n	1dca6 <ac_is_syncing+0x1e>
		return true;
   1dca2:	2301      	movs	r3, #1
   1dca4:	e000      	b.n	1dca8 <ac_is_syncing+0x20>
	return false;
   1dca6:	2300      	movs	r3, #0
}
   1dca8:	0018      	movs	r0, r3
   1dcaa:	46bd      	mov	sp, r7
   1dcac:	b004      	add	sp, #16
   1dcae:	bd80      	pop	{r7, pc}

0001dcb0 <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
   1dcb0:	b580      	push	{r7, lr}
   1dcb2:	b086      	sub	sp, #24
   1dcb4:	af00      	add	r7, sp, #0
   1dcb6:	6078      	str	r0, [r7, #4]
   1dcb8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1dcba:	687b      	ldr	r3, [r7, #4]
   1dcbc:	681b      	ldr	r3, [r3, #0]
   1dcbe:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
   1dcc0:	2300      	movs	r3, #0
   1dcc2:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1dcc4:	2300      	movs	r3, #0
   1dcc6:	613b      	str	r3, [r7, #16]
   1dcc8:	e00f      	b.n	1dcea <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
   1dcca:	683a      	ldr	r2, [r7, #0]
   1dccc:	693b      	ldr	r3, [r7, #16]
   1dcce:	18d3      	adds	r3, r2, r3
   1dcd0:	781b      	ldrb	r3, [r3, #0]
   1dcd2:	2b00      	cmp	r3, #0
   1dcd4:	d006      	beq.n	1dce4 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
   1dcd6:	2204      	movs	r2, #4
   1dcd8:	693b      	ldr	r3, [r7, #16]
   1dcda:	409a      	lsls	r2, r3
   1dcdc:	0013      	movs	r3, r2
   1dcde:	697a      	ldr	r2, [r7, #20]
   1dce0:	4313      	orrs	r3, r2
   1dce2:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1dce4:	693b      	ldr	r3, [r7, #16]
   1dce6:	3301      	adds	r3, #1
   1dce8:	613b      	str	r3, [r7, #16]
   1dcea:	693b      	ldr	r3, [r7, #16]
   1dcec:	2b00      	cmp	r3, #0
   1dcee:	d0ec      	beq.n	1dcca <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
   1dcf0:	46c0      	nop			; (mov r8, r8)
   1dcf2:	687b      	ldr	r3, [r7, #4]
   1dcf4:	0018      	movs	r0, r3
   1dcf6:	4b06      	ldr	r3, [pc, #24]	; (1dd10 <_ac_set_config+0x60>)
   1dcf8:	4798      	blx	r3
   1dcfa:	1e03      	subs	r3, r0, #0
   1dcfc:	d1f9      	bne.n	1dcf2 <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
   1dcfe:	697b      	ldr	r3, [r7, #20]
   1dd00:	b2da      	uxtb	r2, r3
   1dd02:	68fb      	ldr	r3, [r7, #12]
   1dd04:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1dd06:	2300      	movs	r3, #0
}
   1dd08:	0018      	movs	r0, r3
   1dd0a:	46bd      	mov	sp, r7
   1dd0c:	b006      	add	sp, #24
   1dd0e:	bd80      	pop	{r7, pc}
   1dd10:	0001dc89 	.word	0x0001dc89

0001dd14 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
   1dd14:	b580      	push	{r7, lr}
   1dd16:	b086      	sub	sp, #24
   1dd18:	af00      	add	r7, sp, #0
   1dd1a:	60f8      	str	r0, [r7, #12]
   1dd1c:	60b9      	str	r1, [r7, #8]
   1dd1e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
   1dd20:	68fb      	ldr	r3, [r7, #12]
   1dd22:	68ba      	ldr	r2, [r7, #8]
   1dd24:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1dd26:	2314      	movs	r3, #20
   1dd28:	18fb      	adds	r3, r7, r3
   1dd2a:	0018      	movs	r0, r3
   1dd2c:	4b2a      	ldr	r3, [pc, #168]	; (1ddd8 <ac_init+0xc4>)
   1dd2e:	4798      	blx	r3

	if (hw == AC) {
   1dd30:	68bb      	ldr	r3, [r7, #8]
   1dd32:	4a2a      	ldr	r2, [pc, #168]	; (1dddc <ac_init+0xc8>)
   1dd34:	4293      	cmp	r3, r2
   1dd36:	d121      	bne.n	1dd7c <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
   1dd38:	2380      	movs	r3, #128	; 0x80
   1dd3a:	029b      	lsls	r3, r3, #10
   1dd3c:	0019      	movs	r1, r3
   1dd3e:	2002      	movs	r0, #2
   1dd40:	4b27      	ldr	r3, [pc, #156]	; (1dde0 <ac_init+0xcc>)
   1dd42:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
   1dd44:	687b      	ldr	r3, [r7, #4]
   1dd46:	785a      	ldrb	r2, [r3, #1]
   1dd48:	2314      	movs	r3, #20
   1dd4a:	18fb      	adds	r3, r7, r3
   1dd4c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
   1dd4e:	2314      	movs	r3, #20
   1dd50:	18fb      	adds	r3, r7, r3
   1dd52:	0019      	movs	r1, r3
   1dd54:	201f      	movs	r0, #31
   1dd56:	4b23      	ldr	r3, [pc, #140]	; (1dde4 <ac_init+0xd0>)
   1dd58:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
   1dd5a:	201f      	movs	r0, #31
   1dd5c:	4b22      	ldr	r3, [pc, #136]	; (1dde8 <ac_init+0xd4>)
   1dd5e:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
   1dd60:	687b      	ldr	r3, [r7, #4]
   1dd62:	789a      	ldrb	r2, [r3, #2]
   1dd64:	2314      	movs	r3, #20
   1dd66:	18fb      	adds	r3, r7, r3
   1dd68:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
   1dd6a:	2314      	movs	r3, #20
   1dd6c:	18fb      	adds	r3, r7, r3
   1dd6e:	0019      	movs	r1, r3
   1dd70:	2020      	movs	r0, #32
   1dd72:	4b1c      	ldr	r3, [pc, #112]	; (1dde4 <ac_init+0xd0>)
   1dd74:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
   1dd76:	2020      	movs	r0, #32
   1dd78:	4b1b      	ldr	r3, [pc, #108]	; (1dde8 <ac_init+0xd4>)
   1dd7a:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1dd7c:	2317      	movs	r3, #23
   1dd7e:	18fb      	adds	r3, r7, r3
   1dd80:	2200      	movs	r2, #0
   1dd82:	701a      	strb	r2, [r3, #0]
   1dd84:	e00f      	b.n	1dda6 <ac_init+0x92>
		module_inst->callback[i]        = NULL;
   1dd86:	2317      	movs	r3, #23
   1dd88:	18fb      	adds	r3, r7, r3
   1dd8a:	781b      	ldrb	r3, [r3, #0]
   1dd8c:	68fa      	ldr	r2, [r7, #12]
   1dd8e:	009b      	lsls	r3, r3, #2
   1dd90:	18d3      	adds	r3, r2, r3
   1dd92:	3304      	adds	r3, #4
   1dd94:	2200      	movs	r2, #0
   1dd96:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1dd98:	2317      	movs	r3, #23
   1dd9a:	18fb      	adds	r3, r7, r3
   1dd9c:	781a      	ldrb	r2, [r3, #0]
   1dd9e:	2317      	movs	r3, #23
   1dda0:	18fb      	adds	r3, r7, r3
   1dda2:	3201      	adds	r2, #1
   1dda4:	701a      	strb	r2, [r3, #0]
   1dda6:	2317      	movs	r3, #23
   1dda8:	18fb      	adds	r3, r7, r3
   1ddaa:	781b      	ldrb	r3, [r3, #0]
   1ddac:	2b04      	cmp	r3, #4
   1ddae:	d9ea      	bls.n	1dd86 <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
   1ddb0:	68fb      	ldr	r3, [r7, #12]
   1ddb2:	2200      	movs	r2, #0
   1ddb4:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
   1ddb6:	68fb      	ldr	r3, [r7, #12]
   1ddb8:	2200      	movs	r2, #0
   1ddba:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
   1ddbc:	4b0b      	ldr	r3, [pc, #44]	; (1ddec <ac_init+0xd8>)
   1ddbe:	68fa      	ldr	r2, [r7, #12]
   1ddc0:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
   1ddc2:	687a      	ldr	r2, [r7, #4]
   1ddc4:	68fb      	ldr	r3, [r7, #12]
   1ddc6:	0011      	movs	r1, r2
   1ddc8:	0018      	movs	r0, r3
   1ddca:	4b09      	ldr	r3, [pc, #36]	; (1ddf0 <ac_init+0xdc>)
   1ddcc:	4798      	blx	r3
   1ddce:	0003      	movs	r3, r0
}
   1ddd0:	0018      	movs	r0, r3
   1ddd2:	46bd      	mov	sp, r7
   1ddd4:	b006      	add	sp, #24
   1ddd6:	bd80      	pop	{r7, pc}
   1ddd8:	0001dc15 	.word	0x0001dc15
   1dddc:	42004400 	.word	0x42004400
   1dde0:	0001dc2d 	.word	0x0001dc2d
   1dde4:	000252f5 	.word	0x000252f5
   1dde8:	00025339 	.word	0x00025339
   1ddec:	20000b94 	.word	0x20000b94
   1ddf0:	0001dcb1 	.word	0x0001dcb1

0001ddf4 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
   1ddf4:	b580      	push	{r7, lr}
   1ddf6:	b086      	sub	sp, #24
   1ddf8:	af00      	add	r7, sp, #0
   1ddfa:	60f8      	str	r0, [r7, #12]
   1ddfc:	607a      	str	r2, [r7, #4]
   1ddfe:	230b      	movs	r3, #11
   1de00:	18fb      	adds	r3, r7, r3
   1de02:	1c0a      	adds	r2, r1, #0
   1de04:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1de06:	68fb      	ldr	r3, [r7, #12]
   1de08:	681b      	ldr	r3, [r3, #0]
   1de0a:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
   1de0c:	2300      	movs	r3, #0
   1de0e:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
   1de10:	687b      	ldr	r3, [r7, #4]
   1de12:	685b      	ldr	r3, [r3, #4]
   1de14:	697a      	ldr	r2, [r7, #20]
   1de16:	4313      	orrs	r3, r2
   1de18:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
   1de1a:	687b      	ldr	r3, [r7, #4]
   1de1c:	7a1b      	ldrb	r3, [r3, #8]
   1de1e:	2b00      	cmp	r3, #0
   1de20:	d004      	beq.n	1de2c <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
   1de22:	697b      	ldr	r3, [r7, #20]
   1de24:	2280      	movs	r2, #128	; 0x80
   1de26:	0312      	lsls	r2, r2, #12
   1de28:	4313      	orrs	r3, r2
   1de2a:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
   1de2c:	687b      	ldr	r3, [r7, #4]
   1de2e:	68db      	ldr	r3, [r3, #12]
   1de30:	697a      	ldr	r2, [r7, #20]
   1de32:	4313      	orrs	r3, r2
   1de34:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
   1de36:	687b      	ldr	r3, [r7, #4]
   1de38:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
   1de3a:	687b      	ldr	r3, [r7, #4]
   1de3c:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
   1de3e:	4313      	orrs	r3, r2
   1de40:	b29b      	uxth	r3, r3
   1de42:	001a      	movs	r2, r3
	compctrl_temp |=
   1de44:	697b      	ldr	r3, [r7, #20]
   1de46:	4313      	orrs	r3, r2
   1de48:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
   1de4a:	687b      	ldr	r3, [r7, #4]
   1de4c:	781b      	ldrb	r3, [r3, #0]
   1de4e:	001a      	movs	r2, r3
   1de50:	697b      	ldr	r3, [r7, #20]
   1de52:	4313      	orrs	r3, r2
   1de54:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
   1de56:	687b      	ldr	r3, [r7, #4]
   1de58:	7d5b      	ldrb	r3, [r3, #21]
   1de5a:	001a      	movs	r2, r3
   1de5c:	697b      	ldr	r3, [r7, #20]
   1de5e:	4313      	orrs	r3, r2
   1de60:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
   1de62:	46c0      	nop			; (mov r8, r8)
   1de64:	68fb      	ldr	r3, [r7, #12]
   1de66:	0018      	movs	r0, r3
   1de68:	4b0e      	ldr	r3, [pc, #56]	; (1dea4 <ac_chan_set_config+0xb0>)
   1de6a:	4798      	blx	r3
   1de6c:	1e03      	subs	r3, r0, #0
   1de6e:	d1f9      	bne.n	1de64 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
   1de70:	230b      	movs	r3, #11
   1de72:	18fb      	adds	r3, r7, r3
   1de74:	781a      	ldrb	r2, [r3, #0]
   1de76:	693b      	ldr	r3, [r7, #16]
   1de78:	3204      	adds	r2, #4
   1de7a:	0092      	lsls	r2, r2, #2
   1de7c:	6979      	ldr	r1, [r7, #20]
   1de7e:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
   1de80:	230b      	movs	r3, #11
   1de82:	18fb      	adds	r3, r7, r3
   1de84:	781b      	ldrb	r3, [r3, #0]
   1de86:	687a      	ldr	r2, [r7, #4]
   1de88:	7d12      	ldrb	r2, [r2, #20]
   1de8a:	3a01      	subs	r2, #1
   1de8c:	b2d0      	uxtb	r0, r2
   1de8e:	693a      	ldr	r2, [r7, #16]
   1de90:	2120      	movs	r1, #32
   1de92:	18d3      	adds	r3, r2, r3
   1de94:	185b      	adds	r3, r3, r1
   1de96:	1c02      	adds	r2, r0, #0
   1de98:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1de9a:	2300      	movs	r3, #0
}
   1de9c:	0018      	movs	r0, r3
   1de9e:	46bd      	mov	sp, r7
   1dea0:	b006      	add	sp, #24
   1dea2:	bd80      	pop	{r7, pc}
   1dea4:	0001dc89 	.word	0x0001dc89

0001dea8 <system_gclk_chan_get_config_defaults>:
{
   1dea8:	b580      	push	{r7, lr}
   1deaa:	b082      	sub	sp, #8
   1deac:	af00      	add	r7, sp, #0
   1deae:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1deb0:	687b      	ldr	r3, [r7, #4]
   1deb2:	2200      	movs	r2, #0
   1deb4:	701a      	strb	r2, [r3, #0]
}
   1deb6:	46c0      	nop			; (mov r8, r8)
   1deb8:	46bd      	mov	sp, r7
   1deba:	b002      	add	sp, #8
   1debc:	bd80      	pop	{r7, pc}
	...

0001dec0 <system_apb_clock_set_mask>:
{
   1dec0:	b580      	push	{r7, lr}
   1dec2:	b082      	sub	sp, #8
   1dec4:	af00      	add	r7, sp, #0
   1dec6:	0002      	movs	r2, r0
   1dec8:	6039      	str	r1, [r7, #0]
   1deca:	1dfb      	adds	r3, r7, #7
   1decc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1dece:	1dfb      	adds	r3, r7, #7
   1ded0:	781b      	ldrb	r3, [r3, #0]
   1ded2:	2b01      	cmp	r3, #1
   1ded4:	d00a      	beq.n	1deec <system_apb_clock_set_mask+0x2c>
   1ded6:	2b02      	cmp	r3, #2
   1ded8:	d00f      	beq.n	1defa <system_apb_clock_set_mask+0x3a>
   1deda:	2b00      	cmp	r3, #0
   1dedc:	d114      	bne.n	1df08 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1dede:	4b0e      	ldr	r3, [pc, #56]	; (1df18 <system_apb_clock_set_mask+0x58>)
   1dee0:	4a0d      	ldr	r2, [pc, #52]	; (1df18 <system_apb_clock_set_mask+0x58>)
   1dee2:	6991      	ldr	r1, [r2, #24]
   1dee4:	683a      	ldr	r2, [r7, #0]
   1dee6:	430a      	orrs	r2, r1
   1dee8:	619a      	str	r2, [r3, #24]
			break;
   1deea:	e00f      	b.n	1df0c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1deec:	4b0a      	ldr	r3, [pc, #40]	; (1df18 <system_apb_clock_set_mask+0x58>)
   1deee:	4a0a      	ldr	r2, [pc, #40]	; (1df18 <system_apb_clock_set_mask+0x58>)
   1def0:	69d1      	ldr	r1, [r2, #28]
   1def2:	683a      	ldr	r2, [r7, #0]
   1def4:	430a      	orrs	r2, r1
   1def6:	61da      	str	r2, [r3, #28]
			break;
   1def8:	e008      	b.n	1df0c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1defa:	4b07      	ldr	r3, [pc, #28]	; (1df18 <system_apb_clock_set_mask+0x58>)
   1defc:	4a06      	ldr	r2, [pc, #24]	; (1df18 <system_apb_clock_set_mask+0x58>)
   1defe:	6a11      	ldr	r1, [r2, #32]
   1df00:	683a      	ldr	r2, [r7, #0]
   1df02:	430a      	orrs	r2, r1
   1df04:	621a      	str	r2, [r3, #32]
			break;
   1df06:	e001      	b.n	1df0c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1df08:	2317      	movs	r3, #23
   1df0a:	e000      	b.n	1df0e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1df0c:	2300      	movs	r3, #0
}
   1df0e:	0018      	movs	r0, r3
   1df10:	46bd      	mov	sp, r7
   1df12:	b002      	add	sp, #8
   1df14:	bd80      	pop	{r7, pc}
   1df16:	46c0      	nop			; (mov r8, r8)
   1df18:	40000400 	.word	0x40000400

0001df1c <system_pinmux_get_config_defaults>:
{
   1df1c:	b580      	push	{r7, lr}
   1df1e:	b082      	sub	sp, #8
   1df20:	af00      	add	r7, sp, #0
   1df22:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1df24:	687b      	ldr	r3, [r7, #4]
   1df26:	2280      	movs	r2, #128	; 0x80
   1df28:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1df2a:	687b      	ldr	r3, [r7, #4]
   1df2c:	2200      	movs	r2, #0
   1df2e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1df30:	687b      	ldr	r3, [r7, #4]
   1df32:	2201      	movs	r2, #1
   1df34:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1df36:	687b      	ldr	r3, [r7, #4]
   1df38:	2200      	movs	r2, #0
   1df3a:	70da      	strb	r2, [r3, #3]
}
   1df3c:	46c0      	nop			; (mov r8, r8)
   1df3e:	46bd      	mov	sp, r7
   1df40:	b002      	add	sp, #8
   1df42:	bd80      	pop	{r7, pc}

0001df44 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   1df44:	b580      	push	{r7, lr}
   1df46:	b082      	sub	sp, #8
   1df48:	af00      	add	r7, sp, #0
   1df4a:	0002      	movs	r2, r0
   1df4c:	1dfb      	adds	r3, r7, #7
   1df4e:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   1df50:	1dfb      	adds	r3, r7, #7
   1df52:	781b      	ldrb	r3, [r3, #0]
   1df54:	2b00      	cmp	r3, #0
   1df56:	d002      	beq.n	1df5e <system_voltage_reference_enable+0x1a>
   1df58:	2b01      	cmp	r3, #1
   1df5a:	d007      	beq.n	1df6c <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   1df5c:	e00d      	b.n	1df7a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   1df5e:	4b08      	ldr	r3, [pc, #32]	; (1df80 <system_voltage_reference_enable+0x3c>)
   1df60:	4a07      	ldr	r2, [pc, #28]	; (1df80 <system_voltage_reference_enable+0x3c>)
   1df62:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1df64:	2102      	movs	r1, #2
   1df66:	430a      	orrs	r2, r1
   1df68:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1df6a:	e006      	b.n	1df7a <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1df6c:	4b04      	ldr	r3, [pc, #16]	; (1df80 <system_voltage_reference_enable+0x3c>)
   1df6e:	4a04      	ldr	r2, [pc, #16]	; (1df80 <system_voltage_reference_enable+0x3c>)
   1df70:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1df72:	2104      	movs	r1, #4
   1df74:	430a      	orrs	r2, r1
   1df76:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1df78:	46c0      	nop			; (mov r8, r8)
	}
}
   1df7a:	46bd      	mov	sp, r7
   1df7c:	b002      	add	sp, #8
   1df7e:	bd80      	pop	{r7, pc}
   1df80:	40000800 	.word	0x40000800

0001df84 <adc_is_syncing>:
{
   1df84:	b580      	push	{r7, lr}
   1df86:	b084      	sub	sp, #16
   1df88:	af00      	add	r7, sp, #0
   1df8a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1df8c:	687b      	ldr	r3, [r7, #4]
   1df8e:	681b      	ldr	r3, [r3, #0]
   1df90:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1df92:	68fb      	ldr	r3, [r7, #12]
   1df94:	7e5b      	ldrb	r3, [r3, #25]
   1df96:	b2db      	uxtb	r3, r3
   1df98:	b25b      	sxtb	r3, r3
   1df9a:	2b00      	cmp	r3, #0
   1df9c:	da01      	bge.n	1dfa2 <adc_is_syncing+0x1e>
		return true;
   1df9e:	2301      	movs	r3, #1
   1dfa0:	e000      	b.n	1dfa4 <adc_is_syncing+0x20>
	return false;
   1dfa2:	2300      	movs	r3, #0
}
   1dfa4:	0018      	movs	r0, r3
   1dfa6:	46bd      	mov	sp, r7
   1dfa8:	b004      	add	sp, #16
   1dfaa:	bd80      	pop	{r7, pc}

0001dfac <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   1dfac:	b580      	push	{r7, lr}
   1dfae:	b082      	sub	sp, #8
   1dfb0:	af00      	add	r7, sp, #0
   1dfb2:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   1dfb4:	687b      	ldr	r3, [r7, #4]
   1dfb6:	2200      	movs	r2, #0
   1dfb8:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1dfba:	687b      	ldr	r3, [r7, #4]
   1dfbc:	2200      	movs	r2, #0
   1dfbe:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1dfc0:	687b      	ldr	r3, [r7, #4]
   1dfc2:	2200      	movs	r2, #0
   1dfc4:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   1dfc6:	687b      	ldr	r3, [r7, #4]
   1dfc8:	2200      	movs	r2, #0
   1dfca:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   1dfcc:	687b      	ldr	r3, [r7, #4]
   1dfce:	2200      	movs	r2, #0
   1dfd0:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1dfd2:	687b      	ldr	r3, [r7, #4]
   1dfd4:	2200      	movs	r2, #0
   1dfd6:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   1dfd8:	687b      	ldr	r3, [r7, #4]
   1dfda:	2200      	movs	r2, #0
   1dfdc:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1dfde:	687b      	ldr	r3, [r7, #4]
   1dfe0:	2200      	movs	r2, #0
   1dfe2:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1dfe4:	687b      	ldr	r3, [r7, #4]
   1dfe6:	2200      	movs	r2, #0
   1dfe8:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1dfea:	687b      	ldr	r3, [r7, #4]
   1dfec:	22c0      	movs	r2, #192	; 0xc0
   1dfee:	0152      	lsls	r2, r2, #5
   1dff0:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1dff2:	687b      	ldr	r3, [r7, #4]
   1dff4:	2200      	movs	r2, #0
   1dff6:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   1dff8:	687b      	ldr	r3, [r7, #4]
   1dffa:	2200      	movs	r2, #0
   1dffc:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1dffe:	687b      	ldr	r3, [r7, #4]
   1e000:	2200      	movs	r2, #0
   1e002:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   1e004:	687b      	ldr	r3, [r7, #4]
   1e006:	2200      	movs	r2, #0
   1e008:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   1e00a:	687b      	ldr	r3, [r7, #4]
   1e00c:	2200      	movs	r2, #0
   1e00e:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1e010:	687b      	ldr	r3, [r7, #4]
   1e012:	222a      	movs	r2, #42	; 0x2a
   1e014:	2100      	movs	r1, #0
   1e016:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   1e018:	687b      	ldr	r3, [r7, #4]
   1e01a:	2200      	movs	r2, #0
   1e01c:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1e01e:	687b      	ldr	r3, [r7, #4]
   1e020:	2200      	movs	r2, #0
   1e022:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   1e024:	687b      	ldr	r3, [r7, #4]
   1e026:	2224      	movs	r2, #36	; 0x24
   1e028:	2100      	movs	r1, #0
   1e02a:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1e02c:	687b      	ldr	r3, [r7, #4]
   1e02e:	2200      	movs	r2, #0
   1e030:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1e032:	687b      	ldr	r3, [r7, #4]
   1e034:	2200      	movs	r2, #0
   1e036:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   1e038:	687b      	ldr	r3, [r7, #4]
   1e03a:	2200      	movs	r2, #0
   1e03c:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   1e03e:	687b      	ldr	r3, [r7, #4]
   1e040:	222b      	movs	r2, #43	; 0x2b
   1e042:	2100      	movs	r1, #0
   1e044:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   1e046:	687b      	ldr	r3, [r7, #4]
   1e048:	222c      	movs	r2, #44	; 0x2c
   1e04a:	2100      	movs	r1, #0
   1e04c:	5499      	strb	r1, [r3, r2]
}
   1e04e:	46c0      	nop			; (mov r8, r8)
   1e050:	46bd      	mov	sp, r7
   1e052:	b002      	add	sp, #8
   1e054:	bd80      	pop	{r7, pc}
	...

0001e058 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   1e058:	b580      	push	{r7, lr}
   1e05a:	b098      	sub	sp, #96	; 0x60
   1e05c:	af00      	add	r7, sp, #0
   1e05e:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   1e060:	230c      	movs	r3, #12
   1e062:	18fa      	adds	r2, r7, r3
   1e064:	4b15      	ldr	r3, [pc, #84]	; (1e0bc <_adc_configure_ain_pin+0x64>)
   1e066:	0010      	movs	r0, r2
   1e068:	0019      	movs	r1, r3
   1e06a:	2350      	movs	r3, #80	; 0x50
   1e06c:	001a      	movs	r2, r3
   1e06e:	4b14      	ldr	r3, [pc, #80]	; (1e0c0 <_adc_configure_ain_pin+0x68>)
   1e070:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   1e072:	4b14      	ldr	r3, [pc, #80]	; (1e0c4 <_adc_configure_ain_pin+0x6c>)
   1e074:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   1e076:	687b      	ldr	r3, [r7, #4]
   1e078:	2b13      	cmp	r3, #19
   1e07a:	d81a      	bhi.n	1e0b2 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   1e07c:	230c      	movs	r3, #12
   1e07e:	18fb      	adds	r3, r7, r3
   1e080:	687a      	ldr	r2, [r7, #4]
   1e082:	0092      	lsls	r2, r2, #2
   1e084:	58d3      	ldr	r3, [r2, r3]
   1e086:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   1e088:	2308      	movs	r3, #8
   1e08a:	18fb      	adds	r3, r7, r3
   1e08c:	0018      	movs	r0, r3
   1e08e:	4b0e      	ldr	r3, [pc, #56]	; (1e0c8 <_adc_configure_ain_pin+0x70>)
   1e090:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   1e092:	2308      	movs	r3, #8
   1e094:	18fb      	adds	r3, r7, r3
   1e096:	2200      	movs	r2, #0
   1e098:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   1e09a:	2308      	movs	r3, #8
   1e09c:	18fb      	adds	r3, r7, r3
   1e09e:	2201      	movs	r2, #1
   1e0a0:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1e0a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1e0a4:	b2db      	uxtb	r3, r3
   1e0a6:	2208      	movs	r2, #8
   1e0a8:	18ba      	adds	r2, r7, r2
   1e0aa:	0011      	movs	r1, r2
   1e0ac:	0018      	movs	r0, r3
   1e0ae:	4b07      	ldr	r3, [pc, #28]	; (1e0cc <_adc_configure_ain_pin+0x74>)
   1e0b0:	4798      	blx	r3
	}
}
   1e0b2:	46c0      	nop			; (mov r8, r8)
   1e0b4:	46bd      	mov	sp, r7
   1e0b6:	b018      	add	sp, #96	; 0x60
   1e0b8:	bd80      	pop	{r7, pc}
   1e0ba:	46c0      	nop			; (mov r8, r8)
   1e0bc:	0002b478 	.word	0x0002b478
   1e0c0:	00029725 	.word	0x00029725
   1e0c4:	0000ffff 	.word	0x0000ffff
   1e0c8:	0001df1d 	.word	0x0001df1d
   1e0cc:	000255e1 	.word	0x000255e1

0001e0d0 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1e0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0d2:	b089      	sub	sp, #36	; 0x24
   1e0d4:	af00      	add	r7, sp, #0
   1e0d6:	6078      	str	r0, [r7, #4]
   1e0d8:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   1e0da:	231f      	movs	r3, #31
   1e0dc:	18fb      	adds	r3, r7, r3
   1e0de:	2200      	movs	r2, #0
   1e0e0:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1e0e2:	2310      	movs	r3, #16
   1e0e4:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   1e0e6:	2317      	movs	r3, #23
   1e0e8:	18fb      	adds	r3, r7, r3
   1e0ea:	2200      	movs	r2, #0
   1e0ec:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1e0ee:	687b      	ldr	r3, [r7, #4]
   1e0f0:	681b      	ldr	r3, [r3, #0]
   1e0f2:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e0f4:	230c      	movs	r3, #12
   1e0f6:	18fb      	adds	r3, r7, r3
   1e0f8:	0018      	movs	r0, r3
   1e0fa:	4bce      	ldr	r3, [pc, #824]	; (1e434 <_adc_set_config+0x364>)
   1e0fc:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1e0fe:	683b      	ldr	r3, [r7, #0]
   1e100:	781a      	ldrb	r2, [r3, #0]
   1e102:	230c      	movs	r3, #12
   1e104:	18fb      	adds	r3, r7, r3
   1e106:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   1e108:	230c      	movs	r3, #12
   1e10a:	18fb      	adds	r3, r7, r3
   1e10c:	0019      	movs	r1, r3
   1e10e:	201e      	movs	r0, #30
   1e110:	4bc9      	ldr	r3, [pc, #804]	; (1e438 <_adc_set_config+0x368>)
   1e112:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   1e114:	201e      	movs	r0, #30
   1e116:	4bc9      	ldr	r3, [pc, #804]	; (1e43c <_adc_set_config+0x36c>)
   1e118:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   1e11a:	683b      	ldr	r3, [r7, #0]
   1e11c:	222c      	movs	r2, #44	; 0x2c
   1e11e:	5c9b      	ldrb	r3, [r3, r2]
   1e120:	2b00      	cmp	r3, #0
   1e122:	d040      	beq.n	1e1a6 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   1e124:	2316      	movs	r3, #22
   1e126:	18fb      	adds	r3, r7, r3
   1e128:	683a      	ldr	r2, [r7, #0]
   1e12a:	212b      	movs	r1, #43	; 0x2b
   1e12c:	5c52      	ldrb	r2, [r2, r1]
   1e12e:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1e130:	683b      	ldr	r3, [r7, #0]
   1e132:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   1e134:	2315      	movs	r3, #21
   1e136:	18fb      	adds	r3, r7, r3
   1e138:	2216      	movs	r2, #22
   1e13a:	18ba      	adds	r2, r7, r2
   1e13c:	7812      	ldrb	r2, [r2, #0]
   1e13e:	188a      	adds	r2, r1, r2
   1e140:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   1e142:	683b      	ldr	r3, [r7, #0]
   1e144:	222c      	movs	r2, #44	; 0x2c
   1e146:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   1e148:	230f      	movs	r3, #15
   1e14a:	18fb      	adds	r3, r7, r3
   1e14c:	2215      	movs	r2, #21
   1e14e:	18ba      	adds	r2, r7, r2
   1e150:	7812      	ldrb	r2, [r2, #0]
   1e152:	188a      	adds	r2, r1, r2
   1e154:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   1e156:	e018      	b.n	1e18a <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   1e158:	2316      	movs	r3, #22
   1e15a:	18fb      	adds	r3, r7, r3
   1e15c:	781b      	ldrb	r3, [r3, #0]
   1e15e:	220f      	movs	r2, #15
   1e160:	4013      	ands	r3, r2
   1e162:	683a      	ldr	r2, [r7, #0]
   1e164:	7b12      	ldrb	r2, [r2, #12]
   1e166:	189b      	adds	r3, r3, r2
   1e168:	0018      	movs	r0, r3
   1e16a:	4bb5      	ldr	r3, [pc, #724]	; (1e440 <_adc_set_config+0x370>)
   1e16c:	4798      	blx	r3
			start_pin++;
   1e16e:	2315      	movs	r3, #21
   1e170:	18fb      	adds	r3, r7, r3
   1e172:	781a      	ldrb	r2, [r3, #0]
   1e174:	2315      	movs	r3, #21
   1e176:	18fb      	adds	r3, r7, r3
   1e178:	3201      	adds	r2, #1
   1e17a:	701a      	strb	r2, [r3, #0]
			offset++;
   1e17c:	2316      	movs	r3, #22
   1e17e:	18fb      	adds	r3, r7, r3
   1e180:	781a      	ldrb	r2, [r3, #0]
   1e182:	2316      	movs	r3, #22
   1e184:	18fb      	adds	r3, r7, r3
   1e186:	3201      	adds	r2, #1
   1e188:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   1e18a:	2315      	movs	r3, #21
   1e18c:	18fa      	adds	r2, r7, r3
   1e18e:	230f      	movs	r3, #15
   1e190:	18fb      	adds	r3, r7, r3
   1e192:	7812      	ldrb	r2, [r2, #0]
   1e194:	781b      	ldrb	r3, [r3, #0]
   1e196:	429a      	cmp	r2, r3
   1e198:	d3de      	bcc.n	1e158 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   1e19a:	683b      	ldr	r3, [r7, #0]
   1e19c:	89db      	ldrh	r3, [r3, #14]
   1e19e:	0018      	movs	r0, r3
   1e1a0:	4ba7      	ldr	r3, [pc, #668]	; (1e440 <_adc_set_config+0x370>)
   1e1a2:	4798      	blx	r3
   1e1a4:	e009      	b.n	1e1ba <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   1e1a6:	683b      	ldr	r3, [r7, #0]
   1e1a8:	7b1b      	ldrb	r3, [r3, #12]
   1e1aa:	0018      	movs	r0, r3
   1e1ac:	4ba4      	ldr	r3, [pc, #656]	; (1e440 <_adc_set_config+0x370>)
   1e1ae:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1e1b0:	683b      	ldr	r3, [r7, #0]
   1e1b2:	89db      	ldrh	r3, [r3, #14]
   1e1b4:	0018      	movs	r0, r3
   1e1b6:	4ba2      	ldr	r3, [pc, #648]	; (1e440 <_adc_set_config+0x370>)
   1e1b8:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1e1ba:	683b      	ldr	r3, [r7, #0]
   1e1bc:	7d5b      	ldrb	r3, [r3, #21]
   1e1be:	009b      	lsls	r3, r3, #2
   1e1c0:	b2da      	uxtb	r2, r3
   1e1c2:	693b      	ldr	r3, [r7, #16]
   1e1c4:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1e1c6:	683b      	ldr	r3, [r7, #0]
   1e1c8:	7d9b      	ldrb	r3, [r3, #22]
   1e1ca:	01db      	lsls	r3, r3, #7
   1e1cc:	b25a      	sxtb	r2, r3
			(config->reference);
   1e1ce:	683b      	ldr	r3, [r7, #0]
   1e1d0:	785b      	ldrb	r3, [r3, #1]
   1e1d2:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1e1d4:	4313      	orrs	r3, r2
   1e1d6:	b25b      	sxtb	r3, r3
   1e1d8:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   1e1da:	693b      	ldr	r3, [r7, #16]
   1e1dc:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1e1de:	683b      	ldr	r3, [r7, #0]
   1e1e0:	791b      	ldrb	r3, [r3, #4]
   1e1e2:	2b34      	cmp	r3, #52	; 0x34
   1e1e4:	d846      	bhi.n	1e274 <_adc_set_config+0x1a4>
   1e1e6:	009a      	lsls	r2, r3, #2
   1e1e8:	4b96      	ldr	r3, [pc, #600]	; (1e444 <_adc_set_config+0x374>)
   1e1ea:	18d3      	adds	r3, r2, r3
   1e1ec:	681b      	ldr	r3, [r3, #0]
   1e1ee:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1e1f0:	231f      	movs	r3, #31
   1e1f2:	18fb      	adds	r3, r7, r3
   1e1f4:	683a      	ldr	r2, [r7, #0]
   1e1f6:	7c52      	ldrb	r2, [r2, #17]
   1e1f8:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   1e1fa:	2317      	movs	r3, #23
   1e1fc:	18fb      	adds	r3, r7, r3
   1e1fe:	683a      	ldr	r2, [r7, #0]
   1e200:	7c12      	ldrb	r2, [r2, #16]
   1e202:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1e204:	2310      	movs	r3, #16
   1e206:	61bb      	str	r3, [r7, #24]
		break;
   1e208:	e036      	b.n	1e278 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1e20a:	231f      	movs	r3, #31
   1e20c:	18fb      	adds	r3, r7, r3
   1e20e:	2201      	movs	r2, #1
   1e210:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1e212:	2317      	movs	r3, #23
   1e214:	18fb      	adds	r3, r7, r3
   1e216:	2202      	movs	r2, #2
   1e218:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1e21a:	2310      	movs	r3, #16
   1e21c:	61bb      	str	r3, [r7, #24]
		break;
   1e21e:	e02b      	b.n	1e278 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1e220:	231f      	movs	r3, #31
   1e222:	18fb      	adds	r3, r7, r3
   1e224:	2202      	movs	r2, #2
   1e226:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   1e228:	2317      	movs	r3, #23
   1e22a:	18fb      	adds	r3, r7, r3
   1e22c:	2204      	movs	r2, #4
   1e22e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1e230:	2310      	movs	r3, #16
   1e232:	61bb      	str	r3, [r7, #24]
		break;
   1e234:	e020      	b.n	1e278 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1e236:	231f      	movs	r3, #31
   1e238:	18fb      	adds	r3, r7, r3
   1e23a:	2201      	movs	r2, #1
   1e23c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   1e23e:	2317      	movs	r3, #23
   1e240:	18fb      	adds	r3, r7, r3
   1e242:	2206      	movs	r2, #6
   1e244:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1e246:	2310      	movs	r3, #16
   1e248:	61bb      	str	r3, [r7, #24]
		break;
   1e24a:	e015      	b.n	1e278 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   1e24c:	231f      	movs	r3, #31
   1e24e:	18fb      	adds	r3, r7, r3
   1e250:	2200      	movs	r2, #0
   1e252:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   1e254:	2317      	movs	r3, #23
   1e256:	18fb      	adds	r3, r7, r3
   1e258:	2208      	movs	r2, #8
   1e25a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1e25c:	2310      	movs	r3, #16
   1e25e:	61bb      	str	r3, [r7, #24]
		break;
   1e260:	e00a      	b.n	1e278 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   1e262:	2330      	movs	r3, #48	; 0x30
   1e264:	61bb      	str	r3, [r7, #24]
		break;
   1e266:	e007      	b.n	1e278 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   1e268:	2320      	movs	r3, #32
   1e26a:	61bb      	str	r3, [r7, #24]
		break;
   1e26c:	e004      	b.n	1e278 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   1e26e:	2300      	movs	r3, #0
   1e270:	61bb      	str	r3, [r7, #24]
		break;
   1e272:	e001      	b.n	1e278 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   1e274:	2317      	movs	r3, #23
   1e276:	e1ae      	b.n	1e5d6 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   1e278:	231f      	movs	r3, #31
   1e27a:	18fb      	adds	r3, r7, r3
   1e27c:	781b      	ldrb	r3, [r3, #0]
   1e27e:	011b      	lsls	r3, r3, #4
   1e280:	b2db      	uxtb	r3, r3
   1e282:	2270      	movs	r2, #112	; 0x70
   1e284:	4013      	ands	r3, r2
   1e286:	b2da      	uxtb	r2, r3
   1e288:	2317      	movs	r3, #23
   1e28a:	18fb      	adds	r3, r7, r3
   1e28c:	781b      	ldrb	r3, [r3, #0]
   1e28e:	4313      	orrs	r3, r2
   1e290:	b2da      	uxtb	r2, r3
   1e292:	693b      	ldr	r3, [r7, #16]
   1e294:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   1e296:	683b      	ldr	r3, [r7, #0]
   1e298:	7ddb      	ldrb	r3, [r3, #23]
   1e29a:	2b3f      	cmp	r3, #63	; 0x3f
   1e29c:	d901      	bls.n	1e2a2 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1e29e:	2317      	movs	r3, #23
   1e2a0:	e199      	b.n	1e5d6 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1e2a2:	683b      	ldr	r3, [r7, #0]
   1e2a4:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   1e2a6:	693b      	ldr	r3, [r7, #16]
   1e2a8:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   1e2aa:	46c0      	nop			; (mov r8, r8)
   1e2ac:	687b      	ldr	r3, [r7, #4]
   1e2ae:	0018      	movs	r0, r3
   1e2b0:	4b65      	ldr	r3, [pc, #404]	; (1e448 <_adc_set_config+0x378>)
   1e2b2:	4798      	blx	r3
   1e2b4:	1e03      	subs	r3, r0, #0
   1e2b6:	d1f9      	bne.n	1e2ac <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   1e2b8:	683b      	ldr	r3, [r7, #0]
   1e2ba:	885a      	ldrh	r2, [r3, #2]
   1e2bc:	69bb      	ldr	r3, [r7, #24]
   1e2be:	b29b      	uxth	r3, r3
   1e2c0:	4313      	orrs	r3, r2
   1e2c2:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1e2c4:	683b      	ldr	r3, [r7, #0]
   1e2c6:	2124      	movs	r1, #36	; 0x24
   1e2c8:	5c5b      	ldrb	r3, [r3, r1]
   1e2ca:	b29b      	uxth	r3, r3
   1e2cc:	00db      	lsls	r3, r3, #3
   1e2ce:	b29b      	uxth	r3, r3
			resolution |
   1e2d0:	4313      	orrs	r3, r2
   1e2d2:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1e2d4:	683b      	ldr	r3, [r7, #0]
   1e2d6:	7d1b      	ldrb	r3, [r3, #20]
   1e2d8:	b29b      	uxth	r3, r3
   1e2da:	009b      	lsls	r3, r3, #2
   1e2dc:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1e2de:	4313      	orrs	r3, r2
   1e2e0:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1e2e2:	683b      	ldr	r3, [r7, #0]
   1e2e4:	7c9b      	ldrb	r3, [r3, #18]
   1e2e6:	b29b      	uxth	r3, r3
   1e2e8:	18db      	adds	r3, r3, r3
   1e2ea:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1e2ec:	4313      	orrs	r3, r2
   1e2ee:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1e2f0:	683b      	ldr	r3, [r7, #0]
   1e2f2:	7cdb      	ldrb	r3, [r3, #19]
   1e2f4:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1e2f6:	4313      	orrs	r3, r2
   1e2f8:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   1e2fa:	693b      	ldr	r3, [r7, #16]
   1e2fc:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1e2fe:	683b      	ldr	r3, [r7, #0]
   1e300:	7e1b      	ldrb	r3, [r3, #24]
   1e302:	2b00      	cmp	r3, #0
   1e304:	d100      	bne.n	1e308 <_adc_set_config+0x238>
   1e306:	e0c4      	b.n	1e492 <_adc_set_config+0x3c2>
		switch (resolution) {
   1e308:	69bb      	ldr	r3, [r7, #24]
   1e30a:	2b10      	cmp	r3, #16
   1e30c:	d100      	bne.n	1e310 <_adc_set_config+0x240>
   1e30e:	e076      	b.n	1e3fe <_adc_set_config+0x32e>
   1e310:	d802      	bhi.n	1e318 <_adc_set_config+0x248>
   1e312:	2b00      	cmp	r3, #0
   1e314:	d04d      	beq.n	1e3b2 <_adc_set_config+0x2e2>
   1e316:	e0bc      	b.n	1e492 <_adc_set_config+0x3c2>
   1e318:	2b20      	cmp	r3, #32
   1e31a:	d023      	beq.n	1e364 <_adc_set_config+0x294>
   1e31c:	2b30      	cmp	r3, #48	; 0x30
   1e31e:	d000      	beq.n	1e322 <_adc_set_config+0x252>
   1e320:	e0b7      	b.n	1e492 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1e322:	683b      	ldr	r3, [r7, #0]
   1e324:	7cdb      	ldrb	r3, [r3, #19]
   1e326:	2b00      	cmp	r3, #0
   1e328:	d011      	beq.n	1e34e <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   1e32a:	683b      	ldr	r3, [r7, #0]
   1e32c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1e32e:	2b7f      	cmp	r3, #127	; 0x7f
   1e330:	dc0b      	bgt.n	1e34a <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1e332:	683b      	ldr	r3, [r7, #0]
   1e334:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   1e336:	3380      	adds	r3, #128	; 0x80
   1e338:	db07      	blt.n	1e34a <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   1e33a:	683b      	ldr	r3, [r7, #0]
   1e33c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   1e33e:	2b7f      	cmp	r3, #127	; 0x7f
   1e340:	dc03      	bgt.n	1e34a <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   1e342:	683b      	ldr	r3, [r7, #0]
   1e344:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   1e346:	3380      	adds	r3, #128	; 0x80
   1e348:	da01      	bge.n	1e34e <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e34a:	2317      	movs	r3, #23
   1e34c:	e143      	b.n	1e5d6 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   1e34e:	683b      	ldr	r3, [r7, #0]
   1e350:	69db      	ldr	r3, [r3, #28]
   1e352:	2bff      	cmp	r3, #255	; 0xff
   1e354:	dc04      	bgt.n	1e360 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   1e356:	683b      	ldr	r3, [r7, #0]
   1e358:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   1e35a:	2bff      	cmp	r3, #255	; 0xff
   1e35c:	dc00      	bgt.n	1e360 <_adc_set_config+0x290>
   1e35e:	e091      	b.n	1e484 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e360:	2317      	movs	r3, #23
   1e362:	e138      	b.n	1e5d6 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   1e364:	683b      	ldr	r3, [r7, #0]
   1e366:	7cdb      	ldrb	r3, [r3, #19]
   1e368:	2b00      	cmp	r3, #0
   1e36a:	d015      	beq.n	1e398 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   1e36c:	683b      	ldr	r3, [r7, #0]
   1e36e:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1e370:	4a36      	ldr	r2, [pc, #216]	; (1e44c <_adc_set_config+0x37c>)
   1e372:	4293      	cmp	r3, r2
   1e374:	dc0e      	bgt.n	1e394 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   1e376:	683b      	ldr	r3, [r7, #0]
   1e378:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   1e37a:	4a35      	ldr	r2, [pc, #212]	; (1e450 <_adc_set_config+0x380>)
   1e37c:	4293      	cmp	r3, r2
   1e37e:	db09      	blt.n	1e394 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   1e380:	683b      	ldr	r3, [r7, #0]
   1e382:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   1e384:	4a31      	ldr	r2, [pc, #196]	; (1e44c <_adc_set_config+0x37c>)
   1e386:	4293      	cmp	r3, r2
   1e388:	dc04      	bgt.n	1e394 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   1e38a:	683b      	ldr	r3, [r7, #0]
   1e38c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   1e38e:	4a30      	ldr	r2, [pc, #192]	; (1e450 <_adc_set_config+0x380>)
   1e390:	4293      	cmp	r3, r2
   1e392:	da01      	bge.n	1e398 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e394:	2317      	movs	r3, #23
   1e396:	e11e      	b.n	1e5d6 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   1e398:	683b      	ldr	r3, [r7, #0]
   1e39a:	69db      	ldr	r3, [r3, #28]
   1e39c:	4a2d      	ldr	r2, [pc, #180]	; (1e454 <_adc_set_config+0x384>)
   1e39e:	4293      	cmp	r3, r2
   1e3a0:	dc05      	bgt.n	1e3ae <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1e3a2:	683b      	ldr	r3, [r7, #0]
   1e3a4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   1e3a6:	4a2b      	ldr	r2, [pc, #172]	; (1e454 <_adc_set_config+0x384>)
   1e3a8:	4293      	cmp	r3, r2
   1e3aa:	dc00      	bgt.n	1e3ae <_adc_set_config+0x2de>
   1e3ac:	e06c      	b.n	1e488 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e3ae:	2317      	movs	r3, #23
   1e3b0:	e111      	b.n	1e5d6 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1e3b2:	683b      	ldr	r3, [r7, #0]
   1e3b4:	7cdb      	ldrb	r3, [r3, #19]
   1e3b6:	2b00      	cmp	r3, #0
   1e3b8:	d015      	beq.n	1e3e6 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   1e3ba:	683b      	ldr	r3, [r7, #0]
   1e3bc:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1e3be:	4a26      	ldr	r2, [pc, #152]	; (1e458 <_adc_set_config+0x388>)
   1e3c0:	4293      	cmp	r3, r2
   1e3c2:	dc0e      	bgt.n	1e3e2 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   1e3c4:	683b      	ldr	r3, [r7, #0]
   1e3c6:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   1e3c8:	4a24      	ldr	r2, [pc, #144]	; (1e45c <_adc_set_config+0x38c>)
   1e3ca:	4293      	cmp	r3, r2
   1e3cc:	db09      	blt.n	1e3e2 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1e3ce:	683b      	ldr	r3, [r7, #0]
   1e3d0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1e3d2:	4a21      	ldr	r2, [pc, #132]	; (1e458 <_adc_set_config+0x388>)
   1e3d4:	4293      	cmp	r3, r2
   1e3d6:	dc04      	bgt.n	1e3e2 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   1e3d8:	683b      	ldr	r3, [r7, #0]
   1e3da:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   1e3dc:	4a1f      	ldr	r2, [pc, #124]	; (1e45c <_adc_set_config+0x38c>)
   1e3de:	4293      	cmp	r3, r2
   1e3e0:	da01      	bge.n	1e3e6 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e3e2:	2317      	movs	r3, #23
   1e3e4:	e0f7      	b.n	1e5d6 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   1e3e6:	683b      	ldr	r3, [r7, #0]
   1e3e8:	69db      	ldr	r3, [r3, #28]
   1e3ea:	4a1d      	ldr	r2, [pc, #116]	; (1e460 <_adc_set_config+0x390>)
   1e3ec:	4293      	cmp	r3, r2
   1e3ee:	dc04      	bgt.n	1e3fa <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1e3f0:	683b      	ldr	r3, [r7, #0]
   1e3f2:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   1e3f4:	4a1a      	ldr	r2, [pc, #104]	; (1e460 <_adc_set_config+0x390>)
   1e3f6:	4293      	cmp	r3, r2
   1e3f8:	dd48      	ble.n	1e48c <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e3fa:	2317      	movs	r3, #23
   1e3fc:	e0eb      	b.n	1e5d6 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1e3fe:	683b      	ldr	r3, [r7, #0]
   1e400:	7cdb      	ldrb	r3, [r3, #19]
   1e402:	2b00      	cmp	r3, #0
   1e404:	d032      	beq.n	1e46c <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   1e406:	683b      	ldr	r3, [r7, #0]
   1e408:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1e40a:	4a16      	ldr	r2, [pc, #88]	; (1e464 <_adc_set_config+0x394>)
   1e40c:	4293      	cmp	r3, r2
   1e40e:	dc0e      	bgt.n	1e42e <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1e410:	683b      	ldr	r3, [r7, #0]
   1e412:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   1e414:	4a14      	ldr	r2, [pc, #80]	; (1e468 <_adc_set_config+0x398>)
   1e416:	4293      	cmp	r3, r2
   1e418:	db09      	blt.n	1e42e <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   1e41a:	683b      	ldr	r3, [r7, #0]
   1e41c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1e41e:	4a11      	ldr	r2, [pc, #68]	; (1e464 <_adc_set_config+0x394>)
   1e420:	4293      	cmp	r3, r2
   1e422:	dc04      	bgt.n	1e42e <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   1e424:	683b      	ldr	r3, [r7, #0]
   1e426:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   1e428:	4a0f      	ldr	r2, [pc, #60]	; (1e468 <_adc_set_config+0x398>)
   1e42a:	4293      	cmp	r3, r2
   1e42c:	da1e      	bge.n	1e46c <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e42e:	2317      	movs	r3, #23
   1e430:	e0d1      	b.n	1e5d6 <_adc_set_config+0x506>
   1e432:	46c0      	nop			; (mov r8, r8)
   1e434:	0001dea9 	.word	0x0001dea9
   1e438:	000252f5 	.word	0x000252f5
   1e43c:	00025339 	.word	0x00025339
   1e440:	0001e059 	.word	0x0001e059
   1e444:	0002b4c8 	.word	0x0002b4c8
   1e448:	0001df85 	.word	0x0001df85
   1e44c:	000001ff 	.word	0x000001ff
   1e450:	fffffe00 	.word	0xfffffe00
   1e454:	000003ff 	.word	0x000003ff
   1e458:	000007ff 	.word	0x000007ff
   1e45c:	fffff800 	.word	0xfffff800
   1e460:	00000fff 	.word	0x00000fff
   1e464:	00007fff 	.word	0x00007fff
   1e468:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   1e46c:	683b      	ldr	r3, [r7, #0]
   1e46e:	69db      	ldr	r3, [r3, #28]
   1e470:	4a5b      	ldr	r2, [pc, #364]	; (1e5e0 <_adc_set_config+0x510>)
   1e472:	4293      	cmp	r3, r2
   1e474:	dc04      	bgt.n	1e480 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   1e476:	683b      	ldr	r3, [r7, #0]
   1e478:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   1e47a:	4a59      	ldr	r2, [pc, #356]	; (1e5e0 <_adc_set_config+0x510>)
   1e47c:	4293      	cmp	r3, r2
   1e47e:	dd07      	ble.n	1e490 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e480:	2317      	movs	r3, #23
   1e482:	e0a8      	b.n	1e5d6 <_adc_set_config+0x506>
			break;
   1e484:	46c0      	nop			; (mov r8, r8)
   1e486:	e004      	b.n	1e492 <_adc_set_config+0x3c2>
			break;
   1e488:	46c0      	nop			; (mov r8, r8)
   1e48a:	e002      	b.n	1e492 <_adc_set_config+0x3c2>
			break;
   1e48c:	46c0      	nop			; (mov r8, r8)
   1e48e:	e000      	b.n	1e492 <_adc_set_config+0x3c2>
			}
			break;
   1e490:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   1e492:	46c0      	nop			; (mov r8, r8)
   1e494:	687b      	ldr	r3, [r7, #4]
   1e496:	0018      	movs	r0, r3
   1e498:	4b52      	ldr	r3, [pc, #328]	; (1e5e4 <_adc_set_config+0x514>)
   1e49a:	4798      	blx	r3
   1e49c:	1e03      	subs	r3, r0, #0
   1e49e:	d1f9      	bne.n	1e494 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1e4a0:	683b      	ldr	r3, [r7, #0]
   1e4a2:	7e1a      	ldrb	r2, [r3, #24]
   1e4a4:	693b      	ldr	r3, [r7, #16]
   1e4a6:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   1e4a8:	46c0      	nop			; (mov r8, r8)
   1e4aa:	687b      	ldr	r3, [r7, #4]
   1e4ac:	0018      	movs	r0, r3
   1e4ae:	4b4d      	ldr	r3, [pc, #308]	; (1e5e4 <_adc_set_config+0x514>)
   1e4b0:	4798      	blx	r3
   1e4b2:	1e03      	subs	r3, r0, #0
   1e4b4:	d1f9      	bne.n	1e4aa <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   1e4b6:	683b      	ldr	r3, [r7, #0]
   1e4b8:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   1e4ba:	b29a      	uxth	r2, r3
   1e4bc:	693b      	ldr	r3, [r7, #16]
   1e4be:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1e4c0:	46c0      	nop			; (mov r8, r8)
   1e4c2:	687b      	ldr	r3, [r7, #4]
   1e4c4:	0018      	movs	r0, r3
   1e4c6:	4b47      	ldr	r3, [pc, #284]	; (1e5e4 <_adc_set_config+0x514>)
   1e4c8:	4798      	blx	r3
   1e4ca:	1e03      	subs	r3, r0, #0
   1e4cc:	d1f9      	bne.n	1e4c2 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1e4ce:	683b      	ldr	r3, [r7, #0]
   1e4d0:	6a1b      	ldr	r3, [r3, #32]
   1e4d2:	b29a      	uxth	r2, r3
   1e4d4:	693b      	ldr	r3, [r7, #16]
   1e4d6:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   1e4d8:	2314      	movs	r3, #20
   1e4da:	18fb      	adds	r3, r7, r3
   1e4dc:	683a      	ldr	r2, [r7, #0]
   1e4de:	212c      	movs	r1, #44	; 0x2c
   1e4e0:	5c52      	ldrb	r2, [r2, r1]
   1e4e2:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   1e4e4:	2314      	movs	r3, #20
   1e4e6:	18fb      	adds	r3, r7, r3
   1e4e8:	781b      	ldrb	r3, [r3, #0]
   1e4ea:	2b00      	cmp	r3, #0
   1e4ec:	d006      	beq.n	1e4fc <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1e4ee:	2314      	movs	r3, #20
   1e4f0:	18fb      	adds	r3, r7, r3
   1e4f2:	781a      	ldrb	r2, [r3, #0]
   1e4f4:	2314      	movs	r3, #20
   1e4f6:	18fb      	adds	r3, r7, r3
   1e4f8:	3a01      	subs	r2, #1
   1e4fa:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1e4fc:	2314      	movs	r3, #20
   1e4fe:	18fb      	adds	r3, r7, r3
   1e500:	781b      	ldrb	r3, [r3, #0]
   1e502:	2b0f      	cmp	r3, #15
   1e504:	d804      	bhi.n	1e510 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   1e506:	683b      	ldr	r3, [r7, #0]
   1e508:	222b      	movs	r2, #43	; 0x2b
   1e50a:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1e50c:	2b0f      	cmp	r3, #15
   1e50e:	d901      	bls.n	1e514 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1e510:	2317      	movs	r3, #23
   1e512:	e060      	b.n	1e5d6 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   1e514:	46c0      	nop			; (mov r8, r8)
   1e516:	687b      	ldr	r3, [r7, #4]
   1e518:	0018      	movs	r0, r3
   1e51a:	4b32      	ldr	r3, [pc, #200]	; (1e5e4 <_adc_set_config+0x514>)
   1e51c:	4798      	blx	r3
   1e51e:	1e03      	subs	r3, r0, #0
   1e520:	d1f9      	bne.n	1e516 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1e522:	683b      	ldr	r3, [r7, #0]
   1e524:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   1e526:	683a      	ldr	r2, [r7, #0]
   1e528:	212b      	movs	r1, #43	; 0x2b
   1e52a:	5c52      	ldrb	r2, [r2, r1]
   1e52c:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1e52e:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1e530:	2214      	movs	r2, #20
   1e532:	18ba      	adds	r2, r7, r2
   1e534:	7812      	ldrb	r2, [r2, #0]
   1e536:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   1e538:	4313      	orrs	r3, r2
			config->negative_input |
   1e53a:	683a      	ldr	r2, [r7, #0]
   1e53c:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1e53e:	4313      	orrs	r3, r2
			config->positive_input;
   1e540:	683a      	ldr	r2, [r7, #0]
   1e542:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   1e544:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1e546:	693b      	ldr	r3, [r7, #16]
   1e548:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   1e54a:	683b      	ldr	r3, [r7, #0]
   1e54c:	222a      	movs	r2, #42	; 0x2a
   1e54e:	5c9a      	ldrb	r2, [r3, r2]
   1e550:	693b      	ldr	r3, [r7, #16]
   1e552:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   1e554:	693b      	ldr	r3, [r7, #16]
   1e556:	220f      	movs	r2, #15
   1e558:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   1e55a:	683b      	ldr	r3, [r7, #0]
   1e55c:	2224      	movs	r2, #36	; 0x24
   1e55e:	5c9b      	ldrb	r3, [r3, r2]
   1e560:	2b00      	cmp	r3, #0
   1e562:	d01e      	beq.n	1e5a2 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   1e564:	683b      	ldr	r3, [r7, #0]
   1e566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1e568:	4a1f      	ldr	r2, [pc, #124]	; (1e5e8 <_adc_set_config+0x518>)
   1e56a:	4293      	cmp	r3, r2
   1e56c:	d901      	bls.n	1e572 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   1e56e:	2317      	movs	r3, #23
   1e570:	e031      	b.n	1e5d6 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1e572:	683b      	ldr	r3, [r7, #0]
   1e574:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1e576:	693b      	ldr	r3, [r7, #16]
   1e578:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1e57a:	683b      	ldr	r3, [r7, #0]
   1e57c:	2228      	movs	r2, #40	; 0x28
   1e57e:	5e9b      	ldrsh	r3, [r3, r2]
   1e580:	4a1a      	ldr	r2, [pc, #104]	; (1e5ec <_adc_set_config+0x51c>)
   1e582:	4293      	cmp	r3, r2
   1e584:	dc05      	bgt.n	1e592 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   1e586:	683b      	ldr	r3, [r7, #0]
   1e588:	2228      	movs	r2, #40	; 0x28
   1e58a:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   1e58c:	4a18      	ldr	r2, [pc, #96]	; (1e5f0 <_adc_set_config+0x520>)
   1e58e:	4293      	cmp	r3, r2
   1e590:	da01      	bge.n	1e596 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   1e592:	2317      	movs	r3, #23
   1e594:	e01f      	b.n	1e5d6 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   1e596:	683b      	ldr	r3, [r7, #0]
   1e598:	2228      	movs	r2, #40	; 0x28
   1e59a:	5e9b      	ldrsh	r3, [r3, r2]
   1e59c:	b29a      	uxth	r2, r3
   1e59e:	693b      	ldr	r3, [r7, #16]
   1e5a0:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1e5a2:	4b14      	ldr	r3, [pc, #80]	; (1e5f4 <_adc_set_config+0x524>)
   1e5a4:	681b      	ldr	r3, [r3, #0]
   1e5a6:	08db      	lsrs	r3, r3, #3
   1e5a8:	b29b      	uxth	r3, r3
   1e5aa:	021b      	lsls	r3, r3, #8
   1e5ac:	b29a      	uxth	r2, r3
   1e5ae:	23e0      	movs	r3, #224	; 0xe0
   1e5b0:	00db      	lsls	r3, r3, #3
   1e5b2:	4013      	ands	r3, r2
   1e5b4:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   1e5b6:	4b10      	ldr	r3, [pc, #64]	; (1e5f8 <_adc_set_config+0x528>)
   1e5b8:	685c      	ldr	r4, [r3, #4]
   1e5ba:	681b      	ldr	r3, [r3, #0]
   1e5bc:	0161      	lsls	r1, r4, #5
   1e5be:	0edd      	lsrs	r5, r3, #27
   1e5c0:	430d      	orrs	r5, r1
   1e5c2:	0ee6      	lsrs	r6, r4, #27
   1e5c4:	b2ab      	uxth	r3, r5
   1e5c6:	21ff      	movs	r1, #255	; 0xff
   1e5c8:	400b      	ands	r3, r1
   1e5ca:	b29b      	uxth	r3, r3
			) |
   1e5cc:	4313      	orrs	r3, r2
   1e5ce:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1e5d0:	693b      	ldr	r3, [r7, #16]
   1e5d2:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   1e5d4:	2300      	movs	r3, #0
}
   1e5d6:	0018      	movs	r0, r3
   1e5d8:	46bd      	mov	sp, r7
   1e5da:	b009      	add	sp, #36	; 0x24
   1e5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5de:	46c0      	nop			; (mov r8, r8)
   1e5e0:	0000ffff 	.word	0x0000ffff
   1e5e4:	0001df85 	.word	0x0001df85
   1e5e8:	00000fff 	.word	0x00000fff
   1e5ec:	000007ff 	.word	0x000007ff
   1e5f0:	fffff800 	.word	0xfffff800
   1e5f4:	00806024 	.word	0x00806024
   1e5f8:	00806020 	.word	0x00806020

0001e5fc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1e5fc:	b580      	push	{r7, lr}
   1e5fe:	b086      	sub	sp, #24
   1e600:	af00      	add	r7, sp, #0
   1e602:	60f8      	str	r0, [r7, #12]
   1e604:	60b9      	str	r1, [r7, #8]
   1e606:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1e608:	68fb      	ldr	r3, [r7, #12]
   1e60a:	68ba      	ldr	r2, [r7, #8]
   1e60c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1e60e:	2380      	movs	r3, #128	; 0x80
   1e610:	025b      	lsls	r3, r3, #9
   1e612:	0019      	movs	r1, r3
   1e614:	2002      	movs	r0, #2
   1e616:	4b32      	ldr	r3, [pc, #200]	; (1e6e0 <adc_init+0xe4>)
   1e618:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1e61a:	68bb      	ldr	r3, [r7, #8]
   1e61c:	781b      	ldrb	r3, [r3, #0]
   1e61e:	b2db      	uxtb	r3, r3
   1e620:	001a      	movs	r2, r3
   1e622:	2301      	movs	r3, #1
   1e624:	4013      	ands	r3, r2
   1e626:	d001      	beq.n	1e62c <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1e628:	2305      	movs	r3, #5
   1e62a:	e055      	b.n	1e6d8 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1e62c:	68bb      	ldr	r3, [r7, #8]
   1e62e:	781b      	ldrb	r3, [r3, #0]
   1e630:	b2db      	uxtb	r3, r3
   1e632:	001a      	movs	r2, r3
   1e634:	2302      	movs	r3, #2
   1e636:	4013      	ands	r3, r2
   1e638:	d001      	beq.n	1e63e <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   1e63a:	231c      	movs	r3, #28
   1e63c:	e04c      	b.n	1e6d8 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   1e63e:	687b      	ldr	r3, [r7, #4]
   1e640:	785a      	ldrb	r2, [r3, #1]
   1e642:	68fb      	ldr	r3, [r7, #12]
   1e644:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1e646:	68fb      	ldr	r3, [r7, #12]
   1e648:	791b      	ldrb	r3, [r3, #4]
   1e64a:	2b00      	cmp	r3, #0
   1e64c:	d102      	bne.n	1e654 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   1e64e:	2001      	movs	r0, #1
   1e650:	4b24      	ldr	r3, [pc, #144]	; (1e6e4 <adc_init+0xe8>)
   1e652:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1e654:	2317      	movs	r3, #23
   1e656:	18fb      	adds	r3, r7, r3
   1e658:	2200      	movs	r2, #0
   1e65a:	701a      	strb	r2, [r3, #0]
   1e65c:	e00e      	b.n	1e67c <adc_init+0x80>
		module_inst->callback[i] = NULL;
   1e65e:	2317      	movs	r3, #23
   1e660:	18fb      	adds	r3, r7, r3
   1e662:	781a      	ldrb	r2, [r3, #0]
   1e664:	68fb      	ldr	r3, [r7, #12]
   1e666:	3202      	adds	r2, #2
   1e668:	0092      	lsls	r2, r2, #2
   1e66a:	2100      	movs	r1, #0
   1e66c:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1e66e:	2317      	movs	r3, #23
   1e670:	18fb      	adds	r3, r7, r3
   1e672:	781a      	ldrb	r2, [r3, #0]
   1e674:	2317      	movs	r3, #23
   1e676:	18fb      	adds	r3, r7, r3
   1e678:	3201      	adds	r2, #1
   1e67a:	701a      	strb	r2, [r3, #0]
   1e67c:	2317      	movs	r3, #23
   1e67e:	18fb      	adds	r3, r7, r3
   1e680:	781b      	ldrb	r3, [r3, #0]
   1e682:	2b02      	cmp	r3, #2
   1e684:	d9eb      	bls.n	1e65e <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   1e686:	68fb      	ldr	r3, [r7, #12]
   1e688:	2200      	movs	r2, #0
   1e68a:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   1e68c:	68fb      	ldr	r3, [r7, #12]
   1e68e:	2200      	movs	r2, #0
   1e690:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   1e692:	68fb      	ldr	r3, [r7, #12]
   1e694:	2200      	movs	r2, #0
   1e696:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   1e698:	68fb      	ldr	r3, [r7, #12]
   1e69a:	2200      	movs	r2, #0
   1e69c:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1e69e:	4b12      	ldr	r3, [pc, #72]	; (1e6e8 <adc_init+0xec>)
   1e6a0:	68fa      	ldr	r2, [r7, #12]
   1e6a2:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1e6a4:	687b      	ldr	r3, [r7, #4]
   1e6a6:	222a      	movs	r2, #42	; 0x2a
   1e6a8:	5c9b      	ldrb	r3, [r3, r2]
   1e6aa:	2b00      	cmp	r3, #0
   1e6ac:	d10a      	bne.n	1e6c4 <adc_init+0xc8>
			!config->freerunning) {
   1e6ae:	687b      	ldr	r3, [r7, #4]
   1e6b0:	7d1b      	ldrb	r3, [r3, #20]
   1e6b2:	2201      	movs	r2, #1
   1e6b4:	4053      	eors	r3, r2
   1e6b6:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1e6b8:	2b00      	cmp	r3, #0
   1e6ba:	d003      	beq.n	1e6c4 <adc_init+0xc8>
		module_inst->software_trigger = true;
   1e6bc:	68fb      	ldr	r3, [r7, #12]
   1e6be:	2201      	movs	r2, #1
   1e6c0:	775a      	strb	r2, [r3, #29]
   1e6c2:	e002      	b.n	1e6ca <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   1e6c4:	68fb      	ldr	r3, [r7, #12]
   1e6c6:	2200      	movs	r2, #0
   1e6c8:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   1e6ca:	687a      	ldr	r2, [r7, #4]
   1e6cc:	68fb      	ldr	r3, [r7, #12]
   1e6ce:	0011      	movs	r1, r2
   1e6d0:	0018      	movs	r0, r3
   1e6d2:	4b06      	ldr	r3, [pc, #24]	; (1e6ec <adc_init+0xf0>)
   1e6d4:	4798      	blx	r3
   1e6d6:	0003      	movs	r3, r0
}
   1e6d8:	0018      	movs	r0, r3
   1e6da:	46bd      	mov	sp, r7
   1e6dc:	b006      	add	sp, #24
   1e6de:	bd80      	pop	{r7, pc}
   1e6e0:	0001dec1 	.word	0x0001dec1
   1e6e4:	0001df45 	.word	0x0001df45
   1e6e8:	20000aac 	.word	0x20000aac
   1e6ec:	0001e0d1 	.word	0x0001e0d1

0001e6f0 <adc_is_syncing>:
{
   1e6f0:	b580      	push	{r7, lr}
   1e6f2:	b084      	sub	sp, #16
   1e6f4:	af00      	add	r7, sp, #0
   1e6f6:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1e6f8:	687b      	ldr	r3, [r7, #4]
   1e6fa:	681b      	ldr	r3, [r3, #0]
   1e6fc:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1e6fe:	68fb      	ldr	r3, [r7, #12]
   1e700:	7e5b      	ldrb	r3, [r3, #25]
   1e702:	b2db      	uxtb	r3, r3
   1e704:	b25b      	sxtb	r3, r3
   1e706:	2b00      	cmp	r3, #0
   1e708:	da01      	bge.n	1e70e <adc_is_syncing+0x1e>
		return true;
   1e70a:	2301      	movs	r3, #1
   1e70c:	e000      	b.n	1e710 <adc_is_syncing+0x20>
	return false;
   1e70e:	2300      	movs	r3, #0
}
   1e710:	0018      	movs	r0, r3
   1e712:	46bd      	mov	sp, r7
   1e714:	b004      	add	sp, #16
   1e716:	bd80      	pop	{r7, pc}

0001e718 <adc_start_conversion>:
{
   1e718:	b580      	push	{r7, lr}
   1e71a:	b084      	sub	sp, #16
   1e71c:	af00      	add	r7, sp, #0
   1e71e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1e720:	687b      	ldr	r3, [r7, #4]
   1e722:	681b      	ldr	r3, [r3, #0]
   1e724:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1e726:	46c0      	nop			; (mov r8, r8)
   1e728:	687b      	ldr	r3, [r7, #4]
   1e72a:	0018      	movs	r0, r3
   1e72c:	4b0b      	ldr	r3, [pc, #44]	; (1e75c <adc_start_conversion+0x44>)
   1e72e:	4798      	blx	r3
   1e730:	1e03      	subs	r3, r0, #0
   1e732:	d1f9      	bne.n	1e728 <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1e734:	68fb      	ldr	r3, [r7, #12]
   1e736:	7b1b      	ldrb	r3, [r3, #12]
   1e738:	b2db      	uxtb	r3, r3
   1e73a:	2202      	movs	r2, #2
   1e73c:	4313      	orrs	r3, r2
   1e73e:	b2da      	uxtb	r2, r3
   1e740:	68fb      	ldr	r3, [r7, #12]
   1e742:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   1e744:	46c0      	nop			; (mov r8, r8)
   1e746:	687b      	ldr	r3, [r7, #4]
   1e748:	0018      	movs	r0, r3
   1e74a:	4b04      	ldr	r3, [pc, #16]	; (1e75c <adc_start_conversion+0x44>)
   1e74c:	4798      	blx	r3
   1e74e:	1e03      	subs	r3, r0, #0
   1e750:	d1f9      	bne.n	1e746 <adc_start_conversion+0x2e>
}
   1e752:	46c0      	nop			; (mov r8, r8)
   1e754:	46bd      	mov	sp, r7
   1e756:	b004      	add	sp, #16
   1e758:	bd80      	pop	{r7, pc}
   1e75a:	46c0      	nop			; (mov r8, r8)
   1e75c:	0001e6f1 	.word	0x0001e6f1

0001e760 <adc_enable_interrupt>:
{
   1e760:	b580      	push	{r7, lr}
   1e762:	b084      	sub	sp, #16
   1e764:	af00      	add	r7, sp, #0
   1e766:	6078      	str	r0, [r7, #4]
   1e768:	000a      	movs	r2, r1
   1e76a:	1cfb      	adds	r3, r7, #3
   1e76c:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
   1e76e:	687b      	ldr	r3, [r7, #4]
   1e770:	681b      	ldr	r3, [r3, #0]
   1e772:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
   1e774:	68fb      	ldr	r3, [r7, #12]
   1e776:	1cfa      	adds	r2, r7, #3
   1e778:	7812      	ldrb	r2, [r2, #0]
   1e77a:	75da      	strb	r2, [r3, #23]
}
   1e77c:	46c0      	nop			; (mov r8, r8)
   1e77e:	46bd      	mov	sp, r7
   1e780:	b004      	add	sp, #16
   1e782:	bd80      	pop	{r7, pc}

0001e784 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   1e784:	b580      	push	{r7, lr}
   1e786:	b084      	sub	sp, #16
   1e788:	af00      	add	r7, sp, #0
   1e78a:	6078      	str	r0, [r7, #4]
   1e78c:	000a      	movs	r2, r1
   1e78e:	1cfb      	adds	r3, r7, #3
   1e790:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1e792:	687b      	ldr	r3, [r7, #4]
   1e794:	681b      	ldr	r3, [r3, #0]
   1e796:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   1e798:	68fb      	ldr	r3, [r7, #12]
   1e79a:	1cfa      	adds	r2, r7, #3
   1e79c:	7812      	ldrb	r2, [r2, #0]
   1e79e:	759a      	strb	r2, [r3, #22]
}
   1e7a0:	46c0      	nop			; (mov r8, r8)
   1e7a2:	46bd      	mov	sp, r7
   1e7a4:	b004      	add	sp, #16
   1e7a6:	bd80      	pop	{r7, pc}

0001e7a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   1e7a8:	b580      	push	{r7, lr}
   1e7aa:	b084      	sub	sp, #16
   1e7ac:	af00      	add	r7, sp, #0
   1e7ae:	0002      	movs	r2, r0
   1e7b0:	1dfb      	adds	r3, r7, #7
   1e7b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   1e7b4:	1dfb      	adds	r3, r7, #7
   1e7b6:	781a      	ldrb	r2, [r3, #0]
   1e7b8:	4b47      	ldr	r3, [pc, #284]	; (1e8d8 <_adc_interrupt_handler+0x130>)
   1e7ba:	0092      	lsls	r2, r2, #2
   1e7bc:	58d3      	ldr	r3, [r2, r3]
   1e7be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   1e7c0:	68fb      	ldr	r3, [r7, #12]
   1e7c2:	681b      	ldr	r3, [r3, #0]
   1e7c4:	7e1b      	ldrb	r3, [r3, #24]
   1e7c6:	b2da      	uxtb	r2, r3
   1e7c8:	68fb      	ldr	r3, [r7, #12]
   1e7ca:	681b      	ldr	r3, [r3, #0]
   1e7cc:	7ddb      	ldrb	r3, [r3, #23]
   1e7ce:	b2db      	uxtb	r3, r3
   1e7d0:	4013      	ands	r3, r2
   1e7d2:	b2db      	uxtb	r3, r3
   1e7d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   1e7d6:	68bb      	ldr	r3, [r7, #8]
   1e7d8:	2201      	movs	r2, #1
   1e7da:	4013      	ands	r3, r2
   1e7dc:	d045      	beq.n	1e86a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1e7de:	68fb      	ldr	r3, [r7, #12]
   1e7e0:	681b      	ldr	r3, [r3, #0]
   1e7e2:	2201      	movs	r2, #1
   1e7e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   1e7e6:	46c0      	nop			; (mov r8, r8)
   1e7e8:	68fb      	ldr	r3, [r7, #12]
   1e7ea:	0018      	movs	r0, r3
   1e7ec:	4b3b      	ldr	r3, [pc, #236]	; (1e8dc <_adc_interrupt_handler+0x134>)
   1e7ee:	4798      	blx	r3
   1e7f0:	1e03      	subs	r3, r0, #0
   1e7f2:	d1f9      	bne.n	1e7e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   1e7f4:	68fb      	ldr	r3, [r7, #12]
   1e7f6:	695b      	ldr	r3, [r3, #20]
   1e7f8:	1c99      	adds	r1, r3, #2
   1e7fa:	68fa      	ldr	r2, [r7, #12]
   1e7fc:	6151      	str	r1, [r2, #20]
   1e7fe:	68fa      	ldr	r2, [r7, #12]
   1e800:	6812      	ldr	r2, [r2, #0]
   1e802:	8b52      	ldrh	r2, [r2, #26]
   1e804:	b292      	uxth	r2, r2
   1e806:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   1e808:	68fb      	ldr	r3, [r7, #12]
   1e80a:	8b1b      	ldrh	r3, [r3, #24]
   1e80c:	b29b      	uxth	r3, r3
   1e80e:	3b01      	subs	r3, #1
   1e810:	b29b      	uxth	r3, r3
   1e812:	68fa      	ldr	r2, [r7, #12]
   1e814:	1c19      	adds	r1, r3, #0
   1e816:	8311      	strh	r1, [r2, #24]
   1e818:	2b00      	cmp	r3, #0
   1e81a:	d008      	beq.n	1e82e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1e81c:	68fb      	ldr	r3, [r7, #12]
   1e81e:	7f5b      	ldrb	r3, [r3, #29]
   1e820:	2b00      	cmp	r3, #0
   1e822:	d022      	beq.n	1e86a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   1e824:	68fb      	ldr	r3, [r7, #12]
   1e826:	0018      	movs	r0, r3
   1e828:	4b2d      	ldr	r3, [pc, #180]	; (1e8e0 <_adc_interrupt_handler+0x138>)
   1e82a:	4798      	blx	r3
   1e82c:	e01d      	b.n	1e86a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1e82e:	68fb      	ldr	r3, [r7, #12]
   1e830:	2101      	movs	r1, #1
   1e832:	0018      	movs	r0, r3
   1e834:	4b2b      	ldr	r3, [pc, #172]	; (1e8e4 <_adc_interrupt_handler+0x13c>)
   1e836:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   1e838:	68fb      	ldr	r3, [r7, #12]
   1e83a:	7f1b      	ldrb	r3, [r3, #28]
   1e83c:	b2db      	uxtb	r3, r3
   1e83e:	2b05      	cmp	r3, #5
   1e840:	d113      	bne.n	1e86a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   1e842:	68fb      	ldr	r3, [r7, #12]
   1e844:	2200      	movs	r2, #0
   1e846:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   1e848:	68fb      	ldr	r3, [r7, #12]
   1e84a:	7edb      	ldrb	r3, [r3, #27]
   1e84c:	001a      	movs	r2, r3
   1e84e:	2301      	movs	r3, #1
   1e850:	4013      	ands	r3, r2
   1e852:	d00a      	beq.n	1e86a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   1e854:	68fb      	ldr	r3, [r7, #12]
   1e856:	7e9b      	ldrb	r3, [r3, #26]
   1e858:	001a      	movs	r2, r3
   1e85a:	2301      	movs	r3, #1
   1e85c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1e85e:	d004      	beq.n	1e86a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   1e860:	68fb      	ldr	r3, [r7, #12]
   1e862:	689b      	ldr	r3, [r3, #8]
   1e864:	68fa      	ldr	r2, [r7, #12]
   1e866:	0010      	movs	r0, r2
   1e868:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1e86a:	68bb      	ldr	r3, [r7, #8]
   1e86c:	2204      	movs	r2, #4
   1e86e:	4013      	ands	r3, r2
   1e870:	d014      	beq.n	1e89c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1e872:	68fb      	ldr	r3, [r7, #12]
   1e874:	681b      	ldr	r3, [r3, #0]
   1e876:	2204      	movs	r2, #4
   1e878:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1e87a:	68fb      	ldr	r3, [r7, #12]
   1e87c:	7edb      	ldrb	r3, [r3, #27]
   1e87e:	001a      	movs	r2, r3
   1e880:	2302      	movs	r3, #2
   1e882:	4013      	ands	r3, r2
   1e884:	d00a      	beq.n	1e89c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   1e886:	68fb      	ldr	r3, [r7, #12]
   1e888:	7e9b      	ldrb	r3, [r3, #26]
   1e88a:	001a      	movs	r2, r3
   1e88c:	2302      	movs	r3, #2
   1e88e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1e890:	d004      	beq.n	1e89c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   1e892:	68fb      	ldr	r3, [r7, #12]
   1e894:	68db      	ldr	r3, [r3, #12]
   1e896:	68fa      	ldr	r2, [r7, #12]
   1e898:	0010      	movs	r0, r2
   1e89a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1e89c:	68bb      	ldr	r3, [r7, #8]
   1e89e:	2202      	movs	r2, #2
   1e8a0:	4013      	ands	r3, r2
   1e8a2:	d014      	beq.n	1e8ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1e8a4:	68fb      	ldr	r3, [r7, #12]
   1e8a6:	681b      	ldr	r3, [r3, #0]
   1e8a8:	2202      	movs	r2, #2
   1e8aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1e8ac:	68fb      	ldr	r3, [r7, #12]
   1e8ae:	7edb      	ldrb	r3, [r3, #27]
   1e8b0:	001a      	movs	r2, r3
   1e8b2:	2304      	movs	r3, #4
   1e8b4:	4013      	ands	r3, r2
   1e8b6:	d00a      	beq.n	1e8ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   1e8b8:	68fb      	ldr	r3, [r7, #12]
   1e8ba:	7e9b      	ldrb	r3, [r3, #26]
   1e8bc:	001a      	movs	r2, r3
   1e8be:	2304      	movs	r3, #4
   1e8c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1e8c2:	d004      	beq.n	1e8ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   1e8c4:	68fb      	ldr	r3, [r7, #12]
   1e8c6:	691b      	ldr	r3, [r3, #16]
   1e8c8:	68fa      	ldr	r2, [r7, #12]
   1e8ca:	0010      	movs	r0, r2
   1e8cc:	4798      	blx	r3
		}
	}
}
   1e8ce:	46c0      	nop			; (mov r8, r8)
   1e8d0:	46bd      	mov	sp, r7
   1e8d2:	b004      	add	sp, #16
   1e8d4:	bd80      	pop	{r7, pc}
   1e8d6:	46c0      	nop			; (mov r8, r8)
   1e8d8:	20000aac 	.word	0x20000aac
   1e8dc:	0001e6f1 	.word	0x0001e6f1
   1e8e0:	0001e719 	.word	0x0001e719
   1e8e4:	0001e785 	.word	0x0001e785

0001e8e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   1e8e8:	b580      	push	{r7, lr}
   1e8ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   1e8ec:	2000      	movs	r0, #0
   1e8ee:	4b02      	ldr	r3, [pc, #8]	; (1e8f8 <ADC_Handler+0x10>)
   1e8f0:	4798      	blx	r3
}
   1e8f2:	46c0      	nop			; (mov r8, r8)
   1e8f4:	46bd      	mov	sp, r7
   1e8f6:	bd80      	pop	{r7, pc}
   1e8f8:	0001e7a9 	.word	0x0001e7a9

0001e8fc <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
   1e8fc:	b580      	push	{r7, lr}
   1e8fe:	b084      	sub	sp, #16
   1e900:	af00      	add	r7, sp, #0
   1e902:	60f8      	str	r0, [r7, #12]
   1e904:	60b9      	str	r1, [r7, #8]
   1e906:	1dfb      	adds	r3, r7, #7
   1e908:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1e90a:	1dfb      	adds	r3, r7, #7
   1e90c:	781a      	ldrb	r2, [r3, #0]
   1e90e:	68fb      	ldr	r3, [r7, #12]
   1e910:	3202      	adds	r2, #2
   1e912:	0092      	lsls	r2, r2, #2
   1e914:	68b9      	ldr	r1, [r7, #8]
   1e916:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
   1e918:	68fb      	ldr	r3, [r7, #12]
   1e91a:	7e9b      	ldrb	r3, [r3, #26]
   1e91c:	b25a      	sxtb	r2, r3
   1e91e:	1dfb      	adds	r3, r7, #7
   1e920:	781b      	ldrb	r3, [r3, #0]
   1e922:	2101      	movs	r1, #1
   1e924:	4099      	lsls	r1, r3
   1e926:	000b      	movs	r3, r1
   1e928:	b25b      	sxtb	r3, r3
   1e92a:	4313      	orrs	r3, r2
   1e92c:	b25b      	sxtb	r3, r3
   1e92e:	b2da      	uxtb	r2, r3
   1e930:	68fb      	ldr	r3, [r7, #12]
   1e932:	769a      	strb	r2, [r3, #26]
}
   1e934:	46c0      	nop			; (mov r8, r8)
   1e936:	46bd      	mov	sp, r7
   1e938:	b004      	add	sp, #16
   1e93a:	bd80      	pop	{r7, pc}

0001e93c <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
   1e93c:	b580      	push	{r7, lr}
   1e93e:	b084      	sub	sp, #16
   1e940:	af00      	add	r7, sp, #0
   1e942:	60f8      	str	r0, [r7, #12]
   1e944:	60b9      	str	r1, [r7, #8]
   1e946:	1dbb      	adds	r3, r7, #6
   1e948:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
   1e94a:	68fb      	ldr	r3, [r7, #12]
   1e94c:	8b1b      	ldrh	r3, [r3, #24]
   1e94e:	b29b      	uxth	r3, r3
   1e950:	2b00      	cmp	r3, #0
   1e952:	d104      	bne.n	1e95e <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
   1e954:	68fb      	ldr	r3, [r7, #12]
   1e956:	7f1b      	ldrb	r3, [r3, #28]
   1e958:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
   1e95a:	2b05      	cmp	r3, #5
   1e95c:	d101      	bne.n	1e962 <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
   1e95e:	2305      	movs	r3, #5
   1e960:	e017      	b.n	1e992 <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
   1e962:	68fb      	ldr	r3, [r7, #12]
   1e964:	2205      	movs	r2, #5
   1e966:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
   1e968:	68fb      	ldr	r3, [r7, #12]
   1e96a:	1dba      	adds	r2, r7, #6
   1e96c:	8812      	ldrh	r2, [r2, #0]
   1e96e:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
   1e970:	68fb      	ldr	r3, [r7, #12]
   1e972:	68ba      	ldr	r2, [r7, #8]
   1e974:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
   1e976:	68fb      	ldr	r3, [r7, #12]
   1e978:	2101      	movs	r1, #1
   1e97a:	0018      	movs	r0, r3
   1e97c:	4b07      	ldr	r3, [pc, #28]	; (1e99c <adc_read_buffer_job+0x60>)
   1e97e:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
   1e980:	68fb      	ldr	r3, [r7, #12]
   1e982:	7f5b      	ldrb	r3, [r3, #29]
   1e984:	2b00      	cmp	r3, #0
   1e986:	d003      	beq.n	1e990 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
   1e988:	68fb      	ldr	r3, [r7, #12]
   1e98a:	0018      	movs	r0, r3
   1e98c:	4b04      	ldr	r3, [pc, #16]	; (1e9a0 <adc_read_buffer_job+0x64>)
   1e98e:	4798      	blx	r3
	}

	return STATUS_OK;
   1e990:	2300      	movs	r3, #0
}
   1e992:	0018      	movs	r0, r3
   1e994:	46bd      	mov	sp, r7
   1e996:	b004      	add	sp, #16
   1e998:	bd80      	pop	{r7, pc}
   1e99a:	46c0      	nop			; (mov r8, r8)
   1e99c:	0001e761 	.word	0x0001e761
   1e9a0:	0001e719 	.word	0x0001e719

0001e9a4 <system_interrupt_disable>:
{
   1e9a4:	b580      	push	{r7, lr}
   1e9a6:	b082      	sub	sp, #8
   1e9a8:	af00      	add	r7, sp, #0
   1e9aa:	0002      	movs	r2, r0
   1e9ac:	1dfb      	adds	r3, r7, #7
   1e9ae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e9b0:	4a07      	ldr	r2, [pc, #28]	; (1e9d0 <system_interrupt_disable+0x2c>)
   1e9b2:	1dfb      	adds	r3, r7, #7
   1e9b4:	781b      	ldrb	r3, [r3, #0]
   1e9b6:	0019      	movs	r1, r3
   1e9b8:	231f      	movs	r3, #31
   1e9ba:	400b      	ands	r3, r1
   1e9bc:	2101      	movs	r1, #1
   1e9be:	4099      	lsls	r1, r3
   1e9c0:	000b      	movs	r3, r1
   1e9c2:	0019      	movs	r1, r3
   1e9c4:	2380      	movs	r3, #128	; 0x80
   1e9c6:	50d1      	str	r1, [r2, r3]
}
   1e9c8:	46c0      	nop			; (mov r8, r8)
   1e9ca:	46bd      	mov	sp, r7
   1e9cc:	b002      	add	sp, #8
   1e9ce:	bd80      	pop	{r7, pc}
   1e9d0:	e000e100 	.word	0xe000e100

0001e9d4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1e9d4:	b580      	push	{r7, lr}
   1e9d6:	b084      	sub	sp, #16
   1e9d8:	af00      	add	r7, sp, #0
   1e9da:	0002      	movs	r2, r0
   1e9dc:	1dfb      	adds	r3, r7, #7
   1e9de:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   1e9e0:	1dfb      	adds	r3, r7, #7
   1e9e2:	781a      	ldrb	r2, [r3, #0]
   1e9e4:	4b37      	ldr	r3, [pc, #220]	; (1eac4 <_dac_interrupt_handler+0xf0>)
   1e9e6:	0092      	lsls	r2, r2, #2
   1e9e8:	58d3      	ldr	r3, [r2, r3]
   1e9ea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   1e9ec:	68fb      	ldr	r3, [r7, #12]
   1e9ee:	681b      	ldr	r3, [r3, #0]
   1e9f0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1e9f2:	68bb      	ldr	r3, [r7, #8]
   1e9f4:	799b      	ldrb	r3, [r3, #6]
   1e9f6:	b2db      	uxtb	r3, r3
   1e9f8:	001a      	movs	r2, r3
   1e9fa:	2301      	movs	r3, #1
   1e9fc:	4013      	ands	r3, r2
   1e9fe:	d00e      	beq.n	1ea1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1ea00:	68bb      	ldr	r3, [r7, #8]
   1ea02:	2201      	movs	r2, #1
   1ea04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1ea06:	68fb      	ldr	r3, [r7, #12]
   1ea08:	3314      	adds	r3, #20
   1ea0a:	2b00      	cmp	r3, #0
   1ea0c:	d007      	beq.n	1ea1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   1ea0e:	68fb      	ldr	r3, [r7, #12]
   1ea10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1ea12:	2b00      	cmp	r3, #0
   1ea14:	d003      	beq.n	1ea1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1ea16:	68fb      	ldr	r3, [r7, #12]
   1ea18:	699b      	ldr	r3, [r3, #24]
   1ea1a:	2000      	movs	r0, #0
   1ea1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1ea1e:	68bb      	ldr	r3, [r7, #8]
   1ea20:	799b      	ldrb	r3, [r3, #6]
   1ea22:	b2db      	uxtb	r3, r3
   1ea24:	001a      	movs	r2, r3
   1ea26:	2302      	movs	r3, #2
   1ea28:	4013      	ands	r3, r2
   1ea2a:	d047      	beq.n	1eabc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1ea2c:	68bb      	ldr	r3, [r7, #8]
   1ea2e:	2202      	movs	r2, #2
   1ea30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1ea32:	68fb      	ldr	r3, [r7, #12]
   1ea34:	899b      	ldrh	r3, [r3, #12]
   1ea36:	b29b      	uxth	r3, r3
   1ea38:	2b00      	cmp	r3, #0
   1ea3a:	d033      	beq.n	1eaa4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   1ea3c:	68fb      	ldr	r3, [r7, #12]
   1ea3e:	689a      	ldr	r2, [r3, #8]
   1ea40:	68fb      	ldr	r3, [r7, #12]
   1ea42:	89db      	ldrh	r3, [r3, #14]
   1ea44:	b29b      	uxth	r3, r3
   1ea46:	1c59      	adds	r1, r3, #1
   1ea48:	b288      	uxth	r0, r1
   1ea4a:	68f9      	ldr	r1, [r7, #12]
   1ea4c:	81c8      	strh	r0, [r1, #14]
   1ea4e:	005b      	lsls	r3, r3, #1
   1ea50:	18d3      	adds	r3, r2, r3
   1ea52:	881b      	ldrh	r3, [r3, #0]
   1ea54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   1ea56:	68bb      	ldr	r3, [r7, #8]
   1ea58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   1ea5a:	68fb      	ldr	r3, [r7, #12]
   1ea5c:	899b      	ldrh	r3, [r3, #12]
   1ea5e:	b29b      	uxth	r3, r3
   1ea60:	3b01      	subs	r3, #1
   1ea62:	b29a      	uxth	r2, r3
   1ea64:	68fb      	ldr	r3, [r7, #12]
   1ea66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   1ea68:	68fb      	ldr	r3, [r7, #12]
   1ea6a:	899b      	ldrh	r3, [r3, #12]
   1ea6c:	b29b      	uxth	r3, r3
   1ea6e:	2b00      	cmp	r3, #0
   1ea70:	d118      	bne.n	1eaa4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1ea72:	68fb      	ldr	r3, [r7, #12]
   1ea74:	2220      	movs	r2, #32
   1ea76:	2100      	movs	r1, #0
   1ea78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   1ea7a:	68bb      	ldr	r3, [r7, #8]
   1ea7c:	2202      	movs	r2, #2
   1ea7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1ea80:	68bb      	ldr	r3, [r7, #8]
   1ea82:	2202      	movs	r2, #2
   1ea84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   1ea86:	2019      	movs	r0, #25
   1ea88:	4b0f      	ldr	r3, [pc, #60]	; (1eac8 <_dac_interrupt_handler+0xf4>)
   1ea8a:	4798      	blx	r3

				if ((module->callback) &&
   1ea8c:	68fb      	ldr	r3, [r7, #12]
   1ea8e:	3314      	adds	r3, #20
   1ea90:	2b00      	cmp	r3, #0
   1ea92:	d007      	beq.n	1eaa4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   1ea94:	68fb      	ldr	r3, [r7, #12]
   1ea96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   1ea98:	2b00      	cmp	r3, #0
   1ea9a:	d003      	beq.n	1eaa4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1ea9c:	68fb      	ldr	r3, [r7, #12]
   1ea9e:	69db      	ldr	r3, [r3, #28]
   1eaa0:	2000      	movs	r0, #0
   1eaa2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1eaa4:	68fb      	ldr	r3, [r7, #12]
   1eaa6:	3314      	adds	r3, #20
   1eaa8:	2b00      	cmp	r3, #0
   1eaaa:	d007      	beq.n	1eabc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   1eaac:	68fb      	ldr	r3, [r7, #12]
   1eaae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1eab0:	2b00      	cmp	r3, #0
   1eab2:	d003      	beq.n	1eabc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1eab4:	68fb      	ldr	r3, [r7, #12]
   1eab6:	695b      	ldr	r3, [r3, #20]
   1eab8:	2000      	movs	r0, #0
   1eaba:	4798      	blx	r3
		}
	}
}
   1eabc:	46c0      	nop			; (mov r8, r8)
   1eabe:	46bd      	mov	sp, r7
   1eac0:	b004      	add	sp, #16
   1eac2:	bd80      	pop	{r7, pc}
   1eac4:	20000ab0 	.word	0x20000ab0
   1eac8:	0001e9a5 	.word	0x0001e9a5

0001eacc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1eacc:	b580      	push	{r7, lr}
   1eace:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1ead0:	2000      	movs	r0, #0
   1ead2:	4b02      	ldr	r3, [pc, #8]	; (1eadc <DAC_Handler+0x10>)
   1ead4:	4798      	blx	r3
}
   1ead6:	46c0      	nop			; (mov r8, r8)
   1ead8:	46bd      	mov	sp, r7
   1eada:	bd80      	pop	{r7, pc}
   1eadc:	0001e9d5 	.word	0x0001e9d5

0001eae0 <system_interrupt_enter_critical_section>:
{
   1eae0:	b580      	push	{r7, lr}
   1eae2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1eae4:	4b02      	ldr	r3, [pc, #8]	; (1eaf0 <system_interrupt_enter_critical_section+0x10>)
   1eae6:	4798      	blx	r3
}
   1eae8:	46c0      	nop			; (mov r8, r8)
   1eaea:	46bd      	mov	sp, r7
   1eaec:	bd80      	pop	{r7, pc}
   1eaee:	46c0      	nop			; (mov r8, r8)
   1eaf0:	0002453d 	.word	0x0002453d

0001eaf4 <system_interrupt_leave_critical_section>:
{
   1eaf4:	b580      	push	{r7, lr}
   1eaf6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1eaf8:	4b02      	ldr	r3, [pc, #8]	; (1eb04 <system_interrupt_leave_critical_section+0x10>)
   1eafa:	4798      	blx	r3
}
   1eafc:	46c0      	nop			; (mov r8, r8)
   1eafe:	46bd      	mov	sp, r7
   1eb00:	bd80      	pop	{r7, pc}
   1eb02:	46c0      	nop			; (mov r8, r8)
   1eb04:	00024591 	.word	0x00024591

0001eb08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   1eb08:	b580      	push	{r7, lr}
   1eb0a:	b086      	sub	sp, #24
   1eb0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   1eb0e:	4b49      	ldr	r3, [pc, #292]	; (1ec34 <DMAC_Handler+0x12c>)
   1eb10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1eb12:	4b49      	ldr	r3, [pc, #292]	; (1ec38 <DMAC_Handler+0x130>)
   1eb14:	8c1b      	ldrh	r3, [r3, #32]
   1eb16:	b29b      	uxth	r3, r3
   1eb18:	b2da      	uxtb	r2, r3
   1eb1a:	2317      	movs	r3, #23
   1eb1c:	18fb      	adds	r3, r7, r3
   1eb1e:	210f      	movs	r1, #15
   1eb20:	400a      	ands	r2, r1
   1eb22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1eb24:	2317      	movs	r3, #23
   1eb26:	18fb      	adds	r3, r7, r3
   1eb28:	781a      	ldrb	r2, [r3, #0]
   1eb2a:	4b44      	ldr	r3, [pc, #272]	; (1ec3c <DMAC_Handler+0x134>)
   1eb2c:	0092      	lsls	r2, r2, #2
   1eb2e:	58d3      	ldr	r3, [r2, r3]
   1eb30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1eb32:	4a41      	ldr	r2, [pc, #260]	; (1ec38 <DMAC_Handler+0x130>)
   1eb34:	693b      	ldr	r3, [r7, #16]
   1eb36:	781b      	ldrb	r3, [r3, #0]
   1eb38:	210f      	movs	r1, #15
   1eb3a:	400b      	ands	r3, r1
   1eb3c:	b2d9      	uxtb	r1, r3
   1eb3e:	233f      	movs	r3, #63	; 0x3f
   1eb40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1eb42:	493d      	ldr	r1, [pc, #244]	; (1ec38 <DMAC_Handler+0x130>)
   1eb44:	230f      	movs	r3, #15
   1eb46:	18fb      	adds	r3, r7, r3
   1eb48:	224e      	movs	r2, #78	; 0x4e
   1eb4a:	5c8a      	ldrb	r2, [r1, r2]
   1eb4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1eb4e:	693b      	ldr	r3, [r7, #16]
   1eb50:	781b      	ldrb	r3, [r3, #0]
   1eb52:	4a3b      	ldr	r2, [pc, #236]	; (1ec40 <DMAC_Handler+0x138>)
   1eb54:	011b      	lsls	r3, r3, #4
   1eb56:	18d3      	adds	r3, r2, r3
   1eb58:	3302      	adds	r3, #2
   1eb5a:	881b      	ldrh	r3, [r3, #0]
   1eb5c:	b29b      	uxth	r3, r3
   1eb5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1eb60:	693b      	ldr	r3, [r7, #16]
   1eb62:	781b      	ldrb	r3, [r3, #0]
   1eb64:	4a37      	ldr	r2, [pc, #220]	; (1ec44 <DMAC_Handler+0x13c>)
   1eb66:	011b      	lsls	r3, r3, #4
   1eb68:	18d3      	adds	r3, r2, r3
   1eb6a:	3302      	adds	r3, #2
   1eb6c:	881b      	ldrh	r3, [r3, #0]
   1eb6e:	b29b      	uxth	r3, r3
   1eb70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1eb72:	68ba      	ldr	r2, [r7, #8]
   1eb74:	687b      	ldr	r3, [r7, #4]
   1eb76:	1ad2      	subs	r2, r2, r3
   1eb78:	693b      	ldr	r3, [r7, #16]
   1eb7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1eb7c:	230f      	movs	r3, #15
   1eb7e:	18fb      	adds	r3, r7, r3
   1eb80:	781b      	ldrb	r3, [r3, #0]
   1eb82:	2201      	movs	r2, #1
   1eb84:	4013      	ands	r3, r2
   1eb86:	d016      	beq.n	1ebb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1eb88:	4a2b      	ldr	r2, [pc, #172]	; (1ec38 <DMAC_Handler+0x130>)
   1eb8a:	234e      	movs	r3, #78	; 0x4e
   1eb8c:	2101      	movs	r1, #1
   1eb8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1eb90:	693b      	ldr	r3, [r7, #16]
   1eb92:	2210      	movs	r2, #16
   1eb94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1eb96:	693b      	ldr	r3, [r7, #16]
   1eb98:	7c1b      	ldrb	r3, [r3, #16]
   1eb9a:	001a      	movs	r2, r3
   1eb9c:	2301      	movs	r3, #1
   1eb9e:	4013      	ands	r3, r2
   1eba0:	d042      	beq.n	1ec28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1eba2:	693b      	ldr	r3, [r7, #16]
   1eba4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1eba6:	2b00      	cmp	r3, #0
   1eba8:	d03e      	beq.n	1ec28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1ebaa:	693b      	ldr	r3, [r7, #16]
   1ebac:	685b      	ldr	r3, [r3, #4]
   1ebae:	693a      	ldr	r2, [r7, #16]
   1ebb0:	0010      	movs	r0, r2
   1ebb2:	4798      	blx	r3
   1ebb4:	e038      	b.n	1ec28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1ebb6:	230f      	movs	r3, #15
   1ebb8:	18fb      	adds	r3, r7, r3
   1ebba:	781b      	ldrb	r3, [r3, #0]
   1ebbc:	2202      	movs	r2, #2
   1ebbe:	4013      	ands	r3, r2
   1ebc0:	d016      	beq.n	1ebf0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1ebc2:	4a1d      	ldr	r2, [pc, #116]	; (1ec38 <DMAC_Handler+0x130>)
   1ebc4:	234e      	movs	r3, #78	; 0x4e
   1ebc6:	2102      	movs	r1, #2
   1ebc8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1ebca:	693b      	ldr	r3, [r7, #16]
   1ebcc:	2200      	movs	r2, #0
   1ebce:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1ebd0:	693b      	ldr	r3, [r7, #16]
   1ebd2:	7c1b      	ldrb	r3, [r3, #16]
   1ebd4:	001a      	movs	r2, r3
   1ebd6:	2302      	movs	r3, #2
   1ebd8:	4013      	ands	r3, r2
   1ebda:	d025      	beq.n	1ec28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1ebdc:	693b      	ldr	r3, [r7, #16]
   1ebde:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1ebe0:	2b00      	cmp	r3, #0
   1ebe2:	d021      	beq.n	1ec28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1ebe4:	693b      	ldr	r3, [r7, #16]
   1ebe6:	689b      	ldr	r3, [r3, #8]
   1ebe8:	693a      	ldr	r2, [r7, #16]
   1ebea:	0010      	movs	r0, r2
   1ebec:	4798      	blx	r3
   1ebee:	e01b      	b.n	1ec28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1ebf0:	230f      	movs	r3, #15
   1ebf2:	18fb      	adds	r3, r7, r3
   1ebf4:	781b      	ldrb	r3, [r3, #0]
   1ebf6:	2204      	movs	r2, #4
   1ebf8:	4013      	ands	r3, r2
   1ebfa:	d015      	beq.n	1ec28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   1ebfc:	4a0e      	ldr	r2, [pc, #56]	; (1ec38 <DMAC_Handler+0x130>)
   1ebfe:	234e      	movs	r3, #78	; 0x4e
   1ec00:	2104      	movs	r1, #4
   1ec02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1ec04:	693b      	ldr	r3, [r7, #16]
   1ec06:	2206      	movs	r2, #6
   1ec08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1ec0a:	693b      	ldr	r3, [r7, #16]
   1ec0c:	7c1b      	ldrb	r3, [r3, #16]
   1ec0e:	001a      	movs	r2, r3
   1ec10:	2304      	movs	r3, #4
   1ec12:	4013      	ands	r3, r2
   1ec14:	d008      	beq.n	1ec28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1ec16:	693b      	ldr	r3, [r7, #16]
   1ec18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1ec1a:	2b00      	cmp	r3, #0
   1ec1c:	d004      	beq.n	1ec28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1ec1e:	693b      	ldr	r3, [r7, #16]
   1ec20:	68db      	ldr	r3, [r3, #12]
   1ec22:	693a      	ldr	r2, [r7, #16]
   1ec24:	0010      	movs	r0, r2
   1ec26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   1ec28:	4b07      	ldr	r3, [pc, #28]	; (1ec48 <DMAC_Handler+0x140>)
   1ec2a:	4798      	blx	r3
}
   1ec2c:	46c0      	nop			; (mov r8, r8)
   1ec2e:	46bd      	mov	sp, r7
   1ec30:	b006      	add	sp, #24
   1ec32:	bd80      	pop	{r7, pc}
   1ec34:	0001eae1 	.word	0x0001eae1
   1ec38:	41004800 	.word	0x41004800
   1ec3c:	200004a0 	.word	0x200004a0
   1ec40:	20000ac0 	.word	0x20000ac0
   1ec44:	20000450 	.word	0x20000450
   1ec48:	0001eaf5 	.word	0x0001eaf5

0001ec4c <system_gclk_chan_get_config_defaults>:
{
   1ec4c:	b580      	push	{r7, lr}
   1ec4e:	b082      	sub	sp, #8
   1ec50:	af00      	add	r7, sp, #0
   1ec52:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1ec54:	687b      	ldr	r3, [r7, #4]
   1ec56:	2200      	movs	r2, #0
   1ec58:	701a      	strb	r2, [r3, #0]
}
   1ec5a:	46c0      	nop			; (mov r8, r8)
   1ec5c:	46bd      	mov	sp, r7
   1ec5e:	b002      	add	sp, #8
   1ec60:	bd80      	pop	{r7, pc}
	...

0001ec64 <system_apb_clock_set_mask>:
{
   1ec64:	b580      	push	{r7, lr}
   1ec66:	b082      	sub	sp, #8
   1ec68:	af00      	add	r7, sp, #0
   1ec6a:	0002      	movs	r2, r0
   1ec6c:	6039      	str	r1, [r7, #0]
   1ec6e:	1dfb      	adds	r3, r7, #7
   1ec70:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1ec72:	1dfb      	adds	r3, r7, #7
   1ec74:	781b      	ldrb	r3, [r3, #0]
   1ec76:	2b01      	cmp	r3, #1
   1ec78:	d00a      	beq.n	1ec90 <system_apb_clock_set_mask+0x2c>
   1ec7a:	2b02      	cmp	r3, #2
   1ec7c:	d00f      	beq.n	1ec9e <system_apb_clock_set_mask+0x3a>
   1ec7e:	2b00      	cmp	r3, #0
   1ec80:	d114      	bne.n	1ecac <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1ec82:	4b0e      	ldr	r3, [pc, #56]	; (1ecbc <system_apb_clock_set_mask+0x58>)
   1ec84:	4a0d      	ldr	r2, [pc, #52]	; (1ecbc <system_apb_clock_set_mask+0x58>)
   1ec86:	6991      	ldr	r1, [r2, #24]
   1ec88:	683a      	ldr	r2, [r7, #0]
   1ec8a:	430a      	orrs	r2, r1
   1ec8c:	619a      	str	r2, [r3, #24]
			break;
   1ec8e:	e00f      	b.n	1ecb0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1ec90:	4b0a      	ldr	r3, [pc, #40]	; (1ecbc <system_apb_clock_set_mask+0x58>)
   1ec92:	4a0a      	ldr	r2, [pc, #40]	; (1ecbc <system_apb_clock_set_mask+0x58>)
   1ec94:	69d1      	ldr	r1, [r2, #28]
   1ec96:	683a      	ldr	r2, [r7, #0]
   1ec98:	430a      	orrs	r2, r1
   1ec9a:	61da      	str	r2, [r3, #28]
			break;
   1ec9c:	e008      	b.n	1ecb0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1ec9e:	4b07      	ldr	r3, [pc, #28]	; (1ecbc <system_apb_clock_set_mask+0x58>)
   1eca0:	4a06      	ldr	r2, [pc, #24]	; (1ecbc <system_apb_clock_set_mask+0x58>)
   1eca2:	6a11      	ldr	r1, [r2, #32]
   1eca4:	683a      	ldr	r2, [r7, #0]
   1eca6:	430a      	orrs	r2, r1
   1eca8:	621a      	str	r2, [r3, #32]
			break;
   1ecaa:	e001      	b.n	1ecb0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1ecac:	2317      	movs	r3, #23
   1ecae:	e000      	b.n	1ecb2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1ecb0:	2300      	movs	r3, #0
}
   1ecb2:	0018      	movs	r0, r3
   1ecb4:	46bd      	mov	sp, r7
   1ecb6:	b002      	add	sp, #8
   1ecb8:	bd80      	pop	{r7, pc}
   1ecba:	46c0      	nop			; (mov r8, r8)
   1ecbc:	40000400 	.word	0x40000400

0001ecc0 <system_pinmux_get_config_defaults>:
{
   1ecc0:	b580      	push	{r7, lr}
   1ecc2:	b082      	sub	sp, #8
   1ecc4:	af00      	add	r7, sp, #0
   1ecc6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1ecc8:	687b      	ldr	r3, [r7, #4]
   1ecca:	2280      	movs	r2, #128	; 0x80
   1eccc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1ecce:	687b      	ldr	r3, [r7, #4]
   1ecd0:	2200      	movs	r2, #0
   1ecd2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1ecd4:	687b      	ldr	r3, [r7, #4]
   1ecd6:	2201      	movs	r2, #1
   1ecd8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1ecda:	687b      	ldr	r3, [r7, #4]
   1ecdc:	2200      	movs	r2, #0
   1ecde:	70da      	strb	r2, [r3, #3]
}
   1ece0:	46c0      	nop			; (mov r8, r8)
   1ece2:	46bd      	mov	sp, r7
   1ece4:	b002      	add	sp, #8
   1ece6:	bd80      	pop	{r7, pc}

0001ece8 <system_interrupt_enable>:
{
   1ece8:	b580      	push	{r7, lr}
   1ecea:	b082      	sub	sp, #8
   1ecec:	af00      	add	r7, sp, #0
   1ecee:	0002      	movs	r2, r0
   1ecf0:	1dfb      	adds	r3, r7, #7
   1ecf2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ecf4:	4b06      	ldr	r3, [pc, #24]	; (1ed10 <system_interrupt_enable+0x28>)
   1ecf6:	1dfa      	adds	r2, r7, #7
   1ecf8:	7812      	ldrb	r2, [r2, #0]
   1ecfa:	0011      	movs	r1, r2
   1ecfc:	221f      	movs	r2, #31
   1ecfe:	400a      	ands	r2, r1
   1ed00:	2101      	movs	r1, #1
   1ed02:	4091      	lsls	r1, r2
   1ed04:	000a      	movs	r2, r1
   1ed06:	601a      	str	r2, [r3, #0]
}
   1ed08:	46c0      	nop			; (mov r8, r8)
   1ed0a:	46bd      	mov	sp, r7
   1ed0c:	b002      	add	sp, #8
   1ed0e:	bd80      	pop	{r7, pc}
   1ed10:	e000e100 	.word	0xe000e100

0001ed14 <_extint_get_eic_from_channel>:
{
   1ed14:	b580      	push	{r7, lr}
   1ed16:	b084      	sub	sp, #16
   1ed18:	af00      	add	r7, sp, #0
   1ed1a:	0002      	movs	r2, r0
   1ed1c:	1dfb      	adds	r3, r7, #7
   1ed1e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1ed20:	230f      	movs	r3, #15
   1ed22:	18fb      	adds	r3, r7, r3
   1ed24:	1dfa      	adds	r2, r7, #7
   1ed26:	7812      	ldrb	r2, [r2, #0]
   1ed28:	0952      	lsrs	r2, r2, #5
   1ed2a:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   1ed2c:	230f      	movs	r3, #15
   1ed2e:	18fb      	adds	r3, r7, r3
   1ed30:	781b      	ldrb	r3, [r3, #0]
   1ed32:	2b00      	cmp	r3, #0
   1ed34:	d10c      	bne.n	1ed50 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1ed36:	4b09      	ldr	r3, [pc, #36]	; (1ed5c <_extint_get_eic_from_channel+0x48>)
   1ed38:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1ed3a:	230f      	movs	r3, #15
   1ed3c:	18fb      	adds	r3, r7, r3
   1ed3e:	781b      	ldrb	r3, [r3, #0]
   1ed40:	009b      	lsls	r3, r3, #2
   1ed42:	2210      	movs	r2, #16
   1ed44:	4694      	mov	ip, r2
   1ed46:	44bc      	add	ip, r7
   1ed48:	4463      	add	r3, ip
   1ed4a:	3b08      	subs	r3, #8
   1ed4c:	681b      	ldr	r3, [r3, #0]
   1ed4e:	e000      	b.n	1ed52 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   1ed50:	2300      	movs	r3, #0
}
   1ed52:	0018      	movs	r0, r3
   1ed54:	46bd      	mov	sp, r7
   1ed56:	b004      	add	sp, #16
   1ed58:	bd80      	pop	{r7, pc}
   1ed5a:	46c0      	nop			; (mov r8, r8)
   1ed5c:	40001800 	.word	0x40001800

0001ed60 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   1ed60:	b580      	push	{r7, lr}
   1ed62:	b082      	sub	sp, #8
   1ed64:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1ed66:	4b0f      	ldr	r3, [pc, #60]	; (1eda4 <extint_is_syncing+0x44>)
   1ed68:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1ed6a:	2300      	movs	r3, #0
   1ed6c:	607b      	str	r3, [r7, #4]
   1ed6e:	e011      	b.n	1ed94 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1ed70:	687b      	ldr	r3, [r7, #4]
   1ed72:	009b      	lsls	r3, r3, #2
   1ed74:	2208      	movs	r2, #8
   1ed76:	4694      	mov	ip, r2
   1ed78:	44bc      	add	ip, r7
   1ed7a:	4463      	add	r3, ip
   1ed7c:	3b08      	subs	r3, #8
   1ed7e:	681b      	ldr	r3, [r3, #0]
   1ed80:	785b      	ldrb	r3, [r3, #1]
   1ed82:	b2db      	uxtb	r3, r3
   1ed84:	b25b      	sxtb	r3, r3
   1ed86:	2b00      	cmp	r3, #0
   1ed88:	da01      	bge.n	1ed8e <extint_is_syncing+0x2e>
			return true;
   1ed8a:	2301      	movs	r3, #1
   1ed8c:	e006      	b.n	1ed9c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1ed8e:	687b      	ldr	r3, [r7, #4]
   1ed90:	3301      	adds	r3, #1
   1ed92:	607b      	str	r3, [r7, #4]
   1ed94:	687b      	ldr	r3, [r7, #4]
   1ed96:	2b00      	cmp	r3, #0
   1ed98:	d0ea      	beq.n	1ed70 <extint_is_syncing+0x10>
		}
	}
	return false;
   1ed9a:	2300      	movs	r3, #0
}
   1ed9c:	0018      	movs	r0, r3
   1ed9e:	46bd      	mov	sp, r7
   1eda0:	b002      	add	sp, #8
   1eda2:	bd80      	pop	{r7, pc}
   1eda4:	40001800 	.word	0x40001800

0001eda8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1eda8:	b580      	push	{r7, lr}
   1edaa:	b084      	sub	sp, #16
   1edac:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1edae:	4b2d      	ldr	r3, [pc, #180]	; (1ee64 <_system_extint_init+0xbc>)
   1edb0:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1edb2:	2140      	movs	r1, #64	; 0x40
   1edb4:	2000      	movs	r0, #0
   1edb6:	4b2c      	ldr	r3, [pc, #176]	; (1ee68 <_system_extint_init+0xc0>)
   1edb8:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1edba:	003b      	movs	r3, r7
   1edbc:	0018      	movs	r0, r3
   1edbe:	4b2b      	ldr	r3, [pc, #172]	; (1ee6c <_system_extint_init+0xc4>)
   1edc0:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1edc2:	003b      	movs	r3, r7
   1edc4:	2206      	movs	r2, #6
   1edc6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1edc8:	003b      	movs	r3, r7
   1edca:	0019      	movs	r1, r3
   1edcc:	2005      	movs	r0, #5
   1edce:	4b28      	ldr	r3, [pc, #160]	; (1ee70 <_system_extint_init+0xc8>)
   1edd0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1edd2:	2005      	movs	r0, #5
   1edd4:	4b27      	ldr	r3, [pc, #156]	; (1ee74 <_system_extint_init+0xcc>)
   1edd6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1edd8:	2300      	movs	r3, #0
   1edda:	60fb      	str	r3, [r7, #12]
   1eddc:	e018      	b.n	1ee10 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1edde:	68fb      	ldr	r3, [r7, #12]
   1ede0:	009b      	lsls	r3, r3, #2
   1ede2:	2210      	movs	r2, #16
   1ede4:	4694      	mov	ip, r2
   1ede6:	44bc      	add	ip, r7
   1ede8:	4463      	add	r3, ip
   1edea:	3b0c      	subs	r3, #12
   1edec:	681a      	ldr	r2, [r3, #0]
   1edee:	68fb      	ldr	r3, [r7, #12]
   1edf0:	009b      	lsls	r3, r3, #2
   1edf2:	2110      	movs	r1, #16
   1edf4:	468c      	mov	ip, r1
   1edf6:	44bc      	add	ip, r7
   1edf8:	4463      	add	r3, ip
   1edfa:	3b0c      	subs	r3, #12
   1edfc:	681b      	ldr	r3, [r3, #0]
   1edfe:	781b      	ldrb	r3, [r3, #0]
   1ee00:	b2db      	uxtb	r3, r3
   1ee02:	2101      	movs	r1, #1
   1ee04:	430b      	orrs	r3, r1
   1ee06:	b2db      	uxtb	r3, r3
   1ee08:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1ee0a:	68fb      	ldr	r3, [r7, #12]
   1ee0c:	3301      	adds	r3, #1
   1ee0e:	60fb      	str	r3, [r7, #12]
   1ee10:	68fb      	ldr	r3, [r7, #12]
   1ee12:	2b00      	cmp	r3, #0
   1ee14:	d0e3      	beq.n	1edde <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1ee16:	46c0      	nop			; (mov r8, r8)
   1ee18:	4b17      	ldr	r3, [pc, #92]	; (1ee78 <_system_extint_init+0xd0>)
   1ee1a:	4798      	blx	r3
   1ee1c:	1e03      	subs	r3, r0, #0
   1ee1e:	d1fb      	bne.n	1ee18 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1ee20:	230b      	movs	r3, #11
   1ee22:	18fb      	adds	r3, r7, r3
   1ee24:	2200      	movs	r2, #0
   1ee26:	701a      	strb	r2, [r3, #0]
   1ee28:	e00d      	b.n	1ee46 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   1ee2a:	230b      	movs	r3, #11
   1ee2c:	18fb      	adds	r3, r7, r3
   1ee2e:	781a      	ldrb	r2, [r3, #0]
   1ee30:	4b12      	ldr	r3, [pc, #72]	; (1ee7c <_system_extint_init+0xd4>)
   1ee32:	0092      	lsls	r2, r2, #2
   1ee34:	2100      	movs	r1, #0
   1ee36:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1ee38:	230b      	movs	r3, #11
   1ee3a:	18fb      	adds	r3, r7, r3
   1ee3c:	781a      	ldrb	r2, [r3, #0]
   1ee3e:	230b      	movs	r3, #11
   1ee40:	18fb      	adds	r3, r7, r3
   1ee42:	3201      	adds	r2, #1
   1ee44:	701a      	strb	r2, [r3, #0]
   1ee46:	230b      	movs	r3, #11
   1ee48:	18fb      	adds	r3, r7, r3
   1ee4a:	781b      	ldrb	r3, [r3, #0]
   1ee4c:	2b0f      	cmp	r3, #15
   1ee4e:	d9ec      	bls.n	1ee2a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   1ee50:	2004      	movs	r0, #4
   1ee52:	4b0b      	ldr	r3, [pc, #44]	; (1ee80 <_system_extint_init+0xd8>)
   1ee54:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1ee56:	4b0b      	ldr	r3, [pc, #44]	; (1ee84 <_system_extint_init+0xdc>)
   1ee58:	4798      	blx	r3
}
   1ee5a:	46c0      	nop			; (mov r8, r8)
   1ee5c:	46bd      	mov	sp, r7
   1ee5e:	b004      	add	sp, #16
   1ee60:	bd80      	pop	{r7, pc}
   1ee62:	46c0      	nop			; (mov r8, r8)
   1ee64:	40001800 	.word	0x40001800
   1ee68:	0001ec65 	.word	0x0001ec65
   1ee6c:	0001ec4d 	.word	0x0001ec4d
   1ee70:	000252f5 	.word	0x000252f5
   1ee74:	00025339 	.word	0x00025339
   1ee78:	0001ed61 	.word	0x0001ed61
   1ee7c:	20000b10 	.word	0x20000b10
   1ee80:	0001ece9 	.word	0x0001ece9
   1ee84:	0001ee89 	.word	0x0001ee89

0001ee88 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   1ee88:	b580      	push	{r7, lr}
   1ee8a:	b082      	sub	sp, #8
   1ee8c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1ee8e:	4b15      	ldr	r3, [pc, #84]	; (1eee4 <_extint_enable+0x5c>)
   1ee90:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1ee92:	2300      	movs	r3, #0
   1ee94:	607b      	str	r3, [r7, #4]
   1ee96:	e018      	b.n	1eeca <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1ee98:	687b      	ldr	r3, [r7, #4]
   1ee9a:	009b      	lsls	r3, r3, #2
   1ee9c:	2208      	movs	r2, #8
   1ee9e:	4694      	mov	ip, r2
   1eea0:	44bc      	add	ip, r7
   1eea2:	4463      	add	r3, ip
   1eea4:	3b08      	subs	r3, #8
   1eea6:	681a      	ldr	r2, [r3, #0]
   1eea8:	687b      	ldr	r3, [r7, #4]
   1eeaa:	009b      	lsls	r3, r3, #2
   1eeac:	2108      	movs	r1, #8
   1eeae:	468c      	mov	ip, r1
   1eeb0:	44bc      	add	ip, r7
   1eeb2:	4463      	add	r3, ip
   1eeb4:	3b08      	subs	r3, #8
   1eeb6:	681b      	ldr	r3, [r3, #0]
   1eeb8:	781b      	ldrb	r3, [r3, #0]
   1eeba:	b2db      	uxtb	r3, r3
   1eebc:	2102      	movs	r1, #2
   1eebe:	430b      	orrs	r3, r1
   1eec0:	b2db      	uxtb	r3, r3
   1eec2:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1eec4:	687b      	ldr	r3, [r7, #4]
   1eec6:	3301      	adds	r3, #1
   1eec8:	607b      	str	r3, [r7, #4]
   1eeca:	687b      	ldr	r3, [r7, #4]
   1eecc:	2b00      	cmp	r3, #0
   1eece:	d0e3      	beq.n	1ee98 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   1eed0:	46c0      	nop			; (mov r8, r8)
   1eed2:	4b05      	ldr	r3, [pc, #20]	; (1eee8 <_extint_enable+0x60>)
   1eed4:	4798      	blx	r3
   1eed6:	1e03      	subs	r3, r0, #0
   1eed8:	d1fb      	bne.n	1eed2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1eeda:	46c0      	nop			; (mov r8, r8)
   1eedc:	46bd      	mov	sp, r7
   1eede:	b002      	add	sp, #8
   1eee0:	bd80      	pop	{r7, pc}
   1eee2:	46c0      	nop			; (mov r8, r8)
   1eee4:	40001800 	.word	0x40001800
   1eee8:	0001ed61 	.word	0x0001ed61

0001eeec <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   1eeec:	b580      	push	{r7, lr}
   1eeee:	b082      	sub	sp, #8
   1eef0:	af00      	add	r7, sp, #0
   1eef2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1eef4:	687b      	ldr	r3, [r7, #4]
   1eef6:	2200      	movs	r2, #0
   1eef8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   1eefa:	687b      	ldr	r3, [r7, #4]
   1eefc:	2200      	movs	r2, #0
   1eefe:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1ef00:	687b      	ldr	r3, [r7, #4]
   1ef02:	2201      	movs	r2, #1
   1ef04:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1ef06:	687b      	ldr	r3, [r7, #4]
   1ef08:	2201      	movs	r2, #1
   1ef0a:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   1ef0c:	687b      	ldr	r3, [r7, #4]
   1ef0e:	2200      	movs	r2, #0
   1ef10:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1ef12:	687b      	ldr	r3, [r7, #4]
   1ef14:	2202      	movs	r2, #2
   1ef16:	72da      	strb	r2, [r3, #11]
}
   1ef18:	46c0      	nop			; (mov r8, r8)
   1ef1a:	46bd      	mov	sp, r7
   1ef1c:	b002      	add	sp, #8
   1ef1e:	bd80      	pop	{r7, pc}

0001ef20 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1ef20:	b580      	push	{r7, lr}
   1ef22:	b086      	sub	sp, #24
   1ef24:	af00      	add	r7, sp, #0
   1ef26:	0002      	movs	r2, r0
   1ef28:	6039      	str	r1, [r7, #0]
   1ef2a:	1dfb      	adds	r3, r7, #7
   1ef2c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1ef2e:	2308      	movs	r3, #8
   1ef30:	18fb      	adds	r3, r7, r3
   1ef32:	0018      	movs	r0, r3
   1ef34:	4b36      	ldr	r3, [pc, #216]	; (1f010 <extint_chan_set_config+0xf0>)
   1ef36:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   1ef38:	683b      	ldr	r3, [r7, #0]
   1ef3a:	685b      	ldr	r3, [r3, #4]
   1ef3c:	b2da      	uxtb	r2, r3
   1ef3e:	2308      	movs	r3, #8
   1ef40:	18fb      	adds	r3, r7, r3
   1ef42:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1ef44:	2308      	movs	r3, #8
   1ef46:	18fb      	adds	r3, r7, r3
   1ef48:	2200      	movs	r2, #0
   1ef4a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1ef4c:	683b      	ldr	r3, [r7, #0]
   1ef4e:	7a1a      	ldrb	r2, [r3, #8]
   1ef50:	2308      	movs	r3, #8
   1ef52:	18fb      	adds	r3, r7, r3
   1ef54:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1ef56:	683b      	ldr	r3, [r7, #0]
   1ef58:	681b      	ldr	r3, [r3, #0]
   1ef5a:	b2db      	uxtb	r3, r3
   1ef5c:	2208      	movs	r2, #8
   1ef5e:	18ba      	adds	r2, r7, r2
   1ef60:	0011      	movs	r1, r2
   1ef62:	0018      	movs	r0, r3
   1ef64:	4b2b      	ldr	r3, [pc, #172]	; (1f014 <extint_chan_set_config+0xf4>)
   1ef66:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   1ef68:	1dfb      	adds	r3, r7, #7
   1ef6a:	781b      	ldrb	r3, [r3, #0]
   1ef6c:	0018      	movs	r0, r3
   1ef6e:	4b2a      	ldr	r3, [pc, #168]	; (1f018 <extint_chan_set_config+0xf8>)
   1ef70:	4798      	blx	r3
   1ef72:	0003      	movs	r3, r0
   1ef74:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1ef76:	1dfb      	adds	r3, r7, #7
   1ef78:	781b      	ldrb	r3, [r3, #0]
   1ef7a:	2207      	movs	r2, #7
   1ef7c:	4013      	ands	r3, r2
   1ef7e:	009b      	lsls	r3, r3, #2
   1ef80:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1ef82:	683b      	ldr	r3, [r7, #0]
   1ef84:	7adb      	ldrb	r3, [r3, #11]
   1ef86:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1ef88:	683b      	ldr	r3, [r7, #0]
   1ef8a:	7a9b      	ldrb	r3, [r3, #10]
   1ef8c:	2b00      	cmp	r3, #0
   1ef8e:	d003      	beq.n	1ef98 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   1ef90:	697b      	ldr	r3, [r7, #20]
   1ef92:	2208      	movs	r2, #8
   1ef94:	4313      	orrs	r3, r2
   1ef96:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   1ef98:	1dfb      	adds	r3, r7, #7
   1ef9a:	781b      	ldrb	r3, [r3, #0]
   1ef9c:	08db      	lsrs	r3, r3, #3
   1ef9e:	b2db      	uxtb	r3, r3
   1efa0:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1efa2:	1dfb      	adds	r3, r7, #7
   1efa4:	781b      	ldrb	r3, [r3, #0]
   1efa6:	08db      	lsrs	r3, r3, #3
   1efa8:	b2db      	uxtb	r3, r3
   1efaa:	001a      	movs	r2, r3
   1efac:	693b      	ldr	r3, [r7, #16]
   1efae:	3206      	adds	r2, #6
   1efb0:	0092      	lsls	r2, r2, #2
   1efb2:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1efb4:	210f      	movs	r1, #15
   1efb6:	68fa      	ldr	r2, [r7, #12]
   1efb8:	4091      	lsls	r1, r2
   1efba:	000a      	movs	r2, r1
   1efbc:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1efbe:	401a      	ands	r2, r3
			(new_config << config_pos);
   1efc0:	6979      	ldr	r1, [r7, #20]
   1efc2:	68fb      	ldr	r3, [r7, #12]
   1efc4:	4099      	lsls	r1, r3
   1efc6:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1efc8:	431a      	orrs	r2, r3
   1efca:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1efcc:	693b      	ldr	r3, [r7, #16]
   1efce:	1d82      	adds	r2, r0, #6
   1efd0:	0092      	lsls	r2, r2, #2
   1efd2:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1efd4:	683b      	ldr	r3, [r7, #0]
   1efd6:	7a5b      	ldrb	r3, [r3, #9]
   1efd8:	2b00      	cmp	r3, #0
   1efda:	d00a      	beq.n	1eff2 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1efdc:	693b      	ldr	r3, [r7, #16]
   1efde:	695a      	ldr	r2, [r3, #20]
   1efe0:	1dfb      	adds	r3, r7, #7
   1efe2:	781b      	ldrb	r3, [r3, #0]
   1efe4:	2101      	movs	r1, #1
   1efe6:	4099      	lsls	r1, r3
   1efe8:	000b      	movs	r3, r1
   1efea:	431a      	orrs	r2, r3
   1efec:	693b      	ldr	r3, [r7, #16]
   1efee:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   1eff0:	e00a      	b.n	1f008 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1eff2:	693b      	ldr	r3, [r7, #16]
   1eff4:	695b      	ldr	r3, [r3, #20]
   1eff6:	1dfa      	adds	r2, r7, #7
   1eff8:	7812      	ldrb	r2, [r2, #0]
   1effa:	2101      	movs	r1, #1
   1effc:	4091      	lsls	r1, r2
   1effe:	000a      	movs	r2, r1
   1f000:	43d2      	mvns	r2, r2
   1f002:	401a      	ands	r2, r3
   1f004:	693b      	ldr	r3, [r7, #16]
   1f006:	615a      	str	r2, [r3, #20]
}
   1f008:	46c0      	nop			; (mov r8, r8)
   1f00a:	46bd      	mov	sp, r7
   1f00c:	b006      	add	sp, #24
   1f00e:	bd80      	pop	{r7, pc}
   1f010:	0001ecc1 	.word	0x0001ecc1
   1f014:	000255e1 	.word	0x000255e1
   1f018:	0001ed15 	.word	0x0001ed15

0001f01c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1f01c:	b580      	push	{r7, lr}
   1f01e:	b086      	sub	sp, #24
   1f020:	af00      	add	r7, sp, #0
   1f022:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1f024:	4b31      	ldr	r3, [pc, #196]	; (1f0ec <_rtc_interrupt_handler+0xd0>)
   1f026:	687a      	ldr	r2, [r7, #4]
   1f028:	0092      	lsls	r2, r2, #2
   1f02a:	58d3      	ldr	r3, [r2, r3]
   1f02c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1f02e:	697b      	ldr	r3, [r7, #20]
   1f030:	681b      	ldr	r3, [r3, #0]
   1f032:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1f034:	230e      	movs	r3, #14
   1f036:	18fb      	adds	r3, r7, r3
   1f038:	697a      	ldr	r2, [r7, #20]
   1f03a:	8ad2      	ldrh	r2, [r2, #22]
   1f03c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1f03e:	697b      	ldr	r3, [r7, #20]
   1f040:	8a9b      	ldrh	r3, [r3, #20]
   1f042:	b29a      	uxth	r2, r3
   1f044:	230e      	movs	r3, #14
   1f046:	18fb      	adds	r3, r7, r3
   1f048:	210e      	movs	r1, #14
   1f04a:	1879      	adds	r1, r7, r1
   1f04c:	8809      	ldrh	r1, [r1, #0]
   1f04e:	400a      	ands	r2, r1
   1f050:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
   1f052:	693b      	ldr	r3, [r7, #16]
   1f054:	7a1b      	ldrb	r3, [r3, #8]
   1f056:	b2da      	uxtb	r2, r3
   1f058:	230c      	movs	r3, #12
   1f05a:	18fb      	adds	r3, r7, r3
   1f05c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
   1f05e:	693b      	ldr	r3, [r7, #16]
   1f060:	79db      	ldrb	r3, [r3, #7]
   1f062:	b2db      	uxtb	r3, r3
   1f064:	b29a      	uxth	r2, r3
   1f066:	230c      	movs	r3, #12
   1f068:	18fb      	adds	r3, r7, r3
   1f06a:	210c      	movs	r1, #12
   1f06c:	1879      	adds	r1, r7, r1
   1f06e:	8809      	ldrh	r1, [r1, #0]
   1f070:	400a      	ands	r2, r1
   1f072:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
   1f074:	230c      	movs	r3, #12
   1f076:	18fb      	adds	r3, r7, r3
   1f078:	881b      	ldrh	r3, [r3, #0]
   1f07a:	2280      	movs	r2, #128	; 0x80
   1f07c:	4013      	ands	r3, r2
   1f07e:	d00c      	beq.n	1f09a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
   1f080:	230e      	movs	r3, #14
   1f082:	18fb      	adds	r3, r7, r3
   1f084:	881b      	ldrh	r3, [r3, #0]
   1f086:	2204      	movs	r2, #4
   1f088:	4013      	ands	r3, r2
   1f08a:	d002      	beq.n	1f092 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
   1f08c:	697b      	ldr	r3, [r7, #20]
   1f08e:	691b      	ldr	r3, [r3, #16]
   1f090:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
   1f092:	693b      	ldr	r3, [r7, #16]
   1f094:	2280      	movs	r2, #128	; 0x80
   1f096:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
   1f098:	e024      	b.n	1f0e4 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
   1f09a:	230c      	movs	r3, #12
   1f09c:	18fb      	adds	r3, r7, r3
   1f09e:	881b      	ldrh	r3, [r3, #0]
   1f0a0:	2201      	movs	r2, #1
   1f0a2:	4013      	ands	r3, r2
   1f0a4:	d00c      	beq.n	1f0c0 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
   1f0a6:	230e      	movs	r3, #14
   1f0a8:	18fb      	adds	r3, r7, r3
   1f0aa:	881b      	ldrh	r3, [r3, #0]
   1f0ac:	2201      	movs	r2, #1
   1f0ae:	4013      	ands	r3, r2
   1f0b0:	d002      	beq.n	1f0b8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
   1f0b2:	697b      	ldr	r3, [r7, #20]
   1f0b4:	689b      	ldr	r3, [r3, #8]
   1f0b6:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
   1f0b8:	693b      	ldr	r3, [r7, #16]
   1f0ba:	2201      	movs	r2, #1
   1f0bc:	721a      	strb	r2, [r3, #8]
}
   1f0be:	e011      	b.n	1f0e4 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
   1f0c0:	230c      	movs	r3, #12
   1f0c2:	18fb      	adds	r3, r7, r3
   1f0c4:	881b      	ldrh	r3, [r3, #0]
   1f0c6:	2202      	movs	r2, #2
   1f0c8:	4013      	ands	r3, r2
   1f0ca:	d00b      	beq.n	1f0e4 <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
   1f0cc:	230e      	movs	r3, #14
   1f0ce:	18fb      	adds	r3, r7, r3
   1f0d0:	881b      	ldrh	r3, [r3, #0]
   1f0d2:	2202      	movs	r2, #2
   1f0d4:	4013      	ands	r3, r2
   1f0d6:	d002      	beq.n	1f0de <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
   1f0d8:	697b      	ldr	r3, [r7, #20]
   1f0da:	68db      	ldr	r3, [r3, #12]
   1f0dc:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
   1f0de:	693b      	ldr	r3, [r7, #16]
   1f0e0:	2202      	movs	r2, #2
   1f0e2:	721a      	strb	r2, [r3, #8]
}
   1f0e4:	46c0      	nop			; (mov r8, r8)
   1f0e6:	46bd      	mov	sp, r7
   1f0e8:	b006      	add	sp, #24
   1f0ea:	bd80      	pop	{r7, pc}
   1f0ec:	20000b50 	.word	0x20000b50

0001f0f0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1f0f0:	b580      	push	{r7, lr}
   1f0f2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   1f0f4:	2000      	movs	r0, #0
   1f0f6:	4b02      	ldr	r3, [pc, #8]	; (1f100 <RTC_Handler+0x10>)
   1f0f8:	4798      	blx	r3
}
   1f0fa:	46c0      	nop			; (mov r8, r8)
   1f0fc:	46bd      	mov	sp, r7
   1f0fe:	bd80      	pop	{r7, pc}
   1f100:	0001f01d 	.word	0x0001f01d

0001f104 <system_gclk_chan_get_config_defaults>:
{
   1f104:	b580      	push	{r7, lr}
   1f106:	b082      	sub	sp, #8
   1f108:	af00      	add	r7, sp, #0
   1f10a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1f10c:	687b      	ldr	r3, [r7, #4]
   1f10e:	2200      	movs	r2, #0
   1f110:	701a      	strb	r2, [r3, #0]
}
   1f112:	46c0      	nop			; (mov r8, r8)
   1f114:	46bd      	mov	sp, r7
   1f116:	b002      	add	sp, #8
   1f118:	bd80      	pop	{r7, pc}

0001f11a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1f11a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f11c:	b08d      	sub	sp, #52	; 0x34
   1f11e:	af00      	add	r7, sp, #0
   1f120:	60b8      	str	r0, [r7, #8]
   1f122:	60f9      	str	r1, [r7, #12]
   1f124:	603a      	str	r2, [r7, #0]
   1f126:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1f128:	2300      	movs	r3, #0
   1f12a:	2400      	movs	r4, #0
   1f12c:	623b      	str	r3, [r7, #32]
   1f12e:	627c      	str	r4, [r7, #36]	; 0x24
   1f130:	2300      	movs	r3, #0
   1f132:	2400      	movs	r4, #0
   1f134:	61bb      	str	r3, [r7, #24]
   1f136:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1f138:	233f      	movs	r3, #63	; 0x3f
   1f13a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f13c:	e053      	b.n	1f1e6 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1f13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f140:	3b20      	subs	r3, #32
   1f142:	2b00      	cmp	r3, #0
   1f144:	db04      	blt.n	1f150 <long_division+0x36>
   1f146:	2201      	movs	r2, #1
   1f148:	409a      	lsls	r2, r3
   1f14a:	0013      	movs	r3, r2
   1f14c:	617b      	str	r3, [r7, #20]
   1f14e:	e00b      	b.n	1f168 <long_division+0x4e>
   1f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f152:	2220      	movs	r2, #32
   1f154:	1ad3      	subs	r3, r2, r3
   1f156:	2201      	movs	r2, #1
   1f158:	40da      	lsrs	r2, r3
   1f15a:	0013      	movs	r3, r2
   1f15c:	2100      	movs	r1, #0
   1f15e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1f160:	4091      	lsls	r1, r2
   1f162:	000a      	movs	r2, r1
   1f164:	4313      	orrs	r3, r2
   1f166:	617b      	str	r3, [r7, #20]
   1f168:	2201      	movs	r2, #1
   1f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f16c:	409a      	lsls	r2, r3
   1f16e:	0013      	movs	r3, r2
   1f170:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1f172:	69bb      	ldr	r3, [r7, #24]
   1f174:	69fc      	ldr	r4, [r7, #28]
   1f176:	18db      	adds	r3, r3, r3
   1f178:	4164      	adcs	r4, r4
   1f17a:	61bb      	str	r3, [r7, #24]
   1f17c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1f17e:	68bb      	ldr	r3, [r7, #8]
   1f180:	693a      	ldr	r2, [r7, #16]
   1f182:	401a      	ands	r2, r3
   1f184:	0015      	movs	r5, r2
   1f186:	68fb      	ldr	r3, [r7, #12]
   1f188:	697a      	ldr	r2, [r7, #20]
   1f18a:	401a      	ands	r2, r3
   1f18c:	0016      	movs	r6, r2
   1f18e:	002b      	movs	r3, r5
   1f190:	4333      	orrs	r3, r6
   1f192:	d007      	beq.n	1f1a4 <long_division+0x8a>
			r |= 0x01;
   1f194:	69bb      	ldr	r3, [r7, #24]
   1f196:	2201      	movs	r2, #1
   1f198:	4313      	orrs	r3, r2
   1f19a:	61bb      	str	r3, [r7, #24]
   1f19c:	69fb      	ldr	r3, [r7, #28]
   1f19e:	2200      	movs	r2, #0
   1f1a0:	4313      	orrs	r3, r2
   1f1a2:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1f1a4:	687a      	ldr	r2, [r7, #4]
   1f1a6:	69fb      	ldr	r3, [r7, #28]
   1f1a8:	429a      	cmp	r2, r3
   1f1aa:	d819      	bhi.n	1f1e0 <long_division+0xc6>
   1f1ac:	687a      	ldr	r2, [r7, #4]
   1f1ae:	69fb      	ldr	r3, [r7, #28]
   1f1b0:	429a      	cmp	r2, r3
   1f1b2:	d103      	bne.n	1f1bc <long_division+0xa2>
   1f1b4:	683a      	ldr	r2, [r7, #0]
   1f1b6:	69bb      	ldr	r3, [r7, #24]
   1f1b8:	429a      	cmp	r2, r3
   1f1ba:	d811      	bhi.n	1f1e0 <long_division+0xc6>
			r = r - d;
   1f1bc:	69b9      	ldr	r1, [r7, #24]
   1f1be:	69fa      	ldr	r2, [r7, #28]
   1f1c0:	683b      	ldr	r3, [r7, #0]
   1f1c2:	687c      	ldr	r4, [r7, #4]
   1f1c4:	1ac9      	subs	r1, r1, r3
   1f1c6:	41a2      	sbcs	r2, r4
   1f1c8:	000b      	movs	r3, r1
   1f1ca:	0014      	movs	r4, r2
   1f1cc:	61bb      	str	r3, [r7, #24]
   1f1ce:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1f1d0:	6a3a      	ldr	r2, [r7, #32]
   1f1d2:	693b      	ldr	r3, [r7, #16]
   1f1d4:	4313      	orrs	r3, r2
   1f1d6:	623b      	str	r3, [r7, #32]
   1f1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f1da:	697b      	ldr	r3, [r7, #20]
   1f1dc:	4313      	orrs	r3, r2
   1f1de:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1f1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f1e2:	3b01      	subs	r3, #1
   1f1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f1e8:	2b00      	cmp	r3, #0
   1f1ea:	daa8      	bge.n	1f13e <long_division+0x24>
		}
	}

	return q;
   1f1ec:	6a3b      	ldr	r3, [r7, #32]
   1f1ee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1f1f0:	0018      	movs	r0, r3
   1f1f2:	0021      	movs	r1, r4
   1f1f4:	46bd      	mov	sp, r7
   1f1f6:	b00d      	add	sp, #52	; 0x34
   1f1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f1fa <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1f1fa:	b580      	push	{r7, lr}
   1f1fc:	b086      	sub	sp, #24
   1f1fe:	af00      	add	r7, sp, #0
   1f200:	60f8      	str	r0, [r7, #12]
   1f202:	60b9      	str	r1, [r7, #8]
   1f204:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   1f206:	2316      	movs	r3, #22
   1f208:	18fb      	adds	r3, r7, r3
   1f20a:	2200      	movs	r2, #0
   1f20c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1f20e:	68bb      	ldr	r3, [r7, #8]
   1f210:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1f212:	68bb      	ldr	r3, [r7, #8]
   1f214:	085a      	lsrs	r2, r3, #1
   1f216:	68fb      	ldr	r3, [r7, #12]
   1f218:	429a      	cmp	r2, r3
   1f21a:	d201      	bcs.n	1f220 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f21c:	2340      	movs	r3, #64	; 0x40
   1f21e:	e026      	b.n	1f26e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1f220:	68bb      	ldr	r3, [r7, #8]
   1f222:	085b      	lsrs	r3, r3, #1
   1f224:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1f226:	e00a      	b.n	1f23e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1f228:	693a      	ldr	r2, [r7, #16]
   1f22a:	68fb      	ldr	r3, [r7, #12]
   1f22c:	1ad3      	subs	r3, r2, r3
   1f22e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1f230:	2316      	movs	r3, #22
   1f232:	18fb      	adds	r3, r7, r3
   1f234:	881a      	ldrh	r2, [r3, #0]
   1f236:	2316      	movs	r3, #22
   1f238:	18fb      	adds	r3, r7, r3
   1f23a:	3201      	adds	r2, #1
   1f23c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1f23e:	693a      	ldr	r2, [r7, #16]
   1f240:	68fb      	ldr	r3, [r7, #12]
   1f242:	429a      	cmp	r2, r3
   1f244:	d2f0      	bcs.n	1f228 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1f246:	2316      	movs	r3, #22
   1f248:	18fb      	adds	r3, r7, r3
   1f24a:	2216      	movs	r2, #22
   1f24c:	18ba      	adds	r2, r7, r2
   1f24e:	8812      	ldrh	r2, [r2, #0]
   1f250:	3a01      	subs	r2, #1
   1f252:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1f254:	2316      	movs	r3, #22
   1f256:	18fb      	adds	r3, r7, r3
   1f258:	881b      	ldrh	r3, [r3, #0]
   1f25a:	2bff      	cmp	r3, #255	; 0xff
   1f25c:	d901      	bls.n	1f262 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f25e:	2340      	movs	r3, #64	; 0x40
   1f260:	e005      	b.n	1f26e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1f262:	687b      	ldr	r3, [r7, #4]
   1f264:	2216      	movs	r2, #22
   1f266:	18ba      	adds	r2, r7, r2
   1f268:	8812      	ldrh	r2, [r2, #0]
   1f26a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1f26c:	2300      	movs	r3, #0
	}
}
   1f26e:	0018      	movs	r0, r3
   1f270:	46bd      	mov	sp, r7
   1f272:	b006      	add	sp, #24
   1f274:	bd80      	pop	{r7, pc}
	...

0001f278 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1f278:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f27a:	b0a1      	sub	sp, #132	; 0x84
   1f27c:	af00      	add	r7, sp, #0
   1f27e:	64f8      	str	r0, [r7, #76]	; 0x4c
   1f280:	64b9      	str	r1, [r7, #72]	; 0x48
   1f282:	647a      	str	r2, [r7, #68]	; 0x44
   1f284:	2243      	movs	r2, #67	; 0x43
   1f286:	18ba      	adds	r2, r7, r2
   1f288:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1f28a:	2300      	movs	r3, #0
   1f28c:	2400      	movs	r4, #0
   1f28e:	673b      	str	r3, [r7, #112]	; 0x70
   1f290:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1f292:	2300      	movs	r3, #0
   1f294:	2400      	movs	r4, #0
   1f296:	66bb      	str	r3, [r7, #104]	; 0x68
   1f298:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1f29a:	2300      	movs	r3, #0
   1f29c:	2400      	movs	r4, #0
   1f29e:	67bb      	str	r3, [r7, #120]	; 0x78
   1f2a0:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1f2a2:	2300      	movs	r3, #0
   1f2a4:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1f2a6:	2358      	movs	r3, #88	; 0x58
   1f2a8:	2240      	movs	r2, #64	; 0x40
   1f2aa:	4694      	mov	ip, r2
   1f2ac:	44bc      	add	ip, r7
   1f2ae:	4463      	add	r3, ip
   1f2b0:	781a      	ldrb	r2, [r3, #0]
   1f2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1f2b4:	435a      	muls	r2, r3
   1f2b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f2b8:	429a      	cmp	r2, r3
   1f2ba:	d901      	bls.n	1f2c0 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f2bc:	2340      	movs	r3, #64	; 0x40
   1f2be:	e0b3      	b.n	1f428 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1f2c0:	2343      	movs	r3, #67	; 0x43
   1f2c2:	18fb      	adds	r3, r7, r3
   1f2c4:	781b      	ldrb	r3, [r3, #0]
   1f2c6:	2b00      	cmp	r3, #0
   1f2c8:	d13d      	bne.n	1f346 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1f2ca:	2358      	movs	r3, #88	; 0x58
   1f2cc:	2240      	movs	r2, #64	; 0x40
   1f2ce:	4694      	mov	ip, r2
   1f2d0:	44bc      	add	ip, r7
   1f2d2:	4463      	add	r3, ip
   1f2d4:	781b      	ldrb	r3, [r3, #0]
   1f2d6:	b2db      	uxtb	r3, r3
   1f2d8:	613b      	str	r3, [r7, #16]
   1f2da:	2300      	movs	r3, #0
   1f2dc:	617b      	str	r3, [r7, #20]
   1f2de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1f2e0:	60bb      	str	r3, [r7, #8]
   1f2e2:	2300      	movs	r3, #0
   1f2e4:	60fb      	str	r3, [r7, #12]
   1f2e6:	4c52      	ldr	r4, [pc, #328]	; (1f430 <_sercom_get_async_baud_val+0x1b8>)
   1f2e8:	68ba      	ldr	r2, [r7, #8]
   1f2ea:	68fb      	ldr	r3, [r7, #12]
   1f2ec:	6938      	ldr	r0, [r7, #16]
   1f2ee:	6979      	ldr	r1, [r7, #20]
   1f2f0:	47a0      	blx	r4
   1f2f2:	0003      	movs	r3, r0
   1f2f4:	000c      	movs	r4, r1
   1f2f6:	001b      	movs	r3, r3
   1f2f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   1f2fa:	2300      	movs	r3, #0
   1f2fc:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1f2fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f300:	603b      	str	r3, [r7, #0]
   1f302:	2300      	movs	r3, #0
   1f304:	607b      	str	r3, [r7, #4]
   1f306:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1f308:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1f30a:	683a      	ldr	r2, [r7, #0]
   1f30c:	687b      	ldr	r3, [r7, #4]
   1f30e:	4c49      	ldr	r4, [pc, #292]	; (1f434 <_sercom_get_async_baud_val+0x1bc>)
   1f310:	47a0      	blx	r4
   1f312:	0003      	movs	r3, r0
   1f314:	000c      	movs	r4, r1
   1f316:	673b      	str	r3, [r7, #112]	; 0x70
   1f318:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1f31a:	2100      	movs	r1, #0
   1f31c:	2201      	movs	r2, #1
   1f31e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1f320:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1f322:	1ac9      	subs	r1, r1, r3
   1f324:	41a2      	sbcs	r2, r4
   1f326:	000b      	movs	r3, r1
   1f328:	0014      	movs	r4, r2
   1f32a:	66bb      	str	r3, [r7, #104]	; 0x68
   1f32c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1f32e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f330:	0c1b      	lsrs	r3, r3, #16
   1f332:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1f334:	0416      	lsls	r6, r2, #16
   1f336:	431e      	orrs	r6, r3
   1f338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f33a:	041d      	lsls	r5, r3, #16
   1f33c:	0033      	movs	r3, r6
   1f33e:	67bb      	str	r3, [r7, #120]	; 0x78
   1f340:	2300      	movs	r3, #0
   1f342:	67fb      	str	r3, [r7, #124]	; 0x7c
   1f344:	e06a      	b.n	1f41c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1f346:	2343      	movs	r3, #67	; 0x43
   1f348:	18fb      	adds	r3, r7, r3
   1f34a:	781b      	ldrb	r3, [r3, #0]
   1f34c:	2b01      	cmp	r3, #1
   1f34e:	d165      	bne.n	1f41c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1f350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1f352:	633b      	str	r3, [r7, #48]	; 0x30
   1f354:	2300      	movs	r3, #0
   1f356:	637b      	str	r3, [r7, #52]	; 0x34
   1f358:	2358      	movs	r3, #88	; 0x58
   1f35a:	2240      	movs	r2, #64	; 0x40
   1f35c:	4694      	mov	ip, r2
   1f35e:	44bc      	add	ip, r7
   1f360:	4463      	add	r3, ip
   1f362:	781b      	ldrb	r3, [r3, #0]
   1f364:	b2db      	uxtb	r3, r3
   1f366:	62bb      	str	r3, [r7, #40]	; 0x28
   1f368:	2300      	movs	r3, #0
   1f36a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f36c:	4c30      	ldr	r4, [pc, #192]	; (1f430 <_sercom_get_async_baud_val+0x1b8>)
   1f36e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f372:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1f374:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1f376:	47a0      	blx	r4
   1f378:	0003      	movs	r3, r0
   1f37a:	000c      	movs	r4, r1
   1f37c:	65bb      	str	r3, [r7, #88]	; 0x58
   1f37e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1f380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f382:	623b      	str	r3, [r7, #32]
   1f384:	2300      	movs	r3, #0
   1f386:	627b      	str	r3, [r7, #36]	; 0x24
   1f388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1f38a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1f38c:	001a      	movs	r2, r3
   1f38e:	0023      	movs	r3, r4
   1f390:	6a38      	ldr	r0, [r7, #32]
   1f392:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1f394:	4c27      	ldr	r4, [pc, #156]	; (1f434 <_sercom_get_async_baud_val+0x1bc>)
   1f396:	47a0      	blx	r4
   1f398:	0003      	movs	r3, r0
   1f39a:	000c      	movs	r4, r1
   1f39c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1f39e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1f3a0:	2380      	movs	r3, #128	; 0x80
   1f3a2:	019b      	lsls	r3, r3, #6
   1f3a4:	429a      	cmp	r2, r3
   1f3a6:	d901      	bls.n	1f3ac <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f3a8:	2340      	movs	r3, #64	; 0x40
   1f3aa:	e03d      	b.n	1f428 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1f3ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f3ae:	61bb      	str	r3, [r7, #24]
   1f3b0:	2300      	movs	r3, #0
   1f3b2:	61fb      	str	r3, [r7, #28]
   1f3b4:	69b9      	ldr	r1, [r7, #24]
   1f3b6:	69fa      	ldr	r2, [r7, #28]
   1f3b8:	000b      	movs	r3, r1
   1f3ba:	0f5b      	lsrs	r3, r3, #29
   1f3bc:	0010      	movs	r0, r2
   1f3be:	00c0      	lsls	r0, r0, #3
   1f3c0:	63f8      	str	r0, [r7, #60]	; 0x3c
   1f3c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1f3c4:	4318      	orrs	r0, r3
   1f3c6:	63f8      	str	r0, [r7, #60]	; 0x3c
   1f3c8:	000b      	movs	r3, r1
   1f3ca:	00db      	lsls	r3, r3, #3
   1f3cc:	63bb      	str	r3, [r7, #56]	; 0x38
   1f3ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1f3d0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1f3d2:	001a      	movs	r2, r3
   1f3d4:	0023      	movs	r3, r4
   1f3d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1f3d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1f3da:	4c16      	ldr	r4, [pc, #88]	; (1f434 <_sercom_get_async_baud_val+0x1bc>)
   1f3dc:	47a0      	blx	r4
   1f3de:	0003      	movs	r3, r0
   1f3e0:	000c      	movs	r4, r1
   1f3e2:	65bb      	str	r3, [r7, #88]	; 0x58
   1f3e4:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1f3e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1f3e8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1f3ea:	b2d9      	uxtb	r1, r3
   1f3ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f3ee:	b2db      	uxtb	r3, r3
   1f3f0:	00db      	lsls	r3, r3, #3
   1f3f2:	b2da      	uxtb	r2, r3
   1f3f4:	2317      	movs	r3, #23
   1f3f6:	2040      	movs	r0, #64	; 0x40
   1f3f8:	4684      	mov	ip, r0
   1f3fa:	44bc      	add	ip, r7
   1f3fc:	4463      	add	r3, ip
   1f3fe:	1a8a      	subs	r2, r1, r2
   1f400:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1f402:	2317      	movs	r3, #23
   1f404:	2240      	movs	r2, #64	; 0x40
   1f406:	4694      	mov	ip, r2
   1f408:	44bc      	add	ip, r7
   1f40a:	4463      	add	r3, ip
   1f40c:	781b      	ldrb	r3, [r3, #0]
   1f40e:	035b      	lsls	r3, r3, #13
   1f410:	001a      	movs	r2, r3
   1f412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f414:	4313      	orrs	r3, r2
   1f416:	67bb      	str	r3, [r7, #120]	; 0x78
   1f418:	2300      	movs	r3, #0
   1f41a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1f41c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1f41e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1f420:	b29a      	uxth	r2, r3
   1f422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f424:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1f426:	2300      	movs	r3, #0
}
   1f428:	0018      	movs	r0, r3
   1f42a:	46bd      	mov	sp, r7
   1f42c:	b021      	add	sp, #132	; 0x84
   1f42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f430:	0002728d 	.word	0x0002728d
   1f434:	0001f11b 	.word	0x0001f11b

0001f438 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1f438:	b580      	push	{r7, lr}
   1f43a:	b084      	sub	sp, #16
   1f43c:	af00      	add	r7, sp, #0
   1f43e:	0002      	movs	r2, r0
   1f440:	1dfb      	adds	r3, r7, #7
   1f442:	701a      	strb	r2, [r3, #0]
   1f444:	1dbb      	adds	r3, r7, #6
   1f446:	1c0a      	adds	r2, r1, #0
   1f448:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1f44a:	4b1a      	ldr	r3, [pc, #104]	; (1f4b4 <sercom_set_gclk_generator+0x7c>)
   1f44c:	781b      	ldrb	r3, [r3, #0]
   1f44e:	2201      	movs	r2, #1
   1f450:	4053      	eors	r3, r2
   1f452:	b2db      	uxtb	r3, r3
   1f454:	2b00      	cmp	r3, #0
   1f456:	d103      	bne.n	1f460 <sercom_set_gclk_generator+0x28>
   1f458:	1dbb      	adds	r3, r7, #6
   1f45a:	781b      	ldrb	r3, [r3, #0]
   1f45c:	2b00      	cmp	r3, #0
   1f45e:	d01b      	beq.n	1f498 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1f460:	230c      	movs	r3, #12
   1f462:	18fb      	adds	r3, r7, r3
   1f464:	0018      	movs	r0, r3
   1f466:	4b14      	ldr	r3, [pc, #80]	; (1f4b8 <sercom_set_gclk_generator+0x80>)
   1f468:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1f46a:	230c      	movs	r3, #12
   1f46c:	18fb      	adds	r3, r7, r3
   1f46e:	1dfa      	adds	r2, r7, #7
   1f470:	7812      	ldrb	r2, [r2, #0]
   1f472:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1f474:	230c      	movs	r3, #12
   1f476:	18fb      	adds	r3, r7, r3
   1f478:	0019      	movs	r1, r3
   1f47a:	2013      	movs	r0, #19
   1f47c:	4b0f      	ldr	r3, [pc, #60]	; (1f4bc <sercom_set_gclk_generator+0x84>)
   1f47e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1f480:	2013      	movs	r0, #19
   1f482:	4b0f      	ldr	r3, [pc, #60]	; (1f4c0 <sercom_set_gclk_generator+0x88>)
   1f484:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1f486:	4b0b      	ldr	r3, [pc, #44]	; (1f4b4 <sercom_set_gclk_generator+0x7c>)
   1f488:	1dfa      	adds	r2, r7, #7
   1f48a:	7812      	ldrb	r2, [r2, #0]
   1f48c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1f48e:	4b09      	ldr	r3, [pc, #36]	; (1f4b4 <sercom_set_gclk_generator+0x7c>)
   1f490:	2201      	movs	r2, #1
   1f492:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1f494:	2300      	movs	r3, #0
   1f496:	e008      	b.n	1f4aa <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1f498:	4b06      	ldr	r3, [pc, #24]	; (1f4b4 <sercom_set_gclk_generator+0x7c>)
   1f49a:	785b      	ldrb	r3, [r3, #1]
   1f49c:	1dfa      	adds	r2, r7, #7
   1f49e:	7812      	ldrb	r2, [r2, #0]
   1f4a0:	429a      	cmp	r2, r3
   1f4a2:	d101      	bne.n	1f4a8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1f4a4:	2300      	movs	r3, #0
   1f4a6:	e000      	b.n	1f4aa <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1f4a8:	231d      	movs	r3, #29
}
   1f4aa:	0018      	movs	r0, r3
   1f4ac:	46bd      	mov	sp, r7
   1f4ae:	b004      	add	sp, #16
   1f4b0:	bd80      	pop	{r7, pc}
   1f4b2:	46c0      	nop			; (mov r8, r8)
   1f4b4:	200004b4 	.word	0x200004b4
   1f4b8:	0001f105 	.word	0x0001f105
   1f4bc:	000252f5 	.word	0x000252f5
   1f4c0:	00025339 	.word	0x00025339

0001f4c4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1f4c4:	b580      	push	{r7, lr}
   1f4c6:	b082      	sub	sp, #8
   1f4c8:	af00      	add	r7, sp, #0
   1f4ca:	6078      	str	r0, [r7, #4]
   1f4cc:	000a      	movs	r2, r1
   1f4ce:	1cfb      	adds	r3, r7, #3
   1f4d0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1f4d2:	687b      	ldr	r3, [r7, #4]
   1f4d4:	4a4d      	ldr	r2, [pc, #308]	; (1f60c <_sercom_get_default_pad+0x148>)
   1f4d6:	4293      	cmp	r3, r2
   1f4d8:	d03f      	beq.n	1f55a <_sercom_get_default_pad+0x96>
   1f4da:	4a4c      	ldr	r2, [pc, #304]	; (1f60c <_sercom_get_default_pad+0x148>)
   1f4dc:	4293      	cmp	r3, r2
   1f4de:	d806      	bhi.n	1f4ee <_sercom_get_default_pad+0x2a>
   1f4e0:	4a4b      	ldr	r2, [pc, #300]	; (1f610 <_sercom_get_default_pad+0x14c>)
   1f4e2:	4293      	cmp	r3, r2
   1f4e4:	d00f      	beq.n	1f506 <_sercom_get_default_pad+0x42>
   1f4e6:	4a4b      	ldr	r2, [pc, #300]	; (1f614 <_sercom_get_default_pad+0x150>)
   1f4e8:	4293      	cmp	r3, r2
   1f4ea:	d021      	beq.n	1f530 <_sercom_get_default_pad+0x6c>
   1f4ec:	e089      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f4ee:	4a4a      	ldr	r2, [pc, #296]	; (1f618 <_sercom_get_default_pad+0x154>)
   1f4f0:	4293      	cmp	r3, r2
   1f4f2:	d100      	bne.n	1f4f6 <_sercom_get_default_pad+0x32>
   1f4f4:	e05b      	b.n	1f5ae <_sercom_get_default_pad+0xea>
   1f4f6:	4a49      	ldr	r2, [pc, #292]	; (1f61c <_sercom_get_default_pad+0x158>)
   1f4f8:	4293      	cmp	r3, r2
   1f4fa:	d100      	bne.n	1f4fe <_sercom_get_default_pad+0x3a>
   1f4fc:	e06c      	b.n	1f5d8 <_sercom_get_default_pad+0x114>
   1f4fe:	4a48      	ldr	r2, [pc, #288]	; (1f620 <_sercom_get_default_pad+0x15c>)
   1f500:	4293      	cmp	r3, r2
   1f502:	d03f      	beq.n	1f584 <_sercom_get_default_pad+0xc0>
   1f504:	e07d      	b.n	1f602 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1f506:	1cfb      	adds	r3, r7, #3
   1f508:	781b      	ldrb	r3, [r3, #0]
   1f50a:	2b01      	cmp	r3, #1
   1f50c:	d00a      	beq.n	1f524 <_sercom_get_default_pad+0x60>
   1f50e:	dc02      	bgt.n	1f516 <_sercom_get_default_pad+0x52>
   1f510:	2b00      	cmp	r3, #0
   1f512:	d005      	beq.n	1f520 <_sercom_get_default_pad+0x5c>
   1f514:	e075      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f516:	2b02      	cmp	r3, #2
   1f518:	d006      	beq.n	1f528 <_sercom_get_default_pad+0x64>
   1f51a:	2b03      	cmp	r3, #3
   1f51c:	d006      	beq.n	1f52c <_sercom_get_default_pad+0x68>
   1f51e:	e070      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f520:	4b40      	ldr	r3, [pc, #256]	; (1f624 <_sercom_get_default_pad+0x160>)
   1f522:	e06f      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f524:	4b40      	ldr	r3, [pc, #256]	; (1f628 <_sercom_get_default_pad+0x164>)
   1f526:	e06d      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f528:	4b40      	ldr	r3, [pc, #256]	; (1f62c <_sercom_get_default_pad+0x168>)
   1f52a:	e06b      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f52c:	4b40      	ldr	r3, [pc, #256]	; (1f630 <_sercom_get_default_pad+0x16c>)
   1f52e:	e069      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f530:	1cfb      	adds	r3, r7, #3
   1f532:	781b      	ldrb	r3, [r3, #0]
   1f534:	2b01      	cmp	r3, #1
   1f536:	d00a      	beq.n	1f54e <_sercom_get_default_pad+0x8a>
   1f538:	dc02      	bgt.n	1f540 <_sercom_get_default_pad+0x7c>
   1f53a:	2b00      	cmp	r3, #0
   1f53c:	d005      	beq.n	1f54a <_sercom_get_default_pad+0x86>
   1f53e:	e060      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f540:	2b02      	cmp	r3, #2
   1f542:	d006      	beq.n	1f552 <_sercom_get_default_pad+0x8e>
   1f544:	2b03      	cmp	r3, #3
   1f546:	d006      	beq.n	1f556 <_sercom_get_default_pad+0x92>
   1f548:	e05b      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f54a:	2303      	movs	r3, #3
   1f54c:	e05a      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f54e:	4b39      	ldr	r3, [pc, #228]	; (1f634 <_sercom_get_default_pad+0x170>)
   1f550:	e058      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f552:	4b39      	ldr	r3, [pc, #228]	; (1f638 <_sercom_get_default_pad+0x174>)
   1f554:	e056      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f556:	4b39      	ldr	r3, [pc, #228]	; (1f63c <_sercom_get_default_pad+0x178>)
   1f558:	e054      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f55a:	1cfb      	adds	r3, r7, #3
   1f55c:	781b      	ldrb	r3, [r3, #0]
   1f55e:	2b01      	cmp	r3, #1
   1f560:	d00a      	beq.n	1f578 <_sercom_get_default_pad+0xb4>
   1f562:	dc02      	bgt.n	1f56a <_sercom_get_default_pad+0xa6>
   1f564:	2b00      	cmp	r3, #0
   1f566:	d005      	beq.n	1f574 <_sercom_get_default_pad+0xb0>
   1f568:	e04b      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f56a:	2b02      	cmp	r3, #2
   1f56c:	d006      	beq.n	1f57c <_sercom_get_default_pad+0xb8>
   1f56e:	2b03      	cmp	r3, #3
   1f570:	d006      	beq.n	1f580 <_sercom_get_default_pad+0xbc>
   1f572:	e046      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f574:	4b32      	ldr	r3, [pc, #200]	; (1f640 <_sercom_get_default_pad+0x17c>)
   1f576:	e045      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f578:	4b32      	ldr	r3, [pc, #200]	; (1f644 <_sercom_get_default_pad+0x180>)
   1f57a:	e043      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f57c:	4b32      	ldr	r3, [pc, #200]	; (1f648 <_sercom_get_default_pad+0x184>)
   1f57e:	e041      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f580:	4b32      	ldr	r3, [pc, #200]	; (1f64c <_sercom_get_default_pad+0x188>)
   1f582:	e03f      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f584:	1cfb      	adds	r3, r7, #3
   1f586:	781b      	ldrb	r3, [r3, #0]
   1f588:	2b01      	cmp	r3, #1
   1f58a:	d00a      	beq.n	1f5a2 <_sercom_get_default_pad+0xde>
   1f58c:	dc02      	bgt.n	1f594 <_sercom_get_default_pad+0xd0>
   1f58e:	2b00      	cmp	r3, #0
   1f590:	d005      	beq.n	1f59e <_sercom_get_default_pad+0xda>
   1f592:	e036      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f594:	2b02      	cmp	r3, #2
   1f596:	d006      	beq.n	1f5a6 <_sercom_get_default_pad+0xe2>
   1f598:	2b03      	cmp	r3, #3
   1f59a:	d006      	beq.n	1f5aa <_sercom_get_default_pad+0xe6>
   1f59c:	e031      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f59e:	4b2c      	ldr	r3, [pc, #176]	; (1f650 <_sercom_get_default_pad+0x18c>)
   1f5a0:	e030      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5a2:	4b2c      	ldr	r3, [pc, #176]	; (1f654 <_sercom_get_default_pad+0x190>)
   1f5a4:	e02e      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5a6:	4b2c      	ldr	r3, [pc, #176]	; (1f658 <_sercom_get_default_pad+0x194>)
   1f5a8:	e02c      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5aa:	4b2c      	ldr	r3, [pc, #176]	; (1f65c <_sercom_get_default_pad+0x198>)
   1f5ac:	e02a      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5ae:	1cfb      	adds	r3, r7, #3
   1f5b0:	781b      	ldrb	r3, [r3, #0]
   1f5b2:	2b01      	cmp	r3, #1
   1f5b4:	d00a      	beq.n	1f5cc <_sercom_get_default_pad+0x108>
   1f5b6:	dc02      	bgt.n	1f5be <_sercom_get_default_pad+0xfa>
   1f5b8:	2b00      	cmp	r3, #0
   1f5ba:	d005      	beq.n	1f5c8 <_sercom_get_default_pad+0x104>
   1f5bc:	e021      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f5be:	2b02      	cmp	r3, #2
   1f5c0:	d006      	beq.n	1f5d0 <_sercom_get_default_pad+0x10c>
   1f5c2:	2b03      	cmp	r3, #3
   1f5c4:	d006      	beq.n	1f5d4 <_sercom_get_default_pad+0x110>
   1f5c6:	e01c      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f5c8:	4b25      	ldr	r3, [pc, #148]	; (1f660 <_sercom_get_default_pad+0x19c>)
   1f5ca:	e01b      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5cc:	4b25      	ldr	r3, [pc, #148]	; (1f664 <_sercom_get_default_pad+0x1a0>)
   1f5ce:	e019      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5d0:	4b25      	ldr	r3, [pc, #148]	; (1f668 <_sercom_get_default_pad+0x1a4>)
   1f5d2:	e017      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5d4:	4b25      	ldr	r3, [pc, #148]	; (1f66c <_sercom_get_default_pad+0x1a8>)
   1f5d6:	e015      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5d8:	1cfb      	adds	r3, r7, #3
   1f5da:	781b      	ldrb	r3, [r3, #0]
   1f5dc:	2b01      	cmp	r3, #1
   1f5de:	d00a      	beq.n	1f5f6 <_sercom_get_default_pad+0x132>
   1f5e0:	dc02      	bgt.n	1f5e8 <_sercom_get_default_pad+0x124>
   1f5e2:	2b00      	cmp	r3, #0
   1f5e4:	d005      	beq.n	1f5f2 <_sercom_get_default_pad+0x12e>
   1f5e6:	e00c      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f5e8:	2b02      	cmp	r3, #2
   1f5ea:	d006      	beq.n	1f5fa <_sercom_get_default_pad+0x136>
   1f5ec:	2b03      	cmp	r3, #3
   1f5ee:	d006      	beq.n	1f5fe <_sercom_get_default_pad+0x13a>
   1f5f0:	e007      	b.n	1f602 <_sercom_get_default_pad+0x13e>
   1f5f2:	4b1f      	ldr	r3, [pc, #124]	; (1f670 <_sercom_get_default_pad+0x1ac>)
   1f5f4:	e006      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5f6:	4b1f      	ldr	r3, [pc, #124]	; (1f674 <_sercom_get_default_pad+0x1b0>)
   1f5f8:	e004      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5fa:	4b1f      	ldr	r3, [pc, #124]	; (1f678 <_sercom_get_default_pad+0x1b4>)
   1f5fc:	e002      	b.n	1f604 <_sercom_get_default_pad+0x140>
   1f5fe:	4b1f      	ldr	r3, [pc, #124]	; (1f67c <_sercom_get_default_pad+0x1b8>)
   1f600:	e000      	b.n	1f604 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1f602:	2300      	movs	r3, #0
}
   1f604:	0018      	movs	r0, r3
   1f606:	46bd      	mov	sp, r7
   1f608:	b002      	add	sp, #8
   1f60a:	bd80      	pop	{r7, pc}
   1f60c:	42001000 	.word	0x42001000
   1f610:	42000800 	.word	0x42000800
   1f614:	42000c00 	.word	0x42000c00
   1f618:	42001800 	.word	0x42001800
   1f61c:	42001c00 	.word	0x42001c00
   1f620:	42001400 	.word	0x42001400
   1f624:	00040003 	.word	0x00040003
   1f628:	00050003 	.word	0x00050003
   1f62c:	00060003 	.word	0x00060003
   1f630:	00070003 	.word	0x00070003
   1f634:	00010003 	.word	0x00010003
   1f638:	001e0003 	.word	0x001e0003
   1f63c:	001f0003 	.word	0x001f0003
   1f640:	00080003 	.word	0x00080003
   1f644:	00090003 	.word	0x00090003
   1f648:	000a0003 	.word	0x000a0003
   1f64c:	000b0003 	.word	0x000b0003
   1f650:	00100003 	.word	0x00100003
   1f654:	00110003 	.word	0x00110003
   1f658:	00120003 	.word	0x00120003
   1f65c:	00130003 	.word	0x00130003
   1f660:	000c0003 	.word	0x000c0003
   1f664:	000d0003 	.word	0x000d0003
   1f668:	000e0003 	.word	0x000e0003
   1f66c:	000f0003 	.word	0x000f0003
   1f670:	00160003 	.word	0x00160003
   1f674:	00170003 	.word	0x00170003
   1f678:	00180003 	.word	0x00180003
   1f67c:	00190003 	.word	0x00190003

0001f680 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1f680:	b590      	push	{r4, r7, lr}
   1f682:	b08b      	sub	sp, #44	; 0x2c
   1f684:	af00      	add	r7, sp, #0
   1f686:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1f688:	230c      	movs	r3, #12
   1f68a:	18fb      	adds	r3, r7, r3
   1f68c:	4a0f      	ldr	r2, [pc, #60]	; (1f6cc <_sercom_get_sercom_inst_index+0x4c>)
   1f68e:	ca13      	ldmia	r2!, {r0, r1, r4}
   1f690:	c313      	stmia	r3!, {r0, r1, r4}
   1f692:	ca13      	ldmia	r2!, {r0, r1, r4}
   1f694:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f696:	2300      	movs	r3, #0
   1f698:	627b      	str	r3, [r7, #36]	; 0x24
   1f69a:	e00e      	b.n	1f6ba <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1f69c:	230c      	movs	r3, #12
   1f69e:	18fb      	adds	r3, r7, r3
   1f6a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f6a2:	0092      	lsls	r2, r2, #2
   1f6a4:	58d3      	ldr	r3, [r2, r3]
   1f6a6:	001a      	movs	r2, r3
   1f6a8:	687b      	ldr	r3, [r7, #4]
   1f6aa:	429a      	cmp	r2, r3
   1f6ac:	d102      	bne.n	1f6b4 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1f6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f6b0:	b2db      	uxtb	r3, r3
   1f6b2:	e006      	b.n	1f6c2 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f6b6:	3301      	adds	r3, #1
   1f6b8:	627b      	str	r3, [r7, #36]	; 0x24
   1f6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f6bc:	2b05      	cmp	r3, #5
   1f6be:	d9ed      	bls.n	1f69c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1f6c0:	2300      	movs	r3, #0
}
   1f6c2:	0018      	movs	r0, r3
   1f6c4:	46bd      	mov	sp, r7
   1f6c6:	b00b      	add	sp, #44	; 0x2c
   1f6c8:	bd90      	pop	{r4, r7, pc}
   1f6ca:	46c0      	nop			; (mov r8, r8)
   1f6cc:	0002b59c 	.word	0x0002b59c

0001f6d0 <system_cpu_clock_get_hz>:
{
   1f6d0:	b580      	push	{r7, lr}
   1f6d2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1f6d4:	2000      	movs	r0, #0
   1f6d6:	4b05      	ldr	r3, [pc, #20]	; (1f6ec <system_cpu_clock_get_hz+0x1c>)
   1f6d8:	4798      	blx	r3
   1f6da:	0002      	movs	r2, r0
   1f6dc:	4b04      	ldr	r3, [pc, #16]	; (1f6f0 <system_cpu_clock_get_hz+0x20>)
   1f6de:	7a1b      	ldrb	r3, [r3, #8]
   1f6e0:	b2db      	uxtb	r3, r3
   1f6e2:	40da      	lsrs	r2, r3
   1f6e4:	0013      	movs	r3, r2
}
   1f6e6:	0018      	movs	r0, r3
   1f6e8:	46bd      	mov	sp, r7
   1f6ea:	bd80      	pop	{r7, pc}
   1f6ec:	0002521d 	.word	0x0002521d
   1f6f0:	40000400 	.word	0x40000400

0001f6f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1f6f4:	b580      	push	{r7, lr}
   1f6f6:	b084      	sub	sp, #16
   1f6f8:	af00      	add	r7, sp, #0
   1f6fa:	60f8      	str	r0, [r7, #12]
   1f6fc:	60b9      	str	r1, [r7, #8]
   1f6fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1f700:	68fb      	ldr	r3, [r7, #12]
   1f702:	3b04      	subs	r3, #4
   1f704:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1f706:	68fb      	ldr	r3, [r7, #12]
   1f708:	2280      	movs	r2, #128	; 0x80
   1f70a:	0452      	lsls	r2, r2, #17
   1f70c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1f70e:	68fb      	ldr	r3, [r7, #12]
   1f710:	3b04      	subs	r3, #4
   1f712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1f714:	68ba      	ldr	r2, [r7, #8]
   1f716:	68fb      	ldr	r3, [r7, #12]
   1f718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1f71a:	68fb      	ldr	r3, [r7, #12]
   1f71c:	3b04      	subs	r3, #4
   1f71e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1f720:	4a08      	ldr	r2, [pc, #32]	; (1f744 <pxPortInitialiseStack+0x50>)
   1f722:	68fb      	ldr	r3, [r7, #12]
   1f724:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1f726:	68fb      	ldr	r3, [r7, #12]
   1f728:	3b14      	subs	r3, #20
   1f72a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1f72c:	687a      	ldr	r2, [r7, #4]
   1f72e:	68fb      	ldr	r3, [r7, #12]
   1f730:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1f732:	68fb      	ldr	r3, [r7, #12]
   1f734:	3b20      	subs	r3, #32
   1f736:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1f738:	68fb      	ldr	r3, [r7, #12]
}
   1f73a:	0018      	movs	r0, r3
   1f73c:	46bd      	mov	sp, r7
   1f73e:	b004      	add	sp, #16
   1f740:	bd80      	pop	{r7, pc}
   1f742:	46c0      	nop			; (mov r8, r8)
   1f744:	0001f749 	.word	0x0001f749

0001f748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1f748:	b580      	push	{r7, lr}
   1f74a:	b082      	sub	sp, #8
   1f74c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1f74e:	2300      	movs	r3, #0
   1f750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1f752:	4b07      	ldr	r3, [pc, #28]	; (1f770 <prvTaskExitError+0x28>)
   1f754:	681b      	ldr	r3, [r3, #0]
   1f756:	3301      	adds	r3, #1
   1f758:	d001      	beq.n	1f75e <prvTaskExitError+0x16>
   1f75a:	b672      	cpsid	i
   1f75c:	e7fe      	b.n	1f75c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1f75e:	b672      	cpsid	i
	while( ulDummy == 0 )
   1f760:	46c0      	nop			; (mov r8, r8)
   1f762:	687b      	ldr	r3, [r7, #4]
   1f764:	2b00      	cmp	r3, #0
   1f766:	d0fc      	beq.n	1f762 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1f768:	46c0      	nop			; (mov r8, r8)
   1f76a:	46bd      	mov	sp, r7
   1f76c:	b002      	add	sp, #8
   1f76e:	bd80      	pop	{r7, pc}
   1f770:	20000010 	.word	0x20000010

0001f774 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1f774:	b580      	push	{r7, lr}
   1f776:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1f778:	46c0      	nop			; (mov r8, r8)
   1f77a:	46bd      	mov	sp, r7
   1f77c:	bd80      	pop	{r7, pc}
	...

0001f780 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1f780:	4a0b      	ldr	r2, [pc, #44]	; (1f7b0 <pxCurrentTCBConst2>)
   1f782:	6813      	ldr	r3, [r2, #0]
   1f784:	6818      	ldr	r0, [r3, #0]
   1f786:	3020      	adds	r0, #32
   1f788:	f380 8809 	msr	PSP, r0
   1f78c:	2002      	movs	r0, #2
   1f78e:	f380 8814 	msr	CONTROL, r0
   1f792:	f3bf 8f6f 	isb	sy
   1f796:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1f798:	46ae      	mov	lr, r5
   1f79a:	bc08      	pop	{r3}
   1f79c:	bc04      	pop	{r2}
   1f79e:	b662      	cpsie	i
   1f7a0:	4718      	bx	r3
   1f7a2:	46c0      	nop			; (mov r8, r8)
   1f7a4:	46c0      	nop			; (mov r8, r8)
   1f7a6:	46c0      	nop			; (mov r8, r8)
   1f7a8:	46c0      	nop			; (mov r8, r8)
   1f7aa:	46c0      	nop			; (mov r8, r8)
   1f7ac:	46c0      	nop			; (mov r8, r8)
   1f7ae:	46c0      	nop			; (mov r8, r8)

0001f7b0 <pxCurrentTCBConst2>:
   1f7b0:	200004b8 	.word	0x200004b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1f7b4:	46c0      	nop			; (mov r8, r8)
   1f7b6:	46c0      	nop			; (mov r8, r8)

0001f7b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1f7b8:	b580      	push	{r7, lr}
   1f7ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1f7bc:	4b0e      	ldr	r3, [pc, #56]	; (1f7f8 <xPortStartScheduler+0x40>)
   1f7be:	4a0e      	ldr	r2, [pc, #56]	; (1f7f8 <xPortStartScheduler+0x40>)
   1f7c0:	6812      	ldr	r2, [r2, #0]
   1f7c2:	21ff      	movs	r1, #255	; 0xff
   1f7c4:	0409      	lsls	r1, r1, #16
   1f7c6:	430a      	orrs	r2, r1
   1f7c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1f7ca:	4b0b      	ldr	r3, [pc, #44]	; (1f7f8 <xPortStartScheduler+0x40>)
   1f7cc:	4a0a      	ldr	r2, [pc, #40]	; (1f7f8 <xPortStartScheduler+0x40>)
   1f7ce:	6812      	ldr	r2, [r2, #0]
   1f7d0:	21ff      	movs	r1, #255	; 0xff
   1f7d2:	0609      	lsls	r1, r1, #24
   1f7d4:	430a      	orrs	r2, r1
   1f7d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1f7d8:	4b08      	ldr	r3, [pc, #32]	; (1f7fc <xPortStartScheduler+0x44>)
   1f7da:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1f7dc:	4b08      	ldr	r3, [pc, #32]	; (1f800 <xPortStartScheduler+0x48>)
   1f7de:	2200      	movs	r2, #0
   1f7e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1f7e2:	4b08      	ldr	r3, [pc, #32]	; (1f804 <xPortStartScheduler+0x4c>)
   1f7e4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1f7e6:	4b08      	ldr	r3, [pc, #32]	; (1f808 <xPortStartScheduler+0x50>)
   1f7e8:	4798      	blx	r3
	prvTaskExitError();
   1f7ea:	4b08      	ldr	r3, [pc, #32]	; (1f80c <xPortStartScheduler+0x54>)
   1f7ec:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1f7ee:	2300      	movs	r3, #0
}
   1f7f0:	0018      	movs	r0, r3
   1f7f2:	46bd      	mov	sp, r7
   1f7f4:	bd80      	pop	{r7, pc}
   1f7f6:	46c0      	nop			; (mov r8, r8)
   1f7f8:	e000ed20 	.word	0xe000ed20
   1f7fc:	0001f929 	.word	0x0001f929
   1f800:	20000010 	.word	0x20000010
   1f804:	0001f781 	.word	0x0001f781
   1f808:	00020f5d 	.word	0x00020f5d
   1f80c:	0001f749 	.word	0x0001f749

0001f810 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1f810:	b580      	push	{r7, lr}
   1f812:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1f814:	4b05      	ldr	r3, [pc, #20]	; (1f82c <vPortYield+0x1c>)
   1f816:	2280      	movs	r2, #128	; 0x80
   1f818:	0552      	lsls	r2, r2, #21
   1f81a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
   1f81c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1f820:	f3bf 8f6f 	isb	sy
}
   1f824:	46c0      	nop			; (mov r8, r8)
   1f826:	46bd      	mov	sp, r7
   1f828:	bd80      	pop	{r7, pc}
   1f82a:	46c0      	nop			; (mov r8, r8)
   1f82c:	e000ed04 	.word	0xe000ed04

0001f830 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1f830:	b580      	push	{r7, lr}
   1f832:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1f834:	b672      	cpsid	i
    uxCriticalNesting++;
   1f836:	4b06      	ldr	r3, [pc, #24]	; (1f850 <vPortEnterCritical+0x20>)
   1f838:	681b      	ldr	r3, [r3, #0]
   1f83a:	1c5a      	adds	r2, r3, #1
   1f83c:	4b04      	ldr	r3, [pc, #16]	; (1f850 <vPortEnterCritical+0x20>)
   1f83e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1f840:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1f844:	f3bf 8f6f 	isb	sy
}
   1f848:	46c0      	nop			; (mov r8, r8)
   1f84a:	46bd      	mov	sp, r7
   1f84c:	bd80      	pop	{r7, pc}
   1f84e:	46c0      	nop			; (mov r8, r8)
   1f850:	20000010 	.word	0x20000010

0001f854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1f854:	b580      	push	{r7, lr}
   1f856:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1f858:	4b09      	ldr	r3, [pc, #36]	; (1f880 <vPortExitCritical+0x2c>)
   1f85a:	681b      	ldr	r3, [r3, #0]
   1f85c:	2b00      	cmp	r3, #0
   1f85e:	d101      	bne.n	1f864 <vPortExitCritical+0x10>
   1f860:	b672      	cpsid	i
   1f862:	e7fe      	b.n	1f862 <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1f864:	4b06      	ldr	r3, [pc, #24]	; (1f880 <vPortExitCritical+0x2c>)
   1f866:	681b      	ldr	r3, [r3, #0]
   1f868:	1e5a      	subs	r2, r3, #1
   1f86a:	4b05      	ldr	r3, [pc, #20]	; (1f880 <vPortExitCritical+0x2c>)
   1f86c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1f86e:	4b04      	ldr	r3, [pc, #16]	; (1f880 <vPortExitCritical+0x2c>)
   1f870:	681b      	ldr	r3, [r3, #0]
   1f872:	2b00      	cmp	r3, #0
   1f874:	d100      	bne.n	1f878 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1f876:	b662      	cpsie	i
    }
}
   1f878:	46c0      	nop			; (mov r8, r8)
   1f87a:	46bd      	mov	sp, r7
   1f87c:	bd80      	pop	{r7, pc}
   1f87e:	46c0      	nop			; (mov r8, r8)
   1f880:	20000010 	.word	0x20000010

0001f884 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1f884:	f3ef 8010 	mrs	r0, PRIMASK
   1f888:	b672      	cpsid	i
   1f88a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1f88c:	46c0      	nop			; (mov r8, r8)
   1f88e:	0018      	movs	r0, r3

0001f890 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1f890:	f380 8810 	msr	PRIMASK, r0
   1f894:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1f896:	46c0      	nop			; (mov r8, r8)
	...

0001f8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1f8a0:	f3ef 8009 	mrs	r0, PSP
   1f8a4:	4b0e      	ldr	r3, [pc, #56]	; (1f8e0 <pxCurrentTCBConst>)
   1f8a6:	681a      	ldr	r2, [r3, #0]
   1f8a8:	3820      	subs	r0, #32
   1f8aa:	6010      	str	r0, [r2, #0]
   1f8ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1f8ae:	4644      	mov	r4, r8
   1f8b0:	464d      	mov	r5, r9
   1f8b2:	4656      	mov	r6, sl
   1f8b4:	465f      	mov	r7, fp
   1f8b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1f8b8:	b508      	push	{r3, lr}
   1f8ba:	b672      	cpsid	i
   1f8bc:	f001 fb4e 	bl	20f5c <vTaskSwitchContext>
   1f8c0:	b662      	cpsie	i
   1f8c2:	bc0c      	pop	{r2, r3}
   1f8c4:	6811      	ldr	r1, [r2, #0]
   1f8c6:	6808      	ldr	r0, [r1, #0]
   1f8c8:	3010      	adds	r0, #16
   1f8ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1f8cc:	46a0      	mov	r8, r4
   1f8ce:	46a9      	mov	r9, r5
   1f8d0:	46b2      	mov	sl, r6
   1f8d2:	46bb      	mov	fp, r7
   1f8d4:	f380 8809 	msr	PSP, r0
   1f8d8:	3820      	subs	r0, #32
   1f8da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1f8dc:	4718      	bx	r3
   1f8de:	46c0      	nop			; (mov r8, r8)

0001f8e0 <pxCurrentTCBConst>:
   1f8e0:	200004b8 	.word	0x200004b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1f8e4:	46c0      	nop			; (mov r8, r8)
   1f8e6:	46c0      	nop			; (mov r8, r8)

0001f8e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1f8e8:	b580      	push	{r7, lr}
   1f8ea:	b082      	sub	sp, #8
   1f8ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1f8ee:	4b0a      	ldr	r3, [pc, #40]	; (1f918 <SysTick_Handler+0x30>)
   1f8f0:	4798      	blx	r3
   1f8f2:	0003      	movs	r3, r0
   1f8f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1f8f6:	4b09      	ldr	r3, [pc, #36]	; (1f91c <SysTick_Handler+0x34>)
   1f8f8:	4798      	blx	r3
   1f8fa:	1e03      	subs	r3, r0, #0
   1f8fc:	d003      	beq.n	1f906 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1f8fe:	4b08      	ldr	r3, [pc, #32]	; (1f920 <SysTick_Handler+0x38>)
   1f900:	2280      	movs	r2, #128	; 0x80
   1f902:	0552      	lsls	r2, r2, #21
   1f904:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1f906:	687b      	ldr	r3, [r7, #4]
   1f908:	0018      	movs	r0, r3
   1f90a:	4b06      	ldr	r3, [pc, #24]	; (1f924 <SysTick_Handler+0x3c>)
   1f90c:	4798      	blx	r3
}
   1f90e:	46c0      	nop			; (mov r8, r8)
   1f910:	46bd      	mov	sp, r7
   1f912:	b002      	add	sp, #8
   1f914:	bd80      	pop	{r7, pc}
   1f916:	46c0      	nop			; (mov r8, r8)
   1f918:	0001f885 	.word	0x0001f885
   1f91c:	00020de9 	.word	0x00020de9
   1f920:	e000ed04 	.word	0xe000ed04
   1f924:	0001f891 	.word	0x0001f891

0001f928 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1f928:	b5b0      	push	{r4, r5, r7, lr}
   1f92a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1f92c:	4b0a      	ldr	r3, [pc, #40]	; (1f958 <prvSetupTimerInterrupt+0x30>)
   1f92e:	2200      	movs	r2, #0
   1f930:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1f932:	4b0a      	ldr	r3, [pc, #40]	; (1f95c <prvSetupTimerInterrupt+0x34>)
   1f934:	2200      	movs	r2, #0
   1f936:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1f938:	4c09      	ldr	r4, [pc, #36]	; (1f960 <prvSetupTimerInterrupt+0x38>)
   1f93a:	4b0a      	ldr	r3, [pc, #40]	; (1f964 <prvSetupTimerInterrupt+0x3c>)
   1f93c:	4798      	blx	r3
   1f93e:	4b0a      	ldr	r3, [pc, #40]	; (1f968 <prvSetupTimerInterrupt+0x40>)
   1f940:	22fa      	movs	r2, #250	; 0xfa
   1f942:	0091      	lsls	r1, r2, #2
   1f944:	4798      	blx	r3
   1f946:	0003      	movs	r3, r0
   1f948:	3b01      	subs	r3, #1
   1f94a:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1f94c:	4b02      	ldr	r3, [pc, #8]	; (1f958 <prvSetupTimerInterrupt+0x30>)
   1f94e:	2207      	movs	r2, #7
   1f950:	601a      	str	r2, [r3, #0]
}
   1f952:	46c0      	nop			; (mov r8, r8)
   1f954:	46bd      	mov	sp, r7
   1f956:	bdb0      	pop	{r4, r5, r7, pc}
   1f958:	e000e010 	.word	0xe000e010
   1f95c:	e000e018 	.word	0xe000e018
   1f960:	e000e014 	.word	0xe000e014
   1f964:	0001f6d1 	.word	0x0001f6d1
   1f968:	00026ee5 	.word	0x00026ee5

0001f96c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1f96c:	b580      	push	{r7, lr}
   1f96e:	b084      	sub	sp, #16
   1f970:	af00      	add	r7, sp, #0
   1f972:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
   1f974:	4b07      	ldr	r3, [pc, #28]	; (1f994 <pvPortMalloc+0x28>)
   1f976:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
   1f978:	687b      	ldr	r3, [r7, #4]
   1f97a:	0018      	movs	r0, r3
   1f97c:	4b06      	ldr	r3, [pc, #24]	; (1f998 <pvPortMalloc+0x2c>)
   1f97e:	4798      	blx	r3
   1f980:	0003      	movs	r3, r0
   1f982:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1f984:	4b05      	ldr	r3, [pc, #20]	; (1f99c <pvPortMalloc+0x30>)
   1f986:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
   1f988:	68fb      	ldr	r3, [r7, #12]
}
   1f98a:	0018      	movs	r0, r3
   1f98c:	46bd      	mov	sp, r7
   1f98e:	b004      	add	sp, #16
   1f990:	bd80      	pop	{r7, pc}
   1f992:	46c0      	nop			; (mov r8, r8)
   1f994:	00020c61 	.word	0x00020c61
   1f998:	000296d9 	.word	0x000296d9
   1f99c:	00020c79 	.word	0x00020c79

0001f9a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1f9a0:	b580      	push	{r7, lr}
   1f9a2:	b082      	sub	sp, #8
   1f9a4:	af00      	add	r7, sp, #0
   1f9a6:	6078      	str	r0, [r7, #4]
	if( pv )
   1f9a8:	687b      	ldr	r3, [r7, #4]
   1f9aa:	2b00      	cmp	r3, #0
   1f9ac:	d007      	beq.n	1f9be <vPortFree+0x1e>
	{
		vTaskSuspendAll();
   1f9ae:	4b06      	ldr	r3, [pc, #24]	; (1f9c8 <vPortFree+0x28>)
   1f9b0:	4798      	blx	r3
		{
			free( pv );
   1f9b2:	687b      	ldr	r3, [r7, #4]
   1f9b4:	0018      	movs	r0, r3
   1f9b6:	4b05      	ldr	r3, [pc, #20]	; (1f9cc <vPortFree+0x2c>)
   1f9b8:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
   1f9ba:	4b05      	ldr	r3, [pc, #20]	; (1f9d0 <vPortFree+0x30>)
   1f9bc:	4798      	blx	r3
	}
}
   1f9be:	46c0      	nop			; (mov r8, r8)
   1f9c0:	46bd      	mov	sp, r7
   1f9c2:	b002      	add	sp, #8
   1f9c4:	bd80      	pop	{r7, pc}
   1f9c6:	46c0      	nop			; (mov r8, r8)
   1f9c8:	00020c61 	.word	0x00020c61
   1f9cc:	000296ed 	.word	0x000296ed
   1f9d0:	00020c79 	.word	0x00020c79

0001f9d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1f9d4:	b580      	push	{r7, lr}
   1f9d6:	b082      	sub	sp, #8
   1f9d8:	af00      	add	r7, sp, #0
   1f9da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f9dc:	687b      	ldr	r3, [r7, #4]
   1f9de:	3308      	adds	r3, #8
   1f9e0:	001a      	movs	r2, r3
   1f9e2:	687b      	ldr	r3, [r7, #4]
   1f9e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1f9e6:	687b      	ldr	r3, [r7, #4]
   1f9e8:	2201      	movs	r2, #1
   1f9ea:	4252      	negs	r2, r2
   1f9ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f9ee:	687b      	ldr	r3, [r7, #4]
   1f9f0:	3308      	adds	r3, #8
   1f9f2:	001a      	movs	r2, r3
   1f9f4:	687b      	ldr	r3, [r7, #4]
   1f9f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f9f8:	687b      	ldr	r3, [r7, #4]
   1f9fa:	3308      	adds	r3, #8
   1f9fc:	001a      	movs	r2, r3
   1f9fe:	687b      	ldr	r3, [r7, #4]
   1fa00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1fa02:	687b      	ldr	r3, [r7, #4]
   1fa04:	2200      	movs	r2, #0
   1fa06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1fa08:	46c0      	nop			; (mov r8, r8)
   1fa0a:	46bd      	mov	sp, r7
   1fa0c:	b002      	add	sp, #8
   1fa0e:	bd80      	pop	{r7, pc}

0001fa10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1fa10:	b580      	push	{r7, lr}
   1fa12:	b082      	sub	sp, #8
   1fa14:	af00      	add	r7, sp, #0
   1fa16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1fa18:	687b      	ldr	r3, [r7, #4]
   1fa1a:	2200      	movs	r2, #0
   1fa1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1fa1e:	46c0      	nop			; (mov r8, r8)
   1fa20:	46bd      	mov	sp, r7
   1fa22:	b002      	add	sp, #8
   1fa24:	bd80      	pop	{r7, pc}

0001fa26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1fa26:	b580      	push	{r7, lr}
   1fa28:	b084      	sub	sp, #16
   1fa2a:	af00      	add	r7, sp, #0
   1fa2c:	6078      	str	r0, [r7, #4]
   1fa2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1fa30:	687b      	ldr	r3, [r7, #4]
   1fa32:	685b      	ldr	r3, [r3, #4]
   1fa34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1fa36:	683b      	ldr	r3, [r7, #0]
   1fa38:	68fa      	ldr	r2, [r7, #12]
   1fa3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1fa3c:	68fb      	ldr	r3, [r7, #12]
   1fa3e:	689a      	ldr	r2, [r3, #8]
   1fa40:	683b      	ldr	r3, [r7, #0]
   1fa42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1fa44:	68fb      	ldr	r3, [r7, #12]
   1fa46:	689b      	ldr	r3, [r3, #8]
   1fa48:	683a      	ldr	r2, [r7, #0]
   1fa4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1fa4c:	68fb      	ldr	r3, [r7, #12]
   1fa4e:	683a      	ldr	r2, [r7, #0]
   1fa50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1fa52:	683b      	ldr	r3, [r7, #0]
   1fa54:	687a      	ldr	r2, [r7, #4]
   1fa56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1fa58:	687b      	ldr	r3, [r7, #4]
   1fa5a:	681b      	ldr	r3, [r3, #0]
   1fa5c:	1c5a      	adds	r2, r3, #1
   1fa5e:	687b      	ldr	r3, [r7, #4]
   1fa60:	601a      	str	r2, [r3, #0]
}
   1fa62:	46c0      	nop			; (mov r8, r8)
   1fa64:	46bd      	mov	sp, r7
   1fa66:	b004      	add	sp, #16
   1fa68:	bd80      	pop	{r7, pc}

0001fa6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1fa6a:	b580      	push	{r7, lr}
   1fa6c:	b084      	sub	sp, #16
   1fa6e:	af00      	add	r7, sp, #0
   1fa70:	6078      	str	r0, [r7, #4]
   1fa72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1fa74:	683b      	ldr	r3, [r7, #0]
   1fa76:	681b      	ldr	r3, [r3, #0]
   1fa78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1fa7a:	68bb      	ldr	r3, [r7, #8]
   1fa7c:	3301      	adds	r3, #1
   1fa7e:	d103      	bne.n	1fa88 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1fa80:	687b      	ldr	r3, [r7, #4]
   1fa82:	691b      	ldr	r3, [r3, #16]
   1fa84:	60fb      	str	r3, [r7, #12]
   1fa86:	e00c      	b.n	1faa2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1fa88:	687b      	ldr	r3, [r7, #4]
   1fa8a:	3308      	adds	r3, #8
   1fa8c:	60fb      	str	r3, [r7, #12]
   1fa8e:	e002      	b.n	1fa96 <vListInsert+0x2c>
   1fa90:	68fb      	ldr	r3, [r7, #12]
   1fa92:	685b      	ldr	r3, [r3, #4]
   1fa94:	60fb      	str	r3, [r7, #12]
   1fa96:	68fb      	ldr	r3, [r7, #12]
   1fa98:	685b      	ldr	r3, [r3, #4]
   1fa9a:	681a      	ldr	r2, [r3, #0]
   1fa9c:	68bb      	ldr	r3, [r7, #8]
   1fa9e:	429a      	cmp	r2, r3
   1faa0:	d9f6      	bls.n	1fa90 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1faa2:	68fb      	ldr	r3, [r7, #12]
   1faa4:	685a      	ldr	r2, [r3, #4]
   1faa6:	683b      	ldr	r3, [r7, #0]
   1faa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1faaa:	683b      	ldr	r3, [r7, #0]
   1faac:	685b      	ldr	r3, [r3, #4]
   1faae:	683a      	ldr	r2, [r7, #0]
   1fab0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1fab2:	683b      	ldr	r3, [r7, #0]
   1fab4:	68fa      	ldr	r2, [r7, #12]
   1fab6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1fab8:	68fb      	ldr	r3, [r7, #12]
   1faba:	683a      	ldr	r2, [r7, #0]
   1fabc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1fabe:	683b      	ldr	r3, [r7, #0]
   1fac0:	687a      	ldr	r2, [r7, #4]
   1fac2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1fac4:	687b      	ldr	r3, [r7, #4]
   1fac6:	681b      	ldr	r3, [r3, #0]
   1fac8:	1c5a      	adds	r2, r3, #1
   1faca:	687b      	ldr	r3, [r7, #4]
   1facc:	601a      	str	r2, [r3, #0]
}
   1face:	46c0      	nop			; (mov r8, r8)
   1fad0:	46bd      	mov	sp, r7
   1fad2:	b004      	add	sp, #16
   1fad4:	bd80      	pop	{r7, pc}

0001fad6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1fad6:	b580      	push	{r7, lr}
   1fad8:	b084      	sub	sp, #16
   1fada:	af00      	add	r7, sp, #0
   1fadc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1fade:	687b      	ldr	r3, [r7, #4]
   1fae0:	691b      	ldr	r3, [r3, #16]
   1fae2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1fae4:	687b      	ldr	r3, [r7, #4]
   1fae6:	685b      	ldr	r3, [r3, #4]
   1fae8:	687a      	ldr	r2, [r7, #4]
   1faea:	6892      	ldr	r2, [r2, #8]
   1faec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1faee:	687b      	ldr	r3, [r7, #4]
   1faf0:	689b      	ldr	r3, [r3, #8]
   1faf2:	687a      	ldr	r2, [r7, #4]
   1faf4:	6852      	ldr	r2, [r2, #4]
   1faf6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1faf8:	68fb      	ldr	r3, [r7, #12]
   1fafa:	685a      	ldr	r2, [r3, #4]
   1fafc:	687b      	ldr	r3, [r7, #4]
   1fafe:	429a      	cmp	r2, r3
   1fb00:	d103      	bne.n	1fb0a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1fb02:	687b      	ldr	r3, [r7, #4]
   1fb04:	689a      	ldr	r2, [r3, #8]
   1fb06:	68fb      	ldr	r3, [r7, #12]
   1fb08:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1fb0a:	687b      	ldr	r3, [r7, #4]
   1fb0c:	2200      	movs	r2, #0
   1fb0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1fb10:	68fb      	ldr	r3, [r7, #12]
   1fb12:	681b      	ldr	r3, [r3, #0]
   1fb14:	1e5a      	subs	r2, r3, #1
   1fb16:	68fb      	ldr	r3, [r7, #12]
   1fb18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1fb1a:	68fb      	ldr	r3, [r7, #12]
   1fb1c:	681b      	ldr	r3, [r3, #0]
}
   1fb1e:	0018      	movs	r0, r3
   1fb20:	46bd      	mov	sp, r7
   1fb22:	b004      	add	sp, #16
   1fb24:	bd80      	pop	{r7, pc}
	...

0001fb28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1fb28:	b580      	push	{r7, lr}
   1fb2a:	b084      	sub	sp, #16
   1fb2c:	af00      	add	r7, sp, #0
   1fb2e:	6078      	str	r0, [r7, #4]
   1fb30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fb32:	687b      	ldr	r3, [r7, #4]
   1fb34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1fb36:	68fb      	ldr	r3, [r7, #12]
   1fb38:	2b00      	cmp	r3, #0
   1fb3a:	d101      	bne.n	1fb40 <xQueueGenericReset+0x18>
   1fb3c:	b672      	cpsid	i
   1fb3e:	e7fe      	b.n	1fb3e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1fb40:	4b23      	ldr	r3, [pc, #140]	; (1fbd0 <xQueueGenericReset+0xa8>)
   1fb42:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1fb44:	68fb      	ldr	r3, [r7, #12]
   1fb46:	681a      	ldr	r2, [r3, #0]
   1fb48:	68fb      	ldr	r3, [r7, #12]
   1fb4a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1fb4c:	68fb      	ldr	r3, [r7, #12]
   1fb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fb50:	434b      	muls	r3, r1
   1fb52:	18d2      	adds	r2, r2, r3
   1fb54:	68fb      	ldr	r3, [r7, #12]
   1fb56:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1fb58:	68fb      	ldr	r3, [r7, #12]
   1fb5a:	2200      	movs	r2, #0
   1fb5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1fb5e:	68fb      	ldr	r3, [r7, #12]
   1fb60:	681a      	ldr	r2, [r3, #0]
   1fb62:	68fb      	ldr	r3, [r7, #12]
   1fb64:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1fb66:	68fb      	ldr	r3, [r7, #12]
   1fb68:	681a      	ldr	r2, [r3, #0]
   1fb6a:	68fb      	ldr	r3, [r7, #12]
   1fb6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fb6e:	1e59      	subs	r1, r3, #1
   1fb70:	68fb      	ldr	r3, [r7, #12]
   1fb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fb74:	434b      	muls	r3, r1
   1fb76:	18d2      	adds	r2, r2, r3
   1fb78:	68fb      	ldr	r3, [r7, #12]
   1fb7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1fb7c:	68fb      	ldr	r3, [r7, #12]
   1fb7e:	2244      	movs	r2, #68	; 0x44
   1fb80:	21ff      	movs	r1, #255	; 0xff
   1fb82:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1fb84:	68fb      	ldr	r3, [r7, #12]
   1fb86:	2245      	movs	r2, #69	; 0x45
   1fb88:	21ff      	movs	r1, #255	; 0xff
   1fb8a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1fb8c:	683b      	ldr	r3, [r7, #0]
   1fb8e:	2b00      	cmp	r3, #0
   1fb90:	d10d      	bne.n	1fbae <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fb92:	68fb      	ldr	r3, [r7, #12]
   1fb94:	691b      	ldr	r3, [r3, #16]
   1fb96:	2b00      	cmp	r3, #0
   1fb98:	d013      	beq.n	1fbc2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1fb9a:	68fb      	ldr	r3, [r7, #12]
   1fb9c:	3310      	adds	r3, #16
   1fb9e:	0018      	movs	r0, r3
   1fba0:	4b0c      	ldr	r3, [pc, #48]	; (1fbd4 <xQueueGenericReset+0xac>)
   1fba2:	4798      	blx	r3
   1fba4:	1e03      	subs	r3, r0, #0
   1fba6:	d00c      	beq.n	1fbc2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1fba8:	4b0b      	ldr	r3, [pc, #44]	; (1fbd8 <xQueueGenericReset+0xb0>)
   1fbaa:	4798      	blx	r3
   1fbac:	e009      	b.n	1fbc2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1fbae:	68fb      	ldr	r3, [r7, #12]
   1fbb0:	3310      	adds	r3, #16
   1fbb2:	0018      	movs	r0, r3
   1fbb4:	4b09      	ldr	r3, [pc, #36]	; (1fbdc <xQueueGenericReset+0xb4>)
   1fbb6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1fbb8:	68fb      	ldr	r3, [r7, #12]
   1fbba:	3324      	adds	r3, #36	; 0x24
   1fbbc:	0018      	movs	r0, r3
   1fbbe:	4b07      	ldr	r3, [pc, #28]	; (1fbdc <xQueueGenericReset+0xb4>)
   1fbc0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1fbc2:	4b07      	ldr	r3, [pc, #28]	; (1fbe0 <xQueueGenericReset+0xb8>)
   1fbc4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1fbc6:	2301      	movs	r3, #1
}
   1fbc8:	0018      	movs	r0, r3
   1fbca:	46bd      	mov	sp, r7
   1fbcc:	b004      	add	sp, #16
   1fbce:	bd80      	pop	{r7, pc}
   1fbd0:	0001f831 	.word	0x0001f831
   1fbd4:	00021099 	.word	0x00021099
   1fbd8:	0001f811 	.word	0x0001f811
   1fbdc:	0001f9d5 	.word	0x0001f9d5
   1fbe0:	0001f855 	.word	0x0001f855

0001fbe4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1fbe4:	b590      	push	{r4, r7, lr}
   1fbe6:	b08b      	sub	sp, #44	; 0x2c
   1fbe8:	af02      	add	r7, sp, #8
   1fbea:	60f8      	str	r0, [r7, #12]
   1fbec:	60b9      	str	r1, [r7, #8]
   1fbee:	1dfb      	adds	r3, r7, #7
   1fbf0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1fbf2:	68fb      	ldr	r3, [r7, #12]
   1fbf4:	2b00      	cmp	r3, #0
   1fbf6:	d101      	bne.n	1fbfc <xQueueGenericCreate+0x18>
   1fbf8:	b672      	cpsid	i
   1fbfa:	e7fe      	b.n	1fbfa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1fbfc:	68bb      	ldr	r3, [r7, #8]
   1fbfe:	2b00      	cmp	r3, #0
   1fc00:	d102      	bne.n	1fc08 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1fc02:	2300      	movs	r3, #0
   1fc04:	61fb      	str	r3, [r7, #28]
   1fc06:	e003      	b.n	1fc10 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fc08:	68fb      	ldr	r3, [r7, #12]
   1fc0a:	68ba      	ldr	r2, [r7, #8]
   1fc0c:	4353      	muls	r3, r2
   1fc0e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1fc10:	69fb      	ldr	r3, [r7, #28]
   1fc12:	334c      	adds	r3, #76	; 0x4c
   1fc14:	0018      	movs	r0, r3
   1fc16:	4b0c      	ldr	r3, [pc, #48]	; (1fc48 <xQueueGenericCreate+0x64>)
   1fc18:	4798      	blx	r3
   1fc1a:	0003      	movs	r3, r0
   1fc1c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1fc1e:	69bb      	ldr	r3, [r7, #24]
   1fc20:	2b00      	cmp	r3, #0
   1fc22:	d00c      	beq.n	1fc3e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1fc24:	69bb      	ldr	r3, [r7, #24]
   1fc26:	334c      	adds	r3, #76	; 0x4c
   1fc28:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1fc2a:	1dfb      	adds	r3, r7, #7
   1fc2c:	781c      	ldrb	r4, [r3, #0]
   1fc2e:	697a      	ldr	r2, [r7, #20]
   1fc30:	68b9      	ldr	r1, [r7, #8]
   1fc32:	68f8      	ldr	r0, [r7, #12]
   1fc34:	69bb      	ldr	r3, [r7, #24]
   1fc36:	9300      	str	r3, [sp, #0]
   1fc38:	0023      	movs	r3, r4
   1fc3a:	4c04      	ldr	r4, [pc, #16]	; (1fc4c <xQueueGenericCreate+0x68>)
   1fc3c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   1fc3e:	69bb      	ldr	r3, [r7, #24]
	}
   1fc40:	0018      	movs	r0, r3
   1fc42:	46bd      	mov	sp, r7
   1fc44:	b009      	add	sp, #36	; 0x24
   1fc46:	bd90      	pop	{r4, r7, pc}
   1fc48:	0001f96d 	.word	0x0001f96d
   1fc4c:	0001fc51 	.word	0x0001fc51

0001fc50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1fc50:	b580      	push	{r7, lr}
   1fc52:	b084      	sub	sp, #16
   1fc54:	af00      	add	r7, sp, #0
   1fc56:	60f8      	str	r0, [r7, #12]
   1fc58:	60b9      	str	r1, [r7, #8]
   1fc5a:	607a      	str	r2, [r7, #4]
   1fc5c:	001a      	movs	r2, r3
   1fc5e:	1cfb      	adds	r3, r7, #3
   1fc60:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1fc62:	68bb      	ldr	r3, [r7, #8]
   1fc64:	2b00      	cmp	r3, #0
   1fc66:	d103      	bne.n	1fc70 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1fc68:	69bb      	ldr	r3, [r7, #24]
   1fc6a:	69ba      	ldr	r2, [r7, #24]
   1fc6c:	601a      	str	r2, [r3, #0]
   1fc6e:	e002      	b.n	1fc76 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1fc70:	69bb      	ldr	r3, [r7, #24]
   1fc72:	687a      	ldr	r2, [r7, #4]
   1fc74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1fc76:	69bb      	ldr	r3, [r7, #24]
   1fc78:	68fa      	ldr	r2, [r7, #12]
   1fc7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1fc7c:	69bb      	ldr	r3, [r7, #24]
   1fc7e:	68ba      	ldr	r2, [r7, #8]
   1fc80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1fc82:	69bb      	ldr	r3, [r7, #24]
   1fc84:	2101      	movs	r1, #1
   1fc86:	0018      	movs	r0, r3
   1fc88:	4b04      	ldr	r3, [pc, #16]	; (1fc9c <prvInitialiseNewQueue+0x4c>)
   1fc8a:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1fc8c:	69bb      	ldr	r3, [r7, #24]
   1fc8e:	2200      	movs	r2, #0
   1fc90:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1fc92:	46c0      	nop			; (mov r8, r8)
   1fc94:	46bd      	mov	sp, r7
   1fc96:	b004      	add	sp, #16
   1fc98:	bd80      	pop	{r7, pc}
   1fc9a:	46c0      	nop			; (mov r8, r8)
   1fc9c:	0001fb29 	.word	0x0001fb29

0001fca0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1fca0:	b580      	push	{r7, lr}
   1fca2:	b08a      	sub	sp, #40	; 0x28
   1fca4:	af00      	add	r7, sp, #0
   1fca6:	60f8      	str	r0, [r7, #12]
   1fca8:	60b9      	str	r1, [r7, #8]
   1fcaa:	607a      	str	r2, [r7, #4]
   1fcac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1fcae:	2300      	movs	r3, #0
   1fcb0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fcb2:	68fb      	ldr	r3, [r7, #12]
   1fcb4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1fcb6:	6a3b      	ldr	r3, [r7, #32]
   1fcb8:	2b00      	cmp	r3, #0
   1fcba:	d101      	bne.n	1fcc0 <xQueueGenericSend+0x20>
   1fcbc:	b672      	cpsid	i
   1fcbe:	e7fe      	b.n	1fcbe <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fcc0:	68bb      	ldr	r3, [r7, #8]
   1fcc2:	2b00      	cmp	r3, #0
   1fcc4:	d103      	bne.n	1fcce <xQueueGenericSend+0x2e>
   1fcc6:	6a3b      	ldr	r3, [r7, #32]
   1fcc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fcca:	2b00      	cmp	r3, #0
   1fccc:	d101      	bne.n	1fcd2 <xQueueGenericSend+0x32>
   1fcce:	2301      	movs	r3, #1
   1fcd0:	e000      	b.n	1fcd4 <xQueueGenericSend+0x34>
   1fcd2:	2300      	movs	r3, #0
   1fcd4:	2b00      	cmp	r3, #0
   1fcd6:	d101      	bne.n	1fcdc <xQueueGenericSend+0x3c>
   1fcd8:	b672      	cpsid	i
   1fcda:	e7fe      	b.n	1fcda <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1fcdc:	683b      	ldr	r3, [r7, #0]
   1fcde:	2b02      	cmp	r3, #2
   1fce0:	d103      	bne.n	1fcea <xQueueGenericSend+0x4a>
   1fce2:	6a3b      	ldr	r3, [r7, #32]
   1fce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fce6:	2b01      	cmp	r3, #1
   1fce8:	d101      	bne.n	1fcee <xQueueGenericSend+0x4e>
   1fcea:	2301      	movs	r3, #1
   1fcec:	e000      	b.n	1fcf0 <xQueueGenericSend+0x50>
   1fcee:	2300      	movs	r3, #0
   1fcf0:	2b00      	cmp	r3, #0
   1fcf2:	d101      	bne.n	1fcf8 <xQueueGenericSend+0x58>
   1fcf4:	b672      	cpsid	i
   1fcf6:	e7fe      	b.n	1fcf6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1fcf8:	4b53      	ldr	r3, [pc, #332]	; (1fe48 <xQueueGenericSend+0x1a8>)
   1fcfa:	4798      	blx	r3
   1fcfc:	1e03      	subs	r3, r0, #0
   1fcfe:	d102      	bne.n	1fd06 <xQueueGenericSend+0x66>
   1fd00:	687b      	ldr	r3, [r7, #4]
   1fd02:	2b00      	cmp	r3, #0
   1fd04:	d101      	bne.n	1fd0a <xQueueGenericSend+0x6a>
   1fd06:	2301      	movs	r3, #1
   1fd08:	e000      	b.n	1fd0c <xQueueGenericSend+0x6c>
   1fd0a:	2300      	movs	r3, #0
   1fd0c:	2b00      	cmp	r3, #0
   1fd0e:	d101      	bne.n	1fd14 <xQueueGenericSend+0x74>
   1fd10:	b672      	cpsid	i
   1fd12:	e7fe      	b.n	1fd12 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1fd14:	4b4d      	ldr	r3, [pc, #308]	; (1fe4c <xQueueGenericSend+0x1ac>)
   1fd16:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1fd18:	6a3b      	ldr	r3, [r7, #32]
   1fd1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fd1c:	6a3b      	ldr	r3, [r7, #32]
   1fd1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fd20:	429a      	cmp	r2, r3
   1fd22:	d302      	bcc.n	1fd2a <xQueueGenericSend+0x8a>
   1fd24:	683b      	ldr	r3, [r7, #0]
   1fd26:	2b02      	cmp	r3, #2
   1fd28:	d12d      	bne.n	1fd86 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1fd2a:	683a      	ldr	r2, [r7, #0]
   1fd2c:	68b9      	ldr	r1, [r7, #8]
   1fd2e:	6a3b      	ldr	r3, [r7, #32]
   1fd30:	0018      	movs	r0, r3
   1fd32:	4b47      	ldr	r3, [pc, #284]	; (1fe50 <xQueueGenericSend+0x1b0>)
   1fd34:	4798      	blx	r3
   1fd36:	0003      	movs	r3, r0
   1fd38:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1fd3a:	6a3b      	ldr	r3, [r7, #32]
   1fd3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fd3e:	2b00      	cmp	r3, #0
   1fd40:	d00a      	beq.n	1fd58 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1fd42:	683a      	ldr	r2, [r7, #0]
   1fd44:	6a3b      	ldr	r3, [r7, #32]
   1fd46:	0011      	movs	r1, r2
   1fd48:	0018      	movs	r0, r3
   1fd4a:	4b42      	ldr	r3, [pc, #264]	; (1fe54 <xQueueGenericSend+0x1b4>)
   1fd4c:	4798      	blx	r3
   1fd4e:	1e03      	subs	r3, r0, #0
   1fd50:	d015      	beq.n	1fd7e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1fd52:	4b41      	ldr	r3, [pc, #260]	; (1fe58 <xQueueGenericSend+0x1b8>)
   1fd54:	4798      	blx	r3
   1fd56:	e012      	b.n	1fd7e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fd58:	6a3b      	ldr	r3, [r7, #32]
   1fd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fd5c:	2b00      	cmp	r3, #0
   1fd5e:	d009      	beq.n	1fd74 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fd60:	6a3b      	ldr	r3, [r7, #32]
   1fd62:	3324      	adds	r3, #36	; 0x24
   1fd64:	0018      	movs	r0, r3
   1fd66:	4b3d      	ldr	r3, [pc, #244]	; (1fe5c <xQueueGenericSend+0x1bc>)
   1fd68:	4798      	blx	r3
   1fd6a:	1e03      	subs	r3, r0, #0
   1fd6c:	d007      	beq.n	1fd7e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1fd6e:	4b3a      	ldr	r3, [pc, #232]	; (1fe58 <xQueueGenericSend+0x1b8>)
   1fd70:	4798      	blx	r3
   1fd72:	e004      	b.n	1fd7e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1fd74:	69fb      	ldr	r3, [r7, #28]
   1fd76:	2b00      	cmp	r3, #0
   1fd78:	d001      	beq.n	1fd7e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1fd7a:	4b37      	ldr	r3, [pc, #220]	; (1fe58 <xQueueGenericSend+0x1b8>)
   1fd7c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1fd7e:	4b38      	ldr	r3, [pc, #224]	; (1fe60 <xQueueGenericSend+0x1c0>)
   1fd80:	4798      	blx	r3
				return pdPASS;
   1fd82:	2301      	movs	r3, #1
   1fd84:	e05c      	b.n	1fe40 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1fd86:	687b      	ldr	r3, [r7, #4]
   1fd88:	2b00      	cmp	r3, #0
   1fd8a:	d103      	bne.n	1fd94 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1fd8c:	4b34      	ldr	r3, [pc, #208]	; (1fe60 <xQueueGenericSend+0x1c0>)
   1fd8e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1fd90:	2300      	movs	r3, #0
   1fd92:	e055      	b.n	1fe40 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fd96:	2b00      	cmp	r3, #0
   1fd98:	d106      	bne.n	1fda8 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1fd9a:	2314      	movs	r3, #20
   1fd9c:	18fb      	adds	r3, r7, r3
   1fd9e:	0018      	movs	r0, r3
   1fda0:	4b30      	ldr	r3, [pc, #192]	; (1fe64 <xQueueGenericSend+0x1c4>)
   1fda2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1fda4:	2301      	movs	r3, #1
   1fda6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1fda8:	4b2d      	ldr	r3, [pc, #180]	; (1fe60 <xQueueGenericSend+0x1c0>)
   1fdaa:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1fdac:	4b2e      	ldr	r3, [pc, #184]	; (1fe68 <xQueueGenericSend+0x1c8>)
   1fdae:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1fdb0:	4b26      	ldr	r3, [pc, #152]	; (1fe4c <xQueueGenericSend+0x1ac>)
   1fdb2:	4798      	blx	r3
   1fdb4:	6a3b      	ldr	r3, [r7, #32]
   1fdb6:	2244      	movs	r2, #68	; 0x44
   1fdb8:	5c9b      	ldrb	r3, [r3, r2]
   1fdba:	b25b      	sxtb	r3, r3
   1fdbc:	3301      	adds	r3, #1
   1fdbe:	d103      	bne.n	1fdc8 <xQueueGenericSend+0x128>
   1fdc0:	6a3b      	ldr	r3, [r7, #32]
   1fdc2:	2244      	movs	r2, #68	; 0x44
   1fdc4:	2100      	movs	r1, #0
   1fdc6:	5499      	strb	r1, [r3, r2]
   1fdc8:	6a3b      	ldr	r3, [r7, #32]
   1fdca:	2245      	movs	r2, #69	; 0x45
   1fdcc:	5c9b      	ldrb	r3, [r3, r2]
   1fdce:	b25b      	sxtb	r3, r3
   1fdd0:	3301      	adds	r3, #1
   1fdd2:	d103      	bne.n	1fddc <xQueueGenericSend+0x13c>
   1fdd4:	6a3b      	ldr	r3, [r7, #32]
   1fdd6:	2245      	movs	r2, #69	; 0x45
   1fdd8:	2100      	movs	r1, #0
   1fdda:	5499      	strb	r1, [r3, r2]
   1fddc:	4b20      	ldr	r3, [pc, #128]	; (1fe60 <xQueueGenericSend+0x1c0>)
   1fdde:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1fde0:	1d3a      	adds	r2, r7, #4
   1fde2:	2314      	movs	r3, #20
   1fde4:	18fb      	adds	r3, r7, r3
   1fde6:	0011      	movs	r1, r2
   1fde8:	0018      	movs	r0, r3
   1fdea:	4b20      	ldr	r3, [pc, #128]	; (1fe6c <xQueueGenericSend+0x1cc>)
   1fdec:	4798      	blx	r3
   1fdee:	1e03      	subs	r3, r0, #0
   1fdf0:	d11f      	bne.n	1fe32 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1fdf2:	6a3b      	ldr	r3, [r7, #32]
   1fdf4:	0018      	movs	r0, r3
   1fdf6:	4b1e      	ldr	r3, [pc, #120]	; (1fe70 <xQueueGenericSend+0x1d0>)
   1fdf8:	4798      	blx	r3
   1fdfa:	1e03      	subs	r3, r0, #0
   1fdfc:	d012      	beq.n	1fe24 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1fdfe:	6a3b      	ldr	r3, [r7, #32]
   1fe00:	3310      	adds	r3, #16
   1fe02:	687a      	ldr	r2, [r7, #4]
   1fe04:	0011      	movs	r1, r2
   1fe06:	0018      	movs	r0, r3
   1fe08:	4b1a      	ldr	r3, [pc, #104]	; (1fe74 <xQueueGenericSend+0x1d4>)
   1fe0a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1fe0c:	6a3b      	ldr	r3, [r7, #32]
   1fe0e:	0018      	movs	r0, r3
   1fe10:	4b19      	ldr	r3, [pc, #100]	; (1fe78 <xQueueGenericSend+0x1d8>)
   1fe12:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1fe14:	4b19      	ldr	r3, [pc, #100]	; (1fe7c <xQueueGenericSend+0x1dc>)
   1fe16:	4798      	blx	r3
   1fe18:	1e03      	subs	r3, r0, #0
   1fe1a:	d000      	beq.n	1fe1e <xQueueGenericSend+0x17e>
   1fe1c:	e77a      	b.n	1fd14 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1fe1e:	4b0e      	ldr	r3, [pc, #56]	; (1fe58 <xQueueGenericSend+0x1b8>)
   1fe20:	4798      	blx	r3
   1fe22:	e777      	b.n	1fd14 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1fe24:	6a3b      	ldr	r3, [r7, #32]
   1fe26:	0018      	movs	r0, r3
   1fe28:	4b13      	ldr	r3, [pc, #76]	; (1fe78 <xQueueGenericSend+0x1d8>)
   1fe2a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1fe2c:	4b13      	ldr	r3, [pc, #76]	; (1fe7c <xQueueGenericSend+0x1dc>)
   1fe2e:	4798      	blx	r3
   1fe30:	e770      	b.n	1fd14 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1fe32:	6a3b      	ldr	r3, [r7, #32]
   1fe34:	0018      	movs	r0, r3
   1fe36:	4b10      	ldr	r3, [pc, #64]	; (1fe78 <xQueueGenericSend+0x1d8>)
   1fe38:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1fe3a:	4b10      	ldr	r3, [pc, #64]	; (1fe7c <xQueueGenericSend+0x1dc>)
   1fe3c:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1fe3e:	2300      	movs	r3, #0
		}
	}
}
   1fe40:	0018      	movs	r0, r3
   1fe42:	46bd      	mov	sp, r7
   1fe44:	b00a      	add	sp, #40	; 0x28
   1fe46:	bd80      	pop	{r7, pc}
   1fe48:	000213d1 	.word	0x000213d1
   1fe4c:	0001f831 	.word	0x0001f831
   1fe50:	00020361 	.word	0x00020361
   1fe54:	00020665 	.word	0x00020665
   1fe58:	0001f811 	.word	0x0001f811
   1fe5c:	00021099 	.word	0x00021099
   1fe60:	0001f855 	.word	0x0001f855
   1fe64:	00021159 	.word	0x00021159
   1fe68:	00020c61 	.word	0x00020c61
   1fe6c:	00021181 	.word	0x00021181
   1fe70:	000205b5 	.word	0x000205b5
   1fe74:	00021001 	.word	0x00021001
   1fe78:	00020491 	.word	0x00020491
   1fe7c:	00020c79 	.word	0x00020c79

0001fe80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1fe80:	b580      	push	{r7, lr}
   1fe82:	b088      	sub	sp, #32
   1fe84:	af00      	add	r7, sp, #0
   1fe86:	60f8      	str	r0, [r7, #12]
   1fe88:	60b9      	str	r1, [r7, #8]
   1fe8a:	607a      	str	r2, [r7, #4]
   1fe8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fe8e:	68fb      	ldr	r3, [r7, #12]
   1fe90:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1fe92:	69bb      	ldr	r3, [r7, #24]
   1fe94:	2b00      	cmp	r3, #0
   1fe96:	d101      	bne.n	1fe9c <xQueueGenericSendFromISR+0x1c>
   1fe98:	b672      	cpsid	i
   1fe9a:	e7fe      	b.n	1fe9a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fe9c:	68bb      	ldr	r3, [r7, #8]
   1fe9e:	2b00      	cmp	r3, #0
   1fea0:	d103      	bne.n	1feaa <xQueueGenericSendFromISR+0x2a>
   1fea2:	69bb      	ldr	r3, [r7, #24]
   1fea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fea6:	2b00      	cmp	r3, #0
   1fea8:	d101      	bne.n	1feae <xQueueGenericSendFromISR+0x2e>
   1feaa:	2301      	movs	r3, #1
   1feac:	e000      	b.n	1feb0 <xQueueGenericSendFromISR+0x30>
   1feae:	2300      	movs	r3, #0
   1feb0:	2b00      	cmp	r3, #0
   1feb2:	d101      	bne.n	1feb8 <xQueueGenericSendFromISR+0x38>
   1feb4:	b672      	cpsid	i
   1feb6:	e7fe      	b.n	1feb6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1feb8:	683b      	ldr	r3, [r7, #0]
   1feba:	2b02      	cmp	r3, #2
   1febc:	d103      	bne.n	1fec6 <xQueueGenericSendFromISR+0x46>
   1febe:	69bb      	ldr	r3, [r7, #24]
   1fec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fec2:	2b01      	cmp	r3, #1
   1fec4:	d101      	bne.n	1feca <xQueueGenericSendFromISR+0x4a>
   1fec6:	2301      	movs	r3, #1
   1fec8:	e000      	b.n	1fecc <xQueueGenericSendFromISR+0x4c>
   1feca:	2300      	movs	r3, #0
   1fecc:	2b00      	cmp	r3, #0
   1fece:	d101      	bne.n	1fed4 <xQueueGenericSendFromISR+0x54>
   1fed0:	b672      	cpsid	i
   1fed2:	e7fe      	b.n	1fed2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1fed4:	4b2d      	ldr	r3, [pc, #180]	; (1ff8c <xQueueGenericSendFromISR+0x10c>)
   1fed6:	4798      	blx	r3
   1fed8:	0003      	movs	r3, r0
   1feda:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1fedc:	69bb      	ldr	r3, [r7, #24]
   1fede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fee0:	69bb      	ldr	r3, [r7, #24]
   1fee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fee4:	429a      	cmp	r2, r3
   1fee6:	d302      	bcc.n	1feee <xQueueGenericSendFromISR+0x6e>
   1fee8:	683b      	ldr	r3, [r7, #0]
   1feea:	2b02      	cmp	r3, #2
   1feec:	d142      	bne.n	1ff74 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1feee:	2313      	movs	r3, #19
   1fef0:	18fb      	adds	r3, r7, r3
   1fef2:	69ba      	ldr	r2, [r7, #24]
   1fef4:	2145      	movs	r1, #69	; 0x45
   1fef6:	5c52      	ldrb	r2, [r2, r1]
   1fef8:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1fefa:	683a      	ldr	r2, [r7, #0]
   1fefc:	68b9      	ldr	r1, [r7, #8]
   1fefe:	69bb      	ldr	r3, [r7, #24]
   1ff00:	0018      	movs	r0, r3
   1ff02:	4b23      	ldr	r3, [pc, #140]	; (1ff90 <xQueueGenericSendFromISR+0x110>)
   1ff04:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1ff06:	2313      	movs	r3, #19
   1ff08:	18fb      	adds	r3, r7, r3
   1ff0a:	781b      	ldrb	r3, [r3, #0]
   1ff0c:	b25b      	sxtb	r3, r3
   1ff0e:	3301      	adds	r3, #1
   1ff10:	d124      	bne.n	1ff5c <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ff12:	69bb      	ldr	r3, [r7, #24]
   1ff14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ff16:	2b00      	cmp	r3, #0
   1ff18:	d00e      	beq.n	1ff38 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1ff1a:	683a      	ldr	r2, [r7, #0]
   1ff1c:	69bb      	ldr	r3, [r7, #24]
   1ff1e:	0011      	movs	r1, r2
   1ff20:	0018      	movs	r0, r3
   1ff22:	4b1c      	ldr	r3, [pc, #112]	; (1ff94 <xQueueGenericSendFromISR+0x114>)
   1ff24:	4798      	blx	r3
   1ff26:	1e03      	subs	r3, r0, #0
   1ff28:	d021      	beq.n	1ff6e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1ff2a:	687b      	ldr	r3, [r7, #4]
   1ff2c:	2b00      	cmp	r3, #0
   1ff2e:	d01e      	beq.n	1ff6e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1ff30:	687b      	ldr	r3, [r7, #4]
   1ff32:	2201      	movs	r2, #1
   1ff34:	601a      	str	r2, [r3, #0]
   1ff36:	e01a      	b.n	1ff6e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ff38:	69bb      	ldr	r3, [r7, #24]
   1ff3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ff3c:	2b00      	cmp	r3, #0
   1ff3e:	d016      	beq.n	1ff6e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ff40:	69bb      	ldr	r3, [r7, #24]
   1ff42:	3324      	adds	r3, #36	; 0x24
   1ff44:	0018      	movs	r0, r3
   1ff46:	4b14      	ldr	r3, [pc, #80]	; (1ff98 <xQueueGenericSendFromISR+0x118>)
   1ff48:	4798      	blx	r3
   1ff4a:	1e03      	subs	r3, r0, #0
   1ff4c:	d00f      	beq.n	1ff6e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1ff4e:	687b      	ldr	r3, [r7, #4]
   1ff50:	2b00      	cmp	r3, #0
   1ff52:	d00c      	beq.n	1ff6e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1ff54:	687b      	ldr	r3, [r7, #4]
   1ff56:	2201      	movs	r2, #1
   1ff58:	601a      	str	r2, [r3, #0]
   1ff5a:	e008      	b.n	1ff6e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ff5c:	2313      	movs	r3, #19
   1ff5e:	18fb      	adds	r3, r7, r3
   1ff60:	781b      	ldrb	r3, [r3, #0]
   1ff62:	3301      	adds	r3, #1
   1ff64:	b2db      	uxtb	r3, r3
   1ff66:	b259      	sxtb	r1, r3
   1ff68:	69bb      	ldr	r3, [r7, #24]
   1ff6a:	2245      	movs	r2, #69	; 0x45
   1ff6c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1ff6e:	2301      	movs	r3, #1
   1ff70:	61fb      	str	r3, [r7, #28]
		{
   1ff72:	e001      	b.n	1ff78 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1ff74:	2300      	movs	r3, #0
   1ff76:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1ff78:	697b      	ldr	r3, [r7, #20]
   1ff7a:	0018      	movs	r0, r3
   1ff7c:	4b07      	ldr	r3, [pc, #28]	; (1ff9c <xQueueGenericSendFromISR+0x11c>)
   1ff7e:	4798      	blx	r3

	return xReturn;
   1ff80:	69fb      	ldr	r3, [r7, #28]
}
   1ff82:	0018      	movs	r0, r3
   1ff84:	46bd      	mov	sp, r7
   1ff86:	b008      	add	sp, #32
   1ff88:	bd80      	pop	{r7, pc}
   1ff8a:	46c0      	nop			; (mov r8, r8)
   1ff8c:	0001f885 	.word	0x0001f885
   1ff90:	00020361 	.word	0x00020361
   1ff94:	00020665 	.word	0x00020665
   1ff98:	00021099 	.word	0x00021099
   1ff9c:	0001f891 	.word	0x0001f891

0001ffa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1ffa0:	b580      	push	{r7, lr}
   1ffa2:	b08a      	sub	sp, #40	; 0x28
   1ffa4:	af00      	add	r7, sp, #0
   1ffa6:	60f8      	str	r0, [r7, #12]
   1ffa8:	60b9      	str	r1, [r7, #8]
   1ffaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1ffac:	2300      	movs	r3, #0
   1ffae:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ffb0:	68fb      	ldr	r3, [r7, #12]
   1ffb2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1ffb4:	6a3b      	ldr	r3, [r7, #32]
   1ffb6:	2b00      	cmp	r3, #0
   1ffb8:	d101      	bne.n	1ffbe <xQueueReceive+0x1e>
   1ffba:	b672      	cpsid	i
   1ffbc:	e7fe      	b.n	1ffbc <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ffbe:	68bb      	ldr	r3, [r7, #8]
   1ffc0:	2b00      	cmp	r3, #0
   1ffc2:	d103      	bne.n	1ffcc <xQueueReceive+0x2c>
   1ffc4:	6a3b      	ldr	r3, [r7, #32]
   1ffc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ffc8:	2b00      	cmp	r3, #0
   1ffca:	d101      	bne.n	1ffd0 <xQueueReceive+0x30>
   1ffcc:	2301      	movs	r3, #1
   1ffce:	e000      	b.n	1ffd2 <xQueueReceive+0x32>
   1ffd0:	2300      	movs	r3, #0
   1ffd2:	2b00      	cmp	r3, #0
   1ffd4:	d101      	bne.n	1ffda <xQueueReceive+0x3a>
   1ffd6:	b672      	cpsid	i
   1ffd8:	e7fe      	b.n	1ffd8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ffda:	4b4c      	ldr	r3, [pc, #304]	; (2010c <xQueueReceive+0x16c>)
   1ffdc:	4798      	blx	r3
   1ffde:	1e03      	subs	r3, r0, #0
   1ffe0:	d102      	bne.n	1ffe8 <xQueueReceive+0x48>
   1ffe2:	687b      	ldr	r3, [r7, #4]
   1ffe4:	2b00      	cmp	r3, #0
   1ffe6:	d101      	bne.n	1ffec <xQueueReceive+0x4c>
   1ffe8:	2301      	movs	r3, #1
   1ffea:	e000      	b.n	1ffee <xQueueReceive+0x4e>
   1ffec:	2300      	movs	r3, #0
   1ffee:	2b00      	cmp	r3, #0
   1fff0:	d101      	bne.n	1fff6 <xQueueReceive+0x56>
   1fff2:	b672      	cpsid	i
   1fff4:	e7fe      	b.n	1fff4 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1fff6:	4b46      	ldr	r3, [pc, #280]	; (20110 <xQueueReceive+0x170>)
   1fff8:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1fffa:	6a3b      	ldr	r3, [r7, #32]
   1fffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1fffe:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   20000:	69fb      	ldr	r3, [r7, #28]
   20002:	2b00      	cmp	r3, #0
   20004:	d01a      	beq.n	2003c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   20006:	68ba      	ldr	r2, [r7, #8]
   20008:	6a3b      	ldr	r3, [r7, #32]
   2000a:	0011      	movs	r1, r2
   2000c:	0018      	movs	r0, r3
   2000e:	4b41      	ldr	r3, [pc, #260]	; (20114 <xQueueReceive+0x174>)
   20010:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   20012:	69fb      	ldr	r3, [r7, #28]
   20014:	1e5a      	subs	r2, r3, #1
   20016:	6a3b      	ldr	r3, [r7, #32]
   20018:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   2001a:	6a3b      	ldr	r3, [r7, #32]
   2001c:	691b      	ldr	r3, [r3, #16]
   2001e:	2b00      	cmp	r3, #0
   20020:	d008      	beq.n	20034 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   20022:	6a3b      	ldr	r3, [r7, #32]
   20024:	3310      	adds	r3, #16
   20026:	0018      	movs	r0, r3
   20028:	4b3b      	ldr	r3, [pc, #236]	; (20118 <xQueueReceive+0x178>)
   2002a:	4798      	blx	r3
   2002c:	1e03      	subs	r3, r0, #0
   2002e:	d001      	beq.n	20034 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   20030:	4b3a      	ldr	r3, [pc, #232]	; (2011c <xQueueReceive+0x17c>)
   20032:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   20034:	4b3a      	ldr	r3, [pc, #232]	; (20120 <xQueueReceive+0x180>)
   20036:	4798      	blx	r3
				return pdPASS;
   20038:	2301      	movs	r3, #1
   2003a:	e062      	b.n	20102 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   2003c:	687b      	ldr	r3, [r7, #4]
   2003e:	2b00      	cmp	r3, #0
   20040:	d103      	bne.n	2004a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   20042:	4b37      	ldr	r3, [pc, #220]	; (20120 <xQueueReceive+0x180>)
   20044:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   20046:	2300      	movs	r3, #0
   20048:	e05b      	b.n	20102 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   2004a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2004c:	2b00      	cmp	r3, #0
   2004e:	d106      	bne.n	2005e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   20050:	2314      	movs	r3, #20
   20052:	18fb      	adds	r3, r7, r3
   20054:	0018      	movs	r0, r3
   20056:	4b33      	ldr	r3, [pc, #204]	; (20124 <xQueueReceive+0x184>)
   20058:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   2005a:	2301      	movs	r3, #1
   2005c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   2005e:	4b30      	ldr	r3, [pc, #192]	; (20120 <xQueueReceive+0x180>)
   20060:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   20062:	4b31      	ldr	r3, [pc, #196]	; (20128 <xQueueReceive+0x188>)
   20064:	4798      	blx	r3
		prvLockQueue( pxQueue );
   20066:	4b2a      	ldr	r3, [pc, #168]	; (20110 <xQueueReceive+0x170>)
   20068:	4798      	blx	r3
   2006a:	6a3b      	ldr	r3, [r7, #32]
   2006c:	2244      	movs	r2, #68	; 0x44
   2006e:	5c9b      	ldrb	r3, [r3, r2]
   20070:	b25b      	sxtb	r3, r3
   20072:	3301      	adds	r3, #1
   20074:	d103      	bne.n	2007e <xQueueReceive+0xde>
   20076:	6a3b      	ldr	r3, [r7, #32]
   20078:	2244      	movs	r2, #68	; 0x44
   2007a:	2100      	movs	r1, #0
   2007c:	5499      	strb	r1, [r3, r2]
   2007e:	6a3b      	ldr	r3, [r7, #32]
   20080:	2245      	movs	r2, #69	; 0x45
   20082:	5c9b      	ldrb	r3, [r3, r2]
   20084:	b25b      	sxtb	r3, r3
   20086:	3301      	adds	r3, #1
   20088:	d103      	bne.n	20092 <xQueueReceive+0xf2>
   2008a:	6a3b      	ldr	r3, [r7, #32]
   2008c:	2245      	movs	r2, #69	; 0x45
   2008e:	2100      	movs	r1, #0
   20090:	5499      	strb	r1, [r3, r2]
   20092:	4b23      	ldr	r3, [pc, #140]	; (20120 <xQueueReceive+0x180>)
   20094:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   20096:	1d3a      	adds	r2, r7, #4
   20098:	2314      	movs	r3, #20
   2009a:	18fb      	adds	r3, r7, r3
   2009c:	0011      	movs	r1, r2
   2009e:	0018      	movs	r0, r3
   200a0:	4b22      	ldr	r3, [pc, #136]	; (2012c <xQueueReceive+0x18c>)
   200a2:	4798      	blx	r3
   200a4:	1e03      	subs	r3, r0, #0
   200a6:	d11e      	bne.n	200e6 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   200a8:	6a3b      	ldr	r3, [r7, #32]
   200aa:	0018      	movs	r0, r3
   200ac:	4b20      	ldr	r3, [pc, #128]	; (20130 <xQueueReceive+0x190>)
   200ae:	4798      	blx	r3
   200b0:	1e03      	subs	r3, r0, #0
   200b2:	d011      	beq.n	200d8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   200b4:	6a3b      	ldr	r3, [r7, #32]
   200b6:	3324      	adds	r3, #36	; 0x24
   200b8:	687a      	ldr	r2, [r7, #4]
   200ba:	0011      	movs	r1, r2
   200bc:	0018      	movs	r0, r3
   200be:	4b1d      	ldr	r3, [pc, #116]	; (20134 <xQueueReceive+0x194>)
   200c0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   200c2:	6a3b      	ldr	r3, [r7, #32]
   200c4:	0018      	movs	r0, r3
   200c6:	4b1c      	ldr	r3, [pc, #112]	; (20138 <xQueueReceive+0x198>)
   200c8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   200ca:	4b1c      	ldr	r3, [pc, #112]	; (2013c <xQueueReceive+0x19c>)
   200cc:	4798      	blx	r3
   200ce:	1e03      	subs	r3, r0, #0
   200d0:	d191      	bne.n	1fff6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   200d2:	4b12      	ldr	r3, [pc, #72]	; (2011c <xQueueReceive+0x17c>)
   200d4:	4798      	blx	r3
   200d6:	e78e      	b.n	1fff6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   200d8:	6a3b      	ldr	r3, [r7, #32]
   200da:	0018      	movs	r0, r3
   200dc:	4b16      	ldr	r3, [pc, #88]	; (20138 <xQueueReceive+0x198>)
   200de:	4798      	blx	r3
				( void ) xTaskResumeAll();
   200e0:	4b16      	ldr	r3, [pc, #88]	; (2013c <xQueueReceive+0x19c>)
   200e2:	4798      	blx	r3
   200e4:	e787      	b.n	1fff6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   200e6:	6a3b      	ldr	r3, [r7, #32]
   200e8:	0018      	movs	r0, r3
   200ea:	4b13      	ldr	r3, [pc, #76]	; (20138 <xQueueReceive+0x198>)
   200ec:	4798      	blx	r3
			( void ) xTaskResumeAll();
   200ee:	4b13      	ldr	r3, [pc, #76]	; (2013c <xQueueReceive+0x19c>)
   200f0:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   200f2:	6a3b      	ldr	r3, [r7, #32]
   200f4:	0018      	movs	r0, r3
   200f6:	4b0e      	ldr	r3, [pc, #56]	; (20130 <xQueueReceive+0x190>)
   200f8:	4798      	blx	r3
   200fa:	1e03      	subs	r3, r0, #0
   200fc:	d100      	bne.n	20100 <xQueueReceive+0x160>
   200fe:	e77a      	b.n	1fff6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   20100:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   20102:	0018      	movs	r0, r3
   20104:	46bd      	mov	sp, r7
   20106:	b00a      	add	sp, #40	; 0x28
   20108:	bd80      	pop	{r7, pc}
   2010a:	46c0      	nop			; (mov r8, r8)
   2010c:	000213d1 	.word	0x000213d1
   20110:	0001f831 	.word	0x0001f831
   20114:	00020441 	.word	0x00020441
   20118:	00021099 	.word	0x00021099
   2011c:	0001f811 	.word	0x0001f811
   20120:	0001f855 	.word	0x0001f855
   20124:	00021159 	.word	0x00021159
   20128:	00020c61 	.word	0x00020c61
   2012c:	00021181 	.word	0x00021181
   20130:	00020581 	.word	0x00020581
   20134:	00021001 	.word	0x00021001
   20138:	00020491 	.word	0x00020491
   2013c:	00020c79 	.word	0x00020c79

00020140 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   20140:	b580      	push	{r7, lr}
   20142:	b08a      	sub	sp, #40	; 0x28
   20144:	af00      	add	r7, sp, #0
   20146:	6078      	str	r0, [r7, #4]
   20148:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   2014a:	2300      	movs	r3, #0
   2014c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   2014e:	687b      	ldr	r3, [r7, #4]
   20150:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   20152:	2300      	movs	r3, #0
   20154:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   20156:	69fb      	ldr	r3, [r7, #28]
   20158:	2b00      	cmp	r3, #0
   2015a:	d101      	bne.n	20160 <xQueueSemaphoreTake+0x20>
   2015c:	b672      	cpsid	i
   2015e:	e7fe      	b.n	2015e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   20160:	69fb      	ldr	r3, [r7, #28]
   20162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20164:	2b00      	cmp	r3, #0
   20166:	d001      	beq.n	2016c <xQueueSemaphoreTake+0x2c>
   20168:	b672      	cpsid	i
   2016a:	e7fe      	b.n	2016a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   2016c:	4b61      	ldr	r3, [pc, #388]	; (202f4 <xQueueSemaphoreTake+0x1b4>)
   2016e:	4798      	blx	r3
   20170:	1e03      	subs	r3, r0, #0
   20172:	d102      	bne.n	2017a <xQueueSemaphoreTake+0x3a>
   20174:	683b      	ldr	r3, [r7, #0]
   20176:	2b00      	cmp	r3, #0
   20178:	d101      	bne.n	2017e <xQueueSemaphoreTake+0x3e>
   2017a:	2301      	movs	r3, #1
   2017c:	e000      	b.n	20180 <xQueueSemaphoreTake+0x40>
   2017e:	2300      	movs	r3, #0
   20180:	2b00      	cmp	r3, #0
   20182:	d101      	bne.n	20188 <xQueueSemaphoreTake+0x48>
   20184:	b672      	cpsid	i
   20186:	e7fe      	b.n	20186 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   20188:	4b5b      	ldr	r3, [pc, #364]	; (202f8 <xQueueSemaphoreTake+0x1b8>)
   2018a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   2018c:	69fb      	ldr	r3, [r7, #28]
   2018e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   20190:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   20192:	69bb      	ldr	r3, [r7, #24]
   20194:	2b00      	cmp	r3, #0
   20196:	d01d      	beq.n	201d4 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   20198:	69bb      	ldr	r3, [r7, #24]
   2019a:	1e5a      	subs	r2, r3, #1
   2019c:	69fb      	ldr	r3, [r7, #28]
   2019e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   201a0:	69fb      	ldr	r3, [r7, #28]
   201a2:	681b      	ldr	r3, [r3, #0]
   201a4:	2b00      	cmp	r3, #0
   201a6:	d104      	bne.n	201b2 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   201a8:	4b54      	ldr	r3, [pc, #336]	; (202fc <xQueueSemaphoreTake+0x1bc>)
   201aa:	4798      	blx	r3
   201ac:	0002      	movs	r2, r0
   201ae:	69fb      	ldr	r3, [r7, #28]
   201b0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   201b2:	69fb      	ldr	r3, [r7, #28]
   201b4:	691b      	ldr	r3, [r3, #16]
   201b6:	2b00      	cmp	r3, #0
   201b8:	d008      	beq.n	201cc <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   201ba:	69fb      	ldr	r3, [r7, #28]
   201bc:	3310      	adds	r3, #16
   201be:	0018      	movs	r0, r3
   201c0:	4b4f      	ldr	r3, [pc, #316]	; (20300 <xQueueSemaphoreTake+0x1c0>)
   201c2:	4798      	blx	r3
   201c4:	1e03      	subs	r3, r0, #0
   201c6:	d001      	beq.n	201cc <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   201c8:	4b4e      	ldr	r3, [pc, #312]	; (20304 <xQueueSemaphoreTake+0x1c4>)
   201ca:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   201cc:	4b4e      	ldr	r3, [pc, #312]	; (20308 <xQueueSemaphoreTake+0x1c8>)
   201ce:	4798      	blx	r3
				return pdPASS;
   201d0:	2301      	movs	r3, #1
   201d2:	e08b      	b.n	202ec <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   201d4:	683b      	ldr	r3, [r7, #0]
   201d6:	2b00      	cmp	r3, #0
   201d8:	d108      	bne.n	201ec <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   201da:	6a3b      	ldr	r3, [r7, #32]
   201dc:	2b00      	cmp	r3, #0
   201de:	d001      	beq.n	201e4 <xQueueSemaphoreTake+0xa4>
   201e0:	b672      	cpsid	i
   201e2:	e7fe      	b.n	201e2 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   201e4:	4b48      	ldr	r3, [pc, #288]	; (20308 <xQueueSemaphoreTake+0x1c8>)
   201e6:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   201e8:	2300      	movs	r3, #0
   201ea:	e07f      	b.n	202ec <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   201ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   201ee:	2b00      	cmp	r3, #0
   201f0:	d106      	bne.n	20200 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   201f2:	230c      	movs	r3, #12
   201f4:	18fb      	adds	r3, r7, r3
   201f6:	0018      	movs	r0, r3
   201f8:	4b44      	ldr	r3, [pc, #272]	; (2030c <xQueueSemaphoreTake+0x1cc>)
   201fa:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   201fc:	2301      	movs	r3, #1
   201fe:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   20200:	4b41      	ldr	r3, [pc, #260]	; (20308 <xQueueSemaphoreTake+0x1c8>)
   20202:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   20204:	4b42      	ldr	r3, [pc, #264]	; (20310 <xQueueSemaphoreTake+0x1d0>)
   20206:	4798      	blx	r3
		prvLockQueue( pxQueue );
   20208:	4b3b      	ldr	r3, [pc, #236]	; (202f8 <xQueueSemaphoreTake+0x1b8>)
   2020a:	4798      	blx	r3
   2020c:	69fb      	ldr	r3, [r7, #28]
   2020e:	2244      	movs	r2, #68	; 0x44
   20210:	5c9b      	ldrb	r3, [r3, r2]
   20212:	b25b      	sxtb	r3, r3
   20214:	3301      	adds	r3, #1
   20216:	d103      	bne.n	20220 <xQueueSemaphoreTake+0xe0>
   20218:	69fb      	ldr	r3, [r7, #28]
   2021a:	2244      	movs	r2, #68	; 0x44
   2021c:	2100      	movs	r1, #0
   2021e:	5499      	strb	r1, [r3, r2]
   20220:	69fb      	ldr	r3, [r7, #28]
   20222:	2245      	movs	r2, #69	; 0x45
   20224:	5c9b      	ldrb	r3, [r3, r2]
   20226:	b25b      	sxtb	r3, r3
   20228:	3301      	adds	r3, #1
   2022a:	d103      	bne.n	20234 <xQueueSemaphoreTake+0xf4>
   2022c:	69fb      	ldr	r3, [r7, #28]
   2022e:	2245      	movs	r2, #69	; 0x45
   20230:	2100      	movs	r1, #0
   20232:	5499      	strb	r1, [r3, r2]
   20234:	4b34      	ldr	r3, [pc, #208]	; (20308 <xQueueSemaphoreTake+0x1c8>)
   20236:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   20238:	003a      	movs	r2, r7
   2023a:	230c      	movs	r3, #12
   2023c:	18fb      	adds	r3, r7, r3
   2023e:	0011      	movs	r1, r2
   20240:	0018      	movs	r0, r3
   20242:	4b34      	ldr	r3, [pc, #208]	; (20314 <xQueueSemaphoreTake+0x1d4>)
   20244:	4798      	blx	r3
   20246:	1e03      	subs	r3, r0, #0
   20248:	d12e      	bne.n	202a8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   2024a:	69fb      	ldr	r3, [r7, #28]
   2024c:	0018      	movs	r0, r3
   2024e:	4b32      	ldr	r3, [pc, #200]	; (20318 <xQueueSemaphoreTake+0x1d8>)
   20250:	4798      	blx	r3
   20252:	1e03      	subs	r3, r0, #0
   20254:	d021      	beq.n	2029a <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   20256:	69fb      	ldr	r3, [r7, #28]
   20258:	681b      	ldr	r3, [r3, #0]
   2025a:	2b00      	cmp	r3, #0
   2025c:	d10a      	bne.n	20274 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   2025e:	4b26      	ldr	r3, [pc, #152]	; (202f8 <xQueueSemaphoreTake+0x1b8>)
   20260:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   20262:	69fb      	ldr	r3, [r7, #28]
   20264:	685b      	ldr	r3, [r3, #4]
   20266:	0018      	movs	r0, r3
   20268:	4b2c      	ldr	r3, [pc, #176]	; (2031c <xQueueSemaphoreTake+0x1dc>)
   2026a:	4798      	blx	r3
   2026c:	0003      	movs	r3, r0
   2026e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   20270:	4b25      	ldr	r3, [pc, #148]	; (20308 <xQueueSemaphoreTake+0x1c8>)
   20272:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   20274:	69fb      	ldr	r3, [r7, #28]
   20276:	3324      	adds	r3, #36	; 0x24
   20278:	683a      	ldr	r2, [r7, #0]
   2027a:	0011      	movs	r1, r2
   2027c:	0018      	movs	r0, r3
   2027e:	4b28      	ldr	r3, [pc, #160]	; (20320 <xQueueSemaphoreTake+0x1e0>)
   20280:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   20282:	69fb      	ldr	r3, [r7, #28]
   20284:	0018      	movs	r0, r3
   20286:	4b27      	ldr	r3, [pc, #156]	; (20324 <xQueueSemaphoreTake+0x1e4>)
   20288:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   2028a:	4b27      	ldr	r3, [pc, #156]	; (20328 <xQueueSemaphoreTake+0x1e8>)
   2028c:	4798      	blx	r3
   2028e:	1e03      	subs	r3, r0, #0
   20290:	d000      	beq.n	20294 <xQueueSemaphoreTake+0x154>
   20292:	e779      	b.n	20188 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   20294:	4b1b      	ldr	r3, [pc, #108]	; (20304 <xQueueSemaphoreTake+0x1c4>)
   20296:	4798      	blx	r3
   20298:	e776      	b.n	20188 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   2029a:	69fb      	ldr	r3, [r7, #28]
   2029c:	0018      	movs	r0, r3
   2029e:	4b21      	ldr	r3, [pc, #132]	; (20324 <xQueueSemaphoreTake+0x1e4>)
   202a0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   202a2:	4b21      	ldr	r3, [pc, #132]	; (20328 <xQueueSemaphoreTake+0x1e8>)
   202a4:	4798      	blx	r3
   202a6:	e76f      	b.n	20188 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   202a8:	69fb      	ldr	r3, [r7, #28]
   202aa:	0018      	movs	r0, r3
   202ac:	4b1d      	ldr	r3, [pc, #116]	; (20324 <xQueueSemaphoreTake+0x1e4>)
   202ae:	4798      	blx	r3
			( void ) xTaskResumeAll();
   202b0:	4b1d      	ldr	r3, [pc, #116]	; (20328 <xQueueSemaphoreTake+0x1e8>)
   202b2:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   202b4:	69fb      	ldr	r3, [r7, #28]
   202b6:	0018      	movs	r0, r3
   202b8:	4b17      	ldr	r3, [pc, #92]	; (20318 <xQueueSemaphoreTake+0x1d8>)
   202ba:	4798      	blx	r3
   202bc:	1e03      	subs	r3, r0, #0
   202be:	d100      	bne.n	202c2 <xQueueSemaphoreTake+0x182>
   202c0:	e762      	b.n	20188 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   202c2:	6a3b      	ldr	r3, [r7, #32]
   202c4:	2b00      	cmp	r3, #0
   202c6:	d010      	beq.n	202ea <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   202c8:	4b0b      	ldr	r3, [pc, #44]	; (202f8 <xQueueSemaphoreTake+0x1b8>)
   202ca:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   202cc:	69fb      	ldr	r3, [r7, #28]
   202ce:	0018      	movs	r0, r3
   202d0:	4b16      	ldr	r3, [pc, #88]	; (2032c <xQueueSemaphoreTake+0x1ec>)
   202d2:	4798      	blx	r3
   202d4:	0003      	movs	r3, r0
   202d6:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   202d8:	69fb      	ldr	r3, [r7, #28]
   202da:	685b      	ldr	r3, [r3, #4]
   202dc:	697a      	ldr	r2, [r7, #20]
   202de:	0011      	movs	r1, r2
   202e0:	0018      	movs	r0, r3
   202e2:	4b13      	ldr	r3, [pc, #76]	; (20330 <xQueueSemaphoreTake+0x1f0>)
   202e4:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   202e6:	4b08      	ldr	r3, [pc, #32]	; (20308 <xQueueSemaphoreTake+0x1c8>)
   202e8:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   202ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   202ec:	0018      	movs	r0, r3
   202ee:	46bd      	mov	sp, r7
   202f0:	b00a      	add	sp, #40	; 0x28
   202f2:	bd80      	pop	{r7, pc}
   202f4:	000213d1 	.word	0x000213d1
   202f8:	0001f831 	.word	0x0001f831
   202fc:	0002169d 	.word	0x0002169d
   20300:	00021099 	.word	0x00021099
   20304:	0001f811 	.word	0x0001f811
   20308:	0001f855 	.word	0x0001f855
   2030c:	00021159 	.word	0x00021159
   20310:	00020c61 	.word	0x00020c61
   20314:	00021181 	.word	0x00021181
   20318:	00020581 	.word	0x00020581
   2031c:	00021409 	.word	0x00021409
   20320:	00021001 	.word	0x00021001
   20324:	00020491 	.word	0x00020491
   20328:	00020c79 	.word	0x00020c79
   2032c:	00020335 	.word	0x00020335
   20330:	000215ad 	.word	0x000215ad

00020334 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   20334:	b580      	push	{r7, lr}
   20336:	b084      	sub	sp, #16
   20338:	af00      	add	r7, sp, #0
   2033a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   2033c:	687b      	ldr	r3, [r7, #4]
   2033e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20340:	2b00      	cmp	r3, #0
   20342:	d006      	beq.n	20352 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   20344:	687b      	ldr	r3, [r7, #4]
   20346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   20348:	681b      	ldr	r3, [r3, #0]
   2034a:	2205      	movs	r2, #5
   2034c:	1ad3      	subs	r3, r2, r3
   2034e:	60fb      	str	r3, [r7, #12]
   20350:	e001      	b.n	20356 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   20352:	2300      	movs	r3, #0
   20354:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   20356:	68fb      	ldr	r3, [r7, #12]
	}
   20358:	0018      	movs	r0, r3
   2035a:	46bd      	mov	sp, r7
   2035c:	b004      	add	sp, #16
   2035e:	bd80      	pop	{r7, pc}

00020360 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   20360:	b580      	push	{r7, lr}
   20362:	b086      	sub	sp, #24
   20364:	af00      	add	r7, sp, #0
   20366:	60f8      	str	r0, [r7, #12]
   20368:	60b9      	str	r1, [r7, #8]
   2036a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   2036c:	2300      	movs	r3, #0
   2036e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   20370:	68fb      	ldr	r3, [r7, #12]
   20372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   20374:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   20376:	68fb      	ldr	r3, [r7, #12]
   20378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2037a:	2b00      	cmp	r3, #0
   2037c:	d10e      	bne.n	2039c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   2037e:	68fb      	ldr	r3, [r7, #12]
   20380:	681b      	ldr	r3, [r3, #0]
   20382:	2b00      	cmp	r3, #0
   20384:	d14e      	bne.n	20424 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   20386:	68fb      	ldr	r3, [r7, #12]
   20388:	685b      	ldr	r3, [r3, #4]
   2038a:	0018      	movs	r0, r3
   2038c:	4b2a      	ldr	r3, [pc, #168]	; (20438 <prvCopyDataToQueue+0xd8>)
   2038e:	4798      	blx	r3
   20390:	0003      	movs	r3, r0
   20392:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   20394:	68fb      	ldr	r3, [r7, #12]
   20396:	2200      	movs	r2, #0
   20398:	605a      	str	r2, [r3, #4]
   2039a:	e043      	b.n	20424 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   2039c:	687b      	ldr	r3, [r7, #4]
   2039e:	2b00      	cmp	r3, #0
   203a0:	d119      	bne.n	203d6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   203a2:	68fb      	ldr	r3, [r7, #12]
   203a4:	6898      	ldr	r0, [r3, #8]
   203a6:	68fb      	ldr	r3, [r7, #12]
   203a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   203aa:	68bb      	ldr	r3, [r7, #8]
   203ac:	0019      	movs	r1, r3
   203ae:	4b23      	ldr	r3, [pc, #140]	; (2043c <prvCopyDataToQueue+0xdc>)
   203b0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   203b2:	68fb      	ldr	r3, [r7, #12]
   203b4:	689a      	ldr	r2, [r3, #8]
   203b6:	68fb      	ldr	r3, [r7, #12]
   203b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   203ba:	18d2      	adds	r2, r2, r3
   203bc:	68fb      	ldr	r3, [r7, #12]
   203be:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   203c0:	68fb      	ldr	r3, [r7, #12]
   203c2:	689a      	ldr	r2, [r3, #8]
   203c4:	68fb      	ldr	r3, [r7, #12]
   203c6:	685b      	ldr	r3, [r3, #4]
   203c8:	429a      	cmp	r2, r3
   203ca:	d32b      	bcc.n	20424 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   203cc:	68fb      	ldr	r3, [r7, #12]
   203ce:	681a      	ldr	r2, [r3, #0]
   203d0:	68fb      	ldr	r3, [r7, #12]
   203d2:	609a      	str	r2, [r3, #8]
   203d4:	e026      	b.n	20424 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   203d6:	68fb      	ldr	r3, [r7, #12]
   203d8:	68d8      	ldr	r0, [r3, #12]
   203da:	68fb      	ldr	r3, [r7, #12]
   203dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   203de:	68bb      	ldr	r3, [r7, #8]
   203e0:	0019      	movs	r1, r3
   203e2:	4b16      	ldr	r3, [pc, #88]	; (2043c <prvCopyDataToQueue+0xdc>)
   203e4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   203e6:	68fb      	ldr	r3, [r7, #12]
   203e8:	68da      	ldr	r2, [r3, #12]
   203ea:	68fb      	ldr	r3, [r7, #12]
   203ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   203ee:	425b      	negs	r3, r3
   203f0:	18d2      	adds	r2, r2, r3
   203f2:	68fb      	ldr	r3, [r7, #12]
   203f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   203f6:	68fb      	ldr	r3, [r7, #12]
   203f8:	68da      	ldr	r2, [r3, #12]
   203fa:	68fb      	ldr	r3, [r7, #12]
   203fc:	681b      	ldr	r3, [r3, #0]
   203fe:	429a      	cmp	r2, r3
   20400:	d207      	bcs.n	20412 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   20402:	68fb      	ldr	r3, [r7, #12]
   20404:	685a      	ldr	r2, [r3, #4]
   20406:	68fb      	ldr	r3, [r7, #12]
   20408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2040a:	425b      	negs	r3, r3
   2040c:	18d2      	adds	r2, r2, r3
   2040e:	68fb      	ldr	r3, [r7, #12]
   20410:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   20412:	687b      	ldr	r3, [r7, #4]
   20414:	2b02      	cmp	r3, #2
   20416:	d105      	bne.n	20424 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   20418:	693b      	ldr	r3, [r7, #16]
   2041a:	2b00      	cmp	r3, #0
   2041c:	d002      	beq.n	20424 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   2041e:	693b      	ldr	r3, [r7, #16]
   20420:	3b01      	subs	r3, #1
   20422:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   20424:	693b      	ldr	r3, [r7, #16]
   20426:	1c5a      	adds	r2, r3, #1
   20428:	68fb      	ldr	r3, [r7, #12]
   2042a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   2042c:	697b      	ldr	r3, [r7, #20]
}
   2042e:	0018      	movs	r0, r3
   20430:	46bd      	mov	sp, r7
   20432:	b006      	add	sp, #24
   20434:	bd80      	pop	{r7, pc}
   20436:	46c0      	nop			; (mov r8, r8)
   20438:	000214ed 	.word	0x000214ed
   2043c:	00029725 	.word	0x00029725

00020440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   20440:	b580      	push	{r7, lr}
   20442:	b082      	sub	sp, #8
   20444:	af00      	add	r7, sp, #0
   20446:	6078      	str	r0, [r7, #4]
   20448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   2044a:	687b      	ldr	r3, [r7, #4]
   2044c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2044e:	2b00      	cmp	r3, #0
   20450:	d018      	beq.n	20484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   20452:	687b      	ldr	r3, [r7, #4]
   20454:	68da      	ldr	r2, [r3, #12]
   20456:	687b      	ldr	r3, [r7, #4]
   20458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2045a:	18d2      	adds	r2, r2, r3
   2045c:	687b      	ldr	r3, [r7, #4]
   2045e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   20460:	687b      	ldr	r3, [r7, #4]
   20462:	68da      	ldr	r2, [r3, #12]
   20464:	687b      	ldr	r3, [r7, #4]
   20466:	685b      	ldr	r3, [r3, #4]
   20468:	429a      	cmp	r2, r3
   2046a:	d303      	bcc.n	20474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   2046c:	687b      	ldr	r3, [r7, #4]
   2046e:	681a      	ldr	r2, [r3, #0]
   20470:	687b      	ldr	r3, [r7, #4]
   20472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   20474:	687b      	ldr	r3, [r7, #4]
   20476:	68d9      	ldr	r1, [r3, #12]
   20478:	687b      	ldr	r3, [r7, #4]
   2047a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   2047c:	683b      	ldr	r3, [r7, #0]
   2047e:	0018      	movs	r0, r3
   20480:	4b02      	ldr	r3, [pc, #8]	; (2048c <prvCopyDataFromQueue+0x4c>)
   20482:	4798      	blx	r3
	}
}
   20484:	46c0      	nop			; (mov r8, r8)
   20486:	46bd      	mov	sp, r7
   20488:	b002      	add	sp, #8
   2048a:	bd80      	pop	{r7, pc}
   2048c:	00029725 	.word	0x00029725

00020490 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   20490:	b580      	push	{r7, lr}
   20492:	b084      	sub	sp, #16
   20494:	af00      	add	r7, sp, #0
   20496:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   20498:	4b34      	ldr	r3, [pc, #208]	; (2056c <prvUnlockQueue+0xdc>)
   2049a:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   2049c:	230f      	movs	r3, #15
   2049e:	18fb      	adds	r3, r7, r3
   204a0:	687a      	ldr	r2, [r7, #4]
   204a2:	2145      	movs	r1, #69	; 0x45
   204a4:	5c52      	ldrb	r2, [r2, r1]
   204a6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   204a8:	e022      	b.n	204f0 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   204aa:	687b      	ldr	r3, [r7, #4]
   204ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   204ae:	2b00      	cmp	r3, #0
   204b0:	d009      	beq.n	204c6 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   204b2:	687b      	ldr	r3, [r7, #4]
   204b4:	2100      	movs	r1, #0
   204b6:	0018      	movs	r0, r3
   204b8:	4b2d      	ldr	r3, [pc, #180]	; (20570 <prvUnlockQueue+0xe0>)
   204ba:	4798      	blx	r3
   204bc:	1e03      	subs	r3, r0, #0
   204be:	d00f      	beq.n	204e0 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   204c0:	4b2c      	ldr	r3, [pc, #176]	; (20574 <prvUnlockQueue+0xe4>)
   204c2:	4798      	blx	r3
   204c4:	e00c      	b.n	204e0 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   204c6:	687b      	ldr	r3, [r7, #4]
   204c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   204ca:	2b00      	cmp	r3, #0
   204cc:	d017      	beq.n	204fe <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   204ce:	687b      	ldr	r3, [r7, #4]
   204d0:	3324      	adds	r3, #36	; 0x24
   204d2:	0018      	movs	r0, r3
   204d4:	4b28      	ldr	r3, [pc, #160]	; (20578 <prvUnlockQueue+0xe8>)
   204d6:	4798      	blx	r3
   204d8:	1e03      	subs	r3, r0, #0
   204da:	d001      	beq.n	204e0 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   204dc:	4b25      	ldr	r3, [pc, #148]	; (20574 <prvUnlockQueue+0xe4>)
   204de:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   204e0:	230f      	movs	r3, #15
   204e2:	18fb      	adds	r3, r7, r3
   204e4:	781b      	ldrb	r3, [r3, #0]
   204e6:	3b01      	subs	r3, #1
   204e8:	b2da      	uxtb	r2, r3
   204ea:	230f      	movs	r3, #15
   204ec:	18fb      	adds	r3, r7, r3
   204ee:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   204f0:	230f      	movs	r3, #15
   204f2:	18fb      	adds	r3, r7, r3
   204f4:	781b      	ldrb	r3, [r3, #0]
   204f6:	b25b      	sxtb	r3, r3
   204f8:	2b00      	cmp	r3, #0
   204fa:	dcd6      	bgt.n	204aa <prvUnlockQueue+0x1a>
   204fc:	e000      	b.n	20500 <prvUnlockQueue+0x70>
						break;
   204fe:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   20500:	687b      	ldr	r3, [r7, #4]
   20502:	2245      	movs	r2, #69	; 0x45
   20504:	21ff      	movs	r1, #255	; 0xff
   20506:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   20508:	4b1c      	ldr	r3, [pc, #112]	; (2057c <prvUnlockQueue+0xec>)
   2050a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   2050c:	4b17      	ldr	r3, [pc, #92]	; (2056c <prvUnlockQueue+0xdc>)
   2050e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   20510:	230e      	movs	r3, #14
   20512:	18fb      	adds	r3, r7, r3
   20514:	687a      	ldr	r2, [r7, #4]
   20516:	2144      	movs	r1, #68	; 0x44
   20518:	5c52      	ldrb	r2, [r2, r1]
   2051a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   2051c:	e014      	b.n	20548 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   2051e:	687b      	ldr	r3, [r7, #4]
   20520:	691b      	ldr	r3, [r3, #16]
   20522:	2b00      	cmp	r3, #0
   20524:	d017      	beq.n	20556 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   20526:	687b      	ldr	r3, [r7, #4]
   20528:	3310      	adds	r3, #16
   2052a:	0018      	movs	r0, r3
   2052c:	4b12      	ldr	r3, [pc, #72]	; (20578 <prvUnlockQueue+0xe8>)
   2052e:	4798      	blx	r3
   20530:	1e03      	subs	r3, r0, #0
   20532:	d001      	beq.n	20538 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   20534:	4b0f      	ldr	r3, [pc, #60]	; (20574 <prvUnlockQueue+0xe4>)
   20536:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   20538:	230e      	movs	r3, #14
   2053a:	18fb      	adds	r3, r7, r3
   2053c:	781b      	ldrb	r3, [r3, #0]
   2053e:	3b01      	subs	r3, #1
   20540:	b2da      	uxtb	r2, r3
   20542:	230e      	movs	r3, #14
   20544:	18fb      	adds	r3, r7, r3
   20546:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   20548:	230e      	movs	r3, #14
   2054a:	18fb      	adds	r3, r7, r3
   2054c:	781b      	ldrb	r3, [r3, #0]
   2054e:	b25b      	sxtb	r3, r3
   20550:	2b00      	cmp	r3, #0
   20552:	dce4      	bgt.n	2051e <prvUnlockQueue+0x8e>
   20554:	e000      	b.n	20558 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   20556:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   20558:	687b      	ldr	r3, [r7, #4]
   2055a:	2244      	movs	r2, #68	; 0x44
   2055c:	21ff      	movs	r1, #255	; 0xff
   2055e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   20560:	4b06      	ldr	r3, [pc, #24]	; (2057c <prvUnlockQueue+0xec>)
   20562:	4798      	blx	r3
}
   20564:	46c0      	nop			; (mov r8, r8)
   20566:	46bd      	mov	sp, r7
   20568:	b004      	add	sp, #16
   2056a:	bd80      	pop	{r7, pc}
   2056c:	0001f831 	.word	0x0001f831
   20570:	00020665 	.word	0x00020665
   20574:	0002122d 	.word	0x0002122d
   20578:	00021099 	.word	0x00021099
   2057c:	0001f855 	.word	0x0001f855

00020580 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   20580:	b580      	push	{r7, lr}
   20582:	b084      	sub	sp, #16
   20584:	af00      	add	r7, sp, #0
   20586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   20588:	4b08      	ldr	r3, [pc, #32]	; (205ac <prvIsQueueEmpty+0x2c>)
   2058a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   2058c:	687b      	ldr	r3, [r7, #4]
   2058e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   20590:	2b00      	cmp	r3, #0
   20592:	d102      	bne.n	2059a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   20594:	2301      	movs	r3, #1
   20596:	60fb      	str	r3, [r7, #12]
   20598:	e001      	b.n	2059e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   2059a:	2300      	movs	r3, #0
   2059c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   2059e:	4b04      	ldr	r3, [pc, #16]	; (205b0 <prvIsQueueEmpty+0x30>)
   205a0:	4798      	blx	r3

	return xReturn;
   205a2:	68fb      	ldr	r3, [r7, #12]
}
   205a4:	0018      	movs	r0, r3
   205a6:	46bd      	mov	sp, r7
   205a8:	b004      	add	sp, #16
   205aa:	bd80      	pop	{r7, pc}
   205ac:	0001f831 	.word	0x0001f831
   205b0:	0001f855 	.word	0x0001f855

000205b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   205b4:	b580      	push	{r7, lr}
   205b6:	b084      	sub	sp, #16
   205b8:	af00      	add	r7, sp, #0
   205ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   205bc:	4b09      	ldr	r3, [pc, #36]	; (205e4 <prvIsQueueFull+0x30>)
   205be:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   205c0:	687b      	ldr	r3, [r7, #4]
   205c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   205c4:	687b      	ldr	r3, [r7, #4]
   205c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   205c8:	429a      	cmp	r2, r3
   205ca:	d102      	bne.n	205d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   205cc:	2301      	movs	r3, #1
   205ce:	60fb      	str	r3, [r7, #12]
   205d0:	e001      	b.n	205d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   205d2:	2300      	movs	r3, #0
   205d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   205d6:	4b04      	ldr	r3, [pc, #16]	; (205e8 <prvIsQueueFull+0x34>)
   205d8:	4798      	blx	r3

	return xReturn;
   205da:	68fb      	ldr	r3, [r7, #12]
}
   205dc:	0018      	movs	r0, r3
   205de:	46bd      	mov	sp, r7
   205e0:	b004      	add	sp, #16
   205e2:	bd80      	pop	{r7, pc}
   205e4:	0001f831 	.word	0x0001f831
   205e8:	0001f855 	.word	0x0001f855

000205ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   205ec:	b580      	push	{r7, lr}
   205ee:	b086      	sub	sp, #24
   205f0:	af00      	add	r7, sp, #0
   205f2:	60f8      	str	r0, [r7, #12]
   205f4:	60b9      	str	r1, [r7, #8]
   205f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   205f8:	68fb      	ldr	r3, [r7, #12]
   205fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   205fc:	4b15      	ldr	r3, [pc, #84]	; (20654 <vQueueWaitForMessageRestricted+0x68>)
   205fe:	4798      	blx	r3
   20600:	697b      	ldr	r3, [r7, #20]
   20602:	2244      	movs	r2, #68	; 0x44
   20604:	5c9b      	ldrb	r3, [r3, r2]
   20606:	b25b      	sxtb	r3, r3
   20608:	3301      	adds	r3, #1
   2060a:	d103      	bne.n	20614 <vQueueWaitForMessageRestricted+0x28>
   2060c:	697b      	ldr	r3, [r7, #20]
   2060e:	2244      	movs	r2, #68	; 0x44
   20610:	2100      	movs	r1, #0
   20612:	5499      	strb	r1, [r3, r2]
   20614:	697b      	ldr	r3, [r7, #20]
   20616:	2245      	movs	r2, #69	; 0x45
   20618:	5c9b      	ldrb	r3, [r3, r2]
   2061a:	b25b      	sxtb	r3, r3
   2061c:	3301      	adds	r3, #1
   2061e:	d103      	bne.n	20628 <vQueueWaitForMessageRestricted+0x3c>
   20620:	697b      	ldr	r3, [r7, #20]
   20622:	2245      	movs	r2, #69	; 0x45
   20624:	2100      	movs	r1, #0
   20626:	5499      	strb	r1, [r3, r2]
   20628:	4b0b      	ldr	r3, [pc, #44]	; (20658 <vQueueWaitForMessageRestricted+0x6c>)
   2062a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   2062c:	697b      	ldr	r3, [r7, #20]
   2062e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   20630:	2b00      	cmp	r3, #0
   20632:	d106      	bne.n	20642 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   20634:	697b      	ldr	r3, [r7, #20]
   20636:	3324      	adds	r3, #36	; 0x24
   20638:	687a      	ldr	r2, [r7, #4]
   2063a:	68b9      	ldr	r1, [r7, #8]
   2063c:	0018      	movs	r0, r3
   2063e:	4b07      	ldr	r3, [pc, #28]	; (2065c <vQueueWaitForMessageRestricted+0x70>)
   20640:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   20642:	697b      	ldr	r3, [r7, #20]
   20644:	0018      	movs	r0, r3
   20646:	4b06      	ldr	r3, [pc, #24]	; (20660 <vQueueWaitForMessageRestricted+0x74>)
   20648:	4798      	blx	r3
	}
   2064a:	46c0      	nop			; (mov r8, r8)
   2064c:	46bd      	mov	sp, r7
   2064e:	b006      	add	sp, #24
   20650:	bd80      	pop	{r7, pc}
   20652:	46c0      	nop			; (mov r8, r8)
   20654:	0001f831 	.word	0x0001f831
   20658:	0001f855 	.word	0x0001f855
   2065c:	00021045 	.word	0x00021045
   20660:	00020491 	.word	0x00020491

00020664 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   20664:	b580      	push	{r7, lr}
   20666:	b086      	sub	sp, #24
   20668:	af00      	add	r7, sp, #0
   2066a:	6078      	str	r0, [r7, #4]
   2066c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   2066e:	687b      	ldr	r3, [r7, #4]
   20670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   20674:	2300      	movs	r3, #0
   20676:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   20678:	693b      	ldr	r3, [r7, #16]
   2067a:	2b00      	cmp	r3, #0
   2067c:	d101      	bne.n	20682 <prvNotifyQueueSetContainer+0x1e>
   2067e:	b672      	cpsid	i
   20680:	e7fe      	b.n	20680 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   20682:	693b      	ldr	r3, [r7, #16]
   20684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20686:	693b      	ldr	r3, [r7, #16]
   20688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   2068a:	429a      	cmp	r2, r3
   2068c:	d301      	bcc.n	20692 <prvNotifyQueueSetContainer+0x2e>
   2068e:	b672      	cpsid	i
   20690:	e7fe      	b.n	20690 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   20692:	693b      	ldr	r3, [r7, #16]
   20694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   20696:	693b      	ldr	r3, [r7, #16]
   20698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   2069a:	429a      	cmp	r2, r3
   2069c:	d22a      	bcs.n	206f4 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   2069e:	230f      	movs	r3, #15
   206a0:	18fb      	adds	r3, r7, r3
   206a2:	693a      	ldr	r2, [r7, #16]
   206a4:	2145      	movs	r1, #69	; 0x45
   206a6:	5c52      	ldrb	r2, [r2, r1]
   206a8:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   206aa:	683a      	ldr	r2, [r7, #0]
   206ac:	1d39      	adds	r1, r7, #4
   206ae:	693b      	ldr	r3, [r7, #16]
   206b0:	0018      	movs	r0, r3
   206b2:	4b13      	ldr	r3, [pc, #76]	; (20700 <prvNotifyQueueSetContainer+0x9c>)
   206b4:	4798      	blx	r3
   206b6:	0003      	movs	r3, r0
   206b8:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   206ba:	230f      	movs	r3, #15
   206bc:	18fb      	adds	r3, r7, r3
   206be:	781b      	ldrb	r3, [r3, #0]
   206c0:	b25b      	sxtb	r3, r3
   206c2:	3301      	adds	r3, #1
   206c4:	d10d      	bne.n	206e2 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   206c6:	693b      	ldr	r3, [r7, #16]
   206c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   206ca:	2b00      	cmp	r3, #0
   206cc:	d012      	beq.n	206f4 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   206ce:	693b      	ldr	r3, [r7, #16]
   206d0:	3324      	adds	r3, #36	; 0x24
   206d2:	0018      	movs	r0, r3
   206d4:	4b0b      	ldr	r3, [pc, #44]	; (20704 <prvNotifyQueueSetContainer+0xa0>)
   206d6:	4798      	blx	r3
   206d8:	1e03      	subs	r3, r0, #0
   206da:	d00b      	beq.n	206f4 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   206dc:	2301      	movs	r3, #1
   206de:	617b      	str	r3, [r7, #20]
   206e0:	e008      	b.n	206f4 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   206e2:	230f      	movs	r3, #15
   206e4:	18fb      	adds	r3, r7, r3
   206e6:	781b      	ldrb	r3, [r3, #0]
   206e8:	3301      	adds	r3, #1
   206ea:	b2db      	uxtb	r3, r3
   206ec:	b259      	sxtb	r1, r3
   206ee:	693b      	ldr	r3, [r7, #16]
   206f0:	2245      	movs	r2, #69	; 0x45
   206f2:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   206f4:	697b      	ldr	r3, [r7, #20]
	}
   206f6:	0018      	movs	r0, r3
   206f8:	46bd      	mov	sp, r7
   206fa:	b006      	add	sp, #24
   206fc:	bd80      	pop	{r7, pc}
   206fe:	46c0      	nop			; (mov r8, r8)
   20700:	00020361 	.word	0x00020361
   20704:	00021099 	.word	0x00021099

00020708 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   20708:	b590      	push	{r4, r7, lr}
   2070a:	b08d      	sub	sp, #52	; 0x34
   2070c:	af04      	add	r7, sp, #16
   2070e:	60f8      	str	r0, [r7, #12]
   20710:	60b9      	str	r1, [r7, #8]
   20712:	603b      	str	r3, [r7, #0]
   20714:	1dbb      	adds	r3, r7, #6
   20716:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20718:	1dbb      	adds	r3, r7, #6
   2071a:	881b      	ldrh	r3, [r3, #0]
   2071c:	009b      	lsls	r3, r3, #2
   2071e:	0018      	movs	r0, r3
   20720:	4b1d      	ldr	r3, [pc, #116]	; (20798 <xTaskCreate+0x90>)
   20722:	4798      	blx	r3
   20724:	0003      	movs	r3, r0
   20726:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   20728:	697b      	ldr	r3, [r7, #20]
   2072a:	2b00      	cmp	r3, #0
   2072c:	d010      	beq.n	20750 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   2072e:	2050      	movs	r0, #80	; 0x50
   20730:	4b19      	ldr	r3, [pc, #100]	; (20798 <xTaskCreate+0x90>)
   20732:	4798      	blx	r3
   20734:	0003      	movs	r3, r0
   20736:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   20738:	69fb      	ldr	r3, [r7, #28]
   2073a:	2b00      	cmp	r3, #0
   2073c:	d003      	beq.n	20746 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   2073e:	69fb      	ldr	r3, [r7, #28]
   20740:	697a      	ldr	r2, [r7, #20]
   20742:	631a      	str	r2, [r3, #48]	; 0x30
   20744:	e006      	b.n	20754 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   20746:	697b      	ldr	r3, [r7, #20]
   20748:	0018      	movs	r0, r3
   2074a:	4b14      	ldr	r3, [pc, #80]	; (2079c <xTaskCreate+0x94>)
   2074c:	4798      	blx	r3
   2074e:	e001      	b.n	20754 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   20750:	2300      	movs	r3, #0
   20752:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   20754:	69fb      	ldr	r3, [r7, #28]
   20756:	2b00      	cmp	r3, #0
   20758:	d016      	beq.n	20788 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   2075a:	1dbb      	adds	r3, r7, #6
   2075c:	881a      	ldrh	r2, [r3, #0]
   2075e:	683c      	ldr	r4, [r7, #0]
   20760:	68b9      	ldr	r1, [r7, #8]
   20762:	68f8      	ldr	r0, [r7, #12]
   20764:	2300      	movs	r3, #0
   20766:	9303      	str	r3, [sp, #12]
   20768:	69fb      	ldr	r3, [r7, #28]
   2076a:	9302      	str	r3, [sp, #8]
   2076c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2076e:	9301      	str	r3, [sp, #4]
   20770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20772:	9300      	str	r3, [sp, #0]
   20774:	0023      	movs	r3, r4
   20776:	4c0a      	ldr	r4, [pc, #40]	; (207a0 <xTaskCreate+0x98>)
   20778:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   2077a:	69fb      	ldr	r3, [r7, #28]
   2077c:	0018      	movs	r0, r3
   2077e:	4b09      	ldr	r3, [pc, #36]	; (207a4 <xTaskCreate+0x9c>)
   20780:	4798      	blx	r3
			xReturn = pdPASS;
   20782:	2301      	movs	r3, #1
   20784:	61bb      	str	r3, [r7, #24]
   20786:	e002      	b.n	2078e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   20788:	2301      	movs	r3, #1
   2078a:	425b      	negs	r3, r3
   2078c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   2078e:	69bb      	ldr	r3, [r7, #24]
	}
   20790:	0018      	movs	r0, r3
   20792:	46bd      	mov	sp, r7
   20794:	b009      	add	sp, #36	; 0x24
   20796:	bd90      	pop	{r4, r7, pc}
   20798:	0001f96d 	.word	0x0001f96d
   2079c:	0001f9a1 	.word	0x0001f9a1
   207a0:	000207a9 	.word	0x000207a9
   207a4:	000208a5 	.word	0x000208a5

000207a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   207a8:	b580      	push	{r7, lr}
   207aa:	b086      	sub	sp, #24
   207ac:	af00      	add	r7, sp, #0
   207ae:	60f8      	str	r0, [r7, #12]
   207b0:	60b9      	str	r1, [r7, #8]
   207b2:	607a      	str	r2, [r7, #4]
   207b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   207b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   207b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   207ba:	687b      	ldr	r3, [r7, #4]
   207bc:	4936      	ldr	r1, [pc, #216]	; (20898 <prvInitialiseNewTask+0xf0>)
   207be:	468c      	mov	ip, r1
   207c0:	4463      	add	r3, ip
   207c2:	009b      	lsls	r3, r3, #2
   207c4:	18d3      	adds	r3, r2, r3
   207c6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   207c8:	693b      	ldr	r3, [r7, #16]
   207ca:	2207      	movs	r2, #7
   207cc:	4393      	bics	r3, r2
   207ce:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   207d0:	693b      	ldr	r3, [r7, #16]
   207d2:	2207      	movs	r2, #7
   207d4:	4013      	ands	r3, r2
   207d6:	d001      	beq.n	207dc <prvInitialiseNewTask+0x34>
   207d8:	b672      	cpsid	i
   207da:	e7fe      	b.n	207da <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   207dc:	2300      	movs	r3, #0
   207de:	617b      	str	r3, [r7, #20]
   207e0:	e013      	b.n	2080a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   207e2:	68ba      	ldr	r2, [r7, #8]
   207e4:	697b      	ldr	r3, [r7, #20]
   207e6:	18d3      	adds	r3, r2, r3
   207e8:	7818      	ldrb	r0, [r3, #0]
   207ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   207ec:	2134      	movs	r1, #52	; 0x34
   207ee:	697b      	ldr	r3, [r7, #20]
   207f0:	18d3      	adds	r3, r2, r3
   207f2:	185b      	adds	r3, r3, r1
   207f4:	1c02      	adds	r2, r0, #0
   207f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   207f8:	68ba      	ldr	r2, [r7, #8]
   207fa:	697b      	ldr	r3, [r7, #20]
   207fc:	18d3      	adds	r3, r2, r3
   207fe:	781b      	ldrb	r3, [r3, #0]
   20800:	2b00      	cmp	r3, #0
   20802:	d006      	beq.n	20812 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   20804:	697b      	ldr	r3, [r7, #20]
   20806:	3301      	adds	r3, #1
   20808:	617b      	str	r3, [r7, #20]
   2080a:	697b      	ldr	r3, [r7, #20]
   2080c:	2b09      	cmp	r3, #9
   2080e:	d9e8      	bls.n	207e2 <prvInitialiseNewTask+0x3a>
   20810:	e000      	b.n	20814 <prvInitialiseNewTask+0x6c>
		{
			break;
   20812:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   20814:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20816:	223d      	movs	r2, #61	; 0x3d
   20818:	2100      	movs	r1, #0
   2081a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   2081c:	6a3b      	ldr	r3, [r7, #32]
   2081e:	2b04      	cmp	r3, #4
   20820:	d901      	bls.n	20826 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   20822:	2304      	movs	r3, #4
   20824:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   20826:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20828:	6a3a      	ldr	r2, [r7, #32]
   2082a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   2082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2082e:	6a3a      	ldr	r2, [r7, #32]
   20830:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
   20832:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20834:	2200      	movs	r2, #0
   20836:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   20838:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2083a:	3304      	adds	r3, #4
   2083c:	0018      	movs	r0, r3
   2083e:	4b17      	ldr	r3, [pc, #92]	; (2089c <prvInitialiseNewTask+0xf4>)
   20840:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   20842:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20844:	3318      	adds	r3, #24
   20846:	0018      	movs	r0, r3
   20848:	4b14      	ldr	r3, [pc, #80]	; (2089c <prvInitialiseNewTask+0xf4>)
   2084a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   2084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2084e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20850:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20852:	6a3b      	ldr	r3, [r7, #32]
   20854:	2205      	movs	r2, #5
   20856:	1ad2      	subs	r2, r2, r3
   20858:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2085a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   2085c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2085e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20860:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   20862:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20864:	2200      	movs	r2, #0
   20866:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   20868:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2086a:	224c      	movs	r2, #76	; 0x4c
   2086c:	2100      	movs	r1, #0
   2086e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   20870:	683a      	ldr	r2, [r7, #0]
   20872:	68f9      	ldr	r1, [r7, #12]
   20874:	693b      	ldr	r3, [r7, #16]
   20876:	0018      	movs	r0, r3
   20878:	4b09      	ldr	r3, [pc, #36]	; (208a0 <prvInitialiseNewTask+0xf8>)
   2087a:	4798      	blx	r3
   2087c:	0002      	movs	r2, r0
   2087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20880:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   20882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20884:	2b00      	cmp	r3, #0
   20886:	d002      	beq.n	2088e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   20888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2088a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2088c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   2088e:	46c0      	nop			; (mov r8, r8)
   20890:	46bd      	mov	sp, r7
   20892:	b006      	add	sp, #24
   20894:	bd80      	pop	{r7, pc}
   20896:	46c0      	nop			; (mov r8, r8)
   20898:	3fffffff 	.word	0x3fffffff
   2089c:	0001fa11 	.word	0x0001fa11
   208a0:	0001f6f5 	.word	0x0001f6f5

000208a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   208a4:	b580      	push	{r7, lr}
   208a6:	b082      	sub	sp, #8
   208a8:	af00      	add	r7, sp, #0
   208aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   208ac:	4b29      	ldr	r3, [pc, #164]	; (20954 <prvAddNewTaskToReadyList+0xb0>)
   208ae:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   208b0:	4b29      	ldr	r3, [pc, #164]	; (20958 <prvAddNewTaskToReadyList+0xb4>)
   208b2:	681b      	ldr	r3, [r3, #0]
   208b4:	1c5a      	adds	r2, r3, #1
   208b6:	4b28      	ldr	r3, [pc, #160]	; (20958 <prvAddNewTaskToReadyList+0xb4>)
   208b8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   208ba:	4b28      	ldr	r3, [pc, #160]	; (2095c <prvAddNewTaskToReadyList+0xb8>)
   208bc:	681b      	ldr	r3, [r3, #0]
   208be:	2b00      	cmp	r3, #0
   208c0:	d109      	bne.n	208d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   208c2:	4b26      	ldr	r3, [pc, #152]	; (2095c <prvAddNewTaskToReadyList+0xb8>)
   208c4:	687a      	ldr	r2, [r7, #4]
   208c6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   208c8:	4b23      	ldr	r3, [pc, #140]	; (20958 <prvAddNewTaskToReadyList+0xb4>)
   208ca:	681b      	ldr	r3, [r3, #0]
   208cc:	2b01      	cmp	r3, #1
   208ce:	d110      	bne.n	208f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   208d0:	4b23      	ldr	r3, [pc, #140]	; (20960 <prvAddNewTaskToReadyList+0xbc>)
   208d2:	4798      	blx	r3
   208d4:	e00d      	b.n	208f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   208d6:	4b23      	ldr	r3, [pc, #140]	; (20964 <prvAddNewTaskToReadyList+0xc0>)
   208d8:	681b      	ldr	r3, [r3, #0]
   208da:	2b00      	cmp	r3, #0
   208dc:	d109      	bne.n	208f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   208de:	4b1f      	ldr	r3, [pc, #124]	; (2095c <prvAddNewTaskToReadyList+0xb8>)
   208e0:	681b      	ldr	r3, [r3, #0]
   208e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   208e4:	687b      	ldr	r3, [r7, #4]
   208e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   208e8:	429a      	cmp	r2, r3
   208ea:	d802      	bhi.n	208f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   208ec:	4b1b      	ldr	r3, [pc, #108]	; (2095c <prvAddNewTaskToReadyList+0xb8>)
   208ee:	687a      	ldr	r2, [r7, #4]
   208f0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   208f2:	4b1d      	ldr	r3, [pc, #116]	; (20968 <prvAddNewTaskToReadyList+0xc4>)
   208f4:	681b      	ldr	r3, [r3, #0]
   208f6:	1c5a      	adds	r2, r3, #1
   208f8:	4b1b      	ldr	r3, [pc, #108]	; (20968 <prvAddNewTaskToReadyList+0xc4>)
   208fa:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   208fc:	687b      	ldr	r3, [r7, #4]
   208fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20900:	4b1a      	ldr	r3, [pc, #104]	; (2096c <prvAddNewTaskToReadyList+0xc8>)
   20902:	681b      	ldr	r3, [r3, #0]
   20904:	429a      	cmp	r2, r3
   20906:	d903      	bls.n	20910 <prvAddNewTaskToReadyList+0x6c>
   20908:	687b      	ldr	r3, [r7, #4]
   2090a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2090c:	4b17      	ldr	r3, [pc, #92]	; (2096c <prvAddNewTaskToReadyList+0xc8>)
   2090e:	601a      	str	r2, [r3, #0]
   20910:	687b      	ldr	r3, [r7, #4]
   20912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20914:	0013      	movs	r3, r2
   20916:	009b      	lsls	r3, r3, #2
   20918:	189b      	adds	r3, r3, r2
   2091a:	009b      	lsls	r3, r3, #2
   2091c:	4a14      	ldr	r2, [pc, #80]	; (20970 <prvAddNewTaskToReadyList+0xcc>)
   2091e:	189a      	adds	r2, r3, r2
   20920:	687b      	ldr	r3, [r7, #4]
   20922:	3304      	adds	r3, #4
   20924:	0019      	movs	r1, r3
   20926:	0010      	movs	r0, r2
   20928:	4b12      	ldr	r3, [pc, #72]	; (20974 <prvAddNewTaskToReadyList+0xd0>)
   2092a:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   2092c:	4b12      	ldr	r3, [pc, #72]	; (20978 <prvAddNewTaskToReadyList+0xd4>)
   2092e:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   20930:	4b0c      	ldr	r3, [pc, #48]	; (20964 <prvAddNewTaskToReadyList+0xc0>)
   20932:	681b      	ldr	r3, [r3, #0]
   20934:	2b00      	cmp	r3, #0
   20936:	d008      	beq.n	2094a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   20938:	4b08      	ldr	r3, [pc, #32]	; (2095c <prvAddNewTaskToReadyList+0xb8>)
   2093a:	681b      	ldr	r3, [r3, #0]
   2093c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2093e:	687b      	ldr	r3, [r7, #4]
   20940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20942:	429a      	cmp	r2, r3
   20944:	d201      	bcs.n	2094a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   20946:	4b0d      	ldr	r3, [pc, #52]	; (2097c <prvAddNewTaskToReadyList+0xd8>)
   20948:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   2094a:	46c0      	nop			; (mov r8, r8)
   2094c:	46bd      	mov	sp, r7
   2094e:	b002      	add	sp, #8
   20950:	bd80      	pop	{r7, pc}
   20952:	46c0      	nop			; (mov r8, r8)
   20954:	0001f831 	.word	0x0001f831
   20958:	20000590 	.word	0x20000590
   2095c:	200004b8 	.word	0x200004b8
   20960:	00021269 	.word	0x00021269
   20964:	2000059c 	.word	0x2000059c
   20968:	200005ac 	.word	0x200005ac
   2096c:	20000598 	.word	0x20000598
   20970:	200004bc 	.word	0x200004bc
   20974:	0001fa27 	.word	0x0001fa27
   20978:	0001f855 	.word	0x0001f855
   2097c:	0001f811 	.word	0x0001f811

00020980 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   20980:	b580      	push	{r7, lr}
   20982:	b086      	sub	sp, #24
   20984:	af00      	add	r7, sp, #0
   20986:	6078      	str	r0, [r7, #4]
   20988:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   2098a:	2300      	movs	r3, #0
   2098c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   2098e:	687b      	ldr	r3, [r7, #4]
   20990:	2b00      	cmp	r3, #0
   20992:	d101      	bne.n	20998 <vTaskDelayUntil+0x18>
   20994:	b672      	cpsid	i
   20996:	e7fe      	b.n	20996 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
   20998:	683b      	ldr	r3, [r7, #0]
   2099a:	2b00      	cmp	r3, #0
   2099c:	d101      	bne.n	209a2 <vTaskDelayUntil+0x22>
   2099e:	b672      	cpsid	i
   209a0:	e7fe      	b.n	209a0 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
   209a2:	4b23      	ldr	r3, [pc, #140]	; (20a30 <vTaskDelayUntil+0xb0>)
   209a4:	681b      	ldr	r3, [r3, #0]
   209a6:	2b00      	cmp	r3, #0
   209a8:	d001      	beq.n	209ae <vTaskDelayUntil+0x2e>
   209aa:	b672      	cpsid	i
   209ac:	e7fe      	b.n	209ac <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
   209ae:	4b21      	ldr	r3, [pc, #132]	; (20a34 <vTaskDelayUntil+0xb4>)
   209b0:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   209b2:	4b21      	ldr	r3, [pc, #132]	; (20a38 <vTaskDelayUntil+0xb8>)
   209b4:	681b      	ldr	r3, [r3, #0]
   209b6:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   209b8:	687b      	ldr	r3, [r7, #4]
   209ba:	681a      	ldr	r2, [r3, #0]
   209bc:	683b      	ldr	r3, [r7, #0]
   209be:	18d3      	adds	r3, r2, r3
   209c0:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   209c2:	687b      	ldr	r3, [r7, #4]
   209c4:	681a      	ldr	r2, [r3, #0]
   209c6:	693b      	ldr	r3, [r7, #16]
   209c8:	429a      	cmp	r2, r3
   209ca:	d90b      	bls.n	209e4 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   209cc:	687b      	ldr	r3, [r7, #4]
   209ce:	681a      	ldr	r2, [r3, #0]
   209d0:	68fb      	ldr	r3, [r7, #12]
   209d2:	429a      	cmp	r2, r3
   209d4:	d911      	bls.n	209fa <vTaskDelayUntil+0x7a>
   209d6:	68fa      	ldr	r2, [r7, #12]
   209d8:	693b      	ldr	r3, [r7, #16]
   209da:	429a      	cmp	r2, r3
   209dc:	d90d      	bls.n	209fa <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   209de:	2301      	movs	r3, #1
   209e0:	617b      	str	r3, [r7, #20]
   209e2:	e00a      	b.n	209fa <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   209e4:	687b      	ldr	r3, [r7, #4]
   209e6:	681a      	ldr	r2, [r3, #0]
   209e8:	68fb      	ldr	r3, [r7, #12]
   209ea:	429a      	cmp	r2, r3
   209ec:	d803      	bhi.n	209f6 <vTaskDelayUntil+0x76>
   209ee:	68fa      	ldr	r2, [r7, #12]
   209f0:	693b      	ldr	r3, [r7, #16]
   209f2:	429a      	cmp	r2, r3
   209f4:	d901      	bls.n	209fa <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   209f6:	2301      	movs	r3, #1
   209f8:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   209fa:	687b      	ldr	r3, [r7, #4]
   209fc:	68fa      	ldr	r2, [r7, #12]
   209fe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   20a00:	697b      	ldr	r3, [r7, #20]
   20a02:	2b00      	cmp	r3, #0
   20a04:	d006      	beq.n	20a14 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   20a06:	68fa      	ldr	r2, [r7, #12]
   20a08:	693b      	ldr	r3, [r7, #16]
   20a0a:	1ad3      	subs	r3, r2, r3
   20a0c:	2100      	movs	r1, #0
   20a0e:	0018      	movs	r0, r3
   20a10:	4b0a      	ldr	r3, [pc, #40]	; (20a3c <vTaskDelayUntil+0xbc>)
   20a12:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   20a14:	4b0a      	ldr	r3, [pc, #40]	; (20a40 <vTaskDelayUntil+0xc0>)
   20a16:	4798      	blx	r3
   20a18:	0003      	movs	r3, r0
   20a1a:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   20a1c:	68bb      	ldr	r3, [r7, #8]
   20a1e:	2b00      	cmp	r3, #0
   20a20:	d101      	bne.n	20a26 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
   20a22:	4b08      	ldr	r3, [pc, #32]	; (20a44 <vTaskDelayUntil+0xc4>)
   20a24:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   20a26:	46c0      	nop			; (mov r8, r8)
   20a28:	46bd      	mov	sp, r7
   20a2a:	b006      	add	sp, #24
   20a2c:	bd80      	pop	{r7, pc}
   20a2e:	46c0      	nop			; (mov r8, r8)
   20a30:	200005b8 	.word	0x200005b8
   20a34:	00020c61 	.word	0x00020c61
   20a38:	20000594 	.word	0x20000594
   20a3c:	00021859 	.word	0x00021859
   20a40:	00020c79 	.word	0x00020c79
   20a44:	0001f811 	.word	0x0001f811

00020a48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   20a48:	b580      	push	{r7, lr}
   20a4a:	b084      	sub	sp, #16
   20a4c:	af00      	add	r7, sp, #0
   20a4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   20a50:	2300      	movs	r3, #0
   20a52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   20a54:	687b      	ldr	r3, [r7, #4]
   20a56:	2b00      	cmp	r3, #0
   20a58:	d010      	beq.n	20a7c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   20a5a:	4b0d      	ldr	r3, [pc, #52]	; (20a90 <vTaskDelay+0x48>)
   20a5c:	681b      	ldr	r3, [r3, #0]
   20a5e:	2b00      	cmp	r3, #0
   20a60:	d001      	beq.n	20a66 <vTaskDelay+0x1e>
   20a62:	b672      	cpsid	i
   20a64:	e7fe      	b.n	20a64 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   20a66:	4b0b      	ldr	r3, [pc, #44]	; (20a94 <vTaskDelay+0x4c>)
   20a68:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   20a6a:	687b      	ldr	r3, [r7, #4]
   20a6c:	2100      	movs	r1, #0
   20a6e:	0018      	movs	r0, r3
   20a70:	4b09      	ldr	r3, [pc, #36]	; (20a98 <vTaskDelay+0x50>)
   20a72:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   20a74:	4b09      	ldr	r3, [pc, #36]	; (20a9c <vTaskDelay+0x54>)
   20a76:	4798      	blx	r3
   20a78:	0003      	movs	r3, r0
   20a7a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   20a7c:	68fb      	ldr	r3, [r7, #12]
   20a7e:	2b00      	cmp	r3, #0
   20a80:	d101      	bne.n	20a86 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   20a82:	4b07      	ldr	r3, [pc, #28]	; (20aa0 <vTaskDelay+0x58>)
   20a84:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   20a86:	46c0      	nop			; (mov r8, r8)
   20a88:	46bd      	mov	sp, r7
   20a8a:	b004      	add	sp, #16
   20a8c:	bd80      	pop	{r7, pc}
   20a8e:	46c0      	nop			; (mov r8, r8)
   20a90:	200005b8 	.word	0x200005b8
   20a94:	00020c61 	.word	0x00020c61
   20a98:	00021859 	.word	0x00021859
   20a9c:	00020c79 	.word	0x00020c79
   20aa0:	0001f811 	.word	0x0001f811

00020aa4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   20aa4:	b580      	push	{r7, lr}
   20aa6:	b086      	sub	sp, #24
   20aa8:	af00      	add	r7, sp, #0
   20aaa:	6078      	str	r0, [r7, #4]
   20aac:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   20aae:	2300      	movs	r3, #0
   20ab0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
   20ab2:	683b      	ldr	r3, [r7, #0]
   20ab4:	2b04      	cmp	r3, #4
   20ab6:	d901      	bls.n	20abc <vTaskPrioritySet+0x18>
   20ab8:	b672      	cpsid	i
   20aba:	e7fe      	b.n	20aba <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   20abc:	683b      	ldr	r3, [r7, #0]
   20abe:	2b04      	cmp	r3, #4
   20ac0:	d901      	bls.n	20ac6 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   20ac2:	2304      	movs	r3, #4
   20ac4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   20ac6:	4b3d      	ldr	r3, [pc, #244]	; (20bbc <vTaskPrioritySet+0x118>)
   20ac8:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   20aca:	687b      	ldr	r3, [r7, #4]
   20acc:	2b00      	cmp	r3, #0
   20ace:	d102      	bne.n	20ad6 <vTaskPrioritySet+0x32>
   20ad0:	4b3b      	ldr	r3, [pc, #236]	; (20bc0 <vTaskPrioritySet+0x11c>)
   20ad2:	681b      	ldr	r3, [r3, #0]
   20ad4:	e000      	b.n	20ad8 <vTaskPrioritySet+0x34>
   20ad6:	687b      	ldr	r3, [r7, #4]
   20ad8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
   20ada:	693b      	ldr	r3, [r7, #16]
   20adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20ade:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   20ae0:	68fa      	ldr	r2, [r7, #12]
   20ae2:	683b      	ldr	r3, [r7, #0]
   20ae4:	429a      	cmp	r2, r3
   20ae6:	d062      	beq.n	20bae <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   20ae8:	683a      	ldr	r2, [r7, #0]
   20aea:	68fb      	ldr	r3, [r7, #12]
   20aec:	429a      	cmp	r2, r3
   20aee:	d90d      	bls.n	20b0c <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
   20af0:	4b33      	ldr	r3, [pc, #204]	; (20bc0 <vTaskPrioritySet+0x11c>)
   20af2:	681b      	ldr	r3, [r3, #0]
   20af4:	693a      	ldr	r2, [r7, #16]
   20af6:	429a      	cmp	r2, r3
   20af8:	d00f      	beq.n	20b1a <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   20afa:	4b31      	ldr	r3, [pc, #196]	; (20bc0 <vTaskPrioritySet+0x11c>)
   20afc:	681b      	ldr	r3, [r3, #0]
   20afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b00:	683b      	ldr	r3, [r7, #0]
   20b02:	429a      	cmp	r2, r3
   20b04:	d809      	bhi.n	20b1a <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
   20b06:	2301      	movs	r3, #1
   20b08:	617b      	str	r3, [r7, #20]
   20b0a:	e006      	b.n	20b1a <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   20b0c:	4b2c      	ldr	r3, [pc, #176]	; (20bc0 <vTaskPrioritySet+0x11c>)
   20b0e:	681b      	ldr	r3, [r3, #0]
   20b10:	693a      	ldr	r2, [r7, #16]
   20b12:	429a      	cmp	r2, r3
   20b14:	d101      	bne.n	20b1a <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   20b16:	2301      	movs	r3, #1
   20b18:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   20b1a:	693b      	ldr	r3, [r7, #16]
   20b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20b1e:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   20b20:	693b      	ldr	r3, [r7, #16]
   20b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20b24:	693b      	ldr	r3, [r7, #16]
   20b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20b28:	429a      	cmp	r2, r3
   20b2a:	d102      	bne.n	20b32 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
   20b2c:	693b      	ldr	r3, [r7, #16]
   20b2e:	683a      	ldr	r2, [r7, #0]
   20b30:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   20b32:	693b      	ldr	r3, [r7, #16]
   20b34:	683a      	ldr	r2, [r7, #0]
   20b36:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   20b38:	693b      	ldr	r3, [r7, #16]
   20b3a:	699b      	ldr	r3, [r3, #24]
   20b3c:	2b00      	cmp	r3, #0
   20b3e:	db04      	blt.n	20b4a <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20b40:	683b      	ldr	r3, [r7, #0]
   20b42:	2205      	movs	r2, #5
   20b44:	1ad2      	subs	r2, r2, r3
   20b46:	693b      	ldr	r3, [r7, #16]
   20b48:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   20b4a:	693b      	ldr	r3, [r7, #16]
   20b4c:	6959      	ldr	r1, [r3, #20]
   20b4e:	68ba      	ldr	r2, [r7, #8]
   20b50:	0013      	movs	r3, r2
   20b52:	009b      	lsls	r3, r3, #2
   20b54:	189b      	adds	r3, r3, r2
   20b56:	009b      	lsls	r3, r3, #2
   20b58:	4a1a      	ldr	r2, [pc, #104]	; (20bc4 <vTaskPrioritySet+0x120>)
   20b5a:	189b      	adds	r3, r3, r2
   20b5c:	4299      	cmp	r1, r3
   20b5e:	d101      	bne.n	20b64 <vTaskPrioritySet+0xc0>
   20b60:	2301      	movs	r3, #1
   20b62:	e000      	b.n	20b66 <vTaskPrioritySet+0xc2>
   20b64:	2300      	movs	r3, #0
   20b66:	2b00      	cmp	r3, #0
   20b68:	d01c      	beq.n	20ba4 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20b6a:	693b      	ldr	r3, [r7, #16]
   20b6c:	3304      	adds	r3, #4
   20b6e:	0018      	movs	r0, r3
   20b70:	4b15      	ldr	r3, [pc, #84]	; (20bc8 <vTaskPrioritySet+0x124>)
   20b72:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   20b74:	693b      	ldr	r3, [r7, #16]
   20b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b78:	4b14      	ldr	r3, [pc, #80]	; (20bcc <vTaskPrioritySet+0x128>)
   20b7a:	681b      	ldr	r3, [r3, #0]
   20b7c:	429a      	cmp	r2, r3
   20b7e:	d903      	bls.n	20b88 <vTaskPrioritySet+0xe4>
   20b80:	693b      	ldr	r3, [r7, #16]
   20b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b84:	4b11      	ldr	r3, [pc, #68]	; (20bcc <vTaskPrioritySet+0x128>)
   20b86:	601a      	str	r2, [r3, #0]
   20b88:	693b      	ldr	r3, [r7, #16]
   20b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20b8c:	0013      	movs	r3, r2
   20b8e:	009b      	lsls	r3, r3, #2
   20b90:	189b      	adds	r3, r3, r2
   20b92:	009b      	lsls	r3, r3, #2
   20b94:	4a0b      	ldr	r2, [pc, #44]	; (20bc4 <vTaskPrioritySet+0x120>)
   20b96:	189a      	adds	r2, r3, r2
   20b98:	693b      	ldr	r3, [r7, #16]
   20b9a:	3304      	adds	r3, #4
   20b9c:	0019      	movs	r1, r3
   20b9e:	0010      	movs	r0, r2
   20ba0:	4b0b      	ldr	r3, [pc, #44]	; (20bd0 <vTaskPrioritySet+0x12c>)
   20ba2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
   20ba4:	697b      	ldr	r3, [r7, #20]
   20ba6:	2b00      	cmp	r3, #0
   20ba8:	d001      	beq.n	20bae <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
   20baa:	4b0a      	ldr	r3, [pc, #40]	; (20bd4 <vTaskPrioritySet+0x130>)
   20bac:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   20bae:	4b0a      	ldr	r3, [pc, #40]	; (20bd8 <vTaskPrioritySet+0x134>)
   20bb0:	4798      	blx	r3
	}
   20bb2:	46c0      	nop			; (mov r8, r8)
   20bb4:	46bd      	mov	sp, r7
   20bb6:	b006      	add	sp, #24
   20bb8:	bd80      	pop	{r7, pc}
   20bba:	46c0      	nop			; (mov r8, r8)
   20bbc:	0001f831 	.word	0x0001f831
   20bc0:	200004b8 	.word	0x200004b8
   20bc4:	200004bc 	.word	0x200004bc
   20bc8:	0001fad7 	.word	0x0001fad7
   20bcc:	20000598 	.word	0x20000598
   20bd0:	0001fa27 	.word	0x0001fa27
   20bd4:	0001f811 	.word	0x0001f811
   20bd8:	0001f855 	.word	0x0001f855

00020bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   20bdc:	b590      	push	{r4, r7, lr}
   20bde:	b085      	sub	sp, #20
   20be0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   20be2:	4916      	ldr	r1, [pc, #88]	; (20c3c <vTaskStartScheduler+0x60>)
   20be4:	4816      	ldr	r0, [pc, #88]	; (20c40 <vTaskStartScheduler+0x64>)
   20be6:	4b17      	ldr	r3, [pc, #92]	; (20c44 <vTaskStartScheduler+0x68>)
   20be8:	9301      	str	r3, [sp, #4]
   20bea:	2300      	movs	r3, #0
   20bec:	9300      	str	r3, [sp, #0]
   20bee:	2300      	movs	r3, #0
   20bf0:	2282      	movs	r2, #130	; 0x82
   20bf2:	4c15      	ldr	r4, [pc, #84]	; (20c48 <vTaskStartScheduler+0x6c>)
   20bf4:	47a0      	blx	r4
   20bf6:	0003      	movs	r3, r0
   20bf8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   20bfa:	687b      	ldr	r3, [r7, #4]
   20bfc:	2b01      	cmp	r3, #1
   20bfe:	d103      	bne.n	20c08 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   20c00:	4b12      	ldr	r3, [pc, #72]	; (20c4c <vTaskStartScheduler+0x70>)
   20c02:	4798      	blx	r3
   20c04:	0003      	movs	r3, r0
   20c06:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   20c08:	687b      	ldr	r3, [r7, #4]
   20c0a:	2b01      	cmp	r3, #1
   20c0c:	d10d      	bne.n	20c2a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   20c0e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   20c10:	4b0f      	ldr	r3, [pc, #60]	; (20c50 <vTaskStartScheduler+0x74>)
   20c12:	2201      	movs	r2, #1
   20c14:	4252      	negs	r2, r2
   20c16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   20c18:	4b0e      	ldr	r3, [pc, #56]	; (20c54 <vTaskStartScheduler+0x78>)
   20c1a:	2201      	movs	r2, #1
   20c1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   20c1e:	4b0e      	ldr	r3, [pc, #56]	; (20c58 <vTaskStartScheduler+0x7c>)
   20c20:	2200      	movs	r2, #0
   20c22:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   20c24:	4b0d      	ldr	r3, [pc, #52]	; (20c5c <vTaskStartScheduler+0x80>)
   20c26:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   20c28:	e004      	b.n	20c34 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   20c2a:	687b      	ldr	r3, [r7, #4]
   20c2c:	3301      	adds	r3, #1
   20c2e:	d101      	bne.n	20c34 <vTaskStartScheduler+0x58>
   20c30:	b672      	cpsid	i
   20c32:	e7fe      	b.n	20c32 <vTaskStartScheduler+0x56>
}
   20c34:	46c0      	nop			; (mov r8, r8)
   20c36:	46bd      	mov	sp, r7
   20c38:	b003      	add	sp, #12
   20c3a:	bd90      	pop	{r4, r7, pc}
   20c3c:	0002b5b4 	.word	0x0002b5b4
   20c40:	00021241 	.word	0x00021241
   20c44:	200005b4 	.word	0x200005b4
   20c48:	00020709 	.word	0x00020709
   20c4c:	0002190d 	.word	0x0002190d
   20c50:	200005b0 	.word	0x200005b0
   20c54:	2000059c 	.word	0x2000059c
   20c58:	20000594 	.word	0x20000594
   20c5c:	0001f7b9 	.word	0x0001f7b9

00020c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   20c60:	b580      	push	{r7, lr}
   20c62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   20c64:	4b03      	ldr	r3, [pc, #12]	; (20c74 <vTaskSuspendAll+0x14>)
   20c66:	681b      	ldr	r3, [r3, #0]
   20c68:	1c5a      	adds	r2, r3, #1
   20c6a:	4b02      	ldr	r3, [pc, #8]	; (20c74 <vTaskSuspendAll+0x14>)
   20c6c:	601a      	str	r2, [r3, #0]
}
   20c6e:	46c0      	nop			; (mov r8, r8)
   20c70:	46bd      	mov	sp, r7
   20c72:	bd80      	pop	{r7, pc}
   20c74:	200005b8 	.word	0x200005b8

00020c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   20c78:	b580      	push	{r7, lr}
   20c7a:	b084      	sub	sp, #16
   20c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   20c7e:	2300      	movs	r3, #0
   20c80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   20c82:	2300      	movs	r3, #0
   20c84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   20c86:	4b3a      	ldr	r3, [pc, #232]	; (20d70 <xTaskResumeAll+0xf8>)
   20c88:	681b      	ldr	r3, [r3, #0]
   20c8a:	2b00      	cmp	r3, #0
   20c8c:	d101      	bne.n	20c92 <xTaskResumeAll+0x1a>
   20c8e:	b672      	cpsid	i
   20c90:	e7fe      	b.n	20c90 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   20c92:	4b38      	ldr	r3, [pc, #224]	; (20d74 <xTaskResumeAll+0xfc>)
   20c94:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   20c96:	4b36      	ldr	r3, [pc, #216]	; (20d70 <xTaskResumeAll+0xf8>)
   20c98:	681b      	ldr	r3, [r3, #0]
   20c9a:	1e5a      	subs	r2, r3, #1
   20c9c:	4b34      	ldr	r3, [pc, #208]	; (20d70 <xTaskResumeAll+0xf8>)
   20c9e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20ca0:	4b33      	ldr	r3, [pc, #204]	; (20d70 <xTaskResumeAll+0xf8>)
   20ca2:	681b      	ldr	r3, [r3, #0]
   20ca4:	2b00      	cmp	r3, #0
   20ca6:	d15b      	bne.n	20d60 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   20ca8:	4b33      	ldr	r3, [pc, #204]	; (20d78 <xTaskResumeAll+0x100>)
   20caa:	681b      	ldr	r3, [r3, #0]
   20cac:	2b00      	cmp	r3, #0
   20cae:	d057      	beq.n	20d60 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20cb0:	e02f      	b.n	20d12 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   20cb2:	4b32      	ldr	r3, [pc, #200]	; (20d7c <xTaskResumeAll+0x104>)
   20cb4:	68db      	ldr	r3, [r3, #12]
   20cb6:	68db      	ldr	r3, [r3, #12]
   20cb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   20cba:	68fb      	ldr	r3, [r7, #12]
   20cbc:	3318      	adds	r3, #24
   20cbe:	0018      	movs	r0, r3
   20cc0:	4b2f      	ldr	r3, [pc, #188]	; (20d80 <xTaskResumeAll+0x108>)
   20cc2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20cc4:	68fb      	ldr	r3, [r7, #12]
   20cc6:	3304      	adds	r3, #4
   20cc8:	0018      	movs	r0, r3
   20cca:	4b2d      	ldr	r3, [pc, #180]	; (20d80 <xTaskResumeAll+0x108>)
   20ccc:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   20cce:	68fb      	ldr	r3, [r7, #12]
   20cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20cd2:	4b2c      	ldr	r3, [pc, #176]	; (20d84 <xTaskResumeAll+0x10c>)
   20cd4:	681b      	ldr	r3, [r3, #0]
   20cd6:	429a      	cmp	r2, r3
   20cd8:	d903      	bls.n	20ce2 <xTaskResumeAll+0x6a>
   20cda:	68fb      	ldr	r3, [r7, #12]
   20cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20cde:	4b29      	ldr	r3, [pc, #164]	; (20d84 <xTaskResumeAll+0x10c>)
   20ce0:	601a      	str	r2, [r3, #0]
   20ce2:	68fb      	ldr	r3, [r7, #12]
   20ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20ce6:	0013      	movs	r3, r2
   20ce8:	009b      	lsls	r3, r3, #2
   20cea:	189b      	adds	r3, r3, r2
   20cec:	009b      	lsls	r3, r3, #2
   20cee:	4a26      	ldr	r2, [pc, #152]	; (20d88 <xTaskResumeAll+0x110>)
   20cf0:	189a      	adds	r2, r3, r2
   20cf2:	68fb      	ldr	r3, [r7, #12]
   20cf4:	3304      	adds	r3, #4
   20cf6:	0019      	movs	r1, r3
   20cf8:	0010      	movs	r0, r2
   20cfa:	4b24      	ldr	r3, [pc, #144]	; (20d8c <xTaskResumeAll+0x114>)
   20cfc:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   20cfe:	68fb      	ldr	r3, [r7, #12]
   20d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20d02:	4b23      	ldr	r3, [pc, #140]	; (20d90 <xTaskResumeAll+0x118>)
   20d04:	681b      	ldr	r3, [r3, #0]
   20d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20d08:	429a      	cmp	r2, r3
   20d0a:	d302      	bcc.n	20d12 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   20d0c:	4b21      	ldr	r3, [pc, #132]	; (20d94 <xTaskResumeAll+0x11c>)
   20d0e:	2201      	movs	r2, #1
   20d10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20d12:	4b1a      	ldr	r3, [pc, #104]	; (20d7c <xTaskResumeAll+0x104>)
   20d14:	681b      	ldr	r3, [r3, #0]
   20d16:	2b00      	cmp	r3, #0
   20d18:	d1cb      	bne.n	20cb2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   20d1a:	68fb      	ldr	r3, [r7, #12]
   20d1c:	2b00      	cmp	r3, #0
   20d1e:	d001      	beq.n	20d24 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   20d20:	4b1d      	ldr	r3, [pc, #116]	; (20d98 <xTaskResumeAll+0x120>)
   20d22:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   20d24:	4b1d      	ldr	r3, [pc, #116]	; (20d9c <xTaskResumeAll+0x124>)
   20d26:	681b      	ldr	r3, [r3, #0]
   20d28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   20d2a:	687b      	ldr	r3, [r7, #4]
   20d2c:	2b00      	cmp	r3, #0
   20d2e:	d00f      	beq.n	20d50 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   20d30:	4b1b      	ldr	r3, [pc, #108]	; (20da0 <xTaskResumeAll+0x128>)
   20d32:	4798      	blx	r3
   20d34:	1e03      	subs	r3, r0, #0
   20d36:	d002      	beq.n	20d3e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   20d38:	4b16      	ldr	r3, [pc, #88]	; (20d94 <xTaskResumeAll+0x11c>)
   20d3a:	2201      	movs	r2, #1
   20d3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   20d3e:	687b      	ldr	r3, [r7, #4]
   20d40:	3b01      	subs	r3, #1
   20d42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   20d44:	687b      	ldr	r3, [r7, #4]
   20d46:	2b00      	cmp	r3, #0
   20d48:	d1f2      	bne.n	20d30 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   20d4a:	4b14      	ldr	r3, [pc, #80]	; (20d9c <xTaskResumeAll+0x124>)
   20d4c:	2200      	movs	r2, #0
   20d4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   20d50:	4b10      	ldr	r3, [pc, #64]	; (20d94 <xTaskResumeAll+0x11c>)
   20d52:	681b      	ldr	r3, [r3, #0]
   20d54:	2b00      	cmp	r3, #0
   20d56:	d003      	beq.n	20d60 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   20d58:	2301      	movs	r3, #1
   20d5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   20d5c:	4b11      	ldr	r3, [pc, #68]	; (20da4 <xTaskResumeAll+0x12c>)
   20d5e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20d60:	4b11      	ldr	r3, [pc, #68]	; (20da8 <xTaskResumeAll+0x130>)
   20d62:	4798      	blx	r3

	return xAlreadyYielded;
   20d64:	68bb      	ldr	r3, [r7, #8]
}
   20d66:	0018      	movs	r0, r3
   20d68:	46bd      	mov	sp, r7
   20d6a:	b004      	add	sp, #16
   20d6c:	bd80      	pop	{r7, pc}
   20d6e:	46c0      	nop			; (mov r8, r8)
   20d70:	200005b8 	.word	0x200005b8
   20d74:	0001f831 	.word	0x0001f831
   20d78:	20000590 	.word	0x20000590
   20d7c:	20000550 	.word	0x20000550
   20d80:	0001fad7 	.word	0x0001fad7
   20d84:	20000598 	.word	0x20000598
   20d88:	200004bc 	.word	0x200004bc
   20d8c:	0001fa27 	.word	0x0001fa27
   20d90:	200004b8 	.word	0x200004b8
   20d94:	200005a4 	.word	0x200005a4
   20d98:	00021389 	.word	0x00021389
   20d9c:	200005a0 	.word	0x200005a0
   20da0:	00020de9 	.word	0x00020de9
   20da4:	0001f811 	.word	0x0001f811
   20da8:	0001f855 	.word	0x0001f855

00020dac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   20dac:	b580      	push	{r7, lr}
   20dae:	b082      	sub	sp, #8
   20db0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   20db2:	4b04      	ldr	r3, [pc, #16]	; (20dc4 <xTaskGetTickCount+0x18>)
   20db4:	681b      	ldr	r3, [r3, #0]
   20db6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   20db8:	687b      	ldr	r3, [r7, #4]
}
   20dba:	0018      	movs	r0, r3
   20dbc:	46bd      	mov	sp, r7
   20dbe:	b002      	add	sp, #8
   20dc0:	bd80      	pop	{r7, pc}
   20dc2:	46c0      	nop			; (mov r8, r8)
   20dc4:	20000594 	.word	0x20000594

00020dc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
   20dc8:	b580      	push	{r7, lr}
   20dca:	b082      	sub	sp, #8
   20dcc:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
   20dce:	2300      	movs	r3, #0
   20dd0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
   20dd2:	4b04      	ldr	r3, [pc, #16]	; (20de4 <xTaskGetTickCountFromISR+0x1c>)
   20dd4:	681b      	ldr	r3, [r3, #0]
   20dd6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   20dd8:	683b      	ldr	r3, [r7, #0]
}
   20dda:	0018      	movs	r0, r3
   20ddc:	46bd      	mov	sp, r7
   20dde:	b002      	add	sp, #8
   20de0:	bd80      	pop	{r7, pc}
   20de2:	46c0      	nop			; (mov r8, r8)
   20de4:	20000594 	.word	0x20000594

00020de8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   20de8:	b580      	push	{r7, lr}
   20dea:	b086      	sub	sp, #24
   20dec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   20dee:	2300      	movs	r3, #0
   20df0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20df2:	4b4c      	ldr	r3, [pc, #304]	; (20f24 <xTaskIncrementTick+0x13c>)
   20df4:	681b      	ldr	r3, [r3, #0]
   20df6:	2b00      	cmp	r3, #0
   20df8:	d000      	beq.n	20dfc <xTaskIncrementTick+0x14>
   20dfa:	e083      	b.n	20f04 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   20dfc:	4b4a      	ldr	r3, [pc, #296]	; (20f28 <xTaskIncrementTick+0x140>)
   20dfe:	681b      	ldr	r3, [r3, #0]
   20e00:	3301      	adds	r3, #1
   20e02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   20e04:	4b48      	ldr	r3, [pc, #288]	; (20f28 <xTaskIncrementTick+0x140>)
   20e06:	693a      	ldr	r2, [r7, #16]
   20e08:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   20e0a:	693b      	ldr	r3, [r7, #16]
   20e0c:	2b00      	cmp	r3, #0
   20e0e:	d117      	bne.n	20e40 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   20e10:	4b46      	ldr	r3, [pc, #280]	; (20f2c <xTaskIncrementTick+0x144>)
   20e12:	681b      	ldr	r3, [r3, #0]
   20e14:	681b      	ldr	r3, [r3, #0]
   20e16:	2b00      	cmp	r3, #0
   20e18:	d001      	beq.n	20e1e <xTaskIncrementTick+0x36>
   20e1a:	b672      	cpsid	i
   20e1c:	e7fe      	b.n	20e1c <xTaskIncrementTick+0x34>
   20e1e:	4b43      	ldr	r3, [pc, #268]	; (20f2c <xTaskIncrementTick+0x144>)
   20e20:	681b      	ldr	r3, [r3, #0]
   20e22:	60fb      	str	r3, [r7, #12]
   20e24:	4b42      	ldr	r3, [pc, #264]	; (20f30 <xTaskIncrementTick+0x148>)
   20e26:	681a      	ldr	r2, [r3, #0]
   20e28:	4b40      	ldr	r3, [pc, #256]	; (20f2c <xTaskIncrementTick+0x144>)
   20e2a:	601a      	str	r2, [r3, #0]
   20e2c:	4b40      	ldr	r3, [pc, #256]	; (20f30 <xTaskIncrementTick+0x148>)
   20e2e:	68fa      	ldr	r2, [r7, #12]
   20e30:	601a      	str	r2, [r3, #0]
   20e32:	4b40      	ldr	r3, [pc, #256]	; (20f34 <xTaskIncrementTick+0x14c>)
   20e34:	681b      	ldr	r3, [r3, #0]
   20e36:	1c5a      	adds	r2, r3, #1
   20e38:	4b3e      	ldr	r3, [pc, #248]	; (20f34 <xTaskIncrementTick+0x14c>)
   20e3a:	601a      	str	r2, [r3, #0]
   20e3c:	4b3e      	ldr	r3, [pc, #248]	; (20f38 <xTaskIncrementTick+0x150>)
   20e3e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   20e40:	4b3e      	ldr	r3, [pc, #248]	; (20f3c <xTaskIncrementTick+0x154>)
   20e42:	681b      	ldr	r3, [r3, #0]
   20e44:	693a      	ldr	r2, [r7, #16]
   20e46:	429a      	cmp	r2, r3
   20e48:	d34e      	bcc.n	20ee8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20e4a:	4b38      	ldr	r3, [pc, #224]	; (20f2c <xTaskIncrementTick+0x144>)
   20e4c:	681b      	ldr	r3, [r3, #0]
   20e4e:	681b      	ldr	r3, [r3, #0]
   20e50:	2b00      	cmp	r3, #0
   20e52:	d101      	bne.n	20e58 <xTaskIncrementTick+0x70>
   20e54:	2301      	movs	r3, #1
   20e56:	e000      	b.n	20e5a <xTaskIncrementTick+0x72>
   20e58:	2300      	movs	r3, #0
   20e5a:	2b00      	cmp	r3, #0
   20e5c:	d004      	beq.n	20e68 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20e5e:	4b37      	ldr	r3, [pc, #220]	; (20f3c <xTaskIncrementTick+0x154>)
   20e60:	2201      	movs	r2, #1
   20e62:	4252      	negs	r2, r2
   20e64:	601a      	str	r2, [r3, #0]
					break;
   20e66:	e03f      	b.n	20ee8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   20e68:	4b30      	ldr	r3, [pc, #192]	; (20f2c <xTaskIncrementTick+0x144>)
   20e6a:	681b      	ldr	r3, [r3, #0]
   20e6c:	68db      	ldr	r3, [r3, #12]
   20e6e:	68db      	ldr	r3, [r3, #12]
   20e70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   20e72:	68bb      	ldr	r3, [r7, #8]
   20e74:	685b      	ldr	r3, [r3, #4]
   20e76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   20e78:	693a      	ldr	r2, [r7, #16]
   20e7a:	687b      	ldr	r3, [r7, #4]
   20e7c:	429a      	cmp	r2, r3
   20e7e:	d203      	bcs.n	20e88 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   20e80:	4b2e      	ldr	r3, [pc, #184]	; (20f3c <xTaskIncrementTick+0x154>)
   20e82:	687a      	ldr	r2, [r7, #4]
   20e84:	601a      	str	r2, [r3, #0]
						break;
   20e86:	e02f      	b.n	20ee8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20e88:	68bb      	ldr	r3, [r7, #8]
   20e8a:	3304      	adds	r3, #4
   20e8c:	0018      	movs	r0, r3
   20e8e:	4b2c      	ldr	r3, [pc, #176]	; (20f40 <xTaskIncrementTick+0x158>)
   20e90:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   20e92:	68bb      	ldr	r3, [r7, #8]
   20e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20e96:	2b00      	cmp	r3, #0
   20e98:	d004      	beq.n	20ea4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   20e9a:	68bb      	ldr	r3, [r7, #8]
   20e9c:	3318      	adds	r3, #24
   20e9e:	0018      	movs	r0, r3
   20ea0:	4b27      	ldr	r3, [pc, #156]	; (20f40 <xTaskIncrementTick+0x158>)
   20ea2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   20ea4:	68bb      	ldr	r3, [r7, #8]
   20ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20ea8:	4b26      	ldr	r3, [pc, #152]	; (20f44 <xTaskIncrementTick+0x15c>)
   20eaa:	681b      	ldr	r3, [r3, #0]
   20eac:	429a      	cmp	r2, r3
   20eae:	d903      	bls.n	20eb8 <xTaskIncrementTick+0xd0>
   20eb0:	68bb      	ldr	r3, [r7, #8]
   20eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20eb4:	4b23      	ldr	r3, [pc, #140]	; (20f44 <xTaskIncrementTick+0x15c>)
   20eb6:	601a      	str	r2, [r3, #0]
   20eb8:	68bb      	ldr	r3, [r7, #8]
   20eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20ebc:	0013      	movs	r3, r2
   20ebe:	009b      	lsls	r3, r3, #2
   20ec0:	189b      	adds	r3, r3, r2
   20ec2:	009b      	lsls	r3, r3, #2
   20ec4:	4a20      	ldr	r2, [pc, #128]	; (20f48 <xTaskIncrementTick+0x160>)
   20ec6:	189a      	adds	r2, r3, r2
   20ec8:	68bb      	ldr	r3, [r7, #8]
   20eca:	3304      	adds	r3, #4
   20ecc:	0019      	movs	r1, r3
   20ece:	0010      	movs	r0, r2
   20ed0:	4b1e      	ldr	r3, [pc, #120]	; (20f4c <xTaskIncrementTick+0x164>)
   20ed2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   20ed4:	68bb      	ldr	r3, [r7, #8]
   20ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20ed8:	4b1d      	ldr	r3, [pc, #116]	; (20f50 <xTaskIncrementTick+0x168>)
   20eda:	681b      	ldr	r3, [r3, #0]
   20edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20ede:	429a      	cmp	r2, r3
   20ee0:	d3b3      	bcc.n	20e4a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   20ee2:	2301      	movs	r3, #1
   20ee4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20ee6:	e7b0      	b.n	20e4a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   20ee8:	4b19      	ldr	r3, [pc, #100]	; (20f50 <xTaskIncrementTick+0x168>)
   20eea:	681b      	ldr	r3, [r3, #0]
   20eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20eee:	4916      	ldr	r1, [pc, #88]	; (20f48 <xTaskIncrementTick+0x160>)
   20ef0:	0013      	movs	r3, r2
   20ef2:	009b      	lsls	r3, r3, #2
   20ef4:	189b      	adds	r3, r3, r2
   20ef6:	009b      	lsls	r3, r3, #2
   20ef8:	585b      	ldr	r3, [r3, r1]
   20efa:	2b01      	cmp	r3, #1
   20efc:	d907      	bls.n	20f0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   20efe:	2301      	movs	r3, #1
   20f00:	617b      	str	r3, [r7, #20]
   20f02:	e004      	b.n	20f0e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   20f04:	4b13      	ldr	r3, [pc, #76]	; (20f54 <xTaskIncrementTick+0x16c>)
   20f06:	681b      	ldr	r3, [r3, #0]
   20f08:	1c5a      	adds	r2, r3, #1
   20f0a:	4b12      	ldr	r3, [pc, #72]	; (20f54 <xTaskIncrementTick+0x16c>)
   20f0c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   20f0e:	4b12      	ldr	r3, [pc, #72]	; (20f58 <xTaskIncrementTick+0x170>)
   20f10:	681b      	ldr	r3, [r3, #0]
   20f12:	2b00      	cmp	r3, #0
   20f14:	d001      	beq.n	20f1a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   20f16:	2301      	movs	r3, #1
   20f18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   20f1a:	697b      	ldr	r3, [r7, #20]
}
   20f1c:	0018      	movs	r0, r3
   20f1e:	46bd      	mov	sp, r7
   20f20:	b006      	add	sp, #24
   20f22:	bd80      	pop	{r7, pc}
   20f24:	200005b8 	.word	0x200005b8
   20f28:	20000594 	.word	0x20000594
   20f2c:	20000548 	.word	0x20000548
   20f30:	2000054c 	.word	0x2000054c
   20f34:	200005a8 	.word	0x200005a8
   20f38:	00021389 	.word	0x00021389
   20f3c:	200005b0 	.word	0x200005b0
   20f40:	0001fad7 	.word	0x0001fad7
   20f44:	20000598 	.word	0x20000598
   20f48:	200004bc 	.word	0x200004bc
   20f4c:	0001fa27 	.word	0x0001fa27
   20f50:	200004b8 	.word	0x200004b8
   20f54:	200005a0 	.word	0x200005a0
   20f58:	200005a4 	.word	0x200005a4

00020f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   20f5c:	b580      	push	{r7, lr}
   20f5e:	b082      	sub	sp, #8
   20f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   20f62:	4b22      	ldr	r3, [pc, #136]	; (20fec <vTaskSwitchContext+0x90>)
   20f64:	681b      	ldr	r3, [r3, #0]
   20f66:	2b00      	cmp	r3, #0
   20f68:	d003      	beq.n	20f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   20f6a:	4b21      	ldr	r3, [pc, #132]	; (20ff0 <vTaskSwitchContext+0x94>)
   20f6c:	2201      	movs	r2, #1
   20f6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   20f70:	e037      	b.n	20fe2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
   20f72:	4b1f      	ldr	r3, [pc, #124]	; (20ff0 <vTaskSwitchContext+0x94>)
   20f74:	2200      	movs	r2, #0
   20f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   20f78:	4b1e      	ldr	r3, [pc, #120]	; (20ff4 <vTaskSwitchContext+0x98>)
   20f7a:	681b      	ldr	r3, [r3, #0]
   20f7c:	607b      	str	r3, [r7, #4]
   20f7e:	e007      	b.n	20f90 <vTaskSwitchContext+0x34>
   20f80:	687b      	ldr	r3, [r7, #4]
   20f82:	2b00      	cmp	r3, #0
   20f84:	d101      	bne.n	20f8a <vTaskSwitchContext+0x2e>
   20f86:	b672      	cpsid	i
   20f88:	e7fe      	b.n	20f88 <vTaskSwitchContext+0x2c>
   20f8a:	687b      	ldr	r3, [r7, #4]
   20f8c:	3b01      	subs	r3, #1
   20f8e:	607b      	str	r3, [r7, #4]
   20f90:	4919      	ldr	r1, [pc, #100]	; (20ff8 <vTaskSwitchContext+0x9c>)
   20f92:	687a      	ldr	r2, [r7, #4]
   20f94:	0013      	movs	r3, r2
   20f96:	009b      	lsls	r3, r3, #2
   20f98:	189b      	adds	r3, r3, r2
   20f9a:	009b      	lsls	r3, r3, #2
   20f9c:	585b      	ldr	r3, [r3, r1]
   20f9e:	2b00      	cmp	r3, #0
   20fa0:	d0ee      	beq.n	20f80 <vTaskSwitchContext+0x24>
   20fa2:	687a      	ldr	r2, [r7, #4]
   20fa4:	0013      	movs	r3, r2
   20fa6:	009b      	lsls	r3, r3, #2
   20fa8:	189b      	adds	r3, r3, r2
   20faa:	009b      	lsls	r3, r3, #2
   20fac:	4a12      	ldr	r2, [pc, #72]	; (20ff8 <vTaskSwitchContext+0x9c>)
   20fae:	189b      	adds	r3, r3, r2
   20fb0:	603b      	str	r3, [r7, #0]
   20fb2:	683b      	ldr	r3, [r7, #0]
   20fb4:	685b      	ldr	r3, [r3, #4]
   20fb6:	685a      	ldr	r2, [r3, #4]
   20fb8:	683b      	ldr	r3, [r7, #0]
   20fba:	605a      	str	r2, [r3, #4]
   20fbc:	683b      	ldr	r3, [r7, #0]
   20fbe:	685a      	ldr	r2, [r3, #4]
   20fc0:	683b      	ldr	r3, [r7, #0]
   20fc2:	3308      	adds	r3, #8
   20fc4:	429a      	cmp	r2, r3
   20fc6:	d104      	bne.n	20fd2 <vTaskSwitchContext+0x76>
   20fc8:	683b      	ldr	r3, [r7, #0]
   20fca:	685b      	ldr	r3, [r3, #4]
   20fcc:	685a      	ldr	r2, [r3, #4]
   20fce:	683b      	ldr	r3, [r7, #0]
   20fd0:	605a      	str	r2, [r3, #4]
   20fd2:	683b      	ldr	r3, [r7, #0]
   20fd4:	685b      	ldr	r3, [r3, #4]
   20fd6:	68da      	ldr	r2, [r3, #12]
   20fd8:	4b08      	ldr	r3, [pc, #32]	; (20ffc <vTaskSwitchContext+0xa0>)
   20fda:	601a      	str	r2, [r3, #0]
   20fdc:	4b05      	ldr	r3, [pc, #20]	; (20ff4 <vTaskSwitchContext+0x98>)
   20fde:	687a      	ldr	r2, [r7, #4]
   20fe0:	601a      	str	r2, [r3, #0]
}
   20fe2:	46c0      	nop			; (mov r8, r8)
   20fe4:	46bd      	mov	sp, r7
   20fe6:	b002      	add	sp, #8
   20fe8:	bd80      	pop	{r7, pc}
   20fea:	46c0      	nop			; (mov r8, r8)
   20fec:	200005b8 	.word	0x200005b8
   20ff0:	200005a4 	.word	0x200005a4
   20ff4:	20000598 	.word	0x20000598
   20ff8:	200004bc 	.word	0x200004bc
   20ffc:	200004b8 	.word	0x200004b8

00021000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   21000:	b580      	push	{r7, lr}
   21002:	b082      	sub	sp, #8
   21004:	af00      	add	r7, sp, #0
   21006:	6078      	str	r0, [r7, #4]
   21008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   2100a:	687b      	ldr	r3, [r7, #4]
   2100c:	2b00      	cmp	r3, #0
   2100e:	d101      	bne.n	21014 <vTaskPlaceOnEventList+0x14>
   21010:	b672      	cpsid	i
   21012:	e7fe      	b.n	21012 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   21014:	4b08      	ldr	r3, [pc, #32]	; (21038 <vTaskPlaceOnEventList+0x38>)
   21016:	681b      	ldr	r3, [r3, #0]
   21018:	3318      	adds	r3, #24
   2101a:	001a      	movs	r2, r3
   2101c:	687b      	ldr	r3, [r7, #4]
   2101e:	0011      	movs	r1, r2
   21020:	0018      	movs	r0, r3
   21022:	4b06      	ldr	r3, [pc, #24]	; (2103c <vTaskPlaceOnEventList+0x3c>)
   21024:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   21026:	683b      	ldr	r3, [r7, #0]
   21028:	2101      	movs	r1, #1
   2102a:	0018      	movs	r0, r3
   2102c:	4b04      	ldr	r3, [pc, #16]	; (21040 <vTaskPlaceOnEventList+0x40>)
   2102e:	4798      	blx	r3
}
   21030:	46c0      	nop			; (mov r8, r8)
   21032:	46bd      	mov	sp, r7
   21034:	b002      	add	sp, #8
   21036:	bd80      	pop	{r7, pc}
   21038:	200004b8 	.word	0x200004b8
   2103c:	0001fa6b 	.word	0x0001fa6b
   21040:	00021859 	.word	0x00021859

00021044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   21044:	b580      	push	{r7, lr}
   21046:	b084      	sub	sp, #16
   21048:	af00      	add	r7, sp, #0
   2104a:	60f8      	str	r0, [r7, #12]
   2104c:	60b9      	str	r1, [r7, #8]
   2104e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   21050:	68fb      	ldr	r3, [r7, #12]
   21052:	2b00      	cmp	r3, #0
   21054:	d101      	bne.n	2105a <vTaskPlaceOnEventListRestricted+0x16>
   21056:	b672      	cpsid	i
   21058:	e7fe      	b.n	21058 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   2105a:	4b0c      	ldr	r3, [pc, #48]	; (2108c <vTaskPlaceOnEventListRestricted+0x48>)
   2105c:	681b      	ldr	r3, [r3, #0]
   2105e:	3318      	adds	r3, #24
   21060:	001a      	movs	r2, r3
   21062:	68fb      	ldr	r3, [r7, #12]
   21064:	0011      	movs	r1, r2
   21066:	0018      	movs	r0, r3
   21068:	4b09      	ldr	r3, [pc, #36]	; (21090 <vTaskPlaceOnEventListRestricted+0x4c>)
   2106a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   2106c:	687b      	ldr	r3, [r7, #4]
   2106e:	2b00      	cmp	r3, #0
   21070:	d002      	beq.n	21078 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   21072:	2301      	movs	r3, #1
   21074:	425b      	negs	r3, r3
   21076:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   21078:	687a      	ldr	r2, [r7, #4]
   2107a:	68bb      	ldr	r3, [r7, #8]
   2107c:	0011      	movs	r1, r2
   2107e:	0018      	movs	r0, r3
   21080:	4b04      	ldr	r3, [pc, #16]	; (21094 <vTaskPlaceOnEventListRestricted+0x50>)
   21082:	4798      	blx	r3
	}
   21084:	46c0      	nop			; (mov r8, r8)
   21086:	46bd      	mov	sp, r7
   21088:	b004      	add	sp, #16
   2108a:	bd80      	pop	{r7, pc}
   2108c:	200004b8 	.word	0x200004b8
   21090:	0001fa27 	.word	0x0001fa27
   21094:	00021859 	.word	0x00021859

00021098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   21098:	b580      	push	{r7, lr}
   2109a:	b084      	sub	sp, #16
   2109c:	af00      	add	r7, sp, #0
   2109e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   210a0:	687b      	ldr	r3, [r7, #4]
   210a2:	68db      	ldr	r3, [r3, #12]
   210a4:	68db      	ldr	r3, [r3, #12]
   210a6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   210a8:	68bb      	ldr	r3, [r7, #8]
   210aa:	2b00      	cmp	r3, #0
   210ac:	d101      	bne.n	210b2 <xTaskRemoveFromEventList+0x1a>
   210ae:	b672      	cpsid	i
   210b0:	e7fe      	b.n	210b0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   210b2:	68bb      	ldr	r3, [r7, #8]
   210b4:	3318      	adds	r3, #24
   210b6:	0018      	movs	r0, r3
   210b8:	4b1f      	ldr	r3, [pc, #124]	; (21138 <xTaskRemoveFromEventList+0xa0>)
   210ba:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   210bc:	4b1f      	ldr	r3, [pc, #124]	; (2113c <xTaskRemoveFromEventList+0xa4>)
   210be:	681b      	ldr	r3, [r3, #0]
   210c0:	2b00      	cmp	r3, #0
   210c2:	d11d      	bne.n	21100 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   210c4:	68bb      	ldr	r3, [r7, #8]
   210c6:	3304      	adds	r3, #4
   210c8:	0018      	movs	r0, r3
   210ca:	4b1b      	ldr	r3, [pc, #108]	; (21138 <xTaskRemoveFromEventList+0xa0>)
   210cc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   210ce:	68bb      	ldr	r3, [r7, #8]
   210d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   210d2:	4b1b      	ldr	r3, [pc, #108]	; (21140 <xTaskRemoveFromEventList+0xa8>)
   210d4:	681b      	ldr	r3, [r3, #0]
   210d6:	429a      	cmp	r2, r3
   210d8:	d903      	bls.n	210e2 <xTaskRemoveFromEventList+0x4a>
   210da:	68bb      	ldr	r3, [r7, #8]
   210dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   210de:	4b18      	ldr	r3, [pc, #96]	; (21140 <xTaskRemoveFromEventList+0xa8>)
   210e0:	601a      	str	r2, [r3, #0]
   210e2:	68bb      	ldr	r3, [r7, #8]
   210e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   210e6:	0013      	movs	r3, r2
   210e8:	009b      	lsls	r3, r3, #2
   210ea:	189b      	adds	r3, r3, r2
   210ec:	009b      	lsls	r3, r3, #2
   210ee:	4a15      	ldr	r2, [pc, #84]	; (21144 <xTaskRemoveFromEventList+0xac>)
   210f0:	189a      	adds	r2, r3, r2
   210f2:	68bb      	ldr	r3, [r7, #8]
   210f4:	3304      	adds	r3, #4
   210f6:	0019      	movs	r1, r3
   210f8:	0010      	movs	r0, r2
   210fa:	4b13      	ldr	r3, [pc, #76]	; (21148 <xTaskRemoveFromEventList+0xb0>)
   210fc:	4798      	blx	r3
   210fe:	e007      	b.n	21110 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   21100:	68bb      	ldr	r3, [r7, #8]
   21102:	3318      	adds	r3, #24
   21104:	001a      	movs	r2, r3
   21106:	4b11      	ldr	r3, [pc, #68]	; (2114c <xTaskRemoveFromEventList+0xb4>)
   21108:	0011      	movs	r1, r2
   2110a:	0018      	movs	r0, r3
   2110c:	4b0e      	ldr	r3, [pc, #56]	; (21148 <xTaskRemoveFromEventList+0xb0>)
   2110e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   21110:	68bb      	ldr	r3, [r7, #8]
   21112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21114:	4b0e      	ldr	r3, [pc, #56]	; (21150 <xTaskRemoveFromEventList+0xb8>)
   21116:	681b      	ldr	r3, [r3, #0]
   21118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2111a:	429a      	cmp	r2, r3
   2111c:	d905      	bls.n	2112a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   2111e:	2301      	movs	r3, #1
   21120:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   21122:	4b0c      	ldr	r3, [pc, #48]	; (21154 <xTaskRemoveFromEventList+0xbc>)
   21124:	2201      	movs	r2, #1
   21126:	601a      	str	r2, [r3, #0]
   21128:	e001      	b.n	2112e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   2112a:	2300      	movs	r3, #0
   2112c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   2112e:	68fb      	ldr	r3, [r7, #12]
}
   21130:	0018      	movs	r0, r3
   21132:	46bd      	mov	sp, r7
   21134:	b004      	add	sp, #16
   21136:	bd80      	pop	{r7, pc}
   21138:	0001fad7 	.word	0x0001fad7
   2113c:	200005b8 	.word	0x200005b8
   21140:	20000598 	.word	0x20000598
   21144:	200004bc 	.word	0x200004bc
   21148:	0001fa27 	.word	0x0001fa27
   2114c:	20000550 	.word	0x20000550
   21150:	200004b8 	.word	0x200004b8
   21154:	200005a4 	.word	0x200005a4

00021158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   21158:	b580      	push	{r7, lr}
   2115a:	b082      	sub	sp, #8
   2115c:	af00      	add	r7, sp, #0
   2115e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   21160:	4b05      	ldr	r3, [pc, #20]	; (21178 <vTaskInternalSetTimeOutState+0x20>)
   21162:	681a      	ldr	r2, [r3, #0]
   21164:	687b      	ldr	r3, [r7, #4]
   21166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   21168:	4b04      	ldr	r3, [pc, #16]	; (2117c <vTaskInternalSetTimeOutState+0x24>)
   2116a:	681a      	ldr	r2, [r3, #0]
   2116c:	687b      	ldr	r3, [r7, #4]
   2116e:	605a      	str	r2, [r3, #4]
}
   21170:	46c0      	nop			; (mov r8, r8)
   21172:	46bd      	mov	sp, r7
   21174:	b002      	add	sp, #8
   21176:	bd80      	pop	{r7, pc}
   21178:	200005a8 	.word	0x200005a8
   2117c:	20000594 	.word	0x20000594

00021180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   21180:	b580      	push	{r7, lr}
   21182:	b086      	sub	sp, #24
   21184:	af00      	add	r7, sp, #0
   21186:	6078      	str	r0, [r7, #4]
   21188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   2118a:	687b      	ldr	r3, [r7, #4]
   2118c:	2b00      	cmp	r3, #0
   2118e:	d101      	bne.n	21194 <xTaskCheckForTimeOut+0x14>
   21190:	b672      	cpsid	i
   21192:	e7fe      	b.n	21192 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   21194:	683b      	ldr	r3, [r7, #0]
   21196:	2b00      	cmp	r3, #0
   21198:	d101      	bne.n	2119e <xTaskCheckForTimeOut+0x1e>
   2119a:	b672      	cpsid	i
   2119c:	e7fe      	b.n	2119c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   2119e:	4b1e      	ldr	r3, [pc, #120]	; (21218 <xTaskCheckForTimeOut+0x98>)
   211a0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   211a2:	4b1e      	ldr	r3, [pc, #120]	; (2121c <xTaskCheckForTimeOut+0x9c>)
   211a4:	681b      	ldr	r3, [r3, #0]
   211a6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   211a8:	687b      	ldr	r3, [r7, #4]
   211aa:	685b      	ldr	r3, [r3, #4]
   211ac:	693a      	ldr	r2, [r7, #16]
   211ae:	1ad3      	subs	r3, r2, r3
   211b0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   211b2:	683b      	ldr	r3, [r7, #0]
   211b4:	681b      	ldr	r3, [r3, #0]
   211b6:	3301      	adds	r3, #1
   211b8:	d102      	bne.n	211c0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   211ba:	2300      	movs	r3, #0
   211bc:	617b      	str	r3, [r7, #20]
   211be:	e024      	b.n	2120a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   211c0:	687b      	ldr	r3, [r7, #4]
   211c2:	681a      	ldr	r2, [r3, #0]
   211c4:	4b16      	ldr	r3, [pc, #88]	; (21220 <xTaskCheckForTimeOut+0xa0>)
   211c6:	681b      	ldr	r3, [r3, #0]
   211c8:	429a      	cmp	r2, r3
   211ca:	d007      	beq.n	211dc <xTaskCheckForTimeOut+0x5c>
   211cc:	687b      	ldr	r3, [r7, #4]
   211ce:	685a      	ldr	r2, [r3, #4]
   211d0:	693b      	ldr	r3, [r7, #16]
   211d2:	429a      	cmp	r2, r3
   211d4:	d802      	bhi.n	211dc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   211d6:	2301      	movs	r3, #1
   211d8:	617b      	str	r3, [r7, #20]
   211da:	e016      	b.n	2120a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   211dc:	683b      	ldr	r3, [r7, #0]
   211de:	681a      	ldr	r2, [r3, #0]
   211e0:	68fb      	ldr	r3, [r7, #12]
   211e2:	429a      	cmp	r2, r3
   211e4:	d90c      	bls.n	21200 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   211e6:	683b      	ldr	r3, [r7, #0]
   211e8:	681a      	ldr	r2, [r3, #0]
   211ea:	68fb      	ldr	r3, [r7, #12]
   211ec:	1ad2      	subs	r2, r2, r3
   211ee:	683b      	ldr	r3, [r7, #0]
   211f0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   211f2:	687b      	ldr	r3, [r7, #4]
   211f4:	0018      	movs	r0, r3
   211f6:	4b0b      	ldr	r3, [pc, #44]	; (21224 <xTaskCheckForTimeOut+0xa4>)
   211f8:	4798      	blx	r3
			xReturn = pdFALSE;
   211fa:	2300      	movs	r3, #0
   211fc:	617b      	str	r3, [r7, #20]
   211fe:	e004      	b.n	2120a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   21200:	683b      	ldr	r3, [r7, #0]
   21202:	2200      	movs	r2, #0
   21204:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   21206:	2301      	movs	r3, #1
   21208:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   2120a:	4b07      	ldr	r3, [pc, #28]	; (21228 <xTaskCheckForTimeOut+0xa8>)
   2120c:	4798      	blx	r3

	return xReturn;
   2120e:	697b      	ldr	r3, [r7, #20]
}
   21210:	0018      	movs	r0, r3
   21212:	46bd      	mov	sp, r7
   21214:	b006      	add	sp, #24
   21216:	bd80      	pop	{r7, pc}
   21218:	0001f831 	.word	0x0001f831
   2121c:	20000594 	.word	0x20000594
   21220:	200005a8 	.word	0x200005a8
   21224:	00021159 	.word	0x00021159
   21228:	0001f855 	.word	0x0001f855

0002122c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   2122c:	b580      	push	{r7, lr}
   2122e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   21230:	4b02      	ldr	r3, [pc, #8]	; (2123c <vTaskMissedYield+0x10>)
   21232:	2201      	movs	r2, #1
   21234:	601a      	str	r2, [r3, #0]
}
   21236:	46c0      	nop			; (mov r8, r8)
   21238:	46bd      	mov	sp, r7
   2123a:	bd80      	pop	{r7, pc}
   2123c:	200005a4 	.word	0x200005a4

00021240 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   21240:	b580      	push	{r7, lr}
   21242:	b082      	sub	sp, #8
   21244:	af00      	add	r7, sp, #0
   21246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   21248:	4b04      	ldr	r3, [pc, #16]	; (2125c <prvIdleTask+0x1c>)
   2124a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   2124c:	4b04      	ldr	r3, [pc, #16]	; (21260 <prvIdleTask+0x20>)
   2124e:	681b      	ldr	r3, [r3, #0]
   21250:	2b01      	cmp	r3, #1
   21252:	d9f9      	bls.n	21248 <prvIdleTask+0x8>
			{
				taskYIELD();
   21254:	4b03      	ldr	r3, [pc, #12]	; (21264 <prvIdleTask+0x24>)
   21256:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   21258:	e7f6      	b.n	21248 <prvIdleTask+0x8>
   2125a:	46c0      	nop			; (mov r8, r8)
   2125c:	000212f5 	.word	0x000212f5
   21260:	200004bc 	.word	0x200004bc
   21264:	0001f811 	.word	0x0001f811

00021268 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   21268:	b580      	push	{r7, lr}
   2126a:	b082      	sub	sp, #8
   2126c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   2126e:	2300      	movs	r3, #0
   21270:	607b      	str	r3, [r7, #4]
   21272:	e00c      	b.n	2128e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   21274:	687a      	ldr	r2, [r7, #4]
   21276:	0013      	movs	r3, r2
   21278:	009b      	lsls	r3, r3, #2
   2127a:	189b      	adds	r3, r3, r2
   2127c:	009b      	lsls	r3, r3, #2
   2127e:	4a14      	ldr	r2, [pc, #80]	; (212d0 <prvInitialiseTaskLists+0x68>)
   21280:	189b      	adds	r3, r3, r2
   21282:	0018      	movs	r0, r3
   21284:	4b13      	ldr	r3, [pc, #76]	; (212d4 <prvInitialiseTaskLists+0x6c>)
   21286:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   21288:	687b      	ldr	r3, [r7, #4]
   2128a:	3301      	adds	r3, #1
   2128c:	607b      	str	r3, [r7, #4]
   2128e:	687b      	ldr	r3, [r7, #4]
   21290:	2b04      	cmp	r3, #4
   21292:	d9ef      	bls.n	21274 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   21294:	4b10      	ldr	r3, [pc, #64]	; (212d8 <prvInitialiseTaskLists+0x70>)
   21296:	0018      	movs	r0, r3
   21298:	4b0e      	ldr	r3, [pc, #56]	; (212d4 <prvInitialiseTaskLists+0x6c>)
   2129a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   2129c:	4b0f      	ldr	r3, [pc, #60]	; (212dc <prvInitialiseTaskLists+0x74>)
   2129e:	0018      	movs	r0, r3
   212a0:	4b0c      	ldr	r3, [pc, #48]	; (212d4 <prvInitialiseTaskLists+0x6c>)
   212a2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   212a4:	4b0e      	ldr	r3, [pc, #56]	; (212e0 <prvInitialiseTaskLists+0x78>)
   212a6:	0018      	movs	r0, r3
   212a8:	4b0a      	ldr	r3, [pc, #40]	; (212d4 <prvInitialiseTaskLists+0x6c>)
   212aa:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   212ac:	4b0d      	ldr	r3, [pc, #52]	; (212e4 <prvInitialiseTaskLists+0x7c>)
   212ae:	0018      	movs	r0, r3
   212b0:	4b08      	ldr	r3, [pc, #32]	; (212d4 <prvInitialiseTaskLists+0x6c>)
   212b2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   212b4:	4b0c      	ldr	r3, [pc, #48]	; (212e8 <prvInitialiseTaskLists+0x80>)
   212b6:	0018      	movs	r0, r3
   212b8:	4b06      	ldr	r3, [pc, #24]	; (212d4 <prvInitialiseTaskLists+0x6c>)
   212ba:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   212bc:	4b0b      	ldr	r3, [pc, #44]	; (212ec <prvInitialiseTaskLists+0x84>)
   212be:	4a06      	ldr	r2, [pc, #24]	; (212d8 <prvInitialiseTaskLists+0x70>)
   212c0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   212c2:	4b0b      	ldr	r3, [pc, #44]	; (212f0 <prvInitialiseTaskLists+0x88>)
   212c4:	4a05      	ldr	r2, [pc, #20]	; (212dc <prvInitialiseTaskLists+0x74>)
   212c6:	601a      	str	r2, [r3, #0]
}
   212c8:	46c0      	nop			; (mov r8, r8)
   212ca:	46bd      	mov	sp, r7
   212cc:	b002      	add	sp, #8
   212ce:	bd80      	pop	{r7, pc}
   212d0:	200004bc 	.word	0x200004bc
   212d4:	0001f9d5 	.word	0x0001f9d5
   212d8:	20000520 	.word	0x20000520
   212dc:	20000534 	.word	0x20000534
   212e0:	20000550 	.word	0x20000550
   212e4:	20000564 	.word	0x20000564
   212e8:	2000057c 	.word	0x2000057c
   212ec:	20000548 	.word	0x20000548
   212f0:	2000054c 	.word	0x2000054c

000212f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   212f4:	b580      	push	{r7, lr}
   212f6:	b082      	sub	sp, #8
   212f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   212fa:	e01a      	b.n	21332 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   212fc:	4b11      	ldr	r3, [pc, #68]	; (21344 <prvCheckTasksWaitingTermination+0x50>)
   212fe:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   21300:	4b11      	ldr	r3, [pc, #68]	; (21348 <prvCheckTasksWaitingTermination+0x54>)
   21302:	68db      	ldr	r3, [r3, #12]
   21304:	68db      	ldr	r3, [r3, #12]
   21306:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   21308:	687b      	ldr	r3, [r7, #4]
   2130a:	3304      	adds	r3, #4
   2130c:	0018      	movs	r0, r3
   2130e:	4b0f      	ldr	r3, [pc, #60]	; (2134c <prvCheckTasksWaitingTermination+0x58>)
   21310:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   21312:	4b0f      	ldr	r3, [pc, #60]	; (21350 <prvCheckTasksWaitingTermination+0x5c>)
   21314:	681b      	ldr	r3, [r3, #0]
   21316:	1e5a      	subs	r2, r3, #1
   21318:	4b0d      	ldr	r3, [pc, #52]	; (21350 <prvCheckTasksWaitingTermination+0x5c>)
   2131a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   2131c:	4b0d      	ldr	r3, [pc, #52]	; (21354 <prvCheckTasksWaitingTermination+0x60>)
   2131e:	681b      	ldr	r3, [r3, #0]
   21320:	1e5a      	subs	r2, r3, #1
   21322:	4b0c      	ldr	r3, [pc, #48]	; (21354 <prvCheckTasksWaitingTermination+0x60>)
   21324:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   21326:	4b0c      	ldr	r3, [pc, #48]	; (21358 <prvCheckTasksWaitingTermination+0x64>)
   21328:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   2132a:	687b      	ldr	r3, [r7, #4]
   2132c:	0018      	movs	r0, r3
   2132e:	4b0b      	ldr	r3, [pc, #44]	; (2135c <prvCheckTasksWaitingTermination+0x68>)
   21330:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   21332:	4b08      	ldr	r3, [pc, #32]	; (21354 <prvCheckTasksWaitingTermination+0x60>)
   21334:	681b      	ldr	r3, [r3, #0]
   21336:	2b00      	cmp	r3, #0
   21338:	d1e0      	bne.n	212fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   2133a:	46c0      	nop			; (mov r8, r8)
   2133c:	46bd      	mov	sp, r7
   2133e:	b002      	add	sp, #8
   21340:	bd80      	pop	{r7, pc}
   21342:	46c0      	nop			; (mov r8, r8)
   21344:	0001f831 	.word	0x0001f831
   21348:	20000564 	.word	0x20000564
   2134c:	0001fad7 	.word	0x0001fad7
   21350:	20000590 	.word	0x20000590
   21354:	20000578 	.word	0x20000578
   21358:	0001f855 	.word	0x0001f855
   2135c:	00021361 	.word	0x00021361

00021360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   21360:	b580      	push	{r7, lr}
   21362:	b082      	sub	sp, #8
   21364:	af00      	add	r7, sp, #0
   21366:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   21368:	687b      	ldr	r3, [r7, #4]
   2136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2136c:	0018      	movs	r0, r3
   2136e:	4b05      	ldr	r3, [pc, #20]	; (21384 <prvDeleteTCB+0x24>)
   21370:	4798      	blx	r3
			vPortFree( pxTCB );
   21372:	687b      	ldr	r3, [r7, #4]
   21374:	0018      	movs	r0, r3
   21376:	4b03      	ldr	r3, [pc, #12]	; (21384 <prvDeleteTCB+0x24>)
   21378:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   2137a:	46c0      	nop			; (mov r8, r8)
   2137c:	46bd      	mov	sp, r7
   2137e:	b002      	add	sp, #8
   21380:	bd80      	pop	{r7, pc}
   21382:	46c0      	nop			; (mov r8, r8)
   21384:	0001f9a1 	.word	0x0001f9a1

00021388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   21388:	b580      	push	{r7, lr}
   2138a:	b082      	sub	sp, #8
   2138c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2138e:	4b0e      	ldr	r3, [pc, #56]	; (213c8 <prvResetNextTaskUnblockTime+0x40>)
   21390:	681b      	ldr	r3, [r3, #0]
   21392:	681b      	ldr	r3, [r3, #0]
   21394:	2b00      	cmp	r3, #0
   21396:	d101      	bne.n	2139c <prvResetNextTaskUnblockTime+0x14>
   21398:	2301      	movs	r3, #1
   2139a:	e000      	b.n	2139e <prvResetNextTaskUnblockTime+0x16>
   2139c:	2300      	movs	r3, #0
   2139e:	2b00      	cmp	r3, #0
   213a0:	d004      	beq.n	213ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   213a2:	4b0a      	ldr	r3, [pc, #40]	; (213cc <prvResetNextTaskUnblockTime+0x44>)
   213a4:	2201      	movs	r2, #1
   213a6:	4252      	negs	r2, r2
   213a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   213aa:	e008      	b.n	213be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   213ac:	4b06      	ldr	r3, [pc, #24]	; (213c8 <prvResetNextTaskUnblockTime+0x40>)
   213ae:	681b      	ldr	r3, [r3, #0]
   213b0:	68db      	ldr	r3, [r3, #12]
   213b2:	68db      	ldr	r3, [r3, #12]
   213b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   213b6:	687b      	ldr	r3, [r7, #4]
   213b8:	685a      	ldr	r2, [r3, #4]
   213ba:	4b04      	ldr	r3, [pc, #16]	; (213cc <prvResetNextTaskUnblockTime+0x44>)
   213bc:	601a      	str	r2, [r3, #0]
}
   213be:	46c0      	nop			; (mov r8, r8)
   213c0:	46bd      	mov	sp, r7
   213c2:	b002      	add	sp, #8
   213c4:	bd80      	pop	{r7, pc}
   213c6:	46c0      	nop			; (mov r8, r8)
   213c8:	20000548 	.word	0x20000548
   213cc:	200005b0 	.word	0x200005b0

000213d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   213d0:	b580      	push	{r7, lr}
   213d2:	b082      	sub	sp, #8
   213d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   213d6:	4b0a      	ldr	r3, [pc, #40]	; (21400 <xTaskGetSchedulerState+0x30>)
   213d8:	681b      	ldr	r3, [r3, #0]
   213da:	2b00      	cmp	r3, #0
   213dc:	d102      	bne.n	213e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   213de:	2301      	movs	r3, #1
   213e0:	607b      	str	r3, [r7, #4]
   213e2:	e008      	b.n	213f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   213e4:	4b07      	ldr	r3, [pc, #28]	; (21404 <xTaskGetSchedulerState+0x34>)
   213e6:	681b      	ldr	r3, [r3, #0]
   213e8:	2b00      	cmp	r3, #0
   213ea:	d102      	bne.n	213f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   213ec:	2302      	movs	r3, #2
   213ee:	607b      	str	r3, [r7, #4]
   213f0:	e001      	b.n	213f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   213f2:	2300      	movs	r3, #0
   213f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   213f6:	687b      	ldr	r3, [r7, #4]
	}
   213f8:	0018      	movs	r0, r3
   213fa:	46bd      	mov	sp, r7
   213fc:	b002      	add	sp, #8
   213fe:	bd80      	pop	{r7, pc}
   21400:	2000059c 	.word	0x2000059c
   21404:	200005b8 	.word	0x200005b8

00021408 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   21408:	b580      	push	{r7, lr}
   2140a:	b084      	sub	sp, #16
   2140c:	af00      	add	r7, sp, #0
   2140e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   21410:	687b      	ldr	r3, [r7, #4]
   21412:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   21414:	2300      	movs	r3, #0
   21416:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   21418:	687b      	ldr	r3, [r7, #4]
   2141a:	2b00      	cmp	r3, #0
   2141c:	d056      	beq.n	214cc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   2141e:	68bb      	ldr	r3, [r7, #8]
   21420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21422:	4b2d      	ldr	r3, [pc, #180]	; (214d8 <xTaskPriorityInherit+0xd0>)
   21424:	681b      	ldr	r3, [r3, #0]
   21426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21428:	429a      	cmp	r2, r3
   2142a:	d246      	bcs.n	214ba <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   2142c:	68bb      	ldr	r3, [r7, #8]
   2142e:	699b      	ldr	r3, [r3, #24]
   21430:	2b00      	cmp	r3, #0
   21432:	db06      	blt.n	21442 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21434:	4b28      	ldr	r3, [pc, #160]	; (214d8 <xTaskPriorityInherit+0xd0>)
   21436:	681b      	ldr	r3, [r3, #0]
   21438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2143a:	2205      	movs	r2, #5
   2143c:	1ad2      	subs	r2, r2, r3
   2143e:	68bb      	ldr	r3, [r7, #8]
   21440:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   21442:	68bb      	ldr	r3, [r7, #8]
   21444:	6959      	ldr	r1, [r3, #20]
   21446:	68bb      	ldr	r3, [r7, #8]
   21448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2144a:	0013      	movs	r3, r2
   2144c:	009b      	lsls	r3, r3, #2
   2144e:	189b      	adds	r3, r3, r2
   21450:	009b      	lsls	r3, r3, #2
   21452:	4a22      	ldr	r2, [pc, #136]	; (214dc <xTaskPriorityInherit+0xd4>)
   21454:	189b      	adds	r3, r3, r2
   21456:	4299      	cmp	r1, r3
   21458:	d101      	bne.n	2145e <xTaskPriorityInherit+0x56>
   2145a:	2301      	movs	r3, #1
   2145c:	e000      	b.n	21460 <xTaskPriorityInherit+0x58>
   2145e:	2300      	movs	r3, #0
   21460:	2b00      	cmp	r3, #0
   21462:	d022      	beq.n	214aa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   21464:	68bb      	ldr	r3, [r7, #8]
   21466:	3304      	adds	r3, #4
   21468:	0018      	movs	r0, r3
   2146a:	4b1d      	ldr	r3, [pc, #116]	; (214e0 <xTaskPriorityInherit+0xd8>)
   2146c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   2146e:	4b1a      	ldr	r3, [pc, #104]	; (214d8 <xTaskPriorityInherit+0xd0>)
   21470:	681b      	ldr	r3, [r3, #0]
   21472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21474:	68bb      	ldr	r3, [r7, #8]
   21476:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   21478:	68bb      	ldr	r3, [r7, #8]
   2147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2147c:	4b19      	ldr	r3, [pc, #100]	; (214e4 <xTaskPriorityInherit+0xdc>)
   2147e:	681b      	ldr	r3, [r3, #0]
   21480:	429a      	cmp	r2, r3
   21482:	d903      	bls.n	2148c <xTaskPriorityInherit+0x84>
   21484:	68bb      	ldr	r3, [r7, #8]
   21486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21488:	4b16      	ldr	r3, [pc, #88]	; (214e4 <xTaskPriorityInherit+0xdc>)
   2148a:	601a      	str	r2, [r3, #0]
   2148c:	68bb      	ldr	r3, [r7, #8]
   2148e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21490:	0013      	movs	r3, r2
   21492:	009b      	lsls	r3, r3, #2
   21494:	189b      	adds	r3, r3, r2
   21496:	009b      	lsls	r3, r3, #2
   21498:	4a10      	ldr	r2, [pc, #64]	; (214dc <xTaskPriorityInherit+0xd4>)
   2149a:	189a      	adds	r2, r3, r2
   2149c:	68bb      	ldr	r3, [r7, #8]
   2149e:	3304      	adds	r3, #4
   214a0:	0019      	movs	r1, r3
   214a2:	0010      	movs	r0, r2
   214a4:	4b10      	ldr	r3, [pc, #64]	; (214e8 <xTaskPriorityInherit+0xe0>)
   214a6:	4798      	blx	r3
   214a8:	e004      	b.n	214b4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   214aa:	4b0b      	ldr	r3, [pc, #44]	; (214d8 <xTaskPriorityInherit+0xd0>)
   214ac:	681b      	ldr	r3, [r3, #0]
   214ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   214b0:	68bb      	ldr	r3, [r7, #8]
   214b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   214b4:	2301      	movs	r3, #1
   214b6:	60fb      	str	r3, [r7, #12]
   214b8:	e008      	b.n	214cc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   214ba:	68bb      	ldr	r3, [r7, #8]
   214bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   214be:	4b06      	ldr	r3, [pc, #24]	; (214d8 <xTaskPriorityInherit+0xd0>)
   214c0:	681b      	ldr	r3, [r3, #0]
   214c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   214c4:	429a      	cmp	r2, r3
   214c6:	d201      	bcs.n	214cc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   214c8:	2301      	movs	r3, #1
   214ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   214cc:	68fb      	ldr	r3, [r7, #12]
	}
   214ce:	0018      	movs	r0, r3
   214d0:	46bd      	mov	sp, r7
   214d2:	b004      	add	sp, #16
   214d4:	bd80      	pop	{r7, pc}
   214d6:	46c0      	nop			; (mov r8, r8)
   214d8:	200004b8 	.word	0x200004b8
   214dc:	200004bc 	.word	0x200004bc
   214e0:	0001fad7 	.word	0x0001fad7
   214e4:	20000598 	.word	0x20000598
   214e8:	0001fa27 	.word	0x0001fa27

000214ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   214ec:	b580      	push	{r7, lr}
   214ee:	b084      	sub	sp, #16
   214f0:	af00      	add	r7, sp, #0
   214f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   214f4:	687b      	ldr	r3, [r7, #4]
   214f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   214f8:	2300      	movs	r3, #0
   214fa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   214fc:	687b      	ldr	r3, [r7, #4]
   214fe:	2b00      	cmp	r3, #0
   21500:	d044      	beq.n	2158c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   21502:	4b25      	ldr	r3, [pc, #148]	; (21598 <xTaskPriorityDisinherit+0xac>)
   21504:	681b      	ldr	r3, [r3, #0]
   21506:	68ba      	ldr	r2, [r7, #8]
   21508:	429a      	cmp	r2, r3
   2150a:	d001      	beq.n	21510 <xTaskPriorityDisinherit+0x24>
   2150c:	b672      	cpsid	i
   2150e:	e7fe      	b.n	2150e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   21510:	68bb      	ldr	r3, [r7, #8]
   21512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21514:	2b00      	cmp	r3, #0
   21516:	d101      	bne.n	2151c <xTaskPriorityDisinherit+0x30>
   21518:	b672      	cpsid	i
   2151a:	e7fe      	b.n	2151a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   2151c:	68bb      	ldr	r3, [r7, #8]
   2151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21520:	1e5a      	subs	r2, r3, #1
   21522:	68bb      	ldr	r3, [r7, #8]
   21524:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   21526:	68bb      	ldr	r3, [r7, #8]
   21528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2152a:	68bb      	ldr	r3, [r7, #8]
   2152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2152e:	429a      	cmp	r2, r3
   21530:	d02c      	beq.n	2158c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   21532:	68bb      	ldr	r3, [r7, #8]
   21534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21536:	2b00      	cmp	r3, #0
   21538:	d128      	bne.n	2158c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2153a:	68bb      	ldr	r3, [r7, #8]
   2153c:	3304      	adds	r3, #4
   2153e:	0018      	movs	r0, r3
   21540:	4b16      	ldr	r3, [pc, #88]	; (2159c <xTaskPriorityDisinherit+0xb0>)
   21542:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   21544:	68bb      	ldr	r3, [r7, #8]
   21546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21548:	68bb      	ldr	r3, [r7, #8]
   2154a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2154c:	68bb      	ldr	r3, [r7, #8]
   2154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21550:	2205      	movs	r2, #5
   21552:	1ad2      	subs	r2, r2, r3
   21554:	68bb      	ldr	r3, [r7, #8]
   21556:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   21558:	68bb      	ldr	r3, [r7, #8]
   2155a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2155c:	4b10      	ldr	r3, [pc, #64]	; (215a0 <xTaskPriorityDisinherit+0xb4>)
   2155e:	681b      	ldr	r3, [r3, #0]
   21560:	429a      	cmp	r2, r3
   21562:	d903      	bls.n	2156c <xTaskPriorityDisinherit+0x80>
   21564:	68bb      	ldr	r3, [r7, #8]
   21566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21568:	4b0d      	ldr	r3, [pc, #52]	; (215a0 <xTaskPriorityDisinherit+0xb4>)
   2156a:	601a      	str	r2, [r3, #0]
   2156c:	68bb      	ldr	r3, [r7, #8]
   2156e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21570:	0013      	movs	r3, r2
   21572:	009b      	lsls	r3, r3, #2
   21574:	189b      	adds	r3, r3, r2
   21576:	009b      	lsls	r3, r3, #2
   21578:	4a0a      	ldr	r2, [pc, #40]	; (215a4 <xTaskPriorityDisinherit+0xb8>)
   2157a:	189a      	adds	r2, r3, r2
   2157c:	68bb      	ldr	r3, [r7, #8]
   2157e:	3304      	adds	r3, #4
   21580:	0019      	movs	r1, r3
   21582:	0010      	movs	r0, r2
   21584:	4b08      	ldr	r3, [pc, #32]	; (215a8 <xTaskPriorityDisinherit+0xbc>)
   21586:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   21588:	2301      	movs	r3, #1
   2158a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   2158c:	68fb      	ldr	r3, [r7, #12]
	}
   2158e:	0018      	movs	r0, r3
   21590:	46bd      	mov	sp, r7
   21592:	b004      	add	sp, #16
   21594:	bd80      	pop	{r7, pc}
   21596:	46c0      	nop			; (mov r8, r8)
   21598:	200004b8 	.word	0x200004b8
   2159c:	0001fad7 	.word	0x0001fad7
   215a0:	20000598 	.word	0x20000598
   215a4:	200004bc 	.word	0x200004bc
   215a8:	0001fa27 	.word	0x0001fa27

000215ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   215ac:	b580      	push	{r7, lr}
   215ae:	b086      	sub	sp, #24
   215b0:	af00      	add	r7, sp, #0
   215b2:	6078      	str	r0, [r7, #4]
   215b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   215b6:	687b      	ldr	r3, [r7, #4]
   215b8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   215ba:	2301      	movs	r3, #1
   215bc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   215be:	687b      	ldr	r3, [r7, #4]
   215c0:	2b00      	cmp	r3, #0
   215c2:	d05d      	beq.n	21680 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   215c4:	693b      	ldr	r3, [r7, #16]
   215c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   215c8:	2b00      	cmp	r3, #0
   215ca:	d101      	bne.n	215d0 <vTaskPriorityDisinheritAfterTimeout+0x24>
   215cc:	b672      	cpsid	i
   215ce:	e7fe      	b.n	215ce <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   215d0:	693b      	ldr	r3, [r7, #16]
   215d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   215d4:	683b      	ldr	r3, [r7, #0]
   215d6:	429a      	cmp	r2, r3
   215d8:	d202      	bcs.n	215e0 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   215da:	683b      	ldr	r3, [r7, #0]
   215dc:	617b      	str	r3, [r7, #20]
   215de:	e002      	b.n	215e6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   215e0:	693b      	ldr	r3, [r7, #16]
   215e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   215e4:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   215e6:	693b      	ldr	r3, [r7, #16]
   215e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   215ea:	697b      	ldr	r3, [r7, #20]
   215ec:	429a      	cmp	r2, r3
   215ee:	d047      	beq.n	21680 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   215f0:	693b      	ldr	r3, [r7, #16]
   215f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   215f4:	68fb      	ldr	r3, [r7, #12]
   215f6:	429a      	cmp	r2, r3
   215f8:	d142      	bne.n	21680 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   215fa:	4b23      	ldr	r3, [pc, #140]	; (21688 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   215fc:	681b      	ldr	r3, [r3, #0]
   215fe:	693a      	ldr	r2, [r7, #16]
   21600:	429a      	cmp	r2, r3
   21602:	d101      	bne.n	21608 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   21604:	b672      	cpsid	i
   21606:	e7fe      	b.n	21606 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   21608:	693b      	ldr	r3, [r7, #16]
   2160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2160c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   2160e:	693b      	ldr	r3, [r7, #16]
   21610:	697a      	ldr	r2, [r7, #20]
   21612:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   21614:	693b      	ldr	r3, [r7, #16]
   21616:	699b      	ldr	r3, [r3, #24]
   21618:	2b00      	cmp	r3, #0
   2161a:	db04      	blt.n	21626 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2161c:	697b      	ldr	r3, [r7, #20]
   2161e:	2205      	movs	r2, #5
   21620:	1ad2      	subs	r2, r2, r3
   21622:	693b      	ldr	r3, [r7, #16]
   21624:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   21626:	693b      	ldr	r3, [r7, #16]
   21628:	6959      	ldr	r1, [r3, #20]
   2162a:	68ba      	ldr	r2, [r7, #8]
   2162c:	0013      	movs	r3, r2
   2162e:	009b      	lsls	r3, r3, #2
   21630:	189b      	adds	r3, r3, r2
   21632:	009b      	lsls	r3, r3, #2
   21634:	4a15      	ldr	r2, [pc, #84]	; (2168c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   21636:	189b      	adds	r3, r3, r2
   21638:	4299      	cmp	r1, r3
   2163a:	d101      	bne.n	21640 <vTaskPriorityDisinheritAfterTimeout+0x94>
   2163c:	2301      	movs	r3, #1
   2163e:	e000      	b.n	21642 <vTaskPriorityDisinheritAfterTimeout+0x96>
   21640:	2300      	movs	r3, #0
   21642:	2b00      	cmp	r3, #0
   21644:	d01c      	beq.n	21680 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   21646:	693b      	ldr	r3, [r7, #16]
   21648:	3304      	adds	r3, #4
   2164a:	0018      	movs	r0, r3
   2164c:	4b10      	ldr	r3, [pc, #64]	; (21690 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   2164e:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   21650:	693b      	ldr	r3, [r7, #16]
   21652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21654:	4b0f      	ldr	r3, [pc, #60]	; (21694 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   21656:	681b      	ldr	r3, [r3, #0]
   21658:	429a      	cmp	r2, r3
   2165a:	d903      	bls.n	21664 <vTaskPriorityDisinheritAfterTimeout+0xb8>
   2165c:	693b      	ldr	r3, [r7, #16]
   2165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21660:	4b0c      	ldr	r3, [pc, #48]	; (21694 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   21662:	601a      	str	r2, [r3, #0]
   21664:	693b      	ldr	r3, [r7, #16]
   21666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21668:	0013      	movs	r3, r2
   2166a:	009b      	lsls	r3, r3, #2
   2166c:	189b      	adds	r3, r3, r2
   2166e:	009b      	lsls	r3, r3, #2
   21670:	4a06      	ldr	r2, [pc, #24]	; (2168c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   21672:	189a      	adds	r2, r3, r2
   21674:	693b      	ldr	r3, [r7, #16]
   21676:	3304      	adds	r3, #4
   21678:	0019      	movs	r1, r3
   2167a:	0010      	movs	r0, r2
   2167c:	4b06      	ldr	r3, [pc, #24]	; (21698 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   2167e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   21680:	46c0      	nop			; (mov r8, r8)
   21682:	46bd      	mov	sp, r7
   21684:	b006      	add	sp, #24
   21686:	bd80      	pop	{r7, pc}
   21688:	200004b8 	.word	0x200004b8
   2168c:	200004bc 	.word	0x200004bc
   21690:	0001fad7 	.word	0x0001fad7
   21694:	20000598 	.word	0x20000598
   21698:	0001fa27 	.word	0x0001fa27

0002169c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   2169c:	b580      	push	{r7, lr}
   2169e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   216a0:	4b06      	ldr	r3, [pc, #24]	; (216bc <pvTaskIncrementMutexHeldCount+0x20>)
   216a2:	681b      	ldr	r3, [r3, #0]
   216a4:	2b00      	cmp	r3, #0
   216a6:	d004      	beq.n	216b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   216a8:	4b04      	ldr	r3, [pc, #16]	; (216bc <pvTaskIncrementMutexHeldCount+0x20>)
   216aa:	681b      	ldr	r3, [r3, #0]
   216ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   216ae:	3201      	adds	r2, #1
   216b0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   216b2:	4b02      	ldr	r3, [pc, #8]	; (216bc <pvTaskIncrementMutexHeldCount+0x20>)
   216b4:	681b      	ldr	r3, [r3, #0]
	}
   216b6:	0018      	movs	r0, r3
   216b8:	46bd      	mov	sp, r7
   216ba:	bd80      	pop	{r7, pc}
   216bc:	200004b8 	.word	0x200004b8

000216c0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
   216c0:	b580      	push	{r7, lr}
   216c2:	b084      	sub	sp, #16
   216c4:	af00      	add	r7, sp, #0
   216c6:	6078      	str	r0, [r7, #4]
   216c8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
   216ca:	4b1d      	ldr	r3, [pc, #116]	; (21740 <ulTaskNotifyTake+0x80>)
   216cc:	4798      	blx	r3
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
   216ce:	4b1d      	ldr	r3, [pc, #116]	; (21744 <ulTaskNotifyTake+0x84>)
   216d0:	681b      	ldr	r3, [r3, #0]
   216d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   216d4:	2b00      	cmp	r3, #0
   216d6:	d10e      	bne.n	216f6 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   216d8:	4b1a      	ldr	r3, [pc, #104]	; (21744 <ulTaskNotifyTake+0x84>)
   216da:	681b      	ldr	r3, [r3, #0]
   216dc:	224c      	movs	r2, #76	; 0x4c
   216de:	2101      	movs	r1, #1
   216e0:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
   216e2:	683b      	ldr	r3, [r7, #0]
   216e4:	2b00      	cmp	r3, #0
   216e6:	d006      	beq.n	216f6 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   216e8:	683b      	ldr	r3, [r7, #0]
   216ea:	2101      	movs	r1, #1
   216ec:	0018      	movs	r0, r3
   216ee:	4b16      	ldr	r3, [pc, #88]	; (21748 <ulTaskNotifyTake+0x88>)
   216f0:	4798      	blx	r3

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   216f2:	4b16      	ldr	r3, [pc, #88]	; (2174c <ulTaskNotifyTake+0x8c>)
   216f4:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   216f6:	4b16      	ldr	r3, [pc, #88]	; (21750 <ulTaskNotifyTake+0x90>)
   216f8:	4798      	blx	r3

		taskENTER_CRITICAL();
   216fa:	4b11      	ldr	r3, [pc, #68]	; (21740 <ulTaskNotifyTake+0x80>)
   216fc:	4798      	blx	r3
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
   216fe:	4b11      	ldr	r3, [pc, #68]	; (21744 <ulTaskNotifyTake+0x84>)
   21700:	681b      	ldr	r3, [r3, #0]
   21702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   21704:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
   21706:	68fb      	ldr	r3, [r7, #12]
   21708:	2b00      	cmp	r3, #0
   2170a:	d00c      	beq.n	21726 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
   2170c:	687b      	ldr	r3, [r7, #4]
   2170e:	2b00      	cmp	r3, #0
   21710:	d004      	beq.n	2171c <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
   21712:	4b0c      	ldr	r3, [pc, #48]	; (21744 <ulTaskNotifyTake+0x84>)
   21714:	681b      	ldr	r3, [r3, #0]
   21716:	2200      	movs	r2, #0
   21718:	649a      	str	r2, [r3, #72]	; 0x48
   2171a:	e004      	b.n	21726 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
   2171c:	4b09      	ldr	r3, [pc, #36]	; (21744 <ulTaskNotifyTake+0x84>)
   2171e:	681b      	ldr	r3, [r3, #0]
   21720:	68fa      	ldr	r2, [r7, #12]
   21722:	3a01      	subs	r2, #1
   21724:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   21726:	4b07      	ldr	r3, [pc, #28]	; (21744 <ulTaskNotifyTake+0x84>)
   21728:	681b      	ldr	r3, [r3, #0]
   2172a:	224c      	movs	r2, #76	; 0x4c
   2172c:	2100      	movs	r1, #0
   2172e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
   21730:	4b07      	ldr	r3, [pc, #28]	; (21750 <ulTaskNotifyTake+0x90>)
   21732:	4798      	blx	r3

		return ulReturn;
   21734:	68fb      	ldr	r3, [r7, #12]
	}
   21736:	0018      	movs	r0, r3
   21738:	46bd      	mov	sp, r7
   2173a:	b004      	add	sp, #16
   2173c:	bd80      	pop	{r7, pc}
   2173e:	46c0      	nop			; (mov r8, r8)
   21740:	0001f831 	.word	0x0001f831
   21744:	200004b8 	.word	0x200004b8
   21748:	00021859 	.word	0x00021859
   2174c:	0001f811 	.word	0x0001f811
   21750:	0001f855 	.word	0x0001f855

00021754 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
   21754:	b580      	push	{r7, lr}
   21756:	b086      	sub	sp, #24
   21758:	af00      	add	r7, sp, #0
   2175a:	6078      	str	r0, [r7, #4]
   2175c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
   2175e:	687b      	ldr	r3, [r7, #4]
   21760:	2b00      	cmp	r3, #0
   21762:	d101      	bne.n	21768 <vTaskNotifyGiveFromISR+0x14>
   21764:	b672      	cpsid	i
   21766:	e7fe      	b.n	21766 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   21768:	687b      	ldr	r3, [r7, #4]
   2176a:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   2176c:	4b30      	ldr	r3, [pc, #192]	; (21830 <vTaskNotifyGiveFromISR+0xdc>)
   2176e:	4798      	blx	r3
   21770:	0003      	movs	r3, r0
   21772:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
   21774:	230f      	movs	r3, #15
   21776:	18fb      	adds	r3, r7, r3
   21778:	697a      	ldr	r2, [r7, #20]
   2177a:	214c      	movs	r1, #76	; 0x4c
   2177c:	5c52      	ldrb	r2, [r2, r1]
   2177e:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   21780:	697b      	ldr	r3, [r7, #20]
   21782:	224c      	movs	r2, #76	; 0x4c
   21784:	2102      	movs	r1, #2
   21786:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
   21788:	697b      	ldr	r3, [r7, #20]
   2178a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2178c:	1c5a      	adds	r2, r3, #1
   2178e:	697b      	ldr	r3, [r7, #20]
   21790:	649a      	str	r2, [r3, #72]	; 0x48

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   21792:	230f      	movs	r3, #15
   21794:	18fb      	adds	r3, r7, r3
   21796:	781b      	ldrb	r3, [r3, #0]
   21798:	2b01      	cmp	r3, #1
   2179a:	d140      	bne.n	2181e <vTaskNotifyGiveFromISR+0xca>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
   2179c:	697b      	ldr	r3, [r7, #20]
   2179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   217a0:	2b00      	cmp	r3, #0
   217a2:	d001      	beq.n	217a8 <vTaskNotifyGiveFromISR+0x54>
   217a4:	b672      	cpsid	i
   217a6:	e7fe      	b.n	217a6 <vTaskNotifyGiveFromISR+0x52>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   217a8:	4b22      	ldr	r3, [pc, #136]	; (21834 <vTaskNotifyGiveFromISR+0xe0>)
   217aa:	681b      	ldr	r3, [r3, #0]
   217ac:	2b00      	cmp	r3, #0
   217ae:	d11d      	bne.n	217ec <vTaskNotifyGiveFromISR+0x98>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   217b0:	697b      	ldr	r3, [r7, #20]
   217b2:	3304      	adds	r3, #4
   217b4:	0018      	movs	r0, r3
   217b6:	4b20      	ldr	r3, [pc, #128]	; (21838 <vTaskNotifyGiveFromISR+0xe4>)
   217b8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   217ba:	697b      	ldr	r3, [r7, #20]
   217bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   217be:	4b1f      	ldr	r3, [pc, #124]	; (2183c <vTaskNotifyGiveFromISR+0xe8>)
   217c0:	681b      	ldr	r3, [r3, #0]
   217c2:	429a      	cmp	r2, r3
   217c4:	d903      	bls.n	217ce <vTaskNotifyGiveFromISR+0x7a>
   217c6:	697b      	ldr	r3, [r7, #20]
   217c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   217ca:	4b1c      	ldr	r3, [pc, #112]	; (2183c <vTaskNotifyGiveFromISR+0xe8>)
   217cc:	601a      	str	r2, [r3, #0]
   217ce:	697b      	ldr	r3, [r7, #20]
   217d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   217d2:	0013      	movs	r3, r2
   217d4:	009b      	lsls	r3, r3, #2
   217d6:	189b      	adds	r3, r3, r2
   217d8:	009b      	lsls	r3, r3, #2
   217da:	4a19      	ldr	r2, [pc, #100]	; (21840 <vTaskNotifyGiveFromISR+0xec>)
   217dc:	189a      	adds	r2, r3, r2
   217de:	697b      	ldr	r3, [r7, #20]
   217e0:	3304      	adds	r3, #4
   217e2:	0019      	movs	r1, r3
   217e4:	0010      	movs	r0, r2
   217e6:	4b17      	ldr	r3, [pc, #92]	; (21844 <vTaskNotifyGiveFromISR+0xf0>)
   217e8:	4798      	blx	r3
   217ea:	e007      	b.n	217fc <vTaskNotifyGiveFromISR+0xa8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   217ec:	697b      	ldr	r3, [r7, #20]
   217ee:	3318      	adds	r3, #24
   217f0:	001a      	movs	r2, r3
   217f2:	4b15      	ldr	r3, [pc, #84]	; (21848 <vTaskNotifyGiveFromISR+0xf4>)
   217f4:	0011      	movs	r1, r2
   217f6:	0018      	movs	r0, r3
   217f8:	4b12      	ldr	r3, [pc, #72]	; (21844 <vTaskNotifyGiveFromISR+0xf0>)
   217fa:	4798      	blx	r3
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   217fc:	697b      	ldr	r3, [r7, #20]
   217fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21800:	4b12      	ldr	r3, [pc, #72]	; (2184c <vTaskNotifyGiveFromISR+0xf8>)
   21802:	681b      	ldr	r3, [r3, #0]
   21804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21806:	429a      	cmp	r2, r3
   21808:	d909      	bls.n	2181e <vTaskNotifyGiveFromISR+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   2180a:	683b      	ldr	r3, [r7, #0]
   2180c:	2b00      	cmp	r3, #0
   2180e:	d003      	beq.n	21818 <vTaskNotifyGiveFromISR+0xc4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   21810:	683b      	ldr	r3, [r7, #0]
   21812:	2201      	movs	r2, #1
   21814:	601a      	str	r2, [r3, #0]
   21816:	e002      	b.n	2181e <vTaskNotifyGiveFromISR+0xca>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   21818:	4b0d      	ldr	r3, [pc, #52]	; (21850 <vTaskNotifyGiveFromISR+0xfc>)
   2181a:	2201      	movs	r2, #1
   2181c:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   2181e:	693b      	ldr	r3, [r7, #16]
   21820:	0018      	movs	r0, r3
   21822:	4b0c      	ldr	r3, [pc, #48]	; (21854 <vTaskNotifyGiveFromISR+0x100>)
   21824:	4798      	blx	r3
	}
   21826:	46c0      	nop			; (mov r8, r8)
   21828:	46bd      	mov	sp, r7
   2182a:	b006      	add	sp, #24
   2182c:	bd80      	pop	{r7, pc}
   2182e:	46c0      	nop			; (mov r8, r8)
   21830:	0001f885 	.word	0x0001f885
   21834:	200005b8 	.word	0x200005b8
   21838:	0001fad7 	.word	0x0001fad7
   2183c:	20000598 	.word	0x20000598
   21840:	200004bc 	.word	0x200004bc
   21844:	0001fa27 	.word	0x0001fa27
   21848:	20000550 	.word	0x20000550
   2184c:	200004b8 	.word	0x200004b8
   21850:	200005a4 	.word	0x200005a4
   21854:	0001f891 	.word	0x0001f891

00021858 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   21858:	b580      	push	{r7, lr}
   2185a:	b084      	sub	sp, #16
   2185c:	af00      	add	r7, sp, #0
   2185e:	6078      	str	r0, [r7, #4]
   21860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   21862:	4b21      	ldr	r3, [pc, #132]	; (218e8 <prvAddCurrentTaskToDelayedList+0x90>)
   21864:	681b      	ldr	r3, [r3, #0]
   21866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   21868:	4b20      	ldr	r3, [pc, #128]	; (218ec <prvAddCurrentTaskToDelayedList+0x94>)
   2186a:	681b      	ldr	r3, [r3, #0]
   2186c:	3304      	adds	r3, #4
   2186e:	0018      	movs	r0, r3
   21870:	4b1f      	ldr	r3, [pc, #124]	; (218f0 <prvAddCurrentTaskToDelayedList+0x98>)
   21872:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   21874:	687b      	ldr	r3, [r7, #4]
   21876:	3301      	adds	r3, #1
   21878:	d10b      	bne.n	21892 <prvAddCurrentTaskToDelayedList+0x3a>
   2187a:	683b      	ldr	r3, [r7, #0]
   2187c:	2b00      	cmp	r3, #0
   2187e:	d008      	beq.n	21892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   21880:	4b1a      	ldr	r3, [pc, #104]	; (218ec <prvAddCurrentTaskToDelayedList+0x94>)
   21882:	681b      	ldr	r3, [r3, #0]
   21884:	1d1a      	adds	r2, r3, #4
   21886:	4b1b      	ldr	r3, [pc, #108]	; (218f4 <prvAddCurrentTaskToDelayedList+0x9c>)
   21888:	0011      	movs	r1, r2
   2188a:	0018      	movs	r0, r3
   2188c:	4b1a      	ldr	r3, [pc, #104]	; (218f8 <prvAddCurrentTaskToDelayedList+0xa0>)
   2188e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   21890:	e026      	b.n	218e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   21892:	68fa      	ldr	r2, [r7, #12]
   21894:	687b      	ldr	r3, [r7, #4]
   21896:	18d3      	adds	r3, r2, r3
   21898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   2189a:	4b14      	ldr	r3, [pc, #80]	; (218ec <prvAddCurrentTaskToDelayedList+0x94>)
   2189c:	681b      	ldr	r3, [r3, #0]
   2189e:	68ba      	ldr	r2, [r7, #8]
   218a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   218a2:	68ba      	ldr	r2, [r7, #8]
   218a4:	68fb      	ldr	r3, [r7, #12]
   218a6:	429a      	cmp	r2, r3
   218a8:	d209      	bcs.n	218be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   218aa:	4b14      	ldr	r3, [pc, #80]	; (218fc <prvAddCurrentTaskToDelayedList+0xa4>)
   218ac:	681a      	ldr	r2, [r3, #0]
   218ae:	4b0f      	ldr	r3, [pc, #60]	; (218ec <prvAddCurrentTaskToDelayedList+0x94>)
   218b0:	681b      	ldr	r3, [r3, #0]
   218b2:	3304      	adds	r3, #4
   218b4:	0019      	movs	r1, r3
   218b6:	0010      	movs	r0, r2
   218b8:	4b11      	ldr	r3, [pc, #68]	; (21900 <prvAddCurrentTaskToDelayedList+0xa8>)
   218ba:	4798      	blx	r3
}
   218bc:	e010      	b.n	218e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   218be:	4b11      	ldr	r3, [pc, #68]	; (21904 <prvAddCurrentTaskToDelayedList+0xac>)
   218c0:	681a      	ldr	r2, [r3, #0]
   218c2:	4b0a      	ldr	r3, [pc, #40]	; (218ec <prvAddCurrentTaskToDelayedList+0x94>)
   218c4:	681b      	ldr	r3, [r3, #0]
   218c6:	3304      	adds	r3, #4
   218c8:	0019      	movs	r1, r3
   218ca:	0010      	movs	r0, r2
   218cc:	4b0c      	ldr	r3, [pc, #48]	; (21900 <prvAddCurrentTaskToDelayedList+0xa8>)
   218ce:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   218d0:	4b0d      	ldr	r3, [pc, #52]	; (21908 <prvAddCurrentTaskToDelayedList+0xb0>)
   218d2:	681b      	ldr	r3, [r3, #0]
   218d4:	68ba      	ldr	r2, [r7, #8]
   218d6:	429a      	cmp	r2, r3
   218d8:	d202      	bcs.n	218e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   218da:	4b0b      	ldr	r3, [pc, #44]	; (21908 <prvAddCurrentTaskToDelayedList+0xb0>)
   218dc:	68ba      	ldr	r2, [r7, #8]
   218de:	601a      	str	r2, [r3, #0]
}
   218e0:	46c0      	nop			; (mov r8, r8)
   218e2:	46bd      	mov	sp, r7
   218e4:	b004      	add	sp, #16
   218e6:	bd80      	pop	{r7, pc}
   218e8:	20000594 	.word	0x20000594
   218ec:	200004b8 	.word	0x200004b8
   218f0:	0001fad7 	.word	0x0001fad7
   218f4:	2000057c 	.word	0x2000057c
   218f8:	0001fa27 	.word	0x0001fa27
   218fc:	2000054c 	.word	0x2000054c
   21900:	0001fa6b 	.word	0x0001fa6b
   21904:	20000548 	.word	0x20000548
   21908:	200005b0 	.word	0x200005b0

0002190c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   2190c:	b590      	push	{r4, r7, lr}
   2190e:	b085      	sub	sp, #20
   21910:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   21912:	2300      	movs	r3, #0
   21914:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   21916:	4b0e      	ldr	r3, [pc, #56]	; (21950 <xTimerCreateTimerTask+0x44>)
   21918:	4798      	blx	r3

	if( xTimerQueue != NULL )
   2191a:	4b0e      	ldr	r3, [pc, #56]	; (21954 <xTimerCreateTimerTask+0x48>)
   2191c:	681b      	ldr	r3, [r3, #0]
   2191e:	2b00      	cmp	r3, #0
   21920:	d00c      	beq.n	2193c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   21922:	2382      	movs	r3, #130	; 0x82
   21924:	005a      	lsls	r2, r3, #1
   21926:	490c      	ldr	r1, [pc, #48]	; (21958 <xTimerCreateTimerTask+0x4c>)
   21928:	480c      	ldr	r0, [pc, #48]	; (2195c <xTimerCreateTimerTask+0x50>)
   2192a:	4b0d      	ldr	r3, [pc, #52]	; (21960 <xTimerCreateTimerTask+0x54>)
   2192c:	9301      	str	r3, [sp, #4]
   2192e:	2304      	movs	r3, #4
   21930:	9300      	str	r3, [sp, #0]
   21932:	2300      	movs	r3, #0
   21934:	4c0b      	ldr	r4, [pc, #44]	; (21964 <xTimerCreateTimerTask+0x58>)
   21936:	47a0      	blx	r4
   21938:	0003      	movs	r3, r0
   2193a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   2193c:	687b      	ldr	r3, [r7, #4]
   2193e:	2b00      	cmp	r3, #0
   21940:	d101      	bne.n	21946 <xTimerCreateTimerTask+0x3a>
   21942:	b672      	cpsid	i
   21944:	e7fe      	b.n	21944 <xTimerCreateTimerTask+0x38>
	return xReturn;
   21946:	687b      	ldr	r3, [r7, #4]
}
   21948:	0018      	movs	r0, r3
   2194a:	46bd      	mov	sp, r7
   2194c:	b003      	add	sp, #12
   2194e:	bd90      	pop	{r4, r7, pc}
   21950:	00021f1d 	.word	0x00021f1d
   21954:	200005ec 	.word	0x200005ec
   21958:	0002b5bc 	.word	0x0002b5bc
   2195c:	00021b31 	.word	0x00021b31
   21960:	200005f0 	.word	0x200005f0
   21964:	00020709 	.word	0x00020709

00021968 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   21968:	b590      	push	{r4, r7, lr}
   2196a:	b089      	sub	sp, #36	; 0x24
   2196c:	af02      	add	r7, sp, #8
   2196e:	60f8      	str	r0, [r7, #12]
   21970:	60b9      	str	r1, [r7, #8]
   21972:	607a      	str	r2, [r7, #4]
   21974:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   21976:	2028      	movs	r0, #40	; 0x28
   21978:	4b0b      	ldr	r3, [pc, #44]	; (219a8 <xTimerCreate+0x40>)
   2197a:	4798      	blx	r3
   2197c:	0003      	movs	r3, r0
   2197e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
   21980:	697b      	ldr	r3, [r7, #20]
   21982:	2b00      	cmp	r3, #0
   21984:	d00a      	beq.n	2199c <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   21986:	683c      	ldr	r4, [r7, #0]
   21988:	687a      	ldr	r2, [r7, #4]
   2198a:	68b9      	ldr	r1, [r7, #8]
   2198c:	68f8      	ldr	r0, [r7, #12]
   2198e:	697b      	ldr	r3, [r7, #20]
   21990:	9301      	str	r3, [sp, #4]
   21992:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21994:	9300      	str	r3, [sp, #0]
   21996:	0023      	movs	r3, r4
   21998:	4c04      	ldr	r4, [pc, #16]	; (219ac <xTimerCreate+0x44>)
   2199a:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   2199c:	697b      	ldr	r3, [r7, #20]
	}
   2199e:	0018      	movs	r0, r3
   219a0:	46bd      	mov	sp, r7
   219a2:	b007      	add	sp, #28
   219a4:	bd90      	pop	{r4, r7, pc}
   219a6:	46c0      	nop			; (mov r8, r8)
   219a8:	0001f96d 	.word	0x0001f96d
   219ac:	000219b1 	.word	0x000219b1

000219b0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   219b0:	b580      	push	{r7, lr}
   219b2:	b084      	sub	sp, #16
   219b4:	af00      	add	r7, sp, #0
   219b6:	60f8      	str	r0, [r7, #12]
   219b8:	60b9      	str	r1, [r7, #8]
   219ba:	607a      	str	r2, [r7, #4]
   219bc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   219be:	68bb      	ldr	r3, [r7, #8]
   219c0:	2b00      	cmp	r3, #0
   219c2:	d101      	bne.n	219c8 <prvInitialiseNewTimer+0x18>
   219c4:	b672      	cpsid	i
   219c6:	e7fe      	b.n	219c6 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
   219c8:	69fb      	ldr	r3, [r7, #28]
   219ca:	2b00      	cmp	r3, #0
   219cc:	d015      	beq.n	219fa <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   219ce:	4b0d      	ldr	r3, [pc, #52]	; (21a04 <prvInitialiseNewTimer+0x54>)
   219d0:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   219d2:	69fb      	ldr	r3, [r7, #28]
   219d4:	68fa      	ldr	r2, [r7, #12]
   219d6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   219d8:	69fb      	ldr	r3, [r7, #28]
   219da:	68ba      	ldr	r2, [r7, #8]
   219dc:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   219de:	69fb      	ldr	r3, [r7, #28]
   219e0:	687a      	ldr	r2, [r7, #4]
   219e2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   219e4:	69fb      	ldr	r3, [r7, #28]
   219e6:	683a      	ldr	r2, [r7, #0]
   219e8:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   219ea:	69fb      	ldr	r3, [r7, #28]
   219ec:	69ba      	ldr	r2, [r7, #24]
   219ee:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   219f0:	69fb      	ldr	r3, [r7, #28]
   219f2:	3304      	adds	r3, #4
   219f4:	0018      	movs	r0, r3
   219f6:	4b04      	ldr	r3, [pc, #16]	; (21a08 <prvInitialiseNewTimer+0x58>)
   219f8:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
   219fa:	46c0      	nop			; (mov r8, r8)
   219fc:	46bd      	mov	sp, r7
   219fe:	b004      	add	sp, #16
   21a00:	bd80      	pop	{r7, pc}
   21a02:	46c0      	nop			; (mov r8, r8)
   21a04:	00021f1d 	.word	0x00021f1d
   21a08:	0001fa11 	.word	0x0001fa11

00021a0c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   21a0c:	b590      	push	{r4, r7, lr}
   21a0e:	b08b      	sub	sp, #44	; 0x2c
   21a10:	af00      	add	r7, sp, #0
   21a12:	60f8      	str	r0, [r7, #12]
   21a14:	60b9      	str	r1, [r7, #8]
   21a16:	607a      	str	r2, [r7, #4]
   21a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   21a1a:	2300      	movs	r3, #0
   21a1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   21a1e:	68fb      	ldr	r3, [r7, #12]
   21a20:	2b00      	cmp	r3, #0
   21a22:	d101      	bne.n	21a28 <xTimerGenericCommand+0x1c>
   21a24:	b672      	cpsid	i
   21a26:	e7fe      	b.n	21a26 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   21a28:	4b1e      	ldr	r3, [pc, #120]	; (21aa4 <xTimerGenericCommand+0x98>)
   21a2a:	681b      	ldr	r3, [r3, #0]
   21a2c:	2b00      	cmp	r3, #0
   21a2e:	d033      	beq.n	21a98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   21a30:	2314      	movs	r3, #20
   21a32:	18fb      	adds	r3, r7, r3
   21a34:	68ba      	ldr	r2, [r7, #8]
   21a36:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   21a38:	2314      	movs	r3, #20
   21a3a:	18fb      	adds	r3, r7, r3
   21a3c:	687a      	ldr	r2, [r7, #4]
   21a3e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   21a40:	2314      	movs	r3, #20
   21a42:	18fb      	adds	r3, r7, r3
   21a44:	68fa      	ldr	r2, [r7, #12]
   21a46:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   21a48:	68bb      	ldr	r3, [r7, #8]
   21a4a:	2b05      	cmp	r3, #5
   21a4c:	dc1a      	bgt.n	21a84 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   21a4e:	4b16      	ldr	r3, [pc, #88]	; (21aa8 <xTimerGenericCommand+0x9c>)
   21a50:	4798      	blx	r3
   21a52:	0003      	movs	r3, r0
   21a54:	2b02      	cmp	r3, #2
   21a56:	d10a      	bne.n	21a6e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   21a58:	4b12      	ldr	r3, [pc, #72]	; (21aa4 <xTimerGenericCommand+0x98>)
   21a5a:	6818      	ldr	r0, [r3, #0]
   21a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21a5e:	2314      	movs	r3, #20
   21a60:	18f9      	adds	r1, r7, r3
   21a62:	2300      	movs	r3, #0
   21a64:	4c11      	ldr	r4, [pc, #68]	; (21aac <xTimerGenericCommand+0xa0>)
   21a66:	47a0      	blx	r4
   21a68:	0003      	movs	r3, r0
   21a6a:	627b      	str	r3, [r7, #36]	; 0x24
   21a6c:	e014      	b.n	21a98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   21a6e:	4b0d      	ldr	r3, [pc, #52]	; (21aa4 <xTimerGenericCommand+0x98>)
   21a70:	6818      	ldr	r0, [r3, #0]
   21a72:	2314      	movs	r3, #20
   21a74:	18f9      	adds	r1, r7, r3
   21a76:	2300      	movs	r3, #0
   21a78:	2200      	movs	r2, #0
   21a7a:	4c0c      	ldr	r4, [pc, #48]	; (21aac <xTimerGenericCommand+0xa0>)
   21a7c:	47a0      	blx	r4
   21a7e:	0003      	movs	r3, r0
   21a80:	627b      	str	r3, [r7, #36]	; 0x24
   21a82:	e009      	b.n	21a98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   21a84:	4b07      	ldr	r3, [pc, #28]	; (21aa4 <xTimerGenericCommand+0x98>)
   21a86:	6818      	ldr	r0, [r3, #0]
   21a88:	683a      	ldr	r2, [r7, #0]
   21a8a:	2314      	movs	r3, #20
   21a8c:	18f9      	adds	r1, r7, r3
   21a8e:	2300      	movs	r3, #0
   21a90:	4c07      	ldr	r4, [pc, #28]	; (21ab0 <xTimerGenericCommand+0xa4>)
   21a92:	47a0      	blx	r4
   21a94:	0003      	movs	r3, r0
   21a96:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   21a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   21a9a:	0018      	movs	r0, r3
   21a9c:	46bd      	mov	sp, r7
   21a9e:	b00b      	add	sp, #44	; 0x2c
   21aa0:	bd90      	pop	{r4, r7, pc}
   21aa2:	46c0      	nop			; (mov r8, r8)
   21aa4:	200005ec 	.word	0x200005ec
   21aa8:	000213d1 	.word	0x000213d1
   21aac:	0001fca1 	.word	0x0001fca1
   21ab0:	0001fe81 	.word	0x0001fe81

00021ab4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   21ab4:	b590      	push	{r4, r7, lr}
   21ab6:	b087      	sub	sp, #28
   21ab8:	af02      	add	r7, sp, #8
   21aba:	6078      	str	r0, [r7, #4]
   21abc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   21abe:	4b18      	ldr	r3, [pc, #96]	; (21b20 <prvProcessExpiredTimer+0x6c>)
   21ac0:	681b      	ldr	r3, [r3, #0]
   21ac2:	68db      	ldr	r3, [r3, #12]
   21ac4:	68db      	ldr	r3, [r3, #12]
   21ac6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21ac8:	68fb      	ldr	r3, [r7, #12]
   21aca:	3304      	adds	r3, #4
   21acc:	0018      	movs	r0, r3
   21ace:	4b15      	ldr	r3, [pc, #84]	; (21b24 <prvProcessExpiredTimer+0x70>)
   21ad0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   21ad2:	68fb      	ldr	r3, [r7, #12]
   21ad4:	69db      	ldr	r3, [r3, #28]
   21ad6:	2b01      	cmp	r3, #1
   21ad8:	d119      	bne.n	21b0e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   21ada:	68fb      	ldr	r3, [r7, #12]
   21adc:	699a      	ldr	r2, [r3, #24]
   21ade:	687b      	ldr	r3, [r7, #4]
   21ae0:	18d1      	adds	r1, r2, r3
   21ae2:	687b      	ldr	r3, [r7, #4]
   21ae4:	683a      	ldr	r2, [r7, #0]
   21ae6:	68f8      	ldr	r0, [r7, #12]
   21ae8:	4c0f      	ldr	r4, [pc, #60]	; (21b28 <prvProcessExpiredTimer+0x74>)
   21aea:	47a0      	blx	r4
   21aec:	1e03      	subs	r3, r0, #0
   21aee:	d00e      	beq.n	21b0e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   21af0:	687a      	ldr	r2, [r7, #4]
   21af2:	68f8      	ldr	r0, [r7, #12]
   21af4:	2300      	movs	r3, #0
   21af6:	9300      	str	r3, [sp, #0]
   21af8:	2300      	movs	r3, #0
   21afa:	2100      	movs	r1, #0
   21afc:	4c0b      	ldr	r4, [pc, #44]	; (21b2c <prvProcessExpiredTimer+0x78>)
   21afe:	47a0      	blx	r4
   21b00:	0003      	movs	r3, r0
   21b02:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   21b04:	68bb      	ldr	r3, [r7, #8]
   21b06:	2b00      	cmp	r3, #0
   21b08:	d101      	bne.n	21b0e <prvProcessExpiredTimer+0x5a>
   21b0a:	b672      	cpsid	i
   21b0c:	e7fe      	b.n	21b0c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   21b0e:	68fb      	ldr	r3, [r7, #12]
   21b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21b12:	68fa      	ldr	r2, [r7, #12]
   21b14:	0010      	movs	r0, r2
   21b16:	4798      	blx	r3
}
   21b18:	46c0      	nop			; (mov r8, r8)
   21b1a:	46bd      	mov	sp, r7
   21b1c:	b005      	add	sp, #20
   21b1e:	bd90      	pop	{r4, r7, pc}
   21b20:	200005e4 	.word	0x200005e4
   21b24:	0001fad7 	.word	0x0001fad7
   21b28:	00021c91 	.word	0x00021c91
   21b2c:	00021a0d 	.word	0x00021a0d

00021b30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   21b30:	b580      	push	{r7, lr}
   21b32:	b084      	sub	sp, #16
   21b34:	af00      	add	r7, sp, #0
   21b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   21b38:	2308      	movs	r3, #8
   21b3a:	18fb      	adds	r3, r7, r3
   21b3c:	0018      	movs	r0, r3
   21b3e:	4b06      	ldr	r3, [pc, #24]	; (21b58 <prvTimerTask+0x28>)
   21b40:	4798      	blx	r3
   21b42:	0003      	movs	r3, r0
   21b44:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   21b46:	68ba      	ldr	r2, [r7, #8]
   21b48:	68fb      	ldr	r3, [r7, #12]
   21b4a:	0011      	movs	r1, r2
   21b4c:	0018      	movs	r0, r3
   21b4e:	4b03      	ldr	r3, [pc, #12]	; (21b5c <prvTimerTask+0x2c>)
   21b50:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   21b52:	4b03      	ldr	r3, [pc, #12]	; (21b60 <prvTimerTask+0x30>)
   21b54:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   21b56:	e7ef      	b.n	21b38 <prvTimerTask+0x8>
   21b58:	00021c09 	.word	0x00021c09
   21b5c:	00021b65 	.word	0x00021b65
   21b60:	00021d19 	.word	0x00021d19

00021b64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   21b64:	b580      	push	{r7, lr}
   21b66:	b084      	sub	sp, #16
   21b68:	af00      	add	r7, sp, #0
   21b6a:	6078      	str	r0, [r7, #4]
   21b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   21b6e:	4b1e      	ldr	r3, [pc, #120]	; (21be8 <prvProcessTimerOrBlockTask+0x84>)
   21b70:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21b72:	2308      	movs	r3, #8
   21b74:	18fb      	adds	r3, r7, r3
   21b76:	0018      	movs	r0, r3
   21b78:	4b1c      	ldr	r3, [pc, #112]	; (21bec <prvProcessTimerOrBlockTask+0x88>)
   21b7a:	4798      	blx	r3
   21b7c:	0003      	movs	r3, r0
   21b7e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   21b80:	68bb      	ldr	r3, [r7, #8]
   21b82:	2b00      	cmp	r3, #0
   21b84:	d129      	bne.n	21bda <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   21b86:	683b      	ldr	r3, [r7, #0]
   21b88:	2b00      	cmp	r3, #0
   21b8a:	d10c      	bne.n	21ba6 <prvProcessTimerOrBlockTask+0x42>
   21b8c:	687a      	ldr	r2, [r7, #4]
   21b8e:	68fb      	ldr	r3, [r7, #12]
   21b90:	429a      	cmp	r2, r3
   21b92:	d808      	bhi.n	21ba6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   21b94:	4b16      	ldr	r3, [pc, #88]	; (21bf0 <prvProcessTimerOrBlockTask+0x8c>)
   21b96:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   21b98:	68fa      	ldr	r2, [r7, #12]
   21b9a:	687b      	ldr	r3, [r7, #4]
   21b9c:	0011      	movs	r1, r2
   21b9e:	0018      	movs	r0, r3
   21ba0:	4b14      	ldr	r3, [pc, #80]	; (21bf4 <prvProcessTimerOrBlockTask+0x90>)
   21ba2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   21ba4:	e01b      	b.n	21bde <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   21ba6:	683b      	ldr	r3, [r7, #0]
   21ba8:	2b00      	cmp	r3, #0
   21baa:	d006      	beq.n	21bba <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   21bac:	4b12      	ldr	r3, [pc, #72]	; (21bf8 <prvProcessTimerOrBlockTask+0x94>)
   21bae:	681b      	ldr	r3, [r3, #0]
   21bb0:	681b      	ldr	r3, [r3, #0]
   21bb2:	425a      	negs	r2, r3
   21bb4:	4153      	adcs	r3, r2
   21bb6:	b2db      	uxtb	r3, r3
   21bb8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   21bba:	4b10      	ldr	r3, [pc, #64]	; (21bfc <prvProcessTimerOrBlockTask+0x98>)
   21bbc:	6818      	ldr	r0, [r3, #0]
   21bbe:	687a      	ldr	r2, [r7, #4]
   21bc0:	68fb      	ldr	r3, [r7, #12]
   21bc2:	1ad3      	subs	r3, r2, r3
   21bc4:	683a      	ldr	r2, [r7, #0]
   21bc6:	0019      	movs	r1, r3
   21bc8:	4b0d      	ldr	r3, [pc, #52]	; (21c00 <prvProcessTimerOrBlockTask+0x9c>)
   21bca:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   21bcc:	4b08      	ldr	r3, [pc, #32]	; (21bf0 <prvProcessTimerOrBlockTask+0x8c>)
   21bce:	4798      	blx	r3
   21bd0:	1e03      	subs	r3, r0, #0
   21bd2:	d104      	bne.n	21bde <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   21bd4:	4b0b      	ldr	r3, [pc, #44]	; (21c04 <prvProcessTimerOrBlockTask+0xa0>)
   21bd6:	4798      	blx	r3
}
   21bd8:	e001      	b.n	21bde <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   21bda:	4b05      	ldr	r3, [pc, #20]	; (21bf0 <prvProcessTimerOrBlockTask+0x8c>)
   21bdc:	4798      	blx	r3
}
   21bde:	46c0      	nop			; (mov r8, r8)
   21be0:	46bd      	mov	sp, r7
   21be2:	b004      	add	sp, #16
   21be4:	bd80      	pop	{r7, pc}
   21be6:	46c0      	nop			; (mov r8, r8)
   21be8:	00020c61 	.word	0x00020c61
   21bec:	00021c49 	.word	0x00021c49
   21bf0:	00020c79 	.word	0x00020c79
   21bf4:	00021ab5 	.word	0x00021ab5
   21bf8:	200005e8 	.word	0x200005e8
   21bfc:	200005ec 	.word	0x200005ec
   21c00:	000205ed 	.word	0x000205ed
   21c04:	0001f811 	.word	0x0001f811

00021c08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   21c08:	b580      	push	{r7, lr}
   21c0a:	b084      	sub	sp, #16
   21c0c:	af00      	add	r7, sp, #0
   21c0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   21c10:	4b0c      	ldr	r3, [pc, #48]	; (21c44 <prvGetNextExpireTime+0x3c>)
   21c12:	681b      	ldr	r3, [r3, #0]
   21c14:	681b      	ldr	r3, [r3, #0]
   21c16:	425a      	negs	r2, r3
   21c18:	4153      	adcs	r3, r2
   21c1a:	b2db      	uxtb	r3, r3
   21c1c:	001a      	movs	r2, r3
   21c1e:	687b      	ldr	r3, [r7, #4]
   21c20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   21c22:	687b      	ldr	r3, [r7, #4]
   21c24:	681b      	ldr	r3, [r3, #0]
   21c26:	2b00      	cmp	r3, #0
   21c28:	d105      	bne.n	21c36 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   21c2a:	4b06      	ldr	r3, [pc, #24]	; (21c44 <prvGetNextExpireTime+0x3c>)
   21c2c:	681b      	ldr	r3, [r3, #0]
   21c2e:	68db      	ldr	r3, [r3, #12]
   21c30:	681b      	ldr	r3, [r3, #0]
   21c32:	60fb      	str	r3, [r7, #12]
   21c34:	e001      	b.n	21c3a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   21c36:	2300      	movs	r3, #0
   21c38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   21c3a:	68fb      	ldr	r3, [r7, #12]
}
   21c3c:	0018      	movs	r0, r3
   21c3e:	46bd      	mov	sp, r7
   21c40:	b004      	add	sp, #16
   21c42:	bd80      	pop	{r7, pc}
   21c44:	200005e4 	.word	0x200005e4

00021c48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   21c48:	b580      	push	{r7, lr}
   21c4a:	b084      	sub	sp, #16
   21c4c:	af00      	add	r7, sp, #0
   21c4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   21c50:	4b0c      	ldr	r3, [pc, #48]	; (21c84 <prvSampleTimeNow+0x3c>)
   21c52:	4798      	blx	r3
   21c54:	0003      	movs	r3, r0
   21c56:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   21c58:	4b0b      	ldr	r3, [pc, #44]	; (21c88 <prvSampleTimeNow+0x40>)
   21c5a:	681b      	ldr	r3, [r3, #0]
   21c5c:	68fa      	ldr	r2, [r7, #12]
   21c5e:	429a      	cmp	r2, r3
   21c60:	d205      	bcs.n	21c6e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   21c62:	4b0a      	ldr	r3, [pc, #40]	; (21c8c <prvSampleTimeNow+0x44>)
   21c64:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   21c66:	687b      	ldr	r3, [r7, #4]
   21c68:	2201      	movs	r2, #1
   21c6a:	601a      	str	r2, [r3, #0]
   21c6c:	e002      	b.n	21c74 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   21c6e:	687b      	ldr	r3, [r7, #4]
   21c70:	2200      	movs	r2, #0
   21c72:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   21c74:	4b04      	ldr	r3, [pc, #16]	; (21c88 <prvSampleTimeNow+0x40>)
   21c76:	68fa      	ldr	r2, [r7, #12]
   21c78:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   21c7a:	68fb      	ldr	r3, [r7, #12]
}
   21c7c:	0018      	movs	r0, r3
   21c7e:	46bd      	mov	sp, r7
   21c80:	b004      	add	sp, #16
   21c82:	bd80      	pop	{r7, pc}
   21c84:	00020dad 	.word	0x00020dad
   21c88:	200005f4 	.word	0x200005f4
   21c8c:	00021e5d 	.word	0x00021e5d

00021c90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   21c90:	b580      	push	{r7, lr}
   21c92:	b086      	sub	sp, #24
   21c94:	af00      	add	r7, sp, #0
   21c96:	60f8      	str	r0, [r7, #12]
   21c98:	60b9      	str	r1, [r7, #8]
   21c9a:	607a      	str	r2, [r7, #4]
   21c9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   21c9e:	2300      	movs	r3, #0
   21ca0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   21ca2:	68fb      	ldr	r3, [r7, #12]
   21ca4:	68ba      	ldr	r2, [r7, #8]
   21ca6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   21ca8:	68fb      	ldr	r3, [r7, #12]
   21caa:	68fa      	ldr	r2, [r7, #12]
   21cac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   21cae:	68ba      	ldr	r2, [r7, #8]
   21cb0:	687b      	ldr	r3, [r7, #4]
   21cb2:	429a      	cmp	r2, r3
   21cb4:	d812      	bhi.n	21cdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21cb6:	687a      	ldr	r2, [r7, #4]
   21cb8:	683b      	ldr	r3, [r7, #0]
   21cba:	1ad2      	subs	r2, r2, r3
   21cbc:	68fb      	ldr	r3, [r7, #12]
   21cbe:	699b      	ldr	r3, [r3, #24]
   21cc0:	429a      	cmp	r2, r3
   21cc2:	d302      	bcc.n	21cca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   21cc4:	2301      	movs	r3, #1
   21cc6:	617b      	str	r3, [r7, #20]
   21cc8:	e01b      	b.n	21d02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   21cca:	4b10      	ldr	r3, [pc, #64]	; (21d0c <prvInsertTimerInActiveList+0x7c>)
   21ccc:	681a      	ldr	r2, [r3, #0]
   21cce:	68fb      	ldr	r3, [r7, #12]
   21cd0:	3304      	adds	r3, #4
   21cd2:	0019      	movs	r1, r3
   21cd4:	0010      	movs	r0, r2
   21cd6:	4b0e      	ldr	r3, [pc, #56]	; (21d10 <prvInsertTimerInActiveList+0x80>)
   21cd8:	4798      	blx	r3
   21cda:	e012      	b.n	21d02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   21cdc:	687a      	ldr	r2, [r7, #4]
   21cde:	683b      	ldr	r3, [r7, #0]
   21ce0:	429a      	cmp	r2, r3
   21ce2:	d206      	bcs.n	21cf2 <prvInsertTimerInActiveList+0x62>
   21ce4:	68ba      	ldr	r2, [r7, #8]
   21ce6:	683b      	ldr	r3, [r7, #0]
   21ce8:	429a      	cmp	r2, r3
   21cea:	d302      	bcc.n	21cf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   21cec:	2301      	movs	r3, #1
   21cee:	617b      	str	r3, [r7, #20]
   21cf0:	e007      	b.n	21d02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21cf2:	4b08      	ldr	r3, [pc, #32]	; (21d14 <prvInsertTimerInActiveList+0x84>)
   21cf4:	681a      	ldr	r2, [r3, #0]
   21cf6:	68fb      	ldr	r3, [r7, #12]
   21cf8:	3304      	adds	r3, #4
   21cfa:	0019      	movs	r1, r3
   21cfc:	0010      	movs	r0, r2
   21cfe:	4b04      	ldr	r3, [pc, #16]	; (21d10 <prvInsertTimerInActiveList+0x80>)
   21d00:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   21d02:	697b      	ldr	r3, [r7, #20]
}
   21d04:	0018      	movs	r0, r3
   21d06:	46bd      	mov	sp, r7
   21d08:	b006      	add	sp, #24
   21d0a:	bd80      	pop	{r7, pc}
   21d0c:	200005e8 	.word	0x200005e8
   21d10:	0001fa6b 	.word	0x0001fa6b
   21d14:	200005e4 	.word	0x200005e4

00021d18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   21d18:	b590      	push	{r4, r7, lr}
   21d1a:	b08d      	sub	sp, #52	; 0x34
   21d1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   21d1e:	e07e      	b.n	21e1e <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   21d20:	2308      	movs	r3, #8
   21d22:	18fb      	adds	r3, r7, r3
   21d24:	681b      	ldr	r3, [r3, #0]
   21d26:	2b00      	cmp	r3, #0
   21d28:	da10      	bge.n	21d4c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   21d2a:	2308      	movs	r3, #8
   21d2c:	18fb      	adds	r3, r7, r3
   21d2e:	3304      	adds	r3, #4
   21d30:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   21d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21d34:	2b00      	cmp	r3, #0
   21d36:	d101      	bne.n	21d3c <prvProcessReceivedCommands+0x24>
   21d38:	b672      	cpsid	i
   21d3a:	e7fe      	b.n	21d3a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   21d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21d3e:	681a      	ldr	r2, [r3, #0]
   21d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21d42:	6858      	ldr	r0, [r3, #4]
   21d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21d46:	689b      	ldr	r3, [r3, #8]
   21d48:	0019      	movs	r1, r3
   21d4a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   21d4c:	2308      	movs	r3, #8
   21d4e:	18fb      	adds	r3, r7, r3
   21d50:	681b      	ldr	r3, [r3, #0]
   21d52:	2b00      	cmp	r3, #0
   21d54:	db63      	blt.n	21e1e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   21d56:	2308      	movs	r3, #8
   21d58:	18fb      	adds	r3, r7, r3
   21d5a:	689b      	ldr	r3, [r3, #8]
   21d5c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   21d5e:	6a3b      	ldr	r3, [r7, #32]
   21d60:	695b      	ldr	r3, [r3, #20]
   21d62:	2b00      	cmp	r3, #0
   21d64:	d004      	beq.n	21d70 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21d66:	6a3b      	ldr	r3, [r7, #32]
   21d68:	3304      	adds	r3, #4
   21d6a:	0018      	movs	r0, r3
   21d6c:	4b33      	ldr	r3, [pc, #204]	; (21e3c <prvProcessReceivedCommands+0x124>)
   21d6e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21d70:	1d3b      	adds	r3, r7, #4
   21d72:	0018      	movs	r0, r3
   21d74:	4b32      	ldr	r3, [pc, #200]	; (21e40 <prvProcessReceivedCommands+0x128>)
   21d76:	4798      	blx	r3
   21d78:	0003      	movs	r3, r0
   21d7a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   21d7c:	2308      	movs	r3, #8
   21d7e:	18fb      	adds	r3, r7, r3
   21d80:	681b      	ldr	r3, [r3, #0]
   21d82:	2b09      	cmp	r3, #9
   21d84:	d84a      	bhi.n	21e1c <prvProcessReceivedCommands+0x104>
   21d86:	009a      	lsls	r2, r3, #2
   21d88:	4b2e      	ldr	r3, [pc, #184]	; (21e44 <prvProcessReceivedCommands+0x12c>)
   21d8a:	18d3      	adds	r3, r2, r3
   21d8c:	681b      	ldr	r3, [r3, #0]
   21d8e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   21d90:	2308      	movs	r3, #8
   21d92:	18fb      	adds	r3, r7, r3
   21d94:	685a      	ldr	r2, [r3, #4]
   21d96:	6a3b      	ldr	r3, [r7, #32]
   21d98:	699b      	ldr	r3, [r3, #24]
   21d9a:	18d1      	adds	r1, r2, r3
   21d9c:	2308      	movs	r3, #8
   21d9e:	18fb      	adds	r3, r7, r3
   21da0:	685b      	ldr	r3, [r3, #4]
   21da2:	69fa      	ldr	r2, [r7, #28]
   21da4:	6a38      	ldr	r0, [r7, #32]
   21da6:	4c28      	ldr	r4, [pc, #160]	; (21e48 <prvProcessReceivedCommands+0x130>)
   21da8:	47a0      	blx	r4
   21daa:	1e03      	subs	r3, r0, #0
   21dac:	d037      	beq.n	21e1e <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   21dae:	6a3b      	ldr	r3, [r7, #32]
   21db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21db2:	6a3a      	ldr	r2, [r7, #32]
   21db4:	0010      	movs	r0, r2
   21db6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   21db8:	6a3b      	ldr	r3, [r7, #32]
   21dba:	69db      	ldr	r3, [r3, #28]
   21dbc:	2b01      	cmp	r3, #1
   21dbe:	d12e      	bne.n	21e1e <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   21dc0:	2308      	movs	r3, #8
   21dc2:	18fb      	adds	r3, r7, r3
   21dc4:	685a      	ldr	r2, [r3, #4]
   21dc6:	6a3b      	ldr	r3, [r7, #32]
   21dc8:	699b      	ldr	r3, [r3, #24]
   21dca:	18d2      	adds	r2, r2, r3
   21dcc:	6a38      	ldr	r0, [r7, #32]
   21dce:	2300      	movs	r3, #0
   21dd0:	9300      	str	r3, [sp, #0]
   21dd2:	2300      	movs	r3, #0
   21dd4:	2100      	movs	r1, #0
   21dd6:	4c1d      	ldr	r4, [pc, #116]	; (21e4c <prvProcessReceivedCommands+0x134>)
   21dd8:	47a0      	blx	r4
   21dda:	0003      	movs	r3, r0
   21ddc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   21dde:	69bb      	ldr	r3, [r7, #24]
   21de0:	2b00      	cmp	r3, #0
   21de2:	d11c      	bne.n	21e1e <prvProcessReceivedCommands+0x106>
   21de4:	b672      	cpsid	i
   21de6:	e7fe      	b.n	21de6 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   21de8:	2308      	movs	r3, #8
   21dea:	18fb      	adds	r3, r7, r3
   21dec:	685a      	ldr	r2, [r3, #4]
   21dee:	6a3b      	ldr	r3, [r7, #32]
   21df0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   21df2:	6a3b      	ldr	r3, [r7, #32]
   21df4:	699b      	ldr	r3, [r3, #24]
   21df6:	2b00      	cmp	r3, #0
   21df8:	d101      	bne.n	21dfe <prvProcessReceivedCommands+0xe6>
   21dfa:	b672      	cpsid	i
   21dfc:	e7fe      	b.n	21dfc <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   21dfe:	6a3b      	ldr	r3, [r7, #32]
   21e00:	699a      	ldr	r2, [r3, #24]
   21e02:	69fb      	ldr	r3, [r7, #28]
   21e04:	18d1      	adds	r1, r2, r3
   21e06:	69fb      	ldr	r3, [r7, #28]
   21e08:	69fa      	ldr	r2, [r7, #28]
   21e0a:	6a38      	ldr	r0, [r7, #32]
   21e0c:	4c0e      	ldr	r4, [pc, #56]	; (21e48 <prvProcessReceivedCommands+0x130>)
   21e0e:	47a0      	blx	r4
					break;
   21e10:	e005      	b.n	21e1e <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   21e12:	6a3b      	ldr	r3, [r7, #32]
   21e14:	0018      	movs	r0, r3
   21e16:	4b0e      	ldr	r3, [pc, #56]	; (21e50 <prvProcessReceivedCommands+0x138>)
   21e18:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   21e1a:	e000      	b.n	21e1e <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   21e1c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   21e1e:	4b0d      	ldr	r3, [pc, #52]	; (21e54 <prvProcessReceivedCommands+0x13c>)
   21e20:	681b      	ldr	r3, [r3, #0]
   21e22:	2208      	movs	r2, #8
   21e24:	18b9      	adds	r1, r7, r2
   21e26:	2200      	movs	r2, #0
   21e28:	0018      	movs	r0, r3
   21e2a:	4b0b      	ldr	r3, [pc, #44]	; (21e58 <prvProcessReceivedCommands+0x140>)
   21e2c:	4798      	blx	r3
   21e2e:	1e03      	subs	r3, r0, #0
   21e30:	d000      	beq.n	21e34 <prvProcessReceivedCommands+0x11c>
   21e32:	e775      	b.n	21d20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   21e34:	46c0      	nop			; (mov r8, r8)
   21e36:	46bd      	mov	sp, r7
   21e38:	b00b      	add	sp, #44	; 0x2c
   21e3a:	bd90      	pop	{r4, r7, pc}
   21e3c:	0001fad7 	.word	0x0001fad7
   21e40:	00021c49 	.word	0x00021c49
   21e44:	0002b5c4 	.word	0x0002b5c4
   21e48:	00021c91 	.word	0x00021c91
   21e4c:	00021a0d 	.word	0x00021a0d
   21e50:	0001f9a1 	.word	0x0001f9a1
   21e54:	200005ec 	.word	0x200005ec
   21e58:	0001ffa1 	.word	0x0001ffa1

00021e5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   21e5c:	b590      	push	{r4, r7, lr}
   21e5e:	b089      	sub	sp, #36	; 0x24
   21e60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21e62:	e03e      	b.n	21ee2 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   21e64:	4b28      	ldr	r3, [pc, #160]	; (21f08 <prvSwitchTimerLists+0xac>)
   21e66:	681b      	ldr	r3, [r3, #0]
   21e68:	68db      	ldr	r3, [r3, #12]
   21e6a:	681b      	ldr	r3, [r3, #0]
   21e6c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   21e6e:	4b26      	ldr	r3, [pc, #152]	; (21f08 <prvSwitchTimerLists+0xac>)
   21e70:	681b      	ldr	r3, [r3, #0]
   21e72:	68db      	ldr	r3, [r3, #12]
   21e74:	68db      	ldr	r3, [r3, #12]
   21e76:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21e78:	693b      	ldr	r3, [r7, #16]
   21e7a:	3304      	adds	r3, #4
   21e7c:	0018      	movs	r0, r3
   21e7e:	4b23      	ldr	r3, [pc, #140]	; (21f0c <prvSwitchTimerLists+0xb0>)
   21e80:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   21e82:	693b      	ldr	r3, [r7, #16]
   21e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21e86:	693a      	ldr	r2, [r7, #16]
   21e88:	0010      	movs	r0, r2
   21e8a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   21e8c:	693b      	ldr	r3, [r7, #16]
   21e8e:	69db      	ldr	r3, [r3, #28]
   21e90:	2b01      	cmp	r3, #1
   21e92:	d126      	bne.n	21ee2 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   21e94:	693b      	ldr	r3, [r7, #16]
   21e96:	699a      	ldr	r2, [r3, #24]
   21e98:	697b      	ldr	r3, [r7, #20]
   21e9a:	18d3      	adds	r3, r2, r3
   21e9c:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   21e9e:	68fa      	ldr	r2, [r7, #12]
   21ea0:	697b      	ldr	r3, [r7, #20]
   21ea2:	429a      	cmp	r2, r3
   21ea4:	d90e      	bls.n	21ec4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   21ea6:	693b      	ldr	r3, [r7, #16]
   21ea8:	68fa      	ldr	r2, [r7, #12]
   21eaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   21eac:	693b      	ldr	r3, [r7, #16]
   21eae:	693a      	ldr	r2, [r7, #16]
   21eb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21eb2:	4b15      	ldr	r3, [pc, #84]	; (21f08 <prvSwitchTimerLists+0xac>)
   21eb4:	681a      	ldr	r2, [r3, #0]
   21eb6:	693b      	ldr	r3, [r7, #16]
   21eb8:	3304      	adds	r3, #4
   21eba:	0019      	movs	r1, r3
   21ebc:	0010      	movs	r0, r2
   21ebe:	4b14      	ldr	r3, [pc, #80]	; (21f10 <prvSwitchTimerLists+0xb4>)
   21ec0:	4798      	blx	r3
   21ec2:	e00e      	b.n	21ee2 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   21ec4:	697a      	ldr	r2, [r7, #20]
   21ec6:	6938      	ldr	r0, [r7, #16]
   21ec8:	2300      	movs	r3, #0
   21eca:	9300      	str	r3, [sp, #0]
   21ecc:	2300      	movs	r3, #0
   21ece:	2100      	movs	r1, #0
   21ed0:	4c10      	ldr	r4, [pc, #64]	; (21f14 <prvSwitchTimerLists+0xb8>)
   21ed2:	47a0      	blx	r4
   21ed4:	0003      	movs	r3, r0
   21ed6:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   21ed8:	68bb      	ldr	r3, [r7, #8]
   21eda:	2b00      	cmp	r3, #0
   21edc:	d101      	bne.n	21ee2 <prvSwitchTimerLists+0x86>
   21ede:	b672      	cpsid	i
   21ee0:	e7fe      	b.n	21ee0 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21ee2:	4b09      	ldr	r3, [pc, #36]	; (21f08 <prvSwitchTimerLists+0xac>)
   21ee4:	681b      	ldr	r3, [r3, #0]
   21ee6:	681b      	ldr	r3, [r3, #0]
   21ee8:	2b00      	cmp	r3, #0
   21eea:	d1bb      	bne.n	21e64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   21eec:	4b06      	ldr	r3, [pc, #24]	; (21f08 <prvSwitchTimerLists+0xac>)
   21eee:	681b      	ldr	r3, [r3, #0]
   21ef0:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   21ef2:	4b09      	ldr	r3, [pc, #36]	; (21f18 <prvSwitchTimerLists+0xbc>)
   21ef4:	681a      	ldr	r2, [r3, #0]
   21ef6:	4b04      	ldr	r3, [pc, #16]	; (21f08 <prvSwitchTimerLists+0xac>)
   21ef8:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   21efa:	4b07      	ldr	r3, [pc, #28]	; (21f18 <prvSwitchTimerLists+0xbc>)
   21efc:	687a      	ldr	r2, [r7, #4]
   21efe:	601a      	str	r2, [r3, #0]
}
   21f00:	46c0      	nop			; (mov r8, r8)
   21f02:	46bd      	mov	sp, r7
   21f04:	b007      	add	sp, #28
   21f06:	bd90      	pop	{r4, r7, pc}
   21f08:	200005e4 	.word	0x200005e4
   21f0c:	0001fad7 	.word	0x0001fad7
   21f10:	0001fa6b 	.word	0x0001fa6b
   21f14:	00021a0d 	.word	0x00021a0d
   21f18:	200005e8 	.word	0x200005e8

00021f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   21f1c:	b580      	push	{r7, lr}
   21f1e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   21f20:	4b10      	ldr	r3, [pc, #64]	; (21f64 <prvCheckForValidListAndQueue+0x48>)
   21f22:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   21f24:	4b10      	ldr	r3, [pc, #64]	; (21f68 <prvCheckForValidListAndQueue+0x4c>)
   21f26:	681b      	ldr	r3, [r3, #0]
   21f28:	2b00      	cmp	r3, #0
   21f2a:	d115      	bne.n	21f58 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   21f2c:	4b0f      	ldr	r3, [pc, #60]	; (21f6c <prvCheckForValidListAndQueue+0x50>)
   21f2e:	0018      	movs	r0, r3
   21f30:	4b0f      	ldr	r3, [pc, #60]	; (21f70 <prvCheckForValidListAndQueue+0x54>)
   21f32:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   21f34:	4b0f      	ldr	r3, [pc, #60]	; (21f74 <prvCheckForValidListAndQueue+0x58>)
   21f36:	0018      	movs	r0, r3
   21f38:	4b0d      	ldr	r3, [pc, #52]	; (21f70 <prvCheckForValidListAndQueue+0x54>)
   21f3a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   21f3c:	4b0e      	ldr	r3, [pc, #56]	; (21f78 <prvCheckForValidListAndQueue+0x5c>)
   21f3e:	4a0b      	ldr	r2, [pc, #44]	; (21f6c <prvCheckForValidListAndQueue+0x50>)
   21f40:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   21f42:	4b0e      	ldr	r3, [pc, #56]	; (21f7c <prvCheckForValidListAndQueue+0x60>)
   21f44:	4a0b      	ldr	r2, [pc, #44]	; (21f74 <prvCheckForValidListAndQueue+0x58>)
   21f46:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   21f48:	2200      	movs	r2, #0
   21f4a:	2110      	movs	r1, #16
   21f4c:	2005      	movs	r0, #5
   21f4e:	4b0c      	ldr	r3, [pc, #48]	; (21f80 <prvCheckForValidListAndQueue+0x64>)
   21f50:	4798      	blx	r3
   21f52:	0002      	movs	r2, r0
   21f54:	4b04      	ldr	r3, [pc, #16]	; (21f68 <prvCheckForValidListAndQueue+0x4c>)
   21f56:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   21f58:	4b0a      	ldr	r3, [pc, #40]	; (21f84 <prvCheckForValidListAndQueue+0x68>)
   21f5a:	4798      	blx	r3
}
   21f5c:	46c0      	nop			; (mov r8, r8)
   21f5e:	46bd      	mov	sp, r7
   21f60:	bd80      	pop	{r7, pc}
   21f62:	46c0      	nop			; (mov r8, r8)
   21f64:	0001f831 	.word	0x0001f831
   21f68:	200005ec 	.word	0x200005ec
   21f6c:	200005bc 	.word	0x200005bc
   21f70:	0001f9d5 	.word	0x0001f9d5
   21f74:	200005d0 	.word	0x200005d0
   21f78:	200005e4 	.word	0x200005e4
   21f7c:	200005e8 	.word	0x200005e8
   21f80:	0001fbe5 	.word	0x0001fbe5
   21f84:	0001f855 	.word	0x0001f855

00021f88 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   21f88:	b580      	push	{r7, lr}
   21f8a:	b084      	sub	sp, #16
   21f8c:	af00      	add	r7, sp, #0
   21f8e:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   21f90:	687b      	ldr	r3, [r7, #4]
   21f92:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   21f94:	687b      	ldr	r3, [r7, #4]
   21f96:	2b00      	cmp	r3, #0
   21f98:	d101      	bne.n	21f9e <xTimerIsTimerActive+0x16>
   21f9a:	b672      	cpsid	i
   21f9c:	e7fe      	b.n	21f9c <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   21f9e:	4b07      	ldr	r3, [pc, #28]	; (21fbc <xTimerIsTimerActive+0x34>)
   21fa0:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   21fa2:	68fb      	ldr	r3, [r7, #12]
   21fa4:	695b      	ldr	r3, [r3, #20]
   21fa6:	1e5a      	subs	r2, r3, #1
   21fa8:	4193      	sbcs	r3, r2
   21faa:	b2db      	uxtb	r3, r3
   21fac:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   21fae:	4b04      	ldr	r3, [pc, #16]	; (21fc0 <xTimerIsTimerActive+0x38>)
   21fb0:	4798      	blx	r3

	return xTimerIsInActiveList;
   21fb2:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   21fb4:	0018      	movs	r0, r3
   21fb6:	46bd      	mov	sp, r7
   21fb8:	b004      	add	sp, #16
   21fba:	bd80      	pop	{r7, pc}
   21fbc:	0001f831 	.word	0x0001f831
   21fc0:	0001f855 	.word	0x0001f855

00021fc4 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   21fc4:	b580      	push	{r7, lr}
   21fc6:	b082      	sub	sp, #8
   21fc8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   21fca:	4b04      	ldr	r3, [pc, #16]	; (21fdc <wdt_clear_early_warning+0x18>)
   21fcc:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   21fce:	687b      	ldr	r3, [r7, #4]
   21fd0:	2201      	movs	r2, #1
   21fd2:	719a      	strb	r2, [r3, #6]
}
   21fd4:	46c0      	nop			; (mov r8, r8)
   21fd6:	46bd      	mov	sp, r7
   21fd8:	b002      	add	sp, #8
   21fda:	bd80      	pop	{r7, pc}
   21fdc:	40001000 	.word	0x40001000

00021fe0 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   21fe0:	b580      	push	{r7, lr}
   21fe2:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   21fe4:	4b05      	ldr	r3, [pc, #20]	; (21ffc <WDT_Handler+0x1c>)
   21fe6:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   21fe8:	4b05      	ldr	r3, [pc, #20]	; (22000 <WDT_Handler+0x20>)
   21fea:	681b      	ldr	r3, [r3, #0]
   21fec:	2b00      	cmp	r3, #0
   21fee:	d002      	beq.n	21ff6 <WDT_Handler+0x16>
		wdt_early_warning_callback();
   21ff0:	4b03      	ldr	r3, [pc, #12]	; (22000 <WDT_Handler+0x20>)
   21ff2:	681b      	ldr	r3, [r3, #0]
   21ff4:	4798      	blx	r3
	}
}
   21ff6:	46c0      	nop			; (mov r8, r8)
   21ff8:	46bd      	mov	sp, r7
   21ffa:	bd80      	pop	{r7, pc}
   21ffc:	00021fc5 	.word	0x00021fc5
   22000:	20000b54 	.word	0x20000b54

00022004 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   22004:	b580      	push	{r7, lr}
   22006:	af00      	add	r7, sp, #0
   22008:	2000      	movs	r0, #0
   2200a:	4b02      	ldr	r3, [pc, #8]	; (22014 <TCC0_Handler+0x10>)
   2200c:	4798      	blx	r3
   2200e:	46c0      	nop			; (mov r8, r8)
   22010:	46bd      	mov	sp, r7
   22012:	bd80      	pop	{r7, pc}
   22014:	00022041 	.word	0x00022041

00022018 <TCC1_Handler>:
   22018:	b580      	push	{r7, lr}
   2201a:	af00      	add	r7, sp, #0
   2201c:	2001      	movs	r0, #1
   2201e:	4b02      	ldr	r3, [pc, #8]	; (22028 <TCC1_Handler+0x10>)
   22020:	4798      	blx	r3
   22022:	46c0      	nop			; (mov r8, r8)
   22024:	46bd      	mov	sp, r7
   22026:	bd80      	pop	{r7, pc}
   22028:	00022041 	.word	0x00022041

0002202c <TCC2_Handler>:
   2202c:	b580      	push	{r7, lr}
   2202e:	af00      	add	r7, sp, #0
   22030:	2002      	movs	r0, #2
   22032:	4b02      	ldr	r3, [pc, #8]	; (2203c <TCC2_Handler+0x10>)
   22034:	4798      	blx	r3
   22036:	46c0      	nop			; (mov r8, r8)
   22038:	46bd      	mov	sp, r7
   2203a:	bd80      	pop	{r7, pc}
   2203c:	00022041 	.word	0x00022041

00022040 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   22040:	b580      	push	{r7, lr}
   22042:	b086      	sub	sp, #24
   22044:	af00      	add	r7, sp, #0
   22046:	0002      	movs	r2, r0
   22048:	1dfb      	adds	r3, r7, #7
   2204a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2204c:	1dfb      	adds	r3, r7, #7
   2204e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   22050:	4b18      	ldr	r3, [pc, #96]	; (220b4 <_tcc_interrupt_handler+0x74>)
   22052:	0092      	lsls	r2, r2, #2
   22054:	58d3      	ldr	r3, [r2, r3]
   22056:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   22058:	693b      	ldr	r3, [r7, #16]
   2205a:	681b      	ldr	r3, [r3, #0]
   2205c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2205e:	693b      	ldr	r3, [r7, #16]
   22060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   22062:	401a      	ands	r2, r3
			module->enable_callback_mask);
   22064:	693b      	ldr	r3, [r7, #16]
   22066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   22068:	4013      	ands	r3, r2
   2206a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2206c:	2300      	movs	r3, #0
   2206e:	617b      	str	r3, [r7, #20]
   22070:	e019      	b.n	220a6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   22072:	4b11      	ldr	r3, [pc, #68]	; (220b8 <_tcc_interrupt_handler+0x78>)
   22074:	697a      	ldr	r2, [r7, #20]
   22076:	0092      	lsls	r2, r2, #2
   22078:	58d3      	ldr	r3, [r2, r3]
   2207a:	68fa      	ldr	r2, [r7, #12]
   2207c:	4013      	ands	r3, r2
   2207e:	d00f      	beq.n	220a0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   22080:	693a      	ldr	r2, [r7, #16]
   22082:	697b      	ldr	r3, [r7, #20]
   22084:	009b      	lsls	r3, r3, #2
   22086:	18d3      	adds	r3, r2, r3
   22088:	3304      	adds	r3, #4
   2208a:	681b      	ldr	r3, [r3, #0]
   2208c:	693a      	ldr	r2, [r7, #16]
   2208e:	0010      	movs	r0, r2
   22090:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   22092:	693b      	ldr	r3, [r7, #16]
   22094:	681b      	ldr	r3, [r3, #0]
   22096:	4a08      	ldr	r2, [pc, #32]	; (220b8 <_tcc_interrupt_handler+0x78>)
   22098:	6979      	ldr	r1, [r7, #20]
   2209a:	0089      	lsls	r1, r1, #2
   2209c:	588a      	ldr	r2, [r1, r2]
   2209e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   220a0:	697b      	ldr	r3, [r7, #20]
   220a2:	3301      	adds	r3, #1
   220a4:	617b      	str	r3, [r7, #20]
   220a6:	697b      	ldr	r3, [r7, #20]
   220a8:	2b0b      	cmp	r3, #11
   220aa:	dde2      	ble.n	22072 <_tcc_interrupt_handler+0x32>
		}
	}
}
   220ac:	46c0      	nop			; (mov r8, r8)
   220ae:	46bd      	mov	sp, r7
   220b0:	b006      	add	sp, #24
   220b2:	bd80      	pop	{r7, pc}
   220b4:	20000b58 	.word	0x20000b58
   220b8:	0002b5ec 	.word	0x0002b5ec

000220bc <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   220bc:	b580      	push	{r7, lr}
   220be:	af00      	add	r7, sp, #0
   220c0:	2000      	movs	r0, #0
   220c2:	4b02      	ldr	r3, [pc, #8]	; (220cc <TC3_Handler+0x10>)
   220c4:	4798      	blx	r3
   220c6:	46c0      	nop			; (mov r8, r8)
   220c8:	46bd      	mov	sp, r7
   220ca:	bd80      	pop	{r7, pc}
   220cc:	00022121 	.word	0x00022121

000220d0 <TC4_Handler>:
   220d0:	b580      	push	{r7, lr}
   220d2:	af00      	add	r7, sp, #0
   220d4:	2001      	movs	r0, #1
   220d6:	4b02      	ldr	r3, [pc, #8]	; (220e0 <TC4_Handler+0x10>)
   220d8:	4798      	blx	r3
   220da:	46c0      	nop			; (mov r8, r8)
   220dc:	46bd      	mov	sp, r7
   220de:	bd80      	pop	{r7, pc}
   220e0:	00022121 	.word	0x00022121

000220e4 <TC5_Handler>:
   220e4:	b580      	push	{r7, lr}
   220e6:	af00      	add	r7, sp, #0
   220e8:	2002      	movs	r0, #2
   220ea:	4b02      	ldr	r3, [pc, #8]	; (220f4 <TC5_Handler+0x10>)
   220ec:	4798      	blx	r3
   220ee:	46c0      	nop			; (mov r8, r8)
   220f0:	46bd      	mov	sp, r7
   220f2:	bd80      	pop	{r7, pc}
   220f4:	00022121 	.word	0x00022121

000220f8 <TC6_Handler>:
   220f8:	b580      	push	{r7, lr}
   220fa:	af00      	add	r7, sp, #0
   220fc:	2003      	movs	r0, #3
   220fe:	4b02      	ldr	r3, [pc, #8]	; (22108 <TC6_Handler+0x10>)
   22100:	4798      	blx	r3
   22102:	46c0      	nop			; (mov r8, r8)
   22104:	46bd      	mov	sp, r7
   22106:	bd80      	pop	{r7, pc}
   22108:	00022121 	.word	0x00022121

0002210c <TC7_Handler>:
   2210c:	b580      	push	{r7, lr}
   2210e:	af00      	add	r7, sp, #0
   22110:	2004      	movs	r0, #4
   22112:	4b02      	ldr	r3, [pc, #8]	; (2211c <TC7_Handler+0x10>)
   22114:	4798      	blx	r3
   22116:	46c0      	nop			; (mov r8, r8)
   22118:	46bd      	mov	sp, r7
   2211a:	bd80      	pop	{r7, pc}
   2211c:	00022121 	.word	0x00022121

00022120 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   22120:	b580      	push	{r7, lr}
   22122:	b084      	sub	sp, #16
   22124:	af00      	add	r7, sp, #0
   22126:	0002      	movs	r2, r0
   22128:	1dfb      	adds	r3, r7, #7
   2212a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   2212c:	1dfb      	adds	r3, r7, #7
   2212e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   22130:	4b28      	ldr	r3, [pc, #160]	; (221d4 <_tc_interrupt_handler+0xb4>)
   22132:	0092      	lsls	r2, r2, #2
   22134:	58d3      	ldr	r3, [r2, r3]
   22136:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   22138:	68fb      	ldr	r3, [r7, #12]
   2213a:	681b      	ldr	r3, [r3, #0]
   2213c:	7b9b      	ldrb	r3, [r3, #14]
   2213e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   22140:	68fa      	ldr	r2, [r7, #12]
   22142:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   22144:	4013      	ands	r3, r2
   22146:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   22148:	68fb      	ldr	r3, [r7, #12]
   2214a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   2214c:	230b      	movs	r3, #11
   2214e:	18fb      	adds	r3, r7, r3
   22150:	400a      	ands	r2, r1
   22152:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   22154:	230b      	movs	r3, #11
   22156:	18fb      	adds	r3, r7, r3
   22158:	781b      	ldrb	r3, [r3, #0]
   2215a:	2201      	movs	r2, #1
   2215c:	4013      	ands	r3, r2
   2215e:	d008      	beq.n	22172 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   22160:	68fb      	ldr	r3, [r7, #12]
   22162:	689b      	ldr	r3, [r3, #8]
   22164:	68fa      	ldr	r2, [r7, #12]
   22166:	0010      	movs	r0, r2
   22168:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   2216a:	68fb      	ldr	r3, [r7, #12]
   2216c:	681b      	ldr	r3, [r3, #0]
   2216e:	2201      	movs	r2, #1
   22170:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   22172:	230b      	movs	r3, #11
   22174:	18fb      	adds	r3, r7, r3
   22176:	781b      	ldrb	r3, [r3, #0]
   22178:	2202      	movs	r2, #2
   2217a:	4013      	ands	r3, r2
   2217c:	d008      	beq.n	22190 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   2217e:	68fb      	ldr	r3, [r7, #12]
   22180:	68db      	ldr	r3, [r3, #12]
   22182:	68fa      	ldr	r2, [r7, #12]
   22184:	0010      	movs	r0, r2
   22186:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   22188:	68fb      	ldr	r3, [r7, #12]
   2218a:	681b      	ldr	r3, [r3, #0]
   2218c:	2202      	movs	r2, #2
   2218e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   22190:	230b      	movs	r3, #11
   22192:	18fb      	adds	r3, r7, r3
   22194:	781b      	ldrb	r3, [r3, #0]
   22196:	2210      	movs	r2, #16
   22198:	4013      	ands	r3, r2
   2219a:	d008      	beq.n	221ae <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   2219c:	68fb      	ldr	r3, [r7, #12]
   2219e:	691b      	ldr	r3, [r3, #16]
   221a0:	68fa      	ldr	r2, [r7, #12]
   221a2:	0010      	movs	r0, r2
   221a4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   221a6:	68fb      	ldr	r3, [r7, #12]
   221a8:	681b      	ldr	r3, [r3, #0]
   221aa:	2210      	movs	r2, #16
   221ac:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   221ae:	230b      	movs	r3, #11
   221b0:	18fb      	adds	r3, r7, r3
   221b2:	781b      	ldrb	r3, [r3, #0]
   221b4:	2220      	movs	r2, #32
   221b6:	4013      	ands	r3, r2
   221b8:	d008      	beq.n	221cc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   221ba:	68fb      	ldr	r3, [r7, #12]
   221bc:	695b      	ldr	r3, [r3, #20]
   221be:	68fa      	ldr	r2, [r7, #12]
   221c0:	0010      	movs	r0, r2
   221c2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   221c4:	68fb      	ldr	r3, [r7, #12]
   221c6:	681b      	ldr	r3, [r3, #0]
   221c8:	2220      	movs	r2, #32
   221ca:	739a      	strb	r2, [r3, #14]
	}
}
   221cc:	46c0      	nop			; (mov r8, r8)
   221ce:	46bd      	mov	sp, r7
   221d0:	b004      	add	sp, #16
   221d2:	bd80      	pop	{r7, pc}
   221d4:	20000b64 	.word	0x20000b64

000221d8 <system_gclk_chan_get_config_defaults>:
{
   221d8:	b580      	push	{r7, lr}
   221da:	b082      	sub	sp, #8
   221dc:	af00      	add	r7, sp, #0
   221de:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   221e0:	687b      	ldr	r3, [r7, #4]
   221e2:	2200      	movs	r2, #0
   221e4:	701a      	strb	r2, [r3, #0]
}
   221e6:	46c0      	nop			; (mov r8, r8)
   221e8:	46bd      	mov	sp, r7
   221ea:	b002      	add	sp, #8
   221ec:	bd80      	pop	{r7, pc}
	...

000221f0 <system_apb_clock_set_mask>:
{
   221f0:	b580      	push	{r7, lr}
   221f2:	b082      	sub	sp, #8
   221f4:	af00      	add	r7, sp, #0
   221f6:	0002      	movs	r2, r0
   221f8:	6039      	str	r1, [r7, #0]
   221fa:	1dfb      	adds	r3, r7, #7
   221fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   221fe:	1dfb      	adds	r3, r7, #7
   22200:	781b      	ldrb	r3, [r3, #0]
   22202:	2b01      	cmp	r3, #1
   22204:	d00a      	beq.n	2221c <system_apb_clock_set_mask+0x2c>
   22206:	2b02      	cmp	r3, #2
   22208:	d00f      	beq.n	2222a <system_apb_clock_set_mask+0x3a>
   2220a:	2b00      	cmp	r3, #0
   2220c:	d114      	bne.n	22238 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2220e:	4b0e      	ldr	r3, [pc, #56]	; (22248 <system_apb_clock_set_mask+0x58>)
   22210:	4a0d      	ldr	r2, [pc, #52]	; (22248 <system_apb_clock_set_mask+0x58>)
   22212:	6991      	ldr	r1, [r2, #24]
   22214:	683a      	ldr	r2, [r7, #0]
   22216:	430a      	orrs	r2, r1
   22218:	619a      	str	r2, [r3, #24]
			break;
   2221a:	e00f      	b.n	2223c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2221c:	4b0a      	ldr	r3, [pc, #40]	; (22248 <system_apb_clock_set_mask+0x58>)
   2221e:	4a0a      	ldr	r2, [pc, #40]	; (22248 <system_apb_clock_set_mask+0x58>)
   22220:	69d1      	ldr	r1, [r2, #28]
   22222:	683a      	ldr	r2, [r7, #0]
   22224:	430a      	orrs	r2, r1
   22226:	61da      	str	r2, [r3, #28]
			break;
   22228:	e008      	b.n	2223c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2222a:	4b07      	ldr	r3, [pc, #28]	; (22248 <system_apb_clock_set_mask+0x58>)
   2222c:	4a06      	ldr	r2, [pc, #24]	; (22248 <system_apb_clock_set_mask+0x58>)
   2222e:	6a11      	ldr	r1, [r2, #32]
   22230:	683a      	ldr	r2, [r7, #0]
   22232:	430a      	orrs	r2, r1
   22234:	621a      	str	r2, [r3, #32]
			break;
   22236:	e001      	b.n	2223c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22238:	2317      	movs	r3, #23
   2223a:	e000      	b.n	2223e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2223c:	2300      	movs	r3, #0
}
   2223e:	0018      	movs	r0, r3
   22240:	46bd      	mov	sp, r7
   22242:	b002      	add	sp, #8
   22244:	bd80      	pop	{r7, pc}
   22246:	46c0      	nop			; (mov r8, r8)
   22248:	40000400 	.word	0x40000400

0002224c <system_pinmux_get_config_defaults>:
{
   2224c:	b580      	push	{r7, lr}
   2224e:	b082      	sub	sp, #8
   22250:	af00      	add	r7, sp, #0
   22252:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   22254:	687b      	ldr	r3, [r7, #4]
   22256:	2280      	movs	r2, #128	; 0x80
   22258:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2225a:	687b      	ldr	r3, [r7, #4]
   2225c:	2200      	movs	r2, #0
   2225e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   22260:	687b      	ldr	r3, [r7, #4]
   22262:	2201      	movs	r2, #1
   22264:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   22266:	687b      	ldr	r3, [r7, #4]
   22268:	2200      	movs	r2, #0
   2226a:	70da      	strb	r2, [r3, #3]
}
   2226c:	46c0      	nop			; (mov r8, r8)
   2226e:	46bd      	mov	sp, r7
   22270:	b002      	add	sp, #8
   22272:	bd80      	pop	{r7, pc}

00022274 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   22274:	b580      	push	{r7, lr}
   22276:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   22278:	4b05      	ldr	r3, [pc, #20]	; (22290 <system_is_debugger_present+0x1c>)
   2227a:	789b      	ldrb	r3, [r3, #2]
   2227c:	b2db      	uxtb	r3, r3
   2227e:	001a      	movs	r2, r3
   22280:	2302      	movs	r3, #2
   22282:	4013      	ands	r3, r2
   22284:	1e5a      	subs	r2, r3, #1
   22286:	4193      	sbcs	r3, r2
   22288:	b2db      	uxtb	r3, r3
}
   2228a:	0018      	movs	r0, r3
   2228c:	46bd      	mov	sp, r7
   2228e:	bd80      	pop	{r7, pc}
   22290:	41002000 	.word	0x41002000

00022294 <usart_is_syncing>:
{
   22294:	b580      	push	{r7, lr}
   22296:	b084      	sub	sp, #16
   22298:	af00      	add	r7, sp, #0
   2229a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2229c:	687b      	ldr	r3, [r7, #4]
   2229e:	681b      	ldr	r3, [r3, #0]
   222a0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   222a2:	68fb      	ldr	r3, [r7, #12]
   222a4:	69db      	ldr	r3, [r3, #28]
   222a6:	1e5a      	subs	r2, r3, #1
   222a8:	4193      	sbcs	r3, r2
   222aa:	b2db      	uxtb	r3, r3
}
   222ac:	0018      	movs	r0, r3
   222ae:	46bd      	mov	sp, r7
   222b0:	b004      	add	sp, #16
   222b2:	bd80      	pop	{r7, pc}

000222b4 <_usart_wait_for_sync>:
{
   222b4:	b580      	push	{r7, lr}
   222b6:	b082      	sub	sp, #8
   222b8:	af00      	add	r7, sp, #0
   222ba:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   222bc:	46c0      	nop			; (mov r8, r8)
   222be:	687b      	ldr	r3, [r7, #4]
   222c0:	0018      	movs	r0, r3
   222c2:	4b04      	ldr	r3, [pc, #16]	; (222d4 <_usart_wait_for_sync+0x20>)
   222c4:	4798      	blx	r3
   222c6:	1e03      	subs	r3, r0, #0
   222c8:	d1f9      	bne.n	222be <_usart_wait_for_sync+0xa>
}
   222ca:	46c0      	nop			; (mov r8, r8)
   222cc:	46bd      	mov	sp, r7
   222ce:	b002      	add	sp, #8
   222d0:	bd80      	pop	{r7, pc}
   222d2:	46c0      	nop			; (mov r8, r8)
   222d4:	00022295 	.word	0x00022295

000222d8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   222d8:	b5b0      	push	{r4, r5, r7, lr}
   222da:	b08c      	sub	sp, #48	; 0x30
   222dc:	af02      	add	r7, sp, #8
   222de:	6078      	str	r0, [r7, #4]
   222e0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   222e2:	687b      	ldr	r3, [r7, #4]
   222e4:	681b      	ldr	r3, [r3, #0]
   222e6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   222e8:	687b      	ldr	r3, [r7, #4]
   222ea:	681b      	ldr	r3, [r3, #0]
   222ec:	0018      	movs	r0, r3
   222ee:	4bab      	ldr	r3, [pc, #684]	; (2259c <_usart_set_config+0x2c4>)
   222f0:	4798      	blx	r3
   222f2:	0003      	movs	r3, r0
   222f4:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   222f6:	697b      	ldr	r3, [r7, #20]
   222f8:	3314      	adds	r3, #20
   222fa:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   222fc:	2300      	movs	r3, #0
   222fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   22300:	2300      	movs	r3, #0
   22302:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   22304:	230a      	movs	r3, #10
   22306:	18fb      	adds	r3, r7, r3
   22308:	2200      	movs	r2, #0
   2230a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2230c:	231f      	movs	r3, #31
   2230e:	18fb      	adds	r3, r7, r3
   22310:	2200      	movs	r2, #0
   22312:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   22314:	231e      	movs	r3, #30
   22316:	18fb      	adds	r3, r7, r3
   22318:	2210      	movs	r2, #16
   2231a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2231c:	683b      	ldr	r3, [r7, #0]
   2231e:	8a1b      	ldrh	r3, [r3, #16]
   22320:	2280      	movs	r2, #128	; 0x80
   22322:	01d2      	lsls	r2, r2, #7
   22324:	4293      	cmp	r3, r2
   22326:	d01c      	beq.n	22362 <_usart_set_config+0x8a>
   22328:	2280      	movs	r2, #128	; 0x80
   2232a:	01d2      	lsls	r2, r2, #7
   2232c:	4293      	cmp	r3, r2
   2232e:	dc06      	bgt.n	2233e <_usart_set_config+0x66>
   22330:	2b00      	cmp	r3, #0
   22332:	d00d      	beq.n	22350 <_usart_set_config+0x78>
   22334:	2280      	movs	r2, #128	; 0x80
   22336:	0192      	lsls	r2, r2, #6
   22338:	4293      	cmp	r3, r2
   2233a:	d024      	beq.n	22386 <_usart_set_config+0xae>
   2233c:	e035      	b.n	223aa <_usart_set_config+0xd2>
   2233e:	22c0      	movs	r2, #192	; 0xc0
   22340:	01d2      	lsls	r2, r2, #7
   22342:	4293      	cmp	r3, r2
   22344:	d028      	beq.n	22398 <_usart_set_config+0xc0>
   22346:	2280      	movs	r2, #128	; 0x80
   22348:	0212      	lsls	r2, r2, #8
   2234a:	4293      	cmp	r3, r2
   2234c:	d012      	beq.n	22374 <_usart_set_config+0x9c>
   2234e:	e02c      	b.n	223aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   22350:	231f      	movs	r3, #31
   22352:	18fb      	adds	r3, r7, r3
   22354:	2200      	movs	r2, #0
   22356:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   22358:	231e      	movs	r3, #30
   2235a:	18fb      	adds	r3, r7, r3
   2235c:	2210      	movs	r2, #16
   2235e:	701a      	strb	r2, [r3, #0]
			break;
   22360:	e023      	b.n	223aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   22362:	231f      	movs	r3, #31
   22364:	18fb      	adds	r3, r7, r3
   22366:	2200      	movs	r2, #0
   22368:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2236a:	231e      	movs	r3, #30
   2236c:	18fb      	adds	r3, r7, r3
   2236e:	2208      	movs	r2, #8
   22370:	701a      	strb	r2, [r3, #0]
			break;
   22372:	e01a      	b.n	223aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   22374:	231f      	movs	r3, #31
   22376:	18fb      	adds	r3, r7, r3
   22378:	2200      	movs	r2, #0
   2237a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2237c:	231e      	movs	r3, #30
   2237e:	18fb      	adds	r3, r7, r3
   22380:	2203      	movs	r2, #3
   22382:	701a      	strb	r2, [r3, #0]
			break;
   22384:	e011      	b.n	223aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   22386:	231f      	movs	r3, #31
   22388:	18fb      	adds	r3, r7, r3
   2238a:	2201      	movs	r2, #1
   2238c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2238e:	231e      	movs	r3, #30
   22390:	18fb      	adds	r3, r7, r3
   22392:	2210      	movs	r2, #16
   22394:	701a      	strb	r2, [r3, #0]
			break;
   22396:	e008      	b.n	223aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   22398:	231f      	movs	r3, #31
   2239a:	18fb      	adds	r3, r7, r3
   2239c:	2201      	movs	r2, #1
   2239e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   223a0:	231e      	movs	r3, #30
   223a2:	18fb      	adds	r3, r7, r3
   223a4:	2208      	movs	r2, #8
   223a6:	701a      	strb	r2, [r3, #0]
			break;
   223a8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   223aa:	683b      	ldr	r3, [r7, #0]
   223ac:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   223ae:	683b      	ldr	r3, [r7, #0]
   223b0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   223b2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   223b4:	683b      	ldr	r3, [r7, #0]
   223b6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   223b8:	4313      	orrs	r3, r2
		config->sample_rate |
   223ba:	683a      	ldr	r2, [r7, #0]
   223bc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   223be:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   223c0:	683a      	ldr	r2, [r7, #0]
   223c2:	7e12      	ldrb	r2, [r2, #24]
   223c4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   223c6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   223c8:	683a      	ldr	r2, [r7, #0]
   223ca:	2126      	movs	r1, #38	; 0x26
   223cc:	5c52      	ldrb	r2, [r2, r1]
   223ce:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   223d0:	4313      	orrs	r3, r2
   223d2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   223d4:	231d      	movs	r3, #29
   223d6:	18fb      	adds	r3, r7, r3
   223d8:	2200      	movs	r2, #0
   223da:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   223dc:	683b      	ldr	r3, [r7, #0]
   223de:	685b      	ldr	r3, [r3, #4]
   223e0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   223e2:	68fb      	ldr	r3, [r7, #12]
   223e4:	2b00      	cmp	r3, #0
   223e6:	d01e      	beq.n	22426 <_usart_set_config+0x14e>
   223e8:	2280      	movs	r2, #128	; 0x80
   223ea:	0552      	lsls	r2, r2, #21
   223ec:	4293      	cmp	r3, r2
   223ee:	d14f      	bne.n	22490 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   223f0:	683b      	ldr	r3, [r7, #0]
   223f2:	2227      	movs	r2, #39	; 0x27
   223f4:	5c9b      	ldrb	r3, [r3, r2]
   223f6:	2201      	movs	r2, #1
   223f8:	4053      	eors	r3, r2
   223fa:	b2db      	uxtb	r3, r3
   223fc:	2b00      	cmp	r3, #0
   223fe:	d046      	beq.n	2248e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   22400:	683b      	ldr	r3, [r7, #0]
   22402:	6a1d      	ldr	r5, [r3, #32]
   22404:	693b      	ldr	r3, [r7, #16]
   22406:	b2db      	uxtb	r3, r3
   22408:	0018      	movs	r0, r3
   2240a:	4b65      	ldr	r3, [pc, #404]	; (225a0 <_usart_set_config+0x2c8>)
   2240c:	4798      	blx	r3
   2240e:	0001      	movs	r1, r0
   22410:	231d      	movs	r3, #29
   22412:	18fc      	adds	r4, r7, r3
   22414:	230a      	movs	r3, #10
   22416:	18fb      	adds	r3, r7, r3
   22418:	001a      	movs	r2, r3
   2241a:	0028      	movs	r0, r5
   2241c:	4b61      	ldr	r3, [pc, #388]	; (225a4 <_usart_set_config+0x2cc>)
   2241e:	4798      	blx	r3
   22420:	0003      	movs	r3, r0
   22422:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   22424:	e033      	b.n	2248e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   22426:	683b      	ldr	r3, [r7, #0]
   22428:	2227      	movs	r2, #39	; 0x27
   2242a:	5c9b      	ldrb	r3, [r3, r2]
   2242c:	2b00      	cmp	r3, #0
   2242e:	d014      	beq.n	2245a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   22430:	683b      	ldr	r3, [r7, #0]
   22432:	6a18      	ldr	r0, [r3, #32]
   22434:	683b      	ldr	r3, [r7, #0]
   22436:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   22438:	231d      	movs	r3, #29
   2243a:	18fc      	adds	r4, r7, r3
   2243c:	231f      	movs	r3, #31
   2243e:	18fb      	adds	r3, r7, r3
   22440:	781d      	ldrb	r5, [r3, #0]
   22442:	230a      	movs	r3, #10
   22444:	18fa      	adds	r2, r7, r3
   22446:	231e      	movs	r3, #30
   22448:	18fb      	adds	r3, r7, r3
   2244a:	781b      	ldrb	r3, [r3, #0]
   2244c:	9300      	str	r3, [sp, #0]
   2244e:	002b      	movs	r3, r5
   22450:	4d55      	ldr	r5, [pc, #340]	; (225a8 <_usart_set_config+0x2d0>)
   22452:	47a8      	blx	r5
   22454:	0003      	movs	r3, r0
   22456:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   22458:	e01a      	b.n	22490 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2245a:	683b      	ldr	r3, [r7, #0]
   2245c:	6a1d      	ldr	r5, [r3, #32]
   2245e:	693b      	ldr	r3, [r7, #16]
   22460:	b2db      	uxtb	r3, r3
   22462:	0018      	movs	r0, r3
   22464:	4b4e      	ldr	r3, [pc, #312]	; (225a0 <_usart_set_config+0x2c8>)
   22466:	4798      	blx	r3
				status_code =
   22468:	231d      	movs	r3, #29
   2246a:	18fc      	adds	r4, r7, r3
   2246c:	231f      	movs	r3, #31
   2246e:	18fb      	adds	r3, r7, r3
   22470:	7819      	ldrb	r1, [r3, #0]
   22472:	230a      	movs	r3, #10
   22474:	18fa      	adds	r2, r7, r3
   22476:	231e      	movs	r3, #30
   22478:	18fb      	adds	r3, r7, r3
   2247a:	781b      	ldrb	r3, [r3, #0]
   2247c:	9300      	str	r3, [sp, #0]
   2247e:	000b      	movs	r3, r1
   22480:	0001      	movs	r1, r0
   22482:	0028      	movs	r0, r5
   22484:	4d48      	ldr	r5, [pc, #288]	; (225a8 <_usart_set_config+0x2d0>)
   22486:	47a8      	blx	r5
   22488:	0003      	movs	r3, r0
   2248a:	7023      	strb	r3, [r4, #0]
			break;
   2248c:	e000      	b.n	22490 <_usart_set_config+0x1b8>
			break;
   2248e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   22490:	231d      	movs	r3, #29
   22492:	18fb      	adds	r3, r7, r3
   22494:	781b      	ldrb	r3, [r3, #0]
   22496:	2b00      	cmp	r3, #0
   22498:	d003      	beq.n	224a2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2249a:	231d      	movs	r3, #29
   2249c:	18fb      	adds	r3, r7, r3
   2249e:	781b      	ldrb	r3, [r3, #0]
   224a0:	e077      	b.n	22592 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   224a2:	683b      	ldr	r3, [r7, #0]
   224a4:	7e5b      	ldrb	r3, [r3, #25]
   224a6:	2b00      	cmp	r3, #0
   224a8:	d003      	beq.n	224b2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   224aa:	683b      	ldr	r3, [r7, #0]
   224ac:	7e9a      	ldrb	r2, [r3, #26]
   224ae:	69bb      	ldr	r3, [r7, #24]
   224b0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   224b2:	687b      	ldr	r3, [r7, #4]
   224b4:	0018      	movs	r0, r3
   224b6:	4b3d      	ldr	r3, [pc, #244]	; (225ac <_usart_set_config+0x2d4>)
   224b8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   224ba:	230a      	movs	r3, #10
   224bc:	18fb      	adds	r3, r7, r3
   224be:	881a      	ldrh	r2, [r3, #0]
   224c0:	69bb      	ldr	r3, [r7, #24]
   224c2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   224c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   224c6:	68fb      	ldr	r3, [r7, #12]
   224c8:	4313      	orrs	r3, r2
   224ca:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   224cc:	683b      	ldr	r3, [r7, #0]
   224ce:	2227      	movs	r2, #39	; 0x27
   224d0:	5c9b      	ldrb	r3, [r3, r2]
   224d2:	2201      	movs	r2, #1
   224d4:	4053      	eors	r3, r2
   224d6:	b2db      	uxtb	r3, r3
   224d8:	2b00      	cmp	r3, #0
   224da:	d003      	beq.n	224e4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   224dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   224de:	2204      	movs	r2, #4
   224e0:	4313      	orrs	r3, r2
   224e2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   224e4:	683b      	ldr	r3, [r7, #0]
   224e6:	7e5b      	ldrb	r3, [r3, #25]
   224e8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   224ea:	683b      	ldr	r3, [r7, #0]
   224ec:	7f1b      	ldrb	r3, [r3, #28]
   224ee:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   224f0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   224f2:	683b      	ldr	r3, [r7, #0]
   224f4:	7f5b      	ldrb	r3, [r3, #29]
   224f6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   224f8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   224fa:	683b      	ldr	r3, [r7, #0]
   224fc:	2124      	movs	r1, #36	; 0x24
   224fe:	5c5b      	ldrb	r3, [r3, r1]
   22500:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   22502:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   22504:	683b      	ldr	r3, [r7, #0]
   22506:	2125      	movs	r1, #37	; 0x25
   22508:	5c5b      	ldrb	r3, [r3, r1]
   2250a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2250c:	4313      	orrs	r3, r2
	ctrlb =  
   2250e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   22510:	683b      	ldr	r3, [r7, #0]
   22512:	7a9b      	ldrb	r3, [r3, #10]
   22514:	001a      	movs	r2, r3
   22516:	6a3b      	ldr	r3, [r7, #32]
   22518:	4313      	orrs	r3, r2
   2251a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2251c:	683b      	ldr	r3, [r7, #0]
   2251e:	7adb      	ldrb	r3, [r3, #11]
   22520:	001a      	movs	r2, r3
   22522:	6a3b      	ldr	r3, [r7, #32]
   22524:	4313      	orrs	r3, r2
   22526:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   22528:	683b      	ldr	r3, [r7, #0]
   2252a:	891b      	ldrh	r3, [r3, #8]
   2252c:	2bff      	cmp	r3, #255	; 0xff
   2252e:	d00b      	beq.n	22548 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   22530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22532:	2280      	movs	r2, #128	; 0x80
   22534:	0452      	lsls	r2, r2, #17
   22536:	4313      	orrs	r3, r2
   22538:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2253a:	683b      	ldr	r3, [r7, #0]
   2253c:	891b      	ldrh	r3, [r3, #8]
   2253e:	001a      	movs	r2, r3
   22540:	6a3b      	ldr	r3, [r7, #32]
   22542:	4313      	orrs	r3, r2
   22544:	623b      	str	r3, [r7, #32]
   22546:	e008      	b.n	2255a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   22548:	683b      	ldr	r3, [r7, #0]
   2254a:	7edb      	ldrb	r3, [r3, #27]
   2254c:	2b00      	cmp	r3, #0
   2254e:	d004      	beq.n	2255a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   22550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22552:	2280      	movs	r2, #128	; 0x80
   22554:	04d2      	lsls	r2, r2, #19
   22556:	4313      	orrs	r3, r2
   22558:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2255a:	683b      	ldr	r3, [r7, #0]
   2255c:	222c      	movs	r2, #44	; 0x2c
   2255e:	5c9b      	ldrb	r3, [r3, r2]
   22560:	2b00      	cmp	r3, #0
   22562:	d103      	bne.n	2256c <_usart_set_config+0x294>
   22564:	4b12      	ldr	r3, [pc, #72]	; (225b0 <_usart_set_config+0x2d8>)
   22566:	4798      	blx	r3
   22568:	1e03      	subs	r3, r0, #0
   2256a:	d003      	beq.n	22574 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2256e:	2280      	movs	r2, #128	; 0x80
   22570:	4313      	orrs	r3, r2
   22572:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   22574:	687b      	ldr	r3, [r7, #4]
   22576:	0018      	movs	r0, r3
   22578:	4b0c      	ldr	r3, [pc, #48]	; (225ac <_usart_set_config+0x2d4>)
   2257a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2257c:	69bb      	ldr	r3, [r7, #24]
   2257e:	6a3a      	ldr	r2, [r7, #32]
   22580:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   22582:	687b      	ldr	r3, [r7, #4]
   22584:	0018      	movs	r0, r3
   22586:	4b09      	ldr	r3, [pc, #36]	; (225ac <_usart_set_config+0x2d4>)
   22588:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2258a:	69bb      	ldr	r3, [r7, #24]
   2258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2258e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   22590:	2300      	movs	r3, #0
}
   22592:	0018      	movs	r0, r3
   22594:	46bd      	mov	sp, r7
   22596:	b00a      	add	sp, #40	; 0x28
   22598:	bdb0      	pop	{r4, r5, r7, pc}
   2259a:	46c0      	nop			; (mov r8, r8)
   2259c:	0001f681 	.word	0x0001f681
   225a0:	00025419 	.word	0x00025419
   225a4:	0001f1fb 	.word	0x0001f1fb
   225a8:	0001f279 	.word	0x0001f279
   225ac:	000222b5 	.word	0x000222b5
   225b0:	00022275 	.word	0x00022275

000225b4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   225b4:	b590      	push	{r4, r7, lr}
   225b6:	b093      	sub	sp, #76	; 0x4c
   225b8:	af00      	add	r7, sp, #0
   225ba:	60f8      	str	r0, [r7, #12]
   225bc:	60b9      	str	r1, [r7, #8]
   225be:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   225c0:	233b      	movs	r3, #59	; 0x3b
   225c2:	18fb      	adds	r3, r7, r3
   225c4:	2200      	movs	r2, #0
   225c6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   225c8:	68fb      	ldr	r3, [r7, #12]
   225ca:	68ba      	ldr	r2, [r7, #8]
   225cc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   225ce:	68fb      	ldr	r3, [r7, #12]
   225d0:	681b      	ldr	r3, [r3, #0]
   225d2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   225d4:	68fb      	ldr	r3, [r7, #12]
   225d6:	681b      	ldr	r3, [r3, #0]
   225d8:	0018      	movs	r0, r3
   225da:	4b86      	ldr	r3, [pc, #536]	; (227f4 <usart_init+0x240>)
   225dc:	4798      	blx	r3
   225de:	0003      	movs	r3, r0
   225e0:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   225e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   225e4:	3302      	adds	r3, #2
   225e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   225e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   225ea:	3314      	adds	r3, #20
   225ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   225ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   225f0:	681b      	ldr	r3, [r3, #0]
   225f2:	2201      	movs	r2, #1
   225f4:	4013      	ands	r3, r2
   225f6:	d001      	beq.n	225fc <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   225f8:	2305      	movs	r3, #5
   225fa:	e0f6      	b.n	227ea <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   225fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   225fe:	681b      	ldr	r3, [r3, #0]
   22600:	2202      	movs	r2, #2
   22602:	4013      	ands	r3, r2
   22604:	d001      	beq.n	2260a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   22606:	231c      	movs	r3, #28
   22608:	e0ef      	b.n	227ea <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2260a:	2201      	movs	r2, #1
   2260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2260e:	409a      	lsls	r2, r3
   22610:	0013      	movs	r3, r2
   22612:	0019      	movs	r1, r3
   22614:	2002      	movs	r0, #2
   22616:	4b78      	ldr	r3, [pc, #480]	; (227f8 <usart_init+0x244>)
   22618:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2261a:	2324      	movs	r3, #36	; 0x24
   2261c:	18fb      	adds	r3, r7, r3
   2261e:	0018      	movs	r0, r3
   22620:	4b76      	ldr	r3, [pc, #472]	; (227fc <usart_init+0x248>)
   22622:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   22624:	687b      	ldr	r3, [r7, #4]
   22626:	222d      	movs	r2, #45	; 0x2d
   22628:	5c9a      	ldrb	r2, [r3, r2]
   2262a:	2324      	movs	r3, #36	; 0x24
   2262c:	18fb      	adds	r3, r7, r3
   2262e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   22630:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22632:	b2db      	uxtb	r3, r3
   22634:	2224      	movs	r2, #36	; 0x24
   22636:	18ba      	adds	r2, r7, r2
   22638:	0011      	movs	r1, r2
   2263a:	0018      	movs	r0, r3
   2263c:	4b70      	ldr	r3, [pc, #448]	; (22800 <usart_init+0x24c>)
   2263e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   22640:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22642:	b2db      	uxtb	r3, r3
   22644:	0018      	movs	r0, r3
   22646:	4b6f      	ldr	r3, [pc, #444]	; (22804 <usart_init+0x250>)
   22648:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2264a:	687b      	ldr	r3, [r7, #4]
   2264c:	222d      	movs	r2, #45	; 0x2d
   2264e:	5c9b      	ldrb	r3, [r3, r2]
   22650:	2100      	movs	r1, #0
   22652:	0018      	movs	r0, r3
   22654:	4b6c      	ldr	r3, [pc, #432]	; (22808 <usart_init+0x254>)
   22656:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   22658:	687b      	ldr	r3, [r7, #4]
   2265a:	7ada      	ldrb	r2, [r3, #11]
   2265c:	68fb      	ldr	r3, [r7, #12]
   2265e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   22660:	687b      	ldr	r3, [r7, #4]
   22662:	2224      	movs	r2, #36	; 0x24
   22664:	5c9a      	ldrb	r2, [r3, r2]
   22666:	68fb      	ldr	r3, [r7, #12]
   22668:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2266a:	687b      	ldr	r3, [r7, #4]
   2266c:	2225      	movs	r2, #37	; 0x25
   2266e:	5c9a      	ldrb	r2, [r3, r2]
   22670:	68fb      	ldr	r3, [r7, #12]
   22672:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   22674:	687b      	ldr	r3, [r7, #4]
   22676:	7eda      	ldrb	r2, [r3, #27]
   22678:	68fb      	ldr	r3, [r7, #12]
   2267a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2267c:	687b      	ldr	r3, [r7, #4]
   2267e:	7f1a      	ldrb	r2, [r3, #28]
   22680:	68fb      	ldr	r3, [r7, #12]
   22682:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   22684:	233b      	movs	r3, #59	; 0x3b
   22686:	18fc      	adds	r4, r7, r3
   22688:	687a      	ldr	r2, [r7, #4]
   2268a:	68fb      	ldr	r3, [r7, #12]
   2268c:	0011      	movs	r1, r2
   2268e:	0018      	movs	r0, r3
   22690:	4b5e      	ldr	r3, [pc, #376]	; (2280c <usart_init+0x258>)
   22692:	4798      	blx	r3
   22694:	0003      	movs	r3, r0
   22696:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   22698:	233b      	movs	r3, #59	; 0x3b
   2269a:	18fb      	adds	r3, r7, r3
   2269c:	781b      	ldrb	r3, [r3, #0]
   2269e:	2b00      	cmp	r3, #0
   226a0:	d003      	beq.n	226aa <usart_init+0xf6>
		return status_code;
   226a2:	233b      	movs	r3, #59	; 0x3b
   226a4:	18fb      	adds	r3, r7, r3
   226a6:	781b      	ldrb	r3, [r3, #0]
   226a8:	e09f      	b.n	227ea <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   226aa:	2320      	movs	r3, #32
   226ac:	18fb      	adds	r3, r7, r3
   226ae:	0018      	movs	r0, r3
   226b0:	4b57      	ldr	r3, [pc, #348]	; (22810 <usart_init+0x25c>)
   226b2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   226b4:	2320      	movs	r3, #32
   226b6:	18fb      	adds	r3, r7, r3
   226b8:	2200      	movs	r2, #0
   226ba:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   226bc:	2320      	movs	r3, #32
   226be:	18fb      	adds	r3, r7, r3
   226c0:	2200      	movs	r2, #0
   226c2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   226c4:	687b      	ldr	r3, [r7, #4]
   226c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   226c8:	2310      	movs	r3, #16
   226ca:	18fb      	adds	r3, r7, r3
   226cc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   226ce:	687b      	ldr	r3, [r7, #4]
   226d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   226d2:	2310      	movs	r3, #16
   226d4:	18fb      	adds	r3, r7, r3
   226d6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   226d8:	687b      	ldr	r3, [r7, #4]
   226da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   226dc:	2310      	movs	r3, #16
   226de:	18fb      	adds	r3, r7, r3
   226e0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   226e2:	687b      	ldr	r3, [r7, #4]
   226e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   226e6:	2310      	movs	r3, #16
   226e8:	18fb      	adds	r3, r7, r3
   226ea:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   226ec:	2347      	movs	r3, #71	; 0x47
   226ee:	18fb      	adds	r3, r7, r3
   226f0:	2200      	movs	r2, #0
   226f2:	701a      	strb	r2, [r3, #0]
   226f4:	e02c      	b.n	22750 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   226f6:	2347      	movs	r3, #71	; 0x47
   226f8:	18fb      	adds	r3, r7, r3
   226fa:	781a      	ldrb	r2, [r3, #0]
   226fc:	2310      	movs	r3, #16
   226fe:	18fb      	adds	r3, r7, r3
   22700:	0092      	lsls	r2, r2, #2
   22702:	58d3      	ldr	r3, [r2, r3]
   22704:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   22706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22708:	2b00      	cmp	r3, #0
   2270a:	d109      	bne.n	22720 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2270c:	2347      	movs	r3, #71	; 0x47
   2270e:	18fb      	adds	r3, r7, r3
   22710:	781a      	ldrb	r2, [r3, #0]
   22712:	68bb      	ldr	r3, [r7, #8]
   22714:	0011      	movs	r1, r2
   22716:	0018      	movs	r0, r3
   22718:	4b3e      	ldr	r3, [pc, #248]	; (22814 <usart_init+0x260>)
   2271a:	4798      	blx	r3
   2271c:	0003      	movs	r3, r0
   2271e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   22720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22722:	3301      	adds	r3, #1
   22724:	d00d      	beq.n	22742 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   22726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22728:	b2da      	uxtb	r2, r3
   2272a:	2320      	movs	r3, #32
   2272c:	18fb      	adds	r3, r7, r3
   2272e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   22730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22732:	0c1b      	lsrs	r3, r3, #16
   22734:	b2db      	uxtb	r3, r3
   22736:	2220      	movs	r2, #32
   22738:	18ba      	adds	r2, r7, r2
   2273a:	0011      	movs	r1, r2
   2273c:	0018      	movs	r0, r3
   2273e:	4b36      	ldr	r3, [pc, #216]	; (22818 <usart_init+0x264>)
   22740:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   22742:	2347      	movs	r3, #71	; 0x47
   22744:	18fb      	adds	r3, r7, r3
   22746:	781a      	ldrb	r2, [r3, #0]
   22748:	2347      	movs	r3, #71	; 0x47
   2274a:	18fb      	adds	r3, r7, r3
   2274c:	3201      	adds	r2, #1
   2274e:	701a      	strb	r2, [r3, #0]
   22750:	2347      	movs	r3, #71	; 0x47
   22752:	18fb      	adds	r3, r7, r3
   22754:	781b      	ldrb	r3, [r3, #0]
   22756:	2b03      	cmp	r3, #3
   22758:	d9cd      	bls.n	226f6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2275a:	2300      	movs	r3, #0
   2275c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2275e:	e00a      	b.n	22776 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   22760:	68fa      	ldr	r2, [r7, #12]
   22762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22764:	3302      	adds	r3, #2
   22766:	009b      	lsls	r3, r3, #2
   22768:	18d3      	adds	r3, r2, r3
   2276a:	3304      	adds	r3, #4
   2276c:	2200      	movs	r2, #0
   2276e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   22770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22772:	3301      	adds	r3, #1
   22774:	63fb      	str	r3, [r7, #60]	; 0x3c
   22776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22778:	2b05      	cmp	r3, #5
   2277a:	d9f1      	bls.n	22760 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2277c:	68fb      	ldr	r3, [r7, #12]
   2277e:	2200      	movs	r2, #0
   22780:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   22782:	68fb      	ldr	r3, [r7, #12]
   22784:	2200      	movs	r2, #0
   22786:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   22788:	68fb      	ldr	r3, [r7, #12]
   2278a:	2200      	movs	r2, #0
   2278c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2278e:	68fb      	ldr	r3, [r7, #12]
   22790:	2200      	movs	r2, #0
   22792:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   22794:	68fb      	ldr	r3, [r7, #12]
   22796:	2230      	movs	r2, #48	; 0x30
   22798:	2100      	movs	r1, #0
   2279a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2279c:	68fb      	ldr	r3, [r7, #12]
   2279e:	2231      	movs	r2, #49	; 0x31
   227a0:	2100      	movs	r1, #0
   227a2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   227a4:	68fb      	ldr	r3, [r7, #12]
   227a6:	2232      	movs	r2, #50	; 0x32
   227a8:	2100      	movs	r1, #0
   227aa:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   227ac:	68fb      	ldr	r3, [r7, #12]
   227ae:	2233      	movs	r2, #51	; 0x33
   227b0:	2100      	movs	r1, #0
   227b2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   227b4:	68fb      	ldr	r3, [r7, #12]
   227b6:	681b      	ldr	r3, [r3, #0]
   227b8:	2227      	movs	r2, #39	; 0x27
   227ba:	18bc      	adds	r4, r7, r2
   227bc:	0018      	movs	r0, r3
   227be:	4b0d      	ldr	r3, [pc, #52]	; (227f4 <usart_init+0x240>)
   227c0:	4798      	blx	r3
   227c2:	0003      	movs	r3, r0
   227c4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   227c6:	4a15      	ldr	r2, [pc, #84]	; (2281c <usart_init+0x268>)
   227c8:	2327      	movs	r3, #39	; 0x27
   227ca:	18fb      	adds	r3, r7, r3
   227cc:	781b      	ldrb	r3, [r3, #0]
   227ce:	0011      	movs	r1, r2
   227d0:	0018      	movs	r0, r3
   227d2:	4b13      	ldr	r3, [pc, #76]	; (22820 <usart_init+0x26c>)
   227d4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   227d6:	2327      	movs	r3, #39	; 0x27
   227d8:	18fb      	adds	r3, r7, r3
   227da:	781a      	ldrb	r2, [r3, #0]
   227dc:	4b11      	ldr	r3, [pc, #68]	; (22824 <usart_init+0x270>)
   227de:	0092      	lsls	r2, r2, #2
   227e0:	68f9      	ldr	r1, [r7, #12]
   227e2:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   227e4:	233b      	movs	r3, #59	; 0x3b
   227e6:	18fb      	adds	r3, r7, r3
   227e8:	781b      	ldrb	r3, [r3, #0]
}
   227ea:	0018      	movs	r0, r3
   227ec:	46bd      	mov	sp, r7
   227ee:	b013      	add	sp, #76	; 0x4c
   227f0:	bd90      	pop	{r4, r7, pc}
   227f2:	46c0      	nop			; (mov r8, r8)
   227f4:	0001f681 	.word	0x0001f681
   227f8:	000221f1 	.word	0x000221f1
   227fc:	000221d9 	.word	0x000221d9
   22800:	000252f5 	.word	0x000252f5
   22804:	00025339 	.word	0x00025339
   22808:	0001f439 	.word	0x0001f439
   2280c:	000222d9 	.word	0x000222d9
   22810:	0002224d 	.word	0x0002224d
   22814:	0001f4c5 	.word	0x0001f4c5
   22818:	000255e1 	.word	0x000255e1
   2281c:	000229fd 	.word	0x000229fd
   22820:	00022d51 	.word	0x00022d51
   22824:	20000b78 	.word	0x20000b78

00022828 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   22828:	b580      	push	{r7, lr}
   2282a:	b084      	sub	sp, #16
   2282c:	af00      	add	r7, sp, #0
   2282e:	6078      	str	r0, [r7, #4]
   22830:	000a      	movs	r2, r1
   22832:	1cbb      	adds	r3, r7, #2
   22834:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   22836:	687b      	ldr	r3, [r7, #4]
   22838:	681b      	ldr	r3, [r3, #0]
   2283a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2283c:	687b      	ldr	r3, [r7, #4]
   2283e:	79db      	ldrb	r3, [r3, #7]
   22840:	2201      	movs	r2, #1
   22842:	4053      	eors	r3, r2
   22844:	b2db      	uxtb	r3, r3
   22846:	2b00      	cmp	r3, #0
   22848:	d001      	beq.n	2284e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   2284a:	231c      	movs	r3, #28
   2284c:	e017      	b.n	2287e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   2284e:	687b      	ldr	r3, [r7, #4]
   22850:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   22852:	b29b      	uxth	r3, r3
   22854:	2b00      	cmp	r3, #0
   22856:	d001      	beq.n	2285c <usart_write_wait+0x34>
		return STATUS_BUSY;
   22858:	2305      	movs	r3, #5
   2285a:	e010      	b.n	2287e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2285c:	687b      	ldr	r3, [r7, #4]
   2285e:	0018      	movs	r0, r3
   22860:	4b09      	ldr	r3, [pc, #36]	; (22888 <usart_write_wait+0x60>)
   22862:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   22864:	68fb      	ldr	r3, [r7, #12]
   22866:	1cba      	adds	r2, r7, #2
   22868:	8812      	ldrh	r2, [r2, #0]
   2286a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   2286c:	46c0      	nop			; (mov r8, r8)
   2286e:	68fb      	ldr	r3, [r7, #12]
   22870:	7e1b      	ldrb	r3, [r3, #24]
   22872:	b2db      	uxtb	r3, r3
   22874:	001a      	movs	r2, r3
   22876:	2302      	movs	r3, #2
   22878:	4013      	ands	r3, r2
   2287a:	d0f8      	beq.n	2286e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   2287c:	2300      	movs	r3, #0
}
   2287e:	0018      	movs	r0, r3
   22880:	46bd      	mov	sp, r7
   22882:	b004      	add	sp, #16
   22884:	bd80      	pop	{r7, pc}
   22886:	46c0      	nop			; (mov r8, r8)
   22888:	000222b5 	.word	0x000222b5

0002288c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2288c:	b580      	push	{r7, lr}
   2288e:	b08a      	sub	sp, #40	; 0x28
   22890:	af00      	add	r7, sp, #0
   22892:	60f8      	str	r0, [r7, #12]
   22894:	60b9      	str	r1, [r7, #8]
   22896:	1dbb      	adds	r3, r7, #6
   22898:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   2289a:	1dbb      	adds	r3, r7, #6
   2289c:	881b      	ldrh	r3, [r3, #0]
   2289e:	2b00      	cmp	r3, #0
   228a0:	d101      	bne.n	228a6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   228a2:	2317      	movs	r3, #23
   228a4:	e07e      	b.n	229a4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   228a6:	68fb      	ldr	r3, [r7, #12]
   228a8:	79db      	ldrb	r3, [r3, #7]
   228aa:	2201      	movs	r2, #1
   228ac:	4053      	eors	r3, r2
   228ae:	b2db      	uxtb	r3, r3
   228b0:	2b00      	cmp	r3, #0
   228b2:	d001      	beq.n	228b8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   228b4:	231c      	movs	r3, #28
   228b6:	e075      	b.n	229a4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   228b8:	68fb      	ldr	r3, [r7, #12]
   228ba:	681b      	ldr	r3, [r3, #0]
   228bc:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   228be:	68fb      	ldr	r3, [r7, #12]
   228c0:	0018      	movs	r0, r3
   228c2:	4b3a      	ldr	r3, [pc, #232]	; (229ac <usart_write_buffer_wait+0x120>)
   228c4:	4798      	blx	r3

	uint16_t tx_pos = 0;
   228c6:	2326      	movs	r3, #38	; 0x26
   228c8:	18fb      	adds	r3, r7, r3
   228ca:	2200      	movs	r2, #0
   228cc:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   228ce:	e048      	b.n	22962 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   228d0:	2300      	movs	r3, #0
   228d2:	623b      	str	r3, [r7, #32]
   228d4:	e00f      	b.n	228f6 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   228d6:	697b      	ldr	r3, [r7, #20]
   228d8:	7e1b      	ldrb	r3, [r3, #24]
   228da:	b2db      	uxtb	r3, r3
   228dc:	001a      	movs	r2, r3
   228de:	2301      	movs	r3, #1
   228e0:	4013      	ands	r3, r2
   228e2:	d10d      	bne.n	22900 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   228e4:	6a3b      	ldr	r3, [r7, #32]
   228e6:	4a32      	ldr	r2, [pc, #200]	; (229b0 <usart_write_buffer_wait+0x124>)
   228e8:	4293      	cmp	r3, r2
   228ea:	d101      	bne.n	228f0 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   228ec:	2312      	movs	r3, #18
   228ee:	e059      	b.n	229a4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   228f0:	6a3b      	ldr	r3, [r7, #32]
   228f2:	3301      	adds	r3, #1
   228f4:	623b      	str	r3, [r7, #32]
   228f6:	6a3b      	ldr	r3, [r7, #32]
   228f8:	4a2d      	ldr	r2, [pc, #180]	; (229b0 <usart_write_buffer_wait+0x124>)
   228fa:	4293      	cmp	r3, r2
   228fc:	d9eb      	bls.n	228d6 <usart_write_buffer_wait+0x4a>
   228fe:	e000      	b.n	22902 <usart_write_buffer_wait+0x76>
				break;
   22900:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   22902:	2326      	movs	r3, #38	; 0x26
   22904:	18fb      	adds	r3, r7, r3
   22906:	881b      	ldrh	r3, [r3, #0]
   22908:	2226      	movs	r2, #38	; 0x26
   2290a:	18ba      	adds	r2, r7, r2
   2290c:	1c59      	adds	r1, r3, #1
   2290e:	8011      	strh	r1, [r2, #0]
   22910:	001a      	movs	r2, r3
   22912:	68bb      	ldr	r3, [r7, #8]
   22914:	189b      	adds	r3, r3, r2
   22916:	781a      	ldrb	r2, [r3, #0]
   22918:	231e      	movs	r3, #30
   2291a:	18fb      	adds	r3, r7, r3
   2291c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2291e:	68fb      	ldr	r3, [r7, #12]
   22920:	795b      	ldrb	r3, [r3, #5]
   22922:	2b01      	cmp	r3, #1
   22924:	d115      	bne.n	22952 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   22926:	2326      	movs	r3, #38	; 0x26
   22928:	18fb      	adds	r3, r7, r3
   2292a:	881b      	ldrh	r3, [r3, #0]
   2292c:	2226      	movs	r2, #38	; 0x26
   2292e:	18ba      	adds	r2, r7, r2
   22930:	1c59      	adds	r1, r3, #1
   22932:	8011      	strh	r1, [r2, #0]
   22934:	001a      	movs	r2, r3
   22936:	68bb      	ldr	r3, [r7, #8]
   22938:	189b      	adds	r3, r3, r2
   2293a:	781b      	ldrb	r3, [r3, #0]
   2293c:	021b      	lsls	r3, r3, #8
   2293e:	b21a      	sxth	r2, r3
   22940:	231e      	movs	r3, #30
   22942:	18fb      	adds	r3, r7, r3
   22944:	2100      	movs	r1, #0
   22946:	5e5b      	ldrsh	r3, [r3, r1]
   22948:	4313      	orrs	r3, r2
   2294a:	b21a      	sxth	r2, r3
   2294c:	231e      	movs	r3, #30
   2294e:	18fb      	adds	r3, r7, r3
   22950:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   22952:	231e      	movs	r3, #30
   22954:	18fb      	adds	r3, r7, r3
   22956:	881a      	ldrh	r2, [r3, #0]
   22958:	68fb      	ldr	r3, [r7, #12]
   2295a:	0011      	movs	r1, r2
   2295c:	0018      	movs	r0, r3
   2295e:	4b15      	ldr	r3, [pc, #84]	; (229b4 <usart_write_buffer_wait+0x128>)
   22960:	4798      	blx	r3
	while (length--) {
   22962:	1dbb      	adds	r3, r7, #6
   22964:	881b      	ldrh	r3, [r3, #0]
   22966:	1dba      	adds	r2, r7, #6
   22968:	1e59      	subs	r1, r3, #1
   2296a:	8011      	strh	r1, [r2, #0]
   2296c:	2b00      	cmp	r3, #0
   2296e:	d1af      	bne.n	228d0 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   22970:	2300      	movs	r3, #0
   22972:	61bb      	str	r3, [r7, #24]
   22974:	e00f      	b.n	22996 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   22976:	697b      	ldr	r3, [r7, #20]
   22978:	7e1b      	ldrb	r3, [r3, #24]
   2297a:	b2db      	uxtb	r3, r3
   2297c:	001a      	movs	r2, r3
   2297e:	2302      	movs	r3, #2
   22980:	4013      	ands	r3, r2
   22982:	d10d      	bne.n	229a0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   22984:	69bb      	ldr	r3, [r7, #24]
   22986:	4a0a      	ldr	r2, [pc, #40]	; (229b0 <usart_write_buffer_wait+0x124>)
   22988:	4293      	cmp	r3, r2
   2298a:	d101      	bne.n	22990 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   2298c:	2312      	movs	r3, #18
   2298e:	e009      	b.n	229a4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   22990:	69bb      	ldr	r3, [r7, #24]
   22992:	3301      	adds	r3, #1
   22994:	61bb      	str	r3, [r7, #24]
   22996:	69bb      	ldr	r3, [r7, #24]
   22998:	4a05      	ldr	r2, [pc, #20]	; (229b0 <usart_write_buffer_wait+0x124>)
   2299a:	4293      	cmp	r3, r2
   2299c:	d9eb      	bls.n	22976 <usart_write_buffer_wait+0xea>
   2299e:	e000      	b.n	229a2 <usart_write_buffer_wait+0x116>
			break;
   229a0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   229a2:	2300      	movs	r3, #0
}
   229a4:	0018      	movs	r0, r3
   229a6:	46bd      	mov	sp, r7
   229a8:	b00a      	add	sp, #40	; 0x28
   229aa:	bd80      	pop	{r7, pc}
   229ac:	000222b5 	.word	0x000222b5
   229b0:	0000ffff 	.word	0x0000ffff
   229b4:	00022829 	.word	0x00022829

000229b8 <usart_is_syncing>:
{
   229b8:	b580      	push	{r7, lr}
   229ba:	b084      	sub	sp, #16
   229bc:	af00      	add	r7, sp, #0
   229be:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   229c0:	687b      	ldr	r3, [r7, #4]
   229c2:	681b      	ldr	r3, [r3, #0]
   229c4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   229c6:	68fb      	ldr	r3, [r7, #12]
   229c8:	69db      	ldr	r3, [r3, #28]
   229ca:	1e5a      	subs	r2, r3, #1
   229cc:	4193      	sbcs	r3, r2
   229ce:	b2db      	uxtb	r3, r3
}
   229d0:	0018      	movs	r0, r3
   229d2:	46bd      	mov	sp, r7
   229d4:	b004      	add	sp, #16
   229d6:	bd80      	pop	{r7, pc}

000229d8 <_usart_wait_for_sync>:
{
   229d8:	b580      	push	{r7, lr}
   229da:	b082      	sub	sp, #8
   229dc:	af00      	add	r7, sp, #0
   229de:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   229e0:	46c0      	nop			; (mov r8, r8)
   229e2:	687b      	ldr	r3, [r7, #4]
   229e4:	0018      	movs	r0, r3
   229e6:	4b04      	ldr	r3, [pc, #16]	; (229f8 <_usart_wait_for_sync+0x20>)
   229e8:	4798      	blx	r3
   229ea:	1e03      	subs	r3, r0, #0
   229ec:	d1f9      	bne.n	229e2 <_usart_wait_for_sync+0xa>
}
   229ee:	46c0      	nop			; (mov r8, r8)
   229f0:	46bd      	mov	sp, r7
   229f2:	b002      	add	sp, #8
   229f4:	bd80      	pop	{r7, pc}
   229f6:	46c0      	nop			; (mov r8, r8)
   229f8:	000229b9 	.word	0x000229b9

000229fc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   229fc:	b580      	push	{r7, lr}
   229fe:	b088      	sub	sp, #32
   22a00:	af00      	add	r7, sp, #0
   22a02:	0002      	movs	r2, r0
   22a04:	1dfb      	adds	r3, r7, #7
   22a06:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   22a08:	1dfb      	adds	r3, r7, #7
   22a0a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   22a0c:	4ba3      	ldr	r3, [pc, #652]	; (22c9c <_usart_interrupt_handler+0x2a0>)
   22a0e:	0092      	lsls	r2, r2, #2
   22a10:	58d3      	ldr	r3, [r2, r3]
   22a12:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   22a14:	69bb      	ldr	r3, [r7, #24]
   22a16:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   22a18:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   22a1a:	69bb      	ldr	r3, [r7, #24]
   22a1c:	0018      	movs	r0, r3
   22a1e:	4ba0      	ldr	r3, [pc, #640]	; (22ca0 <_usart_interrupt_handler+0x2a4>)
   22a20:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   22a22:	697b      	ldr	r3, [r7, #20]
   22a24:	7e1b      	ldrb	r3, [r3, #24]
   22a26:	b2da      	uxtb	r2, r3
   22a28:	2312      	movs	r3, #18
   22a2a:	18fb      	adds	r3, r7, r3
   22a2c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   22a2e:	697b      	ldr	r3, [r7, #20]
   22a30:	7d9b      	ldrb	r3, [r3, #22]
   22a32:	b2db      	uxtb	r3, r3
   22a34:	b29a      	uxth	r2, r3
   22a36:	2312      	movs	r3, #18
   22a38:	18fb      	adds	r3, r7, r3
   22a3a:	2112      	movs	r1, #18
   22a3c:	1879      	adds	r1, r7, r1
   22a3e:	8809      	ldrh	r1, [r1, #0]
   22a40:	400a      	ands	r2, r1
   22a42:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   22a44:	69bb      	ldr	r3, [r7, #24]
   22a46:	2230      	movs	r2, #48	; 0x30
   22a48:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   22a4a:	69ba      	ldr	r2, [r7, #24]
   22a4c:	2131      	movs	r1, #49	; 0x31
   22a4e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   22a50:	4013      	ands	r3, r2
   22a52:	b2da      	uxtb	r2, r3
   22a54:	2310      	movs	r3, #16
   22a56:	18fb      	adds	r3, r7, r3
   22a58:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   22a5a:	2312      	movs	r3, #18
   22a5c:	18fb      	adds	r3, r7, r3
   22a5e:	881b      	ldrh	r3, [r3, #0]
   22a60:	2201      	movs	r2, #1
   22a62:	4013      	ands	r3, r2
   22a64:	d044      	beq.n	22af0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   22a66:	69bb      	ldr	r3, [r7, #24]
   22a68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   22a6a:	b29b      	uxth	r3, r3
   22a6c:	2b00      	cmp	r3, #0
   22a6e:	d03c      	beq.n	22aea <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   22a70:	69bb      	ldr	r3, [r7, #24]
   22a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22a74:	781b      	ldrb	r3, [r3, #0]
   22a76:	b2da      	uxtb	r2, r3
   22a78:	231c      	movs	r3, #28
   22a7a:	18fb      	adds	r3, r7, r3
   22a7c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   22a7e:	69bb      	ldr	r3, [r7, #24]
   22a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22a82:	1c5a      	adds	r2, r3, #1
   22a84:	69bb      	ldr	r3, [r7, #24]
   22a86:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   22a88:	69bb      	ldr	r3, [r7, #24]
   22a8a:	795b      	ldrb	r3, [r3, #5]
   22a8c:	2b01      	cmp	r3, #1
   22a8e:	d113      	bne.n	22ab8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   22a90:	69bb      	ldr	r3, [r7, #24]
   22a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22a94:	781b      	ldrb	r3, [r3, #0]
   22a96:	b2db      	uxtb	r3, r3
   22a98:	021b      	lsls	r3, r3, #8
   22a9a:	b21a      	sxth	r2, r3
   22a9c:	231c      	movs	r3, #28
   22a9e:	18fb      	adds	r3, r7, r3
   22aa0:	2100      	movs	r1, #0
   22aa2:	5e5b      	ldrsh	r3, [r3, r1]
   22aa4:	4313      	orrs	r3, r2
   22aa6:	b21a      	sxth	r2, r3
   22aa8:	231c      	movs	r3, #28
   22aaa:	18fb      	adds	r3, r7, r3
   22aac:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   22aae:	69bb      	ldr	r3, [r7, #24]
   22ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22ab2:	1c5a      	adds	r2, r3, #1
   22ab4:	69bb      	ldr	r3, [r7, #24]
   22ab6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   22ab8:	231c      	movs	r3, #28
   22aba:	18fb      	adds	r3, r7, r3
   22abc:	881b      	ldrh	r3, [r3, #0]
   22abe:	05db      	lsls	r3, r3, #23
   22ac0:	0ddb      	lsrs	r3, r3, #23
   22ac2:	b29a      	uxth	r2, r3
   22ac4:	697b      	ldr	r3, [r7, #20]
   22ac6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   22ac8:	69bb      	ldr	r3, [r7, #24]
   22aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   22acc:	b29b      	uxth	r3, r3
   22ace:	3b01      	subs	r3, #1
   22ad0:	b29b      	uxth	r3, r3
   22ad2:	69ba      	ldr	r2, [r7, #24]
   22ad4:	1c19      	adds	r1, r3, #0
   22ad6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   22ad8:	2b00      	cmp	r3, #0
   22ada:	d109      	bne.n	22af0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   22adc:	697b      	ldr	r3, [r7, #20]
   22ade:	2201      	movs	r2, #1
   22ae0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   22ae2:	697b      	ldr	r3, [r7, #20]
   22ae4:	2202      	movs	r2, #2
   22ae6:	759a      	strb	r2, [r3, #22]
   22ae8:	e002      	b.n	22af0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   22aea:	697b      	ldr	r3, [r7, #20]
   22aec:	2201      	movs	r2, #1
   22aee:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   22af0:	2312      	movs	r3, #18
   22af2:	18fb      	adds	r3, r7, r3
   22af4:	881b      	ldrh	r3, [r3, #0]
   22af6:	2202      	movs	r2, #2
   22af8:	4013      	ands	r3, r2
   22afa:	d011      	beq.n	22b20 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   22afc:	697b      	ldr	r3, [r7, #20]
   22afe:	2202      	movs	r2, #2
   22b00:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   22b02:	69bb      	ldr	r3, [r7, #24]
   22b04:	2233      	movs	r2, #51	; 0x33
   22b06:	2100      	movs	r1, #0
   22b08:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   22b0a:	2310      	movs	r3, #16
   22b0c:	18fb      	adds	r3, r7, r3
   22b0e:	881b      	ldrh	r3, [r3, #0]
   22b10:	2201      	movs	r2, #1
   22b12:	4013      	ands	r3, r2
   22b14:	d004      	beq.n	22b20 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   22b16:	69bb      	ldr	r3, [r7, #24]
   22b18:	68db      	ldr	r3, [r3, #12]
   22b1a:	69ba      	ldr	r2, [r7, #24]
   22b1c:	0010      	movs	r0, r2
   22b1e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   22b20:	2312      	movs	r3, #18
   22b22:	18fb      	adds	r3, r7, r3
   22b24:	881b      	ldrh	r3, [r3, #0]
   22b26:	2204      	movs	r2, #4
   22b28:	4013      	ands	r3, r2
   22b2a:	d100      	bne.n	22b2e <_usart_interrupt_handler+0x132>
   22b2c:	e0bd      	b.n	22caa <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   22b2e:	69bb      	ldr	r3, [r7, #24]
   22b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22b32:	b29b      	uxth	r3, r3
   22b34:	2b00      	cmp	r3, #0
   22b36:	d100      	bne.n	22b3a <_usart_interrupt_handler+0x13e>
   22b38:	e0b4      	b.n	22ca4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   22b3a:	697b      	ldr	r3, [r7, #20]
   22b3c:	8b5b      	ldrh	r3, [r3, #26]
   22b3e:	b29b      	uxth	r3, r3
   22b40:	b2da      	uxtb	r2, r3
   22b42:	231f      	movs	r3, #31
   22b44:	18fb      	adds	r3, r7, r3
   22b46:	213f      	movs	r1, #63	; 0x3f
   22b48:	400a      	ands	r2, r1
   22b4a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   22b4c:	231f      	movs	r3, #31
   22b4e:	18fb      	adds	r3, r7, r3
   22b50:	781b      	ldrb	r3, [r3, #0]
   22b52:	2208      	movs	r2, #8
   22b54:	4013      	ands	r3, r2
   22b56:	d007      	beq.n	22b68 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   22b58:	231f      	movs	r3, #31
   22b5a:	18fb      	adds	r3, r7, r3
   22b5c:	221f      	movs	r2, #31
   22b5e:	18ba      	adds	r2, r7, r2
   22b60:	7812      	ldrb	r2, [r2, #0]
   22b62:	2108      	movs	r1, #8
   22b64:	438a      	bics	r2, r1
   22b66:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   22b68:	231f      	movs	r3, #31
   22b6a:	18fb      	adds	r3, r7, r3
   22b6c:	781b      	ldrb	r3, [r3, #0]
   22b6e:	2b00      	cmp	r3, #0
   22b70:	d050      	beq.n	22c14 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   22b72:	231f      	movs	r3, #31
   22b74:	18fb      	adds	r3, r7, r3
   22b76:	781b      	ldrb	r3, [r3, #0]
   22b78:	2202      	movs	r2, #2
   22b7a:	4013      	ands	r3, r2
   22b7c:	d007      	beq.n	22b8e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   22b7e:	69bb      	ldr	r3, [r7, #24]
   22b80:	2232      	movs	r2, #50	; 0x32
   22b82:	211a      	movs	r1, #26
   22b84:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   22b86:	697b      	ldr	r3, [r7, #20]
   22b88:	2202      	movs	r2, #2
   22b8a:	835a      	strh	r2, [r3, #26]
   22b8c:	e036      	b.n	22bfc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   22b8e:	231f      	movs	r3, #31
   22b90:	18fb      	adds	r3, r7, r3
   22b92:	781b      	ldrb	r3, [r3, #0]
   22b94:	2204      	movs	r2, #4
   22b96:	4013      	ands	r3, r2
   22b98:	d007      	beq.n	22baa <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   22b9a:	69bb      	ldr	r3, [r7, #24]
   22b9c:	2232      	movs	r2, #50	; 0x32
   22b9e:	211e      	movs	r1, #30
   22ba0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   22ba2:	697b      	ldr	r3, [r7, #20]
   22ba4:	2204      	movs	r2, #4
   22ba6:	835a      	strh	r2, [r3, #26]
   22ba8:	e028      	b.n	22bfc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   22baa:	231f      	movs	r3, #31
   22bac:	18fb      	adds	r3, r7, r3
   22bae:	781b      	ldrb	r3, [r3, #0]
   22bb0:	2201      	movs	r2, #1
   22bb2:	4013      	ands	r3, r2
   22bb4:	d007      	beq.n	22bc6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   22bb6:	69bb      	ldr	r3, [r7, #24]
   22bb8:	2232      	movs	r2, #50	; 0x32
   22bba:	2113      	movs	r1, #19
   22bbc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   22bbe:	697b      	ldr	r3, [r7, #20]
   22bc0:	2201      	movs	r2, #1
   22bc2:	835a      	strh	r2, [r3, #26]
   22bc4:	e01a      	b.n	22bfc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   22bc6:	231f      	movs	r3, #31
   22bc8:	18fb      	adds	r3, r7, r3
   22bca:	781b      	ldrb	r3, [r3, #0]
   22bcc:	2210      	movs	r2, #16
   22bce:	4013      	ands	r3, r2
   22bd0:	d007      	beq.n	22be2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   22bd2:	69bb      	ldr	r3, [r7, #24]
   22bd4:	2232      	movs	r2, #50	; 0x32
   22bd6:	2142      	movs	r1, #66	; 0x42
   22bd8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   22bda:	697b      	ldr	r3, [r7, #20]
   22bdc:	2210      	movs	r2, #16
   22bde:	835a      	strh	r2, [r3, #26]
   22be0:	e00c      	b.n	22bfc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   22be2:	231f      	movs	r3, #31
   22be4:	18fb      	adds	r3, r7, r3
   22be6:	781b      	ldrb	r3, [r3, #0]
   22be8:	2220      	movs	r2, #32
   22bea:	4013      	ands	r3, r2
   22bec:	d006      	beq.n	22bfc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   22bee:	69bb      	ldr	r3, [r7, #24]
   22bf0:	2232      	movs	r2, #50	; 0x32
   22bf2:	2141      	movs	r1, #65	; 0x41
   22bf4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   22bf6:	697b      	ldr	r3, [r7, #20]
   22bf8:	2220      	movs	r2, #32
   22bfa:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   22bfc:	2310      	movs	r3, #16
   22bfe:	18fb      	adds	r3, r7, r3
   22c00:	881b      	ldrh	r3, [r3, #0]
   22c02:	2204      	movs	r2, #4
   22c04:	4013      	ands	r3, r2
				if (callback_status
   22c06:	d050      	beq.n	22caa <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   22c08:	69bb      	ldr	r3, [r7, #24]
   22c0a:	695b      	ldr	r3, [r3, #20]
   22c0c:	69ba      	ldr	r2, [r7, #24]
   22c0e:	0010      	movs	r0, r2
   22c10:	4798      	blx	r3
   22c12:	e04a      	b.n	22caa <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   22c14:	697b      	ldr	r3, [r7, #20]
   22c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   22c18:	b29a      	uxth	r2, r3
   22c1a:	230e      	movs	r3, #14
   22c1c:	18fb      	adds	r3, r7, r3
   22c1e:	05d2      	lsls	r2, r2, #23
   22c20:	0dd2      	lsrs	r2, r2, #23
   22c22:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   22c24:	69bb      	ldr	r3, [r7, #24]
   22c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22c28:	220e      	movs	r2, #14
   22c2a:	18ba      	adds	r2, r7, r2
   22c2c:	8812      	ldrh	r2, [r2, #0]
   22c2e:	b2d2      	uxtb	r2, r2
   22c30:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   22c32:	69bb      	ldr	r3, [r7, #24]
   22c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22c36:	1c5a      	adds	r2, r3, #1
   22c38:	69bb      	ldr	r3, [r7, #24]
   22c3a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   22c3c:	69bb      	ldr	r3, [r7, #24]
   22c3e:	795b      	ldrb	r3, [r3, #5]
   22c40:	2b01      	cmp	r3, #1
   22c42:	d10d      	bne.n	22c60 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   22c44:	69bb      	ldr	r3, [r7, #24]
   22c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22c48:	220e      	movs	r2, #14
   22c4a:	18ba      	adds	r2, r7, r2
   22c4c:	8812      	ldrh	r2, [r2, #0]
   22c4e:	0a12      	lsrs	r2, r2, #8
   22c50:	b292      	uxth	r2, r2
   22c52:	b2d2      	uxtb	r2, r2
   22c54:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   22c56:	69bb      	ldr	r3, [r7, #24]
   22c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22c5a:	1c5a      	adds	r2, r3, #1
   22c5c:	69bb      	ldr	r3, [r7, #24]
   22c5e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   22c60:	69bb      	ldr	r3, [r7, #24]
   22c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22c64:	b29b      	uxth	r3, r3
   22c66:	3b01      	subs	r3, #1
   22c68:	b29b      	uxth	r3, r3
   22c6a:	69ba      	ldr	r2, [r7, #24]
   22c6c:	1c19      	adds	r1, r3, #0
   22c6e:	8591      	strh	r1, [r2, #44]	; 0x2c
   22c70:	2b00      	cmp	r3, #0
   22c72:	d11a      	bne.n	22caa <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22c74:	697b      	ldr	r3, [r7, #20]
   22c76:	2204      	movs	r2, #4
   22c78:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   22c7a:	69bb      	ldr	r3, [r7, #24]
   22c7c:	2232      	movs	r2, #50	; 0x32
   22c7e:	2100      	movs	r1, #0
   22c80:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   22c82:	2310      	movs	r3, #16
   22c84:	18fb      	adds	r3, r7, r3
   22c86:	881b      	ldrh	r3, [r3, #0]
   22c88:	2202      	movs	r2, #2
   22c8a:	4013      	ands	r3, r2
					if (callback_status
   22c8c:	d00d      	beq.n	22caa <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   22c8e:	69bb      	ldr	r3, [r7, #24]
   22c90:	691b      	ldr	r3, [r3, #16]
   22c92:	69ba      	ldr	r2, [r7, #24]
   22c94:	0010      	movs	r0, r2
   22c96:	4798      	blx	r3
   22c98:	e007      	b.n	22caa <_usart_interrupt_handler+0x2ae>
   22c9a:	46c0      	nop			; (mov r8, r8)
   22c9c:	20000b78 	.word	0x20000b78
   22ca0:	000229d9 	.word	0x000229d9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22ca4:	697b      	ldr	r3, [r7, #20]
   22ca6:	2204      	movs	r2, #4
   22ca8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   22caa:	2312      	movs	r3, #18
   22cac:	18fb      	adds	r3, r7, r3
   22cae:	881b      	ldrh	r3, [r3, #0]
   22cb0:	2210      	movs	r2, #16
   22cb2:	4013      	ands	r3, r2
   22cb4:	d010      	beq.n	22cd8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   22cb6:	697b      	ldr	r3, [r7, #20]
   22cb8:	2210      	movs	r2, #16
   22cba:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   22cbc:	697b      	ldr	r3, [r7, #20]
   22cbe:	2210      	movs	r2, #16
   22cc0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   22cc2:	2310      	movs	r3, #16
   22cc4:	18fb      	adds	r3, r7, r3
   22cc6:	881b      	ldrh	r3, [r3, #0]
   22cc8:	2210      	movs	r2, #16
   22cca:	4013      	ands	r3, r2
   22ccc:	d004      	beq.n	22cd8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   22cce:	69bb      	ldr	r3, [r7, #24]
   22cd0:	69db      	ldr	r3, [r3, #28]
   22cd2:	69ba      	ldr	r2, [r7, #24]
   22cd4:	0010      	movs	r0, r2
   22cd6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   22cd8:	2312      	movs	r3, #18
   22cda:	18fb      	adds	r3, r7, r3
   22cdc:	881b      	ldrh	r3, [r3, #0]
   22cde:	2220      	movs	r2, #32
   22ce0:	4013      	ands	r3, r2
   22ce2:	d010      	beq.n	22d06 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   22ce4:	697b      	ldr	r3, [r7, #20]
   22ce6:	2220      	movs	r2, #32
   22ce8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   22cea:	697b      	ldr	r3, [r7, #20]
   22cec:	2220      	movs	r2, #32
   22cee:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   22cf0:	2310      	movs	r3, #16
   22cf2:	18fb      	adds	r3, r7, r3
   22cf4:	881b      	ldrh	r3, [r3, #0]
   22cf6:	2208      	movs	r2, #8
   22cf8:	4013      	ands	r3, r2
   22cfa:	d004      	beq.n	22d06 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   22cfc:	69bb      	ldr	r3, [r7, #24]
   22cfe:	699b      	ldr	r3, [r3, #24]
   22d00:	69ba      	ldr	r2, [r7, #24]
   22d02:	0010      	movs	r0, r2
   22d04:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   22d06:	2312      	movs	r3, #18
   22d08:	18fb      	adds	r3, r7, r3
   22d0a:	881b      	ldrh	r3, [r3, #0]
   22d0c:	2208      	movs	r2, #8
   22d0e:	4013      	ands	r3, r2
   22d10:	d010      	beq.n	22d34 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   22d12:	697b      	ldr	r3, [r7, #20]
   22d14:	2208      	movs	r2, #8
   22d16:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   22d18:	697b      	ldr	r3, [r7, #20]
   22d1a:	2208      	movs	r2, #8
   22d1c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   22d1e:	2310      	movs	r3, #16
   22d20:	18fb      	adds	r3, r7, r3
   22d22:	881b      	ldrh	r3, [r3, #0]
   22d24:	2220      	movs	r2, #32
   22d26:	4013      	ands	r3, r2
   22d28:	d004      	beq.n	22d34 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   22d2a:	69bb      	ldr	r3, [r7, #24]
   22d2c:	6a1b      	ldr	r3, [r3, #32]
   22d2e:	69ba      	ldr	r2, [r7, #24]
   22d30:	0010      	movs	r0, r2
   22d32:	4798      	blx	r3
		}
	}
#endif
}
   22d34:	46c0      	nop			; (mov r8, r8)
   22d36:	46bd      	mov	sp, r7
   22d38:	b008      	add	sp, #32
   22d3a:	bd80      	pop	{r7, pc}

00022d3c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   22d3c:	b580      	push	{r7, lr}
   22d3e:	b082      	sub	sp, #8
   22d40:	af00      	add	r7, sp, #0
   22d42:	0002      	movs	r2, r0
   22d44:	1dfb      	adds	r3, r7, #7
   22d46:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   22d48:	46c0      	nop			; (mov r8, r8)
   22d4a:	46bd      	mov	sp, r7
   22d4c:	b002      	add	sp, #8
   22d4e:	bd80      	pop	{r7, pc}

00022d50 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   22d50:	b580      	push	{r7, lr}
   22d52:	b084      	sub	sp, #16
   22d54:	af00      	add	r7, sp, #0
   22d56:	0002      	movs	r2, r0
   22d58:	6039      	str	r1, [r7, #0]
   22d5a:	1dfb      	adds	r3, r7, #7
   22d5c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   22d5e:	4b13      	ldr	r3, [pc, #76]	; (22dac <_sercom_set_handler+0x5c>)
   22d60:	781b      	ldrb	r3, [r3, #0]
   22d62:	2201      	movs	r2, #1
   22d64:	4053      	eors	r3, r2
   22d66:	b2db      	uxtb	r3, r3
   22d68:	2b00      	cmp	r3, #0
   22d6a:	d015      	beq.n	22d98 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   22d6c:	2300      	movs	r3, #0
   22d6e:	60fb      	str	r3, [r7, #12]
   22d70:	e00c      	b.n	22d8c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   22d72:	4b0f      	ldr	r3, [pc, #60]	; (22db0 <_sercom_set_handler+0x60>)
   22d74:	68fa      	ldr	r2, [r7, #12]
   22d76:	0092      	lsls	r2, r2, #2
   22d78:	490e      	ldr	r1, [pc, #56]	; (22db4 <_sercom_set_handler+0x64>)
   22d7a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   22d7c:	4b0e      	ldr	r3, [pc, #56]	; (22db8 <_sercom_set_handler+0x68>)
   22d7e:	68fa      	ldr	r2, [r7, #12]
   22d80:	0092      	lsls	r2, r2, #2
   22d82:	2100      	movs	r1, #0
   22d84:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   22d86:	68fb      	ldr	r3, [r7, #12]
   22d88:	3301      	adds	r3, #1
   22d8a:	60fb      	str	r3, [r7, #12]
   22d8c:	68fb      	ldr	r3, [r7, #12]
   22d8e:	2b05      	cmp	r3, #5
   22d90:	d9ef      	bls.n	22d72 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   22d92:	4b06      	ldr	r3, [pc, #24]	; (22dac <_sercom_set_handler+0x5c>)
   22d94:	2201      	movs	r2, #1
   22d96:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   22d98:	1dfb      	adds	r3, r7, #7
   22d9a:	781a      	ldrb	r2, [r3, #0]
   22d9c:	4b04      	ldr	r3, [pc, #16]	; (22db0 <_sercom_set_handler+0x60>)
   22d9e:	0092      	lsls	r2, r2, #2
   22da0:	6839      	ldr	r1, [r7, #0]
   22da2:	50d1      	str	r1, [r2, r3]
}
   22da4:	46c0      	nop			; (mov r8, r8)
   22da6:	46bd      	mov	sp, r7
   22da8:	b004      	add	sp, #16
   22daa:	bd80      	pop	{r7, pc}
   22dac:	200005f8 	.word	0x200005f8
   22db0:	200005fc 	.word	0x200005fc
   22db4:	00022d3d 	.word	0x00022d3d
   22db8:	20000b78 	.word	0x20000b78

00022dbc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   22dbc:	b590      	push	{r4, r7, lr}
   22dbe:	b085      	sub	sp, #20
   22dc0:	af00      	add	r7, sp, #0
   22dc2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   22dc4:	2308      	movs	r3, #8
   22dc6:	18fb      	adds	r3, r7, r3
   22dc8:	4a0b      	ldr	r2, [pc, #44]	; (22df8 <_sercom_get_interrupt_vector+0x3c>)
   22dca:	6811      	ldr	r1, [r2, #0]
   22dcc:	6019      	str	r1, [r3, #0]
   22dce:	8892      	ldrh	r2, [r2, #4]
   22dd0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   22dd2:	230f      	movs	r3, #15
   22dd4:	18fc      	adds	r4, r7, r3
   22dd6:	687b      	ldr	r3, [r7, #4]
   22dd8:	0018      	movs	r0, r3
   22dda:	4b08      	ldr	r3, [pc, #32]	; (22dfc <_sercom_get_interrupt_vector+0x40>)
   22ddc:	4798      	blx	r3
   22dde:	0003      	movs	r3, r0
   22de0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   22de2:	230f      	movs	r3, #15
   22de4:	18fb      	adds	r3, r7, r3
   22de6:	781b      	ldrb	r3, [r3, #0]
   22de8:	2208      	movs	r2, #8
   22dea:	18ba      	adds	r2, r7, r2
   22dec:	5cd3      	ldrb	r3, [r2, r3]
   22dee:	b25b      	sxtb	r3, r3
}
   22df0:	0018      	movs	r0, r3
   22df2:	46bd      	mov	sp, r7
   22df4:	b005      	add	sp, #20
   22df6:	bd90      	pop	{r4, r7, pc}
   22df8:	0002b61c 	.word	0x0002b61c
   22dfc:	0001f681 	.word	0x0001f681

00022e00 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   22e00:	b580      	push	{r7, lr}
   22e02:	af00      	add	r7, sp, #0
   22e04:	4b03      	ldr	r3, [pc, #12]	; (22e14 <SERCOM0_Handler+0x14>)
   22e06:	681b      	ldr	r3, [r3, #0]
   22e08:	2000      	movs	r0, #0
   22e0a:	4798      	blx	r3
   22e0c:	46c0      	nop			; (mov r8, r8)
   22e0e:	46bd      	mov	sp, r7
   22e10:	bd80      	pop	{r7, pc}
   22e12:	46c0      	nop			; (mov r8, r8)
   22e14:	200005fc 	.word	0x200005fc

00022e18 <SERCOM1_Handler>:
   22e18:	b580      	push	{r7, lr}
   22e1a:	af00      	add	r7, sp, #0
   22e1c:	4b03      	ldr	r3, [pc, #12]	; (22e2c <SERCOM1_Handler+0x14>)
   22e1e:	685b      	ldr	r3, [r3, #4]
   22e20:	2001      	movs	r0, #1
   22e22:	4798      	blx	r3
   22e24:	46c0      	nop			; (mov r8, r8)
   22e26:	46bd      	mov	sp, r7
   22e28:	bd80      	pop	{r7, pc}
   22e2a:	46c0      	nop			; (mov r8, r8)
   22e2c:	200005fc 	.word	0x200005fc

00022e30 <SERCOM2_Handler>:
   22e30:	b580      	push	{r7, lr}
   22e32:	af00      	add	r7, sp, #0
   22e34:	4b03      	ldr	r3, [pc, #12]	; (22e44 <SERCOM2_Handler+0x14>)
   22e36:	689b      	ldr	r3, [r3, #8]
   22e38:	2002      	movs	r0, #2
   22e3a:	4798      	blx	r3
   22e3c:	46c0      	nop			; (mov r8, r8)
   22e3e:	46bd      	mov	sp, r7
   22e40:	bd80      	pop	{r7, pc}
   22e42:	46c0      	nop			; (mov r8, r8)
   22e44:	200005fc 	.word	0x200005fc

00022e48 <SERCOM3_Handler>:
   22e48:	b580      	push	{r7, lr}
   22e4a:	af00      	add	r7, sp, #0
   22e4c:	4b03      	ldr	r3, [pc, #12]	; (22e5c <SERCOM3_Handler+0x14>)
   22e4e:	68db      	ldr	r3, [r3, #12]
   22e50:	2003      	movs	r0, #3
   22e52:	4798      	blx	r3
   22e54:	46c0      	nop			; (mov r8, r8)
   22e56:	46bd      	mov	sp, r7
   22e58:	bd80      	pop	{r7, pc}
   22e5a:	46c0      	nop			; (mov r8, r8)
   22e5c:	200005fc 	.word	0x200005fc

00022e60 <SERCOM4_Handler>:
   22e60:	b580      	push	{r7, lr}
   22e62:	af00      	add	r7, sp, #0
   22e64:	4b03      	ldr	r3, [pc, #12]	; (22e74 <SERCOM4_Handler+0x14>)
   22e66:	691b      	ldr	r3, [r3, #16]
   22e68:	2004      	movs	r0, #4
   22e6a:	4798      	blx	r3
   22e6c:	46c0      	nop			; (mov r8, r8)
   22e6e:	46bd      	mov	sp, r7
   22e70:	bd80      	pop	{r7, pc}
   22e72:	46c0      	nop			; (mov r8, r8)
   22e74:	200005fc 	.word	0x200005fc

00022e78 <SERCOM5_Handler>:
   22e78:	b580      	push	{r7, lr}
   22e7a:	af00      	add	r7, sp, #0
   22e7c:	4b03      	ldr	r3, [pc, #12]	; (22e8c <SERCOM5_Handler+0x14>)
   22e7e:	695b      	ldr	r3, [r3, #20]
   22e80:	2005      	movs	r0, #5
   22e82:	4798      	blx	r3
   22e84:	46c0      	nop			; (mov r8, r8)
   22e86:	46bd      	mov	sp, r7
   22e88:	bd80      	pop	{r7, pc}
   22e8a:	46c0      	nop			; (mov r8, r8)
   22e8c:	200005fc 	.word	0x200005fc

00022e90 <_extint_get_eic_from_channel>:
{
   22e90:	b580      	push	{r7, lr}
   22e92:	b084      	sub	sp, #16
   22e94:	af00      	add	r7, sp, #0
   22e96:	0002      	movs	r2, r0
   22e98:	1dfb      	adds	r3, r7, #7
   22e9a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   22e9c:	230f      	movs	r3, #15
   22e9e:	18fb      	adds	r3, r7, r3
   22ea0:	1dfa      	adds	r2, r7, #7
   22ea2:	7812      	ldrb	r2, [r2, #0]
   22ea4:	0952      	lsrs	r2, r2, #5
   22ea6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   22ea8:	230f      	movs	r3, #15
   22eaa:	18fb      	adds	r3, r7, r3
   22eac:	781b      	ldrb	r3, [r3, #0]
   22eae:	2b00      	cmp	r3, #0
   22eb0:	d10c      	bne.n	22ecc <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   22eb2:	4b09      	ldr	r3, [pc, #36]	; (22ed8 <_extint_get_eic_from_channel+0x48>)
   22eb4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   22eb6:	230f      	movs	r3, #15
   22eb8:	18fb      	adds	r3, r7, r3
   22eba:	781b      	ldrb	r3, [r3, #0]
   22ebc:	009b      	lsls	r3, r3, #2
   22ebe:	2210      	movs	r2, #16
   22ec0:	4694      	mov	ip, r2
   22ec2:	44bc      	add	ip, r7
   22ec4:	4463      	add	r3, ip
   22ec6:	3b08      	subs	r3, #8
   22ec8:	681b      	ldr	r3, [r3, #0]
   22eca:	e000      	b.n	22ece <_extint_get_eic_from_channel+0x3e>
		return NULL;
   22ecc:	2300      	movs	r3, #0
}
   22ece:	0018      	movs	r0, r3
   22ed0:	46bd      	mov	sp, r7
   22ed2:	b004      	add	sp, #16
   22ed4:	bd80      	pop	{r7, pc}
   22ed6:	46c0      	nop			; (mov r8, r8)
   22ed8:	40001800 	.word	0x40001800

00022edc <extint_chan_is_detected>:
{
   22edc:	b580      	push	{r7, lr}
   22ede:	b084      	sub	sp, #16
   22ee0:	af00      	add	r7, sp, #0
   22ee2:	0002      	movs	r2, r0
   22ee4:	1dfb      	adds	r3, r7, #7
   22ee6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22ee8:	1dfb      	adds	r3, r7, #7
   22eea:	781b      	ldrb	r3, [r3, #0]
   22eec:	0018      	movs	r0, r3
   22eee:	4b0b      	ldr	r3, [pc, #44]	; (22f1c <extint_chan_is_detected+0x40>)
   22ef0:	4798      	blx	r3
   22ef2:	0003      	movs	r3, r0
   22ef4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22ef6:	1dfb      	adds	r3, r7, #7
   22ef8:	781b      	ldrb	r3, [r3, #0]
   22efa:	221f      	movs	r2, #31
   22efc:	4013      	ands	r3, r2
   22efe:	2201      	movs	r2, #1
   22f00:	409a      	lsls	r2, r3
   22f02:	0013      	movs	r3, r2
   22f04:	60bb      	str	r3, [r7, #8]
	return (eic_module->INTFLAG.reg & eic_mask);
   22f06:	68fb      	ldr	r3, [r7, #12]
   22f08:	691b      	ldr	r3, [r3, #16]
   22f0a:	68ba      	ldr	r2, [r7, #8]
   22f0c:	4013      	ands	r3, r2
   22f0e:	1e5a      	subs	r2, r3, #1
   22f10:	4193      	sbcs	r3, r2
   22f12:	b2db      	uxtb	r3, r3
}
   22f14:	0018      	movs	r0, r3
   22f16:	46bd      	mov	sp, r7
   22f18:	b004      	add	sp, #16
   22f1a:	bd80      	pop	{r7, pc}
   22f1c:	00022e91 	.word	0x00022e91

00022f20 <extint_chan_clear_detected>:
{
   22f20:	b580      	push	{r7, lr}
   22f22:	b084      	sub	sp, #16
   22f24:	af00      	add	r7, sp, #0
   22f26:	0002      	movs	r2, r0
   22f28:	1dfb      	adds	r3, r7, #7
   22f2a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22f2c:	1dfb      	adds	r3, r7, #7
   22f2e:	781b      	ldrb	r3, [r3, #0]
   22f30:	0018      	movs	r0, r3
   22f32:	4b09      	ldr	r3, [pc, #36]	; (22f58 <extint_chan_clear_detected+0x38>)
   22f34:	4798      	blx	r3
   22f36:	0003      	movs	r3, r0
   22f38:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22f3a:	1dfb      	adds	r3, r7, #7
   22f3c:	781b      	ldrb	r3, [r3, #0]
   22f3e:	221f      	movs	r2, #31
   22f40:	4013      	ands	r3, r2
   22f42:	2201      	movs	r2, #1
   22f44:	409a      	lsls	r2, r3
   22f46:	0013      	movs	r3, r2
   22f48:	60bb      	str	r3, [r7, #8]
	eic_module->INTFLAG.reg = eic_mask;
   22f4a:	68fb      	ldr	r3, [r7, #12]
   22f4c:	68ba      	ldr	r2, [r7, #8]
   22f4e:	611a      	str	r2, [r3, #16]
}
   22f50:	46c0      	nop			; (mov r8, r8)
   22f52:	46bd      	mov	sp, r7
   22f54:	b004      	add	sp, #16
   22f56:	bd80      	pop	{r7, pc}
   22f58:	00022e91 	.word	0x00022e91

00022f5c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22f5c:	b580      	push	{r7, lr}
   22f5e:	b082      	sub	sp, #8
   22f60:	af00      	add	r7, sp, #0
   22f62:	6078      	str	r0, [r7, #4]
   22f64:	0008      	movs	r0, r1
   22f66:	0011      	movs	r1, r2
   22f68:	1cfb      	adds	r3, r7, #3
   22f6a:	1c02      	adds	r2, r0, #0
   22f6c:	701a      	strb	r2, [r3, #0]
   22f6e:	1cbb      	adds	r3, r7, #2
   22f70:	1c0a      	adds	r2, r1, #0
   22f72:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   22f74:	1cbb      	adds	r3, r7, #2
   22f76:	781b      	ldrb	r3, [r3, #0]
   22f78:	2b00      	cmp	r3, #0
   22f7a:	d001      	beq.n	22f80 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   22f7c:	2317      	movs	r3, #23
   22f7e:	e019      	b.n	22fb4 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   22f80:	1cfb      	adds	r3, r7, #3
   22f82:	781a      	ldrb	r2, [r3, #0]
   22f84:	4b0d      	ldr	r3, [pc, #52]	; (22fbc <extint_register_callback+0x60>)
   22f86:	0092      	lsls	r2, r2, #2
   22f88:	58d3      	ldr	r3, [r2, r3]
   22f8a:	2b00      	cmp	r3, #0
   22f8c:	d107      	bne.n	22f9e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   22f8e:	1cfb      	adds	r3, r7, #3
   22f90:	781a      	ldrb	r2, [r3, #0]
   22f92:	4b0a      	ldr	r3, [pc, #40]	; (22fbc <extint_register_callback+0x60>)
   22f94:	0092      	lsls	r2, r2, #2
   22f96:	6879      	ldr	r1, [r7, #4]
   22f98:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   22f9a:	2300      	movs	r3, #0
   22f9c:	e00a      	b.n	22fb4 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   22f9e:	1cfb      	adds	r3, r7, #3
   22fa0:	781a      	ldrb	r2, [r3, #0]
   22fa2:	4b06      	ldr	r3, [pc, #24]	; (22fbc <extint_register_callback+0x60>)
   22fa4:	0092      	lsls	r2, r2, #2
   22fa6:	58d2      	ldr	r2, [r2, r3]
   22fa8:	687b      	ldr	r3, [r7, #4]
   22faa:	429a      	cmp	r2, r3
   22fac:	d101      	bne.n	22fb2 <extint_register_callback+0x56>
		return STATUS_OK;
   22fae:	2300      	movs	r3, #0
   22fb0:	e000      	b.n	22fb4 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   22fb2:	231d      	movs	r3, #29
}
   22fb4:	0018      	movs	r0, r3
   22fb6:	46bd      	mov	sp, r7
   22fb8:	b002      	add	sp, #8
   22fba:	bd80      	pop	{r7, pc}
   22fbc:	20000b10 	.word	0x20000b10

00022fc0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22fc0:	b580      	push	{r7, lr}
   22fc2:	b084      	sub	sp, #16
   22fc4:	af00      	add	r7, sp, #0
   22fc6:	0002      	movs	r2, r0
   22fc8:	1dfb      	adds	r3, r7, #7
   22fca:	701a      	strb	r2, [r3, #0]
   22fcc:	1dbb      	adds	r3, r7, #6
   22fce:	1c0a      	adds	r2, r1, #0
   22fd0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   22fd2:	1dbb      	adds	r3, r7, #6
   22fd4:	781b      	ldrb	r3, [r3, #0]
   22fd6:	2b00      	cmp	r3, #0
   22fd8:	d10e      	bne.n	22ff8 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   22fda:	1dfb      	adds	r3, r7, #7
   22fdc:	781b      	ldrb	r3, [r3, #0]
   22fde:	0018      	movs	r0, r3
   22fe0:	4b08      	ldr	r3, [pc, #32]	; (23004 <extint_chan_enable_callback+0x44>)
   22fe2:	4798      	blx	r3
   22fe4:	0003      	movs	r3, r0
   22fe6:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   22fe8:	1dfb      	adds	r3, r7, #7
   22fea:	781b      	ldrb	r3, [r3, #0]
   22fec:	2201      	movs	r2, #1
   22fee:	409a      	lsls	r2, r3
   22ff0:	68fb      	ldr	r3, [r7, #12]
   22ff2:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22ff4:	2300      	movs	r3, #0
   22ff6:	e000      	b.n	22ffa <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22ff8:	2317      	movs	r3, #23
}
   22ffa:	0018      	movs	r0, r3
   22ffc:	46bd      	mov	sp, r7
   22ffe:	b004      	add	sp, #16
   23000:	bd80      	pop	{r7, pc}
   23002:	46c0      	nop			; (mov r8, r8)
   23004:	00022e91 	.word	0x00022e91

00023008 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   23008:	b580      	push	{r7, lr}
   2300a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2300c:	4b15      	ldr	r3, [pc, #84]	; (23064 <EIC_Handler+0x5c>)
   2300e:	2200      	movs	r2, #0
   23010:	701a      	strb	r2, [r3, #0]
   23012:	e020      	b.n	23056 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   23014:	4b13      	ldr	r3, [pc, #76]	; (23064 <EIC_Handler+0x5c>)
   23016:	781b      	ldrb	r3, [r3, #0]
   23018:	0018      	movs	r0, r3
   2301a:	4b13      	ldr	r3, [pc, #76]	; (23068 <EIC_Handler+0x60>)
   2301c:	4798      	blx	r3
   2301e:	1e03      	subs	r3, r0, #0
   23020:	d013      	beq.n	2304a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   23022:	4b10      	ldr	r3, [pc, #64]	; (23064 <EIC_Handler+0x5c>)
   23024:	781b      	ldrb	r3, [r3, #0]
   23026:	0018      	movs	r0, r3
   23028:	4b10      	ldr	r3, [pc, #64]	; (2306c <EIC_Handler+0x64>)
   2302a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2302c:	4b0d      	ldr	r3, [pc, #52]	; (23064 <EIC_Handler+0x5c>)
   2302e:	781b      	ldrb	r3, [r3, #0]
   23030:	001a      	movs	r2, r3
   23032:	4b0f      	ldr	r3, [pc, #60]	; (23070 <EIC_Handler+0x68>)
   23034:	0092      	lsls	r2, r2, #2
   23036:	58d3      	ldr	r3, [r2, r3]
   23038:	2b00      	cmp	r3, #0
   2303a:	d006      	beq.n	2304a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2303c:	4b09      	ldr	r3, [pc, #36]	; (23064 <EIC_Handler+0x5c>)
   2303e:	781b      	ldrb	r3, [r3, #0]
   23040:	001a      	movs	r2, r3
   23042:	4b0b      	ldr	r3, [pc, #44]	; (23070 <EIC_Handler+0x68>)
   23044:	0092      	lsls	r2, r2, #2
   23046:	58d3      	ldr	r3, [r2, r3]
   23048:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2304a:	4b06      	ldr	r3, [pc, #24]	; (23064 <EIC_Handler+0x5c>)
   2304c:	781b      	ldrb	r3, [r3, #0]
   2304e:	3301      	adds	r3, #1
   23050:	b2da      	uxtb	r2, r3
   23052:	4b04      	ldr	r3, [pc, #16]	; (23064 <EIC_Handler+0x5c>)
   23054:	701a      	strb	r2, [r3, #0]
   23056:	4b03      	ldr	r3, [pc, #12]	; (23064 <EIC_Handler+0x5c>)
   23058:	781b      	ldrb	r3, [r3, #0]
   2305a:	2b0f      	cmp	r3, #15
   2305c:	d9da      	bls.n	23014 <EIC_Handler+0xc>
			}
		}
	}
}
   2305e:	46c0      	nop			; (mov r8, r8)
   23060:	46bd      	mov	sp, r7
   23062:	bd80      	pop	{r7, pc}
   23064:	20000b90 	.word	0x20000b90
   23068:	00022edd 	.word	0x00022edd
   2306c:	00022f21 	.word	0x00022f21
   23070:	20000b10 	.word	0x20000b10

00023074 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   23074:	b580      	push	{r7, lr}
   23076:	b082      	sub	sp, #8
   23078:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   2307a:	4b15      	ldr	r3, [pc, #84]	; (230d0 <EVSYS_Handler+0x5c>)
   2307c:	691b      	ldr	r3, [r3, #16]
   2307e:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   23080:	4b14      	ldr	r3, [pc, #80]	; (230d4 <EVSYS_Handler+0x60>)
   23082:	699b      	ldr	r3, [r3, #24]
   23084:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   23086:	4b12      	ldr	r3, [pc, #72]	; (230d0 <EVSYS_Handler+0x5c>)
   23088:	689a      	ldr	r2, [r3, #8]
   2308a:	683b      	ldr	r3, [r7, #0]
   2308c:	431a      	orrs	r2, r3
   2308e:	4b10      	ldr	r3, [pc, #64]	; (230d0 <EVSYS_Handler+0x5c>)
   23090:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   23092:	4b10      	ldr	r3, [pc, #64]	; (230d4 <EVSYS_Handler+0x60>)
   23094:	4a10      	ldr	r2, [pc, #64]	; (230d8 <EVSYS_Handler+0x64>)
   23096:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   23098:	e008      	b.n	230ac <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   2309a:	687b      	ldr	r3, [r7, #4]
   2309c:	685a      	ldr	r2, [r3, #4]
   2309e:	687b      	ldr	r3, [r7, #4]
   230a0:	681b      	ldr	r3, [r3, #0]
   230a2:	0018      	movs	r0, r3
   230a4:	4790      	blx	r2
		current_hook = current_hook->next;
   230a6:	687b      	ldr	r3, [r7, #4]
   230a8:	689b      	ldr	r3, [r3, #8]
   230aa:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   230ac:	687b      	ldr	r3, [r7, #4]
   230ae:	2b00      	cmp	r3, #0
   230b0:	d1f3      	bne.n	2309a <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   230b2:	4b07      	ldr	r3, [pc, #28]	; (230d0 <EVSYS_Handler+0x5c>)
   230b4:	68db      	ldr	r3, [r3, #12]
   230b6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   230b8:	4b05      	ldr	r3, [pc, #20]	; (230d0 <EVSYS_Handler+0x5c>)
   230ba:	689b      	ldr	r3, [r3, #8]
   230bc:	683a      	ldr	r2, [r7, #0]
   230be:	43d2      	mvns	r2, r2
   230c0:	401a      	ands	r2, r3
   230c2:	4b03      	ldr	r3, [pc, #12]	; (230d0 <EVSYS_Handler+0x5c>)
   230c4:	609a      	str	r2, [r3, #8]
}
   230c6:	46c0      	nop			; (mov r8, r8)
   230c8:	46bd      	mov	sp, r7
   230ca:	b002      	add	sp, #8
   230cc:	bd80      	pop	{r7, pc}
   230ce:	46c0      	nop			; (mov r8, r8)
   230d0:	20000014 	.word	0x20000014
   230d4:	42000400 	.word	0x42000400
   230d8:	0f0fffff 	.word	0x0f0fffff

000230dc <system_apb_clock_set_mask>:
{
   230dc:	b580      	push	{r7, lr}
   230de:	b082      	sub	sp, #8
   230e0:	af00      	add	r7, sp, #0
   230e2:	0002      	movs	r2, r0
   230e4:	6039      	str	r1, [r7, #0]
   230e6:	1dfb      	adds	r3, r7, #7
   230e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   230ea:	1dfb      	adds	r3, r7, #7
   230ec:	781b      	ldrb	r3, [r3, #0]
   230ee:	2b01      	cmp	r3, #1
   230f0:	d00a      	beq.n	23108 <system_apb_clock_set_mask+0x2c>
   230f2:	2b02      	cmp	r3, #2
   230f4:	d00f      	beq.n	23116 <system_apb_clock_set_mask+0x3a>
   230f6:	2b00      	cmp	r3, #0
   230f8:	d114      	bne.n	23124 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   230fa:	4b0e      	ldr	r3, [pc, #56]	; (23134 <system_apb_clock_set_mask+0x58>)
   230fc:	4a0d      	ldr	r2, [pc, #52]	; (23134 <system_apb_clock_set_mask+0x58>)
   230fe:	6991      	ldr	r1, [r2, #24]
   23100:	683a      	ldr	r2, [r7, #0]
   23102:	430a      	orrs	r2, r1
   23104:	619a      	str	r2, [r3, #24]
			break;
   23106:	e00f      	b.n	23128 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   23108:	4b0a      	ldr	r3, [pc, #40]	; (23134 <system_apb_clock_set_mask+0x58>)
   2310a:	4a0a      	ldr	r2, [pc, #40]	; (23134 <system_apb_clock_set_mask+0x58>)
   2310c:	69d1      	ldr	r1, [r2, #28]
   2310e:	683a      	ldr	r2, [r7, #0]
   23110:	430a      	orrs	r2, r1
   23112:	61da      	str	r2, [r3, #28]
			break;
   23114:	e008      	b.n	23128 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   23116:	4b07      	ldr	r3, [pc, #28]	; (23134 <system_apb_clock_set_mask+0x58>)
   23118:	4a06      	ldr	r2, [pc, #24]	; (23134 <system_apb_clock_set_mask+0x58>)
   2311a:	6a11      	ldr	r1, [r2, #32]
   2311c:	683a      	ldr	r2, [r7, #0]
   2311e:	430a      	orrs	r2, r1
   23120:	621a      	str	r2, [r3, #32]
			break;
   23122:	e001      	b.n	23128 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   23124:	2317      	movs	r3, #23
   23126:	e000      	b.n	2312a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   23128:	2300      	movs	r3, #0
}
   2312a:	0018      	movs	r0, r3
   2312c:	46bd      	mov	sp, r7
   2312e:	b002      	add	sp, #8
   23130:	bd80      	pop	{r7, pc}
   23132:	46c0      	nop			; (mov r8, r8)
   23134:	40000400 	.word	0x40000400

00023138 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   23138:	b580      	push	{r7, lr}
   2313a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   2313c:	2102      	movs	r1, #2
   2313e:	2002      	movs	r0, #2
   23140:	4b07      	ldr	r3, [pc, #28]	; (23160 <_system_events_init+0x28>)
   23142:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   23144:	4b07      	ldr	r3, [pc, #28]	; (23164 <_system_events_init+0x2c>)
   23146:	2201      	movs	r2, #1
   23148:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   2314a:	46c0      	nop			; (mov r8, r8)
   2314c:	4b05      	ldr	r3, [pc, #20]	; (23164 <_system_events_init+0x2c>)
   2314e:	781b      	ldrb	r3, [r3, #0]
   23150:	b2db      	uxtb	r3, r3
   23152:	001a      	movs	r2, r3
   23154:	2301      	movs	r3, #1
   23156:	4013      	ands	r3, r2
   23158:	d1f8      	bne.n	2314c <_system_events_init+0x14>
	}
}
   2315a:	46c0      	nop			; (mov r8, r8)
   2315c:	46bd      	mov	sp, r7
   2315e:	bd80      	pop	{r7, pc}
   23160:	000230dd 	.word	0x000230dd
   23164:	42000400 	.word	0x42000400

00023168 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   23168:	b580      	push	{r7, lr}
   2316a:	b084      	sub	sp, #16
   2316c:	af00      	add	r7, sp, #0
   2316e:	60f8      	str	r0, [r7, #12]
   23170:	60b9      	str	r1, [r7, #8]
   23172:	1dfb      	adds	r3, r7, #7
   23174:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   23176:	1dfb      	adds	r3, r7, #7
   23178:	781b      	ldrb	r3, [r3, #0]
   2317a:	68fa      	ldr	r2, [r7, #12]
   2317c:	009b      	lsls	r3, r3, #2
   2317e:	18d3      	adds	r3, r2, r3
   23180:	3304      	adds	r3, #4
   23182:	68ba      	ldr	r2, [r7, #8]
   23184:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   23186:	68fb      	ldr	r3, [r7, #12]
   23188:	7e1b      	ldrb	r3, [r3, #24]
   2318a:	b25a      	sxtb	r2, r3
   2318c:	1dfb      	adds	r3, r7, #7
   2318e:	781b      	ldrb	r3, [r3, #0]
   23190:	2101      	movs	r1, #1
   23192:	4099      	lsls	r1, r3
   23194:	000b      	movs	r3, r1
   23196:	b25b      	sxtb	r3, r3
   23198:	4313      	orrs	r3, r2
   2319a:	b25b      	sxtb	r3, r3
   2319c:	b2da      	uxtb	r2, r3
   2319e:	68fb      	ldr	r3, [r7, #12]
   231a0:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   231a2:	2300      	movs	r3, #0
}
   231a4:	0018      	movs	r0, r3
   231a6:	46bd      	mov	sp, r7
   231a8:	b004      	add	sp, #16
   231aa:	bd80      	pop	{r7, pc}

000231ac <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   231ac:	b580      	push	{r7, lr}
   231ae:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   231b0:	2000      	movs	r0, #0
   231b2:	4b02      	ldr	r3, [pc, #8]	; (231bc <AC_Handler+0x10>)
   231b4:	4798      	blx	r3
}
   231b6:	46c0      	nop			; (mov r8, r8)
   231b8:	46bd      	mov	sp, r7
   231ba:	bd80      	pop	{r7, pc}
   231bc:	000231c1 	.word	0x000231c1

000231c0 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   231c0:	b580      	push	{r7, lr}
   231c2:	b084      	sub	sp, #16
   231c4:	af00      	add	r7, sp, #0
   231c6:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   231c8:	4b23      	ldr	r3, [pc, #140]	; (23258 <_ac_interrupt_handler+0x98>)
   231ca:	687a      	ldr	r2, [r7, #4]
   231cc:	0092      	lsls	r2, r2, #2
   231ce:	58d3      	ldr	r3, [r2, r3]
   231d0:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   231d2:	4b21      	ldr	r3, [pc, #132]	; (23258 <_ac_interrupt_handler+0x98>)
   231d4:	687a      	ldr	r2, [r7, #4]
   231d6:	0092      	lsls	r2, r2, #2
   231d8:	58d3      	ldr	r3, [r2, r3]
   231da:	681b      	ldr	r3, [r3, #0]
   231dc:	799b      	ldrb	r3, [r3, #6]
   231de:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   231e0:	68fb      	ldr	r3, [r7, #12]
   231e2:	7e1b      	ldrb	r3, [r3, #24]
   231e4:	68f9      	ldr	r1, [r7, #12]
   231e6:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   231e8:	400b      	ands	r3, r1
   231ea:	b2d9      	uxtb	r1, r3
   231ec:	230b      	movs	r3, #11
   231ee:	18fb      	adds	r3, r7, r3
   231f0:	400a      	ands	r2, r1
   231f2:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   231f4:	230b      	movs	r3, #11
   231f6:	18fb      	adds	r3, r7, r3
   231f8:	781b      	ldrb	r3, [r3, #0]
   231fa:	2201      	movs	r2, #1
   231fc:	4013      	ands	r3, r2
   231fe:	d008      	beq.n	23212 <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   23200:	68fb      	ldr	r3, [r7, #12]
   23202:	685b      	ldr	r3, [r3, #4]
   23204:	68fa      	ldr	r2, [r7, #12]
   23206:	0010      	movs	r0, r2
   23208:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   2320a:	68fb      	ldr	r3, [r7, #12]
   2320c:	681b      	ldr	r3, [r3, #0]
   2320e:	2201      	movs	r2, #1
   23210:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   23212:	230b      	movs	r3, #11
   23214:	18fb      	adds	r3, r7, r3
   23216:	781b      	ldrb	r3, [r3, #0]
   23218:	2202      	movs	r2, #2
   2321a:	4013      	ands	r3, r2
   2321c:	d008      	beq.n	23230 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   2321e:	68fb      	ldr	r3, [r7, #12]
   23220:	689b      	ldr	r3, [r3, #8]
   23222:	68fa      	ldr	r2, [r7, #12]
   23224:	0010      	movs	r0, r2
   23226:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   23228:	68fb      	ldr	r3, [r7, #12]
   2322a:	681b      	ldr	r3, [r3, #0]
   2322c:	2202      	movs	r2, #2
   2322e:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   23230:	230b      	movs	r3, #11
   23232:	18fb      	adds	r3, r7, r3
   23234:	781b      	ldrb	r3, [r3, #0]
   23236:	2210      	movs	r2, #16
   23238:	4013      	ands	r3, r2
   2323a:	d008      	beq.n	2324e <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   2323c:	68fb      	ldr	r3, [r7, #12]
   2323e:	695b      	ldr	r3, [r3, #20]
   23240:	68fa      	ldr	r2, [r7, #12]
   23242:	0010      	movs	r0, r2
   23244:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   23246:	68fb      	ldr	r3, [r7, #12]
   23248:	681b      	ldr	r3, [r3, #0]
   2324a:	2210      	movs	r2, #16
   2324c:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   2324e:	46c0      	nop			; (mov r8, r8)
   23250:	46bd      	mov	sp, r7
   23252:	b004      	add	sp, #16
   23254:	bd80      	pop	{r7, pc}
   23256:	46c0      	nop			; (mov r8, r8)
   23258:	20000b94 	.word	0x20000b94

0002325c <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   2325c:	b580      	push	{r7, lr}
   2325e:	af00      	add	r7, sp, #0
}
   23260:	46c0      	nop			; (mov r8, r8)
   23262:	46bd      	mov	sp, r7
   23264:	bd80      	pop	{r7, pc}
	...

00023268 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   23268:	b580      	push	{r7, lr}
   2326a:	b082      	sub	sp, #8
   2326c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2326e:	4b07      	ldr	r3, [pc, #28]	; (2328c <nvm_is_ready+0x24>)
   23270:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   23272:	687b      	ldr	r3, [r7, #4]
   23274:	7d1b      	ldrb	r3, [r3, #20]
   23276:	b2db      	uxtb	r3, r3
   23278:	001a      	movs	r2, r3
   2327a:	2301      	movs	r3, #1
   2327c:	4013      	ands	r3, r2
   2327e:	1e5a      	subs	r2, r3, #1
   23280:	4193      	sbcs	r3, r2
   23282:	b2db      	uxtb	r3, r3
}
   23284:	0018      	movs	r0, r3
   23286:	46bd      	mov	sp, r7
   23288:	b002      	add	sp, #8
   2328a:	bd80      	pop	{r7, pc}
   2328c:	41004000 	.word	0x41004000

00023290 <system_apb_clock_set_mask>:
{
   23290:	b580      	push	{r7, lr}
   23292:	b082      	sub	sp, #8
   23294:	af00      	add	r7, sp, #0
   23296:	0002      	movs	r2, r0
   23298:	6039      	str	r1, [r7, #0]
   2329a:	1dfb      	adds	r3, r7, #7
   2329c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2329e:	1dfb      	adds	r3, r7, #7
   232a0:	781b      	ldrb	r3, [r3, #0]
   232a2:	2b01      	cmp	r3, #1
   232a4:	d00a      	beq.n	232bc <system_apb_clock_set_mask+0x2c>
   232a6:	2b02      	cmp	r3, #2
   232a8:	d00f      	beq.n	232ca <system_apb_clock_set_mask+0x3a>
   232aa:	2b00      	cmp	r3, #0
   232ac:	d114      	bne.n	232d8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   232ae:	4b0e      	ldr	r3, [pc, #56]	; (232e8 <system_apb_clock_set_mask+0x58>)
   232b0:	4a0d      	ldr	r2, [pc, #52]	; (232e8 <system_apb_clock_set_mask+0x58>)
   232b2:	6991      	ldr	r1, [r2, #24]
   232b4:	683a      	ldr	r2, [r7, #0]
   232b6:	430a      	orrs	r2, r1
   232b8:	619a      	str	r2, [r3, #24]
			break;
   232ba:	e00f      	b.n	232dc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   232bc:	4b0a      	ldr	r3, [pc, #40]	; (232e8 <system_apb_clock_set_mask+0x58>)
   232be:	4a0a      	ldr	r2, [pc, #40]	; (232e8 <system_apb_clock_set_mask+0x58>)
   232c0:	69d1      	ldr	r1, [r2, #28]
   232c2:	683a      	ldr	r2, [r7, #0]
   232c4:	430a      	orrs	r2, r1
   232c6:	61da      	str	r2, [r3, #28]
			break;
   232c8:	e008      	b.n	232dc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   232ca:	4b07      	ldr	r3, [pc, #28]	; (232e8 <system_apb_clock_set_mask+0x58>)
   232cc:	4a06      	ldr	r2, [pc, #24]	; (232e8 <system_apb_clock_set_mask+0x58>)
   232ce:	6a11      	ldr	r1, [r2, #32]
   232d0:	683a      	ldr	r2, [r7, #0]
   232d2:	430a      	orrs	r2, r1
   232d4:	621a      	str	r2, [r3, #32]
			break;
   232d6:	e001      	b.n	232dc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   232d8:	2317      	movs	r3, #23
   232da:	e000      	b.n	232de <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   232dc:	2300      	movs	r3, #0
}
   232de:	0018      	movs	r0, r3
   232e0:	46bd      	mov	sp, r7
   232e2:	b002      	add	sp, #8
   232e4:	bd80      	pop	{r7, pc}
   232e6:	46c0      	nop			; (mov r8, r8)
   232e8:	40000400 	.word	0x40000400

000232ec <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   232ec:	b580      	push	{r7, lr}
   232ee:	b084      	sub	sp, #16
   232f0:	af00      	add	r7, sp, #0
   232f2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   232f4:	4b2f      	ldr	r3, [pc, #188]	; (233b4 <nvm_set_config+0xc8>)
   232f6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   232f8:	2104      	movs	r1, #4
   232fa:	2001      	movs	r0, #1
   232fc:	4b2e      	ldr	r3, [pc, #184]	; (233b8 <nvm_set_config+0xcc>)
   232fe:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23300:	68fb      	ldr	r3, [r7, #12]
   23302:	2220      	movs	r2, #32
   23304:	32ff      	adds	r2, #255	; 0xff
   23306:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   23308:	4b2c      	ldr	r3, [pc, #176]	; (233bc <nvm_set_config+0xd0>)
   2330a:	4798      	blx	r3
   2330c:	0003      	movs	r3, r0
   2330e:	001a      	movs	r2, r3
   23310:	2301      	movs	r3, #1
   23312:	4053      	eors	r3, r2
   23314:	b2db      	uxtb	r3, r3
   23316:	2b00      	cmp	r3, #0
   23318:	d001      	beq.n	2331e <nvm_set_config+0x32>
		return STATUS_BUSY;
   2331a:	2305      	movs	r3, #5
   2331c:	e045      	b.n	233aa <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   2331e:	687b      	ldr	r3, [r7, #4]
   23320:	781b      	ldrb	r3, [r3, #0]
   23322:	021b      	lsls	r3, r3, #8
   23324:	001a      	movs	r2, r3
   23326:	23c0      	movs	r3, #192	; 0xc0
   23328:	009b      	lsls	r3, r3, #2
   2332a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   2332c:	687b      	ldr	r3, [r7, #4]
   2332e:	785b      	ldrb	r3, [r3, #1]
   23330:	01db      	lsls	r3, r3, #7
   23332:	0019      	movs	r1, r3
   23334:	23ff      	movs	r3, #255	; 0xff
   23336:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   23338:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   2333a:	687b      	ldr	r3, [r7, #4]
   2333c:	789b      	ldrb	r3, [r3, #2]
   2333e:	005b      	lsls	r3, r3, #1
   23340:	0019      	movs	r1, r3
   23342:	231e      	movs	r3, #30
   23344:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   23346:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   23348:	687b      	ldr	r3, [r7, #4]
   2334a:	78db      	ldrb	r3, [r3, #3]
   2334c:	049b      	lsls	r3, r3, #18
   2334e:	0019      	movs	r1, r3
   23350:	2380      	movs	r3, #128	; 0x80
   23352:	02db      	lsls	r3, r3, #11
   23354:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   23356:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   23358:	687b      	ldr	r3, [r7, #4]
   2335a:	791b      	ldrb	r3, [r3, #4]
   2335c:	041b      	lsls	r3, r3, #16
   2335e:	0019      	movs	r1, r3
   23360:	23c0      	movs	r3, #192	; 0xc0
   23362:	029b      	lsls	r3, r3, #10
   23364:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   23366:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   23368:	68fb      	ldr	r3, [r7, #12]
   2336a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   2336c:	68fb      	ldr	r3, [r7, #12]
   2336e:	689b      	ldr	r3, [r3, #8]
   23370:	035b      	lsls	r3, r3, #13
   23372:	0f5b      	lsrs	r3, r3, #29
   23374:	b2db      	uxtb	r3, r3
   23376:	001a      	movs	r2, r3
   23378:	2308      	movs	r3, #8
   2337a:	4093      	lsls	r3, r2
   2337c:	b29a      	uxth	r2, r3
   2337e:	4b10      	ldr	r3, [pc, #64]	; (233c0 <nvm_set_config+0xd4>)
   23380:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   23382:	68fb      	ldr	r3, [r7, #12]
   23384:	689b      	ldr	r3, [r3, #8]
   23386:	b29a      	uxth	r2, r3
   23388:	4b0d      	ldr	r3, [pc, #52]	; (233c0 <nvm_set_config+0xd4>)
   2338a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   2338c:	687b      	ldr	r3, [r7, #4]
   2338e:	785a      	ldrb	r2, [r3, #1]
   23390:	4b0b      	ldr	r3, [pc, #44]	; (233c0 <nvm_set_config+0xd4>)
   23392:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   23394:	68fb      	ldr	r3, [r7, #12]
   23396:	8b1b      	ldrh	r3, [r3, #24]
   23398:	b29b      	uxth	r3, r3
   2339a:	001a      	movs	r2, r3
   2339c:	2380      	movs	r3, #128	; 0x80
   2339e:	005b      	lsls	r3, r3, #1
   233a0:	4013      	ands	r3, r2
   233a2:	d001      	beq.n	233a8 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   233a4:	2310      	movs	r3, #16
   233a6:	e000      	b.n	233aa <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   233a8:	2300      	movs	r3, #0
}
   233aa:	0018      	movs	r0, r3
   233ac:	46bd      	mov	sp, r7
   233ae:	b004      	add	sp, #16
   233b0:	bd80      	pop	{r7, pc}
   233b2:	46c0      	nop			; (mov r8, r8)
   233b4:	41004000 	.word	0x41004000
   233b8:	00023291 	.word	0x00023291
   233bc:	00023269 	.word	0x00023269
   233c0:	20000614 	.word	0x20000614

000233c4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   233c4:	b580      	push	{r7, lr}
   233c6:	b086      	sub	sp, #24
   233c8:	af00      	add	r7, sp, #0
   233ca:	60b9      	str	r1, [r7, #8]
   233cc:	607a      	str	r2, [r7, #4]
   233ce:	230f      	movs	r3, #15
   233d0:	18fb      	adds	r3, r7, r3
   233d2:	1c02      	adds	r2, r0, #0
   233d4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   233d6:	4b3a      	ldr	r3, [pc, #232]	; (234c0 <nvm_execute_command+0xfc>)
   233d8:	881b      	ldrh	r3, [r3, #0]
   233da:	001a      	movs	r2, r3
   233dc:	4b38      	ldr	r3, [pc, #224]	; (234c0 <nvm_execute_command+0xfc>)
   233de:	885b      	ldrh	r3, [r3, #2]
   233e0:	435a      	muls	r2, r3
   233e2:	68bb      	ldr	r3, [r7, #8]
   233e4:	429a      	cmp	r2, r3
   233e6:	d209      	bcs.n	233fc <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   233e8:	68bb      	ldr	r3, [r7, #8]
   233ea:	4a36      	ldr	r2, [pc, #216]	; (234c4 <nvm_execute_command+0x100>)
   233ec:	4293      	cmp	r3, r2
   233ee:	d903      	bls.n	233f8 <nvm_execute_command+0x34>
   233f0:	68bb      	ldr	r3, [r7, #8]
   233f2:	4a35      	ldr	r2, [pc, #212]	; (234c8 <nvm_execute_command+0x104>)
   233f4:	4293      	cmp	r3, r2
   233f6:	d901      	bls.n	233fc <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   233f8:	2318      	movs	r3, #24
   233fa:	e05c      	b.n	234b6 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   233fc:	4b33      	ldr	r3, [pc, #204]	; (234cc <nvm_execute_command+0x108>)
   233fe:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   23400:	697b      	ldr	r3, [r7, #20]
   23402:	685b      	ldr	r3, [r3, #4]
   23404:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   23406:	693b      	ldr	r3, [r7, #16]
   23408:	2280      	movs	r2, #128	; 0x80
   2340a:	02d2      	lsls	r2, r2, #11
   2340c:	431a      	orrs	r2, r3
   2340e:	697b      	ldr	r3, [r7, #20]
   23410:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23412:	697b      	ldr	r3, [r7, #20]
   23414:	2220      	movs	r2, #32
   23416:	32ff      	adds	r2, #255	; 0xff
   23418:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   2341a:	4b2d      	ldr	r3, [pc, #180]	; (234d0 <nvm_execute_command+0x10c>)
   2341c:	4798      	blx	r3
   2341e:	0003      	movs	r3, r0
   23420:	001a      	movs	r2, r3
   23422:	2301      	movs	r3, #1
   23424:	4053      	eors	r3, r2
   23426:	b2db      	uxtb	r3, r3
   23428:	2b00      	cmp	r3, #0
   2342a:	d004      	beq.n	23436 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   2342c:	697b      	ldr	r3, [r7, #20]
   2342e:	693a      	ldr	r2, [r7, #16]
   23430:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   23432:	2305      	movs	r3, #5
   23434:	e03f      	b.n	234b6 <nvm_execute_command+0xf2>
	}

	switch (command) {
   23436:	230f      	movs	r3, #15
   23438:	18fb      	adds	r3, r7, r3
   2343a:	781b      	ldrb	r3, [r3, #0]
   2343c:	2b45      	cmp	r3, #69	; 0x45
   2343e:	d81d      	bhi.n	2347c <nvm_execute_command+0xb8>
   23440:	009a      	lsls	r2, r3, #2
   23442:	4b24      	ldr	r3, [pc, #144]	; (234d4 <nvm_execute_command+0x110>)
   23444:	18d3      	adds	r3, r2, r3
   23446:	681b      	ldr	r3, [r3, #0]
   23448:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   2344a:	697b      	ldr	r3, [r7, #20]
   2344c:	8b1b      	ldrh	r3, [r3, #24]
   2344e:	b29b      	uxth	r3, r3
   23450:	001a      	movs	r2, r3
   23452:	2380      	movs	r3, #128	; 0x80
   23454:	005b      	lsls	r3, r3, #1
   23456:	4013      	ands	r3, r2
   23458:	d004      	beq.n	23464 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   2345a:	697b      	ldr	r3, [r7, #20]
   2345c:	693a      	ldr	r2, [r7, #16]
   2345e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   23460:	2310      	movs	r3, #16
   23462:	e028      	b.n	234b6 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   23464:	68bb      	ldr	r3, [r7, #8]
   23466:	089b      	lsrs	r3, r3, #2
   23468:	005a      	lsls	r2, r3, #1
   2346a:	697b      	ldr	r3, [r7, #20]
   2346c:	61da      	str	r2, [r3, #28]
			break;
   2346e:	e00b      	b.n	23488 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   23470:	68bb      	ldr	r3, [r7, #8]
   23472:	089b      	lsrs	r3, r3, #2
   23474:	005a      	lsls	r2, r3, #1
   23476:	697b      	ldr	r3, [r7, #20]
   23478:	61da      	str	r2, [r3, #28]
			break;
   2347a:	e005      	b.n	23488 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   2347c:	697b      	ldr	r3, [r7, #20]
   2347e:	693a      	ldr	r2, [r7, #16]
   23480:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   23482:	2317      	movs	r3, #23
   23484:	e017      	b.n	234b6 <nvm_execute_command+0xf2>
			break;
   23486:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   23488:	230f      	movs	r3, #15
   2348a:	18fb      	adds	r3, r7, r3
   2348c:	781b      	ldrb	r3, [r3, #0]
   2348e:	b29b      	uxth	r3, r3
   23490:	4a11      	ldr	r2, [pc, #68]	; (234d8 <nvm_execute_command+0x114>)
   23492:	4313      	orrs	r3, r2
   23494:	b29a      	uxth	r2, r3
   23496:	697b      	ldr	r3, [r7, #20]
   23498:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   2349a:	46c0      	nop			; (mov r8, r8)
   2349c:	4b0c      	ldr	r3, [pc, #48]	; (234d0 <nvm_execute_command+0x10c>)
   2349e:	4798      	blx	r3
   234a0:	0003      	movs	r3, r0
   234a2:	001a      	movs	r2, r3
   234a4:	2301      	movs	r3, #1
   234a6:	4053      	eors	r3, r2
   234a8:	b2db      	uxtb	r3, r3
   234aa:	2b00      	cmp	r3, #0
   234ac:	d1f6      	bne.n	2349c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   234ae:	697b      	ldr	r3, [r7, #20]
   234b0:	693a      	ldr	r2, [r7, #16]
   234b2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   234b4:	2300      	movs	r3, #0
}
   234b6:	0018      	movs	r0, r3
   234b8:	46bd      	mov	sp, r7
   234ba:	b006      	add	sp, #24
   234bc:	bd80      	pop	{r7, pc}
   234be:	46c0      	nop			; (mov r8, r8)
   234c0:	20000614 	.word	0x20000614
   234c4:	00803fff 	.word	0x00803fff
   234c8:	00806000 	.word	0x00806000
   234cc:	41004000 	.word	0x41004000
   234d0:	00023269 	.word	0x00023269
   234d4:	0002b624 	.word	0x0002b624
   234d8:	ffffa500 	.word	0xffffa500

000234dc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   234dc:	b580      	push	{r7, lr}
   234de:	b088      	sub	sp, #32
   234e0:	af00      	add	r7, sp, #0
   234e2:	60f8      	str	r0, [r7, #12]
   234e4:	60b9      	str	r1, [r7, #8]
   234e6:	1dbb      	adds	r3, r7, #6
   234e8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   234ea:	4b4a      	ldr	r3, [pc, #296]	; (23614 <nvm_write_buffer+0x138>)
   234ec:	881b      	ldrh	r3, [r3, #0]
   234ee:	001a      	movs	r2, r3
   234f0:	4b48      	ldr	r3, [pc, #288]	; (23614 <nvm_write_buffer+0x138>)
   234f2:	885b      	ldrh	r3, [r3, #2]
   234f4:	435a      	muls	r2, r3
	if (destination_address >
   234f6:	68fb      	ldr	r3, [r7, #12]
   234f8:	429a      	cmp	r2, r3
   234fa:	d201      	bcs.n	23500 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   234fc:	2318      	movs	r3, #24
   234fe:	e084      	b.n	2360a <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   23500:	4b44      	ldr	r3, [pc, #272]	; (23614 <nvm_write_buffer+0x138>)
   23502:	881b      	ldrh	r3, [r3, #0]
   23504:	3b01      	subs	r3, #1
   23506:	001a      	movs	r2, r3
   23508:	68fb      	ldr	r3, [r7, #12]
   2350a:	4013      	ands	r3, r2
   2350c:	d001      	beq.n	23512 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   2350e:	2318      	movs	r3, #24
   23510:	e07b      	b.n	2360a <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   23512:	4b40      	ldr	r3, [pc, #256]	; (23614 <nvm_write_buffer+0x138>)
   23514:	881b      	ldrh	r3, [r3, #0]
   23516:	1dba      	adds	r2, r7, #6
   23518:	8812      	ldrh	r2, [r2, #0]
   2351a:	429a      	cmp	r2, r3
   2351c:	d901      	bls.n	23522 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   2351e:	2317      	movs	r3, #23
   23520:	e073      	b.n	2360a <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   23522:	4b3d      	ldr	r3, [pc, #244]	; (23618 <nvm_write_buffer+0x13c>)
   23524:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   23526:	4b3d      	ldr	r3, [pc, #244]	; (2361c <nvm_write_buffer+0x140>)
   23528:	4798      	blx	r3
   2352a:	0003      	movs	r3, r0
   2352c:	001a      	movs	r2, r3
   2352e:	2301      	movs	r3, #1
   23530:	4053      	eors	r3, r2
   23532:	b2db      	uxtb	r3, r3
   23534:	2b00      	cmp	r3, #0
   23536:	d001      	beq.n	2353c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   23538:	2305      	movs	r3, #5
   2353a:	e066      	b.n	2360a <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   2353c:	697b      	ldr	r3, [r7, #20]
   2353e:	4a38      	ldr	r2, [pc, #224]	; (23620 <nvm_write_buffer+0x144>)
   23540:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   23542:	46c0      	nop			; (mov r8, r8)
   23544:	4b35      	ldr	r3, [pc, #212]	; (2361c <nvm_write_buffer+0x140>)
   23546:	4798      	blx	r3
   23548:	0003      	movs	r3, r0
   2354a:	001a      	movs	r2, r3
   2354c:	2301      	movs	r3, #1
   2354e:	4053      	eors	r3, r2
   23550:	b2db      	uxtb	r3, r3
   23552:	2b00      	cmp	r3, #0
   23554:	d1f6      	bne.n	23544 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23556:	697b      	ldr	r3, [r7, #20]
   23558:	2220      	movs	r2, #32
   2355a:	32ff      	adds	r2, #255	; 0xff
   2355c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   2355e:	68fb      	ldr	r3, [r7, #12]
   23560:	085b      	lsrs	r3, r3, #1
   23562:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   23564:	231a      	movs	r3, #26
   23566:	18fb      	adds	r3, r7, r3
   23568:	2200      	movs	r2, #0
   2356a:	801a      	strh	r2, [r3, #0]
   2356c:	e032      	b.n	235d4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   2356e:	231a      	movs	r3, #26
   23570:	18fb      	adds	r3, r7, r3
   23572:	881b      	ldrh	r3, [r3, #0]
   23574:	68ba      	ldr	r2, [r7, #8]
   23576:	18d3      	adds	r3, r2, r3
   23578:	781a      	ldrb	r2, [r3, #0]
   2357a:	2318      	movs	r3, #24
   2357c:	18fb      	adds	r3, r7, r3
   2357e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   23580:	231a      	movs	r3, #26
   23582:	18fb      	adds	r3, r7, r3
   23584:	881a      	ldrh	r2, [r3, #0]
   23586:	1dbb      	adds	r3, r7, #6
   23588:	881b      	ldrh	r3, [r3, #0]
   2358a:	3b01      	subs	r3, #1
   2358c:	429a      	cmp	r2, r3
   2358e:	da11      	bge.n	235b4 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   23590:	231a      	movs	r3, #26
   23592:	18fb      	adds	r3, r7, r3
   23594:	881b      	ldrh	r3, [r3, #0]
   23596:	3301      	adds	r3, #1
   23598:	68ba      	ldr	r2, [r7, #8]
   2359a:	18d3      	adds	r3, r2, r3
   2359c:	781b      	ldrb	r3, [r3, #0]
   2359e:	021b      	lsls	r3, r3, #8
   235a0:	b21a      	sxth	r2, r3
   235a2:	2318      	movs	r3, #24
   235a4:	18fb      	adds	r3, r7, r3
   235a6:	2100      	movs	r1, #0
   235a8:	5e5b      	ldrsh	r3, [r3, r1]
   235aa:	4313      	orrs	r3, r2
   235ac:	b21a      	sxth	r2, r3
   235ae:	2318      	movs	r3, #24
   235b0:	18fb      	adds	r3, r7, r3
   235b2:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   235b4:	69fb      	ldr	r3, [r7, #28]
   235b6:	1c5a      	adds	r2, r3, #1
   235b8:	61fa      	str	r2, [r7, #28]
   235ba:	005b      	lsls	r3, r3, #1
   235bc:	001a      	movs	r2, r3
   235be:	2318      	movs	r3, #24
   235c0:	18fb      	adds	r3, r7, r3
   235c2:	881b      	ldrh	r3, [r3, #0]
   235c4:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   235c6:	231a      	movs	r3, #26
   235c8:	18fb      	adds	r3, r7, r3
   235ca:	221a      	movs	r2, #26
   235cc:	18ba      	adds	r2, r7, r2
   235ce:	8812      	ldrh	r2, [r2, #0]
   235d0:	3202      	adds	r2, #2
   235d2:	801a      	strh	r2, [r3, #0]
   235d4:	231a      	movs	r3, #26
   235d6:	18fa      	adds	r2, r7, r3
   235d8:	1dbb      	adds	r3, r7, #6
   235da:	8812      	ldrh	r2, [r2, #0]
   235dc:	881b      	ldrh	r3, [r3, #0]
   235de:	429a      	cmp	r2, r3
   235e0:	d3c5      	bcc.n	2356e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   235e2:	4b0c      	ldr	r3, [pc, #48]	; (23614 <nvm_write_buffer+0x138>)
   235e4:	791b      	ldrb	r3, [r3, #4]
   235e6:	2201      	movs	r2, #1
   235e8:	4053      	eors	r3, r2
   235ea:	b2db      	uxtb	r3, r3
   235ec:	2b00      	cmp	r3, #0
   235ee:	d00b      	beq.n	23608 <nvm_write_buffer+0x12c>
   235f0:	1dbb      	adds	r3, r7, #6
   235f2:	881b      	ldrh	r3, [r3, #0]
   235f4:	2b3f      	cmp	r3, #63	; 0x3f
   235f6:	d807      	bhi.n	23608 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   235f8:	68fb      	ldr	r3, [r7, #12]
   235fa:	2200      	movs	r2, #0
   235fc:	0019      	movs	r1, r3
   235fe:	2004      	movs	r0, #4
   23600:	4b08      	ldr	r3, [pc, #32]	; (23624 <nvm_write_buffer+0x148>)
   23602:	4798      	blx	r3
   23604:	0003      	movs	r3, r0
   23606:	e000      	b.n	2360a <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   23608:	2300      	movs	r3, #0
}
   2360a:	0018      	movs	r0, r3
   2360c:	46bd      	mov	sp, r7
   2360e:	b008      	add	sp, #32
   23610:	bd80      	pop	{r7, pc}
   23612:	46c0      	nop			; (mov r8, r8)
   23614:	20000614 	.word	0x20000614
   23618:	41004000 	.word	0x41004000
   2361c:	00023269 	.word	0x00023269
   23620:	ffffa544 	.word	0xffffa544
   23624:	000233c5 	.word	0x000233c5

00023628 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   23628:	b580      	push	{r7, lr}
   2362a:	b088      	sub	sp, #32
   2362c:	af00      	add	r7, sp, #0
   2362e:	60f8      	str	r0, [r7, #12]
   23630:	60b9      	str	r1, [r7, #8]
   23632:	1dbb      	adds	r3, r7, #6
   23634:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   23636:	4b38      	ldr	r3, [pc, #224]	; (23718 <nvm_read_buffer+0xf0>)
   23638:	881b      	ldrh	r3, [r3, #0]
   2363a:	001a      	movs	r2, r3
   2363c:	4b36      	ldr	r3, [pc, #216]	; (23718 <nvm_read_buffer+0xf0>)
   2363e:	885b      	ldrh	r3, [r3, #2]
   23640:	435a      	muls	r2, r3
	if (source_address >
   23642:	68fb      	ldr	r3, [r7, #12]
   23644:	429a      	cmp	r2, r3
   23646:	d201      	bcs.n	2364c <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   23648:	2318      	movs	r3, #24
   2364a:	e060      	b.n	2370e <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   2364c:	4b32      	ldr	r3, [pc, #200]	; (23718 <nvm_read_buffer+0xf0>)
   2364e:	881b      	ldrh	r3, [r3, #0]
   23650:	3b01      	subs	r3, #1
   23652:	001a      	movs	r2, r3
   23654:	68fb      	ldr	r3, [r7, #12]
   23656:	4013      	ands	r3, r2
   23658:	d001      	beq.n	2365e <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   2365a:	2318      	movs	r3, #24
   2365c:	e057      	b.n	2370e <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   2365e:	4b2e      	ldr	r3, [pc, #184]	; (23718 <nvm_read_buffer+0xf0>)
   23660:	881b      	ldrh	r3, [r3, #0]
   23662:	1dba      	adds	r2, r7, #6
   23664:	8812      	ldrh	r2, [r2, #0]
   23666:	429a      	cmp	r2, r3
   23668:	d901      	bls.n	2366e <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   2366a:	2317      	movs	r3, #23
   2366c:	e04f      	b.n	2370e <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2366e:	4b2b      	ldr	r3, [pc, #172]	; (2371c <nvm_read_buffer+0xf4>)
   23670:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   23672:	4b2b      	ldr	r3, [pc, #172]	; (23720 <nvm_read_buffer+0xf8>)
   23674:	4798      	blx	r3
   23676:	0003      	movs	r3, r0
   23678:	001a      	movs	r2, r3
   2367a:	2301      	movs	r3, #1
   2367c:	4053      	eors	r3, r2
   2367e:	b2db      	uxtb	r3, r3
   23680:	2b00      	cmp	r3, #0
   23682:	d001      	beq.n	23688 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   23684:	2305      	movs	r3, #5
   23686:	e042      	b.n	2370e <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23688:	697b      	ldr	r3, [r7, #20]
   2368a:	2220      	movs	r2, #32
   2368c:	32ff      	adds	r2, #255	; 0xff
   2368e:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   23690:	68fb      	ldr	r3, [r7, #12]
   23692:	085b      	lsrs	r3, r3, #1
   23694:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   23696:	231a      	movs	r3, #26
   23698:	18fb      	adds	r3, r7, r3
   2369a:	2200      	movs	r2, #0
   2369c:	801a      	strh	r2, [r3, #0]
   2369e:	e02e      	b.n	236fe <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   236a0:	69fb      	ldr	r3, [r7, #28]
   236a2:	1c5a      	adds	r2, r3, #1
   236a4:	61fa      	str	r2, [r7, #28]
   236a6:	005b      	lsls	r3, r3, #1
   236a8:	001a      	movs	r2, r3
   236aa:	2312      	movs	r3, #18
   236ac:	18fb      	adds	r3, r7, r3
   236ae:	8812      	ldrh	r2, [r2, #0]
   236b0:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   236b2:	231a      	movs	r3, #26
   236b4:	18fb      	adds	r3, r7, r3
   236b6:	881b      	ldrh	r3, [r3, #0]
   236b8:	68ba      	ldr	r2, [r7, #8]
   236ba:	18d3      	adds	r3, r2, r3
   236bc:	2212      	movs	r2, #18
   236be:	18ba      	adds	r2, r7, r2
   236c0:	8812      	ldrh	r2, [r2, #0]
   236c2:	b2d2      	uxtb	r2, r2
   236c4:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   236c6:	231a      	movs	r3, #26
   236c8:	18fb      	adds	r3, r7, r3
   236ca:	881a      	ldrh	r2, [r3, #0]
   236cc:	1dbb      	adds	r3, r7, #6
   236ce:	881b      	ldrh	r3, [r3, #0]
   236d0:	3b01      	subs	r3, #1
   236d2:	429a      	cmp	r2, r3
   236d4:	da0c      	bge.n	236f0 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   236d6:	231a      	movs	r3, #26
   236d8:	18fb      	adds	r3, r7, r3
   236da:	881b      	ldrh	r3, [r3, #0]
   236dc:	3301      	adds	r3, #1
   236de:	68ba      	ldr	r2, [r7, #8]
   236e0:	18d3      	adds	r3, r2, r3
   236e2:	2212      	movs	r2, #18
   236e4:	18ba      	adds	r2, r7, r2
   236e6:	8812      	ldrh	r2, [r2, #0]
   236e8:	0a12      	lsrs	r2, r2, #8
   236ea:	b292      	uxth	r2, r2
   236ec:	b2d2      	uxtb	r2, r2
   236ee:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   236f0:	231a      	movs	r3, #26
   236f2:	18fb      	adds	r3, r7, r3
   236f4:	221a      	movs	r2, #26
   236f6:	18ba      	adds	r2, r7, r2
   236f8:	8812      	ldrh	r2, [r2, #0]
   236fa:	3202      	adds	r2, #2
   236fc:	801a      	strh	r2, [r3, #0]
   236fe:	231a      	movs	r3, #26
   23700:	18fa      	adds	r2, r7, r3
   23702:	1dbb      	adds	r3, r7, #6
   23704:	8812      	ldrh	r2, [r2, #0]
   23706:	881b      	ldrh	r3, [r3, #0]
   23708:	429a      	cmp	r2, r3
   2370a:	d3c9      	bcc.n	236a0 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   2370c:	2300      	movs	r3, #0
}
   2370e:	0018      	movs	r0, r3
   23710:	46bd      	mov	sp, r7
   23712:	b008      	add	sp, #32
   23714:	bd80      	pop	{r7, pc}
   23716:	46c0      	nop			; (mov r8, r8)
   23718:	20000614 	.word	0x20000614
   2371c:	41004000 	.word	0x41004000
   23720:	00023269 	.word	0x00023269

00023724 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   23724:	b580      	push	{r7, lr}
   23726:	b084      	sub	sp, #16
   23728:	af00      	add	r7, sp, #0
   2372a:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   2372c:	4b23      	ldr	r3, [pc, #140]	; (237bc <nvm_erase_row+0x98>)
   2372e:	881b      	ldrh	r3, [r3, #0]
   23730:	001a      	movs	r2, r3
   23732:	4b22      	ldr	r3, [pc, #136]	; (237bc <nvm_erase_row+0x98>)
   23734:	885b      	ldrh	r3, [r3, #2]
   23736:	435a      	muls	r2, r3
	if (row_address >
   23738:	687b      	ldr	r3, [r7, #4]
   2373a:	429a      	cmp	r2, r3
   2373c:	d201      	bcs.n	23742 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   2373e:	2318      	movs	r3, #24
   23740:	e037      	b.n	237b2 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   23742:	4b1e      	ldr	r3, [pc, #120]	; (237bc <nvm_erase_row+0x98>)
   23744:	881b      	ldrh	r3, [r3, #0]
   23746:	009b      	lsls	r3, r3, #2
   23748:	3b01      	subs	r3, #1
   2374a:	001a      	movs	r2, r3
   2374c:	687b      	ldr	r3, [r7, #4]
   2374e:	4013      	ands	r3, r2
   23750:	d001      	beq.n	23756 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   23752:	2318      	movs	r3, #24
   23754:	e02d      	b.n	237b2 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   23756:	4b1a      	ldr	r3, [pc, #104]	; (237c0 <nvm_erase_row+0x9c>)
   23758:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   2375a:	4b1a      	ldr	r3, [pc, #104]	; (237c4 <nvm_erase_row+0xa0>)
   2375c:	4798      	blx	r3
   2375e:	0003      	movs	r3, r0
   23760:	001a      	movs	r2, r3
   23762:	2301      	movs	r3, #1
   23764:	4053      	eors	r3, r2
   23766:	b2db      	uxtb	r3, r3
   23768:	2b00      	cmp	r3, #0
   2376a:	d001      	beq.n	23770 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   2376c:	2305      	movs	r3, #5
   2376e:	e020      	b.n	237b2 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23770:	68fb      	ldr	r3, [r7, #12]
   23772:	2220      	movs	r2, #32
   23774:	32ff      	adds	r2, #255	; 0xff
   23776:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   23778:	687b      	ldr	r3, [r7, #4]
   2377a:	089b      	lsrs	r3, r3, #2
   2377c:	005a      	lsls	r2, r3, #1
   2377e:	68fb      	ldr	r3, [r7, #12]
   23780:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   23782:	68fb      	ldr	r3, [r7, #12]
   23784:	4a10      	ldr	r2, [pc, #64]	; (237c8 <nvm_erase_row+0xa4>)
   23786:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   23788:	46c0      	nop			; (mov r8, r8)
   2378a:	4b0e      	ldr	r3, [pc, #56]	; (237c4 <nvm_erase_row+0xa0>)
   2378c:	4798      	blx	r3
   2378e:	0003      	movs	r3, r0
   23790:	001a      	movs	r2, r3
   23792:	2301      	movs	r3, #1
   23794:	4053      	eors	r3, r2
   23796:	b2db      	uxtb	r3, r3
   23798:	2b00      	cmp	r3, #0
   2379a:	d1f6      	bne.n	2378a <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   2379c:	68fb      	ldr	r3, [r7, #12]
   2379e:	8b1b      	ldrh	r3, [r3, #24]
   237a0:	b29b      	uxth	r3, r3
   237a2:	b2db      	uxtb	r3, r3
   237a4:	001a      	movs	r2, r3
   237a6:	231c      	movs	r3, #28
   237a8:	4013      	ands	r3, r2
   237aa:	d001      	beq.n	237b0 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   237ac:	2304      	movs	r3, #4
   237ae:	e000      	b.n	237b2 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   237b0:	2300      	movs	r3, #0
}
   237b2:	0018      	movs	r0, r3
   237b4:	46bd      	mov	sp, r7
   237b6:	b004      	add	sp, #16
   237b8:	bd80      	pop	{r7, pc}
   237ba:	46c0      	nop			; (mov r8, r8)
   237bc:	20000614 	.word	0x20000614
   237c0:	41004000 	.word	0x41004000
   237c4:	00023269 	.word	0x00023269
   237c8:	ffffa502 	.word	0xffffa502

000237cc <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   237cc:	b580      	push	{r7, lr}
   237ce:	b086      	sub	sp, #24
   237d0:	af00      	add	r7, sp, #0
   237d2:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   237d4:	4b2a      	ldr	r3, [pc, #168]	; (23880 <nvm_get_parameters+0xb4>)
   237d6:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   237d8:	697b      	ldr	r3, [r7, #20]
   237da:	2220      	movs	r2, #32
   237dc:	32ff      	adds	r2, #255	; 0xff
   237de:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   237e0:	697b      	ldr	r3, [r7, #20]
   237e2:	689b      	ldr	r3, [r3, #8]
   237e4:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   237e6:	693b      	ldr	r3, [r7, #16]
   237e8:	0c1b      	lsrs	r3, r3, #16
   237ea:	2207      	movs	r2, #7
   237ec:	4013      	ands	r3, r2
   237ee:	2208      	movs	r2, #8
   237f0:	409a      	lsls	r2, r3
   237f2:	0013      	movs	r3, r2
	parameters->page_size =
   237f4:	b2da      	uxtb	r2, r3
   237f6:	687b      	ldr	r3, [r7, #4]
   237f8:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   237fa:	693b      	ldr	r3, [r7, #16]
   237fc:	b29a      	uxth	r2, r3
   237fe:	687b      	ldr	r3, [r7, #4]
   23800:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   23802:	4b20      	ldr	r3, [pc, #128]	; (23884 <nvm_get_parameters+0xb8>)
   23804:	881b      	ldrh	r3, [r3, #0]
   23806:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   23808:	091b      	lsrs	r3, r3, #4
   2380a:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   2380c:	230e      	movs	r3, #14
   2380e:	18fb      	adds	r3, r7, r3
   23810:	2107      	movs	r1, #7
   23812:	400a      	ands	r2, r1
   23814:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   23816:	230e      	movs	r3, #14
   23818:	18fb      	adds	r3, r7, r3
   2381a:	881b      	ldrh	r3, [r3, #0]
   2381c:	2b07      	cmp	r3, #7
   2381e:	d103      	bne.n	23828 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   23820:	687b      	ldr	r3, [r7, #4]
   23822:	2200      	movs	r2, #0
   23824:	605a      	str	r2, [r3, #4]
   23826:	e00a      	b.n	2383e <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   23828:	230e      	movs	r3, #14
   2382a:	18fb      	adds	r3, r7, r3
   2382c:	881b      	ldrh	r3, [r3, #0]
   2382e:	2206      	movs	r2, #6
   23830:	1ad3      	subs	r3, r2, r3
   23832:	2204      	movs	r2, #4
   23834:	409a      	lsls	r2, r3
   23836:	0013      	movs	r3, r2
   23838:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   2383a:	687b      	ldr	r3, [r7, #4]
   2383c:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   2383e:	4b11      	ldr	r3, [pc, #68]	; (23884 <nvm_get_parameters+0xb8>)
   23840:	881b      	ldrh	r3, [r3, #0]
   23842:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   23844:	230c      	movs	r3, #12
   23846:	18fb      	adds	r3, r7, r3
   23848:	2107      	movs	r1, #7
   2384a:	400a      	ands	r2, r1
   2384c:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   2384e:	230c      	movs	r3, #12
   23850:	18fb      	adds	r3, r7, r3
   23852:	881b      	ldrh	r3, [r3, #0]
   23854:	2b07      	cmp	r3, #7
   23856:	d103      	bne.n	23860 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   23858:	687b      	ldr	r3, [r7, #4]
   2385a:	2200      	movs	r2, #0
   2385c:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   2385e:	e00a      	b.n	23876 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   23860:	230c      	movs	r3, #12
   23862:	18fb      	adds	r3, r7, r3
   23864:	881b      	ldrh	r3, [r3, #0]
   23866:	2207      	movs	r2, #7
   23868:	1ad3      	subs	r3, r2, r3
   2386a:	2204      	movs	r2, #4
   2386c:	409a      	lsls	r2, r3
   2386e:	0013      	movs	r3, r2
   23870:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   23872:	687b      	ldr	r3, [r7, #4]
   23874:	609a      	str	r2, [r3, #8]
}
   23876:	46c0      	nop			; (mov r8, r8)
   23878:	46bd      	mov	sp, r7
   2387a:	b006      	add	sp, #24
   2387c:	bd80      	pop	{r7, pc}
   2387e:	46c0      	nop			; (mov r8, r8)
   23880:	41004000 	.word	0x41004000
   23884:	00804000 	.word	0x00804000

00023888 <system_pinmux_get_config_defaults>:
{
   23888:	b580      	push	{r7, lr}
   2388a:	b082      	sub	sp, #8
   2388c:	af00      	add	r7, sp, #0
   2388e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   23890:	687b      	ldr	r3, [r7, #4]
   23892:	2280      	movs	r2, #128	; 0x80
   23894:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   23896:	687b      	ldr	r3, [r7, #4]
   23898:	2200      	movs	r2, #0
   2389a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2389c:	687b      	ldr	r3, [r7, #4]
   2389e:	2201      	movs	r2, #1
   238a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   238a2:	687b      	ldr	r3, [r7, #4]
   238a4:	2200      	movs	r2, #0
   238a6:	70da      	strb	r2, [r3, #3]
}
   238a8:	46c0      	nop			; (mov r8, r8)
   238aa:	46bd      	mov	sp, r7
   238ac:	b002      	add	sp, #8
   238ae:	bd80      	pop	{r7, pc}

000238b0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   238b0:	b580      	push	{r7, lr}
   238b2:	b084      	sub	sp, #16
   238b4:	af00      	add	r7, sp, #0
   238b6:	0002      	movs	r2, r0
   238b8:	6039      	str	r1, [r7, #0]
   238ba:	1dfb      	adds	r3, r7, #7
   238bc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   238be:	230c      	movs	r3, #12
   238c0:	18fb      	adds	r3, r7, r3
   238c2:	0018      	movs	r0, r3
   238c4:	4b10      	ldr	r3, [pc, #64]	; (23908 <port_pin_set_config+0x58>)
   238c6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   238c8:	230c      	movs	r3, #12
   238ca:	18fb      	adds	r3, r7, r3
   238cc:	2280      	movs	r2, #128	; 0x80
   238ce:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   238d0:	683b      	ldr	r3, [r7, #0]
   238d2:	781a      	ldrb	r2, [r3, #0]
   238d4:	230c      	movs	r3, #12
   238d6:	18fb      	adds	r3, r7, r3
   238d8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   238da:	683b      	ldr	r3, [r7, #0]
   238dc:	785a      	ldrb	r2, [r3, #1]
   238de:	230c      	movs	r3, #12
   238e0:	18fb      	adds	r3, r7, r3
   238e2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   238e4:	683b      	ldr	r3, [r7, #0]
   238e6:	789a      	ldrb	r2, [r3, #2]
   238e8:	230c      	movs	r3, #12
   238ea:	18fb      	adds	r3, r7, r3
   238ec:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   238ee:	230c      	movs	r3, #12
   238f0:	18fa      	adds	r2, r7, r3
   238f2:	1dfb      	adds	r3, r7, #7
   238f4:	781b      	ldrb	r3, [r3, #0]
   238f6:	0011      	movs	r1, r2
   238f8:	0018      	movs	r0, r3
   238fa:	4b04      	ldr	r3, [pc, #16]	; (2390c <port_pin_set_config+0x5c>)
   238fc:	4798      	blx	r3
}
   238fe:	46c0      	nop			; (mov r8, r8)
   23900:	46bd      	mov	sp, r7
   23902:	b004      	add	sp, #16
   23904:	bd80      	pop	{r7, pc}
   23906:	46c0      	nop			; (mov r8, r8)
   23908:	00023889 	.word	0x00023889
   2390c:	000255e1 	.word	0x000255e1

00023910 <nvm_get_config_defaults>:
{
   23910:	b580      	push	{r7, lr}
   23912:	b082      	sub	sp, #8
   23914:	af00      	add	r7, sp, #0
   23916:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   23918:	687b      	ldr	r3, [r7, #4]
   2391a:	2200      	movs	r2, #0
   2391c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   2391e:	687b      	ldr	r3, [r7, #4]
   23920:	2201      	movs	r2, #1
   23922:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   23924:	4b08      	ldr	r3, [pc, #32]	; (23948 <nvm_get_config_defaults+0x38>)
   23926:	685b      	ldr	r3, [r3, #4]
   23928:	06db      	lsls	r3, r3, #27
   2392a:	0f1b      	lsrs	r3, r3, #28
   2392c:	b2db      	uxtb	r3, r3
   2392e:	001a      	movs	r2, r3
   23930:	687b      	ldr	r3, [r7, #4]
   23932:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   23934:	687b      	ldr	r3, [r7, #4]
   23936:	2200      	movs	r2, #0
   23938:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   2393a:	687b      	ldr	r3, [r7, #4]
   2393c:	2200      	movs	r2, #0
   2393e:	711a      	strb	r2, [r3, #4]
}
   23940:	46c0      	nop			; (mov r8, r8)
   23942:	46bd      	mov	sp, r7
   23944:	b002      	add	sp, #8
   23946:	bd80      	pop	{r7, pc}
   23948:	41004000 	.word	0x41004000

0002394c <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   2394c:	b590      	push	{r4, r7, lr}
   2394e:	b085      	sub	sp, #20
   23950:	af00      	add	r7, sp, #0
   23952:	0002      	movs	r2, r0
   23954:	1dfb      	adds	r3, r7, #7
   23956:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23958:	230f      	movs	r3, #15
   2395a:	18fb      	adds	r3, r7, r3
   2395c:	2200      	movs	r2, #0
   2395e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   23960:	4b0a      	ldr	r3, [pc, #40]	; (2398c <_eeprom_emulator_nvm_erase_row+0x40>)
   23962:	685b      	ldr	r3, [r3, #4]
   23964:	1dfa      	adds	r2, r7, #7
   23966:	7812      	ldrb	r2, [r2, #0]
   23968:	0212      	lsls	r2, r2, #8
   2396a:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   2396c:	220f      	movs	r2, #15
   2396e:	18bc      	adds	r4, r7, r2
   23970:	0018      	movs	r0, r3
   23972:	4b07      	ldr	r3, [pc, #28]	; (23990 <_eeprom_emulator_nvm_erase_row+0x44>)
   23974:	4798      	blx	r3
   23976:	0003      	movs	r3, r0
   23978:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   2397a:	230f      	movs	r3, #15
   2397c:	18fb      	adds	r3, r7, r3
   2397e:	781b      	ldrb	r3, [r3, #0]
   23980:	2b05      	cmp	r3, #5
   23982:	d0ed      	beq.n	23960 <_eeprom_emulator_nvm_erase_row+0x14>
}
   23984:	46c0      	nop			; (mov r8, r8)
   23986:	46bd      	mov	sp, r7
   23988:	b005      	add	sp, #20
   2398a:	bd90      	pop	{r4, r7, pc}
   2398c:	2000061c 	.word	0x2000061c
   23990:	00023725 	.word	0x00023725

00023994 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   23994:	b590      	push	{r4, r7, lr}
   23996:	b085      	sub	sp, #20
   23998:	af00      	add	r7, sp, #0
   2399a:	0002      	movs	r2, r0
   2399c:	6039      	str	r1, [r7, #0]
   2399e:	1dbb      	adds	r3, r7, #6
   239a0:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   239a2:	230f      	movs	r3, #15
   239a4:	18fb      	adds	r3, r7, r3
   239a6:	2200      	movs	r2, #0
   239a8:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   239aa:	4b0c      	ldr	r3, [pc, #48]	; (239dc <_eeprom_emulator_nvm_fill_cache+0x48>)
   239ac:	685a      	ldr	r2, [r3, #4]
   239ae:	1dbb      	adds	r3, r7, #6
   239b0:	881b      	ldrh	r3, [r3, #0]
   239b2:	019b      	lsls	r3, r3, #6
   239b4:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   239b6:	0018      	movs	r0, r3
   239b8:	230f      	movs	r3, #15
   239ba:	18fc      	adds	r4, r7, r3
   239bc:	683b      	ldr	r3, [r7, #0]
   239be:	2240      	movs	r2, #64	; 0x40
   239c0:	0019      	movs	r1, r3
   239c2:	4b07      	ldr	r3, [pc, #28]	; (239e0 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   239c4:	4798      	blx	r3
   239c6:	0003      	movs	r3, r0
   239c8:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   239ca:	230f      	movs	r3, #15
   239cc:	18fb      	adds	r3, r7, r3
   239ce:	781b      	ldrb	r3, [r3, #0]
   239d0:	2b05      	cmp	r3, #5
   239d2:	d0ea      	beq.n	239aa <_eeprom_emulator_nvm_fill_cache+0x16>
}
   239d4:	46c0      	nop			; (mov r8, r8)
   239d6:	46bd      	mov	sp, r7
   239d8:	b005      	add	sp, #20
   239da:	bd90      	pop	{r4, r7, pc}
   239dc:	2000061c 	.word	0x2000061c
   239e0:	000234dd 	.word	0x000234dd

000239e4 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   239e4:	b590      	push	{r4, r7, lr}
   239e6:	b085      	sub	sp, #20
   239e8:	af00      	add	r7, sp, #0
   239ea:	0002      	movs	r2, r0
   239ec:	1dbb      	adds	r3, r7, #6
   239ee:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   239f0:	230f      	movs	r3, #15
   239f2:	18fb      	adds	r3, r7, r3
   239f4:	2200      	movs	r2, #0
   239f6:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   239f8:	4b0b      	ldr	r3, [pc, #44]	; (23a28 <_eeprom_emulator_nvm_commit_cache+0x44>)
   239fa:	685a      	ldr	r2, [r3, #4]
   239fc:	1dbb      	adds	r3, r7, #6
   239fe:	881b      	ldrh	r3, [r3, #0]
   23a00:	019b      	lsls	r3, r3, #6
   23a02:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   23a04:	220f      	movs	r2, #15
   23a06:	18bc      	adds	r4, r7, r2
   23a08:	2200      	movs	r2, #0
   23a0a:	0019      	movs	r1, r3
   23a0c:	2004      	movs	r0, #4
   23a0e:	4b07      	ldr	r3, [pc, #28]	; (23a2c <_eeprom_emulator_nvm_commit_cache+0x48>)
   23a10:	4798      	blx	r3
   23a12:	0003      	movs	r3, r0
   23a14:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   23a16:	230f      	movs	r3, #15
   23a18:	18fb      	adds	r3, r7, r3
   23a1a:	781b      	ldrb	r3, [r3, #0]
   23a1c:	2b05      	cmp	r3, #5
   23a1e:	d0eb      	beq.n	239f8 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   23a20:	46c0      	nop			; (mov r8, r8)
   23a22:	46bd      	mov	sp, r7
   23a24:	b005      	add	sp, #20
   23a26:	bd90      	pop	{r4, r7, pc}
   23a28:	2000061c 	.word	0x2000061c
   23a2c:	000233c5 	.word	0x000233c5

00023a30 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   23a30:	b590      	push	{r4, r7, lr}
   23a32:	b085      	sub	sp, #20
   23a34:	af00      	add	r7, sp, #0
   23a36:	0002      	movs	r2, r0
   23a38:	6039      	str	r1, [r7, #0]
   23a3a:	1dbb      	adds	r3, r7, #6
   23a3c:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23a3e:	230f      	movs	r3, #15
   23a40:	18fb      	adds	r3, r7, r3
   23a42:	2200      	movs	r2, #0
   23a44:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   23a46:	4b0c      	ldr	r3, [pc, #48]	; (23a78 <_eeprom_emulator_nvm_read_page+0x48>)
   23a48:	685a      	ldr	r2, [r3, #4]
   23a4a:	1dbb      	adds	r3, r7, #6
   23a4c:	881b      	ldrh	r3, [r3, #0]
   23a4e:	019b      	lsls	r3, r3, #6
   23a50:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   23a52:	0018      	movs	r0, r3
   23a54:	230f      	movs	r3, #15
   23a56:	18fc      	adds	r4, r7, r3
   23a58:	683b      	ldr	r3, [r7, #0]
   23a5a:	2240      	movs	r2, #64	; 0x40
   23a5c:	0019      	movs	r1, r3
   23a5e:	4b07      	ldr	r3, [pc, #28]	; (23a7c <_eeprom_emulator_nvm_read_page+0x4c>)
   23a60:	4798      	blx	r3
   23a62:	0003      	movs	r3, r0
   23a64:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   23a66:	230f      	movs	r3, #15
   23a68:	18fb      	adds	r3, r7, r3
   23a6a:	781b      	ldrb	r3, [r3, #0]
   23a6c:	2b05      	cmp	r3, #5
   23a6e:	d0ea      	beq.n	23a46 <_eeprom_emulator_nvm_read_page+0x16>
}
   23a70:	46c0      	nop			; (mov r8, r8)
   23a72:	46bd      	mov	sp, r7
   23a74:	b005      	add	sp, #20
   23a76:	bd90      	pop	{r4, r7, pc}
   23a78:	2000061c 	.word	0x2000061c
   23a7c:	00023629 	.word	0x00023629

00023a80 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   23a80:	b580      	push	{r7, lr}
   23a82:	b092      	sub	sp, #72	; 0x48
   23a84:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   23a86:	2346      	movs	r3, #70	; 0x46
   23a88:	18fb      	adds	r3, r7, r3
   23a8a:	2200      	movs	r2, #0
   23a8c:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   23a8e:	4b32      	ldr	r3, [pc, #200]	; (23b58 <_eeprom_emulator_format_memory+0xd8>)
   23a90:	2287      	movs	r2, #135	; 0x87
   23a92:	2100      	movs	r1, #0
   23a94:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   23a96:	4b30      	ldr	r3, [pc, #192]	; (23b58 <_eeprom_emulator_format_memory+0xd8>)
   23a98:	2287      	movs	r2, #135	; 0x87
   23a9a:	5c9b      	ldrb	r3, [r3, r2]
   23a9c:	0018      	movs	r0, r3
   23a9e:	4b2f      	ldr	r3, [pc, #188]	; (23b5c <_eeprom_emulator_format_memory+0xdc>)
   23aa0:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   23aa2:	2344      	movs	r3, #68	; 0x44
   23aa4:	18fb      	adds	r3, r7, r3
   23aa6:	2204      	movs	r2, #4
   23aa8:	801a      	strh	r2, [r3, #0]
   23aaa:	e04a      	b.n	23b42 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   23aac:	2344      	movs	r3, #68	; 0x44
   23aae:	18fb      	adds	r3, r7, r3
   23ab0:	881a      	ldrh	r2, [r3, #0]
   23ab2:	4b29      	ldr	r3, [pc, #164]	; (23b58 <_eeprom_emulator_format_memory+0xd8>)
   23ab4:	891b      	ldrh	r3, [r3, #8]
   23ab6:	3b01      	subs	r3, #1
   23ab8:	429a      	cmp	r2, r3
   23aba:	d03a      	beq.n	23b32 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   23abc:	2344      	movs	r3, #68	; 0x44
   23abe:	18fb      	adds	r3, r7, r3
   23ac0:	881b      	ldrh	r3, [r3, #0]
   23ac2:	2203      	movs	r2, #3
   23ac4:	4013      	ands	r3, r2
   23ac6:	b29b      	uxth	r3, r3
   23ac8:	2b00      	cmp	r3, #0
   23aca:	d108      	bne.n	23ade <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   23acc:	2344      	movs	r3, #68	; 0x44
   23ace:	18fb      	adds	r3, r7, r3
   23ad0:	881b      	ldrh	r3, [r3, #0]
   23ad2:	089b      	lsrs	r3, r3, #2
   23ad4:	b29b      	uxth	r3, r3
   23ad6:	b2db      	uxtb	r3, r3
   23ad8:	0018      	movs	r0, r3
   23ada:	4b20      	ldr	r3, [pc, #128]	; (23b5c <_eeprom_emulator_format_memory+0xdc>)
   23adc:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   23ade:	2344      	movs	r3, #68	; 0x44
   23ae0:	18fb      	adds	r3, r7, r3
   23ae2:	881b      	ldrh	r3, [r3, #0]
   23ae4:	2203      	movs	r2, #3
   23ae6:	4013      	ands	r3, r2
   23ae8:	b29b      	uxth	r3, r3
   23aea:	2b01      	cmp	r3, #1
   23aec:	d822      	bhi.n	23b34 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   23aee:	1d3b      	adds	r3, r7, #4
   23af0:	2240      	movs	r2, #64	; 0x40
   23af2:	21ff      	movs	r1, #255	; 0xff
   23af4:	0018      	movs	r0, r3
   23af6:	4b1a      	ldr	r3, [pc, #104]	; (23b60 <_eeprom_emulator_format_memory+0xe0>)
   23af8:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   23afa:	2346      	movs	r3, #70	; 0x46
   23afc:	18fb      	adds	r3, r7, r3
   23afe:	881b      	ldrh	r3, [r3, #0]
   23b00:	b2da      	uxtb	r2, r3
   23b02:	1d3b      	adds	r3, r7, #4
   23b04:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   23b06:	1d3a      	adds	r2, r7, #4
   23b08:	2344      	movs	r3, #68	; 0x44
   23b0a:	18fb      	adds	r3, r7, r3
   23b0c:	881b      	ldrh	r3, [r3, #0]
   23b0e:	0011      	movs	r1, r2
   23b10:	0018      	movs	r0, r3
   23b12:	4b14      	ldr	r3, [pc, #80]	; (23b64 <_eeprom_emulator_format_memory+0xe4>)
   23b14:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   23b16:	2344      	movs	r3, #68	; 0x44
   23b18:	18fb      	adds	r3, r7, r3
   23b1a:	881b      	ldrh	r3, [r3, #0]
   23b1c:	0018      	movs	r0, r3
   23b1e:	4b12      	ldr	r3, [pc, #72]	; (23b68 <_eeprom_emulator_format_memory+0xe8>)
   23b20:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   23b22:	2346      	movs	r3, #70	; 0x46
   23b24:	18fb      	adds	r3, r7, r3
   23b26:	881a      	ldrh	r2, [r3, #0]
   23b28:	2346      	movs	r3, #70	; 0x46
   23b2a:	18fb      	adds	r3, r7, r3
   23b2c:	3201      	adds	r2, #1
   23b2e:	801a      	strh	r2, [r3, #0]
   23b30:	e000      	b.n	23b34 <_eeprom_emulator_format_memory+0xb4>
			continue;
   23b32:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   23b34:	2344      	movs	r3, #68	; 0x44
   23b36:	18fb      	adds	r3, r7, r3
   23b38:	881a      	ldrh	r2, [r3, #0]
   23b3a:	2344      	movs	r3, #68	; 0x44
   23b3c:	18fb      	adds	r3, r7, r3
   23b3e:	3201      	adds	r2, #1
   23b40:	801a      	strh	r2, [r3, #0]
   23b42:	4b05      	ldr	r3, [pc, #20]	; (23b58 <_eeprom_emulator_format_memory+0xd8>)
   23b44:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   23b46:	2244      	movs	r2, #68	; 0x44
   23b48:	18ba      	adds	r2, r7, r2
   23b4a:	8812      	ldrh	r2, [r2, #0]
   23b4c:	429a      	cmp	r2, r3
   23b4e:	d3ad      	bcc.n	23aac <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   23b50:	46c0      	nop			; (mov r8, r8)
   23b52:	46bd      	mov	sp, r7
   23b54:	b012      	add	sp, #72	; 0x48
   23b56:	bd80      	pop	{r7, pc}
   23b58:	2000061c 	.word	0x2000061c
   23b5c:	0002394d 	.word	0x0002394d
   23b60:	0002975b 	.word	0x0002975b
   23b64:	00023995 	.word	0x00023995
   23b68:	000239e5 	.word	0x000239e5

00023b6c <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   23b6c:	b580      	push	{r7, lr}
   23b6e:	b082      	sub	sp, #8
   23b70:	af00      	add	r7, sp, #0
   23b72:	0002      	movs	r2, r0
   23b74:	1dbb      	adds	r3, r7, #6
   23b76:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   23b78:	4b14      	ldr	r3, [pc, #80]	; (23bcc <_eeprom_emulator_is_full_row+0x60>)
   23b7a:	685a      	ldr	r2, [r3, #4]
   23b7c:	1dbb      	adds	r3, r7, #6
   23b7e:	881b      	ldrh	r3, [r3, #0]
   23b80:	019b      	lsls	r3, r3, #6
   23b82:	18d3      	adds	r3, r2, r3
   23b84:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   23b86:	4b11      	ldr	r3, [pc, #68]	; (23bcc <_eeprom_emulator_is_full_row+0x60>)
   23b88:	6859      	ldr	r1, [r3, #4]
   23b8a:	1dbb      	adds	r3, r7, #6
   23b8c:	881b      	ldrh	r3, [r3, #0]
   23b8e:	3302      	adds	r3, #2
   23b90:	019b      	lsls	r3, r3, #6
   23b92:	18cb      	adds	r3, r1, r3
   23b94:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   23b96:	429a      	cmp	r2, r3
   23b98:	d011      	beq.n	23bbe <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   23b9a:	4b0c      	ldr	r3, [pc, #48]	; (23bcc <_eeprom_emulator_is_full_row+0x60>)
   23b9c:	685a      	ldr	r2, [r3, #4]
   23b9e:	1dbb      	adds	r3, r7, #6
   23ba0:	881b      	ldrh	r3, [r3, #0]
   23ba2:	3301      	adds	r3, #1
   23ba4:	019b      	lsls	r3, r3, #6
   23ba6:	18d3      	adds	r3, r2, r3
   23ba8:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   23baa:	4b08      	ldr	r3, [pc, #32]	; (23bcc <_eeprom_emulator_is_full_row+0x60>)
   23bac:	6859      	ldr	r1, [r3, #4]
   23bae:	1dbb      	adds	r3, r7, #6
   23bb0:	881b      	ldrh	r3, [r3, #0]
   23bb2:	3302      	adds	r3, #2
   23bb4:	019b      	lsls	r3, r3, #6
   23bb6:	18cb      	adds	r3, r1, r3
   23bb8:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   23bba:	429a      	cmp	r2, r3
   23bbc:	d101      	bne.n	23bc2 <_eeprom_emulator_is_full_row+0x56>
		return true;
   23bbe:	2301      	movs	r3, #1
   23bc0:	e000      	b.n	23bc4 <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   23bc2:	2300      	movs	r3, #0
	}
}
   23bc4:	0018      	movs	r0, r3
   23bc6:	46bd      	mov	sp, r7
   23bc8:	b002      	add	sp, #8
   23bca:	bd80      	pop	{r7, pc}
   23bcc:	2000061c 	.word	0x2000061c

00023bd0 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   23bd0:	b580      	push	{r7, lr}
   23bd2:	b082      	sub	sp, #8
   23bd4:	af00      	add	r7, sp, #0
   23bd6:	0002      	movs	r2, r0
   23bd8:	1dbb      	adds	r3, r7, #6
   23bda:	801a      	strh	r2, [r3, #0]
   23bdc:	1d3b      	adds	r3, r7, #4
   23bde:	1c0a      	adds	r2, r1, #0
   23be0:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   23be2:	1dbb      	adds	r3, r7, #6
   23be4:	881b      	ldrh	r3, [r3, #0]
   23be6:	0018      	movs	r0, r3
   23be8:	4b0c      	ldr	r3, [pc, #48]	; (23c1c <_eeprom_emulator_erase_invalid_page+0x4c>)
   23bea:	4798      	blx	r3
   23bec:	1e03      	subs	r3, r0, #0
   23bee:	d008      	beq.n	23c02 <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   23bf0:	1dbb      	adds	r3, r7, #6
   23bf2:	881b      	ldrh	r3, [r3, #0]
   23bf4:	089b      	lsrs	r3, r3, #2
   23bf6:	b29b      	uxth	r3, r3
   23bf8:	b2db      	uxtb	r3, r3
   23bfa:	0018      	movs	r0, r3
   23bfc:	4b08      	ldr	r3, [pc, #32]	; (23c20 <_eeprom_emulator_erase_invalid_page+0x50>)
   23bfe:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   23c00:	e007      	b.n	23c12 <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   23c02:	1d3b      	adds	r3, r7, #4
   23c04:	881b      	ldrh	r3, [r3, #0]
   23c06:	089b      	lsrs	r3, r3, #2
   23c08:	b29b      	uxth	r3, r3
   23c0a:	b2db      	uxtb	r3, r3
   23c0c:	0018      	movs	r0, r3
   23c0e:	4b04      	ldr	r3, [pc, #16]	; (23c20 <_eeprom_emulator_erase_invalid_page+0x50>)
   23c10:	4798      	blx	r3
}
   23c12:	46c0      	nop			; (mov r8, r8)
   23c14:	46bd      	mov	sp, r7
   23c16:	b002      	add	sp, #8
   23c18:	bd80      	pop	{r7, pc}
   23c1a:	46c0      	nop			; (mov r8, r8)
   23c1c:	00023b6d 	.word	0x00023b6d
   23c20:	0002394d 	.word	0x0002394d

00023c24 <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   23c24:	b580      	push	{r7, lr}
   23c26:	b082      	sub	sp, #8
   23c28:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   23c2a:	1dbb      	adds	r3, r7, #6
   23c2c:	2200      	movs	r2, #0
   23c2e:	801a      	strh	r2, [r3, #0]
   23c30:	1d3b      	adds	r3, r7, #4
   23c32:	2200      	movs	r2, #0
   23c34:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   23c36:	1dbb      	adds	r3, r7, #6
   23c38:	2200      	movs	r2, #0
   23c3a:	801a      	strh	r2, [r3, #0]
   23c3c:	e04a      	b.n	23cd4 <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   23c3e:	4b2a      	ldr	r3, [pc, #168]	; (23ce8 <_eeprom_emulator_check_logical_page+0xc4>)
   23c40:	685a      	ldr	r2, [r3, #4]
   23c42:	1dbb      	adds	r3, r7, #6
   23c44:	881b      	ldrh	r3, [r3, #0]
   23c46:	019b      	lsls	r3, r3, #6
   23c48:	18d3      	adds	r3, r2, r3
   23c4a:	781a      	ldrb	r2, [r3, #0]
   23c4c:	1cbb      	adds	r3, r7, #2
   23c4e:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23c50:	1cbb      	adds	r3, r7, #2
   23c52:	881b      	ldrh	r3, [r3, #0]
   23c54:	2bff      	cmp	r3, #255	; 0xff
   23c56:	d037      	beq.n	23cc8 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23c58:	1d3b      	adds	r3, r7, #4
   23c5a:	1dba      	adds	r2, r7, #6
   23c5c:	8812      	ldrh	r2, [r2, #0]
   23c5e:	3204      	adds	r2, #4
   23c60:	801a      	strh	r2, [r3, #0]
   23c62:	e02a      	b.n	23cba <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   23c64:	1d3b      	adds	r3, r7, #4
   23c66:	881a      	ldrh	r2, [r3, #0]
   23c68:	4b1f      	ldr	r3, [pc, #124]	; (23ce8 <_eeprom_emulator_check_logical_page+0xc4>)
   23c6a:	891b      	ldrh	r3, [r3, #8]
   23c6c:	3b01      	subs	r3, #1
   23c6e:	429a      	cmp	r2, r3
   23c70:	d01b      	beq.n	23caa <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   23c72:	4b1d      	ldr	r3, [pc, #116]	; (23ce8 <_eeprom_emulator_check_logical_page+0xc4>)
   23c74:	685a      	ldr	r2, [r3, #4]
   23c76:	1d3b      	adds	r3, r7, #4
   23c78:	881b      	ldrh	r3, [r3, #0]
   23c7a:	019b      	lsls	r3, r3, #6
   23c7c:	18d3      	adds	r3, r2, r3
   23c7e:	781a      	ldrb	r2, [r3, #0]
   23c80:	003b      	movs	r3, r7
   23c82:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23c84:	003b      	movs	r3, r7
   23c86:	881b      	ldrh	r3, [r3, #0]
   23c88:	2bff      	cmp	r3, #255	; 0xff
   23c8a:	d010      	beq.n	23cae <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   23c8c:	1cba      	adds	r2, r7, #2
   23c8e:	003b      	movs	r3, r7
   23c90:	8812      	ldrh	r2, [r2, #0]
   23c92:	881b      	ldrh	r3, [r3, #0]
   23c94:	429a      	cmp	r2, r3
   23c96:	d10b      	bne.n	23cb0 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   23c98:	1d3b      	adds	r3, r7, #4
   23c9a:	881a      	ldrh	r2, [r3, #0]
   23c9c:	1dbb      	adds	r3, r7, #6
   23c9e:	881b      	ldrh	r3, [r3, #0]
   23ca0:	0011      	movs	r1, r2
   23ca2:	0018      	movs	r0, r3
   23ca4:	4b11      	ldr	r3, [pc, #68]	; (23cec <_eeprom_emulator_check_logical_page+0xc8>)
   23ca6:	4798      	blx	r3
   23ca8:	e002      	b.n	23cb0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   23caa:	46c0      	nop			; (mov r8, r8)
   23cac:	e000      	b.n	23cb0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   23cae:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23cb0:	1d3b      	adds	r3, r7, #4
   23cb2:	1d3a      	adds	r2, r7, #4
   23cb4:	8812      	ldrh	r2, [r2, #0]
   23cb6:	3204      	adds	r2, #4
   23cb8:	801a      	strh	r2, [r3, #0]
   23cba:	4b0b      	ldr	r3, [pc, #44]	; (23ce8 <_eeprom_emulator_check_logical_page+0xc4>)
   23cbc:	891b      	ldrh	r3, [r3, #8]
   23cbe:	1d3a      	adds	r2, r7, #4
   23cc0:	8812      	ldrh	r2, [r2, #0]
   23cc2:	429a      	cmp	r2, r3
   23cc4:	d3ce      	bcc.n	23c64 <_eeprom_emulator_check_logical_page+0x40>
   23cc6:	e000      	b.n	23cca <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   23cc8:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   23cca:	1dbb      	adds	r3, r7, #6
   23ccc:	1dba      	adds	r2, r7, #6
   23cce:	8812      	ldrh	r2, [r2, #0]
   23cd0:	3204      	adds	r2, #4
   23cd2:	801a      	strh	r2, [r3, #0]
   23cd4:	4b04      	ldr	r3, [pc, #16]	; (23ce8 <_eeprom_emulator_check_logical_page+0xc4>)
   23cd6:	891b      	ldrh	r3, [r3, #8]
   23cd8:	1dba      	adds	r2, r7, #6
   23cda:	8812      	ldrh	r2, [r2, #0]
   23cdc:	429a      	cmp	r2, r3
   23cde:	d3ae      	bcc.n	23c3e <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   23ce0:	46c0      	nop			; (mov r8, r8)
   23ce2:	46bd      	mov	sp, r7
   23ce4:	b002      	add	sp, #8
   23ce6:	bd80      	pop	{r7, pc}
   23ce8:	2000061c 	.word	0x2000061c
   23cec:	00023bd1 	.word	0x00023bd1

00023cf0 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   23cf0:	b580      	push	{r7, lr}
   23cf2:	b084      	sub	sp, #16
   23cf4:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   23cf6:	4b51      	ldr	r3, [pc, #324]	; (23e3c <_eeprom_emulator_update_page_mapping+0x14c>)
   23cf8:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   23cfa:	230e      	movs	r3, #14
   23cfc:	18fb      	adds	r3, r7, r3
   23cfe:	2200      	movs	r2, #0
   23d00:	801a      	strh	r2, [r3, #0]
   23d02:	e033      	b.n	23d6c <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   23d04:	230e      	movs	r3, #14
   23d06:	18fb      	adds	r3, r7, r3
   23d08:	881a      	ldrh	r2, [r3, #0]
   23d0a:	4b4d      	ldr	r3, [pc, #308]	; (23e40 <_eeprom_emulator_update_page_mapping+0x150>)
   23d0c:	891b      	ldrh	r3, [r3, #8]
   23d0e:	3b01      	subs	r3, #1
   23d10:	429a      	cmp	r2, r3
   23d12:	d023      	beq.n	23d5c <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   23d14:	4b4a      	ldr	r3, [pc, #296]	; (23e40 <_eeprom_emulator_update_page_mapping+0x150>)
   23d16:	685a      	ldr	r2, [r3, #4]
   23d18:	230e      	movs	r3, #14
   23d1a:	18fb      	adds	r3, r7, r3
   23d1c:	881b      	ldrh	r3, [r3, #0]
   23d1e:	019b      	lsls	r3, r3, #6
   23d20:	18d3      	adds	r3, r2, r3
   23d22:	781a      	ldrb	r2, [r3, #0]
   23d24:	2308      	movs	r3, #8
   23d26:	18fb      	adds	r3, r7, r3
   23d28:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   23d2a:	2308      	movs	r3, #8
   23d2c:	18fb      	adds	r3, r7, r3
   23d2e:	881b      	ldrh	r3, [r3, #0]
   23d30:	2bff      	cmp	r3, #255	; 0xff
   23d32:	d014      	beq.n	23d5e <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   23d34:	4b42      	ldr	r3, [pc, #264]	; (23e40 <_eeprom_emulator_update_page_mapping+0x150>)
   23d36:	7a9b      	ldrb	r3, [r3, #10]
   23d38:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   23d3a:	2208      	movs	r2, #8
   23d3c:	18ba      	adds	r2, r7, r2
   23d3e:	8812      	ldrh	r2, [r2, #0]
   23d40:	429a      	cmp	r2, r3
   23d42:	d20c      	bcs.n	23d5e <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   23d44:	2308      	movs	r3, #8
   23d46:	18fb      	adds	r3, r7, r3
   23d48:	881b      	ldrh	r3, [r3, #0]
   23d4a:	220e      	movs	r2, #14
   23d4c:	18ba      	adds	r2, r7, r2
   23d4e:	8812      	ldrh	r2, [r2, #0]
   23d50:	b2d1      	uxtb	r1, r2
   23d52:	4a3b      	ldr	r2, [pc, #236]	; (23e40 <_eeprom_emulator_update_page_mapping+0x150>)
   23d54:	18d3      	adds	r3, r2, r3
   23d56:	1c0a      	adds	r2, r1, #0
   23d58:	72da      	strb	r2, [r3, #11]
   23d5a:	e000      	b.n	23d5e <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   23d5c:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   23d5e:	230e      	movs	r3, #14
   23d60:	18fb      	adds	r3, r7, r3
   23d62:	881a      	ldrh	r2, [r3, #0]
   23d64:	230e      	movs	r3, #14
   23d66:	18fb      	adds	r3, r7, r3
   23d68:	3201      	adds	r2, #1
   23d6a:	801a      	strh	r2, [r3, #0]
   23d6c:	4b34      	ldr	r3, [pc, #208]	; (23e40 <_eeprom_emulator_update_page_mapping+0x150>)
   23d6e:	891b      	ldrh	r3, [r3, #8]
   23d70:	220e      	movs	r2, #14
   23d72:	18ba      	adds	r2, r7, r2
   23d74:	8812      	ldrh	r2, [r2, #0]
   23d76:	429a      	cmp	r2, r3
   23d78:	d3c4      	bcc.n	23d04 <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   23d7a:	4b31      	ldr	r3, [pc, #196]	; (23e40 <_eeprom_emulator_update_page_mapping+0x150>)
   23d7c:	2287      	movs	r2, #135	; 0x87
   23d7e:	213f      	movs	r1, #63	; 0x3f
   23d80:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23d82:	230c      	movs	r3, #12
   23d84:	18fb      	adds	r3, r7, r3
   23d86:	2200      	movs	r2, #0
   23d88:	801a      	strh	r2, [r3, #0]
   23d8a:	e04a      	b.n	23e22 <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   23d8c:	230b      	movs	r3, #11
   23d8e:	18fb      	adds	r3, r7, r3
   23d90:	2201      	movs	r2, #1
   23d92:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23d94:	230a      	movs	r3, #10
   23d96:	18fb      	adds	r3, r7, r3
   23d98:	2200      	movs	r2, #0
   23d9a:	701a      	strb	r2, [r3, #0]
   23d9c:	e028      	b.n	23df0 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   23d9e:	230c      	movs	r3, #12
   23da0:	18fb      	adds	r3, r7, r3
   23da2:	881b      	ldrh	r3, [r3, #0]
   23da4:	009b      	lsls	r3, r3, #2
   23da6:	b299      	uxth	r1, r3
   23da8:	230a      	movs	r3, #10
   23daa:	18fb      	adds	r3, r7, r3
   23dac:	781b      	ldrb	r3, [r3, #0]
   23dae:	b29a      	uxth	r2, r3
   23db0:	1dbb      	adds	r3, r7, #6
   23db2:	188a      	adds	r2, r1, r2
   23db4:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   23db6:	1dbb      	adds	r3, r7, #6
   23db8:	881a      	ldrh	r2, [r3, #0]
   23dba:	4b21      	ldr	r3, [pc, #132]	; (23e40 <_eeprom_emulator_update_page_mapping+0x150>)
   23dbc:	891b      	ldrh	r3, [r3, #8]
   23dbe:	3b01      	subs	r3, #1
   23dc0:	429a      	cmp	r2, r3
   23dc2:	d00d      	beq.n	23de0 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   23dc4:	4b1e      	ldr	r3, [pc, #120]	; (23e40 <_eeprom_emulator_update_page_mapping+0x150>)
   23dc6:	685a      	ldr	r2, [r3, #4]
   23dc8:	1dbb      	adds	r3, r7, #6
   23dca:	881b      	ldrh	r3, [r3, #0]
   23dcc:	019b      	lsls	r3, r3, #6
   23dce:	18d3      	adds	r3, r2, r3
   23dd0:	781b      	ldrb	r3, [r3, #0]
   23dd2:	2bff      	cmp	r3, #255	; 0xff
   23dd4:	d005      	beq.n	23de2 <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   23dd6:	230b      	movs	r3, #11
   23dd8:	18fb      	adds	r3, r7, r3
   23dda:	2200      	movs	r2, #0
   23ddc:	701a      	strb	r2, [r3, #0]
   23dde:	e000      	b.n	23de2 <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   23de0:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23de2:	230a      	movs	r3, #10
   23de4:	18fb      	adds	r3, r7, r3
   23de6:	781a      	ldrb	r2, [r3, #0]
   23de8:	230a      	movs	r3, #10
   23dea:	18fb      	adds	r3, r7, r3
   23dec:	3201      	adds	r2, #1
   23dee:	701a      	strb	r2, [r3, #0]
   23df0:	230a      	movs	r3, #10
   23df2:	18fb      	adds	r3, r7, r3
   23df4:	781b      	ldrb	r3, [r3, #0]
   23df6:	2b03      	cmp	r3, #3
   23df8:	d9d1      	bls.n	23d9e <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   23dfa:	230b      	movs	r3, #11
   23dfc:	18fb      	adds	r3, r7, r3
   23dfe:	781b      	ldrb	r3, [r3, #0]
   23e00:	2b00      	cmp	r3, #0
   23e02:	d007      	beq.n	23e14 <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   23e04:	230c      	movs	r3, #12
   23e06:	18fb      	adds	r3, r7, r3
   23e08:	881b      	ldrh	r3, [r3, #0]
   23e0a:	b2d9      	uxtb	r1, r3
   23e0c:	4b0c      	ldr	r3, [pc, #48]	; (23e40 <_eeprom_emulator_update_page_mapping+0x150>)
   23e0e:	2287      	movs	r2, #135	; 0x87
   23e10:	5499      	strb	r1, [r3, r2]
			break;
   23e12:	e00f      	b.n	23e34 <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23e14:	230c      	movs	r3, #12
   23e16:	18fb      	adds	r3, r7, r3
   23e18:	881a      	ldrh	r2, [r3, #0]
   23e1a:	230c      	movs	r3, #12
   23e1c:	18fb      	adds	r3, r7, r3
   23e1e:	3201      	adds	r2, #1
   23e20:	801a      	strh	r2, [r3, #0]
   23e22:	4b07      	ldr	r3, [pc, #28]	; (23e40 <_eeprom_emulator_update_page_mapping+0x150>)
   23e24:	891b      	ldrh	r3, [r3, #8]
   23e26:	089b      	lsrs	r3, r3, #2
   23e28:	b29b      	uxth	r3, r3
   23e2a:	220c      	movs	r2, #12
   23e2c:	18ba      	adds	r2, r7, r2
   23e2e:	8812      	ldrh	r2, [r2, #0]
   23e30:	429a      	cmp	r2, r3
   23e32:	d3ab      	bcc.n	23d8c <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   23e34:	46c0      	nop			; (mov r8, r8)
   23e36:	46bd      	mov	sp, r7
   23e38:	b004      	add	sp, #16
   23e3a:	bd80      	pop	{r7, pc}
   23e3c:	00023c25 	.word	0x00023c25
   23e40:	2000061c 	.word	0x2000061c

00023e44 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   23e44:	b580      	push	{r7, lr}
   23e46:	b084      	sub	sp, #16
   23e48:	af00      	add	r7, sp, #0
   23e4a:	0002      	movs	r2, r0
   23e4c:	6039      	str	r1, [r7, #0]
   23e4e:	1dfb      	adds	r3, r7, #7
   23e50:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   23e52:	230e      	movs	r3, #14
   23e54:	18fb      	adds	r3, r7, r3
   23e56:	1dfa      	adds	r2, r7, #7
   23e58:	7812      	ldrb	r2, [r2, #0]
   23e5a:	0892      	lsrs	r2, r2, #2
   23e5c:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   23e5e:	230d      	movs	r3, #13
   23e60:	18fb      	adds	r3, r7, r3
   23e62:	1dfa      	adds	r2, r7, #7
   23e64:	7812      	ldrb	r2, [r2, #0]
   23e66:	2103      	movs	r1, #3
   23e68:	400a      	ands	r2, r1
   23e6a:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   23e6c:	230f      	movs	r3, #15
   23e6e:	18fb      	adds	r3, r7, r3
   23e70:	220d      	movs	r2, #13
   23e72:	18ba      	adds	r2, r7, r2
   23e74:	7812      	ldrb	r2, [r2, #0]
   23e76:	701a      	strb	r2, [r3, #0]
   23e78:	e023      	b.n	23ec2 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   23e7a:	230e      	movs	r3, #14
   23e7c:	18fb      	adds	r3, r7, r3
   23e7e:	781b      	ldrb	r3, [r3, #0]
   23e80:	009b      	lsls	r3, r3, #2
   23e82:	b2d9      	uxtb	r1, r3
   23e84:	230c      	movs	r3, #12
   23e86:	18fb      	adds	r3, r7, r3
   23e88:	220f      	movs	r2, #15
   23e8a:	18ba      	adds	r2, r7, r2
   23e8c:	7812      	ldrb	r2, [r2, #0]
   23e8e:	188a      	adds	r2, r1, r2
   23e90:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   23e92:	4b11      	ldr	r3, [pc, #68]	; (23ed8 <_eeprom_emulator_is_page_free_on_row+0x94>)
   23e94:	685a      	ldr	r2, [r3, #4]
   23e96:	230c      	movs	r3, #12
   23e98:	18fb      	adds	r3, r7, r3
   23e9a:	781b      	ldrb	r3, [r3, #0]
   23e9c:	019b      	lsls	r3, r3, #6
   23e9e:	18d3      	adds	r3, r2, r3
   23ea0:	781b      	ldrb	r3, [r3, #0]
   23ea2:	2bff      	cmp	r3, #255	; 0xff
   23ea4:	d106      	bne.n	23eb4 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   23ea6:	683b      	ldr	r3, [r7, #0]
   23ea8:	220c      	movs	r2, #12
   23eaa:	18ba      	adds	r2, r7, r2
   23eac:	7812      	ldrb	r2, [r2, #0]
   23eae:	701a      	strb	r2, [r3, #0]
			return true;
   23eb0:	2301      	movs	r3, #1
   23eb2:	e00c      	b.n	23ece <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   23eb4:	230f      	movs	r3, #15
   23eb6:	18fb      	adds	r3, r7, r3
   23eb8:	781a      	ldrb	r2, [r3, #0]
   23eba:	230f      	movs	r3, #15
   23ebc:	18fb      	adds	r3, r7, r3
   23ebe:	3201      	adds	r2, #1
   23ec0:	701a      	strb	r2, [r3, #0]
   23ec2:	230f      	movs	r3, #15
   23ec4:	18fb      	adds	r3, r7, r3
   23ec6:	781b      	ldrb	r3, [r3, #0]
   23ec8:	2b03      	cmp	r3, #3
   23eca:	d9d6      	bls.n	23e7a <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   23ecc:	2300      	movs	r3, #0
}
   23ece:	0018      	movs	r0, r3
   23ed0:	46bd      	mov	sp, r7
   23ed2:	b004      	add	sp, #16
   23ed4:	bd80      	pop	{r7, pc}
   23ed6:	46c0      	nop			; (mov r8, r8)
   23ed8:	2000061c 	.word	0x2000061c

00023edc <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   23edc:	b580      	push	{r7, lr}
   23ede:	b086      	sub	sp, #24
   23ee0:	af00      	add	r7, sp, #0
   23ee2:	603a      	str	r2, [r7, #0]
   23ee4:	1dfb      	adds	r3, r7, #7
   23ee6:	1c02      	adds	r2, r0, #0
   23ee8:	701a      	strb	r2, [r3, #0]
   23eea:	1dbb      	adds	r3, r7, #6
   23eec:	1c0a      	adds	r2, r1, #0
   23eee:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23ef0:	2314      	movs	r3, #20
   23ef2:	18fb      	adds	r3, r7, r3
   23ef4:	2200      	movs	r2, #0
   23ef6:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   23ef8:	4b69      	ldr	r3, [pc, #420]	; (240a0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23efa:	685b      	ldr	r3, [r3, #4]
   23efc:	1dfa      	adds	r2, r7, #7
   23efe:	7812      	ldrb	r2, [r2, #0]
   23f00:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   23f02:	189b      	adds	r3, r3, r2
   23f04:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   23f06:	693b      	ldr	r3, [r7, #16]
   23f08:	781a      	ldrb	r2, [r3, #0]
   23f0a:	2308      	movs	r3, #8
   23f0c:	18fb      	adds	r3, r7, r3
   23f0e:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   23f10:	1dfb      	adds	r3, r7, #7
   23f12:	781b      	ldrb	r3, [r3, #0]
   23f14:	009b      	lsls	r3, r3, #2
   23f16:	b2da      	uxtb	r2, r3
   23f18:	2308      	movs	r3, #8
   23f1a:	18fb      	adds	r3, r7, r3
   23f1c:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   23f1e:	693b      	ldr	r3, [r7, #16]
   23f20:	3340      	adds	r3, #64	; 0x40
   23f22:	781a      	ldrb	r2, [r3, #0]
   23f24:	2308      	movs	r3, #8
   23f26:	18fb      	adds	r3, r7, r3
   23f28:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   23f2a:	1dfb      	adds	r3, r7, #7
   23f2c:	781b      	ldrb	r3, [r3, #0]
   23f2e:	009b      	lsls	r3, r3, #2
   23f30:	b2db      	uxtb	r3, r3
   23f32:	3301      	adds	r3, #1
   23f34:	b2da      	uxtb	r2, r3
   23f36:	2308      	movs	r3, #8
   23f38:	18fb      	adds	r3, r7, r3
   23f3a:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   23f3c:	2317      	movs	r3, #23
   23f3e:	18fb      	adds	r3, r7, r3
   23f40:	2200      	movs	r2, #0
   23f42:	701a      	strb	r2, [r3, #0]
   23f44:	e03a      	b.n	23fbc <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23f46:	2316      	movs	r3, #22
   23f48:	18fb      	adds	r3, r7, r3
   23f4a:	2202      	movs	r2, #2
   23f4c:	701a      	strb	r2, [r3, #0]
   23f4e:	e029      	b.n	23fa4 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   23f50:	2317      	movs	r3, #23
   23f52:	18fb      	adds	r3, r7, r3
   23f54:	781a      	ldrb	r2, [r3, #0]
   23f56:	2308      	movs	r3, #8
   23f58:	18fb      	adds	r3, r7, r3
   23f5a:	0052      	lsls	r2, r2, #1
   23f5c:	5cd2      	ldrb	r2, [r2, r3]
   23f5e:	2316      	movs	r3, #22
   23f60:	18fb      	adds	r3, r7, r3
   23f62:	781b      	ldrb	r3, [r3, #0]
   23f64:	019b      	lsls	r3, r3, #6
   23f66:	6939      	ldr	r1, [r7, #16]
   23f68:	18cb      	adds	r3, r1, r3
   23f6a:	781b      	ldrb	r3, [r3, #0]
   23f6c:	429a      	cmp	r2, r3
   23f6e:	d112      	bne.n	23f96 <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   23f70:	2317      	movs	r3, #23
   23f72:	18fb      	adds	r3, r7, r3
   23f74:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   23f76:	1dfa      	adds	r2, r7, #7
   23f78:	7812      	ldrb	r2, [r2, #0]
   23f7a:	0092      	lsls	r2, r2, #2
   23f7c:	b2d1      	uxtb	r1, r2
   23f7e:	2216      	movs	r2, #22
   23f80:	18ba      	adds	r2, r7, r2
   23f82:	7812      	ldrb	r2, [r2, #0]
   23f84:	188a      	adds	r2, r1, r2
   23f86:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   23f88:	2208      	movs	r2, #8
   23f8a:	18ba      	adds	r2, r7, r2
   23f8c:	005b      	lsls	r3, r3, #1
   23f8e:	18d3      	adds	r3, r2, r3
   23f90:	3301      	adds	r3, #1
   23f92:	1c0a      	adds	r2, r1, #0
   23f94:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23f96:	2316      	movs	r3, #22
   23f98:	18fb      	adds	r3, r7, r3
   23f9a:	781a      	ldrb	r2, [r3, #0]
   23f9c:	2316      	movs	r3, #22
   23f9e:	18fb      	adds	r3, r7, r3
   23fa0:	3201      	adds	r2, #1
   23fa2:	701a      	strb	r2, [r3, #0]
   23fa4:	2316      	movs	r3, #22
   23fa6:	18fb      	adds	r3, r7, r3
   23fa8:	781b      	ldrb	r3, [r3, #0]
   23faa:	2b03      	cmp	r3, #3
   23fac:	d9d0      	bls.n	23f50 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   23fae:	2317      	movs	r3, #23
   23fb0:	18fb      	adds	r3, r7, r3
   23fb2:	781a      	ldrb	r2, [r3, #0]
   23fb4:	2317      	movs	r3, #23
   23fb6:	18fb      	adds	r3, r7, r3
   23fb8:	3201      	adds	r2, #1
   23fba:	701a      	strb	r2, [r3, #0]
   23fbc:	2317      	movs	r3, #23
   23fbe:	18fb      	adds	r3, r7, r3
   23fc0:	781b      	ldrb	r3, [r3, #0]
   23fc2:	2b01      	cmp	r3, #1
   23fc4:	d9bf      	bls.n	23f46 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   23fc6:	2315      	movs	r3, #21
   23fc8:	18fb      	adds	r3, r7, r3
   23fca:	2200      	movs	r2, #0
   23fcc:	701a      	strb	r2, [r3, #0]
   23fce:	e051      	b.n	24074 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   23fd0:	4b33      	ldr	r3, [pc, #204]	; (240a0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23fd2:	2287      	movs	r2, #135	; 0x87
   23fd4:	5c9b      	ldrb	r3, [r3, r2]
   23fd6:	009a      	lsls	r2, r3, #2
   23fd8:	2315      	movs	r3, #21
   23fda:	18fb      	adds	r3, r7, r3
   23fdc:	781b      	ldrb	r3, [r3, #0]
   23fde:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   23fe0:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23fe2:	4b30      	ldr	r3, [pc, #192]	; (240a4 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   23fe4:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   23fe6:	2315      	movs	r3, #21
   23fe8:	18fb      	adds	r3, r7, r3
   23fea:	781a      	ldrb	r2, [r3, #0]
   23fec:	2308      	movs	r3, #8
   23fee:	18fb      	adds	r3, r7, r3
   23ff0:	0052      	lsls	r2, r2, #1
   23ff2:	5cd3      	ldrb	r3, [r2, r3]
   23ff4:	1dba      	adds	r2, r7, #6
   23ff6:	7812      	ldrb	r2, [r2, #0]
   23ff8:	429a      	cmp	r2, r3
   23ffa:	d10d      	bne.n	24018 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   23ffc:	4b28      	ldr	r3, [pc, #160]	; (240a0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23ffe:	1dba      	adds	r2, r7, #6
   24000:	2188      	movs	r1, #136	; 0x88
   24002:	7812      	ldrb	r2, [r2, #0]
   24004:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   24006:	4b26      	ldr	r3, [pc, #152]	; (240a0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   24008:	228c      	movs	r2, #140	; 0x8c
   2400a:	6839      	ldr	r1, [r7, #0]
   2400c:	189b      	adds	r3, r3, r2
   2400e:	223c      	movs	r2, #60	; 0x3c
   24010:	0018      	movs	r0, r3
   24012:	4b25      	ldr	r3, [pc, #148]	; (240a8 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   24014:	4798      	blx	r3
   24016:	e00e      	b.n	24036 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   24018:	2315      	movs	r3, #21
   2401a:	18fb      	adds	r3, r7, r3
   2401c:	781b      	ldrb	r3, [r3, #0]
   2401e:	2208      	movs	r2, #8
   24020:	18ba      	adds	r2, r7, r2
   24022:	005b      	lsls	r3, r3, #1
   24024:	18d3      	adds	r3, r2, r3
   24026:	3301      	adds	r3, #1
   24028:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   2402a:	b29b      	uxth	r3, r3
   2402c:	4a1f      	ldr	r2, [pc, #124]	; (240ac <_eeprom_emulator_move_data_to_spare+0x1d0>)
   2402e:	0011      	movs	r1, r2
   24030:	0018      	movs	r0, r3
   24032:	4b1f      	ldr	r3, [pc, #124]	; (240b0 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   24034:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   24036:	68fb      	ldr	r3, [r7, #12]
   24038:	b29b      	uxth	r3, r3
   2403a:	4a1c      	ldr	r2, [pc, #112]	; (240ac <_eeprom_emulator_move_data_to_spare+0x1d0>)
   2403c:	0011      	movs	r1, r2
   2403e:	0018      	movs	r0, r3
   24040:	4b1c      	ldr	r3, [pc, #112]	; (240b4 <_eeprom_emulator_move_data_to_spare+0x1d8>)
   24042:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   24044:	2315      	movs	r3, #21
   24046:	18fb      	adds	r3, r7, r3
   24048:	781a      	ldrb	r2, [r3, #0]
   2404a:	2308      	movs	r3, #8
   2404c:	18fb      	adds	r3, r7, r3
   2404e:	0052      	lsls	r2, r2, #1
   24050:	5cd3      	ldrb	r3, [r2, r3]
   24052:	0019      	movs	r1, r3
   24054:	68fb      	ldr	r3, [r7, #12]
   24056:	b2da      	uxtb	r2, r3
   24058:	4b11      	ldr	r3, [pc, #68]	; (240a0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2405a:	185b      	adds	r3, r3, r1
   2405c:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   2405e:	4b10      	ldr	r3, [pc, #64]	; (240a0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   24060:	22c8      	movs	r2, #200	; 0xc8
   24062:	2101      	movs	r1, #1
   24064:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   24066:	2315      	movs	r3, #21
   24068:	18fb      	adds	r3, r7, r3
   2406a:	781a      	ldrb	r2, [r3, #0]
   2406c:	2315      	movs	r3, #21
   2406e:	18fb      	adds	r3, r7, r3
   24070:	3201      	adds	r2, #1
   24072:	701a      	strb	r2, [r3, #0]
   24074:	2315      	movs	r3, #21
   24076:	18fb      	adds	r3, r7, r3
   24078:	781b      	ldrb	r3, [r3, #0]
   2407a:	2b01      	cmp	r3, #1
   2407c:	d9a8      	bls.n	23fd0 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   2407e:	1dfb      	adds	r3, r7, #7
   24080:	781b      	ldrb	r3, [r3, #0]
   24082:	0018      	movs	r0, r3
   24084:	4b0c      	ldr	r3, [pc, #48]	; (240b8 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   24086:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   24088:	4b05      	ldr	r3, [pc, #20]	; (240a0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   2408a:	1dfa      	adds	r2, r7, #7
   2408c:	2187      	movs	r1, #135	; 0x87
   2408e:	7812      	ldrb	r2, [r2, #0]
   24090:	545a      	strb	r2, [r3, r1]

	return error_code;
   24092:	2314      	movs	r3, #20
   24094:	18fb      	adds	r3, r7, r3
   24096:	781b      	ldrb	r3, [r3, #0]
}
   24098:	0018      	movs	r0, r3
   2409a:	46bd      	mov	sp, r7
   2409c:	b006      	add	sp, #24
   2409e:	bd80      	pop	{r7, pc}
   240a0:	2000061c 	.word	0x2000061c
   240a4:	000244d9 	.word	0x000244d9
   240a8:	00029725 	.word	0x00029725
   240ac:	200006a4 	.word	0x200006a4
   240b0:	00023a31 	.word	0x00023a31
   240b4:	00023995 	.word	0x00023995
   240b8:	0002394d 	.word	0x0002394d

000240bc <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   240bc:	b590      	push	{r4, r7, lr}
   240be:	b095      	sub	sp, #84	; 0x54
   240c0:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   240c2:	2340      	movs	r3, #64	; 0x40
   240c4:	18fb      	adds	r3, r7, r3
   240c6:	4a29      	ldr	r2, [pc, #164]	; (2416c <_eeprom_emulator_create_master_page+0xb0>)
   240c8:	ca13      	ldmia	r2!, {r0, r1, r4}
   240ca:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   240cc:	003b      	movs	r3, r7
   240ce:	2240      	movs	r2, #64	; 0x40
   240d0:	21ff      	movs	r1, #255	; 0xff
   240d2:	0018      	movs	r0, r3
   240d4:	4b26      	ldr	r3, [pc, #152]	; (24170 <_eeprom_emulator_create_master_page+0xb4>)
   240d6:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   240d8:	234f      	movs	r3, #79	; 0x4f
   240da:	18fb      	adds	r3, r7, r3
   240dc:	2200      	movs	r2, #0
   240de:	701a      	strb	r2, [r3, #0]
   240e0:	e013      	b.n	2410a <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   240e2:	234f      	movs	r3, #79	; 0x4f
   240e4:	18fb      	adds	r3, r7, r3
   240e6:	781a      	ldrb	r2, [r3, #0]
   240e8:	234f      	movs	r3, #79	; 0x4f
   240ea:	18fb      	adds	r3, r7, r3
   240ec:	7819      	ldrb	r1, [r3, #0]
   240ee:	2340      	movs	r3, #64	; 0x40
   240f0:	18fb      	adds	r3, r7, r3
   240f2:	0089      	lsls	r1, r1, #2
   240f4:	58c9      	ldr	r1, [r1, r3]
   240f6:	003b      	movs	r3, r7
   240f8:	0092      	lsls	r2, r2, #2
   240fa:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   240fc:	234f      	movs	r3, #79	; 0x4f
   240fe:	18fb      	adds	r3, r7, r3
   24100:	781a      	ldrb	r2, [r3, #0]
   24102:	234f      	movs	r3, #79	; 0x4f
   24104:	18fb      	adds	r3, r7, r3
   24106:	3201      	adds	r2, #1
   24108:	701a      	strb	r2, [r3, #0]
   2410a:	234f      	movs	r3, #79	; 0x4f
   2410c:	18fb      	adds	r3, r7, r3
   2410e:	781b      	ldrb	r3, [r3, #0]
   24110:	2b02      	cmp	r3, #2
   24112:	d9e6      	bls.n	240e2 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   24114:	003b      	movs	r3, r7
   24116:	2201      	movs	r2, #1
   24118:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   2411a:	003b      	movs	r3, r7
   2411c:	2201      	movs	r2, #1
   2411e:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   24120:	003b      	movs	r3, r7
   24122:	2200      	movs	r2, #0
   24124:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   24126:	003b      	movs	r3, r7
   24128:	2200      	movs	r2, #0
   2412a:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   2412c:	4b11      	ldr	r3, [pc, #68]	; (24174 <_eeprom_emulator_create_master_page+0xb8>)
   2412e:	891b      	ldrh	r3, [r3, #8]
   24130:	3b01      	subs	r3, #1
   24132:	2b00      	cmp	r3, #0
   24134:	da00      	bge.n	24138 <_eeprom_emulator_create_master_page+0x7c>
   24136:	3303      	adds	r3, #3
   24138:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   2413a:	b2db      	uxtb	r3, r3
   2413c:	0018      	movs	r0, r3
   2413e:	4b0e      	ldr	r3, [pc, #56]	; (24178 <_eeprom_emulator_create_master_page+0xbc>)
   24140:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   24142:	4b0c      	ldr	r3, [pc, #48]	; (24174 <_eeprom_emulator_create_master_page+0xb8>)
   24144:	891b      	ldrh	r3, [r3, #8]
   24146:	3b01      	subs	r3, #1
   24148:	b29b      	uxth	r3, r3
   2414a:	003a      	movs	r2, r7
   2414c:	0011      	movs	r1, r2
   2414e:	0018      	movs	r0, r3
   24150:	4b0a      	ldr	r3, [pc, #40]	; (2417c <_eeprom_emulator_create_master_page+0xc0>)
   24152:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   24154:	4b07      	ldr	r3, [pc, #28]	; (24174 <_eeprom_emulator_create_master_page+0xb8>)
   24156:	891b      	ldrh	r3, [r3, #8]
   24158:	3b01      	subs	r3, #1
   2415a:	b29b      	uxth	r3, r3
   2415c:	0018      	movs	r0, r3
   2415e:	4b08      	ldr	r3, [pc, #32]	; (24180 <_eeprom_emulator_create_master_page+0xc4>)
   24160:	4798      	blx	r3
}
   24162:	46c0      	nop			; (mov r8, r8)
   24164:	46bd      	mov	sp, r7
   24166:	b015      	add	sp, #84	; 0x54
   24168:	bd90      	pop	{r4, r7, pc}
   2416a:	46c0      	nop			; (mov r8, r8)
   2416c:	0002b73c 	.word	0x0002b73c
   24170:	0002975b 	.word	0x0002975b
   24174:	2000061c 	.word	0x2000061c
   24178:	0002394d 	.word	0x0002394d
   2417c:	00023995 	.word	0x00023995
   24180:	000239e5 	.word	0x000239e5

00024184 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   24184:	b590      	push	{r4, r7, lr}
   24186:	b095      	sub	sp, #84	; 0x54
   24188:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   2418a:	2340      	movs	r3, #64	; 0x40
   2418c:	18fb      	adds	r3, r7, r3
   2418e:	4a22      	ldr	r2, [pc, #136]	; (24218 <_eeprom_emulator_verify_master_page+0x94>)
   24190:	ca13      	ldmia	r2!, {r0, r1, r4}
   24192:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   24194:	4b21      	ldr	r3, [pc, #132]	; (2421c <_eeprom_emulator_verify_master_page+0x98>)
   24196:	891b      	ldrh	r3, [r3, #8]
   24198:	3b01      	subs	r3, #1
   2419a:	b29b      	uxth	r3, r3
   2419c:	003a      	movs	r2, r7
   2419e:	0011      	movs	r1, r2
   241a0:	0018      	movs	r0, r3
   241a2:	4b1f      	ldr	r3, [pc, #124]	; (24220 <_eeprom_emulator_verify_master_page+0x9c>)
   241a4:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   241a6:	234f      	movs	r3, #79	; 0x4f
   241a8:	18fb      	adds	r3, r7, r3
   241aa:	2200      	movs	r2, #0
   241ac:	701a      	strb	r2, [r3, #0]
   241ae:	e017      	b.n	241e0 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   241b0:	234f      	movs	r3, #79	; 0x4f
   241b2:	18fb      	adds	r3, r7, r3
   241b4:	781a      	ldrb	r2, [r3, #0]
   241b6:	003b      	movs	r3, r7
   241b8:	0092      	lsls	r2, r2, #2
   241ba:	58d2      	ldr	r2, [r2, r3]
   241bc:	234f      	movs	r3, #79	; 0x4f
   241be:	18fb      	adds	r3, r7, r3
   241c0:	7819      	ldrb	r1, [r3, #0]
   241c2:	2340      	movs	r3, #64	; 0x40
   241c4:	18fb      	adds	r3, r7, r3
   241c6:	0089      	lsls	r1, r1, #2
   241c8:	58cb      	ldr	r3, [r1, r3]
   241ca:	429a      	cmp	r2, r3
   241cc:	d001      	beq.n	241d2 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   241ce:	231a      	movs	r3, #26
   241d0:	e01e      	b.n	24210 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   241d2:	234f      	movs	r3, #79	; 0x4f
   241d4:	18fb      	adds	r3, r7, r3
   241d6:	781a      	ldrb	r2, [r3, #0]
   241d8:	234f      	movs	r3, #79	; 0x4f
   241da:	18fb      	adds	r3, r7, r3
   241dc:	3201      	adds	r2, #1
   241de:	701a      	strb	r2, [r3, #0]
   241e0:	234f      	movs	r3, #79	; 0x4f
   241e2:	18fb      	adds	r3, r7, r3
   241e4:	781b      	ldrb	r3, [r3, #0]
   241e6:	2b02      	cmp	r3, #2
   241e8:	d9e2      	bls.n	241b0 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   241ea:	003b      	movs	r3, r7
   241ec:	7bdb      	ldrb	r3, [r3, #15]
   241ee:	2b01      	cmp	r3, #1
   241f0:	d001      	beq.n	241f6 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   241f2:	2310      	movs	r3, #16
   241f4:	e00c      	b.n	24210 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   241f6:	003b      	movs	r3, r7
   241f8:	7b1b      	ldrb	r3, [r3, #12]
   241fa:	2b01      	cmp	r3, #1
   241fc:	d001      	beq.n	24202 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   241fe:	2310      	movs	r3, #16
   24200:	e006      	b.n	24210 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   24202:	003b      	movs	r3, r7
   24204:	7b5b      	ldrb	r3, [r3, #13]
   24206:	2b00      	cmp	r3, #0
   24208:	d001      	beq.n	2420e <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   2420a:	2310      	movs	r3, #16
   2420c:	e000      	b.n	24210 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   2420e:	2300      	movs	r3, #0
}
   24210:	0018      	movs	r0, r3
   24212:	46bd      	mov	sp, r7
   24214:	b015      	add	sp, #84	; 0x54
   24216:	bd90      	pop	{r4, r7, pc}
   24218:	0002b73c 	.word	0x0002b73c
   2421c:	2000061c 	.word	0x2000061c
   24220:	00023a31 	.word	0x00023a31

00024224 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   24224:	b590      	push	{r4, r7, lr}
   24226:	b087      	sub	sp, #28
   24228:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   2422a:	2317      	movs	r3, #23
   2422c:	18fb      	adds	r3, r7, r3
   2422e:	2200      	movs	r2, #0
   24230:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   24232:	2310      	movs	r3, #16
   24234:	18fb      	adds	r3, r7, r3
   24236:	0018      	movs	r0, r3
   24238:	4b2e      	ldr	r3, [pc, #184]	; (242f4 <eeprom_emulator_init+0xd0>)
   2423a:	4798      	blx	r3
	config.manual_page_write = true;
   2423c:	2310      	movs	r3, #16
   2423e:	18fb      	adds	r3, r7, r3
   24240:	2201      	movs	r2, #1
   24242:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   24244:	2317      	movs	r3, #23
   24246:	18fc      	adds	r4, r7, r3
   24248:	2310      	movs	r3, #16
   2424a:	18fb      	adds	r3, r7, r3
   2424c:	0018      	movs	r0, r3
   2424e:	4b2a      	ldr	r3, [pc, #168]	; (242f8 <eeprom_emulator_init+0xd4>)
   24250:	4798      	blx	r3
   24252:	0003      	movs	r3, r0
   24254:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   24256:	2317      	movs	r3, #23
   24258:	18fb      	adds	r3, r7, r3
   2425a:	781b      	ldrb	r3, [r3, #0]
   2425c:	2b05      	cmp	r3, #5
   2425e:	d0f1      	beq.n	24244 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   24260:	1d3b      	adds	r3, r7, #4
   24262:	0018      	movs	r0, r3
   24264:	4b25      	ldr	r3, [pc, #148]	; (242fc <eeprom_emulator_init+0xd8>)
   24266:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   24268:	1d3b      	adds	r3, r7, #4
   2426a:	685b      	ldr	r3, [r3, #4]
   2426c:	2b0b      	cmp	r3, #11
   2426e:	d801      	bhi.n	24274 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   24270:	2316      	movs	r3, #22
   24272:	e03b      	b.n	242ec <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   24274:	1d3b      	adds	r3, r7, #4
   24276:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   24278:	b29a      	uxth	r2, r3
   2427a:	4b21      	ldr	r3, [pc, #132]	; (24300 <eeprom_emulator_init+0xdc>)
   2427c:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   2427e:	1d3b      	adds	r3, r7, #4
   24280:	685b      	ldr	r3, [r3, #4]
   24282:	3b08      	subs	r3, #8
   24284:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   24286:	b2da      	uxtb	r2, r3
   24288:	4b1d      	ldr	r3, [pc, #116]	; (24300 <eeprom_emulator_init+0xdc>)
   2428a:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   2428c:	4b1c      	ldr	r3, [pc, #112]	; (24300 <eeprom_emulator_init+0xdc>)
   2428e:	891b      	ldrh	r3, [r3, #8]
   24290:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   24292:	0013      	movs	r3, r2
   24294:	069b      	lsls	r3, r3, #26
   24296:	1a9b      	subs	r3, r3, r2
   24298:	019b      	lsls	r3, r3, #6
   2429a:	2280      	movs	r2, #128	; 0x80
   2429c:	02d2      	lsls	r2, r2, #11
   2429e:	4694      	mov	ip, r2
   242a0:	4463      	add	r3, ip
   242a2:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   242a4:	4b16      	ldr	r3, [pc, #88]	; (24300 <eeprom_emulator_init+0xdc>)
   242a6:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   242a8:	4b15      	ldr	r3, [pc, #84]	; (24300 <eeprom_emulator_init+0xdc>)
   242aa:	22c8      	movs	r2, #200	; 0xc8
   242ac:	2100      	movs	r1, #0
   242ae:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   242b0:	4b14      	ldr	r3, [pc, #80]	; (24304 <eeprom_emulator_init+0xe0>)
   242b2:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   242b4:	4b12      	ldr	r3, [pc, #72]	; (24300 <eeprom_emulator_init+0xdc>)
   242b6:	2287      	movs	r2, #135	; 0x87
   242b8:	5c9b      	ldrb	r3, [r3, r2]
   242ba:	2b3f      	cmp	r3, #63	; 0x3f
   242bc:	d101      	bne.n	242c2 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   242be:	231a      	movs	r3, #26
   242c0:	e014      	b.n	242ec <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   242c2:	2317      	movs	r3, #23
   242c4:	18fc      	adds	r4, r7, r3
   242c6:	4b10      	ldr	r3, [pc, #64]	; (24308 <eeprom_emulator_init+0xe4>)
   242c8:	4798      	blx	r3
   242ca:	0003      	movs	r3, r0
   242cc:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   242ce:	2317      	movs	r3, #23
   242d0:	18fb      	adds	r3, r7, r3
   242d2:	781b      	ldrb	r3, [r3, #0]
   242d4:	2b00      	cmp	r3, #0
   242d6:	d003      	beq.n	242e0 <eeprom_emulator_init+0xbc>
		return error_code;
   242d8:	2317      	movs	r3, #23
   242da:	18fb      	adds	r3, r7, r3
   242dc:	781b      	ldrb	r3, [r3, #0]
   242de:	e005      	b.n	242ec <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   242e0:	4b07      	ldr	r3, [pc, #28]	; (24300 <eeprom_emulator_init+0xdc>)
   242e2:	2201      	movs	r2, #1
   242e4:	701a      	strb	r2, [r3, #0]

	return error_code;
   242e6:	2317      	movs	r3, #23
   242e8:	18fb      	adds	r3, r7, r3
   242ea:	781b      	ldrb	r3, [r3, #0]
}
   242ec:	0018      	movs	r0, r3
   242ee:	46bd      	mov	sp, r7
   242f0:	b007      	add	sp, #28
   242f2:	bd90      	pop	{r4, r7, pc}
   242f4:	00023911 	.word	0x00023911
   242f8:	000232ed 	.word	0x000232ed
   242fc:	000237cd 	.word	0x000237cd
   24300:	2000061c 	.word	0x2000061c
   24304:	00023cf1 	.word	0x00023cf1
   24308:	00024185 	.word	0x00024185

0002430c <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   2430c:	b580      	push	{r7, lr}
   2430e:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   24310:	4b04      	ldr	r3, [pc, #16]	; (24324 <eeprom_emulator_erase_memory+0x18>)
   24312:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   24314:	4b04      	ldr	r3, [pc, #16]	; (24328 <eeprom_emulator_erase_memory+0x1c>)
   24316:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   24318:	4b04      	ldr	r3, [pc, #16]	; (2432c <eeprom_emulator_erase_memory+0x20>)
   2431a:	4798      	blx	r3
}
   2431c:	46c0      	nop			; (mov r8, r8)
   2431e:	46bd      	mov	sp, r7
   24320:	bd80      	pop	{r7, pc}
   24322:	46c0      	nop			; (mov r8, r8)
   24324:	00023a81 	.word	0x00023a81
   24328:	000240bd 	.word	0x000240bd
   2432c:	00023cf1 	.word	0x00023cf1

00024330 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   24330:	b590      	push	{r4, r7, lr}
   24332:	b085      	sub	sp, #20
   24334:	af00      	add	r7, sp, #0
   24336:	0002      	movs	r2, r0
   24338:	6039      	str	r1, [r7, #0]
   2433a:	1dfb      	adds	r3, r7, #7
   2433c:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   2433e:	4b38      	ldr	r3, [pc, #224]	; (24420 <eeprom_emulator_write_page+0xf0>)
   24340:	781b      	ldrb	r3, [r3, #0]
   24342:	2201      	movs	r2, #1
   24344:	4053      	eors	r3, r2
   24346:	b2db      	uxtb	r3, r3
   24348:	2b00      	cmp	r3, #0
   2434a:	d001      	beq.n	24350 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   2434c:	231f      	movs	r3, #31
   2434e:	e063      	b.n	24418 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   24350:	4b33      	ldr	r3, [pc, #204]	; (24420 <eeprom_emulator_write_page+0xf0>)
   24352:	7a9b      	ldrb	r3, [r3, #10]
   24354:	1dfa      	adds	r2, r7, #7
   24356:	7812      	ldrb	r2, [r2, #0]
   24358:	429a      	cmp	r2, r3
   2435a:	d301      	bcc.n	24360 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   2435c:	2318      	movs	r3, #24
   2435e:	e05b      	b.n	24418 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   24360:	4b2f      	ldr	r3, [pc, #188]	; (24420 <eeprom_emulator_write_page+0xf0>)
   24362:	22c8      	movs	r2, #200	; 0xc8
   24364:	5c9b      	ldrb	r3, [r3, r2]
   24366:	2b00      	cmp	r3, #0
   24368:	d008      	beq.n	2437c <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   2436a:	4b2d      	ldr	r3, [pc, #180]	; (24420 <eeprom_emulator_write_page+0xf0>)
   2436c:	2288      	movs	r2, #136	; 0x88
   2436e:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   24370:	1dfa      	adds	r2, r7, #7
   24372:	7812      	ldrb	r2, [r2, #0]
   24374:	429a      	cmp	r2, r3
   24376:	d001      	beq.n	2437c <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   24378:	4b2a      	ldr	r3, [pc, #168]	; (24424 <eeprom_emulator_write_page+0xf4>)
   2437a:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   2437c:	230e      	movs	r3, #14
   2437e:	18fb      	adds	r3, r7, r3
   24380:	2200      	movs	r2, #0
   24382:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   24384:	1dfb      	adds	r3, r7, #7
   24386:	781b      	ldrb	r3, [r3, #0]
   24388:	4a25      	ldr	r2, [pc, #148]	; (24420 <eeprom_emulator_write_page+0xf0>)
   2438a:	18d3      	adds	r3, r2, r3
   2438c:	7adb      	ldrb	r3, [r3, #11]
   2438e:	220f      	movs	r2, #15
   24390:	18bc      	adds	r4, r7, r2
   24392:	220e      	movs	r2, #14
   24394:	18ba      	adds	r2, r7, r2
   24396:	0011      	movs	r1, r2
   24398:	0018      	movs	r0, r3
   2439a:	4b23      	ldr	r3, [pc, #140]	; (24428 <eeprom_emulator_write_page+0xf8>)
   2439c:	4798      	blx	r3
   2439e:	0003      	movs	r3, r0
   243a0:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   243a2:	230f      	movs	r3, #15
   243a4:	18fb      	adds	r3, r7, r3
   243a6:	781b      	ldrb	r3, [r3, #0]
   243a8:	2201      	movs	r2, #1
   243aa:	4053      	eors	r3, r2
   243ac:	b2db      	uxtb	r3, r3
   243ae:	2b00      	cmp	r3, #0
   243b0:	d00e      	beq.n	243d0 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   243b2:	1dfb      	adds	r3, r7, #7
   243b4:	781b      	ldrb	r3, [r3, #0]
   243b6:	4a1a      	ldr	r2, [pc, #104]	; (24420 <eeprom_emulator_write_page+0xf0>)
   243b8:	18d3      	adds	r3, r2, r3
   243ba:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   243bc:	089b      	lsrs	r3, r3, #2
   243be:	b2d8      	uxtb	r0, r3
   243c0:	683a      	ldr	r2, [r7, #0]
   243c2:	1dfb      	adds	r3, r7, #7
   243c4:	781b      	ldrb	r3, [r3, #0]
   243c6:	0019      	movs	r1, r3
   243c8:	4b18      	ldr	r3, [pc, #96]	; (2442c <eeprom_emulator_write_page+0xfc>)
   243ca:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   243cc:	2300      	movs	r3, #0
   243ce:	e023      	b.n	24418 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   243d0:	4b13      	ldr	r3, [pc, #76]	; (24420 <eeprom_emulator_write_page+0xf0>)
   243d2:	1dfa      	adds	r2, r7, #7
   243d4:	2188      	movs	r1, #136	; 0x88
   243d6:	7812      	ldrb	r2, [r2, #0]
   243d8:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   243da:	4b11      	ldr	r3, [pc, #68]	; (24420 <eeprom_emulator_write_page+0xf0>)
   243dc:	228c      	movs	r2, #140	; 0x8c
   243de:	6839      	ldr	r1, [r7, #0]
   243e0:	189b      	adds	r3, r3, r2
   243e2:	223c      	movs	r2, #60	; 0x3c
   243e4:	0018      	movs	r0, r3
   243e6:	4b12      	ldr	r3, [pc, #72]	; (24430 <eeprom_emulator_write_page+0x100>)
   243e8:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   243ea:	230e      	movs	r3, #14
   243ec:	18fb      	adds	r3, r7, r3
   243ee:	781b      	ldrb	r3, [r3, #0]
   243f0:	b29b      	uxth	r3, r3
   243f2:	4a10      	ldr	r2, [pc, #64]	; (24434 <eeprom_emulator_write_page+0x104>)
   243f4:	0011      	movs	r1, r2
   243f6:	0018      	movs	r0, r3
   243f8:	4b0f      	ldr	r3, [pc, #60]	; (24438 <eeprom_emulator_write_page+0x108>)
   243fa:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   243fc:	1dfb      	adds	r3, r7, #7
   243fe:	781b      	ldrb	r3, [r3, #0]
   24400:	220e      	movs	r2, #14
   24402:	18ba      	adds	r2, r7, r2
   24404:	7811      	ldrb	r1, [r2, #0]
   24406:	4a06      	ldr	r2, [pc, #24]	; (24420 <eeprom_emulator_write_page+0xf0>)
   24408:	18d3      	adds	r3, r2, r3
   2440a:	1c0a      	adds	r2, r1, #0
   2440c:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   2440e:	4b04      	ldr	r3, [pc, #16]	; (24420 <eeprom_emulator_write_page+0xf0>)
   24410:	22c8      	movs	r2, #200	; 0xc8
   24412:	2101      	movs	r1, #1
   24414:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   24416:	2300      	movs	r3, #0
}
   24418:	0018      	movs	r0, r3
   2441a:	46bd      	mov	sp, r7
   2441c:	b005      	add	sp, #20
   2441e:	bd90      	pop	{r4, r7, pc}
   24420:	2000061c 	.word	0x2000061c
   24424:	000244d9 	.word	0x000244d9
   24428:	00023e45 	.word	0x00023e45
   2442c:	00023edd 	.word	0x00023edd
   24430:	00029725 	.word	0x00029725
   24434:	200006a4 	.word	0x200006a4
   24438:	00023995 	.word	0x00023995

0002443c <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   2443c:	b580      	push	{r7, lr}
   2443e:	b092      	sub	sp, #72	; 0x48
   24440:	af00      	add	r7, sp, #0
   24442:	0002      	movs	r2, r0
   24444:	6039      	str	r1, [r7, #0]
   24446:	1dfb      	adds	r3, r7, #7
   24448:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   2444a:	4b20      	ldr	r3, [pc, #128]	; (244cc <eeprom_emulator_read_page+0x90>)
   2444c:	781b      	ldrb	r3, [r3, #0]
   2444e:	2201      	movs	r2, #1
   24450:	4053      	eors	r3, r2
   24452:	b2db      	uxtb	r3, r3
   24454:	2b00      	cmp	r3, #0
   24456:	d001      	beq.n	2445c <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   24458:	231f      	movs	r3, #31
   2445a:	e033      	b.n	244c4 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   2445c:	4b1b      	ldr	r3, [pc, #108]	; (244cc <eeprom_emulator_read_page+0x90>)
   2445e:	7a9b      	ldrb	r3, [r3, #10]
   24460:	1dfa      	adds	r2, r7, #7
   24462:	7812      	ldrb	r2, [r2, #0]
   24464:	429a      	cmp	r2, r3
   24466:	d301      	bcc.n	2446c <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   24468:	2318      	movs	r3, #24
   2446a:	e02b      	b.n	244c4 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   2446c:	4b17      	ldr	r3, [pc, #92]	; (244cc <eeprom_emulator_read_page+0x90>)
   2446e:	22c8      	movs	r2, #200	; 0xc8
   24470:	5c9b      	ldrb	r3, [r3, r2]
   24472:	2b00      	cmp	r3, #0
   24474:	d010      	beq.n	24498 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   24476:	4b15      	ldr	r3, [pc, #84]	; (244cc <eeprom_emulator_read_page+0x90>)
   24478:	2288      	movs	r2, #136	; 0x88
   2447a:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   2447c:	1dfa      	adds	r2, r7, #7
   2447e:	7812      	ldrb	r2, [r2, #0]
   24480:	429a      	cmp	r2, r3
   24482:	d109      	bne.n	24498 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   24484:	6839      	ldr	r1, [r7, #0]
   24486:	4b11      	ldr	r3, [pc, #68]	; (244cc <eeprom_emulator_read_page+0x90>)
   24488:	228c      	movs	r2, #140	; 0x8c
   2448a:	0008      	movs	r0, r1
   2448c:	189b      	adds	r3, r3, r2
   2448e:	223c      	movs	r2, #60	; 0x3c
   24490:	0019      	movs	r1, r3
   24492:	4b0f      	ldr	r3, [pc, #60]	; (244d0 <eeprom_emulator_read_page+0x94>)
   24494:	4798      	blx	r3
   24496:	e014      	b.n	244c2 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   24498:	1dfb      	adds	r3, r7, #7
   2449a:	781b      	ldrb	r3, [r3, #0]
   2449c:	4a0b      	ldr	r2, [pc, #44]	; (244cc <eeprom_emulator_read_page+0x90>)
   2449e:	18d3      	adds	r3, r2, r3
   244a0:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   244a2:	b29b      	uxth	r3, r3
   244a4:	2208      	movs	r2, #8
   244a6:	18ba      	adds	r2, r7, r2
   244a8:	0011      	movs	r1, r2
   244aa:	0018      	movs	r0, r3
   244ac:	4b09      	ldr	r3, [pc, #36]	; (244d4 <eeprom_emulator_read_page+0x98>)
   244ae:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   244b0:	683a      	ldr	r2, [r7, #0]
   244b2:	2308      	movs	r3, #8
   244b4:	18fb      	adds	r3, r7, r3
   244b6:	0010      	movs	r0, r2
   244b8:	3304      	adds	r3, #4
   244ba:	223c      	movs	r2, #60	; 0x3c
   244bc:	0019      	movs	r1, r3
   244be:	4b04      	ldr	r3, [pc, #16]	; (244d0 <eeprom_emulator_read_page+0x94>)
   244c0:	4798      	blx	r3
	}

	return STATUS_OK;
   244c2:	2300      	movs	r3, #0
}
   244c4:	0018      	movs	r0, r3
   244c6:	46bd      	mov	sp, r7
   244c8:	b012      	add	sp, #72	; 0x48
   244ca:	bd80      	pop	{r7, pc}
   244cc:	2000061c 	.word	0x2000061c
   244d0:	00029725 	.word	0x00029725
   244d4:	00023a31 	.word	0x00023a31

000244d8 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   244d8:	b580      	push	{r7, lr}
   244da:	b082      	sub	sp, #8
   244dc:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   244de:	1dfb      	adds	r3, r7, #7
   244e0:	2200      	movs	r2, #0
   244e2:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   244e4:	4b10      	ldr	r3, [pc, #64]	; (24528 <eeprom_emulator_commit_page_buffer+0x50>)
   244e6:	22c8      	movs	r2, #200	; 0xc8
   244e8:	5c9b      	ldrb	r3, [r3, r2]
   244ea:	2201      	movs	r2, #1
   244ec:	4053      	eors	r3, r2
   244ee:	b2db      	uxtb	r3, r3
   244f0:	2b00      	cmp	r3, #0
   244f2:	d001      	beq.n	244f8 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   244f4:	2300      	movs	r3, #0
   244f6:	e013      	b.n	24520 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   244f8:	1dbb      	adds	r3, r7, #6
   244fa:	4a0b      	ldr	r2, [pc, #44]	; (24528 <eeprom_emulator_commit_page_buffer+0x50>)
   244fc:	2188      	movs	r1, #136	; 0x88
   244fe:	5c52      	ldrb	r2, [r2, r1]
   24500:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   24502:	1dbb      	adds	r3, r7, #6
   24504:	781b      	ldrb	r3, [r3, #0]
   24506:	4a08      	ldr	r2, [pc, #32]	; (24528 <eeprom_emulator_commit_page_buffer+0x50>)
   24508:	18d3      	adds	r3, r2, r3
   2450a:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   2450c:	b29b      	uxth	r3, r3
   2450e:	0018      	movs	r0, r3
   24510:	4b06      	ldr	r3, [pc, #24]	; (2452c <eeprom_emulator_commit_page_buffer+0x54>)
   24512:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   24514:	4b04      	ldr	r3, [pc, #16]	; (24528 <eeprom_emulator_commit_page_buffer+0x50>)
   24516:	22c8      	movs	r2, #200	; 0xc8
   24518:	2100      	movs	r1, #0
   2451a:	5499      	strb	r1, [r3, r2]

	return error_code;
   2451c:	1dfb      	adds	r3, r7, #7
   2451e:	781b      	ldrb	r3, [r3, #0]
}
   24520:	0018      	movs	r0, r3
   24522:	46bd      	mov	sp, r7
   24524:	b002      	add	sp, #8
   24526:	bd80      	pop	{r7, pc}
   24528:	2000061c 	.word	0x2000061c
   2452c:	000239e5 	.word	0x000239e5

00024530 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   24530:	b580      	push	{r7, lr}
   24532:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   24534:	46c0      	nop			; (mov r8, r8)
   24536:	46bd      	mov	sp, r7
   24538:	bd80      	pop	{r7, pc}
	...

0002453c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   2453c:	b580      	push	{r7, lr}
   2453e:	b082      	sub	sp, #8
   24540:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   24542:	4b10      	ldr	r3, [pc, #64]	; (24584 <cpu_irq_enter_critical+0x48>)
   24544:	681b      	ldr	r3, [r3, #0]
   24546:	2b00      	cmp	r3, #0
   24548:	d112      	bne.n	24570 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2454a:	f3ef 8310 	mrs	r3, PRIMASK
   2454e:	607b      	str	r3, [r7, #4]
  return(result);
   24550:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   24552:	2b00      	cmp	r3, #0
   24554:	d109      	bne.n	2456a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   24556:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   24558:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   2455c:	4b0a      	ldr	r3, [pc, #40]	; (24588 <cpu_irq_enter_critical+0x4c>)
   2455e:	2200      	movs	r2, #0
   24560:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   24562:	4b0a      	ldr	r3, [pc, #40]	; (2458c <cpu_irq_enter_critical+0x50>)
   24564:	2201      	movs	r2, #1
   24566:	701a      	strb	r2, [r3, #0]
   24568:	e002      	b.n	24570 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   2456a:	4b08      	ldr	r3, [pc, #32]	; (2458c <cpu_irq_enter_critical+0x50>)
   2456c:	2200      	movs	r2, #0
   2456e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   24570:	4b04      	ldr	r3, [pc, #16]	; (24584 <cpu_irq_enter_critical+0x48>)
   24572:	681b      	ldr	r3, [r3, #0]
   24574:	1c5a      	adds	r2, r3, #1
   24576:	4b03      	ldr	r3, [pc, #12]	; (24584 <cpu_irq_enter_critical+0x48>)
   24578:	601a      	str	r2, [r3, #0]
}
   2457a:	46c0      	nop			; (mov r8, r8)
   2457c:	46bd      	mov	sp, r7
   2457e:	b002      	add	sp, #8
   24580:	bd80      	pop	{r7, pc}
   24582:	46c0      	nop			; (mov r8, r8)
   24584:	200006e8 	.word	0x200006e8
   24588:	20000028 	.word	0x20000028
   2458c:	200006ec 	.word	0x200006ec

00024590 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   24590:	b580      	push	{r7, lr}
   24592:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   24594:	4b0b      	ldr	r3, [pc, #44]	; (245c4 <cpu_irq_leave_critical+0x34>)
   24596:	681b      	ldr	r3, [r3, #0]
   24598:	1e5a      	subs	r2, r3, #1
   2459a:	4b0a      	ldr	r3, [pc, #40]	; (245c4 <cpu_irq_leave_critical+0x34>)
   2459c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   2459e:	4b09      	ldr	r3, [pc, #36]	; (245c4 <cpu_irq_leave_critical+0x34>)
   245a0:	681b      	ldr	r3, [r3, #0]
   245a2:	2b00      	cmp	r3, #0
   245a4:	d10a      	bne.n	245bc <cpu_irq_leave_critical+0x2c>
   245a6:	4b08      	ldr	r3, [pc, #32]	; (245c8 <cpu_irq_leave_critical+0x38>)
   245a8:	781b      	ldrb	r3, [r3, #0]
   245aa:	b2db      	uxtb	r3, r3
   245ac:	2b00      	cmp	r3, #0
   245ae:	d005      	beq.n	245bc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   245b0:	4b06      	ldr	r3, [pc, #24]	; (245cc <cpu_irq_leave_critical+0x3c>)
   245b2:	2201      	movs	r2, #1
   245b4:	701a      	strb	r2, [r3, #0]
   245b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   245ba:	b662      	cpsie	i
	}
}
   245bc:	46c0      	nop			; (mov r8, r8)
   245be:	46bd      	mov	sp, r7
   245c0:	bd80      	pop	{r7, pc}
   245c2:	46c0      	nop			; (mov r8, r8)
   245c4:	200006e8 	.word	0x200006e8
   245c8:	200006ec 	.word	0x200006ec
   245cc:	20000028 	.word	0x20000028

000245d0 <system_gclk_gen_get_config_defaults>:
{
   245d0:	b580      	push	{r7, lr}
   245d2:	b082      	sub	sp, #8
   245d4:	af00      	add	r7, sp, #0
   245d6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   245d8:	687b      	ldr	r3, [r7, #4]
   245da:	2201      	movs	r2, #1
   245dc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   245de:	687b      	ldr	r3, [r7, #4]
   245e0:	2200      	movs	r2, #0
   245e2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   245e4:	687b      	ldr	r3, [r7, #4]
   245e6:	2206      	movs	r2, #6
   245e8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   245ea:	687b      	ldr	r3, [r7, #4]
   245ec:	2200      	movs	r2, #0
   245ee:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   245f0:	687b      	ldr	r3, [r7, #4]
   245f2:	2200      	movs	r2, #0
   245f4:	725a      	strb	r2, [r3, #9]
}
   245f6:	46c0      	nop			; (mov r8, r8)
   245f8:	46bd      	mov	sp, r7
   245fa:	b002      	add	sp, #8
   245fc:	bd80      	pop	{r7, pc}

000245fe <system_gclk_chan_get_config_defaults>:
{
   245fe:	b580      	push	{r7, lr}
   24600:	b082      	sub	sp, #8
   24602:	af00      	add	r7, sp, #0
   24604:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   24606:	687b      	ldr	r3, [r7, #4]
   24608:	2200      	movs	r2, #0
   2460a:	701a      	strb	r2, [r3, #0]
}
   2460c:	46c0      	nop			; (mov r8, r8)
   2460e:	46bd      	mov	sp, r7
   24610:	b002      	add	sp, #8
   24612:	bd80      	pop	{r7, pc}

00024614 <system_clock_source_xosc32k_get_config_defaults>:
{
   24614:	b580      	push	{r7, lr}
   24616:	b082      	sub	sp, #8
   24618:	af00      	add	r7, sp, #0
   2461a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   2461c:	687b      	ldr	r3, [r7, #4]
   2461e:	2200      	movs	r2, #0
   24620:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   24622:	687b      	ldr	r3, [r7, #4]
   24624:	2204      	movs	r2, #4
   24626:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   24628:	687b      	ldr	r3, [r7, #4]
   2462a:	2200      	movs	r2, #0
   2462c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   2462e:	687b      	ldr	r3, [r7, #4]
   24630:	2280      	movs	r2, #128	; 0x80
   24632:	0212      	lsls	r2, r2, #8
   24634:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   24636:	687b      	ldr	r3, [r7, #4]
   24638:	2200      	movs	r2, #0
   2463a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   2463c:	687b      	ldr	r3, [r7, #4]
   2463e:	2201      	movs	r2, #1
   24640:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   24642:	687b      	ldr	r3, [r7, #4]
   24644:	2200      	movs	r2, #0
   24646:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   24648:	687b      	ldr	r3, [r7, #4]
   2464a:	2201      	movs	r2, #1
   2464c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   2464e:	687b      	ldr	r3, [r7, #4]
   24650:	2200      	movs	r2, #0
   24652:	739a      	strb	r2, [r3, #14]
}
   24654:	46c0      	nop			; (mov r8, r8)
   24656:	46bd      	mov	sp, r7
   24658:	b002      	add	sp, #8
   2465a:	bd80      	pop	{r7, pc}

0002465c <system_clock_source_osc8m_get_config_defaults>:
{
   2465c:	b580      	push	{r7, lr}
   2465e:	b082      	sub	sp, #8
   24660:	af00      	add	r7, sp, #0
   24662:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   24664:	687b      	ldr	r3, [r7, #4]
   24666:	2203      	movs	r2, #3
   24668:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2466a:	687b      	ldr	r3, [r7, #4]
   2466c:	2200      	movs	r2, #0
   2466e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   24670:	687b      	ldr	r3, [r7, #4]
   24672:	2201      	movs	r2, #1
   24674:	709a      	strb	r2, [r3, #2]
}
   24676:	46c0      	nop			; (mov r8, r8)
   24678:	46bd      	mov	sp, r7
   2467a:	b002      	add	sp, #8
   2467c:	bd80      	pop	{r7, pc}

0002467e <system_clock_source_dfll_get_config_defaults>:
{
   2467e:	b580      	push	{r7, lr}
   24680:	b082      	sub	sp, #8
   24682:	af00      	add	r7, sp, #0
   24684:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   24686:	687b      	ldr	r3, [r7, #4]
   24688:	2200      	movs	r2, #0
   2468a:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   2468c:	687b      	ldr	r3, [r7, #4]
   2468e:	2200      	movs	r2, #0
   24690:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   24692:	687b      	ldr	r3, [r7, #4]
   24694:	2200      	movs	r2, #0
   24696:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   24698:	687b      	ldr	r3, [r7, #4]
   2469a:	2200      	movs	r2, #0
   2469c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   2469e:	687b      	ldr	r3, [r7, #4]
   246a0:	2200      	movs	r2, #0
   246a2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   246a4:	687b      	ldr	r3, [r7, #4]
   246a6:	2201      	movs	r2, #1
   246a8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   246aa:	687b      	ldr	r3, [r7, #4]
   246ac:	2207      	movs	r2, #7
   246ae:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   246b0:	687b      	ldr	r3, [r7, #4]
   246b2:	223f      	movs	r2, #63	; 0x3f
   246b4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   246b6:	687b      	ldr	r3, [r7, #4]
   246b8:	2201      	movs	r2, #1
   246ba:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   246bc:	687b      	ldr	r3, [r7, #4]
   246be:	2201      	movs	r2, #1
   246c0:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   246c2:	687b      	ldr	r3, [r7, #4]
   246c4:	2206      	movs	r2, #6
   246c6:	821a      	strh	r2, [r3, #16]
}
   246c8:	46c0      	nop			; (mov r8, r8)
   246ca:	46bd      	mov	sp, r7
   246cc:	b002      	add	sp, #8
   246ce:	bd80      	pop	{r7, pc}

000246d0 <system_cpu_clock_set_divider>:
{
   246d0:	b580      	push	{r7, lr}
   246d2:	b082      	sub	sp, #8
   246d4:	af00      	add	r7, sp, #0
   246d6:	0002      	movs	r2, r0
   246d8:	1dfb      	adds	r3, r7, #7
   246da:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   246dc:	4a03      	ldr	r2, [pc, #12]	; (246ec <system_cpu_clock_set_divider+0x1c>)
   246de:	1dfb      	adds	r3, r7, #7
   246e0:	781b      	ldrb	r3, [r3, #0]
   246e2:	7213      	strb	r3, [r2, #8]
}
   246e4:	46c0      	nop			; (mov r8, r8)
   246e6:	46bd      	mov	sp, r7
   246e8:	b002      	add	sp, #8
   246ea:	bd80      	pop	{r7, pc}
   246ec:	40000400 	.word	0x40000400

000246f0 <system_apb_clock_set_divider>:
{
   246f0:	b580      	push	{r7, lr}
   246f2:	b082      	sub	sp, #8
   246f4:	af00      	add	r7, sp, #0
   246f6:	0002      	movs	r2, r0
   246f8:	1dfb      	adds	r3, r7, #7
   246fa:	701a      	strb	r2, [r3, #0]
   246fc:	1dbb      	adds	r3, r7, #6
   246fe:	1c0a      	adds	r2, r1, #0
   24700:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24702:	1dfb      	adds	r3, r7, #7
   24704:	781b      	ldrb	r3, [r3, #0]
   24706:	2b01      	cmp	r3, #1
   24708:	d008      	beq.n	2471c <system_apb_clock_set_divider+0x2c>
   2470a:	2b02      	cmp	r3, #2
   2470c:	d00b      	beq.n	24726 <system_apb_clock_set_divider+0x36>
   2470e:	2b00      	cmp	r3, #0
   24710:	d10e      	bne.n	24730 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   24712:	4a0b      	ldr	r2, [pc, #44]	; (24740 <system_apb_clock_set_divider+0x50>)
   24714:	1dbb      	adds	r3, r7, #6
   24716:	781b      	ldrb	r3, [r3, #0]
   24718:	7253      	strb	r3, [r2, #9]
			break;
   2471a:	e00b      	b.n	24734 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2471c:	4a08      	ldr	r2, [pc, #32]	; (24740 <system_apb_clock_set_divider+0x50>)
   2471e:	1dbb      	adds	r3, r7, #6
   24720:	781b      	ldrb	r3, [r3, #0]
   24722:	7293      	strb	r3, [r2, #10]
			break;
   24724:	e006      	b.n	24734 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   24726:	4a06      	ldr	r2, [pc, #24]	; (24740 <system_apb_clock_set_divider+0x50>)
   24728:	1dbb      	adds	r3, r7, #6
   2472a:	781b      	ldrb	r3, [r3, #0]
   2472c:	72d3      	strb	r3, [r2, #11]
			break;
   2472e:	e001      	b.n	24734 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   24730:	2317      	movs	r3, #23
   24732:	e000      	b.n	24736 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   24734:	2300      	movs	r3, #0
}
   24736:	0018      	movs	r0, r3
   24738:	46bd      	mov	sp, r7
   2473a:	b002      	add	sp, #8
   2473c:	bd80      	pop	{r7, pc}
   2473e:	46c0      	nop			; (mov r8, r8)
   24740:	40000400 	.word	0x40000400

00024744 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   24744:	b580      	push	{r7, lr}
   24746:	b082      	sub	sp, #8
   24748:	af00      	add	r7, sp, #0
   2474a:	0002      	movs	r2, r0
   2474c:	1dfb      	adds	r3, r7, #7
   2474e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   24750:	4a08      	ldr	r2, [pc, #32]	; (24774 <system_flash_set_waitstates+0x30>)
   24752:	1dfb      	adds	r3, r7, #7
   24754:	781b      	ldrb	r3, [r3, #0]
   24756:	210f      	movs	r1, #15
   24758:	400b      	ands	r3, r1
   2475a:	b2d9      	uxtb	r1, r3
   2475c:	6853      	ldr	r3, [r2, #4]
   2475e:	200f      	movs	r0, #15
   24760:	4001      	ands	r1, r0
   24762:	0049      	lsls	r1, r1, #1
   24764:	201e      	movs	r0, #30
   24766:	4383      	bics	r3, r0
   24768:	430b      	orrs	r3, r1
   2476a:	6053      	str	r3, [r2, #4]
}
   2476c:	46c0      	nop			; (mov r8, r8)
   2476e:	46bd      	mov	sp, r7
   24770:	b002      	add	sp, #8
   24772:	bd80      	pop	{r7, pc}
   24774:	41004000 	.word	0x41004000

00024778 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   24778:	b580      	push	{r7, lr}
   2477a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2477c:	46c0      	nop			; (mov r8, r8)
   2477e:	4b04      	ldr	r3, [pc, #16]	; (24790 <_system_dfll_wait_for_sync+0x18>)
   24780:	68db      	ldr	r3, [r3, #12]
   24782:	2210      	movs	r2, #16
   24784:	4013      	ands	r3, r2
   24786:	d0fa      	beq.n	2477e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   24788:	46c0      	nop			; (mov r8, r8)
   2478a:	46bd      	mov	sp, r7
   2478c:	bd80      	pop	{r7, pc}
   2478e:	46c0      	nop			; (mov r8, r8)
   24790:	40000800 	.word	0x40000800

00024794 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   24794:	b580      	push	{r7, lr}
   24796:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   24798:	4b0c      	ldr	r3, [pc, #48]	; (247cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2479a:	2202      	movs	r2, #2
   2479c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2479e:	4b0c      	ldr	r3, [pc, #48]	; (247d0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   247a0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   247a2:	4a0a      	ldr	r2, [pc, #40]	; (247cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   247a4:	4b0b      	ldr	r3, [pc, #44]	; (247d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   247a6:	689b      	ldr	r3, [r3, #8]
   247a8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   247aa:	4a08      	ldr	r2, [pc, #32]	; (247cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   247ac:	4b09      	ldr	r3, [pc, #36]	; (247d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   247ae:	685b      	ldr	r3, [r3, #4]
   247b0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   247b2:	4b06      	ldr	r3, [pc, #24]	; (247cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   247b4:	2200      	movs	r2, #0
   247b6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   247b8:	4b05      	ldr	r3, [pc, #20]	; (247d0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   247ba:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   247bc:	4a03      	ldr	r2, [pc, #12]	; (247cc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   247be:	4b05      	ldr	r3, [pc, #20]	; (247d4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   247c0:	681b      	ldr	r3, [r3, #0]
   247c2:	b29b      	uxth	r3, r3
   247c4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   247c6:	46c0      	nop			; (mov r8, r8)
   247c8:	46bd      	mov	sp, r7
   247ca:	bd80      	pop	{r7, pc}
   247cc:	40000800 	.word	0x40000800
   247d0:	00024779 	.word	0x00024779
   247d4:	200006f0 	.word	0x200006f0

000247d8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   247d8:	b580      	push	{r7, lr}
   247da:	b082      	sub	sp, #8
   247dc:	af00      	add	r7, sp, #0
   247de:	0002      	movs	r2, r0
   247e0:	1dfb      	adds	r3, r7, #7
   247e2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   247e4:	1dfb      	adds	r3, r7, #7
   247e6:	781b      	ldrb	r3, [r3, #0]
   247e8:	2b08      	cmp	r3, #8
   247ea:	d841      	bhi.n	24870 <system_clock_source_get_hz+0x98>
   247ec:	009a      	lsls	r2, r3, #2
   247ee:	4b23      	ldr	r3, [pc, #140]	; (2487c <system_clock_source_get_hz+0xa4>)
   247f0:	18d3      	adds	r3, r2, r3
   247f2:	681b      	ldr	r3, [r3, #0]
   247f4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   247f6:	4b22      	ldr	r3, [pc, #136]	; (24880 <system_clock_source_get_hz+0xa8>)
   247f8:	691b      	ldr	r3, [r3, #16]
   247fa:	e03a      	b.n	24872 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   247fc:	4b21      	ldr	r3, [pc, #132]	; (24884 <system_clock_source_get_hz+0xac>)
   247fe:	6a1b      	ldr	r3, [r3, #32]
   24800:	059b      	lsls	r3, r3, #22
   24802:	0f9b      	lsrs	r3, r3, #30
   24804:	b2db      	uxtb	r3, r3
   24806:	001a      	movs	r2, r3
   24808:	4b1f      	ldr	r3, [pc, #124]	; (24888 <system_clock_source_get_hz+0xb0>)
   2480a:	40d3      	lsrs	r3, r2
   2480c:	e031      	b.n	24872 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2480e:	2380      	movs	r3, #128	; 0x80
   24810:	021b      	lsls	r3, r3, #8
   24812:	e02e      	b.n	24872 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   24814:	2380      	movs	r3, #128	; 0x80
   24816:	021b      	lsls	r3, r3, #8
   24818:	e02b      	b.n	24872 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2481a:	4b19      	ldr	r3, [pc, #100]	; (24880 <system_clock_source_get_hz+0xa8>)
   2481c:	695b      	ldr	r3, [r3, #20]
   2481e:	e028      	b.n	24872 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   24820:	4b17      	ldr	r3, [pc, #92]	; (24880 <system_clock_source_get_hz+0xa8>)
   24822:	681b      	ldr	r3, [r3, #0]
   24824:	2202      	movs	r2, #2
   24826:	4013      	ands	r3, r2
   24828:	d101      	bne.n	2482e <system_clock_source_get_hz+0x56>
			return 0;
   2482a:	2300      	movs	r3, #0
   2482c:	e021      	b.n	24872 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2482e:	4b17      	ldr	r3, [pc, #92]	; (2488c <system_clock_source_get_hz+0xb4>)
   24830:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   24832:	4b13      	ldr	r3, [pc, #76]	; (24880 <system_clock_source_get_hz+0xa8>)
   24834:	681b      	ldr	r3, [r3, #0]
   24836:	2224      	movs	r2, #36	; 0x24
   24838:	4013      	ands	r3, r2
   2483a:	2b04      	cmp	r3, #4
   2483c:	d109      	bne.n	24852 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2483e:	2000      	movs	r0, #0
   24840:	4b13      	ldr	r3, [pc, #76]	; (24890 <system_clock_source_get_hz+0xb8>)
   24842:	4798      	blx	r3
   24844:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   24846:	4b0e      	ldr	r3, [pc, #56]	; (24880 <system_clock_source_get_hz+0xa8>)
   24848:	689b      	ldr	r3, [r3, #8]
   2484a:	041b      	lsls	r3, r3, #16
   2484c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2484e:	4353      	muls	r3, r2
   24850:	e00f      	b.n	24872 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   24852:	4b10      	ldr	r3, [pc, #64]	; (24894 <system_clock_source_get_hz+0xbc>)
   24854:	e00d      	b.n	24872 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   24856:	4a0b      	ldr	r2, [pc, #44]	; (24884 <system_clock_source_get_hz+0xac>)
   24858:	2350      	movs	r3, #80	; 0x50
   2485a:	5cd3      	ldrb	r3, [r2, r3]
   2485c:	b2db      	uxtb	r3, r3
   2485e:	001a      	movs	r2, r3
   24860:	2304      	movs	r3, #4
   24862:	4013      	ands	r3, r2
   24864:	d101      	bne.n	2486a <system_clock_source_get_hz+0x92>
			return 0;
   24866:	2300      	movs	r3, #0
   24868:	e003      	b.n	24872 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2486a:	4b05      	ldr	r3, [pc, #20]	; (24880 <system_clock_source_get_hz+0xa8>)
   2486c:	68db      	ldr	r3, [r3, #12]
   2486e:	e000      	b.n	24872 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   24870:	2300      	movs	r3, #0
	}
}
   24872:	0018      	movs	r0, r3
   24874:	46bd      	mov	sp, r7
   24876:	b002      	add	sp, #8
   24878:	bd80      	pop	{r7, pc}
   2487a:	46c0      	nop			; (mov r8, r8)
   2487c:	0002b748 	.word	0x0002b748
   24880:	200006f0 	.word	0x200006f0
   24884:	40000800 	.word	0x40000800
   24888:	007a1200 	.word	0x007a1200
   2488c:	00024779 	.word	0x00024779
   24890:	00025419 	.word	0x00025419
   24894:	02dc6c00 	.word	0x02dc6c00

00024898 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   24898:	b580      	push	{r7, lr}
   2489a:	b084      	sub	sp, #16
   2489c:	af00      	add	r7, sp, #0
   2489e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   248a0:	4b1a      	ldr	r3, [pc, #104]	; (2490c <system_clock_source_osc8m_set_config+0x74>)
   248a2:	6a1b      	ldr	r3, [r3, #32]
   248a4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   248a6:	687b      	ldr	r3, [r7, #4]
   248a8:	781b      	ldrb	r3, [r3, #0]
   248aa:	1c1a      	adds	r2, r3, #0
   248ac:	2303      	movs	r3, #3
   248ae:	4013      	ands	r3, r2
   248b0:	b2da      	uxtb	r2, r3
   248b2:	230d      	movs	r3, #13
   248b4:	18fb      	adds	r3, r7, r3
   248b6:	2103      	movs	r1, #3
   248b8:	400a      	ands	r2, r1
   248ba:	0010      	movs	r0, r2
   248bc:	781a      	ldrb	r2, [r3, #0]
   248be:	2103      	movs	r1, #3
   248c0:	438a      	bics	r2, r1
   248c2:	1c11      	adds	r1, r2, #0
   248c4:	1c02      	adds	r2, r0, #0
   248c6:	430a      	orrs	r2, r1
   248c8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   248ca:	687b      	ldr	r3, [r7, #4]
   248cc:	789a      	ldrb	r2, [r3, #2]
   248ce:	230c      	movs	r3, #12
   248d0:	18fb      	adds	r3, r7, r3
   248d2:	01d0      	lsls	r0, r2, #7
   248d4:	781a      	ldrb	r2, [r3, #0]
   248d6:	217f      	movs	r1, #127	; 0x7f
   248d8:	400a      	ands	r2, r1
   248da:	1c11      	adds	r1, r2, #0
   248dc:	1c02      	adds	r2, r0, #0
   248de:	430a      	orrs	r2, r1
   248e0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   248e2:	687b      	ldr	r3, [r7, #4]
   248e4:	785a      	ldrb	r2, [r3, #1]
   248e6:	230c      	movs	r3, #12
   248e8:	18fb      	adds	r3, r7, r3
   248ea:	2101      	movs	r1, #1
   248ec:	400a      	ands	r2, r1
   248ee:	0190      	lsls	r0, r2, #6
   248f0:	781a      	ldrb	r2, [r3, #0]
   248f2:	2140      	movs	r1, #64	; 0x40
   248f4:	438a      	bics	r2, r1
   248f6:	1c11      	adds	r1, r2, #0
   248f8:	1c02      	adds	r2, r0, #0
   248fa:	430a      	orrs	r2, r1
   248fc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   248fe:	4b03      	ldr	r3, [pc, #12]	; (2490c <system_clock_source_osc8m_set_config+0x74>)
   24900:	68fa      	ldr	r2, [r7, #12]
   24902:	621a      	str	r2, [r3, #32]
}
   24904:	46c0      	nop			; (mov r8, r8)
   24906:	46bd      	mov	sp, r7
   24908:	b004      	add	sp, #16
   2490a:	bd80      	pop	{r7, pc}
   2490c:	40000800 	.word	0x40000800

00024910 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   24910:	b580      	push	{r7, lr}
   24912:	b084      	sub	sp, #16
   24914:	af00      	add	r7, sp, #0
   24916:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   24918:	4a43      	ldr	r2, [pc, #268]	; (24a28 <system_clock_source_xosc32k_set_config+0x118>)
   2491a:	230c      	movs	r3, #12
   2491c:	18fb      	adds	r3, r7, r3
   2491e:	8a92      	ldrh	r2, [r2, #20]
   24920:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   24922:	687b      	ldr	r3, [r7, #4]
   24924:	785b      	ldrb	r3, [r3, #1]
   24926:	1c1a      	adds	r2, r3, #0
   24928:	2307      	movs	r3, #7
   2492a:	4013      	ands	r3, r2
   2492c:	b2da      	uxtb	r2, r3
   2492e:	230c      	movs	r3, #12
   24930:	18fb      	adds	r3, r7, r3
   24932:	2107      	movs	r1, #7
   24934:	400a      	ands	r2, r1
   24936:	0010      	movs	r0, r2
   24938:	785a      	ldrb	r2, [r3, #1]
   2493a:	2107      	movs	r1, #7
   2493c:	438a      	bics	r2, r1
   2493e:	1c11      	adds	r1, r2, #0
   24940:	1c02      	adds	r2, r0, #0
   24942:	430a      	orrs	r2, r1
   24944:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   24946:	687b      	ldr	r3, [r7, #4]
   24948:	781b      	ldrb	r3, [r3, #0]
   2494a:	2b00      	cmp	r3, #0
   2494c:	d106      	bne.n	2495c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   2494e:	230c      	movs	r3, #12
   24950:	18fb      	adds	r3, r7, r3
   24952:	781a      	ldrb	r2, [r3, #0]
   24954:	2104      	movs	r1, #4
   24956:	430a      	orrs	r2, r1
   24958:	701a      	strb	r2, [r3, #0]
   2495a:	e005      	b.n	24968 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   2495c:	230c      	movs	r3, #12
   2495e:	18fb      	adds	r3, r7, r3
   24960:	781a      	ldrb	r2, [r3, #0]
   24962:	2104      	movs	r1, #4
   24964:	438a      	bics	r2, r1
   24966:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   24968:	687b      	ldr	r3, [r7, #4]
   2496a:	789a      	ldrb	r2, [r3, #2]
   2496c:	230c      	movs	r3, #12
   2496e:	18fb      	adds	r3, r7, r3
   24970:	2101      	movs	r1, #1
   24972:	400a      	ands	r2, r1
   24974:	0150      	lsls	r0, r2, #5
   24976:	781a      	ldrb	r2, [r3, #0]
   24978:	2120      	movs	r1, #32
   2497a:	438a      	bics	r2, r1
   2497c:	1c11      	adds	r1, r2, #0
   2497e:	1c02      	adds	r2, r0, #0
   24980:	430a      	orrs	r2, r1
   24982:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   24984:	687b      	ldr	r3, [r7, #4]
   24986:	78da      	ldrb	r2, [r3, #3]
   24988:	230c      	movs	r3, #12
   2498a:	18fb      	adds	r3, r7, r3
   2498c:	2101      	movs	r1, #1
   2498e:	400a      	ands	r2, r1
   24990:	0110      	lsls	r0, r2, #4
   24992:	781a      	ldrb	r2, [r3, #0]
   24994:	2110      	movs	r1, #16
   24996:	438a      	bics	r2, r1
   24998:	1c11      	adds	r1, r2, #0
   2499a:	1c02      	adds	r2, r0, #0
   2499c:	430a      	orrs	r2, r1
   2499e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   249a0:	687b      	ldr	r3, [r7, #4]
   249a2:	791a      	ldrb	r2, [r3, #4]
   249a4:	230c      	movs	r3, #12
   249a6:	18fb      	adds	r3, r7, r3
   249a8:	2101      	movs	r1, #1
   249aa:	400a      	ands	r2, r1
   249ac:	00d0      	lsls	r0, r2, #3
   249ae:	781a      	ldrb	r2, [r3, #0]
   249b0:	2108      	movs	r1, #8
   249b2:	438a      	bics	r2, r1
   249b4:	1c11      	adds	r1, r2, #0
   249b6:	1c02      	adds	r2, r0, #0
   249b8:	430a      	orrs	r2, r1
   249ba:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   249bc:	687b      	ldr	r3, [r7, #4]
   249be:	7b5a      	ldrb	r2, [r3, #13]
   249c0:	230c      	movs	r3, #12
   249c2:	18fb      	adds	r3, r7, r3
   249c4:	01d0      	lsls	r0, r2, #7
   249c6:	781a      	ldrb	r2, [r3, #0]
   249c8:	217f      	movs	r1, #127	; 0x7f
   249ca:	400a      	ands	r2, r1
   249cc:	1c11      	adds	r1, r2, #0
   249ce:	1c02      	adds	r2, r0, #0
   249d0:	430a      	orrs	r2, r1
   249d2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   249d4:	687b      	ldr	r3, [r7, #4]
   249d6:	7b1a      	ldrb	r2, [r3, #12]
   249d8:	230c      	movs	r3, #12
   249da:	18fb      	adds	r3, r7, r3
   249dc:	2101      	movs	r1, #1
   249de:	400a      	ands	r2, r1
   249e0:	0190      	lsls	r0, r2, #6
   249e2:	781a      	ldrb	r2, [r3, #0]
   249e4:	2140      	movs	r1, #64	; 0x40
   249e6:	438a      	bics	r2, r1
   249e8:	1c11      	adds	r1, r2, #0
   249ea:	1c02      	adds	r2, r0, #0
   249ec:	430a      	orrs	r2, r1
   249ee:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   249f0:	687b      	ldr	r3, [r7, #4]
   249f2:	7b9a      	ldrb	r2, [r3, #14]
   249f4:	230c      	movs	r3, #12
   249f6:	18fb      	adds	r3, r7, r3
   249f8:	2101      	movs	r1, #1
   249fa:	400a      	ands	r2, r1
   249fc:	0110      	lsls	r0, r2, #4
   249fe:	785a      	ldrb	r2, [r3, #1]
   24a00:	2110      	movs	r1, #16
   24a02:	438a      	bics	r2, r1
   24a04:	1c11      	adds	r1, r2, #0
   24a06:	1c02      	adds	r2, r0, #0
   24a08:	430a      	orrs	r2, r1
   24a0a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   24a0c:	687b      	ldr	r3, [r7, #4]
   24a0e:	689a      	ldr	r2, [r3, #8]
   24a10:	4b06      	ldr	r3, [pc, #24]	; (24a2c <system_clock_source_xosc32k_set_config+0x11c>)
   24a12:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   24a14:	4a04      	ldr	r2, [pc, #16]	; (24a28 <system_clock_source_xosc32k_set_config+0x118>)
   24a16:	230c      	movs	r3, #12
   24a18:	18fb      	adds	r3, r7, r3
   24a1a:	881b      	ldrh	r3, [r3, #0]
   24a1c:	8293      	strh	r3, [r2, #20]
}
   24a1e:	46c0      	nop			; (mov r8, r8)
   24a20:	46bd      	mov	sp, r7
   24a22:	b004      	add	sp, #16
   24a24:	bd80      	pop	{r7, pc}
   24a26:	46c0      	nop			; (mov r8, r8)
   24a28:	40000800 	.word	0x40000800
   24a2c:	200006f0 	.word	0x200006f0

00024a30 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   24a30:	b580      	push	{r7, lr}
   24a32:	b082      	sub	sp, #8
   24a34:	af00      	add	r7, sp, #0
   24a36:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   24a38:	687b      	ldr	r3, [r7, #4]
   24a3a:	7a1b      	ldrb	r3, [r3, #8]
   24a3c:	029b      	lsls	r3, r3, #10
   24a3e:	041b      	lsls	r3, r3, #16
   24a40:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   24a42:	687b      	ldr	r3, [r7, #4]
   24a44:	895b      	ldrh	r3, [r3, #10]
   24a46:	059b      	lsls	r3, r3, #22
   24a48:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   24a4a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   24a4c:	4b2a      	ldr	r3, [pc, #168]	; (24af8 <system_clock_source_dfll_set_config+0xc8>)
   24a4e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   24a50:	687b      	ldr	r3, [r7, #4]
   24a52:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   24a54:	687b      	ldr	r3, [r7, #4]
   24a56:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   24a58:	4313      	orrs	r3, r2
   24a5a:	b2db      	uxtb	r3, r3
   24a5c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   24a5e:	687b      	ldr	r3, [r7, #4]
   24a60:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   24a62:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   24a64:	687a      	ldr	r2, [r7, #4]
   24a66:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   24a68:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   24a6a:	687b      	ldr	r3, [r7, #4]
   24a6c:	785b      	ldrb	r3, [r3, #1]
   24a6e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   24a70:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   24a72:	4b21      	ldr	r3, [pc, #132]	; (24af8 <system_clock_source_dfll_set_config+0xc8>)
   24a74:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   24a76:	687b      	ldr	r3, [r7, #4]
   24a78:	781b      	ldrb	r3, [r3, #0]
   24a7a:	2b04      	cmp	r3, #4
   24a7c:	d116      	bne.n	24aac <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24a7e:	687b      	ldr	r3, [r7, #4]
   24a80:	7b1b      	ldrb	r3, [r3, #12]
   24a82:	069b      	lsls	r3, r3, #26
   24a84:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   24a86:	687b      	ldr	r3, [r7, #4]
   24a88:	89db      	ldrh	r3, [r3, #14]
   24a8a:	041b      	lsls	r3, r3, #16
   24a8c:	0019      	movs	r1, r3
   24a8e:	4b1b      	ldr	r3, [pc, #108]	; (24afc <system_clock_source_dfll_set_config+0xcc>)
   24a90:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24a92:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   24a94:	687a      	ldr	r2, [r7, #4]
   24a96:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   24a98:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   24a9a:	4b17      	ldr	r3, [pc, #92]	; (24af8 <system_clock_source_dfll_set_config+0xc8>)
   24a9c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   24a9e:	4b16      	ldr	r3, [pc, #88]	; (24af8 <system_clock_source_dfll_set_config+0xc8>)
   24aa0:	681b      	ldr	r3, [r3, #0]
   24aa2:	687a      	ldr	r2, [r7, #4]
   24aa4:	7812      	ldrb	r2, [r2, #0]
   24aa6:	431a      	orrs	r2, r3
   24aa8:	4b13      	ldr	r3, [pc, #76]	; (24af8 <system_clock_source_dfll_set_config+0xc8>)
   24aaa:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   24aac:	687b      	ldr	r3, [r7, #4]
   24aae:	781b      	ldrb	r3, [r3, #0]
   24ab0:	2b20      	cmp	r3, #32
   24ab2:	d11c      	bne.n	24aee <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24ab4:	687b      	ldr	r3, [r7, #4]
   24ab6:	7b1b      	ldrb	r3, [r3, #12]
   24ab8:	069b      	lsls	r3, r3, #26
   24aba:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   24abc:	687b      	ldr	r3, [r7, #4]
   24abe:	89db      	ldrh	r3, [r3, #14]
   24ac0:	041b      	lsls	r3, r3, #16
   24ac2:	0019      	movs	r1, r3
   24ac4:	4b0d      	ldr	r3, [pc, #52]	; (24afc <system_clock_source_dfll_set_config+0xcc>)
   24ac6:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   24ac8:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   24aca:	687a      	ldr	r2, [r7, #4]
   24acc:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   24ace:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   24ad0:	4b09      	ldr	r3, [pc, #36]	; (24af8 <system_clock_source_dfll_set_config+0xc8>)
   24ad2:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   24ad4:	4b08      	ldr	r3, [pc, #32]	; (24af8 <system_clock_source_dfll_set_config+0xc8>)
   24ad6:	681b      	ldr	r3, [r3, #0]
   24ad8:	687a      	ldr	r2, [r7, #4]
   24ada:	7812      	ldrb	r2, [r2, #0]
   24adc:	2104      	movs	r1, #4
   24ade:	430a      	orrs	r2, r1
   24ae0:	b2d2      	uxtb	r2, r2
   24ae2:	4313      	orrs	r3, r2
   24ae4:	2280      	movs	r2, #128	; 0x80
   24ae6:	00d2      	lsls	r2, r2, #3
   24ae8:	431a      	orrs	r2, r3
   24aea:	4b03      	ldr	r3, [pc, #12]	; (24af8 <system_clock_source_dfll_set_config+0xc8>)
   24aec:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   24aee:	46c0      	nop			; (mov r8, r8)
   24af0:	46bd      	mov	sp, r7
   24af2:	b002      	add	sp, #8
   24af4:	bd80      	pop	{r7, pc}
   24af6:	46c0      	nop			; (mov r8, r8)
   24af8:	200006f0 	.word	0x200006f0
   24afc:	03ff0000 	.word	0x03ff0000

00024b00 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   24b00:	b580      	push	{r7, lr}
   24b02:	b082      	sub	sp, #8
   24b04:	af00      	add	r7, sp, #0
   24b06:	0002      	movs	r2, r0
   24b08:	1dfb      	adds	r3, r7, #7
   24b0a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   24b0c:	1dfb      	adds	r3, r7, #7
   24b0e:	781b      	ldrb	r3, [r3, #0]
   24b10:	2b08      	cmp	r3, #8
   24b12:	d83b      	bhi.n	24b8c <system_clock_source_enable+0x8c>
   24b14:	009a      	lsls	r2, r3, #2
   24b16:	4b21      	ldr	r3, [pc, #132]	; (24b9c <system_clock_source_enable+0x9c>)
   24b18:	18d3      	adds	r3, r2, r3
   24b1a:	681b      	ldr	r3, [r3, #0]
   24b1c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   24b1e:	4b20      	ldr	r3, [pc, #128]	; (24ba0 <system_clock_source_enable+0xa0>)
   24b20:	4a1f      	ldr	r2, [pc, #124]	; (24ba0 <system_clock_source_enable+0xa0>)
   24b22:	6a12      	ldr	r2, [r2, #32]
   24b24:	2102      	movs	r1, #2
   24b26:	430a      	orrs	r2, r1
   24b28:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   24b2a:	2300      	movs	r3, #0
   24b2c:	e031      	b.n	24b92 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   24b2e:	4b1c      	ldr	r3, [pc, #112]	; (24ba0 <system_clock_source_enable+0xa0>)
   24b30:	4a1b      	ldr	r2, [pc, #108]	; (24ba0 <system_clock_source_enable+0xa0>)
   24b32:	6992      	ldr	r2, [r2, #24]
   24b34:	2102      	movs	r1, #2
   24b36:	430a      	orrs	r2, r1
   24b38:	619a      	str	r2, [r3, #24]
		break;
   24b3a:	e029      	b.n	24b90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   24b3c:	4a18      	ldr	r2, [pc, #96]	; (24ba0 <system_clock_source_enable+0xa0>)
   24b3e:	4b18      	ldr	r3, [pc, #96]	; (24ba0 <system_clock_source_enable+0xa0>)
   24b40:	8a1b      	ldrh	r3, [r3, #16]
   24b42:	b29b      	uxth	r3, r3
   24b44:	2102      	movs	r1, #2
   24b46:	430b      	orrs	r3, r1
   24b48:	b29b      	uxth	r3, r3
   24b4a:	8213      	strh	r3, [r2, #16]
		break;
   24b4c:	e020      	b.n	24b90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   24b4e:	4a14      	ldr	r2, [pc, #80]	; (24ba0 <system_clock_source_enable+0xa0>)
   24b50:	4b13      	ldr	r3, [pc, #76]	; (24ba0 <system_clock_source_enable+0xa0>)
   24b52:	8a9b      	ldrh	r3, [r3, #20]
   24b54:	b29b      	uxth	r3, r3
   24b56:	2102      	movs	r1, #2
   24b58:	430b      	orrs	r3, r1
   24b5a:	b29b      	uxth	r3, r3
   24b5c:	8293      	strh	r3, [r2, #20]
		break;
   24b5e:	e017      	b.n	24b90 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   24b60:	4b10      	ldr	r3, [pc, #64]	; (24ba4 <system_clock_source_enable+0xa4>)
   24b62:	681b      	ldr	r3, [r3, #0]
   24b64:	2202      	movs	r2, #2
   24b66:	431a      	orrs	r2, r3
   24b68:	4b0e      	ldr	r3, [pc, #56]	; (24ba4 <system_clock_source_enable+0xa4>)
   24b6a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   24b6c:	4b0e      	ldr	r3, [pc, #56]	; (24ba8 <system_clock_source_enable+0xa8>)
   24b6e:	4798      	blx	r3
		break;
   24b70:	e00e      	b.n	24b90 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   24b72:	4a0b      	ldr	r2, [pc, #44]	; (24ba0 <system_clock_source_enable+0xa0>)
   24b74:	490a      	ldr	r1, [pc, #40]	; (24ba0 <system_clock_source_enable+0xa0>)
   24b76:	2344      	movs	r3, #68	; 0x44
   24b78:	5ccb      	ldrb	r3, [r1, r3]
   24b7a:	b2db      	uxtb	r3, r3
   24b7c:	2102      	movs	r1, #2
   24b7e:	430b      	orrs	r3, r1
   24b80:	b2d9      	uxtb	r1, r3
   24b82:	2344      	movs	r3, #68	; 0x44
   24b84:	54d1      	strb	r1, [r2, r3]
		break;
   24b86:	e003      	b.n	24b90 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   24b88:	2300      	movs	r3, #0
   24b8a:	e002      	b.n	24b92 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   24b8c:	2317      	movs	r3, #23
   24b8e:	e000      	b.n	24b92 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   24b90:	2300      	movs	r3, #0
}
   24b92:	0018      	movs	r0, r3
   24b94:	46bd      	mov	sp, r7
   24b96:	b002      	add	sp, #8
   24b98:	bd80      	pop	{r7, pc}
   24b9a:	46c0      	nop			; (mov r8, r8)
   24b9c:	0002b76c 	.word	0x0002b76c
   24ba0:	40000800 	.word	0x40000800
   24ba4:	200006f0 	.word	0x200006f0
   24ba8:	00024795 	.word	0x00024795

00024bac <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   24bac:	b580      	push	{r7, lr}
   24bae:	b084      	sub	sp, #16
   24bb0:	af00      	add	r7, sp, #0
   24bb2:	0002      	movs	r2, r0
   24bb4:	1dfb      	adds	r3, r7, #7
   24bb6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   24bb8:	2300      	movs	r3, #0
   24bba:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   24bbc:	1dfb      	adds	r3, r7, #7
   24bbe:	781b      	ldrb	r3, [r3, #0]
   24bc0:	2b08      	cmp	r3, #8
   24bc2:	d821      	bhi.n	24c08 <system_clock_source_is_ready+0x5c>
   24bc4:	009a      	lsls	r2, r3, #2
   24bc6:	4b18      	ldr	r3, [pc, #96]	; (24c28 <system_clock_source_is_ready+0x7c>)
   24bc8:	18d3      	adds	r3, r2, r3
   24bca:	681b      	ldr	r3, [r3, #0]
   24bcc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   24bce:	2308      	movs	r3, #8
   24bd0:	60fb      	str	r3, [r7, #12]
		break;
   24bd2:	e01b      	b.n	24c0c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   24bd4:	2304      	movs	r3, #4
   24bd6:	60fb      	str	r3, [r7, #12]
		break;
   24bd8:	e018      	b.n	24c0c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   24bda:	2301      	movs	r3, #1
   24bdc:	60fb      	str	r3, [r7, #12]
		break;
   24bde:	e015      	b.n	24c0c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   24be0:	2302      	movs	r3, #2
   24be2:	60fb      	str	r3, [r7, #12]
		break;
   24be4:	e012      	b.n	24c0c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   24be6:	23d0      	movs	r3, #208	; 0xd0
   24be8:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   24bea:	e00f      	b.n	24c0c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   24bec:	4a0f      	ldr	r2, [pc, #60]	; (24c2c <system_clock_source_is_ready+0x80>)
   24bee:	2350      	movs	r3, #80	; 0x50
   24bf0:	5cd3      	ldrb	r3, [r2, r3]
   24bf2:	b2db      	uxtb	r3, r3
   24bf4:	001a      	movs	r2, r3
   24bf6:	2303      	movs	r3, #3
   24bf8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   24bfa:	3b03      	subs	r3, #3
   24bfc:	425a      	negs	r2, r3
   24bfe:	4153      	adcs	r3, r2
   24c00:	b2db      	uxtb	r3, r3
   24c02:	e00c      	b.n	24c1e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   24c04:	2301      	movs	r3, #1
   24c06:	e00a      	b.n	24c1e <system_clock_source_is_ready+0x72>

	default:
		return false;
   24c08:	2300      	movs	r3, #0
   24c0a:	e008      	b.n	24c1e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   24c0c:	4b07      	ldr	r3, [pc, #28]	; (24c2c <system_clock_source_is_ready+0x80>)
   24c0e:	68db      	ldr	r3, [r3, #12]
   24c10:	68fa      	ldr	r2, [r7, #12]
   24c12:	401a      	ands	r2, r3
   24c14:	68fb      	ldr	r3, [r7, #12]
   24c16:	1ad3      	subs	r3, r2, r3
   24c18:	425a      	negs	r2, r3
   24c1a:	4153      	adcs	r3, r2
   24c1c:	b2db      	uxtb	r3, r3
}
   24c1e:	0018      	movs	r0, r3
   24c20:	46bd      	mov	sp, r7
   24c22:	b004      	add	sp, #16
   24c24:	bd80      	pop	{r7, pc}
   24c26:	46c0      	nop			; (mov r8, r8)
   24c28:	0002b790 	.word	0x0002b790
   24c2c:	40000800 	.word	0x40000800

00024c30 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   24c30:	b580      	push	{r7, lr}
   24c32:	b082      	sub	sp, #8
   24c34:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   24c36:	003b      	movs	r3, r7
   24c38:	2202      	movs	r2, #2
   24c3a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   24c3c:	2300      	movs	r3, #0
   24c3e:	607b      	str	r3, [r7, #4]
   24c40:	e009      	b.n	24c56 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   24c42:	687b      	ldr	r3, [r7, #4]
   24c44:	b2db      	uxtb	r3, r3
   24c46:	003a      	movs	r2, r7
   24c48:	0011      	movs	r1, r2
   24c4a:	0018      	movs	r0, r3
   24c4c:	4b05      	ldr	r3, [pc, #20]	; (24c64 <_switch_peripheral_gclk+0x34>)
   24c4e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   24c50:	687b      	ldr	r3, [r7, #4]
   24c52:	3301      	adds	r3, #1
   24c54:	607b      	str	r3, [r7, #4]
   24c56:	687b      	ldr	r3, [r7, #4]
   24c58:	2b24      	cmp	r3, #36	; 0x24
   24c5a:	d9f2      	bls.n	24c42 <_switch_peripheral_gclk+0x12>
	}
}
   24c5c:	46c0      	nop			; (mov r8, r8)
   24c5e:	46bd      	mov	sp, r7
   24c60:	b002      	add	sp, #8
   24c62:	bd80      	pop	{r7, pc}
   24c64:	000252f5 	.word	0x000252f5

00024c68 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   24c68:	b580      	push	{r7, lr}
   24c6a:	b0aa      	sub	sp, #168	; 0xa8
   24c6c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   24c6e:	4bc1      	ldr	r3, [pc, #772]	; (24f74 <system_clock_init+0x30c>)
   24c70:	22c2      	movs	r2, #194	; 0xc2
   24c72:	00d2      	lsls	r2, r2, #3
   24c74:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   24c76:	2002      	movs	r0, #2
   24c78:	4bbf      	ldr	r3, [pc, #764]	; (24f78 <system_clock_init+0x310>)
   24c7a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   24c7c:	4bbf      	ldr	r3, [pc, #764]	; (24f7c <system_clock_init+0x314>)
   24c7e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   24c80:	2394      	movs	r3, #148	; 0x94
   24c82:	18fb      	adds	r3, r7, r3
   24c84:	0018      	movs	r0, r3
   24c86:	4bbe      	ldr	r3, [pc, #760]	; (24f80 <system_clock_init+0x318>)
   24c88:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   24c8a:	2394      	movs	r3, #148	; 0x94
   24c8c:	18fb      	adds	r3, r7, r3
   24c8e:	2280      	movs	r2, #128	; 0x80
   24c90:	0212      	lsls	r2, r2, #8
   24c92:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   24c94:	2394      	movs	r3, #148	; 0x94
   24c96:	18fb      	adds	r3, r7, r3
   24c98:	2200      	movs	r2, #0
   24c9a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   24c9c:	2394      	movs	r3, #148	; 0x94
   24c9e:	18fb      	adds	r3, r7, r3
   24ca0:	2206      	movs	r2, #6
   24ca2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   24ca4:	2394      	movs	r3, #148	; 0x94
   24ca6:	18fb      	adds	r3, r7, r3
   24ca8:	2200      	movs	r2, #0
   24caa:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   24cac:	2394      	movs	r3, #148	; 0x94
   24cae:	18fb      	adds	r3, r7, r3
   24cb0:	2200      	movs	r2, #0
   24cb2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   24cb4:	2394      	movs	r3, #148	; 0x94
   24cb6:	18fb      	adds	r3, r7, r3
   24cb8:	2201      	movs	r2, #1
   24cba:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   24cbc:	2394      	movs	r3, #148	; 0x94
   24cbe:	18fb      	adds	r3, r7, r3
   24cc0:	2200      	movs	r2, #0
   24cc2:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   24cc4:	2394      	movs	r3, #148	; 0x94
   24cc6:	18fb      	adds	r3, r7, r3
   24cc8:	2201      	movs	r2, #1
   24cca:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   24ccc:	2394      	movs	r3, #148	; 0x94
   24cce:	18fb      	adds	r3, r7, r3
   24cd0:	0018      	movs	r0, r3
   24cd2:	4bac      	ldr	r3, [pc, #688]	; (24f84 <system_clock_init+0x31c>)
   24cd4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   24cd6:	2005      	movs	r0, #5
   24cd8:	4bab      	ldr	r3, [pc, #684]	; (24f88 <system_clock_init+0x320>)
   24cda:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   24cdc:	46c0      	nop			; (mov r8, r8)
   24cde:	2005      	movs	r0, #5
   24ce0:	4baa      	ldr	r3, [pc, #680]	; (24f8c <system_clock_init+0x324>)
   24ce2:	4798      	blx	r3
   24ce4:	0003      	movs	r3, r0
   24ce6:	001a      	movs	r2, r3
   24ce8:	2301      	movs	r3, #1
   24cea:	4053      	eors	r3, r2
   24cec:	b2db      	uxtb	r3, r3
   24cee:	2b00      	cmp	r3, #0
   24cf0:	d1f5      	bne.n	24cde <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   24cf2:	2380      	movs	r3, #128	; 0x80
   24cf4:	18fb      	adds	r3, r7, r3
   24cf6:	0018      	movs	r0, r3
   24cf8:	4ba5      	ldr	r3, [pc, #660]	; (24f90 <system_clock_init+0x328>)
   24cfa:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   24cfc:	2380      	movs	r3, #128	; 0x80
   24cfe:	18fb      	adds	r3, r7, r3
   24d00:	2204      	movs	r2, #4
   24d02:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   24d04:	2380      	movs	r3, #128	; 0x80
   24d06:	18fb      	adds	r3, r7, r3
   24d08:	2200      	movs	r2, #0
   24d0a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   24d0c:	4ba1      	ldr	r3, [pc, #644]	; (24f94 <system_clock_init+0x32c>)
   24d0e:	681b      	ldr	r3, [r3, #0]
   24d10:	0e9b      	lsrs	r3, r3, #26
   24d12:	22a4      	movs	r2, #164	; 0xa4
   24d14:	18ba      	adds	r2, r7, r2
   24d16:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   24d18:	23a4      	movs	r3, #164	; 0xa4
   24d1a:	18fb      	adds	r3, r7, r3
   24d1c:	681b      	ldr	r3, [r3, #0]
   24d1e:	2b3f      	cmp	r3, #63	; 0x3f
   24d20:	d103      	bne.n	24d2a <system_clock_init+0xc2>
		coarse = 0x1f;
   24d22:	231f      	movs	r3, #31
   24d24:	22a4      	movs	r2, #164	; 0xa4
   24d26:	18ba      	adds	r2, r7, r2
   24d28:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   24d2a:	23a4      	movs	r3, #164	; 0xa4
   24d2c:	18fb      	adds	r3, r7, r3
   24d2e:	681b      	ldr	r3, [r3, #0]
   24d30:	b2da      	uxtb	r2, r3
   24d32:	2380      	movs	r3, #128	; 0x80
   24d34:	18fb      	adds	r3, r7, r3
   24d36:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   24d38:	2380      	movs	r3, #128	; 0x80
   24d3a:	18fb      	adds	r3, r7, r3
   24d3c:	2200      	movs	r2, #0
   24d3e:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   24d40:	2380      	movs	r3, #128	; 0x80
   24d42:	18fb      	adds	r3, r7, r3
   24d44:	2200      	movs	r2, #0
   24d46:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   24d48:	2380      	movs	r3, #128	; 0x80
   24d4a:	18fb      	adds	r3, r7, r3
   24d4c:	2200      	movs	r2, #0
   24d4e:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   24d50:	2380      	movs	r3, #128	; 0x80
   24d52:	18fb      	adds	r3, r7, r3
   24d54:	2200      	movs	r2, #0
   24d56:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   24d58:	2380      	movs	r3, #128	; 0x80
   24d5a:	18fb      	adds	r3, r7, r3
   24d5c:	22b7      	movs	r2, #183	; 0xb7
   24d5e:	00d2      	lsls	r2, r2, #3
   24d60:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   24d62:	2380      	movs	r3, #128	; 0x80
   24d64:	18fb      	adds	r3, r7, r3
   24d66:	2203      	movs	r2, #3
   24d68:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   24d6a:	2380      	movs	r3, #128	; 0x80
   24d6c:	18fb      	adds	r3, r7, r3
   24d6e:	221f      	movs	r2, #31
   24d70:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   24d72:	2380      	movs	r3, #128	; 0x80
   24d74:	18fb      	adds	r3, r7, r3
   24d76:	0018      	movs	r0, r3
   24d78:	4b87      	ldr	r3, [pc, #540]	; (24f98 <system_clock_init+0x330>)
   24d7a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   24d7c:	237c      	movs	r3, #124	; 0x7c
   24d7e:	18fb      	adds	r3, r7, r3
   24d80:	0018      	movs	r0, r3
   24d82:	4b86      	ldr	r3, [pc, #536]	; (24f9c <system_clock_init+0x334>)
   24d84:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   24d86:	237c      	movs	r3, #124	; 0x7c
   24d88:	18fb      	adds	r3, r7, r3
   24d8a:	2200      	movs	r2, #0
   24d8c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   24d8e:	237c      	movs	r3, #124	; 0x7c
   24d90:	18fb      	adds	r3, r7, r3
   24d92:	2201      	movs	r2, #1
   24d94:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   24d96:	237c      	movs	r3, #124	; 0x7c
   24d98:	18fb      	adds	r3, r7, r3
   24d9a:	2201      	movs	r2, #1
   24d9c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   24d9e:	237c      	movs	r3, #124	; 0x7c
   24da0:	18fb      	adds	r3, r7, r3
   24da2:	0018      	movs	r0, r3
   24da4:	4b7e      	ldr	r3, [pc, #504]	; (24fa0 <system_clock_init+0x338>)
   24da6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   24da8:	2006      	movs	r0, #6
   24daa:	4b77      	ldr	r3, [pc, #476]	; (24f88 <system_clock_init+0x320>)
   24dac:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   24dae:	4b7d      	ldr	r3, [pc, #500]	; (24fa4 <system_clock_init+0x33c>)
   24db0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   24db2:	2364      	movs	r3, #100	; 0x64
   24db4:	18fb      	adds	r3, r7, r3
   24db6:	0018      	movs	r0, r3
   24db8:	4b7b      	ldr	r3, [pc, #492]	; (24fa8 <system_clock_init+0x340>)
   24dba:	4798      	blx	r3
   24dbc:	2364      	movs	r3, #100	; 0x64
   24dbe:	18fb      	adds	r3, r7, r3
   24dc0:	2205      	movs	r2, #5
   24dc2:	701a      	strb	r2, [r3, #0]
   24dc4:	2364      	movs	r3, #100	; 0x64
   24dc6:	18fb      	adds	r3, r7, r3
   24dc8:	2201      	movs	r2, #1
   24dca:	605a      	str	r2, [r3, #4]
   24dcc:	2364      	movs	r3, #100	; 0x64
   24dce:	18fb      	adds	r3, r7, r3
   24dd0:	2200      	movs	r2, #0
   24dd2:	721a      	strb	r2, [r3, #8]
   24dd4:	2364      	movs	r3, #100	; 0x64
   24dd6:	18fb      	adds	r3, r7, r3
   24dd8:	2200      	movs	r2, #0
   24dda:	725a      	strb	r2, [r3, #9]
   24ddc:	2364      	movs	r3, #100	; 0x64
   24dde:	18fb      	adds	r3, r7, r3
   24de0:	0019      	movs	r1, r3
   24de2:	2001      	movs	r0, #1
   24de4:	4b71      	ldr	r3, [pc, #452]	; (24fac <system_clock_init+0x344>)
   24de6:	4798      	blx	r3
   24de8:	2001      	movs	r0, #1
   24dea:	4b71      	ldr	r3, [pc, #452]	; (24fb0 <system_clock_init+0x348>)
   24dec:	4798      	blx	r3
   24dee:	234c      	movs	r3, #76	; 0x4c
   24df0:	18fb      	adds	r3, r7, r3
   24df2:	0018      	movs	r0, r3
   24df4:	4b6c      	ldr	r3, [pc, #432]	; (24fa8 <system_clock_init+0x340>)
   24df6:	4798      	blx	r3
   24df8:	234c      	movs	r3, #76	; 0x4c
   24dfa:	18fb      	adds	r3, r7, r3
   24dfc:	2206      	movs	r2, #6
   24dfe:	701a      	strb	r2, [r3, #0]
   24e00:	234c      	movs	r3, #76	; 0x4c
   24e02:	18fb      	adds	r3, r7, r3
   24e04:	2201      	movs	r2, #1
   24e06:	605a      	str	r2, [r3, #4]
   24e08:	234c      	movs	r3, #76	; 0x4c
   24e0a:	18fb      	adds	r3, r7, r3
   24e0c:	2201      	movs	r2, #1
   24e0e:	721a      	strb	r2, [r3, #8]
   24e10:	234c      	movs	r3, #76	; 0x4c
   24e12:	18fb      	adds	r3, r7, r3
   24e14:	2200      	movs	r2, #0
   24e16:	725a      	strb	r2, [r3, #9]
   24e18:	234c      	movs	r3, #76	; 0x4c
   24e1a:	18fb      	adds	r3, r7, r3
   24e1c:	0019      	movs	r1, r3
   24e1e:	2003      	movs	r0, #3
   24e20:	4b62      	ldr	r3, [pc, #392]	; (24fac <system_clock_init+0x344>)
   24e22:	4798      	blx	r3
   24e24:	2003      	movs	r0, #3
   24e26:	4b62      	ldr	r3, [pc, #392]	; (24fb0 <system_clock_init+0x348>)
   24e28:	4798      	blx	r3
   24e2a:	2340      	movs	r3, #64	; 0x40
   24e2c:	18fb      	adds	r3, r7, r3
   24e2e:	0018      	movs	r0, r3
   24e30:	4b5d      	ldr	r3, [pc, #372]	; (24fa8 <system_clock_init+0x340>)
   24e32:	4798      	blx	r3
   24e34:	2340      	movs	r3, #64	; 0x40
   24e36:	18fb      	adds	r3, r7, r3
   24e38:	2203      	movs	r2, #3
   24e3a:	701a      	strb	r2, [r3, #0]
   24e3c:	2340      	movs	r3, #64	; 0x40
   24e3e:	18fb      	adds	r3, r7, r3
   24e40:	2220      	movs	r2, #32
   24e42:	605a      	str	r2, [r3, #4]
   24e44:	2340      	movs	r3, #64	; 0x40
   24e46:	18fb      	adds	r3, r7, r3
   24e48:	2200      	movs	r2, #0
   24e4a:	721a      	strb	r2, [r3, #8]
   24e4c:	2340      	movs	r3, #64	; 0x40
   24e4e:	18fb      	adds	r3, r7, r3
   24e50:	2200      	movs	r2, #0
   24e52:	725a      	strb	r2, [r3, #9]
   24e54:	2340      	movs	r3, #64	; 0x40
   24e56:	18fb      	adds	r3, r7, r3
   24e58:	0019      	movs	r1, r3
   24e5a:	2004      	movs	r0, #4
   24e5c:	4b53      	ldr	r3, [pc, #332]	; (24fac <system_clock_init+0x344>)
   24e5e:	4798      	blx	r3
   24e60:	2004      	movs	r0, #4
   24e62:	4b53      	ldr	r3, [pc, #332]	; (24fb0 <system_clock_init+0x348>)
   24e64:	4798      	blx	r3
   24e66:	2334      	movs	r3, #52	; 0x34
   24e68:	18fb      	adds	r3, r7, r3
   24e6a:	0018      	movs	r0, r3
   24e6c:	4b4e      	ldr	r3, [pc, #312]	; (24fa8 <system_clock_init+0x340>)
   24e6e:	4798      	blx	r3
   24e70:	2334      	movs	r3, #52	; 0x34
   24e72:	18fb      	adds	r3, r7, r3
   24e74:	2207      	movs	r2, #7
   24e76:	701a      	strb	r2, [r3, #0]
   24e78:	2334      	movs	r3, #52	; 0x34
   24e7a:	18fb      	adds	r3, r7, r3
   24e7c:	2201      	movs	r2, #1
   24e7e:	605a      	str	r2, [r3, #4]
   24e80:	2334      	movs	r3, #52	; 0x34
   24e82:	18fb      	adds	r3, r7, r3
   24e84:	2200      	movs	r2, #0
   24e86:	721a      	strb	r2, [r3, #8]
   24e88:	2334      	movs	r3, #52	; 0x34
   24e8a:	18fb      	adds	r3, r7, r3
   24e8c:	2200      	movs	r2, #0
   24e8e:	725a      	strb	r2, [r3, #9]
   24e90:	2334      	movs	r3, #52	; 0x34
   24e92:	18fb      	adds	r3, r7, r3
   24e94:	0019      	movs	r1, r3
   24e96:	2005      	movs	r0, #5
   24e98:	4b44      	ldr	r3, [pc, #272]	; (24fac <system_clock_init+0x344>)
   24e9a:	4798      	blx	r3
   24e9c:	2005      	movs	r0, #5
   24e9e:	4b44      	ldr	r3, [pc, #272]	; (24fb0 <system_clock_init+0x348>)
   24ea0:	4798      	blx	r3
   24ea2:	2328      	movs	r3, #40	; 0x28
   24ea4:	18fb      	adds	r3, r7, r3
   24ea6:	0018      	movs	r0, r3
   24ea8:	4b3f      	ldr	r3, [pc, #252]	; (24fa8 <system_clock_init+0x340>)
   24eaa:	4798      	blx	r3
   24eac:	2328      	movs	r3, #40	; 0x28
   24eae:	18fb      	adds	r3, r7, r3
   24eb0:	2206      	movs	r2, #6
   24eb2:	701a      	strb	r2, [r3, #0]
   24eb4:	2328      	movs	r3, #40	; 0x28
   24eb6:	18fb      	adds	r3, r7, r3
   24eb8:	2201      	movs	r2, #1
   24eba:	605a      	str	r2, [r3, #4]
   24ebc:	2328      	movs	r3, #40	; 0x28
   24ebe:	18fb      	adds	r3, r7, r3
   24ec0:	2201      	movs	r2, #1
   24ec2:	721a      	strb	r2, [r3, #8]
   24ec4:	2328      	movs	r3, #40	; 0x28
   24ec6:	18fb      	adds	r3, r7, r3
   24ec8:	2200      	movs	r2, #0
   24eca:	725a      	strb	r2, [r3, #9]
   24ecc:	2328      	movs	r3, #40	; 0x28
   24ece:	18fb      	adds	r3, r7, r3
   24ed0:	0019      	movs	r1, r3
   24ed2:	2006      	movs	r0, #6
   24ed4:	4b35      	ldr	r3, [pc, #212]	; (24fac <system_clock_init+0x344>)
   24ed6:	4798      	blx	r3
   24ed8:	2006      	movs	r0, #6
   24eda:	4b35      	ldr	r3, [pc, #212]	; (24fb0 <system_clock_init+0x348>)
   24edc:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   24ede:	230c      	movs	r3, #12
   24ee0:	18fb      	adds	r3, r7, r3
   24ee2:	0018      	movs	r0, r3
   24ee4:	4b33      	ldr	r3, [pc, #204]	; (24fb4 <system_clock_init+0x34c>)
   24ee6:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   24ee8:	230c      	movs	r3, #12
   24eea:	18fb      	adds	r3, r7, r3
   24eec:	2201      	movs	r2, #1
   24eee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   24ef0:	230c      	movs	r3, #12
   24ef2:	18fb      	adds	r3, r7, r3
   24ef4:	0019      	movs	r1, r3
   24ef6:	2000      	movs	r0, #0
   24ef8:	4b2f      	ldr	r3, [pc, #188]	; (24fb8 <system_clock_init+0x350>)
   24efa:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   24efc:	2000      	movs	r0, #0
   24efe:	4b2f      	ldr	r3, [pc, #188]	; (24fbc <system_clock_init+0x354>)
   24f00:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   24f02:	2007      	movs	r0, #7
   24f04:	4b20      	ldr	r3, [pc, #128]	; (24f88 <system_clock_init+0x320>)
   24f06:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   24f08:	46c0      	nop			; (mov r8, r8)
   24f0a:	2007      	movs	r0, #7
   24f0c:	4b1f      	ldr	r3, [pc, #124]	; (24f8c <system_clock_init+0x324>)
   24f0e:	4798      	blx	r3
   24f10:	0003      	movs	r3, r0
   24f12:	001a      	movs	r2, r3
   24f14:	2301      	movs	r3, #1
   24f16:	4053      	eors	r3, r2
   24f18:	b2db      	uxtb	r3, r3
   24f1a:	2b00      	cmp	r3, #0
   24f1c:	d1f5      	bne.n	24f0a <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   24f1e:	2000      	movs	r0, #0
   24f20:	4b27      	ldr	r3, [pc, #156]	; (24fc0 <system_clock_init+0x358>)
   24f22:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   24f24:	2100      	movs	r1, #0
   24f26:	2000      	movs	r0, #0
   24f28:	4b26      	ldr	r3, [pc, #152]	; (24fc4 <system_clock_init+0x35c>)
   24f2a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   24f2c:	2100      	movs	r1, #0
   24f2e:	2001      	movs	r0, #1
   24f30:	4b24      	ldr	r3, [pc, #144]	; (24fc4 <system_clock_init+0x35c>)
   24f32:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   24f34:	2100      	movs	r1, #0
   24f36:	2002      	movs	r0, #2
   24f38:	4b22      	ldr	r3, [pc, #136]	; (24fc4 <system_clock_init+0x35c>)
   24f3a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   24f3c:	003b      	movs	r3, r7
   24f3e:	0018      	movs	r0, r3
   24f40:	4b19      	ldr	r3, [pc, #100]	; (24fa8 <system_clock_init+0x340>)
   24f42:	4798      	blx	r3
   24f44:	003b      	movs	r3, r7
   24f46:	2207      	movs	r2, #7
   24f48:	701a      	strb	r2, [r3, #0]
   24f4a:	003b      	movs	r3, r7
   24f4c:	2201      	movs	r2, #1
   24f4e:	605a      	str	r2, [r3, #4]
   24f50:	003b      	movs	r3, r7
   24f52:	2200      	movs	r2, #0
   24f54:	721a      	strb	r2, [r3, #8]
   24f56:	003b      	movs	r3, r7
   24f58:	2200      	movs	r2, #0
   24f5a:	725a      	strb	r2, [r3, #9]
   24f5c:	003b      	movs	r3, r7
   24f5e:	0019      	movs	r1, r3
   24f60:	2000      	movs	r0, #0
   24f62:	4b12      	ldr	r3, [pc, #72]	; (24fac <system_clock_init+0x344>)
   24f64:	4798      	blx	r3
   24f66:	2000      	movs	r0, #0
   24f68:	4b11      	ldr	r3, [pc, #68]	; (24fb0 <system_clock_init+0x348>)
   24f6a:	4798      	blx	r3
#endif
}
   24f6c:	46c0      	nop			; (mov r8, r8)
   24f6e:	46bd      	mov	sp, r7
   24f70:	b02a      	add	sp, #168	; 0xa8
   24f72:	bd80      	pop	{r7, pc}
   24f74:	40000800 	.word	0x40000800
   24f78:	00024745 	.word	0x00024745
   24f7c:	00024c31 	.word	0x00024c31
   24f80:	00024615 	.word	0x00024615
   24f84:	00024911 	.word	0x00024911
   24f88:	00024b01 	.word	0x00024b01
   24f8c:	00024bad 	.word	0x00024bad
   24f90:	0002467f 	.word	0x0002467f
   24f94:	00806024 	.word	0x00806024
   24f98:	00024a31 	.word	0x00024a31
   24f9c:	0002465d 	.word	0x0002465d
   24fa0:	00024899 	.word	0x00024899
   24fa4:	0002506d 	.word	0x0002506d
   24fa8:	000245d1 	.word	0x000245d1
   24fac:	0002509d 	.word	0x0002509d
   24fb0:	000251c1 	.word	0x000251c1
   24fb4:	000245ff 	.word	0x000245ff
   24fb8:	000252f5 	.word	0x000252f5
   24fbc:	00025339 	.word	0x00025339
   24fc0:	000246d1 	.word	0x000246d1
   24fc4:	000246f1 	.word	0x000246f1

00024fc8 <system_apb_clock_set_mask>:
{
   24fc8:	b580      	push	{r7, lr}
   24fca:	b082      	sub	sp, #8
   24fcc:	af00      	add	r7, sp, #0
   24fce:	0002      	movs	r2, r0
   24fd0:	6039      	str	r1, [r7, #0]
   24fd2:	1dfb      	adds	r3, r7, #7
   24fd4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24fd6:	1dfb      	adds	r3, r7, #7
   24fd8:	781b      	ldrb	r3, [r3, #0]
   24fda:	2b01      	cmp	r3, #1
   24fdc:	d00a      	beq.n	24ff4 <system_apb_clock_set_mask+0x2c>
   24fde:	2b02      	cmp	r3, #2
   24fe0:	d00f      	beq.n	25002 <system_apb_clock_set_mask+0x3a>
   24fe2:	2b00      	cmp	r3, #0
   24fe4:	d114      	bne.n	25010 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   24fe6:	4b0e      	ldr	r3, [pc, #56]	; (25020 <system_apb_clock_set_mask+0x58>)
   24fe8:	4a0d      	ldr	r2, [pc, #52]	; (25020 <system_apb_clock_set_mask+0x58>)
   24fea:	6991      	ldr	r1, [r2, #24]
   24fec:	683a      	ldr	r2, [r7, #0]
   24fee:	430a      	orrs	r2, r1
   24ff0:	619a      	str	r2, [r3, #24]
			break;
   24ff2:	e00f      	b.n	25014 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   24ff4:	4b0a      	ldr	r3, [pc, #40]	; (25020 <system_apb_clock_set_mask+0x58>)
   24ff6:	4a0a      	ldr	r2, [pc, #40]	; (25020 <system_apb_clock_set_mask+0x58>)
   24ff8:	69d1      	ldr	r1, [r2, #28]
   24ffa:	683a      	ldr	r2, [r7, #0]
   24ffc:	430a      	orrs	r2, r1
   24ffe:	61da      	str	r2, [r3, #28]
			break;
   25000:	e008      	b.n	25014 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   25002:	4b07      	ldr	r3, [pc, #28]	; (25020 <system_apb_clock_set_mask+0x58>)
   25004:	4a06      	ldr	r2, [pc, #24]	; (25020 <system_apb_clock_set_mask+0x58>)
   25006:	6a11      	ldr	r1, [r2, #32]
   25008:	683a      	ldr	r2, [r7, #0]
   2500a:	430a      	orrs	r2, r1
   2500c:	621a      	str	r2, [r3, #32]
			break;
   2500e:	e001      	b.n	25014 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   25010:	2317      	movs	r3, #23
   25012:	e000      	b.n	25016 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25014:	2300      	movs	r3, #0
}
   25016:	0018      	movs	r0, r3
   25018:	46bd      	mov	sp, r7
   2501a:	b002      	add	sp, #8
   2501c:	bd80      	pop	{r7, pc}
   2501e:	46c0      	nop			; (mov r8, r8)
   25020:	40000400 	.word	0x40000400

00025024 <system_interrupt_enter_critical_section>:
{
   25024:	b580      	push	{r7, lr}
   25026:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   25028:	4b02      	ldr	r3, [pc, #8]	; (25034 <system_interrupt_enter_critical_section+0x10>)
   2502a:	4798      	blx	r3
}
   2502c:	46c0      	nop			; (mov r8, r8)
   2502e:	46bd      	mov	sp, r7
   25030:	bd80      	pop	{r7, pc}
   25032:	46c0      	nop			; (mov r8, r8)
   25034:	0002453d 	.word	0x0002453d

00025038 <system_interrupt_leave_critical_section>:
{
   25038:	b580      	push	{r7, lr}
   2503a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2503c:	4b02      	ldr	r3, [pc, #8]	; (25048 <system_interrupt_leave_critical_section+0x10>)
   2503e:	4798      	blx	r3
}
   25040:	46c0      	nop			; (mov r8, r8)
   25042:	46bd      	mov	sp, r7
   25044:	bd80      	pop	{r7, pc}
   25046:	46c0      	nop			; (mov r8, r8)
   25048:	00024591 	.word	0x00024591

0002504c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2504c:	b580      	push	{r7, lr}
   2504e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   25050:	4b05      	ldr	r3, [pc, #20]	; (25068 <system_gclk_is_syncing+0x1c>)
   25052:	785b      	ldrb	r3, [r3, #1]
   25054:	b2db      	uxtb	r3, r3
   25056:	b25b      	sxtb	r3, r3
   25058:	2b00      	cmp	r3, #0
   2505a:	da01      	bge.n	25060 <system_gclk_is_syncing+0x14>
		return true;
   2505c:	2301      	movs	r3, #1
   2505e:	e000      	b.n	25062 <system_gclk_is_syncing+0x16>
	}

	return false;
   25060:	2300      	movs	r3, #0
}
   25062:	0018      	movs	r0, r3
   25064:	46bd      	mov	sp, r7
   25066:	bd80      	pop	{r7, pc}
   25068:	40000c00 	.word	0x40000c00

0002506c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2506c:	b580      	push	{r7, lr}
   2506e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   25070:	2108      	movs	r1, #8
   25072:	2000      	movs	r0, #0
   25074:	4b07      	ldr	r3, [pc, #28]	; (25094 <system_gclk_init+0x28>)
   25076:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   25078:	4b07      	ldr	r3, [pc, #28]	; (25098 <system_gclk_init+0x2c>)
   2507a:	2201      	movs	r2, #1
   2507c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2507e:	46c0      	nop			; (mov r8, r8)
   25080:	4b05      	ldr	r3, [pc, #20]	; (25098 <system_gclk_init+0x2c>)
   25082:	781b      	ldrb	r3, [r3, #0]
   25084:	b2db      	uxtb	r3, r3
   25086:	001a      	movs	r2, r3
   25088:	2301      	movs	r3, #1
   2508a:	4013      	ands	r3, r2
   2508c:	d1f8      	bne.n	25080 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2508e:	46c0      	nop			; (mov r8, r8)
   25090:	46bd      	mov	sp, r7
   25092:	bd80      	pop	{r7, pc}
   25094:	00024fc9 	.word	0x00024fc9
   25098:	40000c00 	.word	0x40000c00

0002509c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2509c:	b580      	push	{r7, lr}
   2509e:	b086      	sub	sp, #24
   250a0:	af00      	add	r7, sp, #0
   250a2:	0002      	movs	r2, r0
   250a4:	6039      	str	r1, [r7, #0]
   250a6:	1dfb      	adds	r3, r7, #7
   250a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   250aa:	1dfb      	adds	r3, r7, #7
   250ac:	781b      	ldrb	r3, [r3, #0]
   250ae:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   250b0:	1dfb      	adds	r3, r7, #7
   250b2:	781b      	ldrb	r3, [r3, #0]
   250b4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   250b6:	683b      	ldr	r3, [r7, #0]
   250b8:	781b      	ldrb	r3, [r3, #0]
   250ba:	021b      	lsls	r3, r3, #8
   250bc:	001a      	movs	r2, r3
   250be:	697b      	ldr	r3, [r7, #20]
   250c0:	4313      	orrs	r3, r2
   250c2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   250c4:	683b      	ldr	r3, [r7, #0]
   250c6:	785b      	ldrb	r3, [r3, #1]
   250c8:	2b00      	cmp	r3, #0
   250ca:	d004      	beq.n	250d6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   250cc:	697b      	ldr	r3, [r7, #20]
   250ce:	2280      	movs	r2, #128	; 0x80
   250d0:	02d2      	lsls	r2, r2, #11
   250d2:	4313      	orrs	r3, r2
   250d4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   250d6:	683b      	ldr	r3, [r7, #0]
   250d8:	7a5b      	ldrb	r3, [r3, #9]
   250da:	2b00      	cmp	r3, #0
   250dc:	d004      	beq.n	250e8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   250de:	697b      	ldr	r3, [r7, #20]
   250e0:	2280      	movs	r2, #128	; 0x80
   250e2:	0312      	lsls	r2, r2, #12
   250e4:	4313      	orrs	r3, r2
   250e6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   250e8:	683b      	ldr	r3, [r7, #0]
   250ea:	685b      	ldr	r3, [r3, #4]
   250ec:	2b01      	cmp	r3, #1
   250ee:	d92c      	bls.n	2514a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   250f0:	683b      	ldr	r3, [r7, #0]
   250f2:	685a      	ldr	r2, [r3, #4]
   250f4:	683b      	ldr	r3, [r7, #0]
   250f6:	685b      	ldr	r3, [r3, #4]
   250f8:	3b01      	subs	r3, #1
   250fa:	4013      	ands	r3, r2
   250fc:	d11a      	bne.n	25134 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   250fe:	2300      	movs	r3, #0
   25100:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   25102:	2302      	movs	r3, #2
   25104:	60bb      	str	r3, [r7, #8]
   25106:	e005      	b.n	25114 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   25108:	68fb      	ldr	r3, [r7, #12]
   2510a:	3301      	adds	r3, #1
   2510c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2510e:	68bb      	ldr	r3, [r7, #8]
   25110:	005b      	lsls	r3, r3, #1
   25112:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   25114:	683b      	ldr	r3, [r7, #0]
   25116:	685a      	ldr	r2, [r3, #4]
   25118:	68bb      	ldr	r3, [r7, #8]
   2511a:	429a      	cmp	r2, r3
   2511c:	d8f4      	bhi.n	25108 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2511e:	68fb      	ldr	r3, [r7, #12]
   25120:	021b      	lsls	r3, r3, #8
   25122:	693a      	ldr	r2, [r7, #16]
   25124:	4313      	orrs	r3, r2
   25126:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   25128:	697b      	ldr	r3, [r7, #20]
   2512a:	2280      	movs	r2, #128	; 0x80
   2512c:	0352      	lsls	r2, r2, #13
   2512e:	4313      	orrs	r3, r2
   25130:	617b      	str	r3, [r7, #20]
   25132:	e00a      	b.n	2514a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   25134:	683b      	ldr	r3, [r7, #0]
   25136:	685b      	ldr	r3, [r3, #4]
   25138:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2513a:	693a      	ldr	r2, [r7, #16]
   2513c:	4313      	orrs	r3, r2
   2513e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   25140:	697b      	ldr	r3, [r7, #20]
   25142:	2280      	movs	r2, #128	; 0x80
   25144:	0292      	lsls	r2, r2, #10
   25146:	4313      	orrs	r3, r2
   25148:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2514a:	683b      	ldr	r3, [r7, #0]
   2514c:	7a1b      	ldrb	r3, [r3, #8]
   2514e:	2b00      	cmp	r3, #0
   25150:	d004      	beq.n	2515c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   25152:	697b      	ldr	r3, [r7, #20]
   25154:	2280      	movs	r2, #128	; 0x80
   25156:	0392      	lsls	r2, r2, #14
   25158:	4313      	orrs	r3, r2
   2515a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2515c:	46c0      	nop			; (mov r8, r8)
   2515e:	4b13      	ldr	r3, [pc, #76]	; (251ac <system_gclk_gen_set_config+0x110>)
   25160:	4798      	blx	r3
   25162:	1e03      	subs	r3, r0, #0
   25164:	d1fb      	bne.n	2515e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   25166:	4b12      	ldr	r3, [pc, #72]	; (251b0 <system_gclk_gen_set_config+0x114>)
   25168:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2516a:	4a12      	ldr	r2, [pc, #72]	; (251b4 <system_gclk_gen_set_config+0x118>)
   2516c:	1dfb      	adds	r3, r7, #7
   2516e:	781b      	ldrb	r3, [r3, #0]
   25170:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   25172:	46c0      	nop			; (mov r8, r8)
   25174:	4b0d      	ldr	r3, [pc, #52]	; (251ac <system_gclk_gen_set_config+0x110>)
   25176:	4798      	blx	r3
   25178:	1e03      	subs	r3, r0, #0
   2517a:	d1fb      	bne.n	25174 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2517c:	4b0e      	ldr	r3, [pc, #56]	; (251b8 <system_gclk_gen_set_config+0x11c>)
   2517e:	693a      	ldr	r2, [r7, #16]
   25180:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   25182:	46c0      	nop			; (mov r8, r8)
   25184:	4b09      	ldr	r3, [pc, #36]	; (251ac <system_gclk_gen_set_config+0x110>)
   25186:	4798      	blx	r3
   25188:	1e03      	subs	r3, r0, #0
   2518a:	d1fb      	bne.n	25184 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2518c:	4b0a      	ldr	r3, [pc, #40]	; (251b8 <system_gclk_gen_set_config+0x11c>)
   2518e:	4a0a      	ldr	r2, [pc, #40]	; (251b8 <system_gclk_gen_set_config+0x11c>)
   25190:	6851      	ldr	r1, [r2, #4]
   25192:	2280      	movs	r2, #128	; 0x80
   25194:	0252      	lsls	r2, r2, #9
   25196:	4011      	ands	r1, r2
   25198:	697a      	ldr	r2, [r7, #20]
   2519a:	430a      	orrs	r2, r1
   2519c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2519e:	4b07      	ldr	r3, [pc, #28]	; (251bc <system_gclk_gen_set_config+0x120>)
   251a0:	4798      	blx	r3
}
   251a2:	46c0      	nop			; (mov r8, r8)
   251a4:	46bd      	mov	sp, r7
   251a6:	b006      	add	sp, #24
   251a8:	bd80      	pop	{r7, pc}
   251aa:	46c0      	nop			; (mov r8, r8)
   251ac:	0002504d 	.word	0x0002504d
   251b0:	00025025 	.word	0x00025025
   251b4:	40000c08 	.word	0x40000c08
   251b8:	40000c00 	.word	0x40000c00
   251bc:	00025039 	.word	0x00025039

000251c0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   251c0:	b580      	push	{r7, lr}
   251c2:	b082      	sub	sp, #8
   251c4:	af00      	add	r7, sp, #0
   251c6:	0002      	movs	r2, r0
   251c8:	1dfb      	adds	r3, r7, #7
   251ca:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   251cc:	46c0      	nop			; (mov r8, r8)
   251ce:	4b0e      	ldr	r3, [pc, #56]	; (25208 <system_gclk_gen_enable+0x48>)
   251d0:	4798      	blx	r3
   251d2:	1e03      	subs	r3, r0, #0
   251d4:	d1fb      	bne.n	251ce <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   251d6:	4b0d      	ldr	r3, [pc, #52]	; (2520c <system_gclk_gen_enable+0x4c>)
   251d8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   251da:	4a0d      	ldr	r2, [pc, #52]	; (25210 <system_gclk_gen_enable+0x50>)
   251dc:	1dfb      	adds	r3, r7, #7
   251de:	781b      	ldrb	r3, [r3, #0]
   251e0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   251e2:	46c0      	nop			; (mov r8, r8)
   251e4:	4b08      	ldr	r3, [pc, #32]	; (25208 <system_gclk_gen_enable+0x48>)
   251e6:	4798      	blx	r3
   251e8:	1e03      	subs	r3, r0, #0
   251ea:	d1fb      	bne.n	251e4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   251ec:	4b09      	ldr	r3, [pc, #36]	; (25214 <system_gclk_gen_enable+0x54>)
   251ee:	4a09      	ldr	r2, [pc, #36]	; (25214 <system_gclk_gen_enable+0x54>)
   251f0:	6852      	ldr	r2, [r2, #4]
   251f2:	2180      	movs	r1, #128	; 0x80
   251f4:	0249      	lsls	r1, r1, #9
   251f6:	430a      	orrs	r2, r1
   251f8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   251fa:	4b07      	ldr	r3, [pc, #28]	; (25218 <system_gclk_gen_enable+0x58>)
   251fc:	4798      	blx	r3
}
   251fe:	46c0      	nop			; (mov r8, r8)
   25200:	46bd      	mov	sp, r7
   25202:	b002      	add	sp, #8
   25204:	bd80      	pop	{r7, pc}
   25206:	46c0      	nop			; (mov r8, r8)
   25208:	0002504d 	.word	0x0002504d
   2520c:	00025025 	.word	0x00025025
   25210:	40000c04 	.word	0x40000c04
   25214:	40000c00 	.word	0x40000c00
   25218:	00025039 	.word	0x00025039

0002521c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2521c:	b580      	push	{r7, lr}
   2521e:	b086      	sub	sp, #24
   25220:	af00      	add	r7, sp, #0
   25222:	0002      	movs	r2, r0
   25224:	1dfb      	adds	r3, r7, #7
   25226:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   25228:	46c0      	nop			; (mov r8, r8)
   2522a:	4b2a      	ldr	r3, [pc, #168]	; (252d4 <system_gclk_gen_get_hz+0xb8>)
   2522c:	4798      	blx	r3
   2522e:	1e03      	subs	r3, r0, #0
   25230:	d1fb      	bne.n	2522a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   25232:	4b29      	ldr	r3, [pc, #164]	; (252d8 <system_gclk_gen_get_hz+0xbc>)
   25234:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   25236:	4a29      	ldr	r2, [pc, #164]	; (252dc <system_gclk_gen_get_hz+0xc0>)
   25238:	1dfb      	adds	r3, r7, #7
   2523a:	781b      	ldrb	r3, [r3, #0]
   2523c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2523e:	46c0      	nop			; (mov r8, r8)
   25240:	4b24      	ldr	r3, [pc, #144]	; (252d4 <system_gclk_gen_get_hz+0xb8>)
   25242:	4798      	blx	r3
   25244:	1e03      	subs	r3, r0, #0
   25246:	d1fb      	bne.n	25240 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   25248:	4b25      	ldr	r3, [pc, #148]	; (252e0 <system_gclk_gen_get_hz+0xc4>)
   2524a:	685b      	ldr	r3, [r3, #4]
   2524c:	04db      	lsls	r3, r3, #19
   2524e:	0edb      	lsrs	r3, r3, #27
   25250:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   25252:	0018      	movs	r0, r3
   25254:	4b23      	ldr	r3, [pc, #140]	; (252e4 <system_gclk_gen_get_hz+0xc8>)
   25256:	4798      	blx	r3
   25258:	0003      	movs	r3, r0
   2525a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2525c:	4a1f      	ldr	r2, [pc, #124]	; (252dc <system_gclk_gen_get_hz+0xc0>)
   2525e:	1dfb      	adds	r3, r7, #7
   25260:	781b      	ldrb	r3, [r3, #0]
   25262:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   25264:	4b1e      	ldr	r3, [pc, #120]	; (252e0 <system_gclk_gen_get_hz+0xc4>)
   25266:	685b      	ldr	r3, [r3, #4]
   25268:	02db      	lsls	r3, r3, #11
   2526a:	0fdb      	lsrs	r3, r3, #31
   2526c:	b2da      	uxtb	r2, r3
   2526e:	2313      	movs	r3, #19
   25270:	18fb      	adds	r3, r7, r3
   25272:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   25274:	4a1c      	ldr	r2, [pc, #112]	; (252e8 <system_gclk_gen_get_hz+0xcc>)
   25276:	1dfb      	adds	r3, r7, #7
   25278:	781b      	ldrb	r3, [r3, #0]
   2527a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2527c:	46c0      	nop			; (mov r8, r8)
   2527e:	4b15      	ldr	r3, [pc, #84]	; (252d4 <system_gclk_gen_get_hz+0xb8>)
   25280:	4798      	blx	r3
   25282:	1e03      	subs	r3, r0, #0
   25284:	d1fb      	bne.n	2527e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   25286:	4b16      	ldr	r3, [pc, #88]	; (252e0 <system_gclk_gen_get_hz+0xc4>)
   25288:	689b      	ldr	r3, [r3, #8]
   2528a:	021b      	lsls	r3, r3, #8
   2528c:	0c1b      	lsrs	r3, r3, #16
   2528e:	b29b      	uxth	r3, r3
   25290:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   25292:	4b16      	ldr	r3, [pc, #88]	; (252ec <system_gclk_gen_get_hz+0xd0>)
   25294:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   25296:	2313      	movs	r3, #19
   25298:	18fb      	adds	r3, r7, r3
   2529a:	781b      	ldrb	r3, [r3, #0]
   2529c:	2b00      	cmp	r3, #0
   2529e:	d109      	bne.n	252b4 <system_gclk_gen_get_hz+0x98>
   252a0:	68fb      	ldr	r3, [r7, #12]
   252a2:	2b01      	cmp	r3, #1
   252a4:	d906      	bls.n	252b4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   252a6:	4b12      	ldr	r3, [pc, #72]	; (252f0 <system_gclk_gen_get_hz+0xd4>)
   252a8:	68f9      	ldr	r1, [r7, #12]
   252aa:	6978      	ldr	r0, [r7, #20]
   252ac:	4798      	blx	r3
   252ae:	0003      	movs	r3, r0
   252b0:	617b      	str	r3, [r7, #20]
   252b2:	e00a      	b.n	252ca <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   252b4:	2313      	movs	r3, #19
   252b6:	18fb      	adds	r3, r7, r3
   252b8:	781b      	ldrb	r3, [r3, #0]
   252ba:	2b00      	cmp	r3, #0
   252bc:	d005      	beq.n	252ca <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   252be:	68fb      	ldr	r3, [r7, #12]
   252c0:	3301      	adds	r3, #1
   252c2:	697a      	ldr	r2, [r7, #20]
   252c4:	40da      	lsrs	r2, r3
   252c6:	0013      	movs	r3, r2
   252c8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   252ca:	697b      	ldr	r3, [r7, #20]
}
   252cc:	0018      	movs	r0, r3
   252ce:	46bd      	mov	sp, r7
   252d0:	b006      	add	sp, #24
   252d2:	bd80      	pop	{r7, pc}
   252d4:	0002504d 	.word	0x0002504d
   252d8:	00025025 	.word	0x00025025
   252dc:	40000c04 	.word	0x40000c04
   252e0:	40000c00 	.word	0x40000c00
   252e4:	000247d9 	.word	0x000247d9
   252e8:	40000c08 	.word	0x40000c08
   252ec:	00025039 	.word	0x00025039
   252f0:	00026ee5 	.word	0x00026ee5

000252f4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   252f4:	b580      	push	{r7, lr}
   252f6:	b084      	sub	sp, #16
   252f8:	af00      	add	r7, sp, #0
   252fa:	0002      	movs	r2, r0
   252fc:	6039      	str	r1, [r7, #0]
   252fe:	1dfb      	adds	r3, r7, #7
   25300:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   25302:	1dfb      	adds	r3, r7, #7
   25304:	781b      	ldrb	r3, [r3, #0]
   25306:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   25308:	683b      	ldr	r3, [r7, #0]
   2530a:	781b      	ldrb	r3, [r3, #0]
   2530c:	021b      	lsls	r3, r3, #8
   2530e:	001a      	movs	r2, r3
   25310:	68fb      	ldr	r3, [r7, #12]
   25312:	4313      	orrs	r3, r2
   25314:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   25316:	1dfb      	adds	r3, r7, #7
   25318:	781b      	ldrb	r3, [r3, #0]
   2531a:	0018      	movs	r0, r3
   2531c:	4b04      	ldr	r3, [pc, #16]	; (25330 <system_gclk_chan_set_config+0x3c>)
   2531e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   25320:	4b04      	ldr	r3, [pc, #16]	; (25334 <system_gclk_chan_set_config+0x40>)
   25322:	68fa      	ldr	r2, [r7, #12]
   25324:	b292      	uxth	r2, r2
   25326:	805a      	strh	r2, [r3, #2]
}
   25328:	46c0      	nop			; (mov r8, r8)
   2532a:	46bd      	mov	sp, r7
   2532c:	b004      	add	sp, #16
   2532e:	bd80      	pop	{r7, pc}
   25330:	00025381 	.word	0x00025381
   25334:	40000c00 	.word	0x40000c00

00025338 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   25338:	b580      	push	{r7, lr}
   2533a:	b082      	sub	sp, #8
   2533c:	af00      	add	r7, sp, #0
   2533e:	0002      	movs	r2, r0
   25340:	1dfb      	adds	r3, r7, #7
   25342:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   25344:	4b0a      	ldr	r3, [pc, #40]	; (25370 <system_gclk_chan_enable+0x38>)
   25346:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   25348:	4a0a      	ldr	r2, [pc, #40]	; (25374 <system_gclk_chan_enable+0x3c>)
   2534a:	1dfb      	adds	r3, r7, #7
   2534c:	781b      	ldrb	r3, [r3, #0]
   2534e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   25350:	4909      	ldr	r1, [pc, #36]	; (25378 <system_gclk_chan_enable+0x40>)
   25352:	4b09      	ldr	r3, [pc, #36]	; (25378 <system_gclk_chan_enable+0x40>)
   25354:	885b      	ldrh	r3, [r3, #2]
   25356:	b29b      	uxth	r3, r3
   25358:	2280      	movs	r2, #128	; 0x80
   2535a:	01d2      	lsls	r2, r2, #7
   2535c:	4313      	orrs	r3, r2
   2535e:	b29b      	uxth	r3, r3
   25360:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   25362:	4b06      	ldr	r3, [pc, #24]	; (2537c <system_gclk_chan_enable+0x44>)
   25364:	4798      	blx	r3
}
   25366:	46c0      	nop			; (mov r8, r8)
   25368:	46bd      	mov	sp, r7
   2536a:	b002      	add	sp, #8
   2536c:	bd80      	pop	{r7, pc}
   2536e:	46c0      	nop			; (mov r8, r8)
   25370:	00025025 	.word	0x00025025
   25374:	40000c02 	.word	0x40000c02
   25378:	40000c00 	.word	0x40000c00
   2537c:	00025039 	.word	0x00025039

00025380 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   25380:	b580      	push	{r7, lr}
   25382:	b084      	sub	sp, #16
   25384:	af00      	add	r7, sp, #0
   25386:	0002      	movs	r2, r0
   25388:	1dfb      	adds	r3, r7, #7
   2538a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2538c:	4b1c      	ldr	r3, [pc, #112]	; (25400 <system_gclk_chan_disable+0x80>)
   2538e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   25390:	4a1c      	ldr	r2, [pc, #112]	; (25404 <system_gclk_chan_disable+0x84>)
   25392:	1dfb      	adds	r3, r7, #7
   25394:	781b      	ldrb	r3, [r3, #0]
   25396:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   25398:	4b1b      	ldr	r3, [pc, #108]	; (25408 <system_gclk_chan_disable+0x88>)
   2539a:	885b      	ldrh	r3, [r3, #2]
   2539c:	051b      	lsls	r3, r3, #20
   2539e:	0f1b      	lsrs	r3, r3, #28
   253a0:	b2db      	uxtb	r3, r3
   253a2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   253a4:	4a18      	ldr	r2, [pc, #96]	; (25408 <system_gclk_chan_disable+0x88>)
   253a6:	8853      	ldrh	r3, [r2, #2]
   253a8:	4918      	ldr	r1, [pc, #96]	; (2540c <system_gclk_chan_disable+0x8c>)
   253aa:	400b      	ands	r3, r1
   253ac:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   253ae:	4a16      	ldr	r2, [pc, #88]	; (25408 <system_gclk_chan_disable+0x88>)
   253b0:	4b15      	ldr	r3, [pc, #84]	; (25408 <system_gclk_chan_disable+0x88>)
   253b2:	885b      	ldrh	r3, [r3, #2]
   253b4:	b29b      	uxth	r3, r3
   253b6:	4916      	ldr	r1, [pc, #88]	; (25410 <system_gclk_chan_disable+0x90>)
   253b8:	400b      	ands	r3, r1
   253ba:	b29b      	uxth	r3, r3
   253bc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   253be:	46c0      	nop			; (mov r8, r8)
   253c0:	4b11      	ldr	r3, [pc, #68]	; (25408 <system_gclk_chan_disable+0x88>)
   253c2:	885b      	ldrh	r3, [r3, #2]
   253c4:	b29b      	uxth	r3, r3
   253c6:	001a      	movs	r2, r3
   253c8:	2380      	movs	r3, #128	; 0x80
   253ca:	01db      	lsls	r3, r3, #7
   253cc:	4013      	ands	r3, r2
   253ce:	d1f7      	bne.n	253c0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   253d0:	4a0d      	ldr	r2, [pc, #52]	; (25408 <system_gclk_chan_disable+0x88>)
   253d2:	68fb      	ldr	r3, [r7, #12]
   253d4:	b2db      	uxtb	r3, r3
   253d6:	1c19      	adds	r1, r3, #0
   253d8:	230f      	movs	r3, #15
   253da:	400b      	ands	r3, r1
   253dc:	b2d9      	uxtb	r1, r3
   253de:	8853      	ldrh	r3, [r2, #2]
   253e0:	1c08      	adds	r0, r1, #0
   253e2:	210f      	movs	r1, #15
   253e4:	4001      	ands	r1, r0
   253e6:	0208      	lsls	r0, r1, #8
   253e8:	4908      	ldr	r1, [pc, #32]	; (2540c <system_gclk_chan_disable+0x8c>)
   253ea:	400b      	ands	r3, r1
   253ec:	1c19      	adds	r1, r3, #0
   253ee:	1c03      	adds	r3, r0, #0
   253f0:	430b      	orrs	r3, r1
   253f2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   253f4:	4b07      	ldr	r3, [pc, #28]	; (25414 <system_gclk_chan_disable+0x94>)
   253f6:	4798      	blx	r3
}
   253f8:	46c0      	nop			; (mov r8, r8)
   253fa:	46bd      	mov	sp, r7
   253fc:	b004      	add	sp, #16
   253fe:	bd80      	pop	{r7, pc}
   25400:	00025025 	.word	0x00025025
   25404:	40000c02 	.word	0x40000c02
   25408:	40000c00 	.word	0x40000c00
   2540c:	fffff0ff 	.word	0xfffff0ff
   25410:	ffffbfff 	.word	0xffffbfff
   25414:	00025039 	.word	0x00025039

00025418 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   25418:	b580      	push	{r7, lr}
   2541a:	b084      	sub	sp, #16
   2541c:	af00      	add	r7, sp, #0
   2541e:	0002      	movs	r2, r0
   25420:	1dfb      	adds	r3, r7, #7
   25422:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   25424:	4b0d      	ldr	r3, [pc, #52]	; (2545c <system_gclk_chan_get_hz+0x44>)
   25426:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   25428:	4a0d      	ldr	r2, [pc, #52]	; (25460 <system_gclk_chan_get_hz+0x48>)
   2542a:	1dfb      	adds	r3, r7, #7
   2542c:	781b      	ldrb	r3, [r3, #0]
   2542e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   25430:	4b0c      	ldr	r3, [pc, #48]	; (25464 <system_gclk_chan_get_hz+0x4c>)
   25432:	885b      	ldrh	r3, [r3, #2]
   25434:	051b      	lsls	r3, r3, #20
   25436:	0f1b      	lsrs	r3, r3, #28
   25438:	b2da      	uxtb	r2, r3
   2543a:	230f      	movs	r3, #15
   2543c:	18fb      	adds	r3, r7, r3
   2543e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   25440:	4b09      	ldr	r3, [pc, #36]	; (25468 <system_gclk_chan_get_hz+0x50>)
   25442:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   25444:	230f      	movs	r3, #15
   25446:	18fb      	adds	r3, r7, r3
   25448:	781b      	ldrb	r3, [r3, #0]
   2544a:	0018      	movs	r0, r3
   2544c:	4b07      	ldr	r3, [pc, #28]	; (2546c <system_gclk_chan_get_hz+0x54>)
   2544e:	4798      	blx	r3
   25450:	0003      	movs	r3, r0
}
   25452:	0018      	movs	r0, r3
   25454:	46bd      	mov	sp, r7
   25456:	b004      	add	sp, #16
   25458:	bd80      	pop	{r7, pc}
   2545a:	46c0      	nop			; (mov r8, r8)
   2545c:	00025025 	.word	0x00025025
   25460:	40000c02 	.word	0x40000c02
   25464:	40000c00 	.word	0x40000c00
   25468:	00025039 	.word	0x00025039
   2546c:	0002521d 	.word	0x0002521d

00025470 <system_pinmux_get_group_from_gpio_pin>:
{
   25470:	b580      	push	{r7, lr}
   25472:	b084      	sub	sp, #16
   25474:	af00      	add	r7, sp, #0
   25476:	0002      	movs	r2, r0
   25478:	1dfb      	adds	r3, r7, #7
   2547a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2547c:	230f      	movs	r3, #15
   2547e:	18fb      	adds	r3, r7, r3
   25480:	1dfa      	adds	r2, r7, #7
   25482:	7812      	ldrb	r2, [r2, #0]
   25484:	09d2      	lsrs	r2, r2, #7
   25486:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25488:	230e      	movs	r3, #14
   2548a:	18fb      	adds	r3, r7, r3
   2548c:	1dfa      	adds	r2, r7, #7
   2548e:	7812      	ldrb	r2, [r2, #0]
   25490:	0952      	lsrs	r2, r2, #5
   25492:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25494:	4b0d      	ldr	r3, [pc, #52]	; (254cc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25496:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25498:	230f      	movs	r3, #15
   2549a:	18fb      	adds	r3, r7, r3
   2549c:	781b      	ldrb	r3, [r3, #0]
   2549e:	2b00      	cmp	r3, #0
   254a0:	d10f      	bne.n	254c2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   254a2:	230f      	movs	r3, #15
   254a4:	18fb      	adds	r3, r7, r3
   254a6:	781b      	ldrb	r3, [r3, #0]
   254a8:	009b      	lsls	r3, r3, #2
   254aa:	2210      	movs	r2, #16
   254ac:	4694      	mov	ip, r2
   254ae:	44bc      	add	ip, r7
   254b0:	4463      	add	r3, ip
   254b2:	3b08      	subs	r3, #8
   254b4:	681a      	ldr	r2, [r3, #0]
   254b6:	230e      	movs	r3, #14
   254b8:	18fb      	adds	r3, r7, r3
   254ba:	781b      	ldrb	r3, [r3, #0]
   254bc:	01db      	lsls	r3, r3, #7
   254be:	18d3      	adds	r3, r2, r3
   254c0:	e000      	b.n	254c4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   254c2:	2300      	movs	r3, #0
}
   254c4:	0018      	movs	r0, r3
   254c6:	46bd      	mov	sp, r7
   254c8:	b004      	add	sp, #16
   254ca:	bd80      	pop	{r7, pc}
   254cc:	41004400 	.word	0x41004400

000254d0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   254d0:	b580      	push	{r7, lr}
   254d2:	b088      	sub	sp, #32
   254d4:	af00      	add	r7, sp, #0
   254d6:	60f8      	str	r0, [r7, #12]
   254d8:	60b9      	str	r1, [r7, #8]
   254da:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   254dc:	2300      	movs	r3, #0
   254de:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   254e0:	687b      	ldr	r3, [r7, #4]
   254e2:	78db      	ldrb	r3, [r3, #3]
   254e4:	2201      	movs	r2, #1
   254e6:	4053      	eors	r3, r2
   254e8:	b2db      	uxtb	r3, r3
   254ea:	2b00      	cmp	r3, #0
   254ec:	d035      	beq.n	2555a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   254ee:	687b      	ldr	r3, [r7, #4]
   254f0:	781b      	ldrb	r3, [r3, #0]
   254f2:	2b80      	cmp	r3, #128	; 0x80
   254f4:	d00b      	beq.n	2550e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   254f6:	69fb      	ldr	r3, [r7, #28]
   254f8:	2280      	movs	r2, #128	; 0x80
   254fa:	0252      	lsls	r2, r2, #9
   254fc:	4313      	orrs	r3, r2
   254fe:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   25500:	687b      	ldr	r3, [r7, #4]
   25502:	781b      	ldrb	r3, [r3, #0]
   25504:	061b      	lsls	r3, r3, #24
   25506:	001a      	movs	r2, r3
   25508:	69fb      	ldr	r3, [r7, #28]
   2550a:	4313      	orrs	r3, r2
   2550c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2550e:	687b      	ldr	r3, [r7, #4]
   25510:	785b      	ldrb	r3, [r3, #1]
   25512:	2b00      	cmp	r3, #0
   25514:	d003      	beq.n	2551e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   25516:	687b      	ldr	r3, [r7, #4]
   25518:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2551a:	2b02      	cmp	r3, #2
   2551c:	d110      	bne.n	25540 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2551e:	69fb      	ldr	r3, [r7, #28]
   25520:	2280      	movs	r2, #128	; 0x80
   25522:	0292      	lsls	r2, r2, #10
   25524:	4313      	orrs	r3, r2
   25526:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   25528:	687b      	ldr	r3, [r7, #4]
   2552a:	789b      	ldrb	r3, [r3, #2]
   2552c:	2b00      	cmp	r3, #0
   2552e:	d004      	beq.n	2553a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   25530:	69fb      	ldr	r3, [r7, #28]
   25532:	2280      	movs	r2, #128	; 0x80
   25534:	02d2      	lsls	r2, r2, #11
   25536:	4313      	orrs	r3, r2
   25538:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2553a:	68fb      	ldr	r3, [r7, #12]
   2553c:	68ba      	ldr	r2, [r7, #8]
   2553e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   25540:	687b      	ldr	r3, [r7, #4]
   25542:	785b      	ldrb	r3, [r3, #1]
   25544:	2b01      	cmp	r3, #1
   25546:	d003      	beq.n	25550 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   25548:	687b      	ldr	r3, [r7, #4]
   2554a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2554c:	2b02      	cmp	r3, #2
   2554e:	d107      	bne.n	25560 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   25550:	69fb      	ldr	r3, [r7, #28]
   25552:	4a22      	ldr	r2, [pc, #136]	; (255dc <_system_pinmux_config+0x10c>)
   25554:	4013      	ands	r3, r2
   25556:	61fb      	str	r3, [r7, #28]
   25558:	e002      	b.n	25560 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2555a:	68fb      	ldr	r3, [r7, #12]
   2555c:	68ba      	ldr	r2, [r7, #8]
   2555e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   25560:	68bb      	ldr	r3, [r7, #8]
   25562:	041b      	lsls	r3, r3, #16
   25564:	0c1b      	lsrs	r3, r3, #16
   25566:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   25568:	68bb      	ldr	r3, [r7, #8]
   2556a:	0c1b      	lsrs	r3, r3, #16
   2556c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2556e:	69ba      	ldr	r2, [r7, #24]
   25570:	69fb      	ldr	r3, [r7, #28]
   25572:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   25574:	22a0      	movs	r2, #160	; 0xa0
   25576:	05d2      	lsls	r2, r2, #23
   25578:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2557a:	68fb      	ldr	r3, [r7, #12]
   2557c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2557e:	697a      	ldr	r2, [r7, #20]
   25580:	69fb      	ldr	r3, [r7, #28]
   25582:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   25584:	22d0      	movs	r2, #208	; 0xd0
   25586:	0612      	lsls	r2, r2, #24
   25588:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2558a:	68fb      	ldr	r3, [r7, #12]
   2558c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2558e:	687b      	ldr	r3, [r7, #4]
   25590:	78db      	ldrb	r3, [r3, #3]
   25592:	2201      	movs	r2, #1
   25594:	4053      	eors	r3, r2
   25596:	b2db      	uxtb	r3, r3
   25598:	2b00      	cmp	r3, #0
   2559a:	d01a      	beq.n	255d2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2559c:	69fa      	ldr	r2, [r7, #28]
   2559e:	2380      	movs	r3, #128	; 0x80
   255a0:	02db      	lsls	r3, r3, #11
   255a2:	4013      	ands	r3, r2
   255a4:	d00a      	beq.n	255bc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   255a6:	687b      	ldr	r3, [r7, #4]
   255a8:	789b      	ldrb	r3, [r3, #2]
   255aa:	2b01      	cmp	r3, #1
   255ac:	d103      	bne.n	255b6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   255ae:	68fb      	ldr	r3, [r7, #12]
   255b0:	68ba      	ldr	r2, [r7, #8]
   255b2:	619a      	str	r2, [r3, #24]
   255b4:	e002      	b.n	255bc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   255b6:	68fb      	ldr	r3, [r7, #12]
   255b8:	68ba      	ldr	r2, [r7, #8]
   255ba:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   255bc:	687b      	ldr	r3, [r7, #4]
   255be:	785b      	ldrb	r3, [r3, #1]
   255c0:	2b01      	cmp	r3, #1
   255c2:	d003      	beq.n	255cc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   255c4:	687b      	ldr	r3, [r7, #4]
   255c6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   255c8:	2b02      	cmp	r3, #2
   255ca:	d102      	bne.n	255d2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   255cc:	68fb      	ldr	r3, [r7, #12]
   255ce:	68ba      	ldr	r2, [r7, #8]
   255d0:	609a      	str	r2, [r3, #8]
		}
	}
}
   255d2:	46c0      	nop			; (mov r8, r8)
   255d4:	46bd      	mov	sp, r7
   255d6:	b008      	add	sp, #32
   255d8:	bd80      	pop	{r7, pc}
   255da:	46c0      	nop			; (mov r8, r8)
   255dc:	fffbffff 	.word	0xfffbffff

000255e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   255e0:	b580      	push	{r7, lr}
   255e2:	b084      	sub	sp, #16
   255e4:	af00      	add	r7, sp, #0
   255e6:	0002      	movs	r2, r0
   255e8:	6039      	str	r1, [r7, #0]
   255ea:	1dfb      	adds	r3, r7, #7
   255ec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   255ee:	1dfb      	adds	r3, r7, #7
   255f0:	781b      	ldrb	r3, [r3, #0]
   255f2:	0018      	movs	r0, r3
   255f4:	4b0a      	ldr	r3, [pc, #40]	; (25620 <system_pinmux_pin_set_config+0x40>)
   255f6:	4798      	blx	r3
   255f8:	0003      	movs	r3, r0
   255fa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   255fc:	1dfb      	adds	r3, r7, #7
   255fe:	781b      	ldrb	r3, [r3, #0]
   25600:	221f      	movs	r2, #31
   25602:	4013      	ands	r3, r2
   25604:	2201      	movs	r2, #1
   25606:	409a      	lsls	r2, r3
   25608:	0013      	movs	r3, r2
   2560a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2560c:	683a      	ldr	r2, [r7, #0]
   2560e:	68b9      	ldr	r1, [r7, #8]
   25610:	68fb      	ldr	r3, [r7, #12]
   25612:	0018      	movs	r0, r3
   25614:	4b03      	ldr	r3, [pc, #12]	; (25624 <system_pinmux_pin_set_config+0x44>)
   25616:	4798      	blx	r3
}
   25618:	46c0      	nop			; (mov r8, r8)
   2561a:	46bd      	mov	sp, r7
   2561c:	b004      	add	sp, #16
   2561e:	bd80      	pop	{r7, pc}
   25620:	00025471 	.word	0x00025471
   25624:	000254d1 	.word	0x000254d1

00025628 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   25628:	b580      	push	{r7, lr}
   2562a:	af00      	add	r7, sp, #0
	return;
   2562c:	46c0      	nop			; (mov r8, r8)
}
   2562e:	46bd      	mov	sp, r7
   25630:	bd80      	pop	{r7, pc}
	...

00025634 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   25634:	b580      	push	{r7, lr}
   25636:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   25638:	4b06      	ldr	r3, [pc, #24]	; (25654 <system_init+0x20>)
   2563a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2563c:	4b06      	ldr	r3, [pc, #24]	; (25658 <system_init+0x24>)
   2563e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   25640:	4b06      	ldr	r3, [pc, #24]	; (2565c <system_init+0x28>)
   25642:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   25644:	4b06      	ldr	r3, [pc, #24]	; (25660 <system_init+0x2c>)
   25646:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   25648:	4b06      	ldr	r3, [pc, #24]	; (25664 <system_init+0x30>)
   2564a:	4798      	blx	r3
}
   2564c:	46c0      	nop			; (mov r8, r8)
   2564e:	46bd      	mov	sp, r7
   25650:	bd80      	pop	{r7, pc}
   25652:	46c0      	nop			; (mov r8, r8)
   25654:	00024c69 	.word	0x00024c69
   25658:	00024531 	.word	0x00024531
   2565c:	00023139 	.word	0x00023139
   25660:	0001eda9 	.word	0x0001eda9
   25664:	00025629 	.word	0x00025629

00025668 <NVIC_SystemReset>:
{
   25668:	b580      	push	{r7, lr}
   2566a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   2566c:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   25670:	4b02      	ldr	r3, [pc, #8]	; (2567c <NVIC_SystemReset+0x14>)
   25672:	4a03      	ldr	r2, [pc, #12]	; (25680 <NVIC_SystemReset+0x18>)
   25674:	60da      	str	r2, [r3, #12]
   25676:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   2567a:	e7fe      	b.n	2567a <NVIC_SystemReset+0x12>
   2567c:	e000ed00 	.word	0xe000ed00
   25680:	05fa0004 	.word	0x05fa0004

00025684 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   25684:	b580      	push	{r7, lr}
   25686:	b082      	sub	sp, #8
   25688:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2568a:	4b2f      	ldr	r3, [pc, #188]	; (25748 <Reset_Handler+0xc4>)
   2568c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2568e:	4b2f      	ldr	r3, [pc, #188]	; (2574c <Reset_Handler+0xc8>)
   25690:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   25692:	687a      	ldr	r2, [r7, #4]
   25694:	683b      	ldr	r3, [r7, #0]
   25696:	429a      	cmp	r2, r3
   25698:	d00c      	beq.n	256b4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2569a:	e007      	b.n	256ac <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2569c:	683b      	ldr	r3, [r7, #0]
   2569e:	1d1a      	adds	r2, r3, #4
   256a0:	603a      	str	r2, [r7, #0]
   256a2:	687a      	ldr	r2, [r7, #4]
   256a4:	1d11      	adds	r1, r2, #4
   256a6:	6079      	str	r1, [r7, #4]
   256a8:	6812      	ldr	r2, [r2, #0]
   256aa:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   256ac:	683a      	ldr	r2, [r7, #0]
   256ae:	4b28      	ldr	r3, [pc, #160]	; (25750 <Reset_Handler+0xcc>)
   256b0:	429a      	cmp	r2, r3
   256b2:	d3f3      	bcc.n	2569c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   256b4:	4b27      	ldr	r3, [pc, #156]	; (25754 <Reset_Handler+0xd0>)
   256b6:	603b      	str	r3, [r7, #0]
   256b8:	e004      	b.n	256c4 <Reset_Handler+0x40>
                *pDest++ = 0;
   256ba:	683b      	ldr	r3, [r7, #0]
   256bc:	1d1a      	adds	r2, r3, #4
   256be:	603a      	str	r2, [r7, #0]
   256c0:	2200      	movs	r2, #0
   256c2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   256c4:	683a      	ldr	r2, [r7, #0]
   256c6:	4b24      	ldr	r3, [pc, #144]	; (25758 <Reset_Handler+0xd4>)
   256c8:	429a      	cmp	r2, r3
   256ca:	d3f6      	bcc.n	256ba <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   256cc:	4b23      	ldr	r3, [pc, #140]	; (2575c <Reset_Handler+0xd8>)
   256ce:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   256d0:	4b23      	ldr	r3, [pc, #140]	; (25760 <Reset_Handler+0xdc>)
   256d2:	687a      	ldr	r2, [r7, #4]
   256d4:	21ff      	movs	r1, #255	; 0xff
   256d6:	438a      	bics	r2, r1
   256d8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   256da:	4a22      	ldr	r2, [pc, #136]	; (25764 <Reset_Handler+0xe0>)
   256dc:	2390      	movs	r3, #144	; 0x90
   256de:	005b      	lsls	r3, r3, #1
   256e0:	2102      	movs	r1, #2
   256e2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   256e4:	4a20      	ldr	r2, [pc, #128]	; (25768 <Reset_Handler+0xe4>)
   256e6:	78d3      	ldrb	r3, [r2, #3]
   256e8:	2103      	movs	r1, #3
   256ea:	438b      	bics	r3, r1
   256ec:	1c19      	adds	r1, r3, #0
   256ee:	2302      	movs	r3, #2
   256f0:	430b      	orrs	r3, r1
   256f2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   256f4:	4a1c      	ldr	r2, [pc, #112]	; (25768 <Reset_Handler+0xe4>)
   256f6:	78d3      	ldrb	r3, [r2, #3]
   256f8:	210c      	movs	r1, #12
   256fa:	438b      	bics	r3, r1
   256fc:	1c19      	adds	r1, r3, #0
   256fe:	2308      	movs	r3, #8
   25700:	430b      	orrs	r3, r1
   25702:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   25704:	4a19      	ldr	r2, [pc, #100]	; (2576c <Reset_Handler+0xe8>)
   25706:	7b93      	ldrb	r3, [r2, #14]
   25708:	2130      	movs	r1, #48	; 0x30
   2570a:	438b      	bics	r3, r1
   2570c:	1c19      	adds	r1, r3, #0
   2570e:	2320      	movs	r3, #32
   25710:	430b      	orrs	r3, r1
   25712:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   25714:	4a15      	ldr	r2, [pc, #84]	; (2576c <Reset_Handler+0xe8>)
   25716:	7b93      	ldrb	r3, [r2, #14]
   25718:	210c      	movs	r1, #12
   2571a:	438b      	bics	r3, r1
   2571c:	1c19      	adds	r1, r3, #0
   2571e:	2308      	movs	r3, #8
   25720:	430b      	orrs	r3, r1
   25722:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   25724:	4a11      	ldr	r2, [pc, #68]	; (2576c <Reset_Handler+0xe8>)
   25726:	7b93      	ldrb	r3, [r2, #14]
   25728:	2103      	movs	r1, #3
   2572a:	438b      	bics	r3, r1
   2572c:	1c19      	adds	r1, r3, #0
   2572e:	2302      	movs	r3, #2
   25730:	430b      	orrs	r3, r1
   25732:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   25734:	4a0e      	ldr	r2, [pc, #56]	; (25770 <Reset_Handler+0xec>)
   25736:	6853      	ldr	r3, [r2, #4]
   25738:	2180      	movs	r1, #128	; 0x80
   2573a:	430b      	orrs	r3, r1
   2573c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2573e:	4b0d      	ldr	r3, [pc, #52]	; (25774 <Reset_Handler+0xf0>)
   25740:	4798      	blx	r3

        /* Branch to main function */
        main();
   25742:	4b0d      	ldr	r3, [pc, #52]	; (25778 <Reset_Handler+0xf4>)
   25744:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   25746:	e7fe      	b.n	25746 <Reset_Handler+0xc2>
   25748:	0002ba9c 	.word	0x0002ba9c
   2574c:	20000000 	.word	0x20000000
   25750:	20000204 	.word	0x20000204
   25754:	20000400 	.word	0x20000400
   25758:	20001004 	.word	0x20001004
   2575c:	00010000 	.word	0x00010000
   25760:	e000ed00 	.word	0xe000ed00
   25764:	41007000 	.word	0x41007000
   25768:	41005000 	.word	0x41005000
   2576c:	41004800 	.word	0x41004800
   25770:	41004000 	.word	0x41004000
   25774:	0002966d 	.word	0x0002966d
   25778:	00025a31 	.word	0x00025a31

0002577c <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
uint32_t phantomISR;
void Dummy_Handler(void)
{
   2577c:	b580      	push	{r7, lr}
   2577e:	b082      	sub	sp, #8
   25780:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25782:	f3ef 8305 	mrs	r3, IPSR
   25786:	607b      	str	r3, [r7, #4]
  return(result);
   25788:	687a      	ldr	r2, [r7, #4]
	phantomISR = __get_IPSR();
   2578a:	4b02      	ldr	r3, [pc, #8]	; (25794 <Dummy_Handler+0x18>)
   2578c:	601a      	str	r2, [r3, #0]
	NVIC_SystemReset();
   2578e:	4b02      	ldr	r3, [pc, #8]	; (25798 <Dummy_Handler+0x1c>)
   25790:	4798      	blx	r3
			
        while (1) {
   25792:	e7fe      	b.n	25792 <Dummy_Handler+0x16>
   25794:	20000b98 	.word	0x20000b98
   25798:	00025669 	.word	0x00025669

0002579c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2579c:	b580      	push	{r7, lr}
   2579e:	b084      	sub	sp, #16
   257a0:	af00      	add	r7, sp, #0
   257a2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   257a4:	4b0a      	ldr	r3, [pc, #40]	; (257d0 <_sbrk+0x34>)
   257a6:	681b      	ldr	r3, [r3, #0]
   257a8:	2b00      	cmp	r3, #0
   257aa:	d102      	bne.n	257b2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   257ac:	4b08      	ldr	r3, [pc, #32]	; (257d0 <_sbrk+0x34>)
   257ae:	4a09      	ldr	r2, [pc, #36]	; (257d4 <_sbrk+0x38>)
   257b0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   257b2:	4b07      	ldr	r3, [pc, #28]	; (257d0 <_sbrk+0x34>)
   257b4:	681b      	ldr	r3, [r3, #0]
   257b6:	60fb      	str	r3, [r7, #12]

	heap += incr;
   257b8:	4b05      	ldr	r3, [pc, #20]	; (257d0 <_sbrk+0x34>)
   257ba:	681a      	ldr	r2, [r3, #0]
   257bc:	687b      	ldr	r3, [r7, #4]
   257be:	18d2      	adds	r2, r2, r3
   257c0:	4b03      	ldr	r3, [pc, #12]	; (257d0 <_sbrk+0x34>)
   257c2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   257c4:	68fb      	ldr	r3, [r7, #12]
}
   257c6:	0018      	movs	r0, r3
   257c8:	46bd      	mov	sp, r7
   257ca:	b004      	add	sp, #16
   257cc:	bd80      	pop	{r7, pc}
   257ce:	46c0      	nop			; (mov r8, r8)
   257d0:	20000708 	.word	0x20000708
   257d4:	20003008 	.word	0x20003008

000257d8 <system_apb_clock_clear_mask>:
{
   257d8:	b580      	push	{r7, lr}
   257da:	b082      	sub	sp, #8
   257dc:	af00      	add	r7, sp, #0
   257de:	0002      	movs	r2, r0
   257e0:	6039      	str	r1, [r7, #0]
   257e2:	1dfb      	adds	r3, r7, #7
   257e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   257e6:	1dfb      	adds	r3, r7, #7
   257e8:	781b      	ldrb	r3, [r3, #0]
   257ea:	2b01      	cmp	r3, #1
   257ec:	d00b      	beq.n	25806 <system_apb_clock_clear_mask+0x2e>
   257ee:	2b02      	cmp	r3, #2
   257f0:	d011      	beq.n	25816 <system_apb_clock_clear_mask+0x3e>
   257f2:	2b00      	cmp	r3, #0
   257f4:	d117      	bne.n	25826 <system_apb_clock_clear_mask+0x4e>
			PM->APBAMASK.reg &= ~mask;
   257f6:	4b0f      	ldr	r3, [pc, #60]	; (25834 <system_apb_clock_clear_mask+0x5c>)
   257f8:	4a0e      	ldr	r2, [pc, #56]	; (25834 <system_apb_clock_clear_mask+0x5c>)
   257fa:	6992      	ldr	r2, [r2, #24]
   257fc:	6839      	ldr	r1, [r7, #0]
   257fe:	43c9      	mvns	r1, r1
   25800:	400a      	ands	r2, r1
   25802:	619a      	str	r2, [r3, #24]
			break;
   25804:	e011      	b.n	2582a <system_apb_clock_clear_mask+0x52>
			PM->APBBMASK.reg &= ~mask;
   25806:	4b0b      	ldr	r3, [pc, #44]	; (25834 <system_apb_clock_clear_mask+0x5c>)
   25808:	4a0a      	ldr	r2, [pc, #40]	; (25834 <system_apb_clock_clear_mask+0x5c>)
   2580a:	69d2      	ldr	r2, [r2, #28]
   2580c:	6839      	ldr	r1, [r7, #0]
   2580e:	43c9      	mvns	r1, r1
   25810:	400a      	ands	r2, r1
   25812:	61da      	str	r2, [r3, #28]
			break;
   25814:	e009      	b.n	2582a <system_apb_clock_clear_mask+0x52>
			PM->APBCMASK.reg &= ~mask;
   25816:	4b07      	ldr	r3, [pc, #28]	; (25834 <system_apb_clock_clear_mask+0x5c>)
   25818:	4a06      	ldr	r2, [pc, #24]	; (25834 <system_apb_clock_clear_mask+0x5c>)
   2581a:	6a12      	ldr	r2, [r2, #32]
   2581c:	6839      	ldr	r1, [r7, #0]
   2581e:	43c9      	mvns	r1, r1
   25820:	400a      	ands	r2, r1
   25822:	621a      	str	r2, [r3, #32]
			break;
   25824:	e001      	b.n	2582a <system_apb_clock_clear_mask+0x52>
			return STATUS_ERR_INVALID_ARG;
   25826:	2317      	movs	r3, #23
   25828:	e000      	b.n	2582c <system_apb_clock_clear_mask+0x54>
	return STATUS_OK;
   2582a:	2300      	movs	r3, #0
}
   2582c:	0018      	movs	r0, r3
   2582e:	46bd      	mov	sp, r7
   25830:	b002      	add	sp, #8
   25832:	bd80      	pop	{r7, pc}
   25834:	40000400 	.word	0x40000400

00025838 <system_interrupt_enable_global>:
{
   25838:	b580      	push	{r7, lr}
   2583a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   2583c:	4b04      	ldr	r3, [pc, #16]	; (25850 <system_interrupt_enable_global+0x18>)
   2583e:	2201      	movs	r2, #1
   25840:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   25842:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25846:	b662      	cpsie	i
}
   25848:	46c0      	nop			; (mov r8, r8)
   2584a:	46bd      	mov	sp, r7
   2584c:	bd80      	pop	{r7, pc}
   2584e:	46c0      	nop			; (mov r8, r8)
   25850:	20000028 	.word	0x20000028

00025854 <system_pinmux_get_group_from_gpio_pin>:
{
   25854:	b580      	push	{r7, lr}
   25856:	b084      	sub	sp, #16
   25858:	af00      	add	r7, sp, #0
   2585a:	0002      	movs	r2, r0
   2585c:	1dfb      	adds	r3, r7, #7
   2585e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25860:	230f      	movs	r3, #15
   25862:	18fb      	adds	r3, r7, r3
   25864:	1dfa      	adds	r2, r7, #7
   25866:	7812      	ldrb	r2, [r2, #0]
   25868:	09d2      	lsrs	r2, r2, #7
   2586a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2586c:	230e      	movs	r3, #14
   2586e:	18fb      	adds	r3, r7, r3
   25870:	1dfa      	adds	r2, r7, #7
   25872:	7812      	ldrb	r2, [r2, #0]
   25874:	0952      	lsrs	r2, r2, #5
   25876:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25878:	4b0d      	ldr	r3, [pc, #52]	; (258b0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2587a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2587c:	230f      	movs	r3, #15
   2587e:	18fb      	adds	r3, r7, r3
   25880:	781b      	ldrb	r3, [r3, #0]
   25882:	2b00      	cmp	r3, #0
   25884:	d10f      	bne.n	258a6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25886:	230f      	movs	r3, #15
   25888:	18fb      	adds	r3, r7, r3
   2588a:	781b      	ldrb	r3, [r3, #0]
   2588c:	009b      	lsls	r3, r3, #2
   2588e:	2210      	movs	r2, #16
   25890:	4694      	mov	ip, r2
   25892:	44bc      	add	ip, r7
   25894:	4463      	add	r3, ip
   25896:	3b08      	subs	r3, #8
   25898:	681a      	ldr	r2, [r3, #0]
   2589a:	230e      	movs	r3, #14
   2589c:	18fb      	adds	r3, r7, r3
   2589e:	781b      	ldrb	r3, [r3, #0]
   258a0:	01db      	lsls	r3, r3, #7
   258a2:	18d3      	adds	r3, r2, r3
   258a4:	e000      	b.n	258a8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   258a6:	2300      	movs	r3, #0
}
   258a8:	0018      	movs	r0, r3
   258aa:	46bd      	mov	sp, r7
   258ac:	b004      	add	sp, #16
   258ae:	bd80      	pop	{r7, pc}
   258b0:	41004400 	.word	0x41004400

000258b4 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   258b4:	b580      	push	{r7, lr}
   258b6:	b084      	sub	sp, #16
   258b8:	af00      	add	r7, sp, #0
   258ba:	0002      	movs	r2, r0
   258bc:	1dfb      	adds	r3, r7, #7
   258be:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   258c0:	4b1a      	ldr	r3, [pc, #104]	; (2592c <system_set_sleepmode+0x78>)
   258c2:	699b      	ldr	r3, [r3, #24]
   258c4:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   258c6:	68fa      	ldr	r2, [r7, #12]
   258c8:	23f0      	movs	r3, #240	; 0xf0
   258ca:	011b      	lsls	r3, r3, #4
   258cc:	4013      	ands	r3, r2
   258ce:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   258d0:	68fb      	ldr	r3, [r7, #12]
   258d2:	0a1b      	lsrs	r3, r3, #8
   258d4:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   258d6:	68fb      	ldr	r3, [r7, #12]
   258d8:	2b02      	cmp	r3, #2
   258da:	d805      	bhi.n	258e8 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   258dc:	4a14      	ldr	r2, [pc, #80]	; (25930 <system_set_sleepmode+0x7c>)
   258de:	6853      	ldr	r3, [r2, #4]
   258e0:	21c0      	movs	r1, #192	; 0xc0
   258e2:	0089      	lsls	r1, r1, #2
   258e4:	430b      	orrs	r3, r1
   258e6:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   258e8:	1dfb      	adds	r3, r7, #7
   258ea:	781b      	ldrb	r3, [r3, #0]
   258ec:	2b00      	cmp	r3, #0
   258ee:	db16      	blt.n	2591e <system_set_sleepmode+0x6a>
   258f0:	2b02      	cmp	r3, #2
   258f2:	dd02      	ble.n	258fa <system_set_sleepmode+0x46>
   258f4:	2b03      	cmp	r3, #3
   258f6:	d00b      	beq.n	25910 <system_set_sleepmode+0x5c>
   258f8:	e011      	b.n	2591e <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   258fa:	4b0e      	ldr	r3, [pc, #56]	; (25934 <system_set_sleepmode+0x80>)
   258fc:	4a0d      	ldr	r2, [pc, #52]	; (25934 <system_set_sleepmode+0x80>)
   258fe:	6912      	ldr	r2, [r2, #16]
   25900:	2104      	movs	r1, #4
   25902:	438a      	bics	r2, r1
   25904:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   25906:	4a0c      	ldr	r2, [pc, #48]	; (25938 <system_set_sleepmode+0x84>)
   25908:	1dfb      	adds	r3, r7, #7
   2590a:	781b      	ldrb	r3, [r3, #0]
   2590c:	7053      	strb	r3, [r2, #1]
			break;
   2590e:	e008      	b.n	25922 <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   25910:	4b08      	ldr	r3, [pc, #32]	; (25934 <system_set_sleepmode+0x80>)
   25912:	4a08      	ldr	r2, [pc, #32]	; (25934 <system_set_sleepmode+0x80>)
   25914:	6912      	ldr	r2, [r2, #16]
   25916:	2104      	movs	r1, #4
   25918:	430a      	orrs	r2, r1
   2591a:	611a      	str	r2, [r3, #16]
			break;
   2591c:	e001      	b.n	25922 <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   2591e:	2317      	movs	r3, #23
   25920:	e000      	b.n	25924 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   25922:	2300      	movs	r3, #0
}
   25924:	0018      	movs	r0, r3
   25926:	46bd      	mov	sp, r7
   25928:	b004      	add	sp, #16
   2592a:	bd80      	pop	{r7, pc}
   2592c:	41002000 	.word	0x41002000
   25930:	41004000 	.word	0x41004000
   25934:	e000ed00 	.word	0xe000ed00
   25938:	40000400 	.word	0x40000400

0002593c <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   2593c:	b580      	push	{r7, lr}
   2593e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   25940:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   25944:	bf30      	wfi
	__DSB();
	__WFI();
}
   25946:	46c0      	nop			; (mov r8, r8)
   25948:	46bd      	mov	sp, r7
   2594a:	bd80      	pop	{r7, pc}

0002594c <port_get_group_from_gpio_pin>:
{
   2594c:	b580      	push	{r7, lr}
   2594e:	b082      	sub	sp, #8
   25950:	af00      	add	r7, sp, #0
   25952:	0002      	movs	r2, r0
   25954:	1dfb      	adds	r3, r7, #7
   25956:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25958:	1dfb      	adds	r3, r7, #7
   2595a:	781b      	ldrb	r3, [r3, #0]
   2595c:	0018      	movs	r0, r3
   2595e:	4b03      	ldr	r3, [pc, #12]	; (2596c <port_get_group_from_gpio_pin+0x20>)
   25960:	4798      	blx	r3
   25962:	0003      	movs	r3, r0
}
   25964:	0018      	movs	r0, r3
   25966:	46bd      	mov	sp, r7
   25968:	b002      	add	sp, #8
   2596a:	bd80      	pop	{r7, pc}
   2596c:	00025855 	.word	0x00025855

00025970 <port_pin_set_output_level>:
{
   25970:	b580      	push	{r7, lr}
   25972:	b084      	sub	sp, #16
   25974:	af00      	add	r7, sp, #0
   25976:	0002      	movs	r2, r0
   25978:	1dfb      	adds	r3, r7, #7
   2597a:	701a      	strb	r2, [r3, #0]
   2597c:	1dbb      	adds	r3, r7, #6
   2597e:	1c0a      	adds	r2, r1, #0
   25980:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   25982:	1dfb      	adds	r3, r7, #7
   25984:	781b      	ldrb	r3, [r3, #0]
   25986:	0018      	movs	r0, r3
   25988:	4b0d      	ldr	r3, [pc, #52]	; (259c0 <port_pin_set_output_level+0x50>)
   2598a:	4798      	blx	r3
   2598c:	0003      	movs	r3, r0
   2598e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   25990:	1dfb      	adds	r3, r7, #7
   25992:	781b      	ldrb	r3, [r3, #0]
   25994:	221f      	movs	r2, #31
   25996:	4013      	ands	r3, r2
   25998:	2201      	movs	r2, #1
   2599a:	409a      	lsls	r2, r3
   2599c:	0013      	movs	r3, r2
   2599e:	60bb      	str	r3, [r7, #8]
	if (level) {
   259a0:	1dbb      	adds	r3, r7, #6
   259a2:	781b      	ldrb	r3, [r3, #0]
   259a4:	2b00      	cmp	r3, #0
   259a6:	d003      	beq.n	259b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   259a8:	68fb      	ldr	r3, [r7, #12]
   259aa:	68ba      	ldr	r2, [r7, #8]
   259ac:	619a      	str	r2, [r3, #24]
}
   259ae:	e002      	b.n	259b6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   259b0:	68fb      	ldr	r3, [r7, #12]
   259b2:	68ba      	ldr	r2, [r7, #8]
   259b4:	615a      	str	r2, [r3, #20]
}
   259b6:	46c0      	nop			; (mov r8, r8)
   259b8:	46bd      	mov	sp, r7
   259ba:	b004      	add	sp, #16
   259bc:	bd80      	pop	{r7, pc}
   259be:	46c0      	nop			; (mov r8, r8)
   259c0:	0002594d 	.word	0x0002594d

000259c4 <InitTraceBuffer>:

__attribute__((aligned(1024)))
volatile char __tracebuffer__[1024];
volatile int __tracebuffersize__ = sizeof(__tracebuffer__);
void InitTraceBuffer()
{
   259c4:	b580      	push	{r7, lr}
   259c6:	b082      	sub	sp, #8
   259c8:	af00      	add	r7, sp, #0
    int index = 0;
   259ca:	2300      	movs	r3, #0
   259cc:	607b      	str	r3, [r7, #4]
    uint32_t mtbEnabled = IS_MTB_ENABLED;
   259ce:	4b14      	ldr	r3, [pc, #80]	; (25a20 <InitTraceBuffer+0x5c>)
   259d0:	681b      	ldr	r3, [r3, #0]
   259d2:	0fdb      	lsrs	r3, r3, #31
   259d4:	07db      	lsls	r3, r3, #31
   259d6:	603b      	str	r3, [r7, #0]
    DISABLE_MTB;
   259d8:	4b11      	ldr	r3, [pc, #68]	; (25a20 <InitTraceBuffer+0x5c>)
   259da:	4a11      	ldr	r2, [pc, #68]	; (25a20 <InitTraceBuffer+0x5c>)
   259dc:	6812      	ldr	r2, [r2, #0]
   259de:	0052      	lsls	r2, r2, #1
   259e0:	0852      	lsrs	r2, r2, #1
   259e2:	601a      	str	r2, [r3, #0]
    for(index =0; index<1024; index++)
   259e4:	2300      	movs	r3, #0
   259e6:	607b      	str	r3, [r7, #4]
   259e8:	e008      	b.n	259fc <InitTraceBuffer+0x38>
    {
        __tracebuffer__[index];
   259ea:	4a0e      	ldr	r2, [pc, #56]	; (25a24 <InitTraceBuffer+0x60>)
   259ec:	687b      	ldr	r3, [r7, #4]
   259ee:	18d3      	adds	r3, r2, r3
   259f0:	781b      	ldrb	r3, [r3, #0]
        __tracebuffersize__;
   259f2:	4b0d      	ldr	r3, [pc, #52]	; (25a28 <InitTraceBuffer+0x64>)
   259f4:	681b      	ldr	r3, [r3, #0]
    for(index =0; index<1024; index++)
   259f6:	687b      	ldr	r3, [r7, #4]
   259f8:	3301      	adds	r3, #1
   259fa:	607b      	str	r3, [r7, #4]
   259fc:	687b      	ldr	r3, [r7, #4]
   259fe:	4a0b      	ldr	r2, [pc, #44]	; (25a2c <InitTraceBuffer+0x68>)
   25a00:	4293      	cmp	r3, r2
   25a02:	ddf2      	ble.n	259ea <InitTraceBuffer+0x26>
    }
    if(mtbEnabled)
   25a04:	683b      	ldr	r3, [r7, #0]
   25a06:	2b00      	cmp	r3, #0
   25a08:	d006      	beq.n	25a18 <InitTraceBuffer+0x54>
        ENABLE_MTB;
   25a0a:	4b05      	ldr	r3, [pc, #20]	; (25a20 <InitTraceBuffer+0x5c>)
   25a0c:	4a04      	ldr	r2, [pc, #16]	; (25a20 <InitTraceBuffer+0x5c>)
   25a0e:	6812      	ldr	r2, [r2, #0]
   25a10:	2180      	movs	r1, #128	; 0x80
   25a12:	0609      	lsls	r1, r1, #24
   25a14:	430a      	orrs	r2, r1
   25a16:	601a      	str	r2, [r3, #0]
}
   25a18:	46c0      	nop			; (mov r8, r8)
   25a1a:	46bd      	mov	sp, r7
   25a1c:	b002      	add	sp, #8
   25a1e:	bd80      	pop	{r7, pc}
   25a20:	41006004 	.word	0x41006004
   25a24:	20000c00 	.word	0x20000c00
   25a28:	2000002c 	.word	0x2000002c
   25a2c:	000003ff 	.word	0x000003ff

00025a30 <main>:

int main (void)
{
   25a30:	b590      	push	{r4, r7, lr}
   25a32:	b083      	sub	sp, #12
   25a34:	af02      	add	r7, sp, #8
	system_init();
   25a36:	4b19      	ldr	r3, [pc, #100]	; (25a9c <main+0x6c>)
   25a38:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   25a3a:	2111      	movs	r1, #17
   25a3c:	2000      	movs	r0, #0
   25a3e:	4b18      	ldr	r3, [pc, #96]	; (25aa0 <main+0x70>)
   25a40:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   25a42:	2103      	movs	r1, #3
   25a44:	2001      	movs	r0, #1
   25a46:	4b16      	ldr	r3, [pc, #88]	; (25aa0 <main+0x70>)
   25a48:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   25a4a:	4b16      	ldr	r3, [pc, #88]	; (25aa4 <main+0x74>)
   25a4c:	0019      	movs	r1, r3
   25a4e:	2002      	movs	r0, #2
   25a50:	4b13      	ldr	r3, [pc, #76]	; (25aa0 <main+0x70>)
   25a52:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   25a54:	4a14      	ldr	r2, [pc, #80]	; (25aa8 <main+0x78>)
   25a56:	6853      	ldr	r3, [r2, #4]
   25a58:	21c0      	movs	r1, #192	; 0xc0
   25a5a:	0089      	lsls	r1, r1, #2
   25a5c:	430b      	orrs	r3, r1
   25a5e:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   25a60:	2003      	movs	r0, #3
   25a62:	4b12      	ldr	r3, [pc, #72]	; (25aac <main+0x7c>)
   25a64:	4798      	blx	r3
	
	system_interrupt_enable_global();
   25a66:	4b12      	ldr	r3, [pc, #72]	; (25ab0 <main+0x80>)
   25a68:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	InitTraceBuffer();
   25a6a:	4b12      	ldr	r3, [pc, #72]	; (25ab4 <main+0x84>)
   25a6c:	4798      	blx	r3
	delay_init();
   25a6e:	4b12      	ldr	r3, [pc, #72]	; (25ab8 <main+0x88>)
   25a70:	4798      	blx	r3
	init_eeprom();
   25a72:	4b12      	ldr	r3, [pc, #72]	; (25abc <main+0x8c>)
   25a74:	4798      	blx	r3
	
	
	
	start_lcd_service();
   25a76:	4b12      	ldr	r3, [pc, #72]	; (25ac0 <main+0x90>)
   25a78:	4798      	blx	r3
	start_gsm_service();
   25a7a:	4b12      	ldr	r3, [pc, #72]	; (25ac4 <main+0x94>)
   25a7c:	4798      	blx	r3
	start_motor_service();
   25a7e:	4b12      	ldr	r3, [pc, #72]	; (25ac8 <main+0x98>)
   25a80:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   25a82:	4812      	ldr	r0, [pc, #72]	; (25acc <main+0x9c>)
   25a84:	2300      	movs	r3, #0
   25a86:	9301      	str	r3, [sp, #4]
   25a88:	2301      	movs	r3, #1
   25a8a:	9300      	str	r3, [sp, #0]
   25a8c:	2300      	movs	r3, #0
   25a8e:	2264      	movs	r2, #100	; 0x64
   25a90:	2100      	movs	r1, #0
   25a92:	4c0f      	ldr	r4, [pc, #60]	; (25ad0 <main+0xa0>)
   25a94:	47a0      	blx	r4
	
	vTaskStartScheduler();
   25a96:	4b0f      	ldr	r3, [pc, #60]	; (25ad4 <main+0xa4>)
   25a98:	4798      	blx	r3
	
	for (;;)
   25a9a:	e7fe      	b.n	25a9a <main+0x6a>
   25a9c:	00025635 	.word	0x00025635
   25aa0:	000257d9 	.word	0x000257d9
   25aa4:	00060001 	.word	0x00060001
   25aa8:	41004000 	.word	0x41004000
   25aac:	000258b5 	.word	0x000258b5
   25ab0:	00025839 	.word	0x00025839
   25ab4:	000259c5 	.word	0x000259c5
   25ab8:	0002325d 	.word	0x0002325d
   25abc:	00010151 	.word	0x00010151
   25ac0:	000198f5 	.word	0x000198f5
   25ac4:	00018e69 	.word	0x00018e69
   25ac8:	0001d319 	.word	0x0001d319
   25acc:	00025b21 	.word	0x00025b21
   25ad0:	00020709 	.word	0x00020709
   25ad4:	00020bdd 	.word	0x00020bdd

00025ad8 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   25ad8:	b580      	push	{r7, lr}
   25ada:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   25adc:	4b0d      	ldr	r3, [pc, #52]	; (25b14 <checkSleepElligible+0x3c>)
   25ade:	4798      	blx	r3
   25ae0:	0003      	movs	r3, r0
   25ae2:	001a      	movs	r2, r3
   25ae4:	2301      	movs	r3, #1
   25ae6:	4053      	eors	r3, r2
   25ae8:	b2db      	uxtb	r3, r3
   25aea:	2b00      	cmp	r3, #0
   25aec:	d009      	beq.n	25b02 <checkSleepElligible+0x2a>
   25aee:	4b0a      	ldr	r3, [pc, #40]	; (25b18 <checkSleepElligible+0x40>)
   25af0:	4798      	blx	r3
   25af2:	1e03      	subs	r3, r0, #0
   25af4:	d005      	beq.n	25b02 <checkSleepElligible+0x2a>
   25af6:	4b09      	ldr	r3, [pc, #36]	; (25b1c <checkSleepElligible+0x44>)
   25af8:	4798      	blx	r3
   25afa:	1e03      	subs	r3, r0, #0
   25afc:	d001      	beq.n	25b02 <checkSleepElligible+0x2a>
   25afe:	2301      	movs	r3, #1
   25b00:	e000      	b.n	25b04 <checkSleepElligible+0x2c>
   25b02:	2300      	movs	r3, #0
   25b04:	1c1a      	adds	r2, r3, #0
   25b06:	2301      	movs	r3, #1
   25b08:	4013      	ands	r3, r2
   25b0a:	b2db      	uxtb	r3, r3
}
   25b0c:	0018      	movs	r0, r3
   25b0e:	46bd      	mov	sp, r7
   25b10:	bd80      	pop	{r7, pc}
   25b12:	46c0      	nop			; (mov r8, r8)
   25b14:	0001bb55 	.word	0x0001bb55
   25b18:	0001d63d 	.word	0x0001d63d
   25b1c:	00018f31 	.word	0x00018f31

00025b20 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   25b20:	b580      	push	{r7, lr}
   25b22:	b084      	sub	sp, #16
   25b24:	af00      	add	r7, sp, #0
   25b26:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   25b28:	4b34      	ldr	r3, [pc, #208]	; (25bfc <vTask_sleep_manager+0xdc>)
   25b2a:	4798      	blx	r3
   25b2c:	1e03      	subs	r3, r0, #0
   25b2e:	d060      	beq.n	25bf2 <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   25b30:	4b33      	ldr	r3, [pc, #204]	; (25c00 <vTask_sleep_manager+0xe0>)
   25b32:	781b      	ldrb	r3, [r3, #0]
   25b34:	2201      	movs	r2, #1
   25b36:	4053      	eors	r3, r2
   25b38:	b2db      	uxtb	r3, r3
   25b3a:	2b00      	cmp	r3, #0
   25b3c:	d008      	beq.n	25b50 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   25b3e:	4b31      	ldr	r3, [pc, #196]	; (25c04 <vTask_sleep_manager+0xe4>)
   25b40:	4798      	blx	r3
   25b42:	0002      	movs	r2, r0
   25b44:	4b30      	ldr	r3, [pc, #192]	; (25c08 <vTask_sleep_manager+0xe8>)
   25b46:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   25b48:	4b2d      	ldr	r3, [pc, #180]	; (25c00 <vTask_sleep_manager+0xe0>)
   25b4a:	2201      	movs	r2, #1
   25b4c:	701a      	strb	r2, [r3, #0]
   25b4e:	e7eb      	b.n	25b28 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   25b50:	4b2b      	ldr	r3, [pc, #172]	; (25c00 <vTask_sleep_manager+0xe0>)
   25b52:	781b      	ldrb	r3, [r3, #0]
   25b54:	2b00      	cmp	r3, #0
   25b56:	d0e7      	beq.n	25b28 <vTask_sleep_manager+0x8>
   25b58:	4b2a      	ldr	r3, [pc, #168]	; (25c04 <vTask_sleep_manager+0xe4>)
   25b5a:	4798      	blx	r3
   25b5c:	0002      	movs	r2, r0
   25b5e:	4b2a      	ldr	r3, [pc, #168]	; (25c08 <vTask_sleep_manager+0xe8>)
   25b60:	681b      	ldr	r3, [r3, #0]
   25b62:	1ad3      	subs	r3, r2, r3
   25b64:	4a29      	ldr	r2, [pc, #164]	; (25c0c <vTask_sleep_manager+0xec>)
   25b66:	4293      	cmp	r3, r2
   25b68:	d9de      	bls.n	25b28 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   25b6a:	230f      	movs	r3, #15
   25b6c:	18fb      	adds	r3, r7, r3
   25b6e:	220a      	movs	r2, #10
   25b70:	701a      	strb	r2, [r3, #0]
				bool led=false;
   25b72:	230e      	movs	r3, #14
   25b74:	18fb      	adds	r3, r7, r3
   25b76:	2200      	movs	r2, #0
   25b78:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   25b7a:	230e      	movs	r3, #14
   25b7c:	18fb      	adds	r3, r7, r3
   25b7e:	781b      	ldrb	r3, [r3, #0]
   25b80:	1e5a      	subs	r2, r3, #1
   25b82:	4193      	sbcs	r3, r2
   25b84:	b2db      	uxtb	r3, r3
   25b86:	2201      	movs	r2, #1
   25b88:	4053      	eors	r3, r2
   25b8a:	b2db      	uxtb	r3, r3
   25b8c:	001a      	movs	r2, r3
   25b8e:	230e      	movs	r3, #14
   25b90:	18fb      	adds	r3, r7, r3
   25b92:	701a      	strb	r2, [r3, #0]
   25b94:	781a      	ldrb	r2, [r3, #0]
   25b96:	2101      	movs	r1, #1
   25b98:	400a      	ands	r2, r1
   25b9a:	701a      	strb	r2, [r3, #0]
					if(led)
   25b9c:	230e      	movs	r3, #14
   25b9e:	18fb      	adds	r3, r7, r3
   25ba0:	781b      	ldrb	r3, [r3, #0]
   25ba2:	2b00      	cmp	r3, #0
   25ba4:	d004      	beq.n	25bb0 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   25ba6:	2100      	movs	r1, #0
   25ba8:	2027      	movs	r0, #39	; 0x27
   25baa:	4b19      	ldr	r3, [pc, #100]	; (25c10 <vTask_sleep_manager+0xf0>)
   25bac:	4798      	blx	r3
   25bae:	e003      	b.n	25bb8 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   25bb0:	2101      	movs	r1, #1
   25bb2:	2027      	movs	r0, #39	; 0x27
   25bb4:	4b16      	ldr	r3, [pc, #88]	; (25c10 <vTask_sleep_manager+0xf0>)
   25bb6:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   25bb8:	4b12      	ldr	r3, [pc, #72]	; (25c04 <vTask_sleep_manager+0xe4>)
   25bba:	4798      	blx	r3
   25bbc:	0002      	movs	r2, r0
   25bbe:	4b12      	ldr	r3, [pc, #72]	; (25c08 <vTask_sleep_manager+0xe8>)
   25bc0:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   25bc2:	46c0      	nop			; (mov r8, r8)
   25bc4:	4b0f      	ldr	r3, [pc, #60]	; (25c04 <vTask_sleep_manager+0xe4>)
   25bc6:	4798      	blx	r3
   25bc8:	0002      	movs	r2, r0
   25bca:	4b0f      	ldr	r3, [pc, #60]	; (25c08 <vTask_sleep_manager+0xe8>)
   25bcc:	681b      	ldr	r3, [r3, #0]
   25bce:	1ad3      	subs	r3, r2, r3
   25bd0:	2bc7      	cmp	r3, #199	; 0xc7
   25bd2:	d9f7      	bls.n	25bc4 <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   25bd4:	230f      	movs	r3, #15
   25bd6:	18fb      	adds	r3, r7, r3
   25bd8:	220f      	movs	r2, #15
   25bda:	18ba      	adds	r2, r7, r2
   25bdc:	7812      	ldrb	r2, [r2, #0]
   25bde:	3a01      	subs	r2, #1
   25be0:	701a      	strb	r2, [r3, #0]
   25be2:	230f      	movs	r3, #15
   25be4:	18fb      	adds	r3, r7, r3
   25be6:	781b      	ldrb	r3, [r3, #0]
   25be8:	2b00      	cmp	r3, #0
   25bea:	d1c6      	bne.n	25b7a <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   25bec:	4b09      	ldr	r3, [pc, #36]	; (25c14 <vTask_sleep_manager+0xf4>)
   25bee:	4798      	blx	r3
   25bf0:	e79a      	b.n	25b28 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   25bf2:	4b03      	ldr	r3, [pc, #12]	; (25c00 <vTask_sleep_manager+0xe0>)
   25bf4:	2200      	movs	r2, #0
   25bf6:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   25bf8:	e796      	b.n	25b28 <vTask_sleep_manager+0x8>
   25bfa:	46c0      	nop			; (mov r8, r8)
   25bfc:	00025ad9 	.word	0x00025ad9
   25c00:	2000070c 	.word	0x2000070c
   25c04:	00020dad 	.word	0x00020dad
   25c08:	20000710 	.word	0x20000710
   25c0c:	00004650 	.word	0x00004650
   25c10:	00025971 	.word	0x00025971
   25c14:	00025c19 	.word	0x00025c19

00025c18 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   25c18:	b580      	push	{r7, lr}
   25c1a:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   25c1c:	4b07      	ldr	r3, [pc, #28]	; (25c3c <gotoSleep+0x24>)
   25c1e:	4798      	blx	r3
	
	lcd_in_sleep = true;
   25c20:	4b07      	ldr	r3, [pc, #28]	; (25c40 <gotoSleep+0x28>)
   25c22:	2201      	movs	r2, #1
   25c24:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   25c26:	4b07      	ldr	r3, [pc, #28]	; (25c44 <gotoSleep+0x2c>)
   25c28:	2201      	movs	r2, #1
   25c2a:	701a      	strb	r2, [r3, #0]
	system_sleep();
   25c2c:	4b06      	ldr	r3, [pc, #24]	; (25c48 <gotoSleep+0x30>)
   25c2e:	4798      	blx	r3
	mcuWakeUpFromSleep=true;
   25c30:	4b06      	ldr	r3, [pc, #24]	; (25c4c <gotoSleep+0x34>)
   25c32:	2201      	movs	r2, #1
   25c34:	701a      	strb	r2, [r3, #0]
   25c36:	46c0      	nop			; (mov r8, r8)
   25c38:	46bd      	mov	sp, r7
   25c3a:	bd80      	pop	{r7, pc}
   25c3c:	00013ced 	.word	0x00013ced
   25c40:	20000a68 	.word	0x20000a68
   25c44:	20000a69 	.word	0x20000a69
   25c48:	0002593d 	.word	0x0002593d
   25c4c:	20000a44 	.word	0x20000a44

00025c50 <pow>:
   25c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c52:	4657      	mov	r7, sl
   25c54:	464e      	mov	r6, r9
   25c56:	46de      	mov	lr, fp
   25c58:	4645      	mov	r5, r8
   25c5a:	b5e0      	push	{r5, r6, r7, lr}
   25c5c:	b08f      	sub	sp, #60	; 0x3c
   25c5e:	001d      	movs	r5, r3
   25c60:	0006      	movs	r6, r0
   25c62:	000f      	movs	r7, r1
   25c64:	0014      	movs	r4, r2
   25c66:	f000 f9ff 	bl	26068 <__ieee754_pow>
   25c6a:	4bc7      	ldr	r3, [pc, #796]	; (25f88 <pow+0x338>)
   25c6c:	9000      	str	r0, [sp, #0]
   25c6e:	9101      	str	r1, [sp, #4]
   25c70:	469a      	mov	sl, r3
   25c72:	781b      	ldrb	r3, [r3, #0]
   25c74:	b25b      	sxtb	r3, r3
   25c76:	4699      	mov	r9, r3
   25c78:	3301      	adds	r3, #1
   25c7a:	d03e      	beq.n	25cfa <pow+0xaa>
   25c7c:	0022      	movs	r2, r4
   25c7e:	002b      	movs	r3, r5
   25c80:	0020      	movs	r0, r4
   25c82:	0029      	movs	r1, r5
   25c84:	f003 fb92 	bl	293ac <__aeabi_dcmpun>
   25c88:	4683      	mov	fp, r0
   25c8a:	2800      	cmp	r0, #0
   25c8c:	d135      	bne.n	25cfa <pow+0xaa>
   25c8e:	0032      	movs	r2, r6
   25c90:	003b      	movs	r3, r7
   25c92:	0030      	movs	r0, r6
   25c94:	0039      	movs	r1, r7
   25c96:	f003 fb89 	bl	293ac <__aeabi_dcmpun>
   25c9a:	2200      	movs	r2, #0
   25c9c:	9003      	str	r0, [sp, #12]
   25c9e:	2800      	cmp	r0, #0
   25ca0:	d000      	beq.n	25ca4 <pow+0x54>
   25ca2:	e0b6      	b.n	25e12 <pow+0x1c2>
   25ca4:	2300      	movs	r3, #0
   25ca6:	0030      	movs	r0, r6
   25ca8:	0039      	movs	r1, r7
   25caa:	f001 faa1 	bl	271f0 <__aeabi_dcmpeq>
   25cae:	2800      	cmp	r0, #0
   25cb0:	d02c      	beq.n	25d0c <pow+0xbc>
   25cb2:	2200      	movs	r2, #0
   25cb4:	2300      	movs	r3, #0
   25cb6:	0020      	movs	r0, r4
   25cb8:	0029      	movs	r1, r5
   25cba:	f001 fa99 	bl	271f0 <__aeabi_dcmpeq>
   25cbe:	4683      	mov	fp, r0
   25cc0:	2800      	cmp	r0, #0
   25cc2:	d100      	bne.n	25cc6 <pow+0x76>
   25cc4:	e077      	b.n	25db6 <pow+0x166>
   25cc6:	ab04      	add	r3, sp, #16
   25cc8:	4698      	mov	r8, r3
   25cca:	2301      	movs	r3, #1
   25ccc:	4642      	mov	r2, r8
   25cce:	9304      	str	r3, [sp, #16]
   25cd0:	4bae      	ldr	r3, [pc, #696]	; (25f8c <pow+0x33c>)
   25cd2:	6053      	str	r3, [r2, #4]
   25cd4:	4643      	mov	r3, r8
   25cd6:	9a03      	ldr	r2, [sp, #12]
   25cd8:	611c      	str	r4, [r3, #16]
   25cda:	615d      	str	r5, [r3, #20]
   25cdc:	621a      	str	r2, [r3, #32]
   25cde:	609e      	str	r6, [r3, #8]
   25ce0:	60df      	str	r7, [r3, #12]
   25ce2:	4642      	mov	r2, r8
   25ce4:	2300      	movs	r3, #0
   25ce6:	2400      	movs	r4, #0
   25ce8:	6193      	str	r3, [r2, #24]
   25cea:	61d4      	str	r4, [r2, #28]
   25cec:	464b      	mov	r3, r9
   25cee:	2b00      	cmp	r3, #0
   25cf0:	d04d      	beq.n	25d8e <pow+0x13e>
   25cf2:	2300      	movs	r3, #0
   25cf4:	4ca6      	ldr	r4, [pc, #664]	; (25f90 <pow+0x340>)
   25cf6:	9300      	str	r3, [sp, #0]
   25cf8:	9401      	str	r4, [sp, #4]
   25cfa:	9800      	ldr	r0, [sp, #0]
   25cfc:	9901      	ldr	r1, [sp, #4]
   25cfe:	b00f      	add	sp, #60	; 0x3c
   25d00:	bc3c      	pop	{r2, r3, r4, r5}
   25d02:	4690      	mov	r8, r2
   25d04:	4699      	mov	r9, r3
   25d06:	46a2      	mov	sl, r4
   25d08:	46ab      	mov	fp, r5
   25d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25d0c:	9800      	ldr	r0, [sp, #0]
   25d0e:	9901      	ldr	r1, [sp, #4]
   25d10:	f000 ffc4 	bl	26c9c <finite>
   25d14:	4681      	mov	r9, r0
   25d16:	2800      	cmp	r0, #0
   25d18:	d100      	bne.n	25d1c <pow+0xcc>
   25d1a:	e09b      	b.n	25e54 <pow+0x204>
   25d1c:	9800      	ldr	r0, [sp, #0]
   25d1e:	9901      	ldr	r1, [sp, #4]
   25d20:	2200      	movs	r2, #0
   25d22:	2300      	movs	r3, #0
   25d24:	f001 fa64 	bl	271f0 <__aeabi_dcmpeq>
   25d28:	2800      	cmp	r0, #0
   25d2a:	d0e6      	beq.n	25cfa <pow+0xaa>
   25d2c:	0030      	movs	r0, r6
   25d2e:	0039      	movs	r1, r7
   25d30:	f000 ffb4 	bl	26c9c <finite>
   25d34:	2800      	cmp	r0, #0
   25d36:	d0e0      	beq.n	25cfa <pow+0xaa>
   25d38:	0020      	movs	r0, r4
   25d3a:	0029      	movs	r1, r5
   25d3c:	f000 ffae 	bl	26c9c <finite>
   25d40:	2800      	cmp	r0, #0
   25d42:	d0da      	beq.n	25cfa <pow+0xaa>
   25d44:	ab04      	add	r3, sp, #16
   25d46:	4698      	mov	r8, r3
   25d48:	2304      	movs	r3, #4
   25d4a:	4642      	mov	r2, r8
   25d4c:	9304      	str	r3, [sp, #16]
   25d4e:	4b8f      	ldr	r3, [pc, #572]	; (25f8c <pow+0x33c>)
   25d50:	6114      	str	r4, [r2, #16]
   25d52:	6155      	str	r5, [r2, #20]
   25d54:	6053      	str	r3, [r2, #4]
   25d56:	2300      	movs	r3, #0
   25d58:	2400      	movs	r4, #0
   25d5a:	6213      	str	r3, [r2, #32]
   25d5c:	2300      	movs	r3, #0
   25d5e:	6193      	str	r3, [r2, #24]
   25d60:	61d4      	str	r4, [r2, #28]
   25d62:	4653      	mov	r3, sl
   25d64:	781b      	ldrb	r3, [r3, #0]
   25d66:	6096      	str	r6, [r2, #8]
   25d68:	60d7      	str	r7, [r2, #12]
   25d6a:	b25b      	sxtb	r3, r3
   25d6c:	2b02      	cmp	r3, #2
   25d6e:	d004      	beq.n	25d7a <pow+0x12a>
   25d70:	4640      	mov	r0, r8
   25d72:	f000 ff9d 	bl	26cb0 <matherr>
   25d76:	2800      	cmp	r0, #0
   25d78:	d10e      	bne.n	25d98 <pow+0x148>
   25d7a:	f003 fc71 	bl	29660 <__errno>
   25d7e:	2322      	movs	r3, #34	; 0x22
   25d80:	6003      	str	r3, [r0, #0]
   25d82:	e009      	b.n	25d98 <pow+0x148>
   25d84:	4642      	mov	r2, r8
   25d86:	2300      	movs	r3, #0
   25d88:	2400      	movs	r4, #0
   25d8a:	6193      	str	r3, [r2, #24]
   25d8c:	61d4      	str	r4, [r2, #28]
   25d8e:	4640      	mov	r0, r8
   25d90:	f000 ff8e 	bl	26cb0 <matherr>
   25d94:	2800      	cmp	r0, #0
   25d96:	d037      	beq.n	25e08 <pow+0x1b8>
   25d98:	4643      	mov	r3, r8
   25d9a:	6a1b      	ldr	r3, [r3, #32]
   25d9c:	2b00      	cmp	r3, #0
   25d9e:	d004      	beq.n	25daa <pow+0x15a>
   25da0:	f003 fc5e 	bl	29660 <__errno>
   25da4:	4643      	mov	r3, r8
   25da6:	6a1b      	ldr	r3, [r3, #32]
   25da8:	6003      	str	r3, [r0, #0]
   25daa:	4643      	mov	r3, r8
   25dac:	69dc      	ldr	r4, [r3, #28]
   25dae:	699b      	ldr	r3, [r3, #24]
   25db0:	9300      	str	r3, [sp, #0]
   25db2:	9401      	str	r4, [sp, #4]
   25db4:	e7a1      	b.n	25cfa <pow+0xaa>
   25db6:	0020      	movs	r0, r4
   25db8:	0029      	movs	r1, r5
   25dba:	f000 ff6f 	bl	26c9c <finite>
   25dbe:	2800      	cmp	r0, #0
   25dc0:	d09b      	beq.n	25cfa <pow+0xaa>
   25dc2:	2200      	movs	r2, #0
   25dc4:	2300      	movs	r3, #0
   25dc6:	0020      	movs	r0, r4
   25dc8:	0029      	movs	r1, r5
   25dca:	f001 fa17 	bl	271fc <__aeabi_dcmplt>
   25dce:	2800      	cmp	r0, #0
   25dd0:	d100      	bne.n	25dd4 <pow+0x184>
   25dd2:	e792      	b.n	25cfa <pow+0xaa>
   25dd4:	ab04      	add	r3, sp, #16
   25dd6:	4698      	mov	r8, r3
   25dd8:	2301      	movs	r3, #1
   25dda:	4642      	mov	r2, r8
   25ddc:	9304      	str	r3, [sp, #16]
   25dde:	4b6b      	ldr	r3, [pc, #428]	; (25f8c <pow+0x33c>)
   25de0:	6053      	str	r3, [r2, #4]
   25de2:	4643      	mov	r3, r8
   25de4:	465a      	mov	r2, fp
   25de6:	609e      	str	r6, [r3, #8]
   25de8:	60df      	str	r7, [r3, #12]
   25dea:	621a      	str	r2, [r3, #32]
   25dec:	611c      	str	r4, [r3, #16]
   25dee:	615d      	str	r5, [r3, #20]
   25df0:	4653      	mov	r3, sl
   25df2:	781b      	ldrb	r3, [r3, #0]
   25df4:	b25b      	sxtb	r3, r3
   25df6:	2b00      	cmp	r3, #0
   25df8:	d0c4      	beq.n	25d84 <pow+0x134>
   25dfa:	2000      	movs	r0, #0
   25dfc:	4642      	mov	r2, r8
   25dfe:	4965      	ldr	r1, [pc, #404]	; (25f94 <pow+0x344>)
   25e00:	6190      	str	r0, [r2, #24]
   25e02:	61d1      	str	r1, [r2, #28]
   25e04:	2b02      	cmp	r3, #2
   25e06:	d1c2      	bne.n	25d8e <pow+0x13e>
   25e08:	f003 fc2a 	bl	29660 <__errno>
   25e0c:	2321      	movs	r3, #33	; 0x21
   25e0e:	6003      	str	r3, [r0, #0]
   25e10:	e7c2      	b.n	25d98 <pow+0x148>
   25e12:	2300      	movs	r3, #0
   25e14:	0020      	movs	r0, r4
   25e16:	0029      	movs	r1, r5
   25e18:	f001 f9ea 	bl	271f0 <__aeabi_dcmpeq>
   25e1c:	2800      	cmp	r0, #0
   25e1e:	d100      	bne.n	25e22 <pow+0x1d2>
   25e20:	e76b      	b.n	25cfa <pow+0xaa>
   25e22:	ab04      	add	r3, sp, #16
   25e24:	4698      	mov	r8, r3
   25e26:	2301      	movs	r3, #1
   25e28:	4642      	mov	r2, r8
   25e2a:	9304      	str	r3, [sp, #16]
   25e2c:	4b57      	ldr	r3, [pc, #348]	; (25f8c <pow+0x33c>)
   25e2e:	4641      	mov	r1, r8
   25e30:	6053      	str	r3, [r2, #4]
   25e32:	4643      	mov	r3, r8
   25e34:	465a      	mov	r2, fp
   25e36:	621a      	str	r2, [r3, #32]
   25e38:	2200      	movs	r2, #0
   25e3a:	609e      	str	r6, [r3, #8]
   25e3c:	60df      	str	r7, [r3, #12]
   25e3e:	611c      	str	r4, [r3, #16]
   25e40:	615d      	str	r5, [r3, #20]
   25e42:	4b53      	ldr	r3, [pc, #332]	; (25f90 <pow+0x340>)
   25e44:	618a      	str	r2, [r1, #24]
   25e46:	61cb      	str	r3, [r1, #28]
   25e48:	9200      	str	r2, [sp, #0]
   25e4a:	9301      	str	r3, [sp, #4]
   25e4c:	464b      	mov	r3, r9
   25e4e:	2b02      	cmp	r3, #2
   25e50:	d19d      	bne.n	25d8e <pow+0x13e>
   25e52:	e752      	b.n	25cfa <pow+0xaa>
   25e54:	0030      	movs	r0, r6
   25e56:	0039      	movs	r1, r7
   25e58:	f000 ff20 	bl	26c9c <finite>
   25e5c:	2800      	cmp	r0, #0
   25e5e:	d100      	bne.n	25e62 <pow+0x212>
   25e60:	e75c      	b.n	25d1c <pow+0xcc>
   25e62:	0020      	movs	r0, r4
   25e64:	0029      	movs	r1, r5
   25e66:	f000 ff19 	bl	26c9c <finite>
   25e6a:	2800      	cmp	r0, #0
   25e6c:	d100      	bne.n	25e70 <pow+0x220>
   25e6e:	e755      	b.n	25d1c <pow+0xcc>
   25e70:	9800      	ldr	r0, [sp, #0]
   25e72:	9901      	ldr	r1, [sp, #4]
   25e74:	000b      	movs	r3, r1
   25e76:	0002      	movs	r2, r0
   25e78:	f003 fa98 	bl	293ac <__aeabi_dcmpun>
   25e7c:	ab04      	add	r3, sp, #16
   25e7e:	4698      	mov	r8, r3
   25e80:	2800      	cmp	r0, #0
   25e82:	d161      	bne.n	25f48 <pow+0x2f8>
   25e84:	2303      	movs	r3, #3
   25e86:	4642      	mov	r2, r8
   25e88:	9304      	str	r3, [sp, #16]
   25e8a:	4b40      	ldr	r3, [pc, #256]	; (25f8c <pow+0x33c>)
   25e8c:	6210      	str	r0, [r2, #32]
   25e8e:	6053      	str	r3, [r2, #4]
   25e90:	4653      	mov	r3, sl
   25e92:	781b      	ldrb	r3, [r3, #0]
   25e94:	6096      	str	r6, [r2, #8]
   25e96:	60d7      	str	r7, [r2, #12]
   25e98:	b25b      	sxtb	r3, r3
   25e9a:	6114      	str	r4, [r2, #16]
   25e9c:	6155      	str	r5, [r2, #20]
   25e9e:	4699      	mov	r9, r3
   25ea0:	2b00      	cmp	r3, #0
   25ea2:	d12f      	bne.n	25f04 <pow+0x2b4>
   25ea4:	22e0      	movs	r2, #224	; 0xe0
   25ea6:	4641      	mov	r1, r8
   25ea8:	4b3b      	ldr	r3, [pc, #236]	; (25f98 <pow+0x348>)
   25eaa:	0612      	lsls	r2, r2, #24
   25eac:	618a      	str	r2, [r1, #24]
   25eae:	61cb      	str	r3, [r1, #28]
   25eb0:	0030      	movs	r0, r6
   25eb2:	2200      	movs	r2, #0
   25eb4:	2300      	movs	r3, #0
   25eb6:	0039      	movs	r1, r7
   25eb8:	f001 f9a0 	bl	271fc <__aeabi_dcmplt>
   25ebc:	2800      	cmp	r0, #0
   25ebe:	d100      	bne.n	25ec2 <pow+0x272>
   25ec0:	e756      	b.n	25d70 <pow+0x120>
   25ec2:	2200      	movs	r2, #0
   25ec4:	4b35      	ldr	r3, [pc, #212]	; (25f9c <pow+0x34c>)
   25ec6:	0020      	movs	r0, r4
   25ec8:	0029      	movs	r1, r5
   25eca:	f002 fcd9 	bl	28880 <__aeabi_dmul>
   25ece:	0004      	movs	r4, r0
   25ed0:	000d      	movs	r5, r1
   25ed2:	f000 fef5 	bl	26cc0 <rint>
   25ed6:	0002      	movs	r2, r0
   25ed8:	000b      	movs	r3, r1
   25eda:	0020      	movs	r0, r4
   25edc:	0029      	movs	r1, r5
   25ede:	f001 f987 	bl	271f0 <__aeabi_dcmpeq>
   25ee2:	2800      	cmp	r0, #0
   25ee4:	d105      	bne.n	25ef2 <pow+0x2a2>
   25ee6:	22e0      	movs	r2, #224	; 0xe0
   25ee8:	4b2d      	ldr	r3, [pc, #180]	; (25fa0 <pow+0x350>)
   25eea:	0612      	lsls	r2, r2, #24
   25eec:	4641      	mov	r1, r8
   25eee:	618a      	str	r2, [r1, #24]
   25ef0:	61cb      	str	r3, [r1, #28]
   25ef2:	4653      	mov	r3, sl
   25ef4:	781b      	ldrb	r3, [r3, #0]
   25ef6:	b25b      	sxtb	r3, r3
   25ef8:	4699      	mov	r9, r3
   25efa:	464b      	mov	r3, r9
   25efc:	2b02      	cmp	r3, #2
   25efe:	d000      	beq.n	25f02 <pow+0x2b2>
   25f00:	e736      	b.n	25d70 <pow+0x120>
   25f02:	e73a      	b.n	25d7a <pow+0x12a>
   25f04:	2200      	movs	r2, #0
   25f06:	4641      	mov	r1, r8
   25f08:	4b26      	ldr	r3, [pc, #152]	; (25fa4 <pow+0x354>)
   25f0a:	0030      	movs	r0, r6
   25f0c:	618a      	str	r2, [r1, #24]
   25f0e:	61cb      	str	r3, [r1, #28]
   25f10:	2200      	movs	r2, #0
   25f12:	2300      	movs	r3, #0
   25f14:	0039      	movs	r1, r7
   25f16:	f001 f971 	bl	271fc <__aeabi_dcmplt>
   25f1a:	2800      	cmp	r0, #0
   25f1c:	d0ed      	beq.n	25efa <pow+0x2aa>
   25f1e:	2200      	movs	r2, #0
   25f20:	4b1e      	ldr	r3, [pc, #120]	; (25f9c <pow+0x34c>)
   25f22:	0020      	movs	r0, r4
   25f24:	0029      	movs	r1, r5
   25f26:	f002 fcab 	bl	28880 <__aeabi_dmul>
   25f2a:	0004      	movs	r4, r0
   25f2c:	000d      	movs	r5, r1
   25f2e:	f000 fec7 	bl	26cc0 <rint>
   25f32:	0002      	movs	r2, r0
   25f34:	000b      	movs	r3, r1
   25f36:	0020      	movs	r0, r4
   25f38:	0029      	movs	r1, r5
   25f3a:	f001 f959 	bl	271f0 <__aeabi_dcmpeq>
   25f3e:	2800      	cmp	r0, #0
   25f40:	d1d7      	bne.n	25ef2 <pow+0x2a2>
   25f42:	2200      	movs	r2, #0
   25f44:	4b13      	ldr	r3, [pc, #76]	; (25f94 <pow+0x344>)
   25f46:	e7d1      	b.n	25eec <pow+0x29c>
   25f48:	2301      	movs	r3, #1
   25f4a:	4642      	mov	r2, r8
   25f4c:	9304      	str	r3, [sp, #16]
   25f4e:	4b0f      	ldr	r3, [pc, #60]	; (25f8c <pow+0x33c>)
   25f50:	6053      	str	r3, [r2, #4]
   25f52:	4643      	mov	r3, r8
   25f54:	464a      	mov	r2, r9
   25f56:	611c      	str	r4, [r3, #16]
   25f58:	615d      	str	r5, [r3, #20]
   25f5a:	621a      	str	r2, [r3, #32]
   25f5c:	609e      	str	r6, [r3, #8]
   25f5e:	60df      	str	r7, [r3, #12]
   25f60:	2400      	movs	r4, #0
   25f62:	4653      	mov	r3, sl
   25f64:	571c      	ldrsb	r4, [r3, r4]
   25f66:	2c00      	cmp	r4, #0
   25f68:	d100      	bne.n	25f6c <pow+0x31c>
   25f6a:	e70b      	b.n	25d84 <pow+0x134>
   25f6c:	2300      	movs	r3, #0
   25f6e:	2200      	movs	r2, #0
   25f70:	0019      	movs	r1, r3
   25f72:	0010      	movs	r0, r2
   25f74:	f002 f850 	bl	28018 <__aeabi_ddiv>
   25f78:	4643      	mov	r3, r8
   25f7a:	6198      	str	r0, [r3, #24]
   25f7c:	61d9      	str	r1, [r3, #28]
   25f7e:	2c02      	cmp	r4, #2
   25f80:	d100      	bne.n	25f84 <pow+0x334>
   25f82:	e741      	b.n	25e08 <pow+0x1b8>
   25f84:	e703      	b.n	25d8e <pow+0x13e>
   25f86:	46c0      	nop			; (mov r8, r8)
   25f88:	20000030 	.word	0x20000030
   25f8c:	0002b7b4 	.word	0x0002b7b4
   25f90:	3ff00000 	.word	0x3ff00000
   25f94:	fff00000 	.word	0xfff00000
   25f98:	47efffff 	.word	0x47efffff
   25f9c:	3fe00000 	.word	0x3fe00000
   25fa0:	c7efffff 	.word	0xc7efffff
   25fa4:	7ff00000 	.word	0x7ff00000

00025fa8 <sqrt>:
   25fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   25faa:	4647      	mov	r7, r8
   25fac:	46ce      	mov	lr, r9
   25fae:	b580      	push	{r7, lr}
   25fb0:	b08d      	sub	sp, #52	; 0x34
   25fb2:	0004      	movs	r4, r0
   25fb4:	000d      	movs	r5, r1
   25fb6:	f000 fd8d 	bl	26ad4 <__ieee754_sqrt>
   25fba:	4b29      	ldr	r3, [pc, #164]	; (26060 <sqrt+0xb8>)
   25fbc:	0006      	movs	r6, r0
   25fbe:	781b      	ldrb	r3, [r3, #0]
   25fc0:	000f      	movs	r7, r1
   25fc2:	b25b      	sxtb	r3, r3
   25fc4:	4698      	mov	r8, r3
   25fc6:	3301      	adds	r3, #1
   25fc8:	d010      	beq.n	25fec <sqrt+0x44>
   25fca:	0022      	movs	r2, r4
   25fcc:	002b      	movs	r3, r5
   25fce:	0020      	movs	r0, r4
   25fd0:	0029      	movs	r1, r5
   25fd2:	f003 f9eb 	bl	293ac <__aeabi_dcmpun>
   25fd6:	4681      	mov	r9, r0
   25fd8:	2800      	cmp	r0, #0
   25fda:	d107      	bne.n	25fec <sqrt+0x44>
   25fdc:	2200      	movs	r2, #0
   25fde:	2300      	movs	r3, #0
   25fe0:	0020      	movs	r0, r4
   25fe2:	0029      	movs	r1, r5
   25fe4:	f001 f90a 	bl	271fc <__aeabi_dcmplt>
   25fe8:	2800      	cmp	r0, #0
   25fea:	d106      	bne.n	25ffa <sqrt+0x52>
   25fec:	0030      	movs	r0, r6
   25fee:	0039      	movs	r1, r7
   25ff0:	b00d      	add	sp, #52	; 0x34
   25ff2:	bc0c      	pop	{r2, r3}
   25ff4:	4690      	mov	r8, r2
   25ff6:	4699      	mov	r9, r3
   25ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25ffa:	2301      	movs	r3, #1
   25ffc:	9302      	str	r3, [sp, #8]
   25ffe:	4b19      	ldr	r3, [pc, #100]	; (26064 <sqrt+0xbc>)
   26000:	9406      	str	r4, [sp, #24]
   26002:	9507      	str	r5, [sp, #28]
   26004:	9303      	str	r3, [sp, #12]
   26006:	464b      	mov	r3, r9
   26008:	930a      	str	r3, [sp, #40]	; 0x28
   2600a:	4643      	mov	r3, r8
   2600c:	9404      	str	r4, [sp, #16]
   2600e:	9505      	str	r5, [sp, #20]
   26010:	2b00      	cmp	r3, #0
   26012:	d015      	beq.n	26040 <sqrt+0x98>
   26014:	2300      	movs	r3, #0
   26016:	2200      	movs	r2, #0
   26018:	0019      	movs	r1, r3
   2601a:	0010      	movs	r0, r2
   2601c:	f001 fffc 	bl	28018 <__aeabi_ddiv>
   26020:	4643      	mov	r3, r8
   26022:	9008      	str	r0, [sp, #32]
   26024:	9109      	str	r1, [sp, #36]	; 0x24
   26026:	2b02      	cmp	r3, #2
   26028:	d10e      	bne.n	26048 <sqrt+0xa0>
   2602a:	f003 fb19 	bl	29660 <__errno>
   2602e:	2321      	movs	r3, #33	; 0x21
   26030:	6003      	str	r3, [r0, #0]
   26032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26034:	9301      	str	r3, [sp, #4]
   26036:	2b00      	cmp	r3, #0
   26038:	d10c      	bne.n	26054 <sqrt+0xac>
   2603a:	9e08      	ldr	r6, [sp, #32]
   2603c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2603e:	e7d5      	b.n	25fec <sqrt+0x44>
   26040:	2300      	movs	r3, #0
   26042:	2400      	movs	r4, #0
   26044:	9308      	str	r3, [sp, #32]
   26046:	9409      	str	r4, [sp, #36]	; 0x24
   26048:	a802      	add	r0, sp, #8
   2604a:	f000 fe31 	bl	26cb0 <matherr>
   2604e:	2800      	cmp	r0, #0
   26050:	d1ef      	bne.n	26032 <sqrt+0x8a>
   26052:	e7ea      	b.n	2602a <sqrt+0x82>
   26054:	f003 fb04 	bl	29660 <__errno>
   26058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2605a:	9301      	str	r3, [sp, #4]
   2605c:	6003      	str	r3, [r0, #0]
   2605e:	e7ec      	b.n	2603a <sqrt+0x92>
   26060:	20000030 	.word	0x20000030
   26064:	0002b7b8 	.word	0x0002b7b8

00026068 <__ieee754_pow>:
   26068:	b5f0      	push	{r4, r5, r6, r7, lr}
   2606a:	4657      	mov	r7, sl
   2606c:	464e      	mov	r6, r9
   2606e:	4645      	mov	r5, r8
   26070:	46de      	mov	lr, fp
   26072:	001c      	movs	r4, r3
   26074:	0013      	movs	r3, r2
   26076:	b5e0      	push	{r5, r6, r7, lr}
   26078:	0065      	lsls	r5, r4, #1
   2607a:	b091      	sub	sp, #68	; 0x44
   2607c:	086d      	lsrs	r5, r5, #1
   2607e:	9300      	str	r3, [sp, #0]
   26080:	9401      	str	r4, [sp, #4]
   26082:	0007      	movs	r7, r0
   26084:	000e      	movs	r6, r1
   26086:	4680      	mov	r8, r0
   26088:	4689      	mov	r9, r1
   2608a:	46a2      	mov	sl, r4
   2608c:	432b      	orrs	r3, r5
   2608e:	d031      	beq.n	260f4 <__ieee754_pow+0x8c>
   26090:	4b67      	ldr	r3, [pc, #412]	; (26230 <__ieee754_pow+0x1c8>)
   26092:	0074      	lsls	r4, r6, #1
   26094:	0864      	lsrs	r4, r4, #1
   26096:	429c      	cmp	r4, r3
   26098:	dc27      	bgt.n	260ea <__ieee754_pow+0x82>
   2609a:	d024      	beq.n	260e6 <__ieee754_pow+0x7e>
   2609c:	429d      	cmp	r5, r3
   2609e:	dc24      	bgt.n	260ea <__ieee754_pow+0x82>
   260a0:	4b63      	ldr	r3, [pc, #396]	; (26230 <__ieee754_pow+0x1c8>)
   260a2:	429d      	cmp	r5, r3
   260a4:	d100      	bne.n	260a8 <__ieee754_pow+0x40>
   260a6:	e081      	b.n	261ac <__ieee754_pow+0x144>
   260a8:	2300      	movs	r3, #0
   260aa:	469b      	mov	fp, r3
   260ac:	464b      	mov	r3, r9
   260ae:	2b00      	cmp	r3, #0
   260b0:	da00      	bge.n	260b4 <__ieee754_pow+0x4c>
   260b2:	e07f      	b.n	261b4 <__ieee754_pow+0x14c>
   260b4:	2a00      	cmp	r2, #0
   260b6:	d12c      	bne.n	26112 <__ieee754_pow+0xaa>
   260b8:	4b5d      	ldr	r3, [pc, #372]	; (26230 <__ieee754_pow+0x1c8>)
   260ba:	429d      	cmp	r5, r3
   260bc:	d100      	bne.n	260c0 <__ieee754_pow+0x58>
   260be:	e097      	b.n	261f0 <__ieee754_pow+0x188>
   260c0:	4b5c      	ldr	r3, [pc, #368]	; (26234 <__ieee754_pow+0x1cc>)
   260c2:	429d      	cmp	r5, r3
   260c4:	d066      	beq.n	26194 <__ieee754_pow+0x12c>
   260c6:	2380      	movs	r3, #128	; 0x80
   260c8:	05db      	lsls	r3, r3, #23
   260ca:	459a      	cmp	sl, r3
   260cc:	d100      	bne.n	260d0 <__ieee754_pow+0x68>
   260ce:	e3b9      	b.n	26844 <__ieee754_pow+0x7dc>
   260d0:	4b59      	ldr	r3, [pc, #356]	; (26238 <__ieee754_pow+0x1d0>)
   260d2:	459a      	cmp	sl, r3
   260d4:	d11d      	bne.n	26112 <__ieee754_pow+0xaa>
   260d6:	464b      	mov	r3, r9
   260d8:	2b00      	cmp	r3, #0
   260da:	db1a      	blt.n	26112 <__ieee754_pow+0xaa>
   260dc:	0038      	movs	r0, r7
   260de:	0031      	movs	r1, r6
   260e0:	f000 fcf8 	bl	26ad4 <__ieee754_sqrt>
   260e4:	e008      	b.n	260f8 <__ieee754_pow+0x90>
   260e6:	2800      	cmp	r0, #0
   260e8:	d00d      	beq.n	26106 <__ieee754_pow+0x9e>
   260ea:	4b54      	ldr	r3, [pc, #336]	; (2623c <__ieee754_pow+0x1d4>)
   260ec:	469c      	mov	ip, r3
   260ee:	4464      	add	r4, ip
   260f0:	4327      	orrs	r7, r4
   260f2:	d10a      	bne.n	2610a <__ieee754_pow+0xa2>
   260f4:	2000      	movs	r0, #0
   260f6:	494f      	ldr	r1, [pc, #316]	; (26234 <__ieee754_pow+0x1cc>)
   260f8:	b011      	add	sp, #68	; 0x44
   260fa:	bc3c      	pop	{r2, r3, r4, r5}
   260fc:	4690      	mov	r8, r2
   260fe:	4699      	mov	r9, r3
   26100:	46a2      	mov	sl, r4
   26102:	46ab      	mov	fp, r5
   26104:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26106:	42a5      	cmp	r5, r4
   26108:	ddca      	ble.n	260a0 <__ieee754_pow+0x38>
   2610a:	484d      	ldr	r0, [pc, #308]	; (26240 <__ieee754_pow+0x1d8>)
   2610c:	f000 fdd2 	bl	26cb4 <nan>
   26110:	e7f2      	b.n	260f8 <__ieee754_pow+0x90>
   26112:	0038      	movs	r0, r7
   26114:	0031      	movs	r1, r6
   26116:	f000 fdbd 	bl	26c94 <fabs>
   2611a:	4643      	mov	r3, r8
   2611c:	2b00      	cmp	r3, #0
   2611e:	d11d      	bne.n	2615c <__ieee754_pow+0xf4>
   26120:	2c00      	cmp	r4, #0
   26122:	d004      	beq.n	2612e <__ieee754_pow+0xc6>
   26124:	4a43      	ldr	r2, [pc, #268]	; (26234 <__ieee754_pow+0x1cc>)
   26126:	00b3      	lsls	r3, r6, #2
   26128:	089b      	lsrs	r3, r3, #2
   2612a:	4293      	cmp	r3, r2
   2612c:	d116      	bne.n	2615c <__ieee754_pow+0xf4>
   2612e:	4653      	mov	r3, sl
   26130:	2b00      	cmp	r3, #0
   26132:	da00      	bge.n	26136 <__ieee754_pow+0xce>
   26134:	e3c5      	b.n	268c2 <__ieee754_pow+0x85a>
   26136:	464b      	mov	r3, r9
   26138:	2b00      	cmp	r3, #0
   2613a:	dadd      	bge.n	260f8 <__ieee754_pow+0x90>
   2613c:	4b3f      	ldr	r3, [pc, #252]	; (2623c <__ieee754_pow+0x1d4>)
   2613e:	469c      	mov	ip, r3
   26140:	465b      	mov	r3, fp
   26142:	4464      	add	r4, ip
   26144:	431c      	orrs	r4, r3
   26146:	d101      	bne.n	2614c <__ieee754_pow+0xe4>
   26148:	f000 fc53 	bl	269f2 <__ieee754_pow+0x98a>
   2614c:	465b      	mov	r3, fp
   2614e:	2b01      	cmp	r3, #1
   26150:	d1d2      	bne.n	260f8 <__ieee754_pow+0x90>
   26152:	2480      	movs	r4, #128	; 0x80
   26154:	0624      	lsls	r4, r4, #24
   26156:	190b      	adds	r3, r1, r4
   26158:	0019      	movs	r1, r3
   2615a:	e7cd      	b.n	260f8 <__ieee754_pow+0x90>
   2615c:	0ff3      	lsrs	r3, r6, #31
   2615e:	3b01      	subs	r3, #1
   26160:	4698      	mov	r8, r3
   26162:	465b      	mov	r3, fp
   26164:	4642      	mov	r2, r8
   26166:	4313      	orrs	r3, r2
   26168:	d057      	beq.n	2621a <__ieee754_pow+0x1b2>
   2616a:	4b36      	ldr	r3, [pc, #216]	; (26244 <__ieee754_pow+0x1dc>)
   2616c:	429d      	cmp	r5, r3
   2616e:	dd77      	ble.n	26260 <__ieee754_pow+0x1f8>
   26170:	4b35      	ldr	r3, [pc, #212]	; (26248 <__ieee754_pow+0x1e0>)
   26172:	429d      	cmp	r5, r3
   26174:	dc00      	bgt.n	26178 <__ieee754_pow+0x110>
   26176:	e3b1      	b.n	268dc <__ieee754_pow+0x874>
   26178:	4b34      	ldr	r3, [pc, #208]	; (2624c <__ieee754_pow+0x1e4>)
   2617a:	429c      	cmp	r4, r3
   2617c:	dc00      	bgt.n	26180 <__ieee754_pow+0x118>
   2617e:	e3a8      	b.n	268d2 <__ieee754_pow+0x86a>
   26180:	4653      	mov	r3, sl
   26182:	2b00      	cmp	r3, #0
   26184:	dd43      	ble.n	2620e <__ieee754_pow+0x1a6>
   26186:	4a32      	ldr	r2, [pc, #200]	; (26250 <__ieee754_pow+0x1e8>)
   26188:	4b32      	ldr	r3, [pc, #200]	; (26254 <__ieee754_pow+0x1ec>)
   2618a:	0010      	movs	r0, r2
   2618c:	0019      	movs	r1, r3
   2618e:	f002 fb77 	bl	28880 <__aeabi_dmul>
   26192:	e7b1      	b.n	260f8 <__ieee754_pow+0x90>
   26194:	4653      	mov	r3, sl
   26196:	0038      	movs	r0, r7
   26198:	0031      	movs	r1, r6
   2619a:	2b00      	cmp	r3, #0
   2619c:	daac      	bge.n	260f8 <__ieee754_pow+0x90>
   2619e:	003a      	movs	r2, r7
   261a0:	0033      	movs	r3, r6
   261a2:	2000      	movs	r0, #0
   261a4:	4923      	ldr	r1, [pc, #140]	; (26234 <__ieee754_pow+0x1cc>)
   261a6:	f001 ff37 	bl	28018 <__aeabi_ddiv>
   261aa:	e7a5      	b.n	260f8 <__ieee754_pow+0x90>
   261ac:	2a00      	cmp	r2, #0
   261ae:	d100      	bne.n	261b2 <__ieee754_pow+0x14a>
   261b0:	e77a      	b.n	260a8 <__ieee754_pow+0x40>
   261b2:	e79a      	b.n	260ea <__ieee754_pow+0x82>
   261b4:	4b28      	ldr	r3, [pc, #160]	; (26258 <__ieee754_pow+0x1f0>)
   261b6:	429d      	cmp	r5, r3
   261b8:	dc2c      	bgt.n	26214 <__ieee754_pow+0x1ac>
   261ba:	4b24      	ldr	r3, [pc, #144]	; (2624c <__ieee754_pow+0x1e4>)
   261bc:	429d      	cmp	r5, r3
   261be:	dc00      	bgt.n	261c2 <__ieee754_pow+0x15a>
   261c0:	e778      	b.n	260b4 <__ieee754_pow+0x4c>
   261c2:	4926      	ldr	r1, [pc, #152]	; (2625c <__ieee754_pow+0x1f4>)
   261c4:	152b      	asrs	r3, r5, #20
   261c6:	468c      	mov	ip, r1
   261c8:	4463      	add	r3, ip
   261ca:	2b14      	cmp	r3, #20
   261cc:	dc01      	bgt.n	261d2 <__ieee754_pow+0x16a>
   261ce:	f000 fbf3 	bl	269b8 <__ieee754_pow+0x950>
   261d2:	2134      	movs	r1, #52	; 0x34
   261d4:	1acb      	subs	r3, r1, r3
   261d6:	9900      	ldr	r1, [sp, #0]
   261d8:	40d9      	lsrs	r1, r3
   261da:	0008      	movs	r0, r1
   261dc:	4098      	lsls	r0, r3
   261de:	4282      	cmp	r2, r0
   261e0:	d000      	beq.n	261e4 <__ieee754_pow+0x17c>
   261e2:	e767      	b.n	260b4 <__ieee754_pow+0x4c>
   261e4:	2301      	movs	r3, #1
   261e6:	4019      	ands	r1, r3
   261e8:	3301      	adds	r3, #1
   261ea:	1a5b      	subs	r3, r3, r1
   261ec:	469b      	mov	fp, r3
   261ee:	e761      	b.n	260b4 <__ieee754_pow+0x4c>
   261f0:	4b12      	ldr	r3, [pc, #72]	; (2623c <__ieee754_pow+0x1d4>)
   261f2:	18e3      	adds	r3, r4, r3
   261f4:	431f      	orrs	r7, r3
   261f6:	d100      	bne.n	261fa <__ieee754_pow+0x192>
   261f8:	e77c      	b.n	260f4 <__ieee754_pow+0x8c>
   261fa:	4b14      	ldr	r3, [pc, #80]	; (2624c <__ieee754_pow+0x1e4>)
   261fc:	429c      	cmp	r4, r3
   261fe:	dc00      	bgt.n	26202 <__ieee754_pow+0x19a>
   26200:	e327      	b.n	26852 <__ieee754_pow+0x7ea>
   26202:	9800      	ldr	r0, [sp, #0]
   26204:	9901      	ldr	r1, [sp, #4]
   26206:	4653      	mov	r3, sl
   26208:	2b00      	cmp	r3, #0
   2620a:	db00      	blt.n	2620e <__ieee754_pow+0x1a6>
   2620c:	e774      	b.n	260f8 <__ieee754_pow+0x90>
   2620e:	2000      	movs	r0, #0
   26210:	2100      	movs	r1, #0
   26212:	e771      	b.n	260f8 <__ieee754_pow+0x90>
   26214:	2302      	movs	r3, #2
   26216:	469b      	mov	fp, r3
   26218:	e74c      	b.n	260b4 <__ieee754_pow+0x4c>
   2621a:	003a      	movs	r2, r7
   2621c:	0033      	movs	r3, r6
   2621e:	0038      	movs	r0, r7
   26220:	0031      	movs	r1, r6
   26222:	f002 fdad 	bl	28d80 <__aeabi_dsub>
   26226:	0002      	movs	r2, r0
   26228:	000b      	movs	r3, r1
   2622a:	f001 fef5 	bl	28018 <__aeabi_ddiv>
   2622e:	e763      	b.n	260f8 <__ieee754_pow+0x90>
   26230:	7ff00000 	.word	0x7ff00000
   26234:	3ff00000 	.word	0x3ff00000
   26238:	3fe00000 	.word	0x3fe00000
   2623c:	c0100000 	.word	0xc0100000
   26240:	0002b7bc 	.word	0x0002b7bc
   26244:	41e00000 	.word	0x41e00000
   26248:	43f00000 	.word	0x43f00000
   2624c:	3fefffff 	.word	0x3fefffff
   26250:	8800759c 	.word	0x8800759c
   26254:	7e37e43c 	.word	0x7e37e43c
   26258:	433fffff 	.word	0x433fffff
   2625c:	fffffc01 	.word	0xfffffc01
   26260:	4be9      	ldr	r3, [pc, #932]	; (26608 <__ieee754_pow+0x5a0>)
   26262:	2200      	movs	r2, #0
   26264:	429c      	cmp	r4, r3
   26266:	dc06      	bgt.n	26276 <__ieee754_pow+0x20e>
   26268:	2200      	movs	r2, #0
   2626a:	4be8      	ldr	r3, [pc, #928]	; (2660c <__ieee754_pow+0x5a4>)
   2626c:	f002 fb08 	bl	28880 <__aeabi_dmul>
   26270:	2235      	movs	r2, #53	; 0x35
   26272:	000c      	movs	r4, r1
   26274:	4252      	negs	r2, r2
   26276:	4de6      	ldr	r5, [pc, #920]	; (26610 <__ieee754_pow+0x5a8>)
   26278:	1523      	asrs	r3, r4, #20
   2627a:	46ac      	mov	ip, r5
   2627c:	4463      	add	r3, ip
   2627e:	4699      	mov	r9, r3
   26280:	0324      	lsls	r4, r4, #12
   26282:	4de4      	ldr	r5, [pc, #912]	; (26614 <__ieee754_pow+0x5ac>)
   26284:	4be4      	ldr	r3, [pc, #912]	; (26618 <__ieee754_pow+0x5b0>)
   26286:	0b24      	lsrs	r4, r4, #12
   26288:	4491      	add	r9, r2
   2628a:	4325      	orrs	r5, r4
   2628c:	429c      	cmp	r4, r3
   2628e:	dd09      	ble.n	262a4 <__ieee754_pow+0x23c>
   26290:	4be2      	ldr	r3, [pc, #904]	; (2661c <__ieee754_pow+0x5b4>)
   26292:	429c      	cmp	r4, r3
   26294:	dc00      	bgt.n	26298 <__ieee754_pow+0x230>
   26296:	e3b6      	b.n	26a06 <__ieee754_pow+0x99e>
   26298:	2301      	movs	r3, #1
   2629a:	469c      	mov	ip, r3
   2629c:	4be0      	ldr	r3, [pc, #896]	; (26620 <__ieee754_pow+0x5b8>)
   2629e:	44e1      	add	r9, ip
   262a0:	469c      	mov	ip, r3
   262a2:	4465      	add	r5, ip
   262a4:	2300      	movs	r3, #0
   262a6:	2400      	movs	r4, #0
   262a8:	2200      	movs	r2, #0
   262aa:	9308      	str	r3, [sp, #32]
   262ac:	9409      	str	r4, [sp, #36]	; 0x24
   262ae:	930c      	str	r3, [sp, #48]	; 0x30
   262b0:	940d      	str	r4, [sp, #52]	; 0x34
   262b2:	2400      	movs	r4, #0
   262b4:	4bd7      	ldr	r3, [pc, #860]	; (26614 <__ieee754_pow+0x5ac>)
   262b6:	9206      	str	r2, [sp, #24]
   262b8:	9307      	str	r3, [sp, #28]
   262ba:	9a06      	ldr	r2, [sp, #24]
   262bc:	9b07      	ldr	r3, [sp, #28]
   262be:	0029      	movs	r1, r5
   262c0:	900a      	str	r0, [sp, #40]	; 0x28
   262c2:	910b      	str	r1, [sp, #44]	; 0x2c
   262c4:	f002 fd5c 	bl	28d80 <__aeabi_dsub>
   262c8:	9a06      	ldr	r2, [sp, #24]
   262ca:	9b07      	ldr	r3, [sp, #28]
   262cc:	0006      	movs	r6, r0
   262ce:	000f      	movs	r7, r1
   262d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   262d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   262d4:	f001 fb90 	bl	279f8 <__aeabi_dadd>
   262d8:	0002      	movs	r2, r0
   262da:	000b      	movs	r3, r1
   262dc:	2000      	movs	r0, #0
   262de:	49cd      	ldr	r1, [pc, #820]	; (26614 <__ieee754_pow+0x5ac>)
   262e0:	f001 fe9a 	bl	28018 <__aeabi_ddiv>
   262e4:	000a      	movs	r2, r1
   262e6:	0001      	movs	r1, r0
   262e8:	0013      	movs	r3, r2
   262ea:	910e      	str	r1, [sp, #56]	; 0x38
   262ec:	920f      	str	r2, [sp, #60]	; 0x3c
   262ee:	0002      	movs	r2, r0
   262f0:	0039      	movs	r1, r7
   262f2:	0030      	movs	r0, r6
   262f4:	f002 fac4 	bl	28880 <__aeabi_dmul>
   262f8:	000a      	movs	r2, r1
   262fa:	0001      	movs	r1, r0
   262fc:	2080      	movs	r0, #128	; 0x80
   262fe:	9104      	str	r1, [sp, #16]
   26300:	9205      	str	r2, [sp, #20]
   26302:	0013      	movs	r3, r2
   26304:	2200      	movs	r2, #0
   26306:	1069      	asrs	r1, r5, #1
   26308:	2580      	movs	r5, #128	; 0x80
   2630a:	0300      	lsls	r0, r0, #12
   2630c:	4684      	mov	ip, r0
   2630e:	9202      	str	r2, [sp, #8]
   26310:	9303      	str	r3, [sp, #12]
   26312:	2200      	movs	r2, #0
   26314:	05ad      	lsls	r5, r5, #22
   26316:	430d      	orrs	r5, r1
   26318:	4465      	add	r5, ip
   2631a:	192b      	adds	r3, r5, r4
   2631c:	9802      	ldr	r0, [sp, #8]
   2631e:	9903      	ldr	r1, [sp, #12]
   26320:	0014      	movs	r4, r2
   26322:	001d      	movs	r5, r3
   26324:	f002 faac 	bl	28880 <__aeabi_dmul>
   26328:	0002      	movs	r2, r0
   2632a:	000b      	movs	r3, r1
   2632c:	0030      	movs	r0, r6
   2632e:	0039      	movs	r1, r7
   26330:	f002 fd26 	bl	28d80 <__aeabi_dsub>
   26334:	9a06      	ldr	r2, [sp, #24]
   26336:	9b07      	ldr	r3, [sp, #28]
   26338:	0006      	movs	r6, r0
   2633a:	000f      	movs	r7, r1
   2633c:	0020      	movs	r0, r4
   2633e:	0029      	movs	r1, r5
   26340:	f002 fd1e 	bl	28d80 <__aeabi_dsub>
   26344:	0002      	movs	r2, r0
   26346:	000b      	movs	r3, r1
   26348:	980a      	ldr	r0, [sp, #40]	; 0x28
   2634a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2634c:	f002 fd18 	bl	28d80 <__aeabi_dsub>
   26350:	9a02      	ldr	r2, [sp, #8]
   26352:	9b03      	ldr	r3, [sp, #12]
   26354:	f002 fa94 	bl	28880 <__aeabi_dmul>
   26358:	0002      	movs	r2, r0
   2635a:	000b      	movs	r3, r1
   2635c:	0030      	movs	r0, r6
   2635e:	0039      	movs	r1, r7
   26360:	f002 fd0e 	bl	28d80 <__aeabi_dsub>
   26364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26368:	f002 fa8a 	bl	28880 <__aeabi_dmul>
   2636c:	9d04      	ldr	r5, [sp, #16]
   2636e:	9e05      	ldr	r6, [sp, #20]
   26370:	9006      	str	r0, [sp, #24]
   26372:	9107      	str	r1, [sp, #28]
   26374:	002a      	movs	r2, r5
   26376:	0033      	movs	r3, r6
   26378:	0028      	movs	r0, r5
   2637a:	0031      	movs	r1, r6
   2637c:	f002 fa80 	bl	28880 <__aeabi_dmul>
   26380:	0006      	movs	r6, r0
   26382:	000f      	movs	r7, r1
   26384:	4aa7      	ldr	r2, [pc, #668]	; (26624 <__ieee754_pow+0x5bc>)
   26386:	4ba8      	ldr	r3, [pc, #672]	; (26628 <__ieee754_pow+0x5c0>)
   26388:	f002 fa7a 	bl	28880 <__aeabi_dmul>
   2638c:	4aa7      	ldr	r2, [pc, #668]	; (2662c <__ieee754_pow+0x5c4>)
   2638e:	4ba8      	ldr	r3, [pc, #672]	; (26630 <__ieee754_pow+0x5c8>)
   26390:	f001 fb32 	bl	279f8 <__aeabi_dadd>
   26394:	0032      	movs	r2, r6
   26396:	003b      	movs	r3, r7
   26398:	f002 fa72 	bl	28880 <__aeabi_dmul>
   2639c:	4aa5      	ldr	r2, [pc, #660]	; (26634 <__ieee754_pow+0x5cc>)
   2639e:	4ba6      	ldr	r3, [pc, #664]	; (26638 <__ieee754_pow+0x5d0>)
   263a0:	f001 fb2a 	bl	279f8 <__aeabi_dadd>
   263a4:	0032      	movs	r2, r6
   263a6:	003b      	movs	r3, r7
   263a8:	f002 fa6a 	bl	28880 <__aeabi_dmul>
   263ac:	4aa3      	ldr	r2, [pc, #652]	; (2663c <__ieee754_pow+0x5d4>)
   263ae:	4ba4      	ldr	r3, [pc, #656]	; (26640 <__ieee754_pow+0x5d8>)
   263b0:	f001 fb22 	bl	279f8 <__aeabi_dadd>
   263b4:	0032      	movs	r2, r6
   263b6:	003b      	movs	r3, r7
   263b8:	f002 fa62 	bl	28880 <__aeabi_dmul>
   263bc:	4aa1      	ldr	r2, [pc, #644]	; (26644 <__ieee754_pow+0x5dc>)
   263be:	4ba2      	ldr	r3, [pc, #648]	; (26648 <__ieee754_pow+0x5e0>)
   263c0:	f001 fb1a 	bl	279f8 <__aeabi_dadd>
   263c4:	0032      	movs	r2, r6
   263c6:	003b      	movs	r3, r7
   263c8:	f002 fa5a 	bl	28880 <__aeabi_dmul>
   263cc:	4a9f      	ldr	r2, [pc, #636]	; (2664c <__ieee754_pow+0x5e4>)
   263ce:	4ba0      	ldr	r3, [pc, #640]	; (26650 <__ieee754_pow+0x5e8>)
   263d0:	f001 fb12 	bl	279f8 <__aeabi_dadd>
   263d4:	0032      	movs	r2, r6
   263d6:	0004      	movs	r4, r0
   263d8:	000d      	movs	r5, r1
   263da:	003b      	movs	r3, r7
   263dc:	0030      	movs	r0, r6
   263de:	0039      	movs	r1, r7
   263e0:	f002 fa4e 	bl	28880 <__aeabi_dmul>
   263e4:	0002      	movs	r2, r0
   263e6:	000b      	movs	r3, r1
   263e8:	0020      	movs	r0, r4
   263ea:	0029      	movs	r1, r5
   263ec:	f002 fa48 	bl	28880 <__aeabi_dmul>
   263f0:	9e02      	ldr	r6, [sp, #8]
   263f2:	9f03      	ldr	r7, [sp, #12]
   263f4:	0004      	movs	r4, r0
   263f6:	000d      	movs	r5, r1
   263f8:	9804      	ldr	r0, [sp, #16]
   263fa:	9905      	ldr	r1, [sp, #20]
   263fc:	0032      	movs	r2, r6
   263fe:	003b      	movs	r3, r7
   26400:	f001 fafa 	bl	279f8 <__aeabi_dadd>
   26404:	9a06      	ldr	r2, [sp, #24]
   26406:	9b07      	ldr	r3, [sp, #28]
   26408:	f002 fa3a 	bl	28880 <__aeabi_dmul>
   2640c:	0022      	movs	r2, r4
   2640e:	002b      	movs	r3, r5
   26410:	f001 faf2 	bl	279f8 <__aeabi_dadd>
   26414:	0032      	movs	r2, r6
   26416:	900a      	str	r0, [sp, #40]	; 0x28
   26418:	910b      	str	r1, [sp, #44]	; 0x2c
   2641a:	003b      	movs	r3, r7
   2641c:	0030      	movs	r0, r6
   2641e:	0039      	movs	r1, r7
   26420:	9602      	str	r6, [sp, #8]
   26422:	9703      	str	r7, [sp, #12]
   26424:	f002 fa2c 	bl	28880 <__aeabi_dmul>
   26428:	2200      	movs	r2, #0
   2642a:	4b8a      	ldr	r3, [pc, #552]	; (26654 <__ieee754_pow+0x5ec>)
   2642c:	0004      	movs	r4, r0
   2642e:	000d      	movs	r5, r1
   26430:	f001 fae2 	bl	279f8 <__aeabi_dadd>
   26434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26438:	f001 fade 	bl	279f8 <__aeabi_dadd>
   2643c:	2600      	movs	r6, #0
   2643e:	000f      	movs	r7, r1
   26440:	0032      	movs	r2, r6
   26442:	000b      	movs	r3, r1
   26444:	9802      	ldr	r0, [sp, #8]
   26446:	9903      	ldr	r1, [sp, #12]
   26448:	f002 fa1a 	bl	28880 <__aeabi_dmul>
   2644c:	2200      	movs	r2, #0
   2644e:	9002      	str	r0, [sp, #8]
   26450:	9103      	str	r1, [sp, #12]
   26452:	4b80      	ldr	r3, [pc, #512]	; (26654 <__ieee754_pow+0x5ec>)
   26454:	0030      	movs	r0, r6
   26456:	0039      	movs	r1, r7
   26458:	f002 fc92 	bl	28d80 <__aeabi_dsub>
   2645c:	0022      	movs	r2, r4
   2645e:	002b      	movs	r3, r5
   26460:	f002 fc8e 	bl	28d80 <__aeabi_dsub>
   26464:	0002      	movs	r2, r0
   26466:	000b      	movs	r3, r1
   26468:	980a      	ldr	r0, [sp, #40]	; 0x28
   2646a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2646c:	f002 fc88 	bl	28d80 <__aeabi_dsub>
   26470:	9a04      	ldr	r2, [sp, #16]
   26472:	9b05      	ldr	r3, [sp, #20]
   26474:	f002 fa04 	bl	28880 <__aeabi_dmul>
   26478:	0032      	movs	r2, r6
   2647a:	0004      	movs	r4, r0
   2647c:	000d      	movs	r5, r1
   2647e:	9806      	ldr	r0, [sp, #24]
   26480:	9907      	ldr	r1, [sp, #28]
   26482:	003b      	movs	r3, r7
   26484:	f002 f9fc 	bl	28880 <__aeabi_dmul>
   26488:	0002      	movs	r2, r0
   2648a:	000b      	movs	r3, r1
   2648c:	0020      	movs	r0, r4
   2648e:	0029      	movs	r1, r5
   26490:	f001 fab2 	bl	279f8 <__aeabi_dadd>
   26494:	0004      	movs	r4, r0
   26496:	000d      	movs	r5, r1
   26498:	0002      	movs	r2, r0
   2649a:	000b      	movs	r3, r1
   2649c:	9802      	ldr	r0, [sp, #8]
   2649e:	9903      	ldr	r1, [sp, #12]
   264a0:	f001 faaa 	bl	279f8 <__aeabi_dadd>
   264a4:	2600      	movs	r6, #0
   264a6:	22e0      	movs	r2, #224	; 0xe0
   264a8:	4b6b      	ldr	r3, [pc, #428]	; (26658 <__ieee754_pow+0x5f0>)
   264aa:	0612      	lsls	r2, r2, #24
   264ac:	0030      	movs	r0, r6
   264ae:	000f      	movs	r7, r1
   264b0:	f002 f9e6 	bl	28880 <__aeabi_dmul>
   264b4:	9a02      	ldr	r2, [sp, #8]
   264b6:	9b03      	ldr	r3, [sp, #12]
   264b8:	9004      	str	r0, [sp, #16]
   264ba:	9105      	str	r1, [sp, #20]
   264bc:	0030      	movs	r0, r6
   264be:	0039      	movs	r1, r7
   264c0:	f002 fc5e 	bl	28d80 <__aeabi_dsub>
   264c4:	0002      	movs	r2, r0
   264c6:	000b      	movs	r3, r1
   264c8:	0020      	movs	r0, r4
   264ca:	0029      	movs	r1, r5
   264cc:	f002 fc58 	bl	28d80 <__aeabi_dsub>
   264d0:	4a62      	ldr	r2, [pc, #392]	; (2665c <__ieee754_pow+0x5f4>)
   264d2:	4b61      	ldr	r3, [pc, #388]	; (26658 <__ieee754_pow+0x5f0>)
   264d4:	f002 f9d4 	bl	28880 <__aeabi_dmul>
   264d8:	4a61      	ldr	r2, [pc, #388]	; (26660 <__ieee754_pow+0x5f8>)
   264da:	0004      	movs	r4, r0
   264dc:	000d      	movs	r5, r1
   264de:	4b61      	ldr	r3, [pc, #388]	; (26664 <__ieee754_pow+0x5fc>)
   264e0:	0030      	movs	r0, r6
   264e2:	0039      	movs	r1, r7
   264e4:	f002 f9cc 	bl	28880 <__aeabi_dmul>
   264e8:	0002      	movs	r2, r0
   264ea:	000b      	movs	r3, r1
   264ec:	0020      	movs	r0, r4
   264ee:	0029      	movs	r1, r5
   264f0:	f001 fa82 	bl	279f8 <__aeabi_dadd>
   264f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   264f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   264f8:	f001 fa7e 	bl	279f8 <__aeabi_dadd>
   264fc:	0006      	movs	r6, r0
   264fe:	4648      	mov	r0, r9
   26500:	000f      	movs	r7, r1
   26502:	f002 ffa7 	bl	29454 <__aeabi_i2d>
   26506:	0004      	movs	r4, r0
   26508:	000d      	movs	r5, r1
   2650a:	9804      	ldr	r0, [sp, #16]
   2650c:	9905      	ldr	r1, [sp, #20]
   2650e:	0032      	movs	r2, r6
   26510:	003b      	movs	r3, r7
   26512:	f001 fa71 	bl	279f8 <__aeabi_dadd>
   26516:	9a08      	ldr	r2, [sp, #32]
   26518:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2651a:	f001 fa6d 	bl	279f8 <__aeabi_dadd>
   2651e:	0022      	movs	r2, r4
   26520:	002b      	movs	r3, r5
   26522:	f001 fa69 	bl	279f8 <__aeabi_dadd>
   26526:	2000      	movs	r0, #0
   26528:	0022      	movs	r2, r4
   2652a:	002b      	movs	r3, r5
   2652c:	9002      	str	r0, [sp, #8]
   2652e:	9103      	str	r1, [sp, #12]
   26530:	f002 fc26 	bl	28d80 <__aeabi_dsub>
   26534:	9a08      	ldr	r2, [sp, #32]
   26536:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26538:	f002 fc22 	bl	28d80 <__aeabi_dsub>
   2653c:	9a04      	ldr	r2, [sp, #16]
   2653e:	9b05      	ldr	r3, [sp, #20]
   26540:	f002 fc1e 	bl	28d80 <__aeabi_dsub>
   26544:	0002      	movs	r2, r0
   26546:	000b      	movs	r3, r1
   26548:	0030      	movs	r0, r6
   2654a:	0039      	movs	r1, r7
   2654c:	f002 fc18 	bl	28d80 <__aeabi_dsub>
   26550:	9004      	str	r0, [sp, #16]
   26552:	9105      	str	r1, [sp, #20]
   26554:	465b      	mov	r3, fp
   26556:	4642      	mov	r2, r8
   26558:	3b01      	subs	r3, #1
   2655a:	4313      	orrs	r3, r2
   2655c:	d100      	bne.n	26560 <__ieee754_pow+0x4f8>
   2655e:	e1ab      	b.n	268b8 <__ieee754_pow+0x850>
   26560:	2300      	movs	r3, #0
   26562:	4c2c      	ldr	r4, [pc, #176]	; (26614 <__ieee754_pow+0x5ac>)
   26564:	9306      	str	r3, [sp, #24]
   26566:	9407      	str	r4, [sp, #28]
   26568:	9800      	ldr	r0, [sp, #0]
   2656a:	9901      	ldr	r1, [sp, #4]
   2656c:	2600      	movs	r6, #0
   2656e:	000b      	movs	r3, r1
   26570:	0032      	movs	r2, r6
   26572:	000f      	movs	r7, r1
   26574:	f002 fc04 	bl	28d80 <__aeabi_dsub>
   26578:	9a02      	ldr	r2, [sp, #8]
   2657a:	9b03      	ldr	r3, [sp, #12]
   2657c:	f002 f980 	bl	28880 <__aeabi_dmul>
   26580:	9a00      	ldr	r2, [sp, #0]
   26582:	9b01      	ldr	r3, [sp, #4]
   26584:	0004      	movs	r4, r0
   26586:	000d      	movs	r5, r1
   26588:	9804      	ldr	r0, [sp, #16]
   2658a:	9905      	ldr	r1, [sp, #20]
   2658c:	f002 f978 	bl	28880 <__aeabi_dmul>
   26590:	0002      	movs	r2, r0
   26592:	000b      	movs	r3, r1
   26594:	0020      	movs	r0, r4
   26596:	0029      	movs	r1, r5
   26598:	f001 fa2e 	bl	279f8 <__aeabi_dadd>
   2659c:	0004      	movs	r4, r0
   2659e:	000d      	movs	r5, r1
   265a0:	9802      	ldr	r0, [sp, #8]
   265a2:	9903      	ldr	r1, [sp, #12]
   265a4:	0032      	movs	r2, r6
   265a6:	003b      	movs	r3, r7
   265a8:	9400      	str	r4, [sp, #0]
   265aa:	9501      	str	r5, [sp, #4]
   265ac:	f002 f968 	bl	28880 <__aeabi_dmul>
   265b0:	0002      	movs	r2, r0
   265b2:	000b      	movs	r3, r1
   265b4:	0006      	movs	r6, r0
   265b6:	000f      	movs	r7, r1
   265b8:	0020      	movs	r0, r4
   265ba:	0029      	movs	r1, r5
   265bc:	f001 fa1c 	bl	279f8 <__aeabi_dadd>
   265c0:	4b29      	ldr	r3, [pc, #164]	; (26668 <__ieee754_pow+0x600>)
   265c2:	0004      	movs	r4, r0
   265c4:	000d      	movs	r5, r1
   265c6:	0002      	movs	r2, r0
   265c8:	468b      	mov	fp, r1
   265ca:	4299      	cmp	r1, r3
   265cc:	dc00      	bgt.n	265d0 <__ieee754_pow+0x568>
   265ce:	e14f      	b.n	26870 <__ieee754_pow+0x808>
   265d0:	4b26      	ldr	r3, [pc, #152]	; (2666c <__ieee754_pow+0x604>)
   265d2:	18cb      	adds	r3, r1, r3
   265d4:	4303      	orrs	r3, r0
   265d6:	d000      	beq.n	265da <__ieee754_pow+0x572>
   265d8:	e1e2      	b.n	269a0 <__ieee754_pow+0x938>
   265da:	9800      	ldr	r0, [sp, #0]
   265dc:	9901      	ldr	r1, [sp, #4]
   265de:	4a24      	ldr	r2, [pc, #144]	; (26670 <__ieee754_pow+0x608>)
   265e0:	4b24      	ldr	r3, [pc, #144]	; (26674 <__ieee754_pow+0x60c>)
   265e2:	f001 fa09 	bl	279f8 <__aeabi_dadd>
   265e6:	0032      	movs	r2, r6
   265e8:	9002      	str	r0, [sp, #8]
   265ea:	9103      	str	r1, [sp, #12]
   265ec:	003b      	movs	r3, r7
   265ee:	0020      	movs	r0, r4
   265f0:	0029      	movs	r1, r5
   265f2:	f002 fbc5 	bl	28d80 <__aeabi_dsub>
   265f6:	0002      	movs	r2, r0
   265f8:	000b      	movs	r3, r1
   265fa:	9802      	ldr	r0, [sp, #8]
   265fc:	9903      	ldr	r1, [sp, #12]
   265fe:	f000 fe11 	bl	27224 <__aeabi_dcmpgt>
   26602:	46aa      	mov	sl, r5
   26604:	e038      	b.n	26678 <__ieee754_pow+0x610>
   26606:	46c0      	nop			; (mov r8, r8)
   26608:	000fffff 	.word	0x000fffff
   2660c:	43400000 	.word	0x43400000
   26610:	fffffc01 	.word	0xfffffc01
   26614:	3ff00000 	.word	0x3ff00000
   26618:	0003988e 	.word	0x0003988e
   2661c:	000bb679 	.word	0x000bb679
   26620:	fff00000 	.word	0xfff00000
   26624:	4a454eef 	.word	0x4a454eef
   26628:	3fca7e28 	.word	0x3fca7e28
   2662c:	93c9db65 	.word	0x93c9db65
   26630:	3fcd864a 	.word	0x3fcd864a
   26634:	a91d4101 	.word	0xa91d4101
   26638:	3fd17460 	.word	0x3fd17460
   2663c:	518f264d 	.word	0x518f264d
   26640:	3fd55555 	.word	0x3fd55555
   26644:	db6fabff 	.word	0xdb6fabff
   26648:	3fdb6db6 	.word	0x3fdb6db6
   2664c:	33333303 	.word	0x33333303
   26650:	3fe33333 	.word	0x3fe33333
   26654:	40080000 	.word	0x40080000
   26658:	3feec709 	.word	0x3feec709
   2665c:	dc3a03fd 	.word	0xdc3a03fd
   26660:	145b01f5 	.word	0x145b01f5
   26664:	be3e2fe0 	.word	0xbe3e2fe0
   26668:	408fffff 	.word	0x408fffff
   2666c:	bf700000 	.word	0xbf700000
   26670:	652b82fe 	.word	0x652b82fe
   26674:	3c971547 	.word	0x3c971547
   26678:	2800      	cmp	r0, #0
   2667a:	d000      	beq.n	2667e <__ieee754_pow+0x616>
   2667c:	e190      	b.n	269a0 <__ieee754_pow+0x938>
   2667e:	4aec      	ldr	r2, [pc, #944]	; (26a30 <__ieee754_pow+0x9c8>)
   26680:	4653      	mov	r3, sl
   26682:	4694      	mov	ip, r2
   26684:	2280      	movs	r2, #128	; 0x80
   26686:	0352      	lsls	r2, r2, #13
   26688:	0011      	movs	r1, r2
   2668a:	151b      	asrs	r3, r3, #20
   2668c:	4463      	add	r3, ip
   2668e:	4119      	asrs	r1, r3
   26690:	000b      	movs	r3, r1
   26692:	4690      	mov	r8, r2
   26694:	4ae7      	ldr	r2, [pc, #924]	; (26a34 <__ieee754_pow+0x9cc>)
   26696:	445b      	add	r3, fp
   26698:	4694      	mov	ip, r2
   2669a:	005c      	lsls	r4, r3, #1
   2669c:	0d64      	lsrs	r4, r4, #21
   2669e:	4de6      	ldr	r5, [pc, #920]	; (26a38 <__ieee754_pow+0x9d0>)
   266a0:	4464      	add	r4, ip
   266a2:	4125      	asrs	r5, r4
   266a4:	001a      	movs	r2, r3
   266a6:	43aa      	bics	r2, r5
   266a8:	0011      	movs	r1, r2
   266aa:	4642      	mov	r2, r8
   266ac:	031b      	lsls	r3, r3, #12
   266ae:	0b1b      	lsrs	r3, r3, #12
   266b0:	4313      	orrs	r3, r2
   266b2:	2214      	movs	r2, #20
   266b4:	1b14      	subs	r4, r2, r4
   266b6:	4123      	asrs	r3, r4
   266b8:	4699      	mov	r9, r3
   266ba:	465b      	mov	r3, fp
   266bc:	2000      	movs	r0, #0
   266be:	2b00      	cmp	r3, #0
   266c0:	da00      	bge.n	266c4 <__ieee754_pow+0x65c>
   266c2:	e1b0      	b.n	26a26 <__ieee754_pow+0x9be>
   266c4:	0002      	movs	r2, r0
   266c6:	000b      	movs	r3, r1
   266c8:	0030      	movs	r0, r6
   266ca:	0039      	movs	r1, r7
   266cc:	f002 fb58 	bl	28d80 <__aeabi_dsub>
   266d0:	000b      	movs	r3, r1
   266d2:	0002      	movs	r2, r0
   266d4:	0006      	movs	r6, r0
   266d6:	000f      	movs	r7, r1
   266d8:	9800      	ldr	r0, [sp, #0]
   266da:	9901      	ldr	r1, [sp, #4]
   266dc:	f001 f98c 	bl	279f8 <__aeabi_dadd>
   266e0:	464b      	mov	r3, r9
   266e2:	051b      	lsls	r3, r3, #20
   266e4:	000d      	movs	r5, r1
   266e6:	4698      	mov	r8, r3
   266e8:	2400      	movs	r4, #0
   266ea:	2200      	movs	r2, #0
   266ec:	4bd3      	ldr	r3, [pc, #844]	; (26a3c <__ieee754_pow+0x9d4>)
   266ee:	0020      	movs	r0, r4
   266f0:	0029      	movs	r1, r5
   266f2:	f002 f8c5 	bl	28880 <__aeabi_dmul>
   266f6:	0032      	movs	r2, r6
   266f8:	9002      	str	r0, [sp, #8]
   266fa:	9103      	str	r1, [sp, #12]
   266fc:	003b      	movs	r3, r7
   266fe:	0020      	movs	r0, r4
   26700:	0029      	movs	r1, r5
   26702:	f002 fb3d 	bl	28d80 <__aeabi_dsub>
   26706:	0002      	movs	r2, r0
   26708:	000b      	movs	r3, r1
   2670a:	9800      	ldr	r0, [sp, #0]
   2670c:	9901      	ldr	r1, [sp, #4]
   2670e:	f002 fb37 	bl	28d80 <__aeabi_dsub>
   26712:	4acb      	ldr	r2, [pc, #812]	; (26a40 <__ieee754_pow+0x9d8>)
   26714:	4bcb      	ldr	r3, [pc, #812]	; (26a44 <__ieee754_pow+0x9dc>)
   26716:	f002 f8b3 	bl	28880 <__aeabi_dmul>
   2671a:	4acb      	ldr	r2, [pc, #812]	; (26a48 <__ieee754_pow+0x9e0>)
   2671c:	0006      	movs	r6, r0
   2671e:	000f      	movs	r7, r1
   26720:	4bca      	ldr	r3, [pc, #808]	; (26a4c <__ieee754_pow+0x9e4>)
   26722:	0020      	movs	r0, r4
   26724:	0029      	movs	r1, r5
   26726:	f002 f8ab 	bl	28880 <__aeabi_dmul>
   2672a:	0002      	movs	r2, r0
   2672c:	000b      	movs	r3, r1
   2672e:	0030      	movs	r0, r6
   26730:	0039      	movs	r1, r7
   26732:	f001 f961 	bl	279f8 <__aeabi_dadd>
   26736:	0004      	movs	r4, r0
   26738:	000d      	movs	r5, r1
   2673a:	0002      	movs	r2, r0
   2673c:	000b      	movs	r3, r1
   2673e:	9802      	ldr	r0, [sp, #8]
   26740:	9903      	ldr	r1, [sp, #12]
   26742:	f001 f959 	bl	279f8 <__aeabi_dadd>
   26746:	9a02      	ldr	r2, [sp, #8]
   26748:	9b03      	ldr	r3, [sp, #12]
   2674a:	0006      	movs	r6, r0
   2674c:	000f      	movs	r7, r1
   2674e:	f002 fb17 	bl	28d80 <__aeabi_dsub>
   26752:	0002      	movs	r2, r0
   26754:	000b      	movs	r3, r1
   26756:	0020      	movs	r0, r4
   26758:	0029      	movs	r1, r5
   2675a:	f002 fb11 	bl	28d80 <__aeabi_dsub>
   2675e:	0032      	movs	r2, r6
   26760:	9000      	str	r0, [sp, #0]
   26762:	9101      	str	r1, [sp, #4]
   26764:	003b      	movs	r3, r7
   26766:	0030      	movs	r0, r6
   26768:	0039      	movs	r1, r7
   2676a:	f002 f889 	bl	28880 <__aeabi_dmul>
   2676e:	0004      	movs	r4, r0
   26770:	000d      	movs	r5, r1
   26772:	4ab7      	ldr	r2, [pc, #732]	; (26a50 <__ieee754_pow+0x9e8>)
   26774:	4bb7      	ldr	r3, [pc, #732]	; (26a54 <__ieee754_pow+0x9ec>)
   26776:	f002 f883 	bl	28880 <__aeabi_dmul>
   2677a:	4ab7      	ldr	r2, [pc, #732]	; (26a58 <__ieee754_pow+0x9f0>)
   2677c:	4bb7      	ldr	r3, [pc, #732]	; (26a5c <__ieee754_pow+0x9f4>)
   2677e:	f002 faff 	bl	28d80 <__aeabi_dsub>
   26782:	0022      	movs	r2, r4
   26784:	002b      	movs	r3, r5
   26786:	f002 f87b 	bl	28880 <__aeabi_dmul>
   2678a:	4ab5      	ldr	r2, [pc, #724]	; (26a60 <__ieee754_pow+0x9f8>)
   2678c:	4bb5      	ldr	r3, [pc, #724]	; (26a64 <__ieee754_pow+0x9fc>)
   2678e:	f001 f933 	bl	279f8 <__aeabi_dadd>
   26792:	0022      	movs	r2, r4
   26794:	002b      	movs	r3, r5
   26796:	f002 f873 	bl	28880 <__aeabi_dmul>
   2679a:	4ab3      	ldr	r2, [pc, #716]	; (26a68 <__ieee754_pow+0xa00>)
   2679c:	4bb3      	ldr	r3, [pc, #716]	; (26a6c <__ieee754_pow+0xa04>)
   2679e:	f002 faef 	bl	28d80 <__aeabi_dsub>
   267a2:	0022      	movs	r2, r4
   267a4:	002b      	movs	r3, r5
   267a6:	f002 f86b 	bl	28880 <__aeabi_dmul>
   267aa:	4ab1      	ldr	r2, [pc, #708]	; (26a70 <__ieee754_pow+0xa08>)
   267ac:	4bb1      	ldr	r3, [pc, #708]	; (26a74 <__ieee754_pow+0xa0c>)
   267ae:	f001 f923 	bl	279f8 <__aeabi_dadd>
   267b2:	0022      	movs	r2, r4
   267b4:	002b      	movs	r3, r5
   267b6:	f002 f863 	bl	28880 <__aeabi_dmul>
   267ba:	0002      	movs	r2, r0
   267bc:	000b      	movs	r3, r1
   267be:	0030      	movs	r0, r6
   267c0:	0039      	movs	r1, r7
   267c2:	f002 fadd 	bl	28d80 <__aeabi_dsub>
   267c6:	0004      	movs	r4, r0
   267c8:	000d      	movs	r5, r1
   267ca:	0002      	movs	r2, r0
   267cc:	000b      	movs	r3, r1
   267ce:	0030      	movs	r0, r6
   267d0:	0039      	movs	r1, r7
   267d2:	f002 f855 	bl	28880 <__aeabi_dmul>
   267d6:	2380      	movs	r3, #128	; 0x80
   267d8:	9002      	str	r0, [sp, #8]
   267da:	9103      	str	r1, [sp, #12]
   267dc:	2200      	movs	r2, #0
   267de:	05db      	lsls	r3, r3, #23
   267e0:	0020      	movs	r0, r4
   267e2:	0029      	movs	r1, r5
   267e4:	f002 facc 	bl	28d80 <__aeabi_dsub>
   267e8:	0002      	movs	r2, r0
   267ea:	000b      	movs	r3, r1
   267ec:	9802      	ldr	r0, [sp, #8]
   267ee:	9903      	ldr	r1, [sp, #12]
   267f0:	f001 fc12 	bl	28018 <__aeabi_ddiv>
   267f4:	9a00      	ldr	r2, [sp, #0]
   267f6:	9b01      	ldr	r3, [sp, #4]
   267f8:	0004      	movs	r4, r0
   267fa:	000d      	movs	r5, r1
   267fc:	0030      	movs	r0, r6
   267fe:	0039      	movs	r1, r7
   26800:	f002 f83e 	bl	28880 <__aeabi_dmul>
   26804:	9a00      	ldr	r2, [sp, #0]
   26806:	9b01      	ldr	r3, [sp, #4]
   26808:	f001 f8f6 	bl	279f8 <__aeabi_dadd>
   2680c:	0002      	movs	r2, r0
   2680e:	000b      	movs	r3, r1
   26810:	0020      	movs	r0, r4
   26812:	0029      	movs	r1, r5
   26814:	f002 fab4 	bl	28d80 <__aeabi_dsub>
   26818:	0032      	movs	r2, r6
   2681a:	003b      	movs	r3, r7
   2681c:	f002 fab0 	bl	28d80 <__aeabi_dsub>
   26820:	0002      	movs	r2, r0
   26822:	000b      	movs	r3, r1
   26824:	2000      	movs	r0, #0
   26826:	4994      	ldr	r1, [pc, #592]	; (26a78 <__ieee754_pow+0xa10>)
   26828:	f002 faaa 	bl	28d80 <__aeabi_dsub>
   2682c:	4643      	mov	r3, r8
   2682e:	185b      	adds	r3, r3, r1
   26830:	151a      	asrs	r2, r3, #20
   26832:	2a00      	cmp	r2, #0
   26834:	dc00      	bgt.n	26838 <__ieee754_pow+0x7d0>
   26836:	e149      	b.n	26acc <__ieee754_pow+0xa64>
   26838:	0019      	movs	r1, r3
   2683a:	9a06      	ldr	r2, [sp, #24]
   2683c:	9b07      	ldr	r3, [sp, #28]
   2683e:	f002 f81f 	bl	28880 <__aeabi_dmul>
   26842:	e459      	b.n	260f8 <__ieee754_pow+0x90>
   26844:	003a      	movs	r2, r7
   26846:	0033      	movs	r3, r6
   26848:	0038      	movs	r0, r7
   2684a:	0031      	movs	r1, r6
   2684c:	f002 f818 	bl	28880 <__aeabi_dmul>
   26850:	e452      	b.n	260f8 <__ieee754_pow+0x90>
   26852:	4653      	mov	r3, sl
   26854:	2b00      	cmp	r3, #0
   26856:	db00      	blt.n	2685a <__ieee754_pow+0x7f2>
   26858:	e4d9      	b.n	2620e <__ieee754_pow+0x1a6>
   2685a:	9c00      	ldr	r4, [sp, #0]
   2685c:	9d01      	ldr	r5, [sp, #4]
   2685e:	2280      	movs	r2, #128	; 0x80
   26860:	0612      	lsls	r2, r2, #24
   26862:	002b      	movs	r3, r5
   26864:	4694      	mov	ip, r2
   26866:	4463      	add	r3, ip
   26868:	0020      	movs	r0, r4
   2686a:	0019      	movs	r1, r3
   2686c:	f7ff fc44 	bl	260f8 <__ieee754_pow+0x90>
   26870:	004b      	lsls	r3, r1, #1
   26872:	085b      	lsrs	r3, r3, #1
   26874:	469a      	mov	sl, r3
   26876:	4b81      	ldr	r3, [pc, #516]	; (26a7c <__ieee754_pow+0xa14>)
   26878:	459a      	cmp	sl, r3
   2687a:	dc00      	bgt.n	2687e <__ieee754_pow+0x816>
   2687c:	e0b1      	b.n	269e2 <__ieee754_pow+0x97a>
   2687e:	4b80      	ldr	r3, [pc, #512]	; (26a80 <__ieee754_pow+0xa18>)
   26880:	445b      	add	r3, fp
   26882:	431a      	orrs	r2, r3
   26884:	d10c      	bne.n	268a0 <__ieee754_pow+0x838>
   26886:	0032      	movs	r2, r6
   26888:	003b      	movs	r3, r7
   2688a:	f002 fa79 	bl	28d80 <__aeabi_dsub>
   2688e:	0002      	movs	r2, r0
   26890:	000b      	movs	r3, r1
   26892:	9800      	ldr	r0, [sp, #0]
   26894:	9901      	ldr	r1, [sp, #4]
   26896:	f000 fcbb 	bl	27210 <__aeabi_dcmple>
   2689a:	2800      	cmp	r0, #0
   2689c:	d100      	bne.n	268a0 <__ieee754_pow+0x838>
   2689e:	e6ee      	b.n	2667e <__ieee754_pow+0x616>
   268a0:	9806      	ldr	r0, [sp, #24]
   268a2:	9907      	ldr	r1, [sp, #28]
   268a4:	4a77      	ldr	r2, [pc, #476]	; (26a84 <__ieee754_pow+0xa1c>)
   268a6:	4b78      	ldr	r3, [pc, #480]	; (26a88 <__ieee754_pow+0xa20>)
   268a8:	f001 ffea 	bl	28880 <__aeabi_dmul>
   268ac:	4a75      	ldr	r2, [pc, #468]	; (26a84 <__ieee754_pow+0xa1c>)
   268ae:	4b76      	ldr	r3, [pc, #472]	; (26a88 <__ieee754_pow+0xa20>)
   268b0:	f001 ffe6 	bl	28880 <__aeabi_dmul>
   268b4:	f7ff fc20 	bl	260f8 <__ieee754_pow+0x90>
   268b8:	2300      	movs	r3, #0
   268ba:	4c74      	ldr	r4, [pc, #464]	; (26a8c <__ieee754_pow+0xa24>)
   268bc:	9306      	str	r3, [sp, #24]
   268be:	9407      	str	r4, [sp, #28]
   268c0:	e652      	b.n	26568 <__ieee754_pow+0x500>
   268c2:	0002      	movs	r2, r0
   268c4:	000b      	movs	r3, r1
   268c6:	2000      	movs	r0, #0
   268c8:	496b      	ldr	r1, [pc, #428]	; (26a78 <__ieee754_pow+0xa10>)
   268ca:	f001 fba5 	bl	28018 <__aeabi_ddiv>
   268ce:	f7ff fc32 	bl	26136 <__ieee754_pow+0xce>
   268d2:	4653      	mov	r3, sl
   268d4:	2b00      	cmp	r3, #0
   268d6:	db00      	blt.n	268da <__ieee754_pow+0x872>
   268d8:	e499      	b.n	2620e <__ieee754_pow+0x1a6>
   268da:	e454      	b.n	26186 <__ieee754_pow+0x11e>
   268dc:	4b6c      	ldr	r3, [pc, #432]	; (26a90 <__ieee754_pow+0xa28>)
   268de:	429c      	cmp	r4, r3
   268e0:	ddf7      	ble.n	268d2 <__ieee754_pow+0x86a>
   268e2:	4b65      	ldr	r3, [pc, #404]	; (26a78 <__ieee754_pow+0xa10>)
   268e4:	429c      	cmp	r4, r3
   268e6:	dd00      	ble.n	268ea <__ieee754_pow+0x882>
   268e8:	e44a      	b.n	26180 <__ieee754_pow+0x118>
   268ea:	2200      	movs	r2, #0
   268ec:	4b62      	ldr	r3, [pc, #392]	; (26a78 <__ieee754_pow+0xa10>)
   268ee:	f002 fa47 	bl	28d80 <__aeabi_dsub>
   268f2:	22c0      	movs	r2, #192	; 0xc0
   268f4:	4b67      	ldr	r3, [pc, #412]	; (26a94 <__ieee754_pow+0xa2c>)
   268f6:	05d2      	lsls	r2, r2, #23
   268f8:	0004      	movs	r4, r0
   268fa:	000d      	movs	r5, r1
   268fc:	f001 ffc0 	bl	28880 <__aeabi_dmul>
   26900:	4a65      	ldr	r2, [pc, #404]	; (26a98 <__ieee754_pow+0xa30>)
   26902:	0006      	movs	r6, r0
   26904:	000f      	movs	r7, r1
   26906:	4b65      	ldr	r3, [pc, #404]	; (26a9c <__ieee754_pow+0xa34>)
   26908:	0020      	movs	r0, r4
   2690a:	0029      	movs	r1, r5
   2690c:	f001 ffb8 	bl	28880 <__aeabi_dmul>
   26910:	2200      	movs	r2, #0
   26912:	9002      	str	r0, [sp, #8]
   26914:	9103      	str	r1, [sp, #12]
   26916:	4b62      	ldr	r3, [pc, #392]	; (26aa0 <__ieee754_pow+0xa38>)
   26918:	0020      	movs	r0, r4
   2691a:	0029      	movs	r1, r5
   2691c:	f001 ffb0 	bl	28880 <__aeabi_dmul>
   26920:	0002      	movs	r2, r0
   26922:	000b      	movs	r3, r1
   26924:	485f      	ldr	r0, [pc, #380]	; (26aa4 <__ieee754_pow+0xa3c>)
   26926:	4960      	ldr	r1, [pc, #384]	; (26aa8 <__ieee754_pow+0xa40>)
   26928:	f002 fa2a 	bl	28d80 <__aeabi_dsub>
   2692c:	0022      	movs	r2, r4
   2692e:	002b      	movs	r3, r5
   26930:	f001 ffa6 	bl	28880 <__aeabi_dmul>
   26934:	0002      	movs	r2, r0
   26936:	000b      	movs	r3, r1
   26938:	2000      	movs	r0, #0
   2693a:	495c      	ldr	r1, [pc, #368]	; (26aac <__ieee754_pow+0xa44>)
   2693c:	f002 fa20 	bl	28d80 <__aeabi_dsub>
   26940:	0022      	movs	r2, r4
   26942:	9004      	str	r0, [sp, #16]
   26944:	9105      	str	r1, [sp, #20]
   26946:	002b      	movs	r3, r5
   26948:	0020      	movs	r0, r4
   2694a:	0029      	movs	r1, r5
   2694c:	f001 ff98 	bl	28880 <__aeabi_dmul>
   26950:	0002      	movs	r2, r0
   26952:	000b      	movs	r3, r1
   26954:	9804      	ldr	r0, [sp, #16]
   26956:	9905      	ldr	r1, [sp, #20]
   26958:	f001 ff92 	bl	28880 <__aeabi_dmul>
   2695c:	4a54      	ldr	r2, [pc, #336]	; (26ab0 <__ieee754_pow+0xa48>)
   2695e:	4b4d      	ldr	r3, [pc, #308]	; (26a94 <__ieee754_pow+0xa2c>)
   26960:	f001 ff8e 	bl	28880 <__aeabi_dmul>
   26964:	0002      	movs	r2, r0
   26966:	000b      	movs	r3, r1
   26968:	9802      	ldr	r0, [sp, #8]
   2696a:	9903      	ldr	r1, [sp, #12]
   2696c:	f002 fa08 	bl	28d80 <__aeabi_dsub>
   26970:	0002      	movs	r2, r0
   26972:	000b      	movs	r3, r1
   26974:	0004      	movs	r4, r0
   26976:	000d      	movs	r5, r1
   26978:	0030      	movs	r0, r6
   2697a:	0039      	movs	r1, r7
   2697c:	f001 f83c 	bl	279f8 <__aeabi_dadd>
   26980:	2000      	movs	r0, #0
   26982:	0032      	movs	r2, r6
   26984:	003b      	movs	r3, r7
   26986:	9002      	str	r0, [sp, #8]
   26988:	9103      	str	r1, [sp, #12]
   2698a:	f002 f9f9 	bl	28d80 <__aeabi_dsub>
   2698e:	0002      	movs	r2, r0
   26990:	000b      	movs	r3, r1
   26992:	0020      	movs	r0, r4
   26994:	0029      	movs	r1, r5
   26996:	f002 f9f3 	bl	28d80 <__aeabi_dsub>
   2699a:	9004      	str	r0, [sp, #16]
   2699c:	9105      	str	r1, [sp, #20]
   2699e:	e5d9      	b.n	26554 <__ieee754_pow+0x4ec>
   269a0:	4a44      	ldr	r2, [pc, #272]	; (26ab4 <__ieee754_pow+0xa4c>)
   269a2:	4b45      	ldr	r3, [pc, #276]	; (26ab8 <__ieee754_pow+0xa50>)
   269a4:	9806      	ldr	r0, [sp, #24]
   269a6:	9907      	ldr	r1, [sp, #28]
   269a8:	f001 ff6a 	bl	28880 <__aeabi_dmul>
   269ac:	4a41      	ldr	r2, [pc, #260]	; (26ab4 <__ieee754_pow+0xa4c>)
   269ae:	4b42      	ldr	r3, [pc, #264]	; (26ab8 <__ieee754_pow+0xa50>)
   269b0:	f001 ff66 	bl	28880 <__aeabi_dmul>
   269b4:	f7ff fba0 	bl	260f8 <__ieee754_pow+0x90>
   269b8:	2a00      	cmp	r2, #0
   269ba:	d001      	beq.n	269c0 <__ieee754_pow+0x958>
   269bc:	f7ff fba9 	bl	26112 <__ieee754_pow+0xaa>
   269c0:	3214      	adds	r2, #20
   269c2:	1ad3      	subs	r3, r2, r3
   269c4:	002a      	movs	r2, r5
   269c6:	411a      	asrs	r2, r3
   269c8:	0011      	movs	r1, r2
   269ca:	4099      	lsls	r1, r3
   269cc:	428d      	cmp	r5, r1
   269ce:	d001      	beq.n	269d4 <__ieee754_pow+0x96c>
   269d0:	f7ff fb76 	bl	260c0 <__ieee754_pow+0x58>
   269d4:	2301      	movs	r3, #1
   269d6:	401a      	ands	r2, r3
   269d8:	18db      	adds	r3, r3, r3
   269da:	1a9b      	subs	r3, r3, r2
   269dc:	469b      	mov	fp, r3
   269de:	f7ff fb6f 	bl	260c0 <__ieee754_pow+0x58>
   269e2:	2200      	movs	r2, #0
   269e4:	4b31      	ldr	r3, [pc, #196]	; (26aac <__ieee754_pow+0xa44>)
   269e6:	4690      	mov	r8, r2
   269e8:	4691      	mov	r9, r2
   269ea:	459a      	cmp	sl, r3
   269ec:	dc00      	bgt.n	269f0 <__ieee754_pow+0x988>
   269ee:	e67b      	b.n	266e8 <__ieee754_pow+0x680>
   269f0:	e645      	b.n	2667e <__ieee754_pow+0x616>
   269f2:	0002      	movs	r2, r0
   269f4:	000b      	movs	r3, r1
   269f6:	f002 f9c3 	bl	28d80 <__aeabi_dsub>
   269fa:	0002      	movs	r2, r0
   269fc:	000b      	movs	r3, r1
   269fe:	f001 fb0b 	bl	28018 <__aeabi_ddiv>
   26a02:	f7ff fb79 	bl	260f8 <__ieee754_pow+0x90>
   26a06:	2380      	movs	r3, #128	; 0x80
   26a08:	4c2c      	ldr	r4, [pc, #176]	; (26abc <__ieee754_pow+0xa54>)
   26a0a:	05db      	lsls	r3, r3, #23
   26a0c:	9308      	str	r3, [sp, #32]
   26a0e:	9409      	str	r4, [sp, #36]	; 0x24
   26a10:	4b2b      	ldr	r3, [pc, #172]	; (26ac0 <__ieee754_pow+0xa58>)
   26a12:	4c2c      	ldr	r4, [pc, #176]	; (26ac4 <__ieee754_pow+0xa5c>)
   26a14:	2200      	movs	r2, #0
   26a16:	930c      	str	r3, [sp, #48]	; 0x30
   26a18:	940d      	str	r4, [sp, #52]	; 0x34
   26a1a:	2480      	movs	r4, #128	; 0x80
   26a1c:	4b2a      	ldr	r3, [pc, #168]	; (26ac8 <__ieee754_pow+0xa60>)
   26a1e:	02e4      	lsls	r4, r4, #11
   26a20:	9206      	str	r2, [sp, #24]
   26a22:	9307      	str	r3, [sp, #28]
   26a24:	e449      	b.n	262ba <__ieee754_pow+0x252>
   26a26:	464b      	mov	r3, r9
   26a28:	425b      	negs	r3, r3
   26a2a:	4699      	mov	r9, r3
   26a2c:	e64a      	b.n	266c4 <__ieee754_pow+0x65c>
   26a2e:	46c0      	nop			; (mov r8, r8)
   26a30:	fffffc02 	.word	0xfffffc02
   26a34:	fffffc01 	.word	0xfffffc01
   26a38:	000fffff 	.word	0x000fffff
   26a3c:	3fe62e43 	.word	0x3fe62e43
   26a40:	fefa39ef 	.word	0xfefa39ef
   26a44:	3fe62e42 	.word	0x3fe62e42
   26a48:	0ca86c39 	.word	0x0ca86c39
   26a4c:	be205c61 	.word	0xbe205c61
   26a50:	72bea4d0 	.word	0x72bea4d0
   26a54:	3e663769 	.word	0x3e663769
   26a58:	c5d26bf1 	.word	0xc5d26bf1
   26a5c:	3ebbbd41 	.word	0x3ebbbd41
   26a60:	af25de2c 	.word	0xaf25de2c
   26a64:	3f11566a 	.word	0x3f11566a
   26a68:	16bebd93 	.word	0x16bebd93
   26a6c:	3f66c16c 	.word	0x3f66c16c
   26a70:	5555553e 	.word	0x5555553e
   26a74:	3fc55555 	.word	0x3fc55555
   26a78:	3ff00000 	.word	0x3ff00000
   26a7c:	4090cbff 	.word	0x4090cbff
   26a80:	3f6f3400 	.word	0x3f6f3400
   26a84:	c2f8f359 	.word	0xc2f8f359
   26a88:	01a56e1f 	.word	0x01a56e1f
   26a8c:	bff00000 	.word	0xbff00000
   26a90:	3feffffe 	.word	0x3feffffe
   26a94:	3ff71547 	.word	0x3ff71547
   26a98:	f85ddf44 	.word	0xf85ddf44
   26a9c:	3e54ae0b 	.word	0x3e54ae0b
   26aa0:	3fd00000 	.word	0x3fd00000
   26aa4:	55555555 	.word	0x55555555
   26aa8:	3fd55555 	.word	0x3fd55555
   26aac:	3fe00000 	.word	0x3fe00000
   26ab0:	652b82fe 	.word	0x652b82fe
   26ab4:	8800759c 	.word	0x8800759c
   26ab8:	7e37e43c 	.word	0x7e37e43c
   26abc:	3fe2b803 	.word	0x3fe2b803
   26ac0:	43cfd006 	.word	0x43cfd006
   26ac4:	3e4cfdeb 	.word	0x3e4cfdeb
   26ac8:	3ff80000 	.word	0x3ff80000
   26acc:	464a      	mov	r2, r9
   26ace:	f000 f999 	bl	26e04 <scalbn>
   26ad2:	e6b2      	b.n	2683a <__ieee754_pow+0x7d2>

00026ad4 <__ieee754_sqrt>:
   26ad4:	4b6c      	ldr	r3, [pc, #432]	; (26c88 <__ieee754_sqrt+0x1b4>)
   26ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
   26ad8:	000a      	movs	r2, r1
   26ada:	4646      	mov	r6, r8
   26adc:	000d      	movs	r5, r1
   26ade:	46d6      	mov	lr, sl
   26ae0:	464f      	mov	r7, r9
   26ae2:	0019      	movs	r1, r3
   26ae4:	b5c0      	push	{r6, r7, lr}
   26ae6:	0004      	movs	r4, r0
   26ae8:	0006      	movs	r6, r0
   26aea:	4029      	ands	r1, r5
   26aec:	4299      	cmp	r1, r3
   26aee:	d100      	bne.n	26af2 <__ieee754_sqrt+0x1e>
   26af0:	e0a7      	b.n	26c42 <__ieee754_sqrt+0x16e>
   26af2:	2d00      	cmp	r5, #0
   26af4:	dc00      	bgt.n	26af8 <__ieee754_sqrt+0x24>
   26af6:	e081      	b.n	26bfc <__ieee754_sqrt+0x128>
   26af8:	152f      	asrs	r7, r5, #20
   26afa:	d100      	bne.n	26afe <__ieee754_sqrt+0x2a>
   26afc:	e08e      	b.n	26c1c <__ieee754_sqrt+0x148>
   26afe:	4b63      	ldr	r3, [pc, #396]	; (26c8c <__ieee754_sqrt+0x1b8>)
   26b00:	0312      	lsls	r2, r2, #12
   26b02:	469c      	mov	ip, r3
   26b04:	2380      	movs	r3, #128	; 0x80
   26b06:	0b12      	lsrs	r2, r2, #12
   26b08:	035b      	lsls	r3, r3, #13
   26b0a:	4467      	add	r7, ip
   26b0c:	431a      	orrs	r2, r3
   26b0e:	07fb      	lsls	r3, r7, #31
   26b10:	d468      	bmi.n	26be4 <__ieee754_sqrt+0x110>
   26b12:	107b      	asrs	r3, r7, #1
   26b14:	469c      	mov	ip, r3
   26b16:	0fe3      	lsrs	r3, r4, #31
   26b18:	189b      	adds	r3, r3, r2
   26b1a:	189b      	adds	r3, r3, r2
   26b1c:	2280      	movs	r2, #128	; 0x80
   26b1e:	2116      	movs	r1, #22
   26b20:	2600      	movs	r6, #0
   26b22:	2500      	movs	r5, #0
   26b24:	0064      	lsls	r4, r4, #1
   26b26:	0392      	lsls	r2, r2, #14
   26b28:	18a8      	adds	r0, r5, r2
   26b2a:	4298      	cmp	r0, r3
   26b2c:	dc02      	bgt.n	26b34 <__ieee754_sqrt+0x60>
   26b2e:	1885      	adds	r5, r0, r2
   26b30:	1a1b      	subs	r3, r3, r0
   26b32:	18b6      	adds	r6, r6, r2
   26b34:	0fe0      	lsrs	r0, r4, #31
   26b36:	005b      	lsls	r3, r3, #1
   26b38:	3901      	subs	r1, #1
   26b3a:	181b      	adds	r3, r3, r0
   26b3c:	0064      	lsls	r4, r4, #1
   26b3e:	0852      	lsrs	r2, r2, #1
   26b40:	2900      	cmp	r1, #0
   26b42:	d1f1      	bne.n	26b28 <__ieee754_sqrt+0x54>
   26b44:	2200      	movs	r2, #0
   26b46:	4692      	mov	sl, r2
   26b48:	4690      	mov	r8, r2
   26b4a:	2280      	movs	r2, #128	; 0x80
   26b4c:	2020      	movs	r0, #32
   26b4e:	0612      	lsls	r2, r2, #24
   26b50:	e009      	b.n	26b66 <__ieee754_sqrt+0x92>
   26b52:	42ab      	cmp	r3, r5
   26b54:	d038      	beq.n	26bc8 <__ieee754_sqrt+0xf4>
   26b56:	0fe1      	lsrs	r1, r4, #31
   26b58:	18c9      	adds	r1, r1, r3
   26b5a:	3801      	subs	r0, #1
   26b5c:	18cb      	adds	r3, r1, r3
   26b5e:	0064      	lsls	r4, r4, #1
   26b60:	0852      	lsrs	r2, r2, #1
   26b62:	2800      	cmp	r0, #0
   26b64:	d018      	beq.n	26b98 <__ieee754_sqrt+0xc4>
   26b66:	4641      	mov	r1, r8
   26b68:	1851      	adds	r1, r2, r1
   26b6a:	42ab      	cmp	r3, r5
   26b6c:	ddf1      	ble.n	26b52 <__ieee754_sqrt+0x7e>
   26b6e:	188f      	adds	r7, r1, r2
   26b70:	46b8      	mov	r8, r7
   26b72:	46a9      	mov	r9, r5
   26b74:	2900      	cmp	r1, #0
   26b76:	db30      	blt.n	26bda <__ieee754_sqrt+0x106>
   26b78:	1b5b      	subs	r3, r3, r5
   26b7a:	428c      	cmp	r4, r1
   26b7c:	41ad      	sbcs	r5, r5
   26b7e:	426d      	negs	r5, r5
   26b80:	1b5b      	subs	r3, r3, r5
   26b82:	1a64      	subs	r4, r4, r1
   26b84:	0fe1      	lsrs	r1, r4, #31
   26b86:	18c9      	adds	r1, r1, r3
   26b88:	3801      	subs	r0, #1
   26b8a:	4492      	add	sl, r2
   26b8c:	464d      	mov	r5, r9
   26b8e:	18cb      	adds	r3, r1, r3
   26b90:	0064      	lsls	r4, r4, #1
   26b92:	0852      	lsrs	r2, r2, #1
   26b94:	2800      	cmp	r0, #0
   26b96:	d1e6      	bne.n	26b66 <__ieee754_sqrt+0x92>
   26b98:	4323      	orrs	r3, r4
   26b9a:	d128      	bne.n	26bee <__ieee754_sqrt+0x11a>
   26b9c:	4653      	mov	r3, sl
   26b9e:	085b      	lsrs	r3, r3, #1
   26ba0:	493b      	ldr	r1, [pc, #236]	; (26c90 <__ieee754_sqrt+0x1bc>)
   26ba2:	1072      	asrs	r2, r6, #1
   26ba4:	4688      	mov	r8, r1
   26ba6:	4442      	add	r2, r8
   26ba8:	07f1      	lsls	r1, r6, #31
   26baa:	d502      	bpl.n	26bb2 <__ieee754_sqrt+0xde>
   26bac:	2180      	movs	r1, #128	; 0x80
   26bae:	0609      	lsls	r1, r1, #24
   26bb0:	430b      	orrs	r3, r1
   26bb2:	4661      	mov	r1, ip
   26bb4:	001e      	movs	r6, r3
   26bb6:	050f      	lsls	r7, r1, #20
   26bb8:	18bd      	adds	r5, r7, r2
   26bba:	0030      	movs	r0, r6
   26bbc:	0029      	movs	r1, r5
   26bbe:	bc1c      	pop	{r2, r3, r4}
   26bc0:	4690      	mov	r8, r2
   26bc2:	4699      	mov	r9, r3
   26bc4:	46a2      	mov	sl, r4
   26bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26bc8:	42a1      	cmp	r1, r4
   26bca:	d8c4      	bhi.n	26b56 <__ieee754_sqrt+0x82>
   26bcc:	188f      	adds	r7, r1, r2
   26bce:	46b8      	mov	r8, r7
   26bd0:	2900      	cmp	r1, #0
   26bd2:	db42      	blt.n	26c5a <__ieee754_sqrt+0x186>
   26bd4:	4699      	mov	r9, r3
   26bd6:	2300      	movs	r3, #0
   26bd8:	e7d3      	b.n	26b82 <__ieee754_sqrt+0xae>
   26bda:	2f00      	cmp	r7, #0
   26bdc:	db2f      	blt.n	26c3e <__ieee754_sqrt+0x16a>
   26bde:	1c6f      	adds	r7, r5, #1
   26be0:	46b9      	mov	r9, r7
   26be2:	e7c9      	b.n	26b78 <__ieee754_sqrt+0xa4>
   26be4:	0fe1      	lsrs	r1, r4, #31
   26be6:	0052      	lsls	r2, r2, #1
   26be8:	188a      	adds	r2, r1, r2
   26bea:	0064      	lsls	r4, r4, #1
   26bec:	e791      	b.n	26b12 <__ieee754_sqrt+0x3e>
   26bee:	4653      	mov	r3, sl
   26bf0:	3301      	adds	r3, #1
   26bf2:	d035      	beq.n	26c60 <__ieee754_sqrt+0x18c>
   26bf4:	4653      	mov	r3, sl
   26bf6:	3301      	adds	r3, #1
   26bf8:	085b      	lsrs	r3, r3, #1
   26bfa:	e7d1      	b.n	26ba0 <__ieee754_sqrt+0xcc>
   26bfc:	006b      	lsls	r3, r5, #1
   26bfe:	085b      	lsrs	r3, r3, #1
   26c00:	4303      	orrs	r3, r0
   26c02:	d0da      	beq.n	26bba <__ieee754_sqrt+0xe6>
   26c04:	2700      	movs	r7, #0
   26c06:	2d00      	cmp	r5, #0
   26c08:	d132      	bne.n	26c70 <__ieee754_sqrt+0x19c>
   26c0a:	0ae2      	lsrs	r2, r4, #11
   26c0c:	3f15      	subs	r7, #21
   26c0e:	0564      	lsls	r4, r4, #21
   26c10:	2a00      	cmp	r2, #0
   26c12:	d0fa      	beq.n	26c0a <__ieee754_sqrt+0x136>
   26c14:	2380      	movs	r3, #128	; 0x80
   26c16:	035b      	lsls	r3, r3, #13
   26c18:	421a      	tst	r2, r3
   26c1a:	d124      	bne.n	26c66 <__ieee754_sqrt+0x192>
   26c1c:	2080      	movs	r0, #128	; 0x80
   26c1e:	2300      	movs	r3, #0
   26c20:	0340      	lsls	r0, r0, #13
   26c22:	e000      	b.n	26c26 <__ieee754_sqrt+0x152>
   26c24:	000b      	movs	r3, r1
   26c26:	0052      	lsls	r2, r2, #1
   26c28:	1c59      	adds	r1, r3, #1
   26c2a:	4202      	tst	r2, r0
   26c2c:	d0fa      	beq.n	26c24 <__ieee754_sqrt+0x150>
   26c2e:	2020      	movs	r0, #32
   26c30:	1a40      	subs	r0, r0, r1
   26c32:	1aff      	subs	r7, r7, r3
   26c34:	0023      	movs	r3, r4
   26c36:	40c3      	lsrs	r3, r0
   26c38:	408c      	lsls	r4, r1
   26c3a:	431a      	orrs	r2, r3
   26c3c:	e75f      	b.n	26afe <__ieee754_sqrt+0x2a>
   26c3e:	46a9      	mov	r9, r5
   26c40:	e79a      	b.n	26b78 <__ieee754_sqrt+0xa4>
   26c42:	002b      	movs	r3, r5
   26c44:	0002      	movs	r2, r0
   26c46:	0029      	movs	r1, r5
   26c48:	f001 fe1a 	bl	28880 <__aeabi_dmul>
   26c4c:	0032      	movs	r2, r6
   26c4e:	002b      	movs	r3, r5
   26c50:	f000 fed2 	bl	279f8 <__aeabi_dadd>
   26c54:	0006      	movs	r6, r0
   26c56:	000d      	movs	r5, r1
   26c58:	e7af      	b.n	26bba <__ieee754_sqrt+0xe6>
   26c5a:	2f00      	cmp	r7, #0
   26c5c:	dabf      	bge.n	26bde <__ieee754_sqrt+0x10a>
   26c5e:	e7b9      	b.n	26bd4 <__ieee754_sqrt+0x100>
   26c60:	3601      	adds	r6, #1
   26c62:	2300      	movs	r3, #0
   26c64:	e79c      	b.n	26ba0 <__ieee754_sqrt+0xcc>
   26c66:	2301      	movs	r3, #1
   26c68:	2100      	movs	r1, #0
   26c6a:	2020      	movs	r0, #32
   26c6c:	425b      	negs	r3, r3
   26c6e:	e7e0      	b.n	26c32 <__ieee754_sqrt+0x15e>
   26c70:	002b      	movs	r3, r5
   26c72:	0002      	movs	r2, r0
   26c74:	0029      	movs	r1, r5
   26c76:	f002 f883 	bl	28d80 <__aeabi_dsub>
   26c7a:	0002      	movs	r2, r0
   26c7c:	000b      	movs	r3, r1
   26c7e:	f001 f9cb 	bl	28018 <__aeabi_ddiv>
   26c82:	0006      	movs	r6, r0
   26c84:	000d      	movs	r5, r1
   26c86:	e798      	b.n	26bba <__ieee754_sqrt+0xe6>
   26c88:	7ff00000 	.word	0x7ff00000
   26c8c:	fffffc01 	.word	0xfffffc01
   26c90:	3fe00000 	.word	0x3fe00000

00026c94 <fabs>:
   26c94:	0049      	lsls	r1, r1, #1
   26c96:	084b      	lsrs	r3, r1, #1
   26c98:	0019      	movs	r1, r3
   26c9a:	4770      	bx	lr

00026c9c <finite>:
   26c9c:	4b03      	ldr	r3, [pc, #12]	; (26cac <finite+0x10>)
   26c9e:	0048      	lsls	r0, r1, #1
   26ca0:	469c      	mov	ip, r3
   26ca2:	0840      	lsrs	r0, r0, #1
   26ca4:	4460      	add	r0, ip
   26ca6:	0fc0      	lsrs	r0, r0, #31
   26ca8:	4770      	bx	lr
   26caa:	46c0      	nop			; (mov r8, r8)
   26cac:	80100000 	.word	0x80100000

00026cb0 <matherr>:
   26cb0:	2000      	movs	r0, #0
   26cb2:	4770      	bx	lr

00026cb4 <nan>:
   26cb4:	2000      	movs	r0, #0
   26cb6:	4901      	ldr	r1, [pc, #4]	; (26cbc <nan+0x8>)
   26cb8:	4770      	bx	lr
   26cba:	46c0      	nop			; (mov r8, r8)
   26cbc:	7ff80000 	.word	0x7ff80000

00026cc0 <rint>:
   26cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   26cc2:	46c6      	mov	lr, r8
   26cc4:	b500      	push	{lr}
   26cc6:	0fcb      	lsrs	r3, r1, #31
   26cc8:	4698      	mov	r8, r3
   26cca:	4c4a      	ldr	r4, [pc, #296]	; (26df4 <rint+0x134>)
   26ccc:	004b      	lsls	r3, r1, #1
   26cce:	0d5b      	lsrs	r3, r3, #21
   26cd0:	191e      	adds	r6, r3, r4
   26cd2:	b082      	sub	sp, #8
   26cd4:	0007      	movs	r7, r0
   26cd6:	000a      	movs	r2, r1
   26cd8:	2e13      	cmp	r6, #19
   26cda:	dc35      	bgt.n	26d48 <rint+0x88>
   26cdc:	2e00      	cmp	r6, #0
   26cde:	db57      	blt.n	26d90 <rint+0xd0>
   26ce0:	4b45      	ldr	r3, [pc, #276]	; (26df8 <rint+0x138>)
   26ce2:	0004      	movs	r4, r0
   26ce4:	4133      	asrs	r3, r6
   26ce6:	001f      	movs	r7, r3
   26ce8:	400f      	ands	r7, r1
   26cea:	4307      	orrs	r7, r0
   26cec:	000d      	movs	r5, r1
   26cee:	2f00      	cmp	r7, #0
   26cf0:	d024      	beq.n	26d3c <rint+0x7c>
   26cf2:	085b      	lsrs	r3, r3, #1
   26cf4:	001c      	movs	r4, r3
   26cf6:	400c      	ands	r4, r1
   26cf8:	4320      	orrs	r0, r4
   26cfa:	2700      	movs	r7, #0
   26cfc:	2800      	cmp	r0, #0
   26cfe:	d007      	beq.n	26d10 <rint+0x50>
   26d00:	2e13      	cmp	r6, #19
   26d02:	d100      	bne.n	26d06 <rint+0x46>
   26d04:	e073      	b.n	26dee <rint+0x12e>
   26d06:	2280      	movs	r2, #128	; 0x80
   26d08:	02d2      	lsls	r2, r2, #11
   26d0a:	4132      	asrs	r2, r6
   26d0c:	4399      	bics	r1, r3
   26d0e:	430a      	orrs	r2, r1
   26d10:	4643      	mov	r3, r8
   26d12:	00de      	lsls	r6, r3, #3
   26d14:	4b39      	ldr	r3, [pc, #228]	; (26dfc <rint+0x13c>)
   26d16:	0011      	movs	r1, r2
   26d18:	199e      	adds	r6, r3, r6
   26d1a:	6834      	ldr	r4, [r6, #0]
   26d1c:	6875      	ldr	r5, [r6, #4]
   26d1e:	0038      	movs	r0, r7
   26d20:	0022      	movs	r2, r4
   26d22:	002b      	movs	r3, r5
   26d24:	f000 fe68 	bl	279f8 <__aeabi_dadd>
   26d28:	9000      	str	r0, [sp, #0]
   26d2a:	9101      	str	r1, [sp, #4]
   26d2c:	9800      	ldr	r0, [sp, #0]
   26d2e:	9901      	ldr	r1, [sp, #4]
   26d30:	0022      	movs	r2, r4
   26d32:	002b      	movs	r3, r5
   26d34:	f002 f824 	bl	28d80 <__aeabi_dsub>
   26d38:	0004      	movs	r4, r0
   26d3a:	000d      	movs	r5, r1
   26d3c:	0020      	movs	r0, r4
   26d3e:	0029      	movs	r1, r5
   26d40:	b002      	add	sp, #8
   26d42:	bc04      	pop	{r2}
   26d44:	4690      	mov	r8, r2
   26d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26d48:	2e33      	cmp	r6, #51	; 0x33
   26d4a:	dd0c      	ble.n	26d66 <rint+0xa6>
   26d4c:	2380      	movs	r3, #128	; 0x80
   26d4e:	0004      	movs	r4, r0
   26d50:	00db      	lsls	r3, r3, #3
   26d52:	000d      	movs	r5, r1
   26d54:	429e      	cmp	r6, r3
   26d56:	d1f1      	bne.n	26d3c <rint+0x7c>
   26d58:	0002      	movs	r2, r0
   26d5a:	000b      	movs	r3, r1
   26d5c:	f000 fe4c 	bl	279f8 <__aeabi_dadd>
   26d60:	0004      	movs	r4, r0
   26d62:	000d      	movs	r5, r1
   26d64:	e7ea      	b.n	26d3c <rint+0x7c>
   26d66:	4c26      	ldr	r4, [pc, #152]	; (26e00 <rint+0x140>)
   26d68:	000d      	movs	r5, r1
   26d6a:	46a4      	mov	ip, r4
   26d6c:	2401      	movs	r4, #1
   26d6e:	4463      	add	r3, ip
   26d70:	4264      	negs	r4, r4
   26d72:	40dc      	lsrs	r4, r3
   26d74:	46a4      	mov	ip, r4
   26d76:	4661      	mov	r1, ip
   26d78:	0004      	movs	r4, r0
   26d7a:	4201      	tst	r1, r0
   26d7c:	d0de      	beq.n	26d3c <rint+0x7c>
   26d7e:	0849      	lsrs	r1, r1, #1
   26d80:	4201      	tst	r1, r0
   26d82:	d0c5      	beq.n	26d10 <rint+0x50>
   26d84:	2780      	movs	r7, #128	; 0x80
   26d86:	05ff      	lsls	r7, r7, #23
   26d88:	411f      	asrs	r7, r3
   26d8a:	4388      	bics	r0, r1
   26d8c:	4307      	orrs	r7, r0
   26d8e:	e7bf      	b.n	26d10 <rint+0x50>
   26d90:	004b      	lsls	r3, r1, #1
   26d92:	085b      	lsrs	r3, r3, #1
   26d94:	4303      	orrs	r3, r0
   26d96:	0004      	movs	r4, r0
   26d98:	000d      	movs	r5, r1
   26d9a:	2b00      	cmp	r3, #0
   26d9c:	d0ce      	beq.n	26d3c <rint+0x7c>
   26d9e:	030b      	lsls	r3, r1, #12
   26da0:	0b1b      	lsrs	r3, r3, #12
   26da2:	4303      	orrs	r3, r0
   26da4:	001a      	movs	r2, r3
   26da6:	425b      	negs	r3, r3
   26da8:	4313      	orrs	r3, r2
   26daa:	2280      	movs	r2, #128	; 0x80
   26dac:	0b1b      	lsrs	r3, r3, #12
   26dae:	0312      	lsls	r2, r2, #12
   26db0:	4013      	ands	r3, r2
   26db2:	0c4a      	lsrs	r2, r1, #17
   26db4:	0452      	lsls	r2, r2, #17
   26db6:	4313      	orrs	r3, r2
   26db8:	0019      	movs	r1, r3
   26dba:	4643      	mov	r3, r8
   26dbc:	00da      	lsls	r2, r3, #3
   26dbe:	4b0f      	ldr	r3, [pc, #60]	; (26dfc <rint+0x13c>)
   26dc0:	189b      	adds	r3, r3, r2
   26dc2:	681c      	ldr	r4, [r3, #0]
   26dc4:	685d      	ldr	r5, [r3, #4]
   26dc6:	0022      	movs	r2, r4
   26dc8:	002b      	movs	r3, r5
   26dca:	f000 fe15 	bl	279f8 <__aeabi_dadd>
   26dce:	9000      	str	r0, [sp, #0]
   26dd0:	9101      	str	r1, [sp, #4]
   26dd2:	9800      	ldr	r0, [sp, #0]
   26dd4:	9901      	ldr	r1, [sp, #4]
   26dd6:	0022      	movs	r2, r4
   26dd8:	002b      	movs	r3, r5
   26dda:	f001 ffd1 	bl	28d80 <__aeabi_dsub>
   26dde:	4642      	mov	r2, r8
   26de0:	004b      	lsls	r3, r1, #1
   26de2:	085b      	lsrs	r3, r3, #1
   26de4:	07d6      	lsls	r6, r2, #31
   26de6:	4333      	orrs	r3, r6
   26de8:	0004      	movs	r4, r0
   26dea:	001d      	movs	r5, r3
   26dec:	e7a6      	b.n	26d3c <rint+0x7c>
   26dee:	2780      	movs	r7, #128	; 0x80
   26df0:	063f      	lsls	r7, r7, #24
   26df2:	e788      	b.n	26d06 <rint+0x46>
   26df4:	fffffc01 	.word	0xfffffc01
   26df8:	000fffff 	.word	0x000fffff
   26dfc:	0002b7c0 	.word	0x0002b7c0
   26e00:	fffffbed 	.word	0xfffffbed

00026e04 <scalbn>:
   26e04:	004b      	lsls	r3, r1, #1
   26e06:	b570      	push	{r4, r5, r6, lr}
   26e08:	0d5b      	lsrs	r3, r3, #21
   26e0a:	0014      	movs	r4, r2
   26e0c:	000a      	movs	r2, r1
   26e0e:	2b00      	cmp	r3, #0
   26e10:	d11a      	bne.n	26e48 <scalbn+0x44>
   26e12:	004b      	lsls	r3, r1, #1
   26e14:	085b      	lsrs	r3, r3, #1
   26e16:	4303      	orrs	r3, r0
   26e18:	d015      	beq.n	26e46 <scalbn+0x42>
   26e1a:	2200      	movs	r2, #0
   26e1c:	4b22      	ldr	r3, [pc, #136]	; (26ea8 <scalbn+0xa4>)
   26e1e:	f001 fd2f 	bl	28880 <__aeabi_dmul>
   26e22:	4b22      	ldr	r3, [pc, #136]	; (26eac <scalbn+0xa8>)
   26e24:	000a      	movs	r2, r1
   26e26:	429c      	cmp	r4, r3
   26e28:	db22      	blt.n	26e70 <scalbn+0x6c>
   26e2a:	004b      	lsls	r3, r1, #1
   26e2c:	0d5b      	lsrs	r3, r3, #21
   26e2e:	3b36      	subs	r3, #54	; 0x36
   26e30:	4d1f      	ldr	r5, [pc, #124]	; (26eb0 <scalbn+0xac>)
   26e32:	18e3      	adds	r3, r4, r3
   26e34:	42ab      	cmp	r3, r5
   26e36:	dc20      	bgt.n	26e7a <scalbn+0x76>
   26e38:	2b00      	cmp	r3, #0
   26e3a:	dd0d      	ble.n	26e58 <scalbn+0x54>
   26e3c:	4c1d      	ldr	r4, [pc, #116]	; (26eb4 <scalbn+0xb0>)
   26e3e:	051b      	lsls	r3, r3, #20
   26e40:	4022      	ands	r2, r4
   26e42:	431a      	orrs	r2, r3
   26e44:	0011      	movs	r1, r2
   26e46:	bd70      	pop	{r4, r5, r6, pc}
   26e48:	4d1b      	ldr	r5, [pc, #108]	; (26eb8 <scalbn+0xb4>)
   26e4a:	42ab      	cmp	r3, r5
   26e4c:	d1f0      	bne.n	26e30 <scalbn+0x2c>
   26e4e:	0002      	movs	r2, r0
   26e50:	000b      	movs	r3, r1
   26e52:	f000 fdd1 	bl	279f8 <__aeabi_dadd>
   26e56:	e7f6      	b.n	26e46 <scalbn+0x42>
   26e58:	001d      	movs	r5, r3
   26e5a:	3535      	adds	r5, #53	; 0x35
   26e5c:	da18      	bge.n	26e90 <scalbn+0x8c>
   26e5e:	4b17      	ldr	r3, [pc, #92]	; (26ebc <scalbn+0xb8>)
   26e60:	0002      	movs	r2, r0
   26e62:	429c      	cmp	r4, r3
   26e64:	dc0a      	bgt.n	26e7c <scalbn+0x78>
   26e66:	000b      	movs	r3, r1
   26e68:	4815      	ldr	r0, [pc, #84]	; (26ec0 <scalbn+0xbc>)
   26e6a:	4916      	ldr	r1, [pc, #88]	; (26ec4 <scalbn+0xc0>)
   26e6c:	f000 f832 	bl	26ed4 <copysign>
   26e70:	4a13      	ldr	r2, [pc, #76]	; (26ec0 <scalbn+0xbc>)
   26e72:	4b14      	ldr	r3, [pc, #80]	; (26ec4 <scalbn+0xc0>)
   26e74:	f001 fd04 	bl	28880 <__aeabi_dmul>
   26e78:	e7e5      	b.n	26e46 <scalbn+0x42>
   26e7a:	0002      	movs	r2, r0
   26e7c:	000b      	movs	r3, r1
   26e7e:	4812      	ldr	r0, [pc, #72]	; (26ec8 <scalbn+0xc4>)
   26e80:	4912      	ldr	r1, [pc, #72]	; (26ecc <scalbn+0xc8>)
   26e82:	f000 f827 	bl	26ed4 <copysign>
   26e86:	4a10      	ldr	r2, [pc, #64]	; (26ec8 <scalbn+0xc4>)
   26e88:	4b10      	ldr	r3, [pc, #64]	; (26ecc <scalbn+0xc8>)
   26e8a:	f001 fcf9 	bl	28880 <__aeabi_dmul>
   26e8e:	e7da      	b.n	26e46 <scalbn+0x42>
   26e90:	4c08      	ldr	r4, [pc, #32]	; (26eb4 <scalbn+0xb0>)
   26e92:	3336      	adds	r3, #54	; 0x36
   26e94:	4022      	ands	r2, r4
   26e96:	051b      	lsls	r3, r3, #20
   26e98:	4313      	orrs	r3, r2
   26e9a:	0019      	movs	r1, r3
   26e9c:	2200      	movs	r2, #0
   26e9e:	4b0c      	ldr	r3, [pc, #48]	; (26ed0 <scalbn+0xcc>)
   26ea0:	f001 fcee 	bl	28880 <__aeabi_dmul>
   26ea4:	e7cf      	b.n	26e46 <scalbn+0x42>
   26ea6:	46c0      	nop			; (mov r8, r8)
   26ea8:	43500000 	.word	0x43500000
   26eac:	ffff3cb0 	.word	0xffff3cb0
   26eb0:	000007fe 	.word	0x000007fe
   26eb4:	800fffff 	.word	0x800fffff
   26eb8:	000007ff 	.word	0x000007ff
   26ebc:	0000c350 	.word	0x0000c350
   26ec0:	c2f8f359 	.word	0xc2f8f359
   26ec4:	01a56e1f 	.word	0x01a56e1f
   26ec8:	8800759c 	.word	0x8800759c
   26ecc:	7e37e43c 	.word	0x7e37e43c
   26ed0:	3c900000 	.word	0x3c900000

00026ed4 <copysign>:
   26ed4:	b530      	push	{r4, r5, lr}
   26ed6:	004a      	lsls	r2, r1, #1
   26ed8:	0fdb      	lsrs	r3, r3, #31
   26eda:	07db      	lsls	r3, r3, #31
   26edc:	0852      	lsrs	r2, r2, #1
   26ede:	431a      	orrs	r2, r3
   26ee0:	0011      	movs	r1, r2
   26ee2:	bd30      	pop	{r4, r5, pc}

00026ee4 <__udivsi3>:
   26ee4:	2200      	movs	r2, #0
   26ee6:	0843      	lsrs	r3, r0, #1
   26ee8:	428b      	cmp	r3, r1
   26eea:	d374      	bcc.n	26fd6 <__udivsi3+0xf2>
   26eec:	0903      	lsrs	r3, r0, #4
   26eee:	428b      	cmp	r3, r1
   26ef0:	d35f      	bcc.n	26fb2 <__udivsi3+0xce>
   26ef2:	0a03      	lsrs	r3, r0, #8
   26ef4:	428b      	cmp	r3, r1
   26ef6:	d344      	bcc.n	26f82 <__udivsi3+0x9e>
   26ef8:	0b03      	lsrs	r3, r0, #12
   26efa:	428b      	cmp	r3, r1
   26efc:	d328      	bcc.n	26f50 <__udivsi3+0x6c>
   26efe:	0c03      	lsrs	r3, r0, #16
   26f00:	428b      	cmp	r3, r1
   26f02:	d30d      	bcc.n	26f20 <__udivsi3+0x3c>
   26f04:	22ff      	movs	r2, #255	; 0xff
   26f06:	0209      	lsls	r1, r1, #8
   26f08:	ba12      	rev	r2, r2
   26f0a:	0c03      	lsrs	r3, r0, #16
   26f0c:	428b      	cmp	r3, r1
   26f0e:	d302      	bcc.n	26f16 <__udivsi3+0x32>
   26f10:	1212      	asrs	r2, r2, #8
   26f12:	0209      	lsls	r1, r1, #8
   26f14:	d065      	beq.n	26fe2 <__udivsi3+0xfe>
   26f16:	0b03      	lsrs	r3, r0, #12
   26f18:	428b      	cmp	r3, r1
   26f1a:	d319      	bcc.n	26f50 <__udivsi3+0x6c>
   26f1c:	e000      	b.n	26f20 <__udivsi3+0x3c>
   26f1e:	0a09      	lsrs	r1, r1, #8
   26f20:	0bc3      	lsrs	r3, r0, #15
   26f22:	428b      	cmp	r3, r1
   26f24:	d301      	bcc.n	26f2a <__udivsi3+0x46>
   26f26:	03cb      	lsls	r3, r1, #15
   26f28:	1ac0      	subs	r0, r0, r3
   26f2a:	4152      	adcs	r2, r2
   26f2c:	0b83      	lsrs	r3, r0, #14
   26f2e:	428b      	cmp	r3, r1
   26f30:	d301      	bcc.n	26f36 <__udivsi3+0x52>
   26f32:	038b      	lsls	r3, r1, #14
   26f34:	1ac0      	subs	r0, r0, r3
   26f36:	4152      	adcs	r2, r2
   26f38:	0b43      	lsrs	r3, r0, #13
   26f3a:	428b      	cmp	r3, r1
   26f3c:	d301      	bcc.n	26f42 <__udivsi3+0x5e>
   26f3e:	034b      	lsls	r3, r1, #13
   26f40:	1ac0      	subs	r0, r0, r3
   26f42:	4152      	adcs	r2, r2
   26f44:	0b03      	lsrs	r3, r0, #12
   26f46:	428b      	cmp	r3, r1
   26f48:	d301      	bcc.n	26f4e <__udivsi3+0x6a>
   26f4a:	030b      	lsls	r3, r1, #12
   26f4c:	1ac0      	subs	r0, r0, r3
   26f4e:	4152      	adcs	r2, r2
   26f50:	0ac3      	lsrs	r3, r0, #11
   26f52:	428b      	cmp	r3, r1
   26f54:	d301      	bcc.n	26f5a <__udivsi3+0x76>
   26f56:	02cb      	lsls	r3, r1, #11
   26f58:	1ac0      	subs	r0, r0, r3
   26f5a:	4152      	adcs	r2, r2
   26f5c:	0a83      	lsrs	r3, r0, #10
   26f5e:	428b      	cmp	r3, r1
   26f60:	d301      	bcc.n	26f66 <__udivsi3+0x82>
   26f62:	028b      	lsls	r3, r1, #10
   26f64:	1ac0      	subs	r0, r0, r3
   26f66:	4152      	adcs	r2, r2
   26f68:	0a43      	lsrs	r3, r0, #9
   26f6a:	428b      	cmp	r3, r1
   26f6c:	d301      	bcc.n	26f72 <__udivsi3+0x8e>
   26f6e:	024b      	lsls	r3, r1, #9
   26f70:	1ac0      	subs	r0, r0, r3
   26f72:	4152      	adcs	r2, r2
   26f74:	0a03      	lsrs	r3, r0, #8
   26f76:	428b      	cmp	r3, r1
   26f78:	d301      	bcc.n	26f7e <__udivsi3+0x9a>
   26f7a:	020b      	lsls	r3, r1, #8
   26f7c:	1ac0      	subs	r0, r0, r3
   26f7e:	4152      	adcs	r2, r2
   26f80:	d2cd      	bcs.n	26f1e <__udivsi3+0x3a>
   26f82:	09c3      	lsrs	r3, r0, #7
   26f84:	428b      	cmp	r3, r1
   26f86:	d301      	bcc.n	26f8c <__udivsi3+0xa8>
   26f88:	01cb      	lsls	r3, r1, #7
   26f8a:	1ac0      	subs	r0, r0, r3
   26f8c:	4152      	adcs	r2, r2
   26f8e:	0983      	lsrs	r3, r0, #6
   26f90:	428b      	cmp	r3, r1
   26f92:	d301      	bcc.n	26f98 <__udivsi3+0xb4>
   26f94:	018b      	lsls	r3, r1, #6
   26f96:	1ac0      	subs	r0, r0, r3
   26f98:	4152      	adcs	r2, r2
   26f9a:	0943      	lsrs	r3, r0, #5
   26f9c:	428b      	cmp	r3, r1
   26f9e:	d301      	bcc.n	26fa4 <__udivsi3+0xc0>
   26fa0:	014b      	lsls	r3, r1, #5
   26fa2:	1ac0      	subs	r0, r0, r3
   26fa4:	4152      	adcs	r2, r2
   26fa6:	0903      	lsrs	r3, r0, #4
   26fa8:	428b      	cmp	r3, r1
   26faa:	d301      	bcc.n	26fb0 <__udivsi3+0xcc>
   26fac:	010b      	lsls	r3, r1, #4
   26fae:	1ac0      	subs	r0, r0, r3
   26fb0:	4152      	adcs	r2, r2
   26fb2:	08c3      	lsrs	r3, r0, #3
   26fb4:	428b      	cmp	r3, r1
   26fb6:	d301      	bcc.n	26fbc <__udivsi3+0xd8>
   26fb8:	00cb      	lsls	r3, r1, #3
   26fba:	1ac0      	subs	r0, r0, r3
   26fbc:	4152      	adcs	r2, r2
   26fbe:	0883      	lsrs	r3, r0, #2
   26fc0:	428b      	cmp	r3, r1
   26fc2:	d301      	bcc.n	26fc8 <__udivsi3+0xe4>
   26fc4:	008b      	lsls	r3, r1, #2
   26fc6:	1ac0      	subs	r0, r0, r3
   26fc8:	4152      	adcs	r2, r2
   26fca:	0843      	lsrs	r3, r0, #1
   26fcc:	428b      	cmp	r3, r1
   26fce:	d301      	bcc.n	26fd4 <__udivsi3+0xf0>
   26fd0:	004b      	lsls	r3, r1, #1
   26fd2:	1ac0      	subs	r0, r0, r3
   26fd4:	4152      	adcs	r2, r2
   26fd6:	1a41      	subs	r1, r0, r1
   26fd8:	d200      	bcs.n	26fdc <__udivsi3+0xf8>
   26fda:	4601      	mov	r1, r0
   26fdc:	4152      	adcs	r2, r2
   26fde:	4610      	mov	r0, r2
   26fe0:	4770      	bx	lr
   26fe2:	e7ff      	b.n	26fe4 <__udivsi3+0x100>
   26fe4:	b501      	push	{r0, lr}
   26fe6:	2000      	movs	r0, #0
   26fe8:	f000 f8f0 	bl	271cc <__aeabi_idiv0>
   26fec:	bd02      	pop	{r1, pc}
   26fee:	46c0      	nop			; (mov r8, r8)

00026ff0 <__aeabi_uidivmod>:
   26ff0:	2900      	cmp	r1, #0
   26ff2:	d0f7      	beq.n	26fe4 <__udivsi3+0x100>
   26ff4:	e776      	b.n	26ee4 <__udivsi3>
   26ff6:	4770      	bx	lr

00026ff8 <__divsi3>:
   26ff8:	4603      	mov	r3, r0
   26ffa:	430b      	orrs	r3, r1
   26ffc:	d47f      	bmi.n	270fe <__divsi3+0x106>
   26ffe:	2200      	movs	r2, #0
   27000:	0843      	lsrs	r3, r0, #1
   27002:	428b      	cmp	r3, r1
   27004:	d374      	bcc.n	270f0 <__divsi3+0xf8>
   27006:	0903      	lsrs	r3, r0, #4
   27008:	428b      	cmp	r3, r1
   2700a:	d35f      	bcc.n	270cc <__divsi3+0xd4>
   2700c:	0a03      	lsrs	r3, r0, #8
   2700e:	428b      	cmp	r3, r1
   27010:	d344      	bcc.n	2709c <__divsi3+0xa4>
   27012:	0b03      	lsrs	r3, r0, #12
   27014:	428b      	cmp	r3, r1
   27016:	d328      	bcc.n	2706a <__divsi3+0x72>
   27018:	0c03      	lsrs	r3, r0, #16
   2701a:	428b      	cmp	r3, r1
   2701c:	d30d      	bcc.n	2703a <__divsi3+0x42>
   2701e:	22ff      	movs	r2, #255	; 0xff
   27020:	0209      	lsls	r1, r1, #8
   27022:	ba12      	rev	r2, r2
   27024:	0c03      	lsrs	r3, r0, #16
   27026:	428b      	cmp	r3, r1
   27028:	d302      	bcc.n	27030 <__divsi3+0x38>
   2702a:	1212      	asrs	r2, r2, #8
   2702c:	0209      	lsls	r1, r1, #8
   2702e:	d065      	beq.n	270fc <__divsi3+0x104>
   27030:	0b03      	lsrs	r3, r0, #12
   27032:	428b      	cmp	r3, r1
   27034:	d319      	bcc.n	2706a <__divsi3+0x72>
   27036:	e000      	b.n	2703a <__divsi3+0x42>
   27038:	0a09      	lsrs	r1, r1, #8
   2703a:	0bc3      	lsrs	r3, r0, #15
   2703c:	428b      	cmp	r3, r1
   2703e:	d301      	bcc.n	27044 <__divsi3+0x4c>
   27040:	03cb      	lsls	r3, r1, #15
   27042:	1ac0      	subs	r0, r0, r3
   27044:	4152      	adcs	r2, r2
   27046:	0b83      	lsrs	r3, r0, #14
   27048:	428b      	cmp	r3, r1
   2704a:	d301      	bcc.n	27050 <__divsi3+0x58>
   2704c:	038b      	lsls	r3, r1, #14
   2704e:	1ac0      	subs	r0, r0, r3
   27050:	4152      	adcs	r2, r2
   27052:	0b43      	lsrs	r3, r0, #13
   27054:	428b      	cmp	r3, r1
   27056:	d301      	bcc.n	2705c <__divsi3+0x64>
   27058:	034b      	lsls	r3, r1, #13
   2705a:	1ac0      	subs	r0, r0, r3
   2705c:	4152      	adcs	r2, r2
   2705e:	0b03      	lsrs	r3, r0, #12
   27060:	428b      	cmp	r3, r1
   27062:	d301      	bcc.n	27068 <__divsi3+0x70>
   27064:	030b      	lsls	r3, r1, #12
   27066:	1ac0      	subs	r0, r0, r3
   27068:	4152      	adcs	r2, r2
   2706a:	0ac3      	lsrs	r3, r0, #11
   2706c:	428b      	cmp	r3, r1
   2706e:	d301      	bcc.n	27074 <__divsi3+0x7c>
   27070:	02cb      	lsls	r3, r1, #11
   27072:	1ac0      	subs	r0, r0, r3
   27074:	4152      	adcs	r2, r2
   27076:	0a83      	lsrs	r3, r0, #10
   27078:	428b      	cmp	r3, r1
   2707a:	d301      	bcc.n	27080 <__divsi3+0x88>
   2707c:	028b      	lsls	r3, r1, #10
   2707e:	1ac0      	subs	r0, r0, r3
   27080:	4152      	adcs	r2, r2
   27082:	0a43      	lsrs	r3, r0, #9
   27084:	428b      	cmp	r3, r1
   27086:	d301      	bcc.n	2708c <__divsi3+0x94>
   27088:	024b      	lsls	r3, r1, #9
   2708a:	1ac0      	subs	r0, r0, r3
   2708c:	4152      	adcs	r2, r2
   2708e:	0a03      	lsrs	r3, r0, #8
   27090:	428b      	cmp	r3, r1
   27092:	d301      	bcc.n	27098 <__divsi3+0xa0>
   27094:	020b      	lsls	r3, r1, #8
   27096:	1ac0      	subs	r0, r0, r3
   27098:	4152      	adcs	r2, r2
   2709a:	d2cd      	bcs.n	27038 <__divsi3+0x40>
   2709c:	09c3      	lsrs	r3, r0, #7
   2709e:	428b      	cmp	r3, r1
   270a0:	d301      	bcc.n	270a6 <__divsi3+0xae>
   270a2:	01cb      	lsls	r3, r1, #7
   270a4:	1ac0      	subs	r0, r0, r3
   270a6:	4152      	adcs	r2, r2
   270a8:	0983      	lsrs	r3, r0, #6
   270aa:	428b      	cmp	r3, r1
   270ac:	d301      	bcc.n	270b2 <__divsi3+0xba>
   270ae:	018b      	lsls	r3, r1, #6
   270b0:	1ac0      	subs	r0, r0, r3
   270b2:	4152      	adcs	r2, r2
   270b4:	0943      	lsrs	r3, r0, #5
   270b6:	428b      	cmp	r3, r1
   270b8:	d301      	bcc.n	270be <__divsi3+0xc6>
   270ba:	014b      	lsls	r3, r1, #5
   270bc:	1ac0      	subs	r0, r0, r3
   270be:	4152      	adcs	r2, r2
   270c0:	0903      	lsrs	r3, r0, #4
   270c2:	428b      	cmp	r3, r1
   270c4:	d301      	bcc.n	270ca <__divsi3+0xd2>
   270c6:	010b      	lsls	r3, r1, #4
   270c8:	1ac0      	subs	r0, r0, r3
   270ca:	4152      	adcs	r2, r2
   270cc:	08c3      	lsrs	r3, r0, #3
   270ce:	428b      	cmp	r3, r1
   270d0:	d301      	bcc.n	270d6 <__divsi3+0xde>
   270d2:	00cb      	lsls	r3, r1, #3
   270d4:	1ac0      	subs	r0, r0, r3
   270d6:	4152      	adcs	r2, r2
   270d8:	0883      	lsrs	r3, r0, #2
   270da:	428b      	cmp	r3, r1
   270dc:	d301      	bcc.n	270e2 <__divsi3+0xea>
   270de:	008b      	lsls	r3, r1, #2
   270e0:	1ac0      	subs	r0, r0, r3
   270e2:	4152      	adcs	r2, r2
   270e4:	0843      	lsrs	r3, r0, #1
   270e6:	428b      	cmp	r3, r1
   270e8:	d301      	bcc.n	270ee <__divsi3+0xf6>
   270ea:	004b      	lsls	r3, r1, #1
   270ec:	1ac0      	subs	r0, r0, r3
   270ee:	4152      	adcs	r2, r2
   270f0:	1a41      	subs	r1, r0, r1
   270f2:	d200      	bcs.n	270f6 <__divsi3+0xfe>
   270f4:	4601      	mov	r1, r0
   270f6:	4152      	adcs	r2, r2
   270f8:	4610      	mov	r0, r2
   270fa:	4770      	bx	lr
   270fc:	e05d      	b.n	271ba <__divsi3+0x1c2>
   270fe:	0fca      	lsrs	r2, r1, #31
   27100:	d000      	beq.n	27104 <__divsi3+0x10c>
   27102:	4249      	negs	r1, r1
   27104:	1003      	asrs	r3, r0, #32
   27106:	d300      	bcc.n	2710a <__divsi3+0x112>
   27108:	4240      	negs	r0, r0
   2710a:	4053      	eors	r3, r2
   2710c:	2200      	movs	r2, #0
   2710e:	469c      	mov	ip, r3
   27110:	0903      	lsrs	r3, r0, #4
   27112:	428b      	cmp	r3, r1
   27114:	d32d      	bcc.n	27172 <__divsi3+0x17a>
   27116:	0a03      	lsrs	r3, r0, #8
   27118:	428b      	cmp	r3, r1
   2711a:	d312      	bcc.n	27142 <__divsi3+0x14a>
   2711c:	22fc      	movs	r2, #252	; 0xfc
   2711e:	0189      	lsls	r1, r1, #6
   27120:	ba12      	rev	r2, r2
   27122:	0a03      	lsrs	r3, r0, #8
   27124:	428b      	cmp	r3, r1
   27126:	d30c      	bcc.n	27142 <__divsi3+0x14a>
   27128:	0189      	lsls	r1, r1, #6
   2712a:	1192      	asrs	r2, r2, #6
   2712c:	428b      	cmp	r3, r1
   2712e:	d308      	bcc.n	27142 <__divsi3+0x14a>
   27130:	0189      	lsls	r1, r1, #6
   27132:	1192      	asrs	r2, r2, #6
   27134:	428b      	cmp	r3, r1
   27136:	d304      	bcc.n	27142 <__divsi3+0x14a>
   27138:	0189      	lsls	r1, r1, #6
   2713a:	d03a      	beq.n	271b2 <__divsi3+0x1ba>
   2713c:	1192      	asrs	r2, r2, #6
   2713e:	e000      	b.n	27142 <__divsi3+0x14a>
   27140:	0989      	lsrs	r1, r1, #6
   27142:	09c3      	lsrs	r3, r0, #7
   27144:	428b      	cmp	r3, r1
   27146:	d301      	bcc.n	2714c <__divsi3+0x154>
   27148:	01cb      	lsls	r3, r1, #7
   2714a:	1ac0      	subs	r0, r0, r3
   2714c:	4152      	adcs	r2, r2
   2714e:	0983      	lsrs	r3, r0, #6
   27150:	428b      	cmp	r3, r1
   27152:	d301      	bcc.n	27158 <__divsi3+0x160>
   27154:	018b      	lsls	r3, r1, #6
   27156:	1ac0      	subs	r0, r0, r3
   27158:	4152      	adcs	r2, r2
   2715a:	0943      	lsrs	r3, r0, #5
   2715c:	428b      	cmp	r3, r1
   2715e:	d301      	bcc.n	27164 <__divsi3+0x16c>
   27160:	014b      	lsls	r3, r1, #5
   27162:	1ac0      	subs	r0, r0, r3
   27164:	4152      	adcs	r2, r2
   27166:	0903      	lsrs	r3, r0, #4
   27168:	428b      	cmp	r3, r1
   2716a:	d301      	bcc.n	27170 <__divsi3+0x178>
   2716c:	010b      	lsls	r3, r1, #4
   2716e:	1ac0      	subs	r0, r0, r3
   27170:	4152      	adcs	r2, r2
   27172:	08c3      	lsrs	r3, r0, #3
   27174:	428b      	cmp	r3, r1
   27176:	d301      	bcc.n	2717c <__divsi3+0x184>
   27178:	00cb      	lsls	r3, r1, #3
   2717a:	1ac0      	subs	r0, r0, r3
   2717c:	4152      	adcs	r2, r2
   2717e:	0883      	lsrs	r3, r0, #2
   27180:	428b      	cmp	r3, r1
   27182:	d301      	bcc.n	27188 <__divsi3+0x190>
   27184:	008b      	lsls	r3, r1, #2
   27186:	1ac0      	subs	r0, r0, r3
   27188:	4152      	adcs	r2, r2
   2718a:	d2d9      	bcs.n	27140 <__divsi3+0x148>
   2718c:	0843      	lsrs	r3, r0, #1
   2718e:	428b      	cmp	r3, r1
   27190:	d301      	bcc.n	27196 <__divsi3+0x19e>
   27192:	004b      	lsls	r3, r1, #1
   27194:	1ac0      	subs	r0, r0, r3
   27196:	4152      	adcs	r2, r2
   27198:	1a41      	subs	r1, r0, r1
   2719a:	d200      	bcs.n	2719e <__divsi3+0x1a6>
   2719c:	4601      	mov	r1, r0
   2719e:	4663      	mov	r3, ip
   271a0:	4152      	adcs	r2, r2
   271a2:	105b      	asrs	r3, r3, #1
   271a4:	4610      	mov	r0, r2
   271a6:	d301      	bcc.n	271ac <__divsi3+0x1b4>
   271a8:	4240      	negs	r0, r0
   271aa:	2b00      	cmp	r3, #0
   271ac:	d500      	bpl.n	271b0 <__divsi3+0x1b8>
   271ae:	4249      	negs	r1, r1
   271b0:	4770      	bx	lr
   271b2:	4663      	mov	r3, ip
   271b4:	105b      	asrs	r3, r3, #1
   271b6:	d300      	bcc.n	271ba <__divsi3+0x1c2>
   271b8:	4240      	negs	r0, r0
   271ba:	b501      	push	{r0, lr}
   271bc:	2000      	movs	r0, #0
   271be:	f000 f805 	bl	271cc <__aeabi_idiv0>
   271c2:	bd02      	pop	{r1, pc}

000271c4 <__aeabi_idivmod>:
   271c4:	2900      	cmp	r1, #0
   271c6:	d0f8      	beq.n	271ba <__divsi3+0x1c2>
   271c8:	e716      	b.n	26ff8 <__divsi3>
   271ca:	4770      	bx	lr

000271cc <__aeabi_idiv0>:
   271cc:	4770      	bx	lr
   271ce:	46c0      	nop			; (mov r8, r8)

000271d0 <__aeabi_cdrcmple>:
   271d0:	4684      	mov	ip, r0
   271d2:	1c10      	adds	r0, r2, #0
   271d4:	4662      	mov	r2, ip
   271d6:	468c      	mov	ip, r1
   271d8:	1c19      	adds	r1, r3, #0
   271da:	4663      	mov	r3, ip
   271dc:	e000      	b.n	271e0 <__aeabi_cdcmpeq>
   271de:	46c0      	nop			; (mov r8, r8)

000271e0 <__aeabi_cdcmpeq>:
   271e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   271e2:	f001 faeb 	bl	287bc <__ledf2>
   271e6:	2800      	cmp	r0, #0
   271e8:	d401      	bmi.n	271ee <__aeabi_cdcmpeq+0xe>
   271ea:	2100      	movs	r1, #0
   271ec:	42c8      	cmn	r0, r1
   271ee:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000271f0 <__aeabi_dcmpeq>:
   271f0:	b510      	push	{r4, lr}
   271f2:	f001 fa45 	bl	28680 <__eqdf2>
   271f6:	4240      	negs	r0, r0
   271f8:	3001      	adds	r0, #1
   271fa:	bd10      	pop	{r4, pc}

000271fc <__aeabi_dcmplt>:
   271fc:	b510      	push	{r4, lr}
   271fe:	f001 fadd 	bl	287bc <__ledf2>
   27202:	2800      	cmp	r0, #0
   27204:	db01      	blt.n	2720a <__aeabi_dcmplt+0xe>
   27206:	2000      	movs	r0, #0
   27208:	bd10      	pop	{r4, pc}
   2720a:	2001      	movs	r0, #1
   2720c:	bd10      	pop	{r4, pc}
   2720e:	46c0      	nop			; (mov r8, r8)

00027210 <__aeabi_dcmple>:
   27210:	b510      	push	{r4, lr}
   27212:	f001 fad3 	bl	287bc <__ledf2>
   27216:	2800      	cmp	r0, #0
   27218:	dd01      	ble.n	2721e <__aeabi_dcmple+0xe>
   2721a:	2000      	movs	r0, #0
   2721c:	bd10      	pop	{r4, pc}
   2721e:	2001      	movs	r0, #1
   27220:	bd10      	pop	{r4, pc}
   27222:	46c0      	nop			; (mov r8, r8)

00027224 <__aeabi_dcmpgt>:
   27224:	b510      	push	{r4, lr}
   27226:	f001 fa65 	bl	286f4 <__gedf2>
   2722a:	2800      	cmp	r0, #0
   2722c:	dc01      	bgt.n	27232 <__aeabi_dcmpgt+0xe>
   2722e:	2000      	movs	r0, #0
   27230:	bd10      	pop	{r4, pc}
   27232:	2001      	movs	r0, #1
   27234:	bd10      	pop	{r4, pc}
   27236:	46c0      	nop			; (mov r8, r8)

00027238 <__aeabi_dcmpge>:
   27238:	b510      	push	{r4, lr}
   2723a:	f001 fa5b 	bl	286f4 <__gedf2>
   2723e:	2800      	cmp	r0, #0
   27240:	da01      	bge.n	27246 <__aeabi_dcmpge+0xe>
   27242:	2000      	movs	r0, #0
   27244:	bd10      	pop	{r4, pc}
   27246:	2001      	movs	r0, #1
   27248:	bd10      	pop	{r4, pc}
   2724a:	46c0      	nop			; (mov r8, r8)

0002724c <__aeabi_uldivmod>:
   2724c:	2b00      	cmp	r3, #0
   2724e:	d111      	bne.n	27274 <__aeabi_uldivmod+0x28>
   27250:	2a00      	cmp	r2, #0
   27252:	d10f      	bne.n	27274 <__aeabi_uldivmod+0x28>
   27254:	2900      	cmp	r1, #0
   27256:	d100      	bne.n	2725a <__aeabi_uldivmod+0xe>
   27258:	2800      	cmp	r0, #0
   2725a:	d002      	beq.n	27262 <__aeabi_uldivmod+0x16>
   2725c:	2100      	movs	r1, #0
   2725e:	43c9      	mvns	r1, r1
   27260:	1c08      	adds	r0, r1, #0
   27262:	b407      	push	{r0, r1, r2}
   27264:	4802      	ldr	r0, [pc, #8]	; (27270 <__aeabi_uldivmod+0x24>)
   27266:	a102      	add	r1, pc, #8	; (adr r1, 27270 <__aeabi_uldivmod+0x24>)
   27268:	1840      	adds	r0, r0, r1
   2726a:	9002      	str	r0, [sp, #8]
   2726c:	bd03      	pop	{r0, r1, pc}
   2726e:	46c0      	nop			; (mov r8, r8)
   27270:	ffffff5d 	.word	0xffffff5d
   27274:	b403      	push	{r0, r1}
   27276:	4668      	mov	r0, sp
   27278:	b501      	push	{r0, lr}
   2727a:	9802      	ldr	r0, [sp, #8]
   2727c:	f000 f84e 	bl	2731c <__udivmoddi4>
   27280:	9b01      	ldr	r3, [sp, #4]
   27282:	469e      	mov	lr, r3
   27284:	b002      	add	sp, #8
   27286:	bc0c      	pop	{r2, r3}
   27288:	4770      	bx	lr
   2728a:	46c0      	nop			; (mov r8, r8)

0002728c <__aeabi_lmul>:
   2728c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2728e:	46ce      	mov	lr, r9
   27290:	4647      	mov	r7, r8
   27292:	0415      	lsls	r5, r2, #16
   27294:	0c2d      	lsrs	r5, r5, #16
   27296:	002e      	movs	r6, r5
   27298:	b580      	push	{r7, lr}
   2729a:	0407      	lsls	r7, r0, #16
   2729c:	0c14      	lsrs	r4, r2, #16
   2729e:	0c3f      	lsrs	r7, r7, #16
   272a0:	4699      	mov	r9, r3
   272a2:	0c03      	lsrs	r3, r0, #16
   272a4:	437e      	muls	r6, r7
   272a6:	435d      	muls	r5, r3
   272a8:	4367      	muls	r7, r4
   272aa:	4363      	muls	r3, r4
   272ac:	197f      	adds	r7, r7, r5
   272ae:	0c34      	lsrs	r4, r6, #16
   272b0:	19e4      	adds	r4, r4, r7
   272b2:	469c      	mov	ip, r3
   272b4:	42a5      	cmp	r5, r4
   272b6:	d903      	bls.n	272c0 <__aeabi_lmul+0x34>
   272b8:	2380      	movs	r3, #128	; 0x80
   272ba:	025b      	lsls	r3, r3, #9
   272bc:	4698      	mov	r8, r3
   272be:	44c4      	add	ip, r8
   272c0:	464b      	mov	r3, r9
   272c2:	4351      	muls	r1, r2
   272c4:	4343      	muls	r3, r0
   272c6:	0436      	lsls	r6, r6, #16
   272c8:	0c36      	lsrs	r6, r6, #16
   272ca:	0c25      	lsrs	r5, r4, #16
   272cc:	0424      	lsls	r4, r4, #16
   272ce:	4465      	add	r5, ip
   272d0:	19a4      	adds	r4, r4, r6
   272d2:	1859      	adds	r1, r3, r1
   272d4:	1949      	adds	r1, r1, r5
   272d6:	0020      	movs	r0, r4
   272d8:	bc0c      	pop	{r2, r3}
   272da:	4690      	mov	r8, r2
   272dc:	4699      	mov	r9, r3
   272de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000272e0 <__aeabi_d2uiz>:
   272e0:	b570      	push	{r4, r5, r6, lr}
   272e2:	2200      	movs	r2, #0
   272e4:	4b0c      	ldr	r3, [pc, #48]	; (27318 <__aeabi_d2uiz+0x38>)
   272e6:	0004      	movs	r4, r0
   272e8:	000d      	movs	r5, r1
   272ea:	f7ff ffa5 	bl	27238 <__aeabi_dcmpge>
   272ee:	2800      	cmp	r0, #0
   272f0:	d104      	bne.n	272fc <__aeabi_d2uiz+0x1c>
   272f2:	0020      	movs	r0, r4
   272f4:	0029      	movs	r1, r5
   272f6:	f002 f879 	bl	293ec <__aeabi_d2iz>
   272fa:	bd70      	pop	{r4, r5, r6, pc}
   272fc:	4b06      	ldr	r3, [pc, #24]	; (27318 <__aeabi_d2uiz+0x38>)
   272fe:	2200      	movs	r2, #0
   27300:	0020      	movs	r0, r4
   27302:	0029      	movs	r1, r5
   27304:	f001 fd3c 	bl	28d80 <__aeabi_dsub>
   27308:	f002 f870 	bl	293ec <__aeabi_d2iz>
   2730c:	2380      	movs	r3, #128	; 0x80
   2730e:	061b      	lsls	r3, r3, #24
   27310:	469c      	mov	ip, r3
   27312:	4460      	add	r0, ip
   27314:	e7f1      	b.n	272fa <__aeabi_d2uiz+0x1a>
   27316:	46c0      	nop			; (mov r8, r8)
   27318:	41e00000 	.word	0x41e00000

0002731c <__udivmoddi4>:
   2731c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2731e:	4657      	mov	r7, sl
   27320:	464e      	mov	r6, r9
   27322:	4645      	mov	r5, r8
   27324:	46de      	mov	lr, fp
   27326:	b5e0      	push	{r5, r6, r7, lr}
   27328:	0004      	movs	r4, r0
   2732a:	b083      	sub	sp, #12
   2732c:	000d      	movs	r5, r1
   2732e:	4692      	mov	sl, r2
   27330:	4699      	mov	r9, r3
   27332:	428b      	cmp	r3, r1
   27334:	d82f      	bhi.n	27396 <__udivmoddi4+0x7a>
   27336:	d02c      	beq.n	27392 <__udivmoddi4+0x76>
   27338:	4649      	mov	r1, r9
   2733a:	4650      	mov	r0, sl
   2733c:	f002 f974 	bl	29628 <__clzdi2>
   27340:	0029      	movs	r1, r5
   27342:	0006      	movs	r6, r0
   27344:	0020      	movs	r0, r4
   27346:	f002 f96f 	bl	29628 <__clzdi2>
   2734a:	1a33      	subs	r3, r6, r0
   2734c:	4698      	mov	r8, r3
   2734e:	3b20      	subs	r3, #32
   27350:	469b      	mov	fp, r3
   27352:	d500      	bpl.n	27356 <__udivmoddi4+0x3a>
   27354:	e074      	b.n	27440 <__udivmoddi4+0x124>
   27356:	4653      	mov	r3, sl
   27358:	465a      	mov	r2, fp
   2735a:	4093      	lsls	r3, r2
   2735c:	001f      	movs	r7, r3
   2735e:	4653      	mov	r3, sl
   27360:	4642      	mov	r2, r8
   27362:	4093      	lsls	r3, r2
   27364:	001e      	movs	r6, r3
   27366:	42af      	cmp	r7, r5
   27368:	d829      	bhi.n	273be <__udivmoddi4+0xa2>
   2736a:	d026      	beq.n	273ba <__udivmoddi4+0x9e>
   2736c:	465b      	mov	r3, fp
   2736e:	1ba4      	subs	r4, r4, r6
   27370:	41bd      	sbcs	r5, r7
   27372:	2b00      	cmp	r3, #0
   27374:	da00      	bge.n	27378 <__udivmoddi4+0x5c>
   27376:	e079      	b.n	2746c <__udivmoddi4+0x150>
   27378:	2200      	movs	r2, #0
   2737a:	2300      	movs	r3, #0
   2737c:	9200      	str	r2, [sp, #0]
   2737e:	9301      	str	r3, [sp, #4]
   27380:	2301      	movs	r3, #1
   27382:	465a      	mov	r2, fp
   27384:	4093      	lsls	r3, r2
   27386:	9301      	str	r3, [sp, #4]
   27388:	2301      	movs	r3, #1
   2738a:	4642      	mov	r2, r8
   2738c:	4093      	lsls	r3, r2
   2738e:	9300      	str	r3, [sp, #0]
   27390:	e019      	b.n	273c6 <__udivmoddi4+0xaa>
   27392:	4282      	cmp	r2, r0
   27394:	d9d0      	bls.n	27338 <__udivmoddi4+0x1c>
   27396:	2200      	movs	r2, #0
   27398:	2300      	movs	r3, #0
   2739a:	9200      	str	r2, [sp, #0]
   2739c:	9301      	str	r3, [sp, #4]
   2739e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   273a0:	2b00      	cmp	r3, #0
   273a2:	d001      	beq.n	273a8 <__udivmoddi4+0x8c>
   273a4:	601c      	str	r4, [r3, #0]
   273a6:	605d      	str	r5, [r3, #4]
   273a8:	9800      	ldr	r0, [sp, #0]
   273aa:	9901      	ldr	r1, [sp, #4]
   273ac:	b003      	add	sp, #12
   273ae:	bc3c      	pop	{r2, r3, r4, r5}
   273b0:	4690      	mov	r8, r2
   273b2:	4699      	mov	r9, r3
   273b4:	46a2      	mov	sl, r4
   273b6:	46ab      	mov	fp, r5
   273b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   273ba:	42a3      	cmp	r3, r4
   273bc:	d9d6      	bls.n	2736c <__udivmoddi4+0x50>
   273be:	2200      	movs	r2, #0
   273c0:	2300      	movs	r3, #0
   273c2:	9200      	str	r2, [sp, #0]
   273c4:	9301      	str	r3, [sp, #4]
   273c6:	4643      	mov	r3, r8
   273c8:	2b00      	cmp	r3, #0
   273ca:	d0e8      	beq.n	2739e <__udivmoddi4+0x82>
   273cc:	07fb      	lsls	r3, r7, #31
   273ce:	0872      	lsrs	r2, r6, #1
   273d0:	431a      	orrs	r2, r3
   273d2:	4646      	mov	r6, r8
   273d4:	087b      	lsrs	r3, r7, #1
   273d6:	e00e      	b.n	273f6 <__udivmoddi4+0xda>
   273d8:	42ab      	cmp	r3, r5
   273da:	d101      	bne.n	273e0 <__udivmoddi4+0xc4>
   273dc:	42a2      	cmp	r2, r4
   273de:	d80c      	bhi.n	273fa <__udivmoddi4+0xde>
   273e0:	1aa4      	subs	r4, r4, r2
   273e2:	419d      	sbcs	r5, r3
   273e4:	2001      	movs	r0, #1
   273e6:	1924      	adds	r4, r4, r4
   273e8:	416d      	adcs	r5, r5
   273ea:	2100      	movs	r1, #0
   273ec:	3e01      	subs	r6, #1
   273ee:	1824      	adds	r4, r4, r0
   273f0:	414d      	adcs	r5, r1
   273f2:	2e00      	cmp	r6, #0
   273f4:	d006      	beq.n	27404 <__udivmoddi4+0xe8>
   273f6:	42ab      	cmp	r3, r5
   273f8:	d9ee      	bls.n	273d8 <__udivmoddi4+0xbc>
   273fa:	3e01      	subs	r6, #1
   273fc:	1924      	adds	r4, r4, r4
   273fe:	416d      	adcs	r5, r5
   27400:	2e00      	cmp	r6, #0
   27402:	d1f8      	bne.n	273f6 <__udivmoddi4+0xda>
   27404:	465b      	mov	r3, fp
   27406:	9800      	ldr	r0, [sp, #0]
   27408:	9901      	ldr	r1, [sp, #4]
   2740a:	1900      	adds	r0, r0, r4
   2740c:	4169      	adcs	r1, r5
   2740e:	2b00      	cmp	r3, #0
   27410:	db22      	blt.n	27458 <__udivmoddi4+0x13c>
   27412:	002b      	movs	r3, r5
   27414:	465a      	mov	r2, fp
   27416:	40d3      	lsrs	r3, r2
   27418:	002a      	movs	r2, r5
   2741a:	4644      	mov	r4, r8
   2741c:	40e2      	lsrs	r2, r4
   2741e:	001c      	movs	r4, r3
   27420:	465b      	mov	r3, fp
   27422:	0015      	movs	r5, r2
   27424:	2b00      	cmp	r3, #0
   27426:	db2c      	blt.n	27482 <__udivmoddi4+0x166>
   27428:	0026      	movs	r6, r4
   2742a:	409e      	lsls	r6, r3
   2742c:	0033      	movs	r3, r6
   2742e:	0026      	movs	r6, r4
   27430:	4647      	mov	r7, r8
   27432:	40be      	lsls	r6, r7
   27434:	0032      	movs	r2, r6
   27436:	1a80      	subs	r0, r0, r2
   27438:	4199      	sbcs	r1, r3
   2743a:	9000      	str	r0, [sp, #0]
   2743c:	9101      	str	r1, [sp, #4]
   2743e:	e7ae      	b.n	2739e <__udivmoddi4+0x82>
   27440:	4642      	mov	r2, r8
   27442:	2320      	movs	r3, #32
   27444:	1a9b      	subs	r3, r3, r2
   27446:	4652      	mov	r2, sl
   27448:	40da      	lsrs	r2, r3
   2744a:	4641      	mov	r1, r8
   2744c:	0013      	movs	r3, r2
   2744e:	464a      	mov	r2, r9
   27450:	408a      	lsls	r2, r1
   27452:	0017      	movs	r7, r2
   27454:	431f      	orrs	r7, r3
   27456:	e782      	b.n	2735e <__udivmoddi4+0x42>
   27458:	4642      	mov	r2, r8
   2745a:	2320      	movs	r3, #32
   2745c:	1a9b      	subs	r3, r3, r2
   2745e:	002a      	movs	r2, r5
   27460:	4646      	mov	r6, r8
   27462:	409a      	lsls	r2, r3
   27464:	0023      	movs	r3, r4
   27466:	40f3      	lsrs	r3, r6
   27468:	4313      	orrs	r3, r2
   2746a:	e7d5      	b.n	27418 <__udivmoddi4+0xfc>
   2746c:	4642      	mov	r2, r8
   2746e:	2320      	movs	r3, #32
   27470:	2100      	movs	r1, #0
   27472:	1a9b      	subs	r3, r3, r2
   27474:	2200      	movs	r2, #0
   27476:	9100      	str	r1, [sp, #0]
   27478:	9201      	str	r2, [sp, #4]
   2747a:	2201      	movs	r2, #1
   2747c:	40da      	lsrs	r2, r3
   2747e:	9201      	str	r2, [sp, #4]
   27480:	e782      	b.n	27388 <__udivmoddi4+0x6c>
   27482:	4642      	mov	r2, r8
   27484:	2320      	movs	r3, #32
   27486:	0026      	movs	r6, r4
   27488:	1a9b      	subs	r3, r3, r2
   2748a:	40de      	lsrs	r6, r3
   2748c:	002f      	movs	r7, r5
   2748e:	46b4      	mov	ip, r6
   27490:	4097      	lsls	r7, r2
   27492:	4666      	mov	r6, ip
   27494:	003b      	movs	r3, r7
   27496:	4333      	orrs	r3, r6
   27498:	e7c9      	b.n	2742e <__udivmoddi4+0x112>
   2749a:	46c0      	nop			; (mov r8, r8)

0002749c <__aeabi_fdiv>:
   2749c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2749e:	4657      	mov	r7, sl
   274a0:	464e      	mov	r6, r9
   274a2:	46de      	mov	lr, fp
   274a4:	4645      	mov	r5, r8
   274a6:	b5e0      	push	{r5, r6, r7, lr}
   274a8:	0244      	lsls	r4, r0, #9
   274aa:	0043      	lsls	r3, r0, #1
   274ac:	0fc6      	lsrs	r6, r0, #31
   274ae:	b083      	sub	sp, #12
   274b0:	1c0f      	adds	r7, r1, #0
   274b2:	0a64      	lsrs	r4, r4, #9
   274b4:	0e1b      	lsrs	r3, r3, #24
   274b6:	46b2      	mov	sl, r6
   274b8:	d053      	beq.n	27562 <__aeabi_fdiv+0xc6>
   274ba:	2bff      	cmp	r3, #255	; 0xff
   274bc:	d027      	beq.n	2750e <__aeabi_fdiv+0x72>
   274be:	2280      	movs	r2, #128	; 0x80
   274c0:	00e4      	lsls	r4, r4, #3
   274c2:	04d2      	lsls	r2, r2, #19
   274c4:	4314      	orrs	r4, r2
   274c6:	227f      	movs	r2, #127	; 0x7f
   274c8:	4252      	negs	r2, r2
   274ca:	4690      	mov	r8, r2
   274cc:	4498      	add	r8, r3
   274ce:	2300      	movs	r3, #0
   274d0:	4699      	mov	r9, r3
   274d2:	469b      	mov	fp, r3
   274d4:	027d      	lsls	r5, r7, #9
   274d6:	0078      	lsls	r0, r7, #1
   274d8:	0ffb      	lsrs	r3, r7, #31
   274da:	0a6d      	lsrs	r5, r5, #9
   274dc:	0e00      	lsrs	r0, r0, #24
   274de:	9300      	str	r3, [sp, #0]
   274e0:	d024      	beq.n	2752c <__aeabi_fdiv+0x90>
   274e2:	28ff      	cmp	r0, #255	; 0xff
   274e4:	d046      	beq.n	27574 <__aeabi_fdiv+0xd8>
   274e6:	2380      	movs	r3, #128	; 0x80
   274e8:	2100      	movs	r1, #0
   274ea:	00ed      	lsls	r5, r5, #3
   274ec:	04db      	lsls	r3, r3, #19
   274ee:	431d      	orrs	r5, r3
   274f0:	387f      	subs	r0, #127	; 0x7f
   274f2:	4647      	mov	r7, r8
   274f4:	1a38      	subs	r0, r7, r0
   274f6:	464f      	mov	r7, r9
   274f8:	430f      	orrs	r7, r1
   274fa:	00bf      	lsls	r7, r7, #2
   274fc:	46b9      	mov	r9, r7
   274fe:	0033      	movs	r3, r6
   27500:	9a00      	ldr	r2, [sp, #0]
   27502:	4f87      	ldr	r7, [pc, #540]	; (27720 <__aeabi_fdiv+0x284>)
   27504:	4053      	eors	r3, r2
   27506:	464a      	mov	r2, r9
   27508:	58ba      	ldr	r2, [r7, r2]
   2750a:	9301      	str	r3, [sp, #4]
   2750c:	4697      	mov	pc, r2
   2750e:	2c00      	cmp	r4, #0
   27510:	d14e      	bne.n	275b0 <__aeabi_fdiv+0x114>
   27512:	2308      	movs	r3, #8
   27514:	4699      	mov	r9, r3
   27516:	33f7      	adds	r3, #247	; 0xf7
   27518:	4698      	mov	r8, r3
   2751a:	3bfd      	subs	r3, #253	; 0xfd
   2751c:	469b      	mov	fp, r3
   2751e:	027d      	lsls	r5, r7, #9
   27520:	0078      	lsls	r0, r7, #1
   27522:	0ffb      	lsrs	r3, r7, #31
   27524:	0a6d      	lsrs	r5, r5, #9
   27526:	0e00      	lsrs	r0, r0, #24
   27528:	9300      	str	r3, [sp, #0]
   2752a:	d1da      	bne.n	274e2 <__aeabi_fdiv+0x46>
   2752c:	2d00      	cmp	r5, #0
   2752e:	d126      	bne.n	2757e <__aeabi_fdiv+0xe2>
   27530:	2000      	movs	r0, #0
   27532:	2101      	movs	r1, #1
   27534:	0033      	movs	r3, r6
   27536:	9a00      	ldr	r2, [sp, #0]
   27538:	4f7a      	ldr	r7, [pc, #488]	; (27724 <__aeabi_fdiv+0x288>)
   2753a:	4053      	eors	r3, r2
   2753c:	4642      	mov	r2, r8
   2753e:	1a10      	subs	r0, r2, r0
   27540:	464a      	mov	r2, r9
   27542:	430a      	orrs	r2, r1
   27544:	0092      	lsls	r2, r2, #2
   27546:	58ba      	ldr	r2, [r7, r2]
   27548:	001d      	movs	r5, r3
   2754a:	4697      	mov	pc, r2
   2754c:	9b00      	ldr	r3, [sp, #0]
   2754e:	002c      	movs	r4, r5
   27550:	469a      	mov	sl, r3
   27552:	468b      	mov	fp, r1
   27554:	465b      	mov	r3, fp
   27556:	2b02      	cmp	r3, #2
   27558:	d131      	bne.n	275be <__aeabi_fdiv+0x122>
   2755a:	4653      	mov	r3, sl
   2755c:	21ff      	movs	r1, #255	; 0xff
   2755e:	2400      	movs	r4, #0
   27560:	e038      	b.n	275d4 <__aeabi_fdiv+0x138>
   27562:	2c00      	cmp	r4, #0
   27564:	d117      	bne.n	27596 <__aeabi_fdiv+0xfa>
   27566:	2304      	movs	r3, #4
   27568:	4699      	mov	r9, r3
   2756a:	2300      	movs	r3, #0
   2756c:	4698      	mov	r8, r3
   2756e:	3301      	adds	r3, #1
   27570:	469b      	mov	fp, r3
   27572:	e7af      	b.n	274d4 <__aeabi_fdiv+0x38>
   27574:	20ff      	movs	r0, #255	; 0xff
   27576:	2d00      	cmp	r5, #0
   27578:	d10b      	bne.n	27592 <__aeabi_fdiv+0xf6>
   2757a:	2102      	movs	r1, #2
   2757c:	e7da      	b.n	27534 <__aeabi_fdiv+0x98>
   2757e:	0028      	movs	r0, r5
   27580:	f002 f834 	bl	295ec <__clzsi2>
   27584:	1f43      	subs	r3, r0, #5
   27586:	409d      	lsls	r5, r3
   27588:	2376      	movs	r3, #118	; 0x76
   2758a:	425b      	negs	r3, r3
   2758c:	1a18      	subs	r0, r3, r0
   2758e:	2100      	movs	r1, #0
   27590:	e7af      	b.n	274f2 <__aeabi_fdiv+0x56>
   27592:	2103      	movs	r1, #3
   27594:	e7ad      	b.n	274f2 <__aeabi_fdiv+0x56>
   27596:	0020      	movs	r0, r4
   27598:	f002 f828 	bl	295ec <__clzsi2>
   2759c:	1f43      	subs	r3, r0, #5
   2759e:	409c      	lsls	r4, r3
   275a0:	2376      	movs	r3, #118	; 0x76
   275a2:	425b      	negs	r3, r3
   275a4:	1a1b      	subs	r3, r3, r0
   275a6:	4698      	mov	r8, r3
   275a8:	2300      	movs	r3, #0
   275aa:	4699      	mov	r9, r3
   275ac:	469b      	mov	fp, r3
   275ae:	e791      	b.n	274d4 <__aeabi_fdiv+0x38>
   275b0:	230c      	movs	r3, #12
   275b2:	4699      	mov	r9, r3
   275b4:	33f3      	adds	r3, #243	; 0xf3
   275b6:	4698      	mov	r8, r3
   275b8:	3bfc      	subs	r3, #252	; 0xfc
   275ba:	469b      	mov	fp, r3
   275bc:	e78a      	b.n	274d4 <__aeabi_fdiv+0x38>
   275be:	2b03      	cmp	r3, #3
   275c0:	d100      	bne.n	275c4 <__aeabi_fdiv+0x128>
   275c2:	e0a5      	b.n	27710 <__aeabi_fdiv+0x274>
   275c4:	4655      	mov	r5, sl
   275c6:	2b01      	cmp	r3, #1
   275c8:	d000      	beq.n	275cc <__aeabi_fdiv+0x130>
   275ca:	e081      	b.n	276d0 <__aeabi_fdiv+0x234>
   275cc:	2301      	movs	r3, #1
   275ce:	2100      	movs	r1, #0
   275d0:	2400      	movs	r4, #0
   275d2:	402b      	ands	r3, r5
   275d4:	0264      	lsls	r4, r4, #9
   275d6:	05c9      	lsls	r1, r1, #23
   275d8:	0a60      	lsrs	r0, r4, #9
   275da:	07db      	lsls	r3, r3, #31
   275dc:	4308      	orrs	r0, r1
   275de:	4318      	orrs	r0, r3
   275e0:	b003      	add	sp, #12
   275e2:	bc3c      	pop	{r2, r3, r4, r5}
   275e4:	4690      	mov	r8, r2
   275e6:	4699      	mov	r9, r3
   275e8:	46a2      	mov	sl, r4
   275ea:	46ab      	mov	fp, r5
   275ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   275ee:	2480      	movs	r4, #128	; 0x80
   275f0:	2300      	movs	r3, #0
   275f2:	03e4      	lsls	r4, r4, #15
   275f4:	21ff      	movs	r1, #255	; 0xff
   275f6:	e7ed      	b.n	275d4 <__aeabi_fdiv+0x138>
   275f8:	21ff      	movs	r1, #255	; 0xff
   275fa:	2400      	movs	r4, #0
   275fc:	e7ea      	b.n	275d4 <__aeabi_fdiv+0x138>
   275fe:	2301      	movs	r3, #1
   27600:	1a59      	subs	r1, r3, r1
   27602:	291b      	cmp	r1, #27
   27604:	dd66      	ble.n	276d4 <__aeabi_fdiv+0x238>
   27606:	9a01      	ldr	r2, [sp, #4]
   27608:	4013      	ands	r3, r2
   2760a:	2100      	movs	r1, #0
   2760c:	2400      	movs	r4, #0
   2760e:	e7e1      	b.n	275d4 <__aeabi_fdiv+0x138>
   27610:	2380      	movs	r3, #128	; 0x80
   27612:	03db      	lsls	r3, r3, #15
   27614:	421c      	tst	r4, r3
   27616:	d038      	beq.n	2768a <__aeabi_fdiv+0x1ee>
   27618:	421d      	tst	r5, r3
   2761a:	d051      	beq.n	276c0 <__aeabi_fdiv+0x224>
   2761c:	431c      	orrs	r4, r3
   2761e:	0264      	lsls	r4, r4, #9
   27620:	0a64      	lsrs	r4, r4, #9
   27622:	0033      	movs	r3, r6
   27624:	21ff      	movs	r1, #255	; 0xff
   27626:	e7d5      	b.n	275d4 <__aeabi_fdiv+0x138>
   27628:	0163      	lsls	r3, r4, #5
   2762a:	016c      	lsls	r4, r5, #5
   2762c:	42a3      	cmp	r3, r4
   2762e:	d23b      	bcs.n	276a8 <__aeabi_fdiv+0x20c>
   27630:	261b      	movs	r6, #27
   27632:	2100      	movs	r1, #0
   27634:	3801      	subs	r0, #1
   27636:	2501      	movs	r5, #1
   27638:	001f      	movs	r7, r3
   2763a:	0049      	lsls	r1, r1, #1
   2763c:	005b      	lsls	r3, r3, #1
   2763e:	2f00      	cmp	r7, #0
   27640:	db01      	blt.n	27646 <__aeabi_fdiv+0x1aa>
   27642:	429c      	cmp	r4, r3
   27644:	d801      	bhi.n	2764a <__aeabi_fdiv+0x1ae>
   27646:	1b1b      	subs	r3, r3, r4
   27648:	4329      	orrs	r1, r5
   2764a:	3e01      	subs	r6, #1
   2764c:	2e00      	cmp	r6, #0
   2764e:	d1f3      	bne.n	27638 <__aeabi_fdiv+0x19c>
   27650:	001c      	movs	r4, r3
   27652:	1e63      	subs	r3, r4, #1
   27654:	419c      	sbcs	r4, r3
   27656:	430c      	orrs	r4, r1
   27658:	0001      	movs	r1, r0
   2765a:	317f      	adds	r1, #127	; 0x7f
   2765c:	2900      	cmp	r1, #0
   2765e:	ddce      	ble.n	275fe <__aeabi_fdiv+0x162>
   27660:	0763      	lsls	r3, r4, #29
   27662:	d004      	beq.n	2766e <__aeabi_fdiv+0x1d2>
   27664:	230f      	movs	r3, #15
   27666:	4023      	ands	r3, r4
   27668:	2b04      	cmp	r3, #4
   2766a:	d000      	beq.n	2766e <__aeabi_fdiv+0x1d2>
   2766c:	3404      	adds	r4, #4
   2766e:	0123      	lsls	r3, r4, #4
   27670:	d503      	bpl.n	2767a <__aeabi_fdiv+0x1de>
   27672:	0001      	movs	r1, r0
   27674:	4b2c      	ldr	r3, [pc, #176]	; (27728 <__aeabi_fdiv+0x28c>)
   27676:	3180      	adds	r1, #128	; 0x80
   27678:	401c      	ands	r4, r3
   2767a:	29fe      	cmp	r1, #254	; 0xfe
   2767c:	dd0d      	ble.n	2769a <__aeabi_fdiv+0x1fe>
   2767e:	2301      	movs	r3, #1
   27680:	9a01      	ldr	r2, [sp, #4]
   27682:	21ff      	movs	r1, #255	; 0xff
   27684:	4013      	ands	r3, r2
   27686:	2400      	movs	r4, #0
   27688:	e7a4      	b.n	275d4 <__aeabi_fdiv+0x138>
   2768a:	2380      	movs	r3, #128	; 0x80
   2768c:	03db      	lsls	r3, r3, #15
   2768e:	431c      	orrs	r4, r3
   27690:	0264      	lsls	r4, r4, #9
   27692:	0a64      	lsrs	r4, r4, #9
   27694:	0033      	movs	r3, r6
   27696:	21ff      	movs	r1, #255	; 0xff
   27698:	e79c      	b.n	275d4 <__aeabi_fdiv+0x138>
   2769a:	2301      	movs	r3, #1
   2769c:	9a01      	ldr	r2, [sp, #4]
   2769e:	01a4      	lsls	r4, r4, #6
   276a0:	0a64      	lsrs	r4, r4, #9
   276a2:	b2c9      	uxtb	r1, r1
   276a4:	4013      	ands	r3, r2
   276a6:	e795      	b.n	275d4 <__aeabi_fdiv+0x138>
   276a8:	1b1b      	subs	r3, r3, r4
   276aa:	261a      	movs	r6, #26
   276ac:	2101      	movs	r1, #1
   276ae:	e7c2      	b.n	27636 <__aeabi_fdiv+0x19a>
   276b0:	9b00      	ldr	r3, [sp, #0]
   276b2:	468b      	mov	fp, r1
   276b4:	469a      	mov	sl, r3
   276b6:	2400      	movs	r4, #0
   276b8:	e74c      	b.n	27554 <__aeabi_fdiv+0xb8>
   276ba:	0263      	lsls	r3, r4, #9
   276bc:	d5e5      	bpl.n	2768a <__aeabi_fdiv+0x1ee>
   276be:	2500      	movs	r5, #0
   276c0:	2480      	movs	r4, #128	; 0x80
   276c2:	03e4      	lsls	r4, r4, #15
   276c4:	432c      	orrs	r4, r5
   276c6:	0264      	lsls	r4, r4, #9
   276c8:	0a64      	lsrs	r4, r4, #9
   276ca:	9b00      	ldr	r3, [sp, #0]
   276cc:	21ff      	movs	r1, #255	; 0xff
   276ce:	e781      	b.n	275d4 <__aeabi_fdiv+0x138>
   276d0:	9501      	str	r5, [sp, #4]
   276d2:	e7c1      	b.n	27658 <__aeabi_fdiv+0x1bc>
   276d4:	0023      	movs	r3, r4
   276d6:	2020      	movs	r0, #32
   276d8:	40cb      	lsrs	r3, r1
   276da:	1a41      	subs	r1, r0, r1
   276dc:	408c      	lsls	r4, r1
   276de:	1e61      	subs	r1, r4, #1
   276e0:	418c      	sbcs	r4, r1
   276e2:	431c      	orrs	r4, r3
   276e4:	0763      	lsls	r3, r4, #29
   276e6:	d004      	beq.n	276f2 <__aeabi_fdiv+0x256>
   276e8:	230f      	movs	r3, #15
   276ea:	4023      	ands	r3, r4
   276ec:	2b04      	cmp	r3, #4
   276ee:	d000      	beq.n	276f2 <__aeabi_fdiv+0x256>
   276f0:	3404      	adds	r4, #4
   276f2:	0163      	lsls	r3, r4, #5
   276f4:	d505      	bpl.n	27702 <__aeabi_fdiv+0x266>
   276f6:	2301      	movs	r3, #1
   276f8:	9a01      	ldr	r2, [sp, #4]
   276fa:	2101      	movs	r1, #1
   276fc:	4013      	ands	r3, r2
   276fe:	2400      	movs	r4, #0
   27700:	e768      	b.n	275d4 <__aeabi_fdiv+0x138>
   27702:	2301      	movs	r3, #1
   27704:	9a01      	ldr	r2, [sp, #4]
   27706:	01a4      	lsls	r4, r4, #6
   27708:	0a64      	lsrs	r4, r4, #9
   2770a:	4013      	ands	r3, r2
   2770c:	2100      	movs	r1, #0
   2770e:	e761      	b.n	275d4 <__aeabi_fdiv+0x138>
   27710:	2380      	movs	r3, #128	; 0x80
   27712:	03db      	lsls	r3, r3, #15
   27714:	431c      	orrs	r4, r3
   27716:	0264      	lsls	r4, r4, #9
   27718:	0a64      	lsrs	r4, r4, #9
   2771a:	4653      	mov	r3, sl
   2771c:	21ff      	movs	r1, #255	; 0xff
   2771e:	e759      	b.n	275d4 <__aeabi_fdiv+0x138>
   27720:	0002b7d0 	.word	0x0002b7d0
   27724:	0002b810 	.word	0x0002b810
   27728:	f7ffffff 	.word	0xf7ffffff

0002772c <__aeabi_fmul>:
   2772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2772e:	4657      	mov	r7, sl
   27730:	464e      	mov	r6, r9
   27732:	4645      	mov	r5, r8
   27734:	46de      	mov	lr, fp
   27736:	b5e0      	push	{r5, r6, r7, lr}
   27738:	0247      	lsls	r7, r0, #9
   2773a:	0046      	lsls	r6, r0, #1
   2773c:	4688      	mov	r8, r1
   2773e:	0a7f      	lsrs	r7, r7, #9
   27740:	0e36      	lsrs	r6, r6, #24
   27742:	0fc4      	lsrs	r4, r0, #31
   27744:	2e00      	cmp	r6, #0
   27746:	d047      	beq.n	277d8 <__aeabi_fmul+0xac>
   27748:	2eff      	cmp	r6, #255	; 0xff
   2774a:	d024      	beq.n	27796 <__aeabi_fmul+0x6a>
   2774c:	00fb      	lsls	r3, r7, #3
   2774e:	2780      	movs	r7, #128	; 0x80
   27750:	04ff      	lsls	r7, r7, #19
   27752:	431f      	orrs	r7, r3
   27754:	2300      	movs	r3, #0
   27756:	4699      	mov	r9, r3
   27758:	469a      	mov	sl, r3
   2775a:	3e7f      	subs	r6, #127	; 0x7f
   2775c:	4643      	mov	r3, r8
   2775e:	025d      	lsls	r5, r3, #9
   27760:	0058      	lsls	r0, r3, #1
   27762:	0fdb      	lsrs	r3, r3, #31
   27764:	0a6d      	lsrs	r5, r5, #9
   27766:	0e00      	lsrs	r0, r0, #24
   27768:	4698      	mov	r8, r3
   2776a:	d043      	beq.n	277f4 <__aeabi_fmul+0xc8>
   2776c:	28ff      	cmp	r0, #255	; 0xff
   2776e:	d03b      	beq.n	277e8 <__aeabi_fmul+0xbc>
   27770:	00eb      	lsls	r3, r5, #3
   27772:	2580      	movs	r5, #128	; 0x80
   27774:	2200      	movs	r2, #0
   27776:	04ed      	lsls	r5, r5, #19
   27778:	431d      	orrs	r5, r3
   2777a:	387f      	subs	r0, #127	; 0x7f
   2777c:	1836      	adds	r6, r6, r0
   2777e:	1c73      	adds	r3, r6, #1
   27780:	4641      	mov	r1, r8
   27782:	469b      	mov	fp, r3
   27784:	464b      	mov	r3, r9
   27786:	4061      	eors	r1, r4
   27788:	4313      	orrs	r3, r2
   2778a:	2b0f      	cmp	r3, #15
   2778c:	d864      	bhi.n	27858 <__aeabi_fmul+0x12c>
   2778e:	4875      	ldr	r0, [pc, #468]	; (27964 <__aeabi_fmul+0x238>)
   27790:	009b      	lsls	r3, r3, #2
   27792:	58c3      	ldr	r3, [r0, r3]
   27794:	469f      	mov	pc, r3
   27796:	2f00      	cmp	r7, #0
   27798:	d142      	bne.n	27820 <__aeabi_fmul+0xf4>
   2779a:	2308      	movs	r3, #8
   2779c:	4699      	mov	r9, r3
   2779e:	3b06      	subs	r3, #6
   277a0:	26ff      	movs	r6, #255	; 0xff
   277a2:	469a      	mov	sl, r3
   277a4:	e7da      	b.n	2775c <__aeabi_fmul+0x30>
   277a6:	4641      	mov	r1, r8
   277a8:	2a02      	cmp	r2, #2
   277aa:	d028      	beq.n	277fe <__aeabi_fmul+0xd2>
   277ac:	2a03      	cmp	r2, #3
   277ae:	d100      	bne.n	277b2 <__aeabi_fmul+0x86>
   277b0:	e0ce      	b.n	27950 <__aeabi_fmul+0x224>
   277b2:	2a01      	cmp	r2, #1
   277b4:	d000      	beq.n	277b8 <__aeabi_fmul+0x8c>
   277b6:	e0ac      	b.n	27912 <__aeabi_fmul+0x1e6>
   277b8:	4011      	ands	r1, r2
   277ba:	2000      	movs	r0, #0
   277bc:	2200      	movs	r2, #0
   277be:	b2cc      	uxtb	r4, r1
   277c0:	0240      	lsls	r0, r0, #9
   277c2:	05d2      	lsls	r2, r2, #23
   277c4:	0a40      	lsrs	r0, r0, #9
   277c6:	07e4      	lsls	r4, r4, #31
   277c8:	4310      	orrs	r0, r2
   277ca:	4320      	orrs	r0, r4
   277cc:	bc3c      	pop	{r2, r3, r4, r5}
   277ce:	4690      	mov	r8, r2
   277d0:	4699      	mov	r9, r3
   277d2:	46a2      	mov	sl, r4
   277d4:	46ab      	mov	fp, r5
   277d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   277d8:	2f00      	cmp	r7, #0
   277da:	d115      	bne.n	27808 <__aeabi_fmul+0xdc>
   277dc:	2304      	movs	r3, #4
   277de:	4699      	mov	r9, r3
   277e0:	3b03      	subs	r3, #3
   277e2:	2600      	movs	r6, #0
   277e4:	469a      	mov	sl, r3
   277e6:	e7b9      	b.n	2775c <__aeabi_fmul+0x30>
   277e8:	20ff      	movs	r0, #255	; 0xff
   277ea:	2202      	movs	r2, #2
   277ec:	2d00      	cmp	r5, #0
   277ee:	d0c5      	beq.n	2777c <__aeabi_fmul+0x50>
   277f0:	2203      	movs	r2, #3
   277f2:	e7c3      	b.n	2777c <__aeabi_fmul+0x50>
   277f4:	2d00      	cmp	r5, #0
   277f6:	d119      	bne.n	2782c <__aeabi_fmul+0x100>
   277f8:	2000      	movs	r0, #0
   277fa:	2201      	movs	r2, #1
   277fc:	e7be      	b.n	2777c <__aeabi_fmul+0x50>
   277fe:	2401      	movs	r4, #1
   27800:	22ff      	movs	r2, #255	; 0xff
   27802:	400c      	ands	r4, r1
   27804:	2000      	movs	r0, #0
   27806:	e7db      	b.n	277c0 <__aeabi_fmul+0x94>
   27808:	0038      	movs	r0, r7
   2780a:	f001 feef 	bl	295ec <__clzsi2>
   2780e:	2676      	movs	r6, #118	; 0x76
   27810:	1f43      	subs	r3, r0, #5
   27812:	409f      	lsls	r7, r3
   27814:	2300      	movs	r3, #0
   27816:	4276      	negs	r6, r6
   27818:	1a36      	subs	r6, r6, r0
   2781a:	4699      	mov	r9, r3
   2781c:	469a      	mov	sl, r3
   2781e:	e79d      	b.n	2775c <__aeabi_fmul+0x30>
   27820:	230c      	movs	r3, #12
   27822:	4699      	mov	r9, r3
   27824:	3b09      	subs	r3, #9
   27826:	26ff      	movs	r6, #255	; 0xff
   27828:	469a      	mov	sl, r3
   2782a:	e797      	b.n	2775c <__aeabi_fmul+0x30>
   2782c:	0028      	movs	r0, r5
   2782e:	f001 fedd 	bl	295ec <__clzsi2>
   27832:	1f43      	subs	r3, r0, #5
   27834:	409d      	lsls	r5, r3
   27836:	2376      	movs	r3, #118	; 0x76
   27838:	425b      	negs	r3, r3
   2783a:	1a18      	subs	r0, r3, r0
   2783c:	2200      	movs	r2, #0
   2783e:	e79d      	b.n	2777c <__aeabi_fmul+0x50>
   27840:	2080      	movs	r0, #128	; 0x80
   27842:	2400      	movs	r4, #0
   27844:	03c0      	lsls	r0, r0, #15
   27846:	22ff      	movs	r2, #255	; 0xff
   27848:	e7ba      	b.n	277c0 <__aeabi_fmul+0x94>
   2784a:	003d      	movs	r5, r7
   2784c:	4652      	mov	r2, sl
   2784e:	e7ab      	b.n	277a8 <__aeabi_fmul+0x7c>
   27850:	003d      	movs	r5, r7
   27852:	0021      	movs	r1, r4
   27854:	4652      	mov	r2, sl
   27856:	e7a7      	b.n	277a8 <__aeabi_fmul+0x7c>
   27858:	0c3b      	lsrs	r3, r7, #16
   2785a:	469c      	mov	ip, r3
   2785c:	042a      	lsls	r2, r5, #16
   2785e:	0c12      	lsrs	r2, r2, #16
   27860:	0c2b      	lsrs	r3, r5, #16
   27862:	0014      	movs	r4, r2
   27864:	4660      	mov	r0, ip
   27866:	4665      	mov	r5, ip
   27868:	043f      	lsls	r7, r7, #16
   2786a:	0c3f      	lsrs	r7, r7, #16
   2786c:	437c      	muls	r4, r7
   2786e:	4342      	muls	r2, r0
   27870:	435d      	muls	r5, r3
   27872:	437b      	muls	r3, r7
   27874:	0c27      	lsrs	r7, r4, #16
   27876:	189b      	adds	r3, r3, r2
   27878:	18ff      	adds	r7, r7, r3
   2787a:	42ba      	cmp	r2, r7
   2787c:	d903      	bls.n	27886 <__aeabi_fmul+0x15a>
   2787e:	2380      	movs	r3, #128	; 0x80
   27880:	025b      	lsls	r3, r3, #9
   27882:	469c      	mov	ip, r3
   27884:	4465      	add	r5, ip
   27886:	0424      	lsls	r4, r4, #16
   27888:	043a      	lsls	r2, r7, #16
   2788a:	0c24      	lsrs	r4, r4, #16
   2788c:	1912      	adds	r2, r2, r4
   2788e:	0193      	lsls	r3, r2, #6
   27890:	1e5c      	subs	r4, r3, #1
   27892:	41a3      	sbcs	r3, r4
   27894:	0c3f      	lsrs	r7, r7, #16
   27896:	0e92      	lsrs	r2, r2, #26
   27898:	197d      	adds	r5, r7, r5
   2789a:	431a      	orrs	r2, r3
   2789c:	01ad      	lsls	r5, r5, #6
   2789e:	4315      	orrs	r5, r2
   278a0:	012b      	lsls	r3, r5, #4
   278a2:	d504      	bpl.n	278ae <__aeabi_fmul+0x182>
   278a4:	2301      	movs	r3, #1
   278a6:	465e      	mov	r6, fp
   278a8:	086a      	lsrs	r2, r5, #1
   278aa:	401d      	ands	r5, r3
   278ac:	4315      	orrs	r5, r2
   278ae:	0032      	movs	r2, r6
   278b0:	327f      	adds	r2, #127	; 0x7f
   278b2:	2a00      	cmp	r2, #0
   278b4:	dd25      	ble.n	27902 <__aeabi_fmul+0x1d6>
   278b6:	076b      	lsls	r3, r5, #29
   278b8:	d004      	beq.n	278c4 <__aeabi_fmul+0x198>
   278ba:	230f      	movs	r3, #15
   278bc:	402b      	ands	r3, r5
   278be:	2b04      	cmp	r3, #4
   278c0:	d000      	beq.n	278c4 <__aeabi_fmul+0x198>
   278c2:	3504      	adds	r5, #4
   278c4:	012b      	lsls	r3, r5, #4
   278c6:	d503      	bpl.n	278d0 <__aeabi_fmul+0x1a4>
   278c8:	0032      	movs	r2, r6
   278ca:	4b27      	ldr	r3, [pc, #156]	; (27968 <__aeabi_fmul+0x23c>)
   278cc:	3280      	adds	r2, #128	; 0x80
   278ce:	401d      	ands	r5, r3
   278d0:	2afe      	cmp	r2, #254	; 0xfe
   278d2:	dc94      	bgt.n	277fe <__aeabi_fmul+0xd2>
   278d4:	2401      	movs	r4, #1
   278d6:	01a8      	lsls	r0, r5, #6
   278d8:	0a40      	lsrs	r0, r0, #9
   278da:	b2d2      	uxtb	r2, r2
   278dc:	400c      	ands	r4, r1
   278de:	e76f      	b.n	277c0 <__aeabi_fmul+0x94>
   278e0:	2080      	movs	r0, #128	; 0x80
   278e2:	03c0      	lsls	r0, r0, #15
   278e4:	4207      	tst	r7, r0
   278e6:	d007      	beq.n	278f8 <__aeabi_fmul+0x1cc>
   278e8:	4205      	tst	r5, r0
   278ea:	d105      	bne.n	278f8 <__aeabi_fmul+0x1cc>
   278ec:	4328      	orrs	r0, r5
   278ee:	0240      	lsls	r0, r0, #9
   278f0:	0a40      	lsrs	r0, r0, #9
   278f2:	4644      	mov	r4, r8
   278f4:	22ff      	movs	r2, #255	; 0xff
   278f6:	e763      	b.n	277c0 <__aeabi_fmul+0x94>
   278f8:	4338      	orrs	r0, r7
   278fa:	0240      	lsls	r0, r0, #9
   278fc:	0a40      	lsrs	r0, r0, #9
   278fe:	22ff      	movs	r2, #255	; 0xff
   27900:	e75e      	b.n	277c0 <__aeabi_fmul+0x94>
   27902:	2401      	movs	r4, #1
   27904:	1aa3      	subs	r3, r4, r2
   27906:	2b1b      	cmp	r3, #27
   27908:	dd05      	ble.n	27916 <__aeabi_fmul+0x1ea>
   2790a:	400c      	ands	r4, r1
   2790c:	2200      	movs	r2, #0
   2790e:	2000      	movs	r0, #0
   27910:	e756      	b.n	277c0 <__aeabi_fmul+0x94>
   27912:	465e      	mov	r6, fp
   27914:	e7cb      	b.n	278ae <__aeabi_fmul+0x182>
   27916:	002a      	movs	r2, r5
   27918:	2020      	movs	r0, #32
   2791a:	40da      	lsrs	r2, r3
   2791c:	1ac3      	subs	r3, r0, r3
   2791e:	409d      	lsls	r5, r3
   27920:	002b      	movs	r3, r5
   27922:	1e5d      	subs	r5, r3, #1
   27924:	41ab      	sbcs	r3, r5
   27926:	4313      	orrs	r3, r2
   27928:	075a      	lsls	r2, r3, #29
   2792a:	d004      	beq.n	27936 <__aeabi_fmul+0x20a>
   2792c:	220f      	movs	r2, #15
   2792e:	401a      	ands	r2, r3
   27930:	2a04      	cmp	r2, #4
   27932:	d000      	beq.n	27936 <__aeabi_fmul+0x20a>
   27934:	3304      	adds	r3, #4
   27936:	015a      	lsls	r2, r3, #5
   27938:	d504      	bpl.n	27944 <__aeabi_fmul+0x218>
   2793a:	2401      	movs	r4, #1
   2793c:	2201      	movs	r2, #1
   2793e:	400c      	ands	r4, r1
   27940:	2000      	movs	r0, #0
   27942:	e73d      	b.n	277c0 <__aeabi_fmul+0x94>
   27944:	2401      	movs	r4, #1
   27946:	019b      	lsls	r3, r3, #6
   27948:	0a58      	lsrs	r0, r3, #9
   2794a:	400c      	ands	r4, r1
   2794c:	2200      	movs	r2, #0
   2794e:	e737      	b.n	277c0 <__aeabi_fmul+0x94>
   27950:	2080      	movs	r0, #128	; 0x80
   27952:	2401      	movs	r4, #1
   27954:	03c0      	lsls	r0, r0, #15
   27956:	4328      	orrs	r0, r5
   27958:	0240      	lsls	r0, r0, #9
   2795a:	0a40      	lsrs	r0, r0, #9
   2795c:	400c      	ands	r4, r1
   2795e:	22ff      	movs	r2, #255	; 0xff
   27960:	e72e      	b.n	277c0 <__aeabi_fmul+0x94>
   27962:	46c0      	nop			; (mov r8, r8)
   27964:	0002b850 	.word	0x0002b850
   27968:	f7ffffff 	.word	0xf7ffffff

0002796c <__aeabi_ui2f>:
   2796c:	b510      	push	{r4, lr}
   2796e:	1e04      	subs	r4, r0, #0
   27970:	d027      	beq.n	279c2 <__aeabi_ui2f+0x56>
   27972:	f001 fe3b 	bl	295ec <__clzsi2>
   27976:	239e      	movs	r3, #158	; 0x9e
   27978:	1a1b      	subs	r3, r3, r0
   2797a:	2b96      	cmp	r3, #150	; 0x96
   2797c:	dc0a      	bgt.n	27994 <__aeabi_ui2f+0x28>
   2797e:	2296      	movs	r2, #150	; 0x96
   27980:	1ad2      	subs	r2, r2, r3
   27982:	4094      	lsls	r4, r2
   27984:	0264      	lsls	r4, r4, #9
   27986:	0a64      	lsrs	r4, r4, #9
   27988:	b2db      	uxtb	r3, r3
   2798a:	0264      	lsls	r4, r4, #9
   2798c:	05db      	lsls	r3, r3, #23
   2798e:	0a60      	lsrs	r0, r4, #9
   27990:	4318      	orrs	r0, r3
   27992:	bd10      	pop	{r4, pc}
   27994:	2b99      	cmp	r3, #153	; 0x99
   27996:	dc17      	bgt.n	279c8 <__aeabi_ui2f+0x5c>
   27998:	2299      	movs	r2, #153	; 0x99
   2799a:	1ad2      	subs	r2, r2, r3
   2799c:	2a00      	cmp	r2, #0
   2799e:	dd27      	ble.n	279f0 <__aeabi_ui2f+0x84>
   279a0:	4094      	lsls	r4, r2
   279a2:	0022      	movs	r2, r4
   279a4:	4c13      	ldr	r4, [pc, #76]	; (279f4 <__aeabi_ui2f+0x88>)
   279a6:	4014      	ands	r4, r2
   279a8:	0751      	lsls	r1, r2, #29
   279aa:	d004      	beq.n	279b6 <__aeabi_ui2f+0x4a>
   279ac:	210f      	movs	r1, #15
   279ae:	400a      	ands	r2, r1
   279b0:	2a04      	cmp	r2, #4
   279b2:	d000      	beq.n	279b6 <__aeabi_ui2f+0x4a>
   279b4:	3404      	adds	r4, #4
   279b6:	0162      	lsls	r2, r4, #5
   279b8:	d412      	bmi.n	279e0 <__aeabi_ui2f+0x74>
   279ba:	01a4      	lsls	r4, r4, #6
   279bc:	0a64      	lsrs	r4, r4, #9
   279be:	b2db      	uxtb	r3, r3
   279c0:	e7e3      	b.n	2798a <__aeabi_ui2f+0x1e>
   279c2:	2300      	movs	r3, #0
   279c4:	2400      	movs	r4, #0
   279c6:	e7e0      	b.n	2798a <__aeabi_ui2f+0x1e>
   279c8:	22b9      	movs	r2, #185	; 0xb9
   279ca:	0021      	movs	r1, r4
   279cc:	1ad2      	subs	r2, r2, r3
   279ce:	4091      	lsls	r1, r2
   279d0:	000a      	movs	r2, r1
   279d2:	1e51      	subs	r1, r2, #1
   279d4:	418a      	sbcs	r2, r1
   279d6:	2105      	movs	r1, #5
   279d8:	1a09      	subs	r1, r1, r0
   279da:	40cc      	lsrs	r4, r1
   279dc:	4314      	orrs	r4, r2
   279de:	e7db      	b.n	27998 <__aeabi_ui2f+0x2c>
   279e0:	4b04      	ldr	r3, [pc, #16]	; (279f4 <__aeabi_ui2f+0x88>)
   279e2:	401c      	ands	r4, r3
   279e4:	239f      	movs	r3, #159	; 0x9f
   279e6:	01a4      	lsls	r4, r4, #6
   279e8:	1a1b      	subs	r3, r3, r0
   279ea:	0a64      	lsrs	r4, r4, #9
   279ec:	b2db      	uxtb	r3, r3
   279ee:	e7cc      	b.n	2798a <__aeabi_ui2f+0x1e>
   279f0:	0022      	movs	r2, r4
   279f2:	e7d7      	b.n	279a4 <__aeabi_ui2f+0x38>
   279f4:	fbffffff 	.word	0xfbffffff

000279f8 <__aeabi_dadd>:
   279f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   279fa:	4645      	mov	r5, r8
   279fc:	46de      	mov	lr, fp
   279fe:	4657      	mov	r7, sl
   27a00:	464e      	mov	r6, r9
   27a02:	030c      	lsls	r4, r1, #12
   27a04:	b5e0      	push	{r5, r6, r7, lr}
   27a06:	004e      	lsls	r6, r1, #1
   27a08:	0fc9      	lsrs	r1, r1, #31
   27a0a:	4688      	mov	r8, r1
   27a0c:	000d      	movs	r5, r1
   27a0e:	0a61      	lsrs	r1, r4, #9
   27a10:	0f44      	lsrs	r4, r0, #29
   27a12:	430c      	orrs	r4, r1
   27a14:	00c7      	lsls	r7, r0, #3
   27a16:	0319      	lsls	r1, r3, #12
   27a18:	0058      	lsls	r0, r3, #1
   27a1a:	0fdb      	lsrs	r3, r3, #31
   27a1c:	469b      	mov	fp, r3
   27a1e:	0a4b      	lsrs	r3, r1, #9
   27a20:	0f51      	lsrs	r1, r2, #29
   27a22:	430b      	orrs	r3, r1
   27a24:	0d76      	lsrs	r6, r6, #21
   27a26:	0d40      	lsrs	r0, r0, #21
   27a28:	0019      	movs	r1, r3
   27a2a:	00d2      	lsls	r2, r2, #3
   27a2c:	45d8      	cmp	r8, fp
   27a2e:	d100      	bne.n	27a32 <__aeabi_dadd+0x3a>
   27a30:	e0ae      	b.n	27b90 <__aeabi_dadd+0x198>
   27a32:	1a35      	subs	r5, r6, r0
   27a34:	2d00      	cmp	r5, #0
   27a36:	dc00      	bgt.n	27a3a <__aeabi_dadd+0x42>
   27a38:	e0f6      	b.n	27c28 <__aeabi_dadd+0x230>
   27a3a:	2800      	cmp	r0, #0
   27a3c:	d10f      	bne.n	27a5e <__aeabi_dadd+0x66>
   27a3e:	4313      	orrs	r3, r2
   27a40:	d100      	bne.n	27a44 <__aeabi_dadd+0x4c>
   27a42:	e0db      	b.n	27bfc <__aeabi_dadd+0x204>
   27a44:	1e6b      	subs	r3, r5, #1
   27a46:	2b00      	cmp	r3, #0
   27a48:	d000      	beq.n	27a4c <__aeabi_dadd+0x54>
   27a4a:	e137      	b.n	27cbc <__aeabi_dadd+0x2c4>
   27a4c:	1aba      	subs	r2, r7, r2
   27a4e:	4297      	cmp	r7, r2
   27a50:	41bf      	sbcs	r7, r7
   27a52:	1a64      	subs	r4, r4, r1
   27a54:	427f      	negs	r7, r7
   27a56:	1be4      	subs	r4, r4, r7
   27a58:	2601      	movs	r6, #1
   27a5a:	0017      	movs	r7, r2
   27a5c:	e024      	b.n	27aa8 <__aeabi_dadd+0xb0>
   27a5e:	4bc6      	ldr	r3, [pc, #792]	; (27d78 <__aeabi_dadd+0x380>)
   27a60:	429e      	cmp	r6, r3
   27a62:	d04d      	beq.n	27b00 <__aeabi_dadd+0x108>
   27a64:	2380      	movs	r3, #128	; 0x80
   27a66:	041b      	lsls	r3, r3, #16
   27a68:	4319      	orrs	r1, r3
   27a6a:	2d38      	cmp	r5, #56	; 0x38
   27a6c:	dd00      	ble.n	27a70 <__aeabi_dadd+0x78>
   27a6e:	e107      	b.n	27c80 <__aeabi_dadd+0x288>
   27a70:	2d1f      	cmp	r5, #31
   27a72:	dd00      	ble.n	27a76 <__aeabi_dadd+0x7e>
   27a74:	e138      	b.n	27ce8 <__aeabi_dadd+0x2f0>
   27a76:	2020      	movs	r0, #32
   27a78:	1b43      	subs	r3, r0, r5
   27a7a:	469a      	mov	sl, r3
   27a7c:	000b      	movs	r3, r1
   27a7e:	4650      	mov	r0, sl
   27a80:	4083      	lsls	r3, r0
   27a82:	4699      	mov	r9, r3
   27a84:	0013      	movs	r3, r2
   27a86:	4648      	mov	r0, r9
   27a88:	40eb      	lsrs	r3, r5
   27a8a:	4318      	orrs	r0, r3
   27a8c:	0003      	movs	r3, r0
   27a8e:	4650      	mov	r0, sl
   27a90:	4082      	lsls	r2, r0
   27a92:	1e50      	subs	r0, r2, #1
   27a94:	4182      	sbcs	r2, r0
   27a96:	40e9      	lsrs	r1, r5
   27a98:	431a      	orrs	r2, r3
   27a9a:	1aba      	subs	r2, r7, r2
   27a9c:	1a61      	subs	r1, r4, r1
   27a9e:	4297      	cmp	r7, r2
   27aa0:	41a4      	sbcs	r4, r4
   27aa2:	0017      	movs	r7, r2
   27aa4:	4264      	negs	r4, r4
   27aa6:	1b0c      	subs	r4, r1, r4
   27aa8:	0223      	lsls	r3, r4, #8
   27aaa:	d562      	bpl.n	27b72 <__aeabi_dadd+0x17a>
   27aac:	0264      	lsls	r4, r4, #9
   27aae:	0a65      	lsrs	r5, r4, #9
   27ab0:	2d00      	cmp	r5, #0
   27ab2:	d100      	bne.n	27ab6 <__aeabi_dadd+0xbe>
   27ab4:	e0df      	b.n	27c76 <__aeabi_dadd+0x27e>
   27ab6:	0028      	movs	r0, r5
   27ab8:	f001 fd98 	bl	295ec <__clzsi2>
   27abc:	0003      	movs	r3, r0
   27abe:	3b08      	subs	r3, #8
   27ac0:	2b1f      	cmp	r3, #31
   27ac2:	dd00      	ble.n	27ac6 <__aeabi_dadd+0xce>
   27ac4:	e0d2      	b.n	27c6c <__aeabi_dadd+0x274>
   27ac6:	2220      	movs	r2, #32
   27ac8:	003c      	movs	r4, r7
   27aca:	1ad2      	subs	r2, r2, r3
   27acc:	409d      	lsls	r5, r3
   27ace:	40d4      	lsrs	r4, r2
   27ad0:	409f      	lsls	r7, r3
   27ad2:	4325      	orrs	r5, r4
   27ad4:	429e      	cmp	r6, r3
   27ad6:	dd00      	ble.n	27ada <__aeabi_dadd+0xe2>
   27ad8:	e0c4      	b.n	27c64 <__aeabi_dadd+0x26c>
   27ada:	1b9e      	subs	r6, r3, r6
   27adc:	1c73      	adds	r3, r6, #1
   27ade:	2b1f      	cmp	r3, #31
   27ae0:	dd00      	ble.n	27ae4 <__aeabi_dadd+0xec>
   27ae2:	e0f1      	b.n	27cc8 <__aeabi_dadd+0x2d0>
   27ae4:	2220      	movs	r2, #32
   27ae6:	0038      	movs	r0, r7
   27ae8:	0029      	movs	r1, r5
   27aea:	1ad2      	subs	r2, r2, r3
   27aec:	40d8      	lsrs	r0, r3
   27aee:	4091      	lsls	r1, r2
   27af0:	4097      	lsls	r7, r2
   27af2:	002c      	movs	r4, r5
   27af4:	4301      	orrs	r1, r0
   27af6:	1e78      	subs	r0, r7, #1
   27af8:	4187      	sbcs	r7, r0
   27afa:	40dc      	lsrs	r4, r3
   27afc:	2600      	movs	r6, #0
   27afe:	430f      	orrs	r7, r1
   27b00:	077b      	lsls	r3, r7, #29
   27b02:	d009      	beq.n	27b18 <__aeabi_dadd+0x120>
   27b04:	230f      	movs	r3, #15
   27b06:	403b      	ands	r3, r7
   27b08:	2b04      	cmp	r3, #4
   27b0a:	d005      	beq.n	27b18 <__aeabi_dadd+0x120>
   27b0c:	1d3b      	adds	r3, r7, #4
   27b0e:	42bb      	cmp	r3, r7
   27b10:	41bf      	sbcs	r7, r7
   27b12:	427f      	negs	r7, r7
   27b14:	19e4      	adds	r4, r4, r7
   27b16:	001f      	movs	r7, r3
   27b18:	0223      	lsls	r3, r4, #8
   27b1a:	d52c      	bpl.n	27b76 <__aeabi_dadd+0x17e>
   27b1c:	4b96      	ldr	r3, [pc, #600]	; (27d78 <__aeabi_dadd+0x380>)
   27b1e:	3601      	adds	r6, #1
   27b20:	429e      	cmp	r6, r3
   27b22:	d100      	bne.n	27b26 <__aeabi_dadd+0x12e>
   27b24:	e09a      	b.n	27c5c <__aeabi_dadd+0x264>
   27b26:	4645      	mov	r5, r8
   27b28:	4b94      	ldr	r3, [pc, #592]	; (27d7c <__aeabi_dadd+0x384>)
   27b2a:	08ff      	lsrs	r7, r7, #3
   27b2c:	401c      	ands	r4, r3
   27b2e:	0760      	lsls	r0, r4, #29
   27b30:	0576      	lsls	r6, r6, #21
   27b32:	0264      	lsls	r4, r4, #9
   27b34:	4307      	orrs	r7, r0
   27b36:	0b24      	lsrs	r4, r4, #12
   27b38:	0d76      	lsrs	r6, r6, #21
   27b3a:	2100      	movs	r1, #0
   27b3c:	0324      	lsls	r4, r4, #12
   27b3e:	0b23      	lsrs	r3, r4, #12
   27b40:	0d0c      	lsrs	r4, r1, #20
   27b42:	4a8f      	ldr	r2, [pc, #572]	; (27d80 <__aeabi_dadd+0x388>)
   27b44:	0524      	lsls	r4, r4, #20
   27b46:	431c      	orrs	r4, r3
   27b48:	4014      	ands	r4, r2
   27b4a:	0533      	lsls	r3, r6, #20
   27b4c:	4323      	orrs	r3, r4
   27b4e:	005b      	lsls	r3, r3, #1
   27b50:	07ed      	lsls	r5, r5, #31
   27b52:	085b      	lsrs	r3, r3, #1
   27b54:	432b      	orrs	r3, r5
   27b56:	0038      	movs	r0, r7
   27b58:	0019      	movs	r1, r3
   27b5a:	bc3c      	pop	{r2, r3, r4, r5}
   27b5c:	4690      	mov	r8, r2
   27b5e:	4699      	mov	r9, r3
   27b60:	46a2      	mov	sl, r4
   27b62:	46ab      	mov	fp, r5
   27b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27b66:	4664      	mov	r4, ip
   27b68:	4304      	orrs	r4, r0
   27b6a:	d100      	bne.n	27b6e <__aeabi_dadd+0x176>
   27b6c:	e211      	b.n	27f92 <__aeabi_dadd+0x59a>
   27b6e:	0004      	movs	r4, r0
   27b70:	4667      	mov	r7, ip
   27b72:	077b      	lsls	r3, r7, #29
   27b74:	d1c6      	bne.n	27b04 <__aeabi_dadd+0x10c>
   27b76:	4645      	mov	r5, r8
   27b78:	0760      	lsls	r0, r4, #29
   27b7a:	08ff      	lsrs	r7, r7, #3
   27b7c:	4307      	orrs	r7, r0
   27b7e:	08e4      	lsrs	r4, r4, #3
   27b80:	4b7d      	ldr	r3, [pc, #500]	; (27d78 <__aeabi_dadd+0x380>)
   27b82:	429e      	cmp	r6, r3
   27b84:	d030      	beq.n	27be8 <__aeabi_dadd+0x1f0>
   27b86:	0324      	lsls	r4, r4, #12
   27b88:	0576      	lsls	r6, r6, #21
   27b8a:	0b24      	lsrs	r4, r4, #12
   27b8c:	0d76      	lsrs	r6, r6, #21
   27b8e:	e7d4      	b.n	27b3a <__aeabi_dadd+0x142>
   27b90:	1a33      	subs	r3, r6, r0
   27b92:	469a      	mov	sl, r3
   27b94:	2b00      	cmp	r3, #0
   27b96:	dd78      	ble.n	27c8a <__aeabi_dadd+0x292>
   27b98:	2800      	cmp	r0, #0
   27b9a:	d031      	beq.n	27c00 <__aeabi_dadd+0x208>
   27b9c:	4876      	ldr	r0, [pc, #472]	; (27d78 <__aeabi_dadd+0x380>)
   27b9e:	4286      	cmp	r6, r0
   27ba0:	d0ae      	beq.n	27b00 <__aeabi_dadd+0x108>
   27ba2:	2080      	movs	r0, #128	; 0x80
   27ba4:	0400      	lsls	r0, r0, #16
   27ba6:	4301      	orrs	r1, r0
   27ba8:	4653      	mov	r3, sl
   27baa:	2b38      	cmp	r3, #56	; 0x38
   27bac:	dc00      	bgt.n	27bb0 <__aeabi_dadd+0x1b8>
   27bae:	e0e9      	b.n	27d84 <__aeabi_dadd+0x38c>
   27bb0:	430a      	orrs	r2, r1
   27bb2:	1e51      	subs	r1, r2, #1
   27bb4:	418a      	sbcs	r2, r1
   27bb6:	2100      	movs	r1, #0
   27bb8:	19d2      	adds	r2, r2, r7
   27bba:	42ba      	cmp	r2, r7
   27bbc:	41bf      	sbcs	r7, r7
   27bbe:	1909      	adds	r1, r1, r4
   27bc0:	427c      	negs	r4, r7
   27bc2:	0017      	movs	r7, r2
   27bc4:	190c      	adds	r4, r1, r4
   27bc6:	0223      	lsls	r3, r4, #8
   27bc8:	d5d3      	bpl.n	27b72 <__aeabi_dadd+0x17a>
   27bca:	4b6b      	ldr	r3, [pc, #428]	; (27d78 <__aeabi_dadd+0x380>)
   27bcc:	3601      	adds	r6, #1
   27bce:	429e      	cmp	r6, r3
   27bd0:	d100      	bne.n	27bd4 <__aeabi_dadd+0x1dc>
   27bd2:	e13a      	b.n	27e4a <__aeabi_dadd+0x452>
   27bd4:	2001      	movs	r0, #1
   27bd6:	4b69      	ldr	r3, [pc, #420]	; (27d7c <__aeabi_dadd+0x384>)
   27bd8:	401c      	ands	r4, r3
   27bda:	087b      	lsrs	r3, r7, #1
   27bdc:	4007      	ands	r7, r0
   27bde:	431f      	orrs	r7, r3
   27be0:	07e0      	lsls	r0, r4, #31
   27be2:	4307      	orrs	r7, r0
   27be4:	0864      	lsrs	r4, r4, #1
   27be6:	e78b      	b.n	27b00 <__aeabi_dadd+0x108>
   27be8:	0023      	movs	r3, r4
   27bea:	433b      	orrs	r3, r7
   27bec:	d100      	bne.n	27bf0 <__aeabi_dadd+0x1f8>
   27bee:	e1cb      	b.n	27f88 <__aeabi_dadd+0x590>
   27bf0:	2280      	movs	r2, #128	; 0x80
   27bf2:	0312      	lsls	r2, r2, #12
   27bf4:	4314      	orrs	r4, r2
   27bf6:	0324      	lsls	r4, r4, #12
   27bf8:	0b24      	lsrs	r4, r4, #12
   27bfa:	e79e      	b.n	27b3a <__aeabi_dadd+0x142>
   27bfc:	002e      	movs	r6, r5
   27bfe:	e77f      	b.n	27b00 <__aeabi_dadd+0x108>
   27c00:	0008      	movs	r0, r1
   27c02:	4310      	orrs	r0, r2
   27c04:	d100      	bne.n	27c08 <__aeabi_dadd+0x210>
   27c06:	e0b4      	b.n	27d72 <__aeabi_dadd+0x37a>
   27c08:	1e58      	subs	r0, r3, #1
   27c0a:	2800      	cmp	r0, #0
   27c0c:	d000      	beq.n	27c10 <__aeabi_dadd+0x218>
   27c0e:	e0de      	b.n	27dce <__aeabi_dadd+0x3d6>
   27c10:	18ba      	adds	r2, r7, r2
   27c12:	42ba      	cmp	r2, r7
   27c14:	419b      	sbcs	r3, r3
   27c16:	1864      	adds	r4, r4, r1
   27c18:	425b      	negs	r3, r3
   27c1a:	18e4      	adds	r4, r4, r3
   27c1c:	0017      	movs	r7, r2
   27c1e:	2601      	movs	r6, #1
   27c20:	0223      	lsls	r3, r4, #8
   27c22:	d5a6      	bpl.n	27b72 <__aeabi_dadd+0x17a>
   27c24:	2602      	movs	r6, #2
   27c26:	e7d5      	b.n	27bd4 <__aeabi_dadd+0x1dc>
   27c28:	2d00      	cmp	r5, #0
   27c2a:	d16e      	bne.n	27d0a <__aeabi_dadd+0x312>
   27c2c:	1c70      	adds	r0, r6, #1
   27c2e:	0540      	lsls	r0, r0, #21
   27c30:	0d40      	lsrs	r0, r0, #21
   27c32:	2801      	cmp	r0, #1
   27c34:	dc00      	bgt.n	27c38 <__aeabi_dadd+0x240>
   27c36:	e0f9      	b.n	27e2c <__aeabi_dadd+0x434>
   27c38:	1ab8      	subs	r0, r7, r2
   27c3a:	4684      	mov	ip, r0
   27c3c:	4287      	cmp	r7, r0
   27c3e:	4180      	sbcs	r0, r0
   27c40:	1ae5      	subs	r5, r4, r3
   27c42:	4240      	negs	r0, r0
   27c44:	1a2d      	subs	r5, r5, r0
   27c46:	0228      	lsls	r0, r5, #8
   27c48:	d400      	bmi.n	27c4c <__aeabi_dadd+0x254>
   27c4a:	e089      	b.n	27d60 <__aeabi_dadd+0x368>
   27c4c:	1bd7      	subs	r7, r2, r7
   27c4e:	42ba      	cmp	r2, r7
   27c50:	4192      	sbcs	r2, r2
   27c52:	1b1c      	subs	r4, r3, r4
   27c54:	4252      	negs	r2, r2
   27c56:	1aa5      	subs	r5, r4, r2
   27c58:	46d8      	mov	r8, fp
   27c5a:	e729      	b.n	27ab0 <__aeabi_dadd+0xb8>
   27c5c:	4645      	mov	r5, r8
   27c5e:	2400      	movs	r4, #0
   27c60:	2700      	movs	r7, #0
   27c62:	e76a      	b.n	27b3a <__aeabi_dadd+0x142>
   27c64:	4c45      	ldr	r4, [pc, #276]	; (27d7c <__aeabi_dadd+0x384>)
   27c66:	1af6      	subs	r6, r6, r3
   27c68:	402c      	ands	r4, r5
   27c6a:	e749      	b.n	27b00 <__aeabi_dadd+0x108>
   27c6c:	003d      	movs	r5, r7
   27c6e:	3828      	subs	r0, #40	; 0x28
   27c70:	4085      	lsls	r5, r0
   27c72:	2700      	movs	r7, #0
   27c74:	e72e      	b.n	27ad4 <__aeabi_dadd+0xdc>
   27c76:	0038      	movs	r0, r7
   27c78:	f001 fcb8 	bl	295ec <__clzsi2>
   27c7c:	3020      	adds	r0, #32
   27c7e:	e71d      	b.n	27abc <__aeabi_dadd+0xc4>
   27c80:	430a      	orrs	r2, r1
   27c82:	1e51      	subs	r1, r2, #1
   27c84:	418a      	sbcs	r2, r1
   27c86:	2100      	movs	r1, #0
   27c88:	e707      	b.n	27a9a <__aeabi_dadd+0xa2>
   27c8a:	2b00      	cmp	r3, #0
   27c8c:	d000      	beq.n	27c90 <__aeabi_dadd+0x298>
   27c8e:	e0f3      	b.n	27e78 <__aeabi_dadd+0x480>
   27c90:	1c70      	adds	r0, r6, #1
   27c92:	0543      	lsls	r3, r0, #21
   27c94:	0d5b      	lsrs	r3, r3, #21
   27c96:	2b01      	cmp	r3, #1
   27c98:	dc00      	bgt.n	27c9c <__aeabi_dadd+0x2a4>
   27c9a:	e0ad      	b.n	27df8 <__aeabi_dadd+0x400>
   27c9c:	4b36      	ldr	r3, [pc, #216]	; (27d78 <__aeabi_dadd+0x380>)
   27c9e:	4298      	cmp	r0, r3
   27ca0:	d100      	bne.n	27ca4 <__aeabi_dadd+0x2ac>
   27ca2:	e0d1      	b.n	27e48 <__aeabi_dadd+0x450>
   27ca4:	18ba      	adds	r2, r7, r2
   27ca6:	42ba      	cmp	r2, r7
   27ca8:	41bf      	sbcs	r7, r7
   27caa:	1864      	adds	r4, r4, r1
   27cac:	427f      	negs	r7, r7
   27cae:	19e4      	adds	r4, r4, r7
   27cb0:	07e7      	lsls	r7, r4, #31
   27cb2:	0852      	lsrs	r2, r2, #1
   27cb4:	4317      	orrs	r7, r2
   27cb6:	0864      	lsrs	r4, r4, #1
   27cb8:	0006      	movs	r6, r0
   27cba:	e721      	b.n	27b00 <__aeabi_dadd+0x108>
   27cbc:	482e      	ldr	r0, [pc, #184]	; (27d78 <__aeabi_dadd+0x380>)
   27cbe:	4285      	cmp	r5, r0
   27cc0:	d100      	bne.n	27cc4 <__aeabi_dadd+0x2cc>
   27cc2:	e093      	b.n	27dec <__aeabi_dadd+0x3f4>
   27cc4:	001d      	movs	r5, r3
   27cc6:	e6d0      	b.n	27a6a <__aeabi_dadd+0x72>
   27cc8:	0029      	movs	r1, r5
   27cca:	3e1f      	subs	r6, #31
   27ccc:	40f1      	lsrs	r1, r6
   27cce:	2b20      	cmp	r3, #32
   27cd0:	d100      	bne.n	27cd4 <__aeabi_dadd+0x2dc>
   27cd2:	e08d      	b.n	27df0 <__aeabi_dadd+0x3f8>
   27cd4:	2240      	movs	r2, #64	; 0x40
   27cd6:	1ad3      	subs	r3, r2, r3
   27cd8:	409d      	lsls	r5, r3
   27cda:	432f      	orrs	r7, r5
   27cdc:	1e7d      	subs	r5, r7, #1
   27cde:	41af      	sbcs	r7, r5
   27ce0:	2400      	movs	r4, #0
   27ce2:	430f      	orrs	r7, r1
   27ce4:	2600      	movs	r6, #0
   27ce6:	e744      	b.n	27b72 <__aeabi_dadd+0x17a>
   27ce8:	002b      	movs	r3, r5
   27cea:	0008      	movs	r0, r1
   27cec:	3b20      	subs	r3, #32
   27cee:	40d8      	lsrs	r0, r3
   27cf0:	0003      	movs	r3, r0
   27cf2:	2d20      	cmp	r5, #32
   27cf4:	d100      	bne.n	27cf8 <__aeabi_dadd+0x300>
   27cf6:	e07d      	b.n	27df4 <__aeabi_dadd+0x3fc>
   27cf8:	2040      	movs	r0, #64	; 0x40
   27cfa:	1b45      	subs	r5, r0, r5
   27cfc:	40a9      	lsls	r1, r5
   27cfe:	430a      	orrs	r2, r1
   27d00:	1e51      	subs	r1, r2, #1
   27d02:	418a      	sbcs	r2, r1
   27d04:	2100      	movs	r1, #0
   27d06:	431a      	orrs	r2, r3
   27d08:	e6c7      	b.n	27a9a <__aeabi_dadd+0xa2>
   27d0a:	2e00      	cmp	r6, #0
   27d0c:	d050      	beq.n	27db0 <__aeabi_dadd+0x3b8>
   27d0e:	4e1a      	ldr	r6, [pc, #104]	; (27d78 <__aeabi_dadd+0x380>)
   27d10:	42b0      	cmp	r0, r6
   27d12:	d057      	beq.n	27dc4 <__aeabi_dadd+0x3cc>
   27d14:	2680      	movs	r6, #128	; 0x80
   27d16:	426b      	negs	r3, r5
   27d18:	4699      	mov	r9, r3
   27d1a:	0436      	lsls	r6, r6, #16
   27d1c:	4334      	orrs	r4, r6
   27d1e:	464b      	mov	r3, r9
   27d20:	2b38      	cmp	r3, #56	; 0x38
   27d22:	dd00      	ble.n	27d26 <__aeabi_dadd+0x32e>
   27d24:	e0d6      	b.n	27ed4 <__aeabi_dadd+0x4dc>
   27d26:	2b1f      	cmp	r3, #31
   27d28:	dd00      	ble.n	27d2c <__aeabi_dadd+0x334>
   27d2a:	e135      	b.n	27f98 <__aeabi_dadd+0x5a0>
   27d2c:	2620      	movs	r6, #32
   27d2e:	1af5      	subs	r5, r6, r3
   27d30:	0026      	movs	r6, r4
   27d32:	40ae      	lsls	r6, r5
   27d34:	46b2      	mov	sl, r6
   27d36:	003e      	movs	r6, r7
   27d38:	40de      	lsrs	r6, r3
   27d3a:	46ac      	mov	ip, r5
   27d3c:	0035      	movs	r5, r6
   27d3e:	4656      	mov	r6, sl
   27d40:	432e      	orrs	r6, r5
   27d42:	4665      	mov	r5, ip
   27d44:	40af      	lsls	r7, r5
   27d46:	1e7d      	subs	r5, r7, #1
   27d48:	41af      	sbcs	r7, r5
   27d4a:	40dc      	lsrs	r4, r3
   27d4c:	4337      	orrs	r7, r6
   27d4e:	1bd7      	subs	r7, r2, r7
   27d50:	42ba      	cmp	r2, r7
   27d52:	4192      	sbcs	r2, r2
   27d54:	1b0c      	subs	r4, r1, r4
   27d56:	4252      	negs	r2, r2
   27d58:	1aa4      	subs	r4, r4, r2
   27d5a:	0006      	movs	r6, r0
   27d5c:	46d8      	mov	r8, fp
   27d5e:	e6a3      	b.n	27aa8 <__aeabi_dadd+0xb0>
   27d60:	4664      	mov	r4, ip
   27d62:	4667      	mov	r7, ip
   27d64:	432c      	orrs	r4, r5
   27d66:	d000      	beq.n	27d6a <__aeabi_dadd+0x372>
   27d68:	e6a2      	b.n	27ab0 <__aeabi_dadd+0xb8>
   27d6a:	2500      	movs	r5, #0
   27d6c:	2600      	movs	r6, #0
   27d6e:	2700      	movs	r7, #0
   27d70:	e706      	b.n	27b80 <__aeabi_dadd+0x188>
   27d72:	001e      	movs	r6, r3
   27d74:	e6c4      	b.n	27b00 <__aeabi_dadd+0x108>
   27d76:	46c0      	nop			; (mov r8, r8)
   27d78:	000007ff 	.word	0x000007ff
   27d7c:	ff7fffff 	.word	0xff7fffff
   27d80:	800fffff 	.word	0x800fffff
   27d84:	2b1f      	cmp	r3, #31
   27d86:	dc63      	bgt.n	27e50 <__aeabi_dadd+0x458>
   27d88:	2020      	movs	r0, #32
   27d8a:	1ac3      	subs	r3, r0, r3
   27d8c:	0008      	movs	r0, r1
   27d8e:	4098      	lsls	r0, r3
   27d90:	469c      	mov	ip, r3
   27d92:	4683      	mov	fp, r0
   27d94:	4653      	mov	r3, sl
   27d96:	0010      	movs	r0, r2
   27d98:	40d8      	lsrs	r0, r3
   27d9a:	0003      	movs	r3, r0
   27d9c:	4658      	mov	r0, fp
   27d9e:	4318      	orrs	r0, r3
   27da0:	4663      	mov	r3, ip
   27da2:	409a      	lsls	r2, r3
   27da4:	1e53      	subs	r3, r2, #1
   27da6:	419a      	sbcs	r2, r3
   27da8:	4653      	mov	r3, sl
   27daa:	4302      	orrs	r2, r0
   27dac:	40d9      	lsrs	r1, r3
   27dae:	e703      	b.n	27bb8 <__aeabi_dadd+0x1c0>
   27db0:	0026      	movs	r6, r4
   27db2:	433e      	orrs	r6, r7
   27db4:	d006      	beq.n	27dc4 <__aeabi_dadd+0x3cc>
   27db6:	43eb      	mvns	r3, r5
   27db8:	4699      	mov	r9, r3
   27dba:	2b00      	cmp	r3, #0
   27dbc:	d0c7      	beq.n	27d4e <__aeabi_dadd+0x356>
   27dbe:	4e94      	ldr	r6, [pc, #592]	; (28010 <__aeabi_dadd+0x618>)
   27dc0:	42b0      	cmp	r0, r6
   27dc2:	d1ac      	bne.n	27d1e <__aeabi_dadd+0x326>
   27dc4:	000c      	movs	r4, r1
   27dc6:	0017      	movs	r7, r2
   27dc8:	0006      	movs	r6, r0
   27dca:	46d8      	mov	r8, fp
   27dcc:	e698      	b.n	27b00 <__aeabi_dadd+0x108>
   27dce:	4b90      	ldr	r3, [pc, #576]	; (28010 <__aeabi_dadd+0x618>)
   27dd0:	459a      	cmp	sl, r3
   27dd2:	d00b      	beq.n	27dec <__aeabi_dadd+0x3f4>
   27dd4:	4682      	mov	sl, r0
   27dd6:	e6e7      	b.n	27ba8 <__aeabi_dadd+0x1b0>
   27dd8:	2800      	cmp	r0, #0
   27dda:	d000      	beq.n	27dde <__aeabi_dadd+0x3e6>
   27ddc:	e09e      	b.n	27f1c <__aeabi_dadd+0x524>
   27dde:	0018      	movs	r0, r3
   27de0:	4310      	orrs	r0, r2
   27de2:	d100      	bne.n	27de6 <__aeabi_dadd+0x3ee>
   27de4:	e0e9      	b.n	27fba <__aeabi_dadd+0x5c2>
   27de6:	001c      	movs	r4, r3
   27de8:	0017      	movs	r7, r2
   27dea:	46d8      	mov	r8, fp
   27dec:	4e88      	ldr	r6, [pc, #544]	; (28010 <__aeabi_dadd+0x618>)
   27dee:	e687      	b.n	27b00 <__aeabi_dadd+0x108>
   27df0:	2500      	movs	r5, #0
   27df2:	e772      	b.n	27cda <__aeabi_dadd+0x2e2>
   27df4:	2100      	movs	r1, #0
   27df6:	e782      	b.n	27cfe <__aeabi_dadd+0x306>
   27df8:	0023      	movs	r3, r4
   27dfa:	433b      	orrs	r3, r7
   27dfc:	2e00      	cmp	r6, #0
   27dfe:	d000      	beq.n	27e02 <__aeabi_dadd+0x40a>
   27e00:	e0ab      	b.n	27f5a <__aeabi_dadd+0x562>
   27e02:	2b00      	cmp	r3, #0
   27e04:	d100      	bne.n	27e08 <__aeabi_dadd+0x410>
   27e06:	e0e7      	b.n	27fd8 <__aeabi_dadd+0x5e0>
   27e08:	000b      	movs	r3, r1
   27e0a:	4313      	orrs	r3, r2
   27e0c:	d100      	bne.n	27e10 <__aeabi_dadd+0x418>
   27e0e:	e677      	b.n	27b00 <__aeabi_dadd+0x108>
   27e10:	18ba      	adds	r2, r7, r2
   27e12:	42ba      	cmp	r2, r7
   27e14:	41bf      	sbcs	r7, r7
   27e16:	1864      	adds	r4, r4, r1
   27e18:	427f      	negs	r7, r7
   27e1a:	19e4      	adds	r4, r4, r7
   27e1c:	0223      	lsls	r3, r4, #8
   27e1e:	d400      	bmi.n	27e22 <__aeabi_dadd+0x42a>
   27e20:	e0f2      	b.n	28008 <__aeabi_dadd+0x610>
   27e22:	4b7c      	ldr	r3, [pc, #496]	; (28014 <__aeabi_dadd+0x61c>)
   27e24:	0017      	movs	r7, r2
   27e26:	401c      	ands	r4, r3
   27e28:	0006      	movs	r6, r0
   27e2a:	e669      	b.n	27b00 <__aeabi_dadd+0x108>
   27e2c:	0020      	movs	r0, r4
   27e2e:	4338      	orrs	r0, r7
   27e30:	2e00      	cmp	r6, #0
   27e32:	d1d1      	bne.n	27dd8 <__aeabi_dadd+0x3e0>
   27e34:	2800      	cmp	r0, #0
   27e36:	d15b      	bne.n	27ef0 <__aeabi_dadd+0x4f8>
   27e38:	001c      	movs	r4, r3
   27e3a:	4314      	orrs	r4, r2
   27e3c:	d100      	bne.n	27e40 <__aeabi_dadd+0x448>
   27e3e:	e0a8      	b.n	27f92 <__aeabi_dadd+0x59a>
   27e40:	001c      	movs	r4, r3
   27e42:	0017      	movs	r7, r2
   27e44:	46d8      	mov	r8, fp
   27e46:	e65b      	b.n	27b00 <__aeabi_dadd+0x108>
   27e48:	0006      	movs	r6, r0
   27e4a:	2400      	movs	r4, #0
   27e4c:	2700      	movs	r7, #0
   27e4e:	e697      	b.n	27b80 <__aeabi_dadd+0x188>
   27e50:	4650      	mov	r0, sl
   27e52:	000b      	movs	r3, r1
   27e54:	3820      	subs	r0, #32
   27e56:	40c3      	lsrs	r3, r0
   27e58:	4699      	mov	r9, r3
   27e5a:	4653      	mov	r3, sl
   27e5c:	2b20      	cmp	r3, #32
   27e5e:	d100      	bne.n	27e62 <__aeabi_dadd+0x46a>
   27e60:	e095      	b.n	27f8e <__aeabi_dadd+0x596>
   27e62:	2340      	movs	r3, #64	; 0x40
   27e64:	4650      	mov	r0, sl
   27e66:	1a1b      	subs	r3, r3, r0
   27e68:	4099      	lsls	r1, r3
   27e6a:	430a      	orrs	r2, r1
   27e6c:	1e51      	subs	r1, r2, #1
   27e6e:	418a      	sbcs	r2, r1
   27e70:	464b      	mov	r3, r9
   27e72:	2100      	movs	r1, #0
   27e74:	431a      	orrs	r2, r3
   27e76:	e69f      	b.n	27bb8 <__aeabi_dadd+0x1c0>
   27e78:	2e00      	cmp	r6, #0
   27e7a:	d130      	bne.n	27ede <__aeabi_dadd+0x4e6>
   27e7c:	0026      	movs	r6, r4
   27e7e:	433e      	orrs	r6, r7
   27e80:	d067      	beq.n	27f52 <__aeabi_dadd+0x55a>
   27e82:	43db      	mvns	r3, r3
   27e84:	469a      	mov	sl, r3
   27e86:	2b00      	cmp	r3, #0
   27e88:	d01c      	beq.n	27ec4 <__aeabi_dadd+0x4cc>
   27e8a:	4e61      	ldr	r6, [pc, #388]	; (28010 <__aeabi_dadd+0x618>)
   27e8c:	42b0      	cmp	r0, r6
   27e8e:	d060      	beq.n	27f52 <__aeabi_dadd+0x55a>
   27e90:	4653      	mov	r3, sl
   27e92:	2b38      	cmp	r3, #56	; 0x38
   27e94:	dd00      	ble.n	27e98 <__aeabi_dadd+0x4a0>
   27e96:	e096      	b.n	27fc6 <__aeabi_dadd+0x5ce>
   27e98:	2b1f      	cmp	r3, #31
   27e9a:	dd00      	ble.n	27e9e <__aeabi_dadd+0x4a6>
   27e9c:	e09f      	b.n	27fde <__aeabi_dadd+0x5e6>
   27e9e:	2620      	movs	r6, #32
   27ea0:	1af3      	subs	r3, r6, r3
   27ea2:	0026      	movs	r6, r4
   27ea4:	409e      	lsls	r6, r3
   27ea6:	469c      	mov	ip, r3
   27ea8:	46b3      	mov	fp, r6
   27eaa:	4653      	mov	r3, sl
   27eac:	003e      	movs	r6, r7
   27eae:	40de      	lsrs	r6, r3
   27eb0:	0033      	movs	r3, r6
   27eb2:	465e      	mov	r6, fp
   27eb4:	431e      	orrs	r6, r3
   27eb6:	4663      	mov	r3, ip
   27eb8:	409f      	lsls	r7, r3
   27eba:	1e7b      	subs	r3, r7, #1
   27ebc:	419f      	sbcs	r7, r3
   27ebe:	4653      	mov	r3, sl
   27ec0:	40dc      	lsrs	r4, r3
   27ec2:	4337      	orrs	r7, r6
   27ec4:	18bf      	adds	r7, r7, r2
   27ec6:	4297      	cmp	r7, r2
   27ec8:	4192      	sbcs	r2, r2
   27eca:	1864      	adds	r4, r4, r1
   27ecc:	4252      	negs	r2, r2
   27ece:	18a4      	adds	r4, r4, r2
   27ed0:	0006      	movs	r6, r0
   27ed2:	e678      	b.n	27bc6 <__aeabi_dadd+0x1ce>
   27ed4:	4327      	orrs	r7, r4
   27ed6:	1e7c      	subs	r4, r7, #1
   27ed8:	41a7      	sbcs	r7, r4
   27eda:	2400      	movs	r4, #0
   27edc:	e737      	b.n	27d4e <__aeabi_dadd+0x356>
   27ede:	4e4c      	ldr	r6, [pc, #304]	; (28010 <__aeabi_dadd+0x618>)
   27ee0:	42b0      	cmp	r0, r6
   27ee2:	d036      	beq.n	27f52 <__aeabi_dadd+0x55a>
   27ee4:	2680      	movs	r6, #128	; 0x80
   27ee6:	425b      	negs	r3, r3
   27ee8:	0436      	lsls	r6, r6, #16
   27eea:	469a      	mov	sl, r3
   27eec:	4334      	orrs	r4, r6
   27eee:	e7cf      	b.n	27e90 <__aeabi_dadd+0x498>
   27ef0:	0018      	movs	r0, r3
   27ef2:	4310      	orrs	r0, r2
   27ef4:	d100      	bne.n	27ef8 <__aeabi_dadd+0x500>
   27ef6:	e603      	b.n	27b00 <__aeabi_dadd+0x108>
   27ef8:	1ab8      	subs	r0, r7, r2
   27efa:	4684      	mov	ip, r0
   27efc:	4567      	cmp	r7, ip
   27efe:	41ad      	sbcs	r5, r5
   27f00:	1ae0      	subs	r0, r4, r3
   27f02:	426d      	negs	r5, r5
   27f04:	1b40      	subs	r0, r0, r5
   27f06:	0205      	lsls	r5, r0, #8
   27f08:	d400      	bmi.n	27f0c <__aeabi_dadd+0x514>
   27f0a:	e62c      	b.n	27b66 <__aeabi_dadd+0x16e>
   27f0c:	1bd7      	subs	r7, r2, r7
   27f0e:	42ba      	cmp	r2, r7
   27f10:	4192      	sbcs	r2, r2
   27f12:	1b1c      	subs	r4, r3, r4
   27f14:	4252      	negs	r2, r2
   27f16:	1aa4      	subs	r4, r4, r2
   27f18:	46d8      	mov	r8, fp
   27f1a:	e5f1      	b.n	27b00 <__aeabi_dadd+0x108>
   27f1c:	0018      	movs	r0, r3
   27f1e:	4310      	orrs	r0, r2
   27f20:	d100      	bne.n	27f24 <__aeabi_dadd+0x52c>
   27f22:	e763      	b.n	27dec <__aeabi_dadd+0x3f4>
   27f24:	08f8      	lsrs	r0, r7, #3
   27f26:	0767      	lsls	r7, r4, #29
   27f28:	4307      	orrs	r7, r0
   27f2a:	2080      	movs	r0, #128	; 0x80
   27f2c:	08e4      	lsrs	r4, r4, #3
   27f2e:	0300      	lsls	r0, r0, #12
   27f30:	4204      	tst	r4, r0
   27f32:	d008      	beq.n	27f46 <__aeabi_dadd+0x54e>
   27f34:	08dd      	lsrs	r5, r3, #3
   27f36:	4205      	tst	r5, r0
   27f38:	d105      	bne.n	27f46 <__aeabi_dadd+0x54e>
   27f3a:	08d2      	lsrs	r2, r2, #3
   27f3c:	0759      	lsls	r1, r3, #29
   27f3e:	4311      	orrs	r1, r2
   27f40:	000f      	movs	r7, r1
   27f42:	002c      	movs	r4, r5
   27f44:	46d8      	mov	r8, fp
   27f46:	0f7b      	lsrs	r3, r7, #29
   27f48:	00e4      	lsls	r4, r4, #3
   27f4a:	431c      	orrs	r4, r3
   27f4c:	00ff      	lsls	r7, r7, #3
   27f4e:	4e30      	ldr	r6, [pc, #192]	; (28010 <__aeabi_dadd+0x618>)
   27f50:	e5d6      	b.n	27b00 <__aeabi_dadd+0x108>
   27f52:	000c      	movs	r4, r1
   27f54:	0017      	movs	r7, r2
   27f56:	0006      	movs	r6, r0
   27f58:	e5d2      	b.n	27b00 <__aeabi_dadd+0x108>
   27f5a:	2b00      	cmp	r3, #0
   27f5c:	d038      	beq.n	27fd0 <__aeabi_dadd+0x5d8>
   27f5e:	000b      	movs	r3, r1
   27f60:	4313      	orrs	r3, r2
   27f62:	d100      	bne.n	27f66 <__aeabi_dadd+0x56e>
   27f64:	e742      	b.n	27dec <__aeabi_dadd+0x3f4>
   27f66:	08f8      	lsrs	r0, r7, #3
   27f68:	0767      	lsls	r7, r4, #29
   27f6a:	4307      	orrs	r7, r0
   27f6c:	2080      	movs	r0, #128	; 0x80
   27f6e:	08e4      	lsrs	r4, r4, #3
   27f70:	0300      	lsls	r0, r0, #12
   27f72:	4204      	tst	r4, r0
   27f74:	d0e7      	beq.n	27f46 <__aeabi_dadd+0x54e>
   27f76:	08cb      	lsrs	r3, r1, #3
   27f78:	4203      	tst	r3, r0
   27f7a:	d1e4      	bne.n	27f46 <__aeabi_dadd+0x54e>
   27f7c:	08d2      	lsrs	r2, r2, #3
   27f7e:	0749      	lsls	r1, r1, #29
   27f80:	4311      	orrs	r1, r2
   27f82:	000f      	movs	r7, r1
   27f84:	001c      	movs	r4, r3
   27f86:	e7de      	b.n	27f46 <__aeabi_dadd+0x54e>
   27f88:	2700      	movs	r7, #0
   27f8a:	2400      	movs	r4, #0
   27f8c:	e5d5      	b.n	27b3a <__aeabi_dadd+0x142>
   27f8e:	2100      	movs	r1, #0
   27f90:	e76b      	b.n	27e6a <__aeabi_dadd+0x472>
   27f92:	2500      	movs	r5, #0
   27f94:	2700      	movs	r7, #0
   27f96:	e5f3      	b.n	27b80 <__aeabi_dadd+0x188>
   27f98:	464e      	mov	r6, r9
   27f9a:	0025      	movs	r5, r4
   27f9c:	3e20      	subs	r6, #32
   27f9e:	40f5      	lsrs	r5, r6
   27fa0:	464b      	mov	r3, r9
   27fa2:	002e      	movs	r6, r5
   27fa4:	2b20      	cmp	r3, #32
   27fa6:	d02d      	beq.n	28004 <__aeabi_dadd+0x60c>
   27fa8:	2540      	movs	r5, #64	; 0x40
   27faa:	1aed      	subs	r5, r5, r3
   27fac:	40ac      	lsls	r4, r5
   27fae:	4327      	orrs	r7, r4
   27fb0:	1e7c      	subs	r4, r7, #1
   27fb2:	41a7      	sbcs	r7, r4
   27fb4:	2400      	movs	r4, #0
   27fb6:	4337      	orrs	r7, r6
   27fb8:	e6c9      	b.n	27d4e <__aeabi_dadd+0x356>
   27fba:	2480      	movs	r4, #128	; 0x80
   27fbc:	2500      	movs	r5, #0
   27fbe:	0324      	lsls	r4, r4, #12
   27fc0:	4e13      	ldr	r6, [pc, #76]	; (28010 <__aeabi_dadd+0x618>)
   27fc2:	2700      	movs	r7, #0
   27fc4:	e5dc      	b.n	27b80 <__aeabi_dadd+0x188>
   27fc6:	4327      	orrs	r7, r4
   27fc8:	1e7c      	subs	r4, r7, #1
   27fca:	41a7      	sbcs	r7, r4
   27fcc:	2400      	movs	r4, #0
   27fce:	e779      	b.n	27ec4 <__aeabi_dadd+0x4cc>
   27fd0:	000c      	movs	r4, r1
   27fd2:	0017      	movs	r7, r2
   27fd4:	4e0e      	ldr	r6, [pc, #56]	; (28010 <__aeabi_dadd+0x618>)
   27fd6:	e593      	b.n	27b00 <__aeabi_dadd+0x108>
   27fd8:	000c      	movs	r4, r1
   27fda:	0017      	movs	r7, r2
   27fdc:	e590      	b.n	27b00 <__aeabi_dadd+0x108>
   27fde:	4656      	mov	r6, sl
   27fe0:	0023      	movs	r3, r4
   27fe2:	3e20      	subs	r6, #32
   27fe4:	40f3      	lsrs	r3, r6
   27fe6:	4699      	mov	r9, r3
   27fe8:	4653      	mov	r3, sl
   27fea:	2b20      	cmp	r3, #32
   27fec:	d00e      	beq.n	2800c <__aeabi_dadd+0x614>
   27fee:	2340      	movs	r3, #64	; 0x40
   27ff0:	4656      	mov	r6, sl
   27ff2:	1b9b      	subs	r3, r3, r6
   27ff4:	409c      	lsls	r4, r3
   27ff6:	4327      	orrs	r7, r4
   27ff8:	1e7c      	subs	r4, r7, #1
   27ffa:	41a7      	sbcs	r7, r4
   27ffc:	464b      	mov	r3, r9
   27ffe:	2400      	movs	r4, #0
   28000:	431f      	orrs	r7, r3
   28002:	e75f      	b.n	27ec4 <__aeabi_dadd+0x4cc>
   28004:	2400      	movs	r4, #0
   28006:	e7d2      	b.n	27fae <__aeabi_dadd+0x5b6>
   28008:	0017      	movs	r7, r2
   2800a:	e5b2      	b.n	27b72 <__aeabi_dadd+0x17a>
   2800c:	2400      	movs	r4, #0
   2800e:	e7f2      	b.n	27ff6 <__aeabi_dadd+0x5fe>
   28010:	000007ff 	.word	0x000007ff
   28014:	ff7fffff 	.word	0xff7fffff

00028018 <__aeabi_ddiv>:
   28018:	b5f0      	push	{r4, r5, r6, r7, lr}
   2801a:	4657      	mov	r7, sl
   2801c:	4645      	mov	r5, r8
   2801e:	46de      	mov	lr, fp
   28020:	464e      	mov	r6, r9
   28022:	b5e0      	push	{r5, r6, r7, lr}
   28024:	004c      	lsls	r4, r1, #1
   28026:	030e      	lsls	r6, r1, #12
   28028:	b087      	sub	sp, #28
   2802a:	4683      	mov	fp, r0
   2802c:	4692      	mov	sl, r2
   2802e:	001d      	movs	r5, r3
   28030:	4680      	mov	r8, r0
   28032:	0b36      	lsrs	r6, r6, #12
   28034:	0d64      	lsrs	r4, r4, #21
   28036:	0fcf      	lsrs	r7, r1, #31
   28038:	2c00      	cmp	r4, #0
   2803a:	d04f      	beq.n	280dc <__aeabi_ddiv+0xc4>
   2803c:	4b6f      	ldr	r3, [pc, #444]	; (281fc <__aeabi_ddiv+0x1e4>)
   2803e:	429c      	cmp	r4, r3
   28040:	d035      	beq.n	280ae <__aeabi_ddiv+0x96>
   28042:	2380      	movs	r3, #128	; 0x80
   28044:	0f42      	lsrs	r2, r0, #29
   28046:	041b      	lsls	r3, r3, #16
   28048:	00f6      	lsls	r6, r6, #3
   2804a:	4313      	orrs	r3, r2
   2804c:	4333      	orrs	r3, r6
   2804e:	4699      	mov	r9, r3
   28050:	00c3      	lsls	r3, r0, #3
   28052:	4698      	mov	r8, r3
   28054:	4b6a      	ldr	r3, [pc, #424]	; (28200 <__aeabi_ddiv+0x1e8>)
   28056:	2600      	movs	r6, #0
   28058:	469c      	mov	ip, r3
   2805a:	2300      	movs	r3, #0
   2805c:	4464      	add	r4, ip
   2805e:	9303      	str	r3, [sp, #12]
   28060:	032b      	lsls	r3, r5, #12
   28062:	0b1b      	lsrs	r3, r3, #12
   28064:	469b      	mov	fp, r3
   28066:	006b      	lsls	r3, r5, #1
   28068:	0fed      	lsrs	r5, r5, #31
   2806a:	4650      	mov	r0, sl
   2806c:	0d5b      	lsrs	r3, r3, #21
   2806e:	9501      	str	r5, [sp, #4]
   28070:	d05e      	beq.n	28130 <__aeabi_ddiv+0x118>
   28072:	4a62      	ldr	r2, [pc, #392]	; (281fc <__aeabi_ddiv+0x1e4>)
   28074:	4293      	cmp	r3, r2
   28076:	d053      	beq.n	28120 <__aeabi_ddiv+0x108>
   28078:	465a      	mov	r2, fp
   2807a:	00d1      	lsls	r1, r2, #3
   2807c:	2280      	movs	r2, #128	; 0x80
   2807e:	0f40      	lsrs	r0, r0, #29
   28080:	0412      	lsls	r2, r2, #16
   28082:	4302      	orrs	r2, r0
   28084:	430a      	orrs	r2, r1
   28086:	4693      	mov	fp, r2
   28088:	4652      	mov	r2, sl
   2808a:	00d1      	lsls	r1, r2, #3
   2808c:	4a5c      	ldr	r2, [pc, #368]	; (28200 <__aeabi_ddiv+0x1e8>)
   2808e:	4694      	mov	ip, r2
   28090:	2200      	movs	r2, #0
   28092:	4463      	add	r3, ip
   28094:	0038      	movs	r0, r7
   28096:	4068      	eors	r0, r5
   28098:	4684      	mov	ip, r0
   2809a:	9002      	str	r0, [sp, #8]
   2809c:	1ae4      	subs	r4, r4, r3
   2809e:	4316      	orrs	r6, r2
   280a0:	2e0f      	cmp	r6, #15
   280a2:	d900      	bls.n	280a6 <__aeabi_ddiv+0x8e>
   280a4:	e0b4      	b.n	28210 <__aeabi_ddiv+0x1f8>
   280a6:	4b57      	ldr	r3, [pc, #348]	; (28204 <__aeabi_ddiv+0x1ec>)
   280a8:	00b6      	lsls	r6, r6, #2
   280aa:	599b      	ldr	r3, [r3, r6]
   280ac:	469f      	mov	pc, r3
   280ae:	0003      	movs	r3, r0
   280b0:	4333      	orrs	r3, r6
   280b2:	4699      	mov	r9, r3
   280b4:	d16c      	bne.n	28190 <__aeabi_ddiv+0x178>
   280b6:	2300      	movs	r3, #0
   280b8:	4698      	mov	r8, r3
   280ba:	3302      	adds	r3, #2
   280bc:	2608      	movs	r6, #8
   280be:	9303      	str	r3, [sp, #12]
   280c0:	e7ce      	b.n	28060 <__aeabi_ddiv+0x48>
   280c2:	46cb      	mov	fp, r9
   280c4:	4641      	mov	r1, r8
   280c6:	9a03      	ldr	r2, [sp, #12]
   280c8:	9701      	str	r7, [sp, #4]
   280ca:	2a02      	cmp	r2, #2
   280cc:	d165      	bne.n	2819a <__aeabi_ddiv+0x182>
   280ce:	9b01      	ldr	r3, [sp, #4]
   280d0:	4c4a      	ldr	r4, [pc, #296]	; (281fc <__aeabi_ddiv+0x1e4>)
   280d2:	469c      	mov	ip, r3
   280d4:	2300      	movs	r3, #0
   280d6:	2200      	movs	r2, #0
   280d8:	4698      	mov	r8, r3
   280da:	e06b      	b.n	281b4 <__aeabi_ddiv+0x19c>
   280dc:	0003      	movs	r3, r0
   280de:	4333      	orrs	r3, r6
   280e0:	4699      	mov	r9, r3
   280e2:	d04e      	beq.n	28182 <__aeabi_ddiv+0x16a>
   280e4:	2e00      	cmp	r6, #0
   280e6:	d100      	bne.n	280ea <__aeabi_ddiv+0xd2>
   280e8:	e1bc      	b.n	28464 <__aeabi_ddiv+0x44c>
   280ea:	0030      	movs	r0, r6
   280ec:	f001 fa7e 	bl	295ec <__clzsi2>
   280f0:	0003      	movs	r3, r0
   280f2:	3b0b      	subs	r3, #11
   280f4:	2b1c      	cmp	r3, #28
   280f6:	dd00      	ble.n	280fa <__aeabi_ddiv+0xe2>
   280f8:	e1ac      	b.n	28454 <__aeabi_ddiv+0x43c>
   280fa:	221d      	movs	r2, #29
   280fc:	1ad3      	subs	r3, r2, r3
   280fe:	465a      	mov	r2, fp
   28100:	0001      	movs	r1, r0
   28102:	40da      	lsrs	r2, r3
   28104:	3908      	subs	r1, #8
   28106:	408e      	lsls	r6, r1
   28108:	0013      	movs	r3, r2
   2810a:	4333      	orrs	r3, r6
   2810c:	4699      	mov	r9, r3
   2810e:	465b      	mov	r3, fp
   28110:	408b      	lsls	r3, r1
   28112:	4698      	mov	r8, r3
   28114:	2300      	movs	r3, #0
   28116:	4c3c      	ldr	r4, [pc, #240]	; (28208 <__aeabi_ddiv+0x1f0>)
   28118:	2600      	movs	r6, #0
   2811a:	1a24      	subs	r4, r4, r0
   2811c:	9303      	str	r3, [sp, #12]
   2811e:	e79f      	b.n	28060 <__aeabi_ddiv+0x48>
   28120:	4651      	mov	r1, sl
   28122:	465a      	mov	r2, fp
   28124:	4311      	orrs	r1, r2
   28126:	d129      	bne.n	2817c <__aeabi_ddiv+0x164>
   28128:	2200      	movs	r2, #0
   2812a:	4693      	mov	fp, r2
   2812c:	3202      	adds	r2, #2
   2812e:	e7b1      	b.n	28094 <__aeabi_ddiv+0x7c>
   28130:	4659      	mov	r1, fp
   28132:	4301      	orrs	r1, r0
   28134:	d01e      	beq.n	28174 <__aeabi_ddiv+0x15c>
   28136:	465b      	mov	r3, fp
   28138:	2b00      	cmp	r3, #0
   2813a:	d100      	bne.n	2813e <__aeabi_ddiv+0x126>
   2813c:	e19e      	b.n	2847c <__aeabi_ddiv+0x464>
   2813e:	4658      	mov	r0, fp
   28140:	f001 fa54 	bl	295ec <__clzsi2>
   28144:	0003      	movs	r3, r0
   28146:	3b0b      	subs	r3, #11
   28148:	2b1c      	cmp	r3, #28
   2814a:	dd00      	ble.n	2814e <__aeabi_ddiv+0x136>
   2814c:	e18f      	b.n	2846e <__aeabi_ddiv+0x456>
   2814e:	0002      	movs	r2, r0
   28150:	4659      	mov	r1, fp
   28152:	3a08      	subs	r2, #8
   28154:	4091      	lsls	r1, r2
   28156:	468b      	mov	fp, r1
   28158:	211d      	movs	r1, #29
   2815a:	1acb      	subs	r3, r1, r3
   2815c:	4651      	mov	r1, sl
   2815e:	40d9      	lsrs	r1, r3
   28160:	000b      	movs	r3, r1
   28162:	4659      	mov	r1, fp
   28164:	430b      	orrs	r3, r1
   28166:	4651      	mov	r1, sl
   28168:	469b      	mov	fp, r3
   2816a:	4091      	lsls	r1, r2
   2816c:	4b26      	ldr	r3, [pc, #152]	; (28208 <__aeabi_ddiv+0x1f0>)
   2816e:	2200      	movs	r2, #0
   28170:	1a1b      	subs	r3, r3, r0
   28172:	e78f      	b.n	28094 <__aeabi_ddiv+0x7c>
   28174:	2300      	movs	r3, #0
   28176:	2201      	movs	r2, #1
   28178:	469b      	mov	fp, r3
   2817a:	e78b      	b.n	28094 <__aeabi_ddiv+0x7c>
   2817c:	4651      	mov	r1, sl
   2817e:	2203      	movs	r2, #3
   28180:	e788      	b.n	28094 <__aeabi_ddiv+0x7c>
   28182:	2300      	movs	r3, #0
   28184:	4698      	mov	r8, r3
   28186:	3301      	adds	r3, #1
   28188:	2604      	movs	r6, #4
   2818a:	2400      	movs	r4, #0
   2818c:	9303      	str	r3, [sp, #12]
   2818e:	e767      	b.n	28060 <__aeabi_ddiv+0x48>
   28190:	2303      	movs	r3, #3
   28192:	46b1      	mov	r9, r6
   28194:	9303      	str	r3, [sp, #12]
   28196:	260c      	movs	r6, #12
   28198:	e762      	b.n	28060 <__aeabi_ddiv+0x48>
   2819a:	2a03      	cmp	r2, #3
   2819c:	d100      	bne.n	281a0 <__aeabi_ddiv+0x188>
   2819e:	e25c      	b.n	2865a <__aeabi_ddiv+0x642>
   281a0:	9b01      	ldr	r3, [sp, #4]
   281a2:	2a01      	cmp	r2, #1
   281a4:	d000      	beq.n	281a8 <__aeabi_ddiv+0x190>
   281a6:	e1e4      	b.n	28572 <__aeabi_ddiv+0x55a>
   281a8:	4013      	ands	r3, r2
   281aa:	469c      	mov	ip, r3
   281ac:	2300      	movs	r3, #0
   281ae:	2400      	movs	r4, #0
   281b0:	2200      	movs	r2, #0
   281b2:	4698      	mov	r8, r3
   281b4:	2100      	movs	r1, #0
   281b6:	0312      	lsls	r2, r2, #12
   281b8:	0b13      	lsrs	r3, r2, #12
   281ba:	0d0a      	lsrs	r2, r1, #20
   281bc:	0512      	lsls	r2, r2, #20
   281be:	431a      	orrs	r2, r3
   281c0:	0523      	lsls	r3, r4, #20
   281c2:	4c12      	ldr	r4, [pc, #72]	; (2820c <__aeabi_ddiv+0x1f4>)
   281c4:	4640      	mov	r0, r8
   281c6:	4022      	ands	r2, r4
   281c8:	4313      	orrs	r3, r2
   281ca:	4662      	mov	r2, ip
   281cc:	005b      	lsls	r3, r3, #1
   281ce:	07d2      	lsls	r2, r2, #31
   281d0:	085b      	lsrs	r3, r3, #1
   281d2:	4313      	orrs	r3, r2
   281d4:	0019      	movs	r1, r3
   281d6:	b007      	add	sp, #28
   281d8:	bc3c      	pop	{r2, r3, r4, r5}
   281da:	4690      	mov	r8, r2
   281dc:	4699      	mov	r9, r3
   281de:	46a2      	mov	sl, r4
   281e0:	46ab      	mov	fp, r5
   281e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   281e4:	2300      	movs	r3, #0
   281e6:	2280      	movs	r2, #128	; 0x80
   281e8:	469c      	mov	ip, r3
   281ea:	0312      	lsls	r2, r2, #12
   281ec:	4698      	mov	r8, r3
   281ee:	4c03      	ldr	r4, [pc, #12]	; (281fc <__aeabi_ddiv+0x1e4>)
   281f0:	e7e0      	b.n	281b4 <__aeabi_ddiv+0x19c>
   281f2:	2300      	movs	r3, #0
   281f4:	4c01      	ldr	r4, [pc, #4]	; (281fc <__aeabi_ddiv+0x1e4>)
   281f6:	2200      	movs	r2, #0
   281f8:	4698      	mov	r8, r3
   281fa:	e7db      	b.n	281b4 <__aeabi_ddiv+0x19c>
   281fc:	000007ff 	.word	0x000007ff
   28200:	fffffc01 	.word	0xfffffc01
   28204:	0002b890 	.word	0x0002b890
   28208:	fffffc0d 	.word	0xfffffc0d
   2820c:	800fffff 	.word	0x800fffff
   28210:	45d9      	cmp	r9, fp
   28212:	d900      	bls.n	28216 <__aeabi_ddiv+0x1fe>
   28214:	e139      	b.n	2848a <__aeabi_ddiv+0x472>
   28216:	d100      	bne.n	2821a <__aeabi_ddiv+0x202>
   28218:	e134      	b.n	28484 <__aeabi_ddiv+0x46c>
   2821a:	2300      	movs	r3, #0
   2821c:	4646      	mov	r6, r8
   2821e:	464d      	mov	r5, r9
   28220:	469a      	mov	sl, r3
   28222:	3c01      	subs	r4, #1
   28224:	465b      	mov	r3, fp
   28226:	0e0a      	lsrs	r2, r1, #24
   28228:	021b      	lsls	r3, r3, #8
   2822a:	431a      	orrs	r2, r3
   2822c:	020b      	lsls	r3, r1, #8
   2822e:	0c17      	lsrs	r7, r2, #16
   28230:	9303      	str	r3, [sp, #12]
   28232:	0413      	lsls	r3, r2, #16
   28234:	0c1b      	lsrs	r3, r3, #16
   28236:	0039      	movs	r1, r7
   28238:	0028      	movs	r0, r5
   2823a:	4690      	mov	r8, r2
   2823c:	9301      	str	r3, [sp, #4]
   2823e:	f7fe fe51 	bl	26ee4 <__udivsi3>
   28242:	0002      	movs	r2, r0
   28244:	9b01      	ldr	r3, [sp, #4]
   28246:	4683      	mov	fp, r0
   28248:	435a      	muls	r2, r3
   2824a:	0028      	movs	r0, r5
   2824c:	0039      	movs	r1, r7
   2824e:	4691      	mov	r9, r2
   28250:	f7fe fece 	bl	26ff0 <__aeabi_uidivmod>
   28254:	0c35      	lsrs	r5, r6, #16
   28256:	0409      	lsls	r1, r1, #16
   28258:	430d      	orrs	r5, r1
   2825a:	45a9      	cmp	r9, r5
   2825c:	d90d      	bls.n	2827a <__aeabi_ddiv+0x262>
   2825e:	465b      	mov	r3, fp
   28260:	4445      	add	r5, r8
   28262:	3b01      	subs	r3, #1
   28264:	45a8      	cmp	r8, r5
   28266:	d900      	bls.n	2826a <__aeabi_ddiv+0x252>
   28268:	e13a      	b.n	284e0 <__aeabi_ddiv+0x4c8>
   2826a:	45a9      	cmp	r9, r5
   2826c:	d800      	bhi.n	28270 <__aeabi_ddiv+0x258>
   2826e:	e137      	b.n	284e0 <__aeabi_ddiv+0x4c8>
   28270:	2302      	movs	r3, #2
   28272:	425b      	negs	r3, r3
   28274:	469c      	mov	ip, r3
   28276:	4445      	add	r5, r8
   28278:	44e3      	add	fp, ip
   2827a:	464b      	mov	r3, r9
   2827c:	1aeb      	subs	r3, r5, r3
   2827e:	0039      	movs	r1, r7
   28280:	0018      	movs	r0, r3
   28282:	9304      	str	r3, [sp, #16]
   28284:	f7fe fe2e 	bl	26ee4 <__udivsi3>
   28288:	9b01      	ldr	r3, [sp, #4]
   2828a:	0005      	movs	r5, r0
   2828c:	4343      	muls	r3, r0
   2828e:	0039      	movs	r1, r7
   28290:	9804      	ldr	r0, [sp, #16]
   28292:	4699      	mov	r9, r3
   28294:	f7fe feac 	bl	26ff0 <__aeabi_uidivmod>
   28298:	0433      	lsls	r3, r6, #16
   2829a:	0409      	lsls	r1, r1, #16
   2829c:	0c1b      	lsrs	r3, r3, #16
   2829e:	430b      	orrs	r3, r1
   282a0:	4599      	cmp	r9, r3
   282a2:	d909      	bls.n	282b8 <__aeabi_ddiv+0x2a0>
   282a4:	4443      	add	r3, r8
   282a6:	1e6a      	subs	r2, r5, #1
   282a8:	4598      	cmp	r8, r3
   282aa:	d900      	bls.n	282ae <__aeabi_ddiv+0x296>
   282ac:	e11a      	b.n	284e4 <__aeabi_ddiv+0x4cc>
   282ae:	4599      	cmp	r9, r3
   282b0:	d800      	bhi.n	282b4 <__aeabi_ddiv+0x29c>
   282b2:	e117      	b.n	284e4 <__aeabi_ddiv+0x4cc>
   282b4:	3d02      	subs	r5, #2
   282b6:	4443      	add	r3, r8
   282b8:	464a      	mov	r2, r9
   282ba:	1a9b      	subs	r3, r3, r2
   282bc:	465a      	mov	r2, fp
   282be:	0412      	lsls	r2, r2, #16
   282c0:	432a      	orrs	r2, r5
   282c2:	9903      	ldr	r1, [sp, #12]
   282c4:	4693      	mov	fp, r2
   282c6:	0c10      	lsrs	r0, r2, #16
   282c8:	0c0a      	lsrs	r2, r1, #16
   282ca:	4691      	mov	r9, r2
   282cc:	0409      	lsls	r1, r1, #16
   282ce:	465a      	mov	r2, fp
   282d0:	0c09      	lsrs	r1, r1, #16
   282d2:	464e      	mov	r6, r9
   282d4:	000d      	movs	r5, r1
   282d6:	0412      	lsls	r2, r2, #16
   282d8:	0c12      	lsrs	r2, r2, #16
   282da:	4345      	muls	r5, r0
   282dc:	9105      	str	r1, [sp, #20]
   282de:	4351      	muls	r1, r2
   282e0:	4372      	muls	r2, r6
   282e2:	4370      	muls	r0, r6
   282e4:	1952      	adds	r2, r2, r5
   282e6:	0c0e      	lsrs	r6, r1, #16
   282e8:	18b2      	adds	r2, r6, r2
   282ea:	4295      	cmp	r5, r2
   282ec:	d903      	bls.n	282f6 <__aeabi_ddiv+0x2de>
   282ee:	2580      	movs	r5, #128	; 0x80
   282f0:	026d      	lsls	r5, r5, #9
   282f2:	46ac      	mov	ip, r5
   282f4:	4460      	add	r0, ip
   282f6:	0c15      	lsrs	r5, r2, #16
   282f8:	0409      	lsls	r1, r1, #16
   282fa:	0412      	lsls	r2, r2, #16
   282fc:	0c09      	lsrs	r1, r1, #16
   282fe:	1828      	adds	r0, r5, r0
   28300:	1852      	adds	r2, r2, r1
   28302:	4283      	cmp	r3, r0
   28304:	d200      	bcs.n	28308 <__aeabi_ddiv+0x2f0>
   28306:	e0ce      	b.n	284a6 <__aeabi_ddiv+0x48e>
   28308:	d100      	bne.n	2830c <__aeabi_ddiv+0x2f4>
   2830a:	e0c8      	b.n	2849e <__aeabi_ddiv+0x486>
   2830c:	1a1d      	subs	r5, r3, r0
   2830e:	4653      	mov	r3, sl
   28310:	1a9e      	subs	r6, r3, r2
   28312:	45b2      	cmp	sl, r6
   28314:	4192      	sbcs	r2, r2
   28316:	4252      	negs	r2, r2
   28318:	1aab      	subs	r3, r5, r2
   2831a:	469a      	mov	sl, r3
   2831c:	4598      	cmp	r8, r3
   2831e:	d100      	bne.n	28322 <__aeabi_ddiv+0x30a>
   28320:	e117      	b.n	28552 <__aeabi_ddiv+0x53a>
   28322:	0039      	movs	r1, r7
   28324:	0018      	movs	r0, r3
   28326:	f7fe fddd 	bl	26ee4 <__udivsi3>
   2832a:	9b01      	ldr	r3, [sp, #4]
   2832c:	0005      	movs	r5, r0
   2832e:	4343      	muls	r3, r0
   28330:	0039      	movs	r1, r7
   28332:	4650      	mov	r0, sl
   28334:	9304      	str	r3, [sp, #16]
   28336:	f7fe fe5b 	bl	26ff0 <__aeabi_uidivmod>
   2833a:	9804      	ldr	r0, [sp, #16]
   2833c:	040b      	lsls	r3, r1, #16
   2833e:	0c31      	lsrs	r1, r6, #16
   28340:	4319      	orrs	r1, r3
   28342:	4288      	cmp	r0, r1
   28344:	d909      	bls.n	2835a <__aeabi_ddiv+0x342>
   28346:	4441      	add	r1, r8
   28348:	1e6b      	subs	r3, r5, #1
   2834a:	4588      	cmp	r8, r1
   2834c:	d900      	bls.n	28350 <__aeabi_ddiv+0x338>
   2834e:	e107      	b.n	28560 <__aeabi_ddiv+0x548>
   28350:	4288      	cmp	r0, r1
   28352:	d800      	bhi.n	28356 <__aeabi_ddiv+0x33e>
   28354:	e104      	b.n	28560 <__aeabi_ddiv+0x548>
   28356:	3d02      	subs	r5, #2
   28358:	4441      	add	r1, r8
   2835a:	9b04      	ldr	r3, [sp, #16]
   2835c:	1acb      	subs	r3, r1, r3
   2835e:	0018      	movs	r0, r3
   28360:	0039      	movs	r1, r7
   28362:	9304      	str	r3, [sp, #16]
   28364:	f7fe fdbe 	bl	26ee4 <__udivsi3>
   28368:	9b01      	ldr	r3, [sp, #4]
   2836a:	4682      	mov	sl, r0
   2836c:	4343      	muls	r3, r0
   2836e:	0039      	movs	r1, r7
   28370:	9804      	ldr	r0, [sp, #16]
   28372:	9301      	str	r3, [sp, #4]
   28374:	f7fe fe3c 	bl	26ff0 <__aeabi_uidivmod>
   28378:	9801      	ldr	r0, [sp, #4]
   2837a:	040b      	lsls	r3, r1, #16
   2837c:	0431      	lsls	r1, r6, #16
   2837e:	0c09      	lsrs	r1, r1, #16
   28380:	4319      	orrs	r1, r3
   28382:	4288      	cmp	r0, r1
   28384:	d90d      	bls.n	283a2 <__aeabi_ddiv+0x38a>
   28386:	4653      	mov	r3, sl
   28388:	4441      	add	r1, r8
   2838a:	3b01      	subs	r3, #1
   2838c:	4588      	cmp	r8, r1
   2838e:	d900      	bls.n	28392 <__aeabi_ddiv+0x37a>
   28390:	e0e8      	b.n	28564 <__aeabi_ddiv+0x54c>
   28392:	4288      	cmp	r0, r1
   28394:	d800      	bhi.n	28398 <__aeabi_ddiv+0x380>
   28396:	e0e5      	b.n	28564 <__aeabi_ddiv+0x54c>
   28398:	2302      	movs	r3, #2
   2839a:	425b      	negs	r3, r3
   2839c:	469c      	mov	ip, r3
   2839e:	4441      	add	r1, r8
   283a0:	44e2      	add	sl, ip
   283a2:	9b01      	ldr	r3, [sp, #4]
   283a4:	042d      	lsls	r5, r5, #16
   283a6:	1ace      	subs	r6, r1, r3
   283a8:	4651      	mov	r1, sl
   283aa:	4329      	orrs	r1, r5
   283ac:	9d05      	ldr	r5, [sp, #20]
   283ae:	464f      	mov	r7, r9
   283b0:	002a      	movs	r2, r5
   283b2:	040b      	lsls	r3, r1, #16
   283b4:	0c08      	lsrs	r0, r1, #16
   283b6:	0c1b      	lsrs	r3, r3, #16
   283b8:	435a      	muls	r2, r3
   283ba:	4345      	muls	r5, r0
   283bc:	437b      	muls	r3, r7
   283be:	4378      	muls	r0, r7
   283c0:	195b      	adds	r3, r3, r5
   283c2:	0c17      	lsrs	r7, r2, #16
   283c4:	18fb      	adds	r3, r7, r3
   283c6:	429d      	cmp	r5, r3
   283c8:	d903      	bls.n	283d2 <__aeabi_ddiv+0x3ba>
   283ca:	2580      	movs	r5, #128	; 0x80
   283cc:	026d      	lsls	r5, r5, #9
   283ce:	46ac      	mov	ip, r5
   283d0:	4460      	add	r0, ip
   283d2:	0c1d      	lsrs	r5, r3, #16
   283d4:	0412      	lsls	r2, r2, #16
   283d6:	041b      	lsls	r3, r3, #16
   283d8:	0c12      	lsrs	r2, r2, #16
   283da:	1828      	adds	r0, r5, r0
   283dc:	189b      	adds	r3, r3, r2
   283de:	4286      	cmp	r6, r0
   283e0:	d200      	bcs.n	283e4 <__aeabi_ddiv+0x3cc>
   283e2:	e093      	b.n	2850c <__aeabi_ddiv+0x4f4>
   283e4:	d100      	bne.n	283e8 <__aeabi_ddiv+0x3d0>
   283e6:	e08e      	b.n	28506 <__aeabi_ddiv+0x4ee>
   283e8:	2301      	movs	r3, #1
   283ea:	4319      	orrs	r1, r3
   283ec:	4ba0      	ldr	r3, [pc, #640]	; (28670 <__aeabi_ddiv+0x658>)
   283ee:	18e3      	adds	r3, r4, r3
   283f0:	2b00      	cmp	r3, #0
   283f2:	dc00      	bgt.n	283f6 <__aeabi_ddiv+0x3de>
   283f4:	e099      	b.n	2852a <__aeabi_ddiv+0x512>
   283f6:	074a      	lsls	r2, r1, #29
   283f8:	d000      	beq.n	283fc <__aeabi_ddiv+0x3e4>
   283fa:	e09e      	b.n	2853a <__aeabi_ddiv+0x522>
   283fc:	465a      	mov	r2, fp
   283fe:	01d2      	lsls	r2, r2, #7
   28400:	d506      	bpl.n	28410 <__aeabi_ddiv+0x3f8>
   28402:	465a      	mov	r2, fp
   28404:	4b9b      	ldr	r3, [pc, #620]	; (28674 <__aeabi_ddiv+0x65c>)
   28406:	401a      	ands	r2, r3
   28408:	2380      	movs	r3, #128	; 0x80
   2840a:	4693      	mov	fp, r2
   2840c:	00db      	lsls	r3, r3, #3
   2840e:	18e3      	adds	r3, r4, r3
   28410:	4a99      	ldr	r2, [pc, #612]	; (28678 <__aeabi_ddiv+0x660>)
   28412:	4293      	cmp	r3, r2
   28414:	dd68      	ble.n	284e8 <__aeabi_ddiv+0x4d0>
   28416:	2301      	movs	r3, #1
   28418:	9a02      	ldr	r2, [sp, #8]
   2841a:	4c98      	ldr	r4, [pc, #608]	; (2867c <__aeabi_ddiv+0x664>)
   2841c:	401a      	ands	r2, r3
   2841e:	2300      	movs	r3, #0
   28420:	4694      	mov	ip, r2
   28422:	4698      	mov	r8, r3
   28424:	2200      	movs	r2, #0
   28426:	e6c5      	b.n	281b4 <__aeabi_ddiv+0x19c>
   28428:	2280      	movs	r2, #128	; 0x80
   2842a:	464b      	mov	r3, r9
   2842c:	0312      	lsls	r2, r2, #12
   2842e:	4213      	tst	r3, r2
   28430:	d00a      	beq.n	28448 <__aeabi_ddiv+0x430>
   28432:	465b      	mov	r3, fp
   28434:	4213      	tst	r3, r2
   28436:	d106      	bne.n	28446 <__aeabi_ddiv+0x42e>
   28438:	431a      	orrs	r2, r3
   2843a:	0312      	lsls	r2, r2, #12
   2843c:	0b12      	lsrs	r2, r2, #12
   2843e:	46ac      	mov	ip, r5
   28440:	4688      	mov	r8, r1
   28442:	4c8e      	ldr	r4, [pc, #568]	; (2867c <__aeabi_ddiv+0x664>)
   28444:	e6b6      	b.n	281b4 <__aeabi_ddiv+0x19c>
   28446:	464b      	mov	r3, r9
   28448:	431a      	orrs	r2, r3
   2844a:	0312      	lsls	r2, r2, #12
   2844c:	0b12      	lsrs	r2, r2, #12
   2844e:	46bc      	mov	ip, r7
   28450:	4c8a      	ldr	r4, [pc, #552]	; (2867c <__aeabi_ddiv+0x664>)
   28452:	e6af      	b.n	281b4 <__aeabi_ddiv+0x19c>
   28454:	0003      	movs	r3, r0
   28456:	465a      	mov	r2, fp
   28458:	3b28      	subs	r3, #40	; 0x28
   2845a:	409a      	lsls	r2, r3
   2845c:	2300      	movs	r3, #0
   2845e:	4691      	mov	r9, r2
   28460:	4698      	mov	r8, r3
   28462:	e657      	b.n	28114 <__aeabi_ddiv+0xfc>
   28464:	4658      	mov	r0, fp
   28466:	f001 f8c1 	bl	295ec <__clzsi2>
   2846a:	3020      	adds	r0, #32
   2846c:	e640      	b.n	280f0 <__aeabi_ddiv+0xd8>
   2846e:	0003      	movs	r3, r0
   28470:	4652      	mov	r2, sl
   28472:	3b28      	subs	r3, #40	; 0x28
   28474:	409a      	lsls	r2, r3
   28476:	2100      	movs	r1, #0
   28478:	4693      	mov	fp, r2
   2847a:	e677      	b.n	2816c <__aeabi_ddiv+0x154>
   2847c:	f001 f8b6 	bl	295ec <__clzsi2>
   28480:	3020      	adds	r0, #32
   28482:	e65f      	b.n	28144 <__aeabi_ddiv+0x12c>
   28484:	4588      	cmp	r8, r1
   28486:	d200      	bcs.n	2848a <__aeabi_ddiv+0x472>
   28488:	e6c7      	b.n	2821a <__aeabi_ddiv+0x202>
   2848a:	464b      	mov	r3, r9
   2848c:	07de      	lsls	r6, r3, #31
   2848e:	085d      	lsrs	r5, r3, #1
   28490:	4643      	mov	r3, r8
   28492:	085b      	lsrs	r3, r3, #1
   28494:	431e      	orrs	r6, r3
   28496:	4643      	mov	r3, r8
   28498:	07db      	lsls	r3, r3, #31
   2849a:	469a      	mov	sl, r3
   2849c:	e6c2      	b.n	28224 <__aeabi_ddiv+0x20c>
   2849e:	2500      	movs	r5, #0
   284a0:	4592      	cmp	sl, r2
   284a2:	d300      	bcc.n	284a6 <__aeabi_ddiv+0x48e>
   284a4:	e733      	b.n	2830e <__aeabi_ddiv+0x2f6>
   284a6:	9e03      	ldr	r6, [sp, #12]
   284a8:	4659      	mov	r1, fp
   284aa:	46b4      	mov	ip, r6
   284ac:	44e2      	add	sl, ip
   284ae:	45b2      	cmp	sl, r6
   284b0:	41ad      	sbcs	r5, r5
   284b2:	426d      	negs	r5, r5
   284b4:	4445      	add	r5, r8
   284b6:	18eb      	adds	r3, r5, r3
   284b8:	3901      	subs	r1, #1
   284ba:	4598      	cmp	r8, r3
   284bc:	d207      	bcs.n	284ce <__aeabi_ddiv+0x4b6>
   284be:	4298      	cmp	r0, r3
   284c0:	d900      	bls.n	284c4 <__aeabi_ddiv+0x4ac>
   284c2:	e07f      	b.n	285c4 <__aeabi_ddiv+0x5ac>
   284c4:	d100      	bne.n	284c8 <__aeabi_ddiv+0x4b0>
   284c6:	e0bc      	b.n	28642 <__aeabi_ddiv+0x62a>
   284c8:	1a1d      	subs	r5, r3, r0
   284ca:	468b      	mov	fp, r1
   284cc:	e71f      	b.n	2830e <__aeabi_ddiv+0x2f6>
   284ce:	4598      	cmp	r8, r3
   284d0:	d1fa      	bne.n	284c8 <__aeabi_ddiv+0x4b0>
   284d2:	9d03      	ldr	r5, [sp, #12]
   284d4:	4555      	cmp	r5, sl
   284d6:	d9f2      	bls.n	284be <__aeabi_ddiv+0x4a6>
   284d8:	4643      	mov	r3, r8
   284da:	468b      	mov	fp, r1
   284dc:	1a1d      	subs	r5, r3, r0
   284de:	e716      	b.n	2830e <__aeabi_ddiv+0x2f6>
   284e0:	469b      	mov	fp, r3
   284e2:	e6ca      	b.n	2827a <__aeabi_ddiv+0x262>
   284e4:	0015      	movs	r5, r2
   284e6:	e6e7      	b.n	282b8 <__aeabi_ddiv+0x2a0>
   284e8:	465a      	mov	r2, fp
   284ea:	08c9      	lsrs	r1, r1, #3
   284ec:	0752      	lsls	r2, r2, #29
   284ee:	430a      	orrs	r2, r1
   284f0:	055b      	lsls	r3, r3, #21
   284f2:	4690      	mov	r8, r2
   284f4:	0d5c      	lsrs	r4, r3, #21
   284f6:	465a      	mov	r2, fp
   284f8:	2301      	movs	r3, #1
   284fa:	9902      	ldr	r1, [sp, #8]
   284fc:	0252      	lsls	r2, r2, #9
   284fe:	4019      	ands	r1, r3
   28500:	0b12      	lsrs	r2, r2, #12
   28502:	468c      	mov	ip, r1
   28504:	e656      	b.n	281b4 <__aeabi_ddiv+0x19c>
   28506:	2b00      	cmp	r3, #0
   28508:	d100      	bne.n	2850c <__aeabi_ddiv+0x4f4>
   2850a:	e76f      	b.n	283ec <__aeabi_ddiv+0x3d4>
   2850c:	4446      	add	r6, r8
   2850e:	1e4a      	subs	r2, r1, #1
   28510:	45b0      	cmp	r8, r6
   28512:	d929      	bls.n	28568 <__aeabi_ddiv+0x550>
   28514:	0011      	movs	r1, r2
   28516:	4286      	cmp	r6, r0
   28518:	d000      	beq.n	2851c <__aeabi_ddiv+0x504>
   2851a:	e765      	b.n	283e8 <__aeabi_ddiv+0x3d0>
   2851c:	9a03      	ldr	r2, [sp, #12]
   2851e:	4293      	cmp	r3, r2
   28520:	d000      	beq.n	28524 <__aeabi_ddiv+0x50c>
   28522:	e761      	b.n	283e8 <__aeabi_ddiv+0x3d0>
   28524:	e762      	b.n	283ec <__aeabi_ddiv+0x3d4>
   28526:	2101      	movs	r1, #1
   28528:	4249      	negs	r1, r1
   2852a:	2001      	movs	r0, #1
   2852c:	1ac2      	subs	r2, r0, r3
   2852e:	2a38      	cmp	r2, #56	; 0x38
   28530:	dd21      	ble.n	28576 <__aeabi_ddiv+0x55e>
   28532:	9b02      	ldr	r3, [sp, #8]
   28534:	4003      	ands	r3, r0
   28536:	469c      	mov	ip, r3
   28538:	e638      	b.n	281ac <__aeabi_ddiv+0x194>
   2853a:	220f      	movs	r2, #15
   2853c:	400a      	ands	r2, r1
   2853e:	2a04      	cmp	r2, #4
   28540:	d100      	bne.n	28544 <__aeabi_ddiv+0x52c>
   28542:	e75b      	b.n	283fc <__aeabi_ddiv+0x3e4>
   28544:	000a      	movs	r2, r1
   28546:	1d11      	adds	r1, r2, #4
   28548:	4291      	cmp	r1, r2
   2854a:	4192      	sbcs	r2, r2
   2854c:	4252      	negs	r2, r2
   2854e:	4493      	add	fp, r2
   28550:	e754      	b.n	283fc <__aeabi_ddiv+0x3e4>
   28552:	4b47      	ldr	r3, [pc, #284]	; (28670 <__aeabi_ddiv+0x658>)
   28554:	18e3      	adds	r3, r4, r3
   28556:	2b00      	cmp	r3, #0
   28558:	dde5      	ble.n	28526 <__aeabi_ddiv+0x50e>
   2855a:	2201      	movs	r2, #1
   2855c:	4252      	negs	r2, r2
   2855e:	e7f2      	b.n	28546 <__aeabi_ddiv+0x52e>
   28560:	001d      	movs	r5, r3
   28562:	e6fa      	b.n	2835a <__aeabi_ddiv+0x342>
   28564:	469a      	mov	sl, r3
   28566:	e71c      	b.n	283a2 <__aeabi_ddiv+0x38a>
   28568:	42b0      	cmp	r0, r6
   2856a:	d839      	bhi.n	285e0 <__aeabi_ddiv+0x5c8>
   2856c:	d06e      	beq.n	2864c <__aeabi_ddiv+0x634>
   2856e:	0011      	movs	r1, r2
   28570:	e73a      	b.n	283e8 <__aeabi_ddiv+0x3d0>
   28572:	9302      	str	r3, [sp, #8]
   28574:	e73a      	b.n	283ec <__aeabi_ddiv+0x3d4>
   28576:	2a1f      	cmp	r2, #31
   28578:	dc3c      	bgt.n	285f4 <__aeabi_ddiv+0x5dc>
   2857a:	2320      	movs	r3, #32
   2857c:	1a9b      	subs	r3, r3, r2
   2857e:	000c      	movs	r4, r1
   28580:	4658      	mov	r0, fp
   28582:	4099      	lsls	r1, r3
   28584:	4098      	lsls	r0, r3
   28586:	1e4b      	subs	r3, r1, #1
   28588:	4199      	sbcs	r1, r3
   2858a:	465b      	mov	r3, fp
   2858c:	40d4      	lsrs	r4, r2
   2858e:	40d3      	lsrs	r3, r2
   28590:	4320      	orrs	r0, r4
   28592:	4308      	orrs	r0, r1
   28594:	001a      	movs	r2, r3
   28596:	0743      	lsls	r3, r0, #29
   28598:	d009      	beq.n	285ae <__aeabi_ddiv+0x596>
   2859a:	230f      	movs	r3, #15
   2859c:	4003      	ands	r3, r0
   2859e:	2b04      	cmp	r3, #4
   285a0:	d005      	beq.n	285ae <__aeabi_ddiv+0x596>
   285a2:	0001      	movs	r1, r0
   285a4:	1d08      	adds	r0, r1, #4
   285a6:	4288      	cmp	r0, r1
   285a8:	419b      	sbcs	r3, r3
   285aa:	425b      	negs	r3, r3
   285ac:	18d2      	adds	r2, r2, r3
   285ae:	0213      	lsls	r3, r2, #8
   285b0:	d53a      	bpl.n	28628 <__aeabi_ddiv+0x610>
   285b2:	2301      	movs	r3, #1
   285b4:	9a02      	ldr	r2, [sp, #8]
   285b6:	2401      	movs	r4, #1
   285b8:	401a      	ands	r2, r3
   285ba:	2300      	movs	r3, #0
   285bc:	4694      	mov	ip, r2
   285be:	4698      	mov	r8, r3
   285c0:	2200      	movs	r2, #0
   285c2:	e5f7      	b.n	281b4 <__aeabi_ddiv+0x19c>
   285c4:	2102      	movs	r1, #2
   285c6:	4249      	negs	r1, r1
   285c8:	468c      	mov	ip, r1
   285ca:	9d03      	ldr	r5, [sp, #12]
   285cc:	44e3      	add	fp, ip
   285ce:	46ac      	mov	ip, r5
   285d0:	44e2      	add	sl, ip
   285d2:	45aa      	cmp	sl, r5
   285d4:	41ad      	sbcs	r5, r5
   285d6:	426d      	negs	r5, r5
   285d8:	4445      	add	r5, r8
   285da:	18ed      	adds	r5, r5, r3
   285dc:	1a2d      	subs	r5, r5, r0
   285de:	e696      	b.n	2830e <__aeabi_ddiv+0x2f6>
   285e0:	1e8a      	subs	r2, r1, #2
   285e2:	9903      	ldr	r1, [sp, #12]
   285e4:	004d      	lsls	r5, r1, #1
   285e6:	428d      	cmp	r5, r1
   285e8:	4189      	sbcs	r1, r1
   285ea:	4249      	negs	r1, r1
   285ec:	4441      	add	r1, r8
   285ee:	1876      	adds	r6, r6, r1
   285f0:	9503      	str	r5, [sp, #12]
   285f2:	e78f      	b.n	28514 <__aeabi_ddiv+0x4fc>
   285f4:	201f      	movs	r0, #31
   285f6:	4240      	negs	r0, r0
   285f8:	1ac3      	subs	r3, r0, r3
   285fa:	4658      	mov	r0, fp
   285fc:	40d8      	lsrs	r0, r3
   285fe:	0003      	movs	r3, r0
   28600:	2a20      	cmp	r2, #32
   28602:	d028      	beq.n	28656 <__aeabi_ddiv+0x63e>
   28604:	2040      	movs	r0, #64	; 0x40
   28606:	465d      	mov	r5, fp
   28608:	1a82      	subs	r2, r0, r2
   2860a:	4095      	lsls	r5, r2
   2860c:	4329      	orrs	r1, r5
   2860e:	1e4a      	subs	r2, r1, #1
   28610:	4191      	sbcs	r1, r2
   28612:	4319      	orrs	r1, r3
   28614:	2307      	movs	r3, #7
   28616:	2200      	movs	r2, #0
   28618:	400b      	ands	r3, r1
   2861a:	d009      	beq.n	28630 <__aeabi_ddiv+0x618>
   2861c:	230f      	movs	r3, #15
   2861e:	2200      	movs	r2, #0
   28620:	400b      	ands	r3, r1
   28622:	0008      	movs	r0, r1
   28624:	2b04      	cmp	r3, #4
   28626:	d1bd      	bne.n	285a4 <__aeabi_ddiv+0x58c>
   28628:	0001      	movs	r1, r0
   2862a:	0753      	lsls	r3, r2, #29
   2862c:	0252      	lsls	r2, r2, #9
   2862e:	0b12      	lsrs	r2, r2, #12
   28630:	08c9      	lsrs	r1, r1, #3
   28632:	4319      	orrs	r1, r3
   28634:	2301      	movs	r3, #1
   28636:	4688      	mov	r8, r1
   28638:	9902      	ldr	r1, [sp, #8]
   2863a:	2400      	movs	r4, #0
   2863c:	4019      	ands	r1, r3
   2863e:	468c      	mov	ip, r1
   28640:	e5b8      	b.n	281b4 <__aeabi_ddiv+0x19c>
   28642:	4552      	cmp	r2, sl
   28644:	d8be      	bhi.n	285c4 <__aeabi_ddiv+0x5ac>
   28646:	468b      	mov	fp, r1
   28648:	2500      	movs	r5, #0
   2864a:	e660      	b.n	2830e <__aeabi_ddiv+0x2f6>
   2864c:	9d03      	ldr	r5, [sp, #12]
   2864e:	429d      	cmp	r5, r3
   28650:	d3c6      	bcc.n	285e0 <__aeabi_ddiv+0x5c8>
   28652:	0011      	movs	r1, r2
   28654:	e762      	b.n	2851c <__aeabi_ddiv+0x504>
   28656:	2500      	movs	r5, #0
   28658:	e7d8      	b.n	2860c <__aeabi_ddiv+0x5f4>
   2865a:	2280      	movs	r2, #128	; 0x80
   2865c:	465b      	mov	r3, fp
   2865e:	0312      	lsls	r2, r2, #12
   28660:	431a      	orrs	r2, r3
   28662:	9b01      	ldr	r3, [sp, #4]
   28664:	0312      	lsls	r2, r2, #12
   28666:	0b12      	lsrs	r2, r2, #12
   28668:	469c      	mov	ip, r3
   2866a:	4688      	mov	r8, r1
   2866c:	4c03      	ldr	r4, [pc, #12]	; (2867c <__aeabi_ddiv+0x664>)
   2866e:	e5a1      	b.n	281b4 <__aeabi_ddiv+0x19c>
   28670:	000003ff 	.word	0x000003ff
   28674:	feffffff 	.word	0xfeffffff
   28678:	000007fe 	.word	0x000007fe
   2867c:	000007ff 	.word	0x000007ff

00028680 <__eqdf2>:
   28680:	b5f0      	push	{r4, r5, r6, r7, lr}
   28682:	464f      	mov	r7, r9
   28684:	4646      	mov	r6, r8
   28686:	46d6      	mov	lr, sl
   28688:	005c      	lsls	r4, r3, #1
   2868a:	b5c0      	push	{r6, r7, lr}
   2868c:	031f      	lsls	r7, r3, #12
   2868e:	0fdb      	lsrs	r3, r3, #31
   28690:	469a      	mov	sl, r3
   28692:	4b17      	ldr	r3, [pc, #92]	; (286f0 <__eqdf2+0x70>)
   28694:	030e      	lsls	r6, r1, #12
   28696:	004d      	lsls	r5, r1, #1
   28698:	4684      	mov	ip, r0
   2869a:	4680      	mov	r8, r0
   2869c:	0b36      	lsrs	r6, r6, #12
   2869e:	0d6d      	lsrs	r5, r5, #21
   286a0:	0fc9      	lsrs	r1, r1, #31
   286a2:	4691      	mov	r9, r2
   286a4:	0b3f      	lsrs	r7, r7, #12
   286a6:	0d64      	lsrs	r4, r4, #21
   286a8:	2001      	movs	r0, #1
   286aa:	429d      	cmp	r5, r3
   286ac:	d008      	beq.n	286c0 <__eqdf2+0x40>
   286ae:	429c      	cmp	r4, r3
   286b0:	d001      	beq.n	286b6 <__eqdf2+0x36>
   286b2:	42a5      	cmp	r5, r4
   286b4:	d00b      	beq.n	286ce <__eqdf2+0x4e>
   286b6:	bc1c      	pop	{r2, r3, r4}
   286b8:	4690      	mov	r8, r2
   286ba:	4699      	mov	r9, r3
   286bc:	46a2      	mov	sl, r4
   286be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   286c0:	4663      	mov	r3, ip
   286c2:	4333      	orrs	r3, r6
   286c4:	d1f7      	bne.n	286b6 <__eqdf2+0x36>
   286c6:	42ac      	cmp	r4, r5
   286c8:	d1f5      	bne.n	286b6 <__eqdf2+0x36>
   286ca:	433a      	orrs	r2, r7
   286cc:	d1f3      	bne.n	286b6 <__eqdf2+0x36>
   286ce:	2001      	movs	r0, #1
   286d0:	42be      	cmp	r6, r7
   286d2:	d1f0      	bne.n	286b6 <__eqdf2+0x36>
   286d4:	45c8      	cmp	r8, r9
   286d6:	d1ee      	bne.n	286b6 <__eqdf2+0x36>
   286d8:	4551      	cmp	r1, sl
   286da:	d007      	beq.n	286ec <__eqdf2+0x6c>
   286dc:	2d00      	cmp	r5, #0
   286de:	d1ea      	bne.n	286b6 <__eqdf2+0x36>
   286e0:	4663      	mov	r3, ip
   286e2:	431e      	orrs	r6, r3
   286e4:	0030      	movs	r0, r6
   286e6:	1e46      	subs	r6, r0, #1
   286e8:	41b0      	sbcs	r0, r6
   286ea:	e7e4      	b.n	286b6 <__eqdf2+0x36>
   286ec:	2000      	movs	r0, #0
   286ee:	e7e2      	b.n	286b6 <__eqdf2+0x36>
   286f0:	000007ff 	.word	0x000007ff

000286f4 <__gedf2>:
   286f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   286f6:	4645      	mov	r5, r8
   286f8:	46de      	mov	lr, fp
   286fa:	4657      	mov	r7, sl
   286fc:	464e      	mov	r6, r9
   286fe:	b5e0      	push	{r5, r6, r7, lr}
   28700:	031f      	lsls	r7, r3, #12
   28702:	0b3d      	lsrs	r5, r7, #12
   28704:	4f2c      	ldr	r7, [pc, #176]	; (287b8 <__gedf2+0xc4>)
   28706:	030e      	lsls	r6, r1, #12
   28708:	004c      	lsls	r4, r1, #1
   2870a:	46ab      	mov	fp, r5
   2870c:	005d      	lsls	r5, r3, #1
   2870e:	4684      	mov	ip, r0
   28710:	0b36      	lsrs	r6, r6, #12
   28712:	0d64      	lsrs	r4, r4, #21
   28714:	0fc9      	lsrs	r1, r1, #31
   28716:	4690      	mov	r8, r2
   28718:	0d6d      	lsrs	r5, r5, #21
   2871a:	0fdb      	lsrs	r3, r3, #31
   2871c:	42bc      	cmp	r4, r7
   2871e:	d02a      	beq.n	28776 <__gedf2+0x82>
   28720:	4f25      	ldr	r7, [pc, #148]	; (287b8 <__gedf2+0xc4>)
   28722:	42bd      	cmp	r5, r7
   28724:	d02d      	beq.n	28782 <__gedf2+0x8e>
   28726:	2c00      	cmp	r4, #0
   28728:	d10f      	bne.n	2874a <__gedf2+0x56>
   2872a:	4330      	orrs	r0, r6
   2872c:	0007      	movs	r7, r0
   2872e:	4681      	mov	r9, r0
   28730:	4278      	negs	r0, r7
   28732:	4178      	adcs	r0, r7
   28734:	b2c0      	uxtb	r0, r0
   28736:	2d00      	cmp	r5, #0
   28738:	d117      	bne.n	2876a <__gedf2+0x76>
   2873a:	465f      	mov	r7, fp
   2873c:	433a      	orrs	r2, r7
   2873e:	d114      	bne.n	2876a <__gedf2+0x76>
   28740:	464b      	mov	r3, r9
   28742:	2000      	movs	r0, #0
   28744:	2b00      	cmp	r3, #0
   28746:	d00a      	beq.n	2875e <__gedf2+0x6a>
   28748:	e006      	b.n	28758 <__gedf2+0x64>
   2874a:	2d00      	cmp	r5, #0
   2874c:	d102      	bne.n	28754 <__gedf2+0x60>
   2874e:	4658      	mov	r0, fp
   28750:	4302      	orrs	r2, r0
   28752:	d001      	beq.n	28758 <__gedf2+0x64>
   28754:	4299      	cmp	r1, r3
   28756:	d018      	beq.n	2878a <__gedf2+0x96>
   28758:	4248      	negs	r0, r1
   2875a:	2101      	movs	r1, #1
   2875c:	4308      	orrs	r0, r1
   2875e:	bc3c      	pop	{r2, r3, r4, r5}
   28760:	4690      	mov	r8, r2
   28762:	4699      	mov	r9, r3
   28764:	46a2      	mov	sl, r4
   28766:	46ab      	mov	fp, r5
   28768:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2876a:	2800      	cmp	r0, #0
   2876c:	d0f2      	beq.n	28754 <__gedf2+0x60>
   2876e:	2001      	movs	r0, #1
   28770:	3b01      	subs	r3, #1
   28772:	4318      	orrs	r0, r3
   28774:	e7f3      	b.n	2875e <__gedf2+0x6a>
   28776:	0037      	movs	r7, r6
   28778:	4307      	orrs	r7, r0
   2877a:	d0d1      	beq.n	28720 <__gedf2+0x2c>
   2877c:	2002      	movs	r0, #2
   2877e:	4240      	negs	r0, r0
   28780:	e7ed      	b.n	2875e <__gedf2+0x6a>
   28782:	465f      	mov	r7, fp
   28784:	4317      	orrs	r7, r2
   28786:	d0ce      	beq.n	28726 <__gedf2+0x32>
   28788:	e7f8      	b.n	2877c <__gedf2+0x88>
   2878a:	42ac      	cmp	r4, r5
   2878c:	dce4      	bgt.n	28758 <__gedf2+0x64>
   2878e:	da03      	bge.n	28798 <__gedf2+0xa4>
   28790:	1e48      	subs	r0, r1, #1
   28792:	2101      	movs	r1, #1
   28794:	4308      	orrs	r0, r1
   28796:	e7e2      	b.n	2875e <__gedf2+0x6a>
   28798:	455e      	cmp	r6, fp
   2879a:	d8dd      	bhi.n	28758 <__gedf2+0x64>
   2879c:	d006      	beq.n	287ac <__gedf2+0xb8>
   2879e:	2000      	movs	r0, #0
   287a0:	455e      	cmp	r6, fp
   287a2:	d2dc      	bcs.n	2875e <__gedf2+0x6a>
   287a4:	2301      	movs	r3, #1
   287a6:	1e48      	subs	r0, r1, #1
   287a8:	4318      	orrs	r0, r3
   287aa:	e7d8      	b.n	2875e <__gedf2+0x6a>
   287ac:	45c4      	cmp	ip, r8
   287ae:	d8d3      	bhi.n	28758 <__gedf2+0x64>
   287b0:	2000      	movs	r0, #0
   287b2:	45c4      	cmp	ip, r8
   287b4:	d3f6      	bcc.n	287a4 <__gedf2+0xb0>
   287b6:	e7d2      	b.n	2875e <__gedf2+0x6a>
   287b8:	000007ff 	.word	0x000007ff

000287bc <__ledf2>:
   287bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   287be:	464e      	mov	r6, r9
   287c0:	4645      	mov	r5, r8
   287c2:	46de      	mov	lr, fp
   287c4:	4657      	mov	r7, sl
   287c6:	005c      	lsls	r4, r3, #1
   287c8:	b5e0      	push	{r5, r6, r7, lr}
   287ca:	031f      	lsls	r7, r3, #12
   287cc:	0fdb      	lsrs	r3, r3, #31
   287ce:	4699      	mov	r9, r3
   287d0:	4b2a      	ldr	r3, [pc, #168]	; (2887c <__ledf2+0xc0>)
   287d2:	030e      	lsls	r6, r1, #12
   287d4:	004d      	lsls	r5, r1, #1
   287d6:	0fc9      	lsrs	r1, r1, #31
   287d8:	4684      	mov	ip, r0
   287da:	0b36      	lsrs	r6, r6, #12
   287dc:	0d6d      	lsrs	r5, r5, #21
   287de:	468b      	mov	fp, r1
   287e0:	4690      	mov	r8, r2
   287e2:	0b3f      	lsrs	r7, r7, #12
   287e4:	0d64      	lsrs	r4, r4, #21
   287e6:	429d      	cmp	r5, r3
   287e8:	d020      	beq.n	2882c <__ledf2+0x70>
   287ea:	4b24      	ldr	r3, [pc, #144]	; (2887c <__ledf2+0xc0>)
   287ec:	429c      	cmp	r4, r3
   287ee:	d022      	beq.n	28836 <__ledf2+0x7a>
   287f0:	2d00      	cmp	r5, #0
   287f2:	d112      	bne.n	2881a <__ledf2+0x5e>
   287f4:	4330      	orrs	r0, r6
   287f6:	4243      	negs	r3, r0
   287f8:	4143      	adcs	r3, r0
   287fa:	b2db      	uxtb	r3, r3
   287fc:	2c00      	cmp	r4, #0
   287fe:	d01f      	beq.n	28840 <__ledf2+0x84>
   28800:	2b00      	cmp	r3, #0
   28802:	d00c      	beq.n	2881e <__ledf2+0x62>
   28804:	464b      	mov	r3, r9
   28806:	2001      	movs	r0, #1
   28808:	3b01      	subs	r3, #1
   2880a:	4303      	orrs	r3, r0
   2880c:	0018      	movs	r0, r3
   2880e:	bc3c      	pop	{r2, r3, r4, r5}
   28810:	4690      	mov	r8, r2
   28812:	4699      	mov	r9, r3
   28814:	46a2      	mov	sl, r4
   28816:	46ab      	mov	fp, r5
   28818:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2881a:	2c00      	cmp	r4, #0
   2881c:	d016      	beq.n	2884c <__ledf2+0x90>
   2881e:	45cb      	cmp	fp, r9
   28820:	d017      	beq.n	28852 <__ledf2+0x96>
   28822:	465b      	mov	r3, fp
   28824:	4259      	negs	r1, r3
   28826:	2301      	movs	r3, #1
   28828:	430b      	orrs	r3, r1
   2882a:	e7ef      	b.n	2880c <__ledf2+0x50>
   2882c:	0031      	movs	r1, r6
   2882e:	2302      	movs	r3, #2
   28830:	4301      	orrs	r1, r0
   28832:	d1eb      	bne.n	2880c <__ledf2+0x50>
   28834:	e7d9      	b.n	287ea <__ledf2+0x2e>
   28836:	0039      	movs	r1, r7
   28838:	2302      	movs	r3, #2
   2883a:	4311      	orrs	r1, r2
   2883c:	d1e6      	bne.n	2880c <__ledf2+0x50>
   2883e:	e7d7      	b.n	287f0 <__ledf2+0x34>
   28840:	433a      	orrs	r2, r7
   28842:	d1dd      	bne.n	28800 <__ledf2+0x44>
   28844:	2300      	movs	r3, #0
   28846:	2800      	cmp	r0, #0
   28848:	d0e0      	beq.n	2880c <__ledf2+0x50>
   2884a:	e7ea      	b.n	28822 <__ledf2+0x66>
   2884c:	433a      	orrs	r2, r7
   2884e:	d1e6      	bne.n	2881e <__ledf2+0x62>
   28850:	e7e7      	b.n	28822 <__ledf2+0x66>
   28852:	42a5      	cmp	r5, r4
   28854:	dce5      	bgt.n	28822 <__ledf2+0x66>
   28856:	db05      	blt.n	28864 <__ledf2+0xa8>
   28858:	42be      	cmp	r6, r7
   2885a:	d8e2      	bhi.n	28822 <__ledf2+0x66>
   2885c:	d007      	beq.n	2886e <__ledf2+0xb2>
   2885e:	2300      	movs	r3, #0
   28860:	42be      	cmp	r6, r7
   28862:	d2d3      	bcs.n	2880c <__ledf2+0x50>
   28864:	4659      	mov	r1, fp
   28866:	2301      	movs	r3, #1
   28868:	3901      	subs	r1, #1
   2886a:	430b      	orrs	r3, r1
   2886c:	e7ce      	b.n	2880c <__ledf2+0x50>
   2886e:	45c4      	cmp	ip, r8
   28870:	d8d7      	bhi.n	28822 <__ledf2+0x66>
   28872:	2300      	movs	r3, #0
   28874:	45c4      	cmp	ip, r8
   28876:	d3f5      	bcc.n	28864 <__ledf2+0xa8>
   28878:	e7c8      	b.n	2880c <__ledf2+0x50>
   2887a:	46c0      	nop			; (mov r8, r8)
   2887c:	000007ff 	.word	0x000007ff

00028880 <__aeabi_dmul>:
   28880:	b5f0      	push	{r4, r5, r6, r7, lr}
   28882:	4657      	mov	r7, sl
   28884:	4645      	mov	r5, r8
   28886:	46de      	mov	lr, fp
   28888:	464e      	mov	r6, r9
   2888a:	b5e0      	push	{r5, r6, r7, lr}
   2888c:	030c      	lsls	r4, r1, #12
   2888e:	4698      	mov	r8, r3
   28890:	004e      	lsls	r6, r1, #1
   28892:	0b23      	lsrs	r3, r4, #12
   28894:	b087      	sub	sp, #28
   28896:	0007      	movs	r7, r0
   28898:	4692      	mov	sl, r2
   2889a:	469b      	mov	fp, r3
   2889c:	0d76      	lsrs	r6, r6, #21
   2889e:	0fcd      	lsrs	r5, r1, #31
   288a0:	2e00      	cmp	r6, #0
   288a2:	d06b      	beq.n	2897c <__aeabi_dmul+0xfc>
   288a4:	4b6d      	ldr	r3, [pc, #436]	; (28a5c <__aeabi_dmul+0x1dc>)
   288a6:	429e      	cmp	r6, r3
   288a8:	d035      	beq.n	28916 <__aeabi_dmul+0x96>
   288aa:	2480      	movs	r4, #128	; 0x80
   288ac:	465b      	mov	r3, fp
   288ae:	0f42      	lsrs	r2, r0, #29
   288b0:	0424      	lsls	r4, r4, #16
   288b2:	00db      	lsls	r3, r3, #3
   288b4:	4314      	orrs	r4, r2
   288b6:	431c      	orrs	r4, r3
   288b8:	00c3      	lsls	r3, r0, #3
   288ba:	4699      	mov	r9, r3
   288bc:	4b68      	ldr	r3, [pc, #416]	; (28a60 <__aeabi_dmul+0x1e0>)
   288be:	46a3      	mov	fp, r4
   288c0:	469c      	mov	ip, r3
   288c2:	2300      	movs	r3, #0
   288c4:	2700      	movs	r7, #0
   288c6:	4466      	add	r6, ip
   288c8:	9302      	str	r3, [sp, #8]
   288ca:	4643      	mov	r3, r8
   288cc:	031c      	lsls	r4, r3, #12
   288ce:	005a      	lsls	r2, r3, #1
   288d0:	0fdb      	lsrs	r3, r3, #31
   288d2:	4650      	mov	r0, sl
   288d4:	0b24      	lsrs	r4, r4, #12
   288d6:	0d52      	lsrs	r2, r2, #21
   288d8:	4698      	mov	r8, r3
   288da:	d100      	bne.n	288de <__aeabi_dmul+0x5e>
   288dc:	e076      	b.n	289cc <__aeabi_dmul+0x14c>
   288de:	4b5f      	ldr	r3, [pc, #380]	; (28a5c <__aeabi_dmul+0x1dc>)
   288e0:	429a      	cmp	r2, r3
   288e2:	d06d      	beq.n	289c0 <__aeabi_dmul+0x140>
   288e4:	2380      	movs	r3, #128	; 0x80
   288e6:	0f41      	lsrs	r1, r0, #29
   288e8:	041b      	lsls	r3, r3, #16
   288ea:	430b      	orrs	r3, r1
   288ec:	495c      	ldr	r1, [pc, #368]	; (28a60 <__aeabi_dmul+0x1e0>)
   288ee:	00e4      	lsls	r4, r4, #3
   288f0:	468c      	mov	ip, r1
   288f2:	431c      	orrs	r4, r3
   288f4:	00c3      	lsls	r3, r0, #3
   288f6:	2000      	movs	r0, #0
   288f8:	4462      	add	r2, ip
   288fa:	4641      	mov	r1, r8
   288fc:	18b6      	adds	r6, r6, r2
   288fe:	4069      	eors	r1, r5
   28900:	1c72      	adds	r2, r6, #1
   28902:	9101      	str	r1, [sp, #4]
   28904:	4694      	mov	ip, r2
   28906:	4307      	orrs	r7, r0
   28908:	2f0f      	cmp	r7, #15
   2890a:	d900      	bls.n	2890e <__aeabi_dmul+0x8e>
   2890c:	e0b0      	b.n	28a70 <__aeabi_dmul+0x1f0>
   2890e:	4a55      	ldr	r2, [pc, #340]	; (28a64 <__aeabi_dmul+0x1e4>)
   28910:	00bf      	lsls	r7, r7, #2
   28912:	59d2      	ldr	r2, [r2, r7]
   28914:	4697      	mov	pc, r2
   28916:	465b      	mov	r3, fp
   28918:	4303      	orrs	r3, r0
   2891a:	4699      	mov	r9, r3
   2891c:	d000      	beq.n	28920 <__aeabi_dmul+0xa0>
   2891e:	e087      	b.n	28a30 <__aeabi_dmul+0x1b0>
   28920:	2300      	movs	r3, #0
   28922:	469b      	mov	fp, r3
   28924:	3302      	adds	r3, #2
   28926:	2708      	movs	r7, #8
   28928:	9302      	str	r3, [sp, #8]
   2892a:	e7ce      	b.n	288ca <__aeabi_dmul+0x4a>
   2892c:	4642      	mov	r2, r8
   2892e:	9201      	str	r2, [sp, #4]
   28930:	2802      	cmp	r0, #2
   28932:	d067      	beq.n	28a04 <__aeabi_dmul+0x184>
   28934:	2803      	cmp	r0, #3
   28936:	d100      	bne.n	2893a <__aeabi_dmul+0xba>
   28938:	e20e      	b.n	28d58 <__aeabi_dmul+0x4d8>
   2893a:	2801      	cmp	r0, #1
   2893c:	d000      	beq.n	28940 <__aeabi_dmul+0xc0>
   2893e:	e162      	b.n	28c06 <__aeabi_dmul+0x386>
   28940:	2300      	movs	r3, #0
   28942:	2400      	movs	r4, #0
   28944:	2200      	movs	r2, #0
   28946:	4699      	mov	r9, r3
   28948:	9901      	ldr	r1, [sp, #4]
   2894a:	4001      	ands	r1, r0
   2894c:	b2cd      	uxtb	r5, r1
   2894e:	2100      	movs	r1, #0
   28950:	0312      	lsls	r2, r2, #12
   28952:	0d0b      	lsrs	r3, r1, #20
   28954:	0b12      	lsrs	r2, r2, #12
   28956:	051b      	lsls	r3, r3, #20
   28958:	4313      	orrs	r3, r2
   2895a:	4a43      	ldr	r2, [pc, #268]	; (28a68 <__aeabi_dmul+0x1e8>)
   2895c:	0524      	lsls	r4, r4, #20
   2895e:	4013      	ands	r3, r2
   28960:	431c      	orrs	r4, r3
   28962:	0064      	lsls	r4, r4, #1
   28964:	07ed      	lsls	r5, r5, #31
   28966:	0864      	lsrs	r4, r4, #1
   28968:	432c      	orrs	r4, r5
   2896a:	4648      	mov	r0, r9
   2896c:	0021      	movs	r1, r4
   2896e:	b007      	add	sp, #28
   28970:	bc3c      	pop	{r2, r3, r4, r5}
   28972:	4690      	mov	r8, r2
   28974:	4699      	mov	r9, r3
   28976:	46a2      	mov	sl, r4
   28978:	46ab      	mov	fp, r5
   2897a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2897c:	4303      	orrs	r3, r0
   2897e:	4699      	mov	r9, r3
   28980:	d04f      	beq.n	28a22 <__aeabi_dmul+0x1a2>
   28982:	465b      	mov	r3, fp
   28984:	2b00      	cmp	r3, #0
   28986:	d100      	bne.n	2898a <__aeabi_dmul+0x10a>
   28988:	e189      	b.n	28c9e <__aeabi_dmul+0x41e>
   2898a:	4658      	mov	r0, fp
   2898c:	f000 fe2e 	bl	295ec <__clzsi2>
   28990:	0003      	movs	r3, r0
   28992:	3b0b      	subs	r3, #11
   28994:	2b1c      	cmp	r3, #28
   28996:	dd00      	ble.n	2899a <__aeabi_dmul+0x11a>
   28998:	e17a      	b.n	28c90 <__aeabi_dmul+0x410>
   2899a:	221d      	movs	r2, #29
   2899c:	1ad3      	subs	r3, r2, r3
   2899e:	003a      	movs	r2, r7
   289a0:	0001      	movs	r1, r0
   289a2:	465c      	mov	r4, fp
   289a4:	40da      	lsrs	r2, r3
   289a6:	3908      	subs	r1, #8
   289a8:	408c      	lsls	r4, r1
   289aa:	0013      	movs	r3, r2
   289ac:	408f      	lsls	r7, r1
   289ae:	4323      	orrs	r3, r4
   289b0:	469b      	mov	fp, r3
   289b2:	46b9      	mov	r9, r7
   289b4:	2300      	movs	r3, #0
   289b6:	4e2d      	ldr	r6, [pc, #180]	; (28a6c <__aeabi_dmul+0x1ec>)
   289b8:	2700      	movs	r7, #0
   289ba:	1a36      	subs	r6, r6, r0
   289bc:	9302      	str	r3, [sp, #8]
   289be:	e784      	b.n	288ca <__aeabi_dmul+0x4a>
   289c0:	4653      	mov	r3, sl
   289c2:	4323      	orrs	r3, r4
   289c4:	d12a      	bne.n	28a1c <__aeabi_dmul+0x19c>
   289c6:	2400      	movs	r4, #0
   289c8:	2002      	movs	r0, #2
   289ca:	e796      	b.n	288fa <__aeabi_dmul+0x7a>
   289cc:	4653      	mov	r3, sl
   289ce:	4323      	orrs	r3, r4
   289d0:	d020      	beq.n	28a14 <__aeabi_dmul+0x194>
   289d2:	2c00      	cmp	r4, #0
   289d4:	d100      	bne.n	289d8 <__aeabi_dmul+0x158>
   289d6:	e157      	b.n	28c88 <__aeabi_dmul+0x408>
   289d8:	0020      	movs	r0, r4
   289da:	f000 fe07 	bl	295ec <__clzsi2>
   289de:	0003      	movs	r3, r0
   289e0:	3b0b      	subs	r3, #11
   289e2:	2b1c      	cmp	r3, #28
   289e4:	dd00      	ble.n	289e8 <__aeabi_dmul+0x168>
   289e6:	e149      	b.n	28c7c <__aeabi_dmul+0x3fc>
   289e8:	211d      	movs	r1, #29
   289ea:	1acb      	subs	r3, r1, r3
   289ec:	4651      	mov	r1, sl
   289ee:	0002      	movs	r2, r0
   289f0:	40d9      	lsrs	r1, r3
   289f2:	4653      	mov	r3, sl
   289f4:	3a08      	subs	r2, #8
   289f6:	4094      	lsls	r4, r2
   289f8:	4093      	lsls	r3, r2
   289fa:	430c      	orrs	r4, r1
   289fc:	4a1b      	ldr	r2, [pc, #108]	; (28a6c <__aeabi_dmul+0x1ec>)
   289fe:	1a12      	subs	r2, r2, r0
   28a00:	2000      	movs	r0, #0
   28a02:	e77a      	b.n	288fa <__aeabi_dmul+0x7a>
   28a04:	2501      	movs	r5, #1
   28a06:	9b01      	ldr	r3, [sp, #4]
   28a08:	4c14      	ldr	r4, [pc, #80]	; (28a5c <__aeabi_dmul+0x1dc>)
   28a0a:	401d      	ands	r5, r3
   28a0c:	2300      	movs	r3, #0
   28a0e:	2200      	movs	r2, #0
   28a10:	4699      	mov	r9, r3
   28a12:	e79c      	b.n	2894e <__aeabi_dmul+0xce>
   28a14:	2400      	movs	r4, #0
   28a16:	2200      	movs	r2, #0
   28a18:	2001      	movs	r0, #1
   28a1a:	e76e      	b.n	288fa <__aeabi_dmul+0x7a>
   28a1c:	4653      	mov	r3, sl
   28a1e:	2003      	movs	r0, #3
   28a20:	e76b      	b.n	288fa <__aeabi_dmul+0x7a>
   28a22:	2300      	movs	r3, #0
   28a24:	469b      	mov	fp, r3
   28a26:	3301      	adds	r3, #1
   28a28:	2704      	movs	r7, #4
   28a2a:	2600      	movs	r6, #0
   28a2c:	9302      	str	r3, [sp, #8]
   28a2e:	e74c      	b.n	288ca <__aeabi_dmul+0x4a>
   28a30:	2303      	movs	r3, #3
   28a32:	4681      	mov	r9, r0
   28a34:	270c      	movs	r7, #12
   28a36:	9302      	str	r3, [sp, #8]
   28a38:	e747      	b.n	288ca <__aeabi_dmul+0x4a>
   28a3a:	2280      	movs	r2, #128	; 0x80
   28a3c:	2300      	movs	r3, #0
   28a3e:	2500      	movs	r5, #0
   28a40:	0312      	lsls	r2, r2, #12
   28a42:	4699      	mov	r9, r3
   28a44:	4c05      	ldr	r4, [pc, #20]	; (28a5c <__aeabi_dmul+0x1dc>)
   28a46:	e782      	b.n	2894e <__aeabi_dmul+0xce>
   28a48:	465c      	mov	r4, fp
   28a4a:	464b      	mov	r3, r9
   28a4c:	9802      	ldr	r0, [sp, #8]
   28a4e:	e76f      	b.n	28930 <__aeabi_dmul+0xb0>
   28a50:	465c      	mov	r4, fp
   28a52:	464b      	mov	r3, r9
   28a54:	9501      	str	r5, [sp, #4]
   28a56:	9802      	ldr	r0, [sp, #8]
   28a58:	e76a      	b.n	28930 <__aeabi_dmul+0xb0>
   28a5a:	46c0      	nop			; (mov r8, r8)
   28a5c:	000007ff 	.word	0x000007ff
   28a60:	fffffc01 	.word	0xfffffc01
   28a64:	0002b8d0 	.word	0x0002b8d0
   28a68:	800fffff 	.word	0x800fffff
   28a6c:	fffffc0d 	.word	0xfffffc0d
   28a70:	464a      	mov	r2, r9
   28a72:	4649      	mov	r1, r9
   28a74:	0c17      	lsrs	r7, r2, #16
   28a76:	0c1a      	lsrs	r2, r3, #16
   28a78:	041b      	lsls	r3, r3, #16
   28a7a:	0c1b      	lsrs	r3, r3, #16
   28a7c:	0408      	lsls	r0, r1, #16
   28a7e:	0019      	movs	r1, r3
   28a80:	0c00      	lsrs	r0, r0, #16
   28a82:	4341      	muls	r1, r0
   28a84:	0015      	movs	r5, r2
   28a86:	4688      	mov	r8, r1
   28a88:	0019      	movs	r1, r3
   28a8a:	437d      	muls	r5, r7
   28a8c:	4379      	muls	r1, r7
   28a8e:	9503      	str	r5, [sp, #12]
   28a90:	4689      	mov	r9, r1
   28a92:	0029      	movs	r1, r5
   28a94:	0015      	movs	r5, r2
   28a96:	4345      	muls	r5, r0
   28a98:	444d      	add	r5, r9
   28a9a:	9502      	str	r5, [sp, #8]
   28a9c:	4645      	mov	r5, r8
   28a9e:	0c2d      	lsrs	r5, r5, #16
   28aa0:	46aa      	mov	sl, r5
   28aa2:	9d02      	ldr	r5, [sp, #8]
   28aa4:	4455      	add	r5, sl
   28aa6:	45a9      	cmp	r9, r5
   28aa8:	d906      	bls.n	28ab8 <__aeabi_dmul+0x238>
   28aaa:	468a      	mov	sl, r1
   28aac:	2180      	movs	r1, #128	; 0x80
   28aae:	0249      	lsls	r1, r1, #9
   28ab0:	4689      	mov	r9, r1
   28ab2:	44ca      	add	sl, r9
   28ab4:	4651      	mov	r1, sl
   28ab6:	9103      	str	r1, [sp, #12]
   28ab8:	0c29      	lsrs	r1, r5, #16
   28aba:	9104      	str	r1, [sp, #16]
   28abc:	4641      	mov	r1, r8
   28abe:	0409      	lsls	r1, r1, #16
   28ac0:	042d      	lsls	r5, r5, #16
   28ac2:	0c09      	lsrs	r1, r1, #16
   28ac4:	4688      	mov	r8, r1
   28ac6:	0029      	movs	r1, r5
   28ac8:	0c25      	lsrs	r5, r4, #16
   28aca:	0424      	lsls	r4, r4, #16
   28acc:	4441      	add	r1, r8
   28ace:	0c24      	lsrs	r4, r4, #16
   28ad0:	9105      	str	r1, [sp, #20]
   28ad2:	0021      	movs	r1, r4
   28ad4:	4341      	muls	r1, r0
   28ad6:	4688      	mov	r8, r1
   28ad8:	0021      	movs	r1, r4
   28ada:	4379      	muls	r1, r7
   28adc:	468a      	mov	sl, r1
   28ade:	4368      	muls	r0, r5
   28ae0:	4641      	mov	r1, r8
   28ae2:	4450      	add	r0, sl
   28ae4:	4681      	mov	r9, r0
   28ae6:	0c08      	lsrs	r0, r1, #16
   28ae8:	4448      	add	r0, r9
   28aea:	436f      	muls	r7, r5
   28aec:	4582      	cmp	sl, r0
   28aee:	d903      	bls.n	28af8 <__aeabi_dmul+0x278>
   28af0:	2180      	movs	r1, #128	; 0x80
   28af2:	0249      	lsls	r1, r1, #9
   28af4:	4689      	mov	r9, r1
   28af6:	444f      	add	r7, r9
   28af8:	0c01      	lsrs	r1, r0, #16
   28afa:	4689      	mov	r9, r1
   28afc:	0039      	movs	r1, r7
   28afe:	4449      	add	r1, r9
   28b00:	9102      	str	r1, [sp, #8]
   28b02:	4641      	mov	r1, r8
   28b04:	040f      	lsls	r7, r1, #16
   28b06:	9904      	ldr	r1, [sp, #16]
   28b08:	0c3f      	lsrs	r7, r7, #16
   28b0a:	4688      	mov	r8, r1
   28b0c:	0400      	lsls	r0, r0, #16
   28b0e:	19c0      	adds	r0, r0, r7
   28b10:	4480      	add	r8, r0
   28b12:	4641      	mov	r1, r8
   28b14:	9104      	str	r1, [sp, #16]
   28b16:	4659      	mov	r1, fp
   28b18:	0c0f      	lsrs	r7, r1, #16
   28b1a:	0409      	lsls	r1, r1, #16
   28b1c:	0c09      	lsrs	r1, r1, #16
   28b1e:	4688      	mov	r8, r1
   28b20:	4359      	muls	r1, r3
   28b22:	468a      	mov	sl, r1
   28b24:	0039      	movs	r1, r7
   28b26:	4351      	muls	r1, r2
   28b28:	4689      	mov	r9, r1
   28b2a:	4641      	mov	r1, r8
   28b2c:	434a      	muls	r2, r1
   28b2e:	4651      	mov	r1, sl
   28b30:	0c09      	lsrs	r1, r1, #16
   28b32:	468b      	mov	fp, r1
   28b34:	437b      	muls	r3, r7
   28b36:	18d2      	adds	r2, r2, r3
   28b38:	445a      	add	r2, fp
   28b3a:	4293      	cmp	r3, r2
   28b3c:	d903      	bls.n	28b46 <__aeabi_dmul+0x2c6>
   28b3e:	2380      	movs	r3, #128	; 0x80
   28b40:	025b      	lsls	r3, r3, #9
   28b42:	469b      	mov	fp, r3
   28b44:	44d9      	add	r9, fp
   28b46:	4651      	mov	r1, sl
   28b48:	0409      	lsls	r1, r1, #16
   28b4a:	0c09      	lsrs	r1, r1, #16
   28b4c:	468a      	mov	sl, r1
   28b4e:	4641      	mov	r1, r8
   28b50:	4361      	muls	r1, r4
   28b52:	437c      	muls	r4, r7
   28b54:	0c13      	lsrs	r3, r2, #16
   28b56:	0412      	lsls	r2, r2, #16
   28b58:	444b      	add	r3, r9
   28b5a:	4452      	add	r2, sl
   28b5c:	46a1      	mov	r9, r4
   28b5e:	468a      	mov	sl, r1
   28b60:	003c      	movs	r4, r7
   28b62:	4641      	mov	r1, r8
   28b64:	436c      	muls	r4, r5
   28b66:	434d      	muls	r5, r1
   28b68:	4651      	mov	r1, sl
   28b6a:	444d      	add	r5, r9
   28b6c:	0c0f      	lsrs	r7, r1, #16
   28b6e:	197d      	adds	r5, r7, r5
   28b70:	45a9      	cmp	r9, r5
   28b72:	d903      	bls.n	28b7c <__aeabi_dmul+0x2fc>
   28b74:	2180      	movs	r1, #128	; 0x80
   28b76:	0249      	lsls	r1, r1, #9
   28b78:	4688      	mov	r8, r1
   28b7a:	4444      	add	r4, r8
   28b7c:	9f04      	ldr	r7, [sp, #16]
   28b7e:	9903      	ldr	r1, [sp, #12]
   28b80:	46b8      	mov	r8, r7
   28b82:	4441      	add	r1, r8
   28b84:	468b      	mov	fp, r1
   28b86:	4583      	cmp	fp, r0
   28b88:	4180      	sbcs	r0, r0
   28b8a:	4241      	negs	r1, r0
   28b8c:	4688      	mov	r8, r1
   28b8e:	4651      	mov	r1, sl
   28b90:	0408      	lsls	r0, r1, #16
   28b92:	042f      	lsls	r7, r5, #16
   28b94:	0c00      	lsrs	r0, r0, #16
   28b96:	183f      	adds	r7, r7, r0
   28b98:	4658      	mov	r0, fp
   28b9a:	9902      	ldr	r1, [sp, #8]
   28b9c:	1810      	adds	r0, r2, r0
   28b9e:	4689      	mov	r9, r1
   28ba0:	4290      	cmp	r0, r2
   28ba2:	4192      	sbcs	r2, r2
   28ba4:	444f      	add	r7, r9
   28ba6:	46ba      	mov	sl, r7
   28ba8:	4252      	negs	r2, r2
   28baa:	4699      	mov	r9, r3
   28bac:	4693      	mov	fp, r2
   28bae:	44c2      	add	sl, r8
   28bb0:	44d1      	add	r9, sl
   28bb2:	44cb      	add	fp, r9
   28bb4:	428f      	cmp	r7, r1
   28bb6:	41bf      	sbcs	r7, r7
   28bb8:	45c2      	cmp	sl, r8
   28bba:	4189      	sbcs	r1, r1
   28bbc:	4599      	cmp	r9, r3
   28bbe:	419b      	sbcs	r3, r3
   28bc0:	4593      	cmp	fp, r2
   28bc2:	4192      	sbcs	r2, r2
   28bc4:	427f      	negs	r7, r7
   28bc6:	4249      	negs	r1, r1
   28bc8:	0c2d      	lsrs	r5, r5, #16
   28bca:	4252      	negs	r2, r2
   28bcc:	430f      	orrs	r7, r1
   28bce:	425b      	negs	r3, r3
   28bd0:	4313      	orrs	r3, r2
   28bd2:	197f      	adds	r7, r7, r5
   28bd4:	18ff      	adds	r7, r7, r3
   28bd6:	465b      	mov	r3, fp
   28bd8:	193c      	adds	r4, r7, r4
   28bda:	0ddb      	lsrs	r3, r3, #23
   28bdc:	9a05      	ldr	r2, [sp, #20]
   28bde:	0264      	lsls	r4, r4, #9
   28be0:	431c      	orrs	r4, r3
   28be2:	0243      	lsls	r3, r0, #9
   28be4:	4313      	orrs	r3, r2
   28be6:	1e5d      	subs	r5, r3, #1
   28be8:	41ab      	sbcs	r3, r5
   28bea:	465a      	mov	r2, fp
   28bec:	0dc0      	lsrs	r0, r0, #23
   28bee:	4303      	orrs	r3, r0
   28bf0:	0252      	lsls	r2, r2, #9
   28bf2:	4313      	orrs	r3, r2
   28bf4:	01e2      	lsls	r2, r4, #7
   28bf6:	d556      	bpl.n	28ca6 <__aeabi_dmul+0x426>
   28bf8:	2001      	movs	r0, #1
   28bfa:	085a      	lsrs	r2, r3, #1
   28bfc:	4003      	ands	r3, r0
   28bfe:	4313      	orrs	r3, r2
   28c00:	07e2      	lsls	r2, r4, #31
   28c02:	4313      	orrs	r3, r2
   28c04:	0864      	lsrs	r4, r4, #1
   28c06:	485a      	ldr	r0, [pc, #360]	; (28d70 <__aeabi_dmul+0x4f0>)
   28c08:	4460      	add	r0, ip
   28c0a:	2800      	cmp	r0, #0
   28c0c:	dd4d      	ble.n	28caa <__aeabi_dmul+0x42a>
   28c0e:	075a      	lsls	r2, r3, #29
   28c10:	d009      	beq.n	28c26 <__aeabi_dmul+0x3a6>
   28c12:	220f      	movs	r2, #15
   28c14:	401a      	ands	r2, r3
   28c16:	2a04      	cmp	r2, #4
   28c18:	d005      	beq.n	28c26 <__aeabi_dmul+0x3a6>
   28c1a:	1d1a      	adds	r2, r3, #4
   28c1c:	429a      	cmp	r2, r3
   28c1e:	419b      	sbcs	r3, r3
   28c20:	425b      	negs	r3, r3
   28c22:	18e4      	adds	r4, r4, r3
   28c24:	0013      	movs	r3, r2
   28c26:	01e2      	lsls	r2, r4, #7
   28c28:	d504      	bpl.n	28c34 <__aeabi_dmul+0x3b4>
   28c2a:	2080      	movs	r0, #128	; 0x80
   28c2c:	4a51      	ldr	r2, [pc, #324]	; (28d74 <__aeabi_dmul+0x4f4>)
   28c2e:	00c0      	lsls	r0, r0, #3
   28c30:	4014      	ands	r4, r2
   28c32:	4460      	add	r0, ip
   28c34:	4a50      	ldr	r2, [pc, #320]	; (28d78 <__aeabi_dmul+0x4f8>)
   28c36:	4290      	cmp	r0, r2
   28c38:	dd00      	ble.n	28c3c <__aeabi_dmul+0x3bc>
   28c3a:	e6e3      	b.n	28a04 <__aeabi_dmul+0x184>
   28c3c:	2501      	movs	r5, #1
   28c3e:	08db      	lsrs	r3, r3, #3
   28c40:	0762      	lsls	r2, r4, #29
   28c42:	431a      	orrs	r2, r3
   28c44:	0264      	lsls	r4, r4, #9
   28c46:	9b01      	ldr	r3, [sp, #4]
   28c48:	4691      	mov	r9, r2
   28c4a:	0b22      	lsrs	r2, r4, #12
   28c4c:	0544      	lsls	r4, r0, #21
   28c4e:	0d64      	lsrs	r4, r4, #21
   28c50:	401d      	ands	r5, r3
   28c52:	e67c      	b.n	2894e <__aeabi_dmul+0xce>
   28c54:	2280      	movs	r2, #128	; 0x80
   28c56:	4659      	mov	r1, fp
   28c58:	0312      	lsls	r2, r2, #12
   28c5a:	4211      	tst	r1, r2
   28c5c:	d008      	beq.n	28c70 <__aeabi_dmul+0x3f0>
   28c5e:	4214      	tst	r4, r2
   28c60:	d106      	bne.n	28c70 <__aeabi_dmul+0x3f0>
   28c62:	4322      	orrs	r2, r4
   28c64:	0312      	lsls	r2, r2, #12
   28c66:	0b12      	lsrs	r2, r2, #12
   28c68:	4645      	mov	r5, r8
   28c6a:	4699      	mov	r9, r3
   28c6c:	4c43      	ldr	r4, [pc, #268]	; (28d7c <__aeabi_dmul+0x4fc>)
   28c6e:	e66e      	b.n	2894e <__aeabi_dmul+0xce>
   28c70:	465b      	mov	r3, fp
   28c72:	431a      	orrs	r2, r3
   28c74:	0312      	lsls	r2, r2, #12
   28c76:	0b12      	lsrs	r2, r2, #12
   28c78:	4c40      	ldr	r4, [pc, #256]	; (28d7c <__aeabi_dmul+0x4fc>)
   28c7a:	e668      	b.n	2894e <__aeabi_dmul+0xce>
   28c7c:	0003      	movs	r3, r0
   28c7e:	4654      	mov	r4, sl
   28c80:	3b28      	subs	r3, #40	; 0x28
   28c82:	409c      	lsls	r4, r3
   28c84:	2300      	movs	r3, #0
   28c86:	e6b9      	b.n	289fc <__aeabi_dmul+0x17c>
   28c88:	f000 fcb0 	bl	295ec <__clzsi2>
   28c8c:	3020      	adds	r0, #32
   28c8e:	e6a6      	b.n	289de <__aeabi_dmul+0x15e>
   28c90:	0003      	movs	r3, r0
   28c92:	3b28      	subs	r3, #40	; 0x28
   28c94:	409f      	lsls	r7, r3
   28c96:	2300      	movs	r3, #0
   28c98:	46bb      	mov	fp, r7
   28c9a:	4699      	mov	r9, r3
   28c9c:	e68a      	b.n	289b4 <__aeabi_dmul+0x134>
   28c9e:	f000 fca5 	bl	295ec <__clzsi2>
   28ca2:	3020      	adds	r0, #32
   28ca4:	e674      	b.n	28990 <__aeabi_dmul+0x110>
   28ca6:	46b4      	mov	ip, r6
   28ca8:	e7ad      	b.n	28c06 <__aeabi_dmul+0x386>
   28caa:	2501      	movs	r5, #1
   28cac:	1a2a      	subs	r2, r5, r0
   28cae:	2a38      	cmp	r2, #56	; 0x38
   28cb0:	dd06      	ble.n	28cc0 <__aeabi_dmul+0x440>
   28cb2:	9b01      	ldr	r3, [sp, #4]
   28cb4:	2400      	movs	r4, #0
   28cb6:	401d      	ands	r5, r3
   28cb8:	2300      	movs	r3, #0
   28cba:	2200      	movs	r2, #0
   28cbc:	4699      	mov	r9, r3
   28cbe:	e646      	b.n	2894e <__aeabi_dmul+0xce>
   28cc0:	2a1f      	cmp	r2, #31
   28cc2:	dc21      	bgt.n	28d08 <__aeabi_dmul+0x488>
   28cc4:	2520      	movs	r5, #32
   28cc6:	0020      	movs	r0, r4
   28cc8:	1aad      	subs	r5, r5, r2
   28cca:	001e      	movs	r6, r3
   28ccc:	40ab      	lsls	r3, r5
   28cce:	40a8      	lsls	r0, r5
   28cd0:	40d6      	lsrs	r6, r2
   28cd2:	1e5d      	subs	r5, r3, #1
   28cd4:	41ab      	sbcs	r3, r5
   28cd6:	4330      	orrs	r0, r6
   28cd8:	4318      	orrs	r0, r3
   28cda:	40d4      	lsrs	r4, r2
   28cdc:	0743      	lsls	r3, r0, #29
   28cde:	d009      	beq.n	28cf4 <__aeabi_dmul+0x474>
   28ce0:	230f      	movs	r3, #15
   28ce2:	4003      	ands	r3, r0
   28ce4:	2b04      	cmp	r3, #4
   28ce6:	d005      	beq.n	28cf4 <__aeabi_dmul+0x474>
   28ce8:	0003      	movs	r3, r0
   28cea:	1d18      	adds	r0, r3, #4
   28cec:	4298      	cmp	r0, r3
   28cee:	419b      	sbcs	r3, r3
   28cf0:	425b      	negs	r3, r3
   28cf2:	18e4      	adds	r4, r4, r3
   28cf4:	0223      	lsls	r3, r4, #8
   28cf6:	d521      	bpl.n	28d3c <__aeabi_dmul+0x4bc>
   28cf8:	2501      	movs	r5, #1
   28cfa:	9b01      	ldr	r3, [sp, #4]
   28cfc:	2401      	movs	r4, #1
   28cfe:	401d      	ands	r5, r3
   28d00:	2300      	movs	r3, #0
   28d02:	2200      	movs	r2, #0
   28d04:	4699      	mov	r9, r3
   28d06:	e622      	b.n	2894e <__aeabi_dmul+0xce>
   28d08:	251f      	movs	r5, #31
   28d0a:	0021      	movs	r1, r4
   28d0c:	426d      	negs	r5, r5
   28d0e:	1a28      	subs	r0, r5, r0
   28d10:	40c1      	lsrs	r1, r0
   28d12:	0008      	movs	r0, r1
   28d14:	2a20      	cmp	r2, #32
   28d16:	d01d      	beq.n	28d54 <__aeabi_dmul+0x4d4>
   28d18:	355f      	adds	r5, #95	; 0x5f
   28d1a:	1aaa      	subs	r2, r5, r2
   28d1c:	4094      	lsls	r4, r2
   28d1e:	4323      	orrs	r3, r4
   28d20:	1e5c      	subs	r4, r3, #1
   28d22:	41a3      	sbcs	r3, r4
   28d24:	2507      	movs	r5, #7
   28d26:	4303      	orrs	r3, r0
   28d28:	401d      	ands	r5, r3
   28d2a:	2200      	movs	r2, #0
   28d2c:	2d00      	cmp	r5, #0
   28d2e:	d009      	beq.n	28d44 <__aeabi_dmul+0x4c4>
   28d30:	220f      	movs	r2, #15
   28d32:	2400      	movs	r4, #0
   28d34:	401a      	ands	r2, r3
   28d36:	0018      	movs	r0, r3
   28d38:	2a04      	cmp	r2, #4
   28d3a:	d1d6      	bne.n	28cea <__aeabi_dmul+0x46a>
   28d3c:	0003      	movs	r3, r0
   28d3e:	0765      	lsls	r5, r4, #29
   28d40:	0264      	lsls	r4, r4, #9
   28d42:	0b22      	lsrs	r2, r4, #12
   28d44:	08db      	lsrs	r3, r3, #3
   28d46:	432b      	orrs	r3, r5
   28d48:	2501      	movs	r5, #1
   28d4a:	4699      	mov	r9, r3
   28d4c:	9b01      	ldr	r3, [sp, #4]
   28d4e:	2400      	movs	r4, #0
   28d50:	401d      	ands	r5, r3
   28d52:	e5fc      	b.n	2894e <__aeabi_dmul+0xce>
   28d54:	2400      	movs	r4, #0
   28d56:	e7e2      	b.n	28d1e <__aeabi_dmul+0x49e>
   28d58:	2280      	movs	r2, #128	; 0x80
   28d5a:	2501      	movs	r5, #1
   28d5c:	0312      	lsls	r2, r2, #12
   28d5e:	4322      	orrs	r2, r4
   28d60:	9901      	ldr	r1, [sp, #4]
   28d62:	0312      	lsls	r2, r2, #12
   28d64:	0b12      	lsrs	r2, r2, #12
   28d66:	400d      	ands	r5, r1
   28d68:	4699      	mov	r9, r3
   28d6a:	4c04      	ldr	r4, [pc, #16]	; (28d7c <__aeabi_dmul+0x4fc>)
   28d6c:	e5ef      	b.n	2894e <__aeabi_dmul+0xce>
   28d6e:	46c0      	nop			; (mov r8, r8)
   28d70:	000003ff 	.word	0x000003ff
   28d74:	feffffff 	.word	0xfeffffff
   28d78:	000007fe 	.word	0x000007fe
   28d7c:	000007ff 	.word	0x000007ff

00028d80 <__aeabi_dsub>:
   28d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   28d82:	4646      	mov	r6, r8
   28d84:	46d6      	mov	lr, sl
   28d86:	464f      	mov	r7, r9
   28d88:	030c      	lsls	r4, r1, #12
   28d8a:	b5c0      	push	{r6, r7, lr}
   28d8c:	0fcd      	lsrs	r5, r1, #31
   28d8e:	004e      	lsls	r6, r1, #1
   28d90:	0a61      	lsrs	r1, r4, #9
   28d92:	0f44      	lsrs	r4, r0, #29
   28d94:	430c      	orrs	r4, r1
   28d96:	00c1      	lsls	r1, r0, #3
   28d98:	0058      	lsls	r0, r3, #1
   28d9a:	0d40      	lsrs	r0, r0, #21
   28d9c:	4684      	mov	ip, r0
   28d9e:	468a      	mov	sl, r1
   28da0:	000f      	movs	r7, r1
   28da2:	0319      	lsls	r1, r3, #12
   28da4:	0f50      	lsrs	r0, r2, #29
   28da6:	0a49      	lsrs	r1, r1, #9
   28da8:	4301      	orrs	r1, r0
   28daa:	48c6      	ldr	r0, [pc, #792]	; (290c4 <__aeabi_dsub+0x344>)
   28dac:	0d76      	lsrs	r6, r6, #21
   28dae:	46a8      	mov	r8, r5
   28db0:	0fdb      	lsrs	r3, r3, #31
   28db2:	00d2      	lsls	r2, r2, #3
   28db4:	4584      	cmp	ip, r0
   28db6:	d100      	bne.n	28dba <__aeabi_dsub+0x3a>
   28db8:	e0d8      	b.n	28f6c <__aeabi_dsub+0x1ec>
   28dba:	2001      	movs	r0, #1
   28dbc:	4043      	eors	r3, r0
   28dbe:	42ab      	cmp	r3, r5
   28dc0:	d100      	bne.n	28dc4 <__aeabi_dsub+0x44>
   28dc2:	e0a6      	b.n	28f12 <__aeabi_dsub+0x192>
   28dc4:	4660      	mov	r0, ip
   28dc6:	1a35      	subs	r5, r6, r0
   28dc8:	2d00      	cmp	r5, #0
   28dca:	dc00      	bgt.n	28dce <__aeabi_dsub+0x4e>
   28dcc:	e105      	b.n	28fda <__aeabi_dsub+0x25a>
   28dce:	2800      	cmp	r0, #0
   28dd0:	d110      	bne.n	28df4 <__aeabi_dsub+0x74>
   28dd2:	000b      	movs	r3, r1
   28dd4:	4313      	orrs	r3, r2
   28dd6:	d100      	bne.n	28dda <__aeabi_dsub+0x5a>
   28dd8:	e0d7      	b.n	28f8a <__aeabi_dsub+0x20a>
   28dda:	1e6b      	subs	r3, r5, #1
   28ddc:	2b00      	cmp	r3, #0
   28dde:	d000      	beq.n	28de2 <__aeabi_dsub+0x62>
   28de0:	e14b      	b.n	2907a <__aeabi_dsub+0x2fa>
   28de2:	4653      	mov	r3, sl
   28de4:	1a9f      	subs	r7, r3, r2
   28de6:	45ba      	cmp	sl, r7
   28de8:	4180      	sbcs	r0, r0
   28dea:	1a64      	subs	r4, r4, r1
   28dec:	4240      	negs	r0, r0
   28dee:	1a24      	subs	r4, r4, r0
   28df0:	2601      	movs	r6, #1
   28df2:	e01e      	b.n	28e32 <__aeabi_dsub+0xb2>
   28df4:	4bb3      	ldr	r3, [pc, #716]	; (290c4 <__aeabi_dsub+0x344>)
   28df6:	429e      	cmp	r6, r3
   28df8:	d048      	beq.n	28e8c <__aeabi_dsub+0x10c>
   28dfa:	2380      	movs	r3, #128	; 0x80
   28dfc:	041b      	lsls	r3, r3, #16
   28dfe:	4319      	orrs	r1, r3
   28e00:	2d38      	cmp	r5, #56	; 0x38
   28e02:	dd00      	ble.n	28e06 <__aeabi_dsub+0x86>
   28e04:	e119      	b.n	2903a <__aeabi_dsub+0x2ba>
   28e06:	2d1f      	cmp	r5, #31
   28e08:	dd00      	ble.n	28e0c <__aeabi_dsub+0x8c>
   28e0a:	e14c      	b.n	290a6 <__aeabi_dsub+0x326>
   28e0c:	2320      	movs	r3, #32
   28e0e:	000f      	movs	r7, r1
   28e10:	1b5b      	subs	r3, r3, r5
   28e12:	0010      	movs	r0, r2
   28e14:	409a      	lsls	r2, r3
   28e16:	409f      	lsls	r7, r3
   28e18:	40e8      	lsrs	r0, r5
   28e1a:	1e53      	subs	r3, r2, #1
   28e1c:	419a      	sbcs	r2, r3
   28e1e:	40e9      	lsrs	r1, r5
   28e20:	4307      	orrs	r7, r0
   28e22:	4317      	orrs	r7, r2
   28e24:	4653      	mov	r3, sl
   28e26:	1bdf      	subs	r7, r3, r7
   28e28:	1a61      	subs	r1, r4, r1
   28e2a:	45ba      	cmp	sl, r7
   28e2c:	41a4      	sbcs	r4, r4
   28e2e:	4264      	negs	r4, r4
   28e30:	1b0c      	subs	r4, r1, r4
   28e32:	0223      	lsls	r3, r4, #8
   28e34:	d400      	bmi.n	28e38 <__aeabi_dsub+0xb8>
   28e36:	e0c5      	b.n	28fc4 <__aeabi_dsub+0x244>
   28e38:	0264      	lsls	r4, r4, #9
   28e3a:	0a65      	lsrs	r5, r4, #9
   28e3c:	2d00      	cmp	r5, #0
   28e3e:	d100      	bne.n	28e42 <__aeabi_dsub+0xc2>
   28e40:	e0f6      	b.n	29030 <__aeabi_dsub+0x2b0>
   28e42:	0028      	movs	r0, r5
   28e44:	f000 fbd2 	bl	295ec <__clzsi2>
   28e48:	0003      	movs	r3, r0
   28e4a:	3b08      	subs	r3, #8
   28e4c:	2b1f      	cmp	r3, #31
   28e4e:	dd00      	ble.n	28e52 <__aeabi_dsub+0xd2>
   28e50:	e0e9      	b.n	29026 <__aeabi_dsub+0x2a6>
   28e52:	2220      	movs	r2, #32
   28e54:	003c      	movs	r4, r7
   28e56:	1ad2      	subs	r2, r2, r3
   28e58:	409d      	lsls	r5, r3
   28e5a:	40d4      	lsrs	r4, r2
   28e5c:	409f      	lsls	r7, r3
   28e5e:	4325      	orrs	r5, r4
   28e60:	429e      	cmp	r6, r3
   28e62:	dd00      	ble.n	28e66 <__aeabi_dsub+0xe6>
   28e64:	e0db      	b.n	2901e <__aeabi_dsub+0x29e>
   28e66:	1b9e      	subs	r6, r3, r6
   28e68:	1c73      	adds	r3, r6, #1
   28e6a:	2b1f      	cmp	r3, #31
   28e6c:	dd00      	ble.n	28e70 <__aeabi_dsub+0xf0>
   28e6e:	e10a      	b.n	29086 <__aeabi_dsub+0x306>
   28e70:	2220      	movs	r2, #32
   28e72:	0038      	movs	r0, r7
   28e74:	1ad2      	subs	r2, r2, r3
   28e76:	0029      	movs	r1, r5
   28e78:	4097      	lsls	r7, r2
   28e7a:	002c      	movs	r4, r5
   28e7c:	4091      	lsls	r1, r2
   28e7e:	40d8      	lsrs	r0, r3
   28e80:	1e7a      	subs	r2, r7, #1
   28e82:	4197      	sbcs	r7, r2
   28e84:	40dc      	lsrs	r4, r3
   28e86:	2600      	movs	r6, #0
   28e88:	4301      	orrs	r1, r0
   28e8a:	430f      	orrs	r7, r1
   28e8c:	077b      	lsls	r3, r7, #29
   28e8e:	d009      	beq.n	28ea4 <__aeabi_dsub+0x124>
   28e90:	230f      	movs	r3, #15
   28e92:	403b      	ands	r3, r7
   28e94:	2b04      	cmp	r3, #4
   28e96:	d005      	beq.n	28ea4 <__aeabi_dsub+0x124>
   28e98:	1d3b      	adds	r3, r7, #4
   28e9a:	42bb      	cmp	r3, r7
   28e9c:	41bf      	sbcs	r7, r7
   28e9e:	427f      	negs	r7, r7
   28ea0:	19e4      	adds	r4, r4, r7
   28ea2:	001f      	movs	r7, r3
   28ea4:	0223      	lsls	r3, r4, #8
   28ea6:	d525      	bpl.n	28ef4 <__aeabi_dsub+0x174>
   28ea8:	4b86      	ldr	r3, [pc, #536]	; (290c4 <__aeabi_dsub+0x344>)
   28eaa:	3601      	adds	r6, #1
   28eac:	429e      	cmp	r6, r3
   28eae:	d100      	bne.n	28eb2 <__aeabi_dsub+0x132>
   28eb0:	e0af      	b.n	29012 <__aeabi_dsub+0x292>
   28eb2:	4b85      	ldr	r3, [pc, #532]	; (290c8 <__aeabi_dsub+0x348>)
   28eb4:	2501      	movs	r5, #1
   28eb6:	401c      	ands	r4, r3
   28eb8:	4643      	mov	r3, r8
   28eba:	0762      	lsls	r2, r4, #29
   28ebc:	08ff      	lsrs	r7, r7, #3
   28ebe:	0264      	lsls	r4, r4, #9
   28ec0:	0576      	lsls	r6, r6, #21
   28ec2:	4317      	orrs	r7, r2
   28ec4:	0b24      	lsrs	r4, r4, #12
   28ec6:	0d76      	lsrs	r6, r6, #21
   28ec8:	401d      	ands	r5, r3
   28eca:	2100      	movs	r1, #0
   28ecc:	0324      	lsls	r4, r4, #12
   28ece:	0b23      	lsrs	r3, r4, #12
   28ed0:	0d0c      	lsrs	r4, r1, #20
   28ed2:	4a7e      	ldr	r2, [pc, #504]	; (290cc <__aeabi_dsub+0x34c>)
   28ed4:	0524      	lsls	r4, r4, #20
   28ed6:	431c      	orrs	r4, r3
   28ed8:	4014      	ands	r4, r2
   28eda:	0533      	lsls	r3, r6, #20
   28edc:	4323      	orrs	r3, r4
   28ede:	005b      	lsls	r3, r3, #1
   28ee0:	07ed      	lsls	r5, r5, #31
   28ee2:	085b      	lsrs	r3, r3, #1
   28ee4:	432b      	orrs	r3, r5
   28ee6:	0038      	movs	r0, r7
   28ee8:	0019      	movs	r1, r3
   28eea:	bc1c      	pop	{r2, r3, r4}
   28eec:	4690      	mov	r8, r2
   28eee:	4699      	mov	r9, r3
   28ef0:	46a2      	mov	sl, r4
   28ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28ef4:	2501      	movs	r5, #1
   28ef6:	4643      	mov	r3, r8
   28ef8:	0762      	lsls	r2, r4, #29
   28efa:	08ff      	lsrs	r7, r7, #3
   28efc:	4317      	orrs	r7, r2
   28efe:	08e4      	lsrs	r4, r4, #3
   28f00:	401d      	ands	r5, r3
   28f02:	4b70      	ldr	r3, [pc, #448]	; (290c4 <__aeabi_dsub+0x344>)
   28f04:	429e      	cmp	r6, r3
   28f06:	d036      	beq.n	28f76 <__aeabi_dsub+0x1f6>
   28f08:	0324      	lsls	r4, r4, #12
   28f0a:	0576      	lsls	r6, r6, #21
   28f0c:	0b24      	lsrs	r4, r4, #12
   28f0e:	0d76      	lsrs	r6, r6, #21
   28f10:	e7db      	b.n	28eca <__aeabi_dsub+0x14a>
   28f12:	4663      	mov	r3, ip
   28f14:	1af3      	subs	r3, r6, r3
   28f16:	2b00      	cmp	r3, #0
   28f18:	dc00      	bgt.n	28f1c <__aeabi_dsub+0x19c>
   28f1a:	e094      	b.n	29046 <__aeabi_dsub+0x2c6>
   28f1c:	4660      	mov	r0, ip
   28f1e:	2800      	cmp	r0, #0
   28f20:	d035      	beq.n	28f8e <__aeabi_dsub+0x20e>
   28f22:	4868      	ldr	r0, [pc, #416]	; (290c4 <__aeabi_dsub+0x344>)
   28f24:	4286      	cmp	r6, r0
   28f26:	d0b1      	beq.n	28e8c <__aeabi_dsub+0x10c>
   28f28:	2780      	movs	r7, #128	; 0x80
   28f2a:	043f      	lsls	r7, r7, #16
   28f2c:	4339      	orrs	r1, r7
   28f2e:	2b38      	cmp	r3, #56	; 0x38
   28f30:	dc00      	bgt.n	28f34 <__aeabi_dsub+0x1b4>
   28f32:	e0fd      	b.n	29130 <__aeabi_dsub+0x3b0>
   28f34:	430a      	orrs	r2, r1
   28f36:	0017      	movs	r7, r2
   28f38:	2100      	movs	r1, #0
   28f3a:	1e7a      	subs	r2, r7, #1
   28f3c:	4197      	sbcs	r7, r2
   28f3e:	4457      	add	r7, sl
   28f40:	4557      	cmp	r7, sl
   28f42:	4180      	sbcs	r0, r0
   28f44:	1909      	adds	r1, r1, r4
   28f46:	4244      	negs	r4, r0
   28f48:	190c      	adds	r4, r1, r4
   28f4a:	0223      	lsls	r3, r4, #8
   28f4c:	d53a      	bpl.n	28fc4 <__aeabi_dsub+0x244>
   28f4e:	4b5d      	ldr	r3, [pc, #372]	; (290c4 <__aeabi_dsub+0x344>)
   28f50:	3601      	adds	r6, #1
   28f52:	429e      	cmp	r6, r3
   28f54:	d100      	bne.n	28f58 <__aeabi_dsub+0x1d8>
   28f56:	e14b      	b.n	291f0 <__aeabi_dsub+0x470>
   28f58:	2201      	movs	r2, #1
   28f5a:	4b5b      	ldr	r3, [pc, #364]	; (290c8 <__aeabi_dsub+0x348>)
   28f5c:	401c      	ands	r4, r3
   28f5e:	087b      	lsrs	r3, r7, #1
   28f60:	4017      	ands	r7, r2
   28f62:	431f      	orrs	r7, r3
   28f64:	07e2      	lsls	r2, r4, #31
   28f66:	4317      	orrs	r7, r2
   28f68:	0864      	lsrs	r4, r4, #1
   28f6a:	e78f      	b.n	28e8c <__aeabi_dsub+0x10c>
   28f6c:	0008      	movs	r0, r1
   28f6e:	4310      	orrs	r0, r2
   28f70:	d000      	beq.n	28f74 <__aeabi_dsub+0x1f4>
   28f72:	e724      	b.n	28dbe <__aeabi_dsub+0x3e>
   28f74:	e721      	b.n	28dba <__aeabi_dsub+0x3a>
   28f76:	0023      	movs	r3, r4
   28f78:	433b      	orrs	r3, r7
   28f7a:	d100      	bne.n	28f7e <__aeabi_dsub+0x1fe>
   28f7c:	e1b9      	b.n	292f2 <__aeabi_dsub+0x572>
   28f7e:	2280      	movs	r2, #128	; 0x80
   28f80:	0312      	lsls	r2, r2, #12
   28f82:	4314      	orrs	r4, r2
   28f84:	0324      	lsls	r4, r4, #12
   28f86:	0b24      	lsrs	r4, r4, #12
   28f88:	e79f      	b.n	28eca <__aeabi_dsub+0x14a>
   28f8a:	002e      	movs	r6, r5
   28f8c:	e77e      	b.n	28e8c <__aeabi_dsub+0x10c>
   28f8e:	0008      	movs	r0, r1
   28f90:	4310      	orrs	r0, r2
   28f92:	d100      	bne.n	28f96 <__aeabi_dsub+0x216>
   28f94:	e0ca      	b.n	2912c <__aeabi_dsub+0x3ac>
   28f96:	1e58      	subs	r0, r3, #1
   28f98:	4684      	mov	ip, r0
   28f9a:	2800      	cmp	r0, #0
   28f9c:	d000      	beq.n	28fa0 <__aeabi_dsub+0x220>
   28f9e:	e0e7      	b.n	29170 <__aeabi_dsub+0x3f0>
   28fa0:	4452      	add	r2, sl
   28fa2:	4552      	cmp	r2, sl
   28fa4:	4180      	sbcs	r0, r0
   28fa6:	1864      	adds	r4, r4, r1
   28fa8:	4240      	negs	r0, r0
   28faa:	1824      	adds	r4, r4, r0
   28fac:	0017      	movs	r7, r2
   28fae:	2601      	movs	r6, #1
   28fb0:	0223      	lsls	r3, r4, #8
   28fb2:	d507      	bpl.n	28fc4 <__aeabi_dsub+0x244>
   28fb4:	2602      	movs	r6, #2
   28fb6:	e7cf      	b.n	28f58 <__aeabi_dsub+0x1d8>
   28fb8:	4664      	mov	r4, ip
   28fba:	432c      	orrs	r4, r5
   28fbc:	d100      	bne.n	28fc0 <__aeabi_dsub+0x240>
   28fbe:	e1b3      	b.n	29328 <__aeabi_dsub+0x5a8>
   28fc0:	002c      	movs	r4, r5
   28fc2:	4667      	mov	r7, ip
   28fc4:	077b      	lsls	r3, r7, #29
   28fc6:	d000      	beq.n	28fca <__aeabi_dsub+0x24a>
   28fc8:	e762      	b.n	28e90 <__aeabi_dsub+0x110>
   28fca:	0763      	lsls	r3, r4, #29
   28fcc:	08ff      	lsrs	r7, r7, #3
   28fce:	431f      	orrs	r7, r3
   28fd0:	2501      	movs	r5, #1
   28fd2:	4643      	mov	r3, r8
   28fd4:	08e4      	lsrs	r4, r4, #3
   28fd6:	401d      	ands	r5, r3
   28fd8:	e793      	b.n	28f02 <__aeabi_dsub+0x182>
   28fda:	2d00      	cmp	r5, #0
   28fdc:	d178      	bne.n	290d0 <__aeabi_dsub+0x350>
   28fde:	1c75      	adds	r5, r6, #1
   28fe0:	056d      	lsls	r5, r5, #21
   28fe2:	0d6d      	lsrs	r5, r5, #21
   28fe4:	2d01      	cmp	r5, #1
   28fe6:	dc00      	bgt.n	28fea <__aeabi_dsub+0x26a>
   28fe8:	e0f2      	b.n	291d0 <__aeabi_dsub+0x450>
   28fea:	4650      	mov	r0, sl
   28fec:	1a80      	subs	r0, r0, r2
   28fee:	4582      	cmp	sl, r0
   28ff0:	41bf      	sbcs	r7, r7
   28ff2:	1a65      	subs	r5, r4, r1
   28ff4:	427f      	negs	r7, r7
   28ff6:	1bed      	subs	r5, r5, r7
   28ff8:	4684      	mov	ip, r0
   28ffa:	0228      	lsls	r0, r5, #8
   28ffc:	d400      	bmi.n	29000 <__aeabi_dsub+0x280>
   28ffe:	e08c      	b.n	2911a <__aeabi_dsub+0x39a>
   29000:	4650      	mov	r0, sl
   29002:	1a17      	subs	r7, r2, r0
   29004:	42ba      	cmp	r2, r7
   29006:	4192      	sbcs	r2, r2
   29008:	1b0c      	subs	r4, r1, r4
   2900a:	4255      	negs	r5, r2
   2900c:	1b65      	subs	r5, r4, r5
   2900e:	4698      	mov	r8, r3
   29010:	e714      	b.n	28e3c <__aeabi_dsub+0xbc>
   29012:	2501      	movs	r5, #1
   29014:	4643      	mov	r3, r8
   29016:	2400      	movs	r4, #0
   29018:	401d      	ands	r5, r3
   2901a:	2700      	movs	r7, #0
   2901c:	e755      	b.n	28eca <__aeabi_dsub+0x14a>
   2901e:	4c2a      	ldr	r4, [pc, #168]	; (290c8 <__aeabi_dsub+0x348>)
   29020:	1af6      	subs	r6, r6, r3
   29022:	402c      	ands	r4, r5
   29024:	e732      	b.n	28e8c <__aeabi_dsub+0x10c>
   29026:	003d      	movs	r5, r7
   29028:	3828      	subs	r0, #40	; 0x28
   2902a:	4085      	lsls	r5, r0
   2902c:	2700      	movs	r7, #0
   2902e:	e717      	b.n	28e60 <__aeabi_dsub+0xe0>
   29030:	0038      	movs	r0, r7
   29032:	f000 fadb 	bl	295ec <__clzsi2>
   29036:	3020      	adds	r0, #32
   29038:	e706      	b.n	28e48 <__aeabi_dsub+0xc8>
   2903a:	430a      	orrs	r2, r1
   2903c:	0017      	movs	r7, r2
   2903e:	2100      	movs	r1, #0
   29040:	1e7a      	subs	r2, r7, #1
   29042:	4197      	sbcs	r7, r2
   29044:	e6ee      	b.n	28e24 <__aeabi_dsub+0xa4>
   29046:	2b00      	cmp	r3, #0
   29048:	d000      	beq.n	2904c <__aeabi_dsub+0x2cc>
   2904a:	e0e5      	b.n	29218 <__aeabi_dsub+0x498>
   2904c:	1c73      	adds	r3, r6, #1
   2904e:	469c      	mov	ip, r3
   29050:	055b      	lsls	r3, r3, #21
   29052:	0d5b      	lsrs	r3, r3, #21
   29054:	2b01      	cmp	r3, #1
   29056:	dc00      	bgt.n	2905a <__aeabi_dsub+0x2da>
   29058:	e09f      	b.n	2919a <__aeabi_dsub+0x41a>
   2905a:	4b1a      	ldr	r3, [pc, #104]	; (290c4 <__aeabi_dsub+0x344>)
   2905c:	459c      	cmp	ip, r3
   2905e:	d100      	bne.n	29062 <__aeabi_dsub+0x2e2>
   29060:	e0c5      	b.n	291ee <__aeabi_dsub+0x46e>
   29062:	4452      	add	r2, sl
   29064:	4552      	cmp	r2, sl
   29066:	4180      	sbcs	r0, r0
   29068:	1864      	adds	r4, r4, r1
   2906a:	4240      	negs	r0, r0
   2906c:	1824      	adds	r4, r4, r0
   2906e:	07e7      	lsls	r7, r4, #31
   29070:	0852      	lsrs	r2, r2, #1
   29072:	4317      	orrs	r7, r2
   29074:	0864      	lsrs	r4, r4, #1
   29076:	4666      	mov	r6, ip
   29078:	e708      	b.n	28e8c <__aeabi_dsub+0x10c>
   2907a:	4812      	ldr	r0, [pc, #72]	; (290c4 <__aeabi_dsub+0x344>)
   2907c:	4285      	cmp	r5, r0
   2907e:	d100      	bne.n	29082 <__aeabi_dsub+0x302>
   29080:	e085      	b.n	2918e <__aeabi_dsub+0x40e>
   29082:	001d      	movs	r5, r3
   29084:	e6bc      	b.n	28e00 <__aeabi_dsub+0x80>
   29086:	0029      	movs	r1, r5
   29088:	3e1f      	subs	r6, #31
   2908a:	40f1      	lsrs	r1, r6
   2908c:	2b20      	cmp	r3, #32
   2908e:	d100      	bne.n	29092 <__aeabi_dsub+0x312>
   29090:	e07f      	b.n	29192 <__aeabi_dsub+0x412>
   29092:	2240      	movs	r2, #64	; 0x40
   29094:	1ad3      	subs	r3, r2, r3
   29096:	409d      	lsls	r5, r3
   29098:	432f      	orrs	r7, r5
   2909a:	1e7d      	subs	r5, r7, #1
   2909c:	41af      	sbcs	r7, r5
   2909e:	2400      	movs	r4, #0
   290a0:	430f      	orrs	r7, r1
   290a2:	2600      	movs	r6, #0
   290a4:	e78e      	b.n	28fc4 <__aeabi_dsub+0x244>
   290a6:	002b      	movs	r3, r5
   290a8:	000f      	movs	r7, r1
   290aa:	3b20      	subs	r3, #32
   290ac:	40df      	lsrs	r7, r3
   290ae:	2d20      	cmp	r5, #32
   290b0:	d071      	beq.n	29196 <__aeabi_dsub+0x416>
   290b2:	2340      	movs	r3, #64	; 0x40
   290b4:	1b5d      	subs	r5, r3, r5
   290b6:	40a9      	lsls	r1, r5
   290b8:	430a      	orrs	r2, r1
   290ba:	1e51      	subs	r1, r2, #1
   290bc:	418a      	sbcs	r2, r1
   290be:	2100      	movs	r1, #0
   290c0:	4317      	orrs	r7, r2
   290c2:	e6af      	b.n	28e24 <__aeabi_dsub+0xa4>
   290c4:	000007ff 	.word	0x000007ff
   290c8:	ff7fffff 	.word	0xff7fffff
   290cc:	800fffff 	.word	0x800fffff
   290d0:	2e00      	cmp	r6, #0
   290d2:	d03e      	beq.n	29152 <__aeabi_dsub+0x3d2>
   290d4:	4eb3      	ldr	r6, [pc, #716]	; (293a4 <__aeabi_dsub+0x624>)
   290d6:	45b4      	cmp	ip, r6
   290d8:	d045      	beq.n	29166 <__aeabi_dsub+0x3e6>
   290da:	2680      	movs	r6, #128	; 0x80
   290dc:	0436      	lsls	r6, r6, #16
   290de:	426d      	negs	r5, r5
   290e0:	4334      	orrs	r4, r6
   290e2:	2d38      	cmp	r5, #56	; 0x38
   290e4:	dd00      	ble.n	290e8 <__aeabi_dsub+0x368>
   290e6:	e0a8      	b.n	2923a <__aeabi_dsub+0x4ba>
   290e8:	2d1f      	cmp	r5, #31
   290ea:	dd00      	ble.n	290ee <__aeabi_dsub+0x36e>
   290ec:	e11f      	b.n	2932e <__aeabi_dsub+0x5ae>
   290ee:	2620      	movs	r6, #32
   290f0:	0027      	movs	r7, r4
   290f2:	4650      	mov	r0, sl
   290f4:	1b76      	subs	r6, r6, r5
   290f6:	40b7      	lsls	r7, r6
   290f8:	40e8      	lsrs	r0, r5
   290fa:	4307      	orrs	r7, r0
   290fc:	4650      	mov	r0, sl
   290fe:	40b0      	lsls	r0, r6
   29100:	1e46      	subs	r6, r0, #1
   29102:	41b0      	sbcs	r0, r6
   29104:	40ec      	lsrs	r4, r5
   29106:	4338      	orrs	r0, r7
   29108:	1a17      	subs	r7, r2, r0
   2910a:	42ba      	cmp	r2, r7
   2910c:	4192      	sbcs	r2, r2
   2910e:	1b0c      	subs	r4, r1, r4
   29110:	4252      	negs	r2, r2
   29112:	1aa4      	subs	r4, r4, r2
   29114:	4666      	mov	r6, ip
   29116:	4698      	mov	r8, r3
   29118:	e68b      	b.n	28e32 <__aeabi_dsub+0xb2>
   2911a:	4664      	mov	r4, ip
   2911c:	4667      	mov	r7, ip
   2911e:	432c      	orrs	r4, r5
   29120:	d000      	beq.n	29124 <__aeabi_dsub+0x3a4>
   29122:	e68b      	b.n	28e3c <__aeabi_dsub+0xbc>
   29124:	2500      	movs	r5, #0
   29126:	2600      	movs	r6, #0
   29128:	2700      	movs	r7, #0
   2912a:	e6ea      	b.n	28f02 <__aeabi_dsub+0x182>
   2912c:	001e      	movs	r6, r3
   2912e:	e6ad      	b.n	28e8c <__aeabi_dsub+0x10c>
   29130:	2b1f      	cmp	r3, #31
   29132:	dc60      	bgt.n	291f6 <__aeabi_dsub+0x476>
   29134:	2720      	movs	r7, #32
   29136:	1af8      	subs	r0, r7, r3
   29138:	000f      	movs	r7, r1
   2913a:	4684      	mov	ip, r0
   2913c:	4087      	lsls	r7, r0
   2913e:	0010      	movs	r0, r2
   29140:	40d8      	lsrs	r0, r3
   29142:	4307      	orrs	r7, r0
   29144:	4660      	mov	r0, ip
   29146:	4082      	lsls	r2, r0
   29148:	1e50      	subs	r0, r2, #1
   2914a:	4182      	sbcs	r2, r0
   2914c:	40d9      	lsrs	r1, r3
   2914e:	4317      	orrs	r7, r2
   29150:	e6f5      	b.n	28f3e <__aeabi_dsub+0x1be>
   29152:	0026      	movs	r6, r4
   29154:	4650      	mov	r0, sl
   29156:	4306      	orrs	r6, r0
   29158:	d005      	beq.n	29166 <__aeabi_dsub+0x3e6>
   2915a:	43ed      	mvns	r5, r5
   2915c:	2d00      	cmp	r5, #0
   2915e:	d0d3      	beq.n	29108 <__aeabi_dsub+0x388>
   29160:	4e90      	ldr	r6, [pc, #576]	; (293a4 <__aeabi_dsub+0x624>)
   29162:	45b4      	cmp	ip, r6
   29164:	d1bd      	bne.n	290e2 <__aeabi_dsub+0x362>
   29166:	000c      	movs	r4, r1
   29168:	0017      	movs	r7, r2
   2916a:	4666      	mov	r6, ip
   2916c:	4698      	mov	r8, r3
   2916e:	e68d      	b.n	28e8c <__aeabi_dsub+0x10c>
   29170:	488c      	ldr	r0, [pc, #560]	; (293a4 <__aeabi_dsub+0x624>)
   29172:	4283      	cmp	r3, r0
   29174:	d00b      	beq.n	2918e <__aeabi_dsub+0x40e>
   29176:	4663      	mov	r3, ip
   29178:	e6d9      	b.n	28f2e <__aeabi_dsub+0x1ae>
   2917a:	2d00      	cmp	r5, #0
   2917c:	d000      	beq.n	29180 <__aeabi_dsub+0x400>
   2917e:	e096      	b.n	292ae <__aeabi_dsub+0x52e>
   29180:	0008      	movs	r0, r1
   29182:	4310      	orrs	r0, r2
   29184:	d100      	bne.n	29188 <__aeabi_dsub+0x408>
   29186:	e0e2      	b.n	2934e <__aeabi_dsub+0x5ce>
   29188:	000c      	movs	r4, r1
   2918a:	0017      	movs	r7, r2
   2918c:	4698      	mov	r8, r3
   2918e:	4e85      	ldr	r6, [pc, #532]	; (293a4 <__aeabi_dsub+0x624>)
   29190:	e67c      	b.n	28e8c <__aeabi_dsub+0x10c>
   29192:	2500      	movs	r5, #0
   29194:	e780      	b.n	29098 <__aeabi_dsub+0x318>
   29196:	2100      	movs	r1, #0
   29198:	e78e      	b.n	290b8 <__aeabi_dsub+0x338>
   2919a:	0023      	movs	r3, r4
   2919c:	4650      	mov	r0, sl
   2919e:	4303      	orrs	r3, r0
   291a0:	2e00      	cmp	r6, #0
   291a2:	d000      	beq.n	291a6 <__aeabi_dsub+0x426>
   291a4:	e0a8      	b.n	292f8 <__aeabi_dsub+0x578>
   291a6:	2b00      	cmp	r3, #0
   291a8:	d100      	bne.n	291ac <__aeabi_dsub+0x42c>
   291aa:	e0de      	b.n	2936a <__aeabi_dsub+0x5ea>
   291ac:	000b      	movs	r3, r1
   291ae:	4313      	orrs	r3, r2
   291b0:	d100      	bne.n	291b4 <__aeabi_dsub+0x434>
   291b2:	e66b      	b.n	28e8c <__aeabi_dsub+0x10c>
   291b4:	4452      	add	r2, sl
   291b6:	4552      	cmp	r2, sl
   291b8:	4180      	sbcs	r0, r0
   291ba:	1864      	adds	r4, r4, r1
   291bc:	4240      	negs	r0, r0
   291be:	1824      	adds	r4, r4, r0
   291c0:	0017      	movs	r7, r2
   291c2:	0223      	lsls	r3, r4, #8
   291c4:	d400      	bmi.n	291c8 <__aeabi_dsub+0x448>
   291c6:	e6fd      	b.n	28fc4 <__aeabi_dsub+0x244>
   291c8:	4b77      	ldr	r3, [pc, #476]	; (293a8 <__aeabi_dsub+0x628>)
   291ca:	4666      	mov	r6, ip
   291cc:	401c      	ands	r4, r3
   291ce:	e65d      	b.n	28e8c <__aeabi_dsub+0x10c>
   291d0:	0025      	movs	r5, r4
   291d2:	4650      	mov	r0, sl
   291d4:	4305      	orrs	r5, r0
   291d6:	2e00      	cmp	r6, #0
   291d8:	d1cf      	bne.n	2917a <__aeabi_dsub+0x3fa>
   291da:	2d00      	cmp	r5, #0
   291dc:	d14f      	bne.n	2927e <__aeabi_dsub+0x4fe>
   291de:	000c      	movs	r4, r1
   291e0:	4314      	orrs	r4, r2
   291e2:	d100      	bne.n	291e6 <__aeabi_dsub+0x466>
   291e4:	e0a0      	b.n	29328 <__aeabi_dsub+0x5a8>
   291e6:	000c      	movs	r4, r1
   291e8:	0017      	movs	r7, r2
   291ea:	4698      	mov	r8, r3
   291ec:	e64e      	b.n	28e8c <__aeabi_dsub+0x10c>
   291ee:	4666      	mov	r6, ip
   291f0:	2400      	movs	r4, #0
   291f2:	2700      	movs	r7, #0
   291f4:	e685      	b.n	28f02 <__aeabi_dsub+0x182>
   291f6:	001f      	movs	r7, r3
   291f8:	0008      	movs	r0, r1
   291fa:	3f20      	subs	r7, #32
   291fc:	40f8      	lsrs	r0, r7
   291fe:	0007      	movs	r7, r0
   29200:	2b20      	cmp	r3, #32
   29202:	d100      	bne.n	29206 <__aeabi_dsub+0x486>
   29204:	e08e      	b.n	29324 <__aeabi_dsub+0x5a4>
   29206:	2040      	movs	r0, #64	; 0x40
   29208:	1ac3      	subs	r3, r0, r3
   2920a:	4099      	lsls	r1, r3
   2920c:	430a      	orrs	r2, r1
   2920e:	1e51      	subs	r1, r2, #1
   29210:	418a      	sbcs	r2, r1
   29212:	2100      	movs	r1, #0
   29214:	4317      	orrs	r7, r2
   29216:	e692      	b.n	28f3e <__aeabi_dsub+0x1be>
   29218:	2e00      	cmp	r6, #0
   2921a:	d114      	bne.n	29246 <__aeabi_dsub+0x4c6>
   2921c:	0026      	movs	r6, r4
   2921e:	4650      	mov	r0, sl
   29220:	4306      	orrs	r6, r0
   29222:	d062      	beq.n	292ea <__aeabi_dsub+0x56a>
   29224:	43db      	mvns	r3, r3
   29226:	2b00      	cmp	r3, #0
   29228:	d15c      	bne.n	292e4 <__aeabi_dsub+0x564>
   2922a:	1887      	adds	r7, r0, r2
   2922c:	4297      	cmp	r7, r2
   2922e:	4192      	sbcs	r2, r2
   29230:	1864      	adds	r4, r4, r1
   29232:	4252      	negs	r2, r2
   29234:	18a4      	adds	r4, r4, r2
   29236:	4666      	mov	r6, ip
   29238:	e687      	b.n	28f4a <__aeabi_dsub+0x1ca>
   2923a:	4650      	mov	r0, sl
   2923c:	4320      	orrs	r0, r4
   2923e:	1e44      	subs	r4, r0, #1
   29240:	41a0      	sbcs	r0, r4
   29242:	2400      	movs	r4, #0
   29244:	e760      	b.n	29108 <__aeabi_dsub+0x388>
   29246:	4e57      	ldr	r6, [pc, #348]	; (293a4 <__aeabi_dsub+0x624>)
   29248:	45b4      	cmp	ip, r6
   2924a:	d04e      	beq.n	292ea <__aeabi_dsub+0x56a>
   2924c:	2680      	movs	r6, #128	; 0x80
   2924e:	0436      	lsls	r6, r6, #16
   29250:	425b      	negs	r3, r3
   29252:	4334      	orrs	r4, r6
   29254:	2b38      	cmp	r3, #56	; 0x38
   29256:	dd00      	ble.n	2925a <__aeabi_dsub+0x4da>
   29258:	e07f      	b.n	2935a <__aeabi_dsub+0x5da>
   2925a:	2b1f      	cmp	r3, #31
   2925c:	dd00      	ble.n	29260 <__aeabi_dsub+0x4e0>
   2925e:	e08b      	b.n	29378 <__aeabi_dsub+0x5f8>
   29260:	2620      	movs	r6, #32
   29262:	0027      	movs	r7, r4
   29264:	4650      	mov	r0, sl
   29266:	1af6      	subs	r6, r6, r3
   29268:	40b7      	lsls	r7, r6
   2926a:	40d8      	lsrs	r0, r3
   2926c:	4307      	orrs	r7, r0
   2926e:	4650      	mov	r0, sl
   29270:	40b0      	lsls	r0, r6
   29272:	1e46      	subs	r6, r0, #1
   29274:	41b0      	sbcs	r0, r6
   29276:	4307      	orrs	r7, r0
   29278:	40dc      	lsrs	r4, r3
   2927a:	18bf      	adds	r7, r7, r2
   2927c:	e7d6      	b.n	2922c <__aeabi_dsub+0x4ac>
   2927e:	000d      	movs	r5, r1
   29280:	4315      	orrs	r5, r2
   29282:	d100      	bne.n	29286 <__aeabi_dsub+0x506>
   29284:	e602      	b.n	28e8c <__aeabi_dsub+0x10c>
   29286:	4650      	mov	r0, sl
   29288:	1a80      	subs	r0, r0, r2
   2928a:	4582      	cmp	sl, r0
   2928c:	41bf      	sbcs	r7, r7
   2928e:	1a65      	subs	r5, r4, r1
   29290:	427f      	negs	r7, r7
   29292:	1bed      	subs	r5, r5, r7
   29294:	4684      	mov	ip, r0
   29296:	0228      	lsls	r0, r5, #8
   29298:	d400      	bmi.n	2929c <__aeabi_dsub+0x51c>
   2929a:	e68d      	b.n	28fb8 <__aeabi_dsub+0x238>
   2929c:	4650      	mov	r0, sl
   2929e:	1a17      	subs	r7, r2, r0
   292a0:	42ba      	cmp	r2, r7
   292a2:	4192      	sbcs	r2, r2
   292a4:	1b0c      	subs	r4, r1, r4
   292a6:	4252      	negs	r2, r2
   292a8:	1aa4      	subs	r4, r4, r2
   292aa:	4698      	mov	r8, r3
   292ac:	e5ee      	b.n	28e8c <__aeabi_dsub+0x10c>
   292ae:	000d      	movs	r5, r1
   292b0:	4315      	orrs	r5, r2
   292b2:	d100      	bne.n	292b6 <__aeabi_dsub+0x536>
   292b4:	e76b      	b.n	2918e <__aeabi_dsub+0x40e>
   292b6:	4650      	mov	r0, sl
   292b8:	0767      	lsls	r7, r4, #29
   292ba:	08c0      	lsrs	r0, r0, #3
   292bc:	4307      	orrs	r7, r0
   292be:	2080      	movs	r0, #128	; 0x80
   292c0:	08e4      	lsrs	r4, r4, #3
   292c2:	0300      	lsls	r0, r0, #12
   292c4:	4204      	tst	r4, r0
   292c6:	d007      	beq.n	292d8 <__aeabi_dsub+0x558>
   292c8:	08cd      	lsrs	r5, r1, #3
   292ca:	4205      	tst	r5, r0
   292cc:	d104      	bne.n	292d8 <__aeabi_dsub+0x558>
   292ce:	002c      	movs	r4, r5
   292d0:	4698      	mov	r8, r3
   292d2:	08d7      	lsrs	r7, r2, #3
   292d4:	0749      	lsls	r1, r1, #29
   292d6:	430f      	orrs	r7, r1
   292d8:	0f7b      	lsrs	r3, r7, #29
   292da:	00e4      	lsls	r4, r4, #3
   292dc:	431c      	orrs	r4, r3
   292de:	00ff      	lsls	r7, r7, #3
   292e0:	4e30      	ldr	r6, [pc, #192]	; (293a4 <__aeabi_dsub+0x624>)
   292e2:	e5d3      	b.n	28e8c <__aeabi_dsub+0x10c>
   292e4:	4e2f      	ldr	r6, [pc, #188]	; (293a4 <__aeabi_dsub+0x624>)
   292e6:	45b4      	cmp	ip, r6
   292e8:	d1b4      	bne.n	29254 <__aeabi_dsub+0x4d4>
   292ea:	000c      	movs	r4, r1
   292ec:	0017      	movs	r7, r2
   292ee:	4666      	mov	r6, ip
   292f0:	e5cc      	b.n	28e8c <__aeabi_dsub+0x10c>
   292f2:	2700      	movs	r7, #0
   292f4:	2400      	movs	r4, #0
   292f6:	e5e8      	b.n	28eca <__aeabi_dsub+0x14a>
   292f8:	2b00      	cmp	r3, #0
   292fa:	d039      	beq.n	29370 <__aeabi_dsub+0x5f0>
   292fc:	000b      	movs	r3, r1
   292fe:	4313      	orrs	r3, r2
   29300:	d100      	bne.n	29304 <__aeabi_dsub+0x584>
   29302:	e744      	b.n	2918e <__aeabi_dsub+0x40e>
   29304:	08c0      	lsrs	r0, r0, #3
   29306:	0767      	lsls	r7, r4, #29
   29308:	4307      	orrs	r7, r0
   2930a:	2080      	movs	r0, #128	; 0x80
   2930c:	08e4      	lsrs	r4, r4, #3
   2930e:	0300      	lsls	r0, r0, #12
   29310:	4204      	tst	r4, r0
   29312:	d0e1      	beq.n	292d8 <__aeabi_dsub+0x558>
   29314:	08cb      	lsrs	r3, r1, #3
   29316:	4203      	tst	r3, r0
   29318:	d1de      	bne.n	292d8 <__aeabi_dsub+0x558>
   2931a:	08d7      	lsrs	r7, r2, #3
   2931c:	0749      	lsls	r1, r1, #29
   2931e:	430f      	orrs	r7, r1
   29320:	001c      	movs	r4, r3
   29322:	e7d9      	b.n	292d8 <__aeabi_dsub+0x558>
   29324:	2100      	movs	r1, #0
   29326:	e771      	b.n	2920c <__aeabi_dsub+0x48c>
   29328:	2500      	movs	r5, #0
   2932a:	2700      	movs	r7, #0
   2932c:	e5e9      	b.n	28f02 <__aeabi_dsub+0x182>
   2932e:	002e      	movs	r6, r5
   29330:	0027      	movs	r7, r4
   29332:	3e20      	subs	r6, #32
   29334:	40f7      	lsrs	r7, r6
   29336:	2d20      	cmp	r5, #32
   29338:	d02f      	beq.n	2939a <__aeabi_dsub+0x61a>
   2933a:	2640      	movs	r6, #64	; 0x40
   2933c:	1b75      	subs	r5, r6, r5
   2933e:	40ac      	lsls	r4, r5
   29340:	4650      	mov	r0, sl
   29342:	4320      	orrs	r0, r4
   29344:	1e44      	subs	r4, r0, #1
   29346:	41a0      	sbcs	r0, r4
   29348:	2400      	movs	r4, #0
   2934a:	4338      	orrs	r0, r7
   2934c:	e6dc      	b.n	29108 <__aeabi_dsub+0x388>
   2934e:	2480      	movs	r4, #128	; 0x80
   29350:	2500      	movs	r5, #0
   29352:	0324      	lsls	r4, r4, #12
   29354:	4e13      	ldr	r6, [pc, #76]	; (293a4 <__aeabi_dsub+0x624>)
   29356:	2700      	movs	r7, #0
   29358:	e5d3      	b.n	28f02 <__aeabi_dsub+0x182>
   2935a:	4650      	mov	r0, sl
   2935c:	4320      	orrs	r0, r4
   2935e:	0007      	movs	r7, r0
   29360:	1e78      	subs	r0, r7, #1
   29362:	4187      	sbcs	r7, r0
   29364:	2400      	movs	r4, #0
   29366:	18bf      	adds	r7, r7, r2
   29368:	e760      	b.n	2922c <__aeabi_dsub+0x4ac>
   2936a:	000c      	movs	r4, r1
   2936c:	0017      	movs	r7, r2
   2936e:	e58d      	b.n	28e8c <__aeabi_dsub+0x10c>
   29370:	000c      	movs	r4, r1
   29372:	0017      	movs	r7, r2
   29374:	4e0b      	ldr	r6, [pc, #44]	; (293a4 <__aeabi_dsub+0x624>)
   29376:	e589      	b.n	28e8c <__aeabi_dsub+0x10c>
   29378:	001e      	movs	r6, r3
   2937a:	0027      	movs	r7, r4
   2937c:	3e20      	subs	r6, #32
   2937e:	40f7      	lsrs	r7, r6
   29380:	2b20      	cmp	r3, #32
   29382:	d00c      	beq.n	2939e <__aeabi_dsub+0x61e>
   29384:	2640      	movs	r6, #64	; 0x40
   29386:	1af3      	subs	r3, r6, r3
   29388:	409c      	lsls	r4, r3
   2938a:	4650      	mov	r0, sl
   2938c:	4320      	orrs	r0, r4
   2938e:	1e44      	subs	r4, r0, #1
   29390:	41a0      	sbcs	r0, r4
   29392:	4307      	orrs	r7, r0
   29394:	2400      	movs	r4, #0
   29396:	18bf      	adds	r7, r7, r2
   29398:	e748      	b.n	2922c <__aeabi_dsub+0x4ac>
   2939a:	2400      	movs	r4, #0
   2939c:	e7d0      	b.n	29340 <__aeabi_dsub+0x5c0>
   2939e:	2400      	movs	r4, #0
   293a0:	e7f3      	b.n	2938a <__aeabi_dsub+0x60a>
   293a2:	46c0      	nop			; (mov r8, r8)
   293a4:	000007ff 	.word	0x000007ff
   293a8:	ff7fffff 	.word	0xff7fffff

000293ac <__aeabi_dcmpun>:
   293ac:	b570      	push	{r4, r5, r6, lr}
   293ae:	4e0e      	ldr	r6, [pc, #56]	; (293e8 <__aeabi_dcmpun+0x3c>)
   293b0:	030d      	lsls	r5, r1, #12
   293b2:	031c      	lsls	r4, r3, #12
   293b4:	0049      	lsls	r1, r1, #1
   293b6:	005b      	lsls	r3, r3, #1
   293b8:	0b2d      	lsrs	r5, r5, #12
   293ba:	0d49      	lsrs	r1, r1, #21
   293bc:	0b24      	lsrs	r4, r4, #12
   293be:	0d5b      	lsrs	r3, r3, #21
   293c0:	42b1      	cmp	r1, r6
   293c2:	d004      	beq.n	293ce <__aeabi_dcmpun+0x22>
   293c4:	4908      	ldr	r1, [pc, #32]	; (293e8 <__aeabi_dcmpun+0x3c>)
   293c6:	2000      	movs	r0, #0
   293c8:	428b      	cmp	r3, r1
   293ca:	d008      	beq.n	293de <__aeabi_dcmpun+0x32>
   293cc:	bd70      	pop	{r4, r5, r6, pc}
   293ce:	4305      	orrs	r5, r0
   293d0:	2001      	movs	r0, #1
   293d2:	2d00      	cmp	r5, #0
   293d4:	d1fa      	bne.n	293cc <__aeabi_dcmpun+0x20>
   293d6:	4904      	ldr	r1, [pc, #16]	; (293e8 <__aeabi_dcmpun+0x3c>)
   293d8:	2000      	movs	r0, #0
   293da:	428b      	cmp	r3, r1
   293dc:	d1f6      	bne.n	293cc <__aeabi_dcmpun+0x20>
   293de:	4314      	orrs	r4, r2
   293e0:	0020      	movs	r0, r4
   293e2:	1e44      	subs	r4, r0, #1
   293e4:	41a0      	sbcs	r0, r4
   293e6:	e7f1      	b.n	293cc <__aeabi_dcmpun+0x20>
   293e8:	000007ff 	.word	0x000007ff

000293ec <__aeabi_d2iz>:
   293ec:	b530      	push	{r4, r5, lr}
   293ee:	4d13      	ldr	r5, [pc, #76]	; (2943c <__aeabi_d2iz+0x50>)
   293f0:	030a      	lsls	r2, r1, #12
   293f2:	004b      	lsls	r3, r1, #1
   293f4:	0b12      	lsrs	r2, r2, #12
   293f6:	0d5b      	lsrs	r3, r3, #21
   293f8:	0fc9      	lsrs	r1, r1, #31
   293fa:	2400      	movs	r4, #0
   293fc:	42ab      	cmp	r3, r5
   293fe:	dd10      	ble.n	29422 <__aeabi_d2iz+0x36>
   29400:	4c0f      	ldr	r4, [pc, #60]	; (29440 <__aeabi_d2iz+0x54>)
   29402:	42a3      	cmp	r3, r4
   29404:	dc0f      	bgt.n	29426 <__aeabi_d2iz+0x3a>
   29406:	2480      	movs	r4, #128	; 0x80
   29408:	4d0e      	ldr	r5, [pc, #56]	; (29444 <__aeabi_d2iz+0x58>)
   2940a:	0364      	lsls	r4, r4, #13
   2940c:	4322      	orrs	r2, r4
   2940e:	1aed      	subs	r5, r5, r3
   29410:	2d1f      	cmp	r5, #31
   29412:	dd0b      	ble.n	2942c <__aeabi_d2iz+0x40>
   29414:	480c      	ldr	r0, [pc, #48]	; (29448 <__aeabi_d2iz+0x5c>)
   29416:	1ac3      	subs	r3, r0, r3
   29418:	40da      	lsrs	r2, r3
   2941a:	4254      	negs	r4, r2
   2941c:	2900      	cmp	r1, #0
   2941e:	d100      	bne.n	29422 <__aeabi_d2iz+0x36>
   29420:	0014      	movs	r4, r2
   29422:	0020      	movs	r0, r4
   29424:	bd30      	pop	{r4, r5, pc}
   29426:	4b09      	ldr	r3, [pc, #36]	; (2944c <__aeabi_d2iz+0x60>)
   29428:	18cc      	adds	r4, r1, r3
   2942a:	e7fa      	b.n	29422 <__aeabi_d2iz+0x36>
   2942c:	4c08      	ldr	r4, [pc, #32]	; (29450 <__aeabi_d2iz+0x64>)
   2942e:	40e8      	lsrs	r0, r5
   29430:	46a4      	mov	ip, r4
   29432:	4463      	add	r3, ip
   29434:	409a      	lsls	r2, r3
   29436:	4302      	orrs	r2, r0
   29438:	e7ef      	b.n	2941a <__aeabi_d2iz+0x2e>
   2943a:	46c0      	nop			; (mov r8, r8)
   2943c:	000003fe 	.word	0x000003fe
   29440:	0000041d 	.word	0x0000041d
   29444:	00000433 	.word	0x00000433
   29448:	00000413 	.word	0x00000413
   2944c:	7fffffff 	.word	0x7fffffff
   29450:	fffffbed 	.word	0xfffffbed

00029454 <__aeabi_i2d>:
   29454:	b570      	push	{r4, r5, r6, lr}
   29456:	2800      	cmp	r0, #0
   29458:	d030      	beq.n	294bc <__aeabi_i2d+0x68>
   2945a:	17c3      	asrs	r3, r0, #31
   2945c:	18c4      	adds	r4, r0, r3
   2945e:	405c      	eors	r4, r3
   29460:	0fc5      	lsrs	r5, r0, #31
   29462:	0020      	movs	r0, r4
   29464:	f000 f8c2 	bl	295ec <__clzsi2>
   29468:	4b17      	ldr	r3, [pc, #92]	; (294c8 <__aeabi_i2d+0x74>)
   2946a:	4a18      	ldr	r2, [pc, #96]	; (294cc <__aeabi_i2d+0x78>)
   2946c:	1a1b      	subs	r3, r3, r0
   2946e:	1ad2      	subs	r2, r2, r3
   29470:	2a1f      	cmp	r2, #31
   29472:	dd18      	ble.n	294a6 <__aeabi_i2d+0x52>
   29474:	4a16      	ldr	r2, [pc, #88]	; (294d0 <__aeabi_i2d+0x7c>)
   29476:	1ad2      	subs	r2, r2, r3
   29478:	4094      	lsls	r4, r2
   2947a:	2200      	movs	r2, #0
   2947c:	0324      	lsls	r4, r4, #12
   2947e:	055b      	lsls	r3, r3, #21
   29480:	0b24      	lsrs	r4, r4, #12
   29482:	0d5b      	lsrs	r3, r3, #21
   29484:	2100      	movs	r1, #0
   29486:	0010      	movs	r0, r2
   29488:	0324      	lsls	r4, r4, #12
   2948a:	0d0a      	lsrs	r2, r1, #20
   2948c:	0b24      	lsrs	r4, r4, #12
   2948e:	0512      	lsls	r2, r2, #20
   29490:	4322      	orrs	r2, r4
   29492:	4c10      	ldr	r4, [pc, #64]	; (294d4 <__aeabi_i2d+0x80>)
   29494:	051b      	lsls	r3, r3, #20
   29496:	4022      	ands	r2, r4
   29498:	4313      	orrs	r3, r2
   2949a:	005b      	lsls	r3, r3, #1
   2949c:	07ed      	lsls	r5, r5, #31
   2949e:	085b      	lsrs	r3, r3, #1
   294a0:	432b      	orrs	r3, r5
   294a2:	0019      	movs	r1, r3
   294a4:	bd70      	pop	{r4, r5, r6, pc}
   294a6:	0021      	movs	r1, r4
   294a8:	4091      	lsls	r1, r2
   294aa:	000a      	movs	r2, r1
   294ac:	210b      	movs	r1, #11
   294ae:	1a08      	subs	r0, r1, r0
   294b0:	40c4      	lsrs	r4, r0
   294b2:	055b      	lsls	r3, r3, #21
   294b4:	0324      	lsls	r4, r4, #12
   294b6:	0b24      	lsrs	r4, r4, #12
   294b8:	0d5b      	lsrs	r3, r3, #21
   294ba:	e7e3      	b.n	29484 <__aeabi_i2d+0x30>
   294bc:	2500      	movs	r5, #0
   294be:	2300      	movs	r3, #0
   294c0:	2400      	movs	r4, #0
   294c2:	2200      	movs	r2, #0
   294c4:	e7de      	b.n	29484 <__aeabi_i2d+0x30>
   294c6:	46c0      	nop			; (mov r8, r8)
   294c8:	0000041e 	.word	0x0000041e
   294cc:	00000433 	.word	0x00000433
   294d0:	00000413 	.word	0x00000413
   294d4:	800fffff 	.word	0x800fffff

000294d8 <__aeabi_ui2d>:
   294d8:	b510      	push	{r4, lr}
   294da:	1e04      	subs	r4, r0, #0
   294dc:	d028      	beq.n	29530 <__aeabi_ui2d+0x58>
   294de:	f000 f885 	bl	295ec <__clzsi2>
   294e2:	4b15      	ldr	r3, [pc, #84]	; (29538 <__aeabi_ui2d+0x60>)
   294e4:	4a15      	ldr	r2, [pc, #84]	; (2953c <__aeabi_ui2d+0x64>)
   294e6:	1a1b      	subs	r3, r3, r0
   294e8:	1ad2      	subs	r2, r2, r3
   294ea:	2a1f      	cmp	r2, #31
   294ec:	dd15      	ble.n	2951a <__aeabi_ui2d+0x42>
   294ee:	4a14      	ldr	r2, [pc, #80]	; (29540 <__aeabi_ui2d+0x68>)
   294f0:	1ad2      	subs	r2, r2, r3
   294f2:	4094      	lsls	r4, r2
   294f4:	2200      	movs	r2, #0
   294f6:	0324      	lsls	r4, r4, #12
   294f8:	055b      	lsls	r3, r3, #21
   294fa:	0b24      	lsrs	r4, r4, #12
   294fc:	0d5b      	lsrs	r3, r3, #21
   294fe:	2100      	movs	r1, #0
   29500:	0010      	movs	r0, r2
   29502:	0324      	lsls	r4, r4, #12
   29504:	0d0a      	lsrs	r2, r1, #20
   29506:	0b24      	lsrs	r4, r4, #12
   29508:	0512      	lsls	r2, r2, #20
   2950a:	4322      	orrs	r2, r4
   2950c:	4c0d      	ldr	r4, [pc, #52]	; (29544 <__aeabi_ui2d+0x6c>)
   2950e:	051b      	lsls	r3, r3, #20
   29510:	4022      	ands	r2, r4
   29512:	4313      	orrs	r3, r2
   29514:	005b      	lsls	r3, r3, #1
   29516:	0859      	lsrs	r1, r3, #1
   29518:	bd10      	pop	{r4, pc}
   2951a:	0021      	movs	r1, r4
   2951c:	4091      	lsls	r1, r2
   2951e:	000a      	movs	r2, r1
   29520:	210b      	movs	r1, #11
   29522:	1a08      	subs	r0, r1, r0
   29524:	40c4      	lsrs	r4, r0
   29526:	055b      	lsls	r3, r3, #21
   29528:	0324      	lsls	r4, r4, #12
   2952a:	0b24      	lsrs	r4, r4, #12
   2952c:	0d5b      	lsrs	r3, r3, #21
   2952e:	e7e6      	b.n	294fe <__aeabi_ui2d+0x26>
   29530:	2300      	movs	r3, #0
   29532:	2400      	movs	r4, #0
   29534:	2200      	movs	r2, #0
   29536:	e7e2      	b.n	294fe <__aeabi_ui2d+0x26>
   29538:	0000041e 	.word	0x0000041e
   2953c:	00000433 	.word	0x00000433
   29540:	00000413 	.word	0x00000413
   29544:	800fffff 	.word	0x800fffff

00029548 <__aeabi_f2d>:
   29548:	0041      	lsls	r1, r0, #1
   2954a:	0e09      	lsrs	r1, r1, #24
   2954c:	1c4b      	adds	r3, r1, #1
   2954e:	b570      	push	{r4, r5, r6, lr}
   29550:	b2db      	uxtb	r3, r3
   29552:	0246      	lsls	r6, r0, #9
   29554:	0a75      	lsrs	r5, r6, #9
   29556:	0fc4      	lsrs	r4, r0, #31
   29558:	2b01      	cmp	r3, #1
   2955a:	dd14      	ble.n	29586 <__aeabi_f2d+0x3e>
   2955c:	23e0      	movs	r3, #224	; 0xe0
   2955e:	009b      	lsls	r3, r3, #2
   29560:	076d      	lsls	r5, r5, #29
   29562:	0b36      	lsrs	r6, r6, #12
   29564:	18cb      	adds	r3, r1, r3
   29566:	2100      	movs	r1, #0
   29568:	0d0a      	lsrs	r2, r1, #20
   2956a:	0028      	movs	r0, r5
   2956c:	0512      	lsls	r2, r2, #20
   2956e:	4d1c      	ldr	r5, [pc, #112]	; (295e0 <__aeabi_f2d+0x98>)
   29570:	4332      	orrs	r2, r6
   29572:	055b      	lsls	r3, r3, #21
   29574:	402a      	ands	r2, r5
   29576:	085b      	lsrs	r3, r3, #1
   29578:	4313      	orrs	r3, r2
   2957a:	005b      	lsls	r3, r3, #1
   2957c:	07e4      	lsls	r4, r4, #31
   2957e:	085b      	lsrs	r3, r3, #1
   29580:	4323      	orrs	r3, r4
   29582:	0019      	movs	r1, r3
   29584:	bd70      	pop	{r4, r5, r6, pc}
   29586:	2900      	cmp	r1, #0
   29588:	d114      	bne.n	295b4 <__aeabi_f2d+0x6c>
   2958a:	2d00      	cmp	r5, #0
   2958c:	d01e      	beq.n	295cc <__aeabi_f2d+0x84>
   2958e:	0028      	movs	r0, r5
   29590:	f000 f82c 	bl	295ec <__clzsi2>
   29594:	280a      	cmp	r0, #10
   29596:	dc1c      	bgt.n	295d2 <__aeabi_f2d+0x8a>
   29598:	230b      	movs	r3, #11
   2959a:	002a      	movs	r2, r5
   2959c:	1a1b      	subs	r3, r3, r0
   2959e:	40da      	lsrs	r2, r3
   295a0:	0003      	movs	r3, r0
   295a2:	3315      	adds	r3, #21
   295a4:	409d      	lsls	r5, r3
   295a6:	4b0f      	ldr	r3, [pc, #60]	; (295e4 <__aeabi_f2d+0x9c>)
   295a8:	0312      	lsls	r2, r2, #12
   295aa:	1a1b      	subs	r3, r3, r0
   295ac:	055b      	lsls	r3, r3, #21
   295ae:	0b16      	lsrs	r6, r2, #12
   295b0:	0d5b      	lsrs	r3, r3, #21
   295b2:	e7d8      	b.n	29566 <__aeabi_f2d+0x1e>
   295b4:	2d00      	cmp	r5, #0
   295b6:	d006      	beq.n	295c6 <__aeabi_f2d+0x7e>
   295b8:	0b32      	lsrs	r2, r6, #12
   295ba:	2680      	movs	r6, #128	; 0x80
   295bc:	0336      	lsls	r6, r6, #12
   295be:	076d      	lsls	r5, r5, #29
   295c0:	4316      	orrs	r6, r2
   295c2:	4b09      	ldr	r3, [pc, #36]	; (295e8 <__aeabi_f2d+0xa0>)
   295c4:	e7cf      	b.n	29566 <__aeabi_f2d+0x1e>
   295c6:	4b08      	ldr	r3, [pc, #32]	; (295e8 <__aeabi_f2d+0xa0>)
   295c8:	2600      	movs	r6, #0
   295ca:	e7cc      	b.n	29566 <__aeabi_f2d+0x1e>
   295cc:	2300      	movs	r3, #0
   295ce:	2600      	movs	r6, #0
   295d0:	e7c9      	b.n	29566 <__aeabi_f2d+0x1e>
   295d2:	0003      	movs	r3, r0
   295d4:	002a      	movs	r2, r5
   295d6:	3b0b      	subs	r3, #11
   295d8:	409a      	lsls	r2, r3
   295da:	2500      	movs	r5, #0
   295dc:	e7e3      	b.n	295a6 <__aeabi_f2d+0x5e>
   295de:	46c0      	nop			; (mov r8, r8)
   295e0:	800fffff 	.word	0x800fffff
   295e4:	00000389 	.word	0x00000389
   295e8:	000007ff 	.word	0x000007ff

000295ec <__clzsi2>:
   295ec:	211c      	movs	r1, #28
   295ee:	2301      	movs	r3, #1
   295f0:	041b      	lsls	r3, r3, #16
   295f2:	4298      	cmp	r0, r3
   295f4:	d301      	bcc.n	295fa <__clzsi2+0xe>
   295f6:	0c00      	lsrs	r0, r0, #16
   295f8:	3910      	subs	r1, #16
   295fa:	0a1b      	lsrs	r3, r3, #8
   295fc:	4298      	cmp	r0, r3
   295fe:	d301      	bcc.n	29604 <__clzsi2+0x18>
   29600:	0a00      	lsrs	r0, r0, #8
   29602:	3908      	subs	r1, #8
   29604:	091b      	lsrs	r3, r3, #4
   29606:	4298      	cmp	r0, r3
   29608:	d301      	bcc.n	2960e <__clzsi2+0x22>
   2960a:	0900      	lsrs	r0, r0, #4
   2960c:	3904      	subs	r1, #4
   2960e:	a202      	add	r2, pc, #8	; (adr r2, 29618 <__clzsi2+0x2c>)
   29610:	5c10      	ldrb	r0, [r2, r0]
   29612:	1840      	adds	r0, r0, r1
   29614:	4770      	bx	lr
   29616:	46c0      	nop			; (mov r8, r8)
   29618:	02020304 	.word	0x02020304
   2961c:	01010101 	.word	0x01010101
	...

00029628 <__clzdi2>:
   29628:	b510      	push	{r4, lr}
   2962a:	2900      	cmp	r1, #0
   2962c:	d103      	bne.n	29636 <__clzdi2+0xe>
   2962e:	f7ff ffdd 	bl	295ec <__clzsi2>
   29632:	3020      	adds	r0, #32
   29634:	e002      	b.n	2963c <__clzdi2+0x14>
   29636:	1c08      	adds	r0, r1, #0
   29638:	f7ff ffd8 	bl	295ec <__clzsi2>
   2963c:	bd10      	pop	{r4, pc}
   2963e:	46c0      	nop			; (mov r8, r8)

00029640 <atoi>:
   29640:	b510      	push	{r4, lr}
   29642:	220a      	movs	r2, #10
   29644:	2100      	movs	r1, #0
   29646:	f000 fadd 	bl	29c04 <strtol>
   2964a:	bd10      	pop	{r4, pc}

0002964c <calloc>:
   2964c:	b510      	push	{r4, lr}
   2964e:	4b03      	ldr	r3, [pc, #12]	; (2965c <calloc+0x10>)
   29650:	000a      	movs	r2, r1
   29652:	0001      	movs	r1, r0
   29654:	6818      	ldr	r0, [r3, #0]
   29656:	f000 f888 	bl	2976a <_calloc_r>
   2965a:	bd10      	pop	{r4, pc}
   2965c:	20000034 	.word	0x20000034

00029660 <__errno>:
   29660:	4b01      	ldr	r3, [pc, #4]	; (29668 <__errno+0x8>)
   29662:	6818      	ldr	r0, [r3, #0]
   29664:	4770      	bx	lr
   29666:	46c0      	nop			; (mov r8, r8)
   29668:	20000034 	.word	0x20000034

0002966c <__libc_init_array>:
   2966c:	b570      	push	{r4, r5, r6, lr}
   2966e:	2600      	movs	r6, #0
   29670:	4d0c      	ldr	r5, [pc, #48]	; (296a4 <__libc_init_array+0x38>)
   29672:	4c0d      	ldr	r4, [pc, #52]	; (296a8 <__libc_init_array+0x3c>)
   29674:	1b64      	subs	r4, r4, r5
   29676:	10a4      	asrs	r4, r4, #2
   29678:	42a6      	cmp	r6, r4
   2967a:	d109      	bne.n	29690 <__libc_init_array+0x24>
   2967c:	2600      	movs	r6, #0
   2967e:	f002 f9f9 	bl	2ba74 <_init>
   29682:	4d0a      	ldr	r5, [pc, #40]	; (296ac <__libc_init_array+0x40>)
   29684:	4c0a      	ldr	r4, [pc, #40]	; (296b0 <__libc_init_array+0x44>)
   29686:	1b64      	subs	r4, r4, r5
   29688:	10a4      	asrs	r4, r4, #2
   2968a:	42a6      	cmp	r6, r4
   2968c:	d105      	bne.n	2969a <__libc_init_array+0x2e>
   2968e:	bd70      	pop	{r4, r5, r6, pc}
   29690:	00b3      	lsls	r3, r6, #2
   29692:	58eb      	ldr	r3, [r5, r3]
   29694:	4798      	blx	r3
   29696:	3601      	adds	r6, #1
   29698:	e7ee      	b.n	29678 <__libc_init_array+0xc>
   2969a:	00b3      	lsls	r3, r6, #2
   2969c:	58eb      	ldr	r3, [r5, r3]
   2969e:	4798      	blx	r3
   296a0:	3601      	adds	r6, #1
   296a2:	e7f2      	b.n	2968a <__libc_init_array+0x1e>
   296a4:	0002ba80 	.word	0x0002ba80
   296a8:	0002ba80 	.word	0x0002ba80
   296ac:	0002ba80 	.word	0x0002ba80
   296b0:	0002ba84 	.word	0x0002ba84

000296b4 <__locale_ctype_ptr_l>:
   296b4:	30ec      	adds	r0, #236	; 0xec
   296b6:	6800      	ldr	r0, [r0, #0]
   296b8:	4770      	bx	lr
	...

000296bc <__locale_ctype_ptr>:
   296bc:	4b04      	ldr	r3, [pc, #16]	; (296d0 <__locale_ctype_ptr+0x14>)
   296be:	681b      	ldr	r3, [r3, #0]
   296c0:	6a1b      	ldr	r3, [r3, #32]
   296c2:	2b00      	cmp	r3, #0
   296c4:	d100      	bne.n	296c8 <__locale_ctype_ptr+0xc>
   296c6:	4b03      	ldr	r3, [pc, #12]	; (296d4 <__locale_ctype_ptr+0x18>)
   296c8:	33ec      	adds	r3, #236	; 0xec
   296ca:	6818      	ldr	r0, [r3, #0]
   296cc:	4770      	bx	lr
   296ce:	46c0      	nop			; (mov r8, r8)
   296d0:	20000034 	.word	0x20000034
   296d4:	20000098 	.word	0x20000098

000296d8 <malloc>:
   296d8:	b510      	push	{r4, lr}
   296da:	4b03      	ldr	r3, [pc, #12]	; (296e8 <malloc+0x10>)
   296dc:	0001      	movs	r1, r0
   296de:	6818      	ldr	r0, [r3, #0]
   296e0:	f000 f89c 	bl	2981c <_malloc_r>
   296e4:	bd10      	pop	{r4, pc}
   296e6:	46c0      	nop			; (mov r8, r8)
   296e8:	20000034 	.word	0x20000034

000296ec <free>:
   296ec:	b510      	push	{r4, lr}
   296ee:	4b03      	ldr	r3, [pc, #12]	; (296fc <free+0x10>)
   296f0:	0001      	movs	r1, r0
   296f2:	6818      	ldr	r0, [r3, #0]
   296f4:	f000 f848 	bl	29788 <_free_r>
   296f8:	bd10      	pop	{r4, pc}
   296fa:	46c0      	nop			; (mov r8, r8)
   296fc:	20000034 	.word	0x20000034

00029700 <__ascii_mbtowc>:
   29700:	b082      	sub	sp, #8
   29702:	2900      	cmp	r1, #0
   29704:	d100      	bne.n	29708 <__ascii_mbtowc+0x8>
   29706:	a901      	add	r1, sp, #4
   29708:	1e10      	subs	r0, r2, #0
   2970a:	d006      	beq.n	2971a <__ascii_mbtowc+0x1a>
   2970c:	2b00      	cmp	r3, #0
   2970e:	d006      	beq.n	2971e <__ascii_mbtowc+0x1e>
   29710:	7813      	ldrb	r3, [r2, #0]
   29712:	600b      	str	r3, [r1, #0]
   29714:	7810      	ldrb	r0, [r2, #0]
   29716:	1e43      	subs	r3, r0, #1
   29718:	4198      	sbcs	r0, r3
   2971a:	b002      	add	sp, #8
   2971c:	4770      	bx	lr
   2971e:	2002      	movs	r0, #2
   29720:	4240      	negs	r0, r0
   29722:	e7fa      	b.n	2971a <__ascii_mbtowc+0x1a>

00029724 <memcpy>:
   29724:	2300      	movs	r3, #0
   29726:	b510      	push	{r4, lr}
   29728:	429a      	cmp	r2, r3
   2972a:	d100      	bne.n	2972e <memcpy+0xa>
   2972c:	bd10      	pop	{r4, pc}
   2972e:	5ccc      	ldrb	r4, [r1, r3]
   29730:	54c4      	strb	r4, [r0, r3]
   29732:	3301      	adds	r3, #1
   29734:	e7f8      	b.n	29728 <memcpy+0x4>

00029736 <memmove>:
   29736:	b510      	push	{r4, lr}
   29738:	4288      	cmp	r0, r1
   2973a:	d902      	bls.n	29742 <memmove+0xc>
   2973c:	188b      	adds	r3, r1, r2
   2973e:	4298      	cmp	r0, r3
   29740:	d308      	bcc.n	29754 <memmove+0x1e>
   29742:	2300      	movs	r3, #0
   29744:	429a      	cmp	r2, r3
   29746:	d007      	beq.n	29758 <memmove+0x22>
   29748:	5ccc      	ldrb	r4, [r1, r3]
   2974a:	54c4      	strb	r4, [r0, r3]
   2974c:	3301      	adds	r3, #1
   2974e:	e7f9      	b.n	29744 <memmove+0xe>
   29750:	5c8b      	ldrb	r3, [r1, r2]
   29752:	5483      	strb	r3, [r0, r2]
   29754:	3a01      	subs	r2, #1
   29756:	d2fb      	bcs.n	29750 <memmove+0x1a>
   29758:	bd10      	pop	{r4, pc}

0002975a <memset>:
   2975a:	0003      	movs	r3, r0
   2975c:	1882      	adds	r2, r0, r2
   2975e:	4293      	cmp	r3, r2
   29760:	d100      	bne.n	29764 <memset+0xa>
   29762:	4770      	bx	lr
   29764:	7019      	strb	r1, [r3, #0]
   29766:	3301      	adds	r3, #1
   29768:	e7f9      	b.n	2975e <memset+0x4>

0002976a <_calloc_r>:
   2976a:	434a      	muls	r2, r1
   2976c:	b570      	push	{r4, r5, r6, lr}
   2976e:	0011      	movs	r1, r2
   29770:	0014      	movs	r4, r2
   29772:	f000 f853 	bl	2981c <_malloc_r>
   29776:	1e05      	subs	r5, r0, #0
   29778:	d003      	beq.n	29782 <_calloc_r+0x18>
   2977a:	0022      	movs	r2, r4
   2977c:	2100      	movs	r1, #0
   2977e:	f7ff ffec 	bl	2975a <memset>
   29782:	0028      	movs	r0, r5
   29784:	bd70      	pop	{r4, r5, r6, pc}
	...

00029788 <_free_r>:
   29788:	b570      	push	{r4, r5, r6, lr}
   2978a:	0005      	movs	r5, r0
   2978c:	2900      	cmp	r1, #0
   2978e:	d010      	beq.n	297b2 <_free_r+0x2a>
   29790:	1f0c      	subs	r4, r1, #4
   29792:	6823      	ldr	r3, [r4, #0]
   29794:	2b00      	cmp	r3, #0
   29796:	da00      	bge.n	2979a <_free_r+0x12>
   29798:	18e4      	adds	r4, r4, r3
   2979a:	0028      	movs	r0, r5
   2979c:	f000 fab4 	bl	29d08 <__malloc_lock>
   297a0:	4a1d      	ldr	r2, [pc, #116]	; (29818 <_free_r+0x90>)
   297a2:	6813      	ldr	r3, [r2, #0]
   297a4:	2b00      	cmp	r3, #0
   297a6:	d105      	bne.n	297b4 <_free_r+0x2c>
   297a8:	6063      	str	r3, [r4, #4]
   297aa:	6014      	str	r4, [r2, #0]
   297ac:	0028      	movs	r0, r5
   297ae:	f000 faac 	bl	29d0a <__malloc_unlock>
   297b2:	bd70      	pop	{r4, r5, r6, pc}
   297b4:	42a3      	cmp	r3, r4
   297b6:	d909      	bls.n	297cc <_free_r+0x44>
   297b8:	6821      	ldr	r1, [r4, #0]
   297ba:	1860      	adds	r0, r4, r1
   297bc:	4283      	cmp	r3, r0
   297be:	d1f3      	bne.n	297a8 <_free_r+0x20>
   297c0:	6818      	ldr	r0, [r3, #0]
   297c2:	685b      	ldr	r3, [r3, #4]
   297c4:	1841      	adds	r1, r0, r1
   297c6:	6021      	str	r1, [r4, #0]
   297c8:	e7ee      	b.n	297a8 <_free_r+0x20>
   297ca:	0013      	movs	r3, r2
   297cc:	685a      	ldr	r2, [r3, #4]
   297ce:	2a00      	cmp	r2, #0
   297d0:	d001      	beq.n	297d6 <_free_r+0x4e>
   297d2:	42a2      	cmp	r2, r4
   297d4:	d9f9      	bls.n	297ca <_free_r+0x42>
   297d6:	6819      	ldr	r1, [r3, #0]
   297d8:	1858      	adds	r0, r3, r1
   297da:	42a0      	cmp	r0, r4
   297dc:	d10b      	bne.n	297f6 <_free_r+0x6e>
   297de:	6820      	ldr	r0, [r4, #0]
   297e0:	1809      	adds	r1, r1, r0
   297e2:	1858      	adds	r0, r3, r1
   297e4:	6019      	str	r1, [r3, #0]
   297e6:	4282      	cmp	r2, r0
   297e8:	d1e0      	bne.n	297ac <_free_r+0x24>
   297ea:	6810      	ldr	r0, [r2, #0]
   297ec:	6852      	ldr	r2, [r2, #4]
   297ee:	1841      	adds	r1, r0, r1
   297f0:	6019      	str	r1, [r3, #0]
   297f2:	605a      	str	r2, [r3, #4]
   297f4:	e7da      	b.n	297ac <_free_r+0x24>
   297f6:	42a0      	cmp	r0, r4
   297f8:	d902      	bls.n	29800 <_free_r+0x78>
   297fa:	230c      	movs	r3, #12
   297fc:	602b      	str	r3, [r5, #0]
   297fe:	e7d5      	b.n	297ac <_free_r+0x24>
   29800:	6821      	ldr	r1, [r4, #0]
   29802:	1860      	adds	r0, r4, r1
   29804:	4282      	cmp	r2, r0
   29806:	d103      	bne.n	29810 <_free_r+0x88>
   29808:	6810      	ldr	r0, [r2, #0]
   2980a:	6852      	ldr	r2, [r2, #4]
   2980c:	1841      	adds	r1, r0, r1
   2980e:	6021      	str	r1, [r4, #0]
   29810:	6062      	str	r2, [r4, #4]
   29812:	605c      	str	r4, [r3, #4]
   29814:	e7ca      	b.n	297ac <_free_r+0x24>
   29816:	46c0      	nop			; (mov r8, r8)
   29818:	20000714 	.word	0x20000714

0002981c <_malloc_r>:
   2981c:	2303      	movs	r3, #3
   2981e:	b570      	push	{r4, r5, r6, lr}
   29820:	1ccd      	adds	r5, r1, #3
   29822:	439d      	bics	r5, r3
   29824:	3508      	adds	r5, #8
   29826:	0006      	movs	r6, r0
   29828:	2d0c      	cmp	r5, #12
   2982a:	d21e      	bcs.n	2986a <_malloc_r+0x4e>
   2982c:	250c      	movs	r5, #12
   2982e:	42a9      	cmp	r1, r5
   29830:	d81d      	bhi.n	2986e <_malloc_r+0x52>
   29832:	0030      	movs	r0, r6
   29834:	f000 fa68 	bl	29d08 <__malloc_lock>
   29838:	4a25      	ldr	r2, [pc, #148]	; (298d0 <_malloc_r+0xb4>)
   2983a:	6814      	ldr	r4, [r2, #0]
   2983c:	0021      	movs	r1, r4
   2983e:	2900      	cmp	r1, #0
   29840:	d119      	bne.n	29876 <_malloc_r+0x5a>
   29842:	4c24      	ldr	r4, [pc, #144]	; (298d4 <_malloc_r+0xb8>)
   29844:	6823      	ldr	r3, [r4, #0]
   29846:	2b00      	cmp	r3, #0
   29848:	d103      	bne.n	29852 <_malloc_r+0x36>
   2984a:	0030      	movs	r0, r6
   2984c:	f000 f844 	bl	298d8 <_sbrk_r>
   29850:	6020      	str	r0, [r4, #0]
   29852:	0029      	movs	r1, r5
   29854:	0030      	movs	r0, r6
   29856:	f000 f83f 	bl	298d8 <_sbrk_r>
   2985a:	1c43      	adds	r3, r0, #1
   2985c:	d12c      	bne.n	298b8 <_malloc_r+0x9c>
   2985e:	230c      	movs	r3, #12
   29860:	0030      	movs	r0, r6
   29862:	6033      	str	r3, [r6, #0]
   29864:	f000 fa51 	bl	29d0a <__malloc_unlock>
   29868:	e003      	b.n	29872 <_malloc_r+0x56>
   2986a:	2d00      	cmp	r5, #0
   2986c:	dadf      	bge.n	2982e <_malloc_r+0x12>
   2986e:	230c      	movs	r3, #12
   29870:	6033      	str	r3, [r6, #0]
   29872:	2000      	movs	r0, #0
   29874:	bd70      	pop	{r4, r5, r6, pc}
   29876:	680b      	ldr	r3, [r1, #0]
   29878:	1b5b      	subs	r3, r3, r5
   2987a:	d41a      	bmi.n	298b2 <_malloc_r+0x96>
   2987c:	2b0b      	cmp	r3, #11
   2987e:	d903      	bls.n	29888 <_malloc_r+0x6c>
   29880:	600b      	str	r3, [r1, #0]
   29882:	18cc      	adds	r4, r1, r3
   29884:	6025      	str	r5, [r4, #0]
   29886:	e003      	b.n	29890 <_malloc_r+0x74>
   29888:	428c      	cmp	r4, r1
   2988a:	d10e      	bne.n	298aa <_malloc_r+0x8e>
   2988c:	6863      	ldr	r3, [r4, #4]
   2988e:	6013      	str	r3, [r2, #0]
   29890:	0030      	movs	r0, r6
   29892:	f000 fa3a 	bl	29d0a <__malloc_unlock>
   29896:	0020      	movs	r0, r4
   29898:	2207      	movs	r2, #7
   2989a:	300b      	adds	r0, #11
   2989c:	1d23      	adds	r3, r4, #4
   2989e:	4390      	bics	r0, r2
   298a0:	1ac3      	subs	r3, r0, r3
   298a2:	d0e7      	beq.n	29874 <_malloc_r+0x58>
   298a4:	425a      	negs	r2, r3
   298a6:	50e2      	str	r2, [r4, r3]
   298a8:	e7e4      	b.n	29874 <_malloc_r+0x58>
   298aa:	684b      	ldr	r3, [r1, #4]
   298ac:	6063      	str	r3, [r4, #4]
   298ae:	000c      	movs	r4, r1
   298b0:	e7ee      	b.n	29890 <_malloc_r+0x74>
   298b2:	000c      	movs	r4, r1
   298b4:	6849      	ldr	r1, [r1, #4]
   298b6:	e7c2      	b.n	2983e <_malloc_r+0x22>
   298b8:	2303      	movs	r3, #3
   298ba:	1cc4      	adds	r4, r0, #3
   298bc:	439c      	bics	r4, r3
   298be:	42a0      	cmp	r0, r4
   298c0:	d0e0      	beq.n	29884 <_malloc_r+0x68>
   298c2:	1a21      	subs	r1, r4, r0
   298c4:	0030      	movs	r0, r6
   298c6:	f000 f807 	bl	298d8 <_sbrk_r>
   298ca:	1c43      	adds	r3, r0, #1
   298cc:	d1da      	bne.n	29884 <_malloc_r+0x68>
   298ce:	e7c6      	b.n	2985e <_malloc_r+0x42>
   298d0:	20000714 	.word	0x20000714
   298d4:	20000718 	.word	0x20000718

000298d8 <_sbrk_r>:
   298d8:	2300      	movs	r3, #0
   298da:	b570      	push	{r4, r5, r6, lr}
   298dc:	4c06      	ldr	r4, [pc, #24]	; (298f8 <_sbrk_r+0x20>)
   298de:	0005      	movs	r5, r0
   298e0:	0008      	movs	r0, r1
   298e2:	6023      	str	r3, [r4, #0]
   298e4:	f7fb ff5a 	bl	2579c <_sbrk>
   298e8:	1c43      	adds	r3, r0, #1
   298ea:	d103      	bne.n	298f4 <_sbrk_r+0x1c>
   298ec:	6823      	ldr	r3, [r4, #0]
   298ee:	2b00      	cmp	r3, #0
   298f0:	d000      	beq.n	298f4 <_sbrk_r+0x1c>
   298f2:	602b      	str	r3, [r5, #0]
   298f4:	bd70      	pop	{r4, r5, r6, pc}
   298f6:	46c0      	nop			; (mov r8, r8)
   298f8:	20001000 	.word	0x20001000

000298fc <sniprintf>:
   298fc:	b40c      	push	{r2, r3}
   298fe:	b530      	push	{r4, r5, lr}
   29900:	4b16      	ldr	r3, [pc, #88]	; (2995c <sniprintf+0x60>)
   29902:	b09d      	sub	sp, #116	; 0x74
   29904:	1e0c      	subs	r4, r1, #0
   29906:	681d      	ldr	r5, [r3, #0]
   29908:	da08      	bge.n	2991c <sniprintf+0x20>
   2990a:	238b      	movs	r3, #139	; 0x8b
   2990c:	2001      	movs	r0, #1
   2990e:	602b      	str	r3, [r5, #0]
   29910:	4240      	negs	r0, r0
   29912:	b01d      	add	sp, #116	; 0x74
   29914:	bc30      	pop	{r4, r5}
   29916:	bc08      	pop	{r3}
   29918:	b002      	add	sp, #8
   2991a:	4718      	bx	r3
   2991c:	2382      	movs	r3, #130	; 0x82
   2991e:	a902      	add	r1, sp, #8
   29920:	009b      	lsls	r3, r3, #2
   29922:	818b      	strh	r3, [r1, #12]
   29924:	2300      	movs	r3, #0
   29926:	9002      	str	r0, [sp, #8]
   29928:	6108      	str	r0, [r1, #16]
   2992a:	429c      	cmp	r4, r3
   2992c:	d000      	beq.n	29930 <sniprintf+0x34>
   2992e:	1e63      	subs	r3, r4, #1
   29930:	608b      	str	r3, [r1, #8]
   29932:	614b      	str	r3, [r1, #20]
   29934:	2301      	movs	r3, #1
   29936:	425b      	negs	r3, r3
   29938:	81cb      	strh	r3, [r1, #14]
   2993a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2993c:	ab21      	add	r3, sp, #132	; 0x84
   2993e:	0028      	movs	r0, r5
   29940:	9301      	str	r3, [sp, #4]
   29942:	f000 fa45 	bl	29dd0 <_svfiprintf_r>
   29946:	1c43      	adds	r3, r0, #1
   29948:	da01      	bge.n	2994e <sniprintf+0x52>
   2994a:	238b      	movs	r3, #139	; 0x8b
   2994c:	602b      	str	r3, [r5, #0]
   2994e:	2c00      	cmp	r4, #0
   29950:	d0df      	beq.n	29912 <sniprintf+0x16>
   29952:	2300      	movs	r3, #0
   29954:	9a02      	ldr	r2, [sp, #8]
   29956:	7013      	strb	r3, [r2, #0]
   29958:	e7db      	b.n	29912 <sniprintf+0x16>
   2995a:	46c0      	nop			; (mov r8, r8)
   2995c:	20000034 	.word	0x20000034

00029960 <siprintf>:
   29960:	b40e      	push	{r1, r2, r3}
   29962:	b510      	push	{r4, lr}
   29964:	b09d      	sub	sp, #116	; 0x74
   29966:	a902      	add	r1, sp, #8
   29968:	9002      	str	r0, [sp, #8]
   2996a:	6108      	str	r0, [r1, #16]
   2996c:	480b      	ldr	r0, [pc, #44]	; (2999c <siprintf+0x3c>)
   2996e:	2482      	movs	r4, #130	; 0x82
   29970:	6088      	str	r0, [r1, #8]
   29972:	6148      	str	r0, [r1, #20]
   29974:	2001      	movs	r0, #1
   29976:	4240      	negs	r0, r0
   29978:	ab1f      	add	r3, sp, #124	; 0x7c
   2997a:	81c8      	strh	r0, [r1, #14]
   2997c:	4808      	ldr	r0, [pc, #32]	; (299a0 <siprintf+0x40>)
   2997e:	cb04      	ldmia	r3!, {r2}
   29980:	00a4      	lsls	r4, r4, #2
   29982:	6800      	ldr	r0, [r0, #0]
   29984:	9301      	str	r3, [sp, #4]
   29986:	818c      	strh	r4, [r1, #12]
   29988:	f000 fa22 	bl	29dd0 <_svfiprintf_r>
   2998c:	2300      	movs	r3, #0
   2998e:	9a02      	ldr	r2, [sp, #8]
   29990:	7013      	strb	r3, [r2, #0]
   29992:	b01d      	add	sp, #116	; 0x74
   29994:	bc10      	pop	{r4}
   29996:	bc08      	pop	{r3}
   29998:	b003      	add	sp, #12
   2999a:	4718      	bx	r3
   2999c:	7fffffff 	.word	0x7fffffff
   299a0:	20000034 	.word	0x20000034

000299a4 <strcat>:
   299a4:	0002      	movs	r2, r0
   299a6:	b510      	push	{r4, lr}
   299a8:	7813      	ldrb	r3, [r2, #0]
   299aa:	2b00      	cmp	r3, #0
   299ac:	d105      	bne.n	299ba <strcat+0x16>
   299ae:	5ccc      	ldrb	r4, [r1, r3]
   299b0:	54d4      	strb	r4, [r2, r3]
   299b2:	3301      	adds	r3, #1
   299b4:	2c00      	cmp	r4, #0
   299b6:	d1fa      	bne.n	299ae <strcat+0xa>
   299b8:	bd10      	pop	{r4, pc}
   299ba:	3201      	adds	r2, #1
   299bc:	e7f4      	b.n	299a8 <strcat+0x4>

000299be <strchr>:
   299be:	b2c9      	uxtb	r1, r1
   299c0:	7803      	ldrb	r3, [r0, #0]
   299c2:	2b00      	cmp	r3, #0
   299c4:	d004      	beq.n	299d0 <strchr+0x12>
   299c6:	4299      	cmp	r1, r3
   299c8:	d100      	bne.n	299cc <strchr+0xe>
   299ca:	4770      	bx	lr
   299cc:	3001      	adds	r0, #1
   299ce:	e7f7      	b.n	299c0 <strchr+0x2>
   299d0:	424b      	negs	r3, r1
   299d2:	4159      	adcs	r1, r3
   299d4:	4249      	negs	r1, r1
   299d6:	4008      	ands	r0, r1
   299d8:	e7f7      	b.n	299ca <strchr+0xc>

000299da <strcpy>:
   299da:	1c03      	adds	r3, r0, #0
   299dc:	780a      	ldrb	r2, [r1, #0]
   299de:	3101      	adds	r1, #1
   299e0:	701a      	strb	r2, [r3, #0]
   299e2:	3301      	adds	r3, #1
   299e4:	2a00      	cmp	r2, #0
   299e6:	d1f9      	bne.n	299dc <strcpy+0x2>
   299e8:	4770      	bx	lr

000299ea <strlen>:
   299ea:	2300      	movs	r3, #0
   299ec:	5cc2      	ldrb	r2, [r0, r3]
   299ee:	3301      	adds	r3, #1
   299f0:	2a00      	cmp	r2, #0
   299f2:	d1fb      	bne.n	299ec <strlen+0x2>
   299f4:	1e58      	subs	r0, r3, #1
   299f6:	4770      	bx	lr

000299f8 <strncmp>:
   299f8:	2300      	movs	r3, #0
   299fa:	b530      	push	{r4, r5, lr}
   299fc:	429a      	cmp	r2, r3
   299fe:	d00a      	beq.n	29a16 <strncmp+0x1e>
   29a00:	3a01      	subs	r2, #1
   29a02:	5cc4      	ldrb	r4, [r0, r3]
   29a04:	5ccd      	ldrb	r5, [r1, r3]
   29a06:	42ac      	cmp	r4, r5
   29a08:	d104      	bne.n	29a14 <strncmp+0x1c>
   29a0a:	429a      	cmp	r2, r3
   29a0c:	d002      	beq.n	29a14 <strncmp+0x1c>
   29a0e:	3301      	adds	r3, #1
   29a10:	2c00      	cmp	r4, #0
   29a12:	d1f6      	bne.n	29a02 <strncmp+0xa>
   29a14:	1b63      	subs	r3, r4, r5
   29a16:	0018      	movs	r0, r3
   29a18:	bd30      	pop	{r4, r5, pc}

00029a1a <strstr>:
   29a1a:	b510      	push	{r4, lr}
   29a1c:	0002      	movs	r2, r0
   29a1e:	7800      	ldrb	r0, [r0, #0]
   29a20:	2800      	cmp	r0, #0
   29a22:	d104      	bne.n	29a2e <strstr+0x14>
   29a24:	7809      	ldrb	r1, [r1, #0]
   29a26:	2900      	cmp	r1, #0
   29a28:	d00d      	beq.n	29a46 <strstr+0x2c>
   29a2a:	bd10      	pop	{r4, pc}
   29a2c:	3201      	adds	r2, #1
   29a2e:	7810      	ldrb	r0, [r2, #0]
   29a30:	2800      	cmp	r0, #0
   29a32:	d0fa      	beq.n	29a2a <strstr+0x10>
   29a34:	2300      	movs	r3, #0
   29a36:	5cc8      	ldrb	r0, [r1, r3]
   29a38:	2800      	cmp	r0, #0
   29a3a:	d004      	beq.n	29a46 <strstr+0x2c>
   29a3c:	5cd4      	ldrb	r4, [r2, r3]
   29a3e:	4284      	cmp	r4, r0
   29a40:	d1f4      	bne.n	29a2c <strstr+0x12>
   29a42:	3301      	adds	r3, #1
   29a44:	e7f7      	b.n	29a36 <strstr+0x1c>
   29a46:	0010      	movs	r0, r2
   29a48:	e7ef      	b.n	29a2a <strstr+0x10>
	...

00029a4c <strtok>:
   29a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a4e:	4b12      	ldr	r3, [pc, #72]	; (29a98 <strtok+0x4c>)
   29a50:	0006      	movs	r6, r0
   29a52:	681d      	ldr	r5, [r3, #0]
   29a54:	000f      	movs	r7, r1
   29a56:	6dac      	ldr	r4, [r5, #88]	; 0x58
   29a58:	2c00      	cmp	r4, #0
   29a5a:	d116      	bne.n	29a8a <strtok+0x3e>
   29a5c:	2050      	movs	r0, #80	; 0x50
   29a5e:	f7ff fe3b 	bl	296d8 <malloc>
   29a62:	65a8      	str	r0, [r5, #88]	; 0x58
   29a64:	6004      	str	r4, [r0, #0]
   29a66:	6044      	str	r4, [r0, #4]
   29a68:	6084      	str	r4, [r0, #8]
   29a6a:	60c4      	str	r4, [r0, #12]
   29a6c:	6104      	str	r4, [r0, #16]
   29a6e:	6144      	str	r4, [r0, #20]
   29a70:	6184      	str	r4, [r0, #24]
   29a72:	6284      	str	r4, [r0, #40]	; 0x28
   29a74:	62c4      	str	r4, [r0, #44]	; 0x2c
   29a76:	6304      	str	r4, [r0, #48]	; 0x30
   29a78:	6344      	str	r4, [r0, #52]	; 0x34
   29a7a:	6384      	str	r4, [r0, #56]	; 0x38
   29a7c:	63c4      	str	r4, [r0, #60]	; 0x3c
   29a7e:	6404      	str	r4, [r0, #64]	; 0x40
   29a80:	6444      	str	r4, [r0, #68]	; 0x44
   29a82:	6484      	str	r4, [r0, #72]	; 0x48
   29a84:	64c4      	str	r4, [r0, #76]	; 0x4c
   29a86:	7704      	strb	r4, [r0, #28]
   29a88:	6244      	str	r4, [r0, #36]	; 0x24
   29a8a:	6daa      	ldr	r2, [r5, #88]	; 0x58
   29a8c:	0039      	movs	r1, r7
   29a8e:	0030      	movs	r0, r6
   29a90:	2301      	movs	r3, #1
   29a92:	f000 f803 	bl	29a9c <__strtok_r>
   29a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29a98:	20000034 	.word	0x20000034

00029a9c <__strtok_r>:
   29a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29a9e:	2800      	cmp	r0, #0
   29aa0:	d104      	bne.n	29aac <__strtok_r+0x10>
   29aa2:	6810      	ldr	r0, [r2, #0]
   29aa4:	2800      	cmp	r0, #0
   29aa6:	d101      	bne.n	29aac <__strtok_r+0x10>
   29aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29aaa:	0020      	movs	r0, r4
   29aac:	000e      	movs	r6, r1
   29aae:	7805      	ldrb	r5, [r0, #0]
   29ab0:	1c44      	adds	r4, r0, #1
   29ab2:	7837      	ldrb	r7, [r6, #0]
   29ab4:	2f00      	cmp	r7, #0
   29ab6:	d104      	bne.n	29ac2 <__strtok_r+0x26>
   29ab8:	2d00      	cmp	r5, #0
   29aba:	d110      	bne.n	29ade <__strtok_r+0x42>
   29abc:	6015      	str	r5, [r2, #0]
   29abe:	0028      	movs	r0, r5
   29ac0:	e7f2      	b.n	29aa8 <__strtok_r+0xc>
   29ac2:	3601      	adds	r6, #1
   29ac4:	42bd      	cmp	r5, r7
   29ac6:	d1f4      	bne.n	29ab2 <__strtok_r+0x16>
   29ac8:	2b00      	cmp	r3, #0
   29aca:	d1ee      	bne.n	29aaa <__strtok_r+0xe>
   29acc:	6014      	str	r4, [r2, #0]
   29ace:	7003      	strb	r3, [r0, #0]
   29ad0:	e7ea      	b.n	29aa8 <__strtok_r+0xc>
   29ad2:	0033      	movs	r3, r6
   29ad4:	e00e      	b.n	29af4 <__strtok_r+0x58>
   29ad6:	3501      	adds	r5, #1
   29ad8:	001c      	movs	r4, r3
   29ada:	2f00      	cmp	r7, #0
   29adc:	d102      	bne.n	29ae4 <__strtok_r+0x48>
   29ade:	000d      	movs	r5, r1
   29ae0:	7826      	ldrb	r6, [r4, #0]
   29ae2:	1c63      	adds	r3, r4, #1
   29ae4:	782f      	ldrb	r7, [r5, #0]
   29ae6:	42be      	cmp	r6, r7
   29ae8:	d1f5      	bne.n	29ad6 <__strtok_r+0x3a>
   29aea:	2e00      	cmp	r6, #0
   29aec:	d0f1      	beq.n	29ad2 <__strtok_r+0x36>
   29aee:	2400      	movs	r4, #0
   29af0:	1e59      	subs	r1, r3, #1
   29af2:	700c      	strb	r4, [r1, #0]
   29af4:	6013      	str	r3, [r2, #0]
   29af6:	e7d7      	b.n	29aa8 <__strtok_r+0xc>

00029af8 <_strtol_l.isra.0>:
   29af8:	b5f0      	push	{r4, r5, r6, r7, lr}
   29afa:	001f      	movs	r7, r3
   29afc:	000e      	movs	r6, r1
   29afe:	b087      	sub	sp, #28
   29b00:	9005      	str	r0, [sp, #20]
   29b02:	9103      	str	r1, [sp, #12]
   29b04:	9202      	str	r2, [sp, #8]
   29b06:	980c      	ldr	r0, [sp, #48]	; 0x30
   29b08:	7834      	ldrb	r4, [r6, #0]
   29b0a:	f7ff fdd3 	bl	296b4 <__locale_ctype_ptr_l>
   29b0e:	2208      	movs	r2, #8
   29b10:	1900      	adds	r0, r0, r4
   29b12:	7843      	ldrb	r3, [r0, #1]
   29b14:	1c75      	adds	r5, r6, #1
   29b16:	4013      	ands	r3, r2
   29b18:	d10c      	bne.n	29b34 <_strtol_l.isra.0+0x3c>
   29b1a:	2c2d      	cmp	r4, #45	; 0x2d
   29b1c:	d10c      	bne.n	29b38 <_strtol_l.isra.0+0x40>
   29b1e:	3301      	adds	r3, #1
   29b20:	782c      	ldrb	r4, [r5, #0]
   29b22:	9301      	str	r3, [sp, #4]
   29b24:	1cb5      	adds	r5, r6, #2
   29b26:	2f00      	cmp	r7, #0
   29b28:	d00c      	beq.n	29b44 <_strtol_l.isra.0+0x4c>
   29b2a:	2f10      	cmp	r7, #16
   29b2c:	d114      	bne.n	29b58 <_strtol_l.isra.0+0x60>
   29b2e:	2c30      	cmp	r4, #48	; 0x30
   29b30:	d00a      	beq.n	29b48 <_strtol_l.isra.0+0x50>
   29b32:	e011      	b.n	29b58 <_strtol_l.isra.0+0x60>
   29b34:	002e      	movs	r6, r5
   29b36:	e7e6      	b.n	29b06 <_strtol_l.isra.0+0xe>
   29b38:	9301      	str	r3, [sp, #4]
   29b3a:	2c2b      	cmp	r4, #43	; 0x2b
   29b3c:	d1f3      	bne.n	29b26 <_strtol_l.isra.0+0x2e>
   29b3e:	782c      	ldrb	r4, [r5, #0]
   29b40:	1cb5      	adds	r5, r6, #2
   29b42:	e7f0      	b.n	29b26 <_strtol_l.isra.0+0x2e>
   29b44:	2c30      	cmp	r4, #48	; 0x30
   29b46:	d12f      	bne.n	29ba8 <_strtol_l.isra.0+0xb0>
   29b48:	2220      	movs	r2, #32
   29b4a:	782b      	ldrb	r3, [r5, #0]
   29b4c:	4393      	bics	r3, r2
   29b4e:	2b58      	cmp	r3, #88	; 0x58
   29b50:	d151      	bne.n	29bf6 <_strtol_l.isra.0+0xfe>
   29b52:	2710      	movs	r7, #16
   29b54:	786c      	ldrb	r4, [r5, #1]
   29b56:	3502      	adds	r5, #2
   29b58:	9b01      	ldr	r3, [sp, #4]
   29b5a:	4a29      	ldr	r2, [pc, #164]	; (29c00 <_strtol_l.isra.0+0x108>)
   29b5c:	0039      	movs	r1, r7
   29b5e:	189e      	adds	r6, r3, r2
   29b60:	0030      	movs	r0, r6
   29b62:	f7fd fa45 	bl	26ff0 <__aeabi_uidivmod>
   29b66:	0030      	movs	r0, r6
   29b68:	9104      	str	r1, [sp, #16]
   29b6a:	0039      	movs	r1, r7
   29b6c:	f7fd f9ba 	bl	26ee4 <__udivsi3>
   29b70:	2101      	movs	r1, #1
   29b72:	2300      	movs	r3, #0
   29b74:	4249      	negs	r1, r1
   29b76:	0002      	movs	r2, r0
   29b78:	468c      	mov	ip, r1
   29b7a:	0018      	movs	r0, r3
   29b7c:	0021      	movs	r1, r4
   29b7e:	3930      	subs	r1, #48	; 0x30
   29b80:	2909      	cmp	r1, #9
   29b82:	d813      	bhi.n	29bac <_strtol_l.isra.0+0xb4>
   29b84:	000c      	movs	r4, r1
   29b86:	42a7      	cmp	r7, r4
   29b88:	dd1c      	ble.n	29bc4 <_strtol_l.isra.0+0xcc>
   29b8a:	1c59      	adds	r1, r3, #1
   29b8c:	d009      	beq.n	29ba2 <_strtol_l.isra.0+0xaa>
   29b8e:	4663      	mov	r3, ip
   29b90:	4282      	cmp	r2, r0
   29b92:	d306      	bcc.n	29ba2 <_strtol_l.isra.0+0xaa>
   29b94:	d102      	bne.n	29b9c <_strtol_l.isra.0+0xa4>
   29b96:	9904      	ldr	r1, [sp, #16]
   29b98:	42a1      	cmp	r1, r4
   29b9a:	db02      	blt.n	29ba2 <_strtol_l.isra.0+0xaa>
   29b9c:	2301      	movs	r3, #1
   29b9e:	4378      	muls	r0, r7
   29ba0:	1820      	adds	r0, r4, r0
   29ba2:	782c      	ldrb	r4, [r5, #0]
   29ba4:	3501      	adds	r5, #1
   29ba6:	e7e9      	b.n	29b7c <_strtol_l.isra.0+0x84>
   29ba8:	270a      	movs	r7, #10
   29baa:	e7d5      	b.n	29b58 <_strtol_l.isra.0+0x60>
   29bac:	0021      	movs	r1, r4
   29bae:	3941      	subs	r1, #65	; 0x41
   29bb0:	2919      	cmp	r1, #25
   29bb2:	d801      	bhi.n	29bb8 <_strtol_l.isra.0+0xc0>
   29bb4:	3c37      	subs	r4, #55	; 0x37
   29bb6:	e7e6      	b.n	29b86 <_strtol_l.isra.0+0x8e>
   29bb8:	0021      	movs	r1, r4
   29bba:	3961      	subs	r1, #97	; 0x61
   29bbc:	2919      	cmp	r1, #25
   29bbe:	d801      	bhi.n	29bc4 <_strtol_l.isra.0+0xcc>
   29bc0:	3c57      	subs	r4, #87	; 0x57
   29bc2:	e7e0      	b.n	29b86 <_strtol_l.isra.0+0x8e>
   29bc4:	1c5a      	adds	r2, r3, #1
   29bc6:	d108      	bne.n	29bda <_strtol_l.isra.0+0xe2>
   29bc8:	9a05      	ldr	r2, [sp, #20]
   29bca:	3323      	adds	r3, #35	; 0x23
   29bcc:	6013      	str	r3, [r2, #0]
   29bce:	9b02      	ldr	r3, [sp, #8]
   29bd0:	0030      	movs	r0, r6
   29bd2:	2b00      	cmp	r3, #0
   29bd4:	d10b      	bne.n	29bee <_strtol_l.isra.0+0xf6>
   29bd6:	b007      	add	sp, #28
   29bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29bda:	9a01      	ldr	r2, [sp, #4]
   29bdc:	2a00      	cmp	r2, #0
   29bde:	d000      	beq.n	29be2 <_strtol_l.isra.0+0xea>
   29be0:	4240      	negs	r0, r0
   29be2:	9a02      	ldr	r2, [sp, #8]
   29be4:	2a00      	cmp	r2, #0
   29be6:	d0f6      	beq.n	29bd6 <_strtol_l.isra.0+0xde>
   29be8:	9a03      	ldr	r2, [sp, #12]
   29bea:	2b00      	cmp	r3, #0
   29bec:	d000      	beq.n	29bf0 <_strtol_l.isra.0+0xf8>
   29bee:	1e6a      	subs	r2, r5, #1
   29bf0:	9b02      	ldr	r3, [sp, #8]
   29bf2:	601a      	str	r2, [r3, #0]
   29bf4:	e7ef      	b.n	29bd6 <_strtol_l.isra.0+0xde>
   29bf6:	2430      	movs	r4, #48	; 0x30
   29bf8:	2f00      	cmp	r7, #0
   29bfa:	d1ad      	bne.n	29b58 <_strtol_l.isra.0+0x60>
   29bfc:	3708      	adds	r7, #8
   29bfe:	e7ab      	b.n	29b58 <_strtol_l.isra.0+0x60>
   29c00:	7fffffff 	.word	0x7fffffff

00029c04 <strtol>:
   29c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29c06:	0013      	movs	r3, r2
   29c08:	4a06      	ldr	r2, [pc, #24]	; (29c24 <strtol+0x20>)
   29c0a:	0005      	movs	r5, r0
   29c0c:	6810      	ldr	r0, [r2, #0]
   29c0e:	6a04      	ldr	r4, [r0, #32]
   29c10:	2c00      	cmp	r4, #0
   29c12:	d100      	bne.n	29c16 <strtol+0x12>
   29c14:	4c04      	ldr	r4, [pc, #16]	; (29c28 <strtol+0x24>)
   29c16:	000a      	movs	r2, r1
   29c18:	9400      	str	r4, [sp, #0]
   29c1a:	0029      	movs	r1, r5
   29c1c:	f7ff ff6c 	bl	29af8 <_strtol_l.isra.0>
   29c20:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   29c22:	46c0      	nop			; (mov r8, r8)
   29c24:	20000034 	.word	0x20000034
   29c28:	20000098 	.word	0x20000098

00029c2c <__utoa>:
   29c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29c2e:	0017      	movs	r7, r2
   29c30:	b08f      	sub	sp, #60	; 0x3c
   29c32:	2225      	movs	r2, #37	; 0x25
   29c34:	0006      	movs	r6, r0
   29c36:	000d      	movs	r5, r1
   29c38:	a804      	add	r0, sp, #16
   29c3a:	4918      	ldr	r1, [pc, #96]	; (29c9c <__utoa+0x70>)
   29c3c:	f7ff fd72 	bl	29724 <memcpy>
   29c40:	aa04      	add	r2, sp, #16
   29c42:	1ebb      	subs	r3, r7, #2
   29c44:	2400      	movs	r4, #0
   29c46:	9203      	str	r2, [sp, #12]
   29c48:	2b22      	cmp	r3, #34	; 0x22
   29c4a:	d905      	bls.n	29c58 <__utoa+0x2c>
   29c4c:	702c      	strb	r4, [r5, #0]
   29c4e:	0025      	movs	r5, r4
   29c50:	0028      	movs	r0, r5
   29c52:	b00f      	add	sp, #60	; 0x3c
   29c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29c56:	9c01      	ldr	r4, [sp, #4]
   29c58:	1c63      	adds	r3, r4, #1
   29c5a:	9301      	str	r3, [sp, #4]
   29c5c:	18eb      	adds	r3, r5, r3
   29c5e:	9300      	str	r3, [sp, #0]
   29c60:	0030      	movs	r0, r6
   29c62:	3b01      	subs	r3, #1
   29c64:	0039      	movs	r1, r7
   29c66:	9302      	str	r3, [sp, #8]
   29c68:	f7fd f9c2 	bl	26ff0 <__aeabi_uidivmod>
   29c6c:	9b03      	ldr	r3, [sp, #12]
   29c6e:	9a02      	ldr	r2, [sp, #8]
   29c70:	5c5b      	ldrb	r3, [r3, r1]
   29c72:	0030      	movs	r0, r6
   29c74:	7013      	strb	r3, [r2, #0]
   29c76:	0039      	movs	r1, r7
   29c78:	f7fd f934 	bl	26ee4 <__udivsi3>
   29c7c:	1e06      	subs	r6, r0, #0
   29c7e:	d1ea      	bne.n	29c56 <__utoa+0x2a>
   29c80:	9b00      	ldr	r3, [sp, #0]
   29c82:	7018      	strb	r0, [r3, #0]
   29c84:	002b      	movs	r3, r5
   29c86:	1b5a      	subs	r2, r3, r5
   29c88:	4294      	cmp	r4, r2
   29c8a:	dde1      	ble.n	29c50 <__utoa+0x24>
   29c8c:	781a      	ldrb	r2, [r3, #0]
   29c8e:	5d29      	ldrb	r1, [r5, r4]
   29c90:	7019      	strb	r1, [r3, #0]
   29c92:	552a      	strb	r2, [r5, r4]
   29c94:	3301      	adds	r3, #1
   29c96:	3c01      	subs	r4, #1
   29c98:	e7f5      	b.n	29c86 <__utoa+0x5a>
   29c9a:	46c0      	nop			; (mov r8, r8)
   29c9c:	0002b91a 	.word	0x0002b91a

00029ca0 <utoa>:
   29ca0:	b510      	push	{r4, lr}
   29ca2:	f7ff ffc3 	bl	29c2c <__utoa>
   29ca6:	bd10      	pop	{r4, pc}

00029ca8 <_vsiprintf_r>:
   29ca8:	b530      	push	{r4, r5, lr}
   29caa:	b09b      	sub	sp, #108	; 0x6c
   29cac:	9100      	str	r1, [sp, #0]
   29cae:	9104      	str	r1, [sp, #16]
   29cb0:	4908      	ldr	r1, [pc, #32]	; (29cd4 <_vsiprintf_r+0x2c>)
   29cb2:	466d      	mov	r5, sp
   29cb4:	9102      	str	r1, [sp, #8]
   29cb6:	9105      	str	r1, [sp, #20]
   29cb8:	2101      	movs	r1, #1
   29cba:	2482      	movs	r4, #130	; 0x82
   29cbc:	4249      	negs	r1, r1
   29cbe:	81e9      	strh	r1, [r5, #14]
   29cc0:	00a4      	lsls	r4, r4, #2
   29cc2:	4669      	mov	r1, sp
   29cc4:	81ac      	strh	r4, [r5, #12]
   29cc6:	f000 f883 	bl	29dd0 <_svfiprintf_r>
   29cca:	2300      	movs	r3, #0
   29ccc:	9a00      	ldr	r2, [sp, #0]
   29cce:	7013      	strb	r3, [r2, #0]
   29cd0:	b01b      	add	sp, #108	; 0x6c
   29cd2:	bd30      	pop	{r4, r5, pc}
   29cd4:	7fffffff 	.word	0x7fffffff

00029cd8 <vsiprintf>:
   29cd8:	b510      	push	{r4, lr}
   29cda:	0013      	movs	r3, r2
   29cdc:	000a      	movs	r2, r1
   29cde:	0001      	movs	r1, r0
   29ce0:	4802      	ldr	r0, [pc, #8]	; (29cec <vsiprintf+0x14>)
   29ce2:	6800      	ldr	r0, [r0, #0]
   29ce4:	f7ff ffe0 	bl	29ca8 <_vsiprintf_r>
   29ce8:	bd10      	pop	{r4, pc}
   29cea:	46c0      	nop			; (mov r8, r8)
   29cec:	20000034 	.word	0x20000034

00029cf0 <__ascii_wctomb>:
   29cf0:	1e0b      	subs	r3, r1, #0
   29cf2:	d004      	beq.n	29cfe <__ascii_wctomb+0xe>
   29cf4:	2aff      	cmp	r2, #255	; 0xff
   29cf6:	d904      	bls.n	29d02 <__ascii_wctomb+0x12>
   29cf8:	238a      	movs	r3, #138	; 0x8a
   29cfa:	6003      	str	r3, [r0, #0]
   29cfc:	3b8b      	subs	r3, #139	; 0x8b
   29cfe:	0018      	movs	r0, r3
   29d00:	4770      	bx	lr
   29d02:	700a      	strb	r2, [r1, #0]
   29d04:	2301      	movs	r3, #1
   29d06:	e7fa      	b.n	29cfe <__ascii_wctomb+0xe>

00029d08 <__malloc_lock>:
   29d08:	4770      	bx	lr

00029d0a <__malloc_unlock>:
   29d0a:	4770      	bx	lr

00029d0c <__ssputs_r>:
   29d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d0e:	688e      	ldr	r6, [r1, #8]
   29d10:	b085      	sub	sp, #20
   29d12:	0007      	movs	r7, r0
   29d14:	000c      	movs	r4, r1
   29d16:	9203      	str	r2, [sp, #12]
   29d18:	9301      	str	r3, [sp, #4]
   29d1a:	429e      	cmp	r6, r3
   29d1c:	d839      	bhi.n	29d92 <__ssputs_r+0x86>
   29d1e:	2390      	movs	r3, #144	; 0x90
   29d20:	898a      	ldrh	r2, [r1, #12]
   29d22:	00db      	lsls	r3, r3, #3
   29d24:	421a      	tst	r2, r3
   29d26:	d034      	beq.n	29d92 <__ssputs_r+0x86>
   29d28:	2503      	movs	r5, #3
   29d2a:	6909      	ldr	r1, [r1, #16]
   29d2c:	6823      	ldr	r3, [r4, #0]
   29d2e:	1a5b      	subs	r3, r3, r1
   29d30:	9302      	str	r3, [sp, #8]
   29d32:	6963      	ldr	r3, [r4, #20]
   29d34:	9802      	ldr	r0, [sp, #8]
   29d36:	435d      	muls	r5, r3
   29d38:	0feb      	lsrs	r3, r5, #31
   29d3a:	195d      	adds	r5, r3, r5
   29d3c:	9b01      	ldr	r3, [sp, #4]
   29d3e:	106d      	asrs	r5, r5, #1
   29d40:	3301      	adds	r3, #1
   29d42:	181b      	adds	r3, r3, r0
   29d44:	42ab      	cmp	r3, r5
   29d46:	d900      	bls.n	29d4a <__ssputs_r+0x3e>
   29d48:	001d      	movs	r5, r3
   29d4a:	0553      	lsls	r3, r2, #21
   29d4c:	d532      	bpl.n	29db4 <__ssputs_r+0xa8>
   29d4e:	0029      	movs	r1, r5
   29d50:	0038      	movs	r0, r7
   29d52:	f7ff fd63 	bl	2981c <_malloc_r>
   29d56:	1e06      	subs	r6, r0, #0
   29d58:	d109      	bne.n	29d6e <__ssputs_r+0x62>
   29d5a:	230c      	movs	r3, #12
   29d5c:	603b      	str	r3, [r7, #0]
   29d5e:	2340      	movs	r3, #64	; 0x40
   29d60:	2001      	movs	r0, #1
   29d62:	89a2      	ldrh	r2, [r4, #12]
   29d64:	4240      	negs	r0, r0
   29d66:	4313      	orrs	r3, r2
   29d68:	81a3      	strh	r3, [r4, #12]
   29d6a:	b005      	add	sp, #20
   29d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29d6e:	9a02      	ldr	r2, [sp, #8]
   29d70:	6921      	ldr	r1, [r4, #16]
   29d72:	f7ff fcd7 	bl	29724 <memcpy>
   29d76:	89a3      	ldrh	r3, [r4, #12]
   29d78:	4a14      	ldr	r2, [pc, #80]	; (29dcc <__ssputs_r+0xc0>)
   29d7a:	401a      	ands	r2, r3
   29d7c:	2380      	movs	r3, #128	; 0x80
   29d7e:	4313      	orrs	r3, r2
   29d80:	81a3      	strh	r3, [r4, #12]
   29d82:	9b02      	ldr	r3, [sp, #8]
   29d84:	6126      	str	r6, [r4, #16]
   29d86:	18f6      	adds	r6, r6, r3
   29d88:	6026      	str	r6, [r4, #0]
   29d8a:	6165      	str	r5, [r4, #20]
   29d8c:	9e01      	ldr	r6, [sp, #4]
   29d8e:	1aed      	subs	r5, r5, r3
   29d90:	60a5      	str	r5, [r4, #8]
   29d92:	9b01      	ldr	r3, [sp, #4]
   29d94:	42b3      	cmp	r3, r6
   29d96:	d200      	bcs.n	29d9a <__ssputs_r+0x8e>
   29d98:	001e      	movs	r6, r3
   29d9a:	0032      	movs	r2, r6
   29d9c:	9903      	ldr	r1, [sp, #12]
   29d9e:	6820      	ldr	r0, [r4, #0]
   29da0:	f7ff fcc9 	bl	29736 <memmove>
   29da4:	68a3      	ldr	r3, [r4, #8]
   29da6:	2000      	movs	r0, #0
   29da8:	1b9b      	subs	r3, r3, r6
   29daa:	60a3      	str	r3, [r4, #8]
   29dac:	6823      	ldr	r3, [r4, #0]
   29dae:	199e      	adds	r6, r3, r6
   29db0:	6026      	str	r6, [r4, #0]
   29db2:	e7da      	b.n	29d6a <__ssputs_r+0x5e>
   29db4:	002a      	movs	r2, r5
   29db6:	0038      	movs	r0, r7
   29db8:	f000 faa1 	bl	2a2fe <_realloc_r>
   29dbc:	1e06      	subs	r6, r0, #0
   29dbe:	d1e0      	bne.n	29d82 <__ssputs_r+0x76>
   29dc0:	6921      	ldr	r1, [r4, #16]
   29dc2:	0038      	movs	r0, r7
   29dc4:	f7ff fce0 	bl	29788 <_free_r>
   29dc8:	e7c7      	b.n	29d5a <__ssputs_r+0x4e>
   29dca:	46c0      	nop			; (mov r8, r8)
   29dcc:	fffffb7f 	.word	0xfffffb7f

00029dd0 <_svfiprintf_r>:
   29dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   29dd2:	b09f      	sub	sp, #124	; 0x7c
   29dd4:	9002      	str	r0, [sp, #8]
   29dd6:	9305      	str	r3, [sp, #20]
   29dd8:	898b      	ldrh	r3, [r1, #12]
   29dda:	000f      	movs	r7, r1
   29ddc:	0016      	movs	r6, r2
   29dde:	061b      	lsls	r3, r3, #24
   29de0:	d511      	bpl.n	29e06 <_svfiprintf_r+0x36>
   29de2:	690b      	ldr	r3, [r1, #16]
   29de4:	2b00      	cmp	r3, #0
   29de6:	d10e      	bne.n	29e06 <_svfiprintf_r+0x36>
   29de8:	2140      	movs	r1, #64	; 0x40
   29dea:	f7ff fd17 	bl	2981c <_malloc_r>
   29dee:	6038      	str	r0, [r7, #0]
   29df0:	6138      	str	r0, [r7, #16]
   29df2:	2800      	cmp	r0, #0
   29df4:	d105      	bne.n	29e02 <_svfiprintf_r+0x32>
   29df6:	230c      	movs	r3, #12
   29df8:	9a02      	ldr	r2, [sp, #8]
   29dfa:	3801      	subs	r0, #1
   29dfc:	6013      	str	r3, [r2, #0]
   29dfe:	b01f      	add	sp, #124	; 0x7c
   29e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29e02:	2340      	movs	r3, #64	; 0x40
   29e04:	617b      	str	r3, [r7, #20]
   29e06:	2300      	movs	r3, #0
   29e08:	ad06      	add	r5, sp, #24
   29e0a:	616b      	str	r3, [r5, #20]
   29e0c:	3320      	adds	r3, #32
   29e0e:	766b      	strb	r3, [r5, #25]
   29e10:	3310      	adds	r3, #16
   29e12:	76ab      	strb	r3, [r5, #26]
   29e14:	0034      	movs	r4, r6
   29e16:	7823      	ldrb	r3, [r4, #0]
   29e18:	2b00      	cmp	r3, #0
   29e1a:	d147      	bne.n	29eac <_svfiprintf_r+0xdc>
   29e1c:	1ba3      	subs	r3, r4, r6
   29e1e:	9304      	str	r3, [sp, #16]
   29e20:	d00d      	beq.n	29e3e <_svfiprintf_r+0x6e>
   29e22:	1ba3      	subs	r3, r4, r6
   29e24:	0032      	movs	r2, r6
   29e26:	0039      	movs	r1, r7
   29e28:	9802      	ldr	r0, [sp, #8]
   29e2a:	f7ff ff6f 	bl	29d0c <__ssputs_r>
   29e2e:	1c43      	adds	r3, r0, #1
   29e30:	d100      	bne.n	29e34 <_svfiprintf_r+0x64>
   29e32:	e0b5      	b.n	29fa0 <_svfiprintf_r+0x1d0>
   29e34:	696a      	ldr	r2, [r5, #20]
   29e36:	9b04      	ldr	r3, [sp, #16]
   29e38:	4694      	mov	ip, r2
   29e3a:	4463      	add	r3, ip
   29e3c:	616b      	str	r3, [r5, #20]
   29e3e:	7823      	ldrb	r3, [r4, #0]
   29e40:	2b00      	cmp	r3, #0
   29e42:	d100      	bne.n	29e46 <_svfiprintf_r+0x76>
   29e44:	e0ac      	b.n	29fa0 <_svfiprintf_r+0x1d0>
   29e46:	2201      	movs	r2, #1
   29e48:	2300      	movs	r3, #0
   29e4a:	4252      	negs	r2, r2
   29e4c:	606a      	str	r2, [r5, #4]
   29e4e:	a902      	add	r1, sp, #8
   29e50:	3254      	adds	r2, #84	; 0x54
   29e52:	1852      	adds	r2, r2, r1
   29e54:	3401      	adds	r4, #1
   29e56:	602b      	str	r3, [r5, #0]
   29e58:	60eb      	str	r3, [r5, #12]
   29e5a:	60ab      	str	r3, [r5, #8]
   29e5c:	7013      	strb	r3, [r2, #0]
   29e5e:	65ab      	str	r3, [r5, #88]	; 0x58
   29e60:	4e58      	ldr	r6, [pc, #352]	; (29fc4 <_svfiprintf_r+0x1f4>)
   29e62:	2205      	movs	r2, #5
   29e64:	7821      	ldrb	r1, [r4, #0]
   29e66:	0030      	movs	r0, r6
   29e68:	f000 fa3e 	bl	2a2e8 <memchr>
   29e6c:	1c62      	adds	r2, r4, #1
   29e6e:	2800      	cmp	r0, #0
   29e70:	d120      	bne.n	29eb4 <_svfiprintf_r+0xe4>
   29e72:	6829      	ldr	r1, [r5, #0]
   29e74:	06cb      	lsls	r3, r1, #27
   29e76:	d504      	bpl.n	29e82 <_svfiprintf_r+0xb2>
   29e78:	2353      	movs	r3, #83	; 0x53
   29e7a:	ae02      	add	r6, sp, #8
   29e7c:	3020      	adds	r0, #32
   29e7e:	199b      	adds	r3, r3, r6
   29e80:	7018      	strb	r0, [r3, #0]
   29e82:	070b      	lsls	r3, r1, #28
   29e84:	d504      	bpl.n	29e90 <_svfiprintf_r+0xc0>
   29e86:	2353      	movs	r3, #83	; 0x53
   29e88:	202b      	movs	r0, #43	; 0x2b
   29e8a:	ae02      	add	r6, sp, #8
   29e8c:	199b      	adds	r3, r3, r6
   29e8e:	7018      	strb	r0, [r3, #0]
   29e90:	7823      	ldrb	r3, [r4, #0]
   29e92:	2b2a      	cmp	r3, #42	; 0x2a
   29e94:	d016      	beq.n	29ec4 <_svfiprintf_r+0xf4>
   29e96:	2000      	movs	r0, #0
   29e98:	210a      	movs	r1, #10
   29e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29e9c:	7822      	ldrb	r2, [r4, #0]
   29e9e:	3a30      	subs	r2, #48	; 0x30
   29ea0:	2a09      	cmp	r2, #9
   29ea2:	d955      	bls.n	29f50 <_svfiprintf_r+0x180>
   29ea4:	2800      	cmp	r0, #0
   29ea6:	d015      	beq.n	29ed4 <_svfiprintf_r+0x104>
   29ea8:	9309      	str	r3, [sp, #36]	; 0x24
   29eaa:	e013      	b.n	29ed4 <_svfiprintf_r+0x104>
   29eac:	2b25      	cmp	r3, #37	; 0x25
   29eae:	d0b5      	beq.n	29e1c <_svfiprintf_r+0x4c>
   29eb0:	3401      	adds	r4, #1
   29eb2:	e7b0      	b.n	29e16 <_svfiprintf_r+0x46>
   29eb4:	2301      	movs	r3, #1
   29eb6:	1b80      	subs	r0, r0, r6
   29eb8:	4083      	lsls	r3, r0
   29eba:	6829      	ldr	r1, [r5, #0]
   29ebc:	0014      	movs	r4, r2
   29ebe:	430b      	orrs	r3, r1
   29ec0:	602b      	str	r3, [r5, #0]
   29ec2:	e7cd      	b.n	29e60 <_svfiprintf_r+0x90>
   29ec4:	9b05      	ldr	r3, [sp, #20]
   29ec6:	1d18      	adds	r0, r3, #4
   29ec8:	681b      	ldr	r3, [r3, #0]
   29eca:	9005      	str	r0, [sp, #20]
   29ecc:	2b00      	cmp	r3, #0
   29ece:	db39      	blt.n	29f44 <_svfiprintf_r+0x174>
   29ed0:	9309      	str	r3, [sp, #36]	; 0x24
   29ed2:	0014      	movs	r4, r2
   29ed4:	7823      	ldrb	r3, [r4, #0]
   29ed6:	2b2e      	cmp	r3, #46	; 0x2e
   29ed8:	d10b      	bne.n	29ef2 <_svfiprintf_r+0x122>
   29eda:	7863      	ldrb	r3, [r4, #1]
   29edc:	1c62      	adds	r2, r4, #1
   29ede:	2b2a      	cmp	r3, #42	; 0x2a
   29ee0:	d13e      	bne.n	29f60 <_svfiprintf_r+0x190>
   29ee2:	9b05      	ldr	r3, [sp, #20]
   29ee4:	3402      	adds	r4, #2
   29ee6:	1d1a      	adds	r2, r3, #4
   29ee8:	681b      	ldr	r3, [r3, #0]
   29eea:	9205      	str	r2, [sp, #20]
   29eec:	2b00      	cmp	r3, #0
   29eee:	db34      	blt.n	29f5a <_svfiprintf_r+0x18a>
   29ef0:	9307      	str	r3, [sp, #28]
   29ef2:	4e35      	ldr	r6, [pc, #212]	; (29fc8 <_svfiprintf_r+0x1f8>)
   29ef4:	7821      	ldrb	r1, [r4, #0]
   29ef6:	2203      	movs	r2, #3
   29ef8:	0030      	movs	r0, r6
   29efa:	f000 f9f5 	bl	2a2e8 <memchr>
   29efe:	2800      	cmp	r0, #0
   29f00:	d006      	beq.n	29f10 <_svfiprintf_r+0x140>
   29f02:	2340      	movs	r3, #64	; 0x40
   29f04:	1b80      	subs	r0, r0, r6
   29f06:	4083      	lsls	r3, r0
   29f08:	682a      	ldr	r2, [r5, #0]
   29f0a:	3401      	adds	r4, #1
   29f0c:	4313      	orrs	r3, r2
   29f0e:	602b      	str	r3, [r5, #0]
   29f10:	7821      	ldrb	r1, [r4, #0]
   29f12:	2206      	movs	r2, #6
   29f14:	482d      	ldr	r0, [pc, #180]	; (29fcc <_svfiprintf_r+0x1fc>)
   29f16:	1c66      	adds	r6, r4, #1
   29f18:	7629      	strb	r1, [r5, #24]
   29f1a:	f000 f9e5 	bl	2a2e8 <memchr>
   29f1e:	2800      	cmp	r0, #0
   29f20:	d046      	beq.n	29fb0 <_svfiprintf_r+0x1e0>
   29f22:	4b2b      	ldr	r3, [pc, #172]	; (29fd0 <_svfiprintf_r+0x200>)
   29f24:	2b00      	cmp	r3, #0
   29f26:	d12f      	bne.n	29f88 <_svfiprintf_r+0x1b8>
   29f28:	6829      	ldr	r1, [r5, #0]
   29f2a:	9b05      	ldr	r3, [sp, #20]
   29f2c:	2207      	movs	r2, #7
   29f2e:	05c9      	lsls	r1, r1, #23
   29f30:	d528      	bpl.n	29f84 <_svfiprintf_r+0x1b4>
   29f32:	189b      	adds	r3, r3, r2
   29f34:	4393      	bics	r3, r2
   29f36:	3308      	adds	r3, #8
   29f38:	9305      	str	r3, [sp, #20]
   29f3a:	696b      	ldr	r3, [r5, #20]
   29f3c:	9a03      	ldr	r2, [sp, #12]
   29f3e:	189b      	adds	r3, r3, r2
   29f40:	616b      	str	r3, [r5, #20]
   29f42:	e767      	b.n	29e14 <_svfiprintf_r+0x44>
   29f44:	425b      	negs	r3, r3
   29f46:	60eb      	str	r3, [r5, #12]
   29f48:	2302      	movs	r3, #2
   29f4a:	430b      	orrs	r3, r1
   29f4c:	602b      	str	r3, [r5, #0]
   29f4e:	e7c0      	b.n	29ed2 <_svfiprintf_r+0x102>
   29f50:	434b      	muls	r3, r1
   29f52:	3401      	adds	r4, #1
   29f54:	189b      	adds	r3, r3, r2
   29f56:	2001      	movs	r0, #1
   29f58:	e7a0      	b.n	29e9c <_svfiprintf_r+0xcc>
   29f5a:	2301      	movs	r3, #1
   29f5c:	425b      	negs	r3, r3
   29f5e:	e7c7      	b.n	29ef0 <_svfiprintf_r+0x120>
   29f60:	2300      	movs	r3, #0
   29f62:	0014      	movs	r4, r2
   29f64:	200a      	movs	r0, #10
   29f66:	001a      	movs	r2, r3
   29f68:	606b      	str	r3, [r5, #4]
   29f6a:	7821      	ldrb	r1, [r4, #0]
   29f6c:	3930      	subs	r1, #48	; 0x30
   29f6e:	2909      	cmp	r1, #9
   29f70:	d903      	bls.n	29f7a <_svfiprintf_r+0x1aa>
   29f72:	2b00      	cmp	r3, #0
   29f74:	d0bd      	beq.n	29ef2 <_svfiprintf_r+0x122>
   29f76:	9207      	str	r2, [sp, #28]
   29f78:	e7bb      	b.n	29ef2 <_svfiprintf_r+0x122>
   29f7a:	4342      	muls	r2, r0
   29f7c:	3401      	adds	r4, #1
   29f7e:	1852      	adds	r2, r2, r1
   29f80:	2301      	movs	r3, #1
   29f82:	e7f2      	b.n	29f6a <_svfiprintf_r+0x19a>
   29f84:	3307      	adds	r3, #7
   29f86:	e7d5      	b.n	29f34 <_svfiprintf_r+0x164>
   29f88:	ab05      	add	r3, sp, #20
   29f8a:	9300      	str	r3, [sp, #0]
   29f8c:	003a      	movs	r2, r7
   29f8e:	4b11      	ldr	r3, [pc, #68]	; (29fd4 <_svfiprintf_r+0x204>)
   29f90:	0029      	movs	r1, r5
   29f92:	9802      	ldr	r0, [sp, #8]
   29f94:	e000      	b.n	29f98 <_svfiprintf_r+0x1c8>
   29f96:	bf00      	nop
   29f98:	9003      	str	r0, [sp, #12]
   29f9a:	9b03      	ldr	r3, [sp, #12]
   29f9c:	3301      	adds	r3, #1
   29f9e:	d1cc      	bne.n	29f3a <_svfiprintf_r+0x16a>
   29fa0:	89bb      	ldrh	r3, [r7, #12]
   29fa2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   29fa4:	065b      	lsls	r3, r3, #25
   29fa6:	d400      	bmi.n	29faa <_svfiprintf_r+0x1da>
   29fa8:	e729      	b.n	29dfe <_svfiprintf_r+0x2e>
   29faa:	2001      	movs	r0, #1
   29fac:	4240      	negs	r0, r0
   29fae:	e726      	b.n	29dfe <_svfiprintf_r+0x2e>
   29fb0:	ab05      	add	r3, sp, #20
   29fb2:	9300      	str	r3, [sp, #0]
   29fb4:	003a      	movs	r2, r7
   29fb6:	4b07      	ldr	r3, [pc, #28]	; (29fd4 <_svfiprintf_r+0x204>)
   29fb8:	0029      	movs	r1, r5
   29fba:	9802      	ldr	r0, [sp, #8]
   29fbc:	f000 f87a 	bl	2a0b4 <_printf_i>
   29fc0:	e7ea      	b.n	29f98 <_svfiprintf_r+0x1c8>
   29fc2:	46c0      	nop			; (mov r8, r8)
   29fc4:	0002ba40 	.word	0x0002ba40
   29fc8:	0002ba46 	.word	0x0002ba46
   29fcc:	0002ba4a 	.word	0x0002ba4a
   29fd0:	00000000 	.word	0x00000000
   29fd4:	00029d0d 	.word	0x00029d0d

00029fd8 <_printf_common>:
   29fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29fda:	0015      	movs	r5, r2
   29fdc:	9301      	str	r3, [sp, #4]
   29fde:	688a      	ldr	r2, [r1, #8]
   29fe0:	690b      	ldr	r3, [r1, #16]
   29fe2:	9000      	str	r0, [sp, #0]
   29fe4:	000c      	movs	r4, r1
   29fe6:	4293      	cmp	r3, r2
   29fe8:	da00      	bge.n	29fec <_printf_common+0x14>
   29fea:	0013      	movs	r3, r2
   29fec:	0022      	movs	r2, r4
   29fee:	602b      	str	r3, [r5, #0]
   29ff0:	3243      	adds	r2, #67	; 0x43
   29ff2:	7812      	ldrb	r2, [r2, #0]
   29ff4:	2a00      	cmp	r2, #0
   29ff6:	d001      	beq.n	29ffc <_printf_common+0x24>
   29ff8:	3301      	adds	r3, #1
   29ffa:	602b      	str	r3, [r5, #0]
   29ffc:	6823      	ldr	r3, [r4, #0]
   29ffe:	069b      	lsls	r3, r3, #26
   2a000:	d502      	bpl.n	2a008 <_printf_common+0x30>
   2a002:	682b      	ldr	r3, [r5, #0]
   2a004:	3302      	adds	r3, #2
   2a006:	602b      	str	r3, [r5, #0]
   2a008:	2706      	movs	r7, #6
   2a00a:	6823      	ldr	r3, [r4, #0]
   2a00c:	401f      	ands	r7, r3
   2a00e:	d027      	beq.n	2a060 <_printf_common+0x88>
   2a010:	0023      	movs	r3, r4
   2a012:	3343      	adds	r3, #67	; 0x43
   2a014:	781b      	ldrb	r3, [r3, #0]
   2a016:	1e5a      	subs	r2, r3, #1
   2a018:	4193      	sbcs	r3, r2
   2a01a:	6822      	ldr	r2, [r4, #0]
   2a01c:	0692      	lsls	r2, r2, #26
   2a01e:	d430      	bmi.n	2a082 <_printf_common+0xaa>
   2a020:	0022      	movs	r2, r4
   2a022:	9901      	ldr	r1, [sp, #4]
   2a024:	3243      	adds	r2, #67	; 0x43
   2a026:	9800      	ldr	r0, [sp, #0]
   2a028:	9e08      	ldr	r6, [sp, #32]
   2a02a:	47b0      	blx	r6
   2a02c:	1c43      	adds	r3, r0, #1
   2a02e:	d025      	beq.n	2a07c <_printf_common+0xa4>
   2a030:	2306      	movs	r3, #6
   2a032:	6820      	ldr	r0, [r4, #0]
   2a034:	682a      	ldr	r2, [r5, #0]
   2a036:	68e1      	ldr	r1, [r4, #12]
   2a038:	4003      	ands	r3, r0
   2a03a:	2500      	movs	r5, #0
   2a03c:	2b04      	cmp	r3, #4
   2a03e:	d103      	bne.n	2a048 <_printf_common+0x70>
   2a040:	1a8d      	subs	r5, r1, r2
   2a042:	43eb      	mvns	r3, r5
   2a044:	17db      	asrs	r3, r3, #31
   2a046:	401d      	ands	r5, r3
   2a048:	68a3      	ldr	r3, [r4, #8]
   2a04a:	6922      	ldr	r2, [r4, #16]
   2a04c:	4293      	cmp	r3, r2
   2a04e:	dd01      	ble.n	2a054 <_printf_common+0x7c>
   2a050:	1a9b      	subs	r3, r3, r2
   2a052:	18ed      	adds	r5, r5, r3
   2a054:	2700      	movs	r7, #0
   2a056:	42bd      	cmp	r5, r7
   2a058:	d120      	bne.n	2a09c <_printf_common+0xc4>
   2a05a:	2000      	movs	r0, #0
   2a05c:	e010      	b.n	2a080 <_printf_common+0xa8>
   2a05e:	3701      	adds	r7, #1
   2a060:	68e3      	ldr	r3, [r4, #12]
   2a062:	682a      	ldr	r2, [r5, #0]
   2a064:	1a9b      	subs	r3, r3, r2
   2a066:	429f      	cmp	r7, r3
   2a068:	dad2      	bge.n	2a010 <_printf_common+0x38>
   2a06a:	0022      	movs	r2, r4
   2a06c:	2301      	movs	r3, #1
   2a06e:	3219      	adds	r2, #25
   2a070:	9901      	ldr	r1, [sp, #4]
   2a072:	9800      	ldr	r0, [sp, #0]
   2a074:	9e08      	ldr	r6, [sp, #32]
   2a076:	47b0      	blx	r6
   2a078:	1c43      	adds	r3, r0, #1
   2a07a:	d1f0      	bne.n	2a05e <_printf_common+0x86>
   2a07c:	2001      	movs	r0, #1
   2a07e:	4240      	negs	r0, r0
   2a080:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2a082:	2030      	movs	r0, #48	; 0x30
   2a084:	18e1      	adds	r1, r4, r3
   2a086:	3143      	adds	r1, #67	; 0x43
   2a088:	7008      	strb	r0, [r1, #0]
   2a08a:	0021      	movs	r1, r4
   2a08c:	1c5a      	adds	r2, r3, #1
   2a08e:	3145      	adds	r1, #69	; 0x45
   2a090:	7809      	ldrb	r1, [r1, #0]
   2a092:	18a2      	adds	r2, r4, r2
   2a094:	3243      	adds	r2, #67	; 0x43
   2a096:	3302      	adds	r3, #2
   2a098:	7011      	strb	r1, [r2, #0]
   2a09a:	e7c1      	b.n	2a020 <_printf_common+0x48>
   2a09c:	0022      	movs	r2, r4
   2a09e:	2301      	movs	r3, #1
   2a0a0:	321a      	adds	r2, #26
   2a0a2:	9901      	ldr	r1, [sp, #4]
   2a0a4:	9800      	ldr	r0, [sp, #0]
   2a0a6:	9e08      	ldr	r6, [sp, #32]
   2a0a8:	47b0      	blx	r6
   2a0aa:	1c43      	adds	r3, r0, #1
   2a0ac:	d0e6      	beq.n	2a07c <_printf_common+0xa4>
   2a0ae:	3701      	adds	r7, #1
   2a0b0:	e7d1      	b.n	2a056 <_printf_common+0x7e>
	...

0002a0b4 <_printf_i>:
   2a0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a0b6:	b08b      	sub	sp, #44	; 0x2c
   2a0b8:	9206      	str	r2, [sp, #24]
   2a0ba:	000a      	movs	r2, r1
   2a0bc:	3243      	adds	r2, #67	; 0x43
   2a0be:	9307      	str	r3, [sp, #28]
   2a0c0:	9005      	str	r0, [sp, #20]
   2a0c2:	9204      	str	r2, [sp, #16]
   2a0c4:	7e0a      	ldrb	r2, [r1, #24]
   2a0c6:	000c      	movs	r4, r1
   2a0c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2a0ca:	2a6e      	cmp	r2, #110	; 0x6e
   2a0cc:	d100      	bne.n	2a0d0 <_printf_i+0x1c>
   2a0ce:	e08f      	b.n	2a1f0 <_printf_i+0x13c>
   2a0d0:	d817      	bhi.n	2a102 <_printf_i+0x4e>
   2a0d2:	2a63      	cmp	r2, #99	; 0x63
   2a0d4:	d02c      	beq.n	2a130 <_printf_i+0x7c>
   2a0d6:	d808      	bhi.n	2a0ea <_printf_i+0x36>
   2a0d8:	2a00      	cmp	r2, #0
   2a0da:	d100      	bne.n	2a0de <_printf_i+0x2a>
   2a0dc:	e099      	b.n	2a212 <_printf_i+0x15e>
   2a0de:	2a58      	cmp	r2, #88	; 0x58
   2a0e0:	d054      	beq.n	2a18c <_printf_i+0xd8>
   2a0e2:	0026      	movs	r6, r4
   2a0e4:	3642      	adds	r6, #66	; 0x42
   2a0e6:	7032      	strb	r2, [r6, #0]
   2a0e8:	e029      	b.n	2a13e <_printf_i+0x8a>
   2a0ea:	2a64      	cmp	r2, #100	; 0x64
   2a0ec:	d001      	beq.n	2a0f2 <_printf_i+0x3e>
   2a0ee:	2a69      	cmp	r2, #105	; 0x69
   2a0f0:	d1f7      	bne.n	2a0e2 <_printf_i+0x2e>
   2a0f2:	6821      	ldr	r1, [r4, #0]
   2a0f4:	681a      	ldr	r2, [r3, #0]
   2a0f6:	0608      	lsls	r0, r1, #24
   2a0f8:	d523      	bpl.n	2a142 <_printf_i+0x8e>
   2a0fa:	1d11      	adds	r1, r2, #4
   2a0fc:	6019      	str	r1, [r3, #0]
   2a0fe:	6815      	ldr	r5, [r2, #0]
   2a100:	e025      	b.n	2a14e <_printf_i+0x9a>
   2a102:	2a73      	cmp	r2, #115	; 0x73
   2a104:	d100      	bne.n	2a108 <_printf_i+0x54>
   2a106:	e088      	b.n	2a21a <_printf_i+0x166>
   2a108:	d808      	bhi.n	2a11c <_printf_i+0x68>
   2a10a:	2a6f      	cmp	r2, #111	; 0x6f
   2a10c:	d029      	beq.n	2a162 <_printf_i+0xae>
   2a10e:	2a70      	cmp	r2, #112	; 0x70
   2a110:	d1e7      	bne.n	2a0e2 <_printf_i+0x2e>
   2a112:	2220      	movs	r2, #32
   2a114:	6809      	ldr	r1, [r1, #0]
   2a116:	430a      	orrs	r2, r1
   2a118:	6022      	str	r2, [r4, #0]
   2a11a:	e003      	b.n	2a124 <_printf_i+0x70>
   2a11c:	2a75      	cmp	r2, #117	; 0x75
   2a11e:	d020      	beq.n	2a162 <_printf_i+0xae>
   2a120:	2a78      	cmp	r2, #120	; 0x78
   2a122:	d1de      	bne.n	2a0e2 <_printf_i+0x2e>
   2a124:	0022      	movs	r2, r4
   2a126:	2178      	movs	r1, #120	; 0x78
   2a128:	3245      	adds	r2, #69	; 0x45
   2a12a:	7011      	strb	r1, [r2, #0]
   2a12c:	4a6c      	ldr	r2, [pc, #432]	; (2a2e0 <_printf_i+0x22c>)
   2a12e:	e030      	b.n	2a192 <_printf_i+0xde>
   2a130:	000e      	movs	r6, r1
   2a132:	681a      	ldr	r2, [r3, #0]
   2a134:	3642      	adds	r6, #66	; 0x42
   2a136:	1d11      	adds	r1, r2, #4
   2a138:	6019      	str	r1, [r3, #0]
   2a13a:	6813      	ldr	r3, [r2, #0]
   2a13c:	7033      	strb	r3, [r6, #0]
   2a13e:	2301      	movs	r3, #1
   2a140:	e079      	b.n	2a236 <_printf_i+0x182>
   2a142:	0649      	lsls	r1, r1, #25
   2a144:	d5d9      	bpl.n	2a0fa <_printf_i+0x46>
   2a146:	1d11      	adds	r1, r2, #4
   2a148:	6019      	str	r1, [r3, #0]
   2a14a:	2300      	movs	r3, #0
   2a14c:	5ed5      	ldrsh	r5, [r2, r3]
   2a14e:	2d00      	cmp	r5, #0
   2a150:	da03      	bge.n	2a15a <_printf_i+0xa6>
   2a152:	232d      	movs	r3, #45	; 0x2d
   2a154:	9a04      	ldr	r2, [sp, #16]
   2a156:	426d      	negs	r5, r5
   2a158:	7013      	strb	r3, [r2, #0]
   2a15a:	4b62      	ldr	r3, [pc, #392]	; (2a2e4 <_printf_i+0x230>)
   2a15c:	270a      	movs	r7, #10
   2a15e:	9303      	str	r3, [sp, #12]
   2a160:	e02f      	b.n	2a1c2 <_printf_i+0x10e>
   2a162:	6820      	ldr	r0, [r4, #0]
   2a164:	6819      	ldr	r1, [r3, #0]
   2a166:	0605      	lsls	r5, r0, #24
   2a168:	d503      	bpl.n	2a172 <_printf_i+0xbe>
   2a16a:	1d08      	adds	r0, r1, #4
   2a16c:	6018      	str	r0, [r3, #0]
   2a16e:	680d      	ldr	r5, [r1, #0]
   2a170:	e005      	b.n	2a17e <_printf_i+0xca>
   2a172:	0640      	lsls	r0, r0, #25
   2a174:	d5f9      	bpl.n	2a16a <_printf_i+0xb6>
   2a176:	680d      	ldr	r5, [r1, #0]
   2a178:	1d08      	adds	r0, r1, #4
   2a17a:	6018      	str	r0, [r3, #0]
   2a17c:	b2ad      	uxth	r5, r5
   2a17e:	4b59      	ldr	r3, [pc, #356]	; (2a2e4 <_printf_i+0x230>)
   2a180:	2708      	movs	r7, #8
   2a182:	9303      	str	r3, [sp, #12]
   2a184:	2a6f      	cmp	r2, #111	; 0x6f
   2a186:	d018      	beq.n	2a1ba <_printf_i+0x106>
   2a188:	270a      	movs	r7, #10
   2a18a:	e016      	b.n	2a1ba <_printf_i+0x106>
   2a18c:	3145      	adds	r1, #69	; 0x45
   2a18e:	700a      	strb	r2, [r1, #0]
   2a190:	4a54      	ldr	r2, [pc, #336]	; (2a2e4 <_printf_i+0x230>)
   2a192:	9203      	str	r2, [sp, #12]
   2a194:	681a      	ldr	r2, [r3, #0]
   2a196:	6821      	ldr	r1, [r4, #0]
   2a198:	1d10      	adds	r0, r2, #4
   2a19a:	6018      	str	r0, [r3, #0]
   2a19c:	6815      	ldr	r5, [r2, #0]
   2a19e:	0608      	lsls	r0, r1, #24
   2a1a0:	d522      	bpl.n	2a1e8 <_printf_i+0x134>
   2a1a2:	07cb      	lsls	r3, r1, #31
   2a1a4:	d502      	bpl.n	2a1ac <_printf_i+0xf8>
   2a1a6:	2320      	movs	r3, #32
   2a1a8:	4319      	orrs	r1, r3
   2a1aa:	6021      	str	r1, [r4, #0]
   2a1ac:	2710      	movs	r7, #16
   2a1ae:	2d00      	cmp	r5, #0
   2a1b0:	d103      	bne.n	2a1ba <_printf_i+0x106>
   2a1b2:	2320      	movs	r3, #32
   2a1b4:	6822      	ldr	r2, [r4, #0]
   2a1b6:	439a      	bics	r2, r3
   2a1b8:	6022      	str	r2, [r4, #0]
   2a1ba:	0023      	movs	r3, r4
   2a1bc:	2200      	movs	r2, #0
   2a1be:	3343      	adds	r3, #67	; 0x43
   2a1c0:	701a      	strb	r2, [r3, #0]
   2a1c2:	6863      	ldr	r3, [r4, #4]
   2a1c4:	60a3      	str	r3, [r4, #8]
   2a1c6:	2b00      	cmp	r3, #0
   2a1c8:	db5c      	blt.n	2a284 <_printf_i+0x1d0>
   2a1ca:	2204      	movs	r2, #4
   2a1cc:	6821      	ldr	r1, [r4, #0]
   2a1ce:	4391      	bics	r1, r2
   2a1d0:	6021      	str	r1, [r4, #0]
   2a1d2:	2d00      	cmp	r5, #0
   2a1d4:	d158      	bne.n	2a288 <_printf_i+0x1d4>
   2a1d6:	9e04      	ldr	r6, [sp, #16]
   2a1d8:	2b00      	cmp	r3, #0
   2a1da:	d064      	beq.n	2a2a6 <_printf_i+0x1f2>
   2a1dc:	0026      	movs	r6, r4
   2a1de:	9b03      	ldr	r3, [sp, #12]
   2a1e0:	3642      	adds	r6, #66	; 0x42
   2a1e2:	781b      	ldrb	r3, [r3, #0]
   2a1e4:	7033      	strb	r3, [r6, #0]
   2a1e6:	e05e      	b.n	2a2a6 <_printf_i+0x1f2>
   2a1e8:	0648      	lsls	r0, r1, #25
   2a1ea:	d5da      	bpl.n	2a1a2 <_printf_i+0xee>
   2a1ec:	b2ad      	uxth	r5, r5
   2a1ee:	e7d8      	b.n	2a1a2 <_printf_i+0xee>
   2a1f0:	6809      	ldr	r1, [r1, #0]
   2a1f2:	681a      	ldr	r2, [r3, #0]
   2a1f4:	0608      	lsls	r0, r1, #24
   2a1f6:	d505      	bpl.n	2a204 <_printf_i+0x150>
   2a1f8:	1d11      	adds	r1, r2, #4
   2a1fa:	6019      	str	r1, [r3, #0]
   2a1fc:	6813      	ldr	r3, [r2, #0]
   2a1fe:	6962      	ldr	r2, [r4, #20]
   2a200:	601a      	str	r2, [r3, #0]
   2a202:	e006      	b.n	2a212 <_printf_i+0x15e>
   2a204:	0649      	lsls	r1, r1, #25
   2a206:	d5f7      	bpl.n	2a1f8 <_printf_i+0x144>
   2a208:	1d11      	adds	r1, r2, #4
   2a20a:	6019      	str	r1, [r3, #0]
   2a20c:	6813      	ldr	r3, [r2, #0]
   2a20e:	8aa2      	ldrh	r2, [r4, #20]
   2a210:	801a      	strh	r2, [r3, #0]
   2a212:	2300      	movs	r3, #0
   2a214:	9e04      	ldr	r6, [sp, #16]
   2a216:	6123      	str	r3, [r4, #16]
   2a218:	e054      	b.n	2a2c4 <_printf_i+0x210>
   2a21a:	681a      	ldr	r2, [r3, #0]
   2a21c:	1d11      	adds	r1, r2, #4
   2a21e:	6019      	str	r1, [r3, #0]
   2a220:	6816      	ldr	r6, [r2, #0]
   2a222:	2100      	movs	r1, #0
   2a224:	6862      	ldr	r2, [r4, #4]
   2a226:	0030      	movs	r0, r6
   2a228:	f000 f85e 	bl	2a2e8 <memchr>
   2a22c:	2800      	cmp	r0, #0
   2a22e:	d001      	beq.n	2a234 <_printf_i+0x180>
   2a230:	1b80      	subs	r0, r0, r6
   2a232:	6060      	str	r0, [r4, #4]
   2a234:	6863      	ldr	r3, [r4, #4]
   2a236:	6123      	str	r3, [r4, #16]
   2a238:	2300      	movs	r3, #0
   2a23a:	9a04      	ldr	r2, [sp, #16]
   2a23c:	7013      	strb	r3, [r2, #0]
   2a23e:	e041      	b.n	2a2c4 <_printf_i+0x210>
   2a240:	6923      	ldr	r3, [r4, #16]
   2a242:	0032      	movs	r2, r6
   2a244:	9906      	ldr	r1, [sp, #24]
   2a246:	9805      	ldr	r0, [sp, #20]
   2a248:	9d07      	ldr	r5, [sp, #28]
   2a24a:	47a8      	blx	r5
   2a24c:	1c43      	adds	r3, r0, #1
   2a24e:	d043      	beq.n	2a2d8 <_printf_i+0x224>
   2a250:	6823      	ldr	r3, [r4, #0]
   2a252:	2500      	movs	r5, #0
   2a254:	079b      	lsls	r3, r3, #30
   2a256:	d40f      	bmi.n	2a278 <_printf_i+0x1c4>
   2a258:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a25a:	68e0      	ldr	r0, [r4, #12]
   2a25c:	4298      	cmp	r0, r3
   2a25e:	da3d      	bge.n	2a2dc <_printf_i+0x228>
   2a260:	0018      	movs	r0, r3
   2a262:	e03b      	b.n	2a2dc <_printf_i+0x228>
   2a264:	0022      	movs	r2, r4
   2a266:	2301      	movs	r3, #1
   2a268:	3219      	adds	r2, #25
   2a26a:	9906      	ldr	r1, [sp, #24]
   2a26c:	9805      	ldr	r0, [sp, #20]
   2a26e:	9e07      	ldr	r6, [sp, #28]
   2a270:	47b0      	blx	r6
   2a272:	1c43      	adds	r3, r0, #1
   2a274:	d030      	beq.n	2a2d8 <_printf_i+0x224>
   2a276:	3501      	adds	r5, #1
   2a278:	68e3      	ldr	r3, [r4, #12]
   2a27a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a27c:	1a9b      	subs	r3, r3, r2
   2a27e:	429d      	cmp	r5, r3
   2a280:	dbf0      	blt.n	2a264 <_printf_i+0x1b0>
   2a282:	e7e9      	b.n	2a258 <_printf_i+0x1a4>
   2a284:	2d00      	cmp	r5, #0
   2a286:	d0a9      	beq.n	2a1dc <_printf_i+0x128>
   2a288:	9e04      	ldr	r6, [sp, #16]
   2a28a:	0028      	movs	r0, r5
   2a28c:	0039      	movs	r1, r7
   2a28e:	f7fc feaf 	bl	26ff0 <__aeabi_uidivmod>
   2a292:	9b03      	ldr	r3, [sp, #12]
   2a294:	3e01      	subs	r6, #1
   2a296:	5c5b      	ldrb	r3, [r3, r1]
   2a298:	0028      	movs	r0, r5
   2a29a:	7033      	strb	r3, [r6, #0]
   2a29c:	0039      	movs	r1, r7
   2a29e:	f7fc fe21 	bl	26ee4 <__udivsi3>
   2a2a2:	1e05      	subs	r5, r0, #0
   2a2a4:	d1f1      	bne.n	2a28a <_printf_i+0x1d6>
   2a2a6:	2f08      	cmp	r7, #8
   2a2a8:	d109      	bne.n	2a2be <_printf_i+0x20a>
   2a2aa:	6823      	ldr	r3, [r4, #0]
   2a2ac:	07db      	lsls	r3, r3, #31
   2a2ae:	d506      	bpl.n	2a2be <_printf_i+0x20a>
   2a2b0:	6863      	ldr	r3, [r4, #4]
   2a2b2:	6922      	ldr	r2, [r4, #16]
   2a2b4:	4293      	cmp	r3, r2
   2a2b6:	dc02      	bgt.n	2a2be <_printf_i+0x20a>
   2a2b8:	2330      	movs	r3, #48	; 0x30
   2a2ba:	3e01      	subs	r6, #1
   2a2bc:	7033      	strb	r3, [r6, #0]
   2a2be:	9b04      	ldr	r3, [sp, #16]
   2a2c0:	1b9b      	subs	r3, r3, r6
   2a2c2:	6123      	str	r3, [r4, #16]
   2a2c4:	9b07      	ldr	r3, [sp, #28]
   2a2c6:	aa09      	add	r2, sp, #36	; 0x24
   2a2c8:	9300      	str	r3, [sp, #0]
   2a2ca:	0021      	movs	r1, r4
   2a2cc:	9b06      	ldr	r3, [sp, #24]
   2a2ce:	9805      	ldr	r0, [sp, #20]
   2a2d0:	f7ff fe82 	bl	29fd8 <_printf_common>
   2a2d4:	1c43      	adds	r3, r0, #1
   2a2d6:	d1b3      	bne.n	2a240 <_printf_i+0x18c>
   2a2d8:	2001      	movs	r0, #1
   2a2da:	4240      	negs	r0, r0
   2a2dc:	b00b      	add	sp, #44	; 0x2c
   2a2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a2e0:	0002ba62 	.word	0x0002ba62
   2a2e4:	0002ba51 	.word	0x0002ba51

0002a2e8 <memchr>:
   2a2e8:	b2c9      	uxtb	r1, r1
   2a2ea:	1882      	adds	r2, r0, r2
   2a2ec:	4290      	cmp	r0, r2
   2a2ee:	d101      	bne.n	2a2f4 <memchr+0xc>
   2a2f0:	2000      	movs	r0, #0
   2a2f2:	4770      	bx	lr
   2a2f4:	7803      	ldrb	r3, [r0, #0]
   2a2f6:	428b      	cmp	r3, r1
   2a2f8:	d0fb      	beq.n	2a2f2 <memchr+0xa>
   2a2fa:	3001      	adds	r0, #1
   2a2fc:	e7f6      	b.n	2a2ec <memchr+0x4>

0002a2fe <_realloc_r>:
   2a2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a300:	0007      	movs	r7, r0
   2a302:	000d      	movs	r5, r1
   2a304:	0016      	movs	r6, r2
   2a306:	2900      	cmp	r1, #0
   2a308:	d105      	bne.n	2a316 <_realloc_r+0x18>
   2a30a:	0011      	movs	r1, r2
   2a30c:	f7ff fa86 	bl	2981c <_malloc_r>
   2a310:	0004      	movs	r4, r0
   2a312:	0020      	movs	r0, r4
   2a314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a316:	2a00      	cmp	r2, #0
   2a318:	d103      	bne.n	2a322 <_realloc_r+0x24>
   2a31a:	f7ff fa35 	bl	29788 <_free_r>
   2a31e:	0034      	movs	r4, r6
   2a320:	e7f7      	b.n	2a312 <_realloc_r+0x14>
   2a322:	f000 f812 	bl	2a34a <_malloc_usable_size_r>
   2a326:	002c      	movs	r4, r5
   2a328:	4286      	cmp	r6, r0
   2a32a:	d9f2      	bls.n	2a312 <_realloc_r+0x14>
   2a32c:	0031      	movs	r1, r6
   2a32e:	0038      	movs	r0, r7
   2a330:	f7ff fa74 	bl	2981c <_malloc_r>
   2a334:	1e04      	subs	r4, r0, #0
   2a336:	d0ec      	beq.n	2a312 <_realloc_r+0x14>
   2a338:	0029      	movs	r1, r5
   2a33a:	0032      	movs	r2, r6
   2a33c:	f7ff f9f2 	bl	29724 <memcpy>
   2a340:	0029      	movs	r1, r5
   2a342:	0038      	movs	r0, r7
   2a344:	f7ff fa20 	bl	29788 <_free_r>
   2a348:	e7e3      	b.n	2a312 <_realloc_r+0x14>

0002a34a <_malloc_usable_size_r>:
   2a34a:	1f0b      	subs	r3, r1, #4
   2a34c:	681b      	ldr	r3, [r3, #0]
   2a34e:	1f18      	subs	r0, r3, #4
   2a350:	2b00      	cmp	r3, #0
   2a352:	da01      	bge.n	2a358 <_malloc_usable_size_r+0xe>
   2a354:	580b      	ldr	r3, [r1, r0]
   2a356:	18c0      	adds	r0, r0, r3
   2a358:	4770      	bx	lr
   2a35a:	0000      	movs	r0, r0
   2a35c:	30303030 	.word	0x30303030
   2a360:	30303030 	.word	0x30303030
   2a364:	00003030 	.word	0x00003030
   2a368:	2e707466 	.word	0x2e707466
   2a36c:	76697264 	.word	0x76697264
   2a370:	2e716865 	.word	0x2e716865
   2a374:	006d6f63 	.word	0x006d6f63
   2a378:	7269662f 	.word	0x7269662f
   2a37c:	7261776d 	.word	0x7261776d
   2a380:	00002f65 	.word	0x00002f65
   2a384:	75686172 	.word	0x75686172
   2a388:	61726e6c 	.word	0x61726e6c
   2a38c:	646f6874 	.word	0x646f6874
   2a390:	006c636b 	.word	0x006c636b
   2a394:	34333231 	.word	0x34333231
   2a398:	38373635 	.word	0x38373635
   2a39c:	00000039 	.word	0x00000039
   2a3a0:	6d726966 	.word	0x6d726966
   2a3a4:	65726177 	.word	0x65726177
   2a3a8:	6e69622e 	.word	0x6e69622e
   2a3ac:	00000000 	.word	0x00000000
   2a3b0:	31343037 	.word	0x31343037
   2a3b4:	39363931 	.word	0x39363931
   2a3b8:	00003935 	.word	0x00003935
   2a3bc:	38393637 	.word	0x38393637
   2a3c0:	32393334 	.word	0x32393334
   2a3c4:	00003130 	.word	0x00003130
   2a3c8:	33383337 	.word	0x33383337
   2a3cc:	32343136 	.word	0x32343136
   2a3d0:	00003431 	.word	0x00003431
   2a3d4:	33383337 	.word	0x33383337
   2a3d8:	36323236 	.word	0x36323236
   2a3dc:	00003837 	.word	0x00003837
   2a3e0:	36383539 	.word	0x36383539
   2a3e4:	39353331 	.word	0x39353331
   2a3e8:	00003837 	.word	0x00003837
   2a3ec:	00003a50 	.word	0x00003a50
   2a3f0:	00003a53 	.word	0x00003a53
   2a3f4:	0000000a 	.word	0x0000000a
   2a3f8:	00006425 	.word	0x00006425
   2a3fc:	204d5347 	.word	0x204d5347
   2a400:	656d6954 	.word	0x656d6954
   2a404:	0074756f 	.word	0x0074756f
   2a408:	4f525245 	.word	0x4f525245
   2a40c:	00000052 	.word	0x00000052
   2a410:	00004b4f 	.word	0x00004b4f
   2a414:	000d5441 	.word	0x000d5441
   2a418:	492b5441 	.word	0x492b5441
   2a41c:	303d4346 	.word	0x303d4346
   2a420:	000d302c 	.word	0x000d302c
   2a424:	4552432b 	.word	0x4552432b
   2a428:	30203a47 	.word	0x30203a47
   2a42c:	0000312c 	.word	0x0000312c
   2a430:	432b5441 	.word	0x432b5441
   2a434:	3f474552 	.word	0x3f474552
   2a438:	0000000d 	.word	0x0000000d
   2a43c:	4552432b 	.word	0x4552432b
   2a440:	30203a47 	.word	0x30203a47
   2a444:	0000352c 	.word	0x0000352c
   2a448:	492b5441 	.word	0x492b5441
   2a44c:	253d5250 	.word	0x253d5250
   2a450:	00000d64 	.word	0x00000d64
   2a454:	492b5441 	.word	0x492b5441
   2a458:	303d5250 	.word	0x303d5250
   2a45c:	0000000d 	.word	0x0000000d
   2a460:	432b5441 	.word	0x432b5441
   2a464:	3d474552 	.word	0x3d474552
   2a468:	00000d31 	.word	0x00000d31
   2a46c:	432b5441 	.word	0x432b5441
   2a470:	3d4e5546 	.word	0x3d4e5546
   2a474:	00000d31 	.word	0x00000d31
   2a478:	5546432b 	.word	0x5546432b
   2a47c:	31203a4e 	.word	0x31203a4e
   2a480:	00000000 	.word	0x00000000
   2a484:	432b5441 	.word	0x432b5441
   2a488:	3f4e5546 	.word	0x3f4e5546
   2a48c:	0000000d 	.word	0x0000000d
   2a490:	432b5441 	.word	0x432b5441
   2a494:	3d4e5546 	.word	0x3d4e5546
   2a498:	00000d30 	.word	0x00000d30
   2a49c:	5546432b 	.word	0x5546432b
   2a4a0:	30203a4e 	.word	0x30203a4e
   2a4a4:	00000000 	.word	0x00000000
   2a4a8:	432b5441 	.word	0x432b5441
   2a4ac:	3d4e5546 	.word	0x3d4e5546
   2a4b0:	0d312c31 	.word	0x0d312c31
   2a4b4:	00000000 	.word	0x00000000
   2a4b8:	4950432b 	.word	0x4950432b
   2a4bc:	52203a4e 	.word	0x52203a4e
   2a4c0:	59444145 	.word	0x59444145
   2a4c4:	00000000 	.word	0x00000000
   2a4c8:	432b5441 	.word	0x432b5441
   2a4cc:	3f4e4950 	.word	0x3f4e4950
   2a4d0:	0000000d 	.word	0x0000000d
   2a4d4:	432b5441 	.word	0x432b5441
   2a4d8:	4144474d 	.word	0x4144474d
   2a4dc:	4544223d 	.word	0x4544223d
   2a4e0:	4c41204c 	.word	0x4c41204c
   2a4e4:	000d224c 	.word	0x000d224c
   2a4e8:	57265441 	.word	0x57265441
   2a4ec:	0000000d 	.word	0x0000000d
   2a4f0:	432b5441 	.word	0x432b5441
   2a4f4:	3d50494c 	.word	0x3d50494c
   2a4f8:	00000d31 	.word	0x00000d31
   2a4fc:	432b5441 	.word	0x432b5441
   2a500:	3d504c4f 	.word	0x3d504c4f
   2a504:	00000d31 	.word	0x00000d31
   2a508:	432b5441 	.word	0x432b5441
   2a50c:	4b4c4353 	.word	0x4b4c4353
   2a510:	000d313d 	.word	0x000d313d
   2a514:	432b5441 	.word	0x432b5441
   2a518:	3f504c4f 	.word	0x3f504c4f
   2a51c:	0000000d 	.word	0x0000000d
   2a520:	4c4f432b 	.word	0x4c4f432b
   2a524:	00000050 	.word	0x00000050
   2a528:	0000003a 	.word	0x0000003a
   2a52c:	0000002c 	.word	0x0000002c
   2a530:	432b5441 	.word	0x432b5441
   2a534:	3d43434c 	.word	0x3d43434c
   2a538:	00000d31 	.word	0x00000d31
   2a53c:	46265441 	.word	0x46265441
   2a540:	0000000d 	.word	0x0000000d
   2a544:	30455441 	.word	0x30455441
   2a548:	0000000d 	.word	0x0000000d
   2a54c:	432b5441 	.word	0x432b5441
   2a550:	3d46474d 	.word	0x3d46474d
   2a554:	00000d31 	.word	0x00000d31
   2a558:	432b5441 	.word	0x432b5441
   2a55c:	3d504d53 	.word	0x3d504d53
   2a560:	312c3731 	.word	0x312c3731
   2a564:	302c3736 	.word	0x302c3736
   2a568:	000d302c 	.word	0x000d302c
   2a56c:	432b5441 	.word	0x432b5441
   2a570:	3d534153 	.word	0x3d534153
   2a574:	00000d30 	.word	0x00000d30
   2a578:	432b5441 	.word	0x432b5441
   2a57c:	3d534153 	.word	0x3d534153
   2a580:	00000d31 	.word	0x00000d31
   2a584:	432b5441 	.word	0x432b5441
   2a588:	000d5153 	.word	0x000d5153
   2a58c:	5153432b 	.word	0x5153432b
   2a590:	0000003a 	.word	0x0000003a
   2a594:	00003939 	.word	0x00003939
   2a598:	432b5441 	.word	0x432b5441
   2a59c:	3d494d4e 	.word	0x3d494d4e
   2a5a0:	2c312c32 	.word	0x2c312c32
   2a5a4:	2c302c30 	.word	0x2c302c30
   2a5a8:	00000d30 	.word	0x00000d30
   2a5ac:	432b5441 	.word	0x432b5441
   2a5b0:	3d494d4e 	.word	0x3d494d4e
   2a5b4:	2c302c31 	.word	0x2c302c31
   2a5b8:	2c302c30 	.word	0x2c302c30
   2a5bc:	00000d30 	.word	0x00000d30
   2a5c0:	452b5441 	.word	0x452b5441
   2a5c4:	534e5558 	.word	0x534e5558
   2a5c8:	223d4c4f 	.word	0x223d4c4f
   2a5cc:	2c225153 	.word	0x2c225153
   2a5d0:	00000d31 	.word	0x00000d31
   2a5d4:	452b5441 	.word	0x452b5441
   2a5d8:	534e5558 	.word	0x534e5558
   2a5dc:	223d4c4f 	.word	0x223d4c4f
   2a5e0:	2c225153 	.word	0x2c225153
   2a5e4:	00000d30 	.word	0x00000d30
   2a5e8:	432b5441 	.word	0x432b5441
   2a5ec:	3d53474d 	.word	0x3d53474d
   2a5f0:	22732522 	.word	0x22732522
   2a5f4:	0000000d 	.word	0x0000000d
   2a5f8:	0000003e 	.word	0x0000003e
   2a5fc:	0d1a7325 	.word	0x0d1a7325
   2a600:	00000000 	.word	0x00000000
   2a604:	432b5441 	.word	0x432b5441
   2a608:	3d4c474d 	.word	0x3d4c474d
   2a60c:	43455222 	.word	0x43455222
   2a610:	524e5520 	.word	0x524e5520
   2a614:	22444145 	.word	0x22444145
   2a618:	0000000d 	.word	0x0000000d
   2a61c:	432b5441 	.word	0x432b5441
   2a620:	3d4c474d 	.word	0x3d4c474d
   2a624:	43455222 	.word	0x43455222
   2a628:	41455220 	.word	0x41455220
   2a62c:	000d2244 	.word	0x000d2244
   2a630:	432b5441 	.word	0x432b5441
   2a634:	3d4c474d 	.word	0x3d4c474d
   2a638:	4c4c4122 	.word	0x4c4c4122
   2a63c:	00000d22 	.word	0x00000d22
   2a640:	4c474d43 	.word	0x4c474d43
   2a644:	00000000 	.word	0x00000000
   2a648:	432b5441 	.word	0x432b5441
   2a64c:	3d52474d 	.word	0x3d52474d
   2a650:	000d6425 	.word	0x000d6425
   2a654:	474d432b 	.word	0x474d432b
   2a658:	00000052 	.word	0x00000052
   2a65c:	25445441 	.word	0x25445441
   2a660:	000d3b73 	.word	0x000d3b73
   2a664:	0d415441 	.word	0x0d415441
   2a668:	00000000 	.word	0x00000000
   2a66c:	432b5441 	.word	0x432b5441
   2a670:	3d53544c 	.word	0x3d53544c
   2a674:	00000d31 	.word	0x00000d31
   2a678:	432b5441 	.word	0x432b5441
   2a67c:	3d53544c 	.word	0x3d53544c
   2a680:	00000d30 	.word	0x00000d30
   2a684:	442b5441 	.word	0x442b5441
   2a688:	3d544544 	.word	0x3d544544
   2a68c:	00000d31 	.word	0x00000d31
   2a690:	562b5441 	.word	0x562b5441
   2a694:	223d5354 	.word	0x223d5354
   2a698:	0d227325 	.word	0x0d227325
   2a69c:	00000000 	.word	0x00000000
   2a6a0:	432b5441 	.word	0x432b5441
   2a6a4:	0d505548 	.word	0x0d505548
   2a6a8:	00000000 	.word	0x00000000
   2a6ac:	432b5441 	.word	0x432b5441
   2a6b0:	3d415743 	.word	0x3d415743
   2a6b4:	0d302c30 	.word	0x0d302c30
   2a6b8:	00000000 	.word	0x00000000
   2a6bc:	472b5441 	.word	0x472b5441
   2a6c0:	55424d53 	.word	0x55424d53
   2a6c4:	313d5953 	.word	0x313d5953
   2a6c8:	0000000d 	.word	0x0000000d
   2a6cc:	472b5441 	.word	0x472b5441
   2a6d0:	55424d53 	.word	0x55424d53
   2a6d4:	303d5953 	.word	0x303d5953
   2a6d8:	0000000d 	.word	0x0000000d
   2a6dc:	432b5441 	.word	0x432b5441
   2a6e0:	3d434552 	.word	0x3d434552
   2a6e4:	00000d35 	.word	0x00000d35
   2a6e8:	432b5441 	.word	0x432b5441
   2a6ec:	3d434552 	.word	0x3d434552
   2a6f0:	43222c34 	.word	0x43222c34
   2a6f4:	73555c3a 	.word	0x73555c3a
   2a6f8:	255c7265 	.word	0x255c7265
   2a6fc:	6d612e63 	.word	0x6d612e63
   2a700:	302c2272 	.word	0x302c2272
   2a704:	2c30392c 	.word	0x2c30392c
   2a708:	000d7525 	.word	0x000d7525
   2a70c:	432b5441 	.word	0x432b5441
   2a710:	3f4b4c43 	.word	0x3f4b4c43
   2a714:	0000000d 	.word	0x0000000d
   2a718:	00000022 	.word	0x00000022
   2a71c:	0000002f 	.word	0x0000002f
   2a720:	0000002b 	.word	0x0000002b
   2a724:	544d432b 	.word	0x544d432b
   2a728:	00003a49 	.word	0x00003a49
   2a72c:	474e4952 	.word	0x474e4952
   2a730:	00000000 	.word	0x00000000
   2a734:	5153432b 	.word	0x5153432b
   2a738:	0000004e 	.word	0x0000004e
   2a73c:	494c432b 	.word	0x494c432b
   2a740:	00000050 	.word	0x00000050
   2a744:	43204f4e 	.word	0x43204f4e
   2a748:	49525241 	.word	0x49525241
   2a74c:	00005245 	.word	0x00005245
   2a750:	59535542 	.word	0x59535542
   2a754:	00000000 	.word	0x00000000
   2a758:	41204f4e 	.word	0x41204f4e
   2a75c:	4557534e 	.word	0x4557534e
   2a760:	00000052 	.word	0x00000052
   2a764:	4d54442b 	.word	0x4d54442b
   2a768:	00003a46 	.word	0x00003a46
   2a76c:	4552432b 	.word	0x4552432b
   2a770:	30203a43 	.word	0x30203a43
   2a774:	00000000 	.word	0x00000000
   2a778:	532b5441 	.word	0x532b5441
   2a77c:	52425041 	.word	0x52425041
   2a780:	312c333d 	.word	0x312c333d
   2a784:	4f43222c 	.word	0x4f43222c
   2a788:	5059544e 	.word	0x5059544e
   2a78c:	222c2245 	.word	0x222c2245
   2a790:	53525047 	.word	0x53525047
   2a794:	00000d22 	.word	0x00000d22
   2a798:	432b5441 	.word	0x432b5441
   2a79c:	3f53504f 	.word	0x3f53504f
   2a7a0:	0000000d 	.word	0x0000000d
   2a7a4:	504f432b 	.word	0x504f432b
   2a7a8:	00003a53 	.word	0x00003a53
   2a7ac:	41454449 	.word	0x41454449
   2a7b0:	00000000 	.word	0x00000000
   2a7b4:	532b5441 	.word	0x532b5441
   2a7b8:	52425041 	.word	0x52425041
   2a7bc:	312c333d 	.word	0x312c333d
   2a7c0:	5041222c 	.word	0x5041222c
   2a7c4:	222c224e 	.word	0x222c224e
   2a7c8:	65746e69 	.word	0x65746e69
   2a7cc:	74656e72 	.word	0x74656e72
   2a7d0:	00000d22 	.word	0x00000d22
   2a7d4:	41444f56 	.word	0x41444f56
   2a7d8:	00000000 	.word	0x00000000
   2a7dc:	532b5441 	.word	0x532b5441
   2a7e0:	52425041 	.word	0x52425041
   2a7e4:	312c333d 	.word	0x312c333d
   2a7e8:	5041222c 	.word	0x5041222c
   2a7ec:	222c224e 	.word	0x222c224e
   2a7f0:	22777777 	.word	0x22777777
   2a7f4:	0000000d 	.word	0x0000000d
   2a7f8:	4c4e5342 	.word	0x4c4e5342
   2a7fc:	00000000 	.word	0x00000000
   2a800:	532b5441 	.word	0x532b5441
   2a804:	52425041 	.word	0x52425041
   2a808:	312c333d 	.word	0x312c333d
   2a80c:	5041222c 	.word	0x5041222c
   2a810:	222c224e 	.word	0x222c224e
   2a814:	6c6e7362 	.word	0x6c6e7362
   2a818:	2274656e 	.word	0x2274656e
   2a81c:	0000000d 	.word	0x0000000d
   2a820:	54524941 	.word	0x54524941
   2a824:	00004c45 	.word	0x00004c45
   2a828:	532b5441 	.word	0x532b5441
   2a82c:	52425041 	.word	0x52425041
   2a830:	312c333d 	.word	0x312c333d
   2a834:	5041222c 	.word	0x5041222c
   2a838:	222c224e 	.word	0x222c224e
   2a83c:	74726961 	.word	0x74726961
   2a840:	70676c65 	.word	0x70676c65
   2a844:	632e7372 	.word	0x632e7372
   2a848:	0d226d6f 	.word	0x0d226d6f
   2a84c:	00000000 	.word	0x00000000
   2a850:	532b5441 	.word	0x532b5441
   2a854:	52425041 	.word	0x52425041
   2a858:	312c333d 	.word	0x312c333d
   2a85c:	5041222c 	.word	0x5041222c
   2a860:	222c224e 	.word	0x222c224e
   2a864:	00000d22 	.word	0x00000d22
   2a868:	532b5441 	.word	0x532b5441
   2a86c:	52425041 	.word	0x52425041
   2a870:	312c323d 	.word	0x312c323d
   2a874:	0000000d 	.word	0x0000000d
   2a878:	5041532b 	.word	0x5041532b
   2a87c:	203a5242 	.word	0x203a5242
   2a880:	00302c31 	.word	0x00302c31
   2a884:	5041532b 	.word	0x5041532b
   2a888:	203a5242 	.word	0x203a5242
   2a88c:	00312c31 	.word	0x00312c31
   2a890:	5041532b 	.word	0x5041532b
   2a894:	203a5242 	.word	0x203a5242
   2a898:	00322c31 	.word	0x00322c31
   2a89c:	5041532b 	.word	0x5041532b
   2a8a0:	203a5242 	.word	0x203a5242
   2a8a4:	00332c31 	.word	0x00332c31
   2a8a8:	532b5441 	.word	0x532b5441
   2a8ac:	52425041 	.word	0x52425041
   2a8b0:	312c313d 	.word	0x312c313d
   2a8b4:	0000000d 	.word	0x0000000d
   2a8b8:	532b5441 	.word	0x532b5441
   2a8bc:	52425041 	.word	0x52425041
   2a8c0:	312c303d 	.word	0x312c303d
   2a8c4:	0000000d 	.word	0x0000000d
   2a8c8:	462b5441 	.word	0x462b5441
   2a8cc:	49435054 	.word	0x49435054
   2a8d0:	0d313d44 	.word	0x0d313d44
   2a8d4:	00000000 	.word	0x00000000
   2a8d8:	462b5441 	.word	0x462b5441
   2a8dc:	45535054 	.word	0x45535054
   2a8e0:	223d5652 	.word	0x223d5652
   2a8e4:	0d227325 	.word	0x0d227325
   2a8e8:	00000000 	.word	0x00000000
   2a8ec:	462b5441 	.word	0x462b5441
   2a8f0:	4e555054 	.word	0x4e555054
   2a8f4:	7325223d 	.word	0x7325223d
   2a8f8:	00000d22 	.word	0x00000d22
   2a8fc:	462b5441 	.word	0x462b5441
   2a900:	57505054 	.word	0x57505054
   2a904:	7325223d 	.word	0x7325223d
   2a908:	00000d22 	.word	0x00000d22
   2a90c:	462b5441 	.word	0x462b5441
   2a910:	45475054 	.word	0x45475054
   2a914:	4d414e54 	.word	0x4d414e54
   2a918:	25223d45 	.word	0x25223d45
   2a91c:	000d2273 	.word	0x000d2273
   2a920:	462b5441 	.word	0x462b5441
   2a924:	45475054 	.word	0x45475054
   2a928:	54415054 	.word	0x54415054
   2a92c:	25223d48 	.word	0x25223d48
   2a930:	000d2273 	.word	0x000d2273
   2a934:	5054462b 	.word	0x5054462b
   2a938:	455a4953 	.word	0x455a4953
   2a93c:	2c31203a 	.word	0x2c31203a
   2a940:	00000000 	.word	0x00000000
   2a944:	462b5441 	.word	0x462b5441
   2a948:	49535054 	.word	0x49535054
   2a94c:	000d455a 	.word	0x000d455a
   2a950:	5054462b 	.word	0x5054462b
   2a954:	3a544547 	.word	0x3a544547
   2a958:	312c3120 	.word	0x312c3120
   2a95c:	00000000 	.word	0x00000000
   2a960:	462b5441 	.word	0x462b5441
   2a964:	45475054 	.word	0x45475054
   2a968:	0d313d54 	.word	0x0d313d54
   2a96c:	00000000 	.word	0x00000000
   2a970:	462b5441 	.word	0x462b5441
   2a974:	45475054 	.word	0x45475054
   2a978:	2c323d54 	.word	0x2c323d54
   2a97c:	000d6425 	.word	0x000d6425
   2a980:	5054462b 	.word	0x5054462b
   2a984:	3a544547 	.word	0x3a544547
   2a988:	00000020 	.word	0x00000020
   2a98c:	434c432b 	.word	0x434c432b
   2a990:	31203a43 	.word	0x31203a43
   2a994:	322c302c 	.word	0x322c302c
   2a998:	00000000 	.word	0x00000000
   2a99c:	434c432b 	.word	0x434c432b
   2a9a0:	31203a43 	.word	0x31203a43
   2a9a4:	332c302c 	.word	0x332c302c
   2a9a8:	00000000 	.word	0x00000000
   2a9ac:	434c432b 	.word	0x434c432b
   2a9b0:	31203a43 	.word	0x31203a43
   2a9b4:	302c302c 	.word	0x302c302c
   2a9b8:	00000000 	.word	0x00000000
   2a9bc:	434c432b 	.word	0x434c432b
   2a9c0:	31203a43 	.word	0x31203a43
   2a9c4:	362c302c 	.word	0x362c302c
	...
   2a9d0:	4e4f4d41 	.word	0x4e4f4d41
   2a9d4:	00000000 	.word	0x00000000
   2a9d8:	55475250 	.word	0x55475250
   2a9dc:	00004450 	.word	0x00004450
   2a9e0:	54494157 	.word	0x54494157
   2a9e4:	00000000 	.word	0x00000000
   2a9e8:	4c4c4143 	.word	0x4c4c4143
   2a9ec:	49415720 	.word	0x49415720
   2a9f0:	20474e49 	.word	0x20474e49
   2a9f4:	41534944 	.word	0x41534944
   2a9f8:	3a454c42 	.word	0x3a454c42
   2a9fc:	43555320 	.word	0x43555320
   2aa00:	53534543 	.word	0x53534543
   2aa04:	00000000 	.word	0x00000000
   2aa08:	4c4c4143 	.word	0x4c4c4143
   2aa0c:	49415720 	.word	0x49415720
   2aa10:	4e495454 	.word	0x4e495454
   2aa14:	49442047 	.word	0x49442047
   2aa18:	4c424153 	.word	0x4c424153
   2aa1c:	203a2045 	.word	0x203a2045
   2aa20:	4c494146 	.word	0x4c494146
   2aa24:	00004445 	.word	0x00004445
   2aa28:	52544553 	.word	0x52544553
   2aa2c:	00005645 	.word	0x00005645
   2aa30:	33422020 	.word	0x33422020
   2aa34:	36312d33 	.word	0x36312d33
   2aa38:	2d32312d 	.word	0x2d32312d
   2aa3c:	39313032 	.word	0x39313032
   2aa40:	00002020 	.word	0x00002020
   2aa44:	20565746 	.word	0x20565746
   2aa48:	6c25203a 	.word	0x6c25203a
   2aa4c:	73252075 	.word	0x73252075
   2aa50:	5455410a 	.word	0x5455410a
   2aa54:	64253a4f 	.word	0x64253a4f
   2aa58:	50505320 	.word	0x50505320
   2aa5c:	2064253a 	.word	0x2064253a
   2aa60:	56505053 	.word	0x56505053
   2aa64:	2064253a 	.word	0x2064253a
   2aa68:	50514553 	.word	0x50514553
   2aa6c:	2064253a 	.word	0x2064253a
   2aa70:	3a444e44 	.word	0x3a444e44
   2aa74:	46206425 	.word	0x46206425
   2aa78:	3a4b4244 	.word	0x3a4b4244
   2aa7c:	55206425 	.word	0x55206425
   2aa80:	253a4d4f 	.word	0x253a4d4f
   2aa84:	564d2064 	.word	0x564d2064
   2aa88:	3a505942 	.word	0x3a505942
   2aa8c:	4d206425 	.word	0x4d206425
   2aa90:	50594256 	.word	0x50594256
   2aa94:	6c253a54 	.word	0x6c253a54
   2aa98:	45522075 	.word	0x45522075
   2aa9c:	253a5053 	.word	0x253a5053
   2aaa0:	564f2064 	.word	0x564f2064
   2aaa4:	64253a52 	.word	0x64253a52
   2aaa8:	444e5520 	.word	0x444e5520
   2aaac:	64253a52 	.word	0x64253a52
   2aab0:	41545320 	.word	0x41545320
   2aab4:	253a4547 	.word	0x253a4547
   2aab8:	54532064 	.word	0x54532064
   2aabc:	3a454d49 	.word	0x3a454d49
   2aac0:	20756c25 	.word	0x20756c25
   2aac4:	4d495441 	.word	0x4d495441
   2aac8:	6c253a45 	.word	0x6c253a45
   2aacc:	00000075 	.word	0x00000075
   2aad0:	41454c43 	.word	0x41454c43
   2aad4:	4c4c4152 	.word	0x4c4c4152
   2aad8:	00000000 	.word	0x00000000
   2aadc:	204c4c41 	.word	0x204c4c41
   2aae0:	52455355 	.word	0x52455355
   2aae4:	4d554e20 	.word	0x4d554e20
   2aae8:	53524542 	.word	0x53524542
   2aaec:	454c4320 	.word	0x454c4320
   2aaf0:	44455241 	.word	0x44455241
   2aaf4:	00000000 	.word	0x00000000
   2aaf8:	41464544 	.word	0x41464544
   2aafc:	00544c55 	.word	0x00544c55
   2ab00:	204c4c41 	.word	0x204c4c41
   2ab04:	54544553 	.word	0x54544553
   2ab08:	53474e49 	.word	0x53474e49
   2ab0c:	45524120 	.word	0x45524120
   2ab10:	574f4e20 	.word	0x574f4e20
   2ab14:	43414620 	.word	0x43414620
   2ab18:	59524f54 	.word	0x59524f54
   2ab1c:	46454420 	.word	0x46454420
   2ab20:	544c5541 	.word	0x544c5541
   2ab24:	00000000 	.word	0x00000000
   2ab28:	004d554e 	.word	0x004d554e
   2ab2c:	4e206f4e 	.word	0x4e206f4e
   2ab30:	65626d75 	.word	0x65626d75
   2ab34:	45207372 	.word	0x45207372
   2ab38:	74736978 	.word	0x74736978
   2ab3c:	00000073 	.word	0x00000073
   2ab40:	45534552 	.word	0x45534552
   2ab44:	00000054 	.word	0x00000054
   2ab48:	00444944 	.word	0x00444944
   2ab4c:	20756c25 	.word	0x20756c25
   2ab50:	00007325 	.word	0x00007325
   2ab54:	4f545541 	.word	0x4f545541
   2ab58:	00004e4f 	.word	0x00004e4f
   2ab5c:	4f544f4d 	.word	0x4f544f4d
   2ab60:	55412052 	.word	0x55412052
   2ab64:	3a204f54 	.word	0x3a204f54
   2ab68:	004e4f20 	.word	0x004e4f20
   2ab6c:	4f545541 	.word	0x4f545541
   2ab70:	0046464f 	.word	0x0046464f
   2ab74:	4f544f4d 	.word	0x4f544f4d
   2ab78:	55412052 	.word	0x55412052
   2ab7c:	3a204f54 	.word	0x3a204f54
   2ab80:	46464f20 	.word	0x46464f20
   2ab84:	00000000 	.word	0x00000000
   2ab88:	50594257 	.word	0x50594257
   2ab8c:	00004e4f 	.word	0x00004e4f
   2ab90:	45544157 	.word	0x45544157
   2ab94:	59422052 	.word	0x59422052
   2ab98:	53534150 	.word	0x53534150
   2ab9c:	004e4f20 	.word	0x004e4f20
   2aba0:	50594257 	.word	0x50594257
   2aba4:	0046464f 	.word	0x0046464f
   2aba8:	45544157 	.word	0x45544157
   2abac:	59422052 	.word	0x59422052
   2abb0:	53534150 	.word	0x53534150
   2abb4:	46464f20 	.word	0x46464f20
   2abb8:	00000000 	.word	0x00000000
   2abbc:	4f505053 	.word	0x4f505053
   2abc0:	0000004e 	.word	0x0000004e
   2abc4:	20505053 	.word	0x20505053
   2abc8:	00004e4f 	.word	0x00004e4f
   2abcc:	4f505053 	.word	0x4f505053
   2abd0:	00004646 	.word	0x00004646
   2abd4:	20505053 	.word	0x20505053
   2abd8:	0046464f 	.word	0x0046464f
   2abdc:	56505053 	.word	0x56505053
   2abe0:	00000000 	.word	0x00000000
   2abe4:	20505053 	.word	0x20505053
   2abe8:	544c4f56 	.word	0x544c4f56
   2abec:	54455320 	.word	0x54455320
   2abf0:	00000000 	.word	0x00000000
   2abf4:	4f514553 	.word	0x4f514553
   2abf8:	0000004e 	.word	0x0000004e
   2abfc:	50514553 	.word	0x50514553
   2ac00:	004e4f20 	.word	0x004e4f20
   2ac04:	4f514553 	.word	0x4f514553
   2ac08:	00004646 	.word	0x00004646
   2ac0c:	50514553 	.word	0x50514553
   2ac10:	46464f20 	.word	0x46464f20
   2ac14:	00000000 	.word	0x00000000
   2ac18:	00444e44 	.word	0x00444e44
   2ac1c:	20444e44 	.word	0x20444e44
   2ac20:	0000203a 	.word	0x0000203a
   2ac24:	004b4f20 	.word	0x004b4f20
   2ac28:	4b424446 	.word	0x4b424446
   2ac2c:	00000000 	.word	0x00000000
   2ac30:	4b424446 	.word	0x4b424446
   2ac34:	25203a20 	.word	0x25203a20
   2ac38:	00000064 	.word	0x00000064
   2ac3c:	454d4f55 	.word	0x454d4f55
   2ac40:	444f4854 	.word	0x444f4854
   2ac44:	00000000 	.word	0x00000000
   2ac48:	454d4f55 	.word	0x454d4f55
   2ac4c:	444f4854 	.word	0x444f4854
   2ac50:	00203a20 	.word	0x00203a20
   2ac54:	5942564d 	.word	0x5942564d
   2ac58:	004e4f50 	.word	0x004e4f50
   2ac5c:	4f544f4d 	.word	0x4f544f4d
   2ac60:	4f562052 	.word	0x4f562052
   2ac64:	4741544c 	.word	0x4741544c
   2ac68:	59422045 	.word	0x59422045
   2ac6c:	53534150 	.word	0x53534150
   2ac70:	004e4f20 	.word	0x004e4f20
   2ac74:	5942564d 	.word	0x5942564d
   2ac78:	46464f50 	.word	0x46464f50
   2ac7c:	00000000 	.word	0x00000000
   2ac80:	4f544f4d 	.word	0x4f544f4d
   2ac84:	4f562052 	.word	0x4f562052
   2ac88:	4741544c 	.word	0x4741544c
   2ac8c:	59422045 	.word	0x59422045
   2ac90:	53534150 	.word	0x53534150
   2ac94:	46464f20 	.word	0x46464f20
   2ac98:	00000000 	.word	0x00000000
   2ac9c:	5942564d 	.word	0x5942564d
   2aca0:	00005450 	.word	0x00005450
   2aca4:	6f746f4d 	.word	0x6f746f4d
   2aca8:	6f562072 	.word	0x6f562072
   2acac:	6761746c 	.word	0x6761746c
   2acb0:	79422065 	.word	0x79422065
   2acb4:	73736170 	.word	0x73736170
   2acb8:	6d695420 	.word	0x6d695420
   2acbc:	65532065 	.word	0x65532065
   2acc0:	6f742074 	.word	0x6f742074
   2acc4:	00642520 	.word	0x00642520
   2acc8:	50534552 	.word	0x50534552
   2accc:	00000000 	.word	0x00000000
   2acd0:	50534552 	.word	0x50534552
   2acd4:	00203a20 	.word	0x00203a20
   2acd8:	0052564f 	.word	0x0052564f
   2acdc:	2052564f 	.word	0x2052564f
   2ace0:	20544553 	.word	0x20544553
   2ace4:	00004b4f 	.word	0x00004b4f
   2ace8:	52444e55 	.word	0x52444e55
   2acec:	00000000 	.word	0x00000000
   2acf0:	52444e55 	.word	0x52444e55
   2acf4:	54455320 	.word	0x54455320
   2acf8:	004b4f20 	.word	0x004b4f20
   2acfc:	41545341 	.word	0x41545341
   2ad00:	00000054 	.word	0x00000054
   2ad04:	75253a43 	.word	0x75253a43
   2ad08:	0a75252e 	.word	0x0a75252e
   2ad0c:	75253a4e 	.word	0x75253a4e
   2ad10:	253a4f0a 	.word	0x253a4f0a
   2ad14:	3a550a75 	.word	0x3a550a75
   2ad18:	4f0a7525 	.word	0x4f0a7525
   2ad1c:	75253a50 	.word	0x75253a50
   2ad20:	3a50550a 	.word	0x3a50550a
   2ad24:	00007525 	.word	0x00007525
   2ad28:	4f46564f 	.word	0x4f46564f
   2ad2c:	0000004e 	.word	0x0000004e
   2ad30:	56455250 	.word	0x56455250
   2ad34:	20544e45 	.word	0x20544e45
   2ad38:	5245564f 	.word	0x5245564f
   2ad3c:	574f4c46 	.word	0x574f4c46
   2ad40:	54455320 	.word	0x54455320
   2ad44:	474e4954 	.word	0x474e4954
   2ad48:	004e4f20 	.word	0x004e4f20
   2ad4c:	4f46564f 	.word	0x4f46564f
   2ad50:	00004646 	.word	0x00004646
   2ad54:	56455250 	.word	0x56455250
   2ad58:	20544e45 	.word	0x20544e45
   2ad5c:	5245564f 	.word	0x5245564f
   2ad60:	574f4c46 	.word	0x574f4c46
   2ad64:	54455320 	.word	0x54455320
   2ad68:	474e4954 	.word	0x474e4954
   2ad6c:	46464f20 	.word	0x46464f20
   2ad70:	00000000 	.word	0x00000000
   2ad74:	4f4d324d 	.word	0x4f4d324d
   2ad78:	0000004e 	.word	0x0000004e
   2ad7c:	204d324d 	.word	0x204d324d
   2ad80:	6e727554 	.word	0x6e727554
   2ad84:	4f206465 	.word	0x4f206465
   2ad88:	52202c6e 	.word	0x52202c6e
   2ad8c:	746f6d65 	.word	0x746f6d65
   2ad90:	754e2065 	.word	0x754e2065
   2ad94:	7265626d 	.word	0x7265626d
   2ad98:	726c4120 	.word	0x726c4120
   2ad9c:	79646165 	.word	0x79646165
   2ada0:	72655620 	.word	0x72655620
   2ada4:	65696669 	.word	0x65696669
   2ada8:	00000064 	.word	0x00000064
   2adac:	6f727245 	.word	0x6f727245
   2adb0:	4d203a72 	.word	0x4d203a72
   2adb4:	52204d32 	.word	0x52204d32
   2adb8:	746f6d65 	.word	0x746f6d65
   2adbc:	754e2065 	.word	0x754e2065
   2adc0:	7265626d 	.word	0x7265626d
   2adc4:	746f4e20 	.word	0x746f4e20
   2adc8:	65725020 	.word	0x65725020
   2adcc:	746e6573 	.word	0x746e6573
   2add0:	00000000 	.word	0x00000000
   2add4:	4f4d324d 	.word	0x4f4d324d
   2add8:	00004646 	.word	0x00004646
   2addc:	204d324d 	.word	0x204d324d
   2ade0:	54544553 	.word	0x54544553
   2ade4:	20474e49 	.word	0x20474e49
   2ade8:	0046464f 	.word	0x0046464f
   2adec:	54415453 	.word	0x54415453
   2adf0:	00005355 	.word	0x00005355
   2adf4:	45544c41 	.word	0x45544c41
   2adf8:	54414e52 	.word	0x54414e52
   2adfc:	554e2045 	.word	0x554e2045
   2ae00:	5245424d 	.word	0x5245424d
   2ae04:	004e4f20 	.word	0x004e4f20
   2ae08:	45544c41 	.word	0x45544c41
   2ae0c:	54414e52 	.word	0x54414e52
   2ae10:	554e2045 	.word	0x554e2045
   2ae14:	5245424d 	.word	0x5245424d
   2ae18:	544f4e20 	.word	0x544f4e20
   2ae1c:	45525020 	.word	0x45525020
   2ae20:	544e4553 	.word	0x544e4553
   2ae24:	00000000 	.word	0x00000000
   2ae28:	464f4d41 	.word	0x464f4d41
   2ae2c:	00000046 	.word	0x00000046
   2ae30:	45544c41 	.word	0x45544c41
   2ae34:	54414e52 	.word	0x54414e52
   2ae38:	4f4d2045 	.word	0x4f4d2045
   2ae3c:	454c4942 	.word	0x454c4942
   2ae40:	4d554e20 	.word	0x4d554e20
   2ae44:	20524542 	.word	0x20524542
   2ae48:	0046464f 	.word	0x0046464f
   2ae4c:	464f434e 	.word	0x464f434e
   2ae50:	00000046 	.word	0x00000046
   2ae54:	43204f4e 	.word	0x43204f4e
   2ae58:	204c4c41 	.word	0x204c4c41
   2ae5c:	54544553 	.word	0x54544553
   2ae60:	20474e49 	.word	0x20474e49
   2ae64:	0046464f 	.word	0x0046464f
   2ae68:	54544547 	.word	0x54544547
   2ae6c:	00454d49 	.word	0x00454d49
   2ae70:	454d4954 	.word	0x454d4954
   2ae74:	25203a20 	.word	0x25203a20
   2ae78:	75253a75 	.word	0x75253a75
   2ae7c:	00000000 	.word	0x00000000
   2ae80:	54544553 	.word	0x54544553
   2ae84:	00454d49 	.word	0x00454d49
   2ae88:	4954434e 	.word	0x4954434e
   2ae8c:	0000454d 	.word	0x0000454d
   2ae90:	0000002d 	.word	0x0000002d
   2ae94:	0000003a 	.word	0x0000003a
   2ae98:	43204f4e 	.word	0x43204f4e
   2ae9c:	204c4c41 	.word	0x204c4c41
   2aea0:	494d4954 	.word	0x494d4954
   2aea4:	2053474e 	.word	0x2053474e
   2aea8:	00544553 	.word	0x00544553
   2aeac:	47415453 	.word	0x47415453
   2aeb0:	00000045 	.word	0x00000045
   2aeb4:	4c4c4143 	.word	0x4c4c4143
   2aeb8:	41545320 	.word	0x41545320
   2aebc:	53204547 	.word	0x53204547
   2aec0:	54205445 	.word	0x54205445
   2aec4:	203a204f 	.word	0x203a204f
   2aec8:	00006425 	.word	0x00006425
   2aecc:	52415453 	.word	0x52415453
   2aed0:	454d4954 	.word	0x454d4954
   2aed4:	00000000 	.word	0x00000000
   2aed8:	41545320 	.word	0x41545320
   2aedc:	4d495452 	.word	0x4d495452
   2aee0:	45532045 	.word	0x45532045
   2aee4:	4f542054 	.word	0x4f542054
   2aee8:	25203a20 	.word	0x25203a20
   2aeec:	00000064 	.word	0x00000064
   2aef0:	4f545541 	.word	0x4f545541
   2aef4:	454d4954 	.word	0x454d4954
   2aef8:	00000000 	.word	0x00000000
   2aefc:	54554120 	.word	0x54554120
   2af00:	4d49544f 	.word	0x4d49544f
   2af04:	45532045 	.word	0x45532045
   2af08:	4f542054 	.word	0x4f542054
   2af0c:	25203a20 	.word	0x25203a20
   2af10:	00000064 	.word	0x00000064
   2af14:	004c4142 	.word	0x004c4142
   2af18:	002b504d 	.word	0x002b504d
   2af1c:	4f4e2050 	.word	0x4f4e2050
   2af20:	44444120 	.word	0x44444120
   2af24:	00444544 	.word	0x00444544
   2af28:	002b534d 	.word	0x002b534d
   2af2c:	4f4e2053 	.word	0x4f4e2053
   2af30:	44444120 	.word	0x44444120
   2af34:	00444544 	.word	0x00444544
   2af38:	00002b4d 	.word	0x00002b4d
   2af3c:	49424f4d 	.word	0x49424f4d
   2af40:	4e20454c 	.word	0x4e20454c
   2af44:	00003a4f 	.word	0x00003a4f
   2af48:	0000000a 	.word	0x0000000a
   2af4c:	45444441 	.word	0x45444441
   2af50:	55532044 	.word	0x55532044
   2af54:	53454343 	.word	0x53454343
   2af58:	4c554653 	.word	0x4c554653
   2af5c:	0000594c 	.word	0x0000594c
   2af60:	00002d4d 	.word	0x00002d4d
   2af64:	4f4d4552 	.word	0x4f4d4552
   2af68:	20444556 	.word	0x20444556
   2af6c:	43435553 	.word	0x43435553
   2af70:	46535345 	.word	0x46535345
   2af74:	594c4c55 	.word	0x594c4c55
   2af78:	00000000 	.word	0x00000000
   2af7c:	002b4d41 	.word	0x002b4d41
   2af80:	45544c41 	.word	0x45544c41
   2af84:	54414e52 	.word	0x54414e52
   2af88:	4f4d2045 	.word	0x4f4d2045
   2af8c:	454c4942 	.word	0x454c4942
   2af90:	44444120 	.word	0x44444120
   2af94:	43555320 	.word	0x43555320
   2af98:	53534543 	.word	0x53534543
   2af9c:	00000000 	.word	0x00000000
   2afa0:	002b4d4d 	.word	0x002b4d4d
   2afa4:	204d324d 	.word	0x204d324d
   2afa8:	202e4f4e 	.word	0x202e4f4e
   2afac:	45444441 	.word	0x45444441
   2afb0:	00000044 	.word	0x00000044
   2afb4:	002b524d 	.word	0x002b524d
   2afb8:	204d324d 	.word	0x204d324d
   2afbc:	4f4d4552 	.word	0x4f4d4552
   2afc0:	4e204554 	.word	0x4e204554
   2afc4:	41202e4f 	.word	0x41202e4f
   2afc8:	44454444 	.word	0x44454444
   2afcc:	00000000 	.word	0x00000000
   2afd0:	4f525245 	.word	0x4f525245
   2afd4:	203a2052 	.word	0x203a2052
   2afd8:	00000000 	.word	0x00000000
   2afdc:	00004e4f 	.word	0x00004e4f
   2afe0:	48502032 	.word	0x48502032
   2afe4:	00455341 	.word	0x00455341
   2afe8:	00004b4f 	.word	0x00004b4f
   2afec:	4f525245 	.word	0x4f525245
   2aff0:	00000052 	.word	0x00000052
   2aff4:	203a5952 	.word	0x203a5952
   2aff8:	59206425 	.word	0x59206425
   2affc:	25203a42 	.word	0x25203a42
   2b000:	52422064 	.word	0x52422064
   2b004:	6425203a 	.word	0x6425203a
   2b008:	3a43410a 	.word	0x3a43410a
   2b00c:	0a732520 	.word	0x0a732520
   2b010:	75716553 	.word	0x75716553
   2b014:	65636e65 	.word	0x65636e65
   2b018:	7325203a 	.word	0x7325203a
   2b01c:	746f4d0a 	.word	0x746f4d0a
   2b020:	203a726f 	.word	0x203a726f
   2b024:	430a7325 	.word	0x430a7325
   2b028:	65727275 	.word	0x65727275
   2b02c:	203a746e 	.word	0x203a746e
   2b030:	0a416425 	.word	0x0a416425
   2b034:	7774654e 	.word	0x7774654e
   2b038:	3a6b726f 	.word	0x3a6b726f
   2b03c:	0a642520 	.word	0x0a642520
   2b040:	74746142 	.word	0x74746142
   2b044:	3a797265 	.word	0x3a797265
   2b048:	25642520 	.word	0x25642520
   2b04c:	00000025 	.word	0x00000025
   2b050:	304d4d56 	.word	0x304d4d56
   2b054:	00000031 	.word	0x00000031
   2b058:	4f544f4d 	.word	0x4f544f4d
   2b05c:	00002052 	.word	0x00002052
   2b060:	0046464f 	.word	0x0046464f
   2b064:	7e75257e 	.word	0x7e75257e
   2b068:	00000000 	.word	0x00000000
   2b06c:	2a2a2a2a 	.word	0x2a2a2a2a
   2b070:	00000000 	.word	0x00000000
   2b074:	20572f46 	.word	0x20572f46
   2b078:	61647055 	.word	0x61647055
   2b07c:	43206574 	.word	0x43206574
   2b080:	6c706d6f 	.word	0x6c706d6f
   2b084:	64657465 	.word	0x64657465
   2b088:	00000000 	.word	0x00000000
   2b08c:	20572f46 	.word	0x20572f46
   2b090:	61647055 	.word	0x61647055
   2b094:	45206574 	.word	0x45206574
   2b098:	726f7272 	.word	0x726f7272
   2b09c:	00000000 	.word	0x00000000
   2b0a0:	30303030 	.word	0x30303030
   2b0a4:	30303030 	.word	0x30303030
   2b0a8:	00003030 	.word	0x00003030
   2b0ac:	494d4441 	.word	0x494d4441
   2b0b0:	0000004e 	.word	0x0000004e
   2b0b4:	00000023 	.word	0x00000023
   2b0b8:	30524d56 	.word	0x30524d56
   2b0bc:	00000032 	.word	0x00000032
   2b0c0:	204d324d 	.word	0x204d324d
   2b0c4:	4e525554 	.word	0x4e525554
   2b0c8:	4f204445 	.word	0x4f204445
   2b0cc:	0000004e 	.word	0x0000004e
   2b0d0:	0000203a 	.word	0x0000203a
   2b0d4:	00017e28 	.word	0x00017e28
   2b0d8:	00017f0e 	.word	0x00017f0e
   2b0dc:	00017f0e 	.word	0x00017f0e
   2b0e0:	00017e28 	.word	0x00017e28
   2b0e4:	00017f0e 	.word	0x00017f0e
   2b0e8:	00017f0e 	.word	0x00017f0e
   2b0ec:	00017f0e 	.word	0x00017f0e
   2b0f0:	00017f0e 	.word	0x00017f0e
   2b0f4:	00017f0e 	.word	0x00017f0e
   2b0f8:	00017f0e 	.word	0x00017f0e
   2b0fc:	00017f0e 	.word	0x00017f0e
   2b100:	00017f0e 	.word	0x00017f0e
   2b104:	00017e28 	.word	0x00017e28
   2b108:	00017f0e 	.word	0x00017f0e
   2b10c:	00017f0e 	.word	0x00017f0e
   2b110:	00017f0e 	.word	0x00017f0e
   2b114:	00017dea 	.word	0x00017dea
   2b118:	00017f0e 	.word	0x00017f0e
   2b11c:	00017e28 	.word	0x00017e28
   2b120:	49524b20 	.word	0x49524b20
   2b124:	414e4853 	.word	0x414e4853
   2b128:	4d532020 	.word	0x4d532020
   2b12c:	20545241 	.word	0x20545241
   2b130:	00000000 	.word	0x00000000
   2b134:	54202020 	.word	0x54202020
   2b138:	4e484345 	.word	0x4e484345
   2b13c:	474f4c4f 	.word	0x474f4c4f
   2b140:	20202059 	.word	0x20202059
   2b144:	00000000 	.word	0x00000000
   2b148:	4f532020 	.word	0x4f532020
   2b14c:	41575446 	.word	0x41575446
   2b150:	56204552 	.word	0x56204552
   2b154:	20205245 	.word	0x20205245
   2b158:	00000000 	.word	0x00000000
   2b15c:	33422020 	.word	0x33422020
   2b160:	36312d33 	.word	0x36312d33
   2b164:	2d32312d 	.word	0x2d32312d
   2b168:	39313032 	.word	0x39313032
   2b16c:	00002020 	.word	0x00002020
   2b170:	00007325 	.word	0x00007325
   2b174:	74696e49 	.word	0x74696e49
   2b178:	696c6169 	.word	0x696c6169
   2b17c:	676e697a 	.word	0x676e697a
   2b180:	202e2e2e 	.word	0x202e2e2e
   2b184:	00000000 	.word	0x00000000
   2b188:	4d4d4f43 	.word	0x4d4d4f43
   2b18c:	45444e41 	.word	0x45444e41
   2b190:	32762052 	.word	0x32762052
   2b194:	20202020 	.word	0x20202020
   2b198:	00000000 	.word	0x00000000
   2b19c:	4e4f4850 	.word	0x4e4f4850
   2b1a0:	54532045 	.word	0x54532045
   2b1a4:	53555441 	.word	0x53555441
   2b1a8:	20202020 	.word	0x20202020
   2b1ac:	00000000 	.word	0x00000000
   2b1b0:	20204e4f 	.word	0x20204e4f
   2b1b4:	20202020 	.word	0x20202020
   2b1b8:	20202020 	.word	0x20202020
   2b1bc:	20202020 	.word	0x20202020
   2b1c0:	00000000 	.word	0x00000000
   2b1c4:	2046464f 	.word	0x2046464f
   2b1c8:	20202020 	.word	0x20202020
   2b1cc:	20202020 	.word	0x20202020
   2b1d0:	20202020 	.word	0x20202020
   2b1d4:	00000000 	.word	0x00000000
   2b1d8:	20595256 	.word	0x20595256
   2b1dc:	59562020 	.word	0x59562020
   2b1e0:	20202042 	.word	0x20202042
   2b1e4:	20524256 	.word	0x20524256
   2b1e8:	00000000 	.word	0x00000000
   2b1ec:	6c333025 	.word	0x6c333025
   2b1f0:	20202075 	.word	0x20202075
   2b1f4:	00000000 	.word	0x00000000
   2b1f8:	6c333025 	.word	0x6c333025
   2b1fc:	00002075 	.word	0x00002075
   2b200:	48502033 	.word	0x48502033
   2b204:	20455341 	.word	0x20455341
   2b208:	3a514553 	.word	0x3a514553
   2b20c:	00000000 	.word	0x00000000
   2b210:	204b4f20 	.word	0x204b4f20
   2b214:	00000000 	.word	0x00000000
   2b218:	52524520 	.word	0x52524520
   2b21c:	00000000 	.word	0x00000000
   2b220:	53414850 	.word	0x53414850
   2b224:	54532045 	.word	0x54532045
   2b228:	3a455441 	.word	0x3a455441
   2b22c:	00000000 	.word	0x00000000
   2b230:	48503320 	.word	0x48503320
   2b234:	00000020 	.word	0x00000020
   2b238:	48503220 	.word	0x48503220
   2b23c:	00000020 	.word	0x00000020
   2b240:	46464f20 	.word	0x46464f20
   2b244:	00000000 	.word	0x00000000
   2b248:	4f544f4d 	.word	0x4f544f4d
   2b24c:	203a2052 	.word	0x203a2052
   2b250:	46464f20 	.word	0x46464f20
   2b254:	20202020 	.word	0x20202020
   2b258:	00000000 	.word	0x00000000
   2b25c:	4f544f4d 	.word	0x4f544f4d
   2b260:	203a2052 	.word	0x203a2052
   2b264:	204e4f20 	.word	0x204e4f20
   2b268:	20202020 	.word	0x20202020
   2b26c:	00000000 	.word	0x00000000
   2b270:	20202020 	.word	0x20202020
   2b274:	20202020 	.word	0x20202020
   2b278:	20202020 	.word	0x20202020
   2b27c:	20202020 	.word	0x20202020
   2b280:	00000000 	.word	0x00000000
   2b284:	4f545541 	.word	0x4f545541
   2b288:	203a2020 	.word	0x203a2020
   2b28c:	204e4f20 	.word	0x204e4f20
   2b290:	20202020 	.word	0x20202020
   2b294:	00000000 	.word	0x00000000
   2b298:	4f545541 	.word	0x4f545541
   2b29c:	203a2020 	.word	0x203a2020
   2b2a0:	46464f20 	.word	0x46464f20
   2b2a4:	20202020 	.word	0x20202020
   2b2a8:	00000000 	.word	0x00000000
   2b2ac:	4f544f4d 	.word	0x4f544f4d
   2b2b0:	55432052 	.word	0x55432052
   2b2b4:	4e455252 	.word	0x4e455252
   2b2b8:	20203a54 	.word	0x20203a54
   2b2bc:	00000000 	.word	0x00000000
   2b2c0:	6c333025 	.word	0x6c333025
   2b2c4:	30252e75 	.word	0x30252e75
   2b2c8:	20756c32 	.word	0x20756c32
   2b2cc:	20202020 	.word	0x20202020
   2b2d0:	20202020 	.word	0x20202020
   2b2d4:	00202020 	.word	0x00202020
   2b2d8:	52525543 	.word	0x52525543
   2b2dc:	20544e45 	.word	0x20544e45
   2b2e0:	54544553 	.word	0x54544553
   2b2e4:	20474e49 	.word	0x20474e49
   2b2e8:	00000000 	.word	0x00000000
   2b2ec:	5245564f 	.word	0x5245564f
   2b2f0:	203a2020 	.word	0x203a2020
   2b2f4:	6c333025 	.word	0x6c333025
   2b2f8:	30252e75 	.word	0x30252e75
   2b2fc:	20756c32 	.word	0x20756c32
   2b300:	00000020 	.word	0x00000020
   2b304:	45444e55 	.word	0x45444e55
   2b308:	203a2052 	.word	0x203a2052
   2b30c:	6c333025 	.word	0x6c333025
   2b310:	30252e75 	.word	0x30252e75
   2b314:	20756c32 	.word	0x20756c32
   2b318:	00000020 	.word	0x00000020
   2b31c:	454c2d4f 	.word	0x454c2d4f
   2b320:	204c4556 	.word	0x204c4556
   2b324:	0000203a 	.word	0x0000203a
   2b328:	48474948 	.word	0x48474948
   2b32c:	00002020 	.word	0x00002020
   2b330:	2044494d 	.word	0x2044494d
   2b334:	00002020 	.word	0x00002020
   2b338:	20574f4c 	.word	0x20574f4c
   2b33c:	00002020 	.word	0x00002020
   2b340:	454c2d55 	.word	0x454c2d55
   2b344:	204c4556 	.word	0x204c4556
   2b348:	0000203a 	.word	0x0000203a
   2b34c:	43545243 	.word	0x43545243
   2b350:	0000204c 	.word	0x0000204c
   2b354:	74746142 	.word	0x74746142
   2b358:	50797265 	.word	0x50797265
   2b35c:	203a7265 	.word	0x203a7265
   2b360:	25257525 	.word	0x25257525
   2b364:	00000020 	.word	0x00000020
   2b368:	4e474953 	.word	0x4e474953
   2b36c:	3a204c41 	.word	0x3a204c41
   2b370:	00000020 	.word	0x00000020
   2b374:	20202020 	.word	0x20202020
   2b378:	00202020 	.word	0x00202020
   2b37c:	4f434e49 	.word	0x4f434e49
   2b380:	474e494d 	.word	0x474e494d
   2b384:	4c414320 	.word	0x4c414320
   2b388:	202e2e4c 	.word	0x202e2e4c
   2b38c:	00000000 	.word	0x00000000
   2b390:	36312d25 	.word	0x36312d25
   2b394:	00000073 	.word	0x00000073
   2b398:	43204e49 	.word	0x43204e49
   2b39c:	2e4c4c41 	.word	0x2e4c4c41
   2b3a0:	20202e2e 	.word	0x20202e2e
   2b3a4:	20202020 	.word	0x20202020
   2b3a8:	00000000 	.word	0x00000000
   2b3ac:	4c414944 	.word	0x4c414944
   2b3b0:	2e474e49 	.word	0x2e474e49
   2b3b4:	20202e2e 	.word	0x20202e2e
   2b3b8:	20202020 	.word	0x20202020
   2b3bc:	00000000 	.word	0x00000000
   2b3c0:	4f434e49 	.word	0x4f434e49
   2b3c4:	474e494d 	.word	0x474e494d
   2b3c8:	534d5320 	.word	0x534d5320
   2b3cc:	202e2e2e 	.word	0x202e2e2e
   2b3d0:	00000000 	.word	0x00000000
   2b3d4:	4754554f 	.word	0x4754554f
   2b3d8:	474e494f 	.word	0x474e494f
   2b3dc:	534d5320 	.word	0x534d5320
   2b3e0:	202e2e2e 	.word	0x202e2e2e
   2b3e4:	00000000 	.word	0x00000000
   2b3e8:	20574f4c 	.word	0x20574f4c
   2b3ec:	54544142 	.word	0x54544142
   2b3f0:	20595245 	.word	0x20595245
   2b3f4:	20202020 	.word	0x20202020
	...
   2b400:	1f1f0000 	.word	0x1f1f0000
   2b404:	00000000 	.word	0x00000000
   2b408:	1f1f1f00 	.word	0x1f1f1f00
   2b40c:	00000000 	.word	0x00000000
   2b410:	1f1f1f1f 	.word	0x1f1f1f1f
   2b414:	1f1f0000 	.word	0x1f1f0000
   2b418:	1f1f1f1f 	.word	0x1f1f1f1f
   2b41c:	1f1f1f1f 	.word	0x1f1f1f1f
   2b420:	1f1f1f1f 	.word	0x1f1f1f1f
   2b424:	00019786 	.word	0x00019786
   2b428:	000191f6 	.word	0x000191f6
   2b42c:	0001923a 	.word	0x0001923a
   2b430:	000192a8 	.word	0x000192a8
   2b434:	00019302 	.word	0x00019302
   2b438:	00019334 	.word	0x00019334
   2b43c:	00019454 	.word	0x00019454
   2b440:	000194ca 	.word	0x000194ca
   2b444:	0001956e 	.word	0x0001956e
   2b448:	000195f0 	.word	0x000195f0
   2b44c:	000196ba 	.word	0x000196ba
   2b450:	00019784 	.word	0x00019784
   2b454:	0001960e 	.word	0x0001960e
   2b458:	0001962c 	.word	0x0001962c
   2b45c:	0001964a 	.word	0x0001964a
   2b460:	00019668 	.word	0x00019668
   2b464:	00019690 	.word	0x00019690
   2b468:	756c255d 	.word	0x756c255d
   2b46c:	756c257b 	.word	0x756c257b
   2b470:	756c257d 	.word	0x756c257d
   2b474:	00000000 	.word	0x00000000
   2b478:	00000002 	.word	0x00000002
   2b47c:	00000003 	.word	0x00000003
   2b480:	00000028 	.word	0x00000028
   2b484:	00000029 	.word	0x00000029
   2b488:	00000004 	.word	0x00000004
   2b48c:	00000005 	.word	0x00000005
   2b490:	00000006 	.word	0x00000006
   2b494:	00000007 	.word	0x00000007
   2b498:	00000020 	.word	0x00000020
   2b49c:	00000021 	.word	0x00000021
   2b4a0:	00000022 	.word	0x00000022
   2b4a4:	00000023 	.word	0x00000023
   2b4a8:	00000024 	.word	0x00000024
   2b4ac:	00000025 	.word	0x00000025
   2b4b0:	00000026 	.word	0x00000026
   2b4b4:	00000027 	.word	0x00000027
   2b4b8:	00000008 	.word	0x00000008
   2b4bc:	00000009 	.word	0x00000009
   2b4c0:	0000000a 	.word	0x0000000a
   2b4c4:	0000000b 	.word	0x0000000b
   2b4c8:	0001e26e 	.word	0x0001e26e
   2b4cc:	0001e274 	.word	0x0001e274
   2b4d0:	0001e274 	.word	0x0001e274
   2b4d4:	0001e274 	.word	0x0001e274
   2b4d8:	0001e274 	.word	0x0001e274
   2b4dc:	0001e274 	.word	0x0001e274
   2b4e0:	0001e274 	.word	0x0001e274
   2b4e4:	0001e274 	.word	0x0001e274
   2b4e8:	0001e274 	.word	0x0001e274
   2b4ec:	0001e274 	.word	0x0001e274
   2b4f0:	0001e274 	.word	0x0001e274
   2b4f4:	0001e274 	.word	0x0001e274
   2b4f8:	0001e274 	.word	0x0001e274
   2b4fc:	0001e274 	.word	0x0001e274
   2b500:	0001e274 	.word	0x0001e274
   2b504:	0001e274 	.word	0x0001e274
   2b508:	0001e24c 	.word	0x0001e24c
   2b50c:	0001e274 	.word	0x0001e274
   2b510:	0001e274 	.word	0x0001e274
   2b514:	0001e274 	.word	0x0001e274
   2b518:	0001e274 	.word	0x0001e274
   2b51c:	0001e274 	.word	0x0001e274
   2b520:	0001e274 	.word	0x0001e274
   2b524:	0001e274 	.word	0x0001e274
   2b528:	0001e274 	.word	0x0001e274
   2b52c:	0001e274 	.word	0x0001e274
   2b530:	0001e274 	.word	0x0001e274
   2b534:	0001e274 	.word	0x0001e274
   2b538:	0001e274 	.word	0x0001e274
   2b53c:	0001e274 	.word	0x0001e274
   2b540:	0001e274 	.word	0x0001e274
   2b544:	0001e274 	.word	0x0001e274
   2b548:	0001e268 	.word	0x0001e268
   2b54c:	0001e274 	.word	0x0001e274
   2b550:	0001e274 	.word	0x0001e274
   2b554:	0001e274 	.word	0x0001e274
   2b558:	0001e274 	.word	0x0001e274
   2b55c:	0001e274 	.word	0x0001e274
   2b560:	0001e274 	.word	0x0001e274
   2b564:	0001e274 	.word	0x0001e274
   2b568:	0001e274 	.word	0x0001e274
   2b56c:	0001e274 	.word	0x0001e274
   2b570:	0001e274 	.word	0x0001e274
   2b574:	0001e274 	.word	0x0001e274
   2b578:	0001e274 	.word	0x0001e274
   2b57c:	0001e274 	.word	0x0001e274
   2b580:	0001e274 	.word	0x0001e274
   2b584:	0001e274 	.word	0x0001e274
   2b588:	0001e262 	.word	0x0001e262
   2b58c:	0001e20a 	.word	0x0001e20a
   2b590:	0001e220 	.word	0x0001e220
   2b594:	0001e236 	.word	0x0001e236
   2b598:	0001e1f0 	.word	0x0001e1f0
   2b59c:	42000800 	.word	0x42000800
   2b5a0:	42000c00 	.word	0x42000c00
   2b5a4:	42001000 	.word	0x42001000
   2b5a8:	42001400 	.word	0x42001400
   2b5ac:	42001800 	.word	0x42001800
   2b5b0:	42001c00 	.word	0x42001c00
   2b5b4:	454c4449 	.word	0x454c4449
   2b5b8:	00000000 	.word	0x00000000
   2b5bc:	20726d54 	.word	0x20726d54
   2b5c0:	00637653 	.word	0x00637653
   2b5c4:	00021d90 	.word	0x00021d90
   2b5c8:	00021d90 	.word	0x00021d90
   2b5cc:	00021d90 	.word	0x00021d90
   2b5d0:	00021e1e 	.word	0x00021e1e
   2b5d4:	00021de8 	.word	0x00021de8
   2b5d8:	00021e12 	.word	0x00021e12
   2b5dc:	00021d90 	.word	0x00021d90
   2b5e0:	00021d90 	.word	0x00021d90
   2b5e4:	00021e1e 	.word	0x00021e1e
   2b5e8:	00021de8 	.word	0x00021de8

0002b5ec <_tcc_intflag>:
   2b5ec:	00000001 00000002 00000004 00000008     ................
   2b5fc:	00001000 00002000 00004000 00008000     ..... ...@......
   2b60c:	00010000 00020000 00040000 00080000     ................
   2b61c:	0c0b0a09 00000e0d 0002347c 0002347c     ........|4..|4..
   2b62c:	00023470 0002347c 00023470 0002344a     p4..|4..p4..J4..
   2b63c:	0002344a 0002347c 0002347c 0002347c     J4..|4..|4..|4..
   2b64c:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b65c:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b66c:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b67c:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b68c:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b69c:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b6ac:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b6bc:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b6cc:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b6dc:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b6ec:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b6fc:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b70c:	0002347c 0002347c 0002347c 0002347c     |4..|4..|4..|4..
   2b71c:	0002347c 0002347c 00023470 00023470     |4..|4..p4..p4..
   2b72c:	00023486 00023486 00023486 00023486     .4...4...4...4..
   2b73c:	41744545 50524f4d 456d752e 000247f6     EEtAMORP.umE.G..
   2b74c:	00024870 00024870 00024814 0002480e     pH..pH...H...H..
   2b75c:	0002481a 000247fc 00024820 00024856     .H...G.. H..VH..
   2b76c:	00024b3c 00024b8c 00024b8c 00024b88     <K...K...K...K..
   2b77c:	00024b2e 00024b4e 00024b1e 00024b60     .K..NK...K..`K..
   2b78c:	00024b72 00024bda 00024c08 00024c08     rK...K...L...L..
   2b79c:	00024c04 00024bd4 00024be0 00024bce     .L...K...K...K..
   2b7ac:	00024be6 00024bec 00776f70 74727173     .K...K..pow.sqrt
   2b7bc:	00000000                                ....

0002b7c0 <TWO52>:
   2b7c0:	00000000 43300000 00000000 c3300000     ......0C......0.
   2b7d0:	00027628 000275f8 0002760a 0002754c     (v...u...v..Lu..
   2b7e0:	0002760a 000275ee 0002760a 0002754c     .v...u...v..Lu..
   2b7f0:	000275f8 000275f8 000275ee 0002754c     .u...u...u..Lu..
   2b800:	00027554 00027554 00027554 00027610     Tu..Tu..Tu...v..
   2b810:	000275f8 000275f8 000275cc 000276b0     .u...u...u...v..
   2b820:	000275cc 000275ee 000275cc 000276b0     .u...u...u...v..
   2b830:	000275f8 000275f8 000275ee 000276b0     .u...u...u...v..
   2b840:	00027554 00027554 00027554 000276ba     Tu..Tu..Tu...v..
   2b850:	00027858 000277a8 000277a8 000277a6     Xx...w...w...w..
   2b860:	0002784a 0002784a 00027840 000277a6     Jx..Jx..@x...w..
   2b870:	0002784a 00027840 0002784a 000277a6     Jx..@x..Jx...w..
   2b880:	00027850 00027850 00027850 000278e0     Px..Px..Px...x..
   2b890:	00028210 000281f2 000281ac 000280ca     ................
   2b8a0:	000281ac 000281e4 000281ac 000280ca     ................
   2b8b0:	000281f2 000281f2 000281e4 000280ca     ................
   2b8c0:	000280c2 000280c2 000280c2 00028428     ............(...
   2b8d0:	00028a70 00028930 00028930 0002892c     p...0...0...,...
   2b8e0:	00028a48 00028a48 00028a3a 0002892c     H...H...:...,...
   2b8f0:	00028a48 00028a3a 00028a48 0002892c     H...:...H...,...
   2b900:	00028a50 00028a50 00028a50 00028c54     P...P...P...T...
   2b910:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   2b920:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   2b930:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

0002b93f <_ctype_>:
   2b93f:	20202000 20202020 28282020 20282828     .         ((((( 
   2b94f:	20202020 20202020 20202020 20202020                     
   2b95f:	10108820 10101010 10101010 10101010      ...............
   2b96f:	04040410 04040404 10040404 10101010     ................
   2b97f:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2b98f:	01010101 01010101 01010101 10101010     ................
   2b99f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2b9af:	02020202 02020202 02020202 10101010     ................
   2b9bf:	00000020 00000000 00000000 00000000      ...............
	...
   2ba3f:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   2ba4f:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   2ba5f:	30004645 34333231 38373635 63626139     EF.0123456789abc
   2ba6f:	00666564 c0b5f800                                def..

0002ba74 <_init>:
   2ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ba76:	46c0      	nop			; (mov r8, r8)
   2ba78:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2ba7a:	bc08      	pop	{r3}
   2ba7c:	469e      	mov	lr, r3
   2ba7e:	4770      	bx	lr

0002ba80 <__init_array_start>:
   2ba80:	000100dd 	.word	0x000100dd

0002ba84 <_fini>:
   2ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ba86:	46c0      	nop			; (mov r8, r8)
   2ba88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2ba8a:	bc08      	pop	{r3}
   2ba8c:	469e      	mov	lr, r3
   2ba8e:	4770      	bx	lr

0002ba90 <__fini_array_start>:
   2ba90:	000100b5 	.word	0x000100b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0001 0000                                   ....

2000002c <__tracebuffersize__>:
2000002c:	0400 0000                                   ....

20000030 <__fdlib_version>:
20000030:	0001 0000                                   ....

20000034 <_impure_ptr>:
20000034:	0038 2000                                   8.. 

20000038 <impure_data>:
	...

20000098 <__global_locale>:
20000098:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000118:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000138:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000158:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000178:	9cf1 0002 9701 0002 0000 0000 b93f 0002     ............?...
20000188:	b918 0002 ba45 0002 ba45 0002 ba45 0002     ....E...E...E...
20000198:	ba45 0002 ba45 0002 ba45 0002 ba45 0002     E...E...E...E...
200001a8:	ba45 0002 ba45 0002 ffff ffff ffff ffff     E...E...........
200001b8:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001e0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
