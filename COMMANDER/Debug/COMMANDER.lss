
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b994  00010000  00010000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002b994  0002b994  0002b994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000204  20000000  0002b99c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000c04  20000400  0002c000  00030400  2**10
                  ALLOC
  4 .stack        00002004  20001004  0002cc04  00030400  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0008003c  00000000  00000000  00030285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008b55  00000000  00000000  000b02c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ac03  00000000  00000000  000b8e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001db8  00000000  00000000  000c3a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001bc0  00000000  00000000  000c57d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000287e4  00000000  00000000  000c7391  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027c9b  00000000  00000000  000efb75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a29f5  00000000  00000000  00117810  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000074c0  00000000  00000000  001ba208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <exception_table>:
   10000:	08 30 00 20 89 55 02 00 81 56 02 00 81 56 02 00     .0. .U...V...V..
	...
   1002c:	89 f6 01 00 00 00 00 00 00 00 00 00 c1 f7 01 00     ................
   1003c:	09 f8 01 00 81 56 02 00 81 56 02 00 01 1f 02 00     .....V...V......
   1004c:	05 f0 01 00 29 2f 02 00 81 56 02 00 1d ea 01 00     ....)/...V......
   1005c:	81 56 02 00 95 2f 02 00 21 2d 02 00 39 2d 02 00     .V.../..!-..9-..
   1006c:	51 2d 02 00 69 2d 02 00 81 2d 02 00 99 2d 02 00     Q-..i-...-...-..
   1007c:	25 1f 02 00 39 1f 02 00 4d 1f 02 00 dd 1f 02 00     %...9...M.......
   1008c:	f1 1f 02 00 05 20 02 00 19 20 02 00 2d 20 02 00     ..... ... ..- ..
   1009c:	fd e7 01 00 cd 30 02 00 e1 e9 01 00 81 56 02 00     .....0.......V..
   100ac:	81 56 02 00 00 00 00 00                             .V......

000100b4 <__do_global_dtors_aux>:
   100b4:	b510      	push	{r4, lr}
   100b6:	4c06      	ldr	r4, [pc, #24]	; (100d0 <__do_global_dtors_aux+0x1c>)
   100b8:	7823      	ldrb	r3, [r4, #0]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d107      	bne.n	100ce <__do_global_dtors_aux+0x1a>
   100be:	4b05      	ldr	r3, [pc, #20]	; (100d4 <__do_global_dtors_aux+0x20>)
   100c0:	2b00      	cmp	r3, #0
   100c2:	d002      	beq.n	100ca <__do_global_dtors_aux+0x16>
   100c4:	4804      	ldr	r0, [pc, #16]	; (100d8 <__do_global_dtors_aux+0x24>)
   100c6:	e000      	b.n	100ca <__do_global_dtors_aux+0x16>
   100c8:	bf00      	nop
   100ca:	2301      	movs	r3, #1
   100cc:	7023      	strb	r3, [r4, #0]
   100ce:	bd10      	pop	{r4, pc}
   100d0:	20000400 	.word	0x20000400
   100d4:	00000000 	.word	0x00000000
   100d8:	0002b99c 	.word	0x0002b99c

000100dc <frame_dummy>:
   100dc:	4b08      	ldr	r3, [pc, #32]	; (10100 <frame_dummy+0x24>)
   100de:	b510      	push	{r4, lr}
   100e0:	2b00      	cmp	r3, #0
   100e2:	d003      	beq.n	100ec <frame_dummy+0x10>
   100e4:	4907      	ldr	r1, [pc, #28]	; (10104 <frame_dummy+0x28>)
   100e6:	4808      	ldr	r0, [pc, #32]	; (10108 <frame_dummy+0x2c>)
   100e8:	e000      	b.n	100ec <frame_dummy+0x10>
   100ea:	bf00      	nop
   100ec:	4807      	ldr	r0, [pc, #28]	; (1010c <frame_dummy+0x30>)
   100ee:	6803      	ldr	r3, [r0, #0]
   100f0:	2b00      	cmp	r3, #0
   100f2:	d100      	bne.n	100f6 <frame_dummy+0x1a>
   100f4:	bd10      	pop	{r4, pc}
   100f6:	4b06      	ldr	r3, [pc, #24]	; (10110 <frame_dummy+0x34>)
   100f8:	2b00      	cmp	r3, #0
   100fa:	d0fb      	beq.n	100f4 <frame_dummy+0x18>
   100fc:	4798      	blx	r3
   100fe:	e7f9      	b.n	100f4 <frame_dummy+0x18>
   10100:	00000000 	.word	0x00000000
   10104:	20000404 	.word	0x20000404
   10108:	0002b99c 	.word	0x0002b99c
   1010c:	0002b99c 	.word	0x0002b99c
   10110:	00000000 	.word	0x00000000

00010114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
   10114:	b590      	push	{r4, r7, lr}
   10116:	b083      	sub	sp, #12
   10118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
   1011a:	1dfc      	adds	r4, r7, #7
   1011c:	4b0a      	ldr	r3, [pc, #40]	; (10148 <configure_eeprom+0x34>)
   1011e:	4798      	blx	r3
   10120:	0003      	movs	r3, r0
   10122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
   10124:	1dfb      	adds	r3, r7, #7
   10126:	781b      	ldrb	r3, [r3, #0]
   10128:	2b16      	cmp	r3, #22
   1012a:	d100      	bne.n	1012e <configure_eeprom+0x1a>
	{
		while (true);
   1012c:	e7fe      	b.n	1012c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
   1012e:	1dfb      	adds	r3, r7, #7
   10130:	781b      	ldrb	r3, [r3, #0]
   10132:	2b00      	cmp	r3, #0
   10134:	d003      	beq.n	1013e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
   10136:	4b05      	ldr	r3, [pc, #20]	; (1014c <configure_eeprom+0x38>)
   10138:	4798      	blx	r3
		eeprom_emulator_init();
   1013a:	4b03      	ldr	r3, [pc, #12]	; (10148 <configure_eeprom+0x34>)
   1013c:	4798      	blx	r3
	}
}
   1013e:	46c0      	nop			; (mov r8, r8)
   10140:	46bd      	mov	sp, r7
   10142:	b003      	add	sp, #12
   10144:	bd90      	pop	{r4, r7, pc}
   10146:	46c0      	nop			; (mov r8, r8)
   10148:	00024145 	.word	0x00024145
   1014c:	0002422d 	.word	0x0002422d

00010150 <init_eeprom>:

void init_eeprom(void)
{
   10150:	b580      	push	{r7, lr}
   10152:	af00      	add	r7, sp, #0
	configure_eeprom();
   10154:	4bf7      	ldr	r3, [pc, #988]	; (10534 <init_eeprom+0x3e4>)
   10156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   10158:	4bf7      	ldr	r3, [pc, #988]	; (10538 <init_eeprom+0x3e8>)
   1015a:	0019      	movs	r1, r3
   1015c:	2000      	movs	r0, #0
   1015e:	4bf7      	ldr	r3, [pc, #988]	; (1053c <init_eeprom+0x3ec>)
   10160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
   10162:	49f5      	ldr	r1, [pc, #980]	; (10538 <init_eeprom+0x3e8>)
   10164:	4bf6      	ldr	r3, [pc, #984]	; (10540 <init_eeprom+0x3f0>)
   10166:	221c      	movs	r2, #28
   10168:	0018      	movs	r0, r3
   1016a:	4bf6      	ldr	r3, [pc, #984]	; (10544 <init_eeprom+0x3f4>)
   1016c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
   1016e:	4bf4      	ldr	r3, [pc, #976]	; (10540 <init_eeprom+0x3f0>)
   10170:	791b      	ldrb	r3, [r3, #4]
   10172:	2b55      	cmp	r3, #85	; 0x55
   10174:	d02c      	beq.n	101d0 <init_eeprom+0x80>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
   10176:	4bf2      	ldr	r3, [pc, #968]	; (10540 <init_eeprom+0x3f0>)
   10178:	2200      	movs	r2, #0
   1017a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
   1017c:	4bf0      	ldr	r3, [pc, #960]	; (10540 <init_eeprom+0x3f0>)
   1017e:	2255      	movs	r2, #85	; 0x55
   10180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
   10182:	4bef      	ldr	r3, [pc, #956]	; (10540 <init_eeprom+0x3f0>)
   10184:	2200      	movs	r2, #0
   10186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   10188:	4bed      	ldr	r3, [pc, #948]	; (10540 <init_eeprom+0x3f0>)
   1018a:	2200      	movs	r2, #0
   1018c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   1018e:	4bec      	ldr	r3, [pc, #944]	; (10540 <init_eeprom+0x3f0>)
   10190:	2200      	movs	r2, #0
   10192:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries= 0;
   10194:	4bea      	ldr	r3, [pc, #936]	; (10540 <init_eeprom+0x3f0>)
   10196:	2200      	movs	r2, #0
   10198:	721a      	strb	r2, [r3, #8]
		
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   1019a:	4beb      	ldr	r3, [pc, #940]	; (10548 <init_eeprom+0x3f8>)
   1019c:	2210      	movs	r2, #16
   1019e:	2100      	movs	r1, #0
   101a0:	0018      	movs	r0, r3
   101a2:	4bea      	ldr	r3, [pc, #936]	; (1054c <init_eeprom+0x3fc>)
   101a4:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   101a6:	4be8      	ldr	r3, [pc, #928]	; (10548 <init_eeprom+0x3f8>)
   101a8:	4ae9      	ldr	r2, [pc, #932]	; (10550 <init_eeprom+0x400>)
   101aa:	ca03      	ldmia	r2!, {r0, r1}
   101ac:	c303      	stmia	r3!, {r0, r1}
   101ae:	8811      	ldrh	r1, [r2, #0]
   101b0:	8019      	strh	r1, [r3, #0]
   101b2:	7892      	ldrb	r2, [r2, #2]
   101b4:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   101b6:	49e2      	ldr	r1, [pc, #904]	; (10540 <init_eeprom+0x3f0>)
   101b8:	4bdf      	ldr	r3, [pc, #892]	; (10538 <init_eeprom+0x3e8>)
   101ba:	221c      	movs	r2, #28
   101bc:	0018      	movs	r0, r3
   101be:	4be1      	ldr	r3, [pc, #900]	; (10544 <init_eeprom+0x3f4>)
   101c0:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   101c2:	4bdd      	ldr	r3, [pc, #884]	; (10538 <init_eeprom+0x3e8>)
   101c4:	0019      	movs	r1, r3
   101c6:	2000      	movs	r0, #0
   101c8:	4be2      	ldr	r3, [pc, #904]	; (10554 <init_eeprom+0x404>)
   101ca:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   101cc:	4be2      	ldr	r3, [pc, #904]	; (10558 <init_eeprom+0x408>)
   101ce:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
   101d0:	4bd9      	ldr	r3, [pc, #868]	; (10538 <init_eeprom+0x3e8>)
   101d2:	0019      	movs	r1, r3
   101d4:	2001      	movs	r0, #1
   101d6:	4bd9      	ldr	r3, [pc, #868]	; (1053c <init_eeprom+0x3ec>)
   101d8:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
   101da:	49d7      	ldr	r1, [pc, #860]	; (10538 <init_eeprom+0x3e8>)
   101dc:	4bdf      	ldr	r3, [pc, #892]	; (1055c <init_eeprom+0x40c>)
   101de:	2238      	movs	r2, #56	; 0x38
   101e0:	0018      	movs	r0, r3
   101e2:	4bd8      	ldr	r3, [pc, #864]	; (10544 <init_eeprom+0x3f4>)
   101e4:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
   101e6:	4bdd      	ldr	r3, [pc, #884]	; (1055c <init_eeprom+0x40c>)
   101e8:	791b      	ldrb	r3, [r3, #4]
   101ea:	2b55      	cmp	r3, #85	; 0x55
   101ec:	d02e      	beq.n	1024c <init_eeprom+0xfc>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
   101ee:	4bdb      	ldr	r3, [pc, #876]	; (1055c <init_eeprom+0x40c>)
   101f0:	2200      	movs	r2, #0
   101f2:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
   101f4:	4bd9      	ldr	r3, [pc, #868]	; (1055c <init_eeprom+0x40c>)
   101f6:	2255      	movs	r2, #85	; 0x55
   101f8:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
   101fa:	4bd9      	ldr	r3, [pc, #868]	; (10560 <init_eeprom+0x410>)
   101fc:	221e      	movs	r2, #30
   101fe:	2100      	movs	r1, #0
   10200:	0018      	movs	r0, r3
   10202:	4bd2      	ldr	r3, [pc, #840]	; (1054c <init_eeprom+0x3fc>)
   10204:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
   10206:	4ad6      	ldr	r2, [pc, #856]	; (10560 <init_eeprom+0x410>)
   10208:	4bd6      	ldr	r3, [pc, #856]	; (10564 <init_eeprom+0x414>)
   1020a:	0010      	movs	r0, r2
   1020c:	0019      	movs	r1, r3
   1020e:	2310      	movs	r3, #16
   10210:	001a      	movs	r2, r3
   10212:	4bcc      	ldr	r3, [pc, #816]	; (10544 <init_eeprom+0x3f4>)
   10214:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
   10216:	4bd4      	ldr	r3, [pc, #848]	; (10568 <init_eeprom+0x418>)
   10218:	2214      	movs	r2, #20
   1021a:	2100      	movs	r1, #0
   1021c:	0018      	movs	r0, r3
   1021e:	4bcb      	ldr	r3, [pc, #812]	; (1054c <init_eeprom+0x3fc>)
   10220:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
   10222:	4ad1      	ldr	r2, [pc, #836]	; (10568 <init_eeprom+0x418>)
   10224:	4bd1      	ldr	r3, [pc, #836]	; (1056c <init_eeprom+0x41c>)
   10226:	0010      	movs	r0, r2
   10228:	0019      	movs	r1, r3
   1022a:	230b      	movs	r3, #11
   1022c:	001a      	movs	r2, r3
   1022e:	4bc5      	ldr	r3, [pc, #788]	; (10544 <init_eeprom+0x3f4>)
   10230:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
   10232:	49ca      	ldr	r1, [pc, #808]	; (1055c <init_eeprom+0x40c>)
   10234:	4bc0      	ldr	r3, [pc, #768]	; (10538 <init_eeprom+0x3e8>)
   10236:	2238      	movs	r2, #56	; 0x38
   10238:	0018      	movs	r0, r3
   1023a:	4bc2      	ldr	r3, [pc, #776]	; (10544 <init_eeprom+0x3f4>)
   1023c:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
   1023e:	4bbe      	ldr	r3, [pc, #760]	; (10538 <init_eeprom+0x3e8>)
   10240:	0019      	movs	r1, r3
   10242:	2001      	movs	r0, #1
   10244:	4bc3      	ldr	r3, [pc, #780]	; (10554 <init_eeprom+0x404>)
   10246:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10248:	4bc3      	ldr	r3, [pc, #780]	; (10558 <init_eeprom+0x408>)
   1024a:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
   1024c:	4bba      	ldr	r3, [pc, #744]	; (10538 <init_eeprom+0x3e8>)
   1024e:	0019      	movs	r1, r3
   10250:	2002      	movs	r0, #2
   10252:	4bba      	ldr	r3, [pc, #744]	; (1053c <init_eeprom+0x3ec>)
   10254:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
   10256:	49b8      	ldr	r1, [pc, #736]	; (10538 <init_eeprom+0x3e8>)
   10258:	4bc5      	ldr	r3, [pc, #788]	; (10570 <init_eeprom+0x420>)
   1025a:	2238      	movs	r2, #56	; 0x38
   1025c:	0018      	movs	r0, r3
   1025e:	4bb9      	ldr	r3, [pc, #740]	; (10544 <init_eeprom+0x3f4>)
   10260:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
   10262:	4bc3      	ldr	r3, [pc, #780]	; (10570 <init_eeprom+0x420>)
   10264:	791b      	ldrb	r3, [r3, #4]
   10266:	2b55      	cmp	r3, #85	; 0x55
   10268:	d03c      	beq.n	102e4 <init_eeprom+0x194>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
   1026a:	4bc1      	ldr	r3, [pc, #772]	; (10570 <init_eeprom+0x420>)
   1026c:	2200      	movs	r2, #0
   1026e:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
   10270:	4bbf      	ldr	r3, [pc, #764]	; (10570 <init_eeprom+0x420>)
   10272:	2255      	movs	r2, #85	; 0x55
   10274:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
   10276:	4bbf      	ldr	r3, [pc, #764]	; (10574 <init_eeprom+0x424>)
   10278:	2210      	movs	r2, #16
   1027a:	2100      	movs	r1, #0
   1027c:	0018      	movs	r0, r3
   1027e:	4bb3      	ldr	r3, [pc, #716]	; (1054c <init_eeprom+0x3fc>)
   10280:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
   10282:	4bbb      	ldr	r3, [pc, #748]	; (10570 <init_eeprom+0x420>)
   10284:	2205      	movs	r2, #5
   10286:	49bc      	ldr	r1, [pc, #752]	; (10578 <init_eeprom+0x428>)
   10288:	189b      	adds	r3, r3, r2
   1028a:	2210      	movs	r2, #16
   1028c:	0018      	movs	r0, r3
   1028e:	4bad      	ldr	r3, [pc, #692]	; (10544 <init_eeprom+0x3f4>)
   10290:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
   10292:	4bba      	ldr	r3, [pc, #744]	; (1057c <init_eeprom+0x42c>)
   10294:	2210      	movs	r2, #16
   10296:	2100      	movs	r1, #0
   10298:	0018      	movs	r0, r3
   1029a:	4bac      	ldr	r3, [pc, #688]	; (1054c <init_eeprom+0x3fc>)
   1029c:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
   1029e:	4ab8      	ldr	r2, [pc, #736]	; (10580 <init_eeprom+0x430>)
   102a0:	4bb8      	ldr	r3, [pc, #736]	; (10584 <init_eeprom+0x434>)
   102a2:	0010      	movs	r0, r2
   102a4:	0019      	movs	r1, r3
   102a6:	230a      	movs	r3, #10
   102a8:	001a      	movs	r2, r3
   102aa:	4ba6      	ldr	r3, [pc, #664]	; (10544 <init_eeprom+0x3f4>)
   102ac:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
   102ae:	4bb3      	ldr	r3, [pc, #716]	; (1057c <init_eeprom+0x42c>)
   102b0:	2210      	movs	r2, #16
   102b2:	2100      	movs	r1, #0
   102b4:	0018      	movs	r0, r3
   102b6:	4ba5      	ldr	r3, [pc, #660]	; (1054c <init_eeprom+0x3fc>)
   102b8:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
   102ba:	4ab0      	ldr	r2, [pc, #704]	; (1057c <init_eeprom+0x42c>)
   102bc:	4bb2      	ldr	r3, [pc, #712]	; (10588 <init_eeprom+0x438>)
   102be:	0010      	movs	r0, r2
   102c0:	0019      	movs	r1, r3
   102c2:	230d      	movs	r3, #13
   102c4:	001a      	movs	r2, r3
   102c6:	4b9f      	ldr	r3, [pc, #636]	; (10544 <init_eeprom+0x3f4>)
   102c8:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
   102ca:	49a9      	ldr	r1, [pc, #676]	; (10570 <init_eeprom+0x420>)
   102cc:	4b9a      	ldr	r3, [pc, #616]	; (10538 <init_eeprom+0x3e8>)
   102ce:	2238      	movs	r2, #56	; 0x38
   102d0:	0018      	movs	r0, r3
   102d2:	4b9c      	ldr	r3, [pc, #624]	; (10544 <init_eeprom+0x3f4>)
   102d4:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
   102d6:	4b98      	ldr	r3, [pc, #608]	; (10538 <init_eeprom+0x3e8>)
   102d8:	0019      	movs	r1, r3
   102da:	2002      	movs	r0, #2
   102dc:	4b9d      	ldr	r3, [pc, #628]	; (10554 <init_eeprom+0x404>)
   102de:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   102e0:	4b9d      	ldr	r3, [pc, #628]	; (10558 <init_eeprom+0x408>)
   102e2:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
   102e4:	4b94      	ldr	r3, [pc, #592]	; (10538 <init_eeprom+0x3e8>)
   102e6:	0019      	movs	r1, r3
   102e8:	2008      	movs	r0, #8
   102ea:	4b94      	ldr	r3, [pc, #592]	; (1053c <init_eeprom+0x3ec>)
   102ec:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
   102ee:	4aa7      	ldr	r2, [pc, #668]	; (1058c <init_eeprom+0x43c>)
   102f0:	4b91      	ldr	r3, [pc, #580]	; (10538 <init_eeprom+0x3e8>)
   102f2:	0010      	movs	r0, r2
   102f4:	0019      	movs	r1, r3
   102f6:	2308      	movs	r3, #8
   102f8:	001a      	movs	r2, r3
   102fa:	4b92      	ldr	r3, [pc, #584]	; (10544 <init_eeprom+0x3f4>)
   102fc:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
   102fe:	4ba3      	ldr	r3, [pc, #652]	; (1058c <init_eeprom+0x43c>)
   10300:	781b      	ldrb	r3, [r3, #0]
   10302:	2b55      	cmp	r3, #85	; 0x55
   10304:	d01d      	beq.n	10342 <init_eeprom+0x1f2>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
   10306:	4ba1      	ldr	r3, [pc, #644]	; (1058c <init_eeprom+0x43c>)
   10308:	2255      	movs	r2, #85	; 0x55
   1030a:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
   1030c:	4b9f      	ldr	r3, [pc, #636]	; (1058c <init_eeprom+0x43c>)
   1030e:	220f      	movs	r2, #15
   10310:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
   10312:	4b9e      	ldr	r3, [pc, #632]	; (1058c <init_eeprom+0x43c>)
   10314:	2200      	movs	r2, #0
   10316:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
   10318:	4b9c      	ldr	r3, [pc, #624]	; (1058c <init_eeprom+0x43c>)
   1031a:	2200      	movs	r2, #0
   1031c:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
   1031e:	4b9b      	ldr	r3, [pc, #620]	; (1058c <init_eeprom+0x43c>)
   10320:	2201      	movs	r2, #1
   10322:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10324:	4a84      	ldr	r2, [pc, #528]	; (10538 <init_eeprom+0x3e8>)
   10326:	4b99      	ldr	r3, [pc, #612]	; (1058c <init_eeprom+0x43c>)
   10328:	0010      	movs	r0, r2
   1032a:	0019      	movs	r1, r3
   1032c:	2308      	movs	r3, #8
   1032e:	001a      	movs	r2, r3
   10330:	4b84      	ldr	r3, [pc, #528]	; (10544 <init_eeprom+0x3f4>)
   10332:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10334:	4b80      	ldr	r3, [pc, #512]	; (10538 <init_eeprom+0x3e8>)
   10336:	0019      	movs	r1, r3
   10338:	2008      	movs	r0, #8
   1033a:	4b86      	ldr	r3, [pc, #536]	; (10554 <init_eeprom+0x404>)
   1033c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1033e:	4b86      	ldr	r3, [pc, #536]	; (10558 <init_eeprom+0x408>)
   10340:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
   10342:	4b93      	ldr	r3, [pc, #588]	; (10590 <init_eeprom+0x440>)
   10344:	0019      	movs	r1, r3
   10346:	2003      	movs	r0, #3
   10348:	4b92      	ldr	r3, [pc, #584]	; (10594 <init_eeprom+0x444>)
   1034a:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
   1034c:	4b92      	ldr	r3, [pc, #584]	; (10598 <init_eeprom+0x448>)
   1034e:	0019      	movs	r1, r3
   10350:	2004      	movs	r0, #4
   10352:	4b90      	ldr	r3, [pc, #576]	; (10594 <init_eeprom+0x444>)
   10354:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
   10356:	4b91      	ldr	r3, [pc, #580]	; (1059c <init_eeprom+0x44c>)
   10358:	0019      	movs	r1, r3
   1035a:	2005      	movs	r0, #5
   1035c:	4b8d      	ldr	r3, [pc, #564]	; (10594 <init_eeprom+0x444>)
   1035e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
   10360:	4b8f      	ldr	r3, [pc, #572]	; (105a0 <init_eeprom+0x450>)
   10362:	0019      	movs	r1, r3
   10364:	2006      	movs	r0, #6
   10366:	4b8b      	ldr	r3, [pc, #556]	; (10594 <init_eeprom+0x444>)
   10368:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
   1036a:	4b8e      	ldr	r3, [pc, #568]	; (105a4 <init_eeprom+0x454>)
   1036c:	0019      	movs	r1, r3
   1036e:	2007      	movs	r0, #7
   10370:	4b88      	ldr	r3, [pc, #544]	; (10594 <init_eeprom+0x444>)
   10372:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
   10374:	4b76      	ldr	r3, [pc, #472]	; (10550 <init_eeprom+0x400>)
   10376:	0019      	movs	r1, r3
   10378:	2009      	movs	r0, #9
   1037a:	4b86      	ldr	r3, [pc, #536]	; (10594 <init_eeprom+0x444>)
   1037c:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
   1037e:	4b74      	ldr	r3, [pc, #464]	; (10550 <init_eeprom+0x400>)
   10380:	0019      	movs	r1, r3
   10382:	200a      	movs	r0, #10
   10384:	4b83      	ldr	r3, [pc, #524]	; (10594 <init_eeprom+0x444>)
   10386:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
   10388:	4b71      	ldr	r3, [pc, #452]	; (10550 <init_eeprom+0x400>)
   1038a:	0019      	movs	r1, r3
   1038c:	200b      	movs	r0, #11
   1038e:	4b81      	ldr	r3, [pc, #516]	; (10594 <init_eeprom+0x444>)
   10390:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
   10392:	4b6f      	ldr	r3, [pc, #444]	; (10550 <init_eeprom+0x400>)
   10394:	0019      	movs	r1, r3
   10396:	200c      	movs	r0, #12
   10398:	4b7e      	ldr	r3, [pc, #504]	; (10594 <init_eeprom+0x444>)
   1039a:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
   1039c:	4b6c      	ldr	r3, [pc, #432]	; (10550 <init_eeprom+0x400>)
   1039e:	0019      	movs	r1, r3
   103a0:	200d      	movs	r0, #13
   103a2:	4b7c      	ldr	r3, [pc, #496]	; (10594 <init_eeprom+0x444>)
   103a4:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
   103a6:	4b6a      	ldr	r3, [pc, #424]	; (10550 <init_eeprom+0x400>)
   103a8:	0019      	movs	r1, r3
   103aa:	200e      	movs	r0, #14
   103ac:	4b79      	ldr	r3, [pc, #484]	; (10594 <init_eeprom+0x444>)
   103ae:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
   103b0:	4b67      	ldr	r3, [pc, #412]	; (10550 <init_eeprom+0x400>)
   103b2:	0019      	movs	r1, r3
   103b4:	200f      	movs	r0, #15
   103b6:	4b77      	ldr	r3, [pc, #476]	; (10594 <init_eeprom+0x444>)
   103b8:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
   103ba:	4b65      	ldr	r3, [pc, #404]	; (10550 <init_eeprom+0x400>)
   103bc:	0019      	movs	r1, r3
   103be:	2010      	movs	r0, #16
   103c0:	4b74      	ldr	r3, [pc, #464]	; (10594 <init_eeprom+0x444>)
   103c2:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
   103c4:	4b62      	ldr	r3, [pc, #392]	; (10550 <init_eeprom+0x400>)
   103c6:	0019      	movs	r1, r3
   103c8:	2011      	movs	r0, #17
   103ca:	4b72      	ldr	r3, [pc, #456]	; (10594 <init_eeprom+0x444>)
   103cc:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
   103ce:	4b60      	ldr	r3, [pc, #384]	; (10550 <init_eeprom+0x400>)
   103d0:	0019      	movs	r1, r3
   103d2:	2012      	movs	r0, #18
   103d4:	4b6f      	ldr	r3, [pc, #444]	; (10594 <init_eeprom+0x444>)
   103d6:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
   103d8:	4b5d      	ldr	r3, [pc, #372]	; (10550 <init_eeprom+0x400>)
   103da:	0019      	movs	r1, r3
   103dc:	2013      	movs	r0, #19
   103de:	4b6d      	ldr	r3, [pc, #436]	; (10594 <init_eeprom+0x444>)
   103e0:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
   103e2:	4b5b      	ldr	r3, [pc, #364]	; (10550 <init_eeprom+0x400>)
   103e4:	0019      	movs	r1, r3
   103e6:	2014      	movs	r0, #20
   103e8:	4b6a      	ldr	r3, [pc, #424]	; (10594 <init_eeprom+0x444>)
   103ea:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
   103ec:	4b58      	ldr	r3, [pc, #352]	; (10550 <init_eeprom+0x400>)
   103ee:	0019      	movs	r1, r3
   103f0:	2015      	movs	r0, #21
   103f2:	4b68      	ldr	r3, [pc, #416]	; (10594 <init_eeprom+0x444>)
   103f4:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
   103f6:	4b56      	ldr	r3, [pc, #344]	; (10550 <init_eeprom+0x400>)
   103f8:	0019      	movs	r1, r3
   103fa:	2016      	movs	r0, #22
   103fc:	4b65      	ldr	r3, [pc, #404]	; (10594 <init_eeprom+0x444>)
   103fe:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
   10400:	4b53      	ldr	r3, [pc, #332]	; (10550 <init_eeprom+0x400>)
   10402:	0019      	movs	r1, r3
   10404:	2017      	movs	r0, #23
   10406:	4b63      	ldr	r3, [pc, #396]	; (10594 <init_eeprom+0x444>)
   10408:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1040a:	4b4b      	ldr	r3, [pc, #300]	; (10538 <init_eeprom+0x3e8>)
   1040c:	0019      	movs	r1, r3
   1040e:	2018      	movs	r0, #24
   10410:	4b4a      	ldr	r3, [pc, #296]	; (1053c <init_eeprom+0x3ec>)
   10412:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
   10414:	4a64      	ldr	r2, [pc, #400]	; (105a8 <init_eeprom+0x458>)
   10416:	4b48      	ldr	r3, [pc, #288]	; (10538 <init_eeprom+0x3e8>)
   10418:	0010      	movs	r0, r2
   1041a:	0019      	movs	r1, r3
   1041c:	2318      	movs	r3, #24
   1041e:	001a      	movs	r2, r3
   10420:	4b48      	ldr	r3, [pc, #288]	; (10544 <init_eeprom+0x3f4>)
   10422:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
   10424:	4b60      	ldr	r3, [pc, #384]	; (105a8 <init_eeprom+0x458>)
   10426:	781b      	ldrb	r3, [r3, #0]
   10428:	2b55      	cmp	r3, #85	; 0x55
   1042a:	d025      	beq.n	10478 <init_eeprom+0x328>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
   1042c:	4b5e      	ldr	r3, [pc, #376]	; (105a8 <init_eeprom+0x458>)
   1042e:	2255      	movs	r2, #85	; 0x55
   10430:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
   10432:	4b5d      	ldr	r3, [pc, #372]	; (105a8 <init_eeprom+0x458>)
   10434:	2200      	movs	r2, #0
   10436:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
   10438:	4b5b      	ldr	r3, [pc, #364]	; (105a8 <init_eeprom+0x458>)
   1043a:	2200      	movs	r2, #0
   1043c:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
   1043e:	4b5b      	ldr	r3, [pc, #364]	; (105ac <init_eeprom+0x45c>)
   10440:	2214      	movs	r2, #20
   10442:	2100      	movs	r1, #0
   10444:	0018      	movs	r0, r3
   10446:	4b41      	ldr	r3, [pc, #260]	; (1054c <init_eeprom+0x3fc>)
   10448:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
   1044a:	4a58      	ldr	r2, [pc, #352]	; (105ac <init_eeprom+0x45c>)
   1044c:	4b40      	ldr	r3, [pc, #256]	; (10550 <init_eeprom+0x400>)
   1044e:	0010      	movs	r0, r2
   10450:	0019      	movs	r1, r3
   10452:	230b      	movs	r3, #11
   10454:	001a      	movs	r2, r3
   10456:	4b3b      	ldr	r3, [pc, #236]	; (10544 <init_eeprom+0x3f4>)
   10458:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1045a:	4a37      	ldr	r2, [pc, #220]	; (10538 <init_eeprom+0x3e8>)
   1045c:	4b52      	ldr	r3, [pc, #328]	; (105a8 <init_eeprom+0x458>)
   1045e:	0010      	movs	r0, r2
   10460:	0019      	movs	r1, r3
   10462:	2318      	movs	r3, #24
   10464:	001a      	movs	r2, r3
   10466:	4b37      	ldr	r3, [pc, #220]	; (10544 <init_eeprom+0x3f4>)
   10468:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1046a:	4b33      	ldr	r3, [pc, #204]	; (10538 <init_eeprom+0x3e8>)
   1046c:	0019      	movs	r1, r3
   1046e:	2018      	movs	r0, #24
   10470:	4b38      	ldr	r3, [pc, #224]	; (10554 <init_eeprom+0x404>)
   10472:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10474:	4b38      	ldr	r3, [pc, #224]	; (10558 <init_eeprom+0x408>)
   10476:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
   10478:	4b2f      	ldr	r3, [pc, #188]	; (10538 <init_eeprom+0x3e8>)
   1047a:	0019      	movs	r1, r3
   1047c:	2019      	movs	r0, #25
   1047e:	4b2f      	ldr	r3, [pc, #188]	; (1053c <init_eeprom+0x3ec>)
   10480:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
   10482:	4a4b      	ldr	r2, [pc, #300]	; (105b0 <init_eeprom+0x460>)
   10484:	4b2c      	ldr	r3, [pc, #176]	; (10538 <init_eeprom+0x3e8>)
   10486:	0010      	movs	r0, r2
   10488:	0019      	movs	r1, r3
   1048a:	2330      	movs	r3, #48	; 0x30
   1048c:	001a      	movs	r2, r3
   1048e:	4b2d      	ldr	r3, [pc, #180]	; (10544 <init_eeprom+0x3f4>)
   10490:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
   10492:	4b47      	ldr	r3, [pc, #284]	; (105b0 <init_eeprom+0x460>)
   10494:	781b      	ldrb	r3, [r3, #0]
   10496:	2b55      	cmp	r3, #85	; 0x55
   10498:	d03c      	beq.n	10514 <init_eeprom+0x3c4>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
   1049a:	4b45      	ldr	r3, [pc, #276]	; (105b0 <init_eeprom+0x460>)
   1049c:	2255      	movs	r2, #85	; 0x55
   1049e:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
   104a0:	4b44      	ldr	r3, [pc, #272]	; (105b4 <init_eeprom+0x464>)
   104a2:	2214      	movs	r2, #20
   104a4:	2100      	movs	r1, #0
   104a6:	0018      	movs	r0, r3
   104a8:	4b28      	ldr	r3, [pc, #160]	; (1054c <init_eeprom+0x3fc>)
   104aa:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
   104ac:	4a41      	ldr	r2, [pc, #260]	; (105b4 <init_eeprom+0x464>)
   104ae:	4b28      	ldr	r3, [pc, #160]	; (10550 <init_eeprom+0x400>)
   104b0:	0010      	movs	r0, r2
   104b2:	0019      	movs	r1, r3
   104b4:	230b      	movs	r3, #11
   104b6:	001a      	movs	r2, r3
   104b8:	4b22      	ldr	r3, [pc, #136]	; (10544 <init_eeprom+0x3f4>)
   104ba:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
   104bc:	4b3e      	ldr	r3, [pc, #248]	; (105b8 <init_eeprom+0x468>)
   104be:	2214      	movs	r2, #20
   104c0:	2100      	movs	r1, #0
   104c2:	0018      	movs	r0, r3
   104c4:	4b21      	ldr	r3, [pc, #132]	; (1054c <init_eeprom+0x3fc>)
   104c6:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
   104c8:	4a3b      	ldr	r2, [pc, #236]	; (105b8 <init_eeprom+0x468>)
   104ca:	4b21      	ldr	r3, [pc, #132]	; (10550 <init_eeprom+0x400>)
   104cc:	0010      	movs	r0, r2
   104ce:	0019      	movs	r1, r3
   104d0:	230b      	movs	r3, #11
   104d2:	001a      	movs	r2, r3
   104d4:	4b1b      	ldr	r3, [pc, #108]	; (10544 <init_eeprom+0x3f4>)
   104d6:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
   104d8:	4b35      	ldr	r3, [pc, #212]	; (105b0 <init_eeprom+0x460>)
   104da:	2200      	movs	r2, #0
   104dc:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
   104de:	4b34      	ldr	r3, [pc, #208]	; (105b0 <init_eeprom+0x460>)
   104e0:	2200      	movs	r2, #0
   104e2:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
   104e4:	4b32      	ldr	r3, [pc, #200]	; (105b0 <init_eeprom+0x460>)
   104e6:	2200      	movs	r2, #0
   104e8:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
   104ea:	4b31      	ldr	r3, [pc, #196]	; (105b0 <init_eeprom+0x460>)
   104ec:	2200      	movs	r2, #0
   104ee:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
   104f0:	4b2f      	ldr	r3, [pc, #188]	; (105b0 <init_eeprom+0x460>)
   104f2:	2200      	movs	r2, #0
   104f4:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   104f6:	4a10      	ldr	r2, [pc, #64]	; (10538 <init_eeprom+0x3e8>)
   104f8:	4b2d      	ldr	r3, [pc, #180]	; (105b0 <init_eeprom+0x460>)
   104fa:	0010      	movs	r0, r2
   104fc:	0019      	movs	r1, r3
   104fe:	2330      	movs	r3, #48	; 0x30
   10500:	001a      	movs	r2, r3
   10502:	4b10      	ldr	r3, [pc, #64]	; (10544 <init_eeprom+0x3f4>)
   10504:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10506:	4b0c      	ldr	r3, [pc, #48]	; (10538 <init_eeprom+0x3e8>)
   10508:	0019      	movs	r1, r3
   1050a:	2019      	movs	r0, #25
   1050c:	4b11      	ldr	r3, [pc, #68]	; (10554 <init_eeprom+0x404>)
   1050e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10510:	4b11      	ldr	r3, [pc, #68]	; (10558 <init_eeprom+0x408>)
   10512:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10514:	4b08      	ldr	r3, [pc, #32]	; (10538 <init_eeprom+0x3e8>)
   10516:	0019      	movs	r1, r3
   10518:	201a      	movs	r0, #26
   1051a:	4b08      	ldr	r3, [pc, #32]	; (1053c <init_eeprom+0x3ec>)
   1051c:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
   1051e:	4906      	ldr	r1, [pc, #24]	; (10538 <init_eeprom+0x3e8>)
   10520:	4b26      	ldr	r3, [pc, #152]	; (105bc <init_eeprom+0x46c>)
   10522:	2230      	movs	r2, #48	; 0x30
   10524:	0018      	movs	r0, r3
   10526:	4b07      	ldr	r3, [pc, #28]	; (10544 <init_eeprom+0x3f4>)
   10528:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   1052a:	4b24      	ldr	r3, [pc, #144]	; (105bc <init_eeprom+0x46c>)
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	b2db      	uxtb	r3, r3
   10530:	e046      	b.n	105c0 <init_eeprom+0x470>
   10532:	46c0      	nop			; (mov r8, r8)
   10534:	00010115 	.word	0x00010115
   10538:	20000784 	.word	0x20000784
   1053c:	0002435d 	.word	0x0002435d
   10540:	200007f8 	.word	0x200007f8
   10544:	00029621 	.word	0x00029621
   10548:	20000804 	.word	0x20000804
   1054c:	00029657 	.word	0x00029657
   10550:	0002a258 	.word	0x0002a258
   10554:	00024251 	.word	0x00024251
   10558:	000243f9 	.word	0x000243f9
   1055c:	2000071c 	.word	0x2000071c
   10560:	20000721 	.word	0x20000721
   10564:	0002a264 	.word	0x0002a264
   10568:	2000073f 	.word	0x2000073f
   1056c:	0002a274 	.word	0x0002a274
   10570:	200007c0 	.word	0x200007c0
   10574:	200007c5 	.word	0x200007c5
   10578:	0002a280 	.word	0x0002a280
   1057c:	200007e5 	.word	0x200007e5
   10580:	200007d5 	.word	0x200007d5
   10584:	0002a290 	.word	0x0002a290
   10588:	0002a29c 	.word	0x0002a29c
   1058c:	20000814 	.word	0x20000814
   10590:	0002a2ac 	.word	0x0002a2ac
   10594:	0001072d 	.word	0x0001072d
   10598:	0002a2b8 	.word	0x0002a2b8
   1059c:	0002a2c4 	.word	0x0002a2c4
   105a0:	0002a2d0 	.word	0x0002a2d0
   105a4:	0002a2dc 	.word	0x0002a2dc
   105a8:	2000083c 	.word	0x2000083c
   105ac:	20000840 	.word	0x20000840
   105b0:	20000754 	.word	0x20000754
   105b4:	2000075c 	.word	0x2000075c
   105b8:	20000770 	.word	0x20000770
   105bc:	20000854 	.word	0x20000854
   105c0:	2b55      	cmp	r3, #85	; 0x55
   105c2:	d065      	beq.n	10690 <init_eeprom+0x540>
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
   105c4:	4b51      	ldr	r3, [pc, #324]	; (1070c <init_eeprom+0x5bc>)
   105c6:	2255      	movs	r2, #85	; 0x55
   105c8:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
   105ca:	4b50      	ldr	r3, [pc, #320]	; (1070c <init_eeprom+0x5bc>)
   105cc:	2200      	movs	r2, #0
   105ce:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
   105d0:	4b4e      	ldr	r3, [pc, #312]	; (1070c <init_eeprom+0x5bc>)
   105d2:	2232      	movs	r2, #50	; 0x32
   105d4:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
   105d6:	4b4d      	ldr	r3, [pc, #308]	; (1070c <init_eeprom+0x5bc>)
   105d8:	224f      	movs	r2, #79	; 0x4f
   105da:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
   105dc:	4b4b      	ldr	r3, [pc, #300]	; (1070c <init_eeprom+0x5bc>)
   105de:	2254      	movs	r2, #84	; 0x54
   105e0:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
   105e2:	4b4a      	ldr	r3, [pc, #296]	; (1070c <init_eeprom+0x5bc>)
   105e4:	2202      	movs	r2, #2
   105e6:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
   105e8:	4b48      	ldr	r3, [pc, #288]	; (1070c <init_eeprom+0x5bc>)
   105ea:	2200      	movs	r2, #0
   105ec:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
   105ee:	4b47      	ldr	r3, [pc, #284]	; (1070c <init_eeprom+0x5bc>)
   105f0:	2200      	movs	r2, #0
   105f2:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
   105f4:	4b45      	ldr	r3, [pc, #276]	; (1070c <init_eeprom+0x5bc>)
   105f6:	2200      	movs	r2, #0
   105f8:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
   105fa:	4b44      	ldr	r3, [pc, #272]	; (1070c <init_eeprom+0x5bc>)
   105fc:	2200      	movs	r2, #0
   105fe:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
   10600:	4b42      	ldr	r3, [pc, #264]	; (1070c <init_eeprom+0x5bc>)
   10602:	2200      	movs	r2, #0
   10604:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
   10606:	4b41      	ldr	r3, [pc, #260]	; (1070c <init_eeprom+0x5bc>)
   10608:	2200      	movs	r2, #0
   1060a:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
   1060c:	4b3f      	ldr	r3, [pc, #252]	; (1070c <init_eeprom+0x5bc>)
   1060e:	2200      	movs	r2, #0
   10610:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
   10612:	4b3e      	ldr	r3, [pc, #248]	; (1070c <init_eeprom+0x5bc>)
   10614:	2200      	movs	r2, #0
   10616:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
   10618:	4b3c      	ldr	r3, [pc, #240]	; (1070c <init_eeprom+0x5bc>)
   1061a:	2200      	movs	r2, #0
   1061c:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
   1061e:	4b3b      	ldr	r3, [pc, #236]	; (1070c <init_eeprom+0x5bc>)
   10620:	2200      	movs	r2, #0
   10622:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
   10624:	4b39      	ldr	r3, [pc, #228]	; (1070c <init_eeprom+0x5bc>)
   10626:	2200      	movs	r2, #0
   10628:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
   1062a:	4b38      	ldr	r3, [pc, #224]	; (1070c <init_eeprom+0x5bc>)
   1062c:	2255      	movs	r2, #85	; 0x55
   1062e:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
   10630:	4b36      	ldr	r3, [pc, #216]	; (1070c <init_eeprom+0x5bc>)
   10632:	2278      	movs	r2, #120	; 0x78
   10634:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
   10636:	4b35      	ldr	r3, [pc, #212]	; (1070c <init_eeprom+0x5bc>)
   10638:	2200      	movs	r2, #0
   1063a:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
   1063c:	4b33      	ldr	r3, [pc, #204]	; (1070c <init_eeprom+0x5bc>)
   1063e:	2200      	movs	r2, #0
   10640:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
   10642:	4b32      	ldr	r3, [pc, #200]	; (1070c <init_eeprom+0x5bc>)
   10644:	2220      	movs	r2, #32
   10646:	2101      	movs	r1, #1
   10648:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
   1064a:	4b30      	ldr	r3, [pc, #192]	; (1070c <init_eeprom+0x5bc>)
   1064c:	2250      	movs	r2, #80	; 0x50
   1064e:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
   10650:	4b2e      	ldr	r3, [pc, #184]	; (1070c <init_eeprom+0x5bc>)
   10652:	2224      	movs	r2, #36	; 0x24
   10654:	2101      	movs	r1, #1
   10656:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_ON;
   10658:	4b2c      	ldr	r3, [pc, #176]	; (1070c <init_eeprom+0x5bc>)
   1065a:	2225      	movs	r2, #37	; 0x25
   1065c:	2102      	movs	r1, #2
   1065e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.over_under_DetectionMethod	= MOTOR_UNDEROVER_DETECTION_CURRENT;
   10660:	4b2a      	ldr	r3, [pc, #168]	; (1070c <init_eeprom+0x5bc>)
   10662:	2226      	movs	r2, #38	; 0x26
   10664:	2102      	movs	r1, #2
   10666:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypass			= MOTOR_VOLTAGE_BYPASS_OFF;
   10668:	4b28      	ldr	r3, [pc, #160]	; (1070c <init_eeprom+0x5bc>)
   1066a:	2227      	movs	r2, #39	; 0x27
   1066c:	2100      	movs	r1, #0
   1066e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.motorVoltageBypassTime		= 10000L;
   10670:	4b26      	ldr	r3, [pc, #152]	; (1070c <init_eeprom+0x5bc>)
   10672:	4a27      	ldr	r2, [pc, #156]	; (10710 <init_eeprom+0x5c0>)
   10674:	629a      	str	r2, [r3, #40]	; 0x28

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   10676:	4925      	ldr	r1, [pc, #148]	; (1070c <init_eeprom+0x5bc>)
   10678:	4b26      	ldr	r3, [pc, #152]	; (10714 <init_eeprom+0x5c4>)
   1067a:	2230      	movs	r2, #48	; 0x30
   1067c:	0018      	movs	r0, r3
   1067e:	4b26      	ldr	r3, [pc, #152]	; (10718 <init_eeprom+0x5c8>)
   10680:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   10682:	4b24      	ldr	r3, [pc, #144]	; (10714 <init_eeprom+0x5c4>)
   10684:	0019      	movs	r1, r3
   10686:	201a      	movs	r0, #26
   10688:	4b24      	ldr	r3, [pc, #144]	; (1071c <init_eeprom+0x5cc>)
   1068a:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   1068c:	4b24      	ldr	r3, [pc, #144]	; (10720 <init_eeprom+0x5d0>)
   1068e:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   10690:	4b20      	ldr	r3, [pc, #128]	; (10714 <init_eeprom+0x5c4>)
   10692:	0019      	movs	r1, r3
   10694:	201b      	movs	r0, #27
   10696:	4b23      	ldr	r3, [pc, #140]	; (10724 <init_eeprom+0x5d4>)
   10698:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
   1069a:	491e      	ldr	r1, [pc, #120]	; (10714 <init_eeprom+0x5c4>)
   1069c:	4b22      	ldr	r3, [pc, #136]	; (10728 <init_eeprom+0x5d8>)
   1069e:	2210      	movs	r2, #16
   106a0:	0018      	movs	r0, r3
   106a2:	4b1d      	ldr	r3, [pc, #116]	; (10718 <init_eeprom+0x5c8>)
   106a4:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
   106a6:	4b20      	ldr	r3, [pc, #128]	; (10728 <init_eeprom+0x5d8>)
   106a8:	781b      	ldrb	r3, [r3, #0]
   106aa:	2b55      	cmp	r3, #85	; 0x55
   106ac:	d02a      	beq.n	10704 <init_eeprom+0x5b4>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
   106ae:	4b1e      	ldr	r3, [pc, #120]	; (10728 <init_eeprom+0x5d8>)
   106b0:	2255      	movs	r2, #85	; 0x55
   106b2:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
   106b4:	4b1c      	ldr	r3, [pc, #112]	; (10728 <init_eeprom+0x5d8>)
   106b6:	2201      	movs	r2, #1
   106b8:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
   106ba:	4b1b      	ldr	r3, [pc, #108]	; (10728 <init_eeprom+0x5d8>)
   106bc:	2201      	movs	r2, #1
   106be:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
   106c0:	4b19      	ldr	r3, [pc, #100]	; (10728 <init_eeprom+0x5d8>)
   106c2:	2200      	movs	r2, #0
   106c4:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
   106c6:	4b18      	ldr	r3, [pc, #96]	; (10728 <init_eeprom+0x5d8>)
   106c8:	2200      	movs	r2, #0
   106ca:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
   106cc:	4b16      	ldr	r3, [pc, #88]	; (10728 <init_eeprom+0x5d8>)
   106ce:	2200      	movs	r2, #0
   106d0:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
   106d2:	4b15      	ldr	r3, [pc, #84]	; (10728 <init_eeprom+0x5d8>)
   106d4:	2200      	movs	r2, #0
   106d6:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
   106d8:	4b13      	ldr	r3, [pc, #76]	; (10728 <init_eeprom+0x5d8>)
   106da:	2200      	movs	r2, #0
   106dc:	71da      	strb	r2, [r3, #7]
		
		factory_settings_parameter_struct.DeviceId_ee				= 0;
   106de:	4b12      	ldr	r3, [pc, #72]	; (10728 <init_eeprom+0x5d8>)
   106e0:	2200      	movs	r2, #0
   106e2:	609a      	str	r2, [r3, #8]
		factory_settings_parameter_struct.dateCode					= 0;
   106e4:	4b10      	ldr	r3, [pc, #64]	; (10728 <init_eeprom+0x5d8>)
   106e6:	2200      	movs	r2, #0
   106e8:	60da      	str	r2, [r3, #12]

		//memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
		//strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
   106ea:	490f      	ldr	r1, [pc, #60]	; (10728 <init_eeprom+0x5d8>)
   106ec:	4b09      	ldr	r3, [pc, #36]	; (10714 <init_eeprom+0x5c4>)
   106ee:	2210      	movs	r2, #16
   106f0:	0018      	movs	r0, r3
   106f2:	4b09      	ldr	r3, [pc, #36]	; (10718 <init_eeprom+0x5c8>)
   106f4:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
   106f6:	4b07      	ldr	r3, [pc, #28]	; (10714 <init_eeprom+0x5c4>)
   106f8:	0019      	movs	r1, r3
   106fa:	201b      	movs	r0, #27
   106fc:	4b07      	ldr	r3, [pc, #28]	; (1071c <init_eeprom+0x5cc>)
   106fe:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   10700:	4b07      	ldr	r3, [pc, #28]	; (10720 <init_eeprom+0x5d0>)
   10702:	4798      	blx	r3
	}
}
   10704:	46c0      	nop			; (mov r8, r8)
   10706:	46bd      	mov	sp, r7
   10708:	bd80      	pop	{r7, pc}
   1070a:	46c0      	nop			; (mov r8, r8)
   1070c:	20000854 	.word	0x20000854
   10710:	00002710 	.word	0x00002710
   10714:	20000784 	.word	0x20000784
   10718:	00029621 	.word	0x00029621
   1071c:	00024251 	.word	0x00024251
   10720:	000243f9 	.word	0x000243f9
   10724:	0002435d 	.word	0x0002435d
   10728:	2000082c 	.word	0x2000082c

0001072c <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
   1072c:	b580      	push	{r7, lr}
   1072e:	b088      	sub	sp, #32
   10730:	af00      	add	r7, sp, #0
   10732:	0002      	movs	r2, r0
   10734:	6039      	str	r1, [r7, #0]
   10736:	1dfb      	adds	r3, r7, #7
   10738:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
   1073a:	4b28      	ldr	r3, [pc, #160]	; (107dc <config_mobile_no_ee+0xb0>)
   1073c:	223c      	movs	r2, #60	; 0x3c
   1073e:	2100      	movs	r1, #0
   10740:	0018      	movs	r0, r3
   10742:	4b27      	ldr	r3, [pc, #156]	; (107e0 <config_mobile_no_ee+0xb4>)
   10744:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
   10746:	4a25      	ldr	r2, [pc, #148]	; (107dc <config_mobile_no_ee+0xb0>)
   10748:	1dfb      	adds	r3, r7, #7
   1074a:	781b      	ldrb	r3, [r3, #0]
   1074c:	0011      	movs	r1, r2
   1074e:	0018      	movs	r0, r3
   10750:	4b24      	ldr	r3, [pc, #144]	; (107e4 <config_mobile_no_ee+0xb8>)
   10752:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10754:	2308      	movs	r3, #8
   10756:	18fa      	adds	r2, r7, r3
   10758:	4b20      	ldr	r3, [pc, #128]	; (107dc <config_mobile_no_ee+0xb0>)
   1075a:	0010      	movs	r0, r2
   1075c:	0019      	movs	r1, r3
   1075e:	2318      	movs	r3, #24
   10760:	001a      	movs	r2, r3
   10762:	4b21      	ldr	r3, [pc, #132]	; (107e8 <config_mobile_no_ee+0xbc>)
   10764:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
   10766:	2308      	movs	r3, #8
   10768:	18fb      	adds	r3, r7, r3
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	2b55      	cmp	r3, #85	; 0x55
   1076e:	d031      	beq.n	107d4 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
   10770:	2308      	movs	r3, #8
   10772:	18fb      	adds	r3, r7, r3
   10774:	2255      	movs	r2, #85	; 0x55
   10776:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
   10778:	2308      	movs	r3, #8
   1077a:	18fb      	adds	r3, r7, r3
   1077c:	2200      	movs	r2, #0
   1077e:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
   10780:	2308      	movs	r3, #8
   10782:	18fb      	adds	r3, r7, r3
   10784:	2200      	movs	r2, #0
   10786:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
   10788:	2308      	movs	r3, #8
   1078a:	18fb      	adds	r3, r7, r3
   1078c:	2200      	movs	r2, #0
   1078e:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10790:	2308      	movs	r3, #8
   10792:	18fb      	adds	r3, r7, r3
   10794:	3304      	adds	r3, #4
   10796:	2214      	movs	r2, #20
   10798:	2100      	movs	r1, #0
   1079a:	0018      	movs	r0, r3
   1079c:	4b10      	ldr	r3, [pc, #64]	; (107e0 <config_mobile_no_ee+0xb4>)
   1079e:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
   107a0:	683a      	ldr	r2, [r7, #0]
   107a2:	2308      	movs	r3, #8
   107a4:	18fb      	adds	r3, r7, r3
   107a6:	3304      	adds	r3, #4
   107a8:	0011      	movs	r1, r2
   107aa:	0018      	movs	r0, r3
   107ac:	4b0f      	ldr	r3, [pc, #60]	; (107ec <config_mobile_no_ee+0xc0>)
   107ae:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
   107b0:	4a0a      	ldr	r2, [pc, #40]	; (107dc <config_mobile_no_ee+0xb0>)
   107b2:	2308      	movs	r3, #8
   107b4:	18fb      	adds	r3, r7, r3
   107b6:	0010      	movs	r0, r2
   107b8:	0019      	movs	r1, r3
   107ba:	2318      	movs	r3, #24
   107bc:	001a      	movs	r2, r3
   107be:	4b0a      	ldr	r3, [pc, #40]	; (107e8 <config_mobile_no_ee+0xbc>)
   107c0:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
   107c2:	4a06      	ldr	r2, [pc, #24]	; (107dc <config_mobile_no_ee+0xb0>)
   107c4:	1dfb      	adds	r3, r7, #7
   107c6:	781b      	ldrb	r3, [r3, #0]
   107c8:	0011      	movs	r1, r2
   107ca:	0018      	movs	r0, r3
   107cc:	4b08      	ldr	r3, [pc, #32]	; (107f0 <config_mobile_no_ee+0xc4>)
   107ce:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   107d0:	4b08      	ldr	r3, [pc, #32]	; (107f4 <config_mobile_no_ee+0xc8>)
   107d2:	4798      	blx	r3
	}
}
   107d4:	46c0      	nop			; (mov r8, r8)
   107d6:	46bd      	mov	sp, r7
   107d8:	b008      	add	sp, #32
   107da:	bd80      	pop	{r7, pc}
   107dc:	20000784 	.word	0x20000784
   107e0:	00029657 	.word	0x00029657
   107e4:	0002435d 	.word	0x0002435d
   107e8:	00029621 	.word	0x00029621
   107ec:	000298d7 	.word	0x000298d7
   107f0:	00024251 	.word	0x00024251
   107f4:	000243f9 	.word	0x000243f9

000107f8 <getNumbers>:


void getNumbers(char *string)
{
   107f8:	b580      	push	{r7, lr}
   107fa:	b08a      	sub	sp, #40	; 0x28
   107fc:	af00      	add	r7, sp, #0
   107fe:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
   10800:	687b      	ldr	r3, [r7, #4]
   10802:	2200      	movs	r2, #0
   10804:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10806:	2327      	movs	r3, #39	; 0x27
   10808:	18fb      	adds	r3, r7, r3
   1080a:	2200      	movs	r2, #0
   1080c:	701a      	strb	r2, [r3, #0]
   1080e:	e063      	b.n	108d8 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10810:	4b37      	ldr	r3, [pc, #220]	; (108f0 <getNumbers+0xf8>)
   10812:	223c      	movs	r2, #60	; 0x3c
   10814:	2100      	movs	r1, #0
   10816:	0018      	movs	r0, r3
   10818:	4b36      	ldr	r3, [pc, #216]	; (108f4 <getNumbers+0xfc>)
   1081a:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   1081c:	2327      	movs	r3, #39	; 0x27
   1081e:	18fb      	adds	r3, r7, r3
   10820:	781b      	ldrb	r3, [r3, #0]
   10822:	3309      	adds	r3, #9
   10824:	b2db      	uxtb	r3, r3
   10826:	4a32      	ldr	r2, [pc, #200]	; (108f0 <getNumbers+0xf8>)
   10828:	0011      	movs	r1, r2
   1082a:	0018      	movs	r0, r3
   1082c:	4b32      	ldr	r3, [pc, #200]	; (108f8 <getNumbers+0x100>)
   1082e:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10830:	230c      	movs	r3, #12
   10832:	18fa      	adds	r2, r7, r3
   10834:	4b2e      	ldr	r3, [pc, #184]	; (108f0 <getNumbers+0xf8>)
   10836:	0010      	movs	r0, r2
   10838:	0019      	movs	r1, r3
   1083a:	2318      	movs	r3, #24
   1083c:	001a      	movs	r2, r3
   1083e:	4b2f      	ldr	r3, [pc, #188]	; (108fc <getNumbers+0x104>)
   10840:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
   10842:	4b2f      	ldr	r3, [pc, #188]	; (10900 <getNumbers+0x108>)
   10844:	78db      	ldrb	r3, [r3, #3]
   10846:	2227      	movs	r2, #39	; 0x27
   10848:	18ba      	adds	r2, r7, r2
   1084a:	7812      	ldrb	r2, [r2, #0]
   1084c:	429a      	cmp	r2, r3
   1084e:	d10f      	bne.n	10870 <getNumbers+0x78>
		{
			strcat(string,"P:");
   10850:	687b      	ldr	r3, [r7, #4]
   10852:	0018      	movs	r0, r3
   10854:	4b2b      	ldr	r3, [pc, #172]	; (10904 <getNumbers+0x10c>)
   10856:	4798      	blx	r3
   10858:	0003      	movs	r3, r0
   1085a:	001a      	movs	r2, r3
   1085c:	687b      	ldr	r3, [r7, #4]
   1085e:	189a      	adds	r2, r3, r2
   10860:	4b29      	ldr	r3, [pc, #164]	; (10908 <getNumbers+0x110>)
   10862:	0010      	movs	r0, r2
   10864:	0019      	movs	r1, r3
   10866:	2303      	movs	r3, #3
   10868:	001a      	movs	r2, r3
   1086a:	4b24      	ldr	r3, [pc, #144]	; (108fc <getNumbers+0x104>)
   1086c:	4798      	blx	r3
   1086e:	e015      	b.n	1089c <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
   10870:	4b23      	ldr	r3, [pc, #140]	; (10900 <getNumbers+0x108>)
   10872:	791b      	ldrb	r3, [r3, #4]
   10874:	2227      	movs	r2, #39	; 0x27
   10876:	18ba      	adds	r2, r7, r2
   10878:	7812      	ldrb	r2, [r2, #0]
   1087a:	429a      	cmp	r2, r3
   1087c:	d10e      	bne.n	1089c <getNumbers+0xa4>
		{
			strcat(string,"S:");
   1087e:	687b      	ldr	r3, [r7, #4]
   10880:	0018      	movs	r0, r3
   10882:	4b20      	ldr	r3, [pc, #128]	; (10904 <getNumbers+0x10c>)
   10884:	4798      	blx	r3
   10886:	0003      	movs	r3, r0
   10888:	001a      	movs	r2, r3
   1088a:	687b      	ldr	r3, [r7, #4]
   1088c:	189a      	adds	r2, r3, r2
   1088e:	4b1f      	ldr	r3, [pc, #124]	; (1090c <getNumbers+0x114>)
   10890:	0010      	movs	r0, r2
   10892:	0019      	movs	r1, r3
   10894:	2303      	movs	r3, #3
   10896:	001a      	movs	r2, r3
   10898:	4b18      	ldr	r3, [pc, #96]	; (108fc <getNumbers+0x104>)
   1089a:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
   1089c:	230c      	movs	r3, #12
   1089e:	18fb      	adds	r3, r7, r3
   108a0:	1d1a      	adds	r2, r3, #4
   108a2:	687b      	ldr	r3, [r7, #4]
   108a4:	0011      	movs	r1, r2
   108a6:	0018      	movs	r0, r3
   108a8:	4b19      	ldr	r3, [pc, #100]	; (10910 <getNumbers+0x118>)
   108aa:	4798      	blx	r3
		strcat(string,"\n");
   108ac:	687b      	ldr	r3, [r7, #4]
   108ae:	0018      	movs	r0, r3
   108b0:	4b14      	ldr	r3, [pc, #80]	; (10904 <getNumbers+0x10c>)
   108b2:	4798      	blx	r3
   108b4:	0003      	movs	r3, r0
   108b6:	001a      	movs	r2, r3
   108b8:	687b      	ldr	r3, [r7, #4]
   108ba:	189a      	adds	r2, r3, r2
   108bc:	4b15      	ldr	r3, [pc, #84]	; (10914 <getNumbers+0x11c>)
   108be:	0010      	movs	r0, r2
   108c0:	0019      	movs	r1, r3
   108c2:	2302      	movs	r3, #2
   108c4:	001a      	movs	r2, r3
   108c6:	4b0d      	ldr	r3, [pc, #52]	; (108fc <getNumbers+0x104>)
   108c8:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   108ca:	2327      	movs	r3, #39	; 0x27
   108cc:	18fb      	adds	r3, r7, r3
   108ce:	781a      	ldrb	r2, [r3, #0]
   108d0:	2327      	movs	r3, #39	; 0x27
   108d2:	18fb      	adds	r3, r7, r3
   108d4:	3201      	adds	r2, #1
   108d6:	701a      	strb	r2, [r3, #0]
   108d8:	4b09      	ldr	r3, [pc, #36]	; (10900 <getNumbers+0x108>)
   108da:	789b      	ldrb	r3, [r3, #2]
   108dc:	2227      	movs	r2, #39	; 0x27
   108de:	18ba      	adds	r2, r7, r2
   108e0:	7812      	ldrb	r2, [r2, #0]
   108e2:	429a      	cmp	r2, r3
   108e4:	d394      	bcc.n	10810 <getNumbers+0x18>
	}
}
   108e6:	46c0      	nop			; (mov r8, r8)
   108e8:	46bd      	mov	sp, r7
   108ea:	b00a      	add	sp, #40	; 0x28
   108ec:	bd80      	pop	{r7, pc}
   108ee:	46c0      	nop			; (mov r8, r8)
   108f0:	20000784 	.word	0x20000784
   108f4:	00029657 	.word	0x00029657
   108f8:	0002435d 	.word	0x0002435d
   108fc:	00029621 	.word	0x00029621
   10900:	20000814 	.word	0x20000814
   10904:	000298e7 	.word	0x000298e7
   10908:	0002a2e8 	.word	0x0002a2e8
   1090c:	0002a2ec 	.word	0x0002a2ec
   10910:	000298a1 	.word	0x000298a1
   10914:	0002a2f0 	.word	0x0002a2f0

00010918 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
   10918:	b580      	push	{r7, lr}
   1091a:	b088      	sub	sp, #32
   1091c:	af00      	add	r7, sp, #0
   1091e:	6078      	str	r0, [r7, #4]
   10920:	000a      	movs	r2, r1
   10922:	1cfb      	adds	r3, r7, #3
   10924:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
   10926:	687b      	ldr	r3, [r7, #4]
   10928:	2200      	movs	r2, #0
   1092a:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
   1092c:	4b15      	ldr	r3, [pc, #84]	; (10984 <getIndexedNumber+0x6c>)
   1092e:	789b      	ldrb	r3, [r3, #2]
   10930:	1cfa      	adds	r2, r7, #3
   10932:	7812      	ldrb	r2, [r2, #0]
   10934:	429a      	cmp	r2, r3
   10936:	d21f      	bcs.n	10978 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10938:	4b13      	ldr	r3, [pc, #76]	; (10988 <getIndexedNumber+0x70>)
   1093a:	223c      	movs	r2, #60	; 0x3c
   1093c:	2100      	movs	r1, #0
   1093e:	0018      	movs	r0, r3
   10940:	4b12      	ldr	r3, [pc, #72]	; (1098c <getIndexedNumber+0x74>)
   10942:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
   10944:	1cfb      	adds	r3, r7, #3
   10946:	781b      	ldrb	r3, [r3, #0]
   10948:	3309      	adds	r3, #9
   1094a:	b2db      	uxtb	r3, r3
   1094c:	4a0e      	ldr	r2, [pc, #56]	; (10988 <getIndexedNumber+0x70>)
   1094e:	0011      	movs	r1, r2
   10950:	0018      	movs	r0, r3
   10952:	4b0f      	ldr	r3, [pc, #60]	; (10990 <getIndexedNumber+0x78>)
   10954:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10956:	2308      	movs	r3, #8
   10958:	18fa      	adds	r2, r7, r3
   1095a:	4b0b      	ldr	r3, [pc, #44]	; (10988 <getIndexedNumber+0x70>)
   1095c:	0010      	movs	r0, r2
   1095e:	0019      	movs	r1, r3
   10960:	2318      	movs	r3, #24
   10962:	001a      	movs	r2, r3
   10964:	4b0b      	ldr	r3, [pc, #44]	; (10994 <getIndexedNumber+0x7c>)
   10966:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
   10968:	2308      	movs	r3, #8
   1096a:	18fb      	adds	r3, r7, r3
   1096c:	1d1a      	adds	r2, r3, #4
   1096e:	687b      	ldr	r3, [r7, #4]
   10970:	0011      	movs	r1, r2
   10972:	0018      	movs	r0, r3
   10974:	4b08      	ldr	r3, [pc, #32]	; (10998 <getIndexedNumber+0x80>)
   10976:	4798      	blx	r3
	}
	return IndexNo;
   10978:	687b      	ldr	r3, [r7, #4]
}
   1097a:	0018      	movs	r0, r3
   1097c:	46bd      	mov	sp, r7
   1097e:	b008      	add	sp, #32
   10980:	bd80      	pop	{r7, pc}
   10982:	46c0      	nop			; (mov r8, r8)
   10984:	20000814 	.word	0x20000814
   10988:	20000784 	.word	0x20000784
   1098c:	00029657 	.word	0x00029657
   10990:	0002435d 	.word	0x0002435d
   10994:	00029621 	.word	0x00029621
   10998:	000298a1 	.word	0x000298a1

0001099c <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
   1099c:	b580      	push	{r7, lr}
   1099e:	b088      	sub	sp, #32
   109a0:	af00      	add	r7, sp, #0
   109a2:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   109a4:	4b14      	ldr	r3, [pc, #80]	; (109f8 <isPrimaryNumber+0x5c>)
   109a6:	789b      	ldrb	r3, [r3, #2]
   109a8:	2b00      	cmp	r3, #0
   109aa:	d020      	beq.n	109ee <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
   109ac:	230c      	movs	r3, #12
   109ae:	18fb      	adds	r3, r7, r3
   109b0:	0018      	movs	r0, r3
   109b2:	2314      	movs	r3, #20
   109b4:	001a      	movs	r2, r3
   109b6:	2100      	movs	r1, #0
   109b8:	4b10      	ldr	r3, [pc, #64]	; (109fc <isPrimaryNumber+0x60>)
   109ba:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
   109bc:	4b0e      	ldr	r3, [pc, #56]	; (109f8 <isPrimaryNumber+0x5c>)
   109be:	78da      	ldrb	r2, [r3, #3]
   109c0:	230c      	movs	r3, #12
   109c2:	18fb      	adds	r3, r7, r3
   109c4:	0011      	movs	r1, r2
   109c6:	0018      	movs	r0, r3
   109c8:	4b0d      	ldr	r3, [pc, #52]	; (10a00 <isPrimaryNumber+0x64>)
   109ca:	4798      	blx	r3
		if(strstr(number,primaryNumber))
   109cc:	230c      	movs	r3, #12
   109ce:	18fa      	adds	r2, r7, r3
   109d0:	687b      	ldr	r3, [r7, #4]
   109d2:	0011      	movs	r1, r2
   109d4:	0018      	movs	r0, r3
   109d6:	4b0b      	ldr	r3, [pc, #44]	; (10a04 <isPrimaryNumber+0x68>)
   109d8:	4798      	blx	r3
   109da:	1e03      	subs	r3, r0, #0
   109dc:	d001      	beq.n	109e2 <isPrimaryNumber+0x46>
		{
			return true;
   109de:	2301      	movs	r3, #1
   109e0:	e006      	b.n	109f0 <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
   109e2:	687b      	ldr	r3, [r7, #4]
   109e4:	0018      	movs	r0, r3
   109e6:	4b08      	ldr	r3, [pc, #32]	; (10a08 <isPrimaryNumber+0x6c>)
   109e8:	4798      	blx	r3
   109ea:	0003      	movs	r3, r0
   109ec:	e000      	b.n	109f0 <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
   109ee:	2300      	movs	r3, #0
}
   109f0:	0018      	movs	r0, r3
   109f2:	46bd      	mov	sp, r7
   109f4:	b008      	add	sp, #32
   109f6:	bd80      	pop	{r7, pc}
   109f8:	20000814 	.word	0x20000814
   109fc:	00029657 	.word	0x00029657
   10a00:	00010919 	.word	0x00010919
   10a04:	00029917 	.word	0x00029917
   10a08:	00010a0d 	.word	0x00010a0d

00010a0c <isAlterNumber>:

bool isAlterNumber(char *number)
{
   10a0c:	b580      	push	{r7, lr}
   10a0e:	b082      	sub	sp, #8
   10a10:	af00      	add	r7, sp, #0
   10a12:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
   10a14:	4b0b      	ldr	r3, [pc, #44]	; (10a44 <isAlterNumber+0x38>)
   10a16:	789b      	ldrb	r3, [r3, #2]
   10a18:	2b00      	cmp	r3, #0
   10a1a:	d00d      	beq.n	10a38 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
   10a1c:	4b0a      	ldr	r3, [pc, #40]	; (10a48 <isAlterNumber+0x3c>)
   10a1e:	789b      	ldrb	r3, [r3, #2]
   10a20:	2b00      	cmp	r3, #0
   10a22:	d009      	beq.n	10a38 <isAlterNumber+0x2c>
   10a24:	4a09      	ldr	r2, [pc, #36]	; (10a4c <isAlterNumber+0x40>)
   10a26:	687b      	ldr	r3, [r7, #4]
   10a28:	0011      	movs	r1, r2
   10a2a:	0018      	movs	r0, r3
   10a2c:	4b08      	ldr	r3, [pc, #32]	; (10a50 <isAlterNumber+0x44>)
   10a2e:	4798      	blx	r3
   10a30:	1e03      	subs	r3, r0, #0
   10a32:	d001      	beq.n	10a38 <isAlterNumber+0x2c>
		{
			return true;
   10a34:	2301      	movs	r3, #1
   10a36:	e000      	b.n	10a3a <isAlterNumber+0x2e>
		}
	}
	return false;
   10a38:	2300      	movs	r3, #0
}
   10a3a:	0018      	movs	r0, r3
   10a3c:	46bd      	mov	sp, r7
   10a3e:	b002      	add	sp, #8
   10a40:	bd80      	pop	{r7, pc}
   10a42:	46c0      	nop			; (mov r8, r8)
   10a44:	20000814 	.word	0x20000814
   10a48:	2000083c 	.word	0x2000083c
   10a4c:	20000840 	.word	0x20000840
   10a50:	00029917 	.word	0x00029917

00010a54 <isM2MNumber>:

bool isM2MNumber(char *number)
{
   10a54:	b580      	push	{r7, lr}
   10a56:	b082      	sub	sp, #8
   10a58:	af00      	add	r7, sp, #0
   10a5a:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
   10a5c:	4b09      	ldr	r3, [pc, #36]	; (10a84 <isM2MNumber+0x30>)
   10a5e:	785b      	ldrb	r3, [r3, #1]
   10a60:	2b00      	cmp	r3, #0
   10a62:	d009      	beq.n	10a78 <isM2MNumber+0x24>
   10a64:	4a08      	ldr	r2, [pc, #32]	; (10a88 <isM2MNumber+0x34>)
   10a66:	687b      	ldr	r3, [r7, #4]
   10a68:	0011      	movs	r1, r2
   10a6a:	0018      	movs	r0, r3
   10a6c:	4b07      	ldr	r3, [pc, #28]	; (10a8c <isM2MNumber+0x38>)
   10a6e:	4798      	blx	r3
   10a70:	1e03      	subs	r3, r0, #0
   10a72:	d001      	beq.n	10a78 <isM2MNumber+0x24>
	{
		return true;
   10a74:	2301      	movs	r3, #1
   10a76:	e000      	b.n	10a7a <isM2MNumber+0x26>
	}
	return false;
   10a78:	2300      	movs	r3, #0
}
   10a7a:	0018      	movs	r0, r3
   10a7c:	46bd      	mov	sp, r7
   10a7e:	b002      	add	sp, #8
   10a80:	bd80      	pop	{r7, pc}
   10a82:	46c0      	nop			; (mov r8, r8)
   10a84:	20000754 	.word	0x20000754
   10a88:	2000075c 	.word	0x2000075c
   10a8c:	00029917 	.word	0x00029917

00010a90 <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
   10a90:	b580      	push	{r7, lr}
   10a92:	b082      	sub	sp, #8
   10a94:	af00      	add	r7, sp, #0
   10a96:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
   10a98:	4b09      	ldr	r3, [pc, #36]	; (10ac0 <isM2MRemoteNumber+0x30>)
   10a9a:	78db      	ldrb	r3, [r3, #3]
   10a9c:	2b00      	cmp	r3, #0
   10a9e:	d009      	beq.n	10ab4 <isM2MRemoteNumber+0x24>
   10aa0:	4a08      	ldr	r2, [pc, #32]	; (10ac4 <isM2MRemoteNumber+0x34>)
   10aa2:	687b      	ldr	r3, [r7, #4]
   10aa4:	0011      	movs	r1, r2
   10aa6:	0018      	movs	r0, r3
   10aa8:	4b07      	ldr	r3, [pc, #28]	; (10ac8 <isM2MRemoteNumber+0x38>)
   10aaa:	4798      	blx	r3
   10aac:	1e03      	subs	r3, r0, #0
   10aae:	d001      	beq.n	10ab4 <isM2MRemoteNumber+0x24>
	{
		return true;
   10ab0:	2301      	movs	r3, #1
   10ab2:	e000      	b.n	10ab6 <isM2MRemoteNumber+0x26>
	}
	return false;
   10ab4:	2300      	movs	r3, #0
}
   10ab6:	0018      	movs	r0, r3
   10ab8:	46bd      	mov	sp, r7
   10aba:	b002      	add	sp, #8
   10abc:	bd80      	pop	{r7, pc}
   10abe:	46c0      	nop			; (mov r8, r8)
   10ac0:	20000754 	.word	0x20000754
   10ac4:	20000770 	.word	0x20000770
   10ac8:	00029917 	.word	0x00029917

00010acc <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
   10acc:	b580      	push	{r7, lr}
   10ace:	b082      	sub	sp, #8
   10ad0:	af00      	add	r7, sp, #0
   10ad2:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
   10ad4:	4b09      	ldr	r3, [pc, #36]	; (10afc <getM2MNumber+0x30>)
   10ad6:	785b      	ldrb	r3, [r3, #1]
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d006      	beq.n	10aea <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
   10adc:	4a08      	ldr	r2, [pc, #32]	; (10b00 <getM2MNumber+0x34>)
   10ade:	687b      	ldr	r3, [r7, #4]
   10ae0:	0011      	movs	r1, r2
   10ae2:	0018      	movs	r0, r3
   10ae4:	4b07      	ldr	r3, [pc, #28]	; (10b04 <getM2MNumber+0x38>)
   10ae6:	4798      	blx	r3
   10ae8:	e002      	b.n	10af0 <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
   10aea:	687b      	ldr	r3, [r7, #4]
   10aec:	2200      	movs	r2, #0
   10aee:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
   10af0:	687b      	ldr	r3, [r7, #4]
}
   10af2:	0018      	movs	r0, r3
   10af4:	46bd      	mov	sp, r7
   10af6:	b002      	add	sp, #8
   10af8:	bd80      	pop	{r7, pc}
   10afa:	46c0      	nop			; (mov r8, r8)
   10afc:	20000754 	.word	0x20000754
   10b00:	2000075c 	.word	0x2000075c
   10b04:	000298d7 	.word	0x000298d7

00010b08 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
   10b08:	b580      	push	{r7, lr}
   10b0a:	b082      	sub	sp, #8
   10b0c:	af00      	add	r7, sp, #0
   10b0e:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
   10b10:	4b09      	ldr	r3, [pc, #36]	; (10b38 <getM2MRemoteNumber+0x30>)
   10b12:	78db      	ldrb	r3, [r3, #3]
   10b14:	2b00      	cmp	r3, #0
   10b16:	d006      	beq.n	10b26 <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
   10b18:	4a08      	ldr	r2, [pc, #32]	; (10b3c <getM2MRemoteNumber+0x34>)
   10b1a:	687b      	ldr	r3, [r7, #4]
   10b1c:	0011      	movs	r1, r2
   10b1e:	0018      	movs	r0, r3
   10b20:	4b07      	ldr	r3, [pc, #28]	; (10b40 <getM2MRemoteNumber+0x38>)
   10b22:	4798      	blx	r3
   10b24:	e002      	b.n	10b2c <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
   10b26:	687b      	ldr	r3, [r7, #4]
   10b28:	2200      	movs	r2, #0
   10b2a:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
   10b2c:	687b      	ldr	r3, [r7, #4]
}
   10b2e:	0018      	movs	r0, r3
   10b30:	46bd      	mov	sp, r7
   10b32:	b002      	add	sp, #8
   10b34:	bd80      	pop	{r7, pc}
   10b36:	46c0      	nop			; (mov r8, r8)
   10b38:	20000754 	.word	0x20000754
   10b3c:	20000770 	.word	0x20000770
   10b40:	000298d7 	.word	0x000298d7

00010b44 <setM2MVerify>:

void setM2MVerify(bool flag)
{
   10b44:	b580      	push	{r7, lr}
   10b46:	b082      	sub	sp, #8
   10b48:	af00      	add	r7, sp, #0
   10b4a:	0002      	movs	r2, r0
   10b4c:	1dfb      	adds	r3, r7, #7
   10b4e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
   10b50:	1dfb      	adds	r3, r7, #7
   10b52:	781a      	ldrb	r2, [r3, #0]
   10b54:	4b0a      	ldr	r3, [pc, #40]	; (10b80 <setM2MVerify+0x3c>)
   10b56:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10b58:	4a0a      	ldr	r2, [pc, #40]	; (10b84 <setM2MVerify+0x40>)
   10b5a:	4b09      	ldr	r3, [pc, #36]	; (10b80 <setM2MVerify+0x3c>)
   10b5c:	0010      	movs	r0, r2
   10b5e:	0019      	movs	r1, r3
   10b60:	2330      	movs	r3, #48	; 0x30
   10b62:	001a      	movs	r2, r3
   10b64:	4b08      	ldr	r3, [pc, #32]	; (10b88 <setM2MVerify+0x44>)
   10b66:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10b68:	4b06      	ldr	r3, [pc, #24]	; (10b84 <setM2MVerify+0x40>)
   10b6a:	0019      	movs	r1, r3
   10b6c:	2019      	movs	r0, #25
   10b6e:	4b07      	ldr	r3, [pc, #28]	; (10b8c <setM2MVerify+0x48>)
   10b70:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10b72:	4b07      	ldr	r3, [pc, #28]	; (10b90 <setM2MVerify+0x4c>)
   10b74:	4798      	blx	r3
}
   10b76:	46c0      	nop			; (mov r8, r8)
   10b78:	46bd      	mov	sp, r7
   10b7a:	b002      	add	sp, #8
   10b7c:	bd80      	pop	{r7, pc}
   10b7e:	46c0      	nop			; (mov r8, r8)
   10b80:	20000754 	.word	0x20000754
   10b84:	20000784 	.word	0x20000784
   10b88:	00029621 	.word	0x00029621
   10b8c:	00024251 	.word	0x00024251
   10b90:	000243f9 	.word	0x000243f9

00010b94 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
   10b94:	b580      	push	{r7, lr}
   10b96:	b082      	sub	sp, #8
   10b98:	af00      	add	r7, sp, #0
   10b9a:	0002      	movs	r2, r0
   10b9c:	1dfb      	adds	r3, r7, #7
   10b9e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
   10ba0:	1dfb      	adds	r3, r7, #7
   10ba2:	781a      	ldrb	r2, [r3, #0]
   10ba4:	4b0a      	ldr	r3, [pc, #40]	; (10bd0 <setM2MRemoteVerified+0x3c>)
   10ba6:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10ba8:	4a0a      	ldr	r2, [pc, #40]	; (10bd4 <setM2MRemoteVerified+0x40>)
   10baa:	4b09      	ldr	r3, [pc, #36]	; (10bd0 <setM2MRemoteVerified+0x3c>)
   10bac:	0010      	movs	r0, r2
   10bae:	0019      	movs	r1, r3
   10bb0:	2330      	movs	r3, #48	; 0x30
   10bb2:	001a      	movs	r2, r3
   10bb4:	4b08      	ldr	r3, [pc, #32]	; (10bd8 <setM2MRemoteVerified+0x44>)
   10bb6:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10bb8:	4b06      	ldr	r3, [pc, #24]	; (10bd4 <setM2MRemoteVerified+0x40>)
   10bba:	0019      	movs	r1, r3
   10bbc:	2019      	movs	r0, #25
   10bbe:	4b07      	ldr	r3, [pc, #28]	; (10bdc <setM2MRemoteVerified+0x48>)
   10bc0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10bc2:	4b07      	ldr	r3, [pc, #28]	; (10be0 <setM2MRemoteVerified+0x4c>)
   10bc4:	4798      	blx	r3
}
   10bc6:	46c0      	nop			; (mov r8, r8)
   10bc8:	46bd      	mov	sp, r7
   10bca:	b002      	add	sp, #8
   10bcc:	bd80      	pop	{r7, pc}
   10bce:	46c0      	nop			; (mov r8, r8)
   10bd0:	20000754 	.word	0x20000754
   10bd4:	20000784 	.word	0x20000784
   10bd8:	00029621 	.word	0x00029621
   10bdc:	00024251 	.word	0x00024251
   10be0:	000243f9 	.word	0x000243f9

00010be4 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
   10be4:	b580      	push	{r7, lr}
   10be6:	b082      	sub	sp, #8
   10be8:	af00      	add	r7, sp, #0
   10bea:	0002      	movs	r2, r0
   10bec:	1dfb      	adds	r3, r7, #7
   10bee:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
   10bf0:	1dfb      	adds	r3, r7, #7
   10bf2:	781a      	ldrb	r2, [r3, #0]
   10bf4:	4b0f      	ldr	r3, [pc, #60]	; (10c34 <saveM2MSettings+0x50>)
   10bf6:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
   10bf8:	1dfb      	adds	r3, r7, #7
   10bfa:	781b      	ldrb	r3, [r3, #0]
   10bfc:	2201      	movs	r2, #1
   10bfe:	4053      	eors	r3, r2
   10c00:	b2db      	uxtb	r3, r3
   10c02:	2b00      	cmp	r3, #0
   10c04:	d002      	beq.n	10c0c <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
   10c06:	4b0b      	ldr	r3, [pc, #44]	; (10c34 <saveM2MSettings+0x50>)
   10c08:	2200      	movs	r2, #0
   10c0a:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c0c:	4a0a      	ldr	r2, [pc, #40]	; (10c38 <saveM2MSettings+0x54>)
   10c0e:	4b09      	ldr	r3, [pc, #36]	; (10c34 <saveM2MSettings+0x50>)
   10c10:	0010      	movs	r0, r2
   10c12:	0019      	movs	r1, r3
   10c14:	2330      	movs	r3, #48	; 0x30
   10c16:	001a      	movs	r2, r3
   10c18:	4b08      	ldr	r3, [pc, #32]	; (10c3c <saveM2MSettings+0x58>)
   10c1a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c1c:	4b06      	ldr	r3, [pc, #24]	; (10c38 <saveM2MSettings+0x54>)
   10c1e:	0019      	movs	r1, r3
   10c20:	2019      	movs	r0, #25
   10c22:	4b07      	ldr	r3, [pc, #28]	; (10c40 <saveM2MSettings+0x5c>)
   10c24:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c26:	4b07      	ldr	r3, [pc, #28]	; (10c44 <saveM2MSettings+0x60>)
   10c28:	4798      	blx	r3
}
   10c2a:	46c0      	nop			; (mov r8, r8)
   10c2c:	46bd      	mov	sp, r7
   10c2e:	b002      	add	sp, #8
   10c30:	bd80      	pop	{r7, pc}
   10c32:	46c0      	nop			; (mov r8, r8)
   10c34:	20000754 	.word	0x20000754
   10c38:	20000784 	.word	0x20000784
   10c3c:	00029621 	.word	0x00029621
   10c40:	00024251 	.word	0x00024251
   10c44:	000243f9 	.word	0x000243f9

00010c48 <addM2MNumber>:

void addM2MNumber(char *no)
{
   10c48:	b580      	push	{r7, lr}
   10c4a:	b082      	sub	sp, #8
   10c4c:	af00      	add	r7, sp, #0
   10c4e:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
   10c50:	4b0f      	ldr	r3, [pc, #60]	; (10c90 <addM2MNumber+0x48>)
   10c52:	2201      	movs	r2, #1
   10c54:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
   10c56:	687a      	ldr	r2, [r7, #4]
   10c58:	4b0e      	ldr	r3, [pc, #56]	; (10c94 <addM2MNumber+0x4c>)
   10c5a:	0011      	movs	r1, r2
   10c5c:	0018      	movs	r0, r3
   10c5e:	4b0e      	ldr	r3, [pc, #56]	; (10c98 <addM2MNumber+0x50>)
   10c60:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10c62:	4a0e      	ldr	r2, [pc, #56]	; (10c9c <addM2MNumber+0x54>)
   10c64:	4b0a      	ldr	r3, [pc, #40]	; (10c90 <addM2MNumber+0x48>)
   10c66:	0010      	movs	r0, r2
   10c68:	0019      	movs	r1, r3
   10c6a:	2330      	movs	r3, #48	; 0x30
   10c6c:	001a      	movs	r2, r3
   10c6e:	4b0c      	ldr	r3, [pc, #48]	; (10ca0 <addM2MNumber+0x58>)
   10c70:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10c72:	4b0a      	ldr	r3, [pc, #40]	; (10c9c <addM2MNumber+0x54>)
   10c74:	0019      	movs	r1, r3
   10c76:	2019      	movs	r0, #25
   10c78:	4b0a      	ldr	r3, [pc, #40]	; (10ca4 <addM2MNumber+0x5c>)
   10c7a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10c7c:	4b0a      	ldr	r3, [pc, #40]	; (10ca8 <addM2MNumber+0x60>)
   10c7e:	4798      	blx	r3
	setM2MVerify(false);
   10c80:	2000      	movs	r0, #0
   10c82:	4b0a      	ldr	r3, [pc, #40]	; (10cac <addM2MNumber+0x64>)
   10c84:	4798      	blx	r3
}
   10c86:	46c0      	nop			; (mov r8, r8)
   10c88:	46bd      	mov	sp, r7
   10c8a:	b002      	add	sp, #8
   10c8c:	bd80      	pop	{r7, pc}
   10c8e:	46c0      	nop			; (mov r8, r8)
   10c90:	20000754 	.word	0x20000754
   10c94:	2000075c 	.word	0x2000075c
   10c98:	000298d7 	.word	0x000298d7
   10c9c:	20000784 	.word	0x20000784
   10ca0:	00029621 	.word	0x00029621
   10ca4:	00024251 	.word	0x00024251
   10ca8:	000243f9 	.word	0x000243f9
   10cac:	00010b45 	.word	0x00010b45

00010cb0 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
   10cb0:	b580      	push	{r7, lr}
   10cb2:	b082      	sub	sp, #8
   10cb4:	af00      	add	r7, sp, #0
   10cb6:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
   10cb8:	4b10      	ldr	r3, [pc, #64]	; (10cfc <addM2MRemoteNumber+0x4c>)
   10cba:	2201      	movs	r2, #1
   10cbc:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
   10cbe:	687a      	ldr	r2, [r7, #4]
   10cc0:	4b0f      	ldr	r3, [pc, #60]	; (10d00 <addM2MRemoteNumber+0x50>)
   10cc2:	0011      	movs	r1, r2
   10cc4:	0018      	movs	r0, r3
   10cc6:	4b0f      	ldr	r3, [pc, #60]	; (10d04 <addM2MRemoteNumber+0x54>)
   10cc8:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
   10cca:	4a0f      	ldr	r2, [pc, #60]	; (10d08 <addM2MRemoteNumber+0x58>)
   10ccc:	4b0b      	ldr	r3, [pc, #44]	; (10cfc <addM2MRemoteNumber+0x4c>)
   10cce:	0010      	movs	r0, r2
   10cd0:	0019      	movs	r1, r3
   10cd2:	2330      	movs	r3, #48	; 0x30
   10cd4:	001a      	movs	r2, r3
   10cd6:	4b0d      	ldr	r3, [pc, #52]	; (10d0c <addM2MRemoteNumber+0x5c>)
   10cd8:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
   10cda:	4b0b      	ldr	r3, [pc, #44]	; (10d08 <addM2MRemoteNumber+0x58>)
   10cdc:	0019      	movs	r1, r3
   10cde:	2019      	movs	r0, #25
   10ce0:	4b0b      	ldr	r3, [pc, #44]	; (10d10 <addM2MRemoteNumber+0x60>)
   10ce2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   10ce4:	4b0b      	ldr	r3, [pc, #44]	; (10d14 <addM2MRemoteNumber+0x64>)
   10ce6:	4798      	blx	r3
	setM2MRemoteVerified(false);
   10ce8:	2000      	movs	r0, #0
   10cea:	4b0b      	ldr	r3, [pc, #44]	; (10d18 <addM2MRemoteNumber+0x68>)
   10cec:	4798      	blx	r3
	saveM2MSettings(false);
   10cee:	2000      	movs	r0, #0
   10cf0:	4b0a      	ldr	r3, [pc, #40]	; (10d1c <addM2MRemoteNumber+0x6c>)
   10cf2:	4798      	blx	r3
}
   10cf4:	46c0      	nop			; (mov r8, r8)
   10cf6:	46bd      	mov	sp, r7
   10cf8:	b002      	add	sp, #8
   10cfa:	bd80      	pop	{r7, pc}
   10cfc:	20000754 	.word	0x20000754
   10d00:	20000770 	.word	0x20000770
   10d04:	000298d7 	.word	0x000298d7
   10d08:	20000784 	.word	0x20000784
   10d0c:	00029621 	.word	0x00029621
   10d10:	00024251 	.word	0x00024251
   10d14:	000243f9 	.word	0x000243f9
   10d18:	00010b95 	.word	0x00010b95
   10d1c:	00010be5 	.word	0x00010be5

00010d20 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
   10d20:	b580      	push	{r7, lr}
   10d22:	b08e      	sub	sp, #56	; 0x38
   10d24:	af00      	add	r7, sp, #0
   10d26:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10d28:	4b28      	ldr	r3, [pc, #160]	; (10dcc <getActiveNumber+0xac>)
   10d2a:	789b      	ldrb	r3, [r3, #2]
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	d02b      	beq.n	10d88 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
   10d30:	4b27      	ldr	r3, [pc, #156]	; (10dd0 <getActiveNumber+0xb0>)
   10d32:	785b      	ldrb	r3, [r3, #1]
   10d34:	2b00      	cmp	r3, #0
   10d36:	d006      	beq.n	10d46 <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
   10d38:	4a26      	ldr	r2, [pc, #152]	; (10dd4 <getActiveNumber+0xb4>)
   10d3a:	687b      	ldr	r3, [r7, #4]
   10d3c:	0011      	movs	r1, r2
   10d3e:	0018      	movs	r0, r3
   10d40:	4b25      	ldr	r3, [pc, #148]	; (10dd8 <getActiveNumber+0xb8>)
   10d42:	4798      	blx	r3
   10d44:	e03c      	b.n	10dc0 <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10d46:	4b25      	ldr	r3, [pc, #148]	; (10ddc <getActiveNumber+0xbc>)
   10d48:	223c      	movs	r2, #60	; 0x3c
   10d4a:	2100      	movs	r1, #0
   10d4c:	0018      	movs	r0, r3
   10d4e:	4b24      	ldr	r3, [pc, #144]	; (10de0 <getActiveNumber+0xc0>)
   10d50:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   10d52:	4b1e      	ldr	r3, [pc, #120]	; (10dcc <getActiveNumber+0xac>)
   10d54:	78db      	ldrb	r3, [r3, #3]
   10d56:	3309      	adds	r3, #9
   10d58:	b2db      	uxtb	r3, r3
   10d5a:	4a20      	ldr	r2, [pc, #128]	; (10ddc <getActiveNumber+0xbc>)
   10d5c:	0011      	movs	r1, r2
   10d5e:	0018      	movs	r0, r3
   10d60:	4b20      	ldr	r3, [pc, #128]	; (10de4 <getActiveNumber+0xc4>)
   10d62:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d64:	2320      	movs	r3, #32
   10d66:	18fa      	adds	r2, r7, r3
   10d68:	4b1c      	ldr	r3, [pc, #112]	; (10ddc <getActiveNumber+0xbc>)
   10d6a:	0010      	movs	r0, r2
   10d6c:	0019      	movs	r1, r3
   10d6e:	2318      	movs	r3, #24
   10d70:	001a      	movs	r2, r3
   10d72:	4b1d      	ldr	r3, [pc, #116]	; (10de8 <getActiveNumber+0xc8>)
   10d74:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10d76:	2320      	movs	r3, #32
   10d78:	18fb      	adds	r3, r7, r3
   10d7a:	1d1a      	adds	r2, r3, #4
   10d7c:	687b      	ldr	r3, [r7, #4]
   10d7e:	0011      	movs	r1, r2
   10d80:	0018      	movs	r0, r3
   10d82:	4b15      	ldr	r3, [pc, #84]	; (10dd8 <getActiveNumber+0xb8>)
   10d84:	4798      	blx	r3
   10d86:	e01b      	b.n	10dc0 <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   10d88:	4b14      	ldr	r3, [pc, #80]	; (10ddc <getActiveNumber+0xbc>)
   10d8a:	223c      	movs	r2, #60	; 0x3c
   10d8c:	2100      	movs	r1, #0
   10d8e:	0018      	movs	r0, r3
   10d90:	4b13      	ldr	r3, [pc, #76]	; (10de0 <getActiveNumber+0xc0>)
   10d92:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   10d94:	4b11      	ldr	r3, [pc, #68]	; (10ddc <getActiveNumber+0xbc>)
   10d96:	0019      	movs	r1, r3
   10d98:	2003      	movs	r0, #3
   10d9a:	4b12      	ldr	r3, [pc, #72]	; (10de4 <getActiveNumber+0xc4>)
   10d9c:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10d9e:	2308      	movs	r3, #8
   10da0:	18fa      	adds	r2, r7, r3
   10da2:	4b0e      	ldr	r3, [pc, #56]	; (10ddc <getActiveNumber+0xbc>)
   10da4:	0010      	movs	r0, r2
   10da6:	0019      	movs	r1, r3
   10da8:	2318      	movs	r3, #24
   10daa:	001a      	movs	r2, r3
   10dac:	4b0e      	ldr	r3, [pc, #56]	; (10de8 <getActiveNumber+0xc8>)
   10dae:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
   10db0:	2308      	movs	r3, #8
   10db2:	18fb      	adds	r3, r7, r3
   10db4:	1d1a      	adds	r2, r3, #4
   10db6:	687b      	ldr	r3, [r7, #4]
   10db8:	0011      	movs	r1, r2
   10dba:	0018      	movs	r0, r3
   10dbc:	4b06      	ldr	r3, [pc, #24]	; (10dd8 <getActiveNumber+0xb8>)
   10dbe:	4798      	blx	r3
	}
	
	return ActiveNo;
   10dc0:	687b      	ldr	r3, [r7, #4]
}
   10dc2:	0018      	movs	r0, r3
   10dc4:	46bd      	mov	sp, r7
   10dc6:	b00e      	add	sp, #56	; 0x38
   10dc8:	bd80      	pop	{r7, pc}
   10dca:	46c0      	nop			; (mov r8, r8)
   10dcc:	20000814 	.word	0x20000814
   10dd0:	2000083c 	.word	0x2000083c
   10dd4:	20000840 	.word	0x20000840
   10dd8:	000298d7 	.word	0x000298d7
   10ddc:	20000784 	.word	0x20000784
   10de0:	00029657 	.word	0x00029657
   10de4:	0002435d 	.word	0x0002435d
   10de8:	00029621 	.word	0x00029621

00010dec <checkExists>:
uint8_t checkExists(char *number)
{
   10dec:	b580      	push	{r7, lr}
   10dee:	b08a      	sub	sp, #40	; 0x28
   10df0:	af00      	add	r7, sp, #0
   10df2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   10df4:	4b33      	ldr	r3, [pc, #204]	; (10ec4 <checkExists+0xd8>)
   10df6:	789b      	ldrb	r3, [r3, #2]
   10df8:	2b00      	cmp	r3, #0
   10dfa:	d039      	beq.n	10e70 <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10dfc:	2327      	movs	r3, #39	; 0x27
   10dfe:	18fb      	adds	r3, r7, r3
   10e00:	2200      	movs	r2, #0
   10e02:	701a      	strb	r2, [r3, #0]
   10e04:	e02d      	b.n	10e62 <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10e06:	4b30      	ldr	r3, [pc, #192]	; (10ec8 <checkExists+0xdc>)
   10e08:	223c      	movs	r2, #60	; 0x3c
   10e0a:	2100      	movs	r1, #0
   10e0c:	0018      	movs	r0, r3
   10e0e:	4b2f      	ldr	r3, [pc, #188]	; (10ecc <checkExists+0xe0>)
   10e10:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   10e12:	2327      	movs	r3, #39	; 0x27
   10e14:	18fb      	adds	r3, r7, r3
   10e16:	781b      	ldrb	r3, [r3, #0]
   10e18:	3309      	adds	r3, #9
   10e1a:	b2db      	uxtb	r3, r3
   10e1c:	4a2a      	ldr	r2, [pc, #168]	; (10ec8 <checkExists+0xdc>)
   10e1e:	0011      	movs	r1, r2
   10e20:	0018      	movs	r0, r3
   10e22:	4b2b      	ldr	r3, [pc, #172]	; (10ed0 <checkExists+0xe4>)
   10e24:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10e26:	230c      	movs	r3, #12
   10e28:	18fa      	adds	r2, r7, r3
   10e2a:	4b27      	ldr	r3, [pc, #156]	; (10ec8 <checkExists+0xdc>)
   10e2c:	0010      	movs	r0, r2
   10e2e:	0019      	movs	r1, r3
   10e30:	2318      	movs	r3, #24
   10e32:	001a      	movs	r2, r3
   10e34:	4b27      	ldr	r3, [pc, #156]	; (10ed4 <checkExists+0xe8>)
   10e36:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
   10e38:	230c      	movs	r3, #12
   10e3a:	18fb      	adds	r3, r7, r3
   10e3c:	1d1a      	adds	r2, r3, #4
   10e3e:	687b      	ldr	r3, [r7, #4]
   10e40:	0011      	movs	r1, r2
   10e42:	0018      	movs	r0, r3
   10e44:	4b24      	ldr	r3, [pc, #144]	; (10ed8 <checkExists+0xec>)
   10e46:	4798      	blx	r3
   10e48:	1e03      	subs	r3, r0, #0
   10e4a:	d003      	beq.n	10e54 <checkExists+0x68>
			{
				return i;
   10e4c:	2327      	movs	r3, #39	; 0x27
   10e4e:	18fb      	adds	r3, r7, r3
   10e50:	781b      	ldrb	r3, [r3, #0]
   10e52:	e032      	b.n	10eba <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
   10e54:	2327      	movs	r3, #39	; 0x27
   10e56:	18fb      	adds	r3, r7, r3
   10e58:	781a      	ldrb	r2, [r3, #0]
   10e5a:	2327      	movs	r3, #39	; 0x27
   10e5c:	18fb      	adds	r3, r7, r3
   10e5e:	3201      	adds	r2, #1
   10e60:	701a      	strb	r2, [r3, #0]
   10e62:	4b18      	ldr	r3, [pc, #96]	; (10ec4 <checkExists+0xd8>)
   10e64:	789b      	ldrb	r3, [r3, #2]
   10e66:	2227      	movs	r2, #39	; 0x27
   10e68:	18ba      	adds	r2, r7, r2
   10e6a:	7812      	ldrb	r2, [r2, #0]
   10e6c:	429a      	cmp	r2, r3
   10e6e:	d3ca      	bcc.n	10e06 <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
   10e70:	687b      	ldr	r3, [r7, #4]
   10e72:	0018      	movs	r0, r3
   10e74:	4b19      	ldr	r3, [pc, #100]	; (10edc <checkExists+0xf0>)
   10e76:	4798      	blx	r3
   10e78:	1e03      	subs	r3, r0, #0
   10e7a:	d001      	beq.n	10e80 <checkExists+0x94>
	{
		return 0xFD;
   10e7c:	23fd      	movs	r3, #253	; 0xfd
   10e7e:	e01c      	b.n	10eba <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
   10e80:	4b17      	ldr	r3, [pc, #92]	; (10ee0 <checkExists+0xf4>)
   10e82:	789b      	ldrb	r3, [r3, #2]
   10e84:	2b00      	cmp	r3, #0
   10e86:	d007      	beq.n	10e98 <checkExists+0xac>
   10e88:	687b      	ldr	r3, [r7, #4]
   10e8a:	0018      	movs	r0, r3
   10e8c:	4b15      	ldr	r3, [pc, #84]	; (10ee4 <checkExists+0xf8>)
   10e8e:	4798      	blx	r3
   10e90:	1e03      	subs	r3, r0, #0
   10e92:	d001      	beq.n	10e98 <checkExists+0xac>
	{
		return 0xFE;
   10e94:	23fe      	movs	r3, #254	; 0xfe
   10e96:	e010      	b.n	10eba <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   10e98:	4b13      	ldr	r3, [pc, #76]	; (10ee8 <checkExists+0xfc>)
   10e9a:	78db      	ldrb	r3, [r3, #3]
   10e9c:	2b00      	cmp	r3, #0
   10e9e:	d00b      	beq.n	10eb8 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
   10ea0:	4b0f      	ldr	r3, [pc, #60]	; (10ee0 <checkExists+0xf4>)
   10ea2:	791b      	ldrb	r3, [r3, #4]
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d007      	beq.n	10eb8 <checkExists+0xcc>
   10ea8:	687b      	ldr	r3, [r7, #4]
   10eaa:	0018      	movs	r0, r3
   10eac:	4b0f      	ldr	r3, [pc, #60]	; (10eec <checkExists+0x100>)
   10eae:	4798      	blx	r3
   10eb0:	1e03      	subs	r3, r0, #0
   10eb2:	d001      	beq.n	10eb8 <checkExists+0xcc>
		{
			return 0xFE;
   10eb4:	23fe      	movs	r3, #254	; 0xfe
   10eb6:	e000      	b.n	10eba <checkExists+0xce>
		}
	}
	return 0xFF;
   10eb8:	23ff      	movs	r3, #255	; 0xff
}
   10eba:	0018      	movs	r0, r3
   10ebc:	46bd      	mov	sp, r7
   10ebe:	b00a      	add	sp, #40	; 0x28
   10ec0:	bd80      	pop	{r7, pc}
   10ec2:	46c0      	nop			; (mov r8, r8)
   10ec4:	20000814 	.word	0x20000814
   10ec8:	20000784 	.word	0x20000784
   10ecc:	00029657 	.word	0x00029657
   10ed0:	0002435d 	.word	0x0002435d
   10ed4:	00029621 	.word	0x00029621
   10ed8:	00029917 	.word	0x00029917
   10edc:	00010a0d 	.word	0x00010a0d
   10ee0:	20000754 	.word	0x20000754
   10ee4:	00010a55 	.word	0x00010a55
   10ee8:	2000082c 	.word	0x2000082c
   10eec:	00010a91 	.word	0x00010a91

00010ef0 <addNumber>:

bool addNumber(char *number)
{
   10ef0:	b580      	push	{r7, lr}
   10ef2:	b088      	sub	sp, #32
   10ef4:	af00      	add	r7, sp, #0
   10ef6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
   10ef8:	4b33      	ldr	r3, [pc, #204]	; (10fc8 <addNumber+0xd8>)
   10efa:	789a      	ldrb	r2, [r3, #2]
   10efc:	4b32      	ldr	r3, [pc, #200]	; (10fc8 <addNumber+0xd8>)
   10efe:	785b      	ldrb	r3, [r3, #1]
   10f00:	429a      	cmp	r2, r3
   10f02:	d101      	bne.n	10f08 <addNumber+0x18>
	{
		return false;
   10f04:	2300      	movs	r3, #0
   10f06:	e05a      	b.n	10fbe <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
   10f08:	687b      	ldr	r3, [r7, #4]
   10f0a:	0018      	movs	r0, r3
   10f0c:	4b2f      	ldr	r3, [pc, #188]	; (10fcc <addNumber+0xdc>)
   10f0e:	4798      	blx	r3
   10f10:	0003      	movs	r3, r0
   10f12:	2bf0      	cmp	r3, #240	; 0xf0
   10f14:	d952      	bls.n	10fbc <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   10f16:	4b2e      	ldr	r3, [pc, #184]	; (10fd0 <addNumber+0xe0>)
   10f18:	223c      	movs	r2, #60	; 0x3c
   10f1a:	2100      	movs	r1, #0
   10f1c:	0018      	movs	r0, r3
   10f1e:	4b2d      	ldr	r3, [pc, #180]	; (10fd4 <addNumber+0xe4>)
   10f20:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f22:	4b29      	ldr	r3, [pc, #164]	; (10fc8 <addNumber+0xd8>)
   10f24:	789b      	ldrb	r3, [r3, #2]
   10f26:	3309      	adds	r3, #9
   10f28:	b2db      	uxtb	r3, r3
   10f2a:	4a29      	ldr	r2, [pc, #164]	; (10fd0 <addNumber+0xe0>)
   10f2c:	0011      	movs	r1, r2
   10f2e:	0018      	movs	r0, r3
   10f30:	4b29      	ldr	r3, [pc, #164]	; (10fd8 <addNumber+0xe8>)
   10f32:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   10f34:	2308      	movs	r3, #8
   10f36:	18fa      	adds	r2, r7, r3
   10f38:	4b25      	ldr	r3, [pc, #148]	; (10fd0 <addNumber+0xe0>)
   10f3a:	0010      	movs	r0, r2
   10f3c:	0019      	movs	r1, r3
   10f3e:	2318      	movs	r3, #24
   10f40:	001a      	movs	r2, r3
   10f42:	4b26      	ldr	r3, [pc, #152]	; (10fdc <addNumber+0xec>)
   10f44:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
   10f46:	2308      	movs	r3, #8
   10f48:	18fb      	adds	r3, r7, r3
   10f4a:	3304      	adds	r3, #4
   10f4c:	2214      	movs	r2, #20
   10f4e:	2100      	movs	r1, #0
   10f50:	0018      	movs	r0, r3
   10f52:	4b20      	ldr	r3, [pc, #128]	; (10fd4 <addNumber+0xe4>)
   10f54:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
   10f56:	687a      	ldr	r2, [r7, #4]
   10f58:	2308      	movs	r3, #8
   10f5a:	18fb      	adds	r3, r7, r3
   10f5c:	3304      	adds	r3, #4
   10f5e:	0011      	movs	r1, r2
   10f60:	0018      	movs	r0, r3
   10f62:	4b1f      	ldr	r3, [pc, #124]	; (10fe0 <addNumber+0xf0>)
   10f64:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
   10f66:	4a1a      	ldr	r2, [pc, #104]	; (10fd0 <addNumber+0xe0>)
   10f68:	2308      	movs	r3, #8
   10f6a:	18fb      	adds	r3, r7, r3
   10f6c:	0010      	movs	r0, r2
   10f6e:	0019      	movs	r1, r3
   10f70:	2318      	movs	r3, #24
   10f72:	001a      	movs	r2, r3
   10f74:	4b19      	ldr	r3, [pc, #100]	; (10fdc <addNumber+0xec>)
   10f76:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
   10f78:	4b13      	ldr	r3, [pc, #76]	; (10fc8 <addNumber+0xd8>)
   10f7a:	789b      	ldrb	r3, [r3, #2]
   10f7c:	3309      	adds	r3, #9
   10f7e:	b2db      	uxtb	r3, r3
   10f80:	4a13      	ldr	r2, [pc, #76]	; (10fd0 <addNumber+0xe0>)
   10f82:	0011      	movs	r1, r2
   10f84:	0018      	movs	r0, r3
   10f86:	4b17      	ldr	r3, [pc, #92]	; (10fe4 <addNumber+0xf4>)
   10f88:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10f8a:	4b17      	ldr	r3, [pc, #92]	; (10fe8 <addNumber+0xf8>)
   10f8c:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
   10f8e:	4b0e      	ldr	r3, [pc, #56]	; (10fc8 <addNumber+0xd8>)
   10f90:	789b      	ldrb	r3, [r3, #2]
   10f92:	3301      	adds	r3, #1
   10f94:	b2da      	uxtb	r2, r3
   10f96:	4b0c      	ldr	r3, [pc, #48]	; (10fc8 <addNumber+0xd8>)
   10f98:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   10f9a:	4a0d      	ldr	r2, [pc, #52]	; (10fd0 <addNumber+0xe0>)
   10f9c:	4b0a      	ldr	r3, [pc, #40]	; (10fc8 <addNumber+0xd8>)
   10f9e:	0010      	movs	r0, r2
   10fa0:	0019      	movs	r1, r3
   10fa2:	2308      	movs	r3, #8
   10fa4:	001a      	movs	r2, r3
   10fa6:	4b0d      	ldr	r3, [pc, #52]	; (10fdc <addNumber+0xec>)
   10fa8:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   10faa:	4b09      	ldr	r3, [pc, #36]	; (10fd0 <addNumber+0xe0>)
   10fac:	0019      	movs	r1, r3
   10fae:	2008      	movs	r0, #8
   10fb0:	4b0c      	ldr	r3, [pc, #48]	; (10fe4 <addNumber+0xf4>)
   10fb2:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   10fb4:	4b0c      	ldr	r3, [pc, #48]	; (10fe8 <addNumber+0xf8>)
   10fb6:	4798      	blx	r3
			
			return true;
   10fb8:	2301      	movs	r3, #1
   10fba:	e000      	b.n	10fbe <addNumber+0xce>
		}
	}
	return false;
   10fbc:	2300      	movs	r3, #0
}
   10fbe:	0018      	movs	r0, r3
   10fc0:	46bd      	mov	sp, r7
   10fc2:	b008      	add	sp, #32
   10fc4:	bd80      	pop	{r7, pc}
   10fc6:	46c0      	nop			; (mov r8, r8)
   10fc8:	20000814 	.word	0x20000814
   10fcc:	00010ded 	.word	0x00010ded
   10fd0:	20000784 	.word	0x20000784
   10fd4:	00029657 	.word	0x00029657
   10fd8:	0002435d 	.word	0x0002435d
   10fdc:	00029621 	.word	0x00029621
   10fe0:	000298d7 	.word	0x000298d7
   10fe4:	00024251 	.word	0x00024251
   10fe8:	000243f9 	.word	0x000243f9

00010fec <removeNumber>:

bool removeNumber(char *numer)
{
   10fec:	b590      	push	{r4, r7, lr}
   10fee:	b085      	sub	sp, #20
   10ff0:	af00      	add	r7, sp, #0
   10ff2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
   10ff4:	4b3d      	ldr	r3, [pc, #244]	; (110ec <removeNumber+0x100>)
   10ff6:	789b      	ldrb	r3, [r3, #2]
   10ff8:	2b01      	cmp	r3, #1
   10ffa:	d801      	bhi.n	11000 <removeNumber+0x14>
	{
		return false;
   10ffc:	2300      	movs	r3, #0
   10ffe:	e071      	b.n	110e4 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
   11000:	230e      	movs	r3, #14
   11002:	18fc      	adds	r4, r7, r3
   11004:	687b      	ldr	r3, [r7, #4]
   11006:	0018      	movs	r0, r3
   11008:	4b39      	ldr	r3, [pc, #228]	; (110f0 <removeNumber+0x104>)
   1100a:	4798      	blx	r3
   1100c:	0003      	movs	r3, r0
   1100e:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
   11010:	4b36      	ldr	r3, [pc, #216]	; (110ec <removeNumber+0x100>)
   11012:	785b      	ldrb	r3, [r3, #1]
   11014:	220e      	movs	r2, #14
   11016:	18ba      	adds	r2, r7, r2
   11018:	7812      	ldrb	r2, [r2, #0]
   1101a:	429a      	cmp	r2, r3
   1101c:	d261      	bcs.n	110e2 <removeNumber+0xf6>
   1101e:	4b33      	ldr	r3, [pc, #204]	; (110ec <removeNumber+0x100>)
   11020:	78db      	ldrb	r3, [r3, #3]
   11022:	220e      	movs	r2, #14
   11024:	18ba      	adds	r2, r7, r2
   11026:	7812      	ldrb	r2, [r2, #0]
   11028:	429a      	cmp	r2, r3
   1102a:	d05a      	beq.n	110e2 <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   1102c:	230f      	movs	r3, #15
   1102e:	18fb      	adds	r3, r7, r3
   11030:	220e      	movs	r2, #14
   11032:	18ba      	adds	r2, r7, r2
   11034:	7812      	ldrb	r2, [r2, #0]
   11036:	701a      	strb	r2, [r3, #0]
   11038:	e022      	b.n	11080 <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
   1103a:	4b2e      	ldr	r3, [pc, #184]	; (110f4 <removeNumber+0x108>)
   1103c:	223c      	movs	r2, #60	; 0x3c
   1103e:	2100      	movs	r1, #0
   11040:	0018      	movs	r0, r3
   11042:	4b2d      	ldr	r3, [pc, #180]	; (110f8 <removeNumber+0x10c>)
   11044:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
   11046:	230f      	movs	r3, #15
   11048:	18fb      	adds	r3, r7, r3
   1104a:	781b      	ldrb	r3, [r3, #0]
   1104c:	330a      	adds	r3, #10
   1104e:	b2db      	uxtb	r3, r3
   11050:	4a28      	ldr	r2, [pc, #160]	; (110f4 <removeNumber+0x108>)
   11052:	0011      	movs	r1, r2
   11054:	0018      	movs	r0, r3
   11056:	4b29      	ldr	r3, [pc, #164]	; (110fc <removeNumber+0x110>)
   11058:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
   1105a:	230f      	movs	r3, #15
   1105c:	18fb      	adds	r3, r7, r3
   1105e:	781b      	ldrb	r3, [r3, #0]
   11060:	3309      	adds	r3, #9
   11062:	b2db      	uxtb	r3, r3
   11064:	4a23      	ldr	r2, [pc, #140]	; (110f4 <removeNumber+0x108>)
   11066:	0011      	movs	r1, r2
   11068:	0018      	movs	r0, r3
   1106a:	4b25      	ldr	r3, [pc, #148]	; (11100 <removeNumber+0x114>)
   1106c:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
   1106e:	4b25      	ldr	r3, [pc, #148]	; (11104 <removeNumber+0x118>)
   11070:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
   11072:	230f      	movs	r3, #15
   11074:	18fb      	adds	r3, r7, r3
   11076:	781a      	ldrb	r2, [r3, #0]
   11078:	230f      	movs	r3, #15
   1107a:	18fb      	adds	r3, r7, r3
   1107c:	3201      	adds	r2, #1
   1107e:	701a      	strb	r2, [r3, #0]
   11080:	230f      	movs	r3, #15
   11082:	18fb      	adds	r3, r7, r3
   11084:	781a      	ldrb	r2, [r3, #0]
   11086:	4b19      	ldr	r3, [pc, #100]	; (110ec <removeNumber+0x100>)
   11088:	789b      	ldrb	r3, [r3, #2]
   1108a:	3b01      	subs	r3, #1
   1108c:	429a      	cmp	r2, r3
   1108e:	dbd4      	blt.n	1103a <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
   11090:	4b16      	ldr	r3, [pc, #88]	; (110ec <removeNumber+0x100>)
   11092:	789b      	ldrb	r3, [r3, #2]
   11094:	3b01      	subs	r3, #1
   11096:	b2da      	uxtb	r2, r3
   11098:	4b14      	ldr	r3, [pc, #80]	; (110ec <removeNumber+0x100>)
   1109a:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
   1109c:	4b13      	ldr	r3, [pc, #76]	; (110ec <removeNumber+0x100>)
   1109e:	791b      	ldrb	r3, [r3, #4]
   110a0:	220e      	movs	r2, #14
   110a2:	18ba      	adds	r2, r7, r2
   110a4:	7812      	ldrb	r2, [r2, #0]
   110a6:	429a      	cmp	r2, r3
   110a8:	d007      	beq.n	110ba <removeNumber+0xce>
   110aa:	230e      	movs	r3, #14
   110ac:	18fb      	adds	r3, r7, r3
   110ae:	781a      	ldrb	r2, [r3, #0]
   110b0:	4b0e      	ldr	r3, [pc, #56]	; (110ec <removeNumber+0x100>)
   110b2:	789b      	ldrb	r3, [r3, #2]
   110b4:	3b01      	subs	r3, #1
   110b6:	429a      	cmp	r2, r3
   110b8:	dd02      	ble.n	110c0 <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
   110ba:	4b0c      	ldr	r3, [pc, #48]	; (110ec <removeNumber+0x100>)
   110bc:	2201      	movs	r2, #1
   110be:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   110c0:	4a0c      	ldr	r2, [pc, #48]	; (110f4 <removeNumber+0x108>)
   110c2:	4b0a      	ldr	r3, [pc, #40]	; (110ec <removeNumber+0x100>)
   110c4:	0010      	movs	r0, r2
   110c6:	0019      	movs	r1, r3
   110c8:	2308      	movs	r3, #8
   110ca:	001a      	movs	r2, r3
   110cc:	4b0e      	ldr	r3, [pc, #56]	; (11108 <removeNumber+0x11c>)
   110ce:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   110d0:	4b08      	ldr	r3, [pc, #32]	; (110f4 <removeNumber+0x108>)
   110d2:	0019      	movs	r1, r3
   110d4:	2008      	movs	r0, #8
   110d6:	4b0a      	ldr	r3, [pc, #40]	; (11100 <removeNumber+0x114>)
   110d8:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   110da:	4b0a      	ldr	r3, [pc, #40]	; (11104 <removeNumber+0x118>)
   110dc:	4798      	blx	r3
			return true;
   110de:	2301      	movs	r3, #1
   110e0:	e000      	b.n	110e4 <removeNumber+0xf8>
		}
	}
	return false;
   110e2:	2300      	movs	r3, #0
}
   110e4:	0018      	movs	r0, r3
   110e6:	46bd      	mov	sp, r7
   110e8:	b005      	add	sp, #20
   110ea:	bd90      	pop	{r4, r7, pc}
   110ec:	20000814 	.word	0x20000814
   110f0:	00010ded 	.word	0x00010ded
   110f4:	20000784 	.word	0x20000784
   110f8:	00029657 	.word	0x00029657
   110fc:	0002435d 	.word	0x0002435d
   11100:	00024251 	.word	0x00024251
   11104:	000243f9 	.word	0x000243f9
   11108:	00029621 	.word	0x00029621

0001110c <clearNumbers>:

void clearNumbers(bool admin)
{
   1110c:	b580      	push	{r7, lr}
   1110e:	b082      	sub	sp, #8
   11110:	af00      	add	r7, sp, #0
   11112:	0002      	movs	r2, r0
   11114:	1dfb      	adds	r3, r7, #7
   11116:	701a      	strb	r2, [r3, #0]
	if (admin)
   11118:	1dfb      	adds	r3, r7, #7
   1111a:	781b      	ldrb	r3, [r3, #0]
   1111c:	2b00      	cmp	r3, #0
   1111e:	d003      	beq.n	11128 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
   11120:	4b28      	ldr	r3, [pc, #160]	; (111c4 <clearNumbers+0xb8>)
   11122:	2200      	movs	r2, #0
   11124:	709a      	strb	r2, [r3, #2]
   11126:	e018      	b.n	1115a <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
   11128:	4b27      	ldr	r3, [pc, #156]	; (111c8 <clearNumbers+0xbc>)
   1112a:	223c      	movs	r2, #60	; 0x3c
   1112c:	2100      	movs	r1, #0
   1112e:	0018      	movs	r0, r3
   11130:	4b26      	ldr	r3, [pc, #152]	; (111cc <clearNumbers+0xc0>)
   11132:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
   11134:	4b23      	ldr	r3, [pc, #140]	; (111c4 <clearNumbers+0xb8>)
   11136:	78db      	ldrb	r3, [r3, #3]
   11138:	3309      	adds	r3, #9
   1113a:	b2db      	uxtb	r3, r3
   1113c:	4a22      	ldr	r2, [pc, #136]	; (111c8 <clearNumbers+0xbc>)
   1113e:	0011      	movs	r1, r2
   11140:	0018      	movs	r0, r3
   11142:	4b23      	ldr	r3, [pc, #140]	; (111d0 <clearNumbers+0xc4>)
   11144:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
   11146:	4b20      	ldr	r3, [pc, #128]	; (111c8 <clearNumbers+0xbc>)
   11148:	0019      	movs	r1, r3
   1114a:	2009      	movs	r0, #9
   1114c:	4b21      	ldr	r3, [pc, #132]	; (111d4 <clearNumbers+0xc8>)
   1114e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11150:	4b21      	ldr	r3, [pc, #132]	; (111d8 <clearNumbers+0xcc>)
   11152:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
   11154:	4b1b      	ldr	r3, [pc, #108]	; (111c4 <clearNumbers+0xb8>)
   11156:	2201      	movs	r2, #1
   11158:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
   1115a:	4b1a      	ldr	r3, [pc, #104]	; (111c4 <clearNumbers+0xb8>)
   1115c:	2200      	movs	r2, #0
   1115e:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   11160:	4b18      	ldr	r3, [pc, #96]	; (111c4 <clearNumbers+0xb8>)
   11162:	2201      	movs	r2, #1
   11164:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11166:	4a18      	ldr	r2, [pc, #96]	; (111c8 <clearNumbers+0xbc>)
   11168:	4b16      	ldr	r3, [pc, #88]	; (111c4 <clearNumbers+0xb8>)
   1116a:	0010      	movs	r0, r2
   1116c:	0019      	movs	r1, r3
   1116e:	2308      	movs	r3, #8
   11170:	001a      	movs	r2, r3
   11172:	4b1a      	ldr	r3, [pc, #104]	; (111dc <clearNumbers+0xd0>)
   11174:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
   11176:	4b13      	ldr	r3, [pc, #76]	; (111c4 <clearNumbers+0xb8>)
   11178:	2200      	movs	r2, #0
   1117a:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
   1117c:	4b11      	ldr	r3, [pc, #68]	; (111c4 <clearNumbers+0xb8>)
   1117e:	2201      	movs	r2, #1
   11180:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11182:	4b11      	ldr	r3, [pc, #68]	; (111c8 <clearNumbers+0xbc>)
   11184:	0019      	movs	r1, r3
   11186:	2008      	movs	r0, #8
   11188:	4b12      	ldr	r3, [pc, #72]	; (111d4 <clearNumbers+0xc8>)
   1118a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1118c:	4b12      	ldr	r3, [pc, #72]	; (111d8 <clearNumbers+0xcc>)
   1118e:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
   11190:	2000      	movs	r0, #0
   11192:	4b13      	ldr	r3, [pc, #76]	; (111e0 <clearNumbers+0xd4>)
   11194:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
   11196:	4b13      	ldr	r3, [pc, #76]	; (111e4 <clearNumbers+0xd8>)
   11198:	2200      	movs	r2, #0
   1119a:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1119c:	4a0a      	ldr	r2, [pc, #40]	; (111c8 <clearNumbers+0xbc>)
   1119e:	4b11      	ldr	r3, [pc, #68]	; (111e4 <clearNumbers+0xd8>)
   111a0:	0010      	movs	r0, r2
   111a2:	0019      	movs	r1, r3
   111a4:	2318      	movs	r3, #24
   111a6:	001a      	movs	r2, r3
   111a8:	4b0c      	ldr	r3, [pc, #48]	; (111dc <clearNumbers+0xd0>)
   111aa:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   111ac:	4b06      	ldr	r3, [pc, #24]	; (111c8 <clearNumbers+0xbc>)
   111ae:	0019      	movs	r1, r3
   111b0:	2018      	movs	r0, #24
   111b2:	4b08      	ldr	r3, [pc, #32]	; (111d4 <clearNumbers+0xc8>)
   111b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   111b6:	4b08      	ldr	r3, [pc, #32]	; (111d8 <clearNumbers+0xcc>)
   111b8:	4798      	blx	r3
}
   111ba:	46c0      	nop			; (mov r8, r8)
   111bc:	46bd      	mov	sp, r7
   111be:	b002      	add	sp, #8
   111c0:	bd80      	pop	{r7, pc}
   111c2:	46c0      	nop			; (mov r8, r8)
   111c4:	20000814 	.word	0x20000814
   111c8:	20000784 	.word	0x20000784
   111cc:	00029657 	.word	0x00029657
   111d0:	0002435d 	.word	0x0002435d
   111d4:	00024251 	.word	0x00024251
   111d8:	000243f9 	.word	0x000243f9
   111dc:	00029621 	.word	0x00029621
   111e0:	000111e9 	.word	0x000111e9
   111e4:	2000083c 	.word	0x2000083c

000111e8 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
   111e8:	b580      	push	{r7, lr}
   111ea:	b082      	sub	sp, #8
   111ec:	af00      	add	r7, sp, #0
   111ee:	0002      	movs	r2, r0
   111f0:	1dfb      	adds	r3, r7, #7
   111f2:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
   111f4:	1dfb      	adds	r3, r7, #7
   111f6:	781a      	ldrb	r2, [r3, #0]
   111f8:	4b0a      	ldr	r3, [pc, #40]	; (11224 <saveAlterNumberSetting+0x3c>)
   111fa:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   111fc:	4a0a      	ldr	r2, [pc, #40]	; (11228 <saveAlterNumberSetting+0x40>)
   111fe:	4b09      	ldr	r3, [pc, #36]	; (11224 <saveAlterNumberSetting+0x3c>)
   11200:	0010      	movs	r0, r2
   11202:	0019      	movs	r1, r3
   11204:	2318      	movs	r3, #24
   11206:	001a      	movs	r2, r3
   11208:	4b08      	ldr	r3, [pc, #32]	; (1122c <saveAlterNumberSetting+0x44>)
   1120a:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1120c:	4b06      	ldr	r3, [pc, #24]	; (11228 <saveAlterNumberSetting+0x40>)
   1120e:	0019      	movs	r1, r3
   11210:	2018      	movs	r0, #24
   11212:	4b07      	ldr	r3, [pc, #28]	; (11230 <saveAlterNumberSetting+0x48>)
   11214:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11216:	4b07      	ldr	r3, [pc, #28]	; (11234 <saveAlterNumberSetting+0x4c>)
   11218:	4798      	blx	r3
}
   1121a:	46c0      	nop			; (mov r8, r8)
   1121c:	46bd      	mov	sp, r7
   1121e:	b002      	add	sp, #8
   11220:	bd80      	pop	{r7, pc}
   11222:	46c0      	nop			; (mov r8, r8)
   11224:	2000083c 	.word	0x2000083c
   11228:	20000784 	.word	0x20000784
   1122c:	00029621 	.word	0x00029621
   11230:	00024251 	.word	0x00024251
   11234:	000243f9 	.word	0x000243f9

00011238 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
   11238:	b580      	push	{r7, lr}
   1123a:	b082      	sub	sp, #8
   1123c:	af00      	add	r7, sp, #0
   1123e:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
   11240:	4b11      	ldr	r3, [pc, #68]	; (11288 <addAlternateNumber+0x50>)
   11242:	789b      	ldrb	r3, [r3, #2]
   11244:	2b00      	cmp	r3, #0
   11246:	d019      	beq.n	1127c <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
   11248:	4b10      	ldr	r3, [pc, #64]	; (1128c <addAlternateNumber+0x54>)
   1124a:	2201      	movs	r2, #1
   1124c:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
   1124e:	687a      	ldr	r2, [r7, #4]
   11250:	4b0f      	ldr	r3, [pc, #60]	; (11290 <addAlternateNumber+0x58>)
   11252:	0011      	movs	r1, r2
   11254:	0018      	movs	r0, r3
   11256:	4b0f      	ldr	r3, [pc, #60]	; (11294 <addAlternateNumber+0x5c>)
   11258:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
   1125a:	4a0f      	ldr	r2, [pc, #60]	; (11298 <addAlternateNumber+0x60>)
   1125c:	4b0b      	ldr	r3, [pc, #44]	; (1128c <addAlternateNumber+0x54>)
   1125e:	0010      	movs	r0, r2
   11260:	0019      	movs	r1, r3
   11262:	2318      	movs	r3, #24
   11264:	001a      	movs	r2, r3
   11266:	4b0d      	ldr	r3, [pc, #52]	; (1129c <addAlternateNumber+0x64>)
   11268:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
   1126a:	4b0b      	ldr	r3, [pc, #44]	; (11298 <addAlternateNumber+0x60>)
   1126c:	0019      	movs	r1, r3
   1126e:	2018      	movs	r0, #24
   11270:	4b0b      	ldr	r3, [pc, #44]	; (112a0 <addAlternateNumber+0x68>)
   11272:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11274:	4b0b      	ldr	r3, [pc, #44]	; (112a4 <addAlternateNumber+0x6c>)
   11276:	4798      	blx	r3
		
		return true;
   11278:	2301      	movs	r3, #1
   1127a:	e000      	b.n	1127e <addAlternateNumber+0x46>
	}
	return false;
   1127c:	2300      	movs	r3, #0
}
   1127e:	0018      	movs	r0, r3
   11280:	46bd      	mov	sp, r7
   11282:	b002      	add	sp, #8
   11284:	bd80      	pop	{r7, pc}
   11286:	46c0      	nop			; (mov r8, r8)
   11288:	20000814 	.word	0x20000814
   1128c:	2000083c 	.word	0x2000083c
   11290:	20000840 	.word	0x20000840
   11294:	000298d7 	.word	0x000298d7
   11298:	20000784 	.word	0x20000784
   1129c:	00029621 	.word	0x00029621
   112a0:	00024251 	.word	0x00024251
   112a4:	000243f9 	.word	0x000243f9

000112a8 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
   112a8:	b580      	push	{r7, lr}
   112aa:	b082      	sub	sp, #8
   112ac:	af00      	add	r7, sp, #0
   112ae:	0002      	movs	r2, r0
   112b0:	1dfb      	adds	r3, r7, #7
   112b2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
   112b4:	1dfb      	adds	r3, r7, #7
   112b6:	781a      	ldrb	r2, [r3, #0]
   112b8:	4b09      	ldr	r3, [pc, #36]	; (112e0 <saveAutoStartSettings+0x38>)
   112ba:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   112bc:	4908      	ldr	r1, [pc, #32]	; (112e0 <saveAutoStartSettings+0x38>)
   112be:	4b09      	ldr	r3, [pc, #36]	; (112e4 <saveAutoStartSettings+0x3c>)
   112c0:	2230      	movs	r2, #48	; 0x30
   112c2:	0018      	movs	r0, r3
   112c4:	4b08      	ldr	r3, [pc, #32]	; (112e8 <saveAutoStartSettings+0x40>)
   112c6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   112c8:	4b06      	ldr	r3, [pc, #24]	; (112e4 <saveAutoStartSettings+0x3c>)
   112ca:	0019      	movs	r1, r3
   112cc:	201a      	movs	r0, #26
   112ce:	4b07      	ldr	r3, [pc, #28]	; (112ec <saveAutoStartSettings+0x44>)
   112d0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   112d2:	4b07      	ldr	r3, [pc, #28]	; (112f0 <saveAutoStartSettings+0x48>)
   112d4:	4798      	blx	r3
}
   112d6:	46c0      	nop			; (mov r8, r8)
   112d8:	46bd      	mov	sp, r7
   112da:	b002      	add	sp, #8
   112dc:	bd80      	pop	{r7, pc}
   112de:	46c0      	nop			; (mov r8, r8)
   112e0:	20000854 	.word	0x20000854
   112e4:	20000784 	.word	0x20000784
   112e8:	00029621 	.word	0x00029621
   112ec:	00024251 	.word	0x00024251
   112f0:	000243f9 	.word	0x000243f9

000112f4 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
   112f4:	b580      	push	{r7, lr}
   112f6:	b082      	sub	sp, #8
   112f8:	af00      	add	r7, sp, #0
   112fa:	0002      	movs	r2, r0
   112fc:	1dbb      	adds	r3, r7, #6
   112fe:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
   11300:	4b0a      	ldr	r3, [pc, #40]	; (1132c <saveAutoStartTimeSettings+0x38>)
   11302:	1dba      	adds	r2, r7, #6
   11304:	8812      	ldrh	r2, [r2, #0]
   11306:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11308:	4908      	ldr	r1, [pc, #32]	; (1132c <saveAutoStartTimeSettings+0x38>)
   1130a:	4b09      	ldr	r3, [pc, #36]	; (11330 <saveAutoStartTimeSettings+0x3c>)
   1130c:	2230      	movs	r2, #48	; 0x30
   1130e:	0018      	movs	r0, r3
   11310:	4b08      	ldr	r3, [pc, #32]	; (11334 <saveAutoStartTimeSettings+0x40>)
   11312:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11314:	4b06      	ldr	r3, [pc, #24]	; (11330 <saveAutoStartTimeSettings+0x3c>)
   11316:	0019      	movs	r1, r3
   11318:	201a      	movs	r0, #26
   1131a:	4b07      	ldr	r3, [pc, #28]	; (11338 <saveAutoStartTimeSettings+0x44>)
   1131c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1131e:	4b07      	ldr	r3, [pc, #28]	; (1133c <saveAutoStartTimeSettings+0x48>)
   11320:	4798      	blx	r3
}
   11322:	46c0      	nop			; (mov r8, r8)
   11324:	46bd      	mov	sp, r7
   11326:	b002      	add	sp, #8
   11328:	bd80      	pop	{r7, pc}
   1132a:	46c0      	nop			; (mov r8, r8)
   1132c:	20000854 	.word	0x20000854
   11330:	20000784 	.word	0x20000784
   11334:	00029621 	.word	0x00029621
   11338:	00024251 	.word	0x00024251
   1133c:	000243f9 	.word	0x000243f9

00011340 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
   11340:	b580      	push	{r7, lr}
   11342:	b082      	sub	sp, #8
   11344:	af00      	add	r7, sp, #0
   11346:	0002      	movs	r2, r0
   11348:	1dfb      	adds	r3, r7, #7
   1134a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
   1134c:	4b0a      	ldr	r3, [pc, #40]	; (11378 <saveDNDSettings+0x38>)
   1134e:	1dfa      	adds	r2, r7, #7
   11350:	7812      	ldrb	r2, [r2, #0]
   11352:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11354:	4908      	ldr	r1, [pc, #32]	; (11378 <saveDNDSettings+0x38>)
   11356:	4b09      	ldr	r3, [pc, #36]	; (1137c <saveDNDSettings+0x3c>)
   11358:	2230      	movs	r2, #48	; 0x30
   1135a:	0018      	movs	r0, r3
   1135c:	4b08      	ldr	r3, [pc, #32]	; (11380 <saveDNDSettings+0x40>)
   1135e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11360:	4b06      	ldr	r3, [pc, #24]	; (1137c <saveDNDSettings+0x3c>)
   11362:	0019      	movs	r1, r3
   11364:	201a      	movs	r0, #26
   11366:	4b07      	ldr	r3, [pc, #28]	; (11384 <saveDNDSettings+0x44>)
   11368:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1136a:	4b07      	ldr	r3, [pc, #28]	; (11388 <saveDNDSettings+0x48>)
   1136c:	4798      	blx	r3
}
   1136e:	46c0      	nop			; (mov r8, r8)
   11370:	46bd      	mov	sp, r7
   11372:	b002      	add	sp, #8
   11374:	bd80      	pop	{r7, pc}
   11376:	46c0      	nop			; (mov r8, r8)
   11378:	20000854 	.word	0x20000854
   1137c:	20000784 	.word	0x20000784
   11380:	00029621 	.word	0x00029621
   11384:	00024251 	.word	0x00024251
   11388:	000243f9 	.word	0x000243f9

0001138c <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
   1138c:	b580      	push	{r7, lr}
   1138e:	b082      	sub	sp, #8
   11390:	af00      	add	r7, sp, #0
   11392:	0002      	movs	r2, r0
   11394:	1dfb      	adds	r3, r7, #7
   11396:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
   11398:	4b0a      	ldr	r3, [pc, #40]	; (113c4 <saveResponseSettings+0x38>)
   1139a:	1dfa      	adds	r2, r7, #7
   1139c:	7812      	ldrb	r2, [r2, #0]
   1139e:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   113a0:	4908      	ldr	r1, [pc, #32]	; (113c4 <saveResponseSettings+0x38>)
   113a2:	4b09      	ldr	r3, [pc, #36]	; (113c8 <saveResponseSettings+0x3c>)
   113a4:	2230      	movs	r2, #48	; 0x30
   113a6:	0018      	movs	r0, r3
   113a8:	4b08      	ldr	r3, [pc, #32]	; (113cc <saveResponseSettings+0x40>)
   113aa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   113ac:	4b06      	ldr	r3, [pc, #24]	; (113c8 <saveResponseSettings+0x3c>)
   113ae:	0019      	movs	r1, r3
   113b0:	201a      	movs	r0, #26
   113b2:	4b07      	ldr	r3, [pc, #28]	; (113d0 <saveResponseSettings+0x44>)
   113b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   113b6:	4b07      	ldr	r3, [pc, #28]	; (113d4 <saveResponseSettings+0x48>)
   113b8:	4798      	blx	r3
}
   113ba:	46c0      	nop			; (mov r8, r8)
   113bc:	46bd      	mov	sp, r7
   113be:	b002      	add	sp, #8
   113c0:	bd80      	pop	{r7, pc}
   113c2:	46c0      	nop			; (mov r8, r8)
   113c4:	20000854 	.word	0x20000854
   113c8:	20000784 	.word	0x20000784
   113cc:	00029621 	.word	0x00029621
   113d0:	00024251 	.word	0x00024251
   113d4:	000243f9 	.word	0x000243f9

000113d8 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
   113d8:	b5b0      	push	{r4, r5, r7, lr}
   113da:	b082      	sub	sp, #8
   113dc:	af00      	add	r7, sp, #0
   113de:	0005      	movs	r5, r0
   113e0:	000c      	movs	r4, r1
   113e2:	0010      	movs	r0, r2
   113e4:	0019      	movs	r1, r3
   113e6:	1dfb      	adds	r3, r7, #7
   113e8:	1c2a      	adds	r2, r5, #0
   113ea:	701a      	strb	r2, [r3, #0]
   113ec:	1dbb      	adds	r3, r7, #6
   113ee:	1c22      	adds	r2, r4, #0
   113f0:	701a      	strb	r2, [r3, #0]
   113f2:	1d7b      	adds	r3, r7, #5
   113f4:	1c02      	adds	r2, r0, #0
   113f6:	701a      	strb	r2, [r3, #0]
   113f8:	1d3b      	adds	r3, r7, #4
   113fa:	1c0a      	adds	r2, r1, #0
   113fc:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
   113fe:	1dfb      	adds	r3, r7, #7
   11400:	781a      	ldrb	r2, [r3, #0]
   11402:	4b14      	ldr	r3, [pc, #80]	; (11454 <saveNoCallSettings+0x7c>)
   11404:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
   11406:	4b13      	ldr	r3, [pc, #76]	; (11454 <saveNoCallSettings+0x7c>)
   11408:	7a5b      	ldrb	r3, [r3, #9]
   1140a:	b2db      	uxtb	r3, r3
   1140c:	2b00      	cmp	r3, #0
   1140e:	d010      	beq.n	11432 <saveNoCallSettings+0x5a>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
   11410:	4b10      	ldr	r3, [pc, #64]	; (11454 <saveNoCallSettings+0x7c>)
   11412:	1dba      	adds	r2, r7, #6
   11414:	7812      	ldrb	r2, [r2, #0]
   11416:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
   11418:	4b0e      	ldr	r3, [pc, #56]	; (11454 <saveNoCallSettings+0x7c>)
   1141a:	1d7a      	adds	r2, r7, #5
   1141c:	7812      	ldrb	r2, [r2, #0]
   1141e:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
   11420:	4b0c      	ldr	r3, [pc, #48]	; (11454 <saveNoCallSettings+0x7c>)
   11422:	1d3a      	adds	r2, r7, #4
   11424:	7812      	ldrb	r2, [r2, #0]
   11426:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
   11428:	4b0a      	ldr	r3, [pc, #40]	; (11454 <saveNoCallSettings+0x7c>)
   1142a:	2218      	movs	r2, #24
   1142c:	18ba      	adds	r2, r7, r2
   1142e:	7812      	ldrb	r2, [r2, #0]
   11430:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11432:	4908      	ldr	r1, [pc, #32]	; (11454 <saveNoCallSettings+0x7c>)
   11434:	4b08      	ldr	r3, [pc, #32]	; (11458 <saveNoCallSettings+0x80>)
   11436:	2230      	movs	r2, #48	; 0x30
   11438:	0018      	movs	r0, r3
   1143a:	4b08      	ldr	r3, [pc, #32]	; (1145c <saveNoCallSettings+0x84>)
   1143c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1143e:	4b06      	ldr	r3, [pc, #24]	; (11458 <saveNoCallSettings+0x80>)
   11440:	0019      	movs	r1, r3
   11442:	201a      	movs	r0, #26
   11444:	4b06      	ldr	r3, [pc, #24]	; (11460 <saveNoCallSettings+0x88>)
   11446:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11448:	4b06      	ldr	r3, [pc, #24]	; (11464 <saveNoCallSettings+0x8c>)
   1144a:	4798      	blx	r3
}
   1144c:	46c0      	nop			; (mov r8, r8)
   1144e:	46bd      	mov	sp, r7
   11450:	b002      	add	sp, #8
   11452:	bdb0      	pop	{r4, r5, r7, pc}
   11454:	20000854 	.word	0x20000854
   11458:	20000784 	.word	0x20000784
   1145c:	00029621 	.word	0x00029621
   11460:	00024251 	.word	0x00024251
   11464:	000243f9 	.word	0x000243f9

00011468 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
   11468:	b580      	push	{r7, lr}
   1146a:	b082      	sub	sp, #8
   1146c:	af00      	add	r7, sp, #0
   1146e:	0002      	movs	r2, r0
   11470:	1dfb      	adds	r3, r7, #7
   11472:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
   11474:	1dfb      	adds	r3, r7, #7
   11476:	781a      	ldrb	r2, [r3, #0]
   11478:	4b09      	ldr	r3, [pc, #36]	; (114a0 <saveWaterBypassSettings+0x38>)
   1147a:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1147c:	4908      	ldr	r1, [pc, #32]	; (114a0 <saveWaterBypassSettings+0x38>)
   1147e:	4b09      	ldr	r3, [pc, #36]	; (114a4 <saveWaterBypassSettings+0x3c>)
   11480:	2230      	movs	r2, #48	; 0x30
   11482:	0018      	movs	r0, r3
   11484:	4b08      	ldr	r3, [pc, #32]	; (114a8 <saveWaterBypassSettings+0x40>)
   11486:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11488:	4b06      	ldr	r3, [pc, #24]	; (114a4 <saveWaterBypassSettings+0x3c>)
   1148a:	0019      	movs	r1, r3
   1148c:	201a      	movs	r0, #26
   1148e:	4b07      	ldr	r3, [pc, #28]	; (114ac <saveWaterBypassSettings+0x44>)
   11490:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11492:	4b07      	ldr	r3, [pc, #28]	; (114b0 <saveWaterBypassSettings+0x48>)
   11494:	4798      	blx	r3
}
   11496:	46c0      	nop			; (mov r8, r8)
   11498:	46bd      	mov	sp, r7
   1149a:	b002      	add	sp, #8
   1149c:	bd80      	pop	{r7, pc}
   1149e:	46c0      	nop			; (mov r8, r8)
   114a0:	20000854 	.word	0x20000854
   114a4:	20000784 	.word	0x20000784
   114a8:	00029621 	.word	0x00029621
   114ac:	00024251 	.word	0x00024251
   114b0:	000243f9 	.word	0x000243f9

000114b4 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
   114b4:	b580      	push	{r7, lr}
   114b6:	b082      	sub	sp, #8
   114b8:	af00      	add	r7, sp, #0
   114ba:	0002      	movs	r2, r0
   114bc:	1dfb      	adds	r3, r7, #7
   114be:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
   114c0:	1dfb      	adds	r3, r7, #7
   114c2:	781a      	ldrb	r2, [r3, #0]
   114c4:	4b09      	ldr	r3, [pc, #36]	; (114ec <savePreventOverFlowSettings+0x38>)
   114c6:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   114c8:	4908      	ldr	r1, [pc, #32]	; (114ec <savePreventOverFlowSettings+0x38>)
   114ca:	4b09      	ldr	r3, [pc, #36]	; (114f0 <savePreventOverFlowSettings+0x3c>)
   114cc:	2230      	movs	r2, #48	; 0x30
   114ce:	0018      	movs	r0, r3
   114d0:	4b08      	ldr	r3, [pc, #32]	; (114f4 <savePreventOverFlowSettings+0x40>)
   114d2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   114d4:	4b06      	ldr	r3, [pc, #24]	; (114f0 <savePreventOverFlowSettings+0x3c>)
   114d6:	0019      	movs	r1, r3
   114d8:	201a      	movs	r0, #26
   114da:	4b07      	ldr	r3, [pc, #28]	; (114f8 <savePreventOverFlowSettings+0x44>)
   114dc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   114de:	4b07      	ldr	r3, [pc, #28]	; (114fc <savePreventOverFlowSettings+0x48>)
   114e0:	4798      	blx	r3
}
   114e2:	46c0      	nop			; (mov r8, r8)
   114e4:	46bd      	mov	sp, r7
   114e6:	b002      	add	sp, #8
   114e8:	bd80      	pop	{r7, pc}
   114ea:	46c0      	nop			; (mov r8, r8)
   114ec:	20000854 	.word	0x20000854
   114f0:	20000784 	.word	0x20000784
   114f4:	00029621 	.word	0x00029621
   114f8:	00024251 	.word	0x00024251
   114fc:	000243f9 	.word	0x000243f9

00011500 <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
   11500:	b580      	push	{r7, lr}
   11502:	b082      	sub	sp, #8
   11504:	af00      	add	r7, sp, #0
   11506:	0002      	movs	r2, r0
   11508:	1dfb      	adds	r3, r7, #7
   1150a:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
   1150c:	1dfb      	adds	r3, r7, #7
   1150e:	781b      	ldrb	r3, [r3, #0]
   11510:	2b64      	cmp	r3, #100	; 0x64
   11512:	d919      	bls.n	11548 <setOverloadPer+0x48>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
   11514:	4b0f      	ldr	r3, [pc, #60]	; (11554 <setOverloadPer+0x54>)
   11516:	1dfa      	adds	r2, r7, #7
   11518:	7812      	ldrb	r2, [r2, #0]
   1151a:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1151c:	490d      	ldr	r1, [pc, #52]	; (11554 <setOverloadPer+0x54>)
   1151e:	4b0e      	ldr	r3, [pc, #56]	; (11558 <setOverloadPer+0x58>)
   11520:	2230      	movs	r2, #48	; 0x30
   11522:	0018      	movs	r0, r3
   11524:	4b0d      	ldr	r3, [pc, #52]	; (1155c <setOverloadPer+0x5c>)
   11526:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11528:	4b0b      	ldr	r3, [pc, #44]	; (11558 <setOverloadPer+0x58>)
   1152a:	0019      	movs	r1, r3
   1152c:	201a      	movs	r0, #26
   1152e:	4b0c      	ldr	r3, [pc, #48]	; (11560 <setOverloadPer+0x60>)
   11530:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   11532:	4b0c      	ldr	r3, [pc, #48]	; (11564 <setOverloadPer+0x64>)
   11534:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
   11536:	4b07      	ldr	r3, [pc, #28]	; (11554 <setOverloadPer+0x54>)
   11538:	7bdb      	ldrb	r3, [r3, #15]
   1153a:	b2db      	uxtb	r3, r3
   1153c:	2b00      	cmp	r3, #0
   1153e:	d001      	beq.n	11544 <setOverloadPer+0x44>
		{
			calcCurrentValues();
   11540:	4b09      	ldr	r3, [pc, #36]	; (11568 <setOverloadPer+0x68>)
   11542:	4798      	blx	r3
		}
		return true;
   11544:	2301      	movs	r3, #1
   11546:	e000      	b.n	1154a <setOverloadPer+0x4a>
	}
	return false;
   11548:	2300      	movs	r3, #0
}
   1154a:	0018      	movs	r0, r3
   1154c:	46bd      	mov	sp, r7
   1154e:	b002      	add	sp, #8
   11550:	bd80      	pop	{r7, pc}
   11552:	46c0      	nop			; (mov r8, r8)
   11554:	20000854 	.word	0x20000854
   11558:	20000784 	.word	0x20000784
   1155c:	00029621 	.word	0x00029621
   11560:	00024251 	.word	0x00024251
   11564:	000243f9 	.word	0x000243f9
   11568:	000117ed 	.word	0x000117ed

0001156c <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
   1156c:	b580      	push	{r7, lr}
   1156e:	b082      	sub	sp, #8
   11570:	af00      	add	r7, sp, #0
   11572:	0002      	movs	r2, r0
   11574:	1dfb      	adds	r3, r7, #7
   11576:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
   11578:	1dfb      	adds	r3, r7, #7
   1157a:	781b      	ldrb	r3, [r3, #0]
   1157c:	2b00      	cmp	r3, #0
   1157e:	d01d      	beq.n	115bc <setUnderloadPer+0x50>
   11580:	1dfb      	adds	r3, r7, #7
   11582:	781b      	ldrb	r3, [r3, #0]
   11584:	2b63      	cmp	r3, #99	; 0x63
   11586:	d819      	bhi.n	115bc <setUnderloadPer+0x50>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
   11588:	4b0f      	ldr	r3, [pc, #60]	; (115c8 <setUnderloadPer+0x5c>)
   1158a:	1dfa      	adds	r2, r7, #7
   1158c:	7812      	ldrb	r2, [r2, #0]
   1158e:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11590:	490d      	ldr	r1, [pc, #52]	; (115c8 <setUnderloadPer+0x5c>)
   11592:	4b0e      	ldr	r3, [pc, #56]	; (115cc <setUnderloadPer+0x60>)
   11594:	2230      	movs	r2, #48	; 0x30
   11596:	0018      	movs	r0, r3
   11598:	4b0d      	ldr	r3, [pc, #52]	; (115d0 <setUnderloadPer+0x64>)
   1159a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1159c:	4b0b      	ldr	r3, [pc, #44]	; (115cc <setUnderloadPer+0x60>)
   1159e:	0019      	movs	r1, r3
   115a0:	201a      	movs	r0, #26
   115a2:	4b0c      	ldr	r3, [pc, #48]	; (115d4 <setUnderloadPer+0x68>)
   115a4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   115a6:	4b0c      	ldr	r3, [pc, #48]	; (115d8 <setUnderloadPer+0x6c>)
   115a8:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
   115aa:	4b07      	ldr	r3, [pc, #28]	; (115c8 <setUnderloadPer+0x5c>)
   115ac:	7bdb      	ldrb	r3, [r3, #15]
   115ae:	b2db      	uxtb	r3, r3
   115b0:	2b00      	cmp	r3, #0
   115b2:	d001      	beq.n	115b8 <setUnderloadPer+0x4c>
		{
			calcCurrentValues();
   115b4:	4b09      	ldr	r3, [pc, #36]	; (115dc <setUnderloadPer+0x70>)
   115b6:	4798      	blx	r3
		}
		return true;
   115b8:	2301      	movs	r3, #1
   115ba:	e000      	b.n	115be <setUnderloadPer+0x52>
	}
	return false;
   115bc:	2300      	movs	r3, #0
}
   115be:	0018      	movs	r0, r3
   115c0:	46bd      	mov	sp, r7
   115c2:	b002      	add	sp, #8
   115c4:	bd80      	pop	{r7, pc}
   115c6:	46c0      	nop			; (mov r8, r8)
   115c8:	20000854 	.word	0x20000854
   115cc:	20000784 	.word	0x20000784
   115d0:	00029621 	.word	0x00029621
   115d4:	00024251 	.word	0x00024251
   115d8:	000243f9 	.word	0x000243f9
   115dc:	000117ed 	.word	0x000117ed

000115e0 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
   115e0:	b580      	push	{r7, lr}
   115e2:	b082      	sub	sp, #8
   115e4:	af00      	add	r7, sp, #0
   115e6:	0002      	movs	r2, r0
   115e8:	1dfb      	adds	r3, r7, #7
   115ea:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
   115ec:	1dfb      	adds	r3, r7, #7
   115ee:	7819      	ldrb	r1, [r3, #0]
   115f0:	4b09      	ldr	r3, [pc, #36]	; (11618 <saveSinglePhasingSettings+0x38>)
   115f2:	2220      	movs	r2, #32
   115f4:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   115f6:	4908      	ldr	r1, [pc, #32]	; (11618 <saveSinglePhasingSettings+0x38>)
   115f8:	4b08      	ldr	r3, [pc, #32]	; (1161c <saveSinglePhasingSettings+0x3c>)
   115fa:	2230      	movs	r2, #48	; 0x30
   115fc:	0018      	movs	r0, r3
   115fe:	4b08      	ldr	r3, [pc, #32]	; (11620 <saveSinglePhasingSettings+0x40>)
   11600:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11602:	4b06      	ldr	r3, [pc, #24]	; (1161c <saveSinglePhasingSettings+0x3c>)
   11604:	0019      	movs	r1, r3
   11606:	201a      	movs	r0, #26
   11608:	4b06      	ldr	r3, [pc, #24]	; (11624 <saveSinglePhasingSettings+0x44>)
   1160a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1160c:	4b06      	ldr	r3, [pc, #24]	; (11628 <saveSinglePhasingSettings+0x48>)
   1160e:	4798      	blx	r3
}
   11610:	46c0      	nop			; (mov r8, r8)
   11612:	46bd      	mov	sp, r7
   11614:	b002      	add	sp, #8
   11616:	bd80      	pop	{r7, pc}
   11618:	20000854 	.word	0x20000854
   1161c:	20000784 	.word	0x20000784
   11620:	00029621 	.word	0x00029621
   11624:	00024251 	.word	0x00024251
   11628:	000243f9 	.word	0x000243f9

0001162c <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
   1162c:	b580      	push	{r7, lr}
   1162e:	b082      	sub	sp, #8
   11630:	af00      	add	r7, sp, #0
   11632:	0002      	movs	r2, r0
   11634:	1dbb      	adds	r3, r7, #6
   11636:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
   11638:	4b0a      	ldr	r3, [pc, #40]	; (11664 <saveSinglePhasingVoltage+0x38>)
   1163a:	1dba      	adds	r2, r7, #6
   1163c:	8812      	ldrh	r2, [r2, #0]
   1163e:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11640:	4908      	ldr	r1, [pc, #32]	; (11664 <saveSinglePhasingVoltage+0x38>)
   11642:	4b09      	ldr	r3, [pc, #36]	; (11668 <saveSinglePhasingVoltage+0x3c>)
   11644:	2230      	movs	r2, #48	; 0x30
   11646:	0018      	movs	r0, r3
   11648:	4b08      	ldr	r3, [pc, #32]	; (1166c <saveSinglePhasingVoltage+0x40>)
   1164a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1164c:	4b06      	ldr	r3, [pc, #24]	; (11668 <saveSinglePhasingVoltage+0x3c>)
   1164e:	0019      	movs	r1, r3
   11650:	201a      	movs	r0, #26
   11652:	4b07      	ldr	r3, [pc, #28]	; (11670 <saveSinglePhasingVoltage+0x44>)
   11654:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11656:	4b07      	ldr	r3, [pc, #28]	; (11674 <saveSinglePhasingVoltage+0x48>)
   11658:	4798      	blx	r3
}
   1165a:	46c0      	nop			; (mov r8, r8)
   1165c:	46bd      	mov	sp, r7
   1165e:	b002      	add	sp, #8
   11660:	bd80      	pop	{r7, pc}
   11662:	46c0      	nop			; (mov r8, r8)
   11664:	20000854 	.word	0x20000854
   11668:	20000784 	.word	0x20000784
   1166c:	00029621 	.word	0x00029621
   11670:	00024251 	.word	0x00024251
   11674:	000243f9 	.word	0x000243f9

00011678 <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
   11678:	b580      	push	{r7, lr}
   1167a:	b082      	sub	sp, #8
   1167c:	af00      	add	r7, sp, #0
   1167e:	0002      	movs	r2, r0
   11680:	1dfb      	adds	r3, r7, #7
   11682:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
   11684:	1dfb      	adds	r3, r7, #7
   11686:	7819      	ldrb	r1, [r3, #0]
   11688:	4b09      	ldr	r3, [pc, #36]	; (116b0 <savePhaseSequenceProtectionSettings+0x38>)
   1168a:	2224      	movs	r2, #36	; 0x24
   1168c:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1168e:	4908      	ldr	r1, [pc, #32]	; (116b0 <savePhaseSequenceProtectionSettings+0x38>)
   11690:	4b08      	ldr	r3, [pc, #32]	; (116b4 <savePhaseSequenceProtectionSettings+0x3c>)
   11692:	2230      	movs	r2, #48	; 0x30
   11694:	0018      	movs	r0, r3
   11696:	4b08      	ldr	r3, [pc, #32]	; (116b8 <savePhaseSequenceProtectionSettings+0x40>)
   11698:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1169a:	4b06      	ldr	r3, [pc, #24]	; (116b4 <savePhaseSequenceProtectionSettings+0x3c>)
   1169c:	0019      	movs	r1, r3
   1169e:	201a      	movs	r0, #26
   116a0:	4b06      	ldr	r3, [pc, #24]	; (116bc <savePhaseSequenceProtectionSettings+0x44>)
   116a2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116a4:	4b06      	ldr	r3, [pc, #24]	; (116c0 <savePhaseSequenceProtectionSettings+0x48>)
   116a6:	4798      	blx	r3
}
   116a8:	46c0      	nop			; (mov r8, r8)
   116aa:	46bd      	mov	sp, r7
   116ac:	b002      	add	sp, #8
   116ae:	bd80      	pop	{r7, pc}
   116b0:	20000854 	.word	0x20000854
   116b4:	20000784 	.word	0x20000784
   116b8:	00029621 	.word	0x00029621
   116bc:	00024251 	.word	0x00024251
   116c0:	000243f9 	.word	0x000243f9

000116c4 <saveUnderOverDetectionMethodSettings>:


void saveUnderOverDetectionMethodSettings(uint8_t oumethodDetection)
{
   116c4:	b580      	push	{r7, lr}
   116c6:	b082      	sub	sp, #8
   116c8:	af00      	add	r7, sp, #0
   116ca:	0002      	movs	r2, r0
   116cc:	1dfb      	adds	r3, r7, #7
   116ce:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.over_under_DetectionMethod = oumethodDetection;
   116d0:	4b0a      	ldr	r3, [pc, #40]	; (116fc <saveUnderOverDetectionMethodSettings+0x38>)
   116d2:	1dfa      	adds	r2, r7, #7
   116d4:	2126      	movs	r1, #38	; 0x26
   116d6:	7812      	ldrb	r2, [r2, #0]
   116d8:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   116da:	4908      	ldr	r1, [pc, #32]	; (116fc <saveUnderOverDetectionMethodSettings+0x38>)
   116dc:	4b08      	ldr	r3, [pc, #32]	; (11700 <saveUnderOverDetectionMethodSettings+0x3c>)
   116de:	2230      	movs	r2, #48	; 0x30
   116e0:	0018      	movs	r0, r3
   116e2:	4b08      	ldr	r3, [pc, #32]	; (11704 <saveUnderOverDetectionMethodSettings+0x40>)
   116e4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   116e6:	4b06      	ldr	r3, [pc, #24]	; (11700 <saveUnderOverDetectionMethodSettings+0x3c>)
   116e8:	0019      	movs	r1, r3
   116ea:	201a      	movs	r0, #26
   116ec:	4b06      	ldr	r3, [pc, #24]	; (11708 <saveUnderOverDetectionMethodSettings+0x44>)
   116ee:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   116f0:	4b06      	ldr	r3, [pc, #24]	; (1170c <saveUnderOverDetectionMethodSettings+0x48>)
   116f2:	4798      	blx	r3
}
   116f4:	46c0      	nop			; (mov r8, r8)
   116f6:	46bd      	mov	sp, r7
   116f8:	b002      	add	sp, #8
   116fa:	bd80      	pop	{r7, pc}
   116fc:	20000854 	.word	0x20000854
   11700:	20000784 	.word	0x20000784
   11704:	00029621 	.word	0x00029621
   11708:	00024251 	.word	0x00024251
   1170c:	000243f9 	.word	0x000243f9

00011710 <saveMotorVoltageBypassSettings>:

void saveMotorVoltageBypassSettings(bool flag)
{
   11710:	b580      	push	{r7, lr}
   11712:	b082      	sub	sp, #8
   11714:	af00      	add	r7, sp, #0
   11716:	0002      	movs	r2, r0
   11718:	1dfb      	adds	r3, r7, #7
   1171a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.motorVoltageBypass=flag;
   1171c:	1dfb      	adds	r3, r7, #7
   1171e:	7819      	ldrb	r1, [r3, #0]
   11720:	4b09      	ldr	r3, [pc, #36]	; (11748 <saveMotorVoltageBypassSettings+0x38>)
   11722:	2227      	movs	r2, #39	; 0x27
   11724:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11726:	4908      	ldr	r1, [pc, #32]	; (11748 <saveMotorVoltageBypassSettings+0x38>)
   11728:	4b08      	ldr	r3, [pc, #32]	; (1174c <saveMotorVoltageBypassSettings+0x3c>)
   1172a:	2230      	movs	r2, #48	; 0x30
   1172c:	0018      	movs	r0, r3
   1172e:	4b08      	ldr	r3, [pc, #32]	; (11750 <saveMotorVoltageBypassSettings+0x40>)
   11730:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11732:	4b06      	ldr	r3, [pc, #24]	; (1174c <saveMotorVoltageBypassSettings+0x3c>)
   11734:	0019      	movs	r1, r3
   11736:	201a      	movs	r0, #26
   11738:	4b06      	ldr	r3, [pc, #24]	; (11754 <saveMotorVoltageBypassSettings+0x44>)
   1173a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   1173c:	4b06      	ldr	r3, [pc, #24]	; (11758 <saveMotorVoltageBypassSettings+0x48>)
   1173e:	4798      	blx	r3
}
   11740:	46c0      	nop			; (mov r8, r8)
   11742:	46bd      	mov	sp, r7
   11744:	b002      	add	sp, #8
   11746:	bd80      	pop	{r7, pc}
   11748:	20000854 	.word	0x20000854
   1174c:	20000784 	.word	0x20000784
   11750:	00029621 	.word	0x00029621
   11754:	00024251 	.word	0x00024251
   11758:	000243f9 	.word	0x000243f9

0001175c <saveMotorVoltageBypasssTimeSettings>:

void saveMotorVoltageBypasssTimeSettings(uint32_t value)
{
   1175c:	b580      	push	{r7, lr}
   1175e:	b082      	sub	sp, #8
   11760:	af00      	add	r7, sp, #0
   11762:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.motorVoltageBypassTime=value;
   11764:	4b09      	ldr	r3, [pc, #36]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x30>)
   11766:	687a      	ldr	r2, [r7, #4]
   11768:	629a      	str	r2, [r3, #40]	; 0x28
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1176a:	4908      	ldr	r1, [pc, #32]	; (1178c <saveMotorVoltageBypasssTimeSettings+0x30>)
   1176c:	4b08      	ldr	r3, [pc, #32]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x34>)
   1176e:	2230      	movs	r2, #48	; 0x30
   11770:	0018      	movs	r0, r3
   11772:	4b08      	ldr	r3, [pc, #32]	; (11794 <saveMotorVoltageBypasssTimeSettings+0x38>)
   11774:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11776:	4b06      	ldr	r3, [pc, #24]	; (11790 <saveMotorVoltageBypasssTimeSettings+0x34>)
   11778:	0019      	movs	r1, r3
   1177a:	201a      	movs	r0, #26
   1177c:	4b06      	ldr	r3, [pc, #24]	; (11798 <saveMotorVoltageBypasssTimeSettings+0x3c>)
   1177e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11780:	4b06      	ldr	r3, [pc, #24]	; (1179c <saveMotorVoltageBypasssTimeSettings+0x40>)
   11782:	4798      	blx	r3
}
   11784:	46c0      	nop			; (mov r8, r8)
   11786:	46bd      	mov	sp, r7
   11788:	b002      	add	sp, #8
   1178a:	bd80      	pop	{r7, pc}
   1178c:	20000854 	.word	0x20000854
   11790:	20000784 	.word	0x20000784
   11794:	00029621 	.word	0x00029621
   11798:	00024251 	.word	0x00024251
   1179c:	000243f9 	.word	0x000243f9

000117a0 <saveMotorFeedbackDetectionSettings>:

void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
   117a0:	b580      	push	{r7, lr}
   117a2:	b082      	sub	sp, #8
   117a4:	af00      	add	r7, sp, #0
   117a6:	0002      	movs	r2, r0
   117a8:	1dfb      	adds	r3, r7, #7
   117aa:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
   117ac:	4b0a      	ldr	r3, [pc, #40]	; (117d8 <saveMotorFeedbackDetectionSettings+0x38>)
   117ae:	1dfa      	adds	r2, r7, #7
   117b0:	2125      	movs	r1, #37	; 0x25
   117b2:	7812      	ldrb	r2, [r2, #0]
   117b4:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   117b6:	4908      	ldr	r1, [pc, #32]	; (117d8 <saveMotorFeedbackDetectionSettings+0x38>)
   117b8:	4b08      	ldr	r3, [pc, #32]	; (117dc <saveMotorFeedbackDetectionSettings+0x3c>)
   117ba:	2230      	movs	r2, #48	; 0x30
   117bc:	0018      	movs	r0, r3
   117be:	4b08      	ldr	r3, [pc, #32]	; (117e0 <saveMotorFeedbackDetectionSettings+0x40>)
   117c0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   117c2:	4b06      	ldr	r3, [pc, #24]	; (117dc <saveMotorFeedbackDetectionSettings+0x3c>)
   117c4:	0019      	movs	r1, r3
   117c6:	201a      	movs	r0, #26
   117c8:	4b06      	ldr	r3, [pc, #24]	; (117e4 <saveMotorFeedbackDetectionSettings+0x44>)
   117ca:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   117cc:	4b06      	ldr	r3, [pc, #24]	; (117e8 <saveMotorFeedbackDetectionSettings+0x48>)
   117ce:	4798      	blx	r3
}
   117d0:	46c0      	nop			; (mov r8, r8)
   117d2:	46bd      	mov	sp, r7
   117d4:	b002      	add	sp, #8
   117d6:	bd80      	pop	{r7, pc}
   117d8:	20000854 	.word	0x20000854
   117dc:	20000784 	.word	0x20000784
   117e0:	00029621 	.word	0x00029621
   117e4:	00024251 	.word	0x00024251
   117e8:	000243f9 	.word	0x000243f9

000117ec <calcCurrentValues>:


void calcCurrentValues(void)
{
   117ec:	b590      	push	{r4, r7, lr}
   117ee:	b083      	sub	sp, #12
   117f0:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
   117f2:	4b2c      	ldr	r3, [pc, #176]	; (118a4 <calcCurrentValues+0xb8>)
   117f4:	691a      	ldr	r2, [r3, #16]
   117f6:	4b2c      	ldr	r3, [pc, #176]	; (118a8 <calcCurrentValues+0xbc>)
   117f8:	0010      	movs	r0, r2
   117fa:	4798      	blx	r3
   117fc:	1c04      	adds	r4, r0, #0
   117fe:	4b29      	ldr	r3, [pc, #164]	; (118a4 <calcCurrentValues+0xb8>)
   11800:	7f1b      	ldrb	r3, [r3, #28]
   11802:	b2da      	uxtb	r2, r3
   11804:	4b28      	ldr	r3, [pc, #160]	; (118a8 <calcCurrentValues+0xbc>)
   11806:	0010      	movs	r0, r2
   11808:	4798      	blx	r3
   1180a:	1c02      	adds	r2, r0, #0
   1180c:	4b27      	ldr	r3, [pc, #156]	; (118ac <calcCurrentValues+0xc0>)
   1180e:	1c11      	adds	r1, r2, #0
   11810:	1c20      	adds	r0, r4, #0
   11812:	4798      	blx	r3
   11814:	1c03      	adds	r3, r0, #0
   11816:	1c1a      	adds	r2, r3, #0
   11818:	4b25      	ldr	r3, [pc, #148]	; (118b0 <calcCurrentValues+0xc4>)
   1181a:	1c10      	adds	r0, r2, #0
   1181c:	4798      	blx	r3
   1181e:	4c25      	ldr	r4, [pc, #148]	; (118b4 <calcCurrentValues+0xc8>)
   11820:	2200      	movs	r2, #0
   11822:	4b25      	ldr	r3, [pc, #148]	; (118b8 <calcCurrentValues+0xcc>)
   11824:	47a0      	blx	r4
   11826:	0003      	movs	r3, r0
   11828:	000c      	movs	r4, r1
   1182a:	0019      	movs	r1, r3
   1182c:	0022      	movs	r2, r4
   1182e:	1dbc      	adds	r4, r7, #6
   11830:	4b22      	ldr	r3, [pc, #136]	; (118bc <calcCurrentValues+0xd0>)
   11832:	0008      	movs	r0, r1
   11834:	0011      	movs	r1, r2
   11836:	4798      	blx	r3
   11838:	0003      	movs	r3, r0
   1183a:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
   1183c:	1dbb      	adds	r3, r7, #6
   1183e:	881b      	ldrh	r3, [r3, #0]
   11840:	0018      	movs	r0, r3
   11842:	4b1f      	ldr	r3, [pc, #124]	; (118c0 <calcCurrentValues+0xd4>)
   11844:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
   11846:	4b17      	ldr	r3, [pc, #92]	; (118a4 <calcCurrentValues+0xb8>)
   11848:	691a      	ldr	r2, [r3, #16]
   1184a:	4b17      	ldr	r3, [pc, #92]	; (118a8 <calcCurrentValues+0xbc>)
   1184c:	0010      	movs	r0, r2
   1184e:	4798      	blx	r3
   11850:	1c04      	adds	r4, r0, #0
   11852:	4b14      	ldr	r3, [pc, #80]	; (118a4 <calcCurrentValues+0xb8>)
   11854:	7f5b      	ldrb	r3, [r3, #29]
   11856:	b2da      	uxtb	r2, r3
   11858:	4b13      	ldr	r3, [pc, #76]	; (118a8 <calcCurrentValues+0xbc>)
   1185a:	0010      	movs	r0, r2
   1185c:	4798      	blx	r3
   1185e:	1c02      	adds	r2, r0, #0
   11860:	4b12      	ldr	r3, [pc, #72]	; (118ac <calcCurrentValues+0xc0>)
   11862:	1c11      	adds	r1, r2, #0
   11864:	1c20      	adds	r0, r4, #0
   11866:	4798      	blx	r3
   11868:	1c03      	adds	r3, r0, #0
   1186a:	1c1a      	adds	r2, r3, #0
   1186c:	4b10      	ldr	r3, [pc, #64]	; (118b0 <calcCurrentValues+0xc4>)
   1186e:	1c10      	adds	r0, r2, #0
   11870:	4798      	blx	r3
   11872:	4c10      	ldr	r4, [pc, #64]	; (118b4 <calcCurrentValues+0xc8>)
   11874:	2200      	movs	r2, #0
   11876:	4b10      	ldr	r3, [pc, #64]	; (118b8 <calcCurrentValues+0xcc>)
   11878:	47a0      	blx	r4
   1187a:	0003      	movs	r3, r0
   1187c:	000c      	movs	r4, r1
   1187e:	0019      	movs	r1, r3
   11880:	0022      	movs	r2, r4
   11882:	1dbc      	adds	r4, r7, #6
   11884:	4b0d      	ldr	r3, [pc, #52]	; (118bc <calcCurrentValues+0xd0>)
   11886:	0008      	movs	r0, r1
   11888:	0011      	movs	r1, r2
   1188a:	4798      	blx	r3
   1188c:	0003      	movs	r3, r0
   1188e:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
   11890:	1dbb      	adds	r3, r7, #6
   11892:	881b      	ldrh	r3, [r3, #0]
   11894:	0018      	movs	r0, r3
   11896:	4b0b      	ldr	r3, [pc, #44]	; (118c4 <calcCurrentValues+0xd8>)
   11898:	4798      	blx	r3
}
   1189a:	46c0      	nop			; (mov r8, r8)
   1189c:	46bd      	mov	sp, r7
   1189e:	b003      	add	sp, #12
   118a0:	bd90      	pop	{r4, r7, pc}
   118a2:	46c0      	nop			; (mov r8, r8)
   118a4:	20000854 	.word	0x20000854
   118a8:	00027869 	.word	0x00027869
   118ac:	00027629 	.word	0x00027629
   118b0:	00029445 	.word	0x00029445
   118b4:	00027f15 	.word	0x00027f15
   118b8:	40590000 	.word	0x40590000
   118bc:	000271dd 	.word	0x000271dd
   118c0:	000118c9 	.word	0x000118c9
   118c4:	0001190d 	.word	0x0001190d

000118c8 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
   118c8:	b580      	push	{r7, lr}
   118ca:	b082      	sub	sp, #8
   118cc:	af00      	add	r7, sp, #0
   118ce:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
   118d0:	4b09      	ldr	r3, [pc, #36]	; (118f8 <setUnderloadValue+0x30>)
   118d2:	687a      	ldr	r2, [r7, #4]
   118d4:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   118d6:	4908      	ldr	r1, [pc, #32]	; (118f8 <setUnderloadValue+0x30>)
   118d8:	4b08      	ldr	r3, [pc, #32]	; (118fc <setUnderloadValue+0x34>)
   118da:	2230      	movs	r2, #48	; 0x30
   118dc:	0018      	movs	r0, r3
   118de:	4b08      	ldr	r3, [pc, #32]	; (11900 <setUnderloadValue+0x38>)
   118e0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   118e2:	4b06      	ldr	r3, [pc, #24]	; (118fc <setUnderloadValue+0x34>)
   118e4:	0019      	movs	r1, r3
   118e6:	201a      	movs	r0, #26
   118e8:	4b06      	ldr	r3, [pc, #24]	; (11904 <setUnderloadValue+0x3c>)
   118ea:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   118ec:	4b06      	ldr	r3, [pc, #24]	; (11908 <setUnderloadValue+0x40>)
   118ee:	4798      	blx	r3
}
   118f0:	46c0      	nop			; (mov r8, r8)
   118f2:	46bd      	mov	sp, r7
   118f4:	b002      	add	sp, #8
   118f6:	bd80      	pop	{r7, pc}
   118f8:	20000854 	.word	0x20000854
   118fc:	20000784 	.word	0x20000784
   11900:	00029621 	.word	0x00029621
   11904:	00024251 	.word	0x00024251
   11908:	000243f9 	.word	0x000243f9

0001190c <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
   1190c:	b580      	push	{r7, lr}
   1190e:	b082      	sub	sp, #8
   11910:	af00      	add	r7, sp, #0
   11912:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
   11914:	4b09      	ldr	r3, [pc, #36]	; (1193c <setOverloadValue+0x30>)
   11916:	687a      	ldr	r2, [r7, #4]
   11918:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1191a:	4908      	ldr	r1, [pc, #32]	; (1193c <setOverloadValue+0x30>)
   1191c:	4b08      	ldr	r3, [pc, #32]	; (11940 <setOverloadValue+0x34>)
   1191e:	2230      	movs	r2, #48	; 0x30
   11920:	0018      	movs	r0, r3
   11922:	4b08      	ldr	r3, [pc, #32]	; (11944 <setOverloadValue+0x38>)
   11924:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11926:	4b06      	ldr	r3, [pc, #24]	; (11940 <setOverloadValue+0x34>)
   11928:	0019      	movs	r1, r3
   1192a:	201a      	movs	r0, #26
   1192c:	4b06      	ldr	r3, [pc, #24]	; (11948 <setOverloadValue+0x3c>)
   1192e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11930:	4b06      	ldr	r3, [pc, #24]	; (1194c <setOverloadValue+0x40>)
   11932:	4798      	blx	r3
}
   11934:	46c0      	nop			; (mov r8, r8)
   11936:	46bd      	mov	sp, r7
   11938:	b002      	add	sp, #8
   1193a:	bd80      	pop	{r7, pc}
   1193c:	20000854 	.word	0x20000854
   11940:	20000784 	.word	0x20000784
   11944:	00029621 	.word	0x00029621
   11948:	00024251 	.word	0x00024251
   1194c:	000243f9 	.word	0x000243f9

00011950 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
   11950:	b580      	push	{r7, lr}
   11952:	b082      	sub	sp, #8
   11954:	af00      	add	r7, sp, #0
   11956:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
   11958:	4b09      	ldr	r3, [pc, #36]	; (11980 <setNormalLoadValue+0x30>)
   1195a:	687a      	ldr	r2, [r7, #4]
   1195c:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   1195e:	4908      	ldr	r1, [pc, #32]	; (11980 <setNormalLoadValue+0x30>)
   11960:	4b08      	ldr	r3, [pc, #32]	; (11984 <setNormalLoadValue+0x34>)
   11962:	2230      	movs	r2, #48	; 0x30
   11964:	0018      	movs	r0, r3
   11966:	4b08      	ldr	r3, [pc, #32]	; (11988 <setNormalLoadValue+0x38>)
   11968:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   1196a:	4b06      	ldr	r3, [pc, #24]	; (11984 <setNormalLoadValue+0x34>)
   1196c:	0019      	movs	r1, r3
   1196e:	201a      	movs	r0, #26
   11970:	4b06      	ldr	r3, [pc, #24]	; (1198c <setNormalLoadValue+0x3c>)
   11972:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11974:	4b06      	ldr	r3, [pc, #24]	; (11990 <setNormalLoadValue+0x40>)
   11976:	4798      	blx	r3
}
   11978:	46c0      	nop			; (mov r8, r8)
   1197a:	46bd      	mov	sp, r7
   1197c:	b002      	add	sp, #8
   1197e:	bd80      	pop	{r7, pc}
   11980:	20000854 	.word	0x20000854
   11984:	20000784 	.word	0x20000784
   11988:	00029621 	.word	0x00029621
   1198c:	00024251 	.word	0x00024251
   11990:	000243f9 	.word	0x000243f9

00011994 <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
   11994:	b580      	push	{r7, lr}
   11996:	b082      	sub	sp, #8
   11998:	af00      	add	r7, sp, #0
   1199a:	0002      	movs	r2, r0
   1199c:	1dfb      	adds	r3, r7, #7
   1199e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
   119a0:	1dfb      	adds	r3, r7, #7
   119a2:	781a      	ldrb	r2, [r3, #0]
   119a4:	4b09      	ldr	r3, [pc, #36]	; (119cc <setCurrentDetection+0x38>)
   119a6:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119a8:	4908      	ldr	r1, [pc, #32]	; (119cc <setCurrentDetection+0x38>)
   119aa:	4b09      	ldr	r3, [pc, #36]	; (119d0 <setCurrentDetection+0x3c>)
   119ac:	2230      	movs	r2, #48	; 0x30
   119ae:	0018      	movs	r0, r3
   119b0:	4b08      	ldr	r3, [pc, #32]	; (119d4 <setCurrentDetection+0x40>)
   119b2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   119b4:	4b06      	ldr	r3, [pc, #24]	; (119d0 <setCurrentDetection+0x3c>)
   119b6:	0019      	movs	r1, r3
   119b8:	201a      	movs	r0, #26
   119ba:	4b07      	ldr	r3, [pc, #28]	; (119d8 <setCurrentDetection+0x44>)
   119bc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   119be:	4b07      	ldr	r3, [pc, #28]	; (119dc <setCurrentDetection+0x48>)
   119c0:	4798      	blx	r3
}
   119c2:	46c0      	nop			; (mov r8, r8)
   119c4:	46bd      	mov	sp, r7
   119c6:	b002      	add	sp, #8
   119c8:	bd80      	pop	{r7, pc}
   119ca:	46c0      	nop			; (mov r8, r8)
   119cc:	20000854 	.word	0x20000854
   119d0:	20000784 	.word	0x20000784
   119d4:	00029621 	.word	0x00029621
   119d8:	00024251 	.word	0x00024251
   119dc:	000243f9 	.word	0x000243f9

000119e0 <saveStarDeltaTimer>:
	//strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
   119e0:	b580      	push	{r7, lr}
   119e2:	b082      	sub	sp, #8
   119e4:	af00      	add	r7, sp, #0
   119e6:	0002      	movs	r2, r0
   119e8:	1dbb      	adds	r3, r7, #6
   119ea:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
   119ec:	4b0a      	ldr	r3, [pc, #40]	; (11a18 <saveStarDeltaTimer+0x38>)
   119ee:	1dba      	adds	r2, r7, #6
   119f0:	8812      	ldrh	r2, [r2, #0]
   119f2:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   119f4:	4908      	ldr	r1, [pc, #32]	; (11a18 <saveStarDeltaTimer+0x38>)
   119f6:	4b09      	ldr	r3, [pc, #36]	; (11a1c <saveStarDeltaTimer+0x3c>)
   119f8:	2230      	movs	r2, #48	; 0x30
   119fa:	0018      	movs	r0, r3
   119fc:	4b08      	ldr	r3, [pc, #32]	; (11a20 <saveStarDeltaTimer+0x40>)
   119fe:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a00:	4b06      	ldr	r3, [pc, #24]	; (11a1c <saveStarDeltaTimer+0x3c>)
   11a02:	0019      	movs	r1, r3
   11a04:	201a      	movs	r0, #26
   11a06:	4b07      	ldr	r3, [pc, #28]	; (11a24 <saveStarDeltaTimer+0x44>)
   11a08:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a0a:	4b07      	ldr	r3, [pc, #28]	; (11a28 <saveStarDeltaTimer+0x48>)
   11a0c:	4798      	blx	r3
}
   11a0e:	46c0      	nop			; (mov r8, r8)
   11a10:	46bd      	mov	sp, r7
   11a12:	b002      	add	sp, #8
   11a14:	bd80      	pop	{r7, pc}
   11a16:	46c0      	nop			; (mov r8, r8)
   11a18:	20000854 	.word	0x20000854
   11a1c:	20000784 	.word	0x20000784
   11a20:	00029621 	.word	0x00029621
   11a24:	00024251 	.word	0x00024251
   11a28:	000243f9 	.word	0x000243f9

00011a2c <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
   11a2c:	b580      	push	{r7, lr}
   11a2e:	b082      	sub	sp, #8
   11a30:	af00      	add	r7, sp, #0
   11a32:	0002      	movs	r2, r0
   11a34:	1dfb      	adds	r3, r7, #7
   11a36:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
   11a38:	4b0a      	ldr	r3, [pc, #40]	; (11a64 <saveEventStageSettings+0x38>)
   11a3a:	1dfa      	adds	r2, r7, #7
   11a3c:	7812      	ldrb	r2, [r2, #0]
   11a3e:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
   11a40:	4908      	ldr	r1, [pc, #32]	; (11a64 <saveEventStageSettings+0x38>)
   11a42:	4b09      	ldr	r3, [pc, #36]	; (11a68 <saveEventStageSettings+0x3c>)
   11a44:	2230      	movs	r2, #48	; 0x30
   11a46:	0018      	movs	r0, r3
   11a48:	4b08      	ldr	r3, [pc, #32]	; (11a6c <saveEventStageSettings+0x40>)
   11a4a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
   11a4c:	4b06      	ldr	r3, [pc, #24]	; (11a68 <saveEventStageSettings+0x3c>)
   11a4e:	0019      	movs	r1, r3
   11a50:	201a      	movs	r0, #26
   11a52:	4b07      	ldr	r3, [pc, #28]	; (11a70 <saveEventStageSettings+0x44>)
   11a54:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11a56:	4b07      	ldr	r3, [pc, #28]	; (11a74 <saveEventStageSettings+0x48>)
   11a58:	4798      	blx	r3
}
   11a5a:	46c0      	nop			; (mov r8, r8)
   11a5c:	46bd      	mov	sp, r7
   11a5e:	b002      	add	sp, #8
   11a60:	bd80      	pop	{r7, pc}
   11a62:	46c0      	nop			; (mov r8, r8)
   11a64:	20000854 	.word	0x20000854
   11a68:	20000784 	.word	0x20000784
   11a6c:	00029621 	.word	0x00029621
   11a70:	00024251 	.word	0x00024251
   11a74:	000243f9 	.word	0x000243f9

00011a78 <isAdmin>:

bool isAdmin(char *number)
{
   11a78:	b580      	push	{r7, lr}
   11a7a:	b08a      	sub	sp, #40	; 0x28
   11a7c:	af00      	add	r7, sp, #0
   11a7e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
   11a80:	2327      	movs	r3, #39	; 0x27
   11a82:	18fb      	adds	r3, r7, r3
   11a84:	2200      	movs	r2, #0
   11a86:	701a      	strb	r2, [r3, #0]
   11a88:	e02b      	b.n	11ae2 <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
   11a8a:	4b1b      	ldr	r3, [pc, #108]	; (11af8 <isAdmin+0x80>)
   11a8c:	223c      	movs	r2, #60	; 0x3c
   11a8e:	2100      	movs	r1, #0
   11a90:	0018      	movs	r0, r3
   11a92:	4b1a      	ldr	r3, [pc, #104]	; (11afc <isAdmin+0x84>)
   11a94:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
   11a96:	2327      	movs	r3, #39	; 0x27
   11a98:	18fb      	adds	r3, r7, r3
   11a9a:	781b      	ldrb	r3, [r3, #0]
   11a9c:	3303      	adds	r3, #3
   11a9e:	b2db      	uxtb	r3, r3
   11aa0:	4a15      	ldr	r2, [pc, #84]	; (11af8 <isAdmin+0x80>)
   11aa2:	0011      	movs	r1, r2
   11aa4:	0018      	movs	r0, r3
   11aa6:	4b16      	ldr	r3, [pc, #88]	; (11b00 <isAdmin+0x88>)
   11aa8:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
   11aaa:	230c      	movs	r3, #12
   11aac:	18fa      	adds	r2, r7, r3
   11aae:	4b12      	ldr	r3, [pc, #72]	; (11af8 <isAdmin+0x80>)
   11ab0:	0010      	movs	r0, r2
   11ab2:	0019      	movs	r1, r3
   11ab4:	2318      	movs	r3, #24
   11ab6:	001a      	movs	r2, r3
   11ab8:	4b12      	ldr	r3, [pc, #72]	; (11b04 <isAdmin+0x8c>)
   11aba:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
   11abc:	230c      	movs	r3, #12
   11abe:	18fb      	adds	r3, r7, r3
   11ac0:	1d1a      	adds	r2, r3, #4
   11ac2:	687b      	ldr	r3, [r7, #4]
   11ac4:	0011      	movs	r1, r2
   11ac6:	0018      	movs	r0, r3
   11ac8:	4b0f      	ldr	r3, [pc, #60]	; (11b08 <isAdmin+0x90>)
   11aca:	4798      	blx	r3
   11acc:	1e03      	subs	r3, r0, #0
   11ace:	d001      	beq.n	11ad4 <isAdmin+0x5c>
		{
			return true;
   11ad0:	2301      	movs	r3, #1
   11ad2:	e00c      	b.n	11aee <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
   11ad4:	2327      	movs	r3, #39	; 0x27
   11ad6:	18fb      	adds	r3, r7, r3
   11ad8:	781a      	ldrb	r2, [r3, #0]
   11ada:	2327      	movs	r3, #39	; 0x27
   11adc:	18fb      	adds	r3, r7, r3
   11ade:	3201      	adds	r2, #1
   11ae0:	701a      	strb	r2, [r3, #0]
   11ae2:	2327      	movs	r3, #39	; 0x27
   11ae4:	18fb      	adds	r3, r7, r3
   11ae6:	781b      	ldrb	r3, [r3, #0]
   11ae8:	2b04      	cmp	r3, #4
   11aea:	d9ce      	bls.n	11a8a <isAdmin+0x12>
		}
	}
	return false;
   11aec:	2300      	movs	r3, #0
}
   11aee:	0018      	movs	r0, r3
   11af0:	46bd      	mov	sp, r7
   11af2:	b00a      	add	sp, #40	; 0x28
   11af4:	bd80      	pop	{r7, pc}
   11af6:	46c0      	nop			; (mov r8, r8)
   11af8:	20000784 	.word	0x20000784
   11afc:	00029657 	.word	0x00029657
   11b00:	0002435d 	.word	0x0002435d
   11b04:	00029621 	.word	0x00029621
   11b08:	00029917 	.word	0x00029917

00011b0c <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
   11b0c:	b580      	push	{r7, lr}
   11b0e:	b082      	sub	sp, #8
   11b10:	af00      	add	r7, sp, #0
   11b12:	0002      	movs	r2, r0
   11b14:	1dfb      	adds	r3, r7, #7
   11b16:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
   11b18:	4b0b      	ldr	r3, [pc, #44]	; (11b48 <setPrimaryNumberIndex+0x3c>)
   11b1a:	1dfa      	adds	r2, r7, #7
   11b1c:	7812      	ldrb	r2, [r2, #0]
   11b1e:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b20:	4a0a      	ldr	r2, [pc, #40]	; (11b4c <setPrimaryNumberIndex+0x40>)
   11b22:	4b09      	ldr	r3, [pc, #36]	; (11b48 <setPrimaryNumberIndex+0x3c>)
   11b24:	0010      	movs	r0, r2
   11b26:	0019      	movs	r1, r3
   11b28:	2308      	movs	r3, #8
   11b2a:	001a      	movs	r2, r3
   11b2c:	4b08      	ldr	r3, [pc, #32]	; (11b50 <setPrimaryNumberIndex+0x44>)
   11b2e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b30:	4b06      	ldr	r3, [pc, #24]	; (11b4c <setPrimaryNumberIndex+0x40>)
   11b32:	0019      	movs	r1, r3
   11b34:	2008      	movs	r0, #8
   11b36:	4b07      	ldr	r3, [pc, #28]	; (11b54 <setPrimaryNumberIndex+0x48>)
   11b38:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b3a:	4b07      	ldr	r3, [pc, #28]	; (11b58 <setPrimaryNumberIndex+0x4c>)
   11b3c:	4798      	blx	r3

}
   11b3e:	46c0      	nop			; (mov r8, r8)
   11b40:	46bd      	mov	sp, r7
   11b42:	b002      	add	sp, #8
   11b44:	bd80      	pop	{r7, pc}
   11b46:	46c0      	nop			; (mov r8, r8)
   11b48:	20000814 	.word	0x20000814
   11b4c:	20000784 	.word	0x20000784
   11b50:	00029621 	.word	0x00029621
   11b54:	00024251 	.word	0x00024251
   11b58:	000243f9 	.word	0x000243f9

00011b5c <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
   11b5c:	b580      	push	{r7, lr}
   11b5e:	b082      	sub	sp, #8
   11b60:	af00      	add	r7, sp, #0
   11b62:	0002      	movs	r2, r0
   11b64:	1dfb      	adds	r3, r7, #7
   11b66:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
   11b68:	4b0b      	ldr	r3, [pc, #44]	; (11b98 <setSecondaryNumberIndex+0x3c>)
   11b6a:	1dfa      	adds	r2, r7, #7
   11b6c:	7812      	ldrb	r2, [r2, #0]
   11b6e:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
   11b70:	4a0a      	ldr	r2, [pc, #40]	; (11b9c <setSecondaryNumberIndex+0x40>)
   11b72:	4b09      	ldr	r3, [pc, #36]	; (11b98 <setSecondaryNumberIndex+0x3c>)
   11b74:	0010      	movs	r0, r2
   11b76:	0019      	movs	r1, r3
   11b78:	2308      	movs	r3, #8
   11b7a:	001a      	movs	r2, r3
   11b7c:	4b08      	ldr	r3, [pc, #32]	; (11ba0 <setSecondaryNumberIndex+0x44>)
   11b7e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
   11b80:	4b06      	ldr	r3, [pc, #24]	; (11b9c <setSecondaryNumberIndex+0x40>)
   11b82:	0019      	movs	r1, r3
   11b84:	2008      	movs	r0, #8
   11b86:	4b07      	ldr	r3, [pc, #28]	; (11ba4 <setSecondaryNumberIndex+0x48>)
   11b88:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
   11b8a:	4b07      	ldr	r3, [pc, #28]	; (11ba8 <setSecondaryNumberIndex+0x4c>)
   11b8c:	4798      	blx	r3
}
   11b8e:	46c0      	nop			; (mov r8, r8)
   11b90:	46bd      	mov	sp, r7
   11b92:	b002      	add	sp, #8
   11b94:	bd80      	pop	{r7, pc}
   11b96:	46c0      	nop			; (mov r8, r8)
   11b98:	20000814 	.word	0x20000814
   11b9c:	20000784 	.word	0x20000784
   11ba0:	00029621 	.word	0x00029621
   11ba4:	00024251 	.word	0x00024251
   11ba8:	000243f9 	.word	0x000243f9

00011bac <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
   11bac:	b590      	push	{r4, r7, lr}
   11bae:	b085      	sub	sp, #20
   11bb0:	af00      	add	r7, sp, #0
   11bb2:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11bb4:	230e      	movs	r3, #14
   11bb6:	18fc      	adds	r4, r7, r3
   11bb8:	687b      	ldr	r3, [r7, #4]
   11bba:	0018      	movs	r0, r3
   11bbc:	4b21      	ldr	r3, [pc, #132]	; (11c44 <addPrimaryIndexedNumber+0x98>)
   11bbe:	4798      	blx	r3
   11bc0:	0003      	movs	r3, r0
   11bc2:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
   11bc4:	230f      	movs	r3, #15
   11bc6:	18fb      	adds	r3, r7, r3
   11bc8:	22ff      	movs	r2, #255	; 0xff
   11bca:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
   11bcc:	4b1e      	ldr	r3, [pc, #120]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11bce:	785b      	ldrb	r3, [r3, #1]
   11bd0:	220e      	movs	r2, #14
   11bd2:	18ba      	adds	r2, r7, r2
   11bd4:	7812      	ldrb	r2, [r2, #0]
   11bd6:	429a      	cmp	r2, r3
   11bd8:	d309      	bcc.n	11bee <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
   11bda:	230f      	movs	r3, #15
   11bdc:	18fb      	adds	r3, r7, r3
   11bde:	4a1a      	ldr	r2, [pc, #104]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11be0:	7892      	ldrb	r2, [r2, #2]
   11be2:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11be4:	687b      	ldr	r3, [r7, #4]
   11be6:	0018      	movs	r0, r3
   11be8:	4b18      	ldr	r3, [pc, #96]	; (11c4c <addPrimaryIndexedNumber+0xa0>)
   11bea:	4798      	blx	r3
   11bec:	e00c      	b.n	11c08 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
   11bee:	4b16      	ldr	r3, [pc, #88]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11bf0:	785b      	ldrb	r3, [r3, #1]
   11bf2:	220e      	movs	r2, #14
   11bf4:	18ba      	adds	r2, r7, r2
   11bf6:	7812      	ldrb	r2, [r2, #0]
   11bf8:	429a      	cmp	r2, r3
   11bfa:	d205      	bcs.n	11c08 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
   11bfc:	230f      	movs	r3, #15
   11bfe:	18fb      	adds	r3, r7, r3
   11c00:	220e      	movs	r2, #14
   11c02:	18ba      	adds	r2, r7, r2
   11c04:	7812      	ldrb	r2, [r2, #0]
   11c06:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
   11c08:	4b0f      	ldr	r3, [pc, #60]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c0a:	785b      	ldrb	r3, [r3, #1]
   11c0c:	220f      	movs	r2, #15
   11c0e:	18ba      	adds	r2, r7, r2
   11c10:	7812      	ldrb	r2, [r2, #0]
   11c12:	429a      	cmp	r2, r3
   11c14:	d210      	bcs.n	11c38 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
   11c16:	4b0c      	ldr	r3, [pc, #48]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c18:	789b      	ldrb	r3, [r3, #2]
   11c1a:	2b01      	cmp	r3, #1
   11c1c:	d904      	bls.n	11c28 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
   11c1e:	4b0a      	ldr	r3, [pc, #40]	; (11c48 <addPrimaryIndexedNumber+0x9c>)
   11c20:	78db      	ldrb	r3, [r3, #3]
   11c22:	0018      	movs	r0, r3
   11c24:	4b0a      	ldr	r3, [pc, #40]	; (11c50 <addPrimaryIndexedNumber+0xa4>)
   11c26:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
   11c28:	230f      	movs	r3, #15
   11c2a:	18fb      	adds	r3, r7, r3
   11c2c:	781b      	ldrb	r3, [r3, #0]
   11c2e:	0018      	movs	r0, r3
   11c30:	4b08      	ldr	r3, [pc, #32]	; (11c54 <addPrimaryIndexedNumber+0xa8>)
   11c32:	4798      	blx	r3
		return true;
   11c34:	2301      	movs	r3, #1
   11c36:	e000      	b.n	11c3a <addPrimaryIndexedNumber+0x8e>
	}

	return false;
   11c38:	2300      	movs	r3, #0
}
   11c3a:	0018      	movs	r0, r3
   11c3c:	46bd      	mov	sp, r7
   11c3e:	b005      	add	sp, #20
   11c40:	bd90      	pop	{r4, r7, pc}
   11c42:	46c0      	nop			; (mov r8, r8)
   11c44:	00010ded 	.word	0x00010ded
   11c48:	20000814 	.word	0x20000814
   11c4c:	00010ef1 	.word	0x00010ef1
   11c50:	00011b5d 	.word	0x00011b5d
   11c54:	00011b0d 	.word	0x00011b0d

00011c58 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
   11c58:	b590      	push	{r4, r7, lr}
   11c5a:	b085      	sub	sp, #20
   11c5c:	af00      	add	r7, sp, #0
   11c5e:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
   11c60:	4b21      	ldr	r3, [pc, #132]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c62:	789b      	ldrb	r3, [r3, #2]
   11c64:	2b01      	cmp	r3, #1
   11c66:	d801      	bhi.n	11c6c <addSecondaryIndexedNumber+0x14>
	return false;
   11c68:	2300      	movs	r3, #0
   11c6a:	e039      	b.n	11ce0 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
   11c6c:	230e      	movs	r3, #14
   11c6e:	18fc      	adds	r4, r7, r3
   11c70:	687b      	ldr	r3, [r7, #4]
   11c72:	0018      	movs	r0, r3
   11c74:	4b1d      	ldr	r3, [pc, #116]	; (11cec <addSecondaryIndexedNumber+0x94>)
   11c76:	4798      	blx	r3
   11c78:	0003      	movs	r3, r0
   11c7a:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
   11c7c:	230f      	movs	r3, #15
   11c7e:	18fb      	adds	r3, r7, r3
   11c80:	22ff      	movs	r2, #255	; 0xff
   11c82:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
   11c84:	4b18      	ldr	r3, [pc, #96]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c86:	785b      	ldrb	r3, [r3, #1]
   11c88:	220e      	movs	r2, #14
   11c8a:	18ba      	adds	r2, r7, r2
   11c8c:	7812      	ldrb	r2, [r2, #0]
   11c8e:	429a      	cmp	r2, r3
   11c90:	d309      	bcc.n	11ca6 <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
   11c92:	230f      	movs	r3, #15
   11c94:	18fb      	adds	r3, r7, r3
   11c96:	4a14      	ldr	r2, [pc, #80]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11c98:	7892      	ldrb	r2, [r2, #2]
   11c9a:	701a      	strb	r2, [r3, #0]
		addNumber(number);
   11c9c:	687b      	ldr	r3, [r7, #4]
   11c9e:	0018      	movs	r0, r3
   11ca0:	4b13      	ldr	r3, [pc, #76]	; (11cf0 <addSecondaryIndexedNumber+0x98>)
   11ca2:	4798      	blx	r3
   11ca4:	e00c      	b.n	11cc0 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
   11ca6:	4b10      	ldr	r3, [pc, #64]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11ca8:	785b      	ldrb	r3, [r3, #1]
   11caa:	220e      	movs	r2, #14
   11cac:	18ba      	adds	r2, r7, r2
   11cae:	7812      	ldrb	r2, [r2, #0]
   11cb0:	429a      	cmp	r2, r3
   11cb2:	d205      	bcs.n	11cc0 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
   11cb4:	230f      	movs	r3, #15
   11cb6:	18fb      	adds	r3, r7, r3
   11cb8:	220e      	movs	r2, #14
   11cba:	18ba      	adds	r2, r7, r2
   11cbc:	7812      	ldrb	r2, [r2, #0]
   11cbe:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
   11cc0:	4b09      	ldr	r3, [pc, #36]	; (11ce8 <addSecondaryIndexedNumber+0x90>)
   11cc2:	785b      	ldrb	r3, [r3, #1]
   11cc4:	220f      	movs	r2, #15
   11cc6:	18ba      	adds	r2, r7, r2
   11cc8:	7812      	ldrb	r2, [r2, #0]
   11cca:	429a      	cmp	r2, r3
   11ccc:	d207      	bcs.n	11cde <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
   11cce:	230f      	movs	r3, #15
   11cd0:	18fb      	adds	r3, r7, r3
   11cd2:	781b      	ldrb	r3, [r3, #0]
   11cd4:	0018      	movs	r0, r3
   11cd6:	4b07      	ldr	r3, [pc, #28]	; (11cf4 <addSecondaryIndexedNumber+0x9c>)
   11cd8:	4798      	blx	r3
		return true;
   11cda:	2301      	movs	r3, #1
   11cdc:	e000      	b.n	11ce0 <addSecondaryIndexedNumber+0x88>
	}
	return false;
   11cde:	2300      	movs	r3, #0
}
   11ce0:	0018      	movs	r0, r3
   11ce2:	46bd      	mov	sp, r7
   11ce4:	b005      	add	sp, #20
   11ce6:	bd90      	pop	{r4, r7, pc}
   11ce8:	20000814 	.word	0x20000814
   11cec:	00010ded 	.word	0x00010ded
   11cf0:	00010ef1 	.word	0x00010ef1
   11cf4:	00011b5d 	.word	0x00011b5d

00011cf8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   11cf8:	b580      	push	{r7, lr}
   11cfa:	b082      	sub	sp, #8
   11cfc:	af00      	add	r7, sp, #0
   11cfe:	0002      	movs	r2, r0
   11d00:	1dfb      	adds	r3, r7, #7
   11d02:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d04:	4b06      	ldr	r3, [pc, #24]	; (11d20 <system_interrupt_enable+0x28>)
   11d06:	1dfa      	adds	r2, r7, #7
   11d08:	7812      	ldrb	r2, [r2, #0]
   11d0a:	0011      	movs	r1, r2
   11d0c:	221f      	movs	r2, #31
   11d0e:	400a      	ands	r2, r1
   11d10:	2101      	movs	r1, #1
   11d12:	4091      	lsls	r1, r2
   11d14:	000a      	movs	r2, r1
   11d16:	601a      	str	r2, [r3, #0]
}
   11d18:	46c0      	nop			; (mov r8, r8)
   11d1a:	46bd      	mov	sp, r7
   11d1c:	b002      	add	sp, #8
   11d1e:	bd80      	pop	{r7, pc}
   11d20:	e000e100 	.word	0xe000e100

00011d24 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   11d24:	b580      	push	{r7, lr}
   11d26:	b082      	sub	sp, #8
   11d28:	af00      	add	r7, sp, #0
   11d2a:	0002      	movs	r2, r0
   11d2c:	1dfb      	adds	r3, r7, #7
   11d2e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   11d30:	4a07      	ldr	r2, [pc, #28]	; (11d50 <system_interrupt_disable+0x2c>)
   11d32:	1dfb      	adds	r3, r7, #7
   11d34:	781b      	ldrb	r3, [r3, #0]
   11d36:	0019      	movs	r1, r3
   11d38:	231f      	movs	r3, #31
   11d3a:	400b      	ands	r3, r1
   11d3c:	2101      	movs	r1, #1
   11d3e:	4099      	lsls	r1, r3
   11d40:	000b      	movs	r3, r1
   11d42:	0019      	movs	r1, r3
   11d44:	2380      	movs	r3, #128	; 0x80
   11d46:	50d1      	str	r1, [r2, r3]
}
   11d48:	46c0      	nop			; (mov r8, r8)
   11d4a:	46bd      	mov	sp, r7
   11d4c:	b002      	add	sp, #8
   11d4e:	bd80      	pop	{r7, pc}
   11d50:	e000e100 	.word	0xe000e100

00011d54 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11d54:	b580      	push	{r7, lr}
   11d56:	b084      	sub	sp, #16
   11d58:	af00      	add	r7, sp, #0
   11d5a:	0002      	movs	r2, r0
   11d5c:	1dfb      	adds	r3, r7, #7
   11d5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11d60:	230f      	movs	r3, #15
   11d62:	18fb      	adds	r3, r7, r3
   11d64:	1dfa      	adds	r2, r7, #7
   11d66:	7812      	ldrb	r2, [r2, #0]
   11d68:	09d2      	lsrs	r2, r2, #7
   11d6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11d6c:	230e      	movs	r3, #14
   11d6e:	18fb      	adds	r3, r7, r3
   11d70:	1dfa      	adds	r2, r7, #7
   11d72:	7812      	ldrb	r2, [r2, #0]
   11d74:	0952      	lsrs	r2, r2, #5
   11d76:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11d78:	4b0d      	ldr	r3, [pc, #52]	; (11db0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11d7a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   11d7c:	230f      	movs	r3, #15
   11d7e:	18fb      	adds	r3, r7, r3
   11d80:	781b      	ldrb	r3, [r3, #0]
   11d82:	2b00      	cmp	r3, #0
   11d84:	d10f      	bne.n	11da6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11d86:	230f      	movs	r3, #15
   11d88:	18fb      	adds	r3, r7, r3
   11d8a:	781b      	ldrb	r3, [r3, #0]
   11d8c:	009b      	lsls	r3, r3, #2
   11d8e:	2210      	movs	r2, #16
   11d90:	4694      	mov	ip, r2
   11d92:	44bc      	add	ip, r7
   11d94:	4463      	add	r3, ip
   11d96:	3b08      	subs	r3, #8
   11d98:	681a      	ldr	r2, [r3, #0]
   11d9a:	230e      	movs	r3, #14
   11d9c:	18fb      	adds	r3, r7, r3
   11d9e:	781b      	ldrb	r3, [r3, #0]
   11da0:	01db      	lsls	r3, r3, #7
   11da2:	18d3      	adds	r3, r2, r3
   11da4:	e000      	b.n	11da8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   11da6:	2300      	movs	r3, #0
	}
}
   11da8:	0018      	movs	r0, r3
   11daa:	46bd      	mov	sp, r7
   11dac:	b004      	add	sp, #16
   11dae:	bd80      	pop	{r7, pc}
   11db0:	41004400 	.word	0x41004400

00011db4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   11db4:	b580      	push	{r7, lr}
   11db6:	b082      	sub	sp, #8
   11db8:	af00      	add	r7, sp, #0
   11dba:	0002      	movs	r2, r0
   11dbc:	1dfb      	adds	r3, r7, #7
   11dbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11dc0:	1dfb      	adds	r3, r7, #7
   11dc2:	781b      	ldrb	r3, [r3, #0]
   11dc4:	0018      	movs	r0, r3
   11dc6:	4b03      	ldr	r3, [pc, #12]	; (11dd4 <port_get_group_from_gpio_pin+0x20>)
   11dc8:	4798      	blx	r3
   11dca:	0003      	movs	r3, r0
}
   11dcc:	0018      	movs	r0, r3
   11dce:	46bd      	mov	sp, r7
   11dd0:	b002      	add	sp, #8
   11dd2:	bd80      	pop	{r7, pc}
   11dd4:	00011d55 	.word	0x00011d55

00011dd8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   11dd8:	b580      	push	{r7, lr}
   11dda:	b082      	sub	sp, #8
   11ddc:	af00      	add	r7, sp, #0
   11dde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   11de0:	687b      	ldr	r3, [r7, #4]
   11de2:	2200      	movs	r2, #0
   11de4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11de6:	687b      	ldr	r3, [r7, #4]
   11de8:	2201      	movs	r2, #1
   11dea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11dec:	687b      	ldr	r3, [r7, #4]
   11dee:	2200      	movs	r2, #0
   11df0:	709a      	strb	r2, [r3, #2]
}
   11df2:	46c0      	nop			; (mov r8, r8)
   11df4:	46bd      	mov	sp, r7
   11df6:	b002      	add	sp, #8
   11df8:	bd80      	pop	{r7, pc}
	...

00011dfc <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   11dfc:	b580      	push	{r7, lr}
   11dfe:	b084      	sub	sp, #16
   11e00:	af00      	add	r7, sp, #0
   11e02:	0002      	movs	r2, r0
   11e04:	1dfb      	adds	r3, r7, #7
   11e06:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e08:	1dfb      	adds	r3, r7, #7
   11e0a:	781b      	ldrb	r3, [r3, #0]
   11e0c:	0018      	movs	r0, r3
   11e0e:	4b0b      	ldr	r3, [pc, #44]	; (11e3c <port_pin_get_input_level+0x40>)
   11e10:	4798      	blx	r3
   11e12:	0003      	movs	r3, r0
   11e14:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e16:	1dfb      	adds	r3, r7, #7
   11e18:	781b      	ldrb	r3, [r3, #0]
   11e1a:	221f      	movs	r2, #31
   11e1c:	4013      	ands	r3, r2
   11e1e:	2201      	movs	r2, #1
   11e20:	409a      	lsls	r2, r3
   11e22:	0013      	movs	r3, r2
   11e24:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   11e26:	68fb      	ldr	r3, [r7, #12]
   11e28:	6a1b      	ldr	r3, [r3, #32]
   11e2a:	68ba      	ldr	r2, [r7, #8]
   11e2c:	4013      	ands	r3, r2
   11e2e:	1e5a      	subs	r2, r3, #1
   11e30:	4193      	sbcs	r3, r2
   11e32:	b2db      	uxtb	r3, r3
}
   11e34:	0018      	movs	r0, r3
   11e36:	46bd      	mov	sp, r7
   11e38:	b004      	add	sp, #16
   11e3a:	bd80      	pop	{r7, pc}
   11e3c:	00011db5 	.word	0x00011db5

00011e40 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   11e40:	b580      	push	{r7, lr}
   11e42:	b084      	sub	sp, #16
   11e44:	af00      	add	r7, sp, #0
   11e46:	0002      	movs	r2, r0
   11e48:	1dfb      	adds	r3, r7, #7
   11e4a:	701a      	strb	r2, [r3, #0]
   11e4c:	1dbb      	adds	r3, r7, #6
   11e4e:	1c0a      	adds	r2, r1, #0
   11e50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11e52:	1dfb      	adds	r3, r7, #7
   11e54:	781b      	ldrb	r3, [r3, #0]
   11e56:	0018      	movs	r0, r3
   11e58:	4b0d      	ldr	r3, [pc, #52]	; (11e90 <port_pin_set_output_level+0x50>)
   11e5a:	4798      	blx	r3
   11e5c:	0003      	movs	r3, r0
   11e5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11e60:	1dfb      	adds	r3, r7, #7
   11e62:	781b      	ldrb	r3, [r3, #0]
   11e64:	221f      	movs	r2, #31
   11e66:	4013      	ands	r3, r2
   11e68:	2201      	movs	r2, #1
   11e6a:	409a      	lsls	r2, r3
   11e6c:	0013      	movs	r3, r2
   11e6e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   11e70:	1dbb      	adds	r3, r7, #6
   11e72:	781b      	ldrb	r3, [r3, #0]
   11e74:	2b00      	cmp	r3, #0
   11e76:	d003      	beq.n	11e80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11e78:	68fb      	ldr	r3, [r7, #12]
   11e7a:	68ba      	ldr	r2, [r7, #8]
   11e7c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   11e7e:	e002      	b.n	11e86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11e80:	68fb      	ldr	r3, [r7, #12]
   11e82:	68ba      	ldr	r2, [r7, #8]
   11e84:	615a      	str	r2, [r3, #20]
}
   11e86:	46c0      	nop			; (mov r8, r8)
   11e88:	46bd      	mov	sp, r7
   11e8a:	b004      	add	sp, #16
   11e8c:	bd80      	pop	{r7, pc}
   11e8e:	46c0      	nop			; (mov r8, r8)
   11e90:	00011db5 	.word	0x00011db5

00011e94 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   11e94:	b580      	push	{r7, lr}
   11e96:	b084      	sub	sp, #16
   11e98:	af00      	add	r7, sp, #0
   11e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   11e9c:	687b      	ldr	r3, [r7, #4]
   11e9e:	681b      	ldr	r3, [r3, #0]
   11ea0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   11ea2:	68fb      	ldr	r3, [r7, #12]
   11ea4:	69db      	ldr	r3, [r3, #28]
   11ea6:	1e5a      	subs	r2, r3, #1
   11ea8:	4193      	sbcs	r3, r2
   11eaa:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   11eac:	0018      	movs	r0, r3
   11eae:	46bd      	mov	sp, r7
   11eb0:	b004      	add	sp, #16
   11eb2:	bd80      	pop	{r7, pc}

00011eb4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   11eb4:	b580      	push	{r7, lr}
   11eb6:	b082      	sub	sp, #8
   11eb8:	af00      	add	r7, sp, #0
   11eba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   11ebc:	46c0      	nop			; (mov r8, r8)
   11ebe:	687b      	ldr	r3, [r7, #4]
   11ec0:	0018      	movs	r0, r3
   11ec2:	4b04      	ldr	r3, [pc, #16]	; (11ed4 <_usart_wait_for_sync+0x20>)
   11ec4:	4798      	blx	r3
   11ec6:	1e03      	subs	r3, r0, #0
   11ec8:	d1f9      	bne.n	11ebe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   11eca:	46c0      	nop			; (mov r8, r8)
   11ecc:	46bd      	mov	sp, r7
   11ece:	b002      	add	sp, #8
   11ed0:	bd80      	pop	{r7, pc}
   11ed2:	46c0      	nop			; (mov r8, r8)
   11ed4:	00011e95 	.word	0x00011e95

00011ed8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   11ed8:	b580      	push	{r7, lr}
   11eda:	b082      	sub	sp, #8
   11edc:	af00      	add	r7, sp, #0
   11ede:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   11ee0:	687b      	ldr	r3, [r7, #4]
   11ee2:	2280      	movs	r2, #128	; 0x80
   11ee4:	05d2      	lsls	r2, r2, #23
   11ee6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   11ee8:	687b      	ldr	r3, [r7, #4]
   11eea:	2200      	movs	r2, #0
   11eec:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   11eee:	687b      	ldr	r3, [r7, #4]
   11ef0:	22ff      	movs	r2, #255	; 0xff
   11ef2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   11ef4:	687b      	ldr	r3, [r7, #4]
   11ef6:	2200      	movs	r2, #0
   11ef8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   11efa:	687b      	ldr	r3, [r7, #4]
   11efc:	2200      	movs	r2, #0
   11efe:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   11f00:	687b      	ldr	r3, [r7, #4]
   11f02:	2296      	movs	r2, #150	; 0x96
   11f04:	0192      	lsls	r2, r2, #6
   11f06:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   11f08:	687b      	ldr	r3, [r7, #4]
   11f0a:	2224      	movs	r2, #36	; 0x24
   11f0c:	2101      	movs	r1, #1
   11f0e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   11f10:	687b      	ldr	r3, [r7, #4]
   11f12:	2225      	movs	r2, #37	; 0x25
   11f14:	2101      	movs	r1, #1
   11f16:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   11f18:	687b      	ldr	r3, [r7, #4]
   11f1a:	2226      	movs	r2, #38	; 0x26
   11f1c:	2100      	movs	r1, #0
   11f1e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   11f20:	687b      	ldr	r3, [r7, #4]
   11f22:	2227      	movs	r2, #39	; 0x27
   11f24:	2100      	movs	r1, #0
   11f26:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   11f28:	687b      	ldr	r3, [r7, #4]
   11f2a:	2200      	movs	r2, #0
   11f2c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   11f2e:	687b      	ldr	r3, [r7, #4]
   11f30:	2288      	movs	r2, #136	; 0x88
   11f32:	0352      	lsls	r2, r2, #13
   11f34:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   11f36:	687b      	ldr	r3, [r7, #4]
   11f38:	222c      	movs	r2, #44	; 0x2c
   11f3a:	2100      	movs	r1, #0
   11f3c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   11f3e:	687b      	ldr	r3, [r7, #4]
   11f40:	222d      	movs	r2, #45	; 0x2d
   11f42:	2100      	movs	r1, #0
   11f44:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11f46:	687b      	ldr	r3, [r7, #4]
   11f48:	2200      	movs	r2, #0
   11f4a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11f4c:	687b      	ldr	r3, [r7, #4]
   11f4e:	2200      	movs	r2, #0
   11f50:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   11f52:	687b      	ldr	r3, [r7, #4]
   11f54:	2200      	movs	r2, #0
   11f56:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   11f58:	687b      	ldr	r3, [r7, #4]
   11f5a:	2200      	movs	r2, #0
   11f5c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   11f5e:	687b      	ldr	r3, [r7, #4]
   11f60:	2200      	movs	r2, #0
   11f62:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   11f64:	687b      	ldr	r3, [r7, #4]
   11f66:	2200      	movs	r2, #0
   11f68:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   11f6a:	687b      	ldr	r3, [r7, #4]
   11f6c:	2200      	movs	r2, #0
   11f6e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   11f70:	687b      	ldr	r3, [r7, #4]
   11f72:	2200      	movs	r2, #0
   11f74:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   11f76:	687b      	ldr	r3, [r7, #4]
   11f78:	2200      	movs	r2, #0
   11f7a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   11f7c:	687b      	ldr	r3, [r7, #4]
   11f7e:	2200      	movs	r2, #0
   11f80:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   11f82:	687b      	ldr	r3, [r7, #4]
   11f84:	2213      	movs	r2, #19
   11f86:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   11f88:	687b      	ldr	r3, [r7, #4]
   11f8a:	2200      	movs	r2, #0
   11f8c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   11f8e:	46c0      	nop			; (mov r8, r8)
   11f90:	46bd      	mov	sp, r7
   11f92:	b002      	add	sp, #8
   11f94:	bd80      	pop	{r7, pc}
	...

00011f98 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   11f98:	b580      	push	{r7, lr}
   11f9a:	b084      	sub	sp, #16
   11f9c:	af00      	add	r7, sp, #0
   11f9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fa0:	687b      	ldr	r3, [r7, #4]
   11fa2:	681b      	ldr	r3, [r3, #0]
   11fa4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   11fa6:	687b      	ldr	r3, [r7, #4]
   11fa8:	681b      	ldr	r3, [r3, #0]
   11faa:	0018      	movs	r0, r3
   11fac:	4b09      	ldr	r3, [pc, #36]	; (11fd4 <usart_enable+0x3c>)
   11fae:	4798      	blx	r3
   11fb0:	0003      	movs	r3, r0
   11fb2:	0018      	movs	r0, r3
   11fb4:	4b08      	ldr	r3, [pc, #32]	; (11fd8 <usart_enable+0x40>)
   11fb6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   11fb8:	687b      	ldr	r3, [r7, #4]
   11fba:	0018      	movs	r0, r3
   11fbc:	4b07      	ldr	r3, [pc, #28]	; (11fdc <usart_enable+0x44>)
   11fbe:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   11fc0:	68fb      	ldr	r3, [r7, #12]
   11fc2:	681b      	ldr	r3, [r3, #0]
   11fc4:	2202      	movs	r2, #2
   11fc6:	431a      	orrs	r2, r3
   11fc8:	68fb      	ldr	r3, [r7, #12]
   11fca:	601a      	str	r2, [r3, #0]
}
   11fcc:	46c0      	nop			; (mov r8, r8)
   11fce:	46bd      	mov	sp, r7
   11fd0:	b004      	add	sp, #16
   11fd2:	bd80      	pop	{r7, pc}
   11fd4:	00022cdd 	.word	0x00022cdd
   11fd8:	00011cf9 	.word	0x00011cf9
   11fdc:	00011eb5 	.word	0x00011eb5

00011fe0 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
   11fe0:	b580      	push	{r7, lr}
   11fe2:	b084      	sub	sp, #16
   11fe4:	af00      	add	r7, sp, #0
   11fe6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   11fe8:	687b      	ldr	r3, [r7, #4]
   11fea:	681b      	ldr	r3, [r3, #0]
   11fec:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   11fee:	687b      	ldr	r3, [r7, #4]
   11ff0:	681b      	ldr	r3, [r3, #0]
   11ff2:	0018      	movs	r0, r3
   11ff4:	4b0a      	ldr	r3, [pc, #40]	; (12020 <usart_disable+0x40>)
   11ff6:	4798      	blx	r3
   11ff8:	0003      	movs	r3, r0
   11ffa:	0018      	movs	r0, r3
   11ffc:	4b09      	ldr	r3, [pc, #36]	; (12024 <usart_disable+0x44>)
   11ffe:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12000:	687b      	ldr	r3, [r7, #4]
   12002:	0018      	movs	r0, r3
   12004:	4b08      	ldr	r3, [pc, #32]	; (12028 <usart_disable+0x48>)
   12006:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   12008:	68fb      	ldr	r3, [r7, #12]
   1200a:	681b      	ldr	r3, [r3, #0]
   1200c:	2202      	movs	r2, #2
   1200e:	4393      	bics	r3, r2
   12010:	001a      	movs	r2, r3
   12012:	68fb      	ldr	r3, [r7, #12]
   12014:	601a      	str	r2, [r3, #0]
}
   12016:	46c0      	nop			; (mov r8, r8)
   12018:	46bd      	mov	sp, r7
   1201a:	b004      	add	sp, #16
   1201c:	bd80      	pop	{r7, pc}
   1201e:	46c0      	nop			; (mov r8, r8)
   12020:	00022cdd 	.word	0x00022cdd
   12024:	00011d25 	.word	0x00011d25
   12028:	00011eb5 	.word	0x00011eb5

0001202c <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
   1202c:	b580      	push	{r7, lr}
   1202e:	b084      	sub	sp, #16
   12030:	af00      	add	r7, sp, #0
   12032:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   12034:	687b      	ldr	r3, [r7, #4]
   12036:	681b      	ldr	r3, [r3, #0]
   12038:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
   1203a:	687b      	ldr	r3, [r7, #4]
   1203c:	0018      	movs	r0, r3
   1203e:	4b06      	ldr	r3, [pc, #24]	; (12058 <usart_reset+0x2c>)
   12040:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   12042:	687b      	ldr	r3, [r7, #4]
   12044:	0018      	movs	r0, r3
   12046:	4b05      	ldr	r3, [pc, #20]	; (1205c <usart_reset+0x30>)
   12048:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
   1204a:	68fb      	ldr	r3, [r7, #12]
   1204c:	2201      	movs	r2, #1
   1204e:	601a      	str	r2, [r3, #0]
}
   12050:	46c0      	nop			; (mov r8, r8)
   12052:	46bd      	mov	sp, r7
   12054:	b004      	add	sp, #16
   12056:	bd80      	pop	{r7, pc}
   12058:	00011fe1 	.word	0x00011fe1
   1205c:	00011eb5 	.word	0x00011eb5

00012060 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
*
*  \param[in]  timer  ID of the timer that has expired.
*/
static void gsm_timer_callback(TimerHandle_t timer)
{
   12060:	b580      	push	{r7, lr}
   12062:	b082      	sub	sp, #8
   12064:	af00      	add	r7, sp, #0
   12066:	6078      	str	r0, [r7, #4]
}
   12068:	46c0      	nop			; (mov r8, r8)
   1206a:	46bd      	mov	sp, r7
   1206c:	b002      	add	sp, #8
   1206e:	bd80      	pop	{r7, pc}

00012070 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
   12070:	b580      	push	{r7, lr}
   12072:	b082      	sub	sp, #8
   12074:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   12076:	4b09      	ldr	r3, [pc, #36]	; (1209c <Flush_RX_Buffer+0x2c>)
   12078:	681b      	ldr	r3, [r3, #0]
   1207a:	1cf9      	adds	r1, r7, #3
   1207c:	2200      	movs	r2, #0
   1207e:	0018      	movs	r0, r3
   12080:	4b07      	ldr	r3, [pc, #28]	; (120a0 <Flush_RX_Buffer+0x30>)
   12082:	4798      	blx	r3
   12084:	0003      	movs	r3, r0
   12086:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
   12088:	687b      	ldr	r3, [r7, #4]
   1208a:	2b00      	cmp	r3, #0
   1208c:	d000      	beq.n	12090 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
   1208e:	e7f2      	b.n	12076 <Flush_RX_Buffer+0x6>
		{
			break;
   12090:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   12092:	46c0      	nop			; (mov r8, r8)
   12094:	46bd      	mov	sp, r7
   12096:	b002      	add	sp, #8
   12098:	bd80      	pop	{r7, pc}
   1209a:	46c0      	nop			; (mov r8, r8)
   1209c:	2000041c 	.word	0x2000041c
   120a0:	0001fec1 	.word	0x0001fec1

000120a4 <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
   120a4:	b590      	push	{r4, r7, lr}
   120a6:	b085      	sub	sp, #20
   120a8:	af00      	add	r7, sp, #0
   120aa:	0002      	movs	r2, r0
   120ac:	1dfb      	adds	r3, r7, #7
   120ae:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
   120b0:	4b18      	ldr	r3, [pc, #96]	; (12114 <gsm_rx_handler+0x70>)
   120b2:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
   120b4:	68fb      	ldr	r3, [r7, #12]
   120b6:	7e1b      	ldrb	r3, [r3, #24]
   120b8:	b2db      	uxtb	r3, r3
   120ba:	001a      	movs	r2, r3
   120bc:	2304      	movs	r3, #4
   120be:	4013      	ands	r3, r2
   120c0:	d023      	beq.n	1210a <gsm_rx_handler+0x66>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
   120c2:	68fb      	ldr	r3, [r7, #12]
   120c4:	8b5b      	ldrh	r3, [r3, #26]
   120c6:	b29b      	uxth	r3, r3
   120c8:	b2da      	uxtb	r2, r3
   120ca:	230b      	movs	r3, #11
   120cc:	18fb      	adds	r3, r7, r3
   120ce:	2106      	movs	r1, #6
   120d0:	400a      	ands	r2, r1
   120d2:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
   120d4:	230b      	movs	r3, #11
   120d6:	18fb      	adds	r3, r7, r3
   120d8:	781b      	ldrb	r3, [r3, #0]
   120da:	2b00      	cmp	r3, #0
   120dc:	d006      	beq.n	120ec <gsm_rx_handler+0x48>
		{
			usart_hw->STATUS.reg = rx_error;
   120de:	230b      	movs	r3, #11
   120e0:	18fb      	adds	r3, r7, r3
   120e2:	781b      	ldrb	r3, [r3, #0]
   120e4:	b29a      	uxth	r2, r3
   120e6:	68fb      	ldr	r3, [r7, #12]
   120e8:	835a      	strh	r2, [r3, #26]
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
			//gsm_module_exit_sleep(true);
		}
	}
}
   120ea:	e00e      	b.n	1210a <gsm_rx_handler+0x66>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   120ec:	68fb      	ldr	r3, [r7, #12]
   120ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   120f0:	b29b      	uxth	r3, r3
   120f2:	b2da      	uxtb	r2, r3
   120f4:	230a      	movs	r3, #10
   120f6:	18fb      	adds	r3, r7, r3
   120f8:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
   120fa:	4b07      	ldr	r3, [pc, #28]	; (12118 <gsm_rx_handler+0x74>)
   120fc:	6818      	ldr	r0, [r3, #0]
   120fe:	230a      	movs	r3, #10
   12100:	18f9      	adds	r1, r7, r3
   12102:	2300      	movs	r3, #0
   12104:	2200      	movs	r2, #0
   12106:	4c05      	ldr	r4, [pc, #20]	; (1211c <gsm_rx_handler+0x78>)
   12108:	47a0      	blx	r4
}
   1210a:	46c0      	nop			; (mov r8, r8)
   1210c:	46bd      	mov	sp, r7
   1210e:	b005      	add	sp, #20
   12110:	bd90      	pop	{r4, r7, pc}
   12112:	46c0      	nop			; (mov r8, r8)
   12114:	42001400 	.word	0x42001400
   12118:	2000041c 	.word	0x2000041c
   1211c:	0001fda1 	.word	0x0001fda1

00012120 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
   12120:	b580      	push	{r7, lr}
   12122:	af00      	add	r7, sp, #0
	isRinging = !port_pin_get_input_level(GSM_RING_PIN);
   12124:	2031      	movs	r0, #49	; 0x31
   12126:	4b0b      	ldr	r3, [pc, #44]	; (12154 <gsm_ring_detect_pin_callback+0x34>)
   12128:	4798      	blx	r3
   1212a:	0003      	movs	r3, r0
   1212c:	1e5a      	subs	r2, r3, #1
   1212e:	4193      	sbcs	r3, r2
   12130:	b2db      	uxtb	r3, r3
   12132:	2201      	movs	r2, #1
   12134:	4053      	eors	r3, r2
   12136:	b2db      	uxtb	r3, r3
   12138:	1c1a      	adds	r2, r3, #0
   1213a:	2301      	movs	r3, #1
   1213c:	4013      	ands	r3, r2
   1213e:	b2da      	uxtb	r2, r3
   12140:	4b05      	ldr	r3, [pc, #20]	; (12158 <gsm_ring_detect_pin_callback+0x38>)
   12142:	701a      	strb	r2, [r3, #0]
	lastRingStateChangeTime = xTaskGetTickCountFromISR();
   12144:	4b05      	ldr	r3, [pc, #20]	; (1215c <gsm_ring_detect_pin_callback+0x3c>)
   12146:	4798      	blx	r3
   12148:	0002      	movs	r2, r0
   1214a:	4b05      	ldr	r3, [pc, #20]	; (12160 <gsm_ring_detect_pin_callback+0x40>)
   1214c:	601a      	str	r2, [r3, #0]
}
   1214e:	46c0      	nop			; (mov r8, r8)
   12150:	46bd      	mov	sp, r7
   12152:	bd80      	pop	{r7, pc}
   12154:	00011dfd 	.word	0x00011dfd
   12158:	2000088e 	.word	0x2000088e
   1215c:	00020ce9 	.word	0x00020ce9
   12160:	200008cc 	.word	0x200008cc

00012164 <gsm_init>:

void gsm_init(void)
{
   12164:	b590      	push	{r4, r7, lr}
   12166:	b097      	sub	sp, #92	; 0x5c
   12168:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
   1216a:	234c      	movs	r3, #76	; 0x4c
   1216c:	18fb      	adds	r3, r7, r3
   1216e:	0018      	movs	r0, r3
   12170:	4b4d      	ldr	r3, [pc, #308]	; (122a8 <gsm_init+0x144>)
   12172:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
   12174:	234c      	movs	r3, #76	; 0x4c
   12176:	18fb      	adds	r3, r7, r3
   12178:	2201      	movs	r2, #1
   1217a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
   1217c:	234c      	movs	r3, #76	; 0x4c
   1217e:	18fb      	adds	r3, r7, r3
   12180:	0019      	movs	r1, r3
   12182:	2014      	movs	r0, #20
   12184:	4b49      	ldr	r3, [pc, #292]	; (122ac <gsm_init+0x148>)
   12186:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
   12188:	2100      	movs	r1, #0
   1218a:	2014      	movs	r0, #20
   1218c:	4b48      	ldr	r3, [pc, #288]	; (122b0 <gsm_init+0x14c>)
   1218e:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   12190:	2340      	movs	r3, #64	; 0x40
   12192:	18fb      	adds	r3, r7, r3
   12194:	0018      	movs	r0, r3
   12196:	4b47      	ldr	r3, [pc, #284]	; (122b4 <gsm_init+0x150>)
   12198:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
   1219a:	2340      	movs	r3, #64	; 0x40
   1219c:	18fb      	adds	r3, r7, r3
   1219e:	2231      	movs	r2, #49	; 0x31
   121a0:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
   121a2:	2340      	movs	r3, #64	; 0x40
   121a4:	18fb      	adds	r3, r7, r3
   121a6:	2200      	movs	r2, #0
   121a8:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   121aa:	2340      	movs	r3, #64	; 0x40
   121ac:	18fb      	adds	r3, r7, r3
   121ae:	2201      	movs	r2, #1
   121b0:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   121b2:	2340      	movs	r3, #64	; 0x40
   121b4:	18fb      	adds	r3, r7, r3
   121b6:	2203      	movs	r2, #3
   121b8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
   121ba:	2340      	movs	r3, #64	; 0x40
   121bc:	18fb      	adds	r3, r7, r3
   121be:	0019      	movs	r1, r3
   121c0:	2001      	movs	r0, #1
   121c2:	4b3d      	ldr	r3, [pc, #244]	; (122b8 <gsm_init+0x154>)
   121c4:	4798      	blx	r3
	
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   121c6:	2100      	movs	r1, #0
   121c8:	2001      	movs	r0, #1
   121ca:	4b3c      	ldr	r3, [pc, #240]	; (122bc <gsm_init+0x158>)
   121cc:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   121ce:	4b3c      	ldr	r3, [pc, #240]	; (122c0 <gsm_init+0x15c>)
   121d0:	2200      	movs	r2, #0
   121d2:	2101      	movs	r1, #1
   121d4:	0018      	movs	r0, r3
   121d6:	4b3b      	ldr	r3, [pc, #236]	; (122c4 <gsm_init+0x160>)
   121d8:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
   121da:	2200      	movs	r2, #0
   121dc:	2101      	movs	r1, #1
   121de:	20f0      	movs	r0, #240	; 0xf0
   121e0:	4b39      	ldr	r3, [pc, #228]	; (122c8 <gsm_init+0x164>)
   121e2:	4798      	blx	r3
   121e4:	0002      	movs	r2, r0
   121e6:	4b39      	ldr	r3, [pc, #228]	; (122cc <gsm_init+0x168>)
   121e8:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
   121ea:	4939      	ldr	r1, [pc, #228]	; (122d0 <gsm_init+0x16c>)
   121ec:	4839      	ldr	r0, [pc, #228]	; (122d4 <gsm_init+0x170>)
   121ee:	4b3a      	ldr	r3, [pc, #232]	; (122d8 <gsm_init+0x174>)
   121f0:	9300      	str	r3, [sp, #0]
   121f2:	2300      	movs	r3, #0
   121f4:	2200      	movs	r2, #0
   121f6:	4c39      	ldr	r4, [pc, #228]	; (122dc <gsm_init+0x178>)
   121f8:	47a0      	blx	r4
   121fa:	0002      	movs	r2, r0
   121fc:	4b38      	ldr	r3, [pc, #224]	; (122e0 <gsm_init+0x17c>)
   121fe:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
   12200:	2203      	movs	r2, #3
   12202:	2100      	movs	r1, #0
   12204:	2001      	movs	r0, #1
   12206:	4b30      	ldr	r3, [pc, #192]	; (122c8 <gsm_init+0x164>)
   12208:	4798      	blx	r3
   1220a:	0002      	movs	r2, r0
   1220c:	4b35      	ldr	r3, [pc, #212]	; (122e4 <gsm_init+0x180>)
   1220e:	601a      	str	r2, [r3, #0]
   12210:	4b34      	ldr	r3, [pc, #208]	; (122e4 <gsm_init+0x180>)
   12212:	681b      	ldr	r3, [r3, #0]
   12214:	2b00      	cmp	r3, #0
   12216:	d006      	beq.n	12226 <gsm_init+0xc2>
   12218:	4b32      	ldr	r3, [pc, #200]	; (122e4 <gsm_init+0x180>)
   1221a:	6818      	ldr	r0, [r3, #0]
   1221c:	2300      	movs	r3, #0
   1221e:	2200      	movs	r2, #0
   12220:	2100      	movs	r1, #0
   12222:	4c31      	ldr	r4, [pc, #196]	; (122e8 <gsm_init+0x184>)
   12224:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   12226:	003b      	movs	r3, r7
   12228:	0018      	movs	r0, r3
   1222a:	4b30      	ldr	r3, [pc, #192]	; (122ec <gsm_init+0x188>)
   1222c:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
   1222e:	003b      	movs	r3, r7
   12230:	2296      	movs	r2, #150	; 0x96
   12232:	01d2      	lsls	r2, r2, #7
   12234:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
   12236:	003b      	movs	r3, r7
   12238:	2280      	movs	r2, #128	; 0x80
   1223a:	0352      	lsls	r2, r2, #13
   1223c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
   1223e:	003b      	movs	r3, r7
   12240:	4a2b      	ldr	r2, [pc, #172]	; (122f0 <gsm_init+0x18c>)
   12242:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
   12244:	003b      	movs	r3, r7
   12246:	4a2b      	ldr	r2, [pc, #172]	; (122f4 <gsm_init+0x190>)
   12248:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
   1224a:	003b      	movs	r3, r7
   1224c:	2201      	movs	r2, #1
   1224e:	4252      	negs	r2, r2
   12250:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
   12252:	003b      	movs	r3, r7
   12254:	2201      	movs	r2, #1
   12256:	4252      	negs	r2, r2
   12258:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
   1225a:	003b      	movs	r3, r7
   1225c:	222c      	movs	r2, #44	; 0x2c
   1225e:	2101      	movs	r1, #1
   12260:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   12262:	e003      	b.n	1226c <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
   12264:	4b24      	ldr	r3, [pc, #144]	; (122f8 <gsm_init+0x194>)
   12266:	0018      	movs	r0, r3
   12268:	4b24      	ldr	r3, [pc, #144]	; (122fc <gsm_init+0x198>)
   1226a:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
   1226c:	003a      	movs	r2, r7
   1226e:	4924      	ldr	r1, [pc, #144]	; (12300 <gsm_init+0x19c>)
   12270:	4b21      	ldr	r3, [pc, #132]	; (122f8 <gsm_init+0x194>)
   12272:	0018      	movs	r0, r3
   12274:	4b23      	ldr	r3, [pc, #140]	; (12304 <gsm_init+0x1a0>)
   12276:	4798      	blx	r3
   12278:	1e03      	subs	r3, r0, #0
   1227a:	d1f3      	bne.n	12264 <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
   1227c:	4b1e      	ldr	r3, [pc, #120]	; (122f8 <gsm_init+0x194>)
   1227e:	0018      	movs	r0, r3
   12280:	4b21      	ldr	r3, [pc, #132]	; (12308 <gsm_init+0x1a4>)
   12282:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
   12284:	4b1e      	ldr	r3, [pc, #120]	; (12300 <gsm_init+0x19c>)
   12286:	0018      	movs	r0, r3
   12288:	4b20      	ldr	r3, [pc, #128]	; (1230c <gsm_init+0x1a8>)
   1228a:	4798      	blx	r3
   1228c:	0003      	movs	r3, r0
   1228e:	001a      	movs	r2, r3
   12290:	4b1f      	ldr	r3, [pc, #124]	; (12310 <gsm_init+0x1ac>)
   12292:	0019      	movs	r1, r3
   12294:	0010      	movs	r0, r2
   12296:	4b1f      	ldr	r3, [pc, #124]	; (12314 <gsm_init+0x1b0>)
   12298:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
   1229a:	4b19      	ldr	r3, [pc, #100]	; (12300 <gsm_init+0x19c>)
   1229c:	2204      	movs	r2, #4
   1229e:	759a      	strb	r2, [r3, #22]
}
   122a0:	46c0      	nop			; (mov r8, r8)
   122a2:	46bd      	mov	sp, r7
   122a4:	b015      	add	sp, #84	; 0x54
   122a6:	bd90      	pop	{r4, r7, pc}
   122a8:	00011dd9 	.word	0x00011dd9
   122ac:	000237d1 	.word	0x000237d1
   122b0:	00011e41 	.word	0x00011e41
   122b4:	0001ee01 	.word	0x0001ee01
   122b8:	0001ee35 	.word	0x0001ee35
   122bc:	00022ee1 	.word	0x00022ee1
   122c0:	00012121 	.word	0x00012121
   122c4:	00022e7d 	.word	0x00022e7d
   122c8:	0001fb05 	.word	0x0001fb05
   122cc:	2000041c 	.word	0x2000041c
   122d0:	00001388 	.word	0x00001388
   122d4:	0002a2f8 	.word	0x0002a2f8
   122d8:	00012061 	.word	0x00012061
   122dc:	00021889 	.word	0x00021889
   122e0:	20000420 	.word	0x20000420
   122e4:	20000424 	.word	0x20000424
   122e8:	0001fbc1 	.word	0x0001fbc1
   122ec:	00011ed9 	.word	0x00011ed9
   122f0:	00160002 	.word	0x00160002
   122f4:	00170002 	.word	0x00170002
   122f8:	20000898 	.word	0x20000898
   122fc:	0001202d 	.word	0x0001202d
   12300:	42001400 	.word	0x42001400
   12304:	000224d5 	.word	0x000224d5
   12308:	00011f99 	.word	0x00011f99
   1230c:	0001f595 	.word	0x0001f595
   12310:	000120a5 	.word	0x000120a5
   12314:	00022c71 	.word	0x00022c71

00012318 <gsm_module_exit_sleep>:

void gsm_module_exit_sleep(bool calledFromRead)
{
   12318:	b580      	push	{r7, lr}
   1231a:	b082      	sub	sp, #8
   1231c:	af00      	add	r7, sp, #0
   1231e:	0002      	movs	r2, r0
   12320:	1dfb      	adds	r3, r7, #7
   12322:	701a      	strb	r2, [r3, #0]
	if (!isGSMModuleAwake)
   12324:	4b12      	ldr	r3, [pc, #72]	; (12370 <gsm_module_exit_sleep+0x58>)
   12326:	781b      	ldrb	r3, [r3, #0]
   12328:	b2db      	uxtb	r3, r3
   1232a:	2201      	movs	r2, #1
   1232c:	4053      	eors	r3, r2
   1232e:	b2db      	uxtb	r3, r3
   12330:	2b00      	cmp	r3, #0
   12332:	d010      	beq.n	12356 <gsm_module_exit_sleep+0x3e>
	{
		port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   12334:	2101      	movs	r1, #1
   12336:	2014      	movs	r0, #20
   12338:	4b0e      	ldr	r3, [pc, #56]	; (12374 <gsm_module_exit_sleep+0x5c>)
   1233a:	4798      	blx	r3
		isGSMModuleAwake = true;
   1233c:	4b0c      	ldr	r3, [pc, #48]	; (12370 <gsm_module_exit_sleep+0x58>)
   1233e:	2201      	movs	r2, #1
   12340:	701a      	strb	r2, [r3, #0]
		if (!calledFromRead)
   12342:	1dfb      	adds	r3, r7, #7
   12344:	781b      	ldrb	r3, [r3, #0]
   12346:	2201      	movs	r2, #1
   12348:	4053      	eors	r3, r2
   1234a:	b2db      	uxtb	r3, r3
   1234c:	2b00      	cmp	r3, #0
   1234e:	d002      	beq.n	12356 <gsm_module_exit_sleep+0x3e>
		{
			vTaskDelay(100 / portTICK_PERIOD_MS);
   12350:	2064      	movs	r0, #100	; 0x64
   12352:	4b09      	ldr	r3, [pc, #36]	; (12378 <gsm_module_exit_sleep+0x60>)
   12354:	4798      	blx	r3
		}
	}
	lastToLastGSMCommunicationTime=lastGSMCommunicationTime;
   12356:	4b09      	ldr	r3, [pc, #36]	; (1237c <gsm_module_exit_sleep+0x64>)
   12358:	681a      	ldr	r2, [r3, #0]
   1235a:	4b09      	ldr	r3, [pc, #36]	; (12380 <gsm_module_exit_sleep+0x68>)
   1235c:	601a      	str	r2, [r3, #0]
	lastGSMCommunicationTime=xTaskGetTickCount();
   1235e:	4b09      	ldr	r3, [pc, #36]	; (12384 <gsm_module_exit_sleep+0x6c>)
   12360:	4798      	blx	r3
   12362:	0002      	movs	r2, r0
   12364:	4b05      	ldr	r3, [pc, #20]	; (1237c <gsm_module_exit_sleep+0x64>)
   12366:	601a      	str	r2, [r3, #0]
}
   12368:	46c0      	nop			; (mov r8, r8)
   1236a:	46bd      	mov	sp, r7
   1236c:	b002      	add	sp, #8
   1236e:	bd80      	pop	{r7, pc}
   12370:	20000884 	.word	0x20000884
   12374:	00011e41 	.word	0x00011e41
   12378:	00020969 	.word	0x00020969
   1237c:	20000894 	.word	0x20000894
   12380:	20000890 	.word	0x20000890
   12384:	00020ccd 	.word	0x00020ccd

00012388 <gsm_module_enter_sleep>:

void gsm_module_enter_sleep(void)
{
   12388:	b580      	push	{r7, lr}
   1238a:	af00      	add	r7, sp, #0
	//port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_DEACTIVE);
	isGSMModuleAwake = false;
   1238c:	4b02      	ldr	r3, [pc, #8]	; (12398 <gsm_module_enter_sleep+0x10>)
   1238e:	2200      	movs	r2, #0
   12390:	701a      	strb	r2, [r3, #0]
}
   12392:	46c0      	nop			; (mov r8, r8)
   12394:	46bd      	mov	sp, r7
   12396:	bd80      	pop	{r7, pc}
   12398:	20000884 	.word	0x20000884

0001239c <gsm_module_sleep_elligible>:

bool gsm_module_sleep_elligible(void)
{
   1239c:	b580      	push	{r7, lr}
   1239e:	b082      	sub	sp, #8
   123a0:	af00      	add	r7, sp, #0
	if(isGSMModuleAwake)
   123a2:	4b0e      	ldr	r3, [pc, #56]	; (123dc <gsm_module_sleep_elligible+0x40>)
   123a4:	781b      	ldrb	r3, [r3, #0]
   123a6:	b2db      	uxtb	r3, r3
   123a8:	2b00      	cmp	r3, #0
   123aa:	d011      	beq.n	123d0 <gsm_module_sleep_elligible+0x34>
	{
		bool ret=false;
   123ac:	1dfb      	adds	r3, r7, #7
   123ae:	2200      	movs	r2, #0
   123b0:	701a      	strb	r2, [r3, #0]
		ret= ((xTaskGetTickCount() - lastGSMCommunicationTime)>=30000L);
   123b2:	4b0b      	ldr	r3, [pc, #44]	; (123e0 <gsm_module_sleep_elligible+0x44>)
   123b4:	4798      	blx	r3
   123b6:	0002      	movs	r2, r0
   123b8:	4b0a      	ldr	r3, [pc, #40]	; (123e4 <gsm_module_sleep_elligible+0x48>)
   123ba:	681b      	ldr	r3, [r3, #0]
   123bc:	1ad2      	subs	r2, r2, r3
   123be:	1dfb      	adds	r3, r7, #7
   123c0:	4909      	ldr	r1, [pc, #36]	; (123e8 <gsm_module_sleep_elligible+0x4c>)
   123c2:	4291      	cmp	r1, r2
   123c4:	4192      	sbcs	r2, r2
   123c6:	4252      	negs	r2, r2
   123c8:	701a      	strb	r2, [r3, #0]
		return ret;
   123ca:	1dfb      	adds	r3, r7, #7
   123cc:	781b      	ldrb	r3, [r3, #0]
   123ce:	e000      	b.n	123d2 <gsm_module_sleep_elligible+0x36>
	}
	return true;
   123d0:	2301      	movs	r3, #1
}
   123d2:	0018      	movs	r0, r3
   123d4:	46bd      	mov	sp, r7
   123d6:	b002      	add	sp, #8
   123d8:	bd80      	pop	{r7, pc}
   123da:	46c0      	nop			; (mov r8, r8)
   123dc:	20000884 	.word	0x20000884
   123e0:	00020ccd 	.word	0x00020ccd
   123e4:	20000894 	.word	0x20000894
   123e8:	0000752f 	.word	0x0000752f

000123ec <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
   123ec:	b590      	push	{r4, r7, lr}
   123ee:	b08b      	sub	sp, #44	; 0x2c
   123f0:	af02      	add	r7, sp, #8
   123f2:	60f8      	str	r0, [r7, #12]
   123f4:	60b9      	str	r1, [r7, #8]
   123f6:	607a      	str	r2, [r7, #4]
   123f8:	001a      	movs	r2, r3
   123fa:	1cfb      	adds	r3, r7, #3
   123fc:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
   123fe:	4b69      	ldr	r3, [pc, #420]	; (125a4 <gsm_send_at_command+0x1b8>)
   12400:	681b      	ldr	r3, [r3, #0]
   12402:	2101      	movs	r1, #1
   12404:	0018      	movs	r0, r3
   12406:	4b68      	ldr	r3, [pc, #416]	; (125a8 <gsm_send_at_command+0x1bc>)
   12408:	4798      	blx	r3
   1240a:	1e03      	subs	r3, r0, #0
   1240c:	d101      	bne.n	12412 <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
   1240e:	2302      	movs	r3, #2
   12410:	e0c4      	b.n	1259c <gsm_send_at_command+0x1b0>
	}
	
	
	/* Enable DTR and wait for the module to be ready to accept a command */
	gsm_module_exit_sleep(false);
   12412:	2000      	movs	r0, #0
   12414:	4b65      	ldr	r3, [pc, #404]	; (125ac <gsm_send_at_command+0x1c0>)
   12416:	4798      	blx	r3
	/*                                                                      */
	
	//lastGSMCommandTime=xTaskGetTickCount();
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
   12418:	4b65      	ldr	r3, [pc, #404]	; (125b0 <gsm_send_at_command+0x1c4>)
   1241a:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
   1241c:	231f      	movs	r3, #31
   1241e:	18fb      	adds	r3, r7, r3
   12420:	2200      	movs	r2, #0
   12422:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
   12424:	231e      	movs	r3, #30
   12426:	18fb      	adds	r3, r7, r3
   12428:	2200      	movs	r2, #0
   1242a:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
   1242c:	2313      	movs	r3, #19
   1242e:	18fb      	adds	r3, r7, r3
   12430:	2200      	movs	r2, #0
   12432:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
   12434:	2101      	movs	r1, #1
   12436:	20f0      	movs	r0, #240	; 0xf0
   12438:	4b5e      	ldr	r3, [pc, #376]	; (125b4 <gsm_send_at_command+0x1c8>)
   1243a:	4798      	blx	r3
   1243c:	0003      	movs	r3, r0
   1243e:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
   12440:	69bb      	ldr	r3, [r7, #24]
   12442:	2b00      	cmp	r3, #0
   12444:	d108      	bne.n	12458 <gsm_send_at_command+0x6c>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		xSemaphoreGive(gsm_busy_semaphore);
   12446:	4b57      	ldr	r3, [pc, #348]	; (125a4 <gsm_send_at_command+0x1b8>)
   12448:	6818      	ldr	r0, [r3, #0]
   1244a:	2300      	movs	r3, #0
   1244c:	2200      	movs	r2, #0
   1244e:	2100      	movs	r1, #0
   12450:	4c59      	ldr	r4, [pc, #356]	; (125b8 <gsm_send_at_command+0x1cc>)
   12452:	47a0      	blx	r4
		return 0;
   12454:	2300      	movs	r3, #0
   12456:	e0a1      	b.n	1259c <gsm_send_at_command+0x1b0>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
   12458:	69bb      	ldr	r3, [r7, #24]
   1245a:	22f0      	movs	r2, #240	; 0xf0
   1245c:	2100      	movs	r1, #0
   1245e:	0018      	movs	r0, r3
   12460:	4b56      	ldr	r3, [pc, #344]	; (125bc <gsm_send_at_command+0x1d0>)
   12462:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));
   12464:	68fb      	ldr	r3, [r7, #12]
   12466:	0018      	movs	r0, r3
   12468:	4b55      	ldr	r3, [pc, #340]	; (125c0 <gsm_send_at_command+0x1d4>)
   1246a:	4798      	blx	r3
   1246c:	0003      	movs	r3, r0
   1246e:	b29a      	uxth	r2, r3
   12470:	68f9      	ldr	r1, [r7, #12]
   12472:	4b54      	ldr	r3, [pc, #336]	; (125c4 <gsm_send_at_command+0x1d8>)
   12474:	0018      	movs	r0, r3
   12476:	4b54      	ldr	r3, [pc, #336]	; (125c8 <gsm_send_at_command+0x1dc>)
   12478:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
   1247a:	4b54      	ldr	r3, [pc, #336]	; (125cc <gsm_send_at_command+0x1e0>)
   1247c:	6818      	ldr	r0, [r3, #0]
   1247e:	687a      	ldr	r2, [r7, #4]
   12480:	2301      	movs	r3, #1
   12482:	425b      	negs	r3, r3
   12484:	9300      	str	r3, [sp, #0]
   12486:	2300      	movs	r3, #0
   12488:	2104      	movs	r1, #4
   1248a:	4c51      	ldr	r4, [pc, #324]	; (125d0 <gsm_send_at_command+0x1e4>)
   1248c:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
   1248e:	4b4f      	ldr	r3, [pc, #316]	; (125cc <gsm_send_at_command+0x1e0>)
   12490:	681b      	ldr	r3, [r3, #0]
   12492:	0018      	movs	r0, r3
   12494:	4b4f      	ldr	r3, [pc, #316]	; (125d4 <gsm_send_at_command+0x1e8>)
   12496:	4798      	blx	r3
   12498:	1e03      	subs	r3, r0, #0
   1249a:	d03e      	beq.n	1251a <gsm_send_at_command+0x12e>
		{
			if (u8tRx_Index<240)
   1249c:	231e      	movs	r3, #30
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	781b      	ldrb	r3, [r3, #0]
   124a2:	2bef      	cmp	r3, #239	; 0xef
   124a4:	d81c      	bhi.n	124e0 <gsm_send_at_command+0xf4>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
   124a6:	4b4c      	ldr	r3, [pc, #304]	; (125d8 <gsm_send_at_command+0x1ec>)
   124a8:	681b      	ldr	r3, [r3, #0]
   124aa:	2213      	movs	r2, #19
   124ac:	18b9      	adds	r1, r7, r2
   124ae:	2200      	movs	r2, #0
   124b0:	0018      	movs	r0, r3
   124b2:	4b4a      	ldr	r3, [pc, #296]	; (125dc <gsm_send_at_command+0x1f0>)
   124b4:	4798      	blx	r3
   124b6:	0003      	movs	r3, r0
   124b8:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
   124ba:	697b      	ldr	r3, [r7, #20]
   124bc:	2b00      	cmp	r3, #0
   124be:	d00f      	beq.n	124e0 <gsm_send_at_command+0xf4>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
   124c0:	231e      	movs	r3, #30
   124c2:	18fb      	adds	r3, r7, r3
   124c4:	781b      	ldrb	r3, [r3, #0]
   124c6:	69ba      	ldr	r2, [r7, #24]
   124c8:	18d3      	adds	r3, r2, r3
   124ca:	2213      	movs	r2, #19
   124cc:	18ba      	adds	r2, r7, r2
   124ce:	7812      	ldrb	r2, [r2, #0]
   124d0:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
   124d2:	231e      	movs	r3, #30
   124d4:	18fb      	adds	r3, r7, r3
   124d6:	781a      	ldrb	r2, [r3, #0]
   124d8:	231e      	movs	r3, #30
   124da:	18fb      	adds	r3, r7, r3
   124dc:	3201      	adds	r2, #1
   124de:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
   124e0:	68bb      	ldr	r3, [r7, #8]
   124e2:	2b00      	cmp	r3, #0
   124e4:	d00c      	beq.n	12500 <gsm_send_at_command+0x114>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
   124e6:	68ba      	ldr	r2, [r7, #8]
   124e8:	69bb      	ldr	r3, [r7, #24]
   124ea:	0011      	movs	r1, r2
   124ec:	0018      	movs	r0, r3
   124ee:	4b3c      	ldr	r3, [pc, #240]	; (125e0 <gsm_send_at_command+0x1f4>)
   124f0:	4798      	blx	r3
   124f2:	1e03      	subs	r3, r0, #0
   124f4:	d004      	beq.n	12500 <gsm_send_at_command+0x114>
				{
					err_no = GSM_ERROR_NONE;
   124f6:	231f      	movs	r3, #31
   124f8:	18fb      	adds	r3, r7, r3
   124fa:	2200      	movs	r2, #0
   124fc:	701a      	strb	r2, [r3, #0]
					break;
   124fe:	e024      	b.n	1254a <gsm_send_at_command+0x15e>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
   12500:	4a38      	ldr	r2, [pc, #224]	; (125e4 <gsm_send_at_command+0x1f8>)
   12502:	69bb      	ldr	r3, [r7, #24]
   12504:	0011      	movs	r1, r2
   12506:	0018      	movs	r0, r3
   12508:	4b35      	ldr	r3, [pc, #212]	; (125e0 <gsm_send_at_command+0x1f4>)
   1250a:	4798      	blx	r3
   1250c:	1e03      	subs	r3, r0, #0
   1250e:	d0be      	beq.n	1248e <gsm_send_at_command+0xa2>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
   12510:	231f      	movs	r3, #31
   12512:	18fb      	adds	r3, r7, r3
   12514:	220b      	movs	r2, #11
   12516:	701a      	strb	r2, [r3, #0]
				break;
   12518:	e017      	b.n	1254a <gsm_send_at_command+0x15e>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
   1251a:	4b2c      	ldr	r3, [pc, #176]	; (125cc <gsm_send_at_command+0x1e0>)
   1251c:	6818      	ldr	r0, [r3, #0]
   1251e:	2301      	movs	r3, #1
   12520:	425b      	negs	r3, r3
   12522:	9300      	str	r3, [sp, #0]
   12524:	2300      	movs	r3, #0
   12526:	2200      	movs	r2, #0
   12528:	2103      	movs	r1, #3
   1252a:	4c29      	ldr	r4, [pc, #164]	; (125d0 <gsm_send_at_command+0x1e4>)
   1252c:	47a0      	blx	r4
			if (u8tRx_Index==0)
   1252e:	231e      	movs	r3, #30
   12530:	18fb      	adds	r3, r7, r3
   12532:	781b      	ldrb	r3, [r3, #0]
   12534:	2b00      	cmp	r3, #0
   12536:	d104      	bne.n	12542 <gsm_send_at_command+0x156>
			{
				err_no = GSM_ERROR_TIMEOUT;
   12538:	231f      	movs	r3, #31
   1253a:	18fb      	adds	r3, r7, r3
   1253c:	2207      	movs	r2, #7
   1253e:	701a      	strb	r2, [r3, #0]
				break;
   12540:	e003      	b.n	1254a <gsm_send_at_command+0x15e>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
   12542:	231f      	movs	r3, #31
   12544:	18fb      	adds	r3, r7, r3
   12546:	2208      	movs	r2, #8
   12548:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
   1254a:	1cfb      	adds	r3, r7, #3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2b00      	cmp	r3, #0
   12550:	d016      	beq.n	12580 <gsm_send_at_command+0x194>
   12552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12554:	2b00      	cmp	r3, #0
   12556:	d013      	beq.n	12580 <gsm_send_at_command+0x194>
   12558:	1cfa      	adds	r2, r7, #3
   1255a:	231e      	movs	r3, #30
   1255c:	18fb      	adds	r3, r7, r3
   1255e:	7812      	ldrb	r2, [r2, #0]
   12560:	781b      	ldrb	r3, [r3, #0]
   12562:	429a      	cmp	r2, r3
   12564:	d90c      	bls.n	12580 <gsm_send_at_command+0x194>
   12566:	231f      	movs	r3, #31
   12568:	18fb      	adds	r3, r7, r3
   1256a:	781b      	ldrb	r3, [r3, #0]
   1256c:	2b00      	cmp	r3, #0
   1256e:	d107      	bne.n	12580 <gsm_send_at_command+0x194>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
   12570:	231e      	movs	r3, #30
   12572:	18fb      	adds	r3, r7, r3
   12574:	781a      	ldrb	r2, [r3, #0]
   12576:	69b9      	ldr	r1, [r7, #24]
   12578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1257a:	0018      	movs	r0, r3
   1257c:	4b1a      	ldr	r3, [pc, #104]	; (125e8 <gsm_send_at_command+0x1fc>)
   1257e:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
   12580:	4b08      	ldr	r3, [pc, #32]	; (125a4 <gsm_send_at_command+0x1b8>)
   12582:	6818      	ldr	r0, [r3, #0]
   12584:	2300      	movs	r3, #0
   12586:	2200      	movs	r2, #0
   12588:	2100      	movs	r1, #0
   1258a:	4c0b      	ldr	r4, [pc, #44]	; (125b8 <gsm_send_at_command+0x1cc>)
   1258c:	47a0      	blx	r4
	free(aDataBuffer);
   1258e:	69bb      	ldr	r3, [r7, #24]
   12590:	0018      	movs	r0, r3
   12592:	4b16      	ldr	r3, [pc, #88]	; (125ec <gsm_send_at_command+0x200>)
   12594:	4798      	blx	r3
	return err_no;
   12596:	231f      	movs	r3, #31
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781b      	ldrb	r3, [r3, #0]
}
   1259c:	0018      	movs	r0, r3
   1259e:	46bd      	mov	sp, r7
   125a0:	b009      	add	sp, #36	; 0x24
   125a2:	bd90      	pop	{r4, r7, pc}
   125a4:	20000424 	.word	0x20000424
   125a8:	00020061 	.word	0x00020061
   125ac:	00012319 	.word	0x00012319
   125b0:	00012071 	.word	0x00012071
   125b4:	00029549 	.word	0x00029549
   125b8:	0001fbc1 	.word	0x0001fbc1
   125bc:	00029657 	.word	0x00029657
   125c0:	000298e7 	.word	0x000298e7
   125c4:	20000898 	.word	0x20000898
   125c8:	000227ad 	.word	0x000227ad
   125cc:	20000420 	.word	0x20000420
   125d0:	0002192d 	.word	0x0002192d
   125d4:	00021ea9 	.word	0x00021ea9
   125d8:	2000041c 	.word	0x2000041c
   125dc:	0001fec1 	.word	0x0001fec1
   125e0:	00029917 	.word	0x00029917
   125e4:	0002a304 	.word	0x0002a304
   125e8:	00029621 	.word	0x00029621
   125ec:	000295e9 	.word	0x000295e9

000125f0 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
   125f0:	b590      	push	{r4, r7, lr}
   125f2:	b083      	sub	sp, #12
   125f4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
   125f6:	4a06      	ldr	r2, [pc, #24]	; (12610 <gsm_check_module+0x20>)
   125f8:	4906      	ldr	r1, [pc, #24]	; (12614 <gsm_check_module+0x24>)
   125fa:	4807      	ldr	r0, [pc, #28]	; (12618 <gsm_check_module+0x28>)
   125fc:	2300      	movs	r3, #0
   125fe:	9300      	str	r3, [sp, #0]
   12600:	2300      	movs	r3, #0
   12602:	4c06      	ldr	r4, [pc, #24]	; (1261c <gsm_check_module+0x2c>)
   12604:	47a0      	blx	r4
   12606:	0003      	movs	r3, r0
}
   12608:	0018      	movs	r0, r3
   1260a:	46bd      	mov	sp, r7
   1260c:	b001      	add	sp, #4
   1260e:	bd90      	pop	{r4, r7, pc}
   12610:	00001388 	.word	0x00001388
   12614:	0002a30c 	.word	0x0002a30c
   12618:	0002a310 	.word	0x0002a310
   1261c:	000123ed 	.word	0x000123ed

00012620 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
   12620:	b5b0      	push	{r4, r5, r7, lr}
   12622:	b084      	sub	sp, #16
   12624:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
   12626:	1dfc      	adds	r4, r7, #7
   12628:	4a12      	ldr	r2, [pc, #72]	; (12674 <gsm_is_network_registered+0x54>)
   1262a:	4913      	ldr	r1, [pc, #76]	; (12678 <gsm_is_network_registered+0x58>)
   1262c:	4813      	ldr	r0, [pc, #76]	; (1267c <gsm_is_network_registered+0x5c>)
   1262e:	2300      	movs	r3, #0
   12630:	9300      	str	r3, [sp, #0]
   12632:	2300      	movs	r3, #0
   12634:	4d12      	ldr	r5, [pc, #72]	; (12680 <gsm_is_network_registered+0x60>)
   12636:	47a8      	blx	r5
   12638:	0003      	movs	r3, r0
   1263a:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
   1263c:	1dfb      	adds	r3, r7, #7
   1263e:	781b      	ldrb	r3, [r3, #0]
   12640:	2b00      	cmp	r3, #0
   12642:	d101      	bne.n	12648 <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;
   12644:	2309      	movs	r3, #9
   12646:	e011      	b.n	1266c <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
   12648:	1dbc      	adds	r4, r7, #6
   1264a:	4a0a      	ldr	r2, [pc, #40]	; (12674 <gsm_is_network_registered+0x54>)
   1264c:	490d      	ldr	r1, [pc, #52]	; (12684 <gsm_is_network_registered+0x64>)
   1264e:	480b      	ldr	r0, [pc, #44]	; (1267c <gsm_is_network_registered+0x5c>)
   12650:	2300      	movs	r3, #0
   12652:	9300      	str	r3, [sp, #0]
   12654:	2300      	movs	r3, #0
   12656:	4d0a      	ldr	r5, [pc, #40]	; (12680 <gsm_is_network_registered+0x60>)
   12658:	47a8      	blx	r5
   1265a:	0003      	movs	r3, r0
   1265c:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
   1265e:	1dbb      	adds	r3, r7, #6
   12660:	781b      	ldrb	r3, [r3, #0]
   12662:	2b00      	cmp	r3, #0
   12664:	d101      	bne.n	1266a <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
   12666:	2309      	movs	r3, #9
   12668:	e000      	b.n	1266c <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
   1266a:	230a      	movs	r3, #10
			}
		}
	}
}
   1266c:	0018      	movs	r0, r3
   1266e:	46bd      	mov	sp, r7
   12670:	b002      	add	sp, #8
   12672:	bdb0      	pop	{r4, r5, r7, pc}
   12674:	00001388 	.word	0x00001388
   12678:	0002a320 	.word	0x0002a320
   1267c:	0002a32c 	.word	0x0002a32c
   12680:	000123ed 	.word	0x000123ed
   12684:	0002a338 	.word	0x0002a338

00012688 <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
   12688:	b590      	push	{r4, r7, lr}
   1268a:	b089      	sub	sp, #36	; 0x24
   1268c:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
   1268e:	1d3b      	adds	r3, r7, #4
   12690:	0018      	movs	r0, r3
   12692:	2314      	movs	r3, #20
   12694:	001a      	movs	r2, r3
   12696:	2100      	movs	r1, #0
   12698:	4b0a      	ldr	r3, [pc, #40]	; (126c4 <gsm_set_baudrate+0x3c>)
   1269a:	4798      	blx	r3
	
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
   1269c:	2396      	movs	r3, #150	; 0x96
   1269e:	01da      	lsls	r2, r3, #7
   126a0:	4909      	ldr	r1, [pc, #36]	; (126c8 <gsm_set_baudrate+0x40>)
   126a2:	1d3b      	adds	r3, r7, #4
   126a4:	0018      	movs	r0, r3
   126a6:	4b09      	ldr	r3, [pc, #36]	; (126cc <gsm_set_baudrate+0x44>)
   126a8:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
   126aa:	4a09      	ldr	r2, [pc, #36]	; (126d0 <gsm_set_baudrate+0x48>)
   126ac:	4909      	ldr	r1, [pc, #36]	; (126d4 <gsm_set_baudrate+0x4c>)
   126ae:	1d38      	adds	r0, r7, #4
   126b0:	2300      	movs	r3, #0
   126b2:	9300      	str	r3, [sp, #0]
   126b4:	2300      	movs	r3, #0
   126b6:	4c08      	ldr	r4, [pc, #32]	; (126d8 <gsm_set_baudrate+0x50>)
   126b8:	47a0      	blx	r4
   126ba:	0003      	movs	r3, r0
}
   126bc:	0018      	movs	r0, r3
   126be:	46bd      	mov	sp, r7
   126c0:	b007      	add	sp, #28
   126c2:	bd90      	pop	{r4, r7, pc}
   126c4:	00029657 	.word	0x00029657
   126c8:	0002a344 	.word	0x0002a344
   126cc:	0002985d 	.word	0x0002985d
   126d0:	00001388 	.word	0x00001388
   126d4:	0002a30c 	.word	0x0002a30c
   126d8:	000123ed 	.word	0x000123ed

000126dc <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
   126dc:	b590      	push	{r4, r7, lr}
   126de:	b083      	sub	sp, #12
   126e0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
   126e2:	4a06      	ldr	r2, [pc, #24]	; (126fc <gsm_detect_simcard+0x20>)
   126e4:	4906      	ldr	r1, [pc, #24]	; (12700 <gsm_detect_simcard+0x24>)
   126e6:	4807      	ldr	r0, [pc, #28]	; (12704 <gsm_detect_simcard+0x28>)
   126e8:	2300      	movs	r3, #0
   126ea:	9300      	str	r3, [sp, #0]
   126ec:	2300      	movs	r3, #0
   126ee:	4c06      	ldr	r4, [pc, #24]	; (12708 <gsm_detect_simcard+0x2c>)
   126f0:	47a0      	blx	r4
   126f2:	0003      	movs	r3, r0
}
   126f4:	0018      	movs	r0, r3
   126f6:	46bd      	mov	sp, r7
   126f8:	b001      	add	sp, #4
   126fa:	bd90      	pop	{r4, r7, pc}
   126fc:	00001388 	.word	0x00001388
   12700:	0002a3b4 	.word	0x0002a3b4
   12704:	0002a3c4 	.word	0x0002a3c4
   12708:	000123ed 	.word	0x000123ed

0001270c <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
   1270c:	b590      	push	{r4, r7, lr}
   1270e:	b083      	sub	sp, #12
   12710:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
   12712:	4a06      	ldr	r2, [pc, #24]	; (1272c <gsm_delete_all_sms+0x20>)
   12714:	4906      	ldr	r1, [pc, #24]	; (12730 <gsm_delete_all_sms+0x24>)
   12716:	4807      	ldr	r0, [pc, #28]	; (12734 <gsm_delete_all_sms+0x28>)
   12718:	2300      	movs	r3, #0
   1271a:	9300      	str	r3, [sp, #0]
   1271c:	2300      	movs	r3, #0
   1271e:	4c06      	ldr	r4, [pc, #24]	; (12738 <gsm_delete_all_sms+0x2c>)
   12720:	47a0      	blx	r4
   12722:	0003      	movs	r3, r0
}
   12724:	0018      	movs	r0, r3
   12726:	46bd      	mov	sp, r7
   12728:	b001      	add	sp, #4
   1272a:	bd90      	pop	{r4, r7, pc}
   1272c:	000061a8 	.word	0x000061a8
   12730:	0002a30c 	.word	0x0002a30c
   12734:	0002a3d0 	.word	0x0002a3d0
   12738:	000123ed 	.word	0x000123ed

0001273c <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
   1273c:	b590      	push	{r4, r7, lr}
   1273e:	b083      	sub	sp, #12
   12740:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12742:	4a06      	ldr	r2, [pc, #24]	; (1275c <gsm_store_active_profile+0x20>)
   12744:	4906      	ldr	r1, [pc, #24]	; (12760 <gsm_store_active_profile+0x24>)
   12746:	4807      	ldr	r0, [pc, #28]	; (12764 <gsm_store_active_profile+0x28>)
   12748:	2300      	movs	r3, #0
   1274a:	9300      	str	r3, [sp, #0]
   1274c:	2300      	movs	r3, #0
   1274e:	4c06      	ldr	r4, [pc, #24]	; (12768 <gsm_store_active_profile+0x2c>)
   12750:	47a0      	blx	r4
   12752:	0003      	movs	r3, r0
}
   12754:	0018      	movs	r0, r3
   12756:	46bd      	mov	sp, r7
   12758:	b001      	add	sp, #4
   1275a:	bd90      	pop	{r4, r7, pc}
   1275c:	00001388 	.word	0x00001388
   12760:	0002a30c 	.word	0x0002a30c
   12764:	0002a3e4 	.word	0x0002a3e4
   12768:	000123ed 	.word	0x000123ed

0001276c <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
   1276c:	b590      	push	{r4, r7, lr}
   1276e:	b083      	sub	sp, #12
   12770:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12772:	4a06      	ldr	r2, [pc, #24]	; (1278c <gsm_enable_calling_line_identification+0x20>)
   12774:	4906      	ldr	r1, [pc, #24]	; (12790 <gsm_enable_calling_line_identification+0x24>)
   12776:	4807      	ldr	r0, [pc, #28]	; (12794 <gsm_enable_calling_line_identification+0x28>)
   12778:	2300      	movs	r3, #0
   1277a:	9300      	str	r3, [sp, #0]
   1277c:	2300      	movs	r3, #0
   1277e:	4c06      	ldr	r4, [pc, #24]	; (12798 <gsm_enable_calling_line_identification+0x2c>)
   12780:	47a0      	blx	r4
   12782:	0003      	movs	r3, r0
}
   12784:	0018      	movs	r0, r3
   12786:	46bd      	mov	sp, r7
   12788:	b001      	add	sp, #4
   1278a:	bd90      	pop	{r4, r7, pc}
   1278c:	00003a98 	.word	0x00003a98
   12790:	0002a30c 	.word	0x0002a30c
   12794:	0002a3ec 	.word	0x0002a3ec
   12798:	000123ed 	.word	0x000123ed

0001279c <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
   1279c:	b590      	push	{r4, r7, lr}
   1279e:	b083      	sub	sp, #12
   127a0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   127a2:	4a06      	ldr	r2, [pc, #24]	; (127bc <gsm_enable_connected_line_identification_presentation+0x20>)
   127a4:	4906      	ldr	r1, [pc, #24]	; (127c0 <gsm_enable_connected_line_identification_presentation+0x24>)
   127a6:	4807      	ldr	r0, [pc, #28]	; (127c4 <gsm_enable_connected_line_identification_presentation+0x28>)
   127a8:	2300      	movs	r3, #0
   127aa:	9300      	str	r3, [sp, #0]
   127ac:	2300      	movs	r3, #0
   127ae:	4c06      	ldr	r4, [pc, #24]	; (127c8 <gsm_enable_connected_line_identification_presentation+0x2c>)
   127b0:	47a0      	blx	r4
   127b2:	0003      	movs	r3, r0
}
   127b4:	0018      	movs	r0, r3
   127b6:	46bd      	mov	sp, r7
   127b8:	b001      	add	sp, #4
   127ba:	bd90      	pop	{r4, r7, pc}
   127bc:	00001388 	.word	0x00001388
   127c0:	0002a30c 	.word	0x0002a30c
   127c4:	0002a3f8 	.word	0x0002a3f8
   127c8:	000123ed 	.word	0x000123ed

000127cc <gsm_enable_sleep_mode>:


//The +CSCLK value can not be reset by AT&F or ATZ command.
enum gsm_error gsm_enable_sleep_mode(void)
{
   127cc:	b590      	push	{r4, r7, lr}
   127ce:	b083      	sub	sp, #12
   127d0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSCLK=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   127d2:	4a06      	ldr	r2, [pc, #24]	; (127ec <gsm_enable_sleep_mode+0x20>)
   127d4:	4906      	ldr	r1, [pc, #24]	; (127f0 <gsm_enable_sleep_mode+0x24>)
   127d6:	4807      	ldr	r0, [pc, #28]	; (127f4 <gsm_enable_sleep_mode+0x28>)
   127d8:	2300      	movs	r3, #0
   127da:	9300      	str	r3, [sp, #0]
   127dc:	2300      	movs	r3, #0
   127de:	4c06      	ldr	r4, [pc, #24]	; (127f8 <gsm_enable_sleep_mode+0x2c>)
   127e0:	47a0      	blx	r4
   127e2:	0003      	movs	r3, r0
}
   127e4:	0018      	movs	r0, r3
   127e6:	46bd      	mov	sp, r7
   127e8:	b001      	add	sp, #4
   127ea:	bd90      	pop	{r4, r7, pc}
   127ec:	00002710 	.word	0x00002710
   127f0:	0002a30c 	.word	0x0002a30c
   127f4:	0002a404 	.word	0x0002a404
   127f8:	000123ed 	.word	0x000123ed

000127fc <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
   127fc:	b590      	push	{r4, r7, lr}
   127fe:	b083      	sub	sp, #12
   12800:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12802:	4a06      	ldr	r2, [pc, #24]	; (1281c <gsm_enable_list_current_calls_of_ME+0x20>)
   12804:	4906      	ldr	r1, [pc, #24]	; (12820 <gsm_enable_list_current_calls_of_ME+0x24>)
   12806:	4807      	ldr	r0, [pc, #28]	; (12824 <gsm_enable_list_current_calls_of_ME+0x28>)
   12808:	2300      	movs	r3, #0
   1280a:	9300      	str	r3, [sp, #0]
   1280c:	2300      	movs	r3, #0
   1280e:	4c06      	ldr	r4, [pc, #24]	; (12828 <gsm_enable_list_current_calls_of_ME+0x2c>)
   12810:	47a0      	blx	r4
   12812:	0003      	movs	r3, r0
}
   12814:	0018      	movs	r0, r3
   12816:	46bd      	mov	sp, r7
   12818:	b001      	add	sp, #4
   1281a:	bd90      	pop	{r4, r7, pc}
   1281c:	00001388 	.word	0x00001388
   12820:	0002a30c 	.word	0x0002a30c
   12824:	0002a42c 	.word	0x0002a42c
   12828:	000123ed 	.word	0x000123ed

0001282c <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
   1282c:	b590      	push	{r4, r7, lr}
   1282e:	b083      	sub	sp, #12
   12830:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
   12832:	4a06      	ldr	r2, [pc, #24]	; (1284c <gsm_factory_reset+0x20>)
   12834:	4906      	ldr	r1, [pc, #24]	; (12850 <gsm_factory_reset+0x24>)
   12836:	4807      	ldr	r0, [pc, #28]	; (12854 <gsm_factory_reset+0x28>)
   12838:	2300      	movs	r3, #0
   1283a:	9300      	str	r3, [sp, #0]
   1283c:	2300      	movs	r3, #0
   1283e:	4c06      	ldr	r4, [pc, #24]	; (12858 <gsm_factory_reset+0x2c>)
   12840:	47a0      	blx	r4
   12842:	0003      	movs	r3, r0
}
   12844:	0018      	movs	r0, r3
   12846:	46bd      	mov	sp, r7
   12848:	b001      	add	sp, #4
   1284a:	bd90      	pop	{r4, r7, pc}
   1284c:	00003a98 	.word	0x00003a98
   12850:	0002a30c 	.word	0x0002a30c
   12854:	0002a438 	.word	0x0002a438
   12858:	000123ed 	.word	0x000123ed

0001285c <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
   1285c:	b590      	push	{r4, r7, lr}
   1285e:	b083      	sub	sp, #12
   12860:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12862:	4a06      	ldr	r2, [pc, #24]	; (1287c <gsm_echo_off+0x20>)
   12864:	4906      	ldr	r1, [pc, #24]	; (12880 <gsm_echo_off+0x24>)
   12866:	4807      	ldr	r0, [pc, #28]	; (12884 <gsm_echo_off+0x28>)
   12868:	2300      	movs	r3, #0
   1286a:	9300      	str	r3, [sp, #0]
   1286c:	2300      	movs	r3, #0
   1286e:	4c06      	ldr	r4, [pc, #24]	; (12888 <gsm_echo_off+0x2c>)
   12870:	47a0      	blx	r4
   12872:	0003      	movs	r3, r0
}
   12874:	0018      	movs	r0, r3
   12876:	46bd      	mov	sp, r7
   12878:	b001      	add	sp, #4
   1287a:	bd90      	pop	{r4, r7, pc}
   1287c:	00001388 	.word	0x00001388
   12880:	0002a30c 	.word	0x0002a30c
   12884:	0002a440 	.word	0x0002a440
   12888:	000123ed 	.word	0x000123ed

0001288c <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
   1288c:	b590      	push	{r4, r7, lr}
   1288e:	b083      	sub	sp, #12
   12890:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12892:	4a06      	ldr	r2, [pc, #24]	; (128ac <gsm_select_sms_message_formate_text_mode+0x20>)
   12894:	4906      	ldr	r1, [pc, #24]	; (128b0 <gsm_select_sms_message_formate_text_mode+0x24>)
   12896:	4807      	ldr	r0, [pc, #28]	; (128b4 <gsm_select_sms_message_formate_text_mode+0x28>)
   12898:	2300      	movs	r3, #0
   1289a:	9300      	str	r3, [sp, #0]
   1289c:	2300      	movs	r3, #0
   1289e:	4c06      	ldr	r4, [pc, #24]	; (128b8 <gsm_select_sms_message_formate_text_mode+0x2c>)
   128a0:	47a0      	blx	r4
   128a2:	0003      	movs	r3, r0
}
   128a4:	0018      	movs	r0, r3
   128a6:	46bd      	mov	sp, r7
   128a8:	b001      	add	sp, #4
   128aa:	bd90      	pop	{r4, r7, pc}
   128ac:	00001388 	.word	0x00001388
   128b0:	0002a30c 	.word	0x0002a30c
   128b4:	0002a448 	.word	0x0002a448
   128b8:	000123ed 	.word	0x000123ed

000128bc <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
   128bc:	b590      	push	{r4, r7, lr}
   128be:	b083      	sub	sp, #12
   128c0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
   128c2:	4a06      	ldr	r2, [pc, #24]	; (128dc <gsm_set_sms_text_mode_parameter+0x20>)
   128c4:	4906      	ldr	r1, [pc, #24]	; (128e0 <gsm_set_sms_text_mode_parameter+0x24>)
   128c6:	4807      	ldr	r0, [pc, #28]	; (128e4 <gsm_set_sms_text_mode_parameter+0x28>)
   128c8:	2300      	movs	r3, #0
   128ca:	9300      	str	r3, [sp, #0]
   128cc:	2300      	movs	r3, #0
   128ce:	4c06      	ldr	r4, [pc, #24]	; (128e8 <gsm_set_sms_text_mode_parameter+0x2c>)
   128d0:	47a0      	blx	r4
   128d2:	0003      	movs	r3, r0
}
   128d4:	0018      	movs	r0, r3
   128d6:	46bd      	mov	sp, r7
   128d8:	b001      	add	sp, #4
   128da:	bd90      	pop	{r4, r7, pc}
   128dc:	00001b58 	.word	0x00001b58
   128e0:	0002a30c 	.word	0x0002a30c
   128e4:	0002a454 	.word	0x0002a454
   128e8:	000123ed 	.word	0x000123ed

000128ec <gsm_getsignalstrength>:
20--25   4
26--31   5

*/
uint8_t gsm_getsignalstrength(void)
{
   128ec:	b5b0      	push	{r4, r5, r7, lr}
   128ee:	b088      	sub	sp, #32
   128f0:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
   128f2:	2316      	movs	r3, #22
   128f4:	18fb      	adds	r3, r7, r3
   128f6:	2264      	movs	r2, #100	; 0x64
   128f8:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   128fa:	2316      	movs	r3, #22
   128fc:	18fb      	adds	r3, r7, r3
   128fe:	781b      	ldrb	r3, [r3, #0]
   12900:	2101      	movs	r1, #1
   12902:	0018      	movs	r0, r3
   12904:	4b62      	ldr	r3, [pc, #392]	; (12a90 <gsm_getsignalstrength+0x1a4>)
   12906:	4798      	blx	r3
   12908:	0003      	movs	r3, r0
   1290a:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
   1290c:	693b      	ldr	r3, [r7, #16]
   1290e:	2b00      	cmp	r3, #0
   12910:	d105      	bne.n	1291e <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
   12912:	693b      	ldr	r3, [r7, #16]
   12914:	0018      	movs	r0, r3
   12916:	4b5f      	ldr	r3, [pc, #380]	; (12a94 <gsm_getsignalstrength+0x1a8>)
   12918:	4798      	blx	r3
		return 0;
   1291a:	2300      	movs	r3, #0
   1291c:	e0b4      	b.n	12a88 <gsm_getsignalstrength+0x19c>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   1291e:	2316      	movs	r3, #22
   12920:	18fb      	adds	r3, r7, r3
   12922:	781a      	ldrb	r2, [r3, #0]
   12924:	693b      	ldr	r3, [r7, #16]
   12926:	2100      	movs	r1, #0
   12928:	0018      	movs	r0, r3
   1292a:	4b5b      	ldr	r3, [pc, #364]	; (12a98 <gsm_getsignalstrength+0x1ac>)
   1292c:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
   1292e:	230f      	movs	r3, #15
   12930:	18fc      	adds	r4, r7, r3
   12932:	2316      	movs	r3, #22
   12934:	18fb      	adds	r3, r7, r3
   12936:	781a      	ldrb	r2, [r3, #0]
   12938:	4d58      	ldr	r5, [pc, #352]	; (12a9c <gsm_getsignalstrength+0x1b0>)
   1293a:	4959      	ldr	r1, [pc, #356]	; (12aa0 <gsm_getsignalstrength+0x1b4>)
   1293c:	4859      	ldr	r0, [pc, #356]	; (12aa4 <gsm_getsignalstrength+0x1b8>)
   1293e:	693b      	ldr	r3, [r7, #16]
   12940:	9300      	str	r3, [sp, #0]
   12942:	0013      	movs	r3, r2
   12944:	002a      	movs	r2, r5
   12946:	4d58      	ldr	r5, [pc, #352]	; (12aa8 <gsm_getsignalstrength+0x1bc>)
   12948:	47a8      	blx	r5
   1294a:	0003      	movs	r3, r0
   1294c:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
   1294e:	230f      	movs	r3, #15
   12950:	18fb      	adds	r3, r7, r3
   12952:	781b      	ldrb	r3, [r3, #0]
   12954:	2b00      	cmp	r3, #0
   12956:	d000      	beq.n	1295a <gsm_getsignalstrength+0x6e>
   12958:	e08b      	b.n	12a72 <gsm_getsignalstrength+0x186>
	{
		if(strstr(cmdx,"+CSQ:"))
   1295a:	4a54      	ldr	r2, [pc, #336]	; (12aac <gsm_getsignalstrength+0x1c0>)
   1295c:	693b      	ldr	r3, [r7, #16]
   1295e:	0011      	movs	r1, r2
   12960:	0018      	movs	r0, r3
   12962:	4b53      	ldr	r3, [pc, #332]	; (12ab0 <gsm_getsignalstrength+0x1c4>)
   12964:	4798      	blx	r3
   12966:	1e03      	subs	r3, r0, #0
   12968:	d100      	bne.n	1296c <gsm_getsignalstrength+0x80>
   1296a:	e086      	b.n	12a7a <gsm_getsignalstrength+0x18e>
		{
			if (strstr(cmdx,"99")==NULL)
   1296c:	4a51      	ldr	r2, [pc, #324]	; (12ab4 <gsm_getsignalstrength+0x1c8>)
   1296e:	693b      	ldr	r3, [r7, #16]
   12970:	0011      	movs	r1, r2
   12972:	0018      	movs	r0, r3
   12974:	4b4e      	ldr	r3, [pc, #312]	; (12ab0 <gsm_getsignalstrength+0x1c4>)
   12976:	4798      	blx	r3
   12978:	1e03      	subs	r3, r0, #0
   1297a:	d000      	beq.n	1297e <gsm_getsignalstrength+0x92>
   1297c:	e074      	b.n	12a68 <gsm_getsignalstrength+0x17c>
			{
				char *ptr_tocken;
				ptr_tocken = strtok(cmdx,":");
   1297e:	4a4e      	ldr	r2, [pc, #312]	; (12ab8 <gsm_getsignalstrength+0x1cc>)
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	0011      	movs	r1, r2
   12984:	0018      	movs	r0, r3
   12986:	4b4d      	ldr	r3, [pc, #308]	; (12abc <gsm_getsignalstrength+0x1d0>)
   12988:	4798      	blx	r3
   1298a:	0003      	movs	r3, r0
   1298c:	60bb      	str	r3, [r7, #8]
				ptr_tocken = strtok(NULL,":");
   1298e:	4b4a      	ldr	r3, [pc, #296]	; (12ab8 <gsm_getsignalstrength+0x1cc>)
   12990:	0019      	movs	r1, r3
   12992:	2000      	movs	r0, #0
   12994:	4b49      	ldr	r3, [pc, #292]	; (12abc <gsm_getsignalstrength+0x1d0>)
   12996:	4798      	blx	r3
   12998:	0003      	movs	r3, r0
   1299a:	60bb      	str	r3, [r7, #8]
				ptr_tocken = strtok(ptr_tocken,",");
   1299c:	4a48      	ldr	r2, [pc, #288]	; (12ac0 <gsm_getsignalstrength+0x1d4>)
   1299e:	68bb      	ldr	r3, [r7, #8]
   129a0:	0011      	movs	r1, r2
   129a2:	0018      	movs	r0, r3
   129a4:	4b45      	ldr	r3, [pc, #276]	; (12abc <gsm_getsignalstrength+0x1d0>)
   129a6:	4798      	blx	r3
   129a8:	0003      	movs	r3, r0
   129aa:	60bb      	str	r3, [r7, #8]
				//RemoveSpaces(ptr_tocken);
				uint8_t nw = atoi(ptr_tocken);
   129ac:	68bb      	ldr	r3, [r7, #8]
   129ae:	0018      	movs	r0, r3
   129b0:	4b44      	ldr	r3, [pc, #272]	; (12ac4 <gsm_getsignalstrength+0x1d8>)
   129b2:	4798      	blx	r3
   129b4:	0002      	movs	r2, r0
   129b6:	1dfb      	adds	r3, r7, #7
   129b8:	701a      	strb	r2, [r3, #0]
				if (nw==0 || nw==1 || nw== 99)
   129ba:	1dfb      	adds	r3, r7, #7
   129bc:	781b      	ldrb	r3, [r3, #0]
   129be:	2b00      	cmp	r3, #0
   129c0:	d007      	beq.n	129d2 <gsm_getsignalstrength+0xe6>
   129c2:	1dfb      	adds	r3, r7, #7
   129c4:	781b      	ldrb	r3, [r3, #0]
   129c6:	2b01      	cmp	r3, #1
   129c8:	d003      	beq.n	129d2 <gsm_getsignalstrength+0xe6>
   129ca:	1dfb      	adds	r3, r7, #7
   129cc:	781b      	ldrb	r3, [r3, #0]
   129ce:	2b63      	cmp	r3, #99	; 0x63
   129d0:	d104      	bne.n	129dc <gsm_getsignalstrength+0xf0>
				{
					sig_strength = 0;
   129d2:	2317      	movs	r3, #23
   129d4:	18fb      	adds	r3, r7, r3
   129d6:	2200      	movs	r2, #0
   129d8:	701a      	strb	r2, [r3, #0]
   129da:	e04e      	b.n	12a7a <gsm_getsignalstrength+0x18e>
				}
				else
				{
					if (nw>=2 && nw<=7)
   129dc:	1dfb      	adds	r3, r7, #7
   129de:	781b      	ldrb	r3, [r3, #0]
   129e0:	2b01      	cmp	r3, #1
   129e2:	d908      	bls.n	129f6 <gsm_getsignalstrength+0x10a>
   129e4:	1dfb      	adds	r3, r7, #7
   129e6:	781b      	ldrb	r3, [r3, #0]
   129e8:	2b07      	cmp	r3, #7
   129ea:	d804      	bhi.n	129f6 <gsm_getsignalstrength+0x10a>
					{
						sig_strength = 1;
   129ec:	2317      	movs	r3, #23
   129ee:	18fb      	adds	r3, r7, r3
   129f0:	2201      	movs	r2, #1
   129f2:	701a      	strb	r2, [r3, #0]
   129f4:	e041      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=8 && nw<=13)
   129f6:	1dfb      	adds	r3, r7, #7
   129f8:	781b      	ldrb	r3, [r3, #0]
   129fa:	2b07      	cmp	r3, #7
   129fc:	d908      	bls.n	12a10 <gsm_getsignalstrength+0x124>
   129fe:	1dfb      	adds	r3, r7, #7
   12a00:	781b      	ldrb	r3, [r3, #0]
   12a02:	2b0d      	cmp	r3, #13
   12a04:	d804      	bhi.n	12a10 <gsm_getsignalstrength+0x124>
					{
						sig_strength = 2;
   12a06:	2317      	movs	r3, #23
   12a08:	18fb      	adds	r3, r7, r3
   12a0a:	2202      	movs	r2, #2
   12a0c:	701a      	strb	r2, [r3, #0]
   12a0e:	e034      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=14 && nw<=19)
   12a10:	1dfb      	adds	r3, r7, #7
   12a12:	781b      	ldrb	r3, [r3, #0]
   12a14:	2b0d      	cmp	r3, #13
   12a16:	d908      	bls.n	12a2a <gsm_getsignalstrength+0x13e>
   12a18:	1dfb      	adds	r3, r7, #7
   12a1a:	781b      	ldrb	r3, [r3, #0]
   12a1c:	2b13      	cmp	r3, #19
   12a1e:	d804      	bhi.n	12a2a <gsm_getsignalstrength+0x13e>
					{
						sig_strength = 3;
   12a20:	2317      	movs	r3, #23
   12a22:	18fb      	adds	r3, r7, r3
   12a24:	2203      	movs	r2, #3
   12a26:	701a      	strb	r2, [r3, #0]
   12a28:	e027      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=20 && nw<=25)
   12a2a:	1dfb      	adds	r3, r7, #7
   12a2c:	781b      	ldrb	r3, [r3, #0]
   12a2e:	2b13      	cmp	r3, #19
   12a30:	d908      	bls.n	12a44 <gsm_getsignalstrength+0x158>
   12a32:	1dfb      	adds	r3, r7, #7
   12a34:	781b      	ldrb	r3, [r3, #0]
   12a36:	2b19      	cmp	r3, #25
   12a38:	d804      	bhi.n	12a44 <gsm_getsignalstrength+0x158>
					{
						sig_strength = 4;
   12a3a:	2317      	movs	r3, #23
   12a3c:	18fb      	adds	r3, r7, r3
   12a3e:	2204      	movs	r2, #4
   12a40:	701a      	strb	r2, [r3, #0]
   12a42:	e01a      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
					else if (nw>=26 && nw<=31)
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	2b19      	cmp	r3, #25
   12a4a:	d908      	bls.n	12a5e <gsm_getsignalstrength+0x172>
   12a4c:	1dfb      	adds	r3, r7, #7
   12a4e:	781b      	ldrb	r3, [r3, #0]
   12a50:	2b1f      	cmp	r3, #31
   12a52:	d804      	bhi.n	12a5e <gsm_getsignalstrength+0x172>
					{
						sig_strength = 5;
   12a54:	2317      	movs	r3, #23
   12a56:	18fb      	adds	r3, r7, r3
   12a58:	2205      	movs	r2, #5
   12a5a:	701a      	strb	r2, [r3, #0]
   12a5c:	e00d      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
					else
					{
						sig_strength = 0;
   12a5e:	2317      	movs	r3, #23
   12a60:	18fb      	adds	r3, r7, r3
   12a62:	2200      	movs	r2, #0
   12a64:	701a      	strb	r2, [r3, #0]
   12a66:	e008      	b.n	12a7a <gsm_getsignalstrength+0x18e>
					}
				}
			}
			else
			{
				sig_strength = 0;
   12a68:	2317      	movs	r3, #23
   12a6a:	18fb      	adds	r3, r7, r3
   12a6c:	2200      	movs	r2, #0
   12a6e:	701a      	strb	r2, [r3, #0]
   12a70:	e003      	b.n	12a7a <gsm_getsignalstrength+0x18e>
			}
		}
	}
	else
	{
		sig_strength = 0;
   12a72:	2317      	movs	r3, #23
   12a74:	18fb      	adds	r3, r7, r3
   12a76:	2200      	movs	r2, #0
   12a78:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
   12a7a:	693b      	ldr	r3, [r7, #16]
   12a7c:	0018      	movs	r0, r3
   12a7e:	4b05      	ldr	r3, [pc, #20]	; (12a94 <gsm_getsignalstrength+0x1a8>)
   12a80:	4798      	blx	r3
	
	return sig_strength;
   12a82:	2317      	movs	r3, #23
   12a84:	18fb      	adds	r3, r7, r3
   12a86:	781b      	ldrb	r3, [r3, #0]
}
   12a88:	0018      	movs	r0, r3
   12a8a:	46bd      	mov	sp, r7
   12a8c:	b006      	add	sp, #24
   12a8e:	bdb0      	pop	{r4, r5, r7, pc}
   12a90:	00029549 	.word	0x00029549
   12a94:	000295e9 	.word	0x000295e9
   12a98:	00029657 	.word	0x00029657
   12a9c:	00001388 	.word	0x00001388
   12aa0:	0002a30c 	.word	0x0002a30c
   12aa4:	0002a480 	.word	0x0002a480
   12aa8:	000123ed 	.word	0x000123ed
   12aac:	0002a488 	.word	0x0002a488
   12ab0:	00029917 	.word	0x00029917
   12ab4:	0002a490 	.word	0x0002a490
   12ab8:	0002a424 	.word	0x0002a424
   12abc:	00029949 	.word	0x00029949
   12ac0:	0002a428 	.word	0x0002a428
   12ac4:	0002953d 	.word	0x0002953d

00012ac8 <RemoveSpaces>:

void RemoveSpaces(char* source)
{
   12ac8:	b580      	push	{r7, lr}
   12aca:	b084      	sub	sp, #16
   12acc:	af00      	add	r7, sp, #0
   12ace:	6078      	str	r0, [r7, #4]
	char* i = source;
   12ad0:	687b      	ldr	r3, [r7, #4]
   12ad2:	60fb      	str	r3, [r7, #12]
	char* j = source;
   12ad4:	687b      	ldr	r3, [r7, #4]
   12ad6:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
   12ad8:	e00c      	b.n	12af4 <RemoveSpaces+0x2c>
	{
		*i = *j++;
   12ada:	68bb      	ldr	r3, [r7, #8]
   12adc:	1c5a      	adds	r2, r3, #1
   12ade:	60ba      	str	r2, [r7, #8]
   12ae0:	781a      	ldrb	r2, [r3, #0]
   12ae2:	68fb      	ldr	r3, [r7, #12]
   12ae4:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
   12ae6:	68fb      	ldr	r3, [r7, #12]
   12ae8:	781b      	ldrb	r3, [r3, #0]
   12aea:	2b20      	cmp	r3, #32
   12aec:	d002      	beq.n	12af4 <RemoveSpaces+0x2c>
		i++;
   12aee:	68fb      	ldr	r3, [r7, #12]
   12af0:	3301      	adds	r3, #1
   12af2:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
   12af4:	68bb      	ldr	r3, [r7, #8]
   12af6:	781b      	ldrb	r3, [r3, #0]
   12af8:	2b00      	cmp	r3, #0
   12afa:	d1ee      	bne.n	12ada <RemoveSpaces+0x12>
	}
	*i = 0;
   12afc:	68fb      	ldr	r3, [r7, #12]
   12afe:	2200      	movs	r2, #0
   12b00:	701a      	strb	r2, [r3, #0]
}
   12b02:	46c0      	nop			; (mov r8, r8)
   12b04:	46bd      	mov	sp, r7
   12b06:	b004      	add	sp, #16
   12b08:	bd80      	pop	{r7, pc}
	...

00012b0c <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
   12b0c:	b590      	push	{r4, r7, lr}
   12b0e:	b083      	sub	sp, #12
   12b10:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
   12b12:	4a06      	ldr	r2, [pc, #24]	; (12b2c <gsm_enable_new_sms_message_indications+0x20>)
   12b14:	4906      	ldr	r1, [pc, #24]	; (12b30 <gsm_enable_new_sms_message_indications+0x24>)
   12b16:	4807      	ldr	r0, [pc, #28]	; (12b34 <gsm_enable_new_sms_message_indications+0x28>)
   12b18:	2300      	movs	r3, #0
   12b1a:	9300      	str	r3, [sp, #0]
   12b1c:	2300      	movs	r3, #0
   12b1e:	4c06      	ldr	r4, [pc, #24]	; (12b38 <gsm_enable_new_sms_message_indications+0x2c>)
   12b20:	47a0      	blx	r4
   12b22:	0003      	movs	r3, r0
}
   12b24:	0018      	movs	r0, r3
   12b26:	46bd      	mov	sp, r7
   12b28:	b001      	add	sp, #4
   12b2a:	bd90      	pop	{r4, r7, pc}
   12b2c:	00001388 	.word	0x00001388
   12b30:	0002a30c 	.word	0x0002a30c
   12b34:	0002a494 	.word	0x0002a494
   12b38:	000123ed 	.word	0x000123ed

00012b3c <gsm_enable_csqn_urc>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_enable_csqn_urc(void)
{
   12b3c:	b590      	push	{r4, r7, lr}
   12b3e:	b083      	sub	sp, #12
   12b40:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+EXUNSOL=\"SQ\",1\r"), (const char*)RESPONS_OK,1000,0,NULL);
   12b42:	23fa      	movs	r3, #250	; 0xfa
   12b44:	009a      	lsls	r2, r3, #2
   12b46:	4906      	ldr	r1, [pc, #24]	; (12b60 <gsm_enable_csqn_urc+0x24>)
   12b48:	4806      	ldr	r0, [pc, #24]	; (12b64 <gsm_enable_csqn_urc+0x28>)
   12b4a:	2300      	movs	r3, #0
   12b4c:	9300      	str	r3, [sp, #0]
   12b4e:	2300      	movs	r3, #0
   12b50:	4c05      	ldr	r4, [pc, #20]	; (12b68 <gsm_enable_csqn_urc+0x2c>)
   12b52:	47a0      	blx	r4
   12b54:	0003      	movs	r3, r0
}
   12b56:	0018      	movs	r0, r3
   12b58:	46bd      	mov	sp, r7
   12b5a:	b001      	add	sp, #4
   12b5c:	bd90      	pop	{r4, r7, pc}
   12b5e:	46c0      	nop			; (mov r8, r8)
   12b60:	0002a30c 	.word	0x0002a30c
   12b64:	0002a4bc 	.word	0x0002a4bc
   12b68:	000123ed 	.word	0x000123ed

00012b6c <gsm_disable_csqn_urc>:

enum gsm_error gsm_disable_csqn_urc(void)
{
   12b6c:	b590      	push	{r4, r7, lr}
   12b6e:	b083      	sub	sp, #12
   12b70:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+EXUNSOL=\"SQ\",0\r"), (const char*)RESPONS_OK,1000,0,NULL);
   12b72:	23fa      	movs	r3, #250	; 0xfa
   12b74:	009a      	lsls	r2, r3, #2
   12b76:	4906      	ldr	r1, [pc, #24]	; (12b90 <gsm_disable_csqn_urc+0x24>)
   12b78:	4806      	ldr	r0, [pc, #24]	; (12b94 <gsm_disable_csqn_urc+0x28>)
   12b7a:	2300      	movs	r3, #0
   12b7c:	9300      	str	r3, [sp, #0]
   12b7e:	2300      	movs	r3, #0
   12b80:	4c05      	ldr	r4, [pc, #20]	; (12b98 <gsm_disable_csqn_urc+0x2c>)
   12b82:	47a0      	blx	r4
   12b84:	0003      	movs	r3, r0
}
   12b86:	0018      	movs	r0, r3
   12b88:	46bd      	mov	sp, r7
   12b8a:	b001      	add	sp, #4
   12b8c:	bd90      	pop	{r4, r7, pc}
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	0002a30c 	.word	0x0002a30c
   12b94:	0002a4d0 	.word	0x0002a4d0
   12b98:	000123ed 	.word	0x000123ed

00012b9c <gsm_send_sms>:


enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
   12b9c:	b5b0      	push	{r4, r5, r7, lr}
   12b9e:	b088      	sub	sp, #32
   12ba0:	af02      	add	r7, sp, #8
   12ba2:	6078      	str	r0, [r7, #4]
   12ba4:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250)
   12ba6:	683b      	ldr	r3, [r7, #0]
   12ba8:	0018      	movs	r0, r3
   12baa:	4b3b      	ldr	r3, [pc, #236]	; (12c98 <gsm_send_sms+0xfc>)
   12bac:	4798      	blx	r3
   12bae:	0003      	movs	r3, r0
   12bb0:	2bfa      	cmp	r3, #250	; 0xfa
   12bb2:	d901      	bls.n	12bb8 <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
   12bb4:	2303      	movs	r3, #3
   12bb6:	e06b      	b.n	12c90 <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6)
   12bb8:	687b      	ldr	r3, [r7, #4]
   12bba:	0018      	movs	r0, r3
   12bbc:	4b36      	ldr	r3, [pc, #216]	; (12c98 <gsm_send_sms+0xfc>)
   12bbe:	4798      	blx	r3
   12bc0:	0003      	movs	r3, r0
   12bc2:	2b05      	cmp	r3, #5
   12bc4:	d801      	bhi.n	12bca <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
   12bc6:	2304      	movs	r3, #4
   12bc8:	e062      	b.n	12c90 <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
   12bca:	2317      	movs	r3, #23
   12bcc:	18fb      	adds	r3, r7, r3
   12bce:	22fa      	movs	r2, #250	; 0xfa
   12bd0:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12bd2:	2317      	movs	r3, #23
   12bd4:	18fb      	adds	r3, r7, r3
   12bd6:	781b      	ldrb	r3, [r3, #0]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2f      	ldr	r3, [pc, #188]	; (12c9c <gsm_send_sms+0x100>)
   12bde:	4798      	blx	r3
   12be0:	0003      	movs	r3, r0
   12be2:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
   12be4:	693b      	ldr	r3, [r7, #16]
   12be6:	2b00      	cmp	r3, #0
   12be8:	d101      	bne.n	12bee <gsm_send_sms+0x52>
	{
		return 0;
   12bea:	2300      	movs	r3, #0
   12bec:	e050      	b.n	12c90 <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12bee:	2317      	movs	r3, #23
   12bf0:	18fb      	adds	r3, r7, r3
   12bf2:	781a      	ldrb	r2, [r3, #0]
   12bf4:	693b      	ldr	r3, [r7, #16]
   12bf6:	2100      	movs	r1, #0
   12bf8:	0018      	movs	r0, r3
   12bfa:	4b29      	ldr	r3, [pc, #164]	; (12ca0 <gsm_send_sms+0x104>)
   12bfc:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
   12bfe:	2317      	movs	r3, #23
   12c00:	18fb      	adds	r3, r7, r3
   12c02:	7819      	ldrb	r1, [r3, #0]
   12c04:	687b      	ldr	r3, [r7, #4]
   12c06:	4a27      	ldr	r2, [pc, #156]	; (12ca4 <gsm_send_sms+0x108>)
   12c08:	6938      	ldr	r0, [r7, #16]
   12c0a:	4c27      	ldr	r4, [pc, #156]	; (12ca8 <gsm_send_sms+0x10c>)
   12c0c:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
   12c0e:	4a27      	ldr	r2, [pc, #156]	; (12cac <gsm_send_sms+0x110>)
   12c10:	4927      	ldr	r1, [pc, #156]	; (12cb0 <gsm_send_sms+0x114>)
   12c12:	6938      	ldr	r0, [r7, #16]
   12c14:	2300      	movs	r3, #0
   12c16:	9300      	str	r3, [sp, #0]
   12c18:	2300      	movs	r3, #0
   12c1a:	4c26      	ldr	r4, [pc, #152]	; (12cb4 <gsm_send_sms+0x118>)
   12c1c:	47a0      	blx	r4
   12c1e:	1e03      	subs	r3, r0, #0
   12c20:	d131      	bne.n	12c86 <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
   12c22:	23fa      	movs	r3, #250	; 0xfa
   12c24:	005b      	lsls	r3, r3, #1
   12c26:	0018      	movs	r0, r3
   12c28:	4b23      	ldr	r3, [pc, #140]	; (12cb8 <gsm_send_sms+0x11c>)
   12c2a:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
   12c2c:	2317      	movs	r3, #23
   12c2e:	18fb      	adds	r3, r7, r3
   12c30:	781a      	ldrb	r2, [r3, #0]
   12c32:	693b      	ldr	r3, [r7, #16]
   12c34:	2100      	movs	r1, #0
   12c36:	0018      	movs	r0, r3
   12c38:	4b19      	ldr	r3, [pc, #100]	; (12ca0 <gsm_send_sms+0x104>)
   12c3a:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
   12c3c:	2317      	movs	r3, #23
   12c3e:	18fb      	adds	r3, r7, r3
   12c40:	7819      	ldrb	r1, [r3, #0]
   12c42:	683b      	ldr	r3, [r7, #0]
   12c44:	4a1d      	ldr	r2, [pc, #116]	; (12cbc <gsm_send_sms+0x120>)
   12c46:	6938      	ldr	r0, [r7, #16]
   12c48:	4c17      	ldr	r4, [pc, #92]	; (12ca8 <gsm_send_sms+0x10c>)
   12c4a:	47a0      	blx	r4
		
		err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
   12c4c:	230f      	movs	r3, #15
   12c4e:	18fc      	adds	r4, r7, r3
   12c50:	4a16      	ldr	r2, [pc, #88]	; (12cac <gsm_send_sms+0x110>)
   12c52:	491b      	ldr	r1, [pc, #108]	; (12cc0 <gsm_send_sms+0x124>)
   12c54:	6938      	ldr	r0, [r7, #16]
   12c56:	2300      	movs	r3, #0
   12c58:	9300      	str	r3, [sp, #0]
   12c5a:	2300      	movs	r3, #0
   12c5c:	4d15      	ldr	r5, [pc, #84]	; (12cb4 <gsm_send_sms+0x118>)
   12c5e:	47a8      	blx	r5
   12c60:	0003      	movs	r3, r0
   12c62:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
   12c64:	230f      	movs	r3, #15
   12c66:	18fb      	adds	r3, r7, r3
   12c68:	781b      	ldrb	r3, [r3, #0]
   12c6a:	2b00      	cmp	r3, #0
   12c6c:	d105      	bne.n	12c7a <gsm_send_sms+0xde>
		{
			free(cmdx);
   12c6e:	693b      	ldr	r3, [r7, #16]
   12c70:	0018      	movs	r0, r3
   12c72:	4b14      	ldr	r3, [pc, #80]	; (12cc4 <gsm_send_sms+0x128>)
   12c74:	4798      	blx	r3
			return GSM_ERROR_NONE;
   12c76:	2300      	movs	r3, #0
   12c78:	e00a      	b.n	12c90 <gsm_send_sms+0xf4>
		}
		else
		{
			free(cmdx);
   12c7a:	693b      	ldr	r3, [r7, #16]
   12c7c:	0018      	movs	r0, r3
   12c7e:	4b11      	ldr	r3, [pc, #68]	; (12cc4 <gsm_send_sms+0x128>)
   12c80:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
   12c82:	2306      	movs	r3, #6
   12c84:	e004      	b.n	12c90 <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
   12c86:	693b      	ldr	r3, [r7, #16]
   12c88:	0018      	movs	r0, r3
   12c8a:	4b0e      	ldr	r3, [pc, #56]	; (12cc4 <gsm_send_sms+0x128>)
   12c8c:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
   12c8e:	2306      	movs	r3, #6
	}
}
   12c90:	0018      	movs	r0, r3
   12c92:	46bd      	mov	sp, r7
   12c94:	b006      	add	sp, #24
   12c96:	bdb0      	pop	{r4, r5, r7, pc}
   12c98:	000298e7 	.word	0x000298e7
   12c9c:	00029549 	.word	0x00029549
   12ca0:	00029657 	.word	0x00029657
   12ca4:	0002a4e4 	.word	0x0002a4e4
   12ca8:	000297f9 	.word	0x000297f9
   12cac:	0000ea60 	.word	0x0000ea60
   12cb0:	0002a4f4 	.word	0x0002a4f4
   12cb4:	000123ed 	.word	0x000123ed
   12cb8:	00020969 	.word	0x00020969
   12cbc:	0002a4f8 	.word	0x0002a4f8
   12cc0:	0002a30c 	.word	0x0002a30c
   12cc4:	000295e9 	.word	0x000295e9

00012cc8 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
   12cc8:	b590      	push	{r4, r7, lr}
   12cca:	b08f      	sub	sp, #60	; 0x3c
   12ccc:	af02      	add	r7, sp, #8
   12cce:	60b9      	str	r1, [r7, #8]
   12cd0:	0011      	movs	r1, r2
   12cd2:	607b      	str	r3, [r7, #4]
   12cd4:	230f      	movs	r3, #15
   12cd6:	18fb      	adds	r3, r7, r3
   12cd8:	1c02      	adds	r2, r0, #0
   12cda:	701a      	strb	r2, [r3, #0]
   12cdc:	230e      	movs	r3, #14
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	1c0a      	adds	r2, r1, #0
   12ce2:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
   12ce4:	232f      	movs	r3, #47	; 0x2f
   12ce6:	18fb      	adds	r3, r7, r3
   12ce8:	22e6      	movs	r2, #230	; 0xe6
   12cea:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12cec:	232f      	movs	r3, #47	; 0x2f
   12cee:	18fb      	adds	r3, r7, r3
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	2101      	movs	r1, #1
   12cf4:	0018      	movs	r0, r3
   12cf6:	4b6e      	ldr	r3, [pc, #440]	; (12eb0 <gsm_read_sms+0x1e8>)
   12cf8:	4798      	blx	r3
   12cfa:	0003      	movs	r3, r0
   12cfc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
   12cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d00:	2b00      	cmp	r3, #0
   12d02:	d105      	bne.n	12d10 <gsm_read_sms+0x48>
	{
		free(cmdx);
   12d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d06:	0018      	movs	r0, r3
   12d08:	4b6a      	ldr	r3, [pc, #424]	; (12eb4 <gsm_read_sms+0x1ec>)
   12d0a:	4798      	blx	r3
		return 0;
   12d0c:	2300      	movs	r3, #0
   12d0e:	e0ca      	b.n	12ea6 <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   12d10:	232f      	movs	r3, #47	; 0x2f
   12d12:	18fb      	adds	r3, r7, r3
   12d14:	781a      	ldrb	r2, [r3, #0]
   12d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d18:	2100      	movs	r1, #0
   12d1a:	0018      	movs	r0, r3
   12d1c:	4b66      	ldr	r3, [pc, #408]	; (12eb8 <gsm_read_sms+0x1f0>)
   12d1e:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
   12d20:	2310      	movs	r3, #16
   12d22:	18fb      	adds	r3, r7, r3
   12d24:	0018      	movs	r0, r3
   12d26:	230a      	movs	r3, #10
   12d28:	001a      	movs	r2, r3
   12d2a:	2100      	movs	r1, #0
   12d2c:	4b62      	ldr	r3, [pc, #392]	; (12eb8 <gsm_read_sms+0x1f0>)
   12d2e:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
   12d30:	232f      	movs	r3, #47	; 0x2f
   12d32:	18fb      	adds	r3, r7, r3
   12d34:	7819      	ldrb	r1, [r3, #0]
   12d36:	230f      	movs	r3, #15
   12d38:	18fb      	adds	r3, r7, r3
   12d3a:	781b      	ldrb	r3, [r3, #0]
   12d3c:	4a5f      	ldr	r2, [pc, #380]	; (12ebc <gsm_read_sms+0x1f4>)
   12d3e:	2010      	movs	r0, #16
   12d40:	1838      	adds	r0, r7, r0
   12d42:	4c5f      	ldr	r4, [pc, #380]	; (12ec0 <gsm_read_sms+0x1f8>)
   12d44:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
   12d46:	232f      	movs	r3, #47	; 0x2f
   12d48:	18fb      	adds	r3, r7, r3
   12d4a:	781a      	ldrb	r2, [r3, #0]
   12d4c:	4c5d      	ldr	r4, [pc, #372]	; (12ec4 <gsm_read_sms+0x1fc>)
   12d4e:	495e      	ldr	r1, [pc, #376]	; (12ec8 <gsm_read_sms+0x200>)
   12d50:	2310      	movs	r3, #16
   12d52:	18f8      	adds	r0, r7, r3
   12d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d56:	9300      	str	r3, [sp, #0]
   12d58:	0013      	movs	r3, r2
   12d5a:	0022      	movs	r2, r4
   12d5c:	4c5b      	ldr	r4, [pc, #364]	; (12ecc <gsm_read_sms+0x204>)
   12d5e:	47a0      	blx	r4
   12d60:	1e03      	subs	r3, r0, #0
   12d62:	d000      	beq.n	12d66 <gsm_read_sms+0x9e>
   12d64:	e094      	b.n	12e90 <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
   12d66:	4a5a      	ldr	r2, [pc, #360]	; (12ed0 <gsm_read_sms+0x208>)
   12d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d6a:	0011      	movs	r1, r2
   12d6c:	0018      	movs	r0, r3
   12d6e:	4b59      	ldr	r3, [pc, #356]	; (12ed4 <gsm_read_sms+0x20c>)
   12d70:	4798      	blx	r3
   12d72:	0003      	movs	r3, r0
   12d74:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
   12d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d78:	2b00      	cmp	r3, #0
   12d7a:	d100      	bne.n	12d7e <gsm_read_sms+0xb6>
   12d7c:	e082      	b.n	12e84 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
   12d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d80:	212c      	movs	r1, #44	; 0x2c
   12d82:	0018      	movs	r0, r3
   12d84:	4b54      	ldr	r3, [pc, #336]	; (12ed8 <gsm_read_sms+0x210>)
   12d86:	4798      	blx	r3
   12d88:	0003      	movs	r3, r0
   12d8a:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
   12d8c:	6a3b      	ldr	r3, [r7, #32]
   12d8e:	3302      	adds	r3, #2
   12d90:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
   12d92:	69fb      	ldr	r3, [r7, #28]
   12d94:	2122      	movs	r1, #34	; 0x22
   12d96:	0018      	movs	r0, r3
   12d98:	4b4f      	ldr	r3, [pc, #316]	; (12ed8 <gsm_read_sms+0x210>)
   12d9a:	4798      	blx	r3
   12d9c:	0003      	movs	r3, r0
   12d9e:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
   12da0:	6a3b      	ldr	r3, [r7, #32]
   12da2:	2b00      	cmp	r3, #0
   12da4:	d02a      	beq.n	12dfc <gsm_read_sms+0x134>
			{
				*p_char = 0;
   12da6:	6a3b      	ldr	r3, [r7, #32]
   12da8:	2200      	movs	r2, #0
   12daa:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
   12dac:	69fb      	ldr	r3, [r7, #28]
   12dae:	0018      	movs	r0, r3
   12db0:	4b4a      	ldr	r3, [pc, #296]	; (12edc <gsm_read_sms+0x214>)
   12db2:	4798      	blx	r3
   12db4:	0002      	movs	r2, r0
   12db6:	231b      	movs	r3, #27
   12db8:	18fb      	adds	r3, r7, r3
   12dba:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
   12dbc:	231b      	movs	r3, #27
   12dbe:	18fa      	adds	r2, r7, r3
   12dc0:	230e      	movs	r3, #14
   12dc2:	18fb      	adds	r3, r7, r3
   12dc4:	7812      	ldrb	r2, [r2, #0]
   12dc6:	781b      	ldrb	r3, [r3, #0]
   12dc8:	429a      	cmp	r2, r3
   12dca:	d206      	bcs.n	12dda <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
   12dcc:	69fa      	ldr	r2, [r7, #28]
   12dce:	68bb      	ldr	r3, [r7, #8]
   12dd0:	0011      	movs	r1, r2
   12dd2:	0018      	movs	r0, r3
   12dd4:	4b42      	ldr	r3, [pc, #264]	; (12ee0 <gsm_read_sms+0x218>)
   12dd6:	4798      	blx	r3
   12dd8:	e010      	b.n	12dfc <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
   12dda:	230e      	movs	r3, #14
   12ddc:	18fb      	adds	r3, r7, r3
   12dde:	781b      	ldrb	r3, [r3, #0]
   12de0:	3b01      	subs	r3, #1
   12de2:	001a      	movs	r2, r3
   12de4:	69f9      	ldr	r1, [r7, #28]
   12de6:	68bb      	ldr	r3, [r7, #8]
   12de8:	0018      	movs	r0, r3
   12dea:	4b3e      	ldr	r3, [pc, #248]	; (12ee4 <gsm_read_sms+0x21c>)
   12dec:	4798      	blx	r3
					phone_number[max_phone_len]=0;
   12dee:	230e      	movs	r3, #14
   12df0:	18fb      	adds	r3, r7, r3
   12df2:	781b      	ldrb	r3, [r3, #0]
   12df4:	68ba      	ldr	r2, [r7, #8]
   12df6:	18d3      	adds	r3, r2, r3
   12df8:	2200      	movs	r2, #0
   12dfa:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
   12dfc:	6a3b      	ldr	r3, [r7, #32]
   12dfe:	3301      	adds	r3, #1
   12e00:	210a      	movs	r1, #10
   12e02:	0018      	movs	r0, r3
   12e04:	4b34      	ldr	r3, [pc, #208]	; (12ed8 <gsm_read_sms+0x210>)
   12e06:	4798      	blx	r3
   12e08:	0003      	movs	r3, r0
   12e0a:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
   12e0c:	6a3b      	ldr	r3, [r7, #32]
   12e0e:	2b00      	cmp	r3, #0
   12e10:	d044      	beq.n	12e9c <gsm_read_sms+0x1d4>
			{
				p_char++;
   12e12:	6a3b      	ldr	r3, [r7, #32]
   12e14:	3301      	adds	r3, #1
   12e16:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
   12e18:	6a3b      	ldr	r3, [r7, #32]
   12e1a:	210d      	movs	r1, #13
   12e1c:	0018      	movs	r0, r3
   12e1e:	4b2e      	ldr	r3, [pc, #184]	; (12ed8 <gsm_read_sms+0x210>)
   12e20:	4798      	blx	r3
   12e22:	0003      	movs	r3, r0
   12e24:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
   12e26:	69fb      	ldr	r3, [r7, #28]
   12e28:	2b00      	cmp	r3, #0
   12e2a:	d002      	beq.n	12e32 <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
   12e2c:	69fb      	ldr	r3, [r7, #28]
   12e2e:	2200      	movs	r2, #0
   12e30:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
   12e32:	6a3b      	ldr	r3, [r7, #32]
   12e34:	0018      	movs	r0, r3
   12e36:	4b29      	ldr	r3, [pc, #164]	; (12edc <gsm_read_sms+0x214>)
   12e38:	4798      	blx	r3
   12e3a:	0002      	movs	r2, r0
   12e3c:	231b      	movs	r3, #27
   12e3e:	18fb      	adds	r3, r7, r3
   12e40:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
   12e42:	231b      	movs	r3, #27
   12e44:	18fb      	adds	r3, r7, r3
   12e46:	2240      	movs	r2, #64	; 0x40
   12e48:	18b9      	adds	r1, r7, r2
   12e4a:	781a      	ldrb	r2, [r3, #0]
   12e4c:	780b      	ldrb	r3, [r1, #0]
   12e4e:	429a      	cmp	r2, r3
   12e50:	d206      	bcs.n	12e60 <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
   12e52:	6a3a      	ldr	r2, [r7, #32]
   12e54:	687b      	ldr	r3, [r7, #4]
   12e56:	0011      	movs	r1, r2
   12e58:	0018      	movs	r0, r3
   12e5a:	4b21      	ldr	r3, [pc, #132]	; (12ee0 <gsm_read_sms+0x218>)
   12e5c:	4798      	blx	r3
   12e5e:	e01d      	b.n	12e9c <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
   12e60:	2340      	movs	r3, #64	; 0x40
   12e62:	18fb      	adds	r3, r7, r3
   12e64:	781b      	ldrb	r3, [r3, #0]
   12e66:	3b01      	subs	r3, #1
   12e68:	001a      	movs	r2, r3
   12e6a:	6a39      	ldr	r1, [r7, #32]
   12e6c:	687b      	ldr	r3, [r7, #4]
   12e6e:	0018      	movs	r0, r3
   12e70:	4b1c      	ldr	r3, [pc, #112]	; (12ee4 <gsm_read_sms+0x21c>)
   12e72:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
   12e74:	2340      	movs	r3, #64	; 0x40
   12e76:	18fb      	adds	r3, r7, r3
   12e78:	781b      	ldrb	r3, [r3, #0]
   12e7a:	687a      	ldr	r2, [r7, #4]
   12e7c:	18d3      	adds	r3, r2, r3
   12e7e:	2200      	movs	r2, #0
   12e80:	701a      	strb	r2, [r3, #0]
   12e82:	e00b      	b.n	12e9c <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
   12e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e86:	0018      	movs	r0, r3
   12e88:	4b0a      	ldr	r3, [pc, #40]	; (12eb4 <gsm_read_sms+0x1ec>)
   12e8a:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e8c:	230c      	movs	r3, #12
   12e8e:	e00a      	b.n	12ea6 <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
   12e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e92:	0018      	movs	r0, r3
   12e94:	4b07      	ldr	r3, [pc, #28]	; (12eb4 <gsm_read_sms+0x1ec>)
   12e96:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE;
   12e98:	230c      	movs	r3, #12
   12e9a:	e004      	b.n	12ea6 <gsm_read_sms+0x1de>
	}
	free(cmdx);
   12e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e9e:	0018      	movs	r0, r3
   12ea0:	4b04      	ldr	r3, [pc, #16]	; (12eb4 <gsm_read_sms+0x1ec>)
   12ea2:	4798      	blx	r3
	return GSM_ERROR_NONE;
   12ea4:	2300      	movs	r3, #0
}
   12ea6:	0018      	movs	r0, r3
   12ea8:	46bd      	mov	sp, r7
   12eaa:	b00d      	add	sp, #52	; 0x34
   12eac:	bd90      	pop	{r4, r7, pc}
   12eae:	46c0      	nop			; (mov r8, r8)
   12eb0:	00029549 	.word	0x00029549
   12eb4:	000295e9 	.word	0x000295e9
   12eb8:	00029657 	.word	0x00029657
   12ebc:	0002a544 	.word	0x0002a544
   12ec0:	000297f9 	.word	0x000297f9
   12ec4:	00001388 	.word	0x00001388
   12ec8:	0002a30c 	.word	0x0002a30c
   12ecc:	000123ed 	.word	0x000123ed
   12ed0:	0002a550 	.word	0x0002a550
   12ed4:	00029917 	.word	0x00029917
   12ed8:	000298bb 	.word	0x000298bb
   12edc:	000298e7 	.word	0x000298e7
   12ee0:	000298d7 	.word	0x000298d7
   12ee4:	00029621 	.word	0x00029621

00012ee8 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
   12ee8:	b5b0      	push	{r4, r5, r7, lr}
   12eea:	b088      	sub	sp, #32
   12eec:	af02      	add	r7, sp, #8
   12eee:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   12ef0:	2317      	movs	r3, #23
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	221e      	movs	r2, #30
   12ef6:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   12ef8:	2317      	movs	r3, #23
   12efa:	18fb      	adds	r3, r7, r3
   12efc:	781b      	ldrb	r3, [r3, #0]
   12efe:	2101      	movs	r1, #1
   12f00:	0018      	movs	r0, r3
   12f02:	4b18      	ldr	r3, [pc, #96]	; (12f64 <gsm_call_to_dial_a_number+0x7c>)
   12f04:	4798      	blx	r3
   12f06:	0003      	movs	r3, r0
   12f08:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	2b00      	cmp	r3, #0
   12f0e:	d101      	bne.n	12f14 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
   12f10:	2300      	movs	r3, #0
   12f12:	e023      	b.n	12f5c <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   12f14:	2317      	movs	r3, #23
   12f16:	18fb      	adds	r3, r7, r3
   12f18:	781a      	ldrb	r2, [r3, #0]
   12f1a:	693b      	ldr	r3, [r7, #16]
   12f1c:	2100      	movs	r1, #0
   12f1e:	0018      	movs	r0, r3
   12f20:	4b11      	ldr	r3, [pc, #68]	; (12f68 <gsm_call_to_dial_a_number+0x80>)
   12f22:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
   12f24:	2317      	movs	r3, #23
   12f26:	18fb      	adds	r3, r7, r3
   12f28:	7819      	ldrb	r1, [r3, #0]
   12f2a:	687b      	ldr	r3, [r7, #4]
   12f2c:	4a0f      	ldr	r2, [pc, #60]	; (12f6c <gsm_call_to_dial_a_number+0x84>)
   12f2e:	6938      	ldr	r0, [r7, #16]
   12f30:	4c0f      	ldr	r4, [pc, #60]	; (12f70 <gsm_call_to_dial_a_number+0x88>)
   12f32:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
   12f34:	230f      	movs	r3, #15
   12f36:	18fc      	adds	r4, r7, r3
   12f38:	23fa      	movs	r3, #250	; 0xfa
   12f3a:	00da      	lsls	r2, r3, #3
   12f3c:	490d      	ldr	r1, [pc, #52]	; (12f74 <gsm_call_to_dial_a_number+0x8c>)
   12f3e:	6938      	ldr	r0, [r7, #16]
   12f40:	2300      	movs	r3, #0
   12f42:	9300      	str	r3, [sp, #0]
   12f44:	2300      	movs	r3, #0
   12f46:	4d0c      	ldr	r5, [pc, #48]	; (12f78 <gsm_call_to_dial_a_number+0x90>)
   12f48:	47a8      	blx	r5
   12f4a:	0003      	movs	r3, r0
   12f4c:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   12f4e:	693b      	ldr	r3, [r7, #16]
   12f50:	0018      	movs	r0, r3
   12f52:	4b0a      	ldr	r3, [pc, #40]	; (12f7c <gsm_call_to_dial_a_number+0x94>)
   12f54:	4798      	blx	r3
	return err;
   12f56:	230f      	movs	r3, #15
   12f58:	18fb      	adds	r3, r7, r3
   12f5a:	781b      	ldrb	r3, [r3, #0]
	
}
   12f5c:	0018      	movs	r0, r3
   12f5e:	46bd      	mov	sp, r7
   12f60:	b006      	add	sp, #24
   12f62:	bdb0      	pop	{r4, r5, r7, pc}
   12f64:	00029549 	.word	0x00029549
   12f68:	00029657 	.word	0x00029657
   12f6c:	0002a558 	.word	0x0002a558
   12f70:	000297f9 	.word	0x000297f9
   12f74:	0002a30c 	.word	0x0002a30c
   12f78:	000123ed 	.word	0x000123ed
   12f7c:	000295e9 	.word	0x000295e9

00012f80 <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
   12f80:	b590      	push	{r4, r7, lr}
   12f82:	b083      	sub	sp, #12
   12f84:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12f86:	4a06      	ldr	r2, [pc, #24]	; (12fa0 <gsm_answer_an_incomming_call+0x20>)
   12f88:	4906      	ldr	r1, [pc, #24]	; (12fa4 <gsm_answer_an_incomming_call+0x24>)
   12f8a:	4807      	ldr	r0, [pc, #28]	; (12fa8 <gsm_answer_an_incomming_call+0x28>)
   12f8c:	2300      	movs	r3, #0
   12f8e:	9300      	str	r3, [sp, #0]
   12f90:	2300      	movs	r3, #0
   12f92:	4c06      	ldr	r4, [pc, #24]	; (12fac <gsm_answer_an_incomming_call+0x2c>)
   12f94:	47a0      	blx	r4
   12f96:	0003      	movs	r3, r0
}
   12f98:	0018      	movs	r0, r3
   12f9a:	46bd      	mov	sp, r7
   12f9c:	b001      	add	sp, #4
   12f9e:	bd90      	pop	{r4, r7, pc}
   12fa0:	00001388 	.word	0x00001388
   12fa4:	0002a30c 	.word	0x0002a30c
   12fa8:	0002a560 	.word	0x0002a560
   12fac:	000123ed 	.word	0x000123ed

00012fb0 <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
   12fb0:	b590      	push	{r4, r7, lr}
   12fb2:	b083      	sub	sp, #12
   12fb4:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
   12fb6:	4a06      	ldr	r2, [pc, #24]	; (12fd0 <gsm_enable_network_time_update+0x20>)
   12fb8:	4906      	ldr	r1, [pc, #24]	; (12fd4 <gsm_enable_network_time_update+0x24>)
   12fba:	4807      	ldr	r0, [pc, #28]	; (12fd8 <gsm_enable_network_time_update+0x28>)
   12fbc:	2300      	movs	r3, #0
   12fbe:	9300      	str	r3, [sp, #0]
   12fc0:	2300      	movs	r3, #0
   12fc2:	4c06      	ldr	r4, [pc, #24]	; (12fdc <gsm_enable_network_time_update+0x2c>)
   12fc4:	47a0      	blx	r4
   12fc6:	0003      	movs	r3, r0
}
   12fc8:	0018      	movs	r0, r3
   12fca:	46bd      	mov	sp, r7
   12fcc:	b001      	add	sp, #4
   12fce:	bd90      	pop	{r4, r7, pc}
   12fd0:	00002710 	.word	0x00002710
   12fd4:	0002a30c 	.word	0x0002a30c
   12fd8:	0002a568 	.word	0x0002a568
   12fdc:	000123ed 	.word	0x000123ed

00012fe0 <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
   12fe0:	b590      	push	{r4, r7, lr}
   12fe2:	b083      	sub	sp, #12
   12fe4:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
   12fe6:	4a06      	ldr	r2, [pc, #24]	; (13000 <gsm_enable_DTMF_detection+0x20>)
   12fe8:	4906      	ldr	r1, [pc, #24]	; (13004 <gsm_enable_DTMF_detection+0x24>)
   12fea:	4807      	ldr	r0, [pc, #28]	; (13008 <gsm_enable_DTMF_detection+0x28>)
   12fec:	2300      	movs	r3, #0
   12fee:	9300      	str	r3, [sp, #0]
   12ff0:	2300      	movs	r3, #0
   12ff2:	4c06      	ldr	r4, [pc, #24]	; (1300c <gsm_enable_DTMF_detection+0x2c>)
   12ff4:	47a0      	blx	r4
   12ff6:	0003      	movs	r3, r0
}
   12ff8:	0018      	movs	r0, r3
   12ffa:	46bd      	mov	sp, r7
   12ffc:	b001      	add	sp, #4
   12ffe:	bd90      	pop	{r4, r7, pc}
   13000:	00001388 	.word	0x00001388
   13004:	0002a30c 	.word	0x0002a30c
   13008:	0002a580 	.word	0x0002a580
   1300c:	000123ed 	.word	0x000123ed

00013010 <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
   13010:	b5b0      	push	{r4, r5, r7, lr}
   13012:	b088      	sub	sp, #32
   13014:	af02      	add	r7, sp, #8
   13016:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
   13018:	2317      	movs	r3, #23
   1301a:	18fb      	adds	r3, r7, r3
   1301c:	221e      	movs	r2, #30
   1301e:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   13020:	2317      	movs	r3, #23
   13022:	18fb      	adds	r3, r7, r3
   13024:	781b      	ldrb	r3, [r3, #0]
   13026:	2101      	movs	r1, #1
   13028:	0018      	movs	r0, r3
   1302a:	4b18      	ldr	r3, [pc, #96]	; (1308c <gsm_send_DTMF_Tone+0x7c>)
   1302c:	4798      	blx	r3
   1302e:	0003      	movs	r3, r0
   13030:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
   13032:	693b      	ldr	r3, [r7, #16]
   13034:	2b00      	cmp	r3, #0
   13036:	d101      	bne.n	1303c <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
   13038:	2300      	movs	r3, #0
   1303a:	e022      	b.n	13082 <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
   1303c:	2317      	movs	r3, #23
   1303e:	18fb      	adds	r3, r7, r3
   13040:	781a      	ldrb	r2, [r3, #0]
   13042:	693b      	ldr	r3, [r7, #16]
   13044:	2100      	movs	r1, #0
   13046:	0018      	movs	r0, r3
   13048:	4b11      	ldr	r3, [pc, #68]	; (13090 <gsm_send_DTMF_Tone+0x80>)
   1304a:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
   1304c:	2317      	movs	r3, #23
   1304e:	18fb      	adds	r3, r7, r3
   13050:	7819      	ldrb	r1, [r3, #0]
   13052:	687b      	ldr	r3, [r7, #4]
   13054:	4a0f      	ldr	r2, [pc, #60]	; (13094 <gsm_send_DTMF_Tone+0x84>)
   13056:	6938      	ldr	r0, [r7, #16]
   13058:	4c0f      	ldr	r4, [pc, #60]	; (13098 <gsm_send_DTMF_Tone+0x88>)
   1305a:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
   1305c:	230f      	movs	r3, #15
   1305e:	18fc      	adds	r4, r7, r3
   13060:	4a0e      	ldr	r2, [pc, #56]	; (1309c <gsm_send_DTMF_Tone+0x8c>)
   13062:	490f      	ldr	r1, [pc, #60]	; (130a0 <gsm_send_DTMF_Tone+0x90>)
   13064:	6938      	ldr	r0, [r7, #16]
   13066:	2300      	movs	r3, #0
   13068:	9300      	str	r3, [sp, #0]
   1306a:	2300      	movs	r3, #0
   1306c:	4d0d      	ldr	r5, [pc, #52]	; (130a4 <gsm_send_DTMF_Tone+0x94>)
   1306e:	47a8      	blx	r5
   13070:	0003      	movs	r3, r0
   13072:	7023      	strb	r3, [r4, #0]
	free(cmdx);
   13074:	693b      	ldr	r3, [r7, #16]
   13076:	0018      	movs	r0, r3
   13078:	4b0b      	ldr	r3, [pc, #44]	; (130a8 <gsm_send_DTMF_Tone+0x98>)
   1307a:	4798      	blx	r3
	return err;
   1307c:	230f      	movs	r3, #15
   1307e:	18fb      	adds	r3, r7, r3
   13080:	781b      	ldrb	r3, [r3, #0]
}
   13082:	0018      	movs	r0, r3
   13084:	46bd      	mov	sp, r7
   13086:	b006      	add	sp, #24
   13088:	bdb0      	pop	{r4, r5, r7, pc}
   1308a:	46c0      	nop			; (mov r8, r8)
   1308c:	00029549 	.word	0x00029549
   13090:	00029657 	.word	0x00029657
   13094:	0002a58c 	.word	0x0002a58c
   13098:	000297f9 	.word	0x000297f9
   1309c:	00001388 	.word	0x00001388
   130a0:	0002a30c 	.word	0x0002a30c
   130a4:	000123ed 	.word	0x000123ed
   130a8:	000295e9 	.word	0x000295e9

000130ac <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
   130ac:	b590      	push	{r4, r7, lr}
   130ae:	b083      	sub	sp, #12
   130b0:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
   130b2:	4a06      	ldr	r2, [pc, #24]	; (130cc <gsm_hangup_call+0x20>)
   130b4:	4906      	ldr	r1, [pc, #24]	; (130d0 <gsm_hangup_call+0x24>)
   130b6:	4807      	ldr	r0, [pc, #28]	; (130d4 <gsm_hangup_call+0x28>)
   130b8:	2300      	movs	r3, #0
   130ba:	9300      	str	r3, [sp, #0]
   130bc:	2300      	movs	r3, #0
   130be:	4c06      	ldr	r4, [pc, #24]	; (130d8 <gsm_hangup_call+0x2c>)
   130c0:	47a0      	blx	r4
   130c2:	0003      	movs	r3, r0
}
   130c4:	0018      	movs	r0, r3
   130c6:	46bd      	mov	sp, r7
   130c8:	b001      	add	sp, #4
   130ca:	bd90      	pop	{r4, r7, pc}
   130cc:	00001388 	.word	0x00001388
   130d0:	0002a30c 	.word	0x0002a30c
   130d4:	0002a59c 	.word	0x0002a59c
   130d8:	000123ed 	.word	0x000123ed

000130dc <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
   130dc:	b590      	push	{r4, r7, lr}
   130de:	b083      	sub	sp, #12
   130e0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
   130e2:	4a06      	ldr	r2, [pc, #24]	; (130fc <gsm_disable_call_waiting+0x20>)
   130e4:	4906      	ldr	r1, [pc, #24]	; (13100 <gsm_disable_call_waiting+0x24>)
   130e6:	4807      	ldr	r0, [pc, #28]	; (13104 <gsm_disable_call_waiting+0x28>)
   130e8:	2300      	movs	r3, #0
   130ea:	9300      	str	r3, [sp, #0]
   130ec:	2300      	movs	r3, #0
   130ee:	4c06      	ldr	r4, [pc, #24]	; (13108 <gsm_disable_call_waiting+0x2c>)
   130f0:	47a0      	blx	r4
   130f2:	0003      	movs	r3, r0
}
   130f4:	0018      	movs	r0, r3
   130f6:	46bd      	mov	sp, r7
   130f8:	b001      	add	sp, #4
   130fa:	bd90      	pop	{r4, r7, pc}
   130fc:	00004650 	.word	0x00004650
   13100:	0002a30c 	.word	0x0002a30c
   13104:	0002a5a8 	.word	0x0002a5a8
   13108:	000123ed 	.word	0x000123ed

0001310c <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
   1310c:	b590      	push	{r4, r7, lr}
   1310e:	b083      	sub	sp, #12
   13110:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,500,0, NULL);
   13112:	23fa      	movs	r3, #250	; 0xfa
   13114:	005a      	lsls	r2, r3, #1
   13116:	4906      	ldr	r1, [pc, #24]	; (13130 <gsm_stop_play_record_file+0x24>)
   13118:	4806      	ldr	r0, [pc, #24]	; (13134 <gsm_stop_play_record_file+0x28>)
   1311a:	2300      	movs	r3, #0
   1311c:	9300      	str	r3, [sp, #0]
   1311e:	2300      	movs	r3, #0
   13120:	4c05      	ldr	r4, [pc, #20]	; (13138 <gsm_stop_play_record_file+0x2c>)
   13122:	47a0      	blx	r4
   13124:	0003      	movs	r3, r0
}
   13126:	0018      	movs	r0, r3
   13128:	46bd      	mov	sp, r7
   1312a:	b001      	add	sp, #4
   1312c:	bd90      	pop	{r4, r7, pc}
   1312e:	46c0      	nop			; (mov r8, r8)
   13130:	0002a30c 	.word	0x0002a30c
   13134:	0002a5d8 	.word	0x0002a5d8
   13138:	000123ed 	.word	0x000123ed

0001313c <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
   1313c:	b590      	push	{r4, r7, lr}
   1313e:	b087      	sub	sp, #28
   13140:	af02      	add	r7, sp, #8
   13142:	6078      	str	r0, [r7, #4]
   13144:	000a      	movs	r2, r1
   13146:	1cfb      	adds	r3, r7, #3
   13148:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
   1314a:	230f      	movs	r3, #15
   1314c:	18fb      	adds	r3, r7, r3
   1314e:	2200      	movs	r2, #0
   13150:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
   13152:	1cfb      	adds	r3, r7, #3
   13154:	781b      	ldrb	r3, [r3, #0]
   13156:	2b00      	cmp	r3, #0
   13158:	d003      	beq.n	13162 <gsm_play_record_file+0x26>
	{
		repeat = 1;
   1315a:	230f      	movs	r3, #15
   1315c:	18fb      	adds	r3, r7, r3
   1315e:	2201      	movs	r2, #1
   13160:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
   13162:	230e      	movs	r3, #14
   13164:	18fb      	adds	r3, r7, r3
   13166:	2232      	movs	r2, #50	; 0x32
   13168:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   1316a:	230e      	movs	r3, #14
   1316c:	18fb      	adds	r3, r7, r3
   1316e:	781b      	ldrb	r3, [r3, #0]
   13170:	2101      	movs	r1, #1
   13172:	0018      	movs	r0, r3
   13174:	4b17      	ldr	r3, [pc, #92]	; (131d4 <gsm_play_record_file+0x98>)
   13176:	4798      	blx	r3
   13178:	0003      	movs	r3, r0
   1317a:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
   1317c:	68bb      	ldr	r3, [r7, #8]
   1317e:	2b00      	cmp	r3, #0
   13180:	d101      	bne.n	13186 <gsm_play_record_file+0x4a>
	{
		return 0;
   13182:	2300      	movs	r3, #0
   13184:	e022      	b.n	131cc <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   13186:	230e      	movs	r3, #14
   13188:	18fb      	adds	r3, r7, r3
   1318a:	781a      	ldrb	r2, [r3, #0]
   1318c:	68bb      	ldr	r3, [r7, #8]
   1318e:	2100      	movs	r1, #0
   13190:	0018      	movs	r0, r3
   13192:	4b11      	ldr	r3, [pc, #68]	; (131d8 <gsm_play_record_file+0x9c>)
   13194:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
   13196:	230e      	movs	r3, #14
   13198:	18fb      	adds	r3, r7, r3
   1319a:	7819      	ldrb	r1, [r3, #0]
   1319c:	230f      	movs	r3, #15
   1319e:	18fb      	adds	r3, r7, r3
   131a0:	781b      	ldrb	r3, [r3, #0]
   131a2:	687c      	ldr	r4, [r7, #4]
   131a4:	4a0d      	ldr	r2, [pc, #52]	; (131dc <gsm_play_record_file+0xa0>)
   131a6:	68b8      	ldr	r0, [r7, #8]
   131a8:	9300      	str	r3, [sp, #0]
   131aa:	0023      	movs	r3, r4
   131ac:	4c0c      	ldr	r4, [pc, #48]	; (131e0 <gsm_play_record_file+0xa4>)
   131ae:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
   131b0:	23fa      	movs	r3, #250	; 0xfa
   131b2:	00da      	lsls	r2, r3, #3
   131b4:	490b      	ldr	r1, [pc, #44]	; (131e4 <gsm_play_record_file+0xa8>)
   131b6:	68b8      	ldr	r0, [r7, #8]
   131b8:	2300      	movs	r3, #0
   131ba:	9300      	str	r3, [sp, #0]
   131bc:	2300      	movs	r3, #0
   131be:	4c0a      	ldr	r4, [pc, #40]	; (131e8 <gsm_play_record_file+0xac>)
   131c0:	47a0      	blx	r4
	free(cmdx);
   131c2:	68bb      	ldr	r3, [r7, #8]
   131c4:	0018      	movs	r0, r3
   131c6:	4b09      	ldr	r3, [pc, #36]	; (131ec <gsm_play_record_file+0xb0>)
   131c8:	4798      	blx	r3
	return GSM_ERROR_NONE;
   131ca:	2300      	movs	r3, #0
	
}
   131cc:	0018      	movs	r0, r3
   131ce:	46bd      	mov	sp, r7
   131d0:	b005      	add	sp, #20
   131d2:	bd90      	pop	{r4, r7, pc}
   131d4:	00029549 	.word	0x00029549
   131d8:	00029657 	.word	0x00029657
   131dc:	0002a5e4 	.word	0x0002a5e4
   131e0:	000297f9 	.word	0x000297f9
   131e4:	0002a30c 	.word	0x0002a30c
   131e8:	000123ed 	.word	0x000123ed
   131ec:	000295e9 	.word	0x000295e9

000131f0 <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
   131f0:	b5b0      	push	{r4, r5, r7, lr}
   131f2:	b086      	sub	sp, #24
   131f4:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
   131f6:	230f      	movs	r3, #15
   131f8:	18fb      	adds	r3, r7, r3
   131fa:	2246      	movs	r2, #70	; 0x46
   131fc:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
   131fe:	230f      	movs	r3, #15
   13200:	18fb      	adds	r3, r7, r3
   13202:	781b      	ldrb	r3, [r3, #0]
   13204:	2101      	movs	r1, #1
   13206:	0018      	movs	r0, r3
   13208:	4b57      	ldr	r3, [pc, #348]	; (13368 <gsm_get_internal_rtc_time+0x178>)
   1320a:	4798      	blx	r3
   1320c:	0003      	movs	r3, r0
   1320e:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
   13210:	68bb      	ldr	r3, [r7, #8]
   13212:	2b00      	cmp	r3, #0
   13214:	d105      	bne.n	13222 <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
   13216:	68bb      	ldr	r3, [r7, #8]
   13218:	0018      	movs	r0, r3
   1321a:	4b54      	ldr	r3, [pc, #336]	; (1336c <gsm_get_internal_rtc_time+0x17c>)
   1321c:	4798      	blx	r3
		return 0;
   1321e:	2300      	movs	r3, #0
   13220:	e09d      	b.n	1335e <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
   13222:	230f      	movs	r3, #15
   13224:	18fb      	adds	r3, r7, r3
   13226:	781a      	ldrb	r2, [r3, #0]
   13228:	68bb      	ldr	r3, [r7, #8]
   1322a:	2100      	movs	r1, #0
   1322c:	0018      	movs	r0, r3
   1322e:	4b50      	ldr	r3, [pc, #320]	; (13370 <gsm_get_internal_rtc_time+0x180>)
   13230:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
   13232:	1dfc      	adds	r4, r7, #7
   13234:	230f      	movs	r3, #15
   13236:	18fb      	adds	r3, r7, r3
   13238:	781a      	ldrb	r2, [r3, #0]
   1323a:	4d4e      	ldr	r5, [pc, #312]	; (13374 <gsm_get_internal_rtc_time+0x184>)
   1323c:	494e      	ldr	r1, [pc, #312]	; (13378 <gsm_get_internal_rtc_time+0x188>)
   1323e:	484f      	ldr	r0, [pc, #316]	; (1337c <gsm_get_internal_rtc_time+0x18c>)
   13240:	68bb      	ldr	r3, [r7, #8]
   13242:	9300      	str	r3, [sp, #0]
   13244:	0013      	movs	r3, r2
   13246:	002a      	movs	r2, r5
   13248:	4d4d      	ldr	r5, [pc, #308]	; (13380 <gsm_get_internal_rtc_time+0x190>)
   1324a:	47a8      	blx	r5
   1324c:	0003      	movs	r3, r0
   1324e:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
   13250:	1dfb      	adds	r3, r7, #7
   13252:	781b      	ldrb	r3, [r3, #0]
   13254:	2b00      	cmp	r3, #0
   13256:	d16a      	bne.n	1332e <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
   13258:	4a4a      	ldr	r2, [pc, #296]	; (13384 <gsm_get_internal_rtc_time+0x194>)
   1325a:	68bb      	ldr	r3, [r7, #8]
   1325c:	0011      	movs	r1, r2
   1325e:	0018      	movs	r0, r3
   13260:	4b49      	ldr	r3, [pc, #292]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   13262:	4798      	blx	r3
   13264:	0003      	movs	r3, r0
   13266:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
   13268:	4b46      	ldr	r3, [pc, #280]	; (13384 <gsm_get_internal_rtc_time+0x194>)
   1326a:	0019      	movs	r1, r3
   1326c:	2000      	movs	r0, #0
   1326e:	4b46      	ldr	r3, [pc, #280]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   13270:	4798      	blx	r3
   13272:	0003      	movs	r3, r0
   13274:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
   13276:	4a45      	ldr	r2, [pc, #276]	; (1338c <gsm_get_internal_rtc_time+0x19c>)
   13278:	683b      	ldr	r3, [r7, #0]
   1327a:	0011      	movs	r1, r2
   1327c:	0018      	movs	r0, r3
   1327e:	4b42      	ldr	r3, [pc, #264]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   13280:	4798      	blx	r3
   13282:	0003      	movs	r3, r0
   13284:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
   13286:	683b      	ldr	r3, [r7, #0]
   13288:	0018      	movs	r0, r3
   1328a:	4b41      	ldr	r3, [pc, #260]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   1328c:	4798      	blx	r3
   1328e:	0003      	movs	r3, r0
   13290:	b2da      	uxtb	r2, r3
   13292:	4b40      	ldr	r3, [pc, #256]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   13294:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
   13296:	4b3d      	ldr	r3, [pc, #244]	; (1338c <gsm_get_internal_rtc_time+0x19c>)
   13298:	0019      	movs	r1, r3
   1329a:	2000      	movs	r0, #0
   1329c:	4b3a      	ldr	r3, [pc, #232]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   1329e:	4798      	blx	r3
   132a0:	0003      	movs	r3, r0
   132a2:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
   132a4:	683b      	ldr	r3, [r7, #0]
   132a6:	0018      	movs	r0, r3
   132a8:	4b39      	ldr	r3, [pc, #228]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   132aa:	4798      	blx	r3
   132ac:	0003      	movs	r3, r0
   132ae:	b2da      	uxtb	r2, r3
   132b0:	4b38      	ldr	r3, [pc, #224]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   132b2:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
   132b4:	4b38      	ldr	r3, [pc, #224]	; (13398 <gsm_get_internal_rtc_time+0x1a8>)
   132b6:	0019      	movs	r1, r3
   132b8:	2000      	movs	r0, #0
   132ba:	4b33      	ldr	r3, [pc, #204]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   132bc:	4798      	blx	r3
   132be:	0003      	movs	r3, r0
   132c0:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
   132c2:	683b      	ldr	r3, [r7, #0]
   132c4:	0018      	movs	r0, r3
   132c6:	4b32      	ldr	r3, [pc, #200]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   132c8:	4798      	blx	r3
   132ca:	0003      	movs	r3, r0
   132cc:	b2da      	uxtb	r2, r3
   132ce:	4b31      	ldr	r3, [pc, #196]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   132d0:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
   132d2:	4b32      	ldr	r3, [pc, #200]	; (1339c <gsm_get_internal_rtc_time+0x1ac>)
   132d4:	0019      	movs	r1, r3
   132d6:	2000      	movs	r0, #0
   132d8:	4b2b      	ldr	r3, [pc, #172]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   132da:	4798      	blx	r3
   132dc:	0003      	movs	r3, r0
   132de:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
   132e0:	683b      	ldr	r3, [r7, #0]
   132e2:	0018      	movs	r0, r3
   132e4:	4b2a      	ldr	r3, [pc, #168]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   132e6:	4798      	blx	r3
   132e8:	0003      	movs	r3, r0
   132ea:	b2da      	uxtb	r2, r3
   132ec:	4b29      	ldr	r3, [pc, #164]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   132ee:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
   132f0:	4b2a      	ldr	r3, [pc, #168]	; (1339c <gsm_get_internal_rtc_time+0x1ac>)
   132f2:	0019      	movs	r1, r3
   132f4:	2000      	movs	r0, #0
   132f6:	4b24      	ldr	r3, [pc, #144]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   132f8:	4798      	blx	r3
   132fa:	0003      	movs	r3, r0
   132fc:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
   132fe:	683b      	ldr	r3, [r7, #0]
   13300:	0018      	movs	r0, r3
   13302:	4b23      	ldr	r3, [pc, #140]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   13304:	4798      	blx	r3
   13306:	0003      	movs	r3, r0
   13308:	b2da      	uxtb	r2, r3
   1330a:	4b22      	ldr	r3, [pc, #136]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   1330c:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
   1330e:	4b24      	ldr	r3, [pc, #144]	; (133a0 <gsm_get_internal_rtc_time+0x1b0>)
   13310:	0019      	movs	r1, r3
   13312:	2000      	movs	r0, #0
   13314:	4b1c      	ldr	r3, [pc, #112]	; (13388 <gsm_get_internal_rtc_time+0x198>)
   13316:	4798      	blx	r3
   13318:	0003      	movs	r3, r0
   1331a:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
   1331c:	683b      	ldr	r3, [r7, #0]
   1331e:	0018      	movs	r0, r3
   13320:	4b1b      	ldr	r3, [pc, #108]	; (13390 <gsm_get_internal_rtc_time+0x1a0>)
   13322:	4798      	blx	r3
   13324:	0003      	movs	r3, r0
   13326:	b2da      	uxtb	r2, r3
   13328:	4b1a      	ldr	r3, [pc, #104]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   1332a:	715a      	strb	r2, [r3, #5]
   1332c:	e011      	b.n	13352 <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
   1332e:	4b19      	ldr	r3, [pc, #100]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   13330:	2200      	movs	r2, #0
   13332:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
   13334:	4b17      	ldr	r3, [pc, #92]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   13336:	2200      	movs	r2, #0
   13338:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
   1333a:	4b16      	ldr	r3, [pc, #88]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   1333c:	2200      	movs	r2, #0
   1333e:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
   13340:	4b14      	ldr	r3, [pc, #80]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   13342:	2200      	movs	r2, #0
   13344:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
   13346:	4b13      	ldr	r3, [pc, #76]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   13348:	2200      	movs	r2, #0
   1334a:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
   1334c:	4b11      	ldr	r3, [pc, #68]	; (13394 <gsm_get_internal_rtc_time+0x1a4>)
   1334e:	2200      	movs	r2, #0
   13350:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
   13352:	68bb      	ldr	r3, [r7, #8]
   13354:	0018      	movs	r0, r3
   13356:	4b05      	ldr	r3, [pc, #20]	; (1336c <gsm_get_internal_rtc_time+0x17c>)
   13358:	4798      	blx	r3
	return err;
   1335a:	1dfb      	adds	r3, r7, #7
   1335c:	781b      	ldrb	r3, [r3, #0]
}
   1335e:	0018      	movs	r0, r3
   13360:	46bd      	mov	sp, r7
   13362:	b004      	add	sp, #16
   13364:	bdb0      	pop	{r4, r5, r7, pc}
   13366:	46c0      	nop			; (mov r8, r8)
   13368:	00029549 	.word	0x00029549
   1336c:	000295e9 	.word	0x000295e9
   13370:	00029657 	.word	0x00029657
   13374:	00001388 	.word	0x00001388
   13378:	0002a30c 	.word	0x0002a30c
   1337c:	0002a608 	.word	0x0002a608
   13380:	000123ed 	.word	0x000123ed
   13384:	0002a614 	.word	0x0002a614
   13388:	00029949 	.word	0x00029949
   1338c:	0002a618 	.word	0x0002a618
   13390:	0002953d 	.word	0x0002953d
   13394:	20000888 	.word	0x20000888
   13398:	0002a428 	.word	0x0002a428
   1339c:	0002a424 	.word	0x0002a424
   133a0:	0002a61c 	.word	0x0002a61c

000133a4 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
   133a4:	b580      	push	{r7, lr}
   133a6:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
   133a8:	4b34      	ldr	r3, [pc, #208]	; (1347c <gsm_config_module+0xd8>)
   133aa:	4798      	blx	r3
   133ac:	1e03      	subs	r3, r0, #0
   133ae:	d000      	beq.n	133b2 <gsm_config_module+0xe>
   133b0:	e05e      	b.n	13470 <gsm_config_module+0xcc>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
   133b2:	4b33      	ldr	r3, [pc, #204]	; (13480 <gsm_config_module+0xdc>)
   133b4:	4798      	blx	r3
   133b6:	1e03      	subs	r3, r0, #0
   133b8:	d000      	beq.n	133bc <gsm_config_module+0x18>
   133ba:	e057      	b.n	1346c <gsm_config_module+0xc8>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
   133bc:	23fa      	movs	r3, #250	; 0xfa
   133be:	00db      	lsls	r3, r3, #3
   133c0:	0018      	movs	r0, r3
   133c2:	4b30      	ldr	r3, [pc, #192]	; (13484 <gsm_config_module+0xe0>)
   133c4:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
   133c6:	4b30      	ldr	r3, [pc, #192]	; (13488 <gsm_config_module+0xe4>)
   133c8:	4798      	blx	r3
   133ca:	1e03      	subs	r3, r0, #0
   133cc:	d14c      	bne.n	13468 <gsm_config_module+0xc4>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
   133ce:	4b2f      	ldr	r3, [pc, #188]	; (1348c <gsm_config_module+0xe8>)
   133d0:	4798      	blx	r3
   133d2:	1e03      	subs	r3, r0, #0
   133d4:	d14e      	bne.n	13474 <gsm_config_module+0xd0>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
   133d6:	4b2e      	ldr	r3, [pc, #184]	; (13490 <gsm_config_module+0xec>)
   133d8:	4798      	blx	r3
   133da:	1e03      	subs	r3, r0, #0
   133dc:	d142      	bne.n	13464 <gsm_config_module+0xc0>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
   133de:	23fa      	movs	r3, #250	; 0xfa
   133e0:	00db      	lsls	r3, r3, #3
   133e2:	0018      	movs	r0, r3
   133e4:	4b27      	ldr	r3, [pc, #156]	; (13484 <gsm_config_module+0xe0>)
   133e6:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
   133e8:	4b2a      	ldr	r3, [pc, #168]	; (13494 <gsm_config_module+0xf0>)
   133ea:	4798      	blx	r3
   133ec:	1e03      	subs	r3, r0, #0
   133ee:	d137      	bne.n	13460 <gsm_config_module+0xbc>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
   133f0:	4b29      	ldr	r3, [pc, #164]	; (13498 <gsm_config_module+0xf4>)
   133f2:	4798      	blx	r3
   133f4:	1e03      	subs	r3, r0, #0
   133f6:	d131      	bne.n	1345c <gsm_config_module+0xb8>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
   133f8:	4b28      	ldr	r3, [pc, #160]	; (1349c <gsm_config_module+0xf8>)
   133fa:	4798      	blx	r3
   133fc:	1e03      	subs	r3, r0, #0
   133fe:	d12b      	bne.n	13458 <gsm_config_module+0xb4>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
   13400:	4b27      	ldr	r3, [pc, #156]	; (134a0 <gsm_config_module+0xfc>)
   13402:	4798      	blx	r3
   13404:	1e03      	subs	r3, r0, #0
   13406:	d125      	bne.n	13454 <gsm_config_module+0xb0>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
   13408:	4b26      	ldr	r3, [pc, #152]	; (134a4 <gsm_config_module+0x100>)
   1340a:	4798      	blx	r3
   1340c:	1e03      	subs	r3, r0, #0
   1340e:	d11f      	bne.n	13450 <gsm_config_module+0xac>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
   13410:	4b25      	ldr	r3, [pc, #148]	; (134a8 <gsm_config_module+0x104>)
   13412:	4798      	blx	r3
   13414:	1e03      	subs	r3, r0, #0
   13416:	d119      	bne.n	1344c <gsm_config_module+0xa8>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
   13418:	4b24      	ldr	r3, [pc, #144]	; (134ac <gsm_config_module+0x108>)
   1341a:	4798      	blx	r3
   1341c:	1e03      	subs	r3, r0, #0
   1341e:	d113      	bne.n	13448 <gsm_config_module+0xa4>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
   13420:	4b23      	ldr	r3, [pc, #140]	; (134b0 <gsm_config_module+0x10c>)
   13422:	4798      	blx	r3
   13424:	1e03      	subs	r3, r0, #0
   13426:	d10d      	bne.n	13444 <gsm_config_module+0xa0>
													{
														if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
   13428:	4b22      	ldr	r3, [pc, #136]	; (134b4 <gsm_config_module+0x110>)
   1342a:	4798      	blx	r3
   1342c:	1e03      	subs	r3, r0, #0
   1342e:	d107      	bne.n	13440 <gsm_config_module+0x9c>
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
   13430:	4b21      	ldr	r3, [pc, #132]	; (134b8 <gsm_config_module+0x114>)
   13432:	4798      	blx	r3
   13434:	1e03      	subs	r3, r0, #0
   13436:	d101      	bne.n	1343c <gsm_config_module+0x98>
															{
																return GSM_ERROR_NONE;
   13438:	2300      	movs	r3, #0
   1343a:	e01c      	b.n	13476 <gsm_config_module+0xd2>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
   1343c:	2310      	movs	r3, #16
   1343e:	e01a      	b.n	13476 <gsm_config_module+0xd2>
															}
														}
														else
														{
															return GSM_ERROR_CONFIG_FAILED;
   13440:	2310      	movs	r3, #16
   13442:	e018      	b.n	13476 <gsm_config_module+0xd2>
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
   13444:	2310      	movs	r3, #16
   13446:	e016      	b.n	13476 <gsm_config_module+0xd2>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
   13448:	2310      	movs	r3, #16
   1344a:	e014      	b.n	13476 <gsm_config_module+0xd2>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
   1344c:	2310      	movs	r3, #16
   1344e:	e012      	b.n	13476 <gsm_config_module+0xd2>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
   13450:	2310      	movs	r3, #16
   13452:	e010      	b.n	13476 <gsm_config_module+0xd2>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
   13454:	2310      	movs	r3, #16
   13456:	e00e      	b.n	13476 <gsm_config_module+0xd2>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
   13458:	2310      	movs	r3, #16
   1345a:	e00c      	b.n	13476 <gsm_config_module+0xd2>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
   1345c:	2310      	movs	r3, #16
   1345e:	e00a      	b.n	13476 <gsm_config_module+0xd2>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
   13460:	2310      	movs	r3, #16
   13462:	e008      	b.n	13476 <gsm_config_module+0xd2>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
   13464:	2310      	movs	r3, #16
   13466:	e006      	b.n	13476 <gsm_config_module+0xd2>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
   13468:	2310      	movs	r3, #16
   1346a:	e004      	b.n	13476 <gsm_config_module+0xd2>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
   1346c:	2310      	movs	r3, #16
   1346e:	e002      	b.n	13476 <gsm_config_module+0xd2>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
   13470:	2310      	movs	r3, #16
   13472:	e000      	b.n	13476 <gsm_config_module+0xd2>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
   13474:	2310      	movs	r3, #16
}
   13476:	0018      	movs	r0, r3
   13478:	46bd      	mov	sp, r7
   1347a:	bd80      	pop	{r7, pc}
   1347c:	000125f1 	.word	0x000125f1
   13480:	0001282d 	.word	0x0001282d
   13484:	00020969 	.word	0x00020969
   13488:	000126dd 	.word	0x000126dd
   1348c:	0001285d 	.word	0x0001285d
   13490:	00012689 	.word	0x00012689
   13494:	0001276d 	.word	0x0001276d
   13498:	0001279d 	.word	0x0001279d
   1349c:	000127fd 	.word	0x000127fd
   134a0:	0001288d 	.word	0x0001288d
   134a4:	000128bd 	.word	0x000128bd
   134a8:	00012b0d 	.word	0x00012b0d
   134ac:	00012fb1 	.word	0x00012fb1
   134b0:	00012fe1 	.word	0x00012fe1
   134b4:	000127cd 	.word	0x000127cd
   134b8:	0001273d 	.word	0x0001273d

000134bc <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
   134bc:	b580      	push	{r7, lr}
   134be:	b084      	sub	sp, #16
   134c0:	af00      	add	r7, sp, #0
   134c2:	6078      	str	r0, [r7, #4]
   134c4:	000a      	movs	r2, r1
   134c6:	1cfb      	adds	r3, r7, #3
   134c8:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
   134ca:	230f      	movs	r3, #15
   134cc:	18fb      	adds	r3, r7, r3
   134ce:	2200      	movs	r2, #0
   134d0:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   134d2:	e026      	b.n	13522 <gsm_read_response_line+0x66>
	{
		
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
   134d4:	4b1f      	ldr	r3, [pc, #124]	; (13554 <gsm_read_response_line+0x98>)
   134d6:	6818      	ldr	r0, [r3, #0]
   134d8:	23fa      	movs	r3, #250	; 0xfa
   134da:	005a      	lsls	r2, r3, #1
   134dc:	230e      	movs	r3, #14
   134de:	18fb      	adds	r3, r7, r3
   134e0:	0019      	movs	r1, r3
   134e2:	4b1d      	ldr	r3, [pc, #116]	; (13558 <gsm_read_response_line+0x9c>)
   134e4:	4798      	blx	r3
   134e6:	1e03      	subs	r3, r0, #0
   134e8:	d101      	bne.n	134ee <gsm_read_response_line+0x32>
		{
			return false;
   134ea:	2300      	movs	r3, #0
   134ec:	e02d      	b.n	1354a <gsm_read_response_line+0x8e>
		}

		if (curr_rx == '\n')
   134ee:	230e      	movs	r3, #14
   134f0:	18fb      	adds	r3, r7, r3
   134f2:	781b      	ldrb	r3, [r3, #0]
   134f4:	2b0a      	cmp	r3, #10
   134f6:	d014      	beq.n	13522 <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r')
   134f8:	230e      	movs	r3, #14
   134fa:	18fb      	adds	r3, r7, r3
   134fc:	781b      	ldrb	r3, [r3, #0]
   134fe:	2b0d      	cmp	r3, #13
   13500:	d014      	beq.n	1352c <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
   13502:	687b      	ldr	r3, [r7, #4]
   13504:	1c5a      	adds	r2, r3, #1
   13506:	607a      	str	r2, [r7, #4]
   13508:	220e      	movs	r2, #14
   1350a:	18ba      	adds	r2, r7, r2
   1350c:	7812      	ldrb	r2, [r2, #0]
   1350e:	701a      	strb	r2, [r3, #0]
			length--;
   13510:	1cfb      	adds	r3, r7, #3
   13512:	781a      	ldrb	r2, [r3, #0]
   13514:	1cfb      	adds	r3, r7, #3
   13516:	3a01      	subs	r2, #1
   13518:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
   1351a:	230f      	movs	r3, #15
   1351c:	18fb      	adds	r3, r7, r3
   1351e:	2201      	movs	r2, #1
   13520:	701a      	strb	r2, [r3, #0]
	while (length > 1)
   13522:	1cfb      	adds	r3, r7, #3
   13524:	781b      	ldrb	r3, [r3, #0]
   13526:	2b01      	cmp	r3, #1
   13528:	d8d4      	bhi.n	134d4 <gsm_read_response_line+0x18>
   1352a:	e000      	b.n	1352e <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
   1352c:	46c0      	nop			; (mov r8, r8)
		}
	}

	if(line_non_empty)
   1352e:	230f      	movs	r3, #15
   13530:	18fb      	adds	r3, r7, r3
   13532:	781b      	ldrb	r3, [r3, #0]
   13534:	2b00      	cmp	r3, #0
   13536:	d002      	beq.n	1353e <gsm_read_response_line+0x82>
	{
		gsm_module_exit_sleep(true);
   13538:	2001      	movs	r0, #1
   1353a:	4b08      	ldr	r3, [pc, #32]	; (1355c <gsm_read_response_line+0xa0>)
   1353c:	4798      	blx	r3
	}

	*(buffer) = '\0';
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	2200      	movs	r2, #0
   13542:	701a      	strb	r2, [r3, #0]
	return line_non_empty;
   13544:	230f      	movs	r3, #15
   13546:	18fb      	adds	r3, r7, r3
   13548:	781b      	ldrb	r3, [r3, #0]
}
   1354a:	0018      	movs	r0, r3
   1354c:	46bd      	mov	sp, r7
   1354e:	b004      	add	sp, #16
   13550:	bd80      	pop	{r7, pc}
   13552:	46c0      	nop			; (mov r8, r8)
   13554:	2000041c 	.word	0x2000041c
   13558:	0001fec1 	.word	0x0001fec1
   1355c:	00012319 	.word	0x00012319

00013560 <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
   13560:	b580      	push	{r7, lr}
   13562:	b084      	sub	sp, #16
   13564:	af00      	add	r7, sp, #0
   13566:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
   13568:	230f      	movs	r3, #15
   1356a:	18fb      	adds	r3, r7, r3
   1356c:	2200      	movs	r2, #0
   1356e:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
   13570:	4a15      	ldr	r2, [pc, #84]	; (135c8 <gsm_responseLine_isNew_SMS_Received+0x68>)
   13572:	687b      	ldr	r3, [r7, #4]
   13574:	0011      	movs	r1, r2
   13576:	0018      	movs	r0, r3
   13578:	4b14      	ldr	r3, [pc, #80]	; (135cc <gsm_responseLine_isNew_SMS_Received+0x6c>)
   1357a:	4798      	blx	r3
   1357c:	1e03      	subs	r3, r0, #0
   1357e:	d017      	beq.n	135b0 <gsm_responseLine_isNew_SMS_Received+0x50>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
   13580:	4a13      	ldr	r2, [pc, #76]	; (135d0 <gsm_responseLine_isNew_SMS_Received+0x70>)
   13582:	687b      	ldr	r3, [r7, #4]
   13584:	0011      	movs	r1, r2
   13586:	0018      	movs	r0, r3
   13588:	4b12      	ldr	r3, [pc, #72]	; (135d4 <gsm_responseLine_isNew_SMS_Received+0x74>)
   1358a:	4798      	blx	r3
   1358c:	0003      	movs	r3, r0
   1358e:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
   13590:	4b0f      	ldr	r3, [pc, #60]	; (135d0 <gsm_responseLine_isNew_SMS_Received+0x70>)
   13592:	0019      	movs	r1, r3
   13594:	2000      	movs	r0, #0
   13596:	4b0f      	ldr	r3, [pc, #60]	; (135d4 <gsm_responseLine_isNew_SMS_Received+0x74>)
   13598:	4798      	blx	r3
   1359a:	0003      	movs	r3, r0
   1359c:	60bb      	str	r3, [r7, #8]
		
		//RemoveSpaces(ptr_tocken);
		
		sms_index = atoi(ptr_tocken);
   1359e:	68bb      	ldr	r3, [r7, #8]
   135a0:	0018      	movs	r0, r3
   135a2:	4b0d      	ldr	r3, [pc, #52]	; (135d8 <gsm_responseLine_isNew_SMS_Received+0x78>)
   135a4:	4798      	blx	r3
   135a6:	0002      	movs	r2, r0
   135a8:	230f      	movs	r3, #15
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	701a      	strb	r2, [r3, #0]
   135ae:	e003      	b.n	135b8 <gsm_responseLine_isNew_SMS_Received+0x58>
		
	}
	else
	{
		sms_index =  0;
   135b0:	230f      	movs	r3, #15
   135b2:	18fb      	adds	r3, r7, r3
   135b4:	2200      	movs	r2, #0
   135b6:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
   135b8:	230f      	movs	r3, #15
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	781b      	ldrb	r3, [r3, #0]
}
   135be:	0018      	movs	r0, r3
   135c0:	46bd      	mov	sp, r7
   135c2:	b004      	add	sp, #16
   135c4:	bd80      	pop	{r7, pc}
   135c6:	46c0      	nop			; (mov r8, r8)
   135c8:	0002a620 	.word	0x0002a620
   135cc:	00029917 	.word	0x00029917
   135d0:	0002a428 	.word	0x0002a428
   135d4:	00029949 	.word	0x00029949
   135d8:	0002953d 	.word	0x0002953d

000135dc <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
   135dc:	b580      	push	{r7, lr}
   135de:	b082      	sub	sp, #8
   135e0:	af00      	add	r7, sp, #0
   135e2:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
   135e4:	4a07      	ldr	r2, [pc, #28]	; (13604 <gsm_responseLine_isRinging+0x28>)
   135e6:	687b      	ldr	r3, [r7, #4]
   135e8:	0011      	movs	r1, r2
   135ea:	0018      	movs	r0, r3
   135ec:	4b06      	ldr	r3, [pc, #24]	; (13608 <gsm_responseLine_isRinging+0x2c>)
   135ee:	4798      	blx	r3
   135f0:	1e03      	subs	r3, r0, #0
   135f2:	d001      	beq.n	135f8 <gsm_responseLine_isRinging+0x1c>
	{
		return true;
   135f4:	2301      	movs	r3, #1
   135f6:	e000      	b.n	135fa <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
   135f8:	2300      	movs	r3, #0
	}
}
   135fa:	0018      	movs	r0, r3
   135fc:	46bd      	mov	sp, r7
   135fe:	b002      	add	sp, #8
   13600:	bd80      	pop	{r7, pc}
   13602:	46c0      	nop			; (mov r8, r8)
   13604:	0002a628 	.word	0x0002a628
   13608:	00029917 	.word	0x00029917

0001360c <gsm_responseLine_isCSQN>:

bool gsm_responseLine_isCSQN(char *response, volatile uint8_t *signal)
{
   1360c:	b580      	push	{r7, lr}
   1360e:	b084      	sub	sp, #16
   13610:	af00      	add	r7, sp, #0
   13612:	6078      	str	r0, [r7, #4]
   13614:	6039      	str	r1, [r7, #0]
//"+CSQN: 20,0"
	if(strstr(response,"+CSQN"))
   13616:	4a4c      	ldr	r2, [pc, #304]	; (13748 <gsm_responseLine_isCSQN+0x13c>)
   13618:	687b      	ldr	r3, [r7, #4]
   1361a:	0011      	movs	r1, r2
   1361c:	0018      	movs	r0, r3
   1361e:	4b4b      	ldr	r3, [pc, #300]	; (1374c <gsm_responseLine_isCSQN+0x140>)
   13620:	4798      	blx	r3
   13622:	1e03      	subs	r3, r0, #0
   13624:	d100      	bne.n	13628 <gsm_responseLine_isCSQN+0x1c>
   13626:	e089      	b.n	1373c <gsm_responseLine_isCSQN+0x130>
	{
		if (strstr(response,"99")==NULL)
   13628:	4a49      	ldr	r2, [pc, #292]	; (13750 <gsm_responseLine_isCSQN+0x144>)
   1362a:	687b      	ldr	r3, [r7, #4]
   1362c:	0011      	movs	r1, r2
   1362e:	0018      	movs	r0, r3
   13630:	4b46      	ldr	r3, [pc, #280]	; (1374c <gsm_responseLine_isCSQN+0x140>)
   13632:	4798      	blx	r3
   13634:	1e03      	subs	r3, r0, #0
   13636:	d000      	beq.n	1363a <gsm_responseLine_isCSQN+0x2e>
   13638:	e07b      	b.n	13732 <gsm_responseLine_isCSQN+0x126>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(response,":");
   1363a:	4a46      	ldr	r2, [pc, #280]	; (13754 <gsm_responseLine_isCSQN+0x148>)
   1363c:	687b      	ldr	r3, [r7, #4]
   1363e:	0011      	movs	r1, r2
   13640:	0018      	movs	r0, r3
   13642:	4b45      	ldr	r3, [pc, #276]	; (13758 <gsm_responseLine_isCSQN+0x14c>)
   13644:	4798      	blx	r3
   13646:	0003      	movs	r3, r0
   13648:	60fb      	str	r3, [r7, #12]
			ptr_tocken = strtok(NULL,":");
   1364a:	4b42      	ldr	r3, [pc, #264]	; (13754 <gsm_responseLine_isCSQN+0x148>)
   1364c:	0019      	movs	r1, r3
   1364e:	2000      	movs	r0, #0
   13650:	4b41      	ldr	r3, [pc, #260]	; (13758 <gsm_responseLine_isCSQN+0x14c>)
   13652:	4798      	blx	r3
   13654:	0003      	movs	r3, r0
   13656:	60fb      	str	r3, [r7, #12]
			ptr_tocken = strtok(ptr_tocken,",");
   13658:	4a40      	ldr	r2, [pc, #256]	; (1375c <gsm_responseLine_isCSQN+0x150>)
   1365a:	68fb      	ldr	r3, [r7, #12]
   1365c:	0011      	movs	r1, r2
   1365e:	0018      	movs	r0, r3
   13660:	4b3d      	ldr	r3, [pc, #244]	; (13758 <gsm_responseLine_isCSQN+0x14c>)
   13662:	4798      	blx	r3
   13664:	0003      	movs	r3, r0
   13666:	60fb      	str	r3, [r7, #12]
			//RemoveSpaces(ptr_tocken);
			uint8_t nw = atoi(ptr_tocken);
   13668:	68fb      	ldr	r3, [r7, #12]
   1366a:	0018      	movs	r0, r3
   1366c:	4b3c      	ldr	r3, [pc, #240]	; (13760 <gsm_responseLine_isCSQN+0x154>)
   1366e:	4798      	blx	r3
   13670:	0002      	movs	r2, r0
   13672:	230b      	movs	r3, #11
   13674:	18fb      	adds	r3, r7, r3
   13676:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
   13678:	230b      	movs	r3, #11
   1367a:	18fb      	adds	r3, r7, r3
   1367c:	781b      	ldrb	r3, [r3, #0]
   1367e:	2b00      	cmp	r3, #0
   13680:	d009      	beq.n	13696 <gsm_responseLine_isCSQN+0x8a>
   13682:	230b      	movs	r3, #11
   13684:	18fb      	adds	r3, r7, r3
   13686:	781b      	ldrb	r3, [r3, #0]
   13688:	2b01      	cmp	r3, #1
   1368a:	d004      	beq.n	13696 <gsm_responseLine_isCSQN+0x8a>
   1368c:	230b      	movs	r3, #11
   1368e:	18fb      	adds	r3, r7, r3
   13690:	781b      	ldrb	r3, [r3, #0]
   13692:	2b63      	cmp	r3, #99	; 0x63
   13694:	d103      	bne.n	1369e <gsm_responseLine_isCSQN+0x92>
			{
				*signal= 0;
   13696:	683b      	ldr	r3, [r7, #0]
   13698:	2200      	movs	r2, #0
   1369a:	701a      	strb	r2, [r3, #0]
   1369c:	e04c      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
			}
			else
			{
				if (nw>=2 && nw<=7)
   1369e:	230b      	movs	r3, #11
   136a0:	18fb      	adds	r3, r7, r3
   136a2:	781b      	ldrb	r3, [r3, #0]
   136a4:	2b01      	cmp	r3, #1
   136a6:	d908      	bls.n	136ba <gsm_responseLine_isCSQN+0xae>
   136a8:	230b      	movs	r3, #11
   136aa:	18fb      	adds	r3, r7, r3
   136ac:	781b      	ldrb	r3, [r3, #0]
   136ae:	2b07      	cmp	r3, #7
   136b0:	d803      	bhi.n	136ba <gsm_responseLine_isCSQN+0xae>
				{
					*signal= 1;
   136b2:	683b      	ldr	r3, [r7, #0]
   136b4:	2201      	movs	r2, #1
   136b6:	701a      	strb	r2, [r3, #0]
   136b8:	e03e      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=8 && nw<=13)
   136ba:	230b      	movs	r3, #11
   136bc:	18fb      	adds	r3, r7, r3
   136be:	781b      	ldrb	r3, [r3, #0]
   136c0:	2b07      	cmp	r3, #7
   136c2:	d908      	bls.n	136d6 <gsm_responseLine_isCSQN+0xca>
   136c4:	230b      	movs	r3, #11
   136c6:	18fb      	adds	r3, r7, r3
   136c8:	781b      	ldrb	r3, [r3, #0]
   136ca:	2b0d      	cmp	r3, #13
   136cc:	d803      	bhi.n	136d6 <gsm_responseLine_isCSQN+0xca>
				{
					*signal= 2;
   136ce:	683b      	ldr	r3, [r7, #0]
   136d0:	2202      	movs	r2, #2
   136d2:	701a      	strb	r2, [r3, #0]
   136d4:	e030      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=14 && nw<=19)
   136d6:	230b      	movs	r3, #11
   136d8:	18fb      	adds	r3, r7, r3
   136da:	781b      	ldrb	r3, [r3, #0]
   136dc:	2b0d      	cmp	r3, #13
   136de:	d908      	bls.n	136f2 <gsm_responseLine_isCSQN+0xe6>
   136e0:	230b      	movs	r3, #11
   136e2:	18fb      	adds	r3, r7, r3
   136e4:	781b      	ldrb	r3, [r3, #0]
   136e6:	2b13      	cmp	r3, #19
   136e8:	d803      	bhi.n	136f2 <gsm_responseLine_isCSQN+0xe6>
				{
					*signal= 3;
   136ea:	683b      	ldr	r3, [r7, #0]
   136ec:	2203      	movs	r2, #3
   136ee:	701a      	strb	r2, [r3, #0]
   136f0:	e022      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=20 && nw<=25)
   136f2:	230b      	movs	r3, #11
   136f4:	18fb      	adds	r3, r7, r3
   136f6:	781b      	ldrb	r3, [r3, #0]
   136f8:	2b13      	cmp	r3, #19
   136fa:	d908      	bls.n	1370e <gsm_responseLine_isCSQN+0x102>
   136fc:	230b      	movs	r3, #11
   136fe:	18fb      	adds	r3, r7, r3
   13700:	781b      	ldrb	r3, [r3, #0]
   13702:	2b19      	cmp	r3, #25
   13704:	d803      	bhi.n	1370e <gsm_responseLine_isCSQN+0x102>
				{
					*signal= 4;
   13706:	683b      	ldr	r3, [r7, #0]
   13708:	2204      	movs	r2, #4
   1370a:	701a      	strb	r2, [r3, #0]
   1370c:	e014      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
				else if (nw>=26 && nw<=31)
   1370e:	230b      	movs	r3, #11
   13710:	18fb      	adds	r3, r7, r3
   13712:	781b      	ldrb	r3, [r3, #0]
   13714:	2b19      	cmp	r3, #25
   13716:	d908      	bls.n	1372a <gsm_responseLine_isCSQN+0x11e>
   13718:	230b      	movs	r3, #11
   1371a:	18fb      	adds	r3, r7, r3
   1371c:	781b      	ldrb	r3, [r3, #0]
   1371e:	2b1f      	cmp	r3, #31
   13720:	d803      	bhi.n	1372a <gsm_responseLine_isCSQN+0x11e>
				{
					*signal= 5;
   13722:	683b      	ldr	r3, [r7, #0]
   13724:	2205      	movs	r2, #5
   13726:	701a      	strb	r2, [r3, #0]
   13728:	e006      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
				else
				{
					*signal= 0;
   1372a:	683b      	ldr	r3, [r7, #0]
   1372c:	2200      	movs	r2, #0
   1372e:	701a      	strb	r2, [r3, #0]
   13730:	e002      	b.n	13738 <gsm_responseLine_isCSQN+0x12c>
				}
			}
		}
		else
		{
			*signal= 0;
   13732:	683b      	ldr	r3, [r7, #0]
   13734:	2200      	movs	r2, #0
   13736:	701a      	strb	r2, [r3, #0]
		}
		return true;
   13738:	2301      	movs	r3, #1
   1373a:	e000      	b.n	1373e <gsm_responseLine_isCSQN+0x132>
	}
	
	return false;
   1373c:	2300      	movs	r3, #0
}
   1373e:	0018      	movs	r0, r3
   13740:	46bd      	mov	sp, r7
   13742:	b004      	add	sp, #16
   13744:	bd80      	pop	{r7, pc}
   13746:	46c0      	nop			; (mov r8, r8)
   13748:	0002a630 	.word	0x0002a630
   1374c:	00029917 	.word	0x00029917
   13750:	0002a490 	.word	0x0002a490
   13754:	0002a424 	.word	0x0002a424
   13758:	00029949 	.word	0x00029949
   1375c:	0002a428 	.word	0x0002a428
   13760:	0002953d 	.word	0x0002953d

00013764 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
   13764:	b580      	push	{r7, lr}
   13766:	b084      	sub	sp, #16
   13768:	af00      	add	r7, sp, #0
   1376a:	6078      	str	r0, [r7, #4]
   1376c:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
   1376e:	4a1e      	ldr	r2, [pc, #120]	; (137e8 <gsm_responseLine_get_IncommingCallNo+0x84>)
   13770:	687b      	ldr	r3, [r7, #4]
   13772:	0011      	movs	r1, r2
   13774:	0018      	movs	r0, r3
   13776:	4b1d      	ldr	r3, [pc, #116]	; (137ec <gsm_responseLine_get_IncommingCallNo+0x88>)
   13778:	4798      	blx	r3
   1377a:	1e03      	subs	r3, r0, #0
   1377c:	d02e      	beq.n	137dc <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,":");
   1377e:	4a1c      	ldr	r2, [pc, #112]	; (137f0 <gsm_responseLine_get_IncommingCallNo+0x8c>)
   13780:	687b      	ldr	r3, [r7, #4]
   13782:	0011      	movs	r1, r2
   13784:	0018      	movs	r0, r3
   13786:	4b1b      	ldr	r3, [pc, #108]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   13788:	4798      	blx	r3
   1378a:	0003      	movs	r3, r0
   1378c:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,",");
   1378e:	4b1a      	ldr	r3, [pc, #104]	; (137f8 <gsm_responseLine_get_IncommingCallNo+0x94>)
   13790:	0019      	movs	r1, r3
   13792:	2000      	movs	r0, #0
   13794:	4b17      	ldr	r3, [pc, #92]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   13796:	4798      	blx	r3
   13798:	0003      	movs	r3, r0
   1379a:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(ptr_tocken,"\"");
   1379c:	4a17      	ldr	r2, [pc, #92]	; (137fc <gsm_responseLine_get_IncommingCallNo+0x98>)
   1379e:	68fb      	ldr	r3, [r7, #12]
   137a0:	0011      	movs	r1, r2
   137a2:	0018      	movs	r0, r3
   137a4:	4b13      	ldr	r3, [pc, #76]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   137a6:	4798      	blx	r3
   137a8:	0003      	movs	r3, r0
   137aa:	60fb      	str	r3, [r7, #12]
		ptr_tocken = strtok(NULL,"\"");
   137ac:	4b13      	ldr	r3, [pc, #76]	; (137fc <gsm_responseLine_get_IncommingCallNo+0x98>)
   137ae:	0019      	movs	r1, r3
   137b0:	2000      	movs	r0, #0
   137b2:	4b10      	ldr	r3, [pc, #64]	; (137f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
   137b4:	4798      	blx	r3
   137b6:	0003      	movs	r3, r0
   137b8:	60fb      	str	r3, [r7, #12]
		
		if (!strstr(ptr_tocken,"+"))
   137ba:	68fb      	ldr	r3, [r7, #12]
   137bc:	212b      	movs	r1, #43	; 0x2b
   137be:	0018      	movs	r0, r3
   137c0:	4b0f      	ldr	r3, [pc, #60]	; (13800 <gsm_responseLine_get_IncommingCallNo+0x9c>)
   137c2:	4798      	blx	r3
   137c4:	1e03      	subs	r3, r0, #0
   137c6:	d101      	bne.n	137cc <gsm_responseLine_get_IncommingCallNo+0x68>
		{
			return false;
   137c8:	2300      	movs	r3, #0
   137ca:	e008      	b.n	137de <gsm_responseLine_get_IncommingCallNo+0x7a>
		}
		strcpy(phone_number, (char *)(ptr_tocken));
   137cc:	68fa      	ldr	r2, [r7, #12]
   137ce:	683b      	ldr	r3, [r7, #0]
   137d0:	0011      	movs	r1, r2
   137d2:	0018      	movs	r0, r3
   137d4:	4b0b      	ldr	r3, [pc, #44]	; (13804 <gsm_responseLine_get_IncommingCallNo+0xa0>)
   137d6:	4798      	blx	r3
		return true;
   137d8:	2301      	movs	r3, #1
   137da:	e000      	b.n	137de <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
   137dc:	2300      	movs	r3, #0
	}
}
   137de:	0018      	movs	r0, r3
   137e0:	46bd      	mov	sp, r7
   137e2:	b004      	add	sp, #16
   137e4:	bd80      	pop	{r7, pc}
   137e6:	46c0      	nop			; (mov r8, r8)
   137e8:	0002a638 	.word	0x0002a638
   137ec:	00029917 	.word	0x00029917
   137f0:	0002a424 	.word	0x0002a424
   137f4:	00029949 	.word	0x00029949
   137f8:	0002a428 	.word	0x0002a428
   137fc:	0002a614 	.word	0x0002a614
   13800:	000298bb 	.word	0x000298bb
   13804:	000298d7 	.word	0x000298d7

00013808 <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
   13808:	b580      	push	{r7, lr}
   1380a:	b082      	sub	sp, #8
   1380c:	af00      	add	r7, sp, #0
   1380e:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
   13810:	4a16      	ldr	r2, [pc, #88]	; (1386c <gsm_responseLine_isCallCut+0x64>)
   13812:	687b      	ldr	r3, [r7, #4]
   13814:	0011      	movs	r1, r2
   13816:	0018      	movs	r0, r3
   13818:	4b15      	ldr	r3, [pc, #84]	; (13870 <gsm_responseLine_isCallCut+0x68>)
   1381a:	4798      	blx	r3
   1381c:	1e03      	subs	r3, r0, #0
   1381e:	d001      	beq.n	13824 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
   13820:	2301      	movs	r3, #1
   13822:	e01e      	b.n	13862 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
   13824:	4a13      	ldr	r2, [pc, #76]	; (13874 <gsm_responseLine_isCallCut+0x6c>)
   13826:	687b      	ldr	r3, [r7, #4]
   13828:	0011      	movs	r1, r2
   1382a:	0018      	movs	r0, r3
   1382c:	4b10      	ldr	r3, [pc, #64]	; (13870 <gsm_responseLine_isCallCut+0x68>)
   1382e:	4798      	blx	r3
   13830:	1e03      	subs	r3, r0, #0
   13832:	d001      	beq.n	13838 <gsm_responseLine_isCallCut+0x30>
	{
		return true;
   13834:	2301      	movs	r3, #1
   13836:	e014      	b.n	13862 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
   13838:	4a0f      	ldr	r2, [pc, #60]	; (13878 <gsm_responseLine_isCallCut+0x70>)
   1383a:	687b      	ldr	r3, [r7, #4]
   1383c:	0011      	movs	r1, r2
   1383e:	0018      	movs	r0, r3
   13840:	4b0b      	ldr	r3, [pc, #44]	; (13870 <gsm_responseLine_isCallCut+0x68>)
   13842:	4798      	blx	r3
   13844:	1e03      	subs	r3, r0, #0
   13846:	d001      	beq.n	1384c <gsm_responseLine_isCallCut+0x44>
	{
		return true;
   13848:	2301      	movs	r3, #1
   1384a:	e00a      	b.n	13862 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
   1384c:	4a0b      	ldr	r2, [pc, #44]	; (1387c <gsm_responseLine_isCallCut+0x74>)
   1384e:	687b      	ldr	r3, [r7, #4]
   13850:	0011      	movs	r1, r2
   13852:	0018      	movs	r0, r3
   13854:	4b06      	ldr	r3, [pc, #24]	; (13870 <gsm_responseLine_isCallCut+0x68>)
   13856:	4798      	blx	r3
   13858:	1e03      	subs	r3, r0, #0
   1385a:	d001      	beq.n	13860 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
   1385c:	2301      	movs	r3, #1
   1385e:	e000      	b.n	13862 <gsm_responseLine_isCallCut+0x5a>
	}

	return false;
   13860:	2300      	movs	r3, #0
}
   13862:	0018      	movs	r0, r3
   13864:	46bd      	mov	sp, r7
   13866:	b002      	add	sp, #8
   13868:	bd80      	pop	{r7, pc}
   1386a:	46c0      	nop			; (mov r8, r8)
   1386c:	0002a640 	.word	0x0002a640
   13870:	00029917 	.word	0x00029917
   13874:	0002a64c 	.word	0x0002a64c
   13878:	0002a654 	.word	0x0002a654
   1387c:	0002a304 	.word	0x0002a304

00013880 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
   13880:	b580      	push	{r7, lr}
   13882:	b082      	sub	sp, #8
   13884:	af00      	add	r7, sp, #0
   13886:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
   13888:	4a07      	ldr	r2, [pc, #28]	; (138a8 <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
   1388a:	687b      	ldr	r3, [r7, #4]
   1388c:	0011      	movs	r1, r2
   1388e:	0018      	movs	r0, r3
   13890:	4b06      	ldr	r3, [pc, #24]	; (138ac <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
   13892:	4798      	blx	r3
   13894:	1e03      	subs	r3, r0, #0
   13896:	d001      	beq.n	1389c <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
   13898:	2301      	movs	r3, #1
   1389a:	e000      	b.n	1389e <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
   1389c:	2300      	movs	r3, #0
	}
}
   1389e:	0018      	movs	r0, r3
   138a0:	46bd      	mov	sp, r7
   138a2:	b002      	add	sp, #8
   138a4:	bd80      	pop	{r7, pc}
   138a6:	46c0      	nop			; (mov r8, r8)
   138a8:	0002a660 	.word	0x0002a660
   138ac:	00029917 	.word	0x00029917

000138b0 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
   138b0:	b580      	push	{r7, lr}
   138b2:	b082      	sub	sp, #8
   138b4:	af00      	add	r7, sp, #0
   138b6:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
   138b8:	4a07      	ldr	r2, [pc, #28]	; (138d8 <gsm_responseLine_is_StopSound_Received+0x28>)
   138ba:	687b      	ldr	r3, [r7, #4]
   138bc:	0011      	movs	r1, r2
   138be:	0018      	movs	r0, r3
   138c0:	4b06      	ldr	r3, [pc, #24]	; (138dc <gsm_responseLine_is_StopSound_Received+0x2c>)
   138c2:	4798      	blx	r3
   138c4:	1e03      	subs	r3, r0, #0
   138c6:	d001      	beq.n	138cc <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
   138c8:	2301      	movs	r3, #1
   138ca:	e000      	b.n	138ce <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
   138cc:	2300      	movs	r3, #0
	}
}
   138ce:	0018      	movs	r0, r3
   138d0:	46bd      	mov	sp, r7
   138d2:	b002      	add	sp, #8
   138d4:	bd80      	pop	{r7, pc}
   138d6:	46c0      	nop			; (mov r8, r8)
   138d8:	0002a668 	.word	0x0002a668
   138dc:	00029917 	.word	0x00029917

000138e0 <system_pinmux_get_group_from_gpio_pin>:
{
   138e0:	b580      	push	{r7, lr}
   138e2:	b084      	sub	sp, #16
   138e4:	af00      	add	r7, sp, #0
   138e6:	0002      	movs	r2, r0
   138e8:	1dfb      	adds	r3, r7, #7
   138ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   138ec:	230f      	movs	r3, #15
   138ee:	18fb      	adds	r3, r7, r3
   138f0:	1dfa      	adds	r2, r7, #7
   138f2:	7812      	ldrb	r2, [r2, #0]
   138f4:	09d2      	lsrs	r2, r2, #7
   138f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   138f8:	230e      	movs	r3, #14
   138fa:	18fb      	adds	r3, r7, r3
   138fc:	1dfa      	adds	r2, r7, #7
   138fe:	7812      	ldrb	r2, [r2, #0]
   13900:	0952      	lsrs	r2, r2, #5
   13902:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13904:	4b0d      	ldr	r3, [pc, #52]	; (1393c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13906:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13908:	230f      	movs	r3, #15
   1390a:	18fb      	adds	r3, r7, r3
   1390c:	781b      	ldrb	r3, [r3, #0]
   1390e:	2b00      	cmp	r3, #0
   13910:	d10f      	bne.n	13932 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13912:	230f      	movs	r3, #15
   13914:	18fb      	adds	r3, r7, r3
   13916:	781b      	ldrb	r3, [r3, #0]
   13918:	009b      	lsls	r3, r3, #2
   1391a:	2210      	movs	r2, #16
   1391c:	4694      	mov	ip, r2
   1391e:	44bc      	add	ip, r7
   13920:	4463      	add	r3, ip
   13922:	3b08      	subs	r3, #8
   13924:	681a      	ldr	r2, [r3, #0]
   13926:	230e      	movs	r3, #14
   13928:	18fb      	adds	r3, r7, r3
   1392a:	781b      	ldrb	r3, [r3, #0]
   1392c:	01db      	lsls	r3, r3, #7
   1392e:	18d3      	adds	r3, r2, r3
   13930:	e000      	b.n	13934 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13932:	2300      	movs	r3, #0
}
   13934:	0018      	movs	r0, r3
   13936:	46bd      	mov	sp, r7
   13938:	b004      	add	sp, #16
   1393a:	bd80      	pop	{r7, pc}
   1393c:	41004400 	.word	0x41004400

00013940 <port_get_group_from_gpio_pin>:
{
   13940:	b580      	push	{r7, lr}
   13942:	b082      	sub	sp, #8
   13944:	af00      	add	r7, sp, #0
   13946:	0002      	movs	r2, r0
   13948:	1dfb      	adds	r3, r7, #7
   1394a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1394c:	1dfb      	adds	r3, r7, #7
   1394e:	781b      	ldrb	r3, [r3, #0]
   13950:	0018      	movs	r0, r3
   13952:	4b03      	ldr	r3, [pc, #12]	; (13960 <port_get_group_from_gpio_pin+0x20>)
   13954:	4798      	blx	r3
   13956:	0003      	movs	r3, r0
}
   13958:	0018      	movs	r0, r3
   1395a:	46bd      	mov	sp, r7
   1395c:	b002      	add	sp, #8
   1395e:	bd80      	pop	{r7, pc}
   13960:	000138e1 	.word	0x000138e1

00013964 <port_get_config_defaults>:
{
   13964:	b580      	push	{r7, lr}
   13966:	b082      	sub	sp, #8
   13968:	af00      	add	r7, sp, #0
   1396a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1396c:	687b      	ldr	r3, [r7, #4]
   1396e:	2200      	movs	r2, #0
   13970:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   13972:	687b      	ldr	r3, [r7, #4]
   13974:	2201      	movs	r2, #1
   13976:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   13978:	687b      	ldr	r3, [r7, #4]
   1397a:	2200      	movs	r2, #0
   1397c:	709a      	strb	r2, [r3, #2]
}
   1397e:	46c0      	nop			; (mov r8, r8)
   13980:	46bd      	mov	sp, r7
   13982:	b002      	add	sp, #8
   13984:	bd80      	pop	{r7, pc}
	...

00013988 <port_pin_set_output_level>:
{
   13988:	b580      	push	{r7, lr}
   1398a:	b084      	sub	sp, #16
   1398c:	af00      	add	r7, sp, #0
   1398e:	0002      	movs	r2, r0
   13990:	1dfb      	adds	r3, r7, #7
   13992:	701a      	strb	r2, [r3, #0]
   13994:	1dbb      	adds	r3, r7, #6
   13996:	1c0a      	adds	r2, r1, #0
   13998:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1399a:	1dfb      	adds	r3, r7, #7
   1399c:	781b      	ldrb	r3, [r3, #0]
   1399e:	0018      	movs	r0, r3
   139a0:	4b0d      	ldr	r3, [pc, #52]	; (139d8 <port_pin_set_output_level+0x50>)
   139a2:	4798      	blx	r3
   139a4:	0003      	movs	r3, r0
   139a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   139a8:	1dfb      	adds	r3, r7, #7
   139aa:	781b      	ldrb	r3, [r3, #0]
   139ac:	221f      	movs	r2, #31
   139ae:	4013      	ands	r3, r2
   139b0:	2201      	movs	r2, #1
   139b2:	409a      	lsls	r2, r3
   139b4:	0013      	movs	r3, r2
   139b6:	60bb      	str	r3, [r7, #8]
	if (level) {
   139b8:	1dbb      	adds	r3, r7, #6
   139ba:	781b      	ldrb	r3, [r3, #0]
   139bc:	2b00      	cmp	r3, #0
   139be:	d003      	beq.n	139c8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   139c0:	68fb      	ldr	r3, [r7, #12]
   139c2:	68ba      	ldr	r2, [r7, #8]
   139c4:	619a      	str	r2, [r3, #24]
}
   139c6:	e002      	b.n	139ce <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   139c8:	68fb      	ldr	r3, [r7, #12]
   139ca:	68ba      	ldr	r2, [r7, #8]
   139cc:	615a      	str	r2, [r3, #20]
}
   139ce:	46c0      	nop			; (mov r8, r8)
   139d0:	46bd      	mov	sp, r7
   139d2:	b004      	add	sp, #16
   139d4:	bd80      	pop	{r7, pc}
   139d6:	46c0      	nop			; (mov r8, r8)
   139d8:	00013941 	.word	0x00013941

000139dc <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
   139dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   139de:	b08b      	sub	sp, #44	; 0x2c
   139e0:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
   139e2:	230b      	movs	r3, #11
   139e4:	2218      	movs	r2, #24
   139e6:	4694      	mov	ip, r2
   139e8:	44bc      	add	ip, r7
   139ea:	4463      	add	r3, ip
   139ec:	2210      	movs	r2, #16
   139ee:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
   139f0:	230a      	movs	r3, #10
   139f2:	2218      	movs	r2, #24
   139f4:	4694      	mov	ip, r2
   139f6:	44bc      	add	ip, r7
   139f8:	4463      	add	r3, ip
   139fa:	2202      	movs	r2, #2
   139fc:	701a      	strb	r2, [r3, #0]
	delay_init();
   139fe:	4b90      	ldr	r3, [pc, #576]	; (13c40 <LCD_init+0x264>)
   13a00:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
   13a02:	4b90      	ldr	r3, [pc, #576]	; (13c44 <LCD_init+0x268>)
   13a04:	223f      	movs	r2, #63	; 0x3f
   13a06:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
   13a08:	4b8f      	ldr	r3, [pc, #572]	; (13c48 <LCD_init+0x26c>)
   13a0a:	223e      	movs	r2, #62	; 0x3e
   13a0c:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
   13a0e:	4b8f      	ldr	r3, [pc, #572]	; (13c4c <LCD_init+0x270>)
   13a10:	2221      	movs	r2, #33	; 0x21
   13a12:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
   13a14:	4b8d      	ldr	r3, [pc, #564]	; (13c4c <LCD_init+0x270>)
   13a16:	2220      	movs	r2, #32
   13a18:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
   13a1a:	4b8c      	ldr	r3, [pc, #560]	; (13c4c <LCD_init+0x270>)
   13a1c:	2223      	movs	r2, #35	; 0x23
   13a1e:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
   13a20:	4b8a      	ldr	r3, [pc, #552]	; (13c4c <LCD_init+0x270>)
   13a22:	2222      	movs	r2, #34	; 0x22
   13a24:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   13a26:	4b8a      	ldr	r3, [pc, #552]	; (13c50 <LCD_init+0x274>)
   13a28:	2200      	movs	r2, #0
   13a2a:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
   13a2c:	230a      	movs	r3, #10
   13a2e:	2218      	movs	r2, #24
   13a30:	4694      	mov	ip, r2
   13a32:	44bc      	add	ip, r7
   13a34:	4463      	add	r3, ip
   13a36:	781b      	ldrb	r3, [r3, #0]
   13a38:	2b01      	cmp	r3, #1
   13a3a:	d906      	bls.n	13a4a <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
   13a3c:	4b84      	ldr	r3, [pc, #528]	; (13c50 <LCD_init+0x274>)
   13a3e:	781b      	ldrb	r3, [r3, #0]
   13a40:	2208      	movs	r2, #8
   13a42:	4313      	orrs	r3, r2
   13a44:	b2da      	uxtb	r2, r3
   13a46:	4b82      	ldr	r3, [pc, #520]	; (13c50 <LCD_init+0x274>)
   13a48:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
   13a4a:	4b82      	ldr	r3, [pc, #520]	; (13c54 <LCD_init+0x278>)
   13a4c:	220a      	movs	r2, #10
   13a4e:	2118      	movs	r1, #24
   13a50:	468c      	mov	ip, r1
   13a52:	44bc      	add	ip, r7
   13a54:	4462      	add	r2, ip
   13a56:	7812      	ldrb	r2, [r2, #0]
   13a58:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
   13a5a:	230b      	movs	r3, #11
   13a5c:	2218      	movs	r2, #24
   13a5e:	4694      	mov	ip, r2
   13a60:	44bc      	add	ip, r7
   13a62:	4463      	add	r3, ip
   13a64:	781a      	ldrb	r2, [r3, #0]
   13a66:	230b      	movs	r3, #11
   13a68:	2118      	movs	r1, #24
   13a6a:	468c      	mov	ip, r1
   13a6c:	44bc      	add	ip, r7
   13a6e:	4463      	add	r3, ip
   13a70:	781b      	ldrb	r3, [r3, #0]
   13a72:	3340      	adds	r3, #64	; 0x40
   13a74:	2140      	movs	r1, #64	; 0x40
   13a76:	2000      	movs	r0, #0
   13a78:	4c77      	ldr	r4, [pc, #476]	; (13c58 <LCD_init+0x27c>)
   13a7a:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   13a7c:	231c      	movs	r3, #28
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	0018      	movs	r0, r3
   13a82:	4b76      	ldr	r3, [pc, #472]	; (13c5c <LCD_init+0x280>)
   13a84:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   13a86:	231c      	movs	r3, #28
   13a88:	18fb      	adds	r3, r7, r3
   13a8a:	2201      	movs	r2, #1
   13a8c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
   13a8e:	4b6d      	ldr	r3, [pc, #436]	; (13c44 <LCD_init+0x268>)
   13a90:	781b      	ldrb	r3, [r3, #0]
   13a92:	221c      	movs	r2, #28
   13a94:	18ba      	adds	r2, r7, r2
   13a96:	0011      	movs	r1, r2
   13a98:	0018      	movs	r0, r3
   13a9a:	4b71      	ldr	r3, [pc, #452]	; (13c60 <LCD_init+0x284>)
   13a9c:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
   13a9e:	4b6a      	ldr	r3, [pc, #424]	; (13c48 <LCD_init+0x26c>)
   13aa0:	781b      	ldrb	r3, [r3, #0]
   13aa2:	221c      	movs	r2, #28
   13aa4:	18ba      	adds	r2, r7, r2
   13aa6:	0011      	movs	r1, r2
   13aa8:	0018      	movs	r0, r3
   13aaa:	4b6d      	ldr	r3, [pc, #436]	; (13c60 <LCD_init+0x284>)
   13aac:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
   13aae:	2300      	movs	r3, #0
   13ab0:	627b      	str	r3, [r7, #36]	; 0x24
   13ab2:	e00c      	b.n	13ace <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
   13ab4:	4a65      	ldr	r2, [pc, #404]	; (13c4c <LCD_init+0x270>)
   13ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ab8:	18d3      	adds	r3, r2, r3
   13aba:	781b      	ldrb	r3, [r3, #0]
   13abc:	221c      	movs	r2, #28
   13abe:	18ba      	adds	r2, r7, r2
   13ac0:	0011      	movs	r1, r2
   13ac2:	0018      	movs	r0, r3
   13ac4:	4b66      	ldr	r3, [pc, #408]	; (13c60 <LCD_init+0x284>)
   13ac6:	4798      	blx	r3
	for (int i=0; i<4; ++i)
   13ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13aca:	3301      	adds	r3, #1
   13acc:	627b      	str	r3, [r7, #36]	; 0x24
   13ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ad0:	2b03      	cmp	r3, #3
   13ad2:	ddef      	ble.n	13ab4 <LCD_init+0xd8>
	}
	delay_us(50000);
   13ad4:	2000      	movs	r0, #0
   13ad6:	4b63      	ldr	r3, [pc, #396]	; (13c64 <LCD_init+0x288>)
   13ad8:	4798      	blx	r3
   13ada:	0003      	movs	r3, r0
   13adc:	613b      	str	r3, [r7, #16]
   13ade:	2300      	movs	r3, #0
   13ae0:	617b      	str	r3, [r7, #20]
   13ae2:	4c61      	ldr	r4, [pc, #388]	; (13c68 <LCD_init+0x28c>)
   13ae4:	4a61      	ldr	r2, [pc, #388]	; (13c6c <LCD_init+0x290>)
   13ae6:	2300      	movs	r3, #0
   13ae8:	6938      	ldr	r0, [r7, #16]
   13aea:	6979      	ldr	r1, [r7, #20]
   13aec:	47a0      	blx	r4
   13aee:	0003      	movs	r3, r0
   13af0:	000c      	movs	r4, r1
   13af2:	0019      	movs	r1, r3
   13af4:	0022      	movs	r2, r4
   13af6:	4b5e      	ldr	r3, [pc, #376]	; (13c70 <LCD_init+0x294>)
   13af8:	2400      	movs	r4, #0
   13afa:	18c9      	adds	r1, r1, r3
   13afc:	4162      	adcs	r2, r4
   13afe:	0008      	movs	r0, r1
   13b00:	0011      	movs	r1, r2
   13b02:	4c5c      	ldr	r4, [pc, #368]	; (13c74 <LCD_init+0x298>)
   13b04:	4a5c      	ldr	r2, [pc, #368]	; (13c78 <LCD_init+0x29c>)
   13b06:	2300      	movs	r3, #0
   13b08:	47a0      	blx	r4
   13b0a:	0003      	movs	r3, r0
   13b0c:	000c      	movs	r4, r1
   13b0e:	0018      	movs	r0, r3
   13b10:	4b5a      	ldr	r3, [pc, #360]	; (13c7c <LCD_init+0x2a0>)
   13b12:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
   13b14:	4b4b      	ldr	r3, [pc, #300]	; (13c44 <LCD_init+0x268>)
   13b16:	781b      	ldrb	r3, [r3, #0]
   13b18:	2100      	movs	r1, #0
   13b1a:	0018      	movs	r0, r3
   13b1c:	4b58      	ldr	r3, [pc, #352]	; (13c80 <LCD_init+0x2a4>)
   13b1e:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
   13b20:	4b49      	ldr	r3, [pc, #292]	; (13c48 <LCD_init+0x26c>)
   13b22:	781b      	ldrb	r3, [r3, #0]
   13b24:	2100      	movs	r1, #0
   13b26:	0018      	movs	r0, r3
   13b28:	4b55      	ldr	r3, [pc, #340]	; (13c80 <LCD_init+0x2a4>)
   13b2a:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
   13b2c:	2003      	movs	r0, #3
   13b2e:	4b55      	ldr	r3, [pc, #340]	; (13c84 <LCD_init+0x2a8>)
   13b30:	4798      	blx	r3
	 delay_us(4500); 
   13b32:	2000      	movs	r0, #0
   13b34:	4b4b      	ldr	r3, [pc, #300]	; (13c64 <LCD_init+0x288>)
   13b36:	4798      	blx	r3
   13b38:	0003      	movs	r3, r0
   13b3a:	60bb      	str	r3, [r7, #8]
   13b3c:	2300      	movs	r3, #0
   13b3e:	60fb      	str	r3, [r7, #12]
   13b40:	4c49      	ldr	r4, [pc, #292]	; (13c68 <LCD_init+0x28c>)
   13b42:	4a51      	ldr	r2, [pc, #324]	; (13c88 <LCD_init+0x2ac>)
   13b44:	2300      	movs	r3, #0
   13b46:	68b8      	ldr	r0, [r7, #8]
   13b48:	68f9      	ldr	r1, [r7, #12]
   13b4a:	47a0      	blx	r4
   13b4c:	0003      	movs	r3, r0
   13b4e:	000c      	movs	r4, r1
   13b50:	0019      	movs	r1, r3
   13b52:	0022      	movs	r2, r4
   13b54:	4b46      	ldr	r3, [pc, #280]	; (13c70 <LCD_init+0x294>)
   13b56:	2400      	movs	r4, #0
   13b58:	18c9      	adds	r1, r1, r3
   13b5a:	4162      	adcs	r2, r4
   13b5c:	0008      	movs	r0, r1
   13b5e:	0011      	movs	r1, r2
   13b60:	4c44      	ldr	r4, [pc, #272]	; (13c74 <LCD_init+0x298>)
   13b62:	4a45      	ldr	r2, [pc, #276]	; (13c78 <LCD_init+0x29c>)
   13b64:	2300      	movs	r3, #0
   13b66:	47a0      	blx	r4
   13b68:	0003      	movs	r3, r0
   13b6a:	000c      	movs	r4, r1
   13b6c:	0018      	movs	r0, r3
   13b6e:	4b43      	ldr	r3, [pc, #268]	; (13c7c <LCD_init+0x2a0>)
   13b70:	4798      	blx	r3
	 
	 write4bits(0x03);
   13b72:	2003      	movs	r0, #3
   13b74:	4b43      	ldr	r3, [pc, #268]	; (13c84 <LCD_init+0x2a8>)
   13b76:	4798      	blx	r3
	 delay_us(4500); 
   13b78:	2000      	movs	r0, #0
   13b7a:	4b3a      	ldr	r3, [pc, #232]	; (13c64 <LCD_init+0x288>)
   13b7c:	4798      	blx	r3
   13b7e:	0003      	movs	r3, r0
   13b80:	603b      	str	r3, [r7, #0]
   13b82:	2300      	movs	r3, #0
   13b84:	607b      	str	r3, [r7, #4]
   13b86:	4c38      	ldr	r4, [pc, #224]	; (13c68 <LCD_init+0x28c>)
   13b88:	4a3f      	ldr	r2, [pc, #252]	; (13c88 <LCD_init+0x2ac>)
   13b8a:	2300      	movs	r3, #0
   13b8c:	6838      	ldr	r0, [r7, #0]
   13b8e:	6879      	ldr	r1, [r7, #4]
   13b90:	47a0      	blx	r4
   13b92:	0003      	movs	r3, r0
   13b94:	000c      	movs	r4, r1
   13b96:	0019      	movs	r1, r3
   13b98:	0022      	movs	r2, r4
   13b9a:	4b35      	ldr	r3, [pc, #212]	; (13c70 <LCD_init+0x294>)
   13b9c:	2400      	movs	r4, #0
   13b9e:	18c9      	adds	r1, r1, r3
   13ba0:	4162      	adcs	r2, r4
   13ba2:	0008      	movs	r0, r1
   13ba4:	0011      	movs	r1, r2
   13ba6:	4c33      	ldr	r4, [pc, #204]	; (13c74 <LCD_init+0x298>)
   13ba8:	4a33      	ldr	r2, [pc, #204]	; (13c78 <LCD_init+0x29c>)
   13baa:	2300      	movs	r3, #0
   13bac:	47a0      	blx	r4
   13bae:	0003      	movs	r3, r0
   13bb0:	000c      	movs	r4, r1
   13bb2:	0018      	movs	r0, r3
   13bb4:	4b31      	ldr	r3, [pc, #196]	; (13c7c <LCD_init+0x2a0>)
   13bb6:	4798      	blx	r3
	
	 write4bits(0x03);
   13bb8:	2003      	movs	r0, #3
   13bba:	4b32      	ldr	r3, [pc, #200]	; (13c84 <LCD_init+0x2a8>)
   13bbc:	4798      	blx	r3
	 delay_us(150);
   13bbe:	2000      	movs	r0, #0
   13bc0:	4b28      	ldr	r3, [pc, #160]	; (13c64 <LCD_init+0x288>)
   13bc2:	4798      	blx	r3
   13bc4:	0003      	movs	r3, r0
   13bc6:	001d      	movs	r5, r3
   13bc8:	2300      	movs	r3, #0
   13bca:	001e      	movs	r6, r3
   13bcc:	4c26      	ldr	r4, [pc, #152]	; (13c68 <LCD_init+0x28c>)
   13bce:	2296      	movs	r2, #150	; 0x96
   13bd0:	2300      	movs	r3, #0
   13bd2:	0028      	movs	r0, r5
   13bd4:	0031      	movs	r1, r6
   13bd6:	47a0      	blx	r4
   13bd8:	0003      	movs	r3, r0
   13bda:	000c      	movs	r4, r1
   13bdc:	0019      	movs	r1, r3
   13bde:	0022      	movs	r2, r4
   13be0:	4b23      	ldr	r3, [pc, #140]	; (13c70 <LCD_init+0x294>)
   13be2:	2400      	movs	r4, #0
   13be4:	18c9      	adds	r1, r1, r3
   13be6:	4162      	adcs	r2, r4
   13be8:	0008      	movs	r0, r1
   13bea:	0011      	movs	r1, r2
   13bec:	4c21      	ldr	r4, [pc, #132]	; (13c74 <LCD_init+0x298>)
   13bee:	4a22      	ldr	r2, [pc, #136]	; (13c78 <LCD_init+0x29c>)
   13bf0:	2300      	movs	r3, #0
   13bf2:	47a0      	blx	r4
   13bf4:	0003      	movs	r3, r0
   13bf6:	000c      	movs	r4, r1
   13bf8:	0018      	movs	r0, r3
   13bfa:	4b20      	ldr	r3, [pc, #128]	; (13c7c <LCD_init+0x2a0>)
   13bfc:	4798      	blx	r3

	 write4bits(0x02);
   13bfe:	2002      	movs	r0, #2
   13c00:	4b20      	ldr	r3, [pc, #128]	; (13c84 <LCD_init+0x2a8>)
   13c02:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
   13c04:	4b12      	ldr	r3, [pc, #72]	; (13c50 <LCD_init+0x274>)
   13c06:	781b      	ldrb	r3, [r3, #0]
   13c08:	2220      	movs	r2, #32
   13c0a:	4313      	orrs	r3, r2
   13c0c:	b2db      	uxtb	r3, r3
   13c0e:	0018      	movs	r0, r3
   13c10:	4b1e      	ldr	r3, [pc, #120]	; (13c8c <LCD_init+0x2b0>)
   13c12:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
   13c14:	4b1e      	ldr	r3, [pc, #120]	; (13c90 <LCD_init+0x2b4>)
   13c16:	2204      	movs	r2, #4
   13c18:	701a      	strb	r2, [r3, #0]
	LCD_display();
   13c1a:	4b1e      	ldr	r3, [pc, #120]	; (13c94 <LCD_init+0x2b8>)
   13c1c:	4798      	blx	r3
	LCD_clear();
   13c1e:	4b1e      	ldr	r3, [pc, #120]	; (13c98 <LCD_init+0x2bc>)
   13c20:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
   13c22:	4b1e      	ldr	r3, [pc, #120]	; (13c9c <LCD_init+0x2c0>)
   13c24:	2202      	movs	r2, #2
   13c26:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
   13c28:	4b1c      	ldr	r3, [pc, #112]	; (13c9c <LCD_init+0x2c0>)
   13c2a:	781b      	ldrb	r3, [r3, #0]
   13c2c:	2204      	movs	r2, #4
   13c2e:	4313      	orrs	r3, r2
   13c30:	b2db      	uxtb	r3, r3
   13c32:	0018      	movs	r0, r3
   13c34:	4b15      	ldr	r3, [pc, #84]	; (13c8c <LCD_init+0x2b0>)
   13c36:	4798      	blx	r3
}
   13c38:	46c0      	nop			; (mov r8, r8)
   13c3a:	46bd      	mov	sp, r7
   13c3c:	b00b      	add	sp, #44	; 0x2c
   13c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c40:	0002317d 	.word	0x0002317d
   13c44:	200008e0 	.word	0x200008e0
   13c48:	200008df 	.word	0x200008df
   13c4c:	200008d8 	.word	0x200008d8
   13c50:	200008dd 	.word	0x200008dd
   13c54:	200008d6 	.word	0x200008d6
   13c58:	00013d4d 	.word	0x00013d4d
   13c5c:	00013965 	.word	0x00013965
   13c60:	000237d1 	.word	0x000237d1
   13c64:	0002513d 	.word	0x0002513d
   13c68:	00027189 	.word	0x00027189
   13c6c:	0000c350 	.word	0x0000c350
   13c70:	006acfbf 	.word	0x006acfbf
   13c74:	00027149 	.word	0x00027149
   13c78:	006acfc0 	.word	0x006acfc0
   13c7c:	20000001 	.word	0x20000001
   13c80:	00013989 	.word	0x00013989
   13c84:	00013d89 	.word	0x00013d89
   13c88:	00001194 	.word	0x00001194
   13c8c:	00013ecd 	.word	0x00013ecd
   13c90:	200008d5 	.word	0x200008d5
   13c94:	000140b5 	.word	0x000140b5
   13c98:	00013f6d 	.word	0x00013f6d
   13c9c:	200008dc 	.word	0x200008dc

00013ca0 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
   13ca0:	b580      	push	{r7, lr}
   13ca2:	b082      	sub	sp, #8
   13ca4:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   13ca6:	1d3b      	adds	r3, r7, #4
   13ca8:	0018      	movs	r0, r3
   13caa:	4b08      	ldr	r3, [pc, #32]	; (13ccc <LCD_PWR_CONFIG+0x2c>)
   13cac:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
   13cae:	1d3b      	adds	r3, r7, #4
   13cb0:	2201      	movs	r2, #1
   13cb2:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   13cb4:	1d3b      	adds	r3, r7, #4
   13cb6:	2200      	movs	r2, #0
   13cb8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
   13cba:	1d3b      	adds	r3, r7, #4
   13cbc:	0019      	movs	r1, r3
   13cbe:	2024      	movs	r0, #36	; 0x24
   13cc0:	4b03      	ldr	r3, [pc, #12]	; (13cd0 <LCD_PWR_CONFIG+0x30>)
   13cc2:	4798      	blx	r3
}
   13cc4:	46c0      	nop			; (mov r8, r8)
   13cc6:	46bd      	mov	sp, r7
   13cc8:	b002      	add	sp, #8
   13cca:	bd80      	pop	{r7, pc}
   13ccc:	00013965 	.word	0x00013965
   13cd0:	000237d1 	.word	0x000237d1

00013cd4 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
   13cd4:	b580      	push	{r7, lr}
   13cd6:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
   13cd8:	2101      	movs	r1, #1
   13cda:	2024      	movs	r0, #36	; 0x24
   13cdc:	4b02      	ldr	r3, [pc, #8]	; (13ce8 <LCD_PWR_EN+0x14>)
   13cde:	4798      	blx	r3
}
   13ce0:	46c0      	nop			; (mov r8, r8)
   13ce2:	46bd      	mov	sp, r7
   13ce4:	bd80      	pop	{r7, pc}
   13ce6:	46c0      	nop			; (mov r8, r8)
   13ce8:	00013989 	.word	0x00013989

00013cec <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
   13cec:	b580      	push	{r7, lr}
   13cee:	b082      	sub	sp, #8
   13cf0:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
   13cf2:	2100      	movs	r1, #0
   13cf4:	2024      	movs	r0, #36	; 0x24
   13cf6:	4b11      	ldr	r3, [pc, #68]	; (13d3c <LCD_PWR_DIS+0x50>)
   13cf8:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
   13cfa:	2300      	movs	r3, #0
   13cfc:	607b      	str	r3, [r7, #4]
   13cfe:	e00a      	b.n	13d16 <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
   13d00:	4a0f      	ldr	r2, [pc, #60]	; (13d40 <LCD_PWR_DIS+0x54>)
   13d02:	687b      	ldr	r3, [r7, #4]
   13d04:	18d3      	adds	r3, r2, r3
   13d06:	781b      	ldrb	r3, [r3, #0]
   13d08:	2100      	movs	r1, #0
   13d0a:	0018      	movs	r0, r3
   13d0c:	4b0b      	ldr	r3, [pc, #44]	; (13d3c <LCD_PWR_DIS+0x50>)
   13d0e:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
   13d10:	687b      	ldr	r3, [r7, #4]
   13d12:	3301      	adds	r3, #1
   13d14:	607b      	str	r3, [r7, #4]
   13d16:	687b      	ldr	r3, [r7, #4]
   13d18:	2b03      	cmp	r3, #3
   13d1a:	ddf1      	ble.n	13d00 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
   13d1c:	4b09      	ldr	r3, [pc, #36]	; (13d44 <LCD_PWR_DIS+0x58>)
   13d1e:	781b      	ldrb	r3, [r3, #0]
   13d20:	2100      	movs	r1, #0
   13d22:	0018      	movs	r0, r3
   13d24:	4b05      	ldr	r3, [pc, #20]	; (13d3c <LCD_PWR_DIS+0x50>)
   13d26:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
   13d28:	4b07      	ldr	r3, [pc, #28]	; (13d48 <LCD_PWR_DIS+0x5c>)
   13d2a:	781b      	ldrb	r3, [r3, #0]
   13d2c:	2100      	movs	r1, #0
   13d2e:	0018      	movs	r0, r3
   13d30:	4b02      	ldr	r3, [pc, #8]	; (13d3c <LCD_PWR_DIS+0x50>)
   13d32:	4798      	blx	r3
	
}
   13d34:	46c0      	nop			; (mov r8, r8)
   13d36:	46bd      	mov	sp, r7
   13d38:	b002      	add	sp, #8
   13d3a:	bd80      	pop	{r7, pc}
   13d3c:	00013989 	.word	0x00013989
   13d40:	200008d8 	.word	0x200008d8
   13d44:	200008df 	.word	0x200008df
   13d48:	200008e0 	.word	0x200008e0

00013d4c <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
   13d4c:	b580      	push	{r7, lr}
   13d4e:	b084      	sub	sp, #16
   13d50:	af00      	add	r7, sp, #0
   13d52:	60f8      	str	r0, [r7, #12]
   13d54:	60b9      	str	r1, [r7, #8]
   13d56:	607a      	str	r2, [r7, #4]
   13d58:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
   13d5a:	68fb      	ldr	r3, [r7, #12]
   13d5c:	b2da      	uxtb	r2, r3
   13d5e:	4b09      	ldr	r3, [pc, #36]	; (13d84 <LCD_setRowOffsets+0x38>)
   13d60:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
   13d62:	68bb      	ldr	r3, [r7, #8]
   13d64:	b2da      	uxtb	r2, r3
   13d66:	4b07      	ldr	r3, [pc, #28]	; (13d84 <LCD_setRowOffsets+0x38>)
   13d68:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
   13d6a:	687b      	ldr	r3, [r7, #4]
   13d6c:	b2da      	uxtb	r2, r3
   13d6e:	4b05      	ldr	r3, [pc, #20]	; (13d84 <LCD_setRowOffsets+0x38>)
   13d70:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
   13d72:	683b      	ldr	r3, [r7, #0]
   13d74:	b2da      	uxtb	r2, r3
   13d76:	4b03      	ldr	r3, [pc, #12]	; (13d84 <LCD_setRowOffsets+0x38>)
   13d78:	70da      	strb	r2, [r3, #3]
}
   13d7a:	46c0      	nop			; (mov r8, r8)
   13d7c:	46bd      	mov	sp, r7
   13d7e:	b004      	add	sp, #16
   13d80:	bd80      	pop	{r7, pc}
   13d82:	46c0      	nop			; (mov r8, r8)
   13d84:	200008d0 	.word	0x200008d0

00013d88 <write4bits>:

void write4bits(uint8_t value)
{
   13d88:	b580      	push	{r7, lr}
   13d8a:	b084      	sub	sp, #16
   13d8c:	af00      	add	r7, sp, #0
   13d8e:	0002      	movs	r2, r0
   13d90:	1dfb      	adds	r3, r7, #7
   13d92:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
   13d94:	2300      	movs	r3, #0
   13d96:	60fb      	str	r3, [r7, #12]
   13d98:	e013      	b.n	13dc2 <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
   13d9a:	4a0e      	ldr	r2, [pc, #56]	; (13dd4 <write4bits+0x4c>)
   13d9c:	68fb      	ldr	r3, [r7, #12]
   13d9e:	18d3      	adds	r3, r2, r3
   13da0:	7818      	ldrb	r0, [r3, #0]
   13da2:	1dfb      	adds	r3, r7, #7
   13da4:	781a      	ldrb	r2, [r3, #0]
   13da6:	68fb      	ldr	r3, [r7, #12]
   13da8:	411a      	asrs	r2, r3
   13daa:	0013      	movs	r3, r2
   13dac:	2201      	movs	r2, #1
   13dae:	4013      	ands	r3, r2
   13db0:	1e5a      	subs	r2, r3, #1
   13db2:	4193      	sbcs	r3, r2
   13db4:	b2db      	uxtb	r3, r3
   13db6:	0019      	movs	r1, r3
   13db8:	4b07      	ldr	r3, [pc, #28]	; (13dd8 <write4bits+0x50>)
   13dba:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
   13dbc:	68fb      	ldr	r3, [r7, #12]
   13dbe:	3301      	adds	r3, #1
   13dc0:	60fb      	str	r3, [r7, #12]
   13dc2:	68fb      	ldr	r3, [r7, #12]
   13dc4:	2b03      	cmp	r3, #3
   13dc6:	dde8      	ble.n	13d9a <write4bits+0x12>
	}
	pulseEnable();
   13dc8:	4b04      	ldr	r3, [pc, #16]	; (13ddc <write4bits+0x54>)
   13dca:	4798      	blx	r3
}
   13dcc:	46c0      	nop			; (mov r8, r8)
   13dce:	46bd      	mov	sp, r7
   13dd0:	b004      	add	sp, #16
   13dd2:	bd80      	pop	{r7, pc}
   13dd4:	200008d8 	.word	0x200008d8
   13dd8:	00013989 	.word	0x00013989
   13ddc:	00013de1 	.word	0x00013de1

00013de0 <pulseEnable>:



void pulseEnable(void)
{
   13de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13de2:	b085      	sub	sp, #20
   13de4:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
   13de6:	4b31      	ldr	r3, [pc, #196]	; (13eac <pulseEnable+0xcc>)
   13de8:	781b      	ldrb	r3, [r3, #0]
   13dea:	2100      	movs	r1, #0
   13dec:	0018      	movs	r0, r3
   13dee:	4b30      	ldr	r3, [pc, #192]	; (13eb0 <pulseEnable+0xd0>)
   13df0:	4798      	blx	r3
 	delay_us(1);
   13df2:	2000      	movs	r0, #0
   13df4:	4b2f      	ldr	r3, [pc, #188]	; (13eb4 <pulseEnable+0xd4>)
   13df6:	4798      	blx	r3
   13df8:	0003      	movs	r3, r0
   13dfa:	60bb      	str	r3, [r7, #8]
   13dfc:	2300      	movs	r3, #0
   13dfe:	60fb      	str	r3, [r7, #12]
   13e00:	4b2d      	ldr	r3, [pc, #180]	; (13eb8 <pulseEnable+0xd8>)
   13e02:	2400      	movs	r4, #0
   13e04:	68b8      	ldr	r0, [r7, #8]
   13e06:	68f9      	ldr	r1, [r7, #12]
   13e08:	18c0      	adds	r0, r0, r3
   13e0a:	4161      	adcs	r1, r4
   13e0c:	4c2b      	ldr	r4, [pc, #172]	; (13ebc <pulseEnable+0xdc>)
   13e0e:	4a2c      	ldr	r2, [pc, #176]	; (13ec0 <pulseEnable+0xe0>)
   13e10:	2300      	movs	r3, #0
   13e12:	47a0      	blx	r4
   13e14:	0003      	movs	r3, r0
   13e16:	000c      	movs	r4, r1
   13e18:	0018      	movs	r0, r3
   13e1a:	4b2a      	ldr	r3, [pc, #168]	; (13ec4 <pulseEnable+0xe4>)
   13e1c:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
   13e1e:	4b23      	ldr	r3, [pc, #140]	; (13eac <pulseEnable+0xcc>)
   13e20:	781b      	ldrb	r3, [r3, #0]
   13e22:	2101      	movs	r1, #1
   13e24:	0018      	movs	r0, r3
   13e26:	4b22      	ldr	r3, [pc, #136]	; (13eb0 <pulseEnable+0xd0>)
   13e28:	4798      	blx	r3
 	delay_us(1);
   13e2a:	2000      	movs	r0, #0
   13e2c:	4b21      	ldr	r3, [pc, #132]	; (13eb4 <pulseEnable+0xd4>)
   13e2e:	4798      	blx	r3
   13e30:	0003      	movs	r3, r0
   13e32:	001d      	movs	r5, r3
   13e34:	2300      	movs	r3, #0
   13e36:	001e      	movs	r6, r3
   13e38:	4b1f      	ldr	r3, [pc, #124]	; (13eb8 <pulseEnable+0xd8>)
   13e3a:	2400      	movs	r4, #0
   13e3c:	0028      	movs	r0, r5
   13e3e:	0031      	movs	r1, r6
   13e40:	18c0      	adds	r0, r0, r3
   13e42:	4161      	adcs	r1, r4
   13e44:	4c1d      	ldr	r4, [pc, #116]	; (13ebc <pulseEnable+0xdc>)
   13e46:	4a1e      	ldr	r2, [pc, #120]	; (13ec0 <pulseEnable+0xe0>)
   13e48:	2300      	movs	r3, #0
   13e4a:	47a0      	blx	r4
   13e4c:	0003      	movs	r3, r0
   13e4e:	000c      	movs	r4, r1
   13e50:	0018      	movs	r0, r3
   13e52:	4b1c      	ldr	r3, [pc, #112]	; (13ec4 <pulseEnable+0xe4>)
   13e54:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
   13e56:	4b15      	ldr	r3, [pc, #84]	; (13eac <pulseEnable+0xcc>)
   13e58:	781b      	ldrb	r3, [r3, #0]
   13e5a:	2100      	movs	r1, #0
   13e5c:	0018      	movs	r0, r3
   13e5e:	4b14      	ldr	r3, [pc, #80]	; (13eb0 <pulseEnable+0xd0>)
   13e60:	4798      	blx	r3
 	delay_us(100);
   13e62:	2000      	movs	r0, #0
   13e64:	4b13      	ldr	r3, [pc, #76]	; (13eb4 <pulseEnable+0xd4>)
   13e66:	4798      	blx	r3
   13e68:	0003      	movs	r3, r0
   13e6a:	603b      	str	r3, [r7, #0]
   13e6c:	2300      	movs	r3, #0
   13e6e:	607b      	str	r3, [r7, #4]
   13e70:	4c15      	ldr	r4, [pc, #84]	; (13ec8 <pulseEnable+0xe8>)
   13e72:	2264      	movs	r2, #100	; 0x64
   13e74:	2300      	movs	r3, #0
   13e76:	6838      	ldr	r0, [r7, #0]
   13e78:	6879      	ldr	r1, [r7, #4]
   13e7a:	47a0      	blx	r4
   13e7c:	0003      	movs	r3, r0
   13e7e:	000c      	movs	r4, r1
   13e80:	0019      	movs	r1, r3
   13e82:	0022      	movs	r2, r4
   13e84:	4b0c      	ldr	r3, [pc, #48]	; (13eb8 <pulseEnable+0xd8>)
   13e86:	2400      	movs	r4, #0
   13e88:	18c9      	adds	r1, r1, r3
   13e8a:	4162      	adcs	r2, r4
   13e8c:	0008      	movs	r0, r1
   13e8e:	0011      	movs	r1, r2
   13e90:	4c0a      	ldr	r4, [pc, #40]	; (13ebc <pulseEnable+0xdc>)
   13e92:	4a0b      	ldr	r2, [pc, #44]	; (13ec0 <pulseEnable+0xe0>)
   13e94:	2300      	movs	r3, #0
   13e96:	47a0      	blx	r4
   13e98:	0003      	movs	r3, r0
   13e9a:	000c      	movs	r4, r1
   13e9c:	0018      	movs	r0, r3
   13e9e:	4b09      	ldr	r3, [pc, #36]	; (13ec4 <pulseEnable+0xe4>)
   13ea0:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
   13ea2:	46c0      	nop			; (mov r8, r8)
   13ea4:	46bd      	mov	sp, r7
   13ea6:	b005      	add	sp, #20
   13ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13eaa:	46c0      	nop			; (mov r8, r8)
   13eac:	200008df 	.word	0x200008df
   13eb0:	00013989 	.word	0x00013989
   13eb4:	0002513d 	.word	0x0002513d
   13eb8:	006acfbf 	.word	0x006acfbf
   13ebc:	00027149 	.word	0x00027149
   13ec0:	006acfc0 	.word	0x006acfc0
   13ec4:	20000001 	.word	0x20000001
   13ec8:	00027189 	.word	0x00027189

00013ecc <command>:

inline void command(uint8_t value) 
{
   13ecc:	b580      	push	{r7, lr}
   13ece:	b082      	sub	sp, #8
   13ed0:	af00      	add	r7, sp, #0
   13ed2:	0002      	movs	r2, r0
   13ed4:	1dfb      	adds	r3, r7, #7
   13ed6:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
   13ed8:	1dfb      	adds	r3, r7, #7
   13eda:	781b      	ldrb	r3, [r3, #0]
   13edc:	2100      	movs	r1, #0
   13ede:	0018      	movs	r0, r3
   13ee0:	4b02      	ldr	r3, [pc, #8]	; (13eec <command+0x20>)
   13ee2:	4798      	blx	r3
}
   13ee4:	46c0      	nop			; (mov r8, r8)
   13ee6:	46bd      	mov	sp, r7
   13ee8:	b002      	add	sp, #8
   13eea:	bd80      	pop	{r7, pc}
   13eec:	00013f19 	.word	0x00013f19

00013ef0 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
   13ef0:	b580      	push	{r7, lr}
   13ef2:	b082      	sub	sp, #8
   13ef4:	af00      	add	r7, sp, #0
   13ef6:	0002      	movs	r2, r0
   13ef8:	1dfb      	adds	r3, r7, #7
   13efa:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
   13efc:	1dfb      	adds	r3, r7, #7
   13efe:	781b      	ldrb	r3, [r3, #0]
   13f00:	2101      	movs	r1, #1
   13f02:	0018      	movs	r0, r3
   13f04:	4b03      	ldr	r3, [pc, #12]	; (13f14 <LCD_write+0x24>)
   13f06:	4798      	blx	r3
	return 1;
   13f08:	2301      	movs	r3, #1
}
   13f0a:	0018      	movs	r0, r3
   13f0c:	46bd      	mov	sp, r7
   13f0e:	b002      	add	sp, #8
   13f10:	bd80      	pop	{r7, pc}
   13f12:	46c0      	nop			; (mov r8, r8)
   13f14:	00013f19 	.word	0x00013f19

00013f18 <send>:

void send(uint8_t value, uint8_t mode) 
{
   13f18:	b580      	push	{r7, lr}
   13f1a:	b082      	sub	sp, #8
   13f1c:	af00      	add	r7, sp, #0
   13f1e:	0002      	movs	r2, r0
   13f20:	1dfb      	adds	r3, r7, #7
   13f22:	701a      	strb	r2, [r3, #0]
   13f24:	1dbb      	adds	r3, r7, #6
   13f26:	1c0a      	adds	r2, r1, #0
   13f28:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
   13f2a:	4b0d      	ldr	r3, [pc, #52]	; (13f60 <send+0x48>)
   13f2c:	781a      	ldrb	r2, [r3, #0]
   13f2e:	1dbb      	adds	r3, r7, #6
   13f30:	781b      	ldrb	r3, [r3, #0]
   13f32:	1e59      	subs	r1, r3, #1
   13f34:	418b      	sbcs	r3, r1
   13f36:	b2db      	uxtb	r3, r3
   13f38:	0019      	movs	r1, r3
   13f3a:	0010      	movs	r0, r2
   13f3c:	4b09      	ldr	r3, [pc, #36]	; (13f64 <send+0x4c>)
   13f3e:	4798      	blx	r3
	
	{
		write4bits(value>>4);
   13f40:	1dfb      	adds	r3, r7, #7
   13f42:	781b      	ldrb	r3, [r3, #0]
   13f44:	091b      	lsrs	r3, r3, #4
   13f46:	b2db      	uxtb	r3, r3
   13f48:	0018      	movs	r0, r3
   13f4a:	4b07      	ldr	r3, [pc, #28]	; (13f68 <send+0x50>)
   13f4c:	4798      	blx	r3
		write4bits(value);
   13f4e:	1dfb      	adds	r3, r7, #7
   13f50:	781b      	ldrb	r3, [r3, #0]
   13f52:	0018      	movs	r0, r3
   13f54:	4b04      	ldr	r3, [pc, #16]	; (13f68 <send+0x50>)
   13f56:	4798      	blx	r3
	}
}
   13f58:	46c0      	nop			; (mov r8, r8)
   13f5a:	46bd      	mov	sp, r7
   13f5c:	b002      	add	sp, #8
   13f5e:	bd80      	pop	{r7, pc}
   13f60:	200008e0 	.word	0x200008e0
   13f64:	00013989 	.word	0x00013989
   13f68:	00013d89 	.word	0x00013d89

00013f6c <LCD_clear>:

void LCD_clear(void)
{
   13f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f6e:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
   13f70:	2001      	movs	r0, #1
   13f72:	4b13      	ldr	r3, [pc, #76]	; (13fc0 <LCD_clear+0x54>)
   13f74:	4798      	blx	r3
	delay_us(2000);
   13f76:	2000      	movs	r0, #0
   13f78:	4b12      	ldr	r3, [pc, #72]	; (13fc4 <LCD_clear+0x58>)
   13f7a:	4798      	blx	r3
   13f7c:	0003      	movs	r3, r0
   13f7e:	001d      	movs	r5, r3
   13f80:	2300      	movs	r3, #0
   13f82:	001e      	movs	r6, r3
   13f84:	4c10      	ldr	r4, [pc, #64]	; (13fc8 <LCD_clear+0x5c>)
   13f86:	22fa      	movs	r2, #250	; 0xfa
   13f88:	00d2      	lsls	r2, r2, #3
   13f8a:	2300      	movs	r3, #0
   13f8c:	0028      	movs	r0, r5
   13f8e:	0031      	movs	r1, r6
   13f90:	47a0      	blx	r4
   13f92:	0003      	movs	r3, r0
   13f94:	000c      	movs	r4, r1
   13f96:	0019      	movs	r1, r3
   13f98:	0022      	movs	r2, r4
   13f9a:	4b0c      	ldr	r3, [pc, #48]	; (13fcc <LCD_clear+0x60>)
   13f9c:	2400      	movs	r4, #0
   13f9e:	18c9      	adds	r1, r1, r3
   13fa0:	4162      	adcs	r2, r4
   13fa2:	0008      	movs	r0, r1
   13fa4:	0011      	movs	r1, r2
   13fa6:	4c0a      	ldr	r4, [pc, #40]	; (13fd0 <LCD_clear+0x64>)
   13fa8:	4a0a      	ldr	r2, [pc, #40]	; (13fd4 <LCD_clear+0x68>)
   13faa:	2300      	movs	r3, #0
   13fac:	47a0      	blx	r4
   13fae:	0003      	movs	r3, r0
   13fb0:	000c      	movs	r4, r1
   13fb2:	0018      	movs	r0, r3
   13fb4:	4b08      	ldr	r3, [pc, #32]	; (13fd8 <LCD_clear+0x6c>)
   13fb6:	4798      	blx	r3
}
   13fb8:	46c0      	nop			; (mov r8, r8)
   13fba:	46bd      	mov	sp, r7
   13fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fbe:	46c0      	nop			; (mov r8, r8)
   13fc0:	00013ecd 	.word	0x00013ecd
   13fc4:	0002513d 	.word	0x0002513d
   13fc8:	00027189 	.word	0x00027189
   13fcc:	006acfbf 	.word	0x006acfbf
   13fd0:	00027149 	.word	0x00027149
   13fd4:	006acfc0 	.word	0x006acfc0
   13fd8:	20000001 	.word	0x20000001

00013fdc <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
   13fdc:	b580      	push	{r7, lr}
   13fde:	b084      	sub	sp, #16
   13fe0:	af00      	add	r7, sp, #0
   13fe2:	0002      	movs	r2, r0
   13fe4:	6039      	str	r1, [r7, #0]
   13fe6:	1dfb      	adds	r3, r7, #7
   13fe8:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
   13fea:	1dfb      	adds	r3, r7, #7
   13fec:	1dfa      	adds	r2, r7, #7
   13fee:	7812      	ldrb	r2, [r2, #0]
   13ff0:	2107      	movs	r1, #7
   13ff2:	400a      	ands	r2, r1
   13ff4:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
   13ff6:	1dfb      	adds	r3, r7, #7
   13ff8:	781b      	ldrb	r3, [r3, #0]
   13ffa:	00db      	lsls	r3, r3, #3
   13ffc:	b25b      	sxtb	r3, r3
   13ffe:	2240      	movs	r2, #64	; 0x40
   14000:	4313      	orrs	r3, r2
   14002:	b25b      	sxtb	r3, r3
   14004:	b2db      	uxtb	r3, r3
   14006:	0018      	movs	r0, r3
   14008:	4b0a      	ldr	r3, [pc, #40]	; (14034 <LCD_Create_Custom_createChar+0x58>)
   1400a:	4798      	blx	r3
	for (int i=0; i<8; i++)
   1400c:	2300      	movs	r3, #0
   1400e:	60fb      	str	r3, [r7, #12]
   14010:	e009      	b.n	14026 <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
   14012:	68fb      	ldr	r3, [r7, #12]
   14014:	683a      	ldr	r2, [r7, #0]
   14016:	18d3      	adds	r3, r2, r3
   14018:	781b      	ldrb	r3, [r3, #0]
   1401a:	0018      	movs	r0, r3
   1401c:	4b06      	ldr	r3, [pc, #24]	; (14038 <LCD_Create_Custom_createChar+0x5c>)
   1401e:	4798      	blx	r3
	for (int i=0; i<8; i++)
   14020:	68fb      	ldr	r3, [r7, #12]
   14022:	3301      	adds	r3, #1
   14024:	60fb      	str	r3, [r7, #12]
   14026:	68fb      	ldr	r3, [r7, #12]
   14028:	2b07      	cmp	r3, #7
   1402a:	ddf2      	ble.n	14012 <LCD_Create_Custom_createChar+0x36>
	}
}
   1402c:	46c0      	nop			; (mov r8, r8)
   1402e:	46bd      	mov	sp, r7
   14030:	b004      	add	sp, #16
   14032:	bd80      	pop	{r7, pc}
   14034:	00013ecd 	.word	0x00013ecd
   14038:	00013ef1 	.word	0x00013ef1

0001403c <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
   1403c:	b580      	push	{r7, lr}
   1403e:	b084      	sub	sp, #16
   14040:	af00      	add	r7, sp, #0
   14042:	0002      	movs	r2, r0
   14044:	1dfb      	adds	r3, r7, #7
   14046:	701a      	strb	r2, [r3, #0]
   14048:	1dbb      	adds	r3, r7, #6
   1404a:	1c0a      	adds	r2, r1, #0
   1404c:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
   1404e:	2304      	movs	r3, #4
   14050:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
   14052:	1dbb      	adds	r3, r7, #6
   14054:	781a      	ldrb	r2, [r3, #0]
   14056:	68fb      	ldr	r3, [r7, #12]
   14058:	429a      	cmp	r2, r3
   1405a:	d304      	bcc.n	14066 <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
   1405c:	68fb      	ldr	r3, [r7, #12]
   1405e:	b2da      	uxtb	r2, r3
   14060:	1dbb      	adds	r3, r7, #6
   14062:	3a01      	subs	r2, #1
   14064:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
   14066:	4b10      	ldr	r3, [pc, #64]	; (140a8 <LCD_setCursor+0x6c>)
   14068:	781b      	ldrb	r3, [r3, #0]
   1406a:	1dba      	adds	r2, r7, #6
   1406c:	7812      	ldrb	r2, [r2, #0]
   1406e:	429a      	cmp	r2, r3
   14070:	d304      	bcc.n	1407c <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
   14072:	4b0d      	ldr	r3, [pc, #52]	; (140a8 <LCD_setCursor+0x6c>)
   14074:	781a      	ldrb	r2, [r3, #0]
   14076:	1dbb      	adds	r3, r7, #6
   14078:	3a01      	subs	r2, #1
   1407a:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
   1407c:	1dbb      	adds	r3, r7, #6
   1407e:	781b      	ldrb	r3, [r3, #0]
   14080:	4a0a      	ldr	r2, [pc, #40]	; (140ac <LCD_setCursor+0x70>)
   14082:	5cd2      	ldrb	r2, [r2, r3]
   14084:	1dfb      	adds	r3, r7, #7
   14086:	781b      	ldrb	r3, [r3, #0]
   14088:	18d3      	adds	r3, r2, r3
   1408a:	b2db      	uxtb	r3, r3
   1408c:	b25b      	sxtb	r3, r3
   1408e:	2280      	movs	r2, #128	; 0x80
   14090:	4252      	negs	r2, r2
   14092:	4313      	orrs	r3, r2
   14094:	b25b      	sxtb	r3, r3
   14096:	b2db      	uxtb	r3, r3
   14098:	0018      	movs	r0, r3
   1409a:	4b05      	ldr	r3, [pc, #20]	; (140b0 <LCD_setCursor+0x74>)
   1409c:	4798      	blx	r3
}
   1409e:	46c0      	nop			; (mov r8, r8)
   140a0:	46bd      	mov	sp, r7
   140a2:	b004      	add	sp, #16
   140a4:	bd80      	pop	{r7, pc}
   140a6:	46c0      	nop			; (mov r8, r8)
   140a8:	200008d6 	.word	0x200008d6
   140ac:	200008d0 	.word	0x200008d0
   140b0:	00013ecd 	.word	0x00013ecd

000140b4 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
   140b4:	b580      	push	{r7, lr}
   140b6:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
   140b8:	4b08      	ldr	r3, [pc, #32]	; (140dc <LCD_display+0x28>)
   140ba:	781b      	ldrb	r3, [r3, #0]
   140bc:	2204      	movs	r2, #4
   140be:	4313      	orrs	r3, r2
   140c0:	b2da      	uxtb	r2, r3
   140c2:	4b06      	ldr	r3, [pc, #24]	; (140dc <LCD_display+0x28>)
   140c4:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
   140c6:	4b05      	ldr	r3, [pc, #20]	; (140dc <LCD_display+0x28>)
   140c8:	781b      	ldrb	r3, [r3, #0]
   140ca:	2208      	movs	r2, #8
   140cc:	4313      	orrs	r3, r2
   140ce:	b2db      	uxtb	r3, r3
   140d0:	0018      	movs	r0, r3
   140d2:	4b03      	ldr	r3, [pc, #12]	; (140e0 <LCD_display+0x2c>)
   140d4:	4798      	blx	r3
}
   140d6:	46c0      	nop			; (mov r8, r8)
   140d8:	46bd      	mov	sp, r7
   140da:	bd80      	pop	{r7, pc}
   140dc:	200008d5 	.word	0x200008d5
   140e0:	00013ecd 	.word	0x00013ecd

000140e4 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
   140e4:	b580      	push	{r7, lr}
   140e6:	b084      	sub	sp, #16
   140e8:	af00      	add	r7, sp, #0
   140ea:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
   140ec:	687b      	ldr	r3, [r7, #4]
   140ee:	0018      	movs	r0, r3
   140f0:	4b0f      	ldr	r3, [pc, #60]	; (14130 <Buffer_writer+0x4c>)
   140f2:	4798      	blx	r3
   140f4:	0003      	movs	r3, r0
   140f6:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
   140f8:	2300      	movs	r3, #0
   140fa:	60bb      	str	r3, [r7, #8]
	while (size--) {
   140fc:	e00b      	b.n	14116 <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
   140fe:	687b      	ldr	r3, [r7, #4]
   14100:	1c5a      	adds	r2, r3, #1
   14102:	607a      	str	r2, [r7, #4]
   14104:	781b      	ldrb	r3, [r3, #0]
   14106:	0018      	movs	r0, r3
   14108:	4b0a      	ldr	r3, [pc, #40]	; (14134 <Buffer_writer+0x50>)
   1410a:	4798      	blx	r3
   1410c:	1e03      	subs	r3, r0, #0
   1410e:	d008      	beq.n	14122 <Buffer_writer+0x3e>
   14110:	68bb      	ldr	r3, [r7, #8]
   14112:	3301      	adds	r3, #1
   14114:	60bb      	str	r3, [r7, #8]
	while (size--) {
   14116:	68fb      	ldr	r3, [r7, #12]
   14118:	1e5a      	subs	r2, r3, #1
   1411a:	60fa      	str	r2, [r7, #12]
   1411c:	2b00      	cmp	r3, #0
   1411e:	d1ee      	bne.n	140fe <Buffer_writer+0x1a>
   14120:	e000      	b.n	14124 <Buffer_writer+0x40>
		else break;
   14122:	46c0      	nop			; (mov r8, r8)
	}
	return n;
   14124:	68bb      	ldr	r3, [r7, #8]
}
   14126:	0018      	movs	r0, r3
   14128:	46bd      	mov	sp, r7
   1412a:	b004      	add	sp, #16
   1412c:	bd80      	pop	{r7, pc}
   1412e:	46c0      	nop			; (mov r8, r8)
   14130:	000298e7 	.word	0x000298e7
   14134:	00013ef1 	.word	0x00013ef1

00014138 <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
   14138:	b40f      	push	{r0, r1, r2, r3}
   1413a:	b580      	push	{r7, lr}
   1413c:	b084      	sub	sp, #16
   1413e:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
   14140:	69bb      	ldr	r3, [r7, #24]
   14142:	0018      	movs	r0, r3
   14144:	4b11      	ldr	r3, [pc, #68]	; (1418c <lcd_printf+0x54>)
   14146:	4798      	blx	r3
   14148:	0003      	movs	r3, r0
   1414a:	3303      	adds	r3, #3
   1414c:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
   1414e:	68fb      	ldr	r3, [r7, #12]
   14150:	0018      	movs	r0, r3
   14152:	4b0f      	ldr	r3, [pc, #60]	; (14190 <lcd_printf+0x58>)
   14154:	4798      	blx	r3
   14156:	0003      	movs	r3, r0
   14158:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
   1415a:	231c      	movs	r3, #28
   1415c:	18fb      	adds	r3, r7, r3
   1415e:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
   14160:	687a      	ldr	r2, [r7, #4]
   14162:	69b9      	ldr	r1, [r7, #24]
   14164:	68bb      	ldr	r3, [r7, #8]
   14166:	0018      	movs	r0, r3
   14168:	4b0a      	ldr	r3, [pc, #40]	; (14194 <lcd_printf+0x5c>)
   1416a:	4798      	blx	r3
	Buffer_writer(lcd_buff);
   1416c:	68bb      	ldr	r3, [r7, #8]
   1416e:	0018      	movs	r0, r3
   14170:	4b09      	ldr	r3, [pc, #36]	; (14198 <lcd_printf+0x60>)
   14172:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
   14174:	68bb      	ldr	r3, [r7, #8]
   14176:	0018      	movs	r0, r3
   14178:	4b08      	ldr	r3, [pc, #32]	; (1419c <lcd_printf+0x64>)
   1417a:	4798      	blx	r3
}
   1417c:	46c0      	nop			; (mov r8, r8)
   1417e:	46bd      	mov	sp, r7
   14180:	b004      	add	sp, #16
   14182:	bc80      	pop	{r7}
   14184:	bc08      	pop	{r3}
   14186:	b004      	add	sp, #16
   14188:	4718      	bx	r3
   1418a:	46c0      	nop			; (mov r8, r8)
   1418c:	000298e7 	.word	0x000298e7
   14190:	000295d5 	.word	0x000295d5
   14194:	00029bd5 	.word	0x00029bd5
   14198:	000140e5 	.word	0x000140e5
   1419c:	000295e9 	.word	0x000295e9

000141a0 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
   141a0:	b580      	push	{r7, lr}
   141a2:	b084      	sub	sp, #16
   141a4:	af00      	add	r7, sp, #0
   141a6:	6078      	str	r0, [r7, #4]
	if (!str) return;
   141a8:	687b      	ldr	r3, [r7, #4]
   141aa:	2b00      	cmp	r3, #0
   141ac:	d028      	beq.n	14200 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
   141ae:	687b      	ldr	r3, [r7, #4]
   141b0:	60fb      	str	r3, [r7, #12]
   141b2:	e020      	b.n	141f6 <StringtoUpperCase+0x56>
		*p = toupper(*p);
   141b4:	230b      	movs	r3, #11
   141b6:	18fb      	adds	r3, r7, r3
   141b8:	68fa      	ldr	r2, [r7, #12]
   141ba:	7812      	ldrb	r2, [r2, #0]
   141bc:	701a      	strb	r2, [r3, #0]
   141be:	4b12      	ldr	r3, [pc, #72]	; (14208 <StringtoUpperCase+0x68>)
   141c0:	4798      	blx	r3
   141c2:	0002      	movs	r2, r0
   141c4:	230b      	movs	r3, #11
   141c6:	18fb      	adds	r3, r7, r3
   141c8:	781b      	ldrb	r3, [r3, #0]
   141ca:	3301      	adds	r3, #1
   141cc:	18d3      	adds	r3, r2, r3
   141ce:	781b      	ldrb	r3, [r3, #0]
   141d0:	001a      	movs	r2, r3
   141d2:	2303      	movs	r3, #3
   141d4:	4013      	ands	r3, r2
   141d6:	2b02      	cmp	r3, #2
   141d8:	d104      	bne.n	141e4 <StringtoUpperCase+0x44>
   141da:	230b      	movs	r3, #11
   141dc:	18fb      	adds	r3, r7, r3
   141de:	781b      	ldrb	r3, [r3, #0]
   141e0:	3b20      	subs	r3, #32
   141e2:	e002      	b.n	141ea <StringtoUpperCase+0x4a>
   141e4:	230b      	movs	r3, #11
   141e6:	18fb      	adds	r3, r7, r3
   141e8:	781b      	ldrb	r3, [r3, #0]
   141ea:	b2da      	uxtb	r2, r3
   141ec:	68fb      	ldr	r3, [r7, #12]
   141ee:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
   141f0:	68fb      	ldr	r3, [r7, #12]
   141f2:	3301      	adds	r3, #1
   141f4:	60fb      	str	r3, [r7, #12]
   141f6:	68fb      	ldr	r3, [r7, #12]
   141f8:	781b      	ldrb	r3, [r3, #0]
   141fa:	2b00      	cmp	r3, #0
   141fc:	d1da      	bne.n	141b4 <StringtoUpperCase+0x14>
   141fe:	e000      	b.n	14202 <StringtoUpperCase+0x62>
	if (!str) return;
   14200:	46c0      	nop			; (mov r8, r8)
	}
}
   14202:	46bd      	mov	sp, r7
   14204:	b004      	add	sp, #16
   14206:	bd80      	pop	{r7, pc}
   14208:	000295b9 	.word	0x000295b9

0001420c <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
   1420c:	b580      	push	{r7, lr}
   1420e:	b084      	sub	sp, #16
   14210:	af00      	add	r7, sp, #0
   14212:	6078      	str	r0, [r7, #4]
   14214:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
   14216:	683b      	ldr	r3, [r7, #0]
   14218:	0018      	movs	r0, r3
   1421a:	4b10      	ldr	r3, [pc, #64]	; (1425c <StringstartsWith+0x50>)
   1421c:	4798      	blx	r3
   1421e:	0003      	movs	r3, r0
   14220:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
   14222:	687b      	ldr	r3, [r7, #4]
   14224:	0018      	movs	r0, r3
   14226:	4b0d      	ldr	r3, [pc, #52]	; (1425c <StringstartsWith+0x50>)
   14228:	4798      	blx	r3
   1422a:	0003      	movs	r3, r0
   1422c:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
   1422e:	68ba      	ldr	r2, [r7, #8]
   14230:	68fb      	ldr	r3, [r7, #12]
   14232:	429a      	cmp	r2, r3
   14234:	d309      	bcc.n	1424a <StringstartsWith+0x3e>
   14236:	68fa      	ldr	r2, [r7, #12]
   14238:	6879      	ldr	r1, [r7, #4]
   1423a:	683b      	ldr	r3, [r7, #0]
   1423c:	0018      	movs	r0, r3
   1423e:	4b08      	ldr	r3, [pc, #32]	; (14260 <StringstartsWith+0x54>)
   14240:	4798      	blx	r3
   14242:	1e03      	subs	r3, r0, #0
   14244:	d101      	bne.n	1424a <StringstartsWith+0x3e>
   14246:	2301      	movs	r3, #1
   14248:	e000      	b.n	1424c <StringstartsWith+0x40>
   1424a:	2300      	movs	r3, #0
   1424c:	1c1a      	adds	r2, r3, #0
   1424e:	2301      	movs	r3, #1
   14250:	4013      	ands	r3, r2
   14252:	b2db      	uxtb	r3, r3
}
   14254:	0018      	movs	r0, r3
   14256:	46bd      	mov	sp, r7
   14258:	b004      	add	sp, #16
   1425a:	bd80      	pop	{r7, pc}
   1425c:	000298e7 	.word	0x000298e7
   14260:	000298f5 	.word	0x000298f5

00014264 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14264:	b580      	push	{r7, lr}
   14266:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14268:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   1426c:	4b02      	ldr	r3, [pc, #8]	; (14278 <NVIC_SystemReset+0x14>)
   1426e:	4a03      	ldr	r2, [pc, #12]	; (1427c <NVIC_SystemReset+0x18>)
   14270:	60da      	str	r2, [r3, #12]
   14272:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   14276:	e7fe      	b.n	14276 <NVIC_SystemReset+0x12>
   14278:	e000ed00 	.word	0xe000ed00
   1427c:	05fa0004 	.word	0x05fa0004

00014280 <system_pinmux_get_group_from_gpio_pin>:
{
   14280:	b580      	push	{r7, lr}
   14282:	b084      	sub	sp, #16
   14284:	af00      	add	r7, sp, #0
   14286:	0002      	movs	r2, r0
   14288:	1dfb      	adds	r3, r7, #7
   1428a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1428c:	230f      	movs	r3, #15
   1428e:	18fb      	adds	r3, r7, r3
   14290:	1dfa      	adds	r2, r7, #7
   14292:	7812      	ldrb	r2, [r2, #0]
   14294:	09d2      	lsrs	r2, r2, #7
   14296:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14298:	230e      	movs	r3, #14
   1429a:	18fb      	adds	r3, r7, r3
   1429c:	1dfa      	adds	r2, r7, #7
   1429e:	7812      	ldrb	r2, [r2, #0]
   142a0:	0952      	lsrs	r2, r2, #5
   142a2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   142a4:	4b0d      	ldr	r3, [pc, #52]	; (142dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   142a6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   142a8:	230f      	movs	r3, #15
   142aa:	18fb      	adds	r3, r7, r3
   142ac:	781b      	ldrb	r3, [r3, #0]
   142ae:	2b00      	cmp	r3, #0
   142b0:	d10f      	bne.n	142d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   142b2:	230f      	movs	r3, #15
   142b4:	18fb      	adds	r3, r7, r3
   142b6:	781b      	ldrb	r3, [r3, #0]
   142b8:	009b      	lsls	r3, r3, #2
   142ba:	2210      	movs	r2, #16
   142bc:	4694      	mov	ip, r2
   142be:	44bc      	add	ip, r7
   142c0:	4463      	add	r3, ip
   142c2:	3b08      	subs	r3, #8
   142c4:	681a      	ldr	r2, [r3, #0]
   142c6:	230e      	movs	r3, #14
   142c8:	18fb      	adds	r3, r7, r3
   142ca:	781b      	ldrb	r3, [r3, #0]
   142cc:	01db      	lsls	r3, r3, #7
   142ce:	18d3      	adds	r3, r2, r3
   142d0:	e000      	b.n	142d4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   142d2:	2300      	movs	r3, #0
}
   142d4:	0018      	movs	r0, r3
   142d6:	46bd      	mov	sp, r7
   142d8:	b004      	add	sp, #16
   142da:	bd80      	pop	{r7, pc}
   142dc:	41004400 	.word	0x41004400

000142e0 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   142e0:	b580      	push	{r7, lr}
   142e2:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   142e4:	4b02      	ldr	r3, [pc, #8]	; (142f0 <system_reset+0x10>)
   142e6:	4798      	blx	r3
}
   142e8:	46c0      	nop			; (mov r8, r8)
   142ea:	46bd      	mov	sp, r7
   142ec:	bd80      	pop	{r7, pc}
   142ee:	46c0      	nop			; (mov r8, r8)
   142f0:	00014265 	.word	0x00014265

000142f4 <port_get_group_from_gpio_pin>:
{
   142f4:	b580      	push	{r7, lr}
   142f6:	b082      	sub	sp, #8
   142f8:	af00      	add	r7, sp, #0
   142fa:	0002      	movs	r2, r0
   142fc:	1dfb      	adds	r3, r7, #7
   142fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14300:	1dfb      	adds	r3, r7, #7
   14302:	781b      	ldrb	r3, [r3, #0]
   14304:	0018      	movs	r0, r3
   14306:	4b03      	ldr	r3, [pc, #12]	; (14314 <port_get_group_from_gpio_pin+0x20>)
   14308:	4798      	blx	r3
   1430a:	0003      	movs	r3, r0
}
   1430c:	0018      	movs	r0, r3
   1430e:	46bd      	mov	sp, r7
   14310:	b002      	add	sp, #8
   14312:	bd80      	pop	{r7, pc}
   14314:	00014281 	.word	0x00014281

00014318 <port_get_config_defaults>:
{
   14318:	b580      	push	{r7, lr}
   1431a:	b082      	sub	sp, #8
   1431c:	af00      	add	r7, sp, #0
   1431e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   14320:	687b      	ldr	r3, [r7, #4]
   14322:	2200      	movs	r2, #0
   14324:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   14326:	687b      	ldr	r3, [r7, #4]
   14328:	2201      	movs	r2, #1
   1432a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1432c:	687b      	ldr	r3, [r7, #4]
   1432e:	2200      	movs	r2, #0
   14330:	709a      	strb	r2, [r3, #2]
}
   14332:	46c0      	nop			; (mov r8, r8)
   14334:	46bd      	mov	sp, r7
   14336:	b002      	add	sp, #8
   14338:	bd80      	pop	{r7, pc}
	...

0001433c <port_pin_get_input_level>:
{
   1433c:	b580      	push	{r7, lr}
   1433e:	b084      	sub	sp, #16
   14340:	af00      	add	r7, sp, #0
   14342:	0002      	movs	r2, r0
   14344:	1dfb      	adds	r3, r7, #7
   14346:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14348:	1dfb      	adds	r3, r7, #7
   1434a:	781b      	ldrb	r3, [r3, #0]
   1434c:	0018      	movs	r0, r3
   1434e:	4b0b      	ldr	r3, [pc, #44]	; (1437c <port_pin_get_input_level+0x40>)
   14350:	4798      	blx	r3
   14352:	0003      	movs	r3, r0
   14354:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14356:	1dfb      	adds	r3, r7, #7
   14358:	781b      	ldrb	r3, [r3, #0]
   1435a:	221f      	movs	r2, #31
   1435c:	4013      	ands	r3, r2
   1435e:	2201      	movs	r2, #1
   14360:	409a      	lsls	r2, r3
   14362:	0013      	movs	r3, r2
   14364:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   14366:	68fb      	ldr	r3, [r7, #12]
   14368:	6a1b      	ldr	r3, [r3, #32]
   1436a:	68ba      	ldr	r2, [r7, #8]
   1436c:	4013      	ands	r3, r2
   1436e:	1e5a      	subs	r2, r3, #1
   14370:	4193      	sbcs	r3, r2
   14372:	b2db      	uxtb	r3, r3
}
   14374:	0018      	movs	r0, r3
   14376:	46bd      	mov	sp, r7
   14378:	b004      	add	sp, #16
   1437a:	bd80      	pop	{r7, pc}
   1437c:	000142f5 	.word	0x000142f5

00014380 <port_pin_set_output_level>:
{
   14380:	b580      	push	{r7, lr}
   14382:	b084      	sub	sp, #16
   14384:	af00      	add	r7, sp, #0
   14386:	0002      	movs	r2, r0
   14388:	1dfb      	adds	r3, r7, #7
   1438a:	701a      	strb	r2, [r3, #0]
   1438c:	1dbb      	adds	r3, r7, #6
   1438e:	1c0a      	adds	r2, r1, #0
   14390:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14392:	1dfb      	adds	r3, r7, #7
   14394:	781b      	ldrb	r3, [r3, #0]
   14396:	0018      	movs	r0, r3
   14398:	4b0d      	ldr	r3, [pc, #52]	; (143d0 <port_pin_set_output_level+0x50>)
   1439a:	4798      	blx	r3
   1439c:	0003      	movs	r3, r0
   1439e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   143a0:	1dfb      	adds	r3, r7, #7
   143a2:	781b      	ldrb	r3, [r3, #0]
   143a4:	221f      	movs	r2, #31
   143a6:	4013      	ands	r3, r2
   143a8:	2201      	movs	r2, #1
   143aa:	409a      	lsls	r2, r3
   143ac:	0013      	movs	r3, r2
   143ae:	60bb      	str	r3, [r7, #8]
	if (level) {
   143b0:	1dbb      	adds	r3, r7, #6
   143b2:	781b      	ldrb	r3, [r3, #0]
   143b4:	2b00      	cmp	r3, #0
   143b6:	d003      	beq.n	143c0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   143b8:	68fb      	ldr	r3, [r7, #12]
   143ba:	68ba      	ldr	r2, [r7, #8]
   143bc:	619a      	str	r2, [r3, #24]
}
   143be:	e002      	b.n	143c6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   143c0:	68fb      	ldr	r3, [r7, #12]
   143c2:	68ba      	ldr	r2, [r7, #8]
   143c4:	615a      	str	r2, [r3, #20]
}
   143c6:	46c0      	nop			; (mov r8, r8)
   143c8:	46bd      	mov	sp, r7
   143ca:	b004      	add	sp, #16
   143cc:	bd80      	pop	{r7, pc}
   143ce:	46c0      	nop			; (mov r8, r8)
   143d0:	000142f5 	.word	0x000142f5

000143d4 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
   143d4:	b580      	push	{r7, lr}
   143d6:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
   143d8:	4b0b      	ldr	r3, [pc, #44]	; (14408 <setObtainEvent+0x34>)
   143da:	781b      	ldrb	r3, [r3, #0]
   143dc:	2201      	movs	r2, #1
   143de:	4053      	eors	r3, r2
   143e0:	b2db      	uxtb	r3, r3
   143e2:	2b00      	cmp	r3, #0
   143e4:	d00c      	beq.n	14400 <setObtainEvent+0x2c>
   143e6:	4b09      	ldr	r3, [pc, #36]	; (1440c <setObtainEvent+0x38>)
   143e8:	4798      	blx	r3
   143ea:	0002      	movs	r2, r0
   143ec:	4b08      	ldr	r3, [pc, #32]	; (14410 <setObtainEvent+0x3c>)
   143ee:	681b      	ldr	r3, [r3, #0]
   143f0:	1ad2      	subs	r2, r2, r3
   143f2:	23fa      	movs	r3, #250	; 0xfa
   143f4:	009b      	lsls	r3, r3, #2
   143f6:	429a      	cmp	r2, r3
   143f8:	d902      	bls.n	14400 <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
   143fa:	4b03      	ldr	r3, [pc, #12]	; (14408 <setObtainEvent+0x34>)
   143fc:	2201      	movs	r2, #1
   143fe:	701a      	strb	r2, [r3, #0]
	}
}
   14400:	46c0      	nop			; (mov r8, r8)
   14402:	46bd      	mov	sp, r7
   14404:	bd80      	pop	{r7, pc}
   14406:	46c0      	nop			; (mov r8, r8)
   14408:	20000972 	.word	0x20000972
   1440c:	00020ccd 	.word	0x00020ccd
   14410:	20000a14 	.word	0x20000a14

00014414 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
   14414:	b580      	push	{r7, lr}
   14416:	b082      	sub	sp, #8
   14418:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
   1441a:	1dfb      	adds	r3, r7, #7
   1441c:	2201      	movs	r2, #1
   1441e:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
   14420:	4b23      	ldr	r3, [pc, #140]	; (144b0 <operateOnStagedEvent+0x9c>)
   14422:	781b      	ldrb	r3, [r3, #0]
   14424:	2b00      	cmp	r3, #0
   14426:	d003      	beq.n	14430 <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
   14428:	1dfb      	adds	r3, r7, #7
   1442a:	4a22      	ldr	r2, [pc, #136]	; (144b4 <operateOnStagedEvent+0xa0>)
   1442c:	7a12      	ldrb	r2, [r2, #8]
   1442e:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
   14430:	4b21      	ldr	r3, [pc, #132]	; (144b8 <operateOnStagedEvent+0xa4>)
   14432:	781b      	ldrb	r3, [r3, #0]
   14434:	2b00      	cmp	r3, #0
   14436:	d037      	beq.n	144a8 <operateOnStagedEvent+0x94>
   14438:	4b20      	ldr	r3, [pc, #128]	; (144bc <operateOnStagedEvent+0xa8>)
   1443a:	781b      	ldrb	r3, [r3, #0]
   1443c:	2b01      	cmp	r3, #1
   1443e:	d00b      	beq.n	14458 <operateOnStagedEvent+0x44>
   14440:	4b1f      	ldr	r3, [pc, #124]	; (144c0 <operateOnStagedEvent+0xac>)
   14442:	4798      	blx	r3
   14444:	0002      	movs	r2, r0
   14446:	4b1f      	ldr	r3, [pc, #124]	; (144c4 <operateOnStagedEvent+0xb0>)
   14448:	681b      	ldr	r3, [r3, #0]
   1444a:	1ad2      	subs	r2, r2, r3
   1444c:	1dfb      	adds	r3, r7, #7
   1444e:	781b      	ldrb	r3, [r3, #0]
   14450:	491d      	ldr	r1, [pc, #116]	; (144c8 <operateOnStagedEvent+0xb4>)
   14452:	434b      	muls	r3, r1
   14454:	429a      	cmp	r2, r3
   14456:	d927      	bls.n	144a8 <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   14458:	4b1c      	ldr	r3, [pc, #112]	; (144cc <operateOnStagedEvent+0xb8>)
   1445a:	78db      	ldrb	r3, [r3, #3]
   1445c:	2b00      	cmp	r3, #0
   1445e:	d01a      	beq.n	14496 <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
   14460:	4b13      	ldr	r3, [pc, #76]	; (144b0 <operateOnStagedEvent+0x9c>)
   14462:	781b      	ldrb	r3, [r3, #0]
   14464:	2b00      	cmp	r3, #0
   14466:	d007      	beq.n	14478 <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
   14468:	4b19      	ldr	r3, [pc, #100]	; (144d0 <operateOnStagedEvent+0xbc>)
   1446a:	781a      	ldrb	r2, [r3, #0]
   1446c:	4b19      	ldr	r3, [pc, #100]	; (144d4 <operateOnStagedEvent+0xc0>)
   1446e:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
   14470:	4b0f      	ldr	r3, [pc, #60]	; (144b0 <operateOnStagedEvent+0x9c>)
   14472:	2200      	movs	r2, #0
   14474:	701a      	strb	r2, [r3, #0]
   14476:	e015      	b.n	144a4 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
   14478:	4b17      	ldr	r3, [pc, #92]	; (144d8 <operateOnStagedEvent+0xc4>)
   1447a:	781b      	ldrb	r3, [r3, #0]
   1447c:	2b00      	cmp	r3, #0
   1447e:	d011      	beq.n	144a4 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
   14480:	4b13      	ldr	r3, [pc, #76]	; (144d0 <operateOnStagedEvent+0xbc>)
   14482:	781a      	ldrb	r2, [r3, #0]
   14484:	4b15      	ldr	r3, [pc, #84]	; (144dc <operateOnStagedEvent+0xc8>)
   14486:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
   14488:	4b15      	ldr	r3, [pc, #84]	; (144e0 <operateOnStagedEvent+0xcc>)
   1448a:	2201      	movs	r2, #1
   1448c:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
   1448e:	4b12      	ldr	r3, [pc, #72]	; (144d8 <operateOnStagedEvent+0xc4>)
   14490:	2200      	movs	r2, #0
   14492:	701a      	strb	r2, [r3, #0]
   14494:	e006      	b.n	144a4 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
   14496:	4b0e      	ldr	r3, [pc, #56]	; (144d0 <operateOnStagedEvent+0xbc>)
   14498:	781a      	ldrb	r2, [r3, #0]
   1449a:	4b0e      	ldr	r3, [pc, #56]	; (144d4 <operateOnStagedEvent+0xc0>)
   1449c:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
   1449e:	4b04      	ldr	r3, [pc, #16]	; (144b0 <operateOnStagedEvent+0x9c>)
   144a0:	2200      	movs	r2, #0
   144a2:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
   144a4:	4b0f      	ldr	r3, [pc, #60]	; (144e4 <operateOnStagedEvent+0xd0>)
   144a6:	4798      	blx	r3
	}
}
   144a8:	46c0      	nop			; (mov r8, r8)
   144aa:	46bd      	mov	sp, r7
   144ac:	b002      	add	sp, #8
   144ae:	bd80      	pop	{r7, pc}
   144b0:	200009d7 	.word	0x200009d7
   144b4:	20000854 	.word	0x20000854
   144b8:	20000972 	.word	0x20000972
   144bc:	200008e5 	.word	0x200008e5
   144c0:	00020ccd 	.word	0x00020ccd
   144c4:	200009f4 	.word	0x200009f4
   144c8:	0000ea60 	.word	0x0000ea60
   144cc:	2000082c 	.word	0x2000082c
   144d0:	20000975 	.word	0x20000975
   144d4:	20000963 	.word	0x20000963
   144d8:	2000098e 	.word	0x2000098e
   144dc:	2000092d 	.word	0x2000092d
   144e0:	20000943 	.word	0x20000943
   144e4:	000144e9 	.word	0x000144e9

000144e8 <makeResponseAction>:

void makeResponseAction(void)
{
   144e8:	b580      	push	{r7, lr}
   144ea:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
   144ec:	4b08      	ldr	r3, [pc, #32]	; (14510 <makeResponseAction+0x28>)
   144ee:	795b      	ldrb	r3, [r3, #5]
   144f0:	b2db      	uxtb	r3, r3
   144f2:	2b4e      	cmp	r3, #78	; 0x4e
   144f4:	d103      	bne.n	144fe <makeResponseAction+0x16>
   144f6:	4b07      	ldr	r3, [pc, #28]	; (14514 <makeResponseAction+0x2c>)
   144f8:	781b      	ldrb	r3, [r3, #0]
   144fa:	2b00      	cmp	r3, #0
   144fc:	d004      	beq.n	14508 <makeResponseAction+0x20>
	{
		freezeIncomingCalls = true;
   144fe:	4b06      	ldr	r3, [pc, #24]	; (14518 <makeResponseAction+0x30>)
   14500:	2201      	movs	r2, #1
   14502:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
   14504:	4b05      	ldr	r3, [pc, #20]	; (1451c <makeResponseAction+0x34>)
   14506:	4798      	blx	r3
	}
}
   14508:	46c0      	nop			; (mov r8, r8)
   1450a:	46bd      	mov	sp, r7
   1450c:	bd80      	pop	{r7, pc}
   1450e:	46c0      	nop			; (mov r8, r8)
   14510:	20000854 	.word	0x20000854
   14514:	20000943 	.word	0x20000943
   14518:	20000944 	.word	0x20000944
   1451c:	00014755 	.word	0x00014755

00014520 <endCall>:

void endCall(void)
{
   14520:	b580      	push	{r7, lr}
   14522:	af00      	add	r7, sp, #0
	nr  = 0;
   14524:	4b6d      	ldr	r3, [pc, #436]	; (146dc <endCall+0x1bc>)
   14526:	2200      	movs	r2, #0
   14528:	701a      	strb	r2, [r3, #0]
	inCall=false;
   1452a:	4b6d      	ldr	r3, [pc, #436]	; (146e0 <endCall+0x1c0>)
   1452c:	2200      	movs	r2, #0
   1452e:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
   14530:	4b6c      	ldr	r3, [pc, #432]	; (146e4 <endCall+0x1c4>)
   14532:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   14534:	2200      	movs	r2, #0
   14536:	2100      	movs	r1, #0
   14538:	2000      	movs	r0, #0
   1453a:	4b6b      	ldr	r3, [pc, #428]	; (146e8 <endCall+0x1c8>)
   1453c:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
   1453e:	23fa      	movs	r3, #250	; 0xfa
   14540:	009b      	lsls	r3, r3, #2
   14542:	0018      	movs	r0, r3
   14544:	4b69      	ldr	r3, [pc, #420]	; (146ec <endCall+0x1cc>)
   14546:	4798      	blx	r3
	freezeIncomingCalls = false;
   14548:	4b69      	ldr	r3, [pc, #420]	; (146f0 <endCall+0x1d0>)
   1454a:	2200      	movs	r2, #0
   1454c:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1454e:	4b69      	ldr	r3, [pc, #420]	; (146f4 <endCall+0x1d4>)
   14550:	785b      	ldrb	r3, [r3, #1]
   14552:	2b00      	cmp	r3, #0
   14554:	d002      	beq.n	1455c <endCall+0x3c>
	{
		zeroPressed=false;
   14556:	4b68      	ldr	r3, [pc, #416]	; (146f8 <endCall+0x1d8>)
   14558:	2200      	movs	r2, #0
   1455a:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   1455c:	4b65      	ldr	r3, [pc, #404]	; (146f4 <endCall+0x1d4>)
   1455e:	78db      	ldrb	r3, [r3, #3]
   14560:	2b01      	cmp	r3, #1
   14562:	d11d      	bne.n	145a0 <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
   14564:	4b65      	ldr	r3, [pc, #404]	; (146fc <endCall+0x1dc>)
   14566:	781b      	ldrb	r3, [r3, #0]
   14568:	b2db      	uxtb	r3, r3
   1456a:	2b4e      	cmp	r3, #78	; 0x4e
   1456c:	d004      	beq.n	14578 <endCall+0x58>
   1456e:	4b63      	ldr	r3, [pc, #396]	; (146fc <endCall+0x1dc>)
   14570:	781b      	ldrb	r3, [r3, #0]
   14572:	b2db      	uxtb	r3, r3
   14574:	2b52      	cmp	r3, #82	; 0x52
   14576:	d10d      	bne.n	14594 <endCall+0x74>
   14578:	4b61      	ldr	r3, [pc, #388]	; (14700 <endCall+0x1e0>)
   1457a:	781b      	ldrb	r3, [r3, #0]
   1457c:	b2db      	uxtb	r3, r3
   1457e:	2b4f      	cmp	r3, #79	; 0x4f
   14580:	d108      	bne.n	14594 <endCall+0x74>
   14582:	4b60      	ldr	r3, [pc, #384]	; (14704 <endCall+0x1e4>)
   14584:	781b      	ldrb	r3, [r3, #0]
   14586:	2201      	movs	r2, #1
   14588:	4053      	eors	r3, r2
   1458a:	b2db      	uxtb	r3, r3
   1458c:	2b00      	cmp	r3, #0
   1458e:	d001      	beq.n	14594 <endCall+0x74>
   14590:	2301      	movs	r3, #1
   14592:	e000      	b.n	14596 <endCall+0x76>
   14594:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   14596:	1c1a      	adds	r2, r3, #0
   14598:	2301      	movs	r3, #1
   1459a:	4013      	ands	r3, r2
   1459c:	b2db      	uxtb	r3, r3
   1459e:	e015      	b.n	145cc <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
   145a0:	4b56      	ldr	r3, [pc, #344]	; (146fc <endCall+0x1dc>)
   145a2:	781b      	ldrb	r3, [r3, #0]
   145a4:	b2db      	uxtb	r3, r3
   145a6:	2b4e      	cmp	r3, #78	; 0x4e
   145a8:	d004      	beq.n	145b4 <endCall+0x94>
   145aa:	4b54      	ldr	r3, [pc, #336]	; (146fc <endCall+0x1dc>)
   145ac:	781b      	ldrb	r3, [r3, #0]
   145ae:	b2db      	uxtb	r3, r3
   145b0:	2b52      	cmp	r3, #82	; 0x52
   145b2:	d106      	bne.n	145c2 <endCall+0xa2>
   145b4:	4b52      	ldr	r3, [pc, #328]	; (14700 <endCall+0x1e0>)
   145b6:	781b      	ldrb	r3, [r3, #0]
   145b8:	b2db      	uxtb	r3, r3
   145ba:	2b4f      	cmp	r3, #79	; 0x4f
   145bc:	d101      	bne.n	145c2 <endCall+0xa2>
   145be:	2301      	movs	r3, #1
   145c0:	e000      	b.n	145c4 <endCall+0xa4>
   145c2:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
   145c4:	1c1a      	adds	r2, r3, #0
   145c6:	2301      	movs	r3, #1
   145c8:	4013      	ands	r3, r2
   145ca:	b2db      	uxtb	r3, r3
   145cc:	2b00      	cmp	r3, #0
   145ce:	d022      	beq.n	14616 <endCall+0xf6>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
   145d0:	4b4d      	ldr	r3, [pc, #308]	; (14708 <endCall+0x1e8>)
   145d2:	781b      	ldrb	r3, [r3, #0]
   145d4:	2b00      	cmp	r3, #0
   145d6:	d11e      	bne.n	14616 <endCall+0xf6>
   145d8:	4b4c      	ldr	r3, [pc, #304]	; (1470c <endCall+0x1ec>)
   145da:	781b      	ldrb	r3, [r3, #0]
   145dc:	2201      	movs	r2, #1
   145de:	4053      	eors	r3, r2
   145e0:	b2db      	uxtb	r3, r3
   145e2:	2b00      	cmp	r3, #0
   145e4:	d017      	beq.n	14616 <endCall+0xf6>
   145e6:	4b4a      	ldr	r3, [pc, #296]	; (14710 <endCall+0x1f0>)
   145e8:	795b      	ldrb	r3, [r3, #5]
   145ea:	b2db      	uxtb	r3, r3
   145ec:	2b54      	cmp	r3, #84	; 0x54
   145ee:	d112      	bne.n	14616 <endCall+0xf6>
   145f0:	4b48      	ldr	r3, [pc, #288]	; (14714 <endCall+0x1f4>)
   145f2:	789b      	ldrb	r3, [r3, #2]
   145f4:	2b01      	cmp	r3, #1
   145f6:	d90e      	bls.n	14616 <endCall+0xf6>
		{
			retries=1;
   145f8:	4b43      	ldr	r3, [pc, #268]	; (14708 <endCall+0x1e8>)
   145fa:	2201      	movs	r2, #1
   145fc:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   145fe:	4b46      	ldr	r3, [pc, #280]	; (14718 <endCall+0x1f8>)
   14600:	2201      	movs	r2, #1
   14602:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
   14604:	4b45      	ldr	r3, [pc, #276]	; (1471c <endCall+0x1fc>)
   14606:	4798      	blx	r3
   14608:	0002      	movs	r2, r0
   1460a:	4b45      	ldr	r3, [pc, #276]	; (14720 <endCall+0x200>)
   1460c:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
   1460e:	4b45      	ldr	r3, [pc, #276]	; (14724 <endCall+0x204>)
   14610:	781a      	ldrb	r2, [r3, #0]
   14612:	4b45      	ldr	r3, [pc, #276]	; (14728 <endCall+0x208>)
   14614:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14616:	4b37      	ldr	r3, [pc, #220]	; (146f4 <endCall+0x1d4>)
   14618:	78db      	ldrb	r3, [r3, #3]
   1461a:	2b00      	cmp	r3, #0
   1461c:	d047      	beq.n	146ae <endCall+0x18e>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
   1461e:	4b37      	ldr	r3, [pc, #220]	; (146fc <endCall+0x1dc>)
   14620:	781b      	ldrb	r3, [r3, #0]
   14622:	b2db      	uxtb	r3, r3
   14624:	2b49      	cmp	r3, #73	; 0x49
   14626:	d004      	beq.n	14632 <endCall+0x112>
   14628:	4b34      	ldr	r3, [pc, #208]	; (146fc <endCall+0x1dc>)
   1462a:	781b      	ldrb	r3, [r3, #0]
   1462c:	b2db      	uxtb	r3, r3
   1462e:	2b52      	cmp	r3, #82	; 0x52
   14630:	d137      	bne.n	146a2 <endCall+0x182>
   14632:	4b33      	ldr	r3, [pc, #204]	; (14700 <endCall+0x1e0>)
   14634:	781b      	ldrb	r3, [r3, #0]
   14636:	b2db      	uxtb	r3, r3
   14638:	2b4f      	cmp	r3, #79	; 0x4f
   1463a:	d132      	bne.n	146a2 <endCall+0x182>
   1463c:	4b31      	ldr	r3, [pc, #196]	; (14704 <endCall+0x1e4>)
   1463e:	781b      	ldrb	r3, [r3, #0]
   14640:	2b00      	cmp	r3, #0
   14642:	d02e      	beq.n	146a2 <endCall+0x182>
   14644:	4b39      	ldr	r3, [pc, #228]	; (1472c <endCall+0x20c>)
   14646:	795b      	ldrb	r3, [r3, #5]
   14648:	2b00      	cmp	r3, #0
   1464a:	d02a      	beq.n	146a2 <endCall+0x182>
		{
			m2mEventCalls++;
   1464c:	4b38      	ldr	r3, [pc, #224]	; (14730 <endCall+0x210>)
   1464e:	781b      	ldrb	r3, [r3, #0]
   14650:	3301      	adds	r3, #1
   14652:	b2da      	uxtb	r2, r3
   14654:	4b36      	ldr	r3, [pc, #216]	; (14730 <endCall+0x210>)
   14656:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
   14658:	4b36      	ldr	r3, [pc, #216]	; (14734 <endCall+0x214>)
   1465a:	781b      	ldrb	r3, [r3, #0]
   1465c:	2b00      	cmp	r3, #0
   1465e:	d006      	beq.n	1466e <endCall+0x14e>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
   14660:	4b35      	ldr	r3, [pc, #212]	; (14738 <endCall+0x218>)
   14662:	781b      	ldrb	r3, [r3, #0]
   14664:	2100      	movs	r1, #0
   14666:	0018      	movs	r0, r3
   14668:	4b34      	ldr	r3, [pc, #208]	; (1473c <endCall+0x21c>)
   1466a:	4798      	blx	r3
   1466c:	e016      	b.n	1469c <endCall+0x17c>
			}
			else
			{
				if(m2mEventCalls<2)
   1466e:	4b30      	ldr	r3, [pc, #192]	; (14730 <endCall+0x210>)
   14670:	781b      	ldrb	r3, [r3, #0]
   14672:	2b01      	cmp	r3, #1
   14674:	d80c      	bhi.n	14690 <endCall+0x170>
				{
					tempEventStageTime=xTaskGetTickCount();
   14676:	4b29      	ldr	r3, [pc, #164]	; (1471c <endCall+0x1fc>)
   14678:	4798      	blx	r3
   1467a:	0002      	movs	r2, r0
   1467c:	4b28      	ldr	r3, [pc, #160]	; (14720 <endCall+0x200>)
   1467e:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
   14680:	4b2d      	ldr	r3, [pc, #180]	; (14738 <endCall+0x218>)
   14682:	781a      	ldrb	r2, [r3, #0]
   14684:	4b28      	ldr	r3, [pc, #160]	; (14728 <endCall+0x208>)
   14686:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
   14688:	4b2d      	ldr	r3, [pc, #180]	; (14740 <endCall+0x220>)
   1468a:	2201      	movs	r2, #1
   1468c:	701a      	strb	r2, [r3, #0]
   1468e:	e005      	b.n	1469c <endCall+0x17c>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
   14690:	4b29      	ldr	r3, [pc, #164]	; (14738 <endCall+0x218>)
   14692:	781b      	ldrb	r3, [r3, #0]
   14694:	2103      	movs	r1, #3
   14696:	0018      	movs	r0, r3
   14698:	4b28      	ldr	r3, [pc, #160]	; (1473c <endCall+0x21c>)
   1469a:	4798      	blx	r3
				}
			}
			m2mEvent = false;
   1469c:	4b19      	ldr	r3, [pc, #100]	; (14704 <endCall+0x1e4>)
   1469e:	2200      	movs	r2, #0
   146a0:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
   146a2:	4b28      	ldr	r3, [pc, #160]	; (14744 <endCall+0x224>)
   146a4:	2200      	movs	r2, #0
   146a6:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
   146a8:	4b22      	ldr	r3, [pc, #136]	; (14734 <endCall+0x214>)
   146aa:	2200      	movs	r2, #0
   146ac:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
   146ae:	4b17      	ldr	r3, [pc, #92]	; (1470c <endCall+0x1ec>)
   146b0:	2200      	movs	r2, #0
   146b2:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   146b4:	4b11      	ldr	r3, [pc, #68]	; (146fc <endCall+0x1dc>)
   146b6:	224e      	movs	r2, #78	; 0x4e
   146b8:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   146ba:	4b11      	ldr	r3, [pc, #68]	; (14700 <endCall+0x1e0>)
   146bc:	224e      	movs	r2, #78	; 0x4e
   146be:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
   146c0:	4b21      	ldr	r3, [pc, #132]	; (14748 <endCall+0x228>)
   146c2:	2200      	movs	r2, #0
   146c4:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
   146c6:	4b15      	ldr	r3, [pc, #84]	; (1471c <endCall+0x1fc>)
   146c8:	4798      	blx	r3
   146ca:	0002      	movs	r2, r0
   146cc:	4b1f      	ldr	r3, [pc, #124]	; (1474c <endCall+0x22c>)
   146ce:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
   146d0:	4b1f      	ldr	r3, [pc, #124]	; (14750 <endCall+0x230>)
   146d2:	2200      	movs	r2, #0
   146d4:	701a      	strb	r2, [r3, #0]
}
   146d6:	46c0      	nop			; (mov r8, r8)
   146d8:	46bd      	mov	sp, r7
   146da:	bd80      	pop	{r7, pc}
   146dc:	200008e4 	.word	0x200008e4
   146e0:	2000099c 	.word	0x2000099c
   146e4:	000130ad 	.word	0x000130ad
   146e8:	0001da2d 	.word	0x0001da2d
   146ec:	00020969 	.word	0x00020969
   146f0:	20000944 	.word	0x20000944
   146f4:	2000082c 	.word	0x2000082c
   146f8:	20000a0f 	.word	0x20000a0f
   146fc:	200009e0 	.word	0x200009e0
   14700:	2000098f 	.word	0x2000098f
   14704:	20000943 	.word	0x20000943
   14708:	200008e5 	.word	0x200008e5
   1470c:	2000099e 	.word	0x2000099e
   14710:	20000854 	.word	0x20000854
   14714:	20000814 	.word	0x20000814
   14718:	200009d7 	.word	0x200009d7
   1471c:	00020ccd 	.word	0x00020ccd
   14720:	200009f4 	.word	0x200009f4
   14724:	20000963 	.word	0x20000963
   14728:	20000975 	.word	0x20000975
   1472c:	20000754 	.word	0x20000754
   14730:	200009d8 	.word	0x200009d8
   14734:	2000092c 	.word	0x2000092c
   14738:	2000092d 	.word	0x2000092d
   1473c:	0001c9ad 	.word	0x0001c9ad
   14740:	2000098e 	.word	0x2000098e
   14744:	200009d4 	.word	0x200009d4
   14748:	20000998 	.word	0x20000998
   1474c:	20000a14 	.word	0x20000a14
   14750:	20000972 	.word	0x20000972

00014754 <makeCall>:


void makeCall(void)
{
   14754:	b580      	push	{r7, lr}
   14756:	b086      	sub	sp, #24
   14758:	af00      	add	r7, sp, #0
	inCall=true;
   1475a:	4b20      	ldr	r3, [pc, #128]	; (147dc <makeCall+0x88>)
   1475c:	2201      	movs	r2, #1
   1475e:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
   14760:	1d3b      	adds	r3, r7, #4
   14762:	0018      	movs	r0, r3
   14764:	2314      	movs	r3, #20
   14766:	001a      	movs	r2, r3
   14768:	2100      	movs	r1, #0
   1476a:	4b1d      	ldr	r3, [pc, #116]	; (147e0 <makeCall+0x8c>)
   1476c:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
   1476e:	4b1d      	ldr	r3, [pc, #116]	; (147e4 <makeCall+0x90>)
   14770:	795b      	ldrb	r3, [r3, #5]
   14772:	2b00      	cmp	r3, #0
   14774:	d008      	beq.n	14788 <makeCall+0x34>
   14776:	4b1c      	ldr	r3, [pc, #112]	; (147e8 <makeCall+0x94>)
   14778:	781b      	ldrb	r3, [r3, #0]
   1477a:	2b00      	cmp	r3, #0
   1477c:	d004      	beq.n	14788 <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
   1477e:	1d3b      	adds	r3, r7, #4
   14780:	0018      	movs	r0, r3
   14782:	4b1a      	ldr	r3, [pc, #104]	; (147ec <makeCall+0x98>)
   14784:	4798      	blx	r3
   14786:	e00f      	b.n	147a8 <makeCall+0x54>
	}
	else
	{
		if(retries)
   14788:	4b19      	ldr	r3, [pc, #100]	; (147f0 <makeCall+0x9c>)
   1478a:	781b      	ldrb	r3, [r3, #0]
   1478c:	2b00      	cmp	r3, #0
   1478e:	d007      	beq.n	147a0 <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
   14790:	4b18      	ldr	r3, [pc, #96]	; (147f4 <makeCall+0xa0>)
   14792:	791a      	ldrb	r2, [r3, #4]
   14794:	1d3b      	adds	r3, r7, #4
   14796:	0011      	movs	r1, r2
   14798:	0018      	movs	r0, r3
   1479a:	4b17      	ldr	r3, [pc, #92]	; (147f8 <makeCall+0xa4>)
   1479c:	4798      	blx	r3
   1479e:	e003      	b.n	147a8 <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
   147a0:	1d3b      	adds	r3, r7, #4
   147a2:	0018      	movs	r0, r3
   147a4:	4b15      	ldr	r3, [pc, #84]	; (147fc <makeCall+0xa8>)
   147a6:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
   147a8:	1d3b      	adds	r3, r7, #4
   147aa:	0018      	movs	r0, r3
   147ac:	4b14      	ldr	r3, [pc, #80]	; (14800 <makeCall+0xac>)
   147ae:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
   147b0:	1d3b      	adds	r3, r7, #4
   147b2:	2200      	movs	r2, #0
   147b4:	0019      	movs	r1, r3
   147b6:	2003      	movs	r0, #3
   147b8:	4b12      	ldr	r3, [pc, #72]	; (14804 <makeCall+0xb0>)
   147ba:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
   147bc:	4b12      	ldr	r3, [pc, #72]	; (14808 <makeCall+0xb4>)
   147be:	4798      	blx	r3
   147c0:	0002      	movs	r2, r0
   147c2:	4b12      	ldr	r3, [pc, #72]	; (1480c <makeCall+0xb8>)
   147c4:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
   147c6:	4b12      	ldr	r3, [pc, #72]	; (14810 <makeCall+0xbc>)
   147c8:	2252      	movs	r2, #82	; 0x52
   147ca:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
   147cc:	4b11      	ldr	r3, [pc, #68]	; (14814 <makeCall+0xc0>)
   147ce:	224f      	movs	r2, #79	; 0x4f
   147d0:	701a      	strb	r2, [r3, #0]
}
   147d2:	46c0      	nop			; (mov r8, r8)
   147d4:	46bd      	mov	sp, r7
   147d6:	b006      	add	sp, #24
   147d8:	bd80      	pop	{r7, pc}
   147da:	46c0      	nop			; (mov r8, r8)
   147dc:	2000099c 	.word	0x2000099c
   147e0:	00029657 	.word	0x00029657
   147e4:	20000754 	.word	0x20000754
   147e8:	20000943 	.word	0x20000943
   147ec:	00010b09 	.word	0x00010b09
   147f0:	200008e5 	.word	0x200008e5
   147f4:	20000814 	.word	0x20000814
   147f8:	00010919 	.word	0x00010919
   147fc:	00010d21 	.word	0x00010d21
   14800:	00012ee9 	.word	0x00012ee9
   14804:	0001da2d 	.word	0x0001da2d
   14808:	00020ccd 	.word	0x00020ccd
   1480c:	20000a18 	.word	0x20000a18
   14810:	200009e0 	.word	0x200009e0
   14814:	2000098f 	.word	0x2000098f

00014818 <acceptCall>:

void acceptCall(void)
{
   14818:	b580      	push	{r7, lr}
   1481a:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
   1481c:	4b0a      	ldr	r3, [pc, #40]	; (14848 <acceptCall+0x30>)
   1481e:	2200      	movs	r2, #0
   14820:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
   14822:	4b0a      	ldr	r3, [pc, #40]	; (1484c <acceptCall+0x34>)
   14824:	2201      	movs	r2, #1
   14826:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
   14828:	4b09      	ldr	r3, [pc, #36]	; (14850 <acceptCall+0x38>)
   1482a:	4798      	blx	r3
	currentStatus = 'I';
   1482c:	4b09      	ldr	r3, [pc, #36]	; (14854 <acceptCall+0x3c>)
   1482e:	2249      	movs	r2, #73	; 0x49
   14830:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
   14832:	4b09      	ldr	r3, [pc, #36]	; (14858 <acceptCall+0x40>)
   14834:	2249      	movs	r2, #73	; 0x49
   14836:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
   14838:	2101      	movs	r1, #1
   1483a:	204d      	movs	r0, #77	; 0x4d
   1483c:	4b07      	ldr	r3, [pc, #28]	; (1485c <acceptCall+0x44>)
   1483e:	4798      	blx	r3
	//displayInIncomingCall
}
   14840:	46c0      	nop			; (mov r8, r8)
   14842:	46bd      	mov	sp, r7
   14844:	bd80      	pop	{r7, pc}
   14846:	46c0      	nop			; (mov r8, r8)
   14848:	20000998 	.word	0x20000998
   1484c:	2000099e 	.word	0x2000099e
   14850:	00012f81 	.word	0x00012f81
   14854:	200009e0 	.word	0x200009e0
   14858:	2000098f 	.word	0x2000098f
   1485c:	00014861 	.word	0x00014861

00014860 <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
   14860:	b580      	push	{r7, lr}
   14862:	b082      	sub	sp, #8
   14864:	af00      	add	r7, sp, #0
   14866:	0002      	movs	r2, r0
   14868:	1dfb      	adds	r3, r7, #7
   1486a:	701a      	strb	r2, [r3, #0]
   1486c:	1dbb      	adds	r3, r7, #6
   1486e:	1c0a      	adds	r2, r1, #0
   14870:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
   14872:	4b14      	ldr	r3, [pc, #80]	; (148c4 <playSound+0x64>)
   14874:	4798      	blx	r3
	bplaySound = true;
   14876:	4b14      	ldr	r3, [pc, #80]	; (148c8 <playSound+0x68>)
   14878:	2201      	movs	r2, #1
   1487a:	701a      	strb	r2, [r3, #0]
	if (newAction)
   1487c:	1dbb      	adds	r3, r7, #6
   1487e:	781b      	ldrb	r3, [r3, #0]
   14880:	2b00      	cmp	r3, #0
   14882:	d016      	beq.n	148b2 <playSound+0x52>
	{
		maxPlayingFiles=1;
   14884:	4b11      	ldr	r3, [pc, #68]	; (148cc <playSound+0x6c>)
   14886:	2201      	movs	r2, #1
   14888:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
   1488a:	4b11      	ldr	r3, [pc, #68]	; (148d0 <playSound+0x70>)
   1488c:	2200      	movs	r2, #0
   1488e:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
   14890:	4b0f      	ldr	r3, [pc, #60]	; (148d0 <playSound+0x70>)
   14892:	781b      	ldrb	r3, [r3, #0]
   14894:	0019      	movs	r1, r3
   14896:	4b0f      	ldr	r3, [pc, #60]	; (148d4 <playSound+0x74>)
   14898:	1dfa      	adds	r2, r7, #7
   1489a:	7812      	ldrb	r2, [r2, #0]
   1489c:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
   1489e:	4b0c      	ldr	r3, [pc, #48]	; (148d0 <playSound+0x70>)
   148a0:	781b      	ldrb	r3, [r3, #0]
   148a2:	3301      	adds	r3, #1
   148a4:	4a0b      	ldr	r2, [pc, #44]	; (148d4 <playSound+0x74>)
   148a6:	2100      	movs	r1, #0
   148a8:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
   148aa:	4b0b      	ldr	r3, [pc, #44]	; (148d8 <playSound+0x78>)
   148ac:	1dfa      	adds	r2, r7, #7
   148ae:	7812      	ldrb	r2, [r2, #0]
   148b0:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
   148b2:	4b0a      	ldr	r3, [pc, #40]	; (148dc <playSound+0x7c>)
   148b4:	1dfa      	adds	r2, r7, #7
   148b6:	7812      	ldrb	r2, [r2, #0]
   148b8:	701a      	strb	r2, [r3, #0]
}
   148ba:	46c0      	nop			; (mov r8, r8)
   148bc:	46bd      	mov	sp, r7
   148be:	b002      	add	sp, #8
   148c0:	bd80      	pop	{r7, pc}
   148c2:	46c0      	nop			; (mov r8, r8)
   148c4:	0001310d 	.word	0x0001310d
   148c8:	20000a66 	.word	0x20000a66
   148cc:	200009d9 	.word	0x200009d9
   148d0:	200009c9 	.word	0x200009c9
   148d4:	2000094c 	.word	0x2000094c
   148d8:	20000963 	.word	0x20000963
   148dc:	200009c7 	.word	0x200009c7

000148e0 <playSoundElligible>:

bool playSoundElligible(void)
{
   148e0:	b580      	push	{r7, lr}
   148e2:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
   148e4:	4b0d      	ldr	r3, [pc, #52]	; (1491c <playSoundElligible+0x3c>)
   148e6:	781b      	ldrb	r3, [r3, #0]
   148e8:	2b00      	cmp	r3, #0
   148ea:	d00e      	beq.n	1490a <playSoundElligible+0x2a>
   148ec:	4b0c      	ldr	r3, [pc, #48]	; (14920 <playSoundElligible+0x40>)
   148ee:	4798      	blx	r3
   148f0:	0002      	movs	r2, r0
   148f2:	4b0c      	ldr	r3, [pc, #48]	; (14924 <playSoundElligible+0x44>)
   148f4:	681b      	ldr	r3, [r3, #0]
   148f6:	1ad3      	subs	r3, r2, r3
   148f8:	4a0b      	ldr	r2, [pc, #44]	; (14928 <playSoundElligible+0x48>)
   148fa:	7812      	ldrb	r2, [r2, #0]
   148fc:	0011      	movs	r1, r2
   148fe:	2264      	movs	r2, #100	; 0x64
   14900:	434a      	muls	r2, r1
   14902:	4293      	cmp	r3, r2
   14904:	d901      	bls.n	1490a <playSoundElligible+0x2a>
   14906:	2301      	movs	r3, #1
   14908:	e000      	b.n	1490c <playSoundElligible+0x2c>
   1490a:	2300      	movs	r3, #0
   1490c:	1c1a      	adds	r2, r3, #0
   1490e:	2301      	movs	r3, #1
   14910:	4013      	ands	r3, r2
   14912:	b2db      	uxtb	r3, r3
}
   14914:	0018      	movs	r0, r3
   14916:	46bd      	mov	sp, r7
   14918:	bd80      	pop	{r7, pc}
   1491a:	46c0      	nop			; (mov r8, r8)
   1491c:	20000a66 	.word	0x20000a66
   14920:	00020ccd 	.word	0x00020ccd
   14924:	20000a40 	.word	0x20000a40
   14928:	200009da 	.word	0x200009da

0001492c <triggerPlaySound>:

void triggerPlaySound(void)
{
   1492c:	b580      	push	{r7, lr}
   1492e:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
   14930:	4b0b      	ldr	r3, [pc, #44]	; (14960 <triggerPlaySound+0x34>)
   14932:	781b      	ldrb	r3, [r3, #0]
   14934:	2b01      	cmp	r3, #1
   14936:	d906      	bls.n	14946 <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
   14938:	4b0a      	ldr	r3, [pc, #40]	; (14964 <triggerPlaySound+0x38>)
   1493a:	781b      	ldrb	r3, [r3, #0]
   1493c:	2100      	movs	r1, #0
   1493e:	0018      	movs	r0, r3
   14940:	4b09      	ldr	r3, [pc, #36]	; (14968 <triggerPlaySound+0x3c>)
   14942:	4798      	blx	r3
   14944:	e005      	b.n	14952 <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
   14946:	4b07      	ldr	r3, [pc, #28]	; (14964 <triggerPlaySound+0x38>)
   14948:	781b      	ldrb	r3, [r3, #0]
   1494a:	2101      	movs	r1, #1
   1494c:	0018      	movs	r0, r3
   1494e:	4b06      	ldr	r3, [pc, #24]	; (14968 <triggerPlaySound+0x3c>)
   14950:	4798      	blx	r3
	}
	bplaySound = false;
   14952:	4b06      	ldr	r3, [pc, #24]	; (1496c <triggerPlaySound+0x40>)
   14954:	2200      	movs	r2, #0
   14956:	701a      	strb	r2, [r3, #0]
}
   14958:	46c0      	nop			; (mov r8, r8)
   1495a:	46bd      	mov	sp, r7
   1495c:	bd80      	pop	{r7, pc}
   1495e:	46c0      	nop			; (mov r8, r8)
   14960:	200009d9 	.word	0x200009d9
   14964:	200009c7 	.word	0x200009c7
   14968:	0001313d 	.word	0x0001313d
   1496c:	20000a66 	.word	0x20000a66

00014970 <playSoundAgain>:

void playSoundAgain(char *string)
{
   14970:	b580      	push	{r7, lr}
   14972:	b082      	sub	sp, #8
   14974:	af00      	add	r7, sp, #0
   14976:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
   14978:	4b1c      	ldr	r3, [pc, #112]	; (149ec <playSoundAgain+0x7c>)
   1497a:	781b      	ldrb	r3, [r3, #0]
   1497c:	2201      	movs	r2, #1
   1497e:	4053      	eors	r3, r2
   14980:	b2db      	uxtb	r3, r3
   14982:	2b00      	cmp	r3, #0
   14984:	d02e      	beq.n	149e4 <playSoundAgain+0x74>
   14986:	687b      	ldr	r3, [r7, #4]
   14988:	0018      	movs	r0, r3
   1498a:	4b19      	ldr	r3, [pc, #100]	; (149f0 <playSoundAgain+0x80>)
   1498c:	4798      	blx	r3
   1498e:	1e03      	subs	r3, r0, #0
   14990:	d028      	beq.n	149e4 <playSoundAgain+0x74>
	{
		if(maxPlayingFiles>1)
   14992:	4b18      	ldr	r3, [pc, #96]	; (149f4 <playSoundAgain+0x84>)
   14994:	781b      	ldrb	r3, [r3, #0]
   14996:	2b01      	cmp	r3, #1
   14998:	d91c      	bls.n	149d4 <playSoundAgain+0x64>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
   1499a:	4b17      	ldr	r3, [pc, #92]	; (149f8 <playSoundAgain+0x88>)
   1499c:	781b      	ldrb	r3, [r3, #0]
   1499e:	001a      	movs	r2, r3
   149a0:	4b14      	ldr	r3, [pc, #80]	; (149f4 <playSoundAgain+0x84>)
   149a2:	781b      	ldrb	r3, [r3, #0]
   149a4:	3b01      	subs	r3, #1
   149a6:	429a      	cmp	r2, r3
   149a8:	da0f      	bge.n	149ca <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
   149aa:	4b13      	ldr	r3, [pc, #76]	; (149f8 <playSoundAgain+0x88>)
   149ac:	781b      	ldrb	r3, [r3, #0]
   149ae:	3301      	adds	r3, #1
   149b0:	b2da      	uxtb	r2, r3
   149b2:	4b11      	ldr	r3, [pc, #68]	; (149f8 <playSoundAgain+0x88>)
   149b4:	701a      	strb	r2, [r3, #0]
   149b6:	4b10      	ldr	r3, [pc, #64]	; (149f8 <playSoundAgain+0x88>)
   149b8:	781b      	ldrb	r3, [r3, #0]
   149ba:	001a      	movs	r2, r3
   149bc:	4b0f      	ldr	r3, [pc, #60]	; (149fc <playSoundAgain+0x8c>)
   149be:	5c9b      	ldrb	r3, [r3, r2]
   149c0:	2100      	movs	r1, #0
   149c2:	0018      	movs	r0, r3
   149c4:	4b0e      	ldr	r3, [pc, #56]	; (14a00 <playSoundAgain+0x90>)
   149c6:	4798      	blx	r3
		else if(maxPlayingFiles==1)
		{
			playSound('M',true);
		}
	}
}
   149c8:	e00c      	b.n	149e4 <playSoundAgain+0x74>
				playSound('M',true);
   149ca:	2101      	movs	r1, #1
   149cc:	204d      	movs	r0, #77	; 0x4d
   149ce:	4b0c      	ldr	r3, [pc, #48]	; (14a00 <playSoundAgain+0x90>)
   149d0:	4798      	blx	r3
}
   149d2:	e007      	b.n	149e4 <playSoundAgain+0x74>
		else if(maxPlayingFiles==1)
   149d4:	4b07      	ldr	r3, [pc, #28]	; (149f4 <playSoundAgain+0x84>)
   149d6:	781b      	ldrb	r3, [r3, #0]
   149d8:	2b01      	cmp	r3, #1
   149da:	d103      	bne.n	149e4 <playSoundAgain+0x74>
			playSound('M',true);
   149dc:	2101      	movs	r1, #1
   149de:	204d      	movs	r0, #77	; 0x4d
   149e0:	4b07      	ldr	r3, [pc, #28]	; (14a00 <playSoundAgain+0x90>)
   149e2:	4798      	blx	r3
}
   149e4:	46c0      	nop			; (mov r8, r8)
   149e6:	46bd      	mov	sp, r7
   149e8:	b002      	add	sp, #8
   149ea:	bd80      	pop	{r7, pc}
   149ec:	20000a66 	.word	0x20000a66
   149f0:	000138b1 	.word	0x000138b1
   149f4:	200009d9 	.word	0x200009d9
   149f8:	200009c9 	.word	0x200009c9
   149fc:	2000094c 	.word	0x2000094c
   14a00:	00014861 	.word	0x00014861

00014a04 <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
   14a04:	b580      	push	{r7, lr}
   14a06:	b082      	sub	sp, #8
   14a08:	af00      	add	r7, sp, #0
   14a0a:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
   14a0c:	687b      	ldr	r3, [r7, #4]
   14a0e:	0018      	movs	r0, r3
   14a10:	4b14      	ldr	r3, [pc, #80]	; (14a64 <playRepeatedFiles+0x60>)
   14a12:	4798      	blx	r3
   14a14:	0003      	movs	r3, r0
   14a16:	2b0e      	cmp	r3, #14
   14a18:	d81f      	bhi.n	14a5a <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
   14a1a:	4b13      	ldr	r3, [pc, #76]	; (14a68 <playRepeatedFiles+0x64>)
   14a1c:	2200      	movs	r2, #0
   14a1e:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
   14a20:	687b      	ldr	r3, [r7, #4]
   14a22:	0018      	movs	r0, r3
   14a24:	4b0f      	ldr	r3, [pc, #60]	; (14a64 <playRepeatedFiles+0x60>)
   14a26:	4798      	blx	r3
   14a28:	0003      	movs	r3, r0
   14a2a:	b2da      	uxtb	r2, r3
   14a2c:	4b0f      	ldr	r3, [pc, #60]	; (14a6c <playRepeatedFiles+0x68>)
   14a2e:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
   14a30:	687a      	ldr	r2, [r7, #4]
   14a32:	4b0f      	ldr	r3, [pc, #60]	; (14a70 <playRepeatedFiles+0x6c>)
   14a34:	0011      	movs	r1, r2
   14a36:	0018      	movs	r0, r3
   14a38:	4b0e      	ldr	r3, [pc, #56]	; (14a74 <playRepeatedFiles+0x70>)
   14a3a:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
   14a3c:	4b0e      	ldr	r3, [pc, #56]	; (14a78 <playRepeatedFiles+0x74>)
   14a3e:	4798      	blx	r3
   14a40:	0002      	movs	r2, r0
   14a42:	4b0e      	ldr	r3, [pc, #56]	; (14a7c <playRepeatedFiles+0x78>)
   14a44:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
   14a46:	4b08      	ldr	r3, [pc, #32]	; (14a68 <playRepeatedFiles+0x64>)
   14a48:	781b      	ldrb	r3, [r3, #0]
   14a4a:	001a      	movs	r2, r3
   14a4c:	4b08      	ldr	r3, [pc, #32]	; (14a70 <playRepeatedFiles+0x6c>)
   14a4e:	5c9a      	ldrb	r2, [r3, r2]
   14a50:	4b0b      	ldr	r3, [pc, #44]	; (14a80 <playRepeatedFiles+0x7c>)
   14a52:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
   14a54:	4b0b      	ldr	r3, [pc, #44]	; (14a84 <playRepeatedFiles+0x80>)
   14a56:	2201      	movs	r2, #1
   14a58:	701a      	strb	r2, [r3, #0]
	}
}
   14a5a:	46c0      	nop			; (mov r8, r8)
   14a5c:	46bd      	mov	sp, r7
   14a5e:	b002      	add	sp, #8
   14a60:	bd80      	pop	{r7, pc}
   14a62:	46c0      	nop			; (mov r8, r8)
   14a64:	000298e7 	.word	0x000298e7
   14a68:	200009c9 	.word	0x200009c9
   14a6c:	200009d9 	.word	0x200009d9
   14a70:	2000094c 	.word	0x2000094c
   14a74:	000298d7 	.word	0x000298d7
   14a78:	00020ccd 	.word	0x00020ccd
   14a7c:	20000a40 	.word	0x20000a40
   14a80:	200009c7 	.word	0x200009c7
   14a84:	20000a66 	.word	0x20000a66

00014a88 <callTimerExpire>:

bool callTimerExpire(void)
{
   14a88:	b580      	push	{r7, lr}
   14a8a:	af00      	add	r7, sp, #0
	if(isRinging)
   14a8c:	4b12      	ldr	r3, [pc, #72]	; (14ad8 <callTimerExpire+0x50>)
   14a8e:	781b      	ldrb	r3, [r3, #0]
   14a90:	b2db      	uxtb	r3, r3
   14a92:	2b00      	cmp	r3, #0
   14a94:	d00a      	beq.n	14aac <callTimerExpire+0x24>
	{
		if(xTaskGetTickCount()-lastRingStateChangeTime>3000)
   14a96:	4b11      	ldr	r3, [pc, #68]	; (14adc <callTimerExpire+0x54>)
   14a98:	4798      	blx	r3
   14a9a:	0002      	movs	r2, r0
   14a9c:	4b10      	ldr	r3, [pc, #64]	; (14ae0 <callTimerExpire+0x58>)
   14a9e:	681b      	ldr	r3, [r3, #0]
   14aa0:	1ad3      	subs	r3, r2, r3
   14aa2:	4a10      	ldr	r2, [pc, #64]	; (14ae4 <callTimerExpire+0x5c>)
   14aa4:	4293      	cmp	r3, r2
   14aa6:	d912      	bls.n	14ace <callTimerExpire+0x46>
		{
			return true;
   14aa8:	2301      	movs	r3, #1
   14aaa:	e011      	b.n	14ad0 <callTimerExpire+0x48>
		}
	}
	else
	{
		return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
   14aac:	4b0b      	ldr	r3, [pc, #44]	; (14adc <callTimerExpire+0x54>)
   14aae:	4798      	blx	r3
   14ab0:	0002      	movs	r2, r0
   14ab2:	4b0d      	ldr	r3, [pc, #52]	; (14ae8 <callTimerExpire+0x60>)
   14ab4:	681b      	ldr	r3, [r3, #0]
   14ab6:	1ad2      	subs	r2, r2, r3
   14ab8:	4b0c      	ldr	r3, [pc, #48]	; (14aec <callTimerExpire+0x64>)
   14aba:	881b      	ldrh	r3, [r3, #0]
   14abc:	0019      	movs	r1, r3
   14abe:	2364      	movs	r3, #100	; 0x64
   14ac0:	434b      	muls	r3, r1
   14ac2:	0019      	movs	r1, r3
   14ac4:	2300      	movs	r3, #0
   14ac6:	428a      	cmp	r2, r1
   14ac8:	415b      	adcs	r3, r3
   14aca:	b2db      	uxtb	r3, r3
   14acc:	e000      	b.n	14ad0 <callTimerExpire+0x48>
	}
	return false;
   14ace:	2300      	movs	r3, #0
}
   14ad0:	0018      	movs	r0, r3
   14ad2:	46bd      	mov	sp, r7
   14ad4:	bd80      	pop	{r7, pc}
   14ad6:	46c0      	nop			; (mov r8, r8)
   14ad8:	2000088e 	.word	0x2000088e
   14adc:	00020ccd 	.word	0x00020ccd
   14ae0:	200008cc 	.word	0x200008cc
   14ae4:	00000bb8 	.word	0x00000bb8
   14ae8:	20000a18 	.word	0x20000a18
   14aec:	20000964 	.word	0x20000964

00014af0 <OutGoingcallState>:

char OutGoingcallState(char *response)
{
   14af0:	b580      	push	{r7, lr}
   14af2:	b082      	sub	sp, #8
   14af4:	af00      	add	r7, sp, #0
   14af6:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
   14af8:	4a16      	ldr	r2, [pc, #88]	; (14b54 <OutGoingcallState+0x64>)
   14afa:	687b      	ldr	r3, [r7, #4]
   14afc:	0011      	movs	r1, r2
   14afe:	0018      	movs	r0, r3
   14b00:	4b15      	ldr	r3, [pc, #84]	; (14b58 <OutGoingcallState+0x68>)
   14b02:	4798      	blx	r3
   14b04:	1e03      	subs	r3, r0, #0
   14b06:	d001      	beq.n	14b0c <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
   14b08:	2344      	movs	r3, #68	; 0x44
   14b0a:	e01e      	b.n	14b4a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
   14b0c:	4a13      	ldr	r2, [pc, #76]	; (14b5c <OutGoingcallState+0x6c>)
   14b0e:	687b      	ldr	r3, [r7, #4]
   14b10:	0011      	movs	r1, r2
   14b12:	0018      	movs	r0, r3
   14b14:	4b10      	ldr	r3, [pc, #64]	; (14b58 <OutGoingcallState+0x68>)
   14b16:	4798      	blx	r3
   14b18:	1e03      	subs	r3, r0, #0
   14b1a:	d001      	beq.n	14b20 <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
   14b1c:	2352      	movs	r3, #82	; 0x52
   14b1e:	e014      	b.n	14b4a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
   14b20:	4a0f      	ldr	r2, [pc, #60]	; (14b60 <OutGoingcallState+0x70>)
   14b22:	687b      	ldr	r3, [r7, #4]
   14b24:	0011      	movs	r1, r2
   14b26:	0018      	movs	r0, r3
   14b28:	4b0b      	ldr	r3, [pc, #44]	; (14b58 <OutGoingcallState+0x68>)
   14b2a:	4798      	blx	r3
   14b2c:	1e03      	subs	r3, r0, #0
   14b2e:	d001      	beq.n	14b34 <OutGoingcallState+0x44>
	{
		return 'I';								//active call
   14b30:	2349      	movs	r3, #73	; 0x49
   14b32:	e00a      	b.n	14b4a <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
   14b34:	4a0b      	ldr	r2, [pc, #44]	; (14b64 <OutGoingcallState+0x74>)
   14b36:	687b      	ldr	r3, [r7, #4]
   14b38:	0011      	movs	r1, r2
   14b3a:	0018      	movs	r0, r3
   14b3c:	4b06      	ldr	r3, [pc, #24]	; (14b58 <OutGoingcallState+0x68>)
   14b3e:	4798      	blx	r3
   14b40:	1e03      	subs	r3, r0, #0
   14b42:	d001      	beq.n	14b48 <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
   14b44:	2345      	movs	r3, #69	; 0x45
   14b46:	e000      	b.n	14b4a <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
   14b48:	234e      	movs	r3, #78	; 0x4e
	}
}
   14b4a:	0018      	movs	r0, r3
   14b4c:	46bd      	mov	sp, r7
   14b4e:	b002      	add	sp, #8
   14b50:	bd80      	pop	{r7, pc}
   14b52:	46c0      	nop			; (mov r8, r8)
   14b54:	0002a888 	.word	0x0002a888
   14b58:	00029917 	.word	0x00029917
   14b5c:	0002a898 	.word	0x0002a898
   14b60:	0002a8a8 	.word	0x0002a8a8
   14b64:	0002a8b8 	.word	0x0002a8b8

00014b68 <registerEvent>:

bool registerEvent(char eventType)
{
   14b68:	b580      	push	{r7, lr}
   14b6a:	b082      	sub	sp, #8
   14b6c:	af00      	add	r7, sp, #0
   14b6e:	0002      	movs	r2, r0
   14b70:	1dfb      	adds	r3, r7, #7
   14b72:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
   14b74:	4b36      	ldr	r3, [pc, #216]	; (14c50 <registerEvent+0xe8>)
   14b76:	789b      	ldrb	r3, [r3, #2]
   14b78:	2b00      	cmp	r3, #0
   14b7a:	d004      	beq.n	14b86 <registerEvent+0x1e>
   14b7c:	4b35      	ldr	r3, [pc, #212]	; (14c54 <registerEvent+0xec>)
   14b7e:	795b      	ldrb	r3, [r3, #5]
   14b80:	b2db      	uxtb	r3, r3
   14b82:	2b4e      	cmp	r3, #78	; 0x4e
   14b84:	d101      	bne.n	14b8a <registerEvent+0x22>
	{
		return true;
   14b86:	2301      	movs	r3, #1
   14b88:	e05d      	b.n	14c46 <registerEvent+0xde>
	}
	if (!initialized)
   14b8a:	4b33      	ldr	r3, [pc, #204]	; (14c58 <registerEvent+0xf0>)
   14b8c:	781b      	ldrb	r3, [r3, #0]
   14b8e:	b2db      	uxtb	r3, r3
   14b90:	2201      	movs	r2, #1
   14b92:	4053      	eors	r3, r2
   14b94:	b2db      	uxtb	r3, r3
   14b96:	2b00      	cmp	r3, #0
   14b98:	d001      	beq.n	14b9e <registerEvent+0x36>
	{
		return true;
   14b9a:	2301      	movs	r3, #1
   14b9c:	e053      	b.n	14c46 <registerEvent+0xde>
	}
	if(!eventStaged && actionType==eventType)
   14b9e:	4b2f      	ldr	r3, [pc, #188]	; (14c5c <registerEvent+0xf4>)
   14ba0:	781b      	ldrb	r3, [r3, #0]
   14ba2:	2201      	movs	r2, #1
   14ba4:	4053      	eors	r3, r2
   14ba6:	b2db      	uxtb	r3, r3
   14ba8:	2b00      	cmp	r3, #0
   14baa:	d007      	beq.n	14bbc <registerEvent+0x54>
   14bac:	4b2c      	ldr	r3, [pc, #176]	; (14c60 <registerEvent+0xf8>)
   14bae:	781b      	ldrb	r3, [r3, #0]
   14bb0:	1dfa      	adds	r2, r7, #7
   14bb2:	7812      	ldrb	r2, [r2, #0]
   14bb4:	429a      	cmp	r2, r3
   14bb6:	d101      	bne.n	14bbc <registerEvent+0x54>
	{
		return true;
   14bb8:	2301      	movs	r3, #1
   14bba:	e044      	b.n	14c46 <registerEvent+0xde>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14bbc:	4b29      	ldr	r3, [pc, #164]	; (14c64 <registerEvent+0xfc>)
   14bbe:	781b      	ldrb	r3, [r3, #0]
   14bc0:	b2db      	uxtb	r3, r3
   14bc2:	2b4e      	cmp	r3, #78	; 0x4e
   14bc4:	d13e      	bne.n	14c44 <registerEvent+0xdc>
   14bc6:	4b28      	ldr	r3, [pc, #160]	; (14c68 <registerEvent+0x100>)
   14bc8:	781b      	ldrb	r3, [r3, #0]
   14bca:	b2db      	uxtb	r3, r3
   14bcc:	2b4e      	cmp	r3, #78	; 0x4e
   14bce:	d139      	bne.n	14c44 <registerEvent+0xdc>
   14bd0:	4b26      	ldr	r3, [pc, #152]	; (14c6c <registerEvent+0x104>)
   14bd2:	781b      	ldrb	r3, [r3, #0]
   14bd4:	2b00      	cmp	r3, #0
   14bd6:	d035      	beq.n	14c44 <registerEvent+0xdc>
   14bd8:	4b20      	ldr	r3, [pc, #128]	; (14c5c <registerEvent+0xf4>)
   14bda:	781b      	ldrb	r3, [r3, #0]
   14bdc:	2201      	movs	r2, #1
   14bde:	4053      	eors	r3, r2
   14be0:	b2db      	uxtb	r3, r3
   14be2:	2b00      	cmp	r3, #0
   14be4:	d02e      	beq.n	14c44 <registerEvent+0xdc>
   14be6:	4b22      	ldr	r3, [pc, #136]	; (14c70 <registerEvent+0x108>)
   14be8:	781b      	ldrb	r3, [r3, #0]
   14bea:	2201      	movs	r2, #1
   14bec:	4053      	eors	r3, r2
   14bee:	b2db      	uxtb	r3, r3
   14bf0:	2b00      	cmp	r3, #0
   14bf2:	d027      	beq.n	14c44 <registerEvent+0xdc>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
   14bf4:	4b17      	ldr	r3, [pc, #92]	; (14c54 <registerEvent+0xec>)
   14bf6:	7a5b      	ldrb	r3, [r3, #9]
   14bf8:	b2db      	uxtb	r3, r3
   14bfa:	2b00      	cmp	r3, #0
   14bfc:	d005      	beq.n	14c0a <registerEvent+0xa2>
   14bfe:	4b1d      	ldr	r3, [pc, #116]	; (14c74 <registerEvent+0x10c>)
   14c00:	4798      	blx	r3
   14c02:	1e03      	subs	r3, r0, #0
   14c04:	d001      	beq.n	14c0a <registerEvent+0xa2>
		{
			return true;
   14c06:	2301      	movs	r3, #1
   14c08:	e01d      	b.n	14c46 <registerEvent+0xde>
		}
		retries=0;
   14c0a:	4b1b      	ldr	r3, [pc, #108]	; (14c78 <registerEvent+0x110>)
   14c0c:	2200      	movs	r2, #0
   14c0e:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
   14c10:	4b10      	ldr	r3, [pc, #64]	; (14c54 <registerEvent+0xec>)
   14c12:	7a1b      	ldrb	r3, [r3, #8]
   14c14:	b2db      	uxtb	r3, r3
   14c16:	2b00      	cmp	r3, #0
   14c18:	d00c      	beq.n	14c34 <registerEvent+0xcc>
		{
			tempEventStageTime=xTaskGetTickCount();
   14c1a:	4b18      	ldr	r3, [pc, #96]	; (14c7c <registerEvent+0x114>)
   14c1c:	4798      	blx	r3
   14c1e:	0002      	movs	r2, r0
   14c20:	4b17      	ldr	r3, [pc, #92]	; (14c80 <registerEvent+0x118>)
   14c22:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
   14c24:	4b17      	ldr	r3, [pc, #92]	; (14c84 <registerEvent+0x11c>)
   14c26:	1dfa      	adds	r2, r7, #7
   14c28:	7812      	ldrb	r2, [r2, #0]
   14c2a:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
   14c2c:	4b0b      	ldr	r3, [pc, #44]	; (14c5c <registerEvent+0xf4>)
   14c2e:	2201      	movs	r2, #1
   14c30:	701a      	strb	r2, [r3, #0]
   14c32:	e005      	b.n	14c40 <registerEvent+0xd8>
		}
		else
		{
			actionType = eventType;
   14c34:	4b0a      	ldr	r3, [pc, #40]	; (14c60 <registerEvent+0xf8>)
   14c36:	1dfa      	adds	r2, r7, #7
   14c38:	7812      	ldrb	r2, [r2, #0]
   14c3a:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
   14c3c:	4b12      	ldr	r3, [pc, #72]	; (14c88 <registerEvent+0x120>)
   14c3e:	4798      	blx	r3
		}
		return true;
   14c40:	2301      	movs	r3, #1
   14c42:	e000      	b.n	14c46 <registerEvent+0xde>
	}
	else
	{
		return false;
   14c44:	2300      	movs	r3, #0
	}
}
   14c46:	0018      	movs	r0, r3
   14c48:	46bd      	mov	sp, r7
   14c4a:	b002      	add	sp, #8
   14c4c:	bd80      	pop	{r7, pc}
   14c4e:	46c0      	nop			; (mov r8, r8)
   14c50:	20000814 	.word	0x20000814
   14c54:	20000854 	.word	0x20000854
   14c58:	2000099d 	.word	0x2000099d
   14c5c:	200009d7 	.word	0x200009d7
   14c60:	20000963 	.word	0x20000963
   14c64:	200009e0 	.word	0x200009e0
   14c68:	2000098f 	.word	0x2000098f
   14c6c:	20000972 	.word	0x20000972
   14c70:	2000098e 	.word	0x2000098e
   14c74:	00017bc9 	.word	0x00017bc9
   14c78:	200008e5 	.word	0x200008e5
   14c7c:	00020ccd 	.word	0x00020ccd
   14c80:	200009f4 	.word	0x200009f4
   14c84:	20000975 	.word	0x20000975
   14c88:	000144e9 	.word	0x000144e9

00014c8c <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
   14c8c:	b580      	push	{r7, lr}
   14c8e:	b082      	sub	sp, #8
   14c90:	af00      	add	r7, sp, #0
   14c92:	0002      	movs	r2, r0
   14c94:	1dfb      	adds	r3, r7, #7
   14c96:	701a      	strb	r2, [r3, #0]
	if (!initialized)
   14c98:	4b20      	ldr	r3, [pc, #128]	; (14d1c <registerM2MEvent+0x90>)
   14c9a:	781b      	ldrb	r3, [r3, #0]
   14c9c:	b2db      	uxtb	r3, r3
   14c9e:	2201      	movs	r2, #1
   14ca0:	4053      	eors	r3, r2
   14ca2:	b2db      	uxtb	r3, r3
   14ca4:	2b00      	cmp	r3, #0
   14ca6:	d006      	beq.n	14cb6 <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
   14ca8:	1dfb      	adds	r3, r7, #7
   14caa:	781b      	ldrb	r3, [r3, #0]
   14cac:	2100      	movs	r1, #0
   14cae:	0018      	movs	r0, r3
   14cb0:	4b1b      	ldr	r3, [pc, #108]	; (14d20 <registerM2MEvent+0x94>)
   14cb2:	4798      	blx	r3
		return;
   14cb4:	e02e      	b.n	14d14 <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
   14cb6:	4b1b      	ldr	r3, [pc, #108]	; (14d24 <registerM2MEvent+0x98>)
   14cb8:	781b      	ldrb	r3, [r3, #0]
   14cba:	b2db      	uxtb	r3, r3
   14cbc:	2b4e      	cmp	r3, #78	; 0x4e
   14cbe:	d129      	bne.n	14d14 <registerM2MEvent+0x88>
   14cc0:	4b19      	ldr	r3, [pc, #100]	; (14d28 <registerM2MEvent+0x9c>)
   14cc2:	781b      	ldrb	r3, [r3, #0]
   14cc4:	b2db      	uxtb	r3, r3
   14cc6:	2b4e      	cmp	r3, #78	; 0x4e
   14cc8:	d124      	bne.n	14d14 <registerM2MEvent+0x88>
   14cca:	4b18      	ldr	r3, [pc, #96]	; (14d2c <registerM2MEvent+0xa0>)
   14ccc:	781b      	ldrb	r3, [r3, #0]
   14cce:	2b00      	cmp	r3, #0
   14cd0:	d020      	beq.n	14d14 <registerM2MEvent+0x88>
   14cd2:	4b17      	ldr	r3, [pc, #92]	; (14d30 <registerM2MEvent+0xa4>)
   14cd4:	781b      	ldrb	r3, [r3, #0]
   14cd6:	2201      	movs	r2, #1
   14cd8:	4053      	eors	r3, r2
   14cda:	b2db      	uxtb	r3, r3
   14cdc:	2b00      	cmp	r3, #0
   14cde:	d019      	beq.n	14d14 <registerM2MEvent+0x88>
   14ce0:	4b14      	ldr	r3, [pc, #80]	; (14d34 <registerM2MEvent+0xa8>)
   14ce2:	781b      	ldrb	r3, [r3, #0]
   14ce4:	2201      	movs	r2, #1
   14ce6:	4053      	eors	r3, r2
   14ce8:	b2db      	uxtb	r3, r3
   14cea:	2b00      	cmp	r3, #0
   14cec:	d012      	beq.n	14d14 <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
   14cee:	1dfb      	adds	r3, r7, #7
   14cf0:	781b      	ldrb	r3, [r3, #0]
   14cf2:	2102      	movs	r1, #2
   14cf4:	0018      	movs	r0, r3
   14cf6:	4b0a      	ldr	r3, [pc, #40]	; (14d20 <registerM2MEvent+0x94>)
   14cf8:	4798      	blx	r3
		m2mEvent=true;
   14cfa:	4b0f      	ldr	r3, [pc, #60]	; (14d38 <registerM2MEvent+0xac>)
   14cfc:	2201      	movs	r2, #1
   14cfe:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
   14d00:	4b0e      	ldr	r3, [pc, #56]	; (14d3c <registerM2MEvent+0xb0>)
   14d02:	1dfa      	adds	r2, r7, #7
   14d04:	7812      	ldrb	r2, [r2, #0]
   14d06:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
   14d08:	4b0d      	ldr	r3, [pc, #52]	; (14d40 <registerM2MEvent+0xb4>)
   14d0a:	2200      	movs	r2, #0
   14d0c:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
   14d0e:	4b0d      	ldr	r3, [pc, #52]	; (14d44 <registerM2MEvent+0xb8>)
   14d10:	4798      	blx	r3
		return;
   14d12:	46c0      	nop			; (mov r8, r8)
	}
}
   14d14:	46bd      	mov	sp, r7
   14d16:	b002      	add	sp, #8
   14d18:	bd80      	pop	{r7, pc}
   14d1a:	46c0      	nop			; (mov r8, r8)
   14d1c:	2000099d 	.word	0x2000099d
   14d20:	0001c9ad 	.word	0x0001c9ad
   14d24:	200009e0 	.word	0x200009e0
   14d28:	2000098f 	.word	0x2000098f
   14d2c:	20000972 	.word	0x20000972
   14d30:	200009d7 	.word	0x200009d7
   14d34:	2000098e 	.word	0x2000098e
   14d38:	20000943 	.word	0x20000943
   14d3c:	2000092d 	.word	0x2000092d
   14d40:	200009d8 	.word	0x200009d8
   14d44:	000144e9 	.word	0x000144e9

00014d48 <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
   14d48:	b580      	push	{r7, lr}
   14d4a:	b082      	sub	sp, #8
   14d4c:	af00      	add	r7, sp, #0
   14d4e:	0002      	movs	r2, r0
   14d50:	1dfb      	adds	r3, r7, #7
   14d52:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
   14d54:	4b07      	ldr	r3, [pc, #28]	; (14d74 <setMotorMGRResponse+0x2c>)
   14d56:	781b      	ldrb	r3, [r3, #0]
   14d58:	b2db      	uxtb	r3, r3
   14d5a:	2b49      	cmp	r3, #73	; 0x49
   14d5c:	d106      	bne.n	14d6c <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
   14d5e:	1dfb      	adds	r3, r7, #7
   14d60:	781b      	ldrb	r3, [r3, #0]
   14d62:	2101      	movs	r1, #1
   14d64:	0018      	movs	r0, r3
   14d66:	4b04      	ldr	r3, [pc, #16]	; (14d78 <setMotorMGRResponse+0x30>)
   14d68:	4798      	blx	r3
   14d6a:	e000      	b.n	14d6e <setMotorMGRResponse+0x26>
		return;
   14d6c:	46c0      	nop			; (mov r8, r8)
}
   14d6e:	46bd      	mov	sp, r7
   14d70:	b002      	add	sp, #8
   14d72:	bd80      	pop	{r7, pc}
   14d74:	200009e0 	.word	0x200009e0
   14d78:	00014861 	.word	0x00014861

00014d7c <checkRespSMS>:

void checkRespSMS(char t1)
{
   14d7c:	b580      	push	{r7, lr}
   14d7e:	b082      	sub	sp, #8
   14d80:	af00      	add	r7, sp, #0
   14d82:	0002      	movs	r2, r0
   14d84:	1dfb      	adds	r3, r7, #7
   14d86:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
   14d88:	4b0c      	ldr	r3, [pc, #48]	; (14dbc <checkRespSMS+0x40>)
   14d8a:	781b      	ldrb	r3, [r3, #0]
   14d8c:	2201      	movs	r2, #1
   14d8e:	4053      	eors	r3, r2
   14d90:	b2db      	uxtb	r3, r3
   14d92:	2b00      	cmp	r3, #0
   14d94:	d00e      	beq.n	14db4 <checkRespSMS+0x38>
   14d96:	4b0a      	ldr	r3, [pc, #40]	; (14dc0 <checkRespSMS+0x44>)
   14d98:	795b      	ldrb	r3, [r3, #5]
   14d9a:	b2db      	uxtb	r3, r3
   14d9c:	2b41      	cmp	r3, #65	; 0x41
   14d9e:	d109      	bne.n	14db4 <checkRespSMS+0x38>
	{
		actionType = t1;
   14da0:	4b08      	ldr	r3, [pc, #32]	; (14dc4 <checkRespSMS+0x48>)
   14da2:	1dfa      	adds	r2, r7, #7
   14da4:	7812      	ldrb	r2, [r2, #0]
   14da6:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
   14da8:	4b07      	ldr	r3, [pc, #28]	; (14dc8 <checkRespSMS+0x4c>)
   14daa:	2200      	movs	r2, #0
   14dac:	2100      	movs	r1, #0
   14dae:	0018      	movs	r0, r3
   14db0:	4b06      	ldr	r3, [pc, #24]	; (14dcc <checkRespSMS+0x50>)
   14db2:	4798      	blx	r3
	}
}
   14db4:	46c0      	nop			; (mov r8, r8)
   14db6:	46bd      	mov	sp, r7
   14db8:	b002      	add	sp, #8
   14dba:	bd80      	pop	{r7, pc}
   14dbc:	2000099e 	.word	0x2000099e
   14dc0:	20000854 	.word	0x20000854
   14dc4:	20000963 	.word	0x20000963
   14dc8:	0002a8c8 	.word	0x0002a8c8
   14dcc:	00017cc5 	.word	0x00017cc5

00014dd0 <subDTMF>:

void subDTMF(void)
{
   14dd0:	b580      	push	{r7, lr}
   14dd2:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
   14dd4:	4b04      	ldr	r3, [pc, #16]	; (14de8 <subDTMF+0x18>)
   14dd6:	4798      	blx	r3
	callCutWait =xTaskGetTickCount();
   14dd8:	4b04      	ldr	r3, [pc, #16]	; (14dec <subDTMF+0x1c>)
   14dda:	4798      	blx	r3
   14ddc:	0002      	movs	r2, r0
   14dde:	4b04      	ldr	r3, [pc, #16]	; (14df0 <subDTMF+0x20>)
   14de0:	601a      	str	r2, [r3, #0]
}
   14de2:	46c0      	nop			; (mov r8, r8)
   14de4:	46bd      	mov	sp, r7
   14de6:	bd80      	pop	{r7, pc}
   14de8:	0001310d 	.word	0x0001310d
   14dec:	00020ccd 	.word	0x00020ccd
   14df0:	20000a18 	.word	0x20000a18

00014df4 <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
   14df4:	b580      	push	{r7, lr}
   14df6:	b084      	sub	sp, #16
   14df8:	af00      	add	r7, sp, #0
   14dfa:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
   14dfc:	230f      	movs	r3, #15
   14dfe:	18fb      	adds	r3, r7, r3
   14e00:	687a      	ldr	r2, [r7, #4]
   14e02:	7812      	ldrb	r2, [r2, #0]
   14e04:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
   14e06:	4b6a      	ldr	r3, [pc, #424]	; (14fb0 <processOnDTMF+0x1bc>)
   14e08:	78db      	ldrb	r3, [r3, #3]
   14e0a:	2b00      	cmp	r3, #0
   14e0c:	d010      	beq.n	14e30 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
   14e0e:	4b69      	ldr	r3, [pc, #420]	; (14fb4 <processOnDTMF+0x1c0>)
   14e10:	781b      	ldrb	r3, [r3, #0]
   14e12:	2b00      	cmp	r3, #0
   14e14:	d100      	bne.n	14e18 <processOnDTMF+0x24>
   14e16:	e0c7      	b.n	14fa8 <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
   14e18:	230f      	movs	r3, #15
   14e1a:	18fb      	adds	r3, r7, r3
   14e1c:	781b      	ldrb	r3, [r3, #0]
   14e1e:	2b41      	cmp	r3, #65	; 0x41
   14e20:	d000      	beq.n	14e24 <processOnDTMF+0x30>
   14e22:	e0c1      	b.n	14fa8 <processOnDTMF+0x1b4>
			{
				m2mAck=true;
   14e24:	4b64      	ldr	r3, [pc, #400]	; (14fb8 <processOnDTMF+0x1c4>)
   14e26:	2201      	movs	r2, #1
   14e28:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
   14e2a:	4b64      	ldr	r3, [pc, #400]	; (14fbc <processOnDTMF+0x1c8>)
   14e2c:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
   14e2e:	e0bb      	b.n	14fa8 <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
   14e30:	230f      	movs	r3, #15
   14e32:	18fb      	adds	r3, r7, r3
   14e34:	781b      	ldrb	r3, [r3, #0]
   14e36:	2b31      	cmp	r3, #49	; 0x31
   14e38:	d106      	bne.n	14e48 <processOnDTMF+0x54>
			subDTMF();
   14e3a:	4b61      	ldr	r3, [pc, #388]	; (14fc0 <processOnDTMF+0x1cc>)
   14e3c:	4798      	blx	r3
			startMotor(true,false);
   14e3e:	2100      	movs	r1, #0
   14e40:	2001      	movs	r0, #1
   14e42:	4b60      	ldr	r3, [pc, #384]	; (14fc4 <processOnDTMF+0x1d0>)
   14e44:	4798      	blx	r3
}
   14e46:	e0af      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
   14e48:	230f      	movs	r3, #15
   14e4a:	18fb      	adds	r3, r7, r3
   14e4c:	781b      	ldrb	r3, [r3, #0]
   14e4e:	2b32      	cmp	r3, #50	; 0x32
   14e50:	d107      	bne.n	14e62 <processOnDTMF+0x6e>
			subDTMF();
   14e52:	4b5b      	ldr	r3, [pc, #364]	; (14fc0 <processOnDTMF+0x1cc>)
   14e54:	4798      	blx	r3
			stopMotor(true,false,false);
   14e56:	2200      	movs	r2, #0
   14e58:	2100      	movs	r1, #0
   14e5a:	2001      	movs	r0, #1
   14e5c:	4b5a      	ldr	r3, [pc, #360]	; (14fc8 <processOnDTMF+0x1d4>)
   14e5e:	4798      	blx	r3
}
   14e60:	e0a2      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
   14e62:	230f      	movs	r3, #15
   14e64:	18fb      	adds	r3, r7, r3
   14e66:	781b      	ldrb	r3, [r3, #0]
   14e68:	2b33      	cmp	r3, #51	; 0x33
   14e6a:	d104      	bne.n	14e76 <processOnDTMF+0x82>
			subDTMF();
   14e6c:	4b54      	ldr	r3, [pc, #336]	; (14fc0 <processOnDTMF+0x1cc>)
   14e6e:	4798      	blx	r3
			statusOnCall();
   14e70:	4b56      	ldr	r3, [pc, #344]	; (14fcc <processOnDTMF+0x1d8>)
   14e72:	4798      	blx	r3
}
   14e74:	e098      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
   14e76:	230f      	movs	r3, #15
   14e78:	18fb      	adds	r3, r7, r3
   14e7a:	781b      	ldrb	r3, [r3, #0]
   14e7c:	2b34      	cmp	r3, #52	; 0x34
   14e7e:	d10a      	bne.n	14e96 <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
   14e80:	4b4b      	ldr	r3, [pc, #300]	; (14fb0 <processOnDTMF+0x1bc>)
   14e82:	795b      	ldrb	r3, [r3, #5]
   14e84:	2b00      	cmp	r3, #0
   14e86:	d100      	bne.n	14e8a <processOnDTMF+0x96>
   14e88:	e08e      	b.n	14fa8 <processOnDTMF+0x1b4>
				subDTMF();
   14e8a:	4b4d      	ldr	r3, [pc, #308]	; (14fc0 <processOnDTMF+0x1cc>)
   14e8c:	4798      	blx	r3
				waterStatusOnCall(false);
   14e8e:	2000      	movs	r0, #0
   14e90:	4b4f      	ldr	r3, [pc, #316]	; (14fd0 <processOnDTMF+0x1dc>)
   14e92:	4798      	blx	r3
}
   14e94:	e088      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
   14e96:	230f      	movs	r3, #15
   14e98:	18fb      	adds	r3, r7, r3
   14e9a:	781b      	ldrb	r3, [r3, #0]
   14e9c:	2b35      	cmp	r3, #53	; 0x35
   14e9e:	d10a      	bne.n	14eb6 <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
   14ea0:	4b43      	ldr	r3, [pc, #268]	; (14fb0 <processOnDTMF+0x1bc>)
   14ea2:	791b      	ldrb	r3, [r3, #4]
   14ea4:	2b00      	cmp	r3, #0
   14ea6:	d100      	bne.n	14eaa <processOnDTMF+0xb6>
   14ea8:	e07e      	b.n	14fa8 <processOnDTMF+0x1b4>
				subDTMF();
   14eaa:	4b45      	ldr	r3, [pc, #276]	; (14fc0 <processOnDTMF+0x1cc>)
   14eac:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
   14eae:	2000      	movs	r0, #0
   14eb0:	4b48      	ldr	r3, [pc, #288]	; (14fd4 <processOnDTMF+0x1e0>)
   14eb2:	4798      	blx	r3
}
   14eb4:	e078      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if(dtmf == '0')
   14eb6:	230f      	movs	r3, #15
   14eb8:	18fb      	adds	r3, r7, r3
   14eba:	781b      	ldrb	r3, [r3, #0]
   14ebc:	2b30      	cmp	r3, #48	; 0x30
   14ebe:	d114      	bne.n	14eea <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   14ec0:	4b3b      	ldr	r3, [pc, #236]	; (14fb0 <processOnDTMF+0x1bc>)
   14ec2:	785b      	ldrb	r3, [r3, #1]
   14ec4:	2b00      	cmp	r3, #0
   14ec6:	d100      	bne.n	14eca <processOnDTMF+0xd6>
   14ec8:	e06e      	b.n	14fa8 <processOnDTMF+0x1b4>
				if(zeroPressed)
   14eca:	4b43      	ldr	r3, [pc, #268]	; (14fd8 <processOnDTMF+0x1e4>)
   14ecc:	781b      	ldrb	r3, [r3, #0]
   14ece:	2b00      	cmp	r3, #0
   14ed0:	d007      	beq.n	14ee2 <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
   14ed2:	4b42      	ldr	r3, [pc, #264]	; (14fdc <processOnDTMF+0x1e8>)
   14ed4:	4798      	blx	r3
					subDTMF();
   14ed6:	4b3a      	ldr	r3, [pc, #232]	; (14fc0 <processOnDTMF+0x1cc>)
   14ed8:	4798      	blx	r3
					zeroPressed=false;
   14eda:	4b3f      	ldr	r3, [pc, #252]	; (14fd8 <processOnDTMF+0x1e4>)
   14edc:	2200      	movs	r2, #0
   14ede:	701a      	strb	r2, [r3, #0]
}
   14ee0:	e062      	b.n	14fa8 <processOnDTMF+0x1b4>
					zeroPressed=true;
   14ee2:	4b3d      	ldr	r3, [pc, #244]	; (14fd8 <processOnDTMF+0x1e4>)
   14ee4:	2201      	movs	r2, #1
   14ee6:	701a      	strb	r2, [r3, #0]
}
   14ee8:	e05e      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
   14eea:	230f      	movs	r3, #15
   14eec:	18fb      	adds	r3, r7, r3
   14eee:	781b      	ldrb	r3, [r3, #0]
   14ef0:	2b37      	cmp	r3, #55	; 0x37
   14ef2:	d108      	bne.n	14f06 <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
   14ef4:	4b2e      	ldr	r3, [pc, #184]	; (14fb0 <processOnDTMF+0x1bc>)
   14ef6:	789b      	ldrb	r3, [r3, #2]
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d055      	beq.n	14fa8 <processOnDTMF+0x1b4>
				subDTMF();
   14efc:	4b30      	ldr	r3, [pc, #192]	; (14fc0 <processOnDTMF+0x1cc>)
   14efe:	4798      	blx	r3
				speakAmpere();
   14f00:	4b37      	ldr	r3, [pc, #220]	; (14fe0 <processOnDTMF+0x1ec>)
   14f02:	4798      	blx	r3
}
   14f04:	e050      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if(dtmf=='D')
   14f06:	230f      	movs	r3, #15
   14f08:	18fb      	adds	r3, r7, r3
   14f0a:	781b      	ldrb	r3, [r3, #0]
   14f0c:	2b44      	cmp	r3, #68	; 0x44
   14f0e:	d10d      	bne.n	14f2c <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14f10:	2001      	movs	r0, #1
   14f12:	4b34      	ldr	r3, [pc, #208]	; (14fe4 <processOnDTMF+0x1f0>)
   14f14:	4798      	blx	r3
			resetAutoStart(true);
   14f16:	2001      	movs	r0, #1
   14f18:	4b33      	ldr	r3, [pc, #204]	; (14fe8 <processOnDTMF+0x1f4>)
   14f1a:	4798      	blx	r3
			startMotor(false,false);
   14f1c:	2100      	movs	r1, #0
   14f1e:	2000      	movs	r0, #0
   14f20:	4b28      	ldr	r3, [pc, #160]	; (14fc4 <processOnDTMF+0x1d0>)
   14f22:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14f24:	20ff      	movs	r0, #255	; 0xff
   14f26:	4b31      	ldr	r3, [pc, #196]	; (14fec <processOnDTMF+0x1f8>)
   14f28:	4798      	blx	r3
}
   14f2a:	e03d      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if(dtmf=='C')
   14f2c:	230f      	movs	r3, #15
   14f2e:	18fb      	adds	r3, r7, r3
   14f30:	781b      	ldrb	r3, [r3, #0]
   14f32:	2b43      	cmp	r3, #67	; 0x43
   14f34:	d10b      	bne.n	14f4e <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
   14f36:	2000      	movs	r0, #0
   14f38:	4b2a      	ldr	r3, [pc, #168]	; (14fe4 <processOnDTMF+0x1f0>)
   14f3a:	4798      	blx	r3
			stopMotor(false,false,true);
   14f3c:	2201      	movs	r2, #1
   14f3e:	2100      	movs	r1, #0
   14f40:	2000      	movs	r0, #0
   14f42:	4b21      	ldr	r3, [pc, #132]	; (14fc8 <processOnDTMF+0x1d4>)
   14f44:	4798      	blx	r3
			sendDTMFTone(0xFF);
   14f46:	20ff      	movs	r0, #255	; 0xff
   14f48:	4b28      	ldr	r3, [pc, #160]	; (14fec <processOnDTMF+0x1f8>)
   14f4a:	4798      	blx	r3
}
   14f4c:	e02c      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
   14f4e:	230f      	movs	r3, #15
   14f50:	18fb      	adds	r3, r7, r3
   14f52:	781b      	ldrb	r3, [r3, #0]
   14f54:	2b38      	cmp	r3, #56	; 0x38
   14f56:	d10c      	bne.n	14f72 <processOnDTMF+0x17e>
			subDTMF();
   14f58:	4b19      	ldr	r3, [pc, #100]	; (14fc0 <processOnDTMF+0x1cc>)
   14f5a:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
   14f5c:	2001      	movs	r0, #1
   14f5e:	4b21      	ldr	r3, [pc, #132]	; (14fe4 <processOnDTMF+0x1f0>)
   14f60:	4798      	blx	r3
			resetAutoStart(true);
   14f62:	2001      	movs	r0, #1
   14f64:	4b20      	ldr	r3, [pc, #128]	; (14fe8 <processOnDTMF+0x1f4>)
   14f66:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
   14f68:	2101      	movs	r1, #1
   14f6a:	2029      	movs	r0, #41	; 0x29
   14f6c:	4b20      	ldr	r3, [pc, #128]	; (14ff0 <processOnDTMF+0x1fc>)
   14f6e:	4798      	blx	r3
}
   14f70:	e01a      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
   14f72:	230f      	movs	r3, #15
   14f74:	18fb      	adds	r3, r7, r3
   14f76:	781b      	ldrb	r3, [r3, #0]
   14f78:	2b39      	cmp	r3, #57	; 0x39
   14f7a:	d10c      	bne.n	14f96 <processOnDTMF+0x1a2>
			subDTMF();
   14f7c:	4b10      	ldr	r3, [pc, #64]	; (14fc0 <processOnDTMF+0x1cc>)
   14f7e:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
   14f80:	2000      	movs	r0, #0
   14f82:	4b18      	ldr	r3, [pc, #96]	; (14fe4 <processOnDTMF+0x1f0>)
   14f84:	4798      	blx	r3
			resetAutoStart(true);
   14f86:	2001      	movs	r0, #1
   14f88:	4b17      	ldr	r3, [pc, #92]	; (14fe8 <processOnDTMF+0x1f4>)
   14f8a:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
   14f8c:	2101      	movs	r1, #1
   14f8e:	205b      	movs	r0, #91	; 0x5b
   14f90:	4b17      	ldr	r3, [pc, #92]	; (14ff0 <processOnDTMF+0x1fc>)
   14f92:	4798      	blx	r3
}
   14f94:	e008      	b.n	14fa8 <processOnDTMF+0x1b4>
		else if(dtmf == '*')
   14f96:	230f      	movs	r3, #15
   14f98:	18fb      	adds	r3, r7, r3
   14f9a:	781b      	ldrb	r3, [r3, #0]
   14f9c:	2b2a      	cmp	r3, #42	; 0x2a
   14f9e:	d103      	bne.n	14fa8 <processOnDTMF+0x1b4>
			subDTMF();
   14fa0:	4b07      	ldr	r3, [pc, #28]	; (14fc0 <processOnDTMF+0x1cc>)
   14fa2:	4798      	blx	r3
			voltageOnCall();
   14fa4:	4b13      	ldr	r3, [pc, #76]	; (14ff4 <processOnDTMF+0x200>)
   14fa6:	4798      	blx	r3
}
   14fa8:	46c0      	nop			; (mov r8, r8)
   14faa:	46bd      	mov	sp, r7
   14fac:	b004      	add	sp, #16
   14fae:	bd80      	pop	{r7, pc}
   14fb0:	2000082c 	.word	0x2000082c
   14fb4:	20000943 	.word	0x20000943
   14fb8:	2000092c 	.word	0x2000092c
   14fbc:	000130ad 	.word	0x000130ad
   14fc0:	00014dd1 	.word	0x00014dd1
   14fc4:	0001c229 	.word	0x0001c229
   14fc8:	0001c411 	.word	0x0001c411
   14fcc:	0001c85d 	.word	0x0001c85d
   14fd0:	0001a261 	.word	0x0001a261
   14fd4:	0001a119 	.word	0x0001a119
   14fd8:	20000a0f 	.word	0x20000a0f
   14fdc:	0001addd 	.word	0x0001addd
   14fe0:	0001aed5 	.word	0x0001aed5
   14fe4:	000112a9 	.word	0x000112a9
   14fe8:	0001be15 	.word	0x0001be15
   14fec:	00017e81 	.word	0x00017e81
   14ff0:	00014861 	.word	0x00014861
   14ff4:	0001c96d 	.word	0x0001c96d

00014ff8 <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
   14ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ffa:	46de      	mov	lr, fp
   14ffc:	4657      	mov	r7, sl
   14ffe:	464e      	mov	r6, r9
   15000:	4645      	mov	r5, r8
   15002:	b5e0      	push	{r5, r6, r7, lr}
   15004:	b0e7      	sub	sp, #412	; 0x19c
   15006:	af10      	add	r7, sp, #64	; 0x40
   15008:	62f8      	str	r0, [r7, #44]	; 0x2c
   1500a:	000c      	movs	r4, r1
   1500c:	0010      	movs	r0, r2
   1500e:	0019      	movs	r1, r3
   15010:	4beb      	ldr	r3, [pc, #940]	; (153c0 <processOnSMS+0x3c8>)
   15012:	2298      	movs	r2, #152	; 0x98
   15014:	0052      	lsls	r2, r2, #1
   15016:	4694      	mov	ip, r2
   15018:	2220      	movs	r2, #32
   1501a:	4690      	mov	r8, r2
   1501c:	2208      	movs	r2, #8
   1501e:	4691      	mov	r9, r2
   15020:	44b9      	add	r9, r7
   15022:	44c8      	add	r8, r9
   15024:	44c4      	add	ip, r8
   15026:	4463      	add	r3, ip
   15028:	1c22      	adds	r2, r4, #0
   1502a:	701a      	strb	r2, [r3, #0]
   1502c:	4be5      	ldr	r3, [pc, #916]	; (153c4 <processOnSMS+0x3cc>)
   1502e:	2298      	movs	r2, #152	; 0x98
   15030:	0052      	lsls	r2, r2, #1
   15032:	4694      	mov	ip, r2
   15034:	2220      	movs	r2, #32
   15036:	4690      	mov	r8, r2
   15038:	2208      	movs	r2, #8
   1503a:	4691      	mov	r9, r2
   1503c:	44b9      	add	r9, r7
   1503e:	44c8      	add	r8, r9
   15040:	44c4      	add	ip, r8
   15042:	4463      	add	r3, ip
   15044:	1c02      	adds	r2, r0, #0
   15046:	701a      	strb	r2, [r3, #0]
   15048:	4bdf      	ldr	r3, [pc, #892]	; (153c8 <processOnSMS+0x3d0>)
   1504a:	2298      	movs	r2, #152	; 0x98
   1504c:	0052      	lsls	r2, r2, #1
   1504e:	4694      	mov	ip, r2
   15050:	2220      	movs	r2, #32
   15052:	4690      	mov	r8, r2
   15054:	2208      	movs	r2, #8
   15056:	4691      	mov	r9, r2
   15058:	44b9      	add	r9, r7
   1505a:	44c8      	add	r8, r9
   1505c:	44c4      	add	ip, r8
   1505e:	4463      	add	r3, ip
   15060:	1c0a      	adds	r2, r1, #0
   15062:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
   15064:	2330      	movs	r3, #48	; 0x30
   15066:	33ff      	adds	r3, #255	; 0xff
   15068:	2220      	movs	r2, #32
   1506a:	4694      	mov	ip, r2
   1506c:	2208      	movs	r2, #8
   1506e:	4690      	mov	r8, r2
   15070:	44b8      	add	r8, r7
   15072:	44c4      	add	ip, r8
   15074:	4463      	add	r3, ip
   15076:	2200      	movs	r2, #0
   15078:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
   1507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1507c:	228c      	movs	r2, #140	; 0x8c
   1507e:	0052      	lsls	r2, r2, #1
   15080:	2120      	movs	r1, #32
   15082:	468c      	mov	ip, r1
   15084:	2108      	movs	r1, #8
   15086:	4688      	mov	r8, r1
   15088:	44b8      	add	r8, r7
   1508a:	44c4      	add	ip, r8
   1508c:	4462      	add	r2, ip
   1508e:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
   15090:	4bcd      	ldr	r3, [pc, #820]	; (153c8 <processOnSMS+0x3d0>)
   15092:	2298      	movs	r2, #152	; 0x98
   15094:	0052      	lsls	r2, r2, #1
   15096:	4694      	mov	ip, r2
   15098:	2220      	movs	r2, #32
   1509a:	4690      	mov	r8, r2
   1509c:	2208      	movs	r2, #8
   1509e:	4691      	mov	r9, r2
   150a0:	44b9      	add	r9, r7
   150a2:	44c8      	add	r8, r9
   150a4:	44c4      	add	ip, r8
   150a6:	4463      	add	r3, ip
   150a8:	781b      	ldrb	r3, [r3, #0]
   150aa:	2b00      	cmp	r3, #0
   150ac:	d00e      	beq.n	150cc <processOnSMS+0xd4>
	{
		if(!StringstartsWith(received_command,"AMON"))
   150ae:	4ac7      	ldr	r2, [pc, #796]	; (153cc <processOnSMS+0x3d4>)
   150b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   150b2:	0011      	movs	r1, r2
   150b4:	0018      	movs	r0, r3
   150b6:	4bc6      	ldr	r3, [pc, #792]	; (153d0 <processOnSMS+0x3d8>)
   150b8:	4798      	blx	r3
   150ba:	0003      	movs	r3, r0
   150bc:	001a      	movs	r2, r3
   150be:	2301      	movs	r3, #1
   150c0:	4053      	eors	r3, r2
   150c2:	b2db      	uxtb	r3, r3
   150c4:	2b00      	cmp	r3, #0
   150c6:	d001      	beq.n	150cc <processOnSMS+0xd4>
   150c8:	f002 fcbb 	bl	17a42 <processOnSMS+0x2a4a>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
   150cc:	4ac1      	ldr	r2, [pc, #772]	; (153d4 <processOnSMS+0x3dc>)
   150ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   150d0:	0011      	movs	r1, r2
   150d2:	0018      	movs	r0, r3
   150d4:	4bbe      	ldr	r3, [pc, #760]	; (153d0 <processOnSMS+0x3d8>)
   150d6:	4798      	blx	r3
   150d8:	1e03      	subs	r3, r0, #0
   150da:	d02c      	beq.n	15136 <processOnSMS+0x13e>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
   150dc:	4bbe      	ldr	r3, [pc, #760]	; (153d8 <processOnSMS+0x3e0>)
   150de:	2201      	movs	r2, #1
   150e0:	715a      	strb	r2, [r3, #5]
			memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   150e2:	4bbe      	ldr	r3, [pc, #760]	; (153dc <processOnSMS+0x3e4>)
   150e4:	2210      	movs	r2, #16
   150e6:	2100      	movs	r1, #0
   150e8:	0018      	movs	r0, r3
   150ea:	4bbd      	ldr	r3, [pc, #756]	; (153e0 <processOnSMS+0x3e8>)
   150ec:	4798      	blx	r3
			strcpy(bootloader_parameter.firmware_updater_mobile_no,phone_number);
   150ee:	23ac      	movs	r3, #172	; 0xac
   150f0:	005b      	lsls	r3, r3, #1
   150f2:	2220      	movs	r2, #32
   150f4:	4694      	mov	ip, r2
   150f6:	2208      	movs	r2, #8
   150f8:	4690      	mov	r8, r2
   150fa:	44b8      	add	r8, r7
   150fc:	44c4      	add	ip, r8
   150fe:	4463      	add	r3, ip
   15100:	681a      	ldr	r2, [r3, #0]
   15102:	4bb6      	ldr	r3, [pc, #728]	; (153dc <processOnSMS+0x3e4>)
   15104:	0011      	movs	r1, r2
   15106:	0018      	movs	r0, r3
   15108:	4bb6      	ldr	r3, [pc, #728]	; (153e4 <processOnSMS+0x3ec>)
   1510a:	4798      	blx	r3
			gsm_module_exit_sleep(false);
   1510c:	2000      	movs	r0, #0
   1510e:	4bb6      	ldr	r3, [pc, #728]	; (153e8 <processOnSMS+0x3f0>)
   15110:	4798      	blx	r3

			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   15112:	49b1      	ldr	r1, [pc, #708]	; (153d8 <processOnSMS+0x3e0>)
   15114:	4bb5      	ldr	r3, [pc, #724]	; (153ec <processOnSMS+0x3f4>)
   15116:	221c      	movs	r2, #28
   15118:	0018      	movs	r0, r3
   1511a:	4bb5      	ldr	r3, [pc, #724]	; (153f0 <processOnSMS+0x3f8>)
   1511c:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   1511e:	4bb3      	ldr	r3, [pc, #716]	; (153ec <processOnSMS+0x3f4>)
   15120:	0019      	movs	r1, r3
   15122:	2000      	movs	r0, #0
   15124:	4bb3      	ldr	r3, [pc, #716]	; (153f4 <processOnSMS+0x3fc>)
   15126:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
   15128:	4bb3      	ldr	r3, [pc, #716]	; (153f8 <processOnSMS+0x400>)
   1512a:	4798      	blx	r3
			vTaskDelay(100);
   1512c:	2064      	movs	r0, #100	; 0x64
   1512e:	4bb3      	ldr	r3, [pc, #716]	; (153fc <processOnSMS+0x404>)
   15130:	4798      	blx	r3
			system_reset();
   15132:	4bb3      	ldr	r3, [pc, #716]	; (15400 <processOnSMS+0x408>)
   15134:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
   15136:	4ab3      	ldr	r2, [pc, #716]	; (15404 <processOnSMS+0x40c>)
   15138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1513a:	0011      	movs	r1, r2
   1513c:	0018      	movs	r0, r3
   1513e:	4ba4      	ldr	r3, [pc, #656]	; (153d0 <processOnSMS+0x3d8>)
   15140:	4798      	blx	r3
   15142:	1e03      	subs	r3, r0, #0
   15144:	d05b      	beq.n	151fe <processOnSMS+0x206>
	{
		enum gsm_error err = gsm_disable_call_waiting();
   15146:	2318      	movs	r3, #24
   15148:	33ff      	adds	r3, #255	; 0xff
   1514a:	2220      	movs	r2, #32
   1514c:	2108      	movs	r1, #8
   1514e:	468c      	mov	ip, r1
   15150:	44bc      	add	ip, r7
   15152:	4462      	add	r2, ip
   15154:	18d4      	adds	r4, r2, r3
   15156:	4bac      	ldr	r3, [pc, #688]	; (15408 <processOnSMS+0x410>)
   15158:	4798      	blx	r3
   1515a:	0003      	movs	r3, r0
   1515c:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
   1515e:	2330      	movs	r3, #48	; 0x30
   15160:	33ff      	adds	r3, #255	; 0xff
   15162:	2220      	movs	r2, #32
   15164:	4694      	mov	ip, r2
   15166:	2208      	movs	r2, #8
   15168:	4690      	mov	r8, r2
   1516a:	44b8      	add	r8, r7
   1516c:	44c4      	add	ip, r8
   1516e:	4463      	add	r3, ip
   15170:	2201      	movs	r2, #1
   15172:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   15174:	4b93      	ldr	r3, [pc, #588]	; (153c4 <processOnSMS+0x3cc>)
   15176:	2298      	movs	r2, #152	; 0x98
   15178:	0052      	lsls	r2, r2, #1
   1517a:	4694      	mov	ip, r2
   1517c:	2220      	movs	r2, #32
   1517e:	4690      	mov	r8, r2
   15180:	2208      	movs	r2, #8
   15182:	4691      	mov	r9, r2
   15184:	44b9      	add	r9, r7
   15186:	44c8      	add	r8, r9
   15188:	44c4      	add	ip, r8
   1518a:	4463      	add	r3, ip
   1518c:	781b      	ldrb	r3, [r3, #0]
   1518e:	2b00      	cmp	r3, #0
   15190:	d101      	bne.n	15196 <processOnSMS+0x19e>
   15192:	f002 fbf0 	bl	17976 <processOnSMS+0x297e>
		{
			if (err == GSM_ERROR_NONE)
   15196:	2318      	movs	r3, #24
   15198:	33ff      	adds	r3, #255	; 0xff
   1519a:	2220      	movs	r2, #32
   1519c:	4694      	mov	ip, r2
   1519e:	2208      	movs	r2, #8
   151a0:	4690      	mov	r8, r2
   151a2:	44b8      	add	r8, r7
   151a4:	44c4      	add	ip, r8
   151a6:	4463      	add	r3, ip
   151a8:	781b      	ldrb	r3, [r3, #0]
   151aa:	2b00      	cmp	r3, #0
   151ac:	d112      	bne.n	151d4 <processOnSMS+0x1dc>
			{
				strcpy(resep_msg,"CALL WAIING DISABLE: SUCCESS");
   151ae:	230c      	movs	r3, #12
   151b0:	2220      	movs	r2, #32
   151b2:	4694      	mov	ip, r2
   151b4:	2208      	movs	r2, #8
   151b6:	4690      	mov	r8, r2
   151b8:	44b8      	add	r8, r7
   151ba:	44c4      	add	ip, r8
   151bc:	4463      	add	r3, ip
   151be:	4a93      	ldr	r2, [pc, #588]	; (1540c <processOnSMS+0x414>)
   151c0:	ca13      	ldmia	r2!, {r0, r1, r4}
   151c2:	c313      	stmia	r3!, {r0, r1, r4}
   151c4:	ca13      	ldmia	r2!, {r0, r1, r4}
   151c6:	c313      	stmia	r3!, {r0, r1, r4}
   151c8:	6811      	ldr	r1, [r2, #0]
   151ca:	6019      	str	r1, [r3, #0]
   151cc:	7912      	ldrb	r2, [r2, #4]
   151ce:	711a      	strb	r2, [r3, #4]
   151d0:	f002 fbd1 	bl	17976 <processOnSMS+0x297e>
			}
			else
			{
				strcpy(resep_msg,"CALL WAITTING DISABLE : FAILED");
   151d4:	230c      	movs	r3, #12
   151d6:	2220      	movs	r2, #32
   151d8:	4694      	mov	ip, r2
   151da:	2208      	movs	r2, #8
   151dc:	4690      	mov	r8, r2
   151de:	44b8      	add	r8, r7
   151e0:	44c4      	add	ip, r8
   151e2:	4463      	add	r3, ip
   151e4:	4a8a      	ldr	r2, [pc, #552]	; (15410 <processOnSMS+0x418>)
   151e6:	ca13      	ldmia	r2!, {r0, r1, r4}
   151e8:	c313      	stmia	r3!, {r0, r1, r4}
   151ea:	ca13      	ldmia	r2!, {r0, r1, r4}
   151ec:	c313      	stmia	r3!, {r0, r1, r4}
   151ee:	6811      	ldr	r1, [r2, #0]
   151f0:	6019      	str	r1, [r3, #0]
   151f2:	8891      	ldrh	r1, [r2, #4]
   151f4:	8099      	strh	r1, [r3, #4]
   151f6:	7992      	ldrb	r2, [r2, #6]
   151f8:	719a      	strb	r2, [r3, #6]
   151fa:	f002 fbbc 	bl	17976 <processOnSMS+0x297e>
			}
		}
	}
	else if(StringstartsWith(received_command, "SETREV"))
   151fe:	4a85      	ldr	r2, [pc, #532]	; (15414 <processOnSMS+0x41c>)
   15200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15202:	0011      	movs	r1, r2
   15204:	0018      	movs	r0, r3
   15206:	4b72      	ldr	r3, [pc, #456]	; (153d0 <processOnSMS+0x3d8>)
   15208:	4798      	blx	r3
   1520a:	1e03      	subs	r3, r0, #0
   1520c:	d077      	beq.n	152fe <processOnSMS+0x306>
	{
		incomingSMSProcessed=true;
   1520e:	2330      	movs	r3, #48	; 0x30
   15210:	33ff      	adds	r3, #255	; 0xff
   15212:	2220      	movs	r2, #32
   15214:	4694      	mov	ip, r2
   15216:	2208      	movs	r2, #8
   15218:	4690      	mov	r8, r2
   1521a:	44b8      	add	r8, r7
   1521c:	44c4      	add	ip, r8
   1521e:	4463      	add	r3, ip
   15220:	2201      	movs	r2, #1
   15222:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15224:	4b7c      	ldr	r3, [pc, #496]	; (15418 <processOnSMS+0x420>)
   15226:	689b      	ldr	r3, [r3, #8]
   15228:	469a      	mov	sl, r3
				factory_settings_parameter_struct.DeviceId_ee,VERSION_NO,
				user_settings_parameter_struct.autoStartAddress,
   1522a:	4b7c      	ldr	r3, [pc, #496]	; (1541c <processOnSMS+0x424>)
   1522c:	785b      	ldrb	r3, [r3, #1]
   1522e:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15230:	469b      	mov	fp, r3
				user_settings_parameter_struct.detectSinglePhasing,
   15232:	4b7a      	ldr	r3, [pc, #488]	; (1541c <processOnSMS+0x424>)
   15234:	2220      	movs	r2, #32
   15236:	5c9b      	ldrb	r3, [r3, r2]
   15238:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1523a:	627b      	str	r3, [r7, #36]	; 0x24
				user_settings_parameter_struct.singlePhasingVoltage,
   1523c:	4b77      	ldr	r3, [pc, #476]	; (1541c <processOnSMS+0x424>)
   1523e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   15240:	b29b      	uxth	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15242:	623b      	str	r3, [r7, #32]
				user_settings_parameter_struct.detectPhaseSequence,
   15244:	4b75      	ldr	r3, [pc, #468]	; (1541c <processOnSMS+0x424>)
   15246:	2224      	movs	r2, #36	; 0x24
   15248:	5c9b      	ldrb	r3, [r3, r2]
   1524a:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1524c:	61fb      	str	r3, [r7, #28]
				user_settings_parameter_struct.dndAddress,
   1524e:	4b73      	ldr	r3, [pc, #460]	; (1541c <processOnSMS+0x424>)
   15250:	791b      	ldrb	r3, [r3, #4]
   15252:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15254:	61bb      	str	r3, [r7, #24]
				user_settings_parameter_struct.detectMotorFeedback,
   15256:	4b71      	ldr	r3, [pc, #452]	; (1541c <processOnSMS+0x424>)
   15258:	2225      	movs	r2, #37	; 0x25
   1525a:	5c9b      	ldrb	r3, [r3, r2]
   1525c:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1525e:	617b      	str	r3, [r7, #20]
				user_settings_parameter_struct.over_under_DetectionMethod,
   15260:	4b6e      	ldr	r3, [pc, #440]	; (1541c <processOnSMS+0x424>)
   15262:	2226      	movs	r2, #38	; 0x26
   15264:	5c9b      	ldrb	r3, [r3, r2]
   15266:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15268:	613b      	str	r3, [r7, #16]
				user_settings_parameter_struct.motorVoltageBypass,
   1526a:	4b6c      	ldr	r3, [pc, #432]	; (1541c <processOnSMS+0x424>)
   1526c:	2227      	movs	r2, #39	; 0x27
   1526e:	5c9b      	ldrb	r3, [r3, r2]
   15270:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15272:	60fb      	str	r3, [r7, #12]
   15274:	4b69      	ldr	r3, [pc, #420]	; (1541c <processOnSMS+0x424>)
   15276:	6a9e      	ldr	r6, [r3, #40]	; 0x28
				user_settings_parameter_struct.motorVoltageBypassTime,
				user_settings_parameter_struct.responseAddress,
   15278:	4b68      	ldr	r3, [pc, #416]	; (1541c <processOnSMS+0x424>)
   1527a:	795b      	ldrb	r3, [r3, #5]
   1527c:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1527e:	4699      	mov	r9, r3
				user_settings_parameter_struct.underloadPerAddress,
   15280:	4b66      	ldr	r3, [pc, #408]	; (1541c <processOnSMS+0x424>)
   15282:	7f1b      	ldrb	r3, [r3, #28]
   15284:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15286:	603b      	str	r3, [r7, #0]
				user_settings_parameter_struct.overloadPerAddress,
   15288:	4b64      	ldr	r3, [pc, #400]	; (1541c <processOnSMS+0x424>)
   1528a:	7f5b      	ldrb	r3, [r3, #29]
   1528c:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1528e:	60bb      	str	r3, [r7, #8]
				user_settings_parameter_struct.eventStageAddress,
   15290:	4b62      	ldr	r3, [pc, #392]	; (1541c <processOnSMS+0x424>)
   15292:	7a1b      	ldrb	r3, [r3, #8]
   15294:	b2db      	uxtb	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   15296:	001d      	movs	r5, r3
				user_settings_parameter_struct.starDeltaTimerAddress,
   15298:	4b60      	ldr	r3, [pc, #384]	; (1541c <processOnSMS+0x424>)
   1529a:	88db      	ldrh	r3, [r3, #6]
   1529c:	b29b      	uxth	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   1529e:	001c      	movs	r4, r3
				user_settings_parameter_struct.autoStartTimeAddress);
   152a0:	4b5e      	ldr	r3, [pc, #376]	; (1541c <processOnSMS+0x424>)
   152a2:	885b      	ldrh	r3, [r3, #2]
   152a4:	b29b      	uxth	r3, r3
		sprintf(resep_msg,"FWV : %lu %s\nAUTO:%d SPP:%d SPPV:%d SEQP:%d DND:%d FDBK:%d UOM:%d MVBYP:%d MVBYPT:%lu RESP:%d OVR:%d UNDR:%d STAGE:%d STIME:%lu ATIME:%lu",
   152a6:	607b      	str	r3, [r7, #4]
   152a8:	4a5d      	ldr	r2, [pc, #372]	; (15420 <processOnSMS+0x428>)
   152aa:	495e      	ldr	r1, [pc, #376]	; (15424 <processOnSMS+0x42c>)
   152ac:	200c      	movs	r0, #12
   152ae:	2320      	movs	r3, #32
   152b0:	469c      	mov	ip, r3
   152b2:	2308      	movs	r3, #8
   152b4:	4698      	mov	r8, r3
   152b6:	44b8      	add	r8, r7
   152b8:	44c4      	add	ip, r8
   152ba:	4460      	add	r0, ip
   152bc:	687b      	ldr	r3, [r7, #4]
   152be:	930e      	str	r3, [sp, #56]	; 0x38
   152c0:	940d      	str	r4, [sp, #52]	; 0x34
   152c2:	950c      	str	r5, [sp, #48]	; 0x30
   152c4:	68bc      	ldr	r4, [r7, #8]
   152c6:	940b      	str	r4, [sp, #44]	; 0x2c
   152c8:	683c      	ldr	r4, [r7, #0]
   152ca:	940a      	str	r4, [sp, #40]	; 0x28
   152cc:	464c      	mov	r4, r9
   152ce:	9409      	str	r4, [sp, #36]	; 0x24
   152d0:	9608      	str	r6, [sp, #32]
   152d2:	68fc      	ldr	r4, [r7, #12]
   152d4:	9407      	str	r4, [sp, #28]
   152d6:	693c      	ldr	r4, [r7, #16]
   152d8:	9406      	str	r4, [sp, #24]
   152da:	697c      	ldr	r4, [r7, #20]
   152dc:	9405      	str	r4, [sp, #20]
   152de:	69bc      	ldr	r4, [r7, #24]
   152e0:	9404      	str	r4, [sp, #16]
   152e2:	69fc      	ldr	r4, [r7, #28]
   152e4:	9403      	str	r4, [sp, #12]
   152e6:	6a3c      	ldr	r4, [r7, #32]
   152e8:	9402      	str	r4, [sp, #8]
   152ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   152ec:	9301      	str	r3, [sp, #4]
   152ee:	465b      	mov	r3, fp
   152f0:	9300      	str	r3, [sp, #0]
   152f2:	0013      	movs	r3, r2
   152f4:	4652      	mov	r2, sl
   152f6:	4c4c      	ldr	r4, [pc, #304]	; (15428 <processOnSMS+0x430>)
   152f8:	47a0      	blx	r4
   152fa:	f002 fb3c 	bl	17976 <processOnSMS+0x297e>
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
   152fe:	4a4b      	ldr	r2, [pc, #300]	; (1542c <processOnSMS+0x434>)
   15300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15302:	0011      	movs	r1, r2
   15304:	0018      	movs	r0, r3
   15306:	4b32      	ldr	r3, [pc, #200]	; (153d0 <processOnSMS+0x3d8>)
   15308:	4798      	blx	r3
   1530a:	1e03      	subs	r3, r0, #0
   1530c:	d03c      	beq.n	15388 <processOnSMS+0x390>
	{
		clearNumbers(admin);
   1530e:	4b2c      	ldr	r3, [pc, #176]	; (153c0 <processOnSMS+0x3c8>)
   15310:	2298      	movs	r2, #152	; 0x98
   15312:	0052      	lsls	r2, r2, #1
   15314:	4694      	mov	ip, r2
   15316:	2220      	movs	r2, #32
   15318:	4690      	mov	r8, r2
   1531a:	2208      	movs	r2, #8
   1531c:	4691      	mov	r9, r2
   1531e:	44b9      	add	r9, r7
   15320:	44c8      	add	r8, r9
   15322:	44c4      	add	ip, r8
   15324:	4463      	add	r3, ip
   15326:	781b      	ldrb	r3, [r3, #0]
   15328:	0018      	movs	r0, r3
   1532a:	4b41      	ldr	r3, [pc, #260]	; (15430 <processOnSMS+0x438>)
   1532c:	4798      	blx	r3
		incomingSMSProcessed=true;
   1532e:	2330      	movs	r3, #48	; 0x30
   15330:	33ff      	adds	r3, #255	; 0xff
   15332:	2220      	movs	r2, #32
   15334:	4694      	mov	ip, r2
   15336:	2208      	movs	r2, #8
   15338:	4690      	mov	r8, r2
   1533a:	44b8      	add	r8, r7
   1533c:	44c4      	add	ip, r8
   1533e:	4463      	add	r3, ip
   15340:	2201      	movs	r2, #1
   15342:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
   15344:	4b1f      	ldr	r3, [pc, #124]	; (153c4 <processOnSMS+0x3cc>)
   15346:	2298      	movs	r2, #152	; 0x98
   15348:	0052      	lsls	r2, r2, #1
   1534a:	4694      	mov	ip, r2
   1534c:	2220      	movs	r2, #32
   1534e:	4690      	mov	r8, r2
   15350:	2208      	movs	r2, #8
   15352:	4691      	mov	r9, r2
   15354:	44b9      	add	r9, r7
   15356:	44c8      	add	r8, r9
   15358:	44c4      	add	ip, r8
   1535a:	4463      	add	r3, ip
   1535c:	781b      	ldrb	r3, [r3, #0]
   1535e:	2b00      	cmp	r3, #0
   15360:	d101      	bne.n	15366 <processOnSMS+0x36e>
   15362:	f002 fb08 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
   15366:	230c      	movs	r3, #12
   15368:	2220      	movs	r2, #32
   1536a:	4694      	mov	ip, r2
   1536c:	2208      	movs	r2, #8
   1536e:	4690      	mov	r8, r2
   15370:	44b8      	add	r8, r7
   15372:	44c4      	add	ip, r8
   15374:	4463      	add	r3, ip
   15376:	4a2f      	ldr	r2, [pc, #188]	; (15434 <processOnSMS+0x43c>)
   15378:	ca13      	ldmia	r2!, {r0, r1, r4}
   1537a:	c313      	stmia	r3!, {r0, r1, r4}
   1537c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1537e:	c313      	stmia	r3!, {r0, r1, r4}
   15380:	7812      	ldrb	r2, [r2, #0]
   15382:	701a      	strb	r2, [r3, #0]
   15384:	f002 faf7 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
   15388:	4a2b      	ldr	r2, [pc, #172]	; (15438 <processOnSMS+0x440>)
   1538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1538c:	0011      	movs	r1, r2
   1538e:	0018      	movs	r0, r3
   15390:	4b0f      	ldr	r3, [pc, #60]	; (153d0 <processOnSMS+0x3d8>)
   15392:	4798      	blx	r3
   15394:	1e03      	subs	r3, r0, #0
   15396:	d100      	bne.n	1539a <processOnSMS+0x3a2>
   15398:	e0c2      	b.n	15520 <processOnSMS+0x528>
	{
		saveAutoStartSettings(false);
   1539a:	2000      	movs	r0, #0
   1539c:	4b27      	ldr	r3, [pc, #156]	; (1543c <processOnSMS+0x444>)
   1539e:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
   153a0:	4b1d      	ldr	r3, [pc, #116]	; (15418 <processOnSMS+0x420>)
   153a2:	795b      	ldrb	r3, [r3, #5]
   153a4:	2b00      	cmp	r3, #0
   153a6:	d052      	beq.n	1544e <processOnSMS+0x456>
		{
			saveWaterBypassSettings(false);
   153a8:	2000      	movs	r0, #0
   153aa:	4b25      	ldr	r3, [pc, #148]	; (15440 <processOnSMS+0x448>)
   153ac:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
   153ae:	4b1a      	ldr	r3, [pc, #104]	; (15418 <processOnSMS+0x420>)
   153b0:	78db      	ldrb	r3, [r3, #3]
   153b2:	2b00      	cmp	r3, #0
   153b4:	d048      	beq.n	15448 <processOnSMS+0x450>
			{
				saveM2MSettings(false);
   153b6:	2000      	movs	r0, #0
   153b8:	4b22      	ldr	r3, [pc, #136]	; (15444 <processOnSMS+0x44c>)
   153ba:	4798      	blx	r3
   153bc:	e047      	b.n	1544e <processOnSMS+0x456>
   153be:	46c0      	nop			; (mov r8, r8)
   153c0:	fffffed3 	.word	0xfffffed3
   153c4:	fffffed2 	.word	0xfffffed2
   153c8:	fffffed1 	.word	0xfffffed1
   153cc:	0002a8cc 	.word	0x0002a8cc
   153d0:	0001420d 	.word	0x0001420d
   153d4:	0002a8d4 	.word	0x0002a8d4
   153d8:	200007f8 	.word	0x200007f8
   153dc:	20000804 	.word	0x20000804
   153e0:	00029657 	.word	0x00029657
   153e4:	000298d7 	.word	0x000298d7
   153e8:	00012319 	.word	0x00012319
   153ec:	20000784 	.word	0x20000784
   153f0:	00029621 	.word	0x00029621
   153f4:	00024251 	.word	0x00024251
   153f8:	000243f9 	.word	0x000243f9
   153fc:	00020969 	.word	0x00020969
   15400:	000142e1 	.word	0x000142e1
   15404:	0002a8dc 	.word	0x0002a8dc
   15408:	000130dd 	.word	0x000130dd
   1540c:	0002a8e4 	.word	0x0002a8e4
   15410:	0002a904 	.word	0x0002a904
   15414:	0002a924 	.word	0x0002a924
   15418:	2000082c 	.word	0x2000082c
   1541c:	20000854 	.word	0x20000854
   15420:	0002a92c 	.word	0x0002a92c
   15424:	0002a940 	.word	0x0002a940
   15428:	0002985d 	.word	0x0002985d
   1542c:	0002a9cc 	.word	0x0002a9cc
   15430:	0001110d 	.word	0x0001110d
   15434:	0002a9d8 	.word	0x0002a9d8
   15438:	0002a9f4 	.word	0x0002a9f4
   1543c:	000112a9 	.word	0x000112a9
   15440:	00011469 	.word	0x00011469
   15444:	00010be5 	.word	0x00010be5
			}
			else
			{
				savePreventOverFlowSettings(false);
   15448:	2000      	movs	r0, #0
   1544a:	4bd4      	ldr	r3, [pc, #848]	; (1579c <processOnSMS+0x7a4>)
   1544c:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1544e:	4bd4      	ldr	r3, [pc, #848]	; (157a0 <processOnSMS+0x7a8>)
   15450:	785b      	ldrb	r3, [r3, #1]
   15452:	2b00      	cmp	r3, #0
   15454:	d008      	beq.n	15468 <processOnSMS+0x470>
		{
			setOverloadPer(120);
   15456:	2078      	movs	r0, #120	; 0x78
   15458:	4bd2      	ldr	r3, [pc, #840]	; (157a4 <processOnSMS+0x7ac>)
   1545a:	4798      	blx	r3
			setUnderloadPer(85);
   1545c:	2055      	movs	r0, #85	; 0x55
   1545e:	4bd2      	ldr	r3, [pc, #840]	; (157a8 <processOnSMS+0x7b0>)
   15460:	4798      	blx	r3
			setCurrentDetection(false);
   15462:	2000      	movs	r0, #0
   15464:	4bd1      	ldr	r3, [pc, #836]	; (157ac <processOnSMS+0x7b4>)
   15466:	4798      	blx	r3
		}
		saveSinglePhasingSettings(true);
   15468:	2001      	movs	r0, #1
   1546a:	4bd1      	ldr	r3, [pc, #836]	; (157b0 <processOnSMS+0x7b8>)
   1546c:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
   1546e:	2050      	movs	r0, #80	; 0x50
   15470:	4bd0      	ldr	r3, [pc, #832]	; (157b4 <processOnSMS+0x7bc>)
   15472:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
   15474:	2001      	movs	r0, #1
   15476:	4bd0      	ldr	r3, [pc, #832]	; (157b8 <processOnSMS+0x7c0>)
   15478:	4798      	blx	r3
		saveDNDSettings(false);
   1547a:	2000      	movs	r0, #0
   1547c:	4bcf      	ldr	r3, [pc, #828]	; (157bc <processOnSMS+0x7c4>)
   1547e:	4798      	blx	r3
		saveMotorFeedbackDetectionSettings(MOTORFEEDBACK_DETECTION_ON);
   15480:	2002      	movs	r0, #2
   15482:	4bcf      	ldr	r3, [pc, #828]	; (157c0 <processOnSMS+0x7c8>)
   15484:	4798      	blx	r3
		saveUnderOverDetectionMethodSettings(MOTOR_UNDEROVER_DETECTION_CURRENT);
   15486:	2002      	movs	r0, #2
   15488:	4bce      	ldr	r3, [pc, #824]	; (157c4 <processOnSMS+0x7cc>)
   1548a:	4798      	blx	r3
		saveMotorVoltageBypassSettings(MOTOR_VOLTAGE_BYPASS_OFF);
   1548c:	2000      	movs	r0, #0
   1548e:	4bce      	ldr	r3, [pc, #824]	; (157c8 <processOnSMS+0x7d0>)
   15490:	4798      	blx	r3
		saveMotorVoltageBypasssTimeSettings(10000L);
   15492:	4bce      	ldr	r3, [pc, #824]	; (157cc <processOnSMS+0x7d4>)
   15494:	0018      	movs	r0, r3
   15496:	4bce      	ldr	r3, [pc, #824]	; (157d0 <processOnSMS+0x7d8>)
   15498:	4798      	blx	r3
		saveResponseSettings('T');
   1549a:	2054      	movs	r0, #84	; 0x54
   1549c:	4bcd      	ldr	r3, [pc, #820]	; (157d4 <processOnSMS+0x7dc>)
   1549e:	4798      	blx	r3
		
		saveNoCallSettings(false,0,0,0,0);
   154a0:	2300      	movs	r3, #0
   154a2:	9300      	str	r3, [sp, #0]
   154a4:	2300      	movs	r3, #0
   154a6:	2200      	movs	r2, #0
   154a8:	2100      	movs	r1, #0
   154aa:	2000      	movs	r0, #0
   154ac:	4cca      	ldr	r4, [pc, #808]	; (157d8 <processOnSMS+0x7e0>)
   154ae:	47a0      	blx	r4
		saveEventStageSettings(0);
   154b0:	2000      	movs	r0, #0
   154b2:	4bca      	ldr	r3, [pc, #808]	; (157dc <processOnSMS+0x7e4>)
   154b4:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
   154b6:	2032      	movs	r0, #50	; 0x32
   154b8:	4bc9      	ldr	r3, [pc, #804]	; (157e0 <processOnSMS+0x7e8>)
   154ba:	4798      	blx	r3
		saveStarDeltaTimer(2);
   154bc:	2002      	movs	r0, #2
   154be:	4bc9      	ldr	r3, [pc, #804]	; (157e4 <processOnSMS+0x7ec>)
   154c0:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   154c2:	2330      	movs	r3, #48	; 0x30
   154c4:	33ff      	adds	r3, #255	; 0xff
   154c6:	2220      	movs	r2, #32
   154c8:	4694      	mov	ip, r2
   154ca:	2208      	movs	r2, #8
   154cc:	4690      	mov	r8, r2
   154ce:	44b8      	add	r8, r7
   154d0:	44c4      	add	ip, r8
   154d2:	4463      	add	r3, ip
   154d4:	2201      	movs	r2, #1
   154d6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   154d8:	4bc3      	ldr	r3, [pc, #780]	; (157e8 <processOnSMS+0x7f0>)
   154da:	2298      	movs	r2, #152	; 0x98
   154dc:	0052      	lsls	r2, r2, #1
   154de:	4694      	mov	ip, r2
   154e0:	2220      	movs	r2, #32
   154e2:	4690      	mov	r8, r2
   154e4:	2208      	movs	r2, #8
   154e6:	4691      	mov	r9, r2
   154e8:	44b9      	add	r9, r7
   154ea:	44c8      	add	r8, r9
   154ec:	44c4      	add	ip, r8
   154ee:	4463      	add	r3, ip
   154f0:	781b      	ldrb	r3, [r3, #0]
   154f2:	2b00      	cmp	r3, #0
   154f4:	d101      	bne.n	154fa <processOnSMS+0x502>
   154f6:	f002 fa3e 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
   154fa:	230c      	movs	r3, #12
   154fc:	2220      	movs	r2, #32
   154fe:	4694      	mov	ip, r2
   15500:	2208      	movs	r2, #8
   15502:	4690      	mov	r8, r2
   15504:	44b8      	add	r8, r7
   15506:	44c4      	add	ip, r8
   15508:	4463      	add	r3, ip
   1550a:	4ab8      	ldr	r2, [pc, #736]	; (157ec <processOnSMS+0x7f4>)
   1550c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1550e:	c313      	stmia	r3!, {r0, r1, r4}
   15510:	ca13      	ldmia	r2!, {r0, r1, r4}
   15512:	c313      	stmia	r3!, {r0, r1, r4}
   15514:	ca13      	ldmia	r2!, {r0, r1, r4}
   15516:	c313      	stmia	r3!, {r0, r1, r4}
   15518:	7812      	ldrb	r2, [r2, #0]
   1551a:	701a      	strb	r2, [r3, #0]
   1551c:	f002 fa2b 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
   15520:	4ab3      	ldr	r2, [pc, #716]	; (157f0 <processOnSMS+0x7f8>)
   15522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15524:	0011      	movs	r1, r2
   15526:	0018      	movs	r0, r3
   15528:	4bb2      	ldr	r3, [pc, #712]	; (157f4 <processOnSMS+0x7fc>)
   1552a:	4798      	blx	r3
   1552c:	1e03      	subs	r3, r0, #0
   1552e:	d047      	beq.n	155c0 <processOnSMS+0x5c8>
	{
		response_sms_processed_cmd = true;
   15530:	4bad      	ldr	r3, [pc, #692]	; (157e8 <processOnSMS+0x7f0>)
   15532:	2298      	movs	r2, #152	; 0x98
   15534:	0052      	lsls	r2, r2, #1
   15536:	4694      	mov	ip, r2
   15538:	2220      	movs	r2, #32
   1553a:	4690      	mov	r8, r2
   1553c:	2208      	movs	r2, #8
   1553e:	4691      	mov	r9, r2
   15540:	44b9      	add	r9, r7
   15542:	44c8      	add	r8, r9
   15544:	44c4      	add	ip, r8
   15546:	4463      	add	r3, ip
   15548:	2201      	movs	r2, #1
   1554a:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   1554c:	2330      	movs	r3, #48	; 0x30
   1554e:	33ff      	adds	r3, #255	; 0xff
   15550:	2220      	movs	r2, #32
   15552:	4694      	mov	ip, r2
   15554:	2208      	movs	r2, #8
   15556:	4690      	mov	r8, r2
   15558:	44b8      	add	r8, r7
   1555a:	44c4      	add	ip, r8
   1555c:	4463      	add	r3, ip
   1555e:	2201      	movs	r2, #1
   15560:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
   15562:	230c      	movs	r3, #12
   15564:	2220      	movs	r2, #32
   15566:	4694      	mov	ip, r2
   15568:	2208      	movs	r2, #8
   1556a:	4690      	mov	r8, r2
   1556c:	44b8      	add	r8, r7
   1556e:	44c4      	add	ip, r8
   15570:	4463      	add	r3, ip
   15572:	22fa      	movs	r2, #250	; 0xfa
   15574:	2100      	movs	r1, #0
   15576:	0018      	movs	r0, r3
   15578:	4b9f      	ldr	r3, [pc, #636]	; (157f8 <processOnSMS+0x800>)
   1557a:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
   1557c:	4b9f      	ldr	r3, [pc, #636]	; (157fc <processOnSMS+0x804>)
   1557e:	789b      	ldrb	r3, [r3, #2]
   15580:	2b00      	cmp	r3, #0
   15582:	d110      	bne.n	155a6 <processOnSMS+0x5ae>
		{
			strcpy(resep_msg,"No Numbers Exists");
   15584:	230c      	movs	r3, #12
   15586:	2220      	movs	r2, #32
   15588:	4694      	mov	ip, r2
   1558a:	2208      	movs	r2, #8
   1558c:	4690      	mov	r8, r2
   1558e:	44b8      	add	r8, r7
   15590:	44c4      	add	ip, r8
   15592:	4463      	add	r3, ip
   15594:	4a9a      	ldr	r2, [pc, #616]	; (15800 <processOnSMS+0x808>)
   15596:	ca13      	ldmia	r2!, {r0, r1, r4}
   15598:	c313      	stmia	r3!, {r0, r1, r4}
   1559a:	6811      	ldr	r1, [r2, #0]
   1559c:	6019      	str	r1, [r3, #0]
   1559e:	8892      	ldrh	r2, [r2, #4]
   155a0:	809a      	strh	r2, [r3, #4]
   155a2:	f002 f9e8 	bl	17976 <processOnSMS+0x297e>
		}
		else
		{
			getNumbers(resep_msg);
   155a6:	230c      	movs	r3, #12
   155a8:	2220      	movs	r2, #32
   155aa:	4694      	mov	ip, r2
   155ac:	2208      	movs	r2, #8
   155ae:	4690      	mov	r8, r2
   155b0:	44b8      	add	r8, r7
   155b2:	44c4      	add	ip, r8
   155b4:	4463      	add	r3, ip
   155b6:	0018      	movs	r0, r3
   155b8:	4b92      	ldr	r3, [pc, #584]	; (15804 <processOnSMS+0x80c>)
   155ba:	4798      	blx	r3
   155bc:	f002 f9db 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
   155c0:	4a91      	ldr	r2, [pc, #580]	; (15808 <processOnSMS+0x810>)
   155c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   155c4:	0011      	movs	r1, r2
   155c6:	0018      	movs	r0, r3
   155c8:	4b8a      	ldr	r3, [pc, #552]	; (157f4 <processOnSMS+0x7fc>)
   155ca:	4798      	blx	r3
   155cc:	1e03      	subs	r3, r0, #0
   155ce:	d003      	beq.n	155d8 <processOnSMS+0x5e0>
	{
		system_reset();
   155d0:	4b8e      	ldr	r3, [pc, #568]	; (1580c <processOnSMS+0x814>)
   155d2:	4798      	blx	r3
   155d4:	f002 f9cf 	bl	17976 <processOnSMS+0x297e>
	}
	else if (StringstartsWith(received_command,"DID"))
   155d8:	4a8d      	ldr	r2, [pc, #564]	; (15810 <processOnSMS+0x818>)
   155da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   155dc:	0011      	movs	r1, r2
   155de:	0018      	movs	r0, r3
   155e0:	4b84      	ldr	r3, [pc, #528]	; (157f4 <processOnSMS+0x7fc>)
   155e2:	4798      	blx	r3
   155e4:	1e03      	subs	r3, r0, #0
   155e6:	d028      	beq.n	1563a <processOnSMS+0x642>
	{
		response_sms_processed_cmd=true;
   155e8:	4b7f      	ldr	r3, [pc, #508]	; (157e8 <processOnSMS+0x7f0>)
   155ea:	2298      	movs	r2, #152	; 0x98
   155ec:	0052      	lsls	r2, r2, #1
   155ee:	4694      	mov	ip, r2
   155f0:	2220      	movs	r2, #32
   155f2:	4690      	mov	r8, r2
   155f4:	2208      	movs	r2, #8
   155f6:	4691      	mov	r9, r2
   155f8:	44b9      	add	r9, r7
   155fa:	44c8      	add	r8, r9
   155fc:	44c4      	add	ip, r8
   155fe:	4463      	add	r3, ip
   15600:	2201      	movs	r2, #1
   15602:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
   15604:	2330      	movs	r3, #48	; 0x30
   15606:	33ff      	adds	r3, #255	; 0xff
   15608:	2220      	movs	r2, #32
   1560a:	4694      	mov	ip, r2
   1560c:	2208      	movs	r2, #8
   1560e:	4690      	mov	r8, r2
   15610:	44b8      	add	r8, r7
   15612:	44c4      	add	ip, r8
   15614:	4463      	add	r3, ip
   15616:	2201      	movs	r2, #1
   15618:	701a      	strb	r2, [r3, #0]
		sprintf(resep_msg,"%lu %s",factory_settings_parameter_struct.DeviceId_ee,VERSION_NO);
   1561a:	4b61      	ldr	r3, [pc, #388]	; (157a0 <processOnSMS+0x7a8>)
   1561c:	689a      	ldr	r2, [r3, #8]
   1561e:	4b7d      	ldr	r3, [pc, #500]	; (15814 <processOnSMS+0x81c>)
   15620:	497d      	ldr	r1, [pc, #500]	; (15818 <processOnSMS+0x820>)
   15622:	200c      	movs	r0, #12
   15624:	2420      	movs	r4, #32
   15626:	46a4      	mov	ip, r4
   15628:	2408      	movs	r4, #8
   1562a:	46a0      	mov	r8, r4
   1562c:	44b8      	add	r8, r7
   1562e:	44c4      	add	ip, r8
   15630:	4460      	add	r0, ip
   15632:	4c7a      	ldr	r4, [pc, #488]	; (1581c <processOnSMS+0x824>)
   15634:	47a0      	blx	r4
   15636:	f002 f99e 	bl	17976 <processOnSMS+0x297e>
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
   1563a:	4a79      	ldr	r2, [pc, #484]	; (15820 <processOnSMS+0x828>)
   1563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1563e:	0011      	movs	r1, r2
   15640:	0018      	movs	r0, r3
   15642:	4b6c      	ldr	r3, [pc, #432]	; (157f4 <processOnSMS+0x7fc>)
   15644:	4798      	blx	r3
   15646:	1e03      	subs	r3, r0, #0
   15648:	d030      	beq.n	156ac <processOnSMS+0x6b4>
	{
		saveAutoStartSettings(true);
   1564a:	2001      	movs	r0, #1
   1564c:	4b75      	ldr	r3, [pc, #468]	; (15824 <processOnSMS+0x82c>)
   1564e:	4798      	blx	r3
		resetAutoStart(true);
   15650:	2001      	movs	r0, #1
   15652:	4b75      	ldr	r3, [pc, #468]	; (15828 <processOnSMS+0x830>)
   15654:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15656:	2330      	movs	r3, #48	; 0x30
   15658:	33ff      	adds	r3, #255	; 0xff
   1565a:	2220      	movs	r2, #32
   1565c:	4694      	mov	ip, r2
   1565e:	2208      	movs	r2, #8
   15660:	4690      	mov	r8, r2
   15662:	44b8      	add	r8, r7
   15664:	44c4      	add	ip, r8
   15666:	4463      	add	r3, ip
   15668:	2201      	movs	r2, #1
   1566a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1566c:	4b5e      	ldr	r3, [pc, #376]	; (157e8 <processOnSMS+0x7f0>)
   1566e:	2298      	movs	r2, #152	; 0x98
   15670:	0052      	lsls	r2, r2, #1
   15672:	4694      	mov	ip, r2
   15674:	2220      	movs	r2, #32
   15676:	4690      	mov	r8, r2
   15678:	2208      	movs	r2, #8
   1567a:	4691      	mov	r9, r2
   1567c:	44b9      	add	r9, r7
   1567e:	44c8      	add	r8, r9
   15680:	44c4      	add	ip, r8
   15682:	4463      	add	r3, ip
   15684:	781b      	ldrb	r3, [r3, #0]
   15686:	2b00      	cmp	r3, #0
   15688:	d101      	bne.n	1568e <processOnSMS+0x696>
   1568a:	f002 f974 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"MOTOR AUTO : ON");
   1568e:	230c      	movs	r3, #12
   15690:	2220      	movs	r2, #32
   15692:	4694      	mov	ip, r2
   15694:	2208      	movs	r2, #8
   15696:	4690      	mov	r8, r2
   15698:	44b8      	add	r8, r7
   1569a:	44c4      	add	ip, r8
   1569c:	4463      	add	r3, ip
   1569e:	4a63      	ldr	r2, [pc, #396]	; (1582c <processOnSMS+0x834>)
   156a0:	ca13      	ldmia	r2!, {r0, r1, r4}
   156a2:	c313      	stmia	r3!, {r0, r1, r4}
   156a4:	6812      	ldr	r2, [r2, #0]
   156a6:	601a      	str	r2, [r3, #0]
   156a8:	f002 f965 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
   156ac:	4a60      	ldr	r2, [pc, #384]	; (15830 <processOnSMS+0x838>)
   156ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   156b0:	0011      	movs	r1, r2
   156b2:	0018      	movs	r0, r3
   156b4:	4b4f      	ldr	r3, [pc, #316]	; (157f4 <processOnSMS+0x7fc>)
   156b6:	4798      	blx	r3
   156b8:	1e03      	subs	r3, r0, #0
   156ba:	d032      	beq.n	15722 <processOnSMS+0x72a>
	{
		saveAutoStartSettings(false);
   156bc:	2000      	movs	r0, #0
   156be:	4b59      	ldr	r3, [pc, #356]	; (15824 <processOnSMS+0x82c>)
   156c0:	4798      	blx	r3
		resetAutoStart(true);
   156c2:	2001      	movs	r0, #1
   156c4:	4b58      	ldr	r3, [pc, #352]	; (15828 <processOnSMS+0x830>)
   156c6:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   156c8:	2330      	movs	r3, #48	; 0x30
   156ca:	33ff      	adds	r3, #255	; 0xff
   156cc:	2220      	movs	r2, #32
   156ce:	4694      	mov	ip, r2
   156d0:	2208      	movs	r2, #8
   156d2:	4690      	mov	r8, r2
   156d4:	44b8      	add	r8, r7
   156d6:	44c4      	add	ip, r8
   156d8:	4463      	add	r3, ip
   156da:	2201      	movs	r2, #1
   156dc:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   156de:	4b42      	ldr	r3, [pc, #264]	; (157e8 <processOnSMS+0x7f0>)
   156e0:	2298      	movs	r2, #152	; 0x98
   156e2:	0052      	lsls	r2, r2, #1
   156e4:	4694      	mov	ip, r2
   156e6:	2220      	movs	r2, #32
   156e8:	4690      	mov	r8, r2
   156ea:	2208      	movs	r2, #8
   156ec:	4691      	mov	r9, r2
   156ee:	44b9      	add	r9, r7
   156f0:	44c8      	add	r8, r9
   156f2:	44c4      	add	ip, r8
   156f4:	4463      	add	r3, ip
   156f6:	781b      	ldrb	r3, [r3, #0]
   156f8:	2b00      	cmp	r3, #0
   156fa:	d101      	bne.n	15700 <processOnSMS+0x708>
   156fc:	f002 f93b 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"MOTOR AUTO : OFF");
   15700:	230c      	movs	r3, #12
   15702:	2220      	movs	r2, #32
   15704:	4694      	mov	ip, r2
   15706:	2208      	movs	r2, #8
   15708:	4690      	mov	r8, r2
   1570a:	44b8      	add	r8, r7
   1570c:	44c4      	add	ip, r8
   1570e:	4463      	add	r3, ip
   15710:	4a48      	ldr	r2, [pc, #288]	; (15834 <processOnSMS+0x83c>)
   15712:	ca13      	ldmia	r2!, {r0, r1, r4}
   15714:	c313      	stmia	r3!, {r0, r1, r4}
   15716:	6811      	ldr	r1, [r2, #0]
   15718:	6019      	str	r1, [r3, #0]
   1571a:	7912      	ldrb	r2, [r2, #4]
   1571c:	711a      	strb	r2, [r3, #4]
   1571e:	f002 f92a 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
   15722:	4a45      	ldr	r2, [pc, #276]	; (15838 <processOnSMS+0x840>)
   15724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15726:	0011      	movs	r1, r2
   15728:	0018      	movs	r0, r3
   1572a:	4b32      	ldr	r3, [pc, #200]	; (157f4 <processOnSMS+0x7fc>)
   1572c:	4798      	blx	r3
   1572e:	1e03      	subs	r3, r0, #0
   15730:	d100      	bne.n	15734 <processOnSMS+0x73c>
   15732:	e087      	b.n	15844 <processOnSMS+0x84c>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15734:	4b1a      	ldr	r3, [pc, #104]	; (157a0 <processOnSMS+0x7a8>)
   15736:	795b      	ldrb	r3, [r3, #5]
   15738:	2b00      	cmp	r3, #0
   1573a:	d101      	bne.n	15740 <processOnSMS+0x748>
   1573c:	f002 f91b 	bl	17976 <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   15740:	2330      	movs	r3, #48	; 0x30
   15742:	33ff      	adds	r3, #255	; 0xff
   15744:	2220      	movs	r2, #32
   15746:	4694      	mov	ip, r2
   15748:	2208      	movs	r2, #8
   1574a:	4690      	mov	r8, r2
   1574c:	44b8      	add	r8, r7
   1574e:	44c4      	add	ip, r8
   15750:	4463      	add	r3, ip
   15752:	2201      	movs	r2, #1
   15754:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
   15756:	2001      	movs	r0, #1
   15758:	4b38      	ldr	r3, [pc, #224]	; (1583c <processOnSMS+0x844>)
   1575a:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   1575c:	4b22      	ldr	r3, [pc, #136]	; (157e8 <processOnSMS+0x7f0>)
   1575e:	2298      	movs	r2, #152	; 0x98
   15760:	0052      	lsls	r2, r2, #1
   15762:	4694      	mov	ip, r2
   15764:	2220      	movs	r2, #32
   15766:	4690      	mov	r8, r2
   15768:	2208      	movs	r2, #8
   1576a:	4691      	mov	r9, r2
   1576c:	44b9      	add	r9, r7
   1576e:	44c8      	add	r8, r9
   15770:	44c4      	add	ip, r8
   15772:	4463      	add	r3, ip
   15774:	781b      	ldrb	r3, [r3, #0]
   15776:	2b00      	cmp	r3, #0
   15778:	d101      	bne.n	1577e <processOnSMS+0x786>
   1577a:	f002 f8fc 	bl	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
   1577e:	230c      	movs	r3, #12
   15780:	2220      	movs	r2, #32
   15782:	4694      	mov	ip, r2
   15784:	2208      	movs	r2, #8
   15786:	4690      	mov	r8, r2
   15788:	44b8      	add	r8, r7
   1578a:	44c4      	add	ip, r8
   1578c:	4463      	add	r3, ip
   1578e:	4a2c      	ldr	r2, [pc, #176]	; (15840 <processOnSMS+0x848>)
   15790:	ca13      	ldmia	r2!, {r0, r1, r4}
   15792:	c313      	stmia	r3!, {r0, r1, r4}
   15794:	6812      	ldr	r2, [r2, #0]
   15796:	601a      	str	r2, [r3, #0]
   15798:	f002 f8ed 	bl	17976 <processOnSMS+0x297e>
   1579c:	000114b5 	.word	0x000114b5
   157a0:	2000082c 	.word	0x2000082c
   157a4:	00011501 	.word	0x00011501
   157a8:	0001156d 	.word	0x0001156d
   157ac:	00011995 	.word	0x00011995
   157b0:	000115e1 	.word	0x000115e1
   157b4:	0001162d 	.word	0x0001162d
   157b8:	00011679 	.word	0x00011679
   157bc:	00011341 	.word	0x00011341
   157c0:	000117a1 	.word	0x000117a1
   157c4:	000116c5 	.word	0x000116c5
   157c8:	00011711 	.word	0x00011711
   157cc:	00002710 	.word	0x00002710
   157d0:	0001175d 	.word	0x0001175d
   157d4:	0001138d 	.word	0x0001138d
   157d8:	000113d9 	.word	0x000113d9
   157dc:	00011a2d 	.word	0x00011a2d
   157e0:	000112f5 	.word	0x000112f5
   157e4:	000119e1 	.word	0x000119e1
   157e8:	fffffed2 	.word	0xfffffed2
   157ec:	0002a9fc 	.word	0x0002a9fc
   157f0:	0002aa24 	.word	0x0002aa24
   157f4:	0001420d 	.word	0x0001420d
   157f8:	00029657 	.word	0x00029657
   157fc:	20000814 	.word	0x20000814
   15800:	0002aa28 	.word	0x0002aa28
   15804:	000107f9 	.word	0x000107f9
   15808:	0002aa3c 	.word	0x0002aa3c
   1580c:	000142e1 	.word	0x000142e1
   15810:	0002aa44 	.word	0x0002aa44
   15814:	0002a92c 	.word	0x0002a92c
   15818:	0002aa48 	.word	0x0002aa48
   1581c:	0002985d 	.word	0x0002985d
   15820:	0002aa50 	.word	0x0002aa50
   15824:	000112a9 	.word	0x000112a9
   15828:	0001be15 	.word	0x0001be15
   1582c:	0002aa58 	.word	0x0002aa58
   15830:	0002aa68 	.word	0x0002aa68
   15834:	0002aa70 	.word	0x0002aa70
   15838:	0002aa84 	.word	0x0002aa84
   1583c:	00011469 	.word	0x00011469
   15840:	0002aa8c 	.word	0x0002aa8c
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
   15844:	4ad0      	ldr	r2, [pc, #832]	; (15b88 <processOnSMS+0xb90>)
   15846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15848:	0011      	movs	r1, r2
   1584a:	0018      	movs	r0, r3
   1584c:	4bcf      	ldr	r3, [pc, #828]	; (15b8c <processOnSMS+0xb94>)
   1584e:	4798      	blx	r3
   15850:	1e03      	subs	r3, r0, #0
   15852:	d035      	beq.n	158c0 <processOnSMS+0x8c8>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
   15854:	4bce      	ldr	r3, [pc, #824]	; (15b90 <processOnSMS+0xb98>)
   15856:	795b      	ldrb	r3, [r3, #5]
   15858:	2b00      	cmp	r3, #0
   1585a:	d101      	bne.n	15860 <processOnSMS+0x868>
   1585c:	f002 f88b 	bl	17976 <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   15860:	2330      	movs	r3, #48	; 0x30
   15862:	33ff      	adds	r3, #255	; 0xff
   15864:	2220      	movs	r2, #32
   15866:	4694      	mov	ip, r2
   15868:	2208      	movs	r2, #8
   1586a:	4690      	mov	r8, r2
   1586c:	44b8      	add	r8, r7
   1586e:	44c4      	add	ip, r8
   15870:	4463      	add	r3, ip
   15872:	2201      	movs	r2, #1
   15874:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
   15876:	2000      	movs	r0, #0
   15878:	4bc6      	ldr	r3, [pc, #792]	; (15b94 <processOnSMS+0xb9c>)
   1587a:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   1587c:	4bc6      	ldr	r3, [pc, #792]	; (15b98 <processOnSMS+0xba0>)
   1587e:	2298      	movs	r2, #152	; 0x98
   15880:	0052      	lsls	r2, r2, #1
   15882:	4694      	mov	ip, r2
   15884:	2220      	movs	r2, #32
   15886:	4690      	mov	r8, r2
   15888:	2208      	movs	r2, #8
   1588a:	4691      	mov	r9, r2
   1588c:	44b9      	add	r9, r7
   1588e:	44c8      	add	r8, r9
   15890:	44c4      	add	ip, r8
   15892:	4463      	add	r3, ip
   15894:	781b      	ldrb	r3, [r3, #0]
   15896:	2b00      	cmp	r3, #0
   15898:	d101      	bne.n	1589e <processOnSMS+0x8a6>
   1589a:	f002 f86c 	bl	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
   1589e:	230c      	movs	r3, #12
   158a0:	2220      	movs	r2, #32
   158a2:	4694      	mov	ip, r2
   158a4:	2208      	movs	r2, #8
   158a6:	4690      	mov	r8, r2
   158a8:	44b8      	add	r8, r7
   158aa:	44c4      	add	ip, r8
   158ac:	4463      	add	r3, ip
   158ae:	4abb      	ldr	r2, [pc, #748]	; (15b9c <processOnSMS+0xba4>)
   158b0:	ca13      	ldmia	r2!, {r0, r1, r4}
   158b2:	c313      	stmia	r3!, {r0, r1, r4}
   158b4:	6811      	ldr	r1, [r2, #0]
   158b6:	6019      	str	r1, [r3, #0]
   158b8:	7912      	ldrb	r2, [r2, #4]
   158ba:	711a      	strb	r2, [r3, #4]
   158bc:	f002 f85b 	bl	17976 <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
   158c0:	4ab7      	ldr	r2, [pc, #732]	; (15ba0 <processOnSMS+0xba8>)
   158c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   158c4:	0011      	movs	r1, r2
   158c6:	0018      	movs	r0, r3
   158c8:	4bb0      	ldr	r3, [pc, #704]	; (15b8c <processOnSMS+0xb94>)
   158ca:	4798      	blx	r3
   158cc:	1e03      	subs	r3, r0, #0
   158ce:	d02f      	beq.n	15930 <processOnSMS+0x938>
	{
		saveSinglePhasingSettings(true);
   158d0:	2001      	movs	r0, #1
   158d2:	4bb4      	ldr	r3, [pc, #720]	; (15ba4 <processOnSMS+0xbac>)
   158d4:	4798      	blx	r3
		incomingSMSProcessed=true;
   158d6:	2330      	movs	r3, #48	; 0x30
   158d8:	33ff      	adds	r3, #255	; 0xff
   158da:	2220      	movs	r2, #32
   158dc:	4694      	mov	ip, r2
   158de:	2208      	movs	r2, #8
   158e0:	4690      	mov	r8, r2
   158e2:	44b8      	add	r8, r7
   158e4:	44c4      	add	ip, r8
   158e6:	4463      	add	r3, ip
   158e8:	2201      	movs	r2, #1
   158ea:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   158ec:	4baa      	ldr	r3, [pc, #680]	; (15b98 <processOnSMS+0xba0>)
   158ee:	2298      	movs	r2, #152	; 0x98
   158f0:	0052      	lsls	r2, r2, #1
   158f2:	4694      	mov	ip, r2
   158f4:	2220      	movs	r2, #32
   158f6:	4690      	mov	r8, r2
   158f8:	2208      	movs	r2, #8
   158fa:	4691      	mov	r9, r2
   158fc:	44b9      	add	r9, r7
   158fe:	44c8      	add	r8, r9
   15900:	44c4      	add	ip, r8
   15902:	4463      	add	r3, ip
   15904:	781b      	ldrb	r3, [r3, #0]
   15906:	2b00      	cmp	r3, #0
   15908:	d101      	bne.n	1590e <processOnSMS+0x916>
   1590a:	f002 f834 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"SPP ON");
   1590e:	230c      	movs	r3, #12
   15910:	2220      	movs	r2, #32
   15912:	4694      	mov	ip, r2
   15914:	2208      	movs	r2, #8
   15916:	4690      	mov	r8, r2
   15918:	44b8      	add	r8, r7
   1591a:	44c4      	add	ip, r8
   1591c:	4463      	add	r3, ip
   1591e:	4aa2      	ldr	r2, [pc, #648]	; (15ba8 <processOnSMS+0xbb0>)
   15920:	6811      	ldr	r1, [r2, #0]
   15922:	6019      	str	r1, [r3, #0]
   15924:	8891      	ldrh	r1, [r2, #4]
   15926:	8099      	strh	r1, [r3, #4]
   15928:	7992      	ldrb	r2, [r2, #6]
   1592a:	719a      	strb	r2, [r3, #6]
   1592c:	f002 f823 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
   15930:	4a9e      	ldr	r2, [pc, #632]	; (15bac <processOnSMS+0xbb4>)
   15932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15934:	0011      	movs	r1, r2
   15936:	0018      	movs	r0, r3
   15938:	4b94      	ldr	r3, [pc, #592]	; (15b8c <processOnSMS+0xb94>)
   1593a:	4798      	blx	r3
   1593c:	1e03      	subs	r3, r0, #0
   1593e:	d02b      	beq.n	15998 <processOnSMS+0x9a0>
	{
		saveSinglePhasingSettings(false);
   15940:	2000      	movs	r0, #0
   15942:	4b98      	ldr	r3, [pc, #608]	; (15ba4 <processOnSMS+0xbac>)
   15944:	4798      	blx	r3
		incomingSMSProcessed=true;
   15946:	2330      	movs	r3, #48	; 0x30
   15948:	33ff      	adds	r3, #255	; 0xff
   1594a:	2220      	movs	r2, #32
   1594c:	4694      	mov	ip, r2
   1594e:	2208      	movs	r2, #8
   15950:	4690      	mov	r8, r2
   15952:	44b8      	add	r8, r7
   15954:	44c4      	add	ip, r8
   15956:	4463      	add	r3, ip
   15958:	2201      	movs	r2, #1
   1595a:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   1595c:	4b8e      	ldr	r3, [pc, #568]	; (15b98 <processOnSMS+0xba0>)
   1595e:	2298      	movs	r2, #152	; 0x98
   15960:	0052      	lsls	r2, r2, #1
   15962:	4694      	mov	ip, r2
   15964:	2220      	movs	r2, #32
   15966:	4690      	mov	r8, r2
   15968:	2208      	movs	r2, #8
   1596a:	4691      	mov	r9, r2
   1596c:	44b9      	add	r9, r7
   1596e:	44c8      	add	r8, r9
   15970:	44c4      	add	ip, r8
   15972:	4463      	add	r3, ip
   15974:	781b      	ldrb	r3, [r3, #0]
   15976:	2b00      	cmp	r3, #0
   15978:	d101      	bne.n	1597e <processOnSMS+0x986>
   1597a:	f001 fffc 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"SPP OFF");
   1597e:	230c      	movs	r3, #12
   15980:	2220      	movs	r2, #32
   15982:	4694      	mov	ip, r2
   15984:	2208      	movs	r2, #8
   15986:	4690      	mov	r8, r2
   15988:	44b8      	add	r8, r7
   1598a:	44c4      	add	ip, r8
   1598c:	4463      	add	r3, ip
   1598e:	4a88      	ldr	r2, [pc, #544]	; (15bb0 <processOnSMS+0xbb8>)
   15990:	ca03      	ldmia	r2!, {r0, r1}
   15992:	c303      	stmia	r3!, {r0, r1}
   15994:	f001 ffef 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
   15998:	4a86      	ldr	r2, [pc, #536]	; (15bb4 <processOnSMS+0xbbc>)
   1599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1599c:	0011      	movs	r1, r2
   1599e:	0018      	movs	r0, r3
   159a0:	4b7a      	ldr	r3, [pc, #488]	; (15b8c <processOnSMS+0xb94>)
   159a2:	4798      	blx	r3
   159a4:	1e03      	subs	r3, r0, #0
   159a6:	d100      	bne.n	159aa <processOnSMS+0x9b2>
   159a8:	e083      	b.n	15ab2 <processOnSMS+0xaba>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   159aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   159ac:	1d1c      	adds	r4, r3, #4
   159ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   159b0:	0018      	movs	r0, r3
   159b2:	4b81      	ldr	r3, [pc, #516]	; (15bb8 <processOnSMS+0xbc0>)
   159b4:	4798      	blx	r3
   159b6:	0002      	movs	r2, r0
   159b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   159ba:	0021      	movs	r1, r4
   159bc:	0018      	movs	r0, r3
   159be:	4b7f      	ldr	r3, [pc, #508]	; (15bbc <processOnSMS+0xbc4>)
   159c0:	4798      	blx	r3
		uint16_t sppVoltage = atoi(received_command);
   159c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   159c4:	0018      	movs	r0, r3
   159c6:	4b7e      	ldr	r3, [pc, #504]	; (15bc0 <processOnSMS+0xbc8>)
   159c8:	4798      	blx	r3
   159ca:	0002      	movs	r2, r0
   159cc:	2396      	movs	r3, #150	; 0x96
   159ce:	005b      	lsls	r3, r3, #1
   159d0:	2120      	movs	r1, #32
   159d2:	468c      	mov	ip, r1
   159d4:	2108      	movs	r1, #8
   159d6:	4688      	mov	r8, r1
   159d8:	44b8      	add	r8, r7
   159da:	44c4      	add	ip, r8
   159dc:	4463      	add	r3, ip
   159de:	801a      	strh	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
   159e0:	2396      	movs	r3, #150	; 0x96
   159e2:	005b      	lsls	r3, r3, #1
   159e4:	2220      	movs	r2, #32
   159e6:	4694      	mov	ip, r2
   159e8:	2208      	movs	r2, #8
   159ea:	4690      	mov	r8, r2
   159ec:	44b8      	add	r8, r7
   159ee:	44c4      	add	ip, r8
   159f0:	4463      	add	r3, ip
   159f2:	881b      	ldrh	r3, [r3, #0]
   159f4:	2b13      	cmp	r3, #19
   159f6:	d80a      	bhi.n	15a0e <processOnSMS+0xa16>
   159f8:	2396      	movs	r3, #150	; 0x96
   159fa:	005b      	lsls	r3, r3, #1
   159fc:	2220      	movs	r2, #32
   159fe:	4694      	mov	ip, r2
   15a00:	2208      	movs	r2, #8
   15a02:	4690      	mov	r8, r2
   15a04:	44b8      	add	r8, r7
   15a06:	44c4      	add	ip, r8
   15a08:	4463      	add	r3, ip
   15a0a:	2214      	movs	r2, #20
   15a0c:	801a      	strh	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
   15a0e:	2396      	movs	r3, #150	; 0x96
   15a10:	005b      	lsls	r3, r3, #1
   15a12:	2220      	movs	r2, #32
   15a14:	4694      	mov	ip, r2
   15a16:	2208      	movs	r2, #8
   15a18:	4690      	mov	r8, r2
   15a1a:	44b8      	add	r8, r7
   15a1c:	44c4      	add	ip, r8
   15a1e:	4463      	add	r3, ip
   15a20:	881a      	ldrh	r2, [r3, #0]
   15a22:	23dc      	movs	r3, #220	; 0xdc
   15a24:	005b      	lsls	r3, r3, #1
   15a26:	429a      	cmp	r2, r3
   15a28:	d90b      	bls.n	15a42 <processOnSMS+0xa4a>
   15a2a:	2396      	movs	r3, #150	; 0x96
   15a2c:	005b      	lsls	r3, r3, #1
   15a2e:	2220      	movs	r2, #32
   15a30:	4694      	mov	ip, r2
   15a32:	2208      	movs	r2, #8
   15a34:	4690      	mov	r8, r2
   15a36:	44b8      	add	r8, r7
   15a38:	44c4      	add	ip, r8
   15a3a:	4463      	add	r3, ip
   15a3c:	22dc      	movs	r2, #220	; 0xdc
   15a3e:	0052      	lsls	r2, r2, #1
   15a40:	801a      	strh	r2, [r3, #0]
		saveSinglePhasingVoltage(sppVoltage);
   15a42:	2396      	movs	r3, #150	; 0x96
   15a44:	005b      	lsls	r3, r3, #1
   15a46:	2220      	movs	r2, #32
   15a48:	4694      	mov	ip, r2
   15a4a:	2208      	movs	r2, #8
   15a4c:	4690      	mov	r8, r2
   15a4e:	44b8      	add	r8, r7
   15a50:	44c4      	add	ip, r8
   15a52:	4463      	add	r3, ip
   15a54:	881b      	ldrh	r3, [r3, #0]
   15a56:	0018      	movs	r0, r3
   15a58:	4b5a      	ldr	r3, [pc, #360]	; (15bc4 <processOnSMS+0xbcc>)
   15a5a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15a5c:	2330      	movs	r3, #48	; 0x30
   15a5e:	33ff      	adds	r3, #255	; 0xff
   15a60:	2220      	movs	r2, #32
   15a62:	4694      	mov	ip, r2
   15a64:	2208      	movs	r2, #8
   15a66:	4690      	mov	r8, r2
   15a68:	44b8      	add	r8, r7
   15a6a:	44c4      	add	ip, r8
   15a6c:	4463      	add	r3, ip
   15a6e:	2201      	movs	r2, #1
   15a70:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
   15a72:	4b49      	ldr	r3, [pc, #292]	; (15b98 <processOnSMS+0xba0>)
   15a74:	2298      	movs	r2, #152	; 0x98
   15a76:	0052      	lsls	r2, r2, #1
   15a78:	4694      	mov	ip, r2
   15a7a:	2220      	movs	r2, #32
   15a7c:	4690      	mov	r8, r2
   15a7e:	2208      	movs	r2, #8
   15a80:	4691      	mov	r9, r2
   15a82:	44b9      	add	r9, r7
   15a84:	44c8      	add	r8, r9
   15a86:	44c4      	add	ip, r8
   15a88:	4463      	add	r3, ip
   15a8a:	781b      	ldrb	r3, [r3, #0]
   15a8c:	2b00      	cmp	r3, #0
   15a8e:	d101      	bne.n	15a94 <processOnSMS+0xa9c>
   15a90:	f001 ff71 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"SPP VOLT SET");
   15a94:	230c      	movs	r3, #12
   15a96:	2220      	movs	r2, #32
   15a98:	4694      	mov	ip, r2
   15a9a:	2208      	movs	r2, #8
   15a9c:	4690      	mov	r8, r2
   15a9e:	44b8      	add	r8, r7
   15aa0:	44c4      	add	ip, r8
   15aa2:	4463      	add	r3, ip
   15aa4:	4a48      	ldr	r2, [pc, #288]	; (15bc8 <processOnSMS+0xbd0>)
   15aa6:	ca13      	ldmia	r2!, {r0, r1, r4}
   15aa8:	c313      	stmia	r3!, {r0, r1, r4}
   15aaa:	7812      	ldrb	r2, [r2, #0]
   15aac:	701a      	strb	r2, [r3, #0]
   15aae:	f001 ff62 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
   15ab2:	4a46      	ldr	r2, [pc, #280]	; (15bcc <processOnSMS+0xbd4>)
   15ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ab6:	0011      	movs	r1, r2
   15ab8:	0018      	movs	r0, r3
   15aba:	4b34      	ldr	r3, [pc, #208]	; (15b8c <processOnSMS+0xb94>)
   15abc:	4798      	blx	r3
   15abe:	1e03      	subs	r3, r0, #0
   15ac0:	d02b      	beq.n	15b1a <processOnSMS+0xb22>
	{
		savePhaseSequenceProtectionSettings(true);
   15ac2:	2001      	movs	r0, #1
   15ac4:	4b42      	ldr	r3, [pc, #264]	; (15bd0 <processOnSMS+0xbd8>)
   15ac6:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   15ac8:	2330      	movs	r3, #48	; 0x30
   15aca:	33ff      	adds	r3, #255	; 0xff
   15acc:	2220      	movs	r2, #32
   15ace:	4694      	mov	ip, r2
   15ad0:	2208      	movs	r2, #8
   15ad2:	4690      	mov	r8, r2
   15ad4:	44b8      	add	r8, r7
   15ad6:	44c4      	add	ip, r8
   15ad8:	4463      	add	r3, ip
   15ada:	2201      	movs	r2, #1
   15adc:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   15ade:	4b2e      	ldr	r3, [pc, #184]	; (15b98 <processOnSMS+0xba0>)
   15ae0:	2298      	movs	r2, #152	; 0x98
   15ae2:	0052      	lsls	r2, r2, #1
   15ae4:	4694      	mov	ip, r2
   15ae6:	2220      	movs	r2, #32
   15ae8:	4690      	mov	r8, r2
   15aea:	2208      	movs	r2, #8
   15aec:	4691      	mov	r9, r2
   15aee:	44b9      	add	r9, r7
   15af0:	44c8      	add	r8, r9
   15af2:	44c4      	add	ip, r8
   15af4:	4463      	add	r3, ip
   15af6:	781b      	ldrb	r3, [r3, #0]
   15af8:	2b00      	cmp	r3, #0
   15afa:	d101      	bne.n	15b00 <processOnSMS+0xb08>
   15afc:	f001 ff3b 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"SEQP ON");
   15b00:	230c      	movs	r3, #12
   15b02:	2220      	movs	r2, #32
   15b04:	4694      	mov	ip, r2
   15b06:	2208      	movs	r2, #8
   15b08:	4690      	mov	r8, r2
   15b0a:	44b8      	add	r8, r7
   15b0c:	44c4      	add	ip, r8
   15b0e:	4463      	add	r3, ip
   15b10:	4a30      	ldr	r2, [pc, #192]	; (15bd4 <processOnSMS+0xbdc>)
   15b12:	ca03      	ldmia	r2!, {r0, r1}
   15b14:	c303      	stmia	r3!, {r0, r1}
   15b16:	f001 ff2e 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
   15b1a:	4a2f      	ldr	r2, [pc, #188]	; (15bd8 <processOnSMS+0xbe0>)
   15b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15b1e:	0011      	movs	r1, r2
   15b20:	0018      	movs	r0, r3
   15b22:	4b1a      	ldr	r3, [pc, #104]	; (15b8c <processOnSMS+0xb94>)
   15b24:	4798      	blx	r3
   15b26:	1e03      	subs	r3, r0, #0
   15b28:	d05a      	beq.n	15be0 <processOnSMS+0xbe8>
	{
		savePhaseSequenceProtectionSettings(false);
   15b2a:	2000      	movs	r0, #0
   15b2c:	4b28      	ldr	r3, [pc, #160]	; (15bd0 <processOnSMS+0xbd8>)
   15b2e:	4798      	blx	r3

		incomingSMSProcessed=true;
   15b30:	2330      	movs	r3, #48	; 0x30
   15b32:	33ff      	adds	r3, #255	; 0xff
   15b34:	2220      	movs	r2, #32
   15b36:	4694      	mov	ip, r2
   15b38:	2208      	movs	r2, #8
   15b3a:	4690      	mov	r8, r2
   15b3c:	44b8      	add	r8, r7
   15b3e:	44c4      	add	ip, r8
   15b40:	4463      	add	r3, ip
   15b42:	2201      	movs	r2, #1
   15b44:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   15b46:	4b14      	ldr	r3, [pc, #80]	; (15b98 <processOnSMS+0xba0>)
   15b48:	2298      	movs	r2, #152	; 0x98
   15b4a:	0052      	lsls	r2, r2, #1
   15b4c:	4694      	mov	ip, r2
   15b4e:	2220      	movs	r2, #32
   15b50:	4690      	mov	r8, r2
   15b52:	2208      	movs	r2, #8
   15b54:	4691      	mov	r9, r2
   15b56:	44b9      	add	r9, r7
   15b58:	44c8      	add	r8, r9
   15b5a:	44c4      	add	ip, r8
   15b5c:	4463      	add	r3, ip
   15b5e:	781b      	ldrb	r3, [r3, #0]
   15b60:	2b00      	cmp	r3, #0
   15b62:	d101      	bne.n	15b68 <processOnSMS+0xb70>
   15b64:	f001 ff07 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"SEQP OFF");
   15b68:	230c      	movs	r3, #12
   15b6a:	2220      	movs	r2, #32
   15b6c:	4694      	mov	ip, r2
   15b6e:	2208      	movs	r2, #8
   15b70:	4690      	mov	r8, r2
   15b72:	44b8      	add	r8, r7
   15b74:	44c4      	add	ip, r8
   15b76:	4463      	add	r3, ip
   15b78:	4a18      	ldr	r2, [pc, #96]	; (15bdc <processOnSMS+0xbe4>)
   15b7a:	ca03      	ldmia	r2!, {r0, r1}
   15b7c:	c303      	stmia	r3!, {r0, r1}
   15b7e:	7812      	ldrb	r2, [r2, #0]
   15b80:	701a      	strb	r2, [r3, #0]
   15b82:	f001 fef8 	bl	17976 <processOnSMS+0x297e>
   15b86:	46c0      	nop			; (mov r8, r8)
   15b88:	0002aa9c 	.word	0x0002aa9c
   15b8c:	0001420d 	.word	0x0001420d
   15b90:	2000082c 	.word	0x2000082c
   15b94:	00011469 	.word	0x00011469
   15b98:	fffffed2 	.word	0xfffffed2
   15b9c:	0002aaa4 	.word	0x0002aaa4
   15ba0:	0002aab8 	.word	0x0002aab8
   15ba4:	000115e1 	.word	0x000115e1
   15ba8:	0002aac0 	.word	0x0002aac0
   15bac:	0002aac8 	.word	0x0002aac8
   15bb0:	0002aad0 	.word	0x0002aad0
   15bb4:	0002aad8 	.word	0x0002aad8
   15bb8:	000298e7 	.word	0x000298e7
   15bbc:	00029633 	.word	0x00029633
   15bc0:	0002953d 	.word	0x0002953d
   15bc4:	0001162d 	.word	0x0001162d
   15bc8:	0002aae0 	.word	0x0002aae0
   15bcc:	0002aaf0 	.word	0x0002aaf0
   15bd0:	00011679 	.word	0x00011679
   15bd4:	0002aaf8 	.word	0x0002aaf8
   15bd8:	0002ab00 	.word	0x0002ab00
   15bdc:	0002ab08 	.word	0x0002ab08
		}
	}
	else if (StringstartsWith(received_command,"DND"))
   15be0:	4aed      	ldr	r2, [pc, #948]	; (15f98 <processOnSMS+0xfa0>)
   15be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15be4:	0011      	movs	r1, r2
   15be6:	0018      	movs	r0, r3
   15be8:	4bec      	ldr	r3, [pc, #944]	; (15f9c <processOnSMS+0xfa4>)
   15bea:	4798      	blx	r3
   15bec:	1e03      	subs	r3, r0, #0
   15bee:	d100      	bne.n	15bf2 <processOnSMS+0xbfa>
   15bf0:	e07e      	b.n	15cf0 <processOnSMS+0xcf8>
	{
		if (strlen(received_command)>3)
   15bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15bf4:	0018      	movs	r0, r3
   15bf6:	4bea      	ldr	r3, [pc, #936]	; (15fa0 <processOnSMS+0xfa8>)
   15bf8:	4798      	blx	r3
   15bfa:	0003      	movs	r3, r0
   15bfc:	2b03      	cmp	r3, #3
   15bfe:	d801      	bhi.n	15c04 <processOnSMS+0xc0c>
   15c00:	f001 feb9 	bl	17976 <processOnSMS+0x297e>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   15c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15c06:	1cdc      	adds	r4, r3, #3
   15c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15c0a:	0018      	movs	r0, r3
   15c0c:	4be4      	ldr	r3, [pc, #912]	; (15fa0 <processOnSMS+0xfa8>)
   15c0e:	4798      	blx	r3
   15c10:	0002      	movs	r2, r0
   15c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15c14:	0021      	movs	r1, r4
   15c16:	0018      	movs	r0, r3
   15c18:	4be2      	ldr	r3, [pc, #904]	; (15fa4 <processOnSMS+0xfac>)
   15c1a:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
   15c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15c1e:	781b      	ldrb	r3, [r3, #0]
   15c20:	2b4c      	cmp	r3, #76	; 0x4c
   15c22:	d009      	beq.n	15c38 <processOnSMS+0xc40>
   15c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15c26:	781b      	ldrb	r3, [r3, #0]
   15c28:	2b53      	cmp	r3, #83	; 0x53
   15c2a:	d005      	beq.n	15c38 <processOnSMS+0xc40>
   15c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15c2e:	781b      	ldrb	r3, [r3, #0]
   15c30:	2b4f      	cmp	r3, #79	; 0x4f
   15c32:	d001      	beq.n	15c38 <processOnSMS+0xc40>
   15c34:	f001 fe9f 	bl	17976 <processOnSMS+0x297e>
			{
				saveDNDSettings((char)received_command[0]);  //save specific RESPONSE settings
   15c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15c3a:	781b      	ldrb	r3, [r3, #0]
   15c3c:	0018      	movs	r0, r3
   15c3e:	4bda      	ldr	r3, [pc, #872]	; (15fa8 <processOnSMS+0xfb0>)
   15c40:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   15c42:	2330      	movs	r3, #48	; 0x30
   15c44:	33ff      	adds	r3, #255	; 0xff
   15c46:	2220      	movs	r2, #32
   15c48:	4694      	mov	ip, r2
   15c4a:	2208      	movs	r2, #8
   15c4c:	4690      	mov	r8, r2
   15c4e:	44b8      	add	r8, r7
   15c50:	44c4      	add	ip, r8
   15c52:	4463      	add	r3, ip
   15c54:	2201      	movs	r2, #1
   15c56:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15c58:	4bd4      	ldr	r3, [pc, #848]	; (15fac <processOnSMS+0xfb4>)
   15c5a:	2298      	movs	r2, #152	; 0x98
   15c5c:	0052      	lsls	r2, r2, #1
   15c5e:	4694      	mov	ip, r2
   15c60:	2220      	movs	r2, #32
   15c62:	4690      	mov	r8, r2
   15c64:	2208      	movs	r2, #8
   15c66:	4691      	mov	r9, r2
   15c68:	44b9      	add	r9, r7
   15c6a:	44c8      	add	r8, r9
   15c6c:	44c4      	add	ip, r8
   15c6e:	4463      	add	r3, ip
   15c70:	781b      	ldrb	r3, [r3, #0]
   15c72:	2b00      	cmp	r3, #0
   15c74:	d101      	bne.n	15c7a <processOnSMS+0xc82>
   15c76:	f001 fe7e 	bl	17976 <processOnSMS+0x297e>
				{
					strcpy(resep_msg,"DND : ");
   15c7a:	230c      	movs	r3, #12
   15c7c:	2220      	movs	r2, #32
   15c7e:	4694      	mov	ip, r2
   15c80:	2208      	movs	r2, #8
   15c82:	4690      	mov	r8, r2
   15c84:	44b8      	add	r8, r7
   15c86:	44c4      	add	ip, r8
   15c88:	4463      	add	r3, ip
   15c8a:	4ac9      	ldr	r2, [pc, #804]	; (15fb0 <processOnSMS+0xfb8>)
   15c8c:	6811      	ldr	r1, [r2, #0]
   15c8e:	6019      	str	r1, [r3, #0]
   15c90:	8891      	ldrh	r1, [r2, #4]
   15c92:	8099      	strh	r1, [r3, #4]
   15c94:	7992      	ldrb	r2, [r2, #6]
   15c96:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
   15c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15c9a:	230c      	movs	r3, #12
   15c9c:	2120      	movs	r1, #32
   15c9e:	468c      	mov	ip, r1
   15ca0:	2108      	movs	r1, #8
   15ca2:	4688      	mov	r8, r1
   15ca4:	44b8      	add	r8, r7
   15ca6:	44c4      	add	ip, r8
   15ca8:	4463      	add	r3, ip
   15caa:	0011      	movs	r1, r2
   15cac:	0018      	movs	r0, r3
   15cae:	4bc1      	ldr	r3, [pc, #772]	; (15fb4 <processOnSMS+0xfbc>)
   15cb0:	4798      	blx	r3
					strcat(resep_msg," OK");
   15cb2:	230c      	movs	r3, #12
   15cb4:	2220      	movs	r2, #32
   15cb6:	4694      	mov	ip, r2
   15cb8:	2208      	movs	r2, #8
   15cba:	4690      	mov	r8, r2
   15cbc:	44b8      	add	r8, r7
   15cbe:	44c4      	add	ip, r8
   15cc0:	4463      	add	r3, ip
   15cc2:	0018      	movs	r0, r3
   15cc4:	4bb6      	ldr	r3, [pc, #728]	; (15fa0 <processOnSMS+0xfa8>)
   15cc6:	4798      	blx	r3
   15cc8:	0003      	movs	r3, r0
   15cca:	001a      	movs	r2, r3
   15ccc:	230c      	movs	r3, #12
   15cce:	2120      	movs	r1, #32
   15cd0:	468c      	mov	ip, r1
   15cd2:	2108      	movs	r1, #8
   15cd4:	4688      	mov	r8, r1
   15cd6:	44b8      	add	r8, r7
   15cd8:	44c4      	add	ip, r8
   15cda:	4463      	add	r3, ip
   15cdc:	189a      	adds	r2, r3, r2
   15cde:	4bb6      	ldr	r3, [pc, #728]	; (15fb8 <processOnSMS+0xfc0>)
   15ce0:	0010      	movs	r0, r2
   15ce2:	0019      	movs	r1, r3
   15ce4:	2304      	movs	r3, #4
   15ce6:	001a      	movs	r2, r3
   15ce8:	4bb4      	ldr	r3, [pc, #720]	; (15fbc <processOnSMS+0xfc4>)
   15cea:	4798      	blx	r3
   15cec:	f001 fe43 	bl	17976 <processOnSMS+0x297e>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
   15cf0:	4ab3      	ldr	r2, [pc, #716]	; (15fc0 <processOnSMS+0xfc8>)
   15cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15cf4:	0011      	movs	r1, r2
   15cf6:	0018      	movs	r0, r3
   15cf8:	4ba8      	ldr	r3, [pc, #672]	; (15f9c <processOnSMS+0xfa4>)
   15cfa:	4798      	blx	r3
   15cfc:	1e03      	subs	r3, r0, #0
   15cfe:	d100      	bne.n	15d02 <processOnSMS+0xd0a>
   15d00:	e08d      	b.n	15e1e <processOnSMS+0xe26>
	{
		if (strlen(received_command)>4)
   15d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d04:	0018      	movs	r0, r3
   15d06:	4ba6      	ldr	r3, [pc, #664]	; (15fa0 <processOnSMS+0xfa8>)
   15d08:	4798      	blx	r3
   15d0a:	0003      	movs	r3, r0
   15d0c:	2b04      	cmp	r3, #4
   15d0e:	d801      	bhi.n	15d14 <processOnSMS+0xd1c>
   15d10:	f001 fe31 	bl	17976 <processOnSMS+0x297e>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   15d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d16:	1d1c      	adds	r4, r3, #4
   15d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d1a:	0018      	movs	r0, r3
   15d1c:	4ba0      	ldr	r3, [pc, #640]	; (15fa0 <processOnSMS+0xfa8>)
   15d1e:	4798      	blx	r3
   15d20:	0002      	movs	r2, r0
   15d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d24:	0021      	movs	r1, r4
   15d26:	0018      	movs	r0, r3
   15d28:	4b9e      	ldr	r3, [pc, #632]	; (15fa4 <processOnSMS+0xfac>)
   15d2a:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
   15d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15d2e:	0018      	movs	r0, r3
   15d30:	4ba4      	ldr	r3, [pc, #656]	; (15fc4 <processOnSMS+0xfcc>)
   15d32:	4798      	blx	r3
   15d34:	0002      	movs	r2, r0
   15d36:	232c      	movs	r3, #44	; 0x2c
   15d38:	33ff      	adds	r3, #255	; 0xff
   15d3a:	2120      	movs	r1, #32
   15d3c:	468c      	mov	ip, r1
   15d3e:	2108      	movs	r1, #8
   15d40:	4688      	mov	r8, r1
   15d42:	44b8      	add	r8, r7
   15d44:	44c4      	add	ip, r8
   15d46:	4463      	add	r3, ip
   15d48:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
   15d4a:	232c      	movs	r3, #44	; 0x2c
   15d4c:	33ff      	adds	r3, #255	; 0xff
   15d4e:	2220      	movs	r2, #32
   15d50:	4694      	mov	ip, r2
   15d52:	2208      	movs	r2, #8
   15d54:	4690      	mov	r8, r2
   15d56:	44b8      	add	r8, r7
   15d58:	44c4      	add	ip, r8
   15d5a:	4463      	add	r3, ip
   15d5c:	781b      	ldrb	r3, [r3, #0]
   15d5e:	2b02      	cmp	r3, #2
   15d60:	d901      	bls.n	15d66 <processOnSMS+0xd6e>
   15d62:	f001 fe08 	bl	17976 <processOnSMS+0x297e>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
   15d66:	232c      	movs	r3, #44	; 0x2c
   15d68:	33ff      	adds	r3, #255	; 0xff
   15d6a:	2220      	movs	r2, #32
   15d6c:	4694      	mov	ip, r2
   15d6e:	2208      	movs	r2, #8
   15d70:	4690      	mov	r8, r2
   15d72:	44b8      	add	r8, r7
   15d74:	44c4      	add	ip, r8
   15d76:	4463      	add	r3, ip
   15d78:	781b      	ldrb	r3, [r3, #0]
   15d7a:	2b01      	cmp	r3, #1
   15d7c:	d10e      	bne.n	15d9c <processOnSMS+0xda4>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
   15d7e:	4b92      	ldr	r3, [pc, #584]	; (15fc8 <processOnSMS+0xfd0>)
   15d80:	785b      	ldrb	r3, [r3, #1]
   15d82:	2b00      	cmp	r3, #0
   15d84:	d10a      	bne.n	15d9c <processOnSMS+0xda4>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
   15d86:	232c      	movs	r3, #44	; 0x2c
   15d88:	33ff      	adds	r3, #255	; 0xff
   15d8a:	2220      	movs	r2, #32
   15d8c:	4694      	mov	ip, r2
   15d8e:	2208      	movs	r2, #8
   15d90:	4690      	mov	r8, r2
   15d92:	44b8      	add	r8, r7
   15d94:	44c4      	add	ip, r8
   15d96:	4463      	add	r3, ip
   15d98:	2200      	movs	r2, #0
   15d9a:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
   15d9c:	232c      	movs	r3, #44	; 0x2c
   15d9e:	33ff      	adds	r3, #255	; 0xff
   15da0:	2220      	movs	r2, #32
   15da2:	4694      	mov	ip, r2
   15da4:	2208      	movs	r2, #8
   15da6:	4690      	mov	r8, r2
   15da8:	44b8      	add	r8, r7
   15daa:	44c4      	add	ip, r8
   15dac:	4463      	add	r3, ip
   15dae:	781b      	ldrb	r3, [r3, #0]
   15db0:	0018      	movs	r0, r3
   15db2:	4b86      	ldr	r3, [pc, #536]	; (15fcc <processOnSMS+0xfd4>)
   15db4:	4798      	blx	r3
				incomingSMSProcessed=true;
   15db6:	2330      	movs	r3, #48	; 0x30
   15db8:	33ff      	adds	r3, #255	; 0xff
   15dba:	2220      	movs	r2, #32
   15dbc:	4694      	mov	ip, r2
   15dbe:	2208      	movs	r2, #8
   15dc0:	4690      	mov	r8, r2
   15dc2:	44b8      	add	r8, r7
   15dc4:	44c4      	add	ip, r8
   15dc6:	4463      	add	r3, ip
   15dc8:	2201      	movs	r2, #1
   15dca:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   15dcc:	4b77      	ldr	r3, [pc, #476]	; (15fac <processOnSMS+0xfb4>)
   15dce:	2298      	movs	r2, #152	; 0x98
   15dd0:	0052      	lsls	r2, r2, #1
   15dd2:	4694      	mov	ip, r2
   15dd4:	2220      	movs	r2, #32
   15dd6:	4690      	mov	r8, r2
   15dd8:	2208      	movs	r2, #8
   15dda:	4691      	mov	r9, r2
   15ddc:	44b9      	add	r9, r7
   15dde:	44c8      	add	r8, r9
   15de0:	44c4      	add	ip, r8
   15de2:	4463      	add	r3, ip
   15de4:	781b      	ldrb	r3, [r3, #0]
   15de6:	2b00      	cmp	r3, #0
   15de8:	d101      	bne.n	15dee <processOnSMS+0xdf6>
   15dea:	f001 fdc4 	bl	17976 <processOnSMS+0x297e>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
   15dee:	232c      	movs	r3, #44	; 0x2c
   15df0:	33ff      	adds	r3, #255	; 0xff
   15df2:	2220      	movs	r2, #32
   15df4:	4694      	mov	ip, r2
   15df6:	2208      	movs	r2, #8
   15df8:	4690      	mov	r8, r2
   15dfa:	44b8      	add	r8, r7
   15dfc:	44c4      	add	ip, r8
   15dfe:	4463      	add	r3, ip
   15e00:	781a      	ldrb	r2, [r3, #0]
   15e02:	4973      	ldr	r1, [pc, #460]	; (15fd0 <processOnSMS+0xfd8>)
   15e04:	230c      	movs	r3, #12
   15e06:	2020      	movs	r0, #32
   15e08:	4684      	mov	ip, r0
   15e0a:	2008      	movs	r0, #8
   15e0c:	4680      	mov	r8, r0
   15e0e:	44b8      	add	r8, r7
   15e10:	44c4      	add	ip, r8
   15e12:	4463      	add	r3, ip
   15e14:	0018      	movs	r0, r3
   15e16:	4b6f      	ldr	r3, [pc, #444]	; (15fd4 <processOnSMS+0xfdc>)
   15e18:	4798      	blx	r3
   15e1a:	f001 fdac 	bl	17976 <processOnSMS+0x297e>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"UOMETHOD"))
   15e1e:	4a6e      	ldr	r2, [pc, #440]	; (15fd8 <processOnSMS+0xfe0>)
   15e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e22:	0011      	movs	r1, r2
   15e24:	0018      	movs	r0, r3
   15e26:	4b5d      	ldr	r3, [pc, #372]	; (15f9c <processOnSMS+0xfa4>)
   15e28:	4798      	blx	r3
   15e2a:	1e03      	subs	r3, r0, #0
   15e2c:	d100      	bne.n	15e30 <processOnSMS+0xe38>
   15e2e:	e0d9      	b.n	15fe4 <processOnSMS+0xfec>
	{
		if (strlen(received_command)>8)
   15e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e32:	0018      	movs	r0, r3
   15e34:	4b5a      	ldr	r3, [pc, #360]	; (15fa0 <processOnSMS+0xfa8>)
   15e36:	4798      	blx	r3
   15e38:	0003      	movs	r3, r0
   15e3a:	2b08      	cmp	r3, #8
   15e3c:	d801      	bhi.n	15e42 <processOnSMS+0xe4a>
   15e3e:	f001 fd9a 	bl	17976 <processOnSMS+0x297e>
		{
			memmove(received_command,received_command+8,strlen(received_command));
   15e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e44:	3308      	adds	r3, #8
   15e46:	001c      	movs	r4, r3
   15e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e4a:	0018      	movs	r0, r3
   15e4c:	4b54      	ldr	r3, [pc, #336]	; (15fa0 <processOnSMS+0xfa8>)
   15e4e:	4798      	blx	r3
   15e50:	0002      	movs	r2, r0
   15e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e54:	0021      	movs	r1, r4
   15e56:	0018      	movs	r0, r3
   15e58:	4b52      	ldr	r3, [pc, #328]	; (15fa4 <processOnSMS+0xfac>)
   15e5a:	4798      	blx	r3
			
			if(factory_settings_parameter_struct.ENABLE_CURRENT)
   15e5c:	4b5a      	ldr	r3, [pc, #360]	; (15fc8 <processOnSMS+0xfd0>)
   15e5e:	785b      	ldrb	r3, [r3, #1]
   15e60:	2b00      	cmp	r3, #0
   15e62:	d101      	bne.n	15e68 <processOnSMS+0xe70>
   15e64:	f001 fd87 	bl	17976 <processOnSMS+0x297e>
			{
				uint8_t detectionMethod=0;
   15e68:	2395      	movs	r3, #149	; 0x95
   15e6a:	005b      	lsls	r3, r3, #1
   15e6c:	2220      	movs	r2, #32
   15e6e:	4694      	mov	ip, r2
   15e70:	2208      	movs	r2, #8
   15e72:	4690      	mov	r8, r2
   15e74:	44b8      	add	r8, r7
   15e76:	44c4      	add	ip, r8
   15e78:	4463      	add	r3, ip
   15e7a:	2200      	movs	r2, #0
   15e7c:	701a      	strb	r2, [r3, #0]
				if(received_command[0]=='C')
   15e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e80:	781b      	ldrb	r3, [r3, #0]
   15e82:	2b43      	cmp	r3, #67	; 0x43
   15e84:	d10b      	bne.n	15e9e <processOnSMS+0xea6>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_CURRENT;
   15e86:	2395      	movs	r3, #149	; 0x95
   15e88:	005b      	lsls	r3, r3, #1
   15e8a:	2220      	movs	r2, #32
   15e8c:	4694      	mov	ip, r2
   15e8e:	2208      	movs	r2, #8
   15e90:	4690      	mov	r8, r2
   15e92:	44b8      	add	r8, r7
   15e94:	44c4      	add	ip, r8
   15e96:	4463      	add	r3, ip
   15e98:	2202      	movs	r2, #2
   15e9a:	701a      	strb	r2, [r3, #0]
   15e9c:	e00e      	b.n	15ebc <processOnSMS+0xec4>
				}
				else if(received_command[0]=='P')
   15e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ea0:	781b      	ldrb	r3, [r3, #0]
   15ea2:	2b50      	cmp	r3, #80	; 0x50
   15ea4:	d10a      	bne.n	15ebc <processOnSMS+0xec4>
				{
					detectionMethod=MOTOR_UNDEROVER_DETECTION_POWER;
   15ea6:	2395      	movs	r3, #149	; 0x95
   15ea8:	005b      	lsls	r3, r3, #1
   15eaa:	2220      	movs	r2, #32
   15eac:	4694      	mov	ip, r2
   15eae:	2208      	movs	r2, #8
   15eb0:	4690      	mov	r8, r2
   15eb2:	44b8      	add	r8, r7
   15eb4:	44c4      	add	ip, r8
   15eb6:	4463      	add	r3, ip
   15eb8:	2201      	movs	r2, #1
   15eba:	701a      	strb	r2, [r3, #0]
				}
				
				if(detectionMethod!=0)
   15ebc:	2395      	movs	r3, #149	; 0x95
   15ebe:	005b      	lsls	r3, r3, #1
   15ec0:	2220      	movs	r2, #32
   15ec2:	4694      	mov	ip, r2
   15ec4:	2208      	movs	r2, #8
   15ec6:	4690      	mov	r8, r2
   15ec8:	44b8      	add	r8, r7
   15eca:	44c4      	add	ip, r8
   15ecc:	4463      	add	r3, ip
   15ece:	781b      	ldrb	r3, [r3, #0]
   15ed0:	2b00      	cmp	r3, #0
   15ed2:	d101      	bne.n	15ed8 <processOnSMS+0xee0>
   15ed4:	f001 fd4f 	bl	17976 <processOnSMS+0x297e>
				{
					saveUnderOverDetectionMethodSettings(detectionMethod);
   15ed8:	2395      	movs	r3, #149	; 0x95
   15eda:	005b      	lsls	r3, r3, #1
   15edc:	2220      	movs	r2, #32
   15ede:	4694      	mov	ip, r2
   15ee0:	2208      	movs	r2, #8
   15ee2:	4690      	mov	r8, r2
   15ee4:	44b8      	add	r8, r7
   15ee6:	44c4      	add	ip, r8
   15ee8:	4463      	add	r3, ip
   15eea:	781b      	ldrb	r3, [r3, #0]
   15eec:	0018      	movs	r0, r3
   15eee:	4b3b      	ldr	r3, [pc, #236]	; (15fdc <processOnSMS+0xfe4>)
   15ef0:	4798      	blx	r3
					incomingSMSProcessed=true;
   15ef2:	2330      	movs	r3, #48	; 0x30
   15ef4:	33ff      	adds	r3, #255	; 0xff
   15ef6:	2220      	movs	r2, #32
   15ef8:	4694      	mov	ip, r2
   15efa:	2208      	movs	r2, #8
   15efc:	4690      	mov	r8, r2
   15efe:	44b8      	add	r8, r7
   15f00:	44c4      	add	ip, r8
   15f02:	4463      	add	r3, ip
   15f04:	2201      	movs	r2, #1
   15f06:	701a      	strb	r2, [r3, #0]
					if (response_sms_processed_cmd == true)
   15f08:	4b28      	ldr	r3, [pc, #160]	; (15fac <processOnSMS+0xfb4>)
   15f0a:	2298      	movs	r2, #152	; 0x98
   15f0c:	0052      	lsls	r2, r2, #1
   15f0e:	4694      	mov	ip, r2
   15f10:	2220      	movs	r2, #32
   15f12:	4690      	mov	r8, r2
   15f14:	2208      	movs	r2, #8
   15f16:	4691      	mov	r9, r2
   15f18:	44b9      	add	r9, r7
   15f1a:	44c8      	add	r8, r9
   15f1c:	44c4      	add	ip, r8
   15f1e:	4463      	add	r3, ip
   15f20:	781b      	ldrb	r3, [r3, #0]
   15f22:	2b00      	cmp	r3, #0
   15f24:	d101      	bne.n	15f2a <processOnSMS+0xf32>
   15f26:	f001 fd26 	bl	17976 <processOnSMS+0x297e>
					{
						strcpy(resep_msg,"UOMETHOD : ");
   15f2a:	230c      	movs	r3, #12
   15f2c:	2220      	movs	r2, #32
   15f2e:	4694      	mov	ip, r2
   15f30:	2208      	movs	r2, #8
   15f32:	4690      	mov	r8, r2
   15f34:	44b8      	add	r8, r7
   15f36:	44c4      	add	ip, r8
   15f38:	4463      	add	r3, ip
   15f3a:	4a29      	ldr	r2, [pc, #164]	; (15fe0 <processOnSMS+0xfe8>)
   15f3c:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f3e:	c313      	stmia	r3!, {r0, r1, r4}
						strcat(resep_msg,received_command);
   15f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15f42:	230c      	movs	r3, #12
   15f44:	2120      	movs	r1, #32
   15f46:	468c      	mov	ip, r1
   15f48:	2108      	movs	r1, #8
   15f4a:	4688      	mov	r8, r1
   15f4c:	44b8      	add	r8, r7
   15f4e:	44c4      	add	ip, r8
   15f50:	4463      	add	r3, ip
   15f52:	0011      	movs	r1, r2
   15f54:	0018      	movs	r0, r3
   15f56:	4b17      	ldr	r3, [pc, #92]	; (15fb4 <processOnSMS+0xfbc>)
   15f58:	4798      	blx	r3
						strcat(resep_msg," OK");
   15f5a:	230c      	movs	r3, #12
   15f5c:	2220      	movs	r2, #32
   15f5e:	4694      	mov	ip, r2
   15f60:	2208      	movs	r2, #8
   15f62:	4690      	mov	r8, r2
   15f64:	44b8      	add	r8, r7
   15f66:	44c4      	add	ip, r8
   15f68:	4463      	add	r3, ip
   15f6a:	0018      	movs	r0, r3
   15f6c:	4b0c      	ldr	r3, [pc, #48]	; (15fa0 <processOnSMS+0xfa8>)
   15f6e:	4798      	blx	r3
   15f70:	0003      	movs	r3, r0
   15f72:	001a      	movs	r2, r3
   15f74:	230c      	movs	r3, #12
   15f76:	2120      	movs	r1, #32
   15f78:	468c      	mov	ip, r1
   15f7a:	2108      	movs	r1, #8
   15f7c:	4688      	mov	r8, r1
   15f7e:	44b8      	add	r8, r7
   15f80:	44c4      	add	ip, r8
   15f82:	4463      	add	r3, ip
   15f84:	189a      	adds	r2, r3, r2
   15f86:	4b0c      	ldr	r3, [pc, #48]	; (15fb8 <processOnSMS+0xfc0>)
   15f88:	0010      	movs	r0, r2
   15f8a:	0019      	movs	r1, r3
   15f8c:	2304      	movs	r3, #4
   15f8e:	001a      	movs	r2, r3
   15f90:	4b0a      	ldr	r3, [pc, #40]	; (15fbc <processOnSMS+0xfc4>)
   15f92:	4798      	blx	r3
   15f94:	f001 fcef 	bl	17976 <processOnSMS+0x297e>
   15f98:	0002ab14 	.word	0x0002ab14
   15f9c:	0001420d 	.word	0x0001420d
   15fa0:	000298e7 	.word	0x000298e7
   15fa4:	00029633 	.word	0x00029633
   15fa8:	00011341 	.word	0x00011341
   15fac:	fffffed2 	.word	0xfffffed2
   15fb0:	0002ab18 	.word	0x0002ab18
   15fb4:	000298a1 	.word	0x000298a1
   15fb8:	0002ab20 	.word	0x0002ab20
   15fbc:	00029621 	.word	0x00029621
   15fc0:	0002ab24 	.word	0x0002ab24
   15fc4:	0002953d 	.word	0x0002953d
   15fc8:	2000082c 	.word	0x2000082c
   15fcc:	000117a1 	.word	0x000117a1
   15fd0:	0002ab2c 	.word	0x0002ab2c
   15fd4:	0002985d 	.word	0x0002985d
   15fd8:	0002ab38 	.word	0x0002ab38
   15fdc:	000116c5 	.word	0x000116c5
   15fe0:	0002ab44 	.word	0x0002ab44
					}
				}
			}
		}
	}
	else if(StringstartsWith(received_command,"MVBYPON"))
   15fe4:	4ad1      	ldr	r2, [pc, #836]	; (1632c <processOnSMS+0x1334>)
   15fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15fe8:	0011      	movs	r1, r2
   15fea:	0018      	movs	r0, r3
   15fec:	4bd0      	ldr	r3, [pc, #832]	; (16330 <processOnSMS+0x1338>)
   15fee:	4798      	blx	r3
   15ff0:	1e03      	subs	r3, r0, #0
   15ff2:	d02d      	beq.n	16050 <processOnSMS+0x1058>
	{
		saveMotorVoltageBypassSettings(true);
   15ff4:	2001      	movs	r0, #1
   15ff6:	4bcf      	ldr	r3, [pc, #828]	; (16334 <processOnSMS+0x133c>)
   15ff8:	4798      	blx	r3
		incomingSMSProcessed=true;
   15ffa:	2330      	movs	r3, #48	; 0x30
   15ffc:	33ff      	adds	r3, #255	; 0xff
   15ffe:	2220      	movs	r2, #32
   16000:	4694      	mov	ip, r2
   16002:	2208      	movs	r2, #8
   16004:	4690      	mov	r8, r2
   16006:	44b8      	add	r8, r7
   16008:	44c4      	add	ip, r8
   1600a:	4463      	add	r3, ip
   1600c:	2201      	movs	r2, #1
   1600e:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16010:	4bc9      	ldr	r3, [pc, #804]	; (16338 <processOnSMS+0x1340>)
   16012:	2298      	movs	r2, #152	; 0x98
   16014:	0052      	lsls	r2, r2, #1
   16016:	4694      	mov	ip, r2
   16018:	2220      	movs	r2, #32
   1601a:	4690      	mov	r8, r2
   1601c:	2208      	movs	r2, #8
   1601e:	4691      	mov	r9, r2
   16020:	44b9      	add	r9, r7
   16022:	44c8      	add	r8, r9
   16024:	44c4      	add	ip, r8
   16026:	4463      	add	r3, ip
   16028:	781b      	ldrb	r3, [r3, #0]
   1602a:	2b00      	cmp	r3, #0
   1602c:	d101      	bne.n	16032 <processOnSMS+0x103a>
   1602e:	f001 fca2 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS ON");
   16032:	230c      	movs	r3, #12
   16034:	2220      	movs	r2, #32
   16036:	4694      	mov	ip, r2
   16038:	2208      	movs	r2, #8
   1603a:	4690      	mov	r8, r2
   1603c:	44b8      	add	r8, r7
   1603e:	44c4      	add	ip, r8
   16040:	4463      	add	r3, ip
   16042:	4abe      	ldr	r2, [pc, #760]	; (1633c <processOnSMS+0x1344>)
   16044:	ca13      	ldmia	r2!, {r0, r1, r4}
   16046:	c313      	stmia	r3!, {r0, r1, r4}
   16048:	ca13      	ldmia	r2!, {r0, r1, r4}
   1604a:	c313      	stmia	r3!, {r0, r1, r4}
   1604c:	f001 fc93 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPOFF"))
   16050:	4abb      	ldr	r2, [pc, #748]	; (16340 <processOnSMS+0x1348>)
   16052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16054:	0011      	movs	r1, r2
   16056:	0018      	movs	r0, r3
   16058:	4bb5      	ldr	r3, [pc, #724]	; (16330 <processOnSMS+0x1338>)
   1605a:	4798      	blx	r3
   1605c:	1e03      	subs	r3, r0, #0
   1605e:	d02f      	beq.n	160c0 <processOnSMS+0x10c8>
	{
		saveMotorVoltageBypassSettings(false);
   16060:	2000      	movs	r0, #0
   16062:	4bb4      	ldr	r3, [pc, #720]	; (16334 <processOnSMS+0x133c>)
   16064:	4798      	blx	r3
		incomingSMSProcessed=true;
   16066:	2330      	movs	r3, #48	; 0x30
   16068:	33ff      	adds	r3, #255	; 0xff
   1606a:	2220      	movs	r2, #32
   1606c:	4694      	mov	ip, r2
   1606e:	2208      	movs	r2, #8
   16070:	4690      	mov	r8, r2
   16072:	44b8      	add	r8, r7
   16074:	44c4      	add	ip, r8
   16076:	4463      	add	r3, ip
   16078:	2201      	movs	r2, #1
   1607a:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   1607c:	4bae      	ldr	r3, [pc, #696]	; (16338 <processOnSMS+0x1340>)
   1607e:	2298      	movs	r2, #152	; 0x98
   16080:	0052      	lsls	r2, r2, #1
   16082:	4694      	mov	ip, r2
   16084:	2220      	movs	r2, #32
   16086:	4690      	mov	r8, r2
   16088:	2208      	movs	r2, #8
   1608a:	4691      	mov	r9, r2
   1608c:	44b9      	add	r9, r7
   1608e:	44c8      	add	r8, r9
   16090:	44c4      	add	ip, r8
   16092:	4463      	add	r3, ip
   16094:	781b      	ldrb	r3, [r3, #0]
   16096:	2b00      	cmp	r3, #0
   16098:	d101      	bne.n	1609e <processOnSMS+0x10a6>
   1609a:	f001 fc6c 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"MOTOR VOLTAGE BYPASS OFF");
   1609e:	230c      	movs	r3, #12
   160a0:	2220      	movs	r2, #32
   160a2:	4694      	mov	ip, r2
   160a4:	2208      	movs	r2, #8
   160a6:	4690      	mov	r8, r2
   160a8:	44b8      	add	r8, r7
   160aa:	44c4      	add	ip, r8
   160ac:	4463      	add	r3, ip
   160ae:	4aa5      	ldr	r2, [pc, #660]	; (16344 <processOnSMS+0x134c>)
   160b0:	ca13      	ldmia	r2!, {r0, r1, r4}
   160b2:	c313      	stmia	r3!, {r0, r1, r4}
   160b4:	ca13      	ldmia	r2!, {r0, r1, r4}
   160b6:	c313      	stmia	r3!, {r0, r1, r4}
   160b8:	7812      	ldrb	r2, [r2, #0]
   160ba:	701a      	strb	r2, [r3, #0]
   160bc:	f001 fc5b 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"MVBYPT"))
   160c0:	4aa1      	ldr	r2, [pc, #644]	; (16348 <processOnSMS+0x1350>)
   160c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160c4:	0011      	movs	r1, r2
   160c6:	0018      	movs	r0, r3
   160c8:	4b99      	ldr	r3, [pc, #612]	; (16330 <processOnSMS+0x1338>)
   160ca:	4798      	blx	r3
   160cc:	1e03      	subs	r3, r0, #0
   160ce:	d100      	bne.n	160d2 <processOnSMS+0x10da>
   160d0:	e0a3      	b.n	1621a <processOnSMS+0x1222>
	{
		memmove(received_command,received_command+6,strlen(received_command));
   160d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160d4:	1d9c      	adds	r4, r3, #6
   160d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160d8:	0018      	movs	r0, r3
   160da:	4b9c      	ldr	r3, [pc, #624]	; (1634c <processOnSMS+0x1354>)
   160dc:	4798      	blx	r3
   160de:	0002      	movs	r2, r0
   160e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160e2:	0021      	movs	r1, r4
   160e4:	0018      	movs	r0, r3
   160e6:	4b9a      	ldr	r3, [pc, #616]	; (16350 <processOnSMS+0x1358>)
   160e8:	4798      	blx	r3
		uint32_t voltageBypTime = atoi(received_command);
   160ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   160ec:	0018      	movs	r0, r3
   160ee:	4b99      	ldr	r3, [pc, #612]	; (16354 <processOnSMS+0x135c>)
   160f0:	4798      	blx	r3
   160f2:	0003      	movs	r3, r0
   160f4:	2292      	movs	r2, #146	; 0x92
   160f6:	0052      	lsls	r2, r2, #1
   160f8:	2120      	movs	r1, #32
   160fa:	468c      	mov	ip, r1
   160fc:	2108      	movs	r1, #8
   160fe:	4688      	mov	r8, r1
   16100:	44b8      	add	r8, r7
   16102:	44c4      	add	ip, r8
   16104:	4462      	add	r2, ip
   16106:	6013      	str	r3, [r2, #0]
		if (voltageBypTime<10) voltageBypTime = 10;
   16108:	2392      	movs	r3, #146	; 0x92
   1610a:	005b      	lsls	r3, r3, #1
   1610c:	2220      	movs	r2, #32
   1610e:	4694      	mov	ip, r2
   16110:	2208      	movs	r2, #8
   16112:	4690      	mov	r8, r2
   16114:	44b8      	add	r8, r7
   16116:	44c4      	add	ip, r8
   16118:	4463      	add	r3, ip
   1611a:	681b      	ldr	r3, [r3, #0]
   1611c:	2b09      	cmp	r3, #9
   1611e:	d80a      	bhi.n	16136 <processOnSMS+0x113e>
   16120:	230a      	movs	r3, #10
   16122:	2292      	movs	r2, #146	; 0x92
   16124:	0052      	lsls	r2, r2, #1
   16126:	2120      	movs	r1, #32
   16128:	468c      	mov	ip, r1
   1612a:	2108      	movs	r1, #8
   1612c:	4688      	mov	r8, r1
   1612e:	44b8      	add	r8, r7
   16130:	44c4      	add	ip, r8
   16132:	4462      	add	r2, ip
   16134:	6013      	str	r3, [r2, #0]
		if (voltageBypTime>3600L) voltageBypTime=3600L;
   16136:	2392      	movs	r3, #146	; 0x92
   16138:	005b      	lsls	r3, r3, #1
   1613a:	2220      	movs	r2, #32
   1613c:	4694      	mov	ip, r2
   1613e:	2208      	movs	r2, #8
   16140:	4690      	mov	r8, r2
   16142:	44b8      	add	r8, r7
   16144:	44c4      	add	ip, r8
   16146:	4463      	add	r3, ip
   16148:	681a      	ldr	r2, [r3, #0]
   1614a:	23e1      	movs	r3, #225	; 0xe1
   1614c:	011b      	lsls	r3, r3, #4
   1614e:	429a      	cmp	r2, r3
   16150:	d90b      	bls.n	1616a <processOnSMS+0x1172>
   16152:	23e1      	movs	r3, #225	; 0xe1
   16154:	011b      	lsls	r3, r3, #4
   16156:	2292      	movs	r2, #146	; 0x92
   16158:	0052      	lsls	r2, r2, #1
   1615a:	2120      	movs	r1, #32
   1615c:	468c      	mov	ip, r1
   1615e:	2108      	movs	r1, #8
   16160:	4688      	mov	r8, r1
   16162:	44b8      	add	r8, r7
   16164:	44c4      	add	ip, r8
   16166:	4462      	add	r2, ip
   16168:	6013      	str	r3, [r2, #0]
		
		voltageBypTime=voltageBypTime*1000L;
   1616a:	2392      	movs	r3, #146	; 0x92
   1616c:	005b      	lsls	r3, r3, #1
   1616e:	2220      	movs	r2, #32
   16170:	4694      	mov	ip, r2
   16172:	2208      	movs	r2, #8
   16174:	4690      	mov	r8, r2
   16176:	44b8      	add	r8, r7
   16178:	44c4      	add	ip, r8
   1617a:	4463      	add	r3, ip
   1617c:	681b      	ldr	r3, [r3, #0]
   1617e:	22fa      	movs	r2, #250	; 0xfa
   16180:	0092      	lsls	r2, r2, #2
   16182:	4353      	muls	r3, r2
   16184:	2292      	movs	r2, #146	; 0x92
   16186:	0052      	lsls	r2, r2, #1
   16188:	2120      	movs	r1, #32
   1618a:	468c      	mov	ip, r1
   1618c:	2108      	movs	r1, #8
   1618e:	4688      	mov	r8, r1
   16190:	44b8      	add	r8, r7
   16192:	44c4      	add	ip, r8
   16194:	4462      	add	r2, ip
   16196:	6013      	str	r3, [r2, #0]
		
		saveMotorVoltageBypasssTimeSettings(voltageBypTime);
   16198:	2392      	movs	r3, #146	; 0x92
   1619a:	005b      	lsls	r3, r3, #1
   1619c:	2220      	movs	r2, #32
   1619e:	4694      	mov	ip, r2
   161a0:	2208      	movs	r2, #8
   161a2:	4690      	mov	r8, r2
   161a4:	44b8      	add	r8, r7
   161a6:	44c4      	add	ip, r8
   161a8:	4463      	add	r3, ip
   161aa:	681b      	ldr	r3, [r3, #0]
   161ac:	0018      	movs	r0, r3
   161ae:	4b6a      	ldr	r3, [pc, #424]	; (16358 <processOnSMS+0x1360>)
   161b0:	4798      	blx	r3
		incomingSMSProcessed=true;
   161b2:	2330      	movs	r3, #48	; 0x30
   161b4:	33ff      	adds	r3, #255	; 0xff
   161b6:	2220      	movs	r2, #32
   161b8:	4694      	mov	ip, r2
   161ba:	2208      	movs	r2, #8
   161bc:	4690      	mov	r8, r2
   161be:	44b8      	add	r8, r7
   161c0:	44c4      	add	ip, r8
   161c2:	4463      	add	r3, ip
   161c4:	2201      	movs	r2, #1
   161c6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   161c8:	4b5b      	ldr	r3, [pc, #364]	; (16338 <processOnSMS+0x1340>)
   161ca:	2298      	movs	r2, #152	; 0x98
   161cc:	0052      	lsls	r2, r2, #1
   161ce:	4694      	mov	ip, r2
   161d0:	2220      	movs	r2, #32
   161d2:	4690      	mov	r8, r2
   161d4:	2208      	movs	r2, #8
   161d6:	4691      	mov	r9, r2
   161d8:	44b9      	add	r9, r7
   161da:	44c8      	add	r8, r9
   161dc:	44c4      	add	ip, r8
   161de:	4463      	add	r3, ip
   161e0:	781b      	ldrb	r3, [r3, #0]
   161e2:	2b00      	cmp	r3, #0
   161e4:	d101      	bne.n	161ea <processOnSMS+0x11f2>
   161e6:	f001 fbc6 	bl	17976 <processOnSMS+0x297e>
		{
			sprintf(resep_msg,"Motor Voltage Bypass Time Set to %d",voltageBypTime);
   161ea:	2392      	movs	r3, #146	; 0x92
   161ec:	005b      	lsls	r3, r3, #1
   161ee:	2220      	movs	r2, #32
   161f0:	4694      	mov	ip, r2
   161f2:	2208      	movs	r2, #8
   161f4:	4690      	mov	r8, r2
   161f6:	44b8      	add	r8, r7
   161f8:	44c4      	add	ip, r8
   161fa:	4463      	add	r3, ip
   161fc:	681a      	ldr	r2, [r3, #0]
   161fe:	4957      	ldr	r1, [pc, #348]	; (1635c <processOnSMS+0x1364>)
   16200:	230c      	movs	r3, #12
   16202:	2020      	movs	r0, #32
   16204:	4684      	mov	ip, r0
   16206:	2008      	movs	r0, #8
   16208:	4680      	mov	r8, r0
   1620a:	44b8      	add	r8, r7
   1620c:	44c4      	add	ip, r8
   1620e:	4463      	add	r3, ip
   16210:	0018      	movs	r0, r3
   16212:	4b53      	ldr	r3, [pc, #332]	; (16360 <processOnSMS+0x1368>)
   16214:	4798      	blx	r3
   16216:	f001 fbae 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
   1621a:	4a52      	ldr	r2, [pc, #328]	; (16364 <processOnSMS+0x136c>)
   1621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1621e:	0011      	movs	r1, r2
   16220:	0018      	movs	r0, r3
   16222:	4b43      	ldr	r3, [pc, #268]	; (16330 <processOnSMS+0x1338>)
   16224:	4798      	blx	r3
   16226:	1e03      	subs	r3, r0, #0
   16228:	d100      	bne.n	1622c <processOnSMS+0x1234>
   1622a:	e0a7      	b.n	1637c <processOnSMS+0x1384>
	{
		if (strlen(received_command)>4)
   1622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1622e:	0018      	movs	r0, r3
   16230:	4b46      	ldr	r3, [pc, #280]	; (1634c <processOnSMS+0x1354>)
   16232:	4798      	blx	r3
   16234:	0003      	movs	r3, r0
   16236:	2b04      	cmp	r3, #4
   16238:	d801      	bhi.n	1623e <processOnSMS+0x1246>
   1623a:	f001 fb9c 	bl	17976 <processOnSMS+0x297e>
		{
			memmove(received_command,received_command+4,strlen(received_command));
   1623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16240:	1d1c      	adds	r4, r3, #4
   16242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16244:	0018      	movs	r0, r3
   16246:	4b41      	ldr	r3, [pc, #260]	; (1634c <processOnSMS+0x1354>)
   16248:	4798      	blx	r3
   1624a:	0002      	movs	r2, r0
   1624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1624e:	0021      	movs	r1, r4
   16250:	0018      	movs	r0, r3
   16252:	4b3f      	ldr	r3, [pc, #252]	; (16350 <processOnSMS+0x1358>)
   16254:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
   16256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16258:	781b      	ldrb	r3, [r3, #0]
   1625a:	2b43      	cmp	r3, #67	; 0x43
   1625c:	d00d      	beq.n	1627a <processOnSMS+0x1282>
   1625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16260:	781b      	ldrb	r3, [r3, #0]
   16262:	2b41      	cmp	r3, #65	; 0x41
   16264:	d009      	beq.n	1627a <processOnSMS+0x1282>
   16266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16268:	781b      	ldrb	r3, [r3, #0]
   1626a:	2b54      	cmp	r3, #84	; 0x54
   1626c:	d005      	beq.n	1627a <processOnSMS+0x1282>
   1626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16270:	781b      	ldrb	r3, [r3, #0]
   16272:	2b4e      	cmp	r3, #78	; 0x4e
   16274:	d001      	beq.n	1627a <processOnSMS+0x1282>
   16276:	f001 fb7e 	bl	17976 <processOnSMS+0x297e>
			{
				saveResponseSettings((char)received_command[0]);  //save specific RESPONSE settings
   1627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1627c:	781b      	ldrb	r3, [r3, #0]
   1627e:	0018      	movs	r0, r3
   16280:	4b39      	ldr	r3, [pc, #228]	; (16368 <processOnSMS+0x1370>)
   16282:	4798      	blx	r3
				
				incomingSMSProcessed=true;
   16284:	2330      	movs	r3, #48	; 0x30
   16286:	33ff      	adds	r3, #255	; 0xff
   16288:	2220      	movs	r2, #32
   1628a:	4694      	mov	ip, r2
   1628c:	2208      	movs	r2, #8
   1628e:	4690      	mov	r8, r2
   16290:	44b8      	add	r8, r7
   16292:	44c4      	add	ip, r8
   16294:	4463      	add	r3, ip
   16296:	2201      	movs	r2, #1
   16298:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
   1629a:	4b27      	ldr	r3, [pc, #156]	; (16338 <processOnSMS+0x1340>)
   1629c:	2298      	movs	r2, #152	; 0x98
   1629e:	0052      	lsls	r2, r2, #1
   162a0:	4694      	mov	ip, r2
   162a2:	2220      	movs	r2, #32
   162a4:	4690      	mov	r8, r2
   162a6:	2208      	movs	r2, #8
   162a8:	4691      	mov	r9, r2
   162aa:	44b9      	add	r9, r7
   162ac:	44c8      	add	r8, r9
   162ae:	44c4      	add	ip, r8
   162b0:	4463      	add	r3, ip
   162b2:	781b      	ldrb	r3, [r3, #0]
   162b4:	2b00      	cmp	r3, #0
   162b6:	d101      	bne.n	162bc <processOnSMS+0x12c4>
   162b8:	f001 fb5d 	bl	17976 <processOnSMS+0x297e>
				{
					strcpy(resep_msg,"RESP : ");
   162bc:	230c      	movs	r3, #12
   162be:	2220      	movs	r2, #32
   162c0:	4694      	mov	ip, r2
   162c2:	2208      	movs	r2, #8
   162c4:	4690      	mov	r8, r2
   162c6:	44b8      	add	r8, r7
   162c8:	44c4      	add	ip, r8
   162ca:	4463      	add	r3, ip
   162cc:	4a27      	ldr	r2, [pc, #156]	; (1636c <processOnSMS+0x1374>)
   162ce:	ca03      	ldmia	r2!, {r0, r1}
   162d0:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
   162d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   162d4:	230c      	movs	r3, #12
   162d6:	2120      	movs	r1, #32
   162d8:	468c      	mov	ip, r1
   162da:	2108      	movs	r1, #8
   162dc:	4688      	mov	r8, r1
   162de:	44b8      	add	r8, r7
   162e0:	44c4      	add	ip, r8
   162e2:	4463      	add	r3, ip
   162e4:	0011      	movs	r1, r2
   162e6:	0018      	movs	r0, r3
   162e8:	4b21      	ldr	r3, [pc, #132]	; (16370 <processOnSMS+0x1378>)
   162ea:	4798      	blx	r3
					strcat(resep_msg," OK");
   162ec:	230c      	movs	r3, #12
   162ee:	2220      	movs	r2, #32
   162f0:	4694      	mov	ip, r2
   162f2:	2208      	movs	r2, #8
   162f4:	4690      	mov	r8, r2
   162f6:	44b8      	add	r8, r7
   162f8:	44c4      	add	ip, r8
   162fa:	4463      	add	r3, ip
   162fc:	0018      	movs	r0, r3
   162fe:	4b13      	ldr	r3, [pc, #76]	; (1634c <processOnSMS+0x1354>)
   16300:	4798      	blx	r3
   16302:	0003      	movs	r3, r0
   16304:	001a      	movs	r2, r3
   16306:	230c      	movs	r3, #12
   16308:	2120      	movs	r1, #32
   1630a:	468c      	mov	ip, r1
   1630c:	2108      	movs	r1, #8
   1630e:	4688      	mov	r8, r1
   16310:	44b8      	add	r8, r7
   16312:	44c4      	add	ip, r8
   16314:	4463      	add	r3, ip
   16316:	189a      	adds	r2, r3, r2
   16318:	4b16      	ldr	r3, [pc, #88]	; (16374 <processOnSMS+0x137c>)
   1631a:	0010      	movs	r0, r2
   1631c:	0019      	movs	r1, r3
   1631e:	2304      	movs	r3, #4
   16320:	001a      	movs	r2, r3
   16322:	4b15      	ldr	r3, [pc, #84]	; (16378 <processOnSMS+0x1380>)
   16324:	4798      	blx	r3
   16326:	f001 fb26 	bl	17976 <processOnSMS+0x297e>
   1632a:	46c0      	nop			; (mov r8, r8)
   1632c:	0002ab50 	.word	0x0002ab50
   16330:	0001420d 	.word	0x0001420d
   16334:	00011711 	.word	0x00011711
   16338:	fffffed2 	.word	0xfffffed2
   1633c:	0002ab58 	.word	0x0002ab58
   16340:	0002ab70 	.word	0x0002ab70
   16344:	0002ab7c 	.word	0x0002ab7c
   16348:	0002ab98 	.word	0x0002ab98
   1634c:	000298e7 	.word	0x000298e7
   16350:	00029633 	.word	0x00029633
   16354:	0002953d 	.word	0x0002953d
   16358:	0001175d 	.word	0x0001175d
   1635c:	0002aba0 	.word	0x0002aba0
   16360:	0002985d 	.word	0x0002985d
   16364:	0002abc4 	.word	0x0002abc4
   16368:	0001138d 	.word	0x0001138d
   1636c:	0002abcc 	.word	0x0002abcc
   16370:	000298a1 	.word	0x000298a1
   16374:	0002ab20 	.word	0x0002ab20
   16378:	00029621 	.word	0x00029621
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"OVR"))
   1637c:	4ade      	ldr	r2, [pc, #888]	; (166f8 <processOnSMS+0x1700>)
   1637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16380:	0011      	movs	r1, r2
   16382:	0018      	movs	r0, r3
   16384:	4bdd      	ldr	r3, [pc, #884]	; (166fc <processOnSMS+0x1704>)
   16386:	4798      	blx	r3
   16388:	1e03      	subs	r3, r0, #0
   1638a:	d062      	beq.n	16452 <processOnSMS+0x145a>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   1638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1638e:	1cdc      	adds	r4, r3, #3
   16390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16392:	0018      	movs	r0, r3
   16394:	4bda      	ldr	r3, [pc, #872]	; (16700 <processOnSMS+0x1708>)
   16396:	4798      	blx	r3
   16398:	0002      	movs	r2, r0
   1639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1639c:	0021      	movs	r1, r4
   1639e:	0018      	movs	r0, r3
   163a0:	4bd8      	ldr	r3, [pc, #864]	; (16704 <processOnSMS+0x170c>)
   163a2:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
   163a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   163a6:	0018      	movs	r0, r3
   163a8:	4bd7      	ldr	r3, [pc, #860]	; (16708 <processOnSMS+0x1710>)
   163aa:	4798      	blx	r3
   163ac:	0002      	movs	r2, r0
   163ae:	238b      	movs	r3, #139	; 0x8b
   163b0:	005b      	lsls	r3, r3, #1
   163b2:	2120      	movs	r1, #32
   163b4:	468c      	mov	ip, r1
   163b6:	2108      	movs	r1, #8
   163b8:	4688      	mov	r8, r1
   163ba:	44b8      	add	r8, r7
   163bc:	44c4      	add	ip, r8
   163be:	4463      	add	r3, ip
   163c0:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
   163c2:	238b      	movs	r3, #139	; 0x8b
   163c4:	005b      	lsls	r3, r3, #1
   163c6:	2220      	movs	r2, #32
   163c8:	4694      	mov	ip, r2
   163ca:	2208      	movs	r2, #8
   163cc:	4690      	mov	r8, r2
   163ce:	44b8      	add	r8, r7
   163d0:	44c4      	add	ip, r8
   163d2:	4463      	add	r3, ip
   163d4:	781b      	ldrb	r3, [r3, #0]
   163d6:	2b68      	cmp	r3, #104	; 0x68
   163d8:	d801      	bhi.n	163de <processOnSMS+0x13e6>
   163da:	f001 facc 	bl	17976 <processOnSMS+0x297e>
		{
			setOverloadPer(ovr_per);
   163de:	238b      	movs	r3, #139	; 0x8b
   163e0:	005b      	lsls	r3, r3, #1
   163e2:	2220      	movs	r2, #32
   163e4:	4694      	mov	ip, r2
   163e6:	2208      	movs	r2, #8
   163e8:	4690      	mov	r8, r2
   163ea:	44b8      	add	r8, r7
   163ec:	44c4      	add	ip, r8
   163ee:	4463      	add	r3, ip
   163f0:	781b      	ldrb	r3, [r3, #0]
   163f2:	0018      	movs	r0, r3
   163f4:	4bc5      	ldr	r3, [pc, #788]	; (1670c <processOnSMS+0x1714>)
   163f6:	4798      	blx	r3
			incomingSMSProcessed=true;
   163f8:	2330      	movs	r3, #48	; 0x30
   163fa:	33ff      	adds	r3, #255	; 0xff
   163fc:	2220      	movs	r2, #32
   163fe:	4694      	mov	ip, r2
   16400:	2208      	movs	r2, #8
   16402:	4690      	mov	r8, r2
   16404:	44b8      	add	r8, r7
   16406:	44c4      	add	ip, r8
   16408:	4463      	add	r3, ip
   1640a:	2201      	movs	r2, #1
   1640c:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   1640e:	4bc0      	ldr	r3, [pc, #768]	; (16710 <processOnSMS+0x1718>)
   16410:	2298      	movs	r2, #152	; 0x98
   16412:	0052      	lsls	r2, r2, #1
   16414:	4694      	mov	ip, r2
   16416:	2220      	movs	r2, #32
   16418:	4690      	mov	r8, r2
   1641a:	2208      	movs	r2, #8
   1641c:	4691      	mov	r9, r2
   1641e:	44b9      	add	r9, r7
   16420:	44c8      	add	r8, r9
   16422:	44c4      	add	ip, r8
   16424:	4463      	add	r3, ip
   16426:	781b      	ldrb	r3, [r3, #0]
   16428:	2b00      	cmp	r3, #0
   1642a:	d101      	bne.n	16430 <processOnSMS+0x1438>
   1642c:	f001 faa3 	bl	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"OVR SET OK");
   16430:	230c      	movs	r3, #12
   16432:	2220      	movs	r2, #32
   16434:	4694      	mov	ip, r2
   16436:	2208      	movs	r2, #8
   16438:	4690      	mov	r8, r2
   1643a:	44b8      	add	r8, r7
   1643c:	44c4      	add	ip, r8
   1643e:	4463      	add	r3, ip
   16440:	4ab4      	ldr	r2, [pc, #720]	; (16714 <processOnSMS+0x171c>)
   16442:	ca03      	ldmia	r2!, {r0, r1}
   16444:	c303      	stmia	r3!, {r0, r1}
   16446:	8811      	ldrh	r1, [r2, #0]
   16448:	8019      	strh	r1, [r3, #0]
   1644a:	7892      	ldrb	r2, [r2, #2]
   1644c:	709a      	strb	r2, [r3, #2]
   1644e:	f001 fa92 	bl	17976 <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
   16452:	4ab1      	ldr	r2, [pc, #708]	; (16718 <processOnSMS+0x1720>)
   16454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16456:	0011      	movs	r1, r2
   16458:	0018      	movs	r0, r3
   1645a:	4ba8      	ldr	r3, [pc, #672]	; (166fc <processOnSMS+0x1704>)
   1645c:	4798      	blx	r3
   1645e:	1e03      	subs	r3, r0, #0
   16460:	d06c      	beq.n	1653c <processOnSMS+0x1544>
	{
		memmove(received_command,received_command+4,strlen(received_command));
   16462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16464:	1d1c      	adds	r4, r3, #4
   16466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16468:	0018      	movs	r0, r3
   1646a:	4ba5      	ldr	r3, [pc, #660]	; (16700 <processOnSMS+0x1708>)
   1646c:	4798      	blx	r3
   1646e:	0002      	movs	r2, r0
   16470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16472:	0021      	movs	r1, r4
   16474:	0018      	movs	r0, r3
   16476:	4ba3      	ldr	r3, [pc, #652]	; (16704 <processOnSMS+0x170c>)
   16478:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
   1647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1647c:	0018      	movs	r0, r3
   1647e:	4ba2      	ldr	r3, [pc, #648]	; (16708 <processOnSMS+0x1710>)
   16480:	4798      	blx	r3
   16482:	0002      	movs	r2, r0
   16484:	2316      	movs	r3, #22
   16486:	33ff      	adds	r3, #255	; 0xff
   16488:	2120      	movs	r1, #32
   1648a:	468c      	mov	ip, r1
   1648c:	2108      	movs	r1, #8
   1648e:	4688      	mov	r8, r1
   16490:	44b8      	add	r8, r7
   16492:	44c4      	add	ip, r8
   16494:	4463      	add	r3, ip
   16496:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
   16498:	2316      	movs	r3, #22
   1649a:	33ff      	adds	r3, #255	; 0xff
   1649c:	2220      	movs	r2, #32
   1649e:	4694      	mov	ip, r2
   164a0:	2208      	movs	r2, #8
   164a2:	4690      	mov	r8, r2
   164a4:	44b8      	add	r8, r7
   164a6:	44c4      	add	ip, r8
   164a8:	4463      	add	r3, ip
   164aa:	781b      	ldrb	r3, [r3, #0]
   164ac:	2b61      	cmp	r3, #97	; 0x61
   164ae:	d901      	bls.n	164b4 <processOnSMS+0x14bc>
   164b0:	f001 fa61 	bl	17976 <processOnSMS+0x297e>
   164b4:	2316      	movs	r3, #22
   164b6:	33ff      	adds	r3, #255	; 0xff
   164b8:	2220      	movs	r2, #32
   164ba:	4694      	mov	ip, r2
   164bc:	2208      	movs	r2, #8
   164be:	4690      	mov	r8, r2
   164c0:	44b8      	add	r8, r7
   164c2:	44c4      	add	ip, r8
   164c4:	4463      	add	r3, ip
   164c6:	781b      	ldrb	r3, [r3, #0]
   164c8:	2b00      	cmp	r3, #0
   164ca:	d101      	bne.n	164d0 <processOnSMS+0x14d8>
   164cc:	f001 fa53 	bl	17976 <processOnSMS+0x297e>
		{

			setUnderloadPer(undr_per);
   164d0:	2316      	movs	r3, #22
   164d2:	33ff      	adds	r3, #255	; 0xff
   164d4:	2220      	movs	r2, #32
   164d6:	4694      	mov	ip, r2
   164d8:	2208      	movs	r2, #8
   164da:	4690      	mov	r8, r2
   164dc:	44b8      	add	r8, r7
   164de:	44c4      	add	ip, r8
   164e0:	4463      	add	r3, ip
   164e2:	781b      	ldrb	r3, [r3, #0]
   164e4:	0018      	movs	r0, r3
   164e6:	4b8d      	ldr	r3, [pc, #564]	; (1671c <processOnSMS+0x1724>)
   164e8:	4798      	blx	r3

			incomingSMSProcessed=true;
   164ea:	2330      	movs	r3, #48	; 0x30
   164ec:	33ff      	adds	r3, #255	; 0xff
   164ee:	2220      	movs	r2, #32
   164f0:	4694      	mov	ip, r2
   164f2:	2208      	movs	r2, #8
   164f4:	4690      	mov	r8, r2
   164f6:	44b8      	add	r8, r7
   164f8:	44c4      	add	ip, r8
   164fa:	4463      	add	r3, ip
   164fc:	2201      	movs	r2, #1
   164fe:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   16500:	4b83      	ldr	r3, [pc, #524]	; (16710 <processOnSMS+0x1718>)
   16502:	2298      	movs	r2, #152	; 0x98
   16504:	0052      	lsls	r2, r2, #1
   16506:	4694      	mov	ip, r2
   16508:	2220      	movs	r2, #32
   1650a:	4690      	mov	r8, r2
   1650c:	2208      	movs	r2, #8
   1650e:	4691      	mov	r9, r2
   16510:	44b9      	add	r9, r7
   16512:	44c8      	add	r8, r9
   16514:	44c4      	add	ip, r8
   16516:	4463      	add	r3, ip
   16518:	781b      	ldrb	r3, [r3, #0]
   1651a:	2b00      	cmp	r3, #0
   1651c:	d101      	bne.n	16522 <processOnSMS+0x152a>
   1651e:	f001 fa2a 	bl	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"UNDR SET OK");
   16522:	230c      	movs	r3, #12
   16524:	2220      	movs	r2, #32
   16526:	4694      	mov	ip, r2
   16528:	2208      	movs	r2, #8
   1652a:	4690      	mov	r8, r2
   1652c:	44b8      	add	r8, r7
   1652e:	44c4      	add	ip, r8
   16530:	4463      	add	r3, ip
   16532:	4a7b      	ldr	r2, [pc, #492]	; (16720 <processOnSMS+0x1728>)
   16534:	ca13      	ldmia	r2!, {r0, r1, r4}
   16536:	c313      	stmia	r3!, {r0, r1, r4}
   16538:	f001 fa1d 	bl	17976 <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
   1653c:	4a79      	ldr	r2, [pc, #484]	; (16724 <processOnSMS+0x172c>)
   1653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16540:	0011      	movs	r1, r2
   16542:	0018      	movs	r0, r3
   16544:	4b6d      	ldr	r3, [pc, #436]	; (166fc <processOnSMS+0x1704>)
   16546:	4798      	blx	r3
   16548:	1e03      	subs	r3, r0, #0
   1654a:	d04b      	beq.n	165e4 <processOnSMS+0x15ec>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
   1654c:	4b76      	ldr	r3, [pc, #472]	; (16728 <processOnSMS+0x1730>)
   1654e:	785b      	ldrb	r3, [r3, #1]
   16550:	2b00      	cmp	r3, #0
   16552:	d101      	bne.n	16558 <processOnSMS+0x1560>
   16554:	f001 fa0f 	bl	17976 <processOnSMS+0x297e>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
   16558:	4b74      	ldr	r3, [pc, #464]	; (1672c <processOnSMS+0x1734>)
   1655a:	8a9b      	ldrh	r3, [r3, #20]
   1655c:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   1655e:	627b      	str	r3, [r7, #36]	; 0x24
			Analog_Parameter_Struct.Motor_Current_DecPart,
   16560:	4b72      	ldr	r3, [pc, #456]	; (1672c <processOnSMS+0x1734>)
   16562:	8adb      	ldrh	r3, [r3, #22]
   16564:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   16566:	623b      	str	r3, [r7, #32]
   16568:	4b71      	ldr	r3, [pc, #452]	; (16730 <processOnSMS+0x1738>)
   1656a:	691a      	ldr	r2, [r3, #16]
   1656c:	4b70      	ldr	r3, [pc, #448]	; (16730 <processOnSMS+0x1738>)
   1656e:	6959      	ldr	r1, [r3, #20]
   16570:	4b6f      	ldr	r3, [pc, #444]	; (16730 <processOnSMS+0x1738>)
   16572:	699b      	ldr	r3, [r3, #24]
   16574:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
   16576:	486e      	ldr	r0, [pc, #440]	; (16730 <processOnSMS+0x1738>)
   16578:	7f40      	ldrb	r0, [r0, #29]
   1657a:	b2c0      	uxtb	r0, r0
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   1657c:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
   1657e:	486c      	ldr	r0, [pc, #432]	; (16730 <processOnSMS+0x1738>)
   16580:	7f00      	ldrb	r0, [r0, #28]
   16582:	b2c0      	uxtb	r0, r0
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
   16584:	0006      	movs	r6, r0
   16586:	4c6b      	ldr	r4, [pc, #428]	; (16734 <processOnSMS+0x173c>)
   16588:	200c      	movs	r0, #12
   1658a:	2320      	movs	r3, #32
   1658c:	469c      	mov	ip, r3
   1658e:	2308      	movs	r3, #8
   16590:	4699      	mov	r9, r3
   16592:	44b9      	add	r9, r7
   16594:	44cc      	add	ip, r9
   16596:	4460      	add	r0, ip
   16598:	9604      	str	r6, [sp, #16]
   1659a:	9503      	str	r5, [sp, #12]
   1659c:	4643      	mov	r3, r8
   1659e:	9302      	str	r3, [sp, #8]
   165a0:	9101      	str	r1, [sp, #4]
   165a2:	9200      	str	r2, [sp, #0]
   165a4:	6a3b      	ldr	r3, [r7, #32]
   165a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   165a8:	0021      	movs	r1, r4
   165aa:	4c63      	ldr	r4, [pc, #396]	; (16738 <processOnSMS+0x1740>)
   165ac:	47a0      	blx	r4
			response_sms_processed_cmd = true;
   165ae:	4b58      	ldr	r3, [pc, #352]	; (16710 <processOnSMS+0x1718>)
   165b0:	2298      	movs	r2, #152	; 0x98
   165b2:	0052      	lsls	r2, r2, #1
   165b4:	4694      	mov	ip, r2
   165b6:	2220      	movs	r2, #32
   165b8:	4690      	mov	r8, r2
   165ba:	2208      	movs	r2, #8
   165bc:	4691      	mov	r9, r2
   165be:	44b9      	add	r9, r7
   165c0:	44c8      	add	r8, r9
   165c2:	44c4      	add	ip, r8
   165c4:	4463      	add	r3, ip
   165c6:	2201      	movs	r2, #1
   165c8:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
   165ca:	2330      	movs	r3, #48	; 0x30
   165cc:	33ff      	adds	r3, #255	; 0xff
   165ce:	2220      	movs	r2, #32
   165d0:	4694      	mov	ip, r2
   165d2:	2208      	movs	r2, #8
   165d4:	4690      	mov	r8, r2
   165d6:	44b8      	add	r8, r7
   165d8:	44c4      	add	ip, r8
   165da:	4463      	add	r3, ip
   165dc:	2201      	movs	r2, #1
   165de:	701a      	strb	r2, [r3, #0]
   165e0:	f001 f9c9 	bl	17976 <processOnSMS+0x297e>
		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
   165e4:	4a55      	ldr	r2, [pc, #340]	; (1673c <processOnSMS+0x1744>)
   165e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   165e8:	0011      	movs	r1, r2
   165ea:	0018      	movs	r0, r3
   165ec:	4b43      	ldr	r3, [pc, #268]	; (166fc <processOnSMS+0x1704>)
   165ee:	4798      	blx	r3
   165f0:	1e03      	subs	r3, r0, #0
   165f2:	d03b      	beq.n	1666c <processOnSMS+0x1674>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   165f4:	4b4c      	ldr	r3, [pc, #304]	; (16728 <processOnSMS+0x1730>)
   165f6:	795b      	ldrb	r3, [r3, #5]
   165f8:	2b00      	cmp	r3, #0
   165fa:	d101      	bne.n	16600 <processOnSMS+0x1608>
   165fc:	f001 f9bb 	bl	17976 <processOnSMS+0x297e>
   16600:	4b49      	ldr	r3, [pc, #292]	; (16728 <processOnSMS+0x1730>)
   16602:	78db      	ldrb	r3, [r3, #3]
   16604:	2b00      	cmp	r3, #0
   16606:	d001      	beq.n	1660c <processOnSMS+0x1614>
   16608:	f001 f9b5 	bl	17976 <processOnSMS+0x297e>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
   1660c:	2001      	movs	r0, #1
   1660e:	4b4c      	ldr	r3, [pc, #304]	; (16740 <processOnSMS+0x1748>)
   16610:	4798      	blx	r3
			
			incomingSMSProcessed=true;
   16612:	2330      	movs	r3, #48	; 0x30
   16614:	33ff      	adds	r3, #255	; 0xff
   16616:	2220      	movs	r2, #32
   16618:	4694      	mov	ip, r2
   1661a:	2208      	movs	r2, #8
   1661c:	4690      	mov	r8, r2
   1661e:	44b8      	add	r8, r7
   16620:	44c4      	add	ip, r8
   16622:	4463      	add	r3, ip
   16624:	2201      	movs	r2, #1
   16626:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
   16628:	4b39      	ldr	r3, [pc, #228]	; (16710 <processOnSMS+0x1718>)
   1662a:	2298      	movs	r2, #152	; 0x98
   1662c:	0052      	lsls	r2, r2, #1
   1662e:	4694      	mov	ip, r2
   16630:	2220      	movs	r2, #32
   16632:	4690      	mov	r8, r2
   16634:	2208      	movs	r2, #8
   16636:	4691      	mov	r9, r2
   16638:	44b9      	add	r9, r7
   1663a:	44c8      	add	r8, r9
   1663c:	44c4      	add	ip, r8
   1663e:	4463      	add	r3, ip
   16640:	781b      	ldrb	r3, [r3, #0]
   16642:	2b00      	cmp	r3, #0
   16644:	d101      	bne.n	1664a <processOnSMS+0x1652>
   16646:	f001 f996 	bl	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
   1664a:	230c      	movs	r3, #12
   1664c:	2220      	movs	r2, #32
   1664e:	4694      	mov	ip, r2
   16650:	2208      	movs	r2, #8
   16652:	4690      	mov	r8, r2
   16654:	44b8      	add	r8, r7
   16656:	44c4      	add	ip, r8
   16658:	4463      	add	r3, ip
   1665a:	4a3a      	ldr	r2, [pc, #232]	; (16744 <processOnSMS+0x174c>)
   1665c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1665e:	c313      	stmia	r3!, {r0, r1, r4}
   16660:	ca13      	ldmia	r2!, {r0, r1, r4}
   16662:	c313      	stmia	r3!, {r0, r1, r4}
   16664:	6812      	ldr	r2, [r2, #0]
   16666:	601a      	str	r2, [r3, #0]
   16668:	f001 f985 	bl	17976 <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
   1666c:	4a36      	ldr	r2, [pc, #216]	; (16748 <processOnSMS+0x1750>)
   1666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16670:	0011      	movs	r1, r2
   16672:	0018      	movs	r0, r3
   16674:	4b21      	ldr	r3, [pc, #132]	; (166fc <processOnSMS+0x1704>)
   16676:	4798      	blx	r3
   16678:	1e03      	subs	r3, r0, #0
   1667a:	d069      	beq.n	16750 <processOnSMS+0x1758>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
   1667c:	4b2a      	ldr	r3, [pc, #168]	; (16728 <processOnSMS+0x1730>)
   1667e:	795b      	ldrb	r3, [r3, #5]
   16680:	2b00      	cmp	r3, #0
   16682:	d101      	bne.n	16688 <processOnSMS+0x1690>
   16684:	f001 f977 	bl	17976 <processOnSMS+0x297e>
   16688:	4b27      	ldr	r3, [pc, #156]	; (16728 <processOnSMS+0x1730>)
   1668a:	78db      	ldrb	r3, [r3, #3]
   1668c:	2b00      	cmp	r3, #0
   1668e:	d001      	beq.n	16694 <processOnSMS+0x169c>
   16690:	f001 f971 	bl	17976 <processOnSMS+0x297e>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
   16694:	2000      	movs	r0, #0
   16696:	4b2a      	ldr	r3, [pc, #168]	; (16740 <processOnSMS+0x1748>)
   16698:	4798      	blx	r3

			incomingSMSProcessed=true;
   1669a:	2330      	movs	r3, #48	; 0x30
   1669c:	33ff      	adds	r3, #255	; 0xff
   1669e:	2220      	movs	r2, #32
   166a0:	4694      	mov	ip, r2
   166a2:	2208      	movs	r2, #8
   166a4:	4690      	mov	r8, r2
   166a6:	44b8      	add	r8, r7
   166a8:	44c4      	add	ip, r8
   166aa:	4463      	add	r3, ip
   166ac:	2201      	movs	r2, #1
   166ae:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
   166b0:	4b17      	ldr	r3, [pc, #92]	; (16710 <processOnSMS+0x1718>)
   166b2:	2298      	movs	r2, #152	; 0x98
   166b4:	0052      	lsls	r2, r2, #1
   166b6:	4694      	mov	ip, r2
   166b8:	2220      	movs	r2, #32
   166ba:	4690      	mov	r8, r2
   166bc:	2208      	movs	r2, #8
   166be:	4691      	mov	r9, r2
   166c0:	44b9      	add	r9, r7
   166c2:	44c8      	add	r8, r9
   166c4:	44c4      	add	ip, r8
   166c6:	4463      	add	r3, ip
   166c8:	781b      	ldrb	r3, [r3, #0]
   166ca:	2b00      	cmp	r3, #0
   166cc:	d101      	bne.n	166d2 <processOnSMS+0x16da>
   166ce:	f001 f952 	bl	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
   166d2:	230c      	movs	r3, #12
   166d4:	2220      	movs	r2, #32
   166d6:	4694      	mov	ip, r2
   166d8:	2208      	movs	r2, #8
   166da:	4690      	mov	r8, r2
   166dc:	44b8      	add	r8, r7
   166de:	44c4      	add	ip, r8
   166e0:	4463      	add	r3, ip
   166e2:	4a1a      	ldr	r2, [pc, #104]	; (1674c <processOnSMS+0x1754>)
   166e4:	ca13      	ldmia	r2!, {r0, r1, r4}
   166e6:	c313      	stmia	r3!, {r0, r1, r4}
   166e8:	ca13      	ldmia	r2!, {r0, r1, r4}
   166ea:	c313      	stmia	r3!, {r0, r1, r4}
   166ec:	6811      	ldr	r1, [r2, #0]
   166ee:	6019      	str	r1, [r3, #0]
   166f0:	7912      	ldrb	r2, [r2, #4]
   166f2:	711a      	strb	r2, [r3, #4]
   166f4:	f001 f93f 	bl	17976 <processOnSMS+0x297e>
   166f8:	0002abd4 	.word	0x0002abd4
   166fc:	0001420d 	.word	0x0001420d
   16700:	000298e7 	.word	0x000298e7
   16704:	00029633 	.word	0x00029633
   16708:	0002953d 	.word	0x0002953d
   1670c:	00011501 	.word	0x00011501
   16710:	fffffed2 	.word	0xfffffed2
   16714:	0002abd8 	.word	0x0002abd8
   16718:	0002abe4 	.word	0x0002abe4
   1671c:	0001156d 	.word	0x0001156d
   16720:	0002abec 	.word	0x0002abec
   16724:	0002abf8 	.word	0x0002abf8
   16728:	2000082c 	.word	0x2000082c
   1672c:	200008e8 	.word	0x200008e8
   16730:	20000854 	.word	0x20000854
   16734:	0002ac00 	.word	0x0002ac00
   16738:	0002985d 	.word	0x0002985d
   1673c:	0002ac24 	.word	0x0002ac24
   16740:	000114b5 	.word	0x000114b5
   16744:	0002ac2c 	.word	0x0002ac2c
   16748:	0002ac48 	.word	0x0002ac48
   1674c:	0002ac50 	.word	0x0002ac50
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
   16750:	4ae7      	ldr	r2, [pc, #924]	; (16af0 <processOnSMS+0x1af8>)
   16752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16754:	0011      	movs	r1, r2
   16756:	0018      	movs	r0, r3
   16758:	4be6      	ldr	r3, [pc, #920]	; (16af4 <processOnSMS+0x1afc>)
   1675a:	4798      	blx	r3
   1675c:	1e03      	subs	r3, r0, #0
   1675e:	d06e      	beq.n	1683e <processOnSMS+0x1846>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   16760:	4be5      	ldr	r3, [pc, #916]	; (16af8 <processOnSMS+0x1b00>)
   16762:	78db      	ldrb	r3, [r3, #3]
   16764:	2b00      	cmp	r3, #0
   16766:	d101      	bne.n	1676c <processOnSMS+0x1774>
   16768:	f001 f905 	bl	17976 <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   1676c:	2330      	movs	r3, #48	; 0x30
   1676e:	33ff      	adds	r3, #255	; 0xff
   16770:	2220      	movs	r2, #32
   16772:	4694      	mov	ip, r2
   16774:	2208      	movs	r2, #8
   16776:	4690      	mov	r8, r2
   16778:	44b8      	add	r8, r7
   1677a:	44c4      	add	ip, r8
   1677c:	4463      	add	r3, ip
   1677e:	2201      	movs	r2, #1
   16780:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
   16782:	4bde      	ldr	r3, [pc, #888]	; (16afc <processOnSMS+0x1b04>)
   16784:	78db      	ldrb	r3, [r3, #3]
   16786:	2b00      	cmp	r3, #0
   16788:	d038      	beq.n	167fc <processOnSMS+0x1804>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
   1678a:	4bdc      	ldr	r3, [pc, #880]	; (16afc <processOnSMS+0x1b04>)
   1678c:	791b      	ldrb	r3, [r3, #4]
   1678e:	2b00      	cmp	r3, #0
   16790:	d111      	bne.n	167b6 <processOnSMS+0x17be>
				{
					response_sms_processed_cmd = false;
   16792:	4bdb      	ldr	r3, [pc, #876]	; (16b00 <processOnSMS+0x1b08>)
   16794:	2298      	movs	r2, #152	; 0x98
   16796:	0052      	lsls	r2, r2, #1
   16798:	4694      	mov	ip, r2
   1679a:	2220      	movs	r2, #32
   1679c:	4690      	mov	r8, r2
   1679e:	2208      	movs	r2, #8
   167a0:	4691      	mov	r9, r2
   167a2:	44b9      	add	r9, r7
   167a4:	44c8      	add	r8, r9
   167a6:	44c4      	add	ip, r8
   167a8:	4463      	add	r3, ip
   167aa:	2200      	movs	r2, #0
   167ac:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
   167ae:	4bd5      	ldr	r3, [pc, #852]	; (16b04 <processOnSMS+0x1b0c>)
   167b0:	4798      	blx	r3
   167b2:	f001 f8e0 	bl	17976 <processOnSMS+0x297e>
				}
				else
				{
					response_sms_processed_cmd = true;
   167b6:	4bd2      	ldr	r3, [pc, #840]	; (16b00 <processOnSMS+0x1b08>)
   167b8:	2298      	movs	r2, #152	; 0x98
   167ba:	0052      	lsls	r2, r2, #1
   167bc:	4694      	mov	ip, r2
   167be:	2220      	movs	r2, #32
   167c0:	4690      	mov	r8, r2
   167c2:	2208      	movs	r2, #8
   167c4:	4691      	mov	r9, r2
   167c6:	44b9      	add	r9, r7
   167c8:	44c8      	add	r8, r9
   167ca:	44c4      	add	ip, r8
   167cc:	4463      	add	r3, ip
   167ce:	2201      	movs	r2, #1
   167d0:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
   167d2:	230c      	movs	r3, #12
   167d4:	2220      	movs	r2, #32
   167d6:	4694      	mov	ip, r2
   167d8:	2208      	movs	r2, #8
   167da:	4690      	mov	r8, r2
   167dc:	44b8      	add	r8, r7
   167de:	44c4      	add	ip, r8
   167e0:	4463      	add	r3, ip
   167e2:	4ac9      	ldr	r2, [pc, #804]	; (16b08 <processOnSMS+0x1b10>)
   167e4:	ca13      	ldmia	r2!, {r0, r1, r4}
   167e6:	c313      	stmia	r3!, {r0, r1, r4}
   167e8:	ca13      	ldmia	r2!, {r0, r1, r4}
   167ea:	c313      	stmia	r3!, {r0, r1, r4}
   167ec:	ca13      	ldmia	r2!, {r0, r1, r4}
   167ee:	c313      	stmia	r3!, {r0, r1, r4}
   167f0:	ca03      	ldmia	r2!, {r0, r1}
   167f2:	c303      	stmia	r3!, {r0, r1}
   167f4:	8812      	ldrh	r2, [r2, #0]
   167f6:	801a      	strh	r2, [r3, #0]
   167f8:	f001 f8bd 	bl	17976 <processOnSMS+0x297e>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
   167fc:	4bc0      	ldr	r3, [pc, #768]	; (16b00 <processOnSMS+0x1b08>)
   167fe:	2298      	movs	r2, #152	; 0x98
   16800:	0052      	lsls	r2, r2, #1
   16802:	4694      	mov	ip, r2
   16804:	2220      	movs	r2, #32
   16806:	4690      	mov	r8, r2
   16808:	2208      	movs	r2, #8
   1680a:	4691      	mov	r9, r2
   1680c:	44b9      	add	r9, r7
   1680e:	44c8      	add	r8, r9
   16810:	44c4      	add	ip, r8
   16812:	4463      	add	r3, ip
   16814:	2201      	movs	r2, #1
   16816:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
   16818:	230c      	movs	r3, #12
   1681a:	2220      	movs	r2, #32
   1681c:	4694      	mov	ip, r2
   1681e:	2208      	movs	r2, #8
   16820:	4690      	mov	r8, r2
   16822:	44b8      	add	r8, r7
   16824:	44c4      	add	ip, r8
   16826:	4463      	add	r3, ip
   16828:	4ab8      	ldr	r2, [pc, #736]	; (16b0c <processOnSMS+0x1b14>)
   1682a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1682c:	c313      	stmia	r3!, {r0, r1, r4}
   1682e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16830:	c313      	stmia	r3!, {r0, r1, r4}
   16832:	ca13      	ldmia	r2!, {r0, r1, r4}
   16834:	c313      	stmia	r3!, {r0, r1, r4}
   16836:	7812      	ldrb	r2, [r2, #0]
   16838:	701a      	strb	r2, [r3, #0]
   1683a:	f001 f89c 	bl	17976 <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
   1683e:	4ab4      	ldr	r2, [pc, #720]	; (16b10 <processOnSMS+0x1b18>)
   16840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16842:	0011      	movs	r1, r2
   16844:	0018      	movs	r0, r3
   16846:	4bab      	ldr	r3, [pc, #684]	; (16af4 <processOnSMS+0x1afc>)
   16848:	4798      	blx	r3
   1684a:	1e03      	subs	r3, r0, #0
   1684c:	d033      	beq.n	168b6 <processOnSMS+0x18be>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1684e:	4baa      	ldr	r3, [pc, #680]	; (16af8 <processOnSMS+0x1b00>)
   16850:	78db      	ldrb	r3, [r3, #3]
   16852:	2b00      	cmp	r3, #0
   16854:	d101      	bne.n	1685a <processOnSMS+0x1862>
   16856:	f001 f88e 	bl	17976 <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   1685a:	2330      	movs	r3, #48	; 0x30
   1685c:	33ff      	adds	r3, #255	; 0xff
   1685e:	2220      	movs	r2, #32
   16860:	4694      	mov	ip, r2
   16862:	2208      	movs	r2, #8
   16864:	4690      	mov	r8, r2
   16866:	44b8      	add	r8, r7
   16868:	44c4      	add	ip, r8
   1686a:	4463      	add	r3, ip
   1686c:	2201      	movs	r2, #1
   1686e:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
   16870:	2000      	movs	r0, #0
   16872:	4ba8      	ldr	r3, [pc, #672]	; (16b14 <processOnSMS+0x1b1c>)
   16874:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   16876:	4ba2      	ldr	r3, [pc, #648]	; (16b00 <processOnSMS+0x1b08>)
   16878:	2298      	movs	r2, #152	; 0x98
   1687a:	0052      	lsls	r2, r2, #1
   1687c:	4694      	mov	ip, r2
   1687e:	2220      	movs	r2, #32
   16880:	4690      	mov	r8, r2
   16882:	2208      	movs	r2, #8
   16884:	4691      	mov	r9, r2
   16886:	44b9      	add	r9, r7
   16888:	44c8      	add	r8, r9
   1688a:	44c4      	add	ip, r8
   1688c:	4463      	add	r3, ip
   1688e:	781b      	ldrb	r3, [r3, #0]
   16890:	2b00      	cmp	r3, #0
   16892:	d101      	bne.n	16898 <processOnSMS+0x18a0>
   16894:	f001 f86f 	bl	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
   16898:	230c      	movs	r3, #12
   1689a:	2220      	movs	r2, #32
   1689c:	4694      	mov	ip, r2
   1689e:	2208      	movs	r2, #8
   168a0:	4690      	mov	r8, r2
   168a2:	44b8      	add	r8, r7
   168a4:	44c4      	add	ip, r8
   168a6:	4463      	add	r3, ip
   168a8:	4a9b      	ldr	r2, [pc, #620]	; (16b18 <processOnSMS+0x1b20>)
   168aa:	ca13      	ldmia	r2!, {r0, r1, r4}
   168ac:	c313      	stmia	r3!, {r0, r1, r4}
   168ae:	6812      	ldr	r2, [r2, #0]
   168b0:	601a      	str	r2, [r3, #0]
   168b2:	f001 f860 	bl	17976 <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
   168b6:	4a99      	ldr	r2, [pc, #612]	; (16b1c <processOnSMS+0x1b24>)
   168b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   168ba:	0011      	movs	r1, r2
   168bc:	0018      	movs	r0, r3
   168be:	4b8d      	ldr	r3, [pc, #564]	; (16af4 <processOnSMS+0x1afc>)
   168c0:	4798      	blx	r3
   168c2:	1e03      	subs	r3, r0, #0
   168c4:	d025      	beq.n	16912 <processOnSMS+0x191a>
	{
		incomingSMSProcessed=true;
   168c6:	2330      	movs	r3, #48	; 0x30
   168c8:	33ff      	adds	r3, #255	; 0xff
   168ca:	2220      	movs	r2, #32
   168cc:	4694      	mov	ip, r2
   168ce:	2208      	movs	r2, #8
   168d0:	4690      	mov	r8, r2
   168d2:	44b8      	add	r8, r7
   168d4:	44c4      	add	ip, r8
   168d6:	4463      	add	r3, ip
   168d8:	2201      	movs	r2, #1
   168da:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
   168dc:	4b88      	ldr	r3, [pc, #544]	; (16b00 <processOnSMS+0x1b08>)
   168de:	2298      	movs	r2, #152	; 0x98
   168e0:	0052      	lsls	r2, r2, #1
   168e2:	4694      	mov	ip, r2
   168e4:	2220      	movs	r2, #32
   168e6:	4690      	mov	r8, r2
   168e8:	2208      	movs	r2, #8
   168ea:	4691      	mov	r9, r2
   168ec:	44b9      	add	r9, r7
   168ee:	44c8      	add	r8, r9
   168f0:	44c4      	add	ip, r8
   168f2:	4463      	add	r3, ip
   168f4:	2201      	movs	r2, #1
   168f6:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(resep_msg);
   168f8:	230c      	movs	r3, #12
   168fa:	2220      	movs	r2, #32
   168fc:	4694      	mov	ip, r2
   168fe:	2208      	movs	r2, #8
   16900:	4690      	mov	r8, r2
   16902:	44b8      	add	r8, r7
   16904:	44c4      	add	ip, r8
   16906:	4463      	add	r3, ip
   16908:	0018      	movs	r0, r3
   1690a:	4b85      	ldr	r3, [pc, #532]	; (16b20 <processOnSMS+0x1b28>)
   1690c:	4798      	blx	r3
   1690e:	f001 f832 	bl	17976 <processOnSMS+0x297e>
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
   16912:	4a84      	ldr	r2, [pc, #528]	; (16b24 <processOnSMS+0x1b2c>)
   16914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16916:	0011      	movs	r1, r2
   16918:	0018      	movs	r0, r3
   1691a:	4b76      	ldr	r3, [pc, #472]	; (16af4 <processOnSMS+0x1afc>)
   1691c:	4798      	blx	r3
   1691e:	1e03      	subs	r3, r0, #0
   16920:	d073      	beq.n	16a0a <processOnSMS+0x1a12>
   16922:	4b81      	ldr	r3, [pc, #516]	; (16b28 <processOnSMS+0x1b30>)
   16924:	2298      	movs	r2, #152	; 0x98
   16926:	0052      	lsls	r2, r2, #1
   16928:	4694      	mov	ip, r2
   1692a:	2220      	movs	r2, #32
   1692c:	4690      	mov	r8, r2
   1692e:	2208      	movs	r2, #8
   16930:	4691      	mov	r9, r2
   16932:	44b9      	add	r9, r7
   16934:	44c8      	add	r8, r9
   16936:	44c4      	add	ip, r8
   16938:	4463      	add	r3, ip
   1693a:	781b      	ldrb	r3, [r3, #0]
   1693c:	2b00      	cmp	r3, #0
   1693e:	d10e      	bne.n	1695e <processOnSMS+0x1966>
   16940:	4b7a      	ldr	r3, [pc, #488]	; (16b2c <processOnSMS+0x1b34>)
   16942:	2298      	movs	r2, #152	; 0x98
   16944:	0052      	lsls	r2, r2, #1
   16946:	4694      	mov	ip, r2
   16948:	2220      	movs	r2, #32
   1694a:	4690      	mov	r8, r2
   1694c:	2208      	movs	r2, #8
   1694e:	4691      	mov	r9, r2
   16950:	44b9      	add	r9, r7
   16952:	44c8      	add	r8, r9
   16954:	44c4      	add	ip, r8
   16956:	4463      	add	r3, ip
   16958:	781b      	ldrb	r3, [r3, #0]
   1695a:	2b00      	cmp	r3, #0
   1695c:	d055      	beq.n	16a0a <processOnSMS+0x1a12>
	{
		incomingSMSProcessed=true;
   1695e:	2330      	movs	r3, #48	; 0x30
   16960:	33ff      	adds	r3, #255	; 0xff
   16962:	2220      	movs	r2, #32
   16964:	4694      	mov	ip, r2
   16966:	2208      	movs	r2, #8
   16968:	4690      	mov	r8, r2
   1696a:	44b8      	add	r8, r7
   1696c:	44c4      	add	ip, r8
   1696e:	4463      	add	r3, ip
   16970:	2201      	movs	r2, #1
   16972:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
   16974:	4b6e      	ldr	r3, [pc, #440]	; (16b30 <processOnSMS+0x1b38>)
   16976:	789b      	ldrb	r3, [r3, #2]
   16978:	2b00      	cmp	r3, #0
   1697a:	d022      	beq.n	169c2 <processOnSMS+0x19ca>
		{
			saveAlterNumberSetting(true);
   1697c:	2001      	movs	r0, #1
   1697e:	4b6d      	ldr	r3, [pc, #436]	; (16b34 <processOnSMS+0x1b3c>)
   16980:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
   16982:	4b5f      	ldr	r3, [pc, #380]	; (16b00 <processOnSMS+0x1b08>)
   16984:	2298      	movs	r2, #152	; 0x98
   16986:	0052      	lsls	r2, r2, #1
   16988:	4694      	mov	ip, r2
   1698a:	2220      	movs	r2, #32
   1698c:	4690      	mov	r8, r2
   1698e:	2208      	movs	r2, #8
   16990:	4691      	mov	r9, r2
   16992:	44b9      	add	r9, r7
   16994:	44c8      	add	r8, r9
   16996:	44c4      	add	ip, r8
   16998:	4463      	add	r3, ip
   1699a:	781b      	ldrb	r3, [r3, #0]
   1699c:	2b00      	cmp	r3, #0
   1699e:	d101      	bne.n	169a4 <processOnSMS+0x19ac>
   169a0:	f000 ffe8 	bl	17974 <processOnSMS+0x297c>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
   169a4:	230c      	movs	r3, #12
   169a6:	2220      	movs	r2, #32
   169a8:	4694      	mov	ip, r2
   169aa:	2208      	movs	r2, #8
   169ac:	4690      	mov	r8, r2
   169ae:	44b8      	add	r8, r7
   169b0:	44c4      	add	ip, r8
   169b2:	4463      	add	r3, ip
   169b4:	4a60      	ldr	r2, [pc, #384]	; (16b38 <processOnSMS+0x1b40>)
   169b6:	ca13      	ldmia	r2!, {r0, r1, r4}
   169b8:	c313      	stmia	r3!, {r0, r1, r4}
   169ba:	ca03      	ldmia	r2!, {r0, r1}
   169bc:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
   169be:	f000 ffd9 	bl	17974 <processOnSMS+0x297c>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
   169c2:	4b4f      	ldr	r3, [pc, #316]	; (16b00 <processOnSMS+0x1b08>)
   169c4:	2298      	movs	r2, #152	; 0x98
   169c6:	0052      	lsls	r2, r2, #1
   169c8:	4694      	mov	ip, r2
   169ca:	2220      	movs	r2, #32
   169cc:	4690      	mov	r8, r2
   169ce:	2208      	movs	r2, #8
   169d0:	4691      	mov	r9, r2
   169d2:	44b9      	add	r9, r7
   169d4:	44c8      	add	r8, r9
   169d6:	44c4      	add	ip, r8
   169d8:	4463      	add	r3, ip
   169da:	781b      	ldrb	r3, [r3, #0]
   169dc:	2b00      	cmp	r3, #0
   169de:	d101      	bne.n	169e4 <processOnSMS+0x19ec>
   169e0:	f000 ffc8 	bl	17974 <processOnSMS+0x297c>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
   169e4:	230c      	movs	r3, #12
   169e6:	2220      	movs	r2, #32
   169e8:	4694      	mov	ip, r2
   169ea:	2208      	movs	r2, #8
   169ec:	4690      	mov	r8, r2
   169ee:	44b8      	add	r8, r7
   169f0:	44c4      	add	ip, r8
   169f2:	4463      	add	r3, ip
   169f4:	4a51      	ldr	r2, [pc, #324]	; (16b3c <processOnSMS+0x1b44>)
   169f6:	ca13      	ldmia	r2!, {r0, r1, r4}
   169f8:	c313      	stmia	r3!, {r0, r1, r4}
   169fa:	ca13      	ldmia	r2!, {r0, r1, r4}
   169fc:	c313      	stmia	r3!, {r0, r1, r4}
   169fe:	6811      	ldr	r1, [r2, #0]
   16a00:	6019      	str	r1, [r3, #0]
   16a02:	7912      	ldrb	r2, [r2, #4]
   16a04:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
   16a06:	f000 ffb5 	bl	17974 <processOnSMS+0x297c>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
   16a0a:	4a4d      	ldr	r2, [pc, #308]	; (16b40 <processOnSMS+0x1b48>)
   16a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a0e:	0011      	movs	r1, r2
   16a10:	0018      	movs	r0, r3
   16a12:	4b38      	ldr	r3, [pc, #224]	; (16af4 <processOnSMS+0x1afc>)
   16a14:	4798      	blx	r3
   16a16:	1e03      	subs	r3, r0, #0
   16a18:	d02f      	beq.n	16a7a <processOnSMS+0x1a82>
	{
		saveAlterNumberSetting(false);
   16a1a:	2000      	movs	r0, #0
   16a1c:	4b45      	ldr	r3, [pc, #276]	; (16b34 <processOnSMS+0x1b3c>)
   16a1e:	4798      	blx	r3
		incomingSMSProcessed=true;
   16a20:	2330      	movs	r3, #48	; 0x30
   16a22:	33ff      	adds	r3, #255	; 0xff
   16a24:	2220      	movs	r2, #32
   16a26:	4694      	mov	ip, r2
   16a28:	2208      	movs	r2, #8
   16a2a:	4690      	mov	r8, r2
   16a2c:	44b8      	add	r8, r7
   16a2e:	44c4      	add	ip, r8
   16a30:	4463      	add	r3, ip
   16a32:	2201      	movs	r2, #1
   16a34:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   16a36:	4b32      	ldr	r3, [pc, #200]	; (16b00 <processOnSMS+0x1b08>)
   16a38:	2298      	movs	r2, #152	; 0x98
   16a3a:	0052      	lsls	r2, r2, #1
   16a3c:	4694      	mov	ip, r2
   16a3e:	2220      	movs	r2, #32
   16a40:	4690      	mov	r8, r2
   16a42:	2208      	movs	r2, #8
   16a44:	4691      	mov	r9, r2
   16a46:	44b9      	add	r9, r7
   16a48:	44c8      	add	r8, r9
   16a4a:	44c4      	add	ip, r8
   16a4c:	4463      	add	r3, ip
   16a4e:	781b      	ldrb	r3, [r3, #0]
   16a50:	2b00      	cmp	r3, #0
   16a52:	d101      	bne.n	16a58 <processOnSMS+0x1a60>
   16a54:	f000 ff8f 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
   16a58:	230c      	movs	r3, #12
   16a5a:	2220      	movs	r2, #32
   16a5c:	4694      	mov	ip, r2
   16a5e:	2208      	movs	r2, #8
   16a60:	4690      	mov	r8, r2
   16a62:	44b8      	add	r8, r7
   16a64:	44c4      	add	ip, r8
   16a66:	4463      	add	r3, ip
   16a68:	4a36      	ldr	r2, [pc, #216]	; (16b44 <processOnSMS+0x1b4c>)
   16a6a:	ca13      	ldmia	r2!, {r0, r1, r4}
   16a6c:	c313      	stmia	r3!, {r0, r1, r4}
   16a6e:	ca13      	ldmia	r2!, {r0, r1, r4}
   16a70:	c313      	stmia	r3!, {r0, r1, r4}
   16a72:	6812      	ldr	r2, [r2, #0]
   16a74:	601a      	str	r2, [r3, #0]
   16a76:	f000 ff7e 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
   16a7a:	4a33      	ldr	r2, [pc, #204]	; (16b48 <processOnSMS+0x1b50>)
   16a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16a7e:	0011      	movs	r1, r2
   16a80:	0018      	movs	r0, r3
   16a82:	4b1c      	ldr	r3, [pc, #112]	; (16af4 <processOnSMS+0x1afc>)
   16a84:	4798      	blx	r3
   16a86:	1e03      	subs	r3, r0, #0
   16a88:	d064      	beq.n	16b54 <processOnSMS+0x1b5c>
	{
		saveNoCallSettings(false,0,0,0,0);
   16a8a:	2300      	movs	r3, #0
   16a8c:	9300      	str	r3, [sp, #0]
   16a8e:	2300      	movs	r3, #0
   16a90:	2200      	movs	r2, #0
   16a92:	2100      	movs	r1, #0
   16a94:	2000      	movs	r0, #0
   16a96:	4c2d      	ldr	r4, [pc, #180]	; (16b4c <processOnSMS+0x1b54>)
   16a98:	47a0      	blx	r4
		incomingSMSProcessed=true;
   16a9a:	2330      	movs	r3, #48	; 0x30
   16a9c:	33ff      	adds	r3, #255	; 0xff
   16a9e:	2220      	movs	r2, #32
   16aa0:	4694      	mov	ip, r2
   16aa2:	2208      	movs	r2, #8
   16aa4:	4690      	mov	r8, r2
   16aa6:	44b8      	add	r8, r7
   16aa8:	44c4      	add	ip, r8
   16aaa:	4463      	add	r3, ip
   16aac:	2201      	movs	r2, #1
   16aae:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
   16ab0:	4b13      	ldr	r3, [pc, #76]	; (16b00 <processOnSMS+0x1b08>)
   16ab2:	2298      	movs	r2, #152	; 0x98
   16ab4:	0052      	lsls	r2, r2, #1
   16ab6:	4694      	mov	ip, r2
   16ab8:	2220      	movs	r2, #32
   16aba:	4690      	mov	r8, r2
   16abc:	2208      	movs	r2, #8
   16abe:	4691      	mov	r9, r2
   16ac0:	44b9      	add	r9, r7
   16ac2:	44c8      	add	r8, r9
   16ac4:	44c4      	add	ip, r8
   16ac6:	4463      	add	r3, ip
   16ac8:	781b      	ldrb	r3, [r3, #0]
   16aca:	2b00      	cmp	r3, #0
   16acc:	d101      	bne.n	16ad2 <processOnSMS+0x1ada>
   16ace:	f000 ff52 	bl	17976 <processOnSMS+0x297e>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
   16ad2:	230c      	movs	r3, #12
   16ad4:	2220      	movs	r2, #32
   16ad6:	4694      	mov	ip, r2
   16ad8:	2208      	movs	r2, #8
   16ada:	4690      	mov	r8, r2
   16adc:	44b8      	add	r8, r7
   16ade:	44c4      	add	ip, r8
   16ae0:	4463      	add	r3, ip
   16ae2:	4a1b      	ldr	r2, [pc, #108]	; (16b50 <processOnSMS+0x1b58>)
   16ae4:	ca13      	ldmia	r2!, {r0, r1, r4}
   16ae6:	c313      	stmia	r3!, {r0, r1, r4}
   16ae8:	ca03      	ldmia	r2!, {r0, r1}
   16aea:	c303      	stmia	r3!, {r0, r1}
   16aec:	f000 ff43 	bl	17976 <processOnSMS+0x297e>
   16af0:	0002ac70 	.word	0x0002ac70
   16af4:	0001420d 	.word	0x0001420d
   16af8:	2000082c 	.word	0x2000082c
   16afc:	20000754 	.word	0x20000754
   16b00:	fffffed2 	.word	0xfffffed2
   16b04:	00017ca5 	.word	0x00017ca5
   16b08:	0002ac78 	.word	0x0002ac78
   16b0c:	0002aca8 	.word	0x0002aca8
   16b10:	0002acd0 	.word	0x0002acd0
   16b14:	00010be5 	.word	0x00010be5
   16b18:	0002acd8 	.word	0x0002acd8
   16b1c:	0002ace8 	.word	0x0002ace8
   16b20:	00017a69 	.word	0x00017a69
   16b24:	0002a8cc 	.word	0x0002a8cc
   16b28:	fffffed3 	.word	0xfffffed3
   16b2c:	fffffed1 	.word	0xfffffed1
   16b30:	2000083c 	.word	0x2000083c
   16b34:	000111e9 	.word	0x000111e9
   16b38:	0002acf0 	.word	0x0002acf0
   16b3c:	0002ad04 	.word	0x0002ad04
   16b40:	0002ad24 	.word	0x0002ad24
   16b44:	0002ad2c 	.word	0x0002ad2c
   16b48:	0002ad48 	.word	0x0002ad48
   16b4c:	000113d9 	.word	0x000113d9
   16b50:	0002ad50 	.word	0x0002ad50
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
   16b54:	4adc      	ldr	r2, [pc, #880]	; (16ec8 <processOnSMS+0x1ed0>)
   16b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b58:	0011      	movs	r1, r2
   16b5a:	0018      	movs	r0, r3
   16b5c:	4bdb      	ldr	r3, [pc, #876]	; (16ecc <processOnSMS+0x1ed4>)
   16b5e:	4798      	blx	r3
   16b60:	1e03      	subs	r3, r0, #0
   16b62:	d053      	beq.n	16c0c <processOnSMS+0x1c14>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
   16b64:	230a      	movs	r3, #10
   16b66:	2220      	movs	r2, #32
   16b68:	2108      	movs	r1, #8
   16b6a:	468c      	mov	ip, r1
   16b6c:	44bc      	add	ip, r7
   16b6e:	4462      	add	r2, ip
   16b70:	18d2      	adds	r2, r2, r3
   16b72:	230b      	movs	r3, #11
   16b74:	2120      	movs	r1, #32
   16b76:	468c      	mov	ip, r1
   16b78:	2108      	movs	r1, #8
   16b7a:	4688      	mov	r8, r1
   16b7c:	44b8      	add	r8, r7
   16b7e:	44c4      	add	ip, r8
   16b80:	4463      	add	r3, ip
   16b82:	0011      	movs	r1, r2
   16b84:	0018      	movs	r0, r3
   16b86:	4bd2      	ldr	r3, [pc, #840]	; (16ed0 <processOnSMS+0x1ed8>)
   16b88:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
   16b8a:	4bd2      	ldr	r3, [pc, #840]	; (16ed4 <processOnSMS+0x1edc>)
   16b8c:	2298      	movs	r2, #152	; 0x98
   16b8e:	0052      	lsls	r2, r2, #1
   16b90:	4694      	mov	ip, r2
   16b92:	2220      	movs	r2, #32
   16b94:	4690      	mov	r8, r2
   16b96:	2208      	movs	r2, #8
   16b98:	4691      	mov	r9, r2
   16b9a:	44b9      	add	r9, r7
   16b9c:	44c8      	add	r8, r9
   16b9e:	44c4      	add	ip, r8
   16ba0:	4463      	add	r3, ip
   16ba2:	781b      	ldrb	r3, [r3, #0]
   16ba4:	001a      	movs	r2, r3
   16ba6:	4bcc      	ldr	r3, [pc, #816]	; (16ed8 <processOnSMS+0x1ee0>)
   16ba8:	2198      	movs	r1, #152	; 0x98
   16baa:	0049      	lsls	r1, r1, #1
   16bac:	468c      	mov	ip, r1
   16bae:	2120      	movs	r1, #32
   16bb0:	4688      	mov	r8, r1
   16bb2:	2108      	movs	r1, #8
   16bb4:	4689      	mov	r9, r1
   16bb6:	44b9      	add	r9, r7
   16bb8:	44c8      	add	r8, r9
   16bba:	44c4      	add	ip, r8
   16bbc:	4463      	add	r3, ip
   16bbe:	781b      	ldrb	r3, [r3, #0]
   16bc0:	49c6      	ldr	r1, [pc, #792]	; (16edc <processOnSMS+0x1ee4>)
   16bc2:	200c      	movs	r0, #12
   16bc4:	2420      	movs	r4, #32
   16bc6:	46a4      	mov	ip, r4
   16bc8:	2408      	movs	r4, #8
   16bca:	46a0      	mov	r8, r4
   16bcc:	44b8      	add	r8, r7
   16bce:	44c4      	add	ip, r8
   16bd0:	4460      	add	r0, ip
   16bd2:	4cc3      	ldr	r4, [pc, #780]	; (16ee0 <processOnSMS+0x1ee8>)
   16bd4:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
   16bd6:	2330      	movs	r3, #48	; 0x30
   16bd8:	33ff      	adds	r3, #255	; 0xff
   16bda:	2220      	movs	r2, #32
   16bdc:	4694      	mov	ip, r2
   16bde:	2208      	movs	r2, #8
   16be0:	4690      	mov	r8, r2
   16be2:	44b8      	add	r8, r7
   16be4:	44c4      	add	ip, r8
   16be6:	4463      	add	r3, ip
   16be8:	2201      	movs	r2, #1
   16bea:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
   16bec:	4bbd      	ldr	r3, [pc, #756]	; (16ee4 <processOnSMS+0x1eec>)
   16bee:	2298      	movs	r2, #152	; 0x98
   16bf0:	0052      	lsls	r2, r2, #1
   16bf2:	4694      	mov	ip, r2
   16bf4:	2220      	movs	r2, #32
   16bf6:	4690      	mov	r8, r2
   16bf8:	2208      	movs	r2, #8
   16bfa:	4691      	mov	r9, r2
   16bfc:	44b9      	add	r9, r7
   16bfe:	44c8      	add	r8, r9
   16c00:	44c4      	add	ip, r8
   16c02:	4463      	add	r3, ip
   16c04:	2201      	movs	r2, #1
   16c06:	701a      	strb	r2, [r3, #0]
   16c08:	f000 feb5 	bl	17976 <processOnSMS+0x297e>
	}
	else if (StringstartsWith(received_command,"SETTIME"))
   16c0c:	4ab6      	ldr	r2, [pc, #728]	; (16ee8 <processOnSMS+0x1ef0>)
   16c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c10:	0011      	movs	r1, r2
   16c12:	0018      	movs	r0, r3
   16c14:	4bad      	ldr	r3, [pc, #692]	; (16ecc <processOnSMS+0x1ed4>)
   16c16:	4798      	blx	r3
   16c18:	1e03      	subs	r3, r0, #0
   16c1a:	d001      	beq.n	16c20 <processOnSMS+0x1c28>
   16c1c:	f000 feab 	bl	17976 <processOnSMS+0x297e>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
   16c20:	4ab2      	ldr	r2, [pc, #712]	; (16eec <processOnSMS+0x1ef4>)
   16c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c24:	0011      	movs	r1, r2
   16c26:	0018      	movs	r0, r3
   16c28:	4ba8      	ldr	r3, [pc, #672]	; (16ecc <processOnSMS+0x1ed4>)
   16c2a:	4798      	blx	r3
   16c2c:	1e03      	subs	r3, r0, #0
   16c2e:	d100      	bne.n	16c32 <processOnSMS+0x1c3a>
   16c30:	e1b7      	b.n	16fa2 <processOnSMS+0x1faa>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
   16c32:	4aaf      	ldr	r2, [pc, #700]	; (16ef0 <processOnSMS+0x1ef8>)
   16c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c36:	0011      	movs	r1, r2
   16c38:	0018      	movs	r0, r3
   16c3a:	4bae      	ldr	r3, [pc, #696]	; (16ef4 <processOnSMS+0x1efc>)
   16c3c:	4798      	blx	r3
   16c3e:	0003      	movs	r3, r0
   16c40:	2288      	movs	r2, #136	; 0x88
   16c42:	0052      	lsls	r2, r2, #1
   16c44:	2120      	movs	r1, #32
   16c46:	468c      	mov	ip, r1
   16c48:	2108      	movs	r1, #8
   16c4a:	4688      	mov	r8, r1
   16c4c:	44b8      	add	r8, r7
   16c4e:	44c4      	add	ip, r8
   16c50:	4462      	add	r2, ip
   16c52:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
   16c54:	4ba8      	ldr	r3, [pc, #672]	; (16ef8 <processOnSMS+0x1f00>)
   16c56:	0019      	movs	r1, r3
   16c58:	2000      	movs	r0, #0
   16c5a:	4ba6      	ldr	r3, [pc, #664]	; (16ef4 <processOnSMS+0x1efc>)
   16c5c:	4798      	blx	r3
   16c5e:	0003      	movs	r3, r0
   16c60:	2288      	movs	r2, #136	; 0x88
   16c62:	0052      	lsls	r2, r2, #1
   16c64:	2120      	movs	r1, #32
   16c66:	468c      	mov	ip, r1
   16c68:	2108      	movs	r1, #8
   16c6a:	4688      	mov	r8, r1
   16c6c:	44b8      	add	r8, r7
   16c6e:	44c4      	add	ip, r8
   16c70:	4462      	add	r2, ip
   16c72:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
   16c74:	2388      	movs	r3, #136	; 0x88
   16c76:	005b      	lsls	r3, r3, #1
   16c78:	2220      	movs	r2, #32
   16c7a:	4694      	mov	ip, r2
   16c7c:	2208      	movs	r2, #8
   16c7e:	4690      	mov	r8, r2
   16c80:	44b8      	add	r8, r7
   16c82:	44c4      	add	ip, r8
   16c84:	4463      	add	r3, ip
   16c86:	681b      	ldr	r3, [r3, #0]
   16c88:	781b      	ldrb	r3, [r3, #0]
   16c8a:	0018      	movs	r0, r3
   16c8c:	4b9b      	ldr	r3, [pc, #620]	; (16efc <processOnSMS+0x1f04>)
   16c8e:	4798      	blx	r3
   16c90:	0002      	movs	r2, r0
   16c92:	2310      	movs	r3, #16
   16c94:	33ff      	adds	r3, #255	; 0xff
   16c96:	2120      	movs	r1, #32
   16c98:	468c      	mov	ip, r1
   16c9a:	2108      	movs	r1, #8
   16c9c:	4688      	mov	r8, r1
   16c9e:	44b8      	add	r8, r7
   16ca0:	44c4      	add	ip, r8
   16ca2:	4463      	add	r3, ip
   16ca4:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
   16ca6:	4b92      	ldr	r3, [pc, #584]	; (16ef0 <processOnSMS+0x1ef8>)
   16ca8:	0019      	movs	r1, r3
   16caa:	2000      	movs	r0, #0
   16cac:	4b91      	ldr	r3, [pc, #580]	; (16ef4 <processOnSMS+0x1efc>)
   16cae:	4798      	blx	r3
   16cb0:	0003      	movs	r3, r0
   16cb2:	2288      	movs	r2, #136	; 0x88
   16cb4:	0052      	lsls	r2, r2, #1
   16cb6:	2120      	movs	r1, #32
   16cb8:	468c      	mov	ip, r1
   16cba:	2108      	movs	r1, #8
   16cbc:	4688      	mov	r8, r1
   16cbe:	44b8      	add	r8, r7
   16cc0:	44c4      	add	ip, r8
   16cc2:	4462      	add	r2, ip
   16cc4:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
   16cc6:	2388      	movs	r3, #136	; 0x88
   16cc8:	005b      	lsls	r3, r3, #1
   16cca:	2220      	movs	r2, #32
   16ccc:	4694      	mov	ip, r2
   16cce:	2208      	movs	r2, #8
   16cd0:	4690      	mov	r8, r2
   16cd2:	44b8      	add	r8, r7
   16cd4:	44c4      	add	ip, r8
   16cd6:	4463      	add	r3, ip
   16cd8:	681b      	ldr	r3, [r3, #0]
   16cda:	781b      	ldrb	r3, [r3, #0]
   16cdc:	0018      	movs	r0, r3
   16cde:	4b87      	ldr	r3, [pc, #540]	; (16efc <processOnSMS+0x1f04>)
   16ce0:	4798      	blx	r3
   16ce2:	0002      	movs	r2, r0
   16ce4:	2387      	movs	r3, #135	; 0x87
   16ce6:	005b      	lsls	r3, r3, #1
   16ce8:	2120      	movs	r1, #32
   16cea:	468c      	mov	ip, r1
   16cec:	2108      	movs	r1, #8
   16cee:	4688      	mov	r8, r1
   16cf0:	44b8      	add	r8, r7
   16cf2:	44c4      	add	ip, r8
   16cf4:	4463      	add	r3, ip
   16cf6:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16cf8:	4b7f      	ldr	r3, [pc, #508]	; (16ef8 <processOnSMS+0x1f00>)
   16cfa:	0019      	movs	r1, r3
   16cfc:	2000      	movs	r0, #0
   16cfe:	4b7d      	ldr	r3, [pc, #500]	; (16ef4 <processOnSMS+0x1efc>)
   16d00:	4798      	blx	r3
   16d02:	0003      	movs	r3, r0
   16d04:	2288      	movs	r2, #136	; 0x88
   16d06:	0052      	lsls	r2, r2, #1
   16d08:	2120      	movs	r1, #32
   16d0a:	468c      	mov	ip, r1
   16d0c:	2108      	movs	r1, #8
   16d0e:	4688      	mov	r8, r1
   16d10:	44b8      	add	r8, r7
   16d12:	44c4      	add	ip, r8
   16d14:	4462      	add	r2, ip
   16d16:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
   16d18:	2388      	movs	r3, #136	; 0x88
   16d1a:	005b      	lsls	r3, r3, #1
   16d1c:	2220      	movs	r2, #32
   16d1e:	4694      	mov	ip, r2
   16d20:	2208      	movs	r2, #8
   16d22:	4690      	mov	r8, r2
   16d24:	44b8      	add	r8, r7
   16d26:	44c4      	add	ip, r8
   16d28:	4463      	add	r3, ip
   16d2a:	681b      	ldr	r3, [r3, #0]
   16d2c:	781b      	ldrb	r3, [r3, #0]
   16d2e:	0018      	movs	r0, r3
   16d30:	4b72      	ldr	r3, [pc, #456]	; (16efc <processOnSMS+0x1f04>)
   16d32:	4798      	blx	r3
   16d34:	0002      	movs	r2, r0
   16d36:	230e      	movs	r3, #14
   16d38:	33ff      	adds	r3, #255	; 0xff
   16d3a:	2120      	movs	r1, #32
   16d3c:	468c      	mov	ip, r1
   16d3e:	2108      	movs	r1, #8
   16d40:	4688      	mov	r8, r1
   16d42:	44b8      	add	r8, r7
   16d44:	44c4      	add	ip, r8
   16d46:	4463      	add	r3, ip
   16d48:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
   16d4a:	4b6b      	ldr	r3, [pc, #428]	; (16ef8 <processOnSMS+0x1f00>)
   16d4c:	0019      	movs	r1, r3
   16d4e:	2000      	movs	r0, #0
   16d50:	4b68      	ldr	r3, [pc, #416]	; (16ef4 <processOnSMS+0x1efc>)
   16d52:	4798      	blx	r3
   16d54:	0003      	movs	r3, r0
   16d56:	2288      	movs	r2, #136	; 0x88
   16d58:	0052      	lsls	r2, r2, #1
   16d5a:	2120      	movs	r1, #32
   16d5c:	468c      	mov	ip, r1
   16d5e:	2108      	movs	r1, #8
   16d60:	4688      	mov	r8, r1
   16d62:	44b8      	add	r8, r7
   16d64:	44c4      	add	ip, r8
   16d66:	4462      	add	r2, ip
   16d68:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
   16d6a:	2388      	movs	r3, #136	; 0x88
   16d6c:	005b      	lsls	r3, r3, #1
   16d6e:	2220      	movs	r2, #32
   16d70:	4694      	mov	ip, r2
   16d72:	2208      	movs	r2, #8
   16d74:	4690      	mov	r8, r2
   16d76:	44b8      	add	r8, r7
   16d78:	44c4      	add	ip, r8
   16d7a:	4463      	add	r3, ip
   16d7c:	681b      	ldr	r3, [r3, #0]
   16d7e:	781b      	ldrb	r3, [r3, #0]
   16d80:	0018      	movs	r0, r3
   16d82:	4b5e      	ldr	r3, [pc, #376]	; (16efc <processOnSMS+0x1f04>)
   16d84:	4798      	blx	r3
   16d86:	0002      	movs	r2, r0
   16d88:	2386      	movs	r3, #134	; 0x86
   16d8a:	005b      	lsls	r3, r3, #1
   16d8c:	2120      	movs	r1, #32
   16d8e:	468c      	mov	ip, r1
   16d90:	2108      	movs	r1, #8
   16d92:	4688      	mov	r8, r1
   16d94:	44b8      	add	r8, r7
   16d96:	44c4      	add	ip, r8
   16d98:	4463      	add	r3, ip
   16d9a:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
   16d9c:	2310      	movs	r3, #16
   16d9e:	33ff      	adds	r3, #255	; 0xff
   16da0:	2220      	movs	r2, #32
   16da2:	4694      	mov	ip, r2
   16da4:	2208      	movs	r2, #8
   16da6:	4690      	mov	r8, r2
   16da8:	44b8      	add	r8, r7
   16daa:	44c4      	add	ip, r8
   16dac:	4463      	add	r3, ip
   16dae:	781b      	ldrb	r3, [r3, #0]
   16db0:	2b17      	cmp	r3, #23
   16db2:	d901      	bls.n	16db8 <processOnSMS+0x1dc0>
   16db4:	f000 fddf 	bl	17976 <processOnSMS+0x297e>
   16db8:	2387      	movs	r3, #135	; 0x87
   16dba:	005b      	lsls	r3, r3, #1
   16dbc:	2220      	movs	r2, #32
   16dbe:	4694      	mov	ip, r2
   16dc0:	2208      	movs	r2, #8
   16dc2:	4690      	mov	r8, r2
   16dc4:	44b8      	add	r8, r7
   16dc6:	44c4      	add	ip, r8
   16dc8:	4463      	add	r3, ip
   16dca:	781b      	ldrb	r3, [r3, #0]
   16dcc:	2b3b      	cmp	r3, #59	; 0x3b
   16dce:	d901      	bls.n	16dd4 <processOnSMS+0x1ddc>
   16dd0:	f000 fdd1 	bl	17976 <processOnSMS+0x297e>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
   16dd4:	230e      	movs	r3, #14
   16dd6:	33ff      	adds	r3, #255	; 0xff
   16dd8:	2220      	movs	r2, #32
   16dda:	4694      	mov	ip, r2
   16ddc:	2208      	movs	r2, #8
   16dde:	4690      	mov	r8, r2
   16de0:	44b8      	add	r8, r7
   16de2:	44c4      	add	ip, r8
   16de4:	4463      	add	r3, ip
   16de6:	781b      	ldrb	r3, [r3, #0]
   16de8:	2b17      	cmp	r3, #23
   16dea:	d901      	bls.n	16df0 <processOnSMS+0x1df8>
   16dec:	f000 fdc3 	bl	17976 <processOnSMS+0x297e>
   16df0:	2386      	movs	r3, #134	; 0x86
   16df2:	005b      	lsls	r3, r3, #1
   16df4:	2220      	movs	r2, #32
   16df6:	4694      	mov	ip, r2
   16df8:	2208      	movs	r2, #8
   16dfa:	4690      	mov	r8, r2
   16dfc:	44b8      	add	r8, r7
   16dfe:	44c4      	add	ip, r8
   16e00:	4463      	add	r3, ip
   16e02:	781b      	ldrb	r3, [r3, #0]
   16e04:	2b3b      	cmp	r3, #59	; 0x3b
   16e06:	d901      	bls.n	16e0c <processOnSMS+0x1e14>
   16e08:	f000 fdb5 	bl	17976 <processOnSMS+0x297e>
			{
				incomingSMSProcessed=true;
   16e0c:	2330      	movs	r3, #48	; 0x30
   16e0e:	33ff      	adds	r3, #255	; 0xff
   16e10:	2220      	movs	r2, #32
   16e12:	4694      	mov	ip, r2
   16e14:	2208      	movs	r2, #8
   16e16:	4690      	mov	r8, r2
   16e18:	44b8      	add	r8, r7
   16e1a:	44c4      	add	ip, r8
   16e1c:	4463      	add	r3, ip
   16e1e:	2201      	movs	r2, #1
   16e20:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
   16e22:	2310      	movs	r3, #16
   16e24:	33ff      	adds	r3, #255	; 0xff
   16e26:	2220      	movs	r2, #32
   16e28:	2108      	movs	r1, #8
   16e2a:	468c      	mov	ip, r1
   16e2c:	44bc      	add	ip, r7
   16e2e:	4462      	add	r2, ip
   16e30:	18d2      	adds	r2, r2, r3
   16e32:	230e      	movs	r3, #14
   16e34:	33ff      	adds	r3, #255	; 0xff
   16e36:	2120      	movs	r1, #32
   16e38:	468c      	mov	ip, r1
   16e3a:	2108      	movs	r1, #8
   16e3c:	4688      	mov	r8, r1
   16e3e:	44b8      	add	r8, r7
   16e40:	44c4      	add	ip, r8
   16e42:	4463      	add	r3, ip
   16e44:	7812      	ldrb	r2, [r2, #0]
   16e46:	781b      	ldrb	r3, [r3, #0]
   16e48:	429a      	cmp	r2, r3
   16e4a:	d15d      	bne.n	16f08 <processOnSMS+0x1f10>
   16e4c:	2387      	movs	r3, #135	; 0x87
   16e4e:	005b      	lsls	r3, r3, #1
   16e50:	2220      	movs	r2, #32
   16e52:	2108      	movs	r1, #8
   16e54:	468c      	mov	ip, r1
   16e56:	44bc      	add	ip, r7
   16e58:	4462      	add	r2, ip
   16e5a:	18d2      	adds	r2, r2, r3
   16e5c:	2386      	movs	r3, #134	; 0x86
   16e5e:	005b      	lsls	r3, r3, #1
   16e60:	2120      	movs	r1, #32
   16e62:	468c      	mov	ip, r1
   16e64:	2108      	movs	r1, #8
   16e66:	4688      	mov	r8, r1
   16e68:	44b8      	add	r8, r7
   16e6a:	44c4      	add	ip, r8
   16e6c:	4463      	add	r3, ip
   16e6e:	7812      	ldrb	r2, [r2, #0]
   16e70:	781b      	ldrb	r3, [r3, #0]
   16e72:	429a      	cmp	r2, r3
   16e74:	d148      	bne.n	16f08 <processOnSMS+0x1f10>
				{
					saveNoCallSettings(false,0,0,0,0);
   16e76:	2300      	movs	r3, #0
   16e78:	9300      	str	r3, [sp, #0]
   16e7a:	2300      	movs	r3, #0
   16e7c:	2200      	movs	r2, #0
   16e7e:	2100      	movs	r1, #0
   16e80:	2000      	movs	r0, #0
   16e82:	4c1f      	ldr	r4, [pc, #124]	; (16f00 <processOnSMS+0x1f08>)
   16e84:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   16e86:	4b17      	ldr	r3, [pc, #92]	; (16ee4 <processOnSMS+0x1eec>)
   16e88:	2298      	movs	r2, #152	; 0x98
   16e8a:	0052      	lsls	r2, r2, #1
   16e8c:	4694      	mov	ip, r2
   16e8e:	2220      	movs	r2, #32
   16e90:	4690      	mov	r8, r2
   16e92:	2208      	movs	r2, #8
   16e94:	4691      	mov	r9, r2
   16e96:	44b9      	add	r9, r7
   16e98:	44c8      	add	r8, r9
   16e9a:	44c4      	add	ip, r8
   16e9c:	4463      	add	r3, ip
   16e9e:	781b      	ldrb	r3, [r3, #0]
   16ea0:	2b00      	cmp	r3, #0
   16ea2:	d101      	bne.n	16ea8 <processOnSMS+0x1eb0>
   16ea4:	f000 fd67 	bl	17976 <processOnSMS+0x297e>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
   16ea8:	230c      	movs	r3, #12
   16eaa:	2220      	movs	r2, #32
   16eac:	4694      	mov	ip, r2
   16eae:	2208      	movs	r2, #8
   16eb0:	4690      	mov	r8, r2
   16eb2:	44b8      	add	r8, r7
   16eb4:	44c4      	add	ip, r8
   16eb6:	4463      	add	r3, ip
   16eb8:	4a12      	ldr	r2, [pc, #72]	; (16f04 <processOnSMS+0x1f0c>)
   16eba:	ca13      	ldmia	r2!, {r0, r1, r4}
   16ebc:	c313      	stmia	r3!, {r0, r1, r4}
   16ebe:	ca03      	ldmia	r2!, {r0, r1}
   16ec0:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
   16ec2:	f000 fd58 	bl	17976 <processOnSMS+0x297e>
   16ec6:	46c0      	nop			; (mov r8, r8)
   16ec8:	0002ad64 	.word	0x0002ad64
   16ecc:	0001420d 	.word	0x0001420d
   16ed0:	00017edd 	.word	0x00017edd
   16ed4:	fffffedb 	.word	0xfffffedb
   16ed8:	fffffeda 	.word	0xfffffeda
   16edc:	0002ad6c 	.word	0x0002ad6c
   16ee0:	0002985d 	.word	0x0002985d
   16ee4:	fffffed2 	.word	0xfffffed2
   16ee8:	0002ad7c 	.word	0x0002ad7c
   16eec:	0002ad84 	.word	0x0002ad84
   16ef0:	0002ad8c 	.word	0x0002ad8c
   16ef4:	00029949 	.word	0x00029949
   16ef8:	0002ad90 	.word	0x0002ad90
   16efc:	0002953d 	.word	0x0002953d
   16f00:	000113d9 	.word	0x000113d9
   16f04:	0002ad50 	.word	0x0002ad50
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
   16f08:	230e      	movs	r3, #14
   16f0a:	33ff      	adds	r3, #255	; 0xff
   16f0c:	2220      	movs	r2, #32
   16f0e:	4694      	mov	ip, r2
   16f10:	2208      	movs	r2, #8
   16f12:	4690      	mov	r8, r2
   16f14:	44b8      	add	r8, r7
   16f16:	44c4      	add	ip, r8
   16f18:	4463      	add	r3, ip
   16f1a:	7818      	ldrb	r0, [r3, #0]
   16f1c:	2387      	movs	r3, #135	; 0x87
   16f1e:	005b      	lsls	r3, r3, #1
   16f20:	2220      	movs	r2, #32
   16f22:	4694      	mov	ip, r2
   16f24:	2208      	movs	r2, #8
   16f26:	4690      	mov	r8, r2
   16f28:	44b8      	add	r8, r7
   16f2a:	44c4      	add	ip, r8
   16f2c:	4463      	add	r3, ip
   16f2e:	781a      	ldrb	r2, [r3, #0]
   16f30:	2310      	movs	r3, #16
   16f32:	33ff      	adds	r3, #255	; 0xff
   16f34:	2120      	movs	r1, #32
   16f36:	468c      	mov	ip, r1
   16f38:	2108      	movs	r1, #8
   16f3a:	4688      	mov	r8, r1
   16f3c:	44b8      	add	r8, r7
   16f3e:	44c4      	add	ip, r8
   16f40:	4463      	add	r3, ip
   16f42:	7819      	ldrb	r1, [r3, #0]
   16f44:	2386      	movs	r3, #134	; 0x86
   16f46:	005b      	lsls	r3, r3, #1
   16f48:	2420      	movs	r4, #32
   16f4a:	46a4      	mov	ip, r4
   16f4c:	2408      	movs	r4, #8
   16f4e:	46a0      	mov	r8, r4
   16f50:	44b8      	add	r8, r7
   16f52:	44c4      	add	ip, r8
   16f54:	4463      	add	r3, ip
   16f56:	781b      	ldrb	r3, [r3, #0]
   16f58:	9300      	str	r3, [sp, #0]
   16f5a:	0003      	movs	r3, r0
   16f5c:	2001      	movs	r0, #1
   16f5e:	4ce4      	ldr	r4, [pc, #912]	; (172f0 <processOnSMS+0x22f8>)
   16f60:	47a0      	blx	r4
					if(response_sms_processed_cmd)
   16f62:	4be4      	ldr	r3, [pc, #912]	; (172f4 <processOnSMS+0x22fc>)
   16f64:	2298      	movs	r2, #152	; 0x98
   16f66:	0052      	lsls	r2, r2, #1
   16f68:	4694      	mov	ip, r2
   16f6a:	2220      	movs	r2, #32
   16f6c:	4690      	mov	r8, r2
   16f6e:	2208      	movs	r2, #8
   16f70:	4691      	mov	r9, r2
   16f72:	44b9      	add	r9, r7
   16f74:	44c8      	add	r8, r9
   16f76:	44c4      	add	ip, r8
   16f78:	4463      	add	r3, ip
   16f7a:	781b      	ldrb	r3, [r3, #0]
   16f7c:	2b00      	cmp	r3, #0
   16f7e:	d101      	bne.n	16f84 <processOnSMS+0x1f8c>
   16f80:	f000 fcf9 	bl	17976 <processOnSMS+0x297e>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
   16f84:	230c      	movs	r3, #12
   16f86:	2220      	movs	r2, #32
   16f88:	4694      	mov	ip, r2
   16f8a:	2208      	movs	r2, #8
   16f8c:	4690      	mov	r8, r2
   16f8e:	44b8      	add	r8, r7
   16f90:	44c4      	add	ip, r8
   16f92:	4463      	add	r3, ip
   16f94:	4ad8      	ldr	r2, [pc, #864]	; (172f8 <processOnSMS+0x2300>)
   16f96:	ca13      	ldmia	r2!, {r0, r1, r4}
   16f98:	c313      	stmia	r3!, {r0, r1, r4}
   16f9a:	ca03      	ldmia	r2!, {r0, r1}
   16f9c:	c303      	stmia	r3!, {r0, r1}
   16f9e:	f000 fcea 	bl	17976 <processOnSMS+0x297e>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
   16fa2:	4ad6      	ldr	r2, [pc, #856]	; (172fc <processOnSMS+0x2304>)
   16fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16fa6:	0011      	movs	r1, r2
   16fa8:	0018      	movs	r0, r3
   16faa:	4bd5      	ldr	r3, [pc, #852]	; (17300 <processOnSMS+0x2308>)
   16fac:	4798      	blx	r3
   16fae:	1e03      	subs	r3, r0, #0
   16fb0:	d073      	beq.n	1709a <processOnSMS+0x20a2>
	{
		memmove(received_command,received_command+5,strlen(received_command));
   16fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16fb4:	1d5c      	adds	r4, r3, #5
   16fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16fb8:	0018      	movs	r0, r3
   16fba:	4bd2      	ldr	r3, [pc, #840]	; (17304 <processOnSMS+0x230c>)
   16fbc:	4798      	blx	r3
   16fbe:	0002      	movs	r2, r0
   16fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16fc2:	0021      	movs	r1, r4
   16fc4:	0018      	movs	r0, r3
   16fc6:	4bd0      	ldr	r3, [pc, #832]	; (17308 <processOnSMS+0x2310>)
   16fc8:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
   16fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16fcc:	0018      	movs	r0, r3
   16fce:	4bcf      	ldr	r3, [pc, #828]	; (1730c <processOnSMS+0x2314>)
   16fd0:	4798      	blx	r3
   16fd2:	0002      	movs	r2, r0
   16fd4:	2391      	movs	r3, #145	; 0x91
   16fd6:	005b      	lsls	r3, r3, #1
   16fd8:	2120      	movs	r1, #32
   16fda:	468c      	mov	ip, r1
   16fdc:	2108      	movs	r1, #8
   16fde:	4688      	mov	r8, r1
   16fe0:	44b8      	add	r8, r7
   16fe2:	44c4      	add	ip, r8
   16fe4:	4463      	add	r3, ip
   16fe6:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
   16fe8:	2391      	movs	r3, #145	; 0x91
   16fea:	005b      	lsls	r3, r3, #1
   16fec:	2220      	movs	r2, #32
   16fee:	4694      	mov	ip, r2
   16ff0:	2208      	movs	r2, #8
   16ff2:	4690      	mov	r8, r2
   16ff4:	44b8      	add	r8, r7
   16ff6:	44c4      	add	ip, r8
   16ff8:	4463      	add	r3, ip
   16ffa:	881b      	ldrh	r3, [r3, #0]
   16ffc:	2b05      	cmp	r3, #5
   16ffe:	d90a      	bls.n	17016 <processOnSMS+0x201e>
   17000:	2391      	movs	r3, #145	; 0x91
   17002:	005b      	lsls	r3, r3, #1
   17004:	2220      	movs	r2, #32
   17006:	4694      	mov	ip, r2
   17008:	2208      	movs	r2, #8
   1700a:	4690      	mov	r8, r2
   1700c:	44b8      	add	r8, r7
   1700e:	44c4      	add	ip, r8
   17010:	4463      	add	r3, ip
   17012:	2205      	movs	r2, #5
   17014:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
   17016:	2391      	movs	r3, #145	; 0x91
   17018:	005b      	lsls	r3, r3, #1
   1701a:	2220      	movs	r2, #32
   1701c:	4694      	mov	ip, r2
   1701e:	2208      	movs	r2, #8
   17020:	4690      	mov	r8, r2
   17022:	44b8      	add	r8, r7
   17024:	44c4      	add	ip, r8
   17026:	4463      	add	r3, ip
   17028:	881b      	ldrh	r3, [r3, #0]
   1702a:	b2db      	uxtb	r3, r3
   1702c:	0018      	movs	r0, r3
   1702e:	4bb8      	ldr	r3, [pc, #736]	; (17310 <processOnSMS+0x2318>)
   17030:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   17032:	2330      	movs	r3, #48	; 0x30
   17034:	33ff      	adds	r3, #255	; 0xff
   17036:	2220      	movs	r2, #32
   17038:	4694      	mov	ip, r2
   1703a:	2208      	movs	r2, #8
   1703c:	4690      	mov	r8, r2
   1703e:	44b8      	add	r8, r7
   17040:	44c4      	add	ip, r8
   17042:	4463      	add	r3, ip
   17044:	2201      	movs	r2, #1
   17046:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
   17048:	4baa      	ldr	r3, [pc, #680]	; (172f4 <processOnSMS+0x22fc>)
   1704a:	2298      	movs	r2, #152	; 0x98
   1704c:	0052      	lsls	r2, r2, #1
   1704e:	4694      	mov	ip, r2
   17050:	2220      	movs	r2, #32
   17052:	4690      	mov	r8, r2
   17054:	2208      	movs	r2, #8
   17056:	4691      	mov	r9, r2
   17058:	44b9      	add	r9, r7
   1705a:	44c8      	add	r8, r9
   1705c:	44c4      	add	ip, r8
   1705e:	4463      	add	r3, ip
   17060:	781b      	ldrb	r3, [r3, #0]
   17062:	2b00      	cmp	r3, #0
   17064:	d101      	bne.n	1706a <processOnSMS+0x2072>
   17066:	f000 fc86 	bl	17976 <processOnSMS+0x297e>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
   1706a:	2391      	movs	r3, #145	; 0x91
   1706c:	005b      	lsls	r3, r3, #1
   1706e:	2220      	movs	r2, #32
   17070:	4694      	mov	ip, r2
   17072:	2208      	movs	r2, #8
   17074:	4690      	mov	r8, r2
   17076:	44b8      	add	r8, r7
   17078:	44c4      	add	ip, r8
   1707a:	4463      	add	r3, ip
   1707c:	881a      	ldrh	r2, [r3, #0]
   1707e:	49a5      	ldr	r1, [pc, #660]	; (17314 <processOnSMS+0x231c>)
   17080:	230c      	movs	r3, #12
   17082:	2020      	movs	r0, #32
   17084:	4684      	mov	ip, r0
   17086:	2008      	movs	r0, #8
   17088:	4680      	mov	r8, r0
   1708a:	44b8      	add	r8, r7
   1708c:	44c4      	add	ip, r8
   1708e:	4463      	add	r3, ip
   17090:	0018      	movs	r0, r3
   17092:	4ba1      	ldr	r3, [pc, #644]	; (17318 <processOnSMS+0x2320>)
   17094:	4798      	blx	r3
   17096:	f000 fc6e 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
   1709a:	4aa0      	ldr	r2, [pc, #640]	; (1731c <processOnSMS+0x2324>)
   1709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1709e:	0011      	movs	r1, r2
   170a0:	0018      	movs	r0, r3
   170a2:	4b97      	ldr	r3, [pc, #604]	; (17300 <processOnSMS+0x2308>)
   170a4:	4798      	blx	r3
   170a6:	1e03      	subs	r3, r0, #0
   170a8:	d100      	bne.n	170ac <processOnSMS+0x20b4>
   170aa:	e08b      	b.n	171c4 <processOnSMS+0x21cc>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   170ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   170ae:	3308      	adds	r3, #8
   170b0:	001c      	movs	r4, r3
   170b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   170b4:	0018      	movs	r0, r3
   170b6:	4b93      	ldr	r3, [pc, #588]	; (17304 <processOnSMS+0x230c>)
   170b8:	4798      	blx	r3
   170ba:	0002      	movs	r2, r0
   170bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   170be:	0021      	movs	r1, r4
   170c0:	0018      	movs	r0, r3
   170c2:	4b91      	ldr	r3, [pc, #580]	; (17308 <processOnSMS+0x2310>)
   170c4:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
   170c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   170c8:	0018      	movs	r0, r3
   170ca:	4b90      	ldr	r3, [pc, #576]	; (1730c <processOnSMS+0x2314>)
   170cc:	4798      	blx	r3
   170ce:	0002      	movs	r2, r0
   170d0:	2390      	movs	r3, #144	; 0x90
   170d2:	005b      	lsls	r3, r3, #1
   170d4:	2120      	movs	r1, #32
   170d6:	468c      	mov	ip, r1
   170d8:	2108      	movs	r1, #8
   170da:	4688      	mov	r8, r1
   170dc:	44b8      	add	r8, r7
   170de:	44c4      	add	ip, r8
   170e0:	4463      	add	r3, ip
   170e2:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
   170e4:	2390      	movs	r3, #144	; 0x90
   170e6:	005b      	lsls	r3, r3, #1
   170e8:	2220      	movs	r2, #32
   170ea:	4694      	mov	ip, r2
   170ec:	2208      	movs	r2, #8
   170ee:	4690      	mov	r8, r2
   170f0:	44b8      	add	r8, r7
   170f2:	44c4      	add	ip, r8
   170f4:	4463      	add	r3, ip
   170f6:	881b      	ldrh	r3, [r3, #0]
   170f8:	2b01      	cmp	r3, #1
   170fa:	d80a      	bhi.n	17112 <processOnSMS+0x211a>
		{
			STARTIME = 2;
   170fc:	2390      	movs	r3, #144	; 0x90
   170fe:	005b      	lsls	r3, r3, #1
   17100:	2220      	movs	r2, #32
   17102:	4694      	mov	ip, r2
   17104:	2208      	movs	r2, #8
   17106:	4690      	mov	r8, r2
   17108:	44b8      	add	r8, r7
   1710a:	44c4      	add	ip, r8
   1710c:	4463      	add	r3, ip
   1710e:	2202      	movs	r2, #2
   17110:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 65000L)
   17112:	2390      	movs	r3, #144	; 0x90
   17114:	005b      	lsls	r3, r3, #1
   17116:	2220      	movs	r2, #32
   17118:	4694      	mov	ip, r2
   1711a:	2208      	movs	r2, #8
   1711c:	4690      	mov	r8, r2
   1711e:	44b8      	add	r8, r7
   17120:	44c4      	add	ip, r8
   17122:	4463      	add	r3, ip
   17124:	881b      	ldrh	r3, [r3, #0]
   17126:	4a7e      	ldr	r2, [pc, #504]	; (17320 <processOnSMS+0x2328>)
   17128:	4293      	cmp	r3, r2
   1712a:	d90a      	bls.n	17142 <processOnSMS+0x214a>
		{
			STARTIME = 65000L;
   1712c:	2390      	movs	r3, #144	; 0x90
   1712e:	005b      	lsls	r3, r3, #1
   17130:	2220      	movs	r2, #32
   17132:	4694      	mov	ip, r2
   17134:	2208      	movs	r2, #8
   17136:	4690      	mov	r8, r2
   17138:	44b8      	add	r8, r7
   1713a:	44c4      	add	ip, r8
   1713c:	4463      	add	r3, ip
   1713e:	4a79      	ldr	r2, [pc, #484]	; (17324 <processOnSMS+0x232c>)
   17140:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
   17142:	2390      	movs	r3, #144	; 0x90
   17144:	005b      	lsls	r3, r3, #1
   17146:	2220      	movs	r2, #32
   17148:	4694      	mov	ip, r2
   1714a:	2208      	movs	r2, #8
   1714c:	4690      	mov	r8, r2
   1714e:	44b8      	add	r8, r7
   17150:	44c4      	add	ip, r8
   17152:	4463      	add	r3, ip
   17154:	881b      	ldrh	r3, [r3, #0]
   17156:	0018      	movs	r0, r3
   17158:	4b73      	ldr	r3, [pc, #460]	; (17328 <processOnSMS+0x2330>)
   1715a:	4798      	blx	r3
		
		incomingSMSProcessed=true;
   1715c:	2330      	movs	r3, #48	; 0x30
   1715e:	33ff      	adds	r3, #255	; 0xff
   17160:	2220      	movs	r2, #32
   17162:	4694      	mov	ip, r2
   17164:	2208      	movs	r2, #8
   17166:	4690      	mov	r8, r2
   17168:	44b8      	add	r8, r7
   1716a:	44c4      	add	ip, r8
   1716c:	4463      	add	r3, ip
   1716e:	2201      	movs	r2, #1
   17170:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   17172:	4b60      	ldr	r3, [pc, #384]	; (172f4 <processOnSMS+0x22fc>)
   17174:	2298      	movs	r2, #152	; 0x98
   17176:	0052      	lsls	r2, r2, #1
   17178:	4694      	mov	ip, r2
   1717a:	2220      	movs	r2, #32
   1717c:	4690      	mov	r8, r2
   1717e:	2208      	movs	r2, #8
   17180:	4691      	mov	r9, r2
   17182:	44b9      	add	r9, r7
   17184:	44c8      	add	r8, r9
   17186:	44c4      	add	ip, r8
   17188:	4463      	add	r3, ip
   1718a:	781b      	ldrb	r3, [r3, #0]
   1718c:	2b00      	cmp	r3, #0
   1718e:	d101      	bne.n	17194 <processOnSMS+0x219c>
   17190:	f000 fbf1 	bl	17976 <processOnSMS+0x297e>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
   17194:	2390      	movs	r3, #144	; 0x90
   17196:	005b      	lsls	r3, r3, #1
   17198:	2220      	movs	r2, #32
   1719a:	4694      	mov	ip, r2
   1719c:	2208      	movs	r2, #8
   1719e:	4690      	mov	r8, r2
   171a0:	44b8      	add	r8, r7
   171a2:	44c4      	add	ip, r8
   171a4:	4463      	add	r3, ip
   171a6:	881a      	ldrh	r2, [r3, #0]
   171a8:	4960      	ldr	r1, [pc, #384]	; (1732c <processOnSMS+0x2334>)
   171aa:	230c      	movs	r3, #12
   171ac:	2020      	movs	r0, #32
   171ae:	4684      	mov	ip, r0
   171b0:	2008      	movs	r0, #8
   171b2:	4680      	mov	r8, r0
   171b4:	44b8      	add	r8, r7
   171b6:	44c4      	add	ip, r8
   171b8:	4463      	add	r3, ip
   171ba:	0018      	movs	r0, r3
   171bc:	4b56      	ldr	r3, [pc, #344]	; (17318 <processOnSMS+0x2320>)
   171be:	4798      	blx	r3
   171c0:	f000 fbd9 	bl	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
   171c4:	4a5a      	ldr	r2, [pc, #360]	; (17330 <processOnSMS+0x2338>)
   171c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171c8:	0011      	movs	r1, r2
   171ca:	0018      	movs	r0, r3
   171cc:	4b4c      	ldr	r3, [pc, #304]	; (17300 <processOnSMS+0x2308>)
   171ce:	4798      	blx	r3
   171d0:	1e03      	subs	r3, r0, #0
   171d2:	d100      	bne.n	171d6 <processOnSMS+0x21de>
   171d4:	e0b2      	b.n	1733c <processOnSMS+0x2344>
	{
		memmove(received_command,received_command+8,strlen(received_command));
   171d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171d8:	3308      	adds	r3, #8
   171da:	001c      	movs	r4, r3
   171dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171de:	0018      	movs	r0, r3
   171e0:	4b48      	ldr	r3, [pc, #288]	; (17304 <processOnSMS+0x230c>)
   171e2:	4798      	blx	r3
   171e4:	0002      	movs	r2, r0
   171e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171e8:	0021      	movs	r1, r4
   171ea:	0018      	movs	r0, r3
   171ec:	4b46      	ldr	r3, [pc, #280]	; (17308 <processOnSMS+0x2310>)
   171ee:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
   171f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   171f2:	0018      	movs	r0, r3
   171f4:	4b45      	ldr	r3, [pc, #276]	; (1730c <processOnSMS+0x2314>)
   171f6:	4798      	blx	r3
   171f8:	0002      	movs	r2, r0
   171fa:	238f      	movs	r3, #143	; 0x8f
   171fc:	005b      	lsls	r3, r3, #1
   171fe:	2120      	movs	r1, #32
   17200:	468c      	mov	ip, r1
   17202:	2108      	movs	r1, #8
   17204:	4688      	mov	r8, r1
   17206:	44b8      	add	r8, r7
   17208:	44c4      	add	ip, r8
   1720a:	4463      	add	r3, ip
   1720c:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
   1720e:	238f      	movs	r3, #143	; 0x8f
   17210:	005b      	lsls	r3, r3, #1
   17212:	2220      	movs	r2, #32
   17214:	4694      	mov	ip, r2
   17216:	2208      	movs	r2, #8
   17218:	4690      	mov	r8, r2
   1721a:	44b8      	add	r8, r7
   1721c:	44c4      	add	ip, r8
   1721e:	4463      	add	r3, ip
   17220:	881b      	ldrh	r3, [r3, #0]
   17222:	2b31      	cmp	r3, #49	; 0x31
   17224:	d80a      	bhi.n	1723c <processOnSMS+0x2244>
		{
			AUTOTIME = 50;
   17226:	238f      	movs	r3, #143	; 0x8f
   17228:	005b      	lsls	r3, r3, #1
   1722a:	2220      	movs	r2, #32
   1722c:	4694      	mov	ip, r2
   1722e:	2208      	movs	r2, #8
   17230:	4690      	mov	r8, r2
   17232:	44b8      	add	r8, r7
   17234:	44c4      	add	ip, r8
   17236:	4463      	add	r3, ip
   17238:	2232      	movs	r2, #50	; 0x32
   1723a:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
   1723c:	238f      	movs	r3, #143	; 0x8f
   1723e:	005b      	lsls	r3, r3, #1
   17240:	2220      	movs	r2, #32
   17242:	4694      	mov	ip, r2
   17244:	2208      	movs	r2, #8
   17246:	4690      	mov	r8, r2
   17248:	44b8      	add	r8, r7
   1724a:	44c4      	add	ip, r8
   1724c:	4463      	add	r3, ip
   1724e:	881a      	ldrh	r2, [r3, #0]
   17250:	23e1      	movs	r3, #225	; 0xe1
   17252:	01db      	lsls	r3, r3, #7
   17254:	429a      	cmp	r2, r3
   17256:	d90b      	bls.n	17270 <processOnSMS+0x2278>
		{
			AUTOTIME = 28800;
   17258:	238f      	movs	r3, #143	; 0x8f
   1725a:	005b      	lsls	r3, r3, #1
   1725c:	2220      	movs	r2, #32
   1725e:	4694      	mov	ip, r2
   17260:	2208      	movs	r2, #8
   17262:	4690      	mov	r8, r2
   17264:	44b8      	add	r8, r7
   17266:	44c4      	add	ip, r8
   17268:	4463      	add	r3, ip
   1726a:	22e1      	movs	r2, #225	; 0xe1
   1726c:	01d2      	lsls	r2, r2, #7
   1726e:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
   17270:	238f      	movs	r3, #143	; 0x8f
   17272:	005b      	lsls	r3, r3, #1
   17274:	2220      	movs	r2, #32
   17276:	4694      	mov	ip, r2
   17278:	2208      	movs	r2, #8
   1727a:	4690      	mov	r8, r2
   1727c:	44b8      	add	r8, r7
   1727e:	44c4      	add	ip, r8
   17280:	4463      	add	r3, ip
   17282:	881b      	ldrh	r3, [r3, #0]
   17284:	0018      	movs	r0, r3
   17286:	4b2b      	ldr	r3, [pc, #172]	; (17334 <processOnSMS+0x233c>)
   17288:	4798      	blx	r3
		incomingSMSProcessed=true;
   1728a:	2330      	movs	r3, #48	; 0x30
   1728c:	33ff      	adds	r3, #255	; 0xff
   1728e:	2220      	movs	r2, #32
   17290:	4694      	mov	ip, r2
   17292:	2208      	movs	r2, #8
   17294:	4690      	mov	r8, r2
   17296:	44b8      	add	r8, r7
   17298:	44c4      	add	ip, r8
   1729a:	4463      	add	r3, ip
   1729c:	2201      	movs	r2, #1
   1729e:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
   172a0:	4b14      	ldr	r3, [pc, #80]	; (172f4 <processOnSMS+0x22fc>)
   172a2:	2298      	movs	r2, #152	; 0x98
   172a4:	0052      	lsls	r2, r2, #1
   172a6:	4694      	mov	ip, r2
   172a8:	2220      	movs	r2, #32
   172aa:	4690      	mov	r8, r2
   172ac:	2208      	movs	r2, #8
   172ae:	4691      	mov	r9, r2
   172b0:	44b9      	add	r9, r7
   172b2:	44c8      	add	r8, r9
   172b4:	44c4      	add	ip, r8
   172b6:	4463      	add	r3, ip
   172b8:	781b      	ldrb	r3, [r3, #0]
   172ba:	2b00      	cmp	r3, #0
   172bc:	d100      	bne.n	172c0 <processOnSMS+0x22c8>
   172be:	e35a      	b.n	17976 <processOnSMS+0x297e>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
   172c0:	238f      	movs	r3, #143	; 0x8f
   172c2:	005b      	lsls	r3, r3, #1
   172c4:	2220      	movs	r2, #32
   172c6:	4694      	mov	ip, r2
   172c8:	2208      	movs	r2, #8
   172ca:	4690      	mov	r8, r2
   172cc:	44b8      	add	r8, r7
   172ce:	44c4      	add	ip, r8
   172d0:	4463      	add	r3, ip
   172d2:	881a      	ldrh	r2, [r3, #0]
   172d4:	4918      	ldr	r1, [pc, #96]	; (17338 <processOnSMS+0x2340>)
   172d6:	230c      	movs	r3, #12
   172d8:	2020      	movs	r0, #32
   172da:	4684      	mov	ip, r0
   172dc:	2008      	movs	r0, #8
   172de:	4680      	mov	r8, r0
   172e0:	44b8      	add	r8, r7
   172e2:	44c4      	add	ip, r8
   172e4:	4463      	add	r3, ip
   172e6:	0018      	movs	r0, r3
   172e8:	4b0b      	ldr	r3, [pc, #44]	; (17318 <processOnSMS+0x2320>)
   172ea:	4798      	blx	r3
   172ec:	e343      	b.n	17976 <processOnSMS+0x297e>
   172ee:	46c0      	nop			; (mov r8, r8)
   172f0:	000113d9 	.word	0x000113d9
   172f4:	fffffed2 	.word	0xfffffed2
   172f8:	0002ad94 	.word	0x0002ad94
   172fc:	0002ada8 	.word	0x0002ada8
   17300:	0001420d 	.word	0x0001420d
   17304:	000298e7 	.word	0x000298e7
   17308:	00029633 	.word	0x00029633
   1730c:	0002953d 	.word	0x0002953d
   17310:	00011a2d 	.word	0x00011a2d
   17314:	0002adb0 	.word	0x0002adb0
   17318:	0002985d 	.word	0x0002985d
   1731c:	0002adc8 	.word	0x0002adc8
   17320:	0000fde8 	.word	0x0000fde8
   17324:	fffffde8 	.word	0xfffffde8
   17328:	000119e1 	.word	0x000119e1
   1732c:	0002add4 	.word	0x0002add4
   17330:	0002adec 	.word	0x0002adec
   17334:	000112f5 	.word	0x000112f5
   17338:	0002adf8 	.word	0x0002adf8
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
   1733c:	4a95      	ldr	r2, [pc, #596]	; (17594 <processOnSMS+0x259c>)
   1733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17340:	0011      	movs	r1, r2
   17342:	0018      	movs	r0, r3
   17344:	4b94      	ldr	r3, [pc, #592]	; (17598 <processOnSMS+0x25a0>)
   17346:	4798      	blx	r3
   17348:	1e03      	subs	r3, r0, #0
   1734a:	d000      	beq.n	1734e <processOnSMS+0x2356>
   1734c:	e313      	b.n	17976 <processOnSMS+0x297e>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
   1734e:	4a93      	ldr	r2, [pc, #588]	; (1759c <processOnSMS+0x25a4>)
   17350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17352:	0011      	movs	r1, r2
   17354:	0018      	movs	r0, r3
   17356:	4b90      	ldr	r3, [pc, #576]	; (17598 <processOnSMS+0x25a0>)
   17358:	4798      	blx	r3
   1735a:	1e03      	subs	r3, r0, #0
   1735c:	d029      	beq.n	173b2 <processOnSMS+0x23ba>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   1735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17360:	1cdc      	adds	r4, r3, #3
   17362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17364:	0018      	movs	r0, r3
   17366:	4b8e      	ldr	r3, [pc, #568]	; (175a0 <processOnSMS+0x25a8>)
   17368:	4798      	blx	r3
   1736a:	0002      	movs	r2, r0
   1736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1736e:	0021      	movs	r1, r4
   17370:	0018      	movs	r0, r3
   17372:	4b8c      	ldr	r3, [pc, #560]	; (175a4 <processOnSMS+0x25ac>)
   17374:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
   17376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17378:	0018      	movs	r0, r3
   1737a:	4b8b      	ldr	r3, [pc, #556]	; (175a8 <processOnSMS+0x25b0>)
   1737c:	4798      	blx	r3
   1737e:	1e03      	subs	r3, r0, #0
   17380:	d100      	bne.n	17384 <processOnSMS+0x238c>
   17382:	e2f8      	b.n	17976 <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   17384:	2330      	movs	r3, #48	; 0x30
   17386:	33ff      	adds	r3, #255	; 0xff
   17388:	2220      	movs	r2, #32
   1738a:	4694      	mov	ip, r2
   1738c:	2208      	movs	r2, #8
   1738e:	4690      	mov	r8, r2
   17390:	44b8      	add	r8, r7
   17392:	44c4      	add	ip, r8
   17394:	4463      	add	r3, ip
   17396:	2201      	movs	r2, #1
   17398:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
   1739a:	230c      	movs	r3, #12
   1739c:	2220      	movs	r2, #32
   1739e:	4694      	mov	ip, r2
   173a0:	2208      	movs	r2, #8
   173a2:	4690      	mov	r8, r2
   173a4:	44b8      	add	r8, r7
   173a6:	44c4      	add	ip, r8
   173a8:	4463      	add	r3, ip
   173aa:	4a80      	ldr	r2, [pc, #512]	; (175ac <processOnSMS+0x25b4>)
   173ac:	ca13      	ldmia	r2!, {r0, r1, r4}
   173ae:	c313      	stmia	r3!, {r0, r1, r4}
   173b0:	e2e1      	b.n	17976 <processOnSMS+0x297e>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
   173b2:	4a7f      	ldr	r2, [pc, #508]	; (175b0 <processOnSMS+0x25b8>)
   173b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   173b6:	0011      	movs	r1, r2
   173b8:	0018      	movs	r0, r3
   173ba:	4b77      	ldr	r3, [pc, #476]	; (17598 <processOnSMS+0x25a0>)
   173bc:	4798      	blx	r3
   173be:	1e03      	subs	r3, r0, #0
   173c0:	d029      	beq.n	17416 <processOnSMS+0x241e>
	{
		memmove(received_command,received_command+3,strlen(received_command));
   173c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   173c4:	1cdc      	adds	r4, r3, #3
   173c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   173c8:	0018      	movs	r0, r3
   173ca:	4b75      	ldr	r3, [pc, #468]	; (175a0 <processOnSMS+0x25a8>)
   173cc:	4798      	blx	r3
   173ce:	0002      	movs	r2, r0
   173d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   173d2:	0021      	movs	r1, r4
   173d4:	0018      	movs	r0, r3
   173d6:	4b73      	ldr	r3, [pc, #460]	; (175a4 <processOnSMS+0x25ac>)
   173d8:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
   173da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   173dc:	0018      	movs	r0, r3
   173de:	4b75      	ldr	r3, [pc, #468]	; (175b4 <processOnSMS+0x25bc>)
   173e0:	4798      	blx	r3
   173e2:	1e03      	subs	r3, r0, #0
   173e4:	d100      	bne.n	173e8 <processOnSMS+0x23f0>
   173e6:	e2c6      	b.n	17976 <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   173e8:	2330      	movs	r3, #48	; 0x30
   173ea:	33ff      	adds	r3, #255	; 0xff
   173ec:	2220      	movs	r2, #32
   173ee:	4694      	mov	ip, r2
   173f0:	2208      	movs	r2, #8
   173f2:	4690      	mov	r8, r2
   173f4:	44b8      	add	r8, r7
   173f6:	44c4      	add	ip, r8
   173f8:	4463      	add	r3, ip
   173fa:	2201      	movs	r2, #1
   173fc:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
   173fe:	230c      	movs	r3, #12
   17400:	2220      	movs	r2, #32
   17402:	4694      	mov	ip, r2
   17404:	2208      	movs	r2, #8
   17406:	4690      	mov	r8, r2
   17408:	44b8      	add	r8, r7
   1740a:	44c4      	add	ip, r8
   1740c:	4463      	add	r3, ip
   1740e:	4a6a      	ldr	r2, [pc, #424]	; (175b8 <processOnSMS+0x25c0>)
   17410:	ca13      	ldmia	r2!, {r0, r1, r4}
   17412:	c313      	stmia	r3!, {r0, r1, r4}
   17414:	e2af      	b.n	17976 <processOnSMS+0x297e>
		}
	}
	else if (StringstartsWith(received_command,"M+"))
   17416:	4a69      	ldr	r2, [pc, #420]	; (175bc <processOnSMS+0x25c4>)
   17418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1741a:	0011      	movs	r1, r2
   1741c:	0018      	movs	r0, r3
   1741e:	4b5e      	ldr	r3, [pc, #376]	; (17598 <processOnSMS+0x25a0>)
   17420:	4798      	blx	r3
   17422:	1e03      	subs	r3, r0, #0
   17424:	d100      	bne.n	17428 <processOnSMS+0x2430>
   17426:	e0d9      	b.n	175dc <processOnSMS+0x25e4>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   17428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1742a:	1c9c      	adds	r4, r3, #2
   1742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1742e:	0018      	movs	r0, r3
   17430:	4b5b      	ldr	r3, [pc, #364]	; (175a0 <processOnSMS+0x25a8>)
   17432:	4798      	blx	r3
   17434:	0002      	movs	r2, r0
   17436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17438:	0021      	movs	r1, r4
   1743a:	0018      	movs	r0, r3
   1743c:	4b59      	ldr	r3, [pc, #356]	; (175a4 <processOnSMS+0x25ac>)
   1743e:	4798      	blx	r3
		bool result = addNumber(received_command);
   17440:	230c      	movs	r3, #12
   17442:	33ff      	adds	r3, #255	; 0xff
   17444:	2220      	movs	r2, #32
   17446:	2108      	movs	r1, #8
   17448:	468c      	mov	ip, r1
   1744a:	44bc      	add	ip, r7
   1744c:	4462      	add	r2, ip
   1744e:	18d4      	adds	r4, r2, r3
   17450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17452:	0018      	movs	r0, r3
   17454:	4b5a      	ldr	r3, [pc, #360]	; (175c0 <processOnSMS+0x25c8>)
   17456:	4798      	blx	r3
   17458:	0003      	movs	r3, r0
   1745a:	7023      	strb	r3, [r4, #0]
		if(result)
   1745c:	230c      	movs	r3, #12
   1745e:	33ff      	adds	r3, #255	; 0xff
   17460:	2220      	movs	r2, #32
   17462:	4694      	mov	ip, r2
   17464:	2208      	movs	r2, #8
   17466:	4690      	mov	r8, r2
   17468:	44b8      	add	r8, r7
   1746a:	44c4      	add	ip, r8
   1746c:	4463      	add	r3, ip
   1746e:	781b      	ldrb	r3, [r3, #0]
   17470:	2b00      	cmp	r3, #0
   17472:	d100      	bne.n	17476 <processOnSMS+0x247e>
   17474:	e27f      	b.n	17976 <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   17476:	2330      	movs	r3, #48	; 0x30
   17478:	33ff      	adds	r3, #255	; 0xff
   1747a:	2220      	movs	r2, #32
   1747c:	4694      	mov	ip, r2
   1747e:	2208      	movs	r2, #8
   17480:	4690      	mov	r8, r2
   17482:	44b8      	add	r8, r7
   17484:	44c4      	add	ip, r8
   17486:	4463      	add	r3, ip
   17488:	2201      	movs	r2, #1
   1748a:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
   1748c:	4b4d      	ldr	r3, [pc, #308]	; (175c4 <processOnSMS+0x25cc>)
   1748e:	2298      	movs	r2, #152	; 0x98
   17490:	0052      	lsls	r2, r2, #1
   17492:	4694      	mov	ip, r2
   17494:	2220      	movs	r2, #32
   17496:	4690      	mov	r8, r2
   17498:	2208      	movs	r2, #8
   1749a:	4691      	mov	r9, r2
   1749c:	44b9      	add	r9, r7
   1749e:	44c8      	add	r8, r9
   174a0:	44c4      	add	ip, r8
   174a2:	4463      	add	r3, ip
   174a4:	781b      	ldrb	r3, [r3, #0]
   174a6:	2b00      	cmp	r3, #0
   174a8:	d100      	bne.n	174ac <processOnSMS+0x24b4>
   174aa:	e264      	b.n	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"MOBILE NO:");
   174ac:	230c      	movs	r3, #12
   174ae:	2220      	movs	r2, #32
   174b0:	4694      	mov	ip, r2
   174b2:	2208      	movs	r2, #8
   174b4:	4690      	mov	r8, r2
   174b6:	44b8      	add	r8, r7
   174b8:	44c4      	add	ip, r8
   174ba:	4463      	add	r3, ip
   174bc:	4a42      	ldr	r2, [pc, #264]	; (175c8 <processOnSMS+0x25d0>)
   174be:	ca03      	ldmia	r2!, {r0, r1}
   174c0:	c303      	stmia	r3!, {r0, r1}
   174c2:	8811      	ldrh	r1, [r2, #0]
   174c4:	8019      	strh	r1, [r3, #0]
   174c6:	7892      	ldrb	r2, [r2, #2]
   174c8:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   174ca:	230c      	movs	r3, #12
   174cc:	2220      	movs	r2, #32
   174ce:	4694      	mov	ip, r2
   174d0:	2208      	movs	r2, #8
   174d2:	4690      	mov	r8, r2
   174d4:	44b8      	add	r8, r7
   174d6:	44c4      	add	ip, r8
   174d8:	4463      	add	r3, ip
   174da:	0018      	movs	r0, r3
   174dc:	4b30      	ldr	r3, [pc, #192]	; (175a0 <processOnSMS+0x25a8>)
   174de:	4798      	blx	r3
   174e0:	0003      	movs	r3, r0
   174e2:	001a      	movs	r2, r3
   174e4:	230c      	movs	r3, #12
   174e6:	2120      	movs	r1, #32
   174e8:	468c      	mov	ip, r1
   174ea:	2108      	movs	r1, #8
   174ec:	4688      	mov	r8, r1
   174ee:	44b8      	add	r8, r7
   174f0:	44c4      	add	ip, r8
   174f2:	4463      	add	r3, ip
   174f4:	189a      	adds	r2, r3, r2
   174f6:	4b35      	ldr	r3, [pc, #212]	; (175cc <processOnSMS+0x25d4>)
   174f8:	0010      	movs	r0, r2
   174fa:	0019      	movs	r1, r3
   174fc:	2302      	movs	r3, #2
   174fe:	001a      	movs	r2, r3
   17500:	4b33      	ldr	r3, [pc, #204]	; (175d0 <processOnSMS+0x25d8>)
   17502:	4798      	blx	r3
				strcat(resep_msg,received_command);
   17504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17506:	230c      	movs	r3, #12
   17508:	2120      	movs	r1, #32
   1750a:	468c      	mov	ip, r1
   1750c:	2108      	movs	r1, #8
   1750e:	4688      	mov	r8, r1
   17510:	44b8      	add	r8, r7
   17512:	44c4      	add	ip, r8
   17514:	4463      	add	r3, ip
   17516:	0011      	movs	r1, r2
   17518:	0018      	movs	r0, r3
   1751a:	4b2e      	ldr	r3, [pc, #184]	; (175d4 <processOnSMS+0x25dc>)
   1751c:	4798      	blx	r3
				strcat(resep_msg,"\n");
   1751e:	230c      	movs	r3, #12
   17520:	2220      	movs	r2, #32
   17522:	4694      	mov	ip, r2
   17524:	2208      	movs	r2, #8
   17526:	4690      	mov	r8, r2
   17528:	44b8      	add	r8, r7
   1752a:	44c4      	add	ip, r8
   1752c:	4463      	add	r3, ip
   1752e:	0018      	movs	r0, r3
   17530:	4b1b      	ldr	r3, [pc, #108]	; (175a0 <processOnSMS+0x25a8>)
   17532:	4798      	blx	r3
   17534:	0003      	movs	r3, r0
   17536:	001a      	movs	r2, r3
   17538:	230c      	movs	r3, #12
   1753a:	2120      	movs	r1, #32
   1753c:	468c      	mov	ip, r1
   1753e:	2108      	movs	r1, #8
   17540:	4688      	mov	r8, r1
   17542:	44b8      	add	r8, r7
   17544:	44c4      	add	ip, r8
   17546:	4463      	add	r3, ip
   17548:	189a      	adds	r2, r3, r2
   1754a:	4b20      	ldr	r3, [pc, #128]	; (175cc <processOnSMS+0x25d4>)
   1754c:	0010      	movs	r0, r2
   1754e:	0019      	movs	r1, r3
   17550:	2302      	movs	r3, #2
   17552:	001a      	movs	r2, r3
   17554:	4b1e      	ldr	r3, [pc, #120]	; (175d0 <processOnSMS+0x25d8>)
   17556:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
   17558:	230c      	movs	r3, #12
   1755a:	2220      	movs	r2, #32
   1755c:	4694      	mov	ip, r2
   1755e:	2208      	movs	r2, #8
   17560:	4690      	mov	r8, r2
   17562:	44b8      	add	r8, r7
   17564:	44c4      	add	ip, r8
   17566:	4463      	add	r3, ip
   17568:	0018      	movs	r0, r3
   1756a:	4b0d      	ldr	r3, [pc, #52]	; (175a0 <processOnSMS+0x25a8>)
   1756c:	4798      	blx	r3
   1756e:	0003      	movs	r3, r0
   17570:	001a      	movs	r2, r3
   17572:	230c      	movs	r3, #12
   17574:	2120      	movs	r1, #32
   17576:	468c      	mov	ip, r1
   17578:	2108      	movs	r1, #8
   1757a:	4688      	mov	r8, r1
   1757c:	44b8      	add	r8, r7
   1757e:	44c4      	add	ip, r8
   17580:	4463      	add	r3, ip
   17582:	189a      	adds	r2, r3, r2
   17584:	4b14      	ldr	r3, [pc, #80]	; (175d8 <processOnSMS+0x25e0>)
   17586:	0010      	movs	r0, r2
   17588:	0019      	movs	r1, r3
   1758a:	2313      	movs	r3, #19
   1758c:	001a      	movs	r2, r3
   1758e:	4b10      	ldr	r3, [pc, #64]	; (175d0 <processOnSMS+0x25d8>)
   17590:	4798      	blx	r3
   17592:	e1f0      	b.n	17976 <processOnSMS+0x297e>
   17594:	0002ae10 	.word	0x0002ae10
   17598:	0001420d 	.word	0x0001420d
   1759c:	0002ae14 	.word	0x0002ae14
   175a0:	000298e7 	.word	0x000298e7
   175a4:	00029633 	.word	0x00029633
   175a8:	00011bad 	.word	0x00011bad
   175ac:	0002ae18 	.word	0x0002ae18
   175b0:	0002ae24 	.word	0x0002ae24
   175b4:	00011c59 	.word	0x00011c59
   175b8:	0002ae28 	.word	0x0002ae28
   175bc:	0002ae34 	.word	0x0002ae34
   175c0:	00010ef1 	.word	0x00010ef1
   175c4:	fffffed2 	.word	0xfffffed2
   175c8:	0002ae38 	.word	0x0002ae38
   175cc:	0002ae44 	.word	0x0002ae44
   175d0:	00029621 	.word	0x00029621
   175d4:	000298a1 	.word	0x000298a1
   175d8:	0002ae48 	.word	0x0002ae48
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
   175dc:	4ad0      	ldr	r2, [pc, #832]	; (17920 <processOnSMS+0x2928>)
   175de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   175e0:	0011      	movs	r1, r2
   175e2:	0018      	movs	r0, r3
   175e4:	4bcf      	ldr	r3, [pc, #828]	; (17924 <processOnSMS+0x292c>)
   175e6:	4798      	blx	r3
   175e8:	1e03      	subs	r3, r0, #0
   175ea:	d100      	bne.n	175ee <processOnSMS+0x25f6>
   175ec:	e0b5      	b.n	1775a <processOnSMS+0x2762>
	{
		memmove(received_command,received_command+2,strlen(received_command));
   175ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   175f0:	1c9c      	adds	r4, r3, #2
   175f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   175f4:	0018      	movs	r0, r3
   175f6:	4bcc      	ldr	r3, [pc, #816]	; (17928 <processOnSMS+0x2930>)
   175f8:	4798      	blx	r3
   175fa:	0002      	movs	r2, r0
   175fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   175fe:	0021      	movs	r1, r4
   17600:	0018      	movs	r0, r3
   17602:	4bca      	ldr	r3, [pc, #808]	; (1792c <processOnSMS+0x2934>)
   17604:	4798      	blx	r3
		bool result = removeNumber(received_command);
   17606:	2385      	movs	r3, #133	; 0x85
   17608:	005b      	lsls	r3, r3, #1
   1760a:	2220      	movs	r2, #32
   1760c:	2108      	movs	r1, #8
   1760e:	468c      	mov	ip, r1
   17610:	44bc      	add	ip, r7
   17612:	4462      	add	r2, ip
   17614:	18d4      	adds	r4, r2, r3
   17616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17618:	0018      	movs	r0, r3
   1761a:	4bc5      	ldr	r3, [pc, #788]	; (17930 <processOnSMS+0x2938>)
   1761c:	4798      	blx	r3
   1761e:	0003      	movs	r3, r0
   17620:	7023      	strb	r3, [r4, #0]
		if(result)
   17622:	2385      	movs	r3, #133	; 0x85
   17624:	005b      	lsls	r3, r3, #1
   17626:	2220      	movs	r2, #32
   17628:	4694      	mov	ip, r2
   1762a:	2208      	movs	r2, #8
   1762c:	4690      	mov	r8, r2
   1762e:	44b8      	add	r8, r7
   17630:	44c4      	add	ip, r8
   17632:	4463      	add	r3, ip
   17634:	781b      	ldrb	r3, [r3, #0]
   17636:	2b00      	cmp	r3, #0
   17638:	d100      	bne.n	1763c <processOnSMS+0x2644>
   1763a:	e19c      	b.n	17976 <processOnSMS+0x297e>
		{
			incomingSMSProcessed=true;
   1763c:	2330      	movs	r3, #48	; 0x30
   1763e:	33ff      	adds	r3, #255	; 0xff
   17640:	2220      	movs	r2, #32
   17642:	4694      	mov	ip, r2
   17644:	2208      	movs	r2, #8
   17646:	4690      	mov	r8, r2
   17648:	44b8      	add	r8, r7
   1764a:	44c4      	add	ip, r8
   1764c:	4463      	add	r3, ip
   1764e:	2201      	movs	r2, #1
   17650:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
   17652:	4bb8      	ldr	r3, [pc, #736]	; (17934 <processOnSMS+0x293c>)
   17654:	2298      	movs	r2, #152	; 0x98
   17656:	0052      	lsls	r2, r2, #1
   17658:	4694      	mov	ip, r2
   1765a:	2220      	movs	r2, #32
   1765c:	4690      	mov	r8, r2
   1765e:	2208      	movs	r2, #8
   17660:	4691      	mov	r9, r2
   17662:	44b9      	add	r9, r7
   17664:	44c8      	add	r8, r9
   17666:	44c4      	add	ip, r8
   17668:	4463      	add	r3, ip
   1766a:	781b      	ldrb	r3, [r3, #0]
   1766c:	2b00      	cmp	r3, #0
   1766e:	d100      	bne.n	17672 <processOnSMS+0x267a>
   17670:	e181      	b.n	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"MOBILE NO:");
   17672:	230c      	movs	r3, #12
   17674:	2220      	movs	r2, #32
   17676:	4694      	mov	ip, r2
   17678:	2208      	movs	r2, #8
   1767a:	4690      	mov	r8, r2
   1767c:	44b8      	add	r8, r7
   1767e:	44c4      	add	ip, r8
   17680:	4463      	add	r3, ip
   17682:	4aad      	ldr	r2, [pc, #692]	; (17938 <processOnSMS+0x2940>)
   17684:	ca03      	ldmia	r2!, {r0, r1}
   17686:	c303      	stmia	r3!, {r0, r1}
   17688:	8811      	ldrh	r1, [r2, #0]
   1768a:	8019      	strh	r1, [r3, #0]
   1768c:	7892      	ldrb	r2, [r2, #2]
   1768e:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
   17690:	230c      	movs	r3, #12
   17692:	2220      	movs	r2, #32
   17694:	4694      	mov	ip, r2
   17696:	2208      	movs	r2, #8
   17698:	4690      	mov	r8, r2
   1769a:	44b8      	add	r8, r7
   1769c:	44c4      	add	ip, r8
   1769e:	4463      	add	r3, ip
   176a0:	0018      	movs	r0, r3
   176a2:	4ba1      	ldr	r3, [pc, #644]	; (17928 <processOnSMS+0x2930>)
   176a4:	4798      	blx	r3
   176a6:	0003      	movs	r3, r0
   176a8:	001a      	movs	r2, r3
   176aa:	230c      	movs	r3, #12
   176ac:	2120      	movs	r1, #32
   176ae:	468c      	mov	ip, r1
   176b0:	2108      	movs	r1, #8
   176b2:	4688      	mov	r8, r1
   176b4:	44b8      	add	r8, r7
   176b6:	44c4      	add	ip, r8
   176b8:	4463      	add	r3, ip
   176ba:	189a      	adds	r2, r3, r2
   176bc:	4b9f      	ldr	r3, [pc, #636]	; (1793c <processOnSMS+0x2944>)
   176be:	0010      	movs	r0, r2
   176c0:	0019      	movs	r1, r3
   176c2:	2302      	movs	r3, #2
   176c4:	001a      	movs	r2, r3
   176c6:	4b9e      	ldr	r3, [pc, #632]	; (17940 <processOnSMS+0x2948>)
   176c8:	4798      	blx	r3
				strcat(resep_msg,received_command);
   176ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   176cc:	230c      	movs	r3, #12
   176ce:	2120      	movs	r1, #32
   176d0:	468c      	mov	ip, r1
   176d2:	2108      	movs	r1, #8
   176d4:	4688      	mov	r8, r1
   176d6:	44b8      	add	r8, r7
   176d8:	44c4      	add	ip, r8
   176da:	4463      	add	r3, ip
   176dc:	0011      	movs	r1, r2
   176de:	0018      	movs	r0, r3
   176e0:	4b98      	ldr	r3, [pc, #608]	; (17944 <processOnSMS+0x294c>)
   176e2:	4798      	blx	r3
				strcat(resep_msg,"\n");
   176e4:	230c      	movs	r3, #12
   176e6:	2220      	movs	r2, #32
   176e8:	4694      	mov	ip, r2
   176ea:	2208      	movs	r2, #8
   176ec:	4690      	mov	r8, r2
   176ee:	44b8      	add	r8, r7
   176f0:	44c4      	add	ip, r8
   176f2:	4463      	add	r3, ip
   176f4:	0018      	movs	r0, r3
   176f6:	4b8c      	ldr	r3, [pc, #560]	; (17928 <processOnSMS+0x2930>)
   176f8:	4798      	blx	r3
   176fa:	0003      	movs	r3, r0
   176fc:	001a      	movs	r2, r3
   176fe:	230c      	movs	r3, #12
   17700:	2120      	movs	r1, #32
   17702:	468c      	mov	ip, r1
   17704:	2108      	movs	r1, #8
   17706:	4688      	mov	r8, r1
   17708:	44b8      	add	r8, r7
   1770a:	44c4      	add	ip, r8
   1770c:	4463      	add	r3, ip
   1770e:	189a      	adds	r2, r3, r2
   17710:	4b8a      	ldr	r3, [pc, #552]	; (1793c <processOnSMS+0x2944>)
   17712:	0010      	movs	r0, r2
   17714:	0019      	movs	r1, r3
   17716:	2302      	movs	r3, #2
   17718:	001a      	movs	r2, r3
   1771a:	4b89      	ldr	r3, [pc, #548]	; (17940 <processOnSMS+0x2948>)
   1771c:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
   1771e:	230c      	movs	r3, #12
   17720:	2220      	movs	r2, #32
   17722:	4694      	mov	ip, r2
   17724:	2208      	movs	r2, #8
   17726:	4690      	mov	r8, r2
   17728:	44b8      	add	r8, r7
   1772a:	44c4      	add	ip, r8
   1772c:	4463      	add	r3, ip
   1772e:	0018      	movs	r0, r3
   17730:	4b7d      	ldr	r3, [pc, #500]	; (17928 <processOnSMS+0x2930>)
   17732:	4798      	blx	r3
   17734:	0003      	movs	r3, r0
   17736:	001a      	movs	r2, r3
   17738:	230c      	movs	r3, #12
   1773a:	2120      	movs	r1, #32
   1773c:	468c      	mov	ip, r1
   1773e:	2108      	movs	r1, #8
   17740:	4688      	mov	r8, r1
   17742:	44b8      	add	r8, r7
   17744:	44c4      	add	ip, r8
   17746:	4463      	add	r3, ip
   17748:	189a      	adds	r2, r3, r2
   1774a:	4b7f      	ldr	r3, [pc, #508]	; (17948 <processOnSMS+0x2950>)
   1774c:	0010      	movs	r0, r2
   1774e:	0019      	movs	r1, r3
   17750:	2315      	movs	r3, #21
   17752:	001a      	movs	r2, r3
   17754:	4b7a      	ldr	r3, [pc, #488]	; (17940 <processOnSMS+0x2948>)
   17756:	4798      	blx	r3
   17758:	e10d      	b.n	17976 <processOnSMS+0x297e>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
   1775a:	4a7c      	ldr	r2, [pc, #496]	; (1794c <processOnSMS+0x2954>)
   1775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1775e:	0011      	movs	r1, r2
   17760:	0018      	movs	r0, r3
   17762:	4b70      	ldr	r3, [pc, #448]	; (17924 <processOnSMS+0x292c>)
   17764:	4798      	blx	r3
   17766:	1e03      	subs	r3, r0, #0
   17768:	d053      	beq.n	17812 <processOnSMS+0x281a>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   1776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1776c:	1cdc      	adds	r4, r3, #3
   1776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17770:	0018      	movs	r0, r3
   17772:	4b6d      	ldr	r3, [pc, #436]	; (17928 <processOnSMS+0x2930>)
   17774:	4798      	blx	r3
   17776:	0002      	movs	r2, r0
   17778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1777a:	0021      	movs	r1, r4
   1777c:	0018      	movs	r0, r3
   1777e:	4b6b      	ldr	r3, [pc, #428]	; (1792c <processOnSMS+0x2934>)
   17780:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
   17782:	230a      	movs	r3, #10
   17784:	33ff      	adds	r3, #255	; 0xff
   17786:	2220      	movs	r2, #32
   17788:	2108      	movs	r1, #8
   1778a:	468c      	mov	ip, r1
   1778c:	44bc      	add	ip, r7
   1778e:	4462      	add	r2, ip
   17790:	18d4      	adds	r4, r2, r3
   17792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17794:	0018      	movs	r0, r3
   17796:	4b6e      	ldr	r3, [pc, #440]	; (17950 <processOnSMS+0x2958>)
   17798:	4798      	blx	r3
   1779a:	0003      	movs	r3, r0
   1779c:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
   1779e:	2330      	movs	r3, #48	; 0x30
   177a0:	33ff      	adds	r3, #255	; 0xff
   177a2:	2220      	movs	r2, #32
   177a4:	4694      	mov	ip, r2
   177a6:	2208      	movs	r2, #8
   177a8:	4690      	mov	r8, r2
   177aa:	44b8      	add	r8, r7
   177ac:	44c4      	add	ip, r8
   177ae:	4463      	add	r3, ip
   177b0:	2201      	movs	r2, #1
   177b2:	701a      	strb	r2, [r3, #0]
			if(result)
   177b4:	230a      	movs	r3, #10
   177b6:	33ff      	adds	r3, #255	; 0xff
   177b8:	2220      	movs	r2, #32
   177ba:	4694      	mov	ip, r2
   177bc:	2208      	movs	r2, #8
   177be:	4690      	mov	r8, r2
   177c0:	44b8      	add	r8, r7
   177c2:	44c4      	add	ip, r8
   177c4:	4463      	add	r3, ip
   177c6:	781b      	ldrb	r3, [r3, #0]
   177c8:	2b00      	cmp	r3, #0
   177ca:	d100      	bne.n	177ce <processOnSMS+0x27d6>
   177cc:	e0d3      	b.n	17976 <processOnSMS+0x297e>
			{
				if (response_sms_processed_cmd == true)
   177ce:	4b59      	ldr	r3, [pc, #356]	; (17934 <processOnSMS+0x293c>)
   177d0:	2298      	movs	r2, #152	; 0x98
   177d2:	0052      	lsls	r2, r2, #1
   177d4:	4694      	mov	ip, r2
   177d6:	2220      	movs	r2, #32
   177d8:	4690      	mov	r8, r2
   177da:	2208      	movs	r2, #8
   177dc:	4691      	mov	r9, r2
   177de:	44b9      	add	r9, r7
   177e0:	44c8      	add	r8, r9
   177e2:	44c4      	add	ip, r8
   177e4:	4463      	add	r3, ip
   177e6:	781b      	ldrb	r3, [r3, #0]
   177e8:	2b00      	cmp	r3, #0
   177ea:	d100      	bne.n	177ee <processOnSMS+0x27f6>
   177ec:	e0c3      	b.n	17976 <processOnSMS+0x297e>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE ADD SUCCESS");
   177ee:	230c      	movs	r3, #12
   177f0:	2220      	movs	r2, #32
   177f2:	4694      	mov	ip, r2
   177f4:	2208      	movs	r2, #8
   177f6:	4690      	mov	r8, r2
   177f8:	44b8      	add	r8, r7
   177fa:	44c4      	add	ip, r8
   177fc:	4463      	add	r3, ip
   177fe:	4a55      	ldr	r2, [pc, #340]	; (17954 <processOnSMS+0x295c>)
   17800:	ca13      	ldmia	r2!, {r0, r1, r4}
   17802:	c313      	stmia	r3!, {r0, r1, r4}
   17804:	ca13      	ldmia	r2!, {r0, r1, r4}
   17806:	c313      	stmia	r3!, {r0, r1, r4}
   17808:	6811      	ldr	r1, [r2, #0]
   1780a:	6019      	str	r1, [r3, #0]
   1780c:	7912      	ldrb	r2, [r2, #4]
   1780e:	711a      	strb	r2, [r3, #4]
   17810:	e0b1      	b.n	17976 <processOnSMS+0x297e>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
   17812:	4a51      	ldr	r2, [pc, #324]	; (17958 <processOnSMS+0x2960>)
   17814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17816:	0011      	movs	r1, r2
   17818:	0018      	movs	r0, r3
   1781a:	4b42      	ldr	r3, [pc, #264]	; (17924 <processOnSMS+0x292c>)
   1781c:	4798      	blx	r3
   1781e:	1e03      	subs	r3, r0, #0
   17820:	d038      	beq.n	17894 <processOnSMS+0x289c>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
   17822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17824:	1cdc      	adds	r4, r3, #3
   17826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17828:	0018      	movs	r0, r3
   1782a:	4b3f      	ldr	r3, [pc, #252]	; (17928 <processOnSMS+0x2930>)
   1782c:	4798      	blx	r3
   1782e:	0002      	movs	r2, r0
   17830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17832:	0021      	movs	r1, r4
   17834:	0018      	movs	r0, r3
   17836:	4b3d      	ldr	r3, [pc, #244]	; (1792c <processOnSMS+0x2934>)
   17838:	4798      	blx	r3
			addM2MNumber(received_command);
   1783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1783c:	0018      	movs	r0, r3
   1783e:	4b47      	ldr	r3, [pc, #284]	; (1795c <processOnSMS+0x2964>)
   17840:	4798      	blx	r3
			incomingSMSProcessed=true;
   17842:	2330      	movs	r3, #48	; 0x30
   17844:	33ff      	adds	r3, #255	; 0xff
   17846:	2220      	movs	r2, #32
   17848:	4694      	mov	ip, r2
   1784a:	2208      	movs	r2, #8
   1784c:	4690      	mov	r8, r2
   1784e:	44b8      	add	r8, r7
   17850:	44c4      	add	ip, r8
   17852:	4463      	add	r3, ip
   17854:	2201      	movs	r2, #1
   17856:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
   17858:	4b36      	ldr	r3, [pc, #216]	; (17934 <processOnSMS+0x293c>)
   1785a:	2298      	movs	r2, #152	; 0x98
   1785c:	0052      	lsls	r2, r2, #1
   1785e:	4694      	mov	ip, r2
   17860:	2220      	movs	r2, #32
   17862:	4690      	mov	r8, r2
   17864:	2208      	movs	r2, #8
   17866:	4691      	mov	r9, r2
   17868:	44b9      	add	r9, r7
   1786a:	44c8      	add	r8, r9
   1786c:	44c4      	add	ip, r8
   1786e:	4463      	add	r3, ip
   17870:	781b      	ldrb	r3, [r3, #0]
   17872:	2b00      	cmp	r3, #0
   17874:	d100      	bne.n	17878 <processOnSMS+0x2880>
   17876:	e07e      	b.n	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
   17878:	230c      	movs	r3, #12
   1787a:	2220      	movs	r2, #32
   1787c:	4694      	mov	ip, r2
   1787e:	2208      	movs	r2, #8
   17880:	4690      	mov	r8, r2
   17882:	44b8      	add	r8, r7
   17884:	44c4      	add	ip, r8
   17886:	4463      	add	r3, ip
   17888:	4a35      	ldr	r2, [pc, #212]	; (17960 <processOnSMS+0x2968>)
   1788a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1788c:	c313      	stmia	r3!, {r0, r1, r4}
   1788e:	8812      	ldrh	r2, [r2, #0]
   17890:	801a      	strh	r2, [r3, #0]
   17892:	e070      	b.n	17976 <processOnSMS+0x297e>
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
   17894:	4a33      	ldr	r2, [pc, #204]	; (17964 <processOnSMS+0x296c>)
   17896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17898:	0011      	movs	r1, r2
   1789a:	0018      	movs	r0, r3
   1789c:	4b21      	ldr	r3, [pc, #132]	; (17924 <processOnSMS+0x292c>)
   1789e:	4798      	blx	r3
   178a0:	1e03      	subs	r3, r0, #0
   178a2:	d068      	beq.n	17976 <processOnSMS+0x297e>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
   178a4:	4b30      	ldr	r3, [pc, #192]	; (17968 <processOnSMS+0x2970>)
   178a6:	78db      	ldrb	r3, [r3, #3]
   178a8:	2b00      	cmp	r3, #0
   178aa:	d064      	beq.n	17976 <processOnSMS+0x297e>
		{
			memmove(received_command,received_command+3,strlen(received_command));
   178ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   178ae:	1cdc      	adds	r4, r3, #3
   178b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   178b2:	0018      	movs	r0, r3
   178b4:	4b1c      	ldr	r3, [pc, #112]	; (17928 <processOnSMS+0x2930>)
   178b6:	4798      	blx	r3
   178b8:	0002      	movs	r2, r0
   178ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   178bc:	0021      	movs	r1, r4
   178be:	0018      	movs	r0, r3
   178c0:	4b1a      	ldr	r3, [pc, #104]	; (1792c <processOnSMS+0x2934>)
   178c2:	4798      	blx	r3
			incomingSMSProcessed=true;
   178c4:	2330      	movs	r3, #48	; 0x30
   178c6:	33ff      	adds	r3, #255	; 0xff
   178c8:	2220      	movs	r2, #32
   178ca:	4694      	mov	ip, r2
   178cc:	2208      	movs	r2, #8
   178ce:	4690      	mov	r8, r2
   178d0:	44b8      	add	r8, r7
   178d2:	44c4      	add	ip, r8
   178d4:	4463      	add	r3, ip
   178d6:	2201      	movs	r2, #1
   178d8:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
   178da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   178dc:	0018      	movs	r0, r3
   178de:	4b23      	ldr	r3, [pc, #140]	; (1796c <processOnSMS+0x2974>)
   178e0:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
   178e2:	4b14      	ldr	r3, [pc, #80]	; (17934 <processOnSMS+0x293c>)
   178e4:	2298      	movs	r2, #152	; 0x98
   178e6:	0052      	lsls	r2, r2, #1
   178e8:	4694      	mov	ip, r2
   178ea:	2220      	movs	r2, #32
   178ec:	4690      	mov	r8, r2
   178ee:	2208      	movs	r2, #8
   178f0:	4691      	mov	r9, r2
   178f2:	44b9      	add	r9, r7
   178f4:	44c8      	add	r8, r9
   178f6:	44c4      	add	ip, r8
   178f8:	4463      	add	r3, ip
   178fa:	781b      	ldrb	r3, [r3, #0]
   178fc:	2b00      	cmp	r3, #0
   178fe:	d03a      	beq.n	17976 <processOnSMS+0x297e>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
   17900:	230c      	movs	r3, #12
   17902:	2220      	movs	r2, #32
   17904:	4694      	mov	ip, r2
   17906:	2208      	movs	r2, #8
   17908:	4690      	mov	r8, r2
   1790a:	44b8      	add	r8, r7
   1790c:	44c4      	add	ip, r8
   1790e:	4463      	add	r3, ip
   17910:	4a17      	ldr	r2, [pc, #92]	; (17970 <processOnSMS+0x2978>)
   17912:	ca13      	ldmia	r2!, {r0, r1, r4}
   17914:	c313      	stmia	r3!, {r0, r1, r4}
   17916:	ca03      	ldmia	r2!, {r0, r1}
   17918:	c303      	stmia	r3!, {r0, r1}
   1791a:	7812      	ldrb	r2, [r2, #0]
   1791c:	701a      	strb	r2, [r3, #0]
   1791e:	e02a      	b.n	17976 <processOnSMS+0x297e>
   17920:	0002ae5c 	.word	0x0002ae5c
   17924:	0001420d 	.word	0x0001420d
   17928:	000298e7 	.word	0x000298e7
   1792c:	00029633 	.word	0x00029633
   17930:	00010fed 	.word	0x00010fed
   17934:	fffffed2 	.word	0xfffffed2
   17938:	0002ae38 	.word	0x0002ae38
   1793c:	0002ae44 	.word	0x0002ae44
   17940:	00029621 	.word	0x00029621
   17944:	000298a1 	.word	0x000298a1
   17948:	0002ae60 	.word	0x0002ae60
   1794c:	0002ae78 	.word	0x0002ae78
   17950:	00011239 	.word	0x00011239
   17954:	0002ae7c 	.word	0x0002ae7c
   17958:	0002ae9c 	.word	0x0002ae9c
   1795c:	00010c49 	.word	0x00010c49
   17960:	0002aea0 	.word	0x0002aea0
   17964:	0002aeb0 	.word	0x0002aeb0
   17968:	2000082c 	.word	0x2000082c
   1796c:	00010cb1 	.word	0x00010cb1
   17970:	0002aeb4 	.word	0x0002aeb4
		if (alternateNumber_struct.alterNumberPresent)
   17974:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
   17976:	4b37      	ldr	r3, [pc, #220]	; (17a54 <processOnSMS+0x2a5c>)
   17978:	2298      	movs	r2, #152	; 0x98
   1797a:	0052      	lsls	r2, r2, #1
   1797c:	4694      	mov	ip, r2
   1797e:	2220      	movs	r2, #32
   17980:	4690      	mov	r8, r2
   17982:	2208      	movs	r2, #8
   17984:	4691      	mov	r9, r2
   17986:	44b9      	add	r9, r7
   17988:	44c8      	add	r8, r9
   1798a:	44c4      	add	ip, r8
   1798c:	4463      	add	r3, ip
   1798e:	781b      	ldrb	r3, [r3, #0]
   17990:	2b00      	cmp	r3, #0
   17992:	d057      	beq.n	17a44 <processOnSMS+0x2a4c>
	{
		if(!incomingSMSProcessed)
   17994:	2330      	movs	r3, #48	; 0x30
   17996:	33ff      	adds	r3, #255	; 0xff
   17998:	2220      	movs	r2, #32
   1799a:	4694      	mov	ip, r2
   1799c:	2208      	movs	r2, #8
   1799e:	4690      	mov	r8, r2
   179a0:	44b8      	add	r8, r7
   179a2:	44c4      	add	ip, r8
   179a4:	4463      	add	r3, ip
   179a6:	781b      	ldrb	r3, [r3, #0]
   179a8:	2201      	movs	r2, #1
   179aa:	4053      	eors	r3, r2
   179ac:	b2db      	uxtb	r3, r3
   179ae:	2b00      	cmp	r3, #0
   179b0:	d022      	beq.n	179f8 <processOnSMS+0x2a00>
		{
			strcpy(resep_msg, "ERROR : ");
   179b2:	230c      	movs	r3, #12
   179b4:	2220      	movs	r2, #32
   179b6:	4694      	mov	ip, r2
   179b8:	2208      	movs	r2, #8
   179ba:	4690      	mov	r8, r2
   179bc:	44b8      	add	r8, r7
   179be:	44c4      	add	ip, r8
   179c0:	4463      	add	r3, ip
   179c2:	4a25      	ldr	r2, [pc, #148]	; (17a58 <processOnSMS+0x2a60>)
   179c4:	ca03      	ldmia	r2!, {r0, r1}
   179c6:	c303      	stmia	r3!, {r0, r1}
   179c8:	7812      	ldrb	r2, [r2, #0]
   179ca:	701a      	strb	r2, [r3, #0]
			strcat(resep_msg, copy_received_command);
   179cc:	238c      	movs	r3, #140	; 0x8c
   179ce:	005b      	lsls	r3, r3, #1
   179d0:	2220      	movs	r2, #32
   179d2:	4694      	mov	ip, r2
   179d4:	2208      	movs	r2, #8
   179d6:	4690      	mov	r8, r2
   179d8:	44b8      	add	r8, r7
   179da:	44c4      	add	ip, r8
   179dc:	4463      	add	r3, ip
   179de:	681a      	ldr	r2, [r3, #0]
   179e0:	230c      	movs	r3, #12
   179e2:	2120      	movs	r1, #32
   179e4:	468c      	mov	ip, r1
   179e6:	2108      	movs	r1, #8
   179e8:	4688      	mov	r8, r1
   179ea:	44b8      	add	r8, r7
   179ec:	44c4      	add	ip, r8
   179ee:	4463      	add	r3, ip
   179f0:	0011      	movs	r1, r2
   179f2:	0018      	movs	r0, r3
   179f4:	4b19      	ldr	r3, [pc, #100]	; (17a5c <processOnSMS+0x2a64>)
   179f6:	4798      	blx	r3
			//sprintf(resep_msg,"ERROR : %s",*copy_received_command);
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   179f8:	23ac      	movs	r3, #172	; 0xac
   179fa:	005b      	lsls	r3, r3, #1
   179fc:	2220      	movs	r2, #32
   179fe:	4694      	mov	ip, r2
   17a00:	2208      	movs	r2, #8
   17a02:	4690      	mov	r8, r2
   17a04:	44b8      	add	r8, r7
   17a06:	44c4      	add	ip, r8
   17a08:	4463      	add	r3, ip
   17a0a:	681b      	ldr	r3, [r3, #0]
   17a0c:	2200      	movs	r2, #0
   17a0e:	0019      	movs	r1, r3
   17a10:	2005      	movs	r0, #5
   17a12:	4b13      	ldr	r3, [pc, #76]	; (17a60 <processOnSMS+0x2a68>)
   17a14:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
   17a16:	230c      	movs	r3, #12
   17a18:	2220      	movs	r2, #32
   17a1a:	2108      	movs	r1, #8
   17a1c:	468c      	mov	ip, r1
   17a1e:	44bc      	add	ip, r7
   17a20:	4462      	add	r2, ip
   17a22:	18d2      	adds	r2, r2, r3
   17a24:	23ac      	movs	r3, #172	; 0xac
   17a26:	005b      	lsls	r3, r3, #1
   17a28:	2120      	movs	r1, #32
   17a2a:	468c      	mov	ip, r1
   17a2c:	2108      	movs	r1, #8
   17a2e:	4688      	mov	r8, r1
   17a30:	44b8      	add	r8, r7
   17a32:	44c4      	add	ip, r8
   17a34:	4463      	add	r3, ip
   17a36:	681b      	ldr	r3, [r3, #0]
   17a38:	0011      	movs	r1, r2
   17a3a:	0018      	movs	r0, r3
   17a3c:	4b09      	ldr	r3, [pc, #36]	; (17a64 <processOnSMS+0x2a6c>)
   17a3e:	4798      	blx	r3
   17a40:	e000      	b.n	17a44 <processOnSMS+0x2a4c>
		return;
   17a42:	46c0      	nop			; (mov r8, r8)
	}
}
   17a44:	46bd      	mov	sp, r7
   17a46:	b057      	add	sp, #348	; 0x15c
   17a48:	bc3c      	pop	{r2, r3, r4, r5}
   17a4a:	4690      	mov	r8, r2
   17a4c:	4699      	mov	r9, r3
   17a4e:	46a2      	mov	sl, r4
   17a50:	46ab      	mov	fp, r5
   17a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17a54:	fffffed2 	.word	0xfffffed2
   17a58:	0002aecc 	.word	0x0002aecc
   17a5c:	000298a1 	.word	0x000298a1
   17a60:	0001da2d 	.word	0x0001da2d
   17a64:	00012b9d 	.word	0x00012b9d

00017a68 <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
   17a68:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a6a:	46c6      	mov	lr, r8
   17a6c:	b500      	push	{lr}
   17a6e:	b092      	sub	sp, #72	; 0x48
   17a70:	af08      	add	r7, sp, #32
   17a72:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
   17a74:	2327      	movs	r3, #39	; 0x27
   17a76:	18fc      	adds	r4, r7, r3
   17a78:	4b37      	ldr	r3, [pc, #220]	; (17b58 <buildStatusMessage+0xf0>)
   17a7a:	4798      	blx	r3
   17a7c:	0003      	movs	r3, r0
   17a7e:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
   17a80:	4b36      	ldr	r3, [pc, #216]	; (17b5c <buildStatusMessage+0xf4>)
   17a82:	785b      	ldrb	r3, [r3, #1]
   17a84:	b2db      	uxtb	r3, r3
   17a86:	2b02      	cmp	r3, #2
   17a88:	d009      	beq.n	17a9e <buildStatusMessage+0x36>
   17a8a:	2b03      	cmp	r3, #3
   17a8c:	d10d      	bne.n	17aaa <buildStatusMessage+0x42>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
   17a8e:	231c      	movs	r3, #28
   17a90:	18fb      	adds	r3, r7, r3
   17a92:	4a33      	ldr	r2, [pc, #204]	; (17b60 <buildStatusMessage+0xf8>)
   17a94:	8811      	ldrh	r1, [r2, #0]
   17a96:	8019      	strh	r1, [r3, #0]
   17a98:	7892      	ldrb	r2, [r2, #2]
   17a9a:	709a      	strb	r2, [r3, #2]
		break;
   17a9c:	e00a      	b.n	17ab4 <buildStatusMessage+0x4c>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
   17a9e:	231c      	movs	r3, #28
   17aa0:	18fb      	adds	r3, r7, r3
   17aa2:	4a30      	ldr	r2, [pc, #192]	; (17b64 <buildStatusMessage+0xfc>)
   17aa4:	ca03      	ldmia	r2!, {r0, r1}
   17aa6:	c303      	stmia	r3!, {r0, r1}
		break;
   17aa8:	e004      	b.n	17ab4 <buildStatusMessage+0x4c>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
   17aaa:	231c      	movs	r3, #28
   17aac:	18fb      	adds	r3, r7, r3
   17aae:	4a2e      	ldr	r2, [pc, #184]	; (17b68 <buildStatusMessage+0x100>)
   17ab0:	601a      	str	r2, [r3, #0]
		break;
   17ab2:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   17ab4:	4b29      	ldr	r3, [pc, #164]	; (17b5c <buildStatusMessage+0xf4>)
   17ab6:	781b      	ldrb	r3, [r3, #0]
   17ab8:	b2db      	uxtb	r3, r3
   17aba:	2b02      	cmp	r3, #2
   17abc:	d107      	bne.n	17ace <buildStatusMessage+0x66>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
   17abe:	2314      	movs	r3, #20
   17ac0:	18fb      	adds	r3, r7, r3
   17ac2:	4a2a      	ldr	r2, [pc, #168]	; (17b6c <buildStatusMessage+0x104>)
   17ac4:	8811      	ldrh	r1, [r2, #0]
   17ac6:	8019      	strh	r1, [r3, #0]
   17ac8:	7892      	ldrb	r2, [r2, #2]
   17aca:	709a      	strb	r2, [r3, #2]
   17acc:	e006      	b.n	17adc <buildStatusMessage+0x74>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
   17ace:	2314      	movs	r3, #20
   17ad0:	18fb      	adds	r3, r7, r3
   17ad2:	4a27      	ldr	r2, [pc, #156]	; (17b70 <buildStatusMessage+0x108>)
   17ad4:	6811      	ldr	r1, [r2, #0]
   17ad6:	6019      	str	r1, [r3, #0]
   17ad8:	8892      	ldrh	r2, [r2, #4]
   17ada:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
   17adc:	4b25      	ldr	r3, [pc, #148]	; (17b74 <buildStatusMessage+0x10c>)
   17ade:	4798      	blx	r3
   17ae0:	1e03      	subs	r3, r0, #0
   17ae2:	d007      	beq.n	17af4 <buildStatusMessage+0x8c>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
   17ae4:	230c      	movs	r3, #12
   17ae6:	18fb      	adds	r3, r7, r3
   17ae8:	4a1d      	ldr	r2, [pc, #116]	; (17b60 <buildStatusMessage+0xf8>)
   17aea:	8811      	ldrh	r1, [r2, #0]
   17aec:	8019      	strh	r1, [r3, #0]
   17aee:	7892      	ldrb	r2, [r2, #2]
   17af0:	709a      	strb	r2, [r3, #2]
   17af2:	e003      	b.n	17afc <buildStatusMessage+0x94>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
   17af4:	230c      	movs	r3, #12
   17af6:	18fb      	adds	r3, r7, r3
   17af8:	4a1b      	ldr	r2, [pc, #108]	; (17b68 <buildStatusMessage+0x100>)
   17afa:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d\nBattery: %d%%",
   17afc:	4b1e      	ldr	r3, [pc, #120]	; (17b78 <buildStatusMessage+0x110>)
   17afe:	681c      	ldr	r4, [r3, #0]
   17b00:	4b1d      	ldr	r3, [pc, #116]	; (17b78 <buildStatusMessage+0x110>)
   17b02:	685d      	ldr	r5, [r3, #4]
   17b04:	4b1c      	ldr	r3, [pc, #112]	; (17b78 <buildStatusMessage+0x110>)
   17b06:	689b      	ldr	r3, [r3, #8]
   17b08:	4698      	mov	r8, r3
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network, Analog_Parameter_Struct.Battery_percentage);
   17b0a:	4a1b      	ldr	r2, [pc, #108]	; (17b78 <buildStatusMessage+0x110>)
   17b0c:	8a92      	ldrh	r2, [r2, #20]
   17b0e:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d\nBattery: %d%%",
   17b10:	0016      	movs	r6, r2
   17b12:	2227      	movs	r2, #39	; 0x27
   17b14:	18ba      	adds	r2, r7, r2
   17b16:	7812      	ldrb	r2, [r2, #0]
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network, Analog_Parameter_Struct.Battery_percentage);
   17b18:	4917      	ldr	r1, [pc, #92]	; (17b78 <buildStatusMessage+0x110>)
   17b1a:	7f09      	ldrb	r1, [r1, #28]
   17b1c:	b2c9      	uxtb	r1, r1
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d\nBattery: %d%%",
   17b1e:	468c      	mov	ip, r1
   17b20:	4916      	ldr	r1, [pc, #88]	; (17b7c <buildStatusMessage+0x114>)
   17b22:	6878      	ldr	r0, [r7, #4]
   17b24:	4663      	mov	r3, ip
   17b26:	9306      	str	r3, [sp, #24]
   17b28:	9205      	str	r2, [sp, #20]
   17b2a:	9604      	str	r6, [sp, #16]
   17b2c:	230c      	movs	r3, #12
   17b2e:	18fa      	adds	r2, r7, r3
   17b30:	9203      	str	r2, [sp, #12]
   17b32:	2314      	movs	r3, #20
   17b34:	18fa      	adds	r2, r7, r3
   17b36:	9202      	str	r2, [sp, #8]
   17b38:	231c      	movs	r3, #28
   17b3a:	18fa      	adds	r2, r7, r3
   17b3c:	9201      	str	r2, [sp, #4]
   17b3e:	4643      	mov	r3, r8
   17b40:	9300      	str	r3, [sp, #0]
   17b42:	002b      	movs	r3, r5
   17b44:	0022      	movs	r2, r4
   17b46:	4c0e      	ldr	r4, [pc, #56]	; (17b80 <buildStatusMessage+0x118>)
   17b48:	47a0      	blx	r4
}
   17b4a:	46c0      	nop			; (mov r8, r8)
   17b4c:	46bd      	mov	sp, r7
   17b4e:	b00a      	add	sp, #40	; 0x28
   17b50:	bc04      	pop	{r2}
   17b52:	4690      	mov	r8, r2
   17b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17b56:	46c0      	nop			; (mov r8, r8)
   17b58:	000128ed 	.word	0x000128ed
   17b5c:	20000948 	.word	0x20000948
   17b60:	0002aed8 	.word	0x0002aed8
   17b64:	0002aedc 	.word	0x0002aedc
   17b68:	0046464f 	.word	0x0046464f
   17b6c:	0002aee4 	.word	0x0002aee4
   17b70:	0002aee8 	.word	0x0002aee8
   17b74:	0001bb0d 	.word	0x0001bb0d
   17b78:	200008e8 	.word	0x200008e8
   17b7c:	0002aef0 	.word	0x0002aef0
   17b80:	0002985d 	.word	0x0002985d

00017b84 <checkNumber>:


bool checkNumber(char *number)
{
   17b84:	b580      	push	{r7, lr}
   17b86:	b082      	sub	sp, #8
   17b88:	af00      	add	r7, sp, #0
   17b8a:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
   17b8c:	687b      	ldr	r3, [r7, #4]
   17b8e:	0018      	movs	r0, r3
   17b90:	4b0a      	ldr	r3, [pc, #40]	; (17bbc <checkNumber+0x38>)
   17b92:	4798      	blx	r3
   17b94:	1e03      	subs	r3, r0, #0
   17b96:	d109      	bne.n	17bac <checkNumber+0x28>
   17b98:	687b      	ldr	r3, [r7, #4]
   17b9a:	0018      	movs	r0, r3
   17b9c:	4b08      	ldr	r3, [pc, #32]	; (17bc0 <checkNumber+0x3c>)
   17b9e:	4798      	blx	r3
   17ba0:	0003      	movs	r3, r0
   17ba2:	001a      	movs	r2, r3
   17ba4:	4b07      	ldr	r3, [pc, #28]	; (17bc4 <checkNumber+0x40>)
   17ba6:	785b      	ldrb	r3, [r3, #1]
   17ba8:	429a      	cmp	r2, r3
   17baa:	d201      	bcs.n	17bb0 <checkNumber+0x2c>
	{
		return true;
   17bac:	2301      	movs	r3, #1
   17bae:	e000      	b.n	17bb2 <checkNumber+0x2e>
	}
	else
	{
		return false;
   17bb0:	2300      	movs	r3, #0
	}
}
   17bb2:	0018      	movs	r0, r3
   17bb4:	46bd      	mov	sp, r7
   17bb6:	b002      	add	sp, #8
   17bb8:	bd80      	pop	{r7, pc}
   17bba:	46c0      	nop			; (mov r8, r8)
   17bbc:	00011a79 	.word	0x00011a79
   17bc0:	00010ded 	.word	0x00010ded
   17bc4:	20000814 	.word	0x20000814

00017bc8 <checkNoCallTime>:

bool checkNoCallTime(void)
{
   17bc8:	b580      	push	{r7, lr}
   17bca:	b082      	sub	sp, #8
   17bcc:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
   17bce:	1dba      	adds	r2, r7, #6
   17bd0:	1dfb      	adds	r3, r7, #7
   17bd2:	0011      	movs	r1, r2
   17bd4:	0018      	movs	r0, r3
   17bd6:	4b31      	ldr	r3, [pc, #196]	; (17c9c <checkNoCallTime+0xd4>)
   17bd8:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
   17bda:	4b31      	ldr	r3, [pc, #196]	; (17ca0 <checkNoCallTime+0xd8>)
   17bdc:	7a9b      	ldrb	r3, [r3, #10]
   17bde:	b2da      	uxtb	r2, r3
   17be0:	1dfb      	adds	r3, r7, #7
   17be2:	781b      	ldrb	r3, [r3, #0]
   17be4:	429a      	cmp	r2, r3
   17be6:	d854      	bhi.n	17c92 <checkNoCallTime+0xca>
   17be8:	4b2d      	ldr	r3, [pc, #180]	; (17ca0 <checkNoCallTime+0xd8>)
   17bea:	7b1b      	ldrb	r3, [r3, #12]
   17bec:	b2da      	uxtb	r2, r3
   17bee:	1dfb      	adds	r3, r7, #7
   17bf0:	781b      	ldrb	r3, [r3, #0]
   17bf2:	429a      	cmp	r2, r3
   17bf4:	d34d      	bcc.n	17c92 <checkNoCallTime+0xca>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
   17bf6:	4b2a      	ldr	r3, [pc, #168]	; (17ca0 <checkNoCallTime+0xd8>)
   17bf8:	7a9b      	ldrb	r3, [r3, #10]
   17bfa:	b2da      	uxtb	r2, r3
   17bfc:	4b28      	ldr	r3, [pc, #160]	; (17ca0 <checkNoCallTime+0xd8>)
   17bfe:	7b1b      	ldrb	r3, [r3, #12]
   17c00:	b2db      	uxtb	r3, r3
   17c02:	429a      	cmp	r2, r3
   17c04:	d111      	bne.n	17c2a <checkNoCallTime+0x62>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   17c06:	4b26      	ldr	r3, [pc, #152]	; (17ca0 <checkNoCallTime+0xd8>)
   17c08:	7adb      	ldrb	r3, [r3, #11]
   17c0a:	b2da      	uxtb	r2, r3
   17c0c:	1dbb      	adds	r3, r7, #6
   17c0e:	781b      	ldrb	r3, [r3, #0]
   17c10:	429a      	cmp	r2, r3
   17c12:	d808      	bhi.n	17c26 <checkNoCallTime+0x5e>
   17c14:	4b22      	ldr	r3, [pc, #136]	; (17ca0 <checkNoCallTime+0xd8>)
   17c16:	7b5b      	ldrb	r3, [r3, #13]
   17c18:	b2da      	uxtb	r2, r3
   17c1a:	1dbb      	adds	r3, r7, #6
   17c1c:	781b      	ldrb	r3, [r3, #0]
   17c1e:	429a      	cmp	r2, r3
   17c20:	d301      	bcc.n	17c26 <checkNoCallTime+0x5e>
			return true;
   17c22:	2301      	movs	r3, #1
   17c24:	e036      	b.n	17c94 <checkNoCallTime+0xcc>
			else
			return false;
   17c26:	2300      	movs	r3, #0
   17c28:	e034      	b.n	17c94 <checkNoCallTime+0xcc>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
   17c2a:	4b1d      	ldr	r3, [pc, #116]	; (17ca0 <checkNoCallTime+0xd8>)
   17c2c:	7a9b      	ldrb	r3, [r3, #10]
   17c2e:	b2da      	uxtb	r2, r3
   17c30:	1dfb      	adds	r3, r7, #7
   17c32:	781b      	ldrb	r3, [r3, #0]
   17c34:	429a      	cmp	r2, r3
   17c36:	d10a      	bne.n	17c4e <checkNoCallTime+0x86>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
   17c38:	4b19      	ldr	r3, [pc, #100]	; (17ca0 <checkNoCallTime+0xd8>)
   17c3a:	7adb      	ldrb	r3, [r3, #11]
   17c3c:	b2da      	uxtb	r2, r3
   17c3e:	1dbb      	adds	r3, r7, #6
   17c40:	781b      	ldrb	r3, [r3, #0]
   17c42:	429a      	cmp	r2, r3
   17c44:	d801      	bhi.n	17c4a <checkNoCallTime+0x82>
			return true;
   17c46:	2301      	movs	r3, #1
   17c48:	e024      	b.n	17c94 <checkNoCallTime+0xcc>
			else
			return false;
   17c4a:	2300      	movs	r3, #0
   17c4c:	e022      	b.n	17c94 <checkNoCallTime+0xcc>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
   17c4e:	4b14      	ldr	r3, [pc, #80]	; (17ca0 <checkNoCallTime+0xd8>)
   17c50:	7b1b      	ldrb	r3, [r3, #12]
   17c52:	b2da      	uxtb	r2, r3
   17c54:	1dfb      	adds	r3, r7, #7
   17c56:	781b      	ldrb	r3, [r3, #0]
   17c58:	429a      	cmp	r2, r3
   17c5a:	d10a      	bne.n	17c72 <checkNoCallTime+0xaa>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
   17c5c:	4b10      	ldr	r3, [pc, #64]	; (17ca0 <checkNoCallTime+0xd8>)
   17c5e:	7b5b      	ldrb	r3, [r3, #13]
   17c60:	b2da      	uxtb	r2, r3
   17c62:	1dbb      	adds	r3, r7, #6
   17c64:	781b      	ldrb	r3, [r3, #0]
   17c66:	429a      	cmp	r2, r3
   17c68:	d301      	bcc.n	17c6e <checkNoCallTime+0xa6>
			return true;
   17c6a:	2301      	movs	r3, #1
   17c6c:	e012      	b.n	17c94 <checkNoCallTime+0xcc>
			else
			return false;
   17c6e:	2300      	movs	r3, #0
   17c70:	e010      	b.n	17c94 <checkNoCallTime+0xcc>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
   17c72:	4b0b      	ldr	r3, [pc, #44]	; (17ca0 <checkNoCallTime+0xd8>)
   17c74:	7a9b      	ldrb	r3, [r3, #10]
   17c76:	b2da      	uxtb	r2, r3
   17c78:	1dfb      	adds	r3, r7, #7
   17c7a:	781b      	ldrb	r3, [r3, #0]
   17c7c:	429a      	cmp	r2, r3
   17c7e:	d208      	bcs.n	17c92 <checkNoCallTime+0xca>
   17c80:	4b07      	ldr	r3, [pc, #28]	; (17ca0 <checkNoCallTime+0xd8>)
   17c82:	7b1b      	ldrb	r3, [r3, #12]
   17c84:	b2da      	uxtb	r2, r3
   17c86:	1dfb      	adds	r3, r7, #7
   17c88:	781b      	ldrb	r3, [r3, #0]
   17c8a:	429a      	cmp	r2, r3
   17c8c:	d901      	bls.n	17c92 <checkNoCallTime+0xca>
		return true;
   17c8e:	2301      	movs	r3, #1
   17c90:	e000      	b.n	17c94 <checkNoCallTime+0xcc>
	}
	return false;
   17c92:	2300      	movs	r3, #0
}
   17c94:	0018      	movs	r0, r3
   17c96:	46bd      	mov	sp, r7
   17c98:	b002      	add	sp, #8
   17c9a:	bd80      	pop	{r7, pc}
   17c9c:	00017edd 	.word	0x00017edd
   17ca0:	20000854 	.word	0x20000854

00017ca4 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
   17ca4:	b580      	push	{r7, lr}
   17ca6:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
   17ca8:	4b04      	ldr	r3, [pc, #16]	; (17cbc <verifyRemoteNumber+0x18>)
   17caa:	2201      	movs	r2, #1
   17cac:	2101      	movs	r1, #1
   17cae:	0018      	movs	r0, r3
   17cb0:	4b03      	ldr	r3, [pc, #12]	; (17cc0 <verifyRemoteNumber+0x1c>)
   17cb2:	4798      	blx	r3
}
   17cb4:	46c0      	nop			; (mov r8, r8)
   17cb6:	46bd      	mov	sp, r7
   17cb8:	bd80      	pop	{r7, pc}
   17cba:	46c0      	nop			; (mov r8, r8)
   17cbc:	0002af4c 	.word	0x0002af4c
   17cc0:	00017cc5 	.word	0x00017cc5

00017cc4 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
   17cc4:	b580      	push	{r7, lr}
   17cc6:	b08e      	sub	sp, #56	; 0x38
   17cc8:	af00      	add	r7, sp, #0
   17cca:	6078      	str	r0, [r7, #4]
   17ccc:	0008      	movs	r0, r1
   17cce:	0011      	movs	r1, r2
   17cd0:	1cfb      	adds	r3, r7, #3
   17cd2:	1c02      	adds	r2, r0, #0
   17cd4:	701a      	strb	r2, [r3, #0]
   17cd6:	1cbb      	adds	r3, r7, #2
   17cd8:	1c0a      	adds	r2, r1, #0
   17cda:	701a      	strb	r2, [r3, #0]
	inCall=true;
   17cdc:	4b55      	ldr	r3, [pc, #340]	; (17e34 <sendSMS+0x170>)
   17cde:	2201      	movs	r2, #1
   17ce0:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
   17ce2:	1cfb      	adds	r3, r7, #3
   17ce4:	781b      	ldrb	r3, [r3, #0]
   17ce6:	2201      	movs	r2, #1
   17ce8:	4053      	eors	r3, r2
   17cea:	b2db      	uxtb	r3, r3
   17cec:	2b00      	cmp	r3, #0
   17cee:	d048      	beq.n	17d82 <sendSMS+0xbe>
	{
		switch(actionType)
   17cf0:	4b51      	ldr	r3, [pc, #324]	; (17e38 <sendSMS+0x174>)
   17cf2:	781b      	ldrb	r3, [r3, #0]
   17cf4:	3b43      	subs	r3, #67	; 0x43
   17cf6:	2b12      	cmp	r3, #18
   17cf8:	d900      	bls.n	17cfc <sendSMS+0x38>
   17cfa:	e096      	b.n	17e2a <sendSMS+0x166>
   17cfc:	009a      	lsls	r2, r3, #2
   17cfe:	4b4f      	ldr	r3, [pc, #316]	; (17e3c <sendSMS+0x178>)
   17d00:	18d3      	adds	r3, r2, r3
   17d02:	681b      	ldr	r3, [r3, #0]
   17d04:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
   17d06:	687b      	ldr	r3, [r7, #4]
   17d08:	0018      	movs	r0, r3
   17d0a:	4b4d      	ldr	r3, [pc, #308]	; (17e40 <sendSMS+0x17c>)
   17d0c:	4798      	blx	r3
   17d0e:	0003      	movs	r3, r0
   17d10:	001a      	movs	r2, r3
   17d12:	687b      	ldr	r3, [r7, #4]
   17d14:	189a      	adds	r2, r3, r2
   17d16:	4b4b      	ldr	r3, [pc, #300]	; (17e44 <sendSMS+0x180>)
   17d18:	0010      	movs	r0, r2
   17d1a:	0019      	movs	r1, r3
   17d1c:	2307      	movs	r3, #7
   17d1e:	001a      	movs	r2, r3
   17d20:	4b49      	ldr	r3, [pc, #292]	; (17e48 <sendSMS+0x184>)
   17d22:	4798      	blx	r3
			strcat(msg,STR_ON);
   17d24:	687b      	ldr	r3, [r7, #4]
   17d26:	0018      	movs	r0, r3
   17d28:	4b45      	ldr	r3, [pc, #276]	; (17e40 <sendSMS+0x17c>)
   17d2a:	4798      	blx	r3
   17d2c:	0003      	movs	r3, r0
   17d2e:	001a      	movs	r2, r3
   17d30:	687b      	ldr	r3, [r7, #4]
   17d32:	189a      	adds	r2, r3, r2
   17d34:	4b45      	ldr	r3, [pc, #276]	; (17e4c <sendSMS+0x188>)
   17d36:	0010      	movs	r0, r2
   17d38:	0019      	movs	r1, r3
   17d3a:	2303      	movs	r3, #3
   17d3c:	001a      	movs	r2, r3
   17d3e:	4b42      	ldr	r3, [pc, #264]	; (17e48 <sendSMS+0x184>)
   17d40:	4798      	blx	r3
			break;
   17d42:	e01e      	b.n	17d82 <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
   17d44:	687b      	ldr	r3, [r7, #4]
   17d46:	0018      	movs	r0, r3
   17d48:	4b3d      	ldr	r3, [pc, #244]	; (17e40 <sendSMS+0x17c>)
   17d4a:	4798      	blx	r3
   17d4c:	0003      	movs	r3, r0
   17d4e:	001a      	movs	r2, r3
   17d50:	687b      	ldr	r3, [r7, #4]
   17d52:	189a      	adds	r2, r3, r2
   17d54:	4b3b      	ldr	r3, [pc, #236]	; (17e44 <sendSMS+0x180>)
   17d56:	0010      	movs	r0, r2
   17d58:	0019      	movs	r1, r3
   17d5a:	2307      	movs	r3, #7
   17d5c:	001a      	movs	r2, r3
   17d5e:	4b3a      	ldr	r3, [pc, #232]	; (17e48 <sendSMS+0x184>)
   17d60:	4798      	blx	r3
			strcat(msg,STR_OFF);
   17d62:	687b      	ldr	r3, [r7, #4]
   17d64:	0018      	movs	r0, r3
   17d66:	4b36      	ldr	r3, [pc, #216]	; (17e40 <sendSMS+0x17c>)
   17d68:	4798      	blx	r3
   17d6a:	0003      	movs	r3, r0
   17d6c:	001a      	movs	r2, r3
   17d6e:	687b      	ldr	r3, [r7, #4]
   17d70:	189a      	adds	r2, r3, r2
   17d72:	4b37      	ldr	r3, [pc, #220]	; (17e50 <sendSMS+0x18c>)
   17d74:	0010      	movs	r0, r2
   17d76:	0019      	movs	r1, r3
   17d78:	2304      	movs	r3, #4
   17d7a:	001a      	movs	r2, r3
   17d7c:	4b32      	ldr	r3, [pc, #200]	; (17e48 <sendSMS+0x184>)
   17d7e:	4798      	blx	r3
			break;
   17d80:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
   17d82:	1cbb      	adds	r3, r7, #2
   17d84:	781b      	ldrb	r3, [r3, #0]
   17d86:	2b02      	cmp	r3, #2
   17d88:	d105      	bne.n	17d96 <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
   17d8a:	2324      	movs	r3, #36	; 0x24
   17d8c:	18fb      	adds	r3, r7, r3
   17d8e:	0018      	movs	r0, r3
   17d90:	4b30      	ldr	r3, [pc, #192]	; (17e54 <sendSMS+0x190>)
   17d92:	4798      	blx	r3
   17d94:	e034      	b.n	17e00 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
   17d96:	1cbb      	adds	r3, r7, #2
   17d98:	781b      	ldrb	r3, [r3, #0]
   17d9a:	2b01      	cmp	r3, #1
   17d9c:	d109      	bne.n	17db2 <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   17d9e:	4b2e      	ldr	r3, [pc, #184]	; (17e58 <sendSMS+0x194>)
   17da0:	78db      	ldrb	r3, [r3, #3]
   17da2:	2b00      	cmp	r3, #0
   17da4:	d02c      	beq.n	17e00 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
   17da6:	2324      	movs	r3, #36	; 0x24
   17da8:	18fb      	adds	r3, r7, r3
   17daa:	0018      	movs	r0, r3
   17dac:	4b2b      	ldr	r3, [pc, #172]	; (17e5c <sendSMS+0x198>)
   17dae:	4798      	blx	r3
   17db0:	e026      	b.n	17e00 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
   17db2:	4b2b      	ldr	r3, [pc, #172]	; (17e60 <sendSMS+0x19c>)
   17db4:	781b      	ldrb	r3, [r3, #0]
   17db6:	2b00      	cmp	r3, #0
   17db8:	d01d      	beq.n	17df6 <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   17dba:	4b2a      	ldr	r3, [pc, #168]	; (17e64 <sendSMS+0x1a0>)
   17dbc:	223c      	movs	r2, #60	; 0x3c
   17dbe:	2100      	movs	r1, #0
   17dc0:	0018      	movs	r0, r3
   17dc2:	4b29      	ldr	r3, [pc, #164]	; (17e68 <sendSMS+0x1a4>)
   17dc4:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   17dc6:	4b27      	ldr	r3, [pc, #156]	; (17e64 <sendSMS+0x1a0>)
   17dc8:	0019      	movs	r1, r3
   17dca:	2003      	movs	r0, #3
   17dcc:	4b27      	ldr	r3, [pc, #156]	; (17e6c <sendSMS+0x1a8>)
   17dce:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   17dd0:	230c      	movs	r3, #12
   17dd2:	18fa      	adds	r2, r7, r3
   17dd4:	4b23      	ldr	r3, [pc, #140]	; (17e64 <sendSMS+0x1a0>)
   17dd6:	0010      	movs	r0, r2
   17dd8:	0019      	movs	r1, r3
   17dda:	2318      	movs	r3, #24
   17ddc:	001a      	movs	r2, r3
   17dde:	4b1a      	ldr	r3, [pc, #104]	; (17e48 <sendSMS+0x184>)
   17de0:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
   17de2:	230c      	movs	r3, #12
   17de4:	18fb      	adds	r3, r7, r3
   17de6:	1d1a      	adds	r2, r3, #4
   17de8:	2324      	movs	r3, #36	; 0x24
   17dea:	18fb      	adds	r3, r7, r3
   17dec:	0011      	movs	r1, r2
   17dee:	0018      	movs	r0, r3
   17df0:	4b1f      	ldr	r3, [pc, #124]	; (17e70 <sendSMS+0x1ac>)
   17df2:	4798      	blx	r3
   17df4:	e004      	b.n	17e00 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
   17df6:	2324      	movs	r3, #36	; 0x24
   17df8:	18fb      	adds	r3, r7, r3
   17dfa:	0018      	movs	r0, r3
   17dfc:	4b1d      	ldr	r3, [pc, #116]	; (17e74 <sendSMS+0x1b0>)
   17dfe:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   17e00:	2324      	movs	r3, #36	; 0x24
   17e02:	18fb      	adds	r3, r7, r3
   17e04:	2200      	movs	r2, #0
   17e06:	0019      	movs	r1, r3
   17e08:	2005      	movs	r0, #5
   17e0a:	4b1b      	ldr	r3, [pc, #108]	; (17e78 <sendSMS+0x1b4>)
   17e0c:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
   17e0e:	687a      	ldr	r2, [r7, #4]
   17e10:	2324      	movs	r3, #36	; 0x24
   17e12:	18fb      	adds	r3, r7, r3
   17e14:	0011      	movs	r1, r2
   17e16:	0018      	movs	r0, r3
   17e18:	4b18      	ldr	r3, [pc, #96]	; (17e7c <sendSMS+0x1b8>)
   17e1a:	4798      	blx	r3
	isMsgFromAdmin = false;
   17e1c:	4b10      	ldr	r3, [pc, #64]	; (17e60 <sendSMS+0x19c>)
   17e1e:	2200      	movs	r2, #0
   17e20:	701a      	strb	r2, [r3, #0]
	inCall=false;
   17e22:	4b04      	ldr	r3, [pc, #16]	; (17e34 <sendSMS+0x170>)
   17e24:	2200      	movs	r2, #0
   17e26:	701a      	strb	r2, [r3, #0]
   17e28:	e000      	b.n	17e2c <sendSMS+0x168>
			return;
   17e2a:	46c0      	nop			; (mov r8, r8)
}
   17e2c:	46bd      	mov	sp, r7
   17e2e:	b00e      	add	sp, #56	; 0x38
   17e30:	bd80      	pop	{r7, pc}
   17e32:	46c0      	nop			; (mov r8, r8)
   17e34:	2000099c 	.word	0x2000099c
   17e38:	20000963 	.word	0x20000963
   17e3c:	0002afd0 	.word	0x0002afd0
   17e40:	000298e7 	.word	0x000298e7
   17e44:	0002af54 	.word	0x0002af54
   17e48:	00029621 	.word	0x00029621
   17e4c:	0002aed8 	.word	0x0002aed8
   17e50:	0002af5c 	.word	0x0002af5c
   17e54:	00010acd 	.word	0x00010acd
   17e58:	2000082c 	.word	0x2000082c
   17e5c:	00010b09 	.word	0x00010b09
   17e60:	20000977 	.word	0x20000977
   17e64:	20000784 	.word	0x20000784
   17e68:	00029657 	.word	0x00029657
   17e6c:	0002435d 	.word	0x0002435d
   17e70:	000298d7 	.word	0x000298d7
   17e74:	00010d21 	.word	0x00010d21
   17e78:	0001da2d 	.word	0x0001da2d
   17e7c:	00012b9d 	.word	0x00012b9d

00017e80 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
   17e80:	b580      	push	{r7, lr}
   17e82:	b082      	sub	sp, #8
   17e84:	af00      	add	r7, sp, #0
   17e86:	0002      	movs	r2, r0
   17e88:	1dfb      	adds	r3, r7, #7
   17e8a:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
   17e8c:	1dfb      	adds	r3, r7, #7
   17e8e:	781b      	ldrb	r3, [r3, #0]
   17e90:	2bff      	cmp	r3, #255	; 0xff
   17e92:	d103      	bne.n	17e9c <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
   17e94:	2041      	movs	r0, #65	; 0x41
   17e96:	4b0f      	ldr	r3, [pc, #60]	; (17ed4 <sendDTMFTone+0x54>)
   17e98:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
   17e9a:	e016      	b.n	17eca <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
   17e9c:	1dfb      	adds	r3, r7, #7
   17e9e:	781b      	ldrb	r3, [r3, #0]
   17ea0:	2b00      	cmp	r3, #0
   17ea2:	d107      	bne.n	17eb4 <sendDTMFTone+0x34>
   17ea4:	4b0c      	ldr	r3, [pc, #48]	; (17ed8 <sendDTMFTone+0x58>)
   17ea6:	78db      	ldrb	r3, [r3, #3]
   17ea8:	2b00      	cmp	r3, #0
   17eaa:	d003      	beq.n	17eb4 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
   17eac:	2044      	movs	r0, #68	; 0x44
   17eae:	4b09      	ldr	r3, [pc, #36]	; (17ed4 <sendDTMFTone+0x54>)
   17eb0:	4798      	blx	r3
}
   17eb2:	e00a      	b.n	17eca <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
   17eb4:	1dfb      	adds	r3, r7, #7
   17eb6:	781b      	ldrb	r3, [r3, #0]
   17eb8:	2b01      	cmp	r3, #1
   17eba:	d106      	bne.n	17eca <sendDTMFTone+0x4a>
   17ebc:	4b06      	ldr	r3, [pc, #24]	; (17ed8 <sendDTMFTone+0x58>)
   17ebe:	78db      	ldrb	r3, [r3, #3]
   17ec0:	2b00      	cmp	r3, #0
   17ec2:	d002      	beq.n	17eca <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
   17ec4:	2043      	movs	r0, #67	; 0x43
   17ec6:	4b03      	ldr	r3, [pc, #12]	; (17ed4 <sendDTMFTone+0x54>)
   17ec8:	4798      	blx	r3
}
   17eca:	46c0      	nop			; (mov r8, r8)
   17ecc:	46bd      	mov	sp, r7
   17ece:	b002      	add	sp, #8
   17ed0:	bd80      	pop	{r7, pc}
   17ed2:	46c0      	nop			; (mov r8, r8)
   17ed4:	00013011 	.word	0x00013011
   17ed8:	2000082c 	.word	0x2000082c

00017edc <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
   17edc:	b580      	push	{r7, lr}
   17ede:	b082      	sub	sp, #8
   17ee0:	af00      	add	r7, sp, #0
   17ee2:	6078      	str	r0, [r7, #4]
   17ee4:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
   17ee6:	4b09      	ldr	r3, [pc, #36]	; (17f0c <getSystemTime+0x30>)
   17ee8:	4798      	blx	r3
   17eea:	1e03      	subs	r3, r0, #0
   17eec:	d109      	bne.n	17f02 <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
   17eee:	4b08      	ldr	r3, [pc, #32]	; (17f10 <getSystemTime+0x34>)
   17ef0:	78db      	ldrb	r3, [r3, #3]
   17ef2:	b2da      	uxtb	r2, r3
   17ef4:	687b      	ldr	r3, [r7, #4]
   17ef6:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
   17ef8:	4b05      	ldr	r3, [pc, #20]	; (17f10 <getSystemTime+0x34>)
   17efa:	791b      	ldrb	r3, [r3, #4]
   17efc:	b2da      	uxtb	r2, r3
   17efe:	683b      	ldr	r3, [r7, #0]
   17f00:	701a      	strb	r2, [r3, #0]
	}
}
   17f02:	46c0      	nop			; (mov r8, r8)
   17f04:	46bd      	mov	sp, r7
   17f06:	b002      	add	sp, #8
   17f08:	bd80      	pop	{r7, pc}
   17f0a:	46c0      	nop			; (mov r8, r8)
   17f0c:	000131f1 	.word	0x000131f1
   17f10:	20000888 	.word	0x20000888

00017f14 <checkSMSForPassCode>:


bool checkSMSForPassCode(char *receivedSMS)
{
   17f14:	b590      	push	{r4, r7, lr}
   17f16:	b087      	sub	sp, #28
   17f18:	af00      	add	r7, sp, #0
   17f1a:	6078      	str	r0, [r7, #4]
	char passCode[10]={0};
   17f1c:	2308      	movs	r3, #8
   17f1e:	18fb      	adds	r3, r7, r3
   17f20:	0018      	movs	r0, r3
   17f22:	230a      	movs	r3, #10
   17f24:	001a      	movs	r2, r3
   17f26:	2100      	movs	r1, #0
   17f28:	4b2c      	ldr	r3, [pc, #176]	; (17fdc <checkSMSForPassCode+0xc8>)
   17f2a:	4798      	blx	r3
	uint32_t pCodeint = factory_settings_parameter_struct.DeviceId_ee + (factory_settings_parameter_struct.dateCode<<1);
   17f2c:	4b2c      	ldr	r3, [pc, #176]	; (17fe0 <checkSMSForPassCode+0xcc>)
   17f2e:	689a      	ldr	r2, [r3, #8]
   17f30:	4b2b      	ldr	r3, [pc, #172]	; (17fe0 <checkSMSForPassCode+0xcc>)
   17f32:	68db      	ldr	r3, [r3, #12]
   17f34:	005b      	lsls	r3, r3, #1
   17f36:	18d3      	adds	r3, r2, r3
   17f38:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint >> 4;
   17f3a:	697b      	ldr	r3, [r7, #20]
   17f3c:	091b      	lsrs	r3, r3, #4
   17f3e:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint << 4;
   17f40:	697b      	ldr	r3, [r7, #20]
   17f42:	011b      	lsls	r3, r3, #4
   17f44:	617b      	str	r3, [r7, #20]
	pCodeint = pCodeint % 1000000L;
   17f46:	697a      	ldr	r2, [r7, #20]
   17f48:	4b26      	ldr	r3, [pc, #152]	; (17fe4 <checkSMSForPassCode+0xd0>)
   17f4a:	4927      	ldr	r1, [pc, #156]	; (17fe8 <checkSMSForPassCode+0xd4>)
   17f4c:	0010      	movs	r0, r2
   17f4e:	4798      	blx	r3
   17f50:	000b      	movs	r3, r1
   17f52:	617b      	str	r3, [r7, #20]
	
	sprintf(passCode, "~%u~",pCodeint);
   17f54:	697a      	ldr	r2, [r7, #20]
   17f56:	4925      	ldr	r1, [pc, #148]	; (17fec <checkSMSForPassCode+0xd8>)
   17f58:	2308      	movs	r3, #8
   17f5a:	18fb      	adds	r3, r7, r3
   17f5c:	0018      	movs	r0, r3
   17f5e:	4b24      	ldr	r3, [pc, #144]	; (17ff0 <checkSMSForPassCode+0xdc>)
   17f60:	4798      	blx	r3
	
	if(strstr(receivedSMS,passCode))							//check passCode exists
   17f62:	2308      	movs	r3, #8
   17f64:	18fa      	adds	r2, r7, r3
   17f66:	687b      	ldr	r3, [r7, #4]
   17f68:	0011      	movs	r1, r2
   17f6a:	0018      	movs	r0, r3
   17f6c:	4b21      	ldr	r3, [pc, #132]	; (17ff4 <checkSMSForPassCode+0xe0>)
   17f6e:	4798      	blx	r3
   17f70:	1e03      	subs	r3, r0, #0
   17f72:	d013      	beq.n	17f9c <checkSMSForPassCode+0x88>
	{
		memmove(receivedSMS,receivedSMS+strlen(passCode),strlen(receivedSMS));		//discard passPhrase
   17f74:	2308      	movs	r3, #8
   17f76:	18fb      	adds	r3, r7, r3
   17f78:	0018      	movs	r0, r3
   17f7a:	4b1f      	ldr	r3, [pc, #124]	; (17ff8 <checkSMSForPassCode+0xe4>)
   17f7c:	4798      	blx	r3
   17f7e:	0002      	movs	r2, r0
   17f80:	687b      	ldr	r3, [r7, #4]
   17f82:	189c      	adds	r4, r3, r2
   17f84:	687b      	ldr	r3, [r7, #4]
   17f86:	0018      	movs	r0, r3
   17f88:	4b1b      	ldr	r3, [pc, #108]	; (17ff8 <checkSMSForPassCode+0xe4>)
   17f8a:	4798      	blx	r3
   17f8c:	0002      	movs	r2, r0
   17f8e:	687b      	ldr	r3, [r7, #4]
   17f90:	0021      	movs	r1, r4
   17f92:	0018      	movs	r0, r3
   17f94:	4b19      	ldr	r3, [pc, #100]	; (17ffc <checkSMSForPassCode+0xe8>)
   17f96:	4798      	blx	r3
		return true;
   17f98:	2301      	movs	r3, #1
   17f9a:	e01a      	b.n	17fd2 <checkSMSForPassCode+0xbe>
	}
	
	if(user_count_struct.current_user_no_count==0 && StringstartsWith(receivedSMS,"****"))
   17f9c:	4b18      	ldr	r3, [pc, #96]	; (18000 <checkSMSForPassCode+0xec>)
   17f9e:	789b      	ldrb	r3, [r3, #2]
   17fa0:	2b00      	cmp	r3, #0
   17fa2:	d115      	bne.n	17fd0 <checkSMSForPassCode+0xbc>
   17fa4:	4a17      	ldr	r2, [pc, #92]	; (18004 <checkSMSForPassCode+0xf0>)
   17fa6:	687b      	ldr	r3, [r7, #4]
   17fa8:	0011      	movs	r1, r2
   17faa:	0018      	movs	r0, r3
   17fac:	4b16      	ldr	r3, [pc, #88]	; (18008 <checkSMSForPassCode+0xf4>)
   17fae:	4798      	blx	r3
   17fb0:	1e03      	subs	r3, r0, #0
   17fb2:	d00d      	beq.n	17fd0 <checkSMSForPassCode+0xbc>
	{
		memmove(receivedSMS,receivedSMS+4,strlen(receivedSMS));		//discard passPhrase
   17fb4:	687b      	ldr	r3, [r7, #4]
   17fb6:	1d1c      	adds	r4, r3, #4
   17fb8:	687b      	ldr	r3, [r7, #4]
   17fba:	0018      	movs	r0, r3
   17fbc:	4b0e      	ldr	r3, [pc, #56]	; (17ff8 <checkSMSForPassCode+0xe4>)
   17fbe:	4798      	blx	r3
   17fc0:	0002      	movs	r2, r0
   17fc2:	687b      	ldr	r3, [r7, #4]
   17fc4:	0021      	movs	r1, r4
   17fc6:	0018      	movs	r0, r3
   17fc8:	4b0c      	ldr	r3, [pc, #48]	; (17ffc <checkSMSForPassCode+0xe8>)
   17fca:	4798      	blx	r3
		return true;
   17fcc:	2301      	movs	r3, #1
   17fce:	e000      	b.n	17fd2 <checkSMSForPassCode+0xbe>
	}
	
	return false;
   17fd0:	2300      	movs	r3, #0
}
   17fd2:	0018      	movs	r0, r3
   17fd4:	46bd      	mov	sp, r7
   17fd6:	b007      	add	sp, #28
   17fd8:	bd90      	pop	{r4, r7, pc}
   17fda:	46c0      	nop			; (mov r8, r8)
   17fdc:	00029657 	.word	0x00029657
   17fe0:	2000082c 	.word	0x2000082c
   17fe4:	00026eed 	.word	0x00026eed
   17fe8:	000f4240 	.word	0x000f4240
   17fec:	0002af60 	.word	0x0002af60
   17ff0:	0002985d 	.word	0x0002985d
   17ff4:	00029917 	.word	0x00029917
   17ff8:	000298e7 	.word	0x000298e7
   17ffc:	00029633 	.word	0x00029633
   18000:	20000814 	.word	0x20000814
   18004:	0002af68 	.word	0x0002af68
   18008:	0001420d 	.word	0x0001420d

0001800c <sendFWUpdateSMS>:

void sendFWUpdateSMS(void)
{
   1800c:	b590      	push	{r4, r7, lr}
   1800e:	b08f      	sub	sp, #60	; 0x3c
   18010:	af00      	add	r7, sp, #0
	if(bootloader_parameter.firmware_update_process_completed)
   18012:	4b3c      	ldr	r3, [pc, #240]	; (18104 <sendFWUpdateSMS+0xf8>)
   18014:	799b      	ldrb	r3, [r3, #6]
   18016:	2b00      	cmp	r3, #0
   18018:	d06f      	beq.n	180fa <sendFWUpdateSMS+0xee>
	{
		char uResp_SMS[25]={0};
   1801a:	231c      	movs	r3, #28
   1801c:	18fb      	adds	r3, r7, r3
   1801e:	0018      	movs	r0, r3
   18020:	2319      	movs	r3, #25
   18022:	001a      	movs	r2, r3
   18024:	2100      	movs	r1, #0
   18026:	4b38      	ldr	r3, [pc, #224]	; (18108 <sendFWUpdateSMS+0xfc>)
   18028:	4798      	blx	r3
		
		/*Firmware update Completed Successfully*/
		if(bootloader_parameter.firmware_update_error_code==0)
   1802a:	4b36      	ldr	r3, [pc, #216]	; (18104 <sendFWUpdateSMS+0xf8>)
   1802c:	79db      	ldrb	r3, [r3, #7]
   1802e:	2b00      	cmp	r3, #0
   18030:	d109      	bne.n	18046 <sendFWUpdateSMS+0x3a>
		{
			strcpy(uResp_SMS,"F/W Update Completed");
   18032:	231c      	movs	r3, #28
   18034:	18fb      	adds	r3, r7, r3
   18036:	4a35      	ldr	r2, [pc, #212]	; (1810c <sendFWUpdateSMS+0x100>)
   18038:	ca13      	ldmia	r2!, {r0, r1, r4}
   1803a:	c313      	stmia	r3!, {r0, r1, r4}
   1803c:	ca03      	ldmia	r2!, {r0, r1}
   1803e:	c303      	stmia	r3!, {r0, r1}
   18040:	7812      	ldrb	r2, [r2, #0]
   18042:	701a      	strb	r2, [r3, #0]
   18044:	e008      	b.n	18058 <sendFWUpdateSMS+0x4c>
		}
		/*Error in Firmware update*/
		else
		{
			strcpy(uResp_SMS,"F/W Update Error");
   18046:	231c      	movs	r3, #28
   18048:	18fb      	adds	r3, r7, r3
   1804a:	4a31      	ldr	r2, [pc, #196]	; (18110 <sendFWUpdateSMS+0x104>)
   1804c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1804e:	c313      	stmia	r3!, {r0, r1, r4}
   18050:	6811      	ldr	r1, [r2, #0]
   18052:	6019      	str	r1, [r3, #0]
   18054:	7912      	ldrb	r2, [r2, #4]
   18056:	711a      	strb	r2, [r3, #4]
		}
		
		if(bootloader_parameter.firmware_updater_mobile_no[0]!='0')
   18058:	4b2a      	ldr	r3, [pc, #168]	; (18104 <sendFWUpdateSMS+0xf8>)
   1805a:	7b1b      	ldrb	r3, [r3, #12]
   1805c:	2b30      	cmp	r3, #48	; 0x30
   1805e:	d007      	beq.n	18070 <sendFWUpdateSMS+0x64>
		{
			gsm_send_sms(bootloader_parameter.firmware_updater_mobile_no,uResp_SMS);
   18060:	231c      	movs	r3, #28
   18062:	18fa      	adds	r2, r7, r3
   18064:	4b2b      	ldr	r3, [pc, #172]	; (18114 <sendFWUpdateSMS+0x108>)
   18066:	0011      	movs	r1, r2
   18068:	0018      	movs	r0, r3
   1806a:	4b2b      	ldr	r3, [pc, #172]	; (18118 <sendFWUpdateSMS+0x10c>)
   1806c:	4798      	blx	r3
   1806e:	e01a      	b.n	180a6 <sendFWUpdateSMS+0x9a>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
   18070:	4b2a      	ldr	r3, [pc, #168]	; (1811c <sendFWUpdateSMS+0x110>)
   18072:	223c      	movs	r2, #60	; 0x3c
   18074:	2100      	movs	r1, #0
   18076:	0018      	movs	r0, r3
   18078:	4b23      	ldr	r3, [pc, #140]	; (18108 <sendFWUpdateSMS+0xfc>)
   1807a:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
   1807c:	4b27      	ldr	r3, [pc, #156]	; (1811c <sendFWUpdateSMS+0x110>)
   1807e:	0019      	movs	r1, r3
   18080:	2003      	movs	r0, #3
   18082:	4b27      	ldr	r3, [pc, #156]	; (18120 <sendFWUpdateSMS+0x114>)
   18084:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
   18086:	1d3a      	adds	r2, r7, #4
   18088:	4b24      	ldr	r3, [pc, #144]	; (1811c <sendFWUpdateSMS+0x110>)
   1808a:	0010      	movs	r0, r2
   1808c:	0019      	movs	r1, r3
   1808e:	2318      	movs	r3, #24
   18090:	001a      	movs	r2, r3
   18092:	4b24      	ldr	r3, [pc, #144]	; (18124 <sendFWUpdateSMS+0x118>)
   18094:	4798      	blx	r3

			gsm_send_sms(mobile_no.mobile_no_ee,uResp_SMS);
   18096:	231c      	movs	r3, #28
   18098:	18fa      	adds	r2, r7, r3
   1809a:	1d3b      	adds	r3, r7, #4
   1809c:	3304      	adds	r3, #4
   1809e:	0011      	movs	r1, r2
   180a0:	0018      	movs	r0, r3
   180a2:	4b1d      	ldr	r3, [pc, #116]	; (18118 <sendFWUpdateSMS+0x10c>)
   180a4:	4798      	blx	r3
		}
		
		bootloader_parameter.ulongintDiscard = 0;
   180a6:	4b17      	ldr	r3, [pc, #92]	; (18104 <sendFWUpdateSMS+0xf8>)
   180a8:	2200      	movs	r2, #0
   180aa:	601a      	str	r2, [r3, #0]
		bootloader_parameter.firmware_download_pending = false;
   180ac:	4b15      	ldr	r3, [pc, #84]	; (18104 <sendFWUpdateSMS+0xf8>)
   180ae:	2200      	movs	r2, #0
   180b0:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
   180b2:	4b14      	ldr	r3, [pc, #80]	; (18104 <sendFWUpdateSMS+0xf8>)
   180b4:	2200      	movs	r2, #0
   180b6:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
   180b8:	4b12      	ldr	r3, [pc, #72]	; (18104 <sendFWUpdateSMS+0xf8>)
   180ba:	2200      	movs	r2, #0
   180bc:	71da      	strb	r2, [r3, #7]
		bootloader_parameter.retries = 0;
   180be:	4b11      	ldr	r3, [pc, #68]	; (18104 <sendFWUpdateSMS+0xf8>)
   180c0:	2200      	movs	r2, #0
   180c2:	721a      	strb	r2, [r3, #8]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
   180c4:	4b13      	ldr	r3, [pc, #76]	; (18114 <sendFWUpdateSMS+0x108>)
   180c6:	2210      	movs	r2, #16
   180c8:	2100      	movs	r1, #0
   180ca:	0018      	movs	r0, r3
   180cc:	4b0e      	ldr	r3, [pc, #56]	; (18108 <sendFWUpdateSMS+0xfc>)
   180ce:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
   180d0:	4b10      	ldr	r3, [pc, #64]	; (18114 <sendFWUpdateSMS+0x108>)
   180d2:	4a15      	ldr	r2, [pc, #84]	; (18128 <sendFWUpdateSMS+0x11c>)
   180d4:	ca03      	ldmia	r2!, {r0, r1}
   180d6:	c303      	stmia	r3!, {r0, r1}
   180d8:	8811      	ldrh	r1, [r2, #0]
   180da:	8019      	strh	r1, [r3, #0]
   180dc:	7892      	ldrb	r2, [r2, #2]
   180de:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
   180e0:	4908      	ldr	r1, [pc, #32]	; (18104 <sendFWUpdateSMS+0xf8>)
   180e2:	4b0e      	ldr	r3, [pc, #56]	; (1811c <sendFWUpdateSMS+0x110>)
   180e4:	221c      	movs	r2, #28
   180e6:	0018      	movs	r0, r3
   180e8:	4b0e      	ldr	r3, [pc, #56]	; (18124 <sendFWUpdateSMS+0x118>)
   180ea:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
   180ec:	4b0b      	ldr	r3, [pc, #44]	; (1811c <sendFWUpdateSMS+0x110>)
   180ee:	0019      	movs	r1, r3
   180f0:	2000      	movs	r0, #0
   180f2:	4b0e      	ldr	r3, [pc, #56]	; (1812c <sendFWUpdateSMS+0x120>)
   180f4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
   180f6:	4b0e      	ldr	r3, [pc, #56]	; (18130 <sendFWUpdateSMS+0x124>)
   180f8:	4798      	blx	r3
	}
}
   180fa:	46c0      	nop			; (mov r8, r8)
   180fc:	46bd      	mov	sp, r7
   180fe:	b00f      	add	sp, #60	; 0x3c
   18100:	bd90      	pop	{r4, r7, pc}
   18102:	46c0      	nop			; (mov r8, r8)
   18104:	200007f8 	.word	0x200007f8
   18108:	00029657 	.word	0x00029657
   1810c:	0002af70 	.word	0x0002af70
   18110:	0002af88 	.word	0x0002af88
   18114:	20000804 	.word	0x20000804
   18118:	00012b9d 	.word	0x00012b9d
   1811c:	20000784 	.word	0x20000784
   18120:	0002435d 	.word	0x0002435d
   18124:	00029621 	.word	0x00029621
   18128:	0002af9c 	.word	0x0002af9c
   1812c:	00024251 	.word	0x00024251
   18130:	000243f9 	.word	0x000243f9

00018134 <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
   18134:	b590      	push	{r4, r7, lr}
   18136:	b0cf      	sub	sp, #316	; 0x13c
   18138:	af02      	add	r7, sp, #8
   1813a:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
   1813c:	2300      	movs	r3, #0
   1813e:	2296      	movs	r2, #150	; 0x96
   18140:	0052      	lsls	r2, r2, #1
   18142:	18ba      	adds	r2, r7, r2
   18144:	6013      	str	r3, [r2, #0]
	GSM_PWR_AS_OP;
   18146:	4bcc      	ldr	r3, [pc, #816]	; (18478 <vTask_GSM_service+0x344>)
   18148:	4acb      	ldr	r2, [pc, #812]	; (18478 <vTask_GSM_service+0x344>)
   1814a:	6812      	ldr	r2, [r2, #0]
   1814c:	2180      	movs	r1, #128	; 0x80
   1814e:	0249      	lsls	r1, r1, #9
   18150:	430a      	orrs	r2, r1
   18152:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
   18154:	2388      	movs	r3, #136	; 0x88
   18156:	005b      	lsls	r3, r3, #1
   18158:	18fb      	adds	r3, r7, r3
   1815a:	0018      	movs	r0, r3
   1815c:	4bc7      	ldr	r3, [pc, #796]	; (1847c <vTask_GSM_service+0x348>)
   1815e:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
   18160:	2388      	movs	r3, #136	; 0x88
   18162:	005b      	lsls	r3, r3, #1
   18164:	18fb      	adds	r3, r7, r3
   18166:	2200      	movs	r2, #0
   18168:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
   1816a:	2388      	movs	r3, #136	; 0x88
   1816c:	005b      	lsls	r3, r3, #1
   1816e:	18fb      	adds	r3, r7, r3
   18170:	2200      	movs	r2, #0
   18172:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
   18174:	2388      	movs	r3, #136	; 0x88
   18176:	005b      	lsls	r3, r3, #1
   18178:	18fb      	adds	r3, r7, r3
   1817a:	0019      	movs	r1, r3
   1817c:	201b      	movs	r0, #27
   1817e:	4bc0      	ldr	r3, [pc, #768]	; (18480 <vTask_GSM_service+0x34c>)
   18180:	4798      	blx	r3
	
	gsm_init();
   18182:	4bc0      	ldr	r3, [pc, #768]	; (18484 <vTask_GSM_service+0x350>)
   18184:	4798      	blx	r3
	
	initialized = false;
   18186:	4bc0      	ldr	r3, [pc, #768]	; (18488 <vTask_GSM_service+0x354>)
   18188:	2200      	movs	r2, #0
   1818a:	701a      	strb	r2, [r3, #0]
	
	
	inCall=false;
   1818c:	4bbf      	ldr	r3, [pc, #764]	; (1848c <vTask_GSM_service+0x358>)
   1818e:	2200      	movs	r2, #0
   18190:	701a      	strb	r2, [r3, #0]
	simReInit=false;
   18192:	4bbf      	ldr	r3, [pc, #764]	; (18490 <vTask_GSM_service+0x35c>)
   18194:	2200      	movs	r2, #0
   18196:	701a      	strb	r2, [r3, #0]
	
	isRinging = false;
   18198:	4bbe      	ldr	r3, [pc, #760]	; (18494 <vTask_GSM_service+0x360>)
   1819a:	2200      	movs	r2, #0
   1819c:	701a      	strb	r2, [r3, #0]
	
	boolGsm_config_flag			=false;
   1819e:	4bbe      	ldr	r3, [pc, #760]	; (18498 <vTask_GSM_service+0x364>)
   181a0:	2200      	movs	r2, #0
   181a2:	701a      	strb	r2, [r3, #0]
	boolOne_Time_Msg_Delete_Flag   =false;
   181a4:	4bbd      	ldr	r3, [pc, #756]	; (1849c <vTask_GSM_service+0x368>)
   181a6:	2200      	movs	r2, #0
   181a8:	701a      	strb	r2, [r3, #0]
	
	lastRingStateChangeTime=0;
   181aa:	4bbd      	ldr	r3, [pc, #756]	; (184a0 <vTask_GSM_service+0x36c>)
   181ac:	2200      	movs	r2, #0
   181ae:	601a      	str	r2, [r3, #0]
	
	Signal_Strength = 0;
   181b0:	4bbc      	ldr	r3, [pc, #752]	; (184a4 <vTask_GSM_service+0x370>)
   181b2:	2200      	movs	r2, #0
   181b4:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
   181b6:	4bbc      	ldr	r3, [pc, #752]	; (184a8 <vTask_GSM_service+0x374>)
   181b8:	2205      	movs	r2, #5
   181ba:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
   181bc:	4bbb      	ldr	r3, [pc, #748]	; (184ac <vTask_GSM_service+0x378>)
   181be:	2200      	movs	r2, #0
   181c0:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
   181c2:	4bbb      	ldr	r3, [pc, #748]	; (184b0 <vTask_GSM_service+0x37c>)
   181c4:	2291      	movs	r2, #145	; 0x91
   181c6:	0092      	lsls	r2, r2, #2
   181c8:	801a      	strh	r2, [r3, #0]
	nr = 0;
   181ca:	4bba      	ldr	r3, [pc, #744]	; (184b4 <vTask_GSM_service+0x380>)
   181cc:	2200      	movs	r2, #0
   181ce:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
   181d0:	4bb9      	ldr	r3, [pc, #740]	; (184b8 <vTask_GSM_service+0x384>)
   181d2:	224e      	movs	r2, #78	; 0x4e
   181d4:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
   181d6:	4bb9      	ldr	r3, [pc, #740]	; (184bc <vTask_GSM_service+0x388>)
   181d8:	224e      	movs	r2, #78	; 0x4e
   181da:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
   181dc:	4bb8      	ldr	r3, [pc, #736]	; (184c0 <vTask_GSM_service+0x38c>)
   181de:	2200      	movs	r2, #0
   181e0:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
   181e2:	4bb8      	ldr	r3, [pc, #736]	; (184c4 <vTask_GSM_service+0x390>)
   181e4:	2200      	movs	r2, #0
   181e6:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
   181e8:	4bb7      	ldr	r3, [pc, #732]	; (184c8 <vTask_GSM_service+0x394>)
   181ea:	2201      	movs	r2, #1
   181ec:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
   181ee:	4bb7      	ldr	r3, [pc, #732]	; (184cc <vTask_GSM_service+0x398>)
   181f0:	2200      	movs	r2, #0
   181f2:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
   181f4:	4bb6      	ldr	r3, [pc, #728]	; (184d0 <vTask_GSM_service+0x39c>)
   181f6:	2200      	movs	r2, #0
   181f8:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
   181fa:	4bb6      	ldr	r3, [pc, #728]	; (184d4 <vTask_GSM_service+0x3a0>)
   181fc:	224e      	movs	r2, #78	; 0x4e
   181fe:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
   18200:	4bb5      	ldr	r3, [pc, #724]	; (184d8 <vTask_GSM_service+0x3a4>)
   18202:	2200      	movs	r2, #0
   18204:	701a      	strb	r2, [r3, #0]
	retries=0;
   18206:	4bb5      	ldr	r3, [pc, #724]	; (184dc <vTask_GSM_service+0x3a8>)
   18208:	2200      	movs	r2, #0
   1820a:	701a      	strb	r2, [r3, #0]
	autoNetworkDetection=false;
   1820c:	4bb4      	ldr	r3, [pc, #720]	; (184e0 <vTask_GSM_service+0x3ac>)
   1820e:	2200      	movs	r2, #0
   18210:	701a      	strb	r2, [r3, #0]
	mcuWakeUpFromSleep=false;
   18212:	4bb4      	ldr	r3, [pc, #720]	; (184e4 <vTask_GSM_service+0x3b0>)
   18214:	2200      	movs	r2, #0
   18216:	701a      	strb	r2, [r3, #0]
	
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   18218:	4bb3      	ldr	r3, [pc, #716]	; (184e8 <vTask_GSM_service+0x3b4>)
   1821a:	785b      	ldrb	r3, [r3, #1]
   1821c:	2b00      	cmp	r3, #0
   1821e:	d002      	beq.n	18226 <vTask_GSM_service+0xf2>
	{
		zeroPressed=false;
   18220:	4bb2      	ldr	r3, [pc, #712]	; (184ec <vTask_GSM_service+0x3b8>)
   18222:	2200      	movs	r2, #0
   18224:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   18226:	4bb0      	ldr	r3, [pc, #704]	; (184e8 <vTask_GSM_service+0x3b4>)
   18228:	78db      	ldrb	r3, [r3, #3]
   1822a:	2b00      	cmp	r3, #0
   1822c:	d012      	beq.n	18254 <vTask_GSM_service+0x120>
	{
		m2mAck=false;
   1822e:	4bb0      	ldr	r3, [pc, #704]	; (184f0 <vTask_GSM_service+0x3bc>)
   18230:	2200      	movs	r2, #0
   18232:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
   18234:	4baf      	ldr	r3, [pc, #700]	; (184f4 <vTask_GSM_service+0x3c0>)
   18236:	2200      	movs	r2, #0
   18238:	701a      	strb	r2, [r3, #0]
   1823a:	4bae      	ldr	r3, [pc, #696]	; (184f4 <vTask_GSM_service+0x3c0>)
   1823c:	781a      	ldrb	r2, [r3, #0]
   1823e:	4bae      	ldr	r3, [pc, #696]	; (184f8 <vTask_GSM_service+0x3c4>)
   18240:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
   18242:	4bae      	ldr	r3, [pc, #696]	; (184fc <vTask_GSM_service+0x3c8>)
   18244:	2200      	movs	r2, #0
   18246:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
   18248:	4bad      	ldr	r3, [pc, #692]	; (18500 <vTask_GSM_service+0x3cc>)
   1824a:	2200      	movs	r2, #0
   1824c:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
   1824e:	4bad      	ldr	r3, [pc, #692]	; (18504 <vTask_GSM_service+0x3d0>)
   18250:	2200      	movs	r2, #0
   18252:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
   18254:	201b      	movs	r0, #27
   18256:	4bac      	ldr	r3, [pc, #688]	; (18508 <vTask_GSM_service+0x3d4>)
   18258:	4798      	blx	r3
   1825a:	1e03      	subs	r3, r0, #0
   1825c:	d01a      	beq.n	18294 <vTask_GSM_service+0x160>
	{
		boolGsm_config_flag			=false;
   1825e:	4b8e      	ldr	r3, [pc, #568]	; (18498 <vTask_GSM_service+0x364>)
   18260:	2200      	movs	r2, #0
   18262:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
   18264:	4b8d      	ldr	r3, [pc, #564]	; (1849c <vTask_GSM_service+0x368>)
   18266:	2200      	movs	r2, #0
   18268:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
   1826a:	4ba8      	ldr	r3, [pc, #672]	; (1850c <vTask_GSM_service+0x3d8>)
   1826c:	4aa7      	ldr	r2, [pc, #668]	; (1850c <vTask_GSM_service+0x3d8>)
   1826e:	6812      	ldr	r2, [r2, #0]
   18270:	2180      	movs	r1, #128	; 0x80
   18272:	0249      	lsls	r1, r1, #9
   18274:	430a      	orrs	r2, r1
   18276:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
   18278:	4ba5      	ldr	r3, [pc, #660]	; (18510 <vTask_GSM_service+0x3dc>)
   1827a:	0018      	movs	r0, r3
   1827c:	4ba5      	ldr	r3, [pc, #660]	; (18514 <vTask_GSM_service+0x3e0>)
   1827e:	4798      	blx	r3
		GSM_PWR_OFF;
   18280:	4ba2      	ldr	r3, [pc, #648]	; (1850c <vTask_GSM_service+0x3d8>)
   18282:	4aa2      	ldr	r2, [pc, #648]	; (1850c <vTask_GSM_service+0x3d8>)
   18284:	6812      	ldr	r2, [r2, #0]
   18286:	49a4      	ldr	r1, [pc, #656]	; (18518 <vTask_GSM_service+0x3e4>)
   18288:	400a      	ands	r2, r1
   1828a:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
   1828c:	4ba3      	ldr	r3, [pc, #652]	; (1851c <vTask_GSM_service+0x3e8>)
   1828e:	0018      	movs	r0, r3
   18290:	4ba0      	ldr	r3, [pc, #640]	; (18514 <vTask_GSM_service+0x3e0>)
   18292:	4798      	blx	r3
	}
	
	isGSMModuleAwake=false;
   18294:	4ba2      	ldr	r3, [pc, #648]	; (18520 <vTask_GSM_service+0x3ec>)
   18296:	2200      	movs	r2, #0
   18298:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
   1829a:	2101      	movs	r1, #1
   1829c:	2014      	movs	r0, #20
   1829e:	4ba1      	ldr	r3, [pc, #644]	; (18524 <vTask_GSM_service+0x3f0>)
   182a0:	4798      	blx	r3
	lastGSMCommunicationTime=0;
   182a2:	4ba1      	ldr	r3, [pc, #644]	; (18528 <vTask_GSM_service+0x3f4>)
   182a4:	2200      	movs	r2, #0
   182a6:	601a      	str	r2, [r3, #0]
	lastToLastGSMCommunicationTime=0;
   182a8:	4ba0      	ldr	r3, [pc, #640]	; (1852c <vTask_GSM_service+0x3f8>)
   182aa:	2200      	movs	r2, #0
   182ac:	601a      	str	r2, [r3, #0]
	gsm_module_exit_sleep(false);				//to switch DTR pin so that sim remains active
   182ae:	2000      	movs	r0, #0
   182b0:	4b9f      	ldr	r3, [pc, #636]	; (18530 <vTask_GSM_service+0x3fc>)
   182b2:	4798      	blx	r3
	{

		/************************************************************************/
		/*  Check for Call Timer Expire in case GSM Status is not OK            */
		/************************************************************************/
		if (currentStatus == 'I' || currentStatus == 'R')
   182b4:	4b80      	ldr	r3, [pc, #512]	; (184b8 <vTask_GSM_service+0x384>)
   182b6:	781b      	ldrb	r3, [r3, #0]
   182b8:	b2db      	uxtb	r3, r3
   182ba:	2b49      	cmp	r3, #73	; 0x49
   182bc:	d004      	beq.n	182c8 <vTask_GSM_service+0x194>
   182be:	4b7e      	ldr	r3, [pc, #504]	; (184b8 <vTask_GSM_service+0x384>)
   182c0:	781b      	ldrb	r3, [r3, #0]
   182c2:	b2db      	uxtb	r3, r3
   182c4:	2b52      	cmp	r3, #82	; 0x52
   182c6:	d112      	bne.n	182ee <vTask_GSM_service+0x1ba>
		{
			if (callTimerExpire())
   182c8:	4b9a      	ldr	r3, [pc, #616]	; (18534 <vTask_GSM_service+0x400>)
   182ca:	4798      	blx	r3
   182cc:	1e03      	subs	r3, r0, #0
   182ce:	d00e      	beq.n	182ee <vTask_GSM_service+0x1ba>
			{
				char t1 = actionType;
   182d0:	2328      	movs	r3, #40	; 0x28
   182d2:	33ff      	adds	r3, #255	; 0xff
   182d4:	18fb      	adds	r3, r7, r3
   182d6:	4a98      	ldr	r2, [pc, #608]	; (18538 <vTask_GSM_service+0x404>)
   182d8:	7812      	ldrb	r2, [r2, #0]
   182da:	701a      	strb	r2, [r3, #0]
				endCall();
   182dc:	4b97      	ldr	r3, [pc, #604]	; (1853c <vTask_GSM_service+0x408>)
   182de:	4798      	blx	r3
				checkRespSMS(t1);
   182e0:	2328      	movs	r3, #40	; 0x28
   182e2:	33ff      	adds	r3, #255	; 0xff
   182e4:	18fb      	adds	r3, r7, r3
   182e6:	781b      	ldrb	r3, [r3, #0]
   182e8:	0018      	movs	r0, r3
   182ea:	4b95      	ldr	r3, [pc, #596]	; (18540 <vTask_GSM_service+0x40c>)
   182ec:	4798      	blx	r3
			}
		}
		/************************************************************************/
		
		if (GSM_STATUS_OK)
   182ee:	201b      	movs	r0, #27
   182f0:	4b85      	ldr	r3, [pc, #532]	; (18508 <vTask_GSM_service+0x3d4>)
   182f2:	4798      	blx	r3
   182f4:	1e03      	subs	r3, r0, #0
   182f6:	d101      	bne.n	182fc <vTask_GSM_service+0x1c8>
   182f8:	f000 fd12 	bl	18d20 <vTask_GSM_service+0xbec>
		{
			if (boolGsm_config_flag == false)
   182fc:	4b66      	ldr	r3, [pc, #408]	; (18498 <vTask_GSM_service+0x364>)
   182fe:	781b      	ldrb	r3, [r3, #0]
   18300:	b2db      	uxtb	r3, r3
   18302:	2201      	movs	r2, #1
   18304:	4053      	eors	r3, r2
   18306:	b2db      	uxtb	r3, r3
   18308:	2b00      	cmp	r3, #0
   1830a:	d02d      	beq.n	18368 <vTask_GSM_service+0x234>
			{
				
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
   1830c:	4b8d      	ldr	r3, [pc, #564]	; (18544 <vTask_GSM_service+0x410>)
   1830e:	4798      	blx	r3
   18310:	0003      	movs	r3, r0
   18312:	2b09      	cmp	r3, #9
   18314:	d122      	bne.n	1835c <vTask_GSM_service+0x228>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
   18316:	4b8c      	ldr	r3, [pc, #560]	; (18548 <vTask_GSM_service+0x414>)
   18318:	4798      	blx	r3
   1831a:	1e03      	subs	r3, r0, #0
   1831c:	d11a      	bne.n	18354 <vTask_GSM_service+0x220>
					{
						if(gsm_enable_csqn_urc()==GSM_ERROR_NONE)
   1831e:	4b8b      	ldr	r3, [pc, #556]	; (1854c <vTask_GSM_service+0x418>)
   18320:	4798      	blx	r3
   18322:	1e03      	subs	r3, r0, #0
   18324:	d102      	bne.n	1832c <vTask_GSM_service+0x1f8>
						{
							autoNetworkDetection = true;
   18326:	4b6e      	ldr	r3, [pc, #440]	; (184e0 <vTask_GSM_service+0x3ac>)
   18328:	2201      	movs	r2, #1
   1832a:	701a      	strb	r2, [r3, #0]
						}
						
						Signal_Strength = gsm_getsignalstrength();
   1832c:	4b88      	ldr	r3, [pc, #544]	; (18550 <vTask_GSM_service+0x41c>)
   1832e:	4798      	blx	r3
   18330:	0003      	movs	r3, r0
   18332:	001a      	movs	r2, r3
   18334:	4b5b      	ldr	r3, [pc, #364]	; (184a4 <vTask_GSM_service+0x370>)
   18336:	701a      	strb	r2, [r3, #0]
						network_update_time = xTaskGetTickCount();
   18338:	4b86      	ldr	r3, [pc, #536]	; (18554 <vTask_GSM_service+0x420>)
   1833a:	4798      	blx	r3
   1833c:	0003      	movs	r3, r0
   1833e:	2296      	movs	r2, #150	; 0x96
   18340:	0052      	lsls	r2, r2, #1
   18342:	18ba      	adds	r2, r7, r2
   18344:	6013      	str	r3, [r2, #0]
							
						boolGsm_config_flag = true;
   18346:	4b54      	ldr	r3, [pc, #336]	; (18498 <vTask_GSM_service+0x364>)
   18348:	2201      	movs	r2, #1
   1834a:	701a      	strb	r2, [r3, #0]
						gsmStatusChange=true;
   1834c:	4b82      	ldr	r3, [pc, #520]	; (18558 <vTask_GSM_service+0x424>)
   1834e:	2201      	movs	r2, #1
   18350:	701a      	strb	r2, [r3, #0]
   18352:	e7af      	b.n	182b4 <vTask_GSM_service+0x180>
					}
					else
					{
						boolGsm_config_flag = false;
   18354:	4b50      	ldr	r3, [pc, #320]	; (18498 <vTask_GSM_service+0x364>)
   18356:	2200      	movs	r2, #0
   18358:	701a      	strb	r2, [r3, #0]
   1835a:	e7ab      	b.n	182b4 <vTask_GSM_service+0x180>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
   1835c:	23fa      	movs	r3, #250	; 0xfa
   1835e:	00db      	lsls	r3, r3, #3
   18360:	0018      	movs	r0, r3
   18362:	4b6c      	ldr	r3, [pc, #432]	; (18514 <vTask_GSM_service+0x3e0>)
   18364:	4798      	blx	r3
   18366:	e7a5      	b.n	182b4 <vTask_GSM_service+0x180>
				}
			}
			else
			{
				if(mcuWakeUpFromSleep)
   18368:	4b5e      	ldr	r3, [pc, #376]	; (184e4 <vTask_GSM_service+0x3b0>)
   1836a:	781b      	ldrb	r3, [r3, #0]
   1836c:	b2db      	uxtb	r3, r3
   1836e:	2b00      	cmp	r3, #0
   18370:	d00c      	beq.n	1838c <vTask_GSM_service+0x258>
				{
					mcuWakeUpFromSleep=false;
   18372:	4b5c      	ldr	r3, [pc, #368]	; (184e4 <vTask_GSM_service+0x3b0>)
   18374:	2200      	movs	r2, #0
   18376:	701a      	strb	r2, [r3, #0]
					gsm_module_exit_sleep(false);
   18378:	2000      	movs	r0, #0
   1837a:	4b6d      	ldr	r3, [pc, #436]	; (18530 <vTask_GSM_service+0x3fc>)
   1837c:	4798      	blx	r3
					if(gsm_enable_csqn_urc()==GSM_ERROR_NONE)
   1837e:	4b73      	ldr	r3, [pc, #460]	; (1854c <vTask_GSM_service+0x418>)
   18380:	4798      	blx	r3
   18382:	1e03      	subs	r3, r0, #0
   18384:	d102      	bne.n	1838c <vTask_GSM_service+0x258>
					{
						autoNetworkDetection = true;
   18386:	4b56      	ldr	r3, [pc, #344]	; (184e0 <vTask_GSM_service+0x3ac>)
   18388:	2201      	movs	r2, #1
   1838a:	701a      	strb	r2, [r3, #0]
				
				
				/************************************************************************/
				/* Firmware Update Status SMS                                           */
				/************************************************************************/
				if(bootloader_parameter.firmware_update_process_completed)
   1838c:	4b73      	ldr	r3, [pc, #460]	; (1855c <vTask_GSM_service+0x428>)
   1838e:	799b      	ldrb	r3, [r3, #6]
   18390:	2b00      	cmp	r3, #0
   18392:	d001      	beq.n	18398 <vTask_GSM_service+0x264>
				{
					sendFWUpdateSMS();
   18394:	4b72      	ldr	r3, [pc, #456]	; (18560 <vTask_GSM_service+0x42c>)
   18396:	4798      	blx	r3
				}
				
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
   18398:	4b40      	ldr	r3, [pc, #256]	; (1849c <vTask_GSM_service+0x368>)
   1839a:	781b      	ldrb	r3, [r3, #0]
   1839c:	b2db      	uxtb	r3, r3
   1839e:	2201      	movs	r2, #1
   183a0:	4053      	eors	r3, r2
   183a2:	b2db      	uxtb	r3, r3
   183a4:	2b00      	cmp	r3, #0
   183a6:	d015      	beq.n	183d4 <vTask_GSM_service+0x2a0>
   183a8:	4b3b      	ldr	r3, [pc, #236]	; (18498 <vTask_GSM_service+0x364>)
   183aa:	781b      	ldrb	r3, [r3, #0]
   183ac:	b2db      	uxtb	r3, r3
   183ae:	2b00      	cmp	r3, #0
   183b0:	d010      	beq.n	183d4 <vTask_GSM_service+0x2a0>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   183b2:	4b6c      	ldr	r3, [pc, #432]	; (18564 <vTask_GSM_service+0x430>)
   183b4:	4798      	blx	r3
   183b6:	1e03      	subs	r3, r0, #0
   183b8:	d107      	bne.n	183ca <vTask_GSM_service+0x296>
					{
						boolOne_Time_Msg_Delete_Flag = true;
   183ba:	4b38      	ldr	r3, [pc, #224]	; (1849c <vTask_GSM_service+0x368>)
   183bc:	2201      	movs	r2, #1
   183be:	701a      	strb	r2, [r3, #0]
						initialized = true;
   183c0:	4b31      	ldr	r3, [pc, #196]	; (18488 <vTask_GSM_service+0x354>)
   183c2:	2201      	movs	r2, #1
   183c4:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   183c6:	f000 fccc 	bl	18d62 <vTask_GSM_service+0xc2e>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
   183ca:	4b34      	ldr	r3, [pc, #208]	; (1849c <vTask_GSM_service+0x368>)
   183cc:	2200      	movs	r2, #0
   183ce:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
   183d0:	f000 fcc7 	bl	18d62 <vTask_GSM_service+0xc2e>
					}
				}
				else
				{
					
					if (currentStatus == 'N' && currentCallStatus == 'N')
   183d4:	4b38      	ldr	r3, [pc, #224]	; (184b8 <vTask_GSM_service+0x384>)
   183d6:	781b      	ldrb	r3, [r3, #0]
   183d8:	b2db      	uxtb	r3, r3
   183da:	2b4e      	cmp	r3, #78	; 0x4e
   183dc:	d000      	beq.n	183e0 <vTask_GSM_service+0x2ac>
   183de:	e0d3      	b.n	18588 <vTask_GSM_service+0x454>
   183e0:	4b36      	ldr	r3, [pc, #216]	; (184bc <vTask_GSM_service+0x388>)
   183e2:	781b      	ldrb	r3, [r3, #0]
   183e4:	b2db      	uxtb	r3, r3
   183e6:	2b4e      	cmp	r3, #78	; 0x4e
   183e8:	d000      	beq.n	183ec <vTask_GSM_service+0x2b8>
   183ea:	e0cd      	b.n	18588 <vTask_GSM_service+0x454>
					{
						if(getAllPhaseState()==AC_OFF &&  isGSMModuleAwake && gsm_module_sleep_elligible())
   183ec:	4b5e      	ldr	r3, [pc, #376]	; (18568 <vTask_GSM_service+0x434>)
   183ee:	4798      	blx	r3
   183f0:	1e03      	subs	r3, r0, #0
   183f2:	d115      	bne.n	18420 <vTask_GSM_service+0x2ec>
   183f4:	4b4a      	ldr	r3, [pc, #296]	; (18520 <vTask_GSM_service+0x3ec>)
   183f6:	781b      	ldrb	r3, [r3, #0]
   183f8:	b2db      	uxtb	r3, r3
   183fa:	2b00      	cmp	r3, #0
   183fc:	d010      	beq.n	18420 <vTask_GSM_service+0x2ec>
   183fe:	4b5b      	ldr	r3, [pc, #364]	; (1856c <vTask_GSM_service+0x438>)
   18400:	4798      	blx	r3
   18402:	1e03      	subs	r3, r0, #0
   18404:	d00c      	beq.n	18420 <vTask_GSM_service+0x2ec>
						{
							if(motor_checkSleepElligible())
   18406:	4b5a      	ldr	r3, [pc, #360]	; (18570 <vTask_GSM_service+0x43c>)
   18408:	4798      	blx	r3
   1840a:	1e03      	subs	r3, r0, #0
   1840c:	d008      	beq.n	18420 <vTask_GSM_service+0x2ec>
							{
								if(gsm_disable_csqn_urc()==GSM_ERROR_NONE)
   1840e:	4b59      	ldr	r3, [pc, #356]	; (18574 <vTask_GSM_service+0x440>)
   18410:	4798      	blx	r3
   18412:	1e03      	subs	r3, r0, #0
   18414:	d102      	bne.n	1841c <vTask_GSM_service+0x2e8>
								{
									autoNetworkDetection=false;
   18416:	4b32      	ldr	r3, [pc, #200]	; (184e0 <vTask_GSM_service+0x3ac>)
   18418:	2200      	movs	r2, #0
   1841a:	701a      	strb	r2, [r3, #0]
								}
								gsm_module_enter_sleep();				//this statement goes after sending AT command, to ignore the wakeup of the module done by sending AT Command.
   1841c:	4b56      	ldr	r3, [pc, #344]	; (18578 <vTask_GSM_service+0x444>)
   1841e:	4798      	blx	r3
							}
						}

						if(isGSMModuleAwake)
   18420:	4b3f      	ldr	r3, [pc, #252]	; (18520 <vTask_GSM_service+0x3ec>)
   18422:	781b      	ldrb	r3, [r3, #0]
   18424:	b2db      	uxtb	r3, r3
   18426:	2b00      	cmp	r3, #0
   18428:	d017      	beq.n	1845a <vTask_GSM_service+0x326>
						{
							////Update network
							if (((xTaskGetTickCount() - network_update_time)>= (1*60*1000)))
   1842a:	4b4a      	ldr	r3, [pc, #296]	; (18554 <vTask_GSM_service+0x420>)
   1842c:	4798      	blx	r3
   1842e:	0002      	movs	r2, r0
   18430:	2396      	movs	r3, #150	; 0x96
   18432:	005b      	lsls	r3, r3, #1
   18434:	18fb      	adds	r3, r7, r3
   18436:	681b      	ldr	r3, [r3, #0]
   18438:	1ad3      	subs	r3, r2, r3
   1843a:	4a50      	ldr	r2, [pc, #320]	; (1857c <vTask_GSM_service+0x448>)
   1843c:	4293      	cmp	r3, r2
   1843e:	d90c      	bls.n	1845a <vTask_GSM_service+0x326>
							{
								network_update_time = xTaskGetTickCount();
   18440:	4b44      	ldr	r3, [pc, #272]	; (18554 <vTask_GSM_service+0x420>)
   18442:	4798      	blx	r3
   18444:	0003      	movs	r3, r0
   18446:	2296      	movs	r2, #150	; 0x96
   18448:	0052      	lsls	r2, r2, #1
   1844a:	18ba      	adds	r2, r7, r2
   1844c:	6013      	str	r3, [r2, #0]
								Signal_Strength = gsm_getsignalstrength();
   1844e:	4b40      	ldr	r3, [pc, #256]	; (18550 <vTask_GSM_service+0x41c>)
   18450:	4798      	blx	r3
   18452:	0003      	movs	r3, r0
   18454:	001a      	movs	r2, r3
   18456:	4b13      	ldr	r3, [pc, #76]	; (184a4 <vTask_GSM_service+0x370>)
   18458:	701a      	strb	r2, [r3, #0]
							}
						}
						
						setObtainEvent();
   1845a:	4b49      	ldr	r3, [pc, #292]	; (18580 <vTask_GSM_service+0x44c>)
   1845c:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   1845e:	4b1c      	ldr	r3, [pc, #112]	; (184d0 <vTask_GSM_service+0x39c>)
   18460:	781b      	ldrb	r3, [r3, #0]
   18462:	2b00      	cmp	r3, #0
   18464:	d104      	bne.n	18470 <vTask_GSM_service+0x33c>
   18466:	4b25      	ldr	r3, [pc, #148]	; (184fc <vTask_GSM_service+0x3c8>)
   18468:	781b      	ldrb	r3, [r3, #0]
   1846a:	2b00      	cmp	r3, #0
   1846c:	d100      	bne.n	18470 <vTask_GSM_service+0x33c>
   1846e:	e0d4      	b.n	1861a <vTask_GSM_service+0x4e6>
						{
							operateOnStagedEvent();
   18470:	4b44      	ldr	r3, [pc, #272]	; (18584 <vTask_GSM_service+0x450>)
   18472:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
   18474:	e0d1      	b.n	1861a <vTask_GSM_service+0x4e6>
   18476:	46c0      	nop			; (mov r8, r8)
   18478:	41004480 	.word	0x41004480
   1847c:	00014319 	.word	0x00014319
   18480:	000237d1 	.word	0x000237d1
   18484:	00012165 	.word	0x00012165
   18488:	2000099d 	.word	0x2000099d
   1848c:	2000099c 	.word	0x2000099c
   18490:	2000097f 	.word	0x2000097f
   18494:	2000088e 	.word	0x2000088e
   18498:	200009c8 	.word	0x200009c8
   1849c:	200009d5 	.word	0x200009d5
   184a0:	200008cc 	.word	0x200008cc
   184a4:	20000989 	.word	0x20000989
   184a8:	200009da 	.word	0x200009da
   184ac:	20000a66 	.word	0x20000a66
   184b0:	20000964 	.word	0x20000964
   184b4:	200008e4 	.word	0x200008e4
   184b8:	200009e0 	.word	0x200009e0
   184bc:	2000098f 	.word	0x2000098f
   184c0:	2000099e 	.word	0x2000099e
   184c4:	20000944 	.word	0x20000944
   184c8:	20000972 	.word	0x20000972
   184cc:	20000977 	.word	0x20000977
   184d0:	200009d7 	.word	0x200009d7
   184d4:	20000975 	.word	0x20000975
   184d8:	20000998 	.word	0x20000998
   184dc:	200008e5 	.word	0x200008e5
   184e0:	20000a65 	.word	0x20000a65
   184e4:	20000a44 	.word	0x20000a44
   184e8:	2000082c 	.word	0x2000082c
   184ec:	20000a0f 	.word	0x20000a0f
   184f0:	2000092c 	.word	0x2000092c
   184f4:	2000092d 	.word	0x2000092d
   184f8:	200009d8 	.word	0x200009d8
   184fc:	2000098e 	.word	0x2000098e
   18500:	20000943 	.word	0x20000943
   18504:	200009d4 	.word	0x200009d4
   18508:	0001433d 	.word	0x0001433d
   1850c:	41004490 	.word	0x41004490
   18510:	00000bb8 	.word	0x00000bb8
   18514:	00020969 	.word	0x00020969
   18518:	fffeffff 	.word	0xfffeffff
   1851c:	00001388 	.word	0x00001388
   18520:	20000884 	.word	0x20000884
   18524:	00014381 	.word	0x00014381
   18528:	20000894 	.word	0x20000894
   1852c:	20000890 	.word	0x20000890
   18530:	00012319 	.word	0x00012319
   18534:	00014a89 	.word	0x00014a89
   18538:	20000963 	.word	0x20000963
   1853c:	00014521 	.word	0x00014521
   18540:	00014d7d 	.word	0x00014d7d
   18544:	00012621 	.word	0x00012621
   18548:	000133a5 	.word	0x000133a5
   1854c:	00012b3d 	.word	0x00012b3d
   18550:	000128ed 	.word	0x000128ed
   18554:	00020ccd 	.word	0x00020ccd
   18558:	200008de 	.word	0x200008de
   1855c:	200007f8 	.word	0x200007f8
   18560:	0001800d 	.word	0x0001800d
   18564:	0001270d 	.word	0x0001270d
   18568:	0001baa5 	.word	0x0001baa5
   1856c:	0001239d 	.word	0x0001239d
   18570:	0001d551 	.word	0x0001d551
   18574:	00012b6d 	.word	0x00012b6d
   18578:	00012389 	.word	0x00012389
   1857c:	0000ea5f 	.word	0x0000ea5f
   18580:	000143d5 	.word	0x000143d5
   18584:	00014415 	.word	0x00014415
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
   18588:	4bbf      	ldr	r3, [pc, #764]	; (18888 <vTask_GSM_service+0x754>)
   1858a:	781b      	ldrb	r3, [r3, #0]
   1858c:	b2db      	uxtb	r3, r3
   1858e:	2b49      	cmp	r3, #73	; 0x49
   18590:	d004      	beq.n	1859c <vTask_GSM_service+0x468>
   18592:	4bbd      	ldr	r3, [pc, #756]	; (18888 <vTask_GSM_service+0x754>)
   18594:	781b      	ldrb	r3, [r3, #0]
   18596:	b2db      	uxtb	r3, r3
   18598:	2b52      	cmp	r3, #82	; 0x52
   1859a:	d13f      	bne.n	1861c <vTask_GSM_service+0x4e8>
					{
						if (callTimerExpire())
   1859c:	4bbb      	ldr	r3, [pc, #748]	; (1888c <vTask_GSM_service+0x758>)
   1859e:	4798      	blx	r3
   185a0:	1e03      	subs	r3, r0, #0
   185a2:	d00e      	beq.n	185c2 <vTask_GSM_service+0x48e>
						{
							char t1 = actionType;
   185a4:	2393      	movs	r3, #147	; 0x93
   185a6:	005b      	lsls	r3, r3, #1
   185a8:	18fb      	adds	r3, r7, r3
   185aa:	4ab9      	ldr	r2, [pc, #740]	; (18890 <vTask_GSM_service+0x75c>)
   185ac:	7812      	ldrb	r2, [r2, #0]
   185ae:	701a      	strb	r2, [r3, #0]
							endCall();
   185b0:	4bb8      	ldr	r3, [pc, #736]	; (18894 <vTask_GSM_service+0x760>)
   185b2:	4798      	blx	r3
							checkRespSMS(t1);
   185b4:	2393      	movs	r3, #147	; 0x93
   185b6:	005b      	lsls	r3, r3, #1
   185b8:	18fb      	adds	r3, r7, r3
   185ba:	781b      	ldrb	r3, [r3, #0]
   185bc:	0018      	movs	r0, r3
   185be:	4bb6      	ldr	r3, [pc, #728]	; (18898 <vTask_GSM_service+0x764>)
   185c0:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
   185c2:	4bb6      	ldr	r3, [pc, #728]	; (1889c <vTask_GSM_service+0x768>)
   185c4:	78db      	ldrb	r3, [r3, #3]
   185c6:	2b00      	cmp	r3, #0
   185c8:	d020      	beq.n	1860c <vTask_GSM_service+0x4d8>
						{
							if(m2mEvent && callAccepted)
   185ca:	4bb5      	ldr	r3, [pc, #724]	; (188a0 <vTask_GSM_service+0x76c>)
   185cc:	781b      	ldrb	r3, [r3, #0]
   185ce:	2b00      	cmp	r3, #0
   185d0:	d01c      	beq.n	1860c <vTask_GSM_service+0x4d8>
   185d2:	4bb4      	ldr	r3, [pc, #720]	; (188a4 <vTask_GSM_service+0x770>)
   185d4:	781b      	ldrb	r3, [r3, #0]
   185d6:	2b00      	cmp	r3, #0
   185d8:	d018      	beq.n	1860c <vTask_GSM_service+0x4d8>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
   185da:	4bb3      	ldr	r3, [pc, #716]	; (188a8 <vTask_GSM_service+0x774>)
   185dc:	781b      	ldrb	r3, [r3, #0]
   185de:	2201      	movs	r2, #1
   185e0:	4053      	eors	r3, r2
   185e2:	b2db      	uxtb	r3, r3
   185e4:	2b00      	cmp	r3, #0
   185e6:	d011      	beq.n	1860c <vTask_GSM_service+0x4d8>
   185e8:	4bb0      	ldr	r3, [pc, #704]	; (188ac <vTask_GSM_service+0x778>)
   185ea:	4798      	blx	r3
   185ec:	0002      	movs	r2, r0
   185ee:	4bb0      	ldr	r3, [pc, #704]	; (188b0 <vTask_GSM_service+0x77c>)
   185f0:	681b      	ldr	r3, [r3, #0]
   185f2:	1ad2      	subs	r2, r2, r3
   185f4:	23fa      	movs	r3, #250	; 0xfa
   185f6:	00db      	lsls	r3, r3, #3
   185f8:	429a      	cmp	r2, r3
   185fa:	d907      	bls.n	1860c <vTask_GSM_service+0x4d8>
								{
									keyPressed=true;
   185fc:	4baa      	ldr	r3, [pc, #680]	; (188a8 <vTask_GSM_service+0x774>)
   185fe:	2201      	movs	r2, #1
   18600:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
   18602:	4bac      	ldr	r3, [pc, #688]	; (188b4 <vTask_GSM_service+0x780>)
   18604:	781b      	ldrb	r3, [r3, #0]
   18606:	0018      	movs	r0, r3
   18608:	4bab      	ldr	r3, [pc, #684]	; (188b8 <vTask_GSM_service+0x784>)
   1860a:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
   1860c:	4bab      	ldr	r3, [pc, #684]	; (188bc <vTask_GSM_service+0x788>)
   1860e:	4798      	blx	r3
   18610:	1e03      	subs	r3, r0, #0
   18612:	d003      	beq.n	1861c <vTask_GSM_service+0x4e8>
						{
							triggerPlaySound();
   18614:	4baa      	ldr	r3, [pc, #680]	; (188c0 <vTask_GSM_service+0x78c>)
   18616:	4798      	blx	r3
   18618:	e000      	b.n	1861c <vTask_GSM_service+0x4e8>
						if (eventStaged || m2mEventStaged)
   1861a:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
   1861c:	4ba9      	ldr	r3, [pc, #676]	; (188c4 <vTask_GSM_service+0x790>)
   1861e:	2298      	movs	r2, #152	; 0x98
   18620:	0052      	lsls	r2, r2, #1
   18622:	4694      	mov	ip, r2
   18624:	44bc      	add	ip, r7
   18626:	4463      	add	r3, ip
   18628:	0018      	movs	r0, r3
   1862a:	2340      	movs	r3, #64	; 0x40
   1862c:	001a      	movs	r2, r3
   1862e:	2100      	movs	r1, #0
   18630:	4ba5      	ldr	r3, [pc, #660]	; (188c8 <vTask_GSM_service+0x794>)
   18632:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
   18634:	230c      	movs	r3, #12
   18636:	18fb      	adds	r3, r7, r3
   18638:	2140      	movs	r1, #64	; 0x40
   1863a:	0018      	movs	r0, r3
   1863c:	4ba3      	ldr	r3, [pc, #652]	; (188cc <vTask_GSM_service+0x798>)
   1863e:	4798      	blx	r3
   18640:	1e03      	subs	r3, r0, #0
   18642:	d100      	bne.n	18646 <vTask_GSM_service+0x512>
   18644:	e636      	b.n	182b4 <vTask_GSM_service+0x180>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
   18646:	2326      	movs	r3, #38	; 0x26
   18648:	33ff      	adds	r3, #255	; 0xff
   1864a:	18fc      	adds	r4, r7, r3
   1864c:	230c      	movs	r3, #12
   1864e:	18fb      	adds	r3, r7, r3
   18650:	0018      	movs	r0, r3
   18652:	4b9f      	ldr	r3, [pc, #636]	; (188d0 <vTask_GSM_service+0x79c>)
   18654:	4798      	blx	r3
   18656:	0003      	movs	r3, r0
   18658:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
   1865a:	2326      	movs	r3, #38	; 0x26
   1865c:	33ff      	adds	r3, #255	; 0xff
   1865e:	18fb      	adds	r3, r7, r3
   18660:	781b      	ldrb	r3, [r3, #0]
   18662:	2b00      	cmp	r3, #0
   18664:	d100      	bne.n	18668 <vTask_GSM_service+0x534>
   18666:	e0f6      	b.n	18856 <vTask_GSM_service+0x722>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
   18668:	234c      	movs	r3, #76	; 0x4c
   1866a:	18fa      	adds	r2, r7, r3
   1866c:	1c79      	adds	r1, r7, #1
   1866e:	31ff      	adds	r1, #255	; 0xff
   18670:	2326      	movs	r3, #38	; 0x26
   18672:	33ff      	adds	r3, #255	; 0xff
   18674:	18fb      	adds	r3, r7, r3
   18676:	7818      	ldrb	r0, [r3, #0]
   18678:	23a0      	movs	r3, #160	; 0xa0
   1867a:	9300      	str	r3, [sp, #0]
   1867c:	0013      	movs	r3, r2
   1867e:	220f      	movs	r2, #15
   18680:	4c94      	ldr	r4, [pc, #592]	; (188d4 <vTask_GSM_service+0x7a0>)
   18682:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
   18684:	232c      	movs	r3, #44	; 0x2c
   18686:	33ff      	adds	r3, #255	; 0xff
   18688:	18fc      	adds	r4, r7, r3
   1868a:	1c7b      	adds	r3, r7, #1
   1868c:	33ff      	adds	r3, #255	; 0xff
   1868e:	0018      	movs	r0, r3
   18690:	4b91      	ldr	r3, [pc, #580]	; (188d8 <vTask_GSM_service+0x7a4>)
   18692:	4798      	blx	r3
   18694:	0003      	movs	r3, r0
   18696:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
   18698:	2392      	movs	r3, #146	; 0x92
   1869a:	005b      	lsls	r3, r3, #1
   1869c:	18fc      	adds	r4, r7, r3
   1869e:	1c7b      	adds	r3, r7, #1
   186a0:	33ff      	adds	r3, #255	; 0xff
   186a2:	0018      	movs	r0, r3
   186a4:	4b8d      	ldr	r3, [pc, #564]	; (188dc <vTask_GSM_service+0x7a8>)
   186a6:	4798      	blx	r3
   186a8:	0003      	movs	r3, r0
   186aa:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
   186ac:	2324      	movs	r3, #36	; 0x24
   186ae:	33ff      	adds	r3, #255	; 0xff
   186b0:	18fc      	adds	r4, r7, r3
   186b2:	1c7b      	adds	r3, r7, #1
   186b4:	33ff      	adds	r3, #255	; 0xff
   186b6:	0018      	movs	r0, r3
   186b8:	4b89      	ldr	r3, [pc, #548]	; (188e0 <vTask_GSM_service+0x7ac>)
   186ba:	4798      	blx	r3
   186bc:	0003      	movs	r3, r0
   186be:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
   186c0:	2395      	movs	r3, #149	; 0x95
   186c2:	005b      	lsls	r3, r3, #1
   186c4:	18fb      	adds	r3, r7, r3
   186c6:	2201      	movs	r2, #1
   186c8:	701a      	strb	r2, [r3, #0]
							
							if(admin)
   186ca:	232c      	movs	r3, #44	; 0x2c
   186cc:	33ff      	adds	r3, #255	; 0xff
   186ce:	18fb      	adds	r3, r7, r3
   186d0:	781b      	ldrb	r3, [r3, #0]
   186d2:	2b00      	cmp	r3, #0
   186d4:	d006      	beq.n	186e4 <vTask_GSM_service+0x5b0>
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
   186d6:	4b83      	ldr	r3, [pc, #524]	; (188e4 <vTask_GSM_service+0x7b0>)
   186d8:	2200      	movs	r2, #0
   186da:	0019      	movs	r1, r3
   186dc:	2004      	movs	r0, #4
   186de:	4b82      	ldr	r3, [pc, #520]	; (188e8 <vTask_GSM_service+0x7b4>)
   186e0:	4798      	blx	r3
   186e2:	e006      	b.n	186f2 <vTask_GSM_service+0x5be>
							}
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
   186e4:	1c7b      	adds	r3, r7, #1
   186e6:	33ff      	adds	r3, #255	; 0xff
   186e8:	2200      	movs	r2, #0
   186ea:	0019      	movs	r1, r3
   186ec:	2004      	movs	r0, #4
   186ee:	4b7e      	ldr	r3, [pc, #504]	; (188e8 <vTask_GSM_service+0x7b4>)
   186f0:	4798      	blx	r3
							}
							
							StringtoUpperCase(Received_SMS);
   186f2:	234c      	movs	r3, #76	; 0x4c
   186f4:	18fb      	adds	r3, r7, r3
   186f6:	0018      	movs	r0, r3
   186f8:	4b7c      	ldr	r3, [pc, #496]	; (188ec <vTask_GSM_service+0x7b8>)
   186fa:	4798      	blx	r3
							
							if(!admin)
   186fc:	232c      	movs	r3, #44	; 0x2c
   186fe:	33ff      	adds	r3, #255	; 0xff
   18700:	18fb      	adds	r3, r7, r3
   18702:	781b      	ldrb	r3, [r3, #0]
   18704:	2201      	movs	r2, #1
   18706:	4053      	eors	r3, r2
   18708:	b2db      	uxtb	r3, r3
   1870a:	2b00      	cmp	r3, #0
   1870c:	d009      	beq.n	18722 <vTask_GSM_service+0x5ee>
							{
								admin = checkSMSForPassCode(Received_SMS);
   1870e:	232c      	movs	r3, #44	; 0x2c
   18710:	33ff      	adds	r3, #255	; 0xff
   18712:	18fc      	adds	r4, r7, r3
   18714:	234c      	movs	r3, #76	; 0x4c
   18716:	18fb      	adds	r3, r7, r3
   18718:	0018      	movs	r0, r3
   1871a:	4b75      	ldr	r3, [pc, #468]	; (188f0 <vTask_GSM_service+0x7bc>)
   1871c:	4798      	blx	r3
   1871e:	0003      	movs	r3, r0
   18720:	7023      	strb	r3, [r4, #0]
							}

							
							if (admin || primaryUser || alterUsr)
   18722:	232c      	movs	r3, #44	; 0x2c
   18724:	33ff      	adds	r3, #255	; 0xff
   18726:	18fb      	adds	r3, r7, r3
   18728:	781b      	ldrb	r3, [r3, #0]
   1872a:	2b00      	cmp	r3, #0
   1872c:	d10b      	bne.n	18746 <vTask_GSM_service+0x612>
   1872e:	2392      	movs	r3, #146	; 0x92
   18730:	005b      	lsls	r3, r3, #1
   18732:	18fb      	adds	r3, r7, r3
   18734:	781b      	ldrb	r3, [r3, #0]
   18736:	2b00      	cmp	r3, #0
   18738:	d105      	bne.n	18746 <vTask_GSM_service+0x612>
   1873a:	2324      	movs	r3, #36	; 0x24
   1873c:	33ff      	adds	r3, #255	; 0xff
   1873e:	18fb      	adds	r3, r7, r3
   18740:	781b      	ldrb	r3, [r3, #0]
   18742:	2b00      	cmp	r3, #0
   18744:	d031      	beq.n	187aa <vTask_GSM_service+0x676>
							{
								if(StringstartsWith(Received_SMS,"#"))
   18746:	4a6b      	ldr	r2, [pc, #428]	; (188f4 <vTask_GSM_service+0x7c0>)
   18748:	234c      	movs	r3, #76	; 0x4c
   1874a:	18fb      	adds	r3, r7, r3
   1874c:	0011      	movs	r1, r2
   1874e:	0018      	movs	r0, r3
   18750:	4b69      	ldr	r3, [pc, #420]	; (188f8 <vTask_GSM_service+0x7c4>)
   18752:	4798      	blx	r3
   18754:	1e03      	subs	r3, r0, #0
   18756:	d013      	beq.n	18780 <vTask_GSM_service+0x64c>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
   18758:	234c      	movs	r3, #76	; 0x4c
   1875a:	18fc      	adds	r4, r7, r3
   1875c:	3401      	adds	r4, #1
   1875e:	234c      	movs	r3, #76	; 0x4c
   18760:	18fb      	adds	r3, r7, r3
   18762:	0018      	movs	r0, r3
   18764:	4b65      	ldr	r3, [pc, #404]	; (188fc <vTask_GSM_service+0x7c8>)
   18766:	4798      	blx	r3
   18768:	0002      	movs	r2, r0
   1876a:	234c      	movs	r3, #76	; 0x4c
   1876c:	18fb      	adds	r3, r7, r3
   1876e:	0021      	movs	r1, r4
   18770:	0018      	movs	r0, r3
   18772:	4b63      	ldr	r3, [pc, #396]	; (18900 <vTask_GSM_service+0x7cc>)
   18774:	4798      	blx	r3
									response_sms_processed_cmd=false;
   18776:	2395      	movs	r3, #149	; 0x95
   18778:	005b      	lsls	r3, r3, #1
   1877a:	18fb      	adds	r3, r7, r3
   1877c:	2200      	movs	r2, #0
   1877e:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
   18780:	2324      	movs	r3, #36	; 0x24
   18782:	33ff      	adds	r3, #255	; 0xff
   18784:	18fb      	adds	r3, r7, r3
   18786:	781c      	ldrb	r4, [r3, #0]
   18788:	2395      	movs	r3, #149	; 0x95
   1878a:	005b      	lsls	r3, r3, #1
   1878c:	18fb      	adds	r3, r7, r3
   1878e:	781a      	ldrb	r2, [r3, #0]
   18790:	232c      	movs	r3, #44	; 0x2c
   18792:	33ff      	adds	r3, #255	; 0xff
   18794:	18fb      	adds	r3, r7, r3
   18796:	7819      	ldrb	r1, [r3, #0]
   18798:	234c      	movs	r3, #76	; 0x4c
   1879a:	18f8      	adds	r0, r7, r3
   1879c:	1c7b      	adds	r3, r7, #1
   1879e:	33ff      	adds	r3, #255	; 0xff
   187a0:	9300      	str	r3, [sp, #0]
   187a2:	0023      	movs	r3, r4
   187a4:	4c57      	ldr	r4, [pc, #348]	; (18904 <vTask_GSM_service+0x7d0>)
   187a6:	47a0      	blx	r4
   187a8:	e053      	b.n	18852 <vTask_GSM_service+0x71e>
							}
							else if(isM2MNumber(phone_number))
   187aa:	1c7b      	adds	r3, r7, #1
   187ac:	33ff      	adds	r3, #255	; 0xff
   187ae:	0018      	movs	r0, r3
   187b0:	4b55      	ldr	r3, [pc, #340]	; (18908 <vTask_GSM_service+0x7d4>)
   187b2:	4798      	blx	r3
   187b4:	1e03      	subs	r3, r0, #0
   187b6:	d01f      	beq.n	187f8 <vTask_GSM_service+0x6c4>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
   187b8:	4a54      	ldr	r2, [pc, #336]	; (1890c <vTask_GSM_service+0x7d8>)
   187ba:	234c      	movs	r3, #76	; 0x4c
   187bc:	18fb      	adds	r3, r7, r3
   187be:	0011      	movs	r1, r2
   187c0:	0018      	movs	r0, r3
   187c2:	4b4d      	ldr	r3, [pc, #308]	; (188f8 <vTask_GSM_service+0x7c4>)
   187c4:	4798      	blx	r3
   187c6:	1e03      	subs	r3, r0, #0
   187c8:	d043      	beq.n	18852 <vTask_GSM_service+0x71e>
								{
									setM2MVerify(true);
   187ca:	2001      	movs	r0, #1
   187cc:	4b50      	ldr	r3, [pc, #320]	; (18910 <vTask_GSM_service+0x7dc>)
   187ce:	4798      	blx	r3
									getM2MNumber(phone_number);
   187d0:	1c7b      	adds	r3, r7, #1
   187d2:	33ff      	adds	r3, #255	; 0xff
   187d4:	0018      	movs	r0, r3
   187d6:	4b4f      	ldr	r3, [pc, #316]	; (18914 <vTask_GSM_service+0x7e0>)
   187d8:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   187da:	1c7b      	adds	r3, r7, #1
   187dc:	33ff      	adds	r3, #255	; 0xff
   187de:	2200      	movs	r2, #0
   187e0:	0019      	movs	r1, r3
   187e2:	2005      	movs	r0, #5
   187e4:	4b40      	ldr	r3, [pc, #256]	; (188e8 <vTask_GSM_service+0x7b4>)
   187e6:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
   187e8:	4a4b      	ldr	r2, [pc, #300]	; (18918 <vTask_GSM_service+0x7e4>)
   187ea:	1c7b      	adds	r3, r7, #1
   187ec:	33ff      	adds	r3, #255	; 0xff
   187ee:	0011      	movs	r1, r2
   187f0:	0018      	movs	r0, r3
   187f2:	4b4a      	ldr	r3, [pc, #296]	; (1891c <vTask_GSM_service+0x7e8>)
   187f4:	4798      	blx	r3
   187f6:	e02c      	b.n	18852 <vTask_GSM_service+0x71e>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
   187f8:	4b28      	ldr	r3, [pc, #160]	; (1889c <vTask_GSM_service+0x768>)
   187fa:	78db      	ldrb	r3, [r3, #3]
   187fc:	2b00      	cmp	r3, #0
   187fe:	d028      	beq.n	18852 <vTask_GSM_service+0x71e>
   18800:	1c7b      	adds	r3, r7, #1
   18802:	33ff      	adds	r3, #255	; 0xff
   18804:	0018      	movs	r0, r3
   18806:	4b46      	ldr	r3, [pc, #280]	; (18920 <vTask_GSM_service+0x7ec>)
   18808:	4798      	blx	r3
   1880a:	1e03      	subs	r3, r0, #0
   1880c:	d021      	beq.n	18852 <vTask_GSM_service+0x71e>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
   1880e:	4a42      	ldr	r2, [pc, #264]	; (18918 <vTask_GSM_service+0x7e4>)
   18810:	234c      	movs	r3, #76	; 0x4c
   18812:	18fb      	adds	r3, r7, r3
   18814:	0011      	movs	r1, r2
   18816:	0018      	movs	r0, r3
   18818:	4b37      	ldr	r3, [pc, #220]	; (188f8 <vTask_GSM_service+0x7c4>)
   1881a:	4798      	blx	r3
   1881c:	1e03      	subs	r3, r0, #0
   1881e:	d018      	beq.n	18852 <vTask_GSM_service+0x71e>
								{
									setM2MRemoteVerified(true);
   18820:	2001      	movs	r0, #1
   18822:	4b40      	ldr	r3, [pc, #256]	; (18924 <vTask_GSM_service+0x7f0>)
   18824:	4798      	blx	r3
									saveM2MSettings(true);
   18826:	2001      	movs	r0, #1
   18828:	4b3f      	ldr	r3, [pc, #252]	; (18928 <vTask_GSM_service+0x7f4>)
   1882a:	4798      	blx	r3
									getActiveNumber(phone_number);
   1882c:	1c7b      	adds	r3, r7, #1
   1882e:	33ff      	adds	r3, #255	; 0xff
   18830:	0018      	movs	r0, r3
   18832:	4b3e      	ldr	r3, [pc, #248]	; (1892c <vTask_GSM_service+0x7f8>)
   18834:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
   18836:	1c7b      	adds	r3, r7, #1
   18838:	33ff      	adds	r3, #255	; 0xff
   1883a:	2200      	movs	r2, #0
   1883c:	0019      	movs	r1, r3
   1883e:	2005      	movs	r0, #5
   18840:	4b29      	ldr	r3, [pc, #164]	; (188e8 <vTask_GSM_service+0x7b4>)
   18842:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
   18844:	4a3a      	ldr	r2, [pc, #232]	; (18930 <vTask_GSM_service+0x7fc>)
   18846:	1c7b      	adds	r3, r7, #1
   18848:	33ff      	adds	r3, #255	; 0xff
   1884a:	0011      	movs	r1, r2
   1884c:	0018      	movs	r0, r3
   1884e:	4b33      	ldr	r3, [pc, #204]	; (1891c <vTask_GSM_service+0x7e8>)
   18850:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
   18852:	4b38      	ldr	r3, [pc, #224]	; (18934 <vTask_GSM_service+0x800>)
   18854:	4798      	blx	r3


						/************************************************************************/
						/* Automatic Detection of Network Using CSQN URC, and continue to next loop*/
						/************************************************************************/
						if(autoNetworkDetection && gsm_responseLine_isCSQN(response,&Signal_Strength))
   18856:	4b38      	ldr	r3, [pc, #224]	; (18938 <vTask_GSM_service+0x804>)
   18858:	781b      	ldrb	r3, [r3, #0]
   1885a:	2b00      	cmp	r3, #0
   1885c:	d076      	beq.n	1894c <vTask_GSM_service+0x818>
   1885e:	4a37      	ldr	r2, [pc, #220]	; (1893c <vTask_GSM_service+0x808>)
   18860:	230c      	movs	r3, #12
   18862:	18fb      	adds	r3, r7, r3
   18864:	0011      	movs	r1, r2
   18866:	0018      	movs	r0, r3
   18868:	4b35      	ldr	r3, [pc, #212]	; (18940 <vTask_GSM_service+0x80c>)
   1886a:	4798      	blx	r3
   1886c:	1e03      	subs	r3, r0, #0
   1886e:	d06d      	beq.n	1894c <vTask_GSM_service+0x818>
						{
							lastGSMCommunicationTime=lastToLastGSMCommunicationTime;
   18870:	4b34      	ldr	r3, [pc, #208]	; (18944 <vTask_GSM_service+0x810>)
   18872:	681a      	ldr	r2, [r3, #0]
   18874:	4b34      	ldr	r3, [pc, #208]	; (18948 <vTask_GSM_service+0x814>)
   18876:	601a      	str	r2, [r3, #0]
							network_update_time = xTaskGetTickCount();
   18878:	4b0c      	ldr	r3, [pc, #48]	; (188ac <vTask_GSM_service+0x778>)
   1887a:	4798      	blx	r3
   1887c:	0003      	movs	r3, r0
   1887e:	2296      	movs	r2, #150	; 0x96
   18880:	0052      	lsls	r2, r2, #1
   18882:	18ba      	adds	r2, r7, r2
   18884:	6013      	str	r3, [r2, #0]
   18886:	e515      	b.n	182b4 <vTask_GSM_service+0x180>
   18888:	200009e0 	.word	0x200009e0
   1888c:	00014a89 	.word	0x00014a89
   18890:	20000963 	.word	0x20000963
   18894:	00014521 	.word	0x00014521
   18898:	00014d7d 	.word	0x00014d7d
   1889c:	2000082c 	.word	0x2000082c
   188a0:	20000943 	.word	0x20000943
   188a4:	2000099e 	.word	0x2000099e
   188a8:	200009d4 	.word	0x200009d4
   188ac:	00020ccd 	.word	0x00020ccd
   188b0:	20000a18 	.word	0x20000a18
   188b4:	2000092d 	.word	0x2000092d
   188b8:	00017e81 	.word	0x00017e81
   188bc:	000148e1 	.word	0x000148e1
   188c0:	0001492d 	.word	0x0001492d
   188c4:	fffffedc 	.word	0xfffffedc
   188c8:	00029657 	.word	0x00029657
   188cc:	000134bd 	.word	0x000134bd
   188d0:	00013561 	.word	0x00013561
   188d4:	00012cc9 	.word	0x00012cc9
   188d8:	00011a79 	.word	0x00011a79
   188dc:	0001099d 	.word	0x0001099d
   188e0:	00010a0d 	.word	0x00010a0d
   188e4:	0002afa8 	.word	0x0002afa8
   188e8:	0001da2d 	.word	0x0001da2d
   188ec:	000141a1 	.word	0x000141a1
   188f0:	00017f15 	.word	0x00017f15
   188f4:	0002afb0 	.word	0x0002afb0
   188f8:	0001420d 	.word	0x0001420d
   188fc:	000298e7 	.word	0x000298e7
   18900:	00029633 	.word	0x00029633
   18904:	00014ff9 	.word	0x00014ff9
   18908:	00010a55 	.word	0x00010a55
   1890c:	0002af4c 	.word	0x0002af4c
   18910:	00010b45 	.word	0x00010b45
   18914:	00010acd 	.word	0x00010acd
   18918:	0002afb4 	.word	0x0002afb4
   1891c:	00012b9d 	.word	0x00012b9d
   18920:	00010a91 	.word	0x00010a91
   18924:	00010b95 	.word	0x00010b95
   18928:	00010be5 	.word	0x00010be5
   1892c:	00010d21 	.word	0x00010d21
   18930:	0002afbc 	.word	0x0002afbc
   18934:	0001270d 	.word	0x0001270d
   18938:	20000a65 	.word	0x20000a65
   1893c:	20000989 	.word	0x20000989
   18940:	0001360d 	.word	0x0001360d
   18944:	20000890 	.word	0x20000890
   18948:	20000894 	.word	0x20000894
							continue;
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
   1894c:	4bd8      	ldr	r3, [pc, #864]	; (18cb0 <vTask_GSM_service+0xb7c>)
   1894e:	781b      	ldrb	r3, [r3, #0]
   18950:	2201      	movs	r2, #1
   18952:	4053      	eors	r3, r2
   18954:	b2db      	uxtb	r3, r3
   18956:	2b00      	cmp	r3, #0
   18958:	d100      	bne.n	1895c <vTask_GSM_service+0x828>
   1895a:	e099      	b.n	18a90 <vTask_GSM_service+0x95c>
   1895c:	4bd5      	ldr	r3, [pc, #852]	; (18cb4 <vTask_GSM_service+0xb80>)
   1895e:	781b      	ldrb	r3, [r3, #0]
   18960:	b2db      	uxtb	r3, r3
   18962:	2b4e      	cmp	r3, #78	; 0x4e
   18964:	d005      	beq.n	18972 <vTask_GSM_service+0x83e>
   18966:	4bd3      	ldr	r3, [pc, #844]	; (18cb4 <vTask_GSM_service+0xb80>)
   18968:	781b      	ldrb	r3, [r3, #0]
   1896a:	b2db      	uxtb	r3, r3
   1896c:	2b52      	cmp	r3, #82	; 0x52
   1896e:	d000      	beq.n	18972 <vTask_GSM_service+0x83e>
   18970:	e08e      	b.n	18a90 <vTask_GSM_service+0x95c>
   18972:	4bd1      	ldr	r3, [pc, #836]	; (18cb8 <vTask_GSM_service+0xb84>)
   18974:	781b      	ldrb	r3, [r3, #0]
   18976:	b2db      	uxtb	r3, r3
   18978:	2b4e      	cmp	r3, #78	; 0x4e
   1897a:	d005      	beq.n	18988 <vTask_GSM_service+0x854>
   1897c:	4bce      	ldr	r3, [pc, #824]	; (18cb8 <vTask_GSM_service+0xb84>)
   1897e:	781b      	ldrb	r3, [r3, #0]
   18980:	b2db      	uxtb	r3, r3
   18982:	2b49      	cmp	r3, #73	; 0x49
   18984:	d000      	beq.n	18988 <vTask_GSM_service+0x854>
   18986:	e083      	b.n	18a90 <vTask_GSM_service+0x95c>
						{
							if (gsm_responseLine_isRinging(response))
   18988:	230c      	movs	r3, #12
   1898a:	18fb      	adds	r3, r7, r3
   1898c:	0018      	movs	r0, r3
   1898e:	4bcb      	ldr	r3, [pc, #812]	; (18cbc <vTask_GSM_service+0xb88>)
   18990:	4798      	blx	r3
   18992:	1e03      	subs	r3, r0, #0
   18994:	d071      	beq.n	18a7a <vTask_GSM_service+0x946>
							{
								currentStatus = 'R';
   18996:	4bc7      	ldr	r3, [pc, #796]	; (18cb4 <vTask_GSM_service+0xb80>)
   18998:	2252      	movs	r2, #82	; 0x52
   1899a:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
   1899c:	4bc6      	ldr	r3, [pc, #792]	; (18cb8 <vTask_GSM_service+0xb84>)
   1899e:	2249      	movs	r2, #73	; 0x49
   189a0:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
   189a2:	23ec      	movs	r3, #236	; 0xec
   189a4:	18fb      	adds	r3, r7, r3
   189a6:	0018      	movs	r0, r3
   189a8:	2314      	movs	r3, #20
   189aa:	001a      	movs	r2, r3
   189ac:	2100      	movs	r1, #0
   189ae:	4bc4      	ldr	r3, [pc, #784]	; (18cc0 <vTask_GSM_service+0xb8c>)
   189b0:	4798      	blx	r3
								inCall = true;
   189b2:	4bc4      	ldr	r3, [pc, #784]	; (18cc4 <vTask_GSM_service+0xb90>)
   189b4:	2201      	movs	r2, #1
   189b6:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
   189b8:	232a      	movs	r3, #42	; 0x2a
   189ba:	33ff      	adds	r3, #255	; 0xff
   189bc:	18fb      	adds	r3, r7, r3
   189be:	2200      	movs	r2, #0
   189c0:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
   189c2:	2394      	movs	r3, #148	; 0x94
   189c4:	005b      	lsls	r3, r3, #1
   189c6:	18fb      	adds	r3, r7, r3
   189c8:	2200      	movs	r2, #0
   189ca:	701a      	strb	r2, [r3, #0]
   189cc:	e02f      	b.n	18a2e <vTask_GSM_service+0x8fa>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
   189ce:	23fa      	movs	r3, #250	; 0xfa
   189d0:	005b      	lsls	r3, r3, #1
   189d2:	0018      	movs	r0, r3
   189d4:	4bbc      	ldr	r3, [pc, #752]	; (18cc8 <vTask_GSM_service+0xb94>)
   189d6:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
   189d8:	230c      	movs	r3, #12
   189da:	18fb      	adds	r3, r7, r3
   189dc:	2140      	movs	r1, #64	; 0x40
   189de:	0018      	movs	r0, r3
   189e0:	4bba      	ldr	r3, [pc, #744]	; (18ccc <vTask_GSM_service+0xb98>)
   189e2:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
   189e4:	23ec      	movs	r3, #236	; 0xec
   189e6:	18fa      	adds	r2, r7, r3
   189e8:	230c      	movs	r3, #12
   189ea:	18fb      	adds	r3, r7, r3
   189ec:	0011      	movs	r1, r2
   189ee:	0018      	movs	r0, r3
   189f0:	4bb7      	ldr	r3, [pc, #732]	; (18cd0 <vTask_GSM_service+0xb9c>)
   189f2:	4798      	blx	r3
   189f4:	1e03      	subs	r3, r0, #0
   189f6:	d011      	beq.n	18a1c <vTask_GSM_service+0x8e8>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
   189f8:	23ec      	movs	r3, #236	; 0xec
   189fa:	18fb      	adds	r3, r7, r3
   189fc:	2200      	movs	r2, #0
   189fe:	0019      	movs	r1, r3
   18a00:	2001      	movs	r0, #1
   18a02:	4bb4      	ldr	r3, [pc, #720]	; (18cd4 <vTask_GSM_service+0xba0>)
   18a04:	4798      	blx	r3
										new_call = true;
   18a06:	232a      	movs	r3, #42	; 0x2a
   18a08:	33ff      	adds	r3, #255	; 0xff
   18a0a:	18fb      	adds	r3, r7, r3
   18a0c:	2201      	movs	r2, #1
   18a0e:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
   18a10:	4bb1      	ldr	r3, [pc, #708]	; (18cd8 <vTask_GSM_service+0xba4>)
   18a12:	4798      	blx	r3
   18a14:	0002      	movs	r2, r0
   18a16:	4bb1      	ldr	r3, [pc, #708]	; (18cdc <vTask_GSM_service+0xba8>)
   18a18:	601a      	str	r2, [r3, #0]
										break;
   18a1a:	e00e      	b.n	18a3a <vTask_GSM_service+0x906>
								for (uint8_t i=0;i<4;i++)
   18a1c:	2394      	movs	r3, #148	; 0x94
   18a1e:	005b      	lsls	r3, r3, #1
   18a20:	18fb      	adds	r3, r7, r3
   18a22:	781a      	ldrb	r2, [r3, #0]
   18a24:	2394      	movs	r3, #148	; 0x94
   18a26:	005b      	lsls	r3, r3, #1
   18a28:	18fb      	adds	r3, r7, r3
   18a2a:	3201      	adds	r2, #1
   18a2c:	701a      	strb	r2, [r3, #0]
   18a2e:	2394      	movs	r3, #148	; 0x94
   18a30:	005b      	lsls	r3, r3, #1
   18a32:	18fb      	adds	r3, r7, r3
   18a34:	781b      	ldrb	r3, [r3, #0]
   18a36:	2b03      	cmp	r3, #3
   18a38:	d9c9      	bls.n	189ce <vTask_GSM_service+0x89a>
									}
								}
								if (new_call)
   18a3a:	232a      	movs	r3, #42	; 0x2a
   18a3c:	33ff      	adds	r3, #255	; 0xff
   18a3e:	18fb      	adds	r3, r7, r3
   18a40:	781b      	ldrb	r3, [r3, #0]
   18a42:	2b00      	cmp	r3, #0
   18a44:	d100      	bne.n	18a48 <vTask_GSM_service+0x914>
   18a46:	e188      	b.n	18d5a <vTask_GSM_service+0xc26>
								{
									new_call = false;
   18a48:	232a      	movs	r3, #42	; 0x2a
   18a4a:	33ff      	adds	r3, #255	; 0xff
   18a4c:	18fb      	adds	r3, r7, r3
   18a4e:	2200      	movs	r2, #0
   18a50:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
   18a52:	23ec      	movs	r3, #236	; 0xec
   18a54:	18fb      	adds	r3, r7, r3
   18a56:	0018      	movs	r0, r3
   18a58:	4ba1      	ldr	r3, [pc, #644]	; (18ce0 <vTask_GSM_service+0xbac>)
   18a5a:	4798      	blx	r3
   18a5c:	1e03      	subs	r3, r0, #0
   18a5e:	d009      	beq.n	18a74 <vTask_GSM_service+0x940>
									{
										acceptCall();
   18a60:	4ba0      	ldr	r3, [pc, #640]	; (18ce4 <vTask_GSM_service+0xbb0>)
   18a62:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
   18a64:	23ec      	movs	r3, #236	; 0xec
   18a66:	18fb      	adds	r3, r7, r3
   18a68:	2200      	movs	r2, #0
   18a6a:	0019      	movs	r1, r3
   18a6c:	2002      	movs	r0, #2
   18a6e:	4b99      	ldr	r3, [pc, #612]	; (18cd4 <vTask_GSM_service+0xba0>)
   18a70:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   18a72:	e172      	b.n	18d5a <vTask_GSM_service+0xc26>
									}
									else
									{
										endCall();
   18a74:	4b9c      	ldr	r3, [pc, #624]	; (18ce8 <vTask_GSM_service+0xbb4>)
   18a76:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   18a78:	e16f      	b.n	18d5a <vTask_GSM_service+0xc26>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
   18a7a:	230c      	movs	r3, #12
   18a7c:	18fb      	adds	r3, r7, r3
   18a7e:	0018      	movs	r0, r3
   18a80:	4b9a      	ldr	r3, [pc, #616]	; (18cec <vTask_GSM_service+0xbb8>)
   18a82:	4798      	blx	r3
   18a84:	1e03      	subs	r3, r0, #0
   18a86:	d100      	bne.n	18a8a <vTask_GSM_service+0x956>
   18a88:	e167      	b.n	18d5a <vTask_GSM_service+0xc26>
							{
								endCall();
   18a8a:	4b97      	ldr	r3, [pc, #604]	; (18ce8 <vTask_GSM_service+0xbb4>)
   18a8c:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
   18a8e:	e164      	b.n	18d5a <vTask_GSM_service+0xc26>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
   18a90:	4b87      	ldr	r3, [pc, #540]	; (18cb0 <vTask_GSM_service+0xb7c>)
   18a92:	781b      	ldrb	r3, [r3, #0]
   18a94:	2201      	movs	r2, #1
   18a96:	4053      	eors	r3, r2
   18a98:	b2db      	uxtb	r3, r3
   18a9a:	2b00      	cmp	r3, #0
   18a9c:	d045      	beq.n	18b2a <vTask_GSM_service+0x9f6>
   18a9e:	4b85      	ldr	r3, [pc, #532]	; (18cb4 <vTask_GSM_service+0xb80>)
   18aa0:	781b      	ldrb	r3, [r3, #0]
   18aa2:	b2db      	uxtb	r3, r3
   18aa4:	2b49      	cmp	r3, #73	; 0x49
   18aa6:	d140      	bne.n	18b2a <vTask_GSM_service+0x9f6>
   18aa8:	4b83      	ldr	r3, [pc, #524]	; (18cb8 <vTask_GSM_service+0xb84>)
   18aaa:	781b      	ldrb	r3, [r3, #0]
   18aac:	b2db      	uxtb	r3, r3
   18aae:	2b49      	cmp	r3, #73	; 0x49
   18ab0:	d13b      	bne.n	18b2a <vTask_GSM_service+0x9f6>
						{
							if (gsm_responseLine_isCallCut(response))
   18ab2:	230c      	movs	r3, #12
   18ab4:	18fb      	adds	r3, r7, r3
   18ab6:	0018      	movs	r0, r3
   18ab8:	4b8c      	ldr	r3, [pc, #560]	; (18cec <vTask_GSM_service+0xbb8>)
   18aba:	4798      	blx	r3
   18abc:	1e03      	subs	r3, r0, #0
   18abe:	d002      	beq.n	18ac6 <vTask_GSM_service+0x992>
							{
								endCall();
   18ac0:	4b89      	ldr	r3, [pc, #548]	; (18ce8 <vTask_GSM_service+0xbb4>)
   18ac2:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   18ac4:	e14d      	b.n	18d62 <vTask_GSM_service+0xc2e>
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
   18ac6:	230c      	movs	r3, #12
   18ac8:	18fb      	adds	r3, r7, r3
   18aca:	0018      	movs	r0, r3
   18acc:	4b88      	ldr	r3, [pc, #544]	; (18cf0 <vTask_GSM_service+0xbbc>)
   18ace:	4798      	blx	r3
   18ad0:	1e03      	subs	r3, r0, #0
   18ad2:	d024      	beq.n	18b1e <vTask_GSM_service+0x9ea>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   18ad4:	4a87      	ldr	r2, [pc, #540]	; (18cf4 <vTask_GSM_service+0xbc0>)
   18ad6:	230c      	movs	r3, #12
   18ad8:	18fb      	adds	r3, r7, r3
   18ada:	0011      	movs	r1, r2
   18adc:	0018      	movs	r0, r3
   18ade:	4b86      	ldr	r3, [pc, #536]	; (18cf8 <vTask_GSM_service+0xbc4>)
   18ae0:	4798      	blx	r3
   18ae2:	0003      	movs	r3, r0
   18ae4:	228e      	movs	r2, #142	; 0x8e
   18ae6:	0052      	lsls	r2, r2, #1
   18ae8:	18ba      	adds	r2, r7, r2
   18aea:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   18aec:	4b81      	ldr	r3, [pc, #516]	; (18cf4 <vTask_GSM_service+0xbc0>)
   18aee:	0019      	movs	r1, r3
   18af0:	2000      	movs	r0, #0
   18af2:	4b81      	ldr	r3, [pc, #516]	; (18cf8 <vTask_GSM_service+0xbc4>)
   18af4:	4798      	blx	r3
   18af6:	0003      	movs	r3, r0
   18af8:	228e      	movs	r2, #142	; 0x8e
   18afa:	0052      	lsls	r2, r2, #1
   18afc:	18ba      	adds	r2, r7, r2
   18afe:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   18b00:	238e      	movs	r3, #142	; 0x8e
   18b02:	005b      	lsls	r3, r3, #1
   18b04:	18fb      	adds	r3, r7, r3
   18b06:	681b      	ldr	r3, [r3, #0]
   18b08:	0018      	movs	r0, r3
   18b0a:	4b7c      	ldr	r3, [pc, #496]	; (18cfc <vTask_GSM_service+0xbc8>)
   18b0c:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   18b0e:	238e      	movs	r3, #142	; 0x8e
   18b10:	005b      	lsls	r3, r3, #1
   18b12:	18fb      	adds	r3, r7, r3
   18b14:	681b      	ldr	r3, [r3, #0]
   18b16:	0018      	movs	r0, r3
   18b18:	4b79      	ldr	r3, [pc, #484]	; (18d00 <vTask_GSM_service+0xbcc>)
   18b1a:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   18b1c:	e121      	b.n	18d62 <vTask_GSM_service+0xc2e>
							}
							else
							{
								playSoundAgain(response);
   18b1e:	230c      	movs	r3, #12
   18b20:	18fb      	adds	r3, r7, r3
   18b22:	0018      	movs	r0, r3
   18b24:	4b77      	ldr	r3, [pc, #476]	; (18d04 <vTask_GSM_service+0xbd0>)
   18b26:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
   18b28:	e11b      	b.n	18d62 <vTask_GSM_service+0xc2e>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
   18b2a:	4b62      	ldr	r3, [pc, #392]	; (18cb4 <vTask_GSM_service+0xb80>)
   18b2c:	781b      	ldrb	r3, [r3, #0]
   18b2e:	b2db      	uxtb	r3, r3
   18b30:	2b4e      	cmp	r3, #78	; 0x4e
   18b32:	d004      	beq.n	18b3e <vTask_GSM_service+0xa0a>
   18b34:	4b5f      	ldr	r3, [pc, #380]	; (18cb4 <vTask_GSM_service+0xb80>)
   18b36:	781b      	ldrb	r3, [r3, #0]
   18b38:	b2db      	uxtb	r3, r3
   18b3a:	2b52      	cmp	r3, #82	; 0x52
   18b3c:	d163      	bne.n	18c06 <vTask_GSM_service+0xad2>
   18b3e:	4b5e      	ldr	r3, [pc, #376]	; (18cb8 <vTask_GSM_service+0xb84>)
   18b40:	781b      	ldrb	r3, [r3, #0]
   18b42:	b2db      	uxtb	r3, r3
   18b44:	2b4f      	cmp	r3, #79	; 0x4f
   18b46:	d15e      	bne.n	18c06 <vTask_GSM_service+0xad2>
						{
							if (OutGoingcallState(response) == 'R')
   18b48:	230c      	movs	r3, #12
   18b4a:	18fb      	adds	r3, r7, r3
   18b4c:	0018      	movs	r0, r3
   18b4e:	4b6e      	ldr	r3, [pc, #440]	; (18d08 <vTask_GSM_service+0xbd4>)
   18b50:	4798      	blx	r3
   18b52:	0003      	movs	r3, r0
   18b54:	2b52      	cmp	r3, #82	; 0x52
   18b56:	d10b      	bne.n	18b70 <vTask_GSM_service+0xa3c>
							{
								callCutWait = xTaskGetTickCount();
   18b58:	4b5f      	ldr	r3, [pc, #380]	; (18cd8 <vTask_GSM_service+0xba4>)
   18b5a:	4798      	blx	r3
   18b5c:	0002      	movs	r2, r0
   18b5e:	4b5f      	ldr	r3, [pc, #380]	; (18cdc <vTask_GSM_service+0xba8>)
   18b60:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
   18b62:	4b54      	ldr	r3, [pc, #336]	; (18cb4 <vTask_GSM_service+0xb80>)
   18b64:	2252      	movs	r2, #82	; 0x52
   18b66:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   18b68:	4b53      	ldr	r3, [pc, #332]	; (18cb8 <vTask_GSM_service+0xb84>)
   18b6a:	224f      	movs	r2, #79	; 0x4f
   18b6c:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
   18b6e:	e0f7      	b.n	18d60 <vTask_GSM_service+0xc2c>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
   18b70:	230c      	movs	r3, #12
   18b72:	18fb      	adds	r3, r7, r3
   18b74:	0018      	movs	r0, r3
   18b76:	4b5d      	ldr	r3, [pc, #372]	; (18cec <vTask_GSM_service+0xbb8>)
   18b78:	4798      	blx	r3
   18b7a:	1e03      	subs	r3, r0, #0
   18b7c:	d107      	bne.n	18b8e <vTask_GSM_service+0xa5a>
   18b7e:	230c      	movs	r3, #12
   18b80:	18fb      	adds	r3, r7, r3
   18b82:	0018      	movs	r0, r3
   18b84:	4b60      	ldr	r3, [pc, #384]	; (18d08 <vTask_GSM_service+0xbd4>)
   18b86:	4798      	blx	r3
   18b88:	0003      	movs	r3, r0
   18b8a:	2b45      	cmp	r3, #69	; 0x45
   18b8c:	d110      	bne.n	18bb0 <vTask_GSM_service+0xa7c>
							{
								char t1 = actionType;
   18b8e:	231c      	movs	r3, #28
   18b90:	33ff      	adds	r3, #255	; 0xff
   18b92:	18fb      	adds	r3, r7, r3
   18b94:	4a5d      	ldr	r2, [pc, #372]	; (18d0c <vTask_GSM_service+0xbd8>)
   18b96:	7812      	ldrb	r2, [r2, #0]
   18b98:	701a      	strb	r2, [r3, #0]
								endCall();
   18b9a:	4b53      	ldr	r3, [pc, #332]	; (18ce8 <vTask_GSM_service+0xbb4>)
   18b9c:	4798      	blx	r3
								checkRespSMS(t1);
   18b9e:	231c      	movs	r3, #28
   18ba0:	33ff      	adds	r3, #255	; 0xff
   18ba2:	18fb      	adds	r3, r7, r3
   18ba4:	781b      	ldrb	r3, [r3, #0]
   18ba6:	0018      	movs	r0, r3
   18ba8:	4b59      	ldr	r3, [pc, #356]	; (18d10 <vTask_GSM_service+0xbdc>)
   18baa:	4798      	blx	r3
							{
   18bac:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
   18bae:	e0d7      	b.n	18d60 <vTask_GSM_service+0xc2c>
							}
							else if (OutGoingcallState(response) == 'I')
   18bb0:	230c      	movs	r3, #12
   18bb2:	18fb      	adds	r3, r7, r3
   18bb4:	0018      	movs	r0, r3
   18bb6:	4b54      	ldr	r3, [pc, #336]	; (18d08 <vTask_GSM_service+0xbd4>)
   18bb8:	4798      	blx	r3
   18bba:	0003      	movs	r3, r0
   18bbc:	2b49      	cmp	r3, #73	; 0x49
   18bbe:	d000      	beq.n	18bc2 <vTask_GSM_service+0xa8e>
   18bc0:	e0ce      	b.n	18d60 <vTask_GSM_service+0xc2c>
							{
								callCutWait = xTaskGetTickCount();
   18bc2:	4b45      	ldr	r3, [pc, #276]	; (18cd8 <vTask_GSM_service+0xba4>)
   18bc4:	4798      	blx	r3
   18bc6:	0002      	movs	r2, r0
   18bc8:	4b44      	ldr	r3, [pc, #272]	; (18cdc <vTask_GSM_service+0xba8>)
   18bca:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
   18bcc:	4b39      	ldr	r3, [pc, #228]	; (18cb4 <vTask_GSM_service+0xb80>)
   18bce:	2249      	movs	r2, #73	; 0x49
   18bd0:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
   18bd2:	4b39      	ldr	r3, [pc, #228]	; (18cb8 <vTask_GSM_service+0xb84>)
   18bd4:	224f      	movs	r2, #79	; 0x4f
   18bd6:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
   18bd8:	4b4e      	ldr	r3, [pc, #312]	; (18d14 <vTask_GSM_service+0xbe0>)
   18bda:	2201      	movs	r2, #1
   18bdc:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
   18bde:	2201      	movs	r2, #1
   18be0:	2100      	movs	r1, #0
   18be2:	2002      	movs	r0, #2
   18be4:	4b3b      	ldr	r3, [pc, #236]	; (18cd4 <vTask_GSM_service+0xba0>)
   18be6:	4798      	blx	r3
								if (!m2mEvent)
   18be8:	4b4b      	ldr	r3, [pc, #300]	; (18d18 <vTask_GSM_service+0xbe4>)
   18bea:	781b      	ldrb	r3, [r3, #0]
   18bec:	2201      	movs	r2, #1
   18bee:	4053      	eors	r3, r2
   18bf0:	b2db      	uxtb	r3, r3
   18bf2:	2b00      	cmp	r3, #0
   18bf4:	d100      	bne.n	18bf8 <vTask_GSM_service+0xac4>
   18bf6:	e0b3      	b.n	18d60 <vTask_GSM_service+0xc2c>
								{
									playSound(actionType,true);
   18bf8:	4b44      	ldr	r3, [pc, #272]	; (18d0c <vTask_GSM_service+0xbd8>)
   18bfa:	781b      	ldrb	r3, [r3, #0]
   18bfc:	2101      	movs	r1, #1
   18bfe:	0018      	movs	r0, r3
   18c00:	4b46      	ldr	r3, [pc, #280]	; (18d1c <vTask_GSM_service+0xbe8>)
   18c02:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
   18c04:	e0ac      	b.n	18d60 <vTask_GSM_service+0xc2c>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
   18c06:	4b2b      	ldr	r3, [pc, #172]	; (18cb4 <vTask_GSM_service+0xb80>)
   18c08:	781b      	ldrb	r3, [r3, #0]
   18c0a:	b2db      	uxtb	r3, r3
   18c0c:	2b49      	cmp	r3, #73	; 0x49
   18c0e:	d001      	beq.n	18c14 <vTask_GSM_service+0xae0>
   18c10:	f7ff fb50 	bl	182b4 <vTask_GSM_service+0x180>
   18c14:	4b28      	ldr	r3, [pc, #160]	; (18cb8 <vTask_GSM_service+0xb84>)
   18c16:	781b      	ldrb	r3, [r3, #0]
   18c18:	b2db      	uxtb	r3, r3
   18c1a:	2b4f      	cmp	r3, #79	; 0x4f
   18c1c:	d001      	beq.n	18c22 <vTask_GSM_service+0xaee>
   18c1e:	f7ff fb49 	bl	182b4 <vTask_GSM_service+0x180>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
   18c22:	230c      	movs	r3, #12
   18c24:	18fb      	adds	r3, r7, r3
   18c26:	0018      	movs	r0, r3
   18c28:	4b30      	ldr	r3, [pc, #192]	; (18cec <vTask_GSM_service+0xbb8>)
   18c2a:	4798      	blx	r3
   18c2c:	1e03      	subs	r3, r0, #0
   18c2e:	d107      	bne.n	18c40 <vTask_GSM_service+0xb0c>
   18c30:	230c      	movs	r3, #12
   18c32:	18fb      	adds	r3, r7, r3
   18c34:	0018      	movs	r0, r3
   18c36:	4b34      	ldr	r3, [pc, #208]	; (18d08 <vTask_GSM_service+0xbd4>)
   18c38:	4798      	blx	r3
   18c3a:	0003      	movs	r3, r0
   18c3c:	2b45      	cmp	r3, #69	; 0x45
   18c3e:	d102      	bne.n	18c46 <vTask_GSM_service+0xb12>
							{
								endCall();
   18c40:	4b29      	ldr	r3, [pc, #164]	; (18ce8 <vTask_GSM_service+0xbb4>)
   18c42:	4798      	blx	r3
   18c44:	e08d      	b.n	18d62 <vTask_GSM_service+0xc2e>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
   18c46:	230c      	movs	r3, #12
   18c48:	18fb      	adds	r3, r7, r3
   18c4a:	0018      	movs	r0, r3
   18c4c:	4b28      	ldr	r3, [pc, #160]	; (18cf0 <vTask_GSM_service+0xbbc>)
   18c4e:	4798      	blx	r3
   18c50:	1e03      	subs	r3, r0, #0
   18c52:	d025      	beq.n	18ca0 <vTask_GSM_service+0xb6c>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
   18c54:	4a27      	ldr	r2, [pc, #156]	; (18cf4 <vTask_GSM_service+0xbc0>)
   18c56:	230c      	movs	r3, #12
   18c58:	18fb      	adds	r3, r7, r3
   18c5a:	0011      	movs	r1, r2
   18c5c:	0018      	movs	r0, r3
   18c5e:	4b26      	ldr	r3, [pc, #152]	; (18cf8 <vTask_GSM_service+0xbc4>)
   18c60:	4798      	blx	r3
   18c62:	0003      	movs	r3, r0
   18c64:	228a      	movs	r2, #138	; 0x8a
   18c66:	0052      	lsls	r2, r2, #1
   18c68:	18ba      	adds	r2, r7, r2
   18c6a:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
   18c6c:	4b21      	ldr	r3, [pc, #132]	; (18cf4 <vTask_GSM_service+0xbc0>)
   18c6e:	0019      	movs	r1, r3
   18c70:	2000      	movs	r0, #0
   18c72:	4b21      	ldr	r3, [pc, #132]	; (18cf8 <vTask_GSM_service+0xbc4>)
   18c74:	4798      	blx	r3
   18c76:	0003      	movs	r3, r0
   18c78:	228a      	movs	r2, #138	; 0x8a
   18c7a:	0052      	lsls	r2, r2, #1
   18c7c:	18ba      	adds	r2, r7, r2
   18c7e:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
   18c80:	238a      	movs	r3, #138	; 0x8a
   18c82:	005b      	lsls	r3, r3, #1
   18c84:	18fb      	adds	r3, r7, r3
   18c86:	681b      	ldr	r3, [r3, #0]
   18c88:	0018      	movs	r0, r3
   18c8a:	4b1c      	ldr	r3, [pc, #112]	; (18cfc <vTask_GSM_service+0xbc8>)
   18c8c:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
   18c8e:	238a      	movs	r3, #138	; 0x8a
   18c90:	005b      	lsls	r3, r3, #1
   18c92:	18fb      	adds	r3, r7, r3
   18c94:	681b      	ldr	r3, [r3, #0]
   18c96:	0018      	movs	r0, r3
   18c98:	4b19      	ldr	r3, [pc, #100]	; (18d00 <vTask_GSM_service+0xbcc>)
   18c9a:	4798      	blx	r3
   18c9c:	f7ff fb0a 	bl	182b4 <vTask_GSM_service+0x180>
							}
							else
							{
								playSoundAgain(response);
   18ca0:	230c      	movs	r3, #12
   18ca2:	18fb      	adds	r3, r7, r3
   18ca4:	0018      	movs	r0, r3
   18ca6:	4b17      	ldr	r3, [pc, #92]	; (18d04 <vTask_GSM_service+0xbd0>)
   18ca8:	4798      	blx	r3
   18caa:	f7ff fb03 	bl	182b4 <vTask_GSM_service+0x180>
   18cae:	46c0      	nop			; (mov r8, r8)
   18cb0:	20000944 	.word	0x20000944
   18cb4:	200009e0 	.word	0x200009e0
   18cb8:	2000098f 	.word	0x2000098f
   18cbc:	000135dd 	.word	0x000135dd
   18cc0:	00029657 	.word	0x00029657
   18cc4:	2000099c 	.word	0x2000099c
   18cc8:	00020969 	.word	0x00020969
   18ccc:	000134bd 	.word	0x000134bd
   18cd0:	00013765 	.word	0x00013765
   18cd4:	0001da2d 	.word	0x0001da2d
   18cd8:	00020ccd 	.word	0x00020ccd
   18cdc:	20000a18 	.word	0x20000a18
   18ce0:	00017b85 	.word	0x00017b85
   18ce4:	00014819 	.word	0x00014819
   18ce8:	00014521 	.word	0x00014521
   18cec:	00013809 	.word	0x00013809
   18cf0:	00013881 	.word	0x00013881
   18cf4:	0002afcc 	.word	0x0002afcc
   18cf8:	00029949 	.word	0x00029949
   18cfc:	00012ac9 	.word	0x00012ac9
   18d00:	00014df5 	.word	0x00014df5
   18d04:	00014971 	.word	0x00014971
   18d08:	00014af1 	.word	0x00014af1
   18d0c:	20000963 	.word	0x20000963
   18d10:	00014d7d 	.word	0x00014d7d
   18d14:	2000099e 	.word	0x2000099e
   18d18:	20000943 	.word	0x20000943
   18d1c:	00014861 	.word	0x00014861
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
   18d20:	4b11      	ldr	r3, [pc, #68]	; (18d68 <vTask_GSM_service+0xc34>)
   18d22:	2200      	movs	r2, #0
   18d24:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
   18d26:	4b11      	ldr	r3, [pc, #68]	; (18d6c <vTask_GSM_service+0xc38>)
   18d28:	2200      	movs	r2, #0
   18d2a:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
   18d2c:	4b10      	ldr	r3, [pc, #64]	; (18d70 <vTask_GSM_service+0xc3c>)
   18d2e:	4a10      	ldr	r2, [pc, #64]	; (18d70 <vTask_GSM_service+0xc3c>)
   18d30:	6812      	ldr	r2, [r2, #0]
   18d32:	2180      	movs	r1, #128	; 0x80
   18d34:	0249      	lsls	r1, r1, #9
   18d36:	430a      	orrs	r2, r1
   18d38:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
   18d3a:	4b0e      	ldr	r3, [pc, #56]	; (18d74 <vTask_GSM_service+0xc40>)
   18d3c:	0018      	movs	r0, r3
   18d3e:	4b0e      	ldr	r3, [pc, #56]	; (18d78 <vTask_GSM_service+0xc44>)
   18d40:	4798      	blx	r3
			GSM_PWR_OFF;
   18d42:	4b0b      	ldr	r3, [pc, #44]	; (18d70 <vTask_GSM_service+0xc3c>)
   18d44:	4a0a      	ldr	r2, [pc, #40]	; (18d70 <vTask_GSM_service+0xc3c>)
   18d46:	6812      	ldr	r2, [r2, #0]
   18d48:	490c      	ldr	r1, [pc, #48]	; (18d7c <vTask_GSM_service+0xc48>)
   18d4a:	400a      	ands	r2, r1
   18d4c:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
   18d4e:	4b0c      	ldr	r3, [pc, #48]	; (18d80 <vTask_GSM_service+0xc4c>)
   18d50:	0018      	movs	r0, r3
   18d52:	4b09      	ldr	r3, [pc, #36]	; (18d78 <vTask_GSM_service+0xc44>)
   18d54:	4798      	blx	r3
   18d56:	f7ff faad 	bl	182b4 <vTask_GSM_service+0x180>
							if (gsm_responseLine_isRinging(response))
   18d5a:	46c0      	nop			; (mov r8, r8)
   18d5c:	f7ff faaa 	bl	182b4 <vTask_GSM_service+0x180>
							if (OutGoingcallState(response) == 'R')
   18d60:	46c0      	nop			; (mov r8, r8)
		if (currentStatus == 'I' || currentStatus == 'R')
   18d62:	f7ff faa7 	bl	182b4 <vTask_GSM_service+0x180>
   18d66:	46c0      	nop			; (mov r8, r8)
   18d68:	200009c8 	.word	0x200009c8
   18d6c:	200009d5 	.word	0x200009d5
   18d70:	41004490 	.word	0x41004490
   18d74:	00000bb8 	.word	0x00000bb8
   18d78:	00020969 	.word	0x00020969
   18d7c:	fffeffff 	.word	0xfffeffff
   18d80:	00001388 	.word	0x00001388

00018d84 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
   18d84:	b590      	push	{r4, r7, lr}
   18d86:	b083      	sub	sp, #12
   18d88:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)1200,NULL,1,NULL);
   18d8a:	2396      	movs	r3, #150	; 0x96
   18d8c:	00da      	lsls	r2, r3, #3
   18d8e:	4806      	ldr	r0, [pc, #24]	; (18da8 <start_gsm_service+0x24>)
   18d90:	2300      	movs	r3, #0
   18d92:	9301      	str	r3, [sp, #4]
   18d94:	2301      	movs	r3, #1
   18d96:	9300      	str	r3, [sp, #0]
   18d98:	2300      	movs	r3, #0
   18d9a:	2100      	movs	r1, #0
   18d9c:	4c03      	ldr	r4, [pc, #12]	; (18dac <start_gsm_service+0x28>)
   18d9e:	47a0      	blx	r4
}
   18da0:	46c0      	nop			; (mov r8, r8)
   18da2:	46bd      	mov	sp, r7
   18da4:	b001      	add	sp, #4
   18da6:	bd90      	pop	{r4, r7, pc}
   18da8:	00018135 	.word	0x00018135
   18dac:	00020629 	.word	0x00020629

00018db0 <busy>:

bool busy(void)
{
   18db0:	b580      	push	{r7, lr}
   18db2:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
   18db4:	4b09      	ldr	r3, [pc, #36]	; (18ddc <busy+0x2c>)
   18db6:	781b      	ldrb	r3, [r3, #0]
   18db8:	2b00      	cmp	r3, #0
   18dba:	d104      	bne.n	18dc6 <busy+0x16>
   18dbc:	4b08      	ldr	r3, [pc, #32]	; (18de0 <busy+0x30>)
   18dbe:	781b      	ldrb	r3, [r3, #0]
   18dc0:	b2db      	uxtb	r3, r3
   18dc2:	2b00      	cmp	r3, #0
   18dc4:	d001      	beq.n	18dca <busy+0x1a>
   18dc6:	2301      	movs	r3, #1
   18dc8:	e000      	b.n	18dcc <busy+0x1c>
   18dca:	2300      	movs	r3, #0
   18dcc:	1c1a      	adds	r2, r3, #0
   18dce:	2301      	movs	r3, #1
   18dd0:	4013      	ands	r3, r2
   18dd2:	b2db      	uxtb	r3, r3
}
   18dd4:	0018      	movs	r0, r3
   18dd6:	46bd      	mov	sp, r7
   18dd8:	bd80      	pop	{r7, pc}
   18dda:	46c0      	nop			; (mov r8, r8)
   18ddc:	2000099c 	.word	0x2000099c
   18de0:	2000088e 	.word	0x2000088e

00018de4 <checkNotInCall>:

bool checkNotInCall(void)
{
   18de4:	b580      	push	{r7, lr}
   18de6:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
   18de8:	4b13      	ldr	r3, [pc, #76]	; (18e38 <checkNotInCall+0x54>)
   18dea:	781b      	ldrb	r3, [r3, #0]
   18dec:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
   18dee:	2b4e      	cmp	r3, #78	; 0x4e
   18df0:	d11a      	bne.n	18e28 <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
   18df2:	4b12      	ldr	r3, [pc, #72]	; (18e3c <checkNotInCall+0x58>)
   18df4:	781b      	ldrb	r3, [r3, #0]
   18df6:	b2db      	uxtb	r3, r3
   18df8:	2b4e      	cmp	r3, #78	; 0x4e
   18dfa:	d115      	bne.n	18e28 <checkNotInCall+0x44>
   18dfc:	4b10      	ldr	r3, [pc, #64]	; (18e40 <checkNotInCall+0x5c>)
   18dfe:	781b      	ldrb	r3, [r3, #0]
   18e00:	2b00      	cmp	r3, #0
   18e02:	d011      	beq.n	18e28 <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
   18e04:	4b0f      	ldr	r3, [pc, #60]	; (18e44 <checkNotInCall+0x60>)
   18e06:	781b      	ldrb	r3, [r3, #0]
   18e08:	2201      	movs	r2, #1
   18e0a:	4053      	eors	r3, r2
   18e0c:	b2db      	uxtb	r3, r3
   18e0e:	2b00      	cmp	r3, #0
   18e10:	d00a      	beq.n	18e28 <checkNotInCall+0x44>
   18e12:	4b0d      	ldr	r3, [pc, #52]	; (18e48 <checkNotInCall+0x64>)
   18e14:	4798      	blx	r3
   18e16:	0003      	movs	r3, r0
   18e18:	001a      	movs	r2, r3
   18e1a:	2301      	movs	r3, #1
   18e1c:	4053      	eors	r3, r2
   18e1e:	b2db      	uxtb	r3, r3
   18e20:	2b00      	cmp	r3, #0
   18e22:	d001      	beq.n	18e28 <checkNotInCall+0x44>
   18e24:	2301      	movs	r3, #1
   18e26:	e000      	b.n	18e2a <checkNotInCall+0x46>
   18e28:	2300      	movs	r3, #0
   18e2a:	1c1a      	adds	r2, r3, #0
   18e2c:	2301      	movs	r3, #1
   18e2e:	4013      	ands	r3, r2
   18e30:	b2db      	uxtb	r3, r3
}
   18e32:	0018      	movs	r0, r3
   18e34:	46bd      	mov	sp, r7
   18e36:	bd80      	pop	{r7, pc}
   18e38:	200009e0 	.word	0x200009e0
   18e3c:	2000098f 	.word	0x2000098f
   18e40:	20000972 	.word	0x20000972
   18e44:	20000944 	.word	0x20000944
   18e48:	00018db1 	.word	0x00018db1

00018e4c <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
   18e4c:	b580      	push	{r7, lr}
   18e4e:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
   18e50:	4b21      	ldr	r3, [pc, #132]	; (18ed8 <gsm_checkSleepElligible+0x8c>)
   18e52:	78db      	ldrb	r3, [r3, #3]
   18e54:	2b00      	cmp	r3, #0
   18e56:	d021      	beq.n	18e9c <gsm_checkSleepElligible+0x50>
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !m2mEventStaged && !eventStaged);
   18e58:	4b20      	ldr	r3, [pc, #128]	; (18edc <gsm_checkSleepElligible+0x90>)
   18e5a:	781b      	ldrb	r3, [r3, #0]
   18e5c:	b2db      	uxtb	r3, r3
   18e5e:	2201      	movs	r2, #1
   18e60:	4053      	eors	r3, r2
   18e62:	b2db      	uxtb	r3, r3
   18e64:	2b00      	cmp	r3, #0
   18e66:	d013      	beq.n	18e90 <gsm_checkSleepElligible+0x44>
   18e68:	4b1d      	ldr	r3, [pc, #116]	; (18ee0 <gsm_checkSleepElligible+0x94>)
   18e6a:	4798      	blx	r3
   18e6c:	1e03      	subs	r3, r0, #0
   18e6e:	d00f      	beq.n	18e90 <gsm_checkSleepElligible+0x44>
   18e70:	4b1c      	ldr	r3, [pc, #112]	; (18ee4 <gsm_checkSleepElligible+0x98>)
   18e72:	781b      	ldrb	r3, [r3, #0]
   18e74:	2201      	movs	r2, #1
   18e76:	4053      	eors	r3, r2
   18e78:	b2db      	uxtb	r3, r3
   18e7a:	2b00      	cmp	r3, #0
   18e7c:	d008      	beq.n	18e90 <gsm_checkSleepElligible+0x44>
   18e7e:	4b1a      	ldr	r3, [pc, #104]	; (18ee8 <gsm_checkSleepElligible+0x9c>)
   18e80:	781b      	ldrb	r3, [r3, #0]
   18e82:	2201      	movs	r2, #1
   18e84:	4053      	eors	r3, r2
   18e86:	b2db      	uxtb	r3, r3
   18e88:	2b00      	cmp	r3, #0
   18e8a:	d001      	beq.n	18e90 <gsm_checkSleepElligible+0x44>
   18e8c:	2301      	movs	r3, #1
   18e8e:	e000      	b.n	18e92 <gsm_checkSleepElligible+0x46>
   18e90:	2300      	movs	r3, #0
   18e92:	1c1a      	adds	r2, r3, #0
   18e94:	2301      	movs	r3, #1
   18e96:	4013      	ands	r3, r2
   18e98:	b2db      	uxtb	r3, r3
   18e9a:	e019      	b.n	18ed0 <gsm_checkSleepElligible+0x84>
	}
	else
	{
		return(!isGSMModuleAwake  && checkNotInCall() && !eventStaged);
   18e9c:	4b0f      	ldr	r3, [pc, #60]	; (18edc <gsm_checkSleepElligible+0x90>)
   18e9e:	781b      	ldrb	r3, [r3, #0]
   18ea0:	b2db      	uxtb	r3, r3
   18ea2:	2201      	movs	r2, #1
   18ea4:	4053      	eors	r3, r2
   18ea6:	b2db      	uxtb	r3, r3
   18ea8:	2b00      	cmp	r3, #0
   18eaa:	d00c      	beq.n	18ec6 <gsm_checkSleepElligible+0x7a>
   18eac:	4b0c      	ldr	r3, [pc, #48]	; (18ee0 <gsm_checkSleepElligible+0x94>)
   18eae:	4798      	blx	r3
   18eb0:	1e03      	subs	r3, r0, #0
   18eb2:	d008      	beq.n	18ec6 <gsm_checkSleepElligible+0x7a>
   18eb4:	4b0c      	ldr	r3, [pc, #48]	; (18ee8 <gsm_checkSleepElligible+0x9c>)
   18eb6:	781b      	ldrb	r3, [r3, #0]
   18eb8:	2201      	movs	r2, #1
   18eba:	4053      	eors	r3, r2
   18ebc:	b2db      	uxtb	r3, r3
   18ebe:	2b00      	cmp	r3, #0
   18ec0:	d001      	beq.n	18ec6 <gsm_checkSleepElligible+0x7a>
   18ec2:	2301      	movs	r3, #1
   18ec4:	e000      	b.n	18ec8 <gsm_checkSleepElligible+0x7c>
   18ec6:	2300      	movs	r3, #0
   18ec8:	1c1a      	adds	r2, r3, #0
   18eca:	2301      	movs	r3, #1
   18ecc:	4013      	ands	r3, r2
   18ece:	b2db      	uxtb	r3, r3
	}
   18ed0:	0018      	movs	r0, r3
   18ed2:	46bd      	mov	sp, r7
   18ed4:	bd80      	pop	{r7, pc}
   18ed6:	46c0      	nop			; (mov r8, r8)
   18ed8:	2000082c 	.word	0x2000082c
   18edc:	20000884 	.word	0x20000884
   18ee0:	00018de5 	.word	0x00018de5
   18ee4:	2000098e 	.word	0x2000098e
   18ee8:	200009d7 	.word	0x200009d7

00018eec <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
   18eec:	b590      	push	{r4, r7, lr}
   18eee:	b095      	sub	sp, #84	; 0x54
   18ef0:	af02      	add	r7, sp, #8
   18ef2:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	gsmStatusChange=true;
   18ef4:	4be4      	ldr	r3, [pc, #912]	; (19288 <lcd_displaying_task+0x39c>)
   18ef6:	2201      	movs	r2, #1
   18ef8:	701a      	strb	r2, [r3, #0]
	lcd_in_sleep =false;
   18efa:	4be4      	ldr	r3, [pc, #912]	; (1928c <lcd_displaying_task+0x3a0>)
   18efc:	2200      	movs	r2, #0
   18efe:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   18f00:	4be3      	ldr	r3, [pc, #908]	; (19290 <lcd_displaying_task+0x3a4>)
   18f02:	2201      	movs	r2, #1
   18f04:	701a      	strb	r2, [r3, #0]
	LCD_PWR_CONFIG();
   18f06:	4be3      	ldr	r3, [pc, #908]	; (19294 <lcd_displaying_task+0x3a8>)
   18f08:	4798      	blx	r3
	LCD_PWR_EN();
   18f0a:	4be3      	ldr	r3, [pc, #908]	; (19298 <lcd_displaying_task+0x3ac>)
   18f0c:	4798      	blx	r3
	vTaskDelay(500);
   18f0e:	23fa      	movs	r3, #250	; 0xfa
   18f10:	005b      	lsls	r3, r3, #1
   18f12:	0018      	movs	r0, r3
   18f14:	4be1      	ldr	r3, [pc, #900]	; (1929c <lcd_displaying_task+0x3b0>)
   18f16:	4798      	blx	r3
	
	LCD_init();
   18f18:	4be1      	ldr	r3, [pc, #900]	; (192a0 <lcd_displaying_task+0x3b4>)
   18f1a:	4798      	blx	r3
	
	uint8_t screen=1;
   18f1c:	2347      	movs	r3, #71	; 0x47
   18f1e:	18fb      	adds	r3, r7, r3
   18f20:	2201      	movs	r2, #1
   18f22:	701a      	strb	r2, [r3, #0]
	//bool four_sec_timer_is_active = true;
	//bool two_sec_timer_is_active = false;
	
	uint8_t time=0;
   18f24:	233a      	movs	r3, #58	; 0x3a
   18f26:	18fb      	adds	r3, r7, r3
   18f28:	2200      	movs	r2, #0
   18f2a:	701a      	strb	r2, [r3, #0]
	
	
	
	
	LCD_clear();
   18f2c:	4bdd      	ldr	r3, [pc, #884]	; (192a4 <lcd_displaying_task+0x3b8>)
   18f2e:	4798      	blx	r3
	LCD_setCursor(0,0);
   18f30:	2100      	movs	r1, #0
   18f32:	2000      	movs	r0, #0
   18f34:	4bdc      	ldr	r3, [pc, #880]	; (192a8 <lcd_displaying_task+0x3bc>)
   18f36:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
   18f38:	4bdc      	ldr	r3, [pc, #880]	; (192ac <lcd_displaying_task+0x3c0>)
   18f3a:	0018      	movs	r0, r3
   18f3c:	4bdc      	ldr	r3, [pc, #880]	; (192b0 <lcd_displaying_task+0x3c4>)
   18f3e:	4798      	blx	r3
	LCD_setCursor(0,1);
   18f40:	2101      	movs	r1, #1
   18f42:	2000      	movs	r0, #0
   18f44:	4bd8      	ldr	r3, [pc, #864]	; (192a8 <lcd_displaying_task+0x3bc>)
   18f46:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
   18f48:	4bda      	ldr	r3, [pc, #872]	; (192b4 <lcd_displaying_task+0x3c8>)
   18f4a:	0018      	movs	r0, r3
   18f4c:	4bd8      	ldr	r3, [pc, #864]	; (192b0 <lcd_displaying_task+0x3c4>)
   18f4e:	4798      	blx	r3
	vTaskDelay(3000);
   18f50:	4bd9      	ldr	r3, [pc, #868]	; (192b8 <lcd_displaying_task+0x3cc>)
   18f52:	0018      	movs	r0, r3
   18f54:	4bd1      	ldr	r3, [pc, #836]	; (1929c <lcd_displaying_task+0x3b0>)
   18f56:	4798      	blx	r3
	
	LCD_clear();
   18f58:	4bd2      	ldr	r3, [pc, #840]	; (192a4 <lcd_displaying_task+0x3b8>)
   18f5a:	4798      	blx	r3
	LCD_setCursor(0,0);
   18f5c:	2100      	movs	r1, #0
   18f5e:	2000      	movs	r0, #0
   18f60:	4bd1      	ldr	r3, [pc, #836]	; (192a8 <lcd_displaying_task+0x3bc>)
   18f62:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
   18f64:	4bd5      	ldr	r3, [pc, #852]	; (192bc <lcd_displaying_task+0x3d0>)
   18f66:	0018      	movs	r0, r3
   18f68:	4bd1      	ldr	r3, [pc, #836]	; (192b0 <lcd_displaying_task+0x3c4>)
   18f6a:	4798      	blx	r3
	LCD_setCursor(0,1);
   18f6c:	2101      	movs	r1, #1
   18f6e:	2000      	movs	r0, #0
   18f70:	4bcd      	ldr	r3, [pc, #820]	; (192a8 <lcd_displaying_task+0x3bc>)
   18f72:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
   18f74:	4ad2      	ldr	r2, [pc, #840]	; (192c0 <lcd_displaying_task+0x3d4>)
   18f76:	4bd3      	ldr	r3, [pc, #844]	; (192c4 <lcd_displaying_task+0x3d8>)
   18f78:	0011      	movs	r1, r2
   18f7a:	0018      	movs	r0, r3
   18f7c:	4bcc      	ldr	r3, [pc, #816]	; (192b0 <lcd_displaying_task+0x3c4>)
   18f7e:	4798      	blx	r3
	vTaskDelay(2000);
   18f80:	23fa      	movs	r3, #250	; 0xfa
   18f82:	00db      	lsls	r3, r3, #3
   18f84:	0018      	movs	r0, r3
   18f86:	4bc5      	ldr	r3, [pc, #788]	; (1929c <lcd_displaying_task+0x3b0>)
   18f88:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
   18f8a:	23fa      	movs	r3, #250	; 0xfa
   18f8c:	0119      	lsls	r1, r3, #4
   18f8e:	4bce      	ldr	r3, [pc, #824]	; (192c8 <lcd_displaying_task+0x3dc>)
   18f90:	9300      	str	r3, [sp, #0]
   18f92:	2300      	movs	r3, #0
   18f94:	2201      	movs	r2, #1
   18f96:	2000      	movs	r0, #0
   18f98:	4ccc      	ldr	r4, [pc, #816]	; (192cc <lcd_displaying_task+0x3e0>)
   18f9a:	47a0      	blx	r4
   18f9c:	0002      	movs	r2, r0
   18f9e:	4bcc      	ldr	r3, [pc, #816]	; (192d0 <lcd_displaying_task+0x3e4>)
   18fa0:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
   18fa2:	4bcb      	ldr	r3, [pc, #812]	; (192d0 <lcd_displaying_task+0x3e4>)
   18fa4:	681c      	ldr	r4, [r3, #0]
   18fa6:	4bcb      	ldr	r3, [pc, #812]	; (192d4 <lcd_displaying_task+0x3e8>)
   18fa8:	4798      	blx	r3
   18faa:	0002      	movs	r2, r0
   18fac:	2300      	movs	r3, #0
   18fae:	9300      	str	r3, [sp, #0]
   18fb0:	2300      	movs	r3, #0
   18fb2:	2101      	movs	r1, #1
   18fb4:	0020      	movs	r0, r4
   18fb6:	4cc8      	ldr	r4, [pc, #800]	; (192d8 <lcd_displaying_task+0x3ec>)
   18fb8:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
   18fba:	4bb4      	ldr	r3, [pc, #720]	; (1928c <lcd_displaying_task+0x3a0>)
   18fbc:	781b      	ldrb	r3, [r3, #0]
   18fbe:	b2db      	uxtb	r3, r3
   18fc0:	2b00      	cmp	r3, #0
   18fc2:	d009      	beq.n	18fd8 <lcd_displaying_task+0xec>
		{
			lcd_in_sleep = false;
   18fc4:	4bb1      	ldr	r3, [pc, #708]	; (1928c <lcd_displaying_task+0x3a0>)
   18fc6:	2200      	movs	r2, #0
   18fc8:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
   18fca:	4bb3      	ldr	r3, [pc, #716]	; (19298 <lcd_displaying_task+0x3ac>)
   18fcc:	4798      	blx	r3
			vTaskDelay(100);
   18fce:	2064      	movs	r0, #100	; 0x64
   18fd0:	4bb2      	ldr	r3, [pc, #712]	; (1929c <lcd_displaying_task+0x3b0>)
   18fd2:	4798      	blx	r3
			LCD_init();
   18fd4:	4bb2      	ldr	r3, [pc, #712]	; (192a0 <lcd_displaying_task+0x3b4>)
   18fd6:	4798      	blx	r3
		}
		
		if(setNetworkCharacter)
   18fd8:	4bad      	ldr	r3, [pc, #692]	; (19290 <lcd_displaying_task+0x3a4>)
   18fda:	781b      	ldrb	r3, [r3, #0]
   18fdc:	b2db      	uxtb	r3, r3
   18fde:	2b00      	cmp	r3, #0
   18fe0:	d047      	beq.n	19072 <lcd_displaying_task+0x186>
		{
			setNetworkCharacter=false;
   18fe2:	4bab      	ldr	r3, [pc, #684]	; (19290 <lcd_displaying_task+0x3a4>)
   18fe4:	2200      	movs	r2, #0
   18fe6:	701a      	strb	r2, [r3, #0]
			byte Network_0[8]={
   18fe8:	2330      	movs	r3, #48	; 0x30
   18fea:	18fb      	adds	r3, r7, r3
   18fec:	0018      	movs	r0, r3
   18fee:	2308      	movs	r3, #8
   18ff0:	001a      	movs	r2, r3
   18ff2:	2100      	movs	r1, #0
   18ff4:	4bb9      	ldr	r3, [pc, #740]	; (192dc <lcd_displaying_task+0x3f0>)
   18ff6:	4798      	blx	r3
				0B00000,
				0B00000,
				0B00000
			};
			
			byte Network_1[8]={
   18ff8:	2328      	movs	r3, #40	; 0x28
   18ffa:	18fb      	adds	r3, r7, r3
   18ffc:	4ab8      	ldr	r2, [pc, #736]	; (192e0 <lcd_displaying_task+0x3f4>)
   18ffe:	ca03      	ldmia	r2!, {r0, r1}
   19000:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B00000,
				0B11111,
				0B11111
			};
			byte Network_2[8]={
   19002:	2320      	movs	r3, #32
   19004:	18fb      	adds	r3, r7, r3
   19006:	4ab7      	ldr	r2, [pc, #732]	; (192e4 <lcd_displaying_task+0x3f8>)
   19008:	ca03      	ldmia	r2!, {r0, r1}
   1900a:	c303      	stmia	r3!, {r0, r1}
				0B00000,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_3[8]={
   1900c:	2318      	movs	r3, #24
   1900e:	18fb      	adds	r3, r7, r3
   19010:	4ab5      	ldr	r2, [pc, #724]	; (192e8 <lcd_displaying_task+0x3fc>)
   19012:	ca03      	ldmia	r2!, {r0, r1}
   19014:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111,
				0B11111
			};
			byte Network_4[8]={
   19016:	2310      	movs	r3, #16
   19018:	18fb      	adds	r3, r7, r3
   1901a:	4ab4      	ldr	r2, [pc, #720]	; (192ec <lcd_displaying_task+0x400>)
   1901c:	ca03      	ldmia	r2!, {r0, r1}
   1901e:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};

			byte Network_5[8]={
   19020:	2308      	movs	r3, #8
   19022:	18fb      	adds	r3, r7, r3
   19024:	4ab2      	ldr	r2, [pc, #712]	; (192f0 <lcd_displaying_task+0x404>)
   19026:	ca03      	ldmia	r2!, {r0, r1}
   19028:	c303      	stmia	r3!, {r0, r1}
				0B11111,
				0B11111,
				0B11111
			};
			
			LCD_Create_Custom_createChar(0,Network_0);
   1902a:	2330      	movs	r3, #48	; 0x30
   1902c:	18fb      	adds	r3, r7, r3
   1902e:	0019      	movs	r1, r3
   19030:	2000      	movs	r0, #0
   19032:	4bb0      	ldr	r3, [pc, #704]	; (192f4 <lcd_displaying_task+0x408>)
   19034:	4798      	blx	r3
			LCD_Create_Custom_createChar(1,Network_1);
   19036:	2328      	movs	r3, #40	; 0x28
   19038:	18fb      	adds	r3, r7, r3
   1903a:	0019      	movs	r1, r3
   1903c:	2001      	movs	r0, #1
   1903e:	4bad      	ldr	r3, [pc, #692]	; (192f4 <lcd_displaying_task+0x408>)
   19040:	4798      	blx	r3
			LCD_Create_Custom_createChar(2,Network_2);
   19042:	2320      	movs	r3, #32
   19044:	18fb      	adds	r3, r7, r3
   19046:	0019      	movs	r1, r3
   19048:	2002      	movs	r0, #2
   1904a:	4baa      	ldr	r3, [pc, #680]	; (192f4 <lcd_displaying_task+0x408>)
   1904c:	4798      	blx	r3
			LCD_Create_Custom_createChar(3,Network_3);
   1904e:	2318      	movs	r3, #24
   19050:	18fb      	adds	r3, r7, r3
   19052:	0019      	movs	r1, r3
   19054:	2003      	movs	r0, #3
   19056:	4ba7      	ldr	r3, [pc, #668]	; (192f4 <lcd_displaying_task+0x408>)
   19058:	4798      	blx	r3
			LCD_Create_Custom_createChar(4,Network_4);
   1905a:	2310      	movs	r3, #16
   1905c:	18fb      	adds	r3, r7, r3
   1905e:	0019      	movs	r1, r3
   19060:	2004      	movs	r0, #4
   19062:	4ba4      	ldr	r3, [pc, #656]	; (192f4 <lcd_displaying_task+0x408>)
   19064:	4798      	blx	r3
			LCD_Create_Custom_createChar(5,Network_5);
   19066:	2308      	movs	r3, #8
   19068:	18fb      	adds	r3, r7, r3
   1906a:	0019      	movs	r1, r3
   1906c:	2005      	movs	r0, #5
   1906e:	4ba1      	ldr	r3, [pc, #644]	; (192f4 <lcd_displaying_task+0x408>)
   19070:	4798      	blx	r3
		}
		
		
		if(firstEvent)
   19072:	4ba1      	ldr	r3, [pc, #644]	; (192f8 <lcd_displaying_task+0x40c>)
   19074:	781b      	ldrb	r3, [r3, #0]
   19076:	b2db      	uxtb	r3, r3
   19078:	2b00      	cmp	r3, #0
   1907a:	d014      	beq.n	190a6 <lcd_displaying_task+0x1ba>
		{
			LCD_setCursor(0,0);
   1907c:	2100      	movs	r1, #0
   1907e:	2000      	movs	r0, #0
   19080:	4b89      	ldr	r3, [pc, #548]	; (192a8 <lcd_displaying_task+0x3bc>)
   19082:	4798      	blx	r3
			lcd_printf("Initializing... ");
   19084:	4b9d      	ldr	r3, [pc, #628]	; (192fc <lcd_displaying_task+0x410>)
   19086:	0018      	movs	r0, r3
   19088:	4b89      	ldr	r3, [pc, #548]	; (192b0 <lcd_displaying_task+0x3c4>)
   1908a:	4798      	blx	r3
			LCD_setCursor(0,1);
   1908c:	2101      	movs	r1, #1
   1908e:	2000      	movs	r0, #0
   19090:	4b85      	ldr	r3, [pc, #532]	; (192a8 <lcd_displaying_task+0x3bc>)
   19092:	4798      	blx	r3
			lcd_printf("COMMANDER v2    ");
   19094:	4b9a      	ldr	r3, [pc, #616]	; (19300 <lcd_displaying_task+0x414>)
   19096:	0018      	movs	r0, r3
   19098:	4b85      	ldr	r3, [pc, #532]	; (192b0 <lcd_displaying_task+0x3c4>)
   1909a:	4798      	blx	r3
			screen=1;
   1909c:	2347      	movs	r3, #71	; 0x47
   1909e:	18fb      	adds	r3, r7, r3
   190a0:	2201      	movs	r2, #1
   190a2:	701a      	strb	r2, [r3, #0]
   190a4:	e2fd      	b.n	196a2 <lcd_displaying_task+0x7b6>
		}
		else
		{
			if(gsmStatusChange)
   190a6:	4b78      	ldr	r3, [pc, #480]	; (19288 <lcd_displaying_task+0x39c>)
   190a8:	781b      	ldrb	r3, [r3, #0]
   190aa:	b2db      	uxtb	r3, r3
   190ac:	2b00      	cmp	r3, #0
   190ae:	d025      	beq.n	190fc <lcd_displaying_task+0x210>
			{
				LCD_setCursor(0,0);
   190b0:	2100      	movs	r1, #0
   190b2:	2000      	movs	r0, #0
   190b4:	4b7c      	ldr	r3, [pc, #496]	; (192a8 <lcd_displaying_task+0x3bc>)
   190b6:	4798      	blx	r3
				lcd_printf("PHONE STATUS    ");
   190b8:	4b92      	ldr	r3, [pc, #584]	; (19304 <lcd_displaying_task+0x418>)
   190ba:	0018      	movs	r0, r3
   190bc:	4b7c      	ldr	r3, [pc, #496]	; (192b0 <lcd_displaying_task+0x3c4>)
   190be:	4798      	blx	r3
				if(boolGsm_config_flag)
   190c0:	4b91      	ldr	r3, [pc, #580]	; (19308 <lcd_displaying_task+0x41c>)
   190c2:	781b      	ldrb	r3, [r3, #0]
   190c4:	b2db      	uxtb	r3, r3
   190c6:	2b00      	cmp	r3, #0
   190c8:	d008      	beq.n	190dc <lcd_displaying_task+0x1f0>
				{
					LCD_setCursor(0,1);
   190ca:	2101      	movs	r1, #1
   190cc:	2000      	movs	r0, #0
   190ce:	4b76      	ldr	r3, [pc, #472]	; (192a8 <lcd_displaying_task+0x3bc>)
   190d0:	4798      	blx	r3
					lcd_printf("ON              ");
   190d2:	4b8e      	ldr	r3, [pc, #568]	; (1930c <lcd_displaying_task+0x420>)
   190d4:	0018      	movs	r0, r3
   190d6:	4b76      	ldr	r3, [pc, #472]	; (192b0 <lcd_displaying_task+0x3c4>)
   190d8:	4798      	blx	r3
   190da:	e007      	b.n	190ec <lcd_displaying_task+0x200>
				}
				else
				{
					LCD_setCursor(0,1);
   190dc:	2101      	movs	r1, #1
   190de:	2000      	movs	r0, #0
   190e0:	4b71      	ldr	r3, [pc, #452]	; (192a8 <lcd_displaying_task+0x3bc>)
   190e2:	4798      	blx	r3
					lcd_printf("OFF             ");
   190e4:	4b8a      	ldr	r3, [pc, #552]	; (19310 <lcd_displaying_task+0x424>)
   190e6:	0018      	movs	r0, r3
   190e8:	4b71      	ldr	r3, [pc, #452]	; (192b0 <lcd_displaying_task+0x3c4>)
   190ea:	4798      	blx	r3
				}
				gsmStatusChange = false;
   190ec:	4b66      	ldr	r3, [pc, #408]	; (19288 <lcd_displaying_task+0x39c>)
   190ee:	2200      	movs	r2, #0
   190f0:	701a      	strb	r2, [r3, #0]
				vTaskDelay(2000/portTICK_PERIOD_MS);
   190f2:	23fa      	movs	r3, #250	; 0xfa
   190f4:	00db      	lsls	r3, r3, #3
   190f6:	0018      	movs	r0, r3
   190f8:	4b68      	ldr	r3, [pc, #416]	; (1929c <lcd_displaying_task+0x3b0>)
   190fa:	4798      	blx	r3
			}
			
			switch(screen)
   190fc:	2347      	movs	r3, #71	; 0x47
   190fe:	18fb      	adds	r3, r7, r3
   19100:	781b      	ldrb	r3, [r3, #0]
   19102:	2b0a      	cmp	r3, #10
   19104:	d900      	bls.n	19108 <lcd_displaying_task+0x21c>
   19106:	e2cc      	b.n	196a2 <lcd_displaying_task+0x7b6>
   19108:	009a      	lsls	r2, r3, #2
   1910a:	4b82      	ldr	r3, [pc, #520]	; (19314 <lcd_displaying_task+0x428>)
   1910c:	18d3      	adds	r3, r2, r3
   1910e:	681b      	ldr	r3, [r3, #0]
   19110:	469f      	mov	pc, r3
			{
				case  1:
				{
					LCD_setCursor(0,0);
   19112:	2100      	movs	r1, #0
   19114:	2000      	movs	r0, #0
   19116:	4b64      	ldr	r3, [pc, #400]	; (192a8 <lcd_displaying_task+0x3bc>)
   19118:	4798      	blx	r3
					lcd_printf("VRY   VYB   VBR ");
   1911a:	4b7f      	ldr	r3, [pc, #508]	; (19318 <lcd_displaying_task+0x42c>)
   1911c:	0018      	movs	r0, r3
   1911e:	4b64      	ldr	r3, [pc, #400]	; (192b0 <lcd_displaying_task+0x3c4>)
   19120:	4798      	blx	r3
					LCD_setCursor(0,1);
   19122:	2101      	movs	r1, #1
   19124:	2000      	movs	r0, #0
   19126:	4b60      	ldr	r3, [pc, #384]	; (192a8 <lcd_displaying_task+0x3bc>)
   19128:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
   1912a:	4b7c      	ldr	r3, [pc, #496]	; (1931c <lcd_displaying_task+0x430>)
   1912c:	681a      	ldr	r2, [r3, #0]
   1912e:	4b7c      	ldr	r3, [pc, #496]	; (19320 <lcd_displaying_task+0x434>)
   19130:	0011      	movs	r1, r2
   19132:	0018      	movs	r0, r3
   19134:	4b5e      	ldr	r3, [pc, #376]	; (192b0 <lcd_displaying_task+0x3c4>)
   19136:	4798      	blx	r3
					lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
   19138:	4b78      	ldr	r3, [pc, #480]	; (1931c <lcd_displaying_task+0x430>)
   1913a:	685a      	ldr	r2, [r3, #4]
   1913c:	4b78      	ldr	r3, [pc, #480]	; (19320 <lcd_displaying_task+0x434>)
   1913e:	0011      	movs	r1, r2
   19140:	0018      	movs	r0, r3
   19142:	4b5b      	ldr	r3, [pc, #364]	; (192b0 <lcd_displaying_task+0x3c4>)
   19144:	4798      	blx	r3
					lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
   19146:	4b75      	ldr	r3, [pc, #468]	; (1931c <lcd_displaying_task+0x430>)
   19148:	689a      	ldr	r2, [r3, #8]
   1914a:	4b76      	ldr	r3, [pc, #472]	; (19324 <lcd_displaying_task+0x438>)
   1914c:	0011      	movs	r1, r2
   1914e:	0018      	movs	r0, r3
   19150:	4b57      	ldr	r3, [pc, #348]	; (192b0 <lcd_displaying_task+0x3c4>)
   19152:	4798      	blx	r3
					break;
   19154:	e2a5      	b.n	196a2 <lcd_displaying_task+0x7b6>
				}
				case 2:
				{
					LCD_setCursor(0,0);
   19156:	2100      	movs	r1, #0
   19158:	2000      	movs	r0, #0
   1915a:	4b53      	ldr	r3, [pc, #332]	; (192a8 <lcd_displaying_task+0x3bc>)
   1915c:	4798      	blx	r3
					lcd_printf("3 PHASE SEQ:");
   1915e:	4b72      	ldr	r3, [pc, #456]	; (19328 <lcd_displaying_task+0x43c>)
   19160:	0018      	movs	r0, r3
   19162:	4b53      	ldr	r3, [pc, #332]	; (192b0 <lcd_displaying_task+0x3c4>)
   19164:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   19166:	4b71      	ldr	r3, [pc, #452]	; (1932c <lcd_displaying_task+0x440>)
   19168:	781b      	ldrb	r3, [r3, #0]
   1916a:	b2db      	uxtb	r3, r3
   1916c:	2b02      	cmp	r3, #2
   1916e:	d104      	bne.n	1917a <lcd_displaying_task+0x28e>
					{
						lcd_printf(" OK ");
   19170:	4b6f      	ldr	r3, [pc, #444]	; (19330 <lcd_displaying_task+0x444>)
   19172:	0018      	movs	r0, r3
   19174:	4b4e      	ldr	r3, [pc, #312]	; (192b0 <lcd_displaying_task+0x3c4>)
   19176:	4798      	blx	r3
   19178:	e003      	b.n	19182 <lcd_displaying_task+0x296>
					}
					else
					{
						lcd_printf(" ERR");
   1917a:	4b6e      	ldr	r3, [pc, #440]	; (19334 <lcd_displaying_task+0x448>)
   1917c:	0018      	movs	r0, r3
   1917e:	4b4c      	ldr	r3, [pc, #304]	; (192b0 <lcd_displaying_task+0x3c4>)
   19180:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   19182:	2101      	movs	r1, #1
   19184:	2000      	movs	r0, #0
   19186:	4b48      	ldr	r3, [pc, #288]	; (192a8 <lcd_displaying_task+0x3bc>)
   19188:	4798      	blx	r3
					lcd_printf("PHASE STATE:");
   1918a:	4b6b      	ldr	r3, [pc, #428]	; (19338 <lcd_displaying_task+0x44c>)
   1918c:	0018      	movs	r0, r3
   1918e:	4b48      	ldr	r3, [pc, #288]	; (192b0 <lcd_displaying_task+0x3c4>)
   19190:	4798      	blx	r3
					if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
   19192:	4b66      	ldr	r3, [pc, #408]	; (1932c <lcd_displaying_task+0x440>)
   19194:	785b      	ldrb	r3, [r3, #1]
   19196:	b2db      	uxtb	r3, r3
   19198:	2b03      	cmp	r3, #3
   1919a:	d104      	bne.n	191a6 <lcd_displaying_task+0x2ba>
					{
						lcd_printf(" 3PH ");
   1919c:	4b67      	ldr	r3, [pc, #412]	; (1933c <lcd_displaying_task+0x450>)
   1919e:	0018      	movs	r0, r3
   191a0:	4b43      	ldr	r3, [pc, #268]	; (192b0 <lcd_displaying_task+0x3c4>)
   191a2:	4798      	blx	r3
					}
					else
					{
						lcd_printf(" OFF");
					}
					break;
   191a4:	e27d      	b.n	196a2 <lcd_displaying_task+0x7b6>
					else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
   191a6:	4b61      	ldr	r3, [pc, #388]	; (1932c <lcd_displaying_task+0x440>)
   191a8:	785b      	ldrb	r3, [r3, #1]
   191aa:	b2db      	uxtb	r3, r3
   191ac:	2b02      	cmp	r3, #2
   191ae:	d104      	bne.n	191ba <lcd_displaying_task+0x2ce>
						lcd_printf(" 2PH ");
   191b0:	4b63      	ldr	r3, [pc, #396]	; (19340 <lcd_displaying_task+0x454>)
   191b2:	0018      	movs	r0, r3
   191b4:	4b3e      	ldr	r3, [pc, #248]	; (192b0 <lcd_displaying_task+0x3c4>)
   191b6:	4798      	blx	r3
					break;
   191b8:	e273      	b.n	196a2 <lcd_displaying_task+0x7b6>
						lcd_printf(" OFF");
   191ba:	4b62      	ldr	r3, [pc, #392]	; (19344 <lcd_displaying_task+0x458>)
   191bc:	0018      	movs	r0, r3
   191be:	4b3c      	ldr	r3, [pc, #240]	; (192b0 <lcd_displaying_task+0x3c4>)
   191c0:	4798      	blx	r3
					break;
   191c2:	e26e      	b.n	196a2 <lcd_displaying_task+0x7b6>
				}
				case  3:
				{
					LCD_setCursor(0,0);
   191c4:	2100      	movs	r1, #0
   191c6:	2000      	movs	r0, #0
   191c8:	4b37      	ldr	r3, [pc, #220]	; (192a8 <lcd_displaying_task+0x3bc>)
   191ca:	4798      	blx	r3
					if(!getMotorState())
   191cc:	4b5e      	ldr	r3, [pc, #376]	; (19348 <lcd_displaying_task+0x45c>)
   191ce:	4798      	blx	r3
   191d0:	0003      	movs	r3, r0
   191d2:	001a      	movs	r2, r3
   191d4:	2301      	movs	r3, #1
   191d6:	4053      	eors	r3, r2
   191d8:	b2db      	uxtb	r3, r3
   191da:	2b00      	cmp	r3, #0
   191dc:	d004      	beq.n	191e8 <lcd_displaying_task+0x2fc>
					{
						lcd_printf("MOTOR :  OFF    ");
   191de:	4b5b      	ldr	r3, [pc, #364]	; (1934c <lcd_displaying_task+0x460>)
   191e0:	0018      	movs	r0, r3
   191e2:	4b33      	ldr	r3, [pc, #204]	; (192b0 <lcd_displaying_task+0x3c4>)
   191e4:	4798      	blx	r3
   191e6:	e003      	b.n	191f0 <lcd_displaying_task+0x304>
					}
					else
					{
						lcd_printf("MOTOR :  ON     ");
   191e8:	4b59      	ldr	r3, [pc, #356]	; (19350 <lcd_displaying_task+0x464>)
   191ea:	0018      	movs	r0, r3
   191ec:	4b30      	ldr	r3, [pc, #192]	; (192b0 <lcd_displaying_task+0x3c4>)
   191ee:	4798      	blx	r3
					}
					
					LCD_setCursor(0,1);
   191f0:	2101      	movs	r1, #1
   191f2:	2000      	movs	r0, #0
   191f4:	4b2c      	ldr	r3, [pc, #176]	; (192a8 <lcd_displaying_task+0x3bc>)
   191f6:	4798      	blx	r3
					lcd_printf("                ");
   191f8:	4b56      	ldr	r3, [pc, #344]	; (19354 <lcd_displaying_task+0x468>)
   191fa:	0018      	movs	r0, r3
   191fc:	4b2c      	ldr	r3, [pc, #176]	; (192b0 <lcd_displaying_task+0x3c4>)
   191fe:	4798      	blx	r3
					if(user_settings_parameter_struct.autoStartAddress)
   19200:	4b55      	ldr	r3, [pc, #340]	; (19358 <lcd_displaying_task+0x46c>)
   19202:	785b      	ldrb	r3, [r3, #1]
   19204:	b2db      	uxtb	r3, r3
   19206:	2b00      	cmp	r3, #0
   19208:	d004      	beq.n	19214 <lcd_displaying_task+0x328>
					{
						lcd_printf("AUTO  :  ON     ");
   1920a:	4b54      	ldr	r3, [pc, #336]	; (1935c <lcd_displaying_task+0x470>)
   1920c:	0018      	movs	r0, r3
   1920e:	4b28      	ldr	r3, [pc, #160]	; (192b0 <lcd_displaying_task+0x3c4>)
   19210:	4798      	blx	r3
					//LCD_setCursor(0,0);
					//lcd_printf("MOTOR WATTAGE:  ");
					//LCD_setCursor(0,1);
					//lcd_printf("%03lu.%02lu kW         ",(Analog_Parameter_Struct.Motor_Power_IntPart),(Analog_Parameter_Struct.Motor_Power_DecPart));
					//}
					break;
   19212:	e246      	b.n	196a2 <lcd_displaying_task+0x7b6>
						lcd_printf("AUTO  :  OFF    ");
   19214:	4b52      	ldr	r3, [pc, #328]	; (19360 <lcd_displaying_task+0x474>)
   19216:	0018      	movs	r0, r3
   19218:	4b25      	ldr	r3, [pc, #148]	; (192b0 <lcd_displaying_task+0x3c4>)
   1921a:	4798      	blx	r3
					break;
   1921c:	e241      	b.n	196a2 <lcd_displaying_task+0x7b6>
				}
				case  4:
				{
					LCD_setCursor(0,0);
   1921e:	2100      	movs	r1, #0
   19220:	2000      	movs	r0, #0
   19222:	4b21      	ldr	r3, [pc, #132]	; (192a8 <lcd_displaying_task+0x3bc>)
   19224:	4798      	blx	r3
					lcd_printf("MOTOR CURRENT:  ");
   19226:	4b4f      	ldr	r3, [pc, #316]	; (19364 <lcd_displaying_task+0x478>)
   19228:	0018      	movs	r0, r3
   1922a:	4b21      	ldr	r3, [pc, #132]	; (192b0 <lcd_displaying_task+0x3c4>)
   1922c:	4798      	blx	r3
					LCD_setCursor(0,1);
   1922e:	2101      	movs	r1, #1
   19230:	2000      	movs	r0, #0
   19232:	4b1d      	ldr	r3, [pc, #116]	; (192a8 <lcd_displaying_task+0x3bc>)
   19234:	4798      	blx	r3
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
   19236:	4b39      	ldr	r3, [pc, #228]	; (1931c <lcd_displaying_task+0x430>)
   19238:	8a9b      	ldrh	r3, [r3, #20]
   1923a:	b29b      	uxth	r3, r3
   1923c:	0019      	movs	r1, r3
   1923e:	4b37      	ldr	r3, [pc, #220]	; (1931c <lcd_displaying_task+0x430>)
   19240:	8adb      	ldrh	r3, [r3, #22]
   19242:	b29b      	uxth	r3, r3
   19244:	001a      	movs	r2, r3
   19246:	4b48      	ldr	r3, [pc, #288]	; (19368 <lcd_displaying_task+0x47c>)
   19248:	0018      	movs	r0, r3
   1924a:	4b19      	ldr	r3, [pc, #100]	; (192b0 <lcd_displaying_task+0x3c4>)
   1924c:	4798      	blx	r3
					break;
   1924e:	e228      	b.n	196a2 <lcd_displaying_task+0x7b6>
				}
				case 5:
				{
					LCD_setCursor(0,0);
   19250:	2100      	movs	r1, #0
   19252:	2000      	movs	r0, #0
   19254:	4b14      	ldr	r3, [pc, #80]	; (192a8 <lcd_displaying_task+0x3bc>)
   19256:	4798      	blx	r3
					lcd_printf("CURRENT SETTING ");
   19258:	4b44      	ldr	r3, [pc, #272]	; (1936c <lcd_displaying_task+0x480>)
   1925a:	0018      	movs	r0, r3
   1925c:	4b14      	ldr	r3, [pc, #80]	; (192b0 <lcd_displaying_task+0x3c4>)
   1925e:	4798      	blx	r3
					LCD_setCursor(0,1);
   19260:	2101      	movs	r1, #1
   19262:	2000      	movs	r0, #0
   19264:	4b10      	ldr	r3, [pc, #64]	; (192a8 <lcd_displaying_task+0x3bc>)
   19266:	4798      	blx	r3
					if(user_settings_parameter_struct.currentDetectionAddress)
   19268:	4b3b      	ldr	r3, [pc, #236]	; (19358 <lcd_displaying_task+0x46c>)
   1926a:	7bdb      	ldrb	r3, [r3, #15]
   1926c:	b2db      	uxtb	r3, r3
   1926e:	2b00      	cmp	r3, #0
   19270:	d004      	beq.n	1927c <lcd_displaying_task+0x390>
					{
						lcd_printf("ON              ");
   19272:	4b26      	ldr	r3, [pc, #152]	; (1930c <lcd_displaying_task+0x420>)
   19274:	0018      	movs	r0, r3
   19276:	4b0e      	ldr	r3, [pc, #56]	; (192b0 <lcd_displaying_task+0x3c4>)
   19278:	4798      	blx	r3
					}
					else
					{
						lcd_printf("OFF             ");
					}
					break;
   1927a:	e212      	b.n	196a2 <lcd_displaying_task+0x7b6>
						lcd_printf("OFF             ");
   1927c:	4b24      	ldr	r3, [pc, #144]	; (19310 <lcd_displaying_task+0x424>)
   1927e:	0018      	movs	r0, r3
   19280:	4b0b      	ldr	r3, [pc, #44]	; (192b0 <lcd_displaying_task+0x3c4>)
   19282:	4798      	blx	r3
					break;
   19284:	e20d      	b.n	196a2 <lcd_displaying_task+0x7b6>
   19286:	46c0      	nop			; (mov r8, r8)
   19288:	200008de 	.word	0x200008de
   1928c:	20000a68 	.word	0x20000a68
   19290:	20000a69 	.word	0x20000a69
   19294:	00013ca1 	.word	0x00013ca1
   19298:	00013cd5 	.word	0x00013cd5
   1929c:	00020969 	.word	0x00020969
   192a0:	000139dd 	.word	0x000139dd
   192a4:	00013f6d 	.word	0x00013f6d
   192a8:	0001403d 	.word	0x0001403d
   192ac:	0002b01c 	.word	0x0002b01c
   192b0:	00014139 	.word	0x00014139
   192b4:	0002b030 	.word	0x0002b030
   192b8:	00000bb8 	.word	0x00000bb8
   192bc:	0002b044 	.word	0x0002b044
   192c0:	0002b058 	.word	0x0002b058
   192c4:	0002b06c 	.word	0x0002b06c
   192c8:	00019855 	.word	0x00019855
   192cc:	00021889 	.word	0x00021889
   192d0:	2000042c 	.word	0x2000042c
   192d4:	00020ccd 	.word	0x00020ccd
   192d8:	0002192d 	.word	0x0002192d
   192dc:	00029657 	.word	0x00029657
   192e0:	0002b2f8 	.word	0x0002b2f8
   192e4:	0002b300 	.word	0x0002b300
   192e8:	0002b308 	.word	0x0002b308
   192ec:	0002b310 	.word	0x0002b310
   192f0:	0002b318 	.word	0x0002b318
   192f4:	00013fdd 	.word	0x00013fdd
   192f8:	20000976 	.word	0x20000976
   192fc:	0002b070 	.word	0x0002b070
   19300:	0002b084 	.word	0x0002b084
   19304:	0002b098 	.word	0x0002b098
   19308:	200009c8 	.word	0x200009c8
   1930c:	0002b0ac 	.word	0x0002b0ac
   19310:	0002b0c0 	.word	0x0002b0c0
   19314:	0002b320 	.word	0x0002b320
   19318:	0002b0d4 	.word	0x0002b0d4
   1931c:	200008e8 	.word	0x200008e8
   19320:	0002b0e8 	.word	0x0002b0e8
   19324:	0002b0f4 	.word	0x0002b0f4
   19328:	0002b0fc 	.word	0x0002b0fc
   1932c:	20000948 	.word	0x20000948
   19330:	0002b10c 	.word	0x0002b10c
   19334:	0002b114 	.word	0x0002b114
   19338:	0002b11c 	.word	0x0002b11c
   1933c:	0002b12c 	.word	0x0002b12c
   19340:	0002b134 	.word	0x0002b134
   19344:	0002b13c 	.word	0x0002b13c
   19348:	0001bb0d 	.word	0x0001bb0d
   1934c:	0002b144 	.word	0x0002b144
   19350:	0002b158 	.word	0x0002b158
   19354:	0002b16c 	.word	0x0002b16c
   19358:	20000854 	.word	0x20000854
   1935c:	0002b180 	.word	0x0002b180
   19360:	0002b194 	.word	0x0002b194
   19364:	0002b1a8 	.word	0x0002b1a8
   19368:	0002b1bc 	.word	0x0002b1bc
   1936c:	0002b1d4 	.word	0x0002b1d4
				}
				case 6:
				{
					if(user_settings_parameter_struct.currentDetectionAddress)
   19370:	4baa      	ldr	r3, [pc, #680]	; (1961c <lcd_displaying_task+0x730>)
   19372:	7bdb      	ldrb	r3, [r3, #15]
   19374:	b2db      	uxtb	r3, r3
   19376:	2b00      	cmp	r3, #0
   19378:	d100      	bne.n	1937c <lcd_displaying_task+0x490>
   1937a:	e14a      	b.n	19612 <lcd_displaying_task+0x726>
					{
						LCD_setCursor(0,0);
   1937c:	2100      	movs	r1, #0
   1937e:	2000      	movs	r0, #0
   19380:	4ba7      	ldr	r3, [pc, #668]	; (19620 <lcd_displaying_task+0x734>)
   19382:	4798      	blx	r3
						//lcd_printf("                ");
						uint32_t temp_Int = user_settings_parameter_struct.overloadAddress / 100;
   19384:	4ba5      	ldr	r3, [pc, #660]	; (1961c <lcd_displaying_task+0x730>)
   19386:	695a      	ldr	r2, [r3, #20]
   19388:	4ba6      	ldr	r3, [pc, #664]	; (19624 <lcd_displaying_task+0x738>)
   1938a:	2164      	movs	r1, #100	; 0x64
   1938c:	0010      	movs	r0, r2
   1938e:	4798      	blx	r3
   19390:	0003      	movs	r3, r0
   19392:	643b      	str	r3, [r7, #64]	; 0x40
						uint32_t temp_Dec = user_settings_parameter_struct.overloadAddress % 100;
   19394:	4ba1      	ldr	r3, [pc, #644]	; (1961c <lcd_displaying_task+0x730>)
   19396:	695a      	ldr	r2, [r3, #20]
   19398:	4ba3      	ldr	r3, [pc, #652]	; (19628 <lcd_displaying_task+0x73c>)
   1939a:	2164      	movs	r1, #100	; 0x64
   1939c:	0010      	movs	r0, r2
   1939e:	4798      	blx	r3
   193a0:	000b      	movs	r3, r1
   193a2:	63fb      	str	r3, [r7, #60]	; 0x3c
						lcd_printf("OVER  : %03lu.%02lu  ",temp_Int,temp_Dec);
   193a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   193a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
   193a8:	4ba0      	ldr	r3, [pc, #640]	; (1962c <lcd_displaying_task+0x740>)
   193aa:	0018      	movs	r0, r3
   193ac:	4ba0      	ldr	r3, [pc, #640]	; (19630 <lcd_displaying_task+0x744>)
   193ae:	4798      	blx	r3
						LCD_setCursor(0,1);
   193b0:	2101      	movs	r1, #1
   193b2:	2000      	movs	r0, #0
   193b4:	4b9a      	ldr	r3, [pc, #616]	; (19620 <lcd_displaying_task+0x734>)
   193b6:	4798      	blx	r3
						//lcd_printf("                ");
						temp_Int = user_settings_parameter_struct.underloadAddress / 100;
   193b8:	4b98      	ldr	r3, [pc, #608]	; (1961c <lcd_displaying_task+0x730>)
   193ba:	699a      	ldr	r2, [r3, #24]
   193bc:	4b99      	ldr	r3, [pc, #612]	; (19624 <lcd_displaying_task+0x738>)
   193be:	2164      	movs	r1, #100	; 0x64
   193c0:	0010      	movs	r0, r2
   193c2:	4798      	blx	r3
   193c4:	0003      	movs	r3, r0
   193c6:	643b      	str	r3, [r7, #64]	; 0x40
						temp_Dec = user_settings_parameter_struct.underloadAddress % 100;
   193c8:	4b94      	ldr	r3, [pc, #592]	; (1961c <lcd_displaying_task+0x730>)
   193ca:	699a      	ldr	r2, [r3, #24]
   193cc:	4b96      	ldr	r3, [pc, #600]	; (19628 <lcd_displaying_task+0x73c>)
   193ce:	2164      	movs	r1, #100	; 0x64
   193d0:	0010      	movs	r0, r2
   193d2:	4798      	blx	r3
   193d4:	000b      	movs	r3, r1
   193d6:	63fb      	str	r3, [r7, #60]	; 0x3c
						lcd_printf("UNDER : %03lu.%02lu  ",temp_Int,temp_Dec);
   193d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   193da:	6c39      	ldr	r1, [r7, #64]	; 0x40
   193dc:	4b95      	ldr	r3, [pc, #596]	; (19634 <lcd_displaying_task+0x748>)
   193de:	0018      	movs	r0, r3
   193e0:	4b93      	ldr	r3, [pc, #588]	; (19630 <lcd_displaying_task+0x744>)
   193e2:	4798      	blx	r3
					}
					break;
   193e4:	e115      	b.n	19612 <lcd_displaying_task+0x726>
				}
				case 7:
				{
					LCD_setCursor(0,0);
   193e6:	2100      	movs	r1, #0
   193e8:	2000      	movs	r0, #0
   193ea:	4b8d      	ldr	r3, [pc, #564]	; (19620 <lcd_displaying_task+0x734>)
   193ec:	4798      	blx	r3
					lcd_printf("O-LEVEL : ");
   193ee:	4b92      	ldr	r3, [pc, #584]	; (19638 <lcd_displaying_task+0x74c>)
   193f0:	0018      	movs	r0, r3
   193f2:	4b8f      	ldr	r3, [pc, #572]	; (19630 <lcd_displaying_task+0x744>)
   193f4:	4798      	blx	r3
					if (overheadLevel == OVERHEADHIGHLEVEL)
   193f6:	4b91      	ldr	r3, [pc, #580]	; (1963c <lcd_displaying_task+0x750>)
   193f8:	781b      	ldrb	r3, [r3, #0]
   193fa:	b2db      	uxtb	r3, r3
   193fc:	2b02      	cmp	r3, #2
   193fe:	d104      	bne.n	1940a <lcd_displaying_task+0x51e>
					{
						lcd_printf("HIGH  ");
   19400:	4b8f      	ldr	r3, [pc, #572]	; (19640 <lcd_displaying_task+0x754>)
   19402:	0018      	movs	r0, r3
   19404:	4b8a      	ldr	r3, [pc, #552]	; (19630 <lcd_displaying_task+0x744>)
   19406:	4798      	blx	r3
   19408:	e012      	b.n	19430 <lcd_displaying_task+0x544>
					}
					else if (overheadLevel == OVERHEADMIDLEVEL)
   1940a:	4b8c      	ldr	r3, [pc, #560]	; (1963c <lcd_displaying_task+0x750>)
   1940c:	781b      	ldrb	r3, [r3, #0]
   1940e:	b2db      	uxtb	r3, r3
   19410:	2b01      	cmp	r3, #1
   19412:	d104      	bne.n	1941e <lcd_displaying_task+0x532>
					{
						lcd_printf("MID   ");
   19414:	4b8b      	ldr	r3, [pc, #556]	; (19644 <lcd_displaying_task+0x758>)
   19416:	0018      	movs	r0, r3
   19418:	4b85      	ldr	r3, [pc, #532]	; (19630 <lcd_displaying_task+0x744>)
   1941a:	4798      	blx	r3
   1941c:	e008      	b.n	19430 <lcd_displaying_task+0x544>
					}
					else if (overheadLevel == OVERHEADCRITICALLEVEL)
   1941e:	4b87      	ldr	r3, [pc, #540]	; (1963c <lcd_displaying_task+0x750>)
   19420:	781b      	ldrb	r3, [r3, #0]
   19422:	b2db      	uxtb	r3, r3
   19424:	2b00      	cmp	r3, #0
   19426:	d103      	bne.n	19430 <lcd_displaying_task+0x544>
					{
						lcd_printf("LOW   ");
   19428:	4b87      	ldr	r3, [pc, #540]	; (19648 <lcd_displaying_task+0x75c>)
   1942a:	0018      	movs	r0, r3
   1942c:	4b80      	ldr	r3, [pc, #512]	; (19630 <lcd_displaying_task+0x744>)
   1942e:	4798      	blx	r3
					}
					LCD_setCursor(0,1);
   19430:	2101      	movs	r1, #1
   19432:	2000      	movs	r0, #0
   19434:	4b7a      	ldr	r3, [pc, #488]	; (19620 <lcd_displaying_task+0x734>)
   19436:	4798      	blx	r3
					lcd_printf("U-LEVEL : ");
   19438:	4b84      	ldr	r3, [pc, #528]	; (1964c <lcd_displaying_task+0x760>)
   1943a:	0018      	movs	r0, r3
   1943c:	4b7c      	ldr	r3, [pc, #496]	; (19630 <lcd_displaying_task+0x744>)
   1943e:	4798      	blx	r3
					if (undergroundLevel == CRITICALLEVEL)
   19440:	4b83      	ldr	r3, [pc, #524]	; (19650 <lcd_displaying_task+0x764>)
   19442:	781b      	ldrb	r3, [r3, #0]
   19444:	2b00      	cmp	r3, #0
   19446:	d104      	bne.n	19452 <lcd_displaying_task+0x566>
					{
						lcd_printf("CRTCL ");
   19448:	4b82      	ldr	r3, [pc, #520]	; (19654 <lcd_displaying_task+0x768>)
   1944a:	0018      	movs	r0, r3
   1944c:	4b78      	ldr	r3, [pc, #480]	; (19630 <lcd_displaying_task+0x744>)
   1944e:	4798      	blx	r3
					}
					else if (undergroundLevel == HIGHLEVEL)
					{
						lcd_printf("HIGH  ");
					}
					break;
   19450:	e0e1      	b.n	19616 <lcd_displaying_task+0x72a>
					else if (undergroundLevel == LOWLEVEL)
   19452:	4b7f      	ldr	r3, [pc, #508]	; (19650 <lcd_displaying_task+0x764>)
   19454:	781b      	ldrb	r3, [r3, #0]
   19456:	2b01      	cmp	r3, #1
   19458:	d104      	bne.n	19464 <lcd_displaying_task+0x578>
						lcd_printf("LOW   ");
   1945a:	4b7b      	ldr	r3, [pc, #492]	; (19648 <lcd_displaying_task+0x75c>)
   1945c:	0018      	movs	r0, r3
   1945e:	4b74      	ldr	r3, [pc, #464]	; (19630 <lcd_displaying_task+0x744>)
   19460:	4798      	blx	r3
					break;
   19462:	e0d8      	b.n	19616 <lcd_displaying_task+0x72a>
					else if (undergroundLevel == MIDLEVEL)
   19464:	4b7a      	ldr	r3, [pc, #488]	; (19650 <lcd_displaying_task+0x764>)
   19466:	781b      	ldrb	r3, [r3, #0]
   19468:	2b02      	cmp	r3, #2
   1946a:	d104      	bne.n	19476 <lcd_displaying_task+0x58a>
						lcd_printf("MID   ");
   1946c:	4b75      	ldr	r3, [pc, #468]	; (19644 <lcd_displaying_task+0x758>)
   1946e:	0018      	movs	r0, r3
   19470:	4b6f      	ldr	r3, [pc, #444]	; (19630 <lcd_displaying_task+0x744>)
   19472:	4798      	blx	r3
					break;
   19474:	e0cf      	b.n	19616 <lcd_displaying_task+0x72a>
					else if (undergroundLevel == HIGHLEVEL)
   19476:	4b76      	ldr	r3, [pc, #472]	; (19650 <lcd_displaying_task+0x764>)
   19478:	781b      	ldrb	r3, [r3, #0]
   1947a:	2b03      	cmp	r3, #3
   1947c:	d000      	beq.n	19480 <lcd_displaying_task+0x594>
   1947e:	e0ca      	b.n	19616 <lcd_displaying_task+0x72a>
						lcd_printf("HIGH  ");
   19480:	4b6f      	ldr	r3, [pc, #444]	; (19640 <lcd_displaying_task+0x754>)
   19482:	0018      	movs	r0, r3
   19484:	4b6a      	ldr	r3, [pc, #424]	; (19630 <lcd_displaying_task+0x744>)
   19486:	4798      	blx	r3
					break;
   19488:	e0c5      	b.n	19616 <lcd_displaying_task+0x72a>
				}
				case 8:
				{
					LCD_setCursor(0,0);
   1948a:	2100      	movs	r1, #0
   1948c:	2000      	movs	r0, #0
   1948e:	4b64      	ldr	r3, [pc, #400]	; (19620 <lcd_displaying_task+0x734>)
   19490:	4798      	blx	r3
					lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
   19492:	4b71      	ldr	r3, [pc, #452]	; (19658 <lcd_displaying_task+0x76c>)
   19494:	7f1b      	ldrb	r3, [r3, #28]
   19496:	b2db      	uxtb	r3, r3
   19498:	001a      	movs	r2, r3
   1949a:	4b70      	ldr	r3, [pc, #448]	; (1965c <lcd_displaying_task+0x770>)
   1949c:	0011      	movs	r1, r2
   1949e:	0018      	movs	r0, r3
   194a0:	4b63      	ldr	r3, [pc, #396]	; (19630 <lcd_displaying_task+0x744>)
   194a2:	4798      	blx	r3
					LCD_setCursor(0,1);
   194a4:	2101      	movs	r1, #1
   194a6:	2000      	movs	r0, #0
   194a8:	4b5d      	ldr	r3, [pc, #372]	; (19620 <lcd_displaying_task+0x734>)
   194aa:	4798      	blx	r3
					lcd_printf("SIGNAL : ");
   194ac:	4b6c      	ldr	r3, [pc, #432]	; (19660 <lcd_displaying_task+0x774>)
   194ae:	0018      	movs	r0, r3
   194b0:	4b5f      	ldr	r3, [pc, #380]	; (19630 <lcd_displaying_task+0x744>)
   194b2:	4798      	blx	r3
					LCD_setCursor(9,1);
   194b4:	2101      	movs	r1, #1
   194b6:	2009      	movs	r0, #9
   194b8:	4b59      	ldr	r3, [pc, #356]	; (19620 <lcd_displaying_task+0x734>)
   194ba:	4798      	blx	r3
					lcd_printf("       ");
   194bc:	4b69      	ldr	r3, [pc, #420]	; (19664 <lcd_displaying_task+0x778>)
   194be:	0018      	movs	r0, r3
   194c0:	4b5b      	ldr	r3, [pc, #364]	; (19630 <lcd_displaying_task+0x744>)
   194c2:	4798      	blx	r3
					LCD_setCursor(9,1);
   194c4:	2101      	movs	r1, #1
   194c6:	2009      	movs	r0, #9
   194c8:	4b55      	ldr	r3, [pc, #340]	; (19620 <lcd_displaying_task+0x734>)
   194ca:	4798      	blx	r3
					
					uint8_t tempSignal = Signal_Strength;
   194cc:	233b      	movs	r3, #59	; 0x3b
   194ce:	18fb      	adds	r3, r7, r3
   194d0:	4a65      	ldr	r2, [pc, #404]	; (19668 <lcd_displaying_task+0x77c>)
   194d2:	7812      	ldrb	r2, [r2, #0]
   194d4:	701a      	strb	r2, [r3, #0]
					for (uint8_t i=0;i<=tempSignal;i++)
   194d6:	2346      	movs	r3, #70	; 0x46
   194d8:	18fb      	adds	r3, r7, r3
   194da:	2200      	movs	r2, #0
   194dc:	701a      	strb	r2, [r3, #0]
   194de:	e00c      	b.n	194fa <lcd_displaying_task+0x60e>
					{
						LCD_write(i);
   194e0:	2346      	movs	r3, #70	; 0x46
   194e2:	18fb      	adds	r3, r7, r3
   194e4:	781b      	ldrb	r3, [r3, #0]
   194e6:	0018      	movs	r0, r3
   194e8:	4b60      	ldr	r3, [pc, #384]	; (1966c <lcd_displaying_task+0x780>)
   194ea:	4798      	blx	r3
					for (uint8_t i=0;i<=tempSignal;i++)
   194ec:	2346      	movs	r3, #70	; 0x46
   194ee:	18fb      	adds	r3, r7, r3
   194f0:	781a      	ldrb	r2, [r3, #0]
   194f2:	2346      	movs	r3, #70	; 0x46
   194f4:	18fb      	adds	r3, r7, r3
   194f6:	3201      	adds	r2, #1
   194f8:	701a      	strb	r2, [r3, #0]
   194fa:	2346      	movs	r3, #70	; 0x46
   194fc:	18fa      	adds	r2, r7, r3
   194fe:	233b      	movs	r3, #59	; 0x3b
   19500:	18fb      	adds	r3, r7, r3
   19502:	7812      	ldrb	r2, [r2, #0]
   19504:	781b      	ldrb	r3, [r3, #0]
   19506:	429a      	cmp	r2, r3
   19508:	d9ea      	bls.n	194e0 <lcd_displaying_task+0x5f4>
					}

					break;
   1950a:	e0ca      	b.n	196a2 <lcd_displaying_task+0x7b6>
				}
				case 9:
				{
					LCD_setCursor(0,0);
   1950c:	2100      	movs	r1, #0
   1950e:	2000      	movs	r0, #0
   19510:	4b43      	ldr	r3, [pc, #268]	; (19620 <lcd_displaying_task+0x734>)
   19512:	4798      	blx	r3
					switch(callStateOnLCD)
   19514:	4b56      	ldr	r3, [pc, #344]	; (19670 <lcd_displaying_task+0x784>)
   19516:	781b      	ldrb	r3, [r3, #0]
   19518:	b2db      	uxtb	r3, r3
   1951a:	2b05      	cmp	r3, #5
   1951c:	d900      	bls.n	19520 <lcd_displaying_task+0x634>
   1951e:	e0bf      	b.n	196a0 <lcd_displaying_task+0x7b4>
   19520:	009a      	lsls	r2, r3, #2
   19522:	4b54      	ldr	r3, [pc, #336]	; (19674 <lcd_displaying_task+0x788>)
   19524:	18d3      	adds	r3, r2, r3
   19526:	681b      	ldr	r3, [r3, #0]
   19528:	469f      	mov	pc, r3
					{
						case LCDCALLSTATE_RINGING:
						{
							lcd_printf("INCOMING CALL.. ");
   1952a:	4b53      	ldr	r3, [pc, #332]	; (19678 <lcd_displaying_task+0x78c>)
   1952c:	0018      	movs	r0, r3
   1952e:	4b40      	ldr	r3, [pc, #256]	; (19630 <lcd_displaying_task+0x744>)
   19530:	4798      	blx	r3
							LCD_setCursor(0,1);
   19532:	2101      	movs	r1, #1
   19534:	2000      	movs	r0, #0
   19536:	4b3a      	ldr	r3, [pc, #232]	; (19620 <lcd_displaying_task+0x734>)
   19538:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   1953a:	4a50      	ldr	r2, [pc, #320]	; (1967c <lcd_displaying_task+0x790>)
   1953c:	4b50      	ldr	r3, [pc, #320]	; (19680 <lcd_displaying_task+0x794>)
   1953e:	0011      	movs	r1, r2
   19540:	0018      	movs	r0, r3
   19542:	4b3b      	ldr	r3, [pc, #236]	; (19630 <lcd_displaying_task+0x744>)
   19544:	4798      	blx	r3
							break;
   19546:	e045      	b.n	195d4 <lcd_displaying_task+0x6e8>
						}
						case LCDCALLSTATE_INCALL:
						{
							lcd_printf("IN CALL...      ");
   19548:	4b4e      	ldr	r3, [pc, #312]	; (19684 <lcd_displaying_task+0x798>)
   1954a:	0018      	movs	r0, r3
   1954c:	4b38      	ldr	r3, [pc, #224]	; (19630 <lcd_displaying_task+0x744>)
   1954e:	4798      	blx	r3
							LCD_setCursor(0,1);
   19550:	2101      	movs	r1, #1
   19552:	2000      	movs	r0, #0
   19554:	4b32      	ldr	r3, [pc, #200]	; (19620 <lcd_displaying_task+0x734>)
   19556:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   19558:	4a48      	ldr	r2, [pc, #288]	; (1967c <lcd_displaying_task+0x790>)
   1955a:	4b49      	ldr	r3, [pc, #292]	; (19680 <lcd_displaying_task+0x794>)
   1955c:	0011      	movs	r1, r2
   1955e:	0018      	movs	r0, r3
   19560:	4b33      	ldr	r3, [pc, #204]	; (19630 <lcd_displaying_task+0x744>)
   19562:	4798      	blx	r3
							break;
   19564:	e036      	b.n	195d4 <lcd_displaying_task+0x6e8>
						}
						case LCDCALLSTATE_OUTGOING:
						{
							lcd_printf("DIALING...      ");
   19566:	4b48      	ldr	r3, [pc, #288]	; (19688 <lcd_displaying_task+0x79c>)
   19568:	0018      	movs	r0, r3
   1956a:	4b31      	ldr	r3, [pc, #196]	; (19630 <lcd_displaying_task+0x744>)
   1956c:	4798      	blx	r3
							LCD_setCursor(0,1);
   1956e:	2101      	movs	r1, #1
   19570:	2000      	movs	r0, #0
   19572:	4b2b      	ldr	r3, [pc, #172]	; (19620 <lcd_displaying_task+0x734>)
   19574:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   19576:	4a41      	ldr	r2, [pc, #260]	; (1967c <lcd_displaying_task+0x790>)
   19578:	4b41      	ldr	r3, [pc, #260]	; (19680 <lcd_displaying_task+0x794>)
   1957a:	0011      	movs	r1, r2
   1957c:	0018      	movs	r0, r3
   1957e:	4b2c      	ldr	r3, [pc, #176]	; (19630 <lcd_displaying_task+0x744>)
   19580:	4798      	blx	r3
							break;
   19582:	e027      	b.n	195d4 <lcd_displaying_task+0x6e8>
						}
						case LCDCALLSTATE_INCOMINGSMS:
						{
							lcd_printf("INCOMING SMS... ");
   19584:	4b41      	ldr	r3, [pc, #260]	; (1968c <lcd_displaying_task+0x7a0>)
   19586:	0018      	movs	r0, r3
   19588:	4b29      	ldr	r3, [pc, #164]	; (19630 <lcd_displaying_task+0x744>)
   1958a:	4798      	blx	r3
							LCD_setCursor(0,1);
   1958c:	2101      	movs	r1, #1
   1958e:	2000      	movs	r0, #0
   19590:	4b23      	ldr	r3, [pc, #140]	; (19620 <lcd_displaying_task+0x734>)
   19592:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   19594:	4a39      	ldr	r2, [pc, #228]	; (1967c <lcd_displaying_task+0x790>)
   19596:	4b3a      	ldr	r3, [pc, #232]	; (19680 <lcd_displaying_task+0x794>)
   19598:	0011      	movs	r1, r2
   1959a:	0018      	movs	r0, r3
   1959c:	4b24      	ldr	r3, [pc, #144]	; (19630 <lcd_displaying_task+0x744>)
   1959e:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   195a0:	2200      	movs	r2, #0
   195a2:	2100      	movs	r1, #0
   195a4:	2000      	movs	r0, #0
   195a6:	4b3a      	ldr	r3, [pc, #232]	; (19690 <lcd_displaying_task+0x7a4>)
   195a8:	4798      	blx	r3
							break;
   195aa:	e013      	b.n	195d4 <lcd_displaying_task+0x6e8>
						}
						case LCDCALLSTATE_OUTGOINGSMS:
						{
							lcd_printf("OUTGOING SMS... ");
   195ac:	4b39      	ldr	r3, [pc, #228]	; (19694 <lcd_displaying_task+0x7a8>)
   195ae:	0018      	movs	r0, r3
   195b0:	4b1f      	ldr	r3, [pc, #124]	; (19630 <lcd_displaying_task+0x744>)
   195b2:	4798      	blx	r3
							LCD_setCursor(0,1);
   195b4:	2101      	movs	r1, #1
   195b6:	2000      	movs	r0, #0
   195b8:	4b19      	ldr	r3, [pc, #100]	; (19620 <lcd_displaying_task+0x734>)
   195ba:	4798      	blx	r3
							lcd_printf("%-16s",numberOnLCD);
   195bc:	4a2f      	ldr	r2, [pc, #188]	; (1967c <lcd_displaying_task+0x790>)
   195be:	4b30      	ldr	r3, [pc, #192]	; (19680 <lcd_displaying_task+0x794>)
   195c0:	0011      	movs	r1, r2
   195c2:	0018      	movs	r0, r3
   195c4:	4b1a      	ldr	r3, [pc, #104]	; (19630 <lcd_displaying_task+0x744>)
   195c6:	4798      	blx	r3
							setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
   195c8:	2200      	movs	r2, #0
   195ca:	2100      	movs	r1, #0
   195cc:	2000      	movs	r0, #0
   195ce:	4b30      	ldr	r3, [pc, #192]	; (19690 <lcd_displaying_task+0x7a4>)
   195d0:	4798      	blx	r3
							break;
   195d2:	46c0      	nop			; (mov r8, r8)
						}
					}
					break;
   195d4:	e064      	b.n	196a0 <lcd_displaying_task+0x7b4>
				}
				case 10:
				{
					if(Analog_Parameter_Struct.Battery_percentage<35)
   195d6:	4b20      	ldr	r3, [pc, #128]	; (19658 <lcd_displaying_task+0x76c>)
   195d8:	7f1b      	ldrb	r3, [r3, #28]
   195da:	b2db      	uxtb	r3, r3
   195dc:	2b22      	cmp	r3, #34	; 0x22
   195de:	d810      	bhi.n	19602 <lcd_displaying_task+0x716>
					{
						LCD_setCursor(0,0);
   195e0:	2100      	movs	r1, #0
   195e2:	2000      	movs	r0, #0
   195e4:	4b0e      	ldr	r3, [pc, #56]	; (19620 <lcd_displaying_task+0x734>)
   195e6:	4798      	blx	r3
						lcd_printf("LOW BATTERY     ");
   195e8:	4b2b      	ldr	r3, [pc, #172]	; (19698 <lcd_displaying_task+0x7ac>)
   195ea:	0018      	movs	r0, r3
   195ec:	4b10      	ldr	r3, [pc, #64]	; (19630 <lcd_displaying_task+0x744>)
   195ee:	4798      	blx	r3
						LCD_setCursor(0,1);
   195f0:	2101      	movs	r1, #1
   195f2:	2000      	movs	r0, #0
   195f4:	4b0a      	ldr	r3, [pc, #40]	; (19620 <lcd_displaying_task+0x734>)
   195f6:	4798      	blx	r3
						lcd_printf("                ");
   195f8:	4b28      	ldr	r3, [pc, #160]	; (1969c <lcd_displaying_task+0x7b0>)
   195fa:	0018      	movs	r0, r3
   195fc:	4b0c      	ldr	r3, [pc, #48]	; (19630 <lcd_displaying_task+0x744>)
   195fe:	4798      	blx	r3
						break;
   19600:	e04f      	b.n	196a2 <lcd_displaying_task+0x7b6>
					}
					else
					{
						screen++;
   19602:	2347      	movs	r3, #71	; 0x47
   19604:	18fb      	adds	r3, r7, r3
   19606:	781a      	ldrb	r2, [r3, #0]
   19608:	2347      	movs	r3, #71	; 0x47
   1960a:	18fb      	adds	r3, r7, r3
   1960c:	3201      	adds	r2, #1
   1960e:	701a      	strb	r2, [r3, #0]
					}
					break;
   19610:	e047      	b.n	196a2 <lcd_displaying_task+0x7b6>
					break;
   19612:	46c0      	nop			; (mov r8, r8)
   19614:	e045      	b.n	196a2 <lcd_displaying_task+0x7b6>
					break;
   19616:	46c0      	nop			; (mov r8, r8)
   19618:	e043      	b.n	196a2 <lcd_displaying_task+0x7b6>
   1961a:	46c0      	nop			; (mov r8, r8)
   1961c:	20000854 	.word	0x20000854
   19620:	0001403d 	.word	0x0001403d
   19624:	00026de1 	.word	0x00026de1
   19628:	00026eed 	.word	0x00026eed
   1962c:	0002b1e8 	.word	0x0002b1e8
   19630:	00014139 	.word	0x00014139
   19634:	0002b200 	.word	0x0002b200
   19638:	0002b218 	.word	0x0002b218
   1963c:	20000990 	.word	0x20000990
   19640:	0002b224 	.word	0x0002b224
   19644:	0002b22c 	.word	0x0002b22c
   19648:	0002b234 	.word	0x0002b234
   1964c:	0002b23c 	.word	0x0002b23c
   19650:	20000a5c 	.word	0x20000a5c
   19654:	0002b248 	.word	0x0002b248
   19658:	200008e8 	.word	0x200008e8
   1965c:	0002b250 	.word	0x0002b250
   19660:	0002b264 	.word	0x0002b264
   19664:	0002b270 	.word	0x0002b270
   19668:	20000989 	.word	0x20000989
   1966c:	00013ef1 	.word	0x00013ef1
   19670:	200009d6 	.word	0x200009d6
   19674:	0002b34c 	.word	0x0002b34c
   19678:	0002b278 	.word	0x0002b278
   1967c:	20000a48 	.word	0x20000a48
   19680:	0002b28c 	.word	0x0002b28c
   19684:	0002b294 	.word	0x0002b294
   19688:	0002b2a8 	.word	0x0002b2a8
   1968c:	0002b2bc 	.word	0x0002b2bc
   19690:	0001da2d 	.word	0x0001da2d
   19694:	0002b2d0 	.word	0x0002b2d0
   19698:	0002b2e4 	.word	0x0002b2e4
   1969c:	0002b16c 	.word	0x0002b16c
					break;
   196a0:	46c0      	nop			; (mov r8, r8)
				//break;
				//}
			}
		}
		
		if (xQueueReceive(xfour_Second_Queue,&time,0))
   196a2:	4b4e      	ldr	r3, [pc, #312]	; (197dc <lcd_displaying_task+0x8f0>)
   196a4:	681b      	ldr	r3, [r3, #0]
   196a6:	223a      	movs	r2, #58	; 0x3a
   196a8:	18b9      	adds	r1, r7, r2
   196aa:	2200      	movs	r2, #0
   196ac:	0018      	movs	r0, r3
   196ae:	4b4c      	ldr	r3, [pc, #304]	; (197e0 <lcd_displaying_task+0x8f4>)
   196b0:	4798      	blx	r3
   196b2:	1e03      	subs	r3, r0, #0
   196b4:	d100      	bne.n	196b8 <lcd_displaying_task+0x7cc>
   196b6:	e073      	b.n	197a0 <lcd_displaying_task+0x8b4>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
   196b8:	4b4a      	ldr	r3, [pc, #296]	; (197e4 <lcd_displaying_task+0x8f8>)
   196ba:	6818      	ldr	r0, [r3, #0]
   196bc:	23fa      	movs	r3, #250	; 0xfa
   196be:	011a      	lsls	r2, r3, #4
   196c0:	2301      	movs	r3, #1
   196c2:	425b      	negs	r3, r3
   196c4:	9300      	str	r3, [sp, #0]
   196c6:	2300      	movs	r3, #0
   196c8:	2104      	movs	r1, #4
   196ca:	4c47      	ldr	r4, [pc, #284]	; (197e8 <lcd_displaying_task+0x8fc>)
   196cc:	47a0      	blx	r4
			if(varPauseDisplay==false)
   196ce:	4b47      	ldr	r3, [pc, #284]	; (197ec <lcd_displaying_task+0x900>)
   196d0:	781b      	ldrb	r3, [r3, #0]
   196d2:	b2db      	uxtb	r3, r3
   196d4:	2201      	movs	r2, #1
   196d6:	4053      	eors	r3, r2
   196d8:	b2db      	uxtb	r3, r3
   196da:	2b00      	cmp	r3, #0
   196dc:	d060      	beq.n	197a0 <lcd_displaying_task+0x8b4>
			{
				screen++;
   196de:	2347      	movs	r3, #71	; 0x47
   196e0:	18fb      	adds	r3, r7, r3
   196e2:	781a      	ldrb	r2, [r3, #0]
   196e4:	2347      	movs	r3, #71	; 0x47
   196e6:	18fb      	adds	r3, r7, r3
   196e8:	3201      	adds	r2, #1
   196ea:	701a      	strb	r2, [r3, #0]
				if(!getMotorState() && screen==4)
   196ec:	4b40      	ldr	r3, [pc, #256]	; (197f0 <lcd_displaying_task+0x904>)
   196ee:	4798      	blx	r3
   196f0:	0003      	movs	r3, r0
   196f2:	001a      	movs	r2, r3
   196f4:	2301      	movs	r3, #1
   196f6:	4053      	eors	r3, r2
   196f8:	b2db      	uxtb	r3, r3
   196fa:	2b00      	cmp	r3, #0
   196fc:	d00b      	beq.n	19716 <lcd_displaying_task+0x82a>
   196fe:	2347      	movs	r3, #71	; 0x47
   19700:	18fb      	adds	r3, r7, r3
   19702:	781b      	ldrb	r3, [r3, #0]
   19704:	2b04      	cmp	r3, #4
   19706:	d106      	bne.n	19716 <lcd_displaying_task+0x82a>
				{
					screen++;
   19708:	2347      	movs	r3, #71	; 0x47
   1970a:	18fb      	adds	r3, r7, r3
   1970c:	781a      	ldrb	r2, [r3, #0]
   1970e:	2347      	movs	r3, #71	; 0x47
   19710:	18fb      	adds	r3, r7, r3
   19712:	3201      	adds	r2, #1
   19714:	701a      	strb	r2, [r3, #0]
				}
				
				if(screen==6 && (!user_settings_parameter_struct.currentDetectionAddress || !getMotorState()))
   19716:	2347      	movs	r3, #71	; 0x47
   19718:	18fb      	adds	r3, r7, r3
   1971a:	781b      	ldrb	r3, [r3, #0]
   1971c:	2b06      	cmp	r3, #6
   1971e:	d114      	bne.n	1974a <lcd_displaying_task+0x85e>
   19720:	4b34      	ldr	r3, [pc, #208]	; (197f4 <lcd_displaying_task+0x908>)
   19722:	7bdb      	ldrb	r3, [r3, #15]
   19724:	b2db      	uxtb	r3, r3
   19726:	2b00      	cmp	r3, #0
   19728:	d008      	beq.n	1973c <lcd_displaying_task+0x850>
   1972a:	4b31      	ldr	r3, [pc, #196]	; (197f0 <lcd_displaying_task+0x904>)
   1972c:	4798      	blx	r3
   1972e:	0003      	movs	r3, r0
   19730:	001a      	movs	r2, r3
   19732:	2301      	movs	r3, #1
   19734:	4053      	eors	r3, r2
   19736:	b2db      	uxtb	r3, r3
   19738:	2b00      	cmp	r3, #0
   1973a:	d006      	beq.n	1974a <lcd_displaying_task+0x85e>
				{
					screen++;
   1973c:	2347      	movs	r3, #71	; 0x47
   1973e:	18fb      	adds	r3, r7, r3
   19740:	781a      	ldrb	r2, [r3, #0]
   19742:	2347      	movs	r3, #71	; 0x47
   19744:	18fb      	adds	r3, r7, r3
   19746:	3201      	adds	r2, #1
   19748:	701a      	strb	r2, [r3, #0]
				}

				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==7)
   1974a:	4b2b      	ldr	r3, [pc, #172]	; (197f8 <lcd_displaying_task+0x90c>)
   1974c:	795b      	ldrb	r3, [r3, #5]
   1974e:	2b00      	cmp	r3, #0
   19750:	d10b      	bne.n	1976a <lcd_displaying_task+0x87e>
   19752:	2347      	movs	r3, #71	; 0x47
   19754:	18fb      	adds	r3, r7, r3
   19756:	781b      	ldrb	r3, [r3, #0]
   19758:	2b07      	cmp	r3, #7
   1975a:	d106      	bne.n	1976a <lcd_displaying_task+0x87e>
				{
					screen++;
   1975c:	2347      	movs	r3, #71	; 0x47
   1975e:	18fb      	adds	r3, r7, r3
   19760:	781a      	ldrb	r2, [r3, #0]
   19762:	2347      	movs	r3, #71	; 0x47
   19764:	18fb      	adds	r3, r7, r3
   19766:	3201      	adds	r2, #1
   19768:	701a      	strb	r2, [r3, #0]
				}
				
				if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==9)
   1976a:	4b24      	ldr	r3, [pc, #144]	; (197fc <lcd_displaying_task+0x910>)
   1976c:	781b      	ldrb	r3, [r3, #0]
   1976e:	b2db      	uxtb	r3, r3
   19770:	2b00      	cmp	r3, #0
   19772:	d10c      	bne.n	1978e <lcd_displaying_task+0x8a2>
   19774:	2347      	movs	r3, #71	; 0x47
   19776:	18fb      	adds	r3, r7, r3
   19778:	781b      	ldrb	r3, [r3, #0]
   1977a:	2b09      	cmp	r3, #9
   1977c:	d107      	bne.n	1978e <lcd_displaying_task+0x8a2>
				{
					screen++;
   1977e:	2347      	movs	r3, #71	; 0x47
   19780:	18fb      	adds	r3, r7, r3
   19782:	781a      	ldrb	r2, [r3, #0]
   19784:	2347      	movs	r3, #71	; 0x47
   19786:	18fb      	adds	r3, r7, r3
   19788:	3201      	adds	r2, #1
   1978a:	701a      	strb	r2, [r3, #0]
   1978c:	e008      	b.n	197a0 <lcd_displaying_task+0x8b4>
				}
				else if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1978e:	4b1b      	ldr	r3, [pc, #108]	; (197fc <lcd_displaying_task+0x910>)
   19790:	781b      	ldrb	r3, [r3, #0]
   19792:	b2db      	uxtb	r3, r3
   19794:	2b00      	cmp	r3, #0
   19796:	d003      	beq.n	197a0 <lcd_displaying_task+0x8b4>
				{
					screen=9;
   19798:	2347      	movs	r3, #71	; 0x47
   1979a:	18fb      	adds	r3, r7, r3
   1979c:	2209      	movs	r2, #9
   1979e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		
		//screen = 8;
		vTaskDelay(500);
   197a0:	23fa      	movs	r3, #250	; 0xfa
   197a2:	005b      	lsls	r3, r3, #1
   197a4:	0018      	movs	r0, r3
   197a6:	4b16      	ldr	r3, [pc, #88]	; (19800 <lcd_displaying_task+0x914>)
   197a8:	4798      	blx	r3

		if (screen>10)
   197aa:	2347      	movs	r3, #71	; 0x47
   197ac:	18fb      	adds	r3, r7, r3
   197ae:	781b      	ldrb	r3, [r3, #0]
   197b0:	2b0a      	cmp	r3, #10
   197b2:	d801      	bhi.n	197b8 <lcd_displaying_task+0x8cc>
   197b4:	f7ff fc01 	bl	18fba <lcd_displaying_task+0xce>
		{
			screen=1;
   197b8:	2347      	movs	r3, #71	; 0x47
   197ba:	18fb      	adds	r3, r7, r3
   197bc:	2201      	movs	r2, #1
   197be:	701a      	strb	r2, [r3, #0]
			
			LCD_PWR_DIS();
   197c0:	4b10      	ldr	r3, [pc, #64]	; (19804 <lcd_displaying_task+0x918>)
   197c2:	4798      	blx	r3
			lcd_in_sleep = true;
   197c4:	4b10      	ldr	r3, [pc, #64]	; (19808 <lcd_displaying_task+0x91c>)
   197c6:	2201      	movs	r2, #1
   197c8:	701a      	strb	r2, [r3, #0]
			setNetworkCharacter=true;
   197ca:	4b10      	ldr	r3, [pc, #64]	; (1980c <lcd_displaying_task+0x920>)
   197cc:	2201      	movs	r2, #1
   197ce:	701a      	strb	r2, [r3, #0]
			vTaskDelay(100/portTICK_PERIOD_MS);
   197d0:	2064      	movs	r0, #100	; 0x64
   197d2:	4b0b      	ldr	r3, [pc, #44]	; (19800 <lcd_displaying_task+0x914>)
   197d4:	4798      	blx	r3
		if (lcd_in_sleep)
   197d6:	f7ff fbf0 	bl	18fba <lcd_displaying_task+0xce>
   197da:	46c0      	nop			; (mov r8, r8)
   197dc:	20000428 	.word	0x20000428
   197e0:	0001fec1 	.word	0x0001fec1
   197e4:	2000042c 	.word	0x2000042c
   197e8:	0002192d 	.word	0x0002192d
   197ec:	200009b0 	.word	0x200009b0
   197f0:	0001bb0d 	.word	0x0001bb0d
   197f4:	20000854 	.word	0x20000854
   197f8:	2000082c 	.word	0x2000082c
   197fc:	200009d6 	.word	0x200009d6
   19800:	00020969 	.word	0x00020969
   19804:	00013ced 	.word	0x00013ced
   19808:	20000a68 	.word	0x20000a68
   1980c:	20000a69 	.word	0x20000a69

00019810 <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
   19810:	b590      	push	{r4, r7, lr}
   19812:	b083      	sub	sp, #12
   19814:	af02      	add	r7, sp, #8
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
   19816:	2200      	movs	r2, #0
   19818:	2101      	movs	r1, #1
   1981a:	2001      	movs	r0, #1
   1981c:	4b09      	ldr	r3, [pc, #36]	; (19844 <start_lcd_service+0x34>)
   1981e:	4798      	blx	r3
   19820:	0002      	movs	r2, r0
   19822:	4b09      	ldr	r3, [pc, #36]	; (19848 <start_lcd_service+0x38>)
   19824:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)500,NULL,1,NULL);
   19826:	23fa      	movs	r3, #250	; 0xfa
   19828:	005a      	lsls	r2, r3, #1
   1982a:	4808      	ldr	r0, [pc, #32]	; (1984c <start_lcd_service+0x3c>)
   1982c:	2300      	movs	r3, #0
   1982e:	9301      	str	r3, [sp, #4]
   19830:	2301      	movs	r3, #1
   19832:	9300      	str	r3, [sp, #0]
   19834:	2300      	movs	r3, #0
   19836:	2100      	movs	r1, #0
   19838:	4c05      	ldr	r4, [pc, #20]	; (19850 <start_lcd_service+0x40>)
   1983a:	47a0      	blx	r4
	
}
   1983c:	46c0      	nop			; (mov r8, r8)
   1983e:	46bd      	mov	sp, r7
   19840:	b001      	add	sp, #4
   19842:	bd90      	pop	{r4, r7, pc}
   19844:	0001fb05 	.word	0x0001fb05
   19848:	20000428 	.word	0x20000428
   1984c:	00018eed 	.word	0x00018eed
   19850:	00020629 	.word	0x00020629

00019854 <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
   19854:	b590      	push	{r4, r7, lr}
   19856:	b085      	sub	sp, #20
   19858:	af00      	add	r7, sp, #0
   1985a:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
   1985c:	230f      	movs	r3, #15
   1985e:	18fb      	adds	r3, r7, r3
   19860:	2201      	movs	r2, #1
   19862:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
   19864:	4b05      	ldr	r3, [pc, #20]	; (1987c <four_second_timer_callback+0x28>)
   19866:	6818      	ldr	r0, [r3, #0]
   19868:	230f      	movs	r3, #15
   1986a:	18f9      	adds	r1, r7, r3
   1986c:	2300      	movs	r3, #0
   1986e:	2200      	movs	r2, #0
   19870:	4c03      	ldr	r4, [pc, #12]	; (19880 <four_second_timer_callback+0x2c>)
   19872:	47a0      	blx	r4
}
   19874:	46c0      	nop			; (mov r8, r8)
   19876:	46bd      	mov	sp, r7
   19878:	b005      	add	sp, #20
   1987a:	bd90      	pop	{r4, r7, pc}
   1987c:	20000428 	.word	0x20000428
   19880:	0001fda1 	.word	0x0001fda1

00019884 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
   19884:	b580      	push	{r7, lr}
   19886:	b084      	sub	sp, #16
   19888:	af00      	add	r7, sp, #0
   1988a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
   1988c:	687b      	ldr	r3, [r7, #4]
   1988e:	681b      	ldr	r3, [r3, #0]
   19890:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   19892:	68fb      	ldr	r3, [r7, #12]
   19894:	7a5b      	ldrb	r3, [r3, #9]
   19896:	b2db      	uxtb	r3, r3
   19898:	b25b      	sxtb	r3, r3
   1989a:	2b00      	cmp	r3, #0
   1989c:	da01      	bge.n	198a2 <ac_is_syncing+0x1e>
		return true;
   1989e:	2301      	movs	r3, #1
   198a0:	e000      	b.n	198a4 <ac_is_syncing+0x20>
	}

	return false;
   198a2:	2300      	movs	r3, #0
#endif
}
   198a4:	0018      	movs	r0, r3
   198a6:	46bd      	mov	sp, r7
   198a8:	b004      	add	sp, #16
   198aa:	bd80      	pop	{r7, pc}

000198ac <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
   198ac:	b580      	push	{r7, lr}
   198ae:	b084      	sub	sp, #16
   198b0:	af00      	add	r7, sp, #0
   198b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   198b4:	2300      	movs	r3, #0
   198b6:	60fb      	str	r3, [r7, #12]
   198b8:	e007      	b.n	198ca <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
   198ba:	687a      	ldr	r2, [r7, #4]
   198bc:	68fb      	ldr	r3, [r7, #12]
   198be:	18d3      	adds	r3, r2, r3
   198c0:	2200      	movs	r2, #0
   198c2:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   198c4:	68fb      	ldr	r3, [r7, #12]
   198c6:	3301      	adds	r3, #1
   198c8:	60fb      	str	r3, [r7, #12]
   198ca:	68fb      	ldr	r3, [r7, #12]
   198cc:	2b00      	cmp	r3, #0
   198ce:	d0f4      	beq.n	198ba <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
   198d0:	687b      	ldr	r3, [r7, #4]
   198d2:	2200      	movs	r2, #0
   198d4:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
   198d6:	687b      	ldr	r3, [r7, #4]
   198d8:	2203      	movs	r2, #3
   198da:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
   198dc:	46c0      	nop			; (mov r8, r8)
   198de:	46bd      	mov	sp, r7
   198e0:	b004      	add	sp, #16
   198e2:	bd80      	pop	{r7, pc}

000198e4 <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
   198e4:	b580      	push	{r7, lr}
   198e6:	b084      	sub	sp, #16
   198e8:	af00      	add	r7, sp, #0
   198ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   198ec:	687b      	ldr	r3, [r7, #4]
   198ee:	681b      	ldr	r3, [r3, #0]
   198f0:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   198f2:	46c0      	nop			; (mov r8, r8)
   198f4:	687b      	ldr	r3, [r7, #4]
   198f6:	0018      	movs	r0, r3
   198f8:	4b07      	ldr	r3, [pc, #28]	; (19918 <ac_enable+0x34>)
   198fa:	4798      	blx	r3
   198fc:	1e03      	subs	r3, r0, #0
   198fe:	d1f9      	bne.n	198f4 <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
   19900:	68fb      	ldr	r3, [r7, #12]
   19902:	781b      	ldrb	r3, [r3, #0]
   19904:	b2db      	uxtb	r3, r3
   19906:	2202      	movs	r2, #2
   19908:	4313      	orrs	r3, r2
   1990a:	b2da      	uxtb	r2, r3
   1990c:	68fb      	ldr	r3, [r7, #12]
   1990e:	701a      	strb	r2, [r3, #0]
}
   19910:	46c0      	nop			; (mov r8, r8)
   19912:	46bd      	mov	sp, r7
   19914:	b004      	add	sp, #16
   19916:	bd80      	pop	{r7, pc}
   19918:	00019885 	.word	0x00019885

0001991c <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
   1991c:	b580      	push	{r7, lr}
   1991e:	b086      	sub	sp, #24
   19920:	af00      	add	r7, sp, #0
   19922:	6078      	str	r0, [r7, #4]
   19924:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
   19926:	687b      	ldr	r3, [r7, #4]
   19928:	681b      	ldr	r3, [r3, #0]
   1992a:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
   1992c:	2300      	movs	r3, #0
   1992e:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   19930:	2313      	movs	r3, #19
   19932:	18fb      	adds	r3, r7, r3
   19934:	2200      	movs	r2, #0
   19936:	701a      	strb	r2, [r3, #0]
   19938:	e017      	b.n	1996a <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
   1993a:	2313      	movs	r3, #19
   1993c:	18fb      	adds	r3, r7, r3
   1993e:	781b      	ldrb	r3, [r3, #0]
   19940:	683a      	ldr	r2, [r7, #0]
   19942:	5cd3      	ldrb	r3, [r2, r3]
   19944:	2b00      	cmp	r3, #0
   19946:	d009      	beq.n	1995c <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
   19948:	2313      	movs	r3, #19
   1994a:	18fb      	adds	r3, r7, r3
   1994c:	781b      	ldrb	r3, [r3, #0]
   1994e:	2210      	movs	r2, #16
   19950:	409a      	lsls	r2, r3
   19952:	0013      	movs	r3, r2
   19954:	001a      	movs	r2, r3
   19956:	697b      	ldr	r3, [r7, #20]
   19958:	4313      	orrs	r3, r2
   1995a:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
   1995c:	2313      	movs	r3, #19
   1995e:	18fb      	adds	r3, r7, r3
   19960:	781a      	ldrb	r2, [r3, #0]
   19962:	2313      	movs	r3, #19
   19964:	18fb      	adds	r3, r7, r3
   19966:	3201      	adds	r2, #1
   19968:	701a      	strb	r2, [r3, #0]
   1996a:	2313      	movs	r3, #19
   1996c:	18fb      	adds	r3, r7, r3
   1996e:	781b      	ldrb	r3, [r3, #0]
   19970:	2b00      	cmp	r3, #0
   19972:	d0e2      	beq.n	1993a <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   19974:	2312      	movs	r3, #18
   19976:	18fb      	adds	r3, r7, r3
   19978:	2200      	movs	r2, #0
   1997a:	701a      	strb	r2, [r3, #0]
   1997c:	e02b      	b.n	199d6 <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
   1997e:	2312      	movs	r3, #18
   19980:	18fb      	adds	r3, r7, r3
   19982:	781b      	ldrb	r3, [r3, #0]
   19984:	683a      	ldr	r2, [r7, #0]
   19986:	18d3      	adds	r3, r2, r3
   19988:	78db      	ldrb	r3, [r3, #3]
   1998a:	2b00      	cmp	r3, #0
   1998c:	d00a      	beq.n	199a4 <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
   1998e:	2312      	movs	r3, #18
   19990:	18fb      	adds	r3, r7, r3
   19992:	781b      	ldrb	r3, [r3, #0]
   19994:	2280      	movs	r2, #128	; 0x80
   19996:	0052      	lsls	r2, r2, #1
   19998:	409a      	lsls	r2, r3
   1999a:	0013      	movs	r3, r2
   1999c:	001a      	movs	r2, r3
   1999e:	697b      	ldr	r3, [r7, #20]
   199a0:	4313      	orrs	r3, r2
   199a2:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
   199a4:	2312      	movs	r3, #18
   199a6:	18fb      	adds	r3, r7, r3
   199a8:	781b      	ldrb	r3, [r3, #0]
   199aa:	683a      	ldr	r2, [r7, #0]
   199ac:	18d3      	adds	r3, r2, r3
   199ae:	785b      	ldrb	r3, [r3, #1]
   199b0:	2b00      	cmp	r3, #0
   199b2:	d009      	beq.n	199c8 <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
   199b4:	2312      	movs	r3, #18
   199b6:	18fb      	adds	r3, r7, r3
   199b8:	781b      	ldrb	r3, [r3, #0]
   199ba:	2201      	movs	r2, #1
   199bc:	409a      	lsls	r2, r3
   199be:	0013      	movs	r3, r2
   199c0:	001a      	movs	r2, r3
   199c2:	697b      	ldr	r3, [r7, #20]
   199c4:	4313      	orrs	r3, r2
   199c6:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
   199c8:	2312      	movs	r3, #18
   199ca:	18fb      	adds	r3, r7, r3
   199cc:	781a      	ldrb	r2, [r3, #0]
   199ce:	2312      	movs	r3, #18
   199d0:	18fb      	adds	r3, r7, r3
   199d2:	3201      	adds	r2, #1
   199d4:	701a      	strb	r2, [r3, #0]
   199d6:	2312      	movs	r3, #18
   199d8:	18fb      	adds	r3, r7, r3
   199da:	781b      	ldrb	r3, [r3, #0]
   199dc:	2b01      	cmp	r3, #1
   199de:	d9ce      	bls.n	1997e <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
   199e0:	68fb      	ldr	r3, [r7, #12]
   199e2:	885b      	ldrh	r3, [r3, #2]
   199e4:	b29a      	uxth	r2, r3
   199e6:	697b      	ldr	r3, [r7, #20]
   199e8:	b29b      	uxth	r3, r3
   199ea:	4313      	orrs	r3, r2
   199ec:	b29a      	uxth	r2, r3
   199ee:	68fb      	ldr	r3, [r7, #12]
   199f0:	805a      	strh	r2, [r3, #2]
}
   199f2:	46c0      	nop			; (mov r8, r8)
   199f4:	46bd      	mov	sp, r7
   199f6:	b006      	add	sp, #24
   199f8:	bd80      	pop	{r7, pc}
	...

000199fc <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   199fc:	b580      	push	{r7, lr}
   199fe:	b084      	sub	sp, #16
   19a00:	af00      	add	r7, sp, #0
   19a02:	6078      	str	r0, [r7, #4]
   19a04:	000a      	movs	r2, r1
   19a06:	1cfb      	adds	r3, r7, #3
   19a08:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19a0a:	687b      	ldr	r3, [r7, #4]
   19a0c:	681b      	ldr	r3, [r3, #0]
   19a0e:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
   19a10:	46c0      	nop			; (mov r8, r8)
   19a12:	687b      	ldr	r3, [r7, #4]
   19a14:	0018      	movs	r0, r3
   19a16:	4b0b      	ldr	r3, [pc, #44]	; (19a44 <ac_chan_enable+0x48>)
   19a18:	4798      	blx	r3
   19a1a:	1e03      	subs	r3, r0, #0
   19a1c:	d1f9      	bne.n	19a12 <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
   19a1e:	1cfb      	adds	r3, r7, #3
   19a20:	781a      	ldrb	r2, [r3, #0]
   19a22:	1cfb      	adds	r3, r7, #3
   19a24:	7819      	ldrb	r1, [r3, #0]
   19a26:	68fb      	ldr	r3, [r7, #12]
   19a28:	3104      	adds	r1, #4
   19a2a:	0089      	lsls	r1, r1, #2
   19a2c:	58cb      	ldr	r3, [r1, r3]
   19a2e:	2101      	movs	r1, #1
   19a30:	4319      	orrs	r1, r3
   19a32:	68fb      	ldr	r3, [r7, #12]
   19a34:	3204      	adds	r2, #4
   19a36:	0092      	lsls	r2, r2, #2
   19a38:	50d1      	str	r1, [r2, r3]
}
   19a3a:	46c0      	nop			; (mov r8, r8)
   19a3c:	46bd      	mov	sp, r7
   19a3e:	b004      	add	sp, #16
   19a40:	bd80      	pop	{r7, pc}
   19a42:	46c0      	nop			; (mov r8, r8)
   19a44:	00019885 	.word	0x00019885

00019a48 <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   19a48:	b580      	push	{r7, lr}
   19a4a:	b084      	sub	sp, #16
   19a4c:	af00      	add	r7, sp, #0
   19a4e:	6078      	str	r0, [r7, #4]
   19a50:	000a      	movs	r2, r1
   19a52:	1cfb      	adds	r3, r7, #3
   19a54:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19a56:	687b      	ldr	r3, [r7, #4]
   19a58:	681b      	ldr	r3, [r3, #0]
   19a5a:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
   19a5c:	68fb      	ldr	r3, [r7, #12]
   19a5e:	7a5b      	ldrb	r3, [r3, #9]
   19a60:	b2db      	uxtb	r3, r3
   19a62:	0019      	movs	r1, r3
   19a64:	1cfb      	adds	r3, r7, #3
   19a66:	781b      	ldrb	r3, [r3, #0]
   19a68:	2201      	movs	r2, #1
   19a6a:	409a      	lsls	r2, r3
   19a6c:	0013      	movs	r3, r2
   19a6e:	400b      	ands	r3, r1
   19a70:	1e5a      	subs	r2, r3, #1
   19a72:	4193      	sbcs	r3, r2
   19a74:	b2db      	uxtb	r3, r3
}
   19a76:	0018      	movs	r0, r3
   19a78:	46bd      	mov	sp, r7
   19a7a:	b004      	add	sp, #16
   19a7c:	bd80      	pop	{r7, pc}
	...

00019a80 <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
   19a80:	b580      	push	{r7, lr}
   19a82:	b084      	sub	sp, #16
   19a84:	af00      	add	r7, sp, #0
   19a86:	6078      	str	r0, [r7, #4]
   19a88:	000a      	movs	r2, r1
   19a8a:	1cfb      	adds	r3, r7, #3
   19a8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
   19a8e:	687b      	ldr	r3, [r7, #4]
   19a90:	681b      	ldr	r3, [r3, #0]
   19a92:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
   19a94:	230f      	movs	r3, #15
   19a96:	18fb      	adds	r3, r7, r3
   19a98:	2200      	movs	r2, #0
   19a9a:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
   19a9c:	68bb      	ldr	r3, [r7, #8]
   19a9e:	799b      	ldrb	r3, [r3, #6]
   19aa0:	b2db      	uxtb	r3, r3
   19aa2:	001a      	movs	r2, r3
   19aa4:	1cfb      	adds	r3, r7, #3
   19aa6:	781b      	ldrb	r3, [r3, #0]
   19aa8:	411a      	asrs	r2, r3
   19aaa:	0013      	movs	r3, r2
   19aac:	2201      	movs	r2, #1
   19aae:	4013      	ands	r3, r2
   19ab0:	d003      	beq.n	19aba <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
   19ab2:	230f      	movs	r3, #15
   19ab4:	18fb      	adds	r3, r7, r3
   19ab6:	2208      	movs	r2, #8
   19ab8:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
   19aba:	1cfb      	adds	r3, r7, #3
   19abc:	781a      	ldrb	r2, [r3, #0]
   19abe:	687b      	ldr	r3, [r7, #4]
   19ac0:	0011      	movs	r1, r2
   19ac2:	0018      	movs	r0, r3
   19ac4:	4b1b      	ldr	r3, [pc, #108]	; (19b34 <ac_chan_get_status+0xb4>)
   19ac6:	4798      	blx	r3
   19ac8:	0003      	movs	r3, r0
   19aca:	001a      	movs	r2, r3
   19acc:	2301      	movs	r3, #1
   19ace:	4053      	eors	r3, r2
   19ad0:	b2db      	uxtb	r3, r3
   19ad2:	2b00      	cmp	r3, #0
   19ad4:	d00b      	beq.n	19aee <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
   19ad6:	230f      	movs	r3, #15
   19ad8:	18fb      	adds	r3, r7, r3
   19ada:	220f      	movs	r2, #15
   19adc:	18ba      	adds	r2, r7, r2
   19ade:	7812      	ldrb	r2, [r2, #0]
   19ae0:	2101      	movs	r1, #1
   19ae2:	430a      	orrs	r2, r1
   19ae4:	701a      	strb	r2, [r3, #0]
		return status_mask;
   19ae6:	230f      	movs	r3, #15
   19ae8:	18fb      	adds	r3, r7, r3
   19aea:	781b      	ldrb	r3, [r3, #0]
   19aec:	e01e      	b.n	19b2c <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
   19aee:	68bb      	ldr	r3, [r7, #8]
   19af0:	7a1b      	ldrb	r3, [r3, #8]
   19af2:	b2db      	uxtb	r3, r3
   19af4:	001a      	movs	r2, r3
   19af6:	1cfb      	adds	r3, r7, #3
   19af8:	781b      	ldrb	r3, [r3, #0]
   19afa:	411a      	asrs	r2, r3
   19afc:	0013      	movs	r3, r2
   19afe:	2201      	movs	r2, #1
   19b00:	4013      	ands	r3, r2
   19b02:	d008      	beq.n	19b16 <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
   19b04:	230f      	movs	r3, #15
   19b06:	18fb      	adds	r3, r7, r3
   19b08:	220f      	movs	r2, #15
   19b0a:	18ba      	adds	r2, r7, r2
   19b0c:	7812      	ldrb	r2, [r2, #0]
   19b0e:	2104      	movs	r1, #4
   19b10:	430a      	orrs	r2, r1
   19b12:	701a      	strb	r2, [r3, #0]
   19b14:	e007      	b.n	19b26 <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
   19b16:	230f      	movs	r3, #15
   19b18:	18fb      	adds	r3, r7, r3
   19b1a:	220f      	movs	r2, #15
   19b1c:	18ba      	adds	r2, r7, r2
   19b1e:	7812      	ldrb	r2, [r2, #0]
   19b20:	2102      	movs	r1, #2
   19b22:	430a      	orrs	r2, r1
   19b24:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
   19b26:	230f      	movs	r3, #15
   19b28:	18fb      	adds	r3, r7, r3
   19b2a:	781b      	ldrb	r3, [r3, #0]
}
   19b2c:	0018      	movs	r0, r3
   19b2e:	46bd      	mov	sp, r7
   19b30:	b004      	add	sp, #16
   19b32:	bd80      	pop	{r7, pc}
   19b34:	00019a49 	.word	0x00019a49

00019b38 <system_interrupt_enable>:
{
   19b38:	b580      	push	{r7, lr}
   19b3a:	b082      	sub	sp, #8
   19b3c:	af00      	add	r7, sp, #0
   19b3e:	0002      	movs	r2, r0
   19b40:	1dfb      	adds	r3, r7, #7
   19b42:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   19b44:	4b06      	ldr	r3, [pc, #24]	; (19b60 <system_interrupt_enable+0x28>)
   19b46:	1dfa      	adds	r2, r7, #7
   19b48:	7812      	ldrb	r2, [r2, #0]
   19b4a:	0011      	movs	r1, r2
   19b4c:	221f      	movs	r2, #31
   19b4e:	400a      	ands	r2, r1
   19b50:	2101      	movs	r1, #1
   19b52:	4091      	lsls	r1, r2
   19b54:	000a      	movs	r2, r1
   19b56:	601a      	str	r2, [r3, #0]
}
   19b58:	46c0      	nop			; (mov r8, r8)
   19b5a:	46bd      	mov	sp, r7
   19b5c:	b002      	add	sp, #8
   19b5e:	bd80      	pop	{r7, pc}
   19b60:	e000e100 	.word	0xe000e100

00019b64 <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
   19b64:	b580      	push	{r7, lr}
   19b66:	b084      	sub	sp, #16
   19b68:	af00      	add	r7, sp, #0
   19b6a:	6078      	str	r0, [r7, #4]
   19b6c:	000a      	movs	r2, r1
   19b6e:	1cfb      	adds	r3, r7, #3
   19b70:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
   19b72:	687b      	ldr	r3, [r7, #4]
   19b74:	7e5b      	ldrb	r3, [r3, #25]
   19b76:	b25a      	sxtb	r2, r3
   19b78:	1cfb      	adds	r3, r7, #3
   19b7a:	781b      	ldrb	r3, [r3, #0]
   19b7c:	2101      	movs	r1, #1
   19b7e:	4099      	lsls	r1, r3
   19b80:	000b      	movs	r3, r1
   19b82:	b25b      	sxtb	r3, r3
   19b84:	4313      	orrs	r3, r2
   19b86:	b25b      	sxtb	r3, r3
   19b88:	b2da      	uxtb	r2, r3
   19b8a:	687b      	ldr	r3, [r7, #4]
   19b8c:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
   19b8e:	2300      	movs	r3, #0
   19b90:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
   19b92:	1cfb      	adds	r3, r7, #3
   19b94:	781b      	ldrb	r3, [r3, #0]
   19b96:	2b01      	cmp	r3, #1
   19b98:	d009      	beq.n	19bae <ac_enable_callback+0x4a>
   19b9a:	2b04      	cmp	r3, #4
   19b9c:	d00c      	beq.n	19bb8 <ac_enable_callback+0x54>
   19b9e:	2b00      	cmp	r3, #0
   19ba0:	d000      	beq.n	19ba4 <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
   19ba2:	e00e      	b.n	19bc2 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
   19ba4:	68fb      	ldr	r3, [r7, #12]
   19ba6:	2201      	movs	r2, #1
   19ba8:	4313      	orrs	r3, r2
   19baa:	60fb      	str	r3, [r7, #12]
			break;
   19bac:	e009      	b.n	19bc2 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
   19bae:	68fb      	ldr	r3, [r7, #12]
   19bb0:	2202      	movs	r2, #2
   19bb2:	4313      	orrs	r3, r2
   19bb4:	60fb      	str	r3, [r7, #12]
			break;
   19bb6:	e004      	b.n	19bc2 <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
   19bb8:	68fb      	ldr	r3, [r7, #12]
   19bba:	2210      	movs	r2, #16
   19bbc:	4313      	orrs	r3, r2
   19bbe:	60fb      	str	r3, [r7, #12]
			break;
   19bc0:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
   19bc2:	687b      	ldr	r3, [r7, #4]
   19bc4:	681b      	ldr	r3, [r3, #0]
   19bc6:	68fa      	ldr	r2, [r7, #12]
   19bc8:	b2d2      	uxtb	r2, r2
   19bca:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
   19bcc:	2018      	movs	r0, #24
   19bce:	4b03      	ldr	r3, [pc, #12]	; (19bdc <ac_enable_callback+0x78>)
   19bd0:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
   19bd2:	46c0      	nop			; (mov r8, r8)
   19bd4:	46bd      	mov	sp, r7
   19bd6:	b004      	add	sp, #16
   19bd8:	bd80      	pop	{r7, pc}
   19bda:	46c0      	nop			; (mov r8, r8)
   19bdc:	00019b39 	.word	0x00019b39

00019be0 <system_pinmux_get_group_from_gpio_pin>:
{
   19be0:	b580      	push	{r7, lr}
   19be2:	b084      	sub	sp, #16
   19be4:	af00      	add	r7, sp, #0
   19be6:	0002      	movs	r2, r0
   19be8:	1dfb      	adds	r3, r7, #7
   19bea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   19bec:	230f      	movs	r3, #15
   19bee:	18fb      	adds	r3, r7, r3
   19bf0:	1dfa      	adds	r2, r7, #7
   19bf2:	7812      	ldrb	r2, [r2, #0]
   19bf4:	09d2      	lsrs	r2, r2, #7
   19bf6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   19bf8:	230e      	movs	r3, #14
   19bfa:	18fb      	adds	r3, r7, r3
   19bfc:	1dfa      	adds	r2, r7, #7
   19bfe:	7812      	ldrb	r2, [r2, #0]
   19c00:	0952      	lsrs	r2, r2, #5
   19c02:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   19c04:	4b0d      	ldr	r3, [pc, #52]	; (19c3c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   19c06:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   19c08:	230f      	movs	r3, #15
   19c0a:	18fb      	adds	r3, r7, r3
   19c0c:	781b      	ldrb	r3, [r3, #0]
   19c0e:	2b00      	cmp	r3, #0
   19c10:	d10f      	bne.n	19c32 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   19c12:	230f      	movs	r3, #15
   19c14:	18fb      	adds	r3, r7, r3
   19c16:	781b      	ldrb	r3, [r3, #0]
   19c18:	009b      	lsls	r3, r3, #2
   19c1a:	2210      	movs	r2, #16
   19c1c:	4694      	mov	ip, r2
   19c1e:	44bc      	add	ip, r7
   19c20:	4463      	add	r3, ip
   19c22:	3b08      	subs	r3, #8
   19c24:	681a      	ldr	r2, [r3, #0]
   19c26:	230e      	movs	r3, #14
   19c28:	18fb      	adds	r3, r7, r3
   19c2a:	781b      	ldrb	r3, [r3, #0]
   19c2c:	01db      	lsls	r3, r3, #7
   19c2e:	18d3      	adds	r3, r2, r3
   19c30:	e000      	b.n	19c34 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   19c32:	2300      	movs	r3, #0
}
   19c34:	0018      	movs	r0, r3
   19c36:	46bd      	mov	sp, r7
   19c38:	b004      	add	sp, #16
   19c3a:	bd80      	pop	{r7, pc}
   19c3c:	41004400 	.word	0x41004400

00019c40 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   19c40:	b580      	push	{r7, lr}
   19c42:	b084      	sub	sp, #16
   19c44:	af00      	add	r7, sp, #0
   19c46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   19c48:	687b      	ldr	r3, [r7, #4]
   19c4a:	681b      	ldr	r3, [r3, #0]
   19c4c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   19c4e:	68fb      	ldr	r3, [r7, #12]
   19c50:	7e5b      	ldrb	r3, [r3, #25]
   19c52:	b2db      	uxtb	r3, r3
   19c54:	b25b      	sxtb	r3, r3
   19c56:	2b00      	cmp	r3, #0
   19c58:	da01      	bge.n	19c5e <adc_is_syncing+0x1e>
		return true;
   19c5a:	2301      	movs	r3, #1
   19c5c:	e000      	b.n	19c60 <adc_is_syncing+0x20>
	}

	return false;
   19c5e:	2300      	movs	r3, #0
}
   19c60:	0018      	movs	r0, r3
   19c62:	46bd      	mov	sp, r7
   19c64:	b004      	add	sp, #16
   19c66:	bd80      	pop	{r7, pc}

00019c68 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
   19c68:	b580      	push	{r7, lr}
   19c6a:	b086      	sub	sp, #24
   19c6c:	af00      	add	r7, sp, #0
   19c6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19c70:	687b      	ldr	r3, [r7, #4]
   19c72:	681b      	ldr	r3, [r3, #0]
   19c74:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
   19c76:	693b      	ldr	r3, [r7, #16]
   19c78:	7e1b      	ldrb	r3, [r3, #24]
   19c7a:	b2db      	uxtb	r3, r3
   19c7c:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
   19c7e:	2300      	movs	r3, #0
   19c80:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
   19c82:	68fb      	ldr	r3, [r7, #12]
   19c84:	2201      	movs	r2, #1
   19c86:	4013      	ands	r3, r2
   19c88:	d003      	beq.n	19c92 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   19c8a:	697b      	ldr	r3, [r7, #20]
   19c8c:	2201      	movs	r2, #1
   19c8e:	4313      	orrs	r3, r2
   19c90:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
   19c92:	68fb      	ldr	r3, [r7, #12]
   19c94:	2204      	movs	r2, #4
   19c96:	4013      	ands	r3, r2
   19c98:	d003      	beq.n	19ca2 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   19c9a:	697b      	ldr	r3, [r7, #20]
   19c9c:	2202      	movs	r2, #2
   19c9e:	4313      	orrs	r3, r2
   19ca0:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   19ca2:	68fb      	ldr	r3, [r7, #12]
   19ca4:	2202      	movs	r2, #2
   19ca6:	4013      	ands	r3, r2
   19ca8:	d003      	beq.n	19cb2 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   19caa:	697b      	ldr	r3, [r7, #20]
   19cac:	2204      	movs	r2, #4
   19cae:	4313      	orrs	r3, r2
   19cb0:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
   19cb2:	697b      	ldr	r3, [r7, #20]
}
   19cb4:	0018      	movs	r0, r3
   19cb6:	46bd      	mov	sp, r7
   19cb8:	b006      	add	sp, #24
   19cba:	bd80      	pop	{r7, pc}

00019cbc <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
   19cbc:	b580      	push	{r7, lr}
   19cbe:	b084      	sub	sp, #16
   19cc0:	af00      	add	r7, sp, #0
   19cc2:	6078      	str	r0, [r7, #4]
   19cc4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19cc6:	687b      	ldr	r3, [r7, #4]
   19cc8:	681b      	ldr	r3, [r3, #0]
   19cca:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   19ccc:	2300      	movs	r3, #0
   19cce:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
   19cd0:	683b      	ldr	r3, [r7, #0]
   19cd2:	2201      	movs	r2, #1
   19cd4:	4013      	ands	r3, r2
   19cd6:	d003      	beq.n	19ce0 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   19cd8:	68fb      	ldr	r3, [r7, #12]
   19cda:	2201      	movs	r2, #1
   19cdc:	4313      	orrs	r3, r2
   19cde:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
   19ce0:	683b      	ldr	r3, [r7, #0]
   19ce2:	2202      	movs	r2, #2
   19ce4:	4013      	ands	r3, r2
   19ce6:	d003      	beq.n	19cf0 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   19ce8:	68fb      	ldr	r3, [r7, #12]
   19cea:	2204      	movs	r2, #4
   19cec:	4313      	orrs	r3, r2
   19cee:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
   19cf0:	683b      	ldr	r3, [r7, #0]
   19cf2:	2204      	movs	r2, #4
   19cf4:	4013      	ands	r3, r2
   19cf6:	d003      	beq.n	19d00 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   19cf8:	68fb      	ldr	r3, [r7, #12]
   19cfa:	2202      	movs	r2, #2
   19cfc:	4313      	orrs	r3, r2
   19cfe:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
   19d00:	68fb      	ldr	r3, [r7, #12]
   19d02:	b2da      	uxtb	r2, r3
   19d04:	68bb      	ldr	r3, [r7, #8]
   19d06:	761a      	strb	r2, [r3, #24]
}
   19d08:	46c0      	nop			; (mov r8, r8)
   19d0a:	46bd      	mov	sp, r7
   19d0c:	b004      	add	sp, #16
   19d0e:	bd80      	pop	{r7, pc}

00019d10 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
   19d10:	b580      	push	{r7, lr}
   19d12:	b084      	sub	sp, #16
   19d14:	af00      	add	r7, sp, #0
   19d16:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19d18:	687b      	ldr	r3, [r7, #4]
   19d1a:	681b      	ldr	r3, [r3, #0]
   19d1c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19d1e:	46c0      	nop			; (mov r8, r8)
   19d20:	687b      	ldr	r3, [r7, #4]
   19d22:	0018      	movs	r0, r3
   19d24:	4b10      	ldr	r3, [pc, #64]	; (19d68 <adc_enable+0x58>)
   19d26:	4798      	blx	r3
   19d28:	1e03      	subs	r3, r0, #0
   19d2a:	d1f9      	bne.n	19d20 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   19d2c:	2017      	movs	r0, #23
   19d2e:	4b0f      	ldr	r3, [pc, #60]	; (19d6c <adc_enable+0x5c>)
   19d30:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   19d32:	68fb      	ldr	r3, [r7, #12]
   19d34:	220f      	movs	r2, #15
   19d36:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   19d38:	68fb      	ldr	r3, [r7, #12]
   19d3a:	220f      	movs	r2, #15
   19d3c:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   19d3e:	68fb      	ldr	r3, [r7, #12]
   19d40:	781b      	ldrb	r3, [r3, #0]
   19d42:	b2db      	uxtb	r3, r3
   19d44:	2202      	movs	r2, #2
   19d46:	4313      	orrs	r3, r2
   19d48:	b2da      	uxtb	r2, r3
   19d4a:	68fb      	ldr	r3, [r7, #12]
   19d4c:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
   19d4e:	46c0      	nop			; (mov r8, r8)
   19d50:	687b      	ldr	r3, [r7, #4]
   19d52:	0018      	movs	r0, r3
   19d54:	4b04      	ldr	r3, [pc, #16]	; (19d68 <adc_enable+0x58>)
   19d56:	4798      	blx	r3
   19d58:	1e03      	subs	r3, r0, #0
   19d5a:	d1f9      	bne.n	19d50 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
   19d5c:	2300      	movs	r3, #0
}
   19d5e:	0018      	movs	r0, r3
   19d60:	46bd      	mov	sp, r7
   19d62:	b004      	add	sp, #16
   19d64:	bd80      	pop	{r7, pc}
   19d66:	46c0      	nop			; (mov r8, r8)
   19d68:	00019c41 	.word	0x00019c41
   19d6c:	00019b39 	.word	0x00019b39

00019d70 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   19d70:	b580      	push	{r7, lr}
   19d72:	b084      	sub	sp, #16
   19d74:	af00      	add	r7, sp, #0
   19d76:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19d78:	687b      	ldr	r3, [r7, #4]
   19d7a:	681b      	ldr	r3, [r3, #0]
   19d7c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19d7e:	46c0      	nop			; (mov r8, r8)
   19d80:	687b      	ldr	r3, [r7, #4]
   19d82:	0018      	movs	r0, r3
   19d84:	4b0b      	ldr	r3, [pc, #44]	; (19db4 <adc_start_conversion+0x44>)
   19d86:	4798      	blx	r3
   19d88:	1e03      	subs	r3, r0, #0
   19d8a:	d1f9      	bne.n	19d80 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   19d8c:	68fb      	ldr	r3, [r7, #12]
   19d8e:	7b1b      	ldrb	r3, [r3, #12]
   19d90:	b2db      	uxtb	r3, r3
   19d92:	2202      	movs	r2, #2
   19d94:	4313      	orrs	r3, r2
   19d96:	b2da      	uxtb	r2, r3
   19d98:	68fb      	ldr	r3, [r7, #12]
   19d9a:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   19d9c:	46c0      	nop			; (mov r8, r8)
   19d9e:	687b      	ldr	r3, [r7, #4]
   19da0:	0018      	movs	r0, r3
   19da2:	4b04      	ldr	r3, [pc, #16]	; (19db4 <adc_start_conversion+0x44>)
   19da4:	4798      	blx	r3
   19da6:	1e03      	subs	r3, r0, #0
   19da8:	d1f9      	bne.n	19d9e <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   19daa:	46c0      	nop			; (mov r8, r8)
   19dac:	46bd      	mov	sp, r7
   19dae:	b004      	add	sp, #16
   19db0:	bd80      	pop	{r7, pc}
   19db2:	46c0      	nop			; (mov r8, r8)
   19db4:	00019c41 	.word	0x00019c41

00019db8 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
   19db8:	b580      	push	{r7, lr}
   19dba:	b084      	sub	sp, #16
   19dbc:	af00      	add	r7, sp, #0
   19dbe:	6078      	str	r0, [r7, #4]
   19dc0:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   19dc2:	687b      	ldr	r3, [r7, #4]
   19dc4:	0018      	movs	r0, r3
   19dc6:	4b18      	ldr	r3, [pc, #96]	; (19e28 <adc_read+0x70>)
   19dc8:	4798      	blx	r3
   19dca:	0002      	movs	r2, r0
   19dcc:	2301      	movs	r3, #1
   19dce:	4013      	ands	r3, r2
   19dd0:	d101      	bne.n	19dd6 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
   19dd2:	2305      	movs	r3, #5
   19dd4:	e023      	b.n	19e1e <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
   19dd6:	687b      	ldr	r3, [r7, #4]
   19dd8:	681b      	ldr	r3, [r3, #0]
   19dda:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   19ddc:	46c0      	nop			; (mov r8, r8)
   19dde:	687b      	ldr	r3, [r7, #4]
   19de0:	0018      	movs	r0, r3
   19de2:	4b12      	ldr	r3, [pc, #72]	; (19e2c <adc_read+0x74>)
   19de4:	4798      	blx	r3
   19de6:	1e03      	subs	r3, r0, #0
   19de8:	d1f9      	bne.n	19dde <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   19dea:	68fb      	ldr	r3, [r7, #12]
   19dec:	8b5b      	ldrh	r3, [r3, #26]
   19dee:	b29a      	uxth	r2, r3
   19df0:	683b      	ldr	r3, [r7, #0]
   19df2:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   19df4:	687b      	ldr	r3, [r7, #4]
   19df6:	2101      	movs	r1, #1
   19df8:	0018      	movs	r0, r3
   19dfa:	4b0d      	ldr	r3, [pc, #52]	; (19e30 <adc_read+0x78>)
   19dfc:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   19dfe:	687b      	ldr	r3, [r7, #4]
   19e00:	0018      	movs	r0, r3
   19e02:	4b09      	ldr	r3, [pc, #36]	; (19e28 <adc_read+0x70>)
   19e04:	4798      	blx	r3
   19e06:	0002      	movs	r2, r0
   19e08:	2304      	movs	r3, #4
   19e0a:	4013      	ands	r3, r2
   19e0c:	d006      	beq.n	19e1c <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   19e0e:	687b      	ldr	r3, [r7, #4]
   19e10:	2104      	movs	r1, #4
   19e12:	0018      	movs	r0, r3
   19e14:	4b06      	ldr	r3, [pc, #24]	; (19e30 <adc_read+0x78>)
   19e16:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   19e18:	231e      	movs	r3, #30
   19e1a:	e000      	b.n	19e1e <adc_read+0x66>
	}

	return STATUS_OK;
   19e1c:	2300      	movs	r3, #0
}
   19e1e:	0018      	movs	r0, r3
   19e20:	46bd      	mov	sp, r7
   19e22:	b004      	add	sp, #16
   19e24:	bd80      	pop	{r7, pc}
   19e26:	46c0      	nop			; (mov r8, r8)
   19e28:	00019c69 	.word	0x00019c69
   19e2c:	00019c41 	.word	0x00019c41
   19e30:	00019cbd 	.word	0x00019cbd

00019e34 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
   19e34:	b580      	push	{r7, lr}
   19e36:	b084      	sub	sp, #16
   19e38:	af00      	add	r7, sp, #0
   19e3a:	6078      	str	r0, [r7, #4]
   19e3c:	000a      	movs	r2, r1
   19e3e:	1cfb      	adds	r3, r7, #3
   19e40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19e42:	687b      	ldr	r3, [r7, #4]
   19e44:	681b      	ldr	r3, [r3, #0]
   19e46:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   19e48:	46c0      	nop			; (mov r8, r8)
   19e4a:	687b      	ldr	r3, [r7, #4]
   19e4c:	0018      	movs	r0, r3
   19e4e:	4b0c      	ldr	r3, [pc, #48]	; (19e80 <adc_set_positive_input+0x4c>)
   19e50:	4798      	blx	r3
   19e52:	1e03      	subs	r3, r0, #0
   19e54:	d1f9      	bne.n	19e4a <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
   19e56:	68fb      	ldr	r3, [r7, #12]
   19e58:	691b      	ldr	r3, [r3, #16]
   19e5a:	221f      	movs	r2, #31
   19e5c:	4393      	bics	r3, r2
   19e5e:	001a      	movs	r2, r3
   19e60:	1cfb      	adds	r3, r7, #3
   19e62:	781b      	ldrb	r3, [r3, #0]
   19e64:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   19e66:	68fb      	ldr	r3, [r7, #12]
   19e68:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
   19e6a:	46c0      	nop			; (mov r8, r8)
   19e6c:	687b      	ldr	r3, [r7, #4]
   19e6e:	0018      	movs	r0, r3
   19e70:	4b03      	ldr	r3, [pc, #12]	; (19e80 <adc_set_positive_input+0x4c>)
   19e72:	4798      	blx	r3
   19e74:	1e03      	subs	r3, r0, #0
   19e76:	d1f9      	bne.n	19e6c <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
   19e78:	46c0      	nop			; (mov r8, r8)
   19e7a:	46bd      	mov	sp, r7
   19e7c:	b004      	add	sp, #16
   19e7e:	bd80      	pop	{r7, pc}
   19e80:	00019c41 	.word	0x00019c41

00019e84 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   19e84:	b580      	push	{r7, lr}
   19e86:	b084      	sub	sp, #16
   19e88:	af00      	add	r7, sp, #0
   19e8a:	6078      	str	r0, [r7, #4]
   19e8c:	000a      	movs	r2, r1
   19e8e:	1cfb      	adds	r3, r7, #3
   19e90:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   19e92:	687b      	ldr	r3, [r7, #4]
   19e94:	681b      	ldr	r3, [r3, #0]
   19e96:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
   19e98:	68fb      	ldr	r3, [r7, #12]
   19e9a:	1cfa      	adds	r2, r7, #3
   19e9c:	7812      	ldrb	r2, [r2, #0]
   19e9e:	75da      	strb	r2, [r3, #23]
}
   19ea0:	46c0      	nop			; (mov r8, r8)
   19ea2:	46bd      	mov	sp, r7
   19ea4:	b004      	add	sp, #16
   19ea6:	bd80      	pop	{r7, pc}

00019ea8 <adc_enable_callback>:
 *
 */
static inline void adc_enable_callback(
		struct adc_module *const module,
		enum adc_callback callback_type)
{
   19ea8:	b580      	push	{r7, lr}
   19eaa:	b082      	sub	sp, #8
   19eac:	af00      	add	r7, sp, #0
   19eae:	6078      	str	r0, [r7, #4]
   19eb0:	000a      	movs	r2, r1
   19eb2:	1cfb      	adds	r3, r7, #3
   19eb4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
   19eb6:	687b      	ldr	r3, [r7, #4]
   19eb8:	7edb      	ldrb	r3, [r3, #27]
   19eba:	b25a      	sxtb	r2, r3
   19ebc:	1cfb      	adds	r3, r7, #3
   19ebe:	781b      	ldrb	r3, [r3, #0]
   19ec0:	2101      	movs	r1, #1
   19ec2:	4099      	lsls	r1, r3
   19ec4:	000b      	movs	r3, r1
   19ec6:	b25b      	sxtb	r3, r3
   19ec8:	4313      	orrs	r3, r2
   19eca:	b25b      	sxtb	r3, r3
   19ecc:	b2da      	uxtb	r2, r3
   19ece:	687b      	ldr	r3, [r7, #4]
   19ed0:	76da      	strb	r2, [r3, #27]

	/* Enable window interrupt if this is a window callback */
	if (callback_type == ADC_CALLBACK_WINDOW) {
   19ed2:	1cfb      	adds	r3, r7, #3
   19ed4:	781b      	ldrb	r3, [r3, #0]
   19ed6:	2b01      	cmp	r3, #1
   19ed8:	d104      	bne.n	19ee4 <adc_enable_callback+0x3c>
		adc_enable_interrupt(module, ADC_INTERRUPT_WINDOW);
   19eda:	687b      	ldr	r3, [r7, #4]
   19edc:	2104      	movs	r1, #4
   19ede:	0018      	movs	r0, r3
   19ee0:	4b07      	ldr	r3, [pc, #28]	; (19f00 <adc_enable_callback+0x58>)
   19ee2:	4798      	blx	r3
	}
	/* Enable overrun interrupt if error callback is registered */
	if (callback_type == ADC_CALLBACK_ERROR) {
   19ee4:	1cfb      	adds	r3, r7, #3
   19ee6:	781b      	ldrb	r3, [r3, #0]
   19ee8:	2b02      	cmp	r3, #2
   19eea:	d104      	bne.n	19ef6 <adc_enable_callback+0x4e>
		adc_enable_interrupt(module, ADC_INTERRUPT_OVERRUN);
   19eec:	687b      	ldr	r3, [r7, #4]
   19eee:	2102      	movs	r1, #2
   19ef0:	0018      	movs	r0, r3
   19ef2:	4b03      	ldr	r3, [pc, #12]	; (19f00 <adc_enable_callback+0x58>)
   19ef4:	4798      	blx	r3
	}
}
   19ef6:	46c0      	nop			; (mov r8, r8)
   19ef8:	46bd      	mov	sp, r7
   19efa:	b002      	add	sp, #8
   19efc:	bd80      	pop	{r7, pc}
   19efe:	46c0      	nop			; (mov r8, r8)
   19f00:	00019e85 	.word	0x00019e85

00019f04 <port_get_group_from_gpio_pin>:
{
   19f04:	b580      	push	{r7, lr}
   19f06:	b082      	sub	sp, #8
   19f08:	af00      	add	r7, sp, #0
   19f0a:	0002      	movs	r2, r0
   19f0c:	1dfb      	adds	r3, r7, #7
   19f0e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   19f10:	1dfb      	adds	r3, r7, #7
   19f12:	781b      	ldrb	r3, [r3, #0]
   19f14:	0018      	movs	r0, r3
   19f16:	4b03      	ldr	r3, [pc, #12]	; (19f24 <port_get_group_from_gpio_pin+0x20>)
   19f18:	4798      	blx	r3
   19f1a:	0003      	movs	r3, r0
}
   19f1c:	0018      	movs	r0, r3
   19f1e:	46bd      	mov	sp, r7
   19f20:	b002      	add	sp, #8
   19f22:	bd80      	pop	{r7, pc}
   19f24:	00019be1 	.word	0x00019be1

00019f28 <port_get_config_defaults>:
{
   19f28:	b580      	push	{r7, lr}
   19f2a:	b082      	sub	sp, #8
   19f2c:	af00      	add	r7, sp, #0
   19f2e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   19f30:	687b      	ldr	r3, [r7, #4]
   19f32:	2200      	movs	r2, #0
   19f34:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   19f36:	687b      	ldr	r3, [r7, #4]
   19f38:	2201      	movs	r2, #1
   19f3a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   19f3c:	687b      	ldr	r3, [r7, #4]
   19f3e:	2200      	movs	r2, #0
   19f40:	709a      	strb	r2, [r3, #2]
}
   19f42:	46c0      	nop			; (mov r8, r8)
   19f44:	46bd      	mov	sp, r7
   19f46:	b002      	add	sp, #8
   19f48:	bd80      	pop	{r7, pc}
	...

00019f4c <port_pin_get_input_level>:
{
   19f4c:	b580      	push	{r7, lr}
   19f4e:	b084      	sub	sp, #16
   19f50:	af00      	add	r7, sp, #0
   19f52:	0002      	movs	r2, r0
   19f54:	1dfb      	adds	r3, r7, #7
   19f56:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   19f58:	1dfb      	adds	r3, r7, #7
   19f5a:	781b      	ldrb	r3, [r3, #0]
   19f5c:	0018      	movs	r0, r3
   19f5e:	4b0b      	ldr	r3, [pc, #44]	; (19f8c <port_pin_get_input_level+0x40>)
   19f60:	4798      	blx	r3
   19f62:	0003      	movs	r3, r0
   19f64:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19f66:	1dfb      	adds	r3, r7, #7
   19f68:	781b      	ldrb	r3, [r3, #0]
   19f6a:	221f      	movs	r2, #31
   19f6c:	4013      	ands	r3, r2
   19f6e:	2201      	movs	r2, #1
   19f70:	409a      	lsls	r2, r3
   19f72:	0013      	movs	r3, r2
   19f74:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   19f76:	68fb      	ldr	r3, [r7, #12]
   19f78:	6a1b      	ldr	r3, [r3, #32]
   19f7a:	68ba      	ldr	r2, [r7, #8]
   19f7c:	4013      	ands	r3, r2
   19f7e:	1e5a      	subs	r2, r3, #1
   19f80:	4193      	sbcs	r3, r2
   19f82:	b2db      	uxtb	r3, r3
}
   19f84:	0018      	movs	r0, r3
   19f86:	46bd      	mov	sp, r7
   19f88:	b004      	add	sp, #16
   19f8a:	bd80      	pop	{r7, pc}
   19f8c:	00019f05 	.word	0x00019f05

00019f90 <port_pin_set_output_level>:
{
   19f90:	b580      	push	{r7, lr}
   19f92:	b084      	sub	sp, #16
   19f94:	af00      	add	r7, sp, #0
   19f96:	0002      	movs	r2, r0
   19f98:	1dfb      	adds	r3, r7, #7
   19f9a:	701a      	strb	r2, [r3, #0]
   19f9c:	1dbb      	adds	r3, r7, #6
   19f9e:	1c0a      	adds	r2, r1, #0
   19fa0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   19fa2:	1dfb      	adds	r3, r7, #7
   19fa4:	781b      	ldrb	r3, [r3, #0]
   19fa6:	0018      	movs	r0, r3
   19fa8:	4b0d      	ldr	r3, [pc, #52]	; (19fe0 <port_pin_set_output_level+0x50>)
   19faa:	4798      	blx	r3
   19fac:	0003      	movs	r3, r0
   19fae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19fb0:	1dfb      	adds	r3, r7, #7
   19fb2:	781b      	ldrb	r3, [r3, #0]
   19fb4:	221f      	movs	r2, #31
   19fb6:	4013      	ands	r3, r2
   19fb8:	2201      	movs	r2, #1
   19fba:	409a      	lsls	r2, r3
   19fbc:	0013      	movs	r3, r2
   19fbe:	60bb      	str	r3, [r7, #8]
	if (level) {
   19fc0:	1dbb      	adds	r3, r7, #6
   19fc2:	781b      	ldrb	r3, [r3, #0]
   19fc4:	2b00      	cmp	r3, #0
   19fc6:	d003      	beq.n	19fd0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   19fc8:	68fb      	ldr	r3, [r7, #12]
   19fca:	68ba      	ldr	r2, [r7, #8]
   19fcc:	619a      	str	r2, [r3, #24]
}
   19fce:	e002      	b.n	19fd6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   19fd0:	68fb      	ldr	r3, [r7, #12]
   19fd2:	68ba      	ldr	r2, [r7, #8]
   19fd4:	615a      	str	r2, [r3, #20]
}
   19fd6:	46c0      	nop			; (mov r8, r8)
   19fd8:	46bd      	mov	sp, r7
   19fda:	b004      	add	sp, #16
   19fdc:	bd80      	pop	{r7, pc}
   19fde:	46c0      	nop			; (mov r8, r8)
   19fe0:	00019f05 	.word	0x00019f05

00019fe4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   19fe4:	b580      	push	{r7, lr}
   19fe6:	b084      	sub	sp, #16
   19fe8:	af00      	add	r7, sp, #0
   19fea:	0002      	movs	r2, r0
   19fec:	1dfb      	adds	r3, r7, #7
   19fee:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   19ff0:	230f      	movs	r3, #15
   19ff2:	18fb      	adds	r3, r7, r3
   19ff4:	1dfa      	adds	r2, r7, #7
   19ff6:	7812      	ldrb	r2, [r2, #0]
   19ff8:	0952      	lsrs	r2, r2, #5
   19ffa:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   19ffc:	230f      	movs	r3, #15
   19ffe:	18fb      	adds	r3, r7, r3
   1a000:	781b      	ldrb	r3, [r3, #0]
   1a002:	2b00      	cmp	r3, #0
   1a004:	d10c      	bne.n	1a020 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1a006:	4b09      	ldr	r3, [pc, #36]	; (1a02c <_extint_get_eic_from_channel+0x48>)
   1a008:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   1a00a:	230f      	movs	r3, #15
   1a00c:	18fb      	adds	r3, r7, r3
   1a00e:	781b      	ldrb	r3, [r3, #0]
   1a010:	009b      	lsls	r3, r3, #2
   1a012:	2210      	movs	r2, #16
   1a014:	4694      	mov	ip, r2
   1a016:	44bc      	add	ip, r7
   1a018:	4463      	add	r3, ip
   1a01a:	3b08      	subs	r3, #8
   1a01c:	681b      	ldr	r3, [r3, #0]
   1a01e:	e000      	b.n	1a022 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   1a020:	2300      	movs	r3, #0
	}
}
   1a022:	0018      	movs	r0, r3
   1a024:	46bd      	mov	sp, r7
   1a026:	b004      	add	sp, #16
   1a028:	bd80      	pop	{r7, pc}
   1a02a:	46c0      	nop			; (mov r8, r8)
   1a02c:	40001800 	.word	0x40001800

0001a030 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   1a030:	b580      	push	{r7, lr}
   1a032:	b084      	sub	sp, #16
   1a034:	af00      	add	r7, sp, #0
   1a036:	0002      	movs	r2, r0
   1a038:	1dfb      	adds	r3, r7, #7
   1a03a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   1a03c:	1dfb      	adds	r3, r7, #7
   1a03e:	781b      	ldrb	r3, [r3, #0]
   1a040:	0018      	movs	r0, r3
   1a042:	4b09      	ldr	r3, [pc, #36]	; (1a068 <extint_chan_clear_detected+0x38>)
   1a044:	4798      	blx	r3
   1a046:	0003      	movs	r3, r0
   1a048:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1a04a:	1dfb      	adds	r3, r7, #7
   1a04c:	781b      	ldrb	r3, [r3, #0]
   1a04e:	221f      	movs	r2, #31
   1a050:	4013      	ands	r3, r2
   1a052:	2201      	movs	r2, #1
   1a054:	409a      	lsls	r2, r3
   1a056:	0013      	movs	r3, r2
   1a058:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   1a05a:	68fb      	ldr	r3, [r7, #12]
   1a05c:	68ba      	ldr	r2, [r7, #8]
   1a05e:	611a      	str	r2, [r3, #16]
}
   1a060:	46c0      	nop			; (mov r8, r8)
   1a062:	46bd      	mov	sp, r7
   1a064:	b004      	add	sp, #16
   1a066:	bd80      	pop	{r7, pc}
   1a068:	00019fe5 	.word	0x00019fe5

0001a06c <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
   1a06c:	b580      	push	{r7, lr}
   1a06e:	b082      	sub	sp, #8
   1a070:	af00      	add	r7, sp, #0
   1a072:	6078      	str	r0, [r7, #4]
   1a074:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
   1a076:	200d      	movs	r0, #13
   1a078:	4b08      	ldr	r3, [pc, #32]	; (1a09c <readOverHeadWaterSensorState+0x30>)
   1a07a:	4798      	blx	r3
   1a07c:	0003      	movs	r3, r0
   1a07e:	001a      	movs	r2, r3
   1a080:	687b      	ldr	r3, [r7, #4]
   1a082:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
   1a084:	202f      	movs	r0, #47	; 0x2f
   1a086:	4b05      	ldr	r3, [pc, #20]	; (1a09c <readOverHeadWaterSensorState+0x30>)
   1a088:	4798      	blx	r3
   1a08a:	0003      	movs	r3, r0
   1a08c:	001a      	movs	r2, r3
   1a08e:	683b      	ldr	r3, [r7, #0]
   1a090:	701a      	strb	r2, [r3, #0]
}
   1a092:	46c0      	nop			; (mov r8, r8)
   1a094:	46bd      	mov	sp, r7
   1a096:	b002      	add	sp, #8
   1a098:	bd80      	pop	{r7, pc}
   1a09a:	46c0      	nop			; (mov r8, r8)
   1a09c:	00019f4d 	.word	0x00019f4d

0001a0a0 <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
   1a0a0:	b580      	push	{r7, lr}
   1a0a2:	b082      	sub	sp, #8
   1a0a4:	af00      	add	r7, sp, #0
   1a0a6:	0002      	movs	r2, r0
   1a0a8:	1dfb      	adds	r3, r7, #7
   1a0aa:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
   1a0ac:	4b03      	ldr	r3, [pc, #12]	; (1a0bc <updateOverheadLevel+0x1c>)
   1a0ae:	1dfa      	adds	r2, r7, #7
   1a0b0:	7812      	ldrb	r2, [r2, #0]
   1a0b2:	701a      	strb	r2, [r3, #0]
}
   1a0b4:	46c0      	nop			; (mov r8, r8)
   1a0b6:	46bd      	mov	sp, r7
   1a0b8:	b002      	add	sp, #8
   1a0ba:	bd80      	pop	{r7, pc}
   1a0bc:	20000990 	.word	0x20000990

0001a0c0 <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
   1a0c0:	b580      	push	{r7, lr}
   1a0c2:	b082      	sub	sp, #8
   1a0c4:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
   1a0c6:	1d7a      	adds	r2, r7, #5
   1a0c8:	1dbb      	adds	r3, r7, #6
   1a0ca:	0011      	movs	r1, r2
   1a0cc:	0018      	movs	r0, r3
   1a0ce:	4b11      	ldr	r3, [pc, #68]	; (1a114 <getOverHeadWaterSensorState+0x54>)
   1a0d0:	4798      	blx	r3
	uint8_t ans=0;
   1a0d2:	1dfb      	adds	r3, r7, #7
   1a0d4:	2200      	movs	r2, #0
   1a0d6:	701a      	strb	r2, [r3, #0]
	if(!olow)
   1a0d8:	1dbb      	adds	r3, r7, #6
   1a0da:	781b      	ldrb	r3, [r3, #0]
   1a0dc:	2201      	movs	r2, #1
   1a0de:	4053      	eors	r3, r2
   1a0e0:	b2db      	uxtb	r3, r3
   1a0e2:	2b00      	cmp	r3, #0
   1a0e4:	d010      	beq.n	1a108 <getOverHeadWaterSensorState+0x48>
	{
		ans++;
   1a0e6:	1dfb      	adds	r3, r7, #7
   1a0e8:	781a      	ldrb	r2, [r3, #0]
   1a0ea:	1dfb      	adds	r3, r7, #7
   1a0ec:	3201      	adds	r2, #1
   1a0ee:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
   1a0f0:	1d7b      	adds	r3, r7, #5
   1a0f2:	781b      	ldrb	r3, [r3, #0]
   1a0f4:	2201      	movs	r2, #1
   1a0f6:	4053      	eors	r3, r2
   1a0f8:	b2db      	uxtb	r3, r3
   1a0fa:	2b00      	cmp	r3, #0
   1a0fc:	d004      	beq.n	1a108 <getOverHeadWaterSensorState+0x48>
			{
				ans++;
   1a0fe:	1dfb      	adds	r3, r7, #7
   1a100:	781a      	ldrb	r2, [r3, #0]
   1a102:	1dfb      	adds	r3, r7, #7
   1a104:	3201      	adds	r2, #1
   1a106:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   1a108:	1dfb      	adds	r3, r7, #7
   1a10a:	781b      	ldrb	r3, [r3, #0]
}
   1a10c:	0018      	movs	r0, r3
   1a10e:	46bd      	mov	sp, r7
   1a110:	b002      	add	sp, #8
   1a112:	bd80      	pop	{r7, pc}
   1a114:	0001a06d 	.word	0x0001a06d

0001a118 <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
   1a118:	b590      	push	{r4, r7, lr}
   1a11a:	b085      	sub	sp, #20
   1a11c:	af00      	add	r7, sp, #0
   1a11e:	0002      	movs	r2, r0
   1a120:	1dfb      	adds	r3, r7, #7
   1a122:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
   1a124:	230f      	movs	r3, #15
   1a126:	18fc      	adds	r4, r7, r3
   1a128:	4b15      	ldr	r3, [pc, #84]	; (1a180 <overHeadWaterStatusOnCall+0x68>)
   1a12a:	4798      	blx	r3
   1a12c:	0003      	movs	r3, r0
   1a12e:	7023      	strb	r3, [r4, #0]
	if(current)
   1a130:	1dfb      	adds	r3, r7, #7
   1a132:	781b      	ldrb	r3, [r3, #0]
   1a134:	2b00      	cmp	r3, #0
   1a136:	d004      	beq.n	1a142 <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
   1a138:	230f      	movs	r3, #15
   1a13a:	18fb      	adds	r3, r7, r3
   1a13c:	4a11      	ldr	r2, [pc, #68]	; (1a184 <overHeadWaterStatusOnCall+0x6c>)
   1a13e:	7812      	ldrb	r2, [r2, #0]
   1a140:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
   1a142:	230f      	movs	r3, #15
   1a144:	18fb      	adds	r3, r7, r3
   1a146:	781b      	ldrb	r3, [r3, #0]
   1a148:	2b02      	cmp	r3, #2
   1a14a:	d103      	bne.n	1a154 <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
   1a14c:	2056      	movs	r0, #86	; 0x56
   1a14e:	4b0e      	ldr	r3, [pc, #56]	; (1a188 <overHeadWaterStatusOnCall+0x70>)
   1a150:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
   1a152:	e010      	b.n	1a176 <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
   1a154:	230f      	movs	r3, #15
   1a156:	18fb      	adds	r3, r7, r3
   1a158:	781b      	ldrb	r3, [r3, #0]
   1a15a:	2b01      	cmp	r3, #1
   1a15c:	d103      	bne.n	1a166 <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
   1a15e:	2058      	movs	r0, #88	; 0x58
   1a160:	4b09      	ldr	r3, [pc, #36]	; (1a188 <overHeadWaterStatusOnCall+0x70>)
   1a162:	4798      	blx	r3
}
   1a164:	e007      	b.n	1a176 <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
   1a166:	230f      	movs	r3, #15
   1a168:	18fb      	adds	r3, r7, r3
   1a16a:	781b      	ldrb	r3, [r3, #0]
   1a16c:	2b00      	cmp	r3, #0
   1a16e:	d102      	bne.n	1a176 <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
   1a170:	2057      	movs	r0, #87	; 0x57
   1a172:	4b05      	ldr	r3, [pc, #20]	; (1a188 <overHeadWaterStatusOnCall+0x70>)
   1a174:	4798      	blx	r3
}
   1a176:	46c0      	nop			; (mov r8, r8)
   1a178:	46bd      	mov	sp, r7
   1a17a:	b005      	add	sp, #20
   1a17c:	bd90      	pop	{r4, r7, pc}
   1a17e:	46c0      	nop			; (mov r8, r8)
   1a180:	0001a0c1 	.word	0x0001a0c1
   1a184:	20000990 	.word	0x20000990
   1a188:	00014d49 	.word	0x00014d49

0001a18c <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
   1a18c:	b580      	push	{r7, lr}
   1a18e:	b084      	sub	sp, #16
   1a190:	af00      	add	r7, sp, #0
   1a192:	60f8      	str	r0, [r7, #12]
   1a194:	60b9      	str	r1, [r7, #8]
   1a196:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
   1a198:	2037      	movs	r0, #55	; 0x37
   1a19a:	4b0c      	ldr	r3, [pc, #48]	; (1a1cc <readWaterSensorState+0x40>)
   1a19c:	4798      	blx	r3
   1a19e:	0003      	movs	r3, r0
   1a1a0:	001a      	movs	r2, r3
   1a1a2:	68fb      	ldr	r3, [r7, #12]
   1a1a4:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
   1a1a6:	200f      	movs	r0, #15
   1a1a8:	4b08      	ldr	r3, [pc, #32]	; (1a1cc <readWaterSensorState+0x40>)
   1a1aa:	4798      	blx	r3
   1a1ac:	0003      	movs	r3, r0
   1a1ae:	001a      	movs	r2, r3
   1a1b0:	68bb      	ldr	r3, [r7, #8]
   1a1b2:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
   1a1b4:	200e      	movs	r0, #14
   1a1b6:	4b05      	ldr	r3, [pc, #20]	; (1a1cc <readWaterSensorState+0x40>)
   1a1b8:	4798      	blx	r3
   1a1ba:	0003      	movs	r3, r0
   1a1bc:	001a      	movs	r2, r3
   1a1be:	687b      	ldr	r3, [r7, #4]
   1a1c0:	701a      	strb	r2, [r3, #0]
}
   1a1c2:	46c0      	nop			; (mov r8, r8)
   1a1c4:	46bd      	mov	sp, r7
   1a1c6:	b004      	add	sp, #16
   1a1c8:	bd80      	pop	{r7, pc}
   1a1ca:	46c0      	nop			; (mov r8, r8)
   1a1cc:	00019f4d 	.word	0x00019f4d

0001a1d0 <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
   1a1d0:	b580      	push	{r7, lr}
   1a1d2:	b082      	sub	sp, #8
   1a1d4:	af00      	add	r7, sp, #0
   1a1d6:	0002      	movs	r2, r0
   1a1d8:	1dfb      	adds	r3, r7, #7
   1a1da:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
   1a1dc:	4b03      	ldr	r3, [pc, #12]	; (1a1ec <updateUndergroundLevel+0x1c>)
   1a1de:	1dfa      	adds	r2, r7, #7
   1a1e0:	7812      	ldrb	r2, [r2, #0]
   1a1e2:	701a      	strb	r2, [r3, #0]
}
   1a1e4:	46c0      	nop			; (mov r8, r8)
   1a1e6:	46bd      	mov	sp, r7
   1a1e8:	b002      	add	sp, #8
   1a1ea:	bd80      	pop	{r7, pc}
   1a1ec:	20000a5c 	.word	0x20000a5c

0001a1f0 <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
   1a1f0:	b580      	push	{r7, lr}
   1a1f2:	b082      	sub	sp, #8
   1a1f4:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
   1a1f6:	1d3a      	adds	r2, r7, #4
   1a1f8:	1d79      	adds	r1, r7, #5
   1a1fa:	1dbb      	adds	r3, r7, #6
   1a1fc:	0018      	movs	r0, r3
   1a1fe:	4b17      	ldr	r3, [pc, #92]	; (1a25c <getWaterSensorState+0x6c>)
   1a200:	4798      	blx	r3
	uint8_t ans=0;
   1a202:	1dfb      	adds	r3, r7, #7
   1a204:	2200      	movs	r2, #0
   1a206:	701a      	strb	r2, [r3, #0]

	if(!l)
   1a208:	1dbb      	adds	r3, r7, #6
   1a20a:	781b      	ldrb	r3, [r3, #0]
   1a20c:	2201      	movs	r2, #1
   1a20e:	4053      	eors	r3, r2
   1a210:	b2db      	uxtb	r3, r3
   1a212:	2b00      	cmp	r3, #0
   1a214:	d01c      	beq.n	1a250 <getWaterSensorState+0x60>
	{
		ans++;
   1a216:	1dfb      	adds	r3, r7, #7
   1a218:	781a      	ldrb	r2, [r3, #0]
   1a21a:	1dfb      	adds	r3, r7, #7
   1a21c:	3201      	adds	r2, #1
   1a21e:	701a      	strb	r2, [r3, #0]
		if(!m)
   1a220:	1d7b      	adds	r3, r7, #5
   1a222:	781b      	ldrb	r3, [r3, #0]
   1a224:	2201      	movs	r2, #1
   1a226:	4053      	eors	r3, r2
   1a228:	b2db      	uxtb	r3, r3
   1a22a:	2b00      	cmp	r3, #0
   1a22c:	d010      	beq.n	1a250 <getWaterSensorState+0x60>
		{
			ans++;
   1a22e:	1dfb      	adds	r3, r7, #7
   1a230:	781a      	ldrb	r2, [r3, #0]
   1a232:	1dfb      	adds	r3, r7, #7
   1a234:	3201      	adds	r2, #1
   1a236:	701a      	strb	r2, [r3, #0]
			if(!h)
   1a238:	1d3b      	adds	r3, r7, #4
   1a23a:	781b      	ldrb	r3, [r3, #0]
   1a23c:	2201      	movs	r2, #1
   1a23e:	4053      	eors	r3, r2
   1a240:	b2db      	uxtb	r3, r3
   1a242:	2b00      	cmp	r3, #0
   1a244:	d004      	beq.n	1a250 <getWaterSensorState+0x60>
			{
				ans++;
   1a246:	1dfb      	adds	r3, r7, #7
   1a248:	781a      	ldrb	r2, [r3, #0]
   1a24a:	1dfb      	adds	r3, r7, #7
   1a24c:	3201      	adds	r2, #1
   1a24e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
   1a250:	1dfb      	adds	r3, r7, #7
   1a252:	781b      	ldrb	r3, [r3, #0]
}
   1a254:	0018      	movs	r0, r3
   1a256:	46bd      	mov	sp, r7
   1a258:	b002      	add	sp, #8
   1a25a:	bd80      	pop	{r7, pc}
   1a25c:	0001a18d 	.word	0x0001a18d

0001a260 <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
   1a260:	b590      	push	{r4, r7, lr}
   1a262:	b085      	sub	sp, #20
   1a264:	af00      	add	r7, sp, #0
   1a266:	0002      	movs	r2, r0
   1a268:	1dfb      	adds	r3, r7, #7
   1a26a:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
   1a26c:	230f      	movs	r3, #15
   1a26e:	18fc      	adds	r4, r7, r3
   1a270:	4b19      	ldr	r3, [pc, #100]	; (1a2d8 <waterStatusOnCall+0x78>)
   1a272:	4798      	blx	r3
   1a274:	0003      	movs	r3, r0
   1a276:	7023      	strb	r3, [r4, #0]
	if(current)
   1a278:	1dfb      	adds	r3, r7, #7
   1a27a:	781b      	ldrb	r3, [r3, #0]
   1a27c:	2b00      	cmp	r3, #0
   1a27e:	d004      	beq.n	1a28a <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
   1a280:	230f      	movs	r3, #15
   1a282:	18fb      	adds	r3, r7, r3
   1a284:	4a15      	ldr	r2, [pc, #84]	; (1a2dc <waterStatusOnCall+0x7c>)
   1a286:	7812      	ldrb	r2, [r2, #0]
   1a288:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
   1a28a:	230f      	movs	r3, #15
   1a28c:	18fb      	adds	r3, r7, r3
   1a28e:	781b      	ldrb	r3, [r3, #0]
   1a290:	2b00      	cmp	r3, #0
   1a292:	d103      	bne.n	1a29c <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
   1a294:	2054      	movs	r0, #84	; 0x54
   1a296:	4b12      	ldr	r3, [pc, #72]	; (1a2e0 <waterStatusOnCall+0x80>)
   1a298:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
   1a29a:	e019      	b.n	1a2d0 <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
   1a29c:	230f      	movs	r3, #15
   1a29e:	18fb      	adds	r3, r7, r3
   1a2a0:	781b      	ldrb	r3, [r3, #0]
   1a2a2:	2b01      	cmp	r3, #1
   1a2a4:	d103      	bne.n	1a2ae <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
   1a2a6:	2051      	movs	r0, #81	; 0x51
   1a2a8:	4b0d      	ldr	r3, [pc, #52]	; (1a2e0 <waterStatusOnCall+0x80>)
   1a2aa:	4798      	blx	r3
}
   1a2ac:	e010      	b.n	1a2d0 <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
   1a2ae:	230f      	movs	r3, #15
   1a2b0:	18fb      	adds	r3, r7, r3
   1a2b2:	781b      	ldrb	r3, [r3, #0]
   1a2b4:	2b02      	cmp	r3, #2
   1a2b6:	d103      	bne.n	1a2c0 <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
   1a2b8:	2052      	movs	r0, #82	; 0x52
   1a2ba:	4b09      	ldr	r3, [pc, #36]	; (1a2e0 <waterStatusOnCall+0x80>)
   1a2bc:	4798      	blx	r3
}
   1a2be:	e007      	b.n	1a2d0 <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
   1a2c0:	230f      	movs	r3, #15
   1a2c2:	18fb      	adds	r3, r7, r3
   1a2c4:	781b      	ldrb	r3, [r3, #0]
   1a2c6:	2b03      	cmp	r3, #3
   1a2c8:	d102      	bne.n	1a2d0 <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
   1a2ca:	2045      	movs	r0, #69	; 0x45
   1a2cc:	4b04      	ldr	r3, [pc, #16]	; (1a2e0 <waterStatusOnCall+0x80>)
   1a2ce:	4798      	blx	r3
}
   1a2d0:	46c0      	nop			; (mov r8, r8)
   1a2d2:	46bd      	mov	sp, r7
   1a2d4:	b005      	add	sp, #20
   1a2d6:	bd90      	pop	{r4, r7, pc}
   1a2d8:	0001a1f1 	.word	0x0001a1f1
   1a2dc:	20000a5c 	.word	0x20000a5c
   1a2e0:	00014d49 	.word	0x00014d49

0001a2e4 <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
   1a2e4:	b590      	push	{r4, r7, lr}
   1a2e6:	b085      	sub	sp, #20
   1a2e8:	af00      	add	r7, sp, #0
   1a2ea:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
   1a2ec:	2308      	movs	r3, #8
   1a2ee:	18fb      	adds	r3, r7, r3
   1a2f0:	0018      	movs	r0, r3
   1a2f2:	4b8b      	ldr	r3, [pc, #556]	; (1a520 <Water_Level_Task+0x23c>)
   1a2f4:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
   1a2f6:	2308      	movs	r3, #8
   1a2f8:	18fb      	adds	r3, r7, r3
   1a2fa:	2200      	movs	r2, #0
   1a2fc:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
   1a2fe:	2308      	movs	r3, #8
   1a300:	18fb      	adds	r3, r7, r3
   1a302:	2201      	movs	r2, #1
   1a304:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
   1a306:	2308      	movs	r3, #8
   1a308:	18fb      	adds	r3, r7, r3
   1a30a:	0019      	movs	r1, r3
   1a30c:	202f      	movs	r0, #47	; 0x2f
   1a30e:	4b85      	ldr	r3, [pc, #532]	; (1a524 <Water_Level_Task+0x240>)
   1a310:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
   1a312:	2308      	movs	r3, #8
   1a314:	18fb      	adds	r3, r7, r3
   1a316:	0019      	movs	r1, r3
   1a318:	200c      	movs	r0, #12
   1a31a:	4b82      	ldr	r3, [pc, #520]	; (1a524 <Water_Level_Task+0x240>)
   1a31c:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
   1a31e:	2308      	movs	r3, #8
   1a320:	18fb      	adds	r3, r7, r3
   1a322:	0019      	movs	r1, r3
   1a324:	200d      	movs	r0, #13
   1a326:	4b7f      	ldr	r3, [pc, #508]	; (1a524 <Water_Level_Task+0x240>)
   1a328:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
   1a32a:	2308      	movs	r3, #8
   1a32c:	18fb      	adds	r3, r7, r3
   1a32e:	0019      	movs	r1, r3
   1a330:	200e      	movs	r0, #14
   1a332:	4b7c      	ldr	r3, [pc, #496]	; (1a524 <Water_Level_Task+0x240>)
   1a334:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
   1a336:	2308      	movs	r3, #8
   1a338:	18fb      	adds	r3, r7, r3
   1a33a:	0019      	movs	r1, r3
   1a33c:	200f      	movs	r0, #15
   1a33e:	4b79      	ldr	r3, [pc, #484]	; (1a524 <Water_Level_Task+0x240>)
   1a340:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
   1a342:	2308      	movs	r3, #8
   1a344:	18fb      	adds	r3, r7, r3
   1a346:	0019      	movs	r1, r3
   1a348:	2037      	movs	r0, #55	; 0x37
   1a34a:	4b76      	ldr	r3, [pc, #472]	; (1a524 <Water_Level_Task+0x240>)
   1a34c:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
   1a34e:	4b76      	ldr	r3, [pc, #472]	; (1a528 <Water_Level_Task+0x244>)
   1a350:	2202      	movs	r2, #2
   1a352:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
   1a354:	4b75      	ldr	r3, [pc, #468]	; (1a52c <Water_Level_Task+0x248>)
   1a356:	2202      	movs	r2, #2
   1a358:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
   1a35a:	4b75      	ldr	r3, [pc, #468]	; (1a530 <Water_Level_Task+0x24c>)
   1a35c:	2201      	movs	r2, #1
   1a35e:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
   1a360:	4b74      	ldr	r3, [pc, #464]	; (1a534 <Water_Level_Task+0x250>)
   1a362:	2201      	movs	r2, #1
   1a364:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
   1a366:	4b74      	ldr	r3, [pc, #464]	; (1a538 <Water_Level_Task+0x254>)
   1a368:	2200      	movs	r2, #0
   1a36a:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
   1a36c:	230f      	movs	r3, #15
   1a36e:	18fb      	adds	r3, r7, r3
   1a370:	2200      	movs	r2, #0
   1a372:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
   1a374:	4b71      	ldr	r3, [pc, #452]	; (1a53c <Water_Level_Task+0x258>)
   1a376:	791b      	ldrb	r3, [r3, #4]
   1a378:	2b00      	cmp	r3, #0
   1a37a:	d004      	beq.n	1a386 <Water_Level_Task+0xa2>
	{
		j = 19;
   1a37c:	230f      	movs	r3, #15
   1a37e:	18fb      	adds	r3, r7, r3
   1a380:	2213      	movs	r2, #19
   1a382:	701a      	strb	r2, [r3, #0]
   1a384:	e003      	b.n	1a38e <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
   1a386:	230f      	movs	r3, #15
   1a388:	18fb      	adds	r3, r7, r3
   1a38a:	2211      	movs	r2, #17
   1a38c:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
   1a38e:	230e      	movs	r3, #14
   1a390:	18fb      	adds	r3, r7, r3
   1a392:	220c      	movs	r2, #12
   1a394:	701a      	strb	r2, [r3, #0]
   1a396:	e00c      	b.n	1a3b2 <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
   1a398:	230e      	movs	r3, #14
   1a39a:	18fb      	adds	r3, r7, r3
   1a39c:	781b      	ldrb	r3, [r3, #0]
   1a39e:	4a68      	ldr	r2, [pc, #416]	; (1a540 <Water_Level_Task+0x25c>)
   1a3a0:	2101      	movs	r1, #1
   1a3a2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
   1a3a4:	230e      	movs	r3, #14
   1a3a6:	18fb      	adds	r3, r7, r3
   1a3a8:	781a      	ldrb	r2, [r3, #0]
   1a3aa:	230e      	movs	r3, #14
   1a3ac:	18fb      	adds	r3, r7, r3
   1a3ae:	3201      	adds	r2, #1
   1a3b0:	701a      	strb	r2, [r3, #0]
   1a3b2:	230e      	movs	r3, #14
   1a3b4:	18fa      	adds	r2, r7, r3
   1a3b6:	230f      	movs	r3, #15
   1a3b8:	18fb      	adds	r3, r7, r3
   1a3ba:	7812      	ldrb	r2, [r2, #0]
   1a3bc:	781b      	ldrb	r3, [r3, #0]
   1a3be:	429a      	cmp	r2, r3
   1a3c0:	d3ea      	bcc.n	1a398 <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
   1a3c2:	4b60      	ldr	r3, [pc, #384]	; (1a544 <Water_Level_Task+0x260>)
   1a3c4:	2249      	movs	r2, #73	; 0x49
   1a3c6:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
   1a3c8:	4b5e      	ldr	r3, [pc, #376]	; (1a544 <Water_Level_Task+0x260>)
   1a3ca:	2244      	movs	r2, #68	; 0x44
   1a3cc:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
   1a3ce:	4b5d      	ldr	r3, [pc, #372]	; (1a544 <Water_Level_Task+0x260>)
   1a3d0:	2248      	movs	r2, #72	; 0x48
   1a3d2:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
   1a3d4:	4b5b      	ldr	r3, [pc, #364]	; (1a544 <Water_Level_Task+0x260>)
   1a3d6:	2245      	movs	r2, #69	; 0x45
   1a3d8:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
   1a3da:	4b5a      	ldr	r3, [pc, #360]	; (1a544 <Water_Level_Task+0x260>)
   1a3dc:	225a      	movs	r2, #90	; 0x5a
   1a3de:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
   1a3e0:	4b56      	ldr	r3, [pc, #344]	; (1a53c <Water_Level_Task+0x258>)
   1a3e2:	791b      	ldrb	r3, [r3, #4]
   1a3e4:	2b00      	cmp	r3, #0
   1a3e6:	d005      	beq.n	1a3f4 <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
   1a3e8:	4b56      	ldr	r3, [pc, #344]	; (1a544 <Water_Level_Task+0x260>)
   1a3ea:	2256      	movs	r2, #86	; 0x56
   1a3ec:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
   1a3ee:	4b55      	ldr	r3, [pc, #340]	; (1a544 <Water_Level_Task+0x260>)
   1a3f0:	2257      	movs	r2, #87	; 0x57
   1a3f2:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1a3f4:	4b51      	ldr	r3, [pc, #324]	; (1a53c <Water_Level_Task+0x258>)
   1a3f6:	78db      	ldrb	r3, [r3, #3]
   1a3f8:	2b00      	cmp	r3, #0
   1a3fa:	d00b      	beq.n	1a414 <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
   1a3fc:	4b52      	ldr	r3, [pc, #328]	; (1a548 <Water_Level_Task+0x264>)
   1a3fe:	2200      	movs	r2, #0
   1a400:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
   1a402:	4b51      	ldr	r3, [pc, #324]	; (1a548 <Water_Level_Task+0x264>)
   1a404:	2200      	movs	r2, #0
   1a406:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
   1a408:	4b50      	ldr	r3, [pc, #320]	; (1a54c <Water_Level_Task+0x268>)
   1a40a:	220d      	movs	r2, #13
   1a40c:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
   1a40e:	4b4f      	ldr	r3, [pc, #316]	; (1a54c <Water_Level_Task+0x268>)
   1a410:	220f      	movs	r2, #15
   1a412:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
   1a414:	230c      	movs	r3, #12
   1a416:	18fb      	adds	r3, r7, r3
   1a418:	2200      	movs	r2, #0
   1a41a:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
   1a41c:	4b4c      	ldr	r3, [pc, #304]	; (1a550 <Water_Level_Task+0x26c>)
   1a41e:	7fdb      	ldrb	r3, [r3, #31]
   1a420:	b2db      	uxtb	r3, r3
   1a422:	2b00      	cmp	r3, #0
   1a424:	d000      	beq.n	1a428 <Water_Level_Task+0x144>
   1a426:	e073      	b.n	1a510 <Water_Level_Task+0x22c>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
   1a428:	230b      	movs	r3, #11
   1a42a:	18fc      	adds	r4, r7, r3
   1a42c:	4b49      	ldr	r3, [pc, #292]	; (1a554 <Water_Level_Task+0x270>)
   1a42e:	4798      	blx	r3
   1a430:	0003      	movs	r3, r0
   1a432:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
   1a434:	4b41      	ldr	r3, [pc, #260]	; (1a53c <Water_Level_Task+0x258>)
   1a436:	791b      	ldrb	r3, [r3, #4]
   1a438:	2b00      	cmp	r3, #0
   1a43a:	d005      	beq.n	1a448 <Water_Level_Task+0x164>
			{
				oLevel =getOverHeadWaterSensorState();
   1a43c:	230d      	movs	r3, #13
   1a43e:	18fc      	adds	r4, r7, r3
   1a440:	4b45      	ldr	r3, [pc, #276]	; (1a558 <Water_Level_Task+0x274>)
   1a442:	4798      	blx	r3
   1a444:	0003      	movs	r3, r0
   1a446:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   1a448:	4b3c      	ldr	r3, [pc, #240]	; (1a53c <Water_Level_Task+0x258>)
   1a44a:	791b      	ldrb	r3, [r3, #4]
   1a44c:	2b01      	cmp	r3, #1
   1a44e:	d125      	bne.n	1a49c <Water_Level_Task+0x1b8>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
   1a450:	4b35      	ldr	r3, [pc, #212]	; (1a528 <Water_Level_Task+0x244>)
   1a452:	781b      	ldrb	r3, [r3, #0]
   1a454:	220b      	movs	r2, #11
   1a456:	18ba      	adds	r2, r7, r2
   1a458:	7812      	ldrb	r2, [r2, #0]
   1a45a:	429a      	cmp	r2, r3
   1a45c:	d006      	beq.n	1a46c <Water_Level_Task+0x188>
   1a45e:	4b33      	ldr	r3, [pc, #204]	; (1a52c <Water_Level_Task+0x248>)
   1a460:	781b      	ldrb	r3, [r3, #0]
   1a462:	220b      	movs	r2, #11
   1a464:	18ba      	adds	r2, r7, r2
   1a466:	7812      	ldrb	r2, [r2, #0]
   1a468:	429a      	cmp	r2, r3
   1a46a:	d00f      	beq.n	1a48c <Water_Level_Task+0x1a8>
   1a46c:	4b30      	ldr	r3, [pc, #192]	; (1a530 <Water_Level_Task+0x24c>)
   1a46e:	781b      	ldrb	r3, [r3, #0]
   1a470:	b2db      	uxtb	r3, r3
   1a472:	220d      	movs	r2, #13
   1a474:	18ba      	adds	r2, r7, r2
   1a476:	7812      	ldrb	r2, [r2, #0]
   1a478:	429a      	cmp	r2, r3
   1a47a:	d009      	beq.n	1a490 <Water_Level_Task+0x1ac>
   1a47c:	4b2d      	ldr	r3, [pc, #180]	; (1a534 <Water_Level_Task+0x250>)
   1a47e:	781b      	ldrb	r3, [r3, #0]
   1a480:	b2db      	uxtb	r3, r3
   1a482:	220d      	movs	r2, #13
   1a484:	18ba      	adds	r2, r7, r2
   1a486:	7812      	ldrb	r2, [r2, #0]
   1a488:	429a      	cmp	r2, r3
   1a48a:	d101      	bne.n	1a490 <Water_Level_Task+0x1ac>
   1a48c:	2301      	movs	r3, #1
   1a48e:	e000      	b.n	1a492 <Water_Level_Task+0x1ae>
   1a490:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   1a492:	1c1a      	adds	r2, r3, #0
   1a494:	2301      	movs	r3, #1
   1a496:	4013      	ands	r3, r2
   1a498:	b2db      	uxtb	r3, r3
   1a49a:	e014      	b.n	1a4c6 <Water_Level_Task+0x1e2>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
   1a49c:	4b22      	ldr	r3, [pc, #136]	; (1a528 <Water_Level_Task+0x244>)
   1a49e:	781b      	ldrb	r3, [r3, #0]
   1a4a0:	220b      	movs	r2, #11
   1a4a2:	18ba      	adds	r2, r7, r2
   1a4a4:	7812      	ldrb	r2, [r2, #0]
   1a4a6:	429a      	cmp	r2, r3
   1a4a8:	d008      	beq.n	1a4bc <Water_Level_Task+0x1d8>
   1a4aa:	4b20      	ldr	r3, [pc, #128]	; (1a52c <Water_Level_Task+0x248>)
   1a4ac:	781b      	ldrb	r3, [r3, #0]
   1a4ae:	220b      	movs	r2, #11
   1a4b0:	18ba      	adds	r2, r7, r2
   1a4b2:	7812      	ldrb	r2, [r2, #0]
   1a4b4:	429a      	cmp	r2, r3
   1a4b6:	d101      	bne.n	1a4bc <Water_Level_Task+0x1d8>
   1a4b8:	2301      	movs	r3, #1
   1a4ba:	e000      	b.n	1a4be <Water_Level_Task+0x1da>
   1a4bc:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
   1a4be:	1c1a      	adds	r2, r3, #0
   1a4c0:	2301      	movs	r3, #1
   1a4c2:	4013      	ands	r3, r2
   1a4c4:	b2db      	uxtb	r3, r3
   1a4c6:	2b00      	cmp	r3, #0
   1a4c8:	d010      	beq.n	1a4ec <Water_Level_Task+0x208>
			)
			{
				tempWaterEventCount++;
   1a4ca:	4b1b      	ldr	r3, [pc, #108]	; (1a538 <Water_Level_Task+0x254>)
   1a4cc:	781b      	ldrb	r3, [r3, #0]
   1a4ce:	3301      	adds	r3, #1
   1a4d0:	b2da      	uxtb	r2, r3
   1a4d2:	4b19      	ldr	r3, [pc, #100]	; (1a538 <Water_Level_Task+0x254>)
   1a4d4:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
   1a4d6:	4b18      	ldr	r3, [pc, #96]	; (1a538 <Water_Level_Task+0x254>)
   1a4d8:	781b      	ldrb	r3, [r3, #0]
   1a4da:	2b09      	cmp	r3, #9
   1a4dc:	d909      	bls.n	1a4f2 <Water_Level_Task+0x20e>
				{
					operateOnWaterEvent();
   1a4de:	4b1f      	ldr	r3, [pc, #124]	; (1a55c <Water_Level_Task+0x278>)
   1a4e0:	4798      	blx	r3
					result=true;
   1a4e2:	230c      	movs	r3, #12
   1a4e4:	18fb      	adds	r3, r7, r3
   1a4e6:	2201      	movs	r2, #1
   1a4e8:	701a      	strb	r2, [r3, #0]
   1a4ea:	e002      	b.n	1a4f2 <Water_Level_Task+0x20e>
				}
			}
			else
			{
				tempWaterEventCount=0;
   1a4ec:	4b12      	ldr	r3, [pc, #72]	; (1a538 <Water_Level_Task+0x254>)
   1a4ee:	2200      	movs	r2, #0
   1a4f0:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
   1a4f2:	4b0e      	ldr	r3, [pc, #56]	; (1a52c <Water_Level_Task+0x248>)
   1a4f4:	220b      	movs	r2, #11
   1a4f6:	18ba      	adds	r2, r7, r2
   1a4f8:	7812      	ldrb	r2, [r2, #0]
   1a4fa:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
   1a4fc:	4b0f      	ldr	r3, [pc, #60]	; (1a53c <Water_Level_Task+0x258>)
   1a4fe:	791b      	ldrb	r3, [r3, #4]
   1a500:	2b00      	cmp	r3, #0
   1a502:	d009      	beq.n	1a518 <Water_Level_Task+0x234>
			{
				tempOverheadLevel=oLevel;
   1a504:	4b0b      	ldr	r3, [pc, #44]	; (1a534 <Water_Level_Task+0x250>)
   1a506:	220d      	movs	r2, #13
   1a508:	18ba      	adds	r2, r7, r2
   1a50a:	7812      	ldrb	r2, [r2, #0]
   1a50c:	701a      	strb	r2, [r3, #0]
   1a50e:	e003      	b.n	1a518 <Water_Level_Task+0x234>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
   1a510:	4b13      	ldr	r3, [pc, #76]	; (1a560 <Water_Level_Task+0x27c>)
   1a512:	0018      	movs	r0, r3
   1a514:	4b13      	ldr	r3, [pc, #76]	; (1a564 <Water_Level_Task+0x280>)
   1a516:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
   1a518:	2064      	movs	r0, #100	; 0x64
   1a51a:	4b12      	ldr	r3, [pc, #72]	; (1a564 <Water_Level_Task+0x280>)
   1a51c:	4798      	blx	r3
	{
   1a51e:	e779      	b.n	1a414 <Water_Level_Task+0x130>
   1a520:	00019f29 	.word	0x00019f29
   1a524:	000237d1 	.word	0x000237d1
   1a528:	20000a5c 	.word	0x20000a5c
   1a52c:	20000971 	.word	0x20000971
   1a530:	20000990 	.word	0x20000990
   1a534:	20000962 	.word	0x20000962
   1a538:	2000098c 	.word	0x2000098c
   1a53c:	2000082c 	.word	0x2000082c
   1a540:	20000918 	.word	0x20000918
   1a544:	200009fc 	.word	0x200009fc
   1a548:	200009c4 	.word	0x200009c4
   1a54c:	20000940 	.word	0x20000940
   1a550:	20000854 	.word	0x20000854
   1a554:	0001a1f1 	.word	0x0001a1f1
   1a558:	0001a0c1 	.word	0x0001a0c1
   1a55c:	0001a569 	.word	0x0001a569
   1a560:	00001388 	.word	0x00001388
   1a564:	00020969 	.word	0x00020969

0001a568 <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
   1a568:	b580      	push	{r7, lr}
   1a56a:	b082      	sub	sp, #8
   1a56c:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
   1a56e:	1dfb      	adds	r3, r7, #7
   1a570:	4abd      	ldr	r2, [pc, #756]	; (1a868 <operateOnWaterEvent+0x300>)
   1a572:	7812      	ldrb	r2, [r2, #0]
   1a574:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
   1a576:	1dbb      	adds	r3, r7, #6
   1a578:	4abc      	ldr	r2, [pc, #752]	; (1a86c <operateOnWaterEvent+0x304>)
   1a57a:	7812      	ldrb	r2, [r2, #0]
   1a57c:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
   1a57e:	4bbc      	ldr	r3, [pc, #752]	; (1a870 <operateOnWaterEvent+0x308>)
   1a580:	781b      	ldrb	r3, [r3, #0]
   1a582:	1dfa      	adds	r2, r7, #7
   1a584:	7812      	ldrb	r2, [r2, #0]
   1a586:	429a      	cmp	r2, r3
   1a588:	d10c      	bne.n	1a5a4 <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1a58a:	4bba      	ldr	r3, [pc, #744]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a58c:	791b      	ldrb	r3, [r3, #4]
   1a58e:	2b00      	cmp	r3, #0
   1a590:	d000      	beq.n	1a594 <operateOnWaterEvent+0x2c>
   1a592:	e162      	b.n	1a85a <operateOnWaterEvent+0x2f2>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
   1a594:	4bb8      	ldr	r3, [pc, #736]	; (1a878 <operateOnWaterEvent+0x310>)
   1a596:	781b      	ldrb	r3, [r3, #0]
   1a598:	b2db      	uxtb	r3, r3
   1a59a:	1dba      	adds	r2, r7, #6
   1a59c:	7812      	ldrb	r2, [r2, #0]
   1a59e:	429a      	cmp	r2, r3
   1a5a0:	d100      	bne.n	1a5a4 <operateOnWaterEvent+0x3c>
   1a5a2:	e15c      	b.n	1a85e <operateOnWaterEvent+0x2f6>
			{
				return;
			}
		}
	}
	if (getMotorState())
   1a5a4:	4bb5      	ldr	r3, [pc, #724]	; (1a87c <operateOnWaterEvent+0x314>)
   1a5a6:	4798      	blx	r3
   1a5a8:	1e03      	subs	r3, r0, #0
   1a5aa:	d100      	bne.n	1a5ae <operateOnWaterEvent+0x46>
   1a5ac:	e0c4      	b.n	1a738 <operateOnWaterEvent+0x1d0>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
   1a5ae:	1dfb      	adds	r3, r7, #7
   1a5b0:	781b      	ldrb	r3, [r3, #0]
   1a5b2:	2b00      	cmp	r3, #0
   1a5b4:	d122      	bne.n	1a5fc <operateOnWaterEvent+0x94>
   1a5b6:	4bae      	ldr	r3, [pc, #696]	; (1a870 <operateOnWaterEvent+0x308>)
   1a5b8:	781b      	ldrb	r3, [r3, #0]
   1a5ba:	2b00      	cmp	r3, #0
   1a5bc:	d01e      	beq.n	1a5fc <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
   1a5be:	2200      	movs	r2, #0
   1a5c0:	2101      	movs	r1, #1
   1a5c2:	2000      	movs	r0, #0
   1a5c4:	4bae      	ldr	r3, [pc, #696]	; (1a880 <operateOnWaterEvent+0x318>)
   1a5c6:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
   1a5c8:	2049      	movs	r0, #73	; 0x49
   1a5ca:	4bae      	ldr	r3, [pc, #696]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a5cc:	4798      	blx	r3
   1a5ce:	0003      	movs	r3, r0
   1a5d0:	001a      	movs	r2, r3
   1a5d2:	4bad      	ldr	r3, [pc, #692]	; (1a888 <operateOnWaterEvent+0x320>)
   1a5d4:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a5d6:	4ba7      	ldr	r3, [pc, #668]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a5d8:	78db      	ldrb	r3, [r3, #3]
   1a5da:	2b00      	cmp	r3, #0
   1a5dc:	d100      	bne.n	1a5e0 <operateOnWaterEvent+0x78>
   1a5de:	e072      	b.n	1a6c6 <operateOnWaterEvent+0x15e>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
   1a5e0:	4baa      	ldr	r3, [pc, #680]	; (1a88c <operateOnWaterEvent+0x324>)
   1a5e2:	795b      	ldrb	r3, [r3, #5]
   1a5e4:	2b00      	cmp	r3, #0
   1a5e6:	d100      	bne.n	1a5ea <operateOnWaterEvent+0x82>
   1a5e8:	e06d      	b.n	1a6c6 <operateOnWaterEvent+0x15e>
   1a5ea:	4ba1      	ldr	r3, [pc, #644]	; (1a870 <operateOnWaterEvent+0x308>)
   1a5ec:	781b      	ldrb	r3, [r3, #0]
   1a5ee:	2b01      	cmp	r3, #1
   1a5f0:	d800      	bhi.n	1a5f4 <operateOnWaterEvent+0x8c>
   1a5f2:	e068      	b.n	1a6c6 <operateOnWaterEvent+0x15e>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   1a5f4:	4ba6      	ldr	r3, [pc, #664]	; (1a890 <operateOnWaterEvent+0x328>)
   1a5f6:	2201      	movs	r2, #1
   1a5f8:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a5fa:	e064      	b.n	1a6c6 <operateOnWaterEvent+0x15e>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
   1a5fc:	1dfb      	adds	r3, r7, #7
   1a5fe:	781b      	ldrb	r3, [r3, #0]
   1a600:	2b03      	cmp	r3, #3
   1a602:	d130      	bne.n	1a666 <operateOnWaterEvent+0xfe>
   1a604:	4b9a      	ldr	r3, [pc, #616]	; (1a870 <operateOnWaterEvent+0x308>)
   1a606:	781b      	ldrb	r3, [r3, #0]
   1a608:	2b02      	cmp	r3, #2
   1a60a:	d82c      	bhi.n	1a666 <operateOnWaterEvent+0xfe>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a60c:	4b99      	ldr	r3, [pc, #612]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a60e:	78db      	ldrb	r3, [r3, #3]
   1a610:	2b00      	cmp	r3, #0
   1a612:	d05b      	beq.n	1a6cc <operateOnWaterEvent+0x164>
			{
				if (m2m_Numbers_struct.m2mSetting)
   1a614:	4b9d      	ldr	r3, [pc, #628]	; (1a88c <operateOnWaterEvent+0x324>)
   1a616:	795b      	ldrb	r3, [r3, #5]
   1a618:	2b00      	cmp	r3, #0
   1a61a:	d003      	beq.n	1a624 <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   1a61c:	4b9c      	ldr	r3, [pc, #624]	; (1a890 <operateOnWaterEvent+0x328>)
   1a61e:	2201      	movs	r2, #1
   1a620:	705a      	strb	r2, [r3, #1]
   1a622:	e006      	b.n	1a632 <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
   1a624:	2045      	movs	r0, #69	; 0x45
   1a626:	4b97      	ldr	r3, [pc, #604]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a628:	4798      	blx	r3
   1a62a:	0003      	movs	r3, r0
   1a62c:	001a      	movs	r2, r3
   1a62e:	4b96      	ldr	r3, [pc, #600]	; (1a888 <operateOnWaterEvent+0x320>)
   1a630:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
   1a632:	4b98      	ldr	r3, [pc, #608]	; (1a894 <operateOnWaterEvent+0x32c>)
   1a634:	7f9b      	ldrb	r3, [r3, #30]
   1a636:	b2db      	uxtb	r3, r3
   1a638:	2b00      	cmp	r3, #0
   1a63a:	d00c      	beq.n	1a656 <operateOnWaterEvent+0xee>
				{
					stopMotor(false,true,false);
   1a63c:	2200      	movs	r2, #0
   1a63e:	2101      	movs	r1, #1
   1a640:	2000      	movs	r0, #0
   1a642:	4b8f      	ldr	r3, [pc, #572]	; (1a880 <operateOnWaterEvent+0x318>)
   1a644:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
   1a646:	2048      	movs	r0, #72	; 0x48
   1a648:	4b8e      	ldr	r3, [pc, #568]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a64a:	4798      	blx	r3
   1a64c:	0003      	movs	r3, r0
   1a64e:	001a      	movs	r2, r3
   1a650:	4b8d      	ldr	r3, [pc, #564]	; (1a888 <operateOnWaterEvent+0x320>)
   1a652:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a654:	e03a      	b.n	1a6cc <operateOnWaterEvent+0x164>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   1a656:	2045      	movs	r0, #69	; 0x45
   1a658:	4b8a      	ldr	r3, [pc, #552]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a65a:	4798      	blx	r3
   1a65c:	0003      	movs	r3, r0
   1a65e:	001a      	movs	r2, r3
   1a660:	4b89      	ldr	r3, [pc, #548]	; (1a888 <operateOnWaterEvent+0x320>)
   1a662:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a664:	e032      	b.n	1a6cc <operateOnWaterEvent+0x164>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
   1a666:	1dfb      	adds	r3, r7, #7
   1a668:	781b      	ldrb	r3, [r3, #0]
   1a66a:	2b01      	cmp	r3, #1
   1a66c:	d11b      	bne.n	1a6a6 <operateOnWaterEvent+0x13e>
   1a66e:	4b80      	ldr	r3, [pc, #512]	; (1a870 <operateOnWaterEvent+0x308>)
   1a670:	781b      	ldrb	r3, [r3, #0]
   1a672:	2b01      	cmp	r3, #1
   1a674:	d917      	bls.n	1a6a6 <operateOnWaterEvent+0x13e>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a676:	4b7f      	ldr	r3, [pc, #508]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a678:	78db      	ldrb	r3, [r3, #3]
   1a67a:	2b00      	cmp	r3, #0
   1a67c:	d007      	beq.n	1a68e <operateOnWaterEvent+0x126>
			{
				if (m2m_Numbers_struct.m2mSetting)
   1a67e:	4b83      	ldr	r3, [pc, #524]	; (1a88c <operateOnWaterEvent+0x324>)
   1a680:	795b      	ldrb	r3, [r3, #5]
   1a682:	2b00      	cmp	r3, #0
   1a684:	d021      	beq.n	1a6ca <operateOnWaterEvent+0x162>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
   1a686:	4b82      	ldr	r3, [pc, #520]	; (1a890 <operateOnWaterEvent+0x328>)
   1a688:	2201      	movs	r2, #1
   1a68a:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a68c:	e01d      	b.n	1a6ca <operateOnWaterEvent+0x162>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
   1a68e:	4b79      	ldr	r3, [pc, #484]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a690:	79db      	ldrb	r3, [r3, #7]
   1a692:	2b00      	cmp	r3, #0
   1a694:	d019      	beq.n	1a6ca <operateOnWaterEvent+0x162>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
   1a696:	2044      	movs	r0, #68	; 0x44
   1a698:	4b7a      	ldr	r3, [pc, #488]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a69a:	4798      	blx	r3
   1a69c:	0003      	movs	r3, r0
   1a69e:	001a      	movs	r2, r3
   1a6a0:	4b79      	ldr	r3, [pc, #484]	; (1a888 <operateOnWaterEvent+0x320>)
   1a6a2:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a6a4:	e011      	b.n	1a6ca <operateOnWaterEvent+0x162>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
   1a6a6:	1dfb      	adds	r3, r7, #7
   1a6a8:	781b      	ldrb	r3, [r3, #0]
   1a6aa:	2b02      	cmp	r3, #2
   1a6ac:	d10e      	bne.n	1a6cc <operateOnWaterEvent+0x164>
   1a6ae:	4b70      	ldr	r3, [pc, #448]	; (1a870 <operateOnWaterEvent+0x308>)
   1a6b0:	781b      	ldrb	r3, [r3, #0]
   1a6b2:	2b01      	cmp	r3, #1
   1a6b4:	d80a      	bhi.n	1a6cc <operateOnWaterEvent+0x164>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
   1a6b6:	205a      	movs	r0, #90	; 0x5a
   1a6b8:	4b72      	ldr	r3, [pc, #456]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a6ba:	4798      	blx	r3
   1a6bc:	0003      	movs	r3, r0
   1a6be:	001a      	movs	r2, r3
   1a6c0:	4b71      	ldr	r3, [pc, #452]	; (1a888 <operateOnWaterEvent+0x320>)
   1a6c2:	741a      	strb	r2, [r3, #16]
   1a6c4:	e002      	b.n	1a6cc <operateOnWaterEvent+0x164>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a6c6:	46c0      	nop			; (mov r8, r8)
   1a6c8:	e000      	b.n	1a6cc <operateOnWaterEvent+0x164>
			if (factory_settings_parameter_struct.ENABLE_M2M)
   1a6ca:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   1a6cc:	4b69      	ldr	r3, [pc, #420]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a6ce:	791b      	ldrb	r3, [r3, #4]
   1a6d0:	2b00      	cmp	r3, #0
   1a6d2:	d100      	bne.n	1a6d6 <operateOnWaterEvent+0x16e>
   1a6d4:	e0b2      	b.n	1a83c <operateOnWaterEvent+0x2d4>
		{
			if(oLevel!=overheadLevel)
   1a6d6:	4b68      	ldr	r3, [pc, #416]	; (1a878 <operateOnWaterEvent+0x310>)
   1a6d8:	781b      	ldrb	r3, [r3, #0]
   1a6da:	b2db      	uxtb	r3, r3
   1a6dc:	1dba      	adds	r2, r7, #6
   1a6de:	7812      	ldrb	r2, [r2, #0]
   1a6e0:	429a      	cmp	r2, r3
   1a6e2:	d100      	bne.n	1a6e6 <operateOnWaterEvent+0x17e>
   1a6e4:	e0aa      	b.n	1a83c <operateOnWaterEvent+0x2d4>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
   1a6e6:	1dbb      	adds	r3, r7, #6
   1a6e8:	781b      	ldrb	r3, [r3, #0]
   1a6ea:	2b02      	cmp	r3, #2
   1a6ec:	d111      	bne.n	1a712 <operateOnWaterEvent+0x1aa>
   1a6ee:	4b62      	ldr	r3, [pc, #392]	; (1a878 <operateOnWaterEvent+0x310>)
   1a6f0:	781b      	ldrb	r3, [r3, #0]
   1a6f2:	b2db      	uxtb	r3, r3
   1a6f4:	2b01      	cmp	r3, #1
   1a6f6:	d80c      	bhi.n	1a712 <operateOnWaterEvent+0x1aa>
				{
					stopMotor(false,true,false);
   1a6f8:	2200      	movs	r2, #0
   1a6fa:	2101      	movs	r1, #1
   1a6fc:	2000      	movs	r0, #0
   1a6fe:	4b60      	ldr	r3, [pc, #384]	; (1a880 <operateOnWaterEvent+0x318>)
   1a700:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
   1a702:	2056      	movs	r0, #86	; 0x56
   1a704:	4b5f      	ldr	r3, [pc, #380]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a706:	4798      	blx	r3
   1a708:	0003      	movs	r3, r0
   1a70a:	001a      	movs	r2, r3
   1a70c:	4b5e      	ldr	r3, [pc, #376]	; (1a888 <operateOnWaterEvent+0x320>)
   1a70e:	745a      	strb	r2, [r3, #17]
   1a710:	e094      	b.n	1a83c <operateOnWaterEvent+0x2d4>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
   1a712:	1dbb      	adds	r3, r7, #6
   1a714:	781b      	ldrb	r3, [r3, #0]
   1a716:	2b00      	cmp	r3, #0
   1a718:	d000      	beq.n	1a71c <operateOnWaterEvent+0x1b4>
   1a71a:	e08f      	b.n	1a83c <operateOnWaterEvent+0x2d4>
   1a71c:	4b56      	ldr	r3, [pc, #344]	; (1a878 <operateOnWaterEvent+0x310>)
   1a71e:	781b      	ldrb	r3, [r3, #0]
   1a720:	b2db      	uxtb	r3, r3
   1a722:	2b00      	cmp	r3, #0
   1a724:	d100      	bne.n	1a728 <operateOnWaterEvent+0x1c0>
   1a726:	e089      	b.n	1a83c <operateOnWaterEvent+0x2d4>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
   1a728:	2057      	movs	r0, #87	; 0x57
   1a72a:	4b56      	ldr	r3, [pc, #344]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a72c:	4798      	blx	r3
   1a72e:	0003      	movs	r3, r0
   1a730:	001a      	movs	r2, r3
   1a732:	4b55      	ldr	r3, [pc, #340]	; (1a888 <operateOnWaterEvent+0x320>)
   1a734:	749a      	strb	r2, [r3, #18]
   1a736:	e081      	b.n	1a83c <operateOnWaterEvent+0x2d4>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1a738:	4b4e      	ldr	r3, [pc, #312]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a73a:	78db      	ldrb	r3, [r3, #3]
   1a73c:	2b00      	cmp	r3, #0
   1a73e:	d027      	beq.n	1a790 <operateOnWaterEvent+0x228>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
   1a740:	4b52      	ldr	r3, [pc, #328]	; (1a88c <operateOnWaterEvent+0x324>)
   1a742:	795b      	ldrb	r3, [r3, #5]
   1a744:	2b00      	cmp	r3, #0
   1a746:	d00b      	beq.n	1a760 <operateOnWaterEvent+0x1f8>
   1a748:	1dfb      	adds	r3, r7, #7
   1a74a:	781b      	ldrb	r3, [r3, #0]
   1a74c:	2b01      	cmp	r3, #1
   1a74e:	d807      	bhi.n	1a760 <operateOnWaterEvent+0x1f8>
   1a750:	4b47      	ldr	r3, [pc, #284]	; (1a870 <operateOnWaterEvent+0x308>)
   1a752:	781b      	ldrb	r3, [r3, #0]
   1a754:	2b01      	cmp	r3, #1
   1a756:	d903      	bls.n	1a760 <operateOnWaterEvent+0x1f8>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
   1a758:	4b4d      	ldr	r3, [pc, #308]	; (1a890 <operateOnWaterEvent+0x328>)
   1a75a:	2201      	movs	r2, #1
   1a75c:	701a      	strb	r2, [r3, #0]
   1a75e:	e04d      	b.n	1a7fc <operateOnWaterEvent+0x294>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
   1a760:	1dfb      	adds	r3, r7, #7
   1a762:	781b      	ldrb	r3, [r3, #0]
   1a764:	2b03      	cmp	r3, #3
   1a766:	d149      	bne.n	1a7fc <operateOnWaterEvent+0x294>
   1a768:	4b41      	ldr	r3, [pc, #260]	; (1a870 <operateOnWaterEvent+0x308>)
   1a76a:	781b      	ldrb	r3, [r3, #0]
   1a76c:	2b02      	cmp	r3, #2
   1a76e:	d845      	bhi.n	1a7fc <operateOnWaterEvent+0x294>
			{
				if(m2m_Numbers_struct.m2mSetting)
   1a770:	4b46      	ldr	r3, [pc, #280]	; (1a88c <operateOnWaterEvent+0x324>)
   1a772:	795b      	ldrb	r3, [r3, #5]
   1a774:	2b00      	cmp	r3, #0
   1a776:	d003      	beq.n	1a780 <operateOnWaterEvent+0x218>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
   1a778:	4b45      	ldr	r3, [pc, #276]	; (1a890 <operateOnWaterEvent+0x328>)
   1a77a:	2201      	movs	r2, #1
   1a77c:	705a      	strb	r2, [r3, #1]
   1a77e:	e03d      	b.n	1a7fc <operateOnWaterEvent+0x294>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   1a780:	2045      	movs	r0, #69	; 0x45
   1a782:	4b40      	ldr	r3, [pc, #256]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a784:	4798      	blx	r3
   1a786:	0003      	movs	r3, r0
   1a788:	001a      	movs	r2, r3
   1a78a:	4b3f      	ldr	r3, [pc, #252]	; (1a888 <operateOnWaterEvent+0x320>)
   1a78c:	73da      	strb	r2, [r3, #15]
   1a78e:	e035      	b.n	1a7fc <operateOnWaterEvent+0x294>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
   1a790:	1dfb      	adds	r3, r7, #7
   1a792:	781b      	ldrb	r3, [r3, #0]
   1a794:	2b03      	cmp	r3, #3
   1a796:	d10b      	bne.n	1a7b0 <operateOnWaterEvent+0x248>
   1a798:	4b35      	ldr	r3, [pc, #212]	; (1a870 <operateOnWaterEvent+0x308>)
   1a79a:	781b      	ldrb	r3, [r3, #0]
   1a79c:	2b02      	cmp	r3, #2
   1a79e:	d807      	bhi.n	1a7b0 <operateOnWaterEvent+0x248>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
   1a7a0:	2045      	movs	r0, #69	; 0x45
   1a7a2:	4b38      	ldr	r3, [pc, #224]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a7a4:	4798      	blx	r3
   1a7a6:	0003      	movs	r3, r0
   1a7a8:	001a      	movs	r2, r3
   1a7aa:	4b37      	ldr	r3, [pc, #220]	; (1a888 <operateOnWaterEvent+0x320>)
   1a7ac:	73da      	strb	r2, [r3, #15]
   1a7ae:	e025      	b.n	1a7fc <operateOnWaterEvent+0x294>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
   1a7b0:	1dfb      	adds	r3, r7, #7
   1a7b2:	781b      	ldrb	r3, [r3, #0]
   1a7b4:	2b02      	cmp	r3, #2
   1a7b6:	d121      	bne.n	1a7fc <operateOnWaterEvent+0x294>
   1a7b8:	4b2d      	ldr	r3, [pc, #180]	; (1a870 <operateOnWaterEvent+0x308>)
   1a7ba:	781b      	ldrb	r3, [r3, #0]
   1a7bc:	2b01      	cmp	r3, #1
   1a7be:	d81d      	bhi.n	1a7fc <operateOnWaterEvent+0x294>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
   1a7c0:	4b2c      	ldr	r3, [pc, #176]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a7c2:	791b      	ldrb	r3, [r3, #4]
   1a7c4:	2b00      	cmp	r3, #0
   1a7c6:	d00e      	beq.n	1a7e6 <operateOnWaterEvent+0x27e>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
   1a7c8:	4b2a      	ldr	r3, [pc, #168]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a7ca:	799b      	ldrb	r3, [r3, #6]
   1a7cc:	2b00      	cmp	r3, #0
   1a7ce:	d00a      	beq.n	1a7e6 <operateOnWaterEvent+0x27e>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
   1a7d0:	1dbb      	adds	r3, r7, #6
   1a7d2:	781b      	ldrb	r3, [r3, #0]
   1a7d4:	2b01      	cmp	r3, #1
   1a7d6:	d806      	bhi.n	1a7e6 <operateOnWaterEvent+0x27e>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   1a7d8:	4b2e      	ldr	r3, [pc, #184]	; (1a894 <operateOnWaterEvent+0x32c>)
   1a7da:	785b      	ldrb	r3, [r3, #1]
   1a7dc:	b2db      	uxtb	r3, r3
   1a7de:	2b00      	cmp	r3, #0
   1a7e0:	d001      	beq.n	1a7e6 <operateOnWaterEvent+0x27e>
						{
							triggerAutoStart();
   1a7e2:	4b2d      	ldr	r3, [pc, #180]	; (1a898 <operateOnWaterEvent+0x330>)
   1a7e4:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
   1a7e6:	4b23      	ldr	r3, [pc, #140]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a7e8:	799b      	ldrb	r3, [r3, #6]
   1a7ea:	2b00      	cmp	r3, #0
   1a7ec:	d006      	beq.n	1a7fc <operateOnWaterEvent+0x294>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
   1a7ee:	4b29      	ldr	r3, [pc, #164]	; (1a894 <operateOnWaterEvent+0x32c>)
   1a7f0:	785b      	ldrb	r3, [r3, #1]
   1a7f2:	b2db      	uxtb	r3, r3
   1a7f4:	2b00      	cmp	r3, #0
   1a7f6:	d001      	beq.n	1a7fc <operateOnWaterEvent+0x294>
				{
					triggerAutoStart();
   1a7f8:	4b27      	ldr	r3, [pc, #156]	; (1a898 <operateOnWaterEvent+0x330>)
   1a7fa:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
   1a7fc:	4b1d      	ldr	r3, [pc, #116]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a7fe:	791b      	ldrb	r3, [r3, #4]
   1a800:	2b00      	cmp	r3, #0
   1a802:	d01b      	beq.n	1a83c <operateOnWaterEvent+0x2d4>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
   1a804:	1dbb      	adds	r3, r7, #6
   1a806:	781b      	ldrb	r3, [r3, #0]
   1a808:	2b00      	cmp	r3, #0
   1a80a:	d117      	bne.n	1a83c <operateOnWaterEvent+0x2d4>
   1a80c:	4b1a      	ldr	r3, [pc, #104]	; (1a878 <operateOnWaterEvent+0x310>)
   1a80e:	781b      	ldrb	r3, [r3, #0]
   1a810:	b2db      	uxtb	r3, r3
   1a812:	2b00      	cmp	r3, #0
   1a814:	d012      	beq.n	1a83c <operateOnWaterEvent+0x2d4>
   1a816:	1dfb      	adds	r3, r7, #7
   1a818:	781b      	ldrb	r3, [r3, #0]
   1a81a:	2b00      	cmp	r3, #0
   1a81c:	d00e      	beq.n	1a83c <operateOnWaterEvent+0x2d4>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
   1a81e:	4b1d      	ldr	r3, [pc, #116]	; (1a894 <operateOnWaterEvent+0x32c>)
   1a820:	785b      	ldrb	r3, [r3, #1]
   1a822:	b2db      	uxtb	r3, r3
   1a824:	2b00      	cmp	r3, #0
   1a826:	d002      	beq.n	1a82e <operateOnWaterEvent+0x2c6>
				{
					triggerAutoStart();
   1a828:	4b1b      	ldr	r3, [pc, #108]	; (1a898 <operateOnWaterEvent+0x330>)
   1a82a:	4798      	blx	r3
   1a82c:	e006      	b.n	1a83c <operateOnWaterEvent+0x2d4>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
   1a82e:	2057      	movs	r0, #87	; 0x57
   1a830:	4b14      	ldr	r3, [pc, #80]	; (1a884 <operateOnWaterEvent+0x31c>)
   1a832:	4798      	blx	r3
   1a834:	0003      	movs	r3, r0
   1a836:	001a      	movs	r2, r3
   1a838:	4b13      	ldr	r3, [pc, #76]	; (1a888 <operateOnWaterEvent+0x320>)
   1a83a:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
   1a83c:	4b0d      	ldr	r3, [pc, #52]	; (1a874 <operateOnWaterEvent+0x30c>)
   1a83e:	791b      	ldrb	r3, [r3, #4]
   1a840:	2b00      	cmp	r3, #0
   1a842:	d004      	beq.n	1a84e <operateOnWaterEvent+0x2e6>
	{
		updateOverheadLevel(oLevel);
   1a844:	1dbb      	adds	r3, r7, #6
   1a846:	781b      	ldrb	r3, [r3, #0]
   1a848:	0018      	movs	r0, r3
   1a84a:	4b14      	ldr	r3, [pc, #80]	; (1a89c <operateOnWaterEvent+0x334>)
   1a84c:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
   1a84e:	1dfb      	adds	r3, r7, #7
   1a850:	781b      	ldrb	r3, [r3, #0]
   1a852:	0018      	movs	r0, r3
   1a854:	4b12      	ldr	r3, [pc, #72]	; (1a8a0 <operateOnWaterEvent+0x338>)
   1a856:	4798      	blx	r3
   1a858:	e002      	b.n	1a860 <operateOnWaterEvent+0x2f8>
			return;
   1a85a:	46c0      	nop			; (mov r8, r8)
   1a85c:	e000      	b.n	1a860 <operateOnWaterEvent+0x2f8>
				return;
   1a85e:	46c0      	nop			; (mov r8, r8)
}
   1a860:	46bd      	mov	sp, r7
   1a862:	b002      	add	sp, #8
   1a864:	bd80      	pop	{r7, pc}
   1a866:	46c0      	nop			; (mov r8, r8)
   1a868:	20000971 	.word	0x20000971
   1a86c:	20000962 	.word	0x20000962
   1a870:	20000a5c 	.word	0x20000a5c
   1a874:	2000082c 	.word	0x2000082c
   1a878:	20000990 	.word	0x20000990
   1a87c:	0001bb0d 	.word	0x0001bb0d
   1a880:	0001c411 	.word	0x0001c411
   1a884:	00014b69 	.word	0x00014b69
   1a888:	20000918 	.word	0x20000918
   1a88c:	20000754 	.word	0x20000754
   1a890:	200009c4 	.word	0x200009c4
   1a894:	20000854 	.word	0x20000854
   1a898:	0001be71 	.word	0x0001be71
   1a89c:	0001a0a1 	.word	0x0001a0a1
   1a8a0:	0001a1d1 	.word	0x0001a1d1

0001a8a4 <Configure_ADC0>:

void Configure_ADC0(void)
{
   1a8a4:	b580      	push	{r7, lr}
   1a8a6:	b08c      	sub	sp, #48	; 0x30
   1a8a8:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
   1a8aa:	003b      	movs	r3, r7
   1a8ac:	0018      	movs	r0, r3
   1a8ae:	4b1a      	ldr	r3, [pc, #104]	; (1a918 <Configure_ADC0+0x74>)
   1a8b0:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
   1a8b2:	003b      	movs	r3, r7
   1a8b4:	2213      	movs	r2, #19
   1a8b6:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
   1a8b8:	003b      	movs	r3, r7
   1a8ba:	22c0      	movs	r2, #192	; 0xc0
   1a8bc:	0152      	lsls	r2, r2, #5
   1a8be:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
   1a8c0:	003b      	movs	r3, r7
   1a8c2:	2203      	movs	r2, #3
   1a8c4:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
   1a8c6:	003b      	movs	r3, r7
   1a8c8:	2203      	movs	r2, #3
   1a8ca:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
   1a8cc:	003b      	movs	r3, r7
   1a8ce:	2200      	movs	r2, #0
   1a8d0:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
   1a8d2:	003b      	movs	r3, r7
   1a8d4:	2200      	movs	r2, #0
   1a8d6:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
   1a8d8:	003b      	movs	r3, r7
   1a8da:	2280      	movs	r2, #128	; 0x80
   1a8dc:	00d2      	lsls	r2, r2, #3
   1a8de:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
   1a8e0:	003b      	movs	r3, r7
   1a8e2:	2201      	movs	r2, #1
   1a8e4:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
   1a8e6:	003a      	movs	r2, r7
   1a8e8:	490c      	ldr	r1, [pc, #48]	; (1a91c <Configure_ADC0+0x78>)
   1a8ea:	4b0d      	ldr	r3, [pc, #52]	; (1a920 <Configure_ADC0+0x7c>)
   1a8ec:	0018      	movs	r0, r3
   1a8ee:	4b0d      	ldr	r3, [pc, #52]	; (1a924 <Configure_ADC0+0x80>)
   1a8f0:	4798      	blx	r3
	
	/************************************************************************/
	/*ADC Callback Setup                                                    */
	adc_register_callback(&adc_inst, adc_buffer_complete_callback, ADC_CALLBACK_READ_BUFFER);
   1a8f2:	490d      	ldr	r1, [pc, #52]	; (1a928 <Configure_ADC0+0x84>)
   1a8f4:	4b0a      	ldr	r3, [pc, #40]	; (1a920 <Configure_ADC0+0x7c>)
   1a8f6:	2200      	movs	r2, #0
   1a8f8:	0018      	movs	r0, r3
   1a8fa:	4b0c      	ldr	r3, [pc, #48]	; (1a92c <Configure_ADC0+0x88>)
   1a8fc:	4798      	blx	r3
	adc_enable_callback(&adc_inst, ADC_CALLBACK_READ_BUFFER);
   1a8fe:	4b08      	ldr	r3, [pc, #32]	; (1a920 <Configure_ADC0+0x7c>)
   1a900:	2100      	movs	r1, #0
   1a902:	0018      	movs	r0, r3
   1a904:	4b0a      	ldr	r3, [pc, #40]	; (1a930 <Configure_ADC0+0x8c>)
   1a906:	4798      	blx	r3
	/************************************************************************/
	
	adc_enable(&adc_inst);
   1a908:	4b05      	ldr	r3, [pc, #20]	; (1a920 <Configure_ADC0+0x7c>)
   1a90a:	0018      	movs	r0, r3
   1a90c:	4b09      	ldr	r3, [pc, #36]	; (1a934 <Configure_ADC0+0x90>)
   1a90e:	4798      	blx	r3
}
   1a910:	46c0      	nop			; (mov r8, r8)
   1a912:	46bd      	mov	sp, r7
   1a914:	b00c      	add	sp, #48	; 0x30
   1a916:	bd80      	pop	{r7, pc}
   1a918:	0001dec1 	.word	0x0001dec1
   1a91c:	42004000 	.word	0x42004000
   1a920:	20000a20 	.word	0x20000a20
   1a924:	0001e511 	.word	0x0001e511
   1a928:	0001a939 	.word	0x0001a939
   1a92c:	0001e811 	.word	0x0001e811
   1a930:	00019ea9 	.word	0x00019ea9
   1a934:	00019d11 	.word	0x00019d11

0001a938 <adc_buffer_complete_callback>:

void adc_buffer_complete_callback(const struct adc_module *const module)
{
   1a938:	b580      	push	{r7, lr}
   1a93a:	b082      	sub	sp, #8
   1a93c:	af00      	add	r7, sp, #0
   1a93e:	6078      	str	r0, [r7, #4]
	adc_read_buffer_done = true;
   1a940:	4b06      	ldr	r3, [pc, #24]	; (1a95c <adc_buffer_complete_callback+0x24>)
   1a942:	2201      	movs	r2, #1
   1a944:	701a      	strb	r2, [r3, #0]
	vTaskNotifyGiveFromISR(motorTask,NULL);
   1a946:	4b06      	ldr	r3, [pc, #24]	; (1a960 <adc_buffer_complete_callback+0x28>)
   1a948:	681b      	ldr	r3, [r3, #0]
   1a94a:	2100      	movs	r1, #0
   1a94c:	0018      	movs	r0, r3
   1a94e:	4b05      	ldr	r3, [pc, #20]	; (1a964 <adc_buffer_complete_callback+0x2c>)
   1a950:	4798      	blx	r3
}
   1a952:	46c0      	nop			; (mov r8, r8)
   1a954:	46bd      	mov	sp, r7
   1a956:	b002      	add	sp, #8
   1a958:	bd80      	pop	{r7, pc}
   1a95a:	46c0      	nop			; (mov r8, r8)
   1a95c:	20000945 	.word	0x20000945
   1a960:	20000438 	.word	0x20000438
   1a964:	00021675 	.word	0x00021675

0001a968 <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
   1a968:	b580      	push	{r7, lr}
   1a96a:	b084      	sub	sp, #16
   1a96c:	af00      	add	r7, sp, #0
   1a96e:	6078      	str	r0, [r7, #4]
   1a970:	000a      	movs	r2, r1
   1a972:	1cbb      	adds	r3, r7, #2
   1a974:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
   1a976:	687b      	ldr	r3, [r7, #4]
   1a978:	b2da      	uxtb	r2, r3
   1a97a:	4b24      	ldr	r3, [pc, #144]	; (1aa0c <Read_ADC0+0xa4>)
   1a97c:	0011      	movs	r1, r2
   1a97e:	0018      	movs	r0, r3
   1a980:	4b23      	ldr	r3, [pc, #140]	; (1aa10 <Read_ADC0+0xa8>)
   1a982:	4798      	blx	r3
	uint16_t current_value = 0;
   1a984:	2308      	movs	r3, #8
   1a986:	18fb      	adds	r3, r7, r3
   1a988:	2200      	movs	r2, #0
   1a98a:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
   1a98c:	2300      	movs	r3, #0
   1a98e:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   1a990:	230a      	movs	r3, #10
   1a992:	18fb      	adds	r3, r7, r3
   1a994:	2200      	movs	r2, #0
   1a996:	801a      	strh	r2, [r3, #0]
   1a998:	e026      	b.n	1a9e8 <Read_ADC0+0x80>
	{
		current_value = 0;
   1a99a:	2308      	movs	r3, #8
   1a99c:	18fb      	adds	r3, r7, r3
   1a99e:	2200      	movs	r2, #0
   1a9a0:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
   1a9a2:	4b1a      	ldr	r3, [pc, #104]	; (1aa0c <Read_ADC0+0xa4>)
   1a9a4:	0018      	movs	r0, r3
   1a9a6:	4b1b      	ldr	r3, [pc, #108]	; (1aa14 <Read_ADC0+0xac>)
   1a9a8:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
   1a9aa:	46c0      	nop			; (mov r8, r8)
   1a9ac:	4b17      	ldr	r3, [pc, #92]	; (1aa0c <Read_ADC0+0xa4>)
   1a9ae:	0018      	movs	r0, r3
   1a9b0:	4b19      	ldr	r3, [pc, #100]	; (1aa18 <Read_ADC0+0xb0>)
   1a9b2:	4798      	blx	r3
   1a9b4:	0002      	movs	r2, r0
   1a9b6:	2301      	movs	r3, #1
   1a9b8:	4013      	ands	r3, r2
   1a9ba:	2b01      	cmp	r3, #1
   1a9bc:	d1f6      	bne.n	1a9ac <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
   1a9be:	2308      	movs	r3, #8
   1a9c0:	18fa      	adds	r2, r7, r3
   1a9c2:	4b12      	ldr	r3, [pc, #72]	; (1aa0c <Read_ADC0+0xa4>)
   1a9c4:	0011      	movs	r1, r2
   1a9c6:	0018      	movs	r0, r3
   1a9c8:	4b14      	ldr	r3, [pc, #80]	; (1aa1c <Read_ADC0+0xb4>)
   1a9ca:	4798      	blx	r3
		total_value+=current_value;
   1a9cc:	2308      	movs	r3, #8
   1a9ce:	18fb      	adds	r3, r7, r3
   1a9d0:	881b      	ldrh	r3, [r3, #0]
   1a9d2:	001a      	movs	r2, r3
   1a9d4:	68fb      	ldr	r3, [r7, #12]
   1a9d6:	189b      	adds	r3, r3, r2
   1a9d8:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
   1a9da:	230a      	movs	r3, #10
   1a9dc:	18fb      	adds	r3, r7, r3
   1a9de:	881a      	ldrh	r2, [r3, #0]
   1a9e0:	230a      	movs	r3, #10
   1a9e2:	18fb      	adds	r3, r7, r3
   1a9e4:	3201      	adds	r2, #1
   1a9e6:	801a      	strh	r2, [r3, #0]
   1a9e8:	230a      	movs	r3, #10
   1a9ea:	18fa      	adds	r2, r7, r3
   1a9ec:	1cbb      	adds	r3, r7, #2
   1a9ee:	8812      	ldrh	r2, [r2, #0]
   1a9f0:	881b      	ldrh	r3, [r3, #0]
   1a9f2:	429a      	cmp	r2, r3
   1a9f4:	d3d1      	bcc.n	1a99a <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
   1a9f6:	1cbb      	adds	r3, r7, #2
   1a9f8:	881a      	ldrh	r2, [r3, #0]
   1a9fa:	4b09      	ldr	r3, [pc, #36]	; (1aa20 <Read_ADC0+0xb8>)
   1a9fc:	0011      	movs	r1, r2
   1a9fe:	68f8      	ldr	r0, [r7, #12]
   1aa00:	4798      	blx	r3
   1aa02:	0003      	movs	r3, r0
}
   1aa04:	0018      	movs	r0, r3
   1aa06:	46bd      	mov	sp, r7
   1aa08:	b004      	add	sp, #16
   1aa0a:	bd80      	pop	{r7, pc}
   1aa0c:	20000a20 	.word	0x20000a20
   1aa10:	00019e35 	.word	0x00019e35
   1aa14:	00019d71 	.word	0x00019d71
   1aa18:	00019c69 	.word	0x00019c69
   1aa1c:	00019db9 	.word	0x00019db9
   1aa20:	00026de1 	.word	0x00026de1

0001aa24 <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin, uint32_t oVoltage)
{
   1aa24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa26:	b09b      	sub	sp, #108	; 0x6c
   1aa28:	af00      	add	r7, sp, #0
   1aa2a:	6378      	str	r0, [r7, #52]	; 0x34
   1aa2c:	6339      	str	r1, [r7, #48]	; 0x30
   1aa2e:	466b      	mov	r3, sp
   1aa30:	607b      	str	r3, [r7, #4]
	delay_ms(5);
   1aa32:	2000      	movs	r0, #0
   1aa34:	4bd3      	ldr	r3, [pc, #844]	; (1ad84 <Read_Voltage_ADC0+0x360>)
   1aa36:	4798      	blx	r3
   1aa38:	0003      	movs	r3, r0
   1aa3a:	61bb      	str	r3, [r7, #24]
   1aa3c:	2300      	movs	r3, #0
   1aa3e:	61fb      	str	r3, [r7, #28]
   1aa40:	69b8      	ldr	r0, [r7, #24]
   1aa42:	69f9      	ldr	r1, [r7, #28]
   1aa44:	0003      	movs	r3, r0
   1aa46:	000c      	movs	r4, r1
   1aa48:	0f9a      	lsrs	r2, r3, #30
   1aa4a:	00a6      	lsls	r6, r4, #2
   1aa4c:	4316      	orrs	r6, r2
   1aa4e:	009d      	lsls	r5, r3, #2
   1aa50:	0003      	movs	r3, r0
   1aa52:	000c      	movs	r4, r1
   1aa54:	195b      	adds	r3, r3, r5
   1aa56:	4174      	adcs	r4, r6
   1aa58:	49cb      	ldr	r1, [pc, #812]	; (1ad88 <Read_Voltage_ADC0+0x364>)
   1aa5a:	2200      	movs	r2, #0
   1aa5c:	185b      	adds	r3, r3, r1
   1aa5e:	4154      	adcs	r4, r2
   1aa60:	0018      	movs	r0, r3
   1aa62:	0021      	movs	r1, r4
   1aa64:	4cc9      	ldr	r4, [pc, #804]	; (1ad8c <Read_Voltage_ADC0+0x368>)
   1aa66:	4aca      	ldr	r2, [pc, #808]	; (1ad90 <Read_Voltage_ADC0+0x36c>)
   1aa68:	2300      	movs	r3, #0
   1aa6a:	47a0      	blx	r4
   1aa6c:	0003      	movs	r3, r0
   1aa6e:	000c      	movs	r4, r1
   1aa70:	0018      	movs	r0, r3
   1aa72:	4bc8      	ldr	r3, [pc, #800]	; (1ad94 <Read_Voltage_ADC0+0x370>)
   1aa74:	4798      	blx	r3
	
	adc_set_positive_input(&adc_inst, adc_pin);
   1aa76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1aa78:	b2da      	uxtb	r2, r3
   1aa7a:	4bc7      	ldr	r3, [pc, #796]	; (1ad98 <Read_Voltage_ADC0+0x374>)
   1aa7c:	0011      	movs	r1, r2
   1aa7e:	0018      	movs	r0, r3
   1aa80:	4bc6      	ldr	r3, [pc, #792]	; (1ad9c <Read_Voltage_ADC0+0x378>)
   1aa82:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
   1aa84:	2324      	movs	r3, #36	; 0x24
   1aa86:	2230      	movs	r2, #48	; 0x30
   1aa88:	4694      	mov	ip, r2
   1aa8a:	44bc      	add	ip, r7
   1aa8c:	4463      	add	r3, ip
   1aa8e:	2288      	movs	r2, #136	; 0x88
   1aa90:	0092      	lsls	r2, r2, #2
   1aa92:	801a      	strh	r2, [r3, #0]
	uint16_t samples_buffer[no_of_samples];
   1aa94:	2324      	movs	r3, #36	; 0x24
   1aa96:	2230      	movs	r2, #48	; 0x30
   1aa98:	4694      	mov	ip, r2
   1aa9a:	44bc      	add	ip, r7
   1aa9c:	4463      	add	r3, ip
   1aa9e:	881b      	ldrh	r3, [r3, #0]
   1aaa0:	001a      	movs	r2, r3
   1aaa2:	3a01      	subs	r2, #1
   1aaa4:	653a      	str	r2, [r7, #80]	; 0x50
   1aaa6:	613b      	str	r3, [r7, #16]
   1aaa8:	2200      	movs	r2, #0
   1aaaa:	617a      	str	r2, [r7, #20]
   1aaac:	6938      	ldr	r0, [r7, #16]
   1aaae:	6979      	ldr	r1, [r7, #20]
   1aab0:	0002      	movs	r2, r0
   1aab2:	0f12      	lsrs	r2, r2, #28
   1aab4:	000c      	movs	r4, r1
   1aab6:	0124      	lsls	r4, r4, #4
   1aab8:	62fc      	str	r4, [r7, #44]	; 0x2c
   1aaba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   1aabc:	4314      	orrs	r4, r2
   1aabe:	62fc      	str	r4, [r7, #44]	; 0x2c
   1aac0:	0002      	movs	r2, r0
   1aac2:	0112      	lsls	r2, r2, #4
   1aac4:	62ba      	str	r2, [r7, #40]	; 0x28
   1aac6:	60bb      	str	r3, [r7, #8]
   1aac8:	2200      	movs	r2, #0
   1aaca:	60fa      	str	r2, [r7, #12]
   1aacc:	68b8      	ldr	r0, [r7, #8]
   1aace:	68f9      	ldr	r1, [r7, #12]
   1aad0:	0002      	movs	r2, r0
   1aad2:	0f12      	lsrs	r2, r2, #28
   1aad4:	000c      	movs	r4, r1
   1aad6:	0124      	lsls	r4, r4, #4
   1aad8:	627c      	str	r4, [r7, #36]	; 0x24
   1aada:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1aadc:	4314      	orrs	r4, r2
   1aade:	627c      	str	r4, [r7, #36]	; 0x24
   1aae0:	0002      	movs	r2, r0
   1aae2:	0112      	lsls	r2, r2, #4
   1aae4:	623a      	str	r2, [r7, #32]
   1aae6:	005b      	lsls	r3, r3, #1
   1aae8:	3301      	adds	r3, #1
   1aaea:	3307      	adds	r3, #7
   1aaec:	08db      	lsrs	r3, r3, #3
   1aaee:	00db      	lsls	r3, r3, #3
   1aaf0:	466a      	mov	r2, sp
   1aaf2:	1ad3      	subs	r3, r2, r3
   1aaf4:	469d      	mov	sp, r3
   1aaf6:	466b      	mov	r3, sp
   1aaf8:	3301      	adds	r3, #1
   1aafa:	085b      	lsrs	r3, r3, #1
   1aafc:	005b      	lsls	r3, r3, #1
   1aafe:	64fb      	str	r3, [r7, #76]	; 0x4c
	
	/************************************************************************/
	/*Using Buffered ADC to take Readings                                   */
	/************************************************************************/
	adc_read_buffer_done = false;
   1ab00:	4ba7      	ldr	r3, [pc, #668]	; (1ada0 <Read_Voltage_ADC0+0x37c>)
   1ab02:	2200      	movs	r2, #0
   1ab04:	701a      	strb	r2, [r3, #0]
	//uint32_t temp = xTaskGetTickCount();
	while(adc_read_buffer_job(&adc_inst, samples_buffer, no_of_samples)!=STATUS_OK)
   1ab06:	46c0      	nop			; (mov r8, r8)
   1ab08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1ab0a:	2324      	movs	r3, #36	; 0x24
   1ab0c:	2230      	movs	r2, #48	; 0x30
   1ab0e:	4694      	mov	ip, r2
   1ab10:	44bc      	add	ip, r7
   1ab12:	4463      	add	r3, ip
   1ab14:	881a      	ldrh	r2, [r3, #0]
   1ab16:	4ba0      	ldr	r3, [pc, #640]	; (1ad98 <Read_Voltage_ADC0+0x374>)
   1ab18:	0018      	movs	r0, r3
   1ab1a:	4ba2      	ldr	r3, [pc, #648]	; (1ada4 <Read_Voltage_ADC0+0x380>)
   1ab1c:	4798      	blx	r3
   1ab1e:	1e03      	subs	r3, r0, #0
   1ab20:	d1f2      	bne.n	1ab08 <Read_Voltage_ADC0+0xe4>
	{}
	ulTaskNotifyTake(pdTRUE,100/portTICK_PERIOD_MS);
   1ab22:	2164      	movs	r1, #100	; 0x64
   1ab24:	2001      	movs	r0, #1
   1ab26:	4ba0      	ldr	r3, [pc, #640]	; (1ada8 <Read_Voltage_ADC0+0x384>)
   1ab28:	4798      	blx	r3
	//while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
	//}
	//}

	
	if(adc_read_buffer_done)
   1ab2a:	4b9d      	ldr	r3, [pc, #628]	; (1ada0 <Read_Voltage_ADC0+0x37c>)
   1ab2c:	781b      	ldrb	r3, [r3, #0]
   1ab2e:	2b00      	cmp	r3, #0
   1ab30:	d100      	bne.n	1ab34 <Read_Voltage_ADC0+0x110>
   1ab32:	e120      	b.n	1ad76 <Read_Voltage_ADC0+0x352>
	{
		
		
		uint32_t square = 0;
   1ab34:	2300      	movs	r3, #0
   1ab36:	667b      	str	r3, [r7, #100]	; 0x64
		double  mean = 0.0;
   1ab38:	2300      	movs	r3, #0
   1ab3a:	2400      	movs	r4, #0
   1ab3c:	643b      	str	r3, [r7, #64]	; 0x40
   1ab3e:	647c      	str	r4, [r7, #68]	; 0x44
		double  root = 0.0;
   1ab40:	2300      	movs	r3, #0
   1ab42:	2400      	movs	r4, #0
   1ab44:	63bb      	str	r3, [r7, #56]	; 0x38
   1ab46:	63fc      	str	r4, [r7, #60]	; 0x3c
		uint16_t lastRead=0;
   1ab48:	2332      	movs	r3, #50	; 0x32
   1ab4a:	2230      	movs	r2, #48	; 0x30
   1ab4c:	4694      	mov	ip, r2
   1ab4e:	44bc      	add	ip, r7
   1ab50:	4463      	add	r3, ip
   1ab52:	2200      	movs	r2, #0
   1ab54:	801a      	strh	r2, [r3, #0]
		
		int temp=0;
   1ab56:	2300      	movs	r3, #0
   1ab58:	65fb      	str	r3, [r7, #92]	; 0x5c
		bool highDetect = false;
   1ab5a:	232b      	movs	r3, #43	; 0x2b
   1ab5c:	2230      	movs	r2, #48	; 0x30
   1ab5e:	4694      	mov	ip, r2
   1ab60:	44bc      	add	ip, r7
   1ab62:	4463      	add	r3, ip
   1ab64:	2200      	movs	r2, #0
   1ab66:	701a      	strb	r2, [r3, #0]
		uint16_t highDetectIndex;
		for (uint16_t i = 0; i < no_of_samples; i++)
   1ab68:	2326      	movs	r3, #38	; 0x26
   1ab6a:	2230      	movs	r2, #48	; 0x30
   1ab6c:	4694      	mov	ip, r2
   1ab6e:	44bc      	add	ip, r7
   1ab70:	4463      	add	r3, ip
   1ab72:	2200      	movs	r2, #0
   1ab74:	801a      	strh	r2, [r3, #0]
   1ab76:	e0c5      	b.n	1ad04 <Read_Voltage_ADC0+0x2e0>
		{
			if(i==0)
   1ab78:	2326      	movs	r3, #38	; 0x26
   1ab7a:	2230      	movs	r2, #48	; 0x30
   1ab7c:	4694      	mov	ip, r2
   1ab7e:	44bc      	add	ip, r7
   1ab80:	4463      	add	r3, ip
   1ab82:	881b      	ldrh	r3, [r3, #0]
   1ab84:	2b00      	cmp	r3, #0
   1ab86:	d10f      	bne.n	1aba8 <Read_Voltage_ADC0+0x184>
			{
				lastRead = samples_buffer[i];
   1ab88:	2326      	movs	r3, #38	; 0x26
   1ab8a:	2230      	movs	r2, #48	; 0x30
   1ab8c:	4694      	mov	ip, r2
   1ab8e:	44bc      	add	ip, r7
   1ab90:	4463      	add	r3, ip
   1ab92:	8819      	ldrh	r1, [r3, #0]
   1ab94:	2332      	movs	r3, #50	; 0x32
   1ab96:	2230      	movs	r2, #48	; 0x30
   1ab98:	4694      	mov	ip, r2
   1ab9a:	44bc      	add	ip, r7
   1ab9c:	4463      	add	r3, ip
   1ab9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1aba0:	0049      	lsls	r1, r1, #1
   1aba2:	5a8a      	ldrh	r2, [r1, r2]
   1aba4:	801a      	strh	r2, [r3, #0]
   1aba6:	e07a      	b.n	1ac9e <Read_Voltage_ADC0+0x27a>
			}
			else
			{
				
				if(!highDetect)
   1aba8:	232b      	movs	r3, #43	; 0x2b
   1abaa:	2230      	movs	r2, #48	; 0x30
   1abac:	4694      	mov	ip, r2
   1abae:	44bc      	add	ip, r7
   1abb0:	4463      	add	r3, ip
   1abb2:	781b      	ldrb	r3, [r3, #0]
   1abb4:	2201      	movs	r2, #1
   1abb6:	4053      	eors	r3, r2
   1abb8:	b2db      	uxtb	r3, r3
   1abba:	2b00      	cmp	r3, #0
   1abbc:	d012      	beq.n	1abe4 <Read_Voltage_ADC0+0x1c0>
				{
					temp = samples_buffer[i] - lastRead;
   1abbe:	2326      	movs	r3, #38	; 0x26
   1abc0:	2230      	movs	r2, #48	; 0x30
   1abc2:	4694      	mov	ip, r2
   1abc4:	44bc      	add	ip, r7
   1abc6:	4463      	add	r3, ip
   1abc8:	881a      	ldrh	r2, [r3, #0]
   1abca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1abcc:	0052      	lsls	r2, r2, #1
   1abce:	5ad3      	ldrh	r3, [r2, r3]
   1abd0:	001a      	movs	r2, r3
   1abd2:	2332      	movs	r3, #50	; 0x32
   1abd4:	2130      	movs	r1, #48	; 0x30
   1abd6:	468c      	mov	ip, r1
   1abd8:	44bc      	add	ip, r7
   1abda:	4463      	add	r3, ip
   1abdc:	881b      	ldrh	r3, [r3, #0]
   1abde:	1ad3      	subs	r3, r2, r3
   1abe0:	65fb      	str	r3, [r7, #92]	; 0x5c
   1abe2:	e010      	b.n	1ac06 <Read_Voltage_ADC0+0x1e2>
				}
				else
				{
					temp = lastRead - samples_buffer[i];
   1abe4:	2332      	movs	r3, #50	; 0x32
   1abe6:	2230      	movs	r2, #48	; 0x30
   1abe8:	4694      	mov	ip, r2
   1abea:	44bc      	add	ip, r7
   1abec:	4463      	add	r3, ip
   1abee:	881b      	ldrh	r3, [r3, #0]
   1abf0:	2226      	movs	r2, #38	; 0x26
   1abf2:	2130      	movs	r1, #48	; 0x30
   1abf4:	468c      	mov	ip, r1
   1abf6:	44bc      	add	ip, r7
   1abf8:	4462      	add	r2, ip
   1abfa:	8811      	ldrh	r1, [r2, #0]
   1abfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1abfe:	0049      	lsls	r1, r1, #1
   1ac00:	5a8a      	ldrh	r2, [r1, r2]
   1ac02:	1a9b      	subs	r3, r3, r2
   1ac04:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				
				lastRead = samples_buffer[i];
   1ac06:	2326      	movs	r3, #38	; 0x26
   1ac08:	2230      	movs	r2, #48	; 0x30
   1ac0a:	4694      	mov	ip, r2
   1ac0c:	44bc      	add	ip, r7
   1ac0e:	4463      	add	r3, ip
   1ac10:	8819      	ldrh	r1, [r3, #0]
   1ac12:	2332      	movs	r3, #50	; 0x32
   1ac14:	2230      	movs	r2, #48	; 0x30
   1ac16:	4694      	mov	ip, r2
   1ac18:	44bc      	add	ip, r7
   1ac1a:	4463      	add	r3, ip
   1ac1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1ac1e:	0049      	lsls	r1, r1, #1
   1ac20:	5a8a      	ldrh	r2, [r1, r2]
   1ac22:	801a      	strh	r2, [r3, #0]
				
				if(temp>500)
   1ac24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1ac26:	23fa      	movs	r3, #250	; 0xfa
   1ac28:	005b      	lsls	r3, r3, #1
   1ac2a:	429a      	cmp	r2, r3
   1ac2c:	dd37      	ble.n	1ac9e <Read_Voltage_ADC0+0x27a>
				{
					if(!highDetect)
   1ac2e:	232b      	movs	r3, #43	; 0x2b
   1ac30:	2230      	movs	r2, #48	; 0x30
   1ac32:	4694      	mov	ip, r2
   1ac34:	44bc      	add	ip, r7
   1ac36:	4463      	add	r3, ip
   1ac38:	781b      	ldrb	r3, [r3, #0]
   1ac3a:	2201      	movs	r2, #1
   1ac3c:	4053      	eors	r3, r2
   1ac3e:	b2db      	uxtb	r3, r3
   1ac40:	2b00      	cmp	r3, #0
   1ac42:	d013      	beq.n	1ac6c <Read_Voltage_ADC0+0x248>
					{
						highDetect= true;
   1ac44:	232b      	movs	r3, #43	; 0x2b
   1ac46:	2230      	movs	r2, #48	; 0x30
   1ac48:	4694      	mov	ip, r2
   1ac4a:	44bc      	add	ip, r7
   1ac4c:	4463      	add	r3, ip
   1ac4e:	2201      	movs	r2, #1
   1ac50:	701a      	strb	r2, [r3, #0]
						highDetectIndex=i;
   1ac52:	2328      	movs	r3, #40	; 0x28
   1ac54:	2230      	movs	r2, #48	; 0x30
   1ac56:	4694      	mov	ip, r2
   1ac58:	44bc      	add	ip, r7
   1ac5a:	4463      	add	r3, ip
   1ac5c:	2226      	movs	r2, #38	; 0x26
   1ac5e:	2130      	movs	r1, #48	; 0x30
   1ac60:	468c      	mov	ip, r1
   1ac62:	44bc      	add	ip, r7
   1ac64:	4462      	add	r2, ip
   1ac66:	8812      	ldrh	r2, [r2, #0]
   1ac68:	801a      	strh	r2, [r3, #0]
   1ac6a:	e018      	b.n	1ac9e <Read_Voltage_ADC0+0x27a>
					}
					else
					{
						if(i-highDetectIndex<15)
   1ac6c:	2326      	movs	r3, #38	; 0x26
   1ac6e:	2230      	movs	r2, #48	; 0x30
   1ac70:	4694      	mov	ip, r2
   1ac72:	44bc      	add	ip, r7
   1ac74:	4463      	add	r3, ip
   1ac76:	881a      	ldrh	r2, [r3, #0]
   1ac78:	2328      	movs	r3, #40	; 0x28
   1ac7a:	2130      	movs	r1, #48	; 0x30
   1ac7c:	468c      	mov	ip, r1
   1ac7e:	44bc      	add	ip, r7
   1ac80:	4463      	add	r3, ip
   1ac82:	881b      	ldrh	r3, [r3, #0]
   1ac84:	1ad3      	subs	r3, r2, r3
   1ac86:	2b0e      	cmp	r3, #14
   1ac88:	dc09      	bgt.n	1ac9e <Read_Voltage_ADC0+0x27a>
						{
							invalidateVoltageReadings=true;
   1ac8a:	4b48      	ldr	r3, [pc, #288]	; (1adac <Read_Voltage_ADC0+0x388>)
   1ac8c:	2201      	movs	r2, #1
   1ac8e:	701a      	strb	r2, [r3, #0]
							invalidateVoltageReadingTime = xTaskGetTickCount();
   1ac90:	4b47      	ldr	r3, [pc, #284]	; (1adb0 <Read_Voltage_ADC0+0x38c>)
   1ac92:	4798      	blx	r3
   1ac94:	0002      	movs	r2, r0
   1ac96:	4b47      	ldr	r3, [pc, #284]	; (1adb4 <Read_Voltage_ADC0+0x390>)
   1ac98:	601a      	str	r2, [r3, #0]
							return 3999;
   1ac9a:	4b47      	ldr	r3, [pc, #284]	; (1adb8 <Read_Voltage_ADC0+0x394>)
   1ac9c:	e06c      	b.n	1ad78 <Read_Voltage_ADC0+0x354>
						}
					}
				}
			}
			
			square += pow(samples_buffer[i], 2);
   1ac9e:	2326      	movs	r3, #38	; 0x26
   1aca0:	2230      	movs	r2, #48	; 0x30
   1aca2:	4694      	mov	ip, r2
   1aca4:	44bc      	add	ip, r7
   1aca6:	4463      	add	r3, ip
   1aca8:	881a      	ldrh	r2, [r3, #0]
   1acaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1acac:	0052      	lsls	r2, r2, #1
   1acae:	5ad2      	ldrh	r2, [r2, r3]
   1acb0:	4b42      	ldr	r3, [pc, #264]	; (1adbc <Read_Voltage_ADC0+0x398>)
   1acb2:	0010      	movs	r0, r2
   1acb4:	4798      	blx	r3
   1acb6:	2300      	movs	r3, #0
   1acb8:	2480      	movs	r4, #128	; 0x80
   1acba:	05e4      	lsls	r4, r4, #23
   1acbc:	001a      	movs	r2, r3
   1acbe:	0023      	movs	r3, r4
   1acc0:	4c3f      	ldr	r4, [pc, #252]	; (1adc0 <Read_Voltage_ADC0+0x39c>)
   1acc2:	47a0      	blx	r4
   1acc4:	0005      	movs	r5, r0
   1acc6:	000e      	movs	r6, r1
   1acc8:	4b3c      	ldr	r3, [pc, #240]	; (1adbc <Read_Voltage_ADC0+0x398>)
   1acca:	6e78      	ldr	r0, [r7, #100]	; 0x64
   1accc:	4798      	blx	r3
   1acce:	4c3d      	ldr	r4, [pc, #244]	; (1adc4 <Read_Voltage_ADC0+0x3a0>)
   1acd0:	002a      	movs	r2, r5
   1acd2:	0033      	movs	r3, r6
   1acd4:	47a0      	blx	r4
   1acd6:	0003      	movs	r3, r0
   1acd8:	000c      	movs	r4, r1
   1acda:	0019      	movs	r1, r3
   1acdc:	0022      	movs	r2, r4
   1acde:	4b3a      	ldr	r3, [pc, #232]	; (1adc8 <Read_Voltage_ADC0+0x3a4>)
   1ace0:	0008      	movs	r0, r1
   1ace2:	0011      	movs	r1, r2
   1ace4:	4798      	blx	r3
   1ace6:	0003      	movs	r3, r0
   1ace8:	667b      	str	r3, [r7, #100]	; 0x64
		for (uint16_t i = 0; i < no_of_samples; i++)
   1acea:	2326      	movs	r3, #38	; 0x26
   1acec:	2230      	movs	r2, #48	; 0x30
   1acee:	4694      	mov	ip, r2
   1acf0:	44bc      	add	ip, r7
   1acf2:	4463      	add	r3, ip
   1acf4:	881a      	ldrh	r2, [r3, #0]
   1acf6:	2326      	movs	r3, #38	; 0x26
   1acf8:	2130      	movs	r1, #48	; 0x30
   1acfa:	468c      	mov	ip, r1
   1acfc:	44bc      	add	ip, r7
   1acfe:	4463      	add	r3, ip
   1ad00:	3201      	adds	r2, #1
   1ad02:	801a      	strh	r2, [r3, #0]
   1ad04:	2326      	movs	r3, #38	; 0x26
   1ad06:	2230      	movs	r2, #48	; 0x30
   1ad08:	18ba      	adds	r2, r7, r2
   1ad0a:	18d2      	adds	r2, r2, r3
   1ad0c:	2324      	movs	r3, #36	; 0x24
   1ad0e:	2130      	movs	r1, #48	; 0x30
   1ad10:	468c      	mov	ip, r1
   1ad12:	44bc      	add	ip, r7
   1ad14:	4463      	add	r3, ip
   1ad16:	8812      	ldrh	r2, [r2, #0]
   1ad18:	881b      	ldrh	r3, [r3, #0]
   1ad1a:	429a      	cmp	r2, r3
   1ad1c:	d200      	bcs.n	1ad20 <Read_Voltage_ADC0+0x2fc>
   1ad1e:	e72b      	b.n	1ab78 <Read_Voltage_ADC0+0x154>
		}
		
		mean = (square / (float)(no_of_samples));
   1ad20:	4b2a      	ldr	r3, [pc, #168]	; (1adcc <Read_Voltage_ADC0+0x3a8>)
   1ad22:	6e78      	ldr	r0, [r7, #100]	; 0x64
   1ad24:	4798      	blx	r3
   1ad26:	1c04      	adds	r4, r0, #0
   1ad28:	2324      	movs	r3, #36	; 0x24
   1ad2a:	2230      	movs	r2, #48	; 0x30
   1ad2c:	4694      	mov	ip, r2
   1ad2e:	44bc      	add	ip, r7
   1ad30:	4463      	add	r3, ip
   1ad32:	881a      	ldrh	r2, [r3, #0]
   1ad34:	4b25      	ldr	r3, [pc, #148]	; (1adcc <Read_Voltage_ADC0+0x3a8>)
   1ad36:	0010      	movs	r0, r2
   1ad38:	4798      	blx	r3
   1ad3a:	1c02      	adds	r2, r0, #0
   1ad3c:	4b24      	ldr	r3, [pc, #144]	; (1add0 <Read_Voltage_ADC0+0x3ac>)
   1ad3e:	1c11      	adds	r1, r2, #0
   1ad40:	1c20      	adds	r0, r4, #0
   1ad42:	4798      	blx	r3
   1ad44:	1c03      	adds	r3, r0, #0
   1ad46:	1c1a      	adds	r2, r3, #0
   1ad48:	4b22      	ldr	r3, [pc, #136]	; (1add4 <Read_Voltage_ADC0+0x3b0>)
   1ad4a:	1c10      	adds	r0, r2, #0
   1ad4c:	4798      	blx	r3
   1ad4e:	0003      	movs	r3, r0
   1ad50:	000c      	movs	r4, r1
   1ad52:	643b      	str	r3, [r7, #64]	; 0x40
   1ad54:	647c      	str	r4, [r7, #68]	; 0x44
		// Calculate Root.
		root = sqrt(mean);
   1ad56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ad58:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1ad5a:	0018      	movs	r0, r3
   1ad5c:	0021      	movs	r1, r4
   1ad5e:	4b1e      	ldr	r3, [pc, #120]	; (1add8 <Read_Voltage_ADC0+0x3b4>)
   1ad60:	4798      	blx	r3
   1ad62:	0003      	movs	r3, r0
   1ad64:	000c      	movs	r4, r1
   1ad66:	63bb      	str	r3, [r7, #56]	; 0x38
   1ad68:	63fc      	str	r4, [r7, #60]	; 0x3c
		//{
			//delay_us(1);
		//}
		////
		
		return (uint32_t)root;
   1ad6a:	4b17      	ldr	r3, [pc, #92]	; (1adc8 <Read_Voltage_ADC0+0x3a4>)
   1ad6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1ad6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1ad70:	4798      	blx	r3
   1ad72:	0003      	movs	r3, r0
   1ad74:	e000      	b.n	1ad78 <Read_Voltage_ADC0+0x354>
	}
	else
	{
		return 0;
   1ad76:	2300      	movs	r3, #0
   1ad78:	687a      	ldr	r2, [r7, #4]
   1ad7a:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
   1ad7c:	0018      	movs	r0, r3
   1ad7e:	46bd      	mov	sp, r7
   1ad80:	b01b      	add	sp, #108	; 0x6c
   1ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad84:	0002513d 	.word	0x0002513d
   1ad88:	00001b57 	.word	0x00001b57
   1ad8c:	00027149 	.word	0x00027149
   1ad90:	00001b58 	.word	0x00001b58
   1ad94:	20000001 	.word	0x20000001
   1ad98:	20000a20 	.word	0x20000a20
   1ad9c:	00019e35 	.word	0x00019e35
   1ada0:	20000945 	.word	0x20000945
   1ada4:	0001e851 	.word	0x0001e851
   1ada8:	000215e1 	.word	0x000215e1
   1adac:	20000a45 	.word	0x20000a45
   1adb0:	00020ccd 	.word	0x00020ccd
   1adb4:	200009a0 	.word	0x200009a0
   1adb8:	00000f9f 	.word	0x00000f9f
   1adbc:	000293d5 	.word	0x000293d5
   1adc0:	00025b4d 	.word	0x00025b4d
   1adc4:	000278f5 	.word	0x000278f5
   1adc8:	000271dd 	.word	0x000271dd
   1adcc:	00027869 	.word	0x00027869
   1add0:	00027399 	.word	0x00027399
   1add4:	00029445 	.word	0x00029445
   1add8:	00025ea5 	.word	0x00025ea5

0001addc <autoSetCurrent>:

void autoSetCurrent(void)
{
   1addc:	b580      	push	{r7, lr}
   1adde:	b084      	sub	sp, #16
   1ade0:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
   1ade2:	4b2f      	ldr	r3, [pc, #188]	; (1aea0 <autoSetCurrent+0xc4>)
   1ade4:	4798      	blx	r3
   1ade6:	1e03      	subs	r3, r0, #0
   1ade8:	d050      	beq.n	1ae8c <autoSetCurrent+0xb0>
   1adea:	4b2e      	ldr	r3, [pc, #184]	; (1aea4 <autoSetCurrent+0xc8>)
   1adec:	781b      	ldrb	r3, [r3, #0]
   1adee:	2201      	movs	r2, #1
   1adf0:	4053      	eors	r3, r2
   1adf2:	b2db      	uxtb	r3, r3
   1adf4:	2b00      	cmp	r3, #0
   1adf6:	d049      	beq.n	1ae8c <autoSetCurrent+0xb0>
   1adf8:	4b2b      	ldr	r3, [pc, #172]	; (1aea8 <autoSetCurrent+0xcc>)
   1adfa:	781b      	ldrb	r3, [r3, #0]
   1adfc:	2201      	movs	r2, #1
   1adfe:	4053      	eors	r3, r2
   1ae00:	b2db      	uxtb	r3, r3
   1ae02:	2b00      	cmp	r3, #0
   1ae04:	d042      	beq.n	1ae8c <autoSetCurrent+0xb0>
   1ae06:	4b29      	ldr	r3, [pc, #164]	; (1aeac <autoSetCurrent+0xd0>)
   1ae08:	781b      	ldrb	r3, [r3, #0]
   1ae0a:	2201      	movs	r2, #1
   1ae0c:	4053      	eors	r3, r2
   1ae0e:	b2db      	uxtb	r3, r3
   1ae10:	2b00      	cmp	r3, #0
   1ae12:	d03b      	beq.n	1ae8c <autoSetCurrent+0xb0>
   1ae14:	4b26      	ldr	r3, [pc, #152]	; (1aeb0 <autoSetCurrent+0xd4>)
   1ae16:	4798      	blx	r3
   1ae18:	1e03      	subs	r3, r0, #0
   1ae1a:	d037      	beq.n	1ae8c <autoSetCurrent+0xb0>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
   1ae1c:	4b25      	ldr	r3, [pc, #148]	; (1aeb4 <autoSetCurrent+0xd8>)
   1ae1e:	691b      	ldr	r3, [r3, #16]
   1ae20:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
   1ae22:	68fb      	ldr	r3, [r7, #12]
   1ae24:	2bf9      	cmp	r3, #249	; 0xf9
   1ae26:	d806      	bhi.n	1ae36 <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
   1ae28:	2000      	movs	r0, #0
   1ae2a:	4b23      	ldr	r3, [pc, #140]	; (1aeb8 <autoSetCurrent+0xdc>)
   1ae2c:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
   1ae2e:	2059      	movs	r0, #89	; 0x59
   1ae30:	4b22      	ldr	r3, [pc, #136]	; (1aebc <autoSetCurrent+0xe0>)
   1ae32:	4798      	blx	r3
			return;
   1ae34:	e030      	b.n	1ae98 <autoSetCurrent+0xbc>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
   1ae36:	4b22      	ldr	r3, [pc, #136]	; (1aec0 <autoSetCurrent+0xe4>)
   1ae38:	7f1b      	ldrb	r3, [r3, #28]
   1ae3a:	b2db      	uxtb	r3, r3
   1ae3c:	001a      	movs	r2, r3
   1ae3e:	68fb      	ldr	r3, [r7, #12]
   1ae40:	435a      	muls	r2, r3
   1ae42:	4b20      	ldr	r3, [pc, #128]	; (1aec4 <autoSetCurrent+0xe8>)
   1ae44:	2164      	movs	r1, #100	; 0x64
   1ae46:	0010      	movs	r0, r2
   1ae48:	4798      	blx	r3
   1ae4a:	0003      	movs	r3, r0
   1ae4c:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
   1ae4e:	4b1c      	ldr	r3, [pc, #112]	; (1aec0 <autoSetCurrent+0xe4>)
   1ae50:	7f5b      	ldrb	r3, [r3, #29]
   1ae52:	b2db      	uxtb	r3, r3
   1ae54:	001a      	movs	r2, r3
   1ae56:	68fb      	ldr	r3, [r7, #12]
   1ae58:	435a      	muls	r2, r3
   1ae5a:	4b1a      	ldr	r3, [pc, #104]	; (1aec4 <autoSetCurrent+0xe8>)
   1ae5c:	2164      	movs	r1, #100	; 0x64
   1ae5e:	0010      	movs	r0, r2
   1ae60:	4798      	blx	r3
   1ae62:	0003      	movs	r3, r0
   1ae64:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
   1ae66:	68fb      	ldr	r3, [r7, #12]
   1ae68:	0018      	movs	r0, r3
   1ae6a:	4b17      	ldr	r3, [pc, #92]	; (1aec8 <autoSetCurrent+0xec>)
   1ae6c:	4798      	blx	r3
		setUnderloadValue(tempUnder);
   1ae6e:	68bb      	ldr	r3, [r7, #8]
   1ae70:	0018      	movs	r0, r3
   1ae72:	4b16      	ldr	r3, [pc, #88]	; (1aecc <autoSetCurrent+0xf0>)
   1ae74:	4798      	blx	r3
		setOverloadValue(tempOver);
   1ae76:	687b      	ldr	r3, [r7, #4]
   1ae78:	0018      	movs	r0, r3
   1ae7a:	4b15      	ldr	r3, [pc, #84]	; (1aed0 <autoSetCurrent+0xf4>)
   1ae7c:	4798      	blx	r3
		setCurrentDetection(true);
   1ae7e:	2001      	movs	r0, #1
   1ae80:	4b0d      	ldr	r3, [pc, #52]	; (1aeb8 <autoSetCurrent+0xdc>)
   1ae82:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
   1ae84:	204b      	movs	r0, #75	; 0x4b
   1ae86:	4b0d      	ldr	r3, [pc, #52]	; (1aebc <autoSetCurrent+0xe0>)
   1ae88:	4798      	blx	r3
	{
   1ae8a:	e005      	b.n	1ae98 <autoSetCurrent+0xbc>
	}
	else
	{
		setCurrentDetection(false);
   1ae8c:	2000      	movs	r0, #0
   1ae8e:	4b0a      	ldr	r3, [pc, #40]	; (1aeb8 <autoSetCurrent+0xdc>)
   1ae90:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
   1ae92:	2059      	movs	r0, #89	; 0x59
   1ae94:	4b09      	ldr	r3, [pc, #36]	; (1aebc <autoSetCurrent+0xe0>)
   1ae96:	4798      	blx	r3
	}
}
   1ae98:	46bd      	mov	sp, r7
   1ae9a:	b004      	add	sp, #16
   1ae9c:	bd80      	pop	{r7, pc}
   1ae9e:	46c0      	nop			; (mov r8, r8)
   1aea0:	0001bb0d 	.word	0x0001bb0d
   1aea4:	20000999 	.word	0x20000999
   1aea8:	2000099b 	.word	0x2000099b
   1aeac:	20000988 	.word	0x20000988
   1aeb0:	0001baa5 	.word	0x0001baa5
   1aeb4:	200008e8 	.word	0x200008e8
   1aeb8:	00011995 	.word	0x00011995
   1aebc:	00014d49 	.word	0x00014d49
   1aec0:	20000854 	.word	0x20000854
   1aec4:	00026de1 	.word	0x00026de1
   1aec8:	00011951 	.word	0x00011951
   1aecc:	000118c9 	.word	0x000118c9
   1aed0:	0001190d 	.word	0x0001190d

0001aed4 <speakAmpere>:

void speakAmpere(void)
{
   1aed4:	b580      	push	{r7, lr}
   1aed6:	b084      	sub	sp, #16
   1aed8:	af00      	add	r7, sp, #0
	if(getMotorState())
   1aeda:	4b0d      	ldr	r3, [pc, #52]	; (1af10 <speakAmpere+0x3c>)
   1aedc:	4798      	blx	r3
   1aede:	1e03      	subs	r3, r0, #0
   1aee0:	d00f      	beq.n	1af02 <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1aee2:	4b0c      	ldr	r3, [pc, #48]	; (1af14 <speakAmpere+0x40>)
   1aee4:	8a9b      	ldrh	r3, [r3, #20]
   1aee6:	b29b      	uxth	r3, r3
   1aee8:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
   1aeea:	1d39      	adds	r1, r7, #4
   1aeec:	68fb      	ldr	r3, [r7, #12]
   1aeee:	220a      	movs	r2, #10
   1aef0:	0018      	movs	r0, r3
   1aef2:	4b09      	ldr	r3, [pc, #36]	; (1af18 <speakAmpere+0x44>)
   1aef4:	4798      	blx	r3
		playRepeatedFiles(cTemp);
   1aef6:	1d3b      	adds	r3, r7, #4
   1aef8:	0018      	movs	r0, r3
   1aefa:	4b08      	ldr	r3, [pc, #32]	; (1af1c <speakAmpere+0x48>)
   1aefc:	4798      	blx	r3
		return;
   1aefe:	46c0      	nop			; (mov r8, r8)
   1af00:	e002      	b.n	1af08 <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
   1af02:	202d      	movs	r0, #45	; 0x2d
   1af04:	4b06      	ldr	r3, [pc, #24]	; (1af20 <speakAmpere+0x4c>)
   1af06:	4798      	blx	r3
}
   1af08:	46bd      	mov	sp, r7
   1af0a:	b004      	add	sp, #16
   1af0c:	bd80      	pop	{r7, pc}
   1af0e:	46c0      	nop			; (mov r8, r8)
   1af10:	0001bb0d 	.word	0x0001bb0d
   1af14:	200008e8 	.word	0x200008e8
   1af18:	00029b9d 	.word	0x00029b9d
   1af1c:	00014a05 	.word	0x00014a05
   1af20:	00014d49 	.word	0x00014d49

0001af24 <PR2_ISR>:

void PR2_ISR(void)
{
   1af24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af26:	b08b      	sub	sp, #44	; 0x2c
   1af28:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
   1af2a:	4b77      	ldr	r3, [pc, #476]	; (1b108 <PR2_ISR+0x1e4>)
   1af2c:	781b      	ldrb	r3, [r3, #0]
   1af2e:	b2db      	uxtb	r3, r3
   1af30:	2b01      	cmp	r3, #1
   1af32:	d000      	beq.n	1af36 <PR2_ISR+0x12>
   1af34:	e0e3      	b.n	1b0fe <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
   1af36:	4b75      	ldr	r3, [pc, #468]	; (1b10c <PR2_ISR+0x1e8>)
   1af38:	2200      	movs	r2, #0
   1af3a:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
   1af3c:	2000      	movs	r0, #0
   1af3e:	4b74      	ldr	r3, [pc, #464]	; (1b110 <PR2_ISR+0x1ec>)
   1af40:	4798      	blx	r3
   1af42:	0003      	movs	r3, r0
   1af44:	60bb      	str	r3, [r7, #8]
   1af46:	2300      	movs	r3, #0
   1af48:	60fb      	str	r3, [r7, #12]
   1af4a:	68bb      	ldr	r3, [r7, #8]
   1af4c:	68fc      	ldr	r4, [r7, #12]
   1af4e:	0f9a      	lsrs	r2, r3, #30
   1af50:	00a0      	lsls	r0, r4, #2
   1af52:	61f8      	str	r0, [r7, #28]
   1af54:	69f8      	ldr	r0, [r7, #28]
   1af56:	4310      	orrs	r0, r2
   1af58:	61f8      	str	r0, [r7, #28]
   1af5a:	009b      	lsls	r3, r3, #2
   1af5c:	61bb      	str	r3, [r7, #24]
   1af5e:	69bb      	ldr	r3, [r7, #24]
   1af60:	69fc      	ldr	r4, [r7, #28]
   1af62:	68b9      	ldr	r1, [r7, #8]
   1af64:	68fa      	ldr	r2, [r7, #12]
   1af66:	185b      	adds	r3, r3, r1
   1af68:	4154      	adcs	r4, r2
   1af6a:	496a      	ldr	r1, [pc, #424]	; (1b114 <PR2_ISR+0x1f0>)
   1af6c:	2200      	movs	r2, #0
   1af6e:	185b      	adds	r3, r3, r1
   1af70:	4154      	adcs	r4, r2
   1af72:	0018      	movs	r0, r3
   1af74:	0021      	movs	r1, r4
   1af76:	4c68      	ldr	r4, [pc, #416]	; (1b118 <PR2_ISR+0x1f4>)
   1af78:	4a68      	ldr	r2, [pc, #416]	; (1b11c <PR2_ISR+0x1f8>)
   1af7a:	2300      	movs	r3, #0
   1af7c:	47a0      	blx	r4
   1af7e:	0003      	movs	r3, r0
   1af80:	000c      	movs	r4, r1
   1af82:	0018      	movs	r0, r3
   1af84:	4b66      	ldr	r3, [pc, #408]	; (1b120 <PR2_ISR+0x1fc>)
   1af86:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
   1af88:	2323      	movs	r3, #35	; 0x23
   1af8a:	18fb      	adds	r3, r7, r3
   1af8c:	2200      	movs	r2, #0
   1af8e:	701a      	strb	r2, [r3, #0]
   1af90:	2322      	movs	r3, #34	; 0x22
   1af92:	18fb      	adds	r3, r7, r3
   1af94:	2200      	movs	r2, #0
   1af96:	701a      	strb	r2, [r3, #0]
   1af98:	2321      	movs	r3, #33	; 0x21
   1af9a:	18fb      	adds	r3, r7, r3
   1af9c:	2200      	movs	r2, #0
   1af9e:	701a      	strb	r2, [r3, #0]
   1afa0:	2320      	movs	r3, #32
   1afa2:	18fb      	adds	r3, r7, r3
   1afa4:	2200      	movs	r2, #0
   1afa6:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
   1afa8:	202b      	movs	r0, #43	; 0x2b
   1afaa:	4b5e      	ldr	r3, [pc, #376]	; (1b124 <PR2_ISR+0x200>)
   1afac:	4798      	blx	r3
   1afae:	1e03      	subs	r3, r0, #0
   1afb0:	d100      	bne.n	1afb4 <PR2_ISR+0x90>
   1afb2:	e08e      	b.n	1b0d2 <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1afb4:	2300      	movs	r3, #0
   1afb6:	627b      	str	r3, [r7, #36]	; 0x24
   1afb8:	e085      	b.n	1b0c6 <PR2_ISR+0x1a2>
			{
				delay_us(25);
   1afba:	2000      	movs	r0, #0
   1afbc:	4b54      	ldr	r3, [pc, #336]	; (1b110 <PR2_ISR+0x1ec>)
   1afbe:	4798      	blx	r3
   1afc0:	0003      	movs	r3, r0
   1afc2:	603b      	str	r3, [r7, #0]
   1afc4:	2300      	movs	r3, #0
   1afc6:	607b      	str	r3, [r7, #4]
   1afc8:	6838      	ldr	r0, [r7, #0]
   1afca:	6879      	ldr	r1, [r7, #4]
   1afcc:	0003      	movs	r3, r0
   1afce:	000c      	movs	r4, r1
   1afd0:	0f9a      	lsrs	r2, r3, #30
   1afd2:	00a6      	lsls	r6, r4, #2
   1afd4:	4316      	orrs	r6, r2
   1afd6:	009d      	lsls	r5, r3, #2
   1afd8:	0003      	movs	r3, r0
   1afda:	000c      	movs	r4, r1
   1afdc:	195b      	adds	r3, r3, r5
   1afde:	4174      	adcs	r4, r6
   1afe0:	0f9a      	lsrs	r2, r3, #30
   1afe2:	00a1      	lsls	r1, r4, #2
   1afe4:	6179      	str	r1, [r7, #20]
   1afe6:	6979      	ldr	r1, [r7, #20]
   1afe8:	4311      	orrs	r1, r2
   1afea:	6179      	str	r1, [r7, #20]
   1afec:	009a      	lsls	r2, r3, #2
   1afee:	613a      	str	r2, [r7, #16]
   1aff0:	6939      	ldr	r1, [r7, #16]
   1aff2:	697a      	ldr	r2, [r7, #20]
   1aff4:	185b      	adds	r3, r3, r1
   1aff6:	4154      	adcs	r4, r2
   1aff8:	494b      	ldr	r1, [pc, #300]	; (1b128 <PR2_ISR+0x204>)
   1affa:	2200      	movs	r2, #0
   1affc:	185b      	adds	r3, r3, r1
   1affe:	4154      	adcs	r4, r2
   1b000:	0018      	movs	r0, r3
   1b002:	0021      	movs	r1, r4
   1b004:	4c44      	ldr	r4, [pc, #272]	; (1b118 <PR2_ISR+0x1f4>)
   1b006:	4a49      	ldr	r2, [pc, #292]	; (1b12c <PR2_ISR+0x208>)
   1b008:	2300      	movs	r3, #0
   1b00a:	47a0      	blx	r4
   1b00c:	0003      	movs	r3, r0
   1b00e:	000c      	movs	r4, r1
   1b010:	0018      	movs	r0, r3
   1b012:	4b43      	ldr	r3, [pc, #268]	; (1b120 <PR2_ISR+0x1fc>)
   1b014:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
   1b016:	202a      	movs	r0, #42	; 0x2a
   1b018:	4b42      	ldr	r3, [pc, #264]	; (1b124 <PR2_ISR+0x200>)
   1b01a:	4798      	blx	r3
   1b01c:	1e03      	subs	r3, r0, #0
   1b01e:	d014      	beq.n	1b04a <PR2_ISR+0x126>
   1b020:	2323      	movs	r3, #35	; 0x23
   1b022:	18fb      	adds	r3, r7, r3
   1b024:	781b      	ldrb	r3, [r3, #0]
   1b026:	b2db      	uxtb	r3, r3
   1b028:	2b00      	cmp	r3, #0
   1b02a:	d10e      	bne.n	1b04a <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
   1b02c:	2323      	movs	r3, #35	; 0x23
   1b02e:	18fb      	adds	r3, r7, r3
   1b030:	2201      	movs	r2, #1
   1b032:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
   1b034:	2322      	movs	r3, #34	; 0x22
   1b036:	18fb      	adds	r3, r7, r3
   1b038:	781b      	ldrb	r3, [r3, #0]
   1b03a:	b2db      	uxtb	r3, r3
   1b03c:	2b01      	cmp	r3, #1
   1b03e:	d104      	bne.n	1b04a <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
   1b040:	2320      	movs	r3, #32
   1b042:	18fb      	adds	r3, r7, r3
   1b044:	2201      	movs	r2, #1
   1b046:	701a      	strb	r2, [r3, #0]
						break;
   1b048:	e043      	b.n	1b0d2 <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
   1b04a:	202a      	movs	r0, #42	; 0x2a
   1b04c:	4b35      	ldr	r3, [pc, #212]	; (1b124 <PR2_ISR+0x200>)
   1b04e:	4798      	blx	r3
   1b050:	0003      	movs	r3, r0
   1b052:	001a      	movs	r2, r3
   1b054:	2301      	movs	r3, #1
   1b056:	4053      	eors	r3, r2
   1b058:	b2db      	uxtb	r3, r3
   1b05a:	2b00      	cmp	r3, #0
   1b05c:	d013      	beq.n	1b086 <PR2_ISR+0x162>
   1b05e:	2322      	movs	r3, #34	; 0x22
   1b060:	18fb      	adds	r3, r7, r3
   1b062:	781b      	ldrb	r3, [r3, #0]
   1b064:	b2db      	uxtb	r3, r3
   1b066:	2b00      	cmp	r3, #0
   1b068:	d10d      	bne.n	1b086 <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
   1b06a:	2322      	movs	r3, #34	; 0x22
   1b06c:	18fb      	adds	r3, r7, r3
   1b06e:	2201      	movs	r2, #1
   1b070:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
   1b072:	2323      	movs	r3, #35	; 0x23
   1b074:	18fb      	adds	r3, r7, r3
   1b076:	781b      	ldrb	r3, [r3, #0]
   1b078:	b2db      	uxtb	r3, r3
   1b07a:	2b01      	cmp	r3, #1
   1b07c:	d103      	bne.n	1b086 <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
   1b07e:	2321      	movs	r3, #33	; 0x21
   1b080:	18fb      	adds	r3, r7, r3
   1b082:	2201      	movs	r2, #1
   1b084:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
   1b086:	2321      	movs	r3, #33	; 0x21
   1b088:	18fb      	adds	r3, r7, r3
   1b08a:	781b      	ldrb	r3, [r3, #0]
   1b08c:	b2db      	uxtb	r3, r3
   1b08e:	2b01      	cmp	r3, #1
   1b090:	d10c      	bne.n	1b0ac <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
   1b092:	4b27      	ldr	r3, [pc, #156]	; (1b130 <PR2_ISR+0x20c>)
   1b094:	2202      	movs	r2, #2
   1b096:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
   1b098:	4b26      	ldr	r3, [pc, #152]	; (1b134 <PR2_ISR+0x210>)
   1b09a:	2202      	movs	r2, #2
   1b09c:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
   1b09e:	4b26      	ldr	r3, [pc, #152]	; (1b138 <PR2_ISR+0x214>)
   1b0a0:	2200      	movs	r2, #0
   1b0a2:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
   1b0a4:	4b18      	ldr	r3, [pc, #96]	; (1b108 <PR2_ISR+0x1e4>)
   1b0a6:	2200      	movs	r2, #0
   1b0a8:	701a      	strb	r2, [r3, #0]
					break;
   1b0aa:	e012      	b.n	1b0d2 <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
   1b0ac:	202b      	movs	r0, #43	; 0x2b
   1b0ae:	4b1d      	ldr	r3, [pc, #116]	; (1b124 <PR2_ISR+0x200>)
   1b0b0:	4798      	blx	r3
   1b0b2:	0003      	movs	r3, r0
   1b0b4:	001a      	movs	r2, r3
   1b0b6:	2301      	movs	r3, #1
   1b0b8:	4053      	eors	r3, r2
   1b0ba:	b2db      	uxtb	r3, r3
   1b0bc:	2b00      	cmp	r3, #0
   1b0be:	d107      	bne.n	1b0d0 <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
   1b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0c2:	3301      	adds	r3, #1
   1b0c4:	627b      	str	r3, [r7, #36]	; 0x24
   1b0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0c8:	2b77      	cmp	r3, #119	; 0x77
   1b0ca:	d800      	bhi.n	1b0ce <PR2_ISR+0x1aa>
   1b0cc:	e775      	b.n	1afba <PR2_ISR+0x96>
   1b0ce:	e000      	b.n	1b0d2 <PR2_ISR+0x1ae>
				{
					break;
   1b0d0:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
   1b0d2:	4b19      	ldr	r3, [pc, #100]	; (1b138 <PR2_ISR+0x214>)
   1b0d4:	781b      	ldrb	r3, [r3, #0]
   1b0d6:	b2db      	uxtb	r3, r3
   1b0d8:	3301      	adds	r3, #1
   1b0da:	b2db      	uxtb	r3, r3
   1b0dc:	4a16      	ldr	r2, [pc, #88]	; (1b138 <PR2_ISR+0x214>)
   1b0de:	1c19      	adds	r1, r3, #0
   1b0e0:	7011      	strb	r1, [r2, #0]
   1b0e2:	2b02      	cmp	r3, #2
   1b0e4:	d90b      	bls.n	1b0fe <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
   1b0e6:	4b14      	ldr	r3, [pc, #80]	; (1b138 <PR2_ISR+0x214>)
   1b0e8:	2200      	movs	r2, #0
   1b0ea:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1b0ec:	4b10      	ldr	r3, [pc, #64]	; (1b130 <PR2_ISR+0x20c>)
   1b0ee:	2201      	movs	r2, #1
   1b0f0:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1b0f2:	4b10      	ldr	r3, [pc, #64]	; (1b134 <PR2_ISR+0x210>)
   1b0f4:	2201      	movs	r2, #1
   1b0f6:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
   1b0f8:	4b03      	ldr	r3, [pc, #12]	; (1b108 <PR2_ISR+0x1e4>)
   1b0fa:	2200      	movs	r2, #0
   1b0fc:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1b0fe:	46c0      	nop			; (mov r8, r8)
   1b100:	46bd      	mov	sp, r7
   1b102:	b00b      	add	sp, #44	; 0x2c
   1b104:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b106:	46c0      	nop			; (mov r8, r8)
   1b108:	2000000c 	.word	0x2000000c
   1b10c:	20000444 	.word	0x20000444
   1b110:	0002513d 	.word	0x0002513d
   1b114:	00001b57 	.word	0x00001b57
   1b118:	00027149 	.word	0x00027149
   1b11c:	00001b58 	.word	0x00001b58
   1b120:	20000001 	.word	0x20000001
   1b124:	00019f4d 	.word	0x00019f4d
   1b128:	006acfbf 	.word	0x006acfbf
   1b12c:	006acfc0 	.word	0x006acfc0
   1b130:	20000948 	.word	0x20000948
   1b134:	20000440 	.word	0x20000440
   1b138:	20000441 	.word	0x20000441

0001b13c <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
   1b13c:	b580      	push	{r7, lr}
   1b13e:	b084      	sub	sp, #16
   1b140:	af00      	add	r7, sp, #0
   1b142:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1b144:	4b12      	ldr	r3, [pc, #72]	; (1b190 <vTask_10ms_Timer+0x54>)
   1b146:	4798      	blx	r3
   1b148:	0003      	movs	r3, r0
   1b14a:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1b14c:	230c      	movs	r3, #12
   1b14e:	18fb      	adds	r3, r7, r3
   1b150:	210a      	movs	r1, #10
   1b152:	0018      	movs	r0, r3
   1b154:	4b0f      	ldr	r3, [pc, #60]	; (1b194 <vTask_10ms_Timer+0x58>)
   1b156:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
   1b158:	4b0f      	ldr	r3, [pc, #60]	; (1b198 <vTask_10ms_Timer+0x5c>)
   1b15a:	781b      	ldrb	r3, [r3, #0]
   1b15c:	b2db      	uxtb	r3, r3
   1b15e:	2b01      	cmp	r3, #1
   1b160:	d1f4      	bne.n	1b14c <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
   1b162:	4b0e      	ldr	r3, [pc, #56]	; (1b19c <vTask_10ms_Timer+0x60>)
   1b164:	781b      	ldrb	r3, [r3, #0]
   1b166:	b2db      	uxtb	r3, r3
   1b168:	3301      	adds	r3, #1
   1b16a:	b2db      	uxtb	r3, r3
   1b16c:	4a0b      	ldr	r2, [pc, #44]	; (1b19c <vTask_10ms_Timer+0x60>)
   1b16e:	1c19      	adds	r1, r3, #0
   1b170:	7011      	strb	r1, [r2, #0]
   1b172:	2b13      	cmp	r3, #19
   1b174:	d9ea      	bls.n	1b14c <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
   1b176:	4b09      	ldr	r3, [pc, #36]	; (1b19c <vTask_10ms_Timer+0x60>)
   1b178:	2200      	movs	r2, #0
   1b17a:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
   1b17c:	4b08      	ldr	r3, [pc, #32]	; (1b1a0 <vTask_10ms_Timer+0x64>)
   1b17e:	2201      	movs	r2, #1
   1b180:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
   1b182:	4b08      	ldr	r3, [pc, #32]	; (1b1a4 <vTask_10ms_Timer+0x68>)
   1b184:	2201      	movs	r2, #1
   1b186:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
   1b188:	4b03      	ldr	r3, [pc, #12]	; (1b198 <vTask_10ms_Timer+0x5c>)
   1b18a:	2200      	movs	r2, #0
   1b18c:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
   1b18e:	e7dd      	b.n	1b14c <vTask_10ms_Timer+0x10>
   1b190:	00020ccd 	.word	0x00020ccd
   1b194:	000208a1 	.word	0x000208a1
   1b198:	2000000c 	.word	0x2000000c
   1b19c:	20000444 	.word	0x20000444
   1b1a0:	20000948 	.word	0x20000948
   1b1a4:	20000440 	.word	0x20000440

0001b1a8 <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
   1b1a8:	b580      	push	{r7, lr}
   1b1aa:	b084      	sub	sp, #16
   1b1ac:	af00      	add	r7, sp, #0
   1b1ae:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1b1b0:	4b17      	ldr	r3, [pc, #92]	; (1b210 <vTask_100ms_Timer+0x68>)
   1b1b2:	4798      	blx	r3
   1b1b4:	0003      	movs	r3, r0
   1b1b6:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1b1b8:	230c      	movs	r3, #12
   1b1ba:	18fb      	adds	r3, r7, r3
   1b1bc:	2164      	movs	r1, #100	; 0x64
   1b1be:	0018      	movs	r0, r3
   1b1c0:	4b14      	ldr	r3, [pc, #80]	; (1b214 <vTask_100ms_Timer+0x6c>)
   1b1c2:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
   1b1c4:	4b14      	ldr	r3, [pc, #80]	; (1b218 <vTask_100ms_Timer+0x70>)
   1b1c6:	781b      	ldrb	r3, [r3, #0]
   1b1c8:	b2db      	uxtb	r3, r3
   1b1ca:	1c5a      	adds	r2, r3, #1
   1b1cc:	b2d1      	uxtb	r1, r2
   1b1ce:	4a12      	ldr	r2, [pc, #72]	; (1b218 <vTask_100ms_Timer+0x70>)
   1b1d0:	7011      	strb	r1, [r2, #0]
   1b1d2:	2b04      	cmp	r3, #4
   1b1d4:	d905      	bls.n	1b1e2 <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
   1b1d6:	4b10      	ldr	r3, [pc, #64]	; (1b218 <vTask_100ms_Timer+0x70>)
   1b1d8:	2200      	movs	r2, #0
   1b1da:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
   1b1dc:	4b0f      	ldr	r3, [pc, #60]	; (1b21c <vTask_100ms_Timer+0x74>)
   1b1de:	2201      	movs	r2, #1
   1b1e0:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
   1b1e2:	4b0f      	ldr	r3, [pc, #60]	; (1b220 <vTask_100ms_Timer+0x78>)
   1b1e4:	781b      	ldrb	r3, [r3, #0]
   1b1e6:	b2db      	uxtb	r3, r3
   1b1e8:	1c5a      	adds	r2, r3, #1
   1b1ea:	b2d1      	uxtb	r1, r2
   1b1ec:	4a0c      	ldr	r2, [pc, #48]	; (1b220 <vTask_100ms_Timer+0x78>)
   1b1ee:	7011      	strb	r1, [r2, #0]
   1b1f0:	2b04      	cmp	r3, #4
   1b1f2:	d9e1      	bls.n	1b1b8 <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
   1b1f4:	4b0a      	ldr	r3, [pc, #40]	; (1b220 <vTask_100ms_Timer+0x78>)
   1b1f6:	2200      	movs	r2, #0
   1b1f8:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
   1b1fa:	4b0a      	ldr	r3, [pc, #40]	; (1b224 <vTask_100ms_Timer+0x7c>)
   1b1fc:	2201      	movs	r2, #1
   1b1fe:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
   1b200:	4b09      	ldr	r3, [pc, #36]	; (1b228 <vTask_100ms_Timer+0x80>)
   1b202:	2200      	movs	r2, #0
   1b204:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
   1b206:	200b      	movs	r0, #11
   1b208:	4b08      	ldr	r3, [pc, #32]	; (1b22c <vTask_100ms_Timer+0x84>)
   1b20a:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
   1b20c:	e7d4      	b.n	1b1b8 <vTask_100ms_Timer+0x10>
   1b20e:	46c0      	nop			; (mov r8, r8)
   1b210:	00020ccd 	.word	0x00020ccd
   1b214:	000208a1 	.word	0x000208a1
   1b218:	2000000d 	.word	0x2000000d
   1b21c:	20000443 	.word	0x20000443
   1b220:	20000442 	.word	0x20000442
   1b224:	2000000c 	.word	0x2000000c
   1b228:	20000444 	.word	0x20000444
   1b22c:	0001a031 	.word	0x0001a031

0001b230 <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
   1b230:	b580      	push	{r7, lr}
   1b232:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
   1b234:	4b04      	ldr	r3, [pc, #16]	; (1b248 <should_Detect_New_Voltage+0x18>)
   1b236:	781b      	ldrb	r3, [r3, #0]
   1b238:	b2db      	uxtb	r3, r3
   1b23a:	425a      	negs	r2, r3
   1b23c:	4153      	adcs	r3, r2
   1b23e:	b2db      	uxtb	r3, r3
}
   1b240:	0018      	movs	r0, r3
   1b242:	46bd      	mov	sp, r7
   1b244:	bd80      	pop	{r7, pc}
   1b246:	46c0      	nop			; (mov r8, r8)
   1b248:	2000000d 	.word	0x2000000d

0001b24c <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
   1b24c:	b590      	push	{r4, r7, lr}
   1b24e:	b083      	sub	sp, #12
   1b250:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1b252:	4b25      	ldr	r3, [pc, #148]	; (1b2e8 <detect_battery_voltage_and_percentage+0x9c>)
   1b254:	681a      	ldr	r2, [r3, #0]
   1b256:	2301      	movs	r3, #1
   1b258:	425b      	negs	r3, r3
   1b25a:	0019      	movs	r1, r3
   1b25c:	0010      	movs	r0, r2
   1b25e:	4b23      	ldr	r3, [pc, #140]	; (1b2ec <detect_battery_voltage_and_percentage+0xa0>)
   1b260:	4798      	blx	r3
   1b262:	0003      	movs	r3, r0
   1b264:	2b01      	cmp	r3, #1
   1b266:	d13b      	bne.n	1b2e0 <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
   1b268:	21c8      	movs	r1, #200	; 0xc8
   1b26a:	2007      	movs	r0, #7
   1b26c:	4b20      	ldr	r3, [pc, #128]	; (1b2f0 <detect_battery_voltage_and_percentage+0xa4>)
   1b26e:	4798      	blx	r3
   1b270:	0003      	movs	r3, r0
   1b272:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
   1b274:	683b      	ldr	r3, [r7, #0]
   1b276:	4a1f      	ldr	r2, [pc, #124]	; (1b2f4 <detect_battery_voltage_and_percentage+0xa8>)
   1b278:	435a      	muls	r2, r3
   1b27a:	0010      	movs	r0, r2
   1b27c:	4b1e      	ldr	r3, [pc, #120]	; (1b2f8 <detect_battery_voltage_and_percentage+0xac>)
   1b27e:	22fa      	movs	r2, #250	; 0xfa
   1b280:	0091      	lsls	r1, r2, #2
   1b282:	4798      	blx	r3
   1b284:	0003      	movs	r3, r0
   1b286:	001a      	movs	r2, r3
   1b288:	4b1c      	ldr	r3, [pc, #112]	; (1b2fc <detect_battery_voltage_and_percentage+0xb0>)
   1b28a:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
   1b28c:	1dfb      	adds	r3, r7, #7
   1b28e:	2200      	movs	r2, #0
   1b290:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
   1b292:	4b1a      	ldr	r3, [pc, #104]	; (1b2fc <detect_battery_voltage_and_percentage+0xb0>)
   1b294:	699b      	ldr	r3, [r3, #24]
   1b296:	4a1a      	ldr	r2, [pc, #104]	; (1b300 <detect_battery_voltage_and_percentage+0xb4>)
   1b298:	4293      	cmp	r3, r2
   1b29a:	d803      	bhi.n	1b2a4 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
   1b29c:	1dfb      	adds	r3, r7, #7
   1b29e:	2200      	movs	r2, #0
   1b2a0:	701a      	strb	r2, [r3, #0]
   1b2a2:	e012      	b.n	1b2ca <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
   1b2a4:	4b15      	ldr	r3, [pc, #84]	; (1b2fc <detect_battery_voltage_and_percentage+0xb0>)
   1b2a6:	699b      	ldr	r3, [r3, #24]
   1b2a8:	4a16      	ldr	r2, [pc, #88]	; (1b304 <detect_battery_voltage_and_percentage+0xb8>)
   1b2aa:	189a      	adds	r2, r3, r2
   1b2ac:	4b12      	ldr	r3, [pc, #72]	; (1b2f8 <detect_battery_voltage_and_percentage+0xac>)
   1b2ae:	2109      	movs	r1, #9
   1b2b0:	0010      	movs	r0, r2
   1b2b2:	4798      	blx	r3
   1b2b4:	0003      	movs	r3, r0
   1b2b6:	001a      	movs	r2, r3
   1b2b8:	1dfb      	adds	r3, r7, #7
   1b2ba:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
   1b2bc:	1dfb      	adds	r3, r7, #7
   1b2be:	781b      	ldrb	r3, [r3, #0]
   1b2c0:	2b64      	cmp	r3, #100	; 0x64
   1b2c2:	d902      	bls.n	1b2ca <detect_battery_voltage_and_percentage+0x7e>
   1b2c4:	1dfb      	adds	r3, r7, #7
   1b2c6:	2264      	movs	r2, #100	; 0x64
   1b2c8:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
   1b2ca:	4b0c      	ldr	r3, [pc, #48]	; (1b2fc <detect_battery_voltage_and_percentage+0xb0>)
   1b2cc:	1dfa      	adds	r2, r7, #7
   1b2ce:	7812      	ldrb	r2, [r2, #0]
   1b2d0:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
   1b2d2:	4b05      	ldr	r3, [pc, #20]	; (1b2e8 <detect_battery_voltage_and_percentage+0x9c>)
   1b2d4:	6818      	ldr	r0, [r3, #0]
   1b2d6:	2300      	movs	r3, #0
   1b2d8:	2200      	movs	r2, #0
   1b2da:	2100      	movs	r1, #0
   1b2dc:	4c0a      	ldr	r4, [pc, #40]	; (1b308 <detect_battery_voltage_and_percentage+0xbc>)
   1b2de:	47a0      	blx	r4
	}
}
   1b2e0:	46c0      	nop			; (mov r8, r8)
   1b2e2:	46bd      	mov	sp, r7
   1b2e4:	b003      	add	sp, #12
   1b2e6:	bd90      	pop	{r4, r7, pc}
   1b2e8:	20000430 	.word	0x20000430
   1b2ec:	00020061 	.word	0x00020061
   1b2f0:	0001a969 	.word	0x0001a969
   1b2f4:	000005b1 	.word	0x000005b1
   1b2f8:	00026de1 	.word	0x00026de1
   1b2fc:	200008e8 	.word	0x200008e8
   1b300:	00000ce4 	.word	0x00000ce4
   1b304:	fffff31c 	.word	0xfffff31c
   1b308:	0001fbc1 	.word	0x0001fbc1

0001b30c <initPhaseRMStruct>:

void initPhaseRMStruct(struct rmsVoltage *phaseRMSStruct)
{
   1b30c:	b580      	push	{r7, lr}
   1b30e:	b084      	sub	sp, #16
   1b310:	af00      	add	r7, sp, #0
   1b312:	6078      	str	r0, [r7, #4]
	phaseRMSStruct->hasZeroReading = true;
   1b314:	687b      	ldr	r3, [r7, #4]
   1b316:	2201      	movs	r2, #1
   1b318:	735a      	strb	r2, [r3, #13]
	phaseRMSStruct->index=0;
   1b31a:	687b      	ldr	r3, [r7, #4]
   1b31c:	2200      	movs	r2, #0
   1b31e:	731a      	strb	r2, [r3, #12]
	phaseRMSStruct->rmsVoltage=0;
   1b320:	687b      	ldr	r3, [r7, #4]
   1b322:	2200      	movs	r2, #0
   1b324:	815a      	strh	r2, [r3, #10]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1b326:	230f      	movs	r3, #15
   1b328:	18fb      	adds	r3, r7, r3
   1b32a:	2200      	movs	r2, #0
   1b32c:	701a      	strb	r2, [r3, #0]
   1b32e:	e00d      	b.n	1b34c <initPhaseRMStruct+0x40>
	{
		phaseRMSStruct->voltRange[cnt]=0;
   1b330:	230f      	movs	r3, #15
   1b332:	18fb      	adds	r3, r7, r3
   1b334:	781a      	ldrb	r2, [r3, #0]
   1b336:	687b      	ldr	r3, [r7, #4]
   1b338:	0052      	lsls	r2, r2, #1
   1b33a:	2100      	movs	r1, #0
   1b33c:	52d1      	strh	r1, [r2, r3]
	for (uint8_t cnt =0;cnt< NO_RMS_VOLTAGE_READINGS;cnt++)
   1b33e:	230f      	movs	r3, #15
   1b340:	18fb      	adds	r3, r7, r3
   1b342:	781a      	ldrb	r2, [r3, #0]
   1b344:	230f      	movs	r3, #15
   1b346:	18fb      	adds	r3, r7, r3
   1b348:	3201      	adds	r2, #1
   1b34a:	701a      	strb	r2, [r3, #0]
   1b34c:	230f      	movs	r3, #15
   1b34e:	18fb      	adds	r3, r7, r3
   1b350:	781b      	ldrb	r3, [r3, #0]
   1b352:	2b04      	cmp	r3, #4
   1b354:	d9ec      	bls.n	1b330 <initPhaseRMStruct+0x24>
	}
}
   1b356:	46c0      	nop			; (mov r8, r8)
   1b358:	46bd      	mov	sp, r7
   1b35a:	b004      	add	sp, #16
   1b35c:	bd80      	pop	{r7, pc}
	...

0001b360 <updateRMSValues>:

void updateRMSValues(struct rmsVoltage *phaseRMSStruct)
{
   1b360:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b362:	b089      	sub	sp, #36	; 0x24
   1b364:	af00      	add	r7, sp, #0
   1b366:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t result=0;
   1b368:	2300      	movs	r3, #0
   1b36a:	61bb      	str	r3, [r7, #24]
	double mean = 0.0;
   1b36c:	2300      	movs	r3, #0
   1b36e:	2400      	movs	r4, #0
   1b370:	613b      	str	r3, [r7, #16]
   1b372:	617c      	str	r4, [r7, #20]
	double root = 0.0;
   1b374:	2300      	movs	r3, #0
   1b376:	2400      	movs	r4, #0
   1b378:	60bb      	str	r3, [r7, #8]
   1b37a:	60fc      	str	r4, [r7, #12]
	phaseRMSStruct->hasZeroReading=false;
   1b37c:	687b      	ldr	r3, [r7, #4]
   1b37e:	2200      	movs	r2, #0
   1b380:	735a      	strb	r2, [r3, #13]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1b382:	231f      	movs	r3, #31
   1b384:	18fb      	adds	r3, r7, r3
   1b386:	2200      	movs	r2, #0
   1b388:	701a      	strb	r2, [r3, #0]
   1b38a:	e036      	b.n	1b3fa <updateRMSValues+0x9a>
	{
		if(phaseRMSStruct->voltRange[cnt]==0)
   1b38c:	231f      	movs	r3, #31
   1b38e:	18fb      	adds	r3, r7, r3
   1b390:	781a      	ldrb	r2, [r3, #0]
   1b392:	687b      	ldr	r3, [r7, #4]
   1b394:	0052      	lsls	r2, r2, #1
   1b396:	5ad3      	ldrh	r3, [r2, r3]
   1b398:	2b00      	cmp	r3, #0
   1b39a:	d102      	bne.n	1b3a2 <updateRMSValues+0x42>
		{
			phaseRMSStruct->hasZeroReading=true;
   1b39c:	687b      	ldr	r3, [r7, #4]
   1b39e:	2201      	movs	r2, #1
   1b3a0:	735a      	strb	r2, [r3, #13]
		}
		result= result + pow(phaseRMSStruct->voltRange[cnt],2);
   1b3a2:	4b31      	ldr	r3, [pc, #196]	; (1b468 <updateRMSValues+0x108>)
   1b3a4:	69b8      	ldr	r0, [r7, #24]
   1b3a6:	4798      	blx	r3
   1b3a8:	0005      	movs	r5, r0
   1b3aa:	000e      	movs	r6, r1
   1b3ac:	231f      	movs	r3, #31
   1b3ae:	18fb      	adds	r3, r7, r3
   1b3b0:	781a      	ldrb	r2, [r3, #0]
   1b3b2:	687b      	ldr	r3, [r7, #4]
   1b3b4:	0052      	lsls	r2, r2, #1
   1b3b6:	5ad2      	ldrh	r2, [r2, r3]
   1b3b8:	4b2b      	ldr	r3, [pc, #172]	; (1b468 <updateRMSValues+0x108>)
   1b3ba:	0010      	movs	r0, r2
   1b3bc:	4798      	blx	r3
   1b3be:	2300      	movs	r3, #0
   1b3c0:	2480      	movs	r4, #128	; 0x80
   1b3c2:	05e4      	lsls	r4, r4, #23
   1b3c4:	001a      	movs	r2, r3
   1b3c6:	0023      	movs	r3, r4
   1b3c8:	4c28      	ldr	r4, [pc, #160]	; (1b46c <updateRMSValues+0x10c>)
   1b3ca:	47a0      	blx	r4
   1b3cc:	0002      	movs	r2, r0
   1b3ce:	000b      	movs	r3, r1
   1b3d0:	4c27      	ldr	r4, [pc, #156]	; (1b470 <updateRMSValues+0x110>)
   1b3d2:	0028      	movs	r0, r5
   1b3d4:	0031      	movs	r1, r6
   1b3d6:	47a0      	blx	r4
   1b3d8:	0003      	movs	r3, r0
   1b3da:	000c      	movs	r4, r1
   1b3dc:	0019      	movs	r1, r3
   1b3de:	0022      	movs	r2, r4
   1b3e0:	4b24      	ldr	r3, [pc, #144]	; (1b474 <updateRMSValues+0x114>)
   1b3e2:	0008      	movs	r0, r1
   1b3e4:	0011      	movs	r1, r2
   1b3e6:	4798      	blx	r3
   1b3e8:	0003      	movs	r3, r0
   1b3ea:	61bb      	str	r3, [r7, #24]
	for(cnt=0;cnt<NO_RMS_VOLTAGE_READINGS;cnt++)
   1b3ec:	231f      	movs	r3, #31
   1b3ee:	18fb      	adds	r3, r7, r3
   1b3f0:	781a      	ldrb	r2, [r3, #0]
   1b3f2:	231f      	movs	r3, #31
   1b3f4:	18fb      	adds	r3, r7, r3
   1b3f6:	3201      	adds	r2, #1
   1b3f8:	701a      	strb	r2, [r3, #0]
   1b3fa:	231f      	movs	r3, #31
   1b3fc:	18fb      	adds	r3, r7, r3
   1b3fe:	781b      	ldrb	r3, [r3, #0]
   1b400:	2b04      	cmp	r3, #4
   1b402:	d9c3      	bls.n	1b38c <updateRMSValues+0x2c>
	}
	mean= result / (float)NO_RMS_VOLTAGE_READINGS;
   1b404:	4b1c      	ldr	r3, [pc, #112]	; (1b478 <updateRMSValues+0x118>)
   1b406:	69b8      	ldr	r0, [r7, #24]
   1b408:	4798      	blx	r3
   1b40a:	1c02      	adds	r2, r0, #0
   1b40c:	4b1b      	ldr	r3, [pc, #108]	; (1b47c <updateRMSValues+0x11c>)
   1b40e:	491c      	ldr	r1, [pc, #112]	; (1b480 <updateRMSValues+0x120>)
   1b410:	1c10      	adds	r0, r2, #0
   1b412:	4798      	blx	r3
   1b414:	1c03      	adds	r3, r0, #0
   1b416:	1c1a      	adds	r2, r3, #0
   1b418:	4b1a      	ldr	r3, [pc, #104]	; (1b484 <updateRMSValues+0x124>)
   1b41a:	1c10      	adds	r0, r2, #0
   1b41c:	4798      	blx	r3
   1b41e:	0003      	movs	r3, r0
   1b420:	000c      	movs	r4, r1
   1b422:	613b      	str	r3, [r7, #16]
   1b424:	617c      	str	r4, [r7, #20]
	root = (uint32_t) (sqrt(mean));
   1b426:	693b      	ldr	r3, [r7, #16]
   1b428:	697c      	ldr	r4, [r7, #20]
   1b42a:	0018      	movs	r0, r3
   1b42c:	0021      	movs	r1, r4
   1b42e:	4b16      	ldr	r3, [pc, #88]	; (1b488 <updateRMSValues+0x128>)
   1b430:	4798      	blx	r3
   1b432:	000a      	movs	r2, r1
   1b434:	0001      	movs	r1, r0
   1b436:	4b0f      	ldr	r3, [pc, #60]	; (1b474 <updateRMSValues+0x114>)
   1b438:	0008      	movs	r0, r1
   1b43a:	0011      	movs	r1, r2
   1b43c:	4798      	blx	r3
   1b43e:	0002      	movs	r2, r0
   1b440:	4b09      	ldr	r3, [pc, #36]	; (1b468 <updateRMSValues+0x108>)
   1b442:	0010      	movs	r0, r2
   1b444:	4798      	blx	r3
   1b446:	0003      	movs	r3, r0
   1b448:	000c      	movs	r4, r1
   1b44a:	60bb      	str	r3, [r7, #8]
   1b44c:	60fc      	str	r4, [r7, #12]
	
	phaseRMSStruct->rmsVoltage = (uint16_t) root;
   1b44e:	4b09      	ldr	r3, [pc, #36]	; (1b474 <updateRMSValues+0x114>)
   1b450:	68b8      	ldr	r0, [r7, #8]
   1b452:	68f9      	ldr	r1, [r7, #12]
   1b454:	4798      	blx	r3
   1b456:	0003      	movs	r3, r0
   1b458:	b29a      	uxth	r2, r3
   1b45a:	687b      	ldr	r3, [r7, #4]
   1b45c:	815a      	strh	r2, [r3, #10]
}
   1b45e:	46c0      	nop			; (mov r8, r8)
   1b460:	46bd      	mov	sp, r7
   1b462:	b009      	add	sp, #36	; 0x24
   1b464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b466:	46c0      	nop			; (mov r8, r8)
   1b468:	000293d5 	.word	0x000293d5
   1b46c:	00025b4d 	.word	0x00025b4d
   1b470:	000278f5 	.word	0x000278f5
   1b474:	000271dd 	.word	0x000271dd
   1b478:	00027869 	.word	0x00027869
   1b47c:	00027399 	.word	0x00027399
   1b480:	40a00000 	.word	0x40a00000
   1b484:	00029445 	.word	0x00029445
   1b488:	00025ea5 	.word	0x00025ea5

0001b48c <filterVoltage>:

uint16_t filterVoltage(enum phaseReading phase,uint16_t voltReading)
{
   1b48c:	b590      	push	{r4, r7, lr}
   1b48e:	b085      	sub	sp, #20
   1b490:	af00      	add	r7, sp, #0
   1b492:	0002      	movs	r2, r0
   1b494:	1dfb      	adds	r3, r7, #7
   1b496:	701a      	strb	r2, [r3, #0]
   1b498:	1d3b      	adds	r3, r7, #4
   1b49a:	1c0a      	adds	r2, r1, #0
   1b49c:	801a      	strh	r2, [r3, #0]
	struct rmsVoltage *p1;
	if(phase==PHASE_RY)
   1b49e:	1dfb      	adds	r3, r7, #7
   1b4a0:	781b      	ldrb	r3, [r3, #0]
   1b4a2:	2b00      	cmp	r3, #0
   1b4a4:	d102      	bne.n	1b4ac <filterVoltage+0x20>
	{
		p1 = &struct_rmsRY;
   1b4a6:	4b29      	ldr	r3, [pc, #164]	; (1b54c <filterVoltage+0xc0>)
   1b4a8:	60fb      	str	r3, [r7, #12]
   1b4aa:	e00c      	b.n	1b4c6 <filterVoltage+0x3a>
	}
	else if(phase==PHASE_YB)
   1b4ac:	1dfb      	adds	r3, r7, #7
   1b4ae:	781b      	ldrb	r3, [r3, #0]
   1b4b0:	2b01      	cmp	r3, #1
   1b4b2:	d102      	bne.n	1b4ba <filterVoltage+0x2e>
	{
		p1 = &struct_rmsYB;
   1b4b4:	4b26      	ldr	r3, [pc, #152]	; (1b550 <filterVoltage+0xc4>)
   1b4b6:	60fb      	str	r3, [r7, #12]
   1b4b8:	e005      	b.n	1b4c6 <filterVoltage+0x3a>
	}
	else if(phase==PHASE_BR)
   1b4ba:	1dfb      	adds	r3, r7, #7
   1b4bc:	781b      	ldrb	r3, [r3, #0]
   1b4be:	2b02      	cmp	r3, #2
   1b4c0:	d101      	bne.n	1b4c6 <filterVoltage+0x3a>
	{
		p1 = &struct_rmsBR;
   1b4c2:	4b24      	ldr	r3, [pc, #144]	; (1b554 <filterVoltage+0xc8>)
   1b4c4:	60fb      	str	r3, [r7, #12]
	}
	
	p1->voltRange[p1->index%NO_RMS_VOLTAGE_READINGS]=voltReading;
   1b4c6:	68fb      	ldr	r3, [r7, #12]
   1b4c8:	7b1a      	ldrb	r2, [r3, #12]
   1b4ca:	4b23      	ldr	r3, [pc, #140]	; (1b558 <filterVoltage+0xcc>)
   1b4cc:	2105      	movs	r1, #5
   1b4ce:	0010      	movs	r0, r2
   1b4d0:	4798      	blx	r3
   1b4d2:	000b      	movs	r3, r1
   1b4d4:	b2db      	uxtb	r3, r3
   1b4d6:	001a      	movs	r2, r3
   1b4d8:	68fb      	ldr	r3, [r7, #12]
   1b4da:	0052      	lsls	r2, r2, #1
   1b4dc:	1d39      	adds	r1, r7, #4
   1b4de:	8809      	ldrh	r1, [r1, #0]
   1b4e0:	52d1      	strh	r1, [r2, r3]
	p1->index = ((p1->index) + 1 )%NO_RMS_VOLTAGE_READINGS;
   1b4e2:	68fb      	ldr	r3, [r7, #12]
   1b4e4:	7b1b      	ldrb	r3, [r3, #12]
   1b4e6:	1c5a      	adds	r2, r3, #1
   1b4e8:	4b1c      	ldr	r3, [pc, #112]	; (1b55c <filterVoltage+0xd0>)
   1b4ea:	2105      	movs	r1, #5
   1b4ec:	0010      	movs	r0, r2
   1b4ee:	4798      	blx	r3
   1b4f0:	000b      	movs	r3, r1
   1b4f2:	b2da      	uxtb	r2, r3
   1b4f4:	68fb      	ldr	r3, [r7, #12]
   1b4f6:	731a      	strb	r2, [r3, #12]
	
	updateRMSValues(p1);
   1b4f8:	68fb      	ldr	r3, [r7, #12]
   1b4fa:	0018      	movs	r0, r3
   1b4fc:	4b18      	ldr	r3, [pc, #96]	; (1b560 <filterVoltage+0xd4>)
   1b4fe:	4798      	blx	r3
	
	//if(voltReading > p1->rmsVoltage)
	{
		if(p1->hasZeroReading)
   1b500:	68fb      	ldr	r3, [r7, #12]
   1b502:	7b5b      	ldrb	r3, [r3, #13]
   1b504:	2b00      	cmp	r3, #0
   1b506:	d002      	beq.n	1b50e <filterVoltage+0x82>
		{
			return voltReading;
   1b508:	1d3b      	adds	r3, r7, #4
   1b50a:	881b      	ldrh	r3, [r3, #0]
   1b50c:	e019      	b.n	1b542 <filterVoltage+0xb6>
		
		//if ((voltReading - p1->rmsVoltage)>(p1->rmsVoltage * 6/100))
		//{
		//return p1->rmsVoltage;
		//}
		if((p1->rmsVoltage - voltReading)<(p1->rmsVoltage * 40/100))
   1b50e:	68fb      	ldr	r3, [r7, #12]
   1b510:	895b      	ldrh	r3, [r3, #10]
   1b512:	001a      	movs	r2, r3
   1b514:	1d3b      	adds	r3, r7, #4
   1b516:	881b      	ldrh	r3, [r3, #0]
   1b518:	1ad4      	subs	r4, r2, r3
   1b51a:	68fb      	ldr	r3, [r7, #12]
   1b51c:	895b      	ldrh	r3, [r3, #10]
   1b51e:	001a      	movs	r2, r3
   1b520:	0013      	movs	r3, r2
   1b522:	009b      	lsls	r3, r3, #2
   1b524:	189b      	adds	r3, r3, r2
   1b526:	00db      	lsls	r3, r3, #3
   1b528:	001a      	movs	r2, r3
   1b52a:	4b0e      	ldr	r3, [pc, #56]	; (1b564 <filterVoltage+0xd8>)
   1b52c:	2164      	movs	r1, #100	; 0x64
   1b52e:	0010      	movs	r0, r2
   1b530:	4798      	blx	r3
   1b532:	0003      	movs	r3, r0
   1b534:	429c      	cmp	r4, r3
   1b536:	da02      	bge.n	1b53e <filterVoltage+0xb2>
		{
			return p1->rmsVoltage;
   1b538:	68fb      	ldr	r3, [r7, #12]
   1b53a:	895b      	ldrh	r3, [r3, #10]
   1b53c:	e001      	b.n	1b542 <filterVoltage+0xb6>
		}
		else
		{
			return voltReading;
   1b53e:	1d3b      	adds	r3, r7, #4
   1b540:	881b      	ldrh	r3, [r3, #0]
		}
	}
	
	return voltReading;
}
   1b542:	0018      	movs	r0, r3
   1b544:	46bd      	mov	sp, r7
   1b546:	b005      	add	sp, #20
   1b548:	bd90      	pop	{r4, r7, pc}
   1b54a:	46c0      	nop			; (mov r8, r8)
   1b54c:	200009b4 	.word	0x200009b4
   1b550:	20000930 	.word	0x20000930
   1b554:	200009e4 	.word	0x200009e4
   1b558:	00026eed 	.word	0x00026eed
   1b55c:	000270c1 	.word	0x000270c1
   1b560:	0001b361 	.word	0x0001b361
   1b564:	00026ef5 	.word	0x00026ef5

0001b568 <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
   1b568:	b590      	push	{r4, r7, lr}
   1b56a:	b085      	sub	sp, #20
   1b56c:	af00      	add	r7, sp, #0
	
	
	if(invalidateVoltageReadings)
   1b56e:	4b69      	ldr	r3, [pc, #420]	; (1b714 <detect_Three_Phase_Voltage+0x1ac>)
   1b570:	781b      	ldrb	r3, [r3, #0]
   1b572:	2b00      	cmp	r3, #0
   1b574:	d00d      	beq.n	1b592 <detect_Three_Phase_Voltage+0x2a>
	{
		if(xTaskGetTickCount()-invalidateVoltageReadingTime>4000)
   1b576:	4b68      	ldr	r3, [pc, #416]	; (1b718 <detect_Three_Phase_Voltage+0x1b0>)
   1b578:	4798      	blx	r3
   1b57a:	0002      	movs	r2, r0
   1b57c:	4b67      	ldr	r3, [pc, #412]	; (1b71c <detect_Three_Phase_Voltage+0x1b4>)
   1b57e:	681b      	ldr	r3, [r3, #0]
   1b580:	1ad2      	subs	r2, r2, r3
   1b582:	23fa      	movs	r3, #250	; 0xfa
   1b584:	011b      	lsls	r3, r3, #4
   1b586:	429a      	cmp	r2, r3
   1b588:	d800      	bhi.n	1b58c <detect_Three_Phase_Voltage+0x24>
   1b58a:	e0bf      	b.n	1b70c <detect_Three_Phase_Voltage+0x1a4>
		{
			invalidateVoltageReadings=false;
   1b58c:	4b61      	ldr	r3, [pc, #388]	; (1b714 <detect_Three_Phase_Voltage+0x1ac>)
   1b58e:	2200      	movs	r2, #0
   1b590:	701a      	strb	r2, [r3, #0]
		{
			return;
		}
	}
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1b592:	4b63      	ldr	r3, [pc, #396]	; (1b720 <detect_Three_Phase_Voltage+0x1b8>)
   1b594:	681a      	ldr	r2, [r3, #0]
   1b596:	2301      	movs	r3, #1
   1b598:	425b      	negs	r3, r3
   1b59a:	0019      	movs	r1, r3
   1b59c:	0010      	movs	r0, r2
   1b59e:	4b61      	ldr	r3, [pc, #388]	; (1b724 <detect_Three_Phase_Voltage+0x1bc>)
   1b5a0:	4798      	blx	r3
   1b5a2:	0003      	movs	r3, r0
   1b5a4:	2b01      	cmp	r3, #1
   1b5a6:	d000      	beq.n	1b5aa <detect_Three_Phase_Voltage+0x42>
   1b5a8:	e0b1      	b.n	1b70e <detect_Three_Phase_Voltage+0x1a6>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19,Analog_Parameter_Struct.PhaseRY_Voltage);
   1b5aa:	4b5f      	ldr	r3, [pc, #380]	; (1b728 <detect_Three_Phase_Voltage+0x1c0>)
   1b5ac:	681b      	ldr	r3, [r3, #0]
   1b5ae:	0019      	movs	r1, r3
   1b5b0:	2013      	movs	r0, #19
   1b5b2:	4b5e      	ldr	r3, [pc, #376]	; (1b72c <detect_Three_Phase_Voltage+0x1c4>)
   1b5b4:	4798      	blx	r3
   1b5b6:	0003      	movs	r3, r0
   1b5b8:	60fb      	str	r3, [r7, #12]
		if(invalidateVoltageReadings)
   1b5ba:	4b56      	ldr	r3, [pc, #344]	; (1b714 <detect_Three_Phase_Voltage+0x1ac>)
   1b5bc:	781b      	ldrb	r3, [r3, #0]
   1b5be:	2b00      	cmp	r3, #0
   1b5c0:	d007      	beq.n	1b5d2 <detect_Three_Phase_Voltage+0x6a>
		{
			xSemaphoreGive(xADC_Semaphore);
   1b5c2:	4b57      	ldr	r3, [pc, #348]	; (1b720 <detect_Three_Phase_Voltage+0x1b8>)
   1b5c4:	6818      	ldr	r0, [r3, #0]
   1b5c6:	2300      	movs	r3, #0
   1b5c8:	2200      	movs	r2, #0
   1b5ca:	2100      	movs	r1, #0
   1b5cc:	4c58      	ldr	r4, [pc, #352]	; (1b730 <detect_Three_Phase_Voltage+0x1c8>)
   1b5ce:	47a0      	blx	r4
			return;
   1b5d0:	e09d      	b.n	1b70e <detect_Three_Phase_Voltage+0x1a6>
		}
		adcRY = (adcRY-10);
   1b5d2:	68fb      	ldr	r3, [r7, #12]
   1b5d4:	3b0a      	subs	r3, #10
   1b5d6:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
   1b5d8:	68fb      	ldr	r3, [r7, #12]
   1b5da:	2b00      	cmp	r3, #0
   1b5dc:	da02      	bge.n	1b5e4 <detect_Three_Phase_Voltage+0x7c>
		{
			adcRY = 0;
   1b5de:	2300      	movs	r3, #0
   1b5e0:	60fb      	str	r3, [r7, #12]
   1b5e2:	e010      	b.n	1b606 <detect_Three_Phase_Voltage+0x9e>
		}
		else
		{
			adcRY = (((adcRY-10)*660)/1000);
   1b5e4:	68fb      	ldr	r3, [r7, #12]
   1b5e6:	3b0a      	subs	r3, #10
   1b5e8:	22a5      	movs	r2, #165	; 0xa5
   1b5ea:	0092      	lsls	r2, r2, #2
   1b5ec:	435a      	muls	r2, r3
   1b5ee:	0010      	movs	r0, r2
   1b5f0:	4b50      	ldr	r3, [pc, #320]	; (1b734 <detect_Three_Phase_Voltage+0x1cc>)
   1b5f2:	22fa      	movs	r2, #250	; 0xfa
   1b5f4:	0091      	lsls	r1, r2, #2
   1b5f6:	4798      	blx	r3
   1b5f8:	0003      	movs	r3, r0
   1b5fa:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
   1b5fc:	68fb      	ldr	r3, [r7, #12]
   1b5fe:	2b00      	cmp	r3, #0
   1b600:	da01      	bge.n	1b606 <detect_Three_Phase_Voltage+0x9e>
			{
				adcRY = 0;
   1b602:	2300      	movs	r3, #0
   1b604:	60fb      	str	r3, [r7, #12]
			}
		}
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18,Analog_Parameter_Struct.PhaseYB_Voltage);
   1b606:	4b48      	ldr	r3, [pc, #288]	; (1b728 <detect_Three_Phase_Voltage+0x1c0>)
   1b608:	685b      	ldr	r3, [r3, #4]
   1b60a:	0019      	movs	r1, r3
   1b60c:	2012      	movs	r0, #18
   1b60e:	4b47      	ldr	r3, [pc, #284]	; (1b72c <detect_Three_Phase_Voltage+0x1c4>)
   1b610:	4798      	blx	r3
   1b612:	0003      	movs	r3, r0
   1b614:	60bb      	str	r3, [r7, #8]
		if(invalidateVoltageReadings)
   1b616:	4b3f      	ldr	r3, [pc, #252]	; (1b714 <detect_Three_Phase_Voltage+0x1ac>)
   1b618:	781b      	ldrb	r3, [r3, #0]
   1b61a:	2b00      	cmp	r3, #0
   1b61c:	d007      	beq.n	1b62e <detect_Three_Phase_Voltage+0xc6>
		{
			xSemaphoreGive(xADC_Semaphore);
   1b61e:	4b40      	ldr	r3, [pc, #256]	; (1b720 <detect_Three_Phase_Voltage+0x1b8>)
   1b620:	6818      	ldr	r0, [r3, #0]
   1b622:	2300      	movs	r3, #0
   1b624:	2200      	movs	r2, #0
   1b626:	2100      	movs	r1, #0
   1b628:	4c41      	ldr	r4, [pc, #260]	; (1b730 <detect_Three_Phase_Voltage+0x1c8>)
   1b62a:	47a0      	blx	r4
			return;
   1b62c:	e06f      	b.n	1b70e <detect_Three_Phase_Voltage+0x1a6>
		}
		adcYB = (adcYB-10);
   1b62e:	68bb      	ldr	r3, [r7, #8]
   1b630:	3b0a      	subs	r3, #10
   1b632:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
   1b634:	68bb      	ldr	r3, [r7, #8]
   1b636:	2b00      	cmp	r3, #0
   1b638:	da02      	bge.n	1b640 <detect_Three_Phase_Voltage+0xd8>
		{
			adcYB = 0;
   1b63a:	2300      	movs	r3, #0
   1b63c:	60bb      	str	r3, [r7, #8]
   1b63e:	e010      	b.n	1b662 <detect_Three_Phase_Voltage+0xfa>
		}
		else
		{
			adcYB = (((adcYB-10)*660)/1000);
   1b640:	68bb      	ldr	r3, [r7, #8]
   1b642:	3b0a      	subs	r3, #10
   1b644:	22a5      	movs	r2, #165	; 0xa5
   1b646:	0092      	lsls	r2, r2, #2
   1b648:	435a      	muls	r2, r3
   1b64a:	0010      	movs	r0, r2
   1b64c:	4b39      	ldr	r3, [pc, #228]	; (1b734 <detect_Three_Phase_Voltage+0x1cc>)
   1b64e:	22fa      	movs	r2, #250	; 0xfa
   1b650:	0091      	lsls	r1, r2, #2
   1b652:	4798      	blx	r3
   1b654:	0003      	movs	r3, r0
   1b656:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
   1b658:	68bb      	ldr	r3, [r7, #8]
   1b65a:	2b00      	cmp	r3, #0
   1b65c:	da01      	bge.n	1b662 <detect_Three_Phase_Voltage+0xfa>
			{
				adcYB = 0;
   1b65e:	2300      	movs	r3, #0
   1b660:	60bb      	str	r3, [r7, #8]
			}
		}

		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17,Analog_Parameter_Struct.PhaseBR_Voltage);
   1b662:	4b31      	ldr	r3, [pc, #196]	; (1b728 <detect_Three_Phase_Voltage+0x1c0>)
   1b664:	689b      	ldr	r3, [r3, #8]
   1b666:	0019      	movs	r1, r3
   1b668:	2011      	movs	r0, #17
   1b66a:	4b30      	ldr	r3, [pc, #192]	; (1b72c <detect_Three_Phase_Voltage+0x1c4>)
   1b66c:	4798      	blx	r3
   1b66e:	0003      	movs	r3, r0
   1b670:	607b      	str	r3, [r7, #4]
		if(invalidateVoltageReadings)
   1b672:	4b28      	ldr	r3, [pc, #160]	; (1b714 <detect_Three_Phase_Voltage+0x1ac>)
   1b674:	781b      	ldrb	r3, [r3, #0]
   1b676:	2b00      	cmp	r3, #0
   1b678:	d007      	beq.n	1b68a <detect_Three_Phase_Voltage+0x122>
		{
			xSemaphoreGive(xADC_Semaphore);
   1b67a:	4b29      	ldr	r3, [pc, #164]	; (1b720 <detect_Three_Phase_Voltage+0x1b8>)
   1b67c:	6818      	ldr	r0, [r3, #0]
   1b67e:	2300      	movs	r3, #0
   1b680:	2200      	movs	r2, #0
   1b682:	2100      	movs	r1, #0
   1b684:	4c2a      	ldr	r4, [pc, #168]	; (1b730 <detect_Three_Phase_Voltage+0x1c8>)
   1b686:	47a0      	blx	r4
			return;
   1b688:	e041      	b.n	1b70e <detect_Three_Phase_Voltage+0x1a6>
		}
		adcBR = (adcBR-12);
   1b68a:	687b      	ldr	r3, [r7, #4]
   1b68c:	3b0c      	subs	r3, #12
   1b68e:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
   1b690:	687b      	ldr	r3, [r7, #4]
   1b692:	2b00      	cmp	r3, #0
   1b694:	da02      	bge.n	1b69c <detect_Three_Phase_Voltage+0x134>
		{
			adcBR = 0;
   1b696:	2300      	movs	r3, #0
   1b698:	607b      	str	r3, [r7, #4]
   1b69a:	e00f      	b.n	1b6bc <detect_Three_Phase_Voltage+0x154>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
   1b69c:	687b      	ldr	r3, [r7, #4]
   1b69e:	3b0c      	subs	r3, #12
   1b6a0:	4a25      	ldr	r2, [pc, #148]	; (1b738 <detect_Three_Phase_Voltage+0x1d0>)
   1b6a2:	435a      	muls	r2, r3
   1b6a4:	0010      	movs	r0, r2
   1b6a6:	4b23      	ldr	r3, [pc, #140]	; (1b734 <detect_Three_Phase_Voltage+0x1cc>)
   1b6a8:	22fa      	movs	r2, #250	; 0xfa
   1b6aa:	0091      	lsls	r1, r2, #2
   1b6ac:	4798      	blx	r3
   1b6ae:	0003      	movs	r3, r0
   1b6b0:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
   1b6b2:	687b      	ldr	r3, [r7, #4]
   1b6b4:	2b00      	cmp	r3, #0
   1b6b6:	da01      	bge.n	1b6bc <detect_Three_Phase_Voltage+0x154>
			{
				adcBR = 0;
   1b6b8:	2300      	movs	r3, #0
   1b6ba:	607b      	str	r3, [r7, #4]
			}
		}
		
		Analog_Parameter_Struct.PhaseRY_Voltage = filterVoltage(PHASE_RY,adcRY);
   1b6bc:	68fb      	ldr	r3, [r7, #12]
   1b6be:	b29b      	uxth	r3, r3
   1b6c0:	0019      	movs	r1, r3
   1b6c2:	2000      	movs	r0, #0
   1b6c4:	4b1d      	ldr	r3, [pc, #116]	; (1b73c <detect_Three_Phase_Voltage+0x1d4>)
   1b6c6:	4798      	blx	r3
   1b6c8:	0003      	movs	r3, r0
   1b6ca:	001a      	movs	r2, r3
   1b6cc:	4b16      	ldr	r3, [pc, #88]	; (1b728 <detect_Three_Phase_Voltage+0x1c0>)
   1b6ce:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = filterVoltage(PHASE_YB,adcYB);
   1b6d0:	68bb      	ldr	r3, [r7, #8]
   1b6d2:	b29b      	uxth	r3, r3
   1b6d4:	0019      	movs	r1, r3
   1b6d6:	2001      	movs	r0, #1
   1b6d8:	4b18      	ldr	r3, [pc, #96]	; (1b73c <detect_Three_Phase_Voltage+0x1d4>)
   1b6da:	4798      	blx	r3
   1b6dc:	0003      	movs	r3, r0
   1b6de:	001a      	movs	r2, r3
   1b6e0:	4b11      	ldr	r3, [pc, #68]	; (1b728 <detect_Three_Phase_Voltage+0x1c0>)
   1b6e2:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = filterVoltage(PHASE_BR,adcBR);
   1b6e4:	687b      	ldr	r3, [r7, #4]
   1b6e6:	b29b      	uxth	r3, r3
   1b6e8:	0019      	movs	r1, r3
   1b6ea:	2002      	movs	r0, #2
   1b6ec:	4b13      	ldr	r3, [pc, #76]	; (1b73c <detect_Three_Phase_Voltage+0x1d4>)
   1b6ee:	4798      	blx	r3
   1b6f0:	0003      	movs	r3, r0
   1b6f2:	001a      	movs	r2, r3
   1b6f4:	4b0c      	ldr	r3, [pc, #48]	; (1b728 <detect_Three_Phase_Voltage+0x1c0>)
   1b6f6:	609a      	str	r2, [r3, #8]
		
		//Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
		//Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
		//Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
		
		set_Three_Phase_State_From_Voltage();
   1b6f8:	4b11      	ldr	r3, [pc, #68]	; (1b740 <detect_Three_Phase_Voltage+0x1d8>)
   1b6fa:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
   1b6fc:	4b08      	ldr	r3, [pc, #32]	; (1b720 <detect_Three_Phase_Voltage+0x1b8>)
   1b6fe:	6818      	ldr	r0, [r3, #0]
   1b700:	2300      	movs	r3, #0
   1b702:	2200      	movs	r2, #0
   1b704:	2100      	movs	r1, #0
   1b706:	4c0a      	ldr	r4, [pc, #40]	; (1b730 <detect_Three_Phase_Voltage+0x1c8>)
   1b708:	47a0      	blx	r4
   1b70a:	e000      	b.n	1b70e <detect_Three_Phase_Voltage+0x1a6>
			return;
   1b70c:	46c0      	nop			; (mov r8, r8)
	}
}
   1b70e:	46bd      	mov	sp, r7
   1b710:	b005      	add	sp, #20
   1b712:	bd90      	pop	{r4, r7, pc}
   1b714:	20000a45 	.word	0x20000a45
   1b718:	00020ccd 	.word	0x00020ccd
   1b71c:	200009a0 	.word	0x200009a0
   1b720:	20000430 	.word	0x20000430
   1b724:	00020061 	.word	0x00020061
   1b728:	200008e8 	.word	0x200008e8
   1b72c:	0001aa25 	.word	0x0001aa25
   1b730:	0001fbc1 	.word	0x0001fbc1
   1b734:	00026ef5 	.word	0x00026ef5
   1b738:	0000029e 	.word	0x0000029e
   1b73c:	0001b48d 	.word	0x0001b48d
   1b740:	0001b745 	.word	0x0001b745

0001b744 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
   1b744:	b580      	push	{r7, lr}
   1b746:	b082      	sub	sp, #8
   1b748:	af00      	add	r7, sp, #0
	
	if(startSequenceOn)
   1b74a:	4b33      	ldr	r3, [pc, #204]	; (1b818 <set_Three_Phase_State_From_Voltage+0xd4>)
   1b74c:	781b      	ldrb	r3, [r3, #0]
   1b74e:	2b00      	cmp	r3, #0
   1b750:	d15d      	bne.n	1b80e <set_Three_Phase_State_From_Voltage+0xca>
	{
		return;
	}
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
   1b752:	1dfb      	adds	r3, r7, #7
   1b754:	4a31      	ldr	r2, [pc, #196]	; (1b81c <set_Three_Phase_State_From_Voltage+0xd8>)
   1b756:	7852      	ldrb	r2, [r2, #1]
   1b758:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 80) &&
   1b75a:	4b31      	ldr	r3, [pc, #196]	; (1b820 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b75c:	681b      	ldr	r3, [r3, #0]
   1b75e:	2b4f      	cmp	r3, #79	; 0x4f
   1b760:	d80b      	bhi.n	1b77a <set_Three_Phase_State_From_Voltage+0x36>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 80) &&
   1b762:	4b2f      	ldr	r3, [pc, #188]	; (1b820 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b764:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 80) &&
   1b766:	2b4f      	cmp	r3, #79	; 0x4f
   1b768:	d807      	bhi.n	1b77a <set_Three_Phase_State_From_Voltage+0x36>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 80))				// if All phase volt, less than 40
   1b76a:	4b2d      	ldr	r3, [pc, #180]	; (1b820 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b76c:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 80) &&
   1b76e:	2b4f      	cmp	r3, #79	; 0x4f
   1b770:	d803      	bhi.n	1b77a <set_Three_Phase_State_From_Voltage+0x36>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
   1b772:	4b2a      	ldr	r3, [pc, #168]	; (1b81c <set_Three_Phase_State_From_Voltage+0xd8>)
   1b774:	2200      	movs	r2, #0
   1b776:	705a      	strb	r2, [r3, #1]
   1b778:	e02d      	b.n	1b7d6 <set_Three_Phase_State_From_Voltage+0x92>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1b77a:	4b29      	ldr	r3, [pc, #164]	; (1b820 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b77c:	681a      	ldr	r2, [r3, #0]
   1b77e:	4b28      	ldr	r3, [pc, #160]	; (1b820 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b780:	685b      	ldr	r3, [r3, #4]
   1b782:	1ad3      	subs	r3, r2, r3
   1b784:	17da      	asrs	r2, r3, #31
   1b786:	189b      	adds	r3, r3, r2
   1b788:	4053      	eors	r3, r2
   1b78a:	4a26      	ldr	r2, [pc, #152]	; (1b824 <set_Three_Phase_State_From_Voltage+0xe0>)
   1b78c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1b78e:	b292      	uxth	r2, r2
   1b790:	4293      	cmp	r3, r2
   1b792:	dc19      	bgt.n	1b7c8 <set_Three_Phase_State_From_Voltage+0x84>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1b794:	4b22      	ldr	r3, [pc, #136]	; (1b820 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b796:	685a      	ldr	r2, [r3, #4]
   1b798:	4b21      	ldr	r3, [pc, #132]	; (1b820 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b79a:	689b      	ldr	r3, [r3, #8]
   1b79c:	1ad3      	subs	r3, r2, r3
   1b79e:	17da      	asrs	r2, r3, #31
   1b7a0:	189b      	adds	r3, r3, r2
   1b7a2:	4053      	eors	r3, r2
   1b7a4:	4a1f      	ldr	r2, [pc, #124]	; (1b824 <set_Three_Phase_State_From_Voltage+0xe0>)
   1b7a6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1b7a8:	b292      	uxth	r2, r2
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1b7aa:	4293      	cmp	r3, r2
   1b7ac:	dc0c      	bgt.n	1b7c8 <set_Three_Phase_State_From_Voltage+0x84>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
   1b7ae:	4b1c      	ldr	r3, [pc, #112]	; (1b820 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b7b0:	689a      	ldr	r2, [r3, #8]
   1b7b2:	4b1b      	ldr	r3, [pc, #108]	; (1b820 <set_Three_Phase_State_From_Voltage+0xdc>)
   1b7b4:	681b      	ldr	r3, [r3, #0]
   1b7b6:	1ad3      	subs	r3, r2, r3
   1b7b8:	17da      	asrs	r2, r3, #31
   1b7ba:	189b      	adds	r3, r3, r2
   1b7bc:	4053      	eors	r3, r2
   1b7be:	4a19      	ldr	r2, [pc, #100]	; (1b824 <set_Three_Phase_State_From_Voltage+0xe0>)
   1b7c0:	8c52      	ldrh	r2, [r2, #34]	; 0x22
   1b7c2:	b292      	uxth	r2, r2
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
   1b7c4:	4293      	cmp	r3, r2
   1b7c6:	dd03      	ble.n	1b7d0 <set_Three_Phase_State_From_Voltage+0x8c>
	{
			//if((Analog_Parameter_Struct.PhaseRY_Voltage>100 && Analog_Parameter_Struct.PhaseYB_Voltage>100) ||
			//(Analog_Parameter_Struct.PhaseYB_Voltage>100 && Analog_Parameter_Struct.PhaseBR_Voltage>100) ||
			//(Analog_Parameter_Struct.PhaseBR_Voltage>100 && Analog_Parameter_Struct.PhaseRY_Voltage>100))
			//{
				structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
   1b7c8:	4b14      	ldr	r3, [pc, #80]	; (1b81c <set_Three_Phase_State_From_Voltage+0xd8>)
   1b7ca:	2202      	movs	r2, #2
   1b7cc:	705a      	strb	r2, [r3, #1]
   1b7ce:	e002      	b.n	1b7d6 <set_Three_Phase_State_From_Voltage+0x92>
				//structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
			//}
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
   1b7d0:	4b12      	ldr	r3, [pc, #72]	; (1b81c <set_Three_Phase_State_From_Voltage+0xd8>)
   1b7d2:	2203      	movs	r2, #3
   1b7d4:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
   1b7d6:	4b11      	ldr	r3, [pc, #68]	; (1b81c <set_Three_Phase_State_From_Voltage+0xd8>)
   1b7d8:	785b      	ldrb	r3, [r3, #1]
   1b7da:	b2da      	uxtb	r2, r3
   1b7dc:	4b12      	ldr	r3, [pc, #72]	; (1b828 <set_Three_Phase_State_From_Voltage+0xe4>)
   1b7de:	781b      	ldrb	r3, [r3, #0]
   1b7e0:	b2db      	uxtb	r3, r3
   1b7e2:	429a      	cmp	r2, r3
   1b7e4:	d014      	beq.n	1b810 <set_Three_Phase_State_From_Voltage+0xcc>
	{
		if(!motorRelatedVoltageBypassOn)
   1b7e6:	4b11      	ldr	r3, [pc, #68]	; (1b82c <set_Three_Phase_State_From_Voltage+0xe8>)
   1b7e8:	781b      	ldrb	r3, [r3, #0]
   1b7ea:	2201      	movs	r2, #1
   1b7ec:	4053      	eors	r3, r2
   1b7ee:	b2db      	uxtb	r3, r3
   1b7f0:	2b00      	cmp	r3, #0
   1b7f2:	d00d      	beq.n	1b810 <set_Three_Phase_State_From_Voltage+0xcc>
		{
			last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
   1b7f4:	4b0e      	ldr	r3, [pc, #56]	; (1b830 <set_Three_Phase_State_From_Voltage+0xec>)
   1b7f6:	1dfa      	adds	r2, r7, #7
   1b7f8:	7812      	ldrb	r2, [r2, #0]
   1b7fa:	701a      	strb	r2, [r3, #0]
			current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
   1b7fc:	4b07      	ldr	r3, [pc, #28]	; (1b81c <set_Three_Phase_State_From_Voltage+0xd8>)
   1b7fe:	785b      	ldrb	r3, [r3, #1]
   1b800:	b2da      	uxtb	r2, r3
   1b802:	4b09      	ldr	r3, [pc, #36]	; (1b828 <set_Three_Phase_State_From_Voltage+0xe4>)
   1b804:	701a      	strb	r2, [r3, #0]
			eventOccured = true;
   1b806:	4b0b      	ldr	r3, [pc, #44]	; (1b834 <set_Three_Phase_State_From_Voltage+0xf0>)
   1b808:	2201      	movs	r2, #1
   1b80a:	701a      	strb	r2, [r3, #0]
   1b80c:	e000      	b.n	1b810 <set_Three_Phase_State_From_Voltage+0xcc>
		return;
   1b80e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1b810:	46bd      	mov	sp, r7
   1b812:	b002      	add	sp, #8
   1b814:	bd80      	pop	{r7, pc}
   1b816:	46c0      	nop			; (mov r8, r8)
   1b818:	20000999 	.word	0x20000999
   1b81c:	20000948 	.word	0x20000948
   1b820:	200008e8 	.word	0x200008e8
   1b824:	20000854 	.word	0x20000854
   1b828:	20000a46 	.word	0x20000a46
   1b82c:	20000973 	.word	0x20000973
   1b830:	2000092b 	.word	0x2000092b
   1b834:	2000092e 	.word	0x2000092e

0001b838 <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
   1b838:	b590      	push	{r4, r7, lr}
   1b83a:	b083      	sub	sp, #12
   1b83c:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
   1b83e:	4b32      	ldr	r3, [pc, #200]	; (1b908 <detect_Motor_Current+0xd0>)
   1b840:	681a      	ldr	r2, [r3, #0]
   1b842:	2301      	movs	r3, #1
   1b844:	425b      	negs	r3, r3
   1b846:	0019      	movs	r1, r3
   1b848:	0010      	movs	r0, r2
   1b84a:	4b30      	ldr	r3, [pc, #192]	; (1b90c <detect_Motor_Current+0xd4>)
   1b84c:	4798      	blx	r3
   1b84e:	0003      	movs	r3, r0
   1b850:	2b01      	cmp	r3, #1
   1b852:	d154      	bne.n	1b8fe <detect_Motor_Current+0xc6>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
   1b854:	21c8      	movs	r1, #200	; 0xc8
   1b856:	2010      	movs	r0, #16
   1b858:	4b2d      	ldr	r3, [pc, #180]	; (1b910 <detect_Motor_Current+0xd8>)
   1b85a:	4798      	blx	r3
   1b85c:	0003      	movs	r3, r0
   1b85e:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
   1b860:	687b      	ldr	r3, [r7, #4]
   1b862:	2b0f      	cmp	r3, #15
   1b864:	d903      	bls.n	1b86e <detect_Motor_Current+0x36>
		{
			ADCcurrent = ADCcurrent - 15;
   1b866:	687b      	ldr	r3, [r7, #4]
   1b868:	3b0f      	subs	r3, #15
   1b86a:	607b      	str	r3, [r7, #4]
   1b86c:	e004      	b.n	1b878 <detect_Motor_Current+0x40>
		}
		else if(ADCcurrent <= 15)
   1b86e:	687b      	ldr	r3, [r7, #4]
   1b870:	2b0f      	cmp	r3, #15
   1b872:	d801      	bhi.n	1b878 <detect_Motor_Current+0x40>
		{
			ADCcurrent = 0;
   1b874:	2300      	movs	r3, #0
   1b876:	607b      	str	r3, [r7, #4]
		}
		
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
   1b878:	4b26      	ldr	r3, [pc, #152]	; (1b914 <detect_Motor_Current+0xdc>)
   1b87a:	687a      	ldr	r2, [r7, #4]
   1b87c:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
   1b87e:	687b      	ldr	r3, [r7, #4]
   1b880:	4a25      	ldr	r2, [pc, #148]	; (1b918 <detect_Motor_Current+0xe0>)
   1b882:	435a      	muls	r2, r3
   1b884:	0010      	movs	r0, r2
   1b886:	4b25      	ldr	r3, [pc, #148]	; (1b91c <detect_Motor_Current+0xe4>)
   1b888:	22fa      	movs	r2, #250	; 0xfa
   1b88a:	0091      	lsls	r1, r2, #2
   1b88c:	4798      	blx	r3
   1b88e:	0003      	movs	r3, r0
   1b890:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
   1b892:	687b      	ldr	r3, [r7, #4]
   1b894:	4a22      	ldr	r2, [pc, #136]	; (1b920 <detect_Motor_Current+0xe8>)
   1b896:	4293      	cmp	r3, r2
   1b898:	d810      	bhi.n	1b8bc <detect_Motor_Current+0x84>
   1b89a:	687b      	ldr	r3, [r7, #4]
   1b89c:	2b00      	cmp	r3, #0
   1b89e:	d00d      	beq.n	1b8bc <detect_Motor_Current+0x84>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
   1b8a0:	687b      	ldr	r3, [r7, #4]
   1b8a2:	4a20      	ldr	r2, [pc, #128]	; (1b924 <detect_Motor_Current+0xec>)
   1b8a4:	4353      	muls	r3, r2
   1b8a6:	4a20      	ldr	r2, [pc, #128]	; (1b928 <detect_Motor_Current+0xf0>)
   1b8a8:	1898      	adds	r0, r3, r2
   1b8aa:	4b1c      	ldr	r3, [pc, #112]	; (1b91c <detect_Motor_Current+0xe4>)
   1b8ac:	22fa      	movs	r2, #250	; 0xfa
   1b8ae:	0091      	lsls	r1, r2, #2
   1b8b0:	4798      	blx	r3
   1b8b2:	0003      	movs	r3, r0
   1b8b4:	001a      	movs	r2, r3
   1b8b6:	687b      	ldr	r3, [r7, #4]
   1b8b8:	189b      	adds	r3, r3, r2
   1b8ba:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
   1b8bc:	4b15      	ldr	r3, [pc, #84]	; (1b914 <detect_Motor_Current+0xdc>)
   1b8be:	687a      	ldr	r2, [r7, #4]
   1b8c0:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
   1b8c2:	687a      	ldr	r2, [r7, #4]
   1b8c4:	4b15      	ldr	r3, [pc, #84]	; (1b91c <detect_Motor_Current+0xe4>)
   1b8c6:	2164      	movs	r1, #100	; 0x64
   1b8c8:	0010      	movs	r0, r2
   1b8ca:	4798      	blx	r3
   1b8cc:	0003      	movs	r3, r0
   1b8ce:	b29a      	uxth	r2, r3
   1b8d0:	4b10      	ldr	r3, [pc, #64]	; (1b914 <detect_Motor_Current+0xdc>)
   1b8d2:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
   1b8d4:	687a      	ldr	r2, [r7, #4]
   1b8d6:	4b15      	ldr	r3, [pc, #84]	; (1b92c <detect_Motor_Current+0xf4>)
   1b8d8:	2164      	movs	r1, #100	; 0x64
   1b8da:	0010      	movs	r0, r2
   1b8dc:	4798      	blx	r3
   1b8de:	000b      	movs	r3, r1
   1b8e0:	b29a      	uxth	r2, r3
   1b8e2:	4b0c      	ldr	r3, [pc, #48]	; (1b914 <detect_Motor_Current+0xdc>)
   1b8e4:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
   1b8e6:	4b12      	ldr	r3, [pc, #72]	; (1b930 <detect_Motor_Current+0xf8>)
   1b8e8:	2200      	movs	r2, #0
   1b8ea:	701a      	strb	r2, [r3, #0]
		calcPowerConsumption();
   1b8ec:	4b11      	ldr	r3, [pc, #68]	; (1b934 <detect_Motor_Current+0xfc>)
   1b8ee:	4798      	blx	r3
		
		xSemaphoreGive(xADC_Semaphore);
   1b8f0:	4b05      	ldr	r3, [pc, #20]	; (1b908 <detect_Motor_Current+0xd0>)
   1b8f2:	6818      	ldr	r0, [r3, #0]
   1b8f4:	2300      	movs	r3, #0
   1b8f6:	2200      	movs	r2, #0
   1b8f8:	2100      	movs	r1, #0
   1b8fa:	4c0f      	ldr	r4, [pc, #60]	; (1b938 <detect_Motor_Current+0x100>)
   1b8fc:	47a0      	blx	r4
	}
}
   1b8fe:	46c0      	nop			; (mov r8, r8)
   1b900:	46bd      	mov	sp, r7
   1b902:	b003      	add	sp, #12
   1b904:	bd90      	pop	{r4, r7, pc}
   1b906:	46c0      	nop			; (mov r8, r8)
   1b908:	20000430 	.word	0x20000430
   1b90c:	00020061 	.word	0x00020061
   1b910:	0001a969 	.word	0x0001a969
   1b914:	200008e8 	.word	0x200008e8
   1b918:	00000d61 	.word	0x00000d61
   1b91c:	00026de1 	.word	0x00026de1
   1b920:	000004af 	.word	0x000004af
   1b924:	fffffef0 	.word	0xfffffef0
   1b928:	0004fb00 	.word	0x0004fb00
   1b92c:	00026eed 	.word	0x00026eed
   1b930:	20000443 	.word	0x20000443
   1b934:	0001b93d 	.word	0x0001b93d
   1b938:	0001fbc1 	.word	0x0001fbc1

0001b93c <calcPowerConsumption>:

/************************************************************************/
/* To Calculate Power Consumption of Motor                              */
/************************************************************************/
void calcPowerConsumption(void)
{
   1b93c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b93e:	b085      	sub	sp, #20
   1b940:	af00      	add	r7, sp, #0
	uint16_t avgVotlage = Analog_Parameter_Struct.PhaseRY_Voltage + Analog_Parameter_Struct.PhaseYB_Voltage + Analog_Parameter_Struct.PhaseBR_Voltage;
   1b942:	4b37      	ldr	r3, [pc, #220]	; (1ba20 <calcPowerConsumption+0xe4>)
   1b944:	681b      	ldr	r3, [r3, #0]
   1b946:	b29a      	uxth	r2, r3
   1b948:	4b35      	ldr	r3, [pc, #212]	; (1ba20 <calcPowerConsumption+0xe4>)
   1b94a:	685b      	ldr	r3, [r3, #4]
   1b94c:	b29b      	uxth	r3, r3
   1b94e:	18d3      	adds	r3, r2, r3
   1b950:	b299      	uxth	r1, r3
   1b952:	4b33      	ldr	r3, [pc, #204]	; (1ba20 <calcPowerConsumption+0xe4>)
   1b954:	689b      	ldr	r3, [r3, #8]
   1b956:	b29a      	uxth	r2, r3
   1b958:	230e      	movs	r3, #14
   1b95a:	18fb      	adds	r3, r7, r3
   1b95c:	188a      	adds	r2, r1, r2
   1b95e:	801a      	strh	r2, [r3, #0]
	
	double result = (avgVotlage/3.0) * (Analog_Parameter_Struct.Motor_Current/100.0);
   1b960:	230e      	movs	r3, #14
   1b962:	18fb      	adds	r3, r7, r3
   1b964:	881a      	ldrh	r2, [r3, #0]
   1b966:	4b2f      	ldr	r3, [pc, #188]	; (1ba24 <calcPowerConsumption+0xe8>)
   1b968:	0010      	movs	r0, r2
   1b96a:	4798      	blx	r3
   1b96c:	4c2e      	ldr	r4, [pc, #184]	; (1ba28 <calcPowerConsumption+0xec>)
   1b96e:	2200      	movs	r2, #0
   1b970:	4b2e      	ldr	r3, [pc, #184]	; (1ba2c <calcPowerConsumption+0xf0>)
   1b972:	47a0      	blx	r4
   1b974:	0003      	movs	r3, r0
   1b976:	000c      	movs	r4, r1
   1b978:	001d      	movs	r5, r3
   1b97a:	0026      	movs	r6, r4
   1b97c:	4b28      	ldr	r3, [pc, #160]	; (1ba20 <calcPowerConsumption+0xe4>)
   1b97e:	691a      	ldr	r2, [r3, #16]
   1b980:	4b2b      	ldr	r3, [pc, #172]	; (1ba30 <calcPowerConsumption+0xf4>)
   1b982:	0010      	movs	r0, r2
   1b984:	4798      	blx	r3
   1b986:	4c28      	ldr	r4, [pc, #160]	; (1ba28 <calcPowerConsumption+0xec>)
   1b988:	2200      	movs	r2, #0
   1b98a:	4b2a      	ldr	r3, [pc, #168]	; (1ba34 <calcPowerConsumption+0xf8>)
   1b98c:	47a0      	blx	r4
   1b98e:	0003      	movs	r3, r0
   1b990:	000c      	movs	r4, r1
   1b992:	001a      	movs	r2, r3
   1b994:	0023      	movs	r3, r4
   1b996:	4c28      	ldr	r4, [pc, #160]	; (1ba38 <calcPowerConsumption+0xfc>)
   1b998:	0028      	movs	r0, r5
   1b99a:	0031      	movs	r1, r6
   1b99c:	47a0      	blx	r4
   1b99e:	0003      	movs	r3, r0
   1b9a0:	000c      	movs	r4, r1
   1b9a2:	603b      	str	r3, [r7, #0]
   1b9a4:	607c      	str	r4, [r7, #4]
	result = sqrt(3) * result * 85.0 / 100.0;
   1b9a6:	4c24      	ldr	r4, [pc, #144]	; (1ba38 <calcPowerConsumption+0xfc>)
   1b9a8:	4a24      	ldr	r2, [pc, #144]	; (1ba3c <calcPowerConsumption+0x100>)
   1b9aa:	4b25      	ldr	r3, [pc, #148]	; (1ba40 <calcPowerConsumption+0x104>)
   1b9ac:	6838      	ldr	r0, [r7, #0]
   1b9ae:	6879      	ldr	r1, [r7, #4]
   1b9b0:	47a0      	blx	r4
   1b9b2:	0003      	movs	r3, r0
   1b9b4:	000c      	movs	r4, r1
   1b9b6:	0018      	movs	r0, r3
   1b9b8:	0021      	movs	r1, r4
   1b9ba:	4c1f      	ldr	r4, [pc, #124]	; (1ba38 <calcPowerConsumption+0xfc>)
   1b9bc:	2200      	movs	r2, #0
   1b9be:	4b21      	ldr	r3, [pc, #132]	; (1ba44 <calcPowerConsumption+0x108>)
   1b9c0:	47a0      	blx	r4
   1b9c2:	0003      	movs	r3, r0
   1b9c4:	000c      	movs	r4, r1
   1b9c6:	0018      	movs	r0, r3
   1b9c8:	0021      	movs	r1, r4
   1b9ca:	4c17      	ldr	r4, [pc, #92]	; (1ba28 <calcPowerConsumption+0xec>)
   1b9cc:	2200      	movs	r2, #0
   1b9ce:	4b19      	ldr	r3, [pc, #100]	; (1ba34 <calcPowerConsumption+0xf8>)
   1b9d0:	47a0      	blx	r4
   1b9d2:	0003      	movs	r3, r0
   1b9d4:	000c      	movs	r4, r1
   1b9d6:	603b      	str	r3, [r7, #0]
   1b9d8:	607c      	str	r4, [r7, #4]

	Analog_Parameter_Struct.Motor_Power = (uint32_t) result;
   1b9da:	4b1b      	ldr	r3, [pc, #108]	; (1ba48 <calcPowerConsumption+0x10c>)
   1b9dc:	6838      	ldr	r0, [r7, #0]
   1b9de:	6879      	ldr	r1, [r7, #4]
   1b9e0:	4798      	blx	r3
   1b9e2:	0002      	movs	r2, r0
   1b9e4:	4b0e      	ldr	r3, [pc, #56]	; (1ba20 <calcPowerConsumption+0xe4>)
   1b9e6:	621a      	str	r2, [r3, #32]
	Analog_Parameter_Struct.Motor_Power_IntPart = (uint32_t) result / 1000;
   1b9e8:	4b17      	ldr	r3, [pc, #92]	; (1ba48 <calcPowerConsumption+0x10c>)
   1b9ea:	6838      	ldr	r0, [r7, #0]
   1b9ec:	6879      	ldr	r1, [r7, #4]
   1b9ee:	4798      	blx	r3
   1b9f0:	4b16      	ldr	r3, [pc, #88]	; (1ba4c <calcPowerConsumption+0x110>)
   1b9f2:	22fa      	movs	r2, #250	; 0xfa
   1b9f4:	0091      	lsls	r1, r2, #2
   1b9f6:	4798      	blx	r3
   1b9f8:	0003      	movs	r3, r0
   1b9fa:	b29a      	uxth	r2, r3
   1b9fc:	4b08      	ldr	r3, [pc, #32]	; (1ba20 <calcPowerConsumption+0xe4>)
   1b9fe:	849a      	strh	r2, [r3, #36]	; 0x24
	Analog_Parameter_Struct.Motor_Power_DecPart =  (uint32_t) result % 1000;
   1ba00:	4b11      	ldr	r3, [pc, #68]	; (1ba48 <calcPowerConsumption+0x10c>)
   1ba02:	6838      	ldr	r0, [r7, #0]
   1ba04:	6879      	ldr	r1, [r7, #4]
   1ba06:	4798      	blx	r3
   1ba08:	4b11      	ldr	r3, [pc, #68]	; (1ba50 <calcPowerConsumption+0x114>)
   1ba0a:	22fa      	movs	r2, #250	; 0xfa
   1ba0c:	0091      	lsls	r1, r2, #2
   1ba0e:	4798      	blx	r3
   1ba10:	000b      	movs	r3, r1
   1ba12:	001a      	movs	r2, r3
   1ba14:	4b02      	ldr	r3, [pc, #8]	; (1ba20 <calcPowerConsumption+0xe4>)
   1ba16:	629a      	str	r2, [r3, #40]	; 0x28
}
   1ba18:	46c0      	nop			; (mov r8, r8)
   1ba1a:	46bd      	mov	sp, r7
   1ba1c:	b005      	add	sp, #20
   1ba1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ba20:	200008e8 	.word	0x200008e8
   1ba24:	00029351 	.word	0x00029351
   1ba28:	00027f15 	.word	0x00027f15
   1ba2c:	40080000 	.word	0x40080000
   1ba30:	000293d5 	.word	0x000293d5
   1ba34:	40590000 	.word	0x40590000
   1ba38:	0002877d 	.word	0x0002877d
   1ba3c:	e8584caa 	.word	0xe8584caa
   1ba40:	3ffbb67a 	.word	0x3ffbb67a
   1ba44:	40554000 	.word	0x40554000
   1ba48:	000271dd 	.word	0x000271dd
   1ba4c:	00026de1 	.word	0x00026de1
   1ba50:	00026eed 	.word	0x00026eed

0001ba54 <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
   1ba54:	b580      	push	{r7, lr}
   1ba56:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
   1ba58:	4b04      	ldr	r3, [pc, #16]	; (1ba6c <should_Detect_New_Current+0x18>)
   1ba5a:	781b      	ldrb	r3, [r3, #0]
   1ba5c:	b2db      	uxtb	r3, r3
   1ba5e:	3b01      	subs	r3, #1
   1ba60:	425a      	negs	r2, r3
   1ba62:	4153      	adcs	r3, r2
   1ba64:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
   1ba66:	0018      	movs	r0, r3
   1ba68:	46bd      	mov	sp, r7
   1ba6a:	bd80      	pop	{r7, pc}
   1ba6c:	20000443 	.word	0x20000443

0001ba70 <getACPowerState>:

bool getACPowerState(void)
{
   1ba70:	b580      	push	{r7, lr}
   1ba72:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
   1ba74:	4b02      	ldr	r3, [pc, #8]	; (1ba80 <getACPowerState+0x10>)
   1ba76:	781b      	ldrb	r3, [r3, #0]
   1ba78:	b2db      	uxtb	r3, r3
}
   1ba7a:	0018      	movs	r0, r3
   1ba7c:	46bd      	mov	sp, r7
   1ba7e:	bd80      	pop	{r7, pc}
   1ba80:	200009c6 	.word	0x200009c6

0001ba84 <setACPowerState>:

void setACPowerState(bool state)
{
   1ba84:	b580      	push	{r7, lr}
   1ba86:	b082      	sub	sp, #8
   1ba88:	af00      	add	r7, sp, #0
   1ba8a:	0002      	movs	r2, r0
   1ba8c:	1dfb      	adds	r3, r7, #7
   1ba8e:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
   1ba90:	4b03      	ldr	r3, [pc, #12]	; (1baa0 <setACPowerState+0x1c>)
   1ba92:	1dfa      	adds	r2, r7, #7
   1ba94:	7812      	ldrb	r2, [r2, #0]
   1ba96:	701a      	strb	r2, [r3, #0]
}
   1ba98:	46c0      	nop			; (mov r8, r8)
   1ba9a:	46bd      	mov	sp, r7
   1ba9c:	b002      	add	sp, #8
   1ba9e:	bd80      	pop	{r7, pc}
   1baa0:	200009c6 	.word	0x200009c6

0001baa4 <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
   1baa4:	b580      	push	{r7, lr}
   1baa6:	af00      	add	r7, sp, #0
	return allPhase;
   1baa8:	4b02      	ldr	r3, [pc, #8]	; (1bab4 <getAllPhaseState+0x10>)
   1baaa:	781b      	ldrb	r3, [r3, #0]
   1baac:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
   1baae:	0018      	movs	r0, r3
   1bab0:	46bd      	mov	sp, r7
   1bab2:	bd80      	pop	{r7, pc}
   1bab4:	20000961 	.word	0x20000961

0001bab8 <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
   1bab8:	b580      	push	{r7, lr}
   1baba:	b082      	sub	sp, #8
   1babc:	af00      	add	r7, sp, #0
   1babe:	0002      	movs	r2, r0
   1bac0:	1dfb      	adds	r3, r7, #7
   1bac2:	701a      	strb	r2, [r3, #0]
	allPhase = state;
   1bac4:	4b03      	ldr	r3, [pc, #12]	; (1bad4 <setAllPhaseState+0x1c>)
   1bac6:	1dfa      	adds	r2, r7, #7
   1bac8:	7812      	ldrb	r2, [r2, #0]
   1baca:	701a      	strb	r2, [r3, #0]
}
   1bacc:	46c0      	nop			; (mov r8, r8)
   1bace:	46bd      	mov	sp, r7
   1bad0:	b002      	add	sp, #8
   1bad2:	bd80      	pop	{r7, pc}
   1bad4:	20000961 	.word	0x20000961

0001bad8 <getPhaseSequence>:

bool getPhaseSequence()
{
   1bad8:	b580      	push	{r7, lr}
   1bada:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
   1badc:	4b02      	ldr	r3, [pc, #8]	; (1bae8 <getPhaseSequence+0x10>)
   1bade:	781b      	ldrb	r3, [r3, #0]
   1bae0:	b2db      	uxtb	r3, r3
}
   1bae2:	0018      	movs	r0, r3
   1bae4:	46bd      	mov	sp, r7
   1bae6:	bd80      	pop	{r7, pc}
   1bae8:	20000974 	.word	0x20000974

0001baec <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
   1baec:	b580      	push	{r7, lr}
   1baee:	b082      	sub	sp, #8
   1baf0:	af00      	add	r7, sp, #0
   1baf2:	0002      	movs	r2, r0
   1baf4:	1dfb      	adds	r3, r7, #7
   1baf6:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
   1baf8:	4b03      	ldr	r3, [pc, #12]	; (1bb08 <setPhaseSequence+0x1c>)
   1bafa:	1dfa      	adds	r2, r7, #7
   1bafc:	7812      	ldrb	r2, [r2, #0]
   1bafe:	701a      	strb	r2, [r3, #0]
}
   1bb00:	46c0      	nop			; (mov r8, r8)
   1bb02:	46bd      	mov	sp, r7
   1bb04:	b002      	add	sp, #8
   1bb06:	bd80      	pop	{r7, pc}
   1bb08:	20000974 	.word	0x20000974

0001bb0c <getMotorState>:


bool getMotorState(void)
{
   1bb0c:	b580      	push	{r7, lr}
   1bb0e:	af00      	add	r7, sp, #0
	return mFeedback;
   1bb10:	4b02      	ldr	r3, [pc, #8]	; (1bb1c <getMotorState+0x10>)
   1bb12:	781b      	ldrb	r3, [r3, #0]
   1bb14:	b2db      	uxtb	r3, r3
}
   1bb16:	0018      	movs	r0, r3
   1bb18:	46bd      	mov	sp, r7
   1bb1a:	bd80      	pop	{r7, pc}
   1bb1c:	20000942 	.word	0x20000942

0001bb20 <setMotorState>:

void setMotorState(bool state)
{
   1bb20:	b580      	push	{r7, lr}
   1bb22:	b082      	sub	sp, #8
   1bb24:	af00      	add	r7, sp, #0
   1bb26:	0002      	movs	r2, r0
   1bb28:	1dfb      	adds	r3, r7, #7
   1bb2a:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
   1bb2c:	4b0a      	ldr	r3, [pc, #40]	; (1bb58 <setMotorState+0x38>)
   1bb2e:	1dfa      	adds	r2, r7, #7
   1bb30:	7812      	ldrb	r2, [r2, #0]
   1bb32:	701a      	strb	r2, [r3, #0]
	if (state)
   1bb34:	1dfb      	adds	r3, r7, #7
   1bb36:	781b      	ldrb	r3, [r3, #0]
   1bb38:	2b00      	cmp	r3, #0
   1bb3a:	d004      	beq.n	1bb46 <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
   1bb3c:	2100      	movs	r1, #0
   1bb3e:	2005      	movs	r0, #5
   1bb40:	4b06      	ldr	r3, [pc, #24]	; (1bb5c <setMotorState+0x3c>)
   1bb42:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
   1bb44:	e003      	b.n	1bb4e <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
   1bb46:	2101      	movs	r1, #1
   1bb48:	2005      	movs	r0, #5
   1bb4a:	4b04      	ldr	r3, [pc, #16]	; (1bb5c <setMotorState+0x3c>)
   1bb4c:	4798      	blx	r3
}
   1bb4e:	46c0      	nop			; (mov r8, r8)
   1bb50:	46bd      	mov	sp, r7
   1bb52:	b002      	add	sp, #8
   1bb54:	bd80      	pop	{r7, pc}
   1bb56:	46c0      	nop			; (mov r8, r8)
   1bb58:	20000942 	.word	0x20000942
   1bb5c:	00019f91 	.word	0x00019f91

0001bb60 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
   1bb60:	b590      	push	{r4, r7, lr}
   1bb62:	b083      	sub	sp, #12
   1bb64:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
   1bb66:	1d3b      	adds	r3, r7, #4
   1bb68:	1d7a      	adds	r2, r7, #5
   1bb6a:	1db9      	adds	r1, r7, #6
   1bb6c:	1df8      	adds	r0, r7, #7
   1bb6e:	4c06      	ldr	r4, [pc, #24]	; (1bb88 <getMotorState_from_pin+0x28>)
   1bb70:	47a0      	blx	r4
	setMotorState(p3);
   1bb72:	1d7b      	adds	r3, r7, #5
   1bb74:	781b      	ldrb	r3, [r3, #0]
   1bb76:	0018      	movs	r0, r3
   1bb78:	4b04      	ldr	r3, [pc, #16]	; (1bb8c <getMotorState_from_pin+0x2c>)
   1bb7a:	4798      	blx	r3
	return p3;
   1bb7c:	1d7b      	adds	r3, r7, #5
   1bb7e:	781b      	ldrb	r3, [r3, #0]
}
   1bb80:	0018      	movs	r0, r3
   1bb82:	46bd      	mov	sp, r7
   1bb84:	b003      	add	sp, #12
   1bb86:	bd90      	pop	{r4, r7, pc}
   1bb88:	0001bb91 	.word	0x0001bb91
   1bb8c:	0001bb21 	.word	0x0001bb21

0001bb90 <readSensorState>:



void readSensorState(uint8_t *localallPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
   1bb90:	b590      	push	{r4, r7, lr}
   1bb92:	b087      	sub	sp, #28
   1bb94:	af00      	add	r7, sp, #0
   1bb96:	60f8      	str	r0, [r7, #12]
   1bb98:	60b9      	str	r1, [r7, #8]
   1bb9a:	607a      	str	r2, [r7, #4]
   1bb9c:	603b      	str	r3, [r7, #0]
	*localallPhase = structThreePhase_state.u8t_phase_ac_state;
   1bb9e:	4b39      	ldr	r3, [pc, #228]	; (1bc84 <readSensorState+0xf4>)
   1bba0:	785b      	ldrb	r3, [r3, #1]
   1bba2:	b2da      	uxtb	r2, r3
   1bba4:	68fb      	ldr	r3, [r7, #12]
   1bba6:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
   1bba8:	4b36      	ldr	r3, [pc, #216]	; (1bc84 <readSensorState+0xf4>)
   1bbaa:	781b      	ldrb	r3, [r3, #0]
   1bbac:	b2db      	uxtb	r3, r3
   1bbae:	2b02      	cmp	r3, #2
   1bbb0:	d103      	bne.n	1bbba <readSensorState+0x2a>
	{
		*phaseSeq=true;
   1bbb2:	68bb      	ldr	r3, [r7, #8]
   1bbb4:	2201      	movs	r2, #1
   1bbb6:	701a      	strb	r2, [r3, #0]
   1bbb8:	e002      	b.n	1bbc0 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
   1bbba:	68bb      	ldr	r3, [r7, #8]
   1bbbc:	2200      	movs	r2, #0
   1bbbe:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
   1bbc0:	4b31      	ldr	r3, [pc, #196]	; (1bc88 <readSensorState+0xf8>)
   1bbc2:	2225      	movs	r2, #37	; 0x25
   1bbc4:	5c9b      	ldrb	r3, [r3, r2]
   1bbc6:	b2db      	uxtb	r3, r3
   1bbc8:	2b00      	cmp	r3, #0
   1bbca:	d106      	bne.n	1bbda <readSensorState+0x4a>
	{
		*motor  = getMotorState();
   1bbcc:	4b2f      	ldr	r3, [pc, #188]	; (1bc8c <readSensorState+0xfc>)
   1bbce:	4798      	blx	r3
   1bbd0:	0003      	movs	r3, r0
   1bbd2:	001a      	movs	r2, r3
   1bbd4:	687b      	ldr	r3, [r7, #4]
   1bbd6:	701a      	strb	r2, [r3, #0]
   1bbd8:	e022      	b.n	1bc20 <readSensorState+0x90>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1bbda:	4b2b      	ldr	r3, [pc, #172]	; (1bc88 <readSensorState+0xf8>)
   1bbdc:	2225      	movs	r2, #37	; 0x25
   1bbde:	5c9b      	ldrb	r3, [r3, r2]
   1bbe0:	b2db      	uxtb	r3, r3
   1bbe2:	2b01      	cmp	r3, #1
   1bbe4:	d106      	bne.n	1bbf4 <readSensorState+0x64>
	{
		*motor = checkMotorStatusUsingCurrent();
   1bbe6:	4b2a      	ldr	r3, [pc, #168]	; (1bc90 <readSensorState+0x100>)
   1bbe8:	4798      	blx	r3
   1bbea:	0003      	movs	r3, r0
   1bbec:	001a      	movs	r2, r3
   1bbee:	687b      	ldr	r3, [r7, #4]
   1bbf0:	701a      	strb	r2, [r3, #0]
   1bbf2:	e015      	b.n	1bc20 <readSensorState+0x90>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
   1bbf4:	4b24      	ldr	r3, [pc, #144]	; (1bc88 <readSensorState+0xf8>)
   1bbf6:	2225      	movs	r2, #37	; 0x25
   1bbf8:	5c9b      	ldrb	r3, [r3, r2]
   1bbfa:	b2db      	uxtb	r3, r3
   1bbfc:	2b02      	cmp	r3, #2
   1bbfe:	d10f      	bne.n	1bc20 <readSensorState+0x90>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
   1bc00:	202e      	movs	r0, #46	; 0x2e
   1bc02:	4b24      	ldr	r3, [pc, #144]	; (1bc94 <readSensorState+0x104>)
   1bc04:	4798      	blx	r3
   1bc06:	0003      	movs	r3, r0
   1bc08:	1e5a      	subs	r2, r3, #1
   1bc0a:	4193      	sbcs	r3, r2
   1bc0c:	b2db      	uxtb	r3, r3
   1bc0e:	2201      	movs	r2, #1
   1bc10:	4053      	eors	r3, r2
   1bc12:	b2db      	uxtb	r3, r3
   1bc14:	1c1a      	adds	r2, r3, #0
   1bc16:	2301      	movs	r3, #1
   1bc18:	4013      	ands	r3, r2
   1bc1a:	b2da      	uxtb	r2, r3
   1bc1c:	687b      	ldr	r3, [r7, #4]
   1bc1e:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1bc20:	2317      	movs	r3, #23
   1bc22:	18fb      	adds	r3, r7, r3
   1bc24:	2201      	movs	r2, #1
   1bc26:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1bc28:	2317      	movs	r3, #23
   1bc2a:	18fc      	adds	r4, r7, r3
   1bc2c:	4b1a      	ldr	r3, [pc, #104]	; (1bc98 <readSensorState+0x108>)
   1bc2e:	2100      	movs	r1, #0
   1bc30:	0018      	movs	r0, r3
   1bc32:	4b1a      	ldr	r3, [pc, #104]	; (1bc9c <readSensorState+0x10c>)
   1bc34:	4798      	blx	r3
   1bc36:	0003      	movs	r3, r0
   1bc38:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1bc3a:	23fa      	movs	r3, #250	; 0xfa
   1bc3c:	005b      	lsls	r3, r3, #1
   1bc3e:	0018      	movs	r0, r3
   1bc40:	4b17      	ldr	r3, [pc, #92]	; (1bca0 <readSensorState+0x110>)
   1bc42:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1bc44:	2317      	movs	r3, #23
   1bc46:	18fc      	adds	r4, r7, r3
   1bc48:	4b13      	ldr	r3, [pc, #76]	; (1bc98 <readSensorState+0x108>)
   1bc4a:	2100      	movs	r1, #0
   1bc4c:	0018      	movs	r0, r3
   1bc4e:	4b13      	ldr	r3, [pc, #76]	; (1bc9c <readSensorState+0x10c>)
   1bc50:	4798      	blx	r3
   1bc52:	0003      	movs	r3, r0
   1bc54:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1bc56:	2317      	movs	r3, #23
   1bc58:	18fb      	adds	r3, r7, r3
   1bc5a:	781b      	ldrb	r3, [r3, #0]
   1bc5c:	2204      	movs	r2, #4
   1bc5e:	4013      	ands	r3, r2
   1bc60:	d003      	beq.n	1bc6a <readSensorState+0xda>
	{
		isACpowerAvailable = true;
   1bc62:	4b10      	ldr	r3, [pc, #64]	; (1bca4 <readSensorState+0x114>)
   1bc64:	2201      	movs	r2, #1
   1bc66:	701a      	strb	r2, [r3, #0]
   1bc68:	e002      	b.n	1bc70 <readSensorState+0xe0>
	}
	else
	{
		isACpowerAvailable = false;
   1bc6a:	4b0e      	ldr	r3, [pc, #56]	; (1bca4 <readSensorState+0x114>)
   1bc6c:	2200      	movs	r2, #0
   1bc6e:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
   1bc70:	4b0c      	ldr	r3, [pc, #48]	; (1bca4 <readSensorState+0x114>)
   1bc72:	781b      	ldrb	r3, [r3, #0]
   1bc74:	b2da      	uxtb	r2, r3
   1bc76:	683b      	ldr	r3, [r7, #0]
   1bc78:	701a      	strb	r2, [r3, #0]
}
   1bc7a:	46c0      	nop			; (mov r8, r8)
   1bc7c:	46bd      	mov	sp, r7
   1bc7e:	b007      	add	sp, #28
   1bc80:	bd90      	pop	{r4, r7, pc}
   1bc82:	46c0      	nop			; (mov r8, r8)
   1bc84:	20000948 	.word	0x20000948
   1bc88:	20000854 	.word	0x20000854
   1bc8c:	0001bb0d 	.word	0x0001bb0d
   1bc90:	0001bca9 	.word	0x0001bca9
   1bc94:	00019f4d 	.word	0x00019f4d
   1bc98:	20000a90 	.word	0x20000a90
   1bc9c:	00019a81 	.word	0x00019a81
   1bca0:	00020969 	.word	0x00020969
   1bca4:	2000098d 	.word	0x2000098d

0001bca8 <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
   1bca8:	b580      	push	{r7, lr}
   1bcaa:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
   1bcac:	4b0e      	ldr	r3, [pc, #56]	; (1bce8 <checkMotorStatusUsingCurrent+0x40>)
   1bcae:	781b      	ldrb	r3, [r3, #0]
   1bcb0:	2b00      	cmp	r3, #0
   1bcb2:	d00d      	beq.n	1bcd0 <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
   1bcb4:	4b0d      	ldr	r3, [pc, #52]	; (1bcec <checkMotorStatusUsingCurrent+0x44>)
   1bcb6:	8a9b      	ldrh	r3, [r3, #20]
   1bcb8:	b29a      	uxth	r2, r3
   1bcba:	4b0d      	ldr	r3, [pc, #52]	; (1bcf0 <checkMotorStatusUsingCurrent+0x48>)
   1bcbc:	781b      	ldrb	r3, [r3, #0]
   1bcbe:	085b      	lsrs	r3, r3, #1
   1bcc0:	b2db      	uxtb	r3, r3
   1bcc2:	b29b      	uxth	r3, r3
   1bcc4:	429a      	cmp	r2, r3
   1bcc6:	d801      	bhi.n	1bccc <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
   1bcc8:	2300      	movs	r3, #0
   1bcca:	e009      	b.n	1bce0 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
   1bccc:	2301      	movs	r3, #1
   1bcce:	e007      	b.n	1bce0 <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
   1bcd0:	4b06      	ldr	r3, [pc, #24]	; (1bcec <checkMotorStatusUsingCurrent+0x44>)
   1bcd2:	8a9b      	ldrh	r3, [r3, #20]
   1bcd4:	b29b      	uxth	r3, r3
   1bcd6:	2b04      	cmp	r3, #4
   1bcd8:	d901      	bls.n	1bcde <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
   1bcda:	2301      	movs	r3, #1
   1bcdc:	e000      	b.n	1bce0 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
   1bcde:	2300      	movs	r3, #0
		}
	}
}
   1bce0:	0018      	movs	r0, r3
   1bce2:	46bd      	mov	sp, r7
   1bce4:	bd80      	pop	{r7, pc}
   1bce6:	46c0      	nop			; (mov r8, r8)
   1bce8:	20000a64 	.word	0x20000a64
   1bcec:	200008e8 	.word	0x200008e8
   1bcf0:	200009f8 	.word	0x200009f8

0001bcf4 <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
   1bcf4:	b5b0      	push	{r4, r5, r7, lr}
   1bcf6:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
   1bcf8:	4b07      	ldr	r3, [pc, #28]	; (1bd18 <detectMotorStateChangeUsingCurrent+0x24>)
   1bcfa:	4798      	blx	r3
   1bcfc:	0003      	movs	r3, r0
   1bcfe:	001c      	movs	r4, r3
   1bd00:	4b06      	ldr	r3, [pc, #24]	; (1bd1c <detectMotorStateChangeUsingCurrent+0x28>)
   1bd02:	4798      	blx	r3
   1bd04:	0003      	movs	r3, r0
   1bd06:	429c      	cmp	r4, r3
   1bd08:	d001      	beq.n	1bd0e <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
   1bd0a:	2301      	movs	r3, #1
   1bd0c:	e000      	b.n	1bd10 <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
   1bd0e:	2300      	movs	r3, #0
	}
}
   1bd10:	0018      	movs	r0, r3
   1bd12:	46bd      	mov	sp, r7
   1bd14:	bdb0      	pop	{r4, r5, r7, pc}
   1bd16:	46c0      	nop			; (mov r8, r8)
   1bd18:	0001bb0d 	.word	0x0001bb0d
   1bd1c:	0001bca9 	.word	0x0001bca9

0001bd20 <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
   1bd20:	b5b0      	push	{r4, r5, r7, lr}
   1bd22:	b084      	sub	sp, #16
   1bd24:	af00      	add	r7, sp, #0
   1bd26:	0005      	movs	r5, r0
   1bd28:	000c      	movs	r4, r1
   1bd2a:	0010      	movs	r0, r2
   1bd2c:	0019      	movs	r1, r3
   1bd2e:	1dfb      	adds	r3, r7, #7
   1bd30:	1c2a      	adds	r2, r5, #0
   1bd32:	701a      	strb	r2, [r3, #0]
   1bd34:	1dbb      	adds	r3, r7, #6
   1bd36:	1c22      	adds	r2, r4, #0
   1bd38:	701a      	strb	r2, [r3, #0]
   1bd3a:	1d7b      	adds	r3, r7, #5
   1bd3c:	1c02      	adds	r2, r0, #0
   1bd3e:	701a      	strb	r2, [r3, #0]
   1bd40:	1d3b      	adds	r3, r7, #4
   1bd42:	1c0a      	adds	r2, r1, #0
   1bd44:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
   1bd46:	1dfb      	adds	r3, r7, #7
   1bd48:	781b      	ldrb	r3, [r3, #0]
   1bd4a:	0018      	movs	r0, r3
   1bd4c:	4b28      	ldr	r3, [pc, #160]	; (1bdf0 <updateSensorState+0xd0>)
   1bd4e:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
   1bd50:	1dbb      	adds	r3, r7, #6
   1bd52:	781b      	ldrb	r3, [r3, #0]
   1bd54:	0018      	movs	r0, r3
   1bd56:	4b27      	ldr	r3, [pc, #156]	; (1bdf4 <updateSensorState+0xd4>)
   1bd58:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
   1bd5a:	1d7b      	adds	r3, r7, #5
   1bd5c:	781b      	ldrb	r3, [r3, #0]
   1bd5e:	0018      	movs	r0, r3
   1bd60:	4b25      	ldr	r3, [pc, #148]	; (1bdf8 <updateSensorState+0xd8>)
   1bd62:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
   1bd64:	1d3b      	adds	r3, r7, #4
   1bd66:	781b      	ldrb	r3, [r3, #0]
   1bd68:	0018      	movs	r0, r3
   1bd6a:	4b24      	ldr	r3, [pc, #144]	; (1bdfc <updateSensorState+0xdc>)
   1bd6c:	4798      	blx	r3
	
	//if(getAllPhaseState()==AC_3PH && getACPowerState())
	if(getAllPhaseState()==AC_3PH)
   1bd6e:	4b24      	ldr	r3, [pc, #144]	; (1be00 <updateSensorState+0xe0>)
   1bd70:	4798      	blx	r3
   1bd72:	0003      	movs	r3, r0
   1bd74:	2b03      	cmp	r3, #3
   1bd76:	d12c      	bne.n	1bdd2 <updateSensorState+0xb2>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
   1bd78:	230f      	movs	r3, #15
   1bd7a:	18fb      	adds	r3, r7, r3
   1bd7c:	2201      	movs	r2, #1
   1bd7e:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
   1bd80:	4b20      	ldr	r3, [pc, #128]	; (1be04 <updateSensorState+0xe4>)
   1bd82:	2224      	movs	r2, #36	; 0x24
   1bd84:	5c9b      	ldrb	r3, [r3, r2]
   1bd86:	b2db      	uxtb	r3, r3
   1bd88:	2b00      	cmp	r3, #0
   1bd8a:	d005      	beq.n	1bd98 <updateSensorState+0x78>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
   1bd8c:	230f      	movs	r3, #15
   1bd8e:	18fc      	adds	r4, r7, r3
   1bd90:	4b1d      	ldr	r3, [pc, #116]	; (1be08 <updateSensorState+0xe8>)
   1bd92:	4798      	blx	r3
   1bd94:	0003      	movs	r3, r0
   1bd96:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
   1bd98:	230f      	movs	r3, #15
   1bd9a:	18fb      	adds	r3, r7, r3
   1bd9c:	781b      	ldrb	r3, [r3, #0]
   1bd9e:	2b00      	cmp	r3, #0
   1bda0:	d004      	beq.n	1bdac <updateSensorState+0x8c>
		{
			THREEPHASE_OK_LED_ON;
   1bda2:	2100      	movs	r1, #0
   1bda4:	2027      	movs	r0, #39	; 0x27
   1bda6:	4b19      	ldr	r3, [pc, #100]	; (1be0c <updateSensorState+0xec>)
   1bda8:	4798      	blx	r3
   1bdaa:	e003      	b.n	1bdb4 <updateSensorState+0x94>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
   1bdac:	2101      	movs	r1, #1
   1bdae:	2027      	movs	r0, #39	; 0x27
   1bdb0:	4b16      	ldr	r3, [pc, #88]	; (1be0c <updateSensorState+0xec>)
   1bdb2:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
   1bdb4:	4b13      	ldr	r3, [pc, #76]	; (1be04 <updateSensorState+0xe4>)
   1bdb6:	785b      	ldrb	r3, [r3, #1]
   1bdb8:	b2db      	uxtb	r3, r3
   1bdba:	2b00      	cmp	r3, #0
   1bdbc:	d004      	beq.n	1bdc8 <updateSensorState+0xa8>
		{
			AUTO_ON_LED_ON;
   1bdbe:	2100      	movs	r1, #0
   1bdc0:	2028      	movs	r0, #40	; 0x28
   1bdc2:	4b12      	ldr	r3, [pc, #72]	; (1be0c <updateSensorState+0xec>)
   1bdc4:	4798      	blx	r3
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
   1bdc6:	e00f      	b.n	1bde8 <updateSensorState+0xc8>
			AUTO_ON_LED_OFF;
   1bdc8:	2101      	movs	r1, #1
   1bdca:	2028      	movs	r0, #40	; 0x28
   1bdcc:	4b0f      	ldr	r3, [pc, #60]	; (1be0c <updateSensorState+0xec>)
   1bdce:	4798      	blx	r3
}
   1bdd0:	e00a      	b.n	1bde8 <updateSensorState+0xc8>
		THREEPHASE_OK_LED_OFF;
   1bdd2:	2101      	movs	r1, #1
   1bdd4:	2027      	movs	r0, #39	; 0x27
   1bdd6:	4b0d      	ldr	r3, [pc, #52]	; (1be0c <updateSensorState+0xec>)
   1bdd8:	4798      	blx	r3
		AUTO_ON_LED_OFF;
   1bdda:	2101      	movs	r1, #1
   1bddc:	2028      	movs	r0, #40	; 0x28
   1bdde:	4b0b      	ldr	r3, [pc, #44]	; (1be0c <updateSensorState+0xec>)
   1bde0:	4798      	blx	r3
		startTimerOn=false;
   1bde2:	4b0b      	ldr	r3, [pc, #44]	; (1be10 <updateSensorState+0xf0>)
   1bde4:	2200      	movs	r2, #0
   1bde6:	701a      	strb	r2, [r3, #0]
}
   1bde8:	46c0      	nop			; (mov r8, r8)
   1bdea:	46bd      	mov	sp, r7
   1bdec:	b004      	add	sp, #16
   1bdee:	bdb0      	pop	{r4, r5, r7, pc}
   1bdf0:	0001bab9 	.word	0x0001bab9
   1bdf4:	0001baed 	.word	0x0001baed
   1bdf8:	0001bb21 	.word	0x0001bb21
   1bdfc:	0001ba85 	.word	0x0001ba85
   1be00:	0001baa5 	.word	0x0001baa5
   1be04:	20000854 	.word	0x20000854
   1be08:	0001bad9 	.word	0x0001bad9
   1be0c:	00019f91 	.word	0x00019f91
   1be10:	2000099a 	.word	0x2000099a

0001be14 <resetAutoStart>:

void resetAutoStart(bool setChange)
{
   1be14:	b580      	push	{r7, lr}
   1be16:	b082      	sub	sp, #8
   1be18:	af00      	add	r7, sp, #0
   1be1a:	0002      	movs	r2, r0
   1be1c:	1dfb      	adds	r3, r7, #7
   1be1e:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
   1be20:	4b0f      	ldr	r3, [pc, #60]	; (1be60 <resetAutoStart+0x4c>)
   1be22:	785b      	ldrb	r3, [r3, #1]
   1be24:	b2db      	uxtb	r3, r3
   1be26:	2b00      	cmp	r3, #0
   1be28:	d107      	bne.n	1be3a <resetAutoStart+0x26>
	{
		startTimerOn=false;
   1be2a:	4b0e      	ldr	r3, [pc, #56]	; (1be64 <resetAutoStart+0x50>)
   1be2c:	2200      	movs	r2, #0
   1be2e:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
   1be30:	2101      	movs	r1, #1
   1be32:	2028      	movs	r0, #40	; 0x28
   1be34:	4b0c      	ldr	r3, [pc, #48]	; (1be68 <resetAutoStart+0x54>)
   1be36:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
   1be38:	e00e      	b.n	1be58 <resetAutoStart+0x44>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
   1be3a:	4b09      	ldr	r3, [pc, #36]	; (1be60 <resetAutoStart+0x4c>)
   1be3c:	785b      	ldrb	r3, [r3, #1]
   1be3e:	b2db      	uxtb	r3, r3
   1be40:	2b00      	cmp	r3, #0
   1be42:	d009      	beq.n	1be58 <resetAutoStart+0x44>
		AUTO_ON_LED_ON;
   1be44:	2100      	movs	r1, #0
   1be46:	2028      	movs	r0, #40	; 0x28
   1be48:	4b07      	ldr	r3, [pc, #28]	; (1be68 <resetAutoStart+0x54>)
   1be4a:	4798      	blx	r3
		if (setChange)
   1be4c:	1dfb      	adds	r3, r7, #7
   1be4e:	781b      	ldrb	r3, [r3, #0]
   1be50:	2b00      	cmp	r3, #0
   1be52:	d001      	beq.n	1be58 <resetAutoStart+0x44>
			triggerAutoStart();
   1be54:	4b05      	ldr	r3, [pc, #20]	; (1be6c <resetAutoStart+0x58>)
   1be56:	4798      	blx	r3
}
   1be58:	46c0      	nop			; (mov r8, r8)
   1be5a:	46bd      	mov	sp, r7
   1be5c:	b002      	add	sp, #8
   1be5e:	bd80      	pop	{r7, pc}
   1be60:	20000854 	.word	0x20000854
   1be64:	2000099a 	.word	0x2000099a
   1be68:	00019f91 	.word	0x00019f91
   1be6c:	0001be71 	.word	0x0001be71

0001be70 <triggerAutoStart>:

void triggerAutoStart(void)
{
   1be70:	b580      	push	{r7, lr}
   1be72:	af00      	add	r7, sp, #0
	if (!getMotorState())
   1be74:	4b0b      	ldr	r3, [pc, #44]	; (1bea4 <triggerAutoStart+0x34>)
   1be76:	4798      	blx	r3
   1be78:	0003      	movs	r3, r0
   1be7a:	001a      	movs	r2, r3
   1be7c:	2301      	movs	r3, #1
   1be7e:	4053      	eors	r3, r2
   1be80:	b2db      	uxtb	r3, r3
   1be82:	2b00      	cmp	r3, #0
   1be84:	d00b      	beq.n	1be9e <triggerAutoStart+0x2e>
	{
		//if (getAllPhaseState() && getACPowerState())
		if (getAllPhaseState())
   1be86:	4b08      	ldr	r3, [pc, #32]	; (1bea8 <triggerAutoStart+0x38>)
   1be88:	4798      	blx	r3
   1be8a:	1e03      	subs	r3, r0, #0
   1be8c:	d007      	beq.n	1be9e <triggerAutoStart+0x2e>
		{
			startTimerOn = true;
   1be8e:	4b07      	ldr	r3, [pc, #28]	; (1beac <triggerAutoStart+0x3c>)
   1be90:	2201      	movs	r2, #1
   1be92:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
   1be94:	4b06      	ldr	r3, [pc, #24]	; (1beb0 <triggerAutoStart+0x40>)
   1be96:	4798      	blx	r3
   1be98:	0002      	movs	r2, r0
   1be9a:	4b06      	ldr	r3, [pc, #24]	; (1beb4 <triggerAutoStart+0x44>)
   1be9c:	601a      	str	r2, [r3, #0]
		}
	}
}
   1be9e:	46c0      	nop			; (mov r8, r8)
   1bea0:	46bd      	mov	sp, r7
   1bea2:	bd80      	pop	{r7, pc}
   1bea4:	0001bb0d 	.word	0x0001bb0d
   1bea8:	0001baa5 	.word	0x0001baa5
   1beac:	2000099a 	.word	0x2000099a
   1beb0:	00020ccd 	.word	0x00020ccd
   1beb4:	200009a4 	.word	0x200009a4

0001beb8 <operateOnEvent>:

void operateOnEvent(void)
{
   1beb8:	b590      	push	{r4, r7, lr}
   1beba:	b083      	sub	sp, #12
   1bebc:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
   1bebe:	1d3b      	adds	r3, r7, #4
   1bec0:	1d7a      	adds	r2, r7, #5
   1bec2:	1db9      	adds	r1, r7, #6
   1bec4:	1df8      	adds	r0, r7, #7
   1bec6:	4c5e      	ldr	r4, [pc, #376]	; (1c040 <operateOnEvent+0x188>)
   1bec8:	47a0      	blx	r4
	eventOccured = false;
   1beca:	4b5e      	ldr	r3, [pc, #376]	; (1c044 <operateOnEvent+0x18c>)
   1becc:	2200      	movs	r2, #0
   1bece:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	//if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()))
   1bed0:	4b5d      	ldr	r3, [pc, #372]	; (1c048 <operateOnEvent+0x190>)
   1bed2:	4798      	blx	r3
   1bed4:	0003      	movs	r3, r0
   1bed6:	001a      	movs	r2, r3
   1bed8:	1dfb      	adds	r3, r7, #7
   1beda:	781b      	ldrb	r3, [r3, #0]
   1bedc:	429a      	cmp	r2, r3
   1bede:	d108      	bne.n	1bef2 <operateOnEvent+0x3a>
   1bee0:	4b5a      	ldr	r3, [pc, #360]	; (1c04c <operateOnEvent+0x194>)
   1bee2:	4798      	blx	r3
   1bee4:	0003      	movs	r3, r0
   1bee6:	001a      	movs	r2, r3
   1bee8:	1d7b      	adds	r3, r7, #5
   1beea:	781b      	ldrb	r3, [r3, #0]
   1beec:	429a      	cmp	r2, r3
   1beee:	d100      	bne.n	1bef2 <operateOnEvent+0x3a>
   1bef0:	e0a1      	b.n	1c036 <operateOnEvent+0x17e>
	{
		return;
	}
	if (getMotorState())	//motorOn
   1bef2:	4b56      	ldr	r3, [pc, #344]	; (1c04c <operateOnEvent+0x194>)
   1bef4:	4798      	blx	r3
   1bef6:	1e03      	subs	r3, r0, #0
   1bef8:	d05d      	beq.n	1bfb6 <operateOnEvent+0xfe>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
   1befa:	1dfb      	adds	r3, r7, #7
   1befc:	781b      	ldrb	r3, [r3, #0]
   1befe:	2b00      	cmp	r3, #0
   1bf00:	d11e      	bne.n	1bf40 <operateOnEvent+0x88>
   1bf02:	1d7b      	adds	r3, r7, #5
   1bf04:	781b      	ldrb	r3, [r3, #0]
   1bf06:	2201      	movs	r2, #1
   1bf08:	4053      	eors	r3, r2
   1bf0a:	b2db      	uxtb	r3, r3
   1bf0c:	2b00      	cmp	r3, #0
   1bf0e:	d017      	beq.n	1bf40 <operateOnEvent+0x88>
   1bf10:	1d3b      	adds	r3, r7, #4
   1bf12:	781b      	ldrb	r3, [r3, #0]
   1bf14:	2201      	movs	r2, #1
   1bf16:	4053      	eors	r3, r2
   1bf18:	b2db      	uxtb	r3, r3
   1bf1a:	2b00      	cmp	r3, #0
   1bf1c:	d010      	beq.n	1bf40 <operateOnEvent+0x88>
		{
			stopMotor(false,true,false);
   1bf1e:	2200      	movs	r2, #0
   1bf20:	2101      	movs	r1, #1
   1bf22:	2000      	movs	r0, #0
   1bf24:	4b4a      	ldr	r3, [pc, #296]	; (1c050 <operateOnEvent+0x198>)
   1bf26:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
   1bf28:	2101      	movs	r1, #1
   1bf2a:	2027      	movs	r0, #39	; 0x27
   1bf2c:	4b49      	ldr	r3, [pc, #292]	; (1c054 <operateOnEvent+0x19c>)
   1bf2e:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
   1bf30:	2043      	movs	r0, #67	; 0x43
   1bf32:	4b49      	ldr	r3, [pc, #292]	; (1c058 <operateOnEvent+0x1a0>)
   1bf34:	4798      	blx	r3
   1bf36:	0003      	movs	r3, r0
   1bf38:	001a      	movs	r2, r3
   1bf3a:	4b48      	ldr	r3, [pc, #288]	; (1c05c <operateOnEvent+0x1a4>)
   1bf3c:	719a      	strb	r2, [r3, #6]
   1bf3e:	e06f      	b.n	1c020 <operateOnEvent+0x168>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		//else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1bf40:	4b47      	ldr	r3, [pc, #284]	; (1c060 <operateOnEvent+0x1a8>)
   1bf42:	2220      	movs	r2, #32
   1bf44:	5c9b      	ldrb	r3, [r3, r2]
   1bf46:	b2db      	uxtb	r3, r3
   1bf48:	2b00      	cmp	r3, #0
   1bf4a:	d008      	beq.n	1bf5e <operateOnEvent+0xa6>
   1bf4c:	1dfb      	adds	r3, r7, #7
   1bf4e:	781b      	ldrb	r3, [r3, #0]
   1bf50:	2b03      	cmp	r3, #3
   1bf52:	d104      	bne.n	1bf5e <operateOnEvent+0xa6>
   1bf54:	4b3c      	ldr	r3, [pc, #240]	; (1c048 <operateOnEvent+0x190>)
   1bf56:	4798      	blx	r3
   1bf58:	0003      	movs	r3, r0
   1bf5a:	2b03      	cmp	r3, #3
   1bf5c:	d00e      	beq.n	1bf7c <operateOnEvent+0xc4>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1bf5e:	4b40      	ldr	r3, [pc, #256]	; (1c060 <operateOnEvent+0x1a8>)
   1bf60:	2220      	movs	r2, #32
   1bf62:	5c9b      	ldrb	r3, [r3, r2]
   1bf64:	b2db      	uxtb	r3, r3
		else if (((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
   1bf66:	2b00      	cmp	r3, #0
   1bf68:	d112      	bne.n	1bf90 <operateOnEvent+0xd8>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1bf6a:	1dfb      	adds	r3, r7, #7
   1bf6c:	781b      	ldrb	r3, [r3, #0]
   1bf6e:	2b01      	cmp	r3, #1
   1bf70:	d90e      	bls.n	1bf90 <operateOnEvent+0xd8>
   1bf72:	4b35      	ldr	r3, [pc, #212]	; (1c048 <operateOnEvent+0x190>)
   1bf74:	4798      	blx	r3
   1bf76:	0003      	movs	r3, r0
   1bf78:	2b01      	cmp	r3, #1
   1bf7a:	d909      	bls.n	1bf90 <operateOnEvent+0xd8>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
   1bf7c:	1d7b      	adds	r3, r7, #5
   1bf7e:	781b      	ldrb	r3, [r3, #0]
   1bf80:	2201      	movs	r2, #1
   1bf82:	4053      	eors	r3, r2
   1bf84:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
   1bf86:	2b00      	cmp	r3, #0
   1bf88:	d002      	beq.n	1bf90 <operateOnEvent+0xd8>
		{
			unknownMotorOff();
   1bf8a:	4b36      	ldr	r3, [pc, #216]	; (1c064 <operateOnEvent+0x1ac>)
   1bf8c:	4798      	blx	r3
   1bf8e:	e047      	b.n	1c020 <operateOnEvent+0x168>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1bf90:	4b33      	ldr	r3, [pc, #204]	; (1c060 <operateOnEvent+0x1a8>)
   1bf92:	2220      	movs	r2, #32
   1bf94:	5c9b      	ldrb	r3, [r3, r2]
   1bf96:	b2db      	uxtb	r3, r3
   1bf98:	2b00      	cmp	r3, #0
   1bf9a:	d041      	beq.n	1c020 <operateOnEvent+0x168>
		t3Phase==AC_2PH) /*&&																														// Only 2 Phase Present
   1bf9c:	1dfb      	adds	r3, r7, #7
   1bf9e:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
   1bfa0:	2b02      	cmp	r3, #2
   1bfa2:	d13d      	bne.n	1c020 <operateOnEvent+0x168>
		tacPhase)*/ ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
   1bfa4:	4b30      	ldr	r3, [pc, #192]	; (1c068 <operateOnEvent+0x1b0>)
   1bfa6:	4798      	blx	r3
   1bfa8:	0002      	movs	r2, r0
   1bfaa:	4b30      	ldr	r3, [pc, #192]	; (1c06c <operateOnEvent+0x1b4>)
   1bfac:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
   1bfae:	4b30      	ldr	r3, [pc, #192]	; (1c070 <operateOnEvent+0x1b8>)
   1bfb0:	2201      	movs	r2, #1
   1bfb2:	701a      	strb	r2, [r3, #0]
   1bfb4:	e034      	b.n	1c020 <operateOnEvent+0x168>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
   1bfb6:	1d7b      	adds	r3, r7, #5
   1bfb8:	781b      	ldrb	r3, [r3, #0]
   1bfba:	2b00      	cmp	r3, #0
   1bfbc:	d028      	beq.n	1c010 <operateOnEvent+0x158>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
   1bfbe:	1dfb      	adds	r3, r7, #7
   1bfc0:	781b      	ldrb	r3, [r3, #0]
   1bfc2:	2b03      	cmp	r3, #3
   1bfc4:	d11e      	bne.n	1c004 <operateOnEvent+0x14c>
   1bfc6:	1dbb      	adds	r3, r7, #6
   1bfc8:	781b      	ldrb	r3, [r3, #0]
   1bfca:	2b00      	cmp	r3, #0
   1bfcc:	d01a      	beq.n	1c004 <operateOnEvent+0x14c>
   1bfce:	1d3b      	adds	r3, r7, #4
   1bfd0:	781b      	ldrb	r3, [r3, #0]
   1bfd2:	2b00      	cmp	r3, #0
   1bfd4:	d016      	beq.n	1c004 <operateOnEvent+0x14c>
			{
				if (startTimerOn)
   1bfd6:	4b27      	ldr	r3, [pc, #156]	; (1c074 <operateOnEvent+0x1bc>)
   1bfd8:	781b      	ldrb	r3, [r3, #0]
   1bfda:	2b00      	cmp	r3, #0
   1bfdc:	d002      	beq.n	1bfe4 <operateOnEvent+0x12c>
				{
					startTimerOn = false;
   1bfde:	4b25      	ldr	r3, [pc, #148]	; (1c074 <operateOnEvent+0x1bc>)
   1bfe0:	2200      	movs	r2, #0
   1bfe2:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
   1bfe4:	2100      	movs	r1, #0
   1bfe6:	2027      	movs	r0, #39	; 0x27
   1bfe8:	4b1a      	ldr	r3, [pc, #104]	; (1c054 <operateOnEvent+0x19c>)
   1bfea:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
   1bfec:	2053      	movs	r0, #83	; 0x53
   1bfee:	4b1a      	ldr	r3, [pc, #104]	; (1c058 <operateOnEvent+0x1a0>)
   1bff0:	4798      	blx	r3
   1bff2:	0003      	movs	r3, r0
   1bff4:	001a      	movs	r2, r3
   1bff6:	4b19      	ldr	r3, [pc, #100]	; (1c05c <operateOnEvent+0x1a4>)
   1bff8:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
   1bffa:	2101      	movs	r1, #1
   1bffc:	2001      	movs	r0, #1
   1bffe:	4b1e      	ldr	r3, [pc, #120]	; (1c078 <operateOnEvent+0x1c0>)
   1c000:	4798      	blx	r3
   1c002:	e00d      	b.n	1c020 <operateOnEvent+0x168>
			}
			else
			{
				stopMotor(false,true,false);
   1c004:	2200      	movs	r2, #0
   1c006:	2101      	movs	r1, #1
   1c008:	2000      	movs	r0, #0
   1c00a:	4b11      	ldr	r3, [pc, #68]	; (1c050 <operateOnEvent+0x198>)
   1c00c:	4798      	blx	r3
   1c00e:	e007      	b.n	1c020 <operateOnEvent+0x168>
			}
		}
		else
		{
			waitStableLineOn = true;
   1c010:	4b1a      	ldr	r3, [pc, #104]	; (1c07c <operateOnEvent+0x1c4>)
   1c012:	2201      	movs	r2, #1
   1c014:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
   1c016:	4b14      	ldr	r3, [pc, #80]	; (1c068 <operateOnEvent+0x1b0>)
   1c018:	4798      	blx	r3
   1c01a:	0002      	movs	r2, r0
   1c01c:	4b18      	ldr	r3, [pc, #96]	; (1c080 <operateOnEvent+0x1c8>)
   1c01e:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
   1c020:	1dfb      	adds	r3, r7, #7
   1c022:	7818      	ldrb	r0, [r3, #0]
   1c024:	1dbb      	adds	r3, r7, #6
   1c026:	7819      	ldrb	r1, [r3, #0]
   1c028:	1d7b      	adds	r3, r7, #5
   1c02a:	781a      	ldrb	r2, [r3, #0]
   1c02c:	1d3b      	adds	r3, r7, #4
   1c02e:	781b      	ldrb	r3, [r3, #0]
   1c030:	4c14      	ldr	r4, [pc, #80]	; (1c084 <operateOnEvent+0x1cc>)
   1c032:	47a0      	blx	r4
   1c034:	e000      	b.n	1c038 <operateOnEvent+0x180>
		return;
   1c036:	46c0      	nop			; (mov r8, r8)
}
   1c038:	46bd      	mov	sp, r7
   1c03a:	b003      	add	sp, #12
   1c03c:	bd90      	pop	{r4, r7, pc}
   1c03e:	46c0      	nop			; (mov r8, r8)
   1c040:	0001bb91 	.word	0x0001bb91
   1c044:	2000092e 	.word	0x2000092e
   1c048:	0001baa5 	.word	0x0001baa5
   1c04c:	0001bb0d 	.word	0x0001bb0d
   1c050:	0001c411 	.word	0x0001c411
   1c054:	00019f91 	.word	0x00019f91
   1c058:	00014b69 	.word	0x00014b69
   1c05c:	20000918 	.word	0x20000918
   1c060:	20000854 	.word	0x20000854
   1c064:	0001c53d 	.word	0x0001c53d
   1c068:	00020ccd 	.word	0x00020ccd
   1c06c:	20000978 	.word	0x20000978
   1c070:	20000991 	.word	0x20000991
   1c074:	2000099a 	.word	0x2000099a
   1c078:	0001c229 	.word	0x0001c229
   1c07c:	20000a11 	.word	0x20000a11
   1c080:	200009d0 	.word	0x200009d0
   1c084:	0001bd21 	.word	0x0001bd21

0001c088 <checkLineSensors>:

uint8_t checkLineSensors(void)
{
   1c088:	b580      	push	{r7, lr}
   1c08a:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
   1c08c:	4b02      	ldr	r3, [pc, #8]	; (1c098 <checkLineSensors+0x10>)
   1c08e:	785b      	ldrb	r3, [r3, #1]
   1c090:	b2db      	uxtb	r3, r3
}
   1c092:	0018      	movs	r0, r3
   1c094:	46bd      	mov	sp, r7
   1c096:	bd80      	pop	{r7, pc}
   1c098:	20000948 	.word	0x20000948

0001c09c <operateOnStableLine>:

void operateOnStableLine(void)
{
   1c09c:	b590      	push	{r4, r7, lr}
   1c09e:	b083      	sub	sp, #12
   1c0a0:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
   1c0a2:	4b45      	ldr	r3, [pc, #276]	; (1c1b8 <operateOnStableLine+0x11c>)
   1c0a4:	2200      	movs	r2, #0
   1c0a6:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
   1c0a8:	1dbc      	adds	r4, r7, #6
   1c0aa:	4b44      	ldr	r3, [pc, #272]	; (1c1bc <operateOnStableLine+0x120>)
   1c0ac:	4798      	blx	r3
   1c0ae:	0003      	movs	r3, r0
   1c0b0:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
   1c0b2:	1dbb      	adds	r3, r7, #6
   1c0b4:	781b      	ldrb	r3, [r3, #0]
   1c0b6:	2b03      	cmp	r3, #3
   1c0b8:	d136      	bne.n	1c128 <operateOnStableLine+0x8c>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
   1c0ba:	1dfb      	adds	r3, r7, #7
   1c0bc:	2201      	movs	r2, #1
   1c0be:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
   1c0c0:	4b3f      	ldr	r3, [pc, #252]	; (1c1c0 <operateOnStableLine+0x124>)
   1c0c2:	2224      	movs	r2, #36	; 0x24
   1c0c4:	5c9b      	ldrb	r3, [r3, r2]
   1c0c6:	b2db      	uxtb	r3, r3
   1c0c8:	2b00      	cmp	r3, #0
   1c0ca:	d004      	beq.n	1c0d6 <operateOnStableLine+0x3a>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
   1c0cc:	1dfc      	adds	r4, r7, #7
   1c0ce:	4b3d      	ldr	r3, [pc, #244]	; (1c1c4 <operateOnStableLine+0x128>)
   1c0d0:	4798      	blx	r3
   1c0d2:	0003      	movs	r3, r0
   1c0d4:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
   1c0d6:	1dfb      	adds	r3, r7, #7
   1c0d8:	781b      	ldrb	r3, [r3, #0]
   1c0da:	2b00      	cmp	r3, #0
   1c0dc:	d018      	beq.n	1c110 <operateOnStableLine+0x74>
		{
			THREEPHASE_OK_LED_ON;
   1c0de:	2100      	movs	r1, #0
   1c0e0:	2027      	movs	r0, #39	; 0x27
   1c0e2:	4b39      	ldr	r3, [pc, #228]	; (1c1c8 <operateOnStableLine+0x12c>)
   1c0e4:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
   1c0e6:	4b36      	ldr	r3, [pc, #216]	; (1c1c0 <operateOnStableLine+0x124>)
   1c0e8:	785b      	ldrb	r3, [r3, #1]
   1c0ea:	b2db      	uxtb	r3, r3
   1c0ec:	2b00      	cmp	r3, #0
   1c0ee:	d002      	beq.n	1c0f6 <operateOnStableLine+0x5a>
			{
				triggerAutoStart();
   1c0f0:	4b36      	ldr	r3, [pc, #216]	; (1c1cc <operateOnStableLine+0x130>)
   1c0f2:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
   1c0f4:	e05b      	b.n	1c1ae <operateOnStableLine+0x112>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
   1c0f6:	4b32      	ldr	r3, [pc, #200]	; (1c1c0 <operateOnStableLine+0x124>)
   1c0f8:	791b      	ldrb	r3, [r3, #4]
   1c0fa:	b2db      	uxtb	r3, r3
   1c0fc:	2b4c      	cmp	r3, #76	; 0x4c
   1c0fe:	d056      	beq.n	1c1ae <operateOnStableLine+0x112>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
   1c100:	2047      	movs	r0, #71	; 0x47
   1c102:	4b33      	ldr	r3, [pc, #204]	; (1c1d0 <operateOnStableLine+0x134>)
   1c104:	4798      	blx	r3
   1c106:	0003      	movs	r3, r0
   1c108:	001a      	movs	r2, r3
   1c10a:	4b32      	ldr	r3, [pc, #200]	; (1c1d4 <operateOnStableLine+0x138>)
   1c10c:	711a      	strb	r2, [r3, #4]
}
   1c10e:	e04e      	b.n	1c1ae <operateOnStableLine+0x112>
			THREEPHASE_OK_LED_OFF;
   1c110:	2101      	movs	r1, #1
   1c112:	2027      	movs	r0, #39	; 0x27
   1c114:	4b2c      	ldr	r3, [pc, #176]	; (1c1c8 <operateOnStableLine+0x12c>)
   1c116:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
   1c118:	2041      	movs	r0, #65	; 0x41
   1c11a:	4b2d      	ldr	r3, [pc, #180]	; (1c1d0 <operateOnStableLine+0x134>)
   1c11c:	4798      	blx	r3
   1c11e:	0003      	movs	r3, r0
   1c120:	001a      	movs	r2, r3
   1c122:	4b2c      	ldr	r3, [pc, #176]	; (1c1d4 <operateOnStableLine+0x138>)
   1c124:	725a      	strb	r2, [r3, #9]
}
   1c126:	e042      	b.n	1c1ae <operateOnStableLine+0x112>
	else if (temp == AC_2PH) //Got Power in 2 phase
   1c128:	1dbb      	adds	r3, r7, #6
   1c12a:	781b      	ldrb	r3, [r3, #0]
   1c12c:	2b02      	cmp	r3, #2
   1c12e:	d116      	bne.n	1c15e <operateOnStableLine+0xc2>
		THREEPHASE_OK_LED_OFF;
   1c130:	2101      	movs	r1, #1
   1c132:	2027      	movs	r0, #39	; 0x27
   1c134:	4b24      	ldr	r3, [pc, #144]	; (1c1c8 <operateOnStableLine+0x12c>)
   1c136:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1c138:	4b21      	ldr	r3, [pc, #132]	; (1c1c0 <operateOnStableLine+0x124>)
   1c13a:	791b      	ldrb	r3, [r3, #4]
   1c13c:	b2db      	uxtb	r3, r3
   1c13e:	2b4f      	cmp	r3, #79	; 0x4f
   1c140:	d135      	bne.n	1c1ae <operateOnStableLine+0x112>
		user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
   1c142:	4b1f      	ldr	r3, [pc, #124]	; (1c1c0 <operateOnStableLine+0x124>)
   1c144:	2220      	movs	r2, #32
   1c146:	5c9b      	ldrb	r3, [r3, r2]
   1c148:	b2db      	uxtb	r3, r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
   1c14a:	2b00      	cmp	r3, #0
   1c14c:	d02f      	beq.n	1c1ae <operateOnStableLine+0x112>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
   1c14e:	2041      	movs	r0, #65	; 0x41
   1c150:	4b1f      	ldr	r3, [pc, #124]	; (1c1d0 <operateOnStableLine+0x134>)
   1c152:	4798      	blx	r3
   1c154:	0003      	movs	r3, r0
   1c156:	001a      	movs	r2, r3
   1c158:	4b1e      	ldr	r3, [pc, #120]	; (1c1d4 <operateOnStableLine+0x138>)
   1c15a:	725a      	strb	r2, [r3, #9]
}
   1c15c:	e027      	b.n	1c1ae <operateOnStableLine+0x112>
	else if (temp == AC_OFF)	//Lost Power in All Phase
   1c15e:	1dbb      	adds	r3, r7, #6
   1c160:	781b      	ldrb	r3, [r3, #0]
   1c162:	2b00      	cmp	r3, #0
   1c164:	d123      	bne.n	1c1ae <operateOnStableLine+0x112>
		THREEPHASE_OK_LED_OFF;
   1c166:	2101      	movs	r1, #1
   1c168:	2027      	movs	r0, #39	; 0x27
   1c16a:	4b17      	ldr	r3, [pc, #92]	; (1c1c8 <operateOnStableLine+0x12c>)
   1c16c:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1c16e:	4b14      	ldr	r3, [pc, #80]	; (1c1c0 <operateOnStableLine+0x124>)
   1c170:	791b      	ldrb	r3, [r3, #4]
   1c172:	b2db      	uxtb	r3, r3
   1c174:	2b4f      	cmp	r3, #79	; 0x4f
   1c176:	d013      	beq.n	1c1a0 <operateOnStableLine+0x104>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1c178:	4b17      	ldr	r3, [pc, #92]	; (1c1d8 <operateOnStableLine+0x13c>)
   1c17a:	781b      	ldrb	r3, [r3, #0]
   1c17c:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
   1c17e:	2b02      	cmp	r3, #2
   1c180:	d104      	bne.n	1c18c <operateOnStableLine+0xf0>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1c182:	4b0f      	ldr	r3, [pc, #60]	; (1c1c0 <operateOnStableLine+0x124>)
   1c184:	791b      	ldrb	r3, [r3, #4]
   1c186:	b2db      	uxtb	r3, r3
   1c188:	2b4f      	cmp	r3, #79	; 0x4f
   1c18a:	d009      	beq.n	1c1a0 <operateOnStableLine+0x104>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1c18c:	4b12      	ldr	r3, [pc, #72]	; (1c1d8 <operateOnStableLine+0x13c>)
   1c18e:	781b      	ldrb	r3, [r3, #0]
   1c190:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
   1c192:	2b03      	cmp	r3, #3
   1c194:	d10b      	bne.n	1c1ae <operateOnStableLine+0x112>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
   1c196:	4b0a      	ldr	r3, [pc, #40]	; (1c1c0 <operateOnStableLine+0x124>)
   1c198:	791b      	ldrb	r3, [r3, #4]
   1c19a:	b2db      	uxtb	r3, r3
   1c19c:	2b4c      	cmp	r3, #76	; 0x4c
   1c19e:	d006      	beq.n	1c1ae <operateOnStableLine+0x112>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
   1c1a0:	204c      	movs	r0, #76	; 0x4c
   1c1a2:	4b0b      	ldr	r3, [pc, #44]	; (1c1d0 <operateOnStableLine+0x134>)
   1c1a4:	4798      	blx	r3
   1c1a6:	0003      	movs	r3, r0
   1c1a8:	001a      	movs	r2, r3
   1c1aa:	4b0a      	ldr	r3, [pc, #40]	; (1c1d4 <operateOnStableLine+0x138>)
   1c1ac:	715a      	strb	r2, [r3, #5]
}
   1c1ae:	46c0      	nop			; (mov r8, r8)
   1c1b0:	46bd      	mov	sp, r7
   1c1b2:	b003      	add	sp, #12
   1c1b4:	bd90      	pop	{r4, r7, pc}
   1c1b6:	46c0      	nop			; (mov r8, r8)
   1c1b8:	20000a11 	.word	0x20000a11
   1c1bc:	0001c089 	.word	0x0001c089
   1c1c0:	20000854 	.word	0x20000854
   1c1c4:	0001bad9 	.word	0x0001bad9
   1c1c8:	00019f91 	.word	0x00019f91
   1c1cc:	0001be71 	.word	0x0001be71
   1c1d0:	00014b69 	.word	0x00014b69
   1c1d4:	20000918 	.word	0x20000918
   1c1d8:	2000092b 	.word	0x2000092b

0001c1dc <waitStableLineOver>:

bool waitStableLineOver(void)
{
   1c1dc:	b580      	push	{r7, lr}
   1c1de:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
   1c1e0:	4b0d      	ldr	r3, [pc, #52]	; (1c218 <waitStableLineOver+0x3c>)
   1c1e2:	781b      	ldrb	r3, [r3, #0]
   1c1e4:	2b00      	cmp	r3, #0
   1c1e6:	d00e      	beq.n	1c206 <waitStableLineOver+0x2a>
   1c1e8:	4b0c      	ldr	r3, [pc, #48]	; (1c21c <waitStableLineOver+0x40>)
   1c1ea:	4798      	blx	r3
   1c1ec:	0002      	movs	r2, r0
   1c1ee:	4b0c      	ldr	r3, [pc, #48]	; (1c220 <waitStableLineOver+0x44>)
   1c1f0:	681b      	ldr	r3, [r3, #0]
   1c1f2:	1ad3      	subs	r3, r2, r3
   1c1f4:	4a0b      	ldr	r2, [pc, #44]	; (1c224 <waitStableLineOver+0x48>)
   1c1f6:	7812      	ldrb	r2, [r2, #0]
   1c1f8:	0011      	movs	r1, r2
   1c1fa:	2264      	movs	r2, #100	; 0x64
   1c1fc:	434a      	muls	r2, r1
   1c1fe:	4293      	cmp	r3, r2
   1c200:	d301      	bcc.n	1c206 <waitStableLineOver+0x2a>
   1c202:	2301      	movs	r3, #1
   1c204:	e000      	b.n	1c208 <waitStableLineOver+0x2c>
   1c206:	2300      	movs	r3, #0
   1c208:	1c1a      	adds	r2, r3, #0
   1c20a:	2301      	movs	r3, #1
   1c20c:	4013      	ands	r3, r2
   1c20e:	b2db      	uxtb	r3, r3
}
   1c210:	0018      	movs	r0, r3
   1c212:	46bd      	mov	sp, r7
   1c214:	bd80      	pop	{r7, pc}
   1c216:	46c0      	nop			; (mov r8, r8)
   1c218:	20000a11 	.word	0x20000a11
   1c21c:	00020ccd 	.word	0x00020ccd
   1c220:	200009d0 	.word	0x200009d0
   1c224:	200009e1 	.word	0x200009e1

0001c228 <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
   1c228:	b580      	push	{r7, lr}
   1c22a:	b082      	sub	sp, #8
   1c22c:	af00      	add	r7, sp, #0
   1c22e:	0002      	movs	r2, r0
   1c230:	1dfb      	adds	r3, r7, #7
   1c232:	701a      	strb	r2, [r3, #0]
   1c234:	1dbb      	adds	r3, r7, #6
   1c236:	1c0a      	adds	r2, r1, #0
   1c238:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
   1c23a:	4b5f      	ldr	r3, [pc, #380]	; (1c3b8 <startMotor+0x190>)
   1c23c:	2200      	movs	r2, #0
   1c23e:	701a      	strb	r2, [r3, #0]

	//if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
	//((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
	//((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
	
	if (forcedStart || 																														//AC Phase is Presnet
   1c240:	1dbb      	adds	r3, r7, #6
   1c242:	781b      	ldrb	r3, [r3, #0]
   1c244:	2b00      	cmp	r3, #0
   1c246:	d122      	bne.n	1c28e <startMotor+0x66>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1c248:	4b5c      	ldr	r3, [pc, #368]	; (1c3bc <startMotor+0x194>)
   1c24a:	4798      	blx	r3
   1c24c:	0003      	movs	r3, r0
	if (forcedStart || 																														//AC Phase is Presnet
   1c24e:	2b03      	cmp	r3, #3
   1c250:	d00c      	beq.n	1c26c <startMotor+0x44>
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1c252:	4b5a      	ldr	r3, [pc, #360]	; (1c3bc <startMotor+0x194>)
   1c254:	4798      	blx	r3
   1c256:	0003      	movs	r3, r0
   1c258:	2b02      	cmp	r3, #2
   1c25a:	d000      	beq.n	1c25e <startMotor+0x36>
   1c25c:	e097      	b.n	1c38e <startMotor+0x166>
   1c25e:	4b58      	ldr	r3, [pc, #352]	; (1c3c0 <startMotor+0x198>)
   1c260:	2220      	movs	r2, #32
   1c262:	5c9b      	ldrb	r3, [r3, r2]
   1c264:	b2db      	uxtb	r3, r3
   1c266:	2b00      	cmp	r3, #0
   1c268:	d000      	beq.n	1c26c <startMotor+0x44>
   1c26a:	e090      	b.n	1c38e <startMotor+0x166>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1c26c:	4b54      	ldr	r3, [pc, #336]	; (1c3c0 <startMotor+0x198>)
   1c26e:	2224      	movs	r2, #36	; 0x24
   1c270:	5c9b      	ldrb	r3, [r3, r2]
   1c272:	b2db      	uxtb	r3, r3
	(((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
   1c274:	2b00      	cmp	r3, #0
   1c276:	d003      	beq.n	1c280 <startMotor+0x58>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
   1c278:	4b52      	ldr	r3, [pc, #328]	; (1c3c4 <startMotor+0x19c>)
   1c27a:	4798      	blx	r3
   1c27c:	1e03      	subs	r3, r0, #0
   1c27e:	d106      	bne.n	1c28e <startMotor+0x66>
   1c280:	4b4f      	ldr	r3, [pc, #316]	; (1c3c0 <startMotor+0x198>)
   1c282:	2224      	movs	r2, #36	; 0x24
   1c284:	5c9b      	ldrb	r3, [r3, r2]
   1c286:	b2db      	uxtb	r3, r3
   1c288:	2b00      	cmp	r3, #0
   1c28a:	d000      	beq.n	1c28e <startMotor+0x66>
   1c28c:	e07f      	b.n	1c38e <startMotor+0x166>
	{
		if (!getMotorState())
   1c28e:	4b4e      	ldr	r3, [pc, #312]	; (1c3c8 <startMotor+0x1a0>)
   1c290:	4798      	blx	r3
   1c292:	0003      	movs	r3, r0
   1c294:	001a      	movs	r2, r3
   1c296:	2301      	movs	r3, #1
   1c298:	4053      	eors	r3, r2
   1c29a:	b2db      	uxtb	r3, r3
   1c29c:	2b00      	cmp	r3, #0
   1c29e:	d100      	bne.n	1c2a2 <startMotor+0x7a>
   1c2a0:	e06d      	b.n	1c37e <startMotor+0x156>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
   1c2a2:	4b4a      	ldr	r3, [pc, #296]	; (1c3cc <startMotor+0x1a4>)
   1c2a4:	795b      	ldrb	r3, [r3, #5]
   1c2a6:	2b00      	cmp	r3, #0
   1c2a8:	d036      	beq.n	1c318 <startMotor+0xf0>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
   1c2aa:	4b45      	ldr	r3, [pc, #276]	; (1c3c0 <startMotor+0x198>)
   1c2ac:	7fdb      	ldrb	r3, [r3, #31]
   1c2ae:	b2db      	uxtb	r3, r3
   1c2b0:	2b00      	cmp	r3, #0
   1c2b2:	d113      	bne.n	1c2dc <startMotor+0xb4>
   1c2b4:	4b46      	ldr	r3, [pc, #280]	; (1c3d0 <startMotor+0x1a8>)
   1c2b6:	4798      	blx	r3
   1c2b8:	1e03      	subs	r3, r0, #0
   1c2ba:	d10f      	bne.n	1c2dc <startMotor+0xb4>
				{
					if (commanded)
   1c2bc:	1dfb      	adds	r3, r7, #7
   1c2be:	781b      	ldrb	r3, [r3, #0]
   1c2c0:	2b00      	cmp	r3, #0
   1c2c2:	d003      	beq.n	1c2cc <startMotor+0xa4>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
   1c2c4:	2054      	movs	r0, #84	; 0x54
   1c2c6:	4b43      	ldr	r3, [pc, #268]	; (1c3d4 <startMotor+0x1ac>)
   1c2c8:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
   1c2ca:	e071      	b.n	1c3b0 <startMotor+0x188>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1c2cc:	204e      	movs	r0, #78	; 0x4e
   1c2ce:	4b42      	ldr	r3, [pc, #264]	; (1c3d8 <startMotor+0x1b0>)
   1c2d0:	4798      	blx	r3
   1c2d2:	0003      	movs	r3, r0
   1c2d4:	001a      	movs	r2, r3
   1c2d6:	4b41      	ldr	r3, [pc, #260]	; (1c3dc <startMotor+0x1b4>)
   1c2d8:	701a      	strb	r2, [r3, #0]
					return;
   1c2da:	e069      	b.n	1c3b0 <startMotor+0x188>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
   1c2dc:	4b3b      	ldr	r3, [pc, #236]	; (1c3cc <startMotor+0x1a4>)
   1c2de:	791b      	ldrb	r3, [r3, #4]
   1c2e0:	2b00      	cmp	r3, #0
   1c2e2:	d019      	beq.n	1c318 <startMotor+0xf0>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
   1c2e4:	4b36      	ldr	r3, [pc, #216]	; (1c3c0 <startMotor+0x198>)
   1c2e6:	7fdb      	ldrb	r3, [r3, #31]
   1c2e8:	b2db      	uxtb	r3, r3
   1c2ea:	2b00      	cmp	r3, #0
   1c2ec:	d114      	bne.n	1c318 <startMotor+0xf0>
   1c2ee:	4b3c      	ldr	r3, [pc, #240]	; (1c3e0 <startMotor+0x1b8>)
   1c2f0:	4798      	blx	r3
   1c2f2:	0003      	movs	r3, r0
   1c2f4:	2b02      	cmp	r3, #2
   1c2f6:	d10f      	bne.n	1c318 <startMotor+0xf0>
					{
						if(commanded)
   1c2f8:	1dfb      	adds	r3, r7, #7
   1c2fa:	781b      	ldrb	r3, [r3, #0]
   1c2fc:	2b00      	cmp	r3, #0
   1c2fe:	d003      	beq.n	1c308 <startMotor+0xe0>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
   1c300:	2056      	movs	r0, #86	; 0x56
   1c302:	4b34      	ldr	r3, [pc, #208]	; (1c3d4 <startMotor+0x1ac>)
   1c304:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
   1c306:	e053      	b.n	1c3b0 <startMotor+0x188>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
   1c308:	2056      	movs	r0, #86	; 0x56
   1c30a:	4b33      	ldr	r3, [pc, #204]	; (1c3d8 <startMotor+0x1b0>)
   1c30c:	4798      	blx	r3
   1c30e:	0003      	movs	r3, r0
   1c310:	001a      	movs	r2, r3
   1c312:	4b32      	ldr	r3, [pc, #200]	; (1c3dc <startMotor+0x1b4>)
   1c314:	745a      	strb	r2, [r3, #17]
						return;
   1c316:	e04b      	b.n	1c3b0 <startMotor+0x188>
					}
				}
			}

			STOP_RELAY_ON;
   1c318:	2101      	movs	r1, #1
   1c31a:	202c      	movs	r0, #44	; 0x2c
   1c31c:	4b31      	ldr	r3, [pc, #196]	; (1c3e4 <startMotor+0x1bc>)
   1c31e:	4798      	blx	r3
			START_RELAY_ON;
   1c320:	2101      	movs	r1, #1
   1c322:	202d      	movs	r0, #45	; 0x2d
   1c324:	4b2f      	ldr	r3, [pc, #188]	; (1c3e4 <startMotor+0x1bc>)
   1c326:	4798      	blx	r3
			stopMotorCommandGiven=false;
   1c328:	4b2f      	ldr	r3, [pc, #188]	; (1c3e8 <startMotor+0x1c0>)
   1c32a:	2200      	movs	r2, #0
   1c32c:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
   1c32e:	4b2f      	ldr	r3, [pc, #188]	; (1c3ec <startMotor+0x1c4>)
   1c330:	4798      	blx	r3
   1c332:	0002      	movs	r2, r0
   1c334:	4b2e      	ldr	r3, [pc, #184]	; (1c3f0 <startMotor+0x1c8>)
   1c336:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
   1c338:	4b2e      	ldr	r3, [pc, #184]	; (1c3f4 <startMotor+0x1cc>)
   1c33a:	2201      	movs	r2, #1
   1c33c:	701a      	strb	r2, [r3, #0]

			if(user_settings_parameter_struct.motorVoltageBypass==MOTOR_VOLTAGE_BYPASS_ON)
   1c33e:	4b20      	ldr	r3, [pc, #128]	; (1c3c0 <startMotor+0x198>)
   1c340:	2227      	movs	r2, #39	; 0x27
   1c342:	5c9b      	ldrb	r3, [r3, r2]
   1c344:	b2db      	uxtb	r3, r3
   1c346:	2b01      	cmp	r3, #1
   1c348:	d107      	bne.n	1c35a <startMotor+0x132>
			{
				motorRelatedVoltageBypassOn=true;
   1c34a:	4b2b      	ldr	r3, [pc, #172]	; (1c3f8 <startMotor+0x1d0>)
   1c34c:	2201      	movs	r2, #1
   1c34e:	701a      	strb	r2, [r3, #0]
				motorVoltageBypassTimerTime=xTaskGetTickCount();
   1c350:	4b26      	ldr	r3, [pc, #152]	; (1c3ec <startMotor+0x1c4>)
   1c352:	4798      	blx	r3
   1c354:	0002      	movs	r2, r0
   1c356:	4b29      	ldr	r3, [pc, #164]	; (1c3fc <startMotor+0x1d4>)
   1c358:	601a      	str	r2, [r3, #0]
			}

			setMotorState(true);
   1c35a:	2001      	movs	r0, #1
   1c35c:	4b28      	ldr	r3, [pc, #160]	; (1c400 <startMotor+0x1d8>)
   1c35e:	4798      	blx	r3

			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c360:	4b1a      	ldr	r3, [pc, #104]	; (1c3cc <startMotor+0x1a4>)
   1c362:	785b      	ldrb	r3, [r3, #1]
   1c364:	2b00      	cmp	r3, #0
   1c366:	d005      	beq.n	1c374 <startMotor+0x14c>
			{
				enableCurrentBuffer=false;
   1c368:	4b26      	ldr	r3, [pc, #152]	; (1c404 <startMotor+0x1dc>)
   1c36a:	2200      	movs	r2, #0
   1c36c:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
   1c36e:	4b26      	ldr	r3, [pc, #152]	; (1c408 <startMotor+0x1e0>)
   1c370:	2200      	movs	r2, #0
   1c372:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
   1c374:	4b25      	ldr	r3, [pc, #148]	; (1c40c <startMotor+0x1e4>)
   1c376:	1dfa      	adds	r2, r7, #7
   1c378:	7812      	ldrb	r2, [r2, #0]
   1c37a:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
   1c37c:	e017      	b.n	1c3ae <startMotor+0x186>
		}
		else
		{
			if (commanded)
   1c37e:	1dfb      	adds	r3, r7, #7
   1c380:	781b      	ldrb	r3, [r3, #0]
   1c382:	2b00      	cmp	r3, #0
   1c384:	d013      	beq.n	1c3ae <startMotor+0x186>
			{
				setMotorMGRResponse('+');		//motor is already on
   1c386:	202b      	movs	r0, #43	; 0x2b
   1c388:	4b12      	ldr	r3, [pc, #72]	; (1c3d4 <startMotor+0x1ac>)
   1c38a:	4798      	blx	r3
		if (!getMotorState())
   1c38c:	e00f      	b.n	1c3ae <startMotor+0x186>
			}
		}
	}
	else
	{
		if (commanded)
   1c38e:	1dfb      	adds	r3, r7, #7
   1c390:	781b      	ldrb	r3, [r3, #0]
   1c392:	2b00      	cmp	r3, #0
   1c394:	d003      	beq.n	1c39e <startMotor+0x176>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
   1c396:	204e      	movs	r0, #78	; 0x4e
   1c398:	4b0e      	ldr	r3, [pc, #56]	; (1c3d4 <startMotor+0x1ac>)
   1c39a:	4798      	blx	r3
   1c39c:	e008      	b.n	1c3b0 <startMotor+0x188>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1c39e:	204e      	movs	r0, #78	; 0x4e
   1c3a0:	4b0d      	ldr	r3, [pc, #52]	; (1c3d8 <startMotor+0x1b0>)
   1c3a2:	4798      	blx	r3
   1c3a4:	0003      	movs	r3, r0
   1c3a6:	001a      	movs	r2, r3
   1c3a8:	4b0c      	ldr	r3, [pc, #48]	; (1c3dc <startMotor+0x1b4>)
   1c3aa:	701a      	strb	r2, [r3, #0]
   1c3ac:	e000      	b.n	1c3b0 <startMotor+0x188>
		if (!getMotorState())
   1c3ae:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1c3b0:	46bd      	mov	sp, r7
   1c3b2:	b002      	add	sp, #8
   1c3b4:	bd80      	pop	{r7, pc}
   1c3b6:	46c0      	nop			; (mov r8, r8)
   1c3b8:	2000099a 	.word	0x2000099a
   1c3bc:	0001baa5 	.word	0x0001baa5
   1c3c0:	20000854 	.word	0x20000854
   1c3c4:	0001bad9 	.word	0x0001bad9
   1c3c8:	0001bb0d 	.word	0x0001bb0d
   1c3cc:	2000082c 	.word	0x2000082c
   1c3d0:	0001a1f1 	.word	0x0001a1f1
   1c3d4:	00014d49 	.word	0x00014d49
   1c3d8:	00014b69 	.word	0x00014b69
   1c3dc:	20000918 	.word	0x20000918
   1c3e0:	0001a0c1 	.word	0x0001a0c1
   1c3e4:	00019f91 	.word	0x00019f91
   1c3e8:	20000a64 	.word	0x20000a64
   1c3ec:	00020ccd 	.word	0x00020ccd
   1c3f0:	20000994 	.word	0x20000994
   1c3f4:	20000999 	.word	0x20000999
   1c3f8:	20000973 	.word	0x20000973
   1c3fc:	20000984 	.word	0x20000984
   1c400:	0001bb21 	.word	0x0001bb21
   1c404:	20000960 	.word	0x20000960
   1c408:	2000097e 	.word	0x2000097e
   1c40c:	20000914 	.word	0x20000914

0001c410 <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
   1c410:	b590      	push	{r4, r7, lr}
   1c412:	b083      	sub	sp, #12
   1c414:	af00      	add	r7, sp, #0
   1c416:	0004      	movs	r4, r0
   1c418:	0008      	movs	r0, r1
   1c41a:	0011      	movs	r1, r2
   1c41c:	1dfb      	adds	r3, r7, #7
   1c41e:	1c22      	adds	r2, r4, #0
   1c420:	701a      	strb	r2, [r3, #0]
   1c422:	1dbb      	adds	r3, r7, #6
   1c424:	1c02      	adds	r2, r0, #0
   1c426:	701a      	strb	r2, [r3, #0]
   1c428:	1d7b      	adds	r3, r7, #5
   1c42a:	1c0a      	adds	r2, r1, #0
   1c42c:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
   1c42e:	1dbb      	adds	r3, r7, #6
   1c430:	781b      	ldrb	r3, [r3, #0]
   1c432:	2b00      	cmp	r3, #0
   1c434:	d103      	bne.n	1c43e <stopMotor+0x2e>
   1c436:	4b22      	ldr	r3, [pc, #136]	; (1c4c0 <stopMotor+0xb0>)
   1c438:	4798      	blx	r3
   1c43a:	1e03      	subs	r3, r0, #0
   1c43c:	d033      	beq.n	1c4a6 <stopMotor+0x96>
	{
		singlePhasingTimerOn = false;
   1c43e:	4b21      	ldr	r3, [pc, #132]	; (1c4c4 <stopMotor+0xb4>)
   1c440:	2200      	movs	r2, #0
   1c442:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
   1c444:	4b20      	ldr	r3, [pc, #128]	; (1c4c8 <stopMotor+0xb8>)
   1c446:	2225      	movs	r2, #37	; 0x25
   1c448:	5c9b      	ldrb	r3, [r3, r2]
   1c44a:	b2db      	uxtb	r3, r3
   1c44c:	2b01      	cmp	r3, #1
   1c44e:	d105      	bne.n	1c45c <stopMotor+0x4c>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
   1c450:	4b1e      	ldr	r3, [pc, #120]	; (1c4cc <stopMotor+0xbc>)
   1c452:	8a9b      	ldrh	r3, [r3, #20]
   1c454:	b29b      	uxth	r3, r3
   1c456:	b2da      	uxtb	r2, r3
   1c458:	4b1d      	ldr	r3, [pc, #116]	; (1c4d0 <stopMotor+0xc0>)
   1c45a:	701a      	strb	r2, [r3, #0]
		}
		motorRelatedVoltageBypassOn=false;
   1c45c:	4b1d      	ldr	r3, [pc, #116]	; (1c4d4 <stopMotor+0xc4>)
   1c45e:	2200      	movs	r2, #0
   1c460:	701a      	strb	r2, [r3, #0]
		STOP_RELAY_OFF;
   1c462:	2100      	movs	r1, #0
   1c464:	202c      	movs	r0, #44	; 0x2c
   1c466:	4b1c      	ldr	r3, [pc, #112]	; (1c4d8 <stopMotor+0xc8>)
   1c468:	4798      	blx	r3
		stopMotorCommandGiven=true;
   1c46a:	4b1c      	ldr	r3, [pc, #112]	; (1c4dc <stopMotor+0xcc>)
   1c46c:	2201      	movs	r2, #1
   1c46e:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
   1c470:	4b1b      	ldr	r3, [pc, #108]	; (1c4e0 <stopMotor+0xd0>)
   1c472:	4798      	blx	r3
   1c474:	0002      	movs	r2, r0
   1c476:	4b1b      	ldr	r3, [pc, #108]	; (1c4e4 <stopMotor+0xd4>)
   1c478:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
   1c47a:	4b1b      	ldr	r3, [pc, #108]	; (1c4e8 <stopMotor+0xd8>)
   1c47c:	2201      	movs	r2, #1
   1c47e:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
   1c480:	2000      	movs	r0, #0
   1c482:	4b1a      	ldr	r3, [pc, #104]	; (1c4ec <stopMotor+0xdc>)
   1c484:	4798      	blx	r3
		gotOffCommand = commanded;
   1c486:	4b1a      	ldr	r3, [pc, #104]	; (1c4f0 <stopMotor+0xe0>)
   1c488:	1dfa      	adds	r2, r7, #7
   1c48a:	7812      	ldrb	r2, [r2, #0]
   1c48c:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
   1c48e:	4b19      	ldr	r3, [pc, #100]	; (1c4f4 <stopMotor+0xe4>)
   1c490:	1d7a      	adds	r2, r7, #5
   1c492:	7812      	ldrb	r2, [r2, #0]
   1c494:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c496:	4b18      	ldr	r3, [pc, #96]	; (1c4f8 <stopMotor+0xe8>)
   1c498:	785b      	ldrb	r3, [r3, #1]
   1c49a:	2b00      	cmp	r3, #0
   1c49c:	d00b      	beq.n	1c4b6 <stopMotor+0xa6>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
   1c49e:	4b17      	ldr	r3, [pc, #92]	; (1c4fc <stopMotor+0xec>)
   1c4a0:	2200      	movs	r2, #0
   1c4a2:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c4a4:	e007      	b.n	1c4b6 <stopMotor+0xa6>
		}
	}
	else
	{
		if (commanded)
   1c4a6:	1dfb      	adds	r3, r7, #7
   1c4a8:	781b      	ldrb	r3, [r3, #0]
   1c4aa:	2b00      	cmp	r3, #0
   1c4ac:	d003      	beq.n	1c4b6 <stopMotor+0xa6>
		{
			setMotorMGRResponse('-');	//motor is already off
   1c4ae:	202d      	movs	r0, #45	; 0x2d
   1c4b0:	4b13      	ldr	r3, [pc, #76]	; (1c500 <stopMotor+0xf0>)
   1c4b2:	4798      	blx	r3
		}
	}
}
   1c4b4:	e7ff      	b.n	1c4b6 <stopMotor+0xa6>
   1c4b6:	46c0      	nop			; (mov r8, r8)
   1c4b8:	46bd      	mov	sp, r7
   1c4ba:	b003      	add	sp, #12
   1c4bc:	bd90      	pop	{r4, r7, pc}
   1c4be:	46c0      	nop			; (mov r8, r8)
   1c4c0:	0001bb0d 	.word	0x0001bb0d
   1c4c4:	20000991 	.word	0x20000991
   1c4c8:	20000854 	.word	0x20000854
   1c4cc:	200008e8 	.word	0x200008e8
   1c4d0:	200009f8 	.word	0x200009f8
   1c4d4:	20000973 	.word	0x20000973
   1c4d8:	00019f91 	.word	0x00019f91
   1c4dc:	20000a64 	.word	0x20000a64
   1c4e0:	00020ccd 	.word	0x00020ccd
   1c4e4:	200009ac 	.word	0x200009ac
   1c4e8:	20000988 	.word	0x20000988
   1c4ec:	0001bb21 	.word	0x0001bb21
   1c4f0:	20000a10 	.word	0x20000a10
   1c4f4:	200009a8 	.word	0x200009a8
   1c4f8:	2000082c 	.word	0x2000082c
   1c4fc:	2000097e 	.word	0x2000097e
   1c500:	00014d49 	.word	0x00014d49

0001c504 <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
   1c504:	b580      	push	{r7, lr}
   1c506:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - tempStartTimer) >= ((uint32_t)user_settings_parameter_struct.autoStartTimeAddress * 1000L));
   1c508:	4b09      	ldr	r3, [pc, #36]	; (1c530 <startMotorTimerOver+0x2c>)
   1c50a:	4798      	blx	r3
   1c50c:	0002      	movs	r2, r0
   1c50e:	4b09      	ldr	r3, [pc, #36]	; (1c534 <startMotorTimerOver+0x30>)
   1c510:	681b      	ldr	r3, [r3, #0]
   1c512:	1ad1      	subs	r1, r2, r3
   1c514:	4b08      	ldr	r3, [pc, #32]	; (1c538 <startMotorTimerOver+0x34>)
   1c516:	885b      	ldrh	r3, [r3, #2]
   1c518:	b29b      	uxth	r3, r3
   1c51a:	001a      	movs	r2, r3
   1c51c:	23fa      	movs	r3, #250	; 0xfa
   1c51e:	009b      	lsls	r3, r3, #2
   1c520:	435a      	muls	r2, r3
   1c522:	2300      	movs	r3, #0
   1c524:	4291      	cmp	r1, r2
   1c526:	415b      	adcs	r3, r3
   1c528:	b2db      	uxtb	r3, r3
}
   1c52a:	0018      	movs	r0, r3
   1c52c:	46bd      	mov	sp, r7
   1c52e:	bd80      	pop	{r7, pc}
   1c530:	00020ccd 	.word	0x00020ccd
   1c534:	200009a4 	.word	0x200009a4
   1c538:	20000854 	.word	0x20000854

0001c53c <unknownMotorOff>:

void unknownMotorOff(void)
{
   1c53c:	b580      	push	{r7, lr}
   1c53e:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
   1c540:	2200      	movs	r2, #0
   1c542:	2101      	movs	r1, #1
   1c544:	2000      	movs	r0, #0
   1c546:	4b06      	ldr	r3, [pc, #24]	; (1c560 <unknownMotorOff+0x24>)
   1c548:	4798      	blx	r3
	simEventTemp[2] = registerEvent('_');
   1c54a:	205f      	movs	r0, #95	; 0x5f
   1c54c:	4b05      	ldr	r3, [pc, #20]	; (1c564 <unknownMotorOff+0x28>)
   1c54e:	4798      	blx	r3
   1c550:	0003      	movs	r3, r0
   1c552:	001a      	movs	r2, r3
   1c554:	4b04      	ldr	r3, [pc, #16]	; (1c568 <unknownMotorOff+0x2c>)
   1c556:	709a      	strb	r2, [r3, #2]
}
   1c558:	46c0      	nop			; (mov r8, r8)
   1c55a:	46bd      	mov	sp, r7
   1c55c:	bd80      	pop	{r7, pc}
   1c55e:	46c0      	nop			; (mov r8, r8)
   1c560:	0001c411 	.word	0x0001c411
   1c564:	00014b69 	.word	0x00014b69
   1c568:	20000918 	.word	0x20000918

0001c56c <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
   1c56c:	b580      	push	{r7, lr}
   1c56e:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > (((uint16_t)singlePhasingTime) * 100));
   1c570:	4b0d      	ldr	r3, [pc, #52]	; (1c5a8 <singlePhasingTimerOver+0x3c>)
   1c572:	781b      	ldrb	r3, [r3, #0]
   1c574:	2b00      	cmp	r3, #0
   1c576:	d00e      	beq.n	1c596 <singlePhasingTimerOver+0x2a>
   1c578:	4b0c      	ldr	r3, [pc, #48]	; (1c5ac <singlePhasingTimerOver+0x40>)
   1c57a:	4798      	blx	r3
   1c57c:	0002      	movs	r2, r0
   1c57e:	4b0c      	ldr	r3, [pc, #48]	; (1c5b0 <singlePhasingTimerOver+0x44>)
   1c580:	681b      	ldr	r3, [r3, #0]
   1c582:	1ad3      	subs	r3, r2, r3
   1c584:	4a0b      	ldr	r2, [pc, #44]	; (1c5b4 <singlePhasingTimerOver+0x48>)
   1c586:	7812      	ldrb	r2, [r2, #0]
   1c588:	0011      	movs	r1, r2
   1c58a:	2264      	movs	r2, #100	; 0x64
   1c58c:	434a      	muls	r2, r1
   1c58e:	4293      	cmp	r3, r2
   1c590:	d901      	bls.n	1c596 <singlePhasingTimerOver+0x2a>
   1c592:	2301      	movs	r3, #1
   1c594:	e000      	b.n	1c598 <singlePhasingTimerOver+0x2c>
   1c596:	2300      	movs	r3, #0
   1c598:	1c1a      	adds	r2, r3, #0
   1c59a:	2301      	movs	r3, #1
   1c59c:	4013      	ands	r3, r2
   1c59e:	b2db      	uxtb	r3, r3
}
   1c5a0:	0018      	movs	r0, r3
   1c5a2:	46bd      	mov	sp, r7
   1c5a4:	bd80      	pop	{r7, pc}
   1c5a6:	46c0      	nop			; (mov r8, r8)
   1c5a8:	20000991 	.word	0x20000991
   1c5ac:	00020ccd 	.word	0x00020ccd
   1c5b0:	20000978 	.word	0x20000978
   1c5b4:	20000970 	.word	0x20000970

0001c5b8 <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
   1c5b8:	b580      	push	{r7, lr}
   1c5ba:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
   1c5bc:	2101      	movs	r1, #1
   1c5be:	2027      	movs	r0, #39	; 0x27
   1c5c0:	4b08      	ldr	r3, [pc, #32]	; (1c5e4 <operateOnSinglePhasing+0x2c>)
   1c5c2:	4798      	blx	r3
	stopMotor(false,true,false);
   1c5c4:	2200      	movs	r2, #0
   1c5c6:	2101      	movs	r1, #1
   1c5c8:	2000      	movs	r0, #0
   1c5ca:	4b07      	ldr	r3, [pc, #28]	; (1c5e8 <operateOnSinglePhasing+0x30>)
   1c5cc:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
   1c5ce:	2046      	movs	r0, #70	; 0x46
   1c5d0:	4b06      	ldr	r3, [pc, #24]	; (1c5ec <operateOnSinglePhasing+0x34>)
   1c5d2:	4798      	blx	r3
   1c5d4:	0003      	movs	r3, r0
   1c5d6:	001a      	movs	r2, r3
   1c5d8:	4b05      	ldr	r3, [pc, #20]	; (1c5f0 <operateOnSinglePhasing+0x38>)
   1c5da:	70da      	strb	r2, [r3, #3]
}
   1c5dc:	46c0      	nop			; (mov r8, r8)
   1c5de:	46bd      	mov	sp, r7
   1c5e0:	bd80      	pop	{r7, pc}
   1c5e2:	46c0      	nop			; (mov r8, r8)
   1c5e4:	00019f91 	.word	0x00019f91
   1c5e8:	0001c411 	.word	0x0001c411
   1c5ec:	00014b69 	.word	0x00014b69
   1c5f0:	20000918 	.word	0x20000918

0001c5f4 <terminateStopRelay>:

void terminateStopRelay(void)
{
   1c5f4:	b580      	push	{r7, lr}
   1c5f6:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
   1c5f8:	4b28      	ldr	r3, [pc, #160]	; (1c69c <terminateStopRelay+0xa8>)
   1c5fa:	781b      	ldrb	r3, [r3, #0]
   1c5fc:	2b00      	cmp	r3, #0
   1c5fe:	d04a      	beq.n	1c696 <terminateStopRelay+0xa2>
   1c600:	4b27      	ldr	r3, [pc, #156]	; (1c6a0 <terminateStopRelay+0xac>)
   1c602:	4798      	blx	r3
   1c604:	0002      	movs	r2, r0
   1c606:	4b27      	ldr	r3, [pc, #156]	; (1c6a4 <terminateStopRelay+0xb0>)
   1c608:	681b      	ldr	r3, [r3, #0]
   1c60a:	1ad3      	subs	r3, r2, r3
   1c60c:	4a26      	ldr	r2, [pc, #152]	; (1c6a8 <terminateStopRelay+0xb4>)
   1c60e:	7812      	ldrb	r2, [r2, #0]
   1c610:	0011      	movs	r1, r2
   1c612:	2264      	movs	r2, #100	; 0x64
   1c614:	434a      	muls	r2, r1
   1c616:	4293      	cmp	r3, r2
   1c618:	d93d      	bls.n	1c696 <terminateStopRelay+0xa2>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
   1c61a:	4b20      	ldr	r3, [pc, #128]	; (1c69c <terminateStopRelay+0xa8>)
   1c61c:	2200      	movs	r2, #0
   1c61e:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
   1c620:	4b22      	ldr	r3, [pc, #136]	; (1c6ac <terminateStopRelay+0xb8>)
   1c622:	2201      	movs	r2, #1
   1c624:	701a      	strb	r2, [r3, #0]
		if(!getMotorState_from_pin())															//motor has turned off OR NOT
   1c626:	4b22      	ldr	r3, [pc, #136]	; (1c6b0 <terminateStopRelay+0xbc>)
   1c628:	4798      	blx	r3
   1c62a:	0003      	movs	r3, r0
   1c62c:	001a      	movs	r2, r3
   1c62e:	2301      	movs	r3, #1
   1c630:	4053      	eors	r3, r2
   1c632:	b2db      	uxtb	r3, r3
   1c634:	2b00      	cmp	r3, #0
   1c636:	d019      	beq.n	1c66c <terminateStopRelay+0x78>
		{
			if (gotOffCommand)
   1c638:	4b1e      	ldr	r3, [pc, #120]	; (1c6b4 <terminateStopRelay+0xc0>)
   1c63a:	781b      	ldrb	r3, [r3, #0]
   1c63c:	2b00      	cmp	r3, #0
   1c63e:	d006      	beq.n	1c64e <terminateStopRelay+0x5a>
			{
				gotOffCommand = false;
   1c640:	4b1c      	ldr	r3, [pc, #112]	; (1c6b4 <terminateStopRelay+0xc0>)
   1c642:	2200      	movs	r2, #0
   1c644:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
   1c646:	204f      	movs	r0, #79	; 0x4f
   1c648:	4b1b      	ldr	r3, [pc, #108]	; (1c6b8 <terminateStopRelay+0xc4>)
   1c64a:	4798      	blx	r3
   1c64c:	e020      	b.n	1c690 <terminateStopRelay+0x9c>
			}
			else if(offButtonPressed)
   1c64e:	4b1b      	ldr	r3, [pc, #108]	; (1c6bc <terminateStopRelay+0xc8>)
   1c650:	781b      	ldrb	r3, [r3, #0]
   1c652:	2b00      	cmp	r3, #0
   1c654:	d01c      	beq.n	1c690 <terminateStopRelay+0x9c>
			{
				offButtonPressed=false;
   1c656:	4b19      	ldr	r3, [pc, #100]	; (1c6bc <terminateStopRelay+0xc8>)
   1c658:	2200      	movs	r2, #0
   1c65a:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
   1c65c:	204f      	movs	r0, #79	; 0x4f
   1c65e:	4b18      	ldr	r3, [pc, #96]	; (1c6c0 <terminateStopRelay+0xcc>)
   1c660:	4798      	blx	r3
   1c662:	0003      	movs	r3, r0
   1c664:	001a      	movs	r2, r3
   1c666:	4b17      	ldr	r3, [pc, #92]	; (1c6c4 <terminateStopRelay+0xd0>)
   1c668:	721a      	strb	r2, [r3, #8]
   1c66a:	e011      	b.n	1c690 <terminateStopRelay+0x9c>
			}
		}
		else
		{
			if (gotOffCommand)
   1c66c:	4b11      	ldr	r3, [pc, #68]	; (1c6b4 <terminateStopRelay+0xc0>)
   1c66e:	781b      	ldrb	r3, [r3, #0]
   1c670:	2b00      	cmp	r3, #0
   1c672:	d006      	beq.n	1c682 <terminateStopRelay+0x8e>
			{
				gotOffCommand = false;
   1c674:	4b0f      	ldr	r3, [pc, #60]	; (1c6b4 <terminateStopRelay+0xc0>)
   1c676:	2200      	movs	r2, #0
   1c678:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
   1c67a:	2050      	movs	r0, #80	; 0x50
   1c67c:	4b0e      	ldr	r3, [pc, #56]	; (1c6b8 <terminateStopRelay+0xc4>)
   1c67e:	4798      	blx	r3
   1c680:	e006      	b.n	1c690 <terminateStopRelay+0x9c>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
   1c682:	2050      	movs	r0, #80	; 0x50
   1c684:	4b0e      	ldr	r3, [pc, #56]	; (1c6c0 <terminateStopRelay+0xcc>)
   1c686:	4798      	blx	r3
   1c688:	0003      	movs	r3, r0
   1c68a:	001a      	movs	r2, r3
   1c68c:	4b0d      	ldr	r3, [pc, #52]	; (1c6c4 <terminateStopRelay+0xd0>)
   1c68e:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
   1c690:	4b0a      	ldr	r3, [pc, #40]	; (1c6bc <terminateStopRelay+0xc8>)
   1c692:	2200      	movs	r2, #0
   1c694:	701a      	strb	r2, [r3, #0]
	}
}
   1c696:	46c0      	nop			; (mov r8, r8)
   1c698:	46bd      	mov	sp, r7
   1c69a:	bd80      	pop	{r7, pc}
   1c69c:	20000988 	.word	0x20000988
   1c6a0:	00020ccd 	.word	0x00020ccd
   1c6a4:	200009ac 	.word	0x200009ac
   1c6a8:	20000a67 	.word	0x20000a67
   1c6ac:	20000a64 	.word	0x20000a64
   1c6b0:	0001bb61 	.word	0x0001bb61
   1c6b4:	20000a10 	.word	0x20000a10
   1c6b8:	00014d49 	.word	0x00014d49
   1c6bc:	200009a8 	.word	0x200009a8
   1c6c0:	00014b69 	.word	0x00014b69
   1c6c4:	20000918 	.word	0x20000918

0001c6c8 <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
   1c6c8:	b580      	push	{r7, lr}
   1c6ca:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
   1c6cc:	4b14      	ldr	r3, [pc, #80]	; (1c720 <terminateStarDeltaTimer+0x58>)
   1c6ce:	781b      	ldrb	r3, [r3, #0]
   1c6d0:	2b00      	cmp	r3, #0
   1c6d2:	d021      	beq.n	1c718 <terminateStarDeltaTimer+0x50>
   1c6d4:	4b13      	ldr	r3, [pc, #76]	; (1c724 <terminateStarDeltaTimer+0x5c>)
   1c6d6:	4798      	blx	r3
   1c6d8:	0002      	movs	r2, r0
   1c6da:	4b13      	ldr	r3, [pc, #76]	; (1c728 <terminateStarDeltaTimer+0x60>)
   1c6dc:	681b      	ldr	r3, [r3, #0]
   1c6de:	1ad2      	subs	r2, r2, r3
   1c6e0:	4b12      	ldr	r3, [pc, #72]	; (1c72c <terminateStarDeltaTimer+0x64>)
   1c6e2:	88db      	ldrh	r3, [r3, #6]
   1c6e4:	b29b      	uxth	r3, r3
   1c6e6:	0019      	movs	r1, r3
   1c6e8:	23fa      	movs	r3, #250	; 0xfa
   1c6ea:	009b      	lsls	r3, r3, #2
   1c6ec:	434b      	muls	r3, r1
   1c6ee:	429a      	cmp	r2, r3
   1c6f0:	d912      	bls.n	1c718 <terminateStarDeltaTimer+0x50>
	{
		START_RELAY_OFF;
   1c6f2:	2100      	movs	r1, #0
   1c6f4:	202d      	movs	r0, #45	; 0x2d
   1c6f6:	4b0e      	ldr	r3, [pc, #56]	; (1c730 <terminateStarDeltaTimer+0x68>)
   1c6f8:	4798      	blx	r3
		starDeltaTimerOn=false;
   1c6fa:	4b09      	ldr	r3, [pc, #36]	; (1c720 <terminateStarDeltaTimer+0x58>)
   1c6fc:	2200      	movs	r2, #0
   1c6fe:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c700:	4b0c      	ldr	r3, [pc, #48]	; (1c734 <terminateStarDeltaTimer+0x6c>)
   1c702:	785b      	ldrb	r3, [r3, #1]
   1c704:	2b00      	cmp	r3, #0
   1c706:	d007      	beq.n	1c718 <terminateStarDeltaTimer+0x50>
		{
			enableCurrentBuffer=true;
   1c708:	4b0b      	ldr	r3, [pc, #44]	; (1c738 <terminateStarDeltaTimer+0x70>)
   1c70a:	2201      	movs	r2, #1
   1c70c:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
   1c70e:	4b05      	ldr	r3, [pc, #20]	; (1c724 <terminateStarDeltaTimer+0x5c>)
   1c710:	4798      	blx	r3
   1c712:	0002      	movs	r2, r0
   1c714:	4b04      	ldr	r3, [pc, #16]	; (1c728 <terminateStarDeltaTimer+0x60>)
   1c716:	601a      	str	r2, [r3, #0]
		}
	}
}
   1c718:	46c0      	nop			; (mov r8, r8)
   1c71a:	46bd      	mov	sp, r7
   1c71c:	bd80      	pop	{r7, pc}
   1c71e:	46c0      	nop			; (mov r8, r8)
   1c720:	2000099b 	.word	0x2000099b
   1c724:	00020ccd 	.word	0x00020ccd
   1c728:	20000994 	.word	0x20000994
   1c72c:	20000854 	.word	0x20000854
   1c730:	00019f91 	.word	0x00019f91
   1c734:	2000082c 	.word	0x2000082c
   1c738:	20000960 	.word	0x20000960

0001c73c <terminateStartRelay>:

void terminateStartRelay(void)
{
   1c73c:	b590      	push	{r4, r7, lr}
   1c73e:	b083      	sub	sp, #12
   1c740:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
   1c742:	4b37      	ldr	r3, [pc, #220]	; (1c820 <terminateStartRelay+0xe4>)
   1c744:	781b      	ldrb	r3, [r3, #0]
   1c746:	2b00      	cmp	r3, #0
   1c748:	d066      	beq.n	1c818 <terminateStartRelay+0xdc>
   1c74a:	4b36      	ldr	r3, [pc, #216]	; (1c824 <terminateStartRelay+0xe8>)
   1c74c:	4798      	blx	r3
   1c74e:	0002      	movs	r2, r0
   1c750:	4b35      	ldr	r3, [pc, #212]	; (1c828 <terminateStartRelay+0xec>)
   1c752:	681b      	ldr	r3, [r3, #0]
   1c754:	1ad3      	subs	r3, r2, r3
   1c756:	4a35      	ldr	r2, [pc, #212]	; (1c82c <terminateStartRelay+0xf0>)
   1c758:	7812      	ldrb	r2, [r2, #0]
   1c75a:	0011      	movs	r1, r2
   1c75c:	2264      	movs	r2, #100	; 0x64
   1c75e:	434a      	muls	r2, r1
   1c760:	4293      	cmp	r3, r2
   1c762:	d959      	bls.n	1c818 <terminateStartRelay+0xdc>
	{
		if((((uint32_t)user_settings_parameter_struct.starDeltaTimerAddress) * 1000L) <= (((uint32_t)startSequenceTimerTime)*100))
   1c764:	4b32      	ldr	r3, [pc, #200]	; (1c830 <terminateStartRelay+0xf4>)
   1c766:	88db      	ldrh	r3, [r3, #6]
   1c768:	b29b      	uxth	r3, r3
   1c76a:	001a      	movs	r2, r3
   1c76c:	23fa      	movs	r3, #250	; 0xfa
   1c76e:	009b      	lsls	r3, r3, #2
   1c770:	435a      	muls	r2, r3
   1c772:	4b2e      	ldr	r3, [pc, #184]	; (1c82c <terminateStartRelay+0xf0>)
   1c774:	781b      	ldrb	r3, [r3, #0]
   1c776:	0019      	movs	r1, r3
   1c778:	2364      	movs	r3, #100	; 0x64
   1c77a:	434b      	muls	r3, r1
   1c77c:	429a      	cmp	r2, r3
   1c77e:	d810      	bhi.n	1c7a2 <terminateStartRelay+0x66>
		{
			START_RELAY_OFF;
   1c780:	2100      	movs	r1, #0
   1c782:	202d      	movs	r0, #45	; 0x2d
   1c784:	4b2b      	ldr	r3, [pc, #172]	; (1c834 <terminateStartRelay+0xf8>)
   1c786:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
   1c788:	4b26      	ldr	r3, [pc, #152]	; (1c824 <terminateStartRelay+0xe8>)
   1c78a:	4798      	blx	r3
   1c78c:	0002      	movs	r2, r0
   1c78e:	4b26      	ldr	r3, [pc, #152]	; (1c828 <terminateStartRelay+0xec>)
   1c790:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1c792:	4b29      	ldr	r3, [pc, #164]	; (1c838 <terminateStartRelay+0xfc>)
   1c794:	785b      	ldrb	r3, [r3, #1]
   1c796:	2b00      	cmp	r3, #0
   1c798:	d006      	beq.n	1c7a8 <terminateStartRelay+0x6c>
			{
				enableCurrentBuffer=true;
   1c79a:	4b28      	ldr	r3, [pc, #160]	; (1c83c <terminateStartRelay+0x100>)
   1c79c:	2201      	movs	r2, #1
   1c79e:	701a      	strb	r2, [r3, #0]
   1c7a0:	e002      	b.n	1c7a8 <terminateStartRelay+0x6c>
			}
		}
		else
		{
			starDeltaTimerOn=true;
   1c7a2:	4b27      	ldr	r3, [pc, #156]	; (1c840 <terminateStartRelay+0x104>)
   1c7a4:	2201      	movs	r2, #1
   1c7a6:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
   1c7a8:	4b1d      	ldr	r3, [pc, #116]	; (1c820 <terminateStartRelay+0xe4>)
   1c7aa:	2200      	movs	r2, #0
   1c7ac:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
   1c7ae:	1dfc      	adds	r4, r7, #7
   1c7b0:	4b24      	ldr	r3, [pc, #144]	; (1c844 <terminateStartRelay+0x108>)
   1c7b2:	4798      	blx	r3
   1c7b4:	0003      	movs	r3, r0
   1c7b6:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
   1c7b8:	4b23      	ldr	r3, [pc, #140]	; (1c848 <terminateStartRelay+0x10c>)
   1c7ba:	781b      	ldrb	r3, [r3, #0]
   1c7bc:	2b00      	cmp	r3, #0
   1c7be:	d013      	beq.n	1c7e8 <terminateStartRelay+0xac>
		{
			gotOnCommand = false;
   1c7c0:	4b21      	ldr	r3, [pc, #132]	; (1c848 <terminateStartRelay+0x10c>)
   1c7c2:	2200      	movs	r2, #0
   1c7c4:	701a      	strb	r2, [r3, #0]
			if (motor)
   1c7c6:	1dfb      	adds	r3, r7, #7
   1c7c8:	781b      	ldrb	r3, [r3, #0]
   1c7ca:	2b00      	cmp	r3, #0
   1c7cc:	d003      	beq.n	1c7d6 <terminateStartRelay+0x9a>
			{
				setMotorMGRResponse('S'); // motor has started
   1c7ce:	2053      	movs	r0, #83	; 0x53
   1c7d0:	4b1e      	ldr	r3, [pc, #120]	; (1c84c <terminateStartRelay+0x110>)
   1c7d2:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
   1c7d4:	e020      	b.n	1c818 <terminateStartRelay+0xdc>
				stopMotor(false,true,false);
   1c7d6:	2200      	movs	r2, #0
   1c7d8:	2101      	movs	r1, #1
   1c7da:	2000      	movs	r0, #0
   1c7dc:	4b1c      	ldr	r3, [pc, #112]	; (1c850 <terminateStartRelay+0x114>)
   1c7de:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
   1c7e0:	204e      	movs	r0, #78	; 0x4e
   1c7e2:	4b1a      	ldr	r3, [pc, #104]	; (1c84c <terminateStartRelay+0x110>)
   1c7e4:	4798      	blx	r3
}
   1c7e6:	e017      	b.n	1c818 <terminateStartRelay+0xdc>
			if (motor)
   1c7e8:	1dfb      	adds	r3, r7, #7
   1c7ea:	781b      	ldrb	r3, [r3, #0]
   1c7ec:	2b00      	cmp	r3, #0
   1c7ee:	d007      	beq.n	1c800 <terminateStartRelay+0xc4>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
   1c7f0:	2053      	movs	r0, #83	; 0x53
   1c7f2:	4b18      	ldr	r3, [pc, #96]	; (1c854 <terminateStartRelay+0x118>)
   1c7f4:	4798      	blx	r3
   1c7f6:	0003      	movs	r3, r0
   1c7f8:	001a      	movs	r2, r3
   1c7fa:	4b17      	ldr	r3, [pc, #92]	; (1c858 <terminateStartRelay+0x11c>)
   1c7fc:	71da      	strb	r2, [r3, #7]
}
   1c7fe:	e00b      	b.n	1c818 <terminateStartRelay+0xdc>
				stopMotor(false,true,false);
   1c800:	2200      	movs	r2, #0
   1c802:	2101      	movs	r1, #1
   1c804:	2000      	movs	r0, #0
   1c806:	4b12      	ldr	r3, [pc, #72]	; (1c850 <terminateStartRelay+0x114>)
   1c808:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
   1c80a:	204e      	movs	r0, #78	; 0x4e
   1c80c:	4b11      	ldr	r3, [pc, #68]	; (1c854 <terminateStartRelay+0x118>)
   1c80e:	4798      	blx	r3
   1c810:	0003      	movs	r3, r0
   1c812:	001a      	movs	r2, r3
   1c814:	4b10      	ldr	r3, [pc, #64]	; (1c858 <terminateStartRelay+0x11c>)
   1c816:	701a      	strb	r2, [r3, #0]
}
   1c818:	46c0      	nop			; (mov r8, r8)
   1c81a:	46bd      	mov	sp, r7
   1c81c:	b003      	add	sp, #12
   1c81e:	bd90      	pop	{r4, r7, pc}
   1c820:	20000999 	.word	0x20000999
   1c824:	00020ccd 	.word	0x00020ccd
   1c828:	20000994 	.word	0x20000994
   1c82c:	20000a1c 	.word	0x20000a1c
   1c830:	20000854 	.word	0x20000854
   1c834:	00019f91 	.word	0x00019f91
   1c838:	2000082c 	.word	0x2000082c
   1c83c:	20000960 	.word	0x20000960
   1c840:	2000099b 	.word	0x2000099b
   1c844:	0001bb61 	.word	0x0001bb61
   1c848:	20000914 	.word	0x20000914
   1c84c:	00014d49 	.word	0x00014d49
   1c850:	0001c411 	.word	0x0001c411
   1c854:	00014b69 	.word	0x00014b69
   1c858:	20000918 	.word	0x20000918

0001c85c <statusOnCall>:

void statusOnCall(void)
{
   1c85c:	b590      	push	{r4, r7, lr}
   1c85e:	b083      	sub	sp, #12
   1c860:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
   1c862:	1dfb      	adds	r3, r7, #7
   1c864:	2200      	movs	r2, #0
   1c866:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
   1c868:	1dbc      	adds	r4, r7, #6
   1c86a:	4b3b      	ldr	r3, [pc, #236]	; (1c958 <statusOnCall+0xfc>)
   1c86c:	4798      	blx	r3
   1c86e:	0003      	movs	r3, r0
   1c870:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
   1c872:	1dbb      	adds	r3, r7, #6
   1c874:	781b      	ldrb	r3, [r3, #0]
   1c876:	2b00      	cmp	r3, #0
   1c878:	d109      	bne.n	1c88e <statusOnCall+0x32>
	{
		status[index++]='L';
   1c87a:	1dfb      	adds	r3, r7, #7
   1c87c:	781b      	ldrb	r3, [r3, #0]
   1c87e:	1dfa      	adds	r2, r7, #7
   1c880:	1c59      	adds	r1, r3, #1
   1c882:	7011      	strb	r1, [r2, #0]
   1c884:	001a      	movs	r2, r3
   1c886:	003b      	movs	r3, r7
   1c888:	214c      	movs	r1, #76	; 0x4c
   1c88a:	5499      	strb	r1, [r3, r2]
   1c88c:	e03b      	b.n	1c906 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
   1c88e:	1dbb      	adds	r3, r7, #6
   1c890:	781b      	ldrb	r3, [r3, #0]
   1c892:	2b02      	cmp	r3, #2
   1c894:	d109      	bne.n	1c8aa <statusOnCall+0x4e>
	{
		status[index++]='A';
   1c896:	1dfb      	adds	r3, r7, #7
   1c898:	781b      	ldrb	r3, [r3, #0]
   1c89a:	1dfa      	adds	r2, r7, #7
   1c89c:	1c59      	adds	r1, r3, #1
   1c89e:	7011      	strb	r1, [r2, #0]
   1c8a0:	001a      	movs	r2, r3
   1c8a2:	003b      	movs	r3, r7
   1c8a4:	2141      	movs	r1, #65	; 0x41
   1c8a6:	5499      	strb	r1, [r3, r2]
   1c8a8:	e02d      	b.n	1c906 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
   1c8aa:	1dbb      	adds	r3, r7, #6
   1c8ac:	781b      	ldrb	r3, [r3, #0]
   1c8ae:	2b03      	cmp	r3, #3
   1c8b0:	d129      	bne.n	1c906 <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
   1c8b2:	1d7c      	adds	r4, r7, #5
   1c8b4:	4b29      	ldr	r3, [pc, #164]	; (1c95c <statusOnCall+0x100>)
   1c8b6:	4798      	blx	r3
   1c8b8:	0003      	movs	r3, r0
   1c8ba:	7023      	strb	r3, [r4, #0]
		if (temp)
   1c8bc:	1d7b      	adds	r3, r7, #5
   1c8be:	781b      	ldrb	r3, [r3, #0]
   1c8c0:	2b00      	cmp	r3, #0
   1c8c2:	d009      	beq.n	1c8d8 <statusOnCall+0x7c>
		{
			status[index++]='+';
   1c8c4:	1dfb      	adds	r3, r7, #7
   1c8c6:	781b      	ldrb	r3, [r3, #0]
   1c8c8:	1dfa      	adds	r2, r7, #7
   1c8ca:	1c59      	adds	r1, r3, #1
   1c8cc:	7011      	strb	r1, [r2, #0]
   1c8ce:	001a      	movs	r2, r3
   1c8d0:	003b      	movs	r3, r7
   1c8d2:	212b      	movs	r1, #43	; 0x2b
   1c8d4:	5499      	strb	r1, [r3, r2]
   1c8d6:	e016      	b.n	1c906 <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
   1c8d8:	1dfb      	adds	r3, r7, #7
   1c8da:	781b      	ldrb	r3, [r3, #0]
   1c8dc:	1dfa      	adds	r2, r7, #7
   1c8de:	1c59      	adds	r1, r3, #1
   1c8e0:	7011      	strb	r1, [r2, #0]
   1c8e2:	001a      	movs	r2, r3
   1c8e4:	003b      	movs	r3, r7
   1c8e6:	215f      	movs	r1, #95	; 0x5f
   1c8e8:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
   1c8ea:	4b1d      	ldr	r3, [pc, #116]	; (1c960 <statusOnCall+0x104>)
   1c8ec:	781b      	ldrb	r3, [r3, #0]
   1c8ee:	b2db      	uxtb	r3, r3
   1c8f0:	2b02      	cmp	r3, #2
   1c8f2:	d008      	beq.n	1c906 <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
   1c8f4:	1dfb      	adds	r3, r7, #7
   1c8f6:	781b      	ldrb	r3, [r3, #0]
   1c8f8:	1dfa      	adds	r2, r7, #7
   1c8fa:	1c59      	adds	r1, r3, #1
   1c8fc:	7011      	strb	r1, [r2, #0]
   1c8fe:	001a      	movs	r2, r3
   1c900:	003b      	movs	r3, r7
   1c902:	2141      	movs	r1, #65	; 0x41
   1c904:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
   1c906:	4b17      	ldr	r3, [pc, #92]	; (1c964 <statusOnCall+0x108>)
   1c908:	785b      	ldrb	r3, [r3, #1]
   1c90a:	b2db      	uxtb	r3, r3
   1c90c:	2b00      	cmp	r3, #0
   1c90e:	d009      	beq.n	1c924 <statusOnCall+0xc8>
	{
		status[index++]=')';
   1c910:	1dfb      	adds	r3, r7, #7
   1c912:	781b      	ldrb	r3, [r3, #0]
   1c914:	1dfa      	adds	r2, r7, #7
   1c916:	1c59      	adds	r1, r3, #1
   1c918:	7011      	strb	r1, [r2, #0]
   1c91a:	001a      	movs	r2, r3
   1c91c:	003b      	movs	r3, r7
   1c91e:	2129      	movs	r1, #41	; 0x29
   1c920:	5499      	strb	r1, [r3, r2]
   1c922:	e008      	b.n	1c936 <statusOnCall+0xda>
	}
	else
	{
		status[index++]='[';
   1c924:	1dfb      	adds	r3, r7, #7
   1c926:	781b      	ldrb	r3, [r3, #0]
   1c928:	1dfa      	adds	r2, r7, #7
   1c92a:	1c59      	adds	r1, r3, #1
   1c92c:	7011      	strb	r1, [r2, #0]
   1c92e:	001a      	movs	r2, r3
   1c930:	003b      	movs	r3, r7
   1c932:	215b      	movs	r1, #91	; 0x5b
   1c934:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
   1c936:	1dfb      	adds	r3, r7, #7
   1c938:	781b      	ldrb	r3, [r3, #0]
   1c93a:	1dfa      	adds	r2, r7, #7
   1c93c:	1c59      	adds	r1, r3, #1
   1c93e:	7011      	strb	r1, [r2, #0]
   1c940:	001a      	movs	r2, r3
   1c942:	003b      	movs	r3, r7
   1c944:	2100      	movs	r1, #0
   1c946:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
   1c948:	003b      	movs	r3, r7
   1c94a:	0018      	movs	r0, r3
   1c94c:	4b06      	ldr	r3, [pc, #24]	; (1c968 <statusOnCall+0x10c>)
   1c94e:	4798      	blx	r3
}
   1c950:	46c0      	nop			; (mov r8, r8)
   1c952:	46bd      	mov	sp, r7
   1c954:	b003      	add	sp, #12
   1c956:	bd90      	pop	{r4, r7, pc}
   1c958:	0001c089 	.word	0x0001c089
   1c95c:	0001bb61 	.word	0x0001bb61
   1c960:	20000948 	.word	0x20000948
   1c964:	20000854 	.word	0x20000854
   1c968:	00014a05 	.word	0x00014a05

0001c96c <voltageOnCall>:

void voltageOnCall(void)
{
   1c96c:	b590      	push	{r4, r7, lr}
   1c96e:	b087      	sub	sp, #28
   1c970:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"]%lu{%lu}%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
   1c972:	4b0a      	ldr	r3, [pc, #40]	; (1c99c <voltageOnCall+0x30>)
   1c974:	681a      	ldr	r2, [r3, #0]
   1c976:	4b09      	ldr	r3, [pc, #36]	; (1c99c <voltageOnCall+0x30>)
   1c978:	685c      	ldr	r4, [r3, #4]
   1c97a:	4b08      	ldr	r3, [pc, #32]	; (1c99c <voltageOnCall+0x30>)
   1c97c:	689b      	ldr	r3, [r3, #8]
   1c97e:	4908      	ldr	r1, [pc, #32]	; (1c9a0 <voltageOnCall+0x34>)
   1c980:	0038      	movs	r0, r7
   1c982:	9300      	str	r3, [sp, #0]
   1c984:	0023      	movs	r3, r4
   1c986:	4c07      	ldr	r4, [pc, #28]	; (1c9a4 <voltageOnCall+0x38>)
   1c988:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
   1c98a:	003b      	movs	r3, r7
   1c98c:	0018      	movs	r0, r3
   1c98e:	4b06      	ldr	r3, [pc, #24]	; (1c9a8 <voltageOnCall+0x3c>)
   1c990:	4798      	blx	r3
}
   1c992:	46c0      	nop			; (mov r8, r8)
   1c994:	46bd      	mov	sp, r7
   1c996:	b005      	add	sp, #20
   1c998:	bd90      	pop	{r4, r7, pc}
   1c99a:	46c0      	nop			; (mov r8, r8)
   1c99c:	200008e8 	.word	0x200008e8
   1c9a0:	0002b364 	.word	0x0002b364
   1c9a4:	0002985d 	.word	0x0002985d
   1c9a8:	00014a05 	.word	0x00014a05

0001c9ac <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
   1c9ac:	b580      	push	{r7, lr}
   1c9ae:	b082      	sub	sp, #8
   1c9b0:	af00      	add	r7, sp, #0
   1c9b2:	0002      	movs	r2, r0
   1c9b4:	1dfb      	adds	r3, r7, #7
   1c9b6:	701a      	strb	r2, [r3, #0]
   1c9b8:	1dbb      	adds	r3, r7, #6
   1c9ba:	1c0a      	adds	r2, r1, #0
   1c9bc:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
   1c9be:	1dfb      	adds	r3, r7, #7
   1c9c0:	781b      	ldrb	r3, [r3, #0]
   1c9c2:	4a0e      	ldr	r2, [pc, #56]	; (1c9fc <setM2MEventState+0x50>)
   1c9c4:	5cd3      	ldrb	r3, [r2, r3]
   1c9c6:	2b02      	cmp	r3, #2
   1c9c8:	d10e      	bne.n	1c9e8 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
   1c9ca:	1dbb      	adds	r3, r7, #6
   1c9cc:	781b      	ldrb	r3, [r3, #0]
   1c9ce:	2b03      	cmp	r3, #3
   1c9d0:	d10a      	bne.n	1c9e8 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
   1c9d2:	1dbb      	adds	r3, r7, #6
   1c9d4:	2200      	movs	r2, #0
   1c9d6:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
   1c9d8:	1dfb      	adds	r3, r7, #7
   1c9da:	781b      	ldrb	r3, [r3, #0]
   1c9dc:	4a08      	ldr	r2, [pc, #32]	; (1ca00 <setM2MEventState+0x54>)
   1c9de:	5cd3      	ldrb	r3, [r2, r3]
   1c9e0:	001a      	movs	r2, r3
   1c9e2:	4b08      	ldr	r3, [pc, #32]	; (1ca04 <setM2MEventState+0x58>)
   1c9e4:	2100      	movs	r1, #0
   1c9e6:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
   1c9e8:	1dfb      	adds	r3, r7, #7
   1c9ea:	781b      	ldrb	r3, [r3, #0]
   1c9ec:	4a03      	ldr	r2, [pc, #12]	; (1c9fc <setM2MEventState+0x50>)
   1c9ee:	1db9      	adds	r1, r7, #6
   1c9f0:	7809      	ldrb	r1, [r1, #0]
   1c9f2:	54d1      	strb	r1, [r2, r3]
}
   1c9f4:	46c0      	nop			; (mov r8, r8)
   1c9f6:	46bd      	mov	sp, r7
   1c9f8:	b002      	add	sp, #8
   1c9fa:	bd80      	pop	{r7, pc}
   1c9fc:	200009c4 	.word	0x200009c4
   1ca00:	20000940 	.word	0x20000940
   1ca04:	20000918 	.word	0x20000918

0001ca08 <M2MEventManager>:

void M2MEventManager(void)
{
   1ca08:	b580      	push	{r7, lr}
   1ca0a:	b082      	sub	sp, #8
   1ca0c:	af00      	add	r7, sp, #0
	uint8_t j=2;
   1ca0e:	1dfb      	adds	r3, r7, #7
   1ca10:	2202      	movs	r2, #2
   1ca12:	701a      	strb	r2, [r3, #0]
	while(j--)
   1ca14:	e00a      	b.n	1ca2c <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
   1ca16:	1dfb      	adds	r3, r7, #7
   1ca18:	781b      	ldrb	r3, [r3, #0]
   1ca1a:	4a0a      	ldr	r2, [pc, #40]	; (1ca44 <M2MEventManager+0x3c>)
   1ca1c:	5cd3      	ldrb	r3, [r2, r3]
   1ca1e:	2b01      	cmp	r3, #1
   1ca20:	d104      	bne.n	1ca2c <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
   1ca22:	1dfb      	adds	r3, r7, #7
   1ca24:	781b      	ldrb	r3, [r3, #0]
   1ca26:	0018      	movs	r0, r3
   1ca28:	4b07      	ldr	r3, [pc, #28]	; (1ca48 <M2MEventManager+0x40>)
   1ca2a:	4798      	blx	r3
	while(j--)
   1ca2c:	1dfb      	adds	r3, r7, #7
   1ca2e:	781b      	ldrb	r3, [r3, #0]
   1ca30:	1dfa      	adds	r2, r7, #7
   1ca32:	1e59      	subs	r1, r3, #1
   1ca34:	7011      	strb	r1, [r2, #0]
   1ca36:	2b00      	cmp	r3, #0
   1ca38:	d1ed      	bne.n	1ca16 <M2MEventManager+0xe>
		}
	}
}
   1ca3a:	46c0      	nop			; (mov r8, r8)
   1ca3c:	46bd      	mov	sp, r7
   1ca3e:	b002      	add	sp, #8
   1ca40:	bd80      	pop	{r7, pc}
   1ca42:	46c0      	nop			; (mov r8, r8)
   1ca44:	200009c4 	.word	0x200009c4
   1ca48:	00014c8d 	.word	0x00014c8d

0001ca4c <SIMEventManager>:

void SIMEventManager(void)
{
   1ca4c:	b590      	push	{r4, r7, lr}
   1ca4e:	b083      	sub	sp, #12
   1ca50:	af00      	add	r7, sp, #0
	uint8_t i = 0;
   1ca52:	1dfb      	adds	r3, r7, #7
   1ca54:	2200      	movs	r2, #0
   1ca56:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1ca58:	4b1e      	ldr	r3, [pc, #120]	; (1cad4 <SIMEventManager+0x88>)
   1ca5a:	795b      	ldrb	r3, [r3, #5]
   1ca5c:	2b00      	cmp	r3, #0
   1ca5e:	d00b      	beq.n	1ca78 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1ca60:	4b1c      	ldr	r3, [pc, #112]	; (1cad4 <SIMEventManager+0x88>)
   1ca62:	791b      	ldrb	r3, [r3, #4]
   1ca64:	2b00      	cmp	r3, #0
   1ca66:	d003      	beq.n	1ca70 <SIMEventManager+0x24>
		{
			i = 19;
   1ca68:	1dfb      	adds	r3, r7, #7
   1ca6a:	2213      	movs	r2, #19
   1ca6c:	701a      	strb	r2, [r3, #0]
   1ca6e:	e025      	b.n	1cabc <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
   1ca70:	1dfb      	adds	r3, r7, #7
   1ca72:	2211      	movs	r2, #17
   1ca74:	701a      	strb	r2, [r3, #0]
   1ca76:	e021      	b.n	1cabc <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1ca78:	4b16      	ldr	r3, [pc, #88]	; (1cad4 <SIMEventManager+0x88>)
   1ca7a:	785b      	ldrb	r3, [r3, #1]
   1ca7c:	2b00      	cmp	r3, #0
   1ca7e:	d003      	beq.n	1ca88 <SIMEventManager+0x3c>
		{
			i = 14;
   1ca80:	1dfb      	adds	r3, r7, #7
   1ca82:	220e      	movs	r2, #14
   1ca84:	701a      	strb	r2, [r3, #0]
   1ca86:	e019      	b.n	1cabc <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
   1ca88:	1dfb      	adds	r3, r7, #7
   1ca8a:	220c      	movs	r2, #12
   1ca8c:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
   1ca8e:	e015      	b.n	1cabc <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
   1ca90:	1dfb      	adds	r3, r7, #7
   1ca92:	781b      	ldrb	r3, [r3, #0]
   1ca94:	4a10      	ldr	r2, [pc, #64]	; (1cad8 <SIMEventManager+0x8c>)
   1ca96:	5cd3      	ldrb	r3, [r2, r3]
   1ca98:	2201      	movs	r2, #1
   1ca9a:	4053      	eors	r3, r2
   1ca9c:	b2db      	uxtb	r3, r3
   1ca9e:	2b00      	cmp	r3, #0
   1caa0:	d00c      	beq.n	1cabc <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
   1caa2:	1dfb      	adds	r3, r7, #7
   1caa4:	781c      	ldrb	r4, [r3, #0]
   1caa6:	1dfb      	adds	r3, r7, #7
   1caa8:	781b      	ldrb	r3, [r3, #0]
   1caaa:	4a0c      	ldr	r2, [pc, #48]	; (1cadc <SIMEventManager+0x90>)
   1caac:	5cd3      	ldrb	r3, [r2, r3]
   1caae:	0018      	movs	r0, r3
   1cab0:	4b0b      	ldr	r3, [pc, #44]	; (1cae0 <SIMEventManager+0x94>)
   1cab2:	4798      	blx	r3
   1cab4:	0003      	movs	r3, r0
   1cab6:	001a      	movs	r2, r3
   1cab8:	4b07      	ldr	r3, [pc, #28]	; (1cad8 <SIMEventManager+0x8c>)
   1caba:	551a      	strb	r2, [r3, r4]
	while(i--)
   1cabc:	1dfb      	adds	r3, r7, #7
   1cabe:	781b      	ldrb	r3, [r3, #0]
   1cac0:	1dfa      	adds	r2, r7, #7
   1cac2:	1e59      	subs	r1, r3, #1
   1cac4:	7011      	strb	r1, [r2, #0]
   1cac6:	2b00      	cmp	r3, #0
   1cac8:	d1e2      	bne.n	1ca90 <SIMEventManager+0x44>
	}
}
   1caca:	46c0      	nop			; (mov r8, r8)
   1cacc:	46bd      	mov	sp, r7
   1cace:	b003      	add	sp, #12
   1cad0:	bd90      	pop	{r4, r7, pc}
   1cad2:	46c0      	nop			; (mov r8, r8)
   1cad4:	2000082c 	.word	0x2000082c
   1cad8:	20000918 	.word	0x20000918
   1cadc:	200009fc 	.word	0x200009fc
   1cae0:	00014b69 	.word	0x00014b69

0001cae4 <MotorVoltageBypassTimerOver>:

bool MotorVoltageBypassTimerOver(void)
{
   1cae4:	b580      	push	{r7, lr}
   1cae6:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount()-motorVoltageBypassTimerTime) > user_settings_parameter_struct.motorVoltageBypassTime);
   1cae8:	4b07      	ldr	r3, [pc, #28]	; (1cb08 <MotorVoltageBypassTimerOver+0x24>)
   1caea:	4798      	blx	r3
   1caec:	0002      	movs	r2, r0
   1caee:	4b07      	ldr	r3, [pc, #28]	; (1cb0c <MotorVoltageBypassTimerOver+0x28>)
   1caf0:	681b      	ldr	r3, [r3, #0]
   1caf2:	1ad2      	subs	r2, r2, r3
   1caf4:	4b06      	ldr	r3, [pc, #24]	; (1cb10 <MotorVoltageBypassTimerOver+0x2c>)
   1caf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1caf8:	4293      	cmp	r3, r2
   1cafa:	419b      	sbcs	r3, r3
   1cafc:	425b      	negs	r3, r3
   1cafe:	b2db      	uxtb	r3, r3
}
   1cb00:	0018      	movs	r0, r3
   1cb02:	46bd      	mov	sp, r7
   1cb04:	bd80      	pop	{r7, pc}
   1cb06:	46c0      	nop			; (mov r8, r8)
   1cb08:	00020ccd 	.word	0x00020ccd
   1cb0c:	20000984 	.word	0x20000984
   1cb10:	20000854 	.word	0x20000854

0001cb14 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
   1cb14:	b580      	push	{r7, lr}
   1cb16:	b084      	sub	sp, #16
   1cb18:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
   1cb1a:	4b70      	ldr	r3, [pc, #448]	; (1ccdc <checkCurrentConsumption+0x1c8>)
   1cb1c:	781b      	ldrb	r3, [r3, #0]
   1cb1e:	2b00      	cmp	r3, #0
   1cb20:	d000      	beq.n	1cb24 <checkCurrentConsumption+0x10>
   1cb22:	e0d6      	b.n	1ccd2 <checkCurrentConsumption+0x1be>
   1cb24:	4b6e      	ldr	r3, [pc, #440]	; (1cce0 <checkCurrentConsumption+0x1cc>)
   1cb26:	781b      	ldrb	r3, [r3, #0]
   1cb28:	2b00      	cmp	r3, #0
   1cb2a:	d000      	beq.n	1cb2e <checkCurrentConsumption+0x1a>
   1cb2c:	e0d1      	b.n	1ccd2 <checkCurrentConsumption+0x1be>
   1cb2e:	4b6d      	ldr	r3, [pc, #436]	; (1cce4 <checkCurrentConsumption+0x1d0>)
   1cb30:	4798      	blx	r3
   1cb32:	0003      	movs	r3, r0
   1cb34:	001a      	movs	r2, r3
   1cb36:	2301      	movs	r3, #1
   1cb38:	4053      	eors	r3, r2
   1cb3a:	b2db      	uxtb	r3, r3
   1cb3c:	2b00      	cmp	r3, #0
   1cb3e:	d000      	beq.n	1cb42 <checkCurrentConsumption+0x2e>
   1cb40:	e0c7      	b.n	1ccd2 <checkCurrentConsumption+0x1be>
   1cb42:	4b69      	ldr	r3, [pc, #420]	; (1cce8 <checkCurrentConsumption+0x1d4>)
   1cb44:	7bdb      	ldrb	r3, [r3, #15]
   1cb46:	b2db      	uxtb	r3, r3
   1cb48:	2b00      	cmp	r3, #0
   1cb4a:	d100      	bne.n	1cb4e <checkCurrentConsumption+0x3a>
   1cb4c:	e0c1      	b.n	1ccd2 <checkCurrentConsumption+0x1be>
   1cb4e:	4b67      	ldr	r3, [pc, #412]	; (1ccec <checkCurrentConsumption+0x1d8>)
   1cb50:	781b      	ldrb	r3, [r3, #0]
   1cb52:	2b00      	cmp	r3, #0
   1cb54:	d000      	beq.n	1cb58 <checkCurrentConsumption+0x44>
   1cb56:	e0bc      	b.n	1ccd2 <checkCurrentConsumption+0x1be>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
   1cb58:	4b65      	ldr	r3, [pc, #404]	; (1ccf0 <checkCurrentConsumption+0x1dc>)
   1cb5a:	781b      	ldrb	r3, [r3, #0]
   1cb5c:	2b00      	cmp	r3, #0
   1cb5e:	d00b      	beq.n	1cb78 <checkCurrentConsumption+0x64>
   1cb60:	4b64      	ldr	r3, [pc, #400]	; (1ccf4 <checkCurrentConsumption+0x1e0>)
   1cb62:	4798      	blx	r3
   1cb64:	0002      	movs	r2, r0
   1cb66:	4b64      	ldr	r3, [pc, #400]	; (1ccf8 <checkCurrentConsumption+0x1e4>)
   1cb68:	681b      	ldr	r3, [r3, #0]
   1cb6a:	1ad3      	subs	r3, r2, r3
   1cb6c:	4a63      	ldr	r2, [pc, #396]	; (1ccfc <checkCurrentConsumption+0x1e8>)
   1cb6e:	4293      	cmp	r3, r2
   1cb70:	d902      	bls.n	1cb78 <checkCurrentConsumption+0x64>
	{
		enableCurrentBuffer=false;
   1cb72:	4b5f      	ldr	r3, [pc, #380]	; (1ccf0 <checkCurrentConsumption+0x1dc>)
   1cb74:	2200      	movs	r2, #0
   1cb76:	701a      	strb	r2, [r3, #0]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp=0;
   1cb78:	2300      	movs	r3, #0
   1cb7a:	60fb      	str	r3, [r7, #12]
	if(user_settings_parameter_struct.over_under_DetectionMethod== MOTOR_UNDEROVER_DETECTION_POWER)
   1cb7c:	4b5a      	ldr	r3, [pc, #360]	; (1cce8 <checkCurrentConsumption+0x1d4>)
   1cb7e:	2226      	movs	r2, #38	; 0x26
   1cb80:	5c9b      	ldrb	r3, [r3, r2]
   1cb82:	b2db      	uxtb	r3, r3
   1cb84:	2b01      	cmp	r3, #1
   1cb86:	d103      	bne.n	1cb90 <checkCurrentConsumption+0x7c>
	{
		temp = Analog_Parameter_Struct.Motor_Power;
   1cb88:	4b5d      	ldr	r3, [pc, #372]	; (1cd00 <checkCurrentConsumption+0x1ec>)
   1cb8a:	6a1b      	ldr	r3, [r3, #32]
   1cb8c:	60fb      	str	r3, [r7, #12]
   1cb8e:	e002      	b.n	1cb96 <checkCurrentConsumption+0x82>
	}
	else
	{
		temp = Analog_Parameter_Struct.Motor_Current;
   1cb90:	4b5b      	ldr	r3, [pc, #364]	; (1cd00 <checkCurrentConsumption+0x1ec>)
   1cb92:	691b      	ldr	r3, [r3, #16]
   1cb94:	60fb      	str	r3, [r7, #12]
	}
	
	uint32_t overLoadDetectValue=12000;
   1cb96:	4b5b      	ldr	r3, [pc, #364]	; (1cd04 <checkCurrentConsumption+0x1f0>)
   1cb98:	60bb      	str	r3, [r7, #8]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
   1cb9a:	4b55      	ldr	r3, [pc, #340]	; (1ccf0 <checkCurrentConsumption+0x1dc>)
   1cb9c:	781b      	ldrb	r3, [r3, #0]
   1cb9e:	2b00      	cmp	r3, #0
   1cba0:	d00b      	beq.n	1cbba <checkCurrentConsumption+0xa6>
   1cba2:	4b51      	ldr	r3, [pc, #324]	; (1cce8 <checkCurrentConsumption+0x1d4>)
   1cba4:	691b      	ldr	r3, [r3, #16]
   1cba6:	005a      	lsls	r2, r3, #1
   1cba8:	68fb      	ldr	r3, [r7, #12]
   1cbaa:	429a      	cmp	r2, r3
   1cbac:	d205      	bcs.n	1cbba <checkCurrentConsumption+0xa6>
	{
		temp2 = CR_OVER2;
   1cbae:	1dfb      	adds	r3, r7, #7
   1cbb0:	2202      	movs	r2, #2
   1cbb2:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
   1cbb4:	4b54      	ldr	r3, [pc, #336]	; (1cd08 <checkCurrentConsumption+0x1f4>)
   1cbb6:	60bb      	str	r3, [r7, #8]
   1cbb8:	e050      	b.n	1cc5c <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
   1cbba:	4b4d      	ldr	r3, [pc, #308]	; (1ccf0 <checkCurrentConsumption+0x1dc>)
   1cbbc:	781b      	ldrb	r3, [r3, #0]
   1cbbe:	2201      	movs	r2, #1
   1cbc0:	4053      	eors	r3, r2
   1cbc2:	b2db      	uxtb	r3, r3
   1cbc4:	2b00      	cmp	r3, #0
   1cbc6:	d00c      	beq.n	1cbe2 <checkCurrentConsumption+0xce>
   1cbc8:	4b47      	ldr	r3, [pc, #284]	; (1cce8 <checkCurrentConsumption+0x1d4>)
   1cbca:	691b      	ldr	r3, [r3, #16]
   1cbcc:	005a      	lsls	r2, r3, #1
   1cbce:	68fb      	ldr	r3, [r7, #12]
   1cbd0:	429a      	cmp	r2, r3
   1cbd2:	d206      	bcs.n	1cbe2 <checkCurrentConsumption+0xce>
	{
		temp2 = CR_OVER;
   1cbd4:	1dfb      	adds	r3, r7, #7
   1cbd6:	2201      	movs	r2, #1
   1cbd8:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1cbda:	68bb      	ldr	r3, [r7, #8]
   1cbdc:	089b      	lsrs	r3, r3, #2
   1cbde:	60bb      	str	r3, [r7, #8]
   1cbe0:	e03c      	b.n	1cc5c <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
   1cbe2:	4b43      	ldr	r3, [pc, #268]	; (1ccf0 <checkCurrentConsumption+0x1dc>)
   1cbe4:	781b      	ldrb	r3, [r3, #0]
   1cbe6:	2201      	movs	r2, #1
   1cbe8:	4053      	eors	r3, r2
   1cbea:	b2db      	uxtb	r3, r3
   1cbec:	2b00      	cmp	r3, #0
   1cbee:	d00f      	beq.n	1cc10 <checkCurrentConsumption+0xfc>
   1cbf0:	4b3d      	ldr	r3, [pc, #244]	; (1cce8 <checkCurrentConsumption+0x1d4>)
   1cbf2:	691a      	ldr	r2, [r3, #16]
   1cbf4:	4b3c      	ldr	r3, [pc, #240]	; (1cce8 <checkCurrentConsumption+0x1d4>)
   1cbf6:	691b      	ldr	r3, [r3, #16]
   1cbf8:	085b      	lsrs	r3, r3, #1
   1cbfa:	18d2      	adds	r2, r2, r3
   1cbfc:	68fb      	ldr	r3, [r7, #12]
   1cbfe:	429a      	cmp	r2, r3
   1cc00:	d206      	bcs.n	1cc10 <checkCurrentConsumption+0xfc>
	{
		temp2 = CR_OVER;
   1cc02:	1dfb      	adds	r3, r7, #7
   1cc04:	2201      	movs	r2, #1
   1cc06:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
   1cc08:	68bb      	ldr	r3, [r7, #8]
   1cc0a:	085b      	lsrs	r3, r3, #1
   1cc0c:	60bb      	str	r3, [r7, #8]
   1cc0e:	e025      	b.n	1cc5c <checkCurrentConsumption+0x148>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
   1cc10:	4b37      	ldr	r3, [pc, #220]	; (1ccf0 <checkCurrentConsumption+0x1dc>)
   1cc12:	781b      	ldrb	r3, [r3, #0]
   1cc14:	2201      	movs	r2, #1
   1cc16:	4053      	eors	r3, r2
   1cc18:	b2db      	uxtb	r3, r3
   1cc1a:	2b00      	cmp	r3, #0
   1cc1c:	d008      	beq.n	1cc30 <checkCurrentConsumption+0x11c>
   1cc1e:	4b32      	ldr	r3, [pc, #200]	; (1cce8 <checkCurrentConsumption+0x1d4>)
   1cc20:	695a      	ldr	r2, [r3, #20]
   1cc22:	68fb      	ldr	r3, [r7, #12]
   1cc24:	429a      	cmp	r2, r3
   1cc26:	d203      	bcs.n	1cc30 <checkCurrentConsumption+0x11c>
	{
		temp2 = CR_OVER;
   1cc28:	1dfb      	adds	r3, r7, #7
   1cc2a:	2201      	movs	r2, #1
   1cc2c:	701a      	strb	r2, [r3, #0]
   1cc2e:	e015      	b.n	1cc5c <checkCurrentConsumption+0x148>
	}
	else if(!enableCurrentBuffer && temp < user_settings_parameter_struct.underloadAddress)		// only consider noLoad after 30 secs
   1cc30:	4b2f      	ldr	r3, [pc, #188]	; (1ccf0 <checkCurrentConsumption+0x1dc>)
   1cc32:	781b      	ldrb	r3, [r3, #0]
   1cc34:	2201      	movs	r2, #1
   1cc36:	4053      	eors	r3, r2
   1cc38:	b2db      	uxtb	r3, r3
   1cc3a:	2b00      	cmp	r3, #0
   1cc3c:	d00b      	beq.n	1cc56 <checkCurrentConsumption+0x142>
   1cc3e:	4b2a      	ldr	r3, [pc, #168]	; (1cce8 <checkCurrentConsumption+0x1d4>)
   1cc40:	699a      	ldr	r2, [r3, #24]
   1cc42:	68fb      	ldr	r3, [r7, #12]
   1cc44:	429a      	cmp	r2, r3
   1cc46:	d906      	bls.n	1cc56 <checkCurrentConsumption+0x142>
	{
		temp2 = CR_UNDER;
   1cc48:	1dfb      	adds	r3, r7, #7
   1cc4a:	2202      	movs	r2, #2
   1cc4c:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
   1cc4e:	68bb      	ldr	r3, [r7, #8]
   1cc50:	089b      	lsrs	r3, r3, #2
   1cc52:	60bb      	str	r3, [r7, #8]
   1cc54:	e002      	b.n	1cc5c <checkCurrentConsumption+0x148>
	//temp2 = CR_UNDER;
	//overLoadDetectValue=overLoadDetectValue>>2;
	//}
	else
	{
		temp2= CR_NORMAL;
   1cc56:	1dfb      	adds	r3, r7, #7
   1cc58:	2200      	movs	r2, #0
   1cc5a:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
   1cc5c:	4b2b      	ldr	r3, [pc, #172]	; (1cd0c <checkCurrentConsumption+0x1f8>)
   1cc5e:	781b      	ldrb	r3, [r3, #0]
   1cc60:	1dfa      	adds	r2, r7, #7
   1cc62:	7812      	ldrb	r2, [r2, #0]
   1cc64:	429a      	cmp	r2, r3
   1cc66:	d12a      	bne.n	1ccbe <checkCurrentConsumption+0x1aa>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
   1cc68:	4b22      	ldr	r3, [pc, #136]	; (1ccf4 <checkCurrentConsumption+0x1e0>)
   1cc6a:	4798      	blx	r3
   1cc6c:	0002      	movs	r2, r0
   1cc6e:	4b28      	ldr	r3, [pc, #160]	; (1cd10 <checkCurrentConsumption+0x1fc>)
   1cc70:	681b      	ldr	r3, [r3, #0]
   1cc72:	1ad2      	subs	r2, r2, r3
   1cc74:	68bb      	ldr	r3, [r7, #8]
   1cc76:	429a      	cmp	r2, r3
   1cc78:	d92c      	bls.n	1ccd4 <checkCurrentConsumption+0x1c0>
		{
			if(temp2==CR_OVER)
   1cc7a:	1dfb      	adds	r3, r7, #7
   1cc7c:	781b      	ldrb	r3, [r3, #0]
   1cc7e:	2b01      	cmp	r3, #1
   1cc80:	d10c      	bne.n	1cc9c <checkCurrentConsumption+0x188>
			{
				stopMotor(false,true,false);
   1cc82:	2200      	movs	r2, #0
   1cc84:	2101      	movs	r1, #1
   1cc86:	2000      	movs	r0, #0
   1cc88:	4b22      	ldr	r3, [pc, #136]	; (1cd14 <checkCurrentConsumption+0x200>)
   1cc8a:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
   1cc8c:	2042      	movs	r0, #66	; 0x42
   1cc8e:	4b22      	ldr	r3, [pc, #136]	; (1cd18 <checkCurrentConsumption+0x204>)
   1cc90:	4798      	blx	r3
   1cc92:	0003      	movs	r3, r0
   1cc94:	001a      	movs	r2, r3
   1cc96:	4b21      	ldr	r3, [pc, #132]	; (1cd1c <checkCurrentConsumption+0x208>)
   1cc98:	731a      	strb	r2, [r3, #12]
   1cc9a:	e01b      	b.n	1ccd4 <checkCurrentConsumption+0x1c0>
			}
			else if(temp2==CR_UNDER)
   1cc9c:	1dfb      	adds	r3, r7, #7
   1cc9e:	781b      	ldrb	r3, [r3, #0]
   1cca0:	2b02      	cmp	r3, #2
   1cca2:	d117      	bne.n	1ccd4 <checkCurrentConsumption+0x1c0>
			{
				stopMotor(false,true,false);
   1cca4:	2200      	movs	r2, #0
   1cca6:	2101      	movs	r1, #1
   1cca8:	2000      	movs	r0, #0
   1ccaa:	4b1a      	ldr	r3, [pc, #104]	; (1cd14 <checkCurrentConsumption+0x200>)
   1ccac:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
   1ccae:	204a      	movs	r0, #74	; 0x4a
   1ccb0:	4b19      	ldr	r3, [pc, #100]	; (1cd18 <checkCurrentConsumption+0x204>)
   1ccb2:	4798      	blx	r3
   1ccb4:	0003      	movs	r3, r0
   1ccb6:	001a      	movs	r2, r3
   1ccb8:	4b18      	ldr	r3, [pc, #96]	; (1cd1c <checkCurrentConsumption+0x208>)
   1ccba:	735a      	strb	r2, [r3, #13]
   1ccbc:	e00a      	b.n	1ccd4 <checkCurrentConsumption+0x1c0>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
   1ccbe:	4b0d      	ldr	r3, [pc, #52]	; (1ccf4 <checkCurrentConsumption+0x1e0>)
   1ccc0:	4798      	blx	r3
   1ccc2:	0002      	movs	r2, r0
   1ccc4:	4b12      	ldr	r3, [pc, #72]	; (1cd10 <checkCurrentConsumption+0x1fc>)
   1ccc6:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
   1ccc8:	4b10      	ldr	r3, [pc, #64]	; (1cd0c <checkCurrentConsumption+0x1f8>)
   1ccca:	1dfa      	adds	r2, r7, #7
   1cccc:	7812      	ldrb	r2, [r2, #0]
   1ccce:	701a      	strb	r2, [r3, #0]
   1ccd0:	e000      	b.n	1ccd4 <checkCurrentConsumption+0x1c0>
		return;
   1ccd2:	46c0      	nop			; (mov r8, r8)
	}
}
   1ccd4:	46bd      	mov	sp, r7
   1ccd6:	b004      	add	sp, #16
   1ccd8:	bd80      	pop	{r7, pc}
   1ccda:	46c0      	nop			; (mov r8, r8)
   1ccdc:	20000999 	.word	0x20000999
   1cce0:	20000988 	.word	0x20000988
   1cce4:	0001bb0d 	.word	0x0001bb0d
   1cce8:	20000854 	.word	0x20000854
   1ccec:	2000099b 	.word	0x2000099b
   1ccf0:	20000960 	.word	0x20000960
   1ccf4:	00020ccd 	.word	0x00020ccd
   1ccf8:	20000994 	.word	0x20000994
   1ccfc:	00007530 	.word	0x00007530
   1cd00:	200008e8 	.word	0x200008e8
   1cd04:	00002ee0 	.word	0x00002ee0
   1cd08:	00004650 	.word	0x00004650
   1cd0c:	2000097e 	.word	0x2000097e
   1cd10:	2000096c 	.word	0x2000096c
   1cd14:	0001c411 	.word	0x0001c411
   1cd18:	00014b69 	.word	0x00014b69
   1cd1c:	20000918 	.word	0x20000918

0001cd20 <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
   1cd20:	b580      	push	{r7, lr}
   1cd22:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
   1cd24:	4b02      	ldr	r3, [pc, #8]	; (1cd30 <button_detect_pin_callback+0x10>)
   1cd26:	2201      	movs	r2, #1
   1cd28:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
   1cd2a:	46c0      	nop			; (mov r8, r8)
   1cd2c:	46bd      	mov	sp, r7
   1cd2e:	bd80      	pop	{r7, pc}
   1cd30:	2000099f 	.word	0x2000099f

0001cd34 <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
   1cd34:	b590      	push	{r4, r7, lr}
   1cd36:	b087      	sub	sp, #28
   1cd38:	af00      	add	r7, sp, #0
   1cd3a:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
   1cd3c:	4bd5      	ldr	r3, [pc, #852]	; (1d094 <vTask_MOTORCONTROL+0x360>)
   1cd3e:	4798      	blx	r3
	
	configure_ac();
   1cd40:	4bd5      	ldr	r3, [pc, #852]	; (1d098 <vTask_MOTORCONTROL+0x364>)
   1cd42:	4798      	blx	r3
	//configure_rtc();
	//configure_event();
	
	
	//////////////////////////////////////////////////////////////////////////
		invalidateVoltageReadings=false;
   1cd44:	4bd5      	ldr	r3, [pc, #852]	; (1d09c <vTask_MOTORCONTROL+0x368>)
   1cd46:	2200      	movs	r2, #0
   1cd48:	701a      	strb	r2, [r3, #0]
		invalidateVoltageReadingTime=0;
   1cd4a:	4bd5      	ldr	r3, [pc, #852]	; (1d0a0 <vTask_MOTORCONTROL+0x36c>)
   1cd4c:	2200      	movs	r2, #0
   1cd4e:	601a      	str	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
   1cd50:	4bd4      	ldr	r3, [pc, #848]	; (1d0a4 <vTask_MOTORCONTROL+0x370>)
   1cd52:	2200      	movs	r2, #0
   1cd54:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
   1cd56:	4bd4      	ldr	r3, [pc, #848]	; (1d0a8 <vTask_MOTORCONTROL+0x374>)
   1cd58:	2200      	movs	r2, #0
   1cd5a:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
   1cd5c:	4bd3      	ldr	r3, [pc, #844]	; (1d0ac <vTask_MOTORCONTROL+0x378>)
   1cd5e:	2200      	movs	r2, #0
   1cd60:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
   1cd62:	2315      	movs	r3, #21
   1cd64:	18fb      	adds	r3, r7, r3
   1cd66:	2201      	movs	r2, #1
   1cd68:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
   1cd6a:	4bd1      	ldr	r3, [pc, #836]	; (1d0b0 <vTask_MOTORCONTROL+0x37c>)
   1cd6c:	4798      	blx	r3
   1cd6e:	0003      	movs	r3, r0
   1cd70:	613b      	str	r3, [r7, #16]
	firstEvent = true;
   1cd72:	4bd0      	ldr	r3, [pc, #832]	; (1d0b4 <vTask_MOTORCONTROL+0x380>)
   1cd74:	2201      	movs	r2, #1
   1cd76:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
   1cd78:	2315      	movs	r3, #21
   1cd7a:	18fc      	adds	r4, r7, r3
   1cd7c:	4bce      	ldr	r3, [pc, #824]	; (1d0b8 <vTask_MOTORCONTROL+0x384>)
   1cd7e:	2100      	movs	r1, #0
   1cd80:	0018      	movs	r0, r3
   1cd82:	4bce      	ldr	r3, [pc, #824]	; (1d0bc <vTask_MOTORCONTROL+0x388>)
   1cd84:	4798      	blx	r3
   1cd86:	0003      	movs	r3, r0
   1cd88:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
   1cd8a:	23fa      	movs	r3, #250	; 0xfa
   1cd8c:	005b      	lsls	r3, r3, #1
   1cd8e:	0018      	movs	r0, r3
   1cd90:	4bcb      	ldr	r3, [pc, #812]	; (1d0c0 <vTask_MOTORCONTROL+0x38c>)
   1cd92:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
   1cd94:	2315      	movs	r3, #21
   1cd96:	18fc      	adds	r4, r7, r3
   1cd98:	4bc7      	ldr	r3, [pc, #796]	; (1d0b8 <vTask_MOTORCONTROL+0x384>)
   1cd9a:	2100      	movs	r1, #0
   1cd9c:	0018      	movs	r0, r3
   1cd9e:	4bc7      	ldr	r3, [pc, #796]	; (1d0bc <vTask_MOTORCONTROL+0x388>)
   1cda0:	4798      	blx	r3
   1cda2:	0003      	movs	r3, r0
   1cda4:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
   1cda6:	2315      	movs	r3, #21
   1cda8:	18fb      	adds	r3, r7, r3
   1cdaa:	781b      	ldrb	r3, [r3, #0]
   1cdac:	2204      	movs	r2, #4
   1cdae:	4013      	ands	r3, r2
   1cdb0:	d003      	beq.n	1cdba <vTask_MOTORCONTROL+0x86>
	{
		isACpowerAvailable = true;
   1cdb2:	4bc4      	ldr	r3, [pc, #784]	; (1d0c4 <vTask_MOTORCONTROL+0x390>)
   1cdb4:	2201      	movs	r2, #1
   1cdb6:	701a      	strb	r2, [r3, #0]
   1cdb8:	e002      	b.n	1cdc0 <vTask_MOTORCONTROL+0x8c>
	}
	else
	{
		isACpowerAvailable = false;
   1cdba:	4bc2      	ldr	r3, [pc, #776]	; (1d0c4 <vTask_MOTORCONTROL+0x390>)
   1cdbc:	2200      	movs	r2, #0
   1cdbe:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
   1cdc0:	4bc1      	ldr	r3, [pc, #772]	; (1d0c8 <vTask_MOTORCONTROL+0x394>)
   1cdc2:	2200      	movs	r2, #0
   1cdc4:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	stopMotorCommandGiven=false;
   1cdc6:	4bc1      	ldr	r3, [pc, #772]	; (1d0cc <vTask_MOTORCONTROL+0x398>)
   1cdc8:	2200      	movs	r2, #0
   1cdca:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent = false;
   1cdcc:	4bc0      	ldr	r3, [pc, #768]	; (1d0d0 <vTask_MOTORCONTROL+0x39c>)
   1cdce:	2200      	movs	r2, #0
   1cdd0:	701a      	strb	r2, [r3, #0]
	
	startTimerOn = false;
   1cdd2:	4bc0      	ldr	r3, [pc, #768]	; (1d0d4 <vTask_MOTORCONTROL+0x3a0>)
   1cdd4:	2200      	movs	r2, #0
   1cdd6:	701a      	strb	r2, [r3, #0]

	waitStableLineTime = 50;
   1cdd8:	4bbf      	ldr	r3, [pc, #764]	; (1d0d8 <vTask_MOTORCONTROL+0x3a4>)
   1cdda:	2232      	movs	r2, #50	; 0x32
   1cddc:	701a      	strb	r2, [r3, #0]
	waitStableLineOn = false;
   1cdde:	4bbf      	ldr	r3, [pc, #764]	; (1d0dc <vTask_MOTORCONTROL+0x3a8>)
   1cde0:	2200      	movs	r2, #0
   1cde2:	701a      	strb	r2, [r3, #0]
	
	singlePhasingTime = 6;
   1cde4:	4bbe      	ldr	r3, [pc, #760]	; (1d0e0 <vTask_MOTORCONTROL+0x3ac>)
   1cde6:	2206      	movs	r2, #6
   1cde8:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
   1cdea:	4bbe      	ldr	r3, [pc, #760]	; (1d0e4 <vTask_MOTORCONTROL+0x3b0>)
   1cdec:	2200      	movs	r2, #0
   1cdee:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
   1cdf0:	4bbd      	ldr	r3, [pc, #756]	; (1d0e8 <vTask_MOTORCONTROL+0x3b4>)
   1cdf2:	2214      	movs	r2, #20
   1cdf4:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
   1cdf6:	4bbd      	ldr	r3, [pc, #756]	; (1d0ec <vTask_MOTORCONTROL+0x3b8>)
   1cdf8:	2200      	movs	r2, #0
   1cdfa:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
   1cdfc:	4bbc      	ldr	r3, [pc, #752]	; (1d0f0 <vTask_MOTORCONTROL+0x3bc>)
   1cdfe:	2200      	movs	r2, #0
   1ce00:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
   1ce02:	4bbc      	ldr	r3, [pc, #752]	; (1d0f4 <vTask_MOTORCONTROL+0x3c0>)
   1ce04:	2214      	movs	r2, #20
   1ce06:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
   1ce08:	4bbb      	ldr	r3, [pc, #748]	; (1d0f8 <vTask_MOTORCONTROL+0x3c4>)
   1ce0a:	2200      	movs	r2, #0
   1ce0c:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
   1ce0e:	2000      	movs	r0, #0
   1ce10:	4bba      	ldr	r3, [pc, #744]	; (1d0fc <vTask_MOTORCONTROL+0x3c8>)
   1ce12:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
   1ce14:	2000      	movs	r0, #0
   1ce16:	4bba      	ldr	r3, [pc, #744]	; (1d100 <vTask_MOTORCONTROL+0x3cc>)
   1ce18:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
   1ce1a:	2000      	movs	r0, #0
   1ce1c:	4bb9      	ldr	r3, [pc, #740]	; (1d104 <vTask_MOTORCONTROL+0x3d0>)
   1ce1e:	4798      	blx	r3

	initPhaseRMStruct(&struct_rmsRY);
   1ce20:	4bb9      	ldr	r3, [pc, #740]	; (1d108 <vTask_MOTORCONTROL+0x3d4>)
   1ce22:	0018      	movs	r0, r3
   1ce24:	4bb9      	ldr	r3, [pc, #740]	; (1d10c <vTask_MOTORCONTROL+0x3d8>)
   1ce26:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsYB);
   1ce28:	4bb9      	ldr	r3, [pc, #740]	; (1d110 <vTask_MOTORCONTROL+0x3dc>)
   1ce2a:	0018      	movs	r0, r3
   1ce2c:	4bb7      	ldr	r3, [pc, #732]	; (1d10c <vTask_MOTORCONTROL+0x3d8>)
   1ce2e:	4798      	blx	r3
	initPhaseRMStruct(&struct_rmsBR);
   1ce30:	4bb8      	ldr	r3, [pc, #736]	; (1d114 <vTask_MOTORCONTROL+0x3e0>)
   1ce32:	0018      	movs	r0, r3
   1ce34:	4bb5      	ldr	r3, [pc, #724]	; (1d10c <vTask_MOTORCONTROL+0x3d8>)
   1ce36:	4798      	blx	r3
	
	lastPressTime=0;
   1ce38:	4bb7      	ldr	r3, [pc, #732]	; (1d118 <vTask_MOTORCONTROL+0x3e4>)
   1ce3a:	2200      	movs	r2, #0
   1ce3c:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
   1ce3e:	4bb7      	ldr	r3, [pc, #732]	; (1d11c <vTask_MOTORCONTROL+0x3e8>)
   1ce40:	2200      	movs	r2, #0
   1ce42:	701a      	strb	r2, [r3, #0]

	motorRelatedVoltageBypassOn=false;
   1ce44:	4bb6      	ldr	r3, [pc, #728]	; (1d120 <vTask_MOTORCONTROL+0x3ec>)
   1ce46:	2200      	movs	r2, #0
   1ce48:	701a      	strb	r2, [r3, #0]
	motorVoltageBypassTimerTime= 0;
   1ce4a:	4bb6      	ldr	r3, [pc, #728]	; (1d124 <vTask_MOTORCONTROL+0x3f0>)
   1ce4c:	2200      	movs	r2, #0
   1ce4e:	601a      	str	r2, [r3, #0]
	
	uint8_t i= 0;
   1ce50:	2317      	movs	r3, #23
   1ce52:	18fb      	adds	r3, r7, r3
   1ce54:	2200      	movs	r2, #0
   1ce56:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1ce58:	4bb3      	ldr	r3, [pc, #716]	; (1d128 <vTask_MOTORCONTROL+0x3f4>)
   1ce5a:	785b      	ldrb	r3, [r3, #1]
   1ce5c:	2b00      	cmp	r3, #0
   1ce5e:	d004      	beq.n	1ce6a <vTask_MOTORCONTROL+0x136>
	{
		i=14;
   1ce60:	2317      	movs	r3, #23
   1ce62:	18fb      	adds	r3, r7, r3
   1ce64:	220e      	movs	r2, #14
   1ce66:	701a      	strb	r2, [r3, #0]
   1ce68:	e00a      	b.n	1ce80 <vTask_MOTORCONTROL+0x14c>
	}
	else
	{
		i = 12;
   1ce6a:	2317      	movs	r3, #23
   1ce6c:	18fb      	adds	r3, r7, r3
   1ce6e:	220c      	movs	r2, #12
   1ce70:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
   1ce72:	e005      	b.n	1ce80 <vTask_MOTORCONTROL+0x14c>
	{
		simEventTemp[i] = true;
   1ce74:	2317      	movs	r3, #23
   1ce76:	18fb      	adds	r3, r7, r3
   1ce78:	781b      	ldrb	r3, [r3, #0]
   1ce7a:	4aac      	ldr	r2, [pc, #688]	; (1d12c <vTask_MOTORCONTROL+0x3f8>)
   1ce7c:	2101      	movs	r1, #1
   1ce7e:	54d1      	strb	r1, [r2, r3]
	while(i--)
   1ce80:	2317      	movs	r3, #23
   1ce82:	18fb      	adds	r3, r7, r3
   1ce84:	781b      	ldrb	r3, [r3, #0]
   1ce86:	2217      	movs	r2, #23
   1ce88:	18ba      	adds	r2, r7, r2
   1ce8a:	1e59      	subs	r1, r3, #1
   1ce8c:	7011      	strb	r1, [r2, #0]
   1ce8e:	2b00      	cmp	r3, #0
   1ce90:	d1f0      	bne.n	1ce74 <vTask_MOTORCONTROL+0x140>
	}
	simEvent[0] = 'N';
   1ce92:	4ba7      	ldr	r3, [pc, #668]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1ce94:	224e      	movs	r2, #78	; 0x4e
   1ce96:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
   1ce98:	4ba5      	ldr	r3, [pc, #660]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1ce9a:	2250      	movs	r2, #80	; 0x50
   1ce9c:	705a      	strb	r2, [r3, #1]
	simEvent[2] = '_';					//chnage the recording when playing from flash, as sim800c does not have enough space right now.
   1ce9e:	4ba4      	ldr	r3, [pc, #656]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1cea0:	225f      	movs	r2, #95	; 0x5f
   1cea2:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
   1cea4:	4ba2      	ldr	r3, [pc, #648]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1cea6:	2246      	movs	r2, #70	; 0x46
   1cea8:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
   1ceaa:	4ba1      	ldr	r3, [pc, #644]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1ceac:	2247      	movs	r2, #71	; 0x47
   1ceae:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
   1ceb0:	4b9f      	ldr	r3, [pc, #636]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1ceb2:	224c      	movs	r2, #76	; 0x4c
   1ceb4:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
   1ceb6:	4b9e      	ldr	r3, [pc, #632]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1ceb8:	2243      	movs	r2, #67	; 0x43
   1ceba:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
   1cebc:	4b9c      	ldr	r3, [pc, #624]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1cebe:	2253      	movs	r2, #83	; 0x53
   1cec0:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
   1cec2:	4b9b      	ldr	r3, [pc, #620]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1cec4:	224f      	movs	r2, #79	; 0x4f
   1cec6:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
   1cec8:	4b99      	ldr	r3, [pc, #612]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1ceca:	2241      	movs	r2, #65	; 0x41
   1cecc:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
   1cece:	4b98      	ldr	r3, [pc, #608]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1ced0:	2229      	movs	r2, #41	; 0x29
   1ced2:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
   1ced4:	4b96      	ldr	r3, [pc, #600]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1ced6:	225b      	movs	r2, #91	; 0x5b
   1ced8:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1ceda:	4b93      	ldr	r3, [pc, #588]	; (1d128 <vTask_MOTORCONTROL+0x3f4>)
   1cedc:	785b      	ldrb	r3, [r3, #1]
   1cede:	2b00      	cmp	r3, #0
   1cee0:	d005      	beq.n	1ceee <vTask_MOTORCONTROL+0x1ba>
	{
		simEvent[12] = 'B';		//Overload Event
   1cee2:	4b93      	ldr	r3, [pc, #588]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1cee4:	2242      	movs	r2, #66	; 0x42
   1cee6:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
   1cee8:	4b91      	ldr	r3, [pc, #580]	; (1d130 <vTask_MOTORCONTROL+0x3fc>)
   1ceea:	224a      	movs	r2, #74	; 0x4a
   1ceec:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
   1ceee:	2001      	movs	r0, #1
   1cef0:	4b90      	ldr	r3, [pc, #576]	; (1d134 <vTask_MOTORCONTROL+0x400>)
   1cef2:	4798      	blx	r3
	eventOccured=true;
   1cef4:	4b6d      	ldr	r3, [pc, #436]	; (1d0ac <vTask_MOTORCONTROL+0x378>)
   1cef6:	2201      	movs	r2, #1
   1cef8:	701a      	strb	r2, [r3, #0]
	//port_pin_set_config(PIN_PA10, &adc_pin_config);
	//port_pin_set_config(PIN_PA11, &adc_pin_config);
	
	for (;;)
	{
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1cefa:	4b8f      	ldr	r3, [pc, #572]	; (1d138 <vTask_MOTORCONTROL+0x404>)
   1cefc:	681a      	ldr	r2, [r3, #0]
   1cefe:	2301      	movs	r3, #1
   1cf00:	425b      	negs	r3, r3
   1cf02:	0019      	movs	r1, r3
   1cf04:	0010      	movs	r0, r2
   1cf06:	4b8d      	ldr	r3, [pc, #564]	; (1d13c <vTask_MOTORCONTROL+0x408>)
   1cf08:	4798      	blx	r3
		if(taskPSet)
   1cf0a:	4b8d      	ldr	r3, [pc, #564]	; (1d140 <vTask_MOTORCONTROL+0x40c>)
   1cf0c:	781b      	ldrb	r3, [r3, #0]
   1cf0e:	b2db      	uxtb	r3, r3
   1cf10:	2b00      	cmp	r3, #0
   1cf12:	d006      	beq.n	1cf22 <vTask_MOTORCONTROL+0x1ee>
		{
			vTaskPrioritySet(NULL,1);
   1cf14:	2101      	movs	r1, #1
   1cf16:	2000      	movs	r0, #0
   1cf18:	4b8a      	ldr	r3, [pc, #552]	; (1d144 <vTask_MOTORCONTROL+0x410>)
   1cf1a:	4798      	blx	r3
			taskPSet=false;
   1cf1c:	4b88      	ldr	r3, [pc, #544]	; (1d140 <vTask_MOTORCONTROL+0x40c>)
   1cf1e:	2200      	movs	r2, #0
   1cf20:	701a      	strb	r2, [r3, #0]
		}
		xSemaphoreGive(xButton_Semaphore);
   1cf22:	4b85      	ldr	r3, [pc, #532]	; (1d138 <vTask_MOTORCONTROL+0x404>)
   1cf24:	6818      	ldr	r0, [r3, #0]
   1cf26:	2300      	movs	r3, #0
   1cf28:	2200      	movs	r2, #0
   1cf2a:	2100      	movs	r1, #0
   1cf2c:	4c86      	ldr	r4, [pc, #536]	; (1d148 <vTask_MOTORCONTROL+0x414>)
   1cf2e:	47a0      	blx	r4
		
		if(!startSequenceOn && !stopSequenceOn)
   1cf30:	4b6f      	ldr	r3, [pc, #444]	; (1d0f0 <vTask_MOTORCONTROL+0x3bc>)
   1cf32:	781b      	ldrb	r3, [r3, #0]
   1cf34:	2201      	movs	r2, #1
   1cf36:	4053      	eors	r3, r2
   1cf38:	b2db      	uxtb	r3, r3
   1cf3a:	2b00      	cmp	r3, #0
   1cf3c:	d045      	beq.n	1cfca <vTask_MOTORCONTROL+0x296>
   1cf3e:	4b6e      	ldr	r3, [pc, #440]	; (1d0f8 <vTask_MOTORCONTROL+0x3c4>)
   1cf40:	781b      	ldrb	r3, [r3, #0]
   1cf42:	2201      	movs	r2, #1
   1cf44:	4053      	eors	r3, r2
   1cf46:	b2db      	uxtb	r3, r3
   1cf48:	2b00      	cmp	r3, #0
   1cf4a:	d03e      	beq.n	1cfca <vTask_MOTORCONTROL+0x296>
		{
			uint8_t tempEventOccured=eventOccured;
   1cf4c:	4b57      	ldr	r3, [pc, #348]	; (1d0ac <vTask_MOTORCONTROL+0x378>)
   1cf4e:	781b      	ldrb	r3, [r3, #0]
   1cf50:	b2da      	uxtb	r2, r3
   1cf52:	230f      	movs	r3, #15
   1cf54:	18fb      	adds	r3, r7, r3
   1cf56:	701a      	strb	r2, [r3, #0]
			//uint8_t tempButtonEventOccured=buttonEventOccured;
			
			
			if(tempEventOccured)
   1cf58:	230f      	movs	r3, #15
   1cf5a:	18fb      	adds	r3, r7, r3
   1cf5c:	781b      	ldrb	r3, [r3, #0]
   1cf5e:	2b00      	cmp	r3, #0
   1cf60:	d02c      	beq.n	1cfbc <vTask_MOTORCONTROL+0x288>
			{
				if(firstEvent)
   1cf62:	4b54      	ldr	r3, [pc, #336]	; (1d0b4 <vTask_MOTORCONTROL+0x380>)
   1cf64:	781b      	ldrb	r3, [r3, #0]
   1cf66:	b2db      	uxtb	r3, r3
   1cf68:	2b00      	cmp	r3, #0
   1cf6a:	d010      	beq.n	1cf8e <vTask_MOTORCONTROL+0x25a>
				{
					if((xTaskGetTickCount()-delayForFirstEvent>35000L) || boolGsm_config_flag)
   1cf6c:	4b50      	ldr	r3, [pc, #320]	; (1d0b0 <vTask_MOTORCONTROL+0x37c>)
   1cf6e:	4798      	blx	r3
   1cf70:	0002      	movs	r2, r0
   1cf72:	693b      	ldr	r3, [r7, #16]
   1cf74:	1ad3      	subs	r3, r2, r3
   1cf76:	4a75      	ldr	r2, [pc, #468]	; (1d14c <vTask_MOTORCONTROL+0x418>)
   1cf78:	4293      	cmp	r3, r2
   1cf7a:	d804      	bhi.n	1cf86 <vTask_MOTORCONTROL+0x252>
   1cf7c:	4b74      	ldr	r3, [pc, #464]	; (1d150 <vTask_MOTORCONTROL+0x41c>)
   1cf7e:	781b      	ldrb	r3, [r3, #0]
   1cf80:	b2db      	uxtb	r3, r3
   1cf82:	2b00      	cmp	r3, #0
   1cf84:	d01a      	beq.n	1cfbc <vTask_MOTORCONTROL+0x288>
					{
						firstEvent = false;
   1cf86:	4b4b      	ldr	r3, [pc, #300]	; (1d0b4 <vTask_MOTORCONTROL+0x380>)
   1cf88:	2200      	movs	r2, #0
   1cf8a:	701a      	strb	r2, [r3, #0]
   1cf8c:	e016      	b.n	1cfbc <vTask_MOTORCONTROL+0x288>
					}
				}
				else
				{
					
					if(motorFeedbackEvent)
   1cf8e:	4b50      	ldr	r3, [pc, #320]	; (1d0d0 <vTask_MOTORCONTROL+0x39c>)
   1cf90:	781b      	ldrb	r3, [r3, #0]
   1cf92:	b2db      	uxtb	r3, r3
   1cf94:	2b00      	cmp	r3, #0
   1cf96:	d00f      	beq.n	1cfb8 <vTask_MOTORCONTROL+0x284>
					{
						if((xTaskGetTickCount()-motorFeedbackEventTime>1800))
   1cf98:	4b45      	ldr	r3, [pc, #276]	; (1d0b0 <vTask_MOTORCONTROL+0x37c>)
   1cf9a:	4798      	blx	r3
   1cf9c:	0002      	movs	r2, r0
   1cf9e:	4b6d      	ldr	r3, [pc, #436]	; (1d154 <vTask_MOTORCONTROL+0x420>)
   1cfa0:	681b      	ldr	r3, [r3, #0]
   1cfa2:	1ad2      	subs	r2, r2, r3
   1cfa4:	23e1      	movs	r3, #225	; 0xe1
   1cfa6:	00db      	lsls	r3, r3, #3
   1cfa8:	429a      	cmp	r2, r3
   1cfaa:	d907      	bls.n	1cfbc <vTask_MOTORCONTROL+0x288>
						{
							motorFeedbackEvent=false;
   1cfac:	4b48      	ldr	r3, [pc, #288]	; (1d0d0 <vTask_MOTORCONTROL+0x39c>)
   1cfae:	2200      	movs	r2, #0
   1cfb0:	701a      	strb	r2, [r3, #0]
							operateOnEvent();
   1cfb2:	4b69      	ldr	r3, [pc, #420]	; (1d158 <vTask_MOTORCONTROL+0x424>)
   1cfb4:	4798      	blx	r3
   1cfb6:	e001      	b.n	1cfbc <vTask_MOTORCONTROL+0x288>
						}
					}
					else
					{
						operateOnEvent();
   1cfb8:	4b67      	ldr	r3, [pc, #412]	; (1d158 <vTask_MOTORCONTROL+0x424>)
   1cfba:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
   1cfbc:	4b57      	ldr	r3, [pc, #348]	; (1d11c <vTask_MOTORCONTROL+0x3e8>)
   1cfbe:	781b      	ldrb	r3, [r3, #0]
   1cfc0:	b2db      	uxtb	r3, r3
   1cfc2:	2b00      	cmp	r3, #0
   1cfc4:	d001      	beq.n	1cfca <vTask_MOTORCONTROL+0x296>
			{
				buttonFilter();
   1cfc6:	4b65      	ldr	r3, [pc, #404]	; (1d15c <vTask_MOTORCONTROL+0x428>)
   1cfc8:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
   1cfca:	4b65      	ldr	r3, [pc, #404]	; (1d160 <vTask_MOTORCONTROL+0x42c>)
   1cfcc:	4798      	blx	r3
   1cfce:	1e03      	subs	r3, r0, #0
   1cfd0:	d003      	beq.n	1cfda <vTask_MOTORCONTROL+0x2a6>
					detect_battery_voltage_and_percentage();
   1cfd2:	4b64      	ldr	r3, [pc, #400]	; (1d164 <vTask_MOTORCONTROL+0x430>)
   1cfd4:	4798      	blx	r3
					detect_Three_Phase_Voltage();
   1cfd6:	4b64      	ldr	r3, [pc, #400]	; (1d168 <vTask_MOTORCONTROL+0x434>)
   1cfd8:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1cfda:	4b53      	ldr	r3, [pc, #332]	; (1d128 <vTask_MOTORCONTROL+0x3f4>)
   1cfdc:	785b      	ldrb	r3, [r3, #1]
   1cfde:	2b00      	cmp	r3, #0
   1cfe0:	d014      	beq.n	1d00c <vTask_MOTORCONTROL+0x2d8>
		{
			if(should_Detect_New_Current()) {
   1cfe2:	4b62      	ldr	r3, [pc, #392]	; (1d16c <vTask_MOTORCONTROL+0x438>)
   1cfe4:	4798      	blx	r3
   1cfe6:	1e03      	subs	r3, r0, #0
   1cfe8:	d010      	beq.n	1d00c <vTask_MOTORCONTROL+0x2d8>
				detect_Motor_Current();
   1cfea:	4b61      	ldr	r3, [pc, #388]	; (1d170 <vTask_MOTORCONTROL+0x43c>)
   1cfec:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
   1cfee:	4b61      	ldr	r3, [pc, #388]	; (1d174 <vTask_MOTORCONTROL+0x440>)
   1cff0:	2225      	movs	r2, #37	; 0x25
   1cff2:	5c9b      	ldrb	r3, [r3, r2]
   1cff4:	b2db      	uxtb	r3, r3
   1cff6:	2b01      	cmp	r3, #1
   1cff8:	d106      	bne.n	1d008 <vTask_MOTORCONTROL+0x2d4>
				{
					if(detectMotorStateChangeUsingCurrent())
   1cffa:	4b5f      	ldr	r3, [pc, #380]	; (1d178 <vTask_MOTORCONTROL+0x444>)
   1cffc:	4798      	blx	r3
   1cffe:	1e03      	subs	r3, r0, #0
   1d000:	d002      	beq.n	1d008 <vTask_MOTORCONTROL+0x2d4>
					{
						eventOccured=true;
   1d002:	4b2a      	ldr	r3, [pc, #168]	; (1d0ac <vTask_MOTORCONTROL+0x378>)
   1d004:	2201      	movs	r2, #1
   1d006:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
   1d008:	4b5c      	ldr	r3, [pc, #368]	; (1d17c <vTask_MOTORCONTROL+0x448>)
   1d00a:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
   1d00c:	4b33      	ldr	r3, [pc, #204]	; (1d0dc <vTask_MOTORCONTROL+0x3a8>)
   1d00e:	781b      	ldrb	r3, [r3, #0]
   1d010:	2b00      	cmp	r3, #0
   1d012:	d005      	beq.n	1d020 <vTask_MOTORCONTROL+0x2ec>
   1d014:	4b5a      	ldr	r3, [pc, #360]	; (1d180 <vTask_MOTORCONTROL+0x44c>)
   1d016:	4798      	blx	r3
   1d018:	1e03      	subs	r3, r0, #0
   1d01a:	d001      	beq.n	1d020 <vTask_MOTORCONTROL+0x2ec>
		{
			operateOnStableLine();
   1d01c:	4b59      	ldr	r3, [pc, #356]	; (1d184 <vTask_MOTORCONTROL+0x450>)
   1d01e:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000L)
   1d020:	4b2a      	ldr	r3, [pc, #168]	; (1d0cc <vTask_MOTORCONTROL+0x398>)
   1d022:	781b      	ldrb	r3, [r3, #0]
   1d024:	2b00      	cmp	r3, #0
   1d026:	d00b      	beq.n	1d040 <vTask_MOTORCONTROL+0x30c>
   1d028:	4b21      	ldr	r3, [pc, #132]	; (1d0b0 <vTask_MOTORCONTROL+0x37c>)
   1d02a:	4798      	blx	r3
   1d02c:	0002      	movs	r2, r0
   1d02e:	4b56      	ldr	r3, [pc, #344]	; (1d188 <vTask_MOTORCONTROL+0x454>)
   1d030:	681b      	ldr	r3, [r3, #0]
   1d032:	1ad3      	subs	r3, r2, r3
   1d034:	4a55      	ldr	r2, [pc, #340]	; (1d18c <vTask_MOTORCONTROL+0x458>)
   1d036:	4293      	cmp	r3, r2
   1d038:	d902      	bls.n	1d040 <vTask_MOTORCONTROL+0x30c>
		{
			stopMotorCommandGiven=false;
   1d03a:	4b24      	ldr	r3, [pc, #144]	; (1d0cc <vTask_MOTORCONTROL+0x398>)
   1d03c:	2200      	movs	r2, #0
   1d03e:	701a      	strb	r2, [r3, #0]
		}
		
		if(motorRelatedVoltageBypassOn)
   1d040:	4b37      	ldr	r3, [pc, #220]	; (1d120 <vTask_MOTORCONTROL+0x3ec>)
   1d042:	781b      	ldrb	r3, [r3, #0]
   1d044:	2b00      	cmp	r3, #0
   1d046:	d006      	beq.n	1d056 <vTask_MOTORCONTROL+0x322>
		{
			if(MotorVoltageBypassTimerOver())
   1d048:	4b51      	ldr	r3, [pc, #324]	; (1d190 <vTask_MOTORCONTROL+0x45c>)
   1d04a:	4798      	blx	r3
   1d04c:	1e03      	subs	r3, r0, #0
   1d04e:	d002      	beq.n	1d056 <vTask_MOTORCONTROL+0x322>
			{
				motorRelatedVoltageBypassOn=false;
   1d050:	4b33      	ldr	r3, [pc, #204]	; (1d120 <vTask_MOTORCONTROL+0x3ec>)
   1d052:	2200      	movs	r2, #0
   1d054:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(singlePhasingTimerOn)
   1d056:	4b23      	ldr	r3, [pc, #140]	; (1d0e4 <vTask_MOTORCONTROL+0x3b0>)
   1d058:	781b      	ldrb	r3, [r3, #0]
   1d05a:	2b00      	cmp	r3, #0
   1d05c:	d100      	bne.n	1d060 <vTask_MOTORCONTROL+0x32c>
   1d05e:	e0a2      	b.n	1d1a6 <vTask_MOTORCONTROL+0x472>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
   1d060:	4b4c      	ldr	r3, [pc, #304]	; (1d194 <vTask_MOTORCONTROL+0x460>)
   1d062:	785b      	ldrb	r3, [r3, #1]
   1d064:	b2db      	uxtb	r3, r3
   1d066:	2b03      	cmp	r3, #3
   1d068:	d003      	beq.n	1d072 <vTask_MOTORCONTROL+0x33e>
			{
				b = false;
   1d06a:	2316      	movs	r3, #22
   1d06c:	18fb      	adds	r3, r7, r3
   1d06e:	2200      	movs	r2, #0
   1d070:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
   1d072:	2316      	movs	r3, #22
   1d074:	18fb      	adds	r3, r7, r3
   1d076:	781b      	ldrb	r3, [r3, #0]
   1d078:	2201      	movs	r2, #1
   1d07a:	4053      	eors	r3, r2
   1d07c:	b2db      	uxtb	r3, r3
   1d07e:	2b00      	cmp	r3, #0
   1d080:	d100      	bne.n	1d084 <vTask_MOTORCONTROL+0x350>
   1d082:	e08d      	b.n	1d1a0 <vTask_MOTORCONTROL+0x46c>
			{
				if(singlePhasingTimerOver())
   1d084:	4b44      	ldr	r3, [pc, #272]	; (1d198 <vTask_MOTORCONTROL+0x464>)
   1d086:	4798      	blx	r3
   1d088:	1e03      	subs	r3, r0, #0
   1d08a:	d100      	bne.n	1d08e <vTask_MOTORCONTROL+0x35a>
   1d08c:	e08b      	b.n	1d1a6 <vTask_MOTORCONTROL+0x472>
				{
					operateOnSinglePhasing();
   1d08e:	4b43      	ldr	r3, [pc, #268]	; (1d19c <vTask_MOTORCONTROL+0x468>)
   1d090:	4798      	blx	r3
   1d092:	e088      	b.n	1d1a6 <vTask_MOTORCONTROL+0x472>
   1d094:	0001a8a5 	.word	0x0001a8a5
   1d098:	0001d6c5 	.word	0x0001d6c5
   1d09c:	20000a45 	.word	0x20000a45
   1d0a0:	200009a0 	.word	0x200009a0
   1d0a4:	20000a10 	.word	0x20000a10
   1d0a8:	20000914 	.word	0x20000914
   1d0ac:	2000092e 	.word	0x2000092e
   1d0b0:	00020ccd 	.word	0x00020ccd
   1d0b4:	20000976 	.word	0x20000976
   1d0b8:	20000a90 	.word	0x20000a90
   1d0bc:	00019a81 	.word	0x00019a81
   1d0c0:	00020969 	.word	0x00020969
   1d0c4:	2000098d 	.word	0x2000098d
   1d0c8:	20000a46 	.word	0x20000a46
   1d0cc:	20000a64 	.word	0x20000a64
   1d0d0:	2000098a 	.word	0x2000098a
   1d0d4:	2000099a 	.word	0x2000099a
   1d0d8:	200009e1 	.word	0x200009e1
   1d0dc:	20000a11 	.word	0x20000a11
   1d0e0:	20000970 	.word	0x20000970
   1d0e4:	20000991 	.word	0x20000991
   1d0e8:	20000a1c 	.word	0x20000a1c
   1d0ec:	2000099b 	.word	0x2000099b
   1d0f0:	20000999 	.word	0x20000999
   1d0f4:	20000a67 	.word	0x20000a67
   1d0f8:	20000988 	.word	0x20000988
   1d0fc:	0001bab9 	.word	0x0001bab9
   1d100:	0001bb21 	.word	0x0001bb21
   1d104:	0001ba85 	.word	0x0001ba85
   1d108:	200009b4 	.word	0x200009b4
   1d10c:	0001b30d 	.word	0x0001b30d
   1d110:	20000930 	.word	0x20000930
   1d114:	200009e4 	.word	0x200009e4
   1d118:	20000968 	.word	0x20000968
   1d11c:	20000980 	.word	0x20000980
   1d120:	20000973 	.word	0x20000973
   1d124:	20000984 	.word	0x20000984
   1d128:	2000082c 	.word	0x2000082c
   1d12c:	20000918 	.word	0x20000918
   1d130:	200009fc 	.word	0x200009fc
   1d134:	0001be15 	.word	0x0001be15
   1d138:	20000434 	.word	0x20000434
   1d13c:	00020061 	.word	0x00020061
   1d140:	20000a84 	.word	0x20000a84
   1d144:	000209c5 	.word	0x000209c5
   1d148:	0001fbc1 	.word	0x0001fbc1
   1d14c:	000088b8 	.word	0x000088b8
   1d150:	200009c8 	.word	0x200009c8
   1d154:	20000a60 	.word	0x20000a60
   1d158:	0001beb9 	.word	0x0001beb9
   1d15c:	0001d8b9 	.word	0x0001d8b9
   1d160:	0001b231 	.word	0x0001b231
   1d164:	0001b24d 	.word	0x0001b24d
   1d168:	0001b569 	.word	0x0001b569
   1d16c:	0001ba55 	.word	0x0001ba55
   1d170:	0001b839 	.word	0x0001b839
   1d174:	20000854 	.word	0x20000854
   1d178:	0001bcf5 	.word	0x0001bcf5
   1d17c:	0001cb15 	.word	0x0001cb15
   1d180:	0001c1dd 	.word	0x0001c1dd
   1d184:	0001c09d 	.word	0x0001c09d
   1d188:	200009ac 	.word	0x200009ac
   1d18c:	00001388 	.word	0x00001388
   1d190:	0001cae5 	.word	0x0001cae5
   1d194:	20000948 	.word	0x20000948
   1d198:	0001c56d 	.word	0x0001c56d
   1d19c:	0001c5b9 	.word	0x0001c5b9
				}
			}
			else
			{
				singlePhasingTimerOn=false;
   1d1a0:	4b15      	ldr	r3, [pc, #84]	; (1d1f8 <vTask_MOTORCONTROL+0x4c4>)
   1d1a2:	2200      	movs	r2, #0
   1d1a4:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
   1d1a6:	4b15      	ldr	r3, [pc, #84]	; (1d1fc <vTask_MOTORCONTROL+0x4c8>)
   1d1a8:	781b      	ldrb	r3, [r3, #0]
   1d1aa:	2b00      	cmp	r3, #0
   1d1ac:	d007      	beq.n	1d1be <vTask_MOTORCONTROL+0x48a>
		{
			if (startMotorTimerOver())
   1d1ae:	4b14      	ldr	r3, [pc, #80]	; (1d200 <vTask_MOTORCONTROL+0x4cc>)
   1d1b0:	4798      	blx	r3
   1d1b2:	1e03      	subs	r3, r0, #0
   1d1b4:	d003      	beq.n	1d1be <vTask_MOTORCONTROL+0x48a>
			{
				startMotor(false,false);
   1d1b6:	2100      	movs	r1, #0
   1d1b8:	2000      	movs	r0, #0
   1d1ba:	4b12      	ldr	r3, [pc, #72]	; (1d204 <vTask_MOTORCONTROL+0x4d0>)
   1d1bc:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
   1d1be:	4b12      	ldr	r3, [pc, #72]	; (1d208 <vTask_MOTORCONTROL+0x4d4>)
   1d1c0:	781b      	ldrb	r3, [r3, #0]
   1d1c2:	2b00      	cmp	r3, #0
   1d1c4:	d001      	beq.n	1d1ca <vTask_MOTORCONTROL+0x496>
		{
			terminateStartRelay();
   1d1c6:	4b11      	ldr	r3, [pc, #68]	; (1d20c <vTask_MOTORCONTROL+0x4d8>)
   1d1c8:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
   1d1ca:	4b11      	ldr	r3, [pc, #68]	; (1d210 <vTask_MOTORCONTROL+0x4dc>)
   1d1cc:	781b      	ldrb	r3, [r3, #0]
   1d1ce:	2b00      	cmp	r3, #0
   1d1d0:	d001      	beq.n	1d1d6 <vTask_MOTORCONTROL+0x4a2>
		{
			terminateStarDeltaTimer();
   1d1d2:	4b10      	ldr	r3, [pc, #64]	; (1d214 <vTask_MOTORCONTROL+0x4e0>)
   1d1d4:	4798      	blx	r3
		}
		if(stopSequenceOn)
   1d1d6:	4b10      	ldr	r3, [pc, #64]	; (1d218 <vTask_MOTORCONTROL+0x4e4>)
   1d1d8:	781b      	ldrb	r3, [r3, #0]
   1d1da:	2b00      	cmp	r3, #0
   1d1dc:	d001      	beq.n	1d1e2 <vTask_MOTORCONTROL+0x4ae>
		{
			terminateStopRelay();
   1d1de:	4b0f      	ldr	r3, [pc, #60]	; (1d21c <vTask_MOTORCONTROL+0x4e8>)
   1d1e0:	4798      	blx	r3
		}
		
		SIMEventManager();
   1d1e2:	4b0f      	ldr	r3, [pc, #60]	; (1d220 <vTask_MOTORCONTROL+0x4ec>)
   1d1e4:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
   1d1e6:	4b0f      	ldr	r3, [pc, #60]	; (1d224 <vTask_MOTORCONTROL+0x4f0>)
   1d1e8:	78db      	ldrb	r3, [r3, #3]
   1d1ea:	2b00      	cmp	r3, #0
   1d1ec:	d100      	bne.n	1d1f0 <vTask_MOTORCONTROL+0x4bc>
   1d1ee:	e684      	b.n	1cefa <vTask_MOTORCONTROL+0x1c6>
		{
			M2MEventManager();
   1d1f0:	4b0d      	ldr	r3, [pc, #52]	; (1d228 <vTask_MOTORCONTROL+0x4f4>)
   1d1f2:	4798      	blx	r3
		xSemaphoreTake(xButton_Semaphore, portMAX_DELAY);
   1d1f4:	e681      	b.n	1cefa <vTask_MOTORCONTROL+0x1c6>
   1d1f6:	46c0      	nop			; (mov r8, r8)
   1d1f8:	20000991 	.word	0x20000991
   1d1fc:	2000099a 	.word	0x2000099a
   1d200:	0001c505 	.word	0x0001c505
   1d204:	0001c229 	.word	0x0001c229
   1d208:	20000999 	.word	0x20000999
   1d20c:	0001c73d 	.word	0x0001c73d
   1d210:	2000099b 	.word	0x2000099b
   1d214:	0001c6c9 	.word	0x0001c6c9
   1d218:	20000988 	.word	0x20000988
   1d21c:	0001c5f5 	.word	0x0001c5f5
   1d220:	0001ca4d 	.word	0x0001ca4d
   1d224:	2000082c 	.word	0x2000082c
   1d228:	0001ca09 	.word	0x0001ca09

0001d22c <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
   1d22c:	b590      	push	{r4, r7, lr}
   1d22e:	b08b      	sub	sp, #44	; 0x2c
   1d230:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
   1d232:	2314      	movs	r3, #20
   1d234:	18fb      	adds	r3, r7, r3
   1d236:	0018      	movs	r0, r3
   1d238:	4bae      	ldr	r3, [pc, #696]	; (1d4f4 <start_motor_service+0x2c8>)
   1d23a:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
   1d23c:	2314      	movs	r3, #20
   1d23e:	18fb      	adds	r3, r7, r3
   1d240:	222b      	movs	r2, #43	; 0x2b
   1d242:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
   1d244:	2314      	movs	r3, #20
   1d246:	18fb      	adds	r3, r7, r3
   1d248:	2200      	movs	r2, #0
   1d24a:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
   1d24c:	2314      	movs	r3, #20
   1d24e:	18fb      	adds	r3, r7, r3
   1d250:	2201      	movs	r2, #1
   1d252:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
   1d254:	2314      	movs	r3, #20
   1d256:	18fb      	adds	r3, r7, r3
   1d258:	2201      	movs	r2, #1
   1d25a:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = true;
   1d25c:	2314      	movs	r3, #20
   1d25e:	18fb      	adds	r3, r7, r3
   1d260:	2201      	movs	r2, #1
   1d262:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
   1d264:	2314      	movs	r3, #20
   1d266:	18fb      	adds	r3, r7, r3
   1d268:	0019      	movs	r1, r3
   1d26a:	200b      	movs	r0, #11
   1d26c:	4ba2      	ldr	r3, [pc, #648]	; (1d4f8 <start_motor_service+0x2cc>)
   1d26e:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
   1d270:	4ba2      	ldr	r3, [pc, #648]	; (1d4fc <start_motor_service+0x2d0>)
   1d272:	2200      	movs	r2, #0
   1d274:	210b      	movs	r1, #11
   1d276:	0018      	movs	r0, r3
   1d278:	4ba1      	ldr	r3, [pc, #644]	; (1d500 <start_motor_service+0x2d4>)
   1d27a:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
   1d27c:	2100      	movs	r1, #0
   1d27e:	200b      	movs	r0, #11
   1d280:	4ba0      	ldr	r3, [pc, #640]	; (1d504 <start_motor_service+0x2d8>)
   1d282:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
   1d284:	2310      	movs	r3, #16
   1d286:	18fb      	adds	r3, r7, r3
   1d288:	0018      	movs	r0, r3
   1d28a:	4b9f      	ldr	r3, [pc, #636]	; (1d508 <start_motor_service+0x2dc>)
   1d28c:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
   1d28e:	2310      	movs	r3, #16
   1d290:	18fb      	adds	r3, r7, r3
   1d292:	2200      	movs	r2, #0
   1d294:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
   1d296:	2310      	movs	r3, #16
   1d298:	18fb      	adds	r3, r7, r3
   1d29a:	2201      	movs	r2, #1
   1d29c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
   1d29e:	2310      	movs	r3, #16
   1d2a0:	18fb      	adds	r3, r7, r3
   1d2a2:	0019      	movs	r1, r3
   1d2a4:	202a      	movs	r0, #42	; 0x2a
   1d2a6:	4b99      	ldr	r3, [pc, #612]	; (1d50c <start_motor_service+0x2e0>)
   1d2a8:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
   1d2aa:	2203      	movs	r2, #3
   1d2ac:	2100      	movs	r1, #0
   1d2ae:	2001      	movs	r0, #1
   1d2b0:	4b97      	ldr	r3, [pc, #604]	; (1d510 <start_motor_service+0x2e4>)
   1d2b2:	4798      	blx	r3
   1d2b4:	0002      	movs	r2, r0
   1d2b6:	4b97      	ldr	r3, [pc, #604]	; (1d514 <start_motor_service+0x2e8>)
   1d2b8:	601a      	str	r2, [r3, #0]
   1d2ba:	4b96      	ldr	r3, [pc, #600]	; (1d514 <start_motor_service+0x2e8>)
   1d2bc:	681b      	ldr	r3, [r3, #0]
   1d2be:	2b00      	cmp	r3, #0
   1d2c0:	d006      	beq.n	1d2d0 <start_motor_service+0xa4>
   1d2c2:	4b94      	ldr	r3, [pc, #592]	; (1d514 <start_motor_service+0x2e8>)
   1d2c4:	6818      	ldr	r0, [r3, #0]
   1d2c6:	2300      	movs	r3, #0
   1d2c8:	2200      	movs	r2, #0
   1d2ca:	2100      	movs	r1, #0
   1d2cc:	4c92      	ldr	r4, [pc, #584]	; (1d518 <start_motor_service+0x2ec>)
   1d2ce:	47a0      	blx	r4
	
	vSemaphoreCreateBinary(xButton_Semaphore);
   1d2d0:	2203      	movs	r2, #3
   1d2d2:	2100      	movs	r1, #0
   1d2d4:	2001      	movs	r0, #1
   1d2d6:	4b8e      	ldr	r3, [pc, #568]	; (1d510 <start_motor_service+0x2e4>)
   1d2d8:	4798      	blx	r3
   1d2da:	0002      	movs	r2, r0
   1d2dc:	4b8f      	ldr	r3, [pc, #572]	; (1d51c <start_motor_service+0x2f0>)
   1d2de:	601a      	str	r2, [r3, #0]
   1d2e0:	4b8e      	ldr	r3, [pc, #568]	; (1d51c <start_motor_service+0x2f0>)
   1d2e2:	681b      	ldr	r3, [r3, #0]
   1d2e4:	2b00      	cmp	r3, #0
   1d2e6:	d006      	beq.n	1d2f6 <start_motor_service+0xca>
   1d2e8:	4b8c      	ldr	r3, [pc, #560]	; (1d51c <start_motor_service+0x2f0>)
   1d2ea:	6818      	ldr	r0, [r3, #0]
   1d2ec:	2300      	movs	r3, #0
   1d2ee:	2200      	movs	r2, #0
   1d2f0:	2100      	movs	r1, #0
   1d2f2:	4c89      	ldr	r4, [pc, #548]	; (1d518 <start_motor_service+0x2ec>)
   1d2f4:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
   1d2f6:	230c      	movs	r3, #12
   1d2f8:	18fb      	adds	r3, r7, r3
   1d2fa:	0018      	movs	r0, r3
   1d2fc:	4b82      	ldr	r3, [pc, #520]	; (1d508 <start_motor_service+0x2dc>)
   1d2fe:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
   1d300:	230c      	movs	r3, #12
   1d302:	18fb      	adds	r3, r7, r3
   1d304:	2201      	movs	r2, #1
   1d306:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
   1d308:	230c      	movs	r3, #12
   1d30a:	18fb      	adds	r3, r7, r3
   1d30c:	2200      	movs	r2, #0
   1d30e:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
   1d310:	230c      	movs	r3, #12
   1d312:	18fb      	adds	r3, r7, r3
   1d314:	0019      	movs	r1, r3
   1d316:	202d      	movs	r0, #45	; 0x2d
   1d318:	4b7c      	ldr	r3, [pc, #496]	; (1d50c <start_motor_service+0x2e0>)
   1d31a:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
   1d31c:	230c      	movs	r3, #12
   1d31e:	18fb      	adds	r3, r7, r3
   1d320:	0019      	movs	r1, r3
   1d322:	202c      	movs	r0, #44	; 0x2c
   1d324:	4b79      	ldr	r3, [pc, #484]	; (1d50c <start_motor_service+0x2e0>)
   1d326:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
   1d328:	230c      	movs	r3, #12
   1d32a:	18fb      	adds	r3, r7, r3
   1d32c:	0019      	movs	r1, r3
   1d32e:	2028      	movs	r0, #40	; 0x28
   1d330:	4b76      	ldr	r3, [pc, #472]	; (1d50c <start_motor_service+0x2e0>)
   1d332:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
   1d334:	230c      	movs	r3, #12
   1d336:	18fb      	adds	r3, r7, r3
   1d338:	0019      	movs	r1, r3
   1d33a:	2027      	movs	r0, #39	; 0x27
   1d33c:	4b73      	ldr	r3, [pc, #460]	; (1d50c <start_motor_service+0x2e0>)
   1d33e:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
   1d340:	230c      	movs	r3, #12
   1d342:	18fb      	adds	r3, r7, r3
   1d344:	0019      	movs	r1, r3
   1d346:	2005      	movs	r0, #5
   1d348:	4b70      	ldr	r3, [pc, #448]	; (1d50c <start_motor_service+0x2e0>)
   1d34a:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
   1d34c:	2101      	movs	r1, #1
   1d34e:	2028      	movs	r0, #40	; 0x28
   1d350:	4b73      	ldr	r3, [pc, #460]	; (1d520 <start_motor_service+0x2f4>)
   1d352:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
   1d354:	2101      	movs	r1, #1
   1d356:	2005      	movs	r0, #5
   1d358:	4b71      	ldr	r3, [pc, #452]	; (1d520 <start_motor_service+0x2f4>)
   1d35a:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
   1d35c:	2101      	movs	r1, #1
   1d35e:	2027      	movs	r0, #39	; 0x27
   1d360:	4b6f      	ldr	r3, [pc, #444]	; (1d520 <start_motor_service+0x2f4>)
   1d362:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
   1d364:	003b      	movs	r3, r7
   1d366:	0018      	movs	r0, r3
   1d368:	4b62      	ldr	r3, [pc, #392]	; (1d4f4 <start_motor_service+0x2c8>)
   1d36a:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
   1d36c:	003b      	movs	r3, r7
   1d36e:	222e      	movs	r2, #46	; 0x2e
   1d370:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
   1d372:	003b      	movs	r3, r7
   1d374:	2200      	movs	r2, #0
   1d376:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_NONE;
   1d378:	003b      	movs	r3, r7
   1d37a:	2200      	movs	r2, #0
   1d37c:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
   1d37e:	003b      	movs	r3, r7
   1d380:	2203      	movs	r2, #3
   1d382:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
   1d384:	003b      	movs	r3, r7
   1d386:	0019      	movs	r1, r3
   1d388:	200e      	movs	r0, #14
   1d38a:	4b5b      	ldr	r3, [pc, #364]	; (1d4f8 <start_motor_service+0x2cc>)
   1d38c:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1d38e:	2100      	movs	r1, #0
   1d390:	200e      	movs	r0, #14
   1d392:	4b5c      	ldr	r3, [pc, #368]	; (1d504 <start_motor_service+0x2d8>)
   1d394:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1d396:	4b63      	ldr	r3, [pc, #396]	; (1d524 <start_motor_service+0x2f8>)
   1d398:	2200      	movs	r2, #0
   1d39a:	210e      	movs	r1, #14
   1d39c:	0018      	movs	r0, r3
   1d39e:	4b58      	ldr	r3, [pc, #352]	; (1d500 <start_motor_service+0x2d4>)
   1d3a0:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
   1d3a2:	003b      	movs	r3, r7
   1d3a4:	2226      	movs	r2, #38	; 0x26
   1d3a6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
   1d3a8:	003b      	movs	r3, r7
   1d3aa:	2200      	movs	r2, #0
   1d3ac:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1d3ae:	003b      	movs	r3, r7
   1d3b0:	2201      	movs	r2, #1
   1d3b2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1d3b4:	003b      	movs	r3, r7
   1d3b6:	2202      	movs	r2, #2
   1d3b8:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
   1d3ba:	003b      	movs	r3, r7
   1d3bc:	0019      	movs	r1, r3
   1d3be:	2006      	movs	r0, #6
   1d3c0:	4b4d      	ldr	r3, [pc, #308]	; (1d4f8 <start_motor_service+0x2cc>)
   1d3c2:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1d3c4:	2100      	movs	r1, #0
   1d3c6:	2006      	movs	r0, #6
   1d3c8:	4b4e      	ldr	r3, [pc, #312]	; (1d504 <start_motor_service+0x2d8>)
   1d3ca:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1d3cc:	4b56      	ldr	r3, [pc, #344]	; (1d528 <start_motor_service+0x2fc>)
   1d3ce:	2200      	movs	r2, #0
   1d3d0:	2106      	movs	r1, #6
   1d3d2:	0018      	movs	r0, r3
   1d3d4:	4b4a      	ldr	r3, [pc, #296]	; (1d500 <start_motor_service+0x2d4>)
   1d3d6:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
   1d3d8:	003b      	movs	r3, r7
   1d3da:	2225      	movs	r2, #37	; 0x25
   1d3dc:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
   1d3de:	003b      	movs	r3, r7
   1d3e0:	2200      	movs	r2, #0
   1d3e2:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1d3e4:	003b      	movs	r3, r7
   1d3e6:	2201      	movs	r2, #1
   1d3e8:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1d3ea:	003b      	movs	r3, r7
   1d3ec:	2202      	movs	r2, #2
   1d3ee:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
   1d3f0:	003b      	movs	r3, r7
   1d3f2:	0019      	movs	r1, r3
   1d3f4:	2005      	movs	r0, #5
   1d3f6:	4b40      	ldr	r3, [pc, #256]	; (1d4f8 <start_motor_service+0x2cc>)
   1d3f8:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1d3fa:	2100      	movs	r1, #0
   1d3fc:	2005      	movs	r0, #5
   1d3fe:	4b41      	ldr	r3, [pc, #260]	; (1d504 <start_motor_service+0x2d8>)
   1d400:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1d402:	4b49      	ldr	r3, [pc, #292]	; (1d528 <start_motor_service+0x2fc>)
   1d404:	2200      	movs	r2, #0
   1d406:	2105      	movs	r1, #5
   1d408:	0018      	movs	r0, r3
   1d40a:	4b3d      	ldr	r3, [pc, #244]	; (1d500 <start_motor_service+0x2d4>)
   1d40c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
   1d40e:	003b      	movs	r3, r7
   1d410:	221c      	movs	r2, #28
   1d412:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
   1d414:	003b      	movs	r3, r7
   1d416:	2200      	movs	r2, #0
   1d418:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1d41a:	003b      	movs	r3, r7
   1d41c:	2201      	movs	r2, #1
   1d41e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1d420:	003b      	movs	r3, r7
   1d422:	2202      	movs	r2, #2
   1d424:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
   1d426:	003b      	movs	r3, r7
   1d428:	0019      	movs	r1, r3
   1d42a:	2008      	movs	r0, #8
   1d42c:	4b32      	ldr	r3, [pc, #200]	; (1d4f8 <start_motor_service+0x2cc>)
   1d42e:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1d430:	2100      	movs	r1, #0
   1d432:	2008      	movs	r0, #8
   1d434:	4b33      	ldr	r3, [pc, #204]	; (1d504 <start_motor_service+0x2d8>)
   1d436:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1d438:	4b3b      	ldr	r3, [pc, #236]	; (1d528 <start_motor_service+0x2fc>)
   1d43a:	2200      	movs	r2, #0
   1d43c:	2108      	movs	r1, #8
   1d43e:	0018      	movs	r0, r3
   1d440:	4b2f      	ldr	r3, [pc, #188]	; (1d500 <start_motor_service+0x2d4>)
   1d442:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
   1d444:	003b      	movs	r3, r7
   1d446:	2229      	movs	r2, #41	; 0x29
   1d448:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
   1d44a:	003b      	movs	r3, r7
   1d44c:	2200      	movs	r2, #0
   1d44e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1d450:	003b      	movs	r3, r7
   1d452:	2201      	movs	r2, #1
   1d454:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1d456:	003b      	movs	r3, r7
   1d458:	2202      	movs	r2, #2
   1d45a:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
   1d45c:	003b      	movs	r3, r7
   1d45e:	0019      	movs	r1, r3
   1d460:	2009      	movs	r0, #9
   1d462:	4b25      	ldr	r3, [pc, #148]	; (1d4f8 <start_motor_service+0x2cc>)
   1d464:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1d466:	2100      	movs	r1, #0
   1d468:	2009      	movs	r0, #9
   1d46a:	4b26      	ldr	r3, [pc, #152]	; (1d504 <start_motor_service+0x2d8>)
   1d46c:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
   1d46e:	4b2e      	ldr	r3, [pc, #184]	; (1d528 <start_motor_service+0x2fc>)
   1d470:	2200      	movs	r2, #0
   1d472:	2109      	movs	r1, #9
   1d474:	0018      	movs	r0, r3
   1d476:	4b22      	ldr	r3, [pc, #136]	; (1d500 <start_motor_service+0x2d4>)
   1d478:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1d47a:	482c      	ldr	r0, [pc, #176]	; (1d52c <start_motor_service+0x300>)
   1d47c:	2300      	movs	r3, #0
   1d47e:	9301      	str	r3, [sp, #4]
   1d480:	2301      	movs	r3, #1
   1d482:	9300      	str	r3, [sp, #0]
   1d484:	2300      	movs	r3, #0
   1d486:	2282      	movs	r2, #130	; 0x82
   1d488:	2100      	movs	r1, #0
   1d48a:	4c29      	ldr	r4, [pc, #164]	; (1d530 <start_motor_service+0x304>)
   1d48c:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
   1d48e:	4829      	ldr	r0, [pc, #164]	; (1d534 <start_motor_service+0x308>)
   1d490:	2300      	movs	r3, #0
   1d492:	9301      	str	r3, [sp, #4]
   1d494:	2301      	movs	r3, #1
   1d496:	9300      	str	r3, [sp, #0]
   1d498:	2300      	movs	r3, #0
   1d49a:	2282      	movs	r2, #130	; 0x82
   1d49c:	2100      	movs	r1, #0
   1d49e:	4c24      	ldr	r4, [pc, #144]	; (1d530 <start_motor_service+0x304>)
   1d4a0:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
   1d4a2:	4825      	ldr	r0, [pc, #148]	; (1d538 <start_motor_service+0x30c>)
   1d4a4:	4b25      	ldr	r3, [pc, #148]	; (1d53c <start_motor_service+0x310>)
   1d4a6:	9301      	str	r3, [sp, #4]
   1d4a8:	2301      	movs	r3, #1
   1d4aa:	9300      	str	r3, [sp, #0]
   1d4ac:	2300      	movs	r3, #0
   1d4ae:	2282      	movs	r2, #130	; 0x82
   1d4b0:	2100      	movs	r1, #0
   1d4b2:	4c1f      	ldr	r4, [pc, #124]	; (1d530 <start_motor_service+0x304>)
   1d4b4:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
   1d4b6:	4b22      	ldr	r3, [pc, #136]	; (1d540 <start_motor_service+0x314>)
   1d4b8:	795b      	ldrb	r3, [r3, #5]
   1d4ba:	2b00      	cmp	r3, #0
   1d4bc:	d00a      	beq.n	1d4d4 <start_motor_service+0x2a8>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
   1d4be:	23af      	movs	r3, #175	; 0xaf
   1d4c0:	009a      	lsls	r2, r3, #2
   1d4c2:	4820      	ldr	r0, [pc, #128]	; (1d544 <start_motor_service+0x318>)
   1d4c4:	2300      	movs	r3, #0
   1d4c6:	9301      	str	r3, [sp, #4]
   1d4c8:	2301      	movs	r3, #1
   1d4ca:	9300      	str	r3, [sp, #0]
   1d4cc:	2300      	movs	r3, #0
   1d4ce:	2100      	movs	r1, #0
   1d4d0:	4c17      	ldr	r4, [pc, #92]	; (1d530 <start_motor_service+0x304>)
   1d4d2:	47a0      	blx	r4
	}
	
	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)900,NULL,1, &motorTask);
   1d4d4:	23e1      	movs	r3, #225	; 0xe1
   1d4d6:	009a      	lsls	r2, r3, #2
   1d4d8:	481b      	ldr	r0, [pc, #108]	; (1d548 <start_motor_service+0x31c>)
   1d4da:	4b1c      	ldr	r3, [pc, #112]	; (1d54c <start_motor_service+0x320>)
   1d4dc:	9301      	str	r3, [sp, #4]
   1d4de:	2301      	movs	r3, #1
   1d4e0:	9300      	str	r3, [sp, #0]
   1d4e2:	2300      	movs	r3, #0
   1d4e4:	2100      	movs	r1, #0
   1d4e6:	4c12      	ldr	r4, [pc, #72]	; (1d530 <start_motor_service+0x304>)
   1d4e8:	47a0      	blx	r4

}
   1d4ea:	46c0      	nop			; (mov r8, r8)
   1d4ec:	46bd      	mov	sp, r7
   1d4ee:	b009      	add	sp, #36	; 0x24
   1d4f0:	bd90      	pop	{r4, r7, pc}
   1d4f2:	46c0      	nop			; (mov r8, r8)
   1d4f4:	0001ee01 	.word	0x0001ee01
   1d4f8:	0001ee35 	.word	0x0001ee35
   1d4fc:	0001af25 	.word	0x0001af25
   1d500:	00022e7d 	.word	0x00022e7d
   1d504:	00022ee1 	.word	0x00022ee1
   1d508:	00019f29 	.word	0x00019f29
   1d50c:	000237d1 	.word	0x000237d1
   1d510:	0001fb05 	.word	0x0001fb05
   1d514:	20000430 	.word	0x20000430
   1d518:	0001fbc1 	.word	0x0001fbc1
   1d51c:	20000434 	.word	0x20000434
   1d520:	00019f91 	.word	0x00019f91
   1d524:	0001d7cd 	.word	0x0001d7cd
   1d528:	0001cd21 	.word	0x0001cd21
   1d52c:	0001b13d 	.word	0x0001b13d
   1d530:	00020629 	.word	0x00020629
   1d534:	0001b1a9 	.word	0x0001b1a9
   1d538:	0001da95 	.word	0x0001da95
   1d53c:	2000043c 	.word	0x2000043c
   1d540:	2000082c 	.word	0x2000082c
   1d544:	0001a2e5 	.word	0x0001a2e5
   1d548:	0001cd35 	.word	0x0001cd35
   1d54c:	20000438 	.word	0x20000438

0001d550 <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
   1d550:	b580      	push	{r7, lr}
   1d552:	b082      	sub	sp, #8
   1d554:	af00      	add	r7, sp, #0
	uint8_t j = 0;
   1d556:	1dfb      	adds	r3, r7, #7
   1d558:	2200      	movs	r2, #0
   1d55a:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
   1d55c:	4b4c      	ldr	r3, [pc, #304]	; (1d690 <motor_checkSleepElligible+0x140>)
   1d55e:	795b      	ldrb	r3, [r3, #5]
   1d560:	2b00      	cmp	r3, #0
   1d562:	d00b      	beq.n	1d57c <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
   1d564:	4b4a      	ldr	r3, [pc, #296]	; (1d690 <motor_checkSleepElligible+0x140>)
   1d566:	791b      	ldrb	r3, [r3, #4]
   1d568:	2b00      	cmp	r3, #0
   1d56a:	d003      	beq.n	1d574 <motor_checkSleepElligible+0x24>
		{
			j = 19;
   1d56c:	1dfb      	adds	r3, r7, #7
   1d56e:	2213      	movs	r2, #19
   1d570:	701a      	strb	r2, [r3, #0]
   1d572:	e00e      	b.n	1d592 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
   1d574:	1dfb      	adds	r3, r7, #7
   1d576:	2211      	movs	r2, #17
   1d578:	701a      	strb	r2, [r3, #0]
   1d57a:	e00a      	b.n	1d592 <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
   1d57c:	4b44      	ldr	r3, [pc, #272]	; (1d690 <motor_checkSleepElligible+0x140>)
   1d57e:	785b      	ldrb	r3, [r3, #1]
   1d580:	2b00      	cmp	r3, #0
   1d582:	d003      	beq.n	1d58c <motor_checkSleepElligible+0x3c>
		{
			j = 14;
   1d584:	1dfb      	adds	r3, r7, #7
   1d586:	220e      	movs	r2, #14
   1d588:	701a      	strb	r2, [r3, #0]
   1d58a:	e002      	b.n	1d592 <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
   1d58c:	1dfb      	adds	r3, r7, #7
   1d58e:	220c      	movs	r2, #12
   1d590:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
   1d592:	1dbb      	adds	r3, r7, #6
   1d594:	2201      	movs	r2, #1
   1d596:	701a      	strb	r2, [r3, #0]
	while(j--)
   1d598:	e00c      	b.n	1d5b4 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
   1d59a:	1dfb      	adds	r3, r7, #7
   1d59c:	781b      	ldrb	r3, [r3, #0]
   1d59e:	4a3d      	ldr	r2, [pc, #244]	; (1d694 <motor_checkSleepElligible+0x144>)
   1d5a0:	5cd3      	ldrb	r3, [r2, r3]
   1d5a2:	2201      	movs	r2, #1
   1d5a4:	4053      	eors	r3, r2
   1d5a6:	b2db      	uxtb	r3, r3
   1d5a8:	2b00      	cmp	r3, #0
   1d5aa:	d003      	beq.n	1d5b4 <motor_checkSleepElligible+0x64>
		{
			event=false;
   1d5ac:	1dbb      	adds	r3, r7, #6
   1d5ae:	2200      	movs	r2, #0
   1d5b0:	701a      	strb	r2, [r3, #0]
			break;
   1d5b2:	e006      	b.n	1d5c2 <motor_checkSleepElligible+0x72>
	while(j--)
   1d5b4:	1dfb      	adds	r3, r7, #7
   1d5b6:	781b      	ldrb	r3, [r3, #0]
   1d5b8:	1dfa      	adds	r2, r7, #7
   1d5ba:	1e59      	subs	r1, r3, #1
   1d5bc:	7011      	strb	r1, [r2, #0]
   1d5be:	2b00      	cmp	r3, #0
   1d5c0:	d1eb      	bne.n	1d59a <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
   1d5c2:	4b33      	ldr	r3, [pc, #204]	; (1d690 <motor_checkSleepElligible+0x140>)
   1d5c4:	78db      	ldrb	r3, [r3, #3]
   1d5c6:	2b00      	cmp	r3, #0
   1d5c8:	d00e      	beq.n	1d5e8 <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
   1d5ca:	1dbb      	adds	r3, r7, #6
   1d5cc:	781b      	ldrb	r3, [r3, #0]
   1d5ce:	2b00      	cmp	r3, #0
   1d5d0:	d003      	beq.n	1d5da <motor_checkSleepElligible+0x8a>
   1d5d2:	4b31      	ldr	r3, [pc, #196]	; (1d698 <motor_checkSleepElligible+0x148>)
   1d5d4:	781b      	ldrb	r3, [r3, #0]
   1d5d6:	2b01      	cmp	r3, #1
   1d5d8:	d003      	beq.n	1d5e2 <motor_checkSleepElligible+0x92>
   1d5da:	4b2f      	ldr	r3, [pc, #188]	; (1d698 <motor_checkSleepElligible+0x148>)
   1d5dc:	785b      	ldrb	r3, [r3, #1]
   1d5de:	2b01      	cmp	r3, #1
   1d5e0:	d102      	bne.n	1d5e8 <motor_checkSleepElligible+0x98>
		{
			event = false;
   1d5e2:	1dbb      	adds	r3, r7, #6
   1d5e4:	2200      	movs	r2, #0
   1d5e6:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1d5e8:	4b2c      	ldr	r3, [pc, #176]	; (1d69c <motor_checkSleepElligible+0x14c>)
   1d5ea:	4798      	blx	r3
   1d5ec:	1e03      	subs	r3, r0, #0
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1d5ee:	d145      	bne.n	1d67c <motor_checkSleepElligible+0x12c>
	return ((getAllPhaseState()==AC_OFF) && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
   1d5f0:	4b2b      	ldr	r3, [pc, #172]	; (1d6a0 <motor_checkSleepElligible+0x150>)
   1d5f2:	781b      	ldrb	r3, [r3, #0]
   1d5f4:	b2db      	uxtb	r3, r3
   1d5f6:	2201      	movs	r2, #1
   1d5f8:	4053      	eors	r3, r2
   1d5fa:	b2db      	uxtb	r3, r3
   1d5fc:	2b00      	cmp	r3, #0
   1d5fe:	d03d      	beq.n	1d67c <motor_checkSleepElligible+0x12c>
   1d600:	1dbb      	adds	r3, r7, #6
   1d602:	781b      	ldrb	r3, [r3, #0]
   1d604:	2b00      	cmp	r3, #0
   1d606:	d039      	beq.n	1d67c <motor_checkSleepElligible+0x12c>
   1d608:	4b26      	ldr	r3, [pc, #152]	; (1d6a4 <motor_checkSleepElligible+0x154>)
   1d60a:	781b      	ldrb	r3, [r3, #0]
   1d60c:	2201      	movs	r2, #1
   1d60e:	4053      	eors	r3, r2
   1d610:	b2db      	uxtb	r3, r3
   1d612:	2b00      	cmp	r3, #0
   1d614:	d032      	beq.n	1d67c <motor_checkSleepElligible+0x12c>
   1d616:	4b24      	ldr	r3, [pc, #144]	; (1d6a8 <motor_checkSleepElligible+0x158>)
   1d618:	781b      	ldrb	r3, [r3, #0]
   1d61a:	2201      	movs	r2, #1
   1d61c:	4053      	eors	r3, r2
   1d61e:	b2db      	uxtb	r3, r3
   1d620:	2b00      	cmp	r3, #0
   1d622:	d02b      	beq.n	1d67c <motor_checkSleepElligible+0x12c>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent && !buttonEventOccured && (lastButtonEvent==0));
   1d624:	4b21      	ldr	r3, [pc, #132]	; (1d6ac <motor_checkSleepElligible+0x15c>)
   1d626:	781b      	ldrb	r3, [r3, #0]
   1d628:	2201      	movs	r2, #1
   1d62a:	4053      	eors	r3, r2
   1d62c:	b2db      	uxtb	r3, r3
   1d62e:	2b00      	cmp	r3, #0
   1d630:	d024      	beq.n	1d67c <motor_checkSleepElligible+0x12c>
   1d632:	4b1f      	ldr	r3, [pc, #124]	; (1d6b0 <motor_checkSleepElligible+0x160>)
   1d634:	781b      	ldrb	r3, [r3, #0]
   1d636:	2201      	movs	r2, #1
   1d638:	4053      	eors	r3, r2
   1d63a:	b2db      	uxtb	r3, r3
   1d63c:	2b00      	cmp	r3, #0
   1d63e:	d01d      	beq.n	1d67c <motor_checkSleepElligible+0x12c>
   1d640:	4b1c      	ldr	r3, [pc, #112]	; (1d6b4 <motor_checkSleepElligible+0x164>)
   1d642:	781b      	ldrb	r3, [r3, #0]
   1d644:	2201      	movs	r2, #1
   1d646:	4053      	eors	r3, r2
   1d648:	b2db      	uxtb	r3, r3
   1d64a:	2b00      	cmp	r3, #0
   1d64c:	d016      	beq.n	1d67c <motor_checkSleepElligible+0x12c>
   1d64e:	4b1a      	ldr	r3, [pc, #104]	; (1d6b8 <motor_checkSleepElligible+0x168>)
   1d650:	781b      	ldrb	r3, [r3, #0]
   1d652:	b2db      	uxtb	r3, r3
   1d654:	2201      	movs	r2, #1
   1d656:	4053      	eors	r3, r2
   1d658:	b2db      	uxtb	r3, r3
   1d65a:	2b00      	cmp	r3, #0
   1d65c:	d00e      	beq.n	1d67c <motor_checkSleepElligible+0x12c>
   1d65e:	4b17      	ldr	r3, [pc, #92]	; (1d6bc <motor_checkSleepElligible+0x16c>)
   1d660:	781b      	ldrb	r3, [r3, #0]
   1d662:	b2db      	uxtb	r3, r3
   1d664:	2201      	movs	r2, #1
   1d666:	4053      	eors	r3, r2
   1d668:	b2db      	uxtb	r3, r3
   1d66a:	2b00      	cmp	r3, #0
   1d66c:	d006      	beq.n	1d67c <motor_checkSleepElligible+0x12c>
   1d66e:	4b14      	ldr	r3, [pc, #80]	; (1d6c0 <motor_checkSleepElligible+0x170>)
   1d670:	781b      	ldrb	r3, [r3, #0]
   1d672:	b2db      	uxtb	r3, r3
   1d674:	2b00      	cmp	r3, #0
   1d676:	d101      	bne.n	1d67c <motor_checkSleepElligible+0x12c>
   1d678:	2301      	movs	r3, #1
   1d67a:	e000      	b.n	1d67e <motor_checkSleepElligible+0x12e>
   1d67c:	2300      	movs	r3, #0
   1d67e:	1c1a      	adds	r2, r3, #0
   1d680:	2301      	movs	r3, #1
   1d682:	4013      	ands	r3, r2
   1d684:	b2db      	uxtb	r3, r3
	
}
   1d686:	0018      	movs	r0, r3
   1d688:	46bd      	mov	sp, r7
   1d68a:	b002      	add	sp, #8
   1d68c:	bd80      	pop	{r7, pc}
   1d68e:	46c0      	nop			; (mov r8, r8)
   1d690:	2000082c 	.word	0x2000082c
   1d694:	20000918 	.word	0x20000918
   1d698:	200009c4 	.word	0x200009c4
   1d69c:	0001baa5 	.word	0x0001baa5
   1d6a0:	2000092e 	.word	0x2000092e
   1d6a4:	20000a11 	.word	0x20000a11
   1d6a8:	20000991 	.word	0x20000991
   1d6ac:	2000099a 	.word	0x2000099a
   1d6b0:	20000999 	.word	0x20000999
   1d6b4:	20000988 	.word	0x20000988
   1d6b8:	20000976 	.word	0x20000976
   1d6bc:	2000099f 	.word	0x2000099f
   1d6c0:	20000980 	.word	0x20000980

0001d6c4 <configure_ac>:


void configure_ac(void)
{
   1d6c4:	b580      	push	{r7, lr}
   1d6c6:	b08a      	sub	sp, #40	; 0x28
   1d6c8:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
   1d6ca:	231c      	movs	r3, #28
   1d6cc:	18fb      	adds	r3, r7, r3
   1d6ce:	0018      	movs	r0, r3
   1d6d0:	2305      	movs	r3, #5
   1d6d2:	001a      	movs	r2, r3
   1d6d4:	2100      	movs	r1, #0
   1d6d6:	4b2c      	ldr	r3, [pc, #176]	; (1d788 <configure_ac+0xc4>)
   1d6d8:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	//struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
   1d6da:	2324      	movs	r3, #36	; 0x24
   1d6dc:	18fb      	adds	r3, r7, r3
   1d6de:	0018      	movs	r0, r3
   1d6e0:	4b2a      	ldr	r3, [pc, #168]	; (1d78c <configure_ac+0xc8>)
   1d6e2:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
   1d6e4:	2324      	movs	r3, #36	; 0x24
   1d6e6:	18fb      	adds	r3, r7, r3
   1d6e8:	2201      	movs	r2, #1
   1d6ea:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
   1d6ec:	2324      	movs	r3, #36	; 0x24
   1d6ee:	18fb      	adds	r3, r7, r3
   1d6f0:	2206      	movs	r2, #6
   1d6f2:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
   1d6f4:	2324      	movs	r3, #36	; 0x24
   1d6f6:	18fa      	adds	r2, r7, r3
   1d6f8:	4925      	ldr	r1, [pc, #148]	; (1d790 <configure_ac+0xcc>)
   1d6fa:	4b26      	ldr	r3, [pc, #152]	; (1d794 <configure_ac+0xd0>)
   1d6fc:	0018      	movs	r0, r3
   1d6fe:	4b26      	ldr	r3, [pc, #152]	; (1d798 <configure_ac+0xd4>)
   1d700:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
   1d702:	1d3b      	adds	r3, r7, #4
   1d704:	2200      	movs	r2, #0
   1d706:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
   1d708:	1d3b      	adds	r3, r7, #4
   1d70a:	2200      	movs	r2, #0
   1d70c:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
   1d70e:	1d3b      	adds	r3, r7, #4
   1d710:	2200      	movs	r2, #0
   1d712:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
   1d714:	1d3b      	adds	r3, r7, #4
   1d716:	2200      	movs	r2, #0
   1d718:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
   1d71a:	1d3b      	adds	r3, r7, #4
   1d71c:	2200      	movs	r2, #0
   1d71e:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
   1d720:	1d3b      	adds	r3, r7, #4
   1d722:	22a0      	movs	r2, #160	; 0xa0
   1d724:	00d2      	lsls	r2, r2, #3
   1d726:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
   1d728:	1d3b      	adds	r3, r7, #4
   1d72a:	222d      	movs	r2, #45	; 0x2d
   1d72c:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
   1d72e:	1d3b      	adds	r3, r7, #4
   1d730:	2200      	movs	r2, #0
   1d732:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
   1d734:	1d3a      	adds	r2, r7, #4
   1d736:	4b17      	ldr	r3, [pc, #92]	; (1d794 <configure_ac+0xd0>)
   1d738:	2100      	movs	r1, #0
   1d73a:	0018      	movs	r0, r3
   1d73c:	4b17      	ldr	r3, [pc, #92]	; (1d79c <configure_ac+0xd8>)
   1d73e:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
   1d740:	4b14      	ldr	r3, [pc, #80]	; (1d794 <configure_ac+0xd0>)
   1d742:	2100      	movs	r1, #0
   1d744:	0018      	movs	r0, r3
   1d746:	4b16      	ldr	r3, [pc, #88]	; (1d7a0 <configure_ac+0xdc>)
   1d748:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
   1d74a:	231c      	movs	r3, #28
   1d74c:	18fb      	adds	r3, r7, r3
   1d74e:	2201      	movs	r2, #1
   1d750:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
   1d752:	231c      	movs	r3, #28
   1d754:	18fa      	adds	r2, r7, r3
   1d756:	4b0f      	ldr	r3, [pc, #60]	; (1d794 <configure_ac+0xd0>)
   1d758:	0011      	movs	r1, r2
   1d75a:	0018      	movs	r0, r3
   1d75c:	4b11      	ldr	r3, [pc, #68]	; (1d7a4 <configure_ac+0xe0>)
   1d75e:	4798      	blx	r3
	
	ac_enable(&ac_instance);
   1d760:	4b0c      	ldr	r3, [pc, #48]	; (1d794 <configure_ac+0xd0>)
   1d762:	0018      	movs	r0, r3
   1d764:	4b10      	ldr	r3, [pc, #64]	; (1d7a8 <configure_ac+0xe4>)
   1d766:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
   1d768:	4910      	ldr	r1, [pc, #64]	; (1d7ac <configure_ac+0xe8>)
   1d76a:	4b0a      	ldr	r3, [pc, #40]	; (1d794 <configure_ac+0xd0>)
   1d76c:	2200      	movs	r2, #0
   1d76e:	0018      	movs	r0, r3
   1d770:	4b0f      	ldr	r3, [pc, #60]	; (1d7b0 <configure_ac+0xec>)
   1d772:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
   1d774:	4b07      	ldr	r3, [pc, #28]	; (1d794 <configure_ac+0xd0>)
   1d776:	2100      	movs	r1, #0
   1d778:	0018      	movs	r0, r3
   1d77a:	4b0e      	ldr	r3, [pc, #56]	; (1d7b4 <configure_ac+0xf0>)
   1d77c:	4798      	blx	r3
}
   1d77e:	46c0      	nop			; (mov r8, r8)
   1d780:	46bd      	mov	sp, r7
   1d782:	b00a      	add	sp, #40	; 0x28
   1d784:	bd80      	pop	{r7, pc}
   1d786:	46c0      	nop			; (mov r8, r8)
   1d788:	00029657 	.word	0x00029657
   1d78c:	000198ad 	.word	0x000198ad
   1d790:	42004400 	.word	0x42004400
   1d794:	20000a90 	.word	0x20000a90
   1d798:	0001dc29 	.word	0x0001dc29
   1d79c:	0001dd09 	.word	0x0001dd09
   1d7a0:	000199fd 	.word	0x000199fd
   1d7a4:	0001991d 	.word	0x0001991d
   1d7a8:	000198e5 	.word	0x000198e5
   1d7ac:	0001d7b9 	.word	0x0001d7b9
   1d7b0:	00023089 	.word	0x00023089
   1d7b4:	00019b65 	.word	0x00019b65

0001d7b8 <ac_detect_callback>:
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
	rtc_count_enable(&rtc_instance);
}

void ac_detect_callback(struct ac_module *const module_inst)
{
   1d7b8:	b580      	push	{r7, lr}
   1d7ba:	b082      	sub	sp, #8
   1d7bc:	af00      	add	r7, sp, #0
   1d7be:	6078      	str	r0, [r7, #4]
	asm("NOP");
   1d7c0:	46c0      	nop			; (mov r8, r8)
	;
	//eventOccured = true;
}
   1d7c2:	46c0      	nop			; (mov r8, r8)
   1d7c4:	46bd      	mov	sp, r7
   1d7c6:	b002      	add	sp, #8
   1d7c8:	bd80      	pop	{r7, pc}
	...

0001d7cc <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
   1d7cc:	b580      	push	{r7, lr}
   1d7ce:	af00      	add	r7, sp, #0
	eventOccured = true;
   1d7d0:	4b06      	ldr	r3, [pc, #24]	; (1d7ec <motor_feedback_callback+0x20>)
   1d7d2:	2201      	movs	r2, #1
   1d7d4:	701a      	strb	r2, [r3, #0]
	motorFeedbackEvent=true;
   1d7d6:	4b06      	ldr	r3, [pc, #24]	; (1d7f0 <motor_feedback_callback+0x24>)
   1d7d8:	2201      	movs	r2, #1
   1d7da:	701a      	strb	r2, [r3, #0]
	motorFeedbackEventTime=xTaskGetTickCountFromISR();
   1d7dc:	4b05      	ldr	r3, [pc, #20]	; (1d7f4 <motor_feedback_callback+0x28>)
   1d7de:	4798      	blx	r3
   1d7e0:	0002      	movs	r2, r0
   1d7e2:	4b05      	ldr	r3, [pc, #20]	; (1d7f8 <motor_feedback_callback+0x2c>)
   1d7e4:	601a      	str	r2, [r3, #0]
}
   1d7e6:	46c0      	nop			; (mov r8, r8)
   1d7e8:	46bd      	mov	sp, r7
   1d7ea:	bd80      	pop	{r7, pc}
   1d7ec:	2000092e 	.word	0x2000092e
   1d7f0:	2000098a 	.word	0x2000098a
   1d7f4:	00020ce9 	.word	0x00020ce9
   1d7f8:	20000a60 	.word	0x20000a60

0001d7fc <operateOnButtonEvent>:
	events_allocate(&resource, &conf_event);
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
}

void operateOnButtonEvent(void)
{
   1d7fc:	b580      	push	{r7, lr}
   1d7fe:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
   1d800:	4b28      	ldr	r3, [pc, #160]	; (1d8a4 <operateOnButtonEvent+0xa8>)
   1d802:	2200      	movs	r2, #0
   1d804:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
   1d806:	2026      	movs	r0, #38	; 0x26
   1d808:	4b27      	ldr	r3, [pc, #156]	; (1d8a8 <operateOnButtonEvent+0xac>)
   1d80a:	4798      	blx	r3
   1d80c:	0003      	movs	r3, r0
   1d80e:	001a      	movs	r2, r3
   1d810:	2301      	movs	r3, #1
   1d812:	4053      	eors	r3, r2
   1d814:	b2db      	uxtb	r3, r3
   1d816:	2b00      	cmp	r3, #0
   1d818:	d008      	beq.n	1d82c <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
   1d81a:	4b24      	ldr	r3, [pc, #144]	; (1d8ac <operateOnButtonEvent+0xb0>)
   1d81c:	4798      	blx	r3
   1d81e:	0002      	movs	r2, r0
   1d820:	4b23      	ldr	r3, [pc, #140]	; (1d8b0 <operateOnButtonEvent+0xb4>)
   1d822:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
   1d824:	4b23      	ldr	r3, [pc, #140]	; (1d8b4 <operateOnButtonEvent+0xb8>)
   1d826:	2201      	movs	r2, #1
   1d828:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
   1d82a:	e037      	b.n	1d89c <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
   1d82c:	2025      	movs	r0, #37	; 0x25
   1d82e:	4b1e      	ldr	r3, [pc, #120]	; (1d8a8 <operateOnButtonEvent+0xac>)
   1d830:	4798      	blx	r3
   1d832:	0003      	movs	r3, r0
   1d834:	001a      	movs	r2, r3
   1d836:	2301      	movs	r3, #1
   1d838:	4053      	eors	r3, r2
   1d83a:	b2db      	uxtb	r3, r3
   1d83c:	2b00      	cmp	r3, #0
   1d83e:	d008      	beq.n	1d852 <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
   1d840:	4b1a      	ldr	r3, [pc, #104]	; (1d8ac <operateOnButtonEvent+0xb0>)
   1d842:	4798      	blx	r3
   1d844:	0002      	movs	r2, r0
   1d846:	4b1a      	ldr	r3, [pc, #104]	; (1d8b0 <operateOnButtonEvent+0xb4>)
   1d848:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
   1d84a:	4b1a      	ldr	r3, [pc, #104]	; (1d8b4 <operateOnButtonEvent+0xb8>)
   1d84c:	2202      	movs	r2, #2
   1d84e:	701a      	strb	r2, [r3, #0]
}
   1d850:	e024      	b.n	1d89c <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
   1d852:	201c      	movs	r0, #28
   1d854:	4b14      	ldr	r3, [pc, #80]	; (1d8a8 <operateOnButtonEvent+0xac>)
   1d856:	4798      	blx	r3
   1d858:	0003      	movs	r3, r0
   1d85a:	001a      	movs	r2, r3
   1d85c:	2301      	movs	r3, #1
   1d85e:	4053      	eors	r3, r2
   1d860:	b2db      	uxtb	r3, r3
   1d862:	2b00      	cmp	r3, #0
   1d864:	d008      	beq.n	1d878 <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
   1d866:	4b11      	ldr	r3, [pc, #68]	; (1d8ac <operateOnButtonEvent+0xb0>)
   1d868:	4798      	blx	r3
   1d86a:	0002      	movs	r2, r0
   1d86c:	4b10      	ldr	r3, [pc, #64]	; (1d8b0 <operateOnButtonEvent+0xb4>)
   1d86e:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
   1d870:	4b10      	ldr	r3, [pc, #64]	; (1d8b4 <operateOnButtonEvent+0xb8>)
   1d872:	2203      	movs	r2, #3
   1d874:	701a      	strb	r2, [r3, #0]
}
   1d876:	e011      	b.n	1d89c <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
   1d878:	2029      	movs	r0, #41	; 0x29
   1d87a:	4b0b      	ldr	r3, [pc, #44]	; (1d8a8 <operateOnButtonEvent+0xac>)
   1d87c:	4798      	blx	r3
   1d87e:	0003      	movs	r3, r0
   1d880:	001a      	movs	r2, r3
   1d882:	2301      	movs	r3, #1
   1d884:	4053      	eors	r3, r2
   1d886:	b2db      	uxtb	r3, r3
   1d888:	2b00      	cmp	r3, #0
   1d88a:	d007      	beq.n	1d89c <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
   1d88c:	4b07      	ldr	r3, [pc, #28]	; (1d8ac <operateOnButtonEvent+0xb0>)
   1d88e:	4798      	blx	r3
   1d890:	0002      	movs	r2, r0
   1d892:	4b07      	ldr	r3, [pc, #28]	; (1d8b0 <operateOnButtonEvent+0xb4>)
   1d894:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
   1d896:	4b07      	ldr	r3, [pc, #28]	; (1d8b4 <operateOnButtonEvent+0xb8>)
   1d898:	2204      	movs	r2, #4
   1d89a:	701a      	strb	r2, [r3, #0]
}
   1d89c:	46c0      	nop			; (mov r8, r8)
   1d89e:	46bd      	mov	sp, r7
   1d8a0:	bd80      	pop	{r7, pc}
   1d8a2:	46c0      	nop			; (mov r8, r8)
   1d8a4:	2000099f 	.word	0x2000099f
   1d8a8:	00019f4d 	.word	0x00019f4d
   1d8ac:	00020ccd 	.word	0x00020ccd
   1d8b0:	20000968 	.word	0x20000968
   1d8b4:	20000980 	.word	0x20000980

0001d8b8 <buttonFilter>:

void buttonFilter(void)
{
   1d8b8:	b580      	push	{r7, lr}
   1d8ba:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
   1d8bc:	4b48      	ldr	r3, [pc, #288]	; (1d9e0 <buttonFilter+0x128>)
   1d8be:	781b      	ldrb	r3, [r3, #0]
   1d8c0:	b2db      	uxtb	r3, r3
   1d8c2:	2b00      	cmp	r3, #0
   1d8c4:	d100      	bne.n	1d8c8 <buttonFilter+0x10>
   1d8c6:	e088      	b.n	1d9da <buttonFilter+0x122>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
   1d8c8:	4b45      	ldr	r3, [pc, #276]	; (1d9e0 <buttonFilter+0x128>)
   1d8ca:	781b      	ldrb	r3, [r3, #0]
   1d8cc:	b2db      	uxtb	r3, r3
   1d8ce:	2b01      	cmp	r3, #1
   1d8d0:	d111      	bne.n	1d8f6 <buttonFilter+0x3e>
   1d8d2:	2026      	movs	r0, #38	; 0x26
   1d8d4:	4b43      	ldr	r3, [pc, #268]	; (1d9e4 <buttonFilter+0x12c>)
   1d8d6:	4798      	blx	r3
   1d8d8:	0003      	movs	r3, r0
   1d8da:	001a      	movs	r2, r3
   1d8dc:	2301      	movs	r3, #1
   1d8de:	4053      	eors	r3, r2
   1d8e0:	b2db      	uxtb	r3, r3
   1d8e2:	2b00      	cmp	r3, #0
   1d8e4:	d007      	beq.n	1d8f6 <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
   1d8e6:	4b3e      	ldr	r3, [pc, #248]	; (1d9e0 <buttonFilter+0x128>)
   1d8e8:	2200      	movs	r2, #0
   1d8ea:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
   1d8ec:	2100      	movs	r1, #0
   1d8ee:	2000      	movs	r0, #0
   1d8f0:	4b3d      	ldr	r3, [pc, #244]	; (1d9e8 <buttonFilter+0x130>)
   1d8f2:	4798      	blx	r3
   1d8f4:	e071      	b.n	1d9da <buttonFilter+0x122>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
   1d8f6:	4b3a      	ldr	r3, [pc, #232]	; (1d9e0 <buttonFilter+0x128>)
   1d8f8:	781b      	ldrb	r3, [r3, #0]
   1d8fa:	b2db      	uxtb	r3, r3
   1d8fc:	2b02      	cmp	r3, #2
   1d8fe:	d112      	bne.n	1d926 <buttonFilter+0x6e>
   1d900:	2025      	movs	r0, #37	; 0x25
   1d902:	4b38      	ldr	r3, [pc, #224]	; (1d9e4 <buttonFilter+0x12c>)
   1d904:	4798      	blx	r3
   1d906:	0003      	movs	r3, r0
   1d908:	001a      	movs	r2, r3
   1d90a:	2301      	movs	r3, #1
   1d90c:	4053      	eors	r3, r2
   1d90e:	b2db      	uxtb	r3, r3
   1d910:	2b00      	cmp	r3, #0
   1d912:	d008      	beq.n	1d926 <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
   1d914:	4b32      	ldr	r3, [pc, #200]	; (1d9e0 <buttonFilter+0x128>)
   1d916:	2200      	movs	r2, #0
   1d918:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
   1d91a:	2201      	movs	r2, #1
   1d91c:	2100      	movs	r1, #0
   1d91e:	2000      	movs	r0, #0
   1d920:	4b32      	ldr	r3, [pc, #200]	; (1d9ec <buttonFilter+0x134>)
   1d922:	4798      	blx	r3
   1d924:	e059      	b.n	1d9da <buttonFilter+0x122>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
   1d926:	4b2e      	ldr	r3, [pc, #184]	; (1d9e0 <buttonFilter+0x128>)
   1d928:	781b      	ldrb	r3, [r3, #0]
   1d92a:	b2db      	uxtb	r3, r3
   1d92c:	2b03      	cmp	r3, #3
   1d92e:	d12d      	bne.n	1d98c <buttonFilter+0xd4>
   1d930:	201c      	movs	r0, #28
   1d932:	4b2c      	ldr	r3, [pc, #176]	; (1d9e4 <buttonFilter+0x12c>)
   1d934:	4798      	blx	r3
   1d936:	0003      	movs	r3, r0
   1d938:	001a      	movs	r2, r3
   1d93a:	2301      	movs	r3, #1
   1d93c:	4053      	eors	r3, r2
   1d93e:	b2db      	uxtb	r3, r3
   1d940:	2b00      	cmp	r3, #0
   1d942:	d023      	beq.n	1d98c <buttonFilter+0xd4>
		{
			lastButtonEvent=0;
   1d944:	4b26      	ldr	r3, [pc, #152]	; (1d9e0 <buttonFilter+0x128>)
   1d946:	2200      	movs	r2, #0
   1d948:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
   1d94a:	4b29      	ldr	r3, [pc, #164]	; (1d9f0 <buttonFilter+0x138>)
   1d94c:	785b      	ldrb	r3, [r3, #1]
   1d94e:	b2db      	uxtb	r3, r3
   1d950:	425a      	negs	r2, r3
   1d952:	4153      	adcs	r3, r2
   1d954:	b2db      	uxtb	r3, r3
   1d956:	0018      	movs	r0, r3
   1d958:	4b26      	ldr	r3, [pc, #152]	; (1d9f4 <buttonFilter+0x13c>)
   1d95a:	4798      	blx	r3
			resetAutoStart(true);
   1d95c:	2001      	movs	r0, #1
   1d95e:	4b26      	ldr	r3, [pc, #152]	; (1d9f8 <buttonFilter+0x140>)
   1d960:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
   1d962:	4b23      	ldr	r3, [pc, #140]	; (1d9f0 <buttonFilter+0x138>)
   1d964:	785b      	ldrb	r3, [r3, #1]
   1d966:	b2db      	uxtb	r3, r3
   1d968:	2b00      	cmp	r3, #0
   1d96a:	d007      	beq.n	1d97c <buttonFilter+0xc4>
			{
				simEventTemp[10] = registerEvent(')');
   1d96c:	2029      	movs	r0, #41	; 0x29
   1d96e:	4b23      	ldr	r3, [pc, #140]	; (1d9fc <buttonFilter+0x144>)
   1d970:	4798      	blx	r3
   1d972:	0003      	movs	r3, r0
   1d974:	001a      	movs	r2, r3
   1d976:	4b22      	ldr	r3, [pc, #136]	; (1da00 <buttonFilter+0x148>)
   1d978:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
   1d97a:	e02e      	b.n	1d9da <buttonFilter+0x122>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
   1d97c:	205b      	movs	r0, #91	; 0x5b
   1d97e:	4b1f      	ldr	r3, [pc, #124]	; (1d9fc <buttonFilter+0x144>)
   1d980:	4798      	blx	r3
   1d982:	0003      	movs	r3, r0
   1d984:	001a      	movs	r2, r3
   1d986:	4b1e      	ldr	r3, [pc, #120]	; (1da00 <buttonFilter+0x148>)
   1d988:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
   1d98a:	e026      	b.n	1d9da <buttonFilter+0x122>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
   1d98c:	4b14      	ldr	r3, [pc, #80]	; (1d9e0 <buttonFilter+0x128>)
   1d98e:	781b      	ldrb	r3, [r3, #0]
   1d990:	b2db      	uxtb	r3, r3
   1d992:	2b04      	cmp	r3, #4
   1d994:	d11d      	bne.n	1d9d2 <buttonFilter+0x11a>
   1d996:	2029      	movs	r0, #41	; 0x29
   1d998:	4b12      	ldr	r3, [pc, #72]	; (1d9e4 <buttonFilter+0x12c>)
   1d99a:	4798      	blx	r3
   1d99c:	0003      	movs	r3, r0
   1d99e:	001a      	movs	r2, r3
   1d9a0:	2301      	movs	r3, #1
   1d9a2:	4053      	eors	r3, r2
   1d9a4:	b2db      	uxtb	r3, r3
   1d9a6:	2b00      	cmp	r3, #0
   1d9a8:	d013      	beq.n	1d9d2 <buttonFilter+0x11a>
		{
			lastButtonEvent=0;
   1d9aa:	4b0d      	ldr	r3, [pc, #52]	; (1d9e0 <buttonFilter+0x128>)
   1d9ac:	2200      	movs	r2, #0
   1d9ae:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
   1d9b0:	4b14      	ldr	r3, [pc, #80]	; (1da04 <buttonFilter+0x14c>)
   1d9b2:	781b      	ldrb	r3, [r3, #0]
   1d9b4:	b2db      	uxtb	r3, r3
   1d9b6:	1e5a      	subs	r2, r3, #1
   1d9b8:	4193      	sbcs	r3, r2
   1d9ba:	b2db      	uxtb	r3, r3
   1d9bc:	2201      	movs	r2, #1
   1d9be:	4053      	eors	r3, r2
   1d9c0:	b2db      	uxtb	r3, r3
   1d9c2:	1c1a      	adds	r2, r3, #0
   1d9c4:	2301      	movs	r3, #1
   1d9c6:	4013      	ands	r3, r2
   1d9c8:	b2db      	uxtb	r3, r3
   1d9ca:	0018      	movs	r0, r3
   1d9cc:	4b0e      	ldr	r3, [pc, #56]	; (1da08 <buttonFilter+0x150>)
   1d9ce:	4798      	blx	r3
   1d9d0:	e003      	b.n	1d9da <buttonFilter+0x122>
		}
		else
		{
			lastButtonEvent=0;
   1d9d2:	4b03      	ldr	r3, [pc, #12]	; (1d9e0 <buttonFilter+0x128>)
   1d9d4:	2200      	movs	r2, #0
   1d9d6:	701a      	strb	r2, [r3, #0]
		}
	}
}
   1d9d8:	e7ff      	b.n	1d9da <buttonFilter+0x122>
   1d9da:	46c0      	nop			; (mov r8, r8)
   1d9dc:	46bd      	mov	sp, r7
   1d9de:	bd80      	pop	{r7, pc}
   1d9e0:	20000980 	.word	0x20000980
   1d9e4:	00019f4d 	.word	0x00019f4d
   1d9e8:	0001c229 	.word	0x0001c229
   1d9ec:	0001c411 	.word	0x0001c411
   1d9f0:	20000854 	.word	0x20000854
   1d9f4:	000112a9 	.word	0x000112a9
   1d9f8:	0001be15 	.word	0x0001be15
   1d9fc:	00014b69 	.word	0x00014b69
   1da00:	20000918 	.word	0x20000918
   1da04:	200009b0 	.word	0x200009b0
   1da08:	0001da0d 	.word	0x0001da0d

0001da0c <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
   1da0c:	b580      	push	{r7, lr}
   1da0e:	b082      	sub	sp, #8
   1da10:	af00      	add	r7, sp, #0
   1da12:	0002      	movs	r2, r0
   1da14:	1dfb      	adds	r3, r7, #7
   1da16:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
   1da18:	4b03      	ldr	r3, [pc, #12]	; (1da28 <setDisplayPause+0x1c>)
   1da1a:	1dfa      	adds	r2, r7, #7
   1da1c:	7812      	ldrb	r2, [r2, #0]
   1da1e:	701a      	strb	r2, [r3, #0]
}
   1da20:	46c0      	nop			; (mov r8, r8)
   1da22:	46bd      	mov	sp, r7
   1da24:	b002      	add	sp, #8
   1da26:	bd80      	pop	{r7, pc}
   1da28:	200009b0 	.word	0x200009b0

0001da2c <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
   1da2c:	b580      	push	{r7, lr}
   1da2e:	b082      	sub	sp, #8
   1da30:	af00      	add	r7, sp, #0
   1da32:	6039      	str	r1, [r7, #0]
   1da34:	0011      	movs	r1, r2
   1da36:	1dfb      	adds	r3, r7, #7
   1da38:	1c02      	adds	r2, r0, #0
   1da3a:	701a      	strb	r2, [r3, #0]
   1da3c:	1dbb      	adds	r3, r7, #6
   1da3e:	1c0a      	adds	r2, r1, #0
   1da40:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
   1da42:	4b10      	ldr	r3, [pc, #64]	; (1da84 <setCallStateOnLCD+0x58>)
   1da44:	1dfa      	adds	r2, r7, #7
   1da46:	7812      	ldrb	r2, [r2, #0]
   1da48:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
   1da4a:	1dbb      	adds	r3, r7, #6
   1da4c:	781b      	ldrb	r3, [r3, #0]
   1da4e:	2201      	movs	r2, #1
   1da50:	4053      	eors	r3, r2
   1da52:	b2db      	uxtb	r3, r3
   1da54:	2b00      	cmp	r3, #0
   1da56:	d010      	beq.n	1da7a <setCallStateOnLCD+0x4e>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
   1da58:	4b0b      	ldr	r3, [pc, #44]	; (1da88 <setCallStateOnLCD+0x5c>)
   1da5a:	2214      	movs	r2, #20
   1da5c:	2100      	movs	r1, #0
   1da5e:	0018      	movs	r0, r3
   1da60:	4b0a      	ldr	r3, [pc, #40]	; (1da8c <setCallStateOnLCD+0x60>)
   1da62:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
   1da64:	4b07      	ldr	r3, [pc, #28]	; (1da84 <setCallStateOnLCD+0x58>)
   1da66:	781b      	ldrb	r3, [r3, #0]
   1da68:	b2db      	uxtb	r3, r3
   1da6a:	2b00      	cmp	r3, #0
   1da6c:	d005      	beq.n	1da7a <setCallStateOnLCD+0x4e>
		{
			strcpy(numberOnLCD,number);
   1da6e:	683a      	ldr	r2, [r7, #0]
   1da70:	4b05      	ldr	r3, [pc, #20]	; (1da88 <setCallStateOnLCD+0x5c>)
   1da72:	0011      	movs	r1, r2
   1da74:	0018      	movs	r0, r3
   1da76:	4b06      	ldr	r3, [pc, #24]	; (1da90 <setCallStateOnLCD+0x64>)
   1da78:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
   1da7a:	46c0      	nop			; (mov r8, r8)
   1da7c:	46bd      	mov	sp, r7
   1da7e:	b002      	add	sp, #8
   1da80:	bd80      	pop	{r7, pc}
   1da82:	46c0      	nop			; (mov r8, r8)
   1da84:	200009d6 	.word	0x200009d6
   1da88:	20000a48 	.word	0x20000a48
   1da8c:	00029657 	.word	0x00029657
   1da90:	000298d7 	.word	0x000298d7

0001da94 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
   1da94:	b590      	push	{r4, r7, lr}
   1da96:	b085      	sub	sp, #20
   1da98:	af00      	add	r7, sp, #0
   1da9a:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
   1da9c:	4b17      	ldr	r3, [pc, #92]	; (1dafc <vTask_50ms_Timer+0x68>)
   1da9e:	4798      	blx	r3
   1daa0:	0003      	movs	r3, r0
   1daa2:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1daa4:	230c      	movs	r3, #12
   1daa6:	18fb      	adds	r3, r7, r3
   1daa8:	2119      	movs	r1, #25
   1daaa:	0018      	movs	r0, r3
   1daac:	4b14      	ldr	r3, [pc, #80]	; (1db00 <vTask_50ms_Timer+0x6c>)
   1daae:	4798      	blx	r3
		if(buttonEventOccured)
   1dab0:	4b14      	ldr	r3, [pc, #80]	; (1db04 <vTask_50ms_Timer+0x70>)
   1dab2:	781b      	ldrb	r3, [r3, #0]
   1dab4:	b2db      	uxtb	r3, r3
   1dab6:	2b00      	cmp	r3, #0
   1dab8:	d001      	beq.n	1dabe <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
   1daba:	4b13      	ldr	r3, [pc, #76]	; (1db08 <vTask_50ms_Timer+0x74>)
   1dabc:	4798      	blx	r3
		}

		xSemaphoreTake(xButton_Semaphore,portMAX_DELAY);
   1dabe:	4b13      	ldr	r3, [pc, #76]	; (1db0c <vTask_50ms_Timer+0x78>)
   1dac0:	681a      	ldr	r2, [r3, #0]
   1dac2:	2301      	movs	r3, #1
   1dac4:	425b      	negs	r3, r3
   1dac6:	0019      	movs	r1, r3
   1dac8:	0010      	movs	r0, r2
   1daca:	4b11      	ldr	r3, [pc, #68]	; (1db10 <vTask_50ms_Timer+0x7c>)
   1dacc:	4798      	blx	r3
		if(lastButtonEvent>0)
   1dace:	4b11      	ldr	r3, [pc, #68]	; (1db14 <vTask_50ms_Timer+0x80>)
   1dad0:	781b      	ldrb	r3, [r3, #0]
   1dad2:	b2db      	uxtb	r3, r3
   1dad4:	2b00      	cmp	r3, #0
   1dad6:	d008      	beq.n	1daea <vTask_50ms_Timer+0x56>
		{
			taskPSet=true;
   1dad8:	4b0f      	ldr	r3, [pc, #60]	; (1db18 <vTask_50ms_Timer+0x84>)
   1dada:	2201      	movs	r2, #1
   1dadc:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
   1dade:	4b0f      	ldr	r3, [pc, #60]	; (1db1c <vTask_50ms_Timer+0x88>)
   1dae0:	681b      	ldr	r3, [r3, #0]
   1dae2:	2102      	movs	r1, #2
   1dae4:	0018      	movs	r0, r3
   1dae6:	4b0e      	ldr	r3, [pc, #56]	; (1db20 <vTask_50ms_Timer+0x8c>)
   1dae8:	4798      	blx	r3
		}
		xSemaphoreGive(xButton_Semaphore);
   1daea:	4b08      	ldr	r3, [pc, #32]	; (1db0c <vTask_50ms_Timer+0x78>)
   1daec:	6818      	ldr	r0, [r3, #0]
   1daee:	2300      	movs	r3, #0
   1daf0:	2200      	movs	r2, #0
   1daf2:	2100      	movs	r1, #0
   1daf4:	4c0b      	ldr	r4, [pc, #44]	; (1db24 <vTask_50ms_Timer+0x90>)
   1daf6:	47a0      	blx	r4
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
   1daf8:	e7d4      	b.n	1daa4 <vTask_50ms_Timer+0x10>
   1dafa:	46c0      	nop			; (mov r8, r8)
   1dafc:	00020ccd 	.word	0x00020ccd
   1db00:	000208a1 	.word	0x000208a1
   1db04:	2000099f 	.word	0x2000099f
   1db08:	0001d7fd 	.word	0x0001d7fd
   1db0c:	20000434 	.word	0x20000434
   1db10:	00020061 	.word	0x00020061
   1db14:	20000980 	.word	0x20000980
   1db18:	20000a84 	.word	0x20000a84
   1db1c:	20000438 	.word	0x20000438
   1db20:	000209c5 	.word	0x000209c5
   1db24:	0001fbc1 	.word	0x0001fbc1

0001db28 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1db28:	b580      	push	{r7, lr}
   1db2a:	b082      	sub	sp, #8
   1db2c:	af00      	add	r7, sp, #0
   1db2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1db30:	687b      	ldr	r3, [r7, #4]
   1db32:	2200      	movs	r2, #0
   1db34:	701a      	strb	r2, [r3, #0]
}
   1db36:	46c0      	nop			; (mov r8, r8)
   1db38:	46bd      	mov	sp, r7
   1db3a:	b002      	add	sp, #8
   1db3c:	bd80      	pop	{r7, pc}
	...

0001db40 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1db40:	b580      	push	{r7, lr}
   1db42:	b082      	sub	sp, #8
   1db44:	af00      	add	r7, sp, #0
   1db46:	0002      	movs	r2, r0
   1db48:	6039      	str	r1, [r7, #0]
   1db4a:	1dfb      	adds	r3, r7, #7
   1db4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1db4e:	1dfb      	adds	r3, r7, #7
   1db50:	781b      	ldrb	r3, [r3, #0]
   1db52:	2b01      	cmp	r3, #1
   1db54:	d00a      	beq.n	1db6c <system_apb_clock_set_mask+0x2c>
   1db56:	2b02      	cmp	r3, #2
   1db58:	d00f      	beq.n	1db7a <system_apb_clock_set_mask+0x3a>
   1db5a:	2b00      	cmp	r3, #0
   1db5c:	d114      	bne.n	1db88 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1db5e:	4b0e      	ldr	r3, [pc, #56]	; (1db98 <system_apb_clock_set_mask+0x58>)
   1db60:	4a0d      	ldr	r2, [pc, #52]	; (1db98 <system_apb_clock_set_mask+0x58>)
   1db62:	6991      	ldr	r1, [r2, #24]
   1db64:	683a      	ldr	r2, [r7, #0]
   1db66:	430a      	orrs	r2, r1
   1db68:	619a      	str	r2, [r3, #24]
			break;
   1db6a:	e00f      	b.n	1db8c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1db6c:	4b0a      	ldr	r3, [pc, #40]	; (1db98 <system_apb_clock_set_mask+0x58>)
   1db6e:	4a0a      	ldr	r2, [pc, #40]	; (1db98 <system_apb_clock_set_mask+0x58>)
   1db70:	69d1      	ldr	r1, [r2, #28]
   1db72:	683a      	ldr	r2, [r7, #0]
   1db74:	430a      	orrs	r2, r1
   1db76:	61da      	str	r2, [r3, #28]
			break;
   1db78:	e008      	b.n	1db8c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   1db7a:	4b07      	ldr	r3, [pc, #28]	; (1db98 <system_apb_clock_set_mask+0x58>)
   1db7c:	4a06      	ldr	r2, [pc, #24]	; (1db98 <system_apb_clock_set_mask+0x58>)
   1db7e:	6a11      	ldr	r1, [r2, #32]
   1db80:	683a      	ldr	r2, [r7, #0]
   1db82:	430a      	orrs	r2, r1
   1db84:	621a      	str	r2, [r3, #32]
			break;
   1db86:	e001      	b.n	1db8c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   1db88:	2317      	movs	r3, #23
   1db8a:	e000      	b.n	1db8e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   1db8c:	2300      	movs	r3, #0
}
   1db8e:	0018      	movs	r0, r3
   1db90:	46bd      	mov	sp, r7
   1db92:	b002      	add	sp, #8
   1db94:	bd80      	pop	{r7, pc}
   1db96:	46c0      	nop			; (mov r8, r8)
   1db98:	40000400 	.word	0x40000400

0001db9c <ac_is_syncing>:
{
   1db9c:	b580      	push	{r7, lr}
   1db9e:	b084      	sub	sp, #16
   1dba0:	af00      	add	r7, sp, #0
   1dba2:	6078      	str	r0, [r7, #4]
	Ac *const ac_module = module_inst->hw;
   1dba4:	687b      	ldr	r3, [r7, #4]
   1dba6:	681b      	ldr	r3, [r3, #0]
   1dba8:	60fb      	str	r3, [r7, #12]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
   1dbaa:	68fb      	ldr	r3, [r7, #12]
   1dbac:	7a5b      	ldrb	r3, [r3, #9]
   1dbae:	b2db      	uxtb	r3, r3
   1dbb0:	b25b      	sxtb	r3, r3
   1dbb2:	2b00      	cmp	r3, #0
   1dbb4:	da01      	bge.n	1dbba <ac_is_syncing+0x1e>
		return true;
   1dbb6:	2301      	movs	r3, #1
   1dbb8:	e000      	b.n	1dbbc <ac_is_syncing+0x20>
	return false;
   1dbba:	2300      	movs	r3, #0
}
   1dbbc:	0018      	movs	r0, r3
   1dbbe:	46bd      	mov	sp, r7
   1dbc0:	b004      	add	sp, #16
   1dbc2:	bd80      	pop	{r7, pc}

0001dbc4 <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
   1dbc4:	b580      	push	{r7, lr}
   1dbc6:	b086      	sub	sp, #24
   1dbc8:	af00      	add	r7, sp, #0
   1dbca:	6078      	str	r0, [r7, #4]
   1dbcc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1dbce:	687b      	ldr	r3, [r7, #4]
   1dbd0:	681b      	ldr	r3, [r3, #0]
   1dbd2:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
   1dbd4:	2300      	movs	r3, #0
   1dbd6:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1dbd8:	2300      	movs	r3, #0
   1dbda:	613b      	str	r3, [r7, #16]
   1dbdc:	e00f      	b.n	1dbfe <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
   1dbde:	683a      	ldr	r2, [r7, #0]
   1dbe0:	693b      	ldr	r3, [r7, #16]
   1dbe2:	18d3      	adds	r3, r2, r3
   1dbe4:	781b      	ldrb	r3, [r3, #0]
   1dbe6:	2b00      	cmp	r3, #0
   1dbe8:	d006      	beq.n	1dbf8 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
   1dbea:	2204      	movs	r2, #4
   1dbec:	693b      	ldr	r3, [r7, #16]
   1dbee:	409a      	lsls	r2, r3
   1dbf0:	0013      	movs	r3, r2
   1dbf2:	697a      	ldr	r2, [r7, #20]
   1dbf4:	4313      	orrs	r3, r2
   1dbf6:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
   1dbf8:	693b      	ldr	r3, [r7, #16]
   1dbfa:	3301      	adds	r3, #1
   1dbfc:	613b      	str	r3, [r7, #16]
   1dbfe:	693b      	ldr	r3, [r7, #16]
   1dc00:	2b00      	cmp	r3, #0
   1dc02:	d0ec      	beq.n	1dbde <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
   1dc04:	46c0      	nop			; (mov r8, r8)
   1dc06:	687b      	ldr	r3, [r7, #4]
   1dc08:	0018      	movs	r0, r3
   1dc0a:	4b06      	ldr	r3, [pc, #24]	; (1dc24 <_ac_set_config+0x60>)
   1dc0c:	4798      	blx	r3
   1dc0e:	1e03      	subs	r3, r0, #0
   1dc10:	d1f9      	bne.n	1dc06 <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
   1dc12:	697b      	ldr	r3, [r7, #20]
   1dc14:	b2da      	uxtb	r2, r3
   1dc16:	68fb      	ldr	r3, [r7, #12]
   1dc18:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1dc1a:	2300      	movs	r3, #0
}
   1dc1c:	0018      	movs	r0, r3
   1dc1e:	46bd      	mov	sp, r7
   1dc20:	b006      	add	sp, #24
   1dc22:	bd80      	pop	{r7, pc}
   1dc24:	0001db9d 	.word	0x0001db9d

0001dc28 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
   1dc28:	b580      	push	{r7, lr}
   1dc2a:	b086      	sub	sp, #24
   1dc2c:	af00      	add	r7, sp, #0
   1dc2e:	60f8      	str	r0, [r7, #12]
   1dc30:	60b9      	str	r1, [r7, #8]
   1dc32:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
   1dc34:	68fb      	ldr	r3, [r7, #12]
   1dc36:	68ba      	ldr	r2, [r7, #8]
   1dc38:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1dc3a:	2314      	movs	r3, #20
   1dc3c:	18fb      	adds	r3, r7, r3
   1dc3e:	0018      	movs	r0, r3
   1dc40:	4b2a      	ldr	r3, [pc, #168]	; (1dcec <ac_init+0xc4>)
   1dc42:	4798      	blx	r3

	if (hw == AC) {
   1dc44:	68bb      	ldr	r3, [r7, #8]
   1dc46:	4a2a      	ldr	r2, [pc, #168]	; (1dcf0 <ac_init+0xc8>)
   1dc48:	4293      	cmp	r3, r2
   1dc4a:	d121      	bne.n	1dc90 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
   1dc4c:	2380      	movs	r3, #128	; 0x80
   1dc4e:	029b      	lsls	r3, r3, #10
   1dc50:	0019      	movs	r1, r3
   1dc52:	2002      	movs	r0, #2
   1dc54:	4b27      	ldr	r3, [pc, #156]	; (1dcf4 <ac_init+0xcc>)
   1dc56:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
   1dc58:	687b      	ldr	r3, [r7, #4]
   1dc5a:	785a      	ldrb	r2, [r3, #1]
   1dc5c:	2314      	movs	r3, #20
   1dc5e:	18fb      	adds	r3, r7, r3
   1dc60:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
   1dc62:	2314      	movs	r3, #20
   1dc64:	18fb      	adds	r3, r7, r3
   1dc66:	0019      	movs	r1, r3
   1dc68:	201f      	movs	r0, #31
   1dc6a:	4b23      	ldr	r3, [pc, #140]	; (1dcf8 <ac_init+0xd0>)
   1dc6c:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
   1dc6e:	201f      	movs	r0, #31
   1dc70:	4b22      	ldr	r3, [pc, #136]	; (1dcfc <ac_init+0xd4>)
   1dc72:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
   1dc74:	687b      	ldr	r3, [r7, #4]
   1dc76:	789a      	ldrb	r2, [r3, #2]
   1dc78:	2314      	movs	r3, #20
   1dc7a:	18fb      	adds	r3, r7, r3
   1dc7c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
   1dc7e:	2314      	movs	r3, #20
   1dc80:	18fb      	adds	r3, r7, r3
   1dc82:	0019      	movs	r1, r3
   1dc84:	2020      	movs	r0, #32
   1dc86:	4b1c      	ldr	r3, [pc, #112]	; (1dcf8 <ac_init+0xd0>)
   1dc88:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
   1dc8a:	2020      	movs	r0, #32
   1dc8c:	4b1b      	ldr	r3, [pc, #108]	; (1dcfc <ac_init+0xd4>)
   1dc8e:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1dc90:	2317      	movs	r3, #23
   1dc92:	18fb      	adds	r3, r7, r3
   1dc94:	2200      	movs	r2, #0
   1dc96:	701a      	strb	r2, [r3, #0]
   1dc98:	e00f      	b.n	1dcba <ac_init+0x92>
		module_inst->callback[i]        = NULL;
   1dc9a:	2317      	movs	r3, #23
   1dc9c:	18fb      	adds	r3, r7, r3
   1dc9e:	781b      	ldrb	r3, [r3, #0]
   1dca0:	68fa      	ldr	r2, [r7, #12]
   1dca2:	009b      	lsls	r3, r3, #2
   1dca4:	18d3      	adds	r3, r2, r3
   1dca6:	3304      	adds	r3, #4
   1dca8:	2200      	movs	r2, #0
   1dcaa:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
   1dcac:	2317      	movs	r3, #23
   1dcae:	18fb      	adds	r3, r7, r3
   1dcb0:	781a      	ldrb	r2, [r3, #0]
   1dcb2:	2317      	movs	r3, #23
   1dcb4:	18fb      	adds	r3, r7, r3
   1dcb6:	3201      	adds	r2, #1
   1dcb8:	701a      	strb	r2, [r3, #0]
   1dcba:	2317      	movs	r3, #23
   1dcbc:	18fb      	adds	r3, r7, r3
   1dcbe:	781b      	ldrb	r3, [r3, #0]
   1dcc0:	2b04      	cmp	r3, #4
   1dcc2:	d9ea      	bls.n	1dc9a <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
   1dcc4:	68fb      	ldr	r3, [r7, #12]
   1dcc6:	2200      	movs	r2, #0
   1dcc8:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
   1dcca:	68fb      	ldr	r3, [r7, #12]
   1dccc:	2200      	movs	r2, #0
   1dcce:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
   1dcd0:	4b0b      	ldr	r3, [pc, #44]	; (1dd00 <ac_init+0xd8>)
   1dcd2:	68fa      	ldr	r2, [r7, #12]
   1dcd4:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
   1dcd6:	687a      	ldr	r2, [r7, #4]
   1dcd8:	68fb      	ldr	r3, [r7, #12]
   1dcda:	0011      	movs	r1, r2
   1dcdc:	0018      	movs	r0, r3
   1dcde:	4b09      	ldr	r3, [pc, #36]	; (1dd04 <ac_init+0xdc>)
   1dce0:	4798      	blx	r3
   1dce2:	0003      	movs	r3, r0
}
   1dce4:	0018      	movs	r0, r3
   1dce6:	46bd      	mov	sp, r7
   1dce8:	b006      	add	sp, #24
   1dcea:	bd80      	pop	{r7, pc}
   1dcec:	0001db29 	.word	0x0001db29
   1dcf0:	42004400 	.word	0x42004400
   1dcf4:	0001db41 	.word	0x0001db41
   1dcf8:	00025215 	.word	0x00025215
   1dcfc:	00025259 	.word	0x00025259
   1dd00:	20000b94 	.word	0x20000b94
   1dd04:	0001dbc5 	.word	0x0001dbc5

0001dd08 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
   1dd08:	b580      	push	{r7, lr}
   1dd0a:	b086      	sub	sp, #24
   1dd0c:	af00      	add	r7, sp, #0
   1dd0e:	60f8      	str	r0, [r7, #12]
   1dd10:	607a      	str	r2, [r7, #4]
   1dd12:	230b      	movs	r3, #11
   1dd14:	18fb      	adds	r3, r7, r3
   1dd16:	1c0a      	adds	r2, r1, #0
   1dd18:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
   1dd1a:	68fb      	ldr	r3, [r7, #12]
   1dd1c:	681b      	ldr	r3, [r3, #0]
   1dd1e:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
   1dd20:	2300      	movs	r3, #0
   1dd22:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
   1dd24:	687b      	ldr	r3, [r7, #4]
   1dd26:	685b      	ldr	r3, [r3, #4]
   1dd28:	697a      	ldr	r2, [r7, #20]
   1dd2a:	4313      	orrs	r3, r2
   1dd2c:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
   1dd2e:	687b      	ldr	r3, [r7, #4]
   1dd30:	7a1b      	ldrb	r3, [r3, #8]
   1dd32:	2b00      	cmp	r3, #0
   1dd34:	d004      	beq.n	1dd40 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
   1dd36:	697b      	ldr	r3, [r7, #20]
   1dd38:	2280      	movs	r2, #128	; 0x80
   1dd3a:	0312      	lsls	r2, r2, #12
   1dd3c:	4313      	orrs	r3, r2
   1dd3e:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
   1dd40:	687b      	ldr	r3, [r7, #4]
   1dd42:	68db      	ldr	r3, [r3, #12]
   1dd44:	697a      	ldr	r2, [r7, #20]
   1dd46:	4313      	orrs	r3, r2
   1dd48:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
   1dd4a:	687b      	ldr	r3, [r7, #4]
   1dd4c:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
   1dd4e:	687b      	ldr	r3, [r7, #4]
   1dd50:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
   1dd52:	4313      	orrs	r3, r2
   1dd54:	b29b      	uxth	r3, r3
   1dd56:	001a      	movs	r2, r3
	compctrl_temp |=
   1dd58:	697b      	ldr	r3, [r7, #20]
   1dd5a:	4313      	orrs	r3, r2
   1dd5c:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
   1dd5e:	687b      	ldr	r3, [r7, #4]
   1dd60:	781b      	ldrb	r3, [r3, #0]
   1dd62:	001a      	movs	r2, r3
   1dd64:	697b      	ldr	r3, [r7, #20]
   1dd66:	4313      	orrs	r3, r2
   1dd68:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
   1dd6a:	687b      	ldr	r3, [r7, #4]
   1dd6c:	7d5b      	ldrb	r3, [r3, #21]
   1dd6e:	001a      	movs	r2, r3
   1dd70:	697b      	ldr	r3, [r7, #20]
   1dd72:	4313      	orrs	r3, r2
   1dd74:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
   1dd76:	46c0      	nop			; (mov r8, r8)
   1dd78:	68fb      	ldr	r3, [r7, #12]
   1dd7a:	0018      	movs	r0, r3
   1dd7c:	4b0e      	ldr	r3, [pc, #56]	; (1ddb8 <ac_chan_set_config+0xb0>)
   1dd7e:	4798      	blx	r3
   1dd80:	1e03      	subs	r3, r0, #0
   1dd82:	d1f9      	bne.n	1dd78 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
   1dd84:	230b      	movs	r3, #11
   1dd86:	18fb      	adds	r3, r7, r3
   1dd88:	781a      	ldrb	r2, [r3, #0]
   1dd8a:	693b      	ldr	r3, [r7, #16]
   1dd8c:	3204      	adds	r2, #4
   1dd8e:	0092      	lsls	r2, r2, #2
   1dd90:	6979      	ldr	r1, [r7, #20]
   1dd92:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
   1dd94:	230b      	movs	r3, #11
   1dd96:	18fb      	adds	r3, r7, r3
   1dd98:	781b      	ldrb	r3, [r3, #0]
   1dd9a:	687a      	ldr	r2, [r7, #4]
   1dd9c:	7d12      	ldrb	r2, [r2, #20]
   1dd9e:	3a01      	subs	r2, #1
   1dda0:	b2d0      	uxtb	r0, r2
   1dda2:	693a      	ldr	r2, [r7, #16]
   1dda4:	2120      	movs	r1, #32
   1dda6:	18d3      	adds	r3, r2, r3
   1dda8:	185b      	adds	r3, r3, r1
   1ddaa:	1c02      	adds	r2, r0, #0
   1ddac:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   1ddae:	2300      	movs	r3, #0
}
   1ddb0:	0018      	movs	r0, r3
   1ddb2:	46bd      	mov	sp, r7
   1ddb4:	b006      	add	sp, #24
   1ddb6:	bd80      	pop	{r7, pc}
   1ddb8:	0001db9d 	.word	0x0001db9d

0001ddbc <system_gclk_chan_get_config_defaults>:
{
   1ddbc:	b580      	push	{r7, lr}
   1ddbe:	b082      	sub	sp, #8
   1ddc0:	af00      	add	r7, sp, #0
   1ddc2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1ddc4:	687b      	ldr	r3, [r7, #4]
   1ddc6:	2200      	movs	r2, #0
   1ddc8:	701a      	strb	r2, [r3, #0]
}
   1ddca:	46c0      	nop			; (mov r8, r8)
   1ddcc:	46bd      	mov	sp, r7
   1ddce:	b002      	add	sp, #8
   1ddd0:	bd80      	pop	{r7, pc}
	...

0001ddd4 <system_apb_clock_set_mask>:
{
   1ddd4:	b580      	push	{r7, lr}
   1ddd6:	b082      	sub	sp, #8
   1ddd8:	af00      	add	r7, sp, #0
   1ddda:	0002      	movs	r2, r0
   1dddc:	6039      	str	r1, [r7, #0]
   1ddde:	1dfb      	adds	r3, r7, #7
   1dde0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1dde2:	1dfb      	adds	r3, r7, #7
   1dde4:	781b      	ldrb	r3, [r3, #0]
   1dde6:	2b01      	cmp	r3, #1
   1dde8:	d00a      	beq.n	1de00 <system_apb_clock_set_mask+0x2c>
   1ddea:	2b02      	cmp	r3, #2
   1ddec:	d00f      	beq.n	1de0e <system_apb_clock_set_mask+0x3a>
   1ddee:	2b00      	cmp	r3, #0
   1ddf0:	d114      	bne.n	1de1c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1ddf2:	4b0e      	ldr	r3, [pc, #56]	; (1de2c <system_apb_clock_set_mask+0x58>)
   1ddf4:	4a0d      	ldr	r2, [pc, #52]	; (1de2c <system_apb_clock_set_mask+0x58>)
   1ddf6:	6991      	ldr	r1, [r2, #24]
   1ddf8:	683a      	ldr	r2, [r7, #0]
   1ddfa:	430a      	orrs	r2, r1
   1ddfc:	619a      	str	r2, [r3, #24]
			break;
   1ddfe:	e00f      	b.n	1de20 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1de00:	4b0a      	ldr	r3, [pc, #40]	; (1de2c <system_apb_clock_set_mask+0x58>)
   1de02:	4a0a      	ldr	r2, [pc, #40]	; (1de2c <system_apb_clock_set_mask+0x58>)
   1de04:	69d1      	ldr	r1, [r2, #28]
   1de06:	683a      	ldr	r2, [r7, #0]
   1de08:	430a      	orrs	r2, r1
   1de0a:	61da      	str	r2, [r3, #28]
			break;
   1de0c:	e008      	b.n	1de20 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1de0e:	4b07      	ldr	r3, [pc, #28]	; (1de2c <system_apb_clock_set_mask+0x58>)
   1de10:	4a06      	ldr	r2, [pc, #24]	; (1de2c <system_apb_clock_set_mask+0x58>)
   1de12:	6a11      	ldr	r1, [r2, #32]
   1de14:	683a      	ldr	r2, [r7, #0]
   1de16:	430a      	orrs	r2, r1
   1de18:	621a      	str	r2, [r3, #32]
			break;
   1de1a:	e001      	b.n	1de20 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1de1c:	2317      	movs	r3, #23
   1de1e:	e000      	b.n	1de22 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1de20:	2300      	movs	r3, #0
}
   1de22:	0018      	movs	r0, r3
   1de24:	46bd      	mov	sp, r7
   1de26:	b002      	add	sp, #8
   1de28:	bd80      	pop	{r7, pc}
   1de2a:	46c0      	nop			; (mov r8, r8)
   1de2c:	40000400 	.word	0x40000400

0001de30 <system_pinmux_get_config_defaults>:
{
   1de30:	b580      	push	{r7, lr}
   1de32:	b082      	sub	sp, #8
   1de34:	af00      	add	r7, sp, #0
   1de36:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1de38:	687b      	ldr	r3, [r7, #4]
   1de3a:	2280      	movs	r2, #128	; 0x80
   1de3c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1de3e:	687b      	ldr	r3, [r7, #4]
   1de40:	2200      	movs	r2, #0
   1de42:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1de44:	687b      	ldr	r3, [r7, #4]
   1de46:	2201      	movs	r2, #1
   1de48:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1de4a:	687b      	ldr	r3, [r7, #4]
   1de4c:	2200      	movs	r2, #0
   1de4e:	70da      	strb	r2, [r3, #3]
}
   1de50:	46c0      	nop			; (mov r8, r8)
   1de52:	46bd      	mov	sp, r7
   1de54:	b002      	add	sp, #8
   1de56:	bd80      	pop	{r7, pc}

0001de58 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   1de58:	b580      	push	{r7, lr}
   1de5a:	b082      	sub	sp, #8
   1de5c:	af00      	add	r7, sp, #0
   1de5e:	0002      	movs	r2, r0
   1de60:	1dfb      	adds	r3, r7, #7
   1de62:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   1de64:	1dfb      	adds	r3, r7, #7
   1de66:	781b      	ldrb	r3, [r3, #0]
   1de68:	2b00      	cmp	r3, #0
   1de6a:	d002      	beq.n	1de72 <system_voltage_reference_enable+0x1a>
   1de6c:	2b01      	cmp	r3, #1
   1de6e:	d007      	beq.n	1de80 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   1de70:	e00d      	b.n	1de8e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   1de72:	4b08      	ldr	r3, [pc, #32]	; (1de94 <system_voltage_reference_enable+0x3c>)
   1de74:	4a07      	ldr	r2, [pc, #28]	; (1de94 <system_voltage_reference_enable+0x3c>)
   1de76:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1de78:	2102      	movs	r1, #2
   1de7a:	430a      	orrs	r2, r1
   1de7c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1de7e:	e006      	b.n	1de8e <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   1de80:	4b04      	ldr	r3, [pc, #16]	; (1de94 <system_voltage_reference_enable+0x3c>)
   1de82:	4a04      	ldr	r2, [pc, #16]	; (1de94 <system_voltage_reference_enable+0x3c>)
   1de84:	6c12      	ldr	r2, [r2, #64]	; 0x40
   1de86:	2104      	movs	r1, #4
   1de88:	430a      	orrs	r2, r1
   1de8a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   1de8c:	46c0      	nop			; (mov r8, r8)
	}
}
   1de8e:	46bd      	mov	sp, r7
   1de90:	b002      	add	sp, #8
   1de92:	bd80      	pop	{r7, pc}
   1de94:	40000800 	.word	0x40000800

0001de98 <adc_is_syncing>:
{
   1de98:	b580      	push	{r7, lr}
   1de9a:	b084      	sub	sp, #16
   1de9c:	af00      	add	r7, sp, #0
   1de9e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1dea0:	687b      	ldr	r3, [r7, #4]
   1dea2:	681b      	ldr	r3, [r3, #0]
   1dea4:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1dea6:	68fb      	ldr	r3, [r7, #12]
   1dea8:	7e5b      	ldrb	r3, [r3, #25]
   1deaa:	b2db      	uxtb	r3, r3
   1deac:	b25b      	sxtb	r3, r3
   1deae:	2b00      	cmp	r3, #0
   1deb0:	da01      	bge.n	1deb6 <adc_is_syncing+0x1e>
		return true;
   1deb2:	2301      	movs	r3, #1
   1deb4:	e000      	b.n	1deb8 <adc_is_syncing+0x20>
	return false;
   1deb6:	2300      	movs	r3, #0
}
   1deb8:	0018      	movs	r0, r3
   1deba:	46bd      	mov	sp, r7
   1debc:	b004      	add	sp, #16
   1debe:	bd80      	pop	{r7, pc}

0001dec0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   1dec0:	b580      	push	{r7, lr}
   1dec2:	b082      	sub	sp, #8
   1dec4:	af00      	add	r7, sp, #0
   1dec6:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   1dec8:	687b      	ldr	r3, [r7, #4]
   1deca:	2200      	movs	r2, #0
   1decc:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   1dece:	687b      	ldr	r3, [r7, #4]
   1ded0:	2200      	movs	r2, #0
   1ded2:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1ded4:	687b      	ldr	r3, [r7, #4]
   1ded6:	2200      	movs	r2, #0
   1ded8:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   1deda:	687b      	ldr	r3, [r7, #4]
   1dedc:	2200      	movs	r2, #0
   1dede:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   1dee0:	687b      	ldr	r3, [r7, #4]
   1dee2:	2200      	movs	r2, #0
   1dee4:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1dee6:	687b      	ldr	r3, [r7, #4]
   1dee8:	2200      	movs	r2, #0
   1deea:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   1deec:	687b      	ldr	r3, [r7, #4]
   1deee:	2200      	movs	r2, #0
   1def0:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1def2:	687b      	ldr	r3, [r7, #4]
   1def4:	2200      	movs	r2, #0
   1def6:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   1def8:	687b      	ldr	r3, [r7, #4]
   1defa:	2200      	movs	r2, #0
   1defc:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   1defe:	687b      	ldr	r3, [r7, #4]
   1df00:	22c0      	movs	r2, #192	; 0xc0
   1df02:	0152      	lsls	r2, r2, #5
   1df04:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1df06:	687b      	ldr	r3, [r7, #4]
   1df08:	2200      	movs	r2, #0
   1df0a:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   1df0c:	687b      	ldr	r3, [r7, #4]
   1df0e:	2200      	movs	r2, #0
   1df10:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1df12:	687b      	ldr	r3, [r7, #4]
   1df14:	2200      	movs	r2, #0
   1df16:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   1df18:	687b      	ldr	r3, [r7, #4]
   1df1a:	2200      	movs	r2, #0
   1df1c:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   1df1e:	687b      	ldr	r3, [r7, #4]
   1df20:	2200      	movs	r2, #0
   1df22:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1df24:	687b      	ldr	r3, [r7, #4]
   1df26:	222a      	movs	r2, #42	; 0x2a
   1df28:	2100      	movs	r1, #0
   1df2a:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   1df2c:	687b      	ldr	r3, [r7, #4]
   1df2e:	2200      	movs	r2, #0
   1df30:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1df32:	687b      	ldr	r3, [r7, #4]
   1df34:	2200      	movs	r2, #0
   1df36:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   1df38:	687b      	ldr	r3, [r7, #4]
   1df3a:	2224      	movs	r2, #36	; 0x24
   1df3c:	2100      	movs	r1, #0
   1df3e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   1df40:	687b      	ldr	r3, [r7, #4]
   1df42:	2200      	movs	r2, #0
   1df44:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1df46:	687b      	ldr	r3, [r7, #4]
   1df48:	2200      	movs	r2, #0
   1df4a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   1df4c:	687b      	ldr	r3, [r7, #4]
   1df4e:	2200      	movs	r2, #0
   1df50:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   1df52:	687b      	ldr	r3, [r7, #4]
   1df54:	222b      	movs	r2, #43	; 0x2b
   1df56:	2100      	movs	r1, #0
   1df58:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   1df5a:	687b      	ldr	r3, [r7, #4]
   1df5c:	222c      	movs	r2, #44	; 0x2c
   1df5e:	2100      	movs	r1, #0
   1df60:	5499      	strb	r1, [r3, r2]
}
   1df62:	46c0      	nop			; (mov r8, r8)
   1df64:	46bd      	mov	sp, r7
   1df66:	b002      	add	sp, #8
   1df68:	bd80      	pop	{r7, pc}
	...

0001df6c <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   1df6c:	b580      	push	{r7, lr}
   1df6e:	b098      	sub	sp, #96	; 0x60
   1df70:	af00      	add	r7, sp, #0
   1df72:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   1df74:	230c      	movs	r3, #12
   1df76:	18fa      	adds	r2, r7, r3
   1df78:	4b15      	ldr	r3, [pc, #84]	; (1dfd0 <_adc_configure_ain_pin+0x64>)
   1df7a:	0010      	movs	r0, r2
   1df7c:	0019      	movs	r1, r3
   1df7e:	2350      	movs	r3, #80	; 0x50
   1df80:	001a      	movs	r2, r3
   1df82:	4b14      	ldr	r3, [pc, #80]	; (1dfd4 <_adc_configure_ain_pin+0x68>)
   1df84:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   1df86:	4b14      	ldr	r3, [pc, #80]	; (1dfd8 <_adc_configure_ain_pin+0x6c>)
   1df88:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   1df8a:	687b      	ldr	r3, [r7, #4]
   1df8c:	2b13      	cmp	r3, #19
   1df8e:	d81a      	bhi.n	1dfc6 <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   1df90:	230c      	movs	r3, #12
   1df92:	18fb      	adds	r3, r7, r3
   1df94:	687a      	ldr	r2, [r7, #4]
   1df96:	0092      	lsls	r2, r2, #2
   1df98:	58d3      	ldr	r3, [r2, r3]
   1df9a:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   1df9c:	2308      	movs	r3, #8
   1df9e:	18fb      	adds	r3, r7, r3
   1dfa0:	0018      	movs	r0, r3
   1dfa2:	4b0e      	ldr	r3, [pc, #56]	; (1dfdc <_adc_configure_ain_pin+0x70>)
   1dfa4:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   1dfa6:	2308      	movs	r3, #8
   1dfa8:	18fb      	adds	r3, r7, r3
   1dfaa:	2200      	movs	r2, #0
   1dfac:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   1dfae:	2308      	movs	r3, #8
   1dfb0:	18fb      	adds	r3, r7, r3
   1dfb2:	2201      	movs	r2, #1
   1dfb4:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1dfb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1dfb8:	b2db      	uxtb	r3, r3
   1dfba:	2208      	movs	r2, #8
   1dfbc:	18ba      	adds	r2, r7, r2
   1dfbe:	0011      	movs	r1, r2
   1dfc0:	0018      	movs	r0, r3
   1dfc2:	4b07      	ldr	r3, [pc, #28]	; (1dfe0 <_adc_configure_ain_pin+0x74>)
   1dfc4:	4798      	blx	r3
	}
}
   1dfc6:	46c0      	nop			; (mov r8, r8)
   1dfc8:	46bd      	mov	sp, r7
   1dfca:	b018      	add	sp, #96	; 0x60
   1dfcc:	bd80      	pop	{r7, pc}
   1dfce:	46c0      	nop			; (mov r8, r8)
   1dfd0:	0002b374 	.word	0x0002b374
   1dfd4:	00029621 	.word	0x00029621
   1dfd8:	0000ffff 	.word	0x0000ffff
   1dfdc:	0001de31 	.word	0x0001de31
   1dfe0:	00025501 	.word	0x00025501

0001dfe4 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1dfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfe6:	b089      	sub	sp, #36	; 0x24
   1dfe8:	af00      	add	r7, sp, #0
   1dfea:	6078      	str	r0, [r7, #4]
   1dfec:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   1dfee:	231f      	movs	r3, #31
   1dff0:	18fb      	adds	r3, r7, r3
   1dff2:	2200      	movs	r2, #0
   1dff4:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1dff6:	2310      	movs	r3, #16
   1dff8:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   1dffa:	2317      	movs	r3, #23
   1dffc:	18fb      	adds	r3, r7, r3
   1dffe:	2200      	movs	r2, #0
   1e000:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1e002:	687b      	ldr	r3, [r7, #4]
   1e004:	681b      	ldr	r3, [r3, #0]
   1e006:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1e008:	230c      	movs	r3, #12
   1e00a:	18fb      	adds	r3, r7, r3
   1e00c:	0018      	movs	r0, r3
   1e00e:	4bce      	ldr	r3, [pc, #824]	; (1e348 <_adc_set_config+0x364>)
   1e010:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1e012:	683b      	ldr	r3, [r7, #0]
   1e014:	781a      	ldrb	r2, [r3, #0]
   1e016:	230c      	movs	r3, #12
   1e018:	18fb      	adds	r3, r7, r3
   1e01a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   1e01c:	230c      	movs	r3, #12
   1e01e:	18fb      	adds	r3, r7, r3
   1e020:	0019      	movs	r1, r3
   1e022:	201e      	movs	r0, #30
   1e024:	4bc9      	ldr	r3, [pc, #804]	; (1e34c <_adc_set_config+0x368>)
   1e026:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   1e028:	201e      	movs	r0, #30
   1e02a:	4bc9      	ldr	r3, [pc, #804]	; (1e350 <_adc_set_config+0x36c>)
   1e02c:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   1e02e:	683b      	ldr	r3, [r7, #0]
   1e030:	222c      	movs	r2, #44	; 0x2c
   1e032:	5c9b      	ldrb	r3, [r3, r2]
   1e034:	2b00      	cmp	r3, #0
   1e036:	d040      	beq.n	1e0ba <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   1e038:	2316      	movs	r3, #22
   1e03a:	18fb      	adds	r3, r7, r3
   1e03c:	683a      	ldr	r2, [r7, #0]
   1e03e:	212b      	movs	r1, #43	; 0x2b
   1e040:	5c52      	ldrb	r2, [r2, r1]
   1e042:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1e044:	683b      	ldr	r3, [r7, #0]
   1e046:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   1e048:	2315      	movs	r3, #21
   1e04a:	18fb      	adds	r3, r7, r3
   1e04c:	2216      	movs	r2, #22
   1e04e:	18ba      	adds	r2, r7, r2
   1e050:	7812      	ldrb	r2, [r2, #0]
   1e052:	188a      	adds	r2, r1, r2
   1e054:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   1e056:	683b      	ldr	r3, [r7, #0]
   1e058:	222c      	movs	r2, #44	; 0x2c
   1e05a:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   1e05c:	230f      	movs	r3, #15
   1e05e:	18fb      	adds	r3, r7, r3
   1e060:	2215      	movs	r2, #21
   1e062:	18ba      	adds	r2, r7, r2
   1e064:	7812      	ldrb	r2, [r2, #0]
   1e066:	188a      	adds	r2, r1, r2
   1e068:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   1e06a:	e018      	b.n	1e09e <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   1e06c:	2316      	movs	r3, #22
   1e06e:	18fb      	adds	r3, r7, r3
   1e070:	781b      	ldrb	r3, [r3, #0]
   1e072:	220f      	movs	r2, #15
   1e074:	4013      	ands	r3, r2
   1e076:	683a      	ldr	r2, [r7, #0]
   1e078:	7b12      	ldrb	r2, [r2, #12]
   1e07a:	189b      	adds	r3, r3, r2
   1e07c:	0018      	movs	r0, r3
   1e07e:	4bb5      	ldr	r3, [pc, #724]	; (1e354 <_adc_set_config+0x370>)
   1e080:	4798      	blx	r3
			start_pin++;
   1e082:	2315      	movs	r3, #21
   1e084:	18fb      	adds	r3, r7, r3
   1e086:	781a      	ldrb	r2, [r3, #0]
   1e088:	2315      	movs	r3, #21
   1e08a:	18fb      	adds	r3, r7, r3
   1e08c:	3201      	adds	r2, #1
   1e08e:	701a      	strb	r2, [r3, #0]
			offset++;
   1e090:	2316      	movs	r3, #22
   1e092:	18fb      	adds	r3, r7, r3
   1e094:	781a      	ldrb	r2, [r3, #0]
   1e096:	2316      	movs	r3, #22
   1e098:	18fb      	adds	r3, r7, r3
   1e09a:	3201      	adds	r2, #1
   1e09c:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   1e09e:	2315      	movs	r3, #21
   1e0a0:	18fa      	adds	r2, r7, r3
   1e0a2:	230f      	movs	r3, #15
   1e0a4:	18fb      	adds	r3, r7, r3
   1e0a6:	7812      	ldrb	r2, [r2, #0]
   1e0a8:	781b      	ldrb	r3, [r3, #0]
   1e0aa:	429a      	cmp	r2, r3
   1e0ac:	d3de      	bcc.n	1e06c <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   1e0ae:	683b      	ldr	r3, [r7, #0]
   1e0b0:	89db      	ldrh	r3, [r3, #14]
   1e0b2:	0018      	movs	r0, r3
   1e0b4:	4ba7      	ldr	r3, [pc, #668]	; (1e354 <_adc_set_config+0x370>)
   1e0b6:	4798      	blx	r3
   1e0b8:	e009      	b.n	1e0ce <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   1e0ba:	683b      	ldr	r3, [r7, #0]
   1e0bc:	7b1b      	ldrb	r3, [r3, #12]
   1e0be:	0018      	movs	r0, r3
   1e0c0:	4ba4      	ldr	r3, [pc, #656]	; (1e354 <_adc_set_config+0x370>)
   1e0c2:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1e0c4:	683b      	ldr	r3, [r7, #0]
   1e0c6:	89db      	ldrh	r3, [r3, #14]
   1e0c8:	0018      	movs	r0, r3
   1e0ca:	4ba2      	ldr	r3, [pc, #648]	; (1e354 <_adc_set_config+0x370>)
   1e0cc:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   1e0ce:	683b      	ldr	r3, [r7, #0]
   1e0d0:	7d5b      	ldrb	r3, [r3, #21]
   1e0d2:	009b      	lsls	r3, r3, #2
   1e0d4:	b2da      	uxtb	r2, r3
   1e0d6:	693b      	ldr	r3, [r7, #16]
   1e0d8:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1e0da:	683b      	ldr	r3, [r7, #0]
   1e0dc:	7d9b      	ldrb	r3, [r3, #22]
   1e0de:	01db      	lsls	r3, r3, #7
   1e0e0:	b25a      	sxtb	r2, r3
			(config->reference);
   1e0e2:	683b      	ldr	r3, [r7, #0]
   1e0e4:	785b      	ldrb	r3, [r3, #1]
   1e0e6:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   1e0e8:	4313      	orrs	r3, r2
   1e0ea:	b25b      	sxtb	r3, r3
   1e0ec:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   1e0ee:	693b      	ldr	r3, [r7, #16]
   1e0f0:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1e0f2:	683b      	ldr	r3, [r7, #0]
   1e0f4:	791b      	ldrb	r3, [r3, #4]
   1e0f6:	2b34      	cmp	r3, #52	; 0x34
   1e0f8:	d846      	bhi.n	1e188 <_adc_set_config+0x1a4>
   1e0fa:	009a      	lsls	r2, r3, #2
   1e0fc:	4b96      	ldr	r3, [pc, #600]	; (1e358 <_adc_set_config+0x374>)
   1e0fe:	18d3      	adds	r3, r2, r3
   1e100:	681b      	ldr	r3, [r3, #0]
   1e102:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1e104:	231f      	movs	r3, #31
   1e106:	18fb      	adds	r3, r7, r3
   1e108:	683a      	ldr	r2, [r7, #0]
   1e10a:	7c52      	ldrb	r2, [r2, #17]
   1e10c:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   1e10e:	2317      	movs	r3, #23
   1e110:	18fb      	adds	r3, r7, r3
   1e112:	683a      	ldr	r2, [r7, #0]
   1e114:	7c12      	ldrb	r2, [r2, #16]
   1e116:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1e118:	2310      	movs	r3, #16
   1e11a:	61bb      	str	r3, [r7, #24]
		break;
   1e11c:	e036      	b.n	1e18c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1e11e:	231f      	movs	r3, #31
   1e120:	18fb      	adds	r3, r7, r3
   1e122:	2201      	movs	r2, #1
   1e124:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1e126:	2317      	movs	r3, #23
   1e128:	18fb      	adds	r3, r7, r3
   1e12a:	2202      	movs	r2, #2
   1e12c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1e12e:	2310      	movs	r3, #16
   1e130:	61bb      	str	r3, [r7, #24]
		break;
   1e132:	e02b      	b.n	1e18c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1e134:	231f      	movs	r3, #31
   1e136:	18fb      	adds	r3, r7, r3
   1e138:	2202      	movs	r2, #2
   1e13a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   1e13c:	2317      	movs	r3, #23
   1e13e:	18fb      	adds	r3, r7, r3
   1e140:	2204      	movs	r2, #4
   1e142:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1e144:	2310      	movs	r3, #16
   1e146:	61bb      	str	r3, [r7, #24]
		break;
   1e148:	e020      	b.n	1e18c <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   1e14a:	231f      	movs	r3, #31
   1e14c:	18fb      	adds	r3, r7, r3
   1e14e:	2201      	movs	r2, #1
   1e150:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   1e152:	2317      	movs	r3, #23
   1e154:	18fb      	adds	r3, r7, r3
   1e156:	2206      	movs	r2, #6
   1e158:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1e15a:	2310      	movs	r3, #16
   1e15c:	61bb      	str	r3, [r7, #24]
		break;
   1e15e:	e015      	b.n	1e18c <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   1e160:	231f      	movs	r3, #31
   1e162:	18fb      	adds	r3, r7, r3
   1e164:	2200      	movs	r2, #0
   1e166:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   1e168:	2317      	movs	r3, #23
   1e16a:	18fb      	adds	r3, r7, r3
   1e16c:	2208      	movs	r2, #8
   1e16e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1e170:	2310      	movs	r3, #16
   1e172:	61bb      	str	r3, [r7, #24]
		break;
   1e174:	e00a      	b.n	1e18c <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   1e176:	2330      	movs	r3, #48	; 0x30
   1e178:	61bb      	str	r3, [r7, #24]
		break;
   1e17a:	e007      	b.n	1e18c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   1e17c:	2320      	movs	r3, #32
   1e17e:	61bb      	str	r3, [r7, #24]
		break;
   1e180:	e004      	b.n	1e18c <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   1e182:	2300      	movs	r3, #0
   1e184:	61bb      	str	r3, [r7, #24]
		break;
   1e186:	e001      	b.n	1e18c <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   1e188:	2317      	movs	r3, #23
   1e18a:	e1ae      	b.n	1e4ea <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   1e18c:	231f      	movs	r3, #31
   1e18e:	18fb      	adds	r3, r7, r3
   1e190:	781b      	ldrb	r3, [r3, #0]
   1e192:	011b      	lsls	r3, r3, #4
   1e194:	b2db      	uxtb	r3, r3
   1e196:	2270      	movs	r2, #112	; 0x70
   1e198:	4013      	ands	r3, r2
   1e19a:	b2da      	uxtb	r2, r3
   1e19c:	2317      	movs	r3, #23
   1e19e:	18fb      	adds	r3, r7, r3
   1e1a0:	781b      	ldrb	r3, [r3, #0]
   1e1a2:	4313      	orrs	r3, r2
   1e1a4:	b2da      	uxtb	r2, r3
   1e1a6:	693b      	ldr	r3, [r7, #16]
   1e1a8:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   1e1aa:	683b      	ldr	r3, [r7, #0]
   1e1ac:	7ddb      	ldrb	r3, [r3, #23]
   1e1ae:	2b3f      	cmp	r3, #63	; 0x3f
   1e1b0:	d901      	bls.n	1e1b6 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1e1b2:	2317      	movs	r3, #23
   1e1b4:	e199      	b.n	1e4ea <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1e1b6:	683b      	ldr	r3, [r7, #0]
   1e1b8:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   1e1ba:	693b      	ldr	r3, [r7, #16]
   1e1bc:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   1e1be:	46c0      	nop			; (mov r8, r8)
   1e1c0:	687b      	ldr	r3, [r7, #4]
   1e1c2:	0018      	movs	r0, r3
   1e1c4:	4b65      	ldr	r3, [pc, #404]	; (1e35c <_adc_set_config+0x378>)
   1e1c6:	4798      	blx	r3
   1e1c8:	1e03      	subs	r3, r0, #0
   1e1ca:	d1f9      	bne.n	1e1c0 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   1e1cc:	683b      	ldr	r3, [r7, #0]
   1e1ce:	885a      	ldrh	r2, [r3, #2]
   1e1d0:	69bb      	ldr	r3, [r7, #24]
   1e1d2:	b29b      	uxth	r3, r3
   1e1d4:	4313      	orrs	r3, r2
   1e1d6:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1e1d8:	683b      	ldr	r3, [r7, #0]
   1e1da:	2124      	movs	r1, #36	; 0x24
   1e1dc:	5c5b      	ldrb	r3, [r3, r1]
   1e1de:	b29b      	uxth	r3, r3
   1e1e0:	00db      	lsls	r3, r3, #3
   1e1e2:	b29b      	uxth	r3, r3
			resolution |
   1e1e4:	4313      	orrs	r3, r2
   1e1e6:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1e1e8:	683b      	ldr	r3, [r7, #0]
   1e1ea:	7d1b      	ldrb	r3, [r3, #20]
   1e1ec:	b29b      	uxth	r3, r3
   1e1ee:	009b      	lsls	r3, r3, #2
   1e1f0:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1e1f2:	4313      	orrs	r3, r2
   1e1f4:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1e1f6:	683b      	ldr	r3, [r7, #0]
   1e1f8:	7c9b      	ldrb	r3, [r3, #18]
   1e1fa:	b29b      	uxth	r3, r3
   1e1fc:	18db      	adds	r3, r3, r3
   1e1fe:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   1e200:	4313      	orrs	r3, r2
   1e202:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1e204:	683b      	ldr	r3, [r7, #0]
   1e206:	7cdb      	ldrb	r3, [r3, #19]
   1e208:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1e20a:	4313      	orrs	r3, r2
   1e20c:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   1e20e:	693b      	ldr	r3, [r7, #16]
   1e210:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1e212:	683b      	ldr	r3, [r7, #0]
   1e214:	7e1b      	ldrb	r3, [r3, #24]
   1e216:	2b00      	cmp	r3, #0
   1e218:	d100      	bne.n	1e21c <_adc_set_config+0x238>
   1e21a:	e0c4      	b.n	1e3a6 <_adc_set_config+0x3c2>
		switch (resolution) {
   1e21c:	69bb      	ldr	r3, [r7, #24]
   1e21e:	2b10      	cmp	r3, #16
   1e220:	d100      	bne.n	1e224 <_adc_set_config+0x240>
   1e222:	e076      	b.n	1e312 <_adc_set_config+0x32e>
   1e224:	d802      	bhi.n	1e22c <_adc_set_config+0x248>
   1e226:	2b00      	cmp	r3, #0
   1e228:	d04d      	beq.n	1e2c6 <_adc_set_config+0x2e2>
   1e22a:	e0bc      	b.n	1e3a6 <_adc_set_config+0x3c2>
   1e22c:	2b20      	cmp	r3, #32
   1e22e:	d023      	beq.n	1e278 <_adc_set_config+0x294>
   1e230:	2b30      	cmp	r3, #48	; 0x30
   1e232:	d000      	beq.n	1e236 <_adc_set_config+0x252>
   1e234:	e0b7      	b.n	1e3a6 <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1e236:	683b      	ldr	r3, [r7, #0]
   1e238:	7cdb      	ldrb	r3, [r3, #19]
   1e23a:	2b00      	cmp	r3, #0
   1e23c:	d011      	beq.n	1e262 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   1e23e:	683b      	ldr	r3, [r7, #0]
   1e240:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1e242:	2b7f      	cmp	r3, #127	; 0x7f
   1e244:	dc0b      	bgt.n	1e25e <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1e246:	683b      	ldr	r3, [r7, #0]
   1e248:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   1e24a:	3380      	adds	r3, #128	; 0x80
   1e24c:	db07      	blt.n	1e25e <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   1e24e:	683b      	ldr	r3, [r7, #0]
   1e250:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   1e252:	2b7f      	cmp	r3, #127	; 0x7f
   1e254:	dc03      	bgt.n	1e25e <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   1e256:	683b      	ldr	r3, [r7, #0]
   1e258:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   1e25a:	3380      	adds	r3, #128	; 0x80
   1e25c:	da01      	bge.n	1e262 <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e25e:	2317      	movs	r3, #23
   1e260:	e143      	b.n	1e4ea <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   1e262:	683b      	ldr	r3, [r7, #0]
   1e264:	69db      	ldr	r3, [r3, #28]
   1e266:	2bff      	cmp	r3, #255	; 0xff
   1e268:	dc04      	bgt.n	1e274 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   1e26a:	683b      	ldr	r3, [r7, #0]
   1e26c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   1e26e:	2bff      	cmp	r3, #255	; 0xff
   1e270:	dc00      	bgt.n	1e274 <_adc_set_config+0x290>
   1e272:	e091      	b.n	1e398 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e274:	2317      	movs	r3, #23
   1e276:	e138      	b.n	1e4ea <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   1e278:	683b      	ldr	r3, [r7, #0]
   1e27a:	7cdb      	ldrb	r3, [r3, #19]
   1e27c:	2b00      	cmp	r3, #0
   1e27e:	d015      	beq.n	1e2ac <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   1e280:	683b      	ldr	r3, [r7, #0]
   1e282:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1e284:	4a36      	ldr	r2, [pc, #216]	; (1e360 <_adc_set_config+0x37c>)
   1e286:	4293      	cmp	r3, r2
   1e288:	dc0e      	bgt.n	1e2a8 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   1e28a:	683b      	ldr	r3, [r7, #0]
   1e28c:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   1e28e:	4a35      	ldr	r2, [pc, #212]	; (1e364 <_adc_set_config+0x380>)
   1e290:	4293      	cmp	r3, r2
   1e292:	db09      	blt.n	1e2a8 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   1e294:	683b      	ldr	r3, [r7, #0]
   1e296:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   1e298:	4a31      	ldr	r2, [pc, #196]	; (1e360 <_adc_set_config+0x37c>)
   1e29a:	4293      	cmp	r3, r2
   1e29c:	dc04      	bgt.n	1e2a8 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   1e29e:	683b      	ldr	r3, [r7, #0]
   1e2a0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   1e2a2:	4a30      	ldr	r2, [pc, #192]	; (1e364 <_adc_set_config+0x380>)
   1e2a4:	4293      	cmp	r3, r2
   1e2a6:	da01      	bge.n	1e2ac <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e2a8:	2317      	movs	r3, #23
   1e2aa:	e11e      	b.n	1e4ea <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   1e2ac:	683b      	ldr	r3, [r7, #0]
   1e2ae:	69db      	ldr	r3, [r3, #28]
   1e2b0:	4a2d      	ldr	r2, [pc, #180]	; (1e368 <_adc_set_config+0x384>)
   1e2b2:	4293      	cmp	r3, r2
   1e2b4:	dc05      	bgt.n	1e2c2 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1e2b6:	683b      	ldr	r3, [r7, #0]
   1e2b8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   1e2ba:	4a2b      	ldr	r2, [pc, #172]	; (1e368 <_adc_set_config+0x384>)
   1e2bc:	4293      	cmp	r3, r2
   1e2be:	dc00      	bgt.n	1e2c2 <_adc_set_config+0x2de>
   1e2c0:	e06c      	b.n	1e39c <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e2c2:	2317      	movs	r3, #23
   1e2c4:	e111      	b.n	1e4ea <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1e2c6:	683b      	ldr	r3, [r7, #0]
   1e2c8:	7cdb      	ldrb	r3, [r3, #19]
   1e2ca:	2b00      	cmp	r3, #0
   1e2cc:	d015      	beq.n	1e2fa <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   1e2ce:	683b      	ldr	r3, [r7, #0]
   1e2d0:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1e2d2:	4a26      	ldr	r2, [pc, #152]	; (1e36c <_adc_set_config+0x388>)
   1e2d4:	4293      	cmp	r3, r2
   1e2d6:	dc0e      	bgt.n	1e2f6 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   1e2d8:	683b      	ldr	r3, [r7, #0]
   1e2da:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   1e2dc:	4a24      	ldr	r2, [pc, #144]	; (1e370 <_adc_set_config+0x38c>)
   1e2de:	4293      	cmp	r3, r2
   1e2e0:	db09      	blt.n	1e2f6 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1e2e2:	683b      	ldr	r3, [r7, #0]
   1e2e4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1e2e6:	4a21      	ldr	r2, [pc, #132]	; (1e36c <_adc_set_config+0x388>)
   1e2e8:	4293      	cmp	r3, r2
   1e2ea:	dc04      	bgt.n	1e2f6 <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   1e2ec:	683b      	ldr	r3, [r7, #0]
   1e2ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   1e2f0:	4a1f      	ldr	r2, [pc, #124]	; (1e370 <_adc_set_config+0x38c>)
   1e2f2:	4293      	cmp	r3, r2
   1e2f4:	da01      	bge.n	1e2fa <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e2f6:	2317      	movs	r3, #23
   1e2f8:	e0f7      	b.n	1e4ea <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   1e2fa:	683b      	ldr	r3, [r7, #0]
   1e2fc:	69db      	ldr	r3, [r3, #28]
   1e2fe:	4a1d      	ldr	r2, [pc, #116]	; (1e374 <_adc_set_config+0x390>)
   1e300:	4293      	cmp	r3, r2
   1e302:	dc04      	bgt.n	1e30e <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1e304:	683b      	ldr	r3, [r7, #0]
   1e306:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   1e308:	4a1a      	ldr	r2, [pc, #104]	; (1e374 <_adc_set_config+0x390>)
   1e30a:	4293      	cmp	r3, r2
   1e30c:	dd48      	ble.n	1e3a0 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e30e:	2317      	movs	r3, #23
   1e310:	e0eb      	b.n	1e4ea <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1e312:	683b      	ldr	r3, [r7, #0]
   1e314:	7cdb      	ldrb	r3, [r3, #19]
   1e316:	2b00      	cmp	r3, #0
   1e318:	d032      	beq.n	1e380 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   1e31a:	683b      	ldr	r3, [r7, #0]
   1e31c:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1e31e:	4a16      	ldr	r2, [pc, #88]	; (1e378 <_adc_set_config+0x394>)
   1e320:	4293      	cmp	r3, r2
   1e322:	dc0e      	bgt.n	1e342 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1e324:	683b      	ldr	r3, [r7, #0]
   1e326:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   1e328:	4a14      	ldr	r2, [pc, #80]	; (1e37c <_adc_set_config+0x398>)
   1e32a:	4293      	cmp	r3, r2
   1e32c:	db09      	blt.n	1e342 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   1e32e:	683b      	ldr	r3, [r7, #0]
   1e330:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1e332:	4a11      	ldr	r2, [pc, #68]	; (1e378 <_adc_set_config+0x394>)
   1e334:	4293      	cmp	r3, r2
   1e336:	dc04      	bgt.n	1e342 <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   1e338:	683b      	ldr	r3, [r7, #0]
   1e33a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   1e33c:	4a0f      	ldr	r2, [pc, #60]	; (1e37c <_adc_set_config+0x398>)
   1e33e:	4293      	cmp	r3, r2
   1e340:	da1e      	bge.n	1e380 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e342:	2317      	movs	r3, #23
   1e344:	e0d1      	b.n	1e4ea <_adc_set_config+0x506>
   1e346:	46c0      	nop			; (mov r8, r8)
   1e348:	0001ddbd 	.word	0x0001ddbd
   1e34c:	00025215 	.word	0x00025215
   1e350:	00025259 	.word	0x00025259
   1e354:	0001df6d 	.word	0x0001df6d
   1e358:	0002b3c4 	.word	0x0002b3c4
   1e35c:	0001de99 	.word	0x0001de99
   1e360:	000001ff 	.word	0x000001ff
   1e364:	fffffe00 	.word	0xfffffe00
   1e368:	000003ff 	.word	0x000003ff
   1e36c:	000007ff 	.word	0x000007ff
   1e370:	fffff800 	.word	0xfffff800
   1e374:	00000fff 	.word	0x00000fff
   1e378:	00007fff 	.word	0x00007fff
   1e37c:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   1e380:	683b      	ldr	r3, [r7, #0]
   1e382:	69db      	ldr	r3, [r3, #28]
   1e384:	4a5b      	ldr	r2, [pc, #364]	; (1e4f4 <_adc_set_config+0x510>)
   1e386:	4293      	cmp	r3, r2
   1e388:	dc04      	bgt.n	1e394 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   1e38a:	683b      	ldr	r3, [r7, #0]
   1e38c:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   1e38e:	4a59      	ldr	r2, [pc, #356]	; (1e4f4 <_adc_set_config+0x510>)
   1e390:	4293      	cmp	r3, r2
   1e392:	dd07      	ble.n	1e3a4 <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1e394:	2317      	movs	r3, #23
   1e396:	e0a8      	b.n	1e4ea <_adc_set_config+0x506>
			break;
   1e398:	46c0      	nop			; (mov r8, r8)
   1e39a:	e004      	b.n	1e3a6 <_adc_set_config+0x3c2>
			break;
   1e39c:	46c0      	nop			; (mov r8, r8)
   1e39e:	e002      	b.n	1e3a6 <_adc_set_config+0x3c2>
			break;
   1e3a0:	46c0      	nop			; (mov r8, r8)
   1e3a2:	e000      	b.n	1e3a6 <_adc_set_config+0x3c2>
			}
			break;
   1e3a4:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   1e3a6:	46c0      	nop			; (mov r8, r8)
   1e3a8:	687b      	ldr	r3, [r7, #4]
   1e3aa:	0018      	movs	r0, r3
   1e3ac:	4b52      	ldr	r3, [pc, #328]	; (1e4f8 <_adc_set_config+0x514>)
   1e3ae:	4798      	blx	r3
   1e3b0:	1e03      	subs	r3, r0, #0
   1e3b2:	d1f9      	bne.n	1e3a8 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1e3b4:	683b      	ldr	r3, [r7, #0]
   1e3b6:	7e1a      	ldrb	r2, [r3, #24]
   1e3b8:	693b      	ldr	r3, [r7, #16]
   1e3ba:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   1e3bc:	46c0      	nop			; (mov r8, r8)
   1e3be:	687b      	ldr	r3, [r7, #4]
   1e3c0:	0018      	movs	r0, r3
   1e3c2:	4b4d      	ldr	r3, [pc, #308]	; (1e4f8 <_adc_set_config+0x514>)
   1e3c4:	4798      	blx	r3
   1e3c6:	1e03      	subs	r3, r0, #0
   1e3c8:	d1f9      	bne.n	1e3be <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   1e3ca:	683b      	ldr	r3, [r7, #0]
   1e3cc:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   1e3ce:	b29a      	uxth	r2, r3
   1e3d0:	693b      	ldr	r3, [r7, #16]
   1e3d2:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1e3d4:	46c0      	nop			; (mov r8, r8)
   1e3d6:	687b      	ldr	r3, [r7, #4]
   1e3d8:	0018      	movs	r0, r3
   1e3da:	4b47      	ldr	r3, [pc, #284]	; (1e4f8 <_adc_set_config+0x514>)
   1e3dc:	4798      	blx	r3
   1e3de:	1e03      	subs	r3, r0, #0
   1e3e0:	d1f9      	bne.n	1e3d6 <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1e3e2:	683b      	ldr	r3, [r7, #0]
   1e3e4:	6a1b      	ldr	r3, [r3, #32]
   1e3e6:	b29a      	uxth	r2, r3
   1e3e8:	693b      	ldr	r3, [r7, #16]
   1e3ea:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   1e3ec:	2314      	movs	r3, #20
   1e3ee:	18fb      	adds	r3, r7, r3
   1e3f0:	683a      	ldr	r2, [r7, #0]
   1e3f2:	212c      	movs	r1, #44	; 0x2c
   1e3f4:	5c52      	ldrb	r2, [r2, r1]
   1e3f6:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   1e3f8:	2314      	movs	r3, #20
   1e3fa:	18fb      	adds	r3, r7, r3
   1e3fc:	781b      	ldrb	r3, [r3, #0]
   1e3fe:	2b00      	cmp	r3, #0
   1e400:	d006      	beq.n	1e410 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1e402:	2314      	movs	r3, #20
   1e404:	18fb      	adds	r3, r7, r3
   1e406:	781a      	ldrb	r2, [r3, #0]
   1e408:	2314      	movs	r3, #20
   1e40a:	18fb      	adds	r3, r7, r3
   1e40c:	3a01      	subs	r2, #1
   1e40e:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1e410:	2314      	movs	r3, #20
   1e412:	18fb      	adds	r3, r7, r3
   1e414:	781b      	ldrb	r3, [r3, #0]
   1e416:	2b0f      	cmp	r3, #15
   1e418:	d804      	bhi.n	1e424 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   1e41a:	683b      	ldr	r3, [r7, #0]
   1e41c:	222b      	movs	r2, #43	; 0x2b
   1e41e:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   1e420:	2b0f      	cmp	r3, #15
   1e422:	d901      	bls.n	1e428 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1e424:	2317      	movs	r3, #23
   1e426:	e060      	b.n	1e4ea <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   1e428:	46c0      	nop			; (mov r8, r8)
   1e42a:	687b      	ldr	r3, [r7, #4]
   1e42c:	0018      	movs	r0, r3
   1e42e:	4b32      	ldr	r3, [pc, #200]	; (1e4f8 <_adc_set_config+0x514>)
   1e430:	4798      	blx	r3
   1e432:	1e03      	subs	r3, r0, #0
   1e434:	d1f9      	bne.n	1e42a <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1e436:	683b      	ldr	r3, [r7, #0]
   1e438:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   1e43a:	683a      	ldr	r2, [r7, #0]
   1e43c:	212b      	movs	r1, #43	; 0x2b
   1e43e:	5c52      	ldrb	r2, [r2, r1]
   1e440:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1e442:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1e444:	2214      	movs	r2, #20
   1e446:	18ba      	adds	r2, r7, r2
   1e448:	7812      	ldrb	r2, [r2, #0]
   1e44a:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   1e44c:	4313      	orrs	r3, r2
			config->negative_input |
   1e44e:	683a      	ldr	r2, [r7, #0]
   1e450:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1e452:	4313      	orrs	r3, r2
			config->positive_input;
   1e454:	683a      	ldr	r2, [r7, #0]
   1e456:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   1e458:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   1e45a:	693b      	ldr	r3, [r7, #16]
   1e45c:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   1e45e:	683b      	ldr	r3, [r7, #0]
   1e460:	222a      	movs	r2, #42	; 0x2a
   1e462:	5c9a      	ldrb	r2, [r3, r2]
   1e464:	693b      	ldr	r3, [r7, #16]
   1e466:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   1e468:	693b      	ldr	r3, [r7, #16]
   1e46a:	220f      	movs	r2, #15
   1e46c:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   1e46e:	683b      	ldr	r3, [r7, #0]
   1e470:	2224      	movs	r2, #36	; 0x24
   1e472:	5c9b      	ldrb	r3, [r3, r2]
   1e474:	2b00      	cmp	r3, #0
   1e476:	d01e      	beq.n	1e4b6 <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   1e478:	683b      	ldr	r3, [r7, #0]
   1e47a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1e47c:	4a1f      	ldr	r2, [pc, #124]	; (1e4fc <_adc_set_config+0x518>)
   1e47e:	4293      	cmp	r3, r2
   1e480:	d901      	bls.n	1e486 <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   1e482:	2317      	movs	r3, #23
   1e484:	e031      	b.n	1e4ea <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   1e486:	683b      	ldr	r3, [r7, #0]
   1e488:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1e48a:	693b      	ldr	r3, [r7, #16]
   1e48c:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   1e48e:	683b      	ldr	r3, [r7, #0]
   1e490:	2228      	movs	r2, #40	; 0x28
   1e492:	5e9b      	ldrsh	r3, [r3, r2]
   1e494:	4a1a      	ldr	r2, [pc, #104]	; (1e500 <_adc_set_config+0x51c>)
   1e496:	4293      	cmp	r3, r2
   1e498:	dc05      	bgt.n	1e4a6 <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   1e49a:	683b      	ldr	r3, [r7, #0]
   1e49c:	2228      	movs	r2, #40	; 0x28
   1e49e:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   1e4a0:	4a18      	ldr	r2, [pc, #96]	; (1e504 <_adc_set_config+0x520>)
   1e4a2:	4293      	cmp	r3, r2
   1e4a4:	da01      	bge.n	1e4aa <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   1e4a6:	2317      	movs	r3, #23
   1e4a8:	e01f      	b.n	1e4ea <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   1e4aa:	683b      	ldr	r3, [r7, #0]
   1e4ac:	2228      	movs	r2, #40	; 0x28
   1e4ae:	5e9b      	ldrsh	r3, [r3, r2]
   1e4b0:	b29a      	uxth	r2, r3
   1e4b2:	693b      	ldr	r3, [r7, #16]
   1e4b4:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1e4b6:	4b14      	ldr	r3, [pc, #80]	; (1e508 <_adc_set_config+0x524>)
   1e4b8:	681b      	ldr	r3, [r3, #0]
   1e4ba:	08db      	lsrs	r3, r3, #3
   1e4bc:	b29b      	uxth	r3, r3
   1e4be:	021b      	lsls	r3, r3, #8
   1e4c0:	b29a      	uxth	r2, r3
   1e4c2:	23e0      	movs	r3, #224	; 0xe0
   1e4c4:	00db      	lsls	r3, r3, #3
   1e4c6:	4013      	ands	r3, r2
   1e4c8:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   1e4ca:	4b10      	ldr	r3, [pc, #64]	; (1e50c <_adc_set_config+0x528>)
   1e4cc:	685c      	ldr	r4, [r3, #4]
   1e4ce:	681b      	ldr	r3, [r3, #0]
   1e4d0:	0161      	lsls	r1, r4, #5
   1e4d2:	0edd      	lsrs	r5, r3, #27
   1e4d4:	430d      	orrs	r5, r1
   1e4d6:	0ee6      	lsrs	r6, r4, #27
   1e4d8:	b2ab      	uxth	r3, r5
   1e4da:	21ff      	movs	r1, #255	; 0xff
   1e4dc:	400b      	ands	r3, r1
   1e4de:	b29b      	uxth	r3, r3
			) |
   1e4e0:	4313      	orrs	r3, r2
   1e4e2:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1e4e4:	693b      	ldr	r3, [r7, #16]
   1e4e6:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   1e4e8:	2300      	movs	r3, #0
}
   1e4ea:	0018      	movs	r0, r3
   1e4ec:	46bd      	mov	sp, r7
   1e4ee:	b009      	add	sp, #36	; 0x24
   1e4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e4f2:	46c0      	nop			; (mov r8, r8)
   1e4f4:	0000ffff 	.word	0x0000ffff
   1e4f8:	0001de99 	.word	0x0001de99
   1e4fc:	00000fff 	.word	0x00000fff
   1e500:	000007ff 	.word	0x000007ff
   1e504:	fffff800 	.word	0xfffff800
   1e508:	00806024 	.word	0x00806024
   1e50c:	00806020 	.word	0x00806020

0001e510 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   1e510:	b580      	push	{r7, lr}
   1e512:	b086      	sub	sp, #24
   1e514:	af00      	add	r7, sp, #0
   1e516:	60f8      	str	r0, [r7, #12]
   1e518:	60b9      	str	r1, [r7, #8]
   1e51a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   1e51c:	68fb      	ldr	r3, [r7, #12]
   1e51e:	68ba      	ldr	r2, [r7, #8]
   1e520:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1e522:	2380      	movs	r3, #128	; 0x80
   1e524:	025b      	lsls	r3, r3, #9
   1e526:	0019      	movs	r1, r3
   1e528:	2002      	movs	r0, #2
   1e52a:	4b32      	ldr	r3, [pc, #200]	; (1e5f4 <adc_init+0xe4>)
   1e52c:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   1e52e:	68bb      	ldr	r3, [r7, #8]
   1e530:	781b      	ldrb	r3, [r3, #0]
   1e532:	b2db      	uxtb	r3, r3
   1e534:	001a      	movs	r2, r3
   1e536:	2301      	movs	r3, #1
   1e538:	4013      	ands	r3, r2
   1e53a:	d001      	beq.n	1e540 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   1e53c:	2305      	movs	r3, #5
   1e53e:	e055      	b.n	1e5ec <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   1e540:	68bb      	ldr	r3, [r7, #8]
   1e542:	781b      	ldrb	r3, [r3, #0]
   1e544:	b2db      	uxtb	r3, r3
   1e546:	001a      	movs	r2, r3
   1e548:	2302      	movs	r3, #2
   1e54a:	4013      	ands	r3, r2
   1e54c:	d001      	beq.n	1e552 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   1e54e:	231c      	movs	r3, #28
   1e550:	e04c      	b.n	1e5ec <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   1e552:	687b      	ldr	r3, [r7, #4]
   1e554:	785a      	ldrb	r2, [r3, #1]
   1e556:	68fb      	ldr	r3, [r7, #12]
   1e558:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   1e55a:	68fb      	ldr	r3, [r7, #12]
   1e55c:	791b      	ldrb	r3, [r3, #4]
   1e55e:	2b00      	cmp	r3, #0
   1e560:	d102      	bne.n	1e568 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   1e562:	2001      	movs	r0, #1
   1e564:	4b24      	ldr	r3, [pc, #144]	; (1e5f8 <adc_init+0xe8>)
   1e566:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1e568:	2317      	movs	r3, #23
   1e56a:	18fb      	adds	r3, r7, r3
   1e56c:	2200      	movs	r2, #0
   1e56e:	701a      	strb	r2, [r3, #0]
   1e570:	e00e      	b.n	1e590 <adc_init+0x80>
		module_inst->callback[i] = NULL;
   1e572:	2317      	movs	r3, #23
   1e574:	18fb      	adds	r3, r7, r3
   1e576:	781a      	ldrb	r2, [r3, #0]
   1e578:	68fb      	ldr	r3, [r7, #12]
   1e57a:	3202      	adds	r2, #2
   1e57c:	0092      	lsls	r2, r2, #2
   1e57e:	2100      	movs	r1, #0
   1e580:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   1e582:	2317      	movs	r3, #23
   1e584:	18fb      	adds	r3, r7, r3
   1e586:	781a      	ldrb	r2, [r3, #0]
   1e588:	2317      	movs	r3, #23
   1e58a:	18fb      	adds	r3, r7, r3
   1e58c:	3201      	adds	r2, #1
   1e58e:	701a      	strb	r2, [r3, #0]
   1e590:	2317      	movs	r3, #23
   1e592:	18fb      	adds	r3, r7, r3
   1e594:	781b      	ldrb	r3, [r3, #0]
   1e596:	2b02      	cmp	r3, #2
   1e598:	d9eb      	bls.n	1e572 <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   1e59a:	68fb      	ldr	r3, [r7, #12]
   1e59c:	2200      	movs	r2, #0
   1e59e:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   1e5a0:	68fb      	ldr	r3, [r7, #12]
   1e5a2:	2200      	movs	r2, #0
   1e5a4:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   1e5a6:	68fb      	ldr	r3, [r7, #12]
   1e5a8:	2200      	movs	r2, #0
   1e5aa:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   1e5ac:	68fb      	ldr	r3, [r7, #12]
   1e5ae:	2200      	movs	r2, #0
   1e5b0:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1e5b2:	4b12      	ldr	r3, [pc, #72]	; (1e5fc <adc_init+0xec>)
   1e5b4:	68fa      	ldr	r2, [r7, #12]
   1e5b6:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1e5b8:	687b      	ldr	r3, [r7, #4]
   1e5ba:	222a      	movs	r2, #42	; 0x2a
   1e5bc:	5c9b      	ldrb	r3, [r3, r2]
   1e5be:	2b00      	cmp	r3, #0
   1e5c0:	d10a      	bne.n	1e5d8 <adc_init+0xc8>
			!config->freerunning) {
   1e5c2:	687b      	ldr	r3, [r7, #4]
   1e5c4:	7d1b      	ldrb	r3, [r3, #20]
   1e5c6:	2201      	movs	r2, #1
   1e5c8:	4053      	eors	r3, r2
   1e5ca:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   1e5cc:	2b00      	cmp	r3, #0
   1e5ce:	d003      	beq.n	1e5d8 <adc_init+0xc8>
		module_inst->software_trigger = true;
   1e5d0:	68fb      	ldr	r3, [r7, #12]
   1e5d2:	2201      	movs	r2, #1
   1e5d4:	775a      	strb	r2, [r3, #29]
   1e5d6:	e002      	b.n	1e5de <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   1e5d8:	68fb      	ldr	r3, [r7, #12]
   1e5da:	2200      	movs	r2, #0
   1e5dc:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   1e5de:	687a      	ldr	r2, [r7, #4]
   1e5e0:	68fb      	ldr	r3, [r7, #12]
   1e5e2:	0011      	movs	r1, r2
   1e5e4:	0018      	movs	r0, r3
   1e5e6:	4b06      	ldr	r3, [pc, #24]	; (1e600 <adc_init+0xf0>)
   1e5e8:	4798      	blx	r3
   1e5ea:	0003      	movs	r3, r0
}
   1e5ec:	0018      	movs	r0, r3
   1e5ee:	46bd      	mov	sp, r7
   1e5f0:	b006      	add	sp, #24
   1e5f2:	bd80      	pop	{r7, pc}
   1e5f4:	0001ddd5 	.word	0x0001ddd5
   1e5f8:	0001de59 	.word	0x0001de59
   1e5fc:	20000aac 	.word	0x20000aac
   1e600:	0001dfe5 	.word	0x0001dfe5

0001e604 <adc_is_syncing>:
{
   1e604:	b580      	push	{r7, lr}
   1e606:	b084      	sub	sp, #16
   1e608:	af00      	add	r7, sp, #0
   1e60a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1e60c:	687b      	ldr	r3, [r7, #4]
   1e60e:	681b      	ldr	r3, [r3, #0]
   1e610:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1e612:	68fb      	ldr	r3, [r7, #12]
   1e614:	7e5b      	ldrb	r3, [r3, #25]
   1e616:	b2db      	uxtb	r3, r3
   1e618:	b25b      	sxtb	r3, r3
   1e61a:	2b00      	cmp	r3, #0
   1e61c:	da01      	bge.n	1e622 <adc_is_syncing+0x1e>
		return true;
   1e61e:	2301      	movs	r3, #1
   1e620:	e000      	b.n	1e624 <adc_is_syncing+0x20>
	return false;
   1e622:	2300      	movs	r3, #0
}
   1e624:	0018      	movs	r0, r3
   1e626:	46bd      	mov	sp, r7
   1e628:	b004      	add	sp, #16
   1e62a:	bd80      	pop	{r7, pc}

0001e62c <adc_start_conversion>:
{
   1e62c:	b580      	push	{r7, lr}
   1e62e:	b084      	sub	sp, #16
   1e630:	af00      	add	r7, sp, #0
   1e632:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1e634:	687b      	ldr	r3, [r7, #4]
   1e636:	681b      	ldr	r3, [r3, #0]
   1e638:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1e63a:	46c0      	nop			; (mov r8, r8)
   1e63c:	687b      	ldr	r3, [r7, #4]
   1e63e:	0018      	movs	r0, r3
   1e640:	4b0b      	ldr	r3, [pc, #44]	; (1e670 <adc_start_conversion+0x44>)
   1e642:	4798      	blx	r3
   1e644:	1e03      	subs	r3, r0, #0
   1e646:	d1f9      	bne.n	1e63c <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1e648:	68fb      	ldr	r3, [r7, #12]
   1e64a:	7b1b      	ldrb	r3, [r3, #12]
   1e64c:	b2db      	uxtb	r3, r3
   1e64e:	2202      	movs	r2, #2
   1e650:	4313      	orrs	r3, r2
   1e652:	b2da      	uxtb	r2, r3
   1e654:	68fb      	ldr	r3, [r7, #12]
   1e656:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   1e658:	46c0      	nop			; (mov r8, r8)
   1e65a:	687b      	ldr	r3, [r7, #4]
   1e65c:	0018      	movs	r0, r3
   1e65e:	4b04      	ldr	r3, [pc, #16]	; (1e670 <adc_start_conversion+0x44>)
   1e660:	4798      	blx	r3
   1e662:	1e03      	subs	r3, r0, #0
   1e664:	d1f9      	bne.n	1e65a <adc_start_conversion+0x2e>
}
   1e666:	46c0      	nop			; (mov r8, r8)
   1e668:	46bd      	mov	sp, r7
   1e66a:	b004      	add	sp, #16
   1e66c:	bd80      	pop	{r7, pc}
   1e66e:	46c0      	nop			; (mov r8, r8)
   1e670:	0001e605 	.word	0x0001e605

0001e674 <adc_enable_interrupt>:
{
   1e674:	b580      	push	{r7, lr}
   1e676:	b084      	sub	sp, #16
   1e678:	af00      	add	r7, sp, #0
   1e67a:	6078      	str	r0, [r7, #4]
   1e67c:	000a      	movs	r2, r1
   1e67e:	1cfb      	adds	r3, r7, #3
   1e680:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
   1e682:	687b      	ldr	r3, [r7, #4]
   1e684:	681b      	ldr	r3, [r3, #0]
   1e686:	60fb      	str	r3, [r7, #12]
	adc_module->INTENSET.reg = interrupt;
   1e688:	68fb      	ldr	r3, [r7, #12]
   1e68a:	1cfa      	adds	r2, r7, #3
   1e68c:	7812      	ldrb	r2, [r2, #0]
   1e68e:	75da      	strb	r2, [r3, #23]
}
   1e690:	46c0      	nop			; (mov r8, r8)
   1e692:	46bd      	mov	sp, r7
   1e694:	b004      	add	sp, #16
   1e696:	bd80      	pop	{r7, pc}

0001e698 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   1e698:	b580      	push	{r7, lr}
   1e69a:	b084      	sub	sp, #16
   1e69c:	af00      	add	r7, sp, #0
   1e69e:	6078      	str	r0, [r7, #4]
   1e6a0:	000a      	movs	r2, r1
   1e6a2:	1cfb      	adds	r3, r7, #3
   1e6a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1e6a6:	687b      	ldr	r3, [r7, #4]
   1e6a8:	681b      	ldr	r3, [r3, #0]
   1e6aa:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   1e6ac:	68fb      	ldr	r3, [r7, #12]
   1e6ae:	1cfa      	adds	r2, r7, #3
   1e6b0:	7812      	ldrb	r2, [r2, #0]
   1e6b2:	759a      	strb	r2, [r3, #22]
}
   1e6b4:	46c0      	nop			; (mov r8, r8)
   1e6b6:	46bd      	mov	sp, r7
   1e6b8:	b004      	add	sp, #16
   1e6ba:	bd80      	pop	{r7, pc}

0001e6bc <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   1e6bc:	b580      	push	{r7, lr}
   1e6be:	b084      	sub	sp, #16
   1e6c0:	af00      	add	r7, sp, #0
   1e6c2:	0002      	movs	r2, r0
   1e6c4:	1dfb      	adds	r3, r7, #7
   1e6c6:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   1e6c8:	1dfb      	adds	r3, r7, #7
   1e6ca:	781a      	ldrb	r2, [r3, #0]
   1e6cc:	4b47      	ldr	r3, [pc, #284]	; (1e7ec <_adc_interrupt_handler+0x130>)
   1e6ce:	0092      	lsls	r2, r2, #2
   1e6d0:	58d3      	ldr	r3, [r2, r3]
   1e6d2:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   1e6d4:	68fb      	ldr	r3, [r7, #12]
   1e6d6:	681b      	ldr	r3, [r3, #0]
   1e6d8:	7e1b      	ldrb	r3, [r3, #24]
   1e6da:	b2da      	uxtb	r2, r3
   1e6dc:	68fb      	ldr	r3, [r7, #12]
   1e6de:	681b      	ldr	r3, [r3, #0]
   1e6e0:	7ddb      	ldrb	r3, [r3, #23]
   1e6e2:	b2db      	uxtb	r3, r3
   1e6e4:	4013      	ands	r3, r2
   1e6e6:	b2db      	uxtb	r3, r3
   1e6e8:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   1e6ea:	68bb      	ldr	r3, [r7, #8]
   1e6ec:	2201      	movs	r2, #1
   1e6ee:	4013      	ands	r3, r2
   1e6f0:	d045      	beq.n	1e77e <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1e6f2:	68fb      	ldr	r3, [r7, #12]
   1e6f4:	681b      	ldr	r3, [r3, #0]
   1e6f6:	2201      	movs	r2, #1
   1e6f8:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   1e6fa:	46c0      	nop			; (mov r8, r8)
   1e6fc:	68fb      	ldr	r3, [r7, #12]
   1e6fe:	0018      	movs	r0, r3
   1e700:	4b3b      	ldr	r3, [pc, #236]	; (1e7f0 <_adc_interrupt_handler+0x134>)
   1e702:	4798      	blx	r3
   1e704:	1e03      	subs	r3, r0, #0
   1e706:	d1f9      	bne.n	1e6fc <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   1e708:	68fb      	ldr	r3, [r7, #12]
   1e70a:	695b      	ldr	r3, [r3, #20]
   1e70c:	1c99      	adds	r1, r3, #2
   1e70e:	68fa      	ldr	r2, [r7, #12]
   1e710:	6151      	str	r1, [r2, #20]
   1e712:	68fa      	ldr	r2, [r7, #12]
   1e714:	6812      	ldr	r2, [r2, #0]
   1e716:	8b52      	ldrh	r2, [r2, #26]
   1e718:	b292      	uxth	r2, r2
   1e71a:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   1e71c:	68fb      	ldr	r3, [r7, #12]
   1e71e:	8b1b      	ldrh	r3, [r3, #24]
   1e720:	b29b      	uxth	r3, r3
   1e722:	3b01      	subs	r3, #1
   1e724:	b29b      	uxth	r3, r3
   1e726:	68fa      	ldr	r2, [r7, #12]
   1e728:	1c19      	adds	r1, r3, #0
   1e72a:	8311      	strh	r1, [r2, #24]
   1e72c:	2b00      	cmp	r3, #0
   1e72e:	d008      	beq.n	1e742 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1e730:	68fb      	ldr	r3, [r7, #12]
   1e732:	7f5b      	ldrb	r3, [r3, #29]
   1e734:	2b00      	cmp	r3, #0
   1e736:	d022      	beq.n	1e77e <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   1e738:	68fb      	ldr	r3, [r7, #12]
   1e73a:	0018      	movs	r0, r3
   1e73c:	4b2d      	ldr	r3, [pc, #180]	; (1e7f4 <_adc_interrupt_handler+0x138>)
   1e73e:	4798      	blx	r3
   1e740:	e01d      	b.n	1e77e <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1e742:	68fb      	ldr	r3, [r7, #12]
   1e744:	2101      	movs	r1, #1
   1e746:	0018      	movs	r0, r3
   1e748:	4b2b      	ldr	r3, [pc, #172]	; (1e7f8 <_adc_interrupt_handler+0x13c>)
   1e74a:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   1e74c:	68fb      	ldr	r3, [r7, #12]
   1e74e:	7f1b      	ldrb	r3, [r3, #28]
   1e750:	b2db      	uxtb	r3, r3
   1e752:	2b05      	cmp	r3, #5
   1e754:	d113      	bne.n	1e77e <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   1e756:	68fb      	ldr	r3, [r7, #12]
   1e758:	2200      	movs	r2, #0
   1e75a:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   1e75c:	68fb      	ldr	r3, [r7, #12]
   1e75e:	7edb      	ldrb	r3, [r3, #27]
   1e760:	001a      	movs	r2, r3
   1e762:	2301      	movs	r3, #1
   1e764:	4013      	ands	r3, r2
   1e766:	d00a      	beq.n	1e77e <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   1e768:	68fb      	ldr	r3, [r7, #12]
   1e76a:	7e9b      	ldrb	r3, [r3, #26]
   1e76c:	001a      	movs	r2, r3
   1e76e:	2301      	movs	r3, #1
   1e770:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1e772:	d004      	beq.n	1e77e <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   1e774:	68fb      	ldr	r3, [r7, #12]
   1e776:	689b      	ldr	r3, [r3, #8]
   1e778:	68fa      	ldr	r2, [r7, #12]
   1e77a:	0010      	movs	r0, r2
   1e77c:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1e77e:	68bb      	ldr	r3, [r7, #8]
   1e780:	2204      	movs	r2, #4
   1e782:	4013      	ands	r3, r2
   1e784:	d014      	beq.n	1e7b0 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1e786:	68fb      	ldr	r3, [r7, #12]
   1e788:	681b      	ldr	r3, [r3, #0]
   1e78a:	2204      	movs	r2, #4
   1e78c:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1e78e:	68fb      	ldr	r3, [r7, #12]
   1e790:	7edb      	ldrb	r3, [r3, #27]
   1e792:	001a      	movs	r2, r3
   1e794:	2302      	movs	r3, #2
   1e796:	4013      	ands	r3, r2
   1e798:	d00a      	beq.n	1e7b0 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   1e79a:	68fb      	ldr	r3, [r7, #12]
   1e79c:	7e9b      	ldrb	r3, [r3, #26]
   1e79e:	001a      	movs	r2, r3
   1e7a0:	2302      	movs	r3, #2
   1e7a2:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1e7a4:	d004      	beq.n	1e7b0 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   1e7a6:	68fb      	ldr	r3, [r7, #12]
   1e7a8:	68db      	ldr	r3, [r3, #12]
   1e7aa:	68fa      	ldr	r2, [r7, #12]
   1e7ac:	0010      	movs	r0, r2
   1e7ae:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1e7b0:	68bb      	ldr	r3, [r7, #8]
   1e7b2:	2202      	movs	r2, #2
   1e7b4:	4013      	ands	r3, r2
   1e7b6:	d014      	beq.n	1e7e2 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1e7b8:	68fb      	ldr	r3, [r7, #12]
   1e7ba:	681b      	ldr	r3, [r3, #0]
   1e7bc:	2202      	movs	r2, #2
   1e7be:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1e7c0:	68fb      	ldr	r3, [r7, #12]
   1e7c2:	7edb      	ldrb	r3, [r3, #27]
   1e7c4:	001a      	movs	r2, r3
   1e7c6:	2304      	movs	r3, #4
   1e7c8:	4013      	ands	r3, r2
   1e7ca:	d00a      	beq.n	1e7e2 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   1e7cc:	68fb      	ldr	r3, [r7, #12]
   1e7ce:	7e9b      	ldrb	r3, [r3, #26]
   1e7d0:	001a      	movs	r2, r3
   1e7d2:	2304      	movs	r3, #4
   1e7d4:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   1e7d6:	d004      	beq.n	1e7e2 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   1e7d8:	68fb      	ldr	r3, [r7, #12]
   1e7da:	691b      	ldr	r3, [r3, #16]
   1e7dc:	68fa      	ldr	r2, [r7, #12]
   1e7de:	0010      	movs	r0, r2
   1e7e0:	4798      	blx	r3
		}
	}
}
   1e7e2:	46c0      	nop			; (mov r8, r8)
   1e7e4:	46bd      	mov	sp, r7
   1e7e6:	b004      	add	sp, #16
   1e7e8:	bd80      	pop	{r7, pc}
   1e7ea:	46c0      	nop			; (mov r8, r8)
   1e7ec:	20000aac 	.word	0x20000aac
   1e7f0:	0001e605 	.word	0x0001e605
   1e7f4:	0001e62d 	.word	0x0001e62d
   1e7f8:	0001e699 	.word	0x0001e699

0001e7fc <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   1e7fc:	b580      	push	{r7, lr}
   1e7fe:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   1e800:	2000      	movs	r0, #0
   1e802:	4b02      	ldr	r3, [pc, #8]	; (1e80c <ADC_Handler+0x10>)
   1e804:	4798      	blx	r3
}
   1e806:	46c0      	nop			; (mov r8, r8)
   1e808:	46bd      	mov	sp, r7
   1e80a:	bd80      	pop	{r7, pc}
   1e80c:	0001e6bd 	.word	0x0001e6bd

0001e810 <adc_register_callback>:
 */
void adc_register_callback(
		struct adc_module *const module,
		adc_callback_t callback_func,
		enum adc_callback callback_type)
{
   1e810:	b580      	push	{r7, lr}
   1e812:	b084      	sub	sp, #16
   1e814:	af00      	add	r7, sp, #0
   1e816:	60f8      	str	r0, [r7, #12]
   1e818:	60b9      	str	r1, [r7, #8]
   1e81a:	1dfb      	adds	r3, r7, #7
   1e81c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1e81e:	1dfb      	adds	r3, r7, #7
   1e820:	781a      	ldrb	r2, [r3, #0]
   1e822:	68fb      	ldr	r3, [r7, #12]
   1e824:	3202      	adds	r2, #2
   1e826:	0092      	lsls	r2, r2, #2
   1e828:	68b9      	ldr	r1, [r7, #8]
   1e82a:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
   1e82c:	68fb      	ldr	r3, [r7, #12]
   1e82e:	7e9b      	ldrb	r3, [r3, #26]
   1e830:	b25a      	sxtb	r2, r3
   1e832:	1dfb      	adds	r3, r7, #7
   1e834:	781b      	ldrb	r3, [r3, #0]
   1e836:	2101      	movs	r1, #1
   1e838:	4099      	lsls	r1, r3
   1e83a:	000b      	movs	r3, r1
   1e83c:	b25b      	sxtb	r3, r3
   1e83e:	4313      	orrs	r3, r2
   1e840:	b25b      	sxtb	r3, r3
   1e842:	b2da      	uxtb	r2, r3
   1e844:	68fb      	ldr	r3, [r7, #12]
   1e846:	769a      	strb	r2, [r3, #26]
}
   1e848:	46c0      	nop			; (mov r8, r8)
   1e84a:	46bd      	mov	sp, r7
   1e84c:	b004      	add	sp, #16
   1e84e:	bd80      	pop	{r7, pc}

0001e850 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
   1e850:	b580      	push	{r7, lr}
   1e852:	b084      	sub	sp, #16
   1e854:	af00      	add	r7, sp, #0
   1e856:	60f8      	str	r0, [r7, #12]
   1e858:	60b9      	str	r1, [r7, #8]
   1e85a:	1dbb      	adds	r3, r7, #6
   1e85c:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
   1e85e:	68fb      	ldr	r3, [r7, #12]
   1e860:	8b1b      	ldrh	r3, [r3, #24]
   1e862:	b29b      	uxth	r3, r3
   1e864:	2b00      	cmp	r3, #0
   1e866:	d104      	bne.n	1e872 <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
   1e868:	68fb      	ldr	r3, [r7, #12]
   1e86a:	7f1b      	ldrb	r3, [r3, #28]
   1e86c:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
   1e86e:	2b05      	cmp	r3, #5
   1e870:	d101      	bne.n	1e876 <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
   1e872:	2305      	movs	r3, #5
   1e874:	e017      	b.n	1e8a6 <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
   1e876:	68fb      	ldr	r3, [r7, #12]
   1e878:	2205      	movs	r2, #5
   1e87a:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
   1e87c:	68fb      	ldr	r3, [r7, #12]
   1e87e:	1dba      	adds	r2, r7, #6
   1e880:	8812      	ldrh	r2, [r2, #0]
   1e882:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
   1e884:	68fb      	ldr	r3, [r7, #12]
   1e886:	68ba      	ldr	r2, [r7, #8]
   1e888:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
   1e88a:	68fb      	ldr	r3, [r7, #12]
   1e88c:	2101      	movs	r1, #1
   1e88e:	0018      	movs	r0, r3
   1e890:	4b07      	ldr	r3, [pc, #28]	; (1e8b0 <adc_read_buffer_job+0x60>)
   1e892:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
   1e894:	68fb      	ldr	r3, [r7, #12]
   1e896:	7f5b      	ldrb	r3, [r3, #29]
   1e898:	2b00      	cmp	r3, #0
   1e89a:	d003      	beq.n	1e8a4 <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
   1e89c:	68fb      	ldr	r3, [r7, #12]
   1e89e:	0018      	movs	r0, r3
   1e8a0:	4b04      	ldr	r3, [pc, #16]	; (1e8b4 <adc_read_buffer_job+0x64>)
   1e8a2:	4798      	blx	r3
	}

	return STATUS_OK;
   1e8a4:	2300      	movs	r3, #0
}
   1e8a6:	0018      	movs	r0, r3
   1e8a8:	46bd      	mov	sp, r7
   1e8aa:	b004      	add	sp, #16
   1e8ac:	bd80      	pop	{r7, pc}
   1e8ae:	46c0      	nop			; (mov r8, r8)
   1e8b0:	0001e675 	.word	0x0001e675
   1e8b4:	0001e62d 	.word	0x0001e62d

0001e8b8 <system_interrupt_disable>:
{
   1e8b8:	b580      	push	{r7, lr}
   1e8ba:	b082      	sub	sp, #8
   1e8bc:	af00      	add	r7, sp, #0
   1e8be:	0002      	movs	r2, r0
   1e8c0:	1dfb      	adds	r3, r7, #7
   1e8c2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e8c4:	4a07      	ldr	r2, [pc, #28]	; (1e8e4 <system_interrupt_disable+0x2c>)
   1e8c6:	1dfb      	adds	r3, r7, #7
   1e8c8:	781b      	ldrb	r3, [r3, #0]
   1e8ca:	0019      	movs	r1, r3
   1e8cc:	231f      	movs	r3, #31
   1e8ce:	400b      	ands	r3, r1
   1e8d0:	2101      	movs	r1, #1
   1e8d2:	4099      	lsls	r1, r3
   1e8d4:	000b      	movs	r3, r1
   1e8d6:	0019      	movs	r1, r3
   1e8d8:	2380      	movs	r3, #128	; 0x80
   1e8da:	50d1      	str	r1, [r2, r3]
}
   1e8dc:	46c0      	nop			; (mov r8, r8)
   1e8de:	46bd      	mov	sp, r7
   1e8e0:	b002      	add	sp, #8
   1e8e2:	bd80      	pop	{r7, pc}
   1e8e4:	e000e100 	.word	0xe000e100

0001e8e8 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1e8e8:	b580      	push	{r7, lr}
   1e8ea:	b084      	sub	sp, #16
   1e8ec:	af00      	add	r7, sp, #0
   1e8ee:	0002      	movs	r2, r0
   1e8f0:	1dfb      	adds	r3, r7, #7
   1e8f2:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   1e8f4:	1dfb      	adds	r3, r7, #7
   1e8f6:	781a      	ldrb	r2, [r3, #0]
   1e8f8:	4b37      	ldr	r3, [pc, #220]	; (1e9d8 <_dac_interrupt_handler+0xf0>)
   1e8fa:	0092      	lsls	r2, r2, #2
   1e8fc:	58d3      	ldr	r3, [r2, r3]
   1e8fe:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   1e900:	68fb      	ldr	r3, [r7, #12]
   1e902:	681b      	ldr	r3, [r3, #0]
   1e904:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1e906:	68bb      	ldr	r3, [r7, #8]
   1e908:	799b      	ldrb	r3, [r3, #6]
   1e90a:	b2db      	uxtb	r3, r3
   1e90c:	001a      	movs	r2, r3
   1e90e:	2301      	movs	r3, #1
   1e910:	4013      	ands	r3, r2
   1e912:	d00e      	beq.n	1e932 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   1e914:	68bb      	ldr	r3, [r7, #8]
   1e916:	2201      	movs	r2, #1
   1e918:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1e91a:	68fb      	ldr	r3, [r7, #12]
   1e91c:	3314      	adds	r3, #20
   1e91e:	2b00      	cmp	r3, #0
   1e920:	d007      	beq.n	1e932 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   1e922:	68fb      	ldr	r3, [r7, #12]
   1e924:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1e926:	2b00      	cmp	r3, #0
   1e928:	d003      	beq.n	1e932 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1e92a:	68fb      	ldr	r3, [r7, #12]
   1e92c:	699b      	ldr	r3, [r3, #24]
   1e92e:	2000      	movs	r0, #0
   1e930:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   1e932:	68bb      	ldr	r3, [r7, #8]
   1e934:	799b      	ldrb	r3, [r3, #6]
   1e936:	b2db      	uxtb	r3, r3
   1e938:	001a      	movs	r2, r3
   1e93a:	2302      	movs	r3, #2
   1e93c:	4013      	ands	r3, r2
   1e93e:	d047      	beq.n	1e9d0 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1e940:	68bb      	ldr	r3, [r7, #8]
   1e942:	2202      	movs	r2, #2
   1e944:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1e946:	68fb      	ldr	r3, [r7, #12]
   1e948:	899b      	ldrh	r3, [r3, #12]
   1e94a:	b29b      	uxth	r3, r3
   1e94c:	2b00      	cmp	r3, #0
   1e94e:	d033      	beq.n	1e9b8 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   1e950:	68fb      	ldr	r3, [r7, #12]
   1e952:	689a      	ldr	r2, [r3, #8]
   1e954:	68fb      	ldr	r3, [r7, #12]
   1e956:	89db      	ldrh	r3, [r3, #14]
   1e958:	b29b      	uxth	r3, r3
   1e95a:	1c59      	adds	r1, r3, #1
   1e95c:	b288      	uxth	r0, r1
   1e95e:	68f9      	ldr	r1, [r7, #12]
   1e960:	81c8      	strh	r0, [r1, #14]
   1e962:	005b      	lsls	r3, r3, #1
   1e964:	18d3      	adds	r3, r2, r3
   1e966:	881b      	ldrh	r3, [r3, #0]
   1e968:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   1e96a:	68bb      	ldr	r3, [r7, #8]
   1e96c:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   1e96e:	68fb      	ldr	r3, [r7, #12]
   1e970:	899b      	ldrh	r3, [r3, #12]
   1e972:	b29b      	uxth	r3, r3
   1e974:	3b01      	subs	r3, #1
   1e976:	b29a      	uxth	r2, r3
   1e978:	68fb      	ldr	r3, [r7, #12]
   1e97a:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   1e97c:	68fb      	ldr	r3, [r7, #12]
   1e97e:	899b      	ldrh	r3, [r3, #12]
   1e980:	b29b      	uxth	r3, r3
   1e982:	2b00      	cmp	r3, #0
   1e984:	d118      	bne.n	1e9b8 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1e986:	68fb      	ldr	r3, [r7, #12]
   1e988:	2220      	movs	r2, #32
   1e98a:	2100      	movs	r1, #0
   1e98c:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   1e98e:	68bb      	ldr	r3, [r7, #8]
   1e990:	2202      	movs	r2, #2
   1e992:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1e994:	68bb      	ldr	r3, [r7, #8]
   1e996:	2202      	movs	r2, #2
   1e998:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   1e99a:	2019      	movs	r0, #25
   1e99c:	4b0f      	ldr	r3, [pc, #60]	; (1e9dc <_dac_interrupt_handler+0xf4>)
   1e99e:	4798      	blx	r3

				if ((module->callback) &&
   1e9a0:	68fb      	ldr	r3, [r7, #12]
   1e9a2:	3314      	adds	r3, #20
   1e9a4:	2b00      	cmp	r3, #0
   1e9a6:	d007      	beq.n	1e9b8 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   1e9a8:	68fb      	ldr	r3, [r7, #12]
   1e9aa:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   1e9ac:	2b00      	cmp	r3, #0
   1e9ae:	d003      	beq.n	1e9b8 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1e9b0:	68fb      	ldr	r3, [r7, #12]
   1e9b2:	69db      	ldr	r3, [r3, #28]
   1e9b4:	2000      	movs	r0, #0
   1e9b6:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1e9b8:	68fb      	ldr	r3, [r7, #12]
   1e9ba:	3314      	adds	r3, #20
   1e9bc:	2b00      	cmp	r3, #0
   1e9be:	d007      	beq.n	1e9d0 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   1e9c0:	68fb      	ldr	r3, [r7, #12]
   1e9c2:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1e9c4:	2b00      	cmp	r3, #0
   1e9c6:	d003      	beq.n	1e9d0 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1e9c8:	68fb      	ldr	r3, [r7, #12]
   1e9ca:	695b      	ldr	r3, [r3, #20]
   1e9cc:	2000      	movs	r0, #0
   1e9ce:	4798      	blx	r3
		}
	}
}
   1e9d0:	46c0      	nop			; (mov r8, r8)
   1e9d2:	46bd      	mov	sp, r7
   1e9d4:	b004      	add	sp, #16
   1e9d6:	bd80      	pop	{r7, pc}
   1e9d8:	20000ab0 	.word	0x20000ab0
   1e9dc:	0001e8b9 	.word	0x0001e8b9

0001e9e0 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   1e9e0:	b580      	push	{r7, lr}
   1e9e2:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1e9e4:	2000      	movs	r0, #0
   1e9e6:	4b02      	ldr	r3, [pc, #8]	; (1e9f0 <DAC_Handler+0x10>)
   1e9e8:	4798      	blx	r3
}
   1e9ea:	46c0      	nop			; (mov r8, r8)
   1e9ec:	46bd      	mov	sp, r7
   1e9ee:	bd80      	pop	{r7, pc}
   1e9f0:	0001e8e9 	.word	0x0001e8e9

0001e9f4 <system_interrupt_enter_critical_section>:
{
   1e9f4:	b580      	push	{r7, lr}
   1e9f6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1e9f8:	4b02      	ldr	r3, [pc, #8]	; (1ea04 <system_interrupt_enter_critical_section+0x10>)
   1e9fa:	4798      	blx	r3
}
   1e9fc:	46c0      	nop			; (mov r8, r8)
   1e9fe:	46bd      	mov	sp, r7
   1ea00:	bd80      	pop	{r7, pc}
   1ea02:	46c0      	nop			; (mov r8, r8)
   1ea04:	0002445d 	.word	0x0002445d

0001ea08 <system_interrupt_leave_critical_section>:
{
   1ea08:	b580      	push	{r7, lr}
   1ea0a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1ea0c:	4b02      	ldr	r3, [pc, #8]	; (1ea18 <system_interrupt_leave_critical_section+0x10>)
   1ea0e:	4798      	blx	r3
}
   1ea10:	46c0      	nop			; (mov r8, r8)
   1ea12:	46bd      	mov	sp, r7
   1ea14:	bd80      	pop	{r7, pc}
   1ea16:	46c0      	nop			; (mov r8, r8)
   1ea18:	000244b1 	.word	0x000244b1

0001ea1c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   1ea1c:	b580      	push	{r7, lr}
   1ea1e:	b086      	sub	sp, #24
   1ea20:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   1ea22:	4b49      	ldr	r3, [pc, #292]	; (1eb48 <DMAC_Handler+0x12c>)
   1ea24:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1ea26:	4b49      	ldr	r3, [pc, #292]	; (1eb4c <DMAC_Handler+0x130>)
   1ea28:	8c1b      	ldrh	r3, [r3, #32]
   1ea2a:	b29b      	uxth	r3, r3
   1ea2c:	b2da      	uxtb	r2, r3
   1ea2e:	2317      	movs	r3, #23
   1ea30:	18fb      	adds	r3, r7, r3
   1ea32:	210f      	movs	r1, #15
   1ea34:	400a      	ands	r2, r1
   1ea36:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1ea38:	2317      	movs	r3, #23
   1ea3a:	18fb      	adds	r3, r7, r3
   1ea3c:	781a      	ldrb	r2, [r3, #0]
   1ea3e:	4b44      	ldr	r3, [pc, #272]	; (1eb50 <DMAC_Handler+0x134>)
   1ea40:	0092      	lsls	r2, r2, #2
   1ea42:	58d3      	ldr	r3, [r2, r3]
   1ea44:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1ea46:	4a41      	ldr	r2, [pc, #260]	; (1eb4c <DMAC_Handler+0x130>)
   1ea48:	693b      	ldr	r3, [r7, #16]
   1ea4a:	781b      	ldrb	r3, [r3, #0]
   1ea4c:	210f      	movs	r1, #15
   1ea4e:	400b      	ands	r3, r1
   1ea50:	b2d9      	uxtb	r1, r3
   1ea52:	233f      	movs	r3, #63	; 0x3f
   1ea54:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1ea56:	493d      	ldr	r1, [pc, #244]	; (1eb4c <DMAC_Handler+0x130>)
   1ea58:	230f      	movs	r3, #15
   1ea5a:	18fb      	adds	r3, r7, r3
   1ea5c:	224e      	movs	r2, #78	; 0x4e
   1ea5e:	5c8a      	ldrb	r2, [r1, r2]
   1ea60:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1ea62:	693b      	ldr	r3, [r7, #16]
   1ea64:	781b      	ldrb	r3, [r3, #0]
   1ea66:	4a3b      	ldr	r2, [pc, #236]	; (1eb54 <DMAC_Handler+0x138>)
   1ea68:	011b      	lsls	r3, r3, #4
   1ea6a:	18d3      	adds	r3, r2, r3
   1ea6c:	3302      	adds	r3, #2
   1ea6e:	881b      	ldrh	r3, [r3, #0]
   1ea70:	b29b      	uxth	r3, r3
   1ea72:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1ea74:	693b      	ldr	r3, [r7, #16]
   1ea76:	781b      	ldrb	r3, [r3, #0]
   1ea78:	4a37      	ldr	r2, [pc, #220]	; (1eb58 <DMAC_Handler+0x13c>)
   1ea7a:	011b      	lsls	r3, r3, #4
   1ea7c:	18d3      	adds	r3, r2, r3
   1ea7e:	3302      	adds	r3, #2
   1ea80:	881b      	ldrh	r3, [r3, #0]
   1ea82:	b29b      	uxth	r3, r3
   1ea84:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1ea86:	68ba      	ldr	r2, [r7, #8]
   1ea88:	687b      	ldr	r3, [r7, #4]
   1ea8a:	1ad2      	subs	r2, r2, r3
   1ea8c:	693b      	ldr	r3, [r7, #16]
   1ea8e:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1ea90:	230f      	movs	r3, #15
   1ea92:	18fb      	adds	r3, r7, r3
   1ea94:	781b      	ldrb	r3, [r3, #0]
   1ea96:	2201      	movs	r2, #1
   1ea98:	4013      	ands	r3, r2
   1ea9a:	d016      	beq.n	1eaca <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   1ea9c:	4a2b      	ldr	r2, [pc, #172]	; (1eb4c <DMAC_Handler+0x130>)
   1ea9e:	234e      	movs	r3, #78	; 0x4e
   1eaa0:	2101      	movs	r1, #1
   1eaa2:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1eaa4:	693b      	ldr	r3, [r7, #16]
   1eaa6:	2210      	movs	r2, #16
   1eaa8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1eaaa:	693b      	ldr	r3, [r7, #16]
   1eaac:	7c1b      	ldrb	r3, [r3, #16]
   1eaae:	001a      	movs	r2, r3
   1eab0:	2301      	movs	r3, #1
   1eab2:	4013      	ands	r3, r2
   1eab4:	d042      	beq.n	1eb3c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1eab6:	693b      	ldr	r3, [r7, #16]
   1eab8:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1eaba:	2b00      	cmp	r3, #0
   1eabc:	d03e      	beq.n	1eb3c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1eabe:	693b      	ldr	r3, [r7, #16]
   1eac0:	685b      	ldr	r3, [r3, #4]
   1eac2:	693a      	ldr	r2, [r7, #16]
   1eac4:	0010      	movs	r0, r2
   1eac6:	4798      	blx	r3
   1eac8:	e038      	b.n	1eb3c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1eaca:	230f      	movs	r3, #15
   1eacc:	18fb      	adds	r3, r7, r3
   1eace:	781b      	ldrb	r3, [r3, #0]
   1ead0:	2202      	movs	r2, #2
   1ead2:	4013      	ands	r3, r2
   1ead4:	d016      	beq.n	1eb04 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1ead6:	4a1d      	ldr	r2, [pc, #116]	; (1eb4c <DMAC_Handler+0x130>)
   1ead8:	234e      	movs	r3, #78	; 0x4e
   1eada:	2102      	movs	r1, #2
   1eadc:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1eade:	693b      	ldr	r3, [r7, #16]
   1eae0:	2200      	movs	r2, #0
   1eae2:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1eae4:	693b      	ldr	r3, [r7, #16]
   1eae6:	7c1b      	ldrb	r3, [r3, #16]
   1eae8:	001a      	movs	r2, r3
   1eaea:	2302      	movs	r3, #2
   1eaec:	4013      	ands	r3, r2
   1eaee:	d025      	beq.n	1eb3c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   1eaf0:	693b      	ldr	r3, [r7, #16]
   1eaf2:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1eaf4:	2b00      	cmp	r3, #0
   1eaf6:	d021      	beq.n	1eb3c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1eaf8:	693b      	ldr	r3, [r7, #16]
   1eafa:	689b      	ldr	r3, [r3, #8]
   1eafc:	693a      	ldr	r2, [r7, #16]
   1eafe:	0010      	movs	r0, r2
   1eb00:	4798      	blx	r3
   1eb02:	e01b      	b.n	1eb3c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   1eb04:	230f      	movs	r3, #15
   1eb06:	18fb      	adds	r3, r7, r3
   1eb08:	781b      	ldrb	r3, [r3, #0]
   1eb0a:	2204      	movs	r2, #4
   1eb0c:	4013      	ands	r3, r2
   1eb0e:	d015      	beq.n	1eb3c <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   1eb10:	4a0e      	ldr	r2, [pc, #56]	; (1eb4c <DMAC_Handler+0x130>)
   1eb12:	234e      	movs	r3, #78	; 0x4e
   1eb14:	2104      	movs	r1, #4
   1eb16:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1eb18:	693b      	ldr	r3, [r7, #16]
   1eb1a:	2206      	movs	r2, #6
   1eb1c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1eb1e:	693b      	ldr	r3, [r7, #16]
   1eb20:	7c1b      	ldrb	r3, [r3, #16]
   1eb22:	001a      	movs	r2, r3
   1eb24:	2304      	movs	r3, #4
   1eb26:	4013      	ands	r3, r2
   1eb28:	d008      	beq.n	1eb3c <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1eb2a:	693b      	ldr	r3, [r7, #16]
   1eb2c:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1eb2e:	2b00      	cmp	r3, #0
   1eb30:	d004      	beq.n	1eb3c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   1eb32:	693b      	ldr	r3, [r7, #16]
   1eb34:	68db      	ldr	r3, [r3, #12]
   1eb36:	693a      	ldr	r2, [r7, #16]
   1eb38:	0010      	movs	r0, r2
   1eb3a:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   1eb3c:	4b07      	ldr	r3, [pc, #28]	; (1eb5c <DMAC_Handler+0x140>)
   1eb3e:	4798      	blx	r3
}
   1eb40:	46c0      	nop			; (mov r8, r8)
   1eb42:	46bd      	mov	sp, r7
   1eb44:	b006      	add	sp, #24
   1eb46:	bd80      	pop	{r7, pc}
   1eb48:	0001e9f5 	.word	0x0001e9f5
   1eb4c:	41004800 	.word	0x41004800
   1eb50:	200004a0 	.word	0x200004a0
   1eb54:	20000ac0 	.word	0x20000ac0
   1eb58:	20000450 	.word	0x20000450
   1eb5c:	0001ea09 	.word	0x0001ea09

0001eb60 <system_gclk_chan_get_config_defaults>:
{
   1eb60:	b580      	push	{r7, lr}
   1eb62:	b082      	sub	sp, #8
   1eb64:	af00      	add	r7, sp, #0
   1eb66:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1eb68:	687b      	ldr	r3, [r7, #4]
   1eb6a:	2200      	movs	r2, #0
   1eb6c:	701a      	strb	r2, [r3, #0]
}
   1eb6e:	46c0      	nop			; (mov r8, r8)
   1eb70:	46bd      	mov	sp, r7
   1eb72:	b002      	add	sp, #8
   1eb74:	bd80      	pop	{r7, pc}
	...

0001eb78 <system_apb_clock_set_mask>:
{
   1eb78:	b580      	push	{r7, lr}
   1eb7a:	b082      	sub	sp, #8
   1eb7c:	af00      	add	r7, sp, #0
   1eb7e:	0002      	movs	r2, r0
   1eb80:	6039      	str	r1, [r7, #0]
   1eb82:	1dfb      	adds	r3, r7, #7
   1eb84:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1eb86:	1dfb      	adds	r3, r7, #7
   1eb88:	781b      	ldrb	r3, [r3, #0]
   1eb8a:	2b01      	cmp	r3, #1
   1eb8c:	d00a      	beq.n	1eba4 <system_apb_clock_set_mask+0x2c>
   1eb8e:	2b02      	cmp	r3, #2
   1eb90:	d00f      	beq.n	1ebb2 <system_apb_clock_set_mask+0x3a>
   1eb92:	2b00      	cmp	r3, #0
   1eb94:	d114      	bne.n	1ebc0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1eb96:	4b0e      	ldr	r3, [pc, #56]	; (1ebd0 <system_apb_clock_set_mask+0x58>)
   1eb98:	4a0d      	ldr	r2, [pc, #52]	; (1ebd0 <system_apb_clock_set_mask+0x58>)
   1eb9a:	6991      	ldr	r1, [r2, #24]
   1eb9c:	683a      	ldr	r2, [r7, #0]
   1eb9e:	430a      	orrs	r2, r1
   1eba0:	619a      	str	r2, [r3, #24]
			break;
   1eba2:	e00f      	b.n	1ebc4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1eba4:	4b0a      	ldr	r3, [pc, #40]	; (1ebd0 <system_apb_clock_set_mask+0x58>)
   1eba6:	4a0a      	ldr	r2, [pc, #40]	; (1ebd0 <system_apb_clock_set_mask+0x58>)
   1eba8:	69d1      	ldr	r1, [r2, #28]
   1ebaa:	683a      	ldr	r2, [r7, #0]
   1ebac:	430a      	orrs	r2, r1
   1ebae:	61da      	str	r2, [r3, #28]
			break;
   1ebb0:	e008      	b.n	1ebc4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1ebb2:	4b07      	ldr	r3, [pc, #28]	; (1ebd0 <system_apb_clock_set_mask+0x58>)
   1ebb4:	4a06      	ldr	r2, [pc, #24]	; (1ebd0 <system_apb_clock_set_mask+0x58>)
   1ebb6:	6a11      	ldr	r1, [r2, #32]
   1ebb8:	683a      	ldr	r2, [r7, #0]
   1ebba:	430a      	orrs	r2, r1
   1ebbc:	621a      	str	r2, [r3, #32]
			break;
   1ebbe:	e001      	b.n	1ebc4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1ebc0:	2317      	movs	r3, #23
   1ebc2:	e000      	b.n	1ebc6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1ebc4:	2300      	movs	r3, #0
}
   1ebc6:	0018      	movs	r0, r3
   1ebc8:	46bd      	mov	sp, r7
   1ebca:	b002      	add	sp, #8
   1ebcc:	bd80      	pop	{r7, pc}
   1ebce:	46c0      	nop			; (mov r8, r8)
   1ebd0:	40000400 	.word	0x40000400

0001ebd4 <system_pinmux_get_config_defaults>:
{
   1ebd4:	b580      	push	{r7, lr}
   1ebd6:	b082      	sub	sp, #8
   1ebd8:	af00      	add	r7, sp, #0
   1ebda:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1ebdc:	687b      	ldr	r3, [r7, #4]
   1ebde:	2280      	movs	r2, #128	; 0x80
   1ebe0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1ebe2:	687b      	ldr	r3, [r7, #4]
   1ebe4:	2200      	movs	r2, #0
   1ebe6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1ebe8:	687b      	ldr	r3, [r7, #4]
   1ebea:	2201      	movs	r2, #1
   1ebec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1ebee:	687b      	ldr	r3, [r7, #4]
   1ebf0:	2200      	movs	r2, #0
   1ebf2:	70da      	strb	r2, [r3, #3]
}
   1ebf4:	46c0      	nop			; (mov r8, r8)
   1ebf6:	46bd      	mov	sp, r7
   1ebf8:	b002      	add	sp, #8
   1ebfa:	bd80      	pop	{r7, pc}

0001ebfc <system_interrupt_enable>:
{
   1ebfc:	b580      	push	{r7, lr}
   1ebfe:	b082      	sub	sp, #8
   1ec00:	af00      	add	r7, sp, #0
   1ec02:	0002      	movs	r2, r0
   1ec04:	1dfb      	adds	r3, r7, #7
   1ec06:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ec08:	4b06      	ldr	r3, [pc, #24]	; (1ec24 <system_interrupt_enable+0x28>)
   1ec0a:	1dfa      	adds	r2, r7, #7
   1ec0c:	7812      	ldrb	r2, [r2, #0]
   1ec0e:	0011      	movs	r1, r2
   1ec10:	221f      	movs	r2, #31
   1ec12:	400a      	ands	r2, r1
   1ec14:	2101      	movs	r1, #1
   1ec16:	4091      	lsls	r1, r2
   1ec18:	000a      	movs	r2, r1
   1ec1a:	601a      	str	r2, [r3, #0]
}
   1ec1c:	46c0      	nop			; (mov r8, r8)
   1ec1e:	46bd      	mov	sp, r7
   1ec20:	b002      	add	sp, #8
   1ec22:	bd80      	pop	{r7, pc}
   1ec24:	e000e100 	.word	0xe000e100

0001ec28 <_extint_get_eic_from_channel>:
{
   1ec28:	b580      	push	{r7, lr}
   1ec2a:	b084      	sub	sp, #16
   1ec2c:	af00      	add	r7, sp, #0
   1ec2e:	0002      	movs	r2, r0
   1ec30:	1dfb      	adds	r3, r7, #7
   1ec32:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   1ec34:	230f      	movs	r3, #15
   1ec36:	18fb      	adds	r3, r7, r3
   1ec38:	1dfa      	adds	r2, r7, #7
   1ec3a:	7812      	ldrb	r2, [r2, #0]
   1ec3c:	0952      	lsrs	r2, r2, #5
   1ec3e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   1ec40:	230f      	movs	r3, #15
   1ec42:	18fb      	adds	r3, r7, r3
   1ec44:	781b      	ldrb	r3, [r3, #0]
   1ec46:	2b00      	cmp	r3, #0
   1ec48:	d10c      	bne.n	1ec64 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1ec4a:	4b09      	ldr	r3, [pc, #36]	; (1ec70 <_extint_get_eic_from_channel+0x48>)
   1ec4c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   1ec4e:	230f      	movs	r3, #15
   1ec50:	18fb      	adds	r3, r7, r3
   1ec52:	781b      	ldrb	r3, [r3, #0]
   1ec54:	009b      	lsls	r3, r3, #2
   1ec56:	2210      	movs	r2, #16
   1ec58:	4694      	mov	ip, r2
   1ec5a:	44bc      	add	ip, r7
   1ec5c:	4463      	add	r3, ip
   1ec5e:	3b08      	subs	r3, #8
   1ec60:	681b      	ldr	r3, [r3, #0]
   1ec62:	e000      	b.n	1ec66 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   1ec64:	2300      	movs	r3, #0
}
   1ec66:	0018      	movs	r0, r3
   1ec68:	46bd      	mov	sp, r7
   1ec6a:	b004      	add	sp, #16
   1ec6c:	bd80      	pop	{r7, pc}
   1ec6e:	46c0      	nop			; (mov r8, r8)
   1ec70:	40001800 	.word	0x40001800

0001ec74 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   1ec74:	b580      	push	{r7, lr}
   1ec76:	b082      	sub	sp, #8
   1ec78:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1ec7a:	4b0f      	ldr	r3, [pc, #60]	; (1ecb8 <extint_is_syncing+0x44>)
   1ec7c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1ec7e:	2300      	movs	r3, #0
   1ec80:	607b      	str	r3, [r7, #4]
   1ec82:	e011      	b.n	1eca8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1ec84:	687b      	ldr	r3, [r7, #4]
   1ec86:	009b      	lsls	r3, r3, #2
   1ec88:	2208      	movs	r2, #8
   1ec8a:	4694      	mov	ip, r2
   1ec8c:	44bc      	add	ip, r7
   1ec8e:	4463      	add	r3, ip
   1ec90:	3b08      	subs	r3, #8
   1ec92:	681b      	ldr	r3, [r3, #0]
   1ec94:	785b      	ldrb	r3, [r3, #1]
   1ec96:	b2db      	uxtb	r3, r3
   1ec98:	b25b      	sxtb	r3, r3
   1ec9a:	2b00      	cmp	r3, #0
   1ec9c:	da01      	bge.n	1eca2 <extint_is_syncing+0x2e>
			return true;
   1ec9e:	2301      	movs	r3, #1
   1eca0:	e006      	b.n	1ecb0 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1eca2:	687b      	ldr	r3, [r7, #4]
   1eca4:	3301      	adds	r3, #1
   1eca6:	607b      	str	r3, [r7, #4]
   1eca8:	687b      	ldr	r3, [r7, #4]
   1ecaa:	2b00      	cmp	r3, #0
   1ecac:	d0ea      	beq.n	1ec84 <extint_is_syncing+0x10>
		}
	}
	return false;
   1ecae:	2300      	movs	r3, #0
}
   1ecb0:	0018      	movs	r0, r3
   1ecb2:	46bd      	mov	sp, r7
   1ecb4:	b002      	add	sp, #8
   1ecb6:	bd80      	pop	{r7, pc}
   1ecb8:	40001800 	.word	0x40001800

0001ecbc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   1ecbc:	b580      	push	{r7, lr}
   1ecbe:	b084      	sub	sp, #16
   1ecc0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1ecc2:	4b2d      	ldr	r3, [pc, #180]	; (1ed78 <_system_extint_init+0xbc>)
   1ecc4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   1ecc6:	2140      	movs	r1, #64	; 0x40
   1ecc8:	2000      	movs	r0, #0
   1ecca:	4b2c      	ldr	r3, [pc, #176]	; (1ed7c <_system_extint_init+0xc0>)
   1eccc:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1ecce:	003b      	movs	r3, r7
   1ecd0:	0018      	movs	r0, r3
   1ecd2:	4b2b      	ldr	r3, [pc, #172]	; (1ed80 <_system_extint_init+0xc4>)
   1ecd4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   1ecd6:	003b      	movs	r3, r7
   1ecd8:	2206      	movs	r2, #6
   1ecda:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1ecdc:	003b      	movs	r3, r7
   1ecde:	0019      	movs	r1, r3
   1ece0:	2005      	movs	r0, #5
   1ece2:	4b28      	ldr	r3, [pc, #160]	; (1ed84 <_system_extint_init+0xc8>)
   1ece4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   1ece6:	2005      	movs	r0, #5
   1ece8:	4b27      	ldr	r3, [pc, #156]	; (1ed88 <_system_extint_init+0xcc>)
   1ecea:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1ecec:	2300      	movs	r3, #0
   1ecee:	60fb      	str	r3, [r7, #12]
   1ecf0:	e018      	b.n	1ed24 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1ecf2:	68fb      	ldr	r3, [r7, #12]
   1ecf4:	009b      	lsls	r3, r3, #2
   1ecf6:	2210      	movs	r2, #16
   1ecf8:	4694      	mov	ip, r2
   1ecfa:	44bc      	add	ip, r7
   1ecfc:	4463      	add	r3, ip
   1ecfe:	3b0c      	subs	r3, #12
   1ed00:	681a      	ldr	r2, [r3, #0]
   1ed02:	68fb      	ldr	r3, [r7, #12]
   1ed04:	009b      	lsls	r3, r3, #2
   1ed06:	2110      	movs	r1, #16
   1ed08:	468c      	mov	ip, r1
   1ed0a:	44bc      	add	ip, r7
   1ed0c:	4463      	add	r3, ip
   1ed0e:	3b0c      	subs	r3, #12
   1ed10:	681b      	ldr	r3, [r3, #0]
   1ed12:	781b      	ldrb	r3, [r3, #0]
   1ed14:	b2db      	uxtb	r3, r3
   1ed16:	2101      	movs	r1, #1
   1ed18:	430b      	orrs	r3, r1
   1ed1a:	b2db      	uxtb	r3, r3
   1ed1c:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1ed1e:	68fb      	ldr	r3, [r7, #12]
   1ed20:	3301      	adds	r3, #1
   1ed22:	60fb      	str	r3, [r7, #12]
   1ed24:	68fb      	ldr	r3, [r7, #12]
   1ed26:	2b00      	cmp	r3, #0
   1ed28:	d0e3      	beq.n	1ecf2 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1ed2a:	46c0      	nop			; (mov r8, r8)
   1ed2c:	4b17      	ldr	r3, [pc, #92]	; (1ed8c <_system_extint_init+0xd0>)
   1ed2e:	4798      	blx	r3
   1ed30:	1e03      	subs	r3, r0, #0
   1ed32:	d1fb      	bne.n	1ed2c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1ed34:	230b      	movs	r3, #11
   1ed36:	18fb      	adds	r3, r7, r3
   1ed38:	2200      	movs	r2, #0
   1ed3a:	701a      	strb	r2, [r3, #0]
   1ed3c:	e00d      	b.n	1ed5a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   1ed3e:	230b      	movs	r3, #11
   1ed40:	18fb      	adds	r3, r7, r3
   1ed42:	781a      	ldrb	r2, [r3, #0]
   1ed44:	4b12      	ldr	r3, [pc, #72]	; (1ed90 <_system_extint_init+0xd4>)
   1ed46:	0092      	lsls	r2, r2, #2
   1ed48:	2100      	movs	r1, #0
   1ed4a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1ed4c:	230b      	movs	r3, #11
   1ed4e:	18fb      	adds	r3, r7, r3
   1ed50:	781a      	ldrb	r2, [r3, #0]
   1ed52:	230b      	movs	r3, #11
   1ed54:	18fb      	adds	r3, r7, r3
   1ed56:	3201      	adds	r2, #1
   1ed58:	701a      	strb	r2, [r3, #0]
   1ed5a:	230b      	movs	r3, #11
   1ed5c:	18fb      	adds	r3, r7, r3
   1ed5e:	781b      	ldrb	r3, [r3, #0]
   1ed60:	2b0f      	cmp	r3, #15
   1ed62:	d9ec      	bls.n	1ed3e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   1ed64:	2004      	movs	r0, #4
   1ed66:	4b0b      	ldr	r3, [pc, #44]	; (1ed94 <_system_extint_init+0xd8>)
   1ed68:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1ed6a:	4b0b      	ldr	r3, [pc, #44]	; (1ed98 <_system_extint_init+0xdc>)
   1ed6c:	4798      	blx	r3
}
   1ed6e:	46c0      	nop			; (mov r8, r8)
   1ed70:	46bd      	mov	sp, r7
   1ed72:	b004      	add	sp, #16
   1ed74:	bd80      	pop	{r7, pc}
   1ed76:	46c0      	nop			; (mov r8, r8)
   1ed78:	40001800 	.word	0x40001800
   1ed7c:	0001eb79 	.word	0x0001eb79
   1ed80:	0001eb61 	.word	0x0001eb61
   1ed84:	00025215 	.word	0x00025215
   1ed88:	00025259 	.word	0x00025259
   1ed8c:	0001ec75 	.word	0x0001ec75
   1ed90:	20000b10 	.word	0x20000b10
   1ed94:	0001ebfd 	.word	0x0001ebfd
   1ed98:	0001ed9d 	.word	0x0001ed9d

0001ed9c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   1ed9c:	b580      	push	{r7, lr}
   1ed9e:	b082      	sub	sp, #8
   1eda0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1eda2:	4b15      	ldr	r3, [pc, #84]	; (1edf8 <_extint_enable+0x5c>)
   1eda4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1eda6:	2300      	movs	r3, #0
   1eda8:	607b      	str	r3, [r7, #4]
   1edaa:	e018      	b.n	1edde <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1edac:	687b      	ldr	r3, [r7, #4]
   1edae:	009b      	lsls	r3, r3, #2
   1edb0:	2208      	movs	r2, #8
   1edb2:	4694      	mov	ip, r2
   1edb4:	44bc      	add	ip, r7
   1edb6:	4463      	add	r3, ip
   1edb8:	3b08      	subs	r3, #8
   1edba:	681a      	ldr	r2, [r3, #0]
   1edbc:	687b      	ldr	r3, [r7, #4]
   1edbe:	009b      	lsls	r3, r3, #2
   1edc0:	2108      	movs	r1, #8
   1edc2:	468c      	mov	ip, r1
   1edc4:	44bc      	add	ip, r7
   1edc6:	4463      	add	r3, ip
   1edc8:	3b08      	subs	r3, #8
   1edca:	681b      	ldr	r3, [r3, #0]
   1edcc:	781b      	ldrb	r3, [r3, #0]
   1edce:	b2db      	uxtb	r3, r3
   1edd0:	2102      	movs	r1, #2
   1edd2:	430b      	orrs	r3, r1
   1edd4:	b2db      	uxtb	r3, r3
   1edd6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1edd8:	687b      	ldr	r3, [r7, #4]
   1edda:	3301      	adds	r3, #1
   1eddc:	607b      	str	r3, [r7, #4]
   1edde:	687b      	ldr	r3, [r7, #4]
   1ede0:	2b00      	cmp	r3, #0
   1ede2:	d0e3      	beq.n	1edac <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   1ede4:	46c0      	nop			; (mov r8, r8)
   1ede6:	4b05      	ldr	r3, [pc, #20]	; (1edfc <_extint_enable+0x60>)
   1ede8:	4798      	blx	r3
   1edea:	1e03      	subs	r3, r0, #0
   1edec:	d1fb      	bne.n	1ede6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1edee:	46c0      	nop			; (mov r8, r8)
   1edf0:	46bd      	mov	sp, r7
   1edf2:	b002      	add	sp, #8
   1edf4:	bd80      	pop	{r7, pc}
   1edf6:	46c0      	nop			; (mov r8, r8)
   1edf8:	40001800 	.word	0x40001800
   1edfc:	0001ec75 	.word	0x0001ec75

0001ee00 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   1ee00:	b580      	push	{r7, lr}
   1ee02:	b082      	sub	sp, #8
   1ee04:	af00      	add	r7, sp, #0
   1ee06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1ee08:	687b      	ldr	r3, [r7, #4]
   1ee0a:	2200      	movs	r2, #0
   1ee0c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   1ee0e:	687b      	ldr	r3, [r7, #4]
   1ee10:	2200      	movs	r2, #0
   1ee12:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1ee14:	687b      	ldr	r3, [r7, #4]
   1ee16:	2201      	movs	r2, #1
   1ee18:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1ee1a:	687b      	ldr	r3, [r7, #4]
   1ee1c:	2201      	movs	r2, #1
   1ee1e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   1ee20:	687b      	ldr	r3, [r7, #4]
   1ee22:	2200      	movs	r2, #0
   1ee24:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1ee26:	687b      	ldr	r3, [r7, #4]
   1ee28:	2202      	movs	r2, #2
   1ee2a:	72da      	strb	r2, [r3, #11]
}
   1ee2c:	46c0      	nop			; (mov r8, r8)
   1ee2e:	46bd      	mov	sp, r7
   1ee30:	b002      	add	sp, #8
   1ee32:	bd80      	pop	{r7, pc}

0001ee34 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1ee34:	b580      	push	{r7, lr}
   1ee36:	b086      	sub	sp, #24
   1ee38:	af00      	add	r7, sp, #0
   1ee3a:	0002      	movs	r2, r0
   1ee3c:	6039      	str	r1, [r7, #0]
   1ee3e:	1dfb      	adds	r3, r7, #7
   1ee40:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1ee42:	2308      	movs	r3, #8
   1ee44:	18fb      	adds	r3, r7, r3
   1ee46:	0018      	movs	r0, r3
   1ee48:	4b36      	ldr	r3, [pc, #216]	; (1ef24 <extint_chan_set_config+0xf0>)
   1ee4a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   1ee4c:	683b      	ldr	r3, [r7, #0]
   1ee4e:	685b      	ldr	r3, [r3, #4]
   1ee50:	b2da      	uxtb	r2, r3
   1ee52:	2308      	movs	r3, #8
   1ee54:	18fb      	adds	r3, r7, r3
   1ee56:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1ee58:	2308      	movs	r3, #8
   1ee5a:	18fb      	adds	r3, r7, r3
   1ee5c:	2200      	movs	r2, #0
   1ee5e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1ee60:	683b      	ldr	r3, [r7, #0]
   1ee62:	7a1a      	ldrb	r2, [r3, #8]
   1ee64:	2308      	movs	r3, #8
   1ee66:	18fb      	adds	r3, r7, r3
   1ee68:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1ee6a:	683b      	ldr	r3, [r7, #0]
   1ee6c:	681b      	ldr	r3, [r3, #0]
   1ee6e:	b2db      	uxtb	r3, r3
   1ee70:	2208      	movs	r2, #8
   1ee72:	18ba      	adds	r2, r7, r2
   1ee74:	0011      	movs	r1, r2
   1ee76:	0018      	movs	r0, r3
   1ee78:	4b2b      	ldr	r3, [pc, #172]	; (1ef28 <extint_chan_set_config+0xf4>)
   1ee7a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   1ee7c:	1dfb      	adds	r3, r7, #7
   1ee7e:	781b      	ldrb	r3, [r3, #0]
   1ee80:	0018      	movs	r0, r3
   1ee82:	4b2a      	ldr	r3, [pc, #168]	; (1ef2c <extint_chan_set_config+0xf8>)
   1ee84:	4798      	blx	r3
   1ee86:	0003      	movs	r3, r0
   1ee88:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1ee8a:	1dfb      	adds	r3, r7, #7
   1ee8c:	781b      	ldrb	r3, [r3, #0]
   1ee8e:	2207      	movs	r2, #7
   1ee90:	4013      	ands	r3, r2
   1ee92:	009b      	lsls	r3, r3, #2
   1ee94:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1ee96:	683b      	ldr	r3, [r7, #0]
   1ee98:	7adb      	ldrb	r3, [r3, #11]
   1ee9a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1ee9c:	683b      	ldr	r3, [r7, #0]
   1ee9e:	7a9b      	ldrb	r3, [r3, #10]
   1eea0:	2b00      	cmp	r3, #0
   1eea2:	d003      	beq.n	1eeac <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   1eea4:	697b      	ldr	r3, [r7, #20]
   1eea6:	2208      	movs	r2, #8
   1eea8:	4313      	orrs	r3, r2
   1eeaa:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   1eeac:	1dfb      	adds	r3, r7, #7
   1eeae:	781b      	ldrb	r3, [r3, #0]
   1eeb0:	08db      	lsrs	r3, r3, #3
   1eeb2:	b2db      	uxtb	r3, r3
   1eeb4:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   1eeb6:	1dfb      	adds	r3, r7, #7
   1eeb8:	781b      	ldrb	r3, [r3, #0]
   1eeba:	08db      	lsrs	r3, r3, #3
   1eebc:	b2db      	uxtb	r3, r3
   1eebe:	001a      	movs	r2, r3
   1eec0:	693b      	ldr	r3, [r7, #16]
   1eec2:	3206      	adds	r2, #6
   1eec4:	0092      	lsls	r2, r2, #2
   1eec6:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1eec8:	210f      	movs	r1, #15
   1eeca:	68fa      	ldr	r2, [r7, #12]
   1eecc:	4091      	lsls	r1, r2
   1eece:	000a      	movs	r2, r1
   1eed0:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1eed2:	401a      	ands	r2, r3
			(new_config << config_pos);
   1eed4:	6979      	ldr	r1, [r7, #20]
   1eed6:	68fb      	ldr	r3, [r7, #12]
   1eed8:	4099      	lsls	r1, r3
   1eeda:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1eedc:	431a      	orrs	r2, r3
   1eede:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1eee0:	693b      	ldr	r3, [r7, #16]
   1eee2:	1d82      	adds	r2, r0, #6
   1eee4:	0092      	lsls	r2, r2, #2
   1eee6:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1eee8:	683b      	ldr	r3, [r7, #0]
   1eeea:	7a5b      	ldrb	r3, [r3, #9]
   1eeec:	2b00      	cmp	r3, #0
   1eeee:	d00a      	beq.n	1ef06 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1eef0:	693b      	ldr	r3, [r7, #16]
   1eef2:	695a      	ldr	r2, [r3, #20]
   1eef4:	1dfb      	adds	r3, r7, #7
   1eef6:	781b      	ldrb	r3, [r3, #0]
   1eef8:	2101      	movs	r1, #1
   1eefa:	4099      	lsls	r1, r3
   1eefc:	000b      	movs	r3, r1
   1eefe:	431a      	orrs	r2, r3
   1ef00:	693b      	ldr	r3, [r7, #16]
   1ef02:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   1ef04:	e00a      	b.n	1ef1c <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1ef06:	693b      	ldr	r3, [r7, #16]
   1ef08:	695b      	ldr	r3, [r3, #20]
   1ef0a:	1dfa      	adds	r2, r7, #7
   1ef0c:	7812      	ldrb	r2, [r2, #0]
   1ef0e:	2101      	movs	r1, #1
   1ef10:	4091      	lsls	r1, r2
   1ef12:	000a      	movs	r2, r1
   1ef14:	43d2      	mvns	r2, r2
   1ef16:	401a      	ands	r2, r3
   1ef18:	693b      	ldr	r3, [r7, #16]
   1ef1a:	615a      	str	r2, [r3, #20]
}
   1ef1c:	46c0      	nop			; (mov r8, r8)
   1ef1e:	46bd      	mov	sp, r7
   1ef20:	b006      	add	sp, #24
   1ef22:	bd80      	pop	{r7, pc}
   1ef24:	0001ebd5 	.word	0x0001ebd5
   1ef28:	00025501 	.word	0x00025501
   1ef2c:	0001ec29 	.word	0x0001ec29

0001ef30 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   1ef30:	b580      	push	{r7, lr}
   1ef32:	b086      	sub	sp, #24
   1ef34:	af00      	add	r7, sp, #0
   1ef36:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1ef38:	4b31      	ldr	r3, [pc, #196]	; (1f000 <_rtc_interrupt_handler+0xd0>)
   1ef3a:	687a      	ldr	r2, [r7, #4]
   1ef3c:	0092      	lsls	r2, r2, #2
   1ef3e:	58d3      	ldr	r3, [r2, r3]
   1ef40:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   1ef42:	697b      	ldr	r3, [r7, #20]
   1ef44:	681b      	ldr	r3, [r3, #0]
   1ef46:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1ef48:	230e      	movs	r3, #14
   1ef4a:	18fb      	adds	r3, r7, r3
   1ef4c:	697a      	ldr	r2, [r7, #20]
   1ef4e:	8ad2      	ldrh	r2, [r2, #22]
   1ef50:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1ef52:	697b      	ldr	r3, [r7, #20]
   1ef54:	8a9b      	ldrh	r3, [r3, #20]
   1ef56:	b29a      	uxth	r2, r3
   1ef58:	230e      	movs	r3, #14
   1ef5a:	18fb      	adds	r3, r7, r3
   1ef5c:	210e      	movs	r1, #14
   1ef5e:	1879      	adds	r1, r7, r1
   1ef60:	8809      	ldrh	r1, [r1, #0]
   1ef62:	400a      	ands	r2, r1
   1ef64:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
   1ef66:	693b      	ldr	r3, [r7, #16]
   1ef68:	7a1b      	ldrb	r3, [r3, #8]
   1ef6a:	b2da      	uxtb	r2, r3
   1ef6c:	230c      	movs	r3, #12
   1ef6e:	18fb      	adds	r3, r7, r3
   1ef70:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
   1ef72:	693b      	ldr	r3, [r7, #16]
   1ef74:	79db      	ldrb	r3, [r3, #7]
   1ef76:	b2db      	uxtb	r3, r3
   1ef78:	b29a      	uxth	r2, r3
   1ef7a:	230c      	movs	r3, #12
   1ef7c:	18fb      	adds	r3, r7, r3
   1ef7e:	210c      	movs	r1, #12
   1ef80:	1879      	adds	r1, r7, r1
   1ef82:	8809      	ldrh	r1, [r1, #0]
   1ef84:	400a      	ands	r2, r1
   1ef86:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
   1ef88:	230c      	movs	r3, #12
   1ef8a:	18fb      	adds	r3, r7, r3
   1ef8c:	881b      	ldrh	r3, [r3, #0]
   1ef8e:	2280      	movs	r2, #128	; 0x80
   1ef90:	4013      	ands	r3, r2
   1ef92:	d00c      	beq.n	1efae <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
   1ef94:	230e      	movs	r3, #14
   1ef96:	18fb      	adds	r3, r7, r3
   1ef98:	881b      	ldrh	r3, [r3, #0]
   1ef9a:	2204      	movs	r2, #4
   1ef9c:	4013      	ands	r3, r2
   1ef9e:	d002      	beq.n	1efa6 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
   1efa0:	697b      	ldr	r3, [r7, #20]
   1efa2:	691b      	ldr	r3, [r3, #16]
   1efa4:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
   1efa6:	693b      	ldr	r3, [r7, #16]
   1efa8:	2280      	movs	r2, #128	; 0x80
   1efaa:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
   1efac:	e024      	b.n	1eff8 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
   1efae:	230c      	movs	r3, #12
   1efb0:	18fb      	adds	r3, r7, r3
   1efb2:	881b      	ldrh	r3, [r3, #0]
   1efb4:	2201      	movs	r2, #1
   1efb6:	4013      	ands	r3, r2
   1efb8:	d00c      	beq.n	1efd4 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
   1efba:	230e      	movs	r3, #14
   1efbc:	18fb      	adds	r3, r7, r3
   1efbe:	881b      	ldrh	r3, [r3, #0]
   1efc0:	2201      	movs	r2, #1
   1efc2:	4013      	ands	r3, r2
   1efc4:	d002      	beq.n	1efcc <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
   1efc6:	697b      	ldr	r3, [r7, #20]
   1efc8:	689b      	ldr	r3, [r3, #8]
   1efca:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
   1efcc:	693b      	ldr	r3, [r7, #16]
   1efce:	2201      	movs	r2, #1
   1efd0:	721a      	strb	r2, [r3, #8]
}
   1efd2:	e011      	b.n	1eff8 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
   1efd4:	230c      	movs	r3, #12
   1efd6:	18fb      	adds	r3, r7, r3
   1efd8:	881b      	ldrh	r3, [r3, #0]
   1efda:	2202      	movs	r2, #2
   1efdc:	4013      	ands	r3, r2
   1efde:	d00b      	beq.n	1eff8 <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
   1efe0:	230e      	movs	r3, #14
   1efe2:	18fb      	adds	r3, r7, r3
   1efe4:	881b      	ldrh	r3, [r3, #0]
   1efe6:	2202      	movs	r2, #2
   1efe8:	4013      	ands	r3, r2
   1efea:	d002      	beq.n	1eff2 <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
   1efec:	697b      	ldr	r3, [r7, #20]
   1efee:	68db      	ldr	r3, [r3, #12]
   1eff0:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
   1eff2:	693b      	ldr	r3, [r7, #16]
   1eff4:	2202      	movs	r2, #2
   1eff6:	721a      	strb	r2, [r3, #8]
}
   1eff8:	46c0      	nop			; (mov r8, r8)
   1effa:	46bd      	mov	sp, r7
   1effc:	b006      	add	sp, #24
   1effe:	bd80      	pop	{r7, pc}
   1f000:	20000b50 	.word	0x20000b50

0001f004 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1f004:	b580      	push	{r7, lr}
   1f006:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   1f008:	2000      	movs	r0, #0
   1f00a:	4b02      	ldr	r3, [pc, #8]	; (1f014 <RTC_Handler+0x10>)
   1f00c:	4798      	blx	r3
}
   1f00e:	46c0      	nop			; (mov r8, r8)
   1f010:	46bd      	mov	sp, r7
   1f012:	bd80      	pop	{r7, pc}
   1f014:	0001ef31 	.word	0x0001ef31

0001f018 <system_gclk_chan_get_config_defaults>:
{
   1f018:	b580      	push	{r7, lr}
   1f01a:	b082      	sub	sp, #8
   1f01c:	af00      	add	r7, sp, #0
   1f01e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1f020:	687b      	ldr	r3, [r7, #4]
   1f022:	2200      	movs	r2, #0
   1f024:	701a      	strb	r2, [r3, #0]
}
   1f026:	46c0      	nop			; (mov r8, r8)
   1f028:	46bd      	mov	sp, r7
   1f02a:	b002      	add	sp, #8
   1f02c:	bd80      	pop	{r7, pc}

0001f02e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1f02e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f030:	b08d      	sub	sp, #52	; 0x34
   1f032:	af00      	add	r7, sp, #0
   1f034:	60b8      	str	r0, [r7, #8]
   1f036:	60f9      	str	r1, [r7, #12]
   1f038:	603a      	str	r2, [r7, #0]
   1f03a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1f03c:	2300      	movs	r3, #0
   1f03e:	2400      	movs	r4, #0
   1f040:	623b      	str	r3, [r7, #32]
   1f042:	627c      	str	r4, [r7, #36]	; 0x24
   1f044:	2300      	movs	r3, #0
   1f046:	2400      	movs	r4, #0
   1f048:	61bb      	str	r3, [r7, #24]
   1f04a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1f04c:	233f      	movs	r3, #63	; 0x3f
   1f04e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f050:	e053      	b.n	1f0fa <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   1f052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f054:	3b20      	subs	r3, #32
   1f056:	2b00      	cmp	r3, #0
   1f058:	db04      	blt.n	1f064 <long_division+0x36>
   1f05a:	2201      	movs	r2, #1
   1f05c:	409a      	lsls	r2, r3
   1f05e:	0013      	movs	r3, r2
   1f060:	617b      	str	r3, [r7, #20]
   1f062:	e00b      	b.n	1f07c <long_division+0x4e>
   1f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f066:	2220      	movs	r2, #32
   1f068:	1ad3      	subs	r3, r2, r3
   1f06a:	2201      	movs	r2, #1
   1f06c:	40da      	lsrs	r2, r3
   1f06e:	0013      	movs	r3, r2
   1f070:	2100      	movs	r1, #0
   1f072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1f074:	4091      	lsls	r1, r2
   1f076:	000a      	movs	r2, r1
   1f078:	4313      	orrs	r3, r2
   1f07a:	617b      	str	r3, [r7, #20]
   1f07c:	2201      	movs	r2, #1
   1f07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f080:	409a      	lsls	r2, r3
   1f082:	0013      	movs	r3, r2
   1f084:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1f086:	69bb      	ldr	r3, [r7, #24]
   1f088:	69fc      	ldr	r4, [r7, #28]
   1f08a:	18db      	adds	r3, r3, r3
   1f08c:	4164      	adcs	r4, r4
   1f08e:	61bb      	str	r3, [r7, #24]
   1f090:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   1f092:	68bb      	ldr	r3, [r7, #8]
   1f094:	693a      	ldr	r2, [r7, #16]
   1f096:	401a      	ands	r2, r3
   1f098:	0015      	movs	r5, r2
   1f09a:	68fb      	ldr	r3, [r7, #12]
   1f09c:	697a      	ldr	r2, [r7, #20]
   1f09e:	401a      	ands	r2, r3
   1f0a0:	0016      	movs	r6, r2
   1f0a2:	002b      	movs	r3, r5
   1f0a4:	4333      	orrs	r3, r6
   1f0a6:	d007      	beq.n	1f0b8 <long_division+0x8a>
			r |= 0x01;
   1f0a8:	69bb      	ldr	r3, [r7, #24]
   1f0aa:	2201      	movs	r2, #1
   1f0ac:	4313      	orrs	r3, r2
   1f0ae:	61bb      	str	r3, [r7, #24]
   1f0b0:	69fb      	ldr	r3, [r7, #28]
   1f0b2:	2200      	movs	r2, #0
   1f0b4:	4313      	orrs	r3, r2
   1f0b6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1f0b8:	687a      	ldr	r2, [r7, #4]
   1f0ba:	69fb      	ldr	r3, [r7, #28]
   1f0bc:	429a      	cmp	r2, r3
   1f0be:	d819      	bhi.n	1f0f4 <long_division+0xc6>
   1f0c0:	687a      	ldr	r2, [r7, #4]
   1f0c2:	69fb      	ldr	r3, [r7, #28]
   1f0c4:	429a      	cmp	r2, r3
   1f0c6:	d103      	bne.n	1f0d0 <long_division+0xa2>
   1f0c8:	683a      	ldr	r2, [r7, #0]
   1f0ca:	69bb      	ldr	r3, [r7, #24]
   1f0cc:	429a      	cmp	r2, r3
   1f0ce:	d811      	bhi.n	1f0f4 <long_division+0xc6>
			r = r - d;
   1f0d0:	69b9      	ldr	r1, [r7, #24]
   1f0d2:	69fa      	ldr	r2, [r7, #28]
   1f0d4:	683b      	ldr	r3, [r7, #0]
   1f0d6:	687c      	ldr	r4, [r7, #4]
   1f0d8:	1ac9      	subs	r1, r1, r3
   1f0da:	41a2      	sbcs	r2, r4
   1f0dc:	000b      	movs	r3, r1
   1f0de:	0014      	movs	r4, r2
   1f0e0:	61bb      	str	r3, [r7, #24]
   1f0e2:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1f0e4:	6a3a      	ldr	r2, [r7, #32]
   1f0e6:	693b      	ldr	r3, [r7, #16]
   1f0e8:	4313      	orrs	r3, r2
   1f0ea:	623b      	str	r3, [r7, #32]
   1f0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f0ee:	697b      	ldr	r3, [r7, #20]
   1f0f0:	4313      	orrs	r3, r2
   1f0f2:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   1f0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f0f6:	3b01      	subs	r3, #1
   1f0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f0fc:	2b00      	cmp	r3, #0
   1f0fe:	daa8      	bge.n	1f052 <long_division+0x24>
		}
	}

	return q;
   1f100:	6a3b      	ldr	r3, [r7, #32]
   1f102:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1f104:	0018      	movs	r0, r3
   1f106:	0021      	movs	r1, r4
   1f108:	46bd      	mov	sp, r7
   1f10a:	b00d      	add	sp, #52	; 0x34
   1f10c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f10e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1f10e:	b580      	push	{r7, lr}
   1f110:	b086      	sub	sp, #24
   1f112:	af00      	add	r7, sp, #0
   1f114:	60f8      	str	r0, [r7, #12]
   1f116:	60b9      	str	r1, [r7, #8]
   1f118:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   1f11a:	2316      	movs	r3, #22
   1f11c:	18fb      	adds	r3, r7, r3
   1f11e:	2200      	movs	r2, #0
   1f120:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   1f122:	68bb      	ldr	r3, [r7, #8]
   1f124:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1f126:	68bb      	ldr	r3, [r7, #8]
   1f128:	085a      	lsrs	r2, r3, #1
   1f12a:	68fb      	ldr	r3, [r7, #12]
   1f12c:	429a      	cmp	r2, r3
   1f12e:	d201      	bcs.n	1f134 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f130:	2340      	movs	r3, #64	; 0x40
   1f132:	e026      	b.n	1f182 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1f134:	68bb      	ldr	r3, [r7, #8]
   1f136:	085b      	lsrs	r3, r3, #1
   1f138:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1f13a:	e00a      	b.n	1f152 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1f13c:	693a      	ldr	r2, [r7, #16]
   1f13e:	68fb      	ldr	r3, [r7, #12]
   1f140:	1ad3      	subs	r3, r2, r3
   1f142:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1f144:	2316      	movs	r3, #22
   1f146:	18fb      	adds	r3, r7, r3
   1f148:	881a      	ldrh	r2, [r3, #0]
   1f14a:	2316      	movs	r3, #22
   1f14c:	18fb      	adds	r3, r7, r3
   1f14e:	3201      	adds	r2, #1
   1f150:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   1f152:	693a      	ldr	r2, [r7, #16]
   1f154:	68fb      	ldr	r3, [r7, #12]
   1f156:	429a      	cmp	r2, r3
   1f158:	d2f0      	bcs.n	1f13c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1f15a:	2316      	movs	r3, #22
   1f15c:	18fb      	adds	r3, r7, r3
   1f15e:	2216      	movs	r2, #22
   1f160:	18ba      	adds	r2, r7, r2
   1f162:	8812      	ldrh	r2, [r2, #0]
   1f164:	3a01      	subs	r2, #1
   1f166:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1f168:	2316      	movs	r3, #22
   1f16a:	18fb      	adds	r3, r7, r3
   1f16c:	881b      	ldrh	r3, [r3, #0]
   1f16e:	2bff      	cmp	r3, #255	; 0xff
   1f170:	d901      	bls.n	1f176 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f172:	2340      	movs	r3, #64	; 0x40
   1f174:	e005      	b.n	1f182 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1f176:	687b      	ldr	r3, [r7, #4]
   1f178:	2216      	movs	r2, #22
   1f17a:	18ba      	adds	r2, r7, r2
   1f17c:	8812      	ldrh	r2, [r2, #0]
   1f17e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1f180:	2300      	movs	r3, #0
	}
}
   1f182:	0018      	movs	r0, r3
   1f184:	46bd      	mov	sp, r7
   1f186:	b006      	add	sp, #24
   1f188:	bd80      	pop	{r7, pc}
	...

0001f18c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1f18c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f18e:	b0a1      	sub	sp, #132	; 0x84
   1f190:	af00      	add	r7, sp, #0
   1f192:	64f8      	str	r0, [r7, #76]	; 0x4c
   1f194:	64b9      	str	r1, [r7, #72]	; 0x48
   1f196:	647a      	str	r2, [r7, #68]	; 0x44
   1f198:	2243      	movs	r2, #67	; 0x43
   1f19a:	18ba      	adds	r2, r7, r2
   1f19c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1f19e:	2300      	movs	r3, #0
   1f1a0:	2400      	movs	r4, #0
   1f1a2:	673b      	str	r3, [r7, #112]	; 0x70
   1f1a4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1f1a6:	2300      	movs	r3, #0
   1f1a8:	2400      	movs	r4, #0
   1f1aa:	66bb      	str	r3, [r7, #104]	; 0x68
   1f1ac:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1f1ae:	2300      	movs	r3, #0
   1f1b0:	2400      	movs	r4, #0
   1f1b2:	67bb      	str	r3, [r7, #120]	; 0x78
   1f1b4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1f1b6:	2300      	movs	r3, #0
   1f1b8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1f1ba:	2358      	movs	r3, #88	; 0x58
   1f1bc:	2240      	movs	r2, #64	; 0x40
   1f1be:	4694      	mov	ip, r2
   1f1c0:	44bc      	add	ip, r7
   1f1c2:	4463      	add	r3, ip
   1f1c4:	781a      	ldrb	r2, [r3, #0]
   1f1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1f1c8:	435a      	muls	r2, r3
   1f1ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f1cc:	429a      	cmp	r2, r3
   1f1ce:	d901      	bls.n	1f1d4 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f1d0:	2340      	movs	r3, #64	; 0x40
   1f1d2:	e0b3      	b.n	1f33c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1f1d4:	2343      	movs	r3, #67	; 0x43
   1f1d6:	18fb      	adds	r3, r7, r3
   1f1d8:	781b      	ldrb	r3, [r3, #0]
   1f1da:	2b00      	cmp	r3, #0
   1f1dc:	d13d      	bne.n	1f25a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1f1de:	2358      	movs	r3, #88	; 0x58
   1f1e0:	2240      	movs	r2, #64	; 0x40
   1f1e2:	4694      	mov	ip, r2
   1f1e4:	44bc      	add	ip, r7
   1f1e6:	4463      	add	r3, ip
   1f1e8:	781b      	ldrb	r3, [r3, #0]
   1f1ea:	b2db      	uxtb	r3, r3
   1f1ec:	613b      	str	r3, [r7, #16]
   1f1ee:	2300      	movs	r3, #0
   1f1f0:	617b      	str	r3, [r7, #20]
   1f1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1f1f4:	60bb      	str	r3, [r7, #8]
   1f1f6:	2300      	movs	r3, #0
   1f1f8:	60fb      	str	r3, [r7, #12]
   1f1fa:	4c52      	ldr	r4, [pc, #328]	; (1f344 <_sercom_get_async_baud_val+0x1b8>)
   1f1fc:	68ba      	ldr	r2, [r7, #8]
   1f1fe:	68fb      	ldr	r3, [r7, #12]
   1f200:	6938      	ldr	r0, [r7, #16]
   1f202:	6979      	ldr	r1, [r7, #20]
   1f204:	47a0      	blx	r4
   1f206:	0003      	movs	r3, r0
   1f208:	000c      	movs	r4, r1
   1f20a:	001b      	movs	r3, r3
   1f20c:	65fb      	str	r3, [r7, #92]	; 0x5c
   1f20e:	2300      	movs	r3, #0
   1f210:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1f212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f214:	603b      	str	r3, [r7, #0]
   1f216:	2300      	movs	r3, #0
   1f218:	607b      	str	r3, [r7, #4]
   1f21a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1f21c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1f21e:	683a      	ldr	r2, [r7, #0]
   1f220:	687b      	ldr	r3, [r7, #4]
   1f222:	4c49      	ldr	r4, [pc, #292]	; (1f348 <_sercom_get_async_baud_val+0x1bc>)
   1f224:	47a0      	blx	r4
   1f226:	0003      	movs	r3, r0
   1f228:	000c      	movs	r4, r1
   1f22a:	673b      	str	r3, [r7, #112]	; 0x70
   1f22c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1f22e:	2100      	movs	r1, #0
   1f230:	2201      	movs	r2, #1
   1f232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1f234:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1f236:	1ac9      	subs	r1, r1, r3
   1f238:	41a2      	sbcs	r2, r4
   1f23a:	000b      	movs	r3, r1
   1f23c:	0014      	movs	r4, r2
   1f23e:	66bb      	str	r3, [r7, #104]	; 0x68
   1f240:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   1f242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f244:	0c1b      	lsrs	r3, r3, #16
   1f246:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1f248:	0416      	lsls	r6, r2, #16
   1f24a:	431e      	orrs	r6, r3
   1f24c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1f24e:	041d      	lsls	r5, r3, #16
   1f250:	0033      	movs	r3, r6
   1f252:	67bb      	str	r3, [r7, #120]	; 0x78
   1f254:	2300      	movs	r3, #0
   1f256:	67fb      	str	r3, [r7, #124]	; 0x7c
   1f258:	e06a      	b.n	1f330 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1f25a:	2343      	movs	r3, #67	; 0x43
   1f25c:	18fb      	adds	r3, r7, r3
   1f25e:	781b      	ldrb	r3, [r3, #0]
   1f260:	2b01      	cmp	r3, #1
   1f262:	d165      	bne.n	1f330 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   1f264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1f266:	633b      	str	r3, [r7, #48]	; 0x30
   1f268:	2300      	movs	r3, #0
   1f26a:	637b      	str	r3, [r7, #52]	; 0x34
   1f26c:	2358      	movs	r3, #88	; 0x58
   1f26e:	2240      	movs	r2, #64	; 0x40
   1f270:	4694      	mov	ip, r2
   1f272:	44bc      	add	ip, r7
   1f274:	4463      	add	r3, ip
   1f276:	781b      	ldrb	r3, [r3, #0]
   1f278:	b2db      	uxtb	r3, r3
   1f27a:	62bb      	str	r3, [r7, #40]	; 0x28
   1f27c:	2300      	movs	r3, #0
   1f27e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f280:	4c30      	ldr	r4, [pc, #192]	; (1f344 <_sercom_get_async_baud_val+0x1b8>)
   1f282:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1f284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f286:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1f288:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1f28a:	47a0      	blx	r4
   1f28c:	0003      	movs	r3, r0
   1f28e:	000c      	movs	r4, r1
   1f290:	65bb      	str	r3, [r7, #88]	; 0x58
   1f292:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   1f294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f296:	623b      	str	r3, [r7, #32]
   1f298:	2300      	movs	r3, #0
   1f29a:	627b      	str	r3, [r7, #36]	; 0x24
   1f29c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1f29e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1f2a0:	001a      	movs	r2, r3
   1f2a2:	0023      	movs	r3, r4
   1f2a4:	6a38      	ldr	r0, [r7, #32]
   1f2a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1f2a8:	4c27      	ldr	r4, [pc, #156]	; (1f348 <_sercom_get_async_baud_val+0x1bc>)
   1f2aa:	47a0      	blx	r4
   1f2ac:	0003      	movs	r3, r0
   1f2ae:	000c      	movs	r4, r1
   1f2b0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1f2b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1f2b4:	2380      	movs	r3, #128	; 0x80
   1f2b6:	019b      	lsls	r3, r3, #6
   1f2b8:	429a      	cmp	r2, r3
   1f2ba:	d901      	bls.n	1f2c0 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1f2bc:	2340      	movs	r3, #64	; 0x40
   1f2be:	e03d      	b.n	1f33c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1f2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f2c2:	61bb      	str	r3, [r7, #24]
   1f2c4:	2300      	movs	r3, #0
   1f2c6:	61fb      	str	r3, [r7, #28]
   1f2c8:	69b9      	ldr	r1, [r7, #24]
   1f2ca:	69fa      	ldr	r2, [r7, #28]
   1f2cc:	000b      	movs	r3, r1
   1f2ce:	0f5b      	lsrs	r3, r3, #29
   1f2d0:	0010      	movs	r0, r2
   1f2d2:	00c0      	lsls	r0, r0, #3
   1f2d4:	63f8      	str	r0, [r7, #60]	; 0x3c
   1f2d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1f2d8:	4318      	orrs	r0, r3
   1f2da:	63f8      	str	r0, [r7, #60]	; 0x3c
   1f2dc:	000b      	movs	r3, r1
   1f2de:	00db      	lsls	r3, r3, #3
   1f2e0:	63bb      	str	r3, [r7, #56]	; 0x38
   1f2e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1f2e4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1f2e6:	001a      	movs	r2, r3
   1f2e8:	0023      	movs	r3, r4
   1f2ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1f2ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1f2ee:	4c16      	ldr	r4, [pc, #88]	; (1f348 <_sercom_get_async_baud_val+0x1bc>)
   1f2f0:	47a0      	blx	r4
   1f2f2:	0003      	movs	r3, r0
   1f2f4:	000c      	movs	r4, r1
   1f2f6:	65bb      	str	r3, [r7, #88]	; 0x58
   1f2f8:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1f2fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1f2fc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1f2fe:	b2d9      	uxtb	r1, r3
   1f300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f302:	b2db      	uxtb	r3, r3
   1f304:	00db      	lsls	r3, r3, #3
   1f306:	b2da      	uxtb	r2, r3
   1f308:	2317      	movs	r3, #23
   1f30a:	2040      	movs	r0, #64	; 0x40
   1f30c:	4684      	mov	ip, r0
   1f30e:	44bc      	add	ip, r7
   1f310:	4463      	add	r3, ip
   1f312:	1a8a      	subs	r2, r1, r2
   1f314:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1f316:	2317      	movs	r3, #23
   1f318:	2240      	movs	r2, #64	; 0x40
   1f31a:	4694      	mov	ip, r2
   1f31c:	44bc      	add	ip, r7
   1f31e:	4463      	add	r3, ip
   1f320:	781b      	ldrb	r3, [r3, #0]
   1f322:	035b      	lsls	r3, r3, #13
   1f324:	001a      	movs	r2, r3
   1f326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f328:	4313      	orrs	r3, r2
   1f32a:	67bb      	str	r3, [r7, #120]	; 0x78
   1f32c:	2300      	movs	r3, #0
   1f32e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   1f330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1f332:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   1f334:	b29a      	uxth	r2, r3
   1f336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f338:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1f33a:	2300      	movs	r3, #0
}
   1f33c:	0018      	movs	r0, r3
   1f33e:	46bd      	mov	sp, r7
   1f340:	b021      	add	sp, #132	; 0x84
   1f342:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f344:	00027189 	.word	0x00027189
   1f348:	0001f02f 	.word	0x0001f02f

0001f34c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1f34c:	b580      	push	{r7, lr}
   1f34e:	b084      	sub	sp, #16
   1f350:	af00      	add	r7, sp, #0
   1f352:	0002      	movs	r2, r0
   1f354:	1dfb      	adds	r3, r7, #7
   1f356:	701a      	strb	r2, [r3, #0]
   1f358:	1dbb      	adds	r3, r7, #6
   1f35a:	1c0a      	adds	r2, r1, #0
   1f35c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1f35e:	4b1a      	ldr	r3, [pc, #104]	; (1f3c8 <sercom_set_gclk_generator+0x7c>)
   1f360:	781b      	ldrb	r3, [r3, #0]
   1f362:	2201      	movs	r2, #1
   1f364:	4053      	eors	r3, r2
   1f366:	b2db      	uxtb	r3, r3
   1f368:	2b00      	cmp	r3, #0
   1f36a:	d103      	bne.n	1f374 <sercom_set_gclk_generator+0x28>
   1f36c:	1dbb      	adds	r3, r7, #6
   1f36e:	781b      	ldrb	r3, [r3, #0]
   1f370:	2b00      	cmp	r3, #0
   1f372:	d01b      	beq.n	1f3ac <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1f374:	230c      	movs	r3, #12
   1f376:	18fb      	adds	r3, r7, r3
   1f378:	0018      	movs	r0, r3
   1f37a:	4b14      	ldr	r3, [pc, #80]	; (1f3cc <sercom_set_gclk_generator+0x80>)
   1f37c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1f37e:	230c      	movs	r3, #12
   1f380:	18fb      	adds	r3, r7, r3
   1f382:	1dfa      	adds	r2, r7, #7
   1f384:	7812      	ldrb	r2, [r2, #0]
   1f386:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1f388:	230c      	movs	r3, #12
   1f38a:	18fb      	adds	r3, r7, r3
   1f38c:	0019      	movs	r1, r3
   1f38e:	2013      	movs	r0, #19
   1f390:	4b0f      	ldr	r3, [pc, #60]	; (1f3d0 <sercom_set_gclk_generator+0x84>)
   1f392:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1f394:	2013      	movs	r0, #19
   1f396:	4b0f      	ldr	r3, [pc, #60]	; (1f3d4 <sercom_set_gclk_generator+0x88>)
   1f398:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1f39a:	4b0b      	ldr	r3, [pc, #44]	; (1f3c8 <sercom_set_gclk_generator+0x7c>)
   1f39c:	1dfa      	adds	r2, r7, #7
   1f39e:	7812      	ldrb	r2, [r2, #0]
   1f3a0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1f3a2:	4b09      	ldr	r3, [pc, #36]	; (1f3c8 <sercom_set_gclk_generator+0x7c>)
   1f3a4:	2201      	movs	r2, #1
   1f3a6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1f3a8:	2300      	movs	r3, #0
   1f3aa:	e008      	b.n	1f3be <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1f3ac:	4b06      	ldr	r3, [pc, #24]	; (1f3c8 <sercom_set_gclk_generator+0x7c>)
   1f3ae:	785b      	ldrb	r3, [r3, #1]
   1f3b0:	1dfa      	adds	r2, r7, #7
   1f3b2:	7812      	ldrb	r2, [r2, #0]
   1f3b4:	429a      	cmp	r2, r3
   1f3b6:	d101      	bne.n	1f3bc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1f3b8:	2300      	movs	r3, #0
   1f3ba:	e000      	b.n	1f3be <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1f3bc:	231d      	movs	r3, #29
}
   1f3be:	0018      	movs	r0, r3
   1f3c0:	46bd      	mov	sp, r7
   1f3c2:	b004      	add	sp, #16
   1f3c4:	bd80      	pop	{r7, pc}
   1f3c6:	46c0      	nop			; (mov r8, r8)
   1f3c8:	200004b4 	.word	0x200004b4
   1f3cc:	0001f019 	.word	0x0001f019
   1f3d0:	00025215 	.word	0x00025215
   1f3d4:	00025259 	.word	0x00025259

0001f3d8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1f3d8:	b580      	push	{r7, lr}
   1f3da:	b082      	sub	sp, #8
   1f3dc:	af00      	add	r7, sp, #0
   1f3de:	6078      	str	r0, [r7, #4]
   1f3e0:	000a      	movs	r2, r1
   1f3e2:	1cfb      	adds	r3, r7, #3
   1f3e4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1f3e6:	687b      	ldr	r3, [r7, #4]
   1f3e8:	4a4d      	ldr	r2, [pc, #308]	; (1f520 <_sercom_get_default_pad+0x148>)
   1f3ea:	4293      	cmp	r3, r2
   1f3ec:	d03f      	beq.n	1f46e <_sercom_get_default_pad+0x96>
   1f3ee:	4a4c      	ldr	r2, [pc, #304]	; (1f520 <_sercom_get_default_pad+0x148>)
   1f3f0:	4293      	cmp	r3, r2
   1f3f2:	d806      	bhi.n	1f402 <_sercom_get_default_pad+0x2a>
   1f3f4:	4a4b      	ldr	r2, [pc, #300]	; (1f524 <_sercom_get_default_pad+0x14c>)
   1f3f6:	4293      	cmp	r3, r2
   1f3f8:	d00f      	beq.n	1f41a <_sercom_get_default_pad+0x42>
   1f3fa:	4a4b      	ldr	r2, [pc, #300]	; (1f528 <_sercom_get_default_pad+0x150>)
   1f3fc:	4293      	cmp	r3, r2
   1f3fe:	d021      	beq.n	1f444 <_sercom_get_default_pad+0x6c>
   1f400:	e089      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f402:	4a4a      	ldr	r2, [pc, #296]	; (1f52c <_sercom_get_default_pad+0x154>)
   1f404:	4293      	cmp	r3, r2
   1f406:	d100      	bne.n	1f40a <_sercom_get_default_pad+0x32>
   1f408:	e05b      	b.n	1f4c2 <_sercom_get_default_pad+0xea>
   1f40a:	4a49      	ldr	r2, [pc, #292]	; (1f530 <_sercom_get_default_pad+0x158>)
   1f40c:	4293      	cmp	r3, r2
   1f40e:	d100      	bne.n	1f412 <_sercom_get_default_pad+0x3a>
   1f410:	e06c      	b.n	1f4ec <_sercom_get_default_pad+0x114>
   1f412:	4a48      	ldr	r2, [pc, #288]	; (1f534 <_sercom_get_default_pad+0x15c>)
   1f414:	4293      	cmp	r3, r2
   1f416:	d03f      	beq.n	1f498 <_sercom_get_default_pad+0xc0>
   1f418:	e07d      	b.n	1f516 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1f41a:	1cfb      	adds	r3, r7, #3
   1f41c:	781b      	ldrb	r3, [r3, #0]
   1f41e:	2b01      	cmp	r3, #1
   1f420:	d00a      	beq.n	1f438 <_sercom_get_default_pad+0x60>
   1f422:	dc02      	bgt.n	1f42a <_sercom_get_default_pad+0x52>
   1f424:	2b00      	cmp	r3, #0
   1f426:	d005      	beq.n	1f434 <_sercom_get_default_pad+0x5c>
   1f428:	e075      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f42a:	2b02      	cmp	r3, #2
   1f42c:	d006      	beq.n	1f43c <_sercom_get_default_pad+0x64>
   1f42e:	2b03      	cmp	r3, #3
   1f430:	d006      	beq.n	1f440 <_sercom_get_default_pad+0x68>
   1f432:	e070      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f434:	4b40      	ldr	r3, [pc, #256]	; (1f538 <_sercom_get_default_pad+0x160>)
   1f436:	e06f      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f438:	4b40      	ldr	r3, [pc, #256]	; (1f53c <_sercom_get_default_pad+0x164>)
   1f43a:	e06d      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f43c:	4b40      	ldr	r3, [pc, #256]	; (1f540 <_sercom_get_default_pad+0x168>)
   1f43e:	e06b      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f440:	4b40      	ldr	r3, [pc, #256]	; (1f544 <_sercom_get_default_pad+0x16c>)
   1f442:	e069      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f444:	1cfb      	adds	r3, r7, #3
   1f446:	781b      	ldrb	r3, [r3, #0]
   1f448:	2b01      	cmp	r3, #1
   1f44a:	d00a      	beq.n	1f462 <_sercom_get_default_pad+0x8a>
   1f44c:	dc02      	bgt.n	1f454 <_sercom_get_default_pad+0x7c>
   1f44e:	2b00      	cmp	r3, #0
   1f450:	d005      	beq.n	1f45e <_sercom_get_default_pad+0x86>
   1f452:	e060      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f454:	2b02      	cmp	r3, #2
   1f456:	d006      	beq.n	1f466 <_sercom_get_default_pad+0x8e>
   1f458:	2b03      	cmp	r3, #3
   1f45a:	d006      	beq.n	1f46a <_sercom_get_default_pad+0x92>
   1f45c:	e05b      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f45e:	2303      	movs	r3, #3
   1f460:	e05a      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f462:	4b39      	ldr	r3, [pc, #228]	; (1f548 <_sercom_get_default_pad+0x170>)
   1f464:	e058      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f466:	4b39      	ldr	r3, [pc, #228]	; (1f54c <_sercom_get_default_pad+0x174>)
   1f468:	e056      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f46a:	4b39      	ldr	r3, [pc, #228]	; (1f550 <_sercom_get_default_pad+0x178>)
   1f46c:	e054      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f46e:	1cfb      	adds	r3, r7, #3
   1f470:	781b      	ldrb	r3, [r3, #0]
   1f472:	2b01      	cmp	r3, #1
   1f474:	d00a      	beq.n	1f48c <_sercom_get_default_pad+0xb4>
   1f476:	dc02      	bgt.n	1f47e <_sercom_get_default_pad+0xa6>
   1f478:	2b00      	cmp	r3, #0
   1f47a:	d005      	beq.n	1f488 <_sercom_get_default_pad+0xb0>
   1f47c:	e04b      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f47e:	2b02      	cmp	r3, #2
   1f480:	d006      	beq.n	1f490 <_sercom_get_default_pad+0xb8>
   1f482:	2b03      	cmp	r3, #3
   1f484:	d006      	beq.n	1f494 <_sercom_get_default_pad+0xbc>
   1f486:	e046      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f488:	4b32      	ldr	r3, [pc, #200]	; (1f554 <_sercom_get_default_pad+0x17c>)
   1f48a:	e045      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f48c:	4b32      	ldr	r3, [pc, #200]	; (1f558 <_sercom_get_default_pad+0x180>)
   1f48e:	e043      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f490:	4b32      	ldr	r3, [pc, #200]	; (1f55c <_sercom_get_default_pad+0x184>)
   1f492:	e041      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f494:	4b32      	ldr	r3, [pc, #200]	; (1f560 <_sercom_get_default_pad+0x188>)
   1f496:	e03f      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f498:	1cfb      	adds	r3, r7, #3
   1f49a:	781b      	ldrb	r3, [r3, #0]
   1f49c:	2b01      	cmp	r3, #1
   1f49e:	d00a      	beq.n	1f4b6 <_sercom_get_default_pad+0xde>
   1f4a0:	dc02      	bgt.n	1f4a8 <_sercom_get_default_pad+0xd0>
   1f4a2:	2b00      	cmp	r3, #0
   1f4a4:	d005      	beq.n	1f4b2 <_sercom_get_default_pad+0xda>
   1f4a6:	e036      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f4a8:	2b02      	cmp	r3, #2
   1f4aa:	d006      	beq.n	1f4ba <_sercom_get_default_pad+0xe2>
   1f4ac:	2b03      	cmp	r3, #3
   1f4ae:	d006      	beq.n	1f4be <_sercom_get_default_pad+0xe6>
   1f4b0:	e031      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f4b2:	4b2c      	ldr	r3, [pc, #176]	; (1f564 <_sercom_get_default_pad+0x18c>)
   1f4b4:	e030      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f4b6:	4b2c      	ldr	r3, [pc, #176]	; (1f568 <_sercom_get_default_pad+0x190>)
   1f4b8:	e02e      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f4ba:	4b2c      	ldr	r3, [pc, #176]	; (1f56c <_sercom_get_default_pad+0x194>)
   1f4bc:	e02c      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f4be:	4b2c      	ldr	r3, [pc, #176]	; (1f570 <_sercom_get_default_pad+0x198>)
   1f4c0:	e02a      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f4c2:	1cfb      	adds	r3, r7, #3
   1f4c4:	781b      	ldrb	r3, [r3, #0]
   1f4c6:	2b01      	cmp	r3, #1
   1f4c8:	d00a      	beq.n	1f4e0 <_sercom_get_default_pad+0x108>
   1f4ca:	dc02      	bgt.n	1f4d2 <_sercom_get_default_pad+0xfa>
   1f4cc:	2b00      	cmp	r3, #0
   1f4ce:	d005      	beq.n	1f4dc <_sercom_get_default_pad+0x104>
   1f4d0:	e021      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f4d2:	2b02      	cmp	r3, #2
   1f4d4:	d006      	beq.n	1f4e4 <_sercom_get_default_pad+0x10c>
   1f4d6:	2b03      	cmp	r3, #3
   1f4d8:	d006      	beq.n	1f4e8 <_sercom_get_default_pad+0x110>
   1f4da:	e01c      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f4dc:	4b25      	ldr	r3, [pc, #148]	; (1f574 <_sercom_get_default_pad+0x19c>)
   1f4de:	e01b      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f4e0:	4b25      	ldr	r3, [pc, #148]	; (1f578 <_sercom_get_default_pad+0x1a0>)
   1f4e2:	e019      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f4e4:	4b25      	ldr	r3, [pc, #148]	; (1f57c <_sercom_get_default_pad+0x1a4>)
   1f4e6:	e017      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f4e8:	4b25      	ldr	r3, [pc, #148]	; (1f580 <_sercom_get_default_pad+0x1a8>)
   1f4ea:	e015      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f4ec:	1cfb      	adds	r3, r7, #3
   1f4ee:	781b      	ldrb	r3, [r3, #0]
   1f4f0:	2b01      	cmp	r3, #1
   1f4f2:	d00a      	beq.n	1f50a <_sercom_get_default_pad+0x132>
   1f4f4:	dc02      	bgt.n	1f4fc <_sercom_get_default_pad+0x124>
   1f4f6:	2b00      	cmp	r3, #0
   1f4f8:	d005      	beq.n	1f506 <_sercom_get_default_pad+0x12e>
   1f4fa:	e00c      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f4fc:	2b02      	cmp	r3, #2
   1f4fe:	d006      	beq.n	1f50e <_sercom_get_default_pad+0x136>
   1f500:	2b03      	cmp	r3, #3
   1f502:	d006      	beq.n	1f512 <_sercom_get_default_pad+0x13a>
   1f504:	e007      	b.n	1f516 <_sercom_get_default_pad+0x13e>
   1f506:	4b1f      	ldr	r3, [pc, #124]	; (1f584 <_sercom_get_default_pad+0x1ac>)
   1f508:	e006      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f50a:	4b1f      	ldr	r3, [pc, #124]	; (1f588 <_sercom_get_default_pad+0x1b0>)
   1f50c:	e004      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f50e:	4b1f      	ldr	r3, [pc, #124]	; (1f58c <_sercom_get_default_pad+0x1b4>)
   1f510:	e002      	b.n	1f518 <_sercom_get_default_pad+0x140>
   1f512:	4b1f      	ldr	r3, [pc, #124]	; (1f590 <_sercom_get_default_pad+0x1b8>)
   1f514:	e000      	b.n	1f518 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1f516:	2300      	movs	r3, #0
}
   1f518:	0018      	movs	r0, r3
   1f51a:	46bd      	mov	sp, r7
   1f51c:	b002      	add	sp, #8
   1f51e:	bd80      	pop	{r7, pc}
   1f520:	42001000 	.word	0x42001000
   1f524:	42000800 	.word	0x42000800
   1f528:	42000c00 	.word	0x42000c00
   1f52c:	42001800 	.word	0x42001800
   1f530:	42001c00 	.word	0x42001c00
   1f534:	42001400 	.word	0x42001400
   1f538:	00040003 	.word	0x00040003
   1f53c:	00050003 	.word	0x00050003
   1f540:	00060003 	.word	0x00060003
   1f544:	00070003 	.word	0x00070003
   1f548:	00010003 	.word	0x00010003
   1f54c:	001e0003 	.word	0x001e0003
   1f550:	001f0003 	.word	0x001f0003
   1f554:	00080003 	.word	0x00080003
   1f558:	00090003 	.word	0x00090003
   1f55c:	000a0003 	.word	0x000a0003
   1f560:	000b0003 	.word	0x000b0003
   1f564:	00100003 	.word	0x00100003
   1f568:	00110003 	.word	0x00110003
   1f56c:	00120003 	.word	0x00120003
   1f570:	00130003 	.word	0x00130003
   1f574:	000c0003 	.word	0x000c0003
   1f578:	000d0003 	.word	0x000d0003
   1f57c:	000e0003 	.word	0x000e0003
   1f580:	000f0003 	.word	0x000f0003
   1f584:	00160003 	.word	0x00160003
   1f588:	00170003 	.word	0x00170003
   1f58c:	00180003 	.word	0x00180003
   1f590:	00190003 	.word	0x00190003

0001f594 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1f594:	b590      	push	{r4, r7, lr}
   1f596:	b08b      	sub	sp, #44	; 0x2c
   1f598:	af00      	add	r7, sp, #0
   1f59a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1f59c:	230c      	movs	r3, #12
   1f59e:	18fb      	adds	r3, r7, r3
   1f5a0:	4a0f      	ldr	r2, [pc, #60]	; (1f5e0 <_sercom_get_sercom_inst_index+0x4c>)
   1f5a2:	ca13      	ldmia	r2!, {r0, r1, r4}
   1f5a4:	c313      	stmia	r3!, {r0, r1, r4}
   1f5a6:	ca13      	ldmia	r2!, {r0, r1, r4}
   1f5a8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f5aa:	2300      	movs	r3, #0
   1f5ac:	627b      	str	r3, [r7, #36]	; 0x24
   1f5ae:	e00e      	b.n	1f5ce <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1f5b0:	230c      	movs	r3, #12
   1f5b2:	18fb      	adds	r3, r7, r3
   1f5b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f5b6:	0092      	lsls	r2, r2, #2
   1f5b8:	58d3      	ldr	r3, [r2, r3]
   1f5ba:	001a      	movs	r2, r3
   1f5bc:	687b      	ldr	r3, [r7, #4]
   1f5be:	429a      	cmp	r2, r3
   1f5c0:	d102      	bne.n	1f5c8 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1f5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f5c4:	b2db      	uxtb	r3, r3
   1f5c6:	e006      	b.n	1f5d6 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1f5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f5ca:	3301      	adds	r3, #1
   1f5cc:	627b      	str	r3, [r7, #36]	; 0x24
   1f5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f5d0:	2b05      	cmp	r3, #5
   1f5d2:	d9ed      	bls.n	1f5b0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1f5d4:	2300      	movs	r3, #0
}
   1f5d6:	0018      	movs	r0, r3
   1f5d8:	46bd      	mov	sp, r7
   1f5da:	b00b      	add	sp, #44	; 0x2c
   1f5dc:	bd90      	pop	{r4, r7, pc}
   1f5de:	46c0      	nop			; (mov r8, r8)
   1f5e0:	0002b498 	.word	0x0002b498

0001f5e4 <system_cpu_clock_get_hz>:
{
   1f5e4:	b580      	push	{r7, lr}
   1f5e6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1f5e8:	2000      	movs	r0, #0
   1f5ea:	4b05      	ldr	r3, [pc, #20]	; (1f600 <system_cpu_clock_get_hz+0x1c>)
   1f5ec:	4798      	blx	r3
   1f5ee:	0002      	movs	r2, r0
   1f5f0:	4b04      	ldr	r3, [pc, #16]	; (1f604 <system_cpu_clock_get_hz+0x20>)
   1f5f2:	7a1b      	ldrb	r3, [r3, #8]
   1f5f4:	b2db      	uxtb	r3, r3
   1f5f6:	40da      	lsrs	r2, r3
   1f5f8:	0013      	movs	r3, r2
}
   1f5fa:	0018      	movs	r0, r3
   1f5fc:	46bd      	mov	sp, r7
   1f5fe:	bd80      	pop	{r7, pc}
   1f600:	0002513d 	.word	0x0002513d
   1f604:	40000400 	.word	0x40000400

0001f608 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1f608:	b580      	push	{r7, lr}
   1f60a:	b084      	sub	sp, #16
   1f60c:	af00      	add	r7, sp, #0
   1f60e:	60f8      	str	r0, [r7, #12]
   1f610:	60b9      	str	r1, [r7, #8]
   1f612:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1f614:	68fb      	ldr	r3, [r7, #12]
   1f616:	3b04      	subs	r3, #4
   1f618:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1f61a:	68fb      	ldr	r3, [r7, #12]
   1f61c:	2280      	movs	r2, #128	; 0x80
   1f61e:	0452      	lsls	r2, r2, #17
   1f620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1f622:	68fb      	ldr	r3, [r7, #12]
   1f624:	3b04      	subs	r3, #4
   1f626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1f628:	68ba      	ldr	r2, [r7, #8]
   1f62a:	68fb      	ldr	r3, [r7, #12]
   1f62c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1f62e:	68fb      	ldr	r3, [r7, #12]
   1f630:	3b04      	subs	r3, #4
   1f632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1f634:	4a08      	ldr	r2, [pc, #32]	; (1f658 <pxPortInitialiseStack+0x50>)
   1f636:	68fb      	ldr	r3, [r7, #12]
   1f638:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1f63a:	68fb      	ldr	r3, [r7, #12]
   1f63c:	3b14      	subs	r3, #20
   1f63e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1f640:	687a      	ldr	r2, [r7, #4]
   1f642:	68fb      	ldr	r3, [r7, #12]
   1f644:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1f646:	68fb      	ldr	r3, [r7, #12]
   1f648:	3b20      	subs	r3, #32
   1f64a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1f64c:	68fb      	ldr	r3, [r7, #12]
}
   1f64e:	0018      	movs	r0, r3
   1f650:	46bd      	mov	sp, r7
   1f652:	b004      	add	sp, #16
   1f654:	bd80      	pop	{r7, pc}
   1f656:	46c0      	nop			; (mov r8, r8)
   1f658:	0001f65d 	.word	0x0001f65d

0001f65c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1f65c:	b580      	push	{r7, lr}
   1f65e:	b082      	sub	sp, #8
   1f660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1f662:	2300      	movs	r3, #0
   1f664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1f666:	4b07      	ldr	r3, [pc, #28]	; (1f684 <prvTaskExitError+0x28>)
   1f668:	681b      	ldr	r3, [r3, #0]
   1f66a:	3301      	adds	r3, #1
   1f66c:	d001      	beq.n	1f672 <prvTaskExitError+0x16>
   1f66e:	b672      	cpsid	i
   1f670:	e7fe      	b.n	1f670 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1f672:	b672      	cpsid	i
	while( ulDummy == 0 )
   1f674:	46c0      	nop			; (mov r8, r8)
   1f676:	687b      	ldr	r3, [r7, #4]
   1f678:	2b00      	cmp	r3, #0
   1f67a:	d0fc      	beq.n	1f676 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1f67c:	46c0      	nop			; (mov r8, r8)
   1f67e:	46bd      	mov	sp, r7
   1f680:	b002      	add	sp, #8
   1f682:	bd80      	pop	{r7, pc}
   1f684:	20000010 	.word	0x20000010

0001f688 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1f688:	b580      	push	{r7, lr}
   1f68a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1f68c:	46c0      	nop			; (mov r8, r8)
   1f68e:	46bd      	mov	sp, r7
   1f690:	bd80      	pop	{r7, pc}
	...

0001f6a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1f6a0:	4a0b      	ldr	r2, [pc, #44]	; (1f6d0 <pxCurrentTCBConst2>)
   1f6a2:	6813      	ldr	r3, [r2, #0]
   1f6a4:	6818      	ldr	r0, [r3, #0]
   1f6a6:	3020      	adds	r0, #32
   1f6a8:	f380 8809 	msr	PSP, r0
   1f6ac:	2002      	movs	r0, #2
   1f6ae:	f380 8814 	msr	CONTROL, r0
   1f6b2:	f3bf 8f6f 	isb	sy
   1f6b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1f6b8:	46ae      	mov	lr, r5
   1f6ba:	bc08      	pop	{r3}
   1f6bc:	bc04      	pop	{r2}
   1f6be:	b662      	cpsie	i
   1f6c0:	4718      	bx	r3
   1f6c2:	46c0      	nop			; (mov r8, r8)
   1f6c4:	46c0      	nop			; (mov r8, r8)
   1f6c6:	46c0      	nop			; (mov r8, r8)
   1f6c8:	46c0      	nop			; (mov r8, r8)
   1f6ca:	46c0      	nop			; (mov r8, r8)
   1f6cc:	46c0      	nop			; (mov r8, r8)
   1f6ce:	46c0      	nop			; (mov r8, r8)

0001f6d0 <pxCurrentTCBConst2>:
   1f6d0:	200004b8 	.word	0x200004b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1f6d4:	46c0      	nop			; (mov r8, r8)
   1f6d6:	46c0      	nop			; (mov r8, r8)

0001f6d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1f6d8:	b580      	push	{r7, lr}
   1f6da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1f6dc:	4b0e      	ldr	r3, [pc, #56]	; (1f718 <xPortStartScheduler+0x40>)
   1f6de:	4a0e      	ldr	r2, [pc, #56]	; (1f718 <xPortStartScheduler+0x40>)
   1f6e0:	6812      	ldr	r2, [r2, #0]
   1f6e2:	21ff      	movs	r1, #255	; 0xff
   1f6e4:	0409      	lsls	r1, r1, #16
   1f6e6:	430a      	orrs	r2, r1
   1f6e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1f6ea:	4b0b      	ldr	r3, [pc, #44]	; (1f718 <xPortStartScheduler+0x40>)
   1f6ec:	4a0a      	ldr	r2, [pc, #40]	; (1f718 <xPortStartScheduler+0x40>)
   1f6ee:	6812      	ldr	r2, [r2, #0]
   1f6f0:	21ff      	movs	r1, #255	; 0xff
   1f6f2:	0609      	lsls	r1, r1, #24
   1f6f4:	430a      	orrs	r2, r1
   1f6f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1f6f8:	4b08      	ldr	r3, [pc, #32]	; (1f71c <xPortStartScheduler+0x44>)
   1f6fa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1f6fc:	4b08      	ldr	r3, [pc, #32]	; (1f720 <xPortStartScheduler+0x48>)
   1f6fe:	2200      	movs	r2, #0
   1f700:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1f702:	4b08      	ldr	r3, [pc, #32]	; (1f724 <xPortStartScheduler+0x4c>)
   1f704:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1f706:	4b08      	ldr	r3, [pc, #32]	; (1f728 <xPortStartScheduler+0x50>)
   1f708:	4798      	blx	r3
	prvTaskExitError();
   1f70a:	4b08      	ldr	r3, [pc, #32]	; (1f72c <xPortStartScheduler+0x54>)
   1f70c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1f70e:	2300      	movs	r3, #0
}
   1f710:	0018      	movs	r0, r3
   1f712:	46bd      	mov	sp, r7
   1f714:	bd80      	pop	{r7, pc}
   1f716:	46c0      	nop			; (mov r8, r8)
   1f718:	e000ed20 	.word	0xe000ed20
   1f71c:	0001f849 	.word	0x0001f849
   1f720:	20000010 	.word	0x20000010
   1f724:	0001f6a1 	.word	0x0001f6a1
   1f728:	00020e7d 	.word	0x00020e7d
   1f72c:	0001f65d 	.word	0x0001f65d

0001f730 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1f730:	b580      	push	{r7, lr}
   1f732:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1f734:	4b05      	ldr	r3, [pc, #20]	; (1f74c <vPortYield+0x1c>)
   1f736:	2280      	movs	r2, #128	; 0x80
   1f738:	0552      	lsls	r2, r2, #21
   1f73a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
   1f73c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1f740:	f3bf 8f6f 	isb	sy
}
   1f744:	46c0      	nop			; (mov r8, r8)
   1f746:	46bd      	mov	sp, r7
   1f748:	bd80      	pop	{r7, pc}
   1f74a:	46c0      	nop			; (mov r8, r8)
   1f74c:	e000ed04 	.word	0xe000ed04

0001f750 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1f750:	b580      	push	{r7, lr}
   1f752:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1f754:	b672      	cpsid	i
    uxCriticalNesting++;
   1f756:	4b06      	ldr	r3, [pc, #24]	; (1f770 <vPortEnterCritical+0x20>)
   1f758:	681b      	ldr	r3, [r3, #0]
   1f75a:	1c5a      	adds	r2, r3, #1
   1f75c:	4b04      	ldr	r3, [pc, #16]	; (1f770 <vPortEnterCritical+0x20>)
   1f75e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1f760:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1f764:	f3bf 8f6f 	isb	sy
}
   1f768:	46c0      	nop			; (mov r8, r8)
   1f76a:	46bd      	mov	sp, r7
   1f76c:	bd80      	pop	{r7, pc}
   1f76e:	46c0      	nop			; (mov r8, r8)
   1f770:	20000010 	.word	0x20000010

0001f774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1f774:	b580      	push	{r7, lr}
   1f776:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1f778:	4b09      	ldr	r3, [pc, #36]	; (1f7a0 <vPortExitCritical+0x2c>)
   1f77a:	681b      	ldr	r3, [r3, #0]
   1f77c:	2b00      	cmp	r3, #0
   1f77e:	d101      	bne.n	1f784 <vPortExitCritical+0x10>
   1f780:	b672      	cpsid	i
   1f782:	e7fe      	b.n	1f782 <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1f784:	4b06      	ldr	r3, [pc, #24]	; (1f7a0 <vPortExitCritical+0x2c>)
   1f786:	681b      	ldr	r3, [r3, #0]
   1f788:	1e5a      	subs	r2, r3, #1
   1f78a:	4b05      	ldr	r3, [pc, #20]	; (1f7a0 <vPortExitCritical+0x2c>)
   1f78c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1f78e:	4b04      	ldr	r3, [pc, #16]	; (1f7a0 <vPortExitCritical+0x2c>)
   1f790:	681b      	ldr	r3, [r3, #0]
   1f792:	2b00      	cmp	r3, #0
   1f794:	d100      	bne.n	1f798 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1f796:	b662      	cpsie	i
    }
}
   1f798:	46c0      	nop			; (mov r8, r8)
   1f79a:	46bd      	mov	sp, r7
   1f79c:	bd80      	pop	{r7, pc}
   1f79e:	46c0      	nop			; (mov r8, r8)
   1f7a0:	20000010 	.word	0x20000010

0001f7a4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1f7a4:	f3ef 8010 	mrs	r0, PRIMASK
   1f7a8:	b672      	cpsid	i
   1f7aa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1f7ac:	46c0      	nop			; (mov r8, r8)
   1f7ae:	0018      	movs	r0, r3

0001f7b0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1f7b0:	f380 8810 	msr	PRIMASK, r0
   1f7b4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1f7b6:	46c0      	nop			; (mov r8, r8)
	...

0001f7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1f7c0:	f3ef 8009 	mrs	r0, PSP
   1f7c4:	4b0e      	ldr	r3, [pc, #56]	; (1f800 <pxCurrentTCBConst>)
   1f7c6:	681a      	ldr	r2, [r3, #0]
   1f7c8:	3820      	subs	r0, #32
   1f7ca:	6010      	str	r0, [r2, #0]
   1f7cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1f7ce:	4644      	mov	r4, r8
   1f7d0:	464d      	mov	r5, r9
   1f7d2:	4656      	mov	r6, sl
   1f7d4:	465f      	mov	r7, fp
   1f7d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1f7d8:	b508      	push	{r3, lr}
   1f7da:	b672      	cpsid	i
   1f7dc:	f001 fb4e 	bl	20e7c <vTaskSwitchContext>
   1f7e0:	b662      	cpsie	i
   1f7e2:	bc0c      	pop	{r2, r3}
   1f7e4:	6811      	ldr	r1, [r2, #0]
   1f7e6:	6808      	ldr	r0, [r1, #0]
   1f7e8:	3010      	adds	r0, #16
   1f7ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1f7ec:	46a0      	mov	r8, r4
   1f7ee:	46a9      	mov	r9, r5
   1f7f0:	46b2      	mov	sl, r6
   1f7f2:	46bb      	mov	fp, r7
   1f7f4:	f380 8809 	msr	PSP, r0
   1f7f8:	3820      	subs	r0, #32
   1f7fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1f7fc:	4718      	bx	r3
   1f7fe:	46c0      	nop			; (mov r8, r8)

0001f800 <pxCurrentTCBConst>:
   1f800:	200004b8 	.word	0x200004b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1f804:	46c0      	nop			; (mov r8, r8)
   1f806:	46c0      	nop			; (mov r8, r8)

0001f808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1f808:	b580      	push	{r7, lr}
   1f80a:	b082      	sub	sp, #8
   1f80c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1f80e:	4b0a      	ldr	r3, [pc, #40]	; (1f838 <SysTick_Handler+0x30>)
   1f810:	4798      	blx	r3
   1f812:	0003      	movs	r3, r0
   1f814:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1f816:	4b09      	ldr	r3, [pc, #36]	; (1f83c <SysTick_Handler+0x34>)
   1f818:	4798      	blx	r3
   1f81a:	1e03      	subs	r3, r0, #0
   1f81c:	d003      	beq.n	1f826 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1f81e:	4b08      	ldr	r3, [pc, #32]	; (1f840 <SysTick_Handler+0x38>)
   1f820:	2280      	movs	r2, #128	; 0x80
   1f822:	0552      	lsls	r2, r2, #21
   1f824:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1f826:	687b      	ldr	r3, [r7, #4]
   1f828:	0018      	movs	r0, r3
   1f82a:	4b06      	ldr	r3, [pc, #24]	; (1f844 <SysTick_Handler+0x3c>)
   1f82c:	4798      	blx	r3
}
   1f82e:	46c0      	nop			; (mov r8, r8)
   1f830:	46bd      	mov	sp, r7
   1f832:	b002      	add	sp, #8
   1f834:	bd80      	pop	{r7, pc}
   1f836:	46c0      	nop			; (mov r8, r8)
   1f838:	0001f7a5 	.word	0x0001f7a5
   1f83c:	00020d09 	.word	0x00020d09
   1f840:	e000ed04 	.word	0xe000ed04
   1f844:	0001f7b1 	.word	0x0001f7b1

0001f848 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1f848:	b5b0      	push	{r4, r5, r7, lr}
   1f84a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1f84c:	4b0a      	ldr	r3, [pc, #40]	; (1f878 <prvSetupTimerInterrupt+0x30>)
   1f84e:	2200      	movs	r2, #0
   1f850:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1f852:	4b0a      	ldr	r3, [pc, #40]	; (1f87c <prvSetupTimerInterrupt+0x34>)
   1f854:	2200      	movs	r2, #0
   1f856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1f858:	4c09      	ldr	r4, [pc, #36]	; (1f880 <prvSetupTimerInterrupt+0x38>)
   1f85a:	4b0a      	ldr	r3, [pc, #40]	; (1f884 <prvSetupTimerInterrupt+0x3c>)
   1f85c:	4798      	blx	r3
   1f85e:	4b0a      	ldr	r3, [pc, #40]	; (1f888 <prvSetupTimerInterrupt+0x40>)
   1f860:	22fa      	movs	r2, #250	; 0xfa
   1f862:	0091      	lsls	r1, r2, #2
   1f864:	4798      	blx	r3
   1f866:	0003      	movs	r3, r0
   1f868:	3b01      	subs	r3, #1
   1f86a:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1f86c:	4b02      	ldr	r3, [pc, #8]	; (1f878 <prvSetupTimerInterrupt+0x30>)
   1f86e:	2207      	movs	r2, #7
   1f870:	601a      	str	r2, [r3, #0]
}
   1f872:	46c0      	nop			; (mov r8, r8)
   1f874:	46bd      	mov	sp, r7
   1f876:	bdb0      	pop	{r4, r5, r7, pc}
   1f878:	e000e010 	.word	0xe000e010
   1f87c:	e000e018 	.word	0xe000e018
   1f880:	e000e014 	.word	0xe000e014
   1f884:	0001f5e5 	.word	0x0001f5e5
   1f888:	00026de1 	.word	0x00026de1

0001f88c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1f88c:	b580      	push	{r7, lr}
   1f88e:	b084      	sub	sp, #16
   1f890:	af00      	add	r7, sp, #0
   1f892:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
   1f894:	4b07      	ldr	r3, [pc, #28]	; (1f8b4 <pvPortMalloc+0x28>)
   1f896:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
   1f898:	687b      	ldr	r3, [r7, #4]
   1f89a:	0018      	movs	r0, r3
   1f89c:	4b06      	ldr	r3, [pc, #24]	; (1f8b8 <pvPortMalloc+0x2c>)
   1f89e:	4798      	blx	r3
   1f8a0:	0003      	movs	r3, r0
   1f8a2:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1f8a4:	4b05      	ldr	r3, [pc, #20]	; (1f8bc <pvPortMalloc+0x30>)
   1f8a6:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
   1f8a8:	68fb      	ldr	r3, [r7, #12]
}
   1f8aa:	0018      	movs	r0, r3
   1f8ac:	46bd      	mov	sp, r7
   1f8ae:	b004      	add	sp, #16
   1f8b0:	bd80      	pop	{r7, pc}
   1f8b2:	46c0      	nop			; (mov r8, r8)
   1f8b4:	00020b81 	.word	0x00020b81
   1f8b8:	000295d5 	.word	0x000295d5
   1f8bc:	00020b99 	.word	0x00020b99

0001f8c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1f8c0:	b580      	push	{r7, lr}
   1f8c2:	b082      	sub	sp, #8
   1f8c4:	af00      	add	r7, sp, #0
   1f8c6:	6078      	str	r0, [r7, #4]
	if( pv )
   1f8c8:	687b      	ldr	r3, [r7, #4]
   1f8ca:	2b00      	cmp	r3, #0
   1f8cc:	d007      	beq.n	1f8de <vPortFree+0x1e>
	{
		vTaskSuspendAll();
   1f8ce:	4b06      	ldr	r3, [pc, #24]	; (1f8e8 <vPortFree+0x28>)
   1f8d0:	4798      	blx	r3
		{
			free( pv );
   1f8d2:	687b      	ldr	r3, [r7, #4]
   1f8d4:	0018      	movs	r0, r3
   1f8d6:	4b05      	ldr	r3, [pc, #20]	; (1f8ec <vPortFree+0x2c>)
   1f8d8:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
   1f8da:	4b05      	ldr	r3, [pc, #20]	; (1f8f0 <vPortFree+0x30>)
   1f8dc:	4798      	blx	r3
	}
}
   1f8de:	46c0      	nop			; (mov r8, r8)
   1f8e0:	46bd      	mov	sp, r7
   1f8e2:	b002      	add	sp, #8
   1f8e4:	bd80      	pop	{r7, pc}
   1f8e6:	46c0      	nop			; (mov r8, r8)
   1f8e8:	00020b81 	.word	0x00020b81
   1f8ec:	000295e9 	.word	0x000295e9
   1f8f0:	00020b99 	.word	0x00020b99

0001f8f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1f8f4:	b580      	push	{r7, lr}
   1f8f6:	b082      	sub	sp, #8
   1f8f8:	af00      	add	r7, sp, #0
   1f8fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f8fc:	687b      	ldr	r3, [r7, #4]
   1f8fe:	3308      	adds	r3, #8
   1f900:	001a      	movs	r2, r3
   1f902:	687b      	ldr	r3, [r7, #4]
   1f904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1f906:	687b      	ldr	r3, [r7, #4]
   1f908:	2201      	movs	r2, #1
   1f90a:	4252      	negs	r2, r2
   1f90c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f90e:	687b      	ldr	r3, [r7, #4]
   1f910:	3308      	adds	r3, #8
   1f912:	001a      	movs	r2, r3
   1f914:	687b      	ldr	r3, [r7, #4]
   1f916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f918:	687b      	ldr	r3, [r7, #4]
   1f91a:	3308      	adds	r3, #8
   1f91c:	001a      	movs	r2, r3
   1f91e:	687b      	ldr	r3, [r7, #4]
   1f920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1f922:	687b      	ldr	r3, [r7, #4]
   1f924:	2200      	movs	r2, #0
   1f926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1f928:	46c0      	nop			; (mov r8, r8)
   1f92a:	46bd      	mov	sp, r7
   1f92c:	b002      	add	sp, #8
   1f92e:	bd80      	pop	{r7, pc}

0001f930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1f930:	b580      	push	{r7, lr}
   1f932:	b082      	sub	sp, #8
   1f934:	af00      	add	r7, sp, #0
   1f936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1f938:	687b      	ldr	r3, [r7, #4]
   1f93a:	2200      	movs	r2, #0
   1f93c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1f93e:	46c0      	nop			; (mov r8, r8)
   1f940:	46bd      	mov	sp, r7
   1f942:	b002      	add	sp, #8
   1f944:	bd80      	pop	{r7, pc}

0001f946 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1f946:	b580      	push	{r7, lr}
   1f948:	b084      	sub	sp, #16
   1f94a:	af00      	add	r7, sp, #0
   1f94c:	6078      	str	r0, [r7, #4]
   1f94e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1f950:	687b      	ldr	r3, [r7, #4]
   1f952:	685b      	ldr	r3, [r3, #4]
   1f954:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1f956:	683b      	ldr	r3, [r7, #0]
   1f958:	68fa      	ldr	r2, [r7, #12]
   1f95a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1f95c:	68fb      	ldr	r3, [r7, #12]
   1f95e:	689a      	ldr	r2, [r3, #8]
   1f960:	683b      	ldr	r3, [r7, #0]
   1f962:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1f964:	68fb      	ldr	r3, [r7, #12]
   1f966:	689b      	ldr	r3, [r3, #8]
   1f968:	683a      	ldr	r2, [r7, #0]
   1f96a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1f96c:	68fb      	ldr	r3, [r7, #12]
   1f96e:	683a      	ldr	r2, [r7, #0]
   1f970:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1f972:	683b      	ldr	r3, [r7, #0]
   1f974:	687a      	ldr	r2, [r7, #4]
   1f976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1f978:	687b      	ldr	r3, [r7, #4]
   1f97a:	681b      	ldr	r3, [r3, #0]
   1f97c:	1c5a      	adds	r2, r3, #1
   1f97e:	687b      	ldr	r3, [r7, #4]
   1f980:	601a      	str	r2, [r3, #0]
}
   1f982:	46c0      	nop			; (mov r8, r8)
   1f984:	46bd      	mov	sp, r7
   1f986:	b004      	add	sp, #16
   1f988:	bd80      	pop	{r7, pc}

0001f98a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1f98a:	b580      	push	{r7, lr}
   1f98c:	b084      	sub	sp, #16
   1f98e:	af00      	add	r7, sp, #0
   1f990:	6078      	str	r0, [r7, #4]
   1f992:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1f994:	683b      	ldr	r3, [r7, #0]
   1f996:	681b      	ldr	r3, [r3, #0]
   1f998:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1f99a:	68bb      	ldr	r3, [r7, #8]
   1f99c:	3301      	adds	r3, #1
   1f99e:	d103      	bne.n	1f9a8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1f9a0:	687b      	ldr	r3, [r7, #4]
   1f9a2:	691b      	ldr	r3, [r3, #16]
   1f9a4:	60fb      	str	r3, [r7, #12]
   1f9a6:	e00c      	b.n	1f9c2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1f9a8:	687b      	ldr	r3, [r7, #4]
   1f9aa:	3308      	adds	r3, #8
   1f9ac:	60fb      	str	r3, [r7, #12]
   1f9ae:	e002      	b.n	1f9b6 <vListInsert+0x2c>
   1f9b0:	68fb      	ldr	r3, [r7, #12]
   1f9b2:	685b      	ldr	r3, [r3, #4]
   1f9b4:	60fb      	str	r3, [r7, #12]
   1f9b6:	68fb      	ldr	r3, [r7, #12]
   1f9b8:	685b      	ldr	r3, [r3, #4]
   1f9ba:	681a      	ldr	r2, [r3, #0]
   1f9bc:	68bb      	ldr	r3, [r7, #8]
   1f9be:	429a      	cmp	r2, r3
   1f9c0:	d9f6      	bls.n	1f9b0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1f9c2:	68fb      	ldr	r3, [r7, #12]
   1f9c4:	685a      	ldr	r2, [r3, #4]
   1f9c6:	683b      	ldr	r3, [r7, #0]
   1f9c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1f9ca:	683b      	ldr	r3, [r7, #0]
   1f9cc:	685b      	ldr	r3, [r3, #4]
   1f9ce:	683a      	ldr	r2, [r7, #0]
   1f9d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1f9d2:	683b      	ldr	r3, [r7, #0]
   1f9d4:	68fa      	ldr	r2, [r7, #12]
   1f9d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1f9d8:	68fb      	ldr	r3, [r7, #12]
   1f9da:	683a      	ldr	r2, [r7, #0]
   1f9dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1f9de:	683b      	ldr	r3, [r7, #0]
   1f9e0:	687a      	ldr	r2, [r7, #4]
   1f9e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1f9e4:	687b      	ldr	r3, [r7, #4]
   1f9e6:	681b      	ldr	r3, [r3, #0]
   1f9e8:	1c5a      	adds	r2, r3, #1
   1f9ea:	687b      	ldr	r3, [r7, #4]
   1f9ec:	601a      	str	r2, [r3, #0]
}
   1f9ee:	46c0      	nop			; (mov r8, r8)
   1f9f0:	46bd      	mov	sp, r7
   1f9f2:	b004      	add	sp, #16
   1f9f4:	bd80      	pop	{r7, pc}

0001f9f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1f9f6:	b580      	push	{r7, lr}
   1f9f8:	b084      	sub	sp, #16
   1f9fa:	af00      	add	r7, sp, #0
   1f9fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1f9fe:	687b      	ldr	r3, [r7, #4]
   1fa00:	691b      	ldr	r3, [r3, #16]
   1fa02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1fa04:	687b      	ldr	r3, [r7, #4]
   1fa06:	685b      	ldr	r3, [r3, #4]
   1fa08:	687a      	ldr	r2, [r7, #4]
   1fa0a:	6892      	ldr	r2, [r2, #8]
   1fa0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1fa0e:	687b      	ldr	r3, [r7, #4]
   1fa10:	689b      	ldr	r3, [r3, #8]
   1fa12:	687a      	ldr	r2, [r7, #4]
   1fa14:	6852      	ldr	r2, [r2, #4]
   1fa16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1fa18:	68fb      	ldr	r3, [r7, #12]
   1fa1a:	685a      	ldr	r2, [r3, #4]
   1fa1c:	687b      	ldr	r3, [r7, #4]
   1fa1e:	429a      	cmp	r2, r3
   1fa20:	d103      	bne.n	1fa2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1fa22:	687b      	ldr	r3, [r7, #4]
   1fa24:	689a      	ldr	r2, [r3, #8]
   1fa26:	68fb      	ldr	r3, [r7, #12]
   1fa28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1fa2a:	687b      	ldr	r3, [r7, #4]
   1fa2c:	2200      	movs	r2, #0
   1fa2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1fa30:	68fb      	ldr	r3, [r7, #12]
   1fa32:	681b      	ldr	r3, [r3, #0]
   1fa34:	1e5a      	subs	r2, r3, #1
   1fa36:	68fb      	ldr	r3, [r7, #12]
   1fa38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1fa3a:	68fb      	ldr	r3, [r7, #12]
   1fa3c:	681b      	ldr	r3, [r3, #0]
}
   1fa3e:	0018      	movs	r0, r3
   1fa40:	46bd      	mov	sp, r7
   1fa42:	b004      	add	sp, #16
   1fa44:	bd80      	pop	{r7, pc}
	...

0001fa48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1fa48:	b580      	push	{r7, lr}
   1fa4a:	b084      	sub	sp, #16
   1fa4c:	af00      	add	r7, sp, #0
   1fa4e:	6078      	str	r0, [r7, #4]
   1fa50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fa52:	687b      	ldr	r3, [r7, #4]
   1fa54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1fa56:	68fb      	ldr	r3, [r7, #12]
   1fa58:	2b00      	cmp	r3, #0
   1fa5a:	d101      	bne.n	1fa60 <xQueueGenericReset+0x18>
   1fa5c:	b672      	cpsid	i
   1fa5e:	e7fe      	b.n	1fa5e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1fa60:	4b23      	ldr	r3, [pc, #140]	; (1faf0 <xQueueGenericReset+0xa8>)
   1fa62:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1fa64:	68fb      	ldr	r3, [r7, #12]
   1fa66:	681a      	ldr	r2, [r3, #0]
   1fa68:	68fb      	ldr	r3, [r7, #12]
   1fa6a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1fa6c:	68fb      	ldr	r3, [r7, #12]
   1fa6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fa70:	434b      	muls	r3, r1
   1fa72:	18d2      	adds	r2, r2, r3
   1fa74:	68fb      	ldr	r3, [r7, #12]
   1fa76:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1fa78:	68fb      	ldr	r3, [r7, #12]
   1fa7a:	2200      	movs	r2, #0
   1fa7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1fa7e:	68fb      	ldr	r3, [r7, #12]
   1fa80:	681a      	ldr	r2, [r3, #0]
   1fa82:	68fb      	ldr	r3, [r7, #12]
   1fa84:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1fa86:	68fb      	ldr	r3, [r7, #12]
   1fa88:	681a      	ldr	r2, [r3, #0]
   1fa8a:	68fb      	ldr	r3, [r7, #12]
   1fa8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fa8e:	1e59      	subs	r1, r3, #1
   1fa90:	68fb      	ldr	r3, [r7, #12]
   1fa92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fa94:	434b      	muls	r3, r1
   1fa96:	18d2      	adds	r2, r2, r3
   1fa98:	68fb      	ldr	r3, [r7, #12]
   1fa9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1fa9c:	68fb      	ldr	r3, [r7, #12]
   1fa9e:	2244      	movs	r2, #68	; 0x44
   1faa0:	21ff      	movs	r1, #255	; 0xff
   1faa2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1faa4:	68fb      	ldr	r3, [r7, #12]
   1faa6:	2245      	movs	r2, #69	; 0x45
   1faa8:	21ff      	movs	r1, #255	; 0xff
   1faaa:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1faac:	683b      	ldr	r3, [r7, #0]
   1faae:	2b00      	cmp	r3, #0
   1fab0:	d10d      	bne.n	1face <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1fab2:	68fb      	ldr	r3, [r7, #12]
   1fab4:	691b      	ldr	r3, [r3, #16]
   1fab6:	2b00      	cmp	r3, #0
   1fab8:	d013      	beq.n	1fae2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1faba:	68fb      	ldr	r3, [r7, #12]
   1fabc:	3310      	adds	r3, #16
   1fabe:	0018      	movs	r0, r3
   1fac0:	4b0c      	ldr	r3, [pc, #48]	; (1faf4 <xQueueGenericReset+0xac>)
   1fac2:	4798      	blx	r3
   1fac4:	1e03      	subs	r3, r0, #0
   1fac6:	d00c      	beq.n	1fae2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1fac8:	4b0b      	ldr	r3, [pc, #44]	; (1faf8 <xQueueGenericReset+0xb0>)
   1faca:	4798      	blx	r3
   1facc:	e009      	b.n	1fae2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1face:	68fb      	ldr	r3, [r7, #12]
   1fad0:	3310      	adds	r3, #16
   1fad2:	0018      	movs	r0, r3
   1fad4:	4b09      	ldr	r3, [pc, #36]	; (1fafc <xQueueGenericReset+0xb4>)
   1fad6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1fad8:	68fb      	ldr	r3, [r7, #12]
   1fada:	3324      	adds	r3, #36	; 0x24
   1fadc:	0018      	movs	r0, r3
   1fade:	4b07      	ldr	r3, [pc, #28]	; (1fafc <xQueueGenericReset+0xb4>)
   1fae0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1fae2:	4b07      	ldr	r3, [pc, #28]	; (1fb00 <xQueueGenericReset+0xb8>)
   1fae4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1fae6:	2301      	movs	r3, #1
}
   1fae8:	0018      	movs	r0, r3
   1faea:	46bd      	mov	sp, r7
   1faec:	b004      	add	sp, #16
   1faee:	bd80      	pop	{r7, pc}
   1faf0:	0001f751 	.word	0x0001f751
   1faf4:	00020fb9 	.word	0x00020fb9
   1faf8:	0001f731 	.word	0x0001f731
   1fafc:	0001f8f5 	.word	0x0001f8f5
   1fb00:	0001f775 	.word	0x0001f775

0001fb04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1fb04:	b590      	push	{r4, r7, lr}
   1fb06:	b08b      	sub	sp, #44	; 0x2c
   1fb08:	af02      	add	r7, sp, #8
   1fb0a:	60f8      	str	r0, [r7, #12]
   1fb0c:	60b9      	str	r1, [r7, #8]
   1fb0e:	1dfb      	adds	r3, r7, #7
   1fb10:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1fb12:	68fb      	ldr	r3, [r7, #12]
   1fb14:	2b00      	cmp	r3, #0
   1fb16:	d101      	bne.n	1fb1c <xQueueGenericCreate+0x18>
   1fb18:	b672      	cpsid	i
   1fb1a:	e7fe      	b.n	1fb1a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1fb1c:	68bb      	ldr	r3, [r7, #8]
   1fb1e:	2b00      	cmp	r3, #0
   1fb20:	d102      	bne.n	1fb28 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1fb22:	2300      	movs	r3, #0
   1fb24:	61fb      	str	r3, [r7, #28]
   1fb26:	e003      	b.n	1fb30 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fb28:	68fb      	ldr	r3, [r7, #12]
   1fb2a:	68ba      	ldr	r2, [r7, #8]
   1fb2c:	4353      	muls	r3, r2
   1fb2e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1fb30:	69fb      	ldr	r3, [r7, #28]
   1fb32:	334c      	adds	r3, #76	; 0x4c
   1fb34:	0018      	movs	r0, r3
   1fb36:	4b0c      	ldr	r3, [pc, #48]	; (1fb68 <xQueueGenericCreate+0x64>)
   1fb38:	4798      	blx	r3
   1fb3a:	0003      	movs	r3, r0
   1fb3c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1fb3e:	69bb      	ldr	r3, [r7, #24]
   1fb40:	2b00      	cmp	r3, #0
   1fb42:	d00c      	beq.n	1fb5e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1fb44:	69bb      	ldr	r3, [r7, #24]
   1fb46:	334c      	adds	r3, #76	; 0x4c
   1fb48:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1fb4a:	1dfb      	adds	r3, r7, #7
   1fb4c:	781c      	ldrb	r4, [r3, #0]
   1fb4e:	697a      	ldr	r2, [r7, #20]
   1fb50:	68b9      	ldr	r1, [r7, #8]
   1fb52:	68f8      	ldr	r0, [r7, #12]
   1fb54:	69bb      	ldr	r3, [r7, #24]
   1fb56:	9300      	str	r3, [sp, #0]
   1fb58:	0023      	movs	r3, r4
   1fb5a:	4c04      	ldr	r4, [pc, #16]	; (1fb6c <xQueueGenericCreate+0x68>)
   1fb5c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   1fb5e:	69bb      	ldr	r3, [r7, #24]
	}
   1fb60:	0018      	movs	r0, r3
   1fb62:	46bd      	mov	sp, r7
   1fb64:	b009      	add	sp, #36	; 0x24
   1fb66:	bd90      	pop	{r4, r7, pc}
   1fb68:	0001f88d 	.word	0x0001f88d
   1fb6c:	0001fb71 	.word	0x0001fb71

0001fb70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1fb70:	b580      	push	{r7, lr}
   1fb72:	b084      	sub	sp, #16
   1fb74:	af00      	add	r7, sp, #0
   1fb76:	60f8      	str	r0, [r7, #12]
   1fb78:	60b9      	str	r1, [r7, #8]
   1fb7a:	607a      	str	r2, [r7, #4]
   1fb7c:	001a      	movs	r2, r3
   1fb7e:	1cfb      	adds	r3, r7, #3
   1fb80:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1fb82:	68bb      	ldr	r3, [r7, #8]
   1fb84:	2b00      	cmp	r3, #0
   1fb86:	d103      	bne.n	1fb90 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1fb88:	69bb      	ldr	r3, [r7, #24]
   1fb8a:	69ba      	ldr	r2, [r7, #24]
   1fb8c:	601a      	str	r2, [r3, #0]
   1fb8e:	e002      	b.n	1fb96 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1fb90:	69bb      	ldr	r3, [r7, #24]
   1fb92:	687a      	ldr	r2, [r7, #4]
   1fb94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1fb96:	69bb      	ldr	r3, [r7, #24]
   1fb98:	68fa      	ldr	r2, [r7, #12]
   1fb9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1fb9c:	69bb      	ldr	r3, [r7, #24]
   1fb9e:	68ba      	ldr	r2, [r7, #8]
   1fba0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1fba2:	69bb      	ldr	r3, [r7, #24]
   1fba4:	2101      	movs	r1, #1
   1fba6:	0018      	movs	r0, r3
   1fba8:	4b04      	ldr	r3, [pc, #16]	; (1fbbc <prvInitialiseNewQueue+0x4c>)
   1fbaa:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1fbac:	69bb      	ldr	r3, [r7, #24]
   1fbae:	2200      	movs	r2, #0
   1fbb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1fbb2:	46c0      	nop			; (mov r8, r8)
   1fbb4:	46bd      	mov	sp, r7
   1fbb6:	b004      	add	sp, #16
   1fbb8:	bd80      	pop	{r7, pc}
   1fbba:	46c0      	nop			; (mov r8, r8)
   1fbbc:	0001fa49 	.word	0x0001fa49

0001fbc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1fbc0:	b580      	push	{r7, lr}
   1fbc2:	b08a      	sub	sp, #40	; 0x28
   1fbc4:	af00      	add	r7, sp, #0
   1fbc6:	60f8      	str	r0, [r7, #12]
   1fbc8:	60b9      	str	r1, [r7, #8]
   1fbca:	607a      	str	r2, [r7, #4]
   1fbcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1fbce:	2300      	movs	r3, #0
   1fbd0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fbd2:	68fb      	ldr	r3, [r7, #12]
   1fbd4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1fbd6:	6a3b      	ldr	r3, [r7, #32]
   1fbd8:	2b00      	cmp	r3, #0
   1fbda:	d101      	bne.n	1fbe0 <xQueueGenericSend+0x20>
   1fbdc:	b672      	cpsid	i
   1fbde:	e7fe      	b.n	1fbde <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fbe0:	68bb      	ldr	r3, [r7, #8]
   1fbe2:	2b00      	cmp	r3, #0
   1fbe4:	d103      	bne.n	1fbee <xQueueGenericSend+0x2e>
   1fbe6:	6a3b      	ldr	r3, [r7, #32]
   1fbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fbea:	2b00      	cmp	r3, #0
   1fbec:	d101      	bne.n	1fbf2 <xQueueGenericSend+0x32>
   1fbee:	2301      	movs	r3, #1
   1fbf0:	e000      	b.n	1fbf4 <xQueueGenericSend+0x34>
   1fbf2:	2300      	movs	r3, #0
   1fbf4:	2b00      	cmp	r3, #0
   1fbf6:	d101      	bne.n	1fbfc <xQueueGenericSend+0x3c>
   1fbf8:	b672      	cpsid	i
   1fbfa:	e7fe      	b.n	1fbfa <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1fbfc:	683b      	ldr	r3, [r7, #0]
   1fbfe:	2b02      	cmp	r3, #2
   1fc00:	d103      	bne.n	1fc0a <xQueueGenericSend+0x4a>
   1fc02:	6a3b      	ldr	r3, [r7, #32]
   1fc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fc06:	2b01      	cmp	r3, #1
   1fc08:	d101      	bne.n	1fc0e <xQueueGenericSend+0x4e>
   1fc0a:	2301      	movs	r3, #1
   1fc0c:	e000      	b.n	1fc10 <xQueueGenericSend+0x50>
   1fc0e:	2300      	movs	r3, #0
   1fc10:	2b00      	cmp	r3, #0
   1fc12:	d101      	bne.n	1fc18 <xQueueGenericSend+0x58>
   1fc14:	b672      	cpsid	i
   1fc16:	e7fe      	b.n	1fc16 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1fc18:	4b53      	ldr	r3, [pc, #332]	; (1fd68 <xQueueGenericSend+0x1a8>)
   1fc1a:	4798      	blx	r3
   1fc1c:	1e03      	subs	r3, r0, #0
   1fc1e:	d102      	bne.n	1fc26 <xQueueGenericSend+0x66>
   1fc20:	687b      	ldr	r3, [r7, #4]
   1fc22:	2b00      	cmp	r3, #0
   1fc24:	d101      	bne.n	1fc2a <xQueueGenericSend+0x6a>
   1fc26:	2301      	movs	r3, #1
   1fc28:	e000      	b.n	1fc2c <xQueueGenericSend+0x6c>
   1fc2a:	2300      	movs	r3, #0
   1fc2c:	2b00      	cmp	r3, #0
   1fc2e:	d101      	bne.n	1fc34 <xQueueGenericSend+0x74>
   1fc30:	b672      	cpsid	i
   1fc32:	e7fe      	b.n	1fc32 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1fc34:	4b4d      	ldr	r3, [pc, #308]	; (1fd6c <xQueueGenericSend+0x1ac>)
   1fc36:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1fc38:	6a3b      	ldr	r3, [r7, #32]
   1fc3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fc3c:	6a3b      	ldr	r3, [r7, #32]
   1fc3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fc40:	429a      	cmp	r2, r3
   1fc42:	d302      	bcc.n	1fc4a <xQueueGenericSend+0x8a>
   1fc44:	683b      	ldr	r3, [r7, #0]
   1fc46:	2b02      	cmp	r3, #2
   1fc48:	d12d      	bne.n	1fca6 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1fc4a:	683a      	ldr	r2, [r7, #0]
   1fc4c:	68b9      	ldr	r1, [r7, #8]
   1fc4e:	6a3b      	ldr	r3, [r7, #32]
   1fc50:	0018      	movs	r0, r3
   1fc52:	4b47      	ldr	r3, [pc, #284]	; (1fd70 <xQueueGenericSend+0x1b0>)
   1fc54:	4798      	blx	r3
   1fc56:	0003      	movs	r3, r0
   1fc58:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1fc5a:	6a3b      	ldr	r3, [r7, #32]
   1fc5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fc5e:	2b00      	cmp	r3, #0
   1fc60:	d00a      	beq.n	1fc78 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1fc62:	683a      	ldr	r2, [r7, #0]
   1fc64:	6a3b      	ldr	r3, [r7, #32]
   1fc66:	0011      	movs	r1, r2
   1fc68:	0018      	movs	r0, r3
   1fc6a:	4b42      	ldr	r3, [pc, #264]	; (1fd74 <xQueueGenericSend+0x1b4>)
   1fc6c:	4798      	blx	r3
   1fc6e:	1e03      	subs	r3, r0, #0
   1fc70:	d015      	beq.n	1fc9e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1fc72:	4b41      	ldr	r3, [pc, #260]	; (1fd78 <xQueueGenericSend+0x1b8>)
   1fc74:	4798      	blx	r3
   1fc76:	e012      	b.n	1fc9e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fc78:	6a3b      	ldr	r3, [r7, #32]
   1fc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fc7c:	2b00      	cmp	r3, #0
   1fc7e:	d009      	beq.n	1fc94 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fc80:	6a3b      	ldr	r3, [r7, #32]
   1fc82:	3324      	adds	r3, #36	; 0x24
   1fc84:	0018      	movs	r0, r3
   1fc86:	4b3d      	ldr	r3, [pc, #244]	; (1fd7c <xQueueGenericSend+0x1bc>)
   1fc88:	4798      	blx	r3
   1fc8a:	1e03      	subs	r3, r0, #0
   1fc8c:	d007      	beq.n	1fc9e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1fc8e:	4b3a      	ldr	r3, [pc, #232]	; (1fd78 <xQueueGenericSend+0x1b8>)
   1fc90:	4798      	blx	r3
   1fc92:	e004      	b.n	1fc9e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1fc94:	69fb      	ldr	r3, [r7, #28]
   1fc96:	2b00      	cmp	r3, #0
   1fc98:	d001      	beq.n	1fc9e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1fc9a:	4b37      	ldr	r3, [pc, #220]	; (1fd78 <xQueueGenericSend+0x1b8>)
   1fc9c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1fc9e:	4b38      	ldr	r3, [pc, #224]	; (1fd80 <xQueueGenericSend+0x1c0>)
   1fca0:	4798      	blx	r3
				return pdPASS;
   1fca2:	2301      	movs	r3, #1
   1fca4:	e05c      	b.n	1fd60 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1fca6:	687b      	ldr	r3, [r7, #4]
   1fca8:	2b00      	cmp	r3, #0
   1fcaa:	d103      	bne.n	1fcb4 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1fcac:	4b34      	ldr	r3, [pc, #208]	; (1fd80 <xQueueGenericSend+0x1c0>)
   1fcae:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1fcb0:	2300      	movs	r3, #0
   1fcb2:	e055      	b.n	1fd60 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1fcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fcb6:	2b00      	cmp	r3, #0
   1fcb8:	d106      	bne.n	1fcc8 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1fcba:	2314      	movs	r3, #20
   1fcbc:	18fb      	adds	r3, r7, r3
   1fcbe:	0018      	movs	r0, r3
   1fcc0:	4b30      	ldr	r3, [pc, #192]	; (1fd84 <xQueueGenericSend+0x1c4>)
   1fcc2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1fcc4:	2301      	movs	r3, #1
   1fcc6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1fcc8:	4b2d      	ldr	r3, [pc, #180]	; (1fd80 <xQueueGenericSend+0x1c0>)
   1fcca:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1fccc:	4b2e      	ldr	r3, [pc, #184]	; (1fd88 <xQueueGenericSend+0x1c8>)
   1fcce:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1fcd0:	4b26      	ldr	r3, [pc, #152]	; (1fd6c <xQueueGenericSend+0x1ac>)
   1fcd2:	4798      	blx	r3
   1fcd4:	6a3b      	ldr	r3, [r7, #32]
   1fcd6:	2244      	movs	r2, #68	; 0x44
   1fcd8:	5c9b      	ldrb	r3, [r3, r2]
   1fcda:	b25b      	sxtb	r3, r3
   1fcdc:	3301      	adds	r3, #1
   1fcde:	d103      	bne.n	1fce8 <xQueueGenericSend+0x128>
   1fce0:	6a3b      	ldr	r3, [r7, #32]
   1fce2:	2244      	movs	r2, #68	; 0x44
   1fce4:	2100      	movs	r1, #0
   1fce6:	5499      	strb	r1, [r3, r2]
   1fce8:	6a3b      	ldr	r3, [r7, #32]
   1fcea:	2245      	movs	r2, #69	; 0x45
   1fcec:	5c9b      	ldrb	r3, [r3, r2]
   1fcee:	b25b      	sxtb	r3, r3
   1fcf0:	3301      	adds	r3, #1
   1fcf2:	d103      	bne.n	1fcfc <xQueueGenericSend+0x13c>
   1fcf4:	6a3b      	ldr	r3, [r7, #32]
   1fcf6:	2245      	movs	r2, #69	; 0x45
   1fcf8:	2100      	movs	r1, #0
   1fcfa:	5499      	strb	r1, [r3, r2]
   1fcfc:	4b20      	ldr	r3, [pc, #128]	; (1fd80 <xQueueGenericSend+0x1c0>)
   1fcfe:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1fd00:	1d3a      	adds	r2, r7, #4
   1fd02:	2314      	movs	r3, #20
   1fd04:	18fb      	adds	r3, r7, r3
   1fd06:	0011      	movs	r1, r2
   1fd08:	0018      	movs	r0, r3
   1fd0a:	4b20      	ldr	r3, [pc, #128]	; (1fd8c <xQueueGenericSend+0x1cc>)
   1fd0c:	4798      	blx	r3
   1fd0e:	1e03      	subs	r3, r0, #0
   1fd10:	d11f      	bne.n	1fd52 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1fd12:	6a3b      	ldr	r3, [r7, #32]
   1fd14:	0018      	movs	r0, r3
   1fd16:	4b1e      	ldr	r3, [pc, #120]	; (1fd90 <xQueueGenericSend+0x1d0>)
   1fd18:	4798      	blx	r3
   1fd1a:	1e03      	subs	r3, r0, #0
   1fd1c:	d012      	beq.n	1fd44 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1fd1e:	6a3b      	ldr	r3, [r7, #32]
   1fd20:	3310      	adds	r3, #16
   1fd22:	687a      	ldr	r2, [r7, #4]
   1fd24:	0011      	movs	r1, r2
   1fd26:	0018      	movs	r0, r3
   1fd28:	4b1a      	ldr	r3, [pc, #104]	; (1fd94 <xQueueGenericSend+0x1d4>)
   1fd2a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1fd2c:	6a3b      	ldr	r3, [r7, #32]
   1fd2e:	0018      	movs	r0, r3
   1fd30:	4b19      	ldr	r3, [pc, #100]	; (1fd98 <xQueueGenericSend+0x1d8>)
   1fd32:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1fd34:	4b19      	ldr	r3, [pc, #100]	; (1fd9c <xQueueGenericSend+0x1dc>)
   1fd36:	4798      	blx	r3
   1fd38:	1e03      	subs	r3, r0, #0
   1fd3a:	d000      	beq.n	1fd3e <xQueueGenericSend+0x17e>
   1fd3c:	e77a      	b.n	1fc34 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1fd3e:	4b0e      	ldr	r3, [pc, #56]	; (1fd78 <xQueueGenericSend+0x1b8>)
   1fd40:	4798      	blx	r3
   1fd42:	e777      	b.n	1fc34 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1fd44:	6a3b      	ldr	r3, [r7, #32]
   1fd46:	0018      	movs	r0, r3
   1fd48:	4b13      	ldr	r3, [pc, #76]	; (1fd98 <xQueueGenericSend+0x1d8>)
   1fd4a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1fd4c:	4b13      	ldr	r3, [pc, #76]	; (1fd9c <xQueueGenericSend+0x1dc>)
   1fd4e:	4798      	blx	r3
   1fd50:	e770      	b.n	1fc34 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1fd52:	6a3b      	ldr	r3, [r7, #32]
   1fd54:	0018      	movs	r0, r3
   1fd56:	4b10      	ldr	r3, [pc, #64]	; (1fd98 <xQueueGenericSend+0x1d8>)
   1fd58:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1fd5a:	4b10      	ldr	r3, [pc, #64]	; (1fd9c <xQueueGenericSend+0x1dc>)
   1fd5c:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1fd5e:	2300      	movs	r3, #0
		}
	}
}
   1fd60:	0018      	movs	r0, r3
   1fd62:	46bd      	mov	sp, r7
   1fd64:	b00a      	add	sp, #40	; 0x28
   1fd66:	bd80      	pop	{r7, pc}
   1fd68:	000212f1 	.word	0x000212f1
   1fd6c:	0001f751 	.word	0x0001f751
   1fd70:	00020281 	.word	0x00020281
   1fd74:	00020585 	.word	0x00020585
   1fd78:	0001f731 	.word	0x0001f731
   1fd7c:	00020fb9 	.word	0x00020fb9
   1fd80:	0001f775 	.word	0x0001f775
   1fd84:	00021079 	.word	0x00021079
   1fd88:	00020b81 	.word	0x00020b81
   1fd8c:	000210a1 	.word	0x000210a1
   1fd90:	000204d5 	.word	0x000204d5
   1fd94:	00020f21 	.word	0x00020f21
   1fd98:	000203b1 	.word	0x000203b1
   1fd9c:	00020b99 	.word	0x00020b99

0001fda0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1fda0:	b580      	push	{r7, lr}
   1fda2:	b088      	sub	sp, #32
   1fda4:	af00      	add	r7, sp, #0
   1fda6:	60f8      	str	r0, [r7, #12]
   1fda8:	60b9      	str	r1, [r7, #8]
   1fdaa:	607a      	str	r2, [r7, #4]
   1fdac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fdae:	68fb      	ldr	r3, [r7, #12]
   1fdb0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1fdb2:	69bb      	ldr	r3, [r7, #24]
   1fdb4:	2b00      	cmp	r3, #0
   1fdb6:	d101      	bne.n	1fdbc <xQueueGenericSendFromISR+0x1c>
   1fdb8:	b672      	cpsid	i
   1fdba:	e7fe      	b.n	1fdba <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fdbc:	68bb      	ldr	r3, [r7, #8]
   1fdbe:	2b00      	cmp	r3, #0
   1fdc0:	d103      	bne.n	1fdca <xQueueGenericSendFromISR+0x2a>
   1fdc2:	69bb      	ldr	r3, [r7, #24]
   1fdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fdc6:	2b00      	cmp	r3, #0
   1fdc8:	d101      	bne.n	1fdce <xQueueGenericSendFromISR+0x2e>
   1fdca:	2301      	movs	r3, #1
   1fdcc:	e000      	b.n	1fdd0 <xQueueGenericSendFromISR+0x30>
   1fdce:	2300      	movs	r3, #0
   1fdd0:	2b00      	cmp	r3, #0
   1fdd2:	d101      	bne.n	1fdd8 <xQueueGenericSendFromISR+0x38>
   1fdd4:	b672      	cpsid	i
   1fdd6:	e7fe      	b.n	1fdd6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1fdd8:	683b      	ldr	r3, [r7, #0]
   1fdda:	2b02      	cmp	r3, #2
   1fddc:	d103      	bne.n	1fde6 <xQueueGenericSendFromISR+0x46>
   1fdde:	69bb      	ldr	r3, [r7, #24]
   1fde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fde2:	2b01      	cmp	r3, #1
   1fde4:	d101      	bne.n	1fdea <xQueueGenericSendFromISR+0x4a>
   1fde6:	2301      	movs	r3, #1
   1fde8:	e000      	b.n	1fdec <xQueueGenericSendFromISR+0x4c>
   1fdea:	2300      	movs	r3, #0
   1fdec:	2b00      	cmp	r3, #0
   1fdee:	d101      	bne.n	1fdf4 <xQueueGenericSendFromISR+0x54>
   1fdf0:	b672      	cpsid	i
   1fdf2:	e7fe      	b.n	1fdf2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1fdf4:	4b2d      	ldr	r3, [pc, #180]	; (1feac <xQueueGenericSendFromISR+0x10c>)
   1fdf6:	4798      	blx	r3
   1fdf8:	0003      	movs	r3, r0
   1fdfa:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1fdfc:	69bb      	ldr	r3, [r7, #24]
   1fdfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fe00:	69bb      	ldr	r3, [r7, #24]
   1fe02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1fe04:	429a      	cmp	r2, r3
   1fe06:	d302      	bcc.n	1fe0e <xQueueGenericSendFromISR+0x6e>
   1fe08:	683b      	ldr	r3, [r7, #0]
   1fe0a:	2b02      	cmp	r3, #2
   1fe0c:	d142      	bne.n	1fe94 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1fe0e:	2313      	movs	r3, #19
   1fe10:	18fb      	adds	r3, r7, r3
   1fe12:	69ba      	ldr	r2, [r7, #24]
   1fe14:	2145      	movs	r1, #69	; 0x45
   1fe16:	5c52      	ldrb	r2, [r2, r1]
   1fe18:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1fe1a:	683a      	ldr	r2, [r7, #0]
   1fe1c:	68b9      	ldr	r1, [r7, #8]
   1fe1e:	69bb      	ldr	r3, [r7, #24]
   1fe20:	0018      	movs	r0, r3
   1fe22:	4b23      	ldr	r3, [pc, #140]	; (1feb0 <xQueueGenericSendFromISR+0x110>)
   1fe24:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1fe26:	2313      	movs	r3, #19
   1fe28:	18fb      	adds	r3, r7, r3
   1fe2a:	781b      	ldrb	r3, [r3, #0]
   1fe2c:	b25b      	sxtb	r3, r3
   1fe2e:	3301      	adds	r3, #1
   1fe30:	d124      	bne.n	1fe7c <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1fe32:	69bb      	ldr	r3, [r7, #24]
   1fe34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fe36:	2b00      	cmp	r3, #0
   1fe38:	d00e      	beq.n	1fe58 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1fe3a:	683a      	ldr	r2, [r7, #0]
   1fe3c:	69bb      	ldr	r3, [r7, #24]
   1fe3e:	0011      	movs	r1, r2
   1fe40:	0018      	movs	r0, r3
   1fe42:	4b1c      	ldr	r3, [pc, #112]	; (1feb4 <xQueueGenericSendFromISR+0x114>)
   1fe44:	4798      	blx	r3
   1fe46:	1e03      	subs	r3, r0, #0
   1fe48:	d021      	beq.n	1fe8e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1fe4a:	687b      	ldr	r3, [r7, #4]
   1fe4c:	2b00      	cmp	r3, #0
   1fe4e:	d01e      	beq.n	1fe8e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1fe50:	687b      	ldr	r3, [r7, #4]
   1fe52:	2201      	movs	r2, #1
   1fe54:	601a      	str	r2, [r3, #0]
   1fe56:	e01a      	b.n	1fe8e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1fe58:	69bb      	ldr	r3, [r7, #24]
   1fe5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fe5c:	2b00      	cmp	r3, #0
   1fe5e:	d016      	beq.n	1fe8e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1fe60:	69bb      	ldr	r3, [r7, #24]
   1fe62:	3324      	adds	r3, #36	; 0x24
   1fe64:	0018      	movs	r0, r3
   1fe66:	4b14      	ldr	r3, [pc, #80]	; (1feb8 <xQueueGenericSendFromISR+0x118>)
   1fe68:	4798      	blx	r3
   1fe6a:	1e03      	subs	r3, r0, #0
   1fe6c:	d00f      	beq.n	1fe8e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1fe6e:	687b      	ldr	r3, [r7, #4]
   1fe70:	2b00      	cmp	r3, #0
   1fe72:	d00c      	beq.n	1fe8e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1fe74:	687b      	ldr	r3, [r7, #4]
   1fe76:	2201      	movs	r2, #1
   1fe78:	601a      	str	r2, [r3, #0]
   1fe7a:	e008      	b.n	1fe8e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1fe7c:	2313      	movs	r3, #19
   1fe7e:	18fb      	adds	r3, r7, r3
   1fe80:	781b      	ldrb	r3, [r3, #0]
   1fe82:	3301      	adds	r3, #1
   1fe84:	b2db      	uxtb	r3, r3
   1fe86:	b259      	sxtb	r1, r3
   1fe88:	69bb      	ldr	r3, [r7, #24]
   1fe8a:	2245      	movs	r2, #69	; 0x45
   1fe8c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1fe8e:	2301      	movs	r3, #1
   1fe90:	61fb      	str	r3, [r7, #28]
		{
   1fe92:	e001      	b.n	1fe98 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1fe94:	2300      	movs	r3, #0
   1fe96:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1fe98:	697b      	ldr	r3, [r7, #20]
   1fe9a:	0018      	movs	r0, r3
   1fe9c:	4b07      	ldr	r3, [pc, #28]	; (1febc <xQueueGenericSendFromISR+0x11c>)
   1fe9e:	4798      	blx	r3

	return xReturn;
   1fea0:	69fb      	ldr	r3, [r7, #28]
}
   1fea2:	0018      	movs	r0, r3
   1fea4:	46bd      	mov	sp, r7
   1fea6:	b008      	add	sp, #32
   1fea8:	bd80      	pop	{r7, pc}
   1feaa:	46c0      	nop			; (mov r8, r8)
   1feac:	0001f7a5 	.word	0x0001f7a5
   1feb0:	00020281 	.word	0x00020281
   1feb4:	00020585 	.word	0x00020585
   1feb8:	00020fb9 	.word	0x00020fb9
   1febc:	0001f7b1 	.word	0x0001f7b1

0001fec0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1fec0:	b580      	push	{r7, lr}
   1fec2:	b08a      	sub	sp, #40	; 0x28
   1fec4:	af00      	add	r7, sp, #0
   1fec6:	60f8      	str	r0, [r7, #12]
   1fec8:	60b9      	str	r1, [r7, #8]
   1feca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1fecc:	2300      	movs	r3, #0
   1fece:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1fed0:	68fb      	ldr	r3, [r7, #12]
   1fed2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1fed4:	6a3b      	ldr	r3, [r7, #32]
   1fed6:	2b00      	cmp	r3, #0
   1fed8:	d101      	bne.n	1fede <xQueueReceive+0x1e>
   1feda:	b672      	cpsid	i
   1fedc:	e7fe      	b.n	1fedc <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1fede:	68bb      	ldr	r3, [r7, #8]
   1fee0:	2b00      	cmp	r3, #0
   1fee2:	d103      	bne.n	1feec <xQueueReceive+0x2c>
   1fee4:	6a3b      	ldr	r3, [r7, #32]
   1fee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fee8:	2b00      	cmp	r3, #0
   1feea:	d101      	bne.n	1fef0 <xQueueReceive+0x30>
   1feec:	2301      	movs	r3, #1
   1feee:	e000      	b.n	1fef2 <xQueueReceive+0x32>
   1fef0:	2300      	movs	r3, #0
   1fef2:	2b00      	cmp	r3, #0
   1fef4:	d101      	bne.n	1fefa <xQueueReceive+0x3a>
   1fef6:	b672      	cpsid	i
   1fef8:	e7fe      	b.n	1fef8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1fefa:	4b4c      	ldr	r3, [pc, #304]	; (2002c <xQueueReceive+0x16c>)
   1fefc:	4798      	blx	r3
   1fefe:	1e03      	subs	r3, r0, #0
   1ff00:	d102      	bne.n	1ff08 <xQueueReceive+0x48>
   1ff02:	687b      	ldr	r3, [r7, #4]
   1ff04:	2b00      	cmp	r3, #0
   1ff06:	d101      	bne.n	1ff0c <xQueueReceive+0x4c>
   1ff08:	2301      	movs	r3, #1
   1ff0a:	e000      	b.n	1ff0e <xQueueReceive+0x4e>
   1ff0c:	2300      	movs	r3, #0
   1ff0e:	2b00      	cmp	r3, #0
   1ff10:	d101      	bne.n	1ff16 <xQueueReceive+0x56>
   1ff12:	b672      	cpsid	i
   1ff14:	e7fe      	b.n	1ff14 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1ff16:	4b46      	ldr	r3, [pc, #280]	; (20030 <xQueueReceive+0x170>)
   1ff18:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ff1a:	6a3b      	ldr	r3, [r7, #32]
   1ff1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ff1e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1ff20:	69fb      	ldr	r3, [r7, #28]
   1ff22:	2b00      	cmp	r3, #0
   1ff24:	d01a      	beq.n	1ff5c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1ff26:	68ba      	ldr	r2, [r7, #8]
   1ff28:	6a3b      	ldr	r3, [r7, #32]
   1ff2a:	0011      	movs	r1, r2
   1ff2c:	0018      	movs	r0, r3
   1ff2e:	4b41      	ldr	r3, [pc, #260]	; (20034 <xQueueReceive+0x174>)
   1ff30:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1ff32:	69fb      	ldr	r3, [r7, #28]
   1ff34:	1e5a      	subs	r2, r3, #1
   1ff36:	6a3b      	ldr	r3, [r7, #32]
   1ff38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ff3a:	6a3b      	ldr	r3, [r7, #32]
   1ff3c:	691b      	ldr	r3, [r3, #16]
   1ff3e:	2b00      	cmp	r3, #0
   1ff40:	d008      	beq.n	1ff54 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ff42:	6a3b      	ldr	r3, [r7, #32]
   1ff44:	3310      	adds	r3, #16
   1ff46:	0018      	movs	r0, r3
   1ff48:	4b3b      	ldr	r3, [pc, #236]	; (20038 <xQueueReceive+0x178>)
   1ff4a:	4798      	blx	r3
   1ff4c:	1e03      	subs	r3, r0, #0
   1ff4e:	d001      	beq.n	1ff54 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1ff50:	4b3a      	ldr	r3, [pc, #232]	; (2003c <xQueueReceive+0x17c>)
   1ff52:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1ff54:	4b3a      	ldr	r3, [pc, #232]	; (20040 <xQueueReceive+0x180>)
   1ff56:	4798      	blx	r3
				return pdPASS;
   1ff58:	2301      	movs	r3, #1
   1ff5a:	e062      	b.n	20022 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1ff5c:	687b      	ldr	r3, [r7, #4]
   1ff5e:	2b00      	cmp	r3, #0
   1ff60:	d103      	bne.n	1ff6a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1ff62:	4b37      	ldr	r3, [pc, #220]	; (20040 <xQueueReceive+0x180>)
   1ff64:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1ff66:	2300      	movs	r3, #0
   1ff68:	e05b      	b.n	20022 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   1ff6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ff6c:	2b00      	cmp	r3, #0
   1ff6e:	d106      	bne.n	1ff7e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1ff70:	2314      	movs	r3, #20
   1ff72:	18fb      	adds	r3, r7, r3
   1ff74:	0018      	movs	r0, r3
   1ff76:	4b33      	ldr	r3, [pc, #204]	; (20044 <xQueueReceive+0x184>)
   1ff78:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1ff7a:	2301      	movs	r3, #1
   1ff7c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1ff7e:	4b30      	ldr	r3, [pc, #192]	; (20040 <xQueueReceive+0x180>)
   1ff80:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1ff82:	4b31      	ldr	r3, [pc, #196]	; (20048 <xQueueReceive+0x188>)
   1ff84:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1ff86:	4b2a      	ldr	r3, [pc, #168]	; (20030 <xQueueReceive+0x170>)
   1ff88:	4798      	blx	r3
   1ff8a:	6a3b      	ldr	r3, [r7, #32]
   1ff8c:	2244      	movs	r2, #68	; 0x44
   1ff8e:	5c9b      	ldrb	r3, [r3, r2]
   1ff90:	b25b      	sxtb	r3, r3
   1ff92:	3301      	adds	r3, #1
   1ff94:	d103      	bne.n	1ff9e <xQueueReceive+0xde>
   1ff96:	6a3b      	ldr	r3, [r7, #32]
   1ff98:	2244      	movs	r2, #68	; 0x44
   1ff9a:	2100      	movs	r1, #0
   1ff9c:	5499      	strb	r1, [r3, r2]
   1ff9e:	6a3b      	ldr	r3, [r7, #32]
   1ffa0:	2245      	movs	r2, #69	; 0x45
   1ffa2:	5c9b      	ldrb	r3, [r3, r2]
   1ffa4:	b25b      	sxtb	r3, r3
   1ffa6:	3301      	adds	r3, #1
   1ffa8:	d103      	bne.n	1ffb2 <xQueueReceive+0xf2>
   1ffaa:	6a3b      	ldr	r3, [r7, #32]
   1ffac:	2245      	movs	r2, #69	; 0x45
   1ffae:	2100      	movs	r1, #0
   1ffb0:	5499      	strb	r1, [r3, r2]
   1ffb2:	4b23      	ldr	r3, [pc, #140]	; (20040 <xQueueReceive+0x180>)
   1ffb4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1ffb6:	1d3a      	adds	r2, r7, #4
   1ffb8:	2314      	movs	r3, #20
   1ffba:	18fb      	adds	r3, r7, r3
   1ffbc:	0011      	movs	r1, r2
   1ffbe:	0018      	movs	r0, r3
   1ffc0:	4b22      	ldr	r3, [pc, #136]	; (2004c <xQueueReceive+0x18c>)
   1ffc2:	4798      	blx	r3
   1ffc4:	1e03      	subs	r3, r0, #0
   1ffc6:	d11e      	bne.n	20006 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1ffc8:	6a3b      	ldr	r3, [r7, #32]
   1ffca:	0018      	movs	r0, r3
   1ffcc:	4b20      	ldr	r3, [pc, #128]	; (20050 <xQueueReceive+0x190>)
   1ffce:	4798      	blx	r3
   1ffd0:	1e03      	subs	r3, r0, #0
   1ffd2:	d011      	beq.n	1fff8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1ffd4:	6a3b      	ldr	r3, [r7, #32]
   1ffd6:	3324      	adds	r3, #36	; 0x24
   1ffd8:	687a      	ldr	r2, [r7, #4]
   1ffda:	0011      	movs	r1, r2
   1ffdc:	0018      	movs	r0, r3
   1ffde:	4b1d      	ldr	r3, [pc, #116]	; (20054 <xQueueReceive+0x194>)
   1ffe0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1ffe2:	6a3b      	ldr	r3, [r7, #32]
   1ffe4:	0018      	movs	r0, r3
   1ffe6:	4b1c      	ldr	r3, [pc, #112]	; (20058 <xQueueReceive+0x198>)
   1ffe8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1ffea:	4b1c      	ldr	r3, [pc, #112]	; (2005c <xQueueReceive+0x19c>)
   1ffec:	4798      	blx	r3
   1ffee:	1e03      	subs	r3, r0, #0
   1fff0:	d191      	bne.n	1ff16 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1fff2:	4b12      	ldr	r3, [pc, #72]	; (2003c <xQueueReceive+0x17c>)
   1fff4:	4798      	blx	r3
   1fff6:	e78e      	b.n	1ff16 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1fff8:	6a3b      	ldr	r3, [r7, #32]
   1fffa:	0018      	movs	r0, r3
   1fffc:	4b16      	ldr	r3, [pc, #88]	; (20058 <xQueueReceive+0x198>)
   1fffe:	4798      	blx	r3
				( void ) xTaskResumeAll();
   20000:	4b16      	ldr	r3, [pc, #88]	; (2005c <xQueueReceive+0x19c>)
   20002:	4798      	blx	r3
   20004:	e787      	b.n	1ff16 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   20006:	6a3b      	ldr	r3, [r7, #32]
   20008:	0018      	movs	r0, r3
   2000a:	4b13      	ldr	r3, [pc, #76]	; (20058 <xQueueReceive+0x198>)
   2000c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   2000e:	4b13      	ldr	r3, [pc, #76]	; (2005c <xQueueReceive+0x19c>)
   20010:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   20012:	6a3b      	ldr	r3, [r7, #32]
   20014:	0018      	movs	r0, r3
   20016:	4b0e      	ldr	r3, [pc, #56]	; (20050 <xQueueReceive+0x190>)
   20018:	4798      	blx	r3
   2001a:	1e03      	subs	r3, r0, #0
   2001c:	d100      	bne.n	20020 <xQueueReceive+0x160>
   2001e:	e77a      	b.n	1ff16 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   20020:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   20022:	0018      	movs	r0, r3
   20024:	46bd      	mov	sp, r7
   20026:	b00a      	add	sp, #40	; 0x28
   20028:	bd80      	pop	{r7, pc}
   2002a:	46c0      	nop			; (mov r8, r8)
   2002c:	000212f1 	.word	0x000212f1
   20030:	0001f751 	.word	0x0001f751
   20034:	00020361 	.word	0x00020361
   20038:	00020fb9 	.word	0x00020fb9
   2003c:	0001f731 	.word	0x0001f731
   20040:	0001f775 	.word	0x0001f775
   20044:	00021079 	.word	0x00021079
   20048:	00020b81 	.word	0x00020b81
   2004c:	000210a1 	.word	0x000210a1
   20050:	000204a1 	.word	0x000204a1
   20054:	00020f21 	.word	0x00020f21
   20058:	000203b1 	.word	0x000203b1
   2005c:	00020b99 	.word	0x00020b99

00020060 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   20060:	b580      	push	{r7, lr}
   20062:	b08a      	sub	sp, #40	; 0x28
   20064:	af00      	add	r7, sp, #0
   20066:	6078      	str	r0, [r7, #4]
   20068:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   2006a:	2300      	movs	r3, #0
   2006c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   2006e:	687b      	ldr	r3, [r7, #4]
   20070:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   20072:	2300      	movs	r3, #0
   20074:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   20076:	69fb      	ldr	r3, [r7, #28]
   20078:	2b00      	cmp	r3, #0
   2007a:	d101      	bne.n	20080 <xQueueSemaphoreTake+0x20>
   2007c:	b672      	cpsid	i
   2007e:	e7fe      	b.n	2007e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   20080:	69fb      	ldr	r3, [r7, #28]
   20082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20084:	2b00      	cmp	r3, #0
   20086:	d001      	beq.n	2008c <xQueueSemaphoreTake+0x2c>
   20088:	b672      	cpsid	i
   2008a:	e7fe      	b.n	2008a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   2008c:	4b61      	ldr	r3, [pc, #388]	; (20214 <xQueueSemaphoreTake+0x1b4>)
   2008e:	4798      	blx	r3
   20090:	1e03      	subs	r3, r0, #0
   20092:	d102      	bne.n	2009a <xQueueSemaphoreTake+0x3a>
   20094:	683b      	ldr	r3, [r7, #0]
   20096:	2b00      	cmp	r3, #0
   20098:	d101      	bne.n	2009e <xQueueSemaphoreTake+0x3e>
   2009a:	2301      	movs	r3, #1
   2009c:	e000      	b.n	200a0 <xQueueSemaphoreTake+0x40>
   2009e:	2300      	movs	r3, #0
   200a0:	2b00      	cmp	r3, #0
   200a2:	d101      	bne.n	200a8 <xQueueSemaphoreTake+0x48>
   200a4:	b672      	cpsid	i
   200a6:	e7fe      	b.n	200a6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   200a8:	4b5b      	ldr	r3, [pc, #364]	; (20218 <xQueueSemaphoreTake+0x1b8>)
   200aa:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   200ac:	69fb      	ldr	r3, [r7, #28]
   200ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   200b0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   200b2:	69bb      	ldr	r3, [r7, #24]
   200b4:	2b00      	cmp	r3, #0
   200b6:	d01d      	beq.n	200f4 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   200b8:	69bb      	ldr	r3, [r7, #24]
   200ba:	1e5a      	subs	r2, r3, #1
   200bc:	69fb      	ldr	r3, [r7, #28]
   200be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   200c0:	69fb      	ldr	r3, [r7, #28]
   200c2:	681b      	ldr	r3, [r3, #0]
   200c4:	2b00      	cmp	r3, #0
   200c6:	d104      	bne.n	200d2 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   200c8:	4b54      	ldr	r3, [pc, #336]	; (2021c <xQueueSemaphoreTake+0x1bc>)
   200ca:	4798      	blx	r3
   200cc:	0002      	movs	r2, r0
   200ce:	69fb      	ldr	r3, [r7, #28]
   200d0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   200d2:	69fb      	ldr	r3, [r7, #28]
   200d4:	691b      	ldr	r3, [r3, #16]
   200d6:	2b00      	cmp	r3, #0
   200d8:	d008      	beq.n	200ec <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   200da:	69fb      	ldr	r3, [r7, #28]
   200dc:	3310      	adds	r3, #16
   200de:	0018      	movs	r0, r3
   200e0:	4b4f      	ldr	r3, [pc, #316]	; (20220 <xQueueSemaphoreTake+0x1c0>)
   200e2:	4798      	blx	r3
   200e4:	1e03      	subs	r3, r0, #0
   200e6:	d001      	beq.n	200ec <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   200e8:	4b4e      	ldr	r3, [pc, #312]	; (20224 <xQueueSemaphoreTake+0x1c4>)
   200ea:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   200ec:	4b4e      	ldr	r3, [pc, #312]	; (20228 <xQueueSemaphoreTake+0x1c8>)
   200ee:	4798      	blx	r3
				return pdPASS;
   200f0:	2301      	movs	r3, #1
   200f2:	e08b      	b.n	2020c <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   200f4:	683b      	ldr	r3, [r7, #0]
   200f6:	2b00      	cmp	r3, #0
   200f8:	d108      	bne.n	2010c <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   200fa:	6a3b      	ldr	r3, [r7, #32]
   200fc:	2b00      	cmp	r3, #0
   200fe:	d001      	beq.n	20104 <xQueueSemaphoreTake+0xa4>
   20100:	b672      	cpsid	i
   20102:	e7fe      	b.n	20102 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   20104:	4b48      	ldr	r3, [pc, #288]	; (20228 <xQueueSemaphoreTake+0x1c8>)
   20106:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   20108:	2300      	movs	r3, #0
   2010a:	e07f      	b.n	2020c <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   2010c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2010e:	2b00      	cmp	r3, #0
   20110:	d106      	bne.n	20120 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   20112:	230c      	movs	r3, #12
   20114:	18fb      	adds	r3, r7, r3
   20116:	0018      	movs	r0, r3
   20118:	4b44      	ldr	r3, [pc, #272]	; (2022c <xQueueSemaphoreTake+0x1cc>)
   2011a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   2011c:	2301      	movs	r3, #1
   2011e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   20120:	4b41      	ldr	r3, [pc, #260]	; (20228 <xQueueSemaphoreTake+0x1c8>)
   20122:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   20124:	4b42      	ldr	r3, [pc, #264]	; (20230 <xQueueSemaphoreTake+0x1d0>)
   20126:	4798      	blx	r3
		prvLockQueue( pxQueue );
   20128:	4b3b      	ldr	r3, [pc, #236]	; (20218 <xQueueSemaphoreTake+0x1b8>)
   2012a:	4798      	blx	r3
   2012c:	69fb      	ldr	r3, [r7, #28]
   2012e:	2244      	movs	r2, #68	; 0x44
   20130:	5c9b      	ldrb	r3, [r3, r2]
   20132:	b25b      	sxtb	r3, r3
   20134:	3301      	adds	r3, #1
   20136:	d103      	bne.n	20140 <xQueueSemaphoreTake+0xe0>
   20138:	69fb      	ldr	r3, [r7, #28]
   2013a:	2244      	movs	r2, #68	; 0x44
   2013c:	2100      	movs	r1, #0
   2013e:	5499      	strb	r1, [r3, r2]
   20140:	69fb      	ldr	r3, [r7, #28]
   20142:	2245      	movs	r2, #69	; 0x45
   20144:	5c9b      	ldrb	r3, [r3, r2]
   20146:	b25b      	sxtb	r3, r3
   20148:	3301      	adds	r3, #1
   2014a:	d103      	bne.n	20154 <xQueueSemaphoreTake+0xf4>
   2014c:	69fb      	ldr	r3, [r7, #28]
   2014e:	2245      	movs	r2, #69	; 0x45
   20150:	2100      	movs	r1, #0
   20152:	5499      	strb	r1, [r3, r2]
   20154:	4b34      	ldr	r3, [pc, #208]	; (20228 <xQueueSemaphoreTake+0x1c8>)
   20156:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   20158:	003a      	movs	r2, r7
   2015a:	230c      	movs	r3, #12
   2015c:	18fb      	adds	r3, r7, r3
   2015e:	0011      	movs	r1, r2
   20160:	0018      	movs	r0, r3
   20162:	4b34      	ldr	r3, [pc, #208]	; (20234 <xQueueSemaphoreTake+0x1d4>)
   20164:	4798      	blx	r3
   20166:	1e03      	subs	r3, r0, #0
   20168:	d12e      	bne.n	201c8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   2016a:	69fb      	ldr	r3, [r7, #28]
   2016c:	0018      	movs	r0, r3
   2016e:	4b32      	ldr	r3, [pc, #200]	; (20238 <xQueueSemaphoreTake+0x1d8>)
   20170:	4798      	blx	r3
   20172:	1e03      	subs	r3, r0, #0
   20174:	d021      	beq.n	201ba <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   20176:	69fb      	ldr	r3, [r7, #28]
   20178:	681b      	ldr	r3, [r3, #0]
   2017a:	2b00      	cmp	r3, #0
   2017c:	d10a      	bne.n	20194 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   2017e:	4b26      	ldr	r3, [pc, #152]	; (20218 <xQueueSemaphoreTake+0x1b8>)
   20180:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   20182:	69fb      	ldr	r3, [r7, #28]
   20184:	685b      	ldr	r3, [r3, #4]
   20186:	0018      	movs	r0, r3
   20188:	4b2c      	ldr	r3, [pc, #176]	; (2023c <xQueueSemaphoreTake+0x1dc>)
   2018a:	4798      	blx	r3
   2018c:	0003      	movs	r3, r0
   2018e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   20190:	4b25      	ldr	r3, [pc, #148]	; (20228 <xQueueSemaphoreTake+0x1c8>)
   20192:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   20194:	69fb      	ldr	r3, [r7, #28]
   20196:	3324      	adds	r3, #36	; 0x24
   20198:	683a      	ldr	r2, [r7, #0]
   2019a:	0011      	movs	r1, r2
   2019c:	0018      	movs	r0, r3
   2019e:	4b28      	ldr	r3, [pc, #160]	; (20240 <xQueueSemaphoreTake+0x1e0>)
   201a0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   201a2:	69fb      	ldr	r3, [r7, #28]
   201a4:	0018      	movs	r0, r3
   201a6:	4b27      	ldr	r3, [pc, #156]	; (20244 <xQueueSemaphoreTake+0x1e4>)
   201a8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   201aa:	4b27      	ldr	r3, [pc, #156]	; (20248 <xQueueSemaphoreTake+0x1e8>)
   201ac:	4798      	blx	r3
   201ae:	1e03      	subs	r3, r0, #0
   201b0:	d000      	beq.n	201b4 <xQueueSemaphoreTake+0x154>
   201b2:	e779      	b.n	200a8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   201b4:	4b1b      	ldr	r3, [pc, #108]	; (20224 <xQueueSemaphoreTake+0x1c4>)
   201b6:	4798      	blx	r3
   201b8:	e776      	b.n	200a8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   201ba:	69fb      	ldr	r3, [r7, #28]
   201bc:	0018      	movs	r0, r3
   201be:	4b21      	ldr	r3, [pc, #132]	; (20244 <xQueueSemaphoreTake+0x1e4>)
   201c0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   201c2:	4b21      	ldr	r3, [pc, #132]	; (20248 <xQueueSemaphoreTake+0x1e8>)
   201c4:	4798      	blx	r3
   201c6:	e76f      	b.n	200a8 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   201c8:	69fb      	ldr	r3, [r7, #28]
   201ca:	0018      	movs	r0, r3
   201cc:	4b1d      	ldr	r3, [pc, #116]	; (20244 <xQueueSemaphoreTake+0x1e4>)
   201ce:	4798      	blx	r3
			( void ) xTaskResumeAll();
   201d0:	4b1d      	ldr	r3, [pc, #116]	; (20248 <xQueueSemaphoreTake+0x1e8>)
   201d2:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   201d4:	69fb      	ldr	r3, [r7, #28]
   201d6:	0018      	movs	r0, r3
   201d8:	4b17      	ldr	r3, [pc, #92]	; (20238 <xQueueSemaphoreTake+0x1d8>)
   201da:	4798      	blx	r3
   201dc:	1e03      	subs	r3, r0, #0
   201de:	d100      	bne.n	201e2 <xQueueSemaphoreTake+0x182>
   201e0:	e762      	b.n	200a8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   201e2:	6a3b      	ldr	r3, [r7, #32]
   201e4:	2b00      	cmp	r3, #0
   201e6:	d010      	beq.n	2020a <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   201e8:	4b0b      	ldr	r3, [pc, #44]	; (20218 <xQueueSemaphoreTake+0x1b8>)
   201ea:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   201ec:	69fb      	ldr	r3, [r7, #28]
   201ee:	0018      	movs	r0, r3
   201f0:	4b16      	ldr	r3, [pc, #88]	; (2024c <xQueueSemaphoreTake+0x1ec>)
   201f2:	4798      	blx	r3
   201f4:	0003      	movs	r3, r0
   201f6:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   201f8:	69fb      	ldr	r3, [r7, #28]
   201fa:	685b      	ldr	r3, [r3, #4]
   201fc:	697a      	ldr	r2, [r7, #20]
   201fe:	0011      	movs	r1, r2
   20200:	0018      	movs	r0, r3
   20202:	4b13      	ldr	r3, [pc, #76]	; (20250 <xQueueSemaphoreTake+0x1f0>)
   20204:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   20206:	4b08      	ldr	r3, [pc, #32]	; (20228 <xQueueSemaphoreTake+0x1c8>)
   20208:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   2020a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   2020c:	0018      	movs	r0, r3
   2020e:	46bd      	mov	sp, r7
   20210:	b00a      	add	sp, #40	; 0x28
   20212:	bd80      	pop	{r7, pc}
   20214:	000212f1 	.word	0x000212f1
   20218:	0001f751 	.word	0x0001f751
   2021c:	000215bd 	.word	0x000215bd
   20220:	00020fb9 	.word	0x00020fb9
   20224:	0001f731 	.word	0x0001f731
   20228:	0001f775 	.word	0x0001f775
   2022c:	00021079 	.word	0x00021079
   20230:	00020b81 	.word	0x00020b81
   20234:	000210a1 	.word	0x000210a1
   20238:	000204a1 	.word	0x000204a1
   2023c:	00021329 	.word	0x00021329
   20240:	00020f21 	.word	0x00020f21
   20244:	000203b1 	.word	0x000203b1
   20248:	00020b99 	.word	0x00020b99
   2024c:	00020255 	.word	0x00020255
   20250:	000214cd 	.word	0x000214cd

00020254 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   20254:	b580      	push	{r7, lr}
   20256:	b084      	sub	sp, #16
   20258:	af00      	add	r7, sp, #0
   2025a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   2025c:	687b      	ldr	r3, [r7, #4]
   2025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20260:	2b00      	cmp	r3, #0
   20262:	d006      	beq.n	20272 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   20264:	687b      	ldr	r3, [r7, #4]
   20266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   20268:	681b      	ldr	r3, [r3, #0]
   2026a:	2205      	movs	r2, #5
   2026c:	1ad3      	subs	r3, r2, r3
   2026e:	60fb      	str	r3, [r7, #12]
   20270:	e001      	b.n	20276 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   20272:	2300      	movs	r3, #0
   20274:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   20276:	68fb      	ldr	r3, [r7, #12]
	}
   20278:	0018      	movs	r0, r3
   2027a:	46bd      	mov	sp, r7
   2027c:	b004      	add	sp, #16
   2027e:	bd80      	pop	{r7, pc}

00020280 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   20280:	b580      	push	{r7, lr}
   20282:	b086      	sub	sp, #24
   20284:	af00      	add	r7, sp, #0
   20286:	60f8      	str	r0, [r7, #12]
   20288:	60b9      	str	r1, [r7, #8]
   2028a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   2028c:	2300      	movs	r3, #0
   2028e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   20290:	68fb      	ldr	r3, [r7, #12]
   20292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   20294:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   20296:	68fb      	ldr	r3, [r7, #12]
   20298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2029a:	2b00      	cmp	r3, #0
   2029c:	d10e      	bne.n	202bc <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   2029e:	68fb      	ldr	r3, [r7, #12]
   202a0:	681b      	ldr	r3, [r3, #0]
   202a2:	2b00      	cmp	r3, #0
   202a4:	d14e      	bne.n	20344 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   202a6:	68fb      	ldr	r3, [r7, #12]
   202a8:	685b      	ldr	r3, [r3, #4]
   202aa:	0018      	movs	r0, r3
   202ac:	4b2a      	ldr	r3, [pc, #168]	; (20358 <prvCopyDataToQueue+0xd8>)
   202ae:	4798      	blx	r3
   202b0:	0003      	movs	r3, r0
   202b2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   202b4:	68fb      	ldr	r3, [r7, #12]
   202b6:	2200      	movs	r2, #0
   202b8:	605a      	str	r2, [r3, #4]
   202ba:	e043      	b.n	20344 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   202bc:	687b      	ldr	r3, [r7, #4]
   202be:	2b00      	cmp	r3, #0
   202c0:	d119      	bne.n	202f6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   202c2:	68fb      	ldr	r3, [r7, #12]
   202c4:	6898      	ldr	r0, [r3, #8]
   202c6:	68fb      	ldr	r3, [r7, #12]
   202c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   202ca:	68bb      	ldr	r3, [r7, #8]
   202cc:	0019      	movs	r1, r3
   202ce:	4b23      	ldr	r3, [pc, #140]	; (2035c <prvCopyDataToQueue+0xdc>)
   202d0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   202d2:	68fb      	ldr	r3, [r7, #12]
   202d4:	689a      	ldr	r2, [r3, #8]
   202d6:	68fb      	ldr	r3, [r7, #12]
   202d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   202da:	18d2      	adds	r2, r2, r3
   202dc:	68fb      	ldr	r3, [r7, #12]
   202de:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   202e0:	68fb      	ldr	r3, [r7, #12]
   202e2:	689a      	ldr	r2, [r3, #8]
   202e4:	68fb      	ldr	r3, [r7, #12]
   202e6:	685b      	ldr	r3, [r3, #4]
   202e8:	429a      	cmp	r2, r3
   202ea:	d32b      	bcc.n	20344 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   202ec:	68fb      	ldr	r3, [r7, #12]
   202ee:	681a      	ldr	r2, [r3, #0]
   202f0:	68fb      	ldr	r3, [r7, #12]
   202f2:	609a      	str	r2, [r3, #8]
   202f4:	e026      	b.n	20344 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   202f6:	68fb      	ldr	r3, [r7, #12]
   202f8:	68d8      	ldr	r0, [r3, #12]
   202fa:	68fb      	ldr	r3, [r7, #12]
   202fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   202fe:	68bb      	ldr	r3, [r7, #8]
   20300:	0019      	movs	r1, r3
   20302:	4b16      	ldr	r3, [pc, #88]	; (2035c <prvCopyDataToQueue+0xdc>)
   20304:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   20306:	68fb      	ldr	r3, [r7, #12]
   20308:	68da      	ldr	r2, [r3, #12]
   2030a:	68fb      	ldr	r3, [r7, #12]
   2030c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2030e:	425b      	negs	r3, r3
   20310:	18d2      	adds	r2, r2, r3
   20312:	68fb      	ldr	r3, [r7, #12]
   20314:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   20316:	68fb      	ldr	r3, [r7, #12]
   20318:	68da      	ldr	r2, [r3, #12]
   2031a:	68fb      	ldr	r3, [r7, #12]
   2031c:	681b      	ldr	r3, [r3, #0]
   2031e:	429a      	cmp	r2, r3
   20320:	d207      	bcs.n	20332 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   20322:	68fb      	ldr	r3, [r7, #12]
   20324:	685a      	ldr	r2, [r3, #4]
   20326:	68fb      	ldr	r3, [r7, #12]
   20328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2032a:	425b      	negs	r3, r3
   2032c:	18d2      	adds	r2, r2, r3
   2032e:	68fb      	ldr	r3, [r7, #12]
   20330:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   20332:	687b      	ldr	r3, [r7, #4]
   20334:	2b02      	cmp	r3, #2
   20336:	d105      	bne.n	20344 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   20338:	693b      	ldr	r3, [r7, #16]
   2033a:	2b00      	cmp	r3, #0
   2033c:	d002      	beq.n	20344 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   2033e:	693b      	ldr	r3, [r7, #16]
   20340:	3b01      	subs	r3, #1
   20342:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   20344:	693b      	ldr	r3, [r7, #16]
   20346:	1c5a      	adds	r2, r3, #1
   20348:	68fb      	ldr	r3, [r7, #12]
   2034a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   2034c:	697b      	ldr	r3, [r7, #20]
}
   2034e:	0018      	movs	r0, r3
   20350:	46bd      	mov	sp, r7
   20352:	b006      	add	sp, #24
   20354:	bd80      	pop	{r7, pc}
   20356:	46c0      	nop			; (mov r8, r8)
   20358:	0002140d 	.word	0x0002140d
   2035c:	00029621 	.word	0x00029621

00020360 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   20360:	b580      	push	{r7, lr}
   20362:	b082      	sub	sp, #8
   20364:	af00      	add	r7, sp, #0
   20366:	6078      	str	r0, [r7, #4]
   20368:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   2036a:	687b      	ldr	r3, [r7, #4]
   2036c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2036e:	2b00      	cmp	r3, #0
   20370:	d018      	beq.n	203a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   20372:	687b      	ldr	r3, [r7, #4]
   20374:	68da      	ldr	r2, [r3, #12]
   20376:	687b      	ldr	r3, [r7, #4]
   20378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2037a:	18d2      	adds	r2, r2, r3
   2037c:	687b      	ldr	r3, [r7, #4]
   2037e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   20380:	687b      	ldr	r3, [r7, #4]
   20382:	68da      	ldr	r2, [r3, #12]
   20384:	687b      	ldr	r3, [r7, #4]
   20386:	685b      	ldr	r3, [r3, #4]
   20388:	429a      	cmp	r2, r3
   2038a:	d303      	bcc.n	20394 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   2038c:	687b      	ldr	r3, [r7, #4]
   2038e:	681a      	ldr	r2, [r3, #0]
   20390:	687b      	ldr	r3, [r7, #4]
   20392:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   20394:	687b      	ldr	r3, [r7, #4]
   20396:	68d9      	ldr	r1, [r3, #12]
   20398:	687b      	ldr	r3, [r7, #4]
   2039a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   2039c:	683b      	ldr	r3, [r7, #0]
   2039e:	0018      	movs	r0, r3
   203a0:	4b02      	ldr	r3, [pc, #8]	; (203ac <prvCopyDataFromQueue+0x4c>)
   203a2:	4798      	blx	r3
	}
}
   203a4:	46c0      	nop			; (mov r8, r8)
   203a6:	46bd      	mov	sp, r7
   203a8:	b002      	add	sp, #8
   203aa:	bd80      	pop	{r7, pc}
   203ac:	00029621 	.word	0x00029621

000203b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   203b0:	b580      	push	{r7, lr}
   203b2:	b084      	sub	sp, #16
   203b4:	af00      	add	r7, sp, #0
   203b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   203b8:	4b34      	ldr	r3, [pc, #208]	; (2048c <prvUnlockQueue+0xdc>)
   203ba:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   203bc:	230f      	movs	r3, #15
   203be:	18fb      	adds	r3, r7, r3
   203c0:	687a      	ldr	r2, [r7, #4]
   203c2:	2145      	movs	r1, #69	; 0x45
   203c4:	5c52      	ldrb	r2, [r2, r1]
   203c6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   203c8:	e022      	b.n	20410 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   203ca:	687b      	ldr	r3, [r7, #4]
   203cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   203ce:	2b00      	cmp	r3, #0
   203d0:	d009      	beq.n	203e6 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   203d2:	687b      	ldr	r3, [r7, #4]
   203d4:	2100      	movs	r1, #0
   203d6:	0018      	movs	r0, r3
   203d8:	4b2d      	ldr	r3, [pc, #180]	; (20490 <prvUnlockQueue+0xe0>)
   203da:	4798      	blx	r3
   203dc:	1e03      	subs	r3, r0, #0
   203de:	d00f      	beq.n	20400 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   203e0:	4b2c      	ldr	r3, [pc, #176]	; (20494 <prvUnlockQueue+0xe4>)
   203e2:	4798      	blx	r3
   203e4:	e00c      	b.n	20400 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   203e6:	687b      	ldr	r3, [r7, #4]
   203e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   203ea:	2b00      	cmp	r3, #0
   203ec:	d017      	beq.n	2041e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   203ee:	687b      	ldr	r3, [r7, #4]
   203f0:	3324      	adds	r3, #36	; 0x24
   203f2:	0018      	movs	r0, r3
   203f4:	4b28      	ldr	r3, [pc, #160]	; (20498 <prvUnlockQueue+0xe8>)
   203f6:	4798      	blx	r3
   203f8:	1e03      	subs	r3, r0, #0
   203fa:	d001      	beq.n	20400 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   203fc:	4b25      	ldr	r3, [pc, #148]	; (20494 <prvUnlockQueue+0xe4>)
   203fe:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   20400:	230f      	movs	r3, #15
   20402:	18fb      	adds	r3, r7, r3
   20404:	781b      	ldrb	r3, [r3, #0]
   20406:	3b01      	subs	r3, #1
   20408:	b2da      	uxtb	r2, r3
   2040a:	230f      	movs	r3, #15
   2040c:	18fb      	adds	r3, r7, r3
   2040e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   20410:	230f      	movs	r3, #15
   20412:	18fb      	adds	r3, r7, r3
   20414:	781b      	ldrb	r3, [r3, #0]
   20416:	b25b      	sxtb	r3, r3
   20418:	2b00      	cmp	r3, #0
   2041a:	dcd6      	bgt.n	203ca <prvUnlockQueue+0x1a>
   2041c:	e000      	b.n	20420 <prvUnlockQueue+0x70>
						break;
   2041e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   20420:	687b      	ldr	r3, [r7, #4]
   20422:	2245      	movs	r2, #69	; 0x45
   20424:	21ff      	movs	r1, #255	; 0xff
   20426:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   20428:	4b1c      	ldr	r3, [pc, #112]	; (2049c <prvUnlockQueue+0xec>)
   2042a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   2042c:	4b17      	ldr	r3, [pc, #92]	; (2048c <prvUnlockQueue+0xdc>)
   2042e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   20430:	230e      	movs	r3, #14
   20432:	18fb      	adds	r3, r7, r3
   20434:	687a      	ldr	r2, [r7, #4]
   20436:	2144      	movs	r1, #68	; 0x44
   20438:	5c52      	ldrb	r2, [r2, r1]
   2043a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   2043c:	e014      	b.n	20468 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   2043e:	687b      	ldr	r3, [r7, #4]
   20440:	691b      	ldr	r3, [r3, #16]
   20442:	2b00      	cmp	r3, #0
   20444:	d017      	beq.n	20476 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   20446:	687b      	ldr	r3, [r7, #4]
   20448:	3310      	adds	r3, #16
   2044a:	0018      	movs	r0, r3
   2044c:	4b12      	ldr	r3, [pc, #72]	; (20498 <prvUnlockQueue+0xe8>)
   2044e:	4798      	blx	r3
   20450:	1e03      	subs	r3, r0, #0
   20452:	d001      	beq.n	20458 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   20454:	4b0f      	ldr	r3, [pc, #60]	; (20494 <prvUnlockQueue+0xe4>)
   20456:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   20458:	230e      	movs	r3, #14
   2045a:	18fb      	adds	r3, r7, r3
   2045c:	781b      	ldrb	r3, [r3, #0]
   2045e:	3b01      	subs	r3, #1
   20460:	b2da      	uxtb	r2, r3
   20462:	230e      	movs	r3, #14
   20464:	18fb      	adds	r3, r7, r3
   20466:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   20468:	230e      	movs	r3, #14
   2046a:	18fb      	adds	r3, r7, r3
   2046c:	781b      	ldrb	r3, [r3, #0]
   2046e:	b25b      	sxtb	r3, r3
   20470:	2b00      	cmp	r3, #0
   20472:	dce4      	bgt.n	2043e <prvUnlockQueue+0x8e>
   20474:	e000      	b.n	20478 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   20476:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   20478:	687b      	ldr	r3, [r7, #4]
   2047a:	2244      	movs	r2, #68	; 0x44
   2047c:	21ff      	movs	r1, #255	; 0xff
   2047e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   20480:	4b06      	ldr	r3, [pc, #24]	; (2049c <prvUnlockQueue+0xec>)
   20482:	4798      	blx	r3
}
   20484:	46c0      	nop			; (mov r8, r8)
   20486:	46bd      	mov	sp, r7
   20488:	b004      	add	sp, #16
   2048a:	bd80      	pop	{r7, pc}
   2048c:	0001f751 	.word	0x0001f751
   20490:	00020585 	.word	0x00020585
   20494:	0002114d 	.word	0x0002114d
   20498:	00020fb9 	.word	0x00020fb9
   2049c:	0001f775 	.word	0x0001f775

000204a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   204a0:	b580      	push	{r7, lr}
   204a2:	b084      	sub	sp, #16
   204a4:	af00      	add	r7, sp, #0
   204a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   204a8:	4b08      	ldr	r3, [pc, #32]	; (204cc <prvIsQueueEmpty+0x2c>)
   204aa:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   204ac:	687b      	ldr	r3, [r7, #4]
   204ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   204b0:	2b00      	cmp	r3, #0
   204b2:	d102      	bne.n	204ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   204b4:	2301      	movs	r3, #1
   204b6:	60fb      	str	r3, [r7, #12]
   204b8:	e001      	b.n	204be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   204ba:	2300      	movs	r3, #0
   204bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   204be:	4b04      	ldr	r3, [pc, #16]	; (204d0 <prvIsQueueEmpty+0x30>)
   204c0:	4798      	blx	r3

	return xReturn;
   204c2:	68fb      	ldr	r3, [r7, #12]
}
   204c4:	0018      	movs	r0, r3
   204c6:	46bd      	mov	sp, r7
   204c8:	b004      	add	sp, #16
   204ca:	bd80      	pop	{r7, pc}
   204cc:	0001f751 	.word	0x0001f751
   204d0:	0001f775 	.word	0x0001f775

000204d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   204d4:	b580      	push	{r7, lr}
   204d6:	b084      	sub	sp, #16
   204d8:	af00      	add	r7, sp, #0
   204da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   204dc:	4b09      	ldr	r3, [pc, #36]	; (20504 <prvIsQueueFull+0x30>)
   204de:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   204e0:	687b      	ldr	r3, [r7, #4]
   204e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   204e4:	687b      	ldr	r3, [r7, #4]
   204e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   204e8:	429a      	cmp	r2, r3
   204ea:	d102      	bne.n	204f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   204ec:	2301      	movs	r3, #1
   204ee:	60fb      	str	r3, [r7, #12]
   204f0:	e001      	b.n	204f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   204f2:	2300      	movs	r3, #0
   204f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   204f6:	4b04      	ldr	r3, [pc, #16]	; (20508 <prvIsQueueFull+0x34>)
   204f8:	4798      	blx	r3

	return xReturn;
   204fa:	68fb      	ldr	r3, [r7, #12]
}
   204fc:	0018      	movs	r0, r3
   204fe:	46bd      	mov	sp, r7
   20500:	b004      	add	sp, #16
   20502:	bd80      	pop	{r7, pc}
   20504:	0001f751 	.word	0x0001f751
   20508:	0001f775 	.word	0x0001f775

0002050c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   2050c:	b580      	push	{r7, lr}
   2050e:	b086      	sub	sp, #24
   20510:	af00      	add	r7, sp, #0
   20512:	60f8      	str	r0, [r7, #12]
   20514:	60b9      	str	r1, [r7, #8]
   20516:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   20518:	68fb      	ldr	r3, [r7, #12]
   2051a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   2051c:	4b15      	ldr	r3, [pc, #84]	; (20574 <vQueueWaitForMessageRestricted+0x68>)
   2051e:	4798      	blx	r3
   20520:	697b      	ldr	r3, [r7, #20]
   20522:	2244      	movs	r2, #68	; 0x44
   20524:	5c9b      	ldrb	r3, [r3, r2]
   20526:	b25b      	sxtb	r3, r3
   20528:	3301      	adds	r3, #1
   2052a:	d103      	bne.n	20534 <vQueueWaitForMessageRestricted+0x28>
   2052c:	697b      	ldr	r3, [r7, #20]
   2052e:	2244      	movs	r2, #68	; 0x44
   20530:	2100      	movs	r1, #0
   20532:	5499      	strb	r1, [r3, r2]
   20534:	697b      	ldr	r3, [r7, #20]
   20536:	2245      	movs	r2, #69	; 0x45
   20538:	5c9b      	ldrb	r3, [r3, r2]
   2053a:	b25b      	sxtb	r3, r3
   2053c:	3301      	adds	r3, #1
   2053e:	d103      	bne.n	20548 <vQueueWaitForMessageRestricted+0x3c>
   20540:	697b      	ldr	r3, [r7, #20]
   20542:	2245      	movs	r2, #69	; 0x45
   20544:	2100      	movs	r1, #0
   20546:	5499      	strb	r1, [r3, r2]
   20548:	4b0b      	ldr	r3, [pc, #44]	; (20578 <vQueueWaitForMessageRestricted+0x6c>)
   2054a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   2054c:	697b      	ldr	r3, [r7, #20]
   2054e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   20550:	2b00      	cmp	r3, #0
   20552:	d106      	bne.n	20562 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   20554:	697b      	ldr	r3, [r7, #20]
   20556:	3324      	adds	r3, #36	; 0x24
   20558:	687a      	ldr	r2, [r7, #4]
   2055a:	68b9      	ldr	r1, [r7, #8]
   2055c:	0018      	movs	r0, r3
   2055e:	4b07      	ldr	r3, [pc, #28]	; (2057c <vQueueWaitForMessageRestricted+0x70>)
   20560:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   20562:	697b      	ldr	r3, [r7, #20]
   20564:	0018      	movs	r0, r3
   20566:	4b06      	ldr	r3, [pc, #24]	; (20580 <vQueueWaitForMessageRestricted+0x74>)
   20568:	4798      	blx	r3
	}
   2056a:	46c0      	nop			; (mov r8, r8)
   2056c:	46bd      	mov	sp, r7
   2056e:	b006      	add	sp, #24
   20570:	bd80      	pop	{r7, pc}
   20572:	46c0      	nop			; (mov r8, r8)
   20574:	0001f751 	.word	0x0001f751
   20578:	0001f775 	.word	0x0001f775
   2057c:	00020f65 	.word	0x00020f65
   20580:	000203b1 	.word	0x000203b1

00020584 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   20584:	b580      	push	{r7, lr}
   20586:	b086      	sub	sp, #24
   20588:	af00      	add	r7, sp, #0
   2058a:	6078      	str	r0, [r7, #4]
   2058c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   2058e:	687b      	ldr	r3, [r7, #4]
   20590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20592:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   20594:	2300      	movs	r3, #0
   20596:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   20598:	693b      	ldr	r3, [r7, #16]
   2059a:	2b00      	cmp	r3, #0
   2059c:	d101      	bne.n	205a2 <prvNotifyQueueSetContainer+0x1e>
   2059e:	b672      	cpsid	i
   205a0:	e7fe      	b.n	205a0 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   205a2:	693b      	ldr	r3, [r7, #16]
   205a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   205a6:	693b      	ldr	r3, [r7, #16]
   205a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   205aa:	429a      	cmp	r2, r3
   205ac:	d301      	bcc.n	205b2 <prvNotifyQueueSetContainer+0x2e>
   205ae:	b672      	cpsid	i
   205b0:	e7fe      	b.n	205b0 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   205b2:	693b      	ldr	r3, [r7, #16]
   205b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   205b6:	693b      	ldr	r3, [r7, #16]
   205b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   205ba:	429a      	cmp	r2, r3
   205bc:	d22a      	bcs.n	20614 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   205be:	230f      	movs	r3, #15
   205c0:	18fb      	adds	r3, r7, r3
   205c2:	693a      	ldr	r2, [r7, #16]
   205c4:	2145      	movs	r1, #69	; 0x45
   205c6:	5c52      	ldrb	r2, [r2, r1]
   205c8:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   205ca:	683a      	ldr	r2, [r7, #0]
   205cc:	1d39      	adds	r1, r7, #4
   205ce:	693b      	ldr	r3, [r7, #16]
   205d0:	0018      	movs	r0, r3
   205d2:	4b13      	ldr	r3, [pc, #76]	; (20620 <prvNotifyQueueSetContainer+0x9c>)
   205d4:	4798      	blx	r3
   205d6:	0003      	movs	r3, r0
   205d8:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   205da:	230f      	movs	r3, #15
   205dc:	18fb      	adds	r3, r7, r3
   205de:	781b      	ldrb	r3, [r3, #0]
   205e0:	b25b      	sxtb	r3, r3
   205e2:	3301      	adds	r3, #1
   205e4:	d10d      	bne.n	20602 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   205e6:	693b      	ldr	r3, [r7, #16]
   205e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   205ea:	2b00      	cmp	r3, #0
   205ec:	d012      	beq.n	20614 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   205ee:	693b      	ldr	r3, [r7, #16]
   205f0:	3324      	adds	r3, #36	; 0x24
   205f2:	0018      	movs	r0, r3
   205f4:	4b0b      	ldr	r3, [pc, #44]	; (20624 <prvNotifyQueueSetContainer+0xa0>)
   205f6:	4798      	blx	r3
   205f8:	1e03      	subs	r3, r0, #0
   205fa:	d00b      	beq.n	20614 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   205fc:	2301      	movs	r3, #1
   205fe:	617b      	str	r3, [r7, #20]
   20600:	e008      	b.n	20614 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   20602:	230f      	movs	r3, #15
   20604:	18fb      	adds	r3, r7, r3
   20606:	781b      	ldrb	r3, [r3, #0]
   20608:	3301      	adds	r3, #1
   2060a:	b2db      	uxtb	r3, r3
   2060c:	b259      	sxtb	r1, r3
   2060e:	693b      	ldr	r3, [r7, #16]
   20610:	2245      	movs	r2, #69	; 0x45
   20612:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   20614:	697b      	ldr	r3, [r7, #20]
	}
   20616:	0018      	movs	r0, r3
   20618:	46bd      	mov	sp, r7
   2061a:	b006      	add	sp, #24
   2061c:	bd80      	pop	{r7, pc}
   2061e:	46c0      	nop			; (mov r8, r8)
   20620:	00020281 	.word	0x00020281
   20624:	00020fb9 	.word	0x00020fb9

00020628 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   20628:	b590      	push	{r4, r7, lr}
   2062a:	b08d      	sub	sp, #52	; 0x34
   2062c:	af04      	add	r7, sp, #16
   2062e:	60f8      	str	r0, [r7, #12]
   20630:	60b9      	str	r1, [r7, #8]
   20632:	603b      	str	r3, [r7, #0]
   20634:	1dbb      	adds	r3, r7, #6
   20636:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20638:	1dbb      	adds	r3, r7, #6
   2063a:	881b      	ldrh	r3, [r3, #0]
   2063c:	009b      	lsls	r3, r3, #2
   2063e:	0018      	movs	r0, r3
   20640:	4b1d      	ldr	r3, [pc, #116]	; (206b8 <xTaskCreate+0x90>)
   20642:	4798      	blx	r3
   20644:	0003      	movs	r3, r0
   20646:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   20648:	697b      	ldr	r3, [r7, #20]
   2064a:	2b00      	cmp	r3, #0
   2064c:	d010      	beq.n	20670 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   2064e:	2050      	movs	r0, #80	; 0x50
   20650:	4b19      	ldr	r3, [pc, #100]	; (206b8 <xTaskCreate+0x90>)
   20652:	4798      	blx	r3
   20654:	0003      	movs	r3, r0
   20656:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   20658:	69fb      	ldr	r3, [r7, #28]
   2065a:	2b00      	cmp	r3, #0
   2065c:	d003      	beq.n	20666 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   2065e:	69fb      	ldr	r3, [r7, #28]
   20660:	697a      	ldr	r2, [r7, #20]
   20662:	631a      	str	r2, [r3, #48]	; 0x30
   20664:	e006      	b.n	20674 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   20666:	697b      	ldr	r3, [r7, #20]
   20668:	0018      	movs	r0, r3
   2066a:	4b14      	ldr	r3, [pc, #80]	; (206bc <xTaskCreate+0x94>)
   2066c:	4798      	blx	r3
   2066e:	e001      	b.n	20674 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   20670:	2300      	movs	r3, #0
   20672:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   20674:	69fb      	ldr	r3, [r7, #28]
   20676:	2b00      	cmp	r3, #0
   20678:	d016      	beq.n	206a8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   2067a:	1dbb      	adds	r3, r7, #6
   2067c:	881a      	ldrh	r2, [r3, #0]
   2067e:	683c      	ldr	r4, [r7, #0]
   20680:	68b9      	ldr	r1, [r7, #8]
   20682:	68f8      	ldr	r0, [r7, #12]
   20684:	2300      	movs	r3, #0
   20686:	9303      	str	r3, [sp, #12]
   20688:	69fb      	ldr	r3, [r7, #28]
   2068a:	9302      	str	r3, [sp, #8]
   2068c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2068e:	9301      	str	r3, [sp, #4]
   20690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20692:	9300      	str	r3, [sp, #0]
   20694:	0023      	movs	r3, r4
   20696:	4c0a      	ldr	r4, [pc, #40]	; (206c0 <xTaskCreate+0x98>)
   20698:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   2069a:	69fb      	ldr	r3, [r7, #28]
   2069c:	0018      	movs	r0, r3
   2069e:	4b09      	ldr	r3, [pc, #36]	; (206c4 <xTaskCreate+0x9c>)
   206a0:	4798      	blx	r3
			xReturn = pdPASS;
   206a2:	2301      	movs	r3, #1
   206a4:	61bb      	str	r3, [r7, #24]
   206a6:	e002      	b.n	206ae <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   206a8:	2301      	movs	r3, #1
   206aa:	425b      	negs	r3, r3
   206ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   206ae:	69bb      	ldr	r3, [r7, #24]
	}
   206b0:	0018      	movs	r0, r3
   206b2:	46bd      	mov	sp, r7
   206b4:	b009      	add	sp, #36	; 0x24
   206b6:	bd90      	pop	{r4, r7, pc}
   206b8:	0001f88d 	.word	0x0001f88d
   206bc:	0001f8c1 	.word	0x0001f8c1
   206c0:	000206c9 	.word	0x000206c9
   206c4:	000207c5 	.word	0x000207c5

000206c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   206c8:	b580      	push	{r7, lr}
   206ca:	b086      	sub	sp, #24
   206cc:	af00      	add	r7, sp, #0
   206ce:	60f8      	str	r0, [r7, #12]
   206d0:	60b9      	str	r1, [r7, #8]
   206d2:	607a      	str	r2, [r7, #4]
   206d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   206d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   206d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   206da:	687b      	ldr	r3, [r7, #4]
   206dc:	4936      	ldr	r1, [pc, #216]	; (207b8 <prvInitialiseNewTask+0xf0>)
   206de:	468c      	mov	ip, r1
   206e0:	4463      	add	r3, ip
   206e2:	009b      	lsls	r3, r3, #2
   206e4:	18d3      	adds	r3, r2, r3
   206e6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   206e8:	693b      	ldr	r3, [r7, #16]
   206ea:	2207      	movs	r2, #7
   206ec:	4393      	bics	r3, r2
   206ee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   206f0:	693b      	ldr	r3, [r7, #16]
   206f2:	2207      	movs	r2, #7
   206f4:	4013      	ands	r3, r2
   206f6:	d001      	beq.n	206fc <prvInitialiseNewTask+0x34>
   206f8:	b672      	cpsid	i
   206fa:	e7fe      	b.n	206fa <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   206fc:	2300      	movs	r3, #0
   206fe:	617b      	str	r3, [r7, #20]
   20700:	e013      	b.n	2072a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   20702:	68ba      	ldr	r2, [r7, #8]
   20704:	697b      	ldr	r3, [r7, #20]
   20706:	18d3      	adds	r3, r2, r3
   20708:	7818      	ldrb	r0, [r3, #0]
   2070a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2070c:	2134      	movs	r1, #52	; 0x34
   2070e:	697b      	ldr	r3, [r7, #20]
   20710:	18d3      	adds	r3, r2, r3
   20712:	185b      	adds	r3, r3, r1
   20714:	1c02      	adds	r2, r0, #0
   20716:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   20718:	68ba      	ldr	r2, [r7, #8]
   2071a:	697b      	ldr	r3, [r7, #20]
   2071c:	18d3      	adds	r3, r2, r3
   2071e:	781b      	ldrb	r3, [r3, #0]
   20720:	2b00      	cmp	r3, #0
   20722:	d006      	beq.n	20732 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   20724:	697b      	ldr	r3, [r7, #20]
   20726:	3301      	adds	r3, #1
   20728:	617b      	str	r3, [r7, #20]
   2072a:	697b      	ldr	r3, [r7, #20]
   2072c:	2b09      	cmp	r3, #9
   2072e:	d9e8      	bls.n	20702 <prvInitialiseNewTask+0x3a>
   20730:	e000      	b.n	20734 <prvInitialiseNewTask+0x6c>
		{
			break;
   20732:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   20734:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20736:	223d      	movs	r2, #61	; 0x3d
   20738:	2100      	movs	r1, #0
   2073a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   2073c:	6a3b      	ldr	r3, [r7, #32]
   2073e:	2b04      	cmp	r3, #4
   20740:	d901      	bls.n	20746 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   20742:	2304      	movs	r3, #4
   20744:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   20746:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20748:	6a3a      	ldr	r2, [r7, #32]
   2074a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   2074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2074e:	6a3a      	ldr	r2, [r7, #32]
   20750:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
   20752:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20754:	2200      	movs	r2, #0
   20756:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   20758:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2075a:	3304      	adds	r3, #4
   2075c:	0018      	movs	r0, r3
   2075e:	4b17      	ldr	r3, [pc, #92]	; (207bc <prvInitialiseNewTask+0xf4>)
   20760:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   20762:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20764:	3318      	adds	r3, #24
   20766:	0018      	movs	r0, r3
   20768:	4b14      	ldr	r3, [pc, #80]	; (207bc <prvInitialiseNewTask+0xf4>)
   2076a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   2076c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2076e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20770:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20772:	6a3b      	ldr	r3, [r7, #32]
   20774:	2205      	movs	r2, #5
   20776:	1ad2      	subs	r2, r2, r3
   20778:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2077a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   2077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2077e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20780:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   20782:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20784:	2200      	movs	r2, #0
   20786:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   20788:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2078a:	224c      	movs	r2, #76	; 0x4c
   2078c:	2100      	movs	r1, #0
   2078e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   20790:	683a      	ldr	r2, [r7, #0]
   20792:	68f9      	ldr	r1, [r7, #12]
   20794:	693b      	ldr	r3, [r7, #16]
   20796:	0018      	movs	r0, r3
   20798:	4b09      	ldr	r3, [pc, #36]	; (207c0 <prvInitialiseNewTask+0xf8>)
   2079a:	4798      	blx	r3
   2079c:	0002      	movs	r2, r0
   2079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   207a0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   207a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   207a4:	2b00      	cmp	r3, #0
   207a6:	d002      	beq.n	207ae <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   207a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   207aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   207ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   207ae:	46c0      	nop			; (mov r8, r8)
   207b0:	46bd      	mov	sp, r7
   207b2:	b006      	add	sp, #24
   207b4:	bd80      	pop	{r7, pc}
   207b6:	46c0      	nop			; (mov r8, r8)
   207b8:	3fffffff 	.word	0x3fffffff
   207bc:	0001f931 	.word	0x0001f931
   207c0:	0001f609 	.word	0x0001f609

000207c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   207c4:	b580      	push	{r7, lr}
   207c6:	b082      	sub	sp, #8
   207c8:	af00      	add	r7, sp, #0
   207ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   207cc:	4b29      	ldr	r3, [pc, #164]	; (20874 <prvAddNewTaskToReadyList+0xb0>)
   207ce:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   207d0:	4b29      	ldr	r3, [pc, #164]	; (20878 <prvAddNewTaskToReadyList+0xb4>)
   207d2:	681b      	ldr	r3, [r3, #0]
   207d4:	1c5a      	adds	r2, r3, #1
   207d6:	4b28      	ldr	r3, [pc, #160]	; (20878 <prvAddNewTaskToReadyList+0xb4>)
   207d8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   207da:	4b28      	ldr	r3, [pc, #160]	; (2087c <prvAddNewTaskToReadyList+0xb8>)
   207dc:	681b      	ldr	r3, [r3, #0]
   207de:	2b00      	cmp	r3, #0
   207e0:	d109      	bne.n	207f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   207e2:	4b26      	ldr	r3, [pc, #152]	; (2087c <prvAddNewTaskToReadyList+0xb8>)
   207e4:	687a      	ldr	r2, [r7, #4]
   207e6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   207e8:	4b23      	ldr	r3, [pc, #140]	; (20878 <prvAddNewTaskToReadyList+0xb4>)
   207ea:	681b      	ldr	r3, [r3, #0]
   207ec:	2b01      	cmp	r3, #1
   207ee:	d110      	bne.n	20812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   207f0:	4b23      	ldr	r3, [pc, #140]	; (20880 <prvAddNewTaskToReadyList+0xbc>)
   207f2:	4798      	blx	r3
   207f4:	e00d      	b.n	20812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   207f6:	4b23      	ldr	r3, [pc, #140]	; (20884 <prvAddNewTaskToReadyList+0xc0>)
   207f8:	681b      	ldr	r3, [r3, #0]
   207fa:	2b00      	cmp	r3, #0
   207fc:	d109      	bne.n	20812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   207fe:	4b1f      	ldr	r3, [pc, #124]	; (2087c <prvAddNewTaskToReadyList+0xb8>)
   20800:	681b      	ldr	r3, [r3, #0]
   20802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20804:	687b      	ldr	r3, [r7, #4]
   20806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20808:	429a      	cmp	r2, r3
   2080a:	d802      	bhi.n	20812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   2080c:	4b1b      	ldr	r3, [pc, #108]	; (2087c <prvAddNewTaskToReadyList+0xb8>)
   2080e:	687a      	ldr	r2, [r7, #4]
   20810:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   20812:	4b1d      	ldr	r3, [pc, #116]	; (20888 <prvAddNewTaskToReadyList+0xc4>)
   20814:	681b      	ldr	r3, [r3, #0]
   20816:	1c5a      	adds	r2, r3, #1
   20818:	4b1b      	ldr	r3, [pc, #108]	; (20888 <prvAddNewTaskToReadyList+0xc4>)
   2081a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   2081c:	687b      	ldr	r3, [r7, #4]
   2081e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20820:	4b1a      	ldr	r3, [pc, #104]	; (2088c <prvAddNewTaskToReadyList+0xc8>)
   20822:	681b      	ldr	r3, [r3, #0]
   20824:	429a      	cmp	r2, r3
   20826:	d903      	bls.n	20830 <prvAddNewTaskToReadyList+0x6c>
   20828:	687b      	ldr	r3, [r7, #4]
   2082a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2082c:	4b17      	ldr	r3, [pc, #92]	; (2088c <prvAddNewTaskToReadyList+0xc8>)
   2082e:	601a      	str	r2, [r3, #0]
   20830:	687b      	ldr	r3, [r7, #4]
   20832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20834:	0013      	movs	r3, r2
   20836:	009b      	lsls	r3, r3, #2
   20838:	189b      	adds	r3, r3, r2
   2083a:	009b      	lsls	r3, r3, #2
   2083c:	4a14      	ldr	r2, [pc, #80]	; (20890 <prvAddNewTaskToReadyList+0xcc>)
   2083e:	189a      	adds	r2, r3, r2
   20840:	687b      	ldr	r3, [r7, #4]
   20842:	3304      	adds	r3, #4
   20844:	0019      	movs	r1, r3
   20846:	0010      	movs	r0, r2
   20848:	4b12      	ldr	r3, [pc, #72]	; (20894 <prvAddNewTaskToReadyList+0xd0>)
   2084a:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   2084c:	4b12      	ldr	r3, [pc, #72]	; (20898 <prvAddNewTaskToReadyList+0xd4>)
   2084e:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   20850:	4b0c      	ldr	r3, [pc, #48]	; (20884 <prvAddNewTaskToReadyList+0xc0>)
   20852:	681b      	ldr	r3, [r3, #0]
   20854:	2b00      	cmp	r3, #0
   20856:	d008      	beq.n	2086a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   20858:	4b08      	ldr	r3, [pc, #32]	; (2087c <prvAddNewTaskToReadyList+0xb8>)
   2085a:	681b      	ldr	r3, [r3, #0]
   2085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2085e:	687b      	ldr	r3, [r7, #4]
   20860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20862:	429a      	cmp	r2, r3
   20864:	d201      	bcs.n	2086a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   20866:	4b0d      	ldr	r3, [pc, #52]	; (2089c <prvAddNewTaskToReadyList+0xd8>)
   20868:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   2086a:	46c0      	nop			; (mov r8, r8)
   2086c:	46bd      	mov	sp, r7
   2086e:	b002      	add	sp, #8
   20870:	bd80      	pop	{r7, pc}
   20872:	46c0      	nop			; (mov r8, r8)
   20874:	0001f751 	.word	0x0001f751
   20878:	20000590 	.word	0x20000590
   2087c:	200004b8 	.word	0x200004b8
   20880:	00021189 	.word	0x00021189
   20884:	2000059c 	.word	0x2000059c
   20888:	200005ac 	.word	0x200005ac
   2088c:	20000598 	.word	0x20000598
   20890:	200004bc 	.word	0x200004bc
   20894:	0001f947 	.word	0x0001f947
   20898:	0001f775 	.word	0x0001f775
   2089c:	0001f731 	.word	0x0001f731

000208a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   208a0:	b580      	push	{r7, lr}
   208a2:	b086      	sub	sp, #24
   208a4:	af00      	add	r7, sp, #0
   208a6:	6078      	str	r0, [r7, #4]
   208a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   208aa:	2300      	movs	r3, #0
   208ac:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   208ae:	687b      	ldr	r3, [r7, #4]
   208b0:	2b00      	cmp	r3, #0
   208b2:	d101      	bne.n	208b8 <vTaskDelayUntil+0x18>
   208b4:	b672      	cpsid	i
   208b6:	e7fe      	b.n	208b6 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
   208b8:	683b      	ldr	r3, [r7, #0]
   208ba:	2b00      	cmp	r3, #0
   208bc:	d101      	bne.n	208c2 <vTaskDelayUntil+0x22>
   208be:	b672      	cpsid	i
   208c0:	e7fe      	b.n	208c0 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
   208c2:	4b23      	ldr	r3, [pc, #140]	; (20950 <vTaskDelayUntil+0xb0>)
   208c4:	681b      	ldr	r3, [r3, #0]
   208c6:	2b00      	cmp	r3, #0
   208c8:	d001      	beq.n	208ce <vTaskDelayUntil+0x2e>
   208ca:	b672      	cpsid	i
   208cc:	e7fe      	b.n	208cc <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
   208ce:	4b21      	ldr	r3, [pc, #132]	; (20954 <vTaskDelayUntil+0xb4>)
   208d0:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   208d2:	4b21      	ldr	r3, [pc, #132]	; (20958 <vTaskDelayUntil+0xb8>)
   208d4:	681b      	ldr	r3, [r3, #0]
   208d6:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   208d8:	687b      	ldr	r3, [r7, #4]
   208da:	681a      	ldr	r2, [r3, #0]
   208dc:	683b      	ldr	r3, [r7, #0]
   208de:	18d3      	adds	r3, r2, r3
   208e0:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   208e2:	687b      	ldr	r3, [r7, #4]
   208e4:	681a      	ldr	r2, [r3, #0]
   208e6:	693b      	ldr	r3, [r7, #16]
   208e8:	429a      	cmp	r2, r3
   208ea:	d90b      	bls.n	20904 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   208ec:	687b      	ldr	r3, [r7, #4]
   208ee:	681a      	ldr	r2, [r3, #0]
   208f0:	68fb      	ldr	r3, [r7, #12]
   208f2:	429a      	cmp	r2, r3
   208f4:	d911      	bls.n	2091a <vTaskDelayUntil+0x7a>
   208f6:	68fa      	ldr	r2, [r7, #12]
   208f8:	693b      	ldr	r3, [r7, #16]
   208fa:	429a      	cmp	r2, r3
   208fc:	d90d      	bls.n	2091a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   208fe:	2301      	movs	r3, #1
   20900:	617b      	str	r3, [r7, #20]
   20902:	e00a      	b.n	2091a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   20904:	687b      	ldr	r3, [r7, #4]
   20906:	681a      	ldr	r2, [r3, #0]
   20908:	68fb      	ldr	r3, [r7, #12]
   2090a:	429a      	cmp	r2, r3
   2090c:	d803      	bhi.n	20916 <vTaskDelayUntil+0x76>
   2090e:	68fa      	ldr	r2, [r7, #12]
   20910:	693b      	ldr	r3, [r7, #16]
   20912:	429a      	cmp	r2, r3
   20914:	d901      	bls.n	2091a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
   20916:	2301      	movs	r3, #1
   20918:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   2091a:	687b      	ldr	r3, [r7, #4]
   2091c:	68fa      	ldr	r2, [r7, #12]
   2091e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   20920:	697b      	ldr	r3, [r7, #20]
   20922:	2b00      	cmp	r3, #0
   20924:	d006      	beq.n	20934 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
   20926:	68fa      	ldr	r2, [r7, #12]
   20928:	693b      	ldr	r3, [r7, #16]
   2092a:	1ad3      	subs	r3, r2, r3
   2092c:	2100      	movs	r1, #0
   2092e:	0018      	movs	r0, r3
   20930:	4b0a      	ldr	r3, [pc, #40]	; (2095c <vTaskDelayUntil+0xbc>)
   20932:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   20934:	4b0a      	ldr	r3, [pc, #40]	; (20960 <vTaskDelayUntil+0xc0>)
   20936:	4798      	blx	r3
   20938:	0003      	movs	r3, r0
   2093a:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   2093c:	68bb      	ldr	r3, [r7, #8]
   2093e:	2b00      	cmp	r3, #0
   20940:	d101      	bne.n	20946 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
   20942:	4b08      	ldr	r3, [pc, #32]	; (20964 <vTaskDelayUntil+0xc4>)
   20944:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   20946:	46c0      	nop			; (mov r8, r8)
   20948:	46bd      	mov	sp, r7
   2094a:	b006      	add	sp, #24
   2094c:	bd80      	pop	{r7, pc}
   2094e:	46c0      	nop			; (mov r8, r8)
   20950:	200005b8 	.word	0x200005b8
   20954:	00020b81 	.word	0x00020b81
   20958:	20000594 	.word	0x20000594
   2095c:	00021779 	.word	0x00021779
   20960:	00020b99 	.word	0x00020b99
   20964:	0001f731 	.word	0x0001f731

00020968 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   20968:	b580      	push	{r7, lr}
   2096a:	b084      	sub	sp, #16
   2096c:	af00      	add	r7, sp, #0
   2096e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   20970:	2300      	movs	r3, #0
   20972:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   20974:	687b      	ldr	r3, [r7, #4]
   20976:	2b00      	cmp	r3, #0
   20978:	d010      	beq.n	2099c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   2097a:	4b0d      	ldr	r3, [pc, #52]	; (209b0 <vTaskDelay+0x48>)
   2097c:	681b      	ldr	r3, [r3, #0]
   2097e:	2b00      	cmp	r3, #0
   20980:	d001      	beq.n	20986 <vTaskDelay+0x1e>
   20982:	b672      	cpsid	i
   20984:	e7fe      	b.n	20984 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   20986:	4b0b      	ldr	r3, [pc, #44]	; (209b4 <vTaskDelay+0x4c>)
   20988:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   2098a:	687b      	ldr	r3, [r7, #4]
   2098c:	2100      	movs	r1, #0
   2098e:	0018      	movs	r0, r3
   20990:	4b09      	ldr	r3, [pc, #36]	; (209b8 <vTaskDelay+0x50>)
   20992:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   20994:	4b09      	ldr	r3, [pc, #36]	; (209bc <vTaskDelay+0x54>)
   20996:	4798      	blx	r3
   20998:	0003      	movs	r3, r0
   2099a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   2099c:	68fb      	ldr	r3, [r7, #12]
   2099e:	2b00      	cmp	r3, #0
   209a0:	d101      	bne.n	209a6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   209a2:	4b07      	ldr	r3, [pc, #28]	; (209c0 <vTaskDelay+0x58>)
   209a4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   209a6:	46c0      	nop			; (mov r8, r8)
   209a8:	46bd      	mov	sp, r7
   209aa:	b004      	add	sp, #16
   209ac:	bd80      	pop	{r7, pc}
   209ae:	46c0      	nop			; (mov r8, r8)
   209b0:	200005b8 	.word	0x200005b8
   209b4:	00020b81 	.word	0x00020b81
   209b8:	00021779 	.word	0x00021779
   209bc:	00020b99 	.word	0x00020b99
   209c0:	0001f731 	.word	0x0001f731

000209c4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   209c4:	b580      	push	{r7, lr}
   209c6:	b086      	sub	sp, #24
   209c8:	af00      	add	r7, sp, #0
   209ca:	6078      	str	r0, [r7, #4]
   209cc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   209ce:	2300      	movs	r3, #0
   209d0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
   209d2:	683b      	ldr	r3, [r7, #0]
   209d4:	2b04      	cmp	r3, #4
   209d6:	d901      	bls.n	209dc <vTaskPrioritySet+0x18>
   209d8:	b672      	cpsid	i
   209da:	e7fe      	b.n	209da <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   209dc:	683b      	ldr	r3, [r7, #0]
   209de:	2b04      	cmp	r3, #4
   209e0:	d901      	bls.n	209e6 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   209e2:	2304      	movs	r3, #4
   209e4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   209e6:	4b3d      	ldr	r3, [pc, #244]	; (20adc <vTaskPrioritySet+0x118>)
   209e8:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   209ea:	687b      	ldr	r3, [r7, #4]
   209ec:	2b00      	cmp	r3, #0
   209ee:	d102      	bne.n	209f6 <vTaskPrioritySet+0x32>
   209f0:	4b3b      	ldr	r3, [pc, #236]	; (20ae0 <vTaskPrioritySet+0x11c>)
   209f2:	681b      	ldr	r3, [r3, #0]
   209f4:	e000      	b.n	209f8 <vTaskPrioritySet+0x34>
   209f6:	687b      	ldr	r3, [r7, #4]
   209f8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
   209fa:	693b      	ldr	r3, [r7, #16]
   209fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   209fe:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   20a00:	68fa      	ldr	r2, [r7, #12]
   20a02:	683b      	ldr	r3, [r7, #0]
   20a04:	429a      	cmp	r2, r3
   20a06:	d062      	beq.n	20ace <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   20a08:	683a      	ldr	r2, [r7, #0]
   20a0a:	68fb      	ldr	r3, [r7, #12]
   20a0c:	429a      	cmp	r2, r3
   20a0e:	d90d      	bls.n	20a2c <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
   20a10:	4b33      	ldr	r3, [pc, #204]	; (20ae0 <vTaskPrioritySet+0x11c>)
   20a12:	681b      	ldr	r3, [r3, #0]
   20a14:	693a      	ldr	r2, [r7, #16]
   20a16:	429a      	cmp	r2, r3
   20a18:	d00f      	beq.n	20a3a <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   20a1a:	4b31      	ldr	r3, [pc, #196]	; (20ae0 <vTaskPrioritySet+0x11c>)
   20a1c:	681b      	ldr	r3, [r3, #0]
   20a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a20:	683b      	ldr	r3, [r7, #0]
   20a22:	429a      	cmp	r2, r3
   20a24:	d809      	bhi.n	20a3a <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
   20a26:	2301      	movs	r3, #1
   20a28:	617b      	str	r3, [r7, #20]
   20a2a:	e006      	b.n	20a3a <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   20a2c:	4b2c      	ldr	r3, [pc, #176]	; (20ae0 <vTaskPrioritySet+0x11c>)
   20a2e:	681b      	ldr	r3, [r3, #0]
   20a30:	693a      	ldr	r2, [r7, #16]
   20a32:	429a      	cmp	r2, r3
   20a34:	d101      	bne.n	20a3a <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   20a36:	2301      	movs	r3, #1
   20a38:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   20a3a:	693b      	ldr	r3, [r7, #16]
   20a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20a3e:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   20a40:	693b      	ldr	r3, [r7, #16]
   20a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   20a44:	693b      	ldr	r3, [r7, #16]
   20a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20a48:	429a      	cmp	r2, r3
   20a4a:	d102      	bne.n	20a52 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
   20a4c:	693b      	ldr	r3, [r7, #16]
   20a4e:	683a      	ldr	r2, [r7, #0]
   20a50:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   20a52:	693b      	ldr	r3, [r7, #16]
   20a54:	683a      	ldr	r2, [r7, #0]
   20a56:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   20a58:	693b      	ldr	r3, [r7, #16]
   20a5a:	699b      	ldr	r3, [r3, #24]
   20a5c:	2b00      	cmp	r3, #0
   20a5e:	db04      	blt.n	20a6a <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20a60:	683b      	ldr	r3, [r7, #0]
   20a62:	2205      	movs	r2, #5
   20a64:	1ad2      	subs	r2, r2, r3
   20a66:	693b      	ldr	r3, [r7, #16]
   20a68:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   20a6a:	693b      	ldr	r3, [r7, #16]
   20a6c:	6959      	ldr	r1, [r3, #20]
   20a6e:	68ba      	ldr	r2, [r7, #8]
   20a70:	0013      	movs	r3, r2
   20a72:	009b      	lsls	r3, r3, #2
   20a74:	189b      	adds	r3, r3, r2
   20a76:	009b      	lsls	r3, r3, #2
   20a78:	4a1a      	ldr	r2, [pc, #104]	; (20ae4 <vTaskPrioritySet+0x120>)
   20a7a:	189b      	adds	r3, r3, r2
   20a7c:	4299      	cmp	r1, r3
   20a7e:	d101      	bne.n	20a84 <vTaskPrioritySet+0xc0>
   20a80:	2301      	movs	r3, #1
   20a82:	e000      	b.n	20a86 <vTaskPrioritySet+0xc2>
   20a84:	2300      	movs	r3, #0
   20a86:	2b00      	cmp	r3, #0
   20a88:	d01c      	beq.n	20ac4 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20a8a:	693b      	ldr	r3, [r7, #16]
   20a8c:	3304      	adds	r3, #4
   20a8e:	0018      	movs	r0, r3
   20a90:	4b15      	ldr	r3, [pc, #84]	; (20ae8 <vTaskPrioritySet+0x124>)
   20a92:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   20a94:	693b      	ldr	r3, [r7, #16]
   20a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20a98:	4b14      	ldr	r3, [pc, #80]	; (20aec <vTaskPrioritySet+0x128>)
   20a9a:	681b      	ldr	r3, [r3, #0]
   20a9c:	429a      	cmp	r2, r3
   20a9e:	d903      	bls.n	20aa8 <vTaskPrioritySet+0xe4>
   20aa0:	693b      	ldr	r3, [r7, #16]
   20aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20aa4:	4b11      	ldr	r3, [pc, #68]	; (20aec <vTaskPrioritySet+0x128>)
   20aa6:	601a      	str	r2, [r3, #0]
   20aa8:	693b      	ldr	r3, [r7, #16]
   20aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20aac:	0013      	movs	r3, r2
   20aae:	009b      	lsls	r3, r3, #2
   20ab0:	189b      	adds	r3, r3, r2
   20ab2:	009b      	lsls	r3, r3, #2
   20ab4:	4a0b      	ldr	r2, [pc, #44]	; (20ae4 <vTaskPrioritySet+0x120>)
   20ab6:	189a      	adds	r2, r3, r2
   20ab8:	693b      	ldr	r3, [r7, #16]
   20aba:	3304      	adds	r3, #4
   20abc:	0019      	movs	r1, r3
   20abe:	0010      	movs	r0, r2
   20ac0:	4b0b      	ldr	r3, [pc, #44]	; (20af0 <vTaskPrioritySet+0x12c>)
   20ac2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
   20ac4:	697b      	ldr	r3, [r7, #20]
   20ac6:	2b00      	cmp	r3, #0
   20ac8:	d001      	beq.n	20ace <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
   20aca:	4b0a      	ldr	r3, [pc, #40]	; (20af4 <vTaskPrioritySet+0x130>)
   20acc:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   20ace:	4b0a      	ldr	r3, [pc, #40]	; (20af8 <vTaskPrioritySet+0x134>)
   20ad0:	4798      	blx	r3
	}
   20ad2:	46c0      	nop			; (mov r8, r8)
   20ad4:	46bd      	mov	sp, r7
   20ad6:	b006      	add	sp, #24
   20ad8:	bd80      	pop	{r7, pc}
   20ada:	46c0      	nop			; (mov r8, r8)
   20adc:	0001f751 	.word	0x0001f751
   20ae0:	200004b8 	.word	0x200004b8
   20ae4:	200004bc 	.word	0x200004bc
   20ae8:	0001f9f7 	.word	0x0001f9f7
   20aec:	20000598 	.word	0x20000598
   20af0:	0001f947 	.word	0x0001f947
   20af4:	0001f731 	.word	0x0001f731
   20af8:	0001f775 	.word	0x0001f775

00020afc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   20afc:	b590      	push	{r4, r7, lr}
   20afe:	b085      	sub	sp, #20
   20b00:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   20b02:	4916      	ldr	r1, [pc, #88]	; (20b5c <vTaskStartScheduler+0x60>)
   20b04:	4816      	ldr	r0, [pc, #88]	; (20b60 <vTaskStartScheduler+0x64>)
   20b06:	4b17      	ldr	r3, [pc, #92]	; (20b64 <vTaskStartScheduler+0x68>)
   20b08:	9301      	str	r3, [sp, #4]
   20b0a:	2300      	movs	r3, #0
   20b0c:	9300      	str	r3, [sp, #0]
   20b0e:	2300      	movs	r3, #0
   20b10:	2282      	movs	r2, #130	; 0x82
   20b12:	4c15      	ldr	r4, [pc, #84]	; (20b68 <vTaskStartScheduler+0x6c>)
   20b14:	47a0      	blx	r4
   20b16:	0003      	movs	r3, r0
   20b18:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   20b1a:	687b      	ldr	r3, [r7, #4]
   20b1c:	2b01      	cmp	r3, #1
   20b1e:	d103      	bne.n	20b28 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   20b20:	4b12      	ldr	r3, [pc, #72]	; (20b6c <vTaskStartScheduler+0x70>)
   20b22:	4798      	blx	r3
   20b24:	0003      	movs	r3, r0
   20b26:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   20b28:	687b      	ldr	r3, [r7, #4]
   20b2a:	2b01      	cmp	r3, #1
   20b2c:	d10d      	bne.n	20b4a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   20b2e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   20b30:	4b0f      	ldr	r3, [pc, #60]	; (20b70 <vTaskStartScheduler+0x74>)
   20b32:	2201      	movs	r2, #1
   20b34:	4252      	negs	r2, r2
   20b36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   20b38:	4b0e      	ldr	r3, [pc, #56]	; (20b74 <vTaskStartScheduler+0x78>)
   20b3a:	2201      	movs	r2, #1
   20b3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   20b3e:	4b0e      	ldr	r3, [pc, #56]	; (20b78 <vTaskStartScheduler+0x7c>)
   20b40:	2200      	movs	r2, #0
   20b42:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   20b44:	4b0d      	ldr	r3, [pc, #52]	; (20b7c <vTaskStartScheduler+0x80>)
   20b46:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   20b48:	e004      	b.n	20b54 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   20b4a:	687b      	ldr	r3, [r7, #4]
   20b4c:	3301      	adds	r3, #1
   20b4e:	d101      	bne.n	20b54 <vTaskStartScheduler+0x58>
   20b50:	b672      	cpsid	i
   20b52:	e7fe      	b.n	20b52 <vTaskStartScheduler+0x56>
}
   20b54:	46c0      	nop			; (mov r8, r8)
   20b56:	46bd      	mov	sp, r7
   20b58:	b003      	add	sp, #12
   20b5a:	bd90      	pop	{r4, r7, pc}
   20b5c:	0002b4b0 	.word	0x0002b4b0
   20b60:	00021161 	.word	0x00021161
   20b64:	200005b4 	.word	0x200005b4
   20b68:	00020629 	.word	0x00020629
   20b6c:	0002182d 	.word	0x0002182d
   20b70:	200005b0 	.word	0x200005b0
   20b74:	2000059c 	.word	0x2000059c
   20b78:	20000594 	.word	0x20000594
   20b7c:	0001f6d9 	.word	0x0001f6d9

00020b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   20b80:	b580      	push	{r7, lr}
   20b82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   20b84:	4b03      	ldr	r3, [pc, #12]	; (20b94 <vTaskSuspendAll+0x14>)
   20b86:	681b      	ldr	r3, [r3, #0]
   20b88:	1c5a      	adds	r2, r3, #1
   20b8a:	4b02      	ldr	r3, [pc, #8]	; (20b94 <vTaskSuspendAll+0x14>)
   20b8c:	601a      	str	r2, [r3, #0]
}
   20b8e:	46c0      	nop			; (mov r8, r8)
   20b90:	46bd      	mov	sp, r7
   20b92:	bd80      	pop	{r7, pc}
   20b94:	200005b8 	.word	0x200005b8

00020b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   20b98:	b580      	push	{r7, lr}
   20b9a:	b084      	sub	sp, #16
   20b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   20b9e:	2300      	movs	r3, #0
   20ba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   20ba2:	2300      	movs	r3, #0
   20ba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   20ba6:	4b3a      	ldr	r3, [pc, #232]	; (20c90 <xTaskResumeAll+0xf8>)
   20ba8:	681b      	ldr	r3, [r3, #0]
   20baa:	2b00      	cmp	r3, #0
   20bac:	d101      	bne.n	20bb2 <xTaskResumeAll+0x1a>
   20bae:	b672      	cpsid	i
   20bb0:	e7fe      	b.n	20bb0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   20bb2:	4b38      	ldr	r3, [pc, #224]	; (20c94 <xTaskResumeAll+0xfc>)
   20bb4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   20bb6:	4b36      	ldr	r3, [pc, #216]	; (20c90 <xTaskResumeAll+0xf8>)
   20bb8:	681b      	ldr	r3, [r3, #0]
   20bba:	1e5a      	subs	r2, r3, #1
   20bbc:	4b34      	ldr	r3, [pc, #208]	; (20c90 <xTaskResumeAll+0xf8>)
   20bbe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20bc0:	4b33      	ldr	r3, [pc, #204]	; (20c90 <xTaskResumeAll+0xf8>)
   20bc2:	681b      	ldr	r3, [r3, #0]
   20bc4:	2b00      	cmp	r3, #0
   20bc6:	d15b      	bne.n	20c80 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   20bc8:	4b33      	ldr	r3, [pc, #204]	; (20c98 <xTaskResumeAll+0x100>)
   20bca:	681b      	ldr	r3, [r3, #0]
   20bcc:	2b00      	cmp	r3, #0
   20bce:	d057      	beq.n	20c80 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20bd0:	e02f      	b.n	20c32 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   20bd2:	4b32      	ldr	r3, [pc, #200]	; (20c9c <xTaskResumeAll+0x104>)
   20bd4:	68db      	ldr	r3, [r3, #12]
   20bd6:	68db      	ldr	r3, [r3, #12]
   20bd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   20bda:	68fb      	ldr	r3, [r7, #12]
   20bdc:	3318      	adds	r3, #24
   20bde:	0018      	movs	r0, r3
   20be0:	4b2f      	ldr	r3, [pc, #188]	; (20ca0 <xTaskResumeAll+0x108>)
   20be2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20be4:	68fb      	ldr	r3, [r7, #12]
   20be6:	3304      	adds	r3, #4
   20be8:	0018      	movs	r0, r3
   20bea:	4b2d      	ldr	r3, [pc, #180]	; (20ca0 <xTaskResumeAll+0x108>)
   20bec:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   20bee:	68fb      	ldr	r3, [r7, #12]
   20bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20bf2:	4b2c      	ldr	r3, [pc, #176]	; (20ca4 <xTaskResumeAll+0x10c>)
   20bf4:	681b      	ldr	r3, [r3, #0]
   20bf6:	429a      	cmp	r2, r3
   20bf8:	d903      	bls.n	20c02 <xTaskResumeAll+0x6a>
   20bfa:	68fb      	ldr	r3, [r7, #12]
   20bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20bfe:	4b29      	ldr	r3, [pc, #164]	; (20ca4 <xTaskResumeAll+0x10c>)
   20c00:	601a      	str	r2, [r3, #0]
   20c02:	68fb      	ldr	r3, [r7, #12]
   20c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20c06:	0013      	movs	r3, r2
   20c08:	009b      	lsls	r3, r3, #2
   20c0a:	189b      	adds	r3, r3, r2
   20c0c:	009b      	lsls	r3, r3, #2
   20c0e:	4a26      	ldr	r2, [pc, #152]	; (20ca8 <xTaskResumeAll+0x110>)
   20c10:	189a      	adds	r2, r3, r2
   20c12:	68fb      	ldr	r3, [r7, #12]
   20c14:	3304      	adds	r3, #4
   20c16:	0019      	movs	r1, r3
   20c18:	0010      	movs	r0, r2
   20c1a:	4b24      	ldr	r3, [pc, #144]	; (20cac <xTaskResumeAll+0x114>)
   20c1c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   20c1e:	68fb      	ldr	r3, [r7, #12]
   20c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20c22:	4b23      	ldr	r3, [pc, #140]	; (20cb0 <xTaskResumeAll+0x118>)
   20c24:	681b      	ldr	r3, [r3, #0]
   20c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20c28:	429a      	cmp	r2, r3
   20c2a:	d302      	bcc.n	20c32 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   20c2c:	4b21      	ldr	r3, [pc, #132]	; (20cb4 <xTaskResumeAll+0x11c>)
   20c2e:	2201      	movs	r2, #1
   20c30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   20c32:	4b1a      	ldr	r3, [pc, #104]	; (20c9c <xTaskResumeAll+0x104>)
   20c34:	681b      	ldr	r3, [r3, #0]
   20c36:	2b00      	cmp	r3, #0
   20c38:	d1cb      	bne.n	20bd2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   20c3a:	68fb      	ldr	r3, [r7, #12]
   20c3c:	2b00      	cmp	r3, #0
   20c3e:	d001      	beq.n	20c44 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   20c40:	4b1d      	ldr	r3, [pc, #116]	; (20cb8 <xTaskResumeAll+0x120>)
   20c42:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   20c44:	4b1d      	ldr	r3, [pc, #116]	; (20cbc <xTaskResumeAll+0x124>)
   20c46:	681b      	ldr	r3, [r3, #0]
   20c48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   20c4a:	687b      	ldr	r3, [r7, #4]
   20c4c:	2b00      	cmp	r3, #0
   20c4e:	d00f      	beq.n	20c70 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   20c50:	4b1b      	ldr	r3, [pc, #108]	; (20cc0 <xTaskResumeAll+0x128>)
   20c52:	4798      	blx	r3
   20c54:	1e03      	subs	r3, r0, #0
   20c56:	d002      	beq.n	20c5e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   20c58:	4b16      	ldr	r3, [pc, #88]	; (20cb4 <xTaskResumeAll+0x11c>)
   20c5a:	2201      	movs	r2, #1
   20c5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   20c5e:	687b      	ldr	r3, [r7, #4]
   20c60:	3b01      	subs	r3, #1
   20c62:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   20c64:	687b      	ldr	r3, [r7, #4]
   20c66:	2b00      	cmp	r3, #0
   20c68:	d1f2      	bne.n	20c50 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   20c6a:	4b14      	ldr	r3, [pc, #80]	; (20cbc <xTaskResumeAll+0x124>)
   20c6c:	2200      	movs	r2, #0
   20c6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   20c70:	4b10      	ldr	r3, [pc, #64]	; (20cb4 <xTaskResumeAll+0x11c>)
   20c72:	681b      	ldr	r3, [r3, #0]
   20c74:	2b00      	cmp	r3, #0
   20c76:	d003      	beq.n	20c80 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   20c78:	2301      	movs	r3, #1
   20c7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   20c7c:	4b11      	ldr	r3, [pc, #68]	; (20cc4 <xTaskResumeAll+0x12c>)
   20c7e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   20c80:	4b11      	ldr	r3, [pc, #68]	; (20cc8 <xTaskResumeAll+0x130>)
   20c82:	4798      	blx	r3

	return xAlreadyYielded;
   20c84:	68bb      	ldr	r3, [r7, #8]
}
   20c86:	0018      	movs	r0, r3
   20c88:	46bd      	mov	sp, r7
   20c8a:	b004      	add	sp, #16
   20c8c:	bd80      	pop	{r7, pc}
   20c8e:	46c0      	nop			; (mov r8, r8)
   20c90:	200005b8 	.word	0x200005b8
   20c94:	0001f751 	.word	0x0001f751
   20c98:	20000590 	.word	0x20000590
   20c9c:	20000550 	.word	0x20000550
   20ca0:	0001f9f7 	.word	0x0001f9f7
   20ca4:	20000598 	.word	0x20000598
   20ca8:	200004bc 	.word	0x200004bc
   20cac:	0001f947 	.word	0x0001f947
   20cb0:	200004b8 	.word	0x200004b8
   20cb4:	200005a4 	.word	0x200005a4
   20cb8:	000212a9 	.word	0x000212a9
   20cbc:	200005a0 	.word	0x200005a0
   20cc0:	00020d09 	.word	0x00020d09
   20cc4:	0001f731 	.word	0x0001f731
   20cc8:	0001f775 	.word	0x0001f775

00020ccc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   20ccc:	b580      	push	{r7, lr}
   20cce:	b082      	sub	sp, #8
   20cd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   20cd2:	4b04      	ldr	r3, [pc, #16]	; (20ce4 <xTaskGetTickCount+0x18>)
   20cd4:	681b      	ldr	r3, [r3, #0]
   20cd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   20cd8:	687b      	ldr	r3, [r7, #4]
}
   20cda:	0018      	movs	r0, r3
   20cdc:	46bd      	mov	sp, r7
   20cde:	b002      	add	sp, #8
   20ce0:	bd80      	pop	{r7, pc}
   20ce2:	46c0      	nop			; (mov r8, r8)
   20ce4:	20000594 	.word	0x20000594

00020ce8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
   20ce8:	b580      	push	{r7, lr}
   20cea:	b082      	sub	sp, #8
   20cec:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
   20cee:	2300      	movs	r3, #0
   20cf0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
   20cf2:	4b04      	ldr	r3, [pc, #16]	; (20d04 <xTaskGetTickCountFromISR+0x1c>)
   20cf4:	681b      	ldr	r3, [r3, #0]
   20cf6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   20cf8:	683b      	ldr	r3, [r7, #0]
}
   20cfa:	0018      	movs	r0, r3
   20cfc:	46bd      	mov	sp, r7
   20cfe:	b002      	add	sp, #8
   20d00:	bd80      	pop	{r7, pc}
   20d02:	46c0      	nop			; (mov r8, r8)
   20d04:	20000594 	.word	0x20000594

00020d08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   20d08:	b580      	push	{r7, lr}
   20d0a:	b086      	sub	sp, #24
   20d0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   20d0e:	2300      	movs	r3, #0
   20d10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20d12:	4b4c      	ldr	r3, [pc, #304]	; (20e44 <xTaskIncrementTick+0x13c>)
   20d14:	681b      	ldr	r3, [r3, #0]
   20d16:	2b00      	cmp	r3, #0
   20d18:	d000      	beq.n	20d1c <xTaskIncrementTick+0x14>
   20d1a:	e083      	b.n	20e24 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   20d1c:	4b4a      	ldr	r3, [pc, #296]	; (20e48 <xTaskIncrementTick+0x140>)
   20d1e:	681b      	ldr	r3, [r3, #0]
   20d20:	3301      	adds	r3, #1
   20d22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   20d24:	4b48      	ldr	r3, [pc, #288]	; (20e48 <xTaskIncrementTick+0x140>)
   20d26:	693a      	ldr	r2, [r7, #16]
   20d28:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   20d2a:	693b      	ldr	r3, [r7, #16]
   20d2c:	2b00      	cmp	r3, #0
   20d2e:	d117      	bne.n	20d60 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   20d30:	4b46      	ldr	r3, [pc, #280]	; (20e4c <xTaskIncrementTick+0x144>)
   20d32:	681b      	ldr	r3, [r3, #0]
   20d34:	681b      	ldr	r3, [r3, #0]
   20d36:	2b00      	cmp	r3, #0
   20d38:	d001      	beq.n	20d3e <xTaskIncrementTick+0x36>
   20d3a:	b672      	cpsid	i
   20d3c:	e7fe      	b.n	20d3c <xTaskIncrementTick+0x34>
   20d3e:	4b43      	ldr	r3, [pc, #268]	; (20e4c <xTaskIncrementTick+0x144>)
   20d40:	681b      	ldr	r3, [r3, #0]
   20d42:	60fb      	str	r3, [r7, #12]
   20d44:	4b42      	ldr	r3, [pc, #264]	; (20e50 <xTaskIncrementTick+0x148>)
   20d46:	681a      	ldr	r2, [r3, #0]
   20d48:	4b40      	ldr	r3, [pc, #256]	; (20e4c <xTaskIncrementTick+0x144>)
   20d4a:	601a      	str	r2, [r3, #0]
   20d4c:	4b40      	ldr	r3, [pc, #256]	; (20e50 <xTaskIncrementTick+0x148>)
   20d4e:	68fa      	ldr	r2, [r7, #12]
   20d50:	601a      	str	r2, [r3, #0]
   20d52:	4b40      	ldr	r3, [pc, #256]	; (20e54 <xTaskIncrementTick+0x14c>)
   20d54:	681b      	ldr	r3, [r3, #0]
   20d56:	1c5a      	adds	r2, r3, #1
   20d58:	4b3e      	ldr	r3, [pc, #248]	; (20e54 <xTaskIncrementTick+0x14c>)
   20d5a:	601a      	str	r2, [r3, #0]
   20d5c:	4b3e      	ldr	r3, [pc, #248]	; (20e58 <xTaskIncrementTick+0x150>)
   20d5e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   20d60:	4b3e      	ldr	r3, [pc, #248]	; (20e5c <xTaskIncrementTick+0x154>)
   20d62:	681b      	ldr	r3, [r3, #0]
   20d64:	693a      	ldr	r2, [r7, #16]
   20d66:	429a      	cmp	r2, r3
   20d68:	d34e      	bcc.n	20e08 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20d6a:	4b38      	ldr	r3, [pc, #224]	; (20e4c <xTaskIncrementTick+0x144>)
   20d6c:	681b      	ldr	r3, [r3, #0]
   20d6e:	681b      	ldr	r3, [r3, #0]
   20d70:	2b00      	cmp	r3, #0
   20d72:	d101      	bne.n	20d78 <xTaskIncrementTick+0x70>
   20d74:	2301      	movs	r3, #1
   20d76:	e000      	b.n	20d7a <xTaskIncrementTick+0x72>
   20d78:	2300      	movs	r3, #0
   20d7a:	2b00      	cmp	r3, #0
   20d7c:	d004      	beq.n	20d88 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   20d7e:	4b37      	ldr	r3, [pc, #220]	; (20e5c <xTaskIncrementTick+0x154>)
   20d80:	2201      	movs	r2, #1
   20d82:	4252      	negs	r2, r2
   20d84:	601a      	str	r2, [r3, #0]
					break;
   20d86:	e03f      	b.n	20e08 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   20d88:	4b30      	ldr	r3, [pc, #192]	; (20e4c <xTaskIncrementTick+0x144>)
   20d8a:	681b      	ldr	r3, [r3, #0]
   20d8c:	68db      	ldr	r3, [r3, #12]
   20d8e:	68db      	ldr	r3, [r3, #12]
   20d90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   20d92:	68bb      	ldr	r3, [r7, #8]
   20d94:	685b      	ldr	r3, [r3, #4]
   20d96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   20d98:	693a      	ldr	r2, [r7, #16]
   20d9a:	687b      	ldr	r3, [r7, #4]
   20d9c:	429a      	cmp	r2, r3
   20d9e:	d203      	bcs.n	20da8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   20da0:	4b2e      	ldr	r3, [pc, #184]	; (20e5c <xTaskIncrementTick+0x154>)
   20da2:	687a      	ldr	r2, [r7, #4]
   20da4:	601a      	str	r2, [r3, #0]
						break;
   20da6:	e02f      	b.n	20e08 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   20da8:	68bb      	ldr	r3, [r7, #8]
   20daa:	3304      	adds	r3, #4
   20dac:	0018      	movs	r0, r3
   20dae:	4b2c      	ldr	r3, [pc, #176]	; (20e60 <xTaskIncrementTick+0x158>)
   20db0:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   20db2:	68bb      	ldr	r3, [r7, #8]
   20db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20db6:	2b00      	cmp	r3, #0
   20db8:	d004      	beq.n	20dc4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   20dba:	68bb      	ldr	r3, [r7, #8]
   20dbc:	3318      	adds	r3, #24
   20dbe:	0018      	movs	r0, r3
   20dc0:	4b27      	ldr	r3, [pc, #156]	; (20e60 <xTaskIncrementTick+0x158>)
   20dc2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   20dc4:	68bb      	ldr	r3, [r7, #8]
   20dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20dc8:	4b26      	ldr	r3, [pc, #152]	; (20e64 <xTaskIncrementTick+0x15c>)
   20dca:	681b      	ldr	r3, [r3, #0]
   20dcc:	429a      	cmp	r2, r3
   20dce:	d903      	bls.n	20dd8 <xTaskIncrementTick+0xd0>
   20dd0:	68bb      	ldr	r3, [r7, #8]
   20dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20dd4:	4b23      	ldr	r3, [pc, #140]	; (20e64 <xTaskIncrementTick+0x15c>)
   20dd6:	601a      	str	r2, [r3, #0]
   20dd8:	68bb      	ldr	r3, [r7, #8]
   20dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20ddc:	0013      	movs	r3, r2
   20dde:	009b      	lsls	r3, r3, #2
   20de0:	189b      	adds	r3, r3, r2
   20de2:	009b      	lsls	r3, r3, #2
   20de4:	4a20      	ldr	r2, [pc, #128]	; (20e68 <xTaskIncrementTick+0x160>)
   20de6:	189a      	adds	r2, r3, r2
   20de8:	68bb      	ldr	r3, [r7, #8]
   20dea:	3304      	adds	r3, #4
   20dec:	0019      	movs	r1, r3
   20dee:	0010      	movs	r0, r2
   20df0:	4b1e      	ldr	r3, [pc, #120]	; (20e6c <xTaskIncrementTick+0x164>)
   20df2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   20df4:	68bb      	ldr	r3, [r7, #8]
   20df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20df8:	4b1d      	ldr	r3, [pc, #116]	; (20e70 <xTaskIncrementTick+0x168>)
   20dfa:	681b      	ldr	r3, [r3, #0]
   20dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20dfe:	429a      	cmp	r2, r3
   20e00:	d3b3      	bcc.n	20d6a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   20e02:	2301      	movs	r3, #1
   20e04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   20e06:	e7b0      	b.n	20d6a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   20e08:	4b19      	ldr	r3, [pc, #100]	; (20e70 <xTaskIncrementTick+0x168>)
   20e0a:	681b      	ldr	r3, [r3, #0]
   20e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20e0e:	4916      	ldr	r1, [pc, #88]	; (20e68 <xTaskIncrementTick+0x160>)
   20e10:	0013      	movs	r3, r2
   20e12:	009b      	lsls	r3, r3, #2
   20e14:	189b      	adds	r3, r3, r2
   20e16:	009b      	lsls	r3, r3, #2
   20e18:	585b      	ldr	r3, [r3, r1]
   20e1a:	2b01      	cmp	r3, #1
   20e1c:	d907      	bls.n	20e2e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   20e1e:	2301      	movs	r3, #1
   20e20:	617b      	str	r3, [r7, #20]
   20e22:	e004      	b.n	20e2e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   20e24:	4b13      	ldr	r3, [pc, #76]	; (20e74 <xTaskIncrementTick+0x16c>)
   20e26:	681b      	ldr	r3, [r3, #0]
   20e28:	1c5a      	adds	r2, r3, #1
   20e2a:	4b12      	ldr	r3, [pc, #72]	; (20e74 <xTaskIncrementTick+0x16c>)
   20e2c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   20e2e:	4b12      	ldr	r3, [pc, #72]	; (20e78 <xTaskIncrementTick+0x170>)
   20e30:	681b      	ldr	r3, [r3, #0]
   20e32:	2b00      	cmp	r3, #0
   20e34:	d001      	beq.n	20e3a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   20e36:	2301      	movs	r3, #1
   20e38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   20e3a:	697b      	ldr	r3, [r7, #20]
}
   20e3c:	0018      	movs	r0, r3
   20e3e:	46bd      	mov	sp, r7
   20e40:	b006      	add	sp, #24
   20e42:	bd80      	pop	{r7, pc}
   20e44:	200005b8 	.word	0x200005b8
   20e48:	20000594 	.word	0x20000594
   20e4c:	20000548 	.word	0x20000548
   20e50:	2000054c 	.word	0x2000054c
   20e54:	200005a8 	.word	0x200005a8
   20e58:	000212a9 	.word	0x000212a9
   20e5c:	200005b0 	.word	0x200005b0
   20e60:	0001f9f7 	.word	0x0001f9f7
   20e64:	20000598 	.word	0x20000598
   20e68:	200004bc 	.word	0x200004bc
   20e6c:	0001f947 	.word	0x0001f947
   20e70:	200004b8 	.word	0x200004b8
   20e74:	200005a0 	.word	0x200005a0
   20e78:	200005a4 	.word	0x200005a4

00020e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   20e7c:	b580      	push	{r7, lr}
   20e7e:	b082      	sub	sp, #8
   20e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   20e82:	4b22      	ldr	r3, [pc, #136]	; (20f0c <vTaskSwitchContext+0x90>)
   20e84:	681b      	ldr	r3, [r3, #0]
   20e86:	2b00      	cmp	r3, #0
   20e88:	d003      	beq.n	20e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   20e8a:	4b21      	ldr	r3, [pc, #132]	; (20f10 <vTaskSwitchContext+0x94>)
   20e8c:	2201      	movs	r2, #1
   20e8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   20e90:	e037      	b.n	20f02 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
   20e92:	4b1f      	ldr	r3, [pc, #124]	; (20f10 <vTaskSwitchContext+0x94>)
   20e94:	2200      	movs	r2, #0
   20e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
   20e98:	4b1e      	ldr	r3, [pc, #120]	; (20f14 <vTaskSwitchContext+0x98>)
   20e9a:	681b      	ldr	r3, [r3, #0]
   20e9c:	607b      	str	r3, [r7, #4]
   20e9e:	e007      	b.n	20eb0 <vTaskSwitchContext+0x34>
   20ea0:	687b      	ldr	r3, [r7, #4]
   20ea2:	2b00      	cmp	r3, #0
   20ea4:	d101      	bne.n	20eaa <vTaskSwitchContext+0x2e>
   20ea6:	b672      	cpsid	i
   20ea8:	e7fe      	b.n	20ea8 <vTaskSwitchContext+0x2c>
   20eaa:	687b      	ldr	r3, [r7, #4]
   20eac:	3b01      	subs	r3, #1
   20eae:	607b      	str	r3, [r7, #4]
   20eb0:	4919      	ldr	r1, [pc, #100]	; (20f18 <vTaskSwitchContext+0x9c>)
   20eb2:	687a      	ldr	r2, [r7, #4]
   20eb4:	0013      	movs	r3, r2
   20eb6:	009b      	lsls	r3, r3, #2
   20eb8:	189b      	adds	r3, r3, r2
   20eba:	009b      	lsls	r3, r3, #2
   20ebc:	585b      	ldr	r3, [r3, r1]
   20ebe:	2b00      	cmp	r3, #0
   20ec0:	d0ee      	beq.n	20ea0 <vTaskSwitchContext+0x24>
   20ec2:	687a      	ldr	r2, [r7, #4]
   20ec4:	0013      	movs	r3, r2
   20ec6:	009b      	lsls	r3, r3, #2
   20ec8:	189b      	adds	r3, r3, r2
   20eca:	009b      	lsls	r3, r3, #2
   20ecc:	4a12      	ldr	r2, [pc, #72]	; (20f18 <vTaskSwitchContext+0x9c>)
   20ece:	189b      	adds	r3, r3, r2
   20ed0:	603b      	str	r3, [r7, #0]
   20ed2:	683b      	ldr	r3, [r7, #0]
   20ed4:	685b      	ldr	r3, [r3, #4]
   20ed6:	685a      	ldr	r2, [r3, #4]
   20ed8:	683b      	ldr	r3, [r7, #0]
   20eda:	605a      	str	r2, [r3, #4]
   20edc:	683b      	ldr	r3, [r7, #0]
   20ede:	685a      	ldr	r2, [r3, #4]
   20ee0:	683b      	ldr	r3, [r7, #0]
   20ee2:	3308      	adds	r3, #8
   20ee4:	429a      	cmp	r2, r3
   20ee6:	d104      	bne.n	20ef2 <vTaskSwitchContext+0x76>
   20ee8:	683b      	ldr	r3, [r7, #0]
   20eea:	685b      	ldr	r3, [r3, #4]
   20eec:	685a      	ldr	r2, [r3, #4]
   20eee:	683b      	ldr	r3, [r7, #0]
   20ef0:	605a      	str	r2, [r3, #4]
   20ef2:	683b      	ldr	r3, [r7, #0]
   20ef4:	685b      	ldr	r3, [r3, #4]
   20ef6:	68da      	ldr	r2, [r3, #12]
   20ef8:	4b08      	ldr	r3, [pc, #32]	; (20f1c <vTaskSwitchContext+0xa0>)
   20efa:	601a      	str	r2, [r3, #0]
   20efc:	4b05      	ldr	r3, [pc, #20]	; (20f14 <vTaskSwitchContext+0x98>)
   20efe:	687a      	ldr	r2, [r7, #4]
   20f00:	601a      	str	r2, [r3, #0]
}
   20f02:	46c0      	nop			; (mov r8, r8)
   20f04:	46bd      	mov	sp, r7
   20f06:	b002      	add	sp, #8
   20f08:	bd80      	pop	{r7, pc}
   20f0a:	46c0      	nop			; (mov r8, r8)
   20f0c:	200005b8 	.word	0x200005b8
   20f10:	200005a4 	.word	0x200005a4
   20f14:	20000598 	.word	0x20000598
   20f18:	200004bc 	.word	0x200004bc
   20f1c:	200004b8 	.word	0x200004b8

00020f20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   20f20:	b580      	push	{r7, lr}
   20f22:	b082      	sub	sp, #8
   20f24:	af00      	add	r7, sp, #0
   20f26:	6078      	str	r0, [r7, #4]
   20f28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   20f2a:	687b      	ldr	r3, [r7, #4]
   20f2c:	2b00      	cmp	r3, #0
   20f2e:	d101      	bne.n	20f34 <vTaskPlaceOnEventList+0x14>
   20f30:	b672      	cpsid	i
   20f32:	e7fe      	b.n	20f32 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   20f34:	4b08      	ldr	r3, [pc, #32]	; (20f58 <vTaskPlaceOnEventList+0x38>)
   20f36:	681b      	ldr	r3, [r3, #0]
   20f38:	3318      	adds	r3, #24
   20f3a:	001a      	movs	r2, r3
   20f3c:	687b      	ldr	r3, [r7, #4]
   20f3e:	0011      	movs	r1, r2
   20f40:	0018      	movs	r0, r3
   20f42:	4b06      	ldr	r3, [pc, #24]	; (20f5c <vTaskPlaceOnEventList+0x3c>)
   20f44:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   20f46:	683b      	ldr	r3, [r7, #0]
   20f48:	2101      	movs	r1, #1
   20f4a:	0018      	movs	r0, r3
   20f4c:	4b04      	ldr	r3, [pc, #16]	; (20f60 <vTaskPlaceOnEventList+0x40>)
   20f4e:	4798      	blx	r3
}
   20f50:	46c0      	nop			; (mov r8, r8)
   20f52:	46bd      	mov	sp, r7
   20f54:	b002      	add	sp, #8
   20f56:	bd80      	pop	{r7, pc}
   20f58:	200004b8 	.word	0x200004b8
   20f5c:	0001f98b 	.word	0x0001f98b
   20f60:	00021779 	.word	0x00021779

00020f64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   20f64:	b580      	push	{r7, lr}
   20f66:	b084      	sub	sp, #16
   20f68:	af00      	add	r7, sp, #0
   20f6a:	60f8      	str	r0, [r7, #12]
   20f6c:	60b9      	str	r1, [r7, #8]
   20f6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   20f70:	68fb      	ldr	r3, [r7, #12]
   20f72:	2b00      	cmp	r3, #0
   20f74:	d101      	bne.n	20f7a <vTaskPlaceOnEventListRestricted+0x16>
   20f76:	b672      	cpsid	i
   20f78:	e7fe      	b.n	20f78 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   20f7a:	4b0c      	ldr	r3, [pc, #48]	; (20fac <vTaskPlaceOnEventListRestricted+0x48>)
   20f7c:	681b      	ldr	r3, [r3, #0]
   20f7e:	3318      	adds	r3, #24
   20f80:	001a      	movs	r2, r3
   20f82:	68fb      	ldr	r3, [r7, #12]
   20f84:	0011      	movs	r1, r2
   20f86:	0018      	movs	r0, r3
   20f88:	4b09      	ldr	r3, [pc, #36]	; (20fb0 <vTaskPlaceOnEventListRestricted+0x4c>)
   20f8a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   20f8c:	687b      	ldr	r3, [r7, #4]
   20f8e:	2b00      	cmp	r3, #0
   20f90:	d002      	beq.n	20f98 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   20f92:	2301      	movs	r3, #1
   20f94:	425b      	negs	r3, r3
   20f96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   20f98:	687a      	ldr	r2, [r7, #4]
   20f9a:	68bb      	ldr	r3, [r7, #8]
   20f9c:	0011      	movs	r1, r2
   20f9e:	0018      	movs	r0, r3
   20fa0:	4b04      	ldr	r3, [pc, #16]	; (20fb4 <vTaskPlaceOnEventListRestricted+0x50>)
   20fa2:	4798      	blx	r3
	}
   20fa4:	46c0      	nop			; (mov r8, r8)
   20fa6:	46bd      	mov	sp, r7
   20fa8:	b004      	add	sp, #16
   20faa:	bd80      	pop	{r7, pc}
   20fac:	200004b8 	.word	0x200004b8
   20fb0:	0001f947 	.word	0x0001f947
   20fb4:	00021779 	.word	0x00021779

00020fb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   20fb8:	b580      	push	{r7, lr}
   20fba:	b084      	sub	sp, #16
   20fbc:	af00      	add	r7, sp, #0
   20fbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   20fc0:	687b      	ldr	r3, [r7, #4]
   20fc2:	68db      	ldr	r3, [r3, #12]
   20fc4:	68db      	ldr	r3, [r3, #12]
   20fc6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   20fc8:	68bb      	ldr	r3, [r7, #8]
   20fca:	2b00      	cmp	r3, #0
   20fcc:	d101      	bne.n	20fd2 <xTaskRemoveFromEventList+0x1a>
   20fce:	b672      	cpsid	i
   20fd0:	e7fe      	b.n	20fd0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   20fd2:	68bb      	ldr	r3, [r7, #8]
   20fd4:	3318      	adds	r3, #24
   20fd6:	0018      	movs	r0, r3
   20fd8:	4b1f      	ldr	r3, [pc, #124]	; (21058 <xTaskRemoveFromEventList+0xa0>)
   20fda:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   20fdc:	4b1f      	ldr	r3, [pc, #124]	; (2105c <xTaskRemoveFromEventList+0xa4>)
   20fde:	681b      	ldr	r3, [r3, #0]
   20fe0:	2b00      	cmp	r3, #0
   20fe2:	d11d      	bne.n	21020 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   20fe4:	68bb      	ldr	r3, [r7, #8]
   20fe6:	3304      	adds	r3, #4
   20fe8:	0018      	movs	r0, r3
   20fea:	4b1b      	ldr	r3, [pc, #108]	; (21058 <xTaskRemoveFromEventList+0xa0>)
   20fec:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   20fee:	68bb      	ldr	r3, [r7, #8]
   20ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20ff2:	4b1b      	ldr	r3, [pc, #108]	; (21060 <xTaskRemoveFromEventList+0xa8>)
   20ff4:	681b      	ldr	r3, [r3, #0]
   20ff6:	429a      	cmp	r2, r3
   20ff8:	d903      	bls.n	21002 <xTaskRemoveFromEventList+0x4a>
   20ffa:	68bb      	ldr	r3, [r7, #8]
   20ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20ffe:	4b18      	ldr	r3, [pc, #96]	; (21060 <xTaskRemoveFromEventList+0xa8>)
   21000:	601a      	str	r2, [r3, #0]
   21002:	68bb      	ldr	r3, [r7, #8]
   21004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21006:	0013      	movs	r3, r2
   21008:	009b      	lsls	r3, r3, #2
   2100a:	189b      	adds	r3, r3, r2
   2100c:	009b      	lsls	r3, r3, #2
   2100e:	4a15      	ldr	r2, [pc, #84]	; (21064 <xTaskRemoveFromEventList+0xac>)
   21010:	189a      	adds	r2, r3, r2
   21012:	68bb      	ldr	r3, [r7, #8]
   21014:	3304      	adds	r3, #4
   21016:	0019      	movs	r1, r3
   21018:	0010      	movs	r0, r2
   2101a:	4b13      	ldr	r3, [pc, #76]	; (21068 <xTaskRemoveFromEventList+0xb0>)
   2101c:	4798      	blx	r3
   2101e:	e007      	b.n	21030 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   21020:	68bb      	ldr	r3, [r7, #8]
   21022:	3318      	adds	r3, #24
   21024:	001a      	movs	r2, r3
   21026:	4b11      	ldr	r3, [pc, #68]	; (2106c <xTaskRemoveFromEventList+0xb4>)
   21028:	0011      	movs	r1, r2
   2102a:	0018      	movs	r0, r3
   2102c:	4b0e      	ldr	r3, [pc, #56]	; (21068 <xTaskRemoveFromEventList+0xb0>)
   2102e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   21030:	68bb      	ldr	r3, [r7, #8]
   21032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21034:	4b0e      	ldr	r3, [pc, #56]	; (21070 <xTaskRemoveFromEventList+0xb8>)
   21036:	681b      	ldr	r3, [r3, #0]
   21038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2103a:	429a      	cmp	r2, r3
   2103c:	d905      	bls.n	2104a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   2103e:	2301      	movs	r3, #1
   21040:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   21042:	4b0c      	ldr	r3, [pc, #48]	; (21074 <xTaskRemoveFromEventList+0xbc>)
   21044:	2201      	movs	r2, #1
   21046:	601a      	str	r2, [r3, #0]
   21048:	e001      	b.n	2104e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   2104a:	2300      	movs	r3, #0
   2104c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   2104e:	68fb      	ldr	r3, [r7, #12]
}
   21050:	0018      	movs	r0, r3
   21052:	46bd      	mov	sp, r7
   21054:	b004      	add	sp, #16
   21056:	bd80      	pop	{r7, pc}
   21058:	0001f9f7 	.word	0x0001f9f7
   2105c:	200005b8 	.word	0x200005b8
   21060:	20000598 	.word	0x20000598
   21064:	200004bc 	.word	0x200004bc
   21068:	0001f947 	.word	0x0001f947
   2106c:	20000550 	.word	0x20000550
   21070:	200004b8 	.word	0x200004b8
   21074:	200005a4 	.word	0x200005a4

00021078 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   21078:	b580      	push	{r7, lr}
   2107a:	b082      	sub	sp, #8
   2107c:	af00      	add	r7, sp, #0
   2107e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   21080:	4b05      	ldr	r3, [pc, #20]	; (21098 <vTaskInternalSetTimeOutState+0x20>)
   21082:	681a      	ldr	r2, [r3, #0]
   21084:	687b      	ldr	r3, [r7, #4]
   21086:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   21088:	4b04      	ldr	r3, [pc, #16]	; (2109c <vTaskInternalSetTimeOutState+0x24>)
   2108a:	681a      	ldr	r2, [r3, #0]
   2108c:	687b      	ldr	r3, [r7, #4]
   2108e:	605a      	str	r2, [r3, #4]
}
   21090:	46c0      	nop			; (mov r8, r8)
   21092:	46bd      	mov	sp, r7
   21094:	b002      	add	sp, #8
   21096:	bd80      	pop	{r7, pc}
   21098:	200005a8 	.word	0x200005a8
   2109c:	20000594 	.word	0x20000594

000210a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   210a0:	b580      	push	{r7, lr}
   210a2:	b086      	sub	sp, #24
   210a4:	af00      	add	r7, sp, #0
   210a6:	6078      	str	r0, [r7, #4]
   210a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   210aa:	687b      	ldr	r3, [r7, #4]
   210ac:	2b00      	cmp	r3, #0
   210ae:	d101      	bne.n	210b4 <xTaskCheckForTimeOut+0x14>
   210b0:	b672      	cpsid	i
   210b2:	e7fe      	b.n	210b2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   210b4:	683b      	ldr	r3, [r7, #0]
   210b6:	2b00      	cmp	r3, #0
   210b8:	d101      	bne.n	210be <xTaskCheckForTimeOut+0x1e>
   210ba:	b672      	cpsid	i
   210bc:	e7fe      	b.n	210bc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   210be:	4b1e      	ldr	r3, [pc, #120]	; (21138 <xTaskCheckForTimeOut+0x98>)
   210c0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   210c2:	4b1e      	ldr	r3, [pc, #120]	; (2113c <xTaskCheckForTimeOut+0x9c>)
   210c4:	681b      	ldr	r3, [r3, #0]
   210c6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   210c8:	687b      	ldr	r3, [r7, #4]
   210ca:	685b      	ldr	r3, [r3, #4]
   210cc:	693a      	ldr	r2, [r7, #16]
   210ce:	1ad3      	subs	r3, r2, r3
   210d0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   210d2:	683b      	ldr	r3, [r7, #0]
   210d4:	681b      	ldr	r3, [r3, #0]
   210d6:	3301      	adds	r3, #1
   210d8:	d102      	bne.n	210e0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   210da:	2300      	movs	r3, #0
   210dc:	617b      	str	r3, [r7, #20]
   210de:	e024      	b.n	2112a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   210e0:	687b      	ldr	r3, [r7, #4]
   210e2:	681a      	ldr	r2, [r3, #0]
   210e4:	4b16      	ldr	r3, [pc, #88]	; (21140 <xTaskCheckForTimeOut+0xa0>)
   210e6:	681b      	ldr	r3, [r3, #0]
   210e8:	429a      	cmp	r2, r3
   210ea:	d007      	beq.n	210fc <xTaskCheckForTimeOut+0x5c>
   210ec:	687b      	ldr	r3, [r7, #4]
   210ee:	685a      	ldr	r2, [r3, #4]
   210f0:	693b      	ldr	r3, [r7, #16]
   210f2:	429a      	cmp	r2, r3
   210f4:	d802      	bhi.n	210fc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   210f6:	2301      	movs	r3, #1
   210f8:	617b      	str	r3, [r7, #20]
   210fa:	e016      	b.n	2112a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   210fc:	683b      	ldr	r3, [r7, #0]
   210fe:	681a      	ldr	r2, [r3, #0]
   21100:	68fb      	ldr	r3, [r7, #12]
   21102:	429a      	cmp	r2, r3
   21104:	d90c      	bls.n	21120 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   21106:	683b      	ldr	r3, [r7, #0]
   21108:	681a      	ldr	r2, [r3, #0]
   2110a:	68fb      	ldr	r3, [r7, #12]
   2110c:	1ad2      	subs	r2, r2, r3
   2110e:	683b      	ldr	r3, [r7, #0]
   21110:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   21112:	687b      	ldr	r3, [r7, #4]
   21114:	0018      	movs	r0, r3
   21116:	4b0b      	ldr	r3, [pc, #44]	; (21144 <xTaskCheckForTimeOut+0xa4>)
   21118:	4798      	blx	r3
			xReturn = pdFALSE;
   2111a:	2300      	movs	r3, #0
   2111c:	617b      	str	r3, [r7, #20]
   2111e:	e004      	b.n	2112a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   21120:	683b      	ldr	r3, [r7, #0]
   21122:	2200      	movs	r2, #0
   21124:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   21126:	2301      	movs	r3, #1
   21128:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   2112a:	4b07      	ldr	r3, [pc, #28]	; (21148 <xTaskCheckForTimeOut+0xa8>)
   2112c:	4798      	blx	r3

	return xReturn;
   2112e:	697b      	ldr	r3, [r7, #20]
}
   21130:	0018      	movs	r0, r3
   21132:	46bd      	mov	sp, r7
   21134:	b006      	add	sp, #24
   21136:	bd80      	pop	{r7, pc}
   21138:	0001f751 	.word	0x0001f751
   2113c:	20000594 	.word	0x20000594
   21140:	200005a8 	.word	0x200005a8
   21144:	00021079 	.word	0x00021079
   21148:	0001f775 	.word	0x0001f775

0002114c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   2114c:	b580      	push	{r7, lr}
   2114e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   21150:	4b02      	ldr	r3, [pc, #8]	; (2115c <vTaskMissedYield+0x10>)
   21152:	2201      	movs	r2, #1
   21154:	601a      	str	r2, [r3, #0]
}
   21156:	46c0      	nop			; (mov r8, r8)
   21158:	46bd      	mov	sp, r7
   2115a:	bd80      	pop	{r7, pc}
   2115c:	200005a4 	.word	0x200005a4

00021160 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   21160:	b580      	push	{r7, lr}
   21162:	b082      	sub	sp, #8
   21164:	af00      	add	r7, sp, #0
   21166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   21168:	4b04      	ldr	r3, [pc, #16]	; (2117c <prvIdleTask+0x1c>)
   2116a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   2116c:	4b04      	ldr	r3, [pc, #16]	; (21180 <prvIdleTask+0x20>)
   2116e:	681b      	ldr	r3, [r3, #0]
   21170:	2b01      	cmp	r3, #1
   21172:	d9f9      	bls.n	21168 <prvIdleTask+0x8>
			{
				taskYIELD();
   21174:	4b03      	ldr	r3, [pc, #12]	; (21184 <prvIdleTask+0x24>)
   21176:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   21178:	e7f6      	b.n	21168 <prvIdleTask+0x8>
   2117a:	46c0      	nop			; (mov r8, r8)
   2117c:	00021215 	.word	0x00021215
   21180:	200004bc 	.word	0x200004bc
   21184:	0001f731 	.word	0x0001f731

00021188 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   21188:	b580      	push	{r7, lr}
   2118a:	b082      	sub	sp, #8
   2118c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   2118e:	2300      	movs	r3, #0
   21190:	607b      	str	r3, [r7, #4]
   21192:	e00c      	b.n	211ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   21194:	687a      	ldr	r2, [r7, #4]
   21196:	0013      	movs	r3, r2
   21198:	009b      	lsls	r3, r3, #2
   2119a:	189b      	adds	r3, r3, r2
   2119c:	009b      	lsls	r3, r3, #2
   2119e:	4a14      	ldr	r2, [pc, #80]	; (211f0 <prvInitialiseTaskLists+0x68>)
   211a0:	189b      	adds	r3, r3, r2
   211a2:	0018      	movs	r0, r3
   211a4:	4b13      	ldr	r3, [pc, #76]	; (211f4 <prvInitialiseTaskLists+0x6c>)
   211a6:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   211a8:	687b      	ldr	r3, [r7, #4]
   211aa:	3301      	adds	r3, #1
   211ac:	607b      	str	r3, [r7, #4]
   211ae:	687b      	ldr	r3, [r7, #4]
   211b0:	2b04      	cmp	r3, #4
   211b2:	d9ef      	bls.n	21194 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   211b4:	4b10      	ldr	r3, [pc, #64]	; (211f8 <prvInitialiseTaskLists+0x70>)
   211b6:	0018      	movs	r0, r3
   211b8:	4b0e      	ldr	r3, [pc, #56]	; (211f4 <prvInitialiseTaskLists+0x6c>)
   211ba:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   211bc:	4b0f      	ldr	r3, [pc, #60]	; (211fc <prvInitialiseTaskLists+0x74>)
   211be:	0018      	movs	r0, r3
   211c0:	4b0c      	ldr	r3, [pc, #48]	; (211f4 <prvInitialiseTaskLists+0x6c>)
   211c2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   211c4:	4b0e      	ldr	r3, [pc, #56]	; (21200 <prvInitialiseTaskLists+0x78>)
   211c6:	0018      	movs	r0, r3
   211c8:	4b0a      	ldr	r3, [pc, #40]	; (211f4 <prvInitialiseTaskLists+0x6c>)
   211ca:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   211cc:	4b0d      	ldr	r3, [pc, #52]	; (21204 <prvInitialiseTaskLists+0x7c>)
   211ce:	0018      	movs	r0, r3
   211d0:	4b08      	ldr	r3, [pc, #32]	; (211f4 <prvInitialiseTaskLists+0x6c>)
   211d2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   211d4:	4b0c      	ldr	r3, [pc, #48]	; (21208 <prvInitialiseTaskLists+0x80>)
   211d6:	0018      	movs	r0, r3
   211d8:	4b06      	ldr	r3, [pc, #24]	; (211f4 <prvInitialiseTaskLists+0x6c>)
   211da:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   211dc:	4b0b      	ldr	r3, [pc, #44]	; (2120c <prvInitialiseTaskLists+0x84>)
   211de:	4a06      	ldr	r2, [pc, #24]	; (211f8 <prvInitialiseTaskLists+0x70>)
   211e0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   211e2:	4b0b      	ldr	r3, [pc, #44]	; (21210 <prvInitialiseTaskLists+0x88>)
   211e4:	4a05      	ldr	r2, [pc, #20]	; (211fc <prvInitialiseTaskLists+0x74>)
   211e6:	601a      	str	r2, [r3, #0]
}
   211e8:	46c0      	nop			; (mov r8, r8)
   211ea:	46bd      	mov	sp, r7
   211ec:	b002      	add	sp, #8
   211ee:	bd80      	pop	{r7, pc}
   211f0:	200004bc 	.word	0x200004bc
   211f4:	0001f8f5 	.word	0x0001f8f5
   211f8:	20000520 	.word	0x20000520
   211fc:	20000534 	.word	0x20000534
   21200:	20000550 	.word	0x20000550
   21204:	20000564 	.word	0x20000564
   21208:	2000057c 	.word	0x2000057c
   2120c:	20000548 	.word	0x20000548
   21210:	2000054c 	.word	0x2000054c

00021214 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   21214:	b580      	push	{r7, lr}
   21216:	b082      	sub	sp, #8
   21218:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   2121a:	e01a      	b.n	21252 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   2121c:	4b11      	ldr	r3, [pc, #68]	; (21264 <prvCheckTasksWaitingTermination+0x50>)
   2121e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   21220:	4b11      	ldr	r3, [pc, #68]	; (21268 <prvCheckTasksWaitingTermination+0x54>)
   21222:	68db      	ldr	r3, [r3, #12]
   21224:	68db      	ldr	r3, [r3, #12]
   21226:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   21228:	687b      	ldr	r3, [r7, #4]
   2122a:	3304      	adds	r3, #4
   2122c:	0018      	movs	r0, r3
   2122e:	4b0f      	ldr	r3, [pc, #60]	; (2126c <prvCheckTasksWaitingTermination+0x58>)
   21230:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   21232:	4b0f      	ldr	r3, [pc, #60]	; (21270 <prvCheckTasksWaitingTermination+0x5c>)
   21234:	681b      	ldr	r3, [r3, #0]
   21236:	1e5a      	subs	r2, r3, #1
   21238:	4b0d      	ldr	r3, [pc, #52]	; (21270 <prvCheckTasksWaitingTermination+0x5c>)
   2123a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   2123c:	4b0d      	ldr	r3, [pc, #52]	; (21274 <prvCheckTasksWaitingTermination+0x60>)
   2123e:	681b      	ldr	r3, [r3, #0]
   21240:	1e5a      	subs	r2, r3, #1
   21242:	4b0c      	ldr	r3, [pc, #48]	; (21274 <prvCheckTasksWaitingTermination+0x60>)
   21244:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   21246:	4b0c      	ldr	r3, [pc, #48]	; (21278 <prvCheckTasksWaitingTermination+0x64>)
   21248:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   2124a:	687b      	ldr	r3, [r7, #4]
   2124c:	0018      	movs	r0, r3
   2124e:	4b0b      	ldr	r3, [pc, #44]	; (2127c <prvCheckTasksWaitingTermination+0x68>)
   21250:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   21252:	4b08      	ldr	r3, [pc, #32]	; (21274 <prvCheckTasksWaitingTermination+0x60>)
   21254:	681b      	ldr	r3, [r3, #0]
   21256:	2b00      	cmp	r3, #0
   21258:	d1e0      	bne.n	2121c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   2125a:	46c0      	nop			; (mov r8, r8)
   2125c:	46bd      	mov	sp, r7
   2125e:	b002      	add	sp, #8
   21260:	bd80      	pop	{r7, pc}
   21262:	46c0      	nop			; (mov r8, r8)
   21264:	0001f751 	.word	0x0001f751
   21268:	20000564 	.word	0x20000564
   2126c:	0001f9f7 	.word	0x0001f9f7
   21270:	20000590 	.word	0x20000590
   21274:	20000578 	.word	0x20000578
   21278:	0001f775 	.word	0x0001f775
   2127c:	00021281 	.word	0x00021281

00021280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   21280:	b580      	push	{r7, lr}
   21282:	b082      	sub	sp, #8
   21284:	af00      	add	r7, sp, #0
   21286:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   21288:	687b      	ldr	r3, [r7, #4]
   2128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2128c:	0018      	movs	r0, r3
   2128e:	4b05      	ldr	r3, [pc, #20]	; (212a4 <prvDeleteTCB+0x24>)
   21290:	4798      	blx	r3
			vPortFree( pxTCB );
   21292:	687b      	ldr	r3, [r7, #4]
   21294:	0018      	movs	r0, r3
   21296:	4b03      	ldr	r3, [pc, #12]	; (212a4 <prvDeleteTCB+0x24>)
   21298:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   2129a:	46c0      	nop			; (mov r8, r8)
   2129c:	46bd      	mov	sp, r7
   2129e:	b002      	add	sp, #8
   212a0:	bd80      	pop	{r7, pc}
   212a2:	46c0      	nop			; (mov r8, r8)
   212a4:	0001f8c1 	.word	0x0001f8c1

000212a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   212a8:	b580      	push	{r7, lr}
   212aa:	b082      	sub	sp, #8
   212ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   212ae:	4b0e      	ldr	r3, [pc, #56]	; (212e8 <prvResetNextTaskUnblockTime+0x40>)
   212b0:	681b      	ldr	r3, [r3, #0]
   212b2:	681b      	ldr	r3, [r3, #0]
   212b4:	2b00      	cmp	r3, #0
   212b6:	d101      	bne.n	212bc <prvResetNextTaskUnblockTime+0x14>
   212b8:	2301      	movs	r3, #1
   212ba:	e000      	b.n	212be <prvResetNextTaskUnblockTime+0x16>
   212bc:	2300      	movs	r3, #0
   212be:	2b00      	cmp	r3, #0
   212c0:	d004      	beq.n	212cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   212c2:	4b0a      	ldr	r3, [pc, #40]	; (212ec <prvResetNextTaskUnblockTime+0x44>)
   212c4:	2201      	movs	r2, #1
   212c6:	4252      	negs	r2, r2
   212c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   212ca:	e008      	b.n	212de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   212cc:	4b06      	ldr	r3, [pc, #24]	; (212e8 <prvResetNextTaskUnblockTime+0x40>)
   212ce:	681b      	ldr	r3, [r3, #0]
   212d0:	68db      	ldr	r3, [r3, #12]
   212d2:	68db      	ldr	r3, [r3, #12]
   212d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   212d6:	687b      	ldr	r3, [r7, #4]
   212d8:	685a      	ldr	r2, [r3, #4]
   212da:	4b04      	ldr	r3, [pc, #16]	; (212ec <prvResetNextTaskUnblockTime+0x44>)
   212dc:	601a      	str	r2, [r3, #0]
}
   212de:	46c0      	nop			; (mov r8, r8)
   212e0:	46bd      	mov	sp, r7
   212e2:	b002      	add	sp, #8
   212e4:	bd80      	pop	{r7, pc}
   212e6:	46c0      	nop			; (mov r8, r8)
   212e8:	20000548 	.word	0x20000548
   212ec:	200005b0 	.word	0x200005b0

000212f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   212f0:	b580      	push	{r7, lr}
   212f2:	b082      	sub	sp, #8
   212f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   212f6:	4b0a      	ldr	r3, [pc, #40]	; (21320 <xTaskGetSchedulerState+0x30>)
   212f8:	681b      	ldr	r3, [r3, #0]
   212fa:	2b00      	cmp	r3, #0
   212fc:	d102      	bne.n	21304 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   212fe:	2301      	movs	r3, #1
   21300:	607b      	str	r3, [r7, #4]
   21302:	e008      	b.n	21316 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   21304:	4b07      	ldr	r3, [pc, #28]	; (21324 <xTaskGetSchedulerState+0x34>)
   21306:	681b      	ldr	r3, [r3, #0]
   21308:	2b00      	cmp	r3, #0
   2130a:	d102      	bne.n	21312 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   2130c:	2302      	movs	r3, #2
   2130e:	607b      	str	r3, [r7, #4]
   21310:	e001      	b.n	21316 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   21312:	2300      	movs	r3, #0
   21314:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   21316:	687b      	ldr	r3, [r7, #4]
	}
   21318:	0018      	movs	r0, r3
   2131a:	46bd      	mov	sp, r7
   2131c:	b002      	add	sp, #8
   2131e:	bd80      	pop	{r7, pc}
   21320:	2000059c 	.word	0x2000059c
   21324:	200005b8 	.word	0x200005b8

00021328 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   21328:	b580      	push	{r7, lr}
   2132a:	b084      	sub	sp, #16
   2132c:	af00      	add	r7, sp, #0
   2132e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   21330:	687b      	ldr	r3, [r7, #4]
   21332:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   21334:	2300      	movs	r3, #0
   21336:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   21338:	687b      	ldr	r3, [r7, #4]
   2133a:	2b00      	cmp	r3, #0
   2133c:	d056      	beq.n	213ec <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   2133e:	68bb      	ldr	r3, [r7, #8]
   21340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21342:	4b2d      	ldr	r3, [pc, #180]	; (213f8 <xTaskPriorityInherit+0xd0>)
   21344:	681b      	ldr	r3, [r3, #0]
   21346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21348:	429a      	cmp	r2, r3
   2134a:	d246      	bcs.n	213da <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   2134c:	68bb      	ldr	r3, [r7, #8]
   2134e:	699b      	ldr	r3, [r3, #24]
   21350:	2b00      	cmp	r3, #0
   21352:	db06      	blt.n	21362 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21354:	4b28      	ldr	r3, [pc, #160]	; (213f8 <xTaskPriorityInherit+0xd0>)
   21356:	681b      	ldr	r3, [r3, #0]
   21358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2135a:	2205      	movs	r2, #5
   2135c:	1ad2      	subs	r2, r2, r3
   2135e:	68bb      	ldr	r3, [r7, #8]
   21360:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   21362:	68bb      	ldr	r3, [r7, #8]
   21364:	6959      	ldr	r1, [r3, #20]
   21366:	68bb      	ldr	r3, [r7, #8]
   21368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2136a:	0013      	movs	r3, r2
   2136c:	009b      	lsls	r3, r3, #2
   2136e:	189b      	adds	r3, r3, r2
   21370:	009b      	lsls	r3, r3, #2
   21372:	4a22      	ldr	r2, [pc, #136]	; (213fc <xTaskPriorityInherit+0xd4>)
   21374:	189b      	adds	r3, r3, r2
   21376:	4299      	cmp	r1, r3
   21378:	d101      	bne.n	2137e <xTaskPriorityInherit+0x56>
   2137a:	2301      	movs	r3, #1
   2137c:	e000      	b.n	21380 <xTaskPriorityInherit+0x58>
   2137e:	2300      	movs	r3, #0
   21380:	2b00      	cmp	r3, #0
   21382:	d022      	beq.n	213ca <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   21384:	68bb      	ldr	r3, [r7, #8]
   21386:	3304      	adds	r3, #4
   21388:	0018      	movs	r0, r3
   2138a:	4b1d      	ldr	r3, [pc, #116]	; (21400 <xTaskPriorityInherit+0xd8>)
   2138c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   2138e:	4b1a      	ldr	r3, [pc, #104]	; (213f8 <xTaskPriorityInherit+0xd0>)
   21390:	681b      	ldr	r3, [r3, #0]
   21392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21394:	68bb      	ldr	r3, [r7, #8]
   21396:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   21398:	68bb      	ldr	r3, [r7, #8]
   2139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2139c:	4b19      	ldr	r3, [pc, #100]	; (21404 <xTaskPriorityInherit+0xdc>)
   2139e:	681b      	ldr	r3, [r3, #0]
   213a0:	429a      	cmp	r2, r3
   213a2:	d903      	bls.n	213ac <xTaskPriorityInherit+0x84>
   213a4:	68bb      	ldr	r3, [r7, #8]
   213a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   213a8:	4b16      	ldr	r3, [pc, #88]	; (21404 <xTaskPriorityInherit+0xdc>)
   213aa:	601a      	str	r2, [r3, #0]
   213ac:	68bb      	ldr	r3, [r7, #8]
   213ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   213b0:	0013      	movs	r3, r2
   213b2:	009b      	lsls	r3, r3, #2
   213b4:	189b      	adds	r3, r3, r2
   213b6:	009b      	lsls	r3, r3, #2
   213b8:	4a10      	ldr	r2, [pc, #64]	; (213fc <xTaskPriorityInherit+0xd4>)
   213ba:	189a      	adds	r2, r3, r2
   213bc:	68bb      	ldr	r3, [r7, #8]
   213be:	3304      	adds	r3, #4
   213c0:	0019      	movs	r1, r3
   213c2:	0010      	movs	r0, r2
   213c4:	4b10      	ldr	r3, [pc, #64]	; (21408 <xTaskPriorityInherit+0xe0>)
   213c6:	4798      	blx	r3
   213c8:	e004      	b.n	213d4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   213ca:	4b0b      	ldr	r3, [pc, #44]	; (213f8 <xTaskPriorityInherit+0xd0>)
   213cc:	681b      	ldr	r3, [r3, #0]
   213ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   213d0:	68bb      	ldr	r3, [r7, #8]
   213d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   213d4:	2301      	movs	r3, #1
   213d6:	60fb      	str	r3, [r7, #12]
   213d8:	e008      	b.n	213ec <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   213da:	68bb      	ldr	r3, [r7, #8]
   213dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   213de:	4b06      	ldr	r3, [pc, #24]	; (213f8 <xTaskPriorityInherit+0xd0>)
   213e0:	681b      	ldr	r3, [r3, #0]
   213e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   213e4:	429a      	cmp	r2, r3
   213e6:	d201      	bcs.n	213ec <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   213e8:	2301      	movs	r3, #1
   213ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   213ec:	68fb      	ldr	r3, [r7, #12]
	}
   213ee:	0018      	movs	r0, r3
   213f0:	46bd      	mov	sp, r7
   213f2:	b004      	add	sp, #16
   213f4:	bd80      	pop	{r7, pc}
   213f6:	46c0      	nop			; (mov r8, r8)
   213f8:	200004b8 	.word	0x200004b8
   213fc:	200004bc 	.word	0x200004bc
   21400:	0001f9f7 	.word	0x0001f9f7
   21404:	20000598 	.word	0x20000598
   21408:	0001f947 	.word	0x0001f947

0002140c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   2140c:	b580      	push	{r7, lr}
   2140e:	b084      	sub	sp, #16
   21410:	af00      	add	r7, sp, #0
   21412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   21414:	687b      	ldr	r3, [r7, #4]
   21416:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   21418:	2300      	movs	r3, #0
   2141a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   2141c:	687b      	ldr	r3, [r7, #4]
   2141e:	2b00      	cmp	r3, #0
   21420:	d044      	beq.n	214ac <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   21422:	4b25      	ldr	r3, [pc, #148]	; (214b8 <xTaskPriorityDisinherit+0xac>)
   21424:	681b      	ldr	r3, [r3, #0]
   21426:	68ba      	ldr	r2, [r7, #8]
   21428:	429a      	cmp	r2, r3
   2142a:	d001      	beq.n	21430 <xTaskPriorityDisinherit+0x24>
   2142c:	b672      	cpsid	i
   2142e:	e7fe      	b.n	2142e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   21430:	68bb      	ldr	r3, [r7, #8]
   21432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21434:	2b00      	cmp	r3, #0
   21436:	d101      	bne.n	2143c <xTaskPriorityDisinherit+0x30>
   21438:	b672      	cpsid	i
   2143a:	e7fe      	b.n	2143a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   2143c:	68bb      	ldr	r3, [r7, #8]
   2143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21440:	1e5a      	subs	r2, r3, #1
   21442:	68bb      	ldr	r3, [r7, #8]
   21444:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   21446:	68bb      	ldr	r3, [r7, #8]
   21448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2144a:	68bb      	ldr	r3, [r7, #8]
   2144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2144e:	429a      	cmp	r2, r3
   21450:	d02c      	beq.n	214ac <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   21452:	68bb      	ldr	r3, [r7, #8]
   21454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   21456:	2b00      	cmp	r3, #0
   21458:	d128      	bne.n	214ac <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   2145a:	68bb      	ldr	r3, [r7, #8]
   2145c:	3304      	adds	r3, #4
   2145e:	0018      	movs	r0, r3
   21460:	4b16      	ldr	r3, [pc, #88]	; (214bc <xTaskPriorityDisinherit+0xb0>)
   21462:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   21464:	68bb      	ldr	r3, [r7, #8]
   21466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21468:	68bb      	ldr	r3, [r7, #8]
   2146a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2146c:	68bb      	ldr	r3, [r7, #8]
   2146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21470:	2205      	movs	r2, #5
   21472:	1ad2      	subs	r2, r2, r3
   21474:	68bb      	ldr	r3, [r7, #8]
   21476:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   21478:	68bb      	ldr	r3, [r7, #8]
   2147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2147c:	4b10      	ldr	r3, [pc, #64]	; (214c0 <xTaskPriorityDisinherit+0xb4>)
   2147e:	681b      	ldr	r3, [r3, #0]
   21480:	429a      	cmp	r2, r3
   21482:	d903      	bls.n	2148c <xTaskPriorityDisinherit+0x80>
   21484:	68bb      	ldr	r3, [r7, #8]
   21486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21488:	4b0d      	ldr	r3, [pc, #52]	; (214c0 <xTaskPriorityDisinherit+0xb4>)
   2148a:	601a      	str	r2, [r3, #0]
   2148c:	68bb      	ldr	r3, [r7, #8]
   2148e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21490:	0013      	movs	r3, r2
   21492:	009b      	lsls	r3, r3, #2
   21494:	189b      	adds	r3, r3, r2
   21496:	009b      	lsls	r3, r3, #2
   21498:	4a0a      	ldr	r2, [pc, #40]	; (214c4 <xTaskPriorityDisinherit+0xb8>)
   2149a:	189a      	adds	r2, r3, r2
   2149c:	68bb      	ldr	r3, [r7, #8]
   2149e:	3304      	adds	r3, #4
   214a0:	0019      	movs	r1, r3
   214a2:	0010      	movs	r0, r2
   214a4:	4b08      	ldr	r3, [pc, #32]	; (214c8 <xTaskPriorityDisinherit+0xbc>)
   214a6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   214a8:	2301      	movs	r3, #1
   214aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   214ac:	68fb      	ldr	r3, [r7, #12]
	}
   214ae:	0018      	movs	r0, r3
   214b0:	46bd      	mov	sp, r7
   214b2:	b004      	add	sp, #16
   214b4:	bd80      	pop	{r7, pc}
   214b6:	46c0      	nop			; (mov r8, r8)
   214b8:	200004b8 	.word	0x200004b8
   214bc:	0001f9f7 	.word	0x0001f9f7
   214c0:	20000598 	.word	0x20000598
   214c4:	200004bc 	.word	0x200004bc
   214c8:	0001f947 	.word	0x0001f947

000214cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   214cc:	b580      	push	{r7, lr}
   214ce:	b086      	sub	sp, #24
   214d0:	af00      	add	r7, sp, #0
   214d2:	6078      	str	r0, [r7, #4]
   214d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   214d6:	687b      	ldr	r3, [r7, #4]
   214d8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   214da:	2301      	movs	r3, #1
   214dc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   214de:	687b      	ldr	r3, [r7, #4]
   214e0:	2b00      	cmp	r3, #0
   214e2:	d05d      	beq.n	215a0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   214e4:	693b      	ldr	r3, [r7, #16]
   214e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   214e8:	2b00      	cmp	r3, #0
   214ea:	d101      	bne.n	214f0 <vTaskPriorityDisinheritAfterTimeout+0x24>
   214ec:	b672      	cpsid	i
   214ee:	e7fe      	b.n	214ee <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   214f0:	693b      	ldr	r3, [r7, #16]
   214f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   214f4:	683b      	ldr	r3, [r7, #0]
   214f6:	429a      	cmp	r2, r3
   214f8:	d202      	bcs.n	21500 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   214fa:	683b      	ldr	r3, [r7, #0]
   214fc:	617b      	str	r3, [r7, #20]
   214fe:	e002      	b.n	21506 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   21500:	693b      	ldr	r3, [r7, #16]
   21502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   21504:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   21506:	693b      	ldr	r3, [r7, #16]
   21508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2150a:	697b      	ldr	r3, [r7, #20]
   2150c:	429a      	cmp	r2, r3
   2150e:	d047      	beq.n	215a0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   21510:	693b      	ldr	r3, [r7, #16]
   21512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   21514:	68fb      	ldr	r3, [r7, #12]
   21516:	429a      	cmp	r2, r3
   21518:	d142      	bne.n	215a0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   2151a:	4b23      	ldr	r3, [pc, #140]	; (215a8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   2151c:	681b      	ldr	r3, [r3, #0]
   2151e:	693a      	ldr	r2, [r7, #16]
   21520:	429a      	cmp	r2, r3
   21522:	d101      	bne.n	21528 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   21524:	b672      	cpsid	i
   21526:	e7fe      	b.n	21526 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   21528:	693b      	ldr	r3, [r7, #16]
   2152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2152c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   2152e:	693b      	ldr	r3, [r7, #16]
   21530:	697a      	ldr	r2, [r7, #20]
   21532:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   21534:	693b      	ldr	r3, [r7, #16]
   21536:	699b      	ldr	r3, [r3, #24]
   21538:	2b00      	cmp	r3, #0
   2153a:	db04      	blt.n	21546 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2153c:	697b      	ldr	r3, [r7, #20]
   2153e:	2205      	movs	r2, #5
   21540:	1ad2      	subs	r2, r2, r3
   21542:	693b      	ldr	r3, [r7, #16]
   21544:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   21546:	693b      	ldr	r3, [r7, #16]
   21548:	6959      	ldr	r1, [r3, #20]
   2154a:	68ba      	ldr	r2, [r7, #8]
   2154c:	0013      	movs	r3, r2
   2154e:	009b      	lsls	r3, r3, #2
   21550:	189b      	adds	r3, r3, r2
   21552:	009b      	lsls	r3, r3, #2
   21554:	4a15      	ldr	r2, [pc, #84]	; (215ac <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   21556:	189b      	adds	r3, r3, r2
   21558:	4299      	cmp	r1, r3
   2155a:	d101      	bne.n	21560 <vTaskPriorityDisinheritAfterTimeout+0x94>
   2155c:	2301      	movs	r3, #1
   2155e:	e000      	b.n	21562 <vTaskPriorityDisinheritAfterTimeout+0x96>
   21560:	2300      	movs	r3, #0
   21562:	2b00      	cmp	r3, #0
   21564:	d01c      	beq.n	215a0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   21566:	693b      	ldr	r3, [r7, #16]
   21568:	3304      	adds	r3, #4
   2156a:	0018      	movs	r0, r3
   2156c:	4b10      	ldr	r3, [pc, #64]	; (215b0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   2156e:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   21570:	693b      	ldr	r3, [r7, #16]
   21572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21574:	4b0f      	ldr	r3, [pc, #60]	; (215b4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   21576:	681b      	ldr	r3, [r3, #0]
   21578:	429a      	cmp	r2, r3
   2157a:	d903      	bls.n	21584 <vTaskPriorityDisinheritAfterTimeout+0xb8>
   2157c:	693b      	ldr	r3, [r7, #16]
   2157e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21580:	4b0c      	ldr	r3, [pc, #48]	; (215b4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   21582:	601a      	str	r2, [r3, #0]
   21584:	693b      	ldr	r3, [r7, #16]
   21586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21588:	0013      	movs	r3, r2
   2158a:	009b      	lsls	r3, r3, #2
   2158c:	189b      	adds	r3, r3, r2
   2158e:	009b      	lsls	r3, r3, #2
   21590:	4a06      	ldr	r2, [pc, #24]	; (215ac <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   21592:	189a      	adds	r2, r3, r2
   21594:	693b      	ldr	r3, [r7, #16]
   21596:	3304      	adds	r3, #4
   21598:	0019      	movs	r1, r3
   2159a:	0010      	movs	r0, r2
   2159c:	4b06      	ldr	r3, [pc, #24]	; (215b8 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   2159e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   215a0:	46c0      	nop			; (mov r8, r8)
   215a2:	46bd      	mov	sp, r7
   215a4:	b006      	add	sp, #24
   215a6:	bd80      	pop	{r7, pc}
   215a8:	200004b8 	.word	0x200004b8
   215ac:	200004bc 	.word	0x200004bc
   215b0:	0001f9f7 	.word	0x0001f9f7
   215b4:	20000598 	.word	0x20000598
   215b8:	0001f947 	.word	0x0001f947

000215bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   215bc:	b580      	push	{r7, lr}
   215be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   215c0:	4b06      	ldr	r3, [pc, #24]	; (215dc <pvTaskIncrementMutexHeldCount+0x20>)
   215c2:	681b      	ldr	r3, [r3, #0]
   215c4:	2b00      	cmp	r3, #0
   215c6:	d004      	beq.n	215d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   215c8:	4b04      	ldr	r3, [pc, #16]	; (215dc <pvTaskIncrementMutexHeldCount+0x20>)
   215ca:	681b      	ldr	r3, [r3, #0]
   215cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   215ce:	3201      	adds	r2, #1
   215d0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   215d2:	4b02      	ldr	r3, [pc, #8]	; (215dc <pvTaskIncrementMutexHeldCount+0x20>)
   215d4:	681b      	ldr	r3, [r3, #0]
	}
   215d6:	0018      	movs	r0, r3
   215d8:	46bd      	mov	sp, r7
   215da:	bd80      	pop	{r7, pc}
   215dc:	200004b8 	.word	0x200004b8

000215e0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
   215e0:	b580      	push	{r7, lr}
   215e2:	b084      	sub	sp, #16
   215e4:	af00      	add	r7, sp, #0
   215e6:	6078      	str	r0, [r7, #4]
   215e8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
   215ea:	4b1d      	ldr	r3, [pc, #116]	; (21660 <ulTaskNotifyTake+0x80>)
   215ec:	4798      	blx	r3
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
   215ee:	4b1d      	ldr	r3, [pc, #116]	; (21664 <ulTaskNotifyTake+0x84>)
   215f0:	681b      	ldr	r3, [r3, #0]
   215f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   215f4:	2b00      	cmp	r3, #0
   215f6:	d10e      	bne.n	21616 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
   215f8:	4b1a      	ldr	r3, [pc, #104]	; (21664 <ulTaskNotifyTake+0x84>)
   215fa:	681b      	ldr	r3, [r3, #0]
   215fc:	224c      	movs	r2, #76	; 0x4c
   215fe:	2101      	movs	r1, #1
   21600:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
   21602:	683b      	ldr	r3, [r7, #0]
   21604:	2b00      	cmp	r3, #0
   21606:	d006      	beq.n	21616 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   21608:	683b      	ldr	r3, [r7, #0]
   2160a:	2101      	movs	r1, #1
   2160c:	0018      	movs	r0, r3
   2160e:	4b16      	ldr	r3, [pc, #88]	; (21668 <ulTaskNotifyTake+0x88>)
   21610:	4798      	blx	r3

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
   21612:	4b16      	ldr	r3, [pc, #88]	; (2166c <ulTaskNotifyTake+0x8c>)
   21614:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
   21616:	4b16      	ldr	r3, [pc, #88]	; (21670 <ulTaskNotifyTake+0x90>)
   21618:	4798      	blx	r3

		taskENTER_CRITICAL();
   2161a:	4b11      	ldr	r3, [pc, #68]	; (21660 <ulTaskNotifyTake+0x80>)
   2161c:	4798      	blx	r3
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
   2161e:	4b11      	ldr	r3, [pc, #68]	; (21664 <ulTaskNotifyTake+0x84>)
   21620:	681b      	ldr	r3, [r3, #0]
   21622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   21624:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
   21626:	68fb      	ldr	r3, [r7, #12]
   21628:	2b00      	cmp	r3, #0
   2162a:	d00c      	beq.n	21646 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
   2162c:	687b      	ldr	r3, [r7, #4]
   2162e:	2b00      	cmp	r3, #0
   21630:	d004      	beq.n	2163c <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
   21632:	4b0c      	ldr	r3, [pc, #48]	; (21664 <ulTaskNotifyTake+0x84>)
   21634:	681b      	ldr	r3, [r3, #0]
   21636:	2200      	movs	r2, #0
   21638:	649a      	str	r2, [r3, #72]	; 0x48
   2163a:	e004      	b.n	21646 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
   2163c:	4b09      	ldr	r3, [pc, #36]	; (21664 <ulTaskNotifyTake+0x84>)
   2163e:	681b      	ldr	r3, [r3, #0]
   21640:	68fa      	ldr	r2, [r7, #12]
   21642:	3a01      	subs	r2, #1
   21644:	649a      	str	r2, [r3, #72]	; 0x48
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   21646:	4b07      	ldr	r3, [pc, #28]	; (21664 <ulTaskNotifyTake+0x84>)
   21648:	681b      	ldr	r3, [r3, #0]
   2164a:	224c      	movs	r2, #76	; 0x4c
   2164c:	2100      	movs	r1, #0
   2164e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
   21650:	4b07      	ldr	r3, [pc, #28]	; (21670 <ulTaskNotifyTake+0x90>)
   21652:	4798      	blx	r3

		return ulReturn;
   21654:	68fb      	ldr	r3, [r7, #12]
	}
   21656:	0018      	movs	r0, r3
   21658:	46bd      	mov	sp, r7
   2165a:	b004      	add	sp, #16
   2165c:	bd80      	pop	{r7, pc}
   2165e:	46c0      	nop			; (mov r8, r8)
   21660:	0001f751 	.word	0x0001f751
   21664:	200004b8 	.word	0x200004b8
   21668:	00021779 	.word	0x00021779
   2166c:	0001f731 	.word	0x0001f731
   21670:	0001f775 	.word	0x0001f775

00021674 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
   21674:	b580      	push	{r7, lr}
   21676:	b086      	sub	sp, #24
   21678:	af00      	add	r7, sp, #0
   2167a:	6078      	str	r0, [r7, #4]
   2167c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
   2167e:	687b      	ldr	r3, [r7, #4]
   21680:	2b00      	cmp	r3, #0
   21682:	d101      	bne.n	21688 <vTaskNotifyGiveFromISR+0x14>
   21684:	b672      	cpsid	i
   21686:	e7fe      	b.n	21686 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
   21688:	687b      	ldr	r3, [r7, #4]
   2168a:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   2168c:	4b30      	ldr	r3, [pc, #192]	; (21750 <vTaskNotifyGiveFromISR+0xdc>)
   2168e:	4798      	blx	r3
   21690:	0003      	movs	r3, r0
   21692:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
   21694:	230f      	movs	r3, #15
   21696:	18fb      	adds	r3, r7, r3
   21698:	697a      	ldr	r2, [r7, #20]
   2169a:	214c      	movs	r1, #76	; 0x4c
   2169c:	5c52      	ldrb	r2, [r2, r1]
   2169e:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
   216a0:	697b      	ldr	r3, [r7, #20]
   216a2:	224c      	movs	r2, #76	; 0x4c
   216a4:	2102      	movs	r1, #2
   216a6:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
   216a8:	697b      	ldr	r3, [r7, #20]
   216aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   216ac:	1c5a      	adds	r2, r3, #1
   216ae:	697b      	ldr	r3, [r7, #20]
   216b0:	649a      	str	r2, [r3, #72]	; 0x48

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
   216b2:	230f      	movs	r3, #15
   216b4:	18fb      	adds	r3, r7, r3
   216b6:	781b      	ldrb	r3, [r3, #0]
   216b8:	2b01      	cmp	r3, #1
   216ba:	d140      	bne.n	2173e <vTaskNotifyGiveFromISR+0xca>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
   216bc:	697b      	ldr	r3, [r7, #20]
   216be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   216c0:	2b00      	cmp	r3, #0
   216c2:	d001      	beq.n	216c8 <vTaskNotifyGiveFromISR+0x54>
   216c4:	b672      	cpsid	i
   216c6:	e7fe      	b.n	216c6 <vTaskNotifyGiveFromISR+0x52>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   216c8:	4b22      	ldr	r3, [pc, #136]	; (21754 <vTaskNotifyGiveFromISR+0xe0>)
   216ca:	681b      	ldr	r3, [r3, #0]
   216cc:	2b00      	cmp	r3, #0
   216ce:	d11d      	bne.n	2170c <vTaskNotifyGiveFromISR+0x98>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   216d0:	697b      	ldr	r3, [r7, #20]
   216d2:	3304      	adds	r3, #4
   216d4:	0018      	movs	r0, r3
   216d6:	4b20      	ldr	r3, [pc, #128]	; (21758 <vTaskNotifyGiveFromISR+0xe4>)
   216d8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   216da:	697b      	ldr	r3, [r7, #20]
   216dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   216de:	4b1f      	ldr	r3, [pc, #124]	; (2175c <vTaskNotifyGiveFromISR+0xe8>)
   216e0:	681b      	ldr	r3, [r3, #0]
   216e2:	429a      	cmp	r2, r3
   216e4:	d903      	bls.n	216ee <vTaskNotifyGiveFromISR+0x7a>
   216e6:	697b      	ldr	r3, [r7, #20]
   216e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   216ea:	4b1c      	ldr	r3, [pc, #112]	; (2175c <vTaskNotifyGiveFromISR+0xe8>)
   216ec:	601a      	str	r2, [r3, #0]
   216ee:	697b      	ldr	r3, [r7, #20]
   216f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   216f2:	0013      	movs	r3, r2
   216f4:	009b      	lsls	r3, r3, #2
   216f6:	189b      	adds	r3, r3, r2
   216f8:	009b      	lsls	r3, r3, #2
   216fa:	4a19      	ldr	r2, [pc, #100]	; (21760 <vTaskNotifyGiveFromISR+0xec>)
   216fc:	189a      	adds	r2, r3, r2
   216fe:	697b      	ldr	r3, [r7, #20]
   21700:	3304      	adds	r3, #4
   21702:	0019      	movs	r1, r3
   21704:	0010      	movs	r0, r2
   21706:	4b17      	ldr	r3, [pc, #92]	; (21764 <vTaskNotifyGiveFromISR+0xf0>)
   21708:	4798      	blx	r3
   2170a:	e007      	b.n	2171c <vTaskNotifyGiveFromISR+0xa8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   2170c:	697b      	ldr	r3, [r7, #20]
   2170e:	3318      	adds	r3, #24
   21710:	001a      	movs	r2, r3
   21712:	4b15      	ldr	r3, [pc, #84]	; (21768 <vTaskNotifyGiveFromISR+0xf4>)
   21714:	0011      	movs	r1, r2
   21716:	0018      	movs	r0, r3
   21718:	4b12      	ldr	r3, [pc, #72]	; (21764 <vTaskNotifyGiveFromISR+0xf0>)
   2171a:	4798      	blx	r3
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   2171c:	697b      	ldr	r3, [r7, #20]
   2171e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   21720:	4b12      	ldr	r3, [pc, #72]	; (2176c <vTaskNotifyGiveFromISR+0xf8>)
   21722:	681b      	ldr	r3, [r3, #0]
   21724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21726:	429a      	cmp	r2, r3
   21728:	d909      	bls.n	2173e <vTaskNotifyGiveFromISR+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
   2172a:	683b      	ldr	r3, [r7, #0]
   2172c:	2b00      	cmp	r3, #0
   2172e:	d003      	beq.n	21738 <vTaskNotifyGiveFromISR+0xc4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
   21730:	683b      	ldr	r3, [r7, #0]
   21732:	2201      	movs	r2, #1
   21734:	601a      	str	r2, [r3, #0]
   21736:	e002      	b.n	2173e <vTaskNotifyGiveFromISR+0xca>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
   21738:	4b0d      	ldr	r3, [pc, #52]	; (21770 <vTaskNotifyGiveFromISR+0xfc>)
   2173a:	2201      	movs	r2, #1
   2173c:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   2173e:	693b      	ldr	r3, [r7, #16]
   21740:	0018      	movs	r0, r3
   21742:	4b0c      	ldr	r3, [pc, #48]	; (21774 <vTaskNotifyGiveFromISR+0x100>)
   21744:	4798      	blx	r3
	}
   21746:	46c0      	nop			; (mov r8, r8)
   21748:	46bd      	mov	sp, r7
   2174a:	b006      	add	sp, #24
   2174c:	bd80      	pop	{r7, pc}
   2174e:	46c0      	nop			; (mov r8, r8)
   21750:	0001f7a5 	.word	0x0001f7a5
   21754:	200005b8 	.word	0x200005b8
   21758:	0001f9f7 	.word	0x0001f9f7
   2175c:	20000598 	.word	0x20000598
   21760:	200004bc 	.word	0x200004bc
   21764:	0001f947 	.word	0x0001f947
   21768:	20000550 	.word	0x20000550
   2176c:	200004b8 	.word	0x200004b8
   21770:	200005a4 	.word	0x200005a4
   21774:	0001f7b1 	.word	0x0001f7b1

00021778 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   21778:	b580      	push	{r7, lr}
   2177a:	b084      	sub	sp, #16
   2177c:	af00      	add	r7, sp, #0
   2177e:	6078      	str	r0, [r7, #4]
   21780:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   21782:	4b21      	ldr	r3, [pc, #132]	; (21808 <prvAddCurrentTaskToDelayedList+0x90>)
   21784:	681b      	ldr	r3, [r3, #0]
   21786:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   21788:	4b20      	ldr	r3, [pc, #128]	; (2180c <prvAddCurrentTaskToDelayedList+0x94>)
   2178a:	681b      	ldr	r3, [r3, #0]
   2178c:	3304      	adds	r3, #4
   2178e:	0018      	movs	r0, r3
   21790:	4b1f      	ldr	r3, [pc, #124]	; (21810 <prvAddCurrentTaskToDelayedList+0x98>)
   21792:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   21794:	687b      	ldr	r3, [r7, #4]
   21796:	3301      	adds	r3, #1
   21798:	d10b      	bne.n	217b2 <prvAddCurrentTaskToDelayedList+0x3a>
   2179a:	683b      	ldr	r3, [r7, #0]
   2179c:	2b00      	cmp	r3, #0
   2179e:	d008      	beq.n	217b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   217a0:	4b1a      	ldr	r3, [pc, #104]	; (2180c <prvAddCurrentTaskToDelayedList+0x94>)
   217a2:	681b      	ldr	r3, [r3, #0]
   217a4:	1d1a      	adds	r2, r3, #4
   217a6:	4b1b      	ldr	r3, [pc, #108]	; (21814 <prvAddCurrentTaskToDelayedList+0x9c>)
   217a8:	0011      	movs	r1, r2
   217aa:	0018      	movs	r0, r3
   217ac:	4b1a      	ldr	r3, [pc, #104]	; (21818 <prvAddCurrentTaskToDelayedList+0xa0>)
   217ae:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   217b0:	e026      	b.n	21800 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   217b2:	68fa      	ldr	r2, [r7, #12]
   217b4:	687b      	ldr	r3, [r7, #4]
   217b6:	18d3      	adds	r3, r2, r3
   217b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   217ba:	4b14      	ldr	r3, [pc, #80]	; (2180c <prvAddCurrentTaskToDelayedList+0x94>)
   217bc:	681b      	ldr	r3, [r3, #0]
   217be:	68ba      	ldr	r2, [r7, #8]
   217c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   217c2:	68ba      	ldr	r2, [r7, #8]
   217c4:	68fb      	ldr	r3, [r7, #12]
   217c6:	429a      	cmp	r2, r3
   217c8:	d209      	bcs.n	217de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   217ca:	4b14      	ldr	r3, [pc, #80]	; (2181c <prvAddCurrentTaskToDelayedList+0xa4>)
   217cc:	681a      	ldr	r2, [r3, #0]
   217ce:	4b0f      	ldr	r3, [pc, #60]	; (2180c <prvAddCurrentTaskToDelayedList+0x94>)
   217d0:	681b      	ldr	r3, [r3, #0]
   217d2:	3304      	adds	r3, #4
   217d4:	0019      	movs	r1, r3
   217d6:	0010      	movs	r0, r2
   217d8:	4b11      	ldr	r3, [pc, #68]	; (21820 <prvAddCurrentTaskToDelayedList+0xa8>)
   217da:	4798      	blx	r3
}
   217dc:	e010      	b.n	21800 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   217de:	4b11      	ldr	r3, [pc, #68]	; (21824 <prvAddCurrentTaskToDelayedList+0xac>)
   217e0:	681a      	ldr	r2, [r3, #0]
   217e2:	4b0a      	ldr	r3, [pc, #40]	; (2180c <prvAddCurrentTaskToDelayedList+0x94>)
   217e4:	681b      	ldr	r3, [r3, #0]
   217e6:	3304      	adds	r3, #4
   217e8:	0019      	movs	r1, r3
   217ea:	0010      	movs	r0, r2
   217ec:	4b0c      	ldr	r3, [pc, #48]	; (21820 <prvAddCurrentTaskToDelayedList+0xa8>)
   217ee:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   217f0:	4b0d      	ldr	r3, [pc, #52]	; (21828 <prvAddCurrentTaskToDelayedList+0xb0>)
   217f2:	681b      	ldr	r3, [r3, #0]
   217f4:	68ba      	ldr	r2, [r7, #8]
   217f6:	429a      	cmp	r2, r3
   217f8:	d202      	bcs.n	21800 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   217fa:	4b0b      	ldr	r3, [pc, #44]	; (21828 <prvAddCurrentTaskToDelayedList+0xb0>)
   217fc:	68ba      	ldr	r2, [r7, #8]
   217fe:	601a      	str	r2, [r3, #0]
}
   21800:	46c0      	nop			; (mov r8, r8)
   21802:	46bd      	mov	sp, r7
   21804:	b004      	add	sp, #16
   21806:	bd80      	pop	{r7, pc}
   21808:	20000594 	.word	0x20000594
   2180c:	200004b8 	.word	0x200004b8
   21810:	0001f9f7 	.word	0x0001f9f7
   21814:	2000057c 	.word	0x2000057c
   21818:	0001f947 	.word	0x0001f947
   2181c:	2000054c 	.word	0x2000054c
   21820:	0001f98b 	.word	0x0001f98b
   21824:	20000548 	.word	0x20000548
   21828:	200005b0 	.word	0x200005b0

0002182c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   2182c:	b590      	push	{r4, r7, lr}
   2182e:	b085      	sub	sp, #20
   21830:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   21832:	2300      	movs	r3, #0
   21834:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   21836:	4b0e      	ldr	r3, [pc, #56]	; (21870 <xTimerCreateTimerTask+0x44>)
   21838:	4798      	blx	r3

	if( xTimerQueue != NULL )
   2183a:	4b0e      	ldr	r3, [pc, #56]	; (21874 <xTimerCreateTimerTask+0x48>)
   2183c:	681b      	ldr	r3, [r3, #0]
   2183e:	2b00      	cmp	r3, #0
   21840:	d00c      	beq.n	2185c <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   21842:	2382      	movs	r3, #130	; 0x82
   21844:	005a      	lsls	r2, r3, #1
   21846:	490c      	ldr	r1, [pc, #48]	; (21878 <xTimerCreateTimerTask+0x4c>)
   21848:	480c      	ldr	r0, [pc, #48]	; (2187c <xTimerCreateTimerTask+0x50>)
   2184a:	4b0d      	ldr	r3, [pc, #52]	; (21880 <xTimerCreateTimerTask+0x54>)
   2184c:	9301      	str	r3, [sp, #4]
   2184e:	2304      	movs	r3, #4
   21850:	9300      	str	r3, [sp, #0]
   21852:	2300      	movs	r3, #0
   21854:	4c0b      	ldr	r4, [pc, #44]	; (21884 <xTimerCreateTimerTask+0x58>)
   21856:	47a0      	blx	r4
   21858:	0003      	movs	r3, r0
   2185a:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   2185c:	687b      	ldr	r3, [r7, #4]
   2185e:	2b00      	cmp	r3, #0
   21860:	d101      	bne.n	21866 <xTimerCreateTimerTask+0x3a>
   21862:	b672      	cpsid	i
   21864:	e7fe      	b.n	21864 <xTimerCreateTimerTask+0x38>
	return xReturn;
   21866:	687b      	ldr	r3, [r7, #4]
}
   21868:	0018      	movs	r0, r3
   2186a:	46bd      	mov	sp, r7
   2186c:	b003      	add	sp, #12
   2186e:	bd90      	pop	{r4, r7, pc}
   21870:	00021e3d 	.word	0x00021e3d
   21874:	200005ec 	.word	0x200005ec
   21878:	0002b4b8 	.word	0x0002b4b8
   2187c:	00021a51 	.word	0x00021a51
   21880:	200005f0 	.word	0x200005f0
   21884:	00020629 	.word	0x00020629

00021888 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   21888:	b590      	push	{r4, r7, lr}
   2188a:	b089      	sub	sp, #36	; 0x24
   2188c:	af02      	add	r7, sp, #8
   2188e:	60f8      	str	r0, [r7, #12]
   21890:	60b9      	str	r1, [r7, #8]
   21892:	607a      	str	r2, [r7, #4]
   21894:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   21896:	2028      	movs	r0, #40	; 0x28
   21898:	4b0b      	ldr	r3, [pc, #44]	; (218c8 <xTimerCreate+0x40>)
   2189a:	4798      	blx	r3
   2189c:	0003      	movs	r3, r0
   2189e:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
   218a0:	697b      	ldr	r3, [r7, #20]
   218a2:	2b00      	cmp	r3, #0
   218a4:	d00a      	beq.n	218bc <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   218a6:	683c      	ldr	r4, [r7, #0]
   218a8:	687a      	ldr	r2, [r7, #4]
   218aa:	68b9      	ldr	r1, [r7, #8]
   218ac:	68f8      	ldr	r0, [r7, #12]
   218ae:	697b      	ldr	r3, [r7, #20]
   218b0:	9301      	str	r3, [sp, #4]
   218b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   218b4:	9300      	str	r3, [sp, #0]
   218b6:	0023      	movs	r3, r4
   218b8:	4c04      	ldr	r4, [pc, #16]	; (218cc <xTimerCreate+0x44>)
   218ba:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   218bc:	697b      	ldr	r3, [r7, #20]
	}
   218be:	0018      	movs	r0, r3
   218c0:	46bd      	mov	sp, r7
   218c2:	b007      	add	sp, #28
   218c4:	bd90      	pop	{r4, r7, pc}
   218c6:	46c0      	nop			; (mov r8, r8)
   218c8:	0001f88d 	.word	0x0001f88d
   218cc:	000218d1 	.word	0x000218d1

000218d0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   218d0:	b580      	push	{r7, lr}
   218d2:	b084      	sub	sp, #16
   218d4:	af00      	add	r7, sp, #0
   218d6:	60f8      	str	r0, [r7, #12]
   218d8:	60b9      	str	r1, [r7, #8]
   218da:	607a      	str	r2, [r7, #4]
   218dc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   218de:	68bb      	ldr	r3, [r7, #8]
   218e0:	2b00      	cmp	r3, #0
   218e2:	d101      	bne.n	218e8 <prvInitialiseNewTimer+0x18>
   218e4:	b672      	cpsid	i
   218e6:	e7fe      	b.n	218e6 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
   218e8:	69fb      	ldr	r3, [r7, #28]
   218ea:	2b00      	cmp	r3, #0
   218ec:	d015      	beq.n	2191a <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   218ee:	4b0d      	ldr	r3, [pc, #52]	; (21924 <prvInitialiseNewTimer+0x54>)
   218f0:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   218f2:	69fb      	ldr	r3, [r7, #28]
   218f4:	68fa      	ldr	r2, [r7, #12]
   218f6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   218f8:	69fb      	ldr	r3, [r7, #28]
   218fa:	68ba      	ldr	r2, [r7, #8]
   218fc:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   218fe:	69fb      	ldr	r3, [r7, #28]
   21900:	687a      	ldr	r2, [r7, #4]
   21902:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   21904:	69fb      	ldr	r3, [r7, #28]
   21906:	683a      	ldr	r2, [r7, #0]
   21908:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   2190a:	69fb      	ldr	r3, [r7, #28]
   2190c:	69ba      	ldr	r2, [r7, #24]
   2190e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   21910:	69fb      	ldr	r3, [r7, #28]
   21912:	3304      	adds	r3, #4
   21914:	0018      	movs	r0, r3
   21916:	4b04      	ldr	r3, [pc, #16]	; (21928 <prvInitialiseNewTimer+0x58>)
   21918:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
   2191a:	46c0      	nop			; (mov r8, r8)
   2191c:	46bd      	mov	sp, r7
   2191e:	b004      	add	sp, #16
   21920:	bd80      	pop	{r7, pc}
   21922:	46c0      	nop			; (mov r8, r8)
   21924:	00021e3d 	.word	0x00021e3d
   21928:	0001f931 	.word	0x0001f931

0002192c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   2192c:	b590      	push	{r4, r7, lr}
   2192e:	b08b      	sub	sp, #44	; 0x2c
   21930:	af00      	add	r7, sp, #0
   21932:	60f8      	str	r0, [r7, #12]
   21934:	60b9      	str	r1, [r7, #8]
   21936:	607a      	str	r2, [r7, #4]
   21938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   2193a:	2300      	movs	r3, #0
   2193c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   2193e:	68fb      	ldr	r3, [r7, #12]
   21940:	2b00      	cmp	r3, #0
   21942:	d101      	bne.n	21948 <xTimerGenericCommand+0x1c>
   21944:	b672      	cpsid	i
   21946:	e7fe      	b.n	21946 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   21948:	4b1e      	ldr	r3, [pc, #120]	; (219c4 <xTimerGenericCommand+0x98>)
   2194a:	681b      	ldr	r3, [r3, #0]
   2194c:	2b00      	cmp	r3, #0
   2194e:	d033      	beq.n	219b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   21950:	2314      	movs	r3, #20
   21952:	18fb      	adds	r3, r7, r3
   21954:	68ba      	ldr	r2, [r7, #8]
   21956:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   21958:	2314      	movs	r3, #20
   2195a:	18fb      	adds	r3, r7, r3
   2195c:	687a      	ldr	r2, [r7, #4]
   2195e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   21960:	2314      	movs	r3, #20
   21962:	18fb      	adds	r3, r7, r3
   21964:	68fa      	ldr	r2, [r7, #12]
   21966:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   21968:	68bb      	ldr	r3, [r7, #8]
   2196a:	2b05      	cmp	r3, #5
   2196c:	dc1a      	bgt.n	219a4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   2196e:	4b16      	ldr	r3, [pc, #88]	; (219c8 <xTimerGenericCommand+0x9c>)
   21970:	4798      	blx	r3
   21972:	0003      	movs	r3, r0
   21974:	2b02      	cmp	r3, #2
   21976:	d10a      	bne.n	2198e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   21978:	4b12      	ldr	r3, [pc, #72]	; (219c4 <xTimerGenericCommand+0x98>)
   2197a:	6818      	ldr	r0, [r3, #0]
   2197c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2197e:	2314      	movs	r3, #20
   21980:	18f9      	adds	r1, r7, r3
   21982:	2300      	movs	r3, #0
   21984:	4c11      	ldr	r4, [pc, #68]	; (219cc <xTimerGenericCommand+0xa0>)
   21986:	47a0      	blx	r4
   21988:	0003      	movs	r3, r0
   2198a:	627b      	str	r3, [r7, #36]	; 0x24
   2198c:	e014      	b.n	219b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   2198e:	4b0d      	ldr	r3, [pc, #52]	; (219c4 <xTimerGenericCommand+0x98>)
   21990:	6818      	ldr	r0, [r3, #0]
   21992:	2314      	movs	r3, #20
   21994:	18f9      	adds	r1, r7, r3
   21996:	2300      	movs	r3, #0
   21998:	2200      	movs	r2, #0
   2199a:	4c0c      	ldr	r4, [pc, #48]	; (219cc <xTimerGenericCommand+0xa0>)
   2199c:	47a0      	blx	r4
   2199e:	0003      	movs	r3, r0
   219a0:	627b      	str	r3, [r7, #36]	; 0x24
   219a2:	e009      	b.n	219b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   219a4:	4b07      	ldr	r3, [pc, #28]	; (219c4 <xTimerGenericCommand+0x98>)
   219a6:	6818      	ldr	r0, [r3, #0]
   219a8:	683a      	ldr	r2, [r7, #0]
   219aa:	2314      	movs	r3, #20
   219ac:	18f9      	adds	r1, r7, r3
   219ae:	2300      	movs	r3, #0
   219b0:	4c07      	ldr	r4, [pc, #28]	; (219d0 <xTimerGenericCommand+0xa4>)
   219b2:	47a0      	blx	r4
   219b4:	0003      	movs	r3, r0
   219b6:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   219b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   219ba:	0018      	movs	r0, r3
   219bc:	46bd      	mov	sp, r7
   219be:	b00b      	add	sp, #44	; 0x2c
   219c0:	bd90      	pop	{r4, r7, pc}
   219c2:	46c0      	nop			; (mov r8, r8)
   219c4:	200005ec 	.word	0x200005ec
   219c8:	000212f1 	.word	0x000212f1
   219cc:	0001fbc1 	.word	0x0001fbc1
   219d0:	0001fda1 	.word	0x0001fda1

000219d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   219d4:	b590      	push	{r4, r7, lr}
   219d6:	b087      	sub	sp, #28
   219d8:	af02      	add	r7, sp, #8
   219da:	6078      	str	r0, [r7, #4]
   219dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   219de:	4b18      	ldr	r3, [pc, #96]	; (21a40 <prvProcessExpiredTimer+0x6c>)
   219e0:	681b      	ldr	r3, [r3, #0]
   219e2:	68db      	ldr	r3, [r3, #12]
   219e4:	68db      	ldr	r3, [r3, #12]
   219e6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   219e8:	68fb      	ldr	r3, [r7, #12]
   219ea:	3304      	adds	r3, #4
   219ec:	0018      	movs	r0, r3
   219ee:	4b15      	ldr	r3, [pc, #84]	; (21a44 <prvProcessExpiredTimer+0x70>)
   219f0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   219f2:	68fb      	ldr	r3, [r7, #12]
   219f4:	69db      	ldr	r3, [r3, #28]
   219f6:	2b01      	cmp	r3, #1
   219f8:	d119      	bne.n	21a2e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   219fa:	68fb      	ldr	r3, [r7, #12]
   219fc:	699a      	ldr	r2, [r3, #24]
   219fe:	687b      	ldr	r3, [r7, #4]
   21a00:	18d1      	adds	r1, r2, r3
   21a02:	687b      	ldr	r3, [r7, #4]
   21a04:	683a      	ldr	r2, [r7, #0]
   21a06:	68f8      	ldr	r0, [r7, #12]
   21a08:	4c0f      	ldr	r4, [pc, #60]	; (21a48 <prvProcessExpiredTimer+0x74>)
   21a0a:	47a0      	blx	r4
   21a0c:	1e03      	subs	r3, r0, #0
   21a0e:	d00e      	beq.n	21a2e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   21a10:	687a      	ldr	r2, [r7, #4]
   21a12:	68f8      	ldr	r0, [r7, #12]
   21a14:	2300      	movs	r3, #0
   21a16:	9300      	str	r3, [sp, #0]
   21a18:	2300      	movs	r3, #0
   21a1a:	2100      	movs	r1, #0
   21a1c:	4c0b      	ldr	r4, [pc, #44]	; (21a4c <prvProcessExpiredTimer+0x78>)
   21a1e:	47a0      	blx	r4
   21a20:	0003      	movs	r3, r0
   21a22:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   21a24:	68bb      	ldr	r3, [r7, #8]
   21a26:	2b00      	cmp	r3, #0
   21a28:	d101      	bne.n	21a2e <prvProcessExpiredTimer+0x5a>
   21a2a:	b672      	cpsid	i
   21a2c:	e7fe      	b.n	21a2c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   21a2e:	68fb      	ldr	r3, [r7, #12]
   21a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21a32:	68fa      	ldr	r2, [r7, #12]
   21a34:	0010      	movs	r0, r2
   21a36:	4798      	blx	r3
}
   21a38:	46c0      	nop			; (mov r8, r8)
   21a3a:	46bd      	mov	sp, r7
   21a3c:	b005      	add	sp, #20
   21a3e:	bd90      	pop	{r4, r7, pc}
   21a40:	200005e4 	.word	0x200005e4
   21a44:	0001f9f7 	.word	0x0001f9f7
   21a48:	00021bb1 	.word	0x00021bb1
   21a4c:	0002192d 	.word	0x0002192d

00021a50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   21a50:	b580      	push	{r7, lr}
   21a52:	b084      	sub	sp, #16
   21a54:	af00      	add	r7, sp, #0
   21a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   21a58:	2308      	movs	r3, #8
   21a5a:	18fb      	adds	r3, r7, r3
   21a5c:	0018      	movs	r0, r3
   21a5e:	4b06      	ldr	r3, [pc, #24]	; (21a78 <prvTimerTask+0x28>)
   21a60:	4798      	blx	r3
   21a62:	0003      	movs	r3, r0
   21a64:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   21a66:	68ba      	ldr	r2, [r7, #8]
   21a68:	68fb      	ldr	r3, [r7, #12]
   21a6a:	0011      	movs	r1, r2
   21a6c:	0018      	movs	r0, r3
   21a6e:	4b03      	ldr	r3, [pc, #12]	; (21a7c <prvTimerTask+0x2c>)
   21a70:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   21a72:	4b03      	ldr	r3, [pc, #12]	; (21a80 <prvTimerTask+0x30>)
   21a74:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   21a76:	e7ef      	b.n	21a58 <prvTimerTask+0x8>
   21a78:	00021b29 	.word	0x00021b29
   21a7c:	00021a85 	.word	0x00021a85
   21a80:	00021c39 	.word	0x00021c39

00021a84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   21a84:	b580      	push	{r7, lr}
   21a86:	b084      	sub	sp, #16
   21a88:	af00      	add	r7, sp, #0
   21a8a:	6078      	str	r0, [r7, #4]
   21a8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   21a8e:	4b1e      	ldr	r3, [pc, #120]	; (21b08 <prvProcessTimerOrBlockTask+0x84>)
   21a90:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21a92:	2308      	movs	r3, #8
   21a94:	18fb      	adds	r3, r7, r3
   21a96:	0018      	movs	r0, r3
   21a98:	4b1c      	ldr	r3, [pc, #112]	; (21b0c <prvProcessTimerOrBlockTask+0x88>)
   21a9a:	4798      	blx	r3
   21a9c:	0003      	movs	r3, r0
   21a9e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   21aa0:	68bb      	ldr	r3, [r7, #8]
   21aa2:	2b00      	cmp	r3, #0
   21aa4:	d129      	bne.n	21afa <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   21aa6:	683b      	ldr	r3, [r7, #0]
   21aa8:	2b00      	cmp	r3, #0
   21aaa:	d10c      	bne.n	21ac6 <prvProcessTimerOrBlockTask+0x42>
   21aac:	687a      	ldr	r2, [r7, #4]
   21aae:	68fb      	ldr	r3, [r7, #12]
   21ab0:	429a      	cmp	r2, r3
   21ab2:	d808      	bhi.n	21ac6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   21ab4:	4b16      	ldr	r3, [pc, #88]	; (21b10 <prvProcessTimerOrBlockTask+0x8c>)
   21ab6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   21ab8:	68fa      	ldr	r2, [r7, #12]
   21aba:	687b      	ldr	r3, [r7, #4]
   21abc:	0011      	movs	r1, r2
   21abe:	0018      	movs	r0, r3
   21ac0:	4b14      	ldr	r3, [pc, #80]	; (21b14 <prvProcessTimerOrBlockTask+0x90>)
   21ac2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   21ac4:	e01b      	b.n	21afe <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   21ac6:	683b      	ldr	r3, [r7, #0]
   21ac8:	2b00      	cmp	r3, #0
   21aca:	d006      	beq.n	21ada <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   21acc:	4b12      	ldr	r3, [pc, #72]	; (21b18 <prvProcessTimerOrBlockTask+0x94>)
   21ace:	681b      	ldr	r3, [r3, #0]
   21ad0:	681b      	ldr	r3, [r3, #0]
   21ad2:	425a      	negs	r2, r3
   21ad4:	4153      	adcs	r3, r2
   21ad6:	b2db      	uxtb	r3, r3
   21ad8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   21ada:	4b10      	ldr	r3, [pc, #64]	; (21b1c <prvProcessTimerOrBlockTask+0x98>)
   21adc:	6818      	ldr	r0, [r3, #0]
   21ade:	687a      	ldr	r2, [r7, #4]
   21ae0:	68fb      	ldr	r3, [r7, #12]
   21ae2:	1ad3      	subs	r3, r2, r3
   21ae4:	683a      	ldr	r2, [r7, #0]
   21ae6:	0019      	movs	r1, r3
   21ae8:	4b0d      	ldr	r3, [pc, #52]	; (21b20 <prvProcessTimerOrBlockTask+0x9c>)
   21aea:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   21aec:	4b08      	ldr	r3, [pc, #32]	; (21b10 <prvProcessTimerOrBlockTask+0x8c>)
   21aee:	4798      	blx	r3
   21af0:	1e03      	subs	r3, r0, #0
   21af2:	d104      	bne.n	21afe <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   21af4:	4b0b      	ldr	r3, [pc, #44]	; (21b24 <prvProcessTimerOrBlockTask+0xa0>)
   21af6:	4798      	blx	r3
}
   21af8:	e001      	b.n	21afe <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   21afa:	4b05      	ldr	r3, [pc, #20]	; (21b10 <prvProcessTimerOrBlockTask+0x8c>)
   21afc:	4798      	blx	r3
}
   21afe:	46c0      	nop			; (mov r8, r8)
   21b00:	46bd      	mov	sp, r7
   21b02:	b004      	add	sp, #16
   21b04:	bd80      	pop	{r7, pc}
   21b06:	46c0      	nop			; (mov r8, r8)
   21b08:	00020b81 	.word	0x00020b81
   21b0c:	00021b69 	.word	0x00021b69
   21b10:	00020b99 	.word	0x00020b99
   21b14:	000219d5 	.word	0x000219d5
   21b18:	200005e8 	.word	0x200005e8
   21b1c:	200005ec 	.word	0x200005ec
   21b20:	0002050d 	.word	0x0002050d
   21b24:	0001f731 	.word	0x0001f731

00021b28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   21b28:	b580      	push	{r7, lr}
   21b2a:	b084      	sub	sp, #16
   21b2c:	af00      	add	r7, sp, #0
   21b2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   21b30:	4b0c      	ldr	r3, [pc, #48]	; (21b64 <prvGetNextExpireTime+0x3c>)
   21b32:	681b      	ldr	r3, [r3, #0]
   21b34:	681b      	ldr	r3, [r3, #0]
   21b36:	425a      	negs	r2, r3
   21b38:	4153      	adcs	r3, r2
   21b3a:	b2db      	uxtb	r3, r3
   21b3c:	001a      	movs	r2, r3
   21b3e:	687b      	ldr	r3, [r7, #4]
   21b40:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   21b42:	687b      	ldr	r3, [r7, #4]
   21b44:	681b      	ldr	r3, [r3, #0]
   21b46:	2b00      	cmp	r3, #0
   21b48:	d105      	bne.n	21b56 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   21b4a:	4b06      	ldr	r3, [pc, #24]	; (21b64 <prvGetNextExpireTime+0x3c>)
   21b4c:	681b      	ldr	r3, [r3, #0]
   21b4e:	68db      	ldr	r3, [r3, #12]
   21b50:	681b      	ldr	r3, [r3, #0]
   21b52:	60fb      	str	r3, [r7, #12]
   21b54:	e001      	b.n	21b5a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   21b56:	2300      	movs	r3, #0
   21b58:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   21b5a:	68fb      	ldr	r3, [r7, #12]
}
   21b5c:	0018      	movs	r0, r3
   21b5e:	46bd      	mov	sp, r7
   21b60:	b004      	add	sp, #16
   21b62:	bd80      	pop	{r7, pc}
   21b64:	200005e4 	.word	0x200005e4

00021b68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   21b68:	b580      	push	{r7, lr}
   21b6a:	b084      	sub	sp, #16
   21b6c:	af00      	add	r7, sp, #0
   21b6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   21b70:	4b0c      	ldr	r3, [pc, #48]	; (21ba4 <prvSampleTimeNow+0x3c>)
   21b72:	4798      	blx	r3
   21b74:	0003      	movs	r3, r0
   21b76:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   21b78:	4b0b      	ldr	r3, [pc, #44]	; (21ba8 <prvSampleTimeNow+0x40>)
   21b7a:	681b      	ldr	r3, [r3, #0]
   21b7c:	68fa      	ldr	r2, [r7, #12]
   21b7e:	429a      	cmp	r2, r3
   21b80:	d205      	bcs.n	21b8e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   21b82:	4b0a      	ldr	r3, [pc, #40]	; (21bac <prvSampleTimeNow+0x44>)
   21b84:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   21b86:	687b      	ldr	r3, [r7, #4]
   21b88:	2201      	movs	r2, #1
   21b8a:	601a      	str	r2, [r3, #0]
   21b8c:	e002      	b.n	21b94 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   21b8e:	687b      	ldr	r3, [r7, #4]
   21b90:	2200      	movs	r2, #0
   21b92:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   21b94:	4b04      	ldr	r3, [pc, #16]	; (21ba8 <prvSampleTimeNow+0x40>)
   21b96:	68fa      	ldr	r2, [r7, #12]
   21b98:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   21b9a:	68fb      	ldr	r3, [r7, #12]
}
   21b9c:	0018      	movs	r0, r3
   21b9e:	46bd      	mov	sp, r7
   21ba0:	b004      	add	sp, #16
   21ba2:	bd80      	pop	{r7, pc}
   21ba4:	00020ccd 	.word	0x00020ccd
   21ba8:	200005f4 	.word	0x200005f4
   21bac:	00021d7d 	.word	0x00021d7d

00021bb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   21bb0:	b580      	push	{r7, lr}
   21bb2:	b086      	sub	sp, #24
   21bb4:	af00      	add	r7, sp, #0
   21bb6:	60f8      	str	r0, [r7, #12]
   21bb8:	60b9      	str	r1, [r7, #8]
   21bba:	607a      	str	r2, [r7, #4]
   21bbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   21bbe:	2300      	movs	r3, #0
   21bc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   21bc2:	68fb      	ldr	r3, [r7, #12]
   21bc4:	68ba      	ldr	r2, [r7, #8]
   21bc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   21bc8:	68fb      	ldr	r3, [r7, #12]
   21bca:	68fa      	ldr	r2, [r7, #12]
   21bcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   21bce:	68ba      	ldr	r2, [r7, #8]
   21bd0:	687b      	ldr	r3, [r7, #4]
   21bd2:	429a      	cmp	r2, r3
   21bd4:	d812      	bhi.n	21bfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   21bd6:	687a      	ldr	r2, [r7, #4]
   21bd8:	683b      	ldr	r3, [r7, #0]
   21bda:	1ad2      	subs	r2, r2, r3
   21bdc:	68fb      	ldr	r3, [r7, #12]
   21bde:	699b      	ldr	r3, [r3, #24]
   21be0:	429a      	cmp	r2, r3
   21be2:	d302      	bcc.n	21bea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   21be4:	2301      	movs	r3, #1
   21be6:	617b      	str	r3, [r7, #20]
   21be8:	e01b      	b.n	21c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   21bea:	4b10      	ldr	r3, [pc, #64]	; (21c2c <prvInsertTimerInActiveList+0x7c>)
   21bec:	681a      	ldr	r2, [r3, #0]
   21bee:	68fb      	ldr	r3, [r7, #12]
   21bf0:	3304      	adds	r3, #4
   21bf2:	0019      	movs	r1, r3
   21bf4:	0010      	movs	r0, r2
   21bf6:	4b0e      	ldr	r3, [pc, #56]	; (21c30 <prvInsertTimerInActiveList+0x80>)
   21bf8:	4798      	blx	r3
   21bfa:	e012      	b.n	21c22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   21bfc:	687a      	ldr	r2, [r7, #4]
   21bfe:	683b      	ldr	r3, [r7, #0]
   21c00:	429a      	cmp	r2, r3
   21c02:	d206      	bcs.n	21c12 <prvInsertTimerInActiveList+0x62>
   21c04:	68ba      	ldr	r2, [r7, #8]
   21c06:	683b      	ldr	r3, [r7, #0]
   21c08:	429a      	cmp	r2, r3
   21c0a:	d302      	bcc.n	21c12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   21c0c:	2301      	movs	r3, #1
   21c0e:	617b      	str	r3, [r7, #20]
   21c10:	e007      	b.n	21c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21c12:	4b08      	ldr	r3, [pc, #32]	; (21c34 <prvInsertTimerInActiveList+0x84>)
   21c14:	681a      	ldr	r2, [r3, #0]
   21c16:	68fb      	ldr	r3, [r7, #12]
   21c18:	3304      	adds	r3, #4
   21c1a:	0019      	movs	r1, r3
   21c1c:	0010      	movs	r0, r2
   21c1e:	4b04      	ldr	r3, [pc, #16]	; (21c30 <prvInsertTimerInActiveList+0x80>)
   21c20:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   21c22:	697b      	ldr	r3, [r7, #20]
}
   21c24:	0018      	movs	r0, r3
   21c26:	46bd      	mov	sp, r7
   21c28:	b006      	add	sp, #24
   21c2a:	bd80      	pop	{r7, pc}
   21c2c:	200005e8 	.word	0x200005e8
   21c30:	0001f98b 	.word	0x0001f98b
   21c34:	200005e4 	.word	0x200005e4

00021c38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   21c38:	b590      	push	{r4, r7, lr}
   21c3a:	b08d      	sub	sp, #52	; 0x34
   21c3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   21c3e:	e07e      	b.n	21d3e <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   21c40:	2308      	movs	r3, #8
   21c42:	18fb      	adds	r3, r7, r3
   21c44:	681b      	ldr	r3, [r3, #0]
   21c46:	2b00      	cmp	r3, #0
   21c48:	da10      	bge.n	21c6c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   21c4a:	2308      	movs	r3, #8
   21c4c:	18fb      	adds	r3, r7, r3
   21c4e:	3304      	adds	r3, #4
   21c50:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   21c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21c54:	2b00      	cmp	r3, #0
   21c56:	d101      	bne.n	21c5c <prvProcessReceivedCommands+0x24>
   21c58:	b672      	cpsid	i
   21c5a:	e7fe      	b.n	21c5a <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   21c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21c5e:	681a      	ldr	r2, [r3, #0]
   21c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21c62:	6858      	ldr	r0, [r3, #4]
   21c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21c66:	689b      	ldr	r3, [r3, #8]
   21c68:	0019      	movs	r1, r3
   21c6a:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   21c6c:	2308      	movs	r3, #8
   21c6e:	18fb      	adds	r3, r7, r3
   21c70:	681b      	ldr	r3, [r3, #0]
   21c72:	2b00      	cmp	r3, #0
   21c74:	db63      	blt.n	21d3e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   21c76:	2308      	movs	r3, #8
   21c78:	18fb      	adds	r3, r7, r3
   21c7a:	689b      	ldr	r3, [r3, #8]
   21c7c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   21c7e:	6a3b      	ldr	r3, [r7, #32]
   21c80:	695b      	ldr	r3, [r3, #20]
   21c82:	2b00      	cmp	r3, #0
   21c84:	d004      	beq.n	21c90 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21c86:	6a3b      	ldr	r3, [r7, #32]
   21c88:	3304      	adds	r3, #4
   21c8a:	0018      	movs	r0, r3
   21c8c:	4b33      	ldr	r3, [pc, #204]	; (21d5c <prvProcessReceivedCommands+0x124>)
   21c8e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   21c90:	1d3b      	adds	r3, r7, #4
   21c92:	0018      	movs	r0, r3
   21c94:	4b32      	ldr	r3, [pc, #200]	; (21d60 <prvProcessReceivedCommands+0x128>)
   21c96:	4798      	blx	r3
   21c98:	0003      	movs	r3, r0
   21c9a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   21c9c:	2308      	movs	r3, #8
   21c9e:	18fb      	adds	r3, r7, r3
   21ca0:	681b      	ldr	r3, [r3, #0]
   21ca2:	2b09      	cmp	r3, #9
   21ca4:	d84a      	bhi.n	21d3c <prvProcessReceivedCommands+0x104>
   21ca6:	009a      	lsls	r2, r3, #2
   21ca8:	4b2e      	ldr	r3, [pc, #184]	; (21d64 <prvProcessReceivedCommands+0x12c>)
   21caa:	18d3      	adds	r3, r2, r3
   21cac:	681b      	ldr	r3, [r3, #0]
   21cae:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   21cb0:	2308      	movs	r3, #8
   21cb2:	18fb      	adds	r3, r7, r3
   21cb4:	685a      	ldr	r2, [r3, #4]
   21cb6:	6a3b      	ldr	r3, [r7, #32]
   21cb8:	699b      	ldr	r3, [r3, #24]
   21cba:	18d1      	adds	r1, r2, r3
   21cbc:	2308      	movs	r3, #8
   21cbe:	18fb      	adds	r3, r7, r3
   21cc0:	685b      	ldr	r3, [r3, #4]
   21cc2:	69fa      	ldr	r2, [r7, #28]
   21cc4:	6a38      	ldr	r0, [r7, #32]
   21cc6:	4c28      	ldr	r4, [pc, #160]	; (21d68 <prvProcessReceivedCommands+0x130>)
   21cc8:	47a0      	blx	r4
   21cca:	1e03      	subs	r3, r0, #0
   21ccc:	d037      	beq.n	21d3e <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   21cce:	6a3b      	ldr	r3, [r7, #32]
   21cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21cd2:	6a3a      	ldr	r2, [r7, #32]
   21cd4:	0010      	movs	r0, r2
   21cd6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   21cd8:	6a3b      	ldr	r3, [r7, #32]
   21cda:	69db      	ldr	r3, [r3, #28]
   21cdc:	2b01      	cmp	r3, #1
   21cde:	d12e      	bne.n	21d3e <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   21ce0:	2308      	movs	r3, #8
   21ce2:	18fb      	adds	r3, r7, r3
   21ce4:	685a      	ldr	r2, [r3, #4]
   21ce6:	6a3b      	ldr	r3, [r7, #32]
   21ce8:	699b      	ldr	r3, [r3, #24]
   21cea:	18d2      	adds	r2, r2, r3
   21cec:	6a38      	ldr	r0, [r7, #32]
   21cee:	2300      	movs	r3, #0
   21cf0:	9300      	str	r3, [sp, #0]
   21cf2:	2300      	movs	r3, #0
   21cf4:	2100      	movs	r1, #0
   21cf6:	4c1d      	ldr	r4, [pc, #116]	; (21d6c <prvProcessReceivedCommands+0x134>)
   21cf8:	47a0      	blx	r4
   21cfa:	0003      	movs	r3, r0
   21cfc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   21cfe:	69bb      	ldr	r3, [r7, #24]
   21d00:	2b00      	cmp	r3, #0
   21d02:	d11c      	bne.n	21d3e <prvProcessReceivedCommands+0x106>
   21d04:	b672      	cpsid	i
   21d06:	e7fe      	b.n	21d06 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   21d08:	2308      	movs	r3, #8
   21d0a:	18fb      	adds	r3, r7, r3
   21d0c:	685a      	ldr	r2, [r3, #4]
   21d0e:	6a3b      	ldr	r3, [r7, #32]
   21d10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   21d12:	6a3b      	ldr	r3, [r7, #32]
   21d14:	699b      	ldr	r3, [r3, #24]
   21d16:	2b00      	cmp	r3, #0
   21d18:	d101      	bne.n	21d1e <prvProcessReceivedCommands+0xe6>
   21d1a:	b672      	cpsid	i
   21d1c:	e7fe      	b.n	21d1c <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   21d1e:	6a3b      	ldr	r3, [r7, #32]
   21d20:	699a      	ldr	r2, [r3, #24]
   21d22:	69fb      	ldr	r3, [r7, #28]
   21d24:	18d1      	adds	r1, r2, r3
   21d26:	69fb      	ldr	r3, [r7, #28]
   21d28:	69fa      	ldr	r2, [r7, #28]
   21d2a:	6a38      	ldr	r0, [r7, #32]
   21d2c:	4c0e      	ldr	r4, [pc, #56]	; (21d68 <prvProcessReceivedCommands+0x130>)
   21d2e:	47a0      	blx	r4
					break;
   21d30:	e005      	b.n	21d3e <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   21d32:	6a3b      	ldr	r3, [r7, #32]
   21d34:	0018      	movs	r0, r3
   21d36:	4b0e      	ldr	r3, [pc, #56]	; (21d70 <prvProcessReceivedCommands+0x138>)
   21d38:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   21d3a:	e000      	b.n	21d3e <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   21d3c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   21d3e:	4b0d      	ldr	r3, [pc, #52]	; (21d74 <prvProcessReceivedCommands+0x13c>)
   21d40:	681b      	ldr	r3, [r3, #0]
   21d42:	2208      	movs	r2, #8
   21d44:	18b9      	adds	r1, r7, r2
   21d46:	2200      	movs	r2, #0
   21d48:	0018      	movs	r0, r3
   21d4a:	4b0b      	ldr	r3, [pc, #44]	; (21d78 <prvProcessReceivedCommands+0x140>)
   21d4c:	4798      	blx	r3
   21d4e:	1e03      	subs	r3, r0, #0
   21d50:	d000      	beq.n	21d54 <prvProcessReceivedCommands+0x11c>
   21d52:	e775      	b.n	21c40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   21d54:	46c0      	nop			; (mov r8, r8)
   21d56:	46bd      	mov	sp, r7
   21d58:	b00b      	add	sp, #44	; 0x2c
   21d5a:	bd90      	pop	{r4, r7, pc}
   21d5c:	0001f9f7 	.word	0x0001f9f7
   21d60:	00021b69 	.word	0x00021b69
   21d64:	0002b4c0 	.word	0x0002b4c0
   21d68:	00021bb1 	.word	0x00021bb1
   21d6c:	0002192d 	.word	0x0002192d
   21d70:	0001f8c1 	.word	0x0001f8c1
   21d74:	200005ec 	.word	0x200005ec
   21d78:	0001fec1 	.word	0x0001fec1

00021d7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   21d7c:	b590      	push	{r4, r7, lr}
   21d7e:	b089      	sub	sp, #36	; 0x24
   21d80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21d82:	e03e      	b.n	21e02 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   21d84:	4b28      	ldr	r3, [pc, #160]	; (21e28 <prvSwitchTimerLists+0xac>)
   21d86:	681b      	ldr	r3, [r3, #0]
   21d88:	68db      	ldr	r3, [r3, #12]
   21d8a:	681b      	ldr	r3, [r3, #0]
   21d8c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   21d8e:	4b26      	ldr	r3, [pc, #152]	; (21e28 <prvSwitchTimerLists+0xac>)
   21d90:	681b      	ldr	r3, [r3, #0]
   21d92:	68db      	ldr	r3, [r3, #12]
   21d94:	68db      	ldr	r3, [r3, #12]
   21d96:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   21d98:	693b      	ldr	r3, [r7, #16]
   21d9a:	3304      	adds	r3, #4
   21d9c:	0018      	movs	r0, r3
   21d9e:	4b23      	ldr	r3, [pc, #140]	; (21e2c <prvSwitchTimerLists+0xb0>)
   21da0:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   21da2:	693b      	ldr	r3, [r7, #16]
   21da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21da6:	693a      	ldr	r2, [r7, #16]
   21da8:	0010      	movs	r0, r2
   21daa:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   21dac:	693b      	ldr	r3, [r7, #16]
   21dae:	69db      	ldr	r3, [r3, #28]
   21db0:	2b01      	cmp	r3, #1
   21db2:	d126      	bne.n	21e02 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   21db4:	693b      	ldr	r3, [r7, #16]
   21db6:	699a      	ldr	r2, [r3, #24]
   21db8:	697b      	ldr	r3, [r7, #20]
   21dba:	18d3      	adds	r3, r2, r3
   21dbc:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   21dbe:	68fa      	ldr	r2, [r7, #12]
   21dc0:	697b      	ldr	r3, [r7, #20]
   21dc2:	429a      	cmp	r2, r3
   21dc4:	d90e      	bls.n	21de4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   21dc6:	693b      	ldr	r3, [r7, #16]
   21dc8:	68fa      	ldr	r2, [r7, #12]
   21dca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   21dcc:	693b      	ldr	r3, [r7, #16]
   21dce:	693a      	ldr	r2, [r7, #16]
   21dd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   21dd2:	4b15      	ldr	r3, [pc, #84]	; (21e28 <prvSwitchTimerLists+0xac>)
   21dd4:	681a      	ldr	r2, [r3, #0]
   21dd6:	693b      	ldr	r3, [r7, #16]
   21dd8:	3304      	adds	r3, #4
   21dda:	0019      	movs	r1, r3
   21ddc:	0010      	movs	r0, r2
   21dde:	4b14      	ldr	r3, [pc, #80]	; (21e30 <prvSwitchTimerLists+0xb4>)
   21de0:	4798      	blx	r3
   21de2:	e00e      	b.n	21e02 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   21de4:	697a      	ldr	r2, [r7, #20]
   21de6:	6938      	ldr	r0, [r7, #16]
   21de8:	2300      	movs	r3, #0
   21dea:	9300      	str	r3, [sp, #0]
   21dec:	2300      	movs	r3, #0
   21dee:	2100      	movs	r1, #0
   21df0:	4c10      	ldr	r4, [pc, #64]	; (21e34 <prvSwitchTimerLists+0xb8>)
   21df2:	47a0      	blx	r4
   21df4:	0003      	movs	r3, r0
   21df6:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   21df8:	68bb      	ldr	r3, [r7, #8]
   21dfa:	2b00      	cmp	r3, #0
   21dfc:	d101      	bne.n	21e02 <prvSwitchTimerLists+0x86>
   21dfe:	b672      	cpsid	i
   21e00:	e7fe      	b.n	21e00 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   21e02:	4b09      	ldr	r3, [pc, #36]	; (21e28 <prvSwitchTimerLists+0xac>)
   21e04:	681b      	ldr	r3, [r3, #0]
   21e06:	681b      	ldr	r3, [r3, #0]
   21e08:	2b00      	cmp	r3, #0
   21e0a:	d1bb      	bne.n	21d84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   21e0c:	4b06      	ldr	r3, [pc, #24]	; (21e28 <prvSwitchTimerLists+0xac>)
   21e0e:	681b      	ldr	r3, [r3, #0]
   21e10:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   21e12:	4b09      	ldr	r3, [pc, #36]	; (21e38 <prvSwitchTimerLists+0xbc>)
   21e14:	681a      	ldr	r2, [r3, #0]
   21e16:	4b04      	ldr	r3, [pc, #16]	; (21e28 <prvSwitchTimerLists+0xac>)
   21e18:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   21e1a:	4b07      	ldr	r3, [pc, #28]	; (21e38 <prvSwitchTimerLists+0xbc>)
   21e1c:	687a      	ldr	r2, [r7, #4]
   21e1e:	601a      	str	r2, [r3, #0]
}
   21e20:	46c0      	nop			; (mov r8, r8)
   21e22:	46bd      	mov	sp, r7
   21e24:	b007      	add	sp, #28
   21e26:	bd90      	pop	{r4, r7, pc}
   21e28:	200005e4 	.word	0x200005e4
   21e2c:	0001f9f7 	.word	0x0001f9f7
   21e30:	0001f98b 	.word	0x0001f98b
   21e34:	0002192d 	.word	0x0002192d
   21e38:	200005e8 	.word	0x200005e8

00021e3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   21e3c:	b580      	push	{r7, lr}
   21e3e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   21e40:	4b10      	ldr	r3, [pc, #64]	; (21e84 <prvCheckForValidListAndQueue+0x48>)
   21e42:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   21e44:	4b10      	ldr	r3, [pc, #64]	; (21e88 <prvCheckForValidListAndQueue+0x4c>)
   21e46:	681b      	ldr	r3, [r3, #0]
   21e48:	2b00      	cmp	r3, #0
   21e4a:	d115      	bne.n	21e78 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   21e4c:	4b0f      	ldr	r3, [pc, #60]	; (21e8c <prvCheckForValidListAndQueue+0x50>)
   21e4e:	0018      	movs	r0, r3
   21e50:	4b0f      	ldr	r3, [pc, #60]	; (21e90 <prvCheckForValidListAndQueue+0x54>)
   21e52:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   21e54:	4b0f      	ldr	r3, [pc, #60]	; (21e94 <prvCheckForValidListAndQueue+0x58>)
   21e56:	0018      	movs	r0, r3
   21e58:	4b0d      	ldr	r3, [pc, #52]	; (21e90 <prvCheckForValidListAndQueue+0x54>)
   21e5a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   21e5c:	4b0e      	ldr	r3, [pc, #56]	; (21e98 <prvCheckForValidListAndQueue+0x5c>)
   21e5e:	4a0b      	ldr	r2, [pc, #44]	; (21e8c <prvCheckForValidListAndQueue+0x50>)
   21e60:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   21e62:	4b0e      	ldr	r3, [pc, #56]	; (21e9c <prvCheckForValidListAndQueue+0x60>)
   21e64:	4a0b      	ldr	r2, [pc, #44]	; (21e94 <prvCheckForValidListAndQueue+0x58>)
   21e66:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   21e68:	2200      	movs	r2, #0
   21e6a:	2110      	movs	r1, #16
   21e6c:	2005      	movs	r0, #5
   21e6e:	4b0c      	ldr	r3, [pc, #48]	; (21ea0 <prvCheckForValidListAndQueue+0x64>)
   21e70:	4798      	blx	r3
   21e72:	0002      	movs	r2, r0
   21e74:	4b04      	ldr	r3, [pc, #16]	; (21e88 <prvCheckForValidListAndQueue+0x4c>)
   21e76:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   21e78:	4b0a      	ldr	r3, [pc, #40]	; (21ea4 <prvCheckForValidListAndQueue+0x68>)
   21e7a:	4798      	blx	r3
}
   21e7c:	46c0      	nop			; (mov r8, r8)
   21e7e:	46bd      	mov	sp, r7
   21e80:	bd80      	pop	{r7, pc}
   21e82:	46c0      	nop			; (mov r8, r8)
   21e84:	0001f751 	.word	0x0001f751
   21e88:	200005ec 	.word	0x200005ec
   21e8c:	200005bc 	.word	0x200005bc
   21e90:	0001f8f5 	.word	0x0001f8f5
   21e94:	200005d0 	.word	0x200005d0
   21e98:	200005e4 	.word	0x200005e4
   21e9c:	200005e8 	.word	0x200005e8
   21ea0:	0001fb05 	.word	0x0001fb05
   21ea4:	0001f775 	.word	0x0001f775

00021ea8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   21ea8:	b580      	push	{r7, lr}
   21eaa:	b084      	sub	sp, #16
   21eac:	af00      	add	r7, sp, #0
   21eae:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   21eb0:	687b      	ldr	r3, [r7, #4]
   21eb2:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   21eb4:	687b      	ldr	r3, [r7, #4]
   21eb6:	2b00      	cmp	r3, #0
   21eb8:	d101      	bne.n	21ebe <xTimerIsTimerActive+0x16>
   21eba:	b672      	cpsid	i
   21ebc:	e7fe      	b.n	21ebc <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   21ebe:	4b07      	ldr	r3, [pc, #28]	; (21edc <xTimerIsTimerActive+0x34>)
   21ec0:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   21ec2:	68fb      	ldr	r3, [r7, #12]
   21ec4:	695b      	ldr	r3, [r3, #20]
   21ec6:	1e5a      	subs	r2, r3, #1
   21ec8:	4193      	sbcs	r3, r2
   21eca:	b2db      	uxtb	r3, r3
   21ecc:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   21ece:	4b04      	ldr	r3, [pc, #16]	; (21ee0 <xTimerIsTimerActive+0x38>)
   21ed0:	4798      	blx	r3

	return xTimerIsInActiveList;
   21ed2:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   21ed4:	0018      	movs	r0, r3
   21ed6:	46bd      	mov	sp, r7
   21ed8:	b004      	add	sp, #16
   21eda:	bd80      	pop	{r7, pc}
   21edc:	0001f751 	.word	0x0001f751
   21ee0:	0001f775 	.word	0x0001f775

00021ee4 <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   21ee4:	b580      	push	{r7, lr}
   21ee6:	b082      	sub	sp, #8
   21ee8:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   21eea:	4b04      	ldr	r3, [pc, #16]	; (21efc <wdt_clear_early_warning+0x18>)
   21eec:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   21eee:	687b      	ldr	r3, [r7, #4]
   21ef0:	2201      	movs	r2, #1
   21ef2:	719a      	strb	r2, [r3, #6]
}
   21ef4:	46c0      	nop			; (mov r8, r8)
   21ef6:	46bd      	mov	sp, r7
   21ef8:	b002      	add	sp, #8
   21efa:	bd80      	pop	{r7, pc}
   21efc:	40001000 	.word	0x40001000

00021f00 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   21f00:	b580      	push	{r7, lr}
   21f02:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   21f04:	4b05      	ldr	r3, [pc, #20]	; (21f1c <WDT_Handler+0x1c>)
   21f06:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   21f08:	4b05      	ldr	r3, [pc, #20]	; (21f20 <WDT_Handler+0x20>)
   21f0a:	681b      	ldr	r3, [r3, #0]
   21f0c:	2b00      	cmp	r3, #0
   21f0e:	d002      	beq.n	21f16 <WDT_Handler+0x16>
		wdt_early_warning_callback();
   21f10:	4b03      	ldr	r3, [pc, #12]	; (21f20 <WDT_Handler+0x20>)
   21f12:	681b      	ldr	r3, [r3, #0]
   21f14:	4798      	blx	r3
	}
}
   21f16:	46c0      	nop			; (mov r8, r8)
   21f18:	46bd      	mov	sp, r7
   21f1a:	bd80      	pop	{r7, pc}
   21f1c:	00021ee5 	.word	0x00021ee5
   21f20:	20000b54 	.word	0x20000b54

00021f24 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   21f24:	b580      	push	{r7, lr}
   21f26:	af00      	add	r7, sp, #0
   21f28:	2000      	movs	r0, #0
   21f2a:	4b02      	ldr	r3, [pc, #8]	; (21f34 <TCC0_Handler+0x10>)
   21f2c:	4798      	blx	r3
   21f2e:	46c0      	nop			; (mov r8, r8)
   21f30:	46bd      	mov	sp, r7
   21f32:	bd80      	pop	{r7, pc}
   21f34:	00021f61 	.word	0x00021f61

00021f38 <TCC1_Handler>:
   21f38:	b580      	push	{r7, lr}
   21f3a:	af00      	add	r7, sp, #0
   21f3c:	2001      	movs	r0, #1
   21f3e:	4b02      	ldr	r3, [pc, #8]	; (21f48 <TCC1_Handler+0x10>)
   21f40:	4798      	blx	r3
   21f42:	46c0      	nop			; (mov r8, r8)
   21f44:	46bd      	mov	sp, r7
   21f46:	bd80      	pop	{r7, pc}
   21f48:	00021f61 	.word	0x00021f61

00021f4c <TCC2_Handler>:
   21f4c:	b580      	push	{r7, lr}
   21f4e:	af00      	add	r7, sp, #0
   21f50:	2002      	movs	r0, #2
   21f52:	4b02      	ldr	r3, [pc, #8]	; (21f5c <TCC2_Handler+0x10>)
   21f54:	4798      	blx	r3
   21f56:	46c0      	nop			; (mov r8, r8)
   21f58:	46bd      	mov	sp, r7
   21f5a:	bd80      	pop	{r7, pc}
   21f5c:	00021f61 	.word	0x00021f61

00021f60 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   21f60:	b580      	push	{r7, lr}
   21f62:	b086      	sub	sp, #24
   21f64:	af00      	add	r7, sp, #0
   21f66:	0002      	movs	r2, r0
   21f68:	1dfb      	adds	r3, r7, #7
   21f6a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   21f6c:	1dfb      	adds	r3, r7, #7
   21f6e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   21f70:	4b18      	ldr	r3, [pc, #96]	; (21fd4 <_tcc_interrupt_handler+0x74>)
   21f72:	0092      	lsls	r2, r2, #2
   21f74:	58d3      	ldr	r3, [r2, r3]
   21f76:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21f78:	693b      	ldr	r3, [r7, #16]
   21f7a:	681b      	ldr	r3, [r3, #0]
   21f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   21f7e:	693b      	ldr	r3, [r7, #16]
   21f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21f82:	401a      	ands	r2, r3
			module->enable_callback_mask);
   21f84:	693b      	ldr	r3, [r7, #16]
   21f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   21f88:	4013      	ands	r3, r2
   21f8a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   21f8c:	2300      	movs	r3, #0
   21f8e:	617b      	str	r3, [r7, #20]
   21f90:	e019      	b.n	21fc6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   21f92:	4b11      	ldr	r3, [pc, #68]	; (21fd8 <_tcc_interrupt_handler+0x78>)
   21f94:	697a      	ldr	r2, [r7, #20]
   21f96:	0092      	lsls	r2, r2, #2
   21f98:	58d3      	ldr	r3, [r2, r3]
   21f9a:	68fa      	ldr	r2, [r7, #12]
   21f9c:	4013      	ands	r3, r2
   21f9e:	d00f      	beq.n	21fc0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   21fa0:	693a      	ldr	r2, [r7, #16]
   21fa2:	697b      	ldr	r3, [r7, #20]
   21fa4:	009b      	lsls	r3, r3, #2
   21fa6:	18d3      	adds	r3, r2, r3
   21fa8:	3304      	adds	r3, #4
   21faa:	681b      	ldr	r3, [r3, #0]
   21fac:	693a      	ldr	r2, [r7, #16]
   21fae:	0010      	movs	r0, r2
   21fb0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   21fb2:	693b      	ldr	r3, [r7, #16]
   21fb4:	681b      	ldr	r3, [r3, #0]
   21fb6:	4a08      	ldr	r2, [pc, #32]	; (21fd8 <_tcc_interrupt_handler+0x78>)
   21fb8:	6979      	ldr	r1, [r7, #20]
   21fba:	0089      	lsls	r1, r1, #2
   21fbc:	588a      	ldr	r2, [r1, r2]
   21fbe:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   21fc0:	697b      	ldr	r3, [r7, #20]
   21fc2:	3301      	adds	r3, #1
   21fc4:	617b      	str	r3, [r7, #20]
   21fc6:	697b      	ldr	r3, [r7, #20]
   21fc8:	2b0b      	cmp	r3, #11
   21fca:	dde2      	ble.n	21f92 <_tcc_interrupt_handler+0x32>
		}
	}
}
   21fcc:	46c0      	nop			; (mov r8, r8)
   21fce:	46bd      	mov	sp, r7
   21fd0:	b006      	add	sp, #24
   21fd2:	bd80      	pop	{r7, pc}
   21fd4:	20000b58 	.word	0x20000b58
   21fd8:	0002b4e8 	.word	0x0002b4e8

00021fdc <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   21fdc:	b580      	push	{r7, lr}
   21fde:	af00      	add	r7, sp, #0
   21fe0:	2000      	movs	r0, #0
   21fe2:	4b02      	ldr	r3, [pc, #8]	; (21fec <TC3_Handler+0x10>)
   21fe4:	4798      	blx	r3
   21fe6:	46c0      	nop			; (mov r8, r8)
   21fe8:	46bd      	mov	sp, r7
   21fea:	bd80      	pop	{r7, pc}
   21fec:	00022041 	.word	0x00022041

00021ff0 <TC4_Handler>:
   21ff0:	b580      	push	{r7, lr}
   21ff2:	af00      	add	r7, sp, #0
   21ff4:	2001      	movs	r0, #1
   21ff6:	4b02      	ldr	r3, [pc, #8]	; (22000 <TC4_Handler+0x10>)
   21ff8:	4798      	blx	r3
   21ffa:	46c0      	nop			; (mov r8, r8)
   21ffc:	46bd      	mov	sp, r7
   21ffe:	bd80      	pop	{r7, pc}
   22000:	00022041 	.word	0x00022041

00022004 <TC5_Handler>:
   22004:	b580      	push	{r7, lr}
   22006:	af00      	add	r7, sp, #0
   22008:	2002      	movs	r0, #2
   2200a:	4b02      	ldr	r3, [pc, #8]	; (22014 <TC5_Handler+0x10>)
   2200c:	4798      	blx	r3
   2200e:	46c0      	nop			; (mov r8, r8)
   22010:	46bd      	mov	sp, r7
   22012:	bd80      	pop	{r7, pc}
   22014:	00022041 	.word	0x00022041

00022018 <TC6_Handler>:
   22018:	b580      	push	{r7, lr}
   2201a:	af00      	add	r7, sp, #0
   2201c:	2003      	movs	r0, #3
   2201e:	4b02      	ldr	r3, [pc, #8]	; (22028 <TC6_Handler+0x10>)
   22020:	4798      	blx	r3
   22022:	46c0      	nop			; (mov r8, r8)
   22024:	46bd      	mov	sp, r7
   22026:	bd80      	pop	{r7, pc}
   22028:	00022041 	.word	0x00022041

0002202c <TC7_Handler>:
   2202c:	b580      	push	{r7, lr}
   2202e:	af00      	add	r7, sp, #0
   22030:	2004      	movs	r0, #4
   22032:	4b02      	ldr	r3, [pc, #8]	; (2203c <TC7_Handler+0x10>)
   22034:	4798      	blx	r3
   22036:	46c0      	nop			; (mov r8, r8)
   22038:	46bd      	mov	sp, r7
   2203a:	bd80      	pop	{r7, pc}
   2203c:	00022041 	.word	0x00022041

00022040 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   22040:	b580      	push	{r7, lr}
   22042:	b084      	sub	sp, #16
   22044:	af00      	add	r7, sp, #0
   22046:	0002      	movs	r2, r0
   22048:	1dfb      	adds	r3, r7, #7
   2204a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   2204c:	1dfb      	adds	r3, r7, #7
   2204e:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   22050:	4b28      	ldr	r3, [pc, #160]	; (220f4 <_tc_interrupt_handler+0xb4>)
   22052:	0092      	lsls	r2, r2, #2
   22054:	58d3      	ldr	r3, [r2, r3]
   22056:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   22058:	68fb      	ldr	r3, [r7, #12]
   2205a:	681b      	ldr	r3, [r3, #0]
   2205c:	7b9b      	ldrb	r3, [r3, #14]
   2205e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   22060:	68fa      	ldr	r2, [r7, #12]
   22062:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   22064:	4013      	ands	r3, r2
   22066:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   22068:	68fb      	ldr	r3, [r7, #12]
   2206a:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   2206c:	230b      	movs	r3, #11
   2206e:	18fb      	adds	r3, r7, r3
   22070:	400a      	ands	r2, r1
   22072:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   22074:	230b      	movs	r3, #11
   22076:	18fb      	adds	r3, r7, r3
   22078:	781b      	ldrb	r3, [r3, #0]
   2207a:	2201      	movs	r2, #1
   2207c:	4013      	ands	r3, r2
   2207e:	d008      	beq.n	22092 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   22080:	68fb      	ldr	r3, [r7, #12]
   22082:	689b      	ldr	r3, [r3, #8]
   22084:	68fa      	ldr	r2, [r7, #12]
   22086:	0010      	movs	r0, r2
   22088:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   2208a:	68fb      	ldr	r3, [r7, #12]
   2208c:	681b      	ldr	r3, [r3, #0]
   2208e:	2201      	movs	r2, #1
   22090:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   22092:	230b      	movs	r3, #11
   22094:	18fb      	adds	r3, r7, r3
   22096:	781b      	ldrb	r3, [r3, #0]
   22098:	2202      	movs	r2, #2
   2209a:	4013      	ands	r3, r2
   2209c:	d008      	beq.n	220b0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   2209e:	68fb      	ldr	r3, [r7, #12]
   220a0:	68db      	ldr	r3, [r3, #12]
   220a2:	68fa      	ldr	r2, [r7, #12]
   220a4:	0010      	movs	r0, r2
   220a6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   220a8:	68fb      	ldr	r3, [r7, #12]
   220aa:	681b      	ldr	r3, [r3, #0]
   220ac:	2202      	movs	r2, #2
   220ae:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   220b0:	230b      	movs	r3, #11
   220b2:	18fb      	adds	r3, r7, r3
   220b4:	781b      	ldrb	r3, [r3, #0]
   220b6:	2210      	movs	r2, #16
   220b8:	4013      	ands	r3, r2
   220ba:	d008      	beq.n	220ce <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   220bc:	68fb      	ldr	r3, [r7, #12]
   220be:	691b      	ldr	r3, [r3, #16]
   220c0:	68fa      	ldr	r2, [r7, #12]
   220c2:	0010      	movs	r0, r2
   220c4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   220c6:	68fb      	ldr	r3, [r7, #12]
   220c8:	681b      	ldr	r3, [r3, #0]
   220ca:	2210      	movs	r2, #16
   220cc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   220ce:	230b      	movs	r3, #11
   220d0:	18fb      	adds	r3, r7, r3
   220d2:	781b      	ldrb	r3, [r3, #0]
   220d4:	2220      	movs	r2, #32
   220d6:	4013      	ands	r3, r2
   220d8:	d008      	beq.n	220ec <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   220da:	68fb      	ldr	r3, [r7, #12]
   220dc:	695b      	ldr	r3, [r3, #20]
   220de:	68fa      	ldr	r2, [r7, #12]
   220e0:	0010      	movs	r0, r2
   220e2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   220e4:	68fb      	ldr	r3, [r7, #12]
   220e6:	681b      	ldr	r3, [r3, #0]
   220e8:	2220      	movs	r2, #32
   220ea:	739a      	strb	r2, [r3, #14]
	}
}
   220ec:	46c0      	nop			; (mov r8, r8)
   220ee:	46bd      	mov	sp, r7
   220f0:	b004      	add	sp, #16
   220f2:	bd80      	pop	{r7, pc}
   220f4:	20000b64 	.word	0x20000b64

000220f8 <system_gclk_chan_get_config_defaults>:
{
   220f8:	b580      	push	{r7, lr}
   220fa:	b082      	sub	sp, #8
   220fc:	af00      	add	r7, sp, #0
   220fe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   22100:	687b      	ldr	r3, [r7, #4]
   22102:	2200      	movs	r2, #0
   22104:	701a      	strb	r2, [r3, #0]
}
   22106:	46c0      	nop			; (mov r8, r8)
   22108:	46bd      	mov	sp, r7
   2210a:	b002      	add	sp, #8
   2210c:	bd80      	pop	{r7, pc}
	...

00022110 <system_apb_clock_set_mask>:
{
   22110:	b580      	push	{r7, lr}
   22112:	b082      	sub	sp, #8
   22114:	af00      	add	r7, sp, #0
   22116:	0002      	movs	r2, r0
   22118:	6039      	str	r1, [r7, #0]
   2211a:	1dfb      	adds	r3, r7, #7
   2211c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2211e:	1dfb      	adds	r3, r7, #7
   22120:	781b      	ldrb	r3, [r3, #0]
   22122:	2b01      	cmp	r3, #1
   22124:	d00a      	beq.n	2213c <system_apb_clock_set_mask+0x2c>
   22126:	2b02      	cmp	r3, #2
   22128:	d00f      	beq.n	2214a <system_apb_clock_set_mask+0x3a>
   2212a:	2b00      	cmp	r3, #0
   2212c:	d114      	bne.n	22158 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2212e:	4b0e      	ldr	r3, [pc, #56]	; (22168 <system_apb_clock_set_mask+0x58>)
   22130:	4a0d      	ldr	r2, [pc, #52]	; (22168 <system_apb_clock_set_mask+0x58>)
   22132:	6991      	ldr	r1, [r2, #24]
   22134:	683a      	ldr	r2, [r7, #0]
   22136:	430a      	orrs	r2, r1
   22138:	619a      	str	r2, [r3, #24]
			break;
   2213a:	e00f      	b.n	2215c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2213c:	4b0a      	ldr	r3, [pc, #40]	; (22168 <system_apb_clock_set_mask+0x58>)
   2213e:	4a0a      	ldr	r2, [pc, #40]	; (22168 <system_apb_clock_set_mask+0x58>)
   22140:	69d1      	ldr	r1, [r2, #28]
   22142:	683a      	ldr	r2, [r7, #0]
   22144:	430a      	orrs	r2, r1
   22146:	61da      	str	r2, [r3, #28]
			break;
   22148:	e008      	b.n	2215c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2214a:	4b07      	ldr	r3, [pc, #28]	; (22168 <system_apb_clock_set_mask+0x58>)
   2214c:	4a06      	ldr	r2, [pc, #24]	; (22168 <system_apb_clock_set_mask+0x58>)
   2214e:	6a11      	ldr	r1, [r2, #32]
   22150:	683a      	ldr	r2, [r7, #0]
   22152:	430a      	orrs	r2, r1
   22154:	621a      	str	r2, [r3, #32]
			break;
   22156:	e001      	b.n	2215c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   22158:	2317      	movs	r3, #23
   2215a:	e000      	b.n	2215e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2215c:	2300      	movs	r3, #0
}
   2215e:	0018      	movs	r0, r3
   22160:	46bd      	mov	sp, r7
   22162:	b002      	add	sp, #8
   22164:	bd80      	pop	{r7, pc}
   22166:	46c0      	nop			; (mov r8, r8)
   22168:	40000400 	.word	0x40000400

0002216c <system_pinmux_get_config_defaults>:
{
   2216c:	b580      	push	{r7, lr}
   2216e:	b082      	sub	sp, #8
   22170:	af00      	add	r7, sp, #0
   22172:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   22174:	687b      	ldr	r3, [r7, #4]
   22176:	2280      	movs	r2, #128	; 0x80
   22178:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2217a:	687b      	ldr	r3, [r7, #4]
   2217c:	2200      	movs	r2, #0
   2217e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   22180:	687b      	ldr	r3, [r7, #4]
   22182:	2201      	movs	r2, #1
   22184:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   22186:	687b      	ldr	r3, [r7, #4]
   22188:	2200      	movs	r2, #0
   2218a:	70da      	strb	r2, [r3, #3]
}
   2218c:	46c0      	nop			; (mov r8, r8)
   2218e:	46bd      	mov	sp, r7
   22190:	b002      	add	sp, #8
   22192:	bd80      	pop	{r7, pc}

00022194 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   22194:	b580      	push	{r7, lr}
   22196:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   22198:	4b05      	ldr	r3, [pc, #20]	; (221b0 <system_is_debugger_present+0x1c>)
   2219a:	789b      	ldrb	r3, [r3, #2]
   2219c:	b2db      	uxtb	r3, r3
   2219e:	001a      	movs	r2, r3
   221a0:	2302      	movs	r3, #2
   221a2:	4013      	ands	r3, r2
   221a4:	1e5a      	subs	r2, r3, #1
   221a6:	4193      	sbcs	r3, r2
   221a8:	b2db      	uxtb	r3, r3
}
   221aa:	0018      	movs	r0, r3
   221ac:	46bd      	mov	sp, r7
   221ae:	bd80      	pop	{r7, pc}
   221b0:	41002000 	.word	0x41002000

000221b4 <usart_is_syncing>:
{
   221b4:	b580      	push	{r7, lr}
   221b6:	b084      	sub	sp, #16
   221b8:	af00      	add	r7, sp, #0
   221ba:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   221bc:	687b      	ldr	r3, [r7, #4]
   221be:	681b      	ldr	r3, [r3, #0]
   221c0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   221c2:	68fb      	ldr	r3, [r7, #12]
   221c4:	69db      	ldr	r3, [r3, #28]
   221c6:	1e5a      	subs	r2, r3, #1
   221c8:	4193      	sbcs	r3, r2
   221ca:	b2db      	uxtb	r3, r3
}
   221cc:	0018      	movs	r0, r3
   221ce:	46bd      	mov	sp, r7
   221d0:	b004      	add	sp, #16
   221d2:	bd80      	pop	{r7, pc}

000221d4 <_usart_wait_for_sync>:
{
   221d4:	b580      	push	{r7, lr}
   221d6:	b082      	sub	sp, #8
   221d8:	af00      	add	r7, sp, #0
   221da:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   221dc:	46c0      	nop			; (mov r8, r8)
   221de:	687b      	ldr	r3, [r7, #4]
   221e0:	0018      	movs	r0, r3
   221e2:	4b04      	ldr	r3, [pc, #16]	; (221f4 <_usart_wait_for_sync+0x20>)
   221e4:	4798      	blx	r3
   221e6:	1e03      	subs	r3, r0, #0
   221e8:	d1f9      	bne.n	221de <_usart_wait_for_sync+0xa>
}
   221ea:	46c0      	nop			; (mov r8, r8)
   221ec:	46bd      	mov	sp, r7
   221ee:	b002      	add	sp, #8
   221f0:	bd80      	pop	{r7, pc}
   221f2:	46c0      	nop			; (mov r8, r8)
   221f4:	000221b5 	.word	0x000221b5

000221f8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   221f8:	b5b0      	push	{r4, r5, r7, lr}
   221fa:	b08c      	sub	sp, #48	; 0x30
   221fc:	af02      	add	r7, sp, #8
   221fe:	6078      	str	r0, [r7, #4]
   22200:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   22202:	687b      	ldr	r3, [r7, #4]
   22204:	681b      	ldr	r3, [r3, #0]
   22206:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   22208:	687b      	ldr	r3, [r7, #4]
   2220a:	681b      	ldr	r3, [r3, #0]
   2220c:	0018      	movs	r0, r3
   2220e:	4bab      	ldr	r3, [pc, #684]	; (224bc <_usart_set_config+0x2c4>)
   22210:	4798      	blx	r3
   22212:	0003      	movs	r3, r0
   22214:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   22216:	697b      	ldr	r3, [r7, #20]
   22218:	3314      	adds	r3, #20
   2221a:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2221c:	2300      	movs	r3, #0
   2221e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   22220:	2300      	movs	r3, #0
   22222:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   22224:	230a      	movs	r3, #10
   22226:	18fb      	adds	r3, r7, r3
   22228:	2200      	movs	r2, #0
   2222a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2222c:	231f      	movs	r3, #31
   2222e:	18fb      	adds	r3, r7, r3
   22230:	2200      	movs	r2, #0
   22232:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   22234:	231e      	movs	r3, #30
   22236:	18fb      	adds	r3, r7, r3
   22238:	2210      	movs	r2, #16
   2223a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2223c:	683b      	ldr	r3, [r7, #0]
   2223e:	8a1b      	ldrh	r3, [r3, #16]
   22240:	2280      	movs	r2, #128	; 0x80
   22242:	01d2      	lsls	r2, r2, #7
   22244:	4293      	cmp	r3, r2
   22246:	d01c      	beq.n	22282 <_usart_set_config+0x8a>
   22248:	2280      	movs	r2, #128	; 0x80
   2224a:	01d2      	lsls	r2, r2, #7
   2224c:	4293      	cmp	r3, r2
   2224e:	dc06      	bgt.n	2225e <_usart_set_config+0x66>
   22250:	2b00      	cmp	r3, #0
   22252:	d00d      	beq.n	22270 <_usart_set_config+0x78>
   22254:	2280      	movs	r2, #128	; 0x80
   22256:	0192      	lsls	r2, r2, #6
   22258:	4293      	cmp	r3, r2
   2225a:	d024      	beq.n	222a6 <_usart_set_config+0xae>
   2225c:	e035      	b.n	222ca <_usart_set_config+0xd2>
   2225e:	22c0      	movs	r2, #192	; 0xc0
   22260:	01d2      	lsls	r2, r2, #7
   22262:	4293      	cmp	r3, r2
   22264:	d028      	beq.n	222b8 <_usart_set_config+0xc0>
   22266:	2280      	movs	r2, #128	; 0x80
   22268:	0212      	lsls	r2, r2, #8
   2226a:	4293      	cmp	r3, r2
   2226c:	d012      	beq.n	22294 <_usart_set_config+0x9c>
   2226e:	e02c      	b.n	222ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   22270:	231f      	movs	r3, #31
   22272:	18fb      	adds	r3, r7, r3
   22274:	2200      	movs	r2, #0
   22276:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   22278:	231e      	movs	r3, #30
   2227a:	18fb      	adds	r3, r7, r3
   2227c:	2210      	movs	r2, #16
   2227e:	701a      	strb	r2, [r3, #0]
			break;
   22280:	e023      	b.n	222ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   22282:	231f      	movs	r3, #31
   22284:	18fb      	adds	r3, r7, r3
   22286:	2200      	movs	r2, #0
   22288:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2228a:	231e      	movs	r3, #30
   2228c:	18fb      	adds	r3, r7, r3
   2228e:	2208      	movs	r2, #8
   22290:	701a      	strb	r2, [r3, #0]
			break;
   22292:	e01a      	b.n	222ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   22294:	231f      	movs	r3, #31
   22296:	18fb      	adds	r3, r7, r3
   22298:	2200      	movs	r2, #0
   2229a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2229c:	231e      	movs	r3, #30
   2229e:	18fb      	adds	r3, r7, r3
   222a0:	2203      	movs	r2, #3
   222a2:	701a      	strb	r2, [r3, #0]
			break;
   222a4:	e011      	b.n	222ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   222a6:	231f      	movs	r3, #31
   222a8:	18fb      	adds	r3, r7, r3
   222aa:	2201      	movs	r2, #1
   222ac:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   222ae:	231e      	movs	r3, #30
   222b0:	18fb      	adds	r3, r7, r3
   222b2:	2210      	movs	r2, #16
   222b4:	701a      	strb	r2, [r3, #0]
			break;
   222b6:	e008      	b.n	222ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   222b8:	231f      	movs	r3, #31
   222ba:	18fb      	adds	r3, r7, r3
   222bc:	2201      	movs	r2, #1
   222be:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   222c0:	231e      	movs	r3, #30
   222c2:	18fb      	adds	r3, r7, r3
   222c4:	2208      	movs	r2, #8
   222c6:	701a      	strb	r2, [r3, #0]
			break;
   222c8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   222ca:	683b      	ldr	r3, [r7, #0]
   222cc:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   222ce:	683b      	ldr	r3, [r7, #0]
   222d0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   222d2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   222d4:	683b      	ldr	r3, [r7, #0]
   222d6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   222d8:	4313      	orrs	r3, r2
		config->sample_rate |
   222da:	683a      	ldr	r2, [r7, #0]
   222dc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   222de:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   222e0:	683a      	ldr	r2, [r7, #0]
   222e2:	7e12      	ldrb	r2, [r2, #24]
   222e4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   222e6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   222e8:	683a      	ldr	r2, [r7, #0]
   222ea:	2126      	movs	r1, #38	; 0x26
   222ec:	5c52      	ldrb	r2, [r2, r1]
   222ee:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   222f0:	4313      	orrs	r3, r2
   222f2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   222f4:	231d      	movs	r3, #29
   222f6:	18fb      	adds	r3, r7, r3
   222f8:	2200      	movs	r2, #0
   222fa:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   222fc:	683b      	ldr	r3, [r7, #0]
   222fe:	685b      	ldr	r3, [r3, #4]
   22300:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   22302:	68fb      	ldr	r3, [r7, #12]
   22304:	2b00      	cmp	r3, #0
   22306:	d01e      	beq.n	22346 <_usart_set_config+0x14e>
   22308:	2280      	movs	r2, #128	; 0x80
   2230a:	0552      	lsls	r2, r2, #21
   2230c:	4293      	cmp	r3, r2
   2230e:	d14f      	bne.n	223b0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   22310:	683b      	ldr	r3, [r7, #0]
   22312:	2227      	movs	r2, #39	; 0x27
   22314:	5c9b      	ldrb	r3, [r3, r2]
   22316:	2201      	movs	r2, #1
   22318:	4053      	eors	r3, r2
   2231a:	b2db      	uxtb	r3, r3
   2231c:	2b00      	cmp	r3, #0
   2231e:	d046      	beq.n	223ae <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   22320:	683b      	ldr	r3, [r7, #0]
   22322:	6a1d      	ldr	r5, [r3, #32]
   22324:	693b      	ldr	r3, [r7, #16]
   22326:	b2db      	uxtb	r3, r3
   22328:	0018      	movs	r0, r3
   2232a:	4b65      	ldr	r3, [pc, #404]	; (224c0 <_usart_set_config+0x2c8>)
   2232c:	4798      	blx	r3
   2232e:	0001      	movs	r1, r0
   22330:	231d      	movs	r3, #29
   22332:	18fc      	adds	r4, r7, r3
   22334:	230a      	movs	r3, #10
   22336:	18fb      	adds	r3, r7, r3
   22338:	001a      	movs	r2, r3
   2233a:	0028      	movs	r0, r5
   2233c:	4b61      	ldr	r3, [pc, #388]	; (224c4 <_usart_set_config+0x2cc>)
   2233e:	4798      	blx	r3
   22340:	0003      	movs	r3, r0
   22342:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   22344:	e033      	b.n	223ae <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   22346:	683b      	ldr	r3, [r7, #0]
   22348:	2227      	movs	r2, #39	; 0x27
   2234a:	5c9b      	ldrb	r3, [r3, r2]
   2234c:	2b00      	cmp	r3, #0
   2234e:	d014      	beq.n	2237a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   22350:	683b      	ldr	r3, [r7, #0]
   22352:	6a18      	ldr	r0, [r3, #32]
   22354:	683b      	ldr	r3, [r7, #0]
   22356:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   22358:	231d      	movs	r3, #29
   2235a:	18fc      	adds	r4, r7, r3
   2235c:	231f      	movs	r3, #31
   2235e:	18fb      	adds	r3, r7, r3
   22360:	781d      	ldrb	r5, [r3, #0]
   22362:	230a      	movs	r3, #10
   22364:	18fa      	adds	r2, r7, r3
   22366:	231e      	movs	r3, #30
   22368:	18fb      	adds	r3, r7, r3
   2236a:	781b      	ldrb	r3, [r3, #0]
   2236c:	9300      	str	r3, [sp, #0]
   2236e:	002b      	movs	r3, r5
   22370:	4d55      	ldr	r5, [pc, #340]	; (224c8 <_usart_set_config+0x2d0>)
   22372:	47a8      	blx	r5
   22374:	0003      	movs	r3, r0
   22376:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   22378:	e01a      	b.n	223b0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2237a:	683b      	ldr	r3, [r7, #0]
   2237c:	6a1d      	ldr	r5, [r3, #32]
   2237e:	693b      	ldr	r3, [r7, #16]
   22380:	b2db      	uxtb	r3, r3
   22382:	0018      	movs	r0, r3
   22384:	4b4e      	ldr	r3, [pc, #312]	; (224c0 <_usart_set_config+0x2c8>)
   22386:	4798      	blx	r3
				status_code =
   22388:	231d      	movs	r3, #29
   2238a:	18fc      	adds	r4, r7, r3
   2238c:	231f      	movs	r3, #31
   2238e:	18fb      	adds	r3, r7, r3
   22390:	7819      	ldrb	r1, [r3, #0]
   22392:	230a      	movs	r3, #10
   22394:	18fa      	adds	r2, r7, r3
   22396:	231e      	movs	r3, #30
   22398:	18fb      	adds	r3, r7, r3
   2239a:	781b      	ldrb	r3, [r3, #0]
   2239c:	9300      	str	r3, [sp, #0]
   2239e:	000b      	movs	r3, r1
   223a0:	0001      	movs	r1, r0
   223a2:	0028      	movs	r0, r5
   223a4:	4d48      	ldr	r5, [pc, #288]	; (224c8 <_usart_set_config+0x2d0>)
   223a6:	47a8      	blx	r5
   223a8:	0003      	movs	r3, r0
   223aa:	7023      	strb	r3, [r4, #0]
			break;
   223ac:	e000      	b.n	223b0 <_usart_set_config+0x1b8>
			break;
   223ae:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   223b0:	231d      	movs	r3, #29
   223b2:	18fb      	adds	r3, r7, r3
   223b4:	781b      	ldrb	r3, [r3, #0]
   223b6:	2b00      	cmp	r3, #0
   223b8:	d003      	beq.n	223c2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   223ba:	231d      	movs	r3, #29
   223bc:	18fb      	adds	r3, r7, r3
   223be:	781b      	ldrb	r3, [r3, #0]
   223c0:	e077      	b.n	224b2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   223c2:	683b      	ldr	r3, [r7, #0]
   223c4:	7e5b      	ldrb	r3, [r3, #25]
   223c6:	2b00      	cmp	r3, #0
   223c8:	d003      	beq.n	223d2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   223ca:	683b      	ldr	r3, [r7, #0]
   223cc:	7e9a      	ldrb	r2, [r3, #26]
   223ce:	69bb      	ldr	r3, [r7, #24]
   223d0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   223d2:	687b      	ldr	r3, [r7, #4]
   223d4:	0018      	movs	r0, r3
   223d6:	4b3d      	ldr	r3, [pc, #244]	; (224cc <_usart_set_config+0x2d4>)
   223d8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   223da:	230a      	movs	r3, #10
   223dc:	18fb      	adds	r3, r7, r3
   223de:	881a      	ldrh	r2, [r3, #0]
   223e0:	69bb      	ldr	r3, [r7, #24]
   223e2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   223e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   223e6:	68fb      	ldr	r3, [r7, #12]
   223e8:	4313      	orrs	r3, r2
   223ea:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   223ec:	683b      	ldr	r3, [r7, #0]
   223ee:	2227      	movs	r2, #39	; 0x27
   223f0:	5c9b      	ldrb	r3, [r3, r2]
   223f2:	2201      	movs	r2, #1
   223f4:	4053      	eors	r3, r2
   223f6:	b2db      	uxtb	r3, r3
   223f8:	2b00      	cmp	r3, #0
   223fa:	d003      	beq.n	22404 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   223fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   223fe:	2204      	movs	r2, #4
   22400:	4313      	orrs	r3, r2
   22402:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   22404:	683b      	ldr	r3, [r7, #0]
   22406:	7e5b      	ldrb	r3, [r3, #25]
   22408:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2240a:	683b      	ldr	r3, [r7, #0]
   2240c:	7f1b      	ldrb	r3, [r3, #28]
   2240e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   22410:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   22412:	683b      	ldr	r3, [r7, #0]
   22414:	7f5b      	ldrb	r3, [r3, #29]
   22416:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   22418:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2241a:	683b      	ldr	r3, [r7, #0]
   2241c:	2124      	movs	r1, #36	; 0x24
   2241e:	5c5b      	ldrb	r3, [r3, r1]
   22420:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   22422:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   22424:	683b      	ldr	r3, [r7, #0]
   22426:	2125      	movs	r1, #37	; 0x25
   22428:	5c5b      	ldrb	r3, [r3, r1]
   2242a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2242c:	4313      	orrs	r3, r2
	ctrlb =  
   2242e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   22430:	683b      	ldr	r3, [r7, #0]
   22432:	7a9b      	ldrb	r3, [r3, #10]
   22434:	001a      	movs	r2, r3
   22436:	6a3b      	ldr	r3, [r7, #32]
   22438:	4313      	orrs	r3, r2
   2243a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2243c:	683b      	ldr	r3, [r7, #0]
   2243e:	7adb      	ldrb	r3, [r3, #11]
   22440:	001a      	movs	r2, r3
   22442:	6a3b      	ldr	r3, [r7, #32]
   22444:	4313      	orrs	r3, r2
   22446:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   22448:	683b      	ldr	r3, [r7, #0]
   2244a:	891b      	ldrh	r3, [r3, #8]
   2244c:	2bff      	cmp	r3, #255	; 0xff
   2244e:	d00b      	beq.n	22468 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   22450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22452:	2280      	movs	r2, #128	; 0x80
   22454:	0452      	lsls	r2, r2, #17
   22456:	4313      	orrs	r3, r2
   22458:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2245a:	683b      	ldr	r3, [r7, #0]
   2245c:	891b      	ldrh	r3, [r3, #8]
   2245e:	001a      	movs	r2, r3
   22460:	6a3b      	ldr	r3, [r7, #32]
   22462:	4313      	orrs	r3, r2
   22464:	623b      	str	r3, [r7, #32]
   22466:	e008      	b.n	2247a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   22468:	683b      	ldr	r3, [r7, #0]
   2246a:	7edb      	ldrb	r3, [r3, #27]
   2246c:	2b00      	cmp	r3, #0
   2246e:	d004      	beq.n	2247a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   22470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22472:	2280      	movs	r2, #128	; 0x80
   22474:	04d2      	lsls	r2, r2, #19
   22476:	4313      	orrs	r3, r2
   22478:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2247a:	683b      	ldr	r3, [r7, #0]
   2247c:	222c      	movs	r2, #44	; 0x2c
   2247e:	5c9b      	ldrb	r3, [r3, r2]
   22480:	2b00      	cmp	r3, #0
   22482:	d103      	bne.n	2248c <_usart_set_config+0x294>
   22484:	4b12      	ldr	r3, [pc, #72]	; (224d0 <_usart_set_config+0x2d8>)
   22486:	4798      	blx	r3
   22488:	1e03      	subs	r3, r0, #0
   2248a:	d003      	beq.n	22494 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2248e:	2280      	movs	r2, #128	; 0x80
   22490:	4313      	orrs	r3, r2
   22492:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   22494:	687b      	ldr	r3, [r7, #4]
   22496:	0018      	movs	r0, r3
   22498:	4b0c      	ldr	r3, [pc, #48]	; (224cc <_usart_set_config+0x2d4>)
   2249a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2249c:	69bb      	ldr	r3, [r7, #24]
   2249e:	6a3a      	ldr	r2, [r7, #32]
   224a0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   224a2:	687b      	ldr	r3, [r7, #4]
   224a4:	0018      	movs	r0, r3
   224a6:	4b09      	ldr	r3, [pc, #36]	; (224cc <_usart_set_config+0x2d4>)
   224a8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   224aa:	69bb      	ldr	r3, [r7, #24]
   224ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   224ae:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   224b0:	2300      	movs	r3, #0
}
   224b2:	0018      	movs	r0, r3
   224b4:	46bd      	mov	sp, r7
   224b6:	b00a      	add	sp, #40	; 0x28
   224b8:	bdb0      	pop	{r4, r5, r7, pc}
   224ba:	46c0      	nop			; (mov r8, r8)
   224bc:	0001f595 	.word	0x0001f595
   224c0:	00025339 	.word	0x00025339
   224c4:	0001f10f 	.word	0x0001f10f
   224c8:	0001f18d 	.word	0x0001f18d
   224cc:	000221d5 	.word	0x000221d5
   224d0:	00022195 	.word	0x00022195

000224d4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   224d4:	b590      	push	{r4, r7, lr}
   224d6:	b093      	sub	sp, #76	; 0x4c
   224d8:	af00      	add	r7, sp, #0
   224da:	60f8      	str	r0, [r7, #12]
   224dc:	60b9      	str	r1, [r7, #8]
   224de:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   224e0:	233b      	movs	r3, #59	; 0x3b
   224e2:	18fb      	adds	r3, r7, r3
   224e4:	2200      	movs	r2, #0
   224e6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   224e8:	68fb      	ldr	r3, [r7, #12]
   224ea:	68ba      	ldr	r2, [r7, #8]
   224ec:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   224ee:	68fb      	ldr	r3, [r7, #12]
   224f0:	681b      	ldr	r3, [r3, #0]
   224f2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   224f4:	68fb      	ldr	r3, [r7, #12]
   224f6:	681b      	ldr	r3, [r3, #0]
   224f8:	0018      	movs	r0, r3
   224fa:	4b86      	ldr	r3, [pc, #536]	; (22714 <usart_init+0x240>)
   224fc:	4798      	blx	r3
   224fe:	0003      	movs	r3, r0
   22500:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   22502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22504:	3302      	adds	r3, #2
   22506:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   22508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2250a:	3314      	adds	r3, #20
   2250c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22510:	681b      	ldr	r3, [r3, #0]
   22512:	2201      	movs	r2, #1
   22514:	4013      	ands	r3, r2
   22516:	d001      	beq.n	2251c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   22518:	2305      	movs	r3, #5
   2251a:	e0f6      	b.n	2270a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2251e:	681b      	ldr	r3, [r3, #0]
   22520:	2202      	movs	r2, #2
   22522:	4013      	ands	r3, r2
   22524:	d001      	beq.n	2252a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   22526:	231c      	movs	r3, #28
   22528:	e0ef      	b.n	2270a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2252a:	2201      	movs	r2, #1
   2252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2252e:	409a      	lsls	r2, r3
   22530:	0013      	movs	r3, r2
   22532:	0019      	movs	r1, r3
   22534:	2002      	movs	r0, #2
   22536:	4b78      	ldr	r3, [pc, #480]	; (22718 <usart_init+0x244>)
   22538:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2253a:	2324      	movs	r3, #36	; 0x24
   2253c:	18fb      	adds	r3, r7, r3
   2253e:	0018      	movs	r0, r3
   22540:	4b76      	ldr	r3, [pc, #472]	; (2271c <usart_init+0x248>)
   22542:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   22544:	687b      	ldr	r3, [r7, #4]
   22546:	222d      	movs	r2, #45	; 0x2d
   22548:	5c9a      	ldrb	r2, [r3, r2]
   2254a:	2324      	movs	r3, #36	; 0x24
   2254c:	18fb      	adds	r3, r7, r3
   2254e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   22550:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22552:	b2db      	uxtb	r3, r3
   22554:	2224      	movs	r2, #36	; 0x24
   22556:	18ba      	adds	r2, r7, r2
   22558:	0011      	movs	r1, r2
   2255a:	0018      	movs	r0, r3
   2255c:	4b70      	ldr	r3, [pc, #448]	; (22720 <usart_init+0x24c>)
   2255e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   22560:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22562:	b2db      	uxtb	r3, r3
   22564:	0018      	movs	r0, r3
   22566:	4b6f      	ldr	r3, [pc, #444]	; (22724 <usart_init+0x250>)
   22568:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2256a:	687b      	ldr	r3, [r7, #4]
   2256c:	222d      	movs	r2, #45	; 0x2d
   2256e:	5c9b      	ldrb	r3, [r3, r2]
   22570:	2100      	movs	r1, #0
   22572:	0018      	movs	r0, r3
   22574:	4b6c      	ldr	r3, [pc, #432]	; (22728 <usart_init+0x254>)
   22576:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   22578:	687b      	ldr	r3, [r7, #4]
   2257a:	7ada      	ldrb	r2, [r3, #11]
   2257c:	68fb      	ldr	r3, [r7, #12]
   2257e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   22580:	687b      	ldr	r3, [r7, #4]
   22582:	2224      	movs	r2, #36	; 0x24
   22584:	5c9a      	ldrb	r2, [r3, r2]
   22586:	68fb      	ldr	r3, [r7, #12]
   22588:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2258a:	687b      	ldr	r3, [r7, #4]
   2258c:	2225      	movs	r2, #37	; 0x25
   2258e:	5c9a      	ldrb	r2, [r3, r2]
   22590:	68fb      	ldr	r3, [r7, #12]
   22592:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   22594:	687b      	ldr	r3, [r7, #4]
   22596:	7eda      	ldrb	r2, [r3, #27]
   22598:	68fb      	ldr	r3, [r7, #12]
   2259a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2259c:	687b      	ldr	r3, [r7, #4]
   2259e:	7f1a      	ldrb	r2, [r3, #28]
   225a0:	68fb      	ldr	r3, [r7, #12]
   225a2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   225a4:	233b      	movs	r3, #59	; 0x3b
   225a6:	18fc      	adds	r4, r7, r3
   225a8:	687a      	ldr	r2, [r7, #4]
   225aa:	68fb      	ldr	r3, [r7, #12]
   225ac:	0011      	movs	r1, r2
   225ae:	0018      	movs	r0, r3
   225b0:	4b5e      	ldr	r3, [pc, #376]	; (2272c <usart_init+0x258>)
   225b2:	4798      	blx	r3
   225b4:	0003      	movs	r3, r0
   225b6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   225b8:	233b      	movs	r3, #59	; 0x3b
   225ba:	18fb      	adds	r3, r7, r3
   225bc:	781b      	ldrb	r3, [r3, #0]
   225be:	2b00      	cmp	r3, #0
   225c0:	d003      	beq.n	225ca <usart_init+0xf6>
		return status_code;
   225c2:	233b      	movs	r3, #59	; 0x3b
   225c4:	18fb      	adds	r3, r7, r3
   225c6:	781b      	ldrb	r3, [r3, #0]
   225c8:	e09f      	b.n	2270a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   225ca:	2320      	movs	r3, #32
   225cc:	18fb      	adds	r3, r7, r3
   225ce:	0018      	movs	r0, r3
   225d0:	4b57      	ldr	r3, [pc, #348]	; (22730 <usart_init+0x25c>)
   225d2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   225d4:	2320      	movs	r3, #32
   225d6:	18fb      	adds	r3, r7, r3
   225d8:	2200      	movs	r2, #0
   225da:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   225dc:	2320      	movs	r3, #32
   225de:	18fb      	adds	r3, r7, r3
   225e0:	2200      	movs	r2, #0
   225e2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   225e4:	687b      	ldr	r3, [r7, #4]
   225e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   225e8:	2310      	movs	r3, #16
   225ea:	18fb      	adds	r3, r7, r3
   225ec:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   225ee:	687b      	ldr	r3, [r7, #4]
   225f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   225f2:	2310      	movs	r3, #16
   225f4:	18fb      	adds	r3, r7, r3
   225f6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   225f8:	687b      	ldr	r3, [r7, #4]
   225fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   225fc:	2310      	movs	r3, #16
   225fe:	18fb      	adds	r3, r7, r3
   22600:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   22602:	687b      	ldr	r3, [r7, #4]
   22604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   22606:	2310      	movs	r3, #16
   22608:	18fb      	adds	r3, r7, r3
   2260a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2260c:	2347      	movs	r3, #71	; 0x47
   2260e:	18fb      	adds	r3, r7, r3
   22610:	2200      	movs	r2, #0
   22612:	701a      	strb	r2, [r3, #0]
   22614:	e02c      	b.n	22670 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   22616:	2347      	movs	r3, #71	; 0x47
   22618:	18fb      	adds	r3, r7, r3
   2261a:	781a      	ldrb	r2, [r3, #0]
   2261c:	2310      	movs	r3, #16
   2261e:	18fb      	adds	r3, r7, r3
   22620:	0092      	lsls	r2, r2, #2
   22622:	58d3      	ldr	r3, [r2, r3]
   22624:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   22626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22628:	2b00      	cmp	r3, #0
   2262a:	d109      	bne.n	22640 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2262c:	2347      	movs	r3, #71	; 0x47
   2262e:	18fb      	adds	r3, r7, r3
   22630:	781a      	ldrb	r2, [r3, #0]
   22632:	68bb      	ldr	r3, [r7, #8]
   22634:	0011      	movs	r1, r2
   22636:	0018      	movs	r0, r3
   22638:	4b3e      	ldr	r3, [pc, #248]	; (22734 <usart_init+0x260>)
   2263a:	4798      	blx	r3
   2263c:	0003      	movs	r3, r0
   2263e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   22640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22642:	3301      	adds	r3, #1
   22644:	d00d      	beq.n	22662 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   22646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22648:	b2da      	uxtb	r2, r3
   2264a:	2320      	movs	r3, #32
   2264c:	18fb      	adds	r3, r7, r3
   2264e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   22650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22652:	0c1b      	lsrs	r3, r3, #16
   22654:	b2db      	uxtb	r3, r3
   22656:	2220      	movs	r2, #32
   22658:	18ba      	adds	r2, r7, r2
   2265a:	0011      	movs	r1, r2
   2265c:	0018      	movs	r0, r3
   2265e:	4b36      	ldr	r3, [pc, #216]	; (22738 <usart_init+0x264>)
   22660:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   22662:	2347      	movs	r3, #71	; 0x47
   22664:	18fb      	adds	r3, r7, r3
   22666:	781a      	ldrb	r2, [r3, #0]
   22668:	2347      	movs	r3, #71	; 0x47
   2266a:	18fb      	adds	r3, r7, r3
   2266c:	3201      	adds	r2, #1
   2266e:	701a      	strb	r2, [r3, #0]
   22670:	2347      	movs	r3, #71	; 0x47
   22672:	18fb      	adds	r3, r7, r3
   22674:	781b      	ldrb	r3, [r3, #0]
   22676:	2b03      	cmp	r3, #3
   22678:	d9cd      	bls.n	22616 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2267a:	2300      	movs	r3, #0
   2267c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2267e:	e00a      	b.n	22696 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   22680:	68fa      	ldr	r2, [r7, #12]
   22682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22684:	3302      	adds	r3, #2
   22686:	009b      	lsls	r3, r3, #2
   22688:	18d3      	adds	r3, r2, r3
   2268a:	3304      	adds	r3, #4
   2268c:	2200      	movs	r2, #0
   2268e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   22690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22692:	3301      	adds	r3, #1
   22694:	63fb      	str	r3, [r7, #60]	; 0x3c
   22696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   22698:	2b05      	cmp	r3, #5
   2269a:	d9f1      	bls.n	22680 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2269c:	68fb      	ldr	r3, [r7, #12]
   2269e:	2200      	movs	r2, #0
   226a0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   226a2:	68fb      	ldr	r3, [r7, #12]
   226a4:	2200      	movs	r2, #0
   226a6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   226a8:	68fb      	ldr	r3, [r7, #12]
   226aa:	2200      	movs	r2, #0
   226ac:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   226ae:	68fb      	ldr	r3, [r7, #12]
   226b0:	2200      	movs	r2, #0
   226b2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   226b4:	68fb      	ldr	r3, [r7, #12]
   226b6:	2230      	movs	r2, #48	; 0x30
   226b8:	2100      	movs	r1, #0
   226ba:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   226bc:	68fb      	ldr	r3, [r7, #12]
   226be:	2231      	movs	r2, #49	; 0x31
   226c0:	2100      	movs	r1, #0
   226c2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   226c4:	68fb      	ldr	r3, [r7, #12]
   226c6:	2232      	movs	r2, #50	; 0x32
   226c8:	2100      	movs	r1, #0
   226ca:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   226cc:	68fb      	ldr	r3, [r7, #12]
   226ce:	2233      	movs	r2, #51	; 0x33
   226d0:	2100      	movs	r1, #0
   226d2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   226d4:	68fb      	ldr	r3, [r7, #12]
   226d6:	681b      	ldr	r3, [r3, #0]
   226d8:	2227      	movs	r2, #39	; 0x27
   226da:	18bc      	adds	r4, r7, r2
   226dc:	0018      	movs	r0, r3
   226de:	4b0d      	ldr	r3, [pc, #52]	; (22714 <usart_init+0x240>)
   226e0:	4798      	blx	r3
   226e2:	0003      	movs	r3, r0
   226e4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   226e6:	4a15      	ldr	r2, [pc, #84]	; (2273c <usart_init+0x268>)
   226e8:	2327      	movs	r3, #39	; 0x27
   226ea:	18fb      	adds	r3, r7, r3
   226ec:	781b      	ldrb	r3, [r3, #0]
   226ee:	0011      	movs	r1, r2
   226f0:	0018      	movs	r0, r3
   226f2:	4b13      	ldr	r3, [pc, #76]	; (22740 <usart_init+0x26c>)
   226f4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   226f6:	2327      	movs	r3, #39	; 0x27
   226f8:	18fb      	adds	r3, r7, r3
   226fa:	781a      	ldrb	r2, [r3, #0]
   226fc:	4b11      	ldr	r3, [pc, #68]	; (22744 <usart_init+0x270>)
   226fe:	0092      	lsls	r2, r2, #2
   22700:	68f9      	ldr	r1, [r7, #12]
   22702:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   22704:	233b      	movs	r3, #59	; 0x3b
   22706:	18fb      	adds	r3, r7, r3
   22708:	781b      	ldrb	r3, [r3, #0]
}
   2270a:	0018      	movs	r0, r3
   2270c:	46bd      	mov	sp, r7
   2270e:	b013      	add	sp, #76	; 0x4c
   22710:	bd90      	pop	{r4, r7, pc}
   22712:	46c0      	nop			; (mov r8, r8)
   22714:	0001f595 	.word	0x0001f595
   22718:	00022111 	.word	0x00022111
   2271c:	000220f9 	.word	0x000220f9
   22720:	00025215 	.word	0x00025215
   22724:	00025259 	.word	0x00025259
   22728:	0001f34d 	.word	0x0001f34d
   2272c:	000221f9 	.word	0x000221f9
   22730:	0002216d 	.word	0x0002216d
   22734:	0001f3d9 	.word	0x0001f3d9
   22738:	00025501 	.word	0x00025501
   2273c:	0002291d 	.word	0x0002291d
   22740:	00022c71 	.word	0x00022c71
   22744:	20000b78 	.word	0x20000b78

00022748 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   22748:	b580      	push	{r7, lr}
   2274a:	b084      	sub	sp, #16
   2274c:	af00      	add	r7, sp, #0
   2274e:	6078      	str	r0, [r7, #4]
   22750:	000a      	movs	r2, r1
   22752:	1cbb      	adds	r3, r7, #2
   22754:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   22756:	687b      	ldr	r3, [r7, #4]
   22758:	681b      	ldr	r3, [r3, #0]
   2275a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2275c:	687b      	ldr	r3, [r7, #4]
   2275e:	79db      	ldrb	r3, [r3, #7]
   22760:	2201      	movs	r2, #1
   22762:	4053      	eors	r3, r2
   22764:	b2db      	uxtb	r3, r3
   22766:	2b00      	cmp	r3, #0
   22768:	d001      	beq.n	2276e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   2276a:	231c      	movs	r3, #28
   2276c:	e017      	b.n	2279e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   2276e:	687b      	ldr	r3, [r7, #4]
   22770:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   22772:	b29b      	uxth	r3, r3
   22774:	2b00      	cmp	r3, #0
   22776:	d001      	beq.n	2277c <usart_write_wait+0x34>
		return STATUS_BUSY;
   22778:	2305      	movs	r3, #5
   2277a:	e010      	b.n	2279e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2277c:	687b      	ldr	r3, [r7, #4]
   2277e:	0018      	movs	r0, r3
   22780:	4b09      	ldr	r3, [pc, #36]	; (227a8 <usart_write_wait+0x60>)
   22782:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   22784:	68fb      	ldr	r3, [r7, #12]
   22786:	1cba      	adds	r2, r7, #2
   22788:	8812      	ldrh	r2, [r2, #0]
   2278a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   2278c:	46c0      	nop			; (mov r8, r8)
   2278e:	68fb      	ldr	r3, [r7, #12]
   22790:	7e1b      	ldrb	r3, [r3, #24]
   22792:	b2db      	uxtb	r3, r3
   22794:	001a      	movs	r2, r3
   22796:	2302      	movs	r3, #2
   22798:	4013      	ands	r3, r2
   2279a:	d0f8      	beq.n	2278e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   2279c:	2300      	movs	r3, #0
}
   2279e:	0018      	movs	r0, r3
   227a0:	46bd      	mov	sp, r7
   227a2:	b004      	add	sp, #16
   227a4:	bd80      	pop	{r7, pc}
   227a6:	46c0      	nop			; (mov r8, r8)
   227a8:	000221d5 	.word	0x000221d5

000227ac <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   227ac:	b580      	push	{r7, lr}
   227ae:	b08a      	sub	sp, #40	; 0x28
   227b0:	af00      	add	r7, sp, #0
   227b2:	60f8      	str	r0, [r7, #12]
   227b4:	60b9      	str	r1, [r7, #8]
   227b6:	1dbb      	adds	r3, r7, #6
   227b8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   227ba:	1dbb      	adds	r3, r7, #6
   227bc:	881b      	ldrh	r3, [r3, #0]
   227be:	2b00      	cmp	r3, #0
   227c0:	d101      	bne.n	227c6 <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   227c2:	2317      	movs	r3, #23
   227c4:	e07e      	b.n	228c4 <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   227c6:	68fb      	ldr	r3, [r7, #12]
   227c8:	79db      	ldrb	r3, [r3, #7]
   227ca:	2201      	movs	r2, #1
   227cc:	4053      	eors	r3, r2
   227ce:	b2db      	uxtb	r3, r3
   227d0:	2b00      	cmp	r3, #0
   227d2:	d001      	beq.n	227d8 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   227d4:	231c      	movs	r3, #28
   227d6:	e075      	b.n	228c4 <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   227d8:	68fb      	ldr	r3, [r7, #12]
   227da:	681b      	ldr	r3, [r3, #0]
   227dc:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   227de:	68fb      	ldr	r3, [r7, #12]
   227e0:	0018      	movs	r0, r3
   227e2:	4b3a      	ldr	r3, [pc, #232]	; (228cc <usart_write_buffer_wait+0x120>)
   227e4:	4798      	blx	r3

	uint16_t tx_pos = 0;
   227e6:	2326      	movs	r3, #38	; 0x26
   227e8:	18fb      	adds	r3, r7, r3
   227ea:	2200      	movs	r2, #0
   227ec:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   227ee:	e048      	b.n	22882 <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   227f0:	2300      	movs	r3, #0
   227f2:	623b      	str	r3, [r7, #32]
   227f4:	e00f      	b.n	22816 <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   227f6:	697b      	ldr	r3, [r7, #20]
   227f8:	7e1b      	ldrb	r3, [r3, #24]
   227fa:	b2db      	uxtb	r3, r3
   227fc:	001a      	movs	r2, r3
   227fe:	2301      	movs	r3, #1
   22800:	4013      	ands	r3, r2
   22802:	d10d      	bne.n	22820 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   22804:	6a3b      	ldr	r3, [r7, #32]
   22806:	4a32      	ldr	r2, [pc, #200]	; (228d0 <usart_write_buffer_wait+0x124>)
   22808:	4293      	cmp	r3, r2
   2280a:	d101      	bne.n	22810 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   2280c:	2312      	movs	r3, #18
   2280e:	e059      	b.n	228c4 <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   22810:	6a3b      	ldr	r3, [r7, #32]
   22812:	3301      	adds	r3, #1
   22814:	623b      	str	r3, [r7, #32]
   22816:	6a3b      	ldr	r3, [r7, #32]
   22818:	4a2d      	ldr	r2, [pc, #180]	; (228d0 <usart_write_buffer_wait+0x124>)
   2281a:	4293      	cmp	r3, r2
   2281c:	d9eb      	bls.n	227f6 <usart_write_buffer_wait+0x4a>
   2281e:	e000      	b.n	22822 <usart_write_buffer_wait+0x76>
				break;
   22820:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   22822:	2326      	movs	r3, #38	; 0x26
   22824:	18fb      	adds	r3, r7, r3
   22826:	881b      	ldrh	r3, [r3, #0]
   22828:	2226      	movs	r2, #38	; 0x26
   2282a:	18ba      	adds	r2, r7, r2
   2282c:	1c59      	adds	r1, r3, #1
   2282e:	8011      	strh	r1, [r2, #0]
   22830:	001a      	movs	r2, r3
   22832:	68bb      	ldr	r3, [r7, #8]
   22834:	189b      	adds	r3, r3, r2
   22836:	781a      	ldrb	r2, [r3, #0]
   22838:	231e      	movs	r3, #30
   2283a:	18fb      	adds	r3, r7, r3
   2283c:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2283e:	68fb      	ldr	r3, [r7, #12]
   22840:	795b      	ldrb	r3, [r3, #5]
   22842:	2b01      	cmp	r3, #1
   22844:	d115      	bne.n	22872 <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   22846:	2326      	movs	r3, #38	; 0x26
   22848:	18fb      	adds	r3, r7, r3
   2284a:	881b      	ldrh	r3, [r3, #0]
   2284c:	2226      	movs	r2, #38	; 0x26
   2284e:	18ba      	adds	r2, r7, r2
   22850:	1c59      	adds	r1, r3, #1
   22852:	8011      	strh	r1, [r2, #0]
   22854:	001a      	movs	r2, r3
   22856:	68bb      	ldr	r3, [r7, #8]
   22858:	189b      	adds	r3, r3, r2
   2285a:	781b      	ldrb	r3, [r3, #0]
   2285c:	021b      	lsls	r3, r3, #8
   2285e:	b21a      	sxth	r2, r3
   22860:	231e      	movs	r3, #30
   22862:	18fb      	adds	r3, r7, r3
   22864:	2100      	movs	r1, #0
   22866:	5e5b      	ldrsh	r3, [r3, r1]
   22868:	4313      	orrs	r3, r2
   2286a:	b21a      	sxth	r2, r3
   2286c:	231e      	movs	r3, #30
   2286e:	18fb      	adds	r3, r7, r3
   22870:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   22872:	231e      	movs	r3, #30
   22874:	18fb      	adds	r3, r7, r3
   22876:	881a      	ldrh	r2, [r3, #0]
   22878:	68fb      	ldr	r3, [r7, #12]
   2287a:	0011      	movs	r1, r2
   2287c:	0018      	movs	r0, r3
   2287e:	4b15      	ldr	r3, [pc, #84]	; (228d4 <usart_write_buffer_wait+0x128>)
   22880:	4798      	blx	r3
	while (length--) {
   22882:	1dbb      	adds	r3, r7, #6
   22884:	881b      	ldrh	r3, [r3, #0]
   22886:	1dba      	adds	r2, r7, #6
   22888:	1e59      	subs	r1, r3, #1
   2288a:	8011      	strh	r1, [r2, #0]
   2288c:	2b00      	cmp	r3, #0
   2288e:	d1af      	bne.n	227f0 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   22890:	2300      	movs	r3, #0
   22892:	61bb      	str	r3, [r7, #24]
   22894:	e00f      	b.n	228b6 <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   22896:	697b      	ldr	r3, [r7, #20]
   22898:	7e1b      	ldrb	r3, [r3, #24]
   2289a:	b2db      	uxtb	r3, r3
   2289c:	001a      	movs	r2, r3
   2289e:	2302      	movs	r3, #2
   228a0:	4013      	ands	r3, r2
   228a2:	d10d      	bne.n	228c0 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   228a4:	69bb      	ldr	r3, [r7, #24]
   228a6:	4a0a      	ldr	r2, [pc, #40]	; (228d0 <usart_write_buffer_wait+0x124>)
   228a8:	4293      	cmp	r3, r2
   228aa:	d101      	bne.n	228b0 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   228ac:	2312      	movs	r3, #18
   228ae:	e009      	b.n	228c4 <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   228b0:	69bb      	ldr	r3, [r7, #24]
   228b2:	3301      	adds	r3, #1
   228b4:	61bb      	str	r3, [r7, #24]
   228b6:	69bb      	ldr	r3, [r7, #24]
   228b8:	4a05      	ldr	r2, [pc, #20]	; (228d0 <usart_write_buffer_wait+0x124>)
   228ba:	4293      	cmp	r3, r2
   228bc:	d9eb      	bls.n	22896 <usart_write_buffer_wait+0xea>
   228be:	e000      	b.n	228c2 <usart_write_buffer_wait+0x116>
			break;
   228c0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   228c2:	2300      	movs	r3, #0
}
   228c4:	0018      	movs	r0, r3
   228c6:	46bd      	mov	sp, r7
   228c8:	b00a      	add	sp, #40	; 0x28
   228ca:	bd80      	pop	{r7, pc}
   228cc:	000221d5 	.word	0x000221d5
   228d0:	0000ffff 	.word	0x0000ffff
   228d4:	00022749 	.word	0x00022749

000228d8 <usart_is_syncing>:
{
   228d8:	b580      	push	{r7, lr}
   228da:	b084      	sub	sp, #16
   228dc:	af00      	add	r7, sp, #0
   228de:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   228e0:	687b      	ldr	r3, [r7, #4]
   228e2:	681b      	ldr	r3, [r3, #0]
   228e4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   228e6:	68fb      	ldr	r3, [r7, #12]
   228e8:	69db      	ldr	r3, [r3, #28]
   228ea:	1e5a      	subs	r2, r3, #1
   228ec:	4193      	sbcs	r3, r2
   228ee:	b2db      	uxtb	r3, r3
}
   228f0:	0018      	movs	r0, r3
   228f2:	46bd      	mov	sp, r7
   228f4:	b004      	add	sp, #16
   228f6:	bd80      	pop	{r7, pc}

000228f8 <_usart_wait_for_sync>:
{
   228f8:	b580      	push	{r7, lr}
   228fa:	b082      	sub	sp, #8
   228fc:	af00      	add	r7, sp, #0
   228fe:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   22900:	46c0      	nop			; (mov r8, r8)
   22902:	687b      	ldr	r3, [r7, #4]
   22904:	0018      	movs	r0, r3
   22906:	4b04      	ldr	r3, [pc, #16]	; (22918 <_usart_wait_for_sync+0x20>)
   22908:	4798      	blx	r3
   2290a:	1e03      	subs	r3, r0, #0
   2290c:	d1f9      	bne.n	22902 <_usart_wait_for_sync+0xa>
}
   2290e:	46c0      	nop			; (mov r8, r8)
   22910:	46bd      	mov	sp, r7
   22912:	b002      	add	sp, #8
   22914:	bd80      	pop	{r7, pc}
   22916:	46c0      	nop			; (mov r8, r8)
   22918:	000228d9 	.word	0x000228d9

0002291c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2291c:	b580      	push	{r7, lr}
   2291e:	b088      	sub	sp, #32
   22920:	af00      	add	r7, sp, #0
   22922:	0002      	movs	r2, r0
   22924:	1dfb      	adds	r3, r7, #7
   22926:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   22928:	1dfb      	adds	r3, r7, #7
   2292a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2292c:	4ba3      	ldr	r3, [pc, #652]	; (22bbc <_usart_interrupt_handler+0x2a0>)
   2292e:	0092      	lsls	r2, r2, #2
   22930:	58d3      	ldr	r3, [r2, r3]
   22932:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   22934:	69bb      	ldr	r3, [r7, #24]
   22936:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   22938:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2293a:	69bb      	ldr	r3, [r7, #24]
   2293c:	0018      	movs	r0, r3
   2293e:	4ba0      	ldr	r3, [pc, #640]	; (22bc0 <_usart_interrupt_handler+0x2a4>)
   22940:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   22942:	697b      	ldr	r3, [r7, #20]
   22944:	7e1b      	ldrb	r3, [r3, #24]
   22946:	b2da      	uxtb	r2, r3
   22948:	2312      	movs	r3, #18
   2294a:	18fb      	adds	r3, r7, r3
   2294c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2294e:	697b      	ldr	r3, [r7, #20]
   22950:	7d9b      	ldrb	r3, [r3, #22]
   22952:	b2db      	uxtb	r3, r3
   22954:	b29a      	uxth	r2, r3
   22956:	2312      	movs	r3, #18
   22958:	18fb      	adds	r3, r7, r3
   2295a:	2112      	movs	r1, #18
   2295c:	1879      	adds	r1, r7, r1
   2295e:	8809      	ldrh	r1, [r1, #0]
   22960:	400a      	ands	r2, r1
   22962:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   22964:	69bb      	ldr	r3, [r7, #24]
   22966:	2230      	movs	r2, #48	; 0x30
   22968:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2296a:	69ba      	ldr	r2, [r7, #24]
   2296c:	2131      	movs	r1, #49	; 0x31
   2296e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   22970:	4013      	ands	r3, r2
   22972:	b2da      	uxtb	r2, r3
   22974:	2310      	movs	r3, #16
   22976:	18fb      	adds	r3, r7, r3
   22978:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2297a:	2312      	movs	r3, #18
   2297c:	18fb      	adds	r3, r7, r3
   2297e:	881b      	ldrh	r3, [r3, #0]
   22980:	2201      	movs	r2, #1
   22982:	4013      	ands	r3, r2
   22984:	d044      	beq.n	22a10 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   22986:	69bb      	ldr	r3, [r7, #24]
   22988:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2298a:	b29b      	uxth	r3, r3
   2298c:	2b00      	cmp	r3, #0
   2298e:	d03c      	beq.n	22a0a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   22990:	69bb      	ldr	r3, [r7, #24]
   22992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22994:	781b      	ldrb	r3, [r3, #0]
   22996:	b2da      	uxtb	r2, r3
   22998:	231c      	movs	r3, #28
   2299a:	18fb      	adds	r3, r7, r3
   2299c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2299e:	69bb      	ldr	r3, [r7, #24]
   229a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   229a2:	1c5a      	adds	r2, r3, #1
   229a4:	69bb      	ldr	r3, [r7, #24]
   229a6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   229a8:	69bb      	ldr	r3, [r7, #24]
   229aa:	795b      	ldrb	r3, [r3, #5]
   229ac:	2b01      	cmp	r3, #1
   229ae:	d113      	bne.n	229d8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   229b0:	69bb      	ldr	r3, [r7, #24]
   229b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   229b4:	781b      	ldrb	r3, [r3, #0]
   229b6:	b2db      	uxtb	r3, r3
   229b8:	021b      	lsls	r3, r3, #8
   229ba:	b21a      	sxth	r2, r3
   229bc:	231c      	movs	r3, #28
   229be:	18fb      	adds	r3, r7, r3
   229c0:	2100      	movs	r1, #0
   229c2:	5e5b      	ldrsh	r3, [r3, r1]
   229c4:	4313      	orrs	r3, r2
   229c6:	b21a      	sxth	r2, r3
   229c8:	231c      	movs	r3, #28
   229ca:	18fb      	adds	r3, r7, r3
   229cc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   229ce:	69bb      	ldr	r3, [r7, #24]
   229d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   229d2:	1c5a      	adds	r2, r3, #1
   229d4:	69bb      	ldr	r3, [r7, #24]
   229d6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   229d8:	231c      	movs	r3, #28
   229da:	18fb      	adds	r3, r7, r3
   229dc:	881b      	ldrh	r3, [r3, #0]
   229de:	05db      	lsls	r3, r3, #23
   229e0:	0ddb      	lsrs	r3, r3, #23
   229e2:	b29a      	uxth	r2, r3
   229e4:	697b      	ldr	r3, [r7, #20]
   229e6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   229e8:	69bb      	ldr	r3, [r7, #24]
   229ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   229ec:	b29b      	uxth	r3, r3
   229ee:	3b01      	subs	r3, #1
   229f0:	b29b      	uxth	r3, r3
   229f2:	69ba      	ldr	r2, [r7, #24]
   229f4:	1c19      	adds	r1, r3, #0
   229f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   229f8:	2b00      	cmp	r3, #0
   229fa:	d109      	bne.n	22a10 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   229fc:	697b      	ldr	r3, [r7, #20]
   229fe:	2201      	movs	r2, #1
   22a00:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   22a02:	697b      	ldr	r3, [r7, #20]
   22a04:	2202      	movs	r2, #2
   22a06:	759a      	strb	r2, [r3, #22]
   22a08:	e002      	b.n	22a10 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   22a0a:	697b      	ldr	r3, [r7, #20]
   22a0c:	2201      	movs	r2, #1
   22a0e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   22a10:	2312      	movs	r3, #18
   22a12:	18fb      	adds	r3, r7, r3
   22a14:	881b      	ldrh	r3, [r3, #0]
   22a16:	2202      	movs	r2, #2
   22a18:	4013      	ands	r3, r2
   22a1a:	d011      	beq.n	22a40 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   22a1c:	697b      	ldr	r3, [r7, #20]
   22a1e:	2202      	movs	r2, #2
   22a20:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   22a22:	69bb      	ldr	r3, [r7, #24]
   22a24:	2233      	movs	r2, #51	; 0x33
   22a26:	2100      	movs	r1, #0
   22a28:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   22a2a:	2310      	movs	r3, #16
   22a2c:	18fb      	adds	r3, r7, r3
   22a2e:	881b      	ldrh	r3, [r3, #0]
   22a30:	2201      	movs	r2, #1
   22a32:	4013      	ands	r3, r2
   22a34:	d004      	beq.n	22a40 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   22a36:	69bb      	ldr	r3, [r7, #24]
   22a38:	68db      	ldr	r3, [r3, #12]
   22a3a:	69ba      	ldr	r2, [r7, #24]
   22a3c:	0010      	movs	r0, r2
   22a3e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   22a40:	2312      	movs	r3, #18
   22a42:	18fb      	adds	r3, r7, r3
   22a44:	881b      	ldrh	r3, [r3, #0]
   22a46:	2204      	movs	r2, #4
   22a48:	4013      	ands	r3, r2
   22a4a:	d100      	bne.n	22a4e <_usart_interrupt_handler+0x132>
   22a4c:	e0bd      	b.n	22bca <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   22a4e:	69bb      	ldr	r3, [r7, #24]
   22a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22a52:	b29b      	uxth	r3, r3
   22a54:	2b00      	cmp	r3, #0
   22a56:	d100      	bne.n	22a5a <_usart_interrupt_handler+0x13e>
   22a58:	e0b4      	b.n	22bc4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   22a5a:	697b      	ldr	r3, [r7, #20]
   22a5c:	8b5b      	ldrh	r3, [r3, #26]
   22a5e:	b29b      	uxth	r3, r3
   22a60:	b2da      	uxtb	r2, r3
   22a62:	231f      	movs	r3, #31
   22a64:	18fb      	adds	r3, r7, r3
   22a66:	213f      	movs	r1, #63	; 0x3f
   22a68:	400a      	ands	r2, r1
   22a6a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   22a6c:	231f      	movs	r3, #31
   22a6e:	18fb      	adds	r3, r7, r3
   22a70:	781b      	ldrb	r3, [r3, #0]
   22a72:	2208      	movs	r2, #8
   22a74:	4013      	ands	r3, r2
   22a76:	d007      	beq.n	22a88 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   22a78:	231f      	movs	r3, #31
   22a7a:	18fb      	adds	r3, r7, r3
   22a7c:	221f      	movs	r2, #31
   22a7e:	18ba      	adds	r2, r7, r2
   22a80:	7812      	ldrb	r2, [r2, #0]
   22a82:	2108      	movs	r1, #8
   22a84:	438a      	bics	r2, r1
   22a86:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   22a88:	231f      	movs	r3, #31
   22a8a:	18fb      	adds	r3, r7, r3
   22a8c:	781b      	ldrb	r3, [r3, #0]
   22a8e:	2b00      	cmp	r3, #0
   22a90:	d050      	beq.n	22b34 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   22a92:	231f      	movs	r3, #31
   22a94:	18fb      	adds	r3, r7, r3
   22a96:	781b      	ldrb	r3, [r3, #0]
   22a98:	2202      	movs	r2, #2
   22a9a:	4013      	ands	r3, r2
   22a9c:	d007      	beq.n	22aae <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   22a9e:	69bb      	ldr	r3, [r7, #24]
   22aa0:	2232      	movs	r2, #50	; 0x32
   22aa2:	211a      	movs	r1, #26
   22aa4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   22aa6:	697b      	ldr	r3, [r7, #20]
   22aa8:	2202      	movs	r2, #2
   22aaa:	835a      	strh	r2, [r3, #26]
   22aac:	e036      	b.n	22b1c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   22aae:	231f      	movs	r3, #31
   22ab0:	18fb      	adds	r3, r7, r3
   22ab2:	781b      	ldrb	r3, [r3, #0]
   22ab4:	2204      	movs	r2, #4
   22ab6:	4013      	ands	r3, r2
   22ab8:	d007      	beq.n	22aca <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   22aba:	69bb      	ldr	r3, [r7, #24]
   22abc:	2232      	movs	r2, #50	; 0x32
   22abe:	211e      	movs	r1, #30
   22ac0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   22ac2:	697b      	ldr	r3, [r7, #20]
   22ac4:	2204      	movs	r2, #4
   22ac6:	835a      	strh	r2, [r3, #26]
   22ac8:	e028      	b.n	22b1c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   22aca:	231f      	movs	r3, #31
   22acc:	18fb      	adds	r3, r7, r3
   22ace:	781b      	ldrb	r3, [r3, #0]
   22ad0:	2201      	movs	r2, #1
   22ad2:	4013      	ands	r3, r2
   22ad4:	d007      	beq.n	22ae6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   22ad6:	69bb      	ldr	r3, [r7, #24]
   22ad8:	2232      	movs	r2, #50	; 0x32
   22ada:	2113      	movs	r1, #19
   22adc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   22ade:	697b      	ldr	r3, [r7, #20]
   22ae0:	2201      	movs	r2, #1
   22ae2:	835a      	strh	r2, [r3, #26]
   22ae4:	e01a      	b.n	22b1c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   22ae6:	231f      	movs	r3, #31
   22ae8:	18fb      	adds	r3, r7, r3
   22aea:	781b      	ldrb	r3, [r3, #0]
   22aec:	2210      	movs	r2, #16
   22aee:	4013      	ands	r3, r2
   22af0:	d007      	beq.n	22b02 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   22af2:	69bb      	ldr	r3, [r7, #24]
   22af4:	2232      	movs	r2, #50	; 0x32
   22af6:	2142      	movs	r1, #66	; 0x42
   22af8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   22afa:	697b      	ldr	r3, [r7, #20]
   22afc:	2210      	movs	r2, #16
   22afe:	835a      	strh	r2, [r3, #26]
   22b00:	e00c      	b.n	22b1c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   22b02:	231f      	movs	r3, #31
   22b04:	18fb      	adds	r3, r7, r3
   22b06:	781b      	ldrb	r3, [r3, #0]
   22b08:	2220      	movs	r2, #32
   22b0a:	4013      	ands	r3, r2
   22b0c:	d006      	beq.n	22b1c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   22b0e:	69bb      	ldr	r3, [r7, #24]
   22b10:	2232      	movs	r2, #50	; 0x32
   22b12:	2141      	movs	r1, #65	; 0x41
   22b14:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   22b16:	697b      	ldr	r3, [r7, #20]
   22b18:	2220      	movs	r2, #32
   22b1a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   22b1c:	2310      	movs	r3, #16
   22b1e:	18fb      	adds	r3, r7, r3
   22b20:	881b      	ldrh	r3, [r3, #0]
   22b22:	2204      	movs	r2, #4
   22b24:	4013      	ands	r3, r2
				if (callback_status
   22b26:	d050      	beq.n	22bca <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   22b28:	69bb      	ldr	r3, [r7, #24]
   22b2a:	695b      	ldr	r3, [r3, #20]
   22b2c:	69ba      	ldr	r2, [r7, #24]
   22b2e:	0010      	movs	r0, r2
   22b30:	4798      	blx	r3
   22b32:	e04a      	b.n	22bca <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   22b34:	697b      	ldr	r3, [r7, #20]
   22b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   22b38:	b29a      	uxth	r2, r3
   22b3a:	230e      	movs	r3, #14
   22b3c:	18fb      	adds	r3, r7, r3
   22b3e:	05d2      	lsls	r2, r2, #23
   22b40:	0dd2      	lsrs	r2, r2, #23
   22b42:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   22b44:	69bb      	ldr	r3, [r7, #24]
   22b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22b48:	220e      	movs	r2, #14
   22b4a:	18ba      	adds	r2, r7, r2
   22b4c:	8812      	ldrh	r2, [r2, #0]
   22b4e:	b2d2      	uxtb	r2, r2
   22b50:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   22b52:	69bb      	ldr	r3, [r7, #24]
   22b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22b56:	1c5a      	adds	r2, r3, #1
   22b58:	69bb      	ldr	r3, [r7, #24]
   22b5a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   22b5c:	69bb      	ldr	r3, [r7, #24]
   22b5e:	795b      	ldrb	r3, [r3, #5]
   22b60:	2b01      	cmp	r3, #1
   22b62:	d10d      	bne.n	22b80 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   22b64:	69bb      	ldr	r3, [r7, #24]
   22b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22b68:	220e      	movs	r2, #14
   22b6a:	18ba      	adds	r2, r7, r2
   22b6c:	8812      	ldrh	r2, [r2, #0]
   22b6e:	0a12      	lsrs	r2, r2, #8
   22b70:	b292      	uxth	r2, r2
   22b72:	b2d2      	uxtb	r2, r2
   22b74:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   22b76:	69bb      	ldr	r3, [r7, #24]
   22b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22b7a:	1c5a      	adds	r2, r3, #1
   22b7c:	69bb      	ldr	r3, [r7, #24]
   22b7e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   22b80:	69bb      	ldr	r3, [r7, #24]
   22b82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   22b84:	b29b      	uxth	r3, r3
   22b86:	3b01      	subs	r3, #1
   22b88:	b29b      	uxth	r3, r3
   22b8a:	69ba      	ldr	r2, [r7, #24]
   22b8c:	1c19      	adds	r1, r3, #0
   22b8e:	8591      	strh	r1, [r2, #44]	; 0x2c
   22b90:	2b00      	cmp	r3, #0
   22b92:	d11a      	bne.n	22bca <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22b94:	697b      	ldr	r3, [r7, #20]
   22b96:	2204      	movs	r2, #4
   22b98:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   22b9a:	69bb      	ldr	r3, [r7, #24]
   22b9c:	2232      	movs	r2, #50	; 0x32
   22b9e:	2100      	movs	r1, #0
   22ba0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   22ba2:	2310      	movs	r3, #16
   22ba4:	18fb      	adds	r3, r7, r3
   22ba6:	881b      	ldrh	r3, [r3, #0]
   22ba8:	2202      	movs	r2, #2
   22baa:	4013      	ands	r3, r2
					if (callback_status
   22bac:	d00d      	beq.n	22bca <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   22bae:	69bb      	ldr	r3, [r7, #24]
   22bb0:	691b      	ldr	r3, [r3, #16]
   22bb2:	69ba      	ldr	r2, [r7, #24]
   22bb4:	0010      	movs	r0, r2
   22bb6:	4798      	blx	r3
   22bb8:	e007      	b.n	22bca <_usart_interrupt_handler+0x2ae>
   22bba:	46c0      	nop			; (mov r8, r8)
   22bbc:	20000b78 	.word	0x20000b78
   22bc0:	000228f9 	.word	0x000228f9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   22bc4:	697b      	ldr	r3, [r7, #20]
   22bc6:	2204      	movs	r2, #4
   22bc8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   22bca:	2312      	movs	r3, #18
   22bcc:	18fb      	adds	r3, r7, r3
   22bce:	881b      	ldrh	r3, [r3, #0]
   22bd0:	2210      	movs	r2, #16
   22bd2:	4013      	ands	r3, r2
   22bd4:	d010      	beq.n	22bf8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   22bd6:	697b      	ldr	r3, [r7, #20]
   22bd8:	2210      	movs	r2, #16
   22bda:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   22bdc:	697b      	ldr	r3, [r7, #20]
   22bde:	2210      	movs	r2, #16
   22be0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   22be2:	2310      	movs	r3, #16
   22be4:	18fb      	adds	r3, r7, r3
   22be6:	881b      	ldrh	r3, [r3, #0]
   22be8:	2210      	movs	r2, #16
   22bea:	4013      	ands	r3, r2
   22bec:	d004      	beq.n	22bf8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   22bee:	69bb      	ldr	r3, [r7, #24]
   22bf0:	69db      	ldr	r3, [r3, #28]
   22bf2:	69ba      	ldr	r2, [r7, #24]
   22bf4:	0010      	movs	r0, r2
   22bf6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   22bf8:	2312      	movs	r3, #18
   22bfa:	18fb      	adds	r3, r7, r3
   22bfc:	881b      	ldrh	r3, [r3, #0]
   22bfe:	2220      	movs	r2, #32
   22c00:	4013      	ands	r3, r2
   22c02:	d010      	beq.n	22c26 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   22c04:	697b      	ldr	r3, [r7, #20]
   22c06:	2220      	movs	r2, #32
   22c08:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   22c0a:	697b      	ldr	r3, [r7, #20]
   22c0c:	2220      	movs	r2, #32
   22c0e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   22c10:	2310      	movs	r3, #16
   22c12:	18fb      	adds	r3, r7, r3
   22c14:	881b      	ldrh	r3, [r3, #0]
   22c16:	2208      	movs	r2, #8
   22c18:	4013      	ands	r3, r2
   22c1a:	d004      	beq.n	22c26 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   22c1c:	69bb      	ldr	r3, [r7, #24]
   22c1e:	699b      	ldr	r3, [r3, #24]
   22c20:	69ba      	ldr	r2, [r7, #24]
   22c22:	0010      	movs	r0, r2
   22c24:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   22c26:	2312      	movs	r3, #18
   22c28:	18fb      	adds	r3, r7, r3
   22c2a:	881b      	ldrh	r3, [r3, #0]
   22c2c:	2208      	movs	r2, #8
   22c2e:	4013      	ands	r3, r2
   22c30:	d010      	beq.n	22c54 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   22c32:	697b      	ldr	r3, [r7, #20]
   22c34:	2208      	movs	r2, #8
   22c36:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   22c38:	697b      	ldr	r3, [r7, #20]
   22c3a:	2208      	movs	r2, #8
   22c3c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   22c3e:	2310      	movs	r3, #16
   22c40:	18fb      	adds	r3, r7, r3
   22c42:	881b      	ldrh	r3, [r3, #0]
   22c44:	2220      	movs	r2, #32
   22c46:	4013      	ands	r3, r2
   22c48:	d004      	beq.n	22c54 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   22c4a:	69bb      	ldr	r3, [r7, #24]
   22c4c:	6a1b      	ldr	r3, [r3, #32]
   22c4e:	69ba      	ldr	r2, [r7, #24]
   22c50:	0010      	movs	r0, r2
   22c52:	4798      	blx	r3
		}
	}
#endif
}
   22c54:	46c0      	nop			; (mov r8, r8)
   22c56:	46bd      	mov	sp, r7
   22c58:	b008      	add	sp, #32
   22c5a:	bd80      	pop	{r7, pc}

00022c5c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   22c5c:	b580      	push	{r7, lr}
   22c5e:	b082      	sub	sp, #8
   22c60:	af00      	add	r7, sp, #0
   22c62:	0002      	movs	r2, r0
   22c64:	1dfb      	adds	r3, r7, #7
   22c66:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   22c68:	46c0      	nop			; (mov r8, r8)
   22c6a:	46bd      	mov	sp, r7
   22c6c:	b002      	add	sp, #8
   22c6e:	bd80      	pop	{r7, pc}

00022c70 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   22c70:	b580      	push	{r7, lr}
   22c72:	b084      	sub	sp, #16
   22c74:	af00      	add	r7, sp, #0
   22c76:	0002      	movs	r2, r0
   22c78:	6039      	str	r1, [r7, #0]
   22c7a:	1dfb      	adds	r3, r7, #7
   22c7c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   22c7e:	4b13      	ldr	r3, [pc, #76]	; (22ccc <_sercom_set_handler+0x5c>)
   22c80:	781b      	ldrb	r3, [r3, #0]
   22c82:	2201      	movs	r2, #1
   22c84:	4053      	eors	r3, r2
   22c86:	b2db      	uxtb	r3, r3
   22c88:	2b00      	cmp	r3, #0
   22c8a:	d015      	beq.n	22cb8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   22c8c:	2300      	movs	r3, #0
   22c8e:	60fb      	str	r3, [r7, #12]
   22c90:	e00c      	b.n	22cac <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   22c92:	4b0f      	ldr	r3, [pc, #60]	; (22cd0 <_sercom_set_handler+0x60>)
   22c94:	68fa      	ldr	r2, [r7, #12]
   22c96:	0092      	lsls	r2, r2, #2
   22c98:	490e      	ldr	r1, [pc, #56]	; (22cd4 <_sercom_set_handler+0x64>)
   22c9a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   22c9c:	4b0e      	ldr	r3, [pc, #56]	; (22cd8 <_sercom_set_handler+0x68>)
   22c9e:	68fa      	ldr	r2, [r7, #12]
   22ca0:	0092      	lsls	r2, r2, #2
   22ca2:	2100      	movs	r1, #0
   22ca4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   22ca6:	68fb      	ldr	r3, [r7, #12]
   22ca8:	3301      	adds	r3, #1
   22caa:	60fb      	str	r3, [r7, #12]
   22cac:	68fb      	ldr	r3, [r7, #12]
   22cae:	2b05      	cmp	r3, #5
   22cb0:	d9ef      	bls.n	22c92 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   22cb2:	4b06      	ldr	r3, [pc, #24]	; (22ccc <_sercom_set_handler+0x5c>)
   22cb4:	2201      	movs	r2, #1
   22cb6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   22cb8:	1dfb      	adds	r3, r7, #7
   22cba:	781a      	ldrb	r2, [r3, #0]
   22cbc:	4b04      	ldr	r3, [pc, #16]	; (22cd0 <_sercom_set_handler+0x60>)
   22cbe:	0092      	lsls	r2, r2, #2
   22cc0:	6839      	ldr	r1, [r7, #0]
   22cc2:	50d1      	str	r1, [r2, r3]
}
   22cc4:	46c0      	nop			; (mov r8, r8)
   22cc6:	46bd      	mov	sp, r7
   22cc8:	b004      	add	sp, #16
   22cca:	bd80      	pop	{r7, pc}
   22ccc:	200005f8 	.word	0x200005f8
   22cd0:	200005fc 	.word	0x200005fc
   22cd4:	00022c5d 	.word	0x00022c5d
   22cd8:	20000b78 	.word	0x20000b78

00022cdc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   22cdc:	b590      	push	{r4, r7, lr}
   22cde:	b085      	sub	sp, #20
   22ce0:	af00      	add	r7, sp, #0
   22ce2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   22ce4:	2308      	movs	r3, #8
   22ce6:	18fb      	adds	r3, r7, r3
   22ce8:	4a0b      	ldr	r2, [pc, #44]	; (22d18 <_sercom_get_interrupt_vector+0x3c>)
   22cea:	6811      	ldr	r1, [r2, #0]
   22cec:	6019      	str	r1, [r3, #0]
   22cee:	8892      	ldrh	r2, [r2, #4]
   22cf0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   22cf2:	230f      	movs	r3, #15
   22cf4:	18fc      	adds	r4, r7, r3
   22cf6:	687b      	ldr	r3, [r7, #4]
   22cf8:	0018      	movs	r0, r3
   22cfa:	4b08      	ldr	r3, [pc, #32]	; (22d1c <_sercom_get_interrupt_vector+0x40>)
   22cfc:	4798      	blx	r3
   22cfe:	0003      	movs	r3, r0
   22d00:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   22d02:	230f      	movs	r3, #15
   22d04:	18fb      	adds	r3, r7, r3
   22d06:	781b      	ldrb	r3, [r3, #0]
   22d08:	2208      	movs	r2, #8
   22d0a:	18ba      	adds	r2, r7, r2
   22d0c:	5cd3      	ldrb	r3, [r2, r3]
   22d0e:	b25b      	sxtb	r3, r3
}
   22d10:	0018      	movs	r0, r3
   22d12:	46bd      	mov	sp, r7
   22d14:	b005      	add	sp, #20
   22d16:	bd90      	pop	{r4, r7, pc}
   22d18:	0002b518 	.word	0x0002b518
   22d1c:	0001f595 	.word	0x0001f595

00022d20 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   22d20:	b580      	push	{r7, lr}
   22d22:	af00      	add	r7, sp, #0
   22d24:	4b03      	ldr	r3, [pc, #12]	; (22d34 <SERCOM0_Handler+0x14>)
   22d26:	681b      	ldr	r3, [r3, #0]
   22d28:	2000      	movs	r0, #0
   22d2a:	4798      	blx	r3
   22d2c:	46c0      	nop			; (mov r8, r8)
   22d2e:	46bd      	mov	sp, r7
   22d30:	bd80      	pop	{r7, pc}
   22d32:	46c0      	nop			; (mov r8, r8)
   22d34:	200005fc 	.word	0x200005fc

00022d38 <SERCOM1_Handler>:
   22d38:	b580      	push	{r7, lr}
   22d3a:	af00      	add	r7, sp, #0
   22d3c:	4b03      	ldr	r3, [pc, #12]	; (22d4c <SERCOM1_Handler+0x14>)
   22d3e:	685b      	ldr	r3, [r3, #4]
   22d40:	2001      	movs	r0, #1
   22d42:	4798      	blx	r3
   22d44:	46c0      	nop			; (mov r8, r8)
   22d46:	46bd      	mov	sp, r7
   22d48:	bd80      	pop	{r7, pc}
   22d4a:	46c0      	nop			; (mov r8, r8)
   22d4c:	200005fc 	.word	0x200005fc

00022d50 <SERCOM2_Handler>:
   22d50:	b580      	push	{r7, lr}
   22d52:	af00      	add	r7, sp, #0
   22d54:	4b03      	ldr	r3, [pc, #12]	; (22d64 <SERCOM2_Handler+0x14>)
   22d56:	689b      	ldr	r3, [r3, #8]
   22d58:	2002      	movs	r0, #2
   22d5a:	4798      	blx	r3
   22d5c:	46c0      	nop			; (mov r8, r8)
   22d5e:	46bd      	mov	sp, r7
   22d60:	bd80      	pop	{r7, pc}
   22d62:	46c0      	nop			; (mov r8, r8)
   22d64:	200005fc 	.word	0x200005fc

00022d68 <SERCOM3_Handler>:
   22d68:	b580      	push	{r7, lr}
   22d6a:	af00      	add	r7, sp, #0
   22d6c:	4b03      	ldr	r3, [pc, #12]	; (22d7c <SERCOM3_Handler+0x14>)
   22d6e:	68db      	ldr	r3, [r3, #12]
   22d70:	2003      	movs	r0, #3
   22d72:	4798      	blx	r3
   22d74:	46c0      	nop			; (mov r8, r8)
   22d76:	46bd      	mov	sp, r7
   22d78:	bd80      	pop	{r7, pc}
   22d7a:	46c0      	nop			; (mov r8, r8)
   22d7c:	200005fc 	.word	0x200005fc

00022d80 <SERCOM4_Handler>:
   22d80:	b580      	push	{r7, lr}
   22d82:	af00      	add	r7, sp, #0
   22d84:	4b03      	ldr	r3, [pc, #12]	; (22d94 <SERCOM4_Handler+0x14>)
   22d86:	691b      	ldr	r3, [r3, #16]
   22d88:	2004      	movs	r0, #4
   22d8a:	4798      	blx	r3
   22d8c:	46c0      	nop			; (mov r8, r8)
   22d8e:	46bd      	mov	sp, r7
   22d90:	bd80      	pop	{r7, pc}
   22d92:	46c0      	nop			; (mov r8, r8)
   22d94:	200005fc 	.word	0x200005fc

00022d98 <SERCOM5_Handler>:
   22d98:	b580      	push	{r7, lr}
   22d9a:	af00      	add	r7, sp, #0
   22d9c:	4b03      	ldr	r3, [pc, #12]	; (22dac <SERCOM5_Handler+0x14>)
   22d9e:	695b      	ldr	r3, [r3, #20]
   22da0:	2005      	movs	r0, #5
   22da2:	4798      	blx	r3
   22da4:	46c0      	nop			; (mov r8, r8)
   22da6:	46bd      	mov	sp, r7
   22da8:	bd80      	pop	{r7, pc}
   22daa:	46c0      	nop			; (mov r8, r8)
   22dac:	200005fc 	.word	0x200005fc

00022db0 <_extint_get_eic_from_channel>:
{
   22db0:	b580      	push	{r7, lr}
   22db2:	b084      	sub	sp, #16
   22db4:	af00      	add	r7, sp, #0
   22db6:	0002      	movs	r2, r0
   22db8:	1dfb      	adds	r3, r7, #7
   22dba:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   22dbc:	230f      	movs	r3, #15
   22dbe:	18fb      	adds	r3, r7, r3
   22dc0:	1dfa      	adds	r2, r7, #7
   22dc2:	7812      	ldrb	r2, [r2, #0]
   22dc4:	0952      	lsrs	r2, r2, #5
   22dc6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   22dc8:	230f      	movs	r3, #15
   22dca:	18fb      	adds	r3, r7, r3
   22dcc:	781b      	ldrb	r3, [r3, #0]
   22dce:	2b00      	cmp	r3, #0
   22dd0:	d10c      	bne.n	22dec <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   22dd2:	4b09      	ldr	r3, [pc, #36]	; (22df8 <_extint_get_eic_from_channel+0x48>)
   22dd4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   22dd6:	230f      	movs	r3, #15
   22dd8:	18fb      	adds	r3, r7, r3
   22dda:	781b      	ldrb	r3, [r3, #0]
   22ddc:	009b      	lsls	r3, r3, #2
   22dde:	2210      	movs	r2, #16
   22de0:	4694      	mov	ip, r2
   22de2:	44bc      	add	ip, r7
   22de4:	4463      	add	r3, ip
   22de6:	3b08      	subs	r3, #8
   22de8:	681b      	ldr	r3, [r3, #0]
   22dea:	e000      	b.n	22dee <_extint_get_eic_from_channel+0x3e>
		return NULL;
   22dec:	2300      	movs	r3, #0
}
   22dee:	0018      	movs	r0, r3
   22df0:	46bd      	mov	sp, r7
   22df2:	b004      	add	sp, #16
   22df4:	bd80      	pop	{r7, pc}
   22df6:	46c0      	nop			; (mov r8, r8)
   22df8:	40001800 	.word	0x40001800

00022dfc <extint_chan_is_detected>:
{
   22dfc:	b580      	push	{r7, lr}
   22dfe:	b084      	sub	sp, #16
   22e00:	af00      	add	r7, sp, #0
   22e02:	0002      	movs	r2, r0
   22e04:	1dfb      	adds	r3, r7, #7
   22e06:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22e08:	1dfb      	adds	r3, r7, #7
   22e0a:	781b      	ldrb	r3, [r3, #0]
   22e0c:	0018      	movs	r0, r3
   22e0e:	4b0b      	ldr	r3, [pc, #44]	; (22e3c <extint_chan_is_detected+0x40>)
   22e10:	4798      	blx	r3
   22e12:	0003      	movs	r3, r0
   22e14:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22e16:	1dfb      	adds	r3, r7, #7
   22e18:	781b      	ldrb	r3, [r3, #0]
   22e1a:	221f      	movs	r2, #31
   22e1c:	4013      	ands	r3, r2
   22e1e:	2201      	movs	r2, #1
   22e20:	409a      	lsls	r2, r3
   22e22:	0013      	movs	r3, r2
   22e24:	60bb      	str	r3, [r7, #8]
	return (eic_module->INTFLAG.reg & eic_mask);
   22e26:	68fb      	ldr	r3, [r7, #12]
   22e28:	691b      	ldr	r3, [r3, #16]
   22e2a:	68ba      	ldr	r2, [r7, #8]
   22e2c:	4013      	ands	r3, r2
   22e2e:	1e5a      	subs	r2, r3, #1
   22e30:	4193      	sbcs	r3, r2
   22e32:	b2db      	uxtb	r3, r3
}
   22e34:	0018      	movs	r0, r3
   22e36:	46bd      	mov	sp, r7
   22e38:	b004      	add	sp, #16
   22e3a:	bd80      	pop	{r7, pc}
   22e3c:	00022db1 	.word	0x00022db1

00022e40 <extint_chan_clear_detected>:
{
   22e40:	b580      	push	{r7, lr}
   22e42:	b084      	sub	sp, #16
   22e44:	af00      	add	r7, sp, #0
   22e46:	0002      	movs	r2, r0
   22e48:	1dfb      	adds	r3, r7, #7
   22e4a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   22e4c:	1dfb      	adds	r3, r7, #7
   22e4e:	781b      	ldrb	r3, [r3, #0]
   22e50:	0018      	movs	r0, r3
   22e52:	4b09      	ldr	r3, [pc, #36]	; (22e78 <extint_chan_clear_detected+0x38>)
   22e54:	4798      	blx	r3
   22e56:	0003      	movs	r3, r0
   22e58:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   22e5a:	1dfb      	adds	r3, r7, #7
   22e5c:	781b      	ldrb	r3, [r3, #0]
   22e5e:	221f      	movs	r2, #31
   22e60:	4013      	ands	r3, r2
   22e62:	2201      	movs	r2, #1
   22e64:	409a      	lsls	r2, r3
   22e66:	0013      	movs	r3, r2
   22e68:	60bb      	str	r3, [r7, #8]
	eic_module->INTFLAG.reg = eic_mask;
   22e6a:	68fb      	ldr	r3, [r7, #12]
   22e6c:	68ba      	ldr	r2, [r7, #8]
   22e6e:	611a      	str	r2, [r3, #16]
}
   22e70:	46c0      	nop			; (mov r8, r8)
   22e72:	46bd      	mov	sp, r7
   22e74:	b004      	add	sp, #16
   22e76:	bd80      	pop	{r7, pc}
   22e78:	00022db1 	.word	0x00022db1

00022e7c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22e7c:	b580      	push	{r7, lr}
   22e7e:	b082      	sub	sp, #8
   22e80:	af00      	add	r7, sp, #0
   22e82:	6078      	str	r0, [r7, #4]
   22e84:	0008      	movs	r0, r1
   22e86:	0011      	movs	r1, r2
   22e88:	1cfb      	adds	r3, r7, #3
   22e8a:	1c02      	adds	r2, r0, #0
   22e8c:	701a      	strb	r2, [r3, #0]
   22e8e:	1cbb      	adds	r3, r7, #2
   22e90:	1c0a      	adds	r2, r1, #0
   22e92:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   22e94:	1cbb      	adds	r3, r7, #2
   22e96:	781b      	ldrb	r3, [r3, #0]
   22e98:	2b00      	cmp	r3, #0
   22e9a:	d001      	beq.n	22ea0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   22e9c:	2317      	movs	r3, #23
   22e9e:	e019      	b.n	22ed4 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   22ea0:	1cfb      	adds	r3, r7, #3
   22ea2:	781a      	ldrb	r2, [r3, #0]
   22ea4:	4b0d      	ldr	r3, [pc, #52]	; (22edc <extint_register_callback+0x60>)
   22ea6:	0092      	lsls	r2, r2, #2
   22ea8:	58d3      	ldr	r3, [r2, r3]
   22eaa:	2b00      	cmp	r3, #0
   22eac:	d107      	bne.n	22ebe <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   22eae:	1cfb      	adds	r3, r7, #3
   22eb0:	781a      	ldrb	r2, [r3, #0]
   22eb2:	4b0a      	ldr	r3, [pc, #40]	; (22edc <extint_register_callback+0x60>)
   22eb4:	0092      	lsls	r2, r2, #2
   22eb6:	6879      	ldr	r1, [r7, #4]
   22eb8:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   22eba:	2300      	movs	r3, #0
   22ebc:	e00a      	b.n	22ed4 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   22ebe:	1cfb      	adds	r3, r7, #3
   22ec0:	781a      	ldrb	r2, [r3, #0]
   22ec2:	4b06      	ldr	r3, [pc, #24]	; (22edc <extint_register_callback+0x60>)
   22ec4:	0092      	lsls	r2, r2, #2
   22ec6:	58d2      	ldr	r2, [r2, r3]
   22ec8:	687b      	ldr	r3, [r7, #4]
   22eca:	429a      	cmp	r2, r3
   22ecc:	d101      	bne.n	22ed2 <extint_register_callback+0x56>
		return STATUS_OK;
   22ece:	2300      	movs	r3, #0
   22ed0:	e000      	b.n	22ed4 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   22ed2:	231d      	movs	r3, #29
}
   22ed4:	0018      	movs	r0, r3
   22ed6:	46bd      	mov	sp, r7
   22ed8:	b002      	add	sp, #8
   22eda:	bd80      	pop	{r7, pc}
   22edc:	20000b10 	.word	0x20000b10

00022ee0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   22ee0:	b580      	push	{r7, lr}
   22ee2:	b084      	sub	sp, #16
   22ee4:	af00      	add	r7, sp, #0
   22ee6:	0002      	movs	r2, r0
   22ee8:	1dfb      	adds	r3, r7, #7
   22eea:	701a      	strb	r2, [r3, #0]
   22eec:	1dbb      	adds	r3, r7, #6
   22eee:	1c0a      	adds	r2, r1, #0
   22ef0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   22ef2:	1dbb      	adds	r3, r7, #6
   22ef4:	781b      	ldrb	r3, [r3, #0]
   22ef6:	2b00      	cmp	r3, #0
   22ef8:	d10e      	bne.n	22f18 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   22efa:	1dfb      	adds	r3, r7, #7
   22efc:	781b      	ldrb	r3, [r3, #0]
   22efe:	0018      	movs	r0, r3
   22f00:	4b08      	ldr	r3, [pc, #32]	; (22f24 <extint_chan_enable_callback+0x44>)
   22f02:	4798      	blx	r3
   22f04:	0003      	movs	r3, r0
   22f06:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   22f08:	1dfb      	adds	r3, r7, #7
   22f0a:	781b      	ldrb	r3, [r3, #0]
   22f0c:	2201      	movs	r2, #1
   22f0e:	409a      	lsls	r2, r3
   22f10:	68fb      	ldr	r3, [r7, #12]
   22f12:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   22f14:	2300      	movs	r3, #0
   22f16:	e000      	b.n	22f1a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   22f18:	2317      	movs	r3, #23
}
   22f1a:	0018      	movs	r0, r3
   22f1c:	46bd      	mov	sp, r7
   22f1e:	b004      	add	sp, #16
   22f20:	bd80      	pop	{r7, pc}
   22f22:	46c0      	nop			; (mov r8, r8)
   22f24:	00022db1 	.word	0x00022db1

00022f28 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   22f28:	b580      	push	{r7, lr}
   22f2a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   22f2c:	4b15      	ldr	r3, [pc, #84]	; (22f84 <EIC_Handler+0x5c>)
   22f2e:	2200      	movs	r2, #0
   22f30:	701a      	strb	r2, [r3, #0]
   22f32:	e020      	b.n	22f76 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   22f34:	4b13      	ldr	r3, [pc, #76]	; (22f84 <EIC_Handler+0x5c>)
   22f36:	781b      	ldrb	r3, [r3, #0]
   22f38:	0018      	movs	r0, r3
   22f3a:	4b13      	ldr	r3, [pc, #76]	; (22f88 <EIC_Handler+0x60>)
   22f3c:	4798      	blx	r3
   22f3e:	1e03      	subs	r3, r0, #0
   22f40:	d013      	beq.n	22f6a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   22f42:	4b10      	ldr	r3, [pc, #64]	; (22f84 <EIC_Handler+0x5c>)
   22f44:	781b      	ldrb	r3, [r3, #0]
   22f46:	0018      	movs	r0, r3
   22f48:	4b10      	ldr	r3, [pc, #64]	; (22f8c <EIC_Handler+0x64>)
   22f4a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   22f4c:	4b0d      	ldr	r3, [pc, #52]	; (22f84 <EIC_Handler+0x5c>)
   22f4e:	781b      	ldrb	r3, [r3, #0]
   22f50:	001a      	movs	r2, r3
   22f52:	4b0f      	ldr	r3, [pc, #60]	; (22f90 <EIC_Handler+0x68>)
   22f54:	0092      	lsls	r2, r2, #2
   22f56:	58d3      	ldr	r3, [r2, r3]
   22f58:	2b00      	cmp	r3, #0
   22f5a:	d006      	beq.n	22f6a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   22f5c:	4b09      	ldr	r3, [pc, #36]	; (22f84 <EIC_Handler+0x5c>)
   22f5e:	781b      	ldrb	r3, [r3, #0]
   22f60:	001a      	movs	r2, r3
   22f62:	4b0b      	ldr	r3, [pc, #44]	; (22f90 <EIC_Handler+0x68>)
   22f64:	0092      	lsls	r2, r2, #2
   22f66:	58d3      	ldr	r3, [r2, r3]
   22f68:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   22f6a:	4b06      	ldr	r3, [pc, #24]	; (22f84 <EIC_Handler+0x5c>)
   22f6c:	781b      	ldrb	r3, [r3, #0]
   22f6e:	3301      	adds	r3, #1
   22f70:	b2da      	uxtb	r2, r3
   22f72:	4b04      	ldr	r3, [pc, #16]	; (22f84 <EIC_Handler+0x5c>)
   22f74:	701a      	strb	r2, [r3, #0]
   22f76:	4b03      	ldr	r3, [pc, #12]	; (22f84 <EIC_Handler+0x5c>)
   22f78:	781b      	ldrb	r3, [r3, #0]
   22f7a:	2b0f      	cmp	r3, #15
   22f7c:	d9da      	bls.n	22f34 <EIC_Handler+0xc>
			}
		}
	}
}
   22f7e:	46c0      	nop			; (mov r8, r8)
   22f80:	46bd      	mov	sp, r7
   22f82:	bd80      	pop	{r7, pc}
   22f84:	20000b90 	.word	0x20000b90
   22f88:	00022dfd 	.word	0x00022dfd
   22f8c:	00022e41 	.word	0x00022e41
   22f90:	20000b10 	.word	0x20000b10

00022f94 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   22f94:	b580      	push	{r7, lr}
   22f96:	b082      	sub	sp, #8
   22f98:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   22f9a:	4b15      	ldr	r3, [pc, #84]	; (22ff0 <EVSYS_Handler+0x5c>)
   22f9c:	691b      	ldr	r3, [r3, #16]
   22f9e:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   22fa0:	4b14      	ldr	r3, [pc, #80]	; (22ff4 <EVSYS_Handler+0x60>)
   22fa2:	699b      	ldr	r3, [r3, #24]
   22fa4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   22fa6:	4b12      	ldr	r3, [pc, #72]	; (22ff0 <EVSYS_Handler+0x5c>)
   22fa8:	689a      	ldr	r2, [r3, #8]
   22faa:	683b      	ldr	r3, [r7, #0]
   22fac:	431a      	orrs	r2, r3
   22fae:	4b10      	ldr	r3, [pc, #64]	; (22ff0 <EVSYS_Handler+0x5c>)
   22fb0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   22fb2:	4b10      	ldr	r3, [pc, #64]	; (22ff4 <EVSYS_Handler+0x60>)
   22fb4:	4a10      	ldr	r2, [pc, #64]	; (22ff8 <EVSYS_Handler+0x64>)
   22fb6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   22fb8:	e008      	b.n	22fcc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   22fba:	687b      	ldr	r3, [r7, #4]
   22fbc:	685a      	ldr	r2, [r3, #4]
   22fbe:	687b      	ldr	r3, [r7, #4]
   22fc0:	681b      	ldr	r3, [r3, #0]
   22fc2:	0018      	movs	r0, r3
   22fc4:	4790      	blx	r2
		current_hook = current_hook->next;
   22fc6:	687b      	ldr	r3, [r7, #4]
   22fc8:	689b      	ldr	r3, [r3, #8]
   22fca:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   22fcc:	687b      	ldr	r3, [r7, #4]
   22fce:	2b00      	cmp	r3, #0
   22fd0:	d1f3      	bne.n	22fba <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   22fd2:	4b07      	ldr	r3, [pc, #28]	; (22ff0 <EVSYS_Handler+0x5c>)
   22fd4:	68db      	ldr	r3, [r3, #12]
   22fd6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   22fd8:	4b05      	ldr	r3, [pc, #20]	; (22ff0 <EVSYS_Handler+0x5c>)
   22fda:	689b      	ldr	r3, [r3, #8]
   22fdc:	683a      	ldr	r2, [r7, #0]
   22fde:	43d2      	mvns	r2, r2
   22fe0:	401a      	ands	r2, r3
   22fe2:	4b03      	ldr	r3, [pc, #12]	; (22ff0 <EVSYS_Handler+0x5c>)
   22fe4:	609a      	str	r2, [r3, #8]
}
   22fe6:	46c0      	nop			; (mov r8, r8)
   22fe8:	46bd      	mov	sp, r7
   22fea:	b002      	add	sp, #8
   22fec:	bd80      	pop	{r7, pc}
   22fee:	46c0      	nop			; (mov r8, r8)
   22ff0:	20000014 	.word	0x20000014
   22ff4:	42000400 	.word	0x42000400
   22ff8:	0f0fffff 	.word	0x0f0fffff

00022ffc <system_apb_clock_set_mask>:
{
   22ffc:	b580      	push	{r7, lr}
   22ffe:	b082      	sub	sp, #8
   23000:	af00      	add	r7, sp, #0
   23002:	0002      	movs	r2, r0
   23004:	6039      	str	r1, [r7, #0]
   23006:	1dfb      	adds	r3, r7, #7
   23008:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2300a:	1dfb      	adds	r3, r7, #7
   2300c:	781b      	ldrb	r3, [r3, #0]
   2300e:	2b01      	cmp	r3, #1
   23010:	d00a      	beq.n	23028 <system_apb_clock_set_mask+0x2c>
   23012:	2b02      	cmp	r3, #2
   23014:	d00f      	beq.n	23036 <system_apb_clock_set_mask+0x3a>
   23016:	2b00      	cmp	r3, #0
   23018:	d114      	bne.n	23044 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2301a:	4b0e      	ldr	r3, [pc, #56]	; (23054 <system_apb_clock_set_mask+0x58>)
   2301c:	4a0d      	ldr	r2, [pc, #52]	; (23054 <system_apb_clock_set_mask+0x58>)
   2301e:	6991      	ldr	r1, [r2, #24]
   23020:	683a      	ldr	r2, [r7, #0]
   23022:	430a      	orrs	r2, r1
   23024:	619a      	str	r2, [r3, #24]
			break;
   23026:	e00f      	b.n	23048 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   23028:	4b0a      	ldr	r3, [pc, #40]	; (23054 <system_apb_clock_set_mask+0x58>)
   2302a:	4a0a      	ldr	r2, [pc, #40]	; (23054 <system_apb_clock_set_mask+0x58>)
   2302c:	69d1      	ldr	r1, [r2, #28]
   2302e:	683a      	ldr	r2, [r7, #0]
   23030:	430a      	orrs	r2, r1
   23032:	61da      	str	r2, [r3, #28]
			break;
   23034:	e008      	b.n	23048 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   23036:	4b07      	ldr	r3, [pc, #28]	; (23054 <system_apb_clock_set_mask+0x58>)
   23038:	4a06      	ldr	r2, [pc, #24]	; (23054 <system_apb_clock_set_mask+0x58>)
   2303a:	6a11      	ldr	r1, [r2, #32]
   2303c:	683a      	ldr	r2, [r7, #0]
   2303e:	430a      	orrs	r2, r1
   23040:	621a      	str	r2, [r3, #32]
			break;
   23042:	e001      	b.n	23048 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   23044:	2317      	movs	r3, #23
   23046:	e000      	b.n	2304a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   23048:	2300      	movs	r3, #0
}
   2304a:	0018      	movs	r0, r3
   2304c:	46bd      	mov	sp, r7
   2304e:	b002      	add	sp, #8
   23050:	bd80      	pop	{r7, pc}
   23052:	46c0      	nop			; (mov r8, r8)
   23054:	40000400 	.word	0x40000400

00023058 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   23058:	b580      	push	{r7, lr}
   2305a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   2305c:	2102      	movs	r1, #2
   2305e:	2002      	movs	r0, #2
   23060:	4b07      	ldr	r3, [pc, #28]	; (23080 <_system_events_init+0x28>)
   23062:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   23064:	4b07      	ldr	r3, [pc, #28]	; (23084 <_system_events_init+0x2c>)
   23066:	2201      	movs	r2, #1
   23068:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   2306a:	46c0      	nop			; (mov r8, r8)
   2306c:	4b05      	ldr	r3, [pc, #20]	; (23084 <_system_events_init+0x2c>)
   2306e:	781b      	ldrb	r3, [r3, #0]
   23070:	b2db      	uxtb	r3, r3
   23072:	001a      	movs	r2, r3
   23074:	2301      	movs	r3, #1
   23076:	4013      	ands	r3, r2
   23078:	d1f8      	bne.n	2306c <_system_events_init+0x14>
	}
}
   2307a:	46c0      	nop			; (mov r8, r8)
   2307c:	46bd      	mov	sp, r7
   2307e:	bd80      	pop	{r7, pc}
   23080:	00022ffd 	.word	0x00022ffd
   23084:	42000400 	.word	0x42000400

00023088 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   23088:	b580      	push	{r7, lr}
   2308a:	b084      	sub	sp, #16
   2308c:	af00      	add	r7, sp, #0
   2308e:	60f8      	str	r0, [r7, #12]
   23090:	60b9      	str	r1, [r7, #8]
   23092:	1dfb      	adds	r3, r7, #7
   23094:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   23096:	1dfb      	adds	r3, r7, #7
   23098:	781b      	ldrb	r3, [r3, #0]
   2309a:	68fa      	ldr	r2, [r7, #12]
   2309c:	009b      	lsls	r3, r3, #2
   2309e:	18d3      	adds	r3, r2, r3
   230a0:	3304      	adds	r3, #4
   230a2:	68ba      	ldr	r2, [r7, #8]
   230a4:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   230a6:	68fb      	ldr	r3, [r7, #12]
   230a8:	7e1b      	ldrb	r3, [r3, #24]
   230aa:	b25a      	sxtb	r2, r3
   230ac:	1dfb      	adds	r3, r7, #7
   230ae:	781b      	ldrb	r3, [r3, #0]
   230b0:	2101      	movs	r1, #1
   230b2:	4099      	lsls	r1, r3
   230b4:	000b      	movs	r3, r1
   230b6:	b25b      	sxtb	r3, r3
   230b8:	4313      	orrs	r3, r2
   230ba:	b25b      	sxtb	r3, r3
   230bc:	b2da      	uxtb	r2, r3
   230be:	68fb      	ldr	r3, [r7, #12]
   230c0:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   230c2:	2300      	movs	r3, #0
}
   230c4:	0018      	movs	r0, r3
   230c6:	46bd      	mov	sp, r7
   230c8:	b004      	add	sp, #16
   230ca:	bd80      	pop	{r7, pc}

000230cc <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   230cc:	b580      	push	{r7, lr}
   230ce:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   230d0:	2000      	movs	r0, #0
   230d2:	4b02      	ldr	r3, [pc, #8]	; (230dc <AC_Handler+0x10>)
   230d4:	4798      	blx	r3
}
   230d6:	46c0      	nop			; (mov r8, r8)
   230d8:	46bd      	mov	sp, r7
   230da:	bd80      	pop	{r7, pc}
   230dc:	000230e1 	.word	0x000230e1

000230e0 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   230e0:	b580      	push	{r7, lr}
   230e2:	b084      	sub	sp, #16
   230e4:	af00      	add	r7, sp, #0
   230e6:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   230e8:	4b23      	ldr	r3, [pc, #140]	; (23178 <_ac_interrupt_handler+0x98>)
   230ea:	687a      	ldr	r2, [r7, #4]
   230ec:	0092      	lsls	r2, r2, #2
   230ee:	58d3      	ldr	r3, [r2, r3]
   230f0:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   230f2:	4b21      	ldr	r3, [pc, #132]	; (23178 <_ac_interrupt_handler+0x98>)
   230f4:	687a      	ldr	r2, [r7, #4]
   230f6:	0092      	lsls	r2, r2, #2
   230f8:	58d3      	ldr	r3, [r2, r3]
   230fa:	681b      	ldr	r3, [r3, #0]
   230fc:	799b      	ldrb	r3, [r3, #6]
   230fe:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   23100:	68fb      	ldr	r3, [r7, #12]
   23102:	7e1b      	ldrb	r3, [r3, #24]
   23104:	68f9      	ldr	r1, [r7, #12]
   23106:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   23108:	400b      	ands	r3, r1
   2310a:	b2d9      	uxtb	r1, r3
   2310c:	230b      	movs	r3, #11
   2310e:	18fb      	adds	r3, r7, r3
   23110:	400a      	ands	r2, r1
   23112:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   23114:	230b      	movs	r3, #11
   23116:	18fb      	adds	r3, r7, r3
   23118:	781b      	ldrb	r3, [r3, #0]
   2311a:	2201      	movs	r2, #1
   2311c:	4013      	ands	r3, r2
   2311e:	d008      	beq.n	23132 <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   23120:	68fb      	ldr	r3, [r7, #12]
   23122:	685b      	ldr	r3, [r3, #4]
   23124:	68fa      	ldr	r2, [r7, #12]
   23126:	0010      	movs	r0, r2
   23128:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   2312a:	68fb      	ldr	r3, [r7, #12]
   2312c:	681b      	ldr	r3, [r3, #0]
   2312e:	2201      	movs	r2, #1
   23130:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   23132:	230b      	movs	r3, #11
   23134:	18fb      	adds	r3, r7, r3
   23136:	781b      	ldrb	r3, [r3, #0]
   23138:	2202      	movs	r2, #2
   2313a:	4013      	ands	r3, r2
   2313c:	d008      	beq.n	23150 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   2313e:	68fb      	ldr	r3, [r7, #12]
   23140:	689b      	ldr	r3, [r3, #8]
   23142:	68fa      	ldr	r2, [r7, #12]
   23144:	0010      	movs	r0, r2
   23146:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   23148:	68fb      	ldr	r3, [r7, #12]
   2314a:	681b      	ldr	r3, [r3, #0]
   2314c:	2202      	movs	r2, #2
   2314e:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   23150:	230b      	movs	r3, #11
   23152:	18fb      	adds	r3, r7, r3
   23154:	781b      	ldrb	r3, [r3, #0]
   23156:	2210      	movs	r2, #16
   23158:	4013      	ands	r3, r2
   2315a:	d008      	beq.n	2316e <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   2315c:	68fb      	ldr	r3, [r7, #12]
   2315e:	695b      	ldr	r3, [r3, #20]
   23160:	68fa      	ldr	r2, [r7, #12]
   23162:	0010      	movs	r0, r2
   23164:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   23166:	68fb      	ldr	r3, [r7, #12]
   23168:	681b      	ldr	r3, [r3, #0]
   2316a:	2210      	movs	r2, #16
   2316c:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   2316e:	46c0      	nop			; (mov r8, r8)
   23170:	46bd      	mov	sp, r7
   23172:	b004      	add	sp, #16
   23174:	bd80      	pop	{r7, pc}
   23176:	46c0      	nop			; (mov r8, r8)
   23178:	20000b94 	.word	0x20000b94

0002317c <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   2317c:	b580      	push	{r7, lr}
   2317e:	af00      	add	r7, sp, #0
}
   23180:	46c0      	nop			; (mov r8, r8)
   23182:	46bd      	mov	sp, r7
   23184:	bd80      	pop	{r7, pc}
	...

00023188 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   23188:	b580      	push	{r7, lr}
   2318a:	b082      	sub	sp, #8
   2318c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2318e:	4b07      	ldr	r3, [pc, #28]	; (231ac <nvm_is_ready+0x24>)
   23190:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   23192:	687b      	ldr	r3, [r7, #4]
   23194:	7d1b      	ldrb	r3, [r3, #20]
   23196:	b2db      	uxtb	r3, r3
   23198:	001a      	movs	r2, r3
   2319a:	2301      	movs	r3, #1
   2319c:	4013      	ands	r3, r2
   2319e:	1e5a      	subs	r2, r3, #1
   231a0:	4193      	sbcs	r3, r2
   231a2:	b2db      	uxtb	r3, r3
}
   231a4:	0018      	movs	r0, r3
   231a6:	46bd      	mov	sp, r7
   231a8:	b002      	add	sp, #8
   231aa:	bd80      	pop	{r7, pc}
   231ac:	41004000 	.word	0x41004000

000231b0 <system_apb_clock_set_mask>:
{
   231b0:	b580      	push	{r7, lr}
   231b2:	b082      	sub	sp, #8
   231b4:	af00      	add	r7, sp, #0
   231b6:	0002      	movs	r2, r0
   231b8:	6039      	str	r1, [r7, #0]
   231ba:	1dfb      	adds	r3, r7, #7
   231bc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   231be:	1dfb      	adds	r3, r7, #7
   231c0:	781b      	ldrb	r3, [r3, #0]
   231c2:	2b01      	cmp	r3, #1
   231c4:	d00a      	beq.n	231dc <system_apb_clock_set_mask+0x2c>
   231c6:	2b02      	cmp	r3, #2
   231c8:	d00f      	beq.n	231ea <system_apb_clock_set_mask+0x3a>
   231ca:	2b00      	cmp	r3, #0
   231cc:	d114      	bne.n	231f8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   231ce:	4b0e      	ldr	r3, [pc, #56]	; (23208 <system_apb_clock_set_mask+0x58>)
   231d0:	4a0d      	ldr	r2, [pc, #52]	; (23208 <system_apb_clock_set_mask+0x58>)
   231d2:	6991      	ldr	r1, [r2, #24]
   231d4:	683a      	ldr	r2, [r7, #0]
   231d6:	430a      	orrs	r2, r1
   231d8:	619a      	str	r2, [r3, #24]
			break;
   231da:	e00f      	b.n	231fc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   231dc:	4b0a      	ldr	r3, [pc, #40]	; (23208 <system_apb_clock_set_mask+0x58>)
   231de:	4a0a      	ldr	r2, [pc, #40]	; (23208 <system_apb_clock_set_mask+0x58>)
   231e0:	69d1      	ldr	r1, [r2, #28]
   231e2:	683a      	ldr	r2, [r7, #0]
   231e4:	430a      	orrs	r2, r1
   231e6:	61da      	str	r2, [r3, #28]
			break;
   231e8:	e008      	b.n	231fc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   231ea:	4b07      	ldr	r3, [pc, #28]	; (23208 <system_apb_clock_set_mask+0x58>)
   231ec:	4a06      	ldr	r2, [pc, #24]	; (23208 <system_apb_clock_set_mask+0x58>)
   231ee:	6a11      	ldr	r1, [r2, #32]
   231f0:	683a      	ldr	r2, [r7, #0]
   231f2:	430a      	orrs	r2, r1
   231f4:	621a      	str	r2, [r3, #32]
			break;
   231f6:	e001      	b.n	231fc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   231f8:	2317      	movs	r3, #23
   231fa:	e000      	b.n	231fe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   231fc:	2300      	movs	r3, #0
}
   231fe:	0018      	movs	r0, r3
   23200:	46bd      	mov	sp, r7
   23202:	b002      	add	sp, #8
   23204:	bd80      	pop	{r7, pc}
   23206:	46c0      	nop			; (mov r8, r8)
   23208:	40000400 	.word	0x40000400

0002320c <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   2320c:	b580      	push	{r7, lr}
   2320e:	b084      	sub	sp, #16
   23210:	af00      	add	r7, sp, #0
   23212:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   23214:	4b2f      	ldr	r3, [pc, #188]	; (232d4 <nvm_set_config+0xc8>)
   23216:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   23218:	2104      	movs	r1, #4
   2321a:	2001      	movs	r0, #1
   2321c:	4b2e      	ldr	r3, [pc, #184]	; (232d8 <nvm_set_config+0xcc>)
   2321e:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23220:	68fb      	ldr	r3, [r7, #12]
   23222:	2220      	movs	r2, #32
   23224:	32ff      	adds	r2, #255	; 0xff
   23226:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   23228:	4b2c      	ldr	r3, [pc, #176]	; (232dc <nvm_set_config+0xd0>)
   2322a:	4798      	blx	r3
   2322c:	0003      	movs	r3, r0
   2322e:	001a      	movs	r2, r3
   23230:	2301      	movs	r3, #1
   23232:	4053      	eors	r3, r2
   23234:	b2db      	uxtb	r3, r3
   23236:	2b00      	cmp	r3, #0
   23238:	d001      	beq.n	2323e <nvm_set_config+0x32>
		return STATUS_BUSY;
   2323a:	2305      	movs	r3, #5
   2323c:	e045      	b.n	232ca <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   2323e:	687b      	ldr	r3, [r7, #4]
   23240:	781b      	ldrb	r3, [r3, #0]
   23242:	021b      	lsls	r3, r3, #8
   23244:	001a      	movs	r2, r3
   23246:	23c0      	movs	r3, #192	; 0xc0
   23248:	009b      	lsls	r3, r3, #2
   2324a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   2324c:	687b      	ldr	r3, [r7, #4]
   2324e:	785b      	ldrb	r3, [r3, #1]
   23250:	01db      	lsls	r3, r3, #7
   23252:	0019      	movs	r1, r3
   23254:	23ff      	movs	r3, #255	; 0xff
   23256:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   23258:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   2325a:	687b      	ldr	r3, [r7, #4]
   2325c:	789b      	ldrb	r3, [r3, #2]
   2325e:	005b      	lsls	r3, r3, #1
   23260:	0019      	movs	r1, r3
   23262:	231e      	movs	r3, #30
   23264:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   23266:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   23268:	687b      	ldr	r3, [r7, #4]
   2326a:	78db      	ldrb	r3, [r3, #3]
   2326c:	049b      	lsls	r3, r3, #18
   2326e:	0019      	movs	r1, r3
   23270:	2380      	movs	r3, #128	; 0x80
   23272:	02db      	lsls	r3, r3, #11
   23274:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   23276:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   23278:	687b      	ldr	r3, [r7, #4]
   2327a:	791b      	ldrb	r3, [r3, #4]
   2327c:	041b      	lsls	r3, r3, #16
   2327e:	0019      	movs	r1, r3
   23280:	23c0      	movs	r3, #192	; 0xc0
   23282:	029b      	lsls	r3, r3, #10
   23284:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   23286:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   23288:	68fb      	ldr	r3, [r7, #12]
   2328a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   2328c:	68fb      	ldr	r3, [r7, #12]
   2328e:	689b      	ldr	r3, [r3, #8]
   23290:	035b      	lsls	r3, r3, #13
   23292:	0f5b      	lsrs	r3, r3, #29
   23294:	b2db      	uxtb	r3, r3
   23296:	001a      	movs	r2, r3
   23298:	2308      	movs	r3, #8
   2329a:	4093      	lsls	r3, r2
   2329c:	b29a      	uxth	r2, r3
   2329e:	4b10      	ldr	r3, [pc, #64]	; (232e0 <nvm_set_config+0xd4>)
   232a0:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   232a2:	68fb      	ldr	r3, [r7, #12]
   232a4:	689b      	ldr	r3, [r3, #8]
   232a6:	b29a      	uxth	r2, r3
   232a8:	4b0d      	ldr	r3, [pc, #52]	; (232e0 <nvm_set_config+0xd4>)
   232aa:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   232ac:	687b      	ldr	r3, [r7, #4]
   232ae:	785a      	ldrb	r2, [r3, #1]
   232b0:	4b0b      	ldr	r3, [pc, #44]	; (232e0 <nvm_set_config+0xd4>)
   232b2:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   232b4:	68fb      	ldr	r3, [r7, #12]
   232b6:	8b1b      	ldrh	r3, [r3, #24]
   232b8:	b29b      	uxth	r3, r3
   232ba:	001a      	movs	r2, r3
   232bc:	2380      	movs	r3, #128	; 0x80
   232be:	005b      	lsls	r3, r3, #1
   232c0:	4013      	ands	r3, r2
   232c2:	d001      	beq.n	232c8 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   232c4:	2310      	movs	r3, #16
   232c6:	e000      	b.n	232ca <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   232c8:	2300      	movs	r3, #0
}
   232ca:	0018      	movs	r0, r3
   232cc:	46bd      	mov	sp, r7
   232ce:	b004      	add	sp, #16
   232d0:	bd80      	pop	{r7, pc}
   232d2:	46c0      	nop			; (mov r8, r8)
   232d4:	41004000 	.word	0x41004000
   232d8:	000231b1 	.word	0x000231b1
   232dc:	00023189 	.word	0x00023189
   232e0:	20000614 	.word	0x20000614

000232e4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   232e4:	b580      	push	{r7, lr}
   232e6:	b086      	sub	sp, #24
   232e8:	af00      	add	r7, sp, #0
   232ea:	60b9      	str	r1, [r7, #8]
   232ec:	607a      	str	r2, [r7, #4]
   232ee:	230f      	movs	r3, #15
   232f0:	18fb      	adds	r3, r7, r3
   232f2:	1c02      	adds	r2, r0, #0
   232f4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   232f6:	4b3a      	ldr	r3, [pc, #232]	; (233e0 <nvm_execute_command+0xfc>)
   232f8:	881b      	ldrh	r3, [r3, #0]
   232fa:	001a      	movs	r2, r3
   232fc:	4b38      	ldr	r3, [pc, #224]	; (233e0 <nvm_execute_command+0xfc>)
   232fe:	885b      	ldrh	r3, [r3, #2]
   23300:	435a      	muls	r2, r3
   23302:	68bb      	ldr	r3, [r7, #8]
   23304:	429a      	cmp	r2, r3
   23306:	d209      	bcs.n	2331c <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   23308:	68bb      	ldr	r3, [r7, #8]
   2330a:	4a36      	ldr	r2, [pc, #216]	; (233e4 <nvm_execute_command+0x100>)
   2330c:	4293      	cmp	r3, r2
   2330e:	d903      	bls.n	23318 <nvm_execute_command+0x34>
   23310:	68bb      	ldr	r3, [r7, #8]
   23312:	4a35      	ldr	r2, [pc, #212]	; (233e8 <nvm_execute_command+0x104>)
   23314:	4293      	cmp	r3, r2
   23316:	d901      	bls.n	2331c <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   23318:	2318      	movs	r3, #24
   2331a:	e05c      	b.n	233d6 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2331c:	4b33      	ldr	r3, [pc, #204]	; (233ec <nvm_execute_command+0x108>)
   2331e:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   23320:	697b      	ldr	r3, [r7, #20]
   23322:	685b      	ldr	r3, [r3, #4]
   23324:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   23326:	693b      	ldr	r3, [r7, #16]
   23328:	2280      	movs	r2, #128	; 0x80
   2332a:	02d2      	lsls	r2, r2, #11
   2332c:	431a      	orrs	r2, r3
   2332e:	697b      	ldr	r3, [r7, #20]
   23330:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23332:	697b      	ldr	r3, [r7, #20]
   23334:	2220      	movs	r2, #32
   23336:	32ff      	adds	r2, #255	; 0xff
   23338:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   2333a:	4b2d      	ldr	r3, [pc, #180]	; (233f0 <nvm_execute_command+0x10c>)
   2333c:	4798      	blx	r3
   2333e:	0003      	movs	r3, r0
   23340:	001a      	movs	r2, r3
   23342:	2301      	movs	r3, #1
   23344:	4053      	eors	r3, r2
   23346:	b2db      	uxtb	r3, r3
   23348:	2b00      	cmp	r3, #0
   2334a:	d004      	beq.n	23356 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   2334c:	697b      	ldr	r3, [r7, #20]
   2334e:	693a      	ldr	r2, [r7, #16]
   23350:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   23352:	2305      	movs	r3, #5
   23354:	e03f      	b.n	233d6 <nvm_execute_command+0xf2>
	}

	switch (command) {
   23356:	230f      	movs	r3, #15
   23358:	18fb      	adds	r3, r7, r3
   2335a:	781b      	ldrb	r3, [r3, #0]
   2335c:	2b45      	cmp	r3, #69	; 0x45
   2335e:	d81d      	bhi.n	2339c <nvm_execute_command+0xb8>
   23360:	009a      	lsls	r2, r3, #2
   23362:	4b24      	ldr	r3, [pc, #144]	; (233f4 <nvm_execute_command+0x110>)
   23364:	18d3      	adds	r3, r2, r3
   23366:	681b      	ldr	r3, [r3, #0]
   23368:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   2336a:	697b      	ldr	r3, [r7, #20]
   2336c:	8b1b      	ldrh	r3, [r3, #24]
   2336e:	b29b      	uxth	r3, r3
   23370:	001a      	movs	r2, r3
   23372:	2380      	movs	r3, #128	; 0x80
   23374:	005b      	lsls	r3, r3, #1
   23376:	4013      	ands	r3, r2
   23378:	d004      	beq.n	23384 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   2337a:	697b      	ldr	r3, [r7, #20]
   2337c:	693a      	ldr	r2, [r7, #16]
   2337e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   23380:	2310      	movs	r3, #16
   23382:	e028      	b.n	233d6 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   23384:	68bb      	ldr	r3, [r7, #8]
   23386:	089b      	lsrs	r3, r3, #2
   23388:	005a      	lsls	r2, r3, #1
   2338a:	697b      	ldr	r3, [r7, #20]
   2338c:	61da      	str	r2, [r3, #28]
			break;
   2338e:	e00b      	b.n	233a8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   23390:	68bb      	ldr	r3, [r7, #8]
   23392:	089b      	lsrs	r3, r3, #2
   23394:	005a      	lsls	r2, r3, #1
   23396:	697b      	ldr	r3, [r7, #20]
   23398:	61da      	str	r2, [r3, #28]
			break;
   2339a:	e005      	b.n	233a8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   2339c:	697b      	ldr	r3, [r7, #20]
   2339e:	693a      	ldr	r2, [r7, #16]
   233a0:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   233a2:	2317      	movs	r3, #23
   233a4:	e017      	b.n	233d6 <nvm_execute_command+0xf2>
			break;
   233a6:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   233a8:	230f      	movs	r3, #15
   233aa:	18fb      	adds	r3, r7, r3
   233ac:	781b      	ldrb	r3, [r3, #0]
   233ae:	b29b      	uxth	r3, r3
   233b0:	4a11      	ldr	r2, [pc, #68]	; (233f8 <nvm_execute_command+0x114>)
   233b2:	4313      	orrs	r3, r2
   233b4:	b29a      	uxth	r2, r3
   233b6:	697b      	ldr	r3, [r7, #20]
   233b8:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   233ba:	46c0      	nop			; (mov r8, r8)
   233bc:	4b0c      	ldr	r3, [pc, #48]	; (233f0 <nvm_execute_command+0x10c>)
   233be:	4798      	blx	r3
   233c0:	0003      	movs	r3, r0
   233c2:	001a      	movs	r2, r3
   233c4:	2301      	movs	r3, #1
   233c6:	4053      	eors	r3, r2
   233c8:	b2db      	uxtb	r3, r3
   233ca:	2b00      	cmp	r3, #0
   233cc:	d1f6      	bne.n	233bc <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   233ce:	697b      	ldr	r3, [r7, #20]
   233d0:	693a      	ldr	r2, [r7, #16]
   233d2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   233d4:	2300      	movs	r3, #0
}
   233d6:	0018      	movs	r0, r3
   233d8:	46bd      	mov	sp, r7
   233da:	b006      	add	sp, #24
   233dc:	bd80      	pop	{r7, pc}
   233de:	46c0      	nop			; (mov r8, r8)
   233e0:	20000614 	.word	0x20000614
   233e4:	00803fff 	.word	0x00803fff
   233e8:	00806000 	.word	0x00806000
   233ec:	41004000 	.word	0x41004000
   233f0:	00023189 	.word	0x00023189
   233f4:	0002b520 	.word	0x0002b520
   233f8:	ffffa500 	.word	0xffffa500

000233fc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   233fc:	b580      	push	{r7, lr}
   233fe:	b088      	sub	sp, #32
   23400:	af00      	add	r7, sp, #0
   23402:	60f8      	str	r0, [r7, #12]
   23404:	60b9      	str	r1, [r7, #8]
   23406:	1dbb      	adds	r3, r7, #6
   23408:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   2340a:	4b4a      	ldr	r3, [pc, #296]	; (23534 <nvm_write_buffer+0x138>)
   2340c:	881b      	ldrh	r3, [r3, #0]
   2340e:	001a      	movs	r2, r3
   23410:	4b48      	ldr	r3, [pc, #288]	; (23534 <nvm_write_buffer+0x138>)
   23412:	885b      	ldrh	r3, [r3, #2]
   23414:	435a      	muls	r2, r3
	if (destination_address >
   23416:	68fb      	ldr	r3, [r7, #12]
   23418:	429a      	cmp	r2, r3
   2341a:	d201      	bcs.n	23420 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   2341c:	2318      	movs	r3, #24
   2341e:	e084      	b.n	2352a <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   23420:	4b44      	ldr	r3, [pc, #272]	; (23534 <nvm_write_buffer+0x138>)
   23422:	881b      	ldrh	r3, [r3, #0]
   23424:	3b01      	subs	r3, #1
   23426:	001a      	movs	r2, r3
   23428:	68fb      	ldr	r3, [r7, #12]
   2342a:	4013      	ands	r3, r2
   2342c:	d001      	beq.n	23432 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   2342e:	2318      	movs	r3, #24
   23430:	e07b      	b.n	2352a <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   23432:	4b40      	ldr	r3, [pc, #256]	; (23534 <nvm_write_buffer+0x138>)
   23434:	881b      	ldrh	r3, [r3, #0]
   23436:	1dba      	adds	r2, r7, #6
   23438:	8812      	ldrh	r2, [r2, #0]
   2343a:	429a      	cmp	r2, r3
   2343c:	d901      	bls.n	23442 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   2343e:	2317      	movs	r3, #23
   23440:	e073      	b.n	2352a <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   23442:	4b3d      	ldr	r3, [pc, #244]	; (23538 <nvm_write_buffer+0x13c>)
   23444:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   23446:	4b3d      	ldr	r3, [pc, #244]	; (2353c <nvm_write_buffer+0x140>)
   23448:	4798      	blx	r3
   2344a:	0003      	movs	r3, r0
   2344c:	001a      	movs	r2, r3
   2344e:	2301      	movs	r3, #1
   23450:	4053      	eors	r3, r2
   23452:	b2db      	uxtb	r3, r3
   23454:	2b00      	cmp	r3, #0
   23456:	d001      	beq.n	2345c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   23458:	2305      	movs	r3, #5
   2345a:	e066      	b.n	2352a <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   2345c:	697b      	ldr	r3, [r7, #20]
   2345e:	4a38      	ldr	r2, [pc, #224]	; (23540 <nvm_write_buffer+0x144>)
   23460:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   23462:	46c0      	nop			; (mov r8, r8)
   23464:	4b35      	ldr	r3, [pc, #212]	; (2353c <nvm_write_buffer+0x140>)
   23466:	4798      	blx	r3
   23468:	0003      	movs	r3, r0
   2346a:	001a      	movs	r2, r3
   2346c:	2301      	movs	r3, #1
   2346e:	4053      	eors	r3, r2
   23470:	b2db      	uxtb	r3, r3
   23472:	2b00      	cmp	r3, #0
   23474:	d1f6      	bne.n	23464 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23476:	697b      	ldr	r3, [r7, #20]
   23478:	2220      	movs	r2, #32
   2347a:	32ff      	adds	r2, #255	; 0xff
   2347c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   2347e:	68fb      	ldr	r3, [r7, #12]
   23480:	085b      	lsrs	r3, r3, #1
   23482:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   23484:	231a      	movs	r3, #26
   23486:	18fb      	adds	r3, r7, r3
   23488:	2200      	movs	r2, #0
   2348a:	801a      	strh	r2, [r3, #0]
   2348c:	e032      	b.n	234f4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   2348e:	231a      	movs	r3, #26
   23490:	18fb      	adds	r3, r7, r3
   23492:	881b      	ldrh	r3, [r3, #0]
   23494:	68ba      	ldr	r2, [r7, #8]
   23496:	18d3      	adds	r3, r2, r3
   23498:	781a      	ldrb	r2, [r3, #0]
   2349a:	2318      	movs	r3, #24
   2349c:	18fb      	adds	r3, r7, r3
   2349e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   234a0:	231a      	movs	r3, #26
   234a2:	18fb      	adds	r3, r7, r3
   234a4:	881a      	ldrh	r2, [r3, #0]
   234a6:	1dbb      	adds	r3, r7, #6
   234a8:	881b      	ldrh	r3, [r3, #0]
   234aa:	3b01      	subs	r3, #1
   234ac:	429a      	cmp	r2, r3
   234ae:	da11      	bge.n	234d4 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   234b0:	231a      	movs	r3, #26
   234b2:	18fb      	adds	r3, r7, r3
   234b4:	881b      	ldrh	r3, [r3, #0]
   234b6:	3301      	adds	r3, #1
   234b8:	68ba      	ldr	r2, [r7, #8]
   234ba:	18d3      	adds	r3, r2, r3
   234bc:	781b      	ldrb	r3, [r3, #0]
   234be:	021b      	lsls	r3, r3, #8
   234c0:	b21a      	sxth	r2, r3
   234c2:	2318      	movs	r3, #24
   234c4:	18fb      	adds	r3, r7, r3
   234c6:	2100      	movs	r1, #0
   234c8:	5e5b      	ldrsh	r3, [r3, r1]
   234ca:	4313      	orrs	r3, r2
   234cc:	b21a      	sxth	r2, r3
   234ce:	2318      	movs	r3, #24
   234d0:	18fb      	adds	r3, r7, r3
   234d2:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   234d4:	69fb      	ldr	r3, [r7, #28]
   234d6:	1c5a      	adds	r2, r3, #1
   234d8:	61fa      	str	r2, [r7, #28]
   234da:	005b      	lsls	r3, r3, #1
   234dc:	001a      	movs	r2, r3
   234de:	2318      	movs	r3, #24
   234e0:	18fb      	adds	r3, r7, r3
   234e2:	881b      	ldrh	r3, [r3, #0]
   234e4:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   234e6:	231a      	movs	r3, #26
   234e8:	18fb      	adds	r3, r7, r3
   234ea:	221a      	movs	r2, #26
   234ec:	18ba      	adds	r2, r7, r2
   234ee:	8812      	ldrh	r2, [r2, #0]
   234f0:	3202      	adds	r2, #2
   234f2:	801a      	strh	r2, [r3, #0]
   234f4:	231a      	movs	r3, #26
   234f6:	18fa      	adds	r2, r7, r3
   234f8:	1dbb      	adds	r3, r7, #6
   234fa:	8812      	ldrh	r2, [r2, #0]
   234fc:	881b      	ldrh	r3, [r3, #0]
   234fe:	429a      	cmp	r2, r3
   23500:	d3c5      	bcc.n	2348e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   23502:	4b0c      	ldr	r3, [pc, #48]	; (23534 <nvm_write_buffer+0x138>)
   23504:	791b      	ldrb	r3, [r3, #4]
   23506:	2201      	movs	r2, #1
   23508:	4053      	eors	r3, r2
   2350a:	b2db      	uxtb	r3, r3
   2350c:	2b00      	cmp	r3, #0
   2350e:	d00b      	beq.n	23528 <nvm_write_buffer+0x12c>
   23510:	1dbb      	adds	r3, r7, #6
   23512:	881b      	ldrh	r3, [r3, #0]
   23514:	2b3f      	cmp	r3, #63	; 0x3f
   23516:	d807      	bhi.n	23528 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   23518:	68fb      	ldr	r3, [r7, #12]
   2351a:	2200      	movs	r2, #0
   2351c:	0019      	movs	r1, r3
   2351e:	2004      	movs	r0, #4
   23520:	4b08      	ldr	r3, [pc, #32]	; (23544 <nvm_write_buffer+0x148>)
   23522:	4798      	blx	r3
   23524:	0003      	movs	r3, r0
   23526:	e000      	b.n	2352a <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   23528:	2300      	movs	r3, #0
}
   2352a:	0018      	movs	r0, r3
   2352c:	46bd      	mov	sp, r7
   2352e:	b008      	add	sp, #32
   23530:	bd80      	pop	{r7, pc}
   23532:	46c0      	nop			; (mov r8, r8)
   23534:	20000614 	.word	0x20000614
   23538:	41004000 	.word	0x41004000
   2353c:	00023189 	.word	0x00023189
   23540:	ffffa544 	.word	0xffffa544
   23544:	000232e5 	.word	0x000232e5

00023548 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   23548:	b580      	push	{r7, lr}
   2354a:	b088      	sub	sp, #32
   2354c:	af00      	add	r7, sp, #0
   2354e:	60f8      	str	r0, [r7, #12]
   23550:	60b9      	str	r1, [r7, #8]
   23552:	1dbb      	adds	r3, r7, #6
   23554:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   23556:	4b38      	ldr	r3, [pc, #224]	; (23638 <nvm_read_buffer+0xf0>)
   23558:	881b      	ldrh	r3, [r3, #0]
   2355a:	001a      	movs	r2, r3
   2355c:	4b36      	ldr	r3, [pc, #216]	; (23638 <nvm_read_buffer+0xf0>)
   2355e:	885b      	ldrh	r3, [r3, #2]
   23560:	435a      	muls	r2, r3
	if (source_address >
   23562:	68fb      	ldr	r3, [r7, #12]
   23564:	429a      	cmp	r2, r3
   23566:	d201      	bcs.n	2356c <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   23568:	2318      	movs	r3, #24
   2356a:	e060      	b.n	2362e <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   2356c:	4b32      	ldr	r3, [pc, #200]	; (23638 <nvm_read_buffer+0xf0>)
   2356e:	881b      	ldrh	r3, [r3, #0]
   23570:	3b01      	subs	r3, #1
   23572:	001a      	movs	r2, r3
   23574:	68fb      	ldr	r3, [r7, #12]
   23576:	4013      	ands	r3, r2
   23578:	d001      	beq.n	2357e <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   2357a:	2318      	movs	r3, #24
   2357c:	e057      	b.n	2362e <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   2357e:	4b2e      	ldr	r3, [pc, #184]	; (23638 <nvm_read_buffer+0xf0>)
   23580:	881b      	ldrh	r3, [r3, #0]
   23582:	1dba      	adds	r2, r7, #6
   23584:	8812      	ldrh	r2, [r2, #0]
   23586:	429a      	cmp	r2, r3
   23588:	d901      	bls.n	2358e <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   2358a:	2317      	movs	r3, #23
   2358c:	e04f      	b.n	2362e <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   2358e:	4b2b      	ldr	r3, [pc, #172]	; (2363c <nvm_read_buffer+0xf4>)
   23590:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   23592:	4b2b      	ldr	r3, [pc, #172]	; (23640 <nvm_read_buffer+0xf8>)
   23594:	4798      	blx	r3
   23596:	0003      	movs	r3, r0
   23598:	001a      	movs	r2, r3
   2359a:	2301      	movs	r3, #1
   2359c:	4053      	eors	r3, r2
   2359e:	b2db      	uxtb	r3, r3
   235a0:	2b00      	cmp	r3, #0
   235a2:	d001      	beq.n	235a8 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   235a4:	2305      	movs	r3, #5
   235a6:	e042      	b.n	2362e <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   235a8:	697b      	ldr	r3, [r7, #20]
   235aa:	2220      	movs	r2, #32
   235ac:	32ff      	adds	r2, #255	; 0xff
   235ae:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   235b0:	68fb      	ldr	r3, [r7, #12]
   235b2:	085b      	lsrs	r3, r3, #1
   235b4:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   235b6:	231a      	movs	r3, #26
   235b8:	18fb      	adds	r3, r7, r3
   235ba:	2200      	movs	r2, #0
   235bc:	801a      	strh	r2, [r3, #0]
   235be:	e02e      	b.n	2361e <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   235c0:	69fb      	ldr	r3, [r7, #28]
   235c2:	1c5a      	adds	r2, r3, #1
   235c4:	61fa      	str	r2, [r7, #28]
   235c6:	005b      	lsls	r3, r3, #1
   235c8:	001a      	movs	r2, r3
   235ca:	2312      	movs	r3, #18
   235cc:	18fb      	adds	r3, r7, r3
   235ce:	8812      	ldrh	r2, [r2, #0]
   235d0:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   235d2:	231a      	movs	r3, #26
   235d4:	18fb      	adds	r3, r7, r3
   235d6:	881b      	ldrh	r3, [r3, #0]
   235d8:	68ba      	ldr	r2, [r7, #8]
   235da:	18d3      	adds	r3, r2, r3
   235dc:	2212      	movs	r2, #18
   235de:	18ba      	adds	r2, r7, r2
   235e0:	8812      	ldrh	r2, [r2, #0]
   235e2:	b2d2      	uxtb	r2, r2
   235e4:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   235e6:	231a      	movs	r3, #26
   235e8:	18fb      	adds	r3, r7, r3
   235ea:	881a      	ldrh	r2, [r3, #0]
   235ec:	1dbb      	adds	r3, r7, #6
   235ee:	881b      	ldrh	r3, [r3, #0]
   235f0:	3b01      	subs	r3, #1
   235f2:	429a      	cmp	r2, r3
   235f4:	da0c      	bge.n	23610 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   235f6:	231a      	movs	r3, #26
   235f8:	18fb      	adds	r3, r7, r3
   235fa:	881b      	ldrh	r3, [r3, #0]
   235fc:	3301      	adds	r3, #1
   235fe:	68ba      	ldr	r2, [r7, #8]
   23600:	18d3      	adds	r3, r2, r3
   23602:	2212      	movs	r2, #18
   23604:	18ba      	adds	r2, r7, r2
   23606:	8812      	ldrh	r2, [r2, #0]
   23608:	0a12      	lsrs	r2, r2, #8
   2360a:	b292      	uxth	r2, r2
   2360c:	b2d2      	uxtb	r2, r2
   2360e:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   23610:	231a      	movs	r3, #26
   23612:	18fb      	adds	r3, r7, r3
   23614:	221a      	movs	r2, #26
   23616:	18ba      	adds	r2, r7, r2
   23618:	8812      	ldrh	r2, [r2, #0]
   2361a:	3202      	adds	r2, #2
   2361c:	801a      	strh	r2, [r3, #0]
   2361e:	231a      	movs	r3, #26
   23620:	18fa      	adds	r2, r7, r3
   23622:	1dbb      	adds	r3, r7, #6
   23624:	8812      	ldrh	r2, [r2, #0]
   23626:	881b      	ldrh	r3, [r3, #0]
   23628:	429a      	cmp	r2, r3
   2362a:	d3c9      	bcc.n	235c0 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   2362c:	2300      	movs	r3, #0
}
   2362e:	0018      	movs	r0, r3
   23630:	46bd      	mov	sp, r7
   23632:	b008      	add	sp, #32
   23634:	bd80      	pop	{r7, pc}
   23636:	46c0      	nop			; (mov r8, r8)
   23638:	20000614 	.word	0x20000614
   2363c:	41004000 	.word	0x41004000
   23640:	00023189 	.word	0x00023189

00023644 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   23644:	b580      	push	{r7, lr}
   23646:	b084      	sub	sp, #16
   23648:	af00      	add	r7, sp, #0
   2364a:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   2364c:	4b23      	ldr	r3, [pc, #140]	; (236dc <nvm_erase_row+0x98>)
   2364e:	881b      	ldrh	r3, [r3, #0]
   23650:	001a      	movs	r2, r3
   23652:	4b22      	ldr	r3, [pc, #136]	; (236dc <nvm_erase_row+0x98>)
   23654:	885b      	ldrh	r3, [r3, #2]
   23656:	435a      	muls	r2, r3
	if (row_address >
   23658:	687b      	ldr	r3, [r7, #4]
   2365a:	429a      	cmp	r2, r3
   2365c:	d201      	bcs.n	23662 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   2365e:	2318      	movs	r3, #24
   23660:	e037      	b.n	236d2 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   23662:	4b1e      	ldr	r3, [pc, #120]	; (236dc <nvm_erase_row+0x98>)
   23664:	881b      	ldrh	r3, [r3, #0]
   23666:	009b      	lsls	r3, r3, #2
   23668:	3b01      	subs	r3, #1
   2366a:	001a      	movs	r2, r3
   2366c:	687b      	ldr	r3, [r7, #4]
   2366e:	4013      	ands	r3, r2
   23670:	d001      	beq.n	23676 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   23672:	2318      	movs	r3, #24
   23674:	e02d      	b.n	236d2 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   23676:	4b1a      	ldr	r3, [pc, #104]	; (236e0 <nvm_erase_row+0x9c>)
   23678:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   2367a:	4b1a      	ldr	r3, [pc, #104]	; (236e4 <nvm_erase_row+0xa0>)
   2367c:	4798      	blx	r3
   2367e:	0003      	movs	r3, r0
   23680:	001a      	movs	r2, r3
   23682:	2301      	movs	r3, #1
   23684:	4053      	eors	r3, r2
   23686:	b2db      	uxtb	r3, r3
   23688:	2b00      	cmp	r3, #0
   2368a:	d001      	beq.n	23690 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   2368c:	2305      	movs	r3, #5
   2368e:	e020      	b.n	236d2 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   23690:	68fb      	ldr	r3, [r7, #12]
   23692:	2220      	movs	r2, #32
   23694:	32ff      	adds	r2, #255	; 0xff
   23696:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   23698:	687b      	ldr	r3, [r7, #4]
   2369a:	089b      	lsrs	r3, r3, #2
   2369c:	005a      	lsls	r2, r3, #1
   2369e:	68fb      	ldr	r3, [r7, #12]
   236a0:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   236a2:	68fb      	ldr	r3, [r7, #12]
   236a4:	4a10      	ldr	r2, [pc, #64]	; (236e8 <nvm_erase_row+0xa4>)
   236a6:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   236a8:	46c0      	nop			; (mov r8, r8)
   236aa:	4b0e      	ldr	r3, [pc, #56]	; (236e4 <nvm_erase_row+0xa0>)
   236ac:	4798      	blx	r3
   236ae:	0003      	movs	r3, r0
   236b0:	001a      	movs	r2, r3
   236b2:	2301      	movs	r3, #1
   236b4:	4053      	eors	r3, r2
   236b6:	b2db      	uxtb	r3, r3
   236b8:	2b00      	cmp	r3, #0
   236ba:	d1f6      	bne.n	236aa <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   236bc:	68fb      	ldr	r3, [r7, #12]
   236be:	8b1b      	ldrh	r3, [r3, #24]
   236c0:	b29b      	uxth	r3, r3
   236c2:	b2db      	uxtb	r3, r3
   236c4:	001a      	movs	r2, r3
   236c6:	231c      	movs	r3, #28
   236c8:	4013      	ands	r3, r2
   236ca:	d001      	beq.n	236d0 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   236cc:	2304      	movs	r3, #4
   236ce:	e000      	b.n	236d2 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   236d0:	2300      	movs	r3, #0
}
   236d2:	0018      	movs	r0, r3
   236d4:	46bd      	mov	sp, r7
   236d6:	b004      	add	sp, #16
   236d8:	bd80      	pop	{r7, pc}
   236da:	46c0      	nop			; (mov r8, r8)
   236dc:	20000614 	.word	0x20000614
   236e0:	41004000 	.word	0x41004000
   236e4:	00023189 	.word	0x00023189
   236e8:	ffffa502 	.word	0xffffa502

000236ec <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   236ec:	b580      	push	{r7, lr}
   236ee:	b086      	sub	sp, #24
   236f0:	af00      	add	r7, sp, #0
   236f2:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   236f4:	4b2a      	ldr	r3, [pc, #168]	; (237a0 <nvm_get_parameters+0xb4>)
   236f6:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   236f8:	697b      	ldr	r3, [r7, #20]
   236fa:	2220      	movs	r2, #32
   236fc:	32ff      	adds	r2, #255	; 0xff
   236fe:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   23700:	697b      	ldr	r3, [r7, #20]
   23702:	689b      	ldr	r3, [r3, #8]
   23704:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   23706:	693b      	ldr	r3, [r7, #16]
   23708:	0c1b      	lsrs	r3, r3, #16
   2370a:	2207      	movs	r2, #7
   2370c:	4013      	ands	r3, r2
   2370e:	2208      	movs	r2, #8
   23710:	409a      	lsls	r2, r3
   23712:	0013      	movs	r3, r2
	parameters->page_size =
   23714:	b2da      	uxtb	r2, r3
   23716:	687b      	ldr	r3, [r7, #4]
   23718:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   2371a:	693b      	ldr	r3, [r7, #16]
   2371c:	b29a      	uxth	r2, r3
   2371e:	687b      	ldr	r3, [r7, #4]
   23720:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   23722:	4b20      	ldr	r3, [pc, #128]	; (237a4 <nvm_get_parameters+0xb8>)
   23724:	881b      	ldrh	r3, [r3, #0]
   23726:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   23728:	091b      	lsrs	r3, r3, #4
   2372a:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   2372c:	230e      	movs	r3, #14
   2372e:	18fb      	adds	r3, r7, r3
   23730:	2107      	movs	r1, #7
   23732:	400a      	ands	r2, r1
   23734:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   23736:	230e      	movs	r3, #14
   23738:	18fb      	adds	r3, r7, r3
   2373a:	881b      	ldrh	r3, [r3, #0]
   2373c:	2b07      	cmp	r3, #7
   2373e:	d103      	bne.n	23748 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   23740:	687b      	ldr	r3, [r7, #4]
   23742:	2200      	movs	r2, #0
   23744:	605a      	str	r2, [r3, #4]
   23746:	e00a      	b.n	2375e <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   23748:	230e      	movs	r3, #14
   2374a:	18fb      	adds	r3, r7, r3
   2374c:	881b      	ldrh	r3, [r3, #0]
   2374e:	2206      	movs	r2, #6
   23750:	1ad3      	subs	r3, r2, r3
   23752:	2204      	movs	r2, #4
   23754:	409a      	lsls	r2, r3
   23756:	0013      	movs	r3, r2
   23758:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   2375a:	687b      	ldr	r3, [r7, #4]
   2375c:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   2375e:	4b11      	ldr	r3, [pc, #68]	; (237a4 <nvm_get_parameters+0xb8>)
   23760:	881b      	ldrh	r3, [r3, #0]
   23762:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   23764:	230c      	movs	r3, #12
   23766:	18fb      	adds	r3, r7, r3
   23768:	2107      	movs	r1, #7
   2376a:	400a      	ands	r2, r1
   2376c:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   2376e:	230c      	movs	r3, #12
   23770:	18fb      	adds	r3, r7, r3
   23772:	881b      	ldrh	r3, [r3, #0]
   23774:	2b07      	cmp	r3, #7
   23776:	d103      	bne.n	23780 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   23778:	687b      	ldr	r3, [r7, #4]
   2377a:	2200      	movs	r2, #0
   2377c:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   2377e:	e00a      	b.n	23796 <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   23780:	230c      	movs	r3, #12
   23782:	18fb      	adds	r3, r7, r3
   23784:	881b      	ldrh	r3, [r3, #0]
   23786:	2207      	movs	r2, #7
   23788:	1ad3      	subs	r3, r2, r3
   2378a:	2204      	movs	r2, #4
   2378c:	409a      	lsls	r2, r3
   2378e:	0013      	movs	r3, r2
   23790:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   23792:	687b      	ldr	r3, [r7, #4]
   23794:	609a      	str	r2, [r3, #8]
}
   23796:	46c0      	nop			; (mov r8, r8)
   23798:	46bd      	mov	sp, r7
   2379a:	b006      	add	sp, #24
   2379c:	bd80      	pop	{r7, pc}
   2379e:	46c0      	nop			; (mov r8, r8)
   237a0:	41004000 	.word	0x41004000
   237a4:	00804000 	.word	0x00804000

000237a8 <system_pinmux_get_config_defaults>:
{
   237a8:	b580      	push	{r7, lr}
   237aa:	b082      	sub	sp, #8
   237ac:	af00      	add	r7, sp, #0
   237ae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   237b0:	687b      	ldr	r3, [r7, #4]
   237b2:	2280      	movs	r2, #128	; 0x80
   237b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   237b6:	687b      	ldr	r3, [r7, #4]
   237b8:	2200      	movs	r2, #0
   237ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   237bc:	687b      	ldr	r3, [r7, #4]
   237be:	2201      	movs	r2, #1
   237c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   237c2:	687b      	ldr	r3, [r7, #4]
   237c4:	2200      	movs	r2, #0
   237c6:	70da      	strb	r2, [r3, #3]
}
   237c8:	46c0      	nop			; (mov r8, r8)
   237ca:	46bd      	mov	sp, r7
   237cc:	b002      	add	sp, #8
   237ce:	bd80      	pop	{r7, pc}

000237d0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   237d0:	b580      	push	{r7, lr}
   237d2:	b084      	sub	sp, #16
   237d4:	af00      	add	r7, sp, #0
   237d6:	0002      	movs	r2, r0
   237d8:	6039      	str	r1, [r7, #0]
   237da:	1dfb      	adds	r3, r7, #7
   237dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   237de:	230c      	movs	r3, #12
   237e0:	18fb      	adds	r3, r7, r3
   237e2:	0018      	movs	r0, r3
   237e4:	4b10      	ldr	r3, [pc, #64]	; (23828 <port_pin_set_config+0x58>)
   237e6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   237e8:	230c      	movs	r3, #12
   237ea:	18fb      	adds	r3, r7, r3
   237ec:	2280      	movs	r2, #128	; 0x80
   237ee:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   237f0:	683b      	ldr	r3, [r7, #0]
   237f2:	781a      	ldrb	r2, [r3, #0]
   237f4:	230c      	movs	r3, #12
   237f6:	18fb      	adds	r3, r7, r3
   237f8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   237fa:	683b      	ldr	r3, [r7, #0]
   237fc:	785a      	ldrb	r2, [r3, #1]
   237fe:	230c      	movs	r3, #12
   23800:	18fb      	adds	r3, r7, r3
   23802:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   23804:	683b      	ldr	r3, [r7, #0]
   23806:	789a      	ldrb	r2, [r3, #2]
   23808:	230c      	movs	r3, #12
   2380a:	18fb      	adds	r3, r7, r3
   2380c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2380e:	230c      	movs	r3, #12
   23810:	18fa      	adds	r2, r7, r3
   23812:	1dfb      	adds	r3, r7, #7
   23814:	781b      	ldrb	r3, [r3, #0]
   23816:	0011      	movs	r1, r2
   23818:	0018      	movs	r0, r3
   2381a:	4b04      	ldr	r3, [pc, #16]	; (2382c <port_pin_set_config+0x5c>)
   2381c:	4798      	blx	r3
}
   2381e:	46c0      	nop			; (mov r8, r8)
   23820:	46bd      	mov	sp, r7
   23822:	b004      	add	sp, #16
   23824:	bd80      	pop	{r7, pc}
   23826:	46c0      	nop			; (mov r8, r8)
   23828:	000237a9 	.word	0x000237a9
   2382c:	00025501 	.word	0x00025501

00023830 <nvm_get_config_defaults>:
{
   23830:	b580      	push	{r7, lr}
   23832:	b082      	sub	sp, #8
   23834:	af00      	add	r7, sp, #0
   23836:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   23838:	687b      	ldr	r3, [r7, #4]
   2383a:	2200      	movs	r2, #0
   2383c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   2383e:	687b      	ldr	r3, [r7, #4]
   23840:	2201      	movs	r2, #1
   23842:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   23844:	4b08      	ldr	r3, [pc, #32]	; (23868 <nvm_get_config_defaults+0x38>)
   23846:	685b      	ldr	r3, [r3, #4]
   23848:	06db      	lsls	r3, r3, #27
   2384a:	0f1b      	lsrs	r3, r3, #28
   2384c:	b2db      	uxtb	r3, r3
   2384e:	001a      	movs	r2, r3
   23850:	687b      	ldr	r3, [r7, #4]
   23852:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   23854:	687b      	ldr	r3, [r7, #4]
   23856:	2200      	movs	r2, #0
   23858:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   2385a:	687b      	ldr	r3, [r7, #4]
   2385c:	2200      	movs	r2, #0
   2385e:	711a      	strb	r2, [r3, #4]
}
   23860:	46c0      	nop			; (mov r8, r8)
   23862:	46bd      	mov	sp, r7
   23864:	b002      	add	sp, #8
   23866:	bd80      	pop	{r7, pc}
   23868:	41004000 	.word	0x41004000

0002386c <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   2386c:	b590      	push	{r4, r7, lr}
   2386e:	b085      	sub	sp, #20
   23870:	af00      	add	r7, sp, #0
   23872:	0002      	movs	r2, r0
   23874:	1dfb      	adds	r3, r7, #7
   23876:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23878:	230f      	movs	r3, #15
   2387a:	18fb      	adds	r3, r7, r3
   2387c:	2200      	movs	r2, #0
   2387e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   23880:	4b0a      	ldr	r3, [pc, #40]	; (238ac <_eeprom_emulator_nvm_erase_row+0x40>)
   23882:	685b      	ldr	r3, [r3, #4]
   23884:	1dfa      	adds	r2, r7, #7
   23886:	7812      	ldrb	r2, [r2, #0]
   23888:	0212      	lsls	r2, r2, #8
   2388a:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   2388c:	220f      	movs	r2, #15
   2388e:	18bc      	adds	r4, r7, r2
   23890:	0018      	movs	r0, r3
   23892:	4b07      	ldr	r3, [pc, #28]	; (238b0 <_eeprom_emulator_nvm_erase_row+0x44>)
   23894:	4798      	blx	r3
   23896:	0003      	movs	r3, r0
   23898:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   2389a:	230f      	movs	r3, #15
   2389c:	18fb      	adds	r3, r7, r3
   2389e:	781b      	ldrb	r3, [r3, #0]
   238a0:	2b05      	cmp	r3, #5
   238a2:	d0ed      	beq.n	23880 <_eeprom_emulator_nvm_erase_row+0x14>
}
   238a4:	46c0      	nop			; (mov r8, r8)
   238a6:	46bd      	mov	sp, r7
   238a8:	b005      	add	sp, #20
   238aa:	bd90      	pop	{r4, r7, pc}
   238ac:	2000061c 	.word	0x2000061c
   238b0:	00023645 	.word	0x00023645

000238b4 <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   238b4:	b590      	push	{r4, r7, lr}
   238b6:	b085      	sub	sp, #20
   238b8:	af00      	add	r7, sp, #0
   238ba:	0002      	movs	r2, r0
   238bc:	6039      	str	r1, [r7, #0]
   238be:	1dbb      	adds	r3, r7, #6
   238c0:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   238c2:	230f      	movs	r3, #15
   238c4:	18fb      	adds	r3, r7, r3
   238c6:	2200      	movs	r2, #0
   238c8:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   238ca:	4b0c      	ldr	r3, [pc, #48]	; (238fc <_eeprom_emulator_nvm_fill_cache+0x48>)
   238cc:	685a      	ldr	r2, [r3, #4]
   238ce:	1dbb      	adds	r3, r7, #6
   238d0:	881b      	ldrh	r3, [r3, #0]
   238d2:	019b      	lsls	r3, r3, #6
   238d4:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   238d6:	0018      	movs	r0, r3
   238d8:	230f      	movs	r3, #15
   238da:	18fc      	adds	r4, r7, r3
   238dc:	683b      	ldr	r3, [r7, #0]
   238de:	2240      	movs	r2, #64	; 0x40
   238e0:	0019      	movs	r1, r3
   238e2:	4b07      	ldr	r3, [pc, #28]	; (23900 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   238e4:	4798      	blx	r3
   238e6:	0003      	movs	r3, r0
   238e8:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   238ea:	230f      	movs	r3, #15
   238ec:	18fb      	adds	r3, r7, r3
   238ee:	781b      	ldrb	r3, [r3, #0]
   238f0:	2b05      	cmp	r3, #5
   238f2:	d0ea      	beq.n	238ca <_eeprom_emulator_nvm_fill_cache+0x16>
}
   238f4:	46c0      	nop			; (mov r8, r8)
   238f6:	46bd      	mov	sp, r7
   238f8:	b005      	add	sp, #20
   238fa:	bd90      	pop	{r4, r7, pc}
   238fc:	2000061c 	.word	0x2000061c
   23900:	000233fd 	.word	0x000233fd

00023904 <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   23904:	b590      	push	{r4, r7, lr}
   23906:	b085      	sub	sp, #20
   23908:	af00      	add	r7, sp, #0
   2390a:	0002      	movs	r2, r0
   2390c:	1dbb      	adds	r3, r7, #6
   2390e:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23910:	230f      	movs	r3, #15
   23912:	18fb      	adds	r3, r7, r3
   23914:	2200      	movs	r2, #0
   23916:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   23918:	4b0b      	ldr	r3, [pc, #44]	; (23948 <_eeprom_emulator_nvm_commit_cache+0x44>)
   2391a:	685a      	ldr	r2, [r3, #4]
   2391c:	1dbb      	adds	r3, r7, #6
   2391e:	881b      	ldrh	r3, [r3, #0]
   23920:	019b      	lsls	r3, r3, #6
   23922:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   23924:	220f      	movs	r2, #15
   23926:	18bc      	adds	r4, r7, r2
   23928:	2200      	movs	r2, #0
   2392a:	0019      	movs	r1, r3
   2392c:	2004      	movs	r0, #4
   2392e:	4b07      	ldr	r3, [pc, #28]	; (2394c <_eeprom_emulator_nvm_commit_cache+0x48>)
   23930:	4798      	blx	r3
   23932:	0003      	movs	r3, r0
   23934:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   23936:	230f      	movs	r3, #15
   23938:	18fb      	adds	r3, r7, r3
   2393a:	781b      	ldrb	r3, [r3, #0]
   2393c:	2b05      	cmp	r3, #5
   2393e:	d0eb      	beq.n	23918 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   23940:	46c0      	nop			; (mov r8, r8)
   23942:	46bd      	mov	sp, r7
   23944:	b005      	add	sp, #20
   23946:	bd90      	pop	{r4, r7, pc}
   23948:	2000061c 	.word	0x2000061c
   2394c:	000232e5 	.word	0x000232e5

00023950 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   23950:	b590      	push	{r4, r7, lr}
   23952:	b085      	sub	sp, #20
   23954:	af00      	add	r7, sp, #0
   23956:	0002      	movs	r2, r0
   23958:	6039      	str	r1, [r7, #0]
   2395a:	1dbb      	adds	r3, r7, #6
   2395c:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   2395e:	230f      	movs	r3, #15
   23960:	18fb      	adds	r3, r7, r3
   23962:	2200      	movs	r2, #0
   23964:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   23966:	4b0c      	ldr	r3, [pc, #48]	; (23998 <_eeprom_emulator_nvm_read_page+0x48>)
   23968:	685a      	ldr	r2, [r3, #4]
   2396a:	1dbb      	adds	r3, r7, #6
   2396c:	881b      	ldrh	r3, [r3, #0]
   2396e:	019b      	lsls	r3, r3, #6
   23970:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   23972:	0018      	movs	r0, r3
   23974:	230f      	movs	r3, #15
   23976:	18fc      	adds	r4, r7, r3
   23978:	683b      	ldr	r3, [r7, #0]
   2397a:	2240      	movs	r2, #64	; 0x40
   2397c:	0019      	movs	r1, r3
   2397e:	4b07      	ldr	r3, [pc, #28]	; (2399c <_eeprom_emulator_nvm_read_page+0x4c>)
   23980:	4798      	blx	r3
   23982:	0003      	movs	r3, r0
   23984:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   23986:	230f      	movs	r3, #15
   23988:	18fb      	adds	r3, r7, r3
   2398a:	781b      	ldrb	r3, [r3, #0]
   2398c:	2b05      	cmp	r3, #5
   2398e:	d0ea      	beq.n	23966 <_eeprom_emulator_nvm_read_page+0x16>
}
   23990:	46c0      	nop			; (mov r8, r8)
   23992:	46bd      	mov	sp, r7
   23994:	b005      	add	sp, #20
   23996:	bd90      	pop	{r4, r7, pc}
   23998:	2000061c 	.word	0x2000061c
   2399c:	00023549 	.word	0x00023549

000239a0 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   239a0:	b580      	push	{r7, lr}
   239a2:	b092      	sub	sp, #72	; 0x48
   239a4:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   239a6:	2346      	movs	r3, #70	; 0x46
   239a8:	18fb      	adds	r3, r7, r3
   239aa:	2200      	movs	r2, #0
   239ac:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   239ae:	4b32      	ldr	r3, [pc, #200]	; (23a78 <_eeprom_emulator_format_memory+0xd8>)
   239b0:	2287      	movs	r2, #135	; 0x87
   239b2:	2100      	movs	r1, #0
   239b4:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   239b6:	4b30      	ldr	r3, [pc, #192]	; (23a78 <_eeprom_emulator_format_memory+0xd8>)
   239b8:	2287      	movs	r2, #135	; 0x87
   239ba:	5c9b      	ldrb	r3, [r3, r2]
   239bc:	0018      	movs	r0, r3
   239be:	4b2f      	ldr	r3, [pc, #188]	; (23a7c <_eeprom_emulator_format_memory+0xdc>)
   239c0:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   239c2:	2344      	movs	r3, #68	; 0x44
   239c4:	18fb      	adds	r3, r7, r3
   239c6:	2204      	movs	r2, #4
   239c8:	801a      	strh	r2, [r3, #0]
   239ca:	e04a      	b.n	23a62 <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   239cc:	2344      	movs	r3, #68	; 0x44
   239ce:	18fb      	adds	r3, r7, r3
   239d0:	881a      	ldrh	r2, [r3, #0]
   239d2:	4b29      	ldr	r3, [pc, #164]	; (23a78 <_eeprom_emulator_format_memory+0xd8>)
   239d4:	891b      	ldrh	r3, [r3, #8]
   239d6:	3b01      	subs	r3, #1
   239d8:	429a      	cmp	r2, r3
   239da:	d03a      	beq.n	23a52 <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   239dc:	2344      	movs	r3, #68	; 0x44
   239de:	18fb      	adds	r3, r7, r3
   239e0:	881b      	ldrh	r3, [r3, #0]
   239e2:	2203      	movs	r2, #3
   239e4:	4013      	ands	r3, r2
   239e6:	b29b      	uxth	r3, r3
   239e8:	2b00      	cmp	r3, #0
   239ea:	d108      	bne.n	239fe <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   239ec:	2344      	movs	r3, #68	; 0x44
   239ee:	18fb      	adds	r3, r7, r3
   239f0:	881b      	ldrh	r3, [r3, #0]
   239f2:	089b      	lsrs	r3, r3, #2
   239f4:	b29b      	uxth	r3, r3
   239f6:	b2db      	uxtb	r3, r3
   239f8:	0018      	movs	r0, r3
   239fa:	4b20      	ldr	r3, [pc, #128]	; (23a7c <_eeprom_emulator_format_memory+0xdc>)
   239fc:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   239fe:	2344      	movs	r3, #68	; 0x44
   23a00:	18fb      	adds	r3, r7, r3
   23a02:	881b      	ldrh	r3, [r3, #0]
   23a04:	2203      	movs	r2, #3
   23a06:	4013      	ands	r3, r2
   23a08:	b29b      	uxth	r3, r3
   23a0a:	2b01      	cmp	r3, #1
   23a0c:	d822      	bhi.n	23a54 <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   23a0e:	1d3b      	adds	r3, r7, #4
   23a10:	2240      	movs	r2, #64	; 0x40
   23a12:	21ff      	movs	r1, #255	; 0xff
   23a14:	0018      	movs	r0, r3
   23a16:	4b1a      	ldr	r3, [pc, #104]	; (23a80 <_eeprom_emulator_format_memory+0xe0>)
   23a18:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   23a1a:	2346      	movs	r3, #70	; 0x46
   23a1c:	18fb      	adds	r3, r7, r3
   23a1e:	881b      	ldrh	r3, [r3, #0]
   23a20:	b2da      	uxtb	r2, r3
   23a22:	1d3b      	adds	r3, r7, #4
   23a24:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   23a26:	1d3a      	adds	r2, r7, #4
   23a28:	2344      	movs	r3, #68	; 0x44
   23a2a:	18fb      	adds	r3, r7, r3
   23a2c:	881b      	ldrh	r3, [r3, #0]
   23a2e:	0011      	movs	r1, r2
   23a30:	0018      	movs	r0, r3
   23a32:	4b14      	ldr	r3, [pc, #80]	; (23a84 <_eeprom_emulator_format_memory+0xe4>)
   23a34:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   23a36:	2344      	movs	r3, #68	; 0x44
   23a38:	18fb      	adds	r3, r7, r3
   23a3a:	881b      	ldrh	r3, [r3, #0]
   23a3c:	0018      	movs	r0, r3
   23a3e:	4b12      	ldr	r3, [pc, #72]	; (23a88 <_eeprom_emulator_format_memory+0xe8>)
   23a40:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   23a42:	2346      	movs	r3, #70	; 0x46
   23a44:	18fb      	adds	r3, r7, r3
   23a46:	881a      	ldrh	r2, [r3, #0]
   23a48:	2346      	movs	r3, #70	; 0x46
   23a4a:	18fb      	adds	r3, r7, r3
   23a4c:	3201      	adds	r2, #1
   23a4e:	801a      	strh	r2, [r3, #0]
   23a50:	e000      	b.n	23a54 <_eeprom_emulator_format_memory+0xb4>
			continue;
   23a52:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   23a54:	2344      	movs	r3, #68	; 0x44
   23a56:	18fb      	adds	r3, r7, r3
   23a58:	881a      	ldrh	r2, [r3, #0]
   23a5a:	2344      	movs	r3, #68	; 0x44
   23a5c:	18fb      	adds	r3, r7, r3
   23a5e:	3201      	adds	r2, #1
   23a60:	801a      	strh	r2, [r3, #0]
   23a62:	4b05      	ldr	r3, [pc, #20]	; (23a78 <_eeprom_emulator_format_memory+0xd8>)
   23a64:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   23a66:	2244      	movs	r2, #68	; 0x44
   23a68:	18ba      	adds	r2, r7, r2
   23a6a:	8812      	ldrh	r2, [r2, #0]
   23a6c:	429a      	cmp	r2, r3
   23a6e:	d3ad      	bcc.n	239cc <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   23a70:	46c0      	nop			; (mov r8, r8)
   23a72:	46bd      	mov	sp, r7
   23a74:	b012      	add	sp, #72	; 0x48
   23a76:	bd80      	pop	{r7, pc}
   23a78:	2000061c 	.word	0x2000061c
   23a7c:	0002386d 	.word	0x0002386d
   23a80:	00029657 	.word	0x00029657
   23a84:	000238b5 	.word	0x000238b5
   23a88:	00023905 	.word	0x00023905

00023a8c <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   23a8c:	b580      	push	{r7, lr}
   23a8e:	b082      	sub	sp, #8
   23a90:	af00      	add	r7, sp, #0
   23a92:	0002      	movs	r2, r0
   23a94:	1dbb      	adds	r3, r7, #6
   23a96:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   23a98:	4b14      	ldr	r3, [pc, #80]	; (23aec <_eeprom_emulator_is_full_row+0x60>)
   23a9a:	685a      	ldr	r2, [r3, #4]
   23a9c:	1dbb      	adds	r3, r7, #6
   23a9e:	881b      	ldrh	r3, [r3, #0]
   23aa0:	019b      	lsls	r3, r3, #6
   23aa2:	18d3      	adds	r3, r2, r3
   23aa4:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   23aa6:	4b11      	ldr	r3, [pc, #68]	; (23aec <_eeprom_emulator_is_full_row+0x60>)
   23aa8:	6859      	ldr	r1, [r3, #4]
   23aaa:	1dbb      	adds	r3, r7, #6
   23aac:	881b      	ldrh	r3, [r3, #0]
   23aae:	3302      	adds	r3, #2
   23ab0:	019b      	lsls	r3, r3, #6
   23ab2:	18cb      	adds	r3, r1, r3
   23ab4:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   23ab6:	429a      	cmp	r2, r3
   23ab8:	d011      	beq.n	23ade <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   23aba:	4b0c      	ldr	r3, [pc, #48]	; (23aec <_eeprom_emulator_is_full_row+0x60>)
   23abc:	685a      	ldr	r2, [r3, #4]
   23abe:	1dbb      	adds	r3, r7, #6
   23ac0:	881b      	ldrh	r3, [r3, #0]
   23ac2:	3301      	adds	r3, #1
   23ac4:	019b      	lsls	r3, r3, #6
   23ac6:	18d3      	adds	r3, r2, r3
   23ac8:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   23aca:	4b08      	ldr	r3, [pc, #32]	; (23aec <_eeprom_emulator_is_full_row+0x60>)
   23acc:	6859      	ldr	r1, [r3, #4]
   23ace:	1dbb      	adds	r3, r7, #6
   23ad0:	881b      	ldrh	r3, [r3, #0]
   23ad2:	3302      	adds	r3, #2
   23ad4:	019b      	lsls	r3, r3, #6
   23ad6:	18cb      	adds	r3, r1, r3
   23ad8:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   23ada:	429a      	cmp	r2, r3
   23adc:	d101      	bne.n	23ae2 <_eeprom_emulator_is_full_row+0x56>
		return true;
   23ade:	2301      	movs	r3, #1
   23ae0:	e000      	b.n	23ae4 <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   23ae2:	2300      	movs	r3, #0
	}
}
   23ae4:	0018      	movs	r0, r3
   23ae6:	46bd      	mov	sp, r7
   23ae8:	b002      	add	sp, #8
   23aea:	bd80      	pop	{r7, pc}
   23aec:	2000061c 	.word	0x2000061c

00023af0 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   23af0:	b580      	push	{r7, lr}
   23af2:	b082      	sub	sp, #8
   23af4:	af00      	add	r7, sp, #0
   23af6:	0002      	movs	r2, r0
   23af8:	1dbb      	adds	r3, r7, #6
   23afa:	801a      	strh	r2, [r3, #0]
   23afc:	1d3b      	adds	r3, r7, #4
   23afe:	1c0a      	adds	r2, r1, #0
   23b00:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   23b02:	1dbb      	adds	r3, r7, #6
   23b04:	881b      	ldrh	r3, [r3, #0]
   23b06:	0018      	movs	r0, r3
   23b08:	4b0c      	ldr	r3, [pc, #48]	; (23b3c <_eeprom_emulator_erase_invalid_page+0x4c>)
   23b0a:	4798      	blx	r3
   23b0c:	1e03      	subs	r3, r0, #0
   23b0e:	d008      	beq.n	23b22 <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   23b10:	1dbb      	adds	r3, r7, #6
   23b12:	881b      	ldrh	r3, [r3, #0]
   23b14:	089b      	lsrs	r3, r3, #2
   23b16:	b29b      	uxth	r3, r3
   23b18:	b2db      	uxtb	r3, r3
   23b1a:	0018      	movs	r0, r3
   23b1c:	4b08      	ldr	r3, [pc, #32]	; (23b40 <_eeprom_emulator_erase_invalid_page+0x50>)
   23b1e:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   23b20:	e007      	b.n	23b32 <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   23b22:	1d3b      	adds	r3, r7, #4
   23b24:	881b      	ldrh	r3, [r3, #0]
   23b26:	089b      	lsrs	r3, r3, #2
   23b28:	b29b      	uxth	r3, r3
   23b2a:	b2db      	uxtb	r3, r3
   23b2c:	0018      	movs	r0, r3
   23b2e:	4b04      	ldr	r3, [pc, #16]	; (23b40 <_eeprom_emulator_erase_invalid_page+0x50>)
   23b30:	4798      	blx	r3
}
   23b32:	46c0      	nop			; (mov r8, r8)
   23b34:	46bd      	mov	sp, r7
   23b36:	b002      	add	sp, #8
   23b38:	bd80      	pop	{r7, pc}
   23b3a:	46c0      	nop			; (mov r8, r8)
   23b3c:	00023a8d 	.word	0x00023a8d
   23b40:	0002386d 	.word	0x0002386d

00023b44 <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   23b44:	b580      	push	{r7, lr}
   23b46:	b082      	sub	sp, #8
   23b48:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   23b4a:	1dbb      	adds	r3, r7, #6
   23b4c:	2200      	movs	r2, #0
   23b4e:	801a      	strh	r2, [r3, #0]
   23b50:	1d3b      	adds	r3, r7, #4
   23b52:	2200      	movs	r2, #0
   23b54:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   23b56:	1dbb      	adds	r3, r7, #6
   23b58:	2200      	movs	r2, #0
   23b5a:	801a      	strh	r2, [r3, #0]
   23b5c:	e04a      	b.n	23bf4 <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   23b5e:	4b2a      	ldr	r3, [pc, #168]	; (23c08 <_eeprom_emulator_check_logical_page+0xc4>)
   23b60:	685a      	ldr	r2, [r3, #4]
   23b62:	1dbb      	adds	r3, r7, #6
   23b64:	881b      	ldrh	r3, [r3, #0]
   23b66:	019b      	lsls	r3, r3, #6
   23b68:	18d3      	adds	r3, r2, r3
   23b6a:	781a      	ldrb	r2, [r3, #0]
   23b6c:	1cbb      	adds	r3, r7, #2
   23b6e:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23b70:	1cbb      	adds	r3, r7, #2
   23b72:	881b      	ldrh	r3, [r3, #0]
   23b74:	2bff      	cmp	r3, #255	; 0xff
   23b76:	d037      	beq.n	23be8 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23b78:	1d3b      	adds	r3, r7, #4
   23b7a:	1dba      	adds	r2, r7, #6
   23b7c:	8812      	ldrh	r2, [r2, #0]
   23b7e:	3204      	adds	r2, #4
   23b80:	801a      	strh	r2, [r3, #0]
   23b82:	e02a      	b.n	23bda <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   23b84:	1d3b      	adds	r3, r7, #4
   23b86:	881a      	ldrh	r2, [r3, #0]
   23b88:	4b1f      	ldr	r3, [pc, #124]	; (23c08 <_eeprom_emulator_check_logical_page+0xc4>)
   23b8a:	891b      	ldrh	r3, [r3, #8]
   23b8c:	3b01      	subs	r3, #1
   23b8e:	429a      	cmp	r2, r3
   23b90:	d01b      	beq.n	23bca <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   23b92:	4b1d      	ldr	r3, [pc, #116]	; (23c08 <_eeprom_emulator_check_logical_page+0xc4>)
   23b94:	685a      	ldr	r2, [r3, #4]
   23b96:	1d3b      	adds	r3, r7, #4
   23b98:	881b      	ldrh	r3, [r3, #0]
   23b9a:	019b      	lsls	r3, r3, #6
   23b9c:	18d3      	adds	r3, r2, r3
   23b9e:	781a      	ldrb	r2, [r3, #0]
   23ba0:	003b      	movs	r3, r7
   23ba2:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   23ba4:	003b      	movs	r3, r7
   23ba6:	881b      	ldrh	r3, [r3, #0]
   23ba8:	2bff      	cmp	r3, #255	; 0xff
   23baa:	d010      	beq.n	23bce <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   23bac:	1cba      	adds	r2, r7, #2
   23bae:	003b      	movs	r3, r7
   23bb0:	8812      	ldrh	r2, [r2, #0]
   23bb2:	881b      	ldrh	r3, [r3, #0]
   23bb4:	429a      	cmp	r2, r3
   23bb6:	d10b      	bne.n	23bd0 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   23bb8:	1d3b      	adds	r3, r7, #4
   23bba:	881a      	ldrh	r2, [r3, #0]
   23bbc:	1dbb      	adds	r3, r7, #6
   23bbe:	881b      	ldrh	r3, [r3, #0]
   23bc0:	0011      	movs	r1, r2
   23bc2:	0018      	movs	r0, r3
   23bc4:	4b11      	ldr	r3, [pc, #68]	; (23c0c <_eeprom_emulator_check_logical_page+0xc8>)
   23bc6:	4798      	blx	r3
   23bc8:	e002      	b.n	23bd0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   23bca:	46c0      	nop			; (mov r8, r8)
   23bcc:	e000      	b.n	23bd0 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   23bce:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   23bd0:	1d3b      	adds	r3, r7, #4
   23bd2:	1d3a      	adds	r2, r7, #4
   23bd4:	8812      	ldrh	r2, [r2, #0]
   23bd6:	3204      	adds	r2, #4
   23bd8:	801a      	strh	r2, [r3, #0]
   23bda:	4b0b      	ldr	r3, [pc, #44]	; (23c08 <_eeprom_emulator_check_logical_page+0xc4>)
   23bdc:	891b      	ldrh	r3, [r3, #8]
   23bde:	1d3a      	adds	r2, r7, #4
   23be0:	8812      	ldrh	r2, [r2, #0]
   23be2:	429a      	cmp	r2, r3
   23be4:	d3ce      	bcc.n	23b84 <_eeprom_emulator_check_logical_page+0x40>
   23be6:	e000      	b.n	23bea <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   23be8:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   23bea:	1dbb      	adds	r3, r7, #6
   23bec:	1dba      	adds	r2, r7, #6
   23bee:	8812      	ldrh	r2, [r2, #0]
   23bf0:	3204      	adds	r2, #4
   23bf2:	801a      	strh	r2, [r3, #0]
   23bf4:	4b04      	ldr	r3, [pc, #16]	; (23c08 <_eeprom_emulator_check_logical_page+0xc4>)
   23bf6:	891b      	ldrh	r3, [r3, #8]
   23bf8:	1dba      	adds	r2, r7, #6
   23bfa:	8812      	ldrh	r2, [r2, #0]
   23bfc:	429a      	cmp	r2, r3
   23bfe:	d3ae      	bcc.n	23b5e <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   23c00:	46c0      	nop			; (mov r8, r8)
   23c02:	46bd      	mov	sp, r7
   23c04:	b002      	add	sp, #8
   23c06:	bd80      	pop	{r7, pc}
   23c08:	2000061c 	.word	0x2000061c
   23c0c:	00023af1 	.word	0x00023af1

00023c10 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   23c10:	b580      	push	{r7, lr}
   23c12:	b084      	sub	sp, #16
   23c14:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   23c16:	4b51      	ldr	r3, [pc, #324]	; (23d5c <_eeprom_emulator_update_page_mapping+0x14c>)
   23c18:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   23c1a:	230e      	movs	r3, #14
   23c1c:	18fb      	adds	r3, r7, r3
   23c1e:	2200      	movs	r2, #0
   23c20:	801a      	strh	r2, [r3, #0]
   23c22:	e033      	b.n	23c8c <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   23c24:	230e      	movs	r3, #14
   23c26:	18fb      	adds	r3, r7, r3
   23c28:	881a      	ldrh	r2, [r3, #0]
   23c2a:	4b4d      	ldr	r3, [pc, #308]	; (23d60 <_eeprom_emulator_update_page_mapping+0x150>)
   23c2c:	891b      	ldrh	r3, [r3, #8]
   23c2e:	3b01      	subs	r3, #1
   23c30:	429a      	cmp	r2, r3
   23c32:	d023      	beq.n	23c7c <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   23c34:	4b4a      	ldr	r3, [pc, #296]	; (23d60 <_eeprom_emulator_update_page_mapping+0x150>)
   23c36:	685a      	ldr	r2, [r3, #4]
   23c38:	230e      	movs	r3, #14
   23c3a:	18fb      	adds	r3, r7, r3
   23c3c:	881b      	ldrh	r3, [r3, #0]
   23c3e:	019b      	lsls	r3, r3, #6
   23c40:	18d3      	adds	r3, r2, r3
   23c42:	781a      	ldrb	r2, [r3, #0]
   23c44:	2308      	movs	r3, #8
   23c46:	18fb      	adds	r3, r7, r3
   23c48:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   23c4a:	2308      	movs	r3, #8
   23c4c:	18fb      	adds	r3, r7, r3
   23c4e:	881b      	ldrh	r3, [r3, #0]
   23c50:	2bff      	cmp	r3, #255	; 0xff
   23c52:	d014      	beq.n	23c7e <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   23c54:	4b42      	ldr	r3, [pc, #264]	; (23d60 <_eeprom_emulator_update_page_mapping+0x150>)
   23c56:	7a9b      	ldrb	r3, [r3, #10]
   23c58:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   23c5a:	2208      	movs	r2, #8
   23c5c:	18ba      	adds	r2, r7, r2
   23c5e:	8812      	ldrh	r2, [r2, #0]
   23c60:	429a      	cmp	r2, r3
   23c62:	d20c      	bcs.n	23c7e <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   23c64:	2308      	movs	r3, #8
   23c66:	18fb      	adds	r3, r7, r3
   23c68:	881b      	ldrh	r3, [r3, #0]
   23c6a:	220e      	movs	r2, #14
   23c6c:	18ba      	adds	r2, r7, r2
   23c6e:	8812      	ldrh	r2, [r2, #0]
   23c70:	b2d1      	uxtb	r1, r2
   23c72:	4a3b      	ldr	r2, [pc, #236]	; (23d60 <_eeprom_emulator_update_page_mapping+0x150>)
   23c74:	18d3      	adds	r3, r2, r3
   23c76:	1c0a      	adds	r2, r1, #0
   23c78:	72da      	strb	r2, [r3, #11]
   23c7a:	e000      	b.n	23c7e <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   23c7c:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   23c7e:	230e      	movs	r3, #14
   23c80:	18fb      	adds	r3, r7, r3
   23c82:	881a      	ldrh	r2, [r3, #0]
   23c84:	230e      	movs	r3, #14
   23c86:	18fb      	adds	r3, r7, r3
   23c88:	3201      	adds	r2, #1
   23c8a:	801a      	strh	r2, [r3, #0]
   23c8c:	4b34      	ldr	r3, [pc, #208]	; (23d60 <_eeprom_emulator_update_page_mapping+0x150>)
   23c8e:	891b      	ldrh	r3, [r3, #8]
   23c90:	220e      	movs	r2, #14
   23c92:	18ba      	adds	r2, r7, r2
   23c94:	8812      	ldrh	r2, [r2, #0]
   23c96:	429a      	cmp	r2, r3
   23c98:	d3c4      	bcc.n	23c24 <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   23c9a:	4b31      	ldr	r3, [pc, #196]	; (23d60 <_eeprom_emulator_update_page_mapping+0x150>)
   23c9c:	2287      	movs	r2, #135	; 0x87
   23c9e:	213f      	movs	r1, #63	; 0x3f
   23ca0:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23ca2:	230c      	movs	r3, #12
   23ca4:	18fb      	adds	r3, r7, r3
   23ca6:	2200      	movs	r2, #0
   23ca8:	801a      	strh	r2, [r3, #0]
   23caa:	e04a      	b.n	23d42 <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   23cac:	230b      	movs	r3, #11
   23cae:	18fb      	adds	r3, r7, r3
   23cb0:	2201      	movs	r2, #1
   23cb2:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23cb4:	230a      	movs	r3, #10
   23cb6:	18fb      	adds	r3, r7, r3
   23cb8:	2200      	movs	r2, #0
   23cba:	701a      	strb	r2, [r3, #0]
   23cbc:	e028      	b.n	23d10 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   23cbe:	230c      	movs	r3, #12
   23cc0:	18fb      	adds	r3, r7, r3
   23cc2:	881b      	ldrh	r3, [r3, #0]
   23cc4:	009b      	lsls	r3, r3, #2
   23cc6:	b299      	uxth	r1, r3
   23cc8:	230a      	movs	r3, #10
   23cca:	18fb      	adds	r3, r7, r3
   23ccc:	781b      	ldrb	r3, [r3, #0]
   23cce:	b29a      	uxth	r2, r3
   23cd0:	1dbb      	adds	r3, r7, #6
   23cd2:	188a      	adds	r2, r1, r2
   23cd4:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   23cd6:	1dbb      	adds	r3, r7, #6
   23cd8:	881a      	ldrh	r2, [r3, #0]
   23cda:	4b21      	ldr	r3, [pc, #132]	; (23d60 <_eeprom_emulator_update_page_mapping+0x150>)
   23cdc:	891b      	ldrh	r3, [r3, #8]
   23cde:	3b01      	subs	r3, #1
   23ce0:	429a      	cmp	r2, r3
   23ce2:	d00d      	beq.n	23d00 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   23ce4:	4b1e      	ldr	r3, [pc, #120]	; (23d60 <_eeprom_emulator_update_page_mapping+0x150>)
   23ce6:	685a      	ldr	r2, [r3, #4]
   23ce8:	1dbb      	adds	r3, r7, #6
   23cea:	881b      	ldrh	r3, [r3, #0]
   23cec:	019b      	lsls	r3, r3, #6
   23cee:	18d3      	adds	r3, r2, r3
   23cf0:	781b      	ldrb	r3, [r3, #0]
   23cf2:	2bff      	cmp	r3, #255	; 0xff
   23cf4:	d005      	beq.n	23d02 <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   23cf6:	230b      	movs	r3, #11
   23cf8:	18fb      	adds	r3, r7, r3
   23cfa:	2200      	movs	r2, #0
   23cfc:	701a      	strb	r2, [r3, #0]
   23cfe:	e000      	b.n	23d02 <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   23d00:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23d02:	230a      	movs	r3, #10
   23d04:	18fb      	adds	r3, r7, r3
   23d06:	781a      	ldrb	r2, [r3, #0]
   23d08:	230a      	movs	r3, #10
   23d0a:	18fb      	adds	r3, r7, r3
   23d0c:	3201      	adds	r2, #1
   23d0e:	701a      	strb	r2, [r3, #0]
   23d10:	230a      	movs	r3, #10
   23d12:	18fb      	adds	r3, r7, r3
   23d14:	781b      	ldrb	r3, [r3, #0]
   23d16:	2b03      	cmp	r3, #3
   23d18:	d9d1      	bls.n	23cbe <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   23d1a:	230b      	movs	r3, #11
   23d1c:	18fb      	adds	r3, r7, r3
   23d1e:	781b      	ldrb	r3, [r3, #0]
   23d20:	2b00      	cmp	r3, #0
   23d22:	d007      	beq.n	23d34 <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   23d24:	230c      	movs	r3, #12
   23d26:	18fb      	adds	r3, r7, r3
   23d28:	881b      	ldrh	r3, [r3, #0]
   23d2a:	b2d9      	uxtb	r1, r3
   23d2c:	4b0c      	ldr	r3, [pc, #48]	; (23d60 <_eeprom_emulator_update_page_mapping+0x150>)
   23d2e:	2287      	movs	r2, #135	; 0x87
   23d30:	5499      	strb	r1, [r3, r2]
			break;
   23d32:	e00f      	b.n	23d54 <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   23d34:	230c      	movs	r3, #12
   23d36:	18fb      	adds	r3, r7, r3
   23d38:	881a      	ldrh	r2, [r3, #0]
   23d3a:	230c      	movs	r3, #12
   23d3c:	18fb      	adds	r3, r7, r3
   23d3e:	3201      	adds	r2, #1
   23d40:	801a      	strh	r2, [r3, #0]
   23d42:	4b07      	ldr	r3, [pc, #28]	; (23d60 <_eeprom_emulator_update_page_mapping+0x150>)
   23d44:	891b      	ldrh	r3, [r3, #8]
   23d46:	089b      	lsrs	r3, r3, #2
   23d48:	b29b      	uxth	r3, r3
   23d4a:	220c      	movs	r2, #12
   23d4c:	18ba      	adds	r2, r7, r2
   23d4e:	8812      	ldrh	r2, [r2, #0]
   23d50:	429a      	cmp	r2, r3
   23d52:	d3ab      	bcc.n	23cac <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   23d54:	46c0      	nop			; (mov r8, r8)
   23d56:	46bd      	mov	sp, r7
   23d58:	b004      	add	sp, #16
   23d5a:	bd80      	pop	{r7, pc}
   23d5c:	00023b45 	.word	0x00023b45
   23d60:	2000061c 	.word	0x2000061c

00023d64 <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   23d64:	b580      	push	{r7, lr}
   23d66:	b084      	sub	sp, #16
   23d68:	af00      	add	r7, sp, #0
   23d6a:	0002      	movs	r2, r0
   23d6c:	6039      	str	r1, [r7, #0]
   23d6e:	1dfb      	adds	r3, r7, #7
   23d70:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   23d72:	230e      	movs	r3, #14
   23d74:	18fb      	adds	r3, r7, r3
   23d76:	1dfa      	adds	r2, r7, #7
   23d78:	7812      	ldrb	r2, [r2, #0]
   23d7a:	0892      	lsrs	r2, r2, #2
   23d7c:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   23d7e:	230d      	movs	r3, #13
   23d80:	18fb      	adds	r3, r7, r3
   23d82:	1dfa      	adds	r2, r7, #7
   23d84:	7812      	ldrb	r2, [r2, #0]
   23d86:	2103      	movs	r1, #3
   23d88:	400a      	ands	r2, r1
   23d8a:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   23d8c:	230f      	movs	r3, #15
   23d8e:	18fb      	adds	r3, r7, r3
   23d90:	220d      	movs	r2, #13
   23d92:	18ba      	adds	r2, r7, r2
   23d94:	7812      	ldrb	r2, [r2, #0]
   23d96:	701a      	strb	r2, [r3, #0]
   23d98:	e023      	b.n	23de2 <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   23d9a:	230e      	movs	r3, #14
   23d9c:	18fb      	adds	r3, r7, r3
   23d9e:	781b      	ldrb	r3, [r3, #0]
   23da0:	009b      	lsls	r3, r3, #2
   23da2:	b2d9      	uxtb	r1, r3
   23da4:	230c      	movs	r3, #12
   23da6:	18fb      	adds	r3, r7, r3
   23da8:	220f      	movs	r2, #15
   23daa:	18ba      	adds	r2, r7, r2
   23dac:	7812      	ldrb	r2, [r2, #0]
   23dae:	188a      	adds	r2, r1, r2
   23db0:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   23db2:	4b11      	ldr	r3, [pc, #68]	; (23df8 <_eeprom_emulator_is_page_free_on_row+0x94>)
   23db4:	685a      	ldr	r2, [r3, #4]
   23db6:	230c      	movs	r3, #12
   23db8:	18fb      	adds	r3, r7, r3
   23dba:	781b      	ldrb	r3, [r3, #0]
   23dbc:	019b      	lsls	r3, r3, #6
   23dbe:	18d3      	adds	r3, r2, r3
   23dc0:	781b      	ldrb	r3, [r3, #0]
   23dc2:	2bff      	cmp	r3, #255	; 0xff
   23dc4:	d106      	bne.n	23dd4 <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   23dc6:	683b      	ldr	r3, [r7, #0]
   23dc8:	220c      	movs	r2, #12
   23dca:	18ba      	adds	r2, r7, r2
   23dcc:	7812      	ldrb	r2, [r2, #0]
   23dce:	701a      	strb	r2, [r3, #0]
			return true;
   23dd0:	2301      	movs	r3, #1
   23dd2:	e00c      	b.n	23dee <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   23dd4:	230f      	movs	r3, #15
   23dd6:	18fb      	adds	r3, r7, r3
   23dd8:	781a      	ldrb	r2, [r3, #0]
   23dda:	230f      	movs	r3, #15
   23ddc:	18fb      	adds	r3, r7, r3
   23dde:	3201      	adds	r2, #1
   23de0:	701a      	strb	r2, [r3, #0]
   23de2:	230f      	movs	r3, #15
   23de4:	18fb      	adds	r3, r7, r3
   23de6:	781b      	ldrb	r3, [r3, #0]
   23de8:	2b03      	cmp	r3, #3
   23dea:	d9d6      	bls.n	23d9a <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   23dec:	2300      	movs	r3, #0
}
   23dee:	0018      	movs	r0, r3
   23df0:	46bd      	mov	sp, r7
   23df2:	b004      	add	sp, #16
   23df4:	bd80      	pop	{r7, pc}
   23df6:	46c0      	nop			; (mov r8, r8)
   23df8:	2000061c 	.word	0x2000061c

00023dfc <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   23dfc:	b580      	push	{r7, lr}
   23dfe:	b086      	sub	sp, #24
   23e00:	af00      	add	r7, sp, #0
   23e02:	603a      	str	r2, [r7, #0]
   23e04:	1dfb      	adds	r3, r7, #7
   23e06:	1c02      	adds	r2, r0, #0
   23e08:	701a      	strb	r2, [r3, #0]
   23e0a:	1dbb      	adds	r3, r7, #6
   23e0c:	1c0a      	adds	r2, r1, #0
   23e0e:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   23e10:	2314      	movs	r3, #20
   23e12:	18fb      	adds	r3, r7, r3
   23e14:	2200      	movs	r2, #0
   23e16:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   23e18:	4b69      	ldr	r3, [pc, #420]	; (23fc0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23e1a:	685b      	ldr	r3, [r3, #4]
   23e1c:	1dfa      	adds	r2, r7, #7
   23e1e:	7812      	ldrb	r2, [r2, #0]
   23e20:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   23e22:	189b      	adds	r3, r3, r2
   23e24:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   23e26:	693b      	ldr	r3, [r7, #16]
   23e28:	781a      	ldrb	r2, [r3, #0]
   23e2a:	2308      	movs	r3, #8
   23e2c:	18fb      	adds	r3, r7, r3
   23e2e:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   23e30:	1dfb      	adds	r3, r7, #7
   23e32:	781b      	ldrb	r3, [r3, #0]
   23e34:	009b      	lsls	r3, r3, #2
   23e36:	b2da      	uxtb	r2, r3
   23e38:	2308      	movs	r3, #8
   23e3a:	18fb      	adds	r3, r7, r3
   23e3c:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   23e3e:	693b      	ldr	r3, [r7, #16]
   23e40:	3340      	adds	r3, #64	; 0x40
   23e42:	781a      	ldrb	r2, [r3, #0]
   23e44:	2308      	movs	r3, #8
   23e46:	18fb      	adds	r3, r7, r3
   23e48:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   23e4a:	1dfb      	adds	r3, r7, #7
   23e4c:	781b      	ldrb	r3, [r3, #0]
   23e4e:	009b      	lsls	r3, r3, #2
   23e50:	b2db      	uxtb	r3, r3
   23e52:	3301      	adds	r3, #1
   23e54:	b2da      	uxtb	r2, r3
   23e56:	2308      	movs	r3, #8
   23e58:	18fb      	adds	r3, r7, r3
   23e5a:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   23e5c:	2317      	movs	r3, #23
   23e5e:	18fb      	adds	r3, r7, r3
   23e60:	2200      	movs	r2, #0
   23e62:	701a      	strb	r2, [r3, #0]
   23e64:	e03a      	b.n	23edc <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23e66:	2316      	movs	r3, #22
   23e68:	18fb      	adds	r3, r7, r3
   23e6a:	2202      	movs	r2, #2
   23e6c:	701a      	strb	r2, [r3, #0]
   23e6e:	e029      	b.n	23ec4 <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   23e70:	2317      	movs	r3, #23
   23e72:	18fb      	adds	r3, r7, r3
   23e74:	781a      	ldrb	r2, [r3, #0]
   23e76:	2308      	movs	r3, #8
   23e78:	18fb      	adds	r3, r7, r3
   23e7a:	0052      	lsls	r2, r2, #1
   23e7c:	5cd2      	ldrb	r2, [r2, r3]
   23e7e:	2316      	movs	r3, #22
   23e80:	18fb      	adds	r3, r7, r3
   23e82:	781b      	ldrb	r3, [r3, #0]
   23e84:	019b      	lsls	r3, r3, #6
   23e86:	6939      	ldr	r1, [r7, #16]
   23e88:	18cb      	adds	r3, r1, r3
   23e8a:	781b      	ldrb	r3, [r3, #0]
   23e8c:	429a      	cmp	r2, r3
   23e8e:	d112      	bne.n	23eb6 <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   23e90:	2317      	movs	r3, #23
   23e92:	18fb      	adds	r3, r7, r3
   23e94:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   23e96:	1dfa      	adds	r2, r7, #7
   23e98:	7812      	ldrb	r2, [r2, #0]
   23e9a:	0092      	lsls	r2, r2, #2
   23e9c:	b2d1      	uxtb	r1, r2
   23e9e:	2216      	movs	r2, #22
   23ea0:	18ba      	adds	r2, r7, r2
   23ea2:	7812      	ldrb	r2, [r2, #0]
   23ea4:	188a      	adds	r2, r1, r2
   23ea6:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   23ea8:	2208      	movs	r2, #8
   23eaa:	18ba      	adds	r2, r7, r2
   23eac:	005b      	lsls	r3, r3, #1
   23eae:	18d3      	adds	r3, r2, r3
   23eb0:	3301      	adds	r3, #1
   23eb2:	1c0a      	adds	r2, r1, #0
   23eb4:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   23eb6:	2316      	movs	r3, #22
   23eb8:	18fb      	adds	r3, r7, r3
   23eba:	781a      	ldrb	r2, [r3, #0]
   23ebc:	2316      	movs	r3, #22
   23ebe:	18fb      	adds	r3, r7, r3
   23ec0:	3201      	adds	r2, #1
   23ec2:	701a      	strb	r2, [r3, #0]
   23ec4:	2316      	movs	r3, #22
   23ec6:	18fb      	adds	r3, r7, r3
   23ec8:	781b      	ldrb	r3, [r3, #0]
   23eca:	2b03      	cmp	r3, #3
   23ecc:	d9d0      	bls.n	23e70 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   23ece:	2317      	movs	r3, #23
   23ed0:	18fb      	adds	r3, r7, r3
   23ed2:	781a      	ldrb	r2, [r3, #0]
   23ed4:	2317      	movs	r3, #23
   23ed6:	18fb      	adds	r3, r7, r3
   23ed8:	3201      	adds	r2, #1
   23eda:	701a      	strb	r2, [r3, #0]
   23edc:	2317      	movs	r3, #23
   23ede:	18fb      	adds	r3, r7, r3
   23ee0:	781b      	ldrb	r3, [r3, #0]
   23ee2:	2b01      	cmp	r3, #1
   23ee4:	d9bf      	bls.n	23e66 <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   23ee6:	2315      	movs	r3, #21
   23ee8:	18fb      	adds	r3, r7, r3
   23eea:	2200      	movs	r2, #0
   23eec:	701a      	strb	r2, [r3, #0]
   23eee:	e051      	b.n	23f94 <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   23ef0:	4b33      	ldr	r3, [pc, #204]	; (23fc0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23ef2:	2287      	movs	r2, #135	; 0x87
   23ef4:	5c9b      	ldrb	r3, [r3, r2]
   23ef6:	009a      	lsls	r2, r3, #2
   23ef8:	2315      	movs	r3, #21
   23efa:	18fb      	adds	r3, r7, r3
   23efc:	781b      	ldrb	r3, [r3, #0]
   23efe:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   23f00:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   23f02:	4b30      	ldr	r3, [pc, #192]	; (23fc4 <_eeprom_emulator_move_data_to_spare+0x1c8>)
   23f04:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   23f06:	2315      	movs	r3, #21
   23f08:	18fb      	adds	r3, r7, r3
   23f0a:	781a      	ldrb	r2, [r3, #0]
   23f0c:	2308      	movs	r3, #8
   23f0e:	18fb      	adds	r3, r7, r3
   23f10:	0052      	lsls	r2, r2, #1
   23f12:	5cd3      	ldrb	r3, [r2, r3]
   23f14:	1dba      	adds	r2, r7, #6
   23f16:	7812      	ldrb	r2, [r2, #0]
   23f18:	429a      	cmp	r2, r3
   23f1a:	d10d      	bne.n	23f38 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   23f1c:	4b28      	ldr	r3, [pc, #160]	; (23fc0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23f1e:	1dba      	adds	r2, r7, #6
   23f20:	2188      	movs	r1, #136	; 0x88
   23f22:	7812      	ldrb	r2, [r2, #0]
   23f24:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   23f26:	4b26      	ldr	r3, [pc, #152]	; (23fc0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23f28:	228c      	movs	r2, #140	; 0x8c
   23f2a:	6839      	ldr	r1, [r7, #0]
   23f2c:	189b      	adds	r3, r3, r2
   23f2e:	223c      	movs	r2, #60	; 0x3c
   23f30:	0018      	movs	r0, r3
   23f32:	4b25      	ldr	r3, [pc, #148]	; (23fc8 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   23f34:	4798      	blx	r3
   23f36:	e00e      	b.n	23f56 <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   23f38:	2315      	movs	r3, #21
   23f3a:	18fb      	adds	r3, r7, r3
   23f3c:	781b      	ldrb	r3, [r3, #0]
   23f3e:	2208      	movs	r2, #8
   23f40:	18ba      	adds	r2, r7, r2
   23f42:	005b      	lsls	r3, r3, #1
   23f44:	18d3      	adds	r3, r2, r3
   23f46:	3301      	adds	r3, #1
   23f48:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   23f4a:	b29b      	uxth	r3, r3
   23f4c:	4a1f      	ldr	r2, [pc, #124]	; (23fcc <_eeprom_emulator_move_data_to_spare+0x1d0>)
   23f4e:	0011      	movs	r1, r2
   23f50:	0018      	movs	r0, r3
   23f52:	4b1f      	ldr	r3, [pc, #124]	; (23fd0 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   23f54:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   23f56:	68fb      	ldr	r3, [r7, #12]
   23f58:	b29b      	uxth	r3, r3
   23f5a:	4a1c      	ldr	r2, [pc, #112]	; (23fcc <_eeprom_emulator_move_data_to_spare+0x1d0>)
   23f5c:	0011      	movs	r1, r2
   23f5e:	0018      	movs	r0, r3
   23f60:	4b1c      	ldr	r3, [pc, #112]	; (23fd4 <_eeprom_emulator_move_data_to_spare+0x1d8>)
   23f62:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   23f64:	2315      	movs	r3, #21
   23f66:	18fb      	adds	r3, r7, r3
   23f68:	781a      	ldrb	r2, [r3, #0]
   23f6a:	2308      	movs	r3, #8
   23f6c:	18fb      	adds	r3, r7, r3
   23f6e:	0052      	lsls	r2, r2, #1
   23f70:	5cd3      	ldrb	r3, [r2, r3]
   23f72:	0019      	movs	r1, r3
   23f74:	68fb      	ldr	r3, [r7, #12]
   23f76:	b2da      	uxtb	r2, r3
   23f78:	4b11      	ldr	r3, [pc, #68]	; (23fc0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23f7a:	185b      	adds	r3, r3, r1
   23f7c:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   23f7e:	4b10      	ldr	r3, [pc, #64]	; (23fc0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23f80:	22c8      	movs	r2, #200	; 0xc8
   23f82:	2101      	movs	r1, #1
   23f84:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   23f86:	2315      	movs	r3, #21
   23f88:	18fb      	adds	r3, r7, r3
   23f8a:	781a      	ldrb	r2, [r3, #0]
   23f8c:	2315      	movs	r3, #21
   23f8e:	18fb      	adds	r3, r7, r3
   23f90:	3201      	adds	r2, #1
   23f92:	701a      	strb	r2, [r3, #0]
   23f94:	2315      	movs	r3, #21
   23f96:	18fb      	adds	r3, r7, r3
   23f98:	781b      	ldrb	r3, [r3, #0]
   23f9a:	2b01      	cmp	r3, #1
   23f9c:	d9a8      	bls.n	23ef0 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   23f9e:	1dfb      	adds	r3, r7, #7
   23fa0:	781b      	ldrb	r3, [r3, #0]
   23fa2:	0018      	movs	r0, r3
   23fa4:	4b0c      	ldr	r3, [pc, #48]	; (23fd8 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   23fa6:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   23fa8:	4b05      	ldr	r3, [pc, #20]	; (23fc0 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   23faa:	1dfa      	adds	r2, r7, #7
   23fac:	2187      	movs	r1, #135	; 0x87
   23fae:	7812      	ldrb	r2, [r2, #0]
   23fb0:	545a      	strb	r2, [r3, r1]

	return error_code;
   23fb2:	2314      	movs	r3, #20
   23fb4:	18fb      	adds	r3, r7, r3
   23fb6:	781b      	ldrb	r3, [r3, #0]
}
   23fb8:	0018      	movs	r0, r3
   23fba:	46bd      	mov	sp, r7
   23fbc:	b006      	add	sp, #24
   23fbe:	bd80      	pop	{r7, pc}
   23fc0:	2000061c 	.word	0x2000061c
   23fc4:	000243f9 	.word	0x000243f9
   23fc8:	00029621 	.word	0x00029621
   23fcc:	200006a4 	.word	0x200006a4
   23fd0:	00023951 	.word	0x00023951
   23fd4:	000238b5 	.word	0x000238b5
   23fd8:	0002386d 	.word	0x0002386d

00023fdc <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   23fdc:	b590      	push	{r4, r7, lr}
   23fde:	b095      	sub	sp, #84	; 0x54
   23fe0:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   23fe2:	2340      	movs	r3, #64	; 0x40
   23fe4:	18fb      	adds	r3, r7, r3
   23fe6:	4a29      	ldr	r2, [pc, #164]	; (2408c <_eeprom_emulator_create_master_page+0xb0>)
   23fe8:	ca13      	ldmia	r2!, {r0, r1, r4}
   23fea:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   23fec:	003b      	movs	r3, r7
   23fee:	2240      	movs	r2, #64	; 0x40
   23ff0:	21ff      	movs	r1, #255	; 0xff
   23ff2:	0018      	movs	r0, r3
   23ff4:	4b26      	ldr	r3, [pc, #152]	; (24090 <_eeprom_emulator_create_master_page+0xb4>)
   23ff6:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   23ff8:	234f      	movs	r3, #79	; 0x4f
   23ffa:	18fb      	adds	r3, r7, r3
   23ffc:	2200      	movs	r2, #0
   23ffe:	701a      	strb	r2, [r3, #0]
   24000:	e013      	b.n	2402a <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   24002:	234f      	movs	r3, #79	; 0x4f
   24004:	18fb      	adds	r3, r7, r3
   24006:	781a      	ldrb	r2, [r3, #0]
   24008:	234f      	movs	r3, #79	; 0x4f
   2400a:	18fb      	adds	r3, r7, r3
   2400c:	7819      	ldrb	r1, [r3, #0]
   2400e:	2340      	movs	r3, #64	; 0x40
   24010:	18fb      	adds	r3, r7, r3
   24012:	0089      	lsls	r1, r1, #2
   24014:	58c9      	ldr	r1, [r1, r3]
   24016:	003b      	movs	r3, r7
   24018:	0092      	lsls	r2, r2, #2
   2401a:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   2401c:	234f      	movs	r3, #79	; 0x4f
   2401e:	18fb      	adds	r3, r7, r3
   24020:	781a      	ldrb	r2, [r3, #0]
   24022:	234f      	movs	r3, #79	; 0x4f
   24024:	18fb      	adds	r3, r7, r3
   24026:	3201      	adds	r2, #1
   24028:	701a      	strb	r2, [r3, #0]
   2402a:	234f      	movs	r3, #79	; 0x4f
   2402c:	18fb      	adds	r3, r7, r3
   2402e:	781b      	ldrb	r3, [r3, #0]
   24030:	2b02      	cmp	r3, #2
   24032:	d9e6      	bls.n	24002 <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   24034:	003b      	movs	r3, r7
   24036:	2201      	movs	r2, #1
   24038:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   2403a:	003b      	movs	r3, r7
   2403c:	2201      	movs	r2, #1
   2403e:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   24040:	003b      	movs	r3, r7
   24042:	2200      	movs	r2, #0
   24044:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   24046:	003b      	movs	r3, r7
   24048:	2200      	movs	r2, #0
   2404a:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   2404c:	4b11      	ldr	r3, [pc, #68]	; (24094 <_eeprom_emulator_create_master_page+0xb8>)
   2404e:	891b      	ldrh	r3, [r3, #8]
   24050:	3b01      	subs	r3, #1
   24052:	2b00      	cmp	r3, #0
   24054:	da00      	bge.n	24058 <_eeprom_emulator_create_master_page+0x7c>
   24056:	3303      	adds	r3, #3
   24058:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   2405a:	b2db      	uxtb	r3, r3
   2405c:	0018      	movs	r0, r3
   2405e:	4b0e      	ldr	r3, [pc, #56]	; (24098 <_eeprom_emulator_create_master_page+0xbc>)
   24060:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   24062:	4b0c      	ldr	r3, [pc, #48]	; (24094 <_eeprom_emulator_create_master_page+0xb8>)
   24064:	891b      	ldrh	r3, [r3, #8]
   24066:	3b01      	subs	r3, #1
   24068:	b29b      	uxth	r3, r3
   2406a:	003a      	movs	r2, r7
   2406c:	0011      	movs	r1, r2
   2406e:	0018      	movs	r0, r3
   24070:	4b0a      	ldr	r3, [pc, #40]	; (2409c <_eeprom_emulator_create_master_page+0xc0>)
   24072:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   24074:	4b07      	ldr	r3, [pc, #28]	; (24094 <_eeprom_emulator_create_master_page+0xb8>)
   24076:	891b      	ldrh	r3, [r3, #8]
   24078:	3b01      	subs	r3, #1
   2407a:	b29b      	uxth	r3, r3
   2407c:	0018      	movs	r0, r3
   2407e:	4b08      	ldr	r3, [pc, #32]	; (240a0 <_eeprom_emulator_create_master_page+0xc4>)
   24080:	4798      	blx	r3
}
   24082:	46c0      	nop			; (mov r8, r8)
   24084:	46bd      	mov	sp, r7
   24086:	b015      	add	sp, #84	; 0x54
   24088:	bd90      	pop	{r4, r7, pc}
   2408a:	46c0      	nop			; (mov r8, r8)
   2408c:	0002b638 	.word	0x0002b638
   24090:	00029657 	.word	0x00029657
   24094:	2000061c 	.word	0x2000061c
   24098:	0002386d 	.word	0x0002386d
   2409c:	000238b5 	.word	0x000238b5
   240a0:	00023905 	.word	0x00023905

000240a4 <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   240a4:	b590      	push	{r4, r7, lr}
   240a6:	b095      	sub	sp, #84	; 0x54
   240a8:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   240aa:	2340      	movs	r3, #64	; 0x40
   240ac:	18fb      	adds	r3, r7, r3
   240ae:	4a22      	ldr	r2, [pc, #136]	; (24138 <_eeprom_emulator_verify_master_page+0x94>)
   240b0:	ca13      	ldmia	r2!, {r0, r1, r4}
   240b2:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   240b4:	4b21      	ldr	r3, [pc, #132]	; (2413c <_eeprom_emulator_verify_master_page+0x98>)
   240b6:	891b      	ldrh	r3, [r3, #8]
   240b8:	3b01      	subs	r3, #1
   240ba:	b29b      	uxth	r3, r3
   240bc:	003a      	movs	r2, r7
   240be:	0011      	movs	r1, r2
   240c0:	0018      	movs	r0, r3
   240c2:	4b1f      	ldr	r3, [pc, #124]	; (24140 <_eeprom_emulator_verify_master_page+0x9c>)
   240c4:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   240c6:	234f      	movs	r3, #79	; 0x4f
   240c8:	18fb      	adds	r3, r7, r3
   240ca:	2200      	movs	r2, #0
   240cc:	701a      	strb	r2, [r3, #0]
   240ce:	e017      	b.n	24100 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   240d0:	234f      	movs	r3, #79	; 0x4f
   240d2:	18fb      	adds	r3, r7, r3
   240d4:	781a      	ldrb	r2, [r3, #0]
   240d6:	003b      	movs	r3, r7
   240d8:	0092      	lsls	r2, r2, #2
   240da:	58d2      	ldr	r2, [r2, r3]
   240dc:	234f      	movs	r3, #79	; 0x4f
   240de:	18fb      	adds	r3, r7, r3
   240e0:	7819      	ldrb	r1, [r3, #0]
   240e2:	2340      	movs	r3, #64	; 0x40
   240e4:	18fb      	adds	r3, r7, r3
   240e6:	0089      	lsls	r1, r1, #2
   240e8:	58cb      	ldr	r3, [r1, r3]
   240ea:	429a      	cmp	r2, r3
   240ec:	d001      	beq.n	240f2 <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   240ee:	231a      	movs	r3, #26
   240f0:	e01e      	b.n	24130 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   240f2:	234f      	movs	r3, #79	; 0x4f
   240f4:	18fb      	adds	r3, r7, r3
   240f6:	781a      	ldrb	r2, [r3, #0]
   240f8:	234f      	movs	r3, #79	; 0x4f
   240fa:	18fb      	adds	r3, r7, r3
   240fc:	3201      	adds	r2, #1
   240fe:	701a      	strb	r2, [r3, #0]
   24100:	234f      	movs	r3, #79	; 0x4f
   24102:	18fb      	adds	r3, r7, r3
   24104:	781b      	ldrb	r3, [r3, #0]
   24106:	2b02      	cmp	r3, #2
   24108:	d9e2      	bls.n	240d0 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   2410a:	003b      	movs	r3, r7
   2410c:	7bdb      	ldrb	r3, [r3, #15]
   2410e:	2b01      	cmp	r3, #1
   24110:	d001      	beq.n	24116 <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   24112:	2310      	movs	r3, #16
   24114:	e00c      	b.n	24130 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   24116:	003b      	movs	r3, r7
   24118:	7b1b      	ldrb	r3, [r3, #12]
   2411a:	2b01      	cmp	r3, #1
   2411c:	d001      	beq.n	24122 <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   2411e:	2310      	movs	r3, #16
   24120:	e006      	b.n	24130 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   24122:	003b      	movs	r3, r7
   24124:	7b5b      	ldrb	r3, [r3, #13]
   24126:	2b00      	cmp	r3, #0
   24128:	d001      	beq.n	2412e <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   2412a:	2310      	movs	r3, #16
   2412c:	e000      	b.n	24130 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   2412e:	2300      	movs	r3, #0
}
   24130:	0018      	movs	r0, r3
   24132:	46bd      	mov	sp, r7
   24134:	b015      	add	sp, #84	; 0x54
   24136:	bd90      	pop	{r4, r7, pc}
   24138:	0002b638 	.word	0x0002b638
   2413c:	2000061c 	.word	0x2000061c
   24140:	00023951 	.word	0x00023951

00024144 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   24144:	b590      	push	{r4, r7, lr}
   24146:	b087      	sub	sp, #28
   24148:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   2414a:	2317      	movs	r3, #23
   2414c:	18fb      	adds	r3, r7, r3
   2414e:	2200      	movs	r2, #0
   24150:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   24152:	2310      	movs	r3, #16
   24154:	18fb      	adds	r3, r7, r3
   24156:	0018      	movs	r0, r3
   24158:	4b2e      	ldr	r3, [pc, #184]	; (24214 <eeprom_emulator_init+0xd0>)
   2415a:	4798      	blx	r3
	config.manual_page_write = true;
   2415c:	2310      	movs	r3, #16
   2415e:	18fb      	adds	r3, r7, r3
   24160:	2201      	movs	r2, #1
   24162:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   24164:	2317      	movs	r3, #23
   24166:	18fc      	adds	r4, r7, r3
   24168:	2310      	movs	r3, #16
   2416a:	18fb      	adds	r3, r7, r3
   2416c:	0018      	movs	r0, r3
   2416e:	4b2a      	ldr	r3, [pc, #168]	; (24218 <eeprom_emulator_init+0xd4>)
   24170:	4798      	blx	r3
   24172:	0003      	movs	r3, r0
   24174:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   24176:	2317      	movs	r3, #23
   24178:	18fb      	adds	r3, r7, r3
   2417a:	781b      	ldrb	r3, [r3, #0]
   2417c:	2b05      	cmp	r3, #5
   2417e:	d0f1      	beq.n	24164 <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   24180:	1d3b      	adds	r3, r7, #4
   24182:	0018      	movs	r0, r3
   24184:	4b25      	ldr	r3, [pc, #148]	; (2421c <eeprom_emulator_init+0xd8>)
   24186:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   24188:	1d3b      	adds	r3, r7, #4
   2418a:	685b      	ldr	r3, [r3, #4]
   2418c:	2b0b      	cmp	r3, #11
   2418e:	d801      	bhi.n	24194 <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   24190:	2316      	movs	r3, #22
   24192:	e03b      	b.n	2420c <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   24194:	1d3b      	adds	r3, r7, #4
   24196:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   24198:	b29a      	uxth	r2, r3
   2419a:	4b21      	ldr	r3, [pc, #132]	; (24220 <eeprom_emulator_init+0xdc>)
   2419c:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   2419e:	1d3b      	adds	r3, r7, #4
   241a0:	685b      	ldr	r3, [r3, #4]
   241a2:	3b08      	subs	r3, #8
   241a4:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   241a6:	b2da      	uxtb	r2, r3
   241a8:	4b1d      	ldr	r3, [pc, #116]	; (24220 <eeprom_emulator_init+0xdc>)
   241aa:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   241ac:	4b1c      	ldr	r3, [pc, #112]	; (24220 <eeprom_emulator_init+0xdc>)
   241ae:	891b      	ldrh	r3, [r3, #8]
   241b0:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   241b2:	0013      	movs	r3, r2
   241b4:	069b      	lsls	r3, r3, #26
   241b6:	1a9b      	subs	r3, r3, r2
   241b8:	019b      	lsls	r3, r3, #6
   241ba:	2280      	movs	r2, #128	; 0x80
   241bc:	02d2      	lsls	r2, r2, #11
   241be:	4694      	mov	ip, r2
   241c0:	4463      	add	r3, ip
   241c2:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   241c4:	4b16      	ldr	r3, [pc, #88]	; (24220 <eeprom_emulator_init+0xdc>)
   241c6:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   241c8:	4b15      	ldr	r3, [pc, #84]	; (24220 <eeprom_emulator_init+0xdc>)
   241ca:	22c8      	movs	r2, #200	; 0xc8
   241cc:	2100      	movs	r1, #0
   241ce:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   241d0:	4b14      	ldr	r3, [pc, #80]	; (24224 <eeprom_emulator_init+0xe0>)
   241d2:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   241d4:	4b12      	ldr	r3, [pc, #72]	; (24220 <eeprom_emulator_init+0xdc>)
   241d6:	2287      	movs	r2, #135	; 0x87
   241d8:	5c9b      	ldrb	r3, [r3, r2]
   241da:	2b3f      	cmp	r3, #63	; 0x3f
   241dc:	d101      	bne.n	241e2 <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   241de:	231a      	movs	r3, #26
   241e0:	e014      	b.n	2420c <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   241e2:	2317      	movs	r3, #23
   241e4:	18fc      	adds	r4, r7, r3
   241e6:	4b10      	ldr	r3, [pc, #64]	; (24228 <eeprom_emulator_init+0xe4>)
   241e8:	4798      	blx	r3
   241ea:	0003      	movs	r3, r0
   241ec:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   241ee:	2317      	movs	r3, #23
   241f0:	18fb      	adds	r3, r7, r3
   241f2:	781b      	ldrb	r3, [r3, #0]
   241f4:	2b00      	cmp	r3, #0
   241f6:	d003      	beq.n	24200 <eeprom_emulator_init+0xbc>
		return error_code;
   241f8:	2317      	movs	r3, #23
   241fa:	18fb      	adds	r3, r7, r3
   241fc:	781b      	ldrb	r3, [r3, #0]
   241fe:	e005      	b.n	2420c <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   24200:	4b07      	ldr	r3, [pc, #28]	; (24220 <eeprom_emulator_init+0xdc>)
   24202:	2201      	movs	r2, #1
   24204:	701a      	strb	r2, [r3, #0]

	return error_code;
   24206:	2317      	movs	r3, #23
   24208:	18fb      	adds	r3, r7, r3
   2420a:	781b      	ldrb	r3, [r3, #0]
}
   2420c:	0018      	movs	r0, r3
   2420e:	46bd      	mov	sp, r7
   24210:	b007      	add	sp, #28
   24212:	bd90      	pop	{r4, r7, pc}
   24214:	00023831 	.word	0x00023831
   24218:	0002320d 	.word	0x0002320d
   2421c:	000236ed 	.word	0x000236ed
   24220:	2000061c 	.word	0x2000061c
   24224:	00023c11 	.word	0x00023c11
   24228:	000240a5 	.word	0x000240a5

0002422c <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   2422c:	b580      	push	{r7, lr}
   2422e:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   24230:	4b04      	ldr	r3, [pc, #16]	; (24244 <eeprom_emulator_erase_memory+0x18>)
   24232:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   24234:	4b04      	ldr	r3, [pc, #16]	; (24248 <eeprom_emulator_erase_memory+0x1c>)
   24236:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   24238:	4b04      	ldr	r3, [pc, #16]	; (2424c <eeprom_emulator_erase_memory+0x20>)
   2423a:	4798      	blx	r3
}
   2423c:	46c0      	nop			; (mov r8, r8)
   2423e:	46bd      	mov	sp, r7
   24240:	bd80      	pop	{r7, pc}
   24242:	46c0      	nop			; (mov r8, r8)
   24244:	000239a1 	.word	0x000239a1
   24248:	00023fdd 	.word	0x00023fdd
   2424c:	00023c11 	.word	0x00023c11

00024250 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   24250:	b590      	push	{r4, r7, lr}
   24252:	b085      	sub	sp, #20
   24254:	af00      	add	r7, sp, #0
   24256:	0002      	movs	r2, r0
   24258:	6039      	str	r1, [r7, #0]
   2425a:	1dfb      	adds	r3, r7, #7
   2425c:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   2425e:	4b38      	ldr	r3, [pc, #224]	; (24340 <eeprom_emulator_write_page+0xf0>)
   24260:	781b      	ldrb	r3, [r3, #0]
   24262:	2201      	movs	r2, #1
   24264:	4053      	eors	r3, r2
   24266:	b2db      	uxtb	r3, r3
   24268:	2b00      	cmp	r3, #0
   2426a:	d001      	beq.n	24270 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   2426c:	231f      	movs	r3, #31
   2426e:	e063      	b.n	24338 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   24270:	4b33      	ldr	r3, [pc, #204]	; (24340 <eeprom_emulator_write_page+0xf0>)
   24272:	7a9b      	ldrb	r3, [r3, #10]
   24274:	1dfa      	adds	r2, r7, #7
   24276:	7812      	ldrb	r2, [r2, #0]
   24278:	429a      	cmp	r2, r3
   2427a:	d301      	bcc.n	24280 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   2427c:	2318      	movs	r3, #24
   2427e:	e05b      	b.n	24338 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   24280:	4b2f      	ldr	r3, [pc, #188]	; (24340 <eeprom_emulator_write_page+0xf0>)
   24282:	22c8      	movs	r2, #200	; 0xc8
   24284:	5c9b      	ldrb	r3, [r3, r2]
   24286:	2b00      	cmp	r3, #0
   24288:	d008      	beq.n	2429c <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   2428a:	4b2d      	ldr	r3, [pc, #180]	; (24340 <eeprom_emulator_write_page+0xf0>)
   2428c:	2288      	movs	r2, #136	; 0x88
   2428e:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   24290:	1dfa      	adds	r2, r7, #7
   24292:	7812      	ldrb	r2, [r2, #0]
   24294:	429a      	cmp	r2, r3
   24296:	d001      	beq.n	2429c <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   24298:	4b2a      	ldr	r3, [pc, #168]	; (24344 <eeprom_emulator_write_page+0xf4>)
   2429a:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   2429c:	230e      	movs	r3, #14
   2429e:	18fb      	adds	r3, r7, r3
   242a0:	2200      	movs	r2, #0
   242a2:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   242a4:	1dfb      	adds	r3, r7, #7
   242a6:	781b      	ldrb	r3, [r3, #0]
   242a8:	4a25      	ldr	r2, [pc, #148]	; (24340 <eeprom_emulator_write_page+0xf0>)
   242aa:	18d3      	adds	r3, r2, r3
   242ac:	7adb      	ldrb	r3, [r3, #11]
   242ae:	220f      	movs	r2, #15
   242b0:	18bc      	adds	r4, r7, r2
   242b2:	220e      	movs	r2, #14
   242b4:	18ba      	adds	r2, r7, r2
   242b6:	0011      	movs	r1, r2
   242b8:	0018      	movs	r0, r3
   242ba:	4b23      	ldr	r3, [pc, #140]	; (24348 <eeprom_emulator_write_page+0xf8>)
   242bc:	4798      	blx	r3
   242be:	0003      	movs	r3, r0
   242c0:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   242c2:	230f      	movs	r3, #15
   242c4:	18fb      	adds	r3, r7, r3
   242c6:	781b      	ldrb	r3, [r3, #0]
   242c8:	2201      	movs	r2, #1
   242ca:	4053      	eors	r3, r2
   242cc:	b2db      	uxtb	r3, r3
   242ce:	2b00      	cmp	r3, #0
   242d0:	d00e      	beq.n	242f0 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   242d2:	1dfb      	adds	r3, r7, #7
   242d4:	781b      	ldrb	r3, [r3, #0]
   242d6:	4a1a      	ldr	r2, [pc, #104]	; (24340 <eeprom_emulator_write_page+0xf0>)
   242d8:	18d3      	adds	r3, r2, r3
   242da:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   242dc:	089b      	lsrs	r3, r3, #2
   242de:	b2d8      	uxtb	r0, r3
   242e0:	683a      	ldr	r2, [r7, #0]
   242e2:	1dfb      	adds	r3, r7, #7
   242e4:	781b      	ldrb	r3, [r3, #0]
   242e6:	0019      	movs	r1, r3
   242e8:	4b18      	ldr	r3, [pc, #96]	; (2434c <eeprom_emulator_write_page+0xfc>)
   242ea:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   242ec:	2300      	movs	r3, #0
   242ee:	e023      	b.n	24338 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   242f0:	4b13      	ldr	r3, [pc, #76]	; (24340 <eeprom_emulator_write_page+0xf0>)
   242f2:	1dfa      	adds	r2, r7, #7
   242f4:	2188      	movs	r1, #136	; 0x88
   242f6:	7812      	ldrb	r2, [r2, #0]
   242f8:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   242fa:	4b11      	ldr	r3, [pc, #68]	; (24340 <eeprom_emulator_write_page+0xf0>)
   242fc:	228c      	movs	r2, #140	; 0x8c
   242fe:	6839      	ldr	r1, [r7, #0]
   24300:	189b      	adds	r3, r3, r2
   24302:	223c      	movs	r2, #60	; 0x3c
   24304:	0018      	movs	r0, r3
   24306:	4b12      	ldr	r3, [pc, #72]	; (24350 <eeprom_emulator_write_page+0x100>)
   24308:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   2430a:	230e      	movs	r3, #14
   2430c:	18fb      	adds	r3, r7, r3
   2430e:	781b      	ldrb	r3, [r3, #0]
   24310:	b29b      	uxth	r3, r3
   24312:	4a10      	ldr	r2, [pc, #64]	; (24354 <eeprom_emulator_write_page+0x104>)
   24314:	0011      	movs	r1, r2
   24316:	0018      	movs	r0, r3
   24318:	4b0f      	ldr	r3, [pc, #60]	; (24358 <eeprom_emulator_write_page+0x108>)
   2431a:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   2431c:	1dfb      	adds	r3, r7, #7
   2431e:	781b      	ldrb	r3, [r3, #0]
   24320:	220e      	movs	r2, #14
   24322:	18ba      	adds	r2, r7, r2
   24324:	7811      	ldrb	r1, [r2, #0]
   24326:	4a06      	ldr	r2, [pc, #24]	; (24340 <eeprom_emulator_write_page+0xf0>)
   24328:	18d3      	adds	r3, r2, r3
   2432a:	1c0a      	adds	r2, r1, #0
   2432c:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   2432e:	4b04      	ldr	r3, [pc, #16]	; (24340 <eeprom_emulator_write_page+0xf0>)
   24330:	22c8      	movs	r2, #200	; 0xc8
   24332:	2101      	movs	r1, #1
   24334:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   24336:	2300      	movs	r3, #0
}
   24338:	0018      	movs	r0, r3
   2433a:	46bd      	mov	sp, r7
   2433c:	b005      	add	sp, #20
   2433e:	bd90      	pop	{r4, r7, pc}
   24340:	2000061c 	.word	0x2000061c
   24344:	000243f9 	.word	0x000243f9
   24348:	00023d65 	.word	0x00023d65
   2434c:	00023dfd 	.word	0x00023dfd
   24350:	00029621 	.word	0x00029621
   24354:	200006a4 	.word	0x200006a4
   24358:	000238b5 	.word	0x000238b5

0002435c <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   2435c:	b580      	push	{r7, lr}
   2435e:	b092      	sub	sp, #72	; 0x48
   24360:	af00      	add	r7, sp, #0
   24362:	0002      	movs	r2, r0
   24364:	6039      	str	r1, [r7, #0]
   24366:	1dfb      	adds	r3, r7, #7
   24368:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   2436a:	4b20      	ldr	r3, [pc, #128]	; (243ec <eeprom_emulator_read_page+0x90>)
   2436c:	781b      	ldrb	r3, [r3, #0]
   2436e:	2201      	movs	r2, #1
   24370:	4053      	eors	r3, r2
   24372:	b2db      	uxtb	r3, r3
   24374:	2b00      	cmp	r3, #0
   24376:	d001      	beq.n	2437c <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   24378:	231f      	movs	r3, #31
   2437a:	e033      	b.n	243e4 <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   2437c:	4b1b      	ldr	r3, [pc, #108]	; (243ec <eeprom_emulator_read_page+0x90>)
   2437e:	7a9b      	ldrb	r3, [r3, #10]
   24380:	1dfa      	adds	r2, r7, #7
   24382:	7812      	ldrb	r2, [r2, #0]
   24384:	429a      	cmp	r2, r3
   24386:	d301      	bcc.n	2438c <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   24388:	2318      	movs	r3, #24
   2438a:	e02b      	b.n	243e4 <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   2438c:	4b17      	ldr	r3, [pc, #92]	; (243ec <eeprom_emulator_read_page+0x90>)
   2438e:	22c8      	movs	r2, #200	; 0xc8
   24390:	5c9b      	ldrb	r3, [r3, r2]
   24392:	2b00      	cmp	r3, #0
   24394:	d010      	beq.n	243b8 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   24396:	4b15      	ldr	r3, [pc, #84]	; (243ec <eeprom_emulator_read_page+0x90>)
   24398:	2288      	movs	r2, #136	; 0x88
   2439a:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   2439c:	1dfa      	adds	r2, r7, #7
   2439e:	7812      	ldrb	r2, [r2, #0]
   243a0:	429a      	cmp	r2, r3
   243a2:	d109      	bne.n	243b8 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   243a4:	6839      	ldr	r1, [r7, #0]
   243a6:	4b11      	ldr	r3, [pc, #68]	; (243ec <eeprom_emulator_read_page+0x90>)
   243a8:	228c      	movs	r2, #140	; 0x8c
   243aa:	0008      	movs	r0, r1
   243ac:	189b      	adds	r3, r3, r2
   243ae:	223c      	movs	r2, #60	; 0x3c
   243b0:	0019      	movs	r1, r3
   243b2:	4b0f      	ldr	r3, [pc, #60]	; (243f0 <eeprom_emulator_read_page+0x94>)
   243b4:	4798      	blx	r3
   243b6:	e014      	b.n	243e2 <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   243b8:	1dfb      	adds	r3, r7, #7
   243ba:	781b      	ldrb	r3, [r3, #0]
   243bc:	4a0b      	ldr	r2, [pc, #44]	; (243ec <eeprom_emulator_read_page+0x90>)
   243be:	18d3      	adds	r3, r2, r3
   243c0:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   243c2:	b29b      	uxth	r3, r3
   243c4:	2208      	movs	r2, #8
   243c6:	18ba      	adds	r2, r7, r2
   243c8:	0011      	movs	r1, r2
   243ca:	0018      	movs	r0, r3
   243cc:	4b09      	ldr	r3, [pc, #36]	; (243f4 <eeprom_emulator_read_page+0x98>)
   243ce:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   243d0:	683a      	ldr	r2, [r7, #0]
   243d2:	2308      	movs	r3, #8
   243d4:	18fb      	adds	r3, r7, r3
   243d6:	0010      	movs	r0, r2
   243d8:	3304      	adds	r3, #4
   243da:	223c      	movs	r2, #60	; 0x3c
   243dc:	0019      	movs	r1, r3
   243de:	4b04      	ldr	r3, [pc, #16]	; (243f0 <eeprom_emulator_read_page+0x94>)
   243e0:	4798      	blx	r3
	}

	return STATUS_OK;
   243e2:	2300      	movs	r3, #0
}
   243e4:	0018      	movs	r0, r3
   243e6:	46bd      	mov	sp, r7
   243e8:	b012      	add	sp, #72	; 0x48
   243ea:	bd80      	pop	{r7, pc}
   243ec:	2000061c 	.word	0x2000061c
   243f0:	00029621 	.word	0x00029621
   243f4:	00023951 	.word	0x00023951

000243f8 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   243f8:	b580      	push	{r7, lr}
   243fa:	b082      	sub	sp, #8
   243fc:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   243fe:	1dfb      	adds	r3, r7, #7
   24400:	2200      	movs	r2, #0
   24402:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   24404:	4b10      	ldr	r3, [pc, #64]	; (24448 <eeprom_emulator_commit_page_buffer+0x50>)
   24406:	22c8      	movs	r2, #200	; 0xc8
   24408:	5c9b      	ldrb	r3, [r3, r2]
   2440a:	2201      	movs	r2, #1
   2440c:	4053      	eors	r3, r2
   2440e:	b2db      	uxtb	r3, r3
   24410:	2b00      	cmp	r3, #0
   24412:	d001      	beq.n	24418 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   24414:	2300      	movs	r3, #0
   24416:	e013      	b.n	24440 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   24418:	1dbb      	adds	r3, r7, #6
   2441a:	4a0b      	ldr	r2, [pc, #44]	; (24448 <eeprom_emulator_commit_page_buffer+0x50>)
   2441c:	2188      	movs	r1, #136	; 0x88
   2441e:	5c52      	ldrb	r2, [r2, r1]
   24420:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   24422:	1dbb      	adds	r3, r7, #6
   24424:	781b      	ldrb	r3, [r3, #0]
   24426:	4a08      	ldr	r2, [pc, #32]	; (24448 <eeprom_emulator_commit_page_buffer+0x50>)
   24428:	18d3      	adds	r3, r2, r3
   2442a:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   2442c:	b29b      	uxth	r3, r3
   2442e:	0018      	movs	r0, r3
   24430:	4b06      	ldr	r3, [pc, #24]	; (2444c <eeprom_emulator_commit_page_buffer+0x54>)
   24432:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   24434:	4b04      	ldr	r3, [pc, #16]	; (24448 <eeprom_emulator_commit_page_buffer+0x50>)
   24436:	22c8      	movs	r2, #200	; 0xc8
   24438:	2100      	movs	r1, #0
   2443a:	5499      	strb	r1, [r3, r2]

	return error_code;
   2443c:	1dfb      	adds	r3, r7, #7
   2443e:	781b      	ldrb	r3, [r3, #0]
}
   24440:	0018      	movs	r0, r3
   24442:	46bd      	mov	sp, r7
   24444:	b002      	add	sp, #8
   24446:	bd80      	pop	{r7, pc}
   24448:	2000061c 	.word	0x2000061c
   2444c:	00023905 	.word	0x00023905

00024450 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   24450:	b580      	push	{r7, lr}
   24452:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   24454:	46c0      	nop			; (mov r8, r8)
   24456:	46bd      	mov	sp, r7
   24458:	bd80      	pop	{r7, pc}
	...

0002445c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   2445c:	b580      	push	{r7, lr}
   2445e:	b082      	sub	sp, #8
   24460:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   24462:	4b10      	ldr	r3, [pc, #64]	; (244a4 <cpu_irq_enter_critical+0x48>)
   24464:	681b      	ldr	r3, [r3, #0]
   24466:	2b00      	cmp	r3, #0
   24468:	d112      	bne.n	24490 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2446a:	f3ef 8310 	mrs	r3, PRIMASK
   2446e:	607b      	str	r3, [r7, #4]
  return(result);
   24470:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   24472:	2b00      	cmp	r3, #0
   24474:	d109      	bne.n	2448a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   24476:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   24478:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   2447c:	4b0a      	ldr	r3, [pc, #40]	; (244a8 <cpu_irq_enter_critical+0x4c>)
   2447e:	2200      	movs	r2, #0
   24480:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   24482:	4b0a      	ldr	r3, [pc, #40]	; (244ac <cpu_irq_enter_critical+0x50>)
   24484:	2201      	movs	r2, #1
   24486:	701a      	strb	r2, [r3, #0]
   24488:	e002      	b.n	24490 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   2448a:	4b08      	ldr	r3, [pc, #32]	; (244ac <cpu_irq_enter_critical+0x50>)
   2448c:	2200      	movs	r2, #0
   2448e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   24490:	4b04      	ldr	r3, [pc, #16]	; (244a4 <cpu_irq_enter_critical+0x48>)
   24492:	681b      	ldr	r3, [r3, #0]
   24494:	1c5a      	adds	r2, r3, #1
   24496:	4b03      	ldr	r3, [pc, #12]	; (244a4 <cpu_irq_enter_critical+0x48>)
   24498:	601a      	str	r2, [r3, #0]
}
   2449a:	46c0      	nop			; (mov r8, r8)
   2449c:	46bd      	mov	sp, r7
   2449e:	b002      	add	sp, #8
   244a0:	bd80      	pop	{r7, pc}
   244a2:	46c0      	nop			; (mov r8, r8)
   244a4:	200006e8 	.word	0x200006e8
   244a8:	20000028 	.word	0x20000028
   244ac:	200006ec 	.word	0x200006ec

000244b0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   244b0:	b580      	push	{r7, lr}
   244b2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   244b4:	4b0b      	ldr	r3, [pc, #44]	; (244e4 <cpu_irq_leave_critical+0x34>)
   244b6:	681b      	ldr	r3, [r3, #0]
   244b8:	1e5a      	subs	r2, r3, #1
   244ba:	4b0a      	ldr	r3, [pc, #40]	; (244e4 <cpu_irq_leave_critical+0x34>)
   244bc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   244be:	4b09      	ldr	r3, [pc, #36]	; (244e4 <cpu_irq_leave_critical+0x34>)
   244c0:	681b      	ldr	r3, [r3, #0]
   244c2:	2b00      	cmp	r3, #0
   244c4:	d10a      	bne.n	244dc <cpu_irq_leave_critical+0x2c>
   244c6:	4b08      	ldr	r3, [pc, #32]	; (244e8 <cpu_irq_leave_critical+0x38>)
   244c8:	781b      	ldrb	r3, [r3, #0]
   244ca:	b2db      	uxtb	r3, r3
   244cc:	2b00      	cmp	r3, #0
   244ce:	d005      	beq.n	244dc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   244d0:	4b06      	ldr	r3, [pc, #24]	; (244ec <cpu_irq_leave_critical+0x3c>)
   244d2:	2201      	movs	r2, #1
   244d4:	701a      	strb	r2, [r3, #0]
   244d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   244da:	b662      	cpsie	i
	}
}
   244dc:	46c0      	nop			; (mov r8, r8)
   244de:	46bd      	mov	sp, r7
   244e0:	bd80      	pop	{r7, pc}
   244e2:	46c0      	nop			; (mov r8, r8)
   244e4:	200006e8 	.word	0x200006e8
   244e8:	200006ec 	.word	0x200006ec
   244ec:	20000028 	.word	0x20000028

000244f0 <system_gclk_gen_get_config_defaults>:
{
   244f0:	b580      	push	{r7, lr}
   244f2:	b082      	sub	sp, #8
   244f4:	af00      	add	r7, sp, #0
   244f6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   244f8:	687b      	ldr	r3, [r7, #4]
   244fa:	2201      	movs	r2, #1
   244fc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   244fe:	687b      	ldr	r3, [r7, #4]
   24500:	2200      	movs	r2, #0
   24502:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   24504:	687b      	ldr	r3, [r7, #4]
   24506:	2206      	movs	r2, #6
   24508:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2450a:	687b      	ldr	r3, [r7, #4]
   2450c:	2200      	movs	r2, #0
   2450e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   24510:	687b      	ldr	r3, [r7, #4]
   24512:	2200      	movs	r2, #0
   24514:	725a      	strb	r2, [r3, #9]
}
   24516:	46c0      	nop			; (mov r8, r8)
   24518:	46bd      	mov	sp, r7
   2451a:	b002      	add	sp, #8
   2451c:	bd80      	pop	{r7, pc}

0002451e <system_gclk_chan_get_config_defaults>:
{
   2451e:	b580      	push	{r7, lr}
   24520:	b082      	sub	sp, #8
   24522:	af00      	add	r7, sp, #0
   24524:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   24526:	687b      	ldr	r3, [r7, #4]
   24528:	2200      	movs	r2, #0
   2452a:	701a      	strb	r2, [r3, #0]
}
   2452c:	46c0      	nop			; (mov r8, r8)
   2452e:	46bd      	mov	sp, r7
   24530:	b002      	add	sp, #8
   24532:	bd80      	pop	{r7, pc}

00024534 <system_clock_source_xosc32k_get_config_defaults>:
{
   24534:	b580      	push	{r7, lr}
   24536:	b082      	sub	sp, #8
   24538:	af00      	add	r7, sp, #0
   2453a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   2453c:	687b      	ldr	r3, [r7, #4]
   2453e:	2200      	movs	r2, #0
   24540:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   24542:	687b      	ldr	r3, [r7, #4]
   24544:	2204      	movs	r2, #4
   24546:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   24548:	687b      	ldr	r3, [r7, #4]
   2454a:	2200      	movs	r2, #0
   2454c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   2454e:	687b      	ldr	r3, [r7, #4]
   24550:	2280      	movs	r2, #128	; 0x80
   24552:	0212      	lsls	r2, r2, #8
   24554:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   24556:	687b      	ldr	r3, [r7, #4]
   24558:	2200      	movs	r2, #0
   2455a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   2455c:	687b      	ldr	r3, [r7, #4]
   2455e:	2201      	movs	r2, #1
   24560:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   24562:	687b      	ldr	r3, [r7, #4]
   24564:	2200      	movs	r2, #0
   24566:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   24568:	687b      	ldr	r3, [r7, #4]
   2456a:	2201      	movs	r2, #1
   2456c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   2456e:	687b      	ldr	r3, [r7, #4]
   24570:	2200      	movs	r2, #0
   24572:	739a      	strb	r2, [r3, #14]
}
   24574:	46c0      	nop			; (mov r8, r8)
   24576:	46bd      	mov	sp, r7
   24578:	b002      	add	sp, #8
   2457a:	bd80      	pop	{r7, pc}

0002457c <system_clock_source_osc8m_get_config_defaults>:
{
   2457c:	b580      	push	{r7, lr}
   2457e:	b082      	sub	sp, #8
   24580:	af00      	add	r7, sp, #0
   24582:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   24584:	687b      	ldr	r3, [r7, #4]
   24586:	2203      	movs	r2, #3
   24588:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2458a:	687b      	ldr	r3, [r7, #4]
   2458c:	2200      	movs	r2, #0
   2458e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   24590:	687b      	ldr	r3, [r7, #4]
   24592:	2201      	movs	r2, #1
   24594:	709a      	strb	r2, [r3, #2]
}
   24596:	46c0      	nop			; (mov r8, r8)
   24598:	46bd      	mov	sp, r7
   2459a:	b002      	add	sp, #8
   2459c:	bd80      	pop	{r7, pc}

0002459e <system_clock_source_dfll_get_config_defaults>:
{
   2459e:	b580      	push	{r7, lr}
   245a0:	b082      	sub	sp, #8
   245a2:	af00      	add	r7, sp, #0
   245a4:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   245a6:	687b      	ldr	r3, [r7, #4]
   245a8:	2200      	movs	r2, #0
   245aa:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   245ac:	687b      	ldr	r3, [r7, #4]
   245ae:	2200      	movs	r2, #0
   245b0:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   245b2:	687b      	ldr	r3, [r7, #4]
   245b4:	2200      	movs	r2, #0
   245b6:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   245b8:	687b      	ldr	r3, [r7, #4]
   245ba:	2200      	movs	r2, #0
   245bc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   245be:	687b      	ldr	r3, [r7, #4]
   245c0:	2200      	movs	r2, #0
   245c2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   245c4:	687b      	ldr	r3, [r7, #4]
   245c6:	2201      	movs	r2, #1
   245c8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   245ca:	687b      	ldr	r3, [r7, #4]
   245cc:	2207      	movs	r2, #7
   245ce:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   245d0:	687b      	ldr	r3, [r7, #4]
   245d2:	223f      	movs	r2, #63	; 0x3f
   245d4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   245d6:	687b      	ldr	r3, [r7, #4]
   245d8:	2201      	movs	r2, #1
   245da:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   245dc:	687b      	ldr	r3, [r7, #4]
   245de:	2201      	movs	r2, #1
   245e0:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   245e2:	687b      	ldr	r3, [r7, #4]
   245e4:	2206      	movs	r2, #6
   245e6:	821a      	strh	r2, [r3, #16]
}
   245e8:	46c0      	nop			; (mov r8, r8)
   245ea:	46bd      	mov	sp, r7
   245ec:	b002      	add	sp, #8
   245ee:	bd80      	pop	{r7, pc}

000245f0 <system_cpu_clock_set_divider>:
{
   245f0:	b580      	push	{r7, lr}
   245f2:	b082      	sub	sp, #8
   245f4:	af00      	add	r7, sp, #0
   245f6:	0002      	movs	r2, r0
   245f8:	1dfb      	adds	r3, r7, #7
   245fa:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   245fc:	4a03      	ldr	r2, [pc, #12]	; (2460c <system_cpu_clock_set_divider+0x1c>)
   245fe:	1dfb      	adds	r3, r7, #7
   24600:	781b      	ldrb	r3, [r3, #0]
   24602:	7213      	strb	r3, [r2, #8]
}
   24604:	46c0      	nop			; (mov r8, r8)
   24606:	46bd      	mov	sp, r7
   24608:	b002      	add	sp, #8
   2460a:	bd80      	pop	{r7, pc}
   2460c:	40000400 	.word	0x40000400

00024610 <system_apb_clock_set_divider>:
{
   24610:	b580      	push	{r7, lr}
   24612:	b082      	sub	sp, #8
   24614:	af00      	add	r7, sp, #0
   24616:	0002      	movs	r2, r0
   24618:	1dfb      	adds	r3, r7, #7
   2461a:	701a      	strb	r2, [r3, #0]
   2461c:	1dbb      	adds	r3, r7, #6
   2461e:	1c0a      	adds	r2, r1, #0
   24620:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24622:	1dfb      	adds	r3, r7, #7
   24624:	781b      	ldrb	r3, [r3, #0]
   24626:	2b01      	cmp	r3, #1
   24628:	d008      	beq.n	2463c <system_apb_clock_set_divider+0x2c>
   2462a:	2b02      	cmp	r3, #2
   2462c:	d00b      	beq.n	24646 <system_apb_clock_set_divider+0x36>
   2462e:	2b00      	cmp	r3, #0
   24630:	d10e      	bne.n	24650 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   24632:	4a0b      	ldr	r2, [pc, #44]	; (24660 <system_apb_clock_set_divider+0x50>)
   24634:	1dbb      	adds	r3, r7, #6
   24636:	781b      	ldrb	r3, [r3, #0]
   24638:	7253      	strb	r3, [r2, #9]
			break;
   2463a:	e00b      	b.n	24654 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2463c:	4a08      	ldr	r2, [pc, #32]	; (24660 <system_apb_clock_set_divider+0x50>)
   2463e:	1dbb      	adds	r3, r7, #6
   24640:	781b      	ldrb	r3, [r3, #0]
   24642:	7293      	strb	r3, [r2, #10]
			break;
   24644:	e006      	b.n	24654 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   24646:	4a06      	ldr	r2, [pc, #24]	; (24660 <system_apb_clock_set_divider+0x50>)
   24648:	1dbb      	adds	r3, r7, #6
   2464a:	781b      	ldrb	r3, [r3, #0]
   2464c:	72d3      	strb	r3, [r2, #11]
			break;
   2464e:	e001      	b.n	24654 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   24650:	2317      	movs	r3, #23
   24652:	e000      	b.n	24656 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   24654:	2300      	movs	r3, #0
}
   24656:	0018      	movs	r0, r3
   24658:	46bd      	mov	sp, r7
   2465a:	b002      	add	sp, #8
   2465c:	bd80      	pop	{r7, pc}
   2465e:	46c0      	nop			; (mov r8, r8)
   24660:	40000400 	.word	0x40000400

00024664 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   24664:	b580      	push	{r7, lr}
   24666:	b082      	sub	sp, #8
   24668:	af00      	add	r7, sp, #0
   2466a:	0002      	movs	r2, r0
   2466c:	1dfb      	adds	r3, r7, #7
   2466e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   24670:	4a08      	ldr	r2, [pc, #32]	; (24694 <system_flash_set_waitstates+0x30>)
   24672:	1dfb      	adds	r3, r7, #7
   24674:	781b      	ldrb	r3, [r3, #0]
   24676:	210f      	movs	r1, #15
   24678:	400b      	ands	r3, r1
   2467a:	b2d9      	uxtb	r1, r3
   2467c:	6853      	ldr	r3, [r2, #4]
   2467e:	200f      	movs	r0, #15
   24680:	4001      	ands	r1, r0
   24682:	0049      	lsls	r1, r1, #1
   24684:	201e      	movs	r0, #30
   24686:	4383      	bics	r3, r0
   24688:	430b      	orrs	r3, r1
   2468a:	6053      	str	r3, [r2, #4]
}
   2468c:	46c0      	nop			; (mov r8, r8)
   2468e:	46bd      	mov	sp, r7
   24690:	b002      	add	sp, #8
   24692:	bd80      	pop	{r7, pc}
   24694:	41004000 	.word	0x41004000

00024698 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   24698:	b580      	push	{r7, lr}
   2469a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2469c:	46c0      	nop			; (mov r8, r8)
   2469e:	4b04      	ldr	r3, [pc, #16]	; (246b0 <_system_dfll_wait_for_sync+0x18>)
   246a0:	68db      	ldr	r3, [r3, #12]
   246a2:	2210      	movs	r2, #16
   246a4:	4013      	ands	r3, r2
   246a6:	d0fa      	beq.n	2469e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   246a8:	46c0      	nop			; (mov r8, r8)
   246aa:	46bd      	mov	sp, r7
   246ac:	bd80      	pop	{r7, pc}
   246ae:	46c0      	nop			; (mov r8, r8)
   246b0:	40000800 	.word	0x40000800

000246b4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   246b4:	b580      	push	{r7, lr}
   246b6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   246b8:	4b0c      	ldr	r3, [pc, #48]	; (246ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   246ba:	2202      	movs	r2, #2
   246bc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   246be:	4b0c      	ldr	r3, [pc, #48]	; (246f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   246c0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   246c2:	4a0a      	ldr	r2, [pc, #40]	; (246ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   246c4:	4b0b      	ldr	r3, [pc, #44]	; (246f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   246c6:	689b      	ldr	r3, [r3, #8]
   246c8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   246ca:	4a08      	ldr	r2, [pc, #32]	; (246ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   246cc:	4b09      	ldr	r3, [pc, #36]	; (246f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   246ce:	685b      	ldr	r3, [r3, #4]
   246d0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   246d2:	4b06      	ldr	r3, [pc, #24]	; (246ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   246d4:	2200      	movs	r2, #0
   246d6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   246d8:	4b05      	ldr	r3, [pc, #20]	; (246f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   246da:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   246dc:	4a03      	ldr	r2, [pc, #12]	; (246ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   246de:	4b05      	ldr	r3, [pc, #20]	; (246f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   246e0:	681b      	ldr	r3, [r3, #0]
   246e2:	b29b      	uxth	r3, r3
   246e4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   246e6:	46c0      	nop			; (mov r8, r8)
   246e8:	46bd      	mov	sp, r7
   246ea:	bd80      	pop	{r7, pc}
   246ec:	40000800 	.word	0x40000800
   246f0:	00024699 	.word	0x00024699
   246f4:	200006f0 	.word	0x200006f0

000246f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   246f8:	b580      	push	{r7, lr}
   246fa:	b082      	sub	sp, #8
   246fc:	af00      	add	r7, sp, #0
   246fe:	0002      	movs	r2, r0
   24700:	1dfb      	adds	r3, r7, #7
   24702:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   24704:	1dfb      	adds	r3, r7, #7
   24706:	781b      	ldrb	r3, [r3, #0]
   24708:	2b08      	cmp	r3, #8
   2470a:	d841      	bhi.n	24790 <system_clock_source_get_hz+0x98>
   2470c:	009a      	lsls	r2, r3, #2
   2470e:	4b23      	ldr	r3, [pc, #140]	; (2479c <system_clock_source_get_hz+0xa4>)
   24710:	18d3      	adds	r3, r2, r3
   24712:	681b      	ldr	r3, [r3, #0]
   24714:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   24716:	4b22      	ldr	r3, [pc, #136]	; (247a0 <system_clock_source_get_hz+0xa8>)
   24718:	691b      	ldr	r3, [r3, #16]
   2471a:	e03a      	b.n	24792 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2471c:	4b21      	ldr	r3, [pc, #132]	; (247a4 <system_clock_source_get_hz+0xac>)
   2471e:	6a1b      	ldr	r3, [r3, #32]
   24720:	059b      	lsls	r3, r3, #22
   24722:	0f9b      	lsrs	r3, r3, #30
   24724:	b2db      	uxtb	r3, r3
   24726:	001a      	movs	r2, r3
   24728:	4b1f      	ldr	r3, [pc, #124]	; (247a8 <system_clock_source_get_hz+0xb0>)
   2472a:	40d3      	lsrs	r3, r2
   2472c:	e031      	b.n	24792 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2472e:	2380      	movs	r3, #128	; 0x80
   24730:	021b      	lsls	r3, r3, #8
   24732:	e02e      	b.n	24792 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   24734:	2380      	movs	r3, #128	; 0x80
   24736:	021b      	lsls	r3, r3, #8
   24738:	e02b      	b.n	24792 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2473a:	4b19      	ldr	r3, [pc, #100]	; (247a0 <system_clock_source_get_hz+0xa8>)
   2473c:	695b      	ldr	r3, [r3, #20]
   2473e:	e028      	b.n	24792 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   24740:	4b17      	ldr	r3, [pc, #92]	; (247a0 <system_clock_source_get_hz+0xa8>)
   24742:	681b      	ldr	r3, [r3, #0]
   24744:	2202      	movs	r2, #2
   24746:	4013      	ands	r3, r2
   24748:	d101      	bne.n	2474e <system_clock_source_get_hz+0x56>
			return 0;
   2474a:	2300      	movs	r3, #0
   2474c:	e021      	b.n	24792 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2474e:	4b17      	ldr	r3, [pc, #92]	; (247ac <system_clock_source_get_hz+0xb4>)
   24750:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   24752:	4b13      	ldr	r3, [pc, #76]	; (247a0 <system_clock_source_get_hz+0xa8>)
   24754:	681b      	ldr	r3, [r3, #0]
   24756:	2224      	movs	r2, #36	; 0x24
   24758:	4013      	ands	r3, r2
   2475a:	2b04      	cmp	r3, #4
   2475c:	d109      	bne.n	24772 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2475e:	2000      	movs	r0, #0
   24760:	4b13      	ldr	r3, [pc, #76]	; (247b0 <system_clock_source_get_hz+0xb8>)
   24762:	4798      	blx	r3
   24764:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   24766:	4b0e      	ldr	r3, [pc, #56]	; (247a0 <system_clock_source_get_hz+0xa8>)
   24768:	689b      	ldr	r3, [r3, #8]
   2476a:	041b      	lsls	r3, r3, #16
   2476c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2476e:	4353      	muls	r3, r2
   24770:	e00f      	b.n	24792 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   24772:	4b10      	ldr	r3, [pc, #64]	; (247b4 <system_clock_source_get_hz+0xbc>)
   24774:	e00d      	b.n	24792 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   24776:	4a0b      	ldr	r2, [pc, #44]	; (247a4 <system_clock_source_get_hz+0xac>)
   24778:	2350      	movs	r3, #80	; 0x50
   2477a:	5cd3      	ldrb	r3, [r2, r3]
   2477c:	b2db      	uxtb	r3, r3
   2477e:	001a      	movs	r2, r3
   24780:	2304      	movs	r3, #4
   24782:	4013      	ands	r3, r2
   24784:	d101      	bne.n	2478a <system_clock_source_get_hz+0x92>
			return 0;
   24786:	2300      	movs	r3, #0
   24788:	e003      	b.n	24792 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2478a:	4b05      	ldr	r3, [pc, #20]	; (247a0 <system_clock_source_get_hz+0xa8>)
   2478c:	68db      	ldr	r3, [r3, #12]
   2478e:	e000      	b.n	24792 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   24790:	2300      	movs	r3, #0
	}
}
   24792:	0018      	movs	r0, r3
   24794:	46bd      	mov	sp, r7
   24796:	b002      	add	sp, #8
   24798:	bd80      	pop	{r7, pc}
   2479a:	46c0      	nop			; (mov r8, r8)
   2479c:	0002b644 	.word	0x0002b644
   247a0:	200006f0 	.word	0x200006f0
   247a4:	40000800 	.word	0x40000800
   247a8:	007a1200 	.word	0x007a1200
   247ac:	00024699 	.word	0x00024699
   247b0:	00025339 	.word	0x00025339
   247b4:	02dc6c00 	.word	0x02dc6c00

000247b8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   247b8:	b580      	push	{r7, lr}
   247ba:	b084      	sub	sp, #16
   247bc:	af00      	add	r7, sp, #0
   247be:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   247c0:	4b1a      	ldr	r3, [pc, #104]	; (2482c <system_clock_source_osc8m_set_config+0x74>)
   247c2:	6a1b      	ldr	r3, [r3, #32]
   247c4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   247c6:	687b      	ldr	r3, [r7, #4]
   247c8:	781b      	ldrb	r3, [r3, #0]
   247ca:	1c1a      	adds	r2, r3, #0
   247cc:	2303      	movs	r3, #3
   247ce:	4013      	ands	r3, r2
   247d0:	b2da      	uxtb	r2, r3
   247d2:	230d      	movs	r3, #13
   247d4:	18fb      	adds	r3, r7, r3
   247d6:	2103      	movs	r1, #3
   247d8:	400a      	ands	r2, r1
   247da:	0010      	movs	r0, r2
   247dc:	781a      	ldrb	r2, [r3, #0]
   247de:	2103      	movs	r1, #3
   247e0:	438a      	bics	r2, r1
   247e2:	1c11      	adds	r1, r2, #0
   247e4:	1c02      	adds	r2, r0, #0
   247e6:	430a      	orrs	r2, r1
   247e8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   247ea:	687b      	ldr	r3, [r7, #4]
   247ec:	789a      	ldrb	r2, [r3, #2]
   247ee:	230c      	movs	r3, #12
   247f0:	18fb      	adds	r3, r7, r3
   247f2:	01d0      	lsls	r0, r2, #7
   247f4:	781a      	ldrb	r2, [r3, #0]
   247f6:	217f      	movs	r1, #127	; 0x7f
   247f8:	400a      	ands	r2, r1
   247fa:	1c11      	adds	r1, r2, #0
   247fc:	1c02      	adds	r2, r0, #0
   247fe:	430a      	orrs	r2, r1
   24800:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   24802:	687b      	ldr	r3, [r7, #4]
   24804:	785a      	ldrb	r2, [r3, #1]
   24806:	230c      	movs	r3, #12
   24808:	18fb      	adds	r3, r7, r3
   2480a:	2101      	movs	r1, #1
   2480c:	400a      	ands	r2, r1
   2480e:	0190      	lsls	r0, r2, #6
   24810:	781a      	ldrb	r2, [r3, #0]
   24812:	2140      	movs	r1, #64	; 0x40
   24814:	438a      	bics	r2, r1
   24816:	1c11      	adds	r1, r2, #0
   24818:	1c02      	adds	r2, r0, #0
   2481a:	430a      	orrs	r2, r1
   2481c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2481e:	4b03      	ldr	r3, [pc, #12]	; (2482c <system_clock_source_osc8m_set_config+0x74>)
   24820:	68fa      	ldr	r2, [r7, #12]
   24822:	621a      	str	r2, [r3, #32]
}
   24824:	46c0      	nop			; (mov r8, r8)
   24826:	46bd      	mov	sp, r7
   24828:	b004      	add	sp, #16
   2482a:	bd80      	pop	{r7, pc}
   2482c:	40000800 	.word	0x40000800

00024830 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   24830:	b580      	push	{r7, lr}
   24832:	b084      	sub	sp, #16
   24834:	af00      	add	r7, sp, #0
   24836:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   24838:	4a43      	ldr	r2, [pc, #268]	; (24948 <system_clock_source_xosc32k_set_config+0x118>)
   2483a:	230c      	movs	r3, #12
   2483c:	18fb      	adds	r3, r7, r3
   2483e:	8a92      	ldrh	r2, [r2, #20]
   24840:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   24842:	687b      	ldr	r3, [r7, #4]
   24844:	785b      	ldrb	r3, [r3, #1]
   24846:	1c1a      	adds	r2, r3, #0
   24848:	2307      	movs	r3, #7
   2484a:	4013      	ands	r3, r2
   2484c:	b2da      	uxtb	r2, r3
   2484e:	230c      	movs	r3, #12
   24850:	18fb      	adds	r3, r7, r3
   24852:	2107      	movs	r1, #7
   24854:	400a      	ands	r2, r1
   24856:	0010      	movs	r0, r2
   24858:	785a      	ldrb	r2, [r3, #1]
   2485a:	2107      	movs	r1, #7
   2485c:	438a      	bics	r2, r1
   2485e:	1c11      	adds	r1, r2, #0
   24860:	1c02      	adds	r2, r0, #0
   24862:	430a      	orrs	r2, r1
   24864:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   24866:	687b      	ldr	r3, [r7, #4]
   24868:	781b      	ldrb	r3, [r3, #0]
   2486a:	2b00      	cmp	r3, #0
   2486c:	d106      	bne.n	2487c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   2486e:	230c      	movs	r3, #12
   24870:	18fb      	adds	r3, r7, r3
   24872:	781a      	ldrb	r2, [r3, #0]
   24874:	2104      	movs	r1, #4
   24876:	430a      	orrs	r2, r1
   24878:	701a      	strb	r2, [r3, #0]
   2487a:	e005      	b.n	24888 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   2487c:	230c      	movs	r3, #12
   2487e:	18fb      	adds	r3, r7, r3
   24880:	781a      	ldrb	r2, [r3, #0]
   24882:	2104      	movs	r1, #4
   24884:	438a      	bics	r2, r1
   24886:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   24888:	687b      	ldr	r3, [r7, #4]
   2488a:	789a      	ldrb	r2, [r3, #2]
   2488c:	230c      	movs	r3, #12
   2488e:	18fb      	adds	r3, r7, r3
   24890:	2101      	movs	r1, #1
   24892:	400a      	ands	r2, r1
   24894:	0150      	lsls	r0, r2, #5
   24896:	781a      	ldrb	r2, [r3, #0]
   24898:	2120      	movs	r1, #32
   2489a:	438a      	bics	r2, r1
   2489c:	1c11      	adds	r1, r2, #0
   2489e:	1c02      	adds	r2, r0, #0
   248a0:	430a      	orrs	r2, r1
   248a2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   248a4:	687b      	ldr	r3, [r7, #4]
   248a6:	78da      	ldrb	r2, [r3, #3]
   248a8:	230c      	movs	r3, #12
   248aa:	18fb      	adds	r3, r7, r3
   248ac:	2101      	movs	r1, #1
   248ae:	400a      	ands	r2, r1
   248b0:	0110      	lsls	r0, r2, #4
   248b2:	781a      	ldrb	r2, [r3, #0]
   248b4:	2110      	movs	r1, #16
   248b6:	438a      	bics	r2, r1
   248b8:	1c11      	adds	r1, r2, #0
   248ba:	1c02      	adds	r2, r0, #0
   248bc:	430a      	orrs	r2, r1
   248be:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   248c0:	687b      	ldr	r3, [r7, #4]
   248c2:	791a      	ldrb	r2, [r3, #4]
   248c4:	230c      	movs	r3, #12
   248c6:	18fb      	adds	r3, r7, r3
   248c8:	2101      	movs	r1, #1
   248ca:	400a      	ands	r2, r1
   248cc:	00d0      	lsls	r0, r2, #3
   248ce:	781a      	ldrb	r2, [r3, #0]
   248d0:	2108      	movs	r1, #8
   248d2:	438a      	bics	r2, r1
   248d4:	1c11      	adds	r1, r2, #0
   248d6:	1c02      	adds	r2, r0, #0
   248d8:	430a      	orrs	r2, r1
   248da:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   248dc:	687b      	ldr	r3, [r7, #4]
   248de:	7b5a      	ldrb	r2, [r3, #13]
   248e0:	230c      	movs	r3, #12
   248e2:	18fb      	adds	r3, r7, r3
   248e4:	01d0      	lsls	r0, r2, #7
   248e6:	781a      	ldrb	r2, [r3, #0]
   248e8:	217f      	movs	r1, #127	; 0x7f
   248ea:	400a      	ands	r2, r1
   248ec:	1c11      	adds	r1, r2, #0
   248ee:	1c02      	adds	r2, r0, #0
   248f0:	430a      	orrs	r2, r1
   248f2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   248f4:	687b      	ldr	r3, [r7, #4]
   248f6:	7b1a      	ldrb	r2, [r3, #12]
   248f8:	230c      	movs	r3, #12
   248fa:	18fb      	adds	r3, r7, r3
   248fc:	2101      	movs	r1, #1
   248fe:	400a      	ands	r2, r1
   24900:	0190      	lsls	r0, r2, #6
   24902:	781a      	ldrb	r2, [r3, #0]
   24904:	2140      	movs	r1, #64	; 0x40
   24906:	438a      	bics	r2, r1
   24908:	1c11      	adds	r1, r2, #0
   2490a:	1c02      	adds	r2, r0, #0
   2490c:	430a      	orrs	r2, r1
   2490e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   24910:	687b      	ldr	r3, [r7, #4]
   24912:	7b9a      	ldrb	r2, [r3, #14]
   24914:	230c      	movs	r3, #12
   24916:	18fb      	adds	r3, r7, r3
   24918:	2101      	movs	r1, #1
   2491a:	400a      	ands	r2, r1
   2491c:	0110      	lsls	r0, r2, #4
   2491e:	785a      	ldrb	r2, [r3, #1]
   24920:	2110      	movs	r1, #16
   24922:	438a      	bics	r2, r1
   24924:	1c11      	adds	r1, r2, #0
   24926:	1c02      	adds	r2, r0, #0
   24928:	430a      	orrs	r2, r1
   2492a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   2492c:	687b      	ldr	r3, [r7, #4]
   2492e:	689a      	ldr	r2, [r3, #8]
   24930:	4b06      	ldr	r3, [pc, #24]	; (2494c <system_clock_source_xosc32k_set_config+0x11c>)
   24932:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   24934:	4a04      	ldr	r2, [pc, #16]	; (24948 <system_clock_source_xosc32k_set_config+0x118>)
   24936:	230c      	movs	r3, #12
   24938:	18fb      	adds	r3, r7, r3
   2493a:	881b      	ldrh	r3, [r3, #0]
   2493c:	8293      	strh	r3, [r2, #20]
}
   2493e:	46c0      	nop			; (mov r8, r8)
   24940:	46bd      	mov	sp, r7
   24942:	b004      	add	sp, #16
   24944:	bd80      	pop	{r7, pc}
   24946:	46c0      	nop			; (mov r8, r8)
   24948:	40000800 	.word	0x40000800
   2494c:	200006f0 	.word	0x200006f0

00024950 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   24950:	b580      	push	{r7, lr}
   24952:	b082      	sub	sp, #8
   24954:	af00      	add	r7, sp, #0
   24956:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   24958:	687b      	ldr	r3, [r7, #4]
   2495a:	7a1b      	ldrb	r3, [r3, #8]
   2495c:	029b      	lsls	r3, r3, #10
   2495e:	041b      	lsls	r3, r3, #16
   24960:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   24962:	687b      	ldr	r3, [r7, #4]
   24964:	895b      	ldrh	r3, [r3, #10]
   24966:	059b      	lsls	r3, r3, #22
   24968:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   2496a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   2496c:	4b2a      	ldr	r3, [pc, #168]	; (24a18 <system_clock_source_dfll_set_config+0xc8>)
   2496e:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   24970:	687b      	ldr	r3, [r7, #4]
   24972:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   24974:	687b      	ldr	r3, [r7, #4]
   24976:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   24978:	4313      	orrs	r3, r2
   2497a:	b2db      	uxtb	r3, r3
   2497c:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   2497e:	687b      	ldr	r3, [r7, #4]
   24980:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   24982:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   24984:	687a      	ldr	r2, [r7, #4]
   24986:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   24988:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   2498a:	687b      	ldr	r3, [r7, #4]
   2498c:	785b      	ldrb	r3, [r3, #1]
   2498e:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   24990:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   24992:	4b21      	ldr	r3, [pc, #132]	; (24a18 <system_clock_source_dfll_set_config+0xc8>)
   24994:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   24996:	687b      	ldr	r3, [r7, #4]
   24998:	781b      	ldrb	r3, [r3, #0]
   2499a:	2b04      	cmp	r3, #4
   2499c:	d116      	bne.n	249cc <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   2499e:	687b      	ldr	r3, [r7, #4]
   249a0:	7b1b      	ldrb	r3, [r3, #12]
   249a2:	069b      	lsls	r3, r3, #26
   249a4:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   249a6:	687b      	ldr	r3, [r7, #4]
   249a8:	89db      	ldrh	r3, [r3, #14]
   249aa:	041b      	lsls	r3, r3, #16
   249ac:	0019      	movs	r1, r3
   249ae:	4b1b      	ldr	r3, [pc, #108]	; (24a1c <system_clock_source_dfll_set_config+0xcc>)
   249b0:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   249b2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   249b4:	687a      	ldr	r2, [r7, #4]
   249b6:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   249b8:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   249ba:	4b17      	ldr	r3, [pc, #92]	; (24a18 <system_clock_source_dfll_set_config+0xc8>)
   249bc:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   249be:	4b16      	ldr	r3, [pc, #88]	; (24a18 <system_clock_source_dfll_set_config+0xc8>)
   249c0:	681b      	ldr	r3, [r3, #0]
   249c2:	687a      	ldr	r2, [r7, #4]
   249c4:	7812      	ldrb	r2, [r2, #0]
   249c6:	431a      	orrs	r2, r3
   249c8:	4b13      	ldr	r3, [pc, #76]	; (24a18 <system_clock_source_dfll_set_config+0xc8>)
   249ca:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   249cc:	687b      	ldr	r3, [r7, #4]
   249ce:	781b      	ldrb	r3, [r3, #0]
   249d0:	2b20      	cmp	r3, #32
   249d2:	d11c      	bne.n	24a0e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   249d4:	687b      	ldr	r3, [r7, #4]
   249d6:	7b1b      	ldrb	r3, [r3, #12]
   249d8:	069b      	lsls	r3, r3, #26
   249da:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   249dc:	687b      	ldr	r3, [r7, #4]
   249de:	89db      	ldrh	r3, [r3, #14]
   249e0:	041b      	lsls	r3, r3, #16
   249e2:	0019      	movs	r1, r3
   249e4:	4b0d      	ldr	r3, [pc, #52]	; (24a1c <system_clock_source_dfll_set_config+0xcc>)
   249e6:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   249e8:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   249ea:	687a      	ldr	r2, [r7, #4]
   249ec:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   249ee:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   249f0:	4b09      	ldr	r3, [pc, #36]	; (24a18 <system_clock_source_dfll_set_config+0xc8>)
   249f2:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   249f4:	4b08      	ldr	r3, [pc, #32]	; (24a18 <system_clock_source_dfll_set_config+0xc8>)
   249f6:	681b      	ldr	r3, [r3, #0]
   249f8:	687a      	ldr	r2, [r7, #4]
   249fa:	7812      	ldrb	r2, [r2, #0]
   249fc:	2104      	movs	r1, #4
   249fe:	430a      	orrs	r2, r1
   24a00:	b2d2      	uxtb	r2, r2
   24a02:	4313      	orrs	r3, r2
   24a04:	2280      	movs	r2, #128	; 0x80
   24a06:	00d2      	lsls	r2, r2, #3
   24a08:	431a      	orrs	r2, r3
   24a0a:	4b03      	ldr	r3, [pc, #12]	; (24a18 <system_clock_source_dfll_set_config+0xc8>)
   24a0c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   24a0e:	46c0      	nop			; (mov r8, r8)
   24a10:	46bd      	mov	sp, r7
   24a12:	b002      	add	sp, #8
   24a14:	bd80      	pop	{r7, pc}
   24a16:	46c0      	nop			; (mov r8, r8)
   24a18:	200006f0 	.word	0x200006f0
   24a1c:	03ff0000 	.word	0x03ff0000

00024a20 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   24a20:	b580      	push	{r7, lr}
   24a22:	b082      	sub	sp, #8
   24a24:	af00      	add	r7, sp, #0
   24a26:	0002      	movs	r2, r0
   24a28:	1dfb      	adds	r3, r7, #7
   24a2a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   24a2c:	1dfb      	adds	r3, r7, #7
   24a2e:	781b      	ldrb	r3, [r3, #0]
   24a30:	2b08      	cmp	r3, #8
   24a32:	d83b      	bhi.n	24aac <system_clock_source_enable+0x8c>
   24a34:	009a      	lsls	r2, r3, #2
   24a36:	4b21      	ldr	r3, [pc, #132]	; (24abc <system_clock_source_enable+0x9c>)
   24a38:	18d3      	adds	r3, r2, r3
   24a3a:	681b      	ldr	r3, [r3, #0]
   24a3c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   24a3e:	4b20      	ldr	r3, [pc, #128]	; (24ac0 <system_clock_source_enable+0xa0>)
   24a40:	4a1f      	ldr	r2, [pc, #124]	; (24ac0 <system_clock_source_enable+0xa0>)
   24a42:	6a12      	ldr	r2, [r2, #32]
   24a44:	2102      	movs	r1, #2
   24a46:	430a      	orrs	r2, r1
   24a48:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   24a4a:	2300      	movs	r3, #0
   24a4c:	e031      	b.n	24ab2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   24a4e:	4b1c      	ldr	r3, [pc, #112]	; (24ac0 <system_clock_source_enable+0xa0>)
   24a50:	4a1b      	ldr	r2, [pc, #108]	; (24ac0 <system_clock_source_enable+0xa0>)
   24a52:	6992      	ldr	r2, [r2, #24]
   24a54:	2102      	movs	r1, #2
   24a56:	430a      	orrs	r2, r1
   24a58:	619a      	str	r2, [r3, #24]
		break;
   24a5a:	e029      	b.n	24ab0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   24a5c:	4a18      	ldr	r2, [pc, #96]	; (24ac0 <system_clock_source_enable+0xa0>)
   24a5e:	4b18      	ldr	r3, [pc, #96]	; (24ac0 <system_clock_source_enable+0xa0>)
   24a60:	8a1b      	ldrh	r3, [r3, #16]
   24a62:	b29b      	uxth	r3, r3
   24a64:	2102      	movs	r1, #2
   24a66:	430b      	orrs	r3, r1
   24a68:	b29b      	uxth	r3, r3
   24a6a:	8213      	strh	r3, [r2, #16]
		break;
   24a6c:	e020      	b.n	24ab0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   24a6e:	4a14      	ldr	r2, [pc, #80]	; (24ac0 <system_clock_source_enable+0xa0>)
   24a70:	4b13      	ldr	r3, [pc, #76]	; (24ac0 <system_clock_source_enable+0xa0>)
   24a72:	8a9b      	ldrh	r3, [r3, #20]
   24a74:	b29b      	uxth	r3, r3
   24a76:	2102      	movs	r1, #2
   24a78:	430b      	orrs	r3, r1
   24a7a:	b29b      	uxth	r3, r3
   24a7c:	8293      	strh	r3, [r2, #20]
		break;
   24a7e:	e017      	b.n	24ab0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   24a80:	4b10      	ldr	r3, [pc, #64]	; (24ac4 <system_clock_source_enable+0xa4>)
   24a82:	681b      	ldr	r3, [r3, #0]
   24a84:	2202      	movs	r2, #2
   24a86:	431a      	orrs	r2, r3
   24a88:	4b0e      	ldr	r3, [pc, #56]	; (24ac4 <system_clock_source_enable+0xa4>)
   24a8a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   24a8c:	4b0e      	ldr	r3, [pc, #56]	; (24ac8 <system_clock_source_enable+0xa8>)
   24a8e:	4798      	blx	r3
		break;
   24a90:	e00e      	b.n	24ab0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   24a92:	4a0b      	ldr	r2, [pc, #44]	; (24ac0 <system_clock_source_enable+0xa0>)
   24a94:	490a      	ldr	r1, [pc, #40]	; (24ac0 <system_clock_source_enable+0xa0>)
   24a96:	2344      	movs	r3, #68	; 0x44
   24a98:	5ccb      	ldrb	r3, [r1, r3]
   24a9a:	b2db      	uxtb	r3, r3
   24a9c:	2102      	movs	r1, #2
   24a9e:	430b      	orrs	r3, r1
   24aa0:	b2d9      	uxtb	r1, r3
   24aa2:	2344      	movs	r3, #68	; 0x44
   24aa4:	54d1      	strb	r1, [r2, r3]
		break;
   24aa6:	e003      	b.n	24ab0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   24aa8:	2300      	movs	r3, #0
   24aaa:	e002      	b.n	24ab2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   24aac:	2317      	movs	r3, #23
   24aae:	e000      	b.n	24ab2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   24ab0:	2300      	movs	r3, #0
}
   24ab2:	0018      	movs	r0, r3
   24ab4:	46bd      	mov	sp, r7
   24ab6:	b002      	add	sp, #8
   24ab8:	bd80      	pop	{r7, pc}
   24aba:	46c0      	nop			; (mov r8, r8)
   24abc:	0002b668 	.word	0x0002b668
   24ac0:	40000800 	.word	0x40000800
   24ac4:	200006f0 	.word	0x200006f0
   24ac8:	000246b5 	.word	0x000246b5

00024acc <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   24acc:	b580      	push	{r7, lr}
   24ace:	b084      	sub	sp, #16
   24ad0:	af00      	add	r7, sp, #0
   24ad2:	0002      	movs	r2, r0
   24ad4:	1dfb      	adds	r3, r7, #7
   24ad6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   24ad8:	2300      	movs	r3, #0
   24ada:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   24adc:	1dfb      	adds	r3, r7, #7
   24ade:	781b      	ldrb	r3, [r3, #0]
   24ae0:	2b08      	cmp	r3, #8
   24ae2:	d821      	bhi.n	24b28 <system_clock_source_is_ready+0x5c>
   24ae4:	009a      	lsls	r2, r3, #2
   24ae6:	4b18      	ldr	r3, [pc, #96]	; (24b48 <system_clock_source_is_ready+0x7c>)
   24ae8:	18d3      	adds	r3, r2, r3
   24aea:	681b      	ldr	r3, [r3, #0]
   24aec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   24aee:	2308      	movs	r3, #8
   24af0:	60fb      	str	r3, [r7, #12]
		break;
   24af2:	e01b      	b.n	24b2c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   24af4:	2304      	movs	r3, #4
   24af6:	60fb      	str	r3, [r7, #12]
		break;
   24af8:	e018      	b.n	24b2c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   24afa:	2301      	movs	r3, #1
   24afc:	60fb      	str	r3, [r7, #12]
		break;
   24afe:	e015      	b.n	24b2c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   24b00:	2302      	movs	r3, #2
   24b02:	60fb      	str	r3, [r7, #12]
		break;
   24b04:	e012      	b.n	24b2c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   24b06:	23d0      	movs	r3, #208	; 0xd0
   24b08:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   24b0a:	e00f      	b.n	24b2c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   24b0c:	4a0f      	ldr	r2, [pc, #60]	; (24b4c <system_clock_source_is_ready+0x80>)
   24b0e:	2350      	movs	r3, #80	; 0x50
   24b10:	5cd3      	ldrb	r3, [r2, r3]
   24b12:	b2db      	uxtb	r3, r3
   24b14:	001a      	movs	r2, r3
   24b16:	2303      	movs	r3, #3
   24b18:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   24b1a:	3b03      	subs	r3, #3
   24b1c:	425a      	negs	r2, r3
   24b1e:	4153      	adcs	r3, r2
   24b20:	b2db      	uxtb	r3, r3
   24b22:	e00c      	b.n	24b3e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   24b24:	2301      	movs	r3, #1
   24b26:	e00a      	b.n	24b3e <system_clock_source_is_ready+0x72>

	default:
		return false;
   24b28:	2300      	movs	r3, #0
   24b2a:	e008      	b.n	24b3e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   24b2c:	4b07      	ldr	r3, [pc, #28]	; (24b4c <system_clock_source_is_ready+0x80>)
   24b2e:	68db      	ldr	r3, [r3, #12]
   24b30:	68fa      	ldr	r2, [r7, #12]
   24b32:	401a      	ands	r2, r3
   24b34:	68fb      	ldr	r3, [r7, #12]
   24b36:	1ad3      	subs	r3, r2, r3
   24b38:	425a      	negs	r2, r3
   24b3a:	4153      	adcs	r3, r2
   24b3c:	b2db      	uxtb	r3, r3
}
   24b3e:	0018      	movs	r0, r3
   24b40:	46bd      	mov	sp, r7
   24b42:	b004      	add	sp, #16
   24b44:	bd80      	pop	{r7, pc}
   24b46:	46c0      	nop			; (mov r8, r8)
   24b48:	0002b68c 	.word	0x0002b68c
   24b4c:	40000800 	.word	0x40000800

00024b50 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   24b50:	b580      	push	{r7, lr}
   24b52:	b082      	sub	sp, #8
   24b54:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   24b56:	003b      	movs	r3, r7
   24b58:	2202      	movs	r2, #2
   24b5a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   24b5c:	2300      	movs	r3, #0
   24b5e:	607b      	str	r3, [r7, #4]
   24b60:	e009      	b.n	24b76 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   24b62:	687b      	ldr	r3, [r7, #4]
   24b64:	b2db      	uxtb	r3, r3
   24b66:	003a      	movs	r2, r7
   24b68:	0011      	movs	r1, r2
   24b6a:	0018      	movs	r0, r3
   24b6c:	4b05      	ldr	r3, [pc, #20]	; (24b84 <_switch_peripheral_gclk+0x34>)
   24b6e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   24b70:	687b      	ldr	r3, [r7, #4]
   24b72:	3301      	adds	r3, #1
   24b74:	607b      	str	r3, [r7, #4]
   24b76:	687b      	ldr	r3, [r7, #4]
   24b78:	2b24      	cmp	r3, #36	; 0x24
   24b7a:	d9f2      	bls.n	24b62 <_switch_peripheral_gclk+0x12>
	}
}
   24b7c:	46c0      	nop			; (mov r8, r8)
   24b7e:	46bd      	mov	sp, r7
   24b80:	b002      	add	sp, #8
   24b82:	bd80      	pop	{r7, pc}
   24b84:	00025215 	.word	0x00025215

00024b88 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   24b88:	b580      	push	{r7, lr}
   24b8a:	b0aa      	sub	sp, #168	; 0xa8
   24b8c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   24b8e:	4bc1      	ldr	r3, [pc, #772]	; (24e94 <system_clock_init+0x30c>)
   24b90:	22c2      	movs	r2, #194	; 0xc2
   24b92:	00d2      	lsls	r2, r2, #3
   24b94:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   24b96:	2002      	movs	r0, #2
   24b98:	4bbf      	ldr	r3, [pc, #764]	; (24e98 <system_clock_init+0x310>)
   24b9a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   24b9c:	4bbf      	ldr	r3, [pc, #764]	; (24e9c <system_clock_init+0x314>)
   24b9e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   24ba0:	2394      	movs	r3, #148	; 0x94
   24ba2:	18fb      	adds	r3, r7, r3
   24ba4:	0018      	movs	r0, r3
   24ba6:	4bbe      	ldr	r3, [pc, #760]	; (24ea0 <system_clock_init+0x318>)
   24ba8:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   24baa:	2394      	movs	r3, #148	; 0x94
   24bac:	18fb      	adds	r3, r7, r3
   24bae:	2280      	movs	r2, #128	; 0x80
   24bb0:	0212      	lsls	r2, r2, #8
   24bb2:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   24bb4:	2394      	movs	r3, #148	; 0x94
   24bb6:	18fb      	adds	r3, r7, r3
   24bb8:	2200      	movs	r2, #0
   24bba:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   24bbc:	2394      	movs	r3, #148	; 0x94
   24bbe:	18fb      	adds	r3, r7, r3
   24bc0:	2206      	movs	r2, #6
   24bc2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   24bc4:	2394      	movs	r3, #148	; 0x94
   24bc6:	18fb      	adds	r3, r7, r3
   24bc8:	2200      	movs	r2, #0
   24bca:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   24bcc:	2394      	movs	r3, #148	; 0x94
   24bce:	18fb      	adds	r3, r7, r3
   24bd0:	2200      	movs	r2, #0
   24bd2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   24bd4:	2394      	movs	r3, #148	; 0x94
   24bd6:	18fb      	adds	r3, r7, r3
   24bd8:	2201      	movs	r2, #1
   24bda:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   24bdc:	2394      	movs	r3, #148	; 0x94
   24bde:	18fb      	adds	r3, r7, r3
   24be0:	2200      	movs	r2, #0
   24be2:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   24be4:	2394      	movs	r3, #148	; 0x94
   24be6:	18fb      	adds	r3, r7, r3
   24be8:	2201      	movs	r2, #1
   24bea:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   24bec:	2394      	movs	r3, #148	; 0x94
   24bee:	18fb      	adds	r3, r7, r3
   24bf0:	0018      	movs	r0, r3
   24bf2:	4bac      	ldr	r3, [pc, #688]	; (24ea4 <system_clock_init+0x31c>)
   24bf4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   24bf6:	2005      	movs	r0, #5
   24bf8:	4bab      	ldr	r3, [pc, #684]	; (24ea8 <system_clock_init+0x320>)
   24bfa:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   24bfc:	46c0      	nop			; (mov r8, r8)
   24bfe:	2005      	movs	r0, #5
   24c00:	4baa      	ldr	r3, [pc, #680]	; (24eac <system_clock_init+0x324>)
   24c02:	4798      	blx	r3
   24c04:	0003      	movs	r3, r0
   24c06:	001a      	movs	r2, r3
   24c08:	2301      	movs	r3, #1
   24c0a:	4053      	eors	r3, r2
   24c0c:	b2db      	uxtb	r3, r3
   24c0e:	2b00      	cmp	r3, #0
   24c10:	d1f5      	bne.n	24bfe <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   24c12:	2380      	movs	r3, #128	; 0x80
   24c14:	18fb      	adds	r3, r7, r3
   24c16:	0018      	movs	r0, r3
   24c18:	4ba5      	ldr	r3, [pc, #660]	; (24eb0 <system_clock_init+0x328>)
   24c1a:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   24c1c:	2380      	movs	r3, #128	; 0x80
   24c1e:	18fb      	adds	r3, r7, r3
   24c20:	2204      	movs	r2, #4
   24c22:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   24c24:	2380      	movs	r3, #128	; 0x80
   24c26:	18fb      	adds	r3, r7, r3
   24c28:	2200      	movs	r2, #0
   24c2a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   24c2c:	4ba1      	ldr	r3, [pc, #644]	; (24eb4 <system_clock_init+0x32c>)
   24c2e:	681b      	ldr	r3, [r3, #0]
   24c30:	0e9b      	lsrs	r3, r3, #26
   24c32:	22a4      	movs	r2, #164	; 0xa4
   24c34:	18ba      	adds	r2, r7, r2
   24c36:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   24c38:	23a4      	movs	r3, #164	; 0xa4
   24c3a:	18fb      	adds	r3, r7, r3
   24c3c:	681b      	ldr	r3, [r3, #0]
   24c3e:	2b3f      	cmp	r3, #63	; 0x3f
   24c40:	d103      	bne.n	24c4a <system_clock_init+0xc2>
		coarse = 0x1f;
   24c42:	231f      	movs	r3, #31
   24c44:	22a4      	movs	r2, #164	; 0xa4
   24c46:	18ba      	adds	r2, r7, r2
   24c48:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   24c4a:	23a4      	movs	r3, #164	; 0xa4
   24c4c:	18fb      	adds	r3, r7, r3
   24c4e:	681b      	ldr	r3, [r3, #0]
   24c50:	b2da      	uxtb	r2, r3
   24c52:	2380      	movs	r3, #128	; 0x80
   24c54:	18fb      	adds	r3, r7, r3
   24c56:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   24c58:	2380      	movs	r3, #128	; 0x80
   24c5a:	18fb      	adds	r3, r7, r3
   24c5c:	2200      	movs	r2, #0
   24c5e:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   24c60:	2380      	movs	r3, #128	; 0x80
   24c62:	18fb      	adds	r3, r7, r3
   24c64:	2200      	movs	r2, #0
   24c66:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   24c68:	2380      	movs	r3, #128	; 0x80
   24c6a:	18fb      	adds	r3, r7, r3
   24c6c:	2200      	movs	r2, #0
   24c6e:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   24c70:	2380      	movs	r3, #128	; 0x80
   24c72:	18fb      	adds	r3, r7, r3
   24c74:	2200      	movs	r2, #0
   24c76:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   24c78:	2380      	movs	r3, #128	; 0x80
   24c7a:	18fb      	adds	r3, r7, r3
   24c7c:	22b7      	movs	r2, #183	; 0xb7
   24c7e:	00d2      	lsls	r2, r2, #3
   24c80:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   24c82:	2380      	movs	r3, #128	; 0x80
   24c84:	18fb      	adds	r3, r7, r3
   24c86:	2203      	movs	r2, #3
   24c88:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   24c8a:	2380      	movs	r3, #128	; 0x80
   24c8c:	18fb      	adds	r3, r7, r3
   24c8e:	221f      	movs	r2, #31
   24c90:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   24c92:	2380      	movs	r3, #128	; 0x80
   24c94:	18fb      	adds	r3, r7, r3
   24c96:	0018      	movs	r0, r3
   24c98:	4b87      	ldr	r3, [pc, #540]	; (24eb8 <system_clock_init+0x330>)
   24c9a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   24c9c:	237c      	movs	r3, #124	; 0x7c
   24c9e:	18fb      	adds	r3, r7, r3
   24ca0:	0018      	movs	r0, r3
   24ca2:	4b86      	ldr	r3, [pc, #536]	; (24ebc <system_clock_init+0x334>)
   24ca4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   24ca6:	237c      	movs	r3, #124	; 0x7c
   24ca8:	18fb      	adds	r3, r7, r3
   24caa:	2200      	movs	r2, #0
   24cac:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   24cae:	237c      	movs	r3, #124	; 0x7c
   24cb0:	18fb      	adds	r3, r7, r3
   24cb2:	2201      	movs	r2, #1
   24cb4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   24cb6:	237c      	movs	r3, #124	; 0x7c
   24cb8:	18fb      	adds	r3, r7, r3
   24cba:	2201      	movs	r2, #1
   24cbc:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   24cbe:	237c      	movs	r3, #124	; 0x7c
   24cc0:	18fb      	adds	r3, r7, r3
   24cc2:	0018      	movs	r0, r3
   24cc4:	4b7e      	ldr	r3, [pc, #504]	; (24ec0 <system_clock_init+0x338>)
   24cc6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   24cc8:	2006      	movs	r0, #6
   24cca:	4b77      	ldr	r3, [pc, #476]	; (24ea8 <system_clock_init+0x320>)
   24ccc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   24cce:	4b7d      	ldr	r3, [pc, #500]	; (24ec4 <system_clock_init+0x33c>)
   24cd0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   24cd2:	2364      	movs	r3, #100	; 0x64
   24cd4:	18fb      	adds	r3, r7, r3
   24cd6:	0018      	movs	r0, r3
   24cd8:	4b7b      	ldr	r3, [pc, #492]	; (24ec8 <system_clock_init+0x340>)
   24cda:	4798      	blx	r3
   24cdc:	2364      	movs	r3, #100	; 0x64
   24cde:	18fb      	adds	r3, r7, r3
   24ce0:	2205      	movs	r2, #5
   24ce2:	701a      	strb	r2, [r3, #0]
   24ce4:	2364      	movs	r3, #100	; 0x64
   24ce6:	18fb      	adds	r3, r7, r3
   24ce8:	2201      	movs	r2, #1
   24cea:	605a      	str	r2, [r3, #4]
   24cec:	2364      	movs	r3, #100	; 0x64
   24cee:	18fb      	adds	r3, r7, r3
   24cf0:	2200      	movs	r2, #0
   24cf2:	721a      	strb	r2, [r3, #8]
   24cf4:	2364      	movs	r3, #100	; 0x64
   24cf6:	18fb      	adds	r3, r7, r3
   24cf8:	2200      	movs	r2, #0
   24cfa:	725a      	strb	r2, [r3, #9]
   24cfc:	2364      	movs	r3, #100	; 0x64
   24cfe:	18fb      	adds	r3, r7, r3
   24d00:	0019      	movs	r1, r3
   24d02:	2001      	movs	r0, #1
   24d04:	4b71      	ldr	r3, [pc, #452]	; (24ecc <system_clock_init+0x344>)
   24d06:	4798      	blx	r3
   24d08:	2001      	movs	r0, #1
   24d0a:	4b71      	ldr	r3, [pc, #452]	; (24ed0 <system_clock_init+0x348>)
   24d0c:	4798      	blx	r3
   24d0e:	234c      	movs	r3, #76	; 0x4c
   24d10:	18fb      	adds	r3, r7, r3
   24d12:	0018      	movs	r0, r3
   24d14:	4b6c      	ldr	r3, [pc, #432]	; (24ec8 <system_clock_init+0x340>)
   24d16:	4798      	blx	r3
   24d18:	234c      	movs	r3, #76	; 0x4c
   24d1a:	18fb      	adds	r3, r7, r3
   24d1c:	2206      	movs	r2, #6
   24d1e:	701a      	strb	r2, [r3, #0]
   24d20:	234c      	movs	r3, #76	; 0x4c
   24d22:	18fb      	adds	r3, r7, r3
   24d24:	2201      	movs	r2, #1
   24d26:	605a      	str	r2, [r3, #4]
   24d28:	234c      	movs	r3, #76	; 0x4c
   24d2a:	18fb      	adds	r3, r7, r3
   24d2c:	2201      	movs	r2, #1
   24d2e:	721a      	strb	r2, [r3, #8]
   24d30:	234c      	movs	r3, #76	; 0x4c
   24d32:	18fb      	adds	r3, r7, r3
   24d34:	2200      	movs	r2, #0
   24d36:	725a      	strb	r2, [r3, #9]
   24d38:	234c      	movs	r3, #76	; 0x4c
   24d3a:	18fb      	adds	r3, r7, r3
   24d3c:	0019      	movs	r1, r3
   24d3e:	2003      	movs	r0, #3
   24d40:	4b62      	ldr	r3, [pc, #392]	; (24ecc <system_clock_init+0x344>)
   24d42:	4798      	blx	r3
   24d44:	2003      	movs	r0, #3
   24d46:	4b62      	ldr	r3, [pc, #392]	; (24ed0 <system_clock_init+0x348>)
   24d48:	4798      	blx	r3
   24d4a:	2340      	movs	r3, #64	; 0x40
   24d4c:	18fb      	adds	r3, r7, r3
   24d4e:	0018      	movs	r0, r3
   24d50:	4b5d      	ldr	r3, [pc, #372]	; (24ec8 <system_clock_init+0x340>)
   24d52:	4798      	blx	r3
   24d54:	2340      	movs	r3, #64	; 0x40
   24d56:	18fb      	adds	r3, r7, r3
   24d58:	2203      	movs	r2, #3
   24d5a:	701a      	strb	r2, [r3, #0]
   24d5c:	2340      	movs	r3, #64	; 0x40
   24d5e:	18fb      	adds	r3, r7, r3
   24d60:	2220      	movs	r2, #32
   24d62:	605a      	str	r2, [r3, #4]
   24d64:	2340      	movs	r3, #64	; 0x40
   24d66:	18fb      	adds	r3, r7, r3
   24d68:	2200      	movs	r2, #0
   24d6a:	721a      	strb	r2, [r3, #8]
   24d6c:	2340      	movs	r3, #64	; 0x40
   24d6e:	18fb      	adds	r3, r7, r3
   24d70:	2200      	movs	r2, #0
   24d72:	725a      	strb	r2, [r3, #9]
   24d74:	2340      	movs	r3, #64	; 0x40
   24d76:	18fb      	adds	r3, r7, r3
   24d78:	0019      	movs	r1, r3
   24d7a:	2004      	movs	r0, #4
   24d7c:	4b53      	ldr	r3, [pc, #332]	; (24ecc <system_clock_init+0x344>)
   24d7e:	4798      	blx	r3
   24d80:	2004      	movs	r0, #4
   24d82:	4b53      	ldr	r3, [pc, #332]	; (24ed0 <system_clock_init+0x348>)
   24d84:	4798      	blx	r3
   24d86:	2334      	movs	r3, #52	; 0x34
   24d88:	18fb      	adds	r3, r7, r3
   24d8a:	0018      	movs	r0, r3
   24d8c:	4b4e      	ldr	r3, [pc, #312]	; (24ec8 <system_clock_init+0x340>)
   24d8e:	4798      	blx	r3
   24d90:	2334      	movs	r3, #52	; 0x34
   24d92:	18fb      	adds	r3, r7, r3
   24d94:	2207      	movs	r2, #7
   24d96:	701a      	strb	r2, [r3, #0]
   24d98:	2334      	movs	r3, #52	; 0x34
   24d9a:	18fb      	adds	r3, r7, r3
   24d9c:	2201      	movs	r2, #1
   24d9e:	605a      	str	r2, [r3, #4]
   24da0:	2334      	movs	r3, #52	; 0x34
   24da2:	18fb      	adds	r3, r7, r3
   24da4:	2200      	movs	r2, #0
   24da6:	721a      	strb	r2, [r3, #8]
   24da8:	2334      	movs	r3, #52	; 0x34
   24daa:	18fb      	adds	r3, r7, r3
   24dac:	2200      	movs	r2, #0
   24dae:	725a      	strb	r2, [r3, #9]
   24db0:	2334      	movs	r3, #52	; 0x34
   24db2:	18fb      	adds	r3, r7, r3
   24db4:	0019      	movs	r1, r3
   24db6:	2005      	movs	r0, #5
   24db8:	4b44      	ldr	r3, [pc, #272]	; (24ecc <system_clock_init+0x344>)
   24dba:	4798      	blx	r3
   24dbc:	2005      	movs	r0, #5
   24dbe:	4b44      	ldr	r3, [pc, #272]	; (24ed0 <system_clock_init+0x348>)
   24dc0:	4798      	blx	r3
   24dc2:	2328      	movs	r3, #40	; 0x28
   24dc4:	18fb      	adds	r3, r7, r3
   24dc6:	0018      	movs	r0, r3
   24dc8:	4b3f      	ldr	r3, [pc, #252]	; (24ec8 <system_clock_init+0x340>)
   24dca:	4798      	blx	r3
   24dcc:	2328      	movs	r3, #40	; 0x28
   24dce:	18fb      	adds	r3, r7, r3
   24dd0:	2206      	movs	r2, #6
   24dd2:	701a      	strb	r2, [r3, #0]
   24dd4:	2328      	movs	r3, #40	; 0x28
   24dd6:	18fb      	adds	r3, r7, r3
   24dd8:	2201      	movs	r2, #1
   24dda:	605a      	str	r2, [r3, #4]
   24ddc:	2328      	movs	r3, #40	; 0x28
   24dde:	18fb      	adds	r3, r7, r3
   24de0:	2201      	movs	r2, #1
   24de2:	721a      	strb	r2, [r3, #8]
   24de4:	2328      	movs	r3, #40	; 0x28
   24de6:	18fb      	adds	r3, r7, r3
   24de8:	2200      	movs	r2, #0
   24dea:	725a      	strb	r2, [r3, #9]
   24dec:	2328      	movs	r3, #40	; 0x28
   24dee:	18fb      	adds	r3, r7, r3
   24df0:	0019      	movs	r1, r3
   24df2:	2006      	movs	r0, #6
   24df4:	4b35      	ldr	r3, [pc, #212]	; (24ecc <system_clock_init+0x344>)
   24df6:	4798      	blx	r3
   24df8:	2006      	movs	r0, #6
   24dfa:	4b35      	ldr	r3, [pc, #212]	; (24ed0 <system_clock_init+0x348>)
   24dfc:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   24dfe:	230c      	movs	r3, #12
   24e00:	18fb      	adds	r3, r7, r3
   24e02:	0018      	movs	r0, r3
   24e04:	4b33      	ldr	r3, [pc, #204]	; (24ed4 <system_clock_init+0x34c>)
   24e06:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   24e08:	230c      	movs	r3, #12
   24e0a:	18fb      	adds	r3, r7, r3
   24e0c:	2201      	movs	r2, #1
   24e0e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   24e10:	230c      	movs	r3, #12
   24e12:	18fb      	adds	r3, r7, r3
   24e14:	0019      	movs	r1, r3
   24e16:	2000      	movs	r0, #0
   24e18:	4b2f      	ldr	r3, [pc, #188]	; (24ed8 <system_clock_init+0x350>)
   24e1a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   24e1c:	2000      	movs	r0, #0
   24e1e:	4b2f      	ldr	r3, [pc, #188]	; (24edc <system_clock_init+0x354>)
   24e20:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   24e22:	2007      	movs	r0, #7
   24e24:	4b20      	ldr	r3, [pc, #128]	; (24ea8 <system_clock_init+0x320>)
   24e26:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   24e28:	46c0      	nop			; (mov r8, r8)
   24e2a:	2007      	movs	r0, #7
   24e2c:	4b1f      	ldr	r3, [pc, #124]	; (24eac <system_clock_init+0x324>)
   24e2e:	4798      	blx	r3
   24e30:	0003      	movs	r3, r0
   24e32:	001a      	movs	r2, r3
   24e34:	2301      	movs	r3, #1
   24e36:	4053      	eors	r3, r2
   24e38:	b2db      	uxtb	r3, r3
   24e3a:	2b00      	cmp	r3, #0
   24e3c:	d1f5      	bne.n	24e2a <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   24e3e:	2000      	movs	r0, #0
   24e40:	4b27      	ldr	r3, [pc, #156]	; (24ee0 <system_clock_init+0x358>)
   24e42:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   24e44:	2100      	movs	r1, #0
   24e46:	2000      	movs	r0, #0
   24e48:	4b26      	ldr	r3, [pc, #152]	; (24ee4 <system_clock_init+0x35c>)
   24e4a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   24e4c:	2100      	movs	r1, #0
   24e4e:	2001      	movs	r0, #1
   24e50:	4b24      	ldr	r3, [pc, #144]	; (24ee4 <system_clock_init+0x35c>)
   24e52:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   24e54:	2100      	movs	r1, #0
   24e56:	2002      	movs	r0, #2
   24e58:	4b22      	ldr	r3, [pc, #136]	; (24ee4 <system_clock_init+0x35c>)
   24e5a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   24e5c:	003b      	movs	r3, r7
   24e5e:	0018      	movs	r0, r3
   24e60:	4b19      	ldr	r3, [pc, #100]	; (24ec8 <system_clock_init+0x340>)
   24e62:	4798      	blx	r3
   24e64:	003b      	movs	r3, r7
   24e66:	2207      	movs	r2, #7
   24e68:	701a      	strb	r2, [r3, #0]
   24e6a:	003b      	movs	r3, r7
   24e6c:	2201      	movs	r2, #1
   24e6e:	605a      	str	r2, [r3, #4]
   24e70:	003b      	movs	r3, r7
   24e72:	2200      	movs	r2, #0
   24e74:	721a      	strb	r2, [r3, #8]
   24e76:	003b      	movs	r3, r7
   24e78:	2200      	movs	r2, #0
   24e7a:	725a      	strb	r2, [r3, #9]
   24e7c:	003b      	movs	r3, r7
   24e7e:	0019      	movs	r1, r3
   24e80:	2000      	movs	r0, #0
   24e82:	4b12      	ldr	r3, [pc, #72]	; (24ecc <system_clock_init+0x344>)
   24e84:	4798      	blx	r3
   24e86:	2000      	movs	r0, #0
   24e88:	4b11      	ldr	r3, [pc, #68]	; (24ed0 <system_clock_init+0x348>)
   24e8a:	4798      	blx	r3
#endif
}
   24e8c:	46c0      	nop			; (mov r8, r8)
   24e8e:	46bd      	mov	sp, r7
   24e90:	b02a      	add	sp, #168	; 0xa8
   24e92:	bd80      	pop	{r7, pc}
   24e94:	40000800 	.word	0x40000800
   24e98:	00024665 	.word	0x00024665
   24e9c:	00024b51 	.word	0x00024b51
   24ea0:	00024535 	.word	0x00024535
   24ea4:	00024831 	.word	0x00024831
   24ea8:	00024a21 	.word	0x00024a21
   24eac:	00024acd 	.word	0x00024acd
   24eb0:	0002459f 	.word	0x0002459f
   24eb4:	00806024 	.word	0x00806024
   24eb8:	00024951 	.word	0x00024951
   24ebc:	0002457d 	.word	0x0002457d
   24ec0:	000247b9 	.word	0x000247b9
   24ec4:	00024f8d 	.word	0x00024f8d
   24ec8:	000244f1 	.word	0x000244f1
   24ecc:	00024fbd 	.word	0x00024fbd
   24ed0:	000250e1 	.word	0x000250e1
   24ed4:	0002451f 	.word	0x0002451f
   24ed8:	00025215 	.word	0x00025215
   24edc:	00025259 	.word	0x00025259
   24ee0:	000245f1 	.word	0x000245f1
   24ee4:	00024611 	.word	0x00024611

00024ee8 <system_apb_clock_set_mask>:
{
   24ee8:	b580      	push	{r7, lr}
   24eea:	b082      	sub	sp, #8
   24eec:	af00      	add	r7, sp, #0
   24eee:	0002      	movs	r2, r0
   24ef0:	6039      	str	r1, [r7, #0]
   24ef2:	1dfb      	adds	r3, r7, #7
   24ef4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24ef6:	1dfb      	adds	r3, r7, #7
   24ef8:	781b      	ldrb	r3, [r3, #0]
   24efa:	2b01      	cmp	r3, #1
   24efc:	d00a      	beq.n	24f14 <system_apb_clock_set_mask+0x2c>
   24efe:	2b02      	cmp	r3, #2
   24f00:	d00f      	beq.n	24f22 <system_apb_clock_set_mask+0x3a>
   24f02:	2b00      	cmp	r3, #0
   24f04:	d114      	bne.n	24f30 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   24f06:	4b0e      	ldr	r3, [pc, #56]	; (24f40 <system_apb_clock_set_mask+0x58>)
   24f08:	4a0d      	ldr	r2, [pc, #52]	; (24f40 <system_apb_clock_set_mask+0x58>)
   24f0a:	6991      	ldr	r1, [r2, #24]
   24f0c:	683a      	ldr	r2, [r7, #0]
   24f0e:	430a      	orrs	r2, r1
   24f10:	619a      	str	r2, [r3, #24]
			break;
   24f12:	e00f      	b.n	24f34 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   24f14:	4b0a      	ldr	r3, [pc, #40]	; (24f40 <system_apb_clock_set_mask+0x58>)
   24f16:	4a0a      	ldr	r2, [pc, #40]	; (24f40 <system_apb_clock_set_mask+0x58>)
   24f18:	69d1      	ldr	r1, [r2, #28]
   24f1a:	683a      	ldr	r2, [r7, #0]
   24f1c:	430a      	orrs	r2, r1
   24f1e:	61da      	str	r2, [r3, #28]
			break;
   24f20:	e008      	b.n	24f34 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   24f22:	4b07      	ldr	r3, [pc, #28]	; (24f40 <system_apb_clock_set_mask+0x58>)
   24f24:	4a06      	ldr	r2, [pc, #24]	; (24f40 <system_apb_clock_set_mask+0x58>)
   24f26:	6a11      	ldr	r1, [r2, #32]
   24f28:	683a      	ldr	r2, [r7, #0]
   24f2a:	430a      	orrs	r2, r1
   24f2c:	621a      	str	r2, [r3, #32]
			break;
   24f2e:	e001      	b.n	24f34 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   24f30:	2317      	movs	r3, #23
   24f32:	e000      	b.n	24f36 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   24f34:	2300      	movs	r3, #0
}
   24f36:	0018      	movs	r0, r3
   24f38:	46bd      	mov	sp, r7
   24f3a:	b002      	add	sp, #8
   24f3c:	bd80      	pop	{r7, pc}
   24f3e:	46c0      	nop			; (mov r8, r8)
   24f40:	40000400 	.word	0x40000400

00024f44 <system_interrupt_enter_critical_section>:
{
   24f44:	b580      	push	{r7, lr}
   24f46:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   24f48:	4b02      	ldr	r3, [pc, #8]	; (24f54 <system_interrupt_enter_critical_section+0x10>)
   24f4a:	4798      	blx	r3
}
   24f4c:	46c0      	nop			; (mov r8, r8)
   24f4e:	46bd      	mov	sp, r7
   24f50:	bd80      	pop	{r7, pc}
   24f52:	46c0      	nop			; (mov r8, r8)
   24f54:	0002445d 	.word	0x0002445d

00024f58 <system_interrupt_leave_critical_section>:
{
   24f58:	b580      	push	{r7, lr}
   24f5a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   24f5c:	4b02      	ldr	r3, [pc, #8]	; (24f68 <system_interrupt_leave_critical_section+0x10>)
   24f5e:	4798      	blx	r3
}
   24f60:	46c0      	nop			; (mov r8, r8)
   24f62:	46bd      	mov	sp, r7
   24f64:	bd80      	pop	{r7, pc}
   24f66:	46c0      	nop			; (mov r8, r8)
   24f68:	000244b1 	.word	0x000244b1

00024f6c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   24f6c:	b580      	push	{r7, lr}
   24f6e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   24f70:	4b05      	ldr	r3, [pc, #20]	; (24f88 <system_gclk_is_syncing+0x1c>)
   24f72:	785b      	ldrb	r3, [r3, #1]
   24f74:	b2db      	uxtb	r3, r3
   24f76:	b25b      	sxtb	r3, r3
   24f78:	2b00      	cmp	r3, #0
   24f7a:	da01      	bge.n	24f80 <system_gclk_is_syncing+0x14>
		return true;
   24f7c:	2301      	movs	r3, #1
   24f7e:	e000      	b.n	24f82 <system_gclk_is_syncing+0x16>
	}

	return false;
   24f80:	2300      	movs	r3, #0
}
   24f82:	0018      	movs	r0, r3
   24f84:	46bd      	mov	sp, r7
   24f86:	bd80      	pop	{r7, pc}
   24f88:	40000c00 	.word	0x40000c00

00024f8c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   24f8c:	b580      	push	{r7, lr}
   24f8e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   24f90:	2108      	movs	r1, #8
   24f92:	2000      	movs	r0, #0
   24f94:	4b07      	ldr	r3, [pc, #28]	; (24fb4 <system_gclk_init+0x28>)
   24f96:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   24f98:	4b07      	ldr	r3, [pc, #28]	; (24fb8 <system_gclk_init+0x2c>)
   24f9a:	2201      	movs	r2, #1
   24f9c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   24f9e:	46c0      	nop			; (mov r8, r8)
   24fa0:	4b05      	ldr	r3, [pc, #20]	; (24fb8 <system_gclk_init+0x2c>)
   24fa2:	781b      	ldrb	r3, [r3, #0]
   24fa4:	b2db      	uxtb	r3, r3
   24fa6:	001a      	movs	r2, r3
   24fa8:	2301      	movs	r3, #1
   24faa:	4013      	ands	r3, r2
   24fac:	d1f8      	bne.n	24fa0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   24fae:	46c0      	nop			; (mov r8, r8)
   24fb0:	46bd      	mov	sp, r7
   24fb2:	bd80      	pop	{r7, pc}
   24fb4:	00024ee9 	.word	0x00024ee9
   24fb8:	40000c00 	.word	0x40000c00

00024fbc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   24fbc:	b580      	push	{r7, lr}
   24fbe:	b086      	sub	sp, #24
   24fc0:	af00      	add	r7, sp, #0
   24fc2:	0002      	movs	r2, r0
   24fc4:	6039      	str	r1, [r7, #0]
   24fc6:	1dfb      	adds	r3, r7, #7
   24fc8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   24fca:	1dfb      	adds	r3, r7, #7
   24fcc:	781b      	ldrb	r3, [r3, #0]
   24fce:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   24fd0:	1dfb      	adds	r3, r7, #7
   24fd2:	781b      	ldrb	r3, [r3, #0]
   24fd4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   24fd6:	683b      	ldr	r3, [r7, #0]
   24fd8:	781b      	ldrb	r3, [r3, #0]
   24fda:	021b      	lsls	r3, r3, #8
   24fdc:	001a      	movs	r2, r3
   24fde:	697b      	ldr	r3, [r7, #20]
   24fe0:	4313      	orrs	r3, r2
   24fe2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   24fe4:	683b      	ldr	r3, [r7, #0]
   24fe6:	785b      	ldrb	r3, [r3, #1]
   24fe8:	2b00      	cmp	r3, #0
   24fea:	d004      	beq.n	24ff6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   24fec:	697b      	ldr	r3, [r7, #20]
   24fee:	2280      	movs	r2, #128	; 0x80
   24ff0:	02d2      	lsls	r2, r2, #11
   24ff2:	4313      	orrs	r3, r2
   24ff4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   24ff6:	683b      	ldr	r3, [r7, #0]
   24ff8:	7a5b      	ldrb	r3, [r3, #9]
   24ffa:	2b00      	cmp	r3, #0
   24ffc:	d004      	beq.n	25008 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   24ffe:	697b      	ldr	r3, [r7, #20]
   25000:	2280      	movs	r2, #128	; 0x80
   25002:	0312      	lsls	r2, r2, #12
   25004:	4313      	orrs	r3, r2
   25006:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   25008:	683b      	ldr	r3, [r7, #0]
   2500a:	685b      	ldr	r3, [r3, #4]
   2500c:	2b01      	cmp	r3, #1
   2500e:	d92c      	bls.n	2506a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   25010:	683b      	ldr	r3, [r7, #0]
   25012:	685a      	ldr	r2, [r3, #4]
   25014:	683b      	ldr	r3, [r7, #0]
   25016:	685b      	ldr	r3, [r3, #4]
   25018:	3b01      	subs	r3, #1
   2501a:	4013      	ands	r3, r2
   2501c:	d11a      	bne.n	25054 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2501e:	2300      	movs	r3, #0
   25020:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   25022:	2302      	movs	r3, #2
   25024:	60bb      	str	r3, [r7, #8]
   25026:	e005      	b.n	25034 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   25028:	68fb      	ldr	r3, [r7, #12]
   2502a:	3301      	adds	r3, #1
   2502c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2502e:	68bb      	ldr	r3, [r7, #8]
   25030:	005b      	lsls	r3, r3, #1
   25032:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   25034:	683b      	ldr	r3, [r7, #0]
   25036:	685a      	ldr	r2, [r3, #4]
   25038:	68bb      	ldr	r3, [r7, #8]
   2503a:	429a      	cmp	r2, r3
   2503c:	d8f4      	bhi.n	25028 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2503e:	68fb      	ldr	r3, [r7, #12]
   25040:	021b      	lsls	r3, r3, #8
   25042:	693a      	ldr	r2, [r7, #16]
   25044:	4313      	orrs	r3, r2
   25046:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   25048:	697b      	ldr	r3, [r7, #20]
   2504a:	2280      	movs	r2, #128	; 0x80
   2504c:	0352      	lsls	r2, r2, #13
   2504e:	4313      	orrs	r3, r2
   25050:	617b      	str	r3, [r7, #20]
   25052:	e00a      	b.n	2506a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   25054:	683b      	ldr	r3, [r7, #0]
   25056:	685b      	ldr	r3, [r3, #4]
   25058:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2505a:	693a      	ldr	r2, [r7, #16]
   2505c:	4313      	orrs	r3, r2
   2505e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   25060:	697b      	ldr	r3, [r7, #20]
   25062:	2280      	movs	r2, #128	; 0x80
   25064:	0292      	lsls	r2, r2, #10
   25066:	4313      	orrs	r3, r2
   25068:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2506a:	683b      	ldr	r3, [r7, #0]
   2506c:	7a1b      	ldrb	r3, [r3, #8]
   2506e:	2b00      	cmp	r3, #0
   25070:	d004      	beq.n	2507c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   25072:	697b      	ldr	r3, [r7, #20]
   25074:	2280      	movs	r2, #128	; 0x80
   25076:	0392      	lsls	r2, r2, #14
   25078:	4313      	orrs	r3, r2
   2507a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2507c:	46c0      	nop			; (mov r8, r8)
   2507e:	4b13      	ldr	r3, [pc, #76]	; (250cc <system_gclk_gen_set_config+0x110>)
   25080:	4798      	blx	r3
   25082:	1e03      	subs	r3, r0, #0
   25084:	d1fb      	bne.n	2507e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   25086:	4b12      	ldr	r3, [pc, #72]	; (250d0 <system_gclk_gen_set_config+0x114>)
   25088:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2508a:	4a12      	ldr	r2, [pc, #72]	; (250d4 <system_gclk_gen_set_config+0x118>)
   2508c:	1dfb      	adds	r3, r7, #7
   2508e:	781b      	ldrb	r3, [r3, #0]
   25090:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   25092:	46c0      	nop			; (mov r8, r8)
   25094:	4b0d      	ldr	r3, [pc, #52]	; (250cc <system_gclk_gen_set_config+0x110>)
   25096:	4798      	blx	r3
   25098:	1e03      	subs	r3, r0, #0
   2509a:	d1fb      	bne.n	25094 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2509c:	4b0e      	ldr	r3, [pc, #56]	; (250d8 <system_gclk_gen_set_config+0x11c>)
   2509e:	693a      	ldr	r2, [r7, #16]
   250a0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   250a2:	46c0      	nop			; (mov r8, r8)
   250a4:	4b09      	ldr	r3, [pc, #36]	; (250cc <system_gclk_gen_set_config+0x110>)
   250a6:	4798      	blx	r3
   250a8:	1e03      	subs	r3, r0, #0
   250aa:	d1fb      	bne.n	250a4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   250ac:	4b0a      	ldr	r3, [pc, #40]	; (250d8 <system_gclk_gen_set_config+0x11c>)
   250ae:	4a0a      	ldr	r2, [pc, #40]	; (250d8 <system_gclk_gen_set_config+0x11c>)
   250b0:	6851      	ldr	r1, [r2, #4]
   250b2:	2280      	movs	r2, #128	; 0x80
   250b4:	0252      	lsls	r2, r2, #9
   250b6:	4011      	ands	r1, r2
   250b8:	697a      	ldr	r2, [r7, #20]
   250ba:	430a      	orrs	r2, r1
   250bc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   250be:	4b07      	ldr	r3, [pc, #28]	; (250dc <system_gclk_gen_set_config+0x120>)
   250c0:	4798      	blx	r3
}
   250c2:	46c0      	nop			; (mov r8, r8)
   250c4:	46bd      	mov	sp, r7
   250c6:	b006      	add	sp, #24
   250c8:	bd80      	pop	{r7, pc}
   250ca:	46c0      	nop			; (mov r8, r8)
   250cc:	00024f6d 	.word	0x00024f6d
   250d0:	00024f45 	.word	0x00024f45
   250d4:	40000c08 	.word	0x40000c08
   250d8:	40000c00 	.word	0x40000c00
   250dc:	00024f59 	.word	0x00024f59

000250e0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   250e0:	b580      	push	{r7, lr}
   250e2:	b082      	sub	sp, #8
   250e4:	af00      	add	r7, sp, #0
   250e6:	0002      	movs	r2, r0
   250e8:	1dfb      	adds	r3, r7, #7
   250ea:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   250ec:	46c0      	nop			; (mov r8, r8)
   250ee:	4b0e      	ldr	r3, [pc, #56]	; (25128 <system_gclk_gen_enable+0x48>)
   250f0:	4798      	blx	r3
   250f2:	1e03      	subs	r3, r0, #0
   250f4:	d1fb      	bne.n	250ee <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   250f6:	4b0d      	ldr	r3, [pc, #52]	; (2512c <system_gclk_gen_enable+0x4c>)
   250f8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   250fa:	4a0d      	ldr	r2, [pc, #52]	; (25130 <system_gclk_gen_enable+0x50>)
   250fc:	1dfb      	adds	r3, r7, #7
   250fe:	781b      	ldrb	r3, [r3, #0]
   25100:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   25102:	46c0      	nop			; (mov r8, r8)
   25104:	4b08      	ldr	r3, [pc, #32]	; (25128 <system_gclk_gen_enable+0x48>)
   25106:	4798      	blx	r3
   25108:	1e03      	subs	r3, r0, #0
   2510a:	d1fb      	bne.n	25104 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2510c:	4b09      	ldr	r3, [pc, #36]	; (25134 <system_gclk_gen_enable+0x54>)
   2510e:	4a09      	ldr	r2, [pc, #36]	; (25134 <system_gclk_gen_enable+0x54>)
   25110:	6852      	ldr	r2, [r2, #4]
   25112:	2180      	movs	r1, #128	; 0x80
   25114:	0249      	lsls	r1, r1, #9
   25116:	430a      	orrs	r2, r1
   25118:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2511a:	4b07      	ldr	r3, [pc, #28]	; (25138 <system_gclk_gen_enable+0x58>)
   2511c:	4798      	blx	r3
}
   2511e:	46c0      	nop			; (mov r8, r8)
   25120:	46bd      	mov	sp, r7
   25122:	b002      	add	sp, #8
   25124:	bd80      	pop	{r7, pc}
   25126:	46c0      	nop			; (mov r8, r8)
   25128:	00024f6d 	.word	0x00024f6d
   2512c:	00024f45 	.word	0x00024f45
   25130:	40000c04 	.word	0x40000c04
   25134:	40000c00 	.word	0x40000c00
   25138:	00024f59 	.word	0x00024f59

0002513c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2513c:	b580      	push	{r7, lr}
   2513e:	b086      	sub	sp, #24
   25140:	af00      	add	r7, sp, #0
   25142:	0002      	movs	r2, r0
   25144:	1dfb      	adds	r3, r7, #7
   25146:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   25148:	46c0      	nop			; (mov r8, r8)
   2514a:	4b2a      	ldr	r3, [pc, #168]	; (251f4 <system_gclk_gen_get_hz+0xb8>)
   2514c:	4798      	blx	r3
   2514e:	1e03      	subs	r3, r0, #0
   25150:	d1fb      	bne.n	2514a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   25152:	4b29      	ldr	r3, [pc, #164]	; (251f8 <system_gclk_gen_get_hz+0xbc>)
   25154:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   25156:	4a29      	ldr	r2, [pc, #164]	; (251fc <system_gclk_gen_get_hz+0xc0>)
   25158:	1dfb      	adds	r3, r7, #7
   2515a:	781b      	ldrb	r3, [r3, #0]
   2515c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2515e:	46c0      	nop			; (mov r8, r8)
   25160:	4b24      	ldr	r3, [pc, #144]	; (251f4 <system_gclk_gen_get_hz+0xb8>)
   25162:	4798      	blx	r3
   25164:	1e03      	subs	r3, r0, #0
   25166:	d1fb      	bne.n	25160 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   25168:	4b25      	ldr	r3, [pc, #148]	; (25200 <system_gclk_gen_get_hz+0xc4>)
   2516a:	685b      	ldr	r3, [r3, #4]
   2516c:	04db      	lsls	r3, r3, #19
   2516e:	0edb      	lsrs	r3, r3, #27
   25170:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   25172:	0018      	movs	r0, r3
   25174:	4b23      	ldr	r3, [pc, #140]	; (25204 <system_gclk_gen_get_hz+0xc8>)
   25176:	4798      	blx	r3
   25178:	0003      	movs	r3, r0
   2517a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2517c:	4a1f      	ldr	r2, [pc, #124]	; (251fc <system_gclk_gen_get_hz+0xc0>)
   2517e:	1dfb      	adds	r3, r7, #7
   25180:	781b      	ldrb	r3, [r3, #0]
   25182:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   25184:	4b1e      	ldr	r3, [pc, #120]	; (25200 <system_gclk_gen_get_hz+0xc4>)
   25186:	685b      	ldr	r3, [r3, #4]
   25188:	02db      	lsls	r3, r3, #11
   2518a:	0fdb      	lsrs	r3, r3, #31
   2518c:	b2da      	uxtb	r2, r3
   2518e:	2313      	movs	r3, #19
   25190:	18fb      	adds	r3, r7, r3
   25192:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   25194:	4a1c      	ldr	r2, [pc, #112]	; (25208 <system_gclk_gen_get_hz+0xcc>)
   25196:	1dfb      	adds	r3, r7, #7
   25198:	781b      	ldrb	r3, [r3, #0]
   2519a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2519c:	46c0      	nop			; (mov r8, r8)
   2519e:	4b15      	ldr	r3, [pc, #84]	; (251f4 <system_gclk_gen_get_hz+0xb8>)
   251a0:	4798      	blx	r3
   251a2:	1e03      	subs	r3, r0, #0
   251a4:	d1fb      	bne.n	2519e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   251a6:	4b16      	ldr	r3, [pc, #88]	; (25200 <system_gclk_gen_get_hz+0xc4>)
   251a8:	689b      	ldr	r3, [r3, #8]
   251aa:	021b      	lsls	r3, r3, #8
   251ac:	0c1b      	lsrs	r3, r3, #16
   251ae:	b29b      	uxth	r3, r3
   251b0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   251b2:	4b16      	ldr	r3, [pc, #88]	; (2520c <system_gclk_gen_get_hz+0xd0>)
   251b4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   251b6:	2313      	movs	r3, #19
   251b8:	18fb      	adds	r3, r7, r3
   251ba:	781b      	ldrb	r3, [r3, #0]
   251bc:	2b00      	cmp	r3, #0
   251be:	d109      	bne.n	251d4 <system_gclk_gen_get_hz+0x98>
   251c0:	68fb      	ldr	r3, [r7, #12]
   251c2:	2b01      	cmp	r3, #1
   251c4:	d906      	bls.n	251d4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   251c6:	4b12      	ldr	r3, [pc, #72]	; (25210 <system_gclk_gen_get_hz+0xd4>)
   251c8:	68f9      	ldr	r1, [r7, #12]
   251ca:	6978      	ldr	r0, [r7, #20]
   251cc:	4798      	blx	r3
   251ce:	0003      	movs	r3, r0
   251d0:	617b      	str	r3, [r7, #20]
   251d2:	e00a      	b.n	251ea <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   251d4:	2313      	movs	r3, #19
   251d6:	18fb      	adds	r3, r7, r3
   251d8:	781b      	ldrb	r3, [r3, #0]
   251da:	2b00      	cmp	r3, #0
   251dc:	d005      	beq.n	251ea <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   251de:	68fb      	ldr	r3, [r7, #12]
   251e0:	3301      	adds	r3, #1
   251e2:	697a      	ldr	r2, [r7, #20]
   251e4:	40da      	lsrs	r2, r3
   251e6:	0013      	movs	r3, r2
   251e8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   251ea:	697b      	ldr	r3, [r7, #20]
}
   251ec:	0018      	movs	r0, r3
   251ee:	46bd      	mov	sp, r7
   251f0:	b006      	add	sp, #24
   251f2:	bd80      	pop	{r7, pc}
   251f4:	00024f6d 	.word	0x00024f6d
   251f8:	00024f45 	.word	0x00024f45
   251fc:	40000c04 	.word	0x40000c04
   25200:	40000c00 	.word	0x40000c00
   25204:	000246f9 	.word	0x000246f9
   25208:	40000c08 	.word	0x40000c08
   2520c:	00024f59 	.word	0x00024f59
   25210:	00026de1 	.word	0x00026de1

00025214 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   25214:	b580      	push	{r7, lr}
   25216:	b084      	sub	sp, #16
   25218:	af00      	add	r7, sp, #0
   2521a:	0002      	movs	r2, r0
   2521c:	6039      	str	r1, [r7, #0]
   2521e:	1dfb      	adds	r3, r7, #7
   25220:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   25222:	1dfb      	adds	r3, r7, #7
   25224:	781b      	ldrb	r3, [r3, #0]
   25226:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   25228:	683b      	ldr	r3, [r7, #0]
   2522a:	781b      	ldrb	r3, [r3, #0]
   2522c:	021b      	lsls	r3, r3, #8
   2522e:	001a      	movs	r2, r3
   25230:	68fb      	ldr	r3, [r7, #12]
   25232:	4313      	orrs	r3, r2
   25234:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   25236:	1dfb      	adds	r3, r7, #7
   25238:	781b      	ldrb	r3, [r3, #0]
   2523a:	0018      	movs	r0, r3
   2523c:	4b04      	ldr	r3, [pc, #16]	; (25250 <system_gclk_chan_set_config+0x3c>)
   2523e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   25240:	4b04      	ldr	r3, [pc, #16]	; (25254 <system_gclk_chan_set_config+0x40>)
   25242:	68fa      	ldr	r2, [r7, #12]
   25244:	b292      	uxth	r2, r2
   25246:	805a      	strh	r2, [r3, #2]
}
   25248:	46c0      	nop			; (mov r8, r8)
   2524a:	46bd      	mov	sp, r7
   2524c:	b004      	add	sp, #16
   2524e:	bd80      	pop	{r7, pc}
   25250:	000252a1 	.word	0x000252a1
   25254:	40000c00 	.word	0x40000c00

00025258 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   25258:	b580      	push	{r7, lr}
   2525a:	b082      	sub	sp, #8
   2525c:	af00      	add	r7, sp, #0
   2525e:	0002      	movs	r2, r0
   25260:	1dfb      	adds	r3, r7, #7
   25262:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   25264:	4b0a      	ldr	r3, [pc, #40]	; (25290 <system_gclk_chan_enable+0x38>)
   25266:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   25268:	4a0a      	ldr	r2, [pc, #40]	; (25294 <system_gclk_chan_enable+0x3c>)
   2526a:	1dfb      	adds	r3, r7, #7
   2526c:	781b      	ldrb	r3, [r3, #0]
   2526e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   25270:	4909      	ldr	r1, [pc, #36]	; (25298 <system_gclk_chan_enable+0x40>)
   25272:	4b09      	ldr	r3, [pc, #36]	; (25298 <system_gclk_chan_enable+0x40>)
   25274:	885b      	ldrh	r3, [r3, #2]
   25276:	b29b      	uxth	r3, r3
   25278:	2280      	movs	r2, #128	; 0x80
   2527a:	01d2      	lsls	r2, r2, #7
   2527c:	4313      	orrs	r3, r2
   2527e:	b29b      	uxth	r3, r3
   25280:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   25282:	4b06      	ldr	r3, [pc, #24]	; (2529c <system_gclk_chan_enable+0x44>)
   25284:	4798      	blx	r3
}
   25286:	46c0      	nop			; (mov r8, r8)
   25288:	46bd      	mov	sp, r7
   2528a:	b002      	add	sp, #8
   2528c:	bd80      	pop	{r7, pc}
   2528e:	46c0      	nop			; (mov r8, r8)
   25290:	00024f45 	.word	0x00024f45
   25294:	40000c02 	.word	0x40000c02
   25298:	40000c00 	.word	0x40000c00
   2529c:	00024f59 	.word	0x00024f59

000252a0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   252a0:	b580      	push	{r7, lr}
   252a2:	b084      	sub	sp, #16
   252a4:	af00      	add	r7, sp, #0
   252a6:	0002      	movs	r2, r0
   252a8:	1dfb      	adds	r3, r7, #7
   252aa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   252ac:	4b1c      	ldr	r3, [pc, #112]	; (25320 <system_gclk_chan_disable+0x80>)
   252ae:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   252b0:	4a1c      	ldr	r2, [pc, #112]	; (25324 <system_gclk_chan_disable+0x84>)
   252b2:	1dfb      	adds	r3, r7, #7
   252b4:	781b      	ldrb	r3, [r3, #0]
   252b6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   252b8:	4b1b      	ldr	r3, [pc, #108]	; (25328 <system_gclk_chan_disable+0x88>)
   252ba:	885b      	ldrh	r3, [r3, #2]
   252bc:	051b      	lsls	r3, r3, #20
   252be:	0f1b      	lsrs	r3, r3, #28
   252c0:	b2db      	uxtb	r3, r3
   252c2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   252c4:	4a18      	ldr	r2, [pc, #96]	; (25328 <system_gclk_chan_disable+0x88>)
   252c6:	8853      	ldrh	r3, [r2, #2]
   252c8:	4918      	ldr	r1, [pc, #96]	; (2532c <system_gclk_chan_disable+0x8c>)
   252ca:	400b      	ands	r3, r1
   252cc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   252ce:	4a16      	ldr	r2, [pc, #88]	; (25328 <system_gclk_chan_disable+0x88>)
   252d0:	4b15      	ldr	r3, [pc, #84]	; (25328 <system_gclk_chan_disable+0x88>)
   252d2:	885b      	ldrh	r3, [r3, #2]
   252d4:	b29b      	uxth	r3, r3
   252d6:	4916      	ldr	r1, [pc, #88]	; (25330 <system_gclk_chan_disable+0x90>)
   252d8:	400b      	ands	r3, r1
   252da:	b29b      	uxth	r3, r3
   252dc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   252de:	46c0      	nop			; (mov r8, r8)
   252e0:	4b11      	ldr	r3, [pc, #68]	; (25328 <system_gclk_chan_disable+0x88>)
   252e2:	885b      	ldrh	r3, [r3, #2]
   252e4:	b29b      	uxth	r3, r3
   252e6:	001a      	movs	r2, r3
   252e8:	2380      	movs	r3, #128	; 0x80
   252ea:	01db      	lsls	r3, r3, #7
   252ec:	4013      	ands	r3, r2
   252ee:	d1f7      	bne.n	252e0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   252f0:	4a0d      	ldr	r2, [pc, #52]	; (25328 <system_gclk_chan_disable+0x88>)
   252f2:	68fb      	ldr	r3, [r7, #12]
   252f4:	b2db      	uxtb	r3, r3
   252f6:	1c19      	adds	r1, r3, #0
   252f8:	230f      	movs	r3, #15
   252fa:	400b      	ands	r3, r1
   252fc:	b2d9      	uxtb	r1, r3
   252fe:	8853      	ldrh	r3, [r2, #2]
   25300:	1c08      	adds	r0, r1, #0
   25302:	210f      	movs	r1, #15
   25304:	4001      	ands	r1, r0
   25306:	0208      	lsls	r0, r1, #8
   25308:	4908      	ldr	r1, [pc, #32]	; (2532c <system_gclk_chan_disable+0x8c>)
   2530a:	400b      	ands	r3, r1
   2530c:	1c19      	adds	r1, r3, #0
   2530e:	1c03      	adds	r3, r0, #0
   25310:	430b      	orrs	r3, r1
   25312:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   25314:	4b07      	ldr	r3, [pc, #28]	; (25334 <system_gclk_chan_disable+0x94>)
   25316:	4798      	blx	r3
}
   25318:	46c0      	nop			; (mov r8, r8)
   2531a:	46bd      	mov	sp, r7
   2531c:	b004      	add	sp, #16
   2531e:	bd80      	pop	{r7, pc}
   25320:	00024f45 	.word	0x00024f45
   25324:	40000c02 	.word	0x40000c02
   25328:	40000c00 	.word	0x40000c00
   2532c:	fffff0ff 	.word	0xfffff0ff
   25330:	ffffbfff 	.word	0xffffbfff
   25334:	00024f59 	.word	0x00024f59

00025338 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   25338:	b580      	push	{r7, lr}
   2533a:	b084      	sub	sp, #16
   2533c:	af00      	add	r7, sp, #0
   2533e:	0002      	movs	r2, r0
   25340:	1dfb      	adds	r3, r7, #7
   25342:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   25344:	4b0d      	ldr	r3, [pc, #52]	; (2537c <system_gclk_chan_get_hz+0x44>)
   25346:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   25348:	4a0d      	ldr	r2, [pc, #52]	; (25380 <system_gclk_chan_get_hz+0x48>)
   2534a:	1dfb      	adds	r3, r7, #7
   2534c:	781b      	ldrb	r3, [r3, #0]
   2534e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   25350:	4b0c      	ldr	r3, [pc, #48]	; (25384 <system_gclk_chan_get_hz+0x4c>)
   25352:	885b      	ldrh	r3, [r3, #2]
   25354:	051b      	lsls	r3, r3, #20
   25356:	0f1b      	lsrs	r3, r3, #28
   25358:	b2da      	uxtb	r2, r3
   2535a:	230f      	movs	r3, #15
   2535c:	18fb      	adds	r3, r7, r3
   2535e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   25360:	4b09      	ldr	r3, [pc, #36]	; (25388 <system_gclk_chan_get_hz+0x50>)
   25362:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   25364:	230f      	movs	r3, #15
   25366:	18fb      	adds	r3, r7, r3
   25368:	781b      	ldrb	r3, [r3, #0]
   2536a:	0018      	movs	r0, r3
   2536c:	4b07      	ldr	r3, [pc, #28]	; (2538c <system_gclk_chan_get_hz+0x54>)
   2536e:	4798      	blx	r3
   25370:	0003      	movs	r3, r0
}
   25372:	0018      	movs	r0, r3
   25374:	46bd      	mov	sp, r7
   25376:	b004      	add	sp, #16
   25378:	bd80      	pop	{r7, pc}
   2537a:	46c0      	nop			; (mov r8, r8)
   2537c:	00024f45 	.word	0x00024f45
   25380:	40000c02 	.word	0x40000c02
   25384:	40000c00 	.word	0x40000c00
   25388:	00024f59 	.word	0x00024f59
   2538c:	0002513d 	.word	0x0002513d

00025390 <system_pinmux_get_group_from_gpio_pin>:
{
   25390:	b580      	push	{r7, lr}
   25392:	b084      	sub	sp, #16
   25394:	af00      	add	r7, sp, #0
   25396:	0002      	movs	r2, r0
   25398:	1dfb      	adds	r3, r7, #7
   2539a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2539c:	230f      	movs	r3, #15
   2539e:	18fb      	adds	r3, r7, r3
   253a0:	1dfa      	adds	r2, r7, #7
   253a2:	7812      	ldrb	r2, [r2, #0]
   253a4:	09d2      	lsrs	r2, r2, #7
   253a6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   253a8:	230e      	movs	r3, #14
   253aa:	18fb      	adds	r3, r7, r3
   253ac:	1dfa      	adds	r2, r7, #7
   253ae:	7812      	ldrb	r2, [r2, #0]
   253b0:	0952      	lsrs	r2, r2, #5
   253b2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   253b4:	4b0d      	ldr	r3, [pc, #52]	; (253ec <system_pinmux_get_group_from_gpio_pin+0x5c>)
   253b6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   253b8:	230f      	movs	r3, #15
   253ba:	18fb      	adds	r3, r7, r3
   253bc:	781b      	ldrb	r3, [r3, #0]
   253be:	2b00      	cmp	r3, #0
   253c0:	d10f      	bne.n	253e2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   253c2:	230f      	movs	r3, #15
   253c4:	18fb      	adds	r3, r7, r3
   253c6:	781b      	ldrb	r3, [r3, #0]
   253c8:	009b      	lsls	r3, r3, #2
   253ca:	2210      	movs	r2, #16
   253cc:	4694      	mov	ip, r2
   253ce:	44bc      	add	ip, r7
   253d0:	4463      	add	r3, ip
   253d2:	3b08      	subs	r3, #8
   253d4:	681a      	ldr	r2, [r3, #0]
   253d6:	230e      	movs	r3, #14
   253d8:	18fb      	adds	r3, r7, r3
   253da:	781b      	ldrb	r3, [r3, #0]
   253dc:	01db      	lsls	r3, r3, #7
   253de:	18d3      	adds	r3, r2, r3
   253e0:	e000      	b.n	253e4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   253e2:	2300      	movs	r3, #0
}
   253e4:	0018      	movs	r0, r3
   253e6:	46bd      	mov	sp, r7
   253e8:	b004      	add	sp, #16
   253ea:	bd80      	pop	{r7, pc}
   253ec:	41004400 	.word	0x41004400

000253f0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   253f0:	b580      	push	{r7, lr}
   253f2:	b088      	sub	sp, #32
   253f4:	af00      	add	r7, sp, #0
   253f6:	60f8      	str	r0, [r7, #12]
   253f8:	60b9      	str	r1, [r7, #8]
   253fa:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   253fc:	2300      	movs	r3, #0
   253fe:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   25400:	687b      	ldr	r3, [r7, #4]
   25402:	78db      	ldrb	r3, [r3, #3]
   25404:	2201      	movs	r2, #1
   25406:	4053      	eors	r3, r2
   25408:	b2db      	uxtb	r3, r3
   2540a:	2b00      	cmp	r3, #0
   2540c:	d035      	beq.n	2547a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2540e:	687b      	ldr	r3, [r7, #4]
   25410:	781b      	ldrb	r3, [r3, #0]
   25412:	2b80      	cmp	r3, #128	; 0x80
   25414:	d00b      	beq.n	2542e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   25416:	69fb      	ldr	r3, [r7, #28]
   25418:	2280      	movs	r2, #128	; 0x80
   2541a:	0252      	lsls	r2, r2, #9
   2541c:	4313      	orrs	r3, r2
   2541e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   25420:	687b      	ldr	r3, [r7, #4]
   25422:	781b      	ldrb	r3, [r3, #0]
   25424:	061b      	lsls	r3, r3, #24
   25426:	001a      	movs	r2, r3
   25428:	69fb      	ldr	r3, [r7, #28]
   2542a:	4313      	orrs	r3, r2
   2542c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2542e:	687b      	ldr	r3, [r7, #4]
   25430:	785b      	ldrb	r3, [r3, #1]
   25432:	2b00      	cmp	r3, #0
   25434:	d003      	beq.n	2543e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   25436:	687b      	ldr	r3, [r7, #4]
   25438:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2543a:	2b02      	cmp	r3, #2
   2543c:	d110      	bne.n	25460 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2543e:	69fb      	ldr	r3, [r7, #28]
   25440:	2280      	movs	r2, #128	; 0x80
   25442:	0292      	lsls	r2, r2, #10
   25444:	4313      	orrs	r3, r2
   25446:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   25448:	687b      	ldr	r3, [r7, #4]
   2544a:	789b      	ldrb	r3, [r3, #2]
   2544c:	2b00      	cmp	r3, #0
   2544e:	d004      	beq.n	2545a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   25450:	69fb      	ldr	r3, [r7, #28]
   25452:	2280      	movs	r2, #128	; 0x80
   25454:	02d2      	lsls	r2, r2, #11
   25456:	4313      	orrs	r3, r2
   25458:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2545a:	68fb      	ldr	r3, [r7, #12]
   2545c:	68ba      	ldr	r2, [r7, #8]
   2545e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   25460:	687b      	ldr	r3, [r7, #4]
   25462:	785b      	ldrb	r3, [r3, #1]
   25464:	2b01      	cmp	r3, #1
   25466:	d003      	beq.n	25470 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   25468:	687b      	ldr	r3, [r7, #4]
   2546a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2546c:	2b02      	cmp	r3, #2
   2546e:	d107      	bne.n	25480 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   25470:	69fb      	ldr	r3, [r7, #28]
   25472:	4a22      	ldr	r2, [pc, #136]	; (254fc <_system_pinmux_config+0x10c>)
   25474:	4013      	ands	r3, r2
   25476:	61fb      	str	r3, [r7, #28]
   25478:	e002      	b.n	25480 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2547a:	68fb      	ldr	r3, [r7, #12]
   2547c:	68ba      	ldr	r2, [r7, #8]
   2547e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   25480:	68bb      	ldr	r3, [r7, #8]
   25482:	041b      	lsls	r3, r3, #16
   25484:	0c1b      	lsrs	r3, r3, #16
   25486:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   25488:	68bb      	ldr	r3, [r7, #8]
   2548a:	0c1b      	lsrs	r3, r3, #16
   2548c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2548e:	69ba      	ldr	r2, [r7, #24]
   25490:	69fb      	ldr	r3, [r7, #28]
   25492:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   25494:	22a0      	movs	r2, #160	; 0xa0
   25496:	05d2      	lsls	r2, r2, #23
   25498:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2549a:	68fb      	ldr	r3, [r7, #12]
   2549c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2549e:	697a      	ldr	r2, [r7, #20]
   254a0:	69fb      	ldr	r3, [r7, #28]
   254a2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   254a4:	22d0      	movs	r2, #208	; 0xd0
   254a6:	0612      	lsls	r2, r2, #24
   254a8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   254aa:	68fb      	ldr	r3, [r7, #12]
   254ac:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   254ae:	687b      	ldr	r3, [r7, #4]
   254b0:	78db      	ldrb	r3, [r3, #3]
   254b2:	2201      	movs	r2, #1
   254b4:	4053      	eors	r3, r2
   254b6:	b2db      	uxtb	r3, r3
   254b8:	2b00      	cmp	r3, #0
   254ba:	d01a      	beq.n	254f2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   254bc:	69fa      	ldr	r2, [r7, #28]
   254be:	2380      	movs	r3, #128	; 0x80
   254c0:	02db      	lsls	r3, r3, #11
   254c2:	4013      	ands	r3, r2
   254c4:	d00a      	beq.n	254dc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   254c6:	687b      	ldr	r3, [r7, #4]
   254c8:	789b      	ldrb	r3, [r3, #2]
   254ca:	2b01      	cmp	r3, #1
   254cc:	d103      	bne.n	254d6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   254ce:	68fb      	ldr	r3, [r7, #12]
   254d0:	68ba      	ldr	r2, [r7, #8]
   254d2:	619a      	str	r2, [r3, #24]
   254d4:	e002      	b.n	254dc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   254d6:	68fb      	ldr	r3, [r7, #12]
   254d8:	68ba      	ldr	r2, [r7, #8]
   254da:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   254dc:	687b      	ldr	r3, [r7, #4]
   254de:	785b      	ldrb	r3, [r3, #1]
   254e0:	2b01      	cmp	r3, #1
   254e2:	d003      	beq.n	254ec <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   254e4:	687b      	ldr	r3, [r7, #4]
   254e6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   254e8:	2b02      	cmp	r3, #2
   254ea:	d102      	bne.n	254f2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   254ec:	68fb      	ldr	r3, [r7, #12]
   254ee:	68ba      	ldr	r2, [r7, #8]
   254f0:	609a      	str	r2, [r3, #8]
		}
	}
}
   254f2:	46c0      	nop			; (mov r8, r8)
   254f4:	46bd      	mov	sp, r7
   254f6:	b008      	add	sp, #32
   254f8:	bd80      	pop	{r7, pc}
   254fa:	46c0      	nop			; (mov r8, r8)
   254fc:	fffbffff 	.word	0xfffbffff

00025500 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   25500:	b580      	push	{r7, lr}
   25502:	b084      	sub	sp, #16
   25504:	af00      	add	r7, sp, #0
   25506:	0002      	movs	r2, r0
   25508:	6039      	str	r1, [r7, #0]
   2550a:	1dfb      	adds	r3, r7, #7
   2550c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2550e:	1dfb      	adds	r3, r7, #7
   25510:	781b      	ldrb	r3, [r3, #0]
   25512:	0018      	movs	r0, r3
   25514:	4b0a      	ldr	r3, [pc, #40]	; (25540 <system_pinmux_pin_set_config+0x40>)
   25516:	4798      	blx	r3
   25518:	0003      	movs	r3, r0
   2551a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2551c:	1dfb      	adds	r3, r7, #7
   2551e:	781b      	ldrb	r3, [r3, #0]
   25520:	221f      	movs	r2, #31
   25522:	4013      	ands	r3, r2
   25524:	2201      	movs	r2, #1
   25526:	409a      	lsls	r2, r3
   25528:	0013      	movs	r3, r2
   2552a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2552c:	683a      	ldr	r2, [r7, #0]
   2552e:	68b9      	ldr	r1, [r7, #8]
   25530:	68fb      	ldr	r3, [r7, #12]
   25532:	0018      	movs	r0, r3
   25534:	4b03      	ldr	r3, [pc, #12]	; (25544 <system_pinmux_pin_set_config+0x44>)
   25536:	4798      	blx	r3
}
   25538:	46c0      	nop			; (mov r8, r8)
   2553a:	46bd      	mov	sp, r7
   2553c:	b004      	add	sp, #16
   2553e:	bd80      	pop	{r7, pc}
   25540:	00025391 	.word	0x00025391
   25544:	000253f1 	.word	0x000253f1

00025548 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   25548:	b580      	push	{r7, lr}
   2554a:	af00      	add	r7, sp, #0
	return;
   2554c:	46c0      	nop			; (mov r8, r8)
}
   2554e:	46bd      	mov	sp, r7
   25550:	bd80      	pop	{r7, pc}
	...

00025554 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   25554:	b580      	push	{r7, lr}
   25556:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   25558:	4b06      	ldr	r3, [pc, #24]	; (25574 <system_init+0x20>)
   2555a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2555c:	4b06      	ldr	r3, [pc, #24]	; (25578 <system_init+0x24>)
   2555e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   25560:	4b06      	ldr	r3, [pc, #24]	; (2557c <system_init+0x28>)
   25562:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   25564:	4b06      	ldr	r3, [pc, #24]	; (25580 <system_init+0x2c>)
   25566:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   25568:	4b06      	ldr	r3, [pc, #24]	; (25584 <system_init+0x30>)
   2556a:	4798      	blx	r3
}
   2556c:	46c0      	nop			; (mov r8, r8)
   2556e:	46bd      	mov	sp, r7
   25570:	bd80      	pop	{r7, pc}
   25572:	46c0      	nop			; (mov r8, r8)
   25574:	00024b89 	.word	0x00024b89
   25578:	00024451 	.word	0x00024451
   2557c:	00023059 	.word	0x00023059
   25580:	0001ecbd 	.word	0x0001ecbd
   25584:	00025549 	.word	0x00025549

00025588 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   25588:	b580      	push	{r7, lr}
   2558a:	b082      	sub	sp, #8
   2558c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2558e:	4b2f      	ldr	r3, [pc, #188]	; (2564c <Reset_Handler+0xc4>)
   25590:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   25592:	4b2f      	ldr	r3, [pc, #188]	; (25650 <Reset_Handler+0xc8>)
   25594:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   25596:	687a      	ldr	r2, [r7, #4]
   25598:	683b      	ldr	r3, [r7, #0]
   2559a:	429a      	cmp	r2, r3
   2559c:	d00c      	beq.n	255b8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2559e:	e007      	b.n	255b0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   255a0:	683b      	ldr	r3, [r7, #0]
   255a2:	1d1a      	adds	r2, r3, #4
   255a4:	603a      	str	r2, [r7, #0]
   255a6:	687a      	ldr	r2, [r7, #4]
   255a8:	1d11      	adds	r1, r2, #4
   255aa:	6079      	str	r1, [r7, #4]
   255ac:	6812      	ldr	r2, [r2, #0]
   255ae:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   255b0:	683a      	ldr	r2, [r7, #0]
   255b2:	4b28      	ldr	r3, [pc, #160]	; (25654 <Reset_Handler+0xcc>)
   255b4:	429a      	cmp	r2, r3
   255b6:	d3f3      	bcc.n	255a0 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   255b8:	4b27      	ldr	r3, [pc, #156]	; (25658 <Reset_Handler+0xd0>)
   255ba:	603b      	str	r3, [r7, #0]
   255bc:	e004      	b.n	255c8 <Reset_Handler+0x40>
                *pDest++ = 0;
   255be:	683b      	ldr	r3, [r7, #0]
   255c0:	1d1a      	adds	r2, r3, #4
   255c2:	603a      	str	r2, [r7, #0]
   255c4:	2200      	movs	r2, #0
   255c6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   255c8:	683a      	ldr	r2, [r7, #0]
   255ca:	4b24      	ldr	r3, [pc, #144]	; (2565c <Reset_Handler+0xd4>)
   255cc:	429a      	cmp	r2, r3
   255ce:	d3f6      	bcc.n	255be <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   255d0:	4b23      	ldr	r3, [pc, #140]	; (25660 <Reset_Handler+0xd8>)
   255d2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   255d4:	4b23      	ldr	r3, [pc, #140]	; (25664 <Reset_Handler+0xdc>)
   255d6:	687a      	ldr	r2, [r7, #4]
   255d8:	21ff      	movs	r1, #255	; 0xff
   255da:	438a      	bics	r2, r1
   255dc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   255de:	4a22      	ldr	r2, [pc, #136]	; (25668 <Reset_Handler+0xe0>)
   255e0:	2390      	movs	r3, #144	; 0x90
   255e2:	005b      	lsls	r3, r3, #1
   255e4:	2102      	movs	r1, #2
   255e6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   255e8:	4a20      	ldr	r2, [pc, #128]	; (2566c <Reset_Handler+0xe4>)
   255ea:	78d3      	ldrb	r3, [r2, #3]
   255ec:	2103      	movs	r1, #3
   255ee:	438b      	bics	r3, r1
   255f0:	1c19      	adds	r1, r3, #0
   255f2:	2302      	movs	r3, #2
   255f4:	430b      	orrs	r3, r1
   255f6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   255f8:	4a1c      	ldr	r2, [pc, #112]	; (2566c <Reset_Handler+0xe4>)
   255fa:	78d3      	ldrb	r3, [r2, #3]
   255fc:	210c      	movs	r1, #12
   255fe:	438b      	bics	r3, r1
   25600:	1c19      	adds	r1, r3, #0
   25602:	2308      	movs	r3, #8
   25604:	430b      	orrs	r3, r1
   25606:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   25608:	4a19      	ldr	r2, [pc, #100]	; (25670 <Reset_Handler+0xe8>)
   2560a:	7b93      	ldrb	r3, [r2, #14]
   2560c:	2130      	movs	r1, #48	; 0x30
   2560e:	438b      	bics	r3, r1
   25610:	1c19      	adds	r1, r3, #0
   25612:	2320      	movs	r3, #32
   25614:	430b      	orrs	r3, r1
   25616:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   25618:	4a15      	ldr	r2, [pc, #84]	; (25670 <Reset_Handler+0xe8>)
   2561a:	7b93      	ldrb	r3, [r2, #14]
   2561c:	210c      	movs	r1, #12
   2561e:	438b      	bics	r3, r1
   25620:	1c19      	adds	r1, r3, #0
   25622:	2308      	movs	r3, #8
   25624:	430b      	orrs	r3, r1
   25626:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   25628:	4a11      	ldr	r2, [pc, #68]	; (25670 <Reset_Handler+0xe8>)
   2562a:	7b93      	ldrb	r3, [r2, #14]
   2562c:	2103      	movs	r1, #3
   2562e:	438b      	bics	r3, r1
   25630:	1c19      	adds	r1, r3, #0
   25632:	2302      	movs	r3, #2
   25634:	430b      	orrs	r3, r1
   25636:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   25638:	4a0e      	ldr	r2, [pc, #56]	; (25674 <Reset_Handler+0xec>)
   2563a:	6853      	ldr	r3, [r2, #4]
   2563c:	2180      	movs	r1, #128	; 0x80
   2563e:	430b      	orrs	r3, r1
   25640:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   25642:	4b0d      	ldr	r3, [pc, #52]	; (25678 <Reset_Handler+0xf0>)
   25644:	4798      	blx	r3

        /* Branch to main function */
        main();
   25646:	4b0d      	ldr	r3, [pc, #52]	; (2567c <Reset_Handler+0xf4>)
   25648:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2564a:	e7fe      	b.n	2564a <Reset_Handler+0xc2>
   2564c:	0002b99c 	.word	0x0002b99c
   25650:	20000000 	.word	0x20000000
   25654:	20000204 	.word	0x20000204
   25658:	20000400 	.word	0x20000400
   2565c:	20001004 	.word	0x20001004
   25660:	00010000 	.word	0x00010000
   25664:	e000ed00 	.word	0xe000ed00
   25668:	41007000 	.word	0x41007000
   2566c:	41005000 	.word	0x41005000
   25670:	41004800 	.word	0x41004800
   25674:	41004000 	.word	0x41004000
   25678:	00029569 	.word	0x00029569
   2567c:	0002592d 	.word	0x0002592d

00025680 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
uint32_t phantomISR;
void Dummy_Handler(void)
{
   25680:	b580      	push	{r7, lr}
   25682:	b082      	sub	sp, #8
   25684:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25686:	f3ef 8305 	mrs	r3, IPSR
   2568a:	607b      	str	r3, [r7, #4]
  return(result);
   2568c:	687a      	ldr	r2, [r7, #4]
	phantomISR = __get_IPSR();
   2568e:	4b01      	ldr	r3, [pc, #4]	; (25694 <Dummy_Handler+0x14>)
   25690:	601a      	str	r2, [r3, #0]
        while (1) {
   25692:	e7fe      	b.n	25692 <Dummy_Handler+0x12>
   25694:	20000b98 	.word	0x20000b98

00025698 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   25698:	b580      	push	{r7, lr}
   2569a:	b084      	sub	sp, #16
   2569c:	af00      	add	r7, sp, #0
   2569e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   256a0:	4b0a      	ldr	r3, [pc, #40]	; (256cc <_sbrk+0x34>)
   256a2:	681b      	ldr	r3, [r3, #0]
   256a4:	2b00      	cmp	r3, #0
   256a6:	d102      	bne.n	256ae <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   256a8:	4b08      	ldr	r3, [pc, #32]	; (256cc <_sbrk+0x34>)
   256aa:	4a09      	ldr	r2, [pc, #36]	; (256d0 <_sbrk+0x38>)
   256ac:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   256ae:	4b07      	ldr	r3, [pc, #28]	; (256cc <_sbrk+0x34>)
   256b0:	681b      	ldr	r3, [r3, #0]
   256b2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   256b4:	4b05      	ldr	r3, [pc, #20]	; (256cc <_sbrk+0x34>)
   256b6:	681a      	ldr	r2, [r3, #0]
   256b8:	687b      	ldr	r3, [r7, #4]
   256ba:	18d2      	adds	r2, r2, r3
   256bc:	4b03      	ldr	r3, [pc, #12]	; (256cc <_sbrk+0x34>)
   256be:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   256c0:	68fb      	ldr	r3, [r7, #12]
}
   256c2:	0018      	movs	r0, r3
   256c4:	46bd      	mov	sp, r7
   256c6:	b004      	add	sp, #16
   256c8:	bd80      	pop	{r7, pc}
   256ca:	46c0      	nop			; (mov r8, r8)
   256cc:	20000708 	.word	0x20000708
   256d0:	20003008 	.word	0x20003008

000256d4 <system_apb_clock_clear_mask>:
{
   256d4:	b580      	push	{r7, lr}
   256d6:	b082      	sub	sp, #8
   256d8:	af00      	add	r7, sp, #0
   256da:	0002      	movs	r2, r0
   256dc:	6039      	str	r1, [r7, #0]
   256de:	1dfb      	adds	r3, r7, #7
   256e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   256e2:	1dfb      	adds	r3, r7, #7
   256e4:	781b      	ldrb	r3, [r3, #0]
   256e6:	2b01      	cmp	r3, #1
   256e8:	d00b      	beq.n	25702 <system_apb_clock_clear_mask+0x2e>
   256ea:	2b02      	cmp	r3, #2
   256ec:	d011      	beq.n	25712 <system_apb_clock_clear_mask+0x3e>
   256ee:	2b00      	cmp	r3, #0
   256f0:	d117      	bne.n	25722 <system_apb_clock_clear_mask+0x4e>
			PM->APBAMASK.reg &= ~mask;
   256f2:	4b0f      	ldr	r3, [pc, #60]	; (25730 <system_apb_clock_clear_mask+0x5c>)
   256f4:	4a0e      	ldr	r2, [pc, #56]	; (25730 <system_apb_clock_clear_mask+0x5c>)
   256f6:	6992      	ldr	r2, [r2, #24]
   256f8:	6839      	ldr	r1, [r7, #0]
   256fa:	43c9      	mvns	r1, r1
   256fc:	400a      	ands	r2, r1
   256fe:	619a      	str	r2, [r3, #24]
			break;
   25700:	e011      	b.n	25726 <system_apb_clock_clear_mask+0x52>
			PM->APBBMASK.reg &= ~mask;
   25702:	4b0b      	ldr	r3, [pc, #44]	; (25730 <system_apb_clock_clear_mask+0x5c>)
   25704:	4a0a      	ldr	r2, [pc, #40]	; (25730 <system_apb_clock_clear_mask+0x5c>)
   25706:	69d2      	ldr	r2, [r2, #28]
   25708:	6839      	ldr	r1, [r7, #0]
   2570a:	43c9      	mvns	r1, r1
   2570c:	400a      	ands	r2, r1
   2570e:	61da      	str	r2, [r3, #28]
			break;
   25710:	e009      	b.n	25726 <system_apb_clock_clear_mask+0x52>
			PM->APBCMASK.reg &= ~mask;
   25712:	4b07      	ldr	r3, [pc, #28]	; (25730 <system_apb_clock_clear_mask+0x5c>)
   25714:	4a06      	ldr	r2, [pc, #24]	; (25730 <system_apb_clock_clear_mask+0x5c>)
   25716:	6a12      	ldr	r2, [r2, #32]
   25718:	6839      	ldr	r1, [r7, #0]
   2571a:	43c9      	mvns	r1, r1
   2571c:	400a      	ands	r2, r1
   2571e:	621a      	str	r2, [r3, #32]
			break;
   25720:	e001      	b.n	25726 <system_apb_clock_clear_mask+0x52>
			return STATUS_ERR_INVALID_ARG;
   25722:	2317      	movs	r3, #23
   25724:	e000      	b.n	25728 <system_apb_clock_clear_mask+0x54>
	return STATUS_OK;
   25726:	2300      	movs	r3, #0
}
   25728:	0018      	movs	r0, r3
   2572a:	46bd      	mov	sp, r7
   2572c:	b002      	add	sp, #8
   2572e:	bd80      	pop	{r7, pc}
   25730:	40000400 	.word	0x40000400

00025734 <system_interrupt_enable_global>:
{
   25734:	b580      	push	{r7, lr}
   25736:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   25738:	4b04      	ldr	r3, [pc, #16]	; (2574c <system_interrupt_enable_global+0x18>)
   2573a:	2201      	movs	r2, #1
   2573c:	701a      	strb	r2, [r3, #0]
   2573e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25742:	b662      	cpsie	i
}
   25744:	46c0      	nop			; (mov r8, r8)
   25746:	46bd      	mov	sp, r7
   25748:	bd80      	pop	{r7, pc}
   2574a:	46c0      	nop			; (mov r8, r8)
   2574c:	20000028 	.word	0x20000028

00025750 <system_pinmux_get_group_from_gpio_pin>:
{
   25750:	b580      	push	{r7, lr}
   25752:	b084      	sub	sp, #16
   25754:	af00      	add	r7, sp, #0
   25756:	0002      	movs	r2, r0
   25758:	1dfb      	adds	r3, r7, #7
   2575a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2575c:	230f      	movs	r3, #15
   2575e:	18fb      	adds	r3, r7, r3
   25760:	1dfa      	adds	r2, r7, #7
   25762:	7812      	ldrb	r2, [r2, #0]
   25764:	09d2      	lsrs	r2, r2, #7
   25766:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25768:	230e      	movs	r3, #14
   2576a:	18fb      	adds	r3, r7, r3
   2576c:	1dfa      	adds	r2, r7, #7
   2576e:	7812      	ldrb	r2, [r2, #0]
   25770:	0952      	lsrs	r2, r2, #5
   25772:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25774:	4b0d      	ldr	r3, [pc, #52]	; (257ac <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25776:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25778:	230f      	movs	r3, #15
   2577a:	18fb      	adds	r3, r7, r3
   2577c:	781b      	ldrb	r3, [r3, #0]
   2577e:	2b00      	cmp	r3, #0
   25780:	d10f      	bne.n	257a2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25782:	230f      	movs	r3, #15
   25784:	18fb      	adds	r3, r7, r3
   25786:	781b      	ldrb	r3, [r3, #0]
   25788:	009b      	lsls	r3, r3, #2
   2578a:	2210      	movs	r2, #16
   2578c:	4694      	mov	ip, r2
   2578e:	44bc      	add	ip, r7
   25790:	4463      	add	r3, ip
   25792:	3b08      	subs	r3, #8
   25794:	681a      	ldr	r2, [r3, #0]
   25796:	230e      	movs	r3, #14
   25798:	18fb      	adds	r3, r7, r3
   2579a:	781b      	ldrb	r3, [r3, #0]
   2579c:	01db      	lsls	r3, r3, #7
   2579e:	18d3      	adds	r3, r2, r3
   257a0:	e000      	b.n	257a4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   257a2:	2300      	movs	r3, #0
}
   257a4:	0018      	movs	r0, r3
   257a6:	46bd      	mov	sp, r7
   257a8:	b004      	add	sp, #16
   257aa:	bd80      	pop	{r7, pc}
   257ac:	41004400 	.word	0x41004400

000257b0 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   257b0:	b580      	push	{r7, lr}
   257b2:	b084      	sub	sp, #16
   257b4:	af00      	add	r7, sp, #0
   257b6:	0002      	movs	r2, r0
   257b8:	1dfb      	adds	r3, r7, #7
   257ba:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   257bc:	4b1a      	ldr	r3, [pc, #104]	; (25828 <system_set_sleepmode+0x78>)
   257be:	699b      	ldr	r3, [r3, #24]
   257c0:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   257c2:	68fa      	ldr	r2, [r7, #12]
   257c4:	23f0      	movs	r3, #240	; 0xf0
   257c6:	011b      	lsls	r3, r3, #4
   257c8:	4013      	ands	r3, r2
   257ca:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   257cc:	68fb      	ldr	r3, [r7, #12]
   257ce:	0a1b      	lsrs	r3, r3, #8
   257d0:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   257d2:	68fb      	ldr	r3, [r7, #12]
   257d4:	2b02      	cmp	r3, #2
   257d6:	d805      	bhi.n	257e4 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   257d8:	4a14      	ldr	r2, [pc, #80]	; (2582c <system_set_sleepmode+0x7c>)
   257da:	6853      	ldr	r3, [r2, #4]
   257dc:	21c0      	movs	r1, #192	; 0xc0
   257de:	0089      	lsls	r1, r1, #2
   257e0:	430b      	orrs	r3, r1
   257e2:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   257e4:	1dfb      	adds	r3, r7, #7
   257e6:	781b      	ldrb	r3, [r3, #0]
   257e8:	2b00      	cmp	r3, #0
   257ea:	db16      	blt.n	2581a <system_set_sleepmode+0x6a>
   257ec:	2b02      	cmp	r3, #2
   257ee:	dd02      	ble.n	257f6 <system_set_sleepmode+0x46>
   257f0:	2b03      	cmp	r3, #3
   257f2:	d00b      	beq.n	2580c <system_set_sleepmode+0x5c>
   257f4:	e011      	b.n	2581a <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   257f6:	4b0e      	ldr	r3, [pc, #56]	; (25830 <system_set_sleepmode+0x80>)
   257f8:	4a0d      	ldr	r2, [pc, #52]	; (25830 <system_set_sleepmode+0x80>)
   257fa:	6912      	ldr	r2, [r2, #16]
   257fc:	2104      	movs	r1, #4
   257fe:	438a      	bics	r2, r1
   25800:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   25802:	4a0c      	ldr	r2, [pc, #48]	; (25834 <system_set_sleepmode+0x84>)
   25804:	1dfb      	adds	r3, r7, #7
   25806:	781b      	ldrb	r3, [r3, #0]
   25808:	7053      	strb	r3, [r2, #1]
			break;
   2580a:	e008      	b.n	2581e <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   2580c:	4b08      	ldr	r3, [pc, #32]	; (25830 <system_set_sleepmode+0x80>)
   2580e:	4a08      	ldr	r2, [pc, #32]	; (25830 <system_set_sleepmode+0x80>)
   25810:	6912      	ldr	r2, [r2, #16]
   25812:	2104      	movs	r1, #4
   25814:	430a      	orrs	r2, r1
   25816:	611a      	str	r2, [r3, #16]
			break;
   25818:	e001      	b.n	2581e <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   2581a:	2317      	movs	r3, #23
   2581c:	e000      	b.n	25820 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   2581e:	2300      	movs	r3, #0
}
   25820:	0018      	movs	r0, r3
   25822:	46bd      	mov	sp, r7
   25824:	b004      	add	sp, #16
   25826:	bd80      	pop	{r7, pc}
   25828:	41002000 	.word	0x41002000
   2582c:	41004000 	.word	0x41004000
   25830:	e000ed00 	.word	0xe000ed00
   25834:	40000400 	.word	0x40000400

00025838 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   25838:	b580      	push	{r7, lr}
   2583a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   2583c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   25840:	bf30      	wfi
	__DSB();
	__WFI();
}
   25842:	46c0      	nop			; (mov r8, r8)
   25844:	46bd      	mov	sp, r7
   25846:	bd80      	pop	{r7, pc}

00025848 <port_get_group_from_gpio_pin>:
{
   25848:	b580      	push	{r7, lr}
   2584a:	b082      	sub	sp, #8
   2584c:	af00      	add	r7, sp, #0
   2584e:	0002      	movs	r2, r0
   25850:	1dfb      	adds	r3, r7, #7
   25852:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25854:	1dfb      	adds	r3, r7, #7
   25856:	781b      	ldrb	r3, [r3, #0]
   25858:	0018      	movs	r0, r3
   2585a:	4b03      	ldr	r3, [pc, #12]	; (25868 <port_get_group_from_gpio_pin+0x20>)
   2585c:	4798      	blx	r3
   2585e:	0003      	movs	r3, r0
}
   25860:	0018      	movs	r0, r3
   25862:	46bd      	mov	sp, r7
   25864:	b002      	add	sp, #8
   25866:	bd80      	pop	{r7, pc}
   25868:	00025751 	.word	0x00025751

0002586c <port_pin_set_output_level>:
{
   2586c:	b580      	push	{r7, lr}
   2586e:	b084      	sub	sp, #16
   25870:	af00      	add	r7, sp, #0
   25872:	0002      	movs	r2, r0
   25874:	1dfb      	adds	r3, r7, #7
   25876:	701a      	strb	r2, [r3, #0]
   25878:	1dbb      	adds	r3, r7, #6
   2587a:	1c0a      	adds	r2, r1, #0
   2587c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2587e:	1dfb      	adds	r3, r7, #7
   25880:	781b      	ldrb	r3, [r3, #0]
   25882:	0018      	movs	r0, r3
   25884:	4b0d      	ldr	r3, [pc, #52]	; (258bc <port_pin_set_output_level+0x50>)
   25886:	4798      	blx	r3
   25888:	0003      	movs	r3, r0
   2588a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2588c:	1dfb      	adds	r3, r7, #7
   2588e:	781b      	ldrb	r3, [r3, #0]
   25890:	221f      	movs	r2, #31
   25892:	4013      	ands	r3, r2
   25894:	2201      	movs	r2, #1
   25896:	409a      	lsls	r2, r3
   25898:	0013      	movs	r3, r2
   2589a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2589c:	1dbb      	adds	r3, r7, #6
   2589e:	781b      	ldrb	r3, [r3, #0]
   258a0:	2b00      	cmp	r3, #0
   258a2:	d003      	beq.n	258ac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   258a4:	68fb      	ldr	r3, [r7, #12]
   258a6:	68ba      	ldr	r2, [r7, #8]
   258a8:	619a      	str	r2, [r3, #24]
}
   258aa:	e002      	b.n	258b2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   258ac:	68fb      	ldr	r3, [r7, #12]
   258ae:	68ba      	ldr	r2, [r7, #8]
   258b0:	615a      	str	r2, [r3, #20]
}
   258b2:	46c0      	nop			; (mov r8, r8)
   258b4:	46bd      	mov	sp, r7
   258b6:	b004      	add	sp, #16
   258b8:	bd80      	pop	{r7, pc}
   258ba:	46c0      	nop			; (mov r8, r8)
   258bc:	00025849 	.word	0x00025849

000258c0 <InitTraceBuffer>:

__attribute__((aligned(1024)))
volatile char __tracebuffer__[1024];
volatile int __tracebuffersize__ = sizeof(__tracebuffer__);
void InitTraceBuffer()
{
   258c0:	b580      	push	{r7, lr}
   258c2:	b082      	sub	sp, #8
   258c4:	af00      	add	r7, sp, #0
    int index = 0;
   258c6:	2300      	movs	r3, #0
   258c8:	607b      	str	r3, [r7, #4]
    uint32_t mtbEnabled = IS_MTB_ENABLED;
   258ca:	4b14      	ldr	r3, [pc, #80]	; (2591c <InitTraceBuffer+0x5c>)
   258cc:	681b      	ldr	r3, [r3, #0]
   258ce:	0fdb      	lsrs	r3, r3, #31
   258d0:	07db      	lsls	r3, r3, #31
   258d2:	603b      	str	r3, [r7, #0]
    DISABLE_MTB;
   258d4:	4b11      	ldr	r3, [pc, #68]	; (2591c <InitTraceBuffer+0x5c>)
   258d6:	4a11      	ldr	r2, [pc, #68]	; (2591c <InitTraceBuffer+0x5c>)
   258d8:	6812      	ldr	r2, [r2, #0]
   258da:	0052      	lsls	r2, r2, #1
   258dc:	0852      	lsrs	r2, r2, #1
   258de:	601a      	str	r2, [r3, #0]
    for(index =0; index<1024; index++)
   258e0:	2300      	movs	r3, #0
   258e2:	607b      	str	r3, [r7, #4]
   258e4:	e008      	b.n	258f8 <InitTraceBuffer+0x38>
    {
        __tracebuffer__[index];
   258e6:	4a0e      	ldr	r2, [pc, #56]	; (25920 <InitTraceBuffer+0x60>)
   258e8:	687b      	ldr	r3, [r7, #4]
   258ea:	18d3      	adds	r3, r2, r3
   258ec:	781b      	ldrb	r3, [r3, #0]
        __tracebuffersize__;
   258ee:	4b0d      	ldr	r3, [pc, #52]	; (25924 <InitTraceBuffer+0x64>)
   258f0:	681b      	ldr	r3, [r3, #0]
    for(index =0; index<1024; index++)
   258f2:	687b      	ldr	r3, [r7, #4]
   258f4:	3301      	adds	r3, #1
   258f6:	607b      	str	r3, [r7, #4]
   258f8:	687b      	ldr	r3, [r7, #4]
   258fa:	4a0b      	ldr	r2, [pc, #44]	; (25928 <InitTraceBuffer+0x68>)
   258fc:	4293      	cmp	r3, r2
   258fe:	ddf2      	ble.n	258e6 <InitTraceBuffer+0x26>
    }
    if(mtbEnabled)
   25900:	683b      	ldr	r3, [r7, #0]
   25902:	2b00      	cmp	r3, #0
   25904:	d006      	beq.n	25914 <InitTraceBuffer+0x54>
        ENABLE_MTB;
   25906:	4b05      	ldr	r3, [pc, #20]	; (2591c <InitTraceBuffer+0x5c>)
   25908:	4a04      	ldr	r2, [pc, #16]	; (2591c <InitTraceBuffer+0x5c>)
   2590a:	6812      	ldr	r2, [r2, #0]
   2590c:	2180      	movs	r1, #128	; 0x80
   2590e:	0609      	lsls	r1, r1, #24
   25910:	430a      	orrs	r2, r1
   25912:	601a      	str	r2, [r3, #0]
}
   25914:	46c0      	nop			; (mov r8, r8)
   25916:	46bd      	mov	sp, r7
   25918:	b002      	add	sp, #8
   2591a:	bd80      	pop	{r7, pc}
   2591c:	41006004 	.word	0x41006004
   25920:	20000c00 	.word	0x20000c00
   25924:	2000002c 	.word	0x2000002c
   25928:	000003ff 	.word	0x000003ff

0002592c <main>:

int main (void)
{
   2592c:	b590      	push	{r4, r7, lr}
   2592e:	b083      	sub	sp, #12
   25930:	af02      	add	r7, sp, #8
	system_init();
   25932:	4b19      	ldr	r3, [pc, #100]	; (25998 <main+0x6c>)
   25934:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   25936:	2111      	movs	r1, #17
   25938:	2000      	movs	r0, #0
   2593a:	4b18      	ldr	r3, [pc, #96]	; (2599c <main+0x70>)
   2593c:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   2593e:	2103      	movs	r1, #3
   25940:	2001      	movs	r0, #1
   25942:	4b16      	ldr	r3, [pc, #88]	; (2599c <main+0x70>)
   25944:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   25946:	4b16      	ldr	r3, [pc, #88]	; (259a0 <main+0x74>)
   25948:	0019      	movs	r1, r3
   2594a:	2002      	movs	r0, #2
   2594c:	4b13      	ldr	r3, [pc, #76]	; (2599c <main+0x70>)
   2594e:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   25950:	4a14      	ldr	r2, [pc, #80]	; (259a4 <main+0x78>)
   25952:	6853      	ldr	r3, [r2, #4]
   25954:	21c0      	movs	r1, #192	; 0xc0
   25956:	0089      	lsls	r1, r1, #2
   25958:	430b      	orrs	r3, r1
   2595a:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   2595c:	2003      	movs	r0, #3
   2595e:	4b12      	ldr	r3, [pc, #72]	; (259a8 <main+0x7c>)
   25960:	4798      	blx	r3
	
	system_interrupt_enable_global();
   25962:	4b12      	ldr	r3, [pc, #72]	; (259ac <main+0x80>)
   25964:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	InitTraceBuffer();
   25966:	4b12      	ldr	r3, [pc, #72]	; (259b0 <main+0x84>)
   25968:	4798      	blx	r3
	delay_init();
   2596a:	4b12      	ldr	r3, [pc, #72]	; (259b4 <main+0x88>)
   2596c:	4798      	blx	r3
	init_eeprom();
   2596e:	4b12      	ldr	r3, [pc, #72]	; (259b8 <main+0x8c>)
   25970:	4798      	blx	r3
	
	
	
	start_lcd_service();
   25972:	4b12      	ldr	r3, [pc, #72]	; (259bc <main+0x90>)
   25974:	4798      	blx	r3
	start_gsm_service();
   25976:	4b12      	ldr	r3, [pc, #72]	; (259c0 <main+0x94>)
   25978:	4798      	blx	r3
	start_motor_service();
   2597a:	4b12      	ldr	r3, [pc, #72]	; (259c4 <main+0x98>)
   2597c:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   2597e:	4812      	ldr	r0, [pc, #72]	; (259c8 <main+0x9c>)
   25980:	2300      	movs	r3, #0
   25982:	9301      	str	r3, [sp, #4]
   25984:	2301      	movs	r3, #1
   25986:	9300      	str	r3, [sp, #0]
   25988:	2300      	movs	r3, #0
   2598a:	2264      	movs	r2, #100	; 0x64
   2598c:	2100      	movs	r1, #0
   2598e:	4c0f      	ldr	r4, [pc, #60]	; (259cc <main+0xa0>)
   25990:	47a0      	blx	r4
	
	vTaskStartScheduler();
   25992:	4b0f      	ldr	r3, [pc, #60]	; (259d0 <main+0xa4>)
   25994:	4798      	blx	r3
	
	for (;;)
   25996:	e7fe      	b.n	25996 <main+0x6a>
   25998:	00025555 	.word	0x00025555
   2599c:	000256d5 	.word	0x000256d5
   259a0:	00060001 	.word	0x00060001
   259a4:	41004000 	.word	0x41004000
   259a8:	000257b1 	.word	0x000257b1
   259ac:	00025735 	.word	0x00025735
   259b0:	000258c1 	.word	0x000258c1
   259b4:	0002317d 	.word	0x0002317d
   259b8:	00010151 	.word	0x00010151
   259bc:	00019811 	.word	0x00019811
   259c0:	00018d85 	.word	0x00018d85
   259c4:	0001d22d 	.word	0x0001d22d
   259c8:	00025a1d 	.word	0x00025a1d
   259cc:	00020629 	.word	0x00020629
   259d0:	00020afd 	.word	0x00020afd

000259d4 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   259d4:	b580      	push	{r7, lr}
   259d6:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   259d8:	4b0d      	ldr	r3, [pc, #52]	; (25a10 <checkSleepElligible+0x3c>)
   259da:	4798      	blx	r3
   259dc:	0003      	movs	r3, r0
   259de:	001a      	movs	r2, r3
   259e0:	2301      	movs	r3, #1
   259e2:	4053      	eors	r3, r2
   259e4:	b2db      	uxtb	r3, r3
   259e6:	2b00      	cmp	r3, #0
   259e8:	d009      	beq.n	259fe <checkSleepElligible+0x2a>
   259ea:	4b0a      	ldr	r3, [pc, #40]	; (25a14 <checkSleepElligible+0x40>)
   259ec:	4798      	blx	r3
   259ee:	1e03      	subs	r3, r0, #0
   259f0:	d005      	beq.n	259fe <checkSleepElligible+0x2a>
   259f2:	4b09      	ldr	r3, [pc, #36]	; (25a18 <checkSleepElligible+0x44>)
   259f4:	4798      	blx	r3
   259f6:	1e03      	subs	r3, r0, #0
   259f8:	d001      	beq.n	259fe <checkSleepElligible+0x2a>
   259fa:	2301      	movs	r3, #1
   259fc:	e000      	b.n	25a00 <checkSleepElligible+0x2c>
   259fe:	2300      	movs	r3, #0
   25a00:	1c1a      	adds	r2, r3, #0
   25a02:	2301      	movs	r3, #1
   25a04:	4013      	ands	r3, r2
   25a06:	b2db      	uxtb	r3, r3
}
   25a08:	0018      	movs	r0, r3
   25a0a:	46bd      	mov	sp, r7
   25a0c:	bd80      	pop	{r7, pc}
   25a0e:	46c0      	nop			; (mov r8, r8)
   25a10:	0001ba71 	.word	0x0001ba71
   25a14:	0001d551 	.word	0x0001d551
   25a18:	00018e4d 	.word	0x00018e4d

00025a1c <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   25a1c:	b580      	push	{r7, lr}
   25a1e:	b084      	sub	sp, #16
   25a20:	af00      	add	r7, sp, #0
   25a22:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   25a24:	4b34      	ldr	r3, [pc, #208]	; (25af8 <vTask_sleep_manager+0xdc>)
   25a26:	4798      	blx	r3
   25a28:	1e03      	subs	r3, r0, #0
   25a2a:	d060      	beq.n	25aee <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   25a2c:	4b33      	ldr	r3, [pc, #204]	; (25afc <vTask_sleep_manager+0xe0>)
   25a2e:	781b      	ldrb	r3, [r3, #0]
   25a30:	2201      	movs	r2, #1
   25a32:	4053      	eors	r3, r2
   25a34:	b2db      	uxtb	r3, r3
   25a36:	2b00      	cmp	r3, #0
   25a38:	d008      	beq.n	25a4c <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   25a3a:	4b31      	ldr	r3, [pc, #196]	; (25b00 <vTask_sleep_manager+0xe4>)
   25a3c:	4798      	blx	r3
   25a3e:	0002      	movs	r2, r0
   25a40:	4b30      	ldr	r3, [pc, #192]	; (25b04 <vTask_sleep_manager+0xe8>)
   25a42:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   25a44:	4b2d      	ldr	r3, [pc, #180]	; (25afc <vTask_sleep_manager+0xe0>)
   25a46:	2201      	movs	r2, #1
   25a48:	701a      	strb	r2, [r3, #0]
   25a4a:	e7eb      	b.n	25a24 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   25a4c:	4b2b      	ldr	r3, [pc, #172]	; (25afc <vTask_sleep_manager+0xe0>)
   25a4e:	781b      	ldrb	r3, [r3, #0]
   25a50:	2b00      	cmp	r3, #0
   25a52:	d0e7      	beq.n	25a24 <vTask_sleep_manager+0x8>
   25a54:	4b2a      	ldr	r3, [pc, #168]	; (25b00 <vTask_sleep_manager+0xe4>)
   25a56:	4798      	blx	r3
   25a58:	0002      	movs	r2, r0
   25a5a:	4b2a      	ldr	r3, [pc, #168]	; (25b04 <vTask_sleep_manager+0xe8>)
   25a5c:	681b      	ldr	r3, [r3, #0]
   25a5e:	1ad3      	subs	r3, r2, r3
   25a60:	4a29      	ldr	r2, [pc, #164]	; (25b08 <vTask_sleep_manager+0xec>)
   25a62:	4293      	cmp	r3, r2
   25a64:	d9de      	bls.n	25a24 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   25a66:	230f      	movs	r3, #15
   25a68:	18fb      	adds	r3, r7, r3
   25a6a:	220a      	movs	r2, #10
   25a6c:	701a      	strb	r2, [r3, #0]
				bool led=false;
   25a6e:	230e      	movs	r3, #14
   25a70:	18fb      	adds	r3, r7, r3
   25a72:	2200      	movs	r2, #0
   25a74:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   25a76:	230e      	movs	r3, #14
   25a78:	18fb      	adds	r3, r7, r3
   25a7a:	781b      	ldrb	r3, [r3, #0]
   25a7c:	1e5a      	subs	r2, r3, #1
   25a7e:	4193      	sbcs	r3, r2
   25a80:	b2db      	uxtb	r3, r3
   25a82:	2201      	movs	r2, #1
   25a84:	4053      	eors	r3, r2
   25a86:	b2db      	uxtb	r3, r3
   25a88:	001a      	movs	r2, r3
   25a8a:	230e      	movs	r3, #14
   25a8c:	18fb      	adds	r3, r7, r3
   25a8e:	701a      	strb	r2, [r3, #0]
   25a90:	781a      	ldrb	r2, [r3, #0]
   25a92:	2101      	movs	r1, #1
   25a94:	400a      	ands	r2, r1
   25a96:	701a      	strb	r2, [r3, #0]
					if(led)
   25a98:	230e      	movs	r3, #14
   25a9a:	18fb      	adds	r3, r7, r3
   25a9c:	781b      	ldrb	r3, [r3, #0]
   25a9e:	2b00      	cmp	r3, #0
   25aa0:	d004      	beq.n	25aac <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   25aa2:	2100      	movs	r1, #0
   25aa4:	2027      	movs	r0, #39	; 0x27
   25aa6:	4b19      	ldr	r3, [pc, #100]	; (25b0c <vTask_sleep_manager+0xf0>)
   25aa8:	4798      	blx	r3
   25aaa:	e003      	b.n	25ab4 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   25aac:	2101      	movs	r1, #1
   25aae:	2027      	movs	r0, #39	; 0x27
   25ab0:	4b16      	ldr	r3, [pc, #88]	; (25b0c <vTask_sleep_manager+0xf0>)
   25ab2:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   25ab4:	4b12      	ldr	r3, [pc, #72]	; (25b00 <vTask_sleep_manager+0xe4>)
   25ab6:	4798      	blx	r3
   25ab8:	0002      	movs	r2, r0
   25aba:	4b12      	ldr	r3, [pc, #72]	; (25b04 <vTask_sleep_manager+0xe8>)
   25abc:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   25abe:	46c0      	nop			; (mov r8, r8)
   25ac0:	4b0f      	ldr	r3, [pc, #60]	; (25b00 <vTask_sleep_manager+0xe4>)
   25ac2:	4798      	blx	r3
   25ac4:	0002      	movs	r2, r0
   25ac6:	4b0f      	ldr	r3, [pc, #60]	; (25b04 <vTask_sleep_manager+0xe8>)
   25ac8:	681b      	ldr	r3, [r3, #0]
   25aca:	1ad3      	subs	r3, r2, r3
   25acc:	2bc7      	cmp	r3, #199	; 0xc7
   25ace:	d9f7      	bls.n	25ac0 <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   25ad0:	230f      	movs	r3, #15
   25ad2:	18fb      	adds	r3, r7, r3
   25ad4:	220f      	movs	r2, #15
   25ad6:	18ba      	adds	r2, r7, r2
   25ad8:	7812      	ldrb	r2, [r2, #0]
   25ada:	3a01      	subs	r2, #1
   25adc:	701a      	strb	r2, [r3, #0]
   25ade:	230f      	movs	r3, #15
   25ae0:	18fb      	adds	r3, r7, r3
   25ae2:	781b      	ldrb	r3, [r3, #0]
   25ae4:	2b00      	cmp	r3, #0
   25ae6:	d1c6      	bne.n	25a76 <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   25ae8:	4b09      	ldr	r3, [pc, #36]	; (25b10 <vTask_sleep_manager+0xf4>)
   25aea:	4798      	blx	r3
   25aec:	e79a      	b.n	25a24 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   25aee:	4b03      	ldr	r3, [pc, #12]	; (25afc <vTask_sleep_manager+0xe0>)
   25af0:	2200      	movs	r2, #0
   25af2:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   25af4:	e796      	b.n	25a24 <vTask_sleep_manager+0x8>
   25af6:	46c0      	nop			; (mov r8, r8)
   25af8:	000259d5 	.word	0x000259d5
   25afc:	2000070c 	.word	0x2000070c
   25b00:	00020ccd 	.word	0x00020ccd
   25b04:	20000710 	.word	0x20000710
   25b08:	00004650 	.word	0x00004650
   25b0c:	0002586d 	.word	0x0002586d
   25b10:	00025b15 	.word	0x00025b15

00025b14 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   25b14:	b580      	push	{r7, lr}
   25b16:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   25b18:	4b07      	ldr	r3, [pc, #28]	; (25b38 <gotoSleep+0x24>)
   25b1a:	4798      	blx	r3
	
	lcd_in_sleep = true;
   25b1c:	4b07      	ldr	r3, [pc, #28]	; (25b3c <gotoSleep+0x28>)
   25b1e:	2201      	movs	r2, #1
   25b20:	701a      	strb	r2, [r3, #0]
	setNetworkCharacter=true;
   25b22:	4b07      	ldr	r3, [pc, #28]	; (25b40 <gotoSleep+0x2c>)
   25b24:	2201      	movs	r2, #1
   25b26:	701a      	strb	r2, [r3, #0]
	system_sleep();
   25b28:	4b06      	ldr	r3, [pc, #24]	; (25b44 <gotoSleep+0x30>)
   25b2a:	4798      	blx	r3
	mcuWakeUpFromSleep=true;
   25b2c:	4b06      	ldr	r3, [pc, #24]	; (25b48 <gotoSleep+0x34>)
   25b2e:	2201      	movs	r2, #1
   25b30:	701a      	strb	r2, [r3, #0]
   25b32:	46c0      	nop			; (mov r8, r8)
   25b34:	46bd      	mov	sp, r7
   25b36:	bd80      	pop	{r7, pc}
   25b38:	00013ced 	.word	0x00013ced
   25b3c:	20000a68 	.word	0x20000a68
   25b40:	20000a69 	.word	0x20000a69
   25b44:	00025839 	.word	0x00025839
   25b48:	20000a44 	.word	0x20000a44

00025b4c <pow>:
   25b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25b4e:	4657      	mov	r7, sl
   25b50:	464e      	mov	r6, r9
   25b52:	46de      	mov	lr, fp
   25b54:	4645      	mov	r5, r8
   25b56:	b5e0      	push	{r5, r6, r7, lr}
   25b58:	b08f      	sub	sp, #60	; 0x3c
   25b5a:	001d      	movs	r5, r3
   25b5c:	0006      	movs	r6, r0
   25b5e:	000f      	movs	r7, r1
   25b60:	0014      	movs	r4, r2
   25b62:	f000 f9ff 	bl	25f64 <__ieee754_pow>
   25b66:	4bc7      	ldr	r3, [pc, #796]	; (25e84 <pow+0x338>)
   25b68:	9000      	str	r0, [sp, #0]
   25b6a:	9101      	str	r1, [sp, #4]
   25b6c:	469a      	mov	sl, r3
   25b6e:	781b      	ldrb	r3, [r3, #0]
   25b70:	b25b      	sxtb	r3, r3
   25b72:	4699      	mov	r9, r3
   25b74:	3301      	adds	r3, #1
   25b76:	d03e      	beq.n	25bf6 <pow+0xaa>
   25b78:	0022      	movs	r2, r4
   25b7a:	002b      	movs	r3, r5
   25b7c:	0020      	movs	r0, r4
   25b7e:	0029      	movs	r1, r5
   25b80:	f003 fb92 	bl	292a8 <__aeabi_dcmpun>
   25b84:	4683      	mov	fp, r0
   25b86:	2800      	cmp	r0, #0
   25b88:	d135      	bne.n	25bf6 <pow+0xaa>
   25b8a:	0032      	movs	r2, r6
   25b8c:	003b      	movs	r3, r7
   25b8e:	0030      	movs	r0, r6
   25b90:	0039      	movs	r1, r7
   25b92:	f003 fb89 	bl	292a8 <__aeabi_dcmpun>
   25b96:	2200      	movs	r2, #0
   25b98:	9003      	str	r0, [sp, #12]
   25b9a:	2800      	cmp	r0, #0
   25b9c:	d000      	beq.n	25ba0 <pow+0x54>
   25b9e:	e0b6      	b.n	25d0e <pow+0x1c2>
   25ba0:	2300      	movs	r3, #0
   25ba2:	0030      	movs	r0, r6
   25ba4:	0039      	movs	r1, r7
   25ba6:	f001 faa1 	bl	270ec <__aeabi_dcmpeq>
   25baa:	2800      	cmp	r0, #0
   25bac:	d02c      	beq.n	25c08 <pow+0xbc>
   25bae:	2200      	movs	r2, #0
   25bb0:	2300      	movs	r3, #0
   25bb2:	0020      	movs	r0, r4
   25bb4:	0029      	movs	r1, r5
   25bb6:	f001 fa99 	bl	270ec <__aeabi_dcmpeq>
   25bba:	4683      	mov	fp, r0
   25bbc:	2800      	cmp	r0, #0
   25bbe:	d100      	bne.n	25bc2 <pow+0x76>
   25bc0:	e077      	b.n	25cb2 <pow+0x166>
   25bc2:	ab04      	add	r3, sp, #16
   25bc4:	4698      	mov	r8, r3
   25bc6:	2301      	movs	r3, #1
   25bc8:	4642      	mov	r2, r8
   25bca:	9304      	str	r3, [sp, #16]
   25bcc:	4bae      	ldr	r3, [pc, #696]	; (25e88 <pow+0x33c>)
   25bce:	6053      	str	r3, [r2, #4]
   25bd0:	4643      	mov	r3, r8
   25bd2:	9a03      	ldr	r2, [sp, #12]
   25bd4:	611c      	str	r4, [r3, #16]
   25bd6:	615d      	str	r5, [r3, #20]
   25bd8:	621a      	str	r2, [r3, #32]
   25bda:	609e      	str	r6, [r3, #8]
   25bdc:	60df      	str	r7, [r3, #12]
   25bde:	4642      	mov	r2, r8
   25be0:	2300      	movs	r3, #0
   25be2:	2400      	movs	r4, #0
   25be4:	6193      	str	r3, [r2, #24]
   25be6:	61d4      	str	r4, [r2, #28]
   25be8:	464b      	mov	r3, r9
   25bea:	2b00      	cmp	r3, #0
   25bec:	d04d      	beq.n	25c8a <pow+0x13e>
   25bee:	2300      	movs	r3, #0
   25bf0:	4ca6      	ldr	r4, [pc, #664]	; (25e8c <pow+0x340>)
   25bf2:	9300      	str	r3, [sp, #0]
   25bf4:	9401      	str	r4, [sp, #4]
   25bf6:	9800      	ldr	r0, [sp, #0]
   25bf8:	9901      	ldr	r1, [sp, #4]
   25bfa:	b00f      	add	sp, #60	; 0x3c
   25bfc:	bc3c      	pop	{r2, r3, r4, r5}
   25bfe:	4690      	mov	r8, r2
   25c00:	4699      	mov	r9, r3
   25c02:	46a2      	mov	sl, r4
   25c04:	46ab      	mov	fp, r5
   25c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25c08:	9800      	ldr	r0, [sp, #0]
   25c0a:	9901      	ldr	r1, [sp, #4]
   25c0c:	f000 ffc4 	bl	26b98 <finite>
   25c10:	4681      	mov	r9, r0
   25c12:	2800      	cmp	r0, #0
   25c14:	d100      	bne.n	25c18 <pow+0xcc>
   25c16:	e09b      	b.n	25d50 <pow+0x204>
   25c18:	9800      	ldr	r0, [sp, #0]
   25c1a:	9901      	ldr	r1, [sp, #4]
   25c1c:	2200      	movs	r2, #0
   25c1e:	2300      	movs	r3, #0
   25c20:	f001 fa64 	bl	270ec <__aeabi_dcmpeq>
   25c24:	2800      	cmp	r0, #0
   25c26:	d0e6      	beq.n	25bf6 <pow+0xaa>
   25c28:	0030      	movs	r0, r6
   25c2a:	0039      	movs	r1, r7
   25c2c:	f000 ffb4 	bl	26b98 <finite>
   25c30:	2800      	cmp	r0, #0
   25c32:	d0e0      	beq.n	25bf6 <pow+0xaa>
   25c34:	0020      	movs	r0, r4
   25c36:	0029      	movs	r1, r5
   25c38:	f000 ffae 	bl	26b98 <finite>
   25c3c:	2800      	cmp	r0, #0
   25c3e:	d0da      	beq.n	25bf6 <pow+0xaa>
   25c40:	ab04      	add	r3, sp, #16
   25c42:	4698      	mov	r8, r3
   25c44:	2304      	movs	r3, #4
   25c46:	4642      	mov	r2, r8
   25c48:	9304      	str	r3, [sp, #16]
   25c4a:	4b8f      	ldr	r3, [pc, #572]	; (25e88 <pow+0x33c>)
   25c4c:	6114      	str	r4, [r2, #16]
   25c4e:	6155      	str	r5, [r2, #20]
   25c50:	6053      	str	r3, [r2, #4]
   25c52:	2300      	movs	r3, #0
   25c54:	2400      	movs	r4, #0
   25c56:	6213      	str	r3, [r2, #32]
   25c58:	2300      	movs	r3, #0
   25c5a:	6193      	str	r3, [r2, #24]
   25c5c:	61d4      	str	r4, [r2, #28]
   25c5e:	4653      	mov	r3, sl
   25c60:	781b      	ldrb	r3, [r3, #0]
   25c62:	6096      	str	r6, [r2, #8]
   25c64:	60d7      	str	r7, [r2, #12]
   25c66:	b25b      	sxtb	r3, r3
   25c68:	2b02      	cmp	r3, #2
   25c6a:	d004      	beq.n	25c76 <pow+0x12a>
   25c6c:	4640      	mov	r0, r8
   25c6e:	f000 ff9d 	bl	26bac <matherr>
   25c72:	2800      	cmp	r0, #0
   25c74:	d10e      	bne.n	25c94 <pow+0x148>
   25c76:	f003 fc71 	bl	2955c <__errno>
   25c7a:	2322      	movs	r3, #34	; 0x22
   25c7c:	6003      	str	r3, [r0, #0]
   25c7e:	e009      	b.n	25c94 <pow+0x148>
   25c80:	4642      	mov	r2, r8
   25c82:	2300      	movs	r3, #0
   25c84:	2400      	movs	r4, #0
   25c86:	6193      	str	r3, [r2, #24]
   25c88:	61d4      	str	r4, [r2, #28]
   25c8a:	4640      	mov	r0, r8
   25c8c:	f000 ff8e 	bl	26bac <matherr>
   25c90:	2800      	cmp	r0, #0
   25c92:	d037      	beq.n	25d04 <pow+0x1b8>
   25c94:	4643      	mov	r3, r8
   25c96:	6a1b      	ldr	r3, [r3, #32]
   25c98:	2b00      	cmp	r3, #0
   25c9a:	d004      	beq.n	25ca6 <pow+0x15a>
   25c9c:	f003 fc5e 	bl	2955c <__errno>
   25ca0:	4643      	mov	r3, r8
   25ca2:	6a1b      	ldr	r3, [r3, #32]
   25ca4:	6003      	str	r3, [r0, #0]
   25ca6:	4643      	mov	r3, r8
   25ca8:	69dc      	ldr	r4, [r3, #28]
   25caa:	699b      	ldr	r3, [r3, #24]
   25cac:	9300      	str	r3, [sp, #0]
   25cae:	9401      	str	r4, [sp, #4]
   25cb0:	e7a1      	b.n	25bf6 <pow+0xaa>
   25cb2:	0020      	movs	r0, r4
   25cb4:	0029      	movs	r1, r5
   25cb6:	f000 ff6f 	bl	26b98 <finite>
   25cba:	2800      	cmp	r0, #0
   25cbc:	d09b      	beq.n	25bf6 <pow+0xaa>
   25cbe:	2200      	movs	r2, #0
   25cc0:	2300      	movs	r3, #0
   25cc2:	0020      	movs	r0, r4
   25cc4:	0029      	movs	r1, r5
   25cc6:	f001 fa17 	bl	270f8 <__aeabi_dcmplt>
   25cca:	2800      	cmp	r0, #0
   25ccc:	d100      	bne.n	25cd0 <pow+0x184>
   25cce:	e792      	b.n	25bf6 <pow+0xaa>
   25cd0:	ab04      	add	r3, sp, #16
   25cd2:	4698      	mov	r8, r3
   25cd4:	2301      	movs	r3, #1
   25cd6:	4642      	mov	r2, r8
   25cd8:	9304      	str	r3, [sp, #16]
   25cda:	4b6b      	ldr	r3, [pc, #428]	; (25e88 <pow+0x33c>)
   25cdc:	6053      	str	r3, [r2, #4]
   25cde:	4643      	mov	r3, r8
   25ce0:	465a      	mov	r2, fp
   25ce2:	609e      	str	r6, [r3, #8]
   25ce4:	60df      	str	r7, [r3, #12]
   25ce6:	621a      	str	r2, [r3, #32]
   25ce8:	611c      	str	r4, [r3, #16]
   25cea:	615d      	str	r5, [r3, #20]
   25cec:	4653      	mov	r3, sl
   25cee:	781b      	ldrb	r3, [r3, #0]
   25cf0:	b25b      	sxtb	r3, r3
   25cf2:	2b00      	cmp	r3, #0
   25cf4:	d0c4      	beq.n	25c80 <pow+0x134>
   25cf6:	2000      	movs	r0, #0
   25cf8:	4642      	mov	r2, r8
   25cfa:	4965      	ldr	r1, [pc, #404]	; (25e90 <pow+0x344>)
   25cfc:	6190      	str	r0, [r2, #24]
   25cfe:	61d1      	str	r1, [r2, #28]
   25d00:	2b02      	cmp	r3, #2
   25d02:	d1c2      	bne.n	25c8a <pow+0x13e>
   25d04:	f003 fc2a 	bl	2955c <__errno>
   25d08:	2321      	movs	r3, #33	; 0x21
   25d0a:	6003      	str	r3, [r0, #0]
   25d0c:	e7c2      	b.n	25c94 <pow+0x148>
   25d0e:	2300      	movs	r3, #0
   25d10:	0020      	movs	r0, r4
   25d12:	0029      	movs	r1, r5
   25d14:	f001 f9ea 	bl	270ec <__aeabi_dcmpeq>
   25d18:	2800      	cmp	r0, #0
   25d1a:	d100      	bne.n	25d1e <pow+0x1d2>
   25d1c:	e76b      	b.n	25bf6 <pow+0xaa>
   25d1e:	ab04      	add	r3, sp, #16
   25d20:	4698      	mov	r8, r3
   25d22:	2301      	movs	r3, #1
   25d24:	4642      	mov	r2, r8
   25d26:	9304      	str	r3, [sp, #16]
   25d28:	4b57      	ldr	r3, [pc, #348]	; (25e88 <pow+0x33c>)
   25d2a:	4641      	mov	r1, r8
   25d2c:	6053      	str	r3, [r2, #4]
   25d2e:	4643      	mov	r3, r8
   25d30:	465a      	mov	r2, fp
   25d32:	621a      	str	r2, [r3, #32]
   25d34:	2200      	movs	r2, #0
   25d36:	609e      	str	r6, [r3, #8]
   25d38:	60df      	str	r7, [r3, #12]
   25d3a:	611c      	str	r4, [r3, #16]
   25d3c:	615d      	str	r5, [r3, #20]
   25d3e:	4b53      	ldr	r3, [pc, #332]	; (25e8c <pow+0x340>)
   25d40:	618a      	str	r2, [r1, #24]
   25d42:	61cb      	str	r3, [r1, #28]
   25d44:	9200      	str	r2, [sp, #0]
   25d46:	9301      	str	r3, [sp, #4]
   25d48:	464b      	mov	r3, r9
   25d4a:	2b02      	cmp	r3, #2
   25d4c:	d19d      	bne.n	25c8a <pow+0x13e>
   25d4e:	e752      	b.n	25bf6 <pow+0xaa>
   25d50:	0030      	movs	r0, r6
   25d52:	0039      	movs	r1, r7
   25d54:	f000 ff20 	bl	26b98 <finite>
   25d58:	2800      	cmp	r0, #0
   25d5a:	d100      	bne.n	25d5e <pow+0x212>
   25d5c:	e75c      	b.n	25c18 <pow+0xcc>
   25d5e:	0020      	movs	r0, r4
   25d60:	0029      	movs	r1, r5
   25d62:	f000 ff19 	bl	26b98 <finite>
   25d66:	2800      	cmp	r0, #0
   25d68:	d100      	bne.n	25d6c <pow+0x220>
   25d6a:	e755      	b.n	25c18 <pow+0xcc>
   25d6c:	9800      	ldr	r0, [sp, #0]
   25d6e:	9901      	ldr	r1, [sp, #4]
   25d70:	000b      	movs	r3, r1
   25d72:	0002      	movs	r2, r0
   25d74:	f003 fa98 	bl	292a8 <__aeabi_dcmpun>
   25d78:	ab04      	add	r3, sp, #16
   25d7a:	4698      	mov	r8, r3
   25d7c:	2800      	cmp	r0, #0
   25d7e:	d161      	bne.n	25e44 <pow+0x2f8>
   25d80:	2303      	movs	r3, #3
   25d82:	4642      	mov	r2, r8
   25d84:	9304      	str	r3, [sp, #16]
   25d86:	4b40      	ldr	r3, [pc, #256]	; (25e88 <pow+0x33c>)
   25d88:	6210      	str	r0, [r2, #32]
   25d8a:	6053      	str	r3, [r2, #4]
   25d8c:	4653      	mov	r3, sl
   25d8e:	781b      	ldrb	r3, [r3, #0]
   25d90:	6096      	str	r6, [r2, #8]
   25d92:	60d7      	str	r7, [r2, #12]
   25d94:	b25b      	sxtb	r3, r3
   25d96:	6114      	str	r4, [r2, #16]
   25d98:	6155      	str	r5, [r2, #20]
   25d9a:	4699      	mov	r9, r3
   25d9c:	2b00      	cmp	r3, #0
   25d9e:	d12f      	bne.n	25e00 <pow+0x2b4>
   25da0:	22e0      	movs	r2, #224	; 0xe0
   25da2:	4641      	mov	r1, r8
   25da4:	4b3b      	ldr	r3, [pc, #236]	; (25e94 <pow+0x348>)
   25da6:	0612      	lsls	r2, r2, #24
   25da8:	618a      	str	r2, [r1, #24]
   25daa:	61cb      	str	r3, [r1, #28]
   25dac:	0030      	movs	r0, r6
   25dae:	2200      	movs	r2, #0
   25db0:	2300      	movs	r3, #0
   25db2:	0039      	movs	r1, r7
   25db4:	f001 f9a0 	bl	270f8 <__aeabi_dcmplt>
   25db8:	2800      	cmp	r0, #0
   25dba:	d100      	bne.n	25dbe <pow+0x272>
   25dbc:	e756      	b.n	25c6c <pow+0x120>
   25dbe:	2200      	movs	r2, #0
   25dc0:	4b35      	ldr	r3, [pc, #212]	; (25e98 <pow+0x34c>)
   25dc2:	0020      	movs	r0, r4
   25dc4:	0029      	movs	r1, r5
   25dc6:	f002 fcd9 	bl	2877c <__aeabi_dmul>
   25dca:	0004      	movs	r4, r0
   25dcc:	000d      	movs	r5, r1
   25dce:	f000 fef5 	bl	26bbc <rint>
   25dd2:	0002      	movs	r2, r0
   25dd4:	000b      	movs	r3, r1
   25dd6:	0020      	movs	r0, r4
   25dd8:	0029      	movs	r1, r5
   25dda:	f001 f987 	bl	270ec <__aeabi_dcmpeq>
   25dde:	2800      	cmp	r0, #0
   25de0:	d105      	bne.n	25dee <pow+0x2a2>
   25de2:	22e0      	movs	r2, #224	; 0xe0
   25de4:	4b2d      	ldr	r3, [pc, #180]	; (25e9c <pow+0x350>)
   25de6:	0612      	lsls	r2, r2, #24
   25de8:	4641      	mov	r1, r8
   25dea:	618a      	str	r2, [r1, #24]
   25dec:	61cb      	str	r3, [r1, #28]
   25dee:	4653      	mov	r3, sl
   25df0:	781b      	ldrb	r3, [r3, #0]
   25df2:	b25b      	sxtb	r3, r3
   25df4:	4699      	mov	r9, r3
   25df6:	464b      	mov	r3, r9
   25df8:	2b02      	cmp	r3, #2
   25dfa:	d000      	beq.n	25dfe <pow+0x2b2>
   25dfc:	e736      	b.n	25c6c <pow+0x120>
   25dfe:	e73a      	b.n	25c76 <pow+0x12a>
   25e00:	2200      	movs	r2, #0
   25e02:	4641      	mov	r1, r8
   25e04:	4b26      	ldr	r3, [pc, #152]	; (25ea0 <pow+0x354>)
   25e06:	0030      	movs	r0, r6
   25e08:	618a      	str	r2, [r1, #24]
   25e0a:	61cb      	str	r3, [r1, #28]
   25e0c:	2200      	movs	r2, #0
   25e0e:	2300      	movs	r3, #0
   25e10:	0039      	movs	r1, r7
   25e12:	f001 f971 	bl	270f8 <__aeabi_dcmplt>
   25e16:	2800      	cmp	r0, #0
   25e18:	d0ed      	beq.n	25df6 <pow+0x2aa>
   25e1a:	2200      	movs	r2, #0
   25e1c:	4b1e      	ldr	r3, [pc, #120]	; (25e98 <pow+0x34c>)
   25e1e:	0020      	movs	r0, r4
   25e20:	0029      	movs	r1, r5
   25e22:	f002 fcab 	bl	2877c <__aeabi_dmul>
   25e26:	0004      	movs	r4, r0
   25e28:	000d      	movs	r5, r1
   25e2a:	f000 fec7 	bl	26bbc <rint>
   25e2e:	0002      	movs	r2, r0
   25e30:	000b      	movs	r3, r1
   25e32:	0020      	movs	r0, r4
   25e34:	0029      	movs	r1, r5
   25e36:	f001 f959 	bl	270ec <__aeabi_dcmpeq>
   25e3a:	2800      	cmp	r0, #0
   25e3c:	d1d7      	bne.n	25dee <pow+0x2a2>
   25e3e:	2200      	movs	r2, #0
   25e40:	4b13      	ldr	r3, [pc, #76]	; (25e90 <pow+0x344>)
   25e42:	e7d1      	b.n	25de8 <pow+0x29c>
   25e44:	2301      	movs	r3, #1
   25e46:	4642      	mov	r2, r8
   25e48:	9304      	str	r3, [sp, #16]
   25e4a:	4b0f      	ldr	r3, [pc, #60]	; (25e88 <pow+0x33c>)
   25e4c:	6053      	str	r3, [r2, #4]
   25e4e:	4643      	mov	r3, r8
   25e50:	464a      	mov	r2, r9
   25e52:	611c      	str	r4, [r3, #16]
   25e54:	615d      	str	r5, [r3, #20]
   25e56:	621a      	str	r2, [r3, #32]
   25e58:	609e      	str	r6, [r3, #8]
   25e5a:	60df      	str	r7, [r3, #12]
   25e5c:	2400      	movs	r4, #0
   25e5e:	4653      	mov	r3, sl
   25e60:	571c      	ldrsb	r4, [r3, r4]
   25e62:	2c00      	cmp	r4, #0
   25e64:	d100      	bne.n	25e68 <pow+0x31c>
   25e66:	e70b      	b.n	25c80 <pow+0x134>
   25e68:	2300      	movs	r3, #0
   25e6a:	2200      	movs	r2, #0
   25e6c:	0019      	movs	r1, r3
   25e6e:	0010      	movs	r0, r2
   25e70:	f002 f850 	bl	27f14 <__aeabi_ddiv>
   25e74:	4643      	mov	r3, r8
   25e76:	6198      	str	r0, [r3, #24]
   25e78:	61d9      	str	r1, [r3, #28]
   25e7a:	2c02      	cmp	r4, #2
   25e7c:	d100      	bne.n	25e80 <pow+0x334>
   25e7e:	e741      	b.n	25d04 <pow+0x1b8>
   25e80:	e703      	b.n	25c8a <pow+0x13e>
   25e82:	46c0      	nop			; (mov r8, r8)
   25e84:	20000030 	.word	0x20000030
   25e88:	0002b6b0 	.word	0x0002b6b0
   25e8c:	3ff00000 	.word	0x3ff00000
   25e90:	fff00000 	.word	0xfff00000
   25e94:	47efffff 	.word	0x47efffff
   25e98:	3fe00000 	.word	0x3fe00000
   25e9c:	c7efffff 	.word	0xc7efffff
   25ea0:	7ff00000 	.word	0x7ff00000

00025ea4 <sqrt>:
   25ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ea6:	4647      	mov	r7, r8
   25ea8:	46ce      	mov	lr, r9
   25eaa:	b580      	push	{r7, lr}
   25eac:	b08d      	sub	sp, #52	; 0x34
   25eae:	0004      	movs	r4, r0
   25eb0:	000d      	movs	r5, r1
   25eb2:	f000 fd8d 	bl	269d0 <__ieee754_sqrt>
   25eb6:	4b29      	ldr	r3, [pc, #164]	; (25f5c <sqrt+0xb8>)
   25eb8:	0006      	movs	r6, r0
   25eba:	781b      	ldrb	r3, [r3, #0]
   25ebc:	000f      	movs	r7, r1
   25ebe:	b25b      	sxtb	r3, r3
   25ec0:	4698      	mov	r8, r3
   25ec2:	3301      	adds	r3, #1
   25ec4:	d010      	beq.n	25ee8 <sqrt+0x44>
   25ec6:	0022      	movs	r2, r4
   25ec8:	002b      	movs	r3, r5
   25eca:	0020      	movs	r0, r4
   25ecc:	0029      	movs	r1, r5
   25ece:	f003 f9eb 	bl	292a8 <__aeabi_dcmpun>
   25ed2:	4681      	mov	r9, r0
   25ed4:	2800      	cmp	r0, #0
   25ed6:	d107      	bne.n	25ee8 <sqrt+0x44>
   25ed8:	2200      	movs	r2, #0
   25eda:	2300      	movs	r3, #0
   25edc:	0020      	movs	r0, r4
   25ede:	0029      	movs	r1, r5
   25ee0:	f001 f90a 	bl	270f8 <__aeabi_dcmplt>
   25ee4:	2800      	cmp	r0, #0
   25ee6:	d106      	bne.n	25ef6 <sqrt+0x52>
   25ee8:	0030      	movs	r0, r6
   25eea:	0039      	movs	r1, r7
   25eec:	b00d      	add	sp, #52	; 0x34
   25eee:	bc0c      	pop	{r2, r3}
   25ef0:	4690      	mov	r8, r2
   25ef2:	4699      	mov	r9, r3
   25ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25ef6:	2301      	movs	r3, #1
   25ef8:	9302      	str	r3, [sp, #8]
   25efa:	4b19      	ldr	r3, [pc, #100]	; (25f60 <sqrt+0xbc>)
   25efc:	9406      	str	r4, [sp, #24]
   25efe:	9507      	str	r5, [sp, #28]
   25f00:	9303      	str	r3, [sp, #12]
   25f02:	464b      	mov	r3, r9
   25f04:	930a      	str	r3, [sp, #40]	; 0x28
   25f06:	4643      	mov	r3, r8
   25f08:	9404      	str	r4, [sp, #16]
   25f0a:	9505      	str	r5, [sp, #20]
   25f0c:	2b00      	cmp	r3, #0
   25f0e:	d015      	beq.n	25f3c <sqrt+0x98>
   25f10:	2300      	movs	r3, #0
   25f12:	2200      	movs	r2, #0
   25f14:	0019      	movs	r1, r3
   25f16:	0010      	movs	r0, r2
   25f18:	f001 fffc 	bl	27f14 <__aeabi_ddiv>
   25f1c:	4643      	mov	r3, r8
   25f1e:	9008      	str	r0, [sp, #32]
   25f20:	9109      	str	r1, [sp, #36]	; 0x24
   25f22:	2b02      	cmp	r3, #2
   25f24:	d10e      	bne.n	25f44 <sqrt+0xa0>
   25f26:	f003 fb19 	bl	2955c <__errno>
   25f2a:	2321      	movs	r3, #33	; 0x21
   25f2c:	6003      	str	r3, [r0, #0]
   25f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25f30:	9301      	str	r3, [sp, #4]
   25f32:	2b00      	cmp	r3, #0
   25f34:	d10c      	bne.n	25f50 <sqrt+0xac>
   25f36:	9e08      	ldr	r6, [sp, #32]
   25f38:	9f09      	ldr	r7, [sp, #36]	; 0x24
   25f3a:	e7d5      	b.n	25ee8 <sqrt+0x44>
   25f3c:	2300      	movs	r3, #0
   25f3e:	2400      	movs	r4, #0
   25f40:	9308      	str	r3, [sp, #32]
   25f42:	9409      	str	r4, [sp, #36]	; 0x24
   25f44:	a802      	add	r0, sp, #8
   25f46:	f000 fe31 	bl	26bac <matherr>
   25f4a:	2800      	cmp	r0, #0
   25f4c:	d1ef      	bne.n	25f2e <sqrt+0x8a>
   25f4e:	e7ea      	b.n	25f26 <sqrt+0x82>
   25f50:	f003 fb04 	bl	2955c <__errno>
   25f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25f56:	9301      	str	r3, [sp, #4]
   25f58:	6003      	str	r3, [r0, #0]
   25f5a:	e7ec      	b.n	25f36 <sqrt+0x92>
   25f5c:	20000030 	.word	0x20000030
   25f60:	0002b6b4 	.word	0x0002b6b4

00025f64 <__ieee754_pow>:
   25f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f66:	4657      	mov	r7, sl
   25f68:	464e      	mov	r6, r9
   25f6a:	4645      	mov	r5, r8
   25f6c:	46de      	mov	lr, fp
   25f6e:	001c      	movs	r4, r3
   25f70:	0013      	movs	r3, r2
   25f72:	b5e0      	push	{r5, r6, r7, lr}
   25f74:	0065      	lsls	r5, r4, #1
   25f76:	b091      	sub	sp, #68	; 0x44
   25f78:	086d      	lsrs	r5, r5, #1
   25f7a:	9300      	str	r3, [sp, #0]
   25f7c:	9401      	str	r4, [sp, #4]
   25f7e:	0007      	movs	r7, r0
   25f80:	000e      	movs	r6, r1
   25f82:	4680      	mov	r8, r0
   25f84:	4689      	mov	r9, r1
   25f86:	46a2      	mov	sl, r4
   25f88:	432b      	orrs	r3, r5
   25f8a:	d031      	beq.n	25ff0 <__ieee754_pow+0x8c>
   25f8c:	4b67      	ldr	r3, [pc, #412]	; (2612c <__ieee754_pow+0x1c8>)
   25f8e:	0074      	lsls	r4, r6, #1
   25f90:	0864      	lsrs	r4, r4, #1
   25f92:	429c      	cmp	r4, r3
   25f94:	dc27      	bgt.n	25fe6 <__ieee754_pow+0x82>
   25f96:	d024      	beq.n	25fe2 <__ieee754_pow+0x7e>
   25f98:	429d      	cmp	r5, r3
   25f9a:	dc24      	bgt.n	25fe6 <__ieee754_pow+0x82>
   25f9c:	4b63      	ldr	r3, [pc, #396]	; (2612c <__ieee754_pow+0x1c8>)
   25f9e:	429d      	cmp	r5, r3
   25fa0:	d100      	bne.n	25fa4 <__ieee754_pow+0x40>
   25fa2:	e081      	b.n	260a8 <__ieee754_pow+0x144>
   25fa4:	2300      	movs	r3, #0
   25fa6:	469b      	mov	fp, r3
   25fa8:	464b      	mov	r3, r9
   25faa:	2b00      	cmp	r3, #0
   25fac:	da00      	bge.n	25fb0 <__ieee754_pow+0x4c>
   25fae:	e07f      	b.n	260b0 <__ieee754_pow+0x14c>
   25fb0:	2a00      	cmp	r2, #0
   25fb2:	d12c      	bne.n	2600e <__ieee754_pow+0xaa>
   25fb4:	4b5d      	ldr	r3, [pc, #372]	; (2612c <__ieee754_pow+0x1c8>)
   25fb6:	429d      	cmp	r5, r3
   25fb8:	d100      	bne.n	25fbc <__ieee754_pow+0x58>
   25fba:	e097      	b.n	260ec <__ieee754_pow+0x188>
   25fbc:	4b5c      	ldr	r3, [pc, #368]	; (26130 <__ieee754_pow+0x1cc>)
   25fbe:	429d      	cmp	r5, r3
   25fc0:	d066      	beq.n	26090 <__ieee754_pow+0x12c>
   25fc2:	2380      	movs	r3, #128	; 0x80
   25fc4:	05db      	lsls	r3, r3, #23
   25fc6:	459a      	cmp	sl, r3
   25fc8:	d100      	bne.n	25fcc <__ieee754_pow+0x68>
   25fca:	e3b9      	b.n	26740 <__ieee754_pow+0x7dc>
   25fcc:	4b59      	ldr	r3, [pc, #356]	; (26134 <__ieee754_pow+0x1d0>)
   25fce:	459a      	cmp	sl, r3
   25fd0:	d11d      	bne.n	2600e <__ieee754_pow+0xaa>
   25fd2:	464b      	mov	r3, r9
   25fd4:	2b00      	cmp	r3, #0
   25fd6:	db1a      	blt.n	2600e <__ieee754_pow+0xaa>
   25fd8:	0038      	movs	r0, r7
   25fda:	0031      	movs	r1, r6
   25fdc:	f000 fcf8 	bl	269d0 <__ieee754_sqrt>
   25fe0:	e008      	b.n	25ff4 <__ieee754_pow+0x90>
   25fe2:	2800      	cmp	r0, #0
   25fe4:	d00d      	beq.n	26002 <__ieee754_pow+0x9e>
   25fe6:	4b54      	ldr	r3, [pc, #336]	; (26138 <__ieee754_pow+0x1d4>)
   25fe8:	469c      	mov	ip, r3
   25fea:	4464      	add	r4, ip
   25fec:	4327      	orrs	r7, r4
   25fee:	d10a      	bne.n	26006 <__ieee754_pow+0xa2>
   25ff0:	2000      	movs	r0, #0
   25ff2:	494f      	ldr	r1, [pc, #316]	; (26130 <__ieee754_pow+0x1cc>)
   25ff4:	b011      	add	sp, #68	; 0x44
   25ff6:	bc3c      	pop	{r2, r3, r4, r5}
   25ff8:	4690      	mov	r8, r2
   25ffa:	4699      	mov	r9, r3
   25ffc:	46a2      	mov	sl, r4
   25ffe:	46ab      	mov	fp, r5
   26000:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26002:	42a5      	cmp	r5, r4
   26004:	ddca      	ble.n	25f9c <__ieee754_pow+0x38>
   26006:	484d      	ldr	r0, [pc, #308]	; (2613c <__ieee754_pow+0x1d8>)
   26008:	f000 fdd2 	bl	26bb0 <nan>
   2600c:	e7f2      	b.n	25ff4 <__ieee754_pow+0x90>
   2600e:	0038      	movs	r0, r7
   26010:	0031      	movs	r1, r6
   26012:	f000 fdbd 	bl	26b90 <fabs>
   26016:	4643      	mov	r3, r8
   26018:	2b00      	cmp	r3, #0
   2601a:	d11d      	bne.n	26058 <__ieee754_pow+0xf4>
   2601c:	2c00      	cmp	r4, #0
   2601e:	d004      	beq.n	2602a <__ieee754_pow+0xc6>
   26020:	4a43      	ldr	r2, [pc, #268]	; (26130 <__ieee754_pow+0x1cc>)
   26022:	00b3      	lsls	r3, r6, #2
   26024:	089b      	lsrs	r3, r3, #2
   26026:	4293      	cmp	r3, r2
   26028:	d116      	bne.n	26058 <__ieee754_pow+0xf4>
   2602a:	4653      	mov	r3, sl
   2602c:	2b00      	cmp	r3, #0
   2602e:	da00      	bge.n	26032 <__ieee754_pow+0xce>
   26030:	e3c5      	b.n	267be <__ieee754_pow+0x85a>
   26032:	464b      	mov	r3, r9
   26034:	2b00      	cmp	r3, #0
   26036:	dadd      	bge.n	25ff4 <__ieee754_pow+0x90>
   26038:	4b3f      	ldr	r3, [pc, #252]	; (26138 <__ieee754_pow+0x1d4>)
   2603a:	469c      	mov	ip, r3
   2603c:	465b      	mov	r3, fp
   2603e:	4464      	add	r4, ip
   26040:	431c      	orrs	r4, r3
   26042:	d101      	bne.n	26048 <__ieee754_pow+0xe4>
   26044:	f000 fc53 	bl	268ee <__ieee754_pow+0x98a>
   26048:	465b      	mov	r3, fp
   2604a:	2b01      	cmp	r3, #1
   2604c:	d1d2      	bne.n	25ff4 <__ieee754_pow+0x90>
   2604e:	2480      	movs	r4, #128	; 0x80
   26050:	0624      	lsls	r4, r4, #24
   26052:	190b      	adds	r3, r1, r4
   26054:	0019      	movs	r1, r3
   26056:	e7cd      	b.n	25ff4 <__ieee754_pow+0x90>
   26058:	0ff3      	lsrs	r3, r6, #31
   2605a:	3b01      	subs	r3, #1
   2605c:	4698      	mov	r8, r3
   2605e:	465b      	mov	r3, fp
   26060:	4642      	mov	r2, r8
   26062:	4313      	orrs	r3, r2
   26064:	d057      	beq.n	26116 <__ieee754_pow+0x1b2>
   26066:	4b36      	ldr	r3, [pc, #216]	; (26140 <__ieee754_pow+0x1dc>)
   26068:	429d      	cmp	r5, r3
   2606a:	dd77      	ble.n	2615c <__ieee754_pow+0x1f8>
   2606c:	4b35      	ldr	r3, [pc, #212]	; (26144 <__ieee754_pow+0x1e0>)
   2606e:	429d      	cmp	r5, r3
   26070:	dc00      	bgt.n	26074 <__ieee754_pow+0x110>
   26072:	e3b1      	b.n	267d8 <__ieee754_pow+0x874>
   26074:	4b34      	ldr	r3, [pc, #208]	; (26148 <__ieee754_pow+0x1e4>)
   26076:	429c      	cmp	r4, r3
   26078:	dc00      	bgt.n	2607c <__ieee754_pow+0x118>
   2607a:	e3a8      	b.n	267ce <__ieee754_pow+0x86a>
   2607c:	4653      	mov	r3, sl
   2607e:	2b00      	cmp	r3, #0
   26080:	dd43      	ble.n	2610a <__ieee754_pow+0x1a6>
   26082:	4a32      	ldr	r2, [pc, #200]	; (2614c <__ieee754_pow+0x1e8>)
   26084:	4b32      	ldr	r3, [pc, #200]	; (26150 <__ieee754_pow+0x1ec>)
   26086:	0010      	movs	r0, r2
   26088:	0019      	movs	r1, r3
   2608a:	f002 fb77 	bl	2877c <__aeabi_dmul>
   2608e:	e7b1      	b.n	25ff4 <__ieee754_pow+0x90>
   26090:	4653      	mov	r3, sl
   26092:	0038      	movs	r0, r7
   26094:	0031      	movs	r1, r6
   26096:	2b00      	cmp	r3, #0
   26098:	daac      	bge.n	25ff4 <__ieee754_pow+0x90>
   2609a:	003a      	movs	r2, r7
   2609c:	0033      	movs	r3, r6
   2609e:	2000      	movs	r0, #0
   260a0:	4923      	ldr	r1, [pc, #140]	; (26130 <__ieee754_pow+0x1cc>)
   260a2:	f001 ff37 	bl	27f14 <__aeabi_ddiv>
   260a6:	e7a5      	b.n	25ff4 <__ieee754_pow+0x90>
   260a8:	2a00      	cmp	r2, #0
   260aa:	d100      	bne.n	260ae <__ieee754_pow+0x14a>
   260ac:	e77a      	b.n	25fa4 <__ieee754_pow+0x40>
   260ae:	e79a      	b.n	25fe6 <__ieee754_pow+0x82>
   260b0:	4b28      	ldr	r3, [pc, #160]	; (26154 <__ieee754_pow+0x1f0>)
   260b2:	429d      	cmp	r5, r3
   260b4:	dc2c      	bgt.n	26110 <__ieee754_pow+0x1ac>
   260b6:	4b24      	ldr	r3, [pc, #144]	; (26148 <__ieee754_pow+0x1e4>)
   260b8:	429d      	cmp	r5, r3
   260ba:	dc00      	bgt.n	260be <__ieee754_pow+0x15a>
   260bc:	e778      	b.n	25fb0 <__ieee754_pow+0x4c>
   260be:	4926      	ldr	r1, [pc, #152]	; (26158 <__ieee754_pow+0x1f4>)
   260c0:	152b      	asrs	r3, r5, #20
   260c2:	468c      	mov	ip, r1
   260c4:	4463      	add	r3, ip
   260c6:	2b14      	cmp	r3, #20
   260c8:	dc01      	bgt.n	260ce <__ieee754_pow+0x16a>
   260ca:	f000 fbf3 	bl	268b4 <__ieee754_pow+0x950>
   260ce:	2134      	movs	r1, #52	; 0x34
   260d0:	1acb      	subs	r3, r1, r3
   260d2:	9900      	ldr	r1, [sp, #0]
   260d4:	40d9      	lsrs	r1, r3
   260d6:	0008      	movs	r0, r1
   260d8:	4098      	lsls	r0, r3
   260da:	4282      	cmp	r2, r0
   260dc:	d000      	beq.n	260e0 <__ieee754_pow+0x17c>
   260de:	e767      	b.n	25fb0 <__ieee754_pow+0x4c>
   260e0:	2301      	movs	r3, #1
   260e2:	4019      	ands	r1, r3
   260e4:	3301      	adds	r3, #1
   260e6:	1a5b      	subs	r3, r3, r1
   260e8:	469b      	mov	fp, r3
   260ea:	e761      	b.n	25fb0 <__ieee754_pow+0x4c>
   260ec:	4b12      	ldr	r3, [pc, #72]	; (26138 <__ieee754_pow+0x1d4>)
   260ee:	18e3      	adds	r3, r4, r3
   260f0:	431f      	orrs	r7, r3
   260f2:	d100      	bne.n	260f6 <__ieee754_pow+0x192>
   260f4:	e77c      	b.n	25ff0 <__ieee754_pow+0x8c>
   260f6:	4b14      	ldr	r3, [pc, #80]	; (26148 <__ieee754_pow+0x1e4>)
   260f8:	429c      	cmp	r4, r3
   260fa:	dc00      	bgt.n	260fe <__ieee754_pow+0x19a>
   260fc:	e327      	b.n	2674e <__ieee754_pow+0x7ea>
   260fe:	9800      	ldr	r0, [sp, #0]
   26100:	9901      	ldr	r1, [sp, #4]
   26102:	4653      	mov	r3, sl
   26104:	2b00      	cmp	r3, #0
   26106:	db00      	blt.n	2610a <__ieee754_pow+0x1a6>
   26108:	e774      	b.n	25ff4 <__ieee754_pow+0x90>
   2610a:	2000      	movs	r0, #0
   2610c:	2100      	movs	r1, #0
   2610e:	e771      	b.n	25ff4 <__ieee754_pow+0x90>
   26110:	2302      	movs	r3, #2
   26112:	469b      	mov	fp, r3
   26114:	e74c      	b.n	25fb0 <__ieee754_pow+0x4c>
   26116:	003a      	movs	r2, r7
   26118:	0033      	movs	r3, r6
   2611a:	0038      	movs	r0, r7
   2611c:	0031      	movs	r1, r6
   2611e:	f002 fdad 	bl	28c7c <__aeabi_dsub>
   26122:	0002      	movs	r2, r0
   26124:	000b      	movs	r3, r1
   26126:	f001 fef5 	bl	27f14 <__aeabi_ddiv>
   2612a:	e763      	b.n	25ff4 <__ieee754_pow+0x90>
   2612c:	7ff00000 	.word	0x7ff00000
   26130:	3ff00000 	.word	0x3ff00000
   26134:	3fe00000 	.word	0x3fe00000
   26138:	c0100000 	.word	0xc0100000
   2613c:	0002b6b8 	.word	0x0002b6b8
   26140:	41e00000 	.word	0x41e00000
   26144:	43f00000 	.word	0x43f00000
   26148:	3fefffff 	.word	0x3fefffff
   2614c:	8800759c 	.word	0x8800759c
   26150:	7e37e43c 	.word	0x7e37e43c
   26154:	433fffff 	.word	0x433fffff
   26158:	fffffc01 	.word	0xfffffc01
   2615c:	4be9      	ldr	r3, [pc, #932]	; (26504 <__ieee754_pow+0x5a0>)
   2615e:	2200      	movs	r2, #0
   26160:	429c      	cmp	r4, r3
   26162:	dc06      	bgt.n	26172 <__ieee754_pow+0x20e>
   26164:	2200      	movs	r2, #0
   26166:	4be8      	ldr	r3, [pc, #928]	; (26508 <__ieee754_pow+0x5a4>)
   26168:	f002 fb08 	bl	2877c <__aeabi_dmul>
   2616c:	2235      	movs	r2, #53	; 0x35
   2616e:	000c      	movs	r4, r1
   26170:	4252      	negs	r2, r2
   26172:	4de6      	ldr	r5, [pc, #920]	; (2650c <__ieee754_pow+0x5a8>)
   26174:	1523      	asrs	r3, r4, #20
   26176:	46ac      	mov	ip, r5
   26178:	4463      	add	r3, ip
   2617a:	4699      	mov	r9, r3
   2617c:	0324      	lsls	r4, r4, #12
   2617e:	4de4      	ldr	r5, [pc, #912]	; (26510 <__ieee754_pow+0x5ac>)
   26180:	4be4      	ldr	r3, [pc, #912]	; (26514 <__ieee754_pow+0x5b0>)
   26182:	0b24      	lsrs	r4, r4, #12
   26184:	4491      	add	r9, r2
   26186:	4325      	orrs	r5, r4
   26188:	429c      	cmp	r4, r3
   2618a:	dd09      	ble.n	261a0 <__ieee754_pow+0x23c>
   2618c:	4be2      	ldr	r3, [pc, #904]	; (26518 <__ieee754_pow+0x5b4>)
   2618e:	429c      	cmp	r4, r3
   26190:	dc00      	bgt.n	26194 <__ieee754_pow+0x230>
   26192:	e3b6      	b.n	26902 <__ieee754_pow+0x99e>
   26194:	2301      	movs	r3, #1
   26196:	469c      	mov	ip, r3
   26198:	4be0      	ldr	r3, [pc, #896]	; (2651c <__ieee754_pow+0x5b8>)
   2619a:	44e1      	add	r9, ip
   2619c:	469c      	mov	ip, r3
   2619e:	4465      	add	r5, ip
   261a0:	2300      	movs	r3, #0
   261a2:	2400      	movs	r4, #0
   261a4:	2200      	movs	r2, #0
   261a6:	9308      	str	r3, [sp, #32]
   261a8:	9409      	str	r4, [sp, #36]	; 0x24
   261aa:	930c      	str	r3, [sp, #48]	; 0x30
   261ac:	940d      	str	r4, [sp, #52]	; 0x34
   261ae:	2400      	movs	r4, #0
   261b0:	4bd7      	ldr	r3, [pc, #860]	; (26510 <__ieee754_pow+0x5ac>)
   261b2:	9206      	str	r2, [sp, #24]
   261b4:	9307      	str	r3, [sp, #28]
   261b6:	9a06      	ldr	r2, [sp, #24]
   261b8:	9b07      	ldr	r3, [sp, #28]
   261ba:	0029      	movs	r1, r5
   261bc:	900a      	str	r0, [sp, #40]	; 0x28
   261be:	910b      	str	r1, [sp, #44]	; 0x2c
   261c0:	f002 fd5c 	bl	28c7c <__aeabi_dsub>
   261c4:	9a06      	ldr	r2, [sp, #24]
   261c6:	9b07      	ldr	r3, [sp, #28]
   261c8:	0006      	movs	r6, r0
   261ca:	000f      	movs	r7, r1
   261cc:	980a      	ldr	r0, [sp, #40]	; 0x28
   261ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   261d0:	f001 fb90 	bl	278f4 <__aeabi_dadd>
   261d4:	0002      	movs	r2, r0
   261d6:	000b      	movs	r3, r1
   261d8:	2000      	movs	r0, #0
   261da:	49cd      	ldr	r1, [pc, #820]	; (26510 <__ieee754_pow+0x5ac>)
   261dc:	f001 fe9a 	bl	27f14 <__aeabi_ddiv>
   261e0:	000a      	movs	r2, r1
   261e2:	0001      	movs	r1, r0
   261e4:	0013      	movs	r3, r2
   261e6:	910e      	str	r1, [sp, #56]	; 0x38
   261e8:	920f      	str	r2, [sp, #60]	; 0x3c
   261ea:	0002      	movs	r2, r0
   261ec:	0039      	movs	r1, r7
   261ee:	0030      	movs	r0, r6
   261f0:	f002 fac4 	bl	2877c <__aeabi_dmul>
   261f4:	000a      	movs	r2, r1
   261f6:	0001      	movs	r1, r0
   261f8:	2080      	movs	r0, #128	; 0x80
   261fa:	9104      	str	r1, [sp, #16]
   261fc:	9205      	str	r2, [sp, #20]
   261fe:	0013      	movs	r3, r2
   26200:	2200      	movs	r2, #0
   26202:	1069      	asrs	r1, r5, #1
   26204:	2580      	movs	r5, #128	; 0x80
   26206:	0300      	lsls	r0, r0, #12
   26208:	4684      	mov	ip, r0
   2620a:	9202      	str	r2, [sp, #8]
   2620c:	9303      	str	r3, [sp, #12]
   2620e:	2200      	movs	r2, #0
   26210:	05ad      	lsls	r5, r5, #22
   26212:	430d      	orrs	r5, r1
   26214:	4465      	add	r5, ip
   26216:	192b      	adds	r3, r5, r4
   26218:	9802      	ldr	r0, [sp, #8]
   2621a:	9903      	ldr	r1, [sp, #12]
   2621c:	0014      	movs	r4, r2
   2621e:	001d      	movs	r5, r3
   26220:	f002 faac 	bl	2877c <__aeabi_dmul>
   26224:	0002      	movs	r2, r0
   26226:	000b      	movs	r3, r1
   26228:	0030      	movs	r0, r6
   2622a:	0039      	movs	r1, r7
   2622c:	f002 fd26 	bl	28c7c <__aeabi_dsub>
   26230:	9a06      	ldr	r2, [sp, #24]
   26232:	9b07      	ldr	r3, [sp, #28]
   26234:	0006      	movs	r6, r0
   26236:	000f      	movs	r7, r1
   26238:	0020      	movs	r0, r4
   2623a:	0029      	movs	r1, r5
   2623c:	f002 fd1e 	bl	28c7c <__aeabi_dsub>
   26240:	0002      	movs	r2, r0
   26242:	000b      	movs	r3, r1
   26244:	980a      	ldr	r0, [sp, #40]	; 0x28
   26246:	990b      	ldr	r1, [sp, #44]	; 0x2c
   26248:	f002 fd18 	bl	28c7c <__aeabi_dsub>
   2624c:	9a02      	ldr	r2, [sp, #8]
   2624e:	9b03      	ldr	r3, [sp, #12]
   26250:	f002 fa94 	bl	2877c <__aeabi_dmul>
   26254:	0002      	movs	r2, r0
   26256:	000b      	movs	r3, r1
   26258:	0030      	movs	r0, r6
   2625a:	0039      	movs	r1, r7
   2625c:	f002 fd0e 	bl	28c7c <__aeabi_dsub>
   26260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26264:	f002 fa8a 	bl	2877c <__aeabi_dmul>
   26268:	9d04      	ldr	r5, [sp, #16]
   2626a:	9e05      	ldr	r6, [sp, #20]
   2626c:	9006      	str	r0, [sp, #24]
   2626e:	9107      	str	r1, [sp, #28]
   26270:	002a      	movs	r2, r5
   26272:	0033      	movs	r3, r6
   26274:	0028      	movs	r0, r5
   26276:	0031      	movs	r1, r6
   26278:	f002 fa80 	bl	2877c <__aeabi_dmul>
   2627c:	0006      	movs	r6, r0
   2627e:	000f      	movs	r7, r1
   26280:	4aa7      	ldr	r2, [pc, #668]	; (26520 <__ieee754_pow+0x5bc>)
   26282:	4ba8      	ldr	r3, [pc, #672]	; (26524 <__ieee754_pow+0x5c0>)
   26284:	f002 fa7a 	bl	2877c <__aeabi_dmul>
   26288:	4aa7      	ldr	r2, [pc, #668]	; (26528 <__ieee754_pow+0x5c4>)
   2628a:	4ba8      	ldr	r3, [pc, #672]	; (2652c <__ieee754_pow+0x5c8>)
   2628c:	f001 fb32 	bl	278f4 <__aeabi_dadd>
   26290:	0032      	movs	r2, r6
   26292:	003b      	movs	r3, r7
   26294:	f002 fa72 	bl	2877c <__aeabi_dmul>
   26298:	4aa5      	ldr	r2, [pc, #660]	; (26530 <__ieee754_pow+0x5cc>)
   2629a:	4ba6      	ldr	r3, [pc, #664]	; (26534 <__ieee754_pow+0x5d0>)
   2629c:	f001 fb2a 	bl	278f4 <__aeabi_dadd>
   262a0:	0032      	movs	r2, r6
   262a2:	003b      	movs	r3, r7
   262a4:	f002 fa6a 	bl	2877c <__aeabi_dmul>
   262a8:	4aa3      	ldr	r2, [pc, #652]	; (26538 <__ieee754_pow+0x5d4>)
   262aa:	4ba4      	ldr	r3, [pc, #656]	; (2653c <__ieee754_pow+0x5d8>)
   262ac:	f001 fb22 	bl	278f4 <__aeabi_dadd>
   262b0:	0032      	movs	r2, r6
   262b2:	003b      	movs	r3, r7
   262b4:	f002 fa62 	bl	2877c <__aeabi_dmul>
   262b8:	4aa1      	ldr	r2, [pc, #644]	; (26540 <__ieee754_pow+0x5dc>)
   262ba:	4ba2      	ldr	r3, [pc, #648]	; (26544 <__ieee754_pow+0x5e0>)
   262bc:	f001 fb1a 	bl	278f4 <__aeabi_dadd>
   262c0:	0032      	movs	r2, r6
   262c2:	003b      	movs	r3, r7
   262c4:	f002 fa5a 	bl	2877c <__aeabi_dmul>
   262c8:	4a9f      	ldr	r2, [pc, #636]	; (26548 <__ieee754_pow+0x5e4>)
   262ca:	4ba0      	ldr	r3, [pc, #640]	; (2654c <__ieee754_pow+0x5e8>)
   262cc:	f001 fb12 	bl	278f4 <__aeabi_dadd>
   262d0:	0032      	movs	r2, r6
   262d2:	0004      	movs	r4, r0
   262d4:	000d      	movs	r5, r1
   262d6:	003b      	movs	r3, r7
   262d8:	0030      	movs	r0, r6
   262da:	0039      	movs	r1, r7
   262dc:	f002 fa4e 	bl	2877c <__aeabi_dmul>
   262e0:	0002      	movs	r2, r0
   262e2:	000b      	movs	r3, r1
   262e4:	0020      	movs	r0, r4
   262e6:	0029      	movs	r1, r5
   262e8:	f002 fa48 	bl	2877c <__aeabi_dmul>
   262ec:	9e02      	ldr	r6, [sp, #8]
   262ee:	9f03      	ldr	r7, [sp, #12]
   262f0:	0004      	movs	r4, r0
   262f2:	000d      	movs	r5, r1
   262f4:	9804      	ldr	r0, [sp, #16]
   262f6:	9905      	ldr	r1, [sp, #20]
   262f8:	0032      	movs	r2, r6
   262fa:	003b      	movs	r3, r7
   262fc:	f001 fafa 	bl	278f4 <__aeabi_dadd>
   26300:	9a06      	ldr	r2, [sp, #24]
   26302:	9b07      	ldr	r3, [sp, #28]
   26304:	f002 fa3a 	bl	2877c <__aeabi_dmul>
   26308:	0022      	movs	r2, r4
   2630a:	002b      	movs	r3, r5
   2630c:	f001 faf2 	bl	278f4 <__aeabi_dadd>
   26310:	0032      	movs	r2, r6
   26312:	900a      	str	r0, [sp, #40]	; 0x28
   26314:	910b      	str	r1, [sp, #44]	; 0x2c
   26316:	003b      	movs	r3, r7
   26318:	0030      	movs	r0, r6
   2631a:	0039      	movs	r1, r7
   2631c:	9602      	str	r6, [sp, #8]
   2631e:	9703      	str	r7, [sp, #12]
   26320:	f002 fa2c 	bl	2877c <__aeabi_dmul>
   26324:	2200      	movs	r2, #0
   26326:	4b8a      	ldr	r3, [pc, #552]	; (26550 <__ieee754_pow+0x5ec>)
   26328:	0004      	movs	r4, r0
   2632a:	000d      	movs	r5, r1
   2632c:	f001 fae2 	bl	278f4 <__aeabi_dadd>
   26330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26334:	f001 fade 	bl	278f4 <__aeabi_dadd>
   26338:	2600      	movs	r6, #0
   2633a:	000f      	movs	r7, r1
   2633c:	0032      	movs	r2, r6
   2633e:	000b      	movs	r3, r1
   26340:	9802      	ldr	r0, [sp, #8]
   26342:	9903      	ldr	r1, [sp, #12]
   26344:	f002 fa1a 	bl	2877c <__aeabi_dmul>
   26348:	2200      	movs	r2, #0
   2634a:	9002      	str	r0, [sp, #8]
   2634c:	9103      	str	r1, [sp, #12]
   2634e:	4b80      	ldr	r3, [pc, #512]	; (26550 <__ieee754_pow+0x5ec>)
   26350:	0030      	movs	r0, r6
   26352:	0039      	movs	r1, r7
   26354:	f002 fc92 	bl	28c7c <__aeabi_dsub>
   26358:	0022      	movs	r2, r4
   2635a:	002b      	movs	r3, r5
   2635c:	f002 fc8e 	bl	28c7c <__aeabi_dsub>
   26360:	0002      	movs	r2, r0
   26362:	000b      	movs	r3, r1
   26364:	980a      	ldr	r0, [sp, #40]	; 0x28
   26366:	990b      	ldr	r1, [sp, #44]	; 0x2c
   26368:	f002 fc88 	bl	28c7c <__aeabi_dsub>
   2636c:	9a04      	ldr	r2, [sp, #16]
   2636e:	9b05      	ldr	r3, [sp, #20]
   26370:	f002 fa04 	bl	2877c <__aeabi_dmul>
   26374:	0032      	movs	r2, r6
   26376:	0004      	movs	r4, r0
   26378:	000d      	movs	r5, r1
   2637a:	9806      	ldr	r0, [sp, #24]
   2637c:	9907      	ldr	r1, [sp, #28]
   2637e:	003b      	movs	r3, r7
   26380:	f002 f9fc 	bl	2877c <__aeabi_dmul>
   26384:	0002      	movs	r2, r0
   26386:	000b      	movs	r3, r1
   26388:	0020      	movs	r0, r4
   2638a:	0029      	movs	r1, r5
   2638c:	f001 fab2 	bl	278f4 <__aeabi_dadd>
   26390:	0004      	movs	r4, r0
   26392:	000d      	movs	r5, r1
   26394:	0002      	movs	r2, r0
   26396:	000b      	movs	r3, r1
   26398:	9802      	ldr	r0, [sp, #8]
   2639a:	9903      	ldr	r1, [sp, #12]
   2639c:	f001 faaa 	bl	278f4 <__aeabi_dadd>
   263a0:	2600      	movs	r6, #0
   263a2:	22e0      	movs	r2, #224	; 0xe0
   263a4:	4b6b      	ldr	r3, [pc, #428]	; (26554 <__ieee754_pow+0x5f0>)
   263a6:	0612      	lsls	r2, r2, #24
   263a8:	0030      	movs	r0, r6
   263aa:	000f      	movs	r7, r1
   263ac:	f002 f9e6 	bl	2877c <__aeabi_dmul>
   263b0:	9a02      	ldr	r2, [sp, #8]
   263b2:	9b03      	ldr	r3, [sp, #12]
   263b4:	9004      	str	r0, [sp, #16]
   263b6:	9105      	str	r1, [sp, #20]
   263b8:	0030      	movs	r0, r6
   263ba:	0039      	movs	r1, r7
   263bc:	f002 fc5e 	bl	28c7c <__aeabi_dsub>
   263c0:	0002      	movs	r2, r0
   263c2:	000b      	movs	r3, r1
   263c4:	0020      	movs	r0, r4
   263c6:	0029      	movs	r1, r5
   263c8:	f002 fc58 	bl	28c7c <__aeabi_dsub>
   263cc:	4a62      	ldr	r2, [pc, #392]	; (26558 <__ieee754_pow+0x5f4>)
   263ce:	4b61      	ldr	r3, [pc, #388]	; (26554 <__ieee754_pow+0x5f0>)
   263d0:	f002 f9d4 	bl	2877c <__aeabi_dmul>
   263d4:	4a61      	ldr	r2, [pc, #388]	; (2655c <__ieee754_pow+0x5f8>)
   263d6:	0004      	movs	r4, r0
   263d8:	000d      	movs	r5, r1
   263da:	4b61      	ldr	r3, [pc, #388]	; (26560 <__ieee754_pow+0x5fc>)
   263dc:	0030      	movs	r0, r6
   263de:	0039      	movs	r1, r7
   263e0:	f002 f9cc 	bl	2877c <__aeabi_dmul>
   263e4:	0002      	movs	r2, r0
   263e6:	000b      	movs	r3, r1
   263e8:	0020      	movs	r0, r4
   263ea:	0029      	movs	r1, r5
   263ec:	f001 fa82 	bl	278f4 <__aeabi_dadd>
   263f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   263f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   263f4:	f001 fa7e 	bl	278f4 <__aeabi_dadd>
   263f8:	0006      	movs	r6, r0
   263fa:	4648      	mov	r0, r9
   263fc:	000f      	movs	r7, r1
   263fe:	f002 ffa7 	bl	29350 <__aeabi_i2d>
   26402:	0004      	movs	r4, r0
   26404:	000d      	movs	r5, r1
   26406:	9804      	ldr	r0, [sp, #16]
   26408:	9905      	ldr	r1, [sp, #20]
   2640a:	0032      	movs	r2, r6
   2640c:	003b      	movs	r3, r7
   2640e:	f001 fa71 	bl	278f4 <__aeabi_dadd>
   26412:	9a08      	ldr	r2, [sp, #32]
   26414:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26416:	f001 fa6d 	bl	278f4 <__aeabi_dadd>
   2641a:	0022      	movs	r2, r4
   2641c:	002b      	movs	r3, r5
   2641e:	f001 fa69 	bl	278f4 <__aeabi_dadd>
   26422:	2000      	movs	r0, #0
   26424:	0022      	movs	r2, r4
   26426:	002b      	movs	r3, r5
   26428:	9002      	str	r0, [sp, #8]
   2642a:	9103      	str	r1, [sp, #12]
   2642c:	f002 fc26 	bl	28c7c <__aeabi_dsub>
   26430:	9a08      	ldr	r2, [sp, #32]
   26432:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26434:	f002 fc22 	bl	28c7c <__aeabi_dsub>
   26438:	9a04      	ldr	r2, [sp, #16]
   2643a:	9b05      	ldr	r3, [sp, #20]
   2643c:	f002 fc1e 	bl	28c7c <__aeabi_dsub>
   26440:	0002      	movs	r2, r0
   26442:	000b      	movs	r3, r1
   26444:	0030      	movs	r0, r6
   26446:	0039      	movs	r1, r7
   26448:	f002 fc18 	bl	28c7c <__aeabi_dsub>
   2644c:	9004      	str	r0, [sp, #16]
   2644e:	9105      	str	r1, [sp, #20]
   26450:	465b      	mov	r3, fp
   26452:	4642      	mov	r2, r8
   26454:	3b01      	subs	r3, #1
   26456:	4313      	orrs	r3, r2
   26458:	d100      	bne.n	2645c <__ieee754_pow+0x4f8>
   2645a:	e1ab      	b.n	267b4 <__ieee754_pow+0x850>
   2645c:	2300      	movs	r3, #0
   2645e:	4c2c      	ldr	r4, [pc, #176]	; (26510 <__ieee754_pow+0x5ac>)
   26460:	9306      	str	r3, [sp, #24]
   26462:	9407      	str	r4, [sp, #28]
   26464:	9800      	ldr	r0, [sp, #0]
   26466:	9901      	ldr	r1, [sp, #4]
   26468:	2600      	movs	r6, #0
   2646a:	000b      	movs	r3, r1
   2646c:	0032      	movs	r2, r6
   2646e:	000f      	movs	r7, r1
   26470:	f002 fc04 	bl	28c7c <__aeabi_dsub>
   26474:	9a02      	ldr	r2, [sp, #8]
   26476:	9b03      	ldr	r3, [sp, #12]
   26478:	f002 f980 	bl	2877c <__aeabi_dmul>
   2647c:	9a00      	ldr	r2, [sp, #0]
   2647e:	9b01      	ldr	r3, [sp, #4]
   26480:	0004      	movs	r4, r0
   26482:	000d      	movs	r5, r1
   26484:	9804      	ldr	r0, [sp, #16]
   26486:	9905      	ldr	r1, [sp, #20]
   26488:	f002 f978 	bl	2877c <__aeabi_dmul>
   2648c:	0002      	movs	r2, r0
   2648e:	000b      	movs	r3, r1
   26490:	0020      	movs	r0, r4
   26492:	0029      	movs	r1, r5
   26494:	f001 fa2e 	bl	278f4 <__aeabi_dadd>
   26498:	0004      	movs	r4, r0
   2649a:	000d      	movs	r5, r1
   2649c:	9802      	ldr	r0, [sp, #8]
   2649e:	9903      	ldr	r1, [sp, #12]
   264a0:	0032      	movs	r2, r6
   264a2:	003b      	movs	r3, r7
   264a4:	9400      	str	r4, [sp, #0]
   264a6:	9501      	str	r5, [sp, #4]
   264a8:	f002 f968 	bl	2877c <__aeabi_dmul>
   264ac:	0002      	movs	r2, r0
   264ae:	000b      	movs	r3, r1
   264b0:	0006      	movs	r6, r0
   264b2:	000f      	movs	r7, r1
   264b4:	0020      	movs	r0, r4
   264b6:	0029      	movs	r1, r5
   264b8:	f001 fa1c 	bl	278f4 <__aeabi_dadd>
   264bc:	4b29      	ldr	r3, [pc, #164]	; (26564 <__ieee754_pow+0x600>)
   264be:	0004      	movs	r4, r0
   264c0:	000d      	movs	r5, r1
   264c2:	0002      	movs	r2, r0
   264c4:	468b      	mov	fp, r1
   264c6:	4299      	cmp	r1, r3
   264c8:	dc00      	bgt.n	264cc <__ieee754_pow+0x568>
   264ca:	e14f      	b.n	2676c <__ieee754_pow+0x808>
   264cc:	4b26      	ldr	r3, [pc, #152]	; (26568 <__ieee754_pow+0x604>)
   264ce:	18cb      	adds	r3, r1, r3
   264d0:	4303      	orrs	r3, r0
   264d2:	d000      	beq.n	264d6 <__ieee754_pow+0x572>
   264d4:	e1e2      	b.n	2689c <__ieee754_pow+0x938>
   264d6:	9800      	ldr	r0, [sp, #0]
   264d8:	9901      	ldr	r1, [sp, #4]
   264da:	4a24      	ldr	r2, [pc, #144]	; (2656c <__ieee754_pow+0x608>)
   264dc:	4b24      	ldr	r3, [pc, #144]	; (26570 <__ieee754_pow+0x60c>)
   264de:	f001 fa09 	bl	278f4 <__aeabi_dadd>
   264e2:	0032      	movs	r2, r6
   264e4:	9002      	str	r0, [sp, #8]
   264e6:	9103      	str	r1, [sp, #12]
   264e8:	003b      	movs	r3, r7
   264ea:	0020      	movs	r0, r4
   264ec:	0029      	movs	r1, r5
   264ee:	f002 fbc5 	bl	28c7c <__aeabi_dsub>
   264f2:	0002      	movs	r2, r0
   264f4:	000b      	movs	r3, r1
   264f6:	9802      	ldr	r0, [sp, #8]
   264f8:	9903      	ldr	r1, [sp, #12]
   264fa:	f000 fe11 	bl	27120 <__aeabi_dcmpgt>
   264fe:	46aa      	mov	sl, r5
   26500:	e038      	b.n	26574 <__ieee754_pow+0x610>
   26502:	46c0      	nop			; (mov r8, r8)
   26504:	000fffff 	.word	0x000fffff
   26508:	43400000 	.word	0x43400000
   2650c:	fffffc01 	.word	0xfffffc01
   26510:	3ff00000 	.word	0x3ff00000
   26514:	0003988e 	.word	0x0003988e
   26518:	000bb679 	.word	0x000bb679
   2651c:	fff00000 	.word	0xfff00000
   26520:	4a454eef 	.word	0x4a454eef
   26524:	3fca7e28 	.word	0x3fca7e28
   26528:	93c9db65 	.word	0x93c9db65
   2652c:	3fcd864a 	.word	0x3fcd864a
   26530:	a91d4101 	.word	0xa91d4101
   26534:	3fd17460 	.word	0x3fd17460
   26538:	518f264d 	.word	0x518f264d
   2653c:	3fd55555 	.word	0x3fd55555
   26540:	db6fabff 	.word	0xdb6fabff
   26544:	3fdb6db6 	.word	0x3fdb6db6
   26548:	33333303 	.word	0x33333303
   2654c:	3fe33333 	.word	0x3fe33333
   26550:	40080000 	.word	0x40080000
   26554:	3feec709 	.word	0x3feec709
   26558:	dc3a03fd 	.word	0xdc3a03fd
   2655c:	145b01f5 	.word	0x145b01f5
   26560:	be3e2fe0 	.word	0xbe3e2fe0
   26564:	408fffff 	.word	0x408fffff
   26568:	bf700000 	.word	0xbf700000
   2656c:	652b82fe 	.word	0x652b82fe
   26570:	3c971547 	.word	0x3c971547
   26574:	2800      	cmp	r0, #0
   26576:	d000      	beq.n	2657a <__ieee754_pow+0x616>
   26578:	e190      	b.n	2689c <__ieee754_pow+0x938>
   2657a:	4aec      	ldr	r2, [pc, #944]	; (2692c <__ieee754_pow+0x9c8>)
   2657c:	4653      	mov	r3, sl
   2657e:	4694      	mov	ip, r2
   26580:	2280      	movs	r2, #128	; 0x80
   26582:	0352      	lsls	r2, r2, #13
   26584:	0011      	movs	r1, r2
   26586:	151b      	asrs	r3, r3, #20
   26588:	4463      	add	r3, ip
   2658a:	4119      	asrs	r1, r3
   2658c:	000b      	movs	r3, r1
   2658e:	4690      	mov	r8, r2
   26590:	4ae7      	ldr	r2, [pc, #924]	; (26930 <__ieee754_pow+0x9cc>)
   26592:	445b      	add	r3, fp
   26594:	4694      	mov	ip, r2
   26596:	005c      	lsls	r4, r3, #1
   26598:	0d64      	lsrs	r4, r4, #21
   2659a:	4de6      	ldr	r5, [pc, #920]	; (26934 <__ieee754_pow+0x9d0>)
   2659c:	4464      	add	r4, ip
   2659e:	4125      	asrs	r5, r4
   265a0:	001a      	movs	r2, r3
   265a2:	43aa      	bics	r2, r5
   265a4:	0011      	movs	r1, r2
   265a6:	4642      	mov	r2, r8
   265a8:	031b      	lsls	r3, r3, #12
   265aa:	0b1b      	lsrs	r3, r3, #12
   265ac:	4313      	orrs	r3, r2
   265ae:	2214      	movs	r2, #20
   265b0:	1b14      	subs	r4, r2, r4
   265b2:	4123      	asrs	r3, r4
   265b4:	4699      	mov	r9, r3
   265b6:	465b      	mov	r3, fp
   265b8:	2000      	movs	r0, #0
   265ba:	2b00      	cmp	r3, #0
   265bc:	da00      	bge.n	265c0 <__ieee754_pow+0x65c>
   265be:	e1b0      	b.n	26922 <__ieee754_pow+0x9be>
   265c0:	0002      	movs	r2, r0
   265c2:	000b      	movs	r3, r1
   265c4:	0030      	movs	r0, r6
   265c6:	0039      	movs	r1, r7
   265c8:	f002 fb58 	bl	28c7c <__aeabi_dsub>
   265cc:	000b      	movs	r3, r1
   265ce:	0002      	movs	r2, r0
   265d0:	0006      	movs	r6, r0
   265d2:	000f      	movs	r7, r1
   265d4:	9800      	ldr	r0, [sp, #0]
   265d6:	9901      	ldr	r1, [sp, #4]
   265d8:	f001 f98c 	bl	278f4 <__aeabi_dadd>
   265dc:	464b      	mov	r3, r9
   265de:	051b      	lsls	r3, r3, #20
   265e0:	000d      	movs	r5, r1
   265e2:	4698      	mov	r8, r3
   265e4:	2400      	movs	r4, #0
   265e6:	2200      	movs	r2, #0
   265e8:	4bd3      	ldr	r3, [pc, #844]	; (26938 <__ieee754_pow+0x9d4>)
   265ea:	0020      	movs	r0, r4
   265ec:	0029      	movs	r1, r5
   265ee:	f002 f8c5 	bl	2877c <__aeabi_dmul>
   265f2:	0032      	movs	r2, r6
   265f4:	9002      	str	r0, [sp, #8]
   265f6:	9103      	str	r1, [sp, #12]
   265f8:	003b      	movs	r3, r7
   265fa:	0020      	movs	r0, r4
   265fc:	0029      	movs	r1, r5
   265fe:	f002 fb3d 	bl	28c7c <__aeabi_dsub>
   26602:	0002      	movs	r2, r0
   26604:	000b      	movs	r3, r1
   26606:	9800      	ldr	r0, [sp, #0]
   26608:	9901      	ldr	r1, [sp, #4]
   2660a:	f002 fb37 	bl	28c7c <__aeabi_dsub>
   2660e:	4acb      	ldr	r2, [pc, #812]	; (2693c <__ieee754_pow+0x9d8>)
   26610:	4bcb      	ldr	r3, [pc, #812]	; (26940 <__ieee754_pow+0x9dc>)
   26612:	f002 f8b3 	bl	2877c <__aeabi_dmul>
   26616:	4acb      	ldr	r2, [pc, #812]	; (26944 <__ieee754_pow+0x9e0>)
   26618:	0006      	movs	r6, r0
   2661a:	000f      	movs	r7, r1
   2661c:	4bca      	ldr	r3, [pc, #808]	; (26948 <__ieee754_pow+0x9e4>)
   2661e:	0020      	movs	r0, r4
   26620:	0029      	movs	r1, r5
   26622:	f002 f8ab 	bl	2877c <__aeabi_dmul>
   26626:	0002      	movs	r2, r0
   26628:	000b      	movs	r3, r1
   2662a:	0030      	movs	r0, r6
   2662c:	0039      	movs	r1, r7
   2662e:	f001 f961 	bl	278f4 <__aeabi_dadd>
   26632:	0004      	movs	r4, r0
   26634:	000d      	movs	r5, r1
   26636:	0002      	movs	r2, r0
   26638:	000b      	movs	r3, r1
   2663a:	9802      	ldr	r0, [sp, #8]
   2663c:	9903      	ldr	r1, [sp, #12]
   2663e:	f001 f959 	bl	278f4 <__aeabi_dadd>
   26642:	9a02      	ldr	r2, [sp, #8]
   26644:	9b03      	ldr	r3, [sp, #12]
   26646:	0006      	movs	r6, r0
   26648:	000f      	movs	r7, r1
   2664a:	f002 fb17 	bl	28c7c <__aeabi_dsub>
   2664e:	0002      	movs	r2, r0
   26650:	000b      	movs	r3, r1
   26652:	0020      	movs	r0, r4
   26654:	0029      	movs	r1, r5
   26656:	f002 fb11 	bl	28c7c <__aeabi_dsub>
   2665a:	0032      	movs	r2, r6
   2665c:	9000      	str	r0, [sp, #0]
   2665e:	9101      	str	r1, [sp, #4]
   26660:	003b      	movs	r3, r7
   26662:	0030      	movs	r0, r6
   26664:	0039      	movs	r1, r7
   26666:	f002 f889 	bl	2877c <__aeabi_dmul>
   2666a:	0004      	movs	r4, r0
   2666c:	000d      	movs	r5, r1
   2666e:	4ab7      	ldr	r2, [pc, #732]	; (2694c <__ieee754_pow+0x9e8>)
   26670:	4bb7      	ldr	r3, [pc, #732]	; (26950 <__ieee754_pow+0x9ec>)
   26672:	f002 f883 	bl	2877c <__aeabi_dmul>
   26676:	4ab7      	ldr	r2, [pc, #732]	; (26954 <__ieee754_pow+0x9f0>)
   26678:	4bb7      	ldr	r3, [pc, #732]	; (26958 <__ieee754_pow+0x9f4>)
   2667a:	f002 faff 	bl	28c7c <__aeabi_dsub>
   2667e:	0022      	movs	r2, r4
   26680:	002b      	movs	r3, r5
   26682:	f002 f87b 	bl	2877c <__aeabi_dmul>
   26686:	4ab5      	ldr	r2, [pc, #724]	; (2695c <__ieee754_pow+0x9f8>)
   26688:	4bb5      	ldr	r3, [pc, #724]	; (26960 <__ieee754_pow+0x9fc>)
   2668a:	f001 f933 	bl	278f4 <__aeabi_dadd>
   2668e:	0022      	movs	r2, r4
   26690:	002b      	movs	r3, r5
   26692:	f002 f873 	bl	2877c <__aeabi_dmul>
   26696:	4ab3      	ldr	r2, [pc, #716]	; (26964 <__ieee754_pow+0xa00>)
   26698:	4bb3      	ldr	r3, [pc, #716]	; (26968 <__ieee754_pow+0xa04>)
   2669a:	f002 faef 	bl	28c7c <__aeabi_dsub>
   2669e:	0022      	movs	r2, r4
   266a0:	002b      	movs	r3, r5
   266a2:	f002 f86b 	bl	2877c <__aeabi_dmul>
   266a6:	4ab1      	ldr	r2, [pc, #708]	; (2696c <__ieee754_pow+0xa08>)
   266a8:	4bb1      	ldr	r3, [pc, #708]	; (26970 <__ieee754_pow+0xa0c>)
   266aa:	f001 f923 	bl	278f4 <__aeabi_dadd>
   266ae:	0022      	movs	r2, r4
   266b0:	002b      	movs	r3, r5
   266b2:	f002 f863 	bl	2877c <__aeabi_dmul>
   266b6:	0002      	movs	r2, r0
   266b8:	000b      	movs	r3, r1
   266ba:	0030      	movs	r0, r6
   266bc:	0039      	movs	r1, r7
   266be:	f002 fadd 	bl	28c7c <__aeabi_dsub>
   266c2:	0004      	movs	r4, r0
   266c4:	000d      	movs	r5, r1
   266c6:	0002      	movs	r2, r0
   266c8:	000b      	movs	r3, r1
   266ca:	0030      	movs	r0, r6
   266cc:	0039      	movs	r1, r7
   266ce:	f002 f855 	bl	2877c <__aeabi_dmul>
   266d2:	2380      	movs	r3, #128	; 0x80
   266d4:	9002      	str	r0, [sp, #8]
   266d6:	9103      	str	r1, [sp, #12]
   266d8:	2200      	movs	r2, #0
   266da:	05db      	lsls	r3, r3, #23
   266dc:	0020      	movs	r0, r4
   266de:	0029      	movs	r1, r5
   266e0:	f002 facc 	bl	28c7c <__aeabi_dsub>
   266e4:	0002      	movs	r2, r0
   266e6:	000b      	movs	r3, r1
   266e8:	9802      	ldr	r0, [sp, #8]
   266ea:	9903      	ldr	r1, [sp, #12]
   266ec:	f001 fc12 	bl	27f14 <__aeabi_ddiv>
   266f0:	9a00      	ldr	r2, [sp, #0]
   266f2:	9b01      	ldr	r3, [sp, #4]
   266f4:	0004      	movs	r4, r0
   266f6:	000d      	movs	r5, r1
   266f8:	0030      	movs	r0, r6
   266fa:	0039      	movs	r1, r7
   266fc:	f002 f83e 	bl	2877c <__aeabi_dmul>
   26700:	9a00      	ldr	r2, [sp, #0]
   26702:	9b01      	ldr	r3, [sp, #4]
   26704:	f001 f8f6 	bl	278f4 <__aeabi_dadd>
   26708:	0002      	movs	r2, r0
   2670a:	000b      	movs	r3, r1
   2670c:	0020      	movs	r0, r4
   2670e:	0029      	movs	r1, r5
   26710:	f002 fab4 	bl	28c7c <__aeabi_dsub>
   26714:	0032      	movs	r2, r6
   26716:	003b      	movs	r3, r7
   26718:	f002 fab0 	bl	28c7c <__aeabi_dsub>
   2671c:	0002      	movs	r2, r0
   2671e:	000b      	movs	r3, r1
   26720:	2000      	movs	r0, #0
   26722:	4994      	ldr	r1, [pc, #592]	; (26974 <__ieee754_pow+0xa10>)
   26724:	f002 faaa 	bl	28c7c <__aeabi_dsub>
   26728:	4643      	mov	r3, r8
   2672a:	185b      	adds	r3, r3, r1
   2672c:	151a      	asrs	r2, r3, #20
   2672e:	2a00      	cmp	r2, #0
   26730:	dc00      	bgt.n	26734 <__ieee754_pow+0x7d0>
   26732:	e149      	b.n	269c8 <__ieee754_pow+0xa64>
   26734:	0019      	movs	r1, r3
   26736:	9a06      	ldr	r2, [sp, #24]
   26738:	9b07      	ldr	r3, [sp, #28]
   2673a:	f002 f81f 	bl	2877c <__aeabi_dmul>
   2673e:	e459      	b.n	25ff4 <__ieee754_pow+0x90>
   26740:	003a      	movs	r2, r7
   26742:	0033      	movs	r3, r6
   26744:	0038      	movs	r0, r7
   26746:	0031      	movs	r1, r6
   26748:	f002 f818 	bl	2877c <__aeabi_dmul>
   2674c:	e452      	b.n	25ff4 <__ieee754_pow+0x90>
   2674e:	4653      	mov	r3, sl
   26750:	2b00      	cmp	r3, #0
   26752:	db00      	blt.n	26756 <__ieee754_pow+0x7f2>
   26754:	e4d9      	b.n	2610a <__ieee754_pow+0x1a6>
   26756:	9c00      	ldr	r4, [sp, #0]
   26758:	9d01      	ldr	r5, [sp, #4]
   2675a:	2280      	movs	r2, #128	; 0x80
   2675c:	0612      	lsls	r2, r2, #24
   2675e:	002b      	movs	r3, r5
   26760:	4694      	mov	ip, r2
   26762:	4463      	add	r3, ip
   26764:	0020      	movs	r0, r4
   26766:	0019      	movs	r1, r3
   26768:	f7ff fc44 	bl	25ff4 <__ieee754_pow+0x90>
   2676c:	004b      	lsls	r3, r1, #1
   2676e:	085b      	lsrs	r3, r3, #1
   26770:	469a      	mov	sl, r3
   26772:	4b81      	ldr	r3, [pc, #516]	; (26978 <__ieee754_pow+0xa14>)
   26774:	459a      	cmp	sl, r3
   26776:	dc00      	bgt.n	2677a <__ieee754_pow+0x816>
   26778:	e0b1      	b.n	268de <__ieee754_pow+0x97a>
   2677a:	4b80      	ldr	r3, [pc, #512]	; (2697c <__ieee754_pow+0xa18>)
   2677c:	445b      	add	r3, fp
   2677e:	431a      	orrs	r2, r3
   26780:	d10c      	bne.n	2679c <__ieee754_pow+0x838>
   26782:	0032      	movs	r2, r6
   26784:	003b      	movs	r3, r7
   26786:	f002 fa79 	bl	28c7c <__aeabi_dsub>
   2678a:	0002      	movs	r2, r0
   2678c:	000b      	movs	r3, r1
   2678e:	9800      	ldr	r0, [sp, #0]
   26790:	9901      	ldr	r1, [sp, #4]
   26792:	f000 fcbb 	bl	2710c <__aeabi_dcmple>
   26796:	2800      	cmp	r0, #0
   26798:	d100      	bne.n	2679c <__ieee754_pow+0x838>
   2679a:	e6ee      	b.n	2657a <__ieee754_pow+0x616>
   2679c:	9806      	ldr	r0, [sp, #24]
   2679e:	9907      	ldr	r1, [sp, #28]
   267a0:	4a77      	ldr	r2, [pc, #476]	; (26980 <__ieee754_pow+0xa1c>)
   267a2:	4b78      	ldr	r3, [pc, #480]	; (26984 <__ieee754_pow+0xa20>)
   267a4:	f001 ffea 	bl	2877c <__aeabi_dmul>
   267a8:	4a75      	ldr	r2, [pc, #468]	; (26980 <__ieee754_pow+0xa1c>)
   267aa:	4b76      	ldr	r3, [pc, #472]	; (26984 <__ieee754_pow+0xa20>)
   267ac:	f001 ffe6 	bl	2877c <__aeabi_dmul>
   267b0:	f7ff fc20 	bl	25ff4 <__ieee754_pow+0x90>
   267b4:	2300      	movs	r3, #0
   267b6:	4c74      	ldr	r4, [pc, #464]	; (26988 <__ieee754_pow+0xa24>)
   267b8:	9306      	str	r3, [sp, #24]
   267ba:	9407      	str	r4, [sp, #28]
   267bc:	e652      	b.n	26464 <__ieee754_pow+0x500>
   267be:	0002      	movs	r2, r0
   267c0:	000b      	movs	r3, r1
   267c2:	2000      	movs	r0, #0
   267c4:	496b      	ldr	r1, [pc, #428]	; (26974 <__ieee754_pow+0xa10>)
   267c6:	f001 fba5 	bl	27f14 <__aeabi_ddiv>
   267ca:	f7ff fc32 	bl	26032 <__ieee754_pow+0xce>
   267ce:	4653      	mov	r3, sl
   267d0:	2b00      	cmp	r3, #0
   267d2:	db00      	blt.n	267d6 <__ieee754_pow+0x872>
   267d4:	e499      	b.n	2610a <__ieee754_pow+0x1a6>
   267d6:	e454      	b.n	26082 <__ieee754_pow+0x11e>
   267d8:	4b6c      	ldr	r3, [pc, #432]	; (2698c <__ieee754_pow+0xa28>)
   267da:	429c      	cmp	r4, r3
   267dc:	ddf7      	ble.n	267ce <__ieee754_pow+0x86a>
   267de:	4b65      	ldr	r3, [pc, #404]	; (26974 <__ieee754_pow+0xa10>)
   267e0:	429c      	cmp	r4, r3
   267e2:	dd00      	ble.n	267e6 <__ieee754_pow+0x882>
   267e4:	e44a      	b.n	2607c <__ieee754_pow+0x118>
   267e6:	2200      	movs	r2, #0
   267e8:	4b62      	ldr	r3, [pc, #392]	; (26974 <__ieee754_pow+0xa10>)
   267ea:	f002 fa47 	bl	28c7c <__aeabi_dsub>
   267ee:	22c0      	movs	r2, #192	; 0xc0
   267f0:	4b67      	ldr	r3, [pc, #412]	; (26990 <__ieee754_pow+0xa2c>)
   267f2:	05d2      	lsls	r2, r2, #23
   267f4:	0004      	movs	r4, r0
   267f6:	000d      	movs	r5, r1
   267f8:	f001 ffc0 	bl	2877c <__aeabi_dmul>
   267fc:	4a65      	ldr	r2, [pc, #404]	; (26994 <__ieee754_pow+0xa30>)
   267fe:	0006      	movs	r6, r0
   26800:	000f      	movs	r7, r1
   26802:	4b65      	ldr	r3, [pc, #404]	; (26998 <__ieee754_pow+0xa34>)
   26804:	0020      	movs	r0, r4
   26806:	0029      	movs	r1, r5
   26808:	f001 ffb8 	bl	2877c <__aeabi_dmul>
   2680c:	2200      	movs	r2, #0
   2680e:	9002      	str	r0, [sp, #8]
   26810:	9103      	str	r1, [sp, #12]
   26812:	4b62      	ldr	r3, [pc, #392]	; (2699c <__ieee754_pow+0xa38>)
   26814:	0020      	movs	r0, r4
   26816:	0029      	movs	r1, r5
   26818:	f001 ffb0 	bl	2877c <__aeabi_dmul>
   2681c:	0002      	movs	r2, r0
   2681e:	000b      	movs	r3, r1
   26820:	485f      	ldr	r0, [pc, #380]	; (269a0 <__ieee754_pow+0xa3c>)
   26822:	4960      	ldr	r1, [pc, #384]	; (269a4 <__ieee754_pow+0xa40>)
   26824:	f002 fa2a 	bl	28c7c <__aeabi_dsub>
   26828:	0022      	movs	r2, r4
   2682a:	002b      	movs	r3, r5
   2682c:	f001 ffa6 	bl	2877c <__aeabi_dmul>
   26830:	0002      	movs	r2, r0
   26832:	000b      	movs	r3, r1
   26834:	2000      	movs	r0, #0
   26836:	495c      	ldr	r1, [pc, #368]	; (269a8 <__ieee754_pow+0xa44>)
   26838:	f002 fa20 	bl	28c7c <__aeabi_dsub>
   2683c:	0022      	movs	r2, r4
   2683e:	9004      	str	r0, [sp, #16]
   26840:	9105      	str	r1, [sp, #20]
   26842:	002b      	movs	r3, r5
   26844:	0020      	movs	r0, r4
   26846:	0029      	movs	r1, r5
   26848:	f001 ff98 	bl	2877c <__aeabi_dmul>
   2684c:	0002      	movs	r2, r0
   2684e:	000b      	movs	r3, r1
   26850:	9804      	ldr	r0, [sp, #16]
   26852:	9905      	ldr	r1, [sp, #20]
   26854:	f001 ff92 	bl	2877c <__aeabi_dmul>
   26858:	4a54      	ldr	r2, [pc, #336]	; (269ac <__ieee754_pow+0xa48>)
   2685a:	4b4d      	ldr	r3, [pc, #308]	; (26990 <__ieee754_pow+0xa2c>)
   2685c:	f001 ff8e 	bl	2877c <__aeabi_dmul>
   26860:	0002      	movs	r2, r0
   26862:	000b      	movs	r3, r1
   26864:	9802      	ldr	r0, [sp, #8]
   26866:	9903      	ldr	r1, [sp, #12]
   26868:	f002 fa08 	bl	28c7c <__aeabi_dsub>
   2686c:	0002      	movs	r2, r0
   2686e:	000b      	movs	r3, r1
   26870:	0004      	movs	r4, r0
   26872:	000d      	movs	r5, r1
   26874:	0030      	movs	r0, r6
   26876:	0039      	movs	r1, r7
   26878:	f001 f83c 	bl	278f4 <__aeabi_dadd>
   2687c:	2000      	movs	r0, #0
   2687e:	0032      	movs	r2, r6
   26880:	003b      	movs	r3, r7
   26882:	9002      	str	r0, [sp, #8]
   26884:	9103      	str	r1, [sp, #12]
   26886:	f002 f9f9 	bl	28c7c <__aeabi_dsub>
   2688a:	0002      	movs	r2, r0
   2688c:	000b      	movs	r3, r1
   2688e:	0020      	movs	r0, r4
   26890:	0029      	movs	r1, r5
   26892:	f002 f9f3 	bl	28c7c <__aeabi_dsub>
   26896:	9004      	str	r0, [sp, #16]
   26898:	9105      	str	r1, [sp, #20]
   2689a:	e5d9      	b.n	26450 <__ieee754_pow+0x4ec>
   2689c:	4a44      	ldr	r2, [pc, #272]	; (269b0 <__ieee754_pow+0xa4c>)
   2689e:	4b45      	ldr	r3, [pc, #276]	; (269b4 <__ieee754_pow+0xa50>)
   268a0:	9806      	ldr	r0, [sp, #24]
   268a2:	9907      	ldr	r1, [sp, #28]
   268a4:	f001 ff6a 	bl	2877c <__aeabi_dmul>
   268a8:	4a41      	ldr	r2, [pc, #260]	; (269b0 <__ieee754_pow+0xa4c>)
   268aa:	4b42      	ldr	r3, [pc, #264]	; (269b4 <__ieee754_pow+0xa50>)
   268ac:	f001 ff66 	bl	2877c <__aeabi_dmul>
   268b0:	f7ff fba0 	bl	25ff4 <__ieee754_pow+0x90>
   268b4:	2a00      	cmp	r2, #0
   268b6:	d001      	beq.n	268bc <__ieee754_pow+0x958>
   268b8:	f7ff fba9 	bl	2600e <__ieee754_pow+0xaa>
   268bc:	3214      	adds	r2, #20
   268be:	1ad3      	subs	r3, r2, r3
   268c0:	002a      	movs	r2, r5
   268c2:	411a      	asrs	r2, r3
   268c4:	0011      	movs	r1, r2
   268c6:	4099      	lsls	r1, r3
   268c8:	428d      	cmp	r5, r1
   268ca:	d001      	beq.n	268d0 <__ieee754_pow+0x96c>
   268cc:	f7ff fb76 	bl	25fbc <__ieee754_pow+0x58>
   268d0:	2301      	movs	r3, #1
   268d2:	401a      	ands	r2, r3
   268d4:	18db      	adds	r3, r3, r3
   268d6:	1a9b      	subs	r3, r3, r2
   268d8:	469b      	mov	fp, r3
   268da:	f7ff fb6f 	bl	25fbc <__ieee754_pow+0x58>
   268de:	2200      	movs	r2, #0
   268e0:	4b31      	ldr	r3, [pc, #196]	; (269a8 <__ieee754_pow+0xa44>)
   268e2:	4690      	mov	r8, r2
   268e4:	4691      	mov	r9, r2
   268e6:	459a      	cmp	sl, r3
   268e8:	dc00      	bgt.n	268ec <__ieee754_pow+0x988>
   268ea:	e67b      	b.n	265e4 <__ieee754_pow+0x680>
   268ec:	e645      	b.n	2657a <__ieee754_pow+0x616>
   268ee:	0002      	movs	r2, r0
   268f0:	000b      	movs	r3, r1
   268f2:	f002 f9c3 	bl	28c7c <__aeabi_dsub>
   268f6:	0002      	movs	r2, r0
   268f8:	000b      	movs	r3, r1
   268fa:	f001 fb0b 	bl	27f14 <__aeabi_ddiv>
   268fe:	f7ff fb79 	bl	25ff4 <__ieee754_pow+0x90>
   26902:	2380      	movs	r3, #128	; 0x80
   26904:	4c2c      	ldr	r4, [pc, #176]	; (269b8 <__ieee754_pow+0xa54>)
   26906:	05db      	lsls	r3, r3, #23
   26908:	9308      	str	r3, [sp, #32]
   2690a:	9409      	str	r4, [sp, #36]	; 0x24
   2690c:	4b2b      	ldr	r3, [pc, #172]	; (269bc <__ieee754_pow+0xa58>)
   2690e:	4c2c      	ldr	r4, [pc, #176]	; (269c0 <__ieee754_pow+0xa5c>)
   26910:	2200      	movs	r2, #0
   26912:	930c      	str	r3, [sp, #48]	; 0x30
   26914:	940d      	str	r4, [sp, #52]	; 0x34
   26916:	2480      	movs	r4, #128	; 0x80
   26918:	4b2a      	ldr	r3, [pc, #168]	; (269c4 <__ieee754_pow+0xa60>)
   2691a:	02e4      	lsls	r4, r4, #11
   2691c:	9206      	str	r2, [sp, #24]
   2691e:	9307      	str	r3, [sp, #28]
   26920:	e449      	b.n	261b6 <__ieee754_pow+0x252>
   26922:	464b      	mov	r3, r9
   26924:	425b      	negs	r3, r3
   26926:	4699      	mov	r9, r3
   26928:	e64a      	b.n	265c0 <__ieee754_pow+0x65c>
   2692a:	46c0      	nop			; (mov r8, r8)
   2692c:	fffffc02 	.word	0xfffffc02
   26930:	fffffc01 	.word	0xfffffc01
   26934:	000fffff 	.word	0x000fffff
   26938:	3fe62e43 	.word	0x3fe62e43
   2693c:	fefa39ef 	.word	0xfefa39ef
   26940:	3fe62e42 	.word	0x3fe62e42
   26944:	0ca86c39 	.word	0x0ca86c39
   26948:	be205c61 	.word	0xbe205c61
   2694c:	72bea4d0 	.word	0x72bea4d0
   26950:	3e663769 	.word	0x3e663769
   26954:	c5d26bf1 	.word	0xc5d26bf1
   26958:	3ebbbd41 	.word	0x3ebbbd41
   2695c:	af25de2c 	.word	0xaf25de2c
   26960:	3f11566a 	.word	0x3f11566a
   26964:	16bebd93 	.word	0x16bebd93
   26968:	3f66c16c 	.word	0x3f66c16c
   2696c:	5555553e 	.word	0x5555553e
   26970:	3fc55555 	.word	0x3fc55555
   26974:	3ff00000 	.word	0x3ff00000
   26978:	4090cbff 	.word	0x4090cbff
   2697c:	3f6f3400 	.word	0x3f6f3400
   26980:	c2f8f359 	.word	0xc2f8f359
   26984:	01a56e1f 	.word	0x01a56e1f
   26988:	bff00000 	.word	0xbff00000
   2698c:	3feffffe 	.word	0x3feffffe
   26990:	3ff71547 	.word	0x3ff71547
   26994:	f85ddf44 	.word	0xf85ddf44
   26998:	3e54ae0b 	.word	0x3e54ae0b
   2699c:	3fd00000 	.word	0x3fd00000
   269a0:	55555555 	.word	0x55555555
   269a4:	3fd55555 	.word	0x3fd55555
   269a8:	3fe00000 	.word	0x3fe00000
   269ac:	652b82fe 	.word	0x652b82fe
   269b0:	8800759c 	.word	0x8800759c
   269b4:	7e37e43c 	.word	0x7e37e43c
   269b8:	3fe2b803 	.word	0x3fe2b803
   269bc:	43cfd006 	.word	0x43cfd006
   269c0:	3e4cfdeb 	.word	0x3e4cfdeb
   269c4:	3ff80000 	.word	0x3ff80000
   269c8:	464a      	mov	r2, r9
   269ca:	f000 f999 	bl	26d00 <scalbn>
   269ce:	e6b2      	b.n	26736 <__ieee754_pow+0x7d2>

000269d0 <__ieee754_sqrt>:
   269d0:	4b6c      	ldr	r3, [pc, #432]	; (26b84 <__ieee754_sqrt+0x1b4>)
   269d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   269d4:	000a      	movs	r2, r1
   269d6:	4646      	mov	r6, r8
   269d8:	000d      	movs	r5, r1
   269da:	46d6      	mov	lr, sl
   269dc:	464f      	mov	r7, r9
   269de:	0019      	movs	r1, r3
   269e0:	b5c0      	push	{r6, r7, lr}
   269e2:	0004      	movs	r4, r0
   269e4:	0006      	movs	r6, r0
   269e6:	4029      	ands	r1, r5
   269e8:	4299      	cmp	r1, r3
   269ea:	d100      	bne.n	269ee <__ieee754_sqrt+0x1e>
   269ec:	e0a7      	b.n	26b3e <__ieee754_sqrt+0x16e>
   269ee:	2d00      	cmp	r5, #0
   269f0:	dc00      	bgt.n	269f4 <__ieee754_sqrt+0x24>
   269f2:	e081      	b.n	26af8 <__ieee754_sqrt+0x128>
   269f4:	152f      	asrs	r7, r5, #20
   269f6:	d100      	bne.n	269fa <__ieee754_sqrt+0x2a>
   269f8:	e08e      	b.n	26b18 <__ieee754_sqrt+0x148>
   269fa:	4b63      	ldr	r3, [pc, #396]	; (26b88 <__ieee754_sqrt+0x1b8>)
   269fc:	0312      	lsls	r2, r2, #12
   269fe:	469c      	mov	ip, r3
   26a00:	2380      	movs	r3, #128	; 0x80
   26a02:	0b12      	lsrs	r2, r2, #12
   26a04:	035b      	lsls	r3, r3, #13
   26a06:	4467      	add	r7, ip
   26a08:	431a      	orrs	r2, r3
   26a0a:	07fb      	lsls	r3, r7, #31
   26a0c:	d468      	bmi.n	26ae0 <__ieee754_sqrt+0x110>
   26a0e:	107b      	asrs	r3, r7, #1
   26a10:	469c      	mov	ip, r3
   26a12:	0fe3      	lsrs	r3, r4, #31
   26a14:	189b      	adds	r3, r3, r2
   26a16:	189b      	adds	r3, r3, r2
   26a18:	2280      	movs	r2, #128	; 0x80
   26a1a:	2116      	movs	r1, #22
   26a1c:	2600      	movs	r6, #0
   26a1e:	2500      	movs	r5, #0
   26a20:	0064      	lsls	r4, r4, #1
   26a22:	0392      	lsls	r2, r2, #14
   26a24:	18a8      	adds	r0, r5, r2
   26a26:	4298      	cmp	r0, r3
   26a28:	dc02      	bgt.n	26a30 <__ieee754_sqrt+0x60>
   26a2a:	1885      	adds	r5, r0, r2
   26a2c:	1a1b      	subs	r3, r3, r0
   26a2e:	18b6      	adds	r6, r6, r2
   26a30:	0fe0      	lsrs	r0, r4, #31
   26a32:	005b      	lsls	r3, r3, #1
   26a34:	3901      	subs	r1, #1
   26a36:	181b      	adds	r3, r3, r0
   26a38:	0064      	lsls	r4, r4, #1
   26a3a:	0852      	lsrs	r2, r2, #1
   26a3c:	2900      	cmp	r1, #0
   26a3e:	d1f1      	bne.n	26a24 <__ieee754_sqrt+0x54>
   26a40:	2200      	movs	r2, #0
   26a42:	4692      	mov	sl, r2
   26a44:	4690      	mov	r8, r2
   26a46:	2280      	movs	r2, #128	; 0x80
   26a48:	2020      	movs	r0, #32
   26a4a:	0612      	lsls	r2, r2, #24
   26a4c:	e009      	b.n	26a62 <__ieee754_sqrt+0x92>
   26a4e:	42ab      	cmp	r3, r5
   26a50:	d038      	beq.n	26ac4 <__ieee754_sqrt+0xf4>
   26a52:	0fe1      	lsrs	r1, r4, #31
   26a54:	18c9      	adds	r1, r1, r3
   26a56:	3801      	subs	r0, #1
   26a58:	18cb      	adds	r3, r1, r3
   26a5a:	0064      	lsls	r4, r4, #1
   26a5c:	0852      	lsrs	r2, r2, #1
   26a5e:	2800      	cmp	r0, #0
   26a60:	d018      	beq.n	26a94 <__ieee754_sqrt+0xc4>
   26a62:	4641      	mov	r1, r8
   26a64:	1851      	adds	r1, r2, r1
   26a66:	42ab      	cmp	r3, r5
   26a68:	ddf1      	ble.n	26a4e <__ieee754_sqrt+0x7e>
   26a6a:	188f      	adds	r7, r1, r2
   26a6c:	46b8      	mov	r8, r7
   26a6e:	46a9      	mov	r9, r5
   26a70:	2900      	cmp	r1, #0
   26a72:	db30      	blt.n	26ad6 <__ieee754_sqrt+0x106>
   26a74:	1b5b      	subs	r3, r3, r5
   26a76:	428c      	cmp	r4, r1
   26a78:	41ad      	sbcs	r5, r5
   26a7a:	426d      	negs	r5, r5
   26a7c:	1b5b      	subs	r3, r3, r5
   26a7e:	1a64      	subs	r4, r4, r1
   26a80:	0fe1      	lsrs	r1, r4, #31
   26a82:	18c9      	adds	r1, r1, r3
   26a84:	3801      	subs	r0, #1
   26a86:	4492      	add	sl, r2
   26a88:	464d      	mov	r5, r9
   26a8a:	18cb      	adds	r3, r1, r3
   26a8c:	0064      	lsls	r4, r4, #1
   26a8e:	0852      	lsrs	r2, r2, #1
   26a90:	2800      	cmp	r0, #0
   26a92:	d1e6      	bne.n	26a62 <__ieee754_sqrt+0x92>
   26a94:	4323      	orrs	r3, r4
   26a96:	d128      	bne.n	26aea <__ieee754_sqrt+0x11a>
   26a98:	4653      	mov	r3, sl
   26a9a:	085b      	lsrs	r3, r3, #1
   26a9c:	493b      	ldr	r1, [pc, #236]	; (26b8c <__ieee754_sqrt+0x1bc>)
   26a9e:	1072      	asrs	r2, r6, #1
   26aa0:	4688      	mov	r8, r1
   26aa2:	4442      	add	r2, r8
   26aa4:	07f1      	lsls	r1, r6, #31
   26aa6:	d502      	bpl.n	26aae <__ieee754_sqrt+0xde>
   26aa8:	2180      	movs	r1, #128	; 0x80
   26aaa:	0609      	lsls	r1, r1, #24
   26aac:	430b      	orrs	r3, r1
   26aae:	4661      	mov	r1, ip
   26ab0:	001e      	movs	r6, r3
   26ab2:	050f      	lsls	r7, r1, #20
   26ab4:	18bd      	adds	r5, r7, r2
   26ab6:	0030      	movs	r0, r6
   26ab8:	0029      	movs	r1, r5
   26aba:	bc1c      	pop	{r2, r3, r4}
   26abc:	4690      	mov	r8, r2
   26abe:	4699      	mov	r9, r3
   26ac0:	46a2      	mov	sl, r4
   26ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26ac4:	42a1      	cmp	r1, r4
   26ac6:	d8c4      	bhi.n	26a52 <__ieee754_sqrt+0x82>
   26ac8:	188f      	adds	r7, r1, r2
   26aca:	46b8      	mov	r8, r7
   26acc:	2900      	cmp	r1, #0
   26ace:	db42      	blt.n	26b56 <__ieee754_sqrt+0x186>
   26ad0:	4699      	mov	r9, r3
   26ad2:	2300      	movs	r3, #0
   26ad4:	e7d3      	b.n	26a7e <__ieee754_sqrt+0xae>
   26ad6:	2f00      	cmp	r7, #0
   26ad8:	db2f      	blt.n	26b3a <__ieee754_sqrt+0x16a>
   26ada:	1c6f      	adds	r7, r5, #1
   26adc:	46b9      	mov	r9, r7
   26ade:	e7c9      	b.n	26a74 <__ieee754_sqrt+0xa4>
   26ae0:	0fe1      	lsrs	r1, r4, #31
   26ae2:	0052      	lsls	r2, r2, #1
   26ae4:	188a      	adds	r2, r1, r2
   26ae6:	0064      	lsls	r4, r4, #1
   26ae8:	e791      	b.n	26a0e <__ieee754_sqrt+0x3e>
   26aea:	4653      	mov	r3, sl
   26aec:	3301      	adds	r3, #1
   26aee:	d035      	beq.n	26b5c <__ieee754_sqrt+0x18c>
   26af0:	4653      	mov	r3, sl
   26af2:	3301      	adds	r3, #1
   26af4:	085b      	lsrs	r3, r3, #1
   26af6:	e7d1      	b.n	26a9c <__ieee754_sqrt+0xcc>
   26af8:	006b      	lsls	r3, r5, #1
   26afa:	085b      	lsrs	r3, r3, #1
   26afc:	4303      	orrs	r3, r0
   26afe:	d0da      	beq.n	26ab6 <__ieee754_sqrt+0xe6>
   26b00:	2700      	movs	r7, #0
   26b02:	2d00      	cmp	r5, #0
   26b04:	d132      	bne.n	26b6c <__ieee754_sqrt+0x19c>
   26b06:	0ae2      	lsrs	r2, r4, #11
   26b08:	3f15      	subs	r7, #21
   26b0a:	0564      	lsls	r4, r4, #21
   26b0c:	2a00      	cmp	r2, #0
   26b0e:	d0fa      	beq.n	26b06 <__ieee754_sqrt+0x136>
   26b10:	2380      	movs	r3, #128	; 0x80
   26b12:	035b      	lsls	r3, r3, #13
   26b14:	421a      	tst	r2, r3
   26b16:	d124      	bne.n	26b62 <__ieee754_sqrt+0x192>
   26b18:	2080      	movs	r0, #128	; 0x80
   26b1a:	2300      	movs	r3, #0
   26b1c:	0340      	lsls	r0, r0, #13
   26b1e:	e000      	b.n	26b22 <__ieee754_sqrt+0x152>
   26b20:	000b      	movs	r3, r1
   26b22:	0052      	lsls	r2, r2, #1
   26b24:	1c59      	adds	r1, r3, #1
   26b26:	4202      	tst	r2, r0
   26b28:	d0fa      	beq.n	26b20 <__ieee754_sqrt+0x150>
   26b2a:	2020      	movs	r0, #32
   26b2c:	1a40      	subs	r0, r0, r1
   26b2e:	1aff      	subs	r7, r7, r3
   26b30:	0023      	movs	r3, r4
   26b32:	40c3      	lsrs	r3, r0
   26b34:	408c      	lsls	r4, r1
   26b36:	431a      	orrs	r2, r3
   26b38:	e75f      	b.n	269fa <__ieee754_sqrt+0x2a>
   26b3a:	46a9      	mov	r9, r5
   26b3c:	e79a      	b.n	26a74 <__ieee754_sqrt+0xa4>
   26b3e:	002b      	movs	r3, r5
   26b40:	0002      	movs	r2, r0
   26b42:	0029      	movs	r1, r5
   26b44:	f001 fe1a 	bl	2877c <__aeabi_dmul>
   26b48:	0032      	movs	r2, r6
   26b4a:	002b      	movs	r3, r5
   26b4c:	f000 fed2 	bl	278f4 <__aeabi_dadd>
   26b50:	0006      	movs	r6, r0
   26b52:	000d      	movs	r5, r1
   26b54:	e7af      	b.n	26ab6 <__ieee754_sqrt+0xe6>
   26b56:	2f00      	cmp	r7, #0
   26b58:	dabf      	bge.n	26ada <__ieee754_sqrt+0x10a>
   26b5a:	e7b9      	b.n	26ad0 <__ieee754_sqrt+0x100>
   26b5c:	3601      	adds	r6, #1
   26b5e:	2300      	movs	r3, #0
   26b60:	e79c      	b.n	26a9c <__ieee754_sqrt+0xcc>
   26b62:	2301      	movs	r3, #1
   26b64:	2100      	movs	r1, #0
   26b66:	2020      	movs	r0, #32
   26b68:	425b      	negs	r3, r3
   26b6a:	e7e0      	b.n	26b2e <__ieee754_sqrt+0x15e>
   26b6c:	002b      	movs	r3, r5
   26b6e:	0002      	movs	r2, r0
   26b70:	0029      	movs	r1, r5
   26b72:	f002 f883 	bl	28c7c <__aeabi_dsub>
   26b76:	0002      	movs	r2, r0
   26b78:	000b      	movs	r3, r1
   26b7a:	f001 f9cb 	bl	27f14 <__aeabi_ddiv>
   26b7e:	0006      	movs	r6, r0
   26b80:	000d      	movs	r5, r1
   26b82:	e798      	b.n	26ab6 <__ieee754_sqrt+0xe6>
   26b84:	7ff00000 	.word	0x7ff00000
   26b88:	fffffc01 	.word	0xfffffc01
   26b8c:	3fe00000 	.word	0x3fe00000

00026b90 <fabs>:
   26b90:	0049      	lsls	r1, r1, #1
   26b92:	084b      	lsrs	r3, r1, #1
   26b94:	0019      	movs	r1, r3
   26b96:	4770      	bx	lr

00026b98 <finite>:
   26b98:	4b03      	ldr	r3, [pc, #12]	; (26ba8 <finite+0x10>)
   26b9a:	0048      	lsls	r0, r1, #1
   26b9c:	469c      	mov	ip, r3
   26b9e:	0840      	lsrs	r0, r0, #1
   26ba0:	4460      	add	r0, ip
   26ba2:	0fc0      	lsrs	r0, r0, #31
   26ba4:	4770      	bx	lr
   26ba6:	46c0      	nop			; (mov r8, r8)
   26ba8:	80100000 	.word	0x80100000

00026bac <matherr>:
   26bac:	2000      	movs	r0, #0
   26bae:	4770      	bx	lr

00026bb0 <nan>:
   26bb0:	2000      	movs	r0, #0
   26bb2:	4901      	ldr	r1, [pc, #4]	; (26bb8 <nan+0x8>)
   26bb4:	4770      	bx	lr
   26bb6:	46c0      	nop			; (mov r8, r8)
   26bb8:	7ff80000 	.word	0x7ff80000

00026bbc <rint>:
   26bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   26bbe:	46c6      	mov	lr, r8
   26bc0:	b500      	push	{lr}
   26bc2:	0fcb      	lsrs	r3, r1, #31
   26bc4:	4698      	mov	r8, r3
   26bc6:	4c4a      	ldr	r4, [pc, #296]	; (26cf0 <rint+0x134>)
   26bc8:	004b      	lsls	r3, r1, #1
   26bca:	0d5b      	lsrs	r3, r3, #21
   26bcc:	191e      	adds	r6, r3, r4
   26bce:	b082      	sub	sp, #8
   26bd0:	0007      	movs	r7, r0
   26bd2:	000a      	movs	r2, r1
   26bd4:	2e13      	cmp	r6, #19
   26bd6:	dc35      	bgt.n	26c44 <rint+0x88>
   26bd8:	2e00      	cmp	r6, #0
   26bda:	db57      	blt.n	26c8c <rint+0xd0>
   26bdc:	4b45      	ldr	r3, [pc, #276]	; (26cf4 <rint+0x138>)
   26bde:	0004      	movs	r4, r0
   26be0:	4133      	asrs	r3, r6
   26be2:	001f      	movs	r7, r3
   26be4:	400f      	ands	r7, r1
   26be6:	4307      	orrs	r7, r0
   26be8:	000d      	movs	r5, r1
   26bea:	2f00      	cmp	r7, #0
   26bec:	d024      	beq.n	26c38 <rint+0x7c>
   26bee:	085b      	lsrs	r3, r3, #1
   26bf0:	001c      	movs	r4, r3
   26bf2:	400c      	ands	r4, r1
   26bf4:	4320      	orrs	r0, r4
   26bf6:	2700      	movs	r7, #0
   26bf8:	2800      	cmp	r0, #0
   26bfa:	d007      	beq.n	26c0c <rint+0x50>
   26bfc:	2e13      	cmp	r6, #19
   26bfe:	d100      	bne.n	26c02 <rint+0x46>
   26c00:	e073      	b.n	26cea <rint+0x12e>
   26c02:	2280      	movs	r2, #128	; 0x80
   26c04:	02d2      	lsls	r2, r2, #11
   26c06:	4132      	asrs	r2, r6
   26c08:	4399      	bics	r1, r3
   26c0a:	430a      	orrs	r2, r1
   26c0c:	4643      	mov	r3, r8
   26c0e:	00de      	lsls	r6, r3, #3
   26c10:	4b39      	ldr	r3, [pc, #228]	; (26cf8 <rint+0x13c>)
   26c12:	0011      	movs	r1, r2
   26c14:	199e      	adds	r6, r3, r6
   26c16:	6834      	ldr	r4, [r6, #0]
   26c18:	6875      	ldr	r5, [r6, #4]
   26c1a:	0038      	movs	r0, r7
   26c1c:	0022      	movs	r2, r4
   26c1e:	002b      	movs	r3, r5
   26c20:	f000 fe68 	bl	278f4 <__aeabi_dadd>
   26c24:	9000      	str	r0, [sp, #0]
   26c26:	9101      	str	r1, [sp, #4]
   26c28:	9800      	ldr	r0, [sp, #0]
   26c2a:	9901      	ldr	r1, [sp, #4]
   26c2c:	0022      	movs	r2, r4
   26c2e:	002b      	movs	r3, r5
   26c30:	f002 f824 	bl	28c7c <__aeabi_dsub>
   26c34:	0004      	movs	r4, r0
   26c36:	000d      	movs	r5, r1
   26c38:	0020      	movs	r0, r4
   26c3a:	0029      	movs	r1, r5
   26c3c:	b002      	add	sp, #8
   26c3e:	bc04      	pop	{r2}
   26c40:	4690      	mov	r8, r2
   26c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26c44:	2e33      	cmp	r6, #51	; 0x33
   26c46:	dd0c      	ble.n	26c62 <rint+0xa6>
   26c48:	2380      	movs	r3, #128	; 0x80
   26c4a:	0004      	movs	r4, r0
   26c4c:	00db      	lsls	r3, r3, #3
   26c4e:	000d      	movs	r5, r1
   26c50:	429e      	cmp	r6, r3
   26c52:	d1f1      	bne.n	26c38 <rint+0x7c>
   26c54:	0002      	movs	r2, r0
   26c56:	000b      	movs	r3, r1
   26c58:	f000 fe4c 	bl	278f4 <__aeabi_dadd>
   26c5c:	0004      	movs	r4, r0
   26c5e:	000d      	movs	r5, r1
   26c60:	e7ea      	b.n	26c38 <rint+0x7c>
   26c62:	4c26      	ldr	r4, [pc, #152]	; (26cfc <rint+0x140>)
   26c64:	000d      	movs	r5, r1
   26c66:	46a4      	mov	ip, r4
   26c68:	2401      	movs	r4, #1
   26c6a:	4463      	add	r3, ip
   26c6c:	4264      	negs	r4, r4
   26c6e:	40dc      	lsrs	r4, r3
   26c70:	46a4      	mov	ip, r4
   26c72:	4661      	mov	r1, ip
   26c74:	0004      	movs	r4, r0
   26c76:	4201      	tst	r1, r0
   26c78:	d0de      	beq.n	26c38 <rint+0x7c>
   26c7a:	0849      	lsrs	r1, r1, #1
   26c7c:	4201      	tst	r1, r0
   26c7e:	d0c5      	beq.n	26c0c <rint+0x50>
   26c80:	2780      	movs	r7, #128	; 0x80
   26c82:	05ff      	lsls	r7, r7, #23
   26c84:	411f      	asrs	r7, r3
   26c86:	4388      	bics	r0, r1
   26c88:	4307      	orrs	r7, r0
   26c8a:	e7bf      	b.n	26c0c <rint+0x50>
   26c8c:	004b      	lsls	r3, r1, #1
   26c8e:	085b      	lsrs	r3, r3, #1
   26c90:	4303      	orrs	r3, r0
   26c92:	0004      	movs	r4, r0
   26c94:	000d      	movs	r5, r1
   26c96:	2b00      	cmp	r3, #0
   26c98:	d0ce      	beq.n	26c38 <rint+0x7c>
   26c9a:	030b      	lsls	r3, r1, #12
   26c9c:	0b1b      	lsrs	r3, r3, #12
   26c9e:	4303      	orrs	r3, r0
   26ca0:	001a      	movs	r2, r3
   26ca2:	425b      	negs	r3, r3
   26ca4:	4313      	orrs	r3, r2
   26ca6:	2280      	movs	r2, #128	; 0x80
   26ca8:	0b1b      	lsrs	r3, r3, #12
   26caa:	0312      	lsls	r2, r2, #12
   26cac:	4013      	ands	r3, r2
   26cae:	0c4a      	lsrs	r2, r1, #17
   26cb0:	0452      	lsls	r2, r2, #17
   26cb2:	4313      	orrs	r3, r2
   26cb4:	0019      	movs	r1, r3
   26cb6:	4643      	mov	r3, r8
   26cb8:	00da      	lsls	r2, r3, #3
   26cba:	4b0f      	ldr	r3, [pc, #60]	; (26cf8 <rint+0x13c>)
   26cbc:	189b      	adds	r3, r3, r2
   26cbe:	681c      	ldr	r4, [r3, #0]
   26cc0:	685d      	ldr	r5, [r3, #4]
   26cc2:	0022      	movs	r2, r4
   26cc4:	002b      	movs	r3, r5
   26cc6:	f000 fe15 	bl	278f4 <__aeabi_dadd>
   26cca:	9000      	str	r0, [sp, #0]
   26ccc:	9101      	str	r1, [sp, #4]
   26cce:	9800      	ldr	r0, [sp, #0]
   26cd0:	9901      	ldr	r1, [sp, #4]
   26cd2:	0022      	movs	r2, r4
   26cd4:	002b      	movs	r3, r5
   26cd6:	f001 ffd1 	bl	28c7c <__aeabi_dsub>
   26cda:	4642      	mov	r2, r8
   26cdc:	004b      	lsls	r3, r1, #1
   26cde:	085b      	lsrs	r3, r3, #1
   26ce0:	07d6      	lsls	r6, r2, #31
   26ce2:	4333      	orrs	r3, r6
   26ce4:	0004      	movs	r4, r0
   26ce6:	001d      	movs	r5, r3
   26ce8:	e7a6      	b.n	26c38 <rint+0x7c>
   26cea:	2780      	movs	r7, #128	; 0x80
   26cec:	063f      	lsls	r7, r7, #24
   26cee:	e788      	b.n	26c02 <rint+0x46>
   26cf0:	fffffc01 	.word	0xfffffc01
   26cf4:	000fffff 	.word	0x000fffff
   26cf8:	0002b6c0 	.word	0x0002b6c0
   26cfc:	fffffbed 	.word	0xfffffbed

00026d00 <scalbn>:
   26d00:	004b      	lsls	r3, r1, #1
   26d02:	b570      	push	{r4, r5, r6, lr}
   26d04:	0d5b      	lsrs	r3, r3, #21
   26d06:	0014      	movs	r4, r2
   26d08:	000a      	movs	r2, r1
   26d0a:	2b00      	cmp	r3, #0
   26d0c:	d11a      	bne.n	26d44 <scalbn+0x44>
   26d0e:	004b      	lsls	r3, r1, #1
   26d10:	085b      	lsrs	r3, r3, #1
   26d12:	4303      	orrs	r3, r0
   26d14:	d015      	beq.n	26d42 <scalbn+0x42>
   26d16:	2200      	movs	r2, #0
   26d18:	4b22      	ldr	r3, [pc, #136]	; (26da4 <scalbn+0xa4>)
   26d1a:	f001 fd2f 	bl	2877c <__aeabi_dmul>
   26d1e:	4b22      	ldr	r3, [pc, #136]	; (26da8 <scalbn+0xa8>)
   26d20:	000a      	movs	r2, r1
   26d22:	429c      	cmp	r4, r3
   26d24:	db22      	blt.n	26d6c <scalbn+0x6c>
   26d26:	004b      	lsls	r3, r1, #1
   26d28:	0d5b      	lsrs	r3, r3, #21
   26d2a:	3b36      	subs	r3, #54	; 0x36
   26d2c:	4d1f      	ldr	r5, [pc, #124]	; (26dac <scalbn+0xac>)
   26d2e:	18e3      	adds	r3, r4, r3
   26d30:	42ab      	cmp	r3, r5
   26d32:	dc20      	bgt.n	26d76 <scalbn+0x76>
   26d34:	2b00      	cmp	r3, #0
   26d36:	dd0d      	ble.n	26d54 <scalbn+0x54>
   26d38:	4c1d      	ldr	r4, [pc, #116]	; (26db0 <scalbn+0xb0>)
   26d3a:	051b      	lsls	r3, r3, #20
   26d3c:	4022      	ands	r2, r4
   26d3e:	431a      	orrs	r2, r3
   26d40:	0011      	movs	r1, r2
   26d42:	bd70      	pop	{r4, r5, r6, pc}
   26d44:	4d1b      	ldr	r5, [pc, #108]	; (26db4 <scalbn+0xb4>)
   26d46:	42ab      	cmp	r3, r5
   26d48:	d1f0      	bne.n	26d2c <scalbn+0x2c>
   26d4a:	0002      	movs	r2, r0
   26d4c:	000b      	movs	r3, r1
   26d4e:	f000 fdd1 	bl	278f4 <__aeabi_dadd>
   26d52:	e7f6      	b.n	26d42 <scalbn+0x42>
   26d54:	001d      	movs	r5, r3
   26d56:	3535      	adds	r5, #53	; 0x35
   26d58:	da18      	bge.n	26d8c <scalbn+0x8c>
   26d5a:	4b17      	ldr	r3, [pc, #92]	; (26db8 <scalbn+0xb8>)
   26d5c:	0002      	movs	r2, r0
   26d5e:	429c      	cmp	r4, r3
   26d60:	dc0a      	bgt.n	26d78 <scalbn+0x78>
   26d62:	000b      	movs	r3, r1
   26d64:	4815      	ldr	r0, [pc, #84]	; (26dbc <scalbn+0xbc>)
   26d66:	4916      	ldr	r1, [pc, #88]	; (26dc0 <scalbn+0xc0>)
   26d68:	f000 f832 	bl	26dd0 <copysign>
   26d6c:	4a13      	ldr	r2, [pc, #76]	; (26dbc <scalbn+0xbc>)
   26d6e:	4b14      	ldr	r3, [pc, #80]	; (26dc0 <scalbn+0xc0>)
   26d70:	f001 fd04 	bl	2877c <__aeabi_dmul>
   26d74:	e7e5      	b.n	26d42 <scalbn+0x42>
   26d76:	0002      	movs	r2, r0
   26d78:	000b      	movs	r3, r1
   26d7a:	4812      	ldr	r0, [pc, #72]	; (26dc4 <scalbn+0xc4>)
   26d7c:	4912      	ldr	r1, [pc, #72]	; (26dc8 <scalbn+0xc8>)
   26d7e:	f000 f827 	bl	26dd0 <copysign>
   26d82:	4a10      	ldr	r2, [pc, #64]	; (26dc4 <scalbn+0xc4>)
   26d84:	4b10      	ldr	r3, [pc, #64]	; (26dc8 <scalbn+0xc8>)
   26d86:	f001 fcf9 	bl	2877c <__aeabi_dmul>
   26d8a:	e7da      	b.n	26d42 <scalbn+0x42>
   26d8c:	4c08      	ldr	r4, [pc, #32]	; (26db0 <scalbn+0xb0>)
   26d8e:	3336      	adds	r3, #54	; 0x36
   26d90:	4022      	ands	r2, r4
   26d92:	051b      	lsls	r3, r3, #20
   26d94:	4313      	orrs	r3, r2
   26d96:	0019      	movs	r1, r3
   26d98:	2200      	movs	r2, #0
   26d9a:	4b0c      	ldr	r3, [pc, #48]	; (26dcc <scalbn+0xcc>)
   26d9c:	f001 fcee 	bl	2877c <__aeabi_dmul>
   26da0:	e7cf      	b.n	26d42 <scalbn+0x42>
   26da2:	46c0      	nop			; (mov r8, r8)
   26da4:	43500000 	.word	0x43500000
   26da8:	ffff3cb0 	.word	0xffff3cb0
   26dac:	000007fe 	.word	0x000007fe
   26db0:	800fffff 	.word	0x800fffff
   26db4:	000007ff 	.word	0x000007ff
   26db8:	0000c350 	.word	0x0000c350
   26dbc:	c2f8f359 	.word	0xc2f8f359
   26dc0:	01a56e1f 	.word	0x01a56e1f
   26dc4:	8800759c 	.word	0x8800759c
   26dc8:	7e37e43c 	.word	0x7e37e43c
   26dcc:	3c900000 	.word	0x3c900000

00026dd0 <copysign>:
   26dd0:	b530      	push	{r4, r5, lr}
   26dd2:	004a      	lsls	r2, r1, #1
   26dd4:	0fdb      	lsrs	r3, r3, #31
   26dd6:	07db      	lsls	r3, r3, #31
   26dd8:	0852      	lsrs	r2, r2, #1
   26dda:	431a      	orrs	r2, r3
   26ddc:	0011      	movs	r1, r2
   26dde:	bd30      	pop	{r4, r5, pc}

00026de0 <__udivsi3>:
   26de0:	2200      	movs	r2, #0
   26de2:	0843      	lsrs	r3, r0, #1
   26de4:	428b      	cmp	r3, r1
   26de6:	d374      	bcc.n	26ed2 <__udivsi3+0xf2>
   26de8:	0903      	lsrs	r3, r0, #4
   26dea:	428b      	cmp	r3, r1
   26dec:	d35f      	bcc.n	26eae <__udivsi3+0xce>
   26dee:	0a03      	lsrs	r3, r0, #8
   26df0:	428b      	cmp	r3, r1
   26df2:	d344      	bcc.n	26e7e <__udivsi3+0x9e>
   26df4:	0b03      	lsrs	r3, r0, #12
   26df6:	428b      	cmp	r3, r1
   26df8:	d328      	bcc.n	26e4c <__udivsi3+0x6c>
   26dfa:	0c03      	lsrs	r3, r0, #16
   26dfc:	428b      	cmp	r3, r1
   26dfe:	d30d      	bcc.n	26e1c <__udivsi3+0x3c>
   26e00:	22ff      	movs	r2, #255	; 0xff
   26e02:	0209      	lsls	r1, r1, #8
   26e04:	ba12      	rev	r2, r2
   26e06:	0c03      	lsrs	r3, r0, #16
   26e08:	428b      	cmp	r3, r1
   26e0a:	d302      	bcc.n	26e12 <__udivsi3+0x32>
   26e0c:	1212      	asrs	r2, r2, #8
   26e0e:	0209      	lsls	r1, r1, #8
   26e10:	d065      	beq.n	26ede <__udivsi3+0xfe>
   26e12:	0b03      	lsrs	r3, r0, #12
   26e14:	428b      	cmp	r3, r1
   26e16:	d319      	bcc.n	26e4c <__udivsi3+0x6c>
   26e18:	e000      	b.n	26e1c <__udivsi3+0x3c>
   26e1a:	0a09      	lsrs	r1, r1, #8
   26e1c:	0bc3      	lsrs	r3, r0, #15
   26e1e:	428b      	cmp	r3, r1
   26e20:	d301      	bcc.n	26e26 <__udivsi3+0x46>
   26e22:	03cb      	lsls	r3, r1, #15
   26e24:	1ac0      	subs	r0, r0, r3
   26e26:	4152      	adcs	r2, r2
   26e28:	0b83      	lsrs	r3, r0, #14
   26e2a:	428b      	cmp	r3, r1
   26e2c:	d301      	bcc.n	26e32 <__udivsi3+0x52>
   26e2e:	038b      	lsls	r3, r1, #14
   26e30:	1ac0      	subs	r0, r0, r3
   26e32:	4152      	adcs	r2, r2
   26e34:	0b43      	lsrs	r3, r0, #13
   26e36:	428b      	cmp	r3, r1
   26e38:	d301      	bcc.n	26e3e <__udivsi3+0x5e>
   26e3a:	034b      	lsls	r3, r1, #13
   26e3c:	1ac0      	subs	r0, r0, r3
   26e3e:	4152      	adcs	r2, r2
   26e40:	0b03      	lsrs	r3, r0, #12
   26e42:	428b      	cmp	r3, r1
   26e44:	d301      	bcc.n	26e4a <__udivsi3+0x6a>
   26e46:	030b      	lsls	r3, r1, #12
   26e48:	1ac0      	subs	r0, r0, r3
   26e4a:	4152      	adcs	r2, r2
   26e4c:	0ac3      	lsrs	r3, r0, #11
   26e4e:	428b      	cmp	r3, r1
   26e50:	d301      	bcc.n	26e56 <__udivsi3+0x76>
   26e52:	02cb      	lsls	r3, r1, #11
   26e54:	1ac0      	subs	r0, r0, r3
   26e56:	4152      	adcs	r2, r2
   26e58:	0a83      	lsrs	r3, r0, #10
   26e5a:	428b      	cmp	r3, r1
   26e5c:	d301      	bcc.n	26e62 <__udivsi3+0x82>
   26e5e:	028b      	lsls	r3, r1, #10
   26e60:	1ac0      	subs	r0, r0, r3
   26e62:	4152      	adcs	r2, r2
   26e64:	0a43      	lsrs	r3, r0, #9
   26e66:	428b      	cmp	r3, r1
   26e68:	d301      	bcc.n	26e6e <__udivsi3+0x8e>
   26e6a:	024b      	lsls	r3, r1, #9
   26e6c:	1ac0      	subs	r0, r0, r3
   26e6e:	4152      	adcs	r2, r2
   26e70:	0a03      	lsrs	r3, r0, #8
   26e72:	428b      	cmp	r3, r1
   26e74:	d301      	bcc.n	26e7a <__udivsi3+0x9a>
   26e76:	020b      	lsls	r3, r1, #8
   26e78:	1ac0      	subs	r0, r0, r3
   26e7a:	4152      	adcs	r2, r2
   26e7c:	d2cd      	bcs.n	26e1a <__udivsi3+0x3a>
   26e7e:	09c3      	lsrs	r3, r0, #7
   26e80:	428b      	cmp	r3, r1
   26e82:	d301      	bcc.n	26e88 <__udivsi3+0xa8>
   26e84:	01cb      	lsls	r3, r1, #7
   26e86:	1ac0      	subs	r0, r0, r3
   26e88:	4152      	adcs	r2, r2
   26e8a:	0983      	lsrs	r3, r0, #6
   26e8c:	428b      	cmp	r3, r1
   26e8e:	d301      	bcc.n	26e94 <__udivsi3+0xb4>
   26e90:	018b      	lsls	r3, r1, #6
   26e92:	1ac0      	subs	r0, r0, r3
   26e94:	4152      	adcs	r2, r2
   26e96:	0943      	lsrs	r3, r0, #5
   26e98:	428b      	cmp	r3, r1
   26e9a:	d301      	bcc.n	26ea0 <__udivsi3+0xc0>
   26e9c:	014b      	lsls	r3, r1, #5
   26e9e:	1ac0      	subs	r0, r0, r3
   26ea0:	4152      	adcs	r2, r2
   26ea2:	0903      	lsrs	r3, r0, #4
   26ea4:	428b      	cmp	r3, r1
   26ea6:	d301      	bcc.n	26eac <__udivsi3+0xcc>
   26ea8:	010b      	lsls	r3, r1, #4
   26eaa:	1ac0      	subs	r0, r0, r3
   26eac:	4152      	adcs	r2, r2
   26eae:	08c3      	lsrs	r3, r0, #3
   26eb0:	428b      	cmp	r3, r1
   26eb2:	d301      	bcc.n	26eb8 <__udivsi3+0xd8>
   26eb4:	00cb      	lsls	r3, r1, #3
   26eb6:	1ac0      	subs	r0, r0, r3
   26eb8:	4152      	adcs	r2, r2
   26eba:	0883      	lsrs	r3, r0, #2
   26ebc:	428b      	cmp	r3, r1
   26ebe:	d301      	bcc.n	26ec4 <__udivsi3+0xe4>
   26ec0:	008b      	lsls	r3, r1, #2
   26ec2:	1ac0      	subs	r0, r0, r3
   26ec4:	4152      	adcs	r2, r2
   26ec6:	0843      	lsrs	r3, r0, #1
   26ec8:	428b      	cmp	r3, r1
   26eca:	d301      	bcc.n	26ed0 <__udivsi3+0xf0>
   26ecc:	004b      	lsls	r3, r1, #1
   26ece:	1ac0      	subs	r0, r0, r3
   26ed0:	4152      	adcs	r2, r2
   26ed2:	1a41      	subs	r1, r0, r1
   26ed4:	d200      	bcs.n	26ed8 <__udivsi3+0xf8>
   26ed6:	4601      	mov	r1, r0
   26ed8:	4152      	adcs	r2, r2
   26eda:	4610      	mov	r0, r2
   26edc:	4770      	bx	lr
   26ede:	e7ff      	b.n	26ee0 <__udivsi3+0x100>
   26ee0:	b501      	push	{r0, lr}
   26ee2:	2000      	movs	r0, #0
   26ee4:	f000 f8f0 	bl	270c8 <__aeabi_idiv0>
   26ee8:	bd02      	pop	{r1, pc}
   26eea:	46c0      	nop			; (mov r8, r8)

00026eec <__aeabi_uidivmod>:
   26eec:	2900      	cmp	r1, #0
   26eee:	d0f7      	beq.n	26ee0 <__udivsi3+0x100>
   26ef0:	e776      	b.n	26de0 <__udivsi3>
   26ef2:	4770      	bx	lr

00026ef4 <__divsi3>:
   26ef4:	4603      	mov	r3, r0
   26ef6:	430b      	orrs	r3, r1
   26ef8:	d47f      	bmi.n	26ffa <__divsi3+0x106>
   26efa:	2200      	movs	r2, #0
   26efc:	0843      	lsrs	r3, r0, #1
   26efe:	428b      	cmp	r3, r1
   26f00:	d374      	bcc.n	26fec <__divsi3+0xf8>
   26f02:	0903      	lsrs	r3, r0, #4
   26f04:	428b      	cmp	r3, r1
   26f06:	d35f      	bcc.n	26fc8 <__divsi3+0xd4>
   26f08:	0a03      	lsrs	r3, r0, #8
   26f0a:	428b      	cmp	r3, r1
   26f0c:	d344      	bcc.n	26f98 <__divsi3+0xa4>
   26f0e:	0b03      	lsrs	r3, r0, #12
   26f10:	428b      	cmp	r3, r1
   26f12:	d328      	bcc.n	26f66 <__divsi3+0x72>
   26f14:	0c03      	lsrs	r3, r0, #16
   26f16:	428b      	cmp	r3, r1
   26f18:	d30d      	bcc.n	26f36 <__divsi3+0x42>
   26f1a:	22ff      	movs	r2, #255	; 0xff
   26f1c:	0209      	lsls	r1, r1, #8
   26f1e:	ba12      	rev	r2, r2
   26f20:	0c03      	lsrs	r3, r0, #16
   26f22:	428b      	cmp	r3, r1
   26f24:	d302      	bcc.n	26f2c <__divsi3+0x38>
   26f26:	1212      	asrs	r2, r2, #8
   26f28:	0209      	lsls	r1, r1, #8
   26f2a:	d065      	beq.n	26ff8 <__divsi3+0x104>
   26f2c:	0b03      	lsrs	r3, r0, #12
   26f2e:	428b      	cmp	r3, r1
   26f30:	d319      	bcc.n	26f66 <__divsi3+0x72>
   26f32:	e000      	b.n	26f36 <__divsi3+0x42>
   26f34:	0a09      	lsrs	r1, r1, #8
   26f36:	0bc3      	lsrs	r3, r0, #15
   26f38:	428b      	cmp	r3, r1
   26f3a:	d301      	bcc.n	26f40 <__divsi3+0x4c>
   26f3c:	03cb      	lsls	r3, r1, #15
   26f3e:	1ac0      	subs	r0, r0, r3
   26f40:	4152      	adcs	r2, r2
   26f42:	0b83      	lsrs	r3, r0, #14
   26f44:	428b      	cmp	r3, r1
   26f46:	d301      	bcc.n	26f4c <__divsi3+0x58>
   26f48:	038b      	lsls	r3, r1, #14
   26f4a:	1ac0      	subs	r0, r0, r3
   26f4c:	4152      	adcs	r2, r2
   26f4e:	0b43      	lsrs	r3, r0, #13
   26f50:	428b      	cmp	r3, r1
   26f52:	d301      	bcc.n	26f58 <__divsi3+0x64>
   26f54:	034b      	lsls	r3, r1, #13
   26f56:	1ac0      	subs	r0, r0, r3
   26f58:	4152      	adcs	r2, r2
   26f5a:	0b03      	lsrs	r3, r0, #12
   26f5c:	428b      	cmp	r3, r1
   26f5e:	d301      	bcc.n	26f64 <__divsi3+0x70>
   26f60:	030b      	lsls	r3, r1, #12
   26f62:	1ac0      	subs	r0, r0, r3
   26f64:	4152      	adcs	r2, r2
   26f66:	0ac3      	lsrs	r3, r0, #11
   26f68:	428b      	cmp	r3, r1
   26f6a:	d301      	bcc.n	26f70 <__divsi3+0x7c>
   26f6c:	02cb      	lsls	r3, r1, #11
   26f6e:	1ac0      	subs	r0, r0, r3
   26f70:	4152      	adcs	r2, r2
   26f72:	0a83      	lsrs	r3, r0, #10
   26f74:	428b      	cmp	r3, r1
   26f76:	d301      	bcc.n	26f7c <__divsi3+0x88>
   26f78:	028b      	lsls	r3, r1, #10
   26f7a:	1ac0      	subs	r0, r0, r3
   26f7c:	4152      	adcs	r2, r2
   26f7e:	0a43      	lsrs	r3, r0, #9
   26f80:	428b      	cmp	r3, r1
   26f82:	d301      	bcc.n	26f88 <__divsi3+0x94>
   26f84:	024b      	lsls	r3, r1, #9
   26f86:	1ac0      	subs	r0, r0, r3
   26f88:	4152      	adcs	r2, r2
   26f8a:	0a03      	lsrs	r3, r0, #8
   26f8c:	428b      	cmp	r3, r1
   26f8e:	d301      	bcc.n	26f94 <__divsi3+0xa0>
   26f90:	020b      	lsls	r3, r1, #8
   26f92:	1ac0      	subs	r0, r0, r3
   26f94:	4152      	adcs	r2, r2
   26f96:	d2cd      	bcs.n	26f34 <__divsi3+0x40>
   26f98:	09c3      	lsrs	r3, r0, #7
   26f9a:	428b      	cmp	r3, r1
   26f9c:	d301      	bcc.n	26fa2 <__divsi3+0xae>
   26f9e:	01cb      	lsls	r3, r1, #7
   26fa0:	1ac0      	subs	r0, r0, r3
   26fa2:	4152      	adcs	r2, r2
   26fa4:	0983      	lsrs	r3, r0, #6
   26fa6:	428b      	cmp	r3, r1
   26fa8:	d301      	bcc.n	26fae <__divsi3+0xba>
   26faa:	018b      	lsls	r3, r1, #6
   26fac:	1ac0      	subs	r0, r0, r3
   26fae:	4152      	adcs	r2, r2
   26fb0:	0943      	lsrs	r3, r0, #5
   26fb2:	428b      	cmp	r3, r1
   26fb4:	d301      	bcc.n	26fba <__divsi3+0xc6>
   26fb6:	014b      	lsls	r3, r1, #5
   26fb8:	1ac0      	subs	r0, r0, r3
   26fba:	4152      	adcs	r2, r2
   26fbc:	0903      	lsrs	r3, r0, #4
   26fbe:	428b      	cmp	r3, r1
   26fc0:	d301      	bcc.n	26fc6 <__divsi3+0xd2>
   26fc2:	010b      	lsls	r3, r1, #4
   26fc4:	1ac0      	subs	r0, r0, r3
   26fc6:	4152      	adcs	r2, r2
   26fc8:	08c3      	lsrs	r3, r0, #3
   26fca:	428b      	cmp	r3, r1
   26fcc:	d301      	bcc.n	26fd2 <__divsi3+0xde>
   26fce:	00cb      	lsls	r3, r1, #3
   26fd0:	1ac0      	subs	r0, r0, r3
   26fd2:	4152      	adcs	r2, r2
   26fd4:	0883      	lsrs	r3, r0, #2
   26fd6:	428b      	cmp	r3, r1
   26fd8:	d301      	bcc.n	26fde <__divsi3+0xea>
   26fda:	008b      	lsls	r3, r1, #2
   26fdc:	1ac0      	subs	r0, r0, r3
   26fde:	4152      	adcs	r2, r2
   26fe0:	0843      	lsrs	r3, r0, #1
   26fe2:	428b      	cmp	r3, r1
   26fe4:	d301      	bcc.n	26fea <__divsi3+0xf6>
   26fe6:	004b      	lsls	r3, r1, #1
   26fe8:	1ac0      	subs	r0, r0, r3
   26fea:	4152      	adcs	r2, r2
   26fec:	1a41      	subs	r1, r0, r1
   26fee:	d200      	bcs.n	26ff2 <__divsi3+0xfe>
   26ff0:	4601      	mov	r1, r0
   26ff2:	4152      	adcs	r2, r2
   26ff4:	4610      	mov	r0, r2
   26ff6:	4770      	bx	lr
   26ff8:	e05d      	b.n	270b6 <__divsi3+0x1c2>
   26ffa:	0fca      	lsrs	r2, r1, #31
   26ffc:	d000      	beq.n	27000 <__divsi3+0x10c>
   26ffe:	4249      	negs	r1, r1
   27000:	1003      	asrs	r3, r0, #32
   27002:	d300      	bcc.n	27006 <__divsi3+0x112>
   27004:	4240      	negs	r0, r0
   27006:	4053      	eors	r3, r2
   27008:	2200      	movs	r2, #0
   2700a:	469c      	mov	ip, r3
   2700c:	0903      	lsrs	r3, r0, #4
   2700e:	428b      	cmp	r3, r1
   27010:	d32d      	bcc.n	2706e <__divsi3+0x17a>
   27012:	0a03      	lsrs	r3, r0, #8
   27014:	428b      	cmp	r3, r1
   27016:	d312      	bcc.n	2703e <__divsi3+0x14a>
   27018:	22fc      	movs	r2, #252	; 0xfc
   2701a:	0189      	lsls	r1, r1, #6
   2701c:	ba12      	rev	r2, r2
   2701e:	0a03      	lsrs	r3, r0, #8
   27020:	428b      	cmp	r3, r1
   27022:	d30c      	bcc.n	2703e <__divsi3+0x14a>
   27024:	0189      	lsls	r1, r1, #6
   27026:	1192      	asrs	r2, r2, #6
   27028:	428b      	cmp	r3, r1
   2702a:	d308      	bcc.n	2703e <__divsi3+0x14a>
   2702c:	0189      	lsls	r1, r1, #6
   2702e:	1192      	asrs	r2, r2, #6
   27030:	428b      	cmp	r3, r1
   27032:	d304      	bcc.n	2703e <__divsi3+0x14a>
   27034:	0189      	lsls	r1, r1, #6
   27036:	d03a      	beq.n	270ae <__divsi3+0x1ba>
   27038:	1192      	asrs	r2, r2, #6
   2703a:	e000      	b.n	2703e <__divsi3+0x14a>
   2703c:	0989      	lsrs	r1, r1, #6
   2703e:	09c3      	lsrs	r3, r0, #7
   27040:	428b      	cmp	r3, r1
   27042:	d301      	bcc.n	27048 <__divsi3+0x154>
   27044:	01cb      	lsls	r3, r1, #7
   27046:	1ac0      	subs	r0, r0, r3
   27048:	4152      	adcs	r2, r2
   2704a:	0983      	lsrs	r3, r0, #6
   2704c:	428b      	cmp	r3, r1
   2704e:	d301      	bcc.n	27054 <__divsi3+0x160>
   27050:	018b      	lsls	r3, r1, #6
   27052:	1ac0      	subs	r0, r0, r3
   27054:	4152      	adcs	r2, r2
   27056:	0943      	lsrs	r3, r0, #5
   27058:	428b      	cmp	r3, r1
   2705a:	d301      	bcc.n	27060 <__divsi3+0x16c>
   2705c:	014b      	lsls	r3, r1, #5
   2705e:	1ac0      	subs	r0, r0, r3
   27060:	4152      	adcs	r2, r2
   27062:	0903      	lsrs	r3, r0, #4
   27064:	428b      	cmp	r3, r1
   27066:	d301      	bcc.n	2706c <__divsi3+0x178>
   27068:	010b      	lsls	r3, r1, #4
   2706a:	1ac0      	subs	r0, r0, r3
   2706c:	4152      	adcs	r2, r2
   2706e:	08c3      	lsrs	r3, r0, #3
   27070:	428b      	cmp	r3, r1
   27072:	d301      	bcc.n	27078 <__divsi3+0x184>
   27074:	00cb      	lsls	r3, r1, #3
   27076:	1ac0      	subs	r0, r0, r3
   27078:	4152      	adcs	r2, r2
   2707a:	0883      	lsrs	r3, r0, #2
   2707c:	428b      	cmp	r3, r1
   2707e:	d301      	bcc.n	27084 <__divsi3+0x190>
   27080:	008b      	lsls	r3, r1, #2
   27082:	1ac0      	subs	r0, r0, r3
   27084:	4152      	adcs	r2, r2
   27086:	d2d9      	bcs.n	2703c <__divsi3+0x148>
   27088:	0843      	lsrs	r3, r0, #1
   2708a:	428b      	cmp	r3, r1
   2708c:	d301      	bcc.n	27092 <__divsi3+0x19e>
   2708e:	004b      	lsls	r3, r1, #1
   27090:	1ac0      	subs	r0, r0, r3
   27092:	4152      	adcs	r2, r2
   27094:	1a41      	subs	r1, r0, r1
   27096:	d200      	bcs.n	2709a <__divsi3+0x1a6>
   27098:	4601      	mov	r1, r0
   2709a:	4663      	mov	r3, ip
   2709c:	4152      	adcs	r2, r2
   2709e:	105b      	asrs	r3, r3, #1
   270a0:	4610      	mov	r0, r2
   270a2:	d301      	bcc.n	270a8 <__divsi3+0x1b4>
   270a4:	4240      	negs	r0, r0
   270a6:	2b00      	cmp	r3, #0
   270a8:	d500      	bpl.n	270ac <__divsi3+0x1b8>
   270aa:	4249      	negs	r1, r1
   270ac:	4770      	bx	lr
   270ae:	4663      	mov	r3, ip
   270b0:	105b      	asrs	r3, r3, #1
   270b2:	d300      	bcc.n	270b6 <__divsi3+0x1c2>
   270b4:	4240      	negs	r0, r0
   270b6:	b501      	push	{r0, lr}
   270b8:	2000      	movs	r0, #0
   270ba:	f000 f805 	bl	270c8 <__aeabi_idiv0>
   270be:	bd02      	pop	{r1, pc}

000270c0 <__aeabi_idivmod>:
   270c0:	2900      	cmp	r1, #0
   270c2:	d0f8      	beq.n	270b6 <__divsi3+0x1c2>
   270c4:	e716      	b.n	26ef4 <__divsi3>
   270c6:	4770      	bx	lr

000270c8 <__aeabi_idiv0>:
   270c8:	4770      	bx	lr
   270ca:	46c0      	nop			; (mov r8, r8)

000270cc <__aeabi_cdrcmple>:
   270cc:	4684      	mov	ip, r0
   270ce:	1c10      	adds	r0, r2, #0
   270d0:	4662      	mov	r2, ip
   270d2:	468c      	mov	ip, r1
   270d4:	1c19      	adds	r1, r3, #0
   270d6:	4663      	mov	r3, ip
   270d8:	e000      	b.n	270dc <__aeabi_cdcmpeq>
   270da:	46c0      	nop			; (mov r8, r8)

000270dc <__aeabi_cdcmpeq>:
   270dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   270de:	f001 faeb 	bl	286b8 <__ledf2>
   270e2:	2800      	cmp	r0, #0
   270e4:	d401      	bmi.n	270ea <__aeabi_cdcmpeq+0xe>
   270e6:	2100      	movs	r1, #0
   270e8:	42c8      	cmn	r0, r1
   270ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000270ec <__aeabi_dcmpeq>:
   270ec:	b510      	push	{r4, lr}
   270ee:	f001 fa45 	bl	2857c <__eqdf2>
   270f2:	4240      	negs	r0, r0
   270f4:	3001      	adds	r0, #1
   270f6:	bd10      	pop	{r4, pc}

000270f8 <__aeabi_dcmplt>:
   270f8:	b510      	push	{r4, lr}
   270fa:	f001 fadd 	bl	286b8 <__ledf2>
   270fe:	2800      	cmp	r0, #0
   27100:	db01      	blt.n	27106 <__aeabi_dcmplt+0xe>
   27102:	2000      	movs	r0, #0
   27104:	bd10      	pop	{r4, pc}
   27106:	2001      	movs	r0, #1
   27108:	bd10      	pop	{r4, pc}
   2710a:	46c0      	nop			; (mov r8, r8)

0002710c <__aeabi_dcmple>:
   2710c:	b510      	push	{r4, lr}
   2710e:	f001 fad3 	bl	286b8 <__ledf2>
   27112:	2800      	cmp	r0, #0
   27114:	dd01      	ble.n	2711a <__aeabi_dcmple+0xe>
   27116:	2000      	movs	r0, #0
   27118:	bd10      	pop	{r4, pc}
   2711a:	2001      	movs	r0, #1
   2711c:	bd10      	pop	{r4, pc}
   2711e:	46c0      	nop			; (mov r8, r8)

00027120 <__aeabi_dcmpgt>:
   27120:	b510      	push	{r4, lr}
   27122:	f001 fa65 	bl	285f0 <__gedf2>
   27126:	2800      	cmp	r0, #0
   27128:	dc01      	bgt.n	2712e <__aeabi_dcmpgt+0xe>
   2712a:	2000      	movs	r0, #0
   2712c:	bd10      	pop	{r4, pc}
   2712e:	2001      	movs	r0, #1
   27130:	bd10      	pop	{r4, pc}
   27132:	46c0      	nop			; (mov r8, r8)

00027134 <__aeabi_dcmpge>:
   27134:	b510      	push	{r4, lr}
   27136:	f001 fa5b 	bl	285f0 <__gedf2>
   2713a:	2800      	cmp	r0, #0
   2713c:	da01      	bge.n	27142 <__aeabi_dcmpge+0xe>
   2713e:	2000      	movs	r0, #0
   27140:	bd10      	pop	{r4, pc}
   27142:	2001      	movs	r0, #1
   27144:	bd10      	pop	{r4, pc}
   27146:	46c0      	nop			; (mov r8, r8)

00027148 <__aeabi_uldivmod>:
   27148:	2b00      	cmp	r3, #0
   2714a:	d111      	bne.n	27170 <__aeabi_uldivmod+0x28>
   2714c:	2a00      	cmp	r2, #0
   2714e:	d10f      	bne.n	27170 <__aeabi_uldivmod+0x28>
   27150:	2900      	cmp	r1, #0
   27152:	d100      	bne.n	27156 <__aeabi_uldivmod+0xe>
   27154:	2800      	cmp	r0, #0
   27156:	d002      	beq.n	2715e <__aeabi_uldivmod+0x16>
   27158:	2100      	movs	r1, #0
   2715a:	43c9      	mvns	r1, r1
   2715c:	1c08      	adds	r0, r1, #0
   2715e:	b407      	push	{r0, r1, r2}
   27160:	4802      	ldr	r0, [pc, #8]	; (2716c <__aeabi_uldivmod+0x24>)
   27162:	a102      	add	r1, pc, #8	; (adr r1, 2716c <__aeabi_uldivmod+0x24>)
   27164:	1840      	adds	r0, r0, r1
   27166:	9002      	str	r0, [sp, #8]
   27168:	bd03      	pop	{r0, r1, pc}
   2716a:	46c0      	nop			; (mov r8, r8)
   2716c:	ffffff5d 	.word	0xffffff5d
   27170:	b403      	push	{r0, r1}
   27172:	4668      	mov	r0, sp
   27174:	b501      	push	{r0, lr}
   27176:	9802      	ldr	r0, [sp, #8]
   27178:	f000 f84e 	bl	27218 <__udivmoddi4>
   2717c:	9b01      	ldr	r3, [sp, #4]
   2717e:	469e      	mov	lr, r3
   27180:	b002      	add	sp, #8
   27182:	bc0c      	pop	{r2, r3}
   27184:	4770      	bx	lr
   27186:	46c0      	nop			; (mov r8, r8)

00027188 <__aeabi_lmul>:
   27188:	b5f0      	push	{r4, r5, r6, r7, lr}
   2718a:	46ce      	mov	lr, r9
   2718c:	4647      	mov	r7, r8
   2718e:	0415      	lsls	r5, r2, #16
   27190:	0c2d      	lsrs	r5, r5, #16
   27192:	002e      	movs	r6, r5
   27194:	b580      	push	{r7, lr}
   27196:	0407      	lsls	r7, r0, #16
   27198:	0c14      	lsrs	r4, r2, #16
   2719a:	0c3f      	lsrs	r7, r7, #16
   2719c:	4699      	mov	r9, r3
   2719e:	0c03      	lsrs	r3, r0, #16
   271a0:	437e      	muls	r6, r7
   271a2:	435d      	muls	r5, r3
   271a4:	4367      	muls	r7, r4
   271a6:	4363      	muls	r3, r4
   271a8:	197f      	adds	r7, r7, r5
   271aa:	0c34      	lsrs	r4, r6, #16
   271ac:	19e4      	adds	r4, r4, r7
   271ae:	469c      	mov	ip, r3
   271b0:	42a5      	cmp	r5, r4
   271b2:	d903      	bls.n	271bc <__aeabi_lmul+0x34>
   271b4:	2380      	movs	r3, #128	; 0x80
   271b6:	025b      	lsls	r3, r3, #9
   271b8:	4698      	mov	r8, r3
   271ba:	44c4      	add	ip, r8
   271bc:	464b      	mov	r3, r9
   271be:	4351      	muls	r1, r2
   271c0:	4343      	muls	r3, r0
   271c2:	0436      	lsls	r6, r6, #16
   271c4:	0c36      	lsrs	r6, r6, #16
   271c6:	0c25      	lsrs	r5, r4, #16
   271c8:	0424      	lsls	r4, r4, #16
   271ca:	4465      	add	r5, ip
   271cc:	19a4      	adds	r4, r4, r6
   271ce:	1859      	adds	r1, r3, r1
   271d0:	1949      	adds	r1, r1, r5
   271d2:	0020      	movs	r0, r4
   271d4:	bc0c      	pop	{r2, r3}
   271d6:	4690      	mov	r8, r2
   271d8:	4699      	mov	r9, r3
   271da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000271dc <__aeabi_d2uiz>:
   271dc:	b570      	push	{r4, r5, r6, lr}
   271de:	2200      	movs	r2, #0
   271e0:	4b0c      	ldr	r3, [pc, #48]	; (27214 <__aeabi_d2uiz+0x38>)
   271e2:	0004      	movs	r4, r0
   271e4:	000d      	movs	r5, r1
   271e6:	f7ff ffa5 	bl	27134 <__aeabi_dcmpge>
   271ea:	2800      	cmp	r0, #0
   271ec:	d104      	bne.n	271f8 <__aeabi_d2uiz+0x1c>
   271ee:	0020      	movs	r0, r4
   271f0:	0029      	movs	r1, r5
   271f2:	f002 f879 	bl	292e8 <__aeabi_d2iz>
   271f6:	bd70      	pop	{r4, r5, r6, pc}
   271f8:	4b06      	ldr	r3, [pc, #24]	; (27214 <__aeabi_d2uiz+0x38>)
   271fa:	2200      	movs	r2, #0
   271fc:	0020      	movs	r0, r4
   271fe:	0029      	movs	r1, r5
   27200:	f001 fd3c 	bl	28c7c <__aeabi_dsub>
   27204:	f002 f870 	bl	292e8 <__aeabi_d2iz>
   27208:	2380      	movs	r3, #128	; 0x80
   2720a:	061b      	lsls	r3, r3, #24
   2720c:	469c      	mov	ip, r3
   2720e:	4460      	add	r0, ip
   27210:	e7f1      	b.n	271f6 <__aeabi_d2uiz+0x1a>
   27212:	46c0      	nop			; (mov r8, r8)
   27214:	41e00000 	.word	0x41e00000

00027218 <__udivmoddi4>:
   27218:	b5f0      	push	{r4, r5, r6, r7, lr}
   2721a:	4657      	mov	r7, sl
   2721c:	464e      	mov	r6, r9
   2721e:	4645      	mov	r5, r8
   27220:	46de      	mov	lr, fp
   27222:	b5e0      	push	{r5, r6, r7, lr}
   27224:	0004      	movs	r4, r0
   27226:	b083      	sub	sp, #12
   27228:	000d      	movs	r5, r1
   2722a:	4692      	mov	sl, r2
   2722c:	4699      	mov	r9, r3
   2722e:	428b      	cmp	r3, r1
   27230:	d82f      	bhi.n	27292 <__udivmoddi4+0x7a>
   27232:	d02c      	beq.n	2728e <__udivmoddi4+0x76>
   27234:	4649      	mov	r1, r9
   27236:	4650      	mov	r0, sl
   27238:	f002 f974 	bl	29524 <__clzdi2>
   2723c:	0029      	movs	r1, r5
   2723e:	0006      	movs	r6, r0
   27240:	0020      	movs	r0, r4
   27242:	f002 f96f 	bl	29524 <__clzdi2>
   27246:	1a33      	subs	r3, r6, r0
   27248:	4698      	mov	r8, r3
   2724a:	3b20      	subs	r3, #32
   2724c:	469b      	mov	fp, r3
   2724e:	d500      	bpl.n	27252 <__udivmoddi4+0x3a>
   27250:	e074      	b.n	2733c <__udivmoddi4+0x124>
   27252:	4653      	mov	r3, sl
   27254:	465a      	mov	r2, fp
   27256:	4093      	lsls	r3, r2
   27258:	001f      	movs	r7, r3
   2725a:	4653      	mov	r3, sl
   2725c:	4642      	mov	r2, r8
   2725e:	4093      	lsls	r3, r2
   27260:	001e      	movs	r6, r3
   27262:	42af      	cmp	r7, r5
   27264:	d829      	bhi.n	272ba <__udivmoddi4+0xa2>
   27266:	d026      	beq.n	272b6 <__udivmoddi4+0x9e>
   27268:	465b      	mov	r3, fp
   2726a:	1ba4      	subs	r4, r4, r6
   2726c:	41bd      	sbcs	r5, r7
   2726e:	2b00      	cmp	r3, #0
   27270:	da00      	bge.n	27274 <__udivmoddi4+0x5c>
   27272:	e079      	b.n	27368 <__udivmoddi4+0x150>
   27274:	2200      	movs	r2, #0
   27276:	2300      	movs	r3, #0
   27278:	9200      	str	r2, [sp, #0]
   2727a:	9301      	str	r3, [sp, #4]
   2727c:	2301      	movs	r3, #1
   2727e:	465a      	mov	r2, fp
   27280:	4093      	lsls	r3, r2
   27282:	9301      	str	r3, [sp, #4]
   27284:	2301      	movs	r3, #1
   27286:	4642      	mov	r2, r8
   27288:	4093      	lsls	r3, r2
   2728a:	9300      	str	r3, [sp, #0]
   2728c:	e019      	b.n	272c2 <__udivmoddi4+0xaa>
   2728e:	4282      	cmp	r2, r0
   27290:	d9d0      	bls.n	27234 <__udivmoddi4+0x1c>
   27292:	2200      	movs	r2, #0
   27294:	2300      	movs	r3, #0
   27296:	9200      	str	r2, [sp, #0]
   27298:	9301      	str	r3, [sp, #4]
   2729a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2729c:	2b00      	cmp	r3, #0
   2729e:	d001      	beq.n	272a4 <__udivmoddi4+0x8c>
   272a0:	601c      	str	r4, [r3, #0]
   272a2:	605d      	str	r5, [r3, #4]
   272a4:	9800      	ldr	r0, [sp, #0]
   272a6:	9901      	ldr	r1, [sp, #4]
   272a8:	b003      	add	sp, #12
   272aa:	bc3c      	pop	{r2, r3, r4, r5}
   272ac:	4690      	mov	r8, r2
   272ae:	4699      	mov	r9, r3
   272b0:	46a2      	mov	sl, r4
   272b2:	46ab      	mov	fp, r5
   272b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   272b6:	42a3      	cmp	r3, r4
   272b8:	d9d6      	bls.n	27268 <__udivmoddi4+0x50>
   272ba:	2200      	movs	r2, #0
   272bc:	2300      	movs	r3, #0
   272be:	9200      	str	r2, [sp, #0]
   272c0:	9301      	str	r3, [sp, #4]
   272c2:	4643      	mov	r3, r8
   272c4:	2b00      	cmp	r3, #0
   272c6:	d0e8      	beq.n	2729a <__udivmoddi4+0x82>
   272c8:	07fb      	lsls	r3, r7, #31
   272ca:	0872      	lsrs	r2, r6, #1
   272cc:	431a      	orrs	r2, r3
   272ce:	4646      	mov	r6, r8
   272d0:	087b      	lsrs	r3, r7, #1
   272d2:	e00e      	b.n	272f2 <__udivmoddi4+0xda>
   272d4:	42ab      	cmp	r3, r5
   272d6:	d101      	bne.n	272dc <__udivmoddi4+0xc4>
   272d8:	42a2      	cmp	r2, r4
   272da:	d80c      	bhi.n	272f6 <__udivmoddi4+0xde>
   272dc:	1aa4      	subs	r4, r4, r2
   272de:	419d      	sbcs	r5, r3
   272e0:	2001      	movs	r0, #1
   272e2:	1924      	adds	r4, r4, r4
   272e4:	416d      	adcs	r5, r5
   272e6:	2100      	movs	r1, #0
   272e8:	3e01      	subs	r6, #1
   272ea:	1824      	adds	r4, r4, r0
   272ec:	414d      	adcs	r5, r1
   272ee:	2e00      	cmp	r6, #0
   272f0:	d006      	beq.n	27300 <__udivmoddi4+0xe8>
   272f2:	42ab      	cmp	r3, r5
   272f4:	d9ee      	bls.n	272d4 <__udivmoddi4+0xbc>
   272f6:	3e01      	subs	r6, #1
   272f8:	1924      	adds	r4, r4, r4
   272fa:	416d      	adcs	r5, r5
   272fc:	2e00      	cmp	r6, #0
   272fe:	d1f8      	bne.n	272f2 <__udivmoddi4+0xda>
   27300:	465b      	mov	r3, fp
   27302:	9800      	ldr	r0, [sp, #0]
   27304:	9901      	ldr	r1, [sp, #4]
   27306:	1900      	adds	r0, r0, r4
   27308:	4169      	adcs	r1, r5
   2730a:	2b00      	cmp	r3, #0
   2730c:	db22      	blt.n	27354 <__udivmoddi4+0x13c>
   2730e:	002b      	movs	r3, r5
   27310:	465a      	mov	r2, fp
   27312:	40d3      	lsrs	r3, r2
   27314:	002a      	movs	r2, r5
   27316:	4644      	mov	r4, r8
   27318:	40e2      	lsrs	r2, r4
   2731a:	001c      	movs	r4, r3
   2731c:	465b      	mov	r3, fp
   2731e:	0015      	movs	r5, r2
   27320:	2b00      	cmp	r3, #0
   27322:	db2c      	blt.n	2737e <__udivmoddi4+0x166>
   27324:	0026      	movs	r6, r4
   27326:	409e      	lsls	r6, r3
   27328:	0033      	movs	r3, r6
   2732a:	0026      	movs	r6, r4
   2732c:	4647      	mov	r7, r8
   2732e:	40be      	lsls	r6, r7
   27330:	0032      	movs	r2, r6
   27332:	1a80      	subs	r0, r0, r2
   27334:	4199      	sbcs	r1, r3
   27336:	9000      	str	r0, [sp, #0]
   27338:	9101      	str	r1, [sp, #4]
   2733a:	e7ae      	b.n	2729a <__udivmoddi4+0x82>
   2733c:	4642      	mov	r2, r8
   2733e:	2320      	movs	r3, #32
   27340:	1a9b      	subs	r3, r3, r2
   27342:	4652      	mov	r2, sl
   27344:	40da      	lsrs	r2, r3
   27346:	4641      	mov	r1, r8
   27348:	0013      	movs	r3, r2
   2734a:	464a      	mov	r2, r9
   2734c:	408a      	lsls	r2, r1
   2734e:	0017      	movs	r7, r2
   27350:	431f      	orrs	r7, r3
   27352:	e782      	b.n	2725a <__udivmoddi4+0x42>
   27354:	4642      	mov	r2, r8
   27356:	2320      	movs	r3, #32
   27358:	1a9b      	subs	r3, r3, r2
   2735a:	002a      	movs	r2, r5
   2735c:	4646      	mov	r6, r8
   2735e:	409a      	lsls	r2, r3
   27360:	0023      	movs	r3, r4
   27362:	40f3      	lsrs	r3, r6
   27364:	4313      	orrs	r3, r2
   27366:	e7d5      	b.n	27314 <__udivmoddi4+0xfc>
   27368:	4642      	mov	r2, r8
   2736a:	2320      	movs	r3, #32
   2736c:	2100      	movs	r1, #0
   2736e:	1a9b      	subs	r3, r3, r2
   27370:	2200      	movs	r2, #0
   27372:	9100      	str	r1, [sp, #0]
   27374:	9201      	str	r2, [sp, #4]
   27376:	2201      	movs	r2, #1
   27378:	40da      	lsrs	r2, r3
   2737a:	9201      	str	r2, [sp, #4]
   2737c:	e782      	b.n	27284 <__udivmoddi4+0x6c>
   2737e:	4642      	mov	r2, r8
   27380:	2320      	movs	r3, #32
   27382:	0026      	movs	r6, r4
   27384:	1a9b      	subs	r3, r3, r2
   27386:	40de      	lsrs	r6, r3
   27388:	002f      	movs	r7, r5
   2738a:	46b4      	mov	ip, r6
   2738c:	4097      	lsls	r7, r2
   2738e:	4666      	mov	r6, ip
   27390:	003b      	movs	r3, r7
   27392:	4333      	orrs	r3, r6
   27394:	e7c9      	b.n	2732a <__udivmoddi4+0x112>
   27396:	46c0      	nop			; (mov r8, r8)

00027398 <__aeabi_fdiv>:
   27398:	b5f0      	push	{r4, r5, r6, r7, lr}
   2739a:	4657      	mov	r7, sl
   2739c:	464e      	mov	r6, r9
   2739e:	46de      	mov	lr, fp
   273a0:	4645      	mov	r5, r8
   273a2:	b5e0      	push	{r5, r6, r7, lr}
   273a4:	0244      	lsls	r4, r0, #9
   273a6:	0043      	lsls	r3, r0, #1
   273a8:	0fc6      	lsrs	r6, r0, #31
   273aa:	b083      	sub	sp, #12
   273ac:	1c0f      	adds	r7, r1, #0
   273ae:	0a64      	lsrs	r4, r4, #9
   273b0:	0e1b      	lsrs	r3, r3, #24
   273b2:	46b2      	mov	sl, r6
   273b4:	d053      	beq.n	2745e <__aeabi_fdiv+0xc6>
   273b6:	2bff      	cmp	r3, #255	; 0xff
   273b8:	d027      	beq.n	2740a <__aeabi_fdiv+0x72>
   273ba:	2280      	movs	r2, #128	; 0x80
   273bc:	00e4      	lsls	r4, r4, #3
   273be:	04d2      	lsls	r2, r2, #19
   273c0:	4314      	orrs	r4, r2
   273c2:	227f      	movs	r2, #127	; 0x7f
   273c4:	4252      	negs	r2, r2
   273c6:	4690      	mov	r8, r2
   273c8:	4498      	add	r8, r3
   273ca:	2300      	movs	r3, #0
   273cc:	4699      	mov	r9, r3
   273ce:	469b      	mov	fp, r3
   273d0:	027d      	lsls	r5, r7, #9
   273d2:	0078      	lsls	r0, r7, #1
   273d4:	0ffb      	lsrs	r3, r7, #31
   273d6:	0a6d      	lsrs	r5, r5, #9
   273d8:	0e00      	lsrs	r0, r0, #24
   273da:	9300      	str	r3, [sp, #0]
   273dc:	d024      	beq.n	27428 <__aeabi_fdiv+0x90>
   273de:	28ff      	cmp	r0, #255	; 0xff
   273e0:	d046      	beq.n	27470 <__aeabi_fdiv+0xd8>
   273e2:	2380      	movs	r3, #128	; 0x80
   273e4:	2100      	movs	r1, #0
   273e6:	00ed      	lsls	r5, r5, #3
   273e8:	04db      	lsls	r3, r3, #19
   273ea:	431d      	orrs	r5, r3
   273ec:	387f      	subs	r0, #127	; 0x7f
   273ee:	4647      	mov	r7, r8
   273f0:	1a38      	subs	r0, r7, r0
   273f2:	464f      	mov	r7, r9
   273f4:	430f      	orrs	r7, r1
   273f6:	00bf      	lsls	r7, r7, #2
   273f8:	46b9      	mov	r9, r7
   273fa:	0033      	movs	r3, r6
   273fc:	9a00      	ldr	r2, [sp, #0]
   273fe:	4f87      	ldr	r7, [pc, #540]	; (2761c <__aeabi_fdiv+0x284>)
   27400:	4053      	eors	r3, r2
   27402:	464a      	mov	r2, r9
   27404:	58ba      	ldr	r2, [r7, r2]
   27406:	9301      	str	r3, [sp, #4]
   27408:	4697      	mov	pc, r2
   2740a:	2c00      	cmp	r4, #0
   2740c:	d14e      	bne.n	274ac <__aeabi_fdiv+0x114>
   2740e:	2308      	movs	r3, #8
   27410:	4699      	mov	r9, r3
   27412:	33f7      	adds	r3, #247	; 0xf7
   27414:	4698      	mov	r8, r3
   27416:	3bfd      	subs	r3, #253	; 0xfd
   27418:	469b      	mov	fp, r3
   2741a:	027d      	lsls	r5, r7, #9
   2741c:	0078      	lsls	r0, r7, #1
   2741e:	0ffb      	lsrs	r3, r7, #31
   27420:	0a6d      	lsrs	r5, r5, #9
   27422:	0e00      	lsrs	r0, r0, #24
   27424:	9300      	str	r3, [sp, #0]
   27426:	d1da      	bne.n	273de <__aeabi_fdiv+0x46>
   27428:	2d00      	cmp	r5, #0
   2742a:	d126      	bne.n	2747a <__aeabi_fdiv+0xe2>
   2742c:	2000      	movs	r0, #0
   2742e:	2101      	movs	r1, #1
   27430:	0033      	movs	r3, r6
   27432:	9a00      	ldr	r2, [sp, #0]
   27434:	4f7a      	ldr	r7, [pc, #488]	; (27620 <__aeabi_fdiv+0x288>)
   27436:	4053      	eors	r3, r2
   27438:	4642      	mov	r2, r8
   2743a:	1a10      	subs	r0, r2, r0
   2743c:	464a      	mov	r2, r9
   2743e:	430a      	orrs	r2, r1
   27440:	0092      	lsls	r2, r2, #2
   27442:	58ba      	ldr	r2, [r7, r2]
   27444:	001d      	movs	r5, r3
   27446:	4697      	mov	pc, r2
   27448:	9b00      	ldr	r3, [sp, #0]
   2744a:	002c      	movs	r4, r5
   2744c:	469a      	mov	sl, r3
   2744e:	468b      	mov	fp, r1
   27450:	465b      	mov	r3, fp
   27452:	2b02      	cmp	r3, #2
   27454:	d131      	bne.n	274ba <__aeabi_fdiv+0x122>
   27456:	4653      	mov	r3, sl
   27458:	21ff      	movs	r1, #255	; 0xff
   2745a:	2400      	movs	r4, #0
   2745c:	e038      	b.n	274d0 <__aeabi_fdiv+0x138>
   2745e:	2c00      	cmp	r4, #0
   27460:	d117      	bne.n	27492 <__aeabi_fdiv+0xfa>
   27462:	2304      	movs	r3, #4
   27464:	4699      	mov	r9, r3
   27466:	2300      	movs	r3, #0
   27468:	4698      	mov	r8, r3
   2746a:	3301      	adds	r3, #1
   2746c:	469b      	mov	fp, r3
   2746e:	e7af      	b.n	273d0 <__aeabi_fdiv+0x38>
   27470:	20ff      	movs	r0, #255	; 0xff
   27472:	2d00      	cmp	r5, #0
   27474:	d10b      	bne.n	2748e <__aeabi_fdiv+0xf6>
   27476:	2102      	movs	r1, #2
   27478:	e7da      	b.n	27430 <__aeabi_fdiv+0x98>
   2747a:	0028      	movs	r0, r5
   2747c:	f002 f834 	bl	294e8 <__clzsi2>
   27480:	1f43      	subs	r3, r0, #5
   27482:	409d      	lsls	r5, r3
   27484:	2376      	movs	r3, #118	; 0x76
   27486:	425b      	negs	r3, r3
   27488:	1a18      	subs	r0, r3, r0
   2748a:	2100      	movs	r1, #0
   2748c:	e7af      	b.n	273ee <__aeabi_fdiv+0x56>
   2748e:	2103      	movs	r1, #3
   27490:	e7ad      	b.n	273ee <__aeabi_fdiv+0x56>
   27492:	0020      	movs	r0, r4
   27494:	f002 f828 	bl	294e8 <__clzsi2>
   27498:	1f43      	subs	r3, r0, #5
   2749a:	409c      	lsls	r4, r3
   2749c:	2376      	movs	r3, #118	; 0x76
   2749e:	425b      	negs	r3, r3
   274a0:	1a1b      	subs	r3, r3, r0
   274a2:	4698      	mov	r8, r3
   274a4:	2300      	movs	r3, #0
   274a6:	4699      	mov	r9, r3
   274a8:	469b      	mov	fp, r3
   274aa:	e791      	b.n	273d0 <__aeabi_fdiv+0x38>
   274ac:	230c      	movs	r3, #12
   274ae:	4699      	mov	r9, r3
   274b0:	33f3      	adds	r3, #243	; 0xf3
   274b2:	4698      	mov	r8, r3
   274b4:	3bfc      	subs	r3, #252	; 0xfc
   274b6:	469b      	mov	fp, r3
   274b8:	e78a      	b.n	273d0 <__aeabi_fdiv+0x38>
   274ba:	2b03      	cmp	r3, #3
   274bc:	d100      	bne.n	274c0 <__aeabi_fdiv+0x128>
   274be:	e0a5      	b.n	2760c <__aeabi_fdiv+0x274>
   274c0:	4655      	mov	r5, sl
   274c2:	2b01      	cmp	r3, #1
   274c4:	d000      	beq.n	274c8 <__aeabi_fdiv+0x130>
   274c6:	e081      	b.n	275cc <__aeabi_fdiv+0x234>
   274c8:	2301      	movs	r3, #1
   274ca:	2100      	movs	r1, #0
   274cc:	2400      	movs	r4, #0
   274ce:	402b      	ands	r3, r5
   274d0:	0264      	lsls	r4, r4, #9
   274d2:	05c9      	lsls	r1, r1, #23
   274d4:	0a60      	lsrs	r0, r4, #9
   274d6:	07db      	lsls	r3, r3, #31
   274d8:	4308      	orrs	r0, r1
   274da:	4318      	orrs	r0, r3
   274dc:	b003      	add	sp, #12
   274de:	bc3c      	pop	{r2, r3, r4, r5}
   274e0:	4690      	mov	r8, r2
   274e2:	4699      	mov	r9, r3
   274e4:	46a2      	mov	sl, r4
   274e6:	46ab      	mov	fp, r5
   274e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   274ea:	2480      	movs	r4, #128	; 0x80
   274ec:	2300      	movs	r3, #0
   274ee:	03e4      	lsls	r4, r4, #15
   274f0:	21ff      	movs	r1, #255	; 0xff
   274f2:	e7ed      	b.n	274d0 <__aeabi_fdiv+0x138>
   274f4:	21ff      	movs	r1, #255	; 0xff
   274f6:	2400      	movs	r4, #0
   274f8:	e7ea      	b.n	274d0 <__aeabi_fdiv+0x138>
   274fa:	2301      	movs	r3, #1
   274fc:	1a59      	subs	r1, r3, r1
   274fe:	291b      	cmp	r1, #27
   27500:	dd66      	ble.n	275d0 <__aeabi_fdiv+0x238>
   27502:	9a01      	ldr	r2, [sp, #4]
   27504:	4013      	ands	r3, r2
   27506:	2100      	movs	r1, #0
   27508:	2400      	movs	r4, #0
   2750a:	e7e1      	b.n	274d0 <__aeabi_fdiv+0x138>
   2750c:	2380      	movs	r3, #128	; 0x80
   2750e:	03db      	lsls	r3, r3, #15
   27510:	421c      	tst	r4, r3
   27512:	d038      	beq.n	27586 <__aeabi_fdiv+0x1ee>
   27514:	421d      	tst	r5, r3
   27516:	d051      	beq.n	275bc <__aeabi_fdiv+0x224>
   27518:	431c      	orrs	r4, r3
   2751a:	0264      	lsls	r4, r4, #9
   2751c:	0a64      	lsrs	r4, r4, #9
   2751e:	0033      	movs	r3, r6
   27520:	21ff      	movs	r1, #255	; 0xff
   27522:	e7d5      	b.n	274d0 <__aeabi_fdiv+0x138>
   27524:	0163      	lsls	r3, r4, #5
   27526:	016c      	lsls	r4, r5, #5
   27528:	42a3      	cmp	r3, r4
   2752a:	d23b      	bcs.n	275a4 <__aeabi_fdiv+0x20c>
   2752c:	261b      	movs	r6, #27
   2752e:	2100      	movs	r1, #0
   27530:	3801      	subs	r0, #1
   27532:	2501      	movs	r5, #1
   27534:	001f      	movs	r7, r3
   27536:	0049      	lsls	r1, r1, #1
   27538:	005b      	lsls	r3, r3, #1
   2753a:	2f00      	cmp	r7, #0
   2753c:	db01      	blt.n	27542 <__aeabi_fdiv+0x1aa>
   2753e:	429c      	cmp	r4, r3
   27540:	d801      	bhi.n	27546 <__aeabi_fdiv+0x1ae>
   27542:	1b1b      	subs	r3, r3, r4
   27544:	4329      	orrs	r1, r5
   27546:	3e01      	subs	r6, #1
   27548:	2e00      	cmp	r6, #0
   2754a:	d1f3      	bne.n	27534 <__aeabi_fdiv+0x19c>
   2754c:	001c      	movs	r4, r3
   2754e:	1e63      	subs	r3, r4, #1
   27550:	419c      	sbcs	r4, r3
   27552:	430c      	orrs	r4, r1
   27554:	0001      	movs	r1, r0
   27556:	317f      	adds	r1, #127	; 0x7f
   27558:	2900      	cmp	r1, #0
   2755a:	ddce      	ble.n	274fa <__aeabi_fdiv+0x162>
   2755c:	0763      	lsls	r3, r4, #29
   2755e:	d004      	beq.n	2756a <__aeabi_fdiv+0x1d2>
   27560:	230f      	movs	r3, #15
   27562:	4023      	ands	r3, r4
   27564:	2b04      	cmp	r3, #4
   27566:	d000      	beq.n	2756a <__aeabi_fdiv+0x1d2>
   27568:	3404      	adds	r4, #4
   2756a:	0123      	lsls	r3, r4, #4
   2756c:	d503      	bpl.n	27576 <__aeabi_fdiv+0x1de>
   2756e:	0001      	movs	r1, r0
   27570:	4b2c      	ldr	r3, [pc, #176]	; (27624 <__aeabi_fdiv+0x28c>)
   27572:	3180      	adds	r1, #128	; 0x80
   27574:	401c      	ands	r4, r3
   27576:	29fe      	cmp	r1, #254	; 0xfe
   27578:	dd0d      	ble.n	27596 <__aeabi_fdiv+0x1fe>
   2757a:	2301      	movs	r3, #1
   2757c:	9a01      	ldr	r2, [sp, #4]
   2757e:	21ff      	movs	r1, #255	; 0xff
   27580:	4013      	ands	r3, r2
   27582:	2400      	movs	r4, #0
   27584:	e7a4      	b.n	274d0 <__aeabi_fdiv+0x138>
   27586:	2380      	movs	r3, #128	; 0x80
   27588:	03db      	lsls	r3, r3, #15
   2758a:	431c      	orrs	r4, r3
   2758c:	0264      	lsls	r4, r4, #9
   2758e:	0a64      	lsrs	r4, r4, #9
   27590:	0033      	movs	r3, r6
   27592:	21ff      	movs	r1, #255	; 0xff
   27594:	e79c      	b.n	274d0 <__aeabi_fdiv+0x138>
   27596:	2301      	movs	r3, #1
   27598:	9a01      	ldr	r2, [sp, #4]
   2759a:	01a4      	lsls	r4, r4, #6
   2759c:	0a64      	lsrs	r4, r4, #9
   2759e:	b2c9      	uxtb	r1, r1
   275a0:	4013      	ands	r3, r2
   275a2:	e795      	b.n	274d0 <__aeabi_fdiv+0x138>
   275a4:	1b1b      	subs	r3, r3, r4
   275a6:	261a      	movs	r6, #26
   275a8:	2101      	movs	r1, #1
   275aa:	e7c2      	b.n	27532 <__aeabi_fdiv+0x19a>
   275ac:	9b00      	ldr	r3, [sp, #0]
   275ae:	468b      	mov	fp, r1
   275b0:	469a      	mov	sl, r3
   275b2:	2400      	movs	r4, #0
   275b4:	e74c      	b.n	27450 <__aeabi_fdiv+0xb8>
   275b6:	0263      	lsls	r3, r4, #9
   275b8:	d5e5      	bpl.n	27586 <__aeabi_fdiv+0x1ee>
   275ba:	2500      	movs	r5, #0
   275bc:	2480      	movs	r4, #128	; 0x80
   275be:	03e4      	lsls	r4, r4, #15
   275c0:	432c      	orrs	r4, r5
   275c2:	0264      	lsls	r4, r4, #9
   275c4:	0a64      	lsrs	r4, r4, #9
   275c6:	9b00      	ldr	r3, [sp, #0]
   275c8:	21ff      	movs	r1, #255	; 0xff
   275ca:	e781      	b.n	274d0 <__aeabi_fdiv+0x138>
   275cc:	9501      	str	r5, [sp, #4]
   275ce:	e7c1      	b.n	27554 <__aeabi_fdiv+0x1bc>
   275d0:	0023      	movs	r3, r4
   275d2:	2020      	movs	r0, #32
   275d4:	40cb      	lsrs	r3, r1
   275d6:	1a41      	subs	r1, r0, r1
   275d8:	408c      	lsls	r4, r1
   275da:	1e61      	subs	r1, r4, #1
   275dc:	418c      	sbcs	r4, r1
   275de:	431c      	orrs	r4, r3
   275e0:	0763      	lsls	r3, r4, #29
   275e2:	d004      	beq.n	275ee <__aeabi_fdiv+0x256>
   275e4:	230f      	movs	r3, #15
   275e6:	4023      	ands	r3, r4
   275e8:	2b04      	cmp	r3, #4
   275ea:	d000      	beq.n	275ee <__aeabi_fdiv+0x256>
   275ec:	3404      	adds	r4, #4
   275ee:	0163      	lsls	r3, r4, #5
   275f0:	d505      	bpl.n	275fe <__aeabi_fdiv+0x266>
   275f2:	2301      	movs	r3, #1
   275f4:	9a01      	ldr	r2, [sp, #4]
   275f6:	2101      	movs	r1, #1
   275f8:	4013      	ands	r3, r2
   275fa:	2400      	movs	r4, #0
   275fc:	e768      	b.n	274d0 <__aeabi_fdiv+0x138>
   275fe:	2301      	movs	r3, #1
   27600:	9a01      	ldr	r2, [sp, #4]
   27602:	01a4      	lsls	r4, r4, #6
   27604:	0a64      	lsrs	r4, r4, #9
   27606:	4013      	ands	r3, r2
   27608:	2100      	movs	r1, #0
   2760a:	e761      	b.n	274d0 <__aeabi_fdiv+0x138>
   2760c:	2380      	movs	r3, #128	; 0x80
   2760e:	03db      	lsls	r3, r3, #15
   27610:	431c      	orrs	r4, r3
   27612:	0264      	lsls	r4, r4, #9
   27614:	0a64      	lsrs	r4, r4, #9
   27616:	4653      	mov	r3, sl
   27618:	21ff      	movs	r1, #255	; 0xff
   2761a:	e759      	b.n	274d0 <__aeabi_fdiv+0x138>
   2761c:	0002b6d0 	.word	0x0002b6d0
   27620:	0002b710 	.word	0x0002b710
   27624:	f7ffffff 	.word	0xf7ffffff

00027628 <__aeabi_fmul>:
   27628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2762a:	4657      	mov	r7, sl
   2762c:	464e      	mov	r6, r9
   2762e:	4645      	mov	r5, r8
   27630:	46de      	mov	lr, fp
   27632:	b5e0      	push	{r5, r6, r7, lr}
   27634:	0247      	lsls	r7, r0, #9
   27636:	0046      	lsls	r6, r0, #1
   27638:	4688      	mov	r8, r1
   2763a:	0a7f      	lsrs	r7, r7, #9
   2763c:	0e36      	lsrs	r6, r6, #24
   2763e:	0fc4      	lsrs	r4, r0, #31
   27640:	2e00      	cmp	r6, #0
   27642:	d047      	beq.n	276d4 <__aeabi_fmul+0xac>
   27644:	2eff      	cmp	r6, #255	; 0xff
   27646:	d024      	beq.n	27692 <__aeabi_fmul+0x6a>
   27648:	00fb      	lsls	r3, r7, #3
   2764a:	2780      	movs	r7, #128	; 0x80
   2764c:	04ff      	lsls	r7, r7, #19
   2764e:	431f      	orrs	r7, r3
   27650:	2300      	movs	r3, #0
   27652:	4699      	mov	r9, r3
   27654:	469a      	mov	sl, r3
   27656:	3e7f      	subs	r6, #127	; 0x7f
   27658:	4643      	mov	r3, r8
   2765a:	025d      	lsls	r5, r3, #9
   2765c:	0058      	lsls	r0, r3, #1
   2765e:	0fdb      	lsrs	r3, r3, #31
   27660:	0a6d      	lsrs	r5, r5, #9
   27662:	0e00      	lsrs	r0, r0, #24
   27664:	4698      	mov	r8, r3
   27666:	d043      	beq.n	276f0 <__aeabi_fmul+0xc8>
   27668:	28ff      	cmp	r0, #255	; 0xff
   2766a:	d03b      	beq.n	276e4 <__aeabi_fmul+0xbc>
   2766c:	00eb      	lsls	r3, r5, #3
   2766e:	2580      	movs	r5, #128	; 0x80
   27670:	2200      	movs	r2, #0
   27672:	04ed      	lsls	r5, r5, #19
   27674:	431d      	orrs	r5, r3
   27676:	387f      	subs	r0, #127	; 0x7f
   27678:	1836      	adds	r6, r6, r0
   2767a:	1c73      	adds	r3, r6, #1
   2767c:	4641      	mov	r1, r8
   2767e:	469b      	mov	fp, r3
   27680:	464b      	mov	r3, r9
   27682:	4061      	eors	r1, r4
   27684:	4313      	orrs	r3, r2
   27686:	2b0f      	cmp	r3, #15
   27688:	d864      	bhi.n	27754 <__aeabi_fmul+0x12c>
   2768a:	4875      	ldr	r0, [pc, #468]	; (27860 <__aeabi_fmul+0x238>)
   2768c:	009b      	lsls	r3, r3, #2
   2768e:	58c3      	ldr	r3, [r0, r3]
   27690:	469f      	mov	pc, r3
   27692:	2f00      	cmp	r7, #0
   27694:	d142      	bne.n	2771c <__aeabi_fmul+0xf4>
   27696:	2308      	movs	r3, #8
   27698:	4699      	mov	r9, r3
   2769a:	3b06      	subs	r3, #6
   2769c:	26ff      	movs	r6, #255	; 0xff
   2769e:	469a      	mov	sl, r3
   276a0:	e7da      	b.n	27658 <__aeabi_fmul+0x30>
   276a2:	4641      	mov	r1, r8
   276a4:	2a02      	cmp	r2, #2
   276a6:	d028      	beq.n	276fa <__aeabi_fmul+0xd2>
   276a8:	2a03      	cmp	r2, #3
   276aa:	d100      	bne.n	276ae <__aeabi_fmul+0x86>
   276ac:	e0ce      	b.n	2784c <__aeabi_fmul+0x224>
   276ae:	2a01      	cmp	r2, #1
   276b0:	d000      	beq.n	276b4 <__aeabi_fmul+0x8c>
   276b2:	e0ac      	b.n	2780e <__aeabi_fmul+0x1e6>
   276b4:	4011      	ands	r1, r2
   276b6:	2000      	movs	r0, #0
   276b8:	2200      	movs	r2, #0
   276ba:	b2cc      	uxtb	r4, r1
   276bc:	0240      	lsls	r0, r0, #9
   276be:	05d2      	lsls	r2, r2, #23
   276c0:	0a40      	lsrs	r0, r0, #9
   276c2:	07e4      	lsls	r4, r4, #31
   276c4:	4310      	orrs	r0, r2
   276c6:	4320      	orrs	r0, r4
   276c8:	bc3c      	pop	{r2, r3, r4, r5}
   276ca:	4690      	mov	r8, r2
   276cc:	4699      	mov	r9, r3
   276ce:	46a2      	mov	sl, r4
   276d0:	46ab      	mov	fp, r5
   276d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   276d4:	2f00      	cmp	r7, #0
   276d6:	d115      	bne.n	27704 <__aeabi_fmul+0xdc>
   276d8:	2304      	movs	r3, #4
   276da:	4699      	mov	r9, r3
   276dc:	3b03      	subs	r3, #3
   276de:	2600      	movs	r6, #0
   276e0:	469a      	mov	sl, r3
   276e2:	e7b9      	b.n	27658 <__aeabi_fmul+0x30>
   276e4:	20ff      	movs	r0, #255	; 0xff
   276e6:	2202      	movs	r2, #2
   276e8:	2d00      	cmp	r5, #0
   276ea:	d0c5      	beq.n	27678 <__aeabi_fmul+0x50>
   276ec:	2203      	movs	r2, #3
   276ee:	e7c3      	b.n	27678 <__aeabi_fmul+0x50>
   276f0:	2d00      	cmp	r5, #0
   276f2:	d119      	bne.n	27728 <__aeabi_fmul+0x100>
   276f4:	2000      	movs	r0, #0
   276f6:	2201      	movs	r2, #1
   276f8:	e7be      	b.n	27678 <__aeabi_fmul+0x50>
   276fa:	2401      	movs	r4, #1
   276fc:	22ff      	movs	r2, #255	; 0xff
   276fe:	400c      	ands	r4, r1
   27700:	2000      	movs	r0, #0
   27702:	e7db      	b.n	276bc <__aeabi_fmul+0x94>
   27704:	0038      	movs	r0, r7
   27706:	f001 feef 	bl	294e8 <__clzsi2>
   2770a:	2676      	movs	r6, #118	; 0x76
   2770c:	1f43      	subs	r3, r0, #5
   2770e:	409f      	lsls	r7, r3
   27710:	2300      	movs	r3, #0
   27712:	4276      	negs	r6, r6
   27714:	1a36      	subs	r6, r6, r0
   27716:	4699      	mov	r9, r3
   27718:	469a      	mov	sl, r3
   2771a:	e79d      	b.n	27658 <__aeabi_fmul+0x30>
   2771c:	230c      	movs	r3, #12
   2771e:	4699      	mov	r9, r3
   27720:	3b09      	subs	r3, #9
   27722:	26ff      	movs	r6, #255	; 0xff
   27724:	469a      	mov	sl, r3
   27726:	e797      	b.n	27658 <__aeabi_fmul+0x30>
   27728:	0028      	movs	r0, r5
   2772a:	f001 fedd 	bl	294e8 <__clzsi2>
   2772e:	1f43      	subs	r3, r0, #5
   27730:	409d      	lsls	r5, r3
   27732:	2376      	movs	r3, #118	; 0x76
   27734:	425b      	negs	r3, r3
   27736:	1a18      	subs	r0, r3, r0
   27738:	2200      	movs	r2, #0
   2773a:	e79d      	b.n	27678 <__aeabi_fmul+0x50>
   2773c:	2080      	movs	r0, #128	; 0x80
   2773e:	2400      	movs	r4, #0
   27740:	03c0      	lsls	r0, r0, #15
   27742:	22ff      	movs	r2, #255	; 0xff
   27744:	e7ba      	b.n	276bc <__aeabi_fmul+0x94>
   27746:	003d      	movs	r5, r7
   27748:	4652      	mov	r2, sl
   2774a:	e7ab      	b.n	276a4 <__aeabi_fmul+0x7c>
   2774c:	003d      	movs	r5, r7
   2774e:	0021      	movs	r1, r4
   27750:	4652      	mov	r2, sl
   27752:	e7a7      	b.n	276a4 <__aeabi_fmul+0x7c>
   27754:	0c3b      	lsrs	r3, r7, #16
   27756:	469c      	mov	ip, r3
   27758:	042a      	lsls	r2, r5, #16
   2775a:	0c12      	lsrs	r2, r2, #16
   2775c:	0c2b      	lsrs	r3, r5, #16
   2775e:	0014      	movs	r4, r2
   27760:	4660      	mov	r0, ip
   27762:	4665      	mov	r5, ip
   27764:	043f      	lsls	r7, r7, #16
   27766:	0c3f      	lsrs	r7, r7, #16
   27768:	437c      	muls	r4, r7
   2776a:	4342      	muls	r2, r0
   2776c:	435d      	muls	r5, r3
   2776e:	437b      	muls	r3, r7
   27770:	0c27      	lsrs	r7, r4, #16
   27772:	189b      	adds	r3, r3, r2
   27774:	18ff      	adds	r7, r7, r3
   27776:	42ba      	cmp	r2, r7
   27778:	d903      	bls.n	27782 <__aeabi_fmul+0x15a>
   2777a:	2380      	movs	r3, #128	; 0x80
   2777c:	025b      	lsls	r3, r3, #9
   2777e:	469c      	mov	ip, r3
   27780:	4465      	add	r5, ip
   27782:	0424      	lsls	r4, r4, #16
   27784:	043a      	lsls	r2, r7, #16
   27786:	0c24      	lsrs	r4, r4, #16
   27788:	1912      	adds	r2, r2, r4
   2778a:	0193      	lsls	r3, r2, #6
   2778c:	1e5c      	subs	r4, r3, #1
   2778e:	41a3      	sbcs	r3, r4
   27790:	0c3f      	lsrs	r7, r7, #16
   27792:	0e92      	lsrs	r2, r2, #26
   27794:	197d      	adds	r5, r7, r5
   27796:	431a      	orrs	r2, r3
   27798:	01ad      	lsls	r5, r5, #6
   2779a:	4315      	orrs	r5, r2
   2779c:	012b      	lsls	r3, r5, #4
   2779e:	d504      	bpl.n	277aa <__aeabi_fmul+0x182>
   277a0:	2301      	movs	r3, #1
   277a2:	465e      	mov	r6, fp
   277a4:	086a      	lsrs	r2, r5, #1
   277a6:	401d      	ands	r5, r3
   277a8:	4315      	orrs	r5, r2
   277aa:	0032      	movs	r2, r6
   277ac:	327f      	adds	r2, #127	; 0x7f
   277ae:	2a00      	cmp	r2, #0
   277b0:	dd25      	ble.n	277fe <__aeabi_fmul+0x1d6>
   277b2:	076b      	lsls	r3, r5, #29
   277b4:	d004      	beq.n	277c0 <__aeabi_fmul+0x198>
   277b6:	230f      	movs	r3, #15
   277b8:	402b      	ands	r3, r5
   277ba:	2b04      	cmp	r3, #4
   277bc:	d000      	beq.n	277c0 <__aeabi_fmul+0x198>
   277be:	3504      	adds	r5, #4
   277c0:	012b      	lsls	r3, r5, #4
   277c2:	d503      	bpl.n	277cc <__aeabi_fmul+0x1a4>
   277c4:	0032      	movs	r2, r6
   277c6:	4b27      	ldr	r3, [pc, #156]	; (27864 <__aeabi_fmul+0x23c>)
   277c8:	3280      	adds	r2, #128	; 0x80
   277ca:	401d      	ands	r5, r3
   277cc:	2afe      	cmp	r2, #254	; 0xfe
   277ce:	dc94      	bgt.n	276fa <__aeabi_fmul+0xd2>
   277d0:	2401      	movs	r4, #1
   277d2:	01a8      	lsls	r0, r5, #6
   277d4:	0a40      	lsrs	r0, r0, #9
   277d6:	b2d2      	uxtb	r2, r2
   277d8:	400c      	ands	r4, r1
   277da:	e76f      	b.n	276bc <__aeabi_fmul+0x94>
   277dc:	2080      	movs	r0, #128	; 0x80
   277de:	03c0      	lsls	r0, r0, #15
   277e0:	4207      	tst	r7, r0
   277e2:	d007      	beq.n	277f4 <__aeabi_fmul+0x1cc>
   277e4:	4205      	tst	r5, r0
   277e6:	d105      	bne.n	277f4 <__aeabi_fmul+0x1cc>
   277e8:	4328      	orrs	r0, r5
   277ea:	0240      	lsls	r0, r0, #9
   277ec:	0a40      	lsrs	r0, r0, #9
   277ee:	4644      	mov	r4, r8
   277f0:	22ff      	movs	r2, #255	; 0xff
   277f2:	e763      	b.n	276bc <__aeabi_fmul+0x94>
   277f4:	4338      	orrs	r0, r7
   277f6:	0240      	lsls	r0, r0, #9
   277f8:	0a40      	lsrs	r0, r0, #9
   277fa:	22ff      	movs	r2, #255	; 0xff
   277fc:	e75e      	b.n	276bc <__aeabi_fmul+0x94>
   277fe:	2401      	movs	r4, #1
   27800:	1aa3      	subs	r3, r4, r2
   27802:	2b1b      	cmp	r3, #27
   27804:	dd05      	ble.n	27812 <__aeabi_fmul+0x1ea>
   27806:	400c      	ands	r4, r1
   27808:	2200      	movs	r2, #0
   2780a:	2000      	movs	r0, #0
   2780c:	e756      	b.n	276bc <__aeabi_fmul+0x94>
   2780e:	465e      	mov	r6, fp
   27810:	e7cb      	b.n	277aa <__aeabi_fmul+0x182>
   27812:	002a      	movs	r2, r5
   27814:	2020      	movs	r0, #32
   27816:	40da      	lsrs	r2, r3
   27818:	1ac3      	subs	r3, r0, r3
   2781a:	409d      	lsls	r5, r3
   2781c:	002b      	movs	r3, r5
   2781e:	1e5d      	subs	r5, r3, #1
   27820:	41ab      	sbcs	r3, r5
   27822:	4313      	orrs	r3, r2
   27824:	075a      	lsls	r2, r3, #29
   27826:	d004      	beq.n	27832 <__aeabi_fmul+0x20a>
   27828:	220f      	movs	r2, #15
   2782a:	401a      	ands	r2, r3
   2782c:	2a04      	cmp	r2, #4
   2782e:	d000      	beq.n	27832 <__aeabi_fmul+0x20a>
   27830:	3304      	adds	r3, #4
   27832:	015a      	lsls	r2, r3, #5
   27834:	d504      	bpl.n	27840 <__aeabi_fmul+0x218>
   27836:	2401      	movs	r4, #1
   27838:	2201      	movs	r2, #1
   2783a:	400c      	ands	r4, r1
   2783c:	2000      	movs	r0, #0
   2783e:	e73d      	b.n	276bc <__aeabi_fmul+0x94>
   27840:	2401      	movs	r4, #1
   27842:	019b      	lsls	r3, r3, #6
   27844:	0a58      	lsrs	r0, r3, #9
   27846:	400c      	ands	r4, r1
   27848:	2200      	movs	r2, #0
   2784a:	e737      	b.n	276bc <__aeabi_fmul+0x94>
   2784c:	2080      	movs	r0, #128	; 0x80
   2784e:	2401      	movs	r4, #1
   27850:	03c0      	lsls	r0, r0, #15
   27852:	4328      	orrs	r0, r5
   27854:	0240      	lsls	r0, r0, #9
   27856:	0a40      	lsrs	r0, r0, #9
   27858:	400c      	ands	r4, r1
   2785a:	22ff      	movs	r2, #255	; 0xff
   2785c:	e72e      	b.n	276bc <__aeabi_fmul+0x94>
   2785e:	46c0      	nop			; (mov r8, r8)
   27860:	0002b750 	.word	0x0002b750
   27864:	f7ffffff 	.word	0xf7ffffff

00027868 <__aeabi_ui2f>:
   27868:	b510      	push	{r4, lr}
   2786a:	1e04      	subs	r4, r0, #0
   2786c:	d027      	beq.n	278be <__aeabi_ui2f+0x56>
   2786e:	f001 fe3b 	bl	294e8 <__clzsi2>
   27872:	239e      	movs	r3, #158	; 0x9e
   27874:	1a1b      	subs	r3, r3, r0
   27876:	2b96      	cmp	r3, #150	; 0x96
   27878:	dc0a      	bgt.n	27890 <__aeabi_ui2f+0x28>
   2787a:	2296      	movs	r2, #150	; 0x96
   2787c:	1ad2      	subs	r2, r2, r3
   2787e:	4094      	lsls	r4, r2
   27880:	0264      	lsls	r4, r4, #9
   27882:	0a64      	lsrs	r4, r4, #9
   27884:	b2db      	uxtb	r3, r3
   27886:	0264      	lsls	r4, r4, #9
   27888:	05db      	lsls	r3, r3, #23
   2788a:	0a60      	lsrs	r0, r4, #9
   2788c:	4318      	orrs	r0, r3
   2788e:	bd10      	pop	{r4, pc}
   27890:	2b99      	cmp	r3, #153	; 0x99
   27892:	dc17      	bgt.n	278c4 <__aeabi_ui2f+0x5c>
   27894:	2299      	movs	r2, #153	; 0x99
   27896:	1ad2      	subs	r2, r2, r3
   27898:	2a00      	cmp	r2, #0
   2789a:	dd27      	ble.n	278ec <__aeabi_ui2f+0x84>
   2789c:	4094      	lsls	r4, r2
   2789e:	0022      	movs	r2, r4
   278a0:	4c13      	ldr	r4, [pc, #76]	; (278f0 <__aeabi_ui2f+0x88>)
   278a2:	4014      	ands	r4, r2
   278a4:	0751      	lsls	r1, r2, #29
   278a6:	d004      	beq.n	278b2 <__aeabi_ui2f+0x4a>
   278a8:	210f      	movs	r1, #15
   278aa:	400a      	ands	r2, r1
   278ac:	2a04      	cmp	r2, #4
   278ae:	d000      	beq.n	278b2 <__aeabi_ui2f+0x4a>
   278b0:	3404      	adds	r4, #4
   278b2:	0162      	lsls	r2, r4, #5
   278b4:	d412      	bmi.n	278dc <__aeabi_ui2f+0x74>
   278b6:	01a4      	lsls	r4, r4, #6
   278b8:	0a64      	lsrs	r4, r4, #9
   278ba:	b2db      	uxtb	r3, r3
   278bc:	e7e3      	b.n	27886 <__aeabi_ui2f+0x1e>
   278be:	2300      	movs	r3, #0
   278c0:	2400      	movs	r4, #0
   278c2:	e7e0      	b.n	27886 <__aeabi_ui2f+0x1e>
   278c4:	22b9      	movs	r2, #185	; 0xb9
   278c6:	0021      	movs	r1, r4
   278c8:	1ad2      	subs	r2, r2, r3
   278ca:	4091      	lsls	r1, r2
   278cc:	000a      	movs	r2, r1
   278ce:	1e51      	subs	r1, r2, #1
   278d0:	418a      	sbcs	r2, r1
   278d2:	2105      	movs	r1, #5
   278d4:	1a09      	subs	r1, r1, r0
   278d6:	40cc      	lsrs	r4, r1
   278d8:	4314      	orrs	r4, r2
   278da:	e7db      	b.n	27894 <__aeabi_ui2f+0x2c>
   278dc:	4b04      	ldr	r3, [pc, #16]	; (278f0 <__aeabi_ui2f+0x88>)
   278de:	401c      	ands	r4, r3
   278e0:	239f      	movs	r3, #159	; 0x9f
   278e2:	01a4      	lsls	r4, r4, #6
   278e4:	1a1b      	subs	r3, r3, r0
   278e6:	0a64      	lsrs	r4, r4, #9
   278e8:	b2db      	uxtb	r3, r3
   278ea:	e7cc      	b.n	27886 <__aeabi_ui2f+0x1e>
   278ec:	0022      	movs	r2, r4
   278ee:	e7d7      	b.n	278a0 <__aeabi_ui2f+0x38>
   278f0:	fbffffff 	.word	0xfbffffff

000278f4 <__aeabi_dadd>:
   278f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278f6:	4645      	mov	r5, r8
   278f8:	46de      	mov	lr, fp
   278fa:	4657      	mov	r7, sl
   278fc:	464e      	mov	r6, r9
   278fe:	030c      	lsls	r4, r1, #12
   27900:	b5e0      	push	{r5, r6, r7, lr}
   27902:	004e      	lsls	r6, r1, #1
   27904:	0fc9      	lsrs	r1, r1, #31
   27906:	4688      	mov	r8, r1
   27908:	000d      	movs	r5, r1
   2790a:	0a61      	lsrs	r1, r4, #9
   2790c:	0f44      	lsrs	r4, r0, #29
   2790e:	430c      	orrs	r4, r1
   27910:	00c7      	lsls	r7, r0, #3
   27912:	0319      	lsls	r1, r3, #12
   27914:	0058      	lsls	r0, r3, #1
   27916:	0fdb      	lsrs	r3, r3, #31
   27918:	469b      	mov	fp, r3
   2791a:	0a4b      	lsrs	r3, r1, #9
   2791c:	0f51      	lsrs	r1, r2, #29
   2791e:	430b      	orrs	r3, r1
   27920:	0d76      	lsrs	r6, r6, #21
   27922:	0d40      	lsrs	r0, r0, #21
   27924:	0019      	movs	r1, r3
   27926:	00d2      	lsls	r2, r2, #3
   27928:	45d8      	cmp	r8, fp
   2792a:	d100      	bne.n	2792e <__aeabi_dadd+0x3a>
   2792c:	e0ae      	b.n	27a8c <__aeabi_dadd+0x198>
   2792e:	1a35      	subs	r5, r6, r0
   27930:	2d00      	cmp	r5, #0
   27932:	dc00      	bgt.n	27936 <__aeabi_dadd+0x42>
   27934:	e0f6      	b.n	27b24 <__aeabi_dadd+0x230>
   27936:	2800      	cmp	r0, #0
   27938:	d10f      	bne.n	2795a <__aeabi_dadd+0x66>
   2793a:	4313      	orrs	r3, r2
   2793c:	d100      	bne.n	27940 <__aeabi_dadd+0x4c>
   2793e:	e0db      	b.n	27af8 <__aeabi_dadd+0x204>
   27940:	1e6b      	subs	r3, r5, #1
   27942:	2b00      	cmp	r3, #0
   27944:	d000      	beq.n	27948 <__aeabi_dadd+0x54>
   27946:	e137      	b.n	27bb8 <__aeabi_dadd+0x2c4>
   27948:	1aba      	subs	r2, r7, r2
   2794a:	4297      	cmp	r7, r2
   2794c:	41bf      	sbcs	r7, r7
   2794e:	1a64      	subs	r4, r4, r1
   27950:	427f      	negs	r7, r7
   27952:	1be4      	subs	r4, r4, r7
   27954:	2601      	movs	r6, #1
   27956:	0017      	movs	r7, r2
   27958:	e024      	b.n	279a4 <__aeabi_dadd+0xb0>
   2795a:	4bc6      	ldr	r3, [pc, #792]	; (27c74 <__aeabi_dadd+0x380>)
   2795c:	429e      	cmp	r6, r3
   2795e:	d04d      	beq.n	279fc <__aeabi_dadd+0x108>
   27960:	2380      	movs	r3, #128	; 0x80
   27962:	041b      	lsls	r3, r3, #16
   27964:	4319      	orrs	r1, r3
   27966:	2d38      	cmp	r5, #56	; 0x38
   27968:	dd00      	ble.n	2796c <__aeabi_dadd+0x78>
   2796a:	e107      	b.n	27b7c <__aeabi_dadd+0x288>
   2796c:	2d1f      	cmp	r5, #31
   2796e:	dd00      	ble.n	27972 <__aeabi_dadd+0x7e>
   27970:	e138      	b.n	27be4 <__aeabi_dadd+0x2f0>
   27972:	2020      	movs	r0, #32
   27974:	1b43      	subs	r3, r0, r5
   27976:	469a      	mov	sl, r3
   27978:	000b      	movs	r3, r1
   2797a:	4650      	mov	r0, sl
   2797c:	4083      	lsls	r3, r0
   2797e:	4699      	mov	r9, r3
   27980:	0013      	movs	r3, r2
   27982:	4648      	mov	r0, r9
   27984:	40eb      	lsrs	r3, r5
   27986:	4318      	orrs	r0, r3
   27988:	0003      	movs	r3, r0
   2798a:	4650      	mov	r0, sl
   2798c:	4082      	lsls	r2, r0
   2798e:	1e50      	subs	r0, r2, #1
   27990:	4182      	sbcs	r2, r0
   27992:	40e9      	lsrs	r1, r5
   27994:	431a      	orrs	r2, r3
   27996:	1aba      	subs	r2, r7, r2
   27998:	1a61      	subs	r1, r4, r1
   2799a:	4297      	cmp	r7, r2
   2799c:	41a4      	sbcs	r4, r4
   2799e:	0017      	movs	r7, r2
   279a0:	4264      	negs	r4, r4
   279a2:	1b0c      	subs	r4, r1, r4
   279a4:	0223      	lsls	r3, r4, #8
   279a6:	d562      	bpl.n	27a6e <__aeabi_dadd+0x17a>
   279a8:	0264      	lsls	r4, r4, #9
   279aa:	0a65      	lsrs	r5, r4, #9
   279ac:	2d00      	cmp	r5, #0
   279ae:	d100      	bne.n	279b2 <__aeabi_dadd+0xbe>
   279b0:	e0df      	b.n	27b72 <__aeabi_dadd+0x27e>
   279b2:	0028      	movs	r0, r5
   279b4:	f001 fd98 	bl	294e8 <__clzsi2>
   279b8:	0003      	movs	r3, r0
   279ba:	3b08      	subs	r3, #8
   279bc:	2b1f      	cmp	r3, #31
   279be:	dd00      	ble.n	279c2 <__aeabi_dadd+0xce>
   279c0:	e0d2      	b.n	27b68 <__aeabi_dadd+0x274>
   279c2:	2220      	movs	r2, #32
   279c4:	003c      	movs	r4, r7
   279c6:	1ad2      	subs	r2, r2, r3
   279c8:	409d      	lsls	r5, r3
   279ca:	40d4      	lsrs	r4, r2
   279cc:	409f      	lsls	r7, r3
   279ce:	4325      	orrs	r5, r4
   279d0:	429e      	cmp	r6, r3
   279d2:	dd00      	ble.n	279d6 <__aeabi_dadd+0xe2>
   279d4:	e0c4      	b.n	27b60 <__aeabi_dadd+0x26c>
   279d6:	1b9e      	subs	r6, r3, r6
   279d8:	1c73      	adds	r3, r6, #1
   279da:	2b1f      	cmp	r3, #31
   279dc:	dd00      	ble.n	279e0 <__aeabi_dadd+0xec>
   279de:	e0f1      	b.n	27bc4 <__aeabi_dadd+0x2d0>
   279e0:	2220      	movs	r2, #32
   279e2:	0038      	movs	r0, r7
   279e4:	0029      	movs	r1, r5
   279e6:	1ad2      	subs	r2, r2, r3
   279e8:	40d8      	lsrs	r0, r3
   279ea:	4091      	lsls	r1, r2
   279ec:	4097      	lsls	r7, r2
   279ee:	002c      	movs	r4, r5
   279f0:	4301      	orrs	r1, r0
   279f2:	1e78      	subs	r0, r7, #1
   279f4:	4187      	sbcs	r7, r0
   279f6:	40dc      	lsrs	r4, r3
   279f8:	2600      	movs	r6, #0
   279fa:	430f      	orrs	r7, r1
   279fc:	077b      	lsls	r3, r7, #29
   279fe:	d009      	beq.n	27a14 <__aeabi_dadd+0x120>
   27a00:	230f      	movs	r3, #15
   27a02:	403b      	ands	r3, r7
   27a04:	2b04      	cmp	r3, #4
   27a06:	d005      	beq.n	27a14 <__aeabi_dadd+0x120>
   27a08:	1d3b      	adds	r3, r7, #4
   27a0a:	42bb      	cmp	r3, r7
   27a0c:	41bf      	sbcs	r7, r7
   27a0e:	427f      	negs	r7, r7
   27a10:	19e4      	adds	r4, r4, r7
   27a12:	001f      	movs	r7, r3
   27a14:	0223      	lsls	r3, r4, #8
   27a16:	d52c      	bpl.n	27a72 <__aeabi_dadd+0x17e>
   27a18:	4b96      	ldr	r3, [pc, #600]	; (27c74 <__aeabi_dadd+0x380>)
   27a1a:	3601      	adds	r6, #1
   27a1c:	429e      	cmp	r6, r3
   27a1e:	d100      	bne.n	27a22 <__aeabi_dadd+0x12e>
   27a20:	e09a      	b.n	27b58 <__aeabi_dadd+0x264>
   27a22:	4645      	mov	r5, r8
   27a24:	4b94      	ldr	r3, [pc, #592]	; (27c78 <__aeabi_dadd+0x384>)
   27a26:	08ff      	lsrs	r7, r7, #3
   27a28:	401c      	ands	r4, r3
   27a2a:	0760      	lsls	r0, r4, #29
   27a2c:	0576      	lsls	r6, r6, #21
   27a2e:	0264      	lsls	r4, r4, #9
   27a30:	4307      	orrs	r7, r0
   27a32:	0b24      	lsrs	r4, r4, #12
   27a34:	0d76      	lsrs	r6, r6, #21
   27a36:	2100      	movs	r1, #0
   27a38:	0324      	lsls	r4, r4, #12
   27a3a:	0b23      	lsrs	r3, r4, #12
   27a3c:	0d0c      	lsrs	r4, r1, #20
   27a3e:	4a8f      	ldr	r2, [pc, #572]	; (27c7c <__aeabi_dadd+0x388>)
   27a40:	0524      	lsls	r4, r4, #20
   27a42:	431c      	orrs	r4, r3
   27a44:	4014      	ands	r4, r2
   27a46:	0533      	lsls	r3, r6, #20
   27a48:	4323      	orrs	r3, r4
   27a4a:	005b      	lsls	r3, r3, #1
   27a4c:	07ed      	lsls	r5, r5, #31
   27a4e:	085b      	lsrs	r3, r3, #1
   27a50:	432b      	orrs	r3, r5
   27a52:	0038      	movs	r0, r7
   27a54:	0019      	movs	r1, r3
   27a56:	bc3c      	pop	{r2, r3, r4, r5}
   27a58:	4690      	mov	r8, r2
   27a5a:	4699      	mov	r9, r3
   27a5c:	46a2      	mov	sl, r4
   27a5e:	46ab      	mov	fp, r5
   27a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27a62:	4664      	mov	r4, ip
   27a64:	4304      	orrs	r4, r0
   27a66:	d100      	bne.n	27a6a <__aeabi_dadd+0x176>
   27a68:	e211      	b.n	27e8e <__aeabi_dadd+0x59a>
   27a6a:	0004      	movs	r4, r0
   27a6c:	4667      	mov	r7, ip
   27a6e:	077b      	lsls	r3, r7, #29
   27a70:	d1c6      	bne.n	27a00 <__aeabi_dadd+0x10c>
   27a72:	4645      	mov	r5, r8
   27a74:	0760      	lsls	r0, r4, #29
   27a76:	08ff      	lsrs	r7, r7, #3
   27a78:	4307      	orrs	r7, r0
   27a7a:	08e4      	lsrs	r4, r4, #3
   27a7c:	4b7d      	ldr	r3, [pc, #500]	; (27c74 <__aeabi_dadd+0x380>)
   27a7e:	429e      	cmp	r6, r3
   27a80:	d030      	beq.n	27ae4 <__aeabi_dadd+0x1f0>
   27a82:	0324      	lsls	r4, r4, #12
   27a84:	0576      	lsls	r6, r6, #21
   27a86:	0b24      	lsrs	r4, r4, #12
   27a88:	0d76      	lsrs	r6, r6, #21
   27a8a:	e7d4      	b.n	27a36 <__aeabi_dadd+0x142>
   27a8c:	1a33      	subs	r3, r6, r0
   27a8e:	469a      	mov	sl, r3
   27a90:	2b00      	cmp	r3, #0
   27a92:	dd78      	ble.n	27b86 <__aeabi_dadd+0x292>
   27a94:	2800      	cmp	r0, #0
   27a96:	d031      	beq.n	27afc <__aeabi_dadd+0x208>
   27a98:	4876      	ldr	r0, [pc, #472]	; (27c74 <__aeabi_dadd+0x380>)
   27a9a:	4286      	cmp	r6, r0
   27a9c:	d0ae      	beq.n	279fc <__aeabi_dadd+0x108>
   27a9e:	2080      	movs	r0, #128	; 0x80
   27aa0:	0400      	lsls	r0, r0, #16
   27aa2:	4301      	orrs	r1, r0
   27aa4:	4653      	mov	r3, sl
   27aa6:	2b38      	cmp	r3, #56	; 0x38
   27aa8:	dc00      	bgt.n	27aac <__aeabi_dadd+0x1b8>
   27aaa:	e0e9      	b.n	27c80 <__aeabi_dadd+0x38c>
   27aac:	430a      	orrs	r2, r1
   27aae:	1e51      	subs	r1, r2, #1
   27ab0:	418a      	sbcs	r2, r1
   27ab2:	2100      	movs	r1, #0
   27ab4:	19d2      	adds	r2, r2, r7
   27ab6:	42ba      	cmp	r2, r7
   27ab8:	41bf      	sbcs	r7, r7
   27aba:	1909      	adds	r1, r1, r4
   27abc:	427c      	negs	r4, r7
   27abe:	0017      	movs	r7, r2
   27ac0:	190c      	adds	r4, r1, r4
   27ac2:	0223      	lsls	r3, r4, #8
   27ac4:	d5d3      	bpl.n	27a6e <__aeabi_dadd+0x17a>
   27ac6:	4b6b      	ldr	r3, [pc, #428]	; (27c74 <__aeabi_dadd+0x380>)
   27ac8:	3601      	adds	r6, #1
   27aca:	429e      	cmp	r6, r3
   27acc:	d100      	bne.n	27ad0 <__aeabi_dadd+0x1dc>
   27ace:	e13a      	b.n	27d46 <__aeabi_dadd+0x452>
   27ad0:	2001      	movs	r0, #1
   27ad2:	4b69      	ldr	r3, [pc, #420]	; (27c78 <__aeabi_dadd+0x384>)
   27ad4:	401c      	ands	r4, r3
   27ad6:	087b      	lsrs	r3, r7, #1
   27ad8:	4007      	ands	r7, r0
   27ada:	431f      	orrs	r7, r3
   27adc:	07e0      	lsls	r0, r4, #31
   27ade:	4307      	orrs	r7, r0
   27ae0:	0864      	lsrs	r4, r4, #1
   27ae2:	e78b      	b.n	279fc <__aeabi_dadd+0x108>
   27ae4:	0023      	movs	r3, r4
   27ae6:	433b      	orrs	r3, r7
   27ae8:	d100      	bne.n	27aec <__aeabi_dadd+0x1f8>
   27aea:	e1cb      	b.n	27e84 <__aeabi_dadd+0x590>
   27aec:	2280      	movs	r2, #128	; 0x80
   27aee:	0312      	lsls	r2, r2, #12
   27af0:	4314      	orrs	r4, r2
   27af2:	0324      	lsls	r4, r4, #12
   27af4:	0b24      	lsrs	r4, r4, #12
   27af6:	e79e      	b.n	27a36 <__aeabi_dadd+0x142>
   27af8:	002e      	movs	r6, r5
   27afa:	e77f      	b.n	279fc <__aeabi_dadd+0x108>
   27afc:	0008      	movs	r0, r1
   27afe:	4310      	orrs	r0, r2
   27b00:	d100      	bne.n	27b04 <__aeabi_dadd+0x210>
   27b02:	e0b4      	b.n	27c6e <__aeabi_dadd+0x37a>
   27b04:	1e58      	subs	r0, r3, #1
   27b06:	2800      	cmp	r0, #0
   27b08:	d000      	beq.n	27b0c <__aeabi_dadd+0x218>
   27b0a:	e0de      	b.n	27cca <__aeabi_dadd+0x3d6>
   27b0c:	18ba      	adds	r2, r7, r2
   27b0e:	42ba      	cmp	r2, r7
   27b10:	419b      	sbcs	r3, r3
   27b12:	1864      	adds	r4, r4, r1
   27b14:	425b      	negs	r3, r3
   27b16:	18e4      	adds	r4, r4, r3
   27b18:	0017      	movs	r7, r2
   27b1a:	2601      	movs	r6, #1
   27b1c:	0223      	lsls	r3, r4, #8
   27b1e:	d5a6      	bpl.n	27a6e <__aeabi_dadd+0x17a>
   27b20:	2602      	movs	r6, #2
   27b22:	e7d5      	b.n	27ad0 <__aeabi_dadd+0x1dc>
   27b24:	2d00      	cmp	r5, #0
   27b26:	d16e      	bne.n	27c06 <__aeabi_dadd+0x312>
   27b28:	1c70      	adds	r0, r6, #1
   27b2a:	0540      	lsls	r0, r0, #21
   27b2c:	0d40      	lsrs	r0, r0, #21
   27b2e:	2801      	cmp	r0, #1
   27b30:	dc00      	bgt.n	27b34 <__aeabi_dadd+0x240>
   27b32:	e0f9      	b.n	27d28 <__aeabi_dadd+0x434>
   27b34:	1ab8      	subs	r0, r7, r2
   27b36:	4684      	mov	ip, r0
   27b38:	4287      	cmp	r7, r0
   27b3a:	4180      	sbcs	r0, r0
   27b3c:	1ae5      	subs	r5, r4, r3
   27b3e:	4240      	negs	r0, r0
   27b40:	1a2d      	subs	r5, r5, r0
   27b42:	0228      	lsls	r0, r5, #8
   27b44:	d400      	bmi.n	27b48 <__aeabi_dadd+0x254>
   27b46:	e089      	b.n	27c5c <__aeabi_dadd+0x368>
   27b48:	1bd7      	subs	r7, r2, r7
   27b4a:	42ba      	cmp	r2, r7
   27b4c:	4192      	sbcs	r2, r2
   27b4e:	1b1c      	subs	r4, r3, r4
   27b50:	4252      	negs	r2, r2
   27b52:	1aa5      	subs	r5, r4, r2
   27b54:	46d8      	mov	r8, fp
   27b56:	e729      	b.n	279ac <__aeabi_dadd+0xb8>
   27b58:	4645      	mov	r5, r8
   27b5a:	2400      	movs	r4, #0
   27b5c:	2700      	movs	r7, #0
   27b5e:	e76a      	b.n	27a36 <__aeabi_dadd+0x142>
   27b60:	4c45      	ldr	r4, [pc, #276]	; (27c78 <__aeabi_dadd+0x384>)
   27b62:	1af6      	subs	r6, r6, r3
   27b64:	402c      	ands	r4, r5
   27b66:	e749      	b.n	279fc <__aeabi_dadd+0x108>
   27b68:	003d      	movs	r5, r7
   27b6a:	3828      	subs	r0, #40	; 0x28
   27b6c:	4085      	lsls	r5, r0
   27b6e:	2700      	movs	r7, #0
   27b70:	e72e      	b.n	279d0 <__aeabi_dadd+0xdc>
   27b72:	0038      	movs	r0, r7
   27b74:	f001 fcb8 	bl	294e8 <__clzsi2>
   27b78:	3020      	adds	r0, #32
   27b7a:	e71d      	b.n	279b8 <__aeabi_dadd+0xc4>
   27b7c:	430a      	orrs	r2, r1
   27b7e:	1e51      	subs	r1, r2, #1
   27b80:	418a      	sbcs	r2, r1
   27b82:	2100      	movs	r1, #0
   27b84:	e707      	b.n	27996 <__aeabi_dadd+0xa2>
   27b86:	2b00      	cmp	r3, #0
   27b88:	d000      	beq.n	27b8c <__aeabi_dadd+0x298>
   27b8a:	e0f3      	b.n	27d74 <__aeabi_dadd+0x480>
   27b8c:	1c70      	adds	r0, r6, #1
   27b8e:	0543      	lsls	r3, r0, #21
   27b90:	0d5b      	lsrs	r3, r3, #21
   27b92:	2b01      	cmp	r3, #1
   27b94:	dc00      	bgt.n	27b98 <__aeabi_dadd+0x2a4>
   27b96:	e0ad      	b.n	27cf4 <__aeabi_dadd+0x400>
   27b98:	4b36      	ldr	r3, [pc, #216]	; (27c74 <__aeabi_dadd+0x380>)
   27b9a:	4298      	cmp	r0, r3
   27b9c:	d100      	bne.n	27ba0 <__aeabi_dadd+0x2ac>
   27b9e:	e0d1      	b.n	27d44 <__aeabi_dadd+0x450>
   27ba0:	18ba      	adds	r2, r7, r2
   27ba2:	42ba      	cmp	r2, r7
   27ba4:	41bf      	sbcs	r7, r7
   27ba6:	1864      	adds	r4, r4, r1
   27ba8:	427f      	negs	r7, r7
   27baa:	19e4      	adds	r4, r4, r7
   27bac:	07e7      	lsls	r7, r4, #31
   27bae:	0852      	lsrs	r2, r2, #1
   27bb0:	4317      	orrs	r7, r2
   27bb2:	0864      	lsrs	r4, r4, #1
   27bb4:	0006      	movs	r6, r0
   27bb6:	e721      	b.n	279fc <__aeabi_dadd+0x108>
   27bb8:	482e      	ldr	r0, [pc, #184]	; (27c74 <__aeabi_dadd+0x380>)
   27bba:	4285      	cmp	r5, r0
   27bbc:	d100      	bne.n	27bc0 <__aeabi_dadd+0x2cc>
   27bbe:	e093      	b.n	27ce8 <__aeabi_dadd+0x3f4>
   27bc0:	001d      	movs	r5, r3
   27bc2:	e6d0      	b.n	27966 <__aeabi_dadd+0x72>
   27bc4:	0029      	movs	r1, r5
   27bc6:	3e1f      	subs	r6, #31
   27bc8:	40f1      	lsrs	r1, r6
   27bca:	2b20      	cmp	r3, #32
   27bcc:	d100      	bne.n	27bd0 <__aeabi_dadd+0x2dc>
   27bce:	e08d      	b.n	27cec <__aeabi_dadd+0x3f8>
   27bd0:	2240      	movs	r2, #64	; 0x40
   27bd2:	1ad3      	subs	r3, r2, r3
   27bd4:	409d      	lsls	r5, r3
   27bd6:	432f      	orrs	r7, r5
   27bd8:	1e7d      	subs	r5, r7, #1
   27bda:	41af      	sbcs	r7, r5
   27bdc:	2400      	movs	r4, #0
   27bde:	430f      	orrs	r7, r1
   27be0:	2600      	movs	r6, #0
   27be2:	e744      	b.n	27a6e <__aeabi_dadd+0x17a>
   27be4:	002b      	movs	r3, r5
   27be6:	0008      	movs	r0, r1
   27be8:	3b20      	subs	r3, #32
   27bea:	40d8      	lsrs	r0, r3
   27bec:	0003      	movs	r3, r0
   27bee:	2d20      	cmp	r5, #32
   27bf0:	d100      	bne.n	27bf4 <__aeabi_dadd+0x300>
   27bf2:	e07d      	b.n	27cf0 <__aeabi_dadd+0x3fc>
   27bf4:	2040      	movs	r0, #64	; 0x40
   27bf6:	1b45      	subs	r5, r0, r5
   27bf8:	40a9      	lsls	r1, r5
   27bfa:	430a      	orrs	r2, r1
   27bfc:	1e51      	subs	r1, r2, #1
   27bfe:	418a      	sbcs	r2, r1
   27c00:	2100      	movs	r1, #0
   27c02:	431a      	orrs	r2, r3
   27c04:	e6c7      	b.n	27996 <__aeabi_dadd+0xa2>
   27c06:	2e00      	cmp	r6, #0
   27c08:	d050      	beq.n	27cac <__aeabi_dadd+0x3b8>
   27c0a:	4e1a      	ldr	r6, [pc, #104]	; (27c74 <__aeabi_dadd+0x380>)
   27c0c:	42b0      	cmp	r0, r6
   27c0e:	d057      	beq.n	27cc0 <__aeabi_dadd+0x3cc>
   27c10:	2680      	movs	r6, #128	; 0x80
   27c12:	426b      	negs	r3, r5
   27c14:	4699      	mov	r9, r3
   27c16:	0436      	lsls	r6, r6, #16
   27c18:	4334      	orrs	r4, r6
   27c1a:	464b      	mov	r3, r9
   27c1c:	2b38      	cmp	r3, #56	; 0x38
   27c1e:	dd00      	ble.n	27c22 <__aeabi_dadd+0x32e>
   27c20:	e0d6      	b.n	27dd0 <__aeabi_dadd+0x4dc>
   27c22:	2b1f      	cmp	r3, #31
   27c24:	dd00      	ble.n	27c28 <__aeabi_dadd+0x334>
   27c26:	e135      	b.n	27e94 <__aeabi_dadd+0x5a0>
   27c28:	2620      	movs	r6, #32
   27c2a:	1af5      	subs	r5, r6, r3
   27c2c:	0026      	movs	r6, r4
   27c2e:	40ae      	lsls	r6, r5
   27c30:	46b2      	mov	sl, r6
   27c32:	003e      	movs	r6, r7
   27c34:	40de      	lsrs	r6, r3
   27c36:	46ac      	mov	ip, r5
   27c38:	0035      	movs	r5, r6
   27c3a:	4656      	mov	r6, sl
   27c3c:	432e      	orrs	r6, r5
   27c3e:	4665      	mov	r5, ip
   27c40:	40af      	lsls	r7, r5
   27c42:	1e7d      	subs	r5, r7, #1
   27c44:	41af      	sbcs	r7, r5
   27c46:	40dc      	lsrs	r4, r3
   27c48:	4337      	orrs	r7, r6
   27c4a:	1bd7      	subs	r7, r2, r7
   27c4c:	42ba      	cmp	r2, r7
   27c4e:	4192      	sbcs	r2, r2
   27c50:	1b0c      	subs	r4, r1, r4
   27c52:	4252      	negs	r2, r2
   27c54:	1aa4      	subs	r4, r4, r2
   27c56:	0006      	movs	r6, r0
   27c58:	46d8      	mov	r8, fp
   27c5a:	e6a3      	b.n	279a4 <__aeabi_dadd+0xb0>
   27c5c:	4664      	mov	r4, ip
   27c5e:	4667      	mov	r7, ip
   27c60:	432c      	orrs	r4, r5
   27c62:	d000      	beq.n	27c66 <__aeabi_dadd+0x372>
   27c64:	e6a2      	b.n	279ac <__aeabi_dadd+0xb8>
   27c66:	2500      	movs	r5, #0
   27c68:	2600      	movs	r6, #0
   27c6a:	2700      	movs	r7, #0
   27c6c:	e706      	b.n	27a7c <__aeabi_dadd+0x188>
   27c6e:	001e      	movs	r6, r3
   27c70:	e6c4      	b.n	279fc <__aeabi_dadd+0x108>
   27c72:	46c0      	nop			; (mov r8, r8)
   27c74:	000007ff 	.word	0x000007ff
   27c78:	ff7fffff 	.word	0xff7fffff
   27c7c:	800fffff 	.word	0x800fffff
   27c80:	2b1f      	cmp	r3, #31
   27c82:	dc63      	bgt.n	27d4c <__aeabi_dadd+0x458>
   27c84:	2020      	movs	r0, #32
   27c86:	1ac3      	subs	r3, r0, r3
   27c88:	0008      	movs	r0, r1
   27c8a:	4098      	lsls	r0, r3
   27c8c:	469c      	mov	ip, r3
   27c8e:	4683      	mov	fp, r0
   27c90:	4653      	mov	r3, sl
   27c92:	0010      	movs	r0, r2
   27c94:	40d8      	lsrs	r0, r3
   27c96:	0003      	movs	r3, r0
   27c98:	4658      	mov	r0, fp
   27c9a:	4318      	orrs	r0, r3
   27c9c:	4663      	mov	r3, ip
   27c9e:	409a      	lsls	r2, r3
   27ca0:	1e53      	subs	r3, r2, #1
   27ca2:	419a      	sbcs	r2, r3
   27ca4:	4653      	mov	r3, sl
   27ca6:	4302      	orrs	r2, r0
   27ca8:	40d9      	lsrs	r1, r3
   27caa:	e703      	b.n	27ab4 <__aeabi_dadd+0x1c0>
   27cac:	0026      	movs	r6, r4
   27cae:	433e      	orrs	r6, r7
   27cb0:	d006      	beq.n	27cc0 <__aeabi_dadd+0x3cc>
   27cb2:	43eb      	mvns	r3, r5
   27cb4:	4699      	mov	r9, r3
   27cb6:	2b00      	cmp	r3, #0
   27cb8:	d0c7      	beq.n	27c4a <__aeabi_dadd+0x356>
   27cba:	4e94      	ldr	r6, [pc, #592]	; (27f0c <__aeabi_dadd+0x618>)
   27cbc:	42b0      	cmp	r0, r6
   27cbe:	d1ac      	bne.n	27c1a <__aeabi_dadd+0x326>
   27cc0:	000c      	movs	r4, r1
   27cc2:	0017      	movs	r7, r2
   27cc4:	0006      	movs	r6, r0
   27cc6:	46d8      	mov	r8, fp
   27cc8:	e698      	b.n	279fc <__aeabi_dadd+0x108>
   27cca:	4b90      	ldr	r3, [pc, #576]	; (27f0c <__aeabi_dadd+0x618>)
   27ccc:	459a      	cmp	sl, r3
   27cce:	d00b      	beq.n	27ce8 <__aeabi_dadd+0x3f4>
   27cd0:	4682      	mov	sl, r0
   27cd2:	e6e7      	b.n	27aa4 <__aeabi_dadd+0x1b0>
   27cd4:	2800      	cmp	r0, #0
   27cd6:	d000      	beq.n	27cda <__aeabi_dadd+0x3e6>
   27cd8:	e09e      	b.n	27e18 <__aeabi_dadd+0x524>
   27cda:	0018      	movs	r0, r3
   27cdc:	4310      	orrs	r0, r2
   27cde:	d100      	bne.n	27ce2 <__aeabi_dadd+0x3ee>
   27ce0:	e0e9      	b.n	27eb6 <__aeabi_dadd+0x5c2>
   27ce2:	001c      	movs	r4, r3
   27ce4:	0017      	movs	r7, r2
   27ce6:	46d8      	mov	r8, fp
   27ce8:	4e88      	ldr	r6, [pc, #544]	; (27f0c <__aeabi_dadd+0x618>)
   27cea:	e687      	b.n	279fc <__aeabi_dadd+0x108>
   27cec:	2500      	movs	r5, #0
   27cee:	e772      	b.n	27bd6 <__aeabi_dadd+0x2e2>
   27cf0:	2100      	movs	r1, #0
   27cf2:	e782      	b.n	27bfa <__aeabi_dadd+0x306>
   27cf4:	0023      	movs	r3, r4
   27cf6:	433b      	orrs	r3, r7
   27cf8:	2e00      	cmp	r6, #0
   27cfa:	d000      	beq.n	27cfe <__aeabi_dadd+0x40a>
   27cfc:	e0ab      	b.n	27e56 <__aeabi_dadd+0x562>
   27cfe:	2b00      	cmp	r3, #0
   27d00:	d100      	bne.n	27d04 <__aeabi_dadd+0x410>
   27d02:	e0e7      	b.n	27ed4 <__aeabi_dadd+0x5e0>
   27d04:	000b      	movs	r3, r1
   27d06:	4313      	orrs	r3, r2
   27d08:	d100      	bne.n	27d0c <__aeabi_dadd+0x418>
   27d0a:	e677      	b.n	279fc <__aeabi_dadd+0x108>
   27d0c:	18ba      	adds	r2, r7, r2
   27d0e:	42ba      	cmp	r2, r7
   27d10:	41bf      	sbcs	r7, r7
   27d12:	1864      	adds	r4, r4, r1
   27d14:	427f      	negs	r7, r7
   27d16:	19e4      	adds	r4, r4, r7
   27d18:	0223      	lsls	r3, r4, #8
   27d1a:	d400      	bmi.n	27d1e <__aeabi_dadd+0x42a>
   27d1c:	e0f2      	b.n	27f04 <__aeabi_dadd+0x610>
   27d1e:	4b7c      	ldr	r3, [pc, #496]	; (27f10 <__aeabi_dadd+0x61c>)
   27d20:	0017      	movs	r7, r2
   27d22:	401c      	ands	r4, r3
   27d24:	0006      	movs	r6, r0
   27d26:	e669      	b.n	279fc <__aeabi_dadd+0x108>
   27d28:	0020      	movs	r0, r4
   27d2a:	4338      	orrs	r0, r7
   27d2c:	2e00      	cmp	r6, #0
   27d2e:	d1d1      	bne.n	27cd4 <__aeabi_dadd+0x3e0>
   27d30:	2800      	cmp	r0, #0
   27d32:	d15b      	bne.n	27dec <__aeabi_dadd+0x4f8>
   27d34:	001c      	movs	r4, r3
   27d36:	4314      	orrs	r4, r2
   27d38:	d100      	bne.n	27d3c <__aeabi_dadd+0x448>
   27d3a:	e0a8      	b.n	27e8e <__aeabi_dadd+0x59a>
   27d3c:	001c      	movs	r4, r3
   27d3e:	0017      	movs	r7, r2
   27d40:	46d8      	mov	r8, fp
   27d42:	e65b      	b.n	279fc <__aeabi_dadd+0x108>
   27d44:	0006      	movs	r6, r0
   27d46:	2400      	movs	r4, #0
   27d48:	2700      	movs	r7, #0
   27d4a:	e697      	b.n	27a7c <__aeabi_dadd+0x188>
   27d4c:	4650      	mov	r0, sl
   27d4e:	000b      	movs	r3, r1
   27d50:	3820      	subs	r0, #32
   27d52:	40c3      	lsrs	r3, r0
   27d54:	4699      	mov	r9, r3
   27d56:	4653      	mov	r3, sl
   27d58:	2b20      	cmp	r3, #32
   27d5a:	d100      	bne.n	27d5e <__aeabi_dadd+0x46a>
   27d5c:	e095      	b.n	27e8a <__aeabi_dadd+0x596>
   27d5e:	2340      	movs	r3, #64	; 0x40
   27d60:	4650      	mov	r0, sl
   27d62:	1a1b      	subs	r3, r3, r0
   27d64:	4099      	lsls	r1, r3
   27d66:	430a      	orrs	r2, r1
   27d68:	1e51      	subs	r1, r2, #1
   27d6a:	418a      	sbcs	r2, r1
   27d6c:	464b      	mov	r3, r9
   27d6e:	2100      	movs	r1, #0
   27d70:	431a      	orrs	r2, r3
   27d72:	e69f      	b.n	27ab4 <__aeabi_dadd+0x1c0>
   27d74:	2e00      	cmp	r6, #0
   27d76:	d130      	bne.n	27dda <__aeabi_dadd+0x4e6>
   27d78:	0026      	movs	r6, r4
   27d7a:	433e      	orrs	r6, r7
   27d7c:	d067      	beq.n	27e4e <__aeabi_dadd+0x55a>
   27d7e:	43db      	mvns	r3, r3
   27d80:	469a      	mov	sl, r3
   27d82:	2b00      	cmp	r3, #0
   27d84:	d01c      	beq.n	27dc0 <__aeabi_dadd+0x4cc>
   27d86:	4e61      	ldr	r6, [pc, #388]	; (27f0c <__aeabi_dadd+0x618>)
   27d88:	42b0      	cmp	r0, r6
   27d8a:	d060      	beq.n	27e4e <__aeabi_dadd+0x55a>
   27d8c:	4653      	mov	r3, sl
   27d8e:	2b38      	cmp	r3, #56	; 0x38
   27d90:	dd00      	ble.n	27d94 <__aeabi_dadd+0x4a0>
   27d92:	e096      	b.n	27ec2 <__aeabi_dadd+0x5ce>
   27d94:	2b1f      	cmp	r3, #31
   27d96:	dd00      	ble.n	27d9a <__aeabi_dadd+0x4a6>
   27d98:	e09f      	b.n	27eda <__aeabi_dadd+0x5e6>
   27d9a:	2620      	movs	r6, #32
   27d9c:	1af3      	subs	r3, r6, r3
   27d9e:	0026      	movs	r6, r4
   27da0:	409e      	lsls	r6, r3
   27da2:	469c      	mov	ip, r3
   27da4:	46b3      	mov	fp, r6
   27da6:	4653      	mov	r3, sl
   27da8:	003e      	movs	r6, r7
   27daa:	40de      	lsrs	r6, r3
   27dac:	0033      	movs	r3, r6
   27dae:	465e      	mov	r6, fp
   27db0:	431e      	orrs	r6, r3
   27db2:	4663      	mov	r3, ip
   27db4:	409f      	lsls	r7, r3
   27db6:	1e7b      	subs	r3, r7, #1
   27db8:	419f      	sbcs	r7, r3
   27dba:	4653      	mov	r3, sl
   27dbc:	40dc      	lsrs	r4, r3
   27dbe:	4337      	orrs	r7, r6
   27dc0:	18bf      	adds	r7, r7, r2
   27dc2:	4297      	cmp	r7, r2
   27dc4:	4192      	sbcs	r2, r2
   27dc6:	1864      	adds	r4, r4, r1
   27dc8:	4252      	negs	r2, r2
   27dca:	18a4      	adds	r4, r4, r2
   27dcc:	0006      	movs	r6, r0
   27dce:	e678      	b.n	27ac2 <__aeabi_dadd+0x1ce>
   27dd0:	4327      	orrs	r7, r4
   27dd2:	1e7c      	subs	r4, r7, #1
   27dd4:	41a7      	sbcs	r7, r4
   27dd6:	2400      	movs	r4, #0
   27dd8:	e737      	b.n	27c4a <__aeabi_dadd+0x356>
   27dda:	4e4c      	ldr	r6, [pc, #304]	; (27f0c <__aeabi_dadd+0x618>)
   27ddc:	42b0      	cmp	r0, r6
   27dde:	d036      	beq.n	27e4e <__aeabi_dadd+0x55a>
   27de0:	2680      	movs	r6, #128	; 0x80
   27de2:	425b      	negs	r3, r3
   27de4:	0436      	lsls	r6, r6, #16
   27de6:	469a      	mov	sl, r3
   27de8:	4334      	orrs	r4, r6
   27dea:	e7cf      	b.n	27d8c <__aeabi_dadd+0x498>
   27dec:	0018      	movs	r0, r3
   27dee:	4310      	orrs	r0, r2
   27df0:	d100      	bne.n	27df4 <__aeabi_dadd+0x500>
   27df2:	e603      	b.n	279fc <__aeabi_dadd+0x108>
   27df4:	1ab8      	subs	r0, r7, r2
   27df6:	4684      	mov	ip, r0
   27df8:	4567      	cmp	r7, ip
   27dfa:	41ad      	sbcs	r5, r5
   27dfc:	1ae0      	subs	r0, r4, r3
   27dfe:	426d      	negs	r5, r5
   27e00:	1b40      	subs	r0, r0, r5
   27e02:	0205      	lsls	r5, r0, #8
   27e04:	d400      	bmi.n	27e08 <__aeabi_dadd+0x514>
   27e06:	e62c      	b.n	27a62 <__aeabi_dadd+0x16e>
   27e08:	1bd7      	subs	r7, r2, r7
   27e0a:	42ba      	cmp	r2, r7
   27e0c:	4192      	sbcs	r2, r2
   27e0e:	1b1c      	subs	r4, r3, r4
   27e10:	4252      	negs	r2, r2
   27e12:	1aa4      	subs	r4, r4, r2
   27e14:	46d8      	mov	r8, fp
   27e16:	e5f1      	b.n	279fc <__aeabi_dadd+0x108>
   27e18:	0018      	movs	r0, r3
   27e1a:	4310      	orrs	r0, r2
   27e1c:	d100      	bne.n	27e20 <__aeabi_dadd+0x52c>
   27e1e:	e763      	b.n	27ce8 <__aeabi_dadd+0x3f4>
   27e20:	08f8      	lsrs	r0, r7, #3
   27e22:	0767      	lsls	r7, r4, #29
   27e24:	4307      	orrs	r7, r0
   27e26:	2080      	movs	r0, #128	; 0x80
   27e28:	08e4      	lsrs	r4, r4, #3
   27e2a:	0300      	lsls	r0, r0, #12
   27e2c:	4204      	tst	r4, r0
   27e2e:	d008      	beq.n	27e42 <__aeabi_dadd+0x54e>
   27e30:	08dd      	lsrs	r5, r3, #3
   27e32:	4205      	tst	r5, r0
   27e34:	d105      	bne.n	27e42 <__aeabi_dadd+0x54e>
   27e36:	08d2      	lsrs	r2, r2, #3
   27e38:	0759      	lsls	r1, r3, #29
   27e3a:	4311      	orrs	r1, r2
   27e3c:	000f      	movs	r7, r1
   27e3e:	002c      	movs	r4, r5
   27e40:	46d8      	mov	r8, fp
   27e42:	0f7b      	lsrs	r3, r7, #29
   27e44:	00e4      	lsls	r4, r4, #3
   27e46:	431c      	orrs	r4, r3
   27e48:	00ff      	lsls	r7, r7, #3
   27e4a:	4e30      	ldr	r6, [pc, #192]	; (27f0c <__aeabi_dadd+0x618>)
   27e4c:	e5d6      	b.n	279fc <__aeabi_dadd+0x108>
   27e4e:	000c      	movs	r4, r1
   27e50:	0017      	movs	r7, r2
   27e52:	0006      	movs	r6, r0
   27e54:	e5d2      	b.n	279fc <__aeabi_dadd+0x108>
   27e56:	2b00      	cmp	r3, #0
   27e58:	d038      	beq.n	27ecc <__aeabi_dadd+0x5d8>
   27e5a:	000b      	movs	r3, r1
   27e5c:	4313      	orrs	r3, r2
   27e5e:	d100      	bne.n	27e62 <__aeabi_dadd+0x56e>
   27e60:	e742      	b.n	27ce8 <__aeabi_dadd+0x3f4>
   27e62:	08f8      	lsrs	r0, r7, #3
   27e64:	0767      	lsls	r7, r4, #29
   27e66:	4307      	orrs	r7, r0
   27e68:	2080      	movs	r0, #128	; 0x80
   27e6a:	08e4      	lsrs	r4, r4, #3
   27e6c:	0300      	lsls	r0, r0, #12
   27e6e:	4204      	tst	r4, r0
   27e70:	d0e7      	beq.n	27e42 <__aeabi_dadd+0x54e>
   27e72:	08cb      	lsrs	r3, r1, #3
   27e74:	4203      	tst	r3, r0
   27e76:	d1e4      	bne.n	27e42 <__aeabi_dadd+0x54e>
   27e78:	08d2      	lsrs	r2, r2, #3
   27e7a:	0749      	lsls	r1, r1, #29
   27e7c:	4311      	orrs	r1, r2
   27e7e:	000f      	movs	r7, r1
   27e80:	001c      	movs	r4, r3
   27e82:	e7de      	b.n	27e42 <__aeabi_dadd+0x54e>
   27e84:	2700      	movs	r7, #0
   27e86:	2400      	movs	r4, #0
   27e88:	e5d5      	b.n	27a36 <__aeabi_dadd+0x142>
   27e8a:	2100      	movs	r1, #0
   27e8c:	e76b      	b.n	27d66 <__aeabi_dadd+0x472>
   27e8e:	2500      	movs	r5, #0
   27e90:	2700      	movs	r7, #0
   27e92:	e5f3      	b.n	27a7c <__aeabi_dadd+0x188>
   27e94:	464e      	mov	r6, r9
   27e96:	0025      	movs	r5, r4
   27e98:	3e20      	subs	r6, #32
   27e9a:	40f5      	lsrs	r5, r6
   27e9c:	464b      	mov	r3, r9
   27e9e:	002e      	movs	r6, r5
   27ea0:	2b20      	cmp	r3, #32
   27ea2:	d02d      	beq.n	27f00 <__aeabi_dadd+0x60c>
   27ea4:	2540      	movs	r5, #64	; 0x40
   27ea6:	1aed      	subs	r5, r5, r3
   27ea8:	40ac      	lsls	r4, r5
   27eaa:	4327      	orrs	r7, r4
   27eac:	1e7c      	subs	r4, r7, #1
   27eae:	41a7      	sbcs	r7, r4
   27eb0:	2400      	movs	r4, #0
   27eb2:	4337      	orrs	r7, r6
   27eb4:	e6c9      	b.n	27c4a <__aeabi_dadd+0x356>
   27eb6:	2480      	movs	r4, #128	; 0x80
   27eb8:	2500      	movs	r5, #0
   27eba:	0324      	lsls	r4, r4, #12
   27ebc:	4e13      	ldr	r6, [pc, #76]	; (27f0c <__aeabi_dadd+0x618>)
   27ebe:	2700      	movs	r7, #0
   27ec0:	e5dc      	b.n	27a7c <__aeabi_dadd+0x188>
   27ec2:	4327      	orrs	r7, r4
   27ec4:	1e7c      	subs	r4, r7, #1
   27ec6:	41a7      	sbcs	r7, r4
   27ec8:	2400      	movs	r4, #0
   27eca:	e779      	b.n	27dc0 <__aeabi_dadd+0x4cc>
   27ecc:	000c      	movs	r4, r1
   27ece:	0017      	movs	r7, r2
   27ed0:	4e0e      	ldr	r6, [pc, #56]	; (27f0c <__aeabi_dadd+0x618>)
   27ed2:	e593      	b.n	279fc <__aeabi_dadd+0x108>
   27ed4:	000c      	movs	r4, r1
   27ed6:	0017      	movs	r7, r2
   27ed8:	e590      	b.n	279fc <__aeabi_dadd+0x108>
   27eda:	4656      	mov	r6, sl
   27edc:	0023      	movs	r3, r4
   27ede:	3e20      	subs	r6, #32
   27ee0:	40f3      	lsrs	r3, r6
   27ee2:	4699      	mov	r9, r3
   27ee4:	4653      	mov	r3, sl
   27ee6:	2b20      	cmp	r3, #32
   27ee8:	d00e      	beq.n	27f08 <__aeabi_dadd+0x614>
   27eea:	2340      	movs	r3, #64	; 0x40
   27eec:	4656      	mov	r6, sl
   27eee:	1b9b      	subs	r3, r3, r6
   27ef0:	409c      	lsls	r4, r3
   27ef2:	4327      	orrs	r7, r4
   27ef4:	1e7c      	subs	r4, r7, #1
   27ef6:	41a7      	sbcs	r7, r4
   27ef8:	464b      	mov	r3, r9
   27efa:	2400      	movs	r4, #0
   27efc:	431f      	orrs	r7, r3
   27efe:	e75f      	b.n	27dc0 <__aeabi_dadd+0x4cc>
   27f00:	2400      	movs	r4, #0
   27f02:	e7d2      	b.n	27eaa <__aeabi_dadd+0x5b6>
   27f04:	0017      	movs	r7, r2
   27f06:	e5b2      	b.n	27a6e <__aeabi_dadd+0x17a>
   27f08:	2400      	movs	r4, #0
   27f0a:	e7f2      	b.n	27ef2 <__aeabi_dadd+0x5fe>
   27f0c:	000007ff 	.word	0x000007ff
   27f10:	ff7fffff 	.word	0xff7fffff

00027f14 <__aeabi_ddiv>:
   27f14:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f16:	4657      	mov	r7, sl
   27f18:	4645      	mov	r5, r8
   27f1a:	46de      	mov	lr, fp
   27f1c:	464e      	mov	r6, r9
   27f1e:	b5e0      	push	{r5, r6, r7, lr}
   27f20:	004c      	lsls	r4, r1, #1
   27f22:	030e      	lsls	r6, r1, #12
   27f24:	b087      	sub	sp, #28
   27f26:	4683      	mov	fp, r0
   27f28:	4692      	mov	sl, r2
   27f2a:	001d      	movs	r5, r3
   27f2c:	4680      	mov	r8, r0
   27f2e:	0b36      	lsrs	r6, r6, #12
   27f30:	0d64      	lsrs	r4, r4, #21
   27f32:	0fcf      	lsrs	r7, r1, #31
   27f34:	2c00      	cmp	r4, #0
   27f36:	d04f      	beq.n	27fd8 <__aeabi_ddiv+0xc4>
   27f38:	4b6f      	ldr	r3, [pc, #444]	; (280f8 <__aeabi_ddiv+0x1e4>)
   27f3a:	429c      	cmp	r4, r3
   27f3c:	d035      	beq.n	27faa <__aeabi_ddiv+0x96>
   27f3e:	2380      	movs	r3, #128	; 0x80
   27f40:	0f42      	lsrs	r2, r0, #29
   27f42:	041b      	lsls	r3, r3, #16
   27f44:	00f6      	lsls	r6, r6, #3
   27f46:	4313      	orrs	r3, r2
   27f48:	4333      	orrs	r3, r6
   27f4a:	4699      	mov	r9, r3
   27f4c:	00c3      	lsls	r3, r0, #3
   27f4e:	4698      	mov	r8, r3
   27f50:	4b6a      	ldr	r3, [pc, #424]	; (280fc <__aeabi_ddiv+0x1e8>)
   27f52:	2600      	movs	r6, #0
   27f54:	469c      	mov	ip, r3
   27f56:	2300      	movs	r3, #0
   27f58:	4464      	add	r4, ip
   27f5a:	9303      	str	r3, [sp, #12]
   27f5c:	032b      	lsls	r3, r5, #12
   27f5e:	0b1b      	lsrs	r3, r3, #12
   27f60:	469b      	mov	fp, r3
   27f62:	006b      	lsls	r3, r5, #1
   27f64:	0fed      	lsrs	r5, r5, #31
   27f66:	4650      	mov	r0, sl
   27f68:	0d5b      	lsrs	r3, r3, #21
   27f6a:	9501      	str	r5, [sp, #4]
   27f6c:	d05e      	beq.n	2802c <__aeabi_ddiv+0x118>
   27f6e:	4a62      	ldr	r2, [pc, #392]	; (280f8 <__aeabi_ddiv+0x1e4>)
   27f70:	4293      	cmp	r3, r2
   27f72:	d053      	beq.n	2801c <__aeabi_ddiv+0x108>
   27f74:	465a      	mov	r2, fp
   27f76:	00d1      	lsls	r1, r2, #3
   27f78:	2280      	movs	r2, #128	; 0x80
   27f7a:	0f40      	lsrs	r0, r0, #29
   27f7c:	0412      	lsls	r2, r2, #16
   27f7e:	4302      	orrs	r2, r0
   27f80:	430a      	orrs	r2, r1
   27f82:	4693      	mov	fp, r2
   27f84:	4652      	mov	r2, sl
   27f86:	00d1      	lsls	r1, r2, #3
   27f88:	4a5c      	ldr	r2, [pc, #368]	; (280fc <__aeabi_ddiv+0x1e8>)
   27f8a:	4694      	mov	ip, r2
   27f8c:	2200      	movs	r2, #0
   27f8e:	4463      	add	r3, ip
   27f90:	0038      	movs	r0, r7
   27f92:	4068      	eors	r0, r5
   27f94:	4684      	mov	ip, r0
   27f96:	9002      	str	r0, [sp, #8]
   27f98:	1ae4      	subs	r4, r4, r3
   27f9a:	4316      	orrs	r6, r2
   27f9c:	2e0f      	cmp	r6, #15
   27f9e:	d900      	bls.n	27fa2 <__aeabi_ddiv+0x8e>
   27fa0:	e0b4      	b.n	2810c <__aeabi_ddiv+0x1f8>
   27fa2:	4b57      	ldr	r3, [pc, #348]	; (28100 <__aeabi_ddiv+0x1ec>)
   27fa4:	00b6      	lsls	r6, r6, #2
   27fa6:	599b      	ldr	r3, [r3, r6]
   27fa8:	469f      	mov	pc, r3
   27faa:	0003      	movs	r3, r0
   27fac:	4333      	orrs	r3, r6
   27fae:	4699      	mov	r9, r3
   27fb0:	d16c      	bne.n	2808c <__aeabi_ddiv+0x178>
   27fb2:	2300      	movs	r3, #0
   27fb4:	4698      	mov	r8, r3
   27fb6:	3302      	adds	r3, #2
   27fb8:	2608      	movs	r6, #8
   27fba:	9303      	str	r3, [sp, #12]
   27fbc:	e7ce      	b.n	27f5c <__aeabi_ddiv+0x48>
   27fbe:	46cb      	mov	fp, r9
   27fc0:	4641      	mov	r1, r8
   27fc2:	9a03      	ldr	r2, [sp, #12]
   27fc4:	9701      	str	r7, [sp, #4]
   27fc6:	2a02      	cmp	r2, #2
   27fc8:	d165      	bne.n	28096 <__aeabi_ddiv+0x182>
   27fca:	9b01      	ldr	r3, [sp, #4]
   27fcc:	4c4a      	ldr	r4, [pc, #296]	; (280f8 <__aeabi_ddiv+0x1e4>)
   27fce:	469c      	mov	ip, r3
   27fd0:	2300      	movs	r3, #0
   27fd2:	2200      	movs	r2, #0
   27fd4:	4698      	mov	r8, r3
   27fd6:	e06b      	b.n	280b0 <__aeabi_ddiv+0x19c>
   27fd8:	0003      	movs	r3, r0
   27fda:	4333      	orrs	r3, r6
   27fdc:	4699      	mov	r9, r3
   27fde:	d04e      	beq.n	2807e <__aeabi_ddiv+0x16a>
   27fe0:	2e00      	cmp	r6, #0
   27fe2:	d100      	bne.n	27fe6 <__aeabi_ddiv+0xd2>
   27fe4:	e1bc      	b.n	28360 <__aeabi_ddiv+0x44c>
   27fe6:	0030      	movs	r0, r6
   27fe8:	f001 fa7e 	bl	294e8 <__clzsi2>
   27fec:	0003      	movs	r3, r0
   27fee:	3b0b      	subs	r3, #11
   27ff0:	2b1c      	cmp	r3, #28
   27ff2:	dd00      	ble.n	27ff6 <__aeabi_ddiv+0xe2>
   27ff4:	e1ac      	b.n	28350 <__aeabi_ddiv+0x43c>
   27ff6:	221d      	movs	r2, #29
   27ff8:	1ad3      	subs	r3, r2, r3
   27ffa:	465a      	mov	r2, fp
   27ffc:	0001      	movs	r1, r0
   27ffe:	40da      	lsrs	r2, r3
   28000:	3908      	subs	r1, #8
   28002:	408e      	lsls	r6, r1
   28004:	0013      	movs	r3, r2
   28006:	4333      	orrs	r3, r6
   28008:	4699      	mov	r9, r3
   2800a:	465b      	mov	r3, fp
   2800c:	408b      	lsls	r3, r1
   2800e:	4698      	mov	r8, r3
   28010:	2300      	movs	r3, #0
   28012:	4c3c      	ldr	r4, [pc, #240]	; (28104 <__aeabi_ddiv+0x1f0>)
   28014:	2600      	movs	r6, #0
   28016:	1a24      	subs	r4, r4, r0
   28018:	9303      	str	r3, [sp, #12]
   2801a:	e79f      	b.n	27f5c <__aeabi_ddiv+0x48>
   2801c:	4651      	mov	r1, sl
   2801e:	465a      	mov	r2, fp
   28020:	4311      	orrs	r1, r2
   28022:	d129      	bne.n	28078 <__aeabi_ddiv+0x164>
   28024:	2200      	movs	r2, #0
   28026:	4693      	mov	fp, r2
   28028:	3202      	adds	r2, #2
   2802a:	e7b1      	b.n	27f90 <__aeabi_ddiv+0x7c>
   2802c:	4659      	mov	r1, fp
   2802e:	4301      	orrs	r1, r0
   28030:	d01e      	beq.n	28070 <__aeabi_ddiv+0x15c>
   28032:	465b      	mov	r3, fp
   28034:	2b00      	cmp	r3, #0
   28036:	d100      	bne.n	2803a <__aeabi_ddiv+0x126>
   28038:	e19e      	b.n	28378 <__aeabi_ddiv+0x464>
   2803a:	4658      	mov	r0, fp
   2803c:	f001 fa54 	bl	294e8 <__clzsi2>
   28040:	0003      	movs	r3, r0
   28042:	3b0b      	subs	r3, #11
   28044:	2b1c      	cmp	r3, #28
   28046:	dd00      	ble.n	2804a <__aeabi_ddiv+0x136>
   28048:	e18f      	b.n	2836a <__aeabi_ddiv+0x456>
   2804a:	0002      	movs	r2, r0
   2804c:	4659      	mov	r1, fp
   2804e:	3a08      	subs	r2, #8
   28050:	4091      	lsls	r1, r2
   28052:	468b      	mov	fp, r1
   28054:	211d      	movs	r1, #29
   28056:	1acb      	subs	r3, r1, r3
   28058:	4651      	mov	r1, sl
   2805a:	40d9      	lsrs	r1, r3
   2805c:	000b      	movs	r3, r1
   2805e:	4659      	mov	r1, fp
   28060:	430b      	orrs	r3, r1
   28062:	4651      	mov	r1, sl
   28064:	469b      	mov	fp, r3
   28066:	4091      	lsls	r1, r2
   28068:	4b26      	ldr	r3, [pc, #152]	; (28104 <__aeabi_ddiv+0x1f0>)
   2806a:	2200      	movs	r2, #0
   2806c:	1a1b      	subs	r3, r3, r0
   2806e:	e78f      	b.n	27f90 <__aeabi_ddiv+0x7c>
   28070:	2300      	movs	r3, #0
   28072:	2201      	movs	r2, #1
   28074:	469b      	mov	fp, r3
   28076:	e78b      	b.n	27f90 <__aeabi_ddiv+0x7c>
   28078:	4651      	mov	r1, sl
   2807a:	2203      	movs	r2, #3
   2807c:	e788      	b.n	27f90 <__aeabi_ddiv+0x7c>
   2807e:	2300      	movs	r3, #0
   28080:	4698      	mov	r8, r3
   28082:	3301      	adds	r3, #1
   28084:	2604      	movs	r6, #4
   28086:	2400      	movs	r4, #0
   28088:	9303      	str	r3, [sp, #12]
   2808a:	e767      	b.n	27f5c <__aeabi_ddiv+0x48>
   2808c:	2303      	movs	r3, #3
   2808e:	46b1      	mov	r9, r6
   28090:	9303      	str	r3, [sp, #12]
   28092:	260c      	movs	r6, #12
   28094:	e762      	b.n	27f5c <__aeabi_ddiv+0x48>
   28096:	2a03      	cmp	r2, #3
   28098:	d100      	bne.n	2809c <__aeabi_ddiv+0x188>
   2809a:	e25c      	b.n	28556 <__aeabi_ddiv+0x642>
   2809c:	9b01      	ldr	r3, [sp, #4]
   2809e:	2a01      	cmp	r2, #1
   280a0:	d000      	beq.n	280a4 <__aeabi_ddiv+0x190>
   280a2:	e1e4      	b.n	2846e <__aeabi_ddiv+0x55a>
   280a4:	4013      	ands	r3, r2
   280a6:	469c      	mov	ip, r3
   280a8:	2300      	movs	r3, #0
   280aa:	2400      	movs	r4, #0
   280ac:	2200      	movs	r2, #0
   280ae:	4698      	mov	r8, r3
   280b0:	2100      	movs	r1, #0
   280b2:	0312      	lsls	r2, r2, #12
   280b4:	0b13      	lsrs	r3, r2, #12
   280b6:	0d0a      	lsrs	r2, r1, #20
   280b8:	0512      	lsls	r2, r2, #20
   280ba:	431a      	orrs	r2, r3
   280bc:	0523      	lsls	r3, r4, #20
   280be:	4c12      	ldr	r4, [pc, #72]	; (28108 <__aeabi_ddiv+0x1f4>)
   280c0:	4640      	mov	r0, r8
   280c2:	4022      	ands	r2, r4
   280c4:	4313      	orrs	r3, r2
   280c6:	4662      	mov	r2, ip
   280c8:	005b      	lsls	r3, r3, #1
   280ca:	07d2      	lsls	r2, r2, #31
   280cc:	085b      	lsrs	r3, r3, #1
   280ce:	4313      	orrs	r3, r2
   280d0:	0019      	movs	r1, r3
   280d2:	b007      	add	sp, #28
   280d4:	bc3c      	pop	{r2, r3, r4, r5}
   280d6:	4690      	mov	r8, r2
   280d8:	4699      	mov	r9, r3
   280da:	46a2      	mov	sl, r4
   280dc:	46ab      	mov	fp, r5
   280de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   280e0:	2300      	movs	r3, #0
   280e2:	2280      	movs	r2, #128	; 0x80
   280e4:	469c      	mov	ip, r3
   280e6:	0312      	lsls	r2, r2, #12
   280e8:	4698      	mov	r8, r3
   280ea:	4c03      	ldr	r4, [pc, #12]	; (280f8 <__aeabi_ddiv+0x1e4>)
   280ec:	e7e0      	b.n	280b0 <__aeabi_ddiv+0x19c>
   280ee:	2300      	movs	r3, #0
   280f0:	4c01      	ldr	r4, [pc, #4]	; (280f8 <__aeabi_ddiv+0x1e4>)
   280f2:	2200      	movs	r2, #0
   280f4:	4698      	mov	r8, r3
   280f6:	e7db      	b.n	280b0 <__aeabi_ddiv+0x19c>
   280f8:	000007ff 	.word	0x000007ff
   280fc:	fffffc01 	.word	0xfffffc01
   28100:	0002b790 	.word	0x0002b790
   28104:	fffffc0d 	.word	0xfffffc0d
   28108:	800fffff 	.word	0x800fffff
   2810c:	45d9      	cmp	r9, fp
   2810e:	d900      	bls.n	28112 <__aeabi_ddiv+0x1fe>
   28110:	e139      	b.n	28386 <__aeabi_ddiv+0x472>
   28112:	d100      	bne.n	28116 <__aeabi_ddiv+0x202>
   28114:	e134      	b.n	28380 <__aeabi_ddiv+0x46c>
   28116:	2300      	movs	r3, #0
   28118:	4646      	mov	r6, r8
   2811a:	464d      	mov	r5, r9
   2811c:	469a      	mov	sl, r3
   2811e:	3c01      	subs	r4, #1
   28120:	465b      	mov	r3, fp
   28122:	0e0a      	lsrs	r2, r1, #24
   28124:	021b      	lsls	r3, r3, #8
   28126:	431a      	orrs	r2, r3
   28128:	020b      	lsls	r3, r1, #8
   2812a:	0c17      	lsrs	r7, r2, #16
   2812c:	9303      	str	r3, [sp, #12]
   2812e:	0413      	lsls	r3, r2, #16
   28130:	0c1b      	lsrs	r3, r3, #16
   28132:	0039      	movs	r1, r7
   28134:	0028      	movs	r0, r5
   28136:	4690      	mov	r8, r2
   28138:	9301      	str	r3, [sp, #4]
   2813a:	f7fe fe51 	bl	26de0 <__udivsi3>
   2813e:	0002      	movs	r2, r0
   28140:	9b01      	ldr	r3, [sp, #4]
   28142:	4683      	mov	fp, r0
   28144:	435a      	muls	r2, r3
   28146:	0028      	movs	r0, r5
   28148:	0039      	movs	r1, r7
   2814a:	4691      	mov	r9, r2
   2814c:	f7fe fece 	bl	26eec <__aeabi_uidivmod>
   28150:	0c35      	lsrs	r5, r6, #16
   28152:	0409      	lsls	r1, r1, #16
   28154:	430d      	orrs	r5, r1
   28156:	45a9      	cmp	r9, r5
   28158:	d90d      	bls.n	28176 <__aeabi_ddiv+0x262>
   2815a:	465b      	mov	r3, fp
   2815c:	4445      	add	r5, r8
   2815e:	3b01      	subs	r3, #1
   28160:	45a8      	cmp	r8, r5
   28162:	d900      	bls.n	28166 <__aeabi_ddiv+0x252>
   28164:	e13a      	b.n	283dc <__aeabi_ddiv+0x4c8>
   28166:	45a9      	cmp	r9, r5
   28168:	d800      	bhi.n	2816c <__aeabi_ddiv+0x258>
   2816a:	e137      	b.n	283dc <__aeabi_ddiv+0x4c8>
   2816c:	2302      	movs	r3, #2
   2816e:	425b      	negs	r3, r3
   28170:	469c      	mov	ip, r3
   28172:	4445      	add	r5, r8
   28174:	44e3      	add	fp, ip
   28176:	464b      	mov	r3, r9
   28178:	1aeb      	subs	r3, r5, r3
   2817a:	0039      	movs	r1, r7
   2817c:	0018      	movs	r0, r3
   2817e:	9304      	str	r3, [sp, #16]
   28180:	f7fe fe2e 	bl	26de0 <__udivsi3>
   28184:	9b01      	ldr	r3, [sp, #4]
   28186:	0005      	movs	r5, r0
   28188:	4343      	muls	r3, r0
   2818a:	0039      	movs	r1, r7
   2818c:	9804      	ldr	r0, [sp, #16]
   2818e:	4699      	mov	r9, r3
   28190:	f7fe feac 	bl	26eec <__aeabi_uidivmod>
   28194:	0433      	lsls	r3, r6, #16
   28196:	0409      	lsls	r1, r1, #16
   28198:	0c1b      	lsrs	r3, r3, #16
   2819a:	430b      	orrs	r3, r1
   2819c:	4599      	cmp	r9, r3
   2819e:	d909      	bls.n	281b4 <__aeabi_ddiv+0x2a0>
   281a0:	4443      	add	r3, r8
   281a2:	1e6a      	subs	r2, r5, #1
   281a4:	4598      	cmp	r8, r3
   281a6:	d900      	bls.n	281aa <__aeabi_ddiv+0x296>
   281a8:	e11a      	b.n	283e0 <__aeabi_ddiv+0x4cc>
   281aa:	4599      	cmp	r9, r3
   281ac:	d800      	bhi.n	281b0 <__aeabi_ddiv+0x29c>
   281ae:	e117      	b.n	283e0 <__aeabi_ddiv+0x4cc>
   281b0:	3d02      	subs	r5, #2
   281b2:	4443      	add	r3, r8
   281b4:	464a      	mov	r2, r9
   281b6:	1a9b      	subs	r3, r3, r2
   281b8:	465a      	mov	r2, fp
   281ba:	0412      	lsls	r2, r2, #16
   281bc:	432a      	orrs	r2, r5
   281be:	9903      	ldr	r1, [sp, #12]
   281c0:	4693      	mov	fp, r2
   281c2:	0c10      	lsrs	r0, r2, #16
   281c4:	0c0a      	lsrs	r2, r1, #16
   281c6:	4691      	mov	r9, r2
   281c8:	0409      	lsls	r1, r1, #16
   281ca:	465a      	mov	r2, fp
   281cc:	0c09      	lsrs	r1, r1, #16
   281ce:	464e      	mov	r6, r9
   281d0:	000d      	movs	r5, r1
   281d2:	0412      	lsls	r2, r2, #16
   281d4:	0c12      	lsrs	r2, r2, #16
   281d6:	4345      	muls	r5, r0
   281d8:	9105      	str	r1, [sp, #20]
   281da:	4351      	muls	r1, r2
   281dc:	4372      	muls	r2, r6
   281de:	4370      	muls	r0, r6
   281e0:	1952      	adds	r2, r2, r5
   281e2:	0c0e      	lsrs	r6, r1, #16
   281e4:	18b2      	adds	r2, r6, r2
   281e6:	4295      	cmp	r5, r2
   281e8:	d903      	bls.n	281f2 <__aeabi_ddiv+0x2de>
   281ea:	2580      	movs	r5, #128	; 0x80
   281ec:	026d      	lsls	r5, r5, #9
   281ee:	46ac      	mov	ip, r5
   281f0:	4460      	add	r0, ip
   281f2:	0c15      	lsrs	r5, r2, #16
   281f4:	0409      	lsls	r1, r1, #16
   281f6:	0412      	lsls	r2, r2, #16
   281f8:	0c09      	lsrs	r1, r1, #16
   281fa:	1828      	adds	r0, r5, r0
   281fc:	1852      	adds	r2, r2, r1
   281fe:	4283      	cmp	r3, r0
   28200:	d200      	bcs.n	28204 <__aeabi_ddiv+0x2f0>
   28202:	e0ce      	b.n	283a2 <__aeabi_ddiv+0x48e>
   28204:	d100      	bne.n	28208 <__aeabi_ddiv+0x2f4>
   28206:	e0c8      	b.n	2839a <__aeabi_ddiv+0x486>
   28208:	1a1d      	subs	r5, r3, r0
   2820a:	4653      	mov	r3, sl
   2820c:	1a9e      	subs	r6, r3, r2
   2820e:	45b2      	cmp	sl, r6
   28210:	4192      	sbcs	r2, r2
   28212:	4252      	negs	r2, r2
   28214:	1aab      	subs	r3, r5, r2
   28216:	469a      	mov	sl, r3
   28218:	4598      	cmp	r8, r3
   2821a:	d100      	bne.n	2821e <__aeabi_ddiv+0x30a>
   2821c:	e117      	b.n	2844e <__aeabi_ddiv+0x53a>
   2821e:	0039      	movs	r1, r7
   28220:	0018      	movs	r0, r3
   28222:	f7fe fddd 	bl	26de0 <__udivsi3>
   28226:	9b01      	ldr	r3, [sp, #4]
   28228:	0005      	movs	r5, r0
   2822a:	4343      	muls	r3, r0
   2822c:	0039      	movs	r1, r7
   2822e:	4650      	mov	r0, sl
   28230:	9304      	str	r3, [sp, #16]
   28232:	f7fe fe5b 	bl	26eec <__aeabi_uidivmod>
   28236:	9804      	ldr	r0, [sp, #16]
   28238:	040b      	lsls	r3, r1, #16
   2823a:	0c31      	lsrs	r1, r6, #16
   2823c:	4319      	orrs	r1, r3
   2823e:	4288      	cmp	r0, r1
   28240:	d909      	bls.n	28256 <__aeabi_ddiv+0x342>
   28242:	4441      	add	r1, r8
   28244:	1e6b      	subs	r3, r5, #1
   28246:	4588      	cmp	r8, r1
   28248:	d900      	bls.n	2824c <__aeabi_ddiv+0x338>
   2824a:	e107      	b.n	2845c <__aeabi_ddiv+0x548>
   2824c:	4288      	cmp	r0, r1
   2824e:	d800      	bhi.n	28252 <__aeabi_ddiv+0x33e>
   28250:	e104      	b.n	2845c <__aeabi_ddiv+0x548>
   28252:	3d02      	subs	r5, #2
   28254:	4441      	add	r1, r8
   28256:	9b04      	ldr	r3, [sp, #16]
   28258:	1acb      	subs	r3, r1, r3
   2825a:	0018      	movs	r0, r3
   2825c:	0039      	movs	r1, r7
   2825e:	9304      	str	r3, [sp, #16]
   28260:	f7fe fdbe 	bl	26de0 <__udivsi3>
   28264:	9b01      	ldr	r3, [sp, #4]
   28266:	4682      	mov	sl, r0
   28268:	4343      	muls	r3, r0
   2826a:	0039      	movs	r1, r7
   2826c:	9804      	ldr	r0, [sp, #16]
   2826e:	9301      	str	r3, [sp, #4]
   28270:	f7fe fe3c 	bl	26eec <__aeabi_uidivmod>
   28274:	9801      	ldr	r0, [sp, #4]
   28276:	040b      	lsls	r3, r1, #16
   28278:	0431      	lsls	r1, r6, #16
   2827a:	0c09      	lsrs	r1, r1, #16
   2827c:	4319      	orrs	r1, r3
   2827e:	4288      	cmp	r0, r1
   28280:	d90d      	bls.n	2829e <__aeabi_ddiv+0x38a>
   28282:	4653      	mov	r3, sl
   28284:	4441      	add	r1, r8
   28286:	3b01      	subs	r3, #1
   28288:	4588      	cmp	r8, r1
   2828a:	d900      	bls.n	2828e <__aeabi_ddiv+0x37a>
   2828c:	e0e8      	b.n	28460 <__aeabi_ddiv+0x54c>
   2828e:	4288      	cmp	r0, r1
   28290:	d800      	bhi.n	28294 <__aeabi_ddiv+0x380>
   28292:	e0e5      	b.n	28460 <__aeabi_ddiv+0x54c>
   28294:	2302      	movs	r3, #2
   28296:	425b      	negs	r3, r3
   28298:	469c      	mov	ip, r3
   2829a:	4441      	add	r1, r8
   2829c:	44e2      	add	sl, ip
   2829e:	9b01      	ldr	r3, [sp, #4]
   282a0:	042d      	lsls	r5, r5, #16
   282a2:	1ace      	subs	r6, r1, r3
   282a4:	4651      	mov	r1, sl
   282a6:	4329      	orrs	r1, r5
   282a8:	9d05      	ldr	r5, [sp, #20]
   282aa:	464f      	mov	r7, r9
   282ac:	002a      	movs	r2, r5
   282ae:	040b      	lsls	r3, r1, #16
   282b0:	0c08      	lsrs	r0, r1, #16
   282b2:	0c1b      	lsrs	r3, r3, #16
   282b4:	435a      	muls	r2, r3
   282b6:	4345      	muls	r5, r0
   282b8:	437b      	muls	r3, r7
   282ba:	4378      	muls	r0, r7
   282bc:	195b      	adds	r3, r3, r5
   282be:	0c17      	lsrs	r7, r2, #16
   282c0:	18fb      	adds	r3, r7, r3
   282c2:	429d      	cmp	r5, r3
   282c4:	d903      	bls.n	282ce <__aeabi_ddiv+0x3ba>
   282c6:	2580      	movs	r5, #128	; 0x80
   282c8:	026d      	lsls	r5, r5, #9
   282ca:	46ac      	mov	ip, r5
   282cc:	4460      	add	r0, ip
   282ce:	0c1d      	lsrs	r5, r3, #16
   282d0:	0412      	lsls	r2, r2, #16
   282d2:	041b      	lsls	r3, r3, #16
   282d4:	0c12      	lsrs	r2, r2, #16
   282d6:	1828      	adds	r0, r5, r0
   282d8:	189b      	adds	r3, r3, r2
   282da:	4286      	cmp	r6, r0
   282dc:	d200      	bcs.n	282e0 <__aeabi_ddiv+0x3cc>
   282de:	e093      	b.n	28408 <__aeabi_ddiv+0x4f4>
   282e0:	d100      	bne.n	282e4 <__aeabi_ddiv+0x3d0>
   282e2:	e08e      	b.n	28402 <__aeabi_ddiv+0x4ee>
   282e4:	2301      	movs	r3, #1
   282e6:	4319      	orrs	r1, r3
   282e8:	4ba0      	ldr	r3, [pc, #640]	; (2856c <__aeabi_ddiv+0x658>)
   282ea:	18e3      	adds	r3, r4, r3
   282ec:	2b00      	cmp	r3, #0
   282ee:	dc00      	bgt.n	282f2 <__aeabi_ddiv+0x3de>
   282f0:	e099      	b.n	28426 <__aeabi_ddiv+0x512>
   282f2:	074a      	lsls	r2, r1, #29
   282f4:	d000      	beq.n	282f8 <__aeabi_ddiv+0x3e4>
   282f6:	e09e      	b.n	28436 <__aeabi_ddiv+0x522>
   282f8:	465a      	mov	r2, fp
   282fa:	01d2      	lsls	r2, r2, #7
   282fc:	d506      	bpl.n	2830c <__aeabi_ddiv+0x3f8>
   282fe:	465a      	mov	r2, fp
   28300:	4b9b      	ldr	r3, [pc, #620]	; (28570 <__aeabi_ddiv+0x65c>)
   28302:	401a      	ands	r2, r3
   28304:	2380      	movs	r3, #128	; 0x80
   28306:	4693      	mov	fp, r2
   28308:	00db      	lsls	r3, r3, #3
   2830a:	18e3      	adds	r3, r4, r3
   2830c:	4a99      	ldr	r2, [pc, #612]	; (28574 <__aeabi_ddiv+0x660>)
   2830e:	4293      	cmp	r3, r2
   28310:	dd68      	ble.n	283e4 <__aeabi_ddiv+0x4d0>
   28312:	2301      	movs	r3, #1
   28314:	9a02      	ldr	r2, [sp, #8]
   28316:	4c98      	ldr	r4, [pc, #608]	; (28578 <__aeabi_ddiv+0x664>)
   28318:	401a      	ands	r2, r3
   2831a:	2300      	movs	r3, #0
   2831c:	4694      	mov	ip, r2
   2831e:	4698      	mov	r8, r3
   28320:	2200      	movs	r2, #0
   28322:	e6c5      	b.n	280b0 <__aeabi_ddiv+0x19c>
   28324:	2280      	movs	r2, #128	; 0x80
   28326:	464b      	mov	r3, r9
   28328:	0312      	lsls	r2, r2, #12
   2832a:	4213      	tst	r3, r2
   2832c:	d00a      	beq.n	28344 <__aeabi_ddiv+0x430>
   2832e:	465b      	mov	r3, fp
   28330:	4213      	tst	r3, r2
   28332:	d106      	bne.n	28342 <__aeabi_ddiv+0x42e>
   28334:	431a      	orrs	r2, r3
   28336:	0312      	lsls	r2, r2, #12
   28338:	0b12      	lsrs	r2, r2, #12
   2833a:	46ac      	mov	ip, r5
   2833c:	4688      	mov	r8, r1
   2833e:	4c8e      	ldr	r4, [pc, #568]	; (28578 <__aeabi_ddiv+0x664>)
   28340:	e6b6      	b.n	280b0 <__aeabi_ddiv+0x19c>
   28342:	464b      	mov	r3, r9
   28344:	431a      	orrs	r2, r3
   28346:	0312      	lsls	r2, r2, #12
   28348:	0b12      	lsrs	r2, r2, #12
   2834a:	46bc      	mov	ip, r7
   2834c:	4c8a      	ldr	r4, [pc, #552]	; (28578 <__aeabi_ddiv+0x664>)
   2834e:	e6af      	b.n	280b0 <__aeabi_ddiv+0x19c>
   28350:	0003      	movs	r3, r0
   28352:	465a      	mov	r2, fp
   28354:	3b28      	subs	r3, #40	; 0x28
   28356:	409a      	lsls	r2, r3
   28358:	2300      	movs	r3, #0
   2835a:	4691      	mov	r9, r2
   2835c:	4698      	mov	r8, r3
   2835e:	e657      	b.n	28010 <__aeabi_ddiv+0xfc>
   28360:	4658      	mov	r0, fp
   28362:	f001 f8c1 	bl	294e8 <__clzsi2>
   28366:	3020      	adds	r0, #32
   28368:	e640      	b.n	27fec <__aeabi_ddiv+0xd8>
   2836a:	0003      	movs	r3, r0
   2836c:	4652      	mov	r2, sl
   2836e:	3b28      	subs	r3, #40	; 0x28
   28370:	409a      	lsls	r2, r3
   28372:	2100      	movs	r1, #0
   28374:	4693      	mov	fp, r2
   28376:	e677      	b.n	28068 <__aeabi_ddiv+0x154>
   28378:	f001 f8b6 	bl	294e8 <__clzsi2>
   2837c:	3020      	adds	r0, #32
   2837e:	e65f      	b.n	28040 <__aeabi_ddiv+0x12c>
   28380:	4588      	cmp	r8, r1
   28382:	d200      	bcs.n	28386 <__aeabi_ddiv+0x472>
   28384:	e6c7      	b.n	28116 <__aeabi_ddiv+0x202>
   28386:	464b      	mov	r3, r9
   28388:	07de      	lsls	r6, r3, #31
   2838a:	085d      	lsrs	r5, r3, #1
   2838c:	4643      	mov	r3, r8
   2838e:	085b      	lsrs	r3, r3, #1
   28390:	431e      	orrs	r6, r3
   28392:	4643      	mov	r3, r8
   28394:	07db      	lsls	r3, r3, #31
   28396:	469a      	mov	sl, r3
   28398:	e6c2      	b.n	28120 <__aeabi_ddiv+0x20c>
   2839a:	2500      	movs	r5, #0
   2839c:	4592      	cmp	sl, r2
   2839e:	d300      	bcc.n	283a2 <__aeabi_ddiv+0x48e>
   283a0:	e733      	b.n	2820a <__aeabi_ddiv+0x2f6>
   283a2:	9e03      	ldr	r6, [sp, #12]
   283a4:	4659      	mov	r1, fp
   283a6:	46b4      	mov	ip, r6
   283a8:	44e2      	add	sl, ip
   283aa:	45b2      	cmp	sl, r6
   283ac:	41ad      	sbcs	r5, r5
   283ae:	426d      	negs	r5, r5
   283b0:	4445      	add	r5, r8
   283b2:	18eb      	adds	r3, r5, r3
   283b4:	3901      	subs	r1, #1
   283b6:	4598      	cmp	r8, r3
   283b8:	d207      	bcs.n	283ca <__aeabi_ddiv+0x4b6>
   283ba:	4298      	cmp	r0, r3
   283bc:	d900      	bls.n	283c0 <__aeabi_ddiv+0x4ac>
   283be:	e07f      	b.n	284c0 <__aeabi_ddiv+0x5ac>
   283c0:	d100      	bne.n	283c4 <__aeabi_ddiv+0x4b0>
   283c2:	e0bc      	b.n	2853e <__aeabi_ddiv+0x62a>
   283c4:	1a1d      	subs	r5, r3, r0
   283c6:	468b      	mov	fp, r1
   283c8:	e71f      	b.n	2820a <__aeabi_ddiv+0x2f6>
   283ca:	4598      	cmp	r8, r3
   283cc:	d1fa      	bne.n	283c4 <__aeabi_ddiv+0x4b0>
   283ce:	9d03      	ldr	r5, [sp, #12]
   283d0:	4555      	cmp	r5, sl
   283d2:	d9f2      	bls.n	283ba <__aeabi_ddiv+0x4a6>
   283d4:	4643      	mov	r3, r8
   283d6:	468b      	mov	fp, r1
   283d8:	1a1d      	subs	r5, r3, r0
   283da:	e716      	b.n	2820a <__aeabi_ddiv+0x2f6>
   283dc:	469b      	mov	fp, r3
   283de:	e6ca      	b.n	28176 <__aeabi_ddiv+0x262>
   283e0:	0015      	movs	r5, r2
   283e2:	e6e7      	b.n	281b4 <__aeabi_ddiv+0x2a0>
   283e4:	465a      	mov	r2, fp
   283e6:	08c9      	lsrs	r1, r1, #3
   283e8:	0752      	lsls	r2, r2, #29
   283ea:	430a      	orrs	r2, r1
   283ec:	055b      	lsls	r3, r3, #21
   283ee:	4690      	mov	r8, r2
   283f0:	0d5c      	lsrs	r4, r3, #21
   283f2:	465a      	mov	r2, fp
   283f4:	2301      	movs	r3, #1
   283f6:	9902      	ldr	r1, [sp, #8]
   283f8:	0252      	lsls	r2, r2, #9
   283fa:	4019      	ands	r1, r3
   283fc:	0b12      	lsrs	r2, r2, #12
   283fe:	468c      	mov	ip, r1
   28400:	e656      	b.n	280b0 <__aeabi_ddiv+0x19c>
   28402:	2b00      	cmp	r3, #0
   28404:	d100      	bne.n	28408 <__aeabi_ddiv+0x4f4>
   28406:	e76f      	b.n	282e8 <__aeabi_ddiv+0x3d4>
   28408:	4446      	add	r6, r8
   2840a:	1e4a      	subs	r2, r1, #1
   2840c:	45b0      	cmp	r8, r6
   2840e:	d929      	bls.n	28464 <__aeabi_ddiv+0x550>
   28410:	0011      	movs	r1, r2
   28412:	4286      	cmp	r6, r0
   28414:	d000      	beq.n	28418 <__aeabi_ddiv+0x504>
   28416:	e765      	b.n	282e4 <__aeabi_ddiv+0x3d0>
   28418:	9a03      	ldr	r2, [sp, #12]
   2841a:	4293      	cmp	r3, r2
   2841c:	d000      	beq.n	28420 <__aeabi_ddiv+0x50c>
   2841e:	e761      	b.n	282e4 <__aeabi_ddiv+0x3d0>
   28420:	e762      	b.n	282e8 <__aeabi_ddiv+0x3d4>
   28422:	2101      	movs	r1, #1
   28424:	4249      	negs	r1, r1
   28426:	2001      	movs	r0, #1
   28428:	1ac2      	subs	r2, r0, r3
   2842a:	2a38      	cmp	r2, #56	; 0x38
   2842c:	dd21      	ble.n	28472 <__aeabi_ddiv+0x55e>
   2842e:	9b02      	ldr	r3, [sp, #8]
   28430:	4003      	ands	r3, r0
   28432:	469c      	mov	ip, r3
   28434:	e638      	b.n	280a8 <__aeabi_ddiv+0x194>
   28436:	220f      	movs	r2, #15
   28438:	400a      	ands	r2, r1
   2843a:	2a04      	cmp	r2, #4
   2843c:	d100      	bne.n	28440 <__aeabi_ddiv+0x52c>
   2843e:	e75b      	b.n	282f8 <__aeabi_ddiv+0x3e4>
   28440:	000a      	movs	r2, r1
   28442:	1d11      	adds	r1, r2, #4
   28444:	4291      	cmp	r1, r2
   28446:	4192      	sbcs	r2, r2
   28448:	4252      	negs	r2, r2
   2844a:	4493      	add	fp, r2
   2844c:	e754      	b.n	282f8 <__aeabi_ddiv+0x3e4>
   2844e:	4b47      	ldr	r3, [pc, #284]	; (2856c <__aeabi_ddiv+0x658>)
   28450:	18e3      	adds	r3, r4, r3
   28452:	2b00      	cmp	r3, #0
   28454:	dde5      	ble.n	28422 <__aeabi_ddiv+0x50e>
   28456:	2201      	movs	r2, #1
   28458:	4252      	negs	r2, r2
   2845a:	e7f2      	b.n	28442 <__aeabi_ddiv+0x52e>
   2845c:	001d      	movs	r5, r3
   2845e:	e6fa      	b.n	28256 <__aeabi_ddiv+0x342>
   28460:	469a      	mov	sl, r3
   28462:	e71c      	b.n	2829e <__aeabi_ddiv+0x38a>
   28464:	42b0      	cmp	r0, r6
   28466:	d839      	bhi.n	284dc <__aeabi_ddiv+0x5c8>
   28468:	d06e      	beq.n	28548 <__aeabi_ddiv+0x634>
   2846a:	0011      	movs	r1, r2
   2846c:	e73a      	b.n	282e4 <__aeabi_ddiv+0x3d0>
   2846e:	9302      	str	r3, [sp, #8]
   28470:	e73a      	b.n	282e8 <__aeabi_ddiv+0x3d4>
   28472:	2a1f      	cmp	r2, #31
   28474:	dc3c      	bgt.n	284f0 <__aeabi_ddiv+0x5dc>
   28476:	2320      	movs	r3, #32
   28478:	1a9b      	subs	r3, r3, r2
   2847a:	000c      	movs	r4, r1
   2847c:	4658      	mov	r0, fp
   2847e:	4099      	lsls	r1, r3
   28480:	4098      	lsls	r0, r3
   28482:	1e4b      	subs	r3, r1, #1
   28484:	4199      	sbcs	r1, r3
   28486:	465b      	mov	r3, fp
   28488:	40d4      	lsrs	r4, r2
   2848a:	40d3      	lsrs	r3, r2
   2848c:	4320      	orrs	r0, r4
   2848e:	4308      	orrs	r0, r1
   28490:	001a      	movs	r2, r3
   28492:	0743      	lsls	r3, r0, #29
   28494:	d009      	beq.n	284aa <__aeabi_ddiv+0x596>
   28496:	230f      	movs	r3, #15
   28498:	4003      	ands	r3, r0
   2849a:	2b04      	cmp	r3, #4
   2849c:	d005      	beq.n	284aa <__aeabi_ddiv+0x596>
   2849e:	0001      	movs	r1, r0
   284a0:	1d08      	adds	r0, r1, #4
   284a2:	4288      	cmp	r0, r1
   284a4:	419b      	sbcs	r3, r3
   284a6:	425b      	negs	r3, r3
   284a8:	18d2      	adds	r2, r2, r3
   284aa:	0213      	lsls	r3, r2, #8
   284ac:	d53a      	bpl.n	28524 <__aeabi_ddiv+0x610>
   284ae:	2301      	movs	r3, #1
   284b0:	9a02      	ldr	r2, [sp, #8]
   284b2:	2401      	movs	r4, #1
   284b4:	401a      	ands	r2, r3
   284b6:	2300      	movs	r3, #0
   284b8:	4694      	mov	ip, r2
   284ba:	4698      	mov	r8, r3
   284bc:	2200      	movs	r2, #0
   284be:	e5f7      	b.n	280b0 <__aeabi_ddiv+0x19c>
   284c0:	2102      	movs	r1, #2
   284c2:	4249      	negs	r1, r1
   284c4:	468c      	mov	ip, r1
   284c6:	9d03      	ldr	r5, [sp, #12]
   284c8:	44e3      	add	fp, ip
   284ca:	46ac      	mov	ip, r5
   284cc:	44e2      	add	sl, ip
   284ce:	45aa      	cmp	sl, r5
   284d0:	41ad      	sbcs	r5, r5
   284d2:	426d      	negs	r5, r5
   284d4:	4445      	add	r5, r8
   284d6:	18ed      	adds	r5, r5, r3
   284d8:	1a2d      	subs	r5, r5, r0
   284da:	e696      	b.n	2820a <__aeabi_ddiv+0x2f6>
   284dc:	1e8a      	subs	r2, r1, #2
   284de:	9903      	ldr	r1, [sp, #12]
   284e0:	004d      	lsls	r5, r1, #1
   284e2:	428d      	cmp	r5, r1
   284e4:	4189      	sbcs	r1, r1
   284e6:	4249      	negs	r1, r1
   284e8:	4441      	add	r1, r8
   284ea:	1876      	adds	r6, r6, r1
   284ec:	9503      	str	r5, [sp, #12]
   284ee:	e78f      	b.n	28410 <__aeabi_ddiv+0x4fc>
   284f0:	201f      	movs	r0, #31
   284f2:	4240      	negs	r0, r0
   284f4:	1ac3      	subs	r3, r0, r3
   284f6:	4658      	mov	r0, fp
   284f8:	40d8      	lsrs	r0, r3
   284fa:	0003      	movs	r3, r0
   284fc:	2a20      	cmp	r2, #32
   284fe:	d028      	beq.n	28552 <__aeabi_ddiv+0x63e>
   28500:	2040      	movs	r0, #64	; 0x40
   28502:	465d      	mov	r5, fp
   28504:	1a82      	subs	r2, r0, r2
   28506:	4095      	lsls	r5, r2
   28508:	4329      	orrs	r1, r5
   2850a:	1e4a      	subs	r2, r1, #1
   2850c:	4191      	sbcs	r1, r2
   2850e:	4319      	orrs	r1, r3
   28510:	2307      	movs	r3, #7
   28512:	2200      	movs	r2, #0
   28514:	400b      	ands	r3, r1
   28516:	d009      	beq.n	2852c <__aeabi_ddiv+0x618>
   28518:	230f      	movs	r3, #15
   2851a:	2200      	movs	r2, #0
   2851c:	400b      	ands	r3, r1
   2851e:	0008      	movs	r0, r1
   28520:	2b04      	cmp	r3, #4
   28522:	d1bd      	bne.n	284a0 <__aeabi_ddiv+0x58c>
   28524:	0001      	movs	r1, r0
   28526:	0753      	lsls	r3, r2, #29
   28528:	0252      	lsls	r2, r2, #9
   2852a:	0b12      	lsrs	r2, r2, #12
   2852c:	08c9      	lsrs	r1, r1, #3
   2852e:	4319      	orrs	r1, r3
   28530:	2301      	movs	r3, #1
   28532:	4688      	mov	r8, r1
   28534:	9902      	ldr	r1, [sp, #8]
   28536:	2400      	movs	r4, #0
   28538:	4019      	ands	r1, r3
   2853a:	468c      	mov	ip, r1
   2853c:	e5b8      	b.n	280b0 <__aeabi_ddiv+0x19c>
   2853e:	4552      	cmp	r2, sl
   28540:	d8be      	bhi.n	284c0 <__aeabi_ddiv+0x5ac>
   28542:	468b      	mov	fp, r1
   28544:	2500      	movs	r5, #0
   28546:	e660      	b.n	2820a <__aeabi_ddiv+0x2f6>
   28548:	9d03      	ldr	r5, [sp, #12]
   2854a:	429d      	cmp	r5, r3
   2854c:	d3c6      	bcc.n	284dc <__aeabi_ddiv+0x5c8>
   2854e:	0011      	movs	r1, r2
   28550:	e762      	b.n	28418 <__aeabi_ddiv+0x504>
   28552:	2500      	movs	r5, #0
   28554:	e7d8      	b.n	28508 <__aeabi_ddiv+0x5f4>
   28556:	2280      	movs	r2, #128	; 0x80
   28558:	465b      	mov	r3, fp
   2855a:	0312      	lsls	r2, r2, #12
   2855c:	431a      	orrs	r2, r3
   2855e:	9b01      	ldr	r3, [sp, #4]
   28560:	0312      	lsls	r2, r2, #12
   28562:	0b12      	lsrs	r2, r2, #12
   28564:	469c      	mov	ip, r3
   28566:	4688      	mov	r8, r1
   28568:	4c03      	ldr	r4, [pc, #12]	; (28578 <__aeabi_ddiv+0x664>)
   2856a:	e5a1      	b.n	280b0 <__aeabi_ddiv+0x19c>
   2856c:	000003ff 	.word	0x000003ff
   28570:	feffffff 	.word	0xfeffffff
   28574:	000007fe 	.word	0x000007fe
   28578:	000007ff 	.word	0x000007ff

0002857c <__eqdf2>:
   2857c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2857e:	464f      	mov	r7, r9
   28580:	4646      	mov	r6, r8
   28582:	46d6      	mov	lr, sl
   28584:	005c      	lsls	r4, r3, #1
   28586:	b5c0      	push	{r6, r7, lr}
   28588:	031f      	lsls	r7, r3, #12
   2858a:	0fdb      	lsrs	r3, r3, #31
   2858c:	469a      	mov	sl, r3
   2858e:	4b17      	ldr	r3, [pc, #92]	; (285ec <__eqdf2+0x70>)
   28590:	030e      	lsls	r6, r1, #12
   28592:	004d      	lsls	r5, r1, #1
   28594:	4684      	mov	ip, r0
   28596:	4680      	mov	r8, r0
   28598:	0b36      	lsrs	r6, r6, #12
   2859a:	0d6d      	lsrs	r5, r5, #21
   2859c:	0fc9      	lsrs	r1, r1, #31
   2859e:	4691      	mov	r9, r2
   285a0:	0b3f      	lsrs	r7, r7, #12
   285a2:	0d64      	lsrs	r4, r4, #21
   285a4:	2001      	movs	r0, #1
   285a6:	429d      	cmp	r5, r3
   285a8:	d008      	beq.n	285bc <__eqdf2+0x40>
   285aa:	429c      	cmp	r4, r3
   285ac:	d001      	beq.n	285b2 <__eqdf2+0x36>
   285ae:	42a5      	cmp	r5, r4
   285b0:	d00b      	beq.n	285ca <__eqdf2+0x4e>
   285b2:	bc1c      	pop	{r2, r3, r4}
   285b4:	4690      	mov	r8, r2
   285b6:	4699      	mov	r9, r3
   285b8:	46a2      	mov	sl, r4
   285ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   285bc:	4663      	mov	r3, ip
   285be:	4333      	orrs	r3, r6
   285c0:	d1f7      	bne.n	285b2 <__eqdf2+0x36>
   285c2:	42ac      	cmp	r4, r5
   285c4:	d1f5      	bne.n	285b2 <__eqdf2+0x36>
   285c6:	433a      	orrs	r2, r7
   285c8:	d1f3      	bne.n	285b2 <__eqdf2+0x36>
   285ca:	2001      	movs	r0, #1
   285cc:	42be      	cmp	r6, r7
   285ce:	d1f0      	bne.n	285b2 <__eqdf2+0x36>
   285d0:	45c8      	cmp	r8, r9
   285d2:	d1ee      	bne.n	285b2 <__eqdf2+0x36>
   285d4:	4551      	cmp	r1, sl
   285d6:	d007      	beq.n	285e8 <__eqdf2+0x6c>
   285d8:	2d00      	cmp	r5, #0
   285da:	d1ea      	bne.n	285b2 <__eqdf2+0x36>
   285dc:	4663      	mov	r3, ip
   285de:	431e      	orrs	r6, r3
   285e0:	0030      	movs	r0, r6
   285e2:	1e46      	subs	r6, r0, #1
   285e4:	41b0      	sbcs	r0, r6
   285e6:	e7e4      	b.n	285b2 <__eqdf2+0x36>
   285e8:	2000      	movs	r0, #0
   285ea:	e7e2      	b.n	285b2 <__eqdf2+0x36>
   285ec:	000007ff 	.word	0x000007ff

000285f0 <__gedf2>:
   285f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   285f2:	4645      	mov	r5, r8
   285f4:	46de      	mov	lr, fp
   285f6:	4657      	mov	r7, sl
   285f8:	464e      	mov	r6, r9
   285fa:	b5e0      	push	{r5, r6, r7, lr}
   285fc:	031f      	lsls	r7, r3, #12
   285fe:	0b3d      	lsrs	r5, r7, #12
   28600:	4f2c      	ldr	r7, [pc, #176]	; (286b4 <__gedf2+0xc4>)
   28602:	030e      	lsls	r6, r1, #12
   28604:	004c      	lsls	r4, r1, #1
   28606:	46ab      	mov	fp, r5
   28608:	005d      	lsls	r5, r3, #1
   2860a:	4684      	mov	ip, r0
   2860c:	0b36      	lsrs	r6, r6, #12
   2860e:	0d64      	lsrs	r4, r4, #21
   28610:	0fc9      	lsrs	r1, r1, #31
   28612:	4690      	mov	r8, r2
   28614:	0d6d      	lsrs	r5, r5, #21
   28616:	0fdb      	lsrs	r3, r3, #31
   28618:	42bc      	cmp	r4, r7
   2861a:	d02a      	beq.n	28672 <__gedf2+0x82>
   2861c:	4f25      	ldr	r7, [pc, #148]	; (286b4 <__gedf2+0xc4>)
   2861e:	42bd      	cmp	r5, r7
   28620:	d02d      	beq.n	2867e <__gedf2+0x8e>
   28622:	2c00      	cmp	r4, #0
   28624:	d10f      	bne.n	28646 <__gedf2+0x56>
   28626:	4330      	orrs	r0, r6
   28628:	0007      	movs	r7, r0
   2862a:	4681      	mov	r9, r0
   2862c:	4278      	negs	r0, r7
   2862e:	4178      	adcs	r0, r7
   28630:	b2c0      	uxtb	r0, r0
   28632:	2d00      	cmp	r5, #0
   28634:	d117      	bne.n	28666 <__gedf2+0x76>
   28636:	465f      	mov	r7, fp
   28638:	433a      	orrs	r2, r7
   2863a:	d114      	bne.n	28666 <__gedf2+0x76>
   2863c:	464b      	mov	r3, r9
   2863e:	2000      	movs	r0, #0
   28640:	2b00      	cmp	r3, #0
   28642:	d00a      	beq.n	2865a <__gedf2+0x6a>
   28644:	e006      	b.n	28654 <__gedf2+0x64>
   28646:	2d00      	cmp	r5, #0
   28648:	d102      	bne.n	28650 <__gedf2+0x60>
   2864a:	4658      	mov	r0, fp
   2864c:	4302      	orrs	r2, r0
   2864e:	d001      	beq.n	28654 <__gedf2+0x64>
   28650:	4299      	cmp	r1, r3
   28652:	d018      	beq.n	28686 <__gedf2+0x96>
   28654:	4248      	negs	r0, r1
   28656:	2101      	movs	r1, #1
   28658:	4308      	orrs	r0, r1
   2865a:	bc3c      	pop	{r2, r3, r4, r5}
   2865c:	4690      	mov	r8, r2
   2865e:	4699      	mov	r9, r3
   28660:	46a2      	mov	sl, r4
   28662:	46ab      	mov	fp, r5
   28664:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28666:	2800      	cmp	r0, #0
   28668:	d0f2      	beq.n	28650 <__gedf2+0x60>
   2866a:	2001      	movs	r0, #1
   2866c:	3b01      	subs	r3, #1
   2866e:	4318      	orrs	r0, r3
   28670:	e7f3      	b.n	2865a <__gedf2+0x6a>
   28672:	0037      	movs	r7, r6
   28674:	4307      	orrs	r7, r0
   28676:	d0d1      	beq.n	2861c <__gedf2+0x2c>
   28678:	2002      	movs	r0, #2
   2867a:	4240      	negs	r0, r0
   2867c:	e7ed      	b.n	2865a <__gedf2+0x6a>
   2867e:	465f      	mov	r7, fp
   28680:	4317      	orrs	r7, r2
   28682:	d0ce      	beq.n	28622 <__gedf2+0x32>
   28684:	e7f8      	b.n	28678 <__gedf2+0x88>
   28686:	42ac      	cmp	r4, r5
   28688:	dce4      	bgt.n	28654 <__gedf2+0x64>
   2868a:	da03      	bge.n	28694 <__gedf2+0xa4>
   2868c:	1e48      	subs	r0, r1, #1
   2868e:	2101      	movs	r1, #1
   28690:	4308      	orrs	r0, r1
   28692:	e7e2      	b.n	2865a <__gedf2+0x6a>
   28694:	455e      	cmp	r6, fp
   28696:	d8dd      	bhi.n	28654 <__gedf2+0x64>
   28698:	d006      	beq.n	286a8 <__gedf2+0xb8>
   2869a:	2000      	movs	r0, #0
   2869c:	455e      	cmp	r6, fp
   2869e:	d2dc      	bcs.n	2865a <__gedf2+0x6a>
   286a0:	2301      	movs	r3, #1
   286a2:	1e48      	subs	r0, r1, #1
   286a4:	4318      	orrs	r0, r3
   286a6:	e7d8      	b.n	2865a <__gedf2+0x6a>
   286a8:	45c4      	cmp	ip, r8
   286aa:	d8d3      	bhi.n	28654 <__gedf2+0x64>
   286ac:	2000      	movs	r0, #0
   286ae:	45c4      	cmp	ip, r8
   286b0:	d3f6      	bcc.n	286a0 <__gedf2+0xb0>
   286b2:	e7d2      	b.n	2865a <__gedf2+0x6a>
   286b4:	000007ff 	.word	0x000007ff

000286b8 <__ledf2>:
   286b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   286ba:	464e      	mov	r6, r9
   286bc:	4645      	mov	r5, r8
   286be:	46de      	mov	lr, fp
   286c0:	4657      	mov	r7, sl
   286c2:	005c      	lsls	r4, r3, #1
   286c4:	b5e0      	push	{r5, r6, r7, lr}
   286c6:	031f      	lsls	r7, r3, #12
   286c8:	0fdb      	lsrs	r3, r3, #31
   286ca:	4699      	mov	r9, r3
   286cc:	4b2a      	ldr	r3, [pc, #168]	; (28778 <__ledf2+0xc0>)
   286ce:	030e      	lsls	r6, r1, #12
   286d0:	004d      	lsls	r5, r1, #1
   286d2:	0fc9      	lsrs	r1, r1, #31
   286d4:	4684      	mov	ip, r0
   286d6:	0b36      	lsrs	r6, r6, #12
   286d8:	0d6d      	lsrs	r5, r5, #21
   286da:	468b      	mov	fp, r1
   286dc:	4690      	mov	r8, r2
   286de:	0b3f      	lsrs	r7, r7, #12
   286e0:	0d64      	lsrs	r4, r4, #21
   286e2:	429d      	cmp	r5, r3
   286e4:	d020      	beq.n	28728 <__ledf2+0x70>
   286e6:	4b24      	ldr	r3, [pc, #144]	; (28778 <__ledf2+0xc0>)
   286e8:	429c      	cmp	r4, r3
   286ea:	d022      	beq.n	28732 <__ledf2+0x7a>
   286ec:	2d00      	cmp	r5, #0
   286ee:	d112      	bne.n	28716 <__ledf2+0x5e>
   286f0:	4330      	orrs	r0, r6
   286f2:	4243      	negs	r3, r0
   286f4:	4143      	adcs	r3, r0
   286f6:	b2db      	uxtb	r3, r3
   286f8:	2c00      	cmp	r4, #0
   286fa:	d01f      	beq.n	2873c <__ledf2+0x84>
   286fc:	2b00      	cmp	r3, #0
   286fe:	d00c      	beq.n	2871a <__ledf2+0x62>
   28700:	464b      	mov	r3, r9
   28702:	2001      	movs	r0, #1
   28704:	3b01      	subs	r3, #1
   28706:	4303      	orrs	r3, r0
   28708:	0018      	movs	r0, r3
   2870a:	bc3c      	pop	{r2, r3, r4, r5}
   2870c:	4690      	mov	r8, r2
   2870e:	4699      	mov	r9, r3
   28710:	46a2      	mov	sl, r4
   28712:	46ab      	mov	fp, r5
   28714:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28716:	2c00      	cmp	r4, #0
   28718:	d016      	beq.n	28748 <__ledf2+0x90>
   2871a:	45cb      	cmp	fp, r9
   2871c:	d017      	beq.n	2874e <__ledf2+0x96>
   2871e:	465b      	mov	r3, fp
   28720:	4259      	negs	r1, r3
   28722:	2301      	movs	r3, #1
   28724:	430b      	orrs	r3, r1
   28726:	e7ef      	b.n	28708 <__ledf2+0x50>
   28728:	0031      	movs	r1, r6
   2872a:	2302      	movs	r3, #2
   2872c:	4301      	orrs	r1, r0
   2872e:	d1eb      	bne.n	28708 <__ledf2+0x50>
   28730:	e7d9      	b.n	286e6 <__ledf2+0x2e>
   28732:	0039      	movs	r1, r7
   28734:	2302      	movs	r3, #2
   28736:	4311      	orrs	r1, r2
   28738:	d1e6      	bne.n	28708 <__ledf2+0x50>
   2873a:	e7d7      	b.n	286ec <__ledf2+0x34>
   2873c:	433a      	orrs	r2, r7
   2873e:	d1dd      	bne.n	286fc <__ledf2+0x44>
   28740:	2300      	movs	r3, #0
   28742:	2800      	cmp	r0, #0
   28744:	d0e0      	beq.n	28708 <__ledf2+0x50>
   28746:	e7ea      	b.n	2871e <__ledf2+0x66>
   28748:	433a      	orrs	r2, r7
   2874a:	d1e6      	bne.n	2871a <__ledf2+0x62>
   2874c:	e7e7      	b.n	2871e <__ledf2+0x66>
   2874e:	42a5      	cmp	r5, r4
   28750:	dce5      	bgt.n	2871e <__ledf2+0x66>
   28752:	db05      	blt.n	28760 <__ledf2+0xa8>
   28754:	42be      	cmp	r6, r7
   28756:	d8e2      	bhi.n	2871e <__ledf2+0x66>
   28758:	d007      	beq.n	2876a <__ledf2+0xb2>
   2875a:	2300      	movs	r3, #0
   2875c:	42be      	cmp	r6, r7
   2875e:	d2d3      	bcs.n	28708 <__ledf2+0x50>
   28760:	4659      	mov	r1, fp
   28762:	2301      	movs	r3, #1
   28764:	3901      	subs	r1, #1
   28766:	430b      	orrs	r3, r1
   28768:	e7ce      	b.n	28708 <__ledf2+0x50>
   2876a:	45c4      	cmp	ip, r8
   2876c:	d8d7      	bhi.n	2871e <__ledf2+0x66>
   2876e:	2300      	movs	r3, #0
   28770:	45c4      	cmp	ip, r8
   28772:	d3f5      	bcc.n	28760 <__ledf2+0xa8>
   28774:	e7c8      	b.n	28708 <__ledf2+0x50>
   28776:	46c0      	nop			; (mov r8, r8)
   28778:	000007ff 	.word	0x000007ff

0002877c <__aeabi_dmul>:
   2877c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2877e:	4657      	mov	r7, sl
   28780:	4645      	mov	r5, r8
   28782:	46de      	mov	lr, fp
   28784:	464e      	mov	r6, r9
   28786:	b5e0      	push	{r5, r6, r7, lr}
   28788:	030c      	lsls	r4, r1, #12
   2878a:	4698      	mov	r8, r3
   2878c:	004e      	lsls	r6, r1, #1
   2878e:	0b23      	lsrs	r3, r4, #12
   28790:	b087      	sub	sp, #28
   28792:	0007      	movs	r7, r0
   28794:	4692      	mov	sl, r2
   28796:	469b      	mov	fp, r3
   28798:	0d76      	lsrs	r6, r6, #21
   2879a:	0fcd      	lsrs	r5, r1, #31
   2879c:	2e00      	cmp	r6, #0
   2879e:	d06b      	beq.n	28878 <__aeabi_dmul+0xfc>
   287a0:	4b6d      	ldr	r3, [pc, #436]	; (28958 <__aeabi_dmul+0x1dc>)
   287a2:	429e      	cmp	r6, r3
   287a4:	d035      	beq.n	28812 <__aeabi_dmul+0x96>
   287a6:	2480      	movs	r4, #128	; 0x80
   287a8:	465b      	mov	r3, fp
   287aa:	0f42      	lsrs	r2, r0, #29
   287ac:	0424      	lsls	r4, r4, #16
   287ae:	00db      	lsls	r3, r3, #3
   287b0:	4314      	orrs	r4, r2
   287b2:	431c      	orrs	r4, r3
   287b4:	00c3      	lsls	r3, r0, #3
   287b6:	4699      	mov	r9, r3
   287b8:	4b68      	ldr	r3, [pc, #416]	; (2895c <__aeabi_dmul+0x1e0>)
   287ba:	46a3      	mov	fp, r4
   287bc:	469c      	mov	ip, r3
   287be:	2300      	movs	r3, #0
   287c0:	2700      	movs	r7, #0
   287c2:	4466      	add	r6, ip
   287c4:	9302      	str	r3, [sp, #8]
   287c6:	4643      	mov	r3, r8
   287c8:	031c      	lsls	r4, r3, #12
   287ca:	005a      	lsls	r2, r3, #1
   287cc:	0fdb      	lsrs	r3, r3, #31
   287ce:	4650      	mov	r0, sl
   287d0:	0b24      	lsrs	r4, r4, #12
   287d2:	0d52      	lsrs	r2, r2, #21
   287d4:	4698      	mov	r8, r3
   287d6:	d100      	bne.n	287da <__aeabi_dmul+0x5e>
   287d8:	e076      	b.n	288c8 <__aeabi_dmul+0x14c>
   287da:	4b5f      	ldr	r3, [pc, #380]	; (28958 <__aeabi_dmul+0x1dc>)
   287dc:	429a      	cmp	r2, r3
   287de:	d06d      	beq.n	288bc <__aeabi_dmul+0x140>
   287e0:	2380      	movs	r3, #128	; 0x80
   287e2:	0f41      	lsrs	r1, r0, #29
   287e4:	041b      	lsls	r3, r3, #16
   287e6:	430b      	orrs	r3, r1
   287e8:	495c      	ldr	r1, [pc, #368]	; (2895c <__aeabi_dmul+0x1e0>)
   287ea:	00e4      	lsls	r4, r4, #3
   287ec:	468c      	mov	ip, r1
   287ee:	431c      	orrs	r4, r3
   287f0:	00c3      	lsls	r3, r0, #3
   287f2:	2000      	movs	r0, #0
   287f4:	4462      	add	r2, ip
   287f6:	4641      	mov	r1, r8
   287f8:	18b6      	adds	r6, r6, r2
   287fa:	4069      	eors	r1, r5
   287fc:	1c72      	adds	r2, r6, #1
   287fe:	9101      	str	r1, [sp, #4]
   28800:	4694      	mov	ip, r2
   28802:	4307      	orrs	r7, r0
   28804:	2f0f      	cmp	r7, #15
   28806:	d900      	bls.n	2880a <__aeabi_dmul+0x8e>
   28808:	e0b0      	b.n	2896c <__aeabi_dmul+0x1f0>
   2880a:	4a55      	ldr	r2, [pc, #340]	; (28960 <__aeabi_dmul+0x1e4>)
   2880c:	00bf      	lsls	r7, r7, #2
   2880e:	59d2      	ldr	r2, [r2, r7]
   28810:	4697      	mov	pc, r2
   28812:	465b      	mov	r3, fp
   28814:	4303      	orrs	r3, r0
   28816:	4699      	mov	r9, r3
   28818:	d000      	beq.n	2881c <__aeabi_dmul+0xa0>
   2881a:	e087      	b.n	2892c <__aeabi_dmul+0x1b0>
   2881c:	2300      	movs	r3, #0
   2881e:	469b      	mov	fp, r3
   28820:	3302      	adds	r3, #2
   28822:	2708      	movs	r7, #8
   28824:	9302      	str	r3, [sp, #8]
   28826:	e7ce      	b.n	287c6 <__aeabi_dmul+0x4a>
   28828:	4642      	mov	r2, r8
   2882a:	9201      	str	r2, [sp, #4]
   2882c:	2802      	cmp	r0, #2
   2882e:	d067      	beq.n	28900 <__aeabi_dmul+0x184>
   28830:	2803      	cmp	r0, #3
   28832:	d100      	bne.n	28836 <__aeabi_dmul+0xba>
   28834:	e20e      	b.n	28c54 <__aeabi_dmul+0x4d8>
   28836:	2801      	cmp	r0, #1
   28838:	d000      	beq.n	2883c <__aeabi_dmul+0xc0>
   2883a:	e162      	b.n	28b02 <__aeabi_dmul+0x386>
   2883c:	2300      	movs	r3, #0
   2883e:	2400      	movs	r4, #0
   28840:	2200      	movs	r2, #0
   28842:	4699      	mov	r9, r3
   28844:	9901      	ldr	r1, [sp, #4]
   28846:	4001      	ands	r1, r0
   28848:	b2cd      	uxtb	r5, r1
   2884a:	2100      	movs	r1, #0
   2884c:	0312      	lsls	r2, r2, #12
   2884e:	0d0b      	lsrs	r3, r1, #20
   28850:	0b12      	lsrs	r2, r2, #12
   28852:	051b      	lsls	r3, r3, #20
   28854:	4313      	orrs	r3, r2
   28856:	4a43      	ldr	r2, [pc, #268]	; (28964 <__aeabi_dmul+0x1e8>)
   28858:	0524      	lsls	r4, r4, #20
   2885a:	4013      	ands	r3, r2
   2885c:	431c      	orrs	r4, r3
   2885e:	0064      	lsls	r4, r4, #1
   28860:	07ed      	lsls	r5, r5, #31
   28862:	0864      	lsrs	r4, r4, #1
   28864:	432c      	orrs	r4, r5
   28866:	4648      	mov	r0, r9
   28868:	0021      	movs	r1, r4
   2886a:	b007      	add	sp, #28
   2886c:	bc3c      	pop	{r2, r3, r4, r5}
   2886e:	4690      	mov	r8, r2
   28870:	4699      	mov	r9, r3
   28872:	46a2      	mov	sl, r4
   28874:	46ab      	mov	fp, r5
   28876:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28878:	4303      	orrs	r3, r0
   2887a:	4699      	mov	r9, r3
   2887c:	d04f      	beq.n	2891e <__aeabi_dmul+0x1a2>
   2887e:	465b      	mov	r3, fp
   28880:	2b00      	cmp	r3, #0
   28882:	d100      	bne.n	28886 <__aeabi_dmul+0x10a>
   28884:	e189      	b.n	28b9a <__aeabi_dmul+0x41e>
   28886:	4658      	mov	r0, fp
   28888:	f000 fe2e 	bl	294e8 <__clzsi2>
   2888c:	0003      	movs	r3, r0
   2888e:	3b0b      	subs	r3, #11
   28890:	2b1c      	cmp	r3, #28
   28892:	dd00      	ble.n	28896 <__aeabi_dmul+0x11a>
   28894:	e17a      	b.n	28b8c <__aeabi_dmul+0x410>
   28896:	221d      	movs	r2, #29
   28898:	1ad3      	subs	r3, r2, r3
   2889a:	003a      	movs	r2, r7
   2889c:	0001      	movs	r1, r0
   2889e:	465c      	mov	r4, fp
   288a0:	40da      	lsrs	r2, r3
   288a2:	3908      	subs	r1, #8
   288a4:	408c      	lsls	r4, r1
   288a6:	0013      	movs	r3, r2
   288a8:	408f      	lsls	r7, r1
   288aa:	4323      	orrs	r3, r4
   288ac:	469b      	mov	fp, r3
   288ae:	46b9      	mov	r9, r7
   288b0:	2300      	movs	r3, #0
   288b2:	4e2d      	ldr	r6, [pc, #180]	; (28968 <__aeabi_dmul+0x1ec>)
   288b4:	2700      	movs	r7, #0
   288b6:	1a36      	subs	r6, r6, r0
   288b8:	9302      	str	r3, [sp, #8]
   288ba:	e784      	b.n	287c6 <__aeabi_dmul+0x4a>
   288bc:	4653      	mov	r3, sl
   288be:	4323      	orrs	r3, r4
   288c0:	d12a      	bne.n	28918 <__aeabi_dmul+0x19c>
   288c2:	2400      	movs	r4, #0
   288c4:	2002      	movs	r0, #2
   288c6:	e796      	b.n	287f6 <__aeabi_dmul+0x7a>
   288c8:	4653      	mov	r3, sl
   288ca:	4323      	orrs	r3, r4
   288cc:	d020      	beq.n	28910 <__aeabi_dmul+0x194>
   288ce:	2c00      	cmp	r4, #0
   288d0:	d100      	bne.n	288d4 <__aeabi_dmul+0x158>
   288d2:	e157      	b.n	28b84 <__aeabi_dmul+0x408>
   288d4:	0020      	movs	r0, r4
   288d6:	f000 fe07 	bl	294e8 <__clzsi2>
   288da:	0003      	movs	r3, r0
   288dc:	3b0b      	subs	r3, #11
   288de:	2b1c      	cmp	r3, #28
   288e0:	dd00      	ble.n	288e4 <__aeabi_dmul+0x168>
   288e2:	e149      	b.n	28b78 <__aeabi_dmul+0x3fc>
   288e4:	211d      	movs	r1, #29
   288e6:	1acb      	subs	r3, r1, r3
   288e8:	4651      	mov	r1, sl
   288ea:	0002      	movs	r2, r0
   288ec:	40d9      	lsrs	r1, r3
   288ee:	4653      	mov	r3, sl
   288f0:	3a08      	subs	r2, #8
   288f2:	4094      	lsls	r4, r2
   288f4:	4093      	lsls	r3, r2
   288f6:	430c      	orrs	r4, r1
   288f8:	4a1b      	ldr	r2, [pc, #108]	; (28968 <__aeabi_dmul+0x1ec>)
   288fa:	1a12      	subs	r2, r2, r0
   288fc:	2000      	movs	r0, #0
   288fe:	e77a      	b.n	287f6 <__aeabi_dmul+0x7a>
   28900:	2501      	movs	r5, #1
   28902:	9b01      	ldr	r3, [sp, #4]
   28904:	4c14      	ldr	r4, [pc, #80]	; (28958 <__aeabi_dmul+0x1dc>)
   28906:	401d      	ands	r5, r3
   28908:	2300      	movs	r3, #0
   2890a:	2200      	movs	r2, #0
   2890c:	4699      	mov	r9, r3
   2890e:	e79c      	b.n	2884a <__aeabi_dmul+0xce>
   28910:	2400      	movs	r4, #0
   28912:	2200      	movs	r2, #0
   28914:	2001      	movs	r0, #1
   28916:	e76e      	b.n	287f6 <__aeabi_dmul+0x7a>
   28918:	4653      	mov	r3, sl
   2891a:	2003      	movs	r0, #3
   2891c:	e76b      	b.n	287f6 <__aeabi_dmul+0x7a>
   2891e:	2300      	movs	r3, #0
   28920:	469b      	mov	fp, r3
   28922:	3301      	adds	r3, #1
   28924:	2704      	movs	r7, #4
   28926:	2600      	movs	r6, #0
   28928:	9302      	str	r3, [sp, #8]
   2892a:	e74c      	b.n	287c6 <__aeabi_dmul+0x4a>
   2892c:	2303      	movs	r3, #3
   2892e:	4681      	mov	r9, r0
   28930:	270c      	movs	r7, #12
   28932:	9302      	str	r3, [sp, #8]
   28934:	e747      	b.n	287c6 <__aeabi_dmul+0x4a>
   28936:	2280      	movs	r2, #128	; 0x80
   28938:	2300      	movs	r3, #0
   2893a:	2500      	movs	r5, #0
   2893c:	0312      	lsls	r2, r2, #12
   2893e:	4699      	mov	r9, r3
   28940:	4c05      	ldr	r4, [pc, #20]	; (28958 <__aeabi_dmul+0x1dc>)
   28942:	e782      	b.n	2884a <__aeabi_dmul+0xce>
   28944:	465c      	mov	r4, fp
   28946:	464b      	mov	r3, r9
   28948:	9802      	ldr	r0, [sp, #8]
   2894a:	e76f      	b.n	2882c <__aeabi_dmul+0xb0>
   2894c:	465c      	mov	r4, fp
   2894e:	464b      	mov	r3, r9
   28950:	9501      	str	r5, [sp, #4]
   28952:	9802      	ldr	r0, [sp, #8]
   28954:	e76a      	b.n	2882c <__aeabi_dmul+0xb0>
   28956:	46c0      	nop			; (mov r8, r8)
   28958:	000007ff 	.word	0x000007ff
   2895c:	fffffc01 	.word	0xfffffc01
   28960:	0002b7d0 	.word	0x0002b7d0
   28964:	800fffff 	.word	0x800fffff
   28968:	fffffc0d 	.word	0xfffffc0d
   2896c:	464a      	mov	r2, r9
   2896e:	4649      	mov	r1, r9
   28970:	0c17      	lsrs	r7, r2, #16
   28972:	0c1a      	lsrs	r2, r3, #16
   28974:	041b      	lsls	r3, r3, #16
   28976:	0c1b      	lsrs	r3, r3, #16
   28978:	0408      	lsls	r0, r1, #16
   2897a:	0019      	movs	r1, r3
   2897c:	0c00      	lsrs	r0, r0, #16
   2897e:	4341      	muls	r1, r0
   28980:	0015      	movs	r5, r2
   28982:	4688      	mov	r8, r1
   28984:	0019      	movs	r1, r3
   28986:	437d      	muls	r5, r7
   28988:	4379      	muls	r1, r7
   2898a:	9503      	str	r5, [sp, #12]
   2898c:	4689      	mov	r9, r1
   2898e:	0029      	movs	r1, r5
   28990:	0015      	movs	r5, r2
   28992:	4345      	muls	r5, r0
   28994:	444d      	add	r5, r9
   28996:	9502      	str	r5, [sp, #8]
   28998:	4645      	mov	r5, r8
   2899a:	0c2d      	lsrs	r5, r5, #16
   2899c:	46aa      	mov	sl, r5
   2899e:	9d02      	ldr	r5, [sp, #8]
   289a0:	4455      	add	r5, sl
   289a2:	45a9      	cmp	r9, r5
   289a4:	d906      	bls.n	289b4 <__aeabi_dmul+0x238>
   289a6:	468a      	mov	sl, r1
   289a8:	2180      	movs	r1, #128	; 0x80
   289aa:	0249      	lsls	r1, r1, #9
   289ac:	4689      	mov	r9, r1
   289ae:	44ca      	add	sl, r9
   289b0:	4651      	mov	r1, sl
   289b2:	9103      	str	r1, [sp, #12]
   289b4:	0c29      	lsrs	r1, r5, #16
   289b6:	9104      	str	r1, [sp, #16]
   289b8:	4641      	mov	r1, r8
   289ba:	0409      	lsls	r1, r1, #16
   289bc:	042d      	lsls	r5, r5, #16
   289be:	0c09      	lsrs	r1, r1, #16
   289c0:	4688      	mov	r8, r1
   289c2:	0029      	movs	r1, r5
   289c4:	0c25      	lsrs	r5, r4, #16
   289c6:	0424      	lsls	r4, r4, #16
   289c8:	4441      	add	r1, r8
   289ca:	0c24      	lsrs	r4, r4, #16
   289cc:	9105      	str	r1, [sp, #20]
   289ce:	0021      	movs	r1, r4
   289d0:	4341      	muls	r1, r0
   289d2:	4688      	mov	r8, r1
   289d4:	0021      	movs	r1, r4
   289d6:	4379      	muls	r1, r7
   289d8:	468a      	mov	sl, r1
   289da:	4368      	muls	r0, r5
   289dc:	4641      	mov	r1, r8
   289de:	4450      	add	r0, sl
   289e0:	4681      	mov	r9, r0
   289e2:	0c08      	lsrs	r0, r1, #16
   289e4:	4448      	add	r0, r9
   289e6:	436f      	muls	r7, r5
   289e8:	4582      	cmp	sl, r0
   289ea:	d903      	bls.n	289f4 <__aeabi_dmul+0x278>
   289ec:	2180      	movs	r1, #128	; 0x80
   289ee:	0249      	lsls	r1, r1, #9
   289f0:	4689      	mov	r9, r1
   289f2:	444f      	add	r7, r9
   289f4:	0c01      	lsrs	r1, r0, #16
   289f6:	4689      	mov	r9, r1
   289f8:	0039      	movs	r1, r7
   289fa:	4449      	add	r1, r9
   289fc:	9102      	str	r1, [sp, #8]
   289fe:	4641      	mov	r1, r8
   28a00:	040f      	lsls	r7, r1, #16
   28a02:	9904      	ldr	r1, [sp, #16]
   28a04:	0c3f      	lsrs	r7, r7, #16
   28a06:	4688      	mov	r8, r1
   28a08:	0400      	lsls	r0, r0, #16
   28a0a:	19c0      	adds	r0, r0, r7
   28a0c:	4480      	add	r8, r0
   28a0e:	4641      	mov	r1, r8
   28a10:	9104      	str	r1, [sp, #16]
   28a12:	4659      	mov	r1, fp
   28a14:	0c0f      	lsrs	r7, r1, #16
   28a16:	0409      	lsls	r1, r1, #16
   28a18:	0c09      	lsrs	r1, r1, #16
   28a1a:	4688      	mov	r8, r1
   28a1c:	4359      	muls	r1, r3
   28a1e:	468a      	mov	sl, r1
   28a20:	0039      	movs	r1, r7
   28a22:	4351      	muls	r1, r2
   28a24:	4689      	mov	r9, r1
   28a26:	4641      	mov	r1, r8
   28a28:	434a      	muls	r2, r1
   28a2a:	4651      	mov	r1, sl
   28a2c:	0c09      	lsrs	r1, r1, #16
   28a2e:	468b      	mov	fp, r1
   28a30:	437b      	muls	r3, r7
   28a32:	18d2      	adds	r2, r2, r3
   28a34:	445a      	add	r2, fp
   28a36:	4293      	cmp	r3, r2
   28a38:	d903      	bls.n	28a42 <__aeabi_dmul+0x2c6>
   28a3a:	2380      	movs	r3, #128	; 0x80
   28a3c:	025b      	lsls	r3, r3, #9
   28a3e:	469b      	mov	fp, r3
   28a40:	44d9      	add	r9, fp
   28a42:	4651      	mov	r1, sl
   28a44:	0409      	lsls	r1, r1, #16
   28a46:	0c09      	lsrs	r1, r1, #16
   28a48:	468a      	mov	sl, r1
   28a4a:	4641      	mov	r1, r8
   28a4c:	4361      	muls	r1, r4
   28a4e:	437c      	muls	r4, r7
   28a50:	0c13      	lsrs	r3, r2, #16
   28a52:	0412      	lsls	r2, r2, #16
   28a54:	444b      	add	r3, r9
   28a56:	4452      	add	r2, sl
   28a58:	46a1      	mov	r9, r4
   28a5a:	468a      	mov	sl, r1
   28a5c:	003c      	movs	r4, r7
   28a5e:	4641      	mov	r1, r8
   28a60:	436c      	muls	r4, r5
   28a62:	434d      	muls	r5, r1
   28a64:	4651      	mov	r1, sl
   28a66:	444d      	add	r5, r9
   28a68:	0c0f      	lsrs	r7, r1, #16
   28a6a:	197d      	adds	r5, r7, r5
   28a6c:	45a9      	cmp	r9, r5
   28a6e:	d903      	bls.n	28a78 <__aeabi_dmul+0x2fc>
   28a70:	2180      	movs	r1, #128	; 0x80
   28a72:	0249      	lsls	r1, r1, #9
   28a74:	4688      	mov	r8, r1
   28a76:	4444      	add	r4, r8
   28a78:	9f04      	ldr	r7, [sp, #16]
   28a7a:	9903      	ldr	r1, [sp, #12]
   28a7c:	46b8      	mov	r8, r7
   28a7e:	4441      	add	r1, r8
   28a80:	468b      	mov	fp, r1
   28a82:	4583      	cmp	fp, r0
   28a84:	4180      	sbcs	r0, r0
   28a86:	4241      	negs	r1, r0
   28a88:	4688      	mov	r8, r1
   28a8a:	4651      	mov	r1, sl
   28a8c:	0408      	lsls	r0, r1, #16
   28a8e:	042f      	lsls	r7, r5, #16
   28a90:	0c00      	lsrs	r0, r0, #16
   28a92:	183f      	adds	r7, r7, r0
   28a94:	4658      	mov	r0, fp
   28a96:	9902      	ldr	r1, [sp, #8]
   28a98:	1810      	adds	r0, r2, r0
   28a9a:	4689      	mov	r9, r1
   28a9c:	4290      	cmp	r0, r2
   28a9e:	4192      	sbcs	r2, r2
   28aa0:	444f      	add	r7, r9
   28aa2:	46ba      	mov	sl, r7
   28aa4:	4252      	negs	r2, r2
   28aa6:	4699      	mov	r9, r3
   28aa8:	4693      	mov	fp, r2
   28aaa:	44c2      	add	sl, r8
   28aac:	44d1      	add	r9, sl
   28aae:	44cb      	add	fp, r9
   28ab0:	428f      	cmp	r7, r1
   28ab2:	41bf      	sbcs	r7, r7
   28ab4:	45c2      	cmp	sl, r8
   28ab6:	4189      	sbcs	r1, r1
   28ab8:	4599      	cmp	r9, r3
   28aba:	419b      	sbcs	r3, r3
   28abc:	4593      	cmp	fp, r2
   28abe:	4192      	sbcs	r2, r2
   28ac0:	427f      	negs	r7, r7
   28ac2:	4249      	negs	r1, r1
   28ac4:	0c2d      	lsrs	r5, r5, #16
   28ac6:	4252      	negs	r2, r2
   28ac8:	430f      	orrs	r7, r1
   28aca:	425b      	negs	r3, r3
   28acc:	4313      	orrs	r3, r2
   28ace:	197f      	adds	r7, r7, r5
   28ad0:	18ff      	adds	r7, r7, r3
   28ad2:	465b      	mov	r3, fp
   28ad4:	193c      	adds	r4, r7, r4
   28ad6:	0ddb      	lsrs	r3, r3, #23
   28ad8:	9a05      	ldr	r2, [sp, #20]
   28ada:	0264      	lsls	r4, r4, #9
   28adc:	431c      	orrs	r4, r3
   28ade:	0243      	lsls	r3, r0, #9
   28ae0:	4313      	orrs	r3, r2
   28ae2:	1e5d      	subs	r5, r3, #1
   28ae4:	41ab      	sbcs	r3, r5
   28ae6:	465a      	mov	r2, fp
   28ae8:	0dc0      	lsrs	r0, r0, #23
   28aea:	4303      	orrs	r3, r0
   28aec:	0252      	lsls	r2, r2, #9
   28aee:	4313      	orrs	r3, r2
   28af0:	01e2      	lsls	r2, r4, #7
   28af2:	d556      	bpl.n	28ba2 <__aeabi_dmul+0x426>
   28af4:	2001      	movs	r0, #1
   28af6:	085a      	lsrs	r2, r3, #1
   28af8:	4003      	ands	r3, r0
   28afa:	4313      	orrs	r3, r2
   28afc:	07e2      	lsls	r2, r4, #31
   28afe:	4313      	orrs	r3, r2
   28b00:	0864      	lsrs	r4, r4, #1
   28b02:	485a      	ldr	r0, [pc, #360]	; (28c6c <__aeabi_dmul+0x4f0>)
   28b04:	4460      	add	r0, ip
   28b06:	2800      	cmp	r0, #0
   28b08:	dd4d      	ble.n	28ba6 <__aeabi_dmul+0x42a>
   28b0a:	075a      	lsls	r2, r3, #29
   28b0c:	d009      	beq.n	28b22 <__aeabi_dmul+0x3a6>
   28b0e:	220f      	movs	r2, #15
   28b10:	401a      	ands	r2, r3
   28b12:	2a04      	cmp	r2, #4
   28b14:	d005      	beq.n	28b22 <__aeabi_dmul+0x3a6>
   28b16:	1d1a      	adds	r2, r3, #4
   28b18:	429a      	cmp	r2, r3
   28b1a:	419b      	sbcs	r3, r3
   28b1c:	425b      	negs	r3, r3
   28b1e:	18e4      	adds	r4, r4, r3
   28b20:	0013      	movs	r3, r2
   28b22:	01e2      	lsls	r2, r4, #7
   28b24:	d504      	bpl.n	28b30 <__aeabi_dmul+0x3b4>
   28b26:	2080      	movs	r0, #128	; 0x80
   28b28:	4a51      	ldr	r2, [pc, #324]	; (28c70 <__aeabi_dmul+0x4f4>)
   28b2a:	00c0      	lsls	r0, r0, #3
   28b2c:	4014      	ands	r4, r2
   28b2e:	4460      	add	r0, ip
   28b30:	4a50      	ldr	r2, [pc, #320]	; (28c74 <__aeabi_dmul+0x4f8>)
   28b32:	4290      	cmp	r0, r2
   28b34:	dd00      	ble.n	28b38 <__aeabi_dmul+0x3bc>
   28b36:	e6e3      	b.n	28900 <__aeabi_dmul+0x184>
   28b38:	2501      	movs	r5, #1
   28b3a:	08db      	lsrs	r3, r3, #3
   28b3c:	0762      	lsls	r2, r4, #29
   28b3e:	431a      	orrs	r2, r3
   28b40:	0264      	lsls	r4, r4, #9
   28b42:	9b01      	ldr	r3, [sp, #4]
   28b44:	4691      	mov	r9, r2
   28b46:	0b22      	lsrs	r2, r4, #12
   28b48:	0544      	lsls	r4, r0, #21
   28b4a:	0d64      	lsrs	r4, r4, #21
   28b4c:	401d      	ands	r5, r3
   28b4e:	e67c      	b.n	2884a <__aeabi_dmul+0xce>
   28b50:	2280      	movs	r2, #128	; 0x80
   28b52:	4659      	mov	r1, fp
   28b54:	0312      	lsls	r2, r2, #12
   28b56:	4211      	tst	r1, r2
   28b58:	d008      	beq.n	28b6c <__aeabi_dmul+0x3f0>
   28b5a:	4214      	tst	r4, r2
   28b5c:	d106      	bne.n	28b6c <__aeabi_dmul+0x3f0>
   28b5e:	4322      	orrs	r2, r4
   28b60:	0312      	lsls	r2, r2, #12
   28b62:	0b12      	lsrs	r2, r2, #12
   28b64:	4645      	mov	r5, r8
   28b66:	4699      	mov	r9, r3
   28b68:	4c43      	ldr	r4, [pc, #268]	; (28c78 <__aeabi_dmul+0x4fc>)
   28b6a:	e66e      	b.n	2884a <__aeabi_dmul+0xce>
   28b6c:	465b      	mov	r3, fp
   28b6e:	431a      	orrs	r2, r3
   28b70:	0312      	lsls	r2, r2, #12
   28b72:	0b12      	lsrs	r2, r2, #12
   28b74:	4c40      	ldr	r4, [pc, #256]	; (28c78 <__aeabi_dmul+0x4fc>)
   28b76:	e668      	b.n	2884a <__aeabi_dmul+0xce>
   28b78:	0003      	movs	r3, r0
   28b7a:	4654      	mov	r4, sl
   28b7c:	3b28      	subs	r3, #40	; 0x28
   28b7e:	409c      	lsls	r4, r3
   28b80:	2300      	movs	r3, #0
   28b82:	e6b9      	b.n	288f8 <__aeabi_dmul+0x17c>
   28b84:	f000 fcb0 	bl	294e8 <__clzsi2>
   28b88:	3020      	adds	r0, #32
   28b8a:	e6a6      	b.n	288da <__aeabi_dmul+0x15e>
   28b8c:	0003      	movs	r3, r0
   28b8e:	3b28      	subs	r3, #40	; 0x28
   28b90:	409f      	lsls	r7, r3
   28b92:	2300      	movs	r3, #0
   28b94:	46bb      	mov	fp, r7
   28b96:	4699      	mov	r9, r3
   28b98:	e68a      	b.n	288b0 <__aeabi_dmul+0x134>
   28b9a:	f000 fca5 	bl	294e8 <__clzsi2>
   28b9e:	3020      	adds	r0, #32
   28ba0:	e674      	b.n	2888c <__aeabi_dmul+0x110>
   28ba2:	46b4      	mov	ip, r6
   28ba4:	e7ad      	b.n	28b02 <__aeabi_dmul+0x386>
   28ba6:	2501      	movs	r5, #1
   28ba8:	1a2a      	subs	r2, r5, r0
   28baa:	2a38      	cmp	r2, #56	; 0x38
   28bac:	dd06      	ble.n	28bbc <__aeabi_dmul+0x440>
   28bae:	9b01      	ldr	r3, [sp, #4]
   28bb0:	2400      	movs	r4, #0
   28bb2:	401d      	ands	r5, r3
   28bb4:	2300      	movs	r3, #0
   28bb6:	2200      	movs	r2, #0
   28bb8:	4699      	mov	r9, r3
   28bba:	e646      	b.n	2884a <__aeabi_dmul+0xce>
   28bbc:	2a1f      	cmp	r2, #31
   28bbe:	dc21      	bgt.n	28c04 <__aeabi_dmul+0x488>
   28bc0:	2520      	movs	r5, #32
   28bc2:	0020      	movs	r0, r4
   28bc4:	1aad      	subs	r5, r5, r2
   28bc6:	001e      	movs	r6, r3
   28bc8:	40ab      	lsls	r3, r5
   28bca:	40a8      	lsls	r0, r5
   28bcc:	40d6      	lsrs	r6, r2
   28bce:	1e5d      	subs	r5, r3, #1
   28bd0:	41ab      	sbcs	r3, r5
   28bd2:	4330      	orrs	r0, r6
   28bd4:	4318      	orrs	r0, r3
   28bd6:	40d4      	lsrs	r4, r2
   28bd8:	0743      	lsls	r3, r0, #29
   28bda:	d009      	beq.n	28bf0 <__aeabi_dmul+0x474>
   28bdc:	230f      	movs	r3, #15
   28bde:	4003      	ands	r3, r0
   28be0:	2b04      	cmp	r3, #4
   28be2:	d005      	beq.n	28bf0 <__aeabi_dmul+0x474>
   28be4:	0003      	movs	r3, r0
   28be6:	1d18      	adds	r0, r3, #4
   28be8:	4298      	cmp	r0, r3
   28bea:	419b      	sbcs	r3, r3
   28bec:	425b      	negs	r3, r3
   28bee:	18e4      	adds	r4, r4, r3
   28bf0:	0223      	lsls	r3, r4, #8
   28bf2:	d521      	bpl.n	28c38 <__aeabi_dmul+0x4bc>
   28bf4:	2501      	movs	r5, #1
   28bf6:	9b01      	ldr	r3, [sp, #4]
   28bf8:	2401      	movs	r4, #1
   28bfa:	401d      	ands	r5, r3
   28bfc:	2300      	movs	r3, #0
   28bfe:	2200      	movs	r2, #0
   28c00:	4699      	mov	r9, r3
   28c02:	e622      	b.n	2884a <__aeabi_dmul+0xce>
   28c04:	251f      	movs	r5, #31
   28c06:	0021      	movs	r1, r4
   28c08:	426d      	negs	r5, r5
   28c0a:	1a28      	subs	r0, r5, r0
   28c0c:	40c1      	lsrs	r1, r0
   28c0e:	0008      	movs	r0, r1
   28c10:	2a20      	cmp	r2, #32
   28c12:	d01d      	beq.n	28c50 <__aeabi_dmul+0x4d4>
   28c14:	355f      	adds	r5, #95	; 0x5f
   28c16:	1aaa      	subs	r2, r5, r2
   28c18:	4094      	lsls	r4, r2
   28c1a:	4323      	orrs	r3, r4
   28c1c:	1e5c      	subs	r4, r3, #1
   28c1e:	41a3      	sbcs	r3, r4
   28c20:	2507      	movs	r5, #7
   28c22:	4303      	orrs	r3, r0
   28c24:	401d      	ands	r5, r3
   28c26:	2200      	movs	r2, #0
   28c28:	2d00      	cmp	r5, #0
   28c2a:	d009      	beq.n	28c40 <__aeabi_dmul+0x4c4>
   28c2c:	220f      	movs	r2, #15
   28c2e:	2400      	movs	r4, #0
   28c30:	401a      	ands	r2, r3
   28c32:	0018      	movs	r0, r3
   28c34:	2a04      	cmp	r2, #4
   28c36:	d1d6      	bne.n	28be6 <__aeabi_dmul+0x46a>
   28c38:	0003      	movs	r3, r0
   28c3a:	0765      	lsls	r5, r4, #29
   28c3c:	0264      	lsls	r4, r4, #9
   28c3e:	0b22      	lsrs	r2, r4, #12
   28c40:	08db      	lsrs	r3, r3, #3
   28c42:	432b      	orrs	r3, r5
   28c44:	2501      	movs	r5, #1
   28c46:	4699      	mov	r9, r3
   28c48:	9b01      	ldr	r3, [sp, #4]
   28c4a:	2400      	movs	r4, #0
   28c4c:	401d      	ands	r5, r3
   28c4e:	e5fc      	b.n	2884a <__aeabi_dmul+0xce>
   28c50:	2400      	movs	r4, #0
   28c52:	e7e2      	b.n	28c1a <__aeabi_dmul+0x49e>
   28c54:	2280      	movs	r2, #128	; 0x80
   28c56:	2501      	movs	r5, #1
   28c58:	0312      	lsls	r2, r2, #12
   28c5a:	4322      	orrs	r2, r4
   28c5c:	9901      	ldr	r1, [sp, #4]
   28c5e:	0312      	lsls	r2, r2, #12
   28c60:	0b12      	lsrs	r2, r2, #12
   28c62:	400d      	ands	r5, r1
   28c64:	4699      	mov	r9, r3
   28c66:	4c04      	ldr	r4, [pc, #16]	; (28c78 <__aeabi_dmul+0x4fc>)
   28c68:	e5ef      	b.n	2884a <__aeabi_dmul+0xce>
   28c6a:	46c0      	nop			; (mov r8, r8)
   28c6c:	000003ff 	.word	0x000003ff
   28c70:	feffffff 	.word	0xfeffffff
   28c74:	000007fe 	.word	0x000007fe
   28c78:	000007ff 	.word	0x000007ff

00028c7c <__aeabi_dsub>:
   28c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   28c7e:	4646      	mov	r6, r8
   28c80:	46d6      	mov	lr, sl
   28c82:	464f      	mov	r7, r9
   28c84:	030c      	lsls	r4, r1, #12
   28c86:	b5c0      	push	{r6, r7, lr}
   28c88:	0fcd      	lsrs	r5, r1, #31
   28c8a:	004e      	lsls	r6, r1, #1
   28c8c:	0a61      	lsrs	r1, r4, #9
   28c8e:	0f44      	lsrs	r4, r0, #29
   28c90:	430c      	orrs	r4, r1
   28c92:	00c1      	lsls	r1, r0, #3
   28c94:	0058      	lsls	r0, r3, #1
   28c96:	0d40      	lsrs	r0, r0, #21
   28c98:	4684      	mov	ip, r0
   28c9a:	468a      	mov	sl, r1
   28c9c:	000f      	movs	r7, r1
   28c9e:	0319      	lsls	r1, r3, #12
   28ca0:	0f50      	lsrs	r0, r2, #29
   28ca2:	0a49      	lsrs	r1, r1, #9
   28ca4:	4301      	orrs	r1, r0
   28ca6:	48c6      	ldr	r0, [pc, #792]	; (28fc0 <__aeabi_dsub+0x344>)
   28ca8:	0d76      	lsrs	r6, r6, #21
   28caa:	46a8      	mov	r8, r5
   28cac:	0fdb      	lsrs	r3, r3, #31
   28cae:	00d2      	lsls	r2, r2, #3
   28cb0:	4584      	cmp	ip, r0
   28cb2:	d100      	bne.n	28cb6 <__aeabi_dsub+0x3a>
   28cb4:	e0d8      	b.n	28e68 <__aeabi_dsub+0x1ec>
   28cb6:	2001      	movs	r0, #1
   28cb8:	4043      	eors	r3, r0
   28cba:	42ab      	cmp	r3, r5
   28cbc:	d100      	bne.n	28cc0 <__aeabi_dsub+0x44>
   28cbe:	e0a6      	b.n	28e0e <__aeabi_dsub+0x192>
   28cc0:	4660      	mov	r0, ip
   28cc2:	1a35      	subs	r5, r6, r0
   28cc4:	2d00      	cmp	r5, #0
   28cc6:	dc00      	bgt.n	28cca <__aeabi_dsub+0x4e>
   28cc8:	e105      	b.n	28ed6 <__aeabi_dsub+0x25a>
   28cca:	2800      	cmp	r0, #0
   28ccc:	d110      	bne.n	28cf0 <__aeabi_dsub+0x74>
   28cce:	000b      	movs	r3, r1
   28cd0:	4313      	orrs	r3, r2
   28cd2:	d100      	bne.n	28cd6 <__aeabi_dsub+0x5a>
   28cd4:	e0d7      	b.n	28e86 <__aeabi_dsub+0x20a>
   28cd6:	1e6b      	subs	r3, r5, #1
   28cd8:	2b00      	cmp	r3, #0
   28cda:	d000      	beq.n	28cde <__aeabi_dsub+0x62>
   28cdc:	e14b      	b.n	28f76 <__aeabi_dsub+0x2fa>
   28cde:	4653      	mov	r3, sl
   28ce0:	1a9f      	subs	r7, r3, r2
   28ce2:	45ba      	cmp	sl, r7
   28ce4:	4180      	sbcs	r0, r0
   28ce6:	1a64      	subs	r4, r4, r1
   28ce8:	4240      	negs	r0, r0
   28cea:	1a24      	subs	r4, r4, r0
   28cec:	2601      	movs	r6, #1
   28cee:	e01e      	b.n	28d2e <__aeabi_dsub+0xb2>
   28cf0:	4bb3      	ldr	r3, [pc, #716]	; (28fc0 <__aeabi_dsub+0x344>)
   28cf2:	429e      	cmp	r6, r3
   28cf4:	d048      	beq.n	28d88 <__aeabi_dsub+0x10c>
   28cf6:	2380      	movs	r3, #128	; 0x80
   28cf8:	041b      	lsls	r3, r3, #16
   28cfa:	4319      	orrs	r1, r3
   28cfc:	2d38      	cmp	r5, #56	; 0x38
   28cfe:	dd00      	ble.n	28d02 <__aeabi_dsub+0x86>
   28d00:	e119      	b.n	28f36 <__aeabi_dsub+0x2ba>
   28d02:	2d1f      	cmp	r5, #31
   28d04:	dd00      	ble.n	28d08 <__aeabi_dsub+0x8c>
   28d06:	e14c      	b.n	28fa2 <__aeabi_dsub+0x326>
   28d08:	2320      	movs	r3, #32
   28d0a:	000f      	movs	r7, r1
   28d0c:	1b5b      	subs	r3, r3, r5
   28d0e:	0010      	movs	r0, r2
   28d10:	409a      	lsls	r2, r3
   28d12:	409f      	lsls	r7, r3
   28d14:	40e8      	lsrs	r0, r5
   28d16:	1e53      	subs	r3, r2, #1
   28d18:	419a      	sbcs	r2, r3
   28d1a:	40e9      	lsrs	r1, r5
   28d1c:	4307      	orrs	r7, r0
   28d1e:	4317      	orrs	r7, r2
   28d20:	4653      	mov	r3, sl
   28d22:	1bdf      	subs	r7, r3, r7
   28d24:	1a61      	subs	r1, r4, r1
   28d26:	45ba      	cmp	sl, r7
   28d28:	41a4      	sbcs	r4, r4
   28d2a:	4264      	negs	r4, r4
   28d2c:	1b0c      	subs	r4, r1, r4
   28d2e:	0223      	lsls	r3, r4, #8
   28d30:	d400      	bmi.n	28d34 <__aeabi_dsub+0xb8>
   28d32:	e0c5      	b.n	28ec0 <__aeabi_dsub+0x244>
   28d34:	0264      	lsls	r4, r4, #9
   28d36:	0a65      	lsrs	r5, r4, #9
   28d38:	2d00      	cmp	r5, #0
   28d3a:	d100      	bne.n	28d3e <__aeabi_dsub+0xc2>
   28d3c:	e0f6      	b.n	28f2c <__aeabi_dsub+0x2b0>
   28d3e:	0028      	movs	r0, r5
   28d40:	f000 fbd2 	bl	294e8 <__clzsi2>
   28d44:	0003      	movs	r3, r0
   28d46:	3b08      	subs	r3, #8
   28d48:	2b1f      	cmp	r3, #31
   28d4a:	dd00      	ble.n	28d4e <__aeabi_dsub+0xd2>
   28d4c:	e0e9      	b.n	28f22 <__aeabi_dsub+0x2a6>
   28d4e:	2220      	movs	r2, #32
   28d50:	003c      	movs	r4, r7
   28d52:	1ad2      	subs	r2, r2, r3
   28d54:	409d      	lsls	r5, r3
   28d56:	40d4      	lsrs	r4, r2
   28d58:	409f      	lsls	r7, r3
   28d5a:	4325      	orrs	r5, r4
   28d5c:	429e      	cmp	r6, r3
   28d5e:	dd00      	ble.n	28d62 <__aeabi_dsub+0xe6>
   28d60:	e0db      	b.n	28f1a <__aeabi_dsub+0x29e>
   28d62:	1b9e      	subs	r6, r3, r6
   28d64:	1c73      	adds	r3, r6, #1
   28d66:	2b1f      	cmp	r3, #31
   28d68:	dd00      	ble.n	28d6c <__aeabi_dsub+0xf0>
   28d6a:	e10a      	b.n	28f82 <__aeabi_dsub+0x306>
   28d6c:	2220      	movs	r2, #32
   28d6e:	0038      	movs	r0, r7
   28d70:	1ad2      	subs	r2, r2, r3
   28d72:	0029      	movs	r1, r5
   28d74:	4097      	lsls	r7, r2
   28d76:	002c      	movs	r4, r5
   28d78:	4091      	lsls	r1, r2
   28d7a:	40d8      	lsrs	r0, r3
   28d7c:	1e7a      	subs	r2, r7, #1
   28d7e:	4197      	sbcs	r7, r2
   28d80:	40dc      	lsrs	r4, r3
   28d82:	2600      	movs	r6, #0
   28d84:	4301      	orrs	r1, r0
   28d86:	430f      	orrs	r7, r1
   28d88:	077b      	lsls	r3, r7, #29
   28d8a:	d009      	beq.n	28da0 <__aeabi_dsub+0x124>
   28d8c:	230f      	movs	r3, #15
   28d8e:	403b      	ands	r3, r7
   28d90:	2b04      	cmp	r3, #4
   28d92:	d005      	beq.n	28da0 <__aeabi_dsub+0x124>
   28d94:	1d3b      	adds	r3, r7, #4
   28d96:	42bb      	cmp	r3, r7
   28d98:	41bf      	sbcs	r7, r7
   28d9a:	427f      	negs	r7, r7
   28d9c:	19e4      	adds	r4, r4, r7
   28d9e:	001f      	movs	r7, r3
   28da0:	0223      	lsls	r3, r4, #8
   28da2:	d525      	bpl.n	28df0 <__aeabi_dsub+0x174>
   28da4:	4b86      	ldr	r3, [pc, #536]	; (28fc0 <__aeabi_dsub+0x344>)
   28da6:	3601      	adds	r6, #1
   28da8:	429e      	cmp	r6, r3
   28daa:	d100      	bne.n	28dae <__aeabi_dsub+0x132>
   28dac:	e0af      	b.n	28f0e <__aeabi_dsub+0x292>
   28dae:	4b85      	ldr	r3, [pc, #532]	; (28fc4 <__aeabi_dsub+0x348>)
   28db0:	2501      	movs	r5, #1
   28db2:	401c      	ands	r4, r3
   28db4:	4643      	mov	r3, r8
   28db6:	0762      	lsls	r2, r4, #29
   28db8:	08ff      	lsrs	r7, r7, #3
   28dba:	0264      	lsls	r4, r4, #9
   28dbc:	0576      	lsls	r6, r6, #21
   28dbe:	4317      	orrs	r7, r2
   28dc0:	0b24      	lsrs	r4, r4, #12
   28dc2:	0d76      	lsrs	r6, r6, #21
   28dc4:	401d      	ands	r5, r3
   28dc6:	2100      	movs	r1, #0
   28dc8:	0324      	lsls	r4, r4, #12
   28dca:	0b23      	lsrs	r3, r4, #12
   28dcc:	0d0c      	lsrs	r4, r1, #20
   28dce:	4a7e      	ldr	r2, [pc, #504]	; (28fc8 <__aeabi_dsub+0x34c>)
   28dd0:	0524      	lsls	r4, r4, #20
   28dd2:	431c      	orrs	r4, r3
   28dd4:	4014      	ands	r4, r2
   28dd6:	0533      	lsls	r3, r6, #20
   28dd8:	4323      	orrs	r3, r4
   28dda:	005b      	lsls	r3, r3, #1
   28ddc:	07ed      	lsls	r5, r5, #31
   28dde:	085b      	lsrs	r3, r3, #1
   28de0:	432b      	orrs	r3, r5
   28de2:	0038      	movs	r0, r7
   28de4:	0019      	movs	r1, r3
   28de6:	bc1c      	pop	{r2, r3, r4}
   28de8:	4690      	mov	r8, r2
   28dea:	4699      	mov	r9, r3
   28dec:	46a2      	mov	sl, r4
   28dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28df0:	2501      	movs	r5, #1
   28df2:	4643      	mov	r3, r8
   28df4:	0762      	lsls	r2, r4, #29
   28df6:	08ff      	lsrs	r7, r7, #3
   28df8:	4317      	orrs	r7, r2
   28dfa:	08e4      	lsrs	r4, r4, #3
   28dfc:	401d      	ands	r5, r3
   28dfe:	4b70      	ldr	r3, [pc, #448]	; (28fc0 <__aeabi_dsub+0x344>)
   28e00:	429e      	cmp	r6, r3
   28e02:	d036      	beq.n	28e72 <__aeabi_dsub+0x1f6>
   28e04:	0324      	lsls	r4, r4, #12
   28e06:	0576      	lsls	r6, r6, #21
   28e08:	0b24      	lsrs	r4, r4, #12
   28e0a:	0d76      	lsrs	r6, r6, #21
   28e0c:	e7db      	b.n	28dc6 <__aeabi_dsub+0x14a>
   28e0e:	4663      	mov	r3, ip
   28e10:	1af3      	subs	r3, r6, r3
   28e12:	2b00      	cmp	r3, #0
   28e14:	dc00      	bgt.n	28e18 <__aeabi_dsub+0x19c>
   28e16:	e094      	b.n	28f42 <__aeabi_dsub+0x2c6>
   28e18:	4660      	mov	r0, ip
   28e1a:	2800      	cmp	r0, #0
   28e1c:	d035      	beq.n	28e8a <__aeabi_dsub+0x20e>
   28e1e:	4868      	ldr	r0, [pc, #416]	; (28fc0 <__aeabi_dsub+0x344>)
   28e20:	4286      	cmp	r6, r0
   28e22:	d0b1      	beq.n	28d88 <__aeabi_dsub+0x10c>
   28e24:	2780      	movs	r7, #128	; 0x80
   28e26:	043f      	lsls	r7, r7, #16
   28e28:	4339      	orrs	r1, r7
   28e2a:	2b38      	cmp	r3, #56	; 0x38
   28e2c:	dc00      	bgt.n	28e30 <__aeabi_dsub+0x1b4>
   28e2e:	e0fd      	b.n	2902c <__aeabi_dsub+0x3b0>
   28e30:	430a      	orrs	r2, r1
   28e32:	0017      	movs	r7, r2
   28e34:	2100      	movs	r1, #0
   28e36:	1e7a      	subs	r2, r7, #1
   28e38:	4197      	sbcs	r7, r2
   28e3a:	4457      	add	r7, sl
   28e3c:	4557      	cmp	r7, sl
   28e3e:	4180      	sbcs	r0, r0
   28e40:	1909      	adds	r1, r1, r4
   28e42:	4244      	negs	r4, r0
   28e44:	190c      	adds	r4, r1, r4
   28e46:	0223      	lsls	r3, r4, #8
   28e48:	d53a      	bpl.n	28ec0 <__aeabi_dsub+0x244>
   28e4a:	4b5d      	ldr	r3, [pc, #372]	; (28fc0 <__aeabi_dsub+0x344>)
   28e4c:	3601      	adds	r6, #1
   28e4e:	429e      	cmp	r6, r3
   28e50:	d100      	bne.n	28e54 <__aeabi_dsub+0x1d8>
   28e52:	e14b      	b.n	290ec <__aeabi_dsub+0x470>
   28e54:	2201      	movs	r2, #1
   28e56:	4b5b      	ldr	r3, [pc, #364]	; (28fc4 <__aeabi_dsub+0x348>)
   28e58:	401c      	ands	r4, r3
   28e5a:	087b      	lsrs	r3, r7, #1
   28e5c:	4017      	ands	r7, r2
   28e5e:	431f      	orrs	r7, r3
   28e60:	07e2      	lsls	r2, r4, #31
   28e62:	4317      	orrs	r7, r2
   28e64:	0864      	lsrs	r4, r4, #1
   28e66:	e78f      	b.n	28d88 <__aeabi_dsub+0x10c>
   28e68:	0008      	movs	r0, r1
   28e6a:	4310      	orrs	r0, r2
   28e6c:	d000      	beq.n	28e70 <__aeabi_dsub+0x1f4>
   28e6e:	e724      	b.n	28cba <__aeabi_dsub+0x3e>
   28e70:	e721      	b.n	28cb6 <__aeabi_dsub+0x3a>
   28e72:	0023      	movs	r3, r4
   28e74:	433b      	orrs	r3, r7
   28e76:	d100      	bne.n	28e7a <__aeabi_dsub+0x1fe>
   28e78:	e1b9      	b.n	291ee <__aeabi_dsub+0x572>
   28e7a:	2280      	movs	r2, #128	; 0x80
   28e7c:	0312      	lsls	r2, r2, #12
   28e7e:	4314      	orrs	r4, r2
   28e80:	0324      	lsls	r4, r4, #12
   28e82:	0b24      	lsrs	r4, r4, #12
   28e84:	e79f      	b.n	28dc6 <__aeabi_dsub+0x14a>
   28e86:	002e      	movs	r6, r5
   28e88:	e77e      	b.n	28d88 <__aeabi_dsub+0x10c>
   28e8a:	0008      	movs	r0, r1
   28e8c:	4310      	orrs	r0, r2
   28e8e:	d100      	bne.n	28e92 <__aeabi_dsub+0x216>
   28e90:	e0ca      	b.n	29028 <__aeabi_dsub+0x3ac>
   28e92:	1e58      	subs	r0, r3, #1
   28e94:	4684      	mov	ip, r0
   28e96:	2800      	cmp	r0, #0
   28e98:	d000      	beq.n	28e9c <__aeabi_dsub+0x220>
   28e9a:	e0e7      	b.n	2906c <__aeabi_dsub+0x3f0>
   28e9c:	4452      	add	r2, sl
   28e9e:	4552      	cmp	r2, sl
   28ea0:	4180      	sbcs	r0, r0
   28ea2:	1864      	adds	r4, r4, r1
   28ea4:	4240      	negs	r0, r0
   28ea6:	1824      	adds	r4, r4, r0
   28ea8:	0017      	movs	r7, r2
   28eaa:	2601      	movs	r6, #1
   28eac:	0223      	lsls	r3, r4, #8
   28eae:	d507      	bpl.n	28ec0 <__aeabi_dsub+0x244>
   28eb0:	2602      	movs	r6, #2
   28eb2:	e7cf      	b.n	28e54 <__aeabi_dsub+0x1d8>
   28eb4:	4664      	mov	r4, ip
   28eb6:	432c      	orrs	r4, r5
   28eb8:	d100      	bne.n	28ebc <__aeabi_dsub+0x240>
   28eba:	e1b3      	b.n	29224 <__aeabi_dsub+0x5a8>
   28ebc:	002c      	movs	r4, r5
   28ebe:	4667      	mov	r7, ip
   28ec0:	077b      	lsls	r3, r7, #29
   28ec2:	d000      	beq.n	28ec6 <__aeabi_dsub+0x24a>
   28ec4:	e762      	b.n	28d8c <__aeabi_dsub+0x110>
   28ec6:	0763      	lsls	r3, r4, #29
   28ec8:	08ff      	lsrs	r7, r7, #3
   28eca:	431f      	orrs	r7, r3
   28ecc:	2501      	movs	r5, #1
   28ece:	4643      	mov	r3, r8
   28ed0:	08e4      	lsrs	r4, r4, #3
   28ed2:	401d      	ands	r5, r3
   28ed4:	e793      	b.n	28dfe <__aeabi_dsub+0x182>
   28ed6:	2d00      	cmp	r5, #0
   28ed8:	d178      	bne.n	28fcc <__aeabi_dsub+0x350>
   28eda:	1c75      	adds	r5, r6, #1
   28edc:	056d      	lsls	r5, r5, #21
   28ede:	0d6d      	lsrs	r5, r5, #21
   28ee0:	2d01      	cmp	r5, #1
   28ee2:	dc00      	bgt.n	28ee6 <__aeabi_dsub+0x26a>
   28ee4:	e0f2      	b.n	290cc <__aeabi_dsub+0x450>
   28ee6:	4650      	mov	r0, sl
   28ee8:	1a80      	subs	r0, r0, r2
   28eea:	4582      	cmp	sl, r0
   28eec:	41bf      	sbcs	r7, r7
   28eee:	1a65      	subs	r5, r4, r1
   28ef0:	427f      	negs	r7, r7
   28ef2:	1bed      	subs	r5, r5, r7
   28ef4:	4684      	mov	ip, r0
   28ef6:	0228      	lsls	r0, r5, #8
   28ef8:	d400      	bmi.n	28efc <__aeabi_dsub+0x280>
   28efa:	e08c      	b.n	29016 <__aeabi_dsub+0x39a>
   28efc:	4650      	mov	r0, sl
   28efe:	1a17      	subs	r7, r2, r0
   28f00:	42ba      	cmp	r2, r7
   28f02:	4192      	sbcs	r2, r2
   28f04:	1b0c      	subs	r4, r1, r4
   28f06:	4255      	negs	r5, r2
   28f08:	1b65      	subs	r5, r4, r5
   28f0a:	4698      	mov	r8, r3
   28f0c:	e714      	b.n	28d38 <__aeabi_dsub+0xbc>
   28f0e:	2501      	movs	r5, #1
   28f10:	4643      	mov	r3, r8
   28f12:	2400      	movs	r4, #0
   28f14:	401d      	ands	r5, r3
   28f16:	2700      	movs	r7, #0
   28f18:	e755      	b.n	28dc6 <__aeabi_dsub+0x14a>
   28f1a:	4c2a      	ldr	r4, [pc, #168]	; (28fc4 <__aeabi_dsub+0x348>)
   28f1c:	1af6      	subs	r6, r6, r3
   28f1e:	402c      	ands	r4, r5
   28f20:	e732      	b.n	28d88 <__aeabi_dsub+0x10c>
   28f22:	003d      	movs	r5, r7
   28f24:	3828      	subs	r0, #40	; 0x28
   28f26:	4085      	lsls	r5, r0
   28f28:	2700      	movs	r7, #0
   28f2a:	e717      	b.n	28d5c <__aeabi_dsub+0xe0>
   28f2c:	0038      	movs	r0, r7
   28f2e:	f000 fadb 	bl	294e8 <__clzsi2>
   28f32:	3020      	adds	r0, #32
   28f34:	e706      	b.n	28d44 <__aeabi_dsub+0xc8>
   28f36:	430a      	orrs	r2, r1
   28f38:	0017      	movs	r7, r2
   28f3a:	2100      	movs	r1, #0
   28f3c:	1e7a      	subs	r2, r7, #1
   28f3e:	4197      	sbcs	r7, r2
   28f40:	e6ee      	b.n	28d20 <__aeabi_dsub+0xa4>
   28f42:	2b00      	cmp	r3, #0
   28f44:	d000      	beq.n	28f48 <__aeabi_dsub+0x2cc>
   28f46:	e0e5      	b.n	29114 <__aeabi_dsub+0x498>
   28f48:	1c73      	adds	r3, r6, #1
   28f4a:	469c      	mov	ip, r3
   28f4c:	055b      	lsls	r3, r3, #21
   28f4e:	0d5b      	lsrs	r3, r3, #21
   28f50:	2b01      	cmp	r3, #1
   28f52:	dc00      	bgt.n	28f56 <__aeabi_dsub+0x2da>
   28f54:	e09f      	b.n	29096 <__aeabi_dsub+0x41a>
   28f56:	4b1a      	ldr	r3, [pc, #104]	; (28fc0 <__aeabi_dsub+0x344>)
   28f58:	459c      	cmp	ip, r3
   28f5a:	d100      	bne.n	28f5e <__aeabi_dsub+0x2e2>
   28f5c:	e0c5      	b.n	290ea <__aeabi_dsub+0x46e>
   28f5e:	4452      	add	r2, sl
   28f60:	4552      	cmp	r2, sl
   28f62:	4180      	sbcs	r0, r0
   28f64:	1864      	adds	r4, r4, r1
   28f66:	4240      	negs	r0, r0
   28f68:	1824      	adds	r4, r4, r0
   28f6a:	07e7      	lsls	r7, r4, #31
   28f6c:	0852      	lsrs	r2, r2, #1
   28f6e:	4317      	orrs	r7, r2
   28f70:	0864      	lsrs	r4, r4, #1
   28f72:	4666      	mov	r6, ip
   28f74:	e708      	b.n	28d88 <__aeabi_dsub+0x10c>
   28f76:	4812      	ldr	r0, [pc, #72]	; (28fc0 <__aeabi_dsub+0x344>)
   28f78:	4285      	cmp	r5, r0
   28f7a:	d100      	bne.n	28f7e <__aeabi_dsub+0x302>
   28f7c:	e085      	b.n	2908a <__aeabi_dsub+0x40e>
   28f7e:	001d      	movs	r5, r3
   28f80:	e6bc      	b.n	28cfc <__aeabi_dsub+0x80>
   28f82:	0029      	movs	r1, r5
   28f84:	3e1f      	subs	r6, #31
   28f86:	40f1      	lsrs	r1, r6
   28f88:	2b20      	cmp	r3, #32
   28f8a:	d100      	bne.n	28f8e <__aeabi_dsub+0x312>
   28f8c:	e07f      	b.n	2908e <__aeabi_dsub+0x412>
   28f8e:	2240      	movs	r2, #64	; 0x40
   28f90:	1ad3      	subs	r3, r2, r3
   28f92:	409d      	lsls	r5, r3
   28f94:	432f      	orrs	r7, r5
   28f96:	1e7d      	subs	r5, r7, #1
   28f98:	41af      	sbcs	r7, r5
   28f9a:	2400      	movs	r4, #0
   28f9c:	430f      	orrs	r7, r1
   28f9e:	2600      	movs	r6, #0
   28fa0:	e78e      	b.n	28ec0 <__aeabi_dsub+0x244>
   28fa2:	002b      	movs	r3, r5
   28fa4:	000f      	movs	r7, r1
   28fa6:	3b20      	subs	r3, #32
   28fa8:	40df      	lsrs	r7, r3
   28faa:	2d20      	cmp	r5, #32
   28fac:	d071      	beq.n	29092 <__aeabi_dsub+0x416>
   28fae:	2340      	movs	r3, #64	; 0x40
   28fb0:	1b5d      	subs	r5, r3, r5
   28fb2:	40a9      	lsls	r1, r5
   28fb4:	430a      	orrs	r2, r1
   28fb6:	1e51      	subs	r1, r2, #1
   28fb8:	418a      	sbcs	r2, r1
   28fba:	2100      	movs	r1, #0
   28fbc:	4317      	orrs	r7, r2
   28fbe:	e6af      	b.n	28d20 <__aeabi_dsub+0xa4>
   28fc0:	000007ff 	.word	0x000007ff
   28fc4:	ff7fffff 	.word	0xff7fffff
   28fc8:	800fffff 	.word	0x800fffff
   28fcc:	2e00      	cmp	r6, #0
   28fce:	d03e      	beq.n	2904e <__aeabi_dsub+0x3d2>
   28fd0:	4eb3      	ldr	r6, [pc, #716]	; (292a0 <__aeabi_dsub+0x624>)
   28fd2:	45b4      	cmp	ip, r6
   28fd4:	d045      	beq.n	29062 <__aeabi_dsub+0x3e6>
   28fd6:	2680      	movs	r6, #128	; 0x80
   28fd8:	0436      	lsls	r6, r6, #16
   28fda:	426d      	negs	r5, r5
   28fdc:	4334      	orrs	r4, r6
   28fde:	2d38      	cmp	r5, #56	; 0x38
   28fe0:	dd00      	ble.n	28fe4 <__aeabi_dsub+0x368>
   28fe2:	e0a8      	b.n	29136 <__aeabi_dsub+0x4ba>
   28fe4:	2d1f      	cmp	r5, #31
   28fe6:	dd00      	ble.n	28fea <__aeabi_dsub+0x36e>
   28fe8:	e11f      	b.n	2922a <__aeabi_dsub+0x5ae>
   28fea:	2620      	movs	r6, #32
   28fec:	0027      	movs	r7, r4
   28fee:	4650      	mov	r0, sl
   28ff0:	1b76      	subs	r6, r6, r5
   28ff2:	40b7      	lsls	r7, r6
   28ff4:	40e8      	lsrs	r0, r5
   28ff6:	4307      	orrs	r7, r0
   28ff8:	4650      	mov	r0, sl
   28ffa:	40b0      	lsls	r0, r6
   28ffc:	1e46      	subs	r6, r0, #1
   28ffe:	41b0      	sbcs	r0, r6
   29000:	40ec      	lsrs	r4, r5
   29002:	4338      	orrs	r0, r7
   29004:	1a17      	subs	r7, r2, r0
   29006:	42ba      	cmp	r2, r7
   29008:	4192      	sbcs	r2, r2
   2900a:	1b0c      	subs	r4, r1, r4
   2900c:	4252      	negs	r2, r2
   2900e:	1aa4      	subs	r4, r4, r2
   29010:	4666      	mov	r6, ip
   29012:	4698      	mov	r8, r3
   29014:	e68b      	b.n	28d2e <__aeabi_dsub+0xb2>
   29016:	4664      	mov	r4, ip
   29018:	4667      	mov	r7, ip
   2901a:	432c      	orrs	r4, r5
   2901c:	d000      	beq.n	29020 <__aeabi_dsub+0x3a4>
   2901e:	e68b      	b.n	28d38 <__aeabi_dsub+0xbc>
   29020:	2500      	movs	r5, #0
   29022:	2600      	movs	r6, #0
   29024:	2700      	movs	r7, #0
   29026:	e6ea      	b.n	28dfe <__aeabi_dsub+0x182>
   29028:	001e      	movs	r6, r3
   2902a:	e6ad      	b.n	28d88 <__aeabi_dsub+0x10c>
   2902c:	2b1f      	cmp	r3, #31
   2902e:	dc60      	bgt.n	290f2 <__aeabi_dsub+0x476>
   29030:	2720      	movs	r7, #32
   29032:	1af8      	subs	r0, r7, r3
   29034:	000f      	movs	r7, r1
   29036:	4684      	mov	ip, r0
   29038:	4087      	lsls	r7, r0
   2903a:	0010      	movs	r0, r2
   2903c:	40d8      	lsrs	r0, r3
   2903e:	4307      	orrs	r7, r0
   29040:	4660      	mov	r0, ip
   29042:	4082      	lsls	r2, r0
   29044:	1e50      	subs	r0, r2, #1
   29046:	4182      	sbcs	r2, r0
   29048:	40d9      	lsrs	r1, r3
   2904a:	4317      	orrs	r7, r2
   2904c:	e6f5      	b.n	28e3a <__aeabi_dsub+0x1be>
   2904e:	0026      	movs	r6, r4
   29050:	4650      	mov	r0, sl
   29052:	4306      	orrs	r6, r0
   29054:	d005      	beq.n	29062 <__aeabi_dsub+0x3e6>
   29056:	43ed      	mvns	r5, r5
   29058:	2d00      	cmp	r5, #0
   2905a:	d0d3      	beq.n	29004 <__aeabi_dsub+0x388>
   2905c:	4e90      	ldr	r6, [pc, #576]	; (292a0 <__aeabi_dsub+0x624>)
   2905e:	45b4      	cmp	ip, r6
   29060:	d1bd      	bne.n	28fde <__aeabi_dsub+0x362>
   29062:	000c      	movs	r4, r1
   29064:	0017      	movs	r7, r2
   29066:	4666      	mov	r6, ip
   29068:	4698      	mov	r8, r3
   2906a:	e68d      	b.n	28d88 <__aeabi_dsub+0x10c>
   2906c:	488c      	ldr	r0, [pc, #560]	; (292a0 <__aeabi_dsub+0x624>)
   2906e:	4283      	cmp	r3, r0
   29070:	d00b      	beq.n	2908a <__aeabi_dsub+0x40e>
   29072:	4663      	mov	r3, ip
   29074:	e6d9      	b.n	28e2a <__aeabi_dsub+0x1ae>
   29076:	2d00      	cmp	r5, #0
   29078:	d000      	beq.n	2907c <__aeabi_dsub+0x400>
   2907a:	e096      	b.n	291aa <__aeabi_dsub+0x52e>
   2907c:	0008      	movs	r0, r1
   2907e:	4310      	orrs	r0, r2
   29080:	d100      	bne.n	29084 <__aeabi_dsub+0x408>
   29082:	e0e2      	b.n	2924a <__aeabi_dsub+0x5ce>
   29084:	000c      	movs	r4, r1
   29086:	0017      	movs	r7, r2
   29088:	4698      	mov	r8, r3
   2908a:	4e85      	ldr	r6, [pc, #532]	; (292a0 <__aeabi_dsub+0x624>)
   2908c:	e67c      	b.n	28d88 <__aeabi_dsub+0x10c>
   2908e:	2500      	movs	r5, #0
   29090:	e780      	b.n	28f94 <__aeabi_dsub+0x318>
   29092:	2100      	movs	r1, #0
   29094:	e78e      	b.n	28fb4 <__aeabi_dsub+0x338>
   29096:	0023      	movs	r3, r4
   29098:	4650      	mov	r0, sl
   2909a:	4303      	orrs	r3, r0
   2909c:	2e00      	cmp	r6, #0
   2909e:	d000      	beq.n	290a2 <__aeabi_dsub+0x426>
   290a0:	e0a8      	b.n	291f4 <__aeabi_dsub+0x578>
   290a2:	2b00      	cmp	r3, #0
   290a4:	d100      	bne.n	290a8 <__aeabi_dsub+0x42c>
   290a6:	e0de      	b.n	29266 <__aeabi_dsub+0x5ea>
   290a8:	000b      	movs	r3, r1
   290aa:	4313      	orrs	r3, r2
   290ac:	d100      	bne.n	290b0 <__aeabi_dsub+0x434>
   290ae:	e66b      	b.n	28d88 <__aeabi_dsub+0x10c>
   290b0:	4452      	add	r2, sl
   290b2:	4552      	cmp	r2, sl
   290b4:	4180      	sbcs	r0, r0
   290b6:	1864      	adds	r4, r4, r1
   290b8:	4240      	negs	r0, r0
   290ba:	1824      	adds	r4, r4, r0
   290bc:	0017      	movs	r7, r2
   290be:	0223      	lsls	r3, r4, #8
   290c0:	d400      	bmi.n	290c4 <__aeabi_dsub+0x448>
   290c2:	e6fd      	b.n	28ec0 <__aeabi_dsub+0x244>
   290c4:	4b77      	ldr	r3, [pc, #476]	; (292a4 <__aeabi_dsub+0x628>)
   290c6:	4666      	mov	r6, ip
   290c8:	401c      	ands	r4, r3
   290ca:	e65d      	b.n	28d88 <__aeabi_dsub+0x10c>
   290cc:	0025      	movs	r5, r4
   290ce:	4650      	mov	r0, sl
   290d0:	4305      	orrs	r5, r0
   290d2:	2e00      	cmp	r6, #0
   290d4:	d1cf      	bne.n	29076 <__aeabi_dsub+0x3fa>
   290d6:	2d00      	cmp	r5, #0
   290d8:	d14f      	bne.n	2917a <__aeabi_dsub+0x4fe>
   290da:	000c      	movs	r4, r1
   290dc:	4314      	orrs	r4, r2
   290de:	d100      	bne.n	290e2 <__aeabi_dsub+0x466>
   290e0:	e0a0      	b.n	29224 <__aeabi_dsub+0x5a8>
   290e2:	000c      	movs	r4, r1
   290e4:	0017      	movs	r7, r2
   290e6:	4698      	mov	r8, r3
   290e8:	e64e      	b.n	28d88 <__aeabi_dsub+0x10c>
   290ea:	4666      	mov	r6, ip
   290ec:	2400      	movs	r4, #0
   290ee:	2700      	movs	r7, #0
   290f0:	e685      	b.n	28dfe <__aeabi_dsub+0x182>
   290f2:	001f      	movs	r7, r3
   290f4:	0008      	movs	r0, r1
   290f6:	3f20      	subs	r7, #32
   290f8:	40f8      	lsrs	r0, r7
   290fa:	0007      	movs	r7, r0
   290fc:	2b20      	cmp	r3, #32
   290fe:	d100      	bne.n	29102 <__aeabi_dsub+0x486>
   29100:	e08e      	b.n	29220 <__aeabi_dsub+0x5a4>
   29102:	2040      	movs	r0, #64	; 0x40
   29104:	1ac3      	subs	r3, r0, r3
   29106:	4099      	lsls	r1, r3
   29108:	430a      	orrs	r2, r1
   2910a:	1e51      	subs	r1, r2, #1
   2910c:	418a      	sbcs	r2, r1
   2910e:	2100      	movs	r1, #0
   29110:	4317      	orrs	r7, r2
   29112:	e692      	b.n	28e3a <__aeabi_dsub+0x1be>
   29114:	2e00      	cmp	r6, #0
   29116:	d114      	bne.n	29142 <__aeabi_dsub+0x4c6>
   29118:	0026      	movs	r6, r4
   2911a:	4650      	mov	r0, sl
   2911c:	4306      	orrs	r6, r0
   2911e:	d062      	beq.n	291e6 <__aeabi_dsub+0x56a>
   29120:	43db      	mvns	r3, r3
   29122:	2b00      	cmp	r3, #0
   29124:	d15c      	bne.n	291e0 <__aeabi_dsub+0x564>
   29126:	1887      	adds	r7, r0, r2
   29128:	4297      	cmp	r7, r2
   2912a:	4192      	sbcs	r2, r2
   2912c:	1864      	adds	r4, r4, r1
   2912e:	4252      	negs	r2, r2
   29130:	18a4      	adds	r4, r4, r2
   29132:	4666      	mov	r6, ip
   29134:	e687      	b.n	28e46 <__aeabi_dsub+0x1ca>
   29136:	4650      	mov	r0, sl
   29138:	4320      	orrs	r0, r4
   2913a:	1e44      	subs	r4, r0, #1
   2913c:	41a0      	sbcs	r0, r4
   2913e:	2400      	movs	r4, #0
   29140:	e760      	b.n	29004 <__aeabi_dsub+0x388>
   29142:	4e57      	ldr	r6, [pc, #348]	; (292a0 <__aeabi_dsub+0x624>)
   29144:	45b4      	cmp	ip, r6
   29146:	d04e      	beq.n	291e6 <__aeabi_dsub+0x56a>
   29148:	2680      	movs	r6, #128	; 0x80
   2914a:	0436      	lsls	r6, r6, #16
   2914c:	425b      	negs	r3, r3
   2914e:	4334      	orrs	r4, r6
   29150:	2b38      	cmp	r3, #56	; 0x38
   29152:	dd00      	ble.n	29156 <__aeabi_dsub+0x4da>
   29154:	e07f      	b.n	29256 <__aeabi_dsub+0x5da>
   29156:	2b1f      	cmp	r3, #31
   29158:	dd00      	ble.n	2915c <__aeabi_dsub+0x4e0>
   2915a:	e08b      	b.n	29274 <__aeabi_dsub+0x5f8>
   2915c:	2620      	movs	r6, #32
   2915e:	0027      	movs	r7, r4
   29160:	4650      	mov	r0, sl
   29162:	1af6      	subs	r6, r6, r3
   29164:	40b7      	lsls	r7, r6
   29166:	40d8      	lsrs	r0, r3
   29168:	4307      	orrs	r7, r0
   2916a:	4650      	mov	r0, sl
   2916c:	40b0      	lsls	r0, r6
   2916e:	1e46      	subs	r6, r0, #1
   29170:	41b0      	sbcs	r0, r6
   29172:	4307      	orrs	r7, r0
   29174:	40dc      	lsrs	r4, r3
   29176:	18bf      	adds	r7, r7, r2
   29178:	e7d6      	b.n	29128 <__aeabi_dsub+0x4ac>
   2917a:	000d      	movs	r5, r1
   2917c:	4315      	orrs	r5, r2
   2917e:	d100      	bne.n	29182 <__aeabi_dsub+0x506>
   29180:	e602      	b.n	28d88 <__aeabi_dsub+0x10c>
   29182:	4650      	mov	r0, sl
   29184:	1a80      	subs	r0, r0, r2
   29186:	4582      	cmp	sl, r0
   29188:	41bf      	sbcs	r7, r7
   2918a:	1a65      	subs	r5, r4, r1
   2918c:	427f      	negs	r7, r7
   2918e:	1bed      	subs	r5, r5, r7
   29190:	4684      	mov	ip, r0
   29192:	0228      	lsls	r0, r5, #8
   29194:	d400      	bmi.n	29198 <__aeabi_dsub+0x51c>
   29196:	e68d      	b.n	28eb4 <__aeabi_dsub+0x238>
   29198:	4650      	mov	r0, sl
   2919a:	1a17      	subs	r7, r2, r0
   2919c:	42ba      	cmp	r2, r7
   2919e:	4192      	sbcs	r2, r2
   291a0:	1b0c      	subs	r4, r1, r4
   291a2:	4252      	negs	r2, r2
   291a4:	1aa4      	subs	r4, r4, r2
   291a6:	4698      	mov	r8, r3
   291a8:	e5ee      	b.n	28d88 <__aeabi_dsub+0x10c>
   291aa:	000d      	movs	r5, r1
   291ac:	4315      	orrs	r5, r2
   291ae:	d100      	bne.n	291b2 <__aeabi_dsub+0x536>
   291b0:	e76b      	b.n	2908a <__aeabi_dsub+0x40e>
   291b2:	4650      	mov	r0, sl
   291b4:	0767      	lsls	r7, r4, #29
   291b6:	08c0      	lsrs	r0, r0, #3
   291b8:	4307      	orrs	r7, r0
   291ba:	2080      	movs	r0, #128	; 0x80
   291bc:	08e4      	lsrs	r4, r4, #3
   291be:	0300      	lsls	r0, r0, #12
   291c0:	4204      	tst	r4, r0
   291c2:	d007      	beq.n	291d4 <__aeabi_dsub+0x558>
   291c4:	08cd      	lsrs	r5, r1, #3
   291c6:	4205      	tst	r5, r0
   291c8:	d104      	bne.n	291d4 <__aeabi_dsub+0x558>
   291ca:	002c      	movs	r4, r5
   291cc:	4698      	mov	r8, r3
   291ce:	08d7      	lsrs	r7, r2, #3
   291d0:	0749      	lsls	r1, r1, #29
   291d2:	430f      	orrs	r7, r1
   291d4:	0f7b      	lsrs	r3, r7, #29
   291d6:	00e4      	lsls	r4, r4, #3
   291d8:	431c      	orrs	r4, r3
   291da:	00ff      	lsls	r7, r7, #3
   291dc:	4e30      	ldr	r6, [pc, #192]	; (292a0 <__aeabi_dsub+0x624>)
   291de:	e5d3      	b.n	28d88 <__aeabi_dsub+0x10c>
   291e0:	4e2f      	ldr	r6, [pc, #188]	; (292a0 <__aeabi_dsub+0x624>)
   291e2:	45b4      	cmp	ip, r6
   291e4:	d1b4      	bne.n	29150 <__aeabi_dsub+0x4d4>
   291e6:	000c      	movs	r4, r1
   291e8:	0017      	movs	r7, r2
   291ea:	4666      	mov	r6, ip
   291ec:	e5cc      	b.n	28d88 <__aeabi_dsub+0x10c>
   291ee:	2700      	movs	r7, #0
   291f0:	2400      	movs	r4, #0
   291f2:	e5e8      	b.n	28dc6 <__aeabi_dsub+0x14a>
   291f4:	2b00      	cmp	r3, #0
   291f6:	d039      	beq.n	2926c <__aeabi_dsub+0x5f0>
   291f8:	000b      	movs	r3, r1
   291fa:	4313      	orrs	r3, r2
   291fc:	d100      	bne.n	29200 <__aeabi_dsub+0x584>
   291fe:	e744      	b.n	2908a <__aeabi_dsub+0x40e>
   29200:	08c0      	lsrs	r0, r0, #3
   29202:	0767      	lsls	r7, r4, #29
   29204:	4307      	orrs	r7, r0
   29206:	2080      	movs	r0, #128	; 0x80
   29208:	08e4      	lsrs	r4, r4, #3
   2920a:	0300      	lsls	r0, r0, #12
   2920c:	4204      	tst	r4, r0
   2920e:	d0e1      	beq.n	291d4 <__aeabi_dsub+0x558>
   29210:	08cb      	lsrs	r3, r1, #3
   29212:	4203      	tst	r3, r0
   29214:	d1de      	bne.n	291d4 <__aeabi_dsub+0x558>
   29216:	08d7      	lsrs	r7, r2, #3
   29218:	0749      	lsls	r1, r1, #29
   2921a:	430f      	orrs	r7, r1
   2921c:	001c      	movs	r4, r3
   2921e:	e7d9      	b.n	291d4 <__aeabi_dsub+0x558>
   29220:	2100      	movs	r1, #0
   29222:	e771      	b.n	29108 <__aeabi_dsub+0x48c>
   29224:	2500      	movs	r5, #0
   29226:	2700      	movs	r7, #0
   29228:	e5e9      	b.n	28dfe <__aeabi_dsub+0x182>
   2922a:	002e      	movs	r6, r5
   2922c:	0027      	movs	r7, r4
   2922e:	3e20      	subs	r6, #32
   29230:	40f7      	lsrs	r7, r6
   29232:	2d20      	cmp	r5, #32
   29234:	d02f      	beq.n	29296 <__aeabi_dsub+0x61a>
   29236:	2640      	movs	r6, #64	; 0x40
   29238:	1b75      	subs	r5, r6, r5
   2923a:	40ac      	lsls	r4, r5
   2923c:	4650      	mov	r0, sl
   2923e:	4320      	orrs	r0, r4
   29240:	1e44      	subs	r4, r0, #1
   29242:	41a0      	sbcs	r0, r4
   29244:	2400      	movs	r4, #0
   29246:	4338      	orrs	r0, r7
   29248:	e6dc      	b.n	29004 <__aeabi_dsub+0x388>
   2924a:	2480      	movs	r4, #128	; 0x80
   2924c:	2500      	movs	r5, #0
   2924e:	0324      	lsls	r4, r4, #12
   29250:	4e13      	ldr	r6, [pc, #76]	; (292a0 <__aeabi_dsub+0x624>)
   29252:	2700      	movs	r7, #0
   29254:	e5d3      	b.n	28dfe <__aeabi_dsub+0x182>
   29256:	4650      	mov	r0, sl
   29258:	4320      	orrs	r0, r4
   2925a:	0007      	movs	r7, r0
   2925c:	1e78      	subs	r0, r7, #1
   2925e:	4187      	sbcs	r7, r0
   29260:	2400      	movs	r4, #0
   29262:	18bf      	adds	r7, r7, r2
   29264:	e760      	b.n	29128 <__aeabi_dsub+0x4ac>
   29266:	000c      	movs	r4, r1
   29268:	0017      	movs	r7, r2
   2926a:	e58d      	b.n	28d88 <__aeabi_dsub+0x10c>
   2926c:	000c      	movs	r4, r1
   2926e:	0017      	movs	r7, r2
   29270:	4e0b      	ldr	r6, [pc, #44]	; (292a0 <__aeabi_dsub+0x624>)
   29272:	e589      	b.n	28d88 <__aeabi_dsub+0x10c>
   29274:	001e      	movs	r6, r3
   29276:	0027      	movs	r7, r4
   29278:	3e20      	subs	r6, #32
   2927a:	40f7      	lsrs	r7, r6
   2927c:	2b20      	cmp	r3, #32
   2927e:	d00c      	beq.n	2929a <__aeabi_dsub+0x61e>
   29280:	2640      	movs	r6, #64	; 0x40
   29282:	1af3      	subs	r3, r6, r3
   29284:	409c      	lsls	r4, r3
   29286:	4650      	mov	r0, sl
   29288:	4320      	orrs	r0, r4
   2928a:	1e44      	subs	r4, r0, #1
   2928c:	41a0      	sbcs	r0, r4
   2928e:	4307      	orrs	r7, r0
   29290:	2400      	movs	r4, #0
   29292:	18bf      	adds	r7, r7, r2
   29294:	e748      	b.n	29128 <__aeabi_dsub+0x4ac>
   29296:	2400      	movs	r4, #0
   29298:	e7d0      	b.n	2923c <__aeabi_dsub+0x5c0>
   2929a:	2400      	movs	r4, #0
   2929c:	e7f3      	b.n	29286 <__aeabi_dsub+0x60a>
   2929e:	46c0      	nop			; (mov r8, r8)
   292a0:	000007ff 	.word	0x000007ff
   292a4:	ff7fffff 	.word	0xff7fffff

000292a8 <__aeabi_dcmpun>:
   292a8:	b570      	push	{r4, r5, r6, lr}
   292aa:	4e0e      	ldr	r6, [pc, #56]	; (292e4 <__aeabi_dcmpun+0x3c>)
   292ac:	030d      	lsls	r5, r1, #12
   292ae:	031c      	lsls	r4, r3, #12
   292b0:	0049      	lsls	r1, r1, #1
   292b2:	005b      	lsls	r3, r3, #1
   292b4:	0b2d      	lsrs	r5, r5, #12
   292b6:	0d49      	lsrs	r1, r1, #21
   292b8:	0b24      	lsrs	r4, r4, #12
   292ba:	0d5b      	lsrs	r3, r3, #21
   292bc:	42b1      	cmp	r1, r6
   292be:	d004      	beq.n	292ca <__aeabi_dcmpun+0x22>
   292c0:	4908      	ldr	r1, [pc, #32]	; (292e4 <__aeabi_dcmpun+0x3c>)
   292c2:	2000      	movs	r0, #0
   292c4:	428b      	cmp	r3, r1
   292c6:	d008      	beq.n	292da <__aeabi_dcmpun+0x32>
   292c8:	bd70      	pop	{r4, r5, r6, pc}
   292ca:	4305      	orrs	r5, r0
   292cc:	2001      	movs	r0, #1
   292ce:	2d00      	cmp	r5, #0
   292d0:	d1fa      	bne.n	292c8 <__aeabi_dcmpun+0x20>
   292d2:	4904      	ldr	r1, [pc, #16]	; (292e4 <__aeabi_dcmpun+0x3c>)
   292d4:	2000      	movs	r0, #0
   292d6:	428b      	cmp	r3, r1
   292d8:	d1f6      	bne.n	292c8 <__aeabi_dcmpun+0x20>
   292da:	4314      	orrs	r4, r2
   292dc:	0020      	movs	r0, r4
   292de:	1e44      	subs	r4, r0, #1
   292e0:	41a0      	sbcs	r0, r4
   292e2:	e7f1      	b.n	292c8 <__aeabi_dcmpun+0x20>
   292e4:	000007ff 	.word	0x000007ff

000292e8 <__aeabi_d2iz>:
   292e8:	b530      	push	{r4, r5, lr}
   292ea:	4d13      	ldr	r5, [pc, #76]	; (29338 <__aeabi_d2iz+0x50>)
   292ec:	030a      	lsls	r2, r1, #12
   292ee:	004b      	lsls	r3, r1, #1
   292f0:	0b12      	lsrs	r2, r2, #12
   292f2:	0d5b      	lsrs	r3, r3, #21
   292f4:	0fc9      	lsrs	r1, r1, #31
   292f6:	2400      	movs	r4, #0
   292f8:	42ab      	cmp	r3, r5
   292fa:	dd10      	ble.n	2931e <__aeabi_d2iz+0x36>
   292fc:	4c0f      	ldr	r4, [pc, #60]	; (2933c <__aeabi_d2iz+0x54>)
   292fe:	42a3      	cmp	r3, r4
   29300:	dc0f      	bgt.n	29322 <__aeabi_d2iz+0x3a>
   29302:	2480      	movs	r4, #128	; 0x80
   29304:	4d0e      	ldr	r5, [pc, #56]	; (29340 <__aeabi_d2iz+0x58>)
   29306:	0364      	lsls	r4, r4, #13
   29308:	4322      	orrs	r2, r4
   2930a:	1aed      	subs	r5, r5, r3
   2930c:	2d1f      	cmp	r5, #31
   2930e:	dd0b      	ble.n	29328 <__aeabi_d2iz+0x40>
   29310:	480c      	ldr	r0, [pc, #48]	; (29344 <__aeabi_d2iz+0x5c>)
   29312:	1ac3      	subs	r3, r0, r3
   29314:	40da      	lsrs	r2, r3
   29316:	4254      	negs	r4, r2
   29318:	2900      	cmp	r1, #0
   2931a:	d100      	bne.n	2931e <__aeabi_d2iz+0x36>
   2931c:	0014      	movs	r4, r2
   2931e:	0020      	movs	r0, r4
   29320:	bd30      	pop	{r4, r5, pc}
   29322:	4b09      	ldr	r3, [pc, #36]	; (29348 <__aeabi_d2iz+0x60>)
   29324:	18cc      	adds	r4, r1, r3
   29326:	e7fa      	b.n	2931e <__aeabi_d2iz+0x36>
   29328:	4c08      	ldr	r4, [pc, #32]	; (2934c <__aeabi_d2iz+0x64>)
   2932a:	40e8      	lsrs	r0, r5
   2932c:	46a4      	mov	ip, r4
   2932e:	4463      	add	r3, ip
   29330:	409a      	lsls	r2, r3
   29332:	4302      	orrs	r2, r0
   29334:	e7ef      	b.n	29316 <__aeabi_d2iz+0x2e>
   29336:	46c0      	nop			; (mov r8, r8)
   29338:	000003fe 	.word	0x000003fe
   2933c:	0000041d 	.word	0x0000041d
   29340:	00000433 	.word	0x00000433
   29344:	00000413 	.word	0x00000413
   29348:	7fffffff 	.word	0x7fffffff
   2934c:	fffffbed 	.word	0xfffffbed

00029350 <__aeabi_i2d>:
   29350:	b570      	push	{r4, r5, r6, lr}
   29352:	2800      	cmp	r0, #0
   29354:	d030      	beq.n	293b8 <__aeabi_i2d+0x68>
   29356:	17c3      	asrs	r3, r0, #31
   29358:	18c4      	adds	r4, r0, r3
   2935a:	405c      	eors	r4, r3
   2935c:	0fc5      	lsrs	r5, r0, #31
   2935e:	0020      	movs	r0, r4
   29360:	f000 f8c2 	bl	294e8 <__clzsi2>
   29364:	4b17      	ldr	r3, [pc, #92]	; (293c4 <__aeabi_i2d+0x74>)
   29366:	4a18      	ldr	r2, [pc, #96]	; (293c8 <__aeabi_i2d+0x78>)
   29368:	1a1b      	subs	r3, r3, r0
   2936a:	1ad2      	subs	r2, r2, r3
   2936c:	2a1f      	cmp	r2, #31
   2936e:	dd18      	ble.n	293a2 <__aeabi_i2d+0x52>
   29370:	4a16      	ldr	r2, [pc, #88]	; (293cc <__aeabi_i2d+0x7c>)
   29372:	1ad2      	subs	r2, r2, r3
   29374:	4094      	lsls	r4, r2
   29376:	2200      	movs	r2, #0
   29378:	0324      	lsls	r4, r4, #12
   2937a:	055b      	lsls	r3, r3, #21
   2937c:	0b24      	lsrs	r4, r4, #12
   2937e:	0d5b      	lsrs	r3, r3, #21
   29380:	2100      	movs	r1, #0
   29382:	0010      	movs	r0, r2
   29384:	0324      	lsls	r4, r4, #12
   29386:	0d0a      	lsrs	r2, r1, #20
   29388:	0b24      	lsrs	r4, r4, #12
   2938a:	0512      	lsls	r2, r2, #20
   2938c:	4322      	orrs	r2, r4
   2938e:	4c10      	ldr	r4, [pc, #64]	; (293d0 <__aeabi_i2d+0x80>)
   29390:	051b      	lsls	r3, r3, #20
   29392:	4022      	ands	r2, r4
   29394:	4313      	orrs	r3, r2
   29396:	005b      	lsls	r3, r3, #1
   29398:	07ed      	lsls	r5, r5, #31
   2939a:	085b      	lsrs	r3, r3, #1
   2939c:	432b      	orrs	r3, r5
   2939e:	0019      	movs	r1, r3
   293a0:	bd70      	pop	{r4, r5, r6, pc}
   293a2:	0021      	movs	r1, r4
   293a4:	4091      	lsls	r1, r2
   293a6:	000a      	movs	r2, r1
   293a8:	210b      	movs	r1, #11
   293aa:	1a08      	subs	r0, r1, r0
   293ac:	40c4      	lsrs	r4, r0
   293ae:	055b      	lsls	r3, r3, #21
   293b0:	0324      	lsls	r4, r4, #12
   293b2:	0b24      	lsrs	r4, r4, #12
   293b4:	0d5b      	lsrs	r3, r3, #21
   293b6:	e7e3      	b.n	29380 <__aeabi_i2d+0x30>
   293b8:	2500      	movs	r5, #0
   293ba:	2300      	movs	r3, #0
   293bc:	2400      	movs	r4, #0
   293be:	2200      	movs	r2, #0
   293c0:	e7de      	b.n	29380 <__aeabi_i2d+0x30>
   293c2:	46c0      	nop			; (mov r8, r8)
   293c4:	0000041e 	.word	0x0000041e
   293c8:	00000433 	.word	0x00000433
   293cc:	00000413 	.word	0x00000413
   293d0:	800fffff 	.word	0x800fffff

000293d4 <__aeabi_ui2d>:
   293d4:	b510      	push	{r4, lr}
   293d6:	1e04      	subs	r4, r0, #0
   293d8:	d028      	beq.n	2942c <__aeabi_ui2d+0x58>
   293da:	f000 f885 	bl	294e8 <__clzsi2>
   293de:	4b15      	ldr	r3, [pc, #84]	; (29434 <__aeabi_ui2d+0x60>)
   293e0:	4a15      	ldr	r2, [pc, #84]	; (29438 <__aeabi_ui2d+0x64>)
   293e2:	1a1b      	subs	r3, r3, r0
   293e4:	1ad2      	subs	r2, r2, r3
   293e6:	2a1f      	cmp	r2, #31
   293e8:	dd15      	ble.n	29416 <__aeabi_ui2d+0x42>
   293ea:	4a14      	ldr	r2, [pc, #80]	; (2943c <__aeabi_ui2d+0x68>)
   293ec:	1ad2      	subs	r2, r2, r3
   293ee:	4094      	lsls	r4, r2
   293f0:	2200      	movs	r2, #0
   293f2:	0324      	lsls	r4, r4, #12
   293f4:	055b      	lsls	r3, r3, #21
   293f6:	0b24      	lsrs	r4, r4, #12
   293f8:	0d5b      	lsrs	r3, r3, #21
   293fa:	2100      	movs	r1, #0
   293fc:	0010      	movs	r0, r2
   293fe:	0324      	lsls	r4, r4, #12
   29400:	0d0a      	lsrs	r2, r1, #20
   29402:	0b24      	lsrs	r4, r4, #12
   29404:	0512      	lsls	r2, r2, #20
   29406:	4322      	orrs	r2, r4
   29408:	4c0d      	ldr	r4, [pc, #52]	; (29440 <__aeabi_ui2d+0x6c>)
   2940a:	051b      	lsls	r3, r3, #20
   2940c:	4022      	ands	r2, r4
   2940e:	4313      	orrs	r3, r2
   29410:	005b      	lsls	r3, r3, #1
   29412:	0859      	lsrs	r1, r3, #1
   29414:	bd10      	pop	{r4, pc}
   29416:	0021      	movs	r1, r4
   29418:	4091      	lsls	r1, r2
   2941a:	000a      	movs	r2, r1
   2941c:	210b      	movs	r1, #11
   2941e:	1a08      	subs	r0, r1, r0
   29420:	40c4      	lsrs	r4, r0
   29422:	055b      	lsls	r3, r3, #21
   29424:	0324      	lsls	r4, r4, #12
   29426:	0b24      	lsrs	r4, r4, #12
   29428:	0d5b      	lsrs	r3, r3, #21
   2942a:	e7e6      	b.n	293fa <__aeabi_ui2d+0x26>
   2942c:	2300      	movs	r3, #0
   2942e:	2400      	movs	r4, #0
   29430:	2200      	movs	r2, #0
   29432:	e7e2      	b.n	293fa <__aeabi_ui2d+0x26>
   29434:	0000041e 	.word	0x0000041e
   29438:	00000433 	.word	0x00000433
   2943c:	00000413 	.word	0x00000413
   29440:	800fffff 	.word	0x800fffff

00029444 <__aeabi_f2d>:
   29444:	0041      	lsls	r1, r0, #1
   29446:	0e09      	lsrs	r1, r1, #24
   29448:	1c4b      	adds	r3, r1, #1
   2944a:	b570      	push	{r4, r5, r6, lr}
   2944c:	b2db      	uxtb	r3, r3
   2944e:	0246      	lsls	r6, r0, #9
   29450:	0a75      	lsrs	r5, r6, #9
   29452:	0fc4      	lsrs	r4, r0, #31
   29454:	2b01      	cmp	r3, #1
   29456:	dd14      	ble.n	29482 <__aeabi_f2d+0x3e>
   29458:	23e0      	movs	r3, #224	; 0xe0
   2945a:	009b      	lsls	r3, r3, #2
   2945c:	076d      	lsls	r5, r5, #29
   2945e:	0b36      	lsrs	r6, r6, #12
   29460:	18cb      	adds	r3, r1, r3
   29462:	2100      	movs	r1, #0
   29464:	0d0a      	lsrs	r2, r1, #20
   29466:	0028      	movs	r0, r5
   29468:	0512      	lsls	r2, r2, #20
   2946a:	4d1c      	ldr	r5, [pc, #112]	; (294dc <__aeabi_f2d+0x98>)
   2946c:	4332      	orrs	r2, r6
   2946e:	055b      	lsls	r3, r3, #21
   29470:	402a      	ands	r2, r5
   29472:	085b      	lsrs	r3, r3, #1
   29474:	4313      	orrs	r3, r2
   29476:	005b      	lsls	r3, r3, #1
   29478:	07e4      	lsls	r4, r4, #31
   2947a:	085b      	lsrs	r3, r3, #1
   2947c:	4323      	orrs	r3, r4
   2947e:	0019      	movs	r1, r3
   29480:	bd70      	pop	{r4, r5, r6, pc}
   29482:	2900      	cmp	r1, #0
   29484:	d114      	bne.n	294b0 <__aeabi_f2d+0x6c>
   29486:	2d00      	cmp	r5, #0
   29488:	d01e      	beq.n	294c8 <__aeabi_f2d+0x84>
   2948a:	0028      	movs	r0, r5
   2948c:	f000 f82c 	bl	294e8 <__clzsi2>
   29490:	280a      	cmp	r0, #10
   29492:	dc1c      	bgt.n	294ce <__aeabi_f2d+0x8a>
   29494:	230b      	movs	r3, #11
   29496:	002a      	movs	r2, r5
   29498:	1a1b      	subs	r3, r3, r0
   2949a:	40da      	lsrs	r2, r3
   2949c:	0003      	movs	r3, r0
   2949e:	3315      	adds	r3, #21
   294a0:	409d      	lsls	r5, r3
   294a2:	4b0f      	ldr	r3, [pc, #60]	; (294e0 <__aeabi_f2d+0x9c>)
   294a4:	0312      	lsls	r2, r2, #12
   294a6:	1a1b      	subs	r3, r3, r0
   294a8:	055b      	lsls	r3, r3, #21
   294aa:	0b16      	lsrs	r6, r2, #12
   294ac:	0d5b      	lsrs	r3, r3, #21
   294ae:	e7d8      	b.n	29462 <__aeabi_f2d+0x1e>
   294b0:	2d00      	cmp	r5, #0
   294b2:	d006      	beq.n	294c2 <__aeabi_f2d+0x7e>
   294b4:	0b32      	lsrs	r2, r6, #12
   294b6:	2680      	movs	r6, #128	; 0x80
   294b8:	0336      	lsls	r6, r6, #12
   294ba:	076d      	lsls	r5, r5, #29
   294bc:	4316      	orrs	r6, r2
   294be:	4b09      	ldr	r3, [pc, #36]	; (294e4 <__aeabi_f2d+0xa0>)
   294c0:	e7cf      	b.n	29462 <__aeabi_f2d+0x1e>
   294c2:	4b08      	ldr	r3, [pc, #32]	; (294e4 <__aeabi_f2d+0xa0>)
   294c4:	2600      	movs	r6, #0
   294c6:	e7cc      	b.n	29462 <__aeabi_f2d+0x1e>
   294c8:	2300      	movs	r3, #0
   294ca:	2600      	movs	r6, #0
   294cc:	e7c9      	b.n	29462 <__aeabi_f2d+0x1e>
   294ce:	0003      	movs	r3, r0
   294d0:	002a      	movs	r2, r5
   294d2:	3b0b      	subs	r3, #11
   294d4:	409a      	lsls	r2, r3
   294d6:	2500      	movs	r5, #0
   294d8:	e7e3      	b.n	294a2 <__aeabi_f2d+0x5e>
   294da:	46c0      	nop			; (mov r8, r8)
   294dc:	800fffff 	.word	0x800fffff
   294e0:	00000389 	.word	0x00000389
   294e4:	000007ff 	.word	0x000007ff

000294e8 <__clzsi2>:
   294e8:	211c      	movs	r1, #28
   294ea:	2301      	movs	r3, #1
   294ec:	041b      	lsls	r3, r3, #16
   294ee:	4298      	cmp	r0, r3
   294f0:	d301      	bcc.n	294f6 <__clzsi2+0xe>
   294f2:	0c00      	lsrs	r0, r0, #16
   294f4:	3910      	subs	r1, #16
   294f6:	0a1b      	lsrs	r3, r3, #8
   294f8:	4298      	cmp	r0, r3
   294fa:	d301      	bcc.n	29500 <__clzsi2+0x18>
   294fc:	0a00      	lsrs	r0, r0, #8
   294fe:	3908      	subs	r1, #8
   29500:	091b      	lsrs	r3, r3, #4
   29502:	4298      	cmp	r0, r3
   29504:	d301      	bcc.n	2950a <__clzsi2+0x22>
   29506:	0900      	lsrs	r0, r0, #4
   29508:	3904      	subs	r1, #4
   2950a:	a202      	add	r2, pc, #8	; (adr r2, 29514 <__clzsi2+0x2c>)
   2950c:	5c10      	ldrb	r0, [r2, r0]
   2950e:	1840      	adds	r0, r0, r1
   29510:	4770      	bx	lr
   29512:	46c0      	nop			; (mov r8, r8)
   29514:	02020304 	.word	0x02020304
   29518:	01010101 	.word	0x01010101
	...

00029524 <__clzdi2>:
   29524:	b510      	push	{r4, lr}
   29526:	2900      	cmp	r1, #0
   29528:	d103      	bne.n	29532 <__clzdi2+0xe>
   2952a:	f7ff ffdd 	bl	294e8 <__clzsi2>
   2952e:	3020      	adds	r0, #32
   29530:	e002      	b.n	29538 <__clzdi2+0x14>
   29532:	1c08      	adds	r0, r1, #0
   29534:	f7ff ffd8 	bl	294e8 <__clzsi2>
   29538:	bd10      	pop	{r4, pc}
   2953a:	46c0      	nop			; (mov r8, r8)

0002953c <atoi>:
   2953c:	b510      	push	{r4, lr}
   2953e:	220a      	movs	r2, #10
   29540:	2100      	movs	r1, #0
   29542:	f000 fadd 	bl	29b00 <strtol>
   29546:	bd10      	pop	{r4, pc}

00029548 <calloc>:
   29548:	b510      	push	{r4, lr}
   2954a:	4b03      	ldr	r3, [pc, #12]	; (29558 <calloc+0x10>)
   2954c:	000a      	movs	r2, r1
   2954e:	0001      	movs	r1, r0
   29550:	6818      	ldr	r0, [r3, #0]
   29552:	f000 f888 	bl	29666 <_calloc_r>
   29556:	bd10      	pop	{r4, pc}
   29558:	20000034 	.word	0x20000034

0002955c <__errno>:
   2955c:	4b01      	ldr	r3, [pc, #4]	; (29564 <__errno+0x8>)
   2955e:	6818      	ldr	r0, [r3, #0]
   29560:	4770      	bx	lr
   29562:	46c0      	nop			; (mov r8, r8)
   29564:	20000034 	.word	0x20000034

00029568 <__libc_init_array>:
   29568:	b570      	push	{r4, r5, r6, lr}
   2956a:	2600      	movs	r6, #0
   2956c:	4d0c      	ldr	r5, [pc, #48]	; (295a0 <__libc_init_array+0x38>)
   2956e:	4c0d      	ldr	r4, [pc, #52]	; (295a4 <__libc_init_array+0x3c>)
   29570:	1b64      	subs	r4, r4, r5
   29572:	10a4      	asrs	r4, r4, #2
   29574:	42a6      	cmp	r6, r4
   29576:	d109      	bne.n	2958c <__libc_init_array+0x24>
   29578:	2600      	movs	r6, #0
   2957a:	f002 f9fb 	bl	2b974 <_init>
   2957e:	4d0a      	ldr	r5, [pc, #40]	; (295a8 <__libc_init_array+0x40>)
   29580:	4c0a      	ldr	r4, [pc, #40]	; (295ac <__libc_init_array+0x44>)
   29582:	1b64      	subs	r4, r4, r5
   29584:	10a4      	asrs	r4, r4, #2
   29586:	42a6      	cmp	r6, r4
   29588:	d105      	bne.n	29596 <__libc_init_array+0x2e>
   2958a:	bd70      	pop	{r4, r5, r6, pc}
   2958c:	00b3      	lsls	r3, r6, #2
   2958e:	58eb      	ldr	r3, [r5, r3]
   29590:	4798      	blx	r3
   29592:	3601      	adds	r6, #1
   29594:	e7ee      	b.n	29574 <__libc_init_array+0xc>
   29596:	00b3      	lsls	r3, r6, #2
   29598:	58eb      	ldr	r3, [r5, r3]
   2959a:	4798      	blx	r3
   2959c:	3601      	adds	r6, #1
   2959e:	e7f2      	b.n	29586 <__libc_init_array+0x1e>
   295a0:	0002b980 	.word	0x0002b980
   295a4:	0002b980 	.word	0x0002b980
   295a8:	0002b980 	.word	0x0002b980
   295ac:	0002b984 	.word	0x0002b984

000295b0 <__locale_ctype_ptr_l>:
   295b0:	30ec      	adds	r0, #236	; 0xec
   295b2:	6800      	ldr	r0, [r0, #0]
   295b4:	4770      	bx	lr
	...

000295b8 <__locale_ctype_ptr>:
   295b8:	4b04      	ldr	r3, [pc, #16]	; (295cc <__locale_ctype_ptr+0x14>)
   295ba:	681b      	ldr	r3, [r3, #0]
   295bc:	6a1b      	ldr	r3, [r3, #32]
   295be:	2b00      	cmp	r3, #0
   295c0:	d100      	bne.n	295c4 <__locale_ctype_ptr+0xc>
   295c2:	4b03      	ldr	r3, [pc, #12]	; (295d0 <__locale_ctype_ptr+0x18>)
   295c4:	33ec      	adds	r3, #236	; 0xec
   295c6:	6818      	ldr	r0, [r3, #0]
   295c8:	4770      	bx	lr
   295ca:	46c0      	nop			; (mov r8, r8)
   295cc:	20000034 	.word	0x20000034
   295d0:	20000098 	.word	0x20000098

000295d4 <malloc>:
   295d4:	b510      	push	{r4, lr}
   295d6:	4b03      	ldr	r3, [pc, #12]	; (295e4 <malloc+0x10>)
   295d8:	0001      	movs	r1, r0
   295da:	6818      	ldr	r0, [r3, #0]
   295dc:	f000 f89c 	bl	29718 <_malloc_r>
   295e0:	bd10      	pop	{r4, pc}
   295e2:	46c0      	nop			; (mov r8, r8)
   295e4:	20000034 	.word	0x20000034

000295e8 <free>:
   295e8:	b510      	push	{r4, lr}
   295ea:	4b03      	ldr	r3, [pc, #12]	; (295f8 <free+0x10>)
   295ec:	0001      	movs	r1, r0
   295ee:	6818      	ldr	r0, [r3, #0]
   295f0:	f000 f848 	bl	29684 <_free_r>
   295f4:	bd10      	pop	{r4, pc}
   295f6:	46c0      	nop			; (mov r8, r8)
   295f8:	20000034 	.word	0x20000034

000295fc <__ascii_mbtowc>:
   295fc:	b082      	sub	sp, #8
   295fe:	2900      	cmp	r1, #0
   29600:	d100      	bne.n	29604 <__ascii_mbtowc+0x8>
   29602:	a901      	add	r1, sp, #4
   29604:	1e10      	subs	r0, r2, #0
   29606:	d006      	beq.n	29616 <__ascii_mbtowc+0x1a>
   29608:	2b00      	cmp	r3, #0
   2960a:	d006      	beq.n	2961a <__ascii_mbtowc+0x1e>
   2960c:	7813      	ldrb	r3, [r2, #0]
   2960e:	600b      	str	r3, [r1, #0]
   29610:	7810      	ldrb	r0, [r2, #0]
   29612:	1e43      	subs	r3, r0, #1
   29614:	4198      	sbcs	r0, r3
   29616:	b002      	add	sp, #8
   29618:	4770      	bx	lr
   2961a:	2002      	movs	r0, #2
   2961c:	4240      	negs	r0, r0
   2961e:	e7fa      	b.n	29616 <__ascii_mbtowc+0x1a>

00029620 <memcpy>:
   29620:	2300      	movs	r3, #0
   29622:	b510      	push	{r4, lr}
   29624:	429a      	cmp	r2, r3
   29626:	d100      	bne.n	2962a <memcpy+0xa>
   29628:	bd10      	pop	{r4, pc}
   2962a:	5ccc      	ldrb	r4, [r1, r3]
   2962c:	54c4      	strb	r4, [r0, r3]
   2962e:	3301      	adds	r3, #1
   29630:	e7f8      	b.n	29624 <memcpy+0x4>

00029632 <memmove>:
   29632:	b510      	push	{r4, lr}
   29634:	4288      	cmp	r0, r1
   29636:	d902      	bls.n	2963e <memmove+0xc>
   29638:	188b      	adds	r3, r1, r2
   2963a:	4298      	cmp	r0, r3
   2963c:	d308      	bcc.n	29650 <memmove+0x1e>
   2963e:	2300      	movs	r3, #0
   29640:	429a      	cmp	r2, r3
   29642:	d007      	beq.n	29654 <memmove+0x22>
   29644:	5ccc      	ldrb	r4, [r1, r3]
   29646:	54c4      	strb	r4, [r0, r3]
   29648:	3301      	adds	r3, #1
   2964a:	e7f9      	b.n	29640 <memmove+0xe>
   2964c:	5c8b      	ldrb	r3, [r1, r2]
   2964e:	5483      	strb	r3, [r0, r2]
   29650:	3a01      	subs	r2, #1
   29652:	d2fb      	bcs.n	2964c <memmove+0x1a>
   29654:	bd10      	pop	{r4, pc}

00029656 <memset>:
   29656:	0003      	movs	r3, r0
   29658:	1882      	adds	r2, r0, r2
   2965a:	4293      	cmp	r3, r2
   2965c:	d100      	bne.n	29660 <memset+0xa>
   2965e:	4770      	bx	lr
   29660:	7019      	strb	r1, [r3, #0]
   29662:	3301      	adds	r3, #1
   29664:	e7f9      	b.n	2965a <memset+0x4>

00029666 <_calloc_r>:
   29666:	434a      	muls	r2, r1
   29668:	b570      	push	{r4, r5, r6, lr}
   2966a:	0011      	movs	r1, r2
   2966c:	0014      	movs	r4, r2
   2966e:	f000 f853 	bl	29718 <_malloc_r>
   29672:	1e05      	subs	r5, r0, #0
   29674:	d003      	beq.n	2967e <_calloc_r+0x18>
   29676:	0022      	movs	r2, r4
   29678:	2100      	movs	r1, #0
   2967a:	f7ff ffec 	bl	29656 <memset>
   2967e:	0028      	movs	r0, r5
   29680:	bd70      	pop	{r4, r5, r6, pc}
	...

00029684 <_free_r>:
   29684:	b570      	push	{r4, r5, r6, lr}
   29686:	0005      	movs	r5, r0
   29688:	2900      	cmp	r1, #0
   2968a:	d010      	beq.n	296ae <_free_r+0x2a>
   2968c:	1f0c      	subs	r4, r1, #4
   2968e:	6823      	ldr	r3, [r4, #0]
   29690:	2b00      	cmp	r3, #0
   29692:	da00      	bge.n	29696 <_free_r+0x12>
   29694:	18e4      	adds	r4, r4, r3
   29696:	0028      	movs	r0, r5
   29698:	f000 fab4 	bl	29c04 <__malloc_lock>
   2969c:	4a1d      	ldr	r2, [pc, #116]	; (29714 <_free_r+0x90>)
   2969e:	6813      	ldr	r3, [r2, #0]
   296a0:	2b00      	cmp	r3, #0
   296a2:	d105      	bne.n	296b0 <_free_r+0x2c>
   296a4:	6063      	str	r3, [r4, #4]
   296a6:	6014      	str	r4, [r2, #0]
   296a8:	0028      	movs	r0, r5
   296aa:	f000 faac 	bl	29c06 <__malloc_unlock>
   296ae:	bd70      	pop	{r4, r5, r6, pc}
   296b0:	42a3      	cmp	r3, r4
   296b2:	d909      	bls.n	296c8 <_free_r+0x44>
   296b4:	6821      	ldr	r1, [r4, #0]
   296b6:	1860      	adds	r0, r4, r1
   296b8:	4283      	cmp	r3, r0
   296ba:	d1f3      	bne.n	296a4 <_free_r+0x20>
   296bc:	6818      	ldr	r0, [r3, #0]
   296be:	685b      	ldr	r3, [r3, #4]
   296c0:	1841      	adds	r1, r0, r1
   296c2:	6021      	str	r1, [r4, #0]
   296c4:	e7ee      	b.n	296a4 <_free_r+0x20>
   296c6:	0013      	movs	r3, r2
   296c8:	685a      	ldr	r2, [r3, #4]
   296ca:	2a00      	cmp	r2, #0
   296cc:	d001      	beq.n	296d2 <_free_r+0x4e>
   296ce:	42a2      	cmp	r2, r4
   296d0:	d9f9      	bls.n	296c6 <_free_r+0x42>
   296d2:	6819      	ldr	r1, [r3, #0]
   296d4:	1858      	adds	r0, r3, r1
   296d6:	42a0      	cmp	r0, r4
   296d8:	d10b      	bne.n	296f2 <_free_r+0x6e>
   296da:	6820      	ldr	r0, [r4, #0]
   296dc:	1809      	adds	r1, r1, r0
   296de:	1858      	adds	r0, r3, r1
   296e0:	6019      	str	r1, [r3, #0]
   296e2:	4282      	cmp	r2, r0
   296e4:	d1e0      	bne.n	296a8 <_free_r+0x24>
   296e6:	6810      	ldr	r0, [r2, #0]
   296e8:	6852      	ldr	r2, [r2, #4]
   296ea:	1841      	adds	r1, r0, r1
   296ec:	6019      	str	r1, [r3, #0]
   296ee:	605a      	str	r2, [r3, #4]
   296f0:	e7da      	b.n	296a8 <_free_r+0x24>
   296f2:	42a0      	cmp	r0, r4
   296f4:	d902      	bls.n	296fc <_free_r+0x78>
   296f6:	230c      	movs	r3, #12
   296f8:	602b      	str	r3, [r5, #0]
   296fa:	e7d5      	b.n	296a8 <_free_r+0x24>
   296fc:	6821      	ldr	r1, [r4, #0]
   296fe:	1860      	adds	r0, r4, r1
   29700:	4282      	cmp	r2, r0
   29702:	d103      	bne.n	2970c <_free_r+0x88>
   29704:	6810      	ldr	r0, [r2, #0]
   29706:	6852      	ldr	r2, [r2, #4]
   29708:	1841      	adds	r1, r0, r1
   2970a:	6021      	str	r1, [r4, #0]
   2970c:	6062      	str	r2, [r4, #4]
   2970e:	605c      	str	r4, [r3, #4]
   29710:	e7ca      	b.n	296a8 <_free_r+0x24>
   29712:	46c0      	nop			; (mov r8, r8)
   29714:	20000714 	.word	0x20000714

00029718 <_malloc_r>:
   29718:	2303      	movs	r3, #3
   2971a:	b570      	push	{r4, r5, r6, lr}
   2971c:	1ccd      	adds	r5, r1, #3
   2971e:	439d      	bics	r5, r3
   29720:	3508      	adds	r5, #8
   29722:	0006      	movs	r6, r0
   29724:	2d0c      	cmp	r5, #12
   29726:	d21e      	bcs.n	29766 <_malloc_r+0x4e>
   29728:	250c      	movs	r5, #12
   2972a:	42a9      	cmp	r1, r5
   2972c:	d81d      	bhi.n	2976a <_malloc_r+0x52>
   2972e:	0030      	movs	r0, r6
   29730:	f000 fa68 	bl	29c04 <__malloc_lock>
   29734:	4a25      	ldr	r2, [pc, #148]	; (297cc <_malloc_r+0xb4>)
   29736:	6814      	ldr	r4, [r2, #0]
   29738:	0021      	movs	r1, r4
   2973a:	2900      	cmp	r1, #0
   2973c:	d119      	bne.n	29772 <_malloc_r+0x5a>
   2973e:	4c24      	ldr	r4, [pc, #144]	; (297d0 <_malloc_r+0xb8>)
   29740:	6823      	ldr	r3, [r4, #0]
   29742:	2b00      	cmp	r3, #0
   29744:	d103      	bne.n	2974e <_malloc_r+0x36>
   29746:	0030      	movs	r0, r6
   29748:	f000 f844 	bl	297d4 <_sbrk_r>
   2974c:	6020      	str	r0, [r4, #0]
   2974e:	0029      	movs	r1, r5
   29750:	0030      	movs	r0, r6
   29752:	f000 f83f 	bl	297d4 <_sbrk_r>
   29756:	1c43      	adds	r3, r0, #1
   29758:	d12c      	bne.n	297b4 <_malloc_r+0x9c>
   2975a:	230c      	movs	r3, #12
   2975c:	0030      	movs	r0, r6
   2975e:	6033      	str	r3, [r6, #0]
   29760:	f000 fa51 	bl	29c06 <__malloc_unlock>
   29764:	e003      	b.n	2976e <_malloc_r+0x56>
   29766:	2d00      	cmp	r5, #0
   29768:	dadf      	bge.n	2972a <_malloc_r+0x12>
   2976a:	230c      	movs	r3, #12
   2976c:	6033      	str	r3, [r6, #0]
   2976e:	2000      	movs	r0, #0
   29770:	bd70      	pop	{r4, r5, r6, pc}
   29772:	680b      	ldr	r3, [r1, #0]
   29774:	1b5b      	subs	r3, r3, r5
   29776:	d41a      	bmi.n	297ae <_malloc_r+0x96>
   29778:	2b0b      	cmp	r3, #11
   2977a:	d903      	bls.n	29784 <_malloc_r+0x6c>
   2977c:	600b      	str	r3, [r1, #0]
   2977e:	18cc      	adds	r4, r1, r3
   29780:	6025      	str	r5, [r4, #0]
   29782:	e003      	b.n	2978c <_malloc_r+0x74>
   29784:	428c      	cmp	r4, r1
   29786:	d10e      	bne.n	297a6 <_malloc_r+0x8e>
   29788:	6863      	ldr	r3, [r4, #4]
   2978a:	6013      	str	r3, [r2, #0]
   2978c:	0030      	movs	r0, r6
   2978e:	f000 fa3a 	bl	29c06 <__malloc_unlock>
   29792:	0020      	movs	r0, r4
   29794:	2207      	movs	r2, #7
   29796:	300b      	adds	r0, #11
   29798:	1d23      	adds	r3, r4, #4
   2979a:	4390      	bics	r0, r2
   2979c:	1ac3      	subs	r3, r0, r3
   2979e:	d0e7      	beq.n	29770 <_malloc_r+0x58>
   297a0:	425a      	negs	r2, r3
   297a2:	50e2      	str	r2, [r4, r3]
   297a4:	e7e4      	b.n	29770 <_malloc_r+0x58>
   297a6:	684b      	ldr	r3, [r1, #4]
   297a8:	6063      	str	r3, [r4, #4]
   297aa:	000c      	movs	r4, r1
   297ac:	e7ee      	b.n	2978c <_malloc_r+0x74>
   297ae:	000c      	movs	r4, r1
   297b0:	6849      	ldr	r1, [r1, #4]
   297b2:	e7c2      	b.n	2973a <_malloc_r+0x22>
   297b4:	2303      	movs	r3, #3
   297b6:	1cc4      	adds	r4, r0, #3
   297b8:	439c      	bics	r4, r3
   297ba:	42a0      	cmp	r0, r4
   297bc:	d0e0      	beq.n	29780 <_malloc_r+0x68>
   297be:	1a21      	subs	r1, r4, r0
   297c0:	0030      	movs	r0, r6
   297c2:	f000 f807 	bl	297d4 <_sbrk_r>
   297c6:	1c43      	adds	r3, r0, #1
   297c8:	d1da      	bne.n	29780 <_malloc_r+0x68>
   297ca:	e7c6      	b.n	2975a <_malloc_r+0x42>
   297cc:	20000714 	.word	0x20000714
   297d0:	20000718 	.word	0x20000718

000297d4 <_sbrk_r>:
   297d4:	2300      	movs	r3, #0
   297d6:	b570      	push	{r4, r5, r6, lr}
   297d8:	4c06      	ldr	r4, [pc, #24]	; (297f4 <_sbrk_r+0x20>)
   297da:	0005      	movs	r5, r0
   297dc:	0008      	movs	r0, r1
   297de:	6023      	str	r3, [r4, #0]
   297e0:	f7fb ff5a 	bl	25698 <_sbrk>
   297e4:	1c43      	adds	r3, r0, #1
   297e6:	d103      	bne.n	297f0 <_sbrk_r+0x1c>
   297e8:	6823      	ldr	r3, [r4, #0]
   297ea:	2b00      	cmp	r3, #0
   297ec:	d000      	beq.n	297f0 <_sbrk_r+0x1c>
   297ee:	602b      	str	r3, [r5, #0]
   297f0:	bd70      	pop	{r4, r5, r6, pc}
   297f2:	46c0      	nop			; (mov r8, r8)
   297f4:	20001000 	.word	0x20001000

000297f8 <sniprintf>:
   297f8:	b40c      	push	{r2, r3}
   297fa:	b530      	push	{r4, r5, lr}
   297fc:	4b16      	ldr	r3, [pc, #88]	; (29858 <sniprintf+0x60>)
   297fe:	b09d      	sub	sp, #116	; 0x74
   29800:	1e0c      	subs	r4, r1, #0
   29802:	681d      	ldr	r5, [r3, #0]
   29804:	da08      	bge.n	29818 <sniprintf+0x20>
   29806:	238b      	movs	r3, #139	; 0x8b
   29808:	2001      	movs	r0, #1
   2980a:	602b      	str	r3, [r5, #0]
   2980c:	4240      	negs	r0, r0
   2980e:	b01d      	add	sp, #116	; 0x74
   29810:	bc30      	pop	{r4, r5}
   29812:	bc08      	pop	{r3}
   29814:	b002      	add	sp, #8
   29816:	4718      	bx	r3
   29818:	2382      	movs	r3, #130	; 0x82
   2981a:	a902      	add	r1, sp, #8
   2981c:	009b      	lsls	r3, r3, #2
   2981e:	818b      	strh	r3, [r1, #12]
   29820:	2300      	movs	r3, #0
   29822:	9002      	str	r0, [sp, #8]
   29824:	6108      	str	r0, [r1, #16]
   29826:	429c      	cmp	r4, r3
   29828:	d000      	beq.n	2982c <sniprintf+0x34>
   2982a:	1e63      	subs	r3, r4, #1
   2982c:	608b      	str	r3, [r1, #8]
   2982e:	614b      	str	r3, [r1, #20]
   29830:	2301      	movs	r3, #1
   29832:	425b      	negs	r3, r3
   29834:	81cb      	strh	r3, [r1, #14]
   29836:	9a20      	ldr	r2, [sp, #128]	; 0x80
   29838:	ab21      	add	r3, sp, #132	; 0x84
   2983a:	0028      	movs	r0, r5
   2983c:	9301      	str	r3, [sp, #4]
   2983e:	f000 fa45 	bl	29ccc <_svfiprintf_r>
   29842:	1c43      	adds	r3, r0, #1
   29844:	da01      	bge.n	2984a <sniprintf+0x52>
   29846:	238b      	movs	r3, #139	; 0x8b
   29848:	602b      	str	r3, [r5, #0]
   2984a:	2c00      	cmp	r4, #0
   2984c:	d0df      	beq.n	2980e <sniprintf+0x16>
   2984e:	2300      	movs	r3, #0
   29850:	9a02      	ldr	r2, [sp, #8]
   29852:	7013      	strb	r3, [r2, #0]
   29854:	e7db      	b.n	2980e <sniprintf+0x16>
   29856:	46c0      	nop			; (mov r8, r8)
   29858:	20000034 	.word	0x20000034

0002985c <siprintf>:
   2985c:	b40e      	push	{r1, r2, r3}
   2985e:	b510      	push	{r4, lr}
   29860:	b09d      	sub	sp, #116	; 0x74
   29862:	a902      	add	r1, sp, #8
   29864:	9002      	str	r0, [sp, #8]
   29866:	6108      	str	r0, [r1, #16]
   29868:	480b      	ldr	r0, [pc, #44]	; (29898 <siprintf+0x3c>)
   2986a:	2482      	movs	r4, #130	; 0x82
   2986c:	6088      	str	r0, [r1, #8]
   2986e:	6148      	str	r0, [r1, #20]
   29870:	2001      	movs	r0, #1
   29872:	4240      	negs	r0, r0
   29874:	ab1f      	add	r3, sp, #124	; 0x7c
   29876:	81c8      	strh	r0, [r1, #14]
   29878:	4808      	ldr	r0, [pc, #32]	; (2989c <siprintf+0x40>)
   2987a:	cb04      	ldmia	r3!, {r2}
   2987c:	00a4      	lsls	r4, r4, #2
   2987e:	6800      	ldr	r0, [r0, #0]
   29880:	9301      	str	r3, [sp, #4]
   29882:	818c      	strh	r4, [r1, #12]
   29884:	f000 fa22 	bl	29ccc <_svfiprintf_r>
   29888:	2300      	movs	r3, #0
   2988a:	9a02      	ldr	r2, [sp, #8]
   2988c:	7013      	strb	r3, [r2, #0]
   2988e:	b01d      	add	sp, #116	; 0x74
   29890:	bc10      	pop	{r4}
   29892:	bc08      	pop	{r3}
   29894:	b003      	add	sp, #12
   29896:	4718      	bx	r3
   29898:	7fffffff 	.word	0x7fffffff
   2989c:	20000034 	.word	0x20000034

000298a0 <strcat>:
   298a0:	0002      	movs	r2, r0
   298a2:	b510      	push	{r4, lr}
   298a4:	7813      	ldrb	r3, [r2, #0]
   298a6:	2b00      	cmp	r3, #0
   298a8:	d105      	bne.n	298b6 <strcat+0x16>
   298aa:	5ccc      	ldrb	r4, [r1, r3]
   298ac:	54d4      	strb	r4, [r2, r3]
   298ae:	3301      	adds	r3, #1
   298b0:	2c00      	cmp	r4, #0
   298b2:	d1fa      	bne.n	298aa <strcat+0xa>
   298b4:	bd10      	pop	{r4, pc}
   298b6:	3201      	adds	r2, #1
   298b8:	e7f4      	b.n	298a4 <strcat+0x4>

000298ba <strchr>:
   298ba:	b2c9      	uxtb	r1, r1
   298bc:	7803      	ldrb	r3, [r0, #0]
   298be:	2b00      	cmp	r3, #0
   298c0:	d004      	beq.n	298cc <strchr+0x12>
   298c2:	4299      	cmp	r1, r3
   298c4:	d100      	bne.n	298c8 <strchr+0xe>
   298c6:	4770      	bx	lr
   298c8:	3001      	adds	r0, #1
   298ca:	e7f7      	b.n	298bc <strchr+0x2>
   298cc:	424b      	negs	r3, r1
   298ce:	4159      	adcs	r1, r3
   298d0:	4249      	negs	r1, r1
   298d2:	4008      	ands	r0, r1
   298d4:	e7f7      	b.n	298c6 <strchr+0xc>

000298d6 <strcpy>:
   298d6:	1c03      	adds	r3, r0, #0
   298d8:	780a      	ldrb	r2, [r1, #0]
   298da:	3101      	adds	r1, #1
   298dc:	701a      	strb	r2, [r3, #0]
   298de:	3301      	adds	r3, #1
   298e0:	2a00      	cmp	r2, #0
   298e2:	d1f9      	bne.n	298d8 <strcpy+0x2>
   298e4:	4770      	bx	lr

000298e6 <strlen>:
   298e6:	2300      	movs	r3, #0
   298e8:	5cc2      	ldrb	r2, [r0, r3]
   298ea:	3301      	adds	r3, #1
   298ec:	2a00      	cmp	r2, #0
   298ee:	d1fb      	bne.n	298e8 <strlen+0x2>
   298f0:	1e58      	subs	r0, r3, #1
   298f2:	4770      	bx	lr

000298f4 <strncmp>:
   298f4:	2300      	movs	r3, #0
   298f6:	b530      	push	{r4, r5, lr}
   298f8:	429a      	cmp	r2, r3
   298fa:	d00a      	beq.n	29912 <strncmp+0x1e>
   298fc:	3a01      	subs	r2, #1
   298fe:	5cc4      	ldrb	r4, [r0, r3]
   29900:	5ccd      	ldrb	r5, [r1, r3]
   29902:	42ac      	cmp	r4, r5
   29904:	d104      	bne.n	29910 <strncmp+0x1c>
   29906:	429a      	cmp	r2, r3
   29908:	d002      	beq.n	29910 <strncmp+0x1c>
   2990a:	3301      	adds	r3, #1
   2990c:	2c00      	cmp	r4, #0
   2990e:	d1f6      	bne.n	298fe <strncmp+0xa>
   29910:	1b63      	subs	r3, r4, r5
   29912:	0018      	movs	r0, r3
   29914:	bd30      	pop	{r4, r5, pc}

00029916 <strstr>:
   29916:	b510      	push	{r4, lr}
   29918:	0002      	movs	r2, r0
   2991a:	7800      	ldrb	r0, [r0, #0]
   2991c:	2800      	cmp	r0, #0
   2991e:	d104      	bne.n	2992a <strstr+0x14>
   29920:	7809      	ldrb	r1, [r1, #0]
   29922:	2900      	cmp	r1, #0
   29924:	d00d      	beq.n	29942 <strstr+0x2c>
   29926:	bd10      	pop	{r4, pc}
   29928:	3201      	adds	r2, #1
   2992a:	7810      	ldrb	r0, [r2, #0]
   2992c:	2800      	cmp	r0, #0
   2992e:	d0fa      	beq.n	29926 <strstr+0x10>
   29930:	2300      	movs	r3, #0
   29932:	5cc8      	ldrb	r0, [r1, r3]
   29934:	2800      	cmp	r0, #0
   29936:	d004      	beq.n	29942 <strstr+0x2c>
   29938:	5cd4      	ldrb	r4, [r2, r3]
   2993a:	4284      	cmp	r4, r0
   2993c:	d1f4      	bne.n	29928 <strstr+0x12>
   2993e:	3301      	adds	r3, #1
   29940:	e7f7      	b.n	29932 <strstr+0x1c>
   29942:	0010      	movs	r0, r2
   29944:	e7ef      	b.n	29926 <strstr+0x10>
	...

00029948 <strtok>:
   29948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2994a:	4b12      	ldr	r3, [pc, #72]	; (29994 <strtok+0x4c>)
   2994c:	0006      	movs	r6, r0
   2994e:	681d      	ldr	r5, [r3, #0]
   29950:	000f      	movs	r7, r1
   29952:	6dac      	ldr	r4, [r5, #88]	; 0x58
   29954:	2c00      	cmp	r4, #0
   29956:	d116      	bne.n	29986 <strtok+0x3e>
   29958:	2050      	movs	r0, #80	; 0x50
   2995a:	f7ff fe3b 	bl	295d4 <malloc>
   2995e:	65a8      	str	r0, [r5, #88]	; 0x58
   29960:	6004      	str	r4, [r0, #0]
   29962:	6044      	str	r4, [r0, #4]
   29964:	6084      	str	r4, [r0, #8]
   29966:	60c4      	str	r4, [r0, #12]
   29968:	6104      	str	r4, [r0, #16]
   2996a:	6144      	str	r4, [r0, #20]
   2996c:	6184      	str	r4, [r0, #24]
   2996e:	6284      	str	r4, [r0, #40]	; 0x28
   29970:	62c4      	str	r4, [r0, #44]	; 0x2c
   29972:	6304      	str	r4, [r0, #48]	; 0x30
   29974:	6344      	str	r4, [r0, #52]	; 0x34
   29976:	6384      	str	r4, [r0, #56]	; 0x38
   29978:	63c4      	str	r4, [r0, #60]	; 0x3c
   2997a:	6404      	str	r4, [r0, #64]	; 0x40
   2997c:	6444      	str	r4, [r0, #68]	; 0x44
   2997e:	6484      	str	r4, [r0, #72]	; 0x48
   29980:	64c4      	str	r4, [r0, #76]	; 0x4c
   29982:	7704      	strb	r4, [r0, #28]
   29984:	6244      	str	r4, [r0, #36]	; 0x24
   29986:	6daa      	ldr	r2, [r5, #88]	; 0x58
   29988:	0039      	movs	r1, r7
   2998a:	0030      	movs	r0, r6
   2998c:	2301      	movs	r3, #1
   2998e:	f000 f803 	bl	29998 <__strtok_r>
   29992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29994:	20000034 	.word	0x20000034

00029998 <__strtok_r>:
   29998:	b5f0      	push	{r4, r5, r6, r7, lr}
   2999a:	2800      	cmp	r0, #0
   2999c:	d104      	bne.n	299a8 <__strtok_r+0x10>
   2999e:	6810      	ldr	r0, [r2, #0]
   299a0:	2800      	cmp	r0, #0
   299a2:	d101      	bne.n	299a8 <__strtok_r+0x10>
   299a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   299a6:	0020      	movs	r0, r4
   299a8:	000e      	movs	r6, r1
   299aa:	7805      	ldrb	r5, [r0, #0]
   299ac:	1c44      	adds	r4, r0, #1
   299ae:	7837      	ldrb	r7, [r6, #0]
   299b0:	2f00      	cmp	r7, #0
   299b2:	d104      	bne.n	299be <__strtok_r+0x26>
   299b4:	2d00      	cmp	r5, #0
   299b6:	d110      	bne.n	299da <__strtok_r+0x42>
   299b8:	6015      	str	r5, [r2, #0]
   299ba:	0028      	movs	r0, r5
   299bc:	e7f2      	b.n	299a4 <__strtok_r+0xc>
   299be:	3601      	adds	r6, #1
   299c0:	42bd      	cmp	r5, r7
   299c2:	d1f4      	bne.n	299ae <__strtok_r+0x16>
   299c4:	2b00      	cmp	r3, #0
   299c6:	d1ee      	bne.n	299a6 <__strtok_r+0xe>
   299c8:	6014      	str	r4, [r2, #0]
   299ca:	7003      	strb	r3, [r0, #0]
   299cc:	e7ea      	b.n	299a4 <__strtok_r+0xc>
   299ce:	0033      	movs	r3, r6
   299d0:	e00e      	b.n	299f0 <__strtok_r+0x58>
   299d2:	3501      	adds	r5, #1
   299d4:	001c      	movs	r4, r3
   299d6:	2f00      	cmp	r7, #0
   299d8:	d102      	bne.n	299e0 <__strtok_r+0x48>
   299da:	000d      	movs	r5, r1
   299dc:	7826      	ldrb	r6, [r4, #0]
   299de:	1c63      	adds	r3, r4, #1
   299e0:	782f      	ldrb	r7, [r5, #0]
   299e2:	42be      	cmp	r6, r7
   299e4:	d1f5      	bne.n	299d2 <__strtok_r+0x3a>
   299e6:	2e00      	cmp	r6, #0
   299e8:	d0f1      	beq.n	299ce <__strtok_r+0x36>
   299ea:	2400      	movs	r4, #0
   299ec:	1e59      	subs	r1, r3, #1
   299ee:	700c      	strb	r4, [r1, #0]
   299f0:	6013      	str	r3, [r2, #0]
   299f2:	e7d7      	b.n	299a4 <__strtok_r+0xc>

000299f4 <_strtol_l.isra.0>:
   299f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   299f6:	001f      	movs	r7, r3
   299f8:	000e      	movs	r6, r1
   299fa:	b087      	sub	sp, #28
   299fc:	9005      	str	r0, [sp, #20]
   299fe:	9103      	str	r1, [sp, #12]
   29a00:	9202      	str	r2, [sp, #8]
   29a02:	980c      	ldr	r0, [sp, #48]	; 0x30
   29a04:	7834      	ldrb	r4, [r6, #0]
   29a06:	f7ff fdd3 	bl	295b0 <__locale_ctype_ptr_l>
   29a0a:	2208      	movs	r2, #8
   29a0c:	1900      	adds	r0, r0, r4
   29a0e:	7843      	ldrb	r3, [r0, #1]
   29a10:	1c75      	adds	r5, r6, #1
   29a12:	4013      	ands	r3, r2
   29a14:	d10c      	bne.n	29a30 <_strtol_l.isra.0+0x3c>
   29a16:	2c2d      	cmp	r4, #45	; 0x2d
   29a18:	d10c      	bne.n	29a34 <_strtol_l.isra.0+0x40>
   29a1a:	3301      	adds	r3, #1
   29a1c:	782c      	ldrb	r4, [r5, #0]
   29a1e:	9301      	str	r3, [sp, #4]
   29a20:	1cb5      	adds	r5, r6, #2
   29a22:	2f00      	cmp	r7, #0
   29a24:	d00c      	beq.n	29a40 <_strtol_l.isra.0+0x4c>
   29a26:	2f10      	cmp	r7, #16
   29a28:	d114      	bne.n	29a54 <_strtol_l.isra.0+0x60>
   29a2a:	2c30      	cmp	r4, #48	; 0x30
   29a2c:	d00a      	beq.n	29a44 <_strtol_l.isra.0+0x50>
   29a2e:	e011      	b.n	29a54 <_strtol_l.isra.0+0x60>
   29a30:	002e      	movs	r6, r5
   29a32:	e7e6      	b.n	29a02 <_strtol_l.isra.0+0xe>
   29a34:	9301      	str	r3, [sp, #4]
   29a36:	2c2b      	cmp	r4, #43	; 0x2b
   29a38:	d1f3      	bne.n	29a22 <_strtol_l.isra.0+0x2e>
   29a3a:	782c      	ldrb	r4, [r5, #0]
   29a3c:	1cb5      	adds	r5, r6, #2
   29a3e:	e7f0      	b.n	29a22 <_strtol_l.isra.0+0x2e>
   29a40:	2c30      	cmp	r4, #48	; 0x30
   29a42:	d12f      	bne.n	29aa4 <_strtol_l.isra.0+0xb0>
   29a44:	2220      	movs	r2, #32
   29a46:	782b      	ldrb	r3, [r5, #0]
   29a48:	4393      	bics	r3, r2
   29a4a:	2b58      	cmp	r3, #88	; 0x58
   29a4c:	d151      	bne.n	29af2 <_strtol_l.isra.0+0xfe>
   29a4e:	2710      	movs	r7, #16
   29a50:	786c      	ldrb	r4, [r5, #1]
   29a52:	3502      	adds	r5, #2
   29a54:	9b01      	ldr	r3, [sp, #4]
   29a56:	4a29      	ldr	r2, [pc, #164]	; (29afc <_strtol_l.isra.0+0x108>)
   29a58:	0039      	movs	r1, r7
   29a5a:	189e      	adds	r6, r3, r2
   29a5c:	0030      	movs	r0, r6
   29a5e:	f7fd fa45 	bl	26eec <__aeabi_uidivmod>
   29a62:	0030      	movs	r0, r6
   29a64:	9104      	str	r1, [sp, #16]
   29a66:	0039      	movs	r1, r7
   29a68:	f7fd f9ba 	bl	26de0 <__udivsi3>
   29a6c:	2101      	movs	r1, #1
   29a6e:	2300      	movs	r3, #0
   29a70:	4249      	negs	r1, r1
   29a72:	0002      	movs	r2, r0
   29a74:	468c      	mov	ip, r1
   29a76:	0018      	movs	r0, r3
   29a78:	0021      	movs	r1, r4
   29a7a:	3930      	subs	r1, #48	; 0x30
   29a7c:	2909      	cmp	r1, #9
   29a7e:	d813      	bhi.n	29aa8 <_strtol_l.isra.0+0xb4>
   29a80:	000c      	movs	r4, r1
   29a82:	42a7      	cmp	r7, r4
   29a84:	dd1c      	ble.n	29ac0 <_strtol_l.isra.0+0xcc>
   29a86:	1c59      	adds	r1, r3, #1
   29a88:	d009      	beq.n	29a9e <_strtol_l.isra.0+0xaa>
   29a8a:	4663      	mov	r3, ip
   29a8c:	4282      	cmp	r2, r0
   29a8e:	d306      	bcc.n	29a9e <_strtol_l.isra.0+0xaa>
   29a90:	d102      	bne.n	29a98 <_strtol_l.isra.0+0xa4>
   29a92:	9904      	ldr	r1, [sp, #16]
   29a94:	42a1      	cmp	r1, r4
   29a96:	db02      	blt.n	29a9e <_strtol_l.isra.0+0xaa>
   29a98:	2301      	movs	r3, #1
   29a9a:	4378      	muls	r0, r7
   29a9c:	1820      	adds	r0, r4, r0
   29a9e:	782c      	ldrb	r4, [r5, #0]
   29aa0:	3501      	adds	r5, #1
   29aa2:	e7e9      	b.n	29a78 <_strtol_l.isra.0+0x84>
   29aa4:	270a      	movs	r7, #10
   29aa6:	e7d5      	b.n	29a54 <_strtol_l.isra.0+0x60>
   29aa8:	0021      	movs	r1, r4
   29aaa:	3941      	subs	r1, #65	; 0x41
   29aac:	2919      	cmp	r1, #25
   29aae:	d801      	bhi.n	29ab4 <_strtol_l.isra.0+0xc0>
   29ab0:	3c37      	subs	r4, #55	; 0x37
   29ab2:	e7e6      	b.n	29a82 <_strtol_l.isra.0+0x8e>
   29ab4:	0021      	movs	r1, r4
   29ab6:	3961      	subs	r1, #97	; 0x61
   29ab8:	2919      	cmp	r1, #25
   29aba:	d801      	bhi.n	29ac0 <_strtol_l.isra.0+0xcc>
   29abc:	3c57      	subs	r4, #87	; 0x57
   29abe:	e7e0      	b.n	29a82 <_strtol_l.isra.0+0x8e>
   29ac0:	1c5a      	adds	r2, r3, #1
   29ac2:	d108      	bne.n	29ad6 <_strtol_l.isra.0+0xe2>
   29ac4:	9a05      	ldr	r2, [sp, #20]
   29ac6:	3323      	adds	r3, #35	; 0x23
   29ac8:	6013      	str	r3, [r2, #0]
   29aca:	9b02      	ldr	r3, [sp, #8]
   29acc:	0030      	movs	r0, r6
   29ace:	2b00      	cmp	r3, #0
   29ad0:	d10b      	bne.n	29aea <_strtol_l.isra.0+0xf6>
   29ad2:	b007      	add	sp, #28
   29ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29ad6:	9a01      	ldr	r2, [sp, #4]
   29ad8:	2a00      	cmp	r2, #0
   29ada:	d000      	beq.n	29ade <_strtol_l.isra.0+0xea>
   29adc:	4240      	negs	r0, r0
   29ade:	9a02      	ldr	r2, [sp, #8]
   29ae0:	2a00      	cmp	r2, #0
   29ae2:	d0f6      	beq.n	29ad2 <_strtol_l.isra.0+0xde>
   29ae4:	9a03      	ldr	r2, [sp, #12]
   29ae6:	2b00      	cmp	r3, #0
   29ae8:	d000      	beq.n	29aec <_strtol_l.isra.0+0xf8>
   29aea:	1e6a      	subs	r2, r5, #1
   29aec:	9b02      	ldr	r3, [sp, #8]
   29aee:	601a      	str	r2, [r3, #0]
   29af0:	e7ef      	b.n	29ad2 <_strtol_l.isra.0+0xde>
   29af2:	2430      	movs	r4, #48	; 0x30
   29af4:	2f00      	cmp	r7, #0
   29af6:	d1ad      	bne.n	29a54 <_strtol_l.isra.0+0x60>
   29af8:	3708      	adds	r7, #8
   29afa:	e7ab      	b.n	29a54 <_strtol_l.isra.0+0x60>
   29afc:	7fffffff 	.word	0x7fffffff

00029b00 <strtol>:
   29b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29b02:	0013      	movs	r3, r2
   29b04:	4a06      	ldr	r2, [pc, #24]	; (29b20 <strtol+0x20>)
   29b06:	0005      	movs	r5, r0
   29b08:	6810      	ldr	r0, [r2, #0]
   29b0a:	6a04      	ldr	r4, [r0, #32]
   29b0c:	2c00      	cmp	r4, #0
   29b0e:	d100      	bne.n	29b12 <strtol+0x12>
   29b10:	4c04      	ldr	r4, [pc, #16]	; (29b24 <strtol+0x24>)
   29b12:	000a      	movs	r2, r1
   29b14:	9400      	str	r4, [sp, #0]
   29b16:	0029      	movs	r1, r5
   29b18:	f7ff ff6c 	bl	299f4 <_strtol_l.isra.0>
   29b1c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   29b1e:	46c0      	nop			; (mov r8, r8)
   29b20:	20000034 	.word	0x20000034
   29b24:	20000098 	.word	0x20000098

00029b28 <__utoa>:
   29b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   29b2a:	0017      	movs	r7, r2
   29b2c:	b08f      	sub	sp, #60	; 0x3c
   29b2e:	2225      	movs	r2, #37	; 0x25
   29b30:	0006      	movs	r6, r0
   29b32:	000d      	movs	r5, r1
   29b34:	a804      	add	r0, sp, #16
   29b36:	4918      	ldr	r1, [pc, #96]	; (29b98 <__utoa+0x70>)
   29b38:	f7ff fd72 	bl	29620 <memcpy>
   29b3c:	aa04      	add	r2, sp, #16
   29b3e:	1ebb      	subs	r3, r7, #2
   29b40:	2400      	movs	r4, #0
   29b42:	9203      	str	r2, [sp, #12]
   29b44:	2b22      	cmp	r3, #34	; 0x22
   29b46:	d905      	bls.n	29b54 <__utoa+0x2c>
   29b48:	702c      	strb	r4, [r5, #0]
   29b4a:	0025      	movs	r5, r4
   29b4c:	0028      	movs	r0, r5
   29b4e:	b00f      	add	sp, #60	; 0x3c
   29b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29b52:	9c01      	ldr	r4, [sp, #4]
   29b54:	1c63      	adds	r3, r4, #1
   29b56:	9301      	str	r3, [sp, #4]
   29b58:	18eb      	adds	r3, r5, r3
   29b5a:	9300      	str	r3, [sp, #0]
   29b5c:	0030      	movs	r0, r6
   29b5e:	3b01      	subs	r3, #1
   29b60:	0039      	movs	r1, r7
   29b62:	9302      	str	r3, [sp, #8]
   29b64:	f7fd f9c2 	bl	26eec <__aeabi_uidivmod>
   29b68:	9b03      	ldr	r3, [sp, #12]
   29b6a:	9a02      	ldr	r2, [sp, #8]
   29b6c:	5c5b      	ldrb	r3, [r3, r1]
   29b6e:	0030      	movs	r0, r6
   29b70:	7013      	strb	r3, [r2, #0]
   29b72:	0039      	movs	r1, r7
   29b74:	f7fd f934 	bl	26de0 <__udivsi3>
   29b78:	1e06      	subs	r6, r0, #0
   29b7a:	d1ea      	bne.n	29b52 <__utoa+0x2a>
   29b7c:	9b00      	ldr	r3, [sp, #0]
   29b7e:	7018      	strb	r0, [r3, #0]
   29b80:	002b      	movs	r3, r5
   29b82:	1b5a      	subs	r2, r3, r5
   29b84:	4294      	cmp	r4, r2
   29b86:	dde1      	ble.n	29b4c <__utoa+0x24>
   29b88:	781a      	ldrb	r2, [r3, #0]
   29b8a:	5d29      	ldrb	r1, [r5, r4]
   29b8c:	7019      	strb	r1, [r3, #0]
   29b8e:	552a      	strb	r2, [r5, r4]
   29b90:	3301      	adds	r3, #1
   29b92:	3c01      	subs	r4, #1
   29b94:	e7f5      	b.n	29b82 <__utoa+0x5a>
   29b96:	46c0      	nop			; (mov r8, r8)
   29b98:	0002b81a 	.word	0x0002b81a

00029b9c <utoa>:
   29b9c:	b510      	push	{r4, lr}
   29b9e:	f7ff ffc3 	bl	29b28 <__utoa>
   29ba2:	bd10      	pop	{r4, pc}

00029ba4 <_vsiprintf_r>:
   29ba4:	b530      	push	{r4, r5, lr}
   29ba6:	b09b      	sub	sp, #108	; 0x6c
   29ba8:	9100      	str	r1, [sp, #0]
   29baa:	9104      	str	r1, [sp, #16]
   29bac:	4908      	ldr	r1, [pc, #32]	; (29bd0 <_vsiprintf_r+0x2c>)
   29bae:	466d      	mov	r5, sp
   29bb0:	9102      	str	r1, [sp, #8]
   29bb2:	9105      	str	r1, [sp, #20]
   29bb4:	2101      	movs	r1, #1
   29bb6:	2482      	movs	r4, #130	; 0x82
   29bb8:	4249      	negs	r1, r1
   29bba:	81e9      	strh	r1, [r5, #14]
   29bbc:	00a4      	lsls	r4, r4, #2
   29bbe:	4669      	mov	r1, sp
   29bc0:	81ac      	strh	r4, [r5, #12]
   29bc2:	f000 f883 	bl	29ccc <_svfiprintf_r>
   29bc6:	2300      	movs	r3, #0
   29bc8:	9a00      	ldr	r2, [sp, #0]
   29bca:	7013      	strb	r3, [r2, #0]
   29bcc:	b01b      	add	sp, #108	; 0x6c
   29bce:	bd30      	pop	{r4, r5, pc}
   29bd0:	7fffffff 	.word	0x7fffffff

00029bd4 <vsiprintf>:
   29bd4:	b510      	push	{r4, lr}
   29bd6:	0013      	movs	r3, r2
   29bd8:	000a      	movs	r2, r1
   29bda:	0001      	movs	r1, r0
   29bdc:	4802      	ldr	r0, [pc, #8]	; (29be8 <vsiprintf+0x14>)
   29bde:	6800      	ldr	r0, [r0, #0]
   29be0:	f7ff ffe0 	bl	29ba4 <_vsiprintf_r>
   29be4:	bd10      	pop	{r4, pc}
   29be6:	46c0      	nop			; (mov r8, r8)
   29be8:	20000034 	.word	0x20000034

00029bec <__ascii_wctomb>:
   29bec:	1e0b      	subs	r3, r1, #0
   29bee:	d004      	beq.n	29bfa <__ascii_wctomb+0xe>
   29bf0:	2aff      	cmp	r2, #255	; 0xff
   29bf2:	d904      	bls.n	29bfe <__ascii_wctomb+0x12>
   29bf4:	238a      	movs	r3, #138	; 0x8a
   29bf6:	6003      	str	r3, [r0, #0]
   29bf8:	3b8b      	subs	r3, #139	; 0x8b
   29bfa:	0018      	movs	r0, r3
   29bfc:	4770      	bx	lr
   29bfe:	700a      	strb	r2, [r1, #0]
   29c00:	2301      	movs	r3, #1
   29c02:	e7fa      	b.n	29bfa <__ascii_wctomb+0xe>

00029c04 <__malloc_lock>:
   29c04:	4770      	bx	lr

00029c06 <__malloc_unlock>:
   29c06:	4770      	bx	lr

00029c08 <__ssputs_r>:
   29c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   29c0a:	688e      	ldr	r6, [r1, #8]
   29c0c:	b085      	sub	sp, #20
   29c0e:	0007      	movs	r7, r0
   29c10:	000c      	movs	r4, r1
   29c12:	9203      	str	r2, [sp, #12]
   29c14:	9301      	str	r3, [sp, #4]
   29c16:	429e      	cmp	r6, r3
   29c18:	d839      	bhi.n	29c8e <__ssputs_r+0x86>
   29c1a:	2390      	movs	r3, #144	; 0x90
   29c1c:	898a      	ldrh	r2, [r1, #12]
   29c1e:	00db      	lsls	r3, r3, #3
   29c20:	421a      	tst	r2, r3
   29c22:	d034      	beq.n	29c8e <__ssputs_r+0x86>
   29c24:	2503      	movs	r5, #3
   29c26:	6909      	ldr	r1, [r1, #16]
   29c28:	6823      	ldr	r3, [r4, #0]
   29c2a:	1a5b      	subs	r3, r3, r1
   29c2c:	9302      	str	r3, [sp, #8]
   29c2e:	6963      	ldr	r3, [r4, #20]
   29c30:	9802      	ldr	r0, [sp, #8]
   29c32:	435d      	muls	r5, r3
   29c34:	0feb      	lsrs	r3, r5, #31
   29c36:	195d      	adds	r5, r3, r5
   29c38:	9b01      	ldr	r3, [sp, #4]
   29c3a:	106d      	asrs	r5, r5, #1
   29c3c:	3301      	adds	r3, #1
   29c3e:	181b      	adds	r3, r3, r0
   29c40:	42ab      	cmp	r3, r5
   29c42:	d900      	bls.n	29c46 <__ssputs_r+0x3e>
   29c44:	001d      	movs	r5, r3
   29c46:	0553      	lsls	r3, r2, #21
   29c48:	d532      	bpl.n	29cb0 <__ssputs_r+0xa8>
   29c4a:	0029      	movs	r1, r5
   29c4c:	0038      	movs	r0, r7
   29c4e:	f7ff fd63 	bl	29718 <_malloc_r>
   29c52:	1e06      	subs	r6, r0, #0
   29c54:	d109      	bne.n	29c6a <__ssputs_r+0x62>
   29c56:	230c      	movs	r3, #12
   29c58:	603b      	str	r3, [r7, #0]
   29c5a:	2340      	movs	r3, #64	; 0x40
   29c5c:	2001      	movs	r0, #1
   29c5e:	89a2      	ldrh	r2, [r4, #12]
   29c60:	4240      	negs	r0, r0
   29c62:	4313      	orrs	r3, r2
   29c64:	81a3      	strh	r3, [r4, #12]
   29c66:	b005      	add	sp, #20
   29c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29c6a:	9a02      	ldr	r2, [sp, #8]
   29c6c:	6921      	ldr	r1, [r4, #16]
   29c6e:	f7ff fcd7 	bl	29620 <memcpy>
   29c72:	89a3      	ldrh	r3, [r4, #12]
   29c74:	4a14      	ldr	r2, [pc, #80]	; (29cc8 <__ssputs_r+0xc0>)
   29c76:	401a      	ands	r2, r3
   29c78:	2380      	movs	r3, #128	; 0x80
   29c7a:	4313      	orrs	r3, r2
   29c7c:	81a3      	strh	r3, [r4, #12]
   29c7e:	9b02      	ldr	r3, [sp, #8]
   29c80:	6126      	str	r6, [r4, #16]
   29c82:	18f6      	adds	r6, r6, r3
   29c84:	6026      	str	r6, [r4, #0]
   29c86:	6165      	str	r5, [r4, #20]
   29c88:	9e01      	ldr	r6, [sp, #4]
   29c8a:	1aed      	subs	r5, r5, r3
   29c8c:	60a5      	str	r5, [r4, #8]
   29c8e:	9b01      	ldr	r3, [sp, #4]
   29c90:	42b3      	cmp	r3, r6
   29c92:	d200      	bcs.n	29c96 <__ssputs_r+0x8e>
   29c94:	001e      	movs	r6, r3
   29c96:	0032      	movs	r2, r6
   29c98:	9903      	ldr	r1, [sp, #12]
   29c9a:	6820      	ldr	r0, [r4, #0]
   29c9c:	f7ff fcc9 	bl	29632 <memmove>
   29ca0:	68a3      	ldr	r3, [r4, #8]
   29ca2:	2000      	movs	r0, #0
   29ca4:	1b9b      	subs	r3, r3, r6
   29ca6:	60a3      	str	r3, [r4, #8]
   29ca8:	6823      	ldr	r3, [r4, #0]
   29caa:	199e      	adds	r6, r3, r6
   29cac:	6026      	str	r6, [r4, #0]
   29cae:	e7da      	b.n	29c66 <__ssputs_r+0x5e>
   29cb0:	002a      	movs	r2, r5
   29cb2:	0038      	movs	r0, r7
   29cb4:	f000 faa1 	bl	2a1fa <_realloc_r>
   29cb8:	1e06      	subs	r6, r0, #0
   29cba:	d1e0      	bne.n	29c7e <__ssputs_r+0x76>
   29cbc:	6921      	ldr	r1, [r4, #16]
   29cbe:	0038      	movs	r0, r7
   29cc0:	f7ff fce0 	bl	29684 <_free_r>
   29cc4:	e7c7      	b.n	29c56 <__ssputs_r+0x4e>
   29cc6:	46c0      	nop			; (mov r8, r8)
   29cc8:	fffffb7f 	.word	0xfffffb7f

00029ccc <_svfiprintf_r>:
   29ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   29cce:	b09f      	sub	sp, #124	; 0x7c
   29cd0:	9002      	str	r0, [sp, #8]
   29cd2:	9305      	str	r3, [sp, #20]
   29cd4:	898b      	ldrh	r3, [r1, #12]
   29cd6:	000f      	movs	r7, r1
   29cd8:	0016      	movs	r6, r2
   29cda:	061b      	lsls	r3, r3, #24
   29cdc:	d511      	bpl.n	29d02 <_svfiprintf_r+0x36>
   29cde:	690b      	ldr	r3, [r1, #16]
   29ce0:	2b00      	cmp	r3, #0
   29ce2:	d10e      	bne.n	29d02 <_svfiprintf_r+0x36>
   29ce4:	2140      	movs	r1, #64	; 0x40
   29ce6:	f7ff fd17 	bl	29718 <_malloc_r>
   29cea:	6038      	str	r0, [r7, #0]
   29cec:	6138      	str	r0, [r7, #16]
   29cee:	2800      	cmp	r0, #0
   29cf0:	d105      	bne.n	29cfe <_svfiprintf_r+0x32>
   29cf2:	230c      	movs	r3, #12
   29cf4:	9a02      	ldr	r2, [sp, #8]
   29cf6:	3801      	subs	r0, #1
   29cf8:	6013      	str	r3, [r2, #0]
   29cfa:	b01f      	add	sp, #124	; 0x7c
   29cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29cfe:	2340      	movs	r3, #64	; 0x40
   29d00:	617b      	str	r3, [r7, #20]
   29d02:	2300      	movs	r3, #0
   29d04:	ad06      	add	r5, sp, #24
   29d06:	616b      	str	r3, [r5, #20]
   29d08:	3320      	adds	r3, #32
   29d0a:	766b      	strb	r3, [r5, #25]
   29d0c:	3310      	adds	r3, #16
   29d0e:	76ab      	strb	r3, [r5, #26]
   29d10:	0034      	movs	r4, r6
   29d12:	7823      	ldrb	r3, [r4, #0]
   29d14:	2b00      	cmp	r3, #0
   29d16:	d147      	bne.n	29da8 <_svfiprintf_r+0xdc>
   29d18:	1ba3      	subs	r3, r4, r6
   29d1a:	9304      	str	r3, [sp, #16]
   29d1c:	d00d      	beq.n	29d3a <_svfiprintf_r+0x6e>
   29d1e:	1ba3      	subs	r3, r4, r6
   29d20:	0032      	movs	r2, r6
   29d22:	0039      	movs	r1, r7
   29d24:	9802      	ldr	r0, [sp, #8]
   29d26:	f7ff ff6f 	bl	29c08 <__ssputs_r>
   29d2a:	1c43      	adds	r3, r0, #1
   29d2c:	d100      	bne.n	29d30 <_svfiprintf_r+0x64>
   29d2e:	e0b5      	b.n	29e9c <_svfiprintf_r+0x1d0>
   29d30:	696a      	ldr	r2, [r5, #20]
   29d32:	9b04      	ldr	r3, [sp, #16]
   29d34:	4694      	mov	ip, r2
   29d36:	4463      	add	r3, ip
   29d38:	616b      	str	r3, [r5, #20]
   29d3a:	7823      	ldrb	r3, [r4, #0]
   29d3c:	2b00      	cmp	r3, #0
   29d3e:	d100      	bne.n	29d42 <_svfiprintf_r+0x76>
   29d40:	e0ac      	b.n	29e9c <_svfiprintf_r+0x1d0>
   29d42:	2201      	movs	r2, #1
   29d44:	2300      	movs	r3, #0
   29d46:	4252      	negs	r2, r2
   29d48:	606a      	str	r2, [r5, #4]
   29d4a:	a902      	add	r1, sp, #8
   29d4c:	3254      	adds	r2, #84	; 0x54
   29d4e:	1852      	adds	r2, r2, r1
   29d50:	3401      	adds	r4, #1
   29d52:	602b      	str	r3, [r5, #0]
   29d54:	60eb      	str	r3, [r5, #12]
   29d56:	60ab      	str	r3, [r5, #8]
   29d58:	7013      	strb	r3, [r2, #0]
   29d5a:	65ab      	str	r3, [r5, #88]	; 0x58
   29d5c:	4e58      	ldr	r6, [pc, #352]	; (29ec0 <_svfiprintf_r+0x1f4>)
   29d5e:	2205      	movs	r2, #5
   29d60:	7821      	ldrb	r1, [r4, #0]
   29d62:	0030      	movs	r0, r6
   29d64:	f000 fa3e 	bl	2a1e4 <memchr>
   29d68:	1c62      	adds	r2, r4, #1
   29d6a:	2800      	cmp	r0, #0
   29d6c:	d120      	bne.n	29db0 <_svfiprintf_r+0xe4>
   29d6e:	6829      	ldr	r1, [r5, #0]
   29d70:	06cb      	lsls	r3, r1, #27
   29d72:	d504      	bpl.n	29d7e <_svfiprintf_r+0xb2>
   29d74:	2353      	movs	r3, #83	; 0x53
   29d76:	ae02      	add	r6, sp, #8
   29d78:	3020      	adds	r0, #32
   29d7a:	199b      	adds	r3, r3, r6
   29d7c:	7018      	strb	r0, [r3, #0]
   29d7e:	070b      	lsls	r3, r1, #28
   29d80:	d504      	bpl.n	29d8c <_svfiprintf_r+0xc0>
   29d82:	2353      	movs	r3, #83	; 0x53
   29d84:	202b      	movs	r0, #43	; 0x2b
   29d86:	ae02      	add	r6, sp, #8
   29d88:	199b      	adds	r3, r3, r6
   29d8a:	7018      	strb	r0, [r3, #0]
   29d8c:	7823      	ldrb	r3, [r4, #0]
   29d8e:	2b2a      	cmp	r3, #42	; 0x2a
   29d90:	d016      	beq.n	29dc0 <_svfiprintf_r+0xf4>
   29d92:	2000      	movs	r0, #0
   29d94:	210a      	movs	r1, #10
   29d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29d98:	7822      	ldrb	r2, [r4, #0]
   29d9a:	3a30      	subs	r2, #48	; 0x30
   29d9c:	2a09      	cmp	r2, #9
   29d9e:	d955      	bls.n	29e4c <_svfiprintf_r+0x180>
   29da0:	2800      	cmp	r0, #0
   29da2:	d015      	beq.n	29dd0 <_svfiprintf_r+0x104>
   29da4:	9309      	str	r3, [sp, #36]	; 0x24
   29da6:	e013      	b.n	29dd0 <_svfiprintf_r+0x104>
   29da8:	2b25      	cmp	r3, #37	; 0x25
   29daa:	d0b5      	beq.n	29d18 <_svfiprintf_r+0x4c>
   29dac:	3401      	adds	r4, #1
   29dae:	e7b0      	b.n	29d12 <_svfiprintf_r+0x46>
   29db0:	2301      	movs	r3, #1
   29db2:	1b80      	subs	r0, r0, r6
   29db4:	4083      	lsls	r3, r0
   29db6:	6829      	ldr	r1, [r5, #0]
   29db8:	0014      	movs	r4, r2
   29dba:	430b      	orrs	r3, r1
   29dbc:	602b      	str	r3, [r5, #0]
   29dbe:	e7cd      	b.n	29d5c <_svfiprintf_r+0x90>
   29dc0:	9b05      	ldr	r3, [sp, #20]
   29dc2:	1d18      	adds	r0, r3, #4
   29dc4:	681b      	ldr	r3, [r3, #0]
   29dc6:	9005      	str	r0, [sp, #20]
   29dc8:	2b00      	cmp	r3, #0
   29dca:	db39      	blt.n	29e40 <_svfiprintf_r+0x174>
   29dcc:	9309      	str	r3, [sp, #36]	; 0x24
   29dce:	0014      	movs	r4, r2
   29dd0:	7823      	ldrb	r3, [r4, #0]
   29dd2:	2b2e      	cmp	r3, #46	; 0x2e
   29dd4:	d10b      	bne.n	29dee <_svfiprintf_r+0x122>
   29dd6:	7863      	ldrb	r3, [r4, #1]
   29dd8:	1c62      	adds	r2, r4, #1
   29dda:	2b2a      	cmp	r3, #42	; 0x2a
   29ddc:	d13e      	bne.n	29e5c <_svfiprintf_r+0x190>
   29dde:	9b05      	ldr	r3, [sp, #20]
   29de0:	3402      	adds	r4, #2
   29de2:	1d1a      	adds	r2, r3, #4
   29de4:	681b      	ldr	r3, [r3, #0]
   29de6:	9205      	str	r2, [sp, #20]
   29de8:	2b00      	cmp	r3, #0
   29dea:	db34      	blt.n	29e56 <_svfiprintf_r+0x18a>
   29dec:	9307      	str	r3, [sp, #28]
   29dee:	4e35      	ldr	r6, [pc, #212]	; (29ec4 <_svfiprintf_r+0x1f8>)
   29df0:	7821      	ldrb	r1, [r4, #0]
   29df2:	2203      	movs	r2, #3
   29df4:	0030      	movs	r0, r6
   29df6:	f000 f9f5 	bl	2a1e4 <memchr>
   29dfa:	2800      	cmp	r0, #0
   29dfc:	d006      	beq.n	29e0c <_svfiprintf_r+0x140>
   29dfe:	2340      	movs	r3, #64	; 0x40
   29e00:	1b80      	subs	r0, r0, r6
   29e02:	4083      	lsls	r3, r0
   29e04:	682a      	ldr	r2, [r5, #0]
   29e06:	3401      	adds	r4, #1
   29e08:	4313      	orrs	r3, r2
   29e0a:	602b      	str	r3, [r5, #0]
   29e0c:	7821      	ldrb	r1, [r4, #0]
   29e0e:	2206      	movs	r2, #6
   29e10:	482d      	ldr	r0, [pc, #180]	; (29ec8 <_svfiprintf_r+0x1fc>)
   29e12:	1c66      	adds	r6, r4, #1
   29e14:	7629      	strb	r1, [r5, #24]
   29e16:	f000 f9e5 	bl	2a1e4 <memchr>
   29e1a:	2800      	cmp	r0, #0
   29e1c:	d046      	beq.n	29eac <_svfiprintf_r+0x1e0>
   29e1e:	4b2b      	ldr	r3, [pc, #172]	; (29ecc <_svfiprintf_r+0x200>)
   29e20:	2b00      	cmp	r3, #0
   29e22:	d12f      	bne.n	29e84 <_svfiprintf_r+0x1b8>
   29e24:	6829      	ldr	r1, [r5, #0]
   29e26:	9b05      	ldr	r3, [sp, #20]
   29e28:	2207      	movs	r2, #7
   29e2a:	05c9      	lsls	r1, r1, #23
   29e2c:	d528      	bpl.n	29e80 <_svfiprintf_r+0x1b4>
   29e2e:	189b      	adds	r3, r3, r2
   29e30:	4393      	bics	r3, r2
   29e32:	3308      	adds	r3, #8
   29e34:	9305      	str	r3, [sp, #20]
   29e36:	696b      	ldr	r3, [r5, #20]
   29e38:	9a03      	ldr	r2, [sp, #12]
   29e3a:	189b      	adds	r3, r3, r2
   29e3c:	616b      	str	r3, [r5, #20]
   29e3e:	e767      	b.n	29d10 <_svfiprintf_r+0x44>
   29e40:	425b      	negs	r3, r3
   29e42:	60eb      	str	r3, [r5, #12]
   29e44:	2302      	movs	r3, #2
   29e46:	430b      	orrs	r3, r1
   29e48:	602b      	str	r3, [r5, #0]
   29e4a:	e7c0      	b.n	29dce <_svfiprintf_r+0x102>
   29e4c:	434b      	muls	r3, r1
   29e4e:	3401      	adds	r4, #1
   29e50:	189b      	adds	r3, r3, r2
   29e52:	2001      	movs	r0, #1
   29e54:	e7a0      	b.n	29d98 <_svfiprintf_r+0xcc>
   29e56:	2301      	movs	r3, #1
   29e58:	425b      	negs	r3, r3
   29e5a:	e7c7      	b.n	29dec <_svfiprintf_r+0x120>
   29e5c:	2300      	movs	r3, #0
   29e5e:	0014      	movs	r4, r2
   29e60:	200a      	movs	r0, #10
   29e62:	001a      	movs	r2, r3
   29e64:	606b      	str	r3, [r5, #4]
   29e66:	7821      	ldrb	r1, [r4, #0]
   29e68:	3930      	subs	r1, #48	; 0x30
   29e6a:	2909      	cmp	r1, #9
   29e6c:	d903      	bls.n	29e76 <_svfiprintf_r+0x1aa>
   29e6e:	2b00      	cmp	r3, #0
   29e70:	d0bd      	beq.n	29dee <_svfiprintf_r+0x122>
   29e72:	9207      	str	r2, [sp, #28]
   29e74:	e7bb      	b.n	29dee <_svfiprintf_r+0x122>
   29e76:	4342      	muls	r2, r0
   29e78:	3401      	adds	r4, #1
   29e7a:	1852      	adds	r2, r2, r1
   29e7c:	2301      	movs	r3, #1
   29e7e:	e7f2      	b.n	29e66 <_svfiprintf_r+0x19a>
   29e80:	3307      	adds	r3, #7
   29e82:	e7d5      	b.n	29e30 <_svfiprintf_r+0x164>
   29e84:	ab05      	add	r3, sp, #20
   29e86:	9300      	str	r3, [sp, #0]
   29e88:	003a      	movs	r2, r7
   29e8a:	4b11      	ldr	r3, [pc, #68]	; (29ed0 <_svfiprintf_r+0x204>)
   29e8c:	0029      	movs	r1, r5
   29e8e:	9802      	ldr	r0, [sp, #8]
   29e90:	e000      	b.n	29e94 <_svfiprintf_r+0x1c8>
   29e92:	bf00      	nop
   29e94:	9003      	str	r0, [sp, #12]
   29e96:	9b03      	ldr	r3, [sp, #12]
   29e98:	3301      	adds	r3, #1
   29e9a:	d1cc      	bne.n	29e36 <_svfiprintf_r+0x16a>
   29e9c:	89bb      	ldrh	r3, [r7, #12]
   29e9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   29ea0:	065b      	lsls	r3, r3, #25
   29ea2:	d400      	bmi.n	29ea6 <_svfiprintf_r+0x1da>
   29ea4:	e729      	b.n	29cfa <_svfiprintf_r+0x2e>
   29ea6:	2001      	movs	r0, #1
   29ea8:	4240      	negs	r0, r0
   29eaa:	e726      	b.n	29cfa <_svfiprintf_r+0x2e>
   29eac:	ab05      	add	r3, sp, #20
   29eae:	9300      	str	r3, [sp, #0]
   29eb0:	003a      	movs	r2, r7
   29eb2:	4b07      	ldr	r3, [pc, #28]	; (29ed0 <_svfiprintf_r+0x204>)
   29eb4:	0029      	movs	r1, r5
   29eb6:	9802      	ldr	r0, [sp, #8]
   29eb8:	f000 f87a 	bl	29fb0 <_printf_i>
   29ebc:	e7ea      	b.n	29e94 <_svfiprintf_r+0x1c8>
   29ebe:	46c0      	nop			; (mov r8, r8)
   29ec0:	0002b940 	.word	0x0002b940
   29ec4:	0002b946 	.word	0x0002b946
   29ec8:	0002b94a 	.word	0x0002b94a
   29ecc:	00000000 	.word	0x00000000
   29ed0:	00029c09 	.word	0x00029c09

00029ed4 <_printf_common>:
   29ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29ed6:	0015      	movs	r5, r2
   29ed8:	9301      	str	r3, [sp, #4]
   29eda:	688a      	ldr	r2, [r1, #8]
   29edc:	690b      	ldr	r3, [r1, #16]
   29ede:	9000      	str	r0, [sp, #0]
   29ee0:	000c      	movs	r4, r1
   29ee2:	4293      	cmp	r3, r2
   29ee4:	da00      	bge.n	29ee8 <_printf_common+0x14>
   29ee6:	0013      	movs	r3, r2
   29ee8:	0022      	movs	r2, r4
   29eea:	602b      	str	r3, [r5, #0]
   29eec:	3243      	adds	r2, #67	; 0x43
   29eee:	7812      	ldrb	r2, [r2, #0]
   29ef0:	2a00      	cmp	r2, #0
   29ef2:	d001      	beq.n	29ef8 <_printf_common+0x24>
   29ef4:	3301      	adds	r3, #1
   29ef6:	602b      	str	r3, [r5, #0]
   29ef8:	6823      	ldr	r3, [r4, #0]
   29efa:	069b      	lsls	r3, r3, #26
   29efc:	d502      	bpl.n	29f04 <_printf_common+0x30>
   29efe:	682b      	ldr	r3, [r5, #0]
   29f00:	3302      	adds	r3, #2
   29f02:	602b      	str	r3, [r5, #0]
   29f04:	2706      	movs	r7, #6
   29f06:	6823      	ldr	r3, [r4, #0]
   29f08:	401f      	ands	r7, r3
   29f0a:	d027      	beq.n	29f5c <_printf_common+0x88>
   29f0c:	0023      	movs	r3, r4
   29f0e:	3343      	adds	r3, #67	; 0x43
   29f10:	781b      	ldrb	r3, [r3, #0]
   29f12:	1e5a      	subs	r2, r3, #1
   29f14:	4193      	sbcs	r3, r2
   29f16:	6822      	ldr	r2, [r4, #0]
   29f18:	0692      	lsls	r2, r2, #26
   29f1a:	d430      	bmi.n	29f7e <_printf_common+0xaa>
   29f1c:	0022      	movs	r2, r4
   29f1e:	9901      	ldr	r1, [sp, #4]
   29f20:	3243      	adds	r2, #67	; 0x43
   29f22:	9800      	ldr	r0, [sp, #0]
   29f24:	9e08      	ldr	r6, [sp, #32]
   29f26:	47b0      	blx	r6
   29f28:	1c43      	adds	r3, r0, #1
   29f2a:	d025      	beq.n	29f78 <_printf_common+0xa4>
   29f2c:	2306      	movs	r3, #6
   29f2e:	6820      	ldr	r0, [r4, #0]
   29f30:	682a      	ldr	r2, [r5, #0]
   29f32:	68e1      	ldr	r1, [r4, #12]
   29f34:	4003      	ands	r3, r0
   29f36:	2500      	movs	r5, #0
   29f38:	2b04      	cmp	r3, #4
   29f3a:	d103      	bne.n	29f44 <_printf_common+0x70>
   29f3c:	1a8d      	subs	r5, r1, r2
   29f3e:	43eb      	mvns	r3, r5
   29f40:	17db      	asrs	r3, r3, #31
   29f42:	401d      	ands	r5, r3
   29f44:	68a3      	ldr	r3, [r4, #8]
   29f46:	6922      	ldr	r2, [r4, #16]
   29f48:	4293      	cmp	r3, r2
   29f4a:	dd01      	ble.n	29f50 <_printf_common+0x7c>
   29f4c:	1a9b      	subs	r3, r3, r2
   29f4e:	18ed      	adds	r5, r5, r3
   29f50:	2700      	movs	r7, #0
   29f52:	42bd      	cmp	r5, r7
   29f54:	d120      	bne.n	29f98 <_printf_common+0xc4>
   29f56:	2000      	movs	r0, #0
   29f58:	e010      	b.n	29f7c <_printf_common+0xa8>
   29f5a:	3701      	adds	r7, #1
   29f5c:	68e3      	ldr	r3, [r4, #12]
   29f5e:	682a      	ldr	r2, [r5, #0]
   29f60:	1a9b      	subs	r3, r3, r2
   29f62:	429f      	cmp	r7, r3
   29f64:	dad2      	bge.n	29f0c <_printf_common+0x38>
   29f66:	0022      	movs	r2, r4
   29f68:	2301      	movs	r3, #1
   29f6a:	3219      	adds	r2, #25
   29f6c:	9901      	ldr	r1, [sp, #4]
   29f6e:	9800      	ldr	r0, [sp, #0]
   29f70:	9e08      	ldr	r6, [sp, #32]
   29f72:	47b0      	blx	r6
   29f74:	1c43      	adds	r3, r0, #1
   29f76:	d1f0      	bne.n	29f5a <_printf_common+0x86>
   29f78:	2001      	movs	r0, #1
   29f7a:	4240      	negs	r0, r0
   29f7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   29f7e:	2030      	movs	r0, #48	; 0x30
   29f80:	18e1      	adds	r1, r4, r3
   29f82:	3143      	adds	r1, #67	; 0x43
   29f84:	7008      	strb	r0, [r1, #0]
   29f86:	0021      	movs	r1, r4
   29f88:	1c5a      	adds	r2, r3, #1
   29f8a:	3145      	adds	r1, #69	; 0x45
   29f8c:	7809      	ldrb	r1, [r1, #0]
   29f8e:	18a2      	adds	r2, r4, r2
   29f90:	3243      	adds	r2, #67	; 0x43
   29f92:	3302      	adds	r3, #2
   29f94:	7011      	strb	r1, [r2, #0]
   29f96:	e7c1      	b.n	29f1c <_printf_common+0x48>
   29f98:	0022      	movs	r2, r4
   29f9a:	2301      	movs	r3, #1
   29f9c:	321a      	adds	r2, #26
   29f9e:	9901      	ldr	r1, [sp, #4]
   29fa0:	9800      	ldr	r0, [sp, #0]
   29fa2:	9e08      	ldr	r6, [sp, #32]
   29fa4:	47b0      	blx	r6
   29fa6:	1c43      	adds	r3, r0, #1
   29fa8:	d0e6      	beq.n	29f78 <_printf_common+0xa4>
   29faa:	3701      	adds	r7, #1
   29fac:	e7d1      	b.n	29f52 <_printf_common+0x7e>
	...

00029fb0 <_printf_i>:
   29fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   29fb2:	b08b      	sub	sp, #44	; 0x2c
   29fb4:	9206      	str	r2, [sp, #24]
   29fb6:	000a      	movs	r2, r1
   29fb8:	3243      	adds	r2, #67	; 0x43
   29fba:	9307      	str	r3, [sp, #28]
   29fbc:	9005      	str	r0, [sp, #20]
   29fbe:	9204      	str	r2, [sp, #16]
   29fc0:	7e0a      	ldrb	r2, [r1, #24]
   29fc2:	000c      	movs	r4, r1
   29fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29fc6:	2a6e      	cmp	r2, #110	; 0x6e
   29fc8:	d100      	bne.n	29fcc <_printf_i+0x1c>
   29fca:	e08f      	b.n	2a0ec <_printf_i+0x13c>
   29fcc:	d817      	bhi.n	29ffe <_printf_i+0x4e>
   29fce:	2a63      	cmp	r2, #99	; 0x63
   29fd0:	d02c      	beq.n	2a02c <_printf_i+0x7c>
   29fd2:	d808      	bhi.n	29fe6 <_printf_i+0x36>
   29fd4:	2a00      	cmp	r2, #0
   29fd6:	d100      	bne.n	29fda <_printf_i+0x2a>
   29fd8:	e099      	b.n	2a10e <_printf_i+0x15e>
   29fda:	2a58      	cmp	r2, #88	; 0x58
   29fdc:	d054      	beq.n	2a088 <_printf_i+0xd8>
   29fde:	0026      	movs	r6, r4
   29fe0:	3642      	adds	r6, #66	; 0x42
   29fe2:	7032      	strb	r2, [r6, #0]
   29fe4:	e029      	b.n	2a03a <_printf_i+0x8a>
   29fe6:	2a64      	cmp	r2, #100	; 0x64
   29fe8:	d001      	beq.n	29fee <_printf_i+0x3e>
   29fea:	2a69      	cmp	r2, #105	; 0x69
   29fec:	d1f7      	bne.n	29fde <_printf_i+0x2e>
   29fee:	6821      	ldr	r1, [r4, #0]
   29ff0:	681a      	ldr	r2, [r3, #0]
   29ff2:	0608      	lsls	r0, r1, #24
   29ff4:	d523      	bpl.n	2a03e <_printf_i+0x8e>
   29ff6:	1d11      	adds	r1, r2, #4
   29ff8:	6019      	str	r1, [r3, #0]
   29ffa:	6815      	ldr	r5, [r2, #0]
   29ffc:	e025      	b.n	2a04a <_printf_i+0x9a>
   29ffe:	2a73      	cmp	r2, #115	; 0x73
   2a000:	d100      	bne.n	2a004 <_printf_i+0x54>
   2a002:	e088      	b.n	2a116 <_printf_i+0x166>
   2a004:	d808      	bhi.n	2a018 <_printf_i+0x68>
   2a006:	2a6f      	cmp	r2, #111	; 0x6f
   2a008:	d029      	beq.n	2a05e <_printf_i+0xae>
   2a00a:	2a70      	cmp	r2, #112	; 0x70
   2a00c:	d1e7      	bne.n	29fde <_printf_i+0x2e>
   2a00e:	2220      	movs	r2, #32
   2a010:	6809      	ldr	r1, [r1, #0]
   2a012:	430a      	orrs	r2, r1
   2a014:	6022      	str	r2, [r4, #0]
   2a016:	e003      	b.n	2a020 <_printf_i+0x70>
   2a018:	2a75      	cmp	r2, #117	; 0x75
   2a01a:	d020      	beq.n	2a05e <_printf_i+0xae>
   2a01c:	2a78      	cmp	r2, #120	; 0x78
   2a01e:	d1de      	bne.n	29fde <_printf_i+0x2e>
   2a020:	0022      	movs	r2, r4
   2a022:	2178      	movs	r1, #120	; 0x78
   2a024:	3245      	adds	r2, #69	; 0x45
   2a026:	7011      	strb	r1, [r2, #0]
   2a028:	4a6c      	ldr	r2, [pc, #432]	; (2a1dc <_printf_i+0x22c>)
   2a02a:	e030      	b.n	2a08e <_printf_i+0xde>
   2a02c:	000e      	movs	r6, r1
   2a02e:	681a      	ldr	r2, [r3, #0]
   2a030:	3642      	adds	r6, #66	; 0x42
   2a032:	1d11      	adds	r1, r2, #4
   2a034:	6019      	str	r1, [r3, #0]
   2a036:	6813      	ldr	r3, [r2, #0]
   2a038:	7033      	strb	r3, [r6, #0]
   2a03a:	2301      	movs	r3, #1
   2a03c:	e079      	b.n	2a132 <_printf_i+0x182>
   2a03e:	0649      	lsls	r1, r1, #25
   2a040:	d5d9      	bpl.n	29ff6 <_printf_i+0x46>
   2a042:	1d11      	adds	r1, r2, #4
   2a044:	6019      	str	r1, [r3, #0]
   2a046:	2300      	movs	r3, #0
   2a048:	5ed5      	ldrsh	r5, [r2, r3]
   2a04a:	2d00      	cmp	r5, #0
   2a04c:	da03      	bge.n	2a056 <_printf_i+0xa6>
   2a04e:	232d      	movs	r3, #45	; 0x2d
   2a050:	9a04      	ldr	r2, [sp, #16]
   2a052:	426d      	negs	r5, r5
   2a054:	7013      	strb	r3, [r2, #0]
   2a056:	4b62      	ldr	r3, [pc, #392]	; (2a1e0 <_printf_i+0x230>)
   2a058:	270a      	movs	r7, #10
   2a05a:	9303      	str	r3, [sp, #12]
   2a05c:	e02f      	b.n	2a0be <_printf_i+0x10e>
   2a05e:	6820      	ldr	r0, [r4, #0]
   2a060:	6819      	ldr	r1, [r3, #0]
   2a062:	0605      	lsls	r5, r0, #24
   2a064:	d503      	bpl.n	2a06e <_printf_i+0xbe>
   2a066:	1d08      	adds	r0, r1, #4
   2a068:	6018      	str	r0, [r3, #0]
   2a06a:	680d      	ldr	r5, [r1, #0]
   2a06c:	e005      	b.n	2a07a <_printf_i+0xca>
   2a06e:	0640      	lsls	r0, r0, #25
   2a070:	d5f9      	bpl.n	2a066 <_printf_i+0xb6>
   2a072:	680d      	ldr	r5, [r1, #0]
   2a074:	1d08      	adds	r0, r1, #4
   2a076:	6018      	str	r0, [r3, #0]
   2a078:	b2ad      	uxth	r5, r5
   2a07a:	4b59      	ldr	r3, [pc, #356]	; (2a1e0 <_printf_i+0x230>)
   2a07c:	2708      	movs	r7, #8
   2a07e:	9303      	str	r3, [sp, #12]
   2a080:	2a6f      	cmp	r2, #111	; 0x6f
   2a082:	d018      	beq.n	2a0b6 <_printf_i+0x106>
   2a084:	270a      	movs	r7, #10
   2a086:	e016      	b.n	2a0b6 <_printf_i+0x106>
   2a088:	3145      	adds	r1, #69	; 0x45
   2a08a:	700a      	strb	r2, [r1, #0]
   2a08c:	4a54      	ldr	r2, [pc, #336]	; (2a1e0 <_printf_i+0x230>)
   2a08e:	9203      	str	r2, [sp, #12]
   2a090:	681a      	ldr	r2, [r3, #0]
   2a092:	6821      	ldr	r1, [r4, #0]
   2a094:	1d10      	adds	r0, r2, #4
   2a096:	6018      	str	r0, [r3, #0]
   2a098:	6815      	ldr	r5, [r2, #0]
   2a09a:	0608      	lsls	r0, r1, #24
   2a09c:	d522      	bpl.n	2a0e4 <_printf_i+0x134>
   2a09e:	07cb      	lsls	r3, r1, #31
   2a0a0:	d502      	bpl.n	2a0a8 <_printf_i+0xf8>
   2a0a2:	2320      	movs	r3, #32
   2a0a4:	4319      	orrs	r1, r3
   2a0a6:	6021      	str	r1, [r4, #0]
   2a0a8:	2710      	movs	r7, #16
   2a0aa:	2d00      	cmp	r5, #0
   2a0ac:	d103      	bne.n	2a0b6 <_printf_i+0x106>
   2a0ae:	2320      	movs	r3, #32
   2a0b0:	6822      	ldr	r2, [r4, #0]
   2a0b2:	439a      	bics	r2, r3
   2a0b4:	6022      	str	r2, [r4, #0]
   2a0b6:	0023      	movs	r3, r4
   2a0b8:	2200      	movs	r2, #0
   2a0ba:	3343      	adds	r3, #67	; 0x43
   2a0bc:	701a      	strb	r2, [r3, #0]
   2a0be:	6863      	ldr	r3, [r4, #4]
   2a0c0:	60a3      	str	r3, [r4, #8]
   2a0c2:	2b00      	cmp	r3, #0
   2a0c4:	db5c      	blt.n	2a180 <_printf_i+0x1d0>
   2a0c6:	2204      	movs	r2, #4
   2a0c8:	6821      	ldr	r1, [r4, #0]
   2a0ca:	4391      	bics	r1, r2
   2a0cc:	6021      	str	r1, [r4, #0]
   2a0ce:	2d00      	cmp	r5, #0
   2a0d0:	d158      	bne.n	2a184 <_printf_i+0x1d4>
   2a0d2:	9e04      	ldr	r6, [sp, #16]
   2a0d4:	2b00      	cmp	r3, #0
   2a0d6:	d064      	beq.n	2a1a2 <_printf_i+0x1f2>
   2a0d8:	0026      	movs	r6, r4
   2a0da:	9b03      	ldr	r3, [sp, #12]
   2a0dc:	3642      	adds	r6, #66	; 0x42
   2a0de:	781b      	ldrb	r3, [r3, #0]
   2a0e0:	7033      	strb	r3, [r6, #0]
   2a0e2:	e05e      	b.n	2a1a2 <_printf_i+0x1f2>
   2a0e4:	0648      	lsls	r0, r1, #25
   2a0e6:	d5da      	bpl.n	2a09e <_printf_i+0xee>
   2a0e8:	b2ad      	uxth	r5, r5
   2a0ea:	e7d8      	b.n	2a09e <_printf_i+0xee>
   2a0ec:	6809      	ldr	r1, [r1, #0]
   2a0ee:	681a      	ldr	r2, [r3, #0]
   2a0f0:	0608      	lsls	r0, r1, #24
   2a0f2:	d505      	bpl.n	2a100 <_printf_i+0x150>
   2a0f4:	1d11      	adds	r1, r2, #4
   2a0f6:	6019      	str	r1, [r3, #0]
   2a0f8:	6813      	ldr	r3, [r2, #0]
   2a0fa:	6962      	ldr	r2, [r4, #20]
   2a0fc:	601a      	str	r2, [r3, #0]
   2a0fe:	e006      	b.n	2a10e <_printf_i+0x15e>
   2a100:	0649      	lsls	r1, r1, #25
   2a102:	d5f7      	bpl.n	2a0f4 <_printf_i+0x144>
   2a104:	1d11      	adds	r1, r2, #4
   2a106:	6019      	str	r1, [r3, #0]
   2a108:	6813      	ldr	r3, [r2, #0]
   2a10a:	8aa2      	ldrh	r2, [r4, #20]
   2a10c:	801a      	strh	r2, [r3, #0]
   2a10e:	2300      	movs	r3, #0
   2a110:	9e04      	ldr	r6, [sp, #16]
   2a112:	6123      	str	r3, [r4, #16]
   2a114:	e054      	b.n	2a1c0 <_printf_i+0x210>
   2a116:	681a      	ldr	r2, [r3, #0]
   2a118:	1d11      	adds	r1, r2, #4
   2a11a:	6019      	str	r1, [r3, #0]
   2a11c:	6816      	ldr	r6, [r2, #0]
   2a11e:	2100      	movs	r1, #0
   2a120:	6862      	ldr	r2, [r4, #4]
   2a122:	0030      	movs	r0, r6
   2a124:	f000 f85e 	bl	2a1e4 <memchr>
   2a128:	2800      	cmp	r0, #0
   2a12a:	d001      	beq.n	2a130 <_printf_i+0x180>
   2a12c:	1b80      	subs	r0, r0, r6
   2a12e:	6060      	str	r0, [r4, #4]
   2a130:	6863      	ldr	r3, [r4, #4]
   2a132:	6123      	str	r3, [r4, #16]
   2a134:	2300      	movs	r3, #0
   2a136:	9a04      	ldr	r2, [sp, #16]
   2a138:	7013      	strb	r3, [r2, #0]
   2a13a:	e041      	b.n	2a1c0 <_printf_i+0x210>
   2a13c:	6923      	ldr	r3, [r4, #16]
   2a13e:	0032      	movs	r2, r6
   2a140:	9906      	ldr	r1, [sp, #24]
   2a142:	9805      	ldr	r0, [sp, #20]
   2a144:	9d07      	ldr	r5, [sp, #28]
   2a146:	47a8      	blx	r5
   2a148:	1c43      	adds	r3, r0, #1
   2a14a:	d043      	beq.n	2a1d4 <_printf_i+0x224>
   2a14c:	6823      	ldr	r3, [r4, #0]
   2a14e:	2500      	movs	r5, #0
   2a150:	079b      	lsls	r3, r3, #30
   2a152:	d40f      	bmi.n	2a174 <_printf_i+0x1c4>
   2a154:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a156:	68e0      	ldr	r0, [r4, #12]
   2a158:	4298      	cmp	r0, r3
   2a15a:	da3d      	bge.n	2a1d8 <_printf_i+0x228>
   2a15c:	0018      	movs	r0, r3
   2a15e:	e03b      	b.n	2a1d8 <_printf_i+0x228>
   2a160:	0022      	movs	r2, r4
   2a162:	2301      	movs	r3, #1
   2a164:	3219      	adds	r2, #25
   2a166:	9906      	ldr	r1, [sp, #24]
   2a168:	9805      	ldr	r0, [sp, #20]
   2a16a:	9e07      	ldr	r6, [sp, #28]
   2a16c:	47b0      	blx	r6
   2a16e:	1c43      	adds	r3, r0, #1
   2a170:	d030      	beq.n	2a1d4 <_printf_i+0x224>
   2a172:	3501      	adds	r5, #1
   2a174:	68e3      	ldr	r3, [r4, #12]
   2a176:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a178:	1a9b      	subs	r3, r3, r2
   2a17a:	429d      	cmp	r5, r3
   2a17c:	dbf0      	blt.n	2a160 <_printf_i+0x1b0>
   2a17e:	e7e9      	b.n	2a154 <_printf_i+0x1a4>
   2a180:	2d00      	cmp	r5, #0
   2a182:	d0a9      	beq.n	2a0d8 <_printf_i+0x128>
   2a184:	9e04      	ldr	r6, [sp, #16]
   2a186:	0028      	movs	r0, r5
   2a188:	0039      	movs	r1, r7
   2a18a:	f7fc feaf 	bl	26eec <__aeabi_uidivmod>
   2a18e:	9b03      	ldr	r3, [sp, #12]
   2a190:	3e01      	subs	r6, #1
   2a192:	5c5b      	ldrb	r3, [r3, r1]
   2a194:	0028      	movs	r0, r5
   2a196:	7033      	strb	r3, [r6, #0]
   2a198:	0039      	movs	r1, r7
   2a19a:	f7fc fe21 	bl	26de0 <__udivsi3>
   2a19e:	1e05      	subs	r5, r0, #0
   2a1a0:	d1f1      	bne.n	2a186 <_printf_i+0x1d6>
   2a1a2:	2f08      	cmp	r7, #8
   2a1a4:	d109      	bne.n	2a1ba <_printf_i+0x20a>
   2a1a6:	6823      	ldr	r3, [r4, #0]
   2a1a8:	07db      	lsls	r3, r3, #31
   2a1aa:	d506      	bpl.n	2a1ba <_printf_i+0x20a>
   2a1ac:	6863      	ldr	r3, [r4, #4]
   2a1ae:	6922      	ldr	r2, [r4, #16]
   2a1b0:	4293      	cmp	r3, r2
   2a1b2:	dc02      	bgt.n	2a1ba <_printf_i+0x20a>
   2a1b4:	2330      	movs	r3, #48	; 0x30
   2a1b6:	3e01      	subs	r6, #1
   2a1b8:	7033      	strb	r3, [r6, #0]
   2a1ba:	9b04      	ldr	r3, [sp, #16]
   2a1bc:	1b9b      	subs	r3, r3, r6
   2a1be:	6123      	str	r3, [r4, #16]
   2a1c0:	9b07      	ldr	r3, [sp, #28]
   2a1c2:	aa09      	add	r2, sp, #36	; 0x24
   2a1c4:	9300      	str	r3, [sp, #0]
   2a1c6:	0021      	movs	r1, r4
   2a1c8:	9b06      	ldr	r3, [sp, #24]
   2a1ca:	9805      	ldr	r0, [sp, #20]
   2a1cc:	f7ff fe82 	bl	29ed4 <_printf_common>
   2a1d0:	1c43      	adds	r3, r0, #1
   2a1d2:	d1b3      	bne.n	2a13c <_printf_i+0x18c>
   2a1d4:	2001      	movs	r0, #1
   2a1d6:	4240      	negs	r0, r0
   2a1d8:	b00b      	add	sp, #44	; 0x2c
   2a1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a1dc:	0002b962 	.word	0x0002b962
   2a1e0:	0002b951 	.word	0x0002b951

0002a1e4 <memchr>:
   2a1e4:	b2c9      	uxtb	r1, r1
   2a1e6:	1882      	adds	r2, r0, r2
   2a1e8:	4290      	cmp	r0, r2
   2a1ea:	d101      	bne.n	2a1f0 <memchr+0xc>
   2a1ec:	2000      	movs	r0, #0
   2a1ee:	4770      	bx	lr
   2a1f0:	7803      	ldrb	r3, [r0, #0]
   2a1f2:	428b      	cmp	r3, r1
   2a1f4:	d0fb      	beq.n	2a1ee <memchr+0xa>
   2a1f6:	3001      	adds	r0, #1
   2a1f8:	e7f6      	b.n	2a1e8 <memchr+0x4>

0002a1fa <_realloc_r>:
   2a1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a1fc:	0007      	movs	r7, r0
   2a1fe:	000d      	movs	r5, r1
   2a200:	0016      	movs	r6, r2
   2a202:	2900      	cmp	r1, #0
   2a204:	d105      	bne.n	2a212 <_realloc_r+0x18>
   2a206:	0011      	movs	r1, r2
   2a208:	f7ff fa86 	bl	29718 <_malloc_r>
   2a20c:	0004      	movs	r4, r0
   2a20e:	0020      	movs	r0, r4
   2a210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a212:	2a00      	cmp	r2, #0
   2a214:	d103      	bne.n	2a21e <_realloc_r+0x24>
   2a216:	f7ff fa35 	bl	29684 <_free_r>
   2a21a:	0034      	movs	r4, r6
   2a21c:	e7f7      	b.n	2a20e <_realloc_r+0x14>
   2a21e:	f000 f812 	bl	2a246 <_malloc_usable_size_r>
   2a222:	002c      	movs	r4, r5
   2a224:	4286      	cmp	r6, r0
   2a226:	d9f2      	bls.n	2a20e <_realloc_r+0x14>
   2a228:	0031      	movs	r1, r6
   2a22a:	0038      	movs	r0, r7
   2a22c:	f7ff fa74 	bl	29718 <_malloc_r>
   2a230:	1e04      	subs	r4, r0, #0
   2a232:	d0ec      	beq.n	2a20e <_realloc_r+0x14>
   2a234:	0029      	movs	r1, r5
   2a236:	0032      	movs	r2, r6
   2a238:	f7ff f9f2 	bl	29620 <memcpy>
   2a23c:	0029      	movs	r1, r5
   2a23e:	0038      	movs	r0, r7
   2a240:	f7ff fa20 	bl	29684 <_free_r>
   2a244:	e7e3      	b.n	2a20e <_realloc_r+0x14>

0002a246 <_malloc_usable_size_r>:
   2a246:	1f0b      	subs	r3, r1, #4
   2a248:	681b      	ldr	r3, [r3, #0]
   2a24a:	1f18      	subs	r0, r3, #4
   2a24c:	2b00      	cmp	r3, #0
   2a24e:	da01      	bge.n	2a254 <_malloc_usable_size_r+0xe>
   2a250:	580b      	ldr	r3, [r1, r0]
   2a252:	18c0      	adds	r0, r0, r3
   2a254:	4770      	bx	lr
   2a256:	0000      	movs	r0, r0
   2a258:	30303030 	.word	0x30303030
   2a25c:	30303030 	.word	0x30303030
   2a260:	00003030 	.word	0x00003030
   2a264:	2e707466 	.word	0x2e707466
   2a268:	76697264 	.word	0x76697264
   2a26c:	2e716865 	.word	0x2e716865
   2a270:	006d6f63 	.word	0x006d6f63
   2a274:	7269662f 	.word	0x7269662f
   2a278:	7261776d 	.word	0x7261776d
   2a27c:	00002f65 	.word	0x00002f65
   2a280:	75686172 	.word	0x75686172
   2a284:	61726e6c 	.word	0x61726e6c
   2a288:	646f6874 	.word	0x646f6874
   2a28c:	006c636b 	.word	0x006c636b
   2a290:	34333231 	.word	0x34333231
   2a294:	38373635 	.word	0x38373635
   2a298:	00000039 	.word	0x00000039
   2a29c:	6d726966 	.word	0x6d726966
   2a2a0:	65726177 	.word	0x65726177
   2a2a4:	6e69622e 	.word	0x6e69622e
   2a2a8:	00000000 	.word	0x00000000
   2a2ac:	31343037 	.word	0x31343037
   2a2b0:	39363931 	.word	0x39363931
   2a2b4:	00003935 	.word	0x00003935
   2a2b8:	38393637 	.word	0x38393637
   2a2bc:	32393334 	.word	0x32393334
   2a2c0:	00003130 	.word	0x00003130
   2a2c4:	33383337 	.word	0x33383337
   2a2c8:	32343136 	.word	0x32343136
   2a2cc:	00003431 	.word	0x00003431
   2a2d0:	33383337 	.word	0x33383337
   2a2d4:	36323236 	.word	0x36323236
   2a2d8:	00003837 	.word	0x00003837
   2a2dc:	36383539 	.word	0x36383539
   2a2e0:	39353331 	.word	0x39353331
   2a2e4:	00003837 	.word	0x00003837
   2a2e8:	00003a50 	.word	0x00003a50
   2a2ec:	00003a53 	.word	0x00003a53
   2a2f0:	0000000a 	.word	0x0000000a
   2a2f4:	00006425 	.word	0x00006425
   2a2f8:	204d5347 	.word	0x204d5347
   2a2fc:	656d6954 	.word	0x656d6954
   2a300:	0074756f 	.word	0x0074756f
   2a304:	4f525245 	.word	0x4f525245
   2a308:	00000052 	.word	0x00000052
   2a30c:	00004b4f 	.word	0x00004b4f
   2a310:	000d5441 	.word	0x000d5441
   2a314:	492b5441 	.word	0x492b5441
   2a318:	303d4346 	.word	0x303d4346
   2a31c:	000d302c 	.word	0x000d302c
   2a320:	4552432b 	.word	0x4552432b
   2a324:	30203a47 	.word	0x30203a47
   2a328:	0000312c 	.word	0x0000312c
   2a32c:	432b5441 	.word	0x432b5441
   2a330:	3f474552 	.word	0x3f474552
   2a334:	0000000d 	.word	0x0000000d
   2a338:	4552432b 	.word	0x4552432b
   2a33c:	30203a47 	.word	0x30203a47
   2a340:	0000352c 	.word	0x0000352c
   2a344:	492b5441 	.word	0x492b5441
   2a348:	253d5250 	.word	0x253d5250
   2a34c:	00000d64 	.word	0x00000d64
   2a350:	492b5441 	.word	0x492b5441
   2a354:	303d5250 	.word	0x303d5250
   2a358:	0000000d 	.word	0x0000000d
   2a35c:	432b5441 	.word	0x432b5441
   2a360:	3d474552 	.word	0x3d474552
   2a364:	00000d31 	.word	0x00000d31
   2a368:	432b5441 	.word	0x432b5441
   2a36c:	3d4e5546 	.word	0x3d4e5546
   2a370:	00000d31 	.word	0x00000d31
   2a374:	5546432b 	.word	0x5546432b
   2a378:	31203a4e 	.word	0x31203a4e
   2a37c:	00000000 	.word	0x00000000
   2a380:	432b5441 	.word	0x432b5441
   2a384:	3f4e5546 	.word	0x3f4e5546
   2a388:	0000000d 	.word	0x0000000d
   2a38c:	432b5441 	.word	0x432b5441
   2a390:	3d4e5546 	.word	0x3d4e5546
   2a394:	00000d30 	.word	0x00000d30
   2a398:	5546432b 	.word	0x5546432b
   2a39c:	30203a4e 	.word	0x30203a4e
   2a3a0:	00000000 	.word	0x00000000
   2a3a4:	432b5441 	.word	0x432b5441
   2a3a8:	3d4e5546 	.word	0x3d4e5546
   2a3ac:	0d312c31 	.word	0x0d312c31
   2a3b0:	00000000 	.word	0x00000000
   2a3b4:	4950432b 	.word	0x4950432b
   2a3b8:	52203a4e 	.word	0x52203a4e
   2a3bc:	59444145 	.word	0x59444145
   2a3c0:	00000000 	.word	0x00000000
   2a3c4:	432b5441 	.word	0x432b5441
   2a3c8:	3f4e4950 	.word	0x3f4e4950
   2a3cc:	0000000d 	.word	0x0000000d
   2a3d0:	432b5441 	.word	0x432b5441
   2a3d4:	4144474d 	.word	0x4144474d
   2a3d8:	4544223d 	.word	0x4544223d
   2a3dc:	4c41204c 	.word	0x4c41204c
   2a3e0:	000d224c 	.word	0x000d224c
   2a3e4:	57265441 	.word	0x57265441
   2a3e8:	0000000d 	.word	0x0000000d
   2a3ec:	432b5441 	.word	0x432b5441
   2a3f0:	3d50494c 	.word	0x3d50494c
   2a3f4:	00000d31 	.word	0x00000d31
   2a3f8:	432b5441 	.word	0x432b5441
   2a3fc:	3d504c4f 	.word	0x3d504c4f
   2a400:	00000d31 	.word	0x00000d31
   2a404:	432b5441 	.word	0x432b5441
   2a408:	4b4c4353 	.word	0x4b4c4353
   2a40c:	000d313d 	.word	0x000d313d
   2a410:	432b5441 	.word	0x432b5441
   2a414:	3f504c4f 	.word	0x3f504c4f
   2a418:	0000000d 	.word	0x0000000d
   2a41c:	4c4f432b 	.word	0x4c4f432b
   2a420:	00000050 	.word	0x00000050
   2a424:	0000003a 	.word	0x0000003a
   2a428:	0000002c 	.word	0x0000002c
   2a42c:	432b5441 	.word	0x432b5441
   2a430:	3d43434c 	.word	0x3d43434c
   2a434:	00000d31 	.word	0x00000d31
   2a438:	46265441 	.word	0x46265441
   2a43c:	0000000d 	.word	0x0000000d
   2a440:	30455441 	.word	0x30455441
   2a444:	0000000d 	.word	0x0000000d
   2a448:	432b5441 	.word	0x432b5441
   2a44c:	3d46474d 	.word	0x3d46474d
   2a450:	00000d31 	.word	0x00000d31
   2a454:	432b5441 	.word	0x432b5441
   2a458:	3d504d53 	.word	0x3d504d53
   2a45c:	312c3731 	.word	0x312c3731
   2a460:	302c3736 	.word	0x302c3736
   2a464:	000d302c 	.word	0x000d302c
   2a468:	432b5441 	.word	0x432b5441
   2a46c:	3d534153 	.word	0x3d534153
   2a470:	00000d30 	.word	0x00000d30
   2a474:	432b5441 	.word	0x432b5441
   2a478:	3d534153 	.word	0x3d534153
   2a47c:	00000d31 	.word	0x00000d31
   2a480:	432b5441 	.word	0x432b5441
   2a484:	000d5153 	.word	0x000d5153
   2a488:	5153432b 	.word	0x5153432b
   2a48c:	0000003a 	.word	0x0000003a
   2a490:	00003939 	.word	0x00003939
   2a494:	432b5441 	.word	0x432b5441
   2a498:	3d494d4e 	.word	0x3d494d4e
   2a49c:	2c312c32 	.word	0x2c312c32
   2a4a0:	2c302c30 	.word	0x2c302c30
   2a4a4:	00000d30 	.word	0x00000d30
   2a4a8:	432b5441 	.word	0x432b5441
   2a4ac:	3d494d4e 	.word	0x3d494d4e
   2a4b0:	2c302c31 	.word	0x2c302c31
   2a4b4:	2c302c30 	.word	0x2c302c30
   2a4b8:	00000d30 	.word	0x00000d30
   2a4bc:	452b5441 	.word	0x452b5441
   2a4c0:	534e5558 	.word	0x534e5558
   2a4c4:	223d4c4f 	.word	0x223d4c4f
   2a4c8:	2c225153 	.word	0x2c225153
   2a4cc:	00000d31 	.word	0x00000d31
   2a4d0:	452b5441 	.word	0x452b5441
   2a4d4:	534e5558 	.word	0x534e5558
   2a4d8:	223d4c4f 	.word	0x223d4c4f
   2a4dc:	2c225153 	.word	0x2c225153
   2a4e0:	00000d30 	.word	0x00000d30
   2a4e4:	432b5441 	.word	0x432b5441
   2a4e8:	3d53474d 	.word	0x3d53474d
   2a4ec:	22732522 	.word	0x22732522
   2a4f0:	0000000d 	.word	0x0000000d
   2a4f4:	0000003e 	.word	0x0000003e
   2a4f8:	0d1a7325 	.word	0x0d1a7325
   2a4fc:	00000000 	.word	0x00000000
   2a500:	432b5441 	.word	0x432b5441
   2a504:	3d4c474d 	.word	0x3d4c474d
   2a508:	43455222 	.word	0x43455222
   2a50c:	524e5520 	.word	0x524e5520
   2a510:	22444145 	.word	0x22444145
   2a514:	0000000d 	.word	0x0000000d
   2a518:	432b5441 	.word	0x432b5441
   2a51c:	3d4c474d 	.word	0x3d4c474d
   2a520:	43455222 	.word	0x43455222
   2a524:	41455220 	.word	0x41455220
   2a528:	000d2244 	.word	0x000d2244
   2a52c:	432b5441 	.word	0x432b5441
   2a530:	3d4c474d 	.word	0x3d4c474d
   2a534:	4c4c4122 	.word	0x4c4c4122
   2a538:	00000d22 	.word	0x00000d22
   2a53c:	4c474d43 	.word	0x4c474d43
   2a540:	00000000 	.word	0x00000000
   2a544:	432b5441 	.word	0x432b5441
   2a548:	3d52474d 	.word	0x3d52474d
   2a54c:	000d6425 	.word	0x000d6425
   2a550:	474d432b 	.word	0x474d432b
   2a554:	00000052 	.word	0x00000052
   2a558:	25445441 	.word	0x25445441
   2a55c:	000d3b73 	.word	0x000d3b73
   2a560:	0d415441 	.word	0x0d415441
   2a564:	00000000 	.word	0x00000000
   2a568:	432b5441 	.word	0x432b5441
   2a56c:	3d53544c 	.word	0x3d53544c
   2a570:	00000d31 	.word	0x00000d31
   2a574:	432b5441 	.word	0x432b5441
   2a578:	3d53544c 	.word	0x3d53544c
   2a57c:	00000d30 	.word	0x00000d30
   2a580:	442b5441 	.word	0x442b5441
   2a584:	3d544544 	.word	0x3d544544
   2a588:	00000d31 	.word	0x00000d31
   2a58c:	562b5441 	.word	0x562b5441
   2a590:	223d5354 	.word	0x223d5354
   2a594:	0d227325 	.word	0x0d227325
   2a598:	00000000 	.word	0x00000000
   2a59c:	432b5441 	.word	0x432b5441
   2a5a0:	0d505548 	.word	0x0d505548
   2a5a4:	00000000 	.word	0x00000000
   2a5a8:	432b5441 	.word	0x432b5441
   2a5ac:	3d415743 	.word	0x3d415743
   2a5b0:	0d302c30 	.word	0x0d302c30
   2a5b4:	00000000 	.word	0x00000000
   2a5b8:	472b5441 	.word	0x472b5441
   2a5bc:	55424d53 	.word	0x55424d53
   2a5c0:	313d5953 	.word	0x313d5953
   2a5c4:	0000000d 	.word	0x0000000d
   2a5c8:	472b5441 	.word	0x472b5441
   2a5cc:	55424d53 	.word	0x55424d53
   2a5d0:	303d5953 	.word	0x303d5953
   2a5d4:	0000000d 	.word	0x0000000d
   2a5d8:	432b5441 	.word	0x432b5441
   2a5dc:	3d434552 	.word	0x3d434552
   2a5e0:	00000d35 	.word	0x00000d35
   2a5e4:	432b5441 	.word	0x432b5441
   2a5e8:	3d434552 	.word	0x3d434552
   2a5ec:	43222c34 	.word	0x43222c34
   2a5f0:	73555c3a 	.word	0x73555c3a
   2a5f4:	255c7265 	.word	0x255c7265
   2a5f8:	6d612e63 	.word	0x6d612e63
   2a5fc:	302c2272 	.word	0x302c2272
   2a600:	2c30392c 	.word	0x2c30392c
   2a604:	000d7525 	.word	0x000d7525
   2a608:	432b5441 	.word	0x432b5441
   2a60c:	3f4b4c43 	.word	0x3f4b4c43
   2a610:	0000000d 	.word	0x0000000d
   2a614:	00000022 	.word	0x00000022
   2a618:	0000002f 	.word	0x0000002f
   2a61c:	0000002b 	.word	0x0000002b
   2a620:	544d432b 	.word	0x544d432b
   2a624:	00003a49 	.word	0x00003a49
   2a628:	474e4952 	.word	0x474e4952
   2a62c:	00000000 	.word	0x00000000
   2a630:	5153432b 	.word	0x5153432b
   2a634:	0000004e 	.word	0x0000004e
   2a638:	494c432b 	.word	0x494c432b
   2a63c:	00000050 	.word	0x00000050
   2a640:	43204f4e 	.word	0x43204f4e
   2a644:	49525241 	.word	0x49525241
   2a648:	00005245 	.word	0x00005245
   2a64c:	59535542 	.word	0x59535542
   2a650:	00000000 	.word	0x00000000
   2a654:	41204f4e 	.word	0x41204f4e
   2a658:	4557534e 	.word	0x4557534e
   2a65c:	00000052 	.word	0x00000052
   2a660:	4d54442b 	.word	0x4d54442b
   2a664:	00003a46 	.word	0x00003a46
   2a668:	4552432b 	.word	0x4552432b
   2a66c:	30203a43 	.word	0x30203a43
   2a670:	00000000 	.word	0x00000000
   2a674:	532b5441 	.word	0x532b5441
   2a678:	52425041 	.word	0x52425041
   2a67c:	312c333d 	.word	0x312c333d
   2a680:	4f43222c 	.word	0x4f43222c
   2a684:	5059544e 	.word	0x5059544e
   2a688:	222c2245 	.word	0x222c2245
   2a68c:	53525047 	.word	0x53525047
   2a690:	00000d22 	.word	0x00000d22
   2a694:	432b5441 	.word	0x432b5441
   2a698:	3f53504f 	.word	0x3f53504f
   2a69c:	0000000d 	.word	0x0000000d
   2a6a0:	504f432b 	.word	0x504f432b
   2a6a4:	00003a53 	.word	0x00003a53
   2a6a8:	41454449 	.word	0x41454449
   2a6ac:	00000000 	.word	0x00000000
   2a6b0:	532b5441 	.word	0x532b5441
   2a6b4:	52425041 	.word	0x52425041
   2a6b8:	312c333d 	.word	0x312c333d
   2a6bc:	5041222c 	.word	0x5041222c
   2a6c0:	222c224e 	.word	0x222c224e
   2a6c4:	65746e69 	.word	0x65746e69
   2a6c8:	74656e72 	.word	0x74656e72
   2a6cc:	00000d22 	.word	0x00000d22
   2a6d0:	41444f56 	.word	0x41444f56
   2a6d4:	00000000 	.word	0x00000000
   2a6d8:	532b5441 	.word	0x532b5441
   2a6dc:	52425041 	.word	0x52425041
   2a6e0:	312c333d 	.word	0x312c333d
   2a6e4:	5041222c 	.word	0x5041222c
   2a6e8:	222c224e 	.word	0x222c224e
   2a6ec:	22777777 	.word	0x22777777
   2a6f0:	0000000d 	.word	0x0000000d
   2a6f4:	4c4e5342 	.word	0x4c4e5342
   2a6f8:	00000000 	.word	0x00000000
   2a6fc:	532b5441 	.word	0x532b5441
   2a700:	52425041 	.word	0x52425041
   2a704:	312c333d 	.word	0x312c333d
   2a708:	5041222c 	.word	0x5041222c
   2a70c:	222c224e 	.word	0x222c224e
   2a710:	6c6e7362 	.word	0x6c6e7362
   2a714:	2274656e 	.word	0x2274656e
   2a718:	0000000d 	.word	0x0000000d
   2a71c:	54524941 	.word	0x54524941
   2a720:	00004c45 	.word	0x00004c45
   2a724:	532b5441 	.word	0x532b5441
   2a728:	52425041 	.word	0x52425041
   2a72c:	312c333d 	.word	0x312c333d
   2a730:	5041222c 	.word	0x5041222c
   2a734:	222c224e 	.word	0x222c224e
   2a738:	74726961 	.word	0x74726961
   2a73c:	70676c65 	.word	0x70676c65
   2a740:	632e7372 	.word	0x632e7372
   2a744:	0d226d6f 	.word	0x0d226d6f
   2a748:	00000000 	.word	0x00000000
   2a74c:	532b5441 	.word	0x532b5441
   2a750:	52425041 	.word	0x52425041
   2a754:	312c333d 	.word	0x312c333d
   2a758:	5041222c 	.word	0x5041222c
   2a75c:	222c224e 	.word	0x222c224e
   2a760:	00000d22 	.word	0x00000d22
   2a764:	532b5441 	.word	0x532b5441
   2a768:	52425041 	.word	0x52425041
   2a76c:	312c323d 	.word	0x312c323d
   2a770:	0000000d 	.word	0x0000000d
   2a774:	5041532b 	.word	0x5041532b
   2a778:	203a5242 	.word	0x203a5242
   2a77c:	00302c31 	.word	0x00302c31
   2a780:	5041532b 	.word	0x5041532b
   2a784:	203a5242 	.word	0x203a5242
   2a788:	00312c31 	.word	0x00312c31
   2a78c:	5041532b 	.word	0x5041532b
   2a790:	203a5242 	.word	0x203a5242
   2a794:	00322c31 	.word	0x00322c31
   2a798:	5041532b 	.word	0x5041532b
   2a79c:	203a5242 	.word	0x203a5242
   2a7a0:	00332c31 	.word	0x00332c31
   2a7a4:	532b5441 	.word	0x532b5441
   2a7a8:	52425041 	.word	0x52425041
   2a7ac:	312c313d 	.word	0x312c313d
   2a7b0:	0000000d 	.word	0x0000000d
   2a7b4:	532b5441 	.word	0x532b5441
   2a7b8:	52425041 	.word	0x52425041
   2a7bc:	312c303d 	.word	0x312c303d
   2a7c0:	0000000d 	.word	0x0000000d
   2a7c4:	462b5441 	.word	0x462b5441
   2a7c8:	49435054 	.word	0x49435054
   2a7cc:	0d313d44 	.word	0x0d313d44
   2a7d0:	00000000 	.word	0x00000000
   2a7d4:	462b5441 	.word	0x462b5441
   2a7d8:	45535054 	.word	0x45535054
   2a7dc:	223d5652 	.word	0x223d5652
   2a7e0:	0d227325 	.word	0x0d227325
   2a7e4:	00000000 	.word	0x00000000
   2a7e8:	462b5441 	.word	0x462b5441
   2a7ec:	4e555054 	.word	0x4e555054
   2a7f0:	7325223d 	.word	0x7325223d
   2a7f4:	00000d22 	.word	0x00000d22
   2a7f8:	462b5441 	.word	0x462b5441
   2a7fc:	57505054 	.word	0x57505054
   2a800:	7325223d 	.word	0x7325223d
   2a804:	00000d22 	.word	0x00000d22
   2a808:	462b5441 	.word	0x462b5441
   2a80c:	45475054 	.word	0x45475054
   2a810:	4d414e54 	.word	0x4d414e54
   2a814:	25223d45 	.word	0x25223d45
   2a818:	000d2273 	.word	0x000d2273
   2a81c:	462b5441 	.word	0x462b5441
   2a820:	45475054 	.word	0x45475054
   2a824:	54415054 	.word	0x54415054
   2a828:	25223d48 	.word	0x25223d48
   2a82c:	000d2273 	.word	0x000d2273
   2a830:	5054462b 	.word	0x5054462b
   2a834:	455a4953 	.word	0x455a4953
   2a838:	2c31203a 	.word	0x2c31203a
   2a83c:	00000000 	.word	0x00000000
   2a840:	462b5441 	.word	0x462b5441
   2a844:	49535054 	.word	0x49535054
   2a848:	000d455a 	.word	0x000d455a
   2a84c:	5054462b 	.word	0x5054462b
   2a850:	3a544547 	.word	0x3a544547
   2a854:	312c3120 	.word	0x312c3120
   2a858:	00000000 	.word	0x00000000
   2a85c:	462b5441 	.word	0x462b5441
   2a860:	45475054 	.word	0x45475054
   2a864:	0d313d54 	.word	0x0d313d54
   2a868:	00000000 	.word	0x00000000
   2a86c:	462b5441 	.word	0x462b5441
   2a870:	45475054 	.word	0x45475054
   2a874:	2c323d54 	.word	0x2c323d54
   2a878:	000d6425 	.word	0x000d6425
   2a87c:	5054462b 	.word	0x5054462b
   2a880:	3a544547 	.word	0x3a544547
   2a884:	00000020 	.word	0x00000020
   2a888:	434c432b 	.word	0x434c432b
   2a88c:	31203a43 	.word	0x31203a43
   2a890:	322c302c 	.word	0x322c302c
   2a894:	00000000 	.word	0x00000000
   2a898:	434c432b 	.word	0x434c432b
   2a89c:	31203a43 	.word	0x31203a43
   2a8a0:	332c302c 	.word	0x332c302c
   2a8a4:	00000000 	.word	0x00000000
   2a8a8:	434c432b 	.word	0x434c432b
   2a8ac:	31203a43 	.word	0x31203a43
   2a8b0:	302c302c 	.word	0x302c302c
   2a8b4:	00000000 	.word	0x00000000
   2a8b8:	434c432b 	.word	0x434c432b
   2a8bc:	31203a43 	.word	0x31203a43
   2a8c0:	362c302c 	.word	0x362c302c
	...
   2a8cc:	4e4f4d41 	.word	0x4e4f4d41
   2a8d0:	00000000 	.word	0x00000000
   2a8d4:	55475250 	.word	0x55475250
   2a8d8:	00004450 	.word	0x00004450
   2a8dc:	54494157 	.word	0x54494157
   2a8e0:	00000000 	.word	0x00000000
   2a8e4:	4c4c4143 	.word	0x4c4c4143
   2a8e8:	49415720 	.word	0x49415720
   2a8ec:	20474e49 	.word	0x20474e49
   2a8f0:	41534944 	.word	0x41534944
   2a8f4:	3a454c42 	.word	0x3a454c42
   2a8f8:	43555320 	.word	0x43555320
   2a8fc:	53534543 	.word	0x53534543
   2a900:	00000000 	.word	0x00000000
   2a904:	4c4c4143 	.word	0x4c4c4143
   2a908:	49415720 	.word	0x49415720
   2a90c:	4e495454 	.word	0x4e495454
   2a910:	49442047 	.word	0x49442047
   2a914:	4c424153 	.word	0x4c424153
   2a918:	203a2045 	.word	0x203a2045
   2a91c:	4c494146 	.word	0x4c494146
   2a920:	00004445 	.word	0x00004445
   2a924:	52544553 	.word	0x52544553
   2a928:	00005645 	.word	0x00005645
   2a92c:	33422020 	.word	0x33422020
   2a930:	33302d31 	.word	0x33302d31
   2a934:	2d31312d 	.word	0x2d31312d
   2a938:	20203931 	.word	0x20203931
   2a93c:	00000000 	.word	0x00000000
   2a940:	20565746 	.word	0x20565746
   2a944:	6c25203a 	.word	0x6c25203a
   2a948:	73252075 	.word	0x73252075
   2a94c:	5455410a 	.word	0x5455410a
   2a950:	64253a4f 	.word	0x64253a4f
   2a954:	50505320 	.word	0x50505320
   2a958:	2064253a 	.word	0x2064253a
   2a95c:	56505053 	.word	0x56505053
   2a960:	2064253a 	.word	0x2064253a
   2a964:	50514553 	.word	0x50514553
   2a968:	2064253a 	.word	0x2064253a
   2a96c:	3a444e44 	.word	0x3a444e44
   2a970:	46206425 	.word	0x46206425
   2a974:	3a4b4244 	.word	0x3a4b4244
   2a978:	55206425 	.word	0x55206425
   2a97c:	253a4d4f 	.word	0x253a4d4f
   2a980:	564d2064 	.word	0x564d2064
   2a984:	3a505942 	.word	0x3a505942
   2a988:	4d206425 	.word	0x4d206425
   2a98c:	50594256 	.word	0x50594256
   2a990:	6c253a54 	.word	0x6c253a54
   2a994:	45522075 	.word	0x45522075
   2a998:	253a5053 	.word	0x253a5053
   2a99c:	564f2064 	.word	0x564f2064
   2a9a0:	64253a52 	.word	0x64253a52
   2a9a4:	444e5520 	.word	0x444e5520
   2a9a8:	64253a52 	.word	0x64253a52
   2a9ac:	41545320 	.word	0x41545320
   2a9b0:	253a4547 	.word	0x253a4547
   2a9b4:	54532064 	.word	0x54532064
   2a9b8:	3a454d49 	.word	0x3a454d49
   2a9bc:	20756c25 	.word	0x20756c25
   2a9c0:	4d495441 	.word	0x4d495441
   2a9c4:	6c253a45 	.word	0x6c253a45
   2a9c8:	00000075 	.word	0x00000075
   2a9cc:	41454c43 	.word	0x41454c43
   2a9d0:	4c4c4152 	.word	0x4c4c4152
   2a9d4:	00000000 	.word	0x00000000
   2a9d8:	204c4c41 	.word	0x204c4c41
   2a9dc:	52455355 	.word	0x52455355
   2a9e0:	4d554e20 	.word	0x4d554e20
   2a9e4:	53524542 	.word	0x53524542
   2a9e8:	454c4320 	.word	0x454c4320
   2a9ec:	44455241 	.word	0x44455241
   2a9f0:	00000000 	.word	0x00000000
   2a9f4:	41464544 	.word	0x41464544
   2a9f8:	00544c55 	.word	0x00544c55
   2a9fc:	204c4c41 	.word	0x204c4c41
   2aa00:	54544553 	.word	0x54544553
   2aa04:	53474e49 	.word	0x53474e49
   2aa08:	45524120 	.word	0x45524120
   2aa0c:	574f4e20 	.word	0x574f4e20
   2aa10:	43414620 	.word	0x43414620
   2aa14:	59524f54 	.word	0x59524f54
   2aa18:	46454420 	.word	0x46454420
   2aa1c:	544c5541 	.word	0x544c5541
   2aa20:	00000000 	.word	0x00000000
   2aa24:	004d554e 	.word	0x004d554e
   2aa28:	4e206f4e 	.word	0x4e206f4e
   2aa2c:	65626d75 	.word	0x65626d75
   2aa30:	45207372 	.word	0x45207372
   2aa34:	74736978 	.word	0x74736978
   2aa38:	00000073 	.word	0x00000073
   2aa3c:	45534552 	.word	0x45534552
   2aa40:	00000054 	.word	0x00000054
   2aa44:	00444944 	.word	0x00444944
   2aa48:	20756c25 	.word	0x20756c25
   2aa4c:	00007325 	.word	0x00007325
   2aa50:	4f545541 	.word	0x4f545541
   2aa54:	00004e4f 	.word	0x00004e4f
   2aa58:	4f544f4d 	.word	0x4f544f4d
   2aa5c:	55412052 	.word	0x55412052
   2aa60:	3a204f54 	.word	0x3a204f54
   2aa64:	004e4f20 	.word	0x004e4f20
   2aa68:	4f545541 	.word	0x4f545541
   2aa6c:	0046464f 	.word	0x0046464f
   2aa70:	4f544f4d 	.word	0x4f544f4d
   2aa74:	55412052 	.word	0x55412052
   2aa78:	3a204f54 	.word	0x3a204f54
   2aa7c:	46464f20 	.word	0x46464f20
   2aa80:	00000000 	.word	0x00000000
   2aa84:	50594257 	.word	0x50594257
   2aa88:	00004e4f 	.word	0x00004e4f
   2aa8c:	45544157 	.word	0x45544157
   2aa90:	59422052 	.word	0x59422052
   2aa94:	53534150 	.word	0x53534150
   2aa98:	004e4f20 	.word	0x004e4f20
   2aa9c:	50594257 	.word	0x50594257
   2aaa0:	0046464f 	.word	0x0046464f
   2aaa4:	45544157 	.word	0x45544157
   2aaa8:	59422052 	.word	0x59422052
   2aaac:	53534150 	.word	0x53534150
   2aab0:	46464f20 	.word	0x46464f20
   2aab4:	00000000 	.word	0x00000000
   2aab8:	4f505053 	.word	0x4f505053
   2aabc:	0000004e 	.word	0x0000004e
   2aac0:	20505053 	.word	0x20505053
   2aac4:	00004e4f 	.word	0x00004e4f
   2aac8:	4f505053 	.word	0x4f505053
   2aacc:	00004646 	.word	0x00004646
   2aad0:	20505053 	.word	0x20505053
   2aad4:	0046464f 	.word	0x0046464f
   2aad8:	56505053 	.word	0x56505053
   2aadc:	00000000 	.word	0x00000000
   2aae0:	20505053 	.word	0x20505053
   2aae4:	544c4f56 	.word	0x544c4f56
   2aae8:	54455320 	.word	0x54455320
   2aaec:	00000000 	.word	0x00000000
   2aaf0:	4f514553 	.word	0x4f514553
   2aaf4:	0000004e 	.word	0x0000004e
   2aaf8:	50514553 	.word	0x50514553
   2aafc:	004e4f20 	.word	0x004e4f20
   2ab00:	4f514553 	.word	0x4f514553
   2ab04:	00004646 	.word	0x00004646
   2ab08:	50514553 	.word	0x50514553
   2ab0c:	46464f20 	.word	0x46464f20
   2ab10:	00000000 	.word	0x00000000
   2ab14:	00444e44 	.word	0x00444e44
   2ab18:	20444e44 	.word	0x20444e44
   2ab1c:	0000203a 	.word	0x0000203a
   2ab20:	004b4f20 	.word	0x004b4f20
   2ab24:	4b424446 	.word	0x4b424446
   2ab28:	00000000 	.word	0x00000000
   2ab2c:	4b424446 	.word	0x4b424446
   2ab30:	25203a20 	.word	0x25203a20
   2ab34:	00000064 	.word	0x00000064
   2ab38:	454d4f55 	.word	0x454d4f55
   2ab3c:	444f4854 	.word	0x444f4854
   2ab40:	00000000 	.word	0x00000000
   2ab44:	454d4f55 	.word	0x454d4f55
   2ab48:	444f4854 	.word	0x444f4854
   2ab4c:	00203a20 	.word	0x00203a20
   2ab50:	5942564d 	.word	0x5942564d
   2ab54:	004e4f50 	.word	0x004e4f50
   2ab58:	4f544f4d 	.word	0x4f544f4d
   2ab5c:	4f562052 	.word	0x4f562052
   2ab60:	4741544c 	.word	0x4741544c
   2ab64:	59422045 	.word	0x59422045
   2ab68:	53534150 	.word	0x53534150
   2ab6c:	004e4f20 	.word	0x004e4f20
   2ab70:	5942564d 	.word	0x5942564d
   2ab74:	46464f50 	.word	0x46464f50
   2ab78:	00000000 	.word	0x00000000
   2ab7c:	4f544f4d 	.word	0x4f544f4d
   2ab80:	4f562052 	.word	0x4f562052
   2ab84:	4741544c 	.word	0x4741544c
   2ab88:	59422045 	.word	0x59422045
   2ab8c:	53534150 	.word	0x53534150
   2ab90:	46464f20 	.word	0x46464f20
   2ab94:	00000000 	.word	0x00000000
   2ab98:	5942564d 	.word	0x5942564d
   2ab9c:	00005450 	.word	0x00005450
   2aba0:	6f746f4d 	.word	0x6f746f4d
   2aba4:	6f562072 	.word	0x6f562072
   2aba8:	6761746c 	.word	0x6761746c
   2abac:	79422065 	.word	0x79422065
   2abb0:	73736170 	.word	0x73736170
   2abb4:	6d695420 	.word	0x6d695420
   2abb8:	65532065 	.word	0x65532065
   2abbc:	6f742074 	.word	0x6f742074
   2abc0:	00642520 	.word	0x00642520
   2abc4:	50534552 	.word	0x50534552
   2abc8:	00000000 	.word	0x00000000
   2abcc:	50534552 	.word	0x50534552
   2abd0:	00203a20 	.word	0x00203a20
   2abd4:	0052564f 	.word	0x0052564f
   2abd8:	2052564f 	.word	0x2052564f
   2abdc:	20544553 	.word	0x20544553
   2abe0:	00004b4f 	.word	0x00004b4f
   2abe4:	52444e55 	.word	0x52444e55
   2abe8:	00000000 	.word	0x00000000
   2abec:	52444e55 	.word	0x52444e55
   2abf0:	54455320 	.word	0x54455320
   2abf4:	004b4f20 	.word	0x004b4f20
   2abf8:	41545341 	.word	0x41545341
   2abfc:	00000054 	.word	0x00000054
   2ac00:	75253a43 	.word	0x75253a43
   2ac04:	0a75252e 	.word	0x0a75252e
   2ac08:	75253a4e 	.word	0x75253a4e
   2ac0c:	253a4f0a 	.word	0x253a4f0a
   2ac10:	3a550a75 	.word	0x3a550a75
   2ac14:	4f0a7525 	.word	0x4f0a7525
   2ac18:	75253a50 	.word	0x75253a50
   2ac1c:	3a50550a 	.word	0x3a50550a
   2ac20:	00007525 	.word	0x00007525
   2ac24:	4f46564f 	.word	0x4f46564f
   2ac28:	0000004e 	.word	0x0000004e
   2ac2c:	56455250 	.word	0x56455250
   2ac30:	20544e45 	.word	0x20544e45
   2ac34:	5245564f 	.word	0x5245564f
   2ac38:	574f4c46 	.word	0x574f4c46
   2ac3c:	54455320 	.word	0x54455320
   2ac40:	474e4954 	.word	0x474e4954
   2ac44:	004e4f20 	.word	0x004e4f20
   2ac48:	4f46564f 	.word	0x4f46564f
   2ac4c:	00004646 	.word	0x00004646
   2ac50:	56455250 	.word	0x56455250
   2ac54:	20544e45 	.word	0x20544e45
   2ac58:	5245564f 	.word	0x5245564f
   2ac5c:	574f4c46 	.word	0x574f4c46
   2ac60:	54455320 	.word	0x54455320
   2ac64:	474e4954 	.word	0x474e4954
   2ac68:	46464f20 	.word	0x46464f20
   2ac6c:	00000000 	.word	0x00000000
   2ac70:	4f4d324d 	.word	0x4f4d324d
   2ac74:	0000004e 	.word	0x0000004e
   2ac78:	204d324d 	.word	0x204d324d
   2ac7c:	6e727554 	.word	0x6e727554
   2ac80:	4f206465 	.word	0x4f206465
   2ac84:	52202c6e 	.word	0x52202c6e
   2ac88:	746f6d65 	.word	0x746f6d65
   2ac8c:	754e2065 	.word	0x754e2065
   2ac90:	7265626d 	.word	0x7265626d
   2ac94:	726c4120 	.word	0x726c4120
   2ac98:	79646165 	.word	0x79646165
   2ac9c:	72655620 	.word	0x72655620
   2aca0:	65696669 	.word	0x65696669
   2aca4:	00000064 	.word	0x00000064
   2aca8:	6f727245 	.word	0x6f727245
   2acac:	4d203a72 	.word	0x4d203a72
   2acb0:	52204d32 	.word	0x52204d32
   2acb4:	746f6d65 	.word	0x746f6d65
   2acb8:	754e2065 	.word	0x754e2065
   2acbc:	7265626d 	.word	0x7265626d
   2acc0:	746f4e20 	.word	0x746f4e20
   2acc4:	65725020 	.word	0x65725020
   2acc8:	746e6573 	.word	0x746e6573
   2accc:	00000000 	.word	0x00000000
   2acd0:	4f4d324d 	.word	0x4f4d324d
   2acd4:	00004646 	.word	0x00004646
   2acd8:	204d324d 	.word	0x204d324d
   2acdc:	54544553 	.word	0x54544553
   2ace0:	20474e49 	.word	0x20474e49
   2ace4:	0046464f 	.word	0x0046464f
   2ace8:	54415453 	.word	0x54415453
   2acec:	00005355 	.word	0x00005355
   2acf0:	45544c41 	.word	0x45544c41
   2acf4:	54414e52 	.word	0x54414e52
   2acf8:	554e2045 	.word	0x554e2045
   2acfc:	5245424d 	.word	0x5245424d
   2ad00:	004e4f20 	.word	0x004e4f20
   2ad04:	45544c41 	.word	0x45544c41
   2ad08:	54414e52 	.word	0x54414e52
   2ad0c:	554e2045 	.word	0x554e2045
   2ad10:	5245424d 	.word	0x5245424d
   2ad14:	544f4e20 	.word	0x544f4e20
   2ad18:	45525020 	.word	0x45525020
   2ad1c:	544e4553 	.word	0x544e4553
   2ad20:	00000000 	.word	0x00000000
   2ad24:	464f4d41 	.word	0x464f4d41
   2ad28:	00000046 	.word	0x00000046
   2ad2c:	45544c41 	.word	0x45544c41
   2ad30:	54414e52 	.word	0x54414e52
   2ad34:	4f4d2045 	.word	0x4f4d2045
   2ad38:	454c4942 	.word	0x454c4942
   2ad3c:	4d554e20 	.word	0x4d554e20
   2ad40:	20524542 	.word	0x20524542
   2ad44:	0046464f 	.word	0x0046464f
   2ad48:	464f434e 	.word	0x464f434e
   2ad4c:	00000046 	.word	0x00000046
   2ad50:	43204f4e 	.word	0x43204f4e
   2ad54:	204c4c41 	.word	0x204c4c41
   2ad58:	54544553 	.word	0x54544553
   2ad5c:	20474e49 	.word	0x20474e49
   2ad60:	0046464f 	.word	0x0046464f
   2ad64:	54544547 	.word	0x54544547
   2ad68:	00454d49 	.word	0x00454d49
   2ad6c:	454d4954 	.word	0x454d4954
   2ad70:	25203a20 	.word	0x25203a20
   2ad74:	75253a75 	.word	0x75253a75
   2ad78:	00000000 	.word	0x00000000
   2ad7c:	54544553 	.word	0x54544553
   2ad80:	00454d49 	.word	0x00454d49
   2ad84:	4954434e 	.word	0x4954434e
   2ad88:	0000454d 	.word	0x0000454d
   2ad8c:	0000002d 	.word	0x0000002d
   2ad90:	0000003a 	.word	0x0000003a
   2ad94:	43204f4e 	.word	0x43204f4e
   2ad98:	204c4c41 	.word	0x204c4c41
   2ad9c:	494d4954 	.word	0x494d4954
   2ada0:	2053474e 	.word	0x2053474e
   2ada4:	00544553 	.word	0x00544553
   2ada8:	47415453 	.word	0x47415453
   2adac:	00000045 	.word	0x00000045
   2adb0:	4c4c4143 	.word	0x4c4c4143
   2adb4:	41545320 	.word	0x41545320
   2adb8:	53204547 	.word	0x53204547
   2adbc:	54205445 	.word	0x54205445
   2adc0:	203a204f 	.word	0x203a204f
   2adc4:	00006425 	.word	0x00006425
   2adc8:	52415453 	.word	0x52415453
   2adcc:	454d4954 	.word	0x454d4954
   2add0:	00000000 	.word	0x00000000
   2add4:	41545320 	.word	0x41545320
   2add8:	4d495452 	.word	0x4d495452
   2addc:	45532045 	.word	0x45532045
   2ade0:	4f542054 	.word	0x4f542054
   2ade4:	25203a20 	.word	0x25203a20
   2ade8:	00000064 	.word	0x00000064
   2adec:	4f545541 	.word	0x4f545541
   2adf0:	454d4954 	.word	0x454d4954
   2adf4:	00000000 	.word	0x00000000
   2adf8:	54554120 	.word	0x54554120
   2adfc:	4d49544f 	.word	0x4d49544f
   2ae00:	45532045 	.word	0x45532045
   2ae04:	4f542054 	.word	0x4f542054
   2ae08:	25203a20 	.word	0x25203a20
   2ae0c:	00000064 	.word	0x00000064
   2ae10:	004c4142 	.word	0x004c4142
   2ae14:	002b504d 	.word	0x002b504d
   2ae18:	4f4e2050 	.word	0x4f4e2050
   2ae1c:	44444120 	.word	0x44444120
   2ae20:	00444544 	.word	0x00444544
   2ae24:	002b534d 	.word	0x002b534d
   2ae28:	4f4e2053 	.word	0x4f4e2053
   2ae2c:	44444120 	.word	0x44444120
   2ae30:	00444544 	.word	0x00444544
   2ae34:	00002b4d 	.word	0x00002b4d
   2ae38:	49424f4d 	.word	0x49424f4d
   2ae3c:	4e20454c 	.word	0x4e20454c
   2ae40:	00003a4f 	.word	0x00003a4f
   2ae44:	0000000a 	.word	0x0000000a
   2ae48:	45444441 	.word	0x45444441
   2ae4c:	55532044 	.word	0x55532044
   2ae50:	53454343 	.word	0x53454343
   2ae54:	4c554653 	.word	0x4c554653
   2ae58:	0000594c 	.word	0x0000594c
   2ae5c:	00002d4d 	.word	0x00002d4d
   2ae60:	4f4d4552 	.word	0x4f4d4552
   2ae64:	20444556 	.word	0x20444556
   2ae68:	43435553 	.word	0x43435553
   2ae6c:	46535345 	.word	0x46535345
   2ae70:	594c4c55 	.word	0x594c4c55
   2ae74:	00000000 	.word	0x00000000
   2ae78:	002b4d41 	.word	0x002b4d41
   2ae7c:	45544c41 	.word	0x45544c41
   2ae80:	54414e52 	.word	0x54414e52
   2ae84:	4f4d2045 	.word	0x4f4d2045
   2ae88:	454c4942 	.word	0x454c4942
   2ae8c:	44444120 	.word	0x44444120
   2ae90:	43555320 	.word	0x43555320
   2ae94:	53534543 	.word	0x53534543
   2ae98:	00000000 	.word	0x00000000
   2ae9c:	002b4d4d 	.word	0x002b4d4d
   2aea0:	204d324d 	.word	0x204d324d
   2aea4:	202e4f4e 	.word	0x202e4f4e
   2aea8:	45444441 	.word	0x45444441
   2aeac:	00000044 	.word	0x00000044
   2aeb0:	002b524d 	.word	0x002b524d
   2aeb4:	204d324d 	.word	0x204d324d
   2aeb8:	4f4d4552 	.word	0x4f4d4552
   2aebc:	4e204554 	.word	0x4e204554
   2aec0:	41202e4f 	.word	0x41202e4f
   2aec4:	44454444 	.word	0x44454444
   2aec8:	00000000 	.word	0x00000000
   2aecc:	4f525245 	.word	0x4f525245
   2aed0:	203a2052 	.word	0x203a2052
   2aed4:	00000000 	.word	0x00000000
   2aed8:	00004e4f 	.word	0x00004e4f
   2aedc:	48502032 	.word	0x48502032
   2aee0:	00455341 	.word	0x00455341
   2aee4:	00004b4f 	.word	0x00004b4f
   2aee8:	4f525245 	.word	0x4f525245
   2aeec:	00000052 	.word	0x00000052
   2aef0:	203a5952 	.word	0x203a5952
   2aef4:	59206425 	.word	0x59206425
   2aef8:	25203a42 	.word	0x25203a42
   2aefc:	52422064 	.word	0x52422064
   2af00:	6425203a 	.word	0x6425203a
   2af04:	3a43410a 	.word	0x3a43410a
   2af08:	0a732520 	.word	0x0a732520
   2af0c:	75716553 	.word	0x75716553
   2af10:	65636e65 	.word	0x65636e65
   2af14:	7325203a 	.word	0x7325203a
   2af18:	746f4d0a 	.word	0x746f4d0a
   2af1c:	203a726f 	.word	0x203a726f
   2af20:	430a7325 	.word	0x430a7325
   2af24:	65727275 	.word	0x65727275
   2af28:	203a746e 	.word	0x203a746e
   2af2c:	0a416425 	.word	0x0a416425
   2af30:	7774654e 	.word	0x7774654e
   2af34:	3a6b726f 	.word	0x3a6b726f
   2af38:	0a642520 	.word	0x0a642520
   2af3c:	74746142 	.word	0x74746142
   2af40:	3a797265 	.word	0x3a797265
   2af44:	25642520 	.word	0x25642520
   2af48:	00000025 	.word	0x00000025
   2af4c:	304d4d56 	.word	0x304d4d56
   2af50:	00000031 	.word	0x00000031
   2af54:	4f544f4d 	.word	0x4f544f4d
   2af58:	00002052 	.word	0x00002052
   2af5c:	0046464f 	.word	0x0046464f
   2af60:	7e75257e 	.word	0x7e75257e
   2af64:	00000000 	.word	0x00000000
   2af68:	2a2a2a2a 	.word	0x2a2a2a2a
   2af6c:	00000000 	.word	0x00000000
   2af70:	20572f46 	.word	0x20572f46
   2af74:	61647055 	.word	0x61647055
   2af78:	43206574 	.word	0x43206574
   2af7c:	6c706d6f 	.word	0x6c706d6f
   2af80:	64657465 	.word	0x64657465
   2af84:	00000000 	.word	0x00000000
   2af88:	20572f46 	.word	0x20572f46
   2af8c:	61647055 	.word	0x61647055
   2af90:	45206574 	.word	0x45206574
   2af94:	726f7272 	.word	0x726f7272
   2af98:	00000000 	.word	0x00000000
   2af9c:	30303030 	.word	0x30303030
   2afa0:	30303030 	.word	0x30303030
   2afa4:	00003030 	.word	0x00003030
   2afa8:	494d4441 	.word	0x494d4441
   2afac:	0000004e 	.word	0x0000004e
   2afb0:	00000023 	.word	0x00000023
   2afb4:	30524d56 	.word	0x30524d56
   2afb8:	00000032 	.word	0x00000032
   2afbc:	204d324d 	.word	0x204d324d
   2afc0:	4e525554 	.word	0x4e525554
   2afc4:	4f204445 	.word	0x4f204445
   2afc8:	0000004e 	.word	0x0000004e
   2afcc:	0000203a 	.word	0x0000203a
   2afd0:	00017d44 	.word	0x00017d44
   2afd4:	00017e2a 	.word	0x00017e2a
   2afd8:	00017e2a 	.word	0x00017e2a
   2afdc:	00017d44 	.word	0x00017d44
   2afe0:	00017e2a 	.word	0x00017e2a
   2afe4:	00017e2a 	.word	0x00017e2a
   2afe8:	00017e2a 	.word	0x00017e2a
   2afec:	00017e2a 	.word	0x00017e2a
   2aff0:	00017e2a 	.word	0x00017e2a
   2aff4:	00017e2a 	.word	0x00017e2a
   2aff8:	00017e2a 	.word	0x00017e2a
   2affc:	00017e2a 	.word	0x00017e2a
   2b000:	00017d44 	.word	0x00017d44
   2b004:	00017e2a 	.word	0x00017e2a
   2b008:	00017e2a 	.word	0x00017e2a
   2b00c:	00017e2a 	.word	0x00017e2a
   2b010:	00017d06 	.word	0x00017d06
   2b014:	00017e2a 	.word	0x00017e2a
   2b018:	00017d44 	.word	0x00017d44
   2b01c:	49524b20 	.word	0x49524b20
   2b020:	414e4853 	.word	0x414e4853
   2b024:	4d532020 	.word	0x4d532020
   2b028:	20545241 	.word	0x20545241
   2b02c:	00000000 	.word	0x00000000
   2b030:	54202020 	.word	0x54202020
   2b034:	4e484345 	.word	0x4e484345
   2b038:	474f4c4f 	.word	0x474f4c4f
   2b03c:	20202059 	.word	0x20202059
   2b040:	00000000 	.word	0x00000000
   2b044:	4f532020 	.word	0x4f532020
   2b048:	41575446 	.word	0x41575446
   2b04c:	56204552 	.word	0x56204552
   2b050:	20205245 	.word	0x20205245
   2b054:	00000000 	.word	0x00000000
   2b058:	33422020 	.word	0x33422020
   2b05c:	33302d31 	.word	0x33302d31
   2b060:	2d31312d 	.word	0x2d31312d
   2b064:	20203931 	.word	0x20203931
   2b068:	00000000 	.word	0x00000000
   2b06c:	00007325 	.word	0x00007325
   2b070:	74696e49 	.word	0x74696e49
   2b074:	696c6169 	.word	0x696c6169
   2b078:	676e697a 	.word	0x676e697a
   2b07c:	202e2e2e 	.word	0x202e2e2e
   2b080:	00000000 	.word	0x00000000
   2b084:	4d4d4f43 	.word	0x4d4d4f43
   2b088:	45444e41 	.word	0x45444e41
   2b08c:	32762052 	.word	0x32762052
   2b090:	20202020 	.word	0x20202020
   2b094:	00000000 	.word	0x00000000
   2b098:	4e4f4850 	.word	0x4e4f4850
   2b09c:	54532045 	.word	0x54532045
   2b0a0:	53555441 	.word	0x53555441
   2b0a4:	20202020 	.word	0x20202020
   2b0a8:	00000000 	.word	0x00000000
   2b0ac:	20204e4f 	.word	0x20204e4f
   2b0b0:	20202020 	.word	0x20202020
   2b0b4:	20202020 	.word	0x20202020
   2b0b8:	20202020 	.word	0x20202020
   2b0bc:	00000000 	.word	0x00000000
   2b0c0:	2046464f 	.word	0x2046464f
   2b0c4:	20202020 	.word	0x20202020
   2b0c8:	20202020 	.word	0x20202020
   2b0cc:	20202020 	.word	0x20202020
   2b0d0:	00000000 	.word	0x00000000
   2b0d4:	20595256 	.word	0x20595256
   2b0d8:	59562020 	.word	0x59562020
   2b0dc:	20202042 	.word	0x20202042
   2b0e0:	20524256 	.word	0x20524256
   2b0e4:	00000000 	.word	0x00000000
   2b0e8:	6c333025 	.word	0x6c333025
   2b0ec:	20202075 	.word	0x20202075
   2b0f0:	00000000 	.word	0x00000000
   2b0f4:	6c333025 	.word	0x6c333025
   2b0f8:	00002075 	.word	0x00002075
   2b0fc:	48502033 	.word	0x48502033
   2b100:	20455341 	.word	0x20455341
   2b104:	3a514553 	.word	0x3a514553
   2b108:	00000000 	.word	0x00000000
   2b10c:	204b4f20 	.word	0x204b4f20
   2b110:	00000000 	.word	0x00000000
   2b114:	52524520 	.word	0x52524520
   2b118:	00000000 	.word	0x00000000
   2b11c:	53414850 	.word	0x53414850
   2b120:	54532045 	.word	0x54532045
   2b124:	3a455441 	.word	0x3a455441
   2b128:	00000000 	.word	0x00000000
   2b12c:	48503320 	.word	0x48503320
   2b130:	00000020 	.word	0x00000020
   2b134:	48503220 	.word	0x48503220
   2b138:	00000020 	.word	0x00000020
   2b13c:	46464f20 	.word	0x46464f20
   2b140:	00000000 	.word	0x00000000
   2b144:	4f544f4d 	.word	0x4f544f4d
   2b148:	203a2052 	.word	0x203a2052
   2b14c:	46464f20 	.word	0x46464f20
   2b150:	20202020 	.word	0x20202020
   2b154:	00000000 	.word	0x00000000
   2b158:	4f544f4d 	.word	0x4f544f4d
   2b15c:	203a2052 	.word	0x203a2052
   2b160:	204e4f20 	.word	0x204e4f20
   2b164:	20202020 	.word	0x20202020
   2b168:	00000000 	.word	0x00000000
   2b16c:	20202020 	.word	0x20202020
   2b170:	20202020 	.word	0x20202020
   2b174:	20202020 	.word	0x20202020
   2b178:	20202020 	.word	0x20202020
   2b17c:	00000000 	.word	0x00000000
   2b180:	4f545541 	.word	0x4f545541
   2b184:	203a2020 	.word	0x203a2020
   2b188:	204e4f20 	.word	0x204e4f20
   2b18c:	20202020 	.word	0x20202020
   2b190:	00000000 	.word	0x00000000
   2b194:	4f545541 	.word	0x4f545541
   2b198:	203a2020 	.word	0x203a2020
   2b19c:	46464f20 	.word	0x46464f20
   2b1a0:	20202020 	.word	0x20202020
   2b1a4:	00000000 	.word	0x00000000
   2b1a8:	4f544f4d 	.word	0x4f544f4d
   2b1ac:	55432052 	.word	0x55432052
   2b1b0:	4e455252 	.word	0x4e455252
   2b1b4:	20203a54 	.word	0x20203a54
   2b1b8:	00000000 	.word	0x00000000
   2b1bc:	6c333025 	.word	0x6c333025
   2b1c0:	30252e75 	.word	0x30252e75
   2b1c4:	20756c32 	.word	0x20756c32
   2b1c8:	20202020 	.word	0x20202020
   2b1cc:	20202020 	.word	0x20202020
   2b1d0:	00202020 	.word	0x00202020
   2b1d4:	52525543 	.word	0x52525543
   2b1d8:	20544e45 	.word	0x20544e45
   2b1dc:	54544553 	.word	0x54544553
   2b1e0:	20474e49 	.word	0x20474e49
   2b1e4:	00000000 	.word	0x00000000
   2b1e8:	5245564f 	.word	0x5245564f
   2b1ec:	203a2020 	.word	0x203a2020
   2b1f0:	6c333025 	.word	0x6c333025
   2b1f4:	30252e75 	.word	0x30252e75
   2b1f8:	20756c32 	.word	0x20756c32
   2b1fc:	00000020 	.word	0x00000020
   2b200:	45444e55 	.word	0x45444e55
   2b204:	203a2052 	.word	0x203a2052
   2b208:	6c333025 	.word	0x6c333025
   2b20c:	30252e75 	.word	0x30252e75
   2b210:	20756c32 	.word	0x20756c32
   2b214:	00000020 	.word	0x00000020
   2b218:	454c2d4f 	.word	0x454c2d4f
   2b21c:	204c4556 	.word	0x204c4556
   2b220:	0000203a 	.word	0x0000203a
   2b224:	48474948 	.word	0x48474948
   2b228:	00002020 	.word	0x00002020
   2b22c:	2044494d 	.word	0x2044494d
   2b230:	00002020 	.word	0x00002020
   2b234:	20574f4c 	.word	0x20574f4c
   2b238:	00002020 	.word	0x00002020
   2b23c:	454c2d55 	.word	0x454c2d55
   2b240:	204c4556 	.word	0x204c4556
   2b244:	0000203a 	.word	0x0000203a
   2b248:	43545243 	.word	0x43545243
   2b24c:	0000204c 	.word	0x0000204c
   2b250:	74746142 	.word	0x74746142
   2b254:	50797265 	.word	0x50797265
   2b258:	203a7265 	.word	0x203a7265
   2b25c:	25257525 	.word	0x25257525
   2b260:	00000020 	.word	0x00000020
   2b264:	4e474953 	.word	0x4e474953
   2b268:	3a204c41 	.word	0x3a204c41
   2b26c:	00000020 	.word	0x00000020
   2b270:	20202020 	.word	0x20202020
   2b274:	00202020 	.word	0x00202020
   2b278:	4f434e49 	.word	0x4f434e49
   2b27c:	474e494d 	.word	0x474e494d
   2b280:	4c414320 	.word	0x4c414320
   2b284:	202e2e4c 	.word	0x202e2e4c
   2b288:	00000000 	.word	0x00000000
   2b28c:	36312d25 	.word	0x36312d25
   2b290:	00000073 	.word	0x00000073
   2b294:	43204e49 	.word	0x43204e49
   2b298:	2e4c4c41 	.word	0x2e4c4c41
   2b29c:	20202e2e 	.word	0x20202e2e
   2b2a0:	20202020 	.word	0x20202020
   2b2a4:	00000000 	.word	0x00000000
   2b2a8:	4c414944 	.word	0x4c414944
   2b2ac:	2e474e49 	.word	0x2e474e49
   2b2b0:	20202e2e 	.word	0x20202e2e
   2b2b4:	20202020 	.word	0x20202020
   2b2b8:	00000000 	.word	0x00000000
   2b2bc:	4f434e49 	.word	0x4f434e49
   2b2c0:	474e494d 	.word	0x474e494d
   2b2c4:	534d5320 	.word	0x534d5320
   2b2c8:	202e2e2e 	.word	0x202e2e2e
   2b2cc:	00000000 	.word	0x00000000
   2b2d0:	4754554f 	.word	0x4754554f
   2b2d4:	474e494f 	.word	0x474e494f
   2b2d8:	534d5320 	.word	0x534d5320
   2b2dc:	202e2e2e 	.word	0x202e2e2e
   2b2e0:	00000000 	.word	0x00000000
   2b2e4:	20574f4c 	.word	0x20574f4c
   2b2e8:	54544142 	.word	0x54544142
   2b2ec:	20595245 	.word	0x20595245
   2b2f0:	20202020 	.word	0x20202020
	...
   2b2fc:	1f1f0000 	.word	0x1f1f0000
   2b300:	00000000 	.word	0x00000000
   2b304:	1f1f1f00 	.word	0x1f1f1f00
   2b308:	00000000 	.word	0x00000000
   2b30c:	1f1f1f1f 	.word	0x1f1f1f1f
   2b310:	1f1f0000 	.word	0x1f1f0000
   2b314:	1f1f1f1f 	.word	0x1f1f1f1f
   2b318:	1f1f1f1f 	.word	0x1f1f1f1f
   2b31c:	1f1f1f1f 	.word	0x1f1f1f1f
   2b320:	000196a2 	.word	0x000196a2
   2b324:	00019112 	.word	0x00019112
   2b328:	00019156 	.word	0x00019156
   2b32c:	000191c4 	.word	0x000191c4
   2b330:	0001921e 	.word	0x0001921e
   2b334:	00019250 	.word	0x00019250
   2b338:	00019370 	.word	0x00019370
   2b33c:	000193e6 	.word	0x000193e6
   2b340:	0001948a 	.word	0x0001948a
   2b344:	0001950c 	.word	0x0001950c
   2b348:	000195d6 	.word	0x000195d6
   2b34c:	000196a0 	.word	0x000196a0
   2b350:	0001952a 	.word	0x0001952a
   2b354:	00019548 	.word	0x00019548
   2b358:	00019566 	.word	0x00019566
   2b35c:	00019584 	.word	0x00019584
   2b360:	000195ac 	.word	0x000195ac
   2b364:	756c255d 	.word	0x756c255d
   2b368:	756c257b 	.word	0x756c257b
   2b36c:	756c257d 	.word	0x756c257d
   2b370:	00000000 	.word	0x00000000
   2b374:	00000002 	.word	0x00000002
   2b378:	00000003 	.word	0x00000003
   2b37c:	00000028 	.word	0x00000028
   2b380:	00000029 	.word	0x00000029
   2b384:	00000004 	.word	0x00000004
   2b388:	00000005 	.word	0x00000005
   2b38c:	00000006 	.word	0x00000006
   2b390:	00000007 	.word	0x00000007
   2b394:	00000020 	.word	0x00000020
   2b398:	00000021 	.word	0x00000021
   2b39c:	00000022 	.word	0x00000022
   2b3a0:	00000023 	.word	0x00000023
   2b3a4:	00000024 	.word	0x00000024
   2b3a8:	00000025 	.word	0x00000025
   2b3ac:	00000026 	.word	0x00000026
   2b3b0:	00000027 	.word	0x00000027
   2b3b4:	00000008 	.word	0x00000008
   2b3b8:	00000009 	.word	0x00000009
   2b3bc:	0000000a 	.word	0x0000000a
   2b3c0:	0000000b 	.word	0x0000000b
   2b3c4:	0001e182 	.word	0x0001e182
   2b3c8:	0001e188 	.word	0x0001e188
   2b3cc:	0001e188 	.word	0x0001e188
   2b3d0:	0001e188 	.word	0x0001e188
   2b3d4:	0001e188 	.word	0x0001e188
   2b3d8:	0001e188 	.word	0x0001e188
   2b3dc:	0001e188 	.word	0x0001e188
   2b3e0:	0001e188 	.word	0x0001e188
   2b3e4:	0001e188 	.word	0x0001e188
   2b3e8:	0001e188 	.word	0x0001e188
   2b3ec:	0001e188 	.word	0x0001e188
   2b3f0:	0001e188 	.word	0x0001e188
   2b3f4:	0001e188 	.word	0x0001e188
   2b3f8:	0001e188 	.word	0x0001e188
   2b3fc:	0001e188 	.word	0x0001e188
   2b400:	0001e188 	.word	0x0001e188
   2b404:	0001e160 	.word	0x0001e160
   2b408:	0001e188 	.word	0x0001e188
   2b40c:	0001e188 	.word	0x0001e188
   2b410:	0001e188 	.word	0x0001e188
   2b414:	0001e188 	.word	0x0001e188
   2b418:	0001e188 	.word	0x0001e188
   2b41c:	0001e188 	.word	0x0001e188
   2b420:	0001e188 	.word	0x0001e188
   2b424:	0001e188 	.word	0x0001e188
   2b428:	0001e188 	.word	0x0001e188
   2b42c:	0001e188 	.word	0x0001e188
   2b430:	0001e188 	.word	0x0001e188
   2b434:	0001e188 	.word	0x0001e188
   2b438:	0001e188 	.word	0x0001e188
   2b43c:	0001e188 	.word	0x0001e188
   2b440:	0001e188 	.word	0x0001e188
   2b444:	0001e17c 	.word	0x0001e17c
   2b448:	0001e188 	.word	0x0001e188
   2b44c:	0001e188 	.word	0x0001e188
   2b450:	0001e188 	.word	0x0001e188
   2b454:	0001e188 	.word	0x0001e188
   2b458:	0001e188 	.word	0x0001e188
   2b45c:	0001e188 	.word	0x0001e188
   2b460:	0001e188 	.word	0x0001e188
   2b464:	0001e188 	.word	0x0001e188
   2b468:	0001e188 	.word	0x0001e188
   2b46c:	0001e188 	.word	0x0001e188
   2b470:	0001e188 	.word	0x0001e188
   2b474:	0001e188 	.word	0x0001e188
   2b478:	0001e188 	.word	0x0001e188
   2b47c:	0001e188 	.word	0x0001e188
   2b480:	0001e188 	.word	0x0001e188
   2b484:	0001e176 	.word	0x0001e176
   2b488:	0001e11e 	.word	0x0001e11e
   2b48c:	0001e134 	.word	0x0001e134
   2b490:	0001e14a 	.word	0x0001e14a
   2b494:	0001e104 	.word	0x0001e104
   2b498:	42000800 	.word	0x42000800
   2b49c:	42000c00 	.word	0x42000c00
   2b4a0:	42001000 	.word	0x42001000
   2b4a4:	42001400 	.word	0x42001400
   2b4a8:	42001800 	.word	0x42001800
   2b4ac:	42001c00 	.word	0x42001c00
   2b4b0:	454c4449 	.word	0x454c4449
   2b4b4:	00000000 	.word	0x00000000
   2b4b8:	20726d54 	.word	0x20726d54
   2b4bc:	00637653 	.word	0x00637653
   2b4c0:	00021cb0 	.word	0x00021cb0
   2b4c4:	00021cb0 	.word	0x00021cb0
   2b4c8:	00021cb0 	.word	0x00021cb0
   2b4cc:	00021d3e 	.word	0x00021d3e
   2b4d0:	00021d08 	.word	0x00021d08
   2b4d4:	00021d32 	.word	0x00021d32
   2b4d8:	00021cb0 	.word	0x00021cb0
   2b4dc:	00021cb0 	.word	0x00021cb0
   2b4e0:	00021d3e 	.word	0x00021d3e
   2b4e4:	00021d08 	.word	0x00021d08

0002b4e8 <_tcc_intflag>:
   2b4e8:	00000001 00000002 00000004 00000008     ................
   2b4f8:	00001000 00002000 00004000 00008000     ..... ...@......
   2b508:	00010000 00020000 00040000 00080000     ................
   2b518:	0c0b0a09 00000e0d 0002339c 0002339c     .........3...3..
   2b528:	00023390 0002339c 00023390 0002336a     .3...3...3..j3..
   2b538:	0002336a 0002339c 0002339c 0002339c     j3...3...3...3..
   2b548:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b558:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b568:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b578:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b588:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b598:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b5a8:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b5b8:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b5c8:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b5d8:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b5e8:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b5f8:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b608:	0002339c 0002339c 0002339c 0002339c     .3...3...3...3..
   2b618:	0002339c 0002339c 00023390 00023390     .3...3...3...3..
   2b628:	000233a6 000233a6 000233a6 000233a6     .3...3...3...3..
   2b638:	41744545 50524f4d 456d752e 00024716     EEtAMORP.umE.G..
   2b648:	00024790 00024790 00024734 0002472e     .G...G..4G...G..
   2b658:	0002473a 0002471c 00024740 00024776     :G...G..@G..vG..
   2b668:	00024a5c 00024aac 00024aac 00024aa8     \J...J...J...J..
   2b678:	00024a4e 00024a6e 00024a3e 00024a80     NJ..nJ..>J...J..
   2b688:	00024a92 00024afa 00024b28 00024b28     .J...J..(K..(K..
   2b698:	00024b24 00024af4 00024b00 00024aee     $K...J...K...J..
   2b6a8:	00024b06 00024b0c 00776f70 74727173     .K...K..pow.sqrt
	...

0002b6c0 <TWO52>:
   2b6c0:	00000000 43300000 00000000 c3300000     ......0C......0.
   2b6d0:	00027524 000274f4 00027506 00027448     $u...t...u..Ht..
   2b6e0:	00027506 000274ea 00027506 00027448     .u...t...u..Ht..
   2b6f0:	000274f4 000274f4 000274ea 00027448     .t...t...t..Ht..
   2b700:	00027450 00027450 00027450 0002750c     Pt..Pt..Pt...u..
   2b710:	000274f4 000274f4 000274c8 000275ac     .t...t...t...u..
   2b720:	000274c8 000274ea 000274c8 000275ac     .t...t...t...u..
   2b730:	000274f4 000274f4 000274ea 000275ac     .t...t...t...u..
   2b740:	00027450 00027450 00027450 000275b6     Pt..Pt..Pt...u..
   2b750:	00027754 000276a4 000276a4 000276a2     Tw...v...v...v..
   2b760:	00027746 00027746 0002773c 000276a2     Fw..Fw..<w...v..
   2b770:	00027746 0002773c 00027746 000276a2     Fw..<w..Fw...v..
   2b780:	0002774c 0002774c 0002774c 000277dc     Lw..Lw..Lw...w..
   2b790:	0002810c 000280ee 000280a8 00027fc6     ................
   2b7a0:	000280a8 000280e0 000280a8 00027fc6     ................
   2b7b0:	000280ee 000280ee 000280e0 00027fc6     ................
   2b7c0:	00027fbe 00027fbe 00027fbe 00028324     ............$...
   2b7d0:	0002896c 0002882c 0002882c 00028828     l...,...,...(...
   2b7e0:	00028944 00028944 00028936 00028828     D...D...6...(...
   2b7f0:	00028944 00028936 00028944 00028828     D...6...D...(...
   2b800:	0002894c 0002894c 0002894c 00028b50     L...L...L...P...
   2b810:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   2b820:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   2b830:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

0002b83f <_ctype_>:
   2b83f:	20202000 20202020 28282020 20282828     .         ((((( 
   2b84f:	20202020 20202020 20202020 20202020                     
   2b85f:	10108820 10101010 10101010 10101010      ...............
   2b86f:	04040410 04040404 10040404 10101010     ................
   2b87f:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2b88f:	01010101 01010101 01010101 10101010     ................
   2b89f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2b8af:	02020202 02020202 02020202 10101010     ................
   2b8bf:	00000020 00000000 00000000 00000000      ...............
	...
   2b93f:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   2b94f:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   2b95f:	30004645 34333231 38373635 63626139     EF.0123456789abc
   2b96f:	00666564 c0b5f800                                def..

0002b974 <_init>:
   2b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b976:	46c0      	nop			; (mov r8, r8)
   2b978:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b97a:	bc08      	pop	{r3}
   2b97c:	469e      	mov	lr, r3
   2b97e:	4770      	bx	lr

0002b980 <__init_array_start>:
   2b980:	000100dd 	.word	0x000100dd

0002b984 <_fini>:
   2b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b986:	46c0      	nop			; (mov r8, r8)
   2b988:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b98a:	bc08      	pop	{r3}
   2b98c:	469e      	mov	lr, r3
   2b98e:	4770      	bx	lr

0002b990 <__fini_array_start>:
   2b990:	000100b5 	.word	0x000100b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0001 0000                                   ....

2000002c <__tracebuffersize__>:
2000002c:	0400 0000                                   ....

20000030 <__fdlib_version>:
20000030:	0001 0000                                   ....

20000034 <_impure_ptr>:
20000034:	0038 2000                                   8.. 

20000038 <impure_data>:
	...

20000098 <__global_locale>:
20000098:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000118:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000138:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000158:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000178:	9bed 0002 95fd 0002 0000 0000 b83f 0002     ............?...
20000188:	b818 0002 b945 0002 b945 0002 b945 0002     ....E...E...E...
20000198:	b945 0002 b945 0002 b945 0002 b945 0002     E...E...E...E...
200001a8:	b945 0002 b945 0002 ffff ffff ffff ffff     E...E...........
200001b8:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001e0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
