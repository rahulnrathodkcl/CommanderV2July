
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019d44  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00019d44  00019d44  00029d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  00019d4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000073c  20000200  00019f50  00030200  2**4
                  ALLOC
  4 .stack        00002004  2000093c  0001a68c  00030200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
  7 .debug_info   0007ea29  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008a92  00000000  00000000  000aeca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a775  00000000  00000000  000b7738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001d10  00000000  00000000  000c1ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001b18  00000000  00000000  000c3bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00028767  00000000  00000000  000c56d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027849  00000000  00000000  000ede3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a22ae  00000000  00000000  00115685  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007214  00000000  00000000  001b7934  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 29 00 20 a1 3c 01 00 99 3d 01 00 99 3d 01 00     @). .<...=...=..
	...
      2c:	45 dd 00 00 00 00 00 00 00 00 00 00 71 de 00 00     E...........q...
      3c:	b9 de 00 00 99 3d 01 00 99 3d 01 00 f9 03 01 00     .....=...=......
      4c:	c1 d6 00 00 21 14 01 00 99 3d 01 00 59 cc 00 00     ....!....=..Y...
      5c:	99 3d 01 00 8d 14 01 00 19 12 01 00 31 12 01 00     .=..........1...
      6c:	49 12 01 00 61 12 01 00 79 12 01 00 91 12 01 00     I...a...y.......
      7c:	1d 04 01 00 31 04 01 00 45 04 01 00 d5 04 01 00     ....1...E.......
      8c:	e9 04 01 00 fd 04 01 00 11 05 01 00 25 05 01 00     ............%...
      9c:	e1 ca 00 00 e5 17 01 00 1d cc 00 00 99 3d 01 00     .............=..
      ac:	99 3d 01 00 00 00 00 00                             .=......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000200 	.word	0x20000200
      d4:	00000000 	.word	0x00000000
      d8:	00019d4c 	.word	0x00019d4c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000204 	.word	0x20000204
     108:	00019d4c 	.word	0x00019d4c
     10c:	00019d4c 	.word	0x00019d4c
     110:	00000000 	.word	0x00000000

00000114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
     114:	b590      	push	{r4, r7, lr}
     116:	b083      	sub	sp, #12
     118:	af00      	add	r7, sp, #0
	enum status_code error_code = eeprom_emulator_init();
     11a:	1dfc      	adds	r4, r7, #7
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <configure_eeprom+0x34>)
     11e:	4798      	blx	r3
     120:	0003      	movs	r3, r0
     122:	7023      	strb	r3, [r4, #0]
	if (error_code == STATUS_ERR_NO_MEMORY)
     124:	1dfb      	adds	r3, r7, #7
     126:	781b      	ldrb	r3, [r3, #0]
     128:	2b16      	cmp	r3, #22
     12a:	d100      	bne.n	12e <configure_eeprom+0x1a>
	{
		while (true);
     12c:	e7fe      	b.n	12c <configure_eeprom+0x18>
	}
	else if (error_code != STATUS_OK)
     12e:	1dfb      	adds	r3, r7, #7
     130:	781b      	ldrb	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d003      	beq.n	13e <configure_eeprom+0x2a>
	{
		eeprom_emulator_erase_memory();
     136:	4b05      	ldr	r3, [pc, #20]	; (14c <configure_eeprom+0x38>)
     138:	4798      	blx	r3
		eeprom_emulator_init();
     13a:	4b03      	ldr	r3, [pc, #12]	; (148 <configure_eeprom+0x34>)
     13c:	4798      	blx	r3
	}
}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	46bd      	mov	sp, r7
     142:	b003      	add	sp, #12
     144:	bd90      	pop	{r4, r7, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	0001285d 	.word	0x0001285d
     14c:	00012945 	.word	0x00012945

00000150 <init_eeprom>:

void init_eeprom(void)
{
     150:	b580      	push	{r7, lr}
     152:	af00      	add	r7, sp, #0
	configure_eeprom();
     154:	4bf6      	ldr	r3, [pc, #984]	; (530 <init_eeprom+0x3e0>)
     156:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
     158:	4bf6      	ldr	r3, [pc, #984]	; (534 <init_eeprom+0x3e4>)
     15a:	0019      	movs	r1, r3
     15c:	2000      	movs	r0, #0
     15e:	4bf6      	ldr	r3, [pc, #984]	; (538 <init_eeprom+0x3e8>)
     160:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
     162:	49f4      	ldr	r1, [pc, #976]	; (534 <init_eeprom+0x3e4>)
     164:	4bf5      	ldr	r3, [pc, #980]	; (53c <init_eeprom+0x3ec>)
     166:	2218      	movs	r2, #24
     168:	0018      	movs	r0, r3
     16a:	4bf5      	ldr	r3, [pc, #980]	; (540 <init_eeprom+0x3f0>)
     16c:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
     16e:	4bf3      	ldr	r3, [pc, #972]	; (53c <init_eeprom+0x3ec>)
     170:	791b      	ldrb	r3, [r3, #4]
     172:	2b55      	cmp	r3, #85	; 0x55
     174:	d029      	beq.n	1ca <init_eeprom+0x7a>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
     176:	4bf1      	ldr	r3, [pc, #964]	; (53c <init_eeprom+0x3ec>)
     178:	2200      	movs	r2, #0
     17a:	601a      	str	r2, [r3, #0]
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
     17c:	4bef      	ldr	r3, [pc, #956]	; (53c <init_eeprom+0x3ec>)
     17e:	2255      	movs	r2, #85	; 0x55
     180:	711a      	strb	r2, [r3, #4]
		bootloader_parameter.firmware_download_pending = false;
     182:	4bee      	ldr	r3, [pc, #952]	; (53c <init_eeprom+0x3ec>)
     184:	2200      	movs	r2, #0
     186:	715a      	strb	r2, [r3, #5]
		bootloader_parameter.firmware_update_process_completed = false;
     188:	4bec      	ldr	r3, [pc, #944]	; (53c <init_eeprom+0x3ec>)
     18a:	2200      	movs	r2, #0
     18c:	719a      	strb	r2, [r3, #6]
		bootloader_parameter.firmware_update_error_code = 0;
     18e:	4beb      	ldr	r3, [pc, #940]	; (53c <init_eeprom+0x3ec>)
     190:	2200      	movs	r2, #0
     192:	71da      	strb	r2, [r3, #7]
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
     194:	4beb      	ldr	r3, [pc, #940]	; (544 <init_eeprom+0x3f4>)
     196:	2210      	movs	r2, #16
     198:	2100      	movs	r1, #0
     19a:	0018      	movs	r0, r3
     19c:	4bea      	ldr	r3, [pc, #936]	; (548 <init_eeprom+0x3f8>)
     19e:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
     1a0:	4be8      	ldr	r3, [pc, #928]	; (544 <init_eeprom+0x3f4>)
     1a2:	4aea      	ldr	r2, [pc, #936]	; (54c <init_eeprom+0x3fc>)
     1a4:	ca03      	ldmia	r2!, {r0, r1}
     1a6:	c303      	stmia	r3!, {r0, r1}
     1a8:	8811      	ldrh	r1, [r2, #0]
     1aa:	8019      	strh	r1, [r3, #0]
     1ac:	7892      	ldrb	r2, [r2, #2]
     1ae:	709a      	strb	r2, [r3, #2]
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
     1b0:	49e2      	ldr	r1, [pc, #904]	; (53c <init_eeprom+0x3ec>)
     1b2:	4be0      	ldr	r3, [pc, #896]	; (534 <init_eeprom+0x3e4>)
     1b4:	2218      	movs	r2, #24
     1b6:	0018      	movs	r0, r3
     1b8:	4be1      	ldr	r3, [pc, #900]	; (540 <init_eeprom+0x3f0>)
     1ba:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
     1bc:	4bdd      	ldr	r3, [pc, #884]	; (534 <init_eeprom+0x3e4>)
     1be:	0019      	movs	r1, r3
     1c0:	2000      	movs	r0, #0
     1c2:	4be3      	ldr	r3, [pc, #908]	; (550 <init_eeprom+0x400>)
     1c4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     1c6:	4be3      	ldr	r3, [pc, #908]	; (554 <init_eeprom+0x404>)
     1c8:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
     1ca:	4bda      	ldr	r3, [pc, #872]	; (534 <init_eeprom+0x3e4>)
     1cc:	0019      	movs	r1, r3
     1ce:	2001      	movs	r0, #1
     1d0:	4bd9      	ldr	r3, [pc, #868]	; (538 <init_eeprom+0x3e8>)
     1d2:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
     1d4:	49d7      	ldr	r1, [pc, #860]	; (534 <init_eeprom+0x3e4>)
     1d6:	4be0      	ldr	r3, [pc, #896]	; (558 <init_eeprom+0x408>)
     1d8:	2238      	movs	r2, #56	; 0x38
     1da:	0018      	movs	r0, r3
     1dc:	4bd8      	ldr	r3, [pc, #864]	; (540 <init_eeprom+0x3f0>)
     1de:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
     1e0:	4bdd      	ldr	r3, [pc, #884]	; (558 <init_eeprom+0x408>)
     1e2:	791b      	ldrb	r3, [r3, #4]
     1e4:	2b55      	cmp	r3, #85	; 0x55
     1e6:	d02e      	beq.n	246 <init_eeprom+0xf6>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
     1e8:	4bdb      	ldr	r3, [pc, #876]	; (558 <init_eeprom+0x408>)
     1ea:	2200      	movs	r2, #0
     1ec:	601a      	str	r2, [r3, #0]
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
     1ee:	4bda      	ldr	r3, [pc, #872]	; (558 <init_eeprom+0x408>)
     1f0:	2255      	movs	r2, #85	; 0x55
     1f2:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
     1f4:	4bd9      	ldr	r3, [pc, #868]	; (55c <init_eeprom+0x40c>)
     1f6:	221e      	movs	r2, #30
     1f8:	2100      	movs	r1, #0
     1fa:	0018      	movs	r0, r3
     1fc:	4bd2      	ldr	r3, [pc, #840]	; (548 <init_eeprom+0x3f8>)
     1fe:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
     200:	4ad6      	ldr	r2, [pc, #856]	; (55c <init_eeprom+0x40c>)
     202:	4bd7      	ldr	r3, [pc, #860]	; (560 <init_eeprom+0x410>)
     204:	0010      	movs	r0, r2
     206:	0019      	movs	r1, r3
     208:	2310      	movs	r3, #16
     20a:	001a      	movs	r2, r3
     20c:	4bcc      	ldr	r3, [pc, #816]	; (540 <init_eeprom+0x3f0>)
     20e:	4798      	blx	r3
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
     210:	4bd4      	ldr	r3, [pc, #848]	; (564 <init_eeprom+0x414>)
     212:	2214      	movs	r2, #20
     214:	2100      	movs	r1, #0
     216:	0018      	movs	r0, r3
     218:	4bcb      	ldr	r3, [pc, #812]	; (548 <init_eeprom+0x3f8>)
     21a:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
     21c:	4ad1      	ldr	r2, [pc, #836]	; (564 <init_eeprom+0x414>)
     21e:	4bd2      	ldr	r3, [pc, #840]	; (568 <init_eeprom+0x418>)
     220:	0010      	movs	r0, r2
     222:	0019      	movs	r1, r3
     224:	230b      	movs	r3, #11
     226:	001a      	movs	r2, r3
     228:	4bc5      	ldr	r3, [pc, #788]	; (540 <init_eeprom+0x3f0>)
     22a:	4798      	blx	r3
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
     22c:	49ca      	ldr	r1, [pc, #808]	; (558 <init_eeprom+0x408>)
     22e:	4bc1      	ldr	r3, [pc, #772]	; (534 <init_eeprom+0x3e4>)
     230:	2238      	movs	r2, #56	; 0x38
     232:	0018      	movs	r0, r3
     234:	4bc2      	ldr	r3, [pc, #776]	; (540 <init_eeprom+0x3f0>)
     236:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
     238:	4bbe      	ldr	r3, [pc, #760]	; (534 <init_eeprom+0x3e4>)
     23a:	0019      	movs	r1, r3
     23c:	2001      	movs	r0, #1
     23e:	4bc4      	ldr	r3, [pc, #784]	; (550 <init_eeprom+0x400>)
     240:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     242:	4bc4      	ldr	r3, [pc, #784]	; (554 <init_eeprom+0x404>)
     244:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
     246:	4bbb      	ldr	r3, [pc, #748]	; (534 <init_eeprom+0x3e4>)
     248:	0019      	movs	r1, r3
     24a:	2002      	movs	r0, #2
     24c:	4bba      	ldr	r3, [pc, #744]	; (538 <init_eeprom+0x3e8>)
     24e:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
     250:	49b8      	ldr	r1, [pc, #736]	; (534 <init_eeprom+0x3e4>)
     252:	4bc6      	ldr	r3, [pc, #792]	; (56c <init_eeprom+0x41c>)
     254:	2238      	movs	r2, #56	; 0x38
     256:	0018      	movs	r0, r3
     258:	4bb9      	ldr	r3, [pc, #740]	; (540 <init_eeprom+0x3f0>)
     25a:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
     25c:	4bc3      	ldr	r3, [pc, #780]	; (56c <init_eeprom+0x41c>)
     25e:	791b      	ldrb	r3, [r3, #4]
     260:	2b55      	cmp	r3, #85	; 0x55
     262:	d03c      	beq.n	2de <init_eeprom+0x18e>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
     264:	4bc1      	ldr	r3, [pc, #772]	; (56c <init_eeprom+0x41c>)
     266:	2200      	movs	r2, #0
     268:	601a      	str	r2, [r3, #0]
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
     26a:	4bc0      	ldr	r3, [pc, #768]	; (56c <init_eeprom+0x41c>)
     26c:	2255      	movs	r2, #85	; 0x55
     26e:	711a      	strb	r2, [r3, #4]
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
     270:	4bbf      	ldr	r3, [pc, #764]	; (570 <init_eeprom+0x420>)
     272:	2210      	movs	r2, #16
     274:	2100      	movs	r1, #0
     276:	0018      	movs	r0, r3
     278:	4bb3      	ldr	r3, [pc, #716]	; (548 <init_eeprom+0x3f8>)
     27a:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
     27c:	4bbb      	ldr	r3, [pc, #748]	; (56c <init_eeprom+0x41c>)
     27e:	2205      	movs	r2, #5
     280:	49bc      	ldr	r1, [pc, #752]	; (574 <init_eeprom+0x424>)
     282:	189b      	adds	r3, r3, r2
     284:	2210      	movs	r2, #16
     286:	0018      	movs	r0, r3
     288:	4bad      	ldr	r3, [pc, #692]	; (540 <init_eeprom+0x3f0>)
     28a:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_password));
     28c:	4bba      	ldr	r3, [pc, #744]	; (578 <init_eeprom+0x428>)
     28e:	2210      	movs	r2, #16
     290:	2100      	movs	r1, #0
     292:	0018      	movs	r0, r3
     294:	4bac      	ldr	r3, [pc, #688]	; (548 <init_eeprom+0x3f8>)
     296:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
     298:	4ab8      	ldr	r2, [pc, #736]	; (57c <init_eeprom+0x42c>)
     29a:	4bb9      	ldr	r3, [pc, #740]	; (580 <init_eeprom+0x430>)
     29c:	0010      	movs	r0, r2
     29e:	0019      	movs	r1, r3
     2a0:	230a      	movs	r3, #10
     2a2:	001a      	movs	r2, r3
     2a4:	4ba6      	ldr	r3, [pc, #664]	; (540 <init_eeprom+0x3f0>)
     2a6:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
     2a8:	4bb3      	ldr	r3, [pc, #716]	; (578 <init_eeprom+0x428>)
     2aa:	2210      	movs	r2, #16
     2ac:	2100      	movs	r1, #0
     2ae:	0018      	movs	r0, r3
     2b0:	4ba5      	ldr	r3, [pc, #660]	; (548 <init_eeprom+0x3f8>)
     2b2:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
     2b4:	4ab0      	ldr	r2, [pc, #704]	; (578 <init_eeprom+0x428>)
     2b6:	4bb3      	ldr	r3, [pc, #716]	; (584 <init_eeprom+0x434>)
     2b8:	0010      	movs	r0, r2
     2ba:	0019      	movs	r1, r3
     2bc:	230d      	movs	r3, #13
     2be:	001a      	movs	r2, r3
     2c0:	4b9f      	ldr	r3, [pc, #636]	; (540 <init_eeprom+0x3f0>)
     2c2:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
     2c4:	49a9      	ldr	r1, [pc, #676]	; (56c <init_eeprom+0x41c>)
     2c6:	4b9b      	ldr	r3, [pc, #620]	; (534 <init_eeprom+0x3e4>)
     2c8:	2238      	movs	r2, #56	; 0x38
     2ca:	0018      	movs	r0, r3
     2cc:	4b9c      	ldr	r3, [pc, #624]	; (540 <init_eeprom+0x3f0>)
     2ce:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
     2d0:	4b98      	ldr	r3, [pc, #608]	; (534 <init_eeprom+0x3e4>)
     2d2:	0019      	movs	r1, r3
     2d4:	2002      	movs	r0, #2
     2d6:	4b9e      	ldr	r3, [pc, #632]	; (550 <init_eeprom+0x400>)
     2d8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     2da:	4b9e      	ldr	r3, [pc, #632]	; (554 <init_eeprom+0x404>)
     2dc:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
     2de:	4b95      	ldr	r3, [pc, #596]	; (534 <init_eeprom+0x3e4>)
     2e0:	0019      	movs	r1, r3
     2e2:	2008      	movs	r0, #8
     2e4:	4b94      	ldr	r3, [pc, #592]	; (538 <init_eeprom+0x3e8>)
     2e6:	4798      	blx	r3
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
     2e8:	4aa7      	ldr	r2, [pc, #668]	; (588 <init_eeprom+0x438>)
     2ea:	4b92      	ldr	r3, [pc, #584]	; (534 <init_eeprom+0x3e4>)
     2ec:	0010      	movs	r0, r2
     2ee:	0019      	movs	r1, r3
     2f0:	2308      	movs	r3, #8
     2f2:	001a      	movs	r2, r3
     2f4:	4b92      	ldr	r3, [pc, #584]	; (540 <init_eeprom+0x3f0>)
     2f6:	4798      	blx	r3
	if (user_count_struct.u8tfirst_time_write_ee != 85)
     2f8:	4ba3      	ldr	r3, [pc, #652]	; (588 <init_eeprom+0x438>)
     2fa:	781b      	ldrb	r3, [r3, #0]
     2fc:	2b55      	cmp	r3, #85	; 0x55
     2fe:	d01d      	beq.n	33c <init_eeprom+0x1ec>
	{
		user_count_struct.u8tfirst_time_write_ee = 85;
     300:	4ba1      	ldr	r3, [pc, #644]	; (588 <init_eeprom+0x438>)
     302:	2255      	movs	r2, #85	; 0x55
     304:	701a      	strb	r2, [r3, #0]
		user_count_struct.total_user_no_count    = 15;
     306:	4ba0      	ldr	r3, [pc, #640]	; (588 <init_eeprom+0x438>)
     308:	220f      	movs	r2, #15
     30a:	705a      	strb	r2, [r3, #1]
		user_count_struct.current_user_no_count  = 0;
     30c:	4b9e      	ldr	r3, [pc, #632]	; (588 <init_eeprom+0x438>)
     30e:	2200      	movs	r2, #0
     310:	709a      	strb	r2, [r3, #2]
		user_count_struct.primaryNumberIndex = 0;
     312:	4b9d      	ldr	r3, [pc, #628]	; (588 <init_eeprom+0x438>)
     314:	2200      	movs	r2, #0
     316:	70da      	strb	r2, [r3, #3]
		user_count_struct.secondaryNumberIndex = 1;
     318:	4b9b      	ldr	r3, [pc, #620]	; (588 <init_eeprom+0x438>)
     31a:	2201      	movs	r2, #1
     31c:	711a      	strb	r2, [r3, #4]
		
		
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     31e:	4a85      	ldr	r2, [pc, #532]	; (534 <init_eeprom+0x3e4>)
     320:	4b99      	ldr	r3, [pc, #612]	; (588 <init_eeprom+0x438>)
     322:	0010      	movs	r0, r2
     324:	0019      	movs	r1, r3
     326:	2308      	movs	r3, #8
     328:	001a      	movs	r2, r3
     32a:	4b85      	ldr	r3, [pc, #532]	; (540 <init_eeprom+0x3f0>)
     32c:	4798      	blx	r3
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     32e:	4b81      	ldr	r3, [pc, #516]	; (534 <init_eeprom+0x3e4>)
     330:	0019      	movs	r1, r3
     332:	2008      	movs	r0, #8
     334:	4b86      	ldr	r3, [pc, #536]	; (550 <init_eeprom+0x400>)
     336:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     338:	4b86      	ldr	r3, [pc, #536]	; (554 <init_eeprom+0x404>)
     33a:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
     33c:	4b93      	ldr	r3, [pc, #588]	; (58c <init_eeprom+0x43c>)
     33e:	0019      	movs	r1, r3
     340:	2003      	movs	r0, #3
     342:	4b93      	ldr	r3, [pc, #588]	; (590 <init_eeprom+0x440>)
     344:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
     346:	4b93      	ldr	r3, [pc, #588]	; (594 <init_eeprom+0x444>)
     348:	0019      	movs	r1, r3
     34a:	2004      	movs	r0, #4
     34c:	4b90      	ldr	r3, [pc, #576]	; (590 <init_eeprom+0x440>)
     34e:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
     350:	4b91      	ldr	r3, [pc, #580]	; (598 <init_eeprom+0x448>)
     352:	0019      	movs	r1, r3
     354:	2005      	movs	r0, #5
     356:	4b8e      	ldr	r3, [pc, #568]	; (590 <init_eeprom+0x440>)
     358:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
     35a:	4b90      	ldr	r3, [pc, #576]	; (59c <init_eeprom+0x44c>)
     35c:	0019      	movs	r1, r3
     35e:	2006      	movs	r0, #6
     360:	4b8b      	ldr	r3, [pc, #556]	; (590 <init_eeprom+0x440>)
     362:	4798      	blx	r3
	//config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"9586135978");
     364:	4b8e      	ldr	r3, [pc, #568]	; (5a0 <init_eeprom+0x450>)
     366:	0019      	movs	r1, r3
     368:	2007      	movs	r0, #7
     36a:	4b89      	ldr	r3, [pc, #548]	; (590 <init_eeprom+0x440>)
     36c:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
     36e:	4b77      	ldr	r3, [pc, #476]	; (54c <init_eeprom+0x3fc>)
     370:	0019      	movs	r1, r3
     372:	2009      	movs	r0, #9
     374:	4b86      	ldr	r3, [pc, #536]	; (590 <init_eeprom+0x440>)
     376:	4798      	blx	r3
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
     378:	4b74      	ldr	r3, [pc, #464]	; (54c <init_eeprom+0x3fc>)
     37a:	0019      	movs	r1, r3
     37c:	200a      	movs	r0, #10
     37e:	4b84      	ldr	r3, [pc, #528]	; (590 <init_eeprom+0x440>)
     380:	4798      	blx	r3
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
     382:	4b72      	ldr	r3, [pc, #456]	; (54c <init_eeprom+0x3fc>)
     384:	0019      	movs	r1, r3
     386:	200b      	movs	r0, #11
     388:	4b81      	ldr	r3, [pc, #516]	; (590 <init_eeprom+0x440>)
     38a:	4798      	blx	r3
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
     38c:	4b6f      	ldr	r3, [pc, #444]	; (54c <init_eeprom+0x3fc>)
     38e:	0019      	movs	r1, r3
     390:	200c      	movs	r0, #12
     392:	4b7f      	ldr	r3, [pc, #508]	; (590 <init_eeprom+0x440>)
     394:	4798      	blx	r3
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
     396:	4b6d      	ldr	r3, [pc, #436]	; (54c <init_eeprom+0x3fc>)
     398:	0019      	movs	r1, r3
     39a:	200d      	movs	r0, #13
     39c:	4b7c      	ldr	r3, [pc, #496]	; (590 <init_eeprom+0x440>)
     39e:	4798      	blx	r3
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
     3a0:	4b6a      	ldr	r3, [pc, #424]	; (54c <init_eeprom+0x3fc>)
     3a2:	0019      	movs	r1, r3
     3a4:	200e      	movs	r0, #14
     3a6:	4b7a      	ldr	r3, [pc, #488]	; (590 <init_eeprom+0x440>)
     3a8:	4798      	blx	r3
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
     3aa:	4b68      	ldr	r3, [pc, #416]	; (54c <init_eeprom+0x3fc>)
     3ac:	0019      	movs	r1, r3
     3ae:	200f      	movs	r0, #15
     3b0:	4b77      	ldr	r3, [pc, #476]	; (590 <init_eeprom+0x440>)
     3b2:	4798      	blx	r3
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
     3b4:	4b65      	ldr	r3, [pc, #404]	; (54c <init_eeprom+0x3fc>)
     3b6:	0019      	movs	r1, r3
     3b8:	2010      	movs	r0, #16
     3ba:	4b75      	ldr	r3, [pc, #468]	; (590 <init_eeprom+0x440>)
     3bc:	4798      	blx	r3
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
     3be:	4b63      	ldr	r3, [pc, #396]	; (54c <init_eeprom+0x3fc>)
     3c0:	0019      	movs	r1, r3
     3c2:	2011      	movs	r0, #17
     3c4:	4b72      	ldr	r3, [pc, #456]	; (590 <init_eeprom+0x440>)
     3c6:	4798      	blx	r3
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
     3c8:	4b60      	ldr	r3, [pc, #384]	; (54c <init_eeprom+0x3fc>)
     3ca:	0019      	movs	r1, r3
     3cc:	2012      	movs	r0, #18
     3ce:	4b70      	ldr	r3, [pc, #448]	; (590 <init_eeprom+0x440>)
     3d0:	4798      	blx	r3
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
     3d2:	4b5e      	ldr	r3, [pc, #376]	; (54c <init_eeprom+0x3fc>)
     3d4:	0019      	movs	r1, r3
     3d6:	2013      	movs	r0, #19
     3d8:	4b6d      	ldr	r3, [pc, #436]	; (590 <init_eeprom+0x440>)
     3da:	4798      	blx	r3
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
     3dc:	4b5b      	ldr	r3, [pc, #364]	; (54c <init_eeprom+0x3fc>)
     3de:	0019      	movs	r1, r3
     3e0:	2014      	movs	r0, #20
     3e2:	4b6b      	ldr	r3, [pc, #428]	; (590 <init_eeprom+0x440>)
     3e4:	4798      	blx	r3
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
     3e6:	4b59      	ldr	r3, [pc, #356]	; (54c <init_eeprom+0x3fc>)
     3e8:	0019      	movs	r1, r3
     3ea:	2015      	movs	r0, #21
     3ec:	4b68      	ldr	r3, [pc, #416]	; (590 <init_eeprom+0x440>)
     3ee:	4798      	blx	r3
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
     3f0:	4b56      	ldr	r3, [pc, #344]	; (54c <init_eeprom+0x3fc>)
     3f2:	0019      	movs	r1, r3
     3f4:	2016      	movs	r0, #22
     3f6:	4b66      	ldr	r3, [pc, #408]	; (590 <init_eeprom+0x440>)
     3f8:	4798      	blx	r3
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
     3fa:	4b54      	ldr	r3, [pc, #336]	; (54c <init_eeprom+0x3fc>)
     3fc:	0019      	movs	r1, r3
     3fe:	2017      	movs	r0, #23
     400:	4b63      	ldr	r3, [pc, #396]	; (590 <init_eeprom+0x440>)
     402:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
     404:	4b4b      	ldr	r3, [pc, #300]	; (534 <init_eeprom+0x3e4>)
     406:	0019      	movs	r1, r3
     408:	2018      	movs	r0, #24
     40a:	4b4b      	ldr	r3, [pc, #300]	; (538 <init_eeprom+0x3e8>)
     40c:	4798      	blx	r3
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
     40e:	4a65      	ldr	r2, [pc, #404]	; (5a4 <init_eeprom+0x454>)
     410:	4b48      	ldr	r3, [pc, #288]	; (534 <init_eeprom+0x3e4>)
     412:	0010      	movs	r0, r2
     414:	0019      	movs	r1, r3
     416:	2318      	movs	r3, #24
     418:	001a      	movs	r2, r3
     41a:	4b49      	ldr	r3, [pc, #292]	; (540 <init_eeprom+0x3f0>)
     41c:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
     41e:	4b61      	ldr	r3, [pc, #388]	; (5a4 <init_eeprom+0x454>)
     420:	781b      	ldrb	r3, [r3, #0]
     422:	2b55      	cmp	r3, #85	; 0x55
     424:	d025      	beq.n	472 <init_eeprom+0x322>
	{
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
     426:	4b5f      	ldr	r3, [pc, #380]	; (5a4 <init_eeprom+0x454>)
     428:	2255      	movs	r2, #85	; 0x55
     42a:	701a      	strb	r2, [r3, #0]
		
		alternateNumber_struct.alterNumberPresent = false;
     42c:	4b5d      	ldr	r3, [pc, #372]	; (5a4 <init_eeprom+0x454>)
     42e:	2200      	movs	r2, #0
     430:	709a      	strb	r2, [r3, #2]
		alternateNumber_struct.alterNumberSetting = false;
     432:	4b5c      	ldr	r3, [pc, #368]	; (5a4 <init_eeprom+0x454>)
     434:	2200      	movs	r2, #0
     436:	705a      	strb	r2, [r3, #1]
		
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
     438:	4b5b      	ldr	r3, [pc, #364]	; (5a8 <init_eeprom+0x458>)
     43a:	2214      	movs	r2, #20
     43c:	2100      	movs	r1, #0
     43e:	0018      	movs	r0, r3
     440:	4b41      	ldr	r3, [pc, #260]	; (548 <init_eeprom+0x3f8>)
     442:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
     444:	4a58      	ldr	r2, [pc, #352]	; (5a8 <init_eeprom+0x458>)
     446:	4b41      	ldr	r3, [pc, #260]	; (54c <init_eeprom+0x3fc>)
     448:	0010      	movs	r0, r2
     44a:	0019      	movs	r1, r3
     44c:	230b      	movs	r3, #11
     44e:	001a      	movs	r2, r3
     450:	4b3b      	ldr	r3, [pc, #236]	; (540 <init_eeprom+0x3f0>)
     452:	4798      	blx	r3
		
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
     454:	4a37      	ldr	r2, [pc, #220]	; (534 <init_eeprom+0x3e4>)
     456:	4b53      	ldr	r3, [pc, #332]	; (5a4 <init_eeprom+0x454>)
     458:	0010      	movs	r0, r2
     45a:	0019      	movs	r1, r3
     45c:	2318      	movs	r3, #24
     45e:	001a      	movs	r2, r3
     460:	4b37      	ldr	r3, [pc, #220]	; (540 <init_eeprom+0x3f0>)
     462:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
     464:	4b33      	ldr	r3, [pc, #204]	; (534 <init_eeprom+0x3e4>)
     466:	0019      	movs	r1, r3
     468:	2018      	movs	r0, #24
     46a:	4b39      	ldr	r3, [pc, #228]	; (550 <init_eeprom+0x400>)
     46c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     46e:	4b39      	ldr	r3, [pc, #228]	; (554 <init_eeprom+0x404>)
     470:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
     472:	4b30      	ldr	r3, [pc, #192]	; (534 <init_eeprom+0x3e4>)
     474:	0019      	movs	r1, r3
     476:	2019      	movs	r0, #25
     478:	4b2f      	ldr	r3, [pc, #188]	; (538 <init_eeprom+0x3e8>)
     47a:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
     47c:	4a4b      	ldr	r2, [pc, #300]	; (5ac <init_eeprom+0x45c>)
     47e:	4b2d      	ldr	r3, [pc, #180]	; (534 <init_eeprom+0x3e4>)
     480:	0010      	movs	r0, r2
     482:	0019      	movs	r1, r3
     484:	2330      	movs	r3, #48	; 0x30
     486:	001a      	movs	r2, r3
     488:	4b2d      	ldr	r3, [pc, #180]	; (540 <init_eeprom+0x3f0>)
     48a:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
     48c:	4b47      	ldr	r3, [pc, #284]	; (5ac <init_eeprom+0x45c>)
     48e:	781b      	ldrb	r3, [r3, #0]
     490:	2b55      	cmp	r3, #85	; 0x55
     492:	d03c      	beq.n	50e <init_eeprom+0x3be>
	{
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
     494:	4b45      	ldr	r3, [pc, #276]	; (5ac <init_eeprom+0x45c>)
     496:	2255      	movs	r2, #85	; 0x55
     498:	701a      	strb	r2, [r3, #0]
		
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
     49a:	4b45      	ldr	r3, [pc, #276]	; (5b0 <init_eeprom+0x460>)
     49c:	2214      	movs	r2, #20
     49e:	2100      	movs	r1, #0
     4a0:	0018      	movs	r0, r3
     4a2:	4b29      	ldr	r3, [pc, #164]	; (548 <init_eeprom+0x3f8>)
     4a4:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
     4a6:	4a42      	ldr	r2, [pc, #264]	; (5b0 <init_eeprom+0x460>)
     4a8:	4b28      	ldr	r3, [pc, #160]	; (54c <init_eeprom+0x3fc>)
     4aa:	0010      	movs	r0, r2
     4ac:	0019      	movs	r1, r3
     4ae:	230b      	movs	r3, #11
     4b0:	001a      	movs	r2, r3
     4b2:	4b23      	ldr	r3, [pc, #140]	; (540 <init_eeprom+0x3f0>)
     4b4:	4798      	blx	r3
		
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
     4b6:	4b3f      	ldr	r3, [pc, #252]	; (5b4 <init_eeprom+0x464>)
     4b8:	2214      	movs	r2, #20
     4ba:	2100      	movs	r1, #0
     4bc:	0018      	movs	r0, r3
     4be:	4b22      	ldr	r3, [pc, #136]	; (548 <init_eeprom+0x3f8>)
     4c0:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
     4c2:	4a3c      	ldr	r2, [pc, #240]	; (5b4 <init_eeprom+0x464>)
     4c4:	4b21      	ldr	r3, [pc, #132]	; (54c <init_eeprom+0x3fc>)
     4c6:	0010      	movs	r0, r2
     4c8:	0019      	movs	r1, r3
     4ca:	230b      	movs	r3, #11
     4cc:	001a      	movs	r2, r3
     4ce:	4b1c      	ldr	r3, [pc, #112]	; (540 <init_eeprom+0x3f0>)
     4d0:	4798      	blx	r3
		
		m2m_Numbers_struct.m2mPresent			= false;
     4d2:	4b36      	ldr	r3, [pc, #216]	; (5ac <init_eeprom+0x45c>)
     4d4:	2200      	movs	r2, #0
     4d6:	705a      	strb	r2, [r3, #1]
		m2m_Numbers_struct.m2mVerified			= false;
     4d8:	4b34      	ldr	r3, [pc, #208]	; (5ac <init_eeprom+0x45c>)
     4da:	2200      	movs	r2, #0
     4dc:	709a      	strb	r2, [r3, #2]
		
		m2m_Numbers_struct.m2mRemotePresent		= false;
     4de:	4b33      	ldr	r3, [pc, #204]	; (5ac <init_eeprom+0x45c>)
     4e0:	2200      	movs	r2, #0
     4e2:	70da      	strb	r2, [r3, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
     4e4:	4b31      	ldr	r3, [pc, #196]	; (5ac <init_eeprom+0x45c>)
     4e6:	2200      	movs	r2, #0
     4e8:	711a      	strb	r2, [r3, #4]
		
		m2m_Numbers_struct.m2mSetting			= false;
     4ea:	4b30      	ldr	r3, [pc, #192]	; (5ac <init_eeprom+0x45c>)
     4ec:	2200      	movs	r2, #0
     4ee:	715a      	strb	r2, [r3, #5]
		
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     4f0:	4a10      	ldr	r2, [pc, #64]	; (534 <init_eeprom+0x3e4>)
     4f2:	4b2e      	ldr	r3, [pc, #184]	; (5ac <init_eeprom+0x45c>)
     4f4:	0010      	movs	r0, r2
     4f6:	0019      	movs	r1, r3
     4f8:	2330      	movs	r3, #48	; 0x30
     4fa:	001a      	movs	r2, r3
     4fc:	4b10      	ldr	r3, [pc, #64]	; (540 <init_eeprom+0x3f0>)
     4fe:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     500:	4b0c      	ldr	r3, [pc, #48]	; (534 <init_eeprom+0x3e4>)
     502:	0019      	movs	r1, r3
     504:	2019      	movs	r0, #25
     506:	4b12      	ldr	r3, [pc, #72]	; (550 <init_eeprom+0x400>)
     508:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     50a:	4b12      	ldr	r3, [pc, #72]	; (554 <init_eeprom+0x404>)
     50c:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     50e:	4b09      	ldr	r3, [pc, #36]	; (534 <init_eeprom+0x3e4>)
     510:	0019      	movs	r1, r3
     512:	201a      	movs	r0, #26
     514:	4b08      	ldr	r3, [pc, #32]	; (538 <init_eeprom+0x3e8>)
     516:	4798      	blx	r3
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
     518:	4906      	ldr	r1, [pc, #24]	; (534 <init_eeprom+0x3e4>)
     51a:	4b27      	ldr	r3, [pc, #156]	; (5b8 <init_eeprom+0x468>)
     51c:	222c      	movs	r2, #44	; 0x2c
     51e:	0018      	movs	r0, r3
     520:	4b07      	ldr	r3, [pc, #28]	; (540 <init_eeprom+0x3f0>)
     522:	4798      	blx	r3
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
     524:	4b24      	ldr	r3, [pc, #144]	; (5b8 <init_eeprom+0x468>)
     526:	781b      	ldrb	r3, [r3, #0]
     528:	2b55      	cmp	r3, #85	; 0x55
     52a:	d100      	bne.n	52e <init_eeprom+0x3de>
     52c:	e0a1      	b.n	672 <init_eeprom+0x522>
     52e:	e045      	b.n	5bc <init_eeprom+0x46c>
     530:	00000115 	.word	0x00000115
     534:	20000584 	.word	0x20000584
     538:	00012a75 	.word	0x00012a75
     53c:	200005f8 	.word	0x200005f8
     540:	00017ca1 	.word	0x00017ca1
     544:	20000600 	.word	0x20000600
     548:	00017cd7 	.word	0x00017cd7
     54c:	000188d8 	.word	0x000188d8
     550:	00012969 	.word	0x00012969
     554:	00012b11 	.word	0x00012b11
     558:	2000051c 	.word	0x2000051c
     55c:	20000521 	.word	0x20000521
     560:	000188e4 	.word	0x000188e4
     564:	2000053f 	.word	0x2000053f
     568:	000188f4 	.word	0x000188f4
     56c:	200005c0 	.word	0x200005c0
     570:	200005c5 	.word	0x200005c5
     574:	00018900 	.word	0x00018900
     578:	200005e5 	.word	0x200005e5
     57c:	200005d5 	.word	0x200005d5
     580:	00018910 	.word	0x00018910
     584:	0001891c 	.word	0x0001891c
     588:	20000610 	.word	0x20000610
     58c:	0001892c 	.word	0x0001892c
     590:	0000072d 	.word	0x0000072d
     594:	00018938 	.word	0x00018938
     598:	00018944 	.word	0x00018944
     59c:	00018950 	.word	0x00018950
     5a0:	0001895c 	.word	0x0001895c
     5a4:	20000644 	.word	0x20000644
     5a8:	20000648 	.word	0x20000648
     5ac:	20000554 	.word	0x20000554
     5b0:	2000055c 	.word	0x2000055c
     5b4:	20000570 	.word	0x20000570
     5b8:	2000065c 	.word	0x2000065c
	{
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
     5bc:	4b51      	ldr	r3, [pc, #324]	; (704 <init_eeprom+0x5b4>)
     5be:	2255      	movs	r2, #85	; 0x55
     5c0:	701a      	strb	r2, [r3, #0]
		
		user_settings_parameter_struct.autoStartAddress				= false;
     5c2:	4b50      	ldr	r3, [pc, #320]	; (704 <init_eeprom+0x5b4>)
     5c4:	2200      	movs	r2, #0
     5c6:	705a      	strb	r2, [r3, #1]
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
     5c8:	4b4e      	ldr	r3, [pc, #312]	; (704 <init_eeprom+0x5b4>)
     5ca:	2232      	movs	r2, #50	; 0x32
     5cc:	805a      	strh	r2, [r3, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
     5ce:	4b4d      	ldr	r3, [pc, #308]	; (704 <init_eeprom+0x5b4>)
     5d0:	224f      	movs	r2, #79	; 0x4f
     5d2:	711a      	strb	r2, [r3, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
     5d4:	4b4b      	ldr	r3, [pc, #300]	; (704 <init_eeprom+0x5b4>)
     5d6:	2254      	movs	r2, #84	; 0x54
     5d8:	715a      	strb	r2, [r3, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
     5da:	4b4a      	ldr	r3, [pc, #296]	; (704 <init_eeprom+0x5b4>)
     5dc:	2202      	movs	r2, #2
     5de:	80da      	strh	r2, [r3, #6]
		//user_settings_parameter_struct.bypassAddress				= false;
		user_settings_parameter_struct.eventStageAddress			= 0;
     5e0:	4b48      	ldr	r3, [pc, #288]	; (704 <init_eeprom+0x5b4>)
     5e2:	2200      	movs	r2, #0
     5e4:	721a      	strb	r2, [r3, #8]
		user_settings_parameter_struct.noCallAddress				= false;
     5e6:	4b47      	ldr	r3, [pc, #284]	; (704 <init_eeprom+0x5b4>)
     5e8:	2200      	movs	r2, #0
     5ea:	725a      	strb	r2, [r3, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
     5ec:	4b45      	ldr	r3, [pc, #276]	; (704 <init_eeprom+0x5b4>)
     5ee:	2200      	movs	r2, #0
     5f0:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
     5f2:	4b44      	ldr	r3, [pc, #272]	; (704 <init_eeprom+0x5b4>)
     5f4:	2200      	movs	r2, #0
     5f6:	72da      	strb	r2, [r3, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
     5f8:	4b42      	ldr	r3, [pc, #264]	; (704 <init_eeprom+0x5b4>)
     5fa:	2200      	movs	r2, #0
     5fc:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
     5fe:	4b41      	ldr	r3, [pc, #260]	; (704 <init_eeprom+0x5b4>)
     600:	2200      	movs	r2, #0
     602:	735a      	strb	r2, [r3, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
     604:	4b3f      	ldr	r3, [pc, #252]	; (704 <init_eeprom+0x5b4>)
     606:	2200      	movs	r2, #0
     608:	739a      	strb	r2, [r3, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
     60a:	4b3e      	ldr	r3, [pc, #248]	; (704 <init_eeprom+0x5b4>)
     60c:	2200      	movs	r2, #0
     60e:	73da      	strb	r2, [r3, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
     610:	4b3c      	ldr	r3, [pc, #240]	; (704 <init_eeprom+0x5b4>)
     612:	2200      	movs	r2, #0
     614:	611a      	str	r2, [r3, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
     616:	4b3b      	ldr	r3, [pc, #236]	; (704 <init_eeprom+0x5b4>)
     618:	2200      	movs	r2, #0
     61a:	615a      	str	r2, [r3, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
     61c:	4b39      	ldr	r3, [pc, #228]	; (704 <init_eeprom+0x5b4>)
     61e:	2200      	movs	r2, #0
     620:	619a      	str	r2, [r3, #24]
		user_settings_parameter_struct.underloadPerAddress			= 85;
     622:	4b38      	ldr	r3, [pc, #224]	; (704 <init_eeprom+0x5b4>)
     624:	2255      	movs	r2, #85	; 0x55
     626:	771a      	strb	r2, [r3, #28]
		user_settings_parameter_struct.overloadPerAddress			= 120;
     628:	4b36      	ldr	r3, [pc, #216]	; (704 <init_eeprom+0x5b4>)
     62a:	2278      	movs	r2, #120	; 0x78
     62c:	775a      	strb	r2, [r3, #29]
		//user_settings_parameter_struct.jumperSettingAddress			= 1;
		user_settings_parameter_struct.preventOverFlowAddress		= false;
     62e:	4b35      	ldr	r3, [pc, #212]	; (704 <init_eeprom+0x5b4>)
     630:	2200      	movs	r2, #0
     632:	779a      	strb	r2, [r3, #30]
		user_settings_parameter_struct.waterBypassAddress			= false;
     634:	4b33      	ldr	r3, [pc, #204]	; (704 <init_eeprom+0x5b4>)
     636:	2200      	movs	r2, #0
     638:	77da      	strb	r2, [r3, #31]
		
		user_settings_parameter_struct.detectSinglePhasing			= true;
     63a:	4b32      	ldr	r3, [pc, #200]	; (704 <init_eeprom+0x5b4>)
     63c:	2220      	movs	r2, #32
     63e:	2101      	movs	r1, #1
     640:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
     642:	4b30      	ldr	r3, [pc, #192]	; (704 <init_eeprom+0x5b4>)
     644:	2250      	movs	r2, #80	; 0x50
     646:	845a      	strh	r2, [r3, #34]	; 0x22
		user_settings_parameter_struct.detectPhaseSequence			= true;
     648:	4b2e      	ldr	r3, [pc, #184]	; (704 <init_eeprom+0x5b4>)
     64a:	2224      	movs	r2, #36	; 0x24
     64c:	2101      	movs	r1, #1
     64e:	5499      	strb	r1, [r3, r2]
		user_settings_parameter_struct.detectMotorFeedback			= MOTORFEEDBACK_DETECTION_CURRENT;
     650:	4b2c      	ldr	r3, [pc, #176]	; (704 <init_eeprom+0x5b4>)
     652:	2225      	movs	r2, #37	; 0x25
     654:	2101      	movs	r1, #1
     656:	5499      	strb	r1, [r3, r2]
		

		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     658:	492a      	ldr	r1, [pc, #168]	; (704 <init_eeprom+0x5b4>)
     65a:	4b2b      	ldr	r3, [pc, #172]	; (708 <init_eeprom+0x5b8>)
     65c:	222c      	movs	r2, #44	; 0x2c
     65e:	0018      	movs	r0, r3
     660:	4b2a      	ldr	r3, [pc, #168]	; (70c <init_eeprom+0x5bc>)
     662:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     664:	4b28      	ldr	r3, [pc, #160]	; (708 <init_eeprom+0x5b8>)
     666:	0019      	movs	r1, r3
     668:	201a      	movs	r0, #26
     66a:	4b29      	ldr	r3, [pc, #164]	; (710 <init_eeprom+0x5c0>)
     66c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     66e:	4b29      	ldr	r3, [pc, #164]	; (714 <init_eeprom+0x5c4>)
     670:	4798      	blx	r3
	}
	//////////////////////////////////////////////////////////////////////////
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
     672:	4b25      	ldr	r3, [pc, #148]	; (708 <init_eeprom+0x5b8>)
     674:	0019      	movs	r1, r3
     676:	201b      	movs	r0, #27
     678:	4b27      	ldr	r3, [pc, #156]	; (718 <init_eeprom+0x5c8>)
     67a:	4798      	blx	r3
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
     67c:	4a27      	ldr	r2, [pc, #156]	; (71c <init_eeprom+0x5cc>)
     67e:	4b22      	ldr	r3, [pc, #136]	; (708 <init_eeprom+0x5b8>)
     680:	0010      	movs	r0, r2
     682:	0019      	movs	r1, r3
     684:	231c      	movs	r3, #28
     686:	001a      	movs	r2, r3
     688:	4b20      	ldr	r3, [pc, #128]	; (70c <init_eeprom+0x5bc>)
     68a:	4798      	blx	r3
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
     68c:	4b23      	ldr	r3, [pc, #140]	; (71c <init_eeprom+0x5cc>)
     68e:	781b      	ldrb	r3, [r3, #0]
     690:	2b55      	cmp	r3, #85	; 0x55
     692:	d034      	beq.n	6fe <init_eeprom+0x5ae>
	{
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
     694:	4b21      	ldr	r3, [pc, #132]	; (71c <init_eeprom+0x5cc>)
     696:	2255      	movs	r2, #85	; 0x55
     698:	701a      	strb	r2, [r3, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
     69a:	4b20      	ldr	r3, [pc, #128]	; (71c <init_eeprom+0x5cc>)
     69c:	2201      	movs	r2, #1
     69e:	709a      	strb	r2, [r3, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
     6a0:	4b1e      	ldr	r3, [pc, #120]	; (71c <init_eeprom+0x5cc>)
     6a2:	2201      	movs	r2, #1
     6a4:	705a      	strb	r2, [r3, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = false;	//= true;
     6a6:	4b1d      	ldr	r3, [pc, #116]	; (71c <init_eeprom+0x5cc>)
     6a8:	2200      	movs	r2, #0
     6aa:	719a      	strb	r2, [r3, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= false;	//= true;
     6ac:	4b1b      	ldr	r3, [pc, #108]	; (71c <init_eeprom+0x5cc>)
     6ae:	2200      	movs	r2, #0
     6b0:	715a      	strb	r2, [r3, #5]
		factory_settings_parameter_struct.ENABLE_GP					= false;	// = true;
     6b2:	4b1a      	ldr	r3, [pc, #104]	; (71c <init_eeprom+0x5cc>)
     6b4:	2200      	movs	r2, #0
     6b6:	711a      	strb	r2, [r3, #4]
		factory_settings_parameter_struct.ENABLE_M2M				= false;
     6b8:	4b18      	ldr	r3, [pc, #96]	; (71c <init_eeprom+0x5cc>)
     6ba:	2200      	movs	r2, #0
     6bc:	70da      	strb	r2, [r3, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
     6be:	4b17      	ldr	r3, [pc, #92]	; (71c <init_eeprom+0x5cc>)
     6c0:	2200      	movs	r2, #0
     6c2:	71da      	strb	r2, [r3, #7]
		
		memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
     6c4:	4b16      	ldr	r3, [pc, #88]	; (720 <init_eeprom+0x5d0>)
     6c6:	2214      	movs	r2, #20
     6c8:	2100      	movs	r1, #0
     6ca:	0018      	movs	r0, r3
     6cc:	4b15      	ldr	r3, [pc, #84]	; (724 <init_eeprom+0x5d4>)
     6ce:	4798      	blx	r3
		strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
     6d0:	4a13      	ldr	r2, [pc, #76]	; (720 <init_eeprom+0x5d0>)
     6d2:	4b15      	ldr	r3, [pc, #84]	; (728 <init_eeprom+0x5d8>)
     6d4:	0010      	movs	r0, r2
     6d6:	0019      	movs	r1, r3
     6d8:	230b      	movs	r3, #11
     6da:	001a      	movs	r2, r3
     6dc:	4b0b      	ldr	r3, [pc, #44]	; (70c <init_eeprom+0x5bc>)
     6de:	4798      	blx	r3
		
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
     6e0:	4a09      	ldr	r2, [pc, #36]	; (708 <init_eeprom+0x5b8>)
     6e2:	4b0e      	ldr	r3, [pc, #56]	; (71c <init_eeprom+0x5cc>)
     6e4:	0010      	movs	r0, r2
     6e6:	0019      	movs	r1, r3
     6e8:	231c      	movs	r3, #28
     6ea:	001a      	movs	r2, r3
     6ec:	4b07      	ldr	r3, [pc, #28]	; (70c <init_eeprom+0x5bc>)
     6ee:	4798      	blx	r3
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
     6f0:	4b05      	ldr	r3, [pc, #20]	; (708 <init_eeprom+0x5b8>)
     6f2:	0019      	movs	r1, r3
     6f4:	201b      	movs	r0, #27
     6f6:	4b06      	ldr	r3, [pc, #24]	; (710 <init_eeprom+0x5c0>)
     6f8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     6fa:	4b06      	ldr	r3, [pc, #24]	; (714 <init_eeprom+0x5c4>)
     6fc:	4798      	blx	r3
	}
}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	46bd      	mov	sp, r7
     702:	bd80      	pop	{r7, pc}
     704:	2000065c 	.word	0x2000065c
     708:	20000584 	.word	0x20000584
     70c:	00017ca1 	.word	0x00017ca1
     710:	00012969 	.word	0x00012969
     714:	00012b11 	.word	0x00012b11
     718:	00012a75 	.word	0x00012a75
     71c:	20000628 	.word	0x20000628
     720:	20000630 	.word	0x20000630
     724:	00017cd7 	.word	0x00017cd7
     728:	000188d8 	.word	0x000188d8

0000072c <config_mobile_no_ee>:

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
     72c:	b580      	push	{r7, lr}
     72e:	b088      	sub	sp, #32
     730:	af00      	add	r7, sp, #0
     732:	0002      	movs	r2, r0
     734:	6039      	str	r1, [r7, #0]
     736:	1dfb      	adds	r3, r7, #7
     738:	701a      	strb	r2, [r3, #0]
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
     73a:	4b28      	ldr	r3, [pc, #160]	; (7dc <config_mobile_no_ee+0xb0>)
     73c:	223c      	movs	r2, #60	; 0x3c
     73e:	2100      	movs	r1, #0
     740:	0018      	movs	r0, r3
     742:	4b27      	ldr	r3, [pc, #156]	; (7e0 <config_mobile_no_ee+0xb4>)
     744:	4798      	blx	r3
	eeprom_emulator_read_page(page_loc, page_data);
     746:	4a25      	ldr	r2, [pc, #148]	; (7dc <config_mobile_no_ee+0xb0>)
     748:	1dfb      	adds	r3, r7, #7
     74a:	781b      	ldrb	r3, [r3, #0]
     74c:	0011      	movs	r1, r2
     74e:	0018      	movs	r0, r3
     750:	4b24      	ldr	r3, [pc, #144]	; (7e4 <config_mobile_no_ee+0xb8>)
     752:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
     754:	2308      	movs	r3, #8
     756:	18fa      	adds	r2, r7, r3
     758:	4b20      	ldr	r3, [pc, #128]	; (7dc <config_mobile_no_ee+0xb0>)
     75a:	0010      	movs	r0, r2
     75c:	0019      	movs	r1, r3
     75e:	2318      	movs	r3, #24
     760:	001a      	movs	r2, r3
     762:	4b21      	ldr	r3, [pc, #132]	; (7e8 <config_mobile_no_ee+0xbc>)
     764:	4798      	blx	r3
	if (mobile_no.u8tfirst_time_write_ee != 85)
     766:	2308      	movs	r3, #8
     768:	18fb      	adds	r3, r7, r3
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	2b55      	cmp	r3, #85	; 0x55
     76e:	d031      	beq.n	7d4 <config_mobile_no_ee+0xa8>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
     770:	2308      	movs	r3, #8
     772:	18fb      	adds	r3, r7, r3
     774:	2255      	movs	r2, #85	; 0x55
     776:	701a      	strb	r2, [r3, #0]
		mobile_no.dummy1 = 0;
     778:	2308      	movs	r3, #8
     77a:	18fb      	adds	r3, r7, r3
     77c:	2200      	movs	r2, #0
     77e:	705a      	strb	r2, [r3, #1]
		mobile_no.dummy2 = 0;
     780:	2308      	movs	r3, #8
     782:	18fb      	adds	r3, r7, r3
     784:	2200      	movs	r2, #0
     786:	709a      	strb	r2, [r3, #2]
		mobile_no.dummy3 = 0;
     788:	2308      	movs	r3, #8
     78a:	18fb      	adds	r3, r7, r3
     78c:	2200      	movs	r2, #0
     78e:	70da      	strb	r2, [r3, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
     790:	2308      	movs	r3, #8
     792:	18fb      	adds	r3, r7, r3
     794:	3304      	adds	r3, #4
     796:	2214      	movs	r2, #20
     798:	2100      	movs	r1, #0
     79a:	0018      	movs	r0, r3
     79c:	4b10      	ldr	r3, [pc, #64]	; (7e0 <config_mobile_no_ee+0xb4>)
     79e:	4798      	blx	r3
		strcpy(mobile_no.mobile_no_ee,mobile_number);
     7a0:	683a      	ldr	r2, [r7, #0]
     7a2:	2308      	movs	r3, #8
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	3304      	adds	r3, #4
     7a8:	0011      	movs	r1, r2
     7aa:	0018      	movs	r0, r3
     7ac:	4b0f      	ldr	r3, [pc, #60]	; (7ec <config_mobile_no_ee+0xc0>)
     7ae:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
     7b0:	4a0a      	ldr	r2, [pc, #40]	; (7dc <config_mobile_no_ee+0xb0>)
     7b2:	2308      	movs	r3, #8
     7b4:	18fb      	adds	r3, r7, r3
     7b6:	0010      	movs	r0, r2
     7b8:	0019      	movs	r1, r3
     7ba:	2318      	movs	r3, #24
     7bc:	001a      	movs	r2, r3
     7be:	4b0a      	ldr	r3, [pc, #40]	; (7e8 <config_mobile_no_ee+0xbc>)
     7c0:	4798      	blx	r3
		eeprom_emulator_write_page(page_loc, page_data);
     7c2:	4a06      	ldr	r2, [pc, #24]	; (7dc <config_mobile_no_ee+0xb0>)
     7c4:	1dfb      	adds	r3, r7, #7
     7c6:	781b      	ldrb	r3, [r3, #0]
     7c8:	0011      	movs	r1, r2
     7ca:	0018      	movs	r0, r3
     7cc:	4b08      	ldr	r3, [pc, #32]	; (7f0 <config_mobile_no_ee+0xc4>)
     7ce:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <config_mobile_no_ee+0xc8>)
     7d2:	4798      	blx	r3
	}
}
     7d4:	46c0      	nop			; (mov r8, r8)
     7d6:	46bd      	mov	sp, r7
     7d8:	b008      	add	sp, #32
     7da:	bd80      	pop	{r7, pc}
     7dc:	20000584 	.word	0x20000584
     7e0:	00017cd7 	.word	0x00017cd7
     7e4:	00012a75 	.word	0x00012a75
     7e8:	00017ca1 	.word	0x00017ca1
     7ec:	00017f57 	.word	0x00017f57
     7f0:	00012969 	.word	0x00012969
     7f4:	00012b11 	.word	0x00012b11

000007f8 <getNumbers>:


void getNumbers(char *string)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b08a      	sub	sp, #40	; 0x28
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
	strcpy(string,"");
     800:	687b      	ldr	r3, [r7, #4]
     802:	2200      	movs	r2, #0
     804:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     806:	2327      	movs	r3, #39	; 0x27
     808:	18fb      	adds	r3, r7, r3
     80a:	2200      	movs	r2, #0
     80c:	701a      	strb	r2, [r3, #0]
     80e:	e063      	b.n	8d8 <getNumbers+0xe0>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     810:	4b37      	ldr	r3, [pc, #220]	; (8f0 <getNumbers+0xf8>)
     812:	223c      	movs	r2, #60	; 0x3c
     814:	2100      	movs	r1, #0
     816:	0018      	movs	r0, r3
     818:	4b36      	ldr	r3, [pc, #216]	; (8f4 <getNumbers+0xfc>)
     81a:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     81c:	2327      	movs	r3, #39	; 0x27
     81e:	18fb      	adds	r3, r7, r3
     820:	781b      	ldrb	r3, [r3, #0]
     822:	3309      	adds	r3, #9
     824:	b2db      	uxtb	r3, r3
     826:	4a32      	ldr	r2, [pc, #200]	; (8f0 <getNumbers+0xf8>)
     828:	0011      	movs	r1, r2
     82a:	0018      	movs	r0, r3
     82c:	4b32      	ldr	r3, [pc, #200]	; (8f8 <getNumbers+0x100>)
     82e:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     830:	230c      	movs	r3, #12
     832:	18fa      	adds	r2, r7, r3
     834:	4b2e      	ldr	r3, [pc, #184]	; (8f0 <getNumbers+0xf8>)
     836:	0010      	movs	r0, r2
     838:	0019      	movs	r1, r3
     83a:	2318      	movs	r3, #24
     83c:	001a      	movs	r2, r3
     83e:	4b2f      	ldr	r3, [pc, #188]	; (8fc <getNumbers+0x104>)
     840:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
     842:	4b2f      	ldr	r3, [pc, #188]	; (900 <getNumbers+0x108>)
     844:	78db      	ldrb	r3, [r3, #3]
     846:	2227      	movs	r2, #39	; 0x27
     848:	18ba      	adds	r2, r7, r2
     84a:	7812      	ldrb	r2, [r2, #0]
     84c:	429a      	cmp	r2, r3
     84e:	d10f      	bne.n	870 <getNumbers+0x78>
		{
			strcat(string,"P:");
     850:	687b      	ldr	r3, [r7, #4]
     852:	0018      	movs	r0, r3
     854:	4b2b      	ldr	r3, [pc, #172]	; (904 <getNumbers+0x10c>)
     856:	4798      	blx	r3
     858:	0003      	movs	r3, r0
     85a:	001a      	movs	r2, r3
     85c:	687b      	ldr	r3, [r7, #4]
     85e:	189a      	adds	r2, r3, r2
     860:	4b29      	ldr	r3, [pc, #164]	; (908 <getNumbers+0x110>)
     862:	0010      	movs	r0, r2
     864:	0019      	movs	r1, r3
     866:	2303      	movs	r3, #3
     868:	001a      	movs	r2, r3
     86a:	4b24      	ldr	r3, [pc, #144]	; (8fc <getNumbers+0x104>)
     86c:	4798      	blx	r3
     86e:	e015      	b.n	89c <getNumbers+0xa4>
		}
		else if(i==user_count_struct.secondaryNumberIndex)
     870:	4b23      	ldr	r3, [pc, #140]	; (900 <getNumbers+0x108>)
     872:	791b      	ldrb	r3, [r3, #4]
     874:	2227      	movs	r2, #39	; 0x27
     876:	18ba      	adds	r2, r7, r2
     878:	7812      	ldrb	r2, [r2, #0]
     87a:	429a      	cmp	r2, r3
     87c:	d10e      	bne.n	89c <getNumbers+0xa4>
		{
			strcat(string,"S:");
     87e:	687b      	ldr	r3, [r7, #4]
     880:	0018      	movs	r0, r3
     882:	4b20      	ldr	r3, [pc, #128]	; (904 <getNumbers+0x10c>)
     884:	4798      	blx	r3
     886:	0003      	movs	r3, r0
     888:	001a      	movs	r2, r3
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	189a      	adds	r2, r3, r2
     88e:	4b1f      	ldr	r3, [pc, #124]	; (90c <getNumbers+0x114>)
     890:	0010      	movs	r0, r2
     892:	0019      	movs	r1, r3
     894:	2303      	movs	r3, #3
     896:	001a      	movs	r2, r3
     898:	4b18      	ldr	r3, [pc, #96]	; (8fc <getNumbers+0x104>)
     89a:	4798      	blx	r3
		}
		strcat(string,mobile_no.mobile_no_ee);
     89c:	230c      	movs	r3, #12
     89e:	18fb      	adds	r3, r7, r3
     8a0:	1d1a      	adds	r2, r3, #4
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	0011      	movs	r1, r2
     8a6:	0018      	movs	r0, r3
     8a8:	4b19      	ldr	r3, [pc, #100]	; (910 <getNumbers+0x118>)
     8aa:	4798      	blx	r3
		strcat(string,"\n");
     8ac:	687b      	ldr	r3, [r7, #4]
     8ae:	0018      	movs	r0, r3
     8b0:	4b14      	ldr	r3, [pc, #80]	; (904 <getNumbers+0x10c>)
     8b2:	4798      	blx	r3
     8b4:	0003      	movs	r3, r0
     8b6:	001a      	movs	r2, r3
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	189a      	adds	r2, r3, r2
     8bc:	4b15      	ldr	r3, [pc, #84]	; (914 <getNumbers+0x11c>)
     8be:	0010      	movs	r0, r2
     8c0:	0019      	movs	r1, r3
     8c2:	2302      	movs	r3, #2
     8c4:	001a      	movs	r2, r3
     8c6:	4b0d      	ldr	r3, [pc, #52]	; (8fc <getNumbers+0x104>)
     8c8:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     8ca:	2327      	movs	r3, #39	; 0x27
     8cc:	18fb      	adds	r3, r7, r3
     8ce:	781a      	ldrb	r2, [r3, #0]
     8d0:	2327      	movs	r3, #39	; 0x27
     8d2:	18fb      	adds	r3, r7, r3
     8d4:	3201      	adds	r2, #1
     8d6:	701a      	strb	r2, [r3, #0]
     8d8:	4b09      	ldr	r3, [pc, #36]	; (900 <getNumbers+0x108>)
     8da:	789b      	ldrb	r3, [r3, #2]
     8dc:	2227      	movs	r2, #39	; 0x27
     8de:	18ba      	adds	r2, r7, r2
     8e0:	7812      	ldrb	r2, [r2, #0]
     8e2:	429a      	cmp	r2, r3
     8e4:	d394      	bcc.n	810 <getNumbers+0x18>
	}
}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	46bd      	mov	sp, r7
     8ea:	b00a      	add	sp, #40	; 0x28
     8ec:	bd80      	pop	{r7, pc}
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	20000584 	.word	0x20000584
     8f4:	00017cd7 	.word	0x00017cd7
     8f8:	00012a75 	.word	0x00012a75
     8fc:	00017ca1 	.word	0x00017ca1
     900:	20000610 	.word	0x20000610
     904:	00017f67 	.word	0x00017f67
     908:	00018968 	.word	0x00018968
     90c:	0001896c 	.word	0x0001896c
     910:	00017f21 	.word	0x00017f21
     914:	00018970 	.word	0x00018970

00000918 <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
     918:	b580      	push	{r7, lr}
     91a:	b088      	sub	sp, #32
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
     920:	000a      	movs	r2, r1
     922:	1cfb      	adds	r3, r7, #3
     924:	701a      	strb	r2, [r3, #0]
	strcpy(IndexNo,"");
     926:	687b      	ldr	r3, [r7, #4]
     928:	2200      	movs	r2, #0
     92a:	701a      	strb	r2, [r3, #0]
	if(user_count_struct.current_user_no_count>index)
     92c:	4b15      	ldr	r3, [pc, #84]	; (984 <getIndexedNumber+0x6c>)
     92e:	789b      	ldrb	r3, [r3, #2]
     930:	1cfa      	adds	r2, r7, #3
     932:	7812      	ldrb	r2, [r2, #0]
     934:	429a      	cmp	r2, r3
     936:	d21f      	bcs.n	978 <getIndexedNumber+0x60>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     938:	4b13      	ldr	r3, [pc, #76]	; (988 <getIndexedNumber+0x70>)
     93a:	223c      	movs	r2, #60	; 0x3c
     93c:	2100      	movs	r1, #0
     93e:	0018      	movs	r0, r3
     940:	4b12      	ldr	r3, [pc, #72]	; (98c <getIndexedNumber+0x74>)
     942:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
     944:	1cfb      	adds	r3, r7, #3
     946:	781b      	ldrb	r3, [r3, #0]
     948:	3309      	adds	r3, #9
     94a:	b2db      	uxtb	r3, r3
     94c:	4a0e      	ldr	r2, [pc, #56]	; (988 <getIndexedNumber+0x70>)
     94e:	0011      	movs	r1, r2
     950:	0018      	movs	r0, r3
     952:	4b0f      	ldr	r3, [pc, #60]	; (990 <getIndexedNumber+0x78>)
     954:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     956:	2308      	movs	r3, #8
     958:	18fa      	adds	r2, r7, r3
     95a:	4b0b      	ldr	r3, [pc, #44]	; (988 <getIndexedNumber+0x70>)
     95c:	0010      	movs	r0, r2
     95e:	0019      	movs	r1, r3
     960:	2318      	movs	r3, #24
     962:	001a      	movs	r2, r3
     964:	4b0b      	ldr	r3, [pc, #44]	; (994 <getIndexedNumber+0x7c>)
     966:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
     968:	2308      	movs	r3, #8
     96a:	18fb      	adds	r3, r7, r3
     96c:	1d1a      	adds	r2, r3, #4
     96e:	687b      	ldr	r3, [r7, #4]
     970:	0011      	movs	r1, r2
     972:	0018      	movs	r0, r3
     974:	4b08      	ldr	r3, [pc, #32]	; (998 <getIndexedNumber+0x80>)
     976:	4798      	blx	r3
	}
	return IndexNo;
     978:	687b      	ldr	r3, [r7, #4]
}
     97a:	0018      	movs	r0, r3
     97c:	46bd      	mov	sp, r7
     97e:	b008      	add	sp, #32
     980:	bd80      	pop	{r7, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	20000610 	.word	0x20000610
     988:	20000584 	.word	0x20000584
     98c:	00017cd7 	.word	0x00017cd7
     990:	00012a75 	.word	0x00012a75
     994:	00017ca1 	.word	0x00017ca1
     998:	00017f21 	.word	0x00017f21

0000099c <isPrimaryNumber>:

bool isPrimaryNumber(char *number)
{
     99c:	b580      	push	{r7, lr}
     99e:	b088      	sub	sp, #32
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
     9a4:	4b14      	ldr	r3, [pc, #80]	; (9f8 <isPrimaryNumber+0x5c>)
     9a6:	789b      	ldrb	r3, [r3, #2]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d020      	beq.n	9ee <isPrimaryNumber+0x52>
	{
		char primaryNumber[20] = {0};
     9ac:	230c      	movs	r3, #12
     9ae:	18fb      	adds	r3, r7, r3
     9b0:	0018      	movs	r0, r3
     9b2:	2314      	movs	r3, #20
     9b4:	001a      	movs	r2, r3
     9b6:	2100      	movs	r1, #0
     9b8:	4b10      	ldr	r3, [pc, #64]	; (9fc <isPrimaryNumber+0x60>)
     9ba:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
     9bc:	4b0e      	ldr	r3, [pc, #56]	; (9f8 <isPrimaryNumber+0x5c>)
     9be:	78da      	ldrb	r2, [r3, #3]
     9c0:	230c      	movs	r3, #12
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	0011      	movs	r1, r2
     9c6:	0018      	movs	r0, r3
     9c8:	4b0d      	ldr	r3, [pc, #52]	; (a00 <isPrimaryNumber+0x64>)
     9ca:	4798      	blx	r3
		if(strstr(number,primaryNumber))
     9cc:	230c      	movs	r3, #12
     9ce:	18fa      	adds	r2, r7, r3
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	0011      	movs	r1, r2
     9d4:	0018      	movs	r0, r3
     9d6:	4b0b      	ldr	r3, [pc, #44]	; (a04 <isPrimaryNumber+0x68>)
     9d8:	4798      	blx	r3
     9da:	1e03      	subs	r3, r0, #0
     9dc:	d001      	beq.n	9e2 <isPrimaryNumber+0x46>
		{
			return true;
     9de:	2301      	movs	r3, #1
     9e0:	e006      	b.n	9f0 <isPrimaryNumber+0x54>
		}
		else
		{
			return isAlterNumber(number);
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	0018      	movs	r0, r3
     9e6:	4b08      	ldr	r3, [pc, #32]	; (a08 <isPrimaryNumber+0x6c>)
     9e8:	4798      	blx	r3
     9ea:	0003      	movs	r3, r0
     9ec:	e000      	b.n	9f0 <isPrimaryNumber+0x54>
		//else
		//{
		//return isAlterNumber(number);
		//}
	}
	return false;
     9ee:	2300      	movs	r3, #0
}
     9f0:	0018      	movs	r0, r3
     9f2:	46bd      	mov	sp, r7
     9f4:	b008      	add	sp, #32
     9f6:	bd80      	pop	{r7, pc}
     9f8:	20000610 	.word	0x20000610
     9fc:	00017cd7 	.word	0x00017cd7
     a00:	00000919 	.word	0x00000919
     a04:	00017f97 	.word	0x00017f97
     a08:	00000a0d 	.word	0x00000a0d

00000a0c <isAlterNumber>:

bool isAlterNumber(char *number)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b082      	sub	sp, #8
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
	if(user_count_struct.current_user_no_count > 0)
     a14:	4b0b      	ldr	r3, [pc, #44]	; (a44 <isAlterNumber+0x38>)
     a16:	789b      	ldrb	r3, [r3, #2]
     a18:	2b00      	cmp	r3, #0
     a1a:	d00d      	beq.n	a38 <isAlterNumber+0x2c>
	{
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
     a1c:	4b0a      	ldr	r3, [pc, #40]	; (a48 <isAlterNumber+0x3c>)
     a1e:	789b      	ldrb	r3, [r3, #2]
     a20:	2b00      	cmp	r3, #0
     a22:	d009      	beq.n	a38 <isAlterNumber+0x2c>
     a24:	4a09      	ldr	r2, [pc, #36]	; (a4c <isAlterNumber+0x40>)
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	0011      	movs	r1, r2
     a2a:	0018      	movs	r0, r3
     a2c:	4b08      	ldr	r3, [pc, #32]	; (a50 <isAlterNumber+0x44>)
     a2e:	4798      	blx	r3
     a30:	1e03      	subs	r3, r0, #0
     a32:	d001      	beq.n	a38 <isAlterNumber+0x2c>
		{
			return true;
     a34:	2301      	movs	r3, #1
     a36:	e000      	b.n	a3a <isAlterNumber+0x2e>
		}
	}
	return false;
     a38:	2300      	movs	r3, #0
}
     a3a:	0018      	movs	r0, r3
     a3c:	46bd      	mov	sp, r7
     a3e:	b002      	add	sp, #8
     a40:	bd80      	pop	{r7, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	20000610 	.word	0x20000610
     a48:	20000644 	.word	0x20000644
     a4c:	20000648 	.word	0x20000648
     a50:	00017f97 	.word	0x00017f97

00000a54 <isM2MNumber>:

bool isM2MNumber(char *number)
{
     a54:	b580      	push	{r7, lr}
     a56:	b082      	sub	sp, #8
     a58:	af00      	add	r7, sp, #0
     a5a:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
     a5c:	4b09      	ldr	r3, [pc, #36]	; (a84 <isM2MNumber+0x30>)
     a5e:	785b      	ldrb	r3, [r3, #1]
     a60:	2b00      	cmp	r3, #0
     a62:	d009      	beq.n	a78 <isM2MNumber+0x24>
     a64:	4a08      	ldr	r2, [pc, #32]	; (a88 <isM2MNumber+0x34>)
     a66:	687b      	ldr	r3, [r7, #4]
     a68:	0011      	movs	r1, r2
     a6a:	0018      	movs	r0, r3
     a6c:	4b07      	ldr	r3, [pc, #28]	; (a8c <isM2MNumber+0x38>)
     a6e:	4798      	blx	r3
     a70:	1e03      	subs	r3, r0, #0
     a72:	d001      	beq.n	a78 <isM2MNumber+0x24>
	{
		return true;
     a74:	2301      	movs	r3, #1
     a76:	e000      	b.n	a7a <isM2MNumber+0x26>
	}
	return false;
     a78:	2300      	movs	r3, #0
}
     a7a:	0018      	movs	r0, r3
     a7c:	46bd      	mov	sp, r7
     a7e:	b002      	add	sp, #8
     a80:	bd80      	pop	{r7, pc}
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	20000554 	.word	0x20000554
     a88:	2000055c 	.word	0x2000055c
     a8c:	00017f97 	.word	0x00017f97

00000a90 <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
     a90:	b580      	push	{r7, lr}
     a92:	b082      	sub	sp, #8
     a94:	af00      	add	r7, sp, #0
     a96:	6078      	str	r0, [r7, #4]
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
     a98:	4b09      	ldr	r3, [pc, #36]	; (ac0 <isM2MRemoteNumber+0x30>)
     a9a:	78db      	ldrb	r3, [r3, #3]
     a9c:	2b00      	cmp	r3, #0
     a9e:	d009      	beq.n	ab4 <isM2MRemoteNumber+0x24>
     aa0:	4a08      	ldr	r2, [pc, #32]	; (ac4 <isM2MRemoteNumber+0x34>)
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	0011      	movs	r1, r2
     aa6:	0018      	movs	r0, r3
     aa8:	4b07      	ldr	r3, [pc, #28]	; (ac8 <isM2MRemoteNumber+0x38>)
     aaa:	4798      	blx	r3
     aac:	1e03      	subs	r3, r0, #0
     aae:	d001      	beq.n	ab4 <isM2MRemoteNumber+0x24>
	{
		return true;
     ab0:	2301      	movs	r3, #1
     ab2:	e000      	b.n	ab6 <isM2MRemoteNumber+0x26>
	}
	return false;
     ab4:	2300      	movs	r3, #0
}
     ab6:	0018      	movs	r0, r3
     ab8:	46bd      	mov	sp, r7
     aba:	b002      	add	sp, #8
     abc:	bd80      	pop	{r7, pc}
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	20000554 	.word	0x20000554
     ac4:	20000570 	.word	0x20000570
     ac8:	00017f97 	.word	0x00017f97

00000acc <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
     acc:	b580      	push	{r7, lr}
     ace:	b082      	sub	sp, #8
     ad0:	af00      	add	r7, sp, #0
     ad2:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mPresent)
     ad4:	4b09      	ldr	r3, [pc, #36]	; (afc <getM2MNumber+0x30>)
     ad6:	785b      	ldrb	r3, [r3, #1]
     ad8:	2b00      	cmp	r3, #0
     ada:	d006      	beq.n	aea <getM2MNumber+0x1e>
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
     adc:	4a08      	ldr	r2, [pc, #32]	; (b00 <getM2MNumber+0x34>)
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	0011      	movs	r1, r2
     ae2:	0018      	movs	r0, r3
     ae4:	4b07      	ldr	r3, [pc, #28]	; (b04 <getM2MNumber+0x38>)
     ae6:	4798      	blx	r3
     ae8:	e002      	b.n	af0 <getM2MNumber+0x24>
	}
	else
	{
		strcpy(m2mNo,"");
     aea:	687b      	ldr	r3, [r7, #4]
     aec:	2200      	movs	r2, #0
     aee:	701a      	strb	r2, [r3, #0]
	}
	return m2mNo;
     af0:	687b      	ldr	r3, [r7, #4]
}
     af2:	0018      	movs	r0, r3
     af4:	46bd      	mov	sp, r7
     af6:	b002      	add	sp, #8
     af8:	bd80      	pop	{r7, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	20000554 	.word	0x20000554
     b00:	2000055c 	.word	0x2000055c
     b04:	00017f57 	.word	0x00017f57

00000b08 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
     b08:	b580      	push	{r7, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	af00      	add	r7, sp, #0
     b0e:	6078      	str	r0, [r7, #4]
	if (m2m_Numbers_struct.m2mRemotePresent)
     b10:	4b09      	ldr	r3, [pc, #36]	; (b38 <getM2MRemoteNumber+0x30>)
     b12:	78db      	ldrb	r3, [r3, #3]
     b14:	2b00      	cmp	r3, #0
     b16:	d006      	beq.n	b26 <getM2MRemoteNumber+0x1e>
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
     b18:	4a08      	ldr	r2, [pc, #32]	; (b3c <getM2MRemoteNumber+0x34>)
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	0011      	movs	r1, r2
     b1e:	0018      	movs	r0, r3
     b20:	4b07      	ldr	r3, [pc, #28]	; (b40 <getM2MRemoteNumber+0x38>)
     b22:	4798      	blx	r3
     b24:	e002      	b.n	b2c <getM2MRemoteNumber+0x24>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	2200      	movs	r2, #0
     b2a:	701a      	strb	r2, [r3, #0]
	}
	return m2mNoRemotNo;
     b2c:	687b      	ldr	r3, [r7, #4]
}
     b2e:	0018      	movs	r0, r3
     b30:	46bd      	mov	sp, r7
     b32:	b002      	add	sp, #8
     b34:	bd80      	pop	{r7, pc}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	20000554 	.word	0x20000554
     b3c:	20000570 	.word	0x20000570
     b40:	00017f57 	.word	0x00017f57

00000b44 <setM2MVerify>:

void setM2MVerify(bool flag)
{
     b44:	b580      	push	{r7, lr}
     b46:	b082      	sub	sp, #8
     b48:	af00      	add	r7, sp, #0
     b4a:	0002      	movs	r2, r0
     b4c:	1dfb      	adds	r3, r7, #7
     b4e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
     b50:	1dfb      	adds	r3, r7, #7
     b52:	781a      	ldrb	r2, [r3, #0]
     b54:	4b0a      	ldr	r3, [pc, #40]	; (b80 <setM2MVerify+0x3c>)
     b56:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     b58:	4a0a      	ldr	r2, [pc, #40]	; (b84 <setM2MVerify+0x40>)
     b5a:	4b09      	ldr	r3, [pc, #36]	; (b80 <setM2MVerify+0x3c>)
     b5c:	0010      	movs	r0, r2
     b5e:	0019      	movs	r1, r3
     b60:	2330      	movs	r3, #48	; 0x30
     b62:	001a      	movs	r2, r3
     b64:	4b08      	ldr	r3, [pc, #32]	; (b88 <setM2MVerify+0x44>)
     b66:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     b68:	4b06      	ldr	r3, [pc, #24]	; (b84 <setM2MVerify+0x40>)
     b6a:	0019      	movs	r1, r3
     b6c:	2019      	movs	r0, #25
     b6e:	4b07      	ldr	r3, [pc, #28]	; (b8c <setM2MVerify+0x48>)
     b70:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     b72:	4b07      	ldr	r3, [pc, #28]	; (b90 <setM2MVerify+0x4c>)
     b74:	4798      	blx	r3
}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	46bd      	mov	sp, r7
     b7a:	b002      	add	sp, #8
     b7c:	bd80      	pop	{r7, pc}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	20000554 	.word	0x20000554
     b84:	20000584 	.word	0x20000584
     b88:	00017ca1 	.word	0x00017ca1
     b8c:	00012969 	.word	0x00012969
     b90:	00012b11 	.word	0x00012b11

00000b94 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
     b94:	b580      	push	{r7, lr}
     b96:	b082      	sub	sp, #8
     b98:	af00      	add	r7, sp, #0
     b9a:	0002      	movs	r2, r0
     b9c:	1dfb      	adds	r3, r7, #7
     b9e:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
     ba0:	1dfb      	adds	r3, r7, #7
     ba2:	781a      	ldrb	r2, [r3, #0]
     ba4:	4b0a      	ldr	r3, [pc, #40]	; (bd0 <setM2MRemoteVerified+0x3c>)
     ba6:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     ba8:	4a0a      	ldr	r2, [pc, #40]	; (bd4 <setM2MRemoteVerified+0x40>)
     baa:	4b09      	ldr	r3, [pc, #36]	; (bd0 <setM2MRemoteVerified+0x3c>)
     bac:	0010      	movs	r0, r2
     bae:	0019      	movs	r1, r3
     bb0:	2330      	movs	r3, #48	; 0x30
     bb2:	001a      	movs	r2, r3
     bb4:	4b08      	ldr	r3, [pc, #32]	; (bd8 <setM2MRemoteVerified+0x44>)
     bb6:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     bb8:	4b06      	ldr	r3, [pc, #24]	; (bd4 <setM2MRemoteVerified+0x40>)
     bba:	0019      	movs	r1, r3
     bbc:	2019      	movs	r0, #25
     bbe:	4b07      	ldr	r3, [pc, #28]	; (bdc <setM2MRemoteVerified+0x48>)
     bc0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     bc2:	4b07      	ldr	r3, [pc, #28]	; (be0 <setM2MRemoteVerified+0x4c>)
     bc4:	4798      	blx	r3
}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	46bd      	mov	sp, r7
     bca:	b002      	add	sp, #8
     bcc:	bd80      	pop	{r7, pc}
     bce:	46c0      	nop			; (mov r8, r8)
     bd0:	20000554 	.word	0x20000554
     bd4:	20000584 	.word	0x20000584
     bd8:	00017ca1 	.word	0x00017ca1
     bdc:	00012969 	.word	0x00012969
     be0:	00012b11 	.word	0x00012b11

00000be4 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
     be4:	b580      	push	{r7, lr}
     be6:	b082      	sub	sp, #8
     be8:	af00      	add	r7, sp, #0
     bea:	0002      	movs	r2, r0
     bec:	1dfb      	adds	r3, r7, #7
     bee:	701a      	strb	r2, [r3, #0]
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
     bf0:	1dfb      	adds	r3, r7, #7
     bf2:	781a      	ldrb	r2, [r3, #0]
     bf4:	4b0f      	ldr	r3, [pc, #60]	; (c34 <saveM2MSettings+0x50>)
     bf6:	715a      	strb	r2, [r3, #5]
	if(!flag)					// m2m turned off
     bf8:	1dfb      	adds	r3, r7, #7
     bfa:	781b      	ldrb	r3, [r3, #0]
     bfc:	2201      	movs	r2, #1
     bfe:	4053      	eors	r3, r2
     c00:	b2db      	uxtb	r3, r3
     c02:	2b00      	cmp	r3, #0
     c04:	d002      	beq.n	c0c <saveM2MSettings+0x28>
	{
		m2m_Numbers_struct.m2mRemoteVerified=false;
     c06:	4b0b      	ldr	r3, [pc, #44]	; (c34 <saveM2MSettings+0x50>)
     c08:	2200      	movs	r2, #0
     c0a:	711a      	strb	r2, [r3, #4]
	}
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     c0c:	4a0a      	ldr	r2, [pc, #40]	; (c38 <saveM2MSettings+0x54>)
     c0e:	4b09      	ldr	r3, [pc, #36]	; (c34 <saveM2MSettings+0x50>)
     c10:	0010      	movs	r0, r2
     c12:	0019      	movs	r1, r3
     c14:	2330      	movs	r3, #48	; 0x30
     c16:	001a      	movs	r2, r3
     c18:	4b08      	ldr	r3, [pc, #32]	; (c3c <saveM2MSettings+0x58>)
     c1a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <saveM2MSettings+0x54>)
     c1e:	0019      	movs	r1, r3
     c20:	2019      	movs	r0, #25
     c22:	4b07      	ldr	r3, [pc, #28]	; (c40 <saveM2MSettings+0x5c>)
     c24:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c26:	4b07      	ldr	r3, [pc, #28]	; (c44 <saveM2MSettings+0x60>)
     c28:	4798      	blx	r3
}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	46bd      	mov	sp, r7
     c2e:	b002      	add	sp, #8
     c30:	bd80      	pop	{r7, pc}
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	20000554 	.word	0x20000554
     c38:	20000584 	.word	0x20000584
     c3c:	00017ca1 	.word	0x00017ca1
     c40:	00012969 	.word	0x00012969
     c44:	00012b11 	.word	0x00012b11

00000c48 <addM2MNumber>:

void addM2MNumber(char *no)
{
     c48:	b580      	push	{r7, lr}
     c4a:	b082      	sub	sp, #8
     c4c:	af00      	add	r7, sp, #0
     c4e:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mPresent = true;
     c50:	4b0f      	ldr	r3, [pc, #60]	; (c90 <addM2MNumber+0x48>)
     c52:	2201      	movs	r2, #1
     c54:	705a      	strb	r2, [r3, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
     c56:	687a      	ldr	r2, [r7, #4]
     c58:	4b0e      	ldr	r3, [pc, #56]	; (c94 <addM2MNumber+0x4c>)
     c5a:	0011      	movs	r1, r2
     c5c:	0018      	movs	r0, r3
     c5e:	4b0e      	ldr	r3, [pc, #56]	; (c98 <addM2MNumber+0x50>)
     c60:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     c62:	4a0e      	ldr	r2, [pc, #56]	; (c9c <addM2MNumber+0x54>)
     c64:	4b0a      	ldr	r3, [pc, #40]	; (c90 <addM2MNumber+0x48>)
     c66:	0010      	movs	r0, r2
     c68:	0019      	movs	r1, r3
     c6a:	2330      	movs	r3, #48	; 0x30
     c6c:	001a      	movs	r2, r3
     c6e:	4b0c      	ldr	r3, [pc, #48]	; (ca0 <addM2MNumber+0x58>)
     c70:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     c72:	4b0a      	ldr	r3, [pc, #40]	; (c9c <addM2MNumber+0x54>)
     c74:	0019      	movs	r1, r3
     c76:	2019      	movs	r0, #25
     c78:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <addM2MNumber+0x5c>)
     c7a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c7c:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <addM2MNumber+0x60>)
     c7e:	4798      	blx	r3
	setM2MVerify(false);
     c80:	2000      	movs	r0, #0
     c82:	4b0a      	ldr	r3, [pc, #40]	; (cac <addM2MNumber+0x64>)
     c84:	4798      	blx	r3
}
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	46bd      	mov	sp, r7
     c8a:	b002      	add	sp, #8
     c8c:	bd80      	pop	{r7, pc}
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	20000554 	.word	0x20000554
     c94:	2000055c 	.word	0x2000055c
     c98:	00017f57 	.word	0x00017f57
     c9c:	20000584 	.word	0x20000584
     ca0:	00017ca1 	.word	0x00017ca1
     ca4:	00012969 	.word	0x00012969
     ca8:	00012b11 	.word	0x00012b11
     cac:	00000b45 	.word	0x00000b45

00000cb0 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
     cb0:	b580      	push	{r7, lr}
     cb2:	b082      	sub	sp, #8
     cb4:	af00      	add	r7, sp, #0
     cb6:	6078      	str	r0, [r7, #4]
	m2m_Numbers_struct.m2mRemotePresent = true;
     cb8:	4b10      	ldr	r3, [pc, #64]	; (cfc <addM2MRemoteNumber+0x4c>)
     cba:	2201      	movs	r2, #1
     cbc:	70da      	strb	r2, [r3, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
     cbe:	687a      	ldr	r2, [r7, #4]
     cc0:	4b0f      	ldr	r3, [pc, #60]	; (d00 <addM2MRemoteNumber+0x50>)
     cc2:	0011      	movs	r1, r2
     cc4:	0018      	movs	r0, r3
     cc6:	4b0f      	ldr	r3, [pc, #60]	; (d04 <addM2MRemoteNumber+0x54>)
     cc8:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     cca:	4a0f      	ldr	r2, [pc, #60]	; (d08 <addM2MRemoteNumber+0x58>)
     ccc:	4b0b      	ldr	r3, [pc, #44]	; (cfc <addM2MRemoteNumber+0x4c>)
     cce:	0010      	movs	r0, r2
     cd0:	0019      	movs	r1, r3
     cd2:	2330      	movs	r3, #48	; 0x30
     cd4:	001a      	movs	r2, r3
     cd6:	4b0d      	ldr	r3, [pc, #52]	; (d0c <addM2MRemoteNumber+0x5c>)
     cd8:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     cda:	4b0b      	ldr	r3, [pc, #44]	; (d08 <addM2MRemoteNumber+0x58>)
     cdc:	0019      	movs	r1, r3
     cde:	2019      	movs	r0, #25
     ce0:	4b0b      	ldr	r3, [pc, #44]	; (d10 <addM2MRemoteNumber+0x60>)
     ce2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     ce4:	4b0b      	ldr	r3, [pc, #44]	; (d14 <addM2MRemoteNumber+0x64>)
     ce6:	4798      	blx	r3
	setM2MRemoteVerified(false);
     ce8:	2000      	movs	r0, #0
     cea:	4b0b      	ldr	r3, [pc, #44]	; (d18 <addM2MRemoteNumber+0x68>)
     cec:	4798      	blx	r3
	saveM2MSettings(false);
     cee:	2000      	movs	r0, #0
     cf0:	4b0a      	ldr	r3, [pc, #40]	; (d1c <addM2MRemoteNumber+0x6c>)
     cf2:	4798      	blx	r3
}
     cf4:	46c0      	nop			; (mov r8, r8)
     cf6:	46bd      	mov	sp, r7
     cf8:	b002      	add	sp, #8
     cfa:	bd80      	pop	{r7, pc}
     cfc:	20000554 	.word	0x20000554
     d00:	20000570 	.word	0x20000570
     d04:	00017f57 	.word	0x00017f57
     d08:	20000584 	.word	0x20000584
     d0c:	00017ca1 	.word	0x00017ca1
     d10:	00012969 	.word	0x00012969
     d14:	00012b11 	.word	0x00012b11
     d18:	00000b95 	.word	0x00000b95
     d1c:	00000be5 	.word	0x00000be5

00000d20 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
     d20:	b580      	push	{r7, lr}
     d22:	b08e      	sub	sp, #56	; 0x38
     d24:	af00      	add	r7, sp, #0
     d26:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
     d28:	4b28      	ldr	r3, [pc, #160]	; (dcc <getActiveNumber+0xac>)
     d2a:	789b      	ldrb	r3, [r3, #2]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d02b      	beq.n	d88 <getActiveNumber+0x68>
	{
		if ((alternateNumber_struct.alterNumberSetting))
     d30:	4b27      	ldr	r3, [pc, #156]	; (dd0 <getActiveNumber+0xb0>)
     d32:	785b      	ldrb	r3, [r3, #1]
     d34:	2b00      	cmp	r3, #0
     d36:	d006      	beq.n	d46 <getActiveNumber+0x26>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
     d38:	4a26      	ldr	r2, [pc, #152]	; (dd4 <getActiveNumber+0xb4>)
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	0011      	movs	r1, r2
     d3e:	0018      	movs	r0, r3
     d40:	4b25      	ldr	r3, [pc, #148]	; (dd8 <getActiveNumber+0xb8>)
     d42:	4798      	blx	r3
     d44:	e03c      	b.n	dc0 <getActiveNumber+0xa0>
		}
		else
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     d46:	4b25      	ldr	r3, [pc, #148]	; (ddc <getActiveNumber+0xbc>)
     d48:	223c      	movs	r2, #60	; 0x3c
     d4a:	2100      	movs	r1, #0
     d4c:	0018      	movs	r0, r3
     d4e:	4b24      	ldr	r3, [pc, #144]	; (de0 <getActiveNumber+0xc0>)
     d50:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
     d52:	4b1e      	ldr	r3, [pc, #120]	; (dcc <getActiveNumber+0xac>)
     d54:	78db      	ldrb	r3, [r3, #3]
     d56:	3309      	adds	r3, #9
     d58:	b2db      	uxtb	r3, r3
     d5a:	4a20      	ldr	r2, [pc, #128]	; (ddc <getActiveNumber+0xbc>)
     d5c:	0011      	movs	r1, r2
     d5e:	0018      	movs	r0, r3
     d60:	4b20      	ldr	r3, [pc, #128]	; (de4 <getActiveNumber+0xc4>)
     d62:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     d64:	2320      	movs	r3, #32
     d66:	18fa      	adds	r2, r7, r3
     d68:	4b1c      	ldr	r3, [pc, #112]	; (ddc <getActiveNumber+0xbc>)
     d6a:	0010      	movs	r0, r2
     d6c:	0019      	movs	r1, r3
     d6e:	2318      	movs	r3, #24
     d70:	001a      	movs	r2, r3
     d72:	4b1d      	ldr	r3, [pc, #116]	; (de8 <getActiveNumber+0xc8>)
     d74:	4798      	blx	r3
			strcpy(ActiveNo,mobile_no.mobile_no_ee);
     d76:	2320      	movs	r3, #32
     d78:	18fb      	adds	r3, r7, r3
     d7a:	1d1a      	adds	r2, r3, #4
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	0011      	movs	r1, r2
     d80:	0018      	movs	r0, r3
     d82:	4b15      	ldr	r3, [pc, #84]	; (dd8 <getActiveNumber+0xb8>)
     d84:	4798      	blx	r3
     d86:	e01b      	b.n	dc0 <getActiveNumber+0xa0>
		}
	}
	else																					// no effect of this portion as registerEvent checks for numbercount is > 0
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     d88:	4b14      	ldr	r3, [pc, #80]	; (ddc <getActiveNumber+0xbc>)
     d8a:	223c      	movs	r2, #60	; 0x3c
     d8c:	2100      	movs	r1, #0
     d8e:	0018      	movs	r0, r3
     d90:	4b13      	ldr	r3, [pc, #76]	; (de0 <getActiveNumber+0xc0>)
     d92:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
     d94:	4b11      	ldr	r3, [pc, #68]	; (ddc <getActiveNumber+0xbc>)
     d96:	0019      	movs	r1, r3
     d98:	2003      	movs	r0, #3
     d9a:	4b12      	ldr	r3, [pc, #72]	; (de4 <getActiveNumber+0xc4>)
     d9c:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     d9e:	2308      	movs	r3, #8
     da0:	18fa      	adds	r2, r7, r3
     da2:	4b0e      	ldr	r3, [pc, #56]	; (ddc <getActiveNumber+0xbc>)
     da4:	0010      	movs	r0, r2
     da6:	0019      	movs	r1, r3
     da8:	2318      	movs	r3, #24
     daa:	001a      	movs	r2, r3
     dac:	4b0e      	ldr	r3, [pc, #56]	; (de8 <getActiveNumber+0xc8>)
     dae:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
     db0:	2308      	movs	r3, #8
     db2:	18fb      	adds	r3, r7, r3
     db4:	1d1a      	adds	r2, r3, #4
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	0011      	movs	r1, r2
     dba:	0018      	movs	r0, r3
     dbc:	4b06      	ldr	r3, [pc, #24]	; (dd8 <getActiveNumber+0xb8>)
     dbe:	4798      	blx	r3
	}
	
	return ActiveNo;
     dc0:	687b      	ldr	r3, [r7, #4]
}
     dc2:	0018      	movs	r0, r3
     dc4:	46bd      	mov	sp, r7
     dc6:	b00e      	add	sp, #56	; 0x38
     dc8:	bd80      	pop	{r7, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	20000610 	.word	0x20000610
     dd0:	20000644 	.word	0x20000644
     dd4:	20000648 	.word	0x20000648
     dd8:	00017f57 	.word	0x00017f57
     ddc:	20000584 	.word	0x20000584
     de0:	00017cd7 	.word	0x00017cd7
     de4:	00012a75 	.word	0x00012a75
     de8:	00017ca1 	.word	0x00017ca1

00000dec <checkExists>:
uint8_t checkExists(char *number)
{
     dec:	b580      	push	{r7, lr}
     dee:	b08a      	sub	sp, #40	; 0x28
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
     df4:	4b33      	ldr	r3, [pc, #204]	; (ec4 <checkExists+0xd8>)
     df6:	789b      	ldrb	r3, [r3, #2]
     df8:	2b00      	cmp	r3, #0
     dfa:	d039      	beq.n	e70 <checkExists+0x84>
		//if(isPrimaryNumber(number))
		//{
		//return 0;
		//}
		
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     dfc:	2327      	movs	r3, #39	; 0x27
     dfe:	18fb      	adds	r3, r7, r3
     e00:	2200      	movs	r2, #0
     e02:	701a      	strb	r2, [r3, #0]
     e04:	e02d      	b.n	e62 <checkExists+0x76>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     e06:	4b30      	ldr	r3, [pc, #192]	; (ec8 <checkExists+0xdc>)
     e08:	223c      	movs	r2, #60	; 0x3c
     e0a:	2100      	movs	r1, #0
     e0c:	0018      	movs	r0, r3
     e0e:	4b2f      	ldr	r3, [pc, #188]	; (ecc <checkExists+0xe0>)
     e10:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     e12:	2327      	movs	r3, #39	; 0x27
     e14:	18fb      	adds	r3, r7, r3
     e16:	781b      	ldrb	r3, [r3, #0]
     e18:	3309      	adds	r3, #9
     e1a:	b2db      	uxtb	r3, r3
     e1c:	4a2a      	ldr	r2, [pc, #168]	; (ec8 <checkExists+0xdc>)
     e1e:	0011      	movs	r1, r2
     e20:	0018      	movs	r0, r3
     e22:	4b2b      	ldr	r3, [pc, #172]	; (ed0 <checkExists+0xe4>)
     e24:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     e26:	230c      	movs	r3, #12
     e28:	18fa      	adds	r2, r7, r3
     e2a:	4b27      	ldr	r3, [pc, #156]	; (ec8 <checkExists+0xdc>)
     e2c:	0010      	movs	r0, r2
     e2e:	0019      	movs	r1, r3
     e30:	2318      	movs	r3, #24
     e32:	001a      	movs	r2, r3
     e34:	4b27      	ldr	r3, [pc, #156]	; (ed4 <checkExists+0xe8>)
     e36:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
     e38:	230c      	movs	r3, #12
     e3a:	18fb      	adds	r3, r7, r3
     e3c:	1d1a      	adds	r2, r3, #4
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	0011      	movs	r1, r2
     e42:	0018      	movs	r0, r3
     e44:	4b24      	ldr	r3, [pc, #144]	; (ed8 <checkExists+0xec>)
     e46:	4798      	blx	r3
     e48:	1e03      	subs	r3, r0, #0
     e4a:	d003      	beq.n	e54 <checkExists+0x68>
			{
				return i;
     e4c:	2327      	movs	r3, #39	; 0x27
     e4e:	18fb      	adds	r3, r7, r3
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	e032      	b.n	eba <checkExists+0xce>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     e54:	2327      	movs	r3, #39	; 0x27
     e56:	18fb      	adds	r3, r7, r3
     e58:	781a      	ldrb	r2, [r3, #0]
     e5a:	2327      	movs	r3, #39	; 0x27
     e5c:	18fb      	adds	r3, r7, r3
     e5e:	3201      	adds	r2, #1
     e60:	701a      	strb	r2, [r3, #0]
     e62:	4b18      	ldr	r3, [pc, #96]	; (ec4 <checkExists+0xd8>)
     e64:	789b      	ldrb	r3, [r3, #2]
     e66:	2227      	movs	r2, #39	; 0x27
     e68:	18ba      	adds	r2, r7, r2
     e6a:	7812      	ldrb	r2, [r2, #0]
     e6c:	429a      	cmp	r2, r3
     e6e:	d3ca      	bcc.n	e06 <checkExists+0x1a>
			}
		}
	}

	if(isAlterNumber(number))
     e70:	687b      	ldr	r3, [r7, #4]
     e72:	0018      	movs	r0, r3
     e74:	4b19      	ldr	r3, [pc, #100]	; (edc <checkExists+0xf0>)
     e76:	4798      	blx	r3
     e78:	1e03      	subs	r3, r0, #0
     e7a:	d001      	beq.n	e80 <checkExists+0x94>
	{
		return 0xFD;
     e7c:	23fd      	movs	r3, #253	; 0xfd
     e7e:	e01c      	b.n	eba <checkExists+0xce>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
     e80:	4b17      	ldr	r3, [pc, #92]	; (ee0 <checkExists+0xf4>)
     e82:	789b      	ldrb	r3, [r3, #2]
     e84:	2b00      	cmp	r3, #0
     e86:	d007      	beq.n	e98 <checkExists+0xac>
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	0018      	movs	r0, r3
     e8c:	4b15      	ldr	r3, [pc, #84]	; (ee4 <checkExists+0xf8>)
     e8e:	4798      	blx	r3
     e90:	1e03      	subs	r3, r0, #0
     e92:	d001      	beq.n	e98 <checkExists+0xac>
	{
		return 0xFE;
     e94:	23fe      	movs	r3, #254	; 0xfe
     e96:	e010      	b.n	eba <checkExists+0xce>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
     e98:	4b13      	ldr	r3, [pc, #76]	; (ee8 <checkExists+0xfc>)
     e9a:	78db      	ldrb	r3, [r3, #3]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d00b      	beq.n	eb8 <checkExists+0xcc>
	{
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
     ea0:	4b0f      	ldr	r3, [pc, #60]	; (ee0 <checkExists+0xf4>)
     ea2:	791b      	ldrb	r3, [r3, #4]
     ea4:	2b00      	cmp	r3, #0
     ea6:	d007      	beq.n	eb8 <checkExists+0xcc>
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	0018      	movs	r0, r3
     eac:	4b0f      	ldr	r3, [pc, #60]	; (eec <checkExists+0x100>)
     eae:	4798      	blx	r3
     eb0:	1e03      	subs	r3, r0, #0
     eb2:	d001      	beq.n	eb8 <checkExists+0xcc>
		{
			return 0xFE;
     eb4:	23fe      	movs	r3, #254	; 0xfe
     eb6:	e000      	b.n	eba <checkExists+0xce>
		}
	}
	return 0xFF;
     eb8:	23ff      	movs	r3, #255	; 0xff
}
     eba:	0018      	movs	r0, r3
     ebc:	46bd      	mov	sp, r7
     ebe:	b00a      	add	sp, #40	; 0x28
     ec0:	bd80      	pop	{r7, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	20000610 	.word	0x20000610
     ec8:	20000584 	.word	0x20000584
     ecc:	00017cd7 	.word	0x00017cd7
     ed0:	00012a75 	.word	0x00012a75
     ed4:	00017ca1 	.word	0x00017ca1
     ed8:	00017f97 	.word	0x00017f97
     edc:	00000a0d 	.word	0x00000a0d
     ee0:	20000554 	.word	0x20000554
     ee4:	00000a55 	.word	0x00000a55
     ee8:	20000628 	.word	0x20000628
     eec:	00000a91 	.word	0x00000a91

00000ef0 <addNumber>:

bool addNumber(char *number)
{
     ef0:	b580      	push	{r7, lr}
     ef2:	b088      	sub	sp, #32
     ef4:	af00      	add	r7, sp, #0
     ef6:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
     ef8:	4b33      	ldr	r3, [pc, #204]	; (fc8 <addNumber+0xd8>)
     efa:	789a      	ldrb	r2, [r3, #2]
     efc:	4b32      	ldr	r3, [pc, #200]	; (fc8 <addNumber+0xd8>)
     efe:	785b      	ldrb	r3, [r3, #1]
     f00:	429a      	cmp	r2, r3
     f02:	d101      	bne.n	f08 <addNumber+0x18>
	{
		return false;
     f04:	2300      	movs	r3, #0
     f06:	e05a      	b.n	fbe <addNumber+0xce>
	}
	else
	{
		if (checkExists(number) > 0xF0)
     f08:	687b      	ldr	r3, [r7, #4]
     f0a:	0018      	movs	r0, r3
     f0c:	4b2f      	ldr	r3, [pc, #188]	; (fcc <addNumber+0xdc>)
     f0e:	4798      	blx	r3
     f10:	0003      	movs	r3, r0
     f12:	2bf0      	cmp	r3, #240	; 0xf0
     f14:	d952      	bls.n	fbc <addNumber+0xcc>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
     f16:	4b2e      	ldr	r3, [pc, #184]	; (fd0 <addNumber+0xe0>)
     f18:	223c      	movs	r2, #60	; 0x3c
     f1a:	2100      	movs	r1, #0
     f1c:	0018      	movs	r0, r3
     f1e:	4b2d      	ldr	r3, [pc, #180]	; (fd4 <addNumber+0xe4>)
     f20:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
     f22:	4b29      	ldr	r3, [pc, #164]	; (fc8 <addNumber+0xd8>)
     f24:	789b      	ldrb	r3, [r3, #2]
     f26:	3309      	adds	r3, #9
     f28:	b2db      	uxtb	r3, r3
     f2a:	4a29      	ldr	r2, [pc, #164]	; (fd0 <addNumber+0xe0>)
     f2c:	0011      	movs	r1, r2
     f2e:	0018      	movs	r0, r3
     f30:	4b29      	ldr	r3, [pc, #164]	; (fd8 <addNumber+0xe8>)
     f32:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     f34:	2308      	movs	r3, #8
     f36:	18fa      	adds	r2, r7, r3
     f38:	4b25      	ldr	r3, [pc, #148]	; (fd0 <addNumber+0xe0>)
     f3a:	0010      	movs	r0, r2
     f3c:	0019      	movs	r1, r3
     f3e:	2318      	movs	r3, #24
     f40:	001a      	movs	r2, r3
     f42:	4b26      	ldr	r3, [pc, #152]	; (fdc <addNumber+0xec>)
     f44:	4798      	blx	r3
			
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
     f46:	2308      	movs	r3, #8
     f48:	18fb      	adds	r3, r7, r3
     f4a:	3304      	adds	r3, #4
     f4c:	2214      	movs	r2, #20
     f4e:	2100      	movs	r1, #0
     f50:	0018      	movs	r0, r3
     f52:	4b20      	ldr	r3, [pc, #128]	; (fd4 <addNumber+0xe4>)
     f54:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
     f56:	687a      	ldr	r2, [r7, #4]
     f58:	2308      	movs	r3, #8
     f5a:	18fb      	adds	r3, r7, r3
     f5c:	3304      	adds	r3, #4
     f5e:	0011      	movs	r1, r2
     f60:	0018      	movs	r0, r3
     f62:	4b1f      	ldr	r3, [pc, #124]	; (fe0 <addNumber+0xf0>)
     f64:	4798      	blx	r3
			
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
     f66:	4a1a      	ldr	r2, [pc, #104]	; (fd0 <addNumber+0xe0>)
     f68:	2308      	movs	r3, #8
     f6a:	18fb      	adds	r3, r7, r3
     f6c:	0010      	movs	r0, r2
     f6e:	0019      	movs	r1, r3
     f70:	2318      	movs	r3, #24
     f72:	001a      	movs	r2, r3
     f74:	4b19      	ldr	r3, [pc, #100]	; (fdc <addNumber+0xec>)
     f76:	4798      	blx	r3
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
     f78:	4b13      	ldr	r3, [pc, #76]	; (fc8 <addNumber+0xd8>)
     f7a:	789b      	ldrb	r3, [r3, #2]
     f7c:	3309      	adds	r3, #9
     f7e:	b2db      	uxtb	r3, r3
     f80:	4a13      	ldr	r2, [pc, #76]	; (fd0 <addNumber+0xe0>)
     f82:	0011      	movs	r1, r2
     f84:	0018      	movs	r0, r3
     f86:	4b17      	ldr	r3, [pc, #92]	; (fe4 <addNumber+0xf4>)
     f88:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
     f8a:	4b17      	ldr	r3, [pc, #92]	; (fe8 <addNumber+0xf8>)
     f8c:	4798      	blx	r3
			
			user_count_struct.current_user_no_count++;
     f8e:	4b0e      	ldr	r3, [pc, #56]	; (fc8 <addNumber+0xd8>)
     f90:	789b      	ldrb	r3, [r3, #2]
     f92:	3301      	adds	r3, #1
     f94:	b2da      	uxtb	r2, r3
     f96:	4b0c      	ldr	r3, [pc, #48]	; (fc8 <addNumber+0xd8>)
     f98:	709a      	strb	r2, [r3, #2]
			
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     f9a:	4a0d      	ldr	r2, [pc, #52]	; (fd0 <addNumber+0xe0>)
     f9c:	4b0a      	ldr	r3, [pc, #40]	; (fc8 <addNumber+0xd8>)
     f9e:	0010      	movs	r0, r2
     fa0:	0019      	movs	r1, r3
     fa2:	2308      	movs	r3, #8
     fa4:	001a      	movs	r2, r3
     fa6:	4b0d      	ldr	r3, [pc, #52]	; (fdc <addNumber+0xec>)
     fa8:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     faa:	4b09      	ldr	r3, [pc, #36]	; (fd0 <addNumber+0xe0>)
     fac:	0019      	movs	r1, r3
     fae:	2008      	movs	r0, #8
     fb0:	4b0c      	ldr	r3, [pc, #48]	; (fe4 <addNumber+0xf4>)
     fb2:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
     fb4:	4b0c      	ldr	r3, [pc, #48]	; (fe8 <addNumber+0xf8>)
     fb6:	4798      	blx	r3
			
			return true;
     fb8:	2301      	movs	r3, #1
     fba:	e000      	b.n	fbe <addNumber+0xce>
		}
	}
	return false;
     fbc:	2300      	movs	r3, #0
}
     fbe:	0018      	movs	r0, r3
     fc0:	46bd      	mov	sp, r7
     fc2:	b008      	add	sp, #32
     fc4:	bd80      	pop	{r7, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	20000610 	.word	0x20000610
     fcc:	00000ded 	.word	0x00000ded
     fd0:	20000584 	.word	0x20000584
     fd4:	00017cd7 	.word	0x00017cd7
     fd8:	00012a75 	.word	0x00012a75
     fdc:	00017ca1 	.word	0x00017ca1
     fe0:	00017f57 	.word	0x00017f57
     fe4:	00012969 	.word	0x00012969
     fe8:	00012b11 	.word	0x00012b11

00000fec <removeNumber>:

bool removeNumber(char *numer)
{
     fec:	b590      	push	{r4, r7, lr}
     fee:	b085      	sub	sp, #20
     ff0:	af00      	add	r7, sp, #0
     ff2:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count < 2)
     ff4:	4b3d      	ldr	r3, [pc, #244]	; (10ec <removeNumber+0x100>)
     ff6:	789b      	ldrb	r3, [r3, #2]
     ff8:	2b01      	cmp	r3, #1
     ffa:	d801      	bhi.n	1000 <removeNumber+0x14>
	{
		return false;
     ffc:	2300      	movs	r3, #0
     ffe:	e071      	b.n	10e4 <removeNumber+0xf8>
	}
	else
	{
		uint8_t loc =  checkExists(numer);
    1000:	230e      	movs	r3, #14
    1002:	18fc      	adds	r4, r7, r3
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	0018      	movs	r0, r3
    1008:	4b39      	ldr	r3, [pc, #228]	; (10f0 <removeNumber+0x104>)
    100a:	4798      	blx	r3
    100c:	0003      	movs	r3, r0
    100e:	7023      	strb	r3, [r4, #0]
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
    1010:	4b36      	ldr	r3, [pc, #216]	; (10ec <removeNumber+0x100>)
    1012:	785b      	ldrb	r3, [r3, #1]
    1014:	220e      	movs	r2, #14
    1016:	18ba      	adds	r2, r7, r2
    1018:	7812      	ldrb	r2, [r2, #0]
    101a:	429a      	cmp	r2, r3
    101c:	d261      	bcs.n	10e2 <removeNumber+0xf6>
    101e:	4b33      	ldr	r3, [pc, #204]	; (10ec <removeNumber+0x100>)
    1020:	78db      	ldrb	r3, [r3, #3]
    1022:	220e      	movs	r2, #14
    1024:	18ba      	adds	r2, r7, r2
    1026:	7812      	ldrb	r2, [r2, #0]
    1028:	429a      	cmp	r2, r3
    102a:	d05a      	beq.n	10e2 <removeNumber+0xf6>
		{
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
    102c:	230f      	movs	r3, #15
    102e:	18fb      	adds	r3, r7, r3
    1030:	220e      	movs	r2, #14
    1032:	18ba      	adds	r2, r7, r2
    1034:	7812      	ldrb	r2, [r2, #0]
    1036:	701a      	strb	r2, [r3, #0]
    1038:	e022      	b.n	1080 <removeNumber+0x94>
			{
				memset(page_data, '\0', sizeof(page_data));
    103a:	4b2e      	ldr	r3, [pc, #184]	; (10f4 <removeNumber+0x108>)
    103c:	223c      	movs	r2, #60	; 0x3c
    103e:	2100      	movs	r1, #0
    1040:	0018      	movs	r0, r3
    1042:	4b2d      	ldr	r3, [pc, #180]	; (10f8 <removeNumber+0x10c>)
    1044:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
    1046:	230f      	movs	r3, #15
    1048:	18fb      	adds	r3, r7, r3
    104a:	781b      	ldrb	r3, [r3, #0]
    104c:	330a      	adds	r3, #10
    104e:	b2db      	uxtb	r3, r3
    1050:	4a28      	ldr	r2, [pc, #160]	; (10f4 <removeNumber+0x108>)
    1052:	0011      	movs	r1, r2
    1054:	0018      	movs	r0, r3
    1056:	4b29      	ldr	r3, [pc, #164]	; (10fc <removeNumber+0x110>)
    1058:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
    105a:	230f      	movs	r3, #15
    105c:	18fb      	adds	r3, r7, r3
    105e:	781b      	ldrb	r3, [r3, #0]
    1060:	3309      	adds	r3, #9
    1062:	b2db      	uxtb	r3, r3
    1064:	4a23      	ldr	r2, [pc, #140]	; (10f4 <removeNumber+0x108>)
    1066:	0011      	movs	r1, r2
    1068:	0018      	movs	r0, r3
    106a:	4b25      	ldr	r3, [pc, #148]	; (1100 <removeNumber+0x114>)
    106c:	4798      	blx	r3
				eeprom_emulator_commit_page_buffer();
    106e:	4b25      	ldr	r3, [pc, #148]	; (1104 <removeNumber+0x118>)
    1070:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
    1072:	230f      	movs	r3, #15
    1074:	18fb      	adds	r3, r7, r3
    1076:	781a      	ldrb	r2, [r3, #0]
    1078:	230f      	movs	r3, #15
    107a:	18fb      	adds	r3, r7, r3
    107c:	3201      	adds	r2, #1
    107e:	701a      	strb	r2, [r3, #0]
    1080:	230f      	movs	r3, #15
    1082:	18fb      	adds	r3, r7, r3
    1084:	781a      	ldrb	r2, [r3, #0]
    1086:	4b19      	ldr	r3, [pc, #100]	; (10ec <removeNumber+0x100>)
    1088:	789b      	ldrb	r3, [r3, #2]
    108a:	3b01      	subs	r3, #1
    108c:	429a      	cmp	r2, r3
    108e:	dbd4      	blt.n	103a <removeNumber+0x4e>
			}
			user_count_struct.current_user_no_count--;
    1090:	4b16      	ldr	r3, [pc, #88]	; (10ec <removeNumber+0x100>)
    1092:	789b      	ldrb	r3, [r3, #2]
    1094:	3b01      	subs	r3, #1
    1096:	b2da      	uxtb	r2, r3
    1098:	4b14      	ldr	r3, [pc, #80]	; (10ec <removeNumber+0x100>)
    109a:	709a      	strb	r2, [r3, #2]
			
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
    109c:	4b13      	ldr	r3, [pc, #76]	; (10ec <removeNumber+0x100>)
    109e:	791b      	ldrb	r3, [r3, #4]
    10a0:	220e      	movs	r2, #14
    10a2:	18ba      	adds	r2, r7, r2
    10a4:	7812      	ldrb	r2, [r2, #0]
    10a6:	429a      	cmp	r2, r3
    10a8:	d007      	beq.n	10ba <removeNumber+0xce>
    10aa:	230e      	movs	r3, #14
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	781a      	ldrb	r2, [r3, #0]
    10b0:	4b0e      	ldr	r3, [pc, #56]	; (10ec <removeNumber+0x100>)
    10b2:	789b      	ldrb	r3, [r3, #2]
    10b4:	3b01      	subs	r3, #1
    10b6:	429a      	cmp	r2, r3
    10b8:	dd02      	ble.n	10c0 <removeNumber+0xd4>
			{
				user_count_struct.secondaryNumberIndex= 1;
    10ba:	4b0c      	ldr	r3, [pc, #48]	; (10ec <removeNumber+0x100>)
    10bc:	2201      	movs	r2, #1
    10be:	711a      	strb	r2, [r3, #4]
			}
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    10c0:	4a0c      	ldr	r2, [pc, #48]	; (10f4 <removeNumber+0x108>)
    10c2:	4b0a      	ldr	r3, [pc, #40]	; (10ec <removeNumber+0x100>)
    10c4:	0010      	movs	r0, r2
    10c6:	0019      	movs	r1, r3
    10c8:	2308      	movs	r3, #8
    10ca:	001a      	movs	r2, r3
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <removeNumber+0x11c>)
    10ce:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    10d0:	4b08      	ldr	r3, [pc, #32]	; (10f4 <removeNumber+0x108>)
    10d2:	0019      	movs	r1, r3
    10d4:	2008      	movs	r0, #8
    10d6:	4b0a      	ldr	r3, [pc, #40]	; (1100 <removeNumber+0x114>)
    10d8:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    10da:	4b0a      	ldr	r3, [pc, #40]	; (1104 <removeNumber+0x118>)
    10dc:	4798      	blx	r3
			return true;
    10de:	2301      	movs	r3, #1
    10e0:	e000      	b.n	10e4 <removeNumber+0xf8>
		}
	}
	return false;
    10e2:	2300      	movs	r3, #0
}
    10e4:	0018      	movs	r0, r3
    10e6:	46bd      	mov	sp, r7
    10e8:	b005      	add	sp, #20
    10ea:	bd90      	pop	{r4, r7, pc}
    10ec:	20000610 	.word	0x20000610
    10f0:	00000ded 	.word	0x00000ded
    10f4:	20000584 	.word	0x20000584
    10f8:	00017cd7 	.word	0x00017cd7
    10fc:	00012a75 	.word	0x00012a75
    1100:	00012969 	.word	0x00012969
    1104:	00012b11 	.word	0x00012b11
    1108:	00017ca1 	.word	0x00017ca1

0000110c <clearNumbers>:

void clearNumbers(bool admin)
{
    110c:	b580      	push	{r7, lr}
    110e:	b082      	sub	sp, #8
    1110:	af00      	add	r7, sp, #0
    1112:	0002      	movs	r2, r0
    1114:	1dfb      	adds	r3, r7, #7
    1116:	701a      	strb	r2, [r3, #0]
	if (admin)
    1118:	1dfb      	adds	r3, r7, #7
    111a:	781b      	ldrb	r3, [r3, #0]
    111c:	2b00      	cmp	r3, #0
    111e:	d003      	beq.n	1128 <clearNumbers+0x1c>
	{
		user_count_struct.current_user_no_count = 0;
    1120:	4b28      	ldr	r3, [pc, #160]	; (11c4 <clearNumbers+0xb8>)
    1122:	2200      	movs	r2, #0
    1124:	709a      	strb	r2, [r3, #2]
    1126:	e018      	b.n	115a <clearNumbers+0x4e>
	}
	else
	{
		memset(page_data, '\0', sizeof(page_data));
    1128:	4b27      	ldr	r3, [pc, #156]	; (11c8 <clearNumbers+0xbc>)
    112a:	223c      	movs	r2, #60	; 0x3c
    112c:	2100      	movs	r1, #0
    112e:	0018      	movs	r0, r3
    1130:	4b26      	ldr	r3, [pc, #152]	; (11cc <clearNumbers+0xc0>)
    1132:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
    1134:	4b23      	ldr	r3, [pc, #140]	; (11c4 <clearNumbers+0xb8>)
    1136:	78db      	ldrb	r3, [r3, #3]
    1138:	3309      	adds	r3, #9
    113a:	b2db      	uxtb	r3, r3
    113c:	4a22      	ldr	r2, [pc, #136]	; (11c8 <clearNumbers+0xbc>)
    113e:	0011      	movs	r1, r2
    1140:	0018      	movs	r0, r3
    1142:	4b23      	ldr	r3, [pc, #140]	; (11d0 <clearNumbers+0xc4>)
    1144:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
    1146:	4b20      	ldr	r3, [pc, #128]	; (11c8 <clearNumbers+0xbc>)
    1148:	0019      	movs	r1, r3
    114a:	2009      	movs	r0, #9
    114c:	4b21      	ldr	r3, [pc, #132]	; (11d4 <clearNumbers+0xc8>)
    114e:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    1150:	4b21      	ldr	r3, [pc, #132]	; (11d8 <clearNumbers+0xcc>)
    1152:	4798      	blx	r3

		user_count_struct.current_user_no_count = 1;
    1154:	4b1b      	ldr	r3, [pc, #108]	; (11c4 <clearNumbers+0xb8>)
    1156:	2201      	movs	r2, #1
    1158:	709a      	strb	r2, [r3, #2]
		
	}
	user_count_struct.primaryNumberIndex=0;
    115a:	4b1a      	ldr	r3, [pc, #104]	; (11c4 <clearNumbers+0xb8>)
    115c:	2200      	movs	r2, #0
    115e:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
    1160:	4b18      	ldr	r3, [pc, #96]	; (11c4 <clearNumbers+0xb8>)
    1162:	2201      	movs	r2, #1
    1164:	711a      	strb	r2, [r3, #4]

	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    1166:	4a18      	ldr	r2, [pc, #96]	; (11c8 <clearNumbers+0xbc>)
    1168:	4b16      	ldr	r3, [pc, #88]	; (11c4 <clearNumbers+0xb8>)
    116a:	0010      	movs	r0, r2
    116c:	0019      	movs	r1, r3
    116e:	2308      	movs	r3, #8
    1170:	001a      	movs	r2, r3
    1172:	4b1a      	ldr	r3, [pc, #104]	; (11dc <clearNumbers+0xd0>)
    1174:	4798      	blx	r3
	user_count_struct.primaryNumberIndex=0;
    1176:	4b13      	ldr	r3, [pc, #76]	; (11c4 <clearNumbers+0xb8>)
    1178:	2200      	movs	r2, #0
    117a:	70da      	strb	r2, [r3, #3]
	user_count_struct.secondaryNumberIndex=1;
    117c:	4b11      	ldr	r3, [pc, #68]	; (11c4 <clearNumbers+0xb8>)
    117e:	2201      	movs	r2, #1
    1180:	711a      	strb	r2, [r3, #4]
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    1182:	4b11      	ldr	r3, [pc, #68]	; (11c8 <clearNumbers+0xbc>)
    1184:	0019      	movs	r1, r3
    1186:	2008      	movs	r0, #8
    1188:	4b12      	ldr	r3, [pc, #72]	; (11d4 <clearNumbers+0xc8>)
    118a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    118c:	4b12      	ldr	r3, [pc, #72]	; (11d8 <clearNumbers+0xcc>)
    118e:	4798      	blx	r3
	
	saveAlterNumberSetting(false);
    1190:	2000      	movs	r0, #0
    1192:	4b13      	ldr	r3, [pc, #76]	; (11e0 <clearNumbers+0xd4>)
    1194:	4798      	blx	r3
	
	alternateNumber_struct.alterNumberPresent = false;
    1196:	4b13      	ldr	r3, [pc, #76]	; (11e4 <clearNumbers+0xd8>)
    1198:	2200      	movs	r2, #0
    119a:	709a      	strb	r2, [r3, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    119c:	4a0a      	ldr	r2, [pc, #40]	; (11c8 <clearNumbers+0xbc>)
    119e:	4b11      	ldr	r3, [pc, #68]	; (11e4 <clearNumbers+0xd8>)
    11a0:	0010      	movs	r0, r2
    11a2:	0019      	movs	r1, r3
    11a4:	2318      	movs	r3, #24
    11a6:	001a      	movs	r2, r3
    11a8:	4b0c      	ldr	r3, [pc, #48]	; (11dc <clearNumbers+0xd0>)
    11aa:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    11ac:	4b06      	ldr	r3, [pc, #24]	; (11c8 <clearNumbers+0xbc>)
    11ae:	0019      	movs	r1, r3
    11b0:	2018      	movs	r0, #24
    11b2:	4b08      	ldr	r3, [pc, #32]	; (11d4 <clearNumbers+0xc8>)
    11b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    11b6:	4b08      	ldr	r3, [pc, #32]	; (11d8 <clearNumbers+0xcc>)
    11b8:	4798      	blx	r3
}
    11ba:	46c0      	nop			; (mov r8, r8)
    11bc:	46bd      	mov	sp, r7
    11be:	b002      	add	sp, #8
    11c0:	bd80      	pop	{r7, pc}
    11c2:	46c0      	nop			; (mov r8, r8)
    11c4:	20000610 	.word	0x20000610
    11c8:	20000584 	.word	0x20000584
    11cc:	00017cd7 	.word	0x00017cd7
    11d0:	00012a75 	.word	0x00012a75
    11d4:	00012969 	.word	0x00012969
    11d8:	00012b11 	.word	0x00012b11
    11dc:	00017ca1 	.word	0x00017ca1
    11e0:	000011e9 	.word	0x000011e9
    11e4:	20000644 	.word	0x20000644

000011e8 <saveAlterNumberSetting>:

void saveAlterNumberSetting(bool flag)
{
    11e8:	b580      	push	{r7, lr}
    11ea:	b082      	sub	sp, #8
    11ec:	af00      	add	r7, sp, #0
    11ee:	0002      	movs	r2, r0
    11f0:	1dfb      	adds	r3, r7, #7
    11f2:	701a      	strb	r2, [r3, #0]
	alternateNumber_struct.alterNumberSetting = flag;
    11f4:	1dfb      	adds	r3, r7, #7
    11f6:	781a      	ldrb	r2, [r3, #0]
    11f8:	4b0a      	ldr	r3, [pc, #40]	; (1224 <saveAlterNumberSetting+0x3c>)
    11fa:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    11fc:	4a0a      	ldr	r2, [pc, #40]	; (1228 <saveAlterNumberSetting+0x40>)
    11fe:	4b09      	ldr	r3, [pc, #36]	; (1224 <saveAlterNumberSetting+0x3c>)
    1200:	0010      	movs	r0, r2
    1202:	0019      	movs	r1, r3
    1204:	2318      	movs	r3, #24
    1206:	001a      	movs	r2, r3
    1208:	4b08      	ldr	r3, [pc, #32]	; (122c <saveAlterNumberSetting+0x44>)
    120a:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    120c:	4b06      	ldr	r3, [pc, #24]	; (1228 <saveAlterNumberSetting+0x40>)
    120e:	0019      	movs	r1, r3
    1210:	2018      	movs	r0, #24
    1212:	4b07      	ldr	r3, [pc, #28]	; (1230 <saveAlterNumberSetting+0x48>)
    1214:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1216:	4b07      	ldr	r3, [pc, #28]	; (1234 <saveAlterNumberSetting+0x4c>)
    1218:	4798      	blx	r3
}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	46bd      	mov	sp, r7
    121e:	b002      	add	sp, #8
    1220:	bd80      	pop	{r7, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	20000644 	.word	0x20000644
    1228:	20000584 	.word	0x20000584
    122c:	00017ca1 	.word	0x00017ca1
    1230:	00012969 	.word	0x00012969
    1234:	00012b11 	.word	0x00012b11

00001238 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
    1238:	b580      	push	{r7, lr}
    123a:	b082      	sub	sp, #8
    123c:	af00      	add	r7, sp, #0
    123e:	6078      	str	r0, [r7, #4]
	if (user_count_struct.current_user_no_count > 0)
    1240:	4b11      	ldr	r3, [pc, #68]	; (1288 <addAlternateNumber+0x50>)
    1242:	789b      	ldrb	r3, [r3, #2]
    1244:	2b00      	cmp	r3, #0
    1246:	d019      	beq.n	127c <addAlternateNumber+0x44>
	{
		alternateNumber_struct.alterNumberPresent = true;
    1248:	4b10      	ldr	r3, [pc, #64]	; (128c <addAlternateNumber+0x54>)
    124a:	2201      	movs	r2, #1
    124c:	709a      	strb	r2, [r3, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
    124e:	687a      	ldr	r2, [r7, #4]
    1250:	4b0f      	ldr	r3, [pc, #60]	; (1290 <addAlternateNumber+0x58>)
    1252:	0011      	movs	r1, r2
    1254:	0018      	movs	r0, r3
    1256:	4b0f      	ldr	r3, [pc, #60]	; (1294 <addAlternateNumber+0x5c>)
    1258:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
    125a:	4a0f      	ldr	r2, [pc, #60]	; (1298 <addAlternateNumber+0x60>)
    125c:	4b0b      	ldr	r3, [pc, #44]	; (128c <addAlternateNumber+0x54>)
    125e:	0010      	movs	r0, r2
    1260:	0019      	movs	r1, r3
    1262:	2318      	movs	r3, #24
    1264:	001a      	movs	r2, r3
    1266:	4b0d      	ldr	r3, [pc, #52]	; (129c <addAlternateNumber+0x64>)
    1268:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
    126a:	4b0b      	ldr	r3, [pc, #44]	; (1298 <addAlternateNumber+0x60>)
    126c:	0019      	movs	r1, r3
    126e:	2018      	movs	r0, #24
    1270:	4b0b      	ldr	r3, [pc, #44]	; (12a0 <addAlternateNumber+0x68>)
    1272:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    1274:	4b0b      	ldr	r3, [pc, #44]	; (12a4 <addAlternateNumber+0x6c>)
    1276:	4798      	blx	r3
		
		return true;
    1278:	2301      	movs	r3, #1
    127a:	e000      	b.n	127e <addAlternateNumber+0x46>
	}
	return false;
    127c:	2300      	movs	r3, #0
}
    127e:	0018      	movs	r0, r3
    1280:	46bd      	mov	sp, r7
    1282:	b002      	add	sp, #8
    1284:	bd80      	pop	{r7, pc}
    1286:	46c0      	nop			; (mov r8, r8)
    1288:	20000610 	.word	0x20000610
    128c:	20000644 	.word	0x20000644
    1290:	20000648 	.word	0x20000648
    1294:	00017f57 	.word	0x00017f57
    1298:	20000584 	.word	0x20000584
    129c:	00017ca1 	.word	0x00017ca1
    12a0:	00012969 	.word	0x00012969
    12a4:	00012b11 	.word	0x00012b11

000012a8 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
    12a8:	b580      	push	{r7, lr}
    12aa:	b082      	sub	sp, #8
    12ac:	af00      	add	r7, sp, #0
    12ae:	0002      	movs	r2, r0
    12b0:	1dfb      	adds	r3, r7, #7
    12b2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
    12b4:	1dfb      	adds	r3, r7, #7
    12b6:	781a      	ldrb	r2, [r3, #0]
    12b8:	4b09      	ldr	r3, [pc, #36]	; (12e0 <saveAutoStartSettings+0x38>)
    12ba:	705a      	strb	r2, [r3, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    12bc:	4908      	ldr	r1, [pc, #32]	; (12e0 <saveAutoStartSettings+0x38>)
    12be:	4b09      	ldr	r3, [pc, #36]	; (12e4 <saveAutoStartSettings+0x3c>)
    12c0:	222c      	movs	r2, #44	; 0x2c
    12c2:	0018      	movs	r0, r3
    12c4:	4b08      	ldr	r3, [pc, #32]	; (12e8 <saveAutoStartSettings+0x40>)
    12c6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    12c8:	4b06      	ldr	r3, [pc, #24]	; (12e4 <saveAutoStartSettings+0x3c>)
    12ca:	0019      	movs	r1, r3
    12cc:	201a      	movs	r0, #26
    12ce:	4b07      	ldr	r3, [pc, #28]	; (12ec <saveAutoStartSettings+0x44>)
    12d0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    12d2:	4b07      	ldr	r3, [pc, #28]	; (12f0 <saveAutoStartSettings+0x48>)
    12d4:	4798      	blx	r3
}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	46bd      	mov	sp, r7
    12da:	b002      	add	sp, #8
    12dc:	bd80      	pop	{r7, pc}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	2000065c 	.word	0x2000065c
    12e4:	20000584 	.word	0x20000584
    12e8:	00017ca1 	.word	0x00017ca1
    12ec:	00012969 	.word	0x00012969
    12f0:	00012b11 	.word	0x00012b11

000012f4 <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
    12f4:	b580      	push	{r7, lr}
    12f6:	b082      	sub	sp, #8
    12f8:	af00      	add	r7, sp, #0
    12fa:	0002      	movs	r2, r0
    12fc:	1dbb      	adds	r3, r7, #6
    12fe:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.autoStartTimeAddress = value;
    1300:	4b0a      	ldr	r3, [pc, #40]	; (132c <saveAutoStartTimeSettings+0x38>)
    1302:	1dba      	adds	r2, r7, #6
    1304:	8812      	ldrh	r2, [r2, #0]
    1306:	805a      	strh	r2, [r3, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1308:	4908      	ldr	r1, [pc, #32]	; (132c <saveAutoStartTimeSettings+0x38>)
    130a:	4b09      	ldr	r3, [pc, #36]	; (1330 <saveAutoStartTimeSettings+0x3c>)
    130c:	222c      	movs	r2, #44	; 0x2c
    130e:	0018      	movs	r0, r3
    1310:	4b08      	ldr	r3, [pc, #32]	; (1334 <saveAutoStartTimeSettings+0x40>)
    1312:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <saveAutoStartTimeSettings+0x3c>)
    1316:	0019      	movs	r1, r3
    1318:	201a      	movs	r0, #26
    131a:	4b07      	ldr	r3, [pc, #28]	; (1338 <saveAutoStartTimeSettings+0x44>)
    131c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    131e:	4b07      	ldr	r3, [pc, #28]	; (133c <saveAutoStartTimeSettings+0x48>)
    1320:	4798      	blx	r3
}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	46bd      	mov	sp, r7
    1326:	b002      	add	sp, #8
    1328:	bd80      	pop	{r7, pc}
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	2000065c 	.word	0x2000065c
    1330:	20000584 	.word	0x20000584
    1334:	00017ca1 	.word	0x00017ca1
    1338:	00012969 	.word	0x00012969
    133c:	00012b11 	.word	0x00012b11

00001340 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
    1340:	b580      	push	{r7, lr}
    1342:	b082      	sub	sp, #8
    1344:	af00      	add	r7, sp, #0
    1346:	0002      	movs	r2, r0
    1348:	1dfb      	adds	r3, r7, #7
    134a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.dndAddress = flag;
    134c:	4b0a      	ldr	r3, [pc, #40]	; (1378 <saveDNDSettings+0x38>)
    134e:	1dfa      	adds	r2, r7, #7
    1350:	7812      	ldrb	r2, [r2, #0]
    1352:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1354:	4908      	ldr	r1, [pc, #32]	; (1378 <saveDNDSettings+0x38>)
    1356:	4b09      	ldr	r3, [pc, #36]	; (137c <saveDNDSettings+0x3c>)
    1358:	222c      	movs	r2, #44	; 0x2c
    135a:	0018      	movs	r0, r3
    135c:	4b08      	ldr	r3, [pc, #32]	; (1380 <saveDNDSettings+0x40>)
    135e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1360:	4b06      	ldr	r3, [pc, #24]	; (137c <saveDNDSettings+0x3c>)
    1362:	0019      	movs	r1, r3
    1364:	201a      	movs	r0, #26
    1366:	4b07      	ldr	r3, [pc, #28]	; (1384 <saveDNDSettings+0x44>)
    1368:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    136a:	4b07      	ldr	r3, [pc, #28]	; (1388 <saveDNDSettings+0x48>)
    136c:	4798      	blx	r3
}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	46bd      	mov	sp, r7
    1372:	b002      	add	sp, #8
    1374:	bd80      	pop	{r7, pc}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	2000065c 	.word	0x2000065c
    137c:	20000584 	.word	0x20000584
    1380:	00017ca1 	.word	0x00017ca1
    1384:	00012969 	.word	0x00012969
    1388:	00012b11 	.word	0x00012b11

0000138c <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
    138c:	b580      	push	{r7, lr}
    138e:	b082      	sub	sp, #8
    1390:	af00      	add	r7, sp, #0
    1392:	0002      	movs	r2, r0
    1394:	1dfb      	adds	r3, r7, #7
    1396:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.responseAddress = response;
    1398:	4b0a      	ldr	r3, [pc, #40]	; (13c4 <saveResponseSettings+0x38>)
    139a:	1dfa      	adds	r2, r7, #7
    139c:	7812      	ldrb	r2, [r2, #0]
    139e:	715a      	strb	r2, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    13a0:	4908      	ldr	r1, [pc, #32]	; (13c4 <saveResponseSettings+0x38>)
    13a2:	4b09      	ldr	r3, [pc, #36]	; (13c8 <saveResponseSettings+0x3c>)
    13a4:	222c      	movs	r2, #44	; 0x2c
    13a6:	0018      	movs	r0, r3
    13a8:	4b08      	ldr	r3, [pc, #32]	; (13cc <saveResponseSettings+0x40>)
    13aa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    13ac:	4b06      	ldr	r3, [pc, #24]	; (13c8 <saveResponseSettings+0x3c>)
    13ae:	0019      	movs	r1, r3
    13b0:	201a      	movs	r0, #26
    13b2:	4b07      	ldr	r3, [pc, #28]	; (13d0 <saveResponseSettings+0x44>)
    13b4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    13b6:	4b07      	ldr	r3, [pc, #28]	; (13d4 <saveResponseSettings+0x48>)
    13b8:	4798      	blx	r3
}
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	46bd      	mov	sp, r7
    13be:	b002      	add	sp, #8
    13c0:	bd80      	pop	{r7, pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	2000065c 	.word	0x2000065c
    13c8:	20000584 	.word	0x20000584
    13cc:	00017ca1 	.word	0x00017ca1
    13d0:	00012969 	.word	0x00012969
    13d4:	00012b11 	.word	0x00012b11

000013d8 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
    13d8:	b5b0      	push	{r4, r5, r7, lr}
    13da:	b082      	sub	sp, #8
    13dc:	af00      	add	r7, sp, #0
    13de:	0005      	movs	r5, r0
    13e0:	000c      	movs	r4, r1
    13e2:	0010      	movs	r0, r2
    13e4:	0019      	movs	r1, r3
    13e6:	1dfb      	adds	r3, r7, #7
    13e8:	1c2a      	adds	r2, r5, #0
    13ea:	701a      	strb	r2, [r3, #0]
    13ec:	1dbb      	adds	r3, r7, #6
    13ee:	1c22      	adds	r2, r4, #0
    13f0:	701a      	strb	r2, [r3, #0]
    13f2:	1d7b      	adds	r3, r7, #5
    13f4:	1c02      	adds	r2, r0, #0
    13f6:	701a      	strb	r2, [r3, #0]
    13f8:	1d3b      	adds	r3, r7, #4
    13fa:	1c0a      	adds	r2, r1, #0
    13fc:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
    13fe:	1dfb      	adds	r3, r7, #7
    1400:	781a      	ldrb	r2, [r3, #0]
    1402:	4b14      	ldr	r3, [pc, #80]	; (1454 <saveNoCallSettings+0x7c>)
    1404:	725a      	strb	r2, [r3, #9]
	if (user_settings_parameter_struct.noCallAddress)
    1406:	4b13      	ldr	r3, [pc, #76]	; (1454 <saveNoCallSettings+0x7c>)
    1408:	7a5b      	ldrb	r3, [r3, #9]
    140a:	2b00      	cmp	r3, #0
    140c:	d010      	beq.n	1430 <saveNoCallSettings+0x58>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
    140e:	4b11      	ldr	r3, [pc, #68]	; (1454 <saveNoCallSettings+0x7c>)
    1410:	1dba      	adds	r2, r7, #6
    1412:	7812      	ldrb	r2, [r2, #0]
    1414:	729a      	strb	r2, [r3, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
    1416:	4b0f      	ldr	r3, [pc, #60]	; (1454 <saveNoCallSettings+0x7c>)
    1418:	1d7a      	adds	r2, r7, #5
    141a:	7812      	ldrb	r2, [r2, #0]
    141c:	72da      	strb	r2, [r3, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
    141e:	4b0d      	ldr	r3, [pc, #52]	; (1454 <saveNoCallSettings+0x7c>)
    1420:	1d3a      	adds	r2, r7, #4
    1422:	7812      	ldrb	r2, [r2, #0]
    1424:	731a      	strb	r2, [r3, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
    1426:	4b0b      	ldr	r3, [pc, #44]	; (1454 <saveNoCallSettings+0x7c>)
    1428:	2218      	movs	r2, #24
    142a:	18ba      	adds	r2, r7, r2
    142c:	7812      	ldrb	r2, [r2, #0]
    142e:	735a      	strb	r2, [r3, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1430:	4908      	ldr	r1, [pc, #32]	; (1454 <saveNoCallSettings+0x7c>)
    1432:	4b09      	ldr	r3, [pc, #36]	; (1458 <saveNoCallSettings+0x80>)
    1434:	222c      	movs	r2, #44	; 0x2c
    1436:	0018      	movs	r0, r3
    1438:	4b08      	ldr	r3, [pc, #32]	; (145c <saveNoCallSettings+0x84>)
    143a:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    143c:	4b06      	ldr	r3, [pc, #24]	; (1458 <saveNoCallSettings+0x80>)
    143e:	0019      	movs	r1, r3
    1440:	201a      	movs	r0, #26
    1442:	4b07      	ldr	r3, [pc, #28]	; (1460 <saveNoCallSettings+0x88>)
    1444:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1446:	4b07      	ldr	r3, [pc, #28]	; (1464 <saveNoCallSettings+0x8c>)
    1448:	4798      	blx	r3
}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	46bd      	mov	sp, r7
    144e:	b002      	add	sp, #8
    1450:	bdb0      	pop	{r4, r5, r7, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	2000065c 	.word	0x2000065c
    1458:	20000584 	.word	0x20000584
    145c:	00017ca1 	.word	0x00017ca1
    1460:	00012969 	.word	0x00012969
    1464:	00012b11 	.word	0x00012b11

00001468 <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
    1468:	b580      	push	{r7, lr}
    146a:	b082      	sub	sp, #8
    146c:	af00      	add	r7, sp, #0
    146e:	0002      	movs	r2, r0
    1470:	1dfb      	adds	r3, r7, #7
    1472:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
    1474:	1dfb      	adds	r3, r7, #7
    1476:	781a      	ldrb	r2, [r3, #0]
    1478:	4b09      	ldr	r3, [pc, #36]	; (14a0 <saveWaterBypassSettings+0x38>)
    147a:	77da      	strb	r2, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    147c:	4908      	ldr	r1, [pc, #32]	; (14a0 <saveWaterBypassSettings+0x38>)
    147e:	4b09      	ldr	r3, [pc, #36]	; (14a4 <saveWaterBypassSettings+0x3c>)
    1480:	222c      	movs	r2, #44	; 0x2c
    1482:	0018      	movs	r0, r3
    1484:	4b08      	ldr	r3, [pc, #32]	; (14a8 <saveWaterBypassSettings+0x40>)
    1486:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1488:	4b06      	ldr	r3, [pc, #24]	; (14a4 <saveWaterBypassSettings+0x3c>)
    148a:	0019      	movs	r1, r3
    148c:	201a      	movs	r0, #26
    148e:	4b07      	ldr	r3, [pc, #28]	; (14ac <saveWaterBypassSettings+0x44>)
    1490:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1492:	4b07      	ldr	r3, [pc, #28]	; (14b0 <saveWaterBypassSettings+0x48>)
    1494:	4798      	blx	r3
}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	46bd      	mov	sp, r7
    149a:	b002      	add	sp, #8
    149c:	bd80      	pop	{r7, pc}
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	2000065c 	.word	0x2000065c
    14a4:	20000584 	.word	0x20000584
    14a8:	00017ca1 	.word	0x00017ca1
    14ac:	00012969 	.word	0x00012969
    14b0:	00012b11 	.word	0x00012b11

000014b4 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
    14b4:	b580      	push	{r7, lr}
    14b6:	b082      	sub	sp, #8
    14b8:	af00      	add	r7, sp, #0
    14ba:	0002      	movs	r2, r0
    14bc:	1dfb      	adds	r3, r7, #7
    14be:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
    14c0:	1dfb      	adds	r3, r7, #7
    14c2:	781a      	ldrb	r2, [r3, #0]
    14c4:	4b09      	ldr	r3, [pc, #36]	; (14ec <savePreventOverFlowSettings+0x38>)
    14c6:	779a      	strb	r2, [r3, #30]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    14c8:	4908      	ldr	r1, [pc, #32]	; (14ec <savePreventOverFlowSettings+0x38>)
    14ca:	4b09      	ldr	r3, [pc, #36]	; (14f0 <savePreventOverFlowSettings+0x3c>)
    14cc:	222c      	movs	r2, #44	; 0x2c
    14ce:	0018      	movs	r0, r3
    14d0:	4b08      	ldr	r3, [pc, #32]	; (14f4 <savePreventOverFlowSettings+0x40>)
    14d2:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    14d4:	4b06      	ldr	r3, [pc, #24]	; (14f0 <savePreventOverFlowSettings+0x3c>)
    14d6:	0019      	movs	r1, r3
    14d8:	201a      	movs	r0, #26
    14da:	4b07      	ldr	r3, [pc, #28]	; (14f8 <savePreventOverFlowSettings+0x44>)
    14dc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    14de:	4b07      	ldr	r3, [pc, #28]	; (14fc <savePreventOverFlowSettings+0x48>)
    14e0:	4798      	blx	r3
}
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	46bd      	mov	sp, r7
    14e6:	b002      	add	sp, #8
    14e8:	bd80      	pop	{r7, pc}
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	2000065c 	.word	0x2000065c
    14f0:	20000584 	.word	0x20000584
    14f4:	00017ca1 	.word	0x00017ca1
    14f8:	00012969 	.word	0x00012969
    14fc:	00012b11 	.word	0x00012b11

00001500 <setOverloadPer>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

bool setOverloadPer(uint8_t overloadPerValue)
{
    1500:	b580      	push	{r7, lr}
    1502:	b082      	sub	sp, #8
    1504:	af00      	add	r7, sp, #0
    1506:	0002      	movs	r2, r0
    1508:	1dfb      	adds	r3, r7, #7
    150a:	701a      	strb	r2, [r3, #0]
	if(overloadPerValue>100)
    150c:	1dfb      	adds	r3, r7, #7
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	2b64      	cmp	r3, #100	; 0x64
    1512:	d918      	bls.n	1546 <setOverloadPer+0x46>
	{
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
    1514:	4b0e      	ldr	r3, [pc, #56]	; (1550 <setOverloadPer+0x50>)
    1516:	1dfa      	adds	r2, r7, #7
    1518:	7812      	ldrb	r2, [r2, #0]
    151a:	775a      	strb	r2, [r3, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    151c:	490c      	ldr	r1, [pc, #48]	; (1550 <setOverloadPer+0x50>)
    151e:	4b0d      	ldr	r3, [pc, #52]	; (1554 <setOverloadPer+0x54>)
    1520:	222c      	movs	r2, #44	; 0x2c
    1522:	0018      	movs	r0, r3
    1524:	4b0c      	ldr	r3, [pc, #48]	; (1558 <setOverloadPer+0x58>)
    1526:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1528:	4b0a      	ldr	r3, [pc, #40]	; (1554 <setOverloadPer+0x54>)
    152a:	0019      	movs	r1, r3
    152c:	201a      	movs	r0, #26
    152e:	4b0b      	ldr	r3, [pc, #44]	; (155c <setOverloadPer+0x5c>)
    1530:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    1532:	4b0b      	ldr	r3, [pc, #44]	; (1560 <setOverloadPer+0x60>)
    1534:	4798      	blx	r3
		
		if (user_settings_parameter_struct.currentDetectionAddress)
    1536:	4b06      	ldr	r3, [pc, #24]	; (1550 <setOverloadPer+0x50>)
    1538:	7bdb      	ldrb	r3, [r3, #15]
    153a:	2b00      	cmp	r3, #0
    153c:	d001      	beq.n	1542 <setOverloadPer+0x42>
		{
			calcCurrentValues();
    153e:	4b09      	ldr	r3, [pc, #36]	; (1564 <setOverloadPer+0x64>)
    1540:	4798      	blx	r3
		}
		return true;
    1542:	2301      	movs	r3, #1
    1544:	e000      	b.n	1548 <setOverloadPer+0x48>
	}
	return false;
    1546:	2300      	movs	r3, #0
}
    1548:	0018      	movs	r0, r3
    154a:	46bd      	mov	sp, r7
    154c:	b002      	add	sp, #8
    154e:	bd80      	pop	{r7, pc}
    1550:	2000065c 	.word	0x2000065c
    1554:	20000584 	.word	0x20000584
    1558:	00017ca1 	.word	0x00017ca1
    155c:	00012969 	.word	0x00012969
    1560:	00012b11 	.word	0x00012b11
    1564:	00001709 	.word	0x00001709

00001568 <setUnderloadPer>:

bool setUnderloadPer(uint8_t underloadPerValue)
{
    1568:	b580      	push	{r7, lr}
    156a:	b082      	sub	sp, #8
    156c:	af00      	add	r7, sp, #0
    156e:	0002      	movs	r2, r0
    1570:	1dfb      	adds	r3, r7, #7
    1572:	701a      	strb	r2, [r3, #0]
	if(underloadPerValue>0 && underloadPerValue <100)
    1574:	1dfb      	adds	r3, r7, #7
    1576:	781b      	ldrb	r3, [r3, #0]
    1578:	2b00      	cmp	r3, #0
    157a:	d01c      	beq.n	15b6 <setUnderloadPer+0x4e>
    157c:	1dfb      	adds	r3, r7, #7
    157e:	781b      	ldrb	r3, [r3, #0]
    1580:	2b63      	cmp	r3, #99	; 0x63
    1582:	d818      	bhi.n	15b6 <setUnderloadPer+0x4e>
	{
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
    1584:	4b0e      	ldr	r3, [pc, #56]	; (15c0 <setUnderloadPer+0x58>)
    1586:	1dfa      	adds	r2, r7, #7
    1588:	7812      	ldrb	r2, [r2, #0]
    158a:	771a      	strb	r2, [r3, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    158c:	490c      	ldr	r1, [pc, #48]	; (15c0 <setUnderloadPer+0x58>)
    158e:	4b0d      	ldr	r3, [pc, #52]	; (15c4 <setUnderloadPer+0x5c>)
    1590:	222c      	movs	r2, #44	; 0x2c
    1592:	0018      	movs	r0, r3
    1594:	4b0c      	ldr	r3, [pc, #48]	; (15c8 <setUnderloadPer+0x60>)
    1596:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1598:	4b0a      	ldr	r3, [pc, #40]	; (15c4 <setUnderloadPer+0x5c>)
    159a:	0019      	movs	r1, r3
    159c:	201a      	movs	r0, #26
    159e:	4b0b      	ldr	r3, [pc, #44]	; (15cc <setUnderloadPer+0x64>)
    15a0:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    15a2:	4b0b      	ldr	r3, [pc, #44]	; (15d0 <setUnderloadPer+0x68>)
    15a4:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
    15a6:	4b06      	ldr	r3, [pc, #24]	; (15c0 <setUnderloadPer+0x58>)
    15a8:	7bdb      	ldrb	r3, [r3, #15]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d001      	beq.n	15b2 <setUnderloadPer+0x4a>
		{
			calcCurrentValues();
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <setUnderloadPer+0x6c>)
    15b0:	4798      	blx	r3
		}
		return true;
    15b2:	2301      	movs	r3, #1
    15b4:	e000      	b.n	15b8 <setUnderloadPer+0x50>
	}
	return false;
    15b6:	2300      	movs	r3, #0
}
    15b8:	0018      	movs	r0, r3
    15ba:	46bd      	mov	sp, r7
    15bc:	b002      	add	sp, #8
    15be:	bd80      	pop	{r7, pc}
    15c0:	2000065c 	.word	0x2000065c
    15c4:	20000584 	.word	0x20000584
    15c8:	00017ca1 	.word	0x00017ca1
    15cc:	00012969 	.word	0x00012969
    15d0:	00012b11 	.word	0x00012b11
    15d4:	00001709 	.word	0x00001709

000015d8 <saveSinglePhasingSettings>:

void saveSinglePhasingSettings(bool singlePhasing)
{
    15d8:	b580      	push	{r7, lr}
    15da:	b082      	sub	sp, #8
    15dc:	af00      	add	r7, sp, #0
    15de:	0002      	movs	r2, r0
    15e0:	1dfb      	adds	r3, r7, #7
    15e2:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
    15e4:	1dfb      	adds	r3, r7, #7
    15e6:	7819      	ldrb	r1, [r3, #0]
    15e8:	4b09      	ldr	r3, [pc, #36]	; (1610 <saveSinglePhasingSettings+0x38>)
    15ea:	2220      	movs	r2, #32
    15ec:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    15ee:	4908      	ldr	r1, [pc, #32]	; (1610 <saveSinglePhasingSettings+0x38>)
    15f0:	4b08      	ldr	r3, [pc, #32]	; (1614 <saveSinglePhasingSettings+0x3c>)
    15f2:	222c      	movs	r2, #44	; 0x2c
    15f4:	0018      	movs	r0, r3
    15f6:	4b08      	ldr	r3, [pc, #32]	; (1618 <saveSinglePhasingSettings+0x40>)
    15f8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    15fa:	4b06      	ldr	r3, [pc, #24]	; (1614 <saveSinglePhasingSettings+0x3c>)
    15fc:	0019      	movs	r1, r3
    15fe:	201a      	movs	r0, #26
    1600:	4b06      	ldr	r3, [pc, #24]	; (161c <saveSinglePhasingSettings+0x44>)
    1602:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1604:	4b06      	ldr	r3, [pc, #24]	; (1620 <saveSinglePhasingSettings+0x48>)
    1606:	4798      	blx	r3
}
    1608:	46c0      	nop			; (mov r8, r8)
    160a:	46bd      	mov	sp, r7
    160c:	b002      	add	sp, #8
    160e:	bd80      	pop	{r7, pc}
    1610:	2000065c 	.word	0x2000065c
    1614:	20000584 	.word	0x20000584
    1618:	00017ca1 	.word	0x00017ca1
    161c:	00012969 	.word	0x00012969
    1620:	00012b11 	.word	0x00012b11

00001624 <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
    1624:	b580      	push	{r7, lr}
    1626:	b082      	sub	sp, #8
    1628:	af00      	add	r7, sp, #0
    162a:	0002      	movs	r2, r0
    162c:	1dbb      	adds	r3, r7, #6
    162e:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
    1630:	4b0a      	ldr	r3, [pc, #40]	; (165c <saveSinglePhasingVoltage+0x38>)
    1632:	1dba      	adds	r2, r7, #6
    1634:	8812      	ldrh	r2, [r2, #0]
    1636:	845a      	strh	r2, [r3, #34]	; 0x22
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1638:	4908      	ldr	r1, [pc, #32]	; (165c <saveSinglePhasingVoltage+0x38>)
    163a:	4b09      	ldr	r3, [pc, #36]	; (1660 <saveSinglePhasingVoltage+0x3c>)
    163c:	222c      	movs	r2, #44	; 0x2c
    163e:	0018      	movs	r0, r3
    1640:	4b08      	ldr	r3, [pc, #32]	; (1664 <saveSinglePhasingVoltage+0x40>)
    1642:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1644:	4b06      	ldr	r3, [pc, #24]	; (1660 <saveSinglePhasingVoltage+0x3c>)
    1646:	0019      	movs	r1, r3
    1648:	201a      	movs	r0, #26
    164a:	4b07      	ldr	r3, [pc, #28]	; (1668 <saveSinglePhasingVoltage+0x44>)
    164c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    164e:	4b07      	ldr	r3, [pc, #28]	; (166c <saveSinglePhasingVoltage+0x48>)
    1650:	4798      	blx	r3
}
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	46bd      	mov	sp, r7
    1656:	b002      	add	sp, #8
    1658:	bd80      	pop	{r7, pc}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	2000065c 	.word	0x2000065c
    1660:	20000584 	.word	0x20000584
    1664:	00017ca1 	.word	0x00017ca1
    1668:	00012969 	.word	0x00012969
    166c:	00012b11 	.word	0x00012b11

00001670 <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
    1670:	b580      	push	{r7, lr}
    1672:	b082      	sub	sp, #8
    1674:	af00      	add	r7, sp, #0
    1676:	0002      	movs	r2, r0
    1678:	1dfb      	adds	r3, r7, #7
    167a:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
    167c:	1dfb      	adds	r3, r7, #7
    167e:	7819      	ldrb	r1, [r3, #0]
    1680:	4b09      	ldr	r3, [pc, #36]	; (16a8 <savePhaseSequenceProtectionSettings+0x38>)
    1682:	2224      	movs	r2, #36	; 0x24
    1684:	5499      	strb	r1, [r3, r2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1686:	4908      	ldr	r1, [pc, #32]	; (16a8 <savePhaseSequenceProtectionSettings+0x38>)
    1688:	4b08      	ldr	r3, [pc, #32]	; (16ac <savePhaseSequenceProtectionSettings+0x3c>)
    168a:	222c      	movs	r2, #44	; 0x2c
    168c:	0018      	movs	r0, r3
    168e:	4b08      	ldr	r3, [pc, #32]	; (16b0 <savePhaseSequenceProtectionSettings+0x40>)
    1690:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1692:	4b06      	ldr	r3, [pc, #24]	; (16ac <savePhaseSequenceProtectionSettings+0x3c>)
    1694:	0019      	movs	r1, r3
    1696:	201a      	movs	r0, #26
    1698:	4b06      	ldr	r3, [pc, #24]	; (16b4 <savePhaseSequenceProtectionSettings+0x44>)
    169a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    169c:	4b06      	ldr	r3, [pc, #24]	; (16b8 <savePhaseSequenceProtectionSettings+0x48>)
    169e:	4798      	blx	r3
}
    16a0:	46c0      	nop			; (mov r8, r8)
    16a2:	46bd      	mov	sp, r7
    16a4:	b002      	add	sp, #8
    16a6:	bd80      	pop	{r7, pc}
    16a8:	2000065c 	.word	0x2000065c
    16ac:	20000584 	.word	0x20000584
    16b0:	00017ca1 	.word	0x00017ca1
    16b4:	00012969 	.word	0x00012969
    16b8:	00012b11 	.word	0x00012b11

000016bc <saveMotorFeedbackDetectionSettings>:


void saveMotorFeedbackDetectionSettings(uint8_t motorFeedbackDetection)
{
    16bc:	b580      	push	{r7, lr}
    16be:	b082      	sub	sp, #8
    16c0:	af00      	add	r7, sp, #0
    16c2:	0002      	movs	r2, r0
    16c4:	1dfb      	adds	r3, r7, #7
    16c6:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.detectMotorFeedback = motorFeedbackDetection;
    16c8:	4b0a      	ldr	r3, [pc, #40]	; (16f4 <saveMotorFeedbackDetectionSettings+0x38>)
    16ca:	1dfa      	adds	r2, r7, #7
    16cc:	2125      	movs	r1, #37	; 0x25
    16ce:	7812      	ldrb	r2, [r2, #0]
    16d0:	545a      	strb	r2, [r3, r1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    16d2:	4908      	ldr	r1, [pc, #32]	; (16f4 <saveMotorFeedbackDetectionSettings+0x38>)
    16d4:	4b08      	ldr	r3, [pc, #32]	; (16f8 <saveMotorFeedbackDetectionSettings+0x3c>)
    16d6:	222c      	movs	r2, #44	; 0x2c
    16d8:	0018      	movs	r0, r3
    16da:	4b08      	ldr	r3, [pc, #32]	; (16fc <saveMotorFeedbackDetectionSettings+0x40>)
    16dc:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    16de:	4b06      	ldr	r3, [pc, #24]	; (16f8 <saveMotorFeedbackDetectionSettings+0x3c>)
    16e0:	0019      	movs	r1, r3
    16e2:	201a      	movs	r0, #26
    16e4:	4b06      	ldr	r3, [pc, #24]	; (1700 <saveMotorFeedbackDetectionSettings+0x44>)
    16e6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    16e8:	4b06      	ldr	r3, [pc, #24]	; (1704 <saveMotorFeedbackDetectionSettings+0x48>)
    16ea:	4798      	blx	r3
}
    16ec:	46c0      	nop			; (mov r8, r8)
    16ee:	46bd      	mov	sp, r7
    16f0:	b002      	add	sp, #8
    16f2:	bd80      	pop	{r7, pc}
    16f4:	2000065c 	.word	0x2000065c
    16f8:	20000584 	.word	0x20000584
    16fc:	00017ca1 	.word	0x00017ca1
    1700:	00012969 	.word	0x00012969
    1704:	00012b11 	.word	0x00012b11

00001708 <calcCurrentValues>:


void calcCurrentValues(void)
{
    1708:	b590      	push	{r4, r7, lr}
    170a:	b083      	sub	sp, #12
    170c:	af00      	add	r7, sp, #0
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
    170e:	4b2b      	ldr	r3, [pc, #172]	; (17bc <calcCurrentValues+0xb4>)
    1710:	691a      	ldr	r2, [r3, #16]
    1712:	4b2b      	ldr	r3, [pc, #172]	; (17c0 <calcCurrentValues+0xb8>)
    1714:	0010      	movs	r0, r2
    1716:	4798      	blx	r3
    1718:	1c04      	adds	r4, r0, #0
    171a:	4b28      	ldr	r3, [pc, #160]	; (17bc <calcCurrentValues+0xb4>)
    171c:	7f1a      	ldrb	r2, [r3, #28]
    171e:	4b28      	ldr	r3, [pc, #160]	; (17c0 <calcCurrentValues+0xb8>)
    1720:	0010      	movs	r0, r2
    1722:	4798      	blx	r3
    1724:	1c02      	adds	r2, r0, #0
    1726:	4b27      	ldr	r3, [pc, #156]	; (17c4 <calcCurrentValues+0xbc>)
    1728:	1c11      	adds	r1, r2, #0
    172a:	1c20      	adds	r0, r4, #0
    172c:	4798      	blx	r3
    172e:	1c03      	adds	r3, r0, #0
    1730:	1c1a      	adds	r2, r3, #0
    1732:	4b25      	ldr	r3, [pc, #148]	; (17c8 <calcCurrentValues+0xc0>)
    1734:	1c10      	adds	r0, r2, #0
    1736:	4798      	blx	r3
    1738:	4c24      	ldr	r4, [pc, #144]	; (17cc <calcCurrentValues+0xc4>)
    173a:	2200      	movs	r2, #0
    173c:	4b24      	ldr	r3, [pc, #144]	; (17d0 <calcCurrentValues+0xc8>)
    173e:	47a0      	blx	r4
    1740:	0003      	movs	r3, r0
    1742:	000c      	movs	r4, r1
    1744:	0019      	movs	r1, r3
    1746:	0022      	movs	r2, r4
    1748:	1dbc      	adds	r4, r7, #6
    174a:	4b22      	ldr	r3, [pc, #136]	; (17d4 <calcCurrentValues+0xcc>)
    174c:	0008      	movs	r0, r1
    174e:	0011      	movs	r1, r2
    1750:	4798      	blx	r3
    1752:	0003      	movs	r3, r0
    1754:	8023      	strh	r3, [r4, #0]
	setUnderloadValue(temp);
    1756:	1dbb      	adds	r3, r7, #6
    1758:	881b      	ldrh	r3, [r3, #0]
    175a:	0018      	movs	r0, r3
    175c:	4b1e      	ldr	r3, [pc, #120]	; (17d8 <calcCurrentValues+0xd0>)
    175e:	4798      	blx	r3

	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
    1760:	4b16      	ldr	r3, [pc, #88]	; (17bc <calcCurrentValues+0xb4>)
    1762:	691a      	ldr	r2, [r3, #16]
    1764:	4b16      	ldr	r3, [pc, #88]	; (17c0 <calcCurrentValues+0xb8>)
    1766:	0010      	movs	r0, r2
    1768:	4798      	blx	r3
    176a:	1c04      	adds	r4, r0, #0
    176c:	4b13      	ldr	r3, [pc, #76]	; (17bc <calcCurrentValues+0xb4>)
    176e:	7f5a      	ldrb	r2, [r3, #29]
    1770:	4b13      	ldr	r3, [pc, #76]	; (17c0 <calcCurrentValues+0xb8>)
    1772:	0010      	movs	r0, r2
    1774:	4798      	blx	r3
    1776:	1c02      	adds	r2, r0, #0
    1778:	4b12      	ldr	r3, [pc, #72]	; (17c4 <calcCurrentValues+0xbc>)
    177a:	1c11      	adds	r1, r2, #0
    177c:	1c20      	adds	r0, r4, #0
    177e:	4798      	blx	r3
    1780:	1c03      	adds	r3, r0, #0
    1782:	1c1a      	adds	r2, r3, #0
    1784:	4b10      	ldr	r3, [pc, #64]	; (17c8 <calcCurrentValues+0xc0>)
    1786:	1c10      	adds	r0, r2, #0
    1788:	4798      	blx	r3
    178a:	4c10      	ldr	r4, [pc, #64]	; (17cc <calcCurrentValues+0xc4>)
    178c:	2200      	movs	r2, #0
    178e:	4b10      	ldr	r3, [pc, #64]	; (17d0 <calcCurrentValues+0xc8>)
    1790:	47a0      	blx	r4
    1792:	0003      	movs	r3, r0
    1794:	000c      	movs	r4, r1
    1796:	0019      	movs	r1, r3
    1798:	0022      	movs	r2, r4
    179a:	1dbc      	adds	r4, r7, #6
    179c:	4b0d      	ldr	r3, [pc, #52]	; (17d4 <calcCurrentValues+0xcc>)
    179e:	0008      	movs	r0, r1
    17a0:	0011      	movs	r1, r2
    17a2:	4798      	blx	r3
    17a4:	0003      	movs	r3, r0
    17a6:	8023      	strh	r3, [r4, #0]
	setOverloadValue(temp);
    17a8:	1dbb      	adds	r3, r7, #6
    17aa:	881b      	ldrh	r3, [r3, #0]
    17ac:	0018      	movs	r0, r3
    17ae:	4b0b      	ldr	r3, [pc, #44]	; (17dc <calcCurrentValues+0xd4>)
    17b0:	4798      	blx	r3
}
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	46bd      	mov	sp, r7
    17b6:	b003      	add	sp, #12
    17b8:	bd90      	pop	{r4, r7, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	2000065c 	.word	0x2000065c
    17c0:	00015ee9 	.word	0x00015ee9
    17c4:	00015ca9 	.word	0x00015ca9
    17c8:	00017ac5 	.word	0x00017ac5
    17cc:	00016595 	.word	0x00016595
    17d0:	40590000 	.word	0x40590000
    17d4:	0001585d 	.word	0x0001585d
    17d8:	000017e1 	.word	0x000017e1
    17dc:	00001825 	.word	0x00001825

000017e0 <setUnderloadValue>:

void setUnderloadValue(uint32_t underValue)
{
    17e0:	b580      	push	{r7, lr}
    17e2:	b082      	sub	sp, #8
    17e4:	af00      	add	r7, sp, #0
    17e6:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.underloadAddress = underValue;
    17e8:	4b09      	ldr	r3, [pc, #36]	; (1810 <setUnderloadValue+0x30>)
    17ea:	687a      	ldr	r2, [r7, #4]
    17ec:	619a      	str	r2, [r3, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    17ee:	4908      	ldr	r1, [pc, #32]	; (1810 <setUnderloadValue+0x30>)
    17f0:	4b08      	ldr	r3, [pc, #32]	; (1814 <setUnderloadValue+0x34>)
    17f2:	222c      	movs	r2, #44	; 0x2c
    17f4:	0018      	movs	r0, r3
    17f6:	4b08      	ldr	r3, [pc, #32]	; (1818 <setUnderloadValue+0x38>)
    17f8:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    17fa:	4b06      	ldr	r3, [pc, #24]	; (1814 <setUnderloadValue+0x34>)
    17fc:	0019      	movs	r1, r3
    17fe:	201a      	movs	r0, #26
    1800:	4b06      	ldr	r3, [pc, #24]	; (181c <setUnderloadValue+0x3c>)
    1802:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1804:	4b06      	ldr	r3, [pc, #24]	; (1820 <setUnderloadValue+0x40>)
    1806:	4798      	blx	r3
}
    1808:	46c0      	nop			; (mov r8, r8)
    180a:	46bd      	mov	sp, r7
    180c:	b002      	add	sp, #8
    180e:	bd80      	pop	{r7, pc}
    1810:	2000065c 	.word	0x2000065c
    1814:	20000584 	.word	0x20000584
    1818:	00017ca1 	.word	0x00017ca1
    181c:	00012969 	.word	0x00012969
    1820:	00012b11 	.word	0x00012b11

00001824 <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
    1824:	b580      	push	{r7, lr}
    1826:	b082      	sub	sp, #8
    1828:	af00      	add	r7, sp, #0
    182a:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.overloadAddress = overValue;
    182c:	4b09      	ldr	r3, [pc, #36]	; (1854 <setOverloadValue+0x30>)
    182e:	687a      	ldr	r2, [r7, #4]
    1830:	615a      	str	r2, [r3, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1832:	4908      	ldr	r1, [pc, #32]	; (1854 <setOverloadValue+0x30>)
    1834:	4b08      	ldr	r3, [pc, #32]	; (1858 <setOverloadValue+0x34>)
    1836:	222c      	movs	r2, #44	; 0x2c
    1838:	0018      	movs	r0, r3
    183a:	4b08      	ldr	r3, [pc, #32]	; (185c <setOverloadValue+0x38>)
    183c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    183e:	4b06      	ldr	r3, [pc, #24]	; (1858 <setOverloadValue+0x34>)
    1840:	0019      	movs	r1, r3
    1842:	201a      	movs	r0, #26
    1844:	4b06      	ldr	r3, [pc, #24]	; (1860 <setOverloadValue+0x3c>)
    1846:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1848:	4b06      	ldr	r3, [pc, #24]	; (1864 <setOverloadValue+0x40>)
    184a:	4798      	blx	r3
}
    184c:	46c0      	nop			; (mov r8, r8)
    184e:	46bd      	mov	sp, r7
    1850:	b002      	add	sp, #8
    1852:	bd80      	pop	{r7, pc}
    1854:	2000065c 	.word	0x2000065c
    1858:	20000584 	.word	0x20000584
    185c:	00017ca1 	.word	0x00017ca1
    1860:	00012969 	.word	0x00012969
    1864:	00012b11 	.word	0x00012b11

00001868 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
    1868:	b580      	push	{r7, lr}
    186a:	b082      	sub	sp, #8
    186c:	af00      	add	r7, sp, #0
    186e:	6078      	str	r0, [r7, #4]
	user_settings_parameter_struct.normalLoadAddress = normalVal;
    1870:	4b09      	ldr	r3, [pc, #36]	; (1898 <setNormalLoadValue+0x30>)
    1872:	687a      	ldr	r2, [r7, #4]
    1874:	611a      	str	r2, [r3, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1876:	4908      	ldr	r1, [pc, #32]	; (1898 <setNormalLoadValue+0x30>)
    1878:	4b08      	ldr	r3, [pc, #32]	; (189c <setNormalLoadValue+0x34>)
    187a:	222c      	movs	r2, #44	; 0x2c
    187c:	0018      	movs	r0, r3
    187e:	4b08      	ldr	r3, [pc, #32]	; (18a0 <setNormalLoadValue+0x38>)
    1880:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1882:	4b06      	ldr	r3, [pc, #24]	; (189c <setNormalLoadValue+0x34>)
    1884:	0019      	movs	r1, r3
    1886:	201a      	movs	r0, #26
    1888:	4b06      	ldr	r3, [pc, #24]	; (18a4 <setNormalLoadValue+0x3c>)
    188a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    188c:	4b06      	ldr	r3, [pc, #24]	; (18a8 <setNormalLoadValue+0x40>)
    188e:	4798      	blx	r3
}
    1890:	46c0      	nop			; (mov r8, r8)
    1892:	46bd      	mov	sp, r7
    1894:	b002      	add	sp, #8
    1896:	bd80      	pop	{r7, pc}
    1898:	2000065c 	.word	0x2000065c
    189c:	20000584 	.word	0x20000584
    18a0:	00017ca1 	.word	0x00017ca1
    18a4:	00012969 	.word	0x00012969
    18a8:	00012b11 	.word	0x00012b11

000018ac <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	b082      	sub	sp, #8
    18b0:	af00      	add	r7, sp, #0
    18b2:	0002      	movs	r2, r0
    18b4:	1dfb      	adds	r3, r7, #7
    18b6:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.currentDetectionAddress = cValue;
    18b8:	1dfb      	adds	r3, r7, #7
    18ba:	781a      	ldrb	r2, [r3, #0]
    18bc:	4b09      	ldr	r3, [pc, #36]	; (18e4 <setCurrentDetection+0x38>)
    18be:	73da      	strb	r2, [r3, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    18c0:	4908      	ldr	r1, [pc, #32]	; (18e4 <setCurrentDetection+0x38>)
    18c2:	4b09      	ldr	r3, [pc, #36]	; (18e8 <setCurrentDetection+0x3c>)
    18c4:	222c      	movs	r2, #44	; 0x2c
    18c6:	0018      	movs	r0, r3
    18c8:	4b08      	ldr	r3, [pc, #32]	; (18ec <setCurrentDetection+0x40>)
    18ca:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    18cc:	4b06      	ldr	r3, [pc, #24]	; (18e8 <setCurrentDetection+0x3c>)
    18ce:	0019      	movs	r1, r3
    18d0:	201a      	movs	r0, #26
    18d2:	4b07      	ldr	r3, [pc, #28]	; (18f0 <setCurrentDetection+0x44>)
    18d4:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    18d6:	4b07      	ldr	r3, [pc, #28]	; (18f4 <setCurrentDetection+0x48>)
    18d8:	4798      	blx	r3
}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	46bd      	mov	sp, r7
    18de:	b002      	add	sp, #8
    18e0:	bd80      	pop	{r7, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	2000065c 	.word	0x2000065c
    18e8:	20000584 	.word	0x20000584
    18ec:	00017ca1 	.word	0x00017ca1
    18f0:	00012969 	.word	0x00012969
    18f4:	00012b11 	.word	0x00012b11

000018f8 <saveStarDeltaTimer>:
	strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
    18f8:	b580      	push	{r7, lr}
    18fa:	b082      	sub	sp, #8
    18fc:	af00      	add	r7, sp, #0
    18fe:	0002      	movs	r2, r0
    1900:	1dbb      	adds	r3, r7, #6
    1902:	801a      	strh	r2, [r3, #0]
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
    1904:	4b0a      	ldr	r3, [pc, #40]	; (1930 <saveStarDeltaTimer+0x38>)
    1906:	1dba      	adds	r2, r7, #6
    1908:	8812      	ldrh	r2, [r2, #0]
    190a:	80da      	strh	r2, [r3, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    190c:	4908      	ldr	r1, [pc, #32]	; (1930 <saveStarDeltaTimer+0x38>)
    190e:	4b09      	ldr	r3, [pc, #36]	; (1934 <saveStarDeltaTimer+0x3c>)
    1910:	222c      	movs	r2, #44	; 0x2c
    1912:	0018      	movs	r0, r3
    1914:	4b08      	ldr	r3, [pc, #32]	; (1938 <saveStarDeltaTimer+0x40>)
    1916:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1918:	4b06      	ldr	r3, [pc, #24]	; (1934 <saveStarDeltaTimer+0x3c>)
    191a:	0019      	movs	r1, r3
    191c:	201a      	movs	r0, #26
    191e:	4b07      	ldr	r3, [pc, #28]	; (193c <saveStarDeltaTimer+0x44>)
    1920:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1922:	4b07      	ldr	r3, [pc, #28]	; (1940 <saveStarDeltaTimer+0x48>)
    1924:	4798      	blx	r3
}
    1926:	46c0      	nop			; (mov r8, r8)
    1928:	46bd      	mov	sp, r7
    192a:	b002      	add	sp, #8
    192c:	bd80      	pop	{r7, pc}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	2000065c 	.word	0x2000065c
    1934:	20000584 	.word	0x20000584
    1938:	00017ca1 	.word	0x00017ca1
    193c:	00012969 	.word	0x00012969
    1940:	00012b11 	.word	0x00012b11

00001944 <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
    1944:	b580      	push	{r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	af00      	add	r7, sp, #0
    194a:	0002      	movs	r2, r0
    194c:	1dfb      	adds	r3, r7, #7
    194e:	701a      	strb	r2, [r3, #0]
	user_settings_parameter_struct.eventStageAddress = data;
    1950:	4b0a      	ldr	r3, [pc, #40]	; (197c <saveEventStageSettings+0x38>)
    1952:	1dfa      	adds	r2, r7, #7
    1954:	7812      	ldrb	r2, [r2, #0]
    1956:	721a      	strb	r2, [r3, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1958:	4908      	ldr	r1, [pc, #32]	; (197c <saveEventStageSettings+0x38>)
    195a:	4b09      	ldr	r3, [pc, #36]	; (1980 <saveEventStageSettings+0x3c>)
    195c:	222c      	movs	r2, #44	; 0x2c
    195e:	0018      	movs	r0, r3
    1960:	4b08      	ldr	r3, [pc, #32]	; (1984 <saveEventStageSettings+0x40>)
    1962:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1964:	4b06      	ldr	r3, [pc, #24]	; (1980 <saveEventStageSettings+0x3c>)
    1966:	0019      	movs	r1, r3
    1968:	201a      	movs	r0, #26
    196a:	4b07      	ldr	r3, [pc, #28]	; (1988 <saveEventStageSettings+0x44>)
    196c:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    196e:	4b07      	ldr	r3, [pc, #28]	; (198c <saveEventStageSettings+0x48>)
    1970:	4798      	blx	r3
}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	46bd      	mov	sp, r7
    1976:	b002      	add	sp, #8
    1978:	bd80      	pop	{r7, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	2000065c 	.word	0x2000065c
    1980:	20000584 	.word	0x20000584
    1984:	00017ca1 	.word	0x00017ca1
    1988:	00012969 	.word	0x00012969
    198c:	00012b11 	.word	0x00012b11

00001990 <isAdmin>:

bool isAdmin(char *number)
{
    1990:	b580      	push	{r7, lr}
    1992:	b08a      	sub	sp, #40	; 0x28
    1994:	af00      	add	r7, sp, #0
    1996:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<5;i++)
    1998:	2327      	movs	r3, #39	; 0x27
    199a:	18fb      	adds	r3, r7, r3
    199c:	2200      	movs	r2, #0
    199e:	701a      	strb	r2, [r3, #0]
    19a0:	e02b      	b.n	19fa <isAdmin+0x6a>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
    19a2:	4b1b      	ldr	r3, [pc, #108]	; (1a10 <isAdmin+0x80>)
    19a4:	223c      	movs	r2, #60	; 0x3c
    19a6:	2100      	movs	r1, #0
    19a8:	0018      	movs	r0, r3
    19aa:	4b1a      	ldr	r3, [pc, #104]	; (1a14 <isAdmin+0x84>)
    19ac:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
    19ae:	2327      	movs	r3, #39	; 0x27
    19b0:	18fb      	adds	r3, r7, r3
    19b2:	781b      	ldrb	r3, [r3, #0]
    19b4:	3303      	adds	r3, #3
    19b6:	b2db      	uxtb	r3, r3
    19b8:	4a15      	ldr	r2, [pc, #84]	; (1a10 <isAdmin+0x80>)
    19ba:	0011      	movs	r1, r2
    19bc:	0018      	movs	r0, r3
    19be:	4b16      	ldr	r3, [pc, #88]	; (1a18 <isAdmin+0x88>)
    19c0:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
    19c2:	230c      	movs	r3, #12
    19c4:	18fa      	adds	r2, r7, r3
    19c6:	4b12      	ldr	r3, [pc, #72]	; (1a10 <isAdmin+0x80>)
    19c8:	0010      	movs	r0, r2
    19ca:	0019      	movs	r1, r3
    19cc:	2318      	movs	r3, #24
    19ce:	001a      	movs	r2, r3
    19d0:	4b12      	ldr	r3, [pc, #72]	; (1a1c <isAdmin+0x8c>)
    19d2:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
    19d4:	230c      	movs	r3, #12
    19d6:	18fb      	adds	r3, r7, r3
    19d8:	1d1a      	adds	r2, r3, #4
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	0011      	movs	r1, r2
    19de:	0018      	movs	r0, r3
    19e0:	4b0f      	ldr	r3, [pc, #60]	; (1a20 <isAdmin+0x90>)
    19e2:	4798      	blx	r3
    19e4:	1e03      	subs	r3, r0, #0
    19e6:	d001      	beq.n	19ec <isAdmin+0x5c>
		{
			return true;
    19e8:	2301      	movs	r3, #1
    19ea:	e00c      	b.n	1a06 <isAdmin+0x76>
	for (uint8_t i=0;i<5;i++)
    19ec:	2327      	movs	r3, #39	; 0x27
    19ee:	18fb      	adds	r3, r7, r3
    19f0:	781a      	ldrb	r2, [r3, #0]
    19f2:	2327      	movs	r3, #39	; 0x27
    19f4:	18fb      	adds	r3, r7, r3
    19f6:	3201      	adds	r2, #1
    19f8:	701a      	strb	r2, [r3, #0]
    19fa:	2327      	movs	r3, #39	; 0x27
    19fc:	18fb      	adds	r3, r7, r3
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	2b04      	cmp	r3, #4
    1a02:	d9ce      	bls.n	19a2 <isAdmin+0x12>
		}
	}
	return false;
    1a04:	2300      	movs	r3, #0
}
    1a06:	0018      	movs	r0, r3
    1a08:	46bd      	mov	sp, r7
    1a0a:	b00a      	add	sp, #40	; 0x28
    1a0c:	bd80      	pop	{r7, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	20000584 	.word	0x20000584
    1a14:	00017cd7 	.word	0x00017cd7
    1a18:	00012a75 	.word	0x00012a75
    1a1c:	00017ca1 	.word	0x00017ca1
    1a20:	00017f97 	.word	0x00017f97

00001a24 <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	b082      	sub	sp, #8
    1a28:	af00      	add	r7, sp, #0
    1a2a:	0002      	movs	r2, r0
    1a2c:	1dfb      	adds	r3, r7, #7
    1a2e:	701a      	strb	r2, [r3, #0]
	user_count_struct.primaryNumberIndex = index;
    1a30:	4b0b      	ldr	r3, [pc, #44]	; (1a60 <setPrimaryNumberIndex+0x3c>)
    1a32:	1dfa      	adds	r2, r7, #7
    1a34:	7812      	ldrb	r2, [r2, #0]
    1a36:	70da      	strb	r2, [r3, #3]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    1a38:	4a0a      	ldr	r2, [pc, #40]	; (1a64 <setPrimaryNumberIndex+0x40>)
    1a3a:	4b09      	ldr	r3, [pc, #36]	; (1a60 <setPrimaryNumberIndex+0x3c>)
    1a3c:	0010      	movs	r0, r2
    1a3e:	0019      	movs	r1, r3
    1a40:	2308      	movs	r3, #8
    1a42:	001a      	movs	r2, r3
    1a44:	4b08      	ldr	r3, [pc, #32]	; (1a68 <setPrimaryNumberIndex+0x44>)
    1a46:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    1a48:	4b06      	ldr	r3, [pc, #24]	; (1a64 <setPrimaryNumberIndex+0x40>)
    1a4a:	0019      	movs	r1, r3
    1a4c:	2008      	movs	r0, #8
    1a4e:	4b07      	ldr	r3, [pc, #28]	; (1a6c <setPrimaryNumberIndex+0x48>)
    1a50:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1a52:	4b07      	ldr	r3, [pc, #28]	; (1a70 <setPrimaryNumberIndex+0x4c>)
    1a54:	4798      	blx	r3

}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	46bd      	mov	sp, r7
    1a5a:	b002      	add	sp, #8
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	20000610 	.word	0x20000610
    1a64:	20000584 	.word	0x20000584
    1a68:	00017ca1 	.word	0x00017ca1
    1a6c:	00012969 	.word	0x00012969
    1a70:	00012b11 	.word	0x00012b11

00001a74 <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
    1a74:	b580      	push	{r7, lr}
    1a76:	b082      	sub	sp, #8
    1a78:	af00      	add	r7, sp, #0
    1a7a:	0002      	movs	r2, r0
    1a7c:	1dfb      	adds	r3, r7, #7
    1a7e:	701a      	strb	r2, [r3, #0]
	user_count_struct.secondaryNumberIndex = index;
    1a80:	4b0b      	ldr	r3, [pc, #44]	; (1ab0 <setSecondaryNumberIndex+0x3c>)
    1a82:	1dfa      	adds	r2, r7, #7
    1a84:	7812      	ldrb	r2, [r2, #0]
    1a86:	711a      	strb	r2, [r3, #4]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
    1a88:	4a0a      	ldr	r2, [pc, #40]	; (1ab4 <setSecondaryNumberIndex+0x40>)
    1a8a:	4b09      	ldr	r3, [pc, #36]	; (1ab0 <setSecondaryNumberIndex+0x3c>)
    1a8c:	0010      	movs	r0, r2
    1a8e:	0019      	movs	r1, r3
    1a90:	2308      	movs	r3, #8
    1a92:	001a      	movs	r2, r3
    1a94:	4b08      	ldr	r3, [pc, #32]	; (1ab8 <setSecondaryNumberIndex+0x44>)
    1a96:	4798      	blx	r3
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
    1a98:	4b06      	ldr	r3, [pc, #24]	; (1ab4 <setSecondaryNumberIndex+0x40>)
    1a9a:	0019      	movs	r1, r3
    1a9c:	2008      	movs	r0, #8
    1a9e:	4b07      	ldr	r3, [pc, #28]	; (1abc <setSecondaryNumberIndex+0x48>)
    1aa0:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1aa2:	4b07      	ldr	r3, [pc, #28]	; (1ac0 <setSecondaryNumberIndex+0x4c>)
    1aa4:	4798      	blx	r3
}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	46bd      	mov	sp, r7
    1aaa:	b002      	add	sp, #8
    1aac:	bd80      	pop	{r7, pc}
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	20000610 	.word	0x20000610
    1ab4:	20000584 	.word	0x20000584
    1ab8:	00017ca1 	.word	0x00017ca1
    1abc:	00012969 	.word	0x00012969
    1ac0:	00012b11 	.word	0x00012b11

00001ac4 <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
    1ac4:	b590      	push	{r4, r7, lr}
    1ac6:	b085      	sub	sp, #20
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
    1acc:	230e      	movs	r3, #14
    1ace:	18fc      	adds	r4, r7, r3
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	0018      	movs	r0, r3
    1ad4:	4b21      	ldr	r3, [pc, #132]	; (1b5c <addPrimaryIndexedNumber+0x98>)
    1ad6:	4798      	blx	r3
    1ad8:	0003      	movs	r3, r0
    1ada:	7023      	strb	r3, [r4, #0]

	uint8_t newPrimaryIndex=0xFF;
    1adc:	230f      	movs	r3, #15
    1ade:	18fb      	adds	r3, r7, r3
    1ae0:	22ff      	movs	r2, #255	; 0xff
    1ae2:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
    1ae4:	4b1e      	ldr	r3, [pc, #120]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1ae6:	785b      	ldrb	r3, [r3, #1]
    1ae8:	220e      	movs	r2, #14
    1aea:	18ba      	adds	r2, r7, r2
    1aec:	7812      	ldrb	r2, [r2, #0]
    1aee:	429a      	cmp	r2, r3
    1af0:	d309      	bcc.n	1b06 <addPrimaryIndexedNumber+0x42>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
    1af2:	230f      	movs	r3, #15
    1af4:	18fb      	adds	r3, r7, r3
    1af6:	4a1a      	ldr	r2, [pc, #104]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1af8:	7892      	ldrb	r2, [r2, #2]
    1afa:	701a      	strb	r2, [r3, #0]
		addNumber(number);
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	0018      	movs	r0, r3
    1b00:	4b18      	ldr	r3, [pc, #96]	; (1b64 <addPrimaryIndexedNumber+0xa0>)
    1b02:	4798      	blx	r3
    1b04:	e00c      	b.n	1b20 <addPrimaryIndexedNumber+0x5c>
	}
	else if(index<user_count_struct.total_user_no_count)
    1b06:	4b16      	ldr	r3, [pc, #88]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b08:	785b      	ldrb	r3, [r3, #1]
    1b0a:	220e      	movs	r2, #14
    1b0c:	18ba      	adds	r2, r7, r2
    1b0e:	7812      	ldrb	r2, [r2, #0]
    1b10:	429a      	cmp	r2, r3
    1b12:	d205      	bcs.n	1b20 <addPrimaryIndexedNumber+0x5c>
	{
		newPrimaryIndex = index;
    1b14:	230f      	movs	r3, #15
    1b16:	18fb      	adds	r3, r7, r3
    1b18:	220e      	movs	r2, #14
    1b1a:	18ba      	adds	r2, r7, r2
    1b1c:	7812      	ldrb	r2, [r2, #0]
    1b1e:	701a      	strb	r2, [r3, #0]
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
    1b20:	4b0f      	ldr	r3, [pc, #60]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b22:	785b      	ldrb	r3, [r3, #1]
    1b24:	220f      	movs	r2, #15
    1b26:	18ba      	adds	r2, r7, r2
    1b28:	7812      	ldrb	r2, [r2, #0]
    1b2a:	429a      	cmp	r2, r3
    1b2c:	d210      	bcs.n	1b50 <addPrimaryIndexedNumber+0x8c>
	{
		// if current numbers present are more than 1, than set the previous primary number as secondary number
		if (user_count_struct.current_user_no_count>1)
    1b2e:	4b0c      	ldr	r3, [pc, #48]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b30:	789b      	ldrb	r3, [r3, #2]
    1b32:	2b01      	cmp	r3, #1
    1b34:	d904      	bls.n	1b40 <addPrimaryIndexedNumber+0x7c>
		{
			setSecondaryNumberIndex(user_count_struct.primaryNumberIndex);
    1b36:	4b0a      	ldr	r3, [pc, #40]	; (1b60 <addPrimaryIndexedNumber+0x9c>)
    1b38:	78db      	ldrb	r3, [r3, #3]
    1b3a:	0018      	movs	r0, r3
    1b3c:	4b0a      	ldr	r3, [pc, #40]	; (1b68 <addPrimaryIndexedNumber+0xa4>)
    1b3e:	4798      	blx	r3
		}
		
		setPrimaryNumberIndex(newPrimaryIndex);
    1b40:	230f      	movs	r3, #15
    1b42:	18fb      	adds	r3, r7, r3
    1b44:	781b      	ldrb	r3, [r3, #0]
    1b46:	0018      	movs	r0, r3
    1b48:	4b08      	ldr	r3, [pc, #32]	; (1b6c <addPrimaryIndexedNumber+0xa8>)
    1b4a:	4798      	blx	r3
		return true;
    1b4c:	2301      	movs	r3, #1
    1b4e:	e000      	b.n	1b52 <addPrimaryIndexedNumber+0x8e>
	}

	return false;
    1b50:	2300      	movs	r3, #0
}
    1b52:	0018      	movs	r0, r3
    1b54:	46bd      	mov	sp, r7
    1b56:	b005      	add	sp, #20
    1b58:	bd90      	pop	{r4, r7, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	00000ded 	.word	0x00000ded
    1b60:	20000610 	.word	0x20000610
    1b64:	00000ef1 	.word	0x00000ef1
    1b68:	00001a75 	.word	0x00001a75
    1b6c:	00001a25 	.word	0x00001a25

00001b70 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
    1b70:	b590      	push	{r4, r7, lr}
    1b72:	b085      	sub	sp, #20
    1b74:	af00      	add	r7, sp, #0
    1b76:	6078      	str	r0, [r7, #4]
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
    1b78:	4b21      	ldr	r3, [pc, #132]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1b7a:	789b      	ldrb	r3, [r3, #2]
    1b7c:	2b01      	cmp	r3, #1
    1b7e:	d801      	bhi.n	1b84 <addSecondaryIndexedNumber+0x14>
	return false;
    1b80:	2300      	movs	r3, #0
    1b82:	e039      	b.n	1bf8 <addSecondaryIndexedNumber+0x88>

	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
    1b84:	230e      	movs	r3, #14
    1b86:	18fc      	adds	r4, r7, r3
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	0018      	movs	r0, r3
    1b8c:	4b1d      	ldr	r3, [pc, #116]	; (1c04 <addSecondaryIndexedNumber+0x94>)
    1b8e:	4798      	blx	r3
    1b90:	0003      	movs	r3, r0
    1b92:	7023      	strb	r3, [r4, #0]

	uint8_t newSecondaryIndex=0xFF;
    1b94:	230f      	movs	r3, #15
    1b96:	18fb      	adds	r3, r7, r3
    1b98:	22ff      	movs	r2, #255	; 0xff
    1b9a:	701a      	strb	r2, [r3, #0]
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
    1b9c:	4b18      	ldr	r3, [pc, #96]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1b9e:	785b      	ldrb	r3, [r3, #1]
    1ba0:	220e      	movs	r2, #14
    1ba2:	18ba      	adds	r2, r7, r2
    1ba4:	7812      	ldrb	r2, [r2, #0]
    1ba6:	429a      	cmp	r2, r3
    1ba8:	d309      	bcc.n	1bbe <addSecondaryIndexedNumber+0x4e>
	{
		newSecondaryIndex = user_count_struct.current_user_no_count;
    1baa:	230f      	movs	r3, #15
    1bac:	18fb      	adds	r3, r7, r3
    1bae:	4a14      	ldr	r2, [pc, #80]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1bb0:	7892      	ldrb	r2, [r2, #2]
    1bb2:	701a      	strb	r2, [r3, #0]
		addNumber(number);
    1bb4:	687b      	ldr	r3, [r7, #4]
    1bb6:	0018      	movs	r0, r3
    1bb8:	4b13      	ldr	r3, [pc, #76]	; (1c08 <addSecondaryIndexedNumber+0x98>)
    1bba:	4798      	blx	r3
    1bbc:	e00c      	b.n	1bd8 <addSecondaryIndexedNumber+0x68>
	}
	else if(index < user_count_struct.total_user_no_count)
    1bbe:	4b10      	ldr	r3, [pc, #64]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1bc0:	785b      	ldrb	r3, [r3, #1]
    1bc2:	220e      	movs	r2, #14
    1bc4:	18ba      	adds	r2, r7, r2
    1bc6:	7812      	ldrb	r2, [r2, #0]
    1bc8:	429a      	cmp	r2, r3
    1bca:	d205      	bcs.n	1bd8 <addSecondaryIndexedNumber+0x68>
	{
		newSecondaryIndex = index;
    1bcc:	230f      	movs	r3, #15
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	220e      	movs	r2, #14
    1bd2:	18ba      	adds	r2, r7, r2
    1bd4:	7812      	ldrb	r2, [r2, #0]
    1bd6:	701a      	strb	r2, [r3, #0]
	}

	if(newSecondaryIndex < user_count_struct.total_user_no_count)
    1bd8:	4b09      	ldr	r3, [pc, #36]	; (1c00 <addSecondaryIndexedNumber+0x90>)
    1bda:	785b      	ldrb	r3, [r3, #1]
    1bdc:	220f      	movs	r2, #15
    1bde:	18ba      	adds	r2, r7, r2
    1be0:	7812      	ldrb	r2, [r2, #0]
    1be2:	429a      	cmp	r2, r3
    1be4:	d207      	bcs.n	1bf6 <addSecondaryIndexedNumber+0x86>
	{
		setSecondaryNumberIndex(newSecondaryIndex);
    1be6:	230f      	movs	r3, #15
    1be8:	18fb      	adds	r3, r7, r3
    1bea:	781b      	ldrb	r3, [r3, #0]
    1bec:	0018      	movs	r0, r3
    1bee:	4b07      	ldr	r3, [pc, #28]	; (1c0c <addSecondaryIndexedNumber+0x9c>)
    1bf0:	4798      	blx	r3
		return true;
    1bf2:	2301      	movs	r3, #1
    1bf4:	e000      	b.n	1bf8 <addSecondaryIndexedNumber+0x88>
	}
	return false;
    1bf6:	2300      	movs	r3, #0
}
    1bf8:	0018      	movs	r0, r3
    1bfa:	46bd      	mov	sp, r7
    1bfc:	b005      	add	sp, #20
    1bfe:	bd90      	pop	{r4, r7, pc}
    1c00:	20000610 	.word	0x20000610
    1c04:	00000ded 	.word	0x00000ded
    1c08:	00000ef1 	.word	0x00000ef1
    1c0c:	00001a75 	.word	0x00001a75

00001c10 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1c10:	b580      	push	{r7, lr}
    1c12:	b082      	sub	sp, #8
    1c14:	af00      	add	r7, sp, #0
    1c16:	0002      	movs	r2, r0
    1c18:	1dfb      	adds	r3, r7, #7
    1c1a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c1c:	4b06      	ldr	r3, [pc, #24]	; (1c38 <system_interrupt_enable+0x28>)
    1c1e:	1dfa      	adds	r2, r7, #7
    1c20:	7812      	ldrb	r2, [r2, #0]
    1c22:	0011      	movs	r1, r2
    1c24:	221f      	movs	r2, #31
    1c26:	400a      	ands	r2, r1
    1c28:	2101      	movs	r1, #1
    1c2a:	4091      	lsls	r1, r2
    1c2c:	000a      	movs	r2, r1
    1c2e:	601a      	str	r2, [r3, #0]
}
    1c30:	46c0      	nop			; (mov r8, r8)
    1c32:	46bd      	mov	sp, r7
    1c34:	b002      	add	sp, #8
    1c36:	bd80      	pop	{r7, pc}
    1c38:	e000e100 	.word	0xe000e100

00001c3c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1c3c:	b580      	push	{r7, lr}
    1c3e:	b082      	sub	sp, #8
    1c40:	af00      	add	r7, sp, #0
    1c42:	0002      	movs	r2, r0
    1c44:	1dfb      	adds	r3, r7, #7
    1c46:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c48:	4a07      	ldr	r2, [pc, #28]	; (1c68 <system_interrupt_disable+0x2c>)
    1c4a:	1dfb      	adds	r3, r7, #7
    1c4c:	781b      	ldrb	r3, [r3, #0]
    1c4e:	0019      	movs	r1, r3
    1c50:	231f      	movs	r3, #31
    1c52:	400b      	ands	r3, r1
    1c54:	2101      	movs	r1, #1
    1c56:	4099      	lsls	r1, r3
    1c58:	000b      	movs	r3, r1
    1c5a:	0019      	movs	r1, r3
    1c5c:	2380      	movs	r3, #128	; 0x80
    1c5e:	50d1      	str	r1, [r2, r3]
}
    1c60:	46c0      	nop			; (mov r8, r8)
    1c62:	46bd      	mov	sp, r7
    1c64:	b002      	add	sp, #8
    1c66:	bd80      	pop	{r7, pc}
    1c68:	e000e100 	.word	0xe000e100

00001c6c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b084      	sub	sp, #16
    1c70:	af00      	add	r7, sp, #0
    1c72:	0002      	movs	r2, r0
    1c74:	1dfb      	adds	r3, r7, #7
    1c76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1c78:	230f      	movs	r3, #15
    1c7a:	18fb      	adds	r3, r7, r3
    1c7c:	1dfa      	adds	r2, r7, #7
    1c7e:	7812      	ldrb	r2, [r2, #0]
    1c80:	09d2      	lsrs	r2, r2, #7
    1c82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1c84:	230e      	movs	r3, #14
    1c86:	18fb      	adds	r3, r7, r3
    1c88:	1dfa      	adds	r2, r7, #7
    1c8a:	7812      	ldrb	r2, [r2, #0]
    1c8c:	0952      	lsrs	r2, r2, #5
    1c8e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1c90:	4b0d      	ldr	r3, [pc, #52]	; (1cc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1c92:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1c94:	230f      	movs	r3, #15
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	781b      	ldrb	r3, [r3, #0]
    1c9a:	2b00      	cmp	r3, #0
    1c9c:	d10f      	bne.n	1cbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1c9e:	230f      	movs	r3, #15
    1ca0:	18fb      	adds	r3, r7, r3
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	009b      	lsls	r3, r3, #2
    1ca6:	2210      	movs	r2, #16
    1ca8:	4694      	mov	ip, r2
    1caa:	44bc      	add	ip, r7
    1cac:	4463      	add	r3, ip
    1cae:	3b08      	subs	r3, #8
    1cb0:	681a      	ldr	r2, [r3, #0]
    1cb2:	230e      	movs	r3, #14
    1cb4:	18fb      	adds	r3, r7, r3
    1cb6:	781b      	ldrb	r3, [r3, #0]
    1cb8:	01db      	lsls	r3, r3, #7
    1cba:	18d3      	adds	r3, r2, r3
    1cbc:	e000      	b.n	1cc0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1cbe:	2300      	movs	r3, #0
	}
}
    1cc0:	0018      	movs	r0, r3
    1cc2:	46bd      	mov	sp, r7
    1cc4:	b004      	add	sp, #16
    1cc6:	bd80      	pop	{r7, pc}
    1cc8:	41004400 	.word	0x41004400

00001ccc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1ccc:	b580      	push	{r7, lr}
    1cce:	b082      	sub	sp, #8
    1cd0:	af00      	add	r7, sp, #0
    1cd2:	0002      	movs	r2, r0
    1cd4:	1dfb      	adds	r3, r7, #7
    1cd6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1cd8:	1dfb      	adds	r3, r7, #7
    1cda:	781b      	ldrb	r3, [r3, #0]
    1cdc:	0018      	movs	r0, r3
    1cde:	4b03      	ldr	r3, [pc, #12]	; (1cec <port_get_group_from_gpio_pin+0x20>)
    1ce0:	4798      	blx	r3
    1ce2:	0003      	movs	r3, r0
}
    1ce4:	0018      	movs	r0, r3
    1ce6:	46bd      	mov	sp, r7
    1ce8:	b002      	add	sp, #8
    1cea:	bd80      	pop	{r7, pc}
    1cec:	00001c6d 	.word	0x00001c6d

00001cf0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1cf8:	687b      	ldr	r3, [r7, #4]
    1cfa:	2200      	movs	r2, #0
    1cfc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	2201      	movs	r2, #1
    1d02:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1d04:	687b      	ldr	r3, [r7, #4]
    1d06:	2200      	movs	r2, #0
    1d08:	709a      	strb	r2, [r3, #2]
}
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	46bd      	mov	sp, r7
    1d0e:	b002      	add	sp, #8
    1d10:	bd80      	pop	{r7, pc}
	...

00001d14 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1d14:	b580      	push	{r7, lr}
    1d16:	b084      	sub	sp, #16
    1d18:	af00      	add	r7, sp, #0
    1d1a:	0002      	movs	r2, r0
    1d1c:	1dfb      	adds	r3, r7, #7
    1d1e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1d20:	1dfb      	adds	r3, r7, #7
    1d22:	781b      	ldrb	r3, [r3, #0]
    1d24:	0018      	movs	r0, r3
    1d26:	4b0b      	ldr	r3, [pc, #44]	; (1d54 <port_pin_get_input_level+0x40>)
    1d28:	4798      	blx	r3
    1d2a:	0003      	movs	r3, r0
    1d2c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d2e:	1dfb      	adds	r3, r7, #7
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	221f      	movs	r2, #31
    1d34:	4013      	ands	r3, r2
    1d36:	2201      	movs	r2, #1
    1d38:	409a      	lsls	r2, r3
    1d3a:	0013      	movs	r3, r2
    1d3c:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    1d3e:	68fb      	ldr	r3, [r7, #12]
    1d40:	6a1b      	ldr	r3, [r3, #32]
    1d42:	68ba      	ldr	r2, [r7, #8]
    1d44:	4013      	ands	r3, r2
    1d46:	1e5a      	subs	r2, r3, #1
    1d48:	4193      	sbcs	r3, r2
    1d4a:	b2db      	uxtb	r3, r3
}
    1d4c:	0018      	movs	r0, r3
    1d4e:	46bd      	mov	sp, r7
    1d50:	b004      	add	sp, #16
    1d52:	bd80      	pop	{r7, pc}
    1d54:	00001ccd 	.word	0x00001ccd

00001d58 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	b084      	sub	sp, #16
    1d5c:	af00      	add	r7, sp, #0
    1d5e:	0002      	movs	r2, r0
    1d60:	1dfb      	adds	r3, r7, #7
    1d62:	701a      	strb	r2, [r3, #0]
    1d64:	1dbb      	adds	r3, r7, #6
    1d66:	1c0a      	adds	r2, r1, #0
    1d68:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1d6a:	1dfb      	adds	r3, r7, #7
    1d6c:	781b      	ldrb	r3, [r3, #0]
    1d6e:	0018      	movs	r0, r3
    1d70:	4b0d      	ldr	r3, [pc, #52]	; (1da8 <port_pin_set_output_level+0x50>)
    1d72:	4798      	blx	r3
    1d74:	0003      	movs	r3, r0
    1d76:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d78:	1dfb      	adds	r3, r7, #7
    1d7a:	781b      	ldrb	r3, [r3, #0]
    1d7c:	221f      	movs	r2, #31
    1d7e:	4013      	ands	r3, r2
    1d80:	2201      	movs	r2, #1
    1d82:	409a      	lsls	r2, r3
    1d84:	0013      	movs	r3, r2
    1d86:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1d88:	1dbb      	adds	r3, r7, #6
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d003      	beq.n	1d98 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1d90:	68fb      	ldr	r3, [r7, #12]
    1d92:	68ba      	ldr	r2, [r7, #8]
    1d94:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1d96:	e002      	b.n	1d9e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1d98:	68fb      	ldr	r3, [r7, #12]
    1d9a:	68ba      	ldr	r2, [r7, #8]
    1d9c:	615a      	str	r2, [r3, #20]
}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	46bd      	mov	sp, r7
    1da2:	b004      	add	sp, #16
    1da4:	bd80      	pop	{r7, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	00001ccd 	.word	0x00001ccd

00001dac <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	b084      	sub	sp, #16
    1db0:	af00      	add	r7, sp, #0
    1db2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	681b      	ldr	r3, [r3, #0]
    1db8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1dba:	68fb      	ldr	r3, [r7, #12]
    1dbc:	69db      	ldr	r3, [r3, #28]
    1dbe:	1e5a      	subs	r2, r3, #1
    1dc0:	4193      	sbcs	r3, r2
    1dc2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1dc4:	0018      	movs	r0, r3
    1dc6:	46bd      	mov	sp, r7
    1dc8:	b004      	add	sp, #16
    1dca:	bd80      	pop	{r7, pc}

00001dcc <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1dcc:	b580      	push	{r7, lr}
    1dce:	b082      	sub	sp, #8
    1dd0:	af00      	add	r7, sp, #0
    1dd2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1dd4:	46c0      	nop			; (mov r8, r8)
    1dd6:	687b      	ldr	r3, [r7, #4]
    1dd8:	0018      	movs	r0, r3
    1dda:	4b04      	ldr	r3, [pc, #16]	; (1dec <_usart_wait_for_sync+0x20>)
    1ddc:	4798      	blx	r3
    1dde:	1e03      	subs	r3, r0, #0
    1de0:	d1f9      	bne.n	1dd6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	46bd      	mov	sp, r7
    1de6:	b002      	add	sp, #8
    1de8:	bd80      	pop	{r7, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00001dad 	.word	0x00001dad

00001df0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b082      	sub	sp, #8
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1df8:	687b      	ldr	r3, [r7, #4]
    1dfa:	2280      	movs	r2, #128	; 0x80
    1dfc:	05d2      	lsls	r2, r2, #23
    1dfe:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	2200      	movs	r2, #0
    1e04:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	22ff      	movs	r2, #255	; 0xff
    1e0a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	2200      	movs	r2, #0
    1e10:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	2200      	movs	r2, #0
    1e16:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    1e18:	687b      	ldr	r3, [r7, #4]
    1e1a:	2296      	movs	r2, #150	; 0x96
    1e1c:	0192      	lsls	r2, r2, #6
    1e1e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	2224      	movs	r2, #36	; 0x24
    1e24:	2101      	movs	r1, #1
    1e26:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	2225      	movs	r2, #37	; 0x25
    1e2c:	2101      	movs	r1, #1
    1e2e:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	2226      	movs	r2, #38	; 0x26
    1e34:	2100      	movs	r1, #0
    1e36:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	2227      	movs	r2, #39	; 0x27
    1e3c:	2100      	movs	r1, #0
    1e3e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	2200      	movs	r2, #0
    1e44:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1e46:	687b      	ldr	r3, [r7, #4]
    1e48:	2288      	movs	r2, #136	; 0x88
    1e4a:	0352      	lsls	r2, r2, #13
    1e4c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	222c      	movs	r2, #44	; 0x2c
    1e52:	2100      	movs	r1, #0
    1e54:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    1e56:	687b      	ldr	r3, [r7, #4]
    1e58:	222d      	movs	r2, #45	; 0x2d
    1e5a:	2100      	movs	r1, #0
    1e5c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	2200      	movs	r2, #0
    1e62:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	2200      	movs	r2, #0
    1e68:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	2200      	movs	r2, #0
    1e6e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1e70:	687b      	ldr	r3, [r7, #4]
    1e72:	2200      	movs	r2, #0
    1e74:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	2200      	movs	r2, #0
    1e7a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1e7c:	687b      	ldr	r3, [r7, #4]
    1e7e:	2200      	movs	r2, #0
    1e80:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	2200      	movs	r2, #0
    1e86:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1e88:	687b      	ldr	r3, [r7, #4]
    1e8a:	2200      	movs	r2, #0
    1e8c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	2200      	movs	r2, #0
    1e92:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	2200      	movs	r2, #0
    1e98:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	2213      	movs	r2, #19
    1e9e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	2200      	movs	r2, #0
    1ea4:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    1ea6:	46c0      	nop			; (mov r8, r8)
    1ea8:	46bd      	mov	sp, r7
    1eaa:	b002      	add	sp, #8
    1eac:	bd80      	pop	{r7, pc}
	...

00001eb0 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    1eb0:	b580      	push	{r7, lr}
    1eb2:	b084      	sub	sp, #16
    1eb4:	af00      	add	r7, sp, #0
    1eb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ebe:	687b      	ldr	r3, [r7, #4]
    1ec0:	681b      	ldr	r3, [r3, #0]
    1ec2:	0018      	movs	r0, r3
    1ec4:	4b09      	ldr	r3, [pc, #36]	; (1eec <usart_enable+0x3c>)
    1ec6:	4798      	blx	r3
    1ec8:	0003      	movs	r3, r0
    1eca:	0018      	movs	r0, r3
    1ecc:	4b08      	ldr	r3, [pc, #32]	; (1ef0 <usart_enable+0x40>)
    1ece:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	0018      	movs	r0, r3
    1ed4:	4b07      	ldr	r3, [pc, #28]	; (1ef4 <usart_enable+0x44>)
    1ed6:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1ed8:	68fb      	ldr	r3, [r7, #12]
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	2202      	movs	r2, #2
    1ede:	431a      	orrs	r2, r3
    1ee0:	68fb      	ldr	r3, [r7, #12]
    1ee2:	601a      	str	r2, [r3, #0]
}
    1ee4:	46c0      	nop			; (mov r8, r8)
    1ee6:	46bd      	mov	sp, r7
    1ee8:	b004      	add	sp, #16
    1eea:	bd80      	pop	{r7, pc}
    1eec:	000111d5 	.word	0x000111d5
    1ef0:	00001c11 	.word	0x00001c11
    1ef4:	00001dcd 	.word	0x00001dcd

00001ef8 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	b084      	sub	sp, #16
    1efc:	af00      	add	r7, sp, #0
    1efe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f00:	687b      	ldr	r3, [r7, #4]
    1f02:	681b      	ldr	r3, [r3, #0]
    1f04:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1f06:	687b      	ldr	r3, [r7, #4]
    1f08:	681b      	ldr	r3, [r3, #0]
    1f0a:	0018      	movs	r0, r3
    1f0c:	4b0a      	ldr	r3, [pc, #40]	; (1f38 <usart_disable+0x40>)
    1f0e:	4798      	blx	r3
    1f10:	0003      	movs	r3, r0
    1f12:	0018      	movs	r0, r3
    1f14:	4b09      	ldr	r3, [pc, #36]	; (1f3c <usart_disable+0x44>)
    1f16:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	0018      	movs	r0, r3
    1f1c:	4b08      	ldr	r3, [pc, #32]	; (1f40 <usart_disable+0x48>)
    1f1e:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1f20:	68fb      	ldr	r3, [r7, #12]
    1f22:	681b      	ldr	r3, [r3, #0]
    1f24:	2202      	movs	r2, #2
    1f26:	4393      	bics	r3, r2
    1f28:	001a      	movs	r2, r3
    1f2a:	68fb      	ldr	r3, [r7, #12]
    1f2c:	601a      	str	r2, [r3, #0]
}
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	46bd      	mov	sp, r7
    1f32:	b004      	add	sp, #16
    1f34:	bd80      	pop	{r7, pc}
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	000111d5 	.word	0x000111d5
    1f3c:	00001c3d 	.word	0x00001c3d
    1f40:	00001dcd 	.word	0x00001dcd

00001f44 <usart_reset>:
 *
 * \param[in]  module  Pointer to the USART software instance struct
 */
static inline void usart_reset(
		const struct usart_module *const module)
{
    1f44:	b580      	push	{r7, lr}
    1f46:	b084      	sub	sp, #16
    1f48:	af00      	add	r7, sp, #0
    1f4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1f4c:	687b      	ldr	r3, [r7, #4]
    1f4e:	681b      	ldr	r3, [r3, #0]
    1f50:	60fb      	str	r3, [r7, #12]

	usart_disable(module);
    1f52:	687b      	ldr	r3, [r7, #4]
    1f54:	0018      	movs	r0, r3
    1f56:	4b06      	ldr	r3, [pc, #24]	; (1f70 <usart_reset+0x2c>)
    1f58:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	0018      	movs	r0, r3
    1f5e:	4b05      	ldr	r3, [pc, #20]	; (1f74 <usart_reset+0x30>)
    1f60:	4798      	blx	r3

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    1f62:	68fb      	ldr	r3, [r7, #12]
    1f64:	2201      	movs	r2, #1
    1f66:	601a      	str	r2, [r3, #0]
}
    1f68:	46c0      	nop			; (mov r8, r8)
    1f6a:	46bd      	mov	sp, r7
    1f6c:	b004      	add	sp, #16
    1f6e:	bd80      	pop	{r7, pc}
    1f70:	00001ef9 	.word	0x00001ef9
    1f74:	00001dcd 	.word	0x00001dcd

00001f78 <gsm_timer_callback>:
/** FreeRTOS timer callback function, fired when the a timer period has elapsed.
 *
 *  \param[in]  timer  ID of the timer that has expired.
 */
static void gsm_timer_callback(TimerHandle_t timer)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b082      	sub	sp, #8
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	6078      	str	r0, [r7, #4]
}
    1f80:	46c0      	nop			; (mov r8, r8)
    1f82:	46bd      	mov	sp, r7
    1f84:	b002      	add	sp, #8
    1f86:	bd80      	pop	{r7, pc}

00001f88 <Flush_RX_Buffer>:

void Flush_RX_Buffer(void)
{
    1f88:	b580      	push	{r7, lr}
    1f8a:	b082      	sub	sp, #8
    1f8c:	af00      	add	r7, sp, #0
	uint8_t ucharTemp_Value;
	portBASE_TYPE xStatus;
	while(1)
	{
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
    1f8e:	4b09      	ldr	r3, [pc, #36]	; (1fb4 <Flush_RX_Buffer+0x2c>)
    1f90:	681b      	ldr	r3, [r3, #0]
    1f92:	1cf9      	adds	r1, r7, #3
    1f94:	2200      	movs	r2, #0
    1f96:	0018      	movs	r0, r3
    1f98:	4b07      	ldr	r3, [pc, #28]	; (1fb8 <Flush_RX_Buffer+0x30>)
    1f9a:	4798      	blx	r3
    1f9c:	0003      	movs	r3, r0
    1f9e:	607b      	str	r3, [r7, #4]
		if (xStatus==errQUEUE_EMPTY)
    1fa0:	687b      	ldr	r3, [r7, #4]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d000      	beq.n	1fa8 <Flush_RX_Buffer+0x20>
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
    1fa6:	e7f2      	b.n	1f8e <Flush_RX_Buffer+0x6>
		{
			break;
    1fa8:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	46bd      	mov	sp, r7
    1fae:	b002      	add	sp, #8
    1fb0:	bd80      	pop	{r7, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	20000220 	.word	0x20000220
    1fb8:	0000e571 	.word	0x0000e571

00001fbc <gsm_rx_handler>:

static void gsm_rx_handler(uint8_t instance)
{
    1fbc:	b590      	push	{r4, r7, lr}
    1fbe:	b085      	sub	sp, #20
    1fc0:	af00      	add	r7, sp, #0
    1fc2:	0002      	movs	r2, r0
    1fc4:	1dfb      	adds	r3, r7, #7
    1fc6:	701a      	strb	r2, [r3, #0]
	SercomUsart *const usart_hw = &GSM_SERCOM->USART;
    1fc8:	4b18      	ldr	r3, [pc, #96]	; (202c <STACK_SIZE+0x2c>)
    1fca:	60fb      	str	r3, [r7, #12]
	UNUSED(instance);
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) 
    1fcc:	68fb      	ldr	r3, [r7, #12]
    1fce:	7e1b      	ldrb	r3, [r3, #24]
    1fd0:	b2db      	uxtb	r3, r3
    1fd2:	001a      	movs	r2, r3
    1fd4:	2304      	movs	r3, #4
    1fd6:	4013      	ands	r3, r2
    1fd8:	d023      	beq.n	2022 <STACK_SIZE+0x22>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg &
    1fda:	68fb      	ldr	r3, [r7, #12]
    1fdc:	8b5b      	ldrh	r3, [r3, #26]
    1fde:	b29b      	uxth	r3, r3
    1fe0:	b2da      	uxtb	r2, r3
    1fe2:	230b      	movs	r3, #11
    1fe4:	18fb      	adds	r3, r7, r3
    1fe6:	2106      	movs	r1, #6
    1fe8:	400a      	ands	r2, r1
    1fea:	701a      	strb	r2, [r3, #0]
		(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error) 
    1fec:	230b      	movs	r3, #11
    1fee:	18fb      	adds	r3, r7, r3
    1ff0:	781b      	ldrb	r3, [r3, #0]
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d006      	beq.n	2004 <STACK_SIZE+0x4>
		{
			usart_hw->STATUS.reg = rx_error;
    1ff6:	230b      	movs	r3, #11
    1ff8:	18fb      	adds	r3, r7, r3
    1ffa:	781b      	ldrb	r3, [r3, #0]
    1ffc:	b29a      	uxth	r2, r3
    1ffe:	68fb      	ldr	r3, [r7, #12]
    2000:	835a      	strh	r2, [r3, #26]
		{
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
		}
	}
}
    2002:	e00e      	b.n	2022 <STACK_SIZE+0x22>
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2004:	68fb      	ldr	r3, [r7, #12]
    2006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2008:	b29b      	uxth	r3, r3
    200a:	b2da      	uxtb	r2, r3
    200c:	230a      	movs	r3, #10
    200e:	18fb      	adds	r3, r7, r3
    2010:	701a      	strb	r2, [r3, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
    2012:	4b07      	ldr	r3, [pc, #28]	; (2030 <STACK_SIZE+0x30>)
    2014:	6818      	ldr	r0, [r3, #0]
    2016:	230a      	movs	r3, #10
    2018:	18f9      	adds	r1, r7, r3
    201a:	2300      	movs	r3, #0
    201c:	2200      	movs	r2, #0
    201e:	4c05      	ldr	r4, [pc, #20]	; (2034 <STACK_SIZE+0x34>)
    2020:	47a0      	blx	r4
}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	46bd      	mov	sp, r7
    2026:	b005      	add	sp, #20
    2028:	bd90      	pop	{r4, r7, pc}
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	42001400 	.word	0x42001400
    2030:	20000220 	.word	0x20000220
    2034:	0000e451 	.word	0x0000e451

00002038 <gsm_ring_detect_pin_callback>:

static void gsm_ring_detect_pin_callback(void)
{
    2038:	b580      	push	{r7, lr}
    203a:	af00      	add	r7, sp, #0
	isRinging = port_pin_get_input_level(GSM_RING_PIN);
    203c:	2031      	movs	r0, #49	; 0x31
    203e:	4b04      	ldr	r3, [pc, #16]	; (2050 <gsm_ring_detect_pin_callback+0x18>)
    2040:	4798      	blx	r3
    2042:	0003      	movs	r3, r0
    2044:	001a      	movs	r2, r3
    2046:	4b03      	ldr	r3, [pc, #12]	; (2054 <gsm_ring_detect_pin_callback+0x1c>)
    2048:	701a      	strb	r2, [r3, #0]
}
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	46bd      	mov	sp, r7
    204e:	bd80      	pop	{r7, pc}
    2050:	00001d15 	.word	0x00001d15
    2054:	2000021c 	.word	0x2000021c

00002058 <gsm_init>:

void gsm_init(void)	
{
    2058:	b590      	push	{r4, r7, lr}
    205a:	b097      	sub	sp, #92	; 0x5c
    205c:	af02      	add	r7, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
    205e:	234c      	movs	r3, #76	; 0x4c
    2060:	18fb      	adds	r3, r7, r3
    2062:	0018      	movs	r0, r3
    2064:	4b4d      	ldr	r3, [pc, #308]	; (219c <gsm_init+0x144>)
    2066:	4798      	blx	r3
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
    2068:	234c      	movs	r3, #76	; 0x4c
    206a:	18fb      	adds	r3, r7, r3
    206c:	2201      	movs	r2, #1
    206e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
    2070:	234c      	movs	r3, #76	; 0x4c
    2072:	18fb      	adds	r3, r7, r3
    2074:	0019      	movs	r1, r3
    2076:	2014      	movs	r0, #20
    2078:	4b49      	ldr	r3, [pc, #292]	; (21a0 <gsm_init+0x148>)
    207a:	4798      	blx	r3
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
    207c:	2100      	movs	r1, #0
    207e:	2014      	movs	r0, #20
    2080:	4b48      	ldr	r3, [pc, #288]	; (21a4 <gsm_init+0x14c>)
    2082:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    2084:	2340      	movs	r3, #64	; 0x40
    2086:	18fb      	adds	r3, r7, r3
    2088:	0018      	movs	r0, r3
    208a:	4b47      	ldr	r3, [pc, #284]	; (21a8 <gsm_init+0x150>)
    208c:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
    208e:	2340      	movs	r3, #64	; 0x40
    2090:	18fb      	adds	r3, r7, r3
    2092:	2231      	movs	r2, #49	; 0x31
    2094:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
    2096:	2340      	movs	r3, #64	; 0x40
    2098:	18fb      	adds	r3, r7, r3
    209a:	2200      	movs	r2, #0
    209c:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    209e:	2340      	movs	r3, #64	; 0x40
    20a0:	18fb      	adds	r3, r7, r3
    20a2:	2201      	movs	r2, #1
    20a4:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    20a6:	2340      	movs	r3, #64	; 0x40
    20a8:	18fb      	adds	r3, r7, r3
    20aa:	2203      	movs	r2, #3
    20ac:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
    20ae:	2340      	movs	r3, #64	; 0x40
    20b0:	18fb      	adds	r3, r7, r3
    20b2:	0019      	movs	r1, r3
    20b4:	2001      	movs	r0, #1
    20b6:	4b3d      	ldr	r3, [pc, #244]	; (21ac <gsm_init+0x154>)
    20b8:	4798      	blx	r3
		
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    20ba:	2100      	movs	r1, #0
    20bc:	2001      	movs	r0, #1
    20be:	4b3c      	ldr	r3, [pc, #240]	; (21b0 <gsm_init+0x158>)
    20c0:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    20c2:	4b3c      	ldr	r3, [pc, #240]	; (21b4 <gsm_init+0x15c>)
    20c4:	2200      	movs	r2, #0
    20c6:	2101      	movs	r1, #1
    20c8:	0018      	movs	r0, r3
    20ca:	4b3b      	ldr	r3, [pc, #236]	; (21b8 <gsm_init+0x160>)
    20cc:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
    20ce:	2200      	movs	r2, #0
    20d0:	2101      	movs	r1, #1
    20d2:	20f0      	movs	r0, #240	; 0xf0
    20d4:	4b39      	ldr	r3, [pc, #228]	; (21bc <gsm_init+0x164>)
    20d6:	4798      	blx	r3
    20d8:	0002      	movs	r2, r0
    20da:	4b39      	ldr	r3, [pc, #228]	; (21c0 <gsm_init+0x168>)
    20dc:	601a      	str	r2, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
    20de:	4939      	ldr	r1, [pc, #228]	; (21c4 <gsm_init+0x16c>)
    20e0:	4839      	ldr	r0, [pc, #228]	; (21c8 <gsm_init+0x170>)
    20e2:	4b3a      	ldr	r3, [pc, #232]	; (21cc <gsm_init+0x174>)
    20e4:	9300      	str	r3, [sp, #0]
    20e6:	2300      	movs	r3, #0
    20e8:	2200      	movs	r2, #0
    20ea:	4c39      	ldr	r4, [pc, #228]	; (21d0 <gsm_init+0x178>)
    20ec:	47a0      	blx	r4
    20ee:	0002      	movs	r2, r0
    20f0:	4b38      	ldr	r3, [pc, #224]	; (21d4 <gsm_init+0x17c>)
    20f2:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
    20f4:	2203      	movs	r2, #3
    20f6:	2100      	movs	r1, #0
    20f8:	2001      	movs	r0, #1
    20fa:	4b30      	ldr	r3, [pc, #192]	; (21bc <gsm_init+0x164>)
    20fc:	4798      	blx	r3
    20fe:	0002      	movs	r2, r0
    2100:	4b35      	ldr	r3, [pc, #212]	; (21d8 <gsm_init+0x180>)
    2102:	601a      	str	r2, [r3, #0]
    2104:	4b34      	ldr	r3, [pc, #208]	; (21d8 <gsm_init+0x180>)
    2106:	681b      	ldr	r3, [r3, #0]
    2108:	2b00      	cmp	r3, #0
    210a:	d006      	beq.n	211a <gsm_init+0xc2>
    210c:	4b32      	ldr	r3, [pc, #200]	; (21d8 <gsm_init+0x180>)
    210e:	6818      	ldr	r0, [r3, #0]
    2110:	2300      	movs	r3, #0
    2112:	2200      	movs	r2, #0
    2114:	2100      	movs	r1, #0
    2116:	4c31      	ldr	r4, [pc, #196]	; (21dc <gsm_init+0x184>)
    2118:	47a0      	blx	r4
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    211a:	003b      	movs	r3, r7
    211c:	0018      	movs	r0, r3
    211e:	4b30      	ldr	r3, [pc, #192]	; (21e0 <gsm_init+0x188>)
    2120:	4798      	blx	r3
	config_usart.baudrate		= GSM_BAUDRATE;
    2122:	003b      	movs	r3, r7
    2124:	22e1      	movs	r2, #225	; 0xe1
    2126:	0252      	lsls	r2, r2, #9
    2128:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
    212a:	003b      	movs	r3, r7
    212c:	2280      	movs	r2, #128	; 0x80
    212e:	0352      	lsls	r2, r2, #13
    2130:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
    2132:	003b      	movs	r3, r7
    2134:	4a2b      	ldr	r2, [pc, #172]	; (21e4 <gsm_init+0x18c>)
    2136:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
    2138:	003b      	movs	r3, r7
    213a:	4a2b      	ldr	r2, [pc, #172]	; (21e8 <gsm_init+0x190>)
    213c:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
    213e:	003b      	movs	r3, r7
    2140:	2201      	movs	r2, #1
    2142:	4252      	negs	r2, r2
    2144:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
    2146:	003b      	movs	r3, r7
    2148:	2201      	movs	r2, #1
    214a:	4252      	negs	r2, r2
    214c:	63da      	str	r2, [r3, #60]	; 0x3c
	config_usart.run_in_standby = true;
    214e:	003b      	movs	r3, r7
    2150:	222c      	movs	r2, #44	; 0x2c
    2152:	2101      	movs	r1, #1
    2154:	5499      	strb	r1, [r3, r2]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
    2156:	e003      	b.n	2160 <gsm_init+0x108>
	{
		usart_reset(&gsm_usart);
    2158:	4b24      	ldr	r3, [pc, #144]	; (21ec <gsm_init+0x194>)
    215a:	0018      	movs	r0, r3
    215c:	4b24      	ldr	r3, [pc, #144]	; (21f0 <gsm_init+0x198>)
    215e:	4798      	blx	r3
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
    2160:	003a      	movs	r2, r7
    2162:	4924      	ldr	r1, [pc, #144]	; (21f4 <gsm_init+0x19c>)
    2164:	4b21      	ldr	r3, [pc, #132]	; (21ec <gsm_init+0x194>)
    2166:	0018      	movs	r0, r3
    2168:	4b23      	ldr	r3, [pc, #140]	; (21f8 <gsm_init+0x1a0>)
    216a:	4798      	blx	r3
    216c:	1e03      	subs	r3, r0, #0
    216e:	d1f3      	bne.n	2158 <gsm_init+0x100>
	}
	usart_enable(&gsm_usart);
    2170:	4b1e      	ldr	r3, [pc, #120]	; (21ec <gsm_init+0x194>)
    2172:	0018      	movs	r0, r3
    2174:	4b21      	ldr	r3, [pc, #132]	; (21fc <gsm_init+0x1a4>)
    2176:	4798      	blx	r3
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
    2178:	4b1e      	ldr	r3, [pc, #120]	; (21f4 <gsm_init+0x19c>)
    217a:	0018      	movs	r0, r3
    217c:	4b20      	ldr	r3, [pc, #128]	; (2200 <gsm_init+0x1a8>)
    217e:	4798      	blx	r3
    2180:	0003      	movs	r3, r0
    2182:	001a      	movs	r2, r3
    2184:	4b1f      	ldr	r3, [pc, #124]	; (2204 <gsm_init+0x1ac>)
    2186:	0019      	movs	r1, r3
    2188:	0010      	movs	r0, r2
    218a:	4b1f      	ldr	r3, [pc, #124]	; (2208 <gsm_init+0x1b0>)
    218c:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
    218e:	4b19      	ldr	r3, [pc, #100]	; (21f4 <gsm_init+0x19c>)
    2190:	2204      	movs	r2, #4
    2192:	759a      	strb	r2, [r3, #22]
}
    2194:	46c0      	nop			; (mov r8, r8)
    2196:	46bd      	mov	sp, r7
    2198:	b015      	add	sp, #84	; 0x54
    219a:	bd90      	pop	{r4, r7, pc}
    219c:	00001cf1 	.word	0x00001cf1
    21a0:	00011ee9 	.word	0x00011ee9
    21a4:	00001d59 	.word	0x00001d59
    21a8:	0000d03d 	.word	0x0000d03d
    21ac:	0000d071 	.word	0x0000d071
    21b0:	000113d9 	.word	0x000113d9
    21b4:	00002039 	.word	0x00002039
    21b8:	00011375 	.word	0x00011375
    21bc:	0000e1b5 	.word	0x0000e1b5
    21c0:	20000220 	.word	0x20000220
    21c4:	00001388 	.word	0x00001388
    21c8:	00018974 	.word	0x00018974
    21cc:	00001f79 	.word	0x00001f79
    21d0:	0000fd81 	.word	0x0000fd81
    21d4:	20000224 	.word	0x20000224
    21d8:	20000228 	.word	0x20000228
    21dc:	0000e271 	.word	0x0000e271
    21e0:	00001df1 	.word	0x00001df1
    21e4:	00160002 	.word	0x00160002
    21e8:	00170002 	.word	0x00170002
    21ec:	20000690 	.word	0x20000690
    21f0:	00001f45 	.word	0x00001f45
    21f4:	42001400 	.word	0x42001400
    21f8:	000109cd 	.word	0x000109cd
    21fc:	00001eb1 	.word	0x00001eb1
    2200:	0000dc51 	.word	0x0000dc51
    2204:	00001fbd 	.word	0x00001fbd
    2208:	00011169 	.word	0x00011169

0000220c <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
    220c:	b590      	push	{r4, r7, lr}
    220e:	b08b      	sub	sp, #44	; 0x2c
    2210:	af02      	add	r7, sp, #8
    2212:	60f8      	str	r0, [r7, #12]
    2214:	60b9      	str	r1, [r7, #8]
    2216:	607a      	str	r2, [r7, #4]
    2218:	001a      	movs	r2, r3
    221a:	1cfb      	adds	r3, r7, #3
    221c:	701a      	strb	r2, [r3, #0]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
    221e:	4b64      	ldr	r3, [pc, #400]	; (23b0 <gsm_send_at_command+0x1a4>)
    2220:	681b      	ldr	r3, [r3, #0]
    2222:	2101      	movs	r1, #1
    2224:	0018      	movs	r0, r3
    2226:	4b63      	ldr	r3, [pc, #396]	; (23b4 <gsm_send_at_command+0x1a8>)
    2228:	4798      	blx	r3
    222a:	1e03      	subs	r3, r0, #0
    222c:	d101      	bne.n	2232 <gsm_send_at_command+0x26>
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
    222e:	2302      	movs	r3, #2
    2230:	e0ba      	b.n	23a8 <gsm_send_at_command+0x19c>
	/* Enable DTR and wait for the module to be ready to accept a command */
	//port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
	//vTaskDelay(100 / portTICK_PERIOD_MS);
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
    2232:	4b61      	ldr	r3, [pc, #388]	; (23b8 <gsm_send_at_command+0x1ac>)
    2234:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
    2236:	231f      	movs	r3, #31
    2238:	18fb      	adds	r3, r7, r3
    223a:	2200      	movs	r2, #0
    223c:	701a      	strb	r2, [r3, #0]
	
	uint8_t u8tRx_Index=0;
    223e:	231e      	movs	r3, #30
    2240:	18fb      	adds	r3, r7, r3
    2242:	2200      	movs	r2, #0
    2244:	701a      	strb	r2, [r3, #0]
	char u8tTemp_Char=0;
    2246:	2313      	movs	r3, #19
    2248:	18fb      	adds	r3, r7, r3
    224a:	2200      	movs	r2, #0
    224c:	701a      	strb	r2, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
    224e:	2101      	movs	r1, #1
    2250:	20f0      	movs	r0, #240	; 0xf0
    2252:	4b5a      	ldr	r3, [pc, #360]	; (23bc <gsm_send_at_command+0x1b0>)
    2254:	4798      	blx	r3
    2256:	0003      	movs	r3, r0
    2258:	61bb      	str	r3, [r7, #24]
	
	//buffer created???
	if (aDataBuffer == NULL)
    225a:	69bb      	ldr	r3, [r7, #24]
    225c:	2b00      	cmp	r3, #0
    225e:	d101      	bne.n	2264 <gsm_send_at_command+0x58>
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
    2260:	2300      	movs	r3, #0
    2262:	e0a1      	b.n	23a8 <gsm_send_at_command+0x19c>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
    2264:	69bb      	ldr	r3, [r7, #24]
    2266:	22f0      	movs	r2, #240	; 0xf0
    2268:	2100      	movs	r1, #0
    226a:	0018      	movs	r0, r3
    226c:	4b54      	ldr	r3, [pc, #336]	; (23c0 <gsm_send_at_command+0x1b4>)
    226e:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));	
    2270:	68fb      	ldr	r3, [r7, #12]
    2272:	0018      	movs	r0, r3
    2274:	4b53      	ldr	r3, [pc, #332]	; (23c4 <gsm_send_at_command+0x1b8>)
    2276:	4798      	blx	r3
    2278:	0003      	movs	r3, r0
    227a:	b29a      	uxth	r2, r3
    227c:	68f9      	ldr	r1, [r7, #12]
    227e:	4b52      	ldr	r3, [pc, #328]	; (23c8 <gsm_send_at_command+0x1bc>)
    2280:	0018      	movs	r0, r3
    2282:	4b52      	ldr	r3, [pc, #328]	; (23cc <gsm_send_at_command+0x1c0>)
    2284:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
    2286:	4b52      	ldr	r3, [pc, #328]	; (23d0 <gsm_send_at_command+0x1c4>)
    2288:	6818      	ldr	r0, [r3, #0]
    228a:	687a      	ldr	r2, [r7, #4]
    228c:	2301      	movs	r3, #1
    228e:	425b      	negs	r3, r3
    2290:	9300      	str	r3, [sp, #0]
    2292:	2300      	movs	r3, #0
    2294:	2104      	movs	r1, #4
    2296:	4c4f      	ldr	r4, [pc, #316]	; (23d4 <gsm_send_at_command+0x1c8>)
    2298:	47a0      	blx	r4
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
    229a:	4b4d      	ldr	r3, [pc, #308]	; (23d0 <gsm_send_at_command+0x1c4>)
    229c:	681b      	ldr	r3, [r3, #0]
    229e:	0018      	movs	r0, r3
    22a0:	4b4d      	ldr	r3, [pc, #308]	; (23d8 <gsm_send_at_command+0x1cc>)
    22a2:	4798      	blx	r3
    22a4:	1e03      	subs	r3, r0, #0
    22a6:	d03e      	beq.n	2326 <gsm_send_at_command+0x11a>
		{
			if (u8tRx_Index<240)
    22a8:	231e      	movs	r3, #30
    22aa:	18fb      	adds	r3, r7, r3
    22ac:	781b      	ldrb	r3, [r3, #0]
    22ae:	2bef      	cmp	r3, #239	; 0xef
    22b0:	d81c      	bhi.n	22ec <gsm_send_at_command+0xe0>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
    22b2:	4b4a      	ldr	r3, [pc, #296]	; (23dc <gsm_send_at_command+0x1d0>)
    22b4:	681b      	ldr	r3, [r3, #0]
    22b6:	2213      	movs	r2, #19
    22b8:	18b9      	adds	r1, r7, r2
    22ba:	2200      	movs	r2, #0
    22bc:	0018      	movs	r0, r3
    22be:	4b48      	ldr	r3, [pc, #288]	; (23e0 <gsm_send_at_command+0x1d4>)
    22c0:	4798      	blx	r3
    22c2:	0003      	movs	r3, r0
    22c4:	617b      	str	r3, [r7, #20]
				if(xStatus!=errQUEUE_EMPTY)
    22c6:	697b      	ldr	r3, [r7, #20]
    22c8:	2b00      	cmp	r3, #0
    22ca:	d00f      	beq.n	22ec <gsm_send_at_command+0xe0>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
    22cc:	231e      	movs	r3, #30
    22ce:	18fb      	adds	r3, r7, r3
    22d0:	781b      	ldrb	r3, [r3, #0]
    22d2:	69ba      	ldr	r2, [r7, #24]
    22d4:	18d3      	adds	r3, r2, r3
    22d6:	2213      	movs	r2, #19
    22d8:	18ba      	adds	r2, r7, r2
    22da:	7812      	ldrb	r2, [r2, #0]
    22dc:	701a      	strb	r2, [r3, #0]
					u8tRx_Index++;
    22de:	231e      	movs	r3, #30
    22e0:	18fb      	adds	r3, r7, r3
    22e2:	781a      	ldrb	r2, [r3, #0]
    22e4:	231e      	movs	r3, #30
    22e6:	18fb      	adds	r3, r7, r3
    22e8:	3201      	adds	r2, #1
    22ea:	701a      	strb	r2, [r3, #0]
				}
			}
			if (aResponExit != NULL)
    22ec:	68bb      	ldr	r3, [r7, #8]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d00c      	beq.n	230c <gsm_send_at_command+0x100>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
    22f2:	68ba      	ldr	r2, [r7, #8]
    22f4:	69bb      	ldr	r3, [r7, #24]
    22f6:	0011      	movs	r1, r2
    22f8:	0018      	movs	r0, r3
    22fa:	4b3a      	ldr	r3, [pc, #232]	; (23e4 <gsm_send_at_command+0x1d8>)
    22fc:	4798      	blx	r3
    22fe:	1e03      	subs	r3, r0, #0
    2300:	d004      	beq.n	230c <gsm_send_at_command+0x100>
				{
					err_no = GSM_ERROR_NONE;
    2302:	231f      	movs	r3, #31
    2304:	18fb      	adds	r3, r7, r3
    2306:	2200      	movs	r2, #0
    2308:	701a      	strb	r2, [r3, #0]
					break;
    230a:	e024      	b.n	2356 <gsm_send_at_command+0x14a>
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
    230c:	4a36      	ldr	r2, [pc, #216]	; (23e8 <gsm_send_at_command+0x1dc>)
    230e:	69bb      	ldr	r3, [r7, #24]
    2310:	0011      	movs	r1, r2
    2312:	0018      	movs	r0, r3
    2314:	4b33      	ldr	r3, [pc, #204]	; (23e4 <gsm_send_at_command+0x1d8>)
    2316:	4798      	blx	r3
    2318:	1e03      	subs	r3, r0, #0
    231a:	d0be      	beq.n	229a <gsm_send_at_command+0x8e>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
    231c:	231f      	movs	r3, #31
    231e:	18fb      	adds	r3, r7, r3
    2320:	220b      	movs	r2, #11
    2322:	701a      	strb	r2, [r3, #0]
				break;
    2324:	e017      	b.n	2356 <gsm_send_at_command+0x14a>
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
    2326:	4b2a      	ldr	r3, [pc, #168]	; (23d0 <gsm_send_at_command+0x1c4>)
    2328:	6818      	ldr	r0, [r3, #0]
    232a:	2301      	movs	r3, #1
    232c:	425b      	negs	r3, r3
    232e:	9300      	str	r3, [sp, #0]
    2330:	2300      	movs	r3, #0
    2332:	2200      	movs	r2, #0
    2334:	2103      	movs	r1, #3
    2336:	4c27      	ldr	r4, [pc, #156]	; (23d4 <gsm_send_at_command+0x1c8>)
    2338:	47a0      	blx	r4
			if (u8tRx_Index==0)
    233a:	231e      	movs	r3, #30
    233c:	18fb      	adds	r3, r7, r3
    233e:	781b      	ldrb	r3, [r3, #0]
    2340:	2b00      	cmp	r3, #0
    2342:	d104      	bne.n	234e <gsm_send_at_command+0x142>
			{
				err_no = GSM_ERROR_TIMEOUT;
    2344:	231f      	movs	r3, #31
    2346:	18fb      	adds	r3, r7, r3
    2348:	2207      	movs	r2, #7
    234a:	701a      	strb	r2, [r3, #0]
				break;
    234c:	e003      	b.n	2356 <gsm_send_at_command+0x14a>
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
    234e:	231f      	movs	r3, #31
    2350:	18fb      	adds	r3, r7, r3
    2352:	2208      	movs	r2, #8
    2354:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
    2356:	1cfb      	adds	r3, r7, #3
    2358:	781b      	ldrb	r3, [r3, #0]
    235a:	2b00      	cmp	r3, #0
    235c:	d016      	beq.n	238c <gsm_send_at_command+0x180>
    235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2360:	2b00      	cmp	r3, #0
    2362:	d013      	beq.n	238c <gsm_send_at_command+0x180>
    2364:	1cfa      	adds	r2, r7, #3
    2366:	231e      	movs	r3, #30
    2368:	18fb      	adds	r3, r7, r3
    236a:	7812      	ldrb	r2, [r2, #0]
    236c:	781b      	ldrb	r3, [r3, #0]
    236e:	429a      	cmp	r2, r3
    2370:	d90c      	bls.n	238c <gsm_send_at_command+0x180>
    2372:	231f      	movs	r3, #31
    2374:	18fb      	adds	r3, r7, r3
    2376:	781b      	ldrb	r3, [r3, #0]
    2378:	2b00      	cmp	r3, #0
    237a:	d107      	bne.n	238c <gsm_send_at_command+0x180>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
    237c:	231e      	movs	r3, #30
    237e:	18fb      	adds	r3, r7, r3
    2380:	781a      	ldrb	r2, [r3, #0]
    2382:	69b9      	ldr	r1, [r7, #24]
    2384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2386:	0018      	movs	r0, r3
    2388:	4b18      	ldr	r3, [pc, #96]	; (23ec <gsm_send_at_command+0x1e0>)
    238a:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
    238c:	4b08      	ldr	r3, [pc, #32]	; (23b0 <gsm_send_at_command+0x1a4>)
    238e:	6818      	ldr	r0, [r3, #0]
    2390:	2300      	movs	r3, #0
    2392:	2200      	movs	r2, #0
    2394:	2100      	movs	r1, #0
    2396:	4c16      	ldr	r4, [pc, #88]	; (23f0 <gsm_send_at_command+0x1e4>)
    2398:	47a0      	blx	r4
	free(aDataBuffer);
    239a:	69bb      	ldr	r3, [r7, #24]
    239c:	0018      	movs	r0, r3
    239e:	4b15      	ldr	r3, [pc, #84]	; (23f4 <gsm_send_at_command+0x1e8>)
    23a0:	4798      	blx	r3
	return err_no;
    23a2:	231f      	movs	r3, #31
    23a4:	18fb      	adds	r3, r7, r3
    23a6:	781b      	ldrb	r3, [r3, #0]
}
    23a8:	0018      	movs	r0, r3
    23aa:	46bd      	mov	sp, r7
    23ac:	b009      	add	sp, #36	; 0x24
    23ae:	bd90      	pop	{r4, r7, pc}
    23b0:	20000228 	.word	0x20000228
    23b4:	0000e711 	.word	0x0000e711
    23b8:	00001f89 	.word	0x00001f89
    23bc:	00017bc9 	.word	0x00017bc9
    23c0:	00017cd7 	.word	0x00017cd7
    23c4:	00017f67 	.word	0x00017f67
    23c8:	20000690 	.word	0x20000690
    23cc:	00010ca5 	.word	0x00010ca5
    23d0:	20000224 	.word	0x20000224
    23d4:	0000fe25 	.word	0x0000fe25
    23d8:	000103a1 	.word	0x000103a1
    23dc:	20000220 	.word	0x20000220
    23e0:	0000e571 	.word	0x0000e571
    23e4:	00017f97 	.word	0x00017f97
    23e8:	00018980 	.word	0x00018980
    23ec:	00017ca1 	.word	0x00017ca1
    23f0:	0000e271 	.word	0x0000e271
    23f4:	00017c69 	.word	0x00017c69

000023f8 <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
    23f8:	b590      	push	{r4, r7, lr}
    23fa:	b083      	sub	sp, #12
    23fc:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
    23fe:	4a06      	ldr	r2, [pc, #24]	; (2418 <gsm_check_module+0x20>)
    2400:	4906      	ldr	r1, [pc, #24]	; (241c <gsm_check_module+0x24>)
    2402:	4807      	ldr	r0, [pc, #28]	; (2420 <gsm_check_module+0x28>)
    2404:	2300      	movs	r3, #0
    2406:	9300      	str	r3, [sp, #0]
    2408:	2300      	movs	r3, #0
    240a:	4c06      	ldr	r4, [pc, #24]	; (2424 <gsm_check_module+0x2c>)
    240c:	47a0      	blx	r4
    240e:	0003      	movs	r3, r0
}
    2410:	0018      	movs	r0, r3
    2412:	46bd      	mov	sp, r7
    2414:	b001      	add	sp, #4
    2416:	bd90      	pop	{r4, r7, pc}
    2418:	00001388 	.word	0x00001388
    241c:	00018988 	.word	0x00018988
    2420:	0001898c 	.word	0x0001898c
    2424:	0000220d 	.word	0x0000220d

00002428 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
    2428:	b5b0      	push	{r4, r5, r7, lr}
    242a:	b084      	sub	sp, #16
    242c:	af02      	add	r7, sp, #8
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
    242e:	1dfc      	adds	r4, r7, #7
    2430:	4a12      	ldr	r2, [pc, #72]	; (247c <gsm_is_network_registered+0x54>)
    2432:	4913      	ldr	r1, [pc, #76]	; (2480 <gsm_is_network_registered+0x58>)
    2434:	4813      	ldr	r0, [pc, #76]	; (2484 <gsm_is_network_registered+0x5c>)
    2436:	2300      	movs	r3, #0
    2438:	9300      	str	r3, [sp, #0]
    243a:	2300      	movs	r3, #0
    243c:	4d12      	ldr	r5, [pc, #72]	; (2488 <gsm_is_network_registered+0x60>)
    243e:	47a8      	blx	r5
    2440:	0003      	movs	r3, r0
    2442:	7023      	strb	r3, [r4, #0]
	if (errHomeNw==GSM_ERROR_NONE)
    2444:	1dfb      	adds	r3, r7, #7
    2446:	781b      	ldrb	r3, [r3, #0]
    2448:	2b00      	cmp	r3, #0
    244a:	d101      	bne.n	2450 <gsm_is_network_registered+0x28>
	{
		return GSM_NETWORK_REGISTERED;	
    244c:	2309      	movs	r3, #9
    244e:	e011      	b.n	2474 <gsm_is_network_registered+0x4c>
	}
	else
	{
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
    2450:	1dbc      	adds	r4, r7, #6
    2452:	4a0a      	ldr	r2, [pc, #40]	; (247c <gsm_is_network_registered+0x54>)
    2454:	490d      	ldr	r1, [pc, #52]	; (248c <gsm_is_network_registered+0x64>)
    2456:	480b      	ldr	r0, [pc, #44]	; (2484 <gsm_is_network_registered+0x5c>)
    2458:	2300      	movs	r3, #0
    245a:	9300      	str	r3, [sp, #0]
    245c:	2300      	movs	r3, #0
    245e:	4d0a      	ldr	r5, [pc, #40]	; (2488 <gsm_is_network_registered+0x60>)
    2460:	47a8      	blx	r5
    2462:	0003      	movs	r3, r0
    2464:	7023      	strb	r3, [r4, #0]
		{
			if (errRomNw==GSM_ERROR_NONE)
    2466:	1dbb      	adds	r3, r7, #6
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	2b00      	cmp	r3, #0
    246c:	d101      	bne.n	2472 <gsm_is_network_registered+0x4a>
			{
				return GSM_NETWORK_REGISTERED;
    246e:	2309      	movs	r3, #9
    2470:	e000      	b.n	2474 <gsm_is_network_registered+0x4c>
			}
			else
			{
				return GSM_NETWORK_NOT_REGISTERED;
    2472:	230a      	movs	r3, #10
			}
		}
	}
}
    2474:	0018      	movs	r0, r3
    2476:	46bd      	mov	sp, r7
    2478:	b002      	add	sp, #8
    247a:	bdb0      	pop	{r4, r5, r7, pc}
    247c:	00001388 	.word	0x00001388
    2480:	0001899c 	.word	0x0001899c
    2484:	000189a8 	.word	0x000189a8
    2488:	0000220d 	.word	0x0000220d
    248c:	000189b4 	.word	0x000189b4

00002490 <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
    2490:	b590      	push	{r4, r7, lr}
    2492:	b089      	sub	sp, #36	; 0x24
    2494:	af02      	add	r7, sp, #8
	char baurate_at_command[20]={0};
    2496:	1d3b      	adds	r3, r7, #4
    2498:	0018      	movs	r0, r3
    249a:	2314      	movs	r3, #20
    249c:	001a      	movs	r2, r3
    249e:	2100      	movs	r1, #0
    24a0:	4b0a      	ldr	r3, [pc, #40]	; (24cc <gsm_set_baudrate+0x3c>)
    24a2:	4798      	blx	r3
		
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
    24a4:	23e1      	movs	r3, #225	; 0xe1
    24a6:	025a      	lsls	r2, r3, #9
    24a8:	4909      	ldr	r1, [pc, #36]	; (24d0 <gsm_set_baudrate+0x40>)
    24aa:	1d3b      	adds	r3, r7, #4
    24ac:	0018      	movs	r0, r3
    24ae:	4b09      	ldr	r3, [pc, #36]	; (24d4 <gsm_set_baudrate+0x44>)
    24b0:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
    24b2:	4a09      	ldr	r2, [pc, #36]	; (24d8 <gsm_set_baudrate+0x48>)
    24b4:	4909      	ldr	r1, [pc, #36]	; (24dc <gsm_set_baudrate+0x4c>)
    24b6:	1d38      	adds	r0, r7, #4
    24b8:	2300      	movs	r3, #0
    24ba:	9300      	str	r3, [sp, #0]
    24bc:	2300      	movs	r3, #0
    24be:	4c08      	ldr	r4, [pc, #32]	; (24e0 <gsm_set_baudrate+0x50>)
    24c0:	47a0      	blx	r4
    24c2:	0003      	movs	r3, r0
}
    24c4:	0018      	movs	r0, r3
    24c6:	46bd      	mov	sp, r7
    24c8:	b007      	add	sp, #28
    24ca:	bd90      	pop	{r4, r7, pc}
    24cc:	00017cd7 	.word	0x00017cd7
    24d0:	000189c0 	.word	0x000189c0
    24d4:	00017edd 	.word	0x00017edd
    24d8:	00001388 	.word	0x00001388
    24dc:	00018988 	.word	0x00018988
    24e0:	0000220d 	.word	0x0000220d

000024e4 <gsm_detect_simcard>:
{
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
    24e4:	b590      	push	{r4, r7, lr}
    24e6:	b083      	sub	sp, #12
    24e8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
    24ea:	4a06      	ldr	r2, [pc, #24]	; (2504 <gsm_detect_simcard+0x20>)
    24ec:	4906      	ldr	r1, [pc, #24]	; (2508 <gsm_detect_simcard+0x24>)
    24ee:	4807      	ldr	r0, [pc, #28]	; (250c <gsm_detect_simcard+0x28>)
    24f0:	2300      	movs	r3, #0
    24f2:	9300      	str	r3, [sp, #0]
    24f4:	2300      	movs	r3, #0
    24f6:	4c06      	ldr	r4, [pc, #24]	; (2510 <gsm_detect_simcard+0x2c>)
    24f8:	47a0      	blx	r4
    24fa:	0003      	movs	r3, r0
}
    24fc:	0018      	movs	r0, r3
    24fe:	46bd      	mov	sp, r7
    2500:	b001      	add	sp, #4
    2502:	bd90      	pop	{r4, r7, pc}
    2504:	00001388 	.word	0x00001388
    2508:	00018a30 	.word	0x00018a30
    250c:	00018a40 	.word	0x00018a40
    2510:	0000220d 	.word	0x0000220d

00002514 <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
    2514:	b590      	push	{r4, r7, lr}
    2516:	b083      	sub	sp, #12
    2518:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
    251a:	4a06      	ldr	r2, [pc, #24]	; (2534 <gsm_delete_all_sms+0x20>)
    251c:	4906      	ldr	r1, [pc, #24]	; (2538 <gsm_delete_all_sms+0x24>)
    251e:	4807      	ldr	r0, [pc, #28]	; (253c <gsm_delete_all_sms+0x28>)
    2520:	2300      	movs	r3, #0
    2522:	9300      	str	r3, [sp, #0]
    2524:	2300      	movs	r3, #0
    2526:	4c06      	ldr	r4, [pc, #24]	; (2540 <gsm_delete_all_sms+0x2c>)
    2528:	47a0      	blx	r4
    252a:	0003      	movs	r3, r0
}
    252c:	0018      	movs	r0, r3
    252e:	46bd      	mov	sp, r7
    2530:	b001      	add	sp, #4
    2532:	bd90      	pop	{r4, r7, pc}
    2534:	000061a8 	.word	0x000061a8
    2538:	00018988 	.word	0x00018988
    253c:	00018a4c 	.word	0x00018a4c
    2540:	0000220d 	.word	0x0000220d

00002544 <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
    2544:	b590      	push	{r4, r7, lr}
    2546:	b083      	sub	sp, #12
    2548:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
    254a:	4a06      	ldr	r2, [pc, #24]	; (2564 <gsm_store_active_profile+0x20>)
    254c:	4906      	ldr	r1, [pc, #24]	; (2568 <gsm_store_active_profile+0x24>)
    254e:	4807      	ldr	r0, [pc, #28]	; (256c <gsm_store_active_profile+0x28>)
    2550:	2300      	movs	r3, #0
    2552:	9300      	str	r3, [sp, #0]
    2554:	2300      	movs	r3, #0
    2556:	4c06      	ldr	r4, [pc, #24]	; (2570 <gsm_store_active_profile+0x2c>)
    2558:	47a0      	blx	r4
    255a:	0003      	movs	r3, r0
}
    255c:	0018      	movs	r0, r3
    255e:	46bd      	mov	sp, r7
    2560:	b001      	add	sp, #4
    2562:	bd90      	pop	{r4, r7, pc}
    2564:	00001388 	.word	0x00001388
    2568:	00018988 	.word	0x00018988
    256c:	00018a60 	.word	0x00018a60
    2570:	0000220d 	.word	0x0000220d

00002574 <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
    2574:	b590      	push	{r4, r7, lr}
    2576:	b083      	sub	sp, #12
    2578:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
    257a:	4a06      	ldr	r2, [pc, #24]	; (2594 <gsm_enable_calling_line_identification+0x20>)
    257c:	4906      	ldr	r1, [pc, #24]	; (2598 <gsm_enable_calling_line_identification+0x24>)
    257e:	4807      	ldr	r0, [pc, #28]	; (259c <gsm_enable_calling_line_identification+0x28>)
    2580:	2300      	movs	r3, #0
    2582:	9300      	str	r3, [sp, #0]
    2584:	2300      	movs	r3, #0
    2586:	4c06      	ldr	r4, [pc, #24]	; (25a0 <gsm_enable_calling_line_identification+0x2c>)
    2588:	47a0      	blx	r4
    258a:	0003      	movs	r3, r0
}
    258c:	0018      	movs	r0, r3
    258e:	46bd      	mov	sp, r7
    2590:	b001      	add	sp, #4
    2592:	bd90      	pop	{r4, r7, pc}
    2594:	00003a98 	.word	0x00003a98
    2598:	00018988 	.word	0x00018988
    259c:	00018a68 	.word	0x00018a68
    25a0:	0000220d 	.word	0x0000220d

000025a4 <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
    25a4:	b590      	push	{r4, r7, lr}
    25a6:	b083      	sub	sp, #12
    25a8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    25aa:	4a06      	ldr	r2, [pc, #24]	; (25c4 <gsm_enable_connected_line_identification_presentation+0x20>)
    25ac:	4906      	ldr	r1, [pc, #24]	; (25c8 <gsm_enable_connected_line_identification_presentation+0x24>)
    25ae:	4807      	ldr	r0, [pc, #28]	; (25cc <gsm_enable_connected_line_identification_presentation+0x28>)
    25b0:	2300      	movs	r3, #0
    25b2:	9300      	str	r3, [sp, #0]
    25b4:	2300      	movs	r3, #0
    25b6:	4c06      	ldr	r4, [pc, #24]	; (25d0 <gsm_enable_connected_line_identification_presentation+0x2c>)
    25b8:	47a0      	blx	r4
    25ba:	0003      	movs	r3, r0
}
    25bc:	0018      	movs	r0, r3
    25be:	46bd      	mov	sp, r7
    25c0:	b001      	add	sp, #4
    25c2:	bd90      	pop	{r4, r7, pc}
    25c4:	00001388 	.word	0x00001388
    25c8:	00018988 	.word	0x00018988
    25cc:	00018a74 	.word	0x00018a74
    25d0:	0000220d 	.word	0x0000220d

000025d4 <gsm_enable_list_current_calls_of_ME>:
	}
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
    25d4:	b590      	push	{r4, r7, lr}
    25d6:	b083      	sub	sp, #12
    25d8:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    25da:	4a06      	ldr	r2, [pc, #24]	; (25f4 <gsm_enable_list_current_calls_of_ME+0x20>)
    25dc:	4906      	ldr	r1, [pc, #24]	; (25f8 <gsm_enable_list_current_calls_of_ME+0x24>)
    25de:	4807      	ldr	r0, [pc, #28]	; (25fc <gsm_enable_list_current_calls_of_ME+0x28>)
    25e0:	2300      	movs	r3, #0
    25e2:	9300      	str	r3, [sp, #0]
    25e4:	2300      	movs	r3, #0
    25e6:	4c06      	ldr	r4, [pc, #24]	; (2600 <gsm_enable_list_current_calls_of_ME+0x2c>)
    25e8:	47a0      	blx	r4
    25ea:	0003      	movs	r3, r0
}
    25ec:	0018      	movs	r0, r3
    25ee:	46bd      	mov	sp, r7
    25f0:	b001      	add	sp, #4
    25f2:	bd90      	pop	{r4, r7, pc}
    25f4:	00001388 	.word	0x00001388
    25f8:	00018988 	.word	0x00018988
    25fc:	00018aa8 	.word	0x00018aa8
    2600:	0000220d 	.word	0x0000220d

00002604 <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
    2604:	b590      	push	{r4, r7, lr}
    2606:	b083      	sub	sp, #12
    2608:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
    260a:	4a06      	ldr	r2, [pc, #24]	; (2624 <gsm_factory_reset+0x20>)
    260c:	4906      	ldr	r1, [pc, #24]	; (2628 <gsm_factory_reset+0x24>)
    260e:	4807      	ldr	r0, [pc, #28]	; (262c <gsm_factory_reset+0x28>)
    2610:	2300      	movs	r3, #0
    2612:	9300      	str	r3, [sp, #0]
    2614:	2300      	movs	r3, #0
    2616:	4c06      	ldr	r4, [pc, #24]	; (2630 <gsm_factory_reset+0x2c>)
    2618:	47a0      	blx	r4
    261a:	0003      	movs	r3, r0
}
    261c:	0018      	movs	r0, r3
    261e:	46bd      	mov	sp, r7
    2620:	b001      	add	sp, #4
    2622:	bd90      	pop	{r4, r7, pc}
    2624:	00003a98 	.word	0x00003a98
    2628:	00018988 	.word	0x00018988
    262c:	00018ab4 	.word	0x00018ab4
    2630:	0000220d 	.word	0x0000220d

00002634 <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
    2634:	b590      	push	{r4, r7, lr}
    2636:	b083      	sub	sp, #12
    2638:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
    263a:	4a06      	ldr	r2, [pc, #24]	; (2654 <gsm_echo_off+0x20>)
    263c:	4906      	ldr	r1, [pc, #24]	; (2658 <gsm_echo_off+0x24>)
    263e:	4807      	ldr	r0, [pc, #28]	; (265c <gsm_echo_off+0x28>)
    2640:	2300      	movs	r3, #0
    2642:	9300      	str	r3, [sp, #0]
    2644:	2300      	movs	r3, #0
    2646:	4c06      	ldr	r4, [pc, #24]	; (2660 <gsm_echo_off+0x2c>)
    2648:	47a0      	blx	r4
    264a:	0003      	movs	r3, r0
}
    264c:	0018      	movs	r0, r3
    264e:	46bd      	mov	sp, r7
    2650:	b001      	add	sp, #4
    2652:	bd90      	pop	{r4, r7, pc}
    2654:	00001388 	.word	0x00001388
    2658:	00018988 	.word	0x00018988
    265c:	00018abc 	.word	0x00018abc
    2660:	0000220d 	.word	0x0000220d

00002664 <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
    2664:	b590      	push	{r4, r7, lr}
    2666:	b083      	sub	sp, #12
    2668:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    266a:	4a06      	ldr	r2, [pc, #24]	; (2684 <gsm_select_sms_message_formate_text_mode+0x20>)
    266c:	4906      	ldr	r1, [pc, #24]	; (2688 <gsm_select_sms_message_formate_text_mode+0x24>)
    266e:	4807      	ldr	r0, [pc, #28]	; (268c <gsm_select_sms_message_formate_text_mode+0x28>)
    2670:	2300      	movs	r3, #0
    2672:	9300      	str	r3, [sp, #0]
    2674:	2300      	movs	r3, #0
    2676:	4c06      	ldr	r4, [pc, #24]	; (2690 <gsm_select_sms_message_formate_text_mode+0x2c>)
    2678:	47a0      	blx	r4
    267a:	0003      	movs	r3, r0
}
    267c:	0018      	movs	r0, r3
    267e:	46bd      	mov	sp, r7
    2680:	b001      	add	sp, #4
    2682:	bd90      	pop	{r4, r7, pc}
    2684:	00001388 	.word	0x00001388
    2688:	00018988 	.word	0x00018988
    268c:	00018ac4 	.word	0x00018ac4
    2690:	0000220d 	.word	0x0000220d

00002694 <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
    2694:	b590      	push	{r4, r7, lr}
    2696:	b083      	sub	sp, #12
    2698:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
    269a:	4a06      	ldr	r2, [pc, #24]	; (26b4 <gsm_set_sms_text_mode_parameter+0x20>)
    269c:	4906      	ldr	r1, [pc, #24]	; (26b8 <gsm_set_sms_text_mode_parameter+0x24>)
    269e:	4807      	ldr	r0, [pc, #28]	; (26bc <gsm_set_sms_text_mode_parameter+0x28>)
    26a0:	2300      	movs	r3, #0
    26a2:	9300      	str	r3, [sp, #0]
    26a4:	2300      	movs	r3, #0
    26a6:	4c06      	ldr	r4, [pc, #24]	; (26c0 <gsm_set_sms_text_mode_parameter+0x2c>)
    26a8:	47a0      	blx	r4
    26aa:	0003      	movs	r3, r0
}
    26ac:	0018      	movs	r0, r3
    26ae:	46bd      	mov	sp, r7
    26b0:	b001      	add	sp, #4
    26b2:	bd90      	pop	{r4, r7, pc}
    26b4:	00001b58 	.word	0x00001b58
    26b8:	00018988 	.word	0x00018988
    26bc:	00018ad0 	.word	0x00018ad0
    26c0:	0000220d 	.word	0x0000220d

000026c4 <gsm_getsignalstrength>:
 20--25   4
 26--31   5
 
 */
uint8_t gsm_getsignalstrength(void)
{
    26c4:	b5b0      	push	{r4, r5, r7, lr}
    26c6:	b088      	sub	sp, #32
    26c8:	af02      	add	r7, sp, #8
	
	uint8_t sig_strength;
	
	const uint8_t MAX_BUFFER = 100;
    26ca:	2316      	movs	r3, #22
    26cc:	18fb      	adds	r3, r7, r3
    26ce:	2264      	movs	r2, #100	; 0x64
    26d0:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    26d2:	2316      	movs	r3, #22
    26d4:	18fb      	adds	r3, r7, r3
    26d6:	781b      	ldrb	r3, [r3, #0]
    26d8:	2101      	movs	r1, #1
    26da:	0018      	movs	r0, r3
    26dc:	4b60      	ldr	r3, [pc, #384]	; (2860 <gsm_getsignalstrength+0x19c>)
    26de:	4798      	blx	r3
    26e0:	0003      	movs	r3, r0
    26e2:	613b      	str	r3, [r7, #16]
	if (cmdx == NULL)
    26e4:	693b      	ldr	r3, [r7, #16]
    26e6:	2b00      	cmp	r3, #0
    26e8:	d105      	bne.n	26f6 <gsm_getsignalstrength+0x32>
	{
		free(cmdx);
    26ea:	693b      	ldr	r3, [r7, #16]
    26ec:	0018      	movs	r0, r3
    26ee:	4b5d      	ldr	r3, [pc, #372]	; (2864 <gsm_getsignalstrength+0x1a0>)
    26f0:	4798      	blx	r3
		return 0;
    26f2:	2300      	movs	r3, #0
    26f4:	e0af      	b.n	2856 <gsm_getsignalstrength+0x192>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    26f6:	2316      	movs	r3, #22
    26f8:	18fb      	adds	r3, r7, r3
    26fa:	781a      	ldrb	r2, [r3, #0]
    26fc:	693b      	ldr	r3, [r7, #16]
    26fe:	2100      	movs	r1, #0
    2700:	0018      	movs	r0, r3
    2702:	4b59      	ldr	r3, [pc, #356]	; (2868 <gsm_getsignalstrength+0x1a4>)
    2704:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
    2706:	230f      	movs	r3, #15
    2708:	18fc      	adds	r4, r7, r3
    270a:	2316      	movs	r3, #22
    270c:	18fb      	adds	r3, r7, r3
    270e:	781a      	ldrb	r2, [r3, #0]
    2710:	4d56      	ldr	r5, [pc, #344]	; (286c <gsm_getsignalstrength+0x1a8>)
    2712:	4957      	ldr	r1, [pc, #348]	; (2870 <gsm_getsignalstrength+0x1ac>)
    2714:	4857      	ldr	r0, [pc, #348]	; (2874 <gsm_getsignalstrength+0x1b0>)
    2716:	693b      	ldr	r3, [r7, #16]
    2718:	9300      	str	r3, [sp, #0]
    271a:	0013      	movs	r3, r2
    271c:	002a      	movs	r2, r5
    271e:	4d56      	ldr	r5, [pc, #344]	; (2878 <gsm_getsignalstrength+0x1b4>)
    2720:	47a8      	blx	r5
    2722:	0003      	movs	r3, r0
    2724:	7023      	strb	r3, [r4, #0]
	
	if(gsm_err == GSM_ERROR_NONE)
    2726:	230f      	movs	r3, #15
    2728:	18fb      	adds	r3, r7, r3
    272a:	781b      	ldrb	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d000      	beq.n	2732 <gsm_getsignalstrength+0x6e>
    2730:	e086      	b.n	2840 <gsm_getsignalstrength+0x17c>
	{
		if (strstr(cmdx,"99")==NULL)
    2732:	4a52      	ldr	r2, [pc, #328]	; (287c <gsm_getsignalstrength+0x1b8>)
    2734:	693b      	ldr	r3, [r7, #16]
    2736:	0011      	movs	r1, r2
    2738:	0018      	movs	r0, r3
    273a:	4b51      	ldr	r3, [pc, #324]	; (2880 <gsm_getsignalstrength+0x1bc>)
    273c:	4798      	blx	r3
    273e:	1e03      	subs	r3, r0, #0
    2740:	d000      	beq.n	2744 <gsm_getsignalstrength+0x80>
    2742:	e078      	b.n	2836 <gsm_getsignalstrength+0x172>
		{
			char *ptr_tocken;
			ptr_tocken = strtok(cmdx,":");
    2744:	4a4f      	ldr	r2, [pc, #316]	; (2884 <gsm_getsignalstrength+0x1c0>)
    2746:	693b      	ldr	r3, [r7, #16]
    2748:	0011      	movs	r1, r2
    274a:	0018      	movs	r0, r3
    274c:	4b4e      	ldr	r3, [pc, #312]	; (2888 <gsm_getsignalstrength+0x1c4>)
    274e:	4798      	blx	r3
    2750:	0003      	movs	r3, r0
    2752:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(NULL,":");
    2754:	4b4b      	ldr	r3, [pc, #300]	; (2884 <gsm_getsignalstrength+0x1c0>)
    2756:	0019      	movs	r1, r3
    2758:	2000      	movs	r0, #0
    275a:	4b4b      	ldr	r3, [pc, #300]	; (2888 <gsm_getsignalstrength+0x1c4>)
    275c:	4798      	blx	r3
    275e:	0003      	movs	r3, r0
    2760:	60bb      	str	r3, [r7, #8]
			ptr_tocken = strtok(ptr_tocken,",");
    2762:	4a4a      	ldr	r2, [pc, #296]	; (288c <gsm_getsignalstrength+0x1c8>)
    2764:	68bb      	ldr	r3, [r7, #8]
    2766:	0011      	movs	r1, r2
    2768:	0018      	movs	r0, r3
    276a:	4b47      	ldr	r3, [pc, #284]	; (2888 <gsm_getsignalstrength+0x1c4>)
    276c:	4798      	blx	r3
    276e:	0003      	movs	r3, r0
    2770:	60bb      	str	r3, [r7, #8]
			RemoveSpaces(ptr_tocken);
    2772:	68bb      	ldr	r3, [r7, #8]
    2774:	0018      	movs	r0, r3
    2776:	4b46      	ldr	r3, [pc, #280]	; (2890 <gsm_getsignalstrength+0x1cc>)
    2778:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
    277a:	68bb      	ldr	r3, [r7, #8]
    277c:	0018      	movs	r0, r3
    277e:	4b45      	ldr	r3, [pc, #276]	; (2894 <gsm_getsignalstrength+0x1d0>)
    2780:	4798      	blx	r3
    2782:	0002      	movs	r2, r0
    2784:	1dfb      	adds	r3, r7, #7
    2786:	701a      	strb	r2, [r3, #0]
			if (nw==0 || nw==1 || nw== 99)
    2788:	1dfb      	adds	r3, r7, #7
    278a:	781b      	ldrb	r3, [r3, #0]
    278c:	2b00      	cmp	r3, #0
    278e:	d007      	beq.n	27a0 <gsm_getsignalstrength+0xdc>
    2790:	1dfb      	adds	r3, r7, #7
    2792:	781b      	ldrb	r3, [r3, #0]
    2794:	2b01      	cmp	r3, #1
    2796:	d003      	beq.n	27a0 <gsm_getsignalstrength+0xdc>
    2798:	1dfb      	adds	r3, r7, #7
    279a:	781b      	ldrb	r3, [r3, #0]
    279c:	2b63      	cmp	r3, #99	; 0x63
    279e:	d104      	bne.n	27aa <gsm_getsignalstrength+0xe6>
			{
				sig_strength = 0;
    27a0:	2317      	movs	r3, #23
    27a2:	18fb      	adds	r3, r7, r3
    27a4:	2200      	movs	r2, #0
    27a6:	701a      	strb	r2, [r3, #0]
    27a8:	e04e      	b.n	2848 <gsm_getsignalstrength+0x184>
			}
			else
			{
				if (nw>=2 && nw<=7)
    27aa:	1dfb      	adds	r3, r7, #7
    27ac:	781b      	ldrb	r3, [r3, #0]
    27ae:	2b01      	cmp	r3, #1
    27b0:	d908      	bls.n	27c4 <gsm_getsignalstrength+0x100>
    27b2:	1dfb      	adds	r3, r7, #7
    27b4:	781b      	ldrb	r3, [r3, #0]
    27b6:	2b07      	cmp	r3, #7
    27b8:	d804      	bhi.n	27c4 <gsm_getsignalstrength+0x100>
				{
					sig_strength = 1;
    27ba:	2317      	movs	r3, #23
    27bc:	18fb      	adds	r3, r7, r3
    27be:	2201      	movs	r2, #1
    27c0:	701a      	strb	r2, [r3, #0]
    27c2:	e041      	b.n	2848 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=8 && nw<=13)
    27c4:	1dfb      	adds	r3, r7, #7
    27c6:	781b      	ldrb	r3, [r3, #0]
    27c8:	2b07      	cmp	r3, #7
    27ca:	d908      	bls.n	27de <gsm_getsignalstrength+0x11a>
    27cc:	1dfb      	adds	r3, r7, #7
    27ce:	781b      	ldrb	r3, [r3, #0]
    27d0:	2b0d      	cmp	r3, #13
    27d2:	d804      	bhi.n	27de <gsm_getsignalstrength+0x11a>
				{
					sig_strength = 2;
    27d4:	2317      	movs	r3, #23
    27d6:	18fb      	adds	r3, r7, r3
    27d8:	2202      	movs	r2, #2
    27da:	701a      	strb	r2, [r3, #0]
    27dc:	e034      	b.n	2848 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=14 && nw<=19)
    27de:	1dfb      	adds	r3, r7, #7
    27e0:	781b      	ldrb	r3, [r3, #0]
    27e2:	2b0d      	cmp	r3, #13
    27e4:	d908      	bls.n	27f8 <gsm_getsignalstrength+0x134>
    27e6:	1dfb      	adds	r3, r7, #7
    27e8:	781b      	ldrb	r3, [r3, #0]
    27ea:	2b13      	cmp	r3, #19
    27ec:	d804      	bhi.n	27f8 <gsm_getsignalstrength+0x134>
				{
					sig_strength = 3;
    27ee:	2317      	movs	r3, #23
    27f0:	18fb      	adds	r3, r7, r3
    27f2:	2203      	movs	r2, #3
    27f4:	701a      	strb	r2, [r3, #0]
    27f6:	e027      	b.n	2848 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=20 && nw<=25)
    27f8:	1dfb      	adds	r3, r7, #7
    27fa:	781b      	ldrb	r3, [r3, #0]
    27fc:	2b13      	cmp	r3, #19
    27fe:	d908      	bls.n	2812 <gsm_getsignalstrength+0x14e>
    2800:	1dfb      	adds	r3, r7, #7
    2802:	781b      	ldrb	r3, [r3, #0]
    2804:	2b19      	cmp	r3, #25
    2806:	d804      	bhi.n	2812 <gsm_getsignalstrength+0x14e>
				{
					sig_strength = 4;
    2808:	2317      	movs	r3, #23
    280a:	18fb      	adds	r3, r7, r3
    280c:	2204      	movs	r2, #4
    280e:	701a      	strb	r2, [r3, #0]
    2810:	e01a      	b.n	2848 <gsm_getsignalstrength+0x184>
				}
				else if (nw>=26 && nw<=31)
    2812:	1dfb      	adds	r3, r7, #7
    2814:	781b      	ldrb	r3, [r3, #0]
    2816:	2b19      	cmp	r3, #25
    2818:	d908      	bls.n	282c <gsm_getsignalstrength+0x168>
    281a:	1dfb      	adds	r3, r7, #7
    281c:	781b      	ldrb	r3, [r3, #0]
    281e:	2b1f      	cmp	r3, #31
    2820:	d804      	bhi.n	282c <gsm_getsignalstrength+0x168>
				{
					sig_strength = 5;
    2822:	2317      	movs	r3, #23
    2824:	18fb      	adds	r3, r7, r3
    2826:	2205      	movs	r2, #5
    2828:	701a      	strb	r2, [r3, #0]
    282a:	e00d      	b.n	2848 <gsm_getsignalstrength+0x184>
				}
				else
				{
					sig_strength = 0;
    282c:	2317      	movs	r3, #23
    282e:	18fb      	adds	r3, r7, r3
    2830:	2200      	movs	r2, #0
    2832:	701a      	strb	r2, [r3, #0]
    2834:	e008      	b.n	2848 <gsm_getsignalstrength+0x184>
				}
			}
		}
		else
		{
			sig_strength = 0;
    2836:	2317      	movs	r3, #23
    2838:	18fb      	adds	r3, r7, r3
    283a:	2200      	movs	r2, #0
    283c:	701a      	strb	r2, [r3, #0]
    283e:	e003      	b.n	2848 <gsm_getsignalstrength+0x184>
		}
	}
	else
	{
		sig_strength = 0;
    2840:	2317      	movs	r3, #23
    2842:	18fb      	adds	r3, r7, r3
    2844:	2200      	movs	r2, #0
    2846:	701a      	strb	r2, [r3, #0]
	}
	
	free(cmdx);
    2848:	693b      	ldr	r3, [r7, #16]
    284a:	0018      	movs	r0, r3
    284c:	4b05      	ldr	r3, [pc, #20]	; (2864 <gsm_getsignalstrength+0x1a0>)
    284e:	4798      	blx	r3
	
	return sig_strength;
    2850:	2317      	movs	r3, #23
    2852:	18fb      	adds	r3, r7, r3
    2854:	781b      	ldrb	r3, [r3, #0]
}
    2856:	0018      	movs	r0, r3
    2858:	46bd      	mov	sp, r7
    285a:	b006      	add	sp, #24
    285c:	bdb0      	pop	{r4, r5, r7, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	00017bc9 	.word	0x00017bc9
    2864:	00017c69 	.word	0x00017c69
    2868:	00017cd7 	.word	0x00017cd7
    286c:	00001388 	.word	0x00001388
    2870:	00018988 	.word	0x00018988
    2874:	00018afc 	.word	0x00018afc
    2878:	0000220d 	.word	0x0000220d
    287c:	00018b04 	.word	0x00018b04
    2880:	00017f97 	.word	0x00017f97
    2884:	00018aa0 	.word	0x00018aa0
    2888:	00017fc9 	.word	0x00017fc9
    288c:	00018aa4 	.word	0x00018aa4
    2890:	00002899 	.word	0x00002899
    2894:	00017bbd 	.word	0x00017bbd

00002898 <RemoveSpaces>:

void RemoveSpaces(char* source)
{
    2898:	b580      	push	{r7, lr}
    289a:	b084      	sub	sp, #16
    289c:	af00      	add	r7, sp, #0
    289e:	6078      	str	r0, [r7, #4]
	char* i = source;
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	60fb      	str	r3, [r7, #12]
	char* j = source;
    28a4:	687b      	ldr	r3, [r7, #4]
    28a6:	60bb      	str	r3, [r7, #8]
	while(*j != 0)
    28a8:	e00c      	b.n	28c4 <RemoveSpaces+0x2c>
	{
		*i = *j++;
    28aa:	68bb      	ldr	r3, [r7, #8]
    28ac:	1c5a      	adds	r2, r3, #1
    28ae:	60ba      	str	r2, [r7, #8]
    28b0:	781a      	ldrb	r2, [r3, #0]
    28b2:	68fb      	ldr	r3, [r7, #12]
    28b4:	701a      	strb	r2, [r3, #0]
		if(*i != ' ')
    28b6:	68fb      	ldr	r3, [r7, #12]
    28b8:	781b      	ldrb	r3, [r3, #0]
    28ba:	2b20      	cmp	r3, #32
    28bc:	d002      	beq.n	28c4 <RemoveSpaces+0x2c>
		i++;
    28be:	68fb      	ldr	r3, [r7, #12]
    28c0:	3301      	adds	r3, #1
    28c2:	60fb      	str	r3, [r7, #12]
	while(*j != 0)
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	781b      	ldrb	r3, [r3, #0]
    28c8:	2b00      	cmp	r3, #0
    28ca:	d1ee      	bne.n	28aa <RemoveSpaces+0x12>
	}
	*i = 0;
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	2200      	movs	r2, #0
    28d0:	701a      	strb	r2, [r3, #0]
}
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	46bd      	mov	sp, r7
    28d6:	b004      	add	sp, #16
    28d8:	bd80      	pop	{r7, pc}
	...

000028dc <gsm_enable_new_sms_message_indications>:
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
    28dc:	b590      	push	{r4, r7, lr}
    28de:	b083      	sub	sp, #12
    28e0:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
    28e2:	4a06      	ldr	r2, [pc, #24]	; (28fc <gsm_enable_new_sms_message_indications+0x20>)
    28e4:	4906      	ldr	r1, [pc, #24]	; (2900 <gsm_enable_new_sms_message_indications+0x24>)
    28e6:	4807      	ldr	r0, [pc, #28]	; (2904 <gsm_enable_new_sms_message_indications+0x28>)
    28e8:	2300      	movs	r3, #0
    28ea:	9300      	str	r3, [sp, #0]
    28ec:	2300      	movs	r3, #0
    28ee:	4c06      	ldr	r4, [pc, #24]	; (2908 <gsm_enable_new_sms_message_indications+0x2c>)
    28f0:	47a0      	blx	r4
    28f2:	0003      	movs	r3, r0
}
    28f4:	0018      	movs	r0, r3
    28f6:	46bd      	mov	sp, r7
    28f8:	b001      	add	sp, #4
    28fa:	bd90      	pop	{r4, r7, pc}
    28fc:	00001388 	.word	0x00001388
    2900:	00018988 	.word	0x00018988
    2904:	00018b08 	.word	0x00018b08
    2908:	0000220d 	.word	0x0000220d

0000290c <gsm_send_sms>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
    290c:	b5b0      	push	{r4, r5, r7, lr}
    290e:	b088      	sub	sp, #32
    2910:	af02      	add	r7, sp, #8
    2912:	6078      	str	r0, [r7, #4]
    2914:	6039      	str	r1, [r7, #0]
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250) 
    2916:	683b      	ldr	r3, [r7, #0]
    2918:	0018      	movs	r0, r3
    291a:	4b3b      	ldr	r3, [pc, #236]	; (2a08 <gsm_send_sms+0xfc>)
    291c:	4798      	blx	r3
    291e:	0003      	movs	r3, r0
    2920:	2bfa      	cmp	r3, #250	; 0xfa
    2922:	d901      	bls.n	2928 <gsm_send_sms+0x1c>
	{
		return GSM_ERROR_MESSAGE_LENGTH;
    2924:	2303      	movs	r3, #3
    2926:	e06b      	b.n	2a00 <gsm_send_sms+0xf4>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6) 
    2928:	687b      	ldr	r3, [r7, #4]
    292a:	0018      	movs	r0, r3
    292c:	4b36      	ldr	r3, [pc, #216]	; (2a08 <gsm_send_sms+0xfc>)
    292e:	4798      	blx	r3
    2930:	0003      	movs	r3, r0
    2932:	2b05      	cmp	r3, #5
    2934:	d801      	bhi.n	293a <gsm_send_sms+0x2e>
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
    2936:	2304      	movs	r3, #4
    2938:	e062      	b.n	2a00 <gsm_send_sms+0xf4>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
    293a:	2317      	movs	r3, #23
    293c:	18fb      	adds	r3, r7, r3
    293e:	22fa      	movs	r2, #250	; 0xfa
    2940:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2942:	2317      	movs	r3, #23
    2944:	18fb      	adds	r3, r7, r3
    2946:	781b      	ldrb	r3, [r3, #0]
    2948:	2101      	movs	r1, #1
    294a:	0018      	movs	r0, r3
    294c:	4b2f      	ldr	r3, [pc, #188]	; (2a0c <gsm_send_sms+0x100>)
    294e:	4798      	blx	r3
    2950:	0003      	movs	r3, r0
    2952:	613b      	str	r3, [r7, #16]
	//buffer created???
	if (cmdx == NULL)
    2954:	693b      	ldr	r3, [r7, #16]
    2956:	2b00      	cmp	r3, #0
    2958:	d101      	bne.n	295e <gsm_send_sms+0x52>
	{
		return 0;
    295a:	2300      	movs	r3, #0
    295c:	e050      	b.n	2a00 <gsm_send_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    295e:	2317      	movs	r3, #23
    2960:	18fb      	adds	r3, r7, r3
    2962:	781a      	ldrb	r2, [r3, #0]
    2964:	693b      	ldr	r3, [r7, #16]
    2966:	2100      	movs	r1, #0
    2968:	0018      	movs	r0, r3
    296a:	4b29      	ldr	r3, [pc, #164]	; (2a10 <gsm_send_sms+0x104>)
    296c:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
    296e:	2317      	movs	r3, #23
    2970:	18fb      	adds	r3, r7, r3
    2972:	7819      	ldrb	r1, [r3, #0]
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	4a27      	ldr	r2, [pc, #156]	; (2a14 <gsm_send_sms+0x108>)
    2978:	6938      	ldr	r0, [r7, #16]
    297a:	4c27      	ldr	r4, [pc, #156]	; (2a18 <gsm_send_sms+0x10c>)
    297c:	47a0      	blx	r4
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
    297e:	4a27      	ldr	r2, [pc, #156]	; (2a1c <gsm_send_sms+0x110>)
    2980:	4927      	ldr	r1, [pc, #156]	; (2a20 <gsm_send_sms+0x114>)
    2982:	6938      	ldr	r0, [r7, #16]
    2984:	2300      	movs	r3, #0
    2986:	9300      	str	r3, [sp, #0]
    2988:	2300      	movs	r3, #0
    298a:	4c26      	ldr	r4, [pc, #152]	; (2a24 <gsm_send_sms+0x118>)
    298c:	47a0      	blx	r4
    298e:	1e03      	subs	r3, r0, #0
    2990:	d131      	bne.n	29f6 <gsm_send_sms+0xea>
	{
		vTaskDelay(500/portTICK_PERIOD_MS);		//todo: check if sms is reaching time is reduced than 30 seconds, if yes, than keep this statement, else remove it.
    2992:	23fa      	movs	r3, #250	; 0xfa
    2994:	005b      	lsls	r3, r3, #1
    2996:	0018      	movs	r0, r3
    2998:	4b23      	ldr	r3, [pc, #140]	; (2a28 <gsm_send_sms+0x11c>)
    299a:	4798      	blx	r3
		memset(cmdx, '\0', MAX_BUFFER);
    299c:	2317      	movs	r3, #23
    299e:	18fb      	adds	r3, r7, r3
    29a0:	781a      	ldrb	r2, [r3, #0]
    29a2:	693b      	ldr	r3, [r7, #16]
    29a4:	2100      	movs	r1, #0
    29a6:	0018      	movs	r0, r3
    29a8:	4b19      	ldr	r3, [pc, #100]	; (2a10 <gsm_send_sms+0x104>)
    29aa:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
    29ac:	2317      	movs	r3, #23
    29ae:	18fb      	adds	r3, r7, r3
    29b0:	7819      	ldrb	r1, [r3, #0]
    29b2:	683b      	ldr	r3, [r7, #0]
    29b4:	4a1d      	ldr	r2, [pc, #116]	; (2a2c <gsm_send_sms+0x120>)
    29b6:	6938      	ldr	r0, [r7, #16]
    29b8:	4c17      	ldr	r4, [pc, #92]	; (2a18 <gsm_send_sms+0x10c>)
    29ba:	47a0      	blx	r4
		
	    err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
    29bc:	230f      	movs	r3, #15
    29be:	18fc      	adds	r4, r7, r3
    29c0:	4a16      	ldr	r2, [pc, #88]	; (2a1c <gsm_send_sms+0x110>)
    29c2:	491b      	ldr	r1, [pc, #108]	; (2a30 <gsm_send_sms+0x124>)
    29c4:	6938      	ldr	r0, [r7, #16]
    29c6:	2300      	movs	r3, #0
    29c8:	9300      	str	r3, [sp, #0]
    29ca:	2300      	movs	r3, #0
    29cc:	4d15      	ldr	r5, [pc, #84]	; (2a24 <gsm_send_sms+0x118>)
    29ce:	47a8      	blx	r5
    29d0:	0003      	movs	r3, r0
    29d2:	7023      	strb	r3, [r4, #0]
		if (err == GSM_ERROR_NONE)
    29d4:	230f      	movs	r3, #15
    29d6:	18fb      	adds	r3, r7, r3
    29d8:	781b      	ldrb	r3, [r3, #0]
    29da:	2b00      	cmp	r3, #0
    29dc:	d105      	bne.n	29ea <gsm_send_sms+0xde>
		{
			free(cmdx);
    29de:	693b      	ldr	r3, [r7, #16]
    29e0:	0018      	movs	r0, r3
    29e2:	4b14      	ldr	r3, [pc, #80]	; (2a34 <gsm_send_sms+0x128>)
    29e4:	4798      	blx	r3
			return GSM_ERROR_NONE;
    29e6:	2300      	movs	r3, #0
    29e8:	e00a      	b.n	2a00 <gsm_send_sms+0xf4>
		}
		else 
		{
			free(cmdx);
    29ea:	693b      	ldr	r3, [r7, #16]
    29ec:	0018      	movs	r0, r3
    29ee:	4b11      	ldr	r3, [pc, #68]	; (2a34 <gsm_send_sms+0x128>)
    29f0:	4798      	blx	r3
			return GSM_ERROR_SMS_SEND_FAILED;
    29f2:	2306      	movs	r3, #6
    29f4:	e004      	b.n	2a00 <gsm_send_sms+0xf4>
		}
	}
	else
	{
		free(cmdx);
    29f6:	693b      	ldr	r3, [r7, #16]
    29f8:	0018      	movs	r0, r3
    29fa:	4b0e      	ldr	r3, [pc, #56]	; (2a34 <gsm_send_sms+0x128>)
    29fc:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
    29fe:	2306      	movs	r3, #6
	}
}
    2a00:	0018      	movs	r0, r3
    2a02:	46bd      	mov	sp, r7
    2a04:	b006      	add	sp, #24
    2a06:	bdb0      	pop	{r4, r5, r7, pc}
    2a08:	00017f67 	.word	0x00017f67
    2a0c:	00017bc9 	.word	0x00017bc9
    2a10:	00017cd7 	.word	0x00017cd7
    2a14:	00018b30 	.word	0x00018b30
    2a18:	00017e79 	.word	0x00017e79
    2a1c:	0000ea60 	.word	0x0000ea60
    2a20:	00018b40 	.word	0x00018b40
    2a24:	0000220d 	.word	0x0000220d
    2a28:	0000f019 	.word	0x0000f019
    2a2c:	00018b44 	.word	0x00018b44
    2a30:	00018988 	.word	0x00018988
    2a34:	00017c69 	.word	0x00017c69

00002a38 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
    2a38:	b590      	push	{r4, r7, lr}
    2a3a:	b08f      	sub	sp, #60	; 0x3c
    2a3c:	af02      	add	r7, sp, #8
    2a3e:	60b9      	str	r1, [r7, #8]
    2a40:	0011      	movs	r1, r2
    2a42:	607b      	str	r3, [r7, #4]
    2a44:	230f      	movs	r3, #15
    2a46:	18fb      	adds	r3, r7, r3
    2a48:	1c02      	adds	r2, r0, #0
    2a4a:	701a      	strb	r2, [r3, #0]
    2a4c:	230e      	movs	r3, #14
    2a4e:	18fb      	adds	r3, r7, r3
    2a50:	1c0a      	adds	r2, r1, #0
    2a52:	701a      	strb	r2, [r3, #0]
	const uint8_t MAX_BUFFER = 230;
    2a54:	232f      	movs	r3, #47	; 0x2f
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	22e6      	movs	r2, #230	; 0xe6
    2a5a:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2a5c:	232f      	movs	r3, #47	; 0x2f
    2a5e:	18fb      	adds	r3, r7, r3
    2a60:	781b      	ldrb	r3, [r3, #0]
    2a62:	2101      	movs	r1, #1
    2a64:	0018      	movs	r0, r3
    2a66:	4b6e      	ldr	r3, [pc, #440]	; (2c20 <gsm_read_sms+0x1e8>)
    2a68:	4798      	blx	r3
    2a6a:	0003      	movs	r3, r0
    2a6c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cmdx == NULL)
    2a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a70:	2b00      	cmp	r3, #0
    2a72:	d105      	bne.n	2a80 <gsm_read_sms+0x48>
	{
		free(cmdx);
    2a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a76:	0018      	movs	r0, r3
    2a78:	4b6a      	ldr	r3, [pc, #424]	; (2c24 <gsm_read_sms+0x1ec>)
    2a7a:	4798      	blx	r3
		return 0;
    2a7c:	2300      	movs	r3, #0
    2a7e:	e0ca      	b.n	2c16 <gsm_read_sms+0x1de>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2a80:	232f      	movs	r3, #47	; 0x2f
    2a82:	18fb      	adds	r3, r7, r3
    2a84:	781a      	ldrb	r2, [r3, #0]
    2a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a88:	2100      	movs	r1, #0
    2a8a:	0018      	movs	r0, r3
    2a8c:	4b66      	ldr	r3, [pc, #408]	; (2c28 <gsm_read_sms+0x1f0>)
    2a8e:	4798      	blx	r3
	
	uint8_t cmgr_at_command[10] = {0};
    2a90:	2310      	movs	r3, #16
    2a92:	18fb      	adds	r3, r7, r3
    2a94:	0018      	movs	r0, r3
    2a96:	230a      	movs	r3, #10
    2a98:	001a      	movs	r2, r3
    2a9a:	2100      	movs	r1, #0
    2a9c:	4b62      	ldr	r3, [pc, #392]	; (2c28 <gsm_read_sms+0x1f0>)
    2a9e:	4798      	blx	r3
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
    2aa0:	232f      	movs	r3, #47	; 0x2f
    2aa2:	18fb      	adds	r3, r7, r3
    2aa4:	7819      	ldrb	r1, [r3, #0]
    2aa6:	230f      	movs	r3, #15
    2aa8:	18fb      	adds	r3, r7, r3
    2aaa:	781b      	ldrb	r3, [r3, #0]
    2aac:	4a5f      	ldr	r2, [pc, #380]	; (2c2c <gsm_read_sms+0x1f4>)
    2aae:	2010      	movs	r0, #16
    2ab0:	1838      	adds	r0, r7, r0
    2ab2:	4c5f      	ldr	r4, [pc, #380]	; (2c30 <gsm_read_sms+0x1f8>)
    2ab4:	47a0      	blx	r4
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
    2ab6:	232f      	movs	r3, #47	; 0x2f
    2ab8:	18fb      	adds	r3, r7, r3
    2aba:	781a      	ldrb	r2, [r3, #0]
    2abc:	4c5d      	ldr	r4, [pc, #372]	; (2c34 <gsm_read_sms+0x1fc>)
    2abe:	495e      	ldr	r1, [pc, #376]	; (2c38 <gsm_read_sms+0x200>)
    2ac0:	2310      	movs	r3, #16
    2ac2:	18f8      	adds	r0, r7, r3
    2ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ac6:	9300      	str	r3, [sp, #0]
    2ac8:	0013      	movs	r3, r2
    2aca:	0022      	movs	r2, r4
    2acc:	4c5b      	ldr	r4, [pc, #364]	; (2c3c <gsm_read_sms+0x204>)
    2ace:	47a0      	blx	r4
    2ad0:	1e03      	subs	r3, r0, #0
    2ad2:	d000      	beq.n	2ad6 <gsm_read_sms+0x9e>
    2ad4:	e094      	b.n	2c00 <gsm_read_sms+0x1c8>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
    2ad6:	4a5a      	ldr	r2, [pc, #360]	; (2c40 <gsm_read_sms+0x208>)
    2ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2ada:	0011      	movs	r1, r2
    2adc:	0018      	movs	r0, r3
    2ade:	4b59      	ldr	r3, [pc, #356]	; (2c44 <gsm_read_sms+0x20c>)
    2ae0:	4798      	blx	r3
    2ae2:	0003      	movs	r3, r0
    2ae4:	627b      	str	r3, [r7, #36]	; 0x24
		if (strig_cmp != 0)
    2ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ae8:	2b00      	cmp	r3, #0
    2aea:	d100      	bne.n	2aee <gsm_read_sms+0xb6>
    2aec:	e082      	b.n	2bf4 <gsm_read_sms+0x1bc>
		{
			p_char = strchr((char *)(cmdx),',');
    2aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2af0:	212c      	movs	r1, #44	; 0x2c
    2af2:	0018      	movs	r0, r3
    2af4:	4b54      	ldr	r3, [pc, #336]	; (2c48 <gsm_read_sms+0x210>)
    2af6:	4798      	blx	r3
    2af8:	0003      	movs	r3, r0
    2afa:	623b      	str	r3, [r7, #32]
			p_char1 = p_char+2;
    2afc:	6a3b      	ldr	r3, [r7, #32]
    2afe:	3302      	adds	r3, #2
    2b00:	61fb      	str	r3, [r7, #28]
			p_char = strchr((char *)(p_char1),'"');
    2b02:	69fb      	ldr	r3, [r7, #28]
    2b04:	2122      	movs	r1, #34	; 0x22
    2b06:	0018      	movs	r0, r3
    2b08:	4b4f      	ldr	r3, [pc, #316]	; (2c48 <gsm_read_sms+0x210>)
    2b0a:	4798      	blx	r3
    2b0c:	0003      	movs	r3, r0
    2b0e:	623b      	str	r3, [r7, #32]
			uint8_t len;
			if (p_char != NULL)
    2b10:	6a3b      	ldr	r3, [r7, #32]
    2b12:	2b00      	cmp	r3, #0
    2b14:	d02a      	beq.n	2b6c <gsm_read_sms+0x134>
			{
				*p_char = 0;
    2b16:	6a3b      	ldr	r3, [r7, #32]
    2b18:	2200      	movs	r2, #0
    2b1a:	701a      	strb	r2, [r3, #0]
				len = strlen(p_char1);
    2b1c:	69fb      	ldr	r3, [r7, #28]
    2b1e:	0018      	movs	r0, r3
    2b20:	4b4a      	ldr	r3, [pc, #296]	; (2c4c <gsm_read_sms+0x214>)
    2b22:	4798      	blx	r3
    2b24:	0002      	movs	r2, r0
    2b26:	231b      	movs	r3, #27
    2b28:	18fb      	adds	r3, r7, r3
    2b2a:	701a      	strb	r2, [r3, #0]
				if(len < max_phone_len)
    2b2c:	231b      	movs	r3, #27
    2b2e:	18fa      	adds	r2, r7, r3
    2b30:	230e      	movs	r3, #14
    2b32:	18fb      	adds	r3, r7, r3
    2b34:	7812      	ldrb	r2, [r2, #0]
    2b36:	781b      	ldrb	r3, [r3, #0]
    2b38:	429a      	cmp	r2, r3
    2b3a:	d206      	bcs.n	2b4a <gsm_read_sms+0x112>
				{
					strcpy(phone_number, (char *)(p_char1));
    2b3c:	69fa      	ldr	r2, [r7, #28]
    2b3e:	68bb      	ldr	r3, [r7, #8]
    2b40:	0011      	movs	r1, r2
    2b42:	0018      	movs	r0, r3
    2b44:	4b42      	ldr	r3, [pc, #264]	; (2c50 <gsm_read_sms+0x218>)
    2b46:	4798      	blx	r3
    2b48:	e010      	b.n	2b6c <gsm_read_sms+0x134>
				}
				else
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
    2b4a:	230e      	movs	r3, #14
    2b4c:	18fb      	adds	r3, r7, r3
    2b4e:	781b      	ldrb	r3, [r3, #0]
    2b50:	3b01      	subs	r3, #1
    2b52:	001a      	movs	r2, r3
    2b54:	69f9      	ldr	r1, [r7, #28]
    2b56:	68bb      	ldr	r3, [r7, #8]
    2b58:	0018      	movs	r0, r3
    2b5a:	4b3e      	ldr	r3, [pc, #248]	; (2c54 <gsm_read_sms+0x21c>)
    2b5c:	4798      	blx	r3
					phone_number[max_phone_len]=0;
    2b5e:	230e      	movs	r3, #14
    2b60:	18fb      	adds	r3, r7, r3
    2b62:	781b      	ldrb	r3, [r3, #0]
    2b64:	68ba      	ldr	r2, [r7, #8]
    2b66:	18d3      	adds	r3, r2, r3
    2b68:	2200      	movs	r2, #0
    2b6a:	701a      	strb	r2, [r3, #0]
				}
			}
			p_char = strchr(p_char+1, 0x0a);
    2b6c:	6a3b      	ldr	r3, [r7, #32]
    2b6e:	3301      	adds	r3, #1
    2b70:	210a      	movs	r1, #10
    2b72:	0018      	movs	r0, r3
    2b74:	4b34      	ldr	r3, [pc, #208]	; (2c48 <gsm_read_sms+0x210>)
    2b76:	4798      	blx	r3
    2b78:	0003      	movs	r3, r0
    2b7a:	623b      	str	r3, [r7, #32]
			if (p_char != NULL)
    2b7c:	6a3b      	ldr	r3, [r7, #32]
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d044      	beq.n	2c0c <gsm_read_sms+0x1d4>
			{
				p_char++;
    2b82:	6a3b      	ldr	r3, [r7, #32]
    2b84:	3301      	adds	r3, #1
    2b86:	623b      	str	r3, [r7, #32]
				p_char1 = strchr((char *)(p_char), 0x0d);
    2b88:	6a3b      	ldr	r3, [r7, #32]
    2b8a:	210d      	movs	r1, #13
    2b8c:	0018      	movs	r0, r3
    2b8e:	4b2e      	ldr	r3, [pc, #184]	; (2c48 <gsm_read_sms+0x210>)
    2b90:	4798      	blx	r3
    2b92:	0003      	movs	r3, r0
    2b94:	61fb      	str	r3, [r7, #28]
				if (p_char1 != NULL)
    2b96:	69fb      	ldr	r3, [r7, #28]
    2b98:	2b00      	cmp	r3, #0
    2b9a:	d002      	beq.n	2ba2 <gsm_read_sms+0x16a>
				{
					*p_char1 = 0;
    2b9c:	69fb      	ldr	r3, [r7, #28]
    2b9e:	2200      	movs	r2, #0
    2ba0:	701a      	strb	r2, [r3, #0]
				}
				len = strlen(p_char);
    2ba2:	6a3b      	ldr	r3, [r7, #32]
    2ba4:	0018      	movs	r0, r3
    2ba6:	4b29      	ldr	r3, [pc, #164]	; (2c4c <gsm_read_sms+0x214>)
    2ba8:	4798      	blx	r3
    2baa:	0002      	movs	r2, r0
    2bac:	231b      	movs	r3, #27
    2bae:	18fb      	adds	r3, r7, r3
    2bb0:	701a      	strb	r2, [r3, #0]
				if (len < max_SMS_len)
    2bb2:	231b      	movs	r3, #27
    2bb4:	18fb      	adds	r3, r7, r3
    2bb6:	2240      	movs	r2, #64	; 0x40
    2bb8:	18b9      	adds	r1, r7, r2
    2bba:	781a      	ldrb	r2, [r3, #0]
    2bbc:	780b      	ldrb	r3, [r1, #0]
    2bbe:	429a      	cmp	r2, r3
    2bc0:	d206      	bcs.n	2bd0 <gsm_read_sms+0x198>
				{
					strcpy(SMS_text, (char *)(p_char));
    2bc2:	6a3a      	ldr	r2, [r7, #32]
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	0011      	movs	r1, r2
    2bc8:	0018      	movs	r0, r3
    2bca:	4b21      	ldr	r3, [pc, #132]	; (2c50 <gsm_read_sms+0x218>)
    2bcc:	4798      	blx	r3
    2bce:	e01d      	b.n	2c0c <gsm_read_sms+0x1d4>
				}
				else
				{
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
    2bd0:	2340      	movs	r3, #64	; 0x40
    2bd2:	18fb      	adds	r3, r7, r3
    2bd4:	781b      	ldrb	r3, [r3, #0]
    2bd6:	3b01      	subs	r3, #1
    2bd8:	001a      	movs	r2, r3
    2bda:	6a39      	ldr	r1, [r7, #32]
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	0018      	movs	r0, r3
    2be0:	4b1c      	ldr	r3, [pc, #112]	; (2c54 <gsm_read_sms+0x21c>)
    2be2:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
    2be4:	2340      	movs	r3, #64	; 0x40
    2be6:	18fb      	adds	r3, r7, r3
    2be8:	781b      	ldrb	r3, [r3, #0]
    2bea:	687a      	ldr	r2, [r7, #4]
    2bec:	18d3      	adds	r3, r2, r3
    2bee:	2200      	movs	r2, #0
    2bf0:	701a      	strb	r2, [r3, #0]
    2bf2:	e00b      	b.n	2c0c <gsm_read_sms+0x1d4>
				}
			}
		}
		else
		{
			free(cmdx);
    2bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bf6:	0018      	movs	r0, r3
    2bf8:	4b0a      	ldr	r3, [pc, #40]	; (2c24 <gsm_read_sms+0x1ec>)
    2bfa:	4798      	blx	r3
			return GSM_ERROR_SMS_NOT_AVAILABLE; 
    2bfc:	230c      	movs	r3, #12
    2bfe:	e00a      	b.n	2c16 <gsm_read_sms+0x1de>
		}
	}
	else
	{
		free(cmdx);
    2c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c02:	0018      	movs	r0, r3
    2c04:	4b07      	ldr	r3, [pc, #28]	; (2c24 <gsm_read_sms+0x1ec>)
    2c06:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE; 
    2c08:	230c      	movs	r3, #12
    2c0a:	e004      	b.n	2c16 <gsm_read_sms+0x1de>
	}
	free(cmdx);
    2c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c0e:	0018      	movs	r0, r3
    2c10:	4b04      	ldr	r3, [pc, #16]	; (2c24 <gsm_read_sms+0x1ec>)
    2c12:	4798      	blx	r3
	return GSM_ERROR_NONE; 
    2c14:	2300      	movs	r3, #0
}
    2c16:	0018      	movs	r0, r3
    2c18:	46bd      	mov	sp, r7
    2c1a:	b00d      	add	sp, #52	; 0x34
    2c1c:	bd90      	pop	{r4, r7, pc}
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	00017bc9 	.word	0x00017bc9
    2c24:	00017c69 	.word	0x00017c69
    2c28:	00017cd7 	.word	0x00017cd7
    2c2c:	00018b90 	.word	0x00018b90
    2c30:	00017e79 	.word	0x00017e79
    2c34:	00001388 	.word	0x00001388
    2c38:	00018988 	.word	0x00018988
    2c3c:	0000220d 	.word	0x0000220d
    2c40:	00018b9c 	.word	0x00018b9c
    2c44:	00017f97 	.word	0x00017f97
    2c48:	00017f3b 	.word	0x00017f3b
    2c4c:	00017f67 	.word	0x00017f67
    2c50:	00017f57 	.word	0x00017f57
    2c54:	00017ca1 	.word	0x00017ca1

00002c58 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
    2c58:	b5b0      	push	{r4, r5, r7, lr}
    2c5a:	b088      	sub	sp, #32
    2c5c:	af02      	add	r7, sp, #8
    2c5e:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
    2c60:	2317      	movs	r3, #23
    2c62:	18fb      	adds	r3, r7, r3
    2c64:	221e      	movs	r2, #30
    2c66:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2c68:	2317      	movs	r3, #23
    2c6a:	18fb      	adds	r3, r7, r3
    2c6c:	781b      	ldrb	r3, [r3, #0]
    2c6e:	2101      	movs	r1, #1
    2c70:	0018      	movs	r0, r3
    2c72:	4b18      	ldr	r3, [pc, #96]	; (2cd4 <gsm_call_to_dial_a_number+0x7c>)
    2c74:	4798      	blx	r3
    2c76:	0003      	movs	r3, r0
    2c78:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
    2c7a:	693b      	ldr	r3, [r7, #16]
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	d101      	bne.n	2c84 <gsm_call_to_dial_a_number+0x2c>
	{
		return 0;
    2c80:	2300      	movs	r3, #0
    2c82:	e023      	b.n	2ccc <gsm_call_to_dial_a_number+0x74>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
    2c84:	2317      	movs	r3, #23
    2c86:	18fb      	adds	r3, r7, r3
    2c88:	781a      	ldrb	r2, [r3, #0]
    2c8a:	693b      	ldr	r3, [r7, #16]
    2c8c:	2100      	movs	r1, #0
    2c8e:	0018      	movs	r0, r3
    2c90:	4b11      	ldr	r3, [pc, #68]	; (2cd8 <gsm_call_to_dial_a_number+0x80>)
    2c92:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
    2c94:	2317      	movs	r3, #23
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	7819      	ldrb	r1, [r3, #0]
    2c9a:	687b      	ldr	r3, [r7, #4]
    2c9c:	4a0f      	ldr	r2, [pc, #60]	; (2cdc <gsm_call_to_dial_a_number+0x84>)
    2c9e:	6938      	ldr	r0, [r7, #16]
    2ca0:	4c0f      	ldr	r4, [pc, #60]	; (2ce0 <gsm_call_to_dial_a_number+0x88>)
    2ca2:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
    2ca4:	230f      	movs	r3, #15
    2ca6:	18fc      	adds	r4, r7, r3
    2ca8:	23fa      	movs	r3, #250	; 0xfa
    2caa:	00da      	lsls	r2, r3, #3
    2cac:	490d      	ldr	r1, [pc, #52]	; (2ce4 <gsm_call_to_dial_a_number+0x8c>)
    2cae:	6938      	ldr	r0, [r7, #16]
    2cb0:	2300      	movs	r3, #0
    2cb2:	9300      	str	r3, [sp, #0]
    2cb4:	2300      	movs	r3, #0
    2cb6:	4d0c      	ldr	r5, [pc, #48]	; (2ce8 <gsm_call_to_dial_a_number+0x90>)
    2cb8:	47a8      	blx	r5
    2cba:	0003      	movs	r3, r0
    2cbc:	7023      	strb	r3, [r4, #0]
	free(cmdx);
    2cbe:	693b      	ldr	r3, [r7, #16]
    2cc0:	0018      	movs	r0, r3
    2cc2:	4b0a      	ldr	r3, [pc, #40]	; (2cec <gsm_call_to_dial_a_number+0x94>)
    2cc4:	4798      	blx	r3
	return err;
    2cc6:	230f      	movs	r3, #15
    2cc8:	18fb      	adds	r3, r7, r3
    2cca:	781b      	ldrb	r3, [r3, #0]
	
}
    2ccc:	0018      	movs	r0, r3
    2cce:	46bd      	mov	sp, r7
    2cd0:	b006      	add	sp, #24
    2cd2:	bdb0      	pop	{r4, r5, r7, pc}
    2cd4:	00017bc9 	.word	0x00017bc9
    2cd8:	00017cd7 	.word	0x00017cd7
    2cdc:	00018ba4 	.word	0x00018ba4
    2ce0:	00017e79 	.word	0x00017e79
    2ce4:	00018988 	.word	0x00018988
    2ce8:	0000220d 	.word	0x0000220d
    2cec:	00017c69 	.word	0x00017c69

00002cf0 <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
    2cf0:	b590      	push	{r4, r7, lr}
    2cf2:	b083      	sub	sp, #12
    2cf4:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2cf6:	4a06      	ldr	r2, [pc, #24]	; (2d10 <gsm_answer_an_incomming_call+0x20>)
    2cf8:	4906      	ldr	r1, [pc, #24]	; (2d14 <gsm_answer_an_incomming_call+0x24>)
    2cfa:	4807      	ldr	r0, [pc, #28]	; (2d18 <gsm_answer_an_incomming_call+0x28>)
    2cfc:	2300      	movs	r3, #0
    2cfe:	9300      	str	r3, [sp, #0]
    2d00:	2300      	movs	r3, #0
    2d02:	4c06      	ldr	r4, [pc, #24]	; (2d1c <gsm_answer_an_incomming_call+0x2c>)
    2d04:	47a0      	blx	r4
    2d06:	0003      	movs	r3, r0
}
    2d08:	0018      	movs	r0, r3
    2d0a:	46bd      	mov	sp, r7
    2d0c:	b001      	add	sp, #4
    2d0e:	bd90      	pop	{r4, r7, pc}
    2d10:	00001388 	.word	0x00001388
    2d14:	00018988 	.word	0x00018988
    2d18:	00018bac 	.word	0x00018bac
    2d1c:	0000220d 	.word	0x0000220d

00002d20 <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
    2d20:	b590      	push	{r4, r7, lr}
    2d22:	b083      	sub	sp, #12
    2d24:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
    2d26:	4a06      	ldr	r2, [pc, #24]	; (2d40 <gsm_enable_network_time_update+0x20>)
    2d28:	4906      	ldr	r1, [pc, #24]	; (2d44 <gsm_enable_network_time_update+0x24>)
    2d2a:	4807      	ldr	r0, [pc, #28]	; (2d48 <gsm_enable_network_time_update+0x28>)
    2d2c:	2300      	movs	r3, #0
    2d2e:	9300      	str	r3, [sp, #0]
    2d30:	2300      	movs	r3, #0
    2d32:	4c06      	ldr	r4, [pc, #24]	; (2d4c <gsm_enable_network_time_update+0x2c>)
    2d34:	47a0      	blx	r4
    2d36:	0003      	movs	r3, r0
}
    2d38:	0018      	movs	r0, r3
    2d3a:	46bd      	mov	sp, r7
    2d3c:	b001      	add	sp, #4
    2d3e:	bd90      	pop	{r4, r7, pc}
    2d40:	00002710 	.word	0x00002710
    2d44:	00018988 	.word	0x00018988
    2d48:	00018bb4 	.word	0x00018bb4
    2d4c:	0000220d 	.word	0x0000220d

00002d50 <gsm_enable_DTMF_detection>:
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
    2d50:	b590      	push	{r4, r7, lr}
    2d52:	b083      	sub	sp, #12
    2d54:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2d56:	4a06      	ldr	r2, [pc, #24]	; (2d70 <gsm_enable_DTMF_detection+0x20>)
    2d58:	4906      	ldr	r1, [pc, #24]	; (2d74 <gsm_enable_DTMF_detection+0x24>)
    2d5a:	4807      	ldr	r0, [pc, #28]	; (2d78 <gsm_enable_DTMF_detection+0x28>)
    2d5c:	2300      	movs	r3, #0
    2d5e:	9300      	str	r3, [sp, #0]
    2d60:	2300      	movs	r3, #0
    2d62:	4c06      	ldr	r4, [pc, #24]	; (2d7c <gsm_enable_DTMF_detection+0x2c>)
    2d64:	47a0      	blx	r4
    2d66:	0003      	movs	r3, r0
}
    2d68:	0018      	movs	r0, r3
    2d6a:	46bd      	mov	sp, r7
    2d6c:	b001      	add	sp, #4
    2d6e:	bd90      	pop	{r4, r7, pc}
    2d70:	00001388 	.word	0x00001388
    2d74:	00018988 	.word	0x00018988
    2d78:	00018bcc 	.word	0x00018bcc
    2d7c:	0000220d 	.word	0x0000220d

00002d80 <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
    2d80:	b5b0      	push	{r4, r5, r7, lr}
    2d82:	b088      	sub	sp, #32
    2d84:	af02      	add	r7, sp, #8
    2d86:	6078      	str	r0, [r7, #4]
	const uint8_t MAX_BUFFER = 30;
    2d88:	2317      	movs	r3, #23
    2d8a:	18fb      	adds	r3, r7, r3
    2d8c:	221e      	movs	r2, #30
    2d8e:	701a      	strb	r2, [r3, #0]
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2d90:	2317      	movs	r3, #23
    2d92:	18fb      	adds	r3, r7, r3
    2d94:	781b      	ldrb	r3, [r3, #0]
    2d96:	2101      	movs	r1, #1
    2d98:	0018      	movs	r0, r3
    2d9a:	4b18      	ldr	r3, [pc, #96]	; (2dfc <gsm_send_DTMF_Tone+0x7c>)
    2d9c:	4798      	blx	r3
    2d9e:	0003      	movs	r3, r0
    2da0:	613b      	str	r3, [r7, #16]
	
	//buffer created?
	if (cmdx == NULL)
    2da2:	693b      	ldr	r3, [r7, #16]
    2da4:	2b00      	cmp	r3, #0
    2da6:	d101      	bne.n	2dac <gsm_send_DTMF_Tone+0x2c>
	{
		return 0;
    2da8:	2300      	movs	r3, #0
    2daa:	e022      	b.n	2df2 <gsm_send_DTMF_Tone+0x72>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
    2dac:	2317      	movs	r3, #23
    2dae:	18fb      	adds	r3, r7, r3
    2db0:	781a      	ldrb	r2, [r3, #0]
    2db2:	693b      	ldr	r3, [r7, #16]
    2db4:	2100      	movs	r1, #0
    2db6:	0018      	movs	r0, r3
    2db8:	4b11      	ldr	r3, [pc, #68]	; (2e00 <gsm_send_DTMF_Tone+0x80>)
    2dba:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
    2dbc:	2317      	movs	r3, #23
    2dbe:	18fb      	adds	r3, r7, r3
    2dc0:	7819      	ldrb	r1, [r3, #0]
    2dc2:	687b      	ldr	r3, [r7, #4]
    2dc4:	4a0f      	ldr	r2, [pc, #60]	; (2e04 <gsm_send_DTMF_Tone+0x84>)
    2dc6:	6938      	ldr	r0, [r7, #16]
    2dc8:	4c0f      	ldr	r4, [pc, #60]	; (2e08 <gsm_send_DTMF_Tone+0x88>)
    2dca:	47a0      	blx	r4
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
    2dcc:	230f      	movs	r3, #15
    2dce:	18fc      	adds	r4, r7, r3
    2dd0:	4a0e      	ldr	r2, [pc, #56]	; (2e0c <gsm_send_DTMF_Tone+0x8c>)
    2dd2:	490f      	ldr	r1, [pc, #60]	; (2e10 <gsm_send_DTMF_Tone+0x90>)
    2dd4:	6938      	ldr	r0, [r7, #16]
    2dd6:	2300      	movs	r3, #0
    2dd8:	9300      	str	r3, [sp, #0]
    2dda:	2300      	movs	r3, #0
    2ddc:	4d0d      	ldr	r5, [pc, #52]	; (2e14 <gsm_send_DTMF_Tone+0x94>)
    2dde:	47a8      	blx	r5
    2de0:	0003      	movs	r3, r0
    2de2:	7023      	strb	r3, [r4, #0]
	free(cmdx);
    2de4:	693b      	ldr	r3, [r7, #16]
    2de6:	0018      	movs	r0, r3
    2de8:	4b0b      	ldr	r3, [pc, #44]	; (2e18 <gsm_send_DTMF_Tone+0x98>)
    2dea:	4798      	blx	r3
	return err;
    2dec:	230f      	movs	r3, #15
    2dee:	18fb      	adds	r3, r7, r3
    2df0:	781b      	ldrb	r3, [r3, #0]
}
    2df2:	0018      	movs	r0, r3
    2df4:	46bd      	mov	sp, r7
    2df6:	b006      	add	sp, #24
    2df8:	bdb0      	pop	{r4, r5, r7, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	00017bc9 	.word	0x00017bc9
    2e00:	00017cd7 	.word	0x00017cd7
    2e04:	00018bd8 	.word	0x00018bd8
    2e08:	00017e79 	.word	0x00017e79
    2e0c:	00001388 	.word	0x00001388
    2e10:	00018988 	.word	0x00018988
    2e14:	0000220d 	.word	0x0000220d
    2e18:	00017c69 	.word	0x00017c69

00002e1c <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
    2e1c:	b590      	push	{r4, r7, lr}
    2e1e:	b083      	sub	sp, #12
    2e20:	af02      	add	r7, sp, #8
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
    2e22:	4a06      	ldr	r2, [pc, #24]	; (2e3c <gsm_hangup_call+0x20>)
    2e24:	4906      	ldr	r1, [pc, #24]	; (2e40 <gsm_hangup_call+0x24>)
    2e26:	4807      	ldr	r0, [pc, #28]	; (2e44 <gsm_hangup_call+0x28>)
    2e28:	2300      	movs	r3, #0
    2e2a:	9300      	str	r3, [sp, #0]
    2e2c:	2300      	movs	r3, #0
    2e2e:	4c06      	ldr	r4, [pc, #24]	; (2e48 <gsm_hangup_call+0x2c>)
    2e30:	47a0      	blx	r4
    2e32:	0003      	movs	r3, r0
}
    2e34:	0018      	movs	r0, r3
    2e36:	46bd      	mov	sp, r7
    2e38:	b001      	add	sp, #4
    2e3a:	bd90      	pop	{r4, r7, pc}
    2e3c:	00001388 	.word	0x00001388
    2e40:	00018988 	.word	0x00018988
    2e44:	00018be8 	.word	0x00018be8
    2e48:	0000220d 	.word	0x0000220d

00002e4c <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
    2e4c:	b590      	push	{r4, r7, lr}
    2e4e:	b083      	sub	sp, #12
    2e50:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
    2e52:	4a06      	ldr	r2, [pc, #24]	; (2e6c <gsm_disable_call_waiting+0x20>)
    2e54:	4906      	ldr	r1, [pc, #24]	; (2e70 <gsm_disable_call_waiting+0x24>)
    2e56:	4807      	ldr	r0, [pc, #28]	; (2e74 <gsm_disable_call_waiting+0x28>)
    2e58:	2300      	movs	r3, #0
    2e5a:	9300      	str	r3, [sp, #0]
    2e5c:	2300      	movs	r3, #0
    2e5e:	4c06      	ldr	r4, [pc, #24]	; (2e78 <gsm_disable_call_waiting+0x2c>)
    2e60:	47a0      	blx	r4
    2e62:	0003      	movs	r3, r0
}
    2e64:	0018      	movs	r0, r3
    2e66:	46bd      	mov	sp, r7
    2e68:	b001      	add	sp, #4
    2e6a:	bd90      	pop	{r4, r7, pc}
    2e6c:	00004650 	.word	0x00004650
    2e70:	00018988 	.word	0x00018988
    2e74:	00018bf4 	.word	0x00018bf4
    2e78:	0000220d 	.word	0x0000220d

00002e7c <gsm_stop_play_record_file>:
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}


enum gsm_error gsm_stop_play_record_file(void)
{
    2e7c:	b590      	push	{r4, r7, lr}
    2e7e:	b083      	sub	sp, #12
    2e80:	af02      	add	r7, sp, #8
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,2000,0, NULL);
    2e82:	23fa      	movs	r3, #250	; 0xfa
    2e84:	00da      	lsls	r2, r3, #3
    2e86:	4906      	ldr	r1, [pc, #24]	; (2ea0 <gsm_stop_play_record_file+0x24>)
    2e88:	4806      	ldr	r0, [pc, #24]	; (2ea4 <gsm_stop_play_record_file+0x28>)
    2e8a:	2300      	movs	r3, #0
    2e8c:	9300      	str	r3, [sp, #0]
    2e8e:	2300      	movs	r3, #0
    2e90:	4c05      	ldr	r4, [pc, #20]	; (2ea8 <gsm_stop_play_record_file+0x2c>)
    2e92:	47a0      	blx	r4
    2e94:	0003      	movs	r3, r0
}
    2e96:	0018      	movs	r0, r3
    2e98:	46bd      	mov	sp, r7
    2e9a:	b001      	add	sp, #4
    2e9c:	bd90      	pop	{r4, r7, pc}
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	00018988 	.word	0x00018988
    2ea4:	00018c24 	.word	0x00018c24
    2ea8:	0000220d 	.word	0x0000220d

00002eac <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
    2eac:	b590      	push	{r4, r7, lr}
    2eae:	b087      	sub	sp, #28
    2eb0:	af02      	add	r7, sp, #8
    2eb2:	6078      	str	r0, [r7, #4]
    2eb4:	000a      	movs	r2, r1
    2eb6:	1cfb      	adds	r3, r7, #3
    2eb8:	701a      	strb	r2, [r3, #0]
	//AT+CREC=4,"C:\User\555.amr",0,100$0D
	
	uint8_t repeat = 0;
    2eba:	230f      	movs	r3, #15
    2ebc:	18fb      	adds	r3, r7, r3
    2ebe:	2200      	movs	r2, #0
    2ec0:	701a      	strb	r2, [r3, #0]
	if (playInfinitely)
    2ec2:	1cfb      	adds	r3, r7, #3
    2ec4:	781b      	ldrb	r3, [r3, #0]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d003      	beq.n	2ed2 <gsm_play_record_file+0x26>
	{
		repeat = 1;
    2eca:	230f      	movs	r3, #15
    2ecc:	18fb      	adds	r3, r7, r3
    2ece:	2201      	movs	r2, #1
    2ed0:	701a      	strb	r2, [r3, #0]
	}
	
	const uint8_t MAX_BUFFER = 50;
    2ed2:	230e      	movs	r3, #14
    2ed4:	18fb      	adds	r3, r7, r3
    2ed6:	2232      	movs	r2, #50	; 0x32
    2ed8:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2eda:	230e      	movs	r3, #14
    2edc:	18fb      	adds	r3, r7, r3
    2ede:	781b      	ldrb	r3, [r3, #0]
    2ee0:	2101      	movs	r1, #1
    2ee2:	0018      	movs	r0, r3
    2ee4:	4b17      	ldr	r3, [pc, #92]	; (2f44 <gsm_play_record_file+0x98>)
    2ee6:	4798      	blx	r3
    2ee8:	0003      	movs	r3, r0
    2eea:	60bb      	str	r3, [r7, #8]
	//buffer created???
	if (cmdx == NULL)
    2eec:	68bb      	ldr	r3, [r7, #8]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d101      	bne.n	2ef6 <gsm_play_record_file+0x4a>
	{
		return 0;
    2ef2:	2300      	movs	r3, #0
    2ef4:	e022      	b.n	2f3c <gsm_play_record_file+0x90>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2ef6:	230e      	movs	r3, #14
    2ef8:	18fb      	adds	r3, r7, r3
    2efa:	781a      	ldrb	r2, [r3, #0]
    2efc:	68bb      	ldr	r3, [r7, #8]
    2efe:	2100      	movs	r1, #0
    2f00:	0018      	movs	r0, r3
    2f02:	4b11      	ldr	r3, [pc, #68]	; (2f48 <gsm_play_record_file+0x9c>)
    2f04:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
    2f06:	230e      	movs	r3, #14
    2f08:	18fb      	adds	r3, r7, r3
    2f0a:	7819      	ldrb	r1, [r3, #0]
    2f0c:	230f      	movs	r3, #15
    2f0e:	18fb      	adds	r3, r7, r3
    2f10:	781b      	ldrb	r3, [r3, #0]
    2f12:	687c      	ldr	r4, [r7, #4]
    2f14:	4a0d      	ldr	r2, [pc, #52]	; (2f4c <gsm_play_record_file+0xa0>)
    2f16:	68b8      	ldr	r0, [r7, #8]
    2f18:	9300      	str	r3, [sp, #0]
    2f1a:	0023      	movs	r3, r4
    2f1c:	4c0c      	ldr	r4, [pc, #48]	; (2f50 <gsm_play_record_file+0xa4>)
    2f1e:	47a0      	blx	r4
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
    2f20:	23fa      	movs	r3, #250	; 0xfa
    2f22:	00da      	lsls	r2, r3, #3
    2f24:	490b      	ldr	r1, [pc, #44]	; (2f54 <gsm_play_record_file+0xa8>)
    2f26:	68b8      	ldr	r0, [r7, #8]
    2f28:	2300      	movs	r3, #0
    2f2a:	9300      	str	r3, [sp, #0]
    2f2c:	2300      	movs	r3, #0
    2f2e:	4c0a      	ldr	r4, [pc, #40]	; (2f58 <gsm_play_record_file+0xac>)
    2f30:	47a0      	blx	r4
	free(cmdx);
    2f32:	68bb      	ldr	r3, [r7, #8]
    2f34:	0018      	movs	r0, r3
    2f36:	4b09      	ldr	r3, [pc, #36]	; (2f5c <gsm_play_record_file+0xb0>)
    2f38:	4798      	blx	r3
	return GSM_ERROR_NONE;
    2f3a:	2300      	movs	r3, #0
	
}
    2f3c:	0018      	movs	r0, r3
    2f3e:	46bd      	mov	sp, r7
    2f40:	b005      	add	sp, #20
    2f42:	bd90      	pop	{r4, r7, pc}
    2f44:	00017bc9 	.word	0x00017bc9
    2f48:	00017cd7 	.word	0x00017cd7
    2f4c:	00018c30 	.word	0x00018c30
    2f50:	00017e79 	.word	0x00017e79
    2f54:	00018988 	.word	0x00018988
    2f58:	0000220d 	.word	0x0000220d
    2f5c:	00017c69 	.word	0x00017c69

00002f60 <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
    2f60:	b5b0      	push	{r4, r5, r7, lr}
    2f62:	b086      	sub	sp, #24
    2f64:	af02      	add	r7, sp, #8
	const uint8_t MAX_BUFFER = 70;
    2f66:	230f      	movs	r3, #15
    2f68:	18fb      	adds	r3, r7, r3
    2f6a:	2246      	movs	r2, #70	; 0x46
    2f6c:	701a      	strb	r2, [r3, #0]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    2f6e:	230f      	movs	r3, #15
    2f70:	18fb      	adds	r3, r7, r3
    2f72:	781b      	ldrb	r3, [r3, #0]
    2f74:	2101      	movs	r1, #1
    2f76:	0018      	movs	r0, r3
    2f78:	4b57      	ldr	r3, [pc, #348]	; (30d8 <gsm_get_internal_rtc_time+0x178>)
    2f7a:	4798      	blx	r3
    2f7c:	0003      	movs	r3, r0
    2f7e:	60bb      	str	r3, [r7, #8]
	if (cmdx == NULL)
    2f80:	68bb      	ldr	r3, [r7, #8]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d105      	bne.n	2f92 <gsm_get_internal_rtc_time+0x32>
	{
		free(cmdx);
    2f86:	68bb      	ldr	r3, [r7, #8]
    2f88:	0018      	movs	r0, r3
    2f8a:	4b54      	ldr	r3, [pc, #336]	; (30dc <gsm_get_internal_rtc_time+0x17c>)
    2f8c:	4798      	blx	r3
		return 0;
    2f8e:	2300      	movs	r3, #0
    2f90:	e09d      	b.n	30ce <gsm_get_internal_rtc_time+0x16e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    2f92:	230f      	movs	r3, #15
    2f94:	18fb      	adds	r3, r7, r3
    2f96:	781a      	ldrb	r2, [r3, #0]
    2f98:	68bb      	ldr	r3, [r7, #8]
    2f9a:	2100      	movs	r1, #0
    2f9c:	0018      	movs	r0, r3
    2f9e:	4b50      	ldr	r3, [pc, #320]	; (30e0 <gsm_get_internal_rtc_time+0x180>)
    2fa0:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
    2fa2:	1dfc      	adds	r4, r7, #7
    2fa4:	230f      	movs	r3, #15
    2fa6:	18fb      	adds	r3, r7, r3
    2fa8:	781a      	ldrb	r2, [r3, #0]
    2faa:	4d4e      	ldr	r5, [pc, #312]	; (30e4 <gsm_get_internal_rtc_time+0x184>)
    2fac:	494e      	ldr	r1, [pc, #312]	; (30e8 <gsm_get_internal_rtc_time+0x188>)
    2fae:	484f      	ldr	r0, [pc, #316]	; (30ec <gsm_get_internal_rtc_time+0x18c>)
    2fb0:	68bb      	ldr	r3, [r7, #8]
    2fb2:	9300      	str	r3, [sp, #0]
    2fb4:	0013      	movs	r3, r2
    2fb6:	002a      	movs	r2, r5
    2fb8:	4d4d      	ldr	r5, [pc, #308]	; (30f0 <gsm_get_internal_rtc_time+0x190>)
    2fba:	47a8      	blx	r5
    2fbc:	0003      	movs	r3, r0
    2fbe:	7023      	strb	r3, [r4, #0]
	if(err==GSM_ERROR_NONE)
    2fc0:	1dfb      	adds	r3, r7, #7
    2fc2:	781b      	ldrb	r3, [r3, #0]
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	d16a      	bne.n	309e <gsm_get_internal_rtc_time+0x13e>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
    2fc8:	4a4a      	ldr	r2, [pc, #296]	; (30f4 <gsm_get_internal_rtc_time+0x194>)
    2fca:	68bb      	ldr	r3, [r7, #8]
    2fcc:	0011      	movs	r1, r2
    2fce:	0018      	movs	r0, r3
    2fd0:	4b49      	ldr	r3, [pc, #292]	; (30f8 <gsm_get_internal_rtc_time+0x198>)
    2fd2:	4798      	blx	r3
    2fd4:	0003      	movs	r3, r0
    2fd6:	603b      	str	r3, [r7, #0]
		cclktocken = strtok(NULL,"\"");
    2fd8:	4b46      	ldr	r3, [pc, #280]	; (30f4 <gsm_get_internal_rtc_time+0x194>)
    2fda:	0019      	movs	r1, r3
    2fdc:	2000      	movs	r0, #0
    2fde:	4b46      	ldr	r3, [pc, #280]	; (30f8 <gsm_get_internal_rtc_time+0x198>)
    2fe0:	4798      	blx	r3
    2fe2:	0003      	movs	r3, r0
    2fe4:	603b      	str	r3, [r7, #0]
		
		cclktocken = strtok(cclktocken,"/");
    2fe6:	4a45      	ldr	r2, [pc, #276]	; (30fc <gsm_get_internal_rtc_time+0x19c>)
    2fe8:	683b      	ldr	r3, [r7, #0]
    2fea:	0011      	movs	r1, r2
    2fec:	0018      	movs	r0, r3
    2fee:	4b42      	ldr	r3, [pc, #264]	; (30f8 <gsm_get_internal_rtc_time+0x198>)
    2ff0:	4798      	blx	r3
    2ff2:	0003      	movs	r3, r0
    2ff4:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_year = atoi(cclktocken);
    2ff6:	683b      	ldr	r3, [r7, #0]
    2ff8:	0018      	movs	r0, r3
    2ffa:	4b41      	ldr	r3, [pc, #260]	; (3100 <gsm_get_internal_rtc_time+0x1a0>)
    2ffc:	4798      	blx	r3
    2ffe:	0003      	movs	r3, r0
    3000:	b2da      	uxtb	r2, r3
    3002:	4b40      	ldr	r3, [pc, #256]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    3004:	701a      	strb	r2, [r3, #0]
		
		cclktocken = strtok(NULL,"/");
    3006:	4b3d      	ldr	r3, [pc, #244]	; (30fc <gsm_get_internal_rtc_time+0x19c>)
    3008:	0019      	movs	r1, r3
    300a:	2000      	movs	r0, #0
    300c:	4b3a      	ldr	r3, [pc, #232]	; (30f8 <gsm_get_internal_rtc_time+0x198>)
    300e:	4798      	blx	r3
    3010:	0003      	movs	r3, r0
    3012:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_month = atoi(cclktocken);
    3014:	683b      	ldr	r3, [r7, #0]
    3016:	0018      	movs	r0, r3
    3018:	4b39      	ldr	r3, [pc, #228]	; (3100 <gsm_get_internal_rtc_time+0x1a0>)
    301a:	4798      	blx	r3
    301c:	0003      	movs	r3, r0
    301e:	b2da      	uxtb	r2, r3
    3020:	4b38      	ldr	r3, [pc, #224]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    3022:	705a      	strb	r2, [r3, #1]
		
		cclktocken = strtok(NULL,",");
    3024:	4b38      	ldr	r3, [pc, #224]	; (3108 <gsm_get_internal_rtc_time+0x1a8>)
    3026:	0019      	movs	r1, r3
    3028:	2000      	movs	r0, #0
    302a:	4b33      	ldr	r3, [pc, #204]	; (30f8 <gsm_get_internal_rtc_time+0x198>)
    302c:	4798      	blx	r3
    302e:	0003      	movs	r3, r0
    3030:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_date = atoi(cclktocken);
    3032:	683b      	ldr	r3, [r7, #0]
    3034:	0018      	movs	r0, r3
    3036:	4b32      	ldr	r3, [pc, #200]	; (3100 <gsm_get_internal_rtc_time+0x1a0>)
    3038:	4798      	blx	r3
    303a:	0003      	movs	r3, r0
    303c:	b2da      	uxtb	r2, r3
    303e:	4b31      	ldr	r3, [pc, #196]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    3040:	709a      	strb	r2, [r3, #2]
		
		cclktocken = strtok(NULL,":");
    3042:	4b32      	ldr	r3, [pc, #200]	; (310c <gsm_get_internal_rtc_time+0x1ac>)
    3044:	0019      	movs	r1, r3
    3046:	2000      	movs	r0, #0
    3048:	4b2b      	ldr	r3, [pc, #172]	; (30f8 <gsm_get_internal_rtc_time+0x198>)
    304a:	4798      	blx	r3
    304c:	0003      	movs	r3, r0
    304e:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_hour = atoi(cclktocken);
    3050:	683b      	ldr	r3, [r7, #0]
    3052:	0018      	movs	r0, r3
    3054:	4b2a      	ldr	r3, [pc, #168]	; (3100 <gsm_get_internal_rtc_time+0x1a0>)
    3056:	4798      	blx	r3
    3058:	0003      	movs	r3, r0
    305a:	b2da      	uxtb	r2, r3
    305c:	4b29      	ldr	r3, [pc, #164]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    305e:	70da      	strb	r2, [r3, #3]
		
		cclktocken = strtok(NULL,":");
    3060:	4b2a      	ldr	r3, [pc, #168]	; (310c <gsm_get_internal_rtc_time+0x1ac>)
    3062:	0019      	movs	r1, r3
    3064:	2000      	movs	r0, #0
    3066:	4b24      	ldr	r3, [pc, #144]	; (30f8 <gsm_get_internal_rtc_time+0x198>)
    3068:	4798      	blx	r3
    306a:	0003      	movs	r3, r0
    306c:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_minute = atoi(cclktocken);
    306e:	683b      	ldr	r3, [r7, #0]
    3070:	0018      	movs	r0, r3
    3072:	4b23      	ldr	r3, [pc, #140]	; (3100 <gsm_get_internal_rtc_time+0x1a0>)
    3074:	4798      	blx	r3
    3076:	0003      	movs	r3, r0
    3078:	b2da      	uxtb	r2, r3
    307a:	4b22      	ldr	r3, [pc, #136]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    307c:	711a      	strb	r2, [r3, #4]
		
		cclktocken = strtok(NULL,"+");
    307e:	4b24      	ldr	r3, [pc, #144]	; (3110 <gsm_get_internal_rtc_time+0x1b0>)
    3080:	0019      	movs	r1, r3
    3082:	2000      	movs	r0, #0
    3084:	4b1c      	ldr	r3, [pc, #112]	; (30f8 <gsm_get_internal_rtc_time+0x198>)
    3086:	4798      	blx	r3
    3088:	0003      	movs	r3, r0
    308a:	603b      	str	r3, [r7, #0]
		struct_internal_rtc.Network_second = atoi(cclktocken);
    308c:	683b      	ldr	r3, [r7, #0]
    308e:	0018      	movs	r0, r3
    3090:	4b1b      	ldr	r3, [pc, #108]	; (3100 <gsm_get_internal_rtc_time+0x1a0>)
    3092:	4798      	blx	r3
    3094:	0003      	movs	r3, r0
    3096:	b2da      	uxtb	r2, r3
    3098:	4b1a      	ldr	r3, [pc, #104]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    309a:	715a      	strb	r2, [r3, #5]
    309c:	e011      	b.n	30c2 <gsm_get_internal_rtc_time+0x162>
	}
	else
	{
		struct_internal_rtc.Network_year = 0;
    309e:	4b19      	ldr	r3, [pc, #100]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    30a0:	2200      	movs	r2, #0
    30a2:	701a      	strb	r2, [r3, #0]
		struct_internal_rtc.Network_month = 0;
    30a4:	4b17      	ldr	r3, [pc, #92]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    30a6:	2200      	movs	r2, #0
    30a8:	705a      	strb	r2, [r3, #1]
		struct_internal_rtc.Network_date = 0;
    30aa:	4b16      	ldr	r3, [pc, #88]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    30ac:	2200      	movs	r2, #0
    30ae:	709a      	strb	r2, [r3, #2]
		struct_internal_rtc.Network_hour = 0;
    30b0:	4b14      	ldr	r3, [pc, #80]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    30b2:	2200      	movs	r2, #0
    30b4:	70da      	strb	r2, [r3, #3]
		struct_internal_rtc.Network_minute = 0;
    30b6:	4b13      	ldr	r3, [pc, #76]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    30b8:	2200      	movs	r2, #0
    30ba:	711a      	strb	r2, [r3, #4]
		struct_internal_rtc.Network_second = 0;
    30bc:	4b11      	ldr	r3, [pc, #68]	; (3104 <gsm_get_internal_rtc_time+0x1a4>)
    30be:	2200      	movs	r2, #0
    30c0:	715a      	strb	r2, [r3, #5]
	}
	
	free(cmdx);
    30c2:	68bb      	ldr	r3, [r7, #8]
    30c4:	0018      	movs	r0, r3
    30c6:	4b05      	ldr	r3, [pc, #20]	; (30dc <gsm_get_internal_rtc_time+0x17c>)
    30c8:	4798      	blx	r3
	return err;
    30ca:	1dfb      	adds	r3, r7, #7
    30cc:	781b      	ldrb	r3, [r3, #0]
}
    30ce:	0018      	movs	r0, r3
    30d0:	46bd      	mov	sp, r7
    30d2:	b004      	add	sp, #16
    30d4:	bdb0      	pop	{r4, r5, r7, pc}
    30d6:	46c0      	nop			; (mov r8, r8)
    30d8:	00017bc9 	.word	0x00017bc9
    30dc:	00017c69 	.word	0x00017c69
    30e0:	00017cd7 	.word	0x00017cd7
    30e4:	00001388 	.word	0x00001388
    30e8:	00018988 	.word	0x00018988
    30ec:	00018c54 	.word	0x00018c54
    30f0:	0000220d 	.word	0x0000220d
    30f4:	00018c60 	.word	0x00018c60
    30f8:	00017fc9 	.word	0x00017fc9
    30fc:	00018c64 	.word	0x00018c64
    3100:	00017bbd 	.word	0x00017bbd
    3104:	20000688 	.word	0x20000688
    3108:	00018aa4 	.word	0x00018aa4
    310c:	00018aa0 	.word	0x00018aa0
    3110:	00018c68 	.word	0x00018c68

00003114 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
    3114:	b580      	push	{r7, lr}
    3116:	af00      	add	r7, sp, #0
	if (gsm_check_module() == GSM_ERROR_NONE)
    3118:	4b31      	ldr	r3, [pc, #196]	; (31e0 <gsm_config_module+0xcc>)
    311a:	4798      	blx	r3
    311c:	1e03      	subs	r3, r0, #0
    311e:	d000      	beq.n	3122 <gsm_config_module+0xe>
    3120:	e058      	b.n	31d4 <gsm_config_module+0xc0>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
    3122:	4b30      	ldr	r3, [pc, #192]	; (31e4 <gsm_config_module+0xd0>)
    3124:	4798      	blx	r3
    3126:	1e03      	subs	r3, r0, #0
    3128:	d000      	beq.n	312c <gsm_config_module+0x18>
    312a:	e051      	b.n	31d0 <gsm_config_module+0xbc>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
    312c:	23fa      	movs	r3, #250	; 0xfa
    312e:	00db      	lsls	r3, r3, #3
    3130:	0018      	movs	r0, r3
    3132:	4b2d      	ldr	r3, [pc, #180]	; (31e8 <gsm_config_module+0xd4>)
    3134:	4798      	blx	r3
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
    3136:	4b2d      	ldr	r3, [pc, #180]	; (31ec <gsm_config_module+0xd8>)
    3138:	4798      	blx	r3
    313a:	1e03      	subs	r3, r0, #0
    313c:	d146      	bne.n	31cc <gsm_config_module+0xb8>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
    313e:	4b2c      	ldr	r3, [pc, #176]	; (31f0 <gsm_config_module+0xdc>)
    3140:	4798      	blx	r3
    3142:	1e03      	subs	r3, r0, #0
    3144:	d148      	bne.n	31d8 <gsm_config_module+0xc4>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
    3146:	4b2b      	ldr	r3, [pc, #172]	; (31f4 <gsm_config_module+0xe0>)
    3148:	4798      	blx	r3
    314a:	1e03      	subs	r3, r0, #0
    314c:	d13c      	bne.n	31c8 <gsm_config_module+0xb4>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
    314e:	23fa      	movs	r3, #250	; 0xfa
    3150:	00db      	lsls	r3, r3, #3
    3152:	0018      	movs	r0, r3
    3154:	4b24      	ldr	r3, [pc, #144]	; (31e8 <gsm_config_module+0xd4>)
    3156:	4798      	blx	r3
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
    3158:	4b27      	ldr	r3, [pc, #156]	; (31f8 <gsm_config_module+0xe4>)
    315a:	4798      	blx	r3
    315c:	1e03      	subs	r3, r0, #0
    315e:	d131      	bne.n	31c4 <gsm_config_module+0xb0>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
    3160:	4b26      	ldr	r3, [pc, #152]	; (31fc <gsm_config_module+0xe8>)
    3162:	4798      	blx	r3
    3164:	1e03      	subs	r3, r0, #0
    3166:	d12b      	bne.n	31c0 <gsm_config_module+0xac>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
    3168:	4b25      	ldr	r3, [pc, #148]	; (3200 <gsm_config_module+0xec>)
    316a:	4798      	blx	r3
    316c:	1e03      	subs	r3, r0, #0
    316e:	d125      	bne.n	31bc <gsm_config_module+0xa8>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
    3170:	4b24      	ldr	r3, [pc, #144]	; (3204 <gsm_config_module+0xf0>)
    3172:	4798      	blx	r3
    3174:	1e03      	subs	r3, r0, #0
    3176:	d11f      	bne.n	31b8 <gsm_config_module+0xa4>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
    3178:	4b23      	ldr	r3, [pc, #140]	; (3208 <gsm_config_module+0xf4>)
    317a:	4798      	blx	r3
    317c:	1e03      	subs	r3, r0, #0
    317e:	d119      	bne.n	31b4 <gsm_config_module+0xa0>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
    3180:	4b22      	ldr	r3, [pc, #136]	; (320c <gsm_config_module+0xf8>)
    3182:	4798      	blx	r3
    3184:	1e03      	subs	r3, r0, #0
    3186:	d113      	bne.n	31b0 <gsm_config_module+0x9c>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
    3188:	4b21      	ldr	r3, [pc, #132]	; (3210 <gsm_config_module+0xfc>)
    318a:	4798      	blx	r3
    318c:	1e03      	subs	r3, r0, #0
    318e:	d10d      	bne.n	31ac <gsm_config_module+0x98>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
    3190:	4b20      	ldr	r3, [pc, #128]	; (3214 <gsm_config_module+0x100>)
    3192:	4798      	blx	r3
    3194:	1e03      	subs	r3, r0, #0
    3196:	d107      	bne.n	31a8 <gsm_config_module+0x94>
													{
														//if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
    3198:	4b1f      	ldr	r3, [pc, #124]	; (3218 <gsm_config_module+0x104>)
    319a:	4798      	blx	r3
    319c:	1e03      	subs	r3, r0, #0
    319e:	d101      	bne.n	31a4 <gsm_config_module+0x90>
															{
																return GSM_ERROR_NONE; 
    31a0:	2300      	movs	r3, #0
    31a2:	e01a      	b.n	31da <gsm_config_module+0xc6>
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
    31a4:	2310      	movs	r3, #16
    31a6:	e018      	b.n	31da <gsm_config_module+0xc6>
														//	return GSM_ERROR_CONFIG_FAILED;
														}
													}
													else
													{
														return GSM_ERROR_CONFIG_FAILED;
    31a8:	2310      	movs	r3, #16
    31aa:	e016      	b.n	31da <gsm_config_module+0xc6>
													}
												}
												else
												{
													return GSM_ERROR_CONFIG_FAILED;
    31ac:	2310      	movs	r3, #16
    31ae:	e014      	b.n	31da <gsm_config_module+0xc6>
												}
											}
											else
											{
												return GSM_ERROR_CONFIG_FAILED;
    31b0:	2310      	movs	r3, #16
    31b2:	e012      	b.n	31da <gsm_config_module+0xc6>
											}
										}
										else
										{
											return GSM_ERROR_CONFIG_FAILED;
    31b4:	2310      	movs	r3, #16
    31b6:	e010      	b.n	31da <gsm_config_module+0xc6>
										}
									}
									else
									{
										return GSM_ERROR_CONFIG_FAILED;
    31b8:	2310      	movs	r3, #16
    31ba:	e00e      	b.n	31da <gsm_config_module+0xc6>
									}
								}
								else
								{
									return GSM_ERROR_CONFIG_FAILED;
    31bc:	2310      	movs	r3, #16
    31be:	e00c      	b.n	31da <gsm_config_module+0xc6>
								}
							}
							else
							{
								return GSM_ERROR_CONFIG_FAILED;
    31c0:	2310      	movs	r3, #16
    31c2:	e00a      	b.n	31da <gsm_config_module+0xc6>
							}
						}
						else
						{
							return GSM_ERROR_CONFIG_FAILED;
    31c4:	2310      	movs	r3, #16
    31c6:	e008      	b.n	31da <gsm_config_module+0xc6>
						}
					}
					else
					{
						return GSM_ERROR_CONFIG_FAILED;
    31c8:	2310      	movs	r3, #16
    31ca:	e006      	b.n	31da <gsm_config_module+0xc6>
					}
				}
			}
			else
			{
				return GSM_ERROR_CONFIG_FAILED;
    31cc:	2310      	movs	r3, #16
    31ce:	e004      	b.n	31da <gsm_config_module+0xc6>
			}
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
    31d0:	2310      	movs	r3, #16
    31d2:	e002      	b.n	31da <gsm_config_module+0xc6>
		}
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
    31d4:	2310      	movs	r3, #16
    31d6:	e000      	b.n	31da <gsm_config_module+0xc6>
	}
	
	return GSM_ERROR_CONFIG_FAILED;
    31d8:	2310      	movs	r3, #16
}
    31da:	0018      	movs	r0, r3
    31dc:	46bd      	mov	sp, r7
    31de:	bd80      	pop	{r7, pc}
    31e0:	000023f9 	.word	0x000023f9
    31e4:	00002605 	.word	0x00002605
    31e8:	0000f019 	.word	0x0000f019
    31ec:	000024e5 	.word	0x000024e5
    31f0:	00002635 	.word	0x00002635
    31f4:	00002491 	.word	0x00002491
    31f8:	00002575 	.word	0x00002575
    31fc:	000025a5 	.word	0x000025a5
    3200:	000025d5 	.word	0x000025d5
    3204:	00002665 	.word	0x00002665
    3208:	00002695 	.word	0x00002695
    320c:	000028dd 	.word	0x000028dd
    3210:	00002d21 	.word	0x00002d21
    3214:	00002d51 	.word	0x00002d51
    3218:	00002545 	.word	0x00002545

0000321c <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
    321c:	b580      	push	{r7, lr}
    321e:	b084      	sub	sp, #16
    3220:	af00      	add	r7, sp, #0
    3222:	6078      	str	r0, [r7, #4]
    3224:	000a      	movs	r2, r1
    3226:	1cfb      	adds	r3, r7, #3
    3228:	701a      	strb	r2, [r3, #0]
	bool line_non_empty = false;
    322a:	230f      	movs	r3, #15
    322c:	18fb      	adds	r3, r7, r3
    322e:	2200      	movs	r2, #0
    3230:	701a      	strb	r2, [r3, #0]
	while (length > 1) 
    3232:	e026      	b.n	3282 <gsm_read_response_line+0x66>
	{
		uint8_t curr_rx;
		/* Fetch next buffered character received from the module */
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
    3234:	4b1b      	ldr	r3, [pc, #108]	; (32a4 <gsm_read_response_line+0x88>)
    3236:	6818      	ldr	r0, [r3, #0]
    3238:	23fa      	movs	r3, #250	; 0xfa
    323a:	005a      	lsls	r2, r3, #1
    323c:	230e      	movs	r3, #14
    323e:	18fb      	adds	r3, r7, r3
    3240:	0019      	movs	r1, r3
    3242:	4b19      	ldr	r3, [pc, #100]	; (32a8 <gsm_read_response_line+0x8c>)
    3244:	4798      	blx	r3
    3246:	1e03      	subs	r3, r0, #0
    3248:	d101      	bne.n	324e <gsm_read_response_line+0x32>
		{
			return false;
    324a:	2300      	movs	r3, #0
    324c:	e025      	b.n	329a <gsm_read_response_line+0x7e>
		}

		if (curr_rx == '\n') 
    324e:	230e      	movs	r3, #14
    3250:	18fb      	adds	r3, r7, r3
    3252:	781b      	ldrb	r3, [r3, #0]
    3254:	2b0a      	cmp	r3, #10
    3256:	d014      	beq.n	3282 <gsm_read_response_line+0x66>
		{
			/* Ignore newline characters */
		}
		else if (curr_rx != '\r') 
    3258:	230e      	movs	r3, #14
    325a:	18fb      	adds	r3, r7, r3
    325c:	781b      	ldrb	r3, [r3, #0]
    325e:	2b0d      	cmp	r3, #13
    3260:	d014      	beq.n	328c <gsm_read_response_line+0x70>
		{
			/* Non end-of-command CR character */
			*(buffer++) = curr_rx;
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	1c5a      	adds	r2, r3, #1
    3266:	607a      	str	r2, [r7, #4]
    3268:	220e      	movs	r2, #14
    326a:	18ba      	adds	r2, r7, r2
    326c:	7812      	ldrb	r2, [r2, #0]
    326e:	701a      	strb	r2, [r3, #0]
			length--;
    3270:	1cfb      	adds	r3, r7, #3
    3272:	781a      	ldrb	r2, [r3, #0]
    3274:	1cfb      	adds	r3, r7, #3
    3276:	3a01      	subs	r2, #1
    3278:	701a      	strb	r2, [r3, #0]
			line_non_empty = true;
    327a:	230f      	movs	r3, #15
    327c:	18fb      	adds	r3, r7, r3
    327e:	2201      	movs	r2, #1
    3280:	701a      	strb	r2, [r3, #0]
	while (length > 1) 
    3282:	1cfb      	adds	r3, r7, #3
    3284:	781b      	ldrb	r3, [r3, #0]
    3286:	2b01      	cmp	r3, #1
    3288:	d8d4      	bhi.n	3234 <gsm_read_response_line+0x18>
    328a:	e000      	b.n	328e <gsm_read_response_line+0x72>
		}
		else
		{
			/* End of command, finished reading line */
			break;
    328c:	46c0      	nop			; (mov r8, r8)
		}
	}

	*(buffer) = '\0';
    328e:	687b      	ldr	r3, [r7, #4]
    3290:	2200      	movs	r2, #0
    3292:	701a      	strb	r2, [r3, #0]
	
	return line_non_empty;
    3294:	230f      	movs	r3, #15
    3296:	18fb      	adds	r3, r7, r3
    3298:	781b      	ldrb	r3, [r3, #0]
}
    329a:	0018      	movs	r0, r3
    329c:	46bd      	mov	sp, r7
    329e:	b004      	add	sp, #16
    32a0:	bd80      	pop	{r7, pc}
    32a2:	46c0      	nop			; (mov r8, r8)
    32a4:	20000220 	.word	0x20000220
    32a8:	0000e571 	.word	0x0000e571

000032ac <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
    32ac:	b580      	push	{r7, lr}
    32ae:	b084      	sub	sp, #16
    32b0:	af00      	add	r7, sp, #0
    32b2:	6078      	str	r0, [r7, #4]
	
	char sms_index = 0;
    32b4:	230f      	movs	r3, #15
    32b6:	18fb      	adds	r3, r7, r3
    32b8:	2200      	movs	r2, #0
    32ba:	701a      	strb	r2, [r3, #0]
	
	if (strstr(response,"+CMTI:"))
    32bc:	4a17      	ldr	r2, [pc, #92]	; (331c <gsm_responseLine_isNew_SMS_Received+0x70>)
    32be:	687b      	ldr	r3, [r7, #4]
    32c0:	0011      	movs	r1, r2
    32c2:	0018      	movs	r0, r3
    32c4:	4b16      	ldr	r3, [pc, #88]	; (3320 <gsm_responseLine_isNew_SMS_Received+0x74>)
    32c6:	4798      	blx	r3
    32c8:	1e03      	subs	r3, r0, #0
    32ca:	d01b      	beq.n	3304 <gsm_responseLine_isNew_SMS_Received+0x58>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
    32cc:	4a15      	ldr	r2, [pc, #84]	; (3324 <gsm_responseLine_isNew_SMS_Received+0x78>)
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	0011      	movs	r1, r2
    32d2:	0018      	movs	r0, r3
    32d4:	4b14      	ldr	r3, [pc, #80]	; (3328 <gsm_responseLine_isNew_SMS_Received+0x7c>)
    32d6:	4798      	blx	r3
    32d8:	0003      	movs	r3, r0
    32da:	60bb      	str	r3, [r7, #8]
		ptr_tocken = strtok(NULL,",");
    32dc:	4b11      	ldr	r3, [pc, #68]	; (3324 <gsm_responseLine_isNew_SMS_Received+0x78>)
    32de:	0019      	movs	r1, r3
    32e0:	2000      	movs	r0, #0
    32e2:	4b11      	ldr	r3, [pc, #68]	; (3328 <gsm_responseLine_isNew_SMS_Received+0x7c>)
    32e4:	4798      	blx	r3
    32e6:	0003      	movs	r3, r0
    32e8:	60bb      	str	r3, [r7, #8]
		
		RemoveSpaces(ptr_tocken);
    32ea:	68bb      	ldr	r3, [r7, #8]
    32ec:	0018      	movs	r0, r3
    32ee:	4b0f      	ldr	r3, [pc, #60]	; (332c <gsm_responseLine_isNew_SMS_Received+0x80>)
    32f0:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
    32f2:	68bb      	ldr	r3, [r7, #8]
    32f4:	0018      	movs	r0, r3
    32f6:	4b0e      	ldr	r3, [pc, #56]	; (3330 <gsm_responseLine_isNew_SMS_Received+0x84>)
    32f8:	4798      	blx	r3
    32fa:	0002      	movs	r2, r0
    32fc:	230f      	movs	r3, #15
    32fe:	18fb      	adds	r3, r7, r3
    3300:	701a      	strb	r2, [r3, #0]
    3302:	e003      	b.n	330c <gsm_responseLine_isNew_SMS_Received+0x60>
		
	}
	else
	{
		sms_index =  0;
    3304:	230f      	movs	r3, #15
    3306:	18fb      	adds	r3, r7, r3
    3308:	2200      	movs	r2, #0
    330a:	701a      	strb	r2, [r3, #0]
	}
	
	return sms_index;
    330c:	230f      	movs	r3, #15
    330e:	18fb      	adds	r3, r7, r3
    3310:	781b      	ldrb	r3, [r3, #0]
}
    3312:	0018      	movs	r0, r3
    3314:	46bd      	mov	sp, r7
    3316:	b004      	add	sp, #16
    3318:	bd80      	pop	{r7, pc}
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	00018c6c 	.word	0x00018c6c
    3320:	00017f97 	.word	0x00017f97
    3324:	00018aa4 	.word	0x00018aa4
    3328:	00017fc9 	.word	0x00017fc9
    332c:	00002899 	.word	0x00002899
    3330:	00017bbd 	.word	0x00017bbd

00003334 <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
    3334:	b580      	push	{r7, lr}
    3336:	b082      	sub	sp, #8
    3338:	af00      	add	r7, sp, #0
    333a:	6078      	str	r0, [r7, #4]
	if (strstr(response,"RING"))
    333c:	4a07      	ldr	r2, [pc, #28]	; (335c <gsm_responseLine_isRinging+0x28>)
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	0011      	movs	r1, r2
    3342:	0018      	movs	r0, r3
    3344:	4b06      	ldr	r3, [pc, #24]	; (3360 <gsm_responseLine_isRinging+0x2c>)
    3346:	4798      	blx	r3
    3348:	1e03      	subs	r3, r0, #0
    334a:	d001      	beq.n	3350 <gsm_responseLine_isRinging+0x1c>
	{
		return true;	
    334c:	2301      	movs	r3, #1
    334e:	e000      	b.n	3352 <gsm_responseLine_isRinging+0x1e>
	}
	else
	{
		return false;
    3350:	2300      	movs	r3, #0
	}
}
    3352:	0018      	movs	r0, r3
    3354:	46bd      	mov	sp, r7
    3356:	b002      	add	sp, #8
    3358:	bd80      	pop	{r7, pc}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	00018c74 	.word	0x00018c74
    3360:	00017f97 	.word	0x00017f97

00003364 <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
    3364:	b580      	push	{r7, lr}
    3366:	b084      	sub	sp, #16
    3368:	af00      	add	r7, sp, #0
    336a:	6078      	str	r0, [r7, #4]
    336c:	6039      	str	r1, [r7, #0]
	if(strstr(response,"+CLIP"))
    336e:	4a1e      	ldr	r2, [pc, #120]	; (33e8 <gsm_responseLine_get_IncommingCallNo+0x84>)
    3370:	687b      	ldr	r3, [r7, #4]
    3372:	0011      	movs	r1, r2
    3374:	0018      	movs	r0, r3
    3376:	4b1d      	ldr	r3, [pc, #116]	; (33ec <gsm_responseLine_get_IncommingCallNo+0x88>)
    3378:	4798      	blx	r3
    337a:	1e03      	subs	r3, r0, #0
    337c:	d02e      	beq.n	33dc <gsm_responseLine_get_IncommingCallNo+0x78>
	{
		  char *ptr_tocken;
		  ptr_tocken = strtok(response,":"); 
    337e:	4a1c      	ldr	r2, [pc, #112]	; (33f0 <gsm_responseLine_get_IncommingCallNo+0x8c>)
    3380:	687b      	ldr	r3, [r7, #4]
    3382:	0011      	movs	r1, r2
    3384:	0018      	movs	r0, r3
    3386:	4b1b      	ldr	r3, [pc, #108]	; (33f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
    3388:	4798      	blx	r3
    338a:	0003      	movs	r3, r0
    338c:	60fb      	str	r3, [r7, #12]
		  ptr_tocken = strtok(NULL,",");
    338e:	4b1a      	ldr	r3, [pc, #104]	; (33f8 <gsm_responseLine_get_IncommingCallNo+0x94>)
    3390:	0019      	movs	r1, r3
    3392:	2000      	movs	r0, #0
    3394:	4b17      	ldr	r3, [pc, #92]	; (33f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
    3396:	4798      	blx	r3
    3398:	0003      	movs	r3, r0
    339a:	60fb      	str	r3, [r7, #12]
		  ptr_tocken = strtok(ptr_tocken,"\"");
    339c:	4a17      	ldr	r2, [pc, #92]	; (33fc <gsm_responseLine_get_IncommingCallNo+0x98>)
    339e:	68fb      	ldr	r3, [r7, #12]
    33a0:	0011      	movs	r1, r2
    33a2:	0018      	movs	r0, r3
    33a4:	4b13      	ldr	r3, [pc, #76]	; (33f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
    33a6:	4798      	blx	r3
    33a8:	0003      	movs	r3, r0
    33aa:	60fb      	str	r3, [r7, #12]
		  ptr_tocken = strtok(NULL,"\"");
    33ac:	4b13      	ldr	r3, [pc, #76]	; (33fc <gsm_responseLine_get_IncommingCallNo+0x98>)
    33ae:	0019      	movs	r1, r3
    33b0:	2000      	movs	r0, #0
    33b2:	4b10      	ldr	r3, [pc, #64]	; (33f4 <gsm_responseLine_get_IncommingCallNo+0x90>)
    33b4:	4798      	blx	r3
    33b6:	0003      	movs	r3, r0
    33b8:	60fb      	str	r3, [r7, #12]
		  
		  if (!strstr(ptr_tocken,"+"))
    33ba:	68fb      	ldr	r3, [r7, #12]
    33bc:	212b      	movs	r1, #43	; 0x2b
    33be:	0018      	movs	r0, r3
    33c0:	4b0f      	ldr	r3, [pc, #60]	; (3400 <gsm_responseLine_get_IncommingCallNo+0x9c>)
    33c2:	4798      	blx	r3
    33c4:	1e03      	subs	r3, r0, #0
    33c6:	d101      	bne.n	33cc <gsm_responseLine_get_IncommingCallNo+0x68>
		  {
			  return false;
    33c8:	2300      	movs	r3, #0
    33ca:	e008      	b.n	33de <gsm_responseLine_get_IncommingCallNo+0x7a>
		  }
		  strcpy(phone_number, (char *)(ptr_tocken));		  
    33cc:	68fa      	ldr	r2, [r7, #12]
    33ce:	683b      	ldr	r3, [r7, #0]
    33d0:	0011      	movs	r1, r2
    33d2:	0018      	movs	r0, r3
    33d4:	4b0b      	ldr	r3, [pc, #44]	; (3404 <gsm_responseLine_get_IncommingCallNo+0xa0>)
    33d6:	4798      	blx	r3
		  return true;
    33d8:	2301      	movs	r3, #1
    33da:	e000      	b.n	33de <gsm_responseLine_get_IncommingCallNo+0x7a>
	}
	else
	{
		return false;
    33dc:	2300      	movs	r3, #0
	}
}
    33de:	0018      	movs	r0, r3
    33e0:	46bd      	mov	sp, r7
    33e2:	b004      	add	sp, #16
    33e4:	bd80      	pop	{r7, pc}
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	00018c7c 	.word	0x00018c7c
    33ec:	00017f97 	.word	0x00017f97
    33f0:	00018aa0 	.word	0x00018aa0
    33f4:	00017fc9 	.word	0x00017fc9
    33f8:	00018aa4 	.word	0x00018aa4
    33fc:	00018c60 	.word	0x00018c60
    3400:	00017f3b 	.word	0x00017f3b
    3404:	00017f57 	.word	0x00017f57

00003408 <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
    3408:	b580      	push	{r7, lr}
    340a:	b082      	sub	sp, #8
    340c:	af00      	add	r7, sp, #0
    340e:	6078      	str	r0, [r7, #4]
	if (strstr(response,"NO CARRIER"))
    3410:	4a16      	ldr	r2, [pc, #88]	; (346c <gsm_responseLine_isCallCut+0x64>)
    3412:	687b      	ldr	r3, [r7, #4]
    3414:	0011      	movs	r1, r2
    3416:	0018      	movs	r0, r3
    3418:	4b15      	ldr	r3, [pc, #84]	; (3470 <gsm_responseLine_isCallCut+0x68>)
    341a:	4798      	blx	r3
    341c:	1e03      	subs	r3, r0, #0
    341e:	d001      	beq.n	3424 <gsm_responseLine_isCallCut+0x1c>
	{
		return true;
    3420:	2301      	movs	r3, #1
    3422:	e01e      	b.n	3462 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"BUSY"))
    3424:	4a13      	ldr	r2, [pc, #76]	; (3474 <gsm_responseLine_isCallCut+0x6c>)
    3426:	687b      	ldr	r3, [r7, #4]
    3428:	0011      	movs	r1, r2
    342a:	0018      	movs	r0, r3
    342c:	4b10      	ldr	r3, [pc, #64]	; (3470 <gsm_responseLine_isCallCut+0x68>)
    342e:	4798      	blx	r3
    3430:	1e03      	subs	r3, r0, #0
    3432:	d001      	beq.n	3438 <gsm_responseLine_isCallCut+0x30>
	{
		return true;
    3434:	2301      	movs	r3, #1
    3436:	e014      	b.n	3462 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"NO ANSWER"))
    3438:	4a0f      	ldr	r2, [pc, #60]	; (3478 <gsm_responseLine_isCallCut+0x70>)
    343a:	687b      	ldr	r3, [r7, #4]
    343c:	0011      	movs	r1, r2
    343e:	0018      	movs	r0, r3
    3440:	4b0b      	ldr	r3, [pc, #44]	; (3470 <gsm_responseLine_isCallCut+0x68>)
    3442:	4798      	blx	r3
    3444:	1e03      	subs	r3, r0, #0
    3446:	d001      	beq.n	344c <gsm_responseLine_isCallCut+0x44>
	{
		return true;
    3448:	2301      	movs	r3, #1
    344a:	e00a      	b.n	3462 <gsm_responseLine_isCallCut+0x5a>
	}
	else if (strstr(response,"ERROR"))
    344c:	4a0b      	ldr	r2, [pc, #44]	; (347c <gsm_responseLine_isCallCut+0x74>)
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	0011      	movs	r1, r2
    3452:	0018      	movs	r0, r3
    3454:	4b06      	ldr	r3, [pc, #24]	; (3470 <gsm_responseLine_isCallCut+0x68>)
    3456:	4798      	blx	r3
    3458:	1e03      	subs	r3, r0, #0
    345a:	d001      	beq.n	3460 <gsm_responseLine_isCallCut+0x58>
	{
		return true;
    345c:	2301      	movs	r3, #1
    345e:	e000      	b.n	3462 <gsm_responseLine_isCallCut+0x5a>
	}
	else
	{
		return false;
    3460:	2300      	movs	r3, #0
	}
}
    3462:	0018      	movs	r0, r3
    3464:	46bd      	mov	sp, r7
    3466:	b002      	add	sp, #8
    3468:	bd80      	pop	{r7, pc}
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	00018c84 	.word	0x00018c84
    3470:	00017f97 	.word	0x00017f97
    3474:	00018c90 	.word	0x00018c90
    3478:	00018c98 	.word	0x00018c98
    347c:	00018980 	.word	0x00018980

00003480 <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
    3480:	b580      	push	{r7, lr}
    3482:	b082      	sub	sp, #8
    3484:	af00      	add	r7, sp, #0
    3486:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+DTMF:"))
    3488:	4a07      	ldr	r2, [pc, #28]	; (34a8 <gsm_responseLine_isNew_DTMF_Command_Received+0x28>)
    348a:	687b      	ldr	r3, [r7, #4]
    348c:	0011      	movs	r1, r2
    348e:	0018      	movs	r0, r3
    3490:	4b06      	ldr	r3, [pc, #24]	; (34ac <gsm_responseLine_isNew_DTMF_Command_Received+0x2c>)
    3492:	4798      	blx	r3
    3494:	1e03      	subs	r3, r0, #0
    3496:	d001      	beq.n	349c <gsm_responseLine_isNew_DTMF_Command_Received+0x1c>
	{
		return true;
    3498:	2301      	movs	r3, #1
    349a:	e000      	b.n	349e <gsm_responseLine_isNew_DTMF_Command_Received+0x1e>
	}
	else
	{
		return false;
    349c:	2300      	movs	r3, #0
	}
}
    349e:	0018      	movs	r0, r3
    34a0:	46bd      	mov	sp, r7
    34a2:	b002      	add	sp, #8
    34a4:	bd80      	pop	{r7, pc}
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	00018ca4 	.word	0x00018ca4
    34ac:	00017f97 	.word	0x00017f97

000034b0 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
    34b0:	b580      	push	{r7, lr}
    34b2:	b082      	sub	sp, #8
    34b4:	af00      	add	r7, sp, #0
    34b6:	6078      	str	r0, [r7, #4]
	if (strstr(response,"+CREC: 0"))
    34b8:	4a07      	ldr	r2, [pc, #28]	; (34d8 <gsm_responseLine_is_StopSound_Received+0x28>)
    34ba:	687b      	ldr	r3, [r7, #4]
    34bc:	0011      	movs	r1, r2
    34be:	0018      	movs	r0, r3
    34c0:	4b06      	ldr	r3, [pc, #24]	; (34dc <gsm_responseLine_is_StopSound_Received+0x2c>)
    34c2:	4798      	blx	r3
    34c4:	1e03      	subs	r3, r0, #0
    34c6:	d001      	beq.n	34cc <gsm_responseLine_is_StopSound_Received+0x1c>
	{
		return true;
    34c8:	2301      	movs	r3, #1
    34ca:	e000      	b.n	34ce <gsm_responseLine_is_StopSound_Received+0x1e>
	}
	else
	{
		return false;
    34cc:	2300      	movs	r3, #0
	}
}
    34ce:	0018      	movs	r0, r3
    34d0:	46bd      	mov	sp, r7
    34d2:	b002      	add	sp, #8
    34d4:	bd80      	pop	{r7, pc}
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	00018cac 	.word	0x00018cac
    34dc:	00017f97 	.word	0x00017f97

000034e0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    34e0:	b580      	push	{r7, lr}
    34e2:	b084      	sub	sp, #16
    34e4:	af00      	add	r7, sp, #0
    34e6:	0002      	movs	r2, r0
    34e8:	1dfb      	adds	r3, r7, #7
    34ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    34ec:	230f      	movs	r3, #15
    34ee:	18fb      	adds	r3, r7, r3
    34f0:	1dfa      	adds	r2, r7, #7
    34f2:	7812      	ldrb	r2, [r2, #0]
    34f4:	09d2      	lsrs	r2, r2, #7
    34f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    34f8:	230e      	movs	r3, #14
    34fa:	18fb      	adds	r3, r7, r3
    34fc:	1dfa      	adds	r2, r7, #7
    34fe:	7812      	ldrb	r2, [r2, #0]
    3500:	0952      	lsrs	r2, r2, #5
    3502:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3504:	4b0d      	ldr	r3, [pc, #52]	; (353c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3506:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3508:	230f      	movs	r3, #15
    350a:	18fb      	adds	r3, r7, r3
    350c:	781b      	ldrb	r3, [r3, #0]
    350e:	2b00      	cmp	r3, #0
    3510:	d10f      	bne.n	3532 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3512:	230f      	movs	r3, #15
    3514:	18fb      	adds	r3, r7, r3
    3516:	781b      	ldrb	r3, [r3, #0]
    3518:	009b      	lsls	r3, r3, #2
    351a:	2210      	movs	r2, #16
    351c:	4694      	mov	ip, r2
    351e:	44bc      	add	ip, r7
    3520:	4463      	add	r3, ip
    3522:	3b08      	subs	r3, #8
    3524:	681a      	ldr	r2, [r3, #0]
    3526:	230e      	movs	r3, #14
    3528:	18fb      	adds	r3, r7, r3
    352a:	781b      	ldrb	r3, [r3, #0]
    352c:	01db      	lsls	r3, r3, #7
    352e:	18d3      	adds	r3, r2, r3
    3530:	e000      	b.n	3534 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3532:	2300      	movs	r3, #0
	}
}
    3534:	0018      	movs	r0, r3
    3536:	46bd      	mov	sp, r7
    3538:	b004      	add	sp, #16
    353a:	bd80      	pop	{r7, pc}
    353c:	41004400 	.word	0x41004400

00003540 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3540:	b580      	push	{r7, lr}
    3542:	b082      	sub	sp, #8
    3544:	af00      	add	r7, sp, #0
    3546:	0002      	movs	r2, r0
    3548:	1dfb      	adds	r3, r7, #7
    354a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    354c:	1dfb      	adds	r3, r7, #7
    354e:	781b      	ldrb	r3, [r3, #0]
    3550:	0018      	movs	r0, r3
    3552:	4b03      	ldr	r3, [pc, #12]	; (3560 <port_get_group_from_gpio_pin+0x20>)
    3554:	4798      	blx	r3
    3556:	0003      	movs	r3, r0
}
    3558:	0018      	movs	r0, r3
    355a:	46bd      	mov	sp, r7
    355c:	b002      	add	sp, #8
    355e:	bd80      	pop	{r7, pc}
    3560:	000034e1 	.word	0x000034e1

00003564 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3564:	b580      	push	{r7, lr}
    3566:	b082      	sub	sp, #8
    3568:	af00      	add	r7, sp, #0
    356a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    356c:	687b      	ldr	r3, [r7, #4]
    356e:	2200      	movs	r2, #0
    3570:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3572:	687b      	ldr	r3, [r7, #4]
    3574:	2201      	movs	r2, #1
    3576:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	2200      	movs	r2, #0
    357c:	709a      	strb	r2, [r3, #2]
}
    357e:	46c0      	nop			; (mov r8, r8)
    3580:	46bd      	mov	sp, r7
    3582:	b002      	add	sp, #8
    3584:	bd80      	pop	{r7, pc}
	...

00003588 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3588:	b580      	push	{r7, lr}
    358a:	b084      	sub	sp, #16
    358c:	af00      	add	r7, sp, #0
    358e:	0002      	movs	r2, r0
    3590:	1dfb      	adds	r3, r7, #7
    3592:	701a      	strb	r2, [r3, #0]
    3594:	1dbb      	adds	r3, r7, #6
    3596:	1c0a      	adds	r2, r1, #0
    3598:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    359a:	1dfb      	adds	r3, r7, #7
    359c:	781b      	ldrb	r3, [r3, #0]
    359e:	0018      	movs	r0, r3
    35a0:	4b0d      	ldr	r3, [pc, #52]	; (35d8 <port_pin_set_output_level+0x50>)
    35a2:	4798      	blx	r3
    35a4:	0003      	movs	r3, r0
    35a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    35a8:	1dfb      	adds	r3, r7, #7
    35aa:	781b      	ldrb	r3, [r3, #0]
    35ac:	221f      	movs	r2, #31
    35ae:	4013      	ands	r3, r2
    35b0:	2201      	movs	r2, #1
    35b2:	409a      	lsls	r2, r3
    35b4:	0013      	movs	r3, r2
    35b6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    35b8:	1dbb      	adds	r3, r7, #6
    35ba:	781b      	ldrb	r3, [r3, #0]
    35bc:	2b00      	cmp	r3, #0
    35be:	d003      	beq.n	35c8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    35c0:	68fb      	ldr	r3, [r7, #12]
    35c2:	68ba      	ldr	r2, [r7, #8]
    35c4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    35c6:	e002      	b.n	35ce <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    35c8:	68fb      	ldr	r3, [r7, #12]
    35ca:	68ba      	ldr	r2, [r7, #8]
    35cc:	615a      	str	r2, [r3, #20]
}
    35ce:	46c0      	nop			; (mov r8, r8)
    35d0:	46bd      	mov	sp, r7
    35d2:	b004      	add	sp, #16
    35d4:	bd80      	pop	{r7, pc}
    35d6:	46c0      	nop			; (mov r8, r8)
    35d8:	00003541 	.word	0x00003541

000035dc <LCD_init>:
#include <asf.h>
#include "lcd_driver.h"


void LCD_init()
{
    35dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35de:	b08b      	sub	sp, #44	; 0x2c
    35e0:	af00      	add	r7, sp, #0
	uint8_t cols = LCD_COLS;
    35e2:	230b      	movs	r3, #11
    35e4:	2218      	movs	r2, #24
    35e6:	4694      	mov	ip, r2
    35e8:	44bc      	add	ip, r7
    35ea:	4463      	add	r3, ip
    35ec:	2210      	movs	r2, #16
    35ee:	701a      	strb	r2, [r3, #0]
	uint8_t lines = LCD_ROWS;
    35f0:	230a      	movs	r3, #10
    35f2:	2218      	movs	r2, #24
    35f4:	4694      	mov	ip, r2
    35f6:	44bc      	add	ip, r7
    35f8:	4463      	add	r3, ip
    35fa:	2202      	movs	r2, #2
    35fc:	701a      	strb	r2, [r3, #0]
	delay_init();
    35fe:	4b90      	ldr	r3, [pc, #576]	; (3840 <LCD_init+0x264>)
    3600:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
    3602:	4b90      	ldr	r3, [pc, #576]	; (3844 <LCD_init+0x268>)
    3604:	223f      	movs	r2, #63	; 0x3f
    3606:	701a      	strb	r2, [r3, #0]
	_enable_pin = LCD_EN_PIN;
    3608:	4b8f      	ldr	r3, [pc, #572]	; (3848 <LCD_init+0x26c>)
    360a:	223e      	movs	r2, #62	; 0x3e
    360c:	701a      	strb	r2, [r3, #0]
	
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
    360e:	4b8f      	ldr	r3, [pc, #572]	; (384c <LCD_init+0x270>)
    3610:	2221      	movs	r2, #33	; 0x21
    3612:	701a      	strb	r2, [r3, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
    3614:	4b8d      	ldr	r3, [pc, #564]	; (384c <LCD_init+0x270>)
    3616:	2220      	movs	r2, #32
    3618:	705a      	strb	r2, [r3, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
    361a:	4b8c      	ldr	r3, [pc, #560]	; (384c <LCD_init+0x270>)
    361c:	2223      	movs	r2, #35	; 0x23
    361e:	709a      	strb	r2, [r3, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
    3620:	4b8a      	ldr	r3, [pc, #552]	; (384c <LCD_init+0x270>)
    3622:	2222      	movs	r2, #34	; 0x22
    3624:	70da      	strb	r2, [r3, #3]

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    3626:	4b8a      	ldr	r3, [pc, #552]	; (3850 <LCD_init+0x274>)
    3628:	2200      	movs	r2, #0
    362a:	701a      	strb	r2, [r3, #0]
	
	if (lines > 1)
    362c:	230a      	movs	r3, #10
    362e:	2218      	movs	r2, #24
    3630:	4694      	mov	ip, r2
    3632:	44bc      	add	ip, r7
    3634:	4463      	add	r3, ip
    3636:	781b      	ldrb	r3, [r3, #0]
    3638:	2b01      	cmp	r3, #1
    363a:	d906      	bls.n	364a <LCD_init+0x6e>
	{
		_displayfunction |= LCD_2LINE;
    363c:	4b84      	ldr	r3, [pc, #528]	; (3850 <LCD_init+0x274>)
    363e:	781b      	ldrb	r3, [r3, #0]
    3640:	2208      	movs	r2, #8
    3642:	4313      	orrs	r3, r2
    3644:	b2da      	uxtb	r2, r3
    3646:	4b82      	ldr	r3, [pc, #520]	; (3850 <LCD_init+0x274>)
    3648:	701a      	strb	r2, [r3, #0]
	}
	_numlines = lines;
    364a:	4b82      	ldr	r3, [pc, #520]	; (3854 <LCD_init+0x278>)
    364c:	220a      	movs	r2, #10
    364e:	2118      	movs	r1, #24
    3650:	468c      	mov	ip, r1
    3652:	44bc      	add	ip, r7
    3654:	4462      	add	r2, ip
    3656:	7812      	ldrb	r2, [r2, #0]
    3658:	701a      	strb	r2, [r3, #0]
	LCD_setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
    365a:	230b      	movs	r3, #11
    365c:	2218      	movs	r2, #24
    365e:	4694      	mov	ip, r2
    3660:	44bc      	add	ip, r7
    3662:	4463      	add	r3, ip
    3664:	781a      	ldrb	r2, [r3, #0]
    3666:	230b      	movs	r3, #11
    3668:	2118      	movs	r1, #24
    366a:	468c      	mov	ip, r1
    366c:	44bc      	add	ip, r7
    366e:	4463      	add	r3, ip
    3670:	781b      	ldrb	r3, [r3, #0]
    3672:	3340      	adds	r3, #64	; 0x40
    3674:	2140      	movs	r1, #64	; 0x40
    3676:	2000      	movs	r0, #0
    3678:	4c77      	ldr	r4, [pc, #476]	; (3858 <LCD_init+0x27c>)
    367a:	47a0      	blx	r4
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
    367c:	231c      	movs	r3, #28
    367e:	18fb      	adds	r3, r7, r3
    3680:	0018      	movs	r0, r3
    3682:	4b76      	ldr	r3, [pc, #472]	; (385c <LCD_init+0x280>)
    3684:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    3686:	231c      	movs	r3, #28
    3688:	18fb      	adds	r3, r7, r3
    368a:	2201      	movs	r2, #1
    368c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(_rs_pin,&config_port_pin);
    368e:	4b6d      	ldr	r3, [pc, #436]	; (3844 <LCD_init+0x268>)
    3690:	781b      	ldrb	r3, [r3, #0]
    3692:	221c      	movs	r2, #28
    3694:	18ba      	adds	r2, r7, r2
    3696:	0011      	movs	r1, r2
    3698:	0018      	movs	r0, r3
    369a:	4b71      	ldr	r3, [pc, #452]	; (3860 <LCD_init+0x284>)
    369c:	4798      	blx	r3
	port_pin_set_config(_enable_pin,&config_port_pin);
    369e:	4b6a      	ldr	r3, [pc, #424]	; (3848 <LCD_init+0x26c>)
    36a0:	781b      	ldrb	r3, [r3, #0]
    36a2:	221c      	movs	r2, #28
    36a4:	18ba      	adds	r2, r7, r2
    36a6:	0011      	movs	r1, r2
    36a8:	0018      	movs	r0, r3
    36aa:	4b6d      	ldr	r3, [pc, #436]	; (3860 <LCD_init+0x284>)
    36ac:	4798      	blx	r3
	//port_pin_set_config(LCD_BACKLIGHT,&config_port_pin);
	
	for (int i=0; i<4; ++i)
    36ae:	2300      	movs	r3, #0
    36b0:	627b      	str	r3, [r7, #36]	; 0x24
    36b2:	e00c      	b.n	36ce <LCD_init+0xf2>
	{
		port_pin_set_config(_data_pins[i],&config_port_pin);
    36b4:	4a65      	ldr	r2, [pc, #404]	; (384c <LCD_init+0x270>)
    36b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36b8:	18d3      	adds	r3, r2, r3
    36ba:	781b      	ldrb	r3, [r3, #0]
    36bc:	221c      	movs	r2, #28
    36be:	18ba      	adds	r2, r7, r2
    36c0:	0011      	movs	r1, r2
    36c2:	0018      	movs	r0, r3
    36c4:	4b66      	ldr	r3, [pc, #408]	; (3860 <LCD_init+0x284>)
    36c6:	4798      	blx	r3
	for (int i=0; i<4; ++i)
    36c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36ca:	3301      	adds	r3, #1
    36cc:	627b      	str	r3, [r7, #36]	; 0x24
    36ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36d0:	2b03      	cmp	r3, #3
    36d2:	ddef      	ble.n	36b4 <LCD_init+0xd8>
	}
	delay_us(50000);
    36d4:	2000      	movs	r0, #0
    36d6:	4b63      	ldr	r3, [pc, #396]	; (3864 <LCD_init+0x288>)
    36d8:	4798      	blx	r3
    36da:	0003      	movs	r3, r0
    36dc:	613b      	str	r3, [r7, #16]
    36de:	2300      	movs	r3, #0
    36e0:	617b      	str	r3, [r7, #20]
    36e2:	4c61      	ldr	r4, [pc, #388]	; (3868 <LCD_init+0x28c>)
    36e4:	4a61      	ldr	r2, [pc, #388]	; (386c <LCD_init+0x290>)
    36e6:	2300      	movs	r3, #0
    36e8:	6938      	ldr	r0, [r7, #16]
    36ea:	6979      	ldr	r1, [r7, #20]
    36ec:	47a0      	blx	r4
    36ee:	0003      	movs	r3, r0
    36f0:	000c      	movs	r4, r1
    36f2:	0019      	movs	r1, r3
    36f4:	0022      	movs	r2, r4
    36f6:	4b5e      	ldr	r3, [pc, #376]	; (3870 <LCD_init+0x294>)
    36f8:	2400      	movs	r4, #0
    36fa:	18c9      	adds	r1, r1, r3
    36fc:	4162      	adcs	r2, r4
    36fe:	0008      	movs	r0, r1
    3700:	0011      	movs	r1, r2
    3702:	4c5c      	ldr	r4, [pc, #368]	; (3874 <LCD_init+0x298>)
    3704:	4a5c      	ldr	r2, [pc, #368]	; (3878 <LCD_init+0x29c>)
    3706:	2300      	movs	r3, #0
    3708:	47a0      	blx	r4
    370a:	0003      	movs	r3, r0
    370c:	000c      	movs	r4, r1
    370e:	0018      	movs	r0, r3
    3710:	4b5a      	ldr	r3, [pc, #360]	; (387c <LCD_init+0x2a0>)
    3712:	4798      	blx	r3
	port_pin_set_output_level(_rs_pin,LOW);
    3714:	4b4b      	ldr	r3, [pc, #300]	; (3844 <LCD_init+0x268>)
    3716:	781b      	ldrb	r3, [r3, #0]
    3718:	2100      	movs	r1, #0
    371a:	0018      	movs	r0, r3
    371c:	4b58      	ldr	r3, [pc, #352]	; (3880 <LCD_init+0x2a4>)
    371e:	4798      	blx	r3
	port_pin_set_output_level(_enable_pin,LOW);
    3720:	4b49      	ldr	r3, [pc, #292]	; (3848 <LCD_init+0x26c>)
    3722:	781b      	ldrb	r3, [r3, #0]
    3724:	2100      	movs	r1, #0
    3726:	0018      	movs	r0, r3
    3728:	4b55      	ldr	r3, [pc, #340]	; (3880 <LCD_init+0x2a4>)
    372a:	4798      	blx	r3
	//port_pin_set_output_level(LCD_BACKLIGHT,LOW);
	
	 write4bits(0x03);
    372c:	2003      	movs	r0, #3
    372e:	4b55      	ldr	r3, [pc, #340]	; (3884 <LCD_init+0x2a8>)
    3730:	4798      	blx	r3
	 delay_us(4500); 
    3732:	2000      	movs	r0, #0
    3734:	4b4b      	ldr	r3, [pc, #300]	; (3864 <LCD_init+0x288>)
    3736:	4798      	blx	r3
    3738:	0003      	movs	r3, r0
    373a:	60bb      	str	r3, [r7, #8]
    373c:	2300      	movs	r3, #0
    373e:	60fb      	str	r3, [r7, #12]
    3740:	4c49      	ldr	r4, [pc, #292]	; (3868 <LCD_init+0x28c>)
    3742:	4a51      	ldr	r2, [pc, #324]	; (3888 <LCD_init+0x2ac>)
    3744:	2300      	movs	r3, #0
    3746:	68b8      	ldr	r0, [r7, #8]
    3748:	68f9      	ldr	r1, [r7, #12]
    374a:	47a0      	blx	r4
    374c:	0003      	movs	r3, r0
    374e:	000c      	movs	r4, r1
    3750:	0019      	movs	r1, r3
    3752:	0022      	movs	r2, r4
    3754:	4b46      	ldr	r3, [pc, #280]	; (3870 <LCD_init+0x294>)
    3756:	2400      	movs	r4, #0
    3758:	18c9      	adds	r1, r1, r3
    375a:	4162      	adcs	r2, r4
    375c:	0008      	movs	r0, r1
    375e:	0011      	movs	r1, r2
    3760:	4c44      	ldr	r4, [pc, #272]	; (3874 <LCD_init+0x298>)
    3762:	4a45      	ldr	r2, [pc, #276]	; (3878 <LCD_init+0x29c>)
    3764:	2300      	movs	r3, #0
    3766:	47a0      	blx	r4
    3768:	0003      	movs	r3, r0
    376a:	000c      	movs	r4, r1
    376c:	0018      	movs	r0, r3
    376e:	4b43      	ldr	r3, [pc, #268]	; (387c <LCD_init+0x2a0>)
    3770:	4798      	blx	r3
	 
	 write4bits(0x03);
    3772:	2003      	movs	r0, #3
    3774:	4b43      	ldr	r3, [pc, #268]	; (3884 <LCD_init+0x2a8>)
    3776:	4798      	blx	r3
	 delay_us(4500); 
    3778:	2000      	movs	r0, #0
    377a:	4b3a      	ldr	r3, [pc, #232]	; (3864 <LCD_init+0x288>)
    377c:	4798      	blx	r3
    377e:	0003      	movs	r3, r0
    3780:	603b      	str	r3, [r7, #0]
    3782:	2300      	movs	r3, #0
    3784:	607b      	str	r3, [r7, #4]
    3786:	4c38      	ldr	r4, [pc, #224]	; (3868 <LCD_init+0x28c>)
    3788:	4a3f      	ldr	r2, [pc, #252]	; (3888 <LCD_init+0x2ac>)
    378a:	2300      	movs	r3, #0
    378c:	6838      	ldr	r0, [r7, #0]
    378e:	6879      	ldr	r1, [r7, #4]
    3790:	47a0      	blx	r4
    3792:	0003      	movs	r3, r0
    3794:	000c      	movs	r4, r1
    3796:	0019      	movs	r1, r3
    3798:	0022      	movs	r2, r4
    379a:	4b35      	ldr	r3, [pc, #212]	; (3870 <LCD_init+0x294>)
    379c:	2400      	movs	r4, #0
    379e:	18c9      	adds	r1, r1, r3
    37a0:	4162      	adcs	r2, r4
    37a2:	0008      	movs	r0, r1
    37a4:	0011      	movs	r1, r2
    37a6:	4c33      	ldr	r4, [pc, #204]	; (3874 <LCD_init+0x298>)
    37a8:	4a33      	ldr	r2, [pc, #204]	; (3878 <LCD_init+0x29c>)
    37aa:	2300      	movs	r3, #0
    37ac:	47a0      	blx	r4
    37ae:	0003      	movs	r3, r0
    37b0:	000c      	movs	r4, r1
    37b2:	0018      	movs	r0, r3
    37b4:	4b31      	ldr	r3, [pc, #196]	; (387c <LCD_init+0x2a0>)
    37b6:	4798      	blx	r3
	
	 write4bits(0x03);
    37b8:	2003      	movs	r0, #3
    37ba:	4b32      	ldr	r3, [pc, #200]	; (3884 <LCD_init+0x2a8>)
    37bc:	4798      	blx	r3
	 delay_us(150);
    37be:	2000      	movs	r0, #0
    37c0:	4b28      	ldr	r3, [pc, #160]	; (3864 <LCD_init+0x288>)
    37c2:	4798      	blx	r3
    37c4:	0003      	movs	r3, r0
    37c6:	001d      	movs	r5, r3
    37c8:	2300      	movs	r3, #0
    37ca:	001e      	movs	r6, r3
    37cc:	4c26      	ldr	r4, [pc, #152]	; (3868 <LCD_init+0x28c>)
    37ce:	2296      	movs	r2, #150	; 0x96
    37d0:	2300      	movs	r3, #0
    37d2:	0028      	movs	r0, r5
    37d4:	0031      	movs	r1, r6
    37d6:	47a0      	blx	r4
    37d8:	0003      	movs	r3, r0
    37da:	000c      	movs	r4, r1
    37dc:	0019      	movs	r1, r3
    37de:	0022      	movs	r2, r4
    37e0:	4b23      	ldr	r3, [pc, #140]	; (3870 <LCD_init+0x294>)
    37e2:	2400      	movs	r4, #0
    37e4:	18c9      	adds	r1, r1, r3
    37e6:	4162      	adcs	r2, r4
    37e8:	0008      	movs	r0, r1
    37ea:	0011      	movs	r1, r2
    37ec:	4c21      	ldr	r4, [pc, #132]	; (3874 <LCD_init+0x298>)
    37ee:	4a22      	ldr	r2, [pc, #136]	; (3878 <LCD_init+0x29c>)
    37f0:	2300      	movs	r3, #0
    37f2:	47a0      	blx	r4
    37f4:	0003      	movs	r3, r0
    37f6:	000c      	movs	r4, r1
    37f8:	0018      	movs	r0, r3
    37fa:	4b20      	ldr	r3, [pc, #128]	; (387c <LCD_init+0x2a0>)
    37fc:	4798      	blx	r3

	 write4bits(0x02);
    37fe:	2002      	movs	r0, #2
    3800:	4b20      	ldr	r3, [pc, #128]	; (3884 <LCD_init+0x2a8>)
    3802:	4798      	blx	r3

	 command(LCD_FUNCTIONSET | _displayfunction);
    3804:	4b12      	ldr	r3, [pc, #72]	; (3850 <LCD_init+0x274>)
    3806:	781b      	ldrb	r3, [r3, #0]
    3808:	2220      	movs	r2, #32
    380a:	4313      	orrs	r3, r2
    380c:	b2db      	uxtb	r3, r3
    380e:	0018      	movs	r0, r3
    3810:	4b1e      	ldr	r3, [pc, #120]	; (388c <LCD_init+0x2b0>)
    3812:	4798      	blx	r3
	 
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    3814:	4b1e      	ldr	r3, [pc, #120]	; (3890 <LCD_init+0x2b4>)
    3816:	2204      	movs	r2, #4
    3818:	701a      	strb	r2, [r3, #0]
	LCD_display();
    381a:	4b1e      	ldr	r3, [pc, #120]	; (3894 <LCD_init+0x2b8>)
    381c:	4798      	blx	r3
	LCD_clear();
    381e:	4b1e      	ldr	r3, [pc, #120]	; (3898 <LCD_init+0x2bc>)
    3820:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    3822:	4b1e      	ldr	r3, [pc, #120]	; (389c <LCD_init+0x2c0>)
    3824:	2202      	movs	r2, #2
    3826:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
    3828:	4b1c      	ldr	r3, [pc, #112]	; (389c <LCD_init+0x2c0>)
    382a:	781b      	ldrb	r3, [r3, #0]
    382c:	2204      	movs	r2, #4
    382e:	4313      	orrs	r3, r2
    3830:	b2db      	uxtb	r3, r3
    3832:	0018      	movs	r0, r3
    3834:	4b15      	ldr	r3, [pc, #84]	; (388c <LCD_init+0x2b0>)
    3836:	4798      	blx	r3
}
    3838:	46c0      	nop			; (mov r8, r8)
    383a:	46bd      	mov	sp, r7
    383c:	b00b      	add	sp, #44	; 0x2c
    383e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3840:	00011895 	.word	0x00011895
    3844:	200006d3 	.word	0x200006d3
    3848:	200006d2 	.word	0x200006d2
    384c:	200006cc 	.word	0x200006cc
    3850:	200006d1 	.word	0x200006d1
    3854:	200006ca 	.word	0x200006ca
    3858:	0000394d 	.word	0x0000394d
    385c:	00003565 	.word	0x00003565
    3860:	00011ee9 	.word	0x00011ee9
    3864:	00013855 	.word	0x00013855
    3868:	00015809 	.word	0x00015809
    386c:	0000c350 	.word	0x0000c350
    3870:	006acfbf 	.word	0x006acfbf
    3874:	000157c9 	.word	0x000157c9
    3878:	006acfc0 	.word	0x006acfc0
    387c:	20000001 	.word	0x20000001
    3880:	00003589 	.word	0x00003589
    3884:	00003989 	.word	0x00003989
    3888:	00001194 	.word	0x00001194
    388c:	00003acd 	.word	0x00003acd
    3890:	200006c9 	.word	0x200006c9
    3894:	00003cb5 	.word	0x00003cb5
    3898:	00003b6d 	.word	0x00003b6d
    389c:	200006d0 	.word	0x200006d0

000038a0 <LCD_PWR_CONFIG>:

void LCD_PWR_CONFIG()
{
    38a0:	b580      	push	{r7, lr}
    38a2:	b082      	sub	sp, #8
    38a4:	af00      	add	r7, sp, #0
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
    38a6:	1d3b      	adds	r3, r7, #4
    38a8:	0018      	movs	r0, r3
    38aa:	4b08      	ldr	r3, [pc, #32]	; (38cc <LCD_PWR_CONFIG+0x2c>)
    38ac:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
    38ae:	1d3b      	adds	r3, r7, #4
    38b0:	2201      	movs	r2, #1
    38b2:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    38b4:	1d3b      	adds	r3, r7, #4
    38b6:	2200      	movs	r2, #0
    38b8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
    38ba:	1d3b      	adds	r3, r7, #4
    38bc:	0019      	movs	r1, r3
    38be:	2024      	movs	r0, #36	; 0x24
    38c0:	4b03      	ldr	r3, [pc, #12]	; (38d0 <LCD_PWR_CONFIG+0x30>)
    38c2:	4798      	blx	r3
}
    38c4:	46c0      	nop			; (mov r8, r8)
    38c6:	46bd      	mov	sp, r7
    38c8:	b002      	add	sp, #8
    38ca:	bd80      	pop	{r7, pc}
    38cc:	00003565 	.word	0x00003565
    38d0:	00011ee9 	.word	0x00011ee9

000038d4 <LCD_PWR_EN>:

void LCD_PWR_EN()
{
    38d4:	b580      	push	{r7, lr}
    38d6:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
    38d8:	2101      	movs	r1, #1
    38da:	2024      	movs	r0, #36	; 0x24
    38dc:	4b02      	ldr	r3, [pc, #8]	; (38e8 <LCD_PWR_EN+0x14>)
    38de:	4798      	blx	r3
}
    38e0:	46c0      	nop			; (mov r8, r8)
    38e2:	46bd      	mov	sp, r7
    38e4:	bd80      	pop	{r7, pc}
    38e6:	46c0      	nop			; (mov r8, r8)
    38e8:	00003589 	.word	0x00003589

000038ec <LCD_PWR_DIS>:
void LCD_PWR_DIS()
{
    38ec:	b580      	push	{r7, lr}
    38ee:	b082      	sub	sp, #8
    38f0:	af00      	add	r7, sp, #0
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
    38f2:	2100      	movs	r1, #0
    38f4:	2024      	movs	r0, #36	; 0x24
    38f6:	4b11      	ldr	r3, [pc, #68]	; (393c <LCD_PWR_DIS+0x50>)
    38f8:	4798      	blx	r3
	
	for (int i = 0; i < 4; i++)
    38fa:	2300      	movs	r3, #0
    38fc:	607b      	str	r3, [r7, #4]
    38fe:	e00a      	b.n	3916 <LCD_PWR_DIS+0x2a>
	{
		port_pin_set_output_level(_data_pins[i],LOW);
    3900:	4a0f      	ldr	r2, [pc, #60]	; (3940 <LCD_PWR_DIS+0x54>)
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	18d3      	adds	r3, r2, r3
    3906:	781b      	ldrb	r3, [r3, #0]
    3908:	2100      	movs	r1, #0
    390a:	0018      	movs	r0, r3
    390c:	4b0b      	ldr	r3, [pc, #44]	; (393c <LCD_PWR_DIS+0x50>)
    390e:	4798      	blx	r3
	for (int i = 0; i < 4; i++)
    3910:	687b      	ldr	r3, [r7, #4]
    3912:	3301      	adds	r3, #1
    3914:	607b      	str	r3, [r7, #4]
    3916:	687b      	ldr	r3, [r7, #4]
    3918:	2b03      	cmp	r3, #3
    391a:	ddf1      	ble.n	3900 <LCD_PWR_DIS+0x14>
	}
	
	port_pin_set_output_level(_enable_pin, LOW);
    391c:	4b09      	ldr	r3, [pc, #36]	; (3944 <LCD_PWR_DIS+0x58>)
    391e:	781b      	ldrb	r3, [r3, #0]
    3920:	2100      	movs	r1, #0
    3922:	0018      	movs	r0, r3
    3924:	4b05      	ldr	r3, [pc, #20]	; (393c <LCD_PWR_DIS+0x50>)
    3926:	4798      	blx	r3
	
	port_pin_set_output_level(_rs_pin, LOW);
    3928:	4b07      	ldr	r3, [pc, #28]	; (3948 <LCD_PWR_DIS+0x5c>)
    392a:	781b      	ldrb	r3, [r3, #0]
    392c:	2100      	movs	r1, #0
    392e:	0018      	movs	r0, r3
    3930:	4b02      	ldr	r3, [pc, #8]	; (393c <LCD_PWR_DIS+0x50>)
    3932:	4798      	blx	r3
	
}
    3934:	46c0      	nop			; (mov r8, r8)
    3936:	46bd      	mov	sp, r7
    3938:	b002      	add	sp, #8
    393a:	bd80      	pop	{r7, pc}
    393c:	00003589 	.word	0x00003589
    3940:	200006cc 	.word	0x200006cc
    3944:	200006d2 	.word	0x200006d2
    3948:	200006d3 	.word	0x200006d3

0000394c <LCD_setRowOffsets>:

void LCD_setRowOffsets(int row0, int row1, int row2, int row3)
{
    394c:	b580      	push	{r7, lr}
    394e:	b084      	sub	sp, #16
    3950:	af00      	add	r7, sp, #0
    3952:	60f8      	str	r0, [r7, #12]
    3954:	60b9      	str	r1, [r7, #8]
    3956:	607a      	str	r2, [r7, #4]
    3958:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row0;
    395a:	68fb      	ldr	r3, [r7, #12]
    395c:	b2da      	uxtb	r2, r3
    395e:	4b09      	ldr	r3, [pc, #36]	; (3984 <LCD_setRowOffsets+0x38>)
    3960:	701a      	strb	r2, [r3, #0]
	_row_offsets[1] = row1;
    3962:	68bb      	ldr	r3, [r7, #8]
    3964:	b2da      	uxtb	r2, r3
    3966:	4b07      	ldr	r3, [pc, #28]	; (3984 <LCD_setRowOffsets+0x38>)
    3968:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	b2da      	uxtb	r2, r3
    396e:	4b05      	ldr	r3, [pc, #20]	; (3984 <LCD_setRowOffsets+0x38>)
    3970:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
    3972:	683b      	ldr	r3, [r7, #0]
    3974:	b2da      	uxtb	r2, r3
    3976:	4b03      	ldr	r3, [pc, #12]	; (3984 <LCD_setRowOffsets+0x38>)
    3978:	70da      	strb	r2, [r3, #3]
}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	46bd      	mov	sp, r7
    397e:	b004      	add	sp, #16
    3980:	bd80      	pop	{r7, pc}
    3982:	46c0      	nop			; (mov r8, r8)
    3984:	200006c4 	.word	0x200006c4

00003988 <write4bits>:

void write4bits(uint8_t value)
{
    3988:	b580      	push	{r7, lr}
    398a:	b084      	sub	sp, #16
    398c:	af00      	add	r7, sp, #0
    398e:	0002      	movs	r2, r0
    3990:	1dfb      	adds	r3, r7, #7
    3992:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) 
    3994:	2300      	movs	r3, #0
    3996:	60fb      	str	r3, [r7, #12]
    3998:	e013      	b.n	39c2 <write4bits+0x3a>
	{
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
    399a:	4a0e      	ldr	r2, [pc, #56]	; (39d4 <write4bits+0x4c>)
    399c:	68fb      	ldr	r3, [r7, #12]
    399e:	18d3      	adds	r3, r2, r3
    39a0:	7818      	ldrb	r0, [r3, #0]
    39a2:	1dfb      	adds	r3, r7, #7
    39a4:	781a      	ldrb	r2, [r3, #0]
    39a6:	68fb      	ldr	r3, [r7, #12]
    39a8:	411a      	asrs	r2, r3
    39aa:	0013      	movs	r3, r2
    39ac:	2201      	movs	r2, #1
    39ae:	4013      	ands	r3, r2
    39b0:	1e5a      	subs	r2, r3, #1
    39b2:	4193      	sbcs	r3, r2
    39b4:	b2db      	uxtb	r3, r3
    39b6:	0019      	movs	r1, r3
    39b8:	4b07      	ldr	r3, [pc, #28]	; (39d8 <write4bits+0x50>)
    39ba:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
    39bc:	68fb      	ldr	r3, [r7, #12]
    39be:	3301      	adds	r3, #1
    39c0:	60fb      	str	r3, [r7, #12]
    39c2:	68fb      	ldr	r3, [r7, #12]
    39c4:	2b03      	cmp	r3, #3
    39c6:	dde8      	ble.n	399a <write4bits+0x12>
	}
	pulseEnable();
    39c8:	4b04      	ldr	r3, [pc, #16]	; (39dc <write4bits+0x54>)
    39ca:	4798      	blx	r3
}
    39cc:	46c0      	nop			; (mov r8, r8)
    39ce:	46bd      	mov	sp, r7
    39d0:	b004      	add	sp, #16
    39d2:	bd80      	pop	{r7, pc}
    39d4:	200006cc 	.word	0x200006cc
    39d8:	00003589 	.word	0x00003589
    39dc:	000039e1 	.word	0x000039e1

000039e0 <pulseEnable>:



void pulseEnable(void)
{
    39e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39e2:	b085      	sub	sp, #20
    39e4:	af00      	add	r7, sp, #0
 	port_pin_set_output_level(_enable_pin, LOW);
    39e6:	4b31      	ldr	r3, [pc, #196]	; (3aac <pulseEnable+0xcc>)
    39e8:	781b      	ldrb	r3, [r3, #0]
    39ea:	2100      	movs	r1, #0
    39ec:	0018      	movs	r0, r3
    39ee:	4b30      	ldr	r3, [pc, #192]	; (3ab0 <pulseEnable+0xd0>)
    39f0:	4798      	blx	r3
 	delay_us(1);
    39f2:	2000      	movs	r0, #0
    39f4:	4b2f      	ldr	r3, [pc, #188]	; (3ab4 <pulseEnable+0xd4>)
    39f6:	4798      	blx	r3
    39f8:	0003      	movs	r3, r0
    39fa:	60bb      	str	r3, [r7, #8]
    39fc:	2300      	movs	r3, #0
    39fe:	60fb      	str	r3, [r7, #12]
    3a00:	4b2d      	ldr	r3, [pc, #180]	; (3ab8 <pulseEnable+0xd8>)
    3a02:	2400      	movs	r4, #0
    3a04:	68b8      	ldr	r0, [r7, #8]
    3a06:	68f9      	ldr	r1, [r7, #12]
    3a08:	18c0      	adds	r0, r0, r3
    3a0a:	4161      	adcs	r1, r4
    3a0c:	4c2b      	ldr	r4, [pc, #172]	; (3abc <pulseEnable+0xdc>)
    3a0e:	4a2c      	ldr	r2, [pc, #176]	; (3ac0 <pulseEnable+0xe0>)
    3a10:	2300      	movs	r3, #0
    3a12:	47a0      	blx	r4
    3a14:	0003      	movs	r3, r0
    3a16:	000c      	movs	r4, r1
    3a18:	0018      	movs	r0, r3
    3a1a:	4b2a      	ldr	r3, [pc, #168]	; (3ac4 <pulseEnable+0xe4>)
    3a1c:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
    3a1e:	4b23      	ldr	r3, [pc, #140]	; (3aac <pulseEnable+0xcc>)
    3a20:	781b      	ldrb	r3, [r3, #0]
    3a22:	2101      	movs	r1, #1
    3a24:	0018      	movs	r0, r3
    3a26:	4b22      	ldr	r3, [pc, #136]	; (3ab0 <pulseEnable+0xd0>)
    3a28:	4798      	blx	r3
 	delay_us(1);
    3a2a:	2000      	movs	r0, #0
    3a2c:	4b21      	ldr	r3, [pc, #132]	; (3ab4 <pulseEnable+0xd4>)
    3a2e:	4798      	blx	r3
    3a30:	0003      	movs	r3, r0
    3a32:	001d      	movs	r5, r3
    3a34:	2300      	movs	r3, #0
    3a36:	001e      	movs	r6, r3
    3a38:	4b1f      	ldr	r3, [pc, #124]	; (3ab8 <pulseEnable+0xd8>)
    3a3a:	2400      	movs	r4, #0
    3a3c:	0028      	movs	r0, r5
    3a3e:	0031      	movs	r1, r6
    3a40:	18c0      	adds	r0, r0, r3
    3a42:	4161      	adcs	r1, r4
    3a44:	4c1d      	ldr	r4, [pc, #116]	; (3abc <pulseEnable+0xdc>)
    3a46:	4a1e      	ldr	r2, [pc, #120]	; (3ac0 <pulseEnable+0xe0>)
    3a48:	2300      	movs	r3, #0
    3a4a:	47a0      	blx	r4
    3a4c:	0003      	movs	r3, r0
    3a4e:	000c      	movs	r4, r1
    3a50:	0018      	movs	r0, r3
    3a52:	4b1c      	ldr	r3, [pc, #112]	; (3ac4 <pulseEnable+0xe4>)
    3a54:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
    3a56:	4b15      	ldr	r3, [pc, #84]	; (3aac <pulseEnable+0xcc>)
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	2100      	movs	r1, #0
    3a5c:	0018      	movs	r0, r3
    3a5e:	4b14      	ldr	r3, [pc, #80]	; (3ab0 <pulseEnable+0xd0>)
    3a60:	4798      	blx	r3
 	delay_us(100);
    3a62:	2000      	movs	r0, #0
    3a64:	4b13      	ldr	r3, [pc, #76]	; (3ab4 <pulseEnable+0xd4>)
    3a66:	4798      	blx	r3
    3a68:	0003      	movs	r3, r0
    3a6a:	603b      	str	r3, [r7, #0]
    3a6c:	2300      	movs	r3, #0
    3a6e:	607b      	str	r3, [r7, #4]
    3a70:	4c15      	ldr	r4, [pc, #84]	; (3ac8 <pulseEnable+0xe8>)
    3a72:	2264      	movs	r2, #100	; 0x64
    3a74:	2300      	movs	r3, #0
    3a76:	6838      	ldr	r0, [r7, #0]
    3a78:	6879      	ldr	r1, [r7, #4]
    3a7a:	47a0      	blx	r4
    3a7c:	0003      	movs	r3, r0
    3a7e:	000c      	movs	r4, r1
    3a80:	0019      	movs	r1, r3
    3a82:	0022      	movs	r2, r4
    3a84:	4b0c      	ldr	r3, [pc, #48]	; (3ab8 <pulseEnable+0xd8>)
    3a86:	2400      	movs	r4, #0
    3a88:	18c9      	adds	r1, r1, r3
    3a8a:	4162      	adcs	r2, r4
    3a8c:	0008      	movs	r0, r1
    3a8e:	0011      	movs	r1, r2
    3a90:	4c0a      	ldr	r4, [pc, #40]	; (3abc <pulseEnable+0xdc>)
    3a92:	4a0b      	ldr	r2, [pc, #44]	; (3ac0 <pulseEnable+0xe0>)
    3a94:	2300      	movs	r3, #0
    3a96:	47a0      	blx	r4
    3a98:	0003      	movs	r3, r0
    3a9a:	000c      	movs	r4, r1
    3a9c:	0018      	movs	r0, r3
    3a9e:	4b09      	ldr	r3, [pc, #36]	; (3ac4 <pulseEnable+0xe4>)
    3aa0:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
    3aa2:	46c0      	nop			; (mov r8, r8)
    3aa4:	46bd      	mov	sp, r7
    3aa6:	b005      	add	sp, #20
    3aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	200006d2 	.word	0x200006d2
    3ab0:	00003589 	.word	0x00003589
    3ab4:	00013855 	.word	0x00013855
    3ab8:	006acfbf 	.word	0x006acfbf
    3abc:	000157c9 	.word	0x000157c9
    3ac0:	006acfc0 	.word	0x006acfc0
    3ac4:	20000001 	.word	0x20000001
    3ac8:	00015809 	.word	0x00015809

00003acc <command>:

inline void command(uint8_t value) 
{
    3acc:	b580      	push	{r7, lr}
    3ace:	b082      	sub	sp, #8
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	0002      	movs	r2, r0
    3ad4:	1dfb      	adds	r3, r7, #7
    3ad6:	701a      	strb	r2, [r3, #0]
	send(value, LOW);
    3ad8:	1dfb      	adds	r3, r7, #7
    3ada:	781b      	ldrb	r3, [r3, #0]
    3adc:	2100      	movs	r1, #0
    3ade:	0018      	movs	r0, r3
    3ae0:	4b02      	ldr	r3, [pc, #8]	; (3aec <command+0x20>)
    3ae2:	4798      	blx	r3
}
    3ae4:	46c0      	nop			; (mov r8, r8)
    3ae6:	46bd      	mov	sp, r7
    3ae8:	b002      	add	sp, #8
    3aea:	bd80      	pop	{r7, pc}
    3aec:	00003b19 	.word	0x00003b19

00003af0 <LCD_write>:

inline size_t LCD_write(uint8_t value)
{
    3af0:	b580      	push	{r7, lr}
    3af2:	b082      	sub	sp, #8
    3af4:	af00      	add	r7, sp, #0
    3af6:	0002      	movs	r2, r0
    3af8:	1dfb      	adds	r3, r7, #7
    3afa:	701a      	strb	r2, [r3, #0]
	send(value, HIGH);
    3afc:	1dfb      	adds	r3, r7, #7
    3afe:	781b      	ldrb	r3, [r3, #0]
    3b00:	2101      	movs	r1, #1
    3b02:	0018      	movs	r0, r3
    3b04:	4b03      	ldr	r3, [pc, #12]	; (3b14 <LCD_write+0x24>)
    3b06:	4798      	blx	r3
	return 1;
    3b08:	2301      	movs	r3, #1
}
    3b0a:	0018      	movs	r0, r3
    3b0c:	46bd      	mov	sp, r7
    3b0e:	b002      	add	sp, #8
    3b10:	bd80      	pop	{r7, pc}
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	00003b19 	.word	0x00003b19

00003b18 <send>:

void send(uint8_t value, uint8_t mode) 
{
    3b18:	b580      	push	{r7, lr}
    3b1a:	b082      	sub	sp, #8
    3b1c:	af00      	add	r7, sp, #0
    3b1e:	0002      	movs	r2, r0
    3b20:	1dfb      	adds	r3, r7, #7
    3b22:	701a      	strb	r2, [r3, #0]
    3b24:	1dbb      	adds	r3, r7, #6
    3b26:	1c0a      	adds	r2, r1, #0
    3b28:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(_rs_pin, mode);
    3b2a:	4b0d      	ldr	r3, [pc, #52]	; (3b60 <send+0x48>)
    3b2c:	781a      	ldrb	r2, [r3, #0]
    3b2e:	1dbb      	adds	r3, r7, #6
    3b30:	781b      	ldrb	r3, [r3, #0]
    3b32:	1e59      	subs	r1, r3, #1
    3b34:	418b      	sbcs	r3, r1
    3b36:	b2db      	uxtb	r3, r3
    3b38:	0019      	movs	r1, r3
    3b3a:	0010      	movs	r0, r2
    3b3c:	4b09      	ldr	r3, [pc, #36]	; (3b64 <send+0x4c>)
    3b3e:	4798      	blx	r3
	
	{
		write4bits(value>>4);
    3b40:	1dfb      	adds	r3, r7, #7
    3b42:	781b      	ldrb	r3, [r3, #0]
    3b44:	091b      	lsrs	r3, r3, #4
    3b46:	b2db      	uxtb	r3, r3
    3b48:	0018      	movs	r0, r3
    3b4a:	4b07      	ldr	r3, [pc, #28]	; (3b68 <send+0x50>)
    3b4c:	4798      	blx	r3
		write4bits(value);
    3b4e:	1dfb      	adds	r3, r7, #7
    3b50:	781b      	ldrb	r3, [r3, #0]
    3b52:	0018      	movs	r0, r3
    3b54:	4b04      	ldr	r3, [pc, #16]	; (3b68 <send+0x50>)
    3b56:	4798      	blx	r3
	}
}
    3b58:	46c0      	nop			; (mov r8, r8)
    3b5a:	46bd      	mov	sp, r7
    3b5c:	b002      	add	sp, #8
    3b5e:	bd80      	pop	{r7, pc}
    3b60:	200006d3 	.word	0x200006d3
    3b64:	00003589 	.word	0x00003589
    3b68:	00003989 	.word	0x00003989

00003b6c <LCD_clear>:

void LCD_clear(void)
{
    3b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b6e:	af00      	add	r7, sp, #0
	command(LCD_CLEARDISPLAY);
    3b70:	2001      	movs	r0, #1
    3b72:	4b13      	ldr	r3, [pc, #76]	; (3bc0 <LCD_clear+0x54>)
    3b74:	4798      	blx	r3
	delay_us(2000);
    3b76:	2000      	movs	r0, #0
    3b78:	4b12      	ldr	r3, [pc, #72]	; (3bc4 <LCD_clear+0x58>)
    3b7a:	4798      	blx	r3
    3b7c:	0003      	movs	r3, r0
    3b7e:	001d      	movs	r5, r3
    3b80:	2300      	movs	r3, #0
    3b82:	001e      	movs	r6, r3
    3b84:	4c10      	ldr	r4, [pc, #64]	; (3bc8 <LCD_clear+0x5c>)
    3b86:	22fa      	movs	r2, #250	; 0xfa
    3b88:	00d2      	lsls	r2, r2, #3
    3b8a:	2300      	movs	r3, #0
    3b8c:	0028      	movs	r0, r5
    3b8e:	0031      	movs	r1, r6
    3b90:	47a0      	blx	r4
    3b92:	0003      	movs	r3, r0
    3b94:	000c      	movs	r4, r1
    3b96:	0019      	movs	r1, r3
    3b98:	0022      	movs	r2, r4
    3b9a:	4b0c      	ldr	r3, [pc, #48]	; (3bcc <LCD_clear+0x60>)
    3b9c:	2400      	movs	r4, #0
    3b9e:	18c9      	adds	r1, r1, r3
    3ba0:	4162      	adcs	r2, r4
    3ba2:	0008      	movs	r0, r1
    3ba4:	0011      	movs	r1, r2
    3ba6:	4c0a      	ldr	r4, [pc, #40]	; (3bd0 <LCD_clear+0x64>)
    3ba8:	4a0a      	ldr	r2, [pc, #40]	; (3bd4 <LCD_clear+0x68>)
    3baa:	2300      	movs	r3, #0
    3bac:	47a0      	blx	r4
    3bae:	0003      	movs	r3, r0
    3bb0:	000c      	movs	r4, r1
    3bb2:	0018      	movs	r0, r3
    3bb4:	4b08      	ldr	r3, [pc, #32]	; (3bd8 <LCD_clear+0x6c>)
    3bb6:	4798      	blx	r3
}
    3bb8:	46c0      	nop			; (mov r8, r8)
    3bba:	46bd      	mov	sp, r7
    3bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bbe:	46c0      	nop			; (mov r8, r8)
    3bc0:	00003acd 	.word	0x00003acd
    3bc4:	00013855 	.word	0x00013855
    3bc8:	00015809 	.word	0x00015809
    3bcc:	006acfbf 	.word	0x006acfbf
    3bd0:	000157c9 	.word	0x000157c9
    3bd4:	006acfc0 	.word	0x006acfc0
    3bd8:	20000001 	.word	0x20000001

00003bdc <LCD_Create_Custom_createChar>:


void LCD_Create_Custom_createChar(uint8_t location, uint8_t charmap[]) 
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b084      	sub	sp, #16
    3be0:	af00      	add	r7, sp, #0
    3be2:	0002      	movs	r2, r0
    3be4:	6039      	str	r1, [r7, #0]
    3be6:	1dfb      	adds	r3, r7, #7
    3be8:	701a      	strb	r2, [r3, #0]
	location &= 0x7;
    3bea:	1dfb      	adds	r3, r7, #7
    3bec:	1dfa      	adds	r2, r7, #7
    3bee:	7812      	ldrb	r2, [r2, #0]
    3bf0:	2107      	movs	r1, #7
    3bf2:	400a      	ands	r2, r1
    3bf4:	701a      	strb	r2, [r3, #0]
	command(LCD_SETCGRAMADDR | (location << 3));
    3bf6:	1dfb      	adds	r3, r7, #7
    3bf8:	781b      	ldrb	r3, [r3, #0]
    3bfa:	00db      	lsls	r3, r3, #3
    3bfc:	b25b      	sxtb	r3, r3
    3bfe:	2240      	movs	r2, #64	; 0x40
    3c00:	4313      	orrs	r3, r2
    3c02:	b25b      	sxtb	r3, r3
    3c04:	b2db      	uxtb	r3, r3
    3c06:	0018      	movs	r0, r3
    3c08:	4b0a      	ldr	r3, [pc, #40]	; (3c34 <LCD_Create_Custom_createChar+0x58>)
    3c0a:	4798      	blx	r3
	for (int i=0; i<8; i++)
    3c0c:	2300      	movs	r3, #0
    3c0e:	60fb      	str	r3, [r7, #12]
    3c10:	e009      	b.n	3c26 <LCD_Create_Custom_createChar+0x4a>
	{
		LCD_write(charmap[i]);
    3c12:	68fb      	ldr	r3, [r7, #12]
    3c14:	683a      	ldr	r2, [r7, #0]
    3c16:	18d3      	adds	r3, r2, r3
    3c18:	781b      	ldrb	r3, [r3, #0]
    3c1a:	0018      	movs	r0, r3
    3c1c:	4b06      	ldr	r3, [pc, #24]	; (3c38 <LCD_Create_Custom_createChar+0x5c>)
    3c1e:	4798      	blx	r3
	for (int i=0; i<8; i++)
    3c20:	68fb      	ldr	r3, [r7, #12]
    3c22:	3301      	adds	r3, #1
    3c24:	60fb      	str	r3, [r7, #12]
    3c26:	68fb      	ldr	r3, [r7, #12]
    3c28:	2b07      	cmp	r3, #7
    3c2a:	ddf2      	ble.n	3c12 <LCD_Create_Custom_createChar+0x36>
	}
}
    3c2c:	46c0      	nop			; (mov r8, r8)
    3c2e:	46bd      	mov	sp, r7
    3c30:	b004      	add	sp, #16
    3c32:	bd80      	pop	{r7, pc}
    3c34:	00003acd 	.word	0x00003acd
    3c38:	00003af1 	.word	0x00003af1

00003c3c <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
    3c3c:	b580      	push	{r7, lr}
    3c3e:	b084      	sub	sp, #16
    3c40:	af00      	add	r7, sp, #0
    3c42:	0002      	movs	r2, r0
    3c44:	1dfb      	adds	r3, r7, #7
    3c46:	701a      	strb	r2, [r3, #0]
    3c48:	1dbb      	adds	r3, r7, #6
    3c4a:	1c0a      	adds	r2, r1, #0
    3c4c:	701a      	strb	r2, [r3, #0]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
    3c4e:	2304      	movs	r3, #4
    3c50:	60fb      	str	r3, [r7, #12]
	if ( row >= max_lines ) 
    3c52:	1dbb      	adds	r3, r7, #6
    3c54:	781a      	ldrb	r2, [r3, #0]
    3c56:	68fb      	ldr	r3, [r7, #12]
    3c58:	429a      	cmp	r2, r3
    3c5a:	d304      	bcc.n	3c66 <LCD_setCursor+0x2a>
	{
		row = max_lines - 1; 
    3c5c:	68fb      	ldr	r3, [r7, #12]
    3c5e:	b2da      	uxtb	r2, r3
    3c60:	1dbb      	adds	r3, r7, #6
    3c62:	3a01      	subs	r2, #1
    3c64:	701a      	strb	r2, [r3, #0]
	}
	if ( row >= _numlines )
    3c66:	4b10      	ldr	r3, [pc, #64]	; (3ca8 <LCD_setCursor+0x6c>)
    3c68:	781b      	ldrb	r3, [r3, #0]
    3c6a:	1dba      	adds	r2, r7, #6
    3c6c:	7812      	ldrb	r2, [r2, #0]
    3c6e:	429a      	cmp	r2, r3
    3c70:	d304      	bcc.n	3c7c <LCD_setCursor+0x40>
	{
		row = _numlines - 1;
    3c72:	4b0d      	ldr	r3, [pc, #52]	; (3ca8 <LCD_setCursor+0x6c>)
    3c74:	781a      	ldrb	r2, [r3, #0]
    3c76:	1dbb      	adds	r3, r7, #6
    3c78:	3a01      	subs	r2, #1
    3c7a:	701a      	strb	r2, [r3, #0]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
    3c7c:	1dbb      	adds	r3, r7, #6
    3c7e:	781b      	ldrb	r3, [r3, #0]
    3c80:	4a0a      	ldr	r2, [pc, #40]	; (3cac <LCD_setCursor+0x70>)
    3c82:	5cd2      	ldrb	r2, [r2, r3]
    3c84:	1dfb      	adds	r3, r7, #7
    3c86:	781b      	ldrb	r3, [r3, #0]
    3c88:	18d3      	adds	r3, r2, r3
    3c8a:	b2db      	uxtb	r3, r3
    3c8c:	b25b      	sxtb	r3, r3
    3c8e:	2280      	movs	r2, #128	; 0x80
    3c90:	4252      	negs	r2, r2
    3c92:	4313      	orrs	r3, r2
    3c94:	b25b      	sxtb	r3, r3
    3c96:	b2db      	uxtb	r3, r3
    3c98:	0018      	movs	r0, r3
    3c9a:	4b05      	ldr	r3, [pc, #20]	; (3cb0 <LCD_setCursor+0x74>)
    3c9c:	4798      	blx	r3
}
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	46bd      	mov	sp, r7
    3ca2:	b004      	add	sp, #16
    3ca4:	bd80      	pop	{r7, pc}
    3ca6:	46c0      	nop			; (mov r8, r8)
    3ca8:	200006ca 	.word	0x200006ca
    3cac:	200006c4 	.word	0x200006c4
    3cb0:	00003acd 	.word	0x00003acd

00003cb4 <LCD_display>:
{
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
    3cb4:	b580      	push	{r7, lr}
    3cb6:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON;
    3cb8:	4b08      	ldr	r3, [pc, #32]	; (3cdc <LCD_display+0x28>)
    3cba:	781b      	ldrb	r3, [r3, #0]
    3cbc:	2204      	movs	r2, #4
    3cbe:	4313      	orrs	r3, r2
    3cc0:	b2da      	uxtb	r2, r3
    3cc2:	4b06      	ldr	r3, [pc, #24]	; (3cdc <LCD_display+0x28>)
    3cc4:	701a      	strb	r2, [r3, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    3cc6:	4b05      	ldr	r3, [pc, #20]	; (3cdc <LCD_display+0x28>)
    3cc8:	781b      	ldrb	r3, [r3, #0]
    3cca:	2208      	movs	r2, #8
    3ccc:	4313      	orrs	r3, r2
    3cce:	b2db      	uxtb	r3, r3
    3cd0:	0018      	movs	r0, r3
    3cd2:	4b03      	ldr	r3, [pc, #12]	; (3ce0 <LCD_display+0x2c>)
    3cd4:	4798      	blx	r3
}
    3cd6:	46c0      	nop			; (mov r8, r8)
    3cd8:	46bd      	mov	sp, r7
    3cda:	bd80      	pop	{r7, pc}
    3cdc:	200006c9 	.word	0x200006c9
    3ce0:	00003acd 	.word	0x00003acd

00003ce4 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
    3ce4:	b580      	push	{r7, lr}
    3ce6:	b084      	sub	sp, #16
    3ce8:	af00      	add	r7, sp, #0
    3cea:	6078      	str	r0, [r7, #4]
	size_t size = strlen(buffer);
    3cec:	687b      	ldr	r3, [r7, #4]
    3cee:	0018      	movs	r0, r3
    3cf0:	4b0f      	ldr	r3, [pc, #60]	; (3d30 <Buffer_writer+0x4c>)
    3cf2:	4798      	blx	r3
    3cf4:	0003      	movs	r3, r0
    3cf6:	60fb      	str	r3, [r7, #12]
	size_t n = 0;
    3cf8:	2300      	movs	r3, #0
    3cfa:	60bb      	str	r3, [r7, #8]
	while (size--) {
    3cfc:	e00b      	b.n	3d16 <Buffer_writer+0x32>
		if (LCD_write(*buffer++)) n++;
    3cfe:	687b      	ldr	r3, [r7, #4]
    3d00:	1c5a      	adds	r2, r3, #1
    3d02:	607a      	str	r2, [r7, #4]
    3d04:	781b      	ldrb	r3, [r3, #0]
    3d06:	0018      	movs	r0, r3
    3d08:	4b0a      	ldr	r3, [pc, #40]	; (3d34 <Buffer_writer+0x50>)
    3d0a:	4798      	blx	r3
    3d0c:	1e03      	subs	r3, r0, #0
    3d0e:	d008      	beq.n	3d22 <Buffer_writer+0x3e>
    3d10:	68bb      	ldr	r3, [r7, #8]
    3d12:	3301      	adds	r3, #1
    3d14:	60bb      	str	r3, [r7, #8]
	while (size--) {
    3d16:	68fb      	ldr	r3, [r7, #12]
    3d18:	1e5a      	subs	r2, r3, #1
    3d1a:	60fa      	str	r2, [r7, #12]
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	d1ee      	bne.n	3cfe <Buffer_writer+0x1a>
    3d20:	e000      	b.n	3d24 <Buffer_writer+0x40>
		else break;
    3d22:	46c0      	nop			; (mov r8, r8)
	}
	return n;
    3d24:	68bb      	ldr	r3, [r7, #8]
}
    3d26:	0018      	movs	r0, r3
    3d28:	46bd      	mov	sp, r7
    3d2a:	b004      	add	sp, #16
    3d2c:	bd80      	pop	{r7, pc}
    3d2e:	46c0      	nop			; (mov r8, r8)
    3d30:	00017f67 	.word	0x00017f67
    3d34:	00003af1 	.word	0x00003af1

00003d38 <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
    3d38:	b40f      	push	{r0, r1, r2, r3}
    3d3a:	b580      	push	{r7, lr}
    3d3c:	b084      	sub	sp, #16
    3d3e:	af00      	add	r7, sp, #0
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
    3d40:	69bb      	ldr	r3, [r7, #24]
    3d42:	0018      	movs	r0, r3
    3d44:	4b11      	ldr	r3, [pc, #68]	; (3d8c <lcd_printf+0x54>)
    3d46:	4798      	blx	r3
    3d48:	0003      	movs	r3, r0
    3d4a:	3303      	adds	r3, #3
    3d4c:	60fb      	str	r3, [r7, #12]
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
    3d4e:	68fb      	ldr	r3, [r7, #12]
    3d50:	0018      	movs	r0, r3
    3d52:	4b0f      	ldr	r3, [pc, #60]	; (3d90 <lcd_printf+0x58>)
    3d54:	4798      	blx	r3
    3d56:	0003      	movs	r3, r0
    3d58:	60bb      	str	r3, [r7, #8]
	va_list args;
	va_start(args, fmt);
    3d5a:	231c      	movs	r3, #28
    3d5c:	18fb      	adds	r3, r7, r3
    3d5e:	607b      	str	r3, [r7, #4]
	vsprintf(lcd_buff,fmt,args);
    3d60:	687a      	ldr	r2, [r7, #4]
    3d62:	69b9      	ldr	r1, [r7, #24]
    3d64:	68bb      	ldr	r3, [r7, #8]
    3d66:	0018      	movs	r0, r3
    3d68:	4b0a      	ldr	r3, [pc, #40]	; (3d94 <lcd_printf+0x5c>)
    3d6a:	4798      	blx	r3
	Buffer_writer(lcd_buff);
    3d6c:	68bb      	ldr	r3, [r7, #8]
    3d6e:	0018      	movs	r0, r3
    3d70:	4b09      	ldr	r3, [pc, #36]	; (3d98 <lcd_printf+0x60>)
    3d72:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
    3d74:	68bb      	ldr	r3, [r7, #8]
    3d76:	0018      	movs	r0, r3
    3d78:	4b08      	ldr	r3, [pc, #32]	; (3d9c <lcd_printf+0x64>)
    3d7a:	4798      	blx	r3
}
    3d7c:	46c0      	nop			; (mov r8, r8)
    3d7e:	46bd      	mov	sp, r7
    3d80:	b004      	add	sp, #16
    3d82:	bc80      	pop	{r7}
    3d84:	bc08      	pop	{r3}
    3d86:	b004      	add	sp, #16
    3d88:	4718      	bx	r3
    3d8a:	46c0      	nop			; (mov r8, r8)
    3d8c:	00017f67 	.word	0x00017f67
    3d90:	00017c55 	.word	0x00017c55
    3d94:	00018255 	.word	0x00018255
    3d98:	00003ce5 	.word	0x00003ce5
    3d9c:	00017c69 	.word	0x00017c69

00003da0 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
    3da0:	b580      	push	{r7, lr}
    3da2:	b084      	sub	sp, #16
    3da4:	af00      	add	r7, sp, #0
    3da6:	6078      	str	r0, [r7, #4]
	if (!str) return;
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	2b00      	cmp	r3, #0
    3dac:	d028      	beq.n	3e00 <StringtoUpperCase+0x60>
	for (char *p = str; *p; p++) {
    3dae:	687b      	ldr	r3, [r7, #4]
    3db0:	60fb      	str	r3, [r7, #12]
    3db2:	e020      	b.n	3df6 <StringtoUpperCase+0x56>
		*p = toupper(*p);
    3db4:	230b      	movs	r3, #11
    3db6:	18fb      	adds	r3, r7, r3
    3db8:	68fa      	ldr	r2, [r7, #12]
    3dba:	7812      	ldrb	r2, [r2, #0]
    3dbc:	701a      	strb	r2, [r3, #0]
    3dbe:	4b12      	ldr	r3, [pc, #72]	; (3e08 <StringtoUpperCase+0x68>)
    3dc0:	4798      	blx	r3
    3dc2:	0002      	movs	r2, r0
    3dc4:	230b      	movs	r3, #11
    3dc6:	18fb      	adds	r3, r7, r3
    3dc8:	781b      	ldrb	r3, [r3, #0]
    3dca:	3301      	adds	r3, #1
    3dcc:	18d3      	adds	r3, r2, r3
    3dce:	781b      	ldrb	r3, [r3, #0]
    3dd0:	001a      	movs	r2, r3
    3dd2:	2303      	movs	r3, #3
    3dd4:	4013      	ands	r3, r2
    3dd6:	2b02      	cmp	r3, #2
    3dd8:	d104      	bne.n	3de4 <StringtoUpperCase+0x44>
    3dda:	230b      	movs	r3, #11
    3ddc:	18fb      	adds	r3, r7, r3
    3dde:	781b      	ldrb	r3, [r3, #0]
    3de0:	3b20      	subs	r3, #32
    3de2:	e002      	b.n	3dea <StringtoUpperCase+0x4a>
    3de4:	230b      	movs	r3, #11
    3de6:	18fb      	adds	r3, r7, r3
    3de8:	781b      	ldrb	r3, [r3, #0]
    3dea:	b2da      	uxtb	r2, r3
    3dec:	68fb      	ldr	r3, [r7, #12]
    3dee:	701a      	strb	r2, [r3, #0]
	for (char *p = str; *p; p++) {
    3df0:	68fb      	ldr	r3, [r7, #12]
    3df2:	3301      	adds	r3, #1
    3df4:	60fb      	str	r3, [r7, #12]
    3df6:	68fb      	ldr	r3, [r7, #12]
    3df8:	781b      	ldrb	r3, [r3, #0]
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d1da      	bne.n	3db4 <StringtoUpperCase+0x14>
    3dfe:	e000      	b.n	3e02 <StringtoUpperCase+0x62>
	if (!str) return;
    3e00:	46c0      	nop			; (mov r8, r8)
	}
}
    3e02:	46bd      	mov	sp, r7
    3e04:	b004      	add	sp, #16
    3e06:	bd80      	pop	{r7, pc}
    3e08:	00017c39 	.word	0x00017c39

00003e0c <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
    3e0c:	b580      	push	{r7, lr}
    3e0e:	b084      	sub	sp, #16
    3e10:	af00      	add	r7, sp, #0
    3e12:	6078      	str	r0, [r7, #4]
    3e14:	6039      	str	r1, [r7, #0]
	size_t lenpre = strlen(pre),
    3e16:	683b      	ldr	r3, [r7, #0]
    3e18:	0018      	movs	r0, r3
    3e1a:	4b10      	ldr	r3, [pc, #64]	; (3e5c <StringstartsWith+0x50>)
    3e1c:	4798      	blx	r3
    3e1e:	0003      	movs	r3, r0
    3e20:	60fb      	str	r3, [r7, #12]
	lenstr = strlen(str);
    3e22:	687b      	ldr	r3, [r7, #4]
    3e24:	0018      	movs	r0, r3
    3e26:	4b0d      	ldr	r3, [pc, #52]	; (3e5c <StringstartsWith+0x50>)
    3e28:	4798      	blx	r3
    3e2a:	0003      	movs	r3, r0
    3e2c:	60bb      	str	r3, [r7, #8]
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
    3e2e:	68ba      	ldr	r2, [r7, #8]
    3e30:	68fb      	ldr	r3, [r7, #12]
    3e32:	429a      	cmp	r2, r3
    3e34:	d309      	bcc.n	3e4a <StringstartsWith+0x3e>
    3e36:	68fa      	ldr	r2, [r7, #12]
    3e38:	6879      	ldr	r1, [r7, #4]
    3e3a:	683b      	ldr	r3, [r7, #0]
    3e3c:	0018      	movs	r0, r3
    3e3e:	4b08      	ldr	r3, [pc, #32]	; (3e60 <StringstartsWith+0x54>)
    3e40:	4798      	blx	r3
    3e42:	1e03      	subs	r3, r0, #0
    3e44:	d101      	bne.n	3e4a <StringstartsWith+0x3e>
    3e46:	2301      	movs	r3, #1
    3e48:	e000      	b.n	3e4c <StringstartsWith+0x40>
    3e4a:	2300      	movs	r3, #0
    3e4c:	1c1a      	adds	r2, r3, #0
    3e4e:	2301      	movs	r3, #1
    3e50:	4013      	ands	r3, r2
    3e52:	b2db      	uxtb	r3, r3
}
    3e54:	0018      	movs	r0, r3
    3e56:	46bd      	mov	sp, r7
    3e58:	b004      	add	sp, #16
    3e5a:	bd80      	pop	{r7, pc}
    3e5c:	00017f67 	.word	0x00017f67
    3e60:	00017f75 	.word	0x00017f75

00003e64 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    3e64:	b580      	push	{r7, lr}
    3e66:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    3e68:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    3e6c:	4b02      	ldr	r3, [pc, #8]	; (3e78 <NVIC_SystemReset+0x14>)
    3e6e:	4a03      	ldr	r2, [pc, #12]	; (3e7c <NVIC_SystemReset+0x18>)
    3e70:	60da      	str	r2, [r3, #12]
    3e72:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    3e76:	e7fe      	b.n	3e76 <NVIC_SystemReset+0x12>
    3e78:	e000ed00 	.word	0xe000ed00
    3e7c:	05fa0004 	.word	0x05fa0004

00003e80 <system_pinmux_get_group_from_gpio_pin>:
{
    3e80:	b580      	push	{r7, lr}
    3e82:	b084      	sub	sp, #16
    3e84:	af00      	add	r7, sp, #0
    3e86:	0002      	movs	r2, r0
    3e88:	1dfb      	adds	r3, r7, #7
    3e8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3e8c:	230f      	movs	r3, #15
    3e8e:	18fb      	adds	r3, r7, r3
    3e90:	1dfa      	adds	r2, r7, #7
    3e92:	7812      	ldrb	r2, [r2, #0]
    3e94:	09d2      	lsrs	r2, r2, #7
    3e96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3e98:	230e      	movs	r3, #14
    3e9a:	18fb      	adds	r3, r7, r3
    3e9c:	1dfa      	adds	r2, r7, #7
    3e9e:	7812      	ldrb	r2, [r2, #0]
    3ea0:	0952      	lsrs	r2, r2, #5
    3ea2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3ea4:	4b0d      	ldr	r3, [pc, #52]	; (3edc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3ea6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3ea8:	230f      	movs	r3, #15
    3eaa:	18fb      	adds	r3, r7, r3
    3eac:	781b      	ldrb	r3, [r3, #0]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d10f      	bne.n	3ed2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3eb2:	230f      	movs	r3, #15
    3eb4:	18fb      	adds	r3, r7, r3
    3eb6:	781b      	ldrb	r3, [r3, #0]
    3eb8:	009b      	lsls	r3, r3, #2
    3eba:	2210      	movs	r2, #16
    3ebc:	4694      	mov	ip, r2
    3ebe:	44bc      	add	ip, r7
    3ec0:	4463      	add	r3, ip
    3ec2:	3b08      	subs	r3, #8
    3ec4:	681a      	ldr	r2, [r3, #0]
    3ec6:	230e      	movs	r3, #14
    3ec8:	18fb      	adds	r3, r7, r3
    3eca:	781b      	ldrb	r3, [r3, #0]
    3ecc:	01db      	lsls	r3, r3, #7
    3ece:	18d3      	adds	r3, r2, r3
    3ed0:	e000      	b.n	3ed4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3ed2:	2300      	movs	r3, #0
}
    3ed4:	0018      	movs	r0, r3
    3ed6:	46bd      	mov	sp, r7
    3ed8:	b004      	add	sp, #16
    3eda:	bd80      	pop	{r7, pc}
    3edc:	41004400 	.word	0x41004400

00003ee0 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    3ee0:	b580      	push	{r7, lr}
    3ee2:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    3ee4:	4b02      	ldr	r3, [pc, #8]	; (3ef0 <system_reset+0x10>)
    3ee6:	4798      	blx	r3
}
    3ee8:	46c0      	nop			; (mov r8, r8)
    3eea:	46bd      	mov	sp, r7
    3eec:	bd80      	pop	{r7, pc}
    3eee:	46c0      	nop			; (mov r8, r8)
    3ef0:	00003e65 	.word	0x00003e65

00003ef4 <port_get_group_from_gpio_pin>:
{
    3ef4:	b580      	push	{r7, lr}
    3ef6:	b082      	sub	sp, #8
    3ef8:	af00      	add	r7, sp, #0
    3efa:	0002      	movs	r2, r0
    3efc:	1dfb      	adds	r3, r7, #7
    3efe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3f00:	1dfb      	adds	r3, r7, #7
    3f02:	781b      	ldrb	r3, [r3, #0]
    3f04:	0018      	movs	r0, r3
    3f06:	4b03      	ldr	r3, [pc, #12]	; (3f14 <port_get_group_from_gpio_pin+0x20>)
    3f08:	4798      	blx	r3
    3f0a:	0003      	movs	r3, r0
}
    3f0c:	0018      	movs	r0, r3
    3f0e:	46bd      	mov	sp, r7
    3f10:	b002      	add	sp, #8
    3f12:	bd80      	pop	{r7, pc}
    3f14:	00003e81 	.word	0x00003e81

00003f18 <port_get_config_defaults>:
{
    3f18:	b580      	push	{r7, lr}
    3f1a:	b082      	sub	sp, #8
    3f1c:	af00      	add	r7, sp, #0
    3f1e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3f20:	687b      	ldr	r3, [r7, #4]
    3f22:	2200      	movs	r2, #0
    3f24:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	2201      	movs	r2, #1
    3f2a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	2200      	movs	r2, #0
    3f30:	709a      	strb	r2, [r3, #2]
}
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	46bd      	mov	sp, r7
    3f36:	b002      	add	sp, #8
    3f38:	bd80      	pop	{r7, pc}
	...

00003f3c <port_pin_get_input_level>:
{
    3f3c:	b580      	push	{r7, lr}
    3f3e:	b084      	sub	sp, #16
    3f40:	af00      	add	r7, sp, #0
    3f42:	0002      	movs	r2, r0
    3f44:	1dfb      	adds	r3, r7, #7
    3f46:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3f48:	1dfb      	adds	r3, r7, #7
    3f4a:	781b      	ldrb	r3, [r3, #0]
    3f4c:	0018      	movs	r0, r3
    3f4e:	4b0b      	ldr	r3, [pc, #44]	; (3f7c <port_pin_get_input_level+0x40>)
    3f50:	4798      	blx	r3
    3f52:	0003      	movs	r3, r0
    3f54:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3f56:	1dfb      	adds	r3, r7, #7
    3f58:	781b      	ldrb	r3, [r3, #0]
    3f5a:	221f      	movs	r2, #31
    3f5c:	4013      	ands	r3, r2
    3f5e:	2201      	movs	r2, #1
    3f60:	409a      	lsls	r2, r3
    3f62:	0013      	movs	r3, r2
    3f64:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    3f66:	68fb      	ldr	r3, [r7, #12]
    3f68:	6a1b      	ldr	r3, [r3, #32]
    3f6a:	68ba      	ldr	r2, [r7, #8]
    3f6c:	4013      	ands	r3, r2
    3f6e:	1e5a      	subs	r2, r3, #1
    3f70:	4193      	sbcs	r3, r2
    3f72:	b2db      	uxtb	r3, r3
}
    3f74:	0018      	movs	r0, r3
    3f76:	46bd      	mov	sp, r7
    3f78:	b004      	add	sp, #16
    3f7a:	bd80      	pop	{r7, pc}
    3f7c:	00003ef5 	.word	0x00003ef5

00003f80 <setObtainEvent>:

static void vTask_GSM_service(void *params);


void setObtainEvent(void)
{
    3f80:	b580      	push	{r7, lr}
    3f82:	af00      	add	r7, sp, #0
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
    3f84:	4b0b      	ldr	r3, [pc, #44]	; (3fb4 <setObtainEvent+0x34>)
    3f86:	781b      	ldrb	r3, [r3, #0]
    3f88:	2201      	movs	r2, #1
    3f8a:	4053      	eors	r3, r2
    3f8c:	b2db      	uxtb	r3, r3
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d00c      	beq.n	3fac <setObtainEvent+0x2c>
    3f92:	4b09      	ldr	r3, [pc, #36]	; (3fb8 <setObtainEvent+0x38>)
    3f94:	4798      	blx	r3
    3f96:	0002      	movs	r2, r0
    3f98:	4b08      	ldr	r3, [pc, #32]	; (3fbc <setObtainEvent+0x3c>)
    3f9a:	681b      	ldr	r3, [r3, #0]
    3f9c:	1ad2      	subs	r2, r2, r3
    3f9e:	23fa      	movs	r3, #250	; 0xfa
    3fa0:	009b      	lsls	r3, r3, #2
    3fa2:	429a      	cmp	r2, r3
    3fa4:	d902      	bls.n	3fac <setObtainEvent+0x2c>
	{
		obtainNewEvent = true;
    3fa6:	4b03      	ldr	r3, [pc, #12]	; (3fb4 <setObtainEvent+0x34>)
    3fa8:	2201      	movs	r2, #1
    3faa:	701a      	strb	r2, [r3, #0]
	}
}
    3fac:	46c0      	nop			; (mov r8, r8)
    3fae:	46bd      	mov	sp, r7
    3fb0:	bd80      	pop	{r7, pc}
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	2000074a 	.word	0x2000074a
    3fb8:	0000f37d 	.word	0x0000f37d
    3fbc:	200007cc 	.word	0x200007cc

00003fc0 <operateOnStagedEvent>:

void operateOnStagedEvent(void)
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	b082      	sub	sp, #8
    3fc4:	af00      	add	r7, sp, #0
	uint8_t temp1= 1;
    3fc6:	1dfb      	adds	r3, r7, #7
    3fc8:	2201      	movs	r2, #1
    3fca:	701a      	strb	r2, [r3, #0]
	if(eventStaged)
    3fcc:	4b23      	ldr	r3, [pc, #140]	; (405c <operateOnStagedEvent+0x9c>)
    3fce:	781b      	ldrb	r3, [r3, #0]
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d003      	beq.n	3fdc <operateOnStagedEvent+0x1c>
	{
		temp1 = user_settings_parameter_struct.eventStageAddress;
    3fd4:	1dfb      	adds	r3, r7, #7
    3fd6:	4a22      	ldr	r2, [pc, #136]	; (4060 <operateOnStagedEvent+0xa0>)
    3fd8:	7a12      	ldrb	r2, [r2, #8]
    3fda:	701a      	strb	r2, [r3, #0]
	}
	
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
    3fdc:	4b21      	ldr	r3, [pc, #132]	; (4064 <operateOnStagedEvent+0xa4>)
    3fde:	781b      	ldrb	r3, [r3, #0]
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d037      	beq.n	4054 <operateOnStagedEvent+0x94>
    3fe4:	4b20      	ldr	r3, [pc, #128]	; (4068 <operateOnStagedEvent+0xa8>)
    3fe6:	781b      	ldrb	r3, [r3, #0]
    3fe8:	2b01      	cmp	r3, #1
    3fea:	d00b      	beq.n	4004 <operateOnStagedEvent+0x44>
    3fec:	4b1f      	ldr	r3, [pc, #124]	; (406c <operateOnStagedEvent+0xac>)
    3fee:	4798      	blx	r3
    3ff0:	0002      	movs	r2, r0
    3ff2:	4b1f      	ldr	r3, [pc, #124]	; (4070 <operateOnStagedEvent+0xb0>)
    3ff4:	681b      	ldr	r3, [r3, #0]
    3ff6:	1ad2      	subs	r2, r2, r3
    3ff8:	1dfb      	adds	r3, r7, #7
    3ffa:	781b      	ldrb	r3, [r3, #0]
    3ffc:	491d      	ldr	r1, [pc, #116]	; (4074 <operateOnStagedEvent+0xb4>)
    3ffe:	434b      	muls	r3, r1
    4000:	429a      	cmp	r2, r3
    4002:	d927      	bls.n	4054 <operateOnStagedEvent+0x94>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    4004:	4b1c      	ldr	r3, [pc, #112]	; (4078 <operateOnStagedEvent+0xb8>)
    4006:	78db      	ldrb	r3, [r3, #3]
    4008:	2b00      	cmp	r3, #0
    400a:	d01a      	beq.n	4042 <operateOnStagedEvent+0x82>
		{
			if (eventStaged)
    400c:	4b13      	ldr	r3, [pc, #76]	; (405c <operateOnStagedEvent+0x9c>)
    400e:	781b      	ldrb	r3, [r3, #0]
    4010:	2b00      	cmp	r3, #0
    4012:	d007      	beq.n	4024 <operateOnStagedEvent+0x64>
			{
				actionType=stagedEventType;
    4014:	4b19      	ldr	r3, [pc, #100]	; (407c <operateOnStagedEvent+0xbc>)
    4016:	781a      	ldrb	r2, [r3, #0]
    4018:	4b19      	ldr	r3, [pc, #100]	; (4080 <operateOnStagedEvent+0xc0>)
    401a:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
    401c:	4b0f      	ldr	r3, [pc, #60]	; (405c <operateOnStagedEvent+0x9c>)
    401e:	2200      	movs	r2, #0
    4020:	701a      	strb	r2, [r3, #0]
    4022:	e015      	b.n	4050 <operateOnStagedEvent+0x90>
			}
			else if (m2mEventStaged)
    4024:	4b17      	ldr	r3, [pc, #92]	; (4084 <operateOnStagedEvent+0xc4>)
    4026:	781b      	ldrb	r3, [r3, #0]
    4028:	2b00      	cmp	r3, #0
    402a:	d011      	beq.n	4050 <operateOnStagedEvent+0x90>
			{
				m2mEventNo=stagedEventType;
    402c:	4b13      	ldr	r3, [pc, #76]	; (407c <operateOnStagedEvent+0xbc>)
    402e:	781a      	ldrb	r2, [r3, #0]
    4030:	4b15      	ldr	r3, [pc, #84]	; (4088 <operateOnStagedEvent+0xc8>)
    4032:	701a      	strb	r2, [r3, #0]
				m2mEvent=true;
    4034:	4b15      	ldr	r3, [pc, #84]	; (408c <operateOnStagedEvent+0xcc>)
    4036:	2201      	movs	r2, #1
    4038:	701a      	strb	r2, [r3, #0]
				m2mEventStaged=false;
    403a:	4b12      	ldr	r3, [pc, #72]	; (4084 <operateOnStagedEvent+0xc4>)
    403c:	2200      	movs	r2, #0
    403e:	701a      	strb	r2, [r3, #0]
    4040:	e006      	b.n	4050 <operateOnStagedEvent+0x90>
			}
		}
		else
		{
			actionType=stagedEventType;
    4042:	4b0e      	ldr	r3, [pc, #56]	; (407c <operateOnStagedEvent+0xbc>)
    4044:	781a      	ldrb	r2, [r3, #0]
    4046:	4b0e      	ldr	r3, [pc, #56]	; (4080 <operateOnStagedEvent+0xc0>)
    4048:	701a      	strb	r2, [r3, #0]
			eventStaged=false;
    404a:	4b04      	ldr	r3, [pc, #16]	; (405c <operateOnStagedEvent+0x9c>)
    404c:	2200      	movs	r2, #0
    404e:	701a      	strb	r2, [r3, #0]
		}
		makeResponseAction();
    4050:	4b0f      	ldr	r3, [pc, #60]	; (4090 <operateOnStagedEvent+0xd0>)
    4052:	4798      	blx	r3
	}
}
    4054:	46c0      	nop			; (mov r8, r8)
    4056:	46bd      	mov	sp, r7
    4058:	b002      	add	sp, #8
    405a:	bd80      	pop	{r7, pc}
    405c:	2000079a 	.word	0x2000079a
    4060:	2000065c 	.word	0x2000065c
    4064:	2000074a 	.word	0x2000074a
    4068:	200006d9 	.word	0x200006d9
    406c:	0000f37d 	.word	0x0000f37d
    4070:	200007ac 	.word	0x200007ac
    4074:	0000ea60 	.word	0x0000ea60
    4078:	20000628 	.word	0x20000628
    407c:	2000074c 	.word	0x2000074c
    4080:	2000073b 	.word	0x2000073b
    4084:	20000766 	.word	0x20000766
    4088:	20000715 	.word	0x20000715
    408c:	2000071b 	.word	0x2000071b
    4090:	00004095 	.word	0x00004095

00004094 <makeResponseAction>:

void makeResponseAction(void)
{
    4094:	b580      	push	{r7, lr}
    4096:	af00      	add	r7, sp, #0
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
    4098:	4b07      	ldr	r3, [pc, #28]	; (40b8 <makeResponseAction+0x24>)
    409a:	795b      	ldrb	r3, [r3, #5]
    409c:	2b4e      	cmp	r3, #78	; 0x4e
    409e:	d103      	bne.n	40a8 <makeResponseAction+0x14>
    40a0:	4b06      	ldr	r3, [pc, #24]	; (40bc <makeResponseAction+0x28>)
    40a2:	781b      	ldrb	r3, [r3, #0]
    40a4:	2b00      	cmp	r3, #0
    40a6:	d004      	beq.n	40b2 <makeResponseAction+0x1e>
	{
		freezeIncomingCalls = true;
    40a8:	4b05      	ldr	r3, [pc, #20]	; (40c0 <makeResponseAction+0x2c>)
    40aa:	2201      	movs	r2, #1
    40ac:	701a      	strb	r2, [r3, #0]
		//acceptCommands();
		makeCall();
    40ae:	4b05      	ldr	r3, [pc, #20]	; (40c4 <makeResponseAction+0x30>)
    40b0:	4798      	blx	r3
	}
}
    40b2:	46c0      	nop			; (mov r8, r8)
    40b4:	46bd      	mov	sp, r7
    40b6:	bd80      	pop	{r7, pc}
    40b8:	2000065c 	.word	0x2000065c
    40bc:	2000071b 	.word	0x2000071b
    40c0:	2000071c 	.word	0x2000071c
    40c4:	000042fd 	.word	0x000042fd

000040c8 <endCall>:

void endCall(void)
{
    40c8:	b580      	push	{r7, lr}
    40ca:	af00      	add	r7, sp, #0
	nr  = 0;
    40cc:	4b6d      	ldr	r3, [pc, #436]	; (4284 <endCall+0x1bc>)
    40ce:	2200      	movs	r2, #0
    40d0:	701a      	strb	r2, [r3, #0]
	inCall=false;
    40d2:	4b6d      	ldr	r3, [pc, #436]	; (4288 <endCall+0x1c0>)
    40d4:	2200      	movs	r2, #0
    40d6:	701a      	strb	r2, [r3, #0]
	
	gsm_hangup_call();
    40d8:	4b6c      	ldr	r3, [pc, #432]	; (428c <endCall+0x1c4>)
    40da:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    40dc:	2200      	movs	r2, #0
    40de:	2100      	movs	r1, #0
    40e0:	2000      	movs	r0, #0
    40e2:	4b6b      	ldr	r3, [pc, #428]	; (4290 <endCall+0x1c8>)
    40e4:	4798      	blx	r3
	//unsigned long temp = xTaskGetTickCount();
	vTaskDelay(1000);
    40e6:	23fa      	movs	r3, #250	; 0xfa
    40e8:	009b      	lsls	r3, r3, #2
    40ea:	0018      	movs	r0, r3
    40ec:	4b69      	ldr	r3, [pc, #420]	; (4294 <endCall+0x1cc>)
    40ee:	4798      	blx	r3
	freezeIncomingCalls = false;
    40f0:	4b69      	ldr	r3, [pc, #420]	; (4298 <endCall+0x1d0>)
    40f2:	2200      	movs	r2, #0
    40f4:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    40f6:	4b69      	ldr	r3, [pc, #420]	; (429c <endCall+0x1d4>)
    40f8:	785b      	ldrb	r3, [r3, #1]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d002      	beq.n	4104 <endCall+0x3c>
	{
		zeroPressed=false;
    40fe:	4b68      	ldr	r3, [pc, #416]	; (42a0 <endCall+0x1d8>)
    4100:	2200      	movs	r2, #0
    4102:	701a      	strb	r2, [r3, #0]
	}
	
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    4104:	4b65      	ldr	r3, [pc, #404]	; (429c <endCall+0x1d4>)
    4106:	78db      	ldrb	r3, [r3, #3]
    4108:	2b01      	cmp	r3, #1
    410a:	d11d      	bne.n	4148 <endCall+0x80>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
    410c:	4b65      	ldr	r3, [pc, #404]	; (42a4 <endCall+0x1dc>)
    410e:	781b      	ldrb	r3, [r3, #0]
    4110:	b2db      	uxtb	r3, r3
    4112:	2b4e      	cmp	r3, #78	; 0x4e
    4114:	d004      	beq.n	4120 <endCall+0x58>
    4116:	4b63      	ldr	r3, [pc, #396]	; (42a4 <endCall+0x1dc>)
    4118:	781b      	ldrb	r3, [r3, #0]
    411a:	b2db      	uxtb	r3, r3
    411c:	2b52      	cmp	r3, #82	; 0x52
    411e:	d10d      	bne.n	413c <endCall+0x74>
    4120:	4b61      	ldr	r3, [pc, #388]	; (42a8 <endCall+0x1e0>)
    4122:	781b      	ldrb	r3, [r3, #0]
    4124:	b2db      	uxtb	r3, r3
    4126:	2b4f      	cmp	r3, #79	; 0x4f
    4128:	d108      	bne.n	413c <endCall+0x74>
    412a:	4b60      	ldr	r3, [pc, #384]	; (42ac <endCall+0x1e4>)
    412c:	781b      	ldrb	r3, [r3, #0]
    412e:	2201      	movs	r2, #1
    4130:	4053      	eors	r3, r2
    4132:	b2db      	uxtb	r3, r3
    4134:	2b00      	cmp	r3, #0
    4136:	d001      	beq.n	413c <endCall+0x74>
    4138:	2301      	movs	r3, #1
    413a:	e000      	b.n	413e <endCall+0x76>
    413c:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    413e:	1c1a      	adds	r2, r3, #0
    4140:	2301      	movs	r3, #1
    4142:	4013      	ands	r3, r2
    4144:	b2db      	uxtb	r3, r3
    4146:	e015      	b.n	4174 <endCall+0xac>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
    4148:	4b56      	ldr	r3, [pc, #344]	; (42a4 <endCall+0x1dc>)
    414a:	781b      	ldrb	r3, [r3, #0]
    414c:	b2db      	uxtb	r3, r3
    414e:	2b4e      	cmp	r3, #78	; 0x4e
    4150:	d004      	beq.n	415c <endCall+0x94>
    4152:	4b54      	ldr	r3, [pc, #336]	; (42a4 <endCall+0x1dc>)
    4154:	781b      	ldrb	r3, [r3, #0]
    4156:	b2db      	uxtb	r3, r3
    4158:	2b52      	cmp	r3, #82	; 0x52
    415a:	d106      	bne.n	416a <endCall+0xa2>
    415c:	4b52      	ldr	r3, [pc, #328]	; (42a8 <endCall+0x1e0>)
    415e:	781b      	ldrb	r3, [r3, #0]
    4160:	b2db      	uxtb	r3, r3
    4162:	2b4f      	cmp	r3, #79	; 0x4f
    4164:	d101      	bne.n	416a <endCall+0xa2>
    4166:	2301      	movs	r3, #1
    4168:	e000      	b.n	416c <endCall+0xa4>
    416a:	2300      	movs	r3, #0
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    416c:	1c1a      	adds	r2, r3, #0
    416e:	2301      	movs	r3, #1
    4170:	4013      	ands	r3, r2
    4172:	b2db      	uxtb	r3, r3
    4174:	2b00      	cmp	r3, #0
    4176:	d021      	beq.n	41bc <endCall+0xf4>
	{
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
    4178:	4b4d      	ldr	r3, [pc, #308]	; (42b0 <endCall+0x1e8>)
    417a:	781b      	ldrb	r3, [r3, #0]
    417c:	2b00      	cmp	r3, #0
    417e:	d11d      	bne.n	41bc <endCall+0xf4>
    4180:	4b4c      	ldr	r3, [pc, #304]	; (42b4 <endCall+0x1ec>)
    4182:	781b      	ldrb	r3, [r3, #0]
    4184:	2201      	movs	r2, #1
    4186:	4053      	eors	r3, r2
    4188:	b2db      	uxtb	r3, r3
    418a:	2b00      	cmp	r3, #0
    418c:	d016      	beq.n	41bc <endCall+0xf4>
    418e:	4b4a      	ldr	r3, [pc, #296]	; (42b8 <endCall+0x1f0>)
    4190:	795b      	ldrb	r3, [r3, #5]
    4192:	2b54      	cmp	r3, #84	; 0x54
    4194:	d112      	bne.n	41bc <endCall+0xf4>
    4196:	4b49      	ldr	r3, [pc, #292]	; (42bc <endCall+0x1f4>)
    4198:	789b      	ldrb	r3, [r3, #2]
    419a:	2b01      	cmp	r3, #1
    419c:	d90e      	bls.n	41bc <endCall+0xf4>
		{
			retries=1;
    419e:	4b44      	ldr	r3, [pc, #272]	; (42b0 <endCall+0x1e8>)
    41a0:	2201      	movs	r2, #1
    41a2:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
    41a4:	4b46      	ldr	r3, [pc, #280]	; (42c0 <endCall+0x1f8>)
    41a6:	2201      	movs	r2, #1
    41a8:	701a      	strb	r2, [r3, #0]
			tempEventStageTime=xTaskGetTickCount();
    41aa:	4b46      	ldr	r3, [pc, #280]	; (42c4 <endCall+0x1fc>)
    41ac:	4798      	blx	r3
    41ae:	0002      	movs	r2, r0
    41b0:	4b45      	ldr	r3, [pc, #276]	; (42c8 <endCall+0x200>)
    41b2:	601a      	str	r2, [r3, #0]
			stagedEventType=actionType;
    41b4:	4b45      	ldr	r3, [pc, #276]	; (42cc <endCall+0x204>)
    41b6:	781a      	ldrb	r2, [r3, #0]
    41b8:	4b45      	ldr	r3, [pc, #276]	; (42d0 <endCall+0x208>)
    41ba:	701a      	strb	r2, [r3, #0]
		}
	}
	
	if (factory_settings_parameter_struct.ENABLE_M2M)
    41bc:	4b37      	ldr	r3, [pc, #220]	; (429c <endCall+0x1d4>)
    41be:	78db      	ldrb	r3, [r3, #3]
    41c0:	2b00      	cmp	r3, #0
    41c2:	d047      	beq.n	4254 <endCall+0x18c>
	{
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
    41c4:	4b37      	ldr	r3, [pc, #220]	; (42a4 <endCall+0x1dc>)
    41c6:	781b      	ldrb	r3, [r3, #0]
    41c8:	b2db      	uxtb	r3, r3
    41ca:	2b49      	cmp	r3, #73	; 0x49
    41cc:	d004      	beq.n	41d8 <endCall+0x110>
    41ce:	4b35      	ldr	r3, [pc, #212]	; (42a4 <endCall+0x1dc>)
    41d0:	781b      	ldrb	r3, [r3, #0]
    41d2:	b2db      	uxtb	r3, r3
    41d4:	2b52      	cmp	r3, #82	; 0x52
    41d6:	d137      	bne.n	4248 <endCall+0x180>
    41d8:	4b33      	ldr	r3, [pc, #204]	; (42a8 <endCall+0x1e0>)
    41da:	781b      	ldrb	r3, [r3, #0]
    41dc:	b2db      	uxtb	r3, r3
    41de:	2b4f      	cmp	r3, #79	; 0x4f
    41e0:	d132      	bne.n	4248 <endCall+0x180>
    41e2:	4b32      	ldr	r3, [pc, #200]	; (42ac <endCall+0x1e4>)
    41e4:	781b      	ldrb	r3, [r3, #0]
    41e6:	2b00      	cmp	r3, #0
    41e8:	d02e      	beq.n	4248 <endCall+0x180>
    41ea:	4b3a      	ldr	r3, [pc, #232]	; (42d4 <endCall+0x20c>)
    41ec:	795b      	ldrb	r3, [r3, #5]
    41ee:	2b00      	cmp	r3, #0
    41f0:	d02a      	beq.n	4248 <endCall+0x180>
		{
			m2mEventCalls++;
    41f2:	4b39      	ldr	r3, [pc, #228]	; (42d8 <endCall+0x210>)
    41f4:	781b      	ldrb	r3, [r3, #0]
    41f6:	3301      	adds	r3, #1
    41f8:	b2da      	uxtb	r2, r3
    41fa:	4b37      	ldr	r3, [pc, #220]	; (42d8 <endCall+0x210>)
    41fc:	701a      	strb	r2, [r3, #0]
			if(m2mAck)
    41fe:	4b37      	ldr	r3, [pc, #220]	; (42dc <endCall+0x214>)
    4200:	781b      	ldrb	r3, [r3, #0]
    4202:	2b00      	cmp	r3, #0
    4204:	d006      	beq.n	4214 <endCall+0x14c>
			{
				setM2MEventState(m2mEventNo,ME_CLEARED);
    4206:	4b36      	ldr	r3, [pc, #216]	; (42e0 <endCall+0x218>)
    4208:	781b      	ldrb	r3, [r3, #0]
    420a:	2100      	movs	r1, #0
    420c:	0018      	movs	r0, r3
    420e:	4b35      	ldr	r3, [pc, #212]	; (42e4 <endCall+0x21c>)
    4210:	4798      	blx	r3
    4212:	e016      	b.n	4242 <endCall+0x17a>
			}
			else
			{
				if(m2mEventCalls<2)
    4214:	4b30      	ldr	r3, [pc, #192]	; (42d8 <endCall+0x210>)
    4216:	781b      	ldrb	r3, [r3, #0]
    4218:	2b01      	cmp	r3, #1
    421a:	d80c      	bhi.n	4236 <endCall+0x16e>
				{
					tempEventStageTime=xTaskGetTickCount();
    421c:	4b29      	ldr	r3, [pc, #164]	; (42c4 <endCall+0x1fc>)
    421e:	4798      	blx	r3
    4220:	0002      	movs	r2, r0
    4222:	4b29      	ldr	r3, [pc, #164]	; (42c8 <endCall+0x200>)
    4224:	601a      	str	r2, [r3, #0]
					stagedEventType=m2mEventNo;
    4226:	4b2e      	ldr	r3, [pc, #184]	; (42e0 <endCall+0x218>)
    4228:	781a      	ldrb	r2, [r3, #0]
    422a:	4b29      	ldr	r3, [pc, #164]	; (42d0 <endCall+0x208>)
    422c:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
    422e:	4b2e      	ldr	r3, [pc, #184]	; (42e8 <endCall+0x220>)
    4230:	2201      	movs	r2, #1
    4232:	701a      	strb	r2, [r3, #0]
    4234:	e005      	b.n	4242 <endCall+0x17a>
				}
				else
				{
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
    4236:	4b2a      	ldr	r3, [pc, #168]	; (42e0 <endCall+0x218>)
    4238:	781b      	ldrb	r3, [r3, #0]
    423a:	2103      	movs	r1, #3
    423c:	0018      	movs	r0, r3
    423e:	4b29      	ldr	r3, [pc, #164]	; (42e4 <endCall+0x21c>)
    4240:	4798      	blx	r3
				}
			}
			m2mEvent = false;
    4242:	4b1a      	ldr	r3, [pc, #104]	; (42ac <endCall+0x1e4>)
    4244:	2200      	movs	r2, #0
    4246:	701a      	strb	r2, [r3, #0]
		}
		keyPressed=false;
    4248:	4b28      	ldr	r3, [pc, #160]	; (42ec <endCall+0x224>)
    424a:	2200      	movs	r2, #0
    424c:	701a      	strb	r2, [r3, #0]
		m2mAck=false;
    424e:	4b23      	ldr	r3, [pc, #140]	; (42dc <endCall+0x214>)
    4250:	2200      	movs	r2, #0
    4252:	701a      	strb	r2, [r3, #0]
	}
	callAccepted = false;
    4254:	4b17      	ldr	r3, [pc, #92]	; (42b4 <endCall+0x1ec>)
    4256:	2200      	movs	r2, #0
    4258:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
    425a:	4b12      	ldr	r3, [pc, #72]	; (42a4 <endCall+0x1dc>)
    425c:	224e      	movs	r2, #78	; 0x4e
    425e:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
    4260:	4b11      	ldr	r3, [pc, #68]	; (42a8 <endCall+0x1e0>)
    4262:	224e      	movs	r2, #78	; 0x4e
    4264:	701a      	strb	r2, [r3, #0]

	isRegisteredNumber=false;
    4266:	4b22      	ldr	r3, [pc, #136]	; (42f0 <endCall+0x228>)
    4268:	2200      	movs	r2, #0
    426a:	701a      	strb	r2, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
    426c:	4b15      	ldr	r3, [pc, #84]	; (42c4 <endCall+0x1fc>)
    426e:	4798      	blx	r3
    4270:	0002      	movs	r2, r0
    4272:	4b20      	ldr	r3, [pc, #128]	; (42f4 <endCall+0x22c>)
    4274:	601a      	str	r2, [r3, #0]
	obtainNewEvent = false;
    4276:	4b20      	ldr	r3, [pc, #128]	; (42f8 <endCall+0x230>)
    4278:	2200      	movs	r2, #0
    427a:	701a      	strb	r2, [r3, #0]
}
    427c:	46c0      	nop			; (mov r8, r8)
    427e:	46bd      	mov	sp, r7
    4280:	bd80      	pop	{r7, pc}
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	200006d8 	.word	0x200006d8
    4288:	20000774 	.word	0x20000774
    428c:	00002e1d 	.word	0x00002e1d
    4290:	0000bd65 	.word	0x0000bd65
    4294:	0000f019 	.word	0x0000f019
    4298:	2000071c 	.word	0x2000071c
    429c:	20000628 	.word	0x20000628
    42a0:	200007c7 	.word	0x200007c7
    42a4:	200007a8 	.word	0x200007a8
    42a8:	20000767 	.word	0x20000767
    42ac:	2000071b 	.word	0x2000071b
    42b0:	200006d9 	.word	0x200006d9
    42b4:	20000776 	.word	0x20000776
    42b8:	2000065c 	.word	0x2000065c
    42bc:	20000610 	.word	0x20000610
    42c0:	2000079a 	.word	0x2000079a
    42c4:	0000f37d 	.word	0x0000f37d
    42c8:	200007ac 	.word	0x200007ac
    42cc:	2000073b 	.word	0x2000073b
    42d0:	2000074c 	.word	0x2000074c
    42d4:	20000554 	.word	0x20000554
    42d8:	2000079b 	.word	0x2000079b
    42dc:	20000714 	.word	0x20000714
    42e0:	20000715 	.word	0x20000715
    42e4:	0000ad8d 	.word	0x0000ad8d
    42e8:	20000766 	.word	0x20000766
    42ec:	20000798 	.word	0x20000798
    42f0:	20000770 	.word	0x20000770
    42f4:	200007cc 	.word	0x200007cc
    42f8:	2000074a 	.word	0x2000074a

000042fc <makeCall>:


void makeCall(void)
{
    42fc:	b580      	push	{r7, lr}
    42fe:	b086      	sub	sp, #24
    4300:	af00      	add	r7, sp, #0
	inCall=true;
    4302:	4b20      	ldr	r3, [pc, #128]	; (4384 <makeCall+0x88>)
    4304:	2201      	movs	r2, #1
    4306:	701a      	strb	r2, [r3, #0]
	
	char command[20] = {0};
    4308:	1d3b      	adds	r3, r7, #4
    430a:	0018      	movs	r0, r3
    430c:	2314      	movs	r3, #20
    430e:	001a      	movs	r2, r3
    4310:	2100      	movs	r1, #0
    4312:	4b1d      	ldr	r3, [pc, #116]	; (4388 <makeCall+0x8c>)
    4314:	4798      	blx	r3
	
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
    4316:	4b1d      	ldr	r3, [pc, #116]	; (438c <makeCall+0x90>)
    4318:	795b      	ldrb	r3, [r3, #5]
    431a:	2b00      	cmp	r3, #0
    431c:	d008      	beq.n	4330 <makeCall+0x34>
    431e:	4b1c      	ldr	r3, [pc, #112]	; (4390 <makeCall+0x94>)
    4320:	781b      	ldrb	r3, [r3, #0]
    4322:	2b00      	cmp	r3, #0
    4324:	d004      	beq.n	4330 <makeCall+0x34>
	{
		getM2MRemoteNumber(command);
    4326:	1d3b      	adds	r3, r7, #4
    4328:	0018      	movs	r0, r3
    432a:	4b1a      	ldr	r3, [pc, #104]	; (4394 <makeCall+0x98>)
    432c:	4798      	blx	r3
    432e:	e00f      	b.n	4350 <makeCall+0x54>
	}
	else
	{
		if(retries)
    4330:	4b19      	ldr	r3, [pc, #100]	; (4398 <makeCall+0x9c>)
    4332:	781b      	ldrb	r3, [r3, #0]
    4334:	2b00      	cmp	r3, #0
    4336:	d007      	beq.n	4348 <makeCall+0x4c>
		{
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
    4338:	4b18      	ldr	r3, [pc, #96]	; (439c <makeCall+0xa0>)
    433a:	791a      	ldrb	r2, [r3, #4]
    433c:	1d3b      	adds	r3, r7, #4
    433e:	0011      	movs	r1, r2
    4340:	0018      	movs	r0, r3
    4342:	4b17      	ldr	r3, [pc, #92]	; (43a0 <makeCall+0xa4>)
    4344:	4798      	blx	r3
    4346:	e003      	b.n	4350 <makeCall+0x54>
		}
		else
		{
			getActiveNumber(command);
    4348:	1d3b      	adds	r3, r7, #4
    434a:	0018      	movs	r0, r3
    434c:	4b15      	ldr	r3, [pc, #84]	; (43a4 <makeCall+0xa8>)
    434e:	4798      	blx	r3
		}
	}
	gsm_call_to_dial_a_number(command);
    4350:	1d3b      	adds	r3, r7, #4
    4352:	0018      	movs	r0, r3
    4354:	4b14      	ldr	r3, [pc, #80]	; (43a8 <makeCall+0xac>)
    4356:	4798      	blx	r3
	setCallStateOnLCD(LCDCALLSTATE_OUTGOING,command,false);
    4358:	1d3b      	adds	r3, r7, #4
    435a:	2200      	movs	r2, #0
    435c:	0019      	movs	r1, r3
    435e:	2003      	movs	r0, #3
    4360:	4b12      	ldr	r3, [pc, #72]	; (43ac <makeCall+0xb0>)
    4362:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
    4364:	4b12      	ldr	r3, [pc, #72]	; (43b0 <makeCall+0xb4>)
    4366:	4798      	blx	r3
    4368:	0002      	movs	r2, r0
    436a:	4b12      	ldr	r3, [pc, #72]	; (43b4 <makeCall+0xb8>)
    436c:	601a      	str	r2, [r3, #0]
	currentStatus = 'R';
    436e:	4b12      	ldr	r3, [pc, #72]	; (43b8 <makeCall+0xbc>)
    4370:	2252      	movs	r2, #82	; 0x52
    4372:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
    4374:	4b11      	ldr	r3, [pc, #68]	; (43bc <makeCall+0xc0>)
    4376:	224f      	movs	r2, #79	; 0x4f
    4378:	701a      	strb	r2, [r3, #0]
}
    437a:	46c0      	nop			; (mov r8, r8)
    437c:	46bd      	mov	sp, r7
    437e:	b006      	add	sp, #24
    4380:	bd80      	pop	{r7, pc}
    4382:	46c0      	nop			; (mov r8, r8)
    4384:	20000774 	.word	0x20000774
    4388:	00017cd7 	.word	0x00017cd7
    438c:	20000554 	.word	0x20000554
    4390:	2000071b 	.word	0x2000071b
    4394:	00000b09 	.word	0x00000b09
    4398:	200006d9 	.word	0x200006d9
    439c:	20000610 	.word	0x20000610
    43a0:	00000919 	.word	0x00000919
    43a4:	00000d21 	.word	0x00000d21
    43a8:	00002c59 	.word	0x00002c59
    43ac:	0000bd65 	.word	0x0000bd65
    43b0:	0000f37d 	.word	0x0000f37d
    43b4:	200007d0 	.word	0x200007d0
    43b8:	200007a8 	.word	0x200007a8
    43bc:	20000767 	.word	0x20000767

000043c0 <acceptCall>:

void acceptCall(void)
{
    43c0:	b580      	push	{r7, lr}
    43c2:	af00      	add	r7, sp, #0
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
    43c4:	4b0a      	ldr	r3, [pc, #40]	; (43f0 <acceptCall+0x30>)
    43c6:	2200      	movs	r2, #0
    43c8:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
    43ca:	4b0a      	ldr	r3, [pc, #40]	; (43f4 <acceptCall+0x34>)
    43cc:	2201      	movs	r2, #1
    43ce:	701a      	strb	r2, [r3, #0]
	gsm_answer_an_incomming_call();
    43d0:	4b09      	ldr	r3, [pc, #36]	; (43f8 <acceptCall+0x38>)
    43d2:	4798      	blx	r3
	currentStatus = 'I';
    43d4:	4b09      	ldr	r3, [pc, #36]	; (43fc <acceptCall+0x3c>)
    43d6:	2249      	movs	r2, #73	; 0x49
    43d8:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'I';
    43da:	4b09      	ldr	r3, [pc, #36]	; (4400 <acceptCall+0x40>)
    43dc:	2249      	movs	r2, #73	; 0x49
    43de:	701a      	strb	r2, [r3, #0]
	playSound('M',true);
    43e0:	2101      	movs	r1, #1
    43e2:	204d      	movs	r0, #77	; 0x4d
    43e4:	4b07      	ldr	r3, [pc, #28]	; (4404 <acceptCall+0x44>)
    43e6:	4798      	blx	r3
	//displayInIncomingCall
}
    43e8:	46c0      	nop			; (mov r8, r8)
    43ea:	46bd      	mov	sp, r7
    43ec:	bd80      	pop	{r7, pc}
    43ee:	46c0      	nop			; (mov r8, r8)
    43f0:	20000770 	.word	0x20000770
    43f4:	20000776 	.word	0x20000776
    43f8:	00002cf1 	.word	0x00002cf1
    43fc:	200007a8 	.word	0x200007a8
    4400:	20000767 	.word	0x20000767
    4404:	00004409 	.word	0x00004409

00004408 <playSound>:

//void playSound(char actionType, bool newAction=true)
void playSound(char actionTypeT, bool newAction)
{
    4408:	b580      	push	{r7, lr}
    440a:	b082      	sub	sp, #8
    440c:	af00      	add	r7, sp, #0
    440e:	0002      	movs	r2, r0
    4410:	1dfb      	adds	r3, r7, #7
    4412:	701a      	strb	r2, [r3, #0]
    4414:	1dbb      	adds	r3, r7, #6
    4416:	1c0a      	adds	r2, r1, #0
    4418:	701a      	strb	r2, [r3, #0]
	gsm_stop_play_record_file();
    441a:	4b14      	ldr	r3, [pc, #80]	; (446c <playSound+0x64>)
    441c:	4798      	blx	r3
	bplaySound = true;
    441e:	4b14      	ldr	r3, [pc, #80]	; (4470 <playSound+0x68>)
    4420:	2201      	movs	r2, #1
    4422:	701a      	strb	r2, [r3, #0]
	if (newAction)
    4424:	1dbb      	adds	r3, r7, #6
    4426:	781b      	ldrb	r3, [r3, #0]
    4428:	2b00      	cmp	r3, #0
    442a:	d016      	beq.n	445a <playSound+0x52>
	{
		maxPlayingFiles=1;
    442c:	4b11      	ldr	r3, [pc, #68]	; (4474 <playSound+0x6c>)
    442e:	2201      	movs	r2, #1
    4430:	701a      	strb	r2, [r3, #0]
		currentPlayingFileIndex=0;
    4432:	4b11      	ldr	r3, [pc, #68]	; (4478 <playSound+0x70>)
    4434:	2200      	movs	r2, #0
    4436:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
    4438:	4b0f      	ldr	r3, [pc, #60]	; (4478 <playSound+0x70>)
    443a:	781b      	ldrb	r3, [r3, #0]
    443c:	0019      	movs	r1, r3
    443e:	4b0f      	ldr	r3, [pc, #60]	; (447c <playSound+0x74>)
    4440:	1dfa      	adds	r2, r7, #7
    4442:	7812      	ldrb	r2, [r2, #0]
    4444:	545a      	strb	r2, [r3, r1]
		playFilesList[currentPlayingFileIndex+1]='\0';
    4446:	4b0c      	ldr	r3, [pc, #48]	; (4478 <playSound+0x70>)
    4448:	781b      	ldrb	r3, [r3, #0]
    444a:	3301      	adds	r3, #1
    444c:	4a0b      	ldr	r2, [pc, #44]	; (447c <playSound+0x74>)
    444e:	2100      	movs	r1, #0
    4450:	54d1      	strb	r1, [r2, r3]
		actionType = actionTypeT;
    4452:	4b0b      	ldr	r3, [pc, #44]	; (4480 <playSound+0x78>)
    4454:	1dfa      	adds	r2, r7, #7
    4456:	7812      	ldrb	r2, [r2, #0]
    4458:	701a      	strb	r2, [r3, #0]
	}
	playFile = actionTypeT;
    445a:	4b0a      	ldr	r3, [pc, #40]	; (4484 <playSound+0x7c>)
    445c:	1dfa      	adds	r2, r7, #7
    445e:	7812      	ldrb	r2, [r2, #0]
    4460:	701a      	strb	r2, [r3, #0]
}
    4462:	46c0      	nop			; (mov r8, r8)
    4464:	46bd      	mov	sp, r7
    4466:	b002      	add	sp, #8
    4468:	bd80      	pop	{r7, pc}
    446a:	46c0      	nop			; (mov r8, r8)
    446c:	00002e7d 	.word	0x00002e7d
    4470:	20000816 	.word	0x20000816
    4474:	2000079c 	.word	0x2000079c
    4478:	2000078c 	.word	0x2000078c
    447c:	20000724 	.word	0x20000724
    4480:	2000073b 	.word	0x2000073b
    4484:	2000078b 	.word	0x2000078b

00004488 <playSoundElligible>:

bool playSoundElligible(void)
{
    4488:	b580      	push	{r7, lr}
    448a:	af00      	add	r7, sp, #0
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
    448c:	4b0d      	ldr	r3, [pc, #52]	; (44c4 <playSoundElligible+0x3c>)
    448e:	781b      	ldrb	r3, [r3, #0]
    4490:	2b00      	cmp	r3, #0
    4492:	d00e      	beq.n	44b2 <playSoundElligible+0x2a>
    4494:	4b0c      	ldr	r3, [pc, #48]	; (44c8 <playSoundElligible+0x40>)
    4496:	4798      	blx	r3
    4498:	0002      	movs	r2, r0
    449a:	4b0c      	ldr	r3, [pc, #48]	; (44cc <playSoundElligible+0x44>)
    449c:	681b      	ldr	r3, [r3, #0]
    449e:	1ad3      	subs	r3, r2, r3
    44a0:	4a0b      	ldr	r2, [pc, #44]	; (44d0 <playSoundElligible+0x48>)
    44a2:	7812      	ldrb	r2, [r2, #0]
    44a4:	0011      	movs	r1, r2
    44a6:	2264      	movs	r2, #100	; 0x64
    44a8:	434a      	muls	r2, r1
    44aa:	4293      	cmp	r3, r2
    44ac:	d901      	bls.n	44b2 <playSoundElligible+0x2a>
    44ae:	2301      	movs	r3, #1
    44b0:	e000      	b.n	44b4 <playSoundElligible+0x2c>
    44b2:	2300      	movs	r3, #0
    44b4:	1c1a      	adds	r2, r3, #0
    44b6:	2301      	movs	r3, #1
    44b8:	4013      	ands	r3, r2
    44ba:	b2db      	uxtb	r3, r3
}
    44bc:	0018      	movs	r0, r3
    44be:	46bd      	mov	sp, r7
    44c0:	bd80      	pop	{r7, pc}
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	20000816 	.word	0x20000816
    44c8:	0000f37d 	.word	0x0000f37d
    44cc:	200007f8 	.word	0x200007f8
    44d0:	2000079d 	.word	0x2000079d

000044d4 <triggerPlaySound>:

void triggerPlaySound(void)
{
    44d4:	b580      	push	{r7, lr}
    44d6:	af00      	add	r7, sp, #0
	if(maxPlayingFiles>1)
    44d8:	4b0b      	ldr	r3, [pc, #44]	; (4508 <triggerPlaySound+0x34>)
    44da:	781b      	ldrb	r3, [r3, #0]
    44dc:	2b01      	cmp	r3, #1
    44de:	d906      	bls.n	44ee <triggerPlaySound+0x1a>
	{
		gsm_play_record_file((char*)playFile,false);
    44e0:	4b0a      	ldr	r3, [pc, #40]	; (450c <triggerPlaySound+0x38>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	2100      	movs	r1, #0
    44e6:	0018      	movs	r0, r3
    44e8:	4b09      	ldr	r3, [pc, #36]	; (4510 <triggerPlaySound+0x3c>)
    44ea:	4798      	blx	r3
    44ec:	e005      	b.n	44fa <triggerPlaySound+0x26>
	}
	else
	{
		gsm_play_record_file((char*)playFile,true);
    44ee:	4b07      	ldr	r3, [pc, #28]	; (450c <triggerPlaySound+0x38>)
    44f0:	781b      	ldrb	r3, [r3, #0]
    44f2:	2101      	movs	r1, #1
    44f4:	0018      	movs	r0, r3
    44f6:	4b06      	ldr	r3, [pc, #24]	; (4510 <triggerPlaySound+0x3c>)
    44f8:	4798      	blx	r3
	}
	bplaySound = false;
    44fa:	4b06      	ldr	r3, [pc, #24]	; (4514 <triggerPlaySound+0x40>)
    44fc:	2200      	movs	r2, #0
    44fe:	701a      	strb	r2, [r3, #0]
}
    4500:	46c0      	nop			; (mov r8, r8)
    4502:	46bd      	mov	sp, r7
    4504:	bd80      	pop	{r7, pc}
    4506:	46c0      	nop			; (mov r8, r8)
    4508:	2000079c 	.word	0x2000079c
    450c:	2000078b 	.word	0x2000078b
    4510:	00002ead 	.word	0x00002ead
    4514:	20000816 	.word	0x20000816

00004518 <playSoundAgain>:

void playSoundAgain(char *string)
{
    4518:	b580      	push	{r7, lr}
    451a:	b082      	sub	sp, #8
    451c:	af00      	add	r7, sp, #0
    451e:	6078      	str	r0, [r7, #4]
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
    4520:	4b18      	ldr	r3, [pc, #96]	; (4584 <playSoundAgain+0x6c>)
    4522:	781b      	ldrb	r3, [r3, #0]
    4524:	2201      	movs	r2, #1
    4526:	4053      	eors	r3, r2
    4528:	b2db      	uxtb	r3, r3
    452a:	2b00      	cmp	r3, #0
    452c:	d025      	beq.n	457a <playSoundAgain+0x62>
    452e:	687b      	ldr	r3, [r7, #4]
    4530:	0018      	movs	r0, r3
    4532:	4b15      	ldr	r3, [pc, #84]	; (4588 <playSoundAgain+0x70>)
    4534:	4798      	blx	r3
    4536:	1e03      	subs	r3, r0, #0
    4538:	d01f      	beq.n	457a <playSoundAgain+0x62>
	{
		if(maxPlayingFiles>1)
    453a:	4b14      	ldr	r3, [pc, #80]	; (458c <playSoundAgain+0x74>)
    453c:	781b      	ldrb	r3, [r3, #0]
    453e:	2b01      	cmp	r3, #1
    4540:	d91b      	bls.n	457a <playSoundAgain+0x62>
		{
			if(currentPlayingFileIndex<maxPlayingFiles-1)
    4542:	4b13      	ldr	r3, [pc, #76]	; (4590 <playSoundAgain+0x78>)
    4544:	781b      	ldrb	r3, [r3, #0]
    4546:	001a      	movs	r2, r3
    4548:	4b10      	ldr	r3, [pc, #64]	; (458c <playSoundAgain+0x74>)
    454a:	781b      	ldrb	r3, [r3, #0]
    454c:	3b01      	subs	r3, #1
    454e:	429a      	cmp	r2, r3
    4550:	da0f      	bge.n	4572 <playSoundAgain+0x5a>
			{
				playSound(playFilesList[++currentPlayingFileIndex],false);
    4552:	4b0f      	ldr	r3, [pc, #60]	; (4590 <playSoundAgain+0x78>)
    4554:	781b      	ldrb	r3, [r3, #0]
    4556:	3301      	adds	r3, #1
    4558:	b2da      	uxtb	r2, r3
    455a:	4b0d      	ldr	r3, [pc, #52]	; (4590 <playSoundAgain+0x78>)
    455c:	701a      	strb	r2, [r3, #0]
    455e:	4b0c      	ldr	r3, [pc, #48]	; (4590 <playSoundAgain+0x78>)
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	001a      	movs	r2, r3
    4564:	4b0b      	ldr	r3, [pc, #44]	; (4594 <playSoundAgain+0x7c>)
    4566:	5c9b      	ldrb	r3, [r3, r2]
    4568:	2100      	movs	r1, #0
    456a:	0018      	movs	r0, r3
    456c:	4b0a      	ldr	r3, [pc, #40]	; (4598 <playSoundAgain+0x80>)
    456e:	4798      	blx	r3
			{
				playSound('M',true);
			}
		}
	}
}
    4570:	e003      	b.n	457a <playSoundAgain+0x62>
				playSound('M',true);
    4572:	2101      	movs	r1, #1
    4574:	204d      	movs	r0, #77	; 0x4d
    4576:	4b08      	ldr	r3, [pc, #32]	; (4598 <playSoundAgain+0x80>)
    4578:	4798      	blx	r3
}
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	46bd      	mov	sp, r7
    457e:	b002      	add	sp, #8
    4580:	bd80      	pop	{r7, pc}
    4582:	46c0      	nop			; (mov r8, r8)
    4584:	20000816 	.word	0x20000816
    4588:	000034b1 	.word	0x000034b1
    458c:	2000079c 	.word	0x2000079c
    4590:	2000078c 	.word	0x2000078c
    4594:	20000724 	.word	0x20000724
    4598:	00004409 	.word	0x00004409

0000459c <playRepeatedFiles>:

void playRepeatedFiles(char *fileList)
{
    459c:	b580      	push	{r7, lr}
    459e:	b082      	sub	sp, #8
    45a0:	af00      	add	r7, sp, #0
    45a2:	6078      	str	r0, [r7, #4]
	if(strlen(fileList)<15)
    45a4:	687b      	ldr	r3, [r7, #4]
    45a6:	0018      	movs	r0, r3
    45a8:	4b14      	ldr	r3, [pc, #80]	; (45fc <playRepeatedFiles+0x60>)
    45aa:	4798      	blx	r3
    45ac:	0003      	movs	r3, r0
    45ae:	2b0e      	cmp	r3, #14
    45b0:	d81f      	bhi.n	45f2 <playRepeatedFiles+0x56>
	{
		currentPlayingFileIndex=0;
    45b2:	4b13      	ldr	r3, [pc, #76]	; (4600 <playRepeatedFiles+0x64>)
    45b4:	2200      	movs	r2, #0
    45b6:	701a      	strb	r2, [r3, #0]
		maxPlayingFiles=strlen(fileList);
    45b8:	687b      	ldr	r3, [r7, #4]
    45ba:	0018      	movs	r0, r3
    45bc:	4b0f      	ldr	r3, [pc, #60]	; (45fc <playRepeatedFiles+0x60>)
    45be:	4798      	blx	r3
    45c0:	0003      	movs	r3, r0
    45c2:	b2da      	uxtb	r2, r3
    45c4:	4b0f      	ldr	r3, [pc, #60]	; (4604 <playRepeatedFiles+0x68>)
    45c6:	701a      	strb	r2, [r3, #0]
		strcpy(playFilesList,fileList);
    45c8:	687a      	ldr	r2, [r7, #4]
    45ca:	4b0f      	ldr	r3, [pc, #60]	; (4608 <playRepeatedFiles+0x6c>)
    45cc:	0011      	movs	r1, r2
    45ce:	0018      	movs	r0, r3
    45d0:	4b0e      	ldr	r3, [pc, #56]	; (460c <playRepeatedFiles+0x70>)
    45d2:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
    45d4:	4b0e      	ldr	r3, [pc, #56]	; (4610 <playRepeatedFiles+0x74>)
    45d6:	4798      	blx	r3
    45d8:	0002      	movs	r2, r0
    45da:	4b0e      	ldr	r3, [pc, #56]	; (4614 <playRepeatedFiles+0x78>)
    45dc:	601a      	str	r2, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
    45de:	4b08      	ldr	r3, [pc, #32]	; (4600 <playRepeatedFiles+0x64>)
    45e0:	781b      	ldrb	r3, [r3, #0]
    45e2:	001a      	movs	r2, r3
    45e4:	4b08      	ldr	r3, [pc, #32]	; (4608 <playRepeatedFiles+0x6c>)
    45e6:	5c9a      	ldrb	r2, [r3, r2]
    45e8:	4b0b      	ldr	r3, [pc, #44]	; (4618 <playRepeatedFiles+0x7c>)
    45ea:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
    45ec:	4b0b      	ldr	r3, [pc, #44]	; (461c <playRepeatedFiles+0x80>)
    45ee:	2201      	movs	r2, #1
    45f0:	701a      	strb	r2, [r3, #0]
	}
}
    45f2:	46c0      	nop			; (mov r8, r8)
    45f4:	46bd      	mov	sp, r7
    45f6:	b002      	add	sp, #8
    45f8:	bd80      	pop	{r7, pc}
    45fa:	46c0      	nop			; (mov r8, r8)
    45fc:	00017f67 	.word	0x00017f67
    4600:	2000078c 	.word	0x2000078c
    4604:	2000079c 	.word	0x2000079c
    4608:	20000724 	.word	0x20000724
    460c:	00017f57 	.word	0x00017f57
    4610:	0000f37d 	.word	0x0000f37d
    4614:	200007f8 	.word	0x200007f8
    4618:	2000078b 	.word	0x2000078b
    461c:	20000816 	.word	0x20000816

00004620 <callTimerExpire>:

bool callTimerExpire(void)
{
    4620:	b580      	push	{r7, lr}
    4622:	af00      	add	r7, sp, #0
	return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
    4624:	4b09      	ldr	r3, [pc, #36]	; (464c <callTimerExpire+0x2c>)
    4626:	4798      	blx	r3
    4628:	0002      	movs	r2, r0
    462a:	4b09      	ldr	r3, [pc, #36]	; (4650 <callTimerExpire+0x30>)
    462c:	681b      	ldr	r3, [r3, #0]
    462e:	1ad2      	subs	r2, r2, r3
    4630:	4b08      	ldr	r3, [pc, #32]	; (4654 <callTimerExpire+0x34>)
    4632:	881b      	ldrh	r3, [r3, #0]
    4634:	0019      	movs	r1, r3
    4636:	2364      	movs	r3, #100	; 0x64
    4638:	434b      	muls	r3, r1
    463a:	0019      	movs	r1, r3
    463c:	2300      	movs	r3, #0
    463e:	428a      	cmp	r2, r1
    4640:	415b      	adcs	r3, r3
    4642:	b2db      	uxtb	r3, r3
}
    4644:	0018      	movs	r0, r3
    4646:	46bd      	mov	sp, r7
    4648:	bd80      	pop	{r7, pc}
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	0000f37d 	.word	0x0000f37d
    4650:	200007d0 	.word	0x200007d0
    4654:	2000073c 	.word	0x2000073c

00004658 <OutGoingcallState>:

char OutGoingcallState(char *response)
{
    4658:	b580      	push	{r7, lr}
    465a:	b082      	sub	sp, #8
    465c:	af00      	add	r7, sp, #0
    465e:	6078      	str	r0, [r7, #4]
	if(strstr(response,"+CLCC: 1,0,2"))
    4660:	4a16      	ldr	r2, [pc, #88]	; (46bc <OutGoingcallState+0x64>)
    4662:	687b      	ldr	r3, [r7, #4]
    4664:	0011      	movs	r1, r2
    4666:	0018      	movs	r0, r3
    4668:	4b15      	ldr	r3, [pc, #84]	; (46c0 <OutGoingcallState+0x68>)
    466a:	4798      	blx	r3
    466c:	1e03      	subs	r3, r0, #0
    466e:	d001      	beq.n	4674 <OutGoingcallState+0x1c>
	{
		return 'D';								//dialling
    4670:	2344      	movs	r3, #68	; 0x44
    4672:	e01e      	b.n	46b2 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,3"))
    4674:	4a13      	ldr	r2, [pc, #76]	; (46c4 <OutGoingcallState+0x6c>)
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	0011      	movs	r1, r2
    467a:	0018      	movs	r0, r3
    467c:	4b10      	ldr	r3, [pc, #64]	; (46c0 <OutGoingcallState+0x68>)
    467e:	4798      	blx	r3
    4680:	1e03      	subs	r3, r0, #0
    4682:	d001      	beq.n	4688 <OutGoingcallState+0x30>
	{
		return 'R';								//alerting
    4684:	2352      	movs	r3, #82	; 0x52
    4686:	e014      	b.n	46b2 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,0"))
    4688:	4a0f      	ldr	r2, [pc, #60]	; (46c8 <OutGoingcallState+0x70>)
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	0011      	movs	r1, r2
    468e:	0018      	movs	r0, r3
    4690:	4b0b      	ldr	r3, [pc, #44]	; (46c0 <OutGoingcallState+0x68>)
    4692:	4798      	blx	r3
    4694:	1e03      	subs	r3, r0, #0
    4696:	d001      	beq.n	469c <OutGoingcallState+0x44>
	{
		return 'I';								//active call
    4698:	2349      	movs	r3, #73	; 0x49
    469a:	e00a      	b.n	46b2 <OutGoingcallState+0x5a>
	}
	else if (strstr(response,"+CLCC: 1,0,6"))
    469c:	4a0b      	ldr	r2, [pc, #44]	; (46cc <OutGoingcallState+0x74>)
    469e:	687b      	ldr	r3, [r7, #4]
    46a0:	0011      	movs	r1, r2
    46a2:	0018      	movs	r0, r3
    46a4:	4b06      	ldr	r3, [pc, #24]	; (46c0 <OutGoingcallState+0x68>)
    46a6:	4798      	blx	r3
    46a8:	1e03      	subs	r3, r0, #0
    46aa:	d001      	beq.n	46b0 <OutGoingcallState+0x58>
	{
		return 'E';								//call ended
    46ac:	2345      	movs	r3, #69	; 0x45
    46ae:	e000      	b.n	46b2 <OutGoingcallState+0x5a>
	}
	else
	{
		return 'N';
    46b0:	234e      	movs	r3, #78	; 0x4e
	}
}
    46b2:	0018      	movs	r0, r3
    46b4:	46bd      	mov	sp, r7
    46b6:	b002      	add	sp, #8
    46b8:	bd80      	pop	{r7, pc}
    46ba:	46c0      	nop			; (mov r8, r8)
    46bc:	00018ecc 	.word	0x00018ecc
    46c0:	00017f97 	.word	0x00017f97
    46c4:	00018edc 	.word	0x00018edc
    46c8:	00018eec 	.word	0x00018eec
    46cc:	00018efc 	.word	0x00018efc

000046d0 <registerEvent>:

bool registerEvent(char eventType)
{
    46d0:	b580      	push	{r7, lr}
    46d2:	b082      	sub	sp, #8
    46d4:	af00      	add	r7, sp, #0
    46d6:	0002      	movs	r2, r0
    46d8:	1dfb      	adds	r3, r7, #7
    46da:	701a      	strb	r2, [r3, #0]
	//if(isSIMReset())
	//{
	//return false;
	//}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
    46dc:	4b34      	ldr	r3, [pc, #208]	; (47b0 <registerEvent+0xe0>)
    46de:	789b      	ldrb	r3, [r3, #2]
    46e0:	2b00      	cmp	r3, #0
    46e2:	d003      	beq.n	46ec <registerEvent+0x1c>
    46e4:	4b33      	ldr	r3, [pc, #204]	; (47b4 <registerEvent+0xe4>)
    46e6:	795b      	ldrb	r3, [r3, #5]
    46e8:	2b4e      	cmp	r3, #78	; 0x4e
    46ea:	d101      	bne.n	46f0 <registerEvent+0x20>
	{
		return true;
    46ec:	2301      	movs	r3, #1
    46ee:	e05b      	b.n	47a8 <registerEvent+0xd8>
	}
	if (!initialized)
    46f0:	4b31      	ldr	r3, [pc, #196]	; (47b8 <registerEvent+0xe8>)
    46f2:	781b      	ldrb	r3, [r3, #0]
    46f4:	b2db      	uxtb	r3, r3
    46f6:	2201      	movs	r2, #1
    46f8:	4053      	eors	r3, r2
    46fa:	b2db      	uxtb	r3, r3
    46fc:	2b00      	cmp	r3, #0
    46fe:	d001      	beq.n	4704 <registerEvent+0x34>
	{
		return true;
    4700:	2301      	movs	r3, #1
    4702:	e051      	b.n	47a8 <registerEvent+0xd8>
	}
	if(!eventStaged && actionType==eventType)
    4704:	4b2d      	ldr	r3, [pc, #180]	; (47bc <registerEvent+0xec>)
    4706:	781b      	ldrb	r3, [r3, #0]
    4708:	2201      	movs	r2, #1
    470a:	4053      	eors	r3, r2
    470c:	b2db      	uxtb	r3, r3
    470e:	2b00      	cmp	r3, #0
    4710:	d007      	beq.n	4722 <registerEvent+0x52>
    4712:	4b2b      	ldr	r3, [pc, #172]	; (47c0 <registerEvent+0xf0>)
    4714:	781b      	ldrb	r3, [r3, #0]
    4716:	1dfa      	adds	r2, r7, #7
    4718:	7812      	ldrb	r2, [r2, #0]
    471a:	429a      	cmp	r2, r3
    471c:	d101      	bne.n	4722 <registerEvent+0x52>
	{
		return true;
    471e:	2301      	movs	r3, #1
    4720:	e042      	b.n	47a8 <registerEvent+0xd8>
	}
	//if ((factory_settings_parameter_struct.ENABLE_M2M==true)?
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged):
	//(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged))
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    4722:	4b28      	ldr	r3, [pc, #160]	; (47c4 <registerEvent+0xf4>)
    4724:	781b      	ldrb	r3, [r3, #0]
    4726:	b2db      	uxtb	r3, r3
    4728:	2b4e      	cmp	r3, #78	; 0x4e
    472a:	d13c      	bne.n	47a6 <registerEvent+0xd6>
    472c:	4b26      	ldr	r3, [pc, #152]	; (47c8 <registerEvent+0xf8>)
    472e:	781b      	ldrb	r3, [r3, #0]
    4730:	b2db      	uxtb	r3, r3
    4732:	2b4e      	cmp	r3, #78	; 0x4e
    4734:	d137      	bne.n	47a6 <registerEvent+0xd6>
    4736:	4b25      	ldr	r3, [pc, #148]	; (47cc <registerEvent+0xfc>)
    4738:	781b      	ldrb	r3, [r3, #0]
    473a:	2b00      	cmp	r3, #0
    473c:	d033      	beq.n	47a6 <registerEvent+0xd6>
    473e:	4b1f      	ldr	r3, [pc, #124]	; (47bc <registerEvent+0xec>)
    4740:	781b      	ldrb	r3, [r3, #0]
    4742:	2201      	movs	r2, #1
    4744:	4053      	eors	r3, r2
    4746:	b2db      	uxtb	r3, r3
    4748:	2b00      	cmp	r3, #0
    474a:	d02c      	beq.n	47a6 <registerEvent+0xd6>
    474c:	4b20      	ldr	r3, [pc, #128]	; (47d0 <registerEvent+0x100>)
    474e:	781b      	ldrb	r3, [r3, #0]
    4750:	2201      	movs	r2, #1
    4752:	4053      	eors	r3, r2
    4754:	b2db      	uxtb	r3, r3
    4756:	2b00      	cmp	r3, #0
    4758:	d025      	beq.n	47a6 <registerEvent+0xd6>
	{
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
    475a:	4b16      	ldr	r3, [pc, #88]	; (47b4 <registerEvent+0xe4>)
    475c:	7a5b      	ldrb	r3, [r3, #9]
    475e:	2b00      	cmp	r3, #0
    4760:	d005      	beq.n	476e <registerEvent+0x9e>
    4762:	4b1c      	ldr	r3, [pc, #112]	; (47d4 <registerEvent+0x104>)
    4764:	4798      	blx	r3
    4766:	1e03      	subs	r3, r0, #0
    4768:	d001      	beq.n	476e <registerEvent+0x9e>
		{
			return true;
    476a:	2301      	movs	r3, #1
    476c:	e01c      	b.n	47a8 <registerEvent+0xd8>
		}
		retries=0;
    476e:	4b1a      	ldr	r3, [pc, #104]	; (47d8 <registerEvent+0x108>)
    4770:	2200      	movs	r2, #0
    4772:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
    4774:	4b0f      	ldr	r3, [pc, #60]	; (47b4 <registerEvent+0xe4>)
    4776:	7a1b      	ldrb	r3, [r3, #8]
    4778:	2b00      	cmp	r3, #0
    477a:	d00c      	beq.n	4796 <registerEvent+0xc6>
		{
			tempEventStageTime=xTaskGetTickCount();
    477c:	4b17      	ldr	r3, [pc, #92]	; (47dc <registerEvent+0x10c>)
    477e:	4798      	blx	r3
    4780:	0002      	movs	r2, r0
    4782:	4b17      	ldr	r3, [pc, #92]	; (47e0 <registerEvent+0x110>)
    4784:	601a      	str	r2, [r3, #0]
			stagedEventType=eventType;
    4786:	4b17      	ldr	r3, [pc, #92]	; (47e4 <registerEvent+0x114>)
    4788:	1dfa      	adds	r2, r7, #7
    478a:	7812      	ldrb	r2, [r2, #0]
    478c:	701a      	strb	r2, [r3, #0]
			eventStaged=true;
    478e:	4b0b      	ldr	r3, [pc, #44]	; (47bc <registerEvent+0xec>)
    4790:	2201      	movs	r2, #1
    4792:	701a      	strb	r2, [r3, #0]
    4794:	e005      	b.n	47a2 <registerEvent+0xd2>
		}
		else
		{
			actionType = eventType;
    4796:	4b0a      	ldr	r3, [pc, #40]	; (47c0 <registerEvent+0xf0>)
    4798:	1dfa      	adds	r2, r7, #7
    479a:	7812      	ldrb	r2, [r2, #0]
    479c:	701a      	strb	r2, [r3, #0]
			makeResponseAction();
    479e:	4b12      	ldr	r3, [pc, #72]	; (47e8 <registerEvent+0x118>)
    47a0:	4798      	blx	r3
		}
		return true;
    47a2:	2301      	movs	r3, #1
    47a4:	e000      	b.n	47a8 <registerEvent+0xd8>
	}
	else
	{
		return false;
    47a6:	2300      	movs	r3, #0
	}
}
    47a8:	0018      	movs	r0, r3
    47aa:	46bd      	mov	sp, r7
    47ac:	b002      	add	sp, #8
    47ae:	bd80      	pop	{r7, pc}
    47b0:	20000610 	.word	0x20000610
    47b4:	2000065c 	.word	0x2000065c
    47b8:	20000775 	.word	0x20000775
    47bc:	2000079a 	.word	0x2000079a
    47c0:	2000073b 	.word	0x2000073b
    47c4:	200007a8 	.word	0x200007a8
    47c8:	20000767 	.word	0x20000767
    47cc:	2000074a 	.word	0x2000074a
    47d0:	20000766 	.word	0x20000766
    47d4:	00006b61 	.word	0x00006b61
    47d8:	200006d9 	.word	0x200006d9
    47dc:	0000f37d 	.word	0x0000f37d
    47e0:	200007ac 	.word	0x200007ac
    47e4:	2000074c 	.word	0x2000074c
    47e8:	00004095 	.word	0x00004095

000047ec <registerM2MEvent>:

void registerM2MEvent(uint8_t eventNo)
{
    47ec:	b580      	push	{r7, lr}
    47ee:	b082      	sub	sp, #8
    47f0:	af00      	add	r7, sp, #0
    47f2:	0002      	movs	r2, r0
    47f4:	1dfb      	adds	r3, r7, #7
    47f6:	701a      	strb	r2, [r3, #0]
	if (!initialized)
    47f8:	4b20      	ldr	r3, [pc, #128]	; (487c <registerM2MEvent+0x90>)
    47fa:	781b      	ldrb	r3, [r3, #0]
    47fc:	b2db      	uxtb	r3, r3
    47fe:	2201      	movs	r2, #1
    4800:	4053      	eors	r3, r2
    4802:	b2db      	uxtb	r3, r3
    4804:	2b00      	cmp	r3, #0
    4806:	d006      	beq.n	4816 <registerM2MEvent+0x2a>
	{
		setM2MEventState(eventNo,ME_CLEARED);
    4808:	1dfb      	adds	r3, r7, #7
    480a:	781b      	ldrb	r3, [r3, #0]
    480c:	2100      	movs	r1, #0
    480e:	0018      	movs	r0, r3
    4810:	4b1b      	ldr	r3, [pc, #108]	; (4880 <registerM2MEvent+0x94>)
    4812:	4798      	blx	r3
		return;
    4814:	e02e      	b.n	4874 <registerM2MEvent+0x88>
	}

	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    4816:	4b1b      	ldr	r3, [pc, #108]	; (4884 <registerM2MEvent+0x98>)
    4818:	781b      	ldrb	r3, [r3, #0]
    481a:	b2db      	uxtb	r3, r3
    481c:	2b4e      	cmp	r3, #78	; 0x4e
    481e:	d129      	bne.n	4874 <registerM2MEvent+0x88>
    4820:	4b19      	ldr	r3, [pc, #100]	; (4888 <registerM2MEvent+0x9c>)
    4822:	781b      	ldrb	r3, [r3, #0]
    4824:	b2db      	uxtb	r3, r3
    4826:	2b4e      	cmp	r3, #78	; 0x4e
    4828:	d124      	bne.n	4874 <registerM2MEvent+0x88>
    482a:	4b18      	ldr	r3, [pc, #96]	; (488c <registerM2MEvent+0xa0>)
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	2b00      	cmp	r3, #0
    4830:	d020      	beq.n	4874 <registerM2MEvent+0x88>
    4832:	4b17      	ldr	r3, [pc, #92]	; (4890 <registerM2MEvent+0xa4>)
    4834:	781b      	ldrb	r3, [r3, #0]
    4836:	2201      	movs	r2, #1
    4838:	4053      	eors	r3, r2
    483a:	b2db      	uxtb	r3, r3
    483c:	2b00      	cmp	r3, #0
    483e:	d019      	beq.n	4874 <registerM2MEvent+0x88>
    4840:	4b14      	ldr	r3, [pc, #80]	; (4894 <registerM2MEvent+0xa8>)
    4842:	781b      	ldrb	r3, [r3, #0]
    4844:	2201      	movs	r2, #1
    4846:	4053      	eors	r3, r2
    4848:	b2db      	uxtb	r3, r3
    484a:	2b00      	cmp	r3, #0
    484c:	d012      	beq.n	4874 <registerM2MEvent+0x88>
	{
		setM2MEventState(eventNo,ME_SERVICING);
    484e:	1dfb      	adds	r3, r7, #7
    4850:	781b      	ldrb	r3, [r3, #0]
    4852:	2102      	movs	r1, #2
    4854:	0018      	movs	r0, r3
    4856:	4b0a      	ldr	r3, [pc, #40]	; (4880 <registerM2MEvent+0x94>)
    4858:	4798      	blx	r3
		m2mEvent=true;
    485a:	4b0f      	ldr	r3, [pc, #60]	; (4898 <registerM2MEvent+0xac>)
    485c:	2201      	movs	r2, #1
    485e:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
    4860:	4b0e      	ldr	r3, [pc, #56]	; (489c <registerM2MEvent+0xb0>)
    4862:	1dfa      	adds	r2, r7, #7
    4864:	7812      	ldrb	r2, [r2, #0]
    4866:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=0;
    4868:	4b0d      	ldr	r3, [pc, #52]	; (48a0 <registerM2MEvent+0xb4>)
    486a:	2200      	movs	r2, #0
    486c:	701a      	strb	r2, [r3, #0]
		makeResponseAction();
    486e:	4b0d      	ldr	r3, [pc, #52]	; (48a4 <registerM2MEvent+0xb8>)
    4870:	4798      	blx	r3
		return;
    4872:	46c0      	nop			; (mov r8, r8)
	}
}
    4874:	46bd      	mov	sp, r7
    4876:	b002      	add	sp, #8
    4878:	bd80      	pop	{r7, pc}
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	20000775 	.word	0x20000775
    4880:	0000ad8d 	.word	0x0000ad8d
    4884:	200007a8 	.word	0x200007a8
    4888:	20000767 	.word	0x20000767
    488c:	2000074a 	.word	0x2000074a
    4890:	2000079a 	.word	0x2000079a
    4894:	20000766 	.word	0x20000766
    4898:	2000071b 	.word	0x2000071b
    489c:	20000715 	.word	0x20000715
    48a0:	2000079b 	.word	0x2000079b
    48a4:	00004095 	.word	0x00004095

000048a8 <setMotorMGRResponse>:

void setMotorMGRResponse(char response)
{
    48a8:	b580      	push	{r7, lr}
    48aa:	b082      	sub	sp, #8
    48ac:	af00      	add	r7, sp, #0
    48ae:	0002      	movs	r2, r0
    48b0:	1dfb      	adds	r3, r7, #7
    48b2:	701a      	strb	r2, [r3, #0]
	if(currentStatus!='I')    // not in Call than return.
    48b4:	4b07      	ldr	r3, [pc, #28]	; (48d4 <setMotorMGRResponse+0x2c>)
    48b6:	781b      	ldrb	r3, [r3, #0]
    48b8:	b2db      	uxtb	r3, r3
    48ba:	2b49      	cmp	r3, #73	; 0x49
    48bc:	d106      	bne.n	48cc <setMotorMGRResponse+0x24>
	{
		return;
	}
	playSound(response,true);
    48be:	1dfb      	adds	r3, r7, #7
    48c0:	781b      	ldrb	r3, [r3, #0]
    48c2:	2101      	movs	r1, #1
    48c4:	0018      	movs	r0, r3
    48c6:	4b04      	ldr	r3, [pc, #16]	; (48d8 <setMotorMGRResponse+0x30>)
    48c8:	4798      	blx	r3
    48ca:	e000      	b.n	48ce <setMotorMGRResponse+0x26>
		return;
    48cc:	46c0      	nop			; (mov r8, r8)
}
    48ce:	46bd      	mov	sp, r7
    48d0:	b002      	add	sp, #8
    48d2:	bd80      	pop	{r7, pc}
    48d4:	200007a8 	.word	0x200007a8
    48d8:	00004409 	.word	0x00004409

000048dc <checkRespSMS>:

void checkRespSMS(char t1)
{
    48dc:	b580      	push	{r7, lr}
    48de:	b082      	sub	sp, #8
    48e0:	af00      	add	r7, sp, #0
    48e2:	0002      	movs	r2, r0
    48e4:	1dfb      	adds	r3, r7, #7
    48e6:	701a      	strb	r2, [r3, #0]
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
    48e8:	4b0c      	ldr	r3, [pc, #48]	; (491c <checkRespSMS+0x40>)
    48ea:	781b      	ldrb	r3, [r3, #0]
    48ec:	2201      	movs	r2, #1
    48ee:	4053      	eors	r3, r2
    48f0:	b2db      	uxtb	r3, r3
    48f2:	2b00      	cmp	r3, #0
    48f4:	d00d      	beq.n	4912 <checkRespSMS+0x36>
    48f6:	4b0a      	ldr	r3, [pc, #40]	; (4920 <checkRespSMS+0x44>)
    48f8:	795b      	ldrb	r3, [r3, #5]
    48fa:	2b41      	cmp	r3, #65	; 0x41
    48fc:	d109      	bne.n	4912 <checkRespSMS+0x36>
	{
		actionType = t1;
    48fe:	4b09      	ldr	r3, [pc, #36]	; (4924 <checkRespSMS+0x48>)
    4900:	1dfa      	adds	r2, r7, #7
    4902:	7812      	ldrb	r2, [r2, #0]
    4904:	701a      	strb	r2, [r3, #0]
		sendSMS("",false,false);
    4906:	4b08      	ldr	r3, [pc, #32]	; (4928 <checkRespSMS+0x4c>)
    4908:	2200      	movs	r2, #0
    490a:	2100      	movs	r1, #0
    490c:	0018      	movs	r0, r3
    490e:	4b07      	ldr	r3, [pc, #28]	; (492c <checkRespSMS+0x50>)
    4910:	4798      	blx	r3
	}
}
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	46bd      	mov	sp, r7
    4916:	b002      	add	sp, #8
    4918:	bd80      	pop	{r7, pc}
    491a:	46c0      	nop			; (mov r8, r8)
    491c:	20000776 	.word	0x20000776
    4920:	2000065c 	.word	0x2000065c
    4924:	2000073b 	.word	0x2000073b
    4928:	00018f0c 	.word	0x00018f0c
    492c:	00006c45 	.word	0x00006c45

00004930 <subDTMF>:

void subDTMF(void)
{
    4930:	b580      	push	{r7, lr}
    4932:	af00      	add	r7, sp, #0
	gsm_stop_play_record_file();
    4934:	4b04      	ldr	r3, [pc, #16]	; (4948 <subDTMF+0x18>)
    4936:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
    4938:	4b04      	ldr	r3, [pc, #16]	; (494c <subDTMF+0x1c>)
    493a:	4798      	blx	r3
    493c:	0002      	movs	r2, r0
    493e:	4b04      	ldr	r3, [pc, #16]	; (4950 <subDTMF+0x20>)
    4940:	601a      	str	r2, [r3, #0]
}
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	46bd      	mov	sp, r7
    4946:	bd80      	pop	{r7, pc}
    4948:	00002e7d 	.word	0x00002e7d
    494c:	0000f37d 	.word	0x0000f37d
    4950:	200007d0 	.word	0x200007d0

00004954 <processOnDTMF>:

void processOnDTMF(char *dtmf_cmd)
{
    4954:	b580      	push	{r7, lr}
    4956:	b084      	sub	sp, #16
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
	char dtmf = dtmf_cmd[0];
    495c:	230f      	movs	r3, #15
    495e:	18fb      	adds	r3, r7, r3
    4960:	687a      	ldr	r2, [r7, #4]
    4962:	7812      	ldrb	r2, [r2, #0]
    4964:	701a      	strb	r2, [r3, #0]
	
	//LCD_clear();
	//lcd_printf("%c",dtmf);
	if (factory_settings_parameter_struct.ENABLE_M2M)
    4966:	4b6a      	ldr	r3, [pc, #424]	; (4b10 <processOnDTMF+0x1bc>)
    4968:	78db      	ldrb	r3, [r3, #3]
    496a:	2b00      	cmp	r3, #0
    496c:	d010      	beq.n	4990 <processOnDTMF+0x3c>
	{
		if (m2mEvent)
    496e:	4b69      	ldr	r3, [pc, #420]	; (4b14 <processOnDTMF+0x1c0>)
    4970:	781b      	ldrb	r3, [r3, #0]
    4972:	2b00      	cmp	r3, #0
    4974:	d100      	bne.n	4978 <processOnDTMF+0x24>
    4976:	e0c7      	b.n	4b08 <processOnDTMF+0x1b4>
		{
			if(dtmf == 'A')
    4978:	230f      	movs	r3, #15
    497a:	18fb      	adds	r3, r7, r3
    497c:	781b      	ldrb	r3, [r3, #0]
    497e:	2b41      	cmp	r3, #65	; 0x41
    4980:	d000      	beq.n	4984 <processOnDTMF+0x30>
    4982:	e0c1      	b.n	4b08 <processOnDTMF+0x1b4>
			{
				m2mAck=true;
    4984:	4b64      	ldr	r3, [pc, #400]	; (4b18 <processOnDTMF+0x1c4>)
    4986:	2201      	movs	r2, #1
    4988:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
    498a:	4b64      	ldr	r3, [pc, #400]	; (4b1c <processOnDTMF+0x1c8>)
    498c:	4798      	blx	r3
		{
			subDTMF();
			voltageOnCall();
		}
	}
}
    498e:	e0bb      	b.n	4b08 <processOnDTMF+0x1b4>
		if (dtmf == '1') //Motor On
    4990:	230f      	movs	r3, #15
    4992:	18fb      	adds	r3, r7, r3
    4994:	781b      	ldrb	r3, [r3, #0]
    4996:	2b31      	cmp	r3, #49	; 0x31
    4998:	d106      	bne.n	49a8 <processOnDTMF+0x54>
			subDTMF();
    499a:	4b61      	ldr	r3, [pc, #388]	; (4b20 <processOnDTMF+0x1cc>)
    499c:	4798      	blx	r3
			startMotor(true,false);
    499e:	2100      	movs	r1, #0
    49a0:	2001      	movs	r0, #1
    49a2:	4b60      	ldr	r3, [pc, #384]	; (4b24 <processOnDTMF+0x1d0>)
    49a4:	4798      	blx	r3
}
    49a6:	e0af      	b.n	4b08 <processOnDTMF+0x1b4>
		else if (dtmf == '2') //Motor Off
    49a8:	230f      	movs	r3, #15
    49aa:	18fb      	adds	r3, r7, r3
    49ac:	781b      	ldrb	r3, [r3, #0]
    49ae:	2b32      	cmp	r3, #50	; 0x32
    49b0:	d107      	bne.n	49c2 <processOnDTMF+0x6e>
			subDTMF();
    49b2:	4b5b      	ldr	r3, [pc, #364]	; (4b20 <processOnDTMF+0x1cc>)
    49b4:	4798      	blx	r3
			stopMotor(true,false,false);
    49b6:	2200      	movs	r2, #0
    49b8:	2100      	movs	r1, #0
    49ba:	2001      	movs	r0, #1
    49bc:	4b5a      	ldr	r3, [pc, #360]	; (4b28 <processOnDTMF+0x1d4>)
    49be:	4798      	blx	r3
}
    49c0:	e0a2      	b.n	4b08 <processOnDTMF+0x1b4>
		else if (dtmf == '3') //Status
    49c2:	230f      	movs	r3, #15
    49c4:	18fb      	adds	r3, r7, r3
    49c6:	781b      	ldrb	r3, [r3, #0]
    49c8:	2b33      	cmp	r3, #51	; 0x33
    49ca:	d104      	bne.n	49d6 <processOnDTMF+0x82>
			subDTMF();
    49cc:	4b54      	ldr	r3, [pc, #336]	; (4b20 <processOnDTMF+0x1cc>)
    49ce:	4798      	blx	r3
			statusOnCall();
    49d0:	4b56      	ldr	r3, [pc, #344]	; (4b2c <processOnDTMF+0x1d8>)
    49d2:	4798      	blx	r3
}
    49d4:	e098      	b.n	4b08 <processOnDTMF+0x1b4>
		else if (dtmf == '4') //underground status
    49d6:	230f      	movs	r3, #15
    49d8:	18fb      	adds	r3, r7, r3
    49da:	781b      	ldrb	r3, [r3, #0]
    49dc:	2b34      	cmp	r3, #52	; 0x34
    49de:	d10a      	bne.n	49f6 <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_WATER)
    49e0:	4b4b      	ldr	r3, [pc, #300]	; (4b10 <processOnDTMF+0x1bc>)
    49e2:	795b      	ldrb	r3, [r3, #5]
    49e4:	2b00      	cmp	r3, #0
    49e6:	d100      	bne.n	49ea <processOnDTMF+0x96>
    49e8:	e08e      	b.n	4b08 <processOnDTMF+0x1b4>
				subDTMF();
    49ea:	4b4d      	ldr	r3, [pc, #308]	; (4b20 <processOnDTMF+0x1cc>)
    49ec:	4798      	blx	r3
				waterStatusOnCall(false);
    49ee:	2000      	movs	r0, #0
    49f0:	4b4f      	ldr	r3, [pc, #316]	; (4b30 <processOnDTMF+0x1dc>)
    49f2:	4798      	blx	r3
}
    49f4:	e088      	b.n	4b08 <processOnDTMF+0x1b4>
		else if (dtmf == '5') //overHead Status
    49f6:	230f      	movs	r3, #15
    49f8:	18fb      	adds	r3, r7, r3
    49fa:	781b      	ldrb	r3, [r3, #0]
    49fc:	2b35      	cmp	r3, #53	; 0x35
    49fe:	d10a      	bne.n	4a16 <processOnDTMF+0xc2>
			if (factory_settings_parameter_struct.ENABLE_GP)
    4a00:	4b43      	ldr	r3, [pc, #268]	; (4b10 <processOnDTMF+0x1bc>)
    4a02:	791b      	ldrb	r3, [r3, #4]
    4a04:	2b00      	cmp	r3, #0
    4a06:	d100      	bne.n	4a0a <processOnDTMF+0xb6>
    4a08:	e07e      	b.n	4b08 <processOnDTMF+0x1b4>
				subDTMF();
    4a0a:	4b45      	ldr	r3, [pc, #276]	; (4b20 <processOnDTMF+0x1cc>)
    4a0c:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
    4a0e:	2000      	movs	r0, #0
    4a10:	4b48      	ldr	r3, [pc, #288]	; (4b34 <processOnDTMF+0x1e0>)
    4a12:	4798      	blx	r3
}
    4a14:	e078      	b.n	4b08 <processOnDTMF+0x1b4>
		else if(dtmf == '0')
    4a16:	230f      	movs	r3, #15
    4a18:	18fb      	adds	r3, r7, r3
    4a1a:	781b      	ldrb	r3, [r3, #0]
    4a1c:	2b30      	cmp	r3, #48	; 0x30
    4a1e:	d114      	bne.n	4a4a <processOnDTMF+0xf6>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    4a20:	4b3b      	ldr	r3, [pc, #236]	; (4b10 <processOnDTMF+0x1bc>)
    4a22:	785b      	ldrb	r3, [r3, #1]
    4a24:	2b00      	cmp	r3, #0
    4a26:	d100      	bne.n	4a2a <processOnDTMF+0xd6>
    4a28:	e06e      	b.n	4b08 <processOnDTMF+0x1b4>
				if(zeroPressed)
    4a2a:	4b43      	ldr	r3, [pc, #268]	; (4b38 <processOnDTMF+0x1e4>)
    4a2c:	781b      	ldrb	r3, [r3, #0]
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d007      	beq.n	4a42 <processOnDTMF+0xee>
					autoSetCurrent();   //to enable or disable current detection
    4a32:	4b42      	ldr	r3, [pc, #264]	; (4b3c <processOnDTMF+0x1e8>)
    4a34:	4798      	blx	r3
					subDTMF();
    4a36:	4b3a      	ldr	r3, [pc, #232]	; (4b20 <processOnDTMF+0x1cc>)
    4a38:	4798      	blx	r3
					zeroPressed=false;
    4a3a:	4b3f      	ldr	r3, [pc, #252]	; (4b38 <processOnDTMF+0x1e4>)
    4a3c:	2200      	movs	r2, #0
    4a3e:	701a      	strb	r2, [r3, #0]
}
    4a40:	e062      	b.n	4b08 <processOnDTMF+0x1b4>
					zeroPressed=true;
    4a42:	4b3d      	ldr	r3, [pc, #244]	; (4b38 <processOnDTMF+0x1e4>)
    4a44:	2201      	movs	r2, #1
    4a46:	701a      	strb	r2, [r3, #0]
}
    4a48:	e05e      	b.n	4b08 <processOnDTMF+0x1b4>
		else if (dtmf == '7') //Speak Current Ampere On Call
    4a4a:	230f      	movs	r3, #15
    4a4c:	18fb      	adds	r3, r7, r3
    4a4e:	781b      	ldrb	r3, [r3, #0]
    4a50:	2b37      	cmp	r3, #55	; 0x37
    4a52:	d108      	bne.n	4a66 <processOnDTMF+0x112>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
    4a54:	4b2e      	ldr	r3, [pc, #184]	; (4b10 <processOnDTMF+0x1bc>)
    4a56:	789b      	ldrb	r3, [r3, #2]
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d055      	beq.n	4b08 <processOnDTMF+0x1b4>
				subDTMF();
    4a5c:	4b30      	ldr	r3, [pc, #192]	; (4b20 <processOnDTMF+0x1cc>)
    4a5e:	4798      	blx	r3
				speakAmpere();
    4a60:	4b37      	ldr	r3, [pc, #220]	; (4b40 <processOnDTMF+0x1ec>)
    4a62:	4798      	blx	r3
}
    4a64:	e050      	b.n	4b08 <processOnDTMF+0x1b4>
		else if(dtmf=='D')
    4a66:	230f      	movs	r3, #15
    4a68:	18fb      	adds	r3, r7, r3
    4a6a:	781b      	ldrb	r3, [r3, #0]
    4a6c:	2b44      	cmp	r3, #68	; 0x44
    4a6e:	d10d      	bne.n	4a8c <processOnDTMF+0x138>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
    4a70:	2001      	movs	r0, #1
    4a72:	4b34      	ldr	r3, [pc, #208]	; (4b44 <processOnDTMF+0x1f0>)
    4a74:	4798      	blx	r3
			resetAutoStart(true);
    4a76:	2001      	movs	r0, #1
    4a78:	4b33      	ldr	r3, [pc, #204]	; (4b48 <processOnDTMF+0x1f4>)
    4a7a:	4798      	blx	r3
			startMotor(false,false);
    4a7c:	2100      	movs	r1, #0
    4a7e:	2000      	movs	r0, #0
    4a80:	4b28      	ldr	r3, [pc, #160]	; (4b24 <processOnDTMF+0x1d0>)
    4a82:	4798      	blx	r3
			sendDTMFTone(0xFF);
    4a84:	20ff      	movs	r0, #255	; 0xff
    4a86:	4b31      	ldr	r3, [pc, #196]	; (4b4c <processOnDTMF+0x1f8>)
    4a88:	4798      	blx	r3
}
    4a8a:	e03d      	b.n	4b08 <processOnDTMF+0x1b4>
		else if(dtmf=='C')
    4a8c:	230f      	movs	r3, #15
    4a8e:	18fb      	adds	r3, r7, r3
    4a90:	781b      	ldrb	r3, [r3, #0]
    4a92:	2b43      	cmp	r3, #67	; 0x43
    4a94:	d10b      	bne.n	4aae <processOnDTMF+0x15a>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
    4a96:	2000      	movs	r0, #0
    4a98:	4b2a      	ldr	r3, [pc, #168]	; (4b44 <processOnDTMF+0x1f0>)
    4a9a:	4798      	blx	r3
			stopMotor(false,false,true);
    4a9c:	2201      	movs	r2, #1
    4a9e:	2100      	movs	r1, #0
    4aa0:	2000      	movs	r0, #0
    4aa2:	4b21      	ldr	r3, [pc, #132]	; (4b28 <processOnDTMF+0x1d4>)
    4aa4:	4798      	blx	r3
			sendDTMFTone(0xFF);
    4aa6:	20ff      	movs	r0, #255	; 0xff
    4aa8:	4b28      	ldr	r3, [pc, #160]	; (4b4c <processOnDTMF+0x1f8>)
    4aaa:	4798      	blx	r3
}
    4aac:	e02c      	b.n	4b08 <processOnDTMF+0x1b4>
		else if (dtmf == '8') //Set AUTOTIMER ON
    4aae:	230f      	movs	r3, #15
    4ab0:	18fb      	adds	r3, r7, r3
    4ab2:	781b      	ldrb	r3, [r3, #0]
    4ab4:	2b38      	cmp	r3, #56	; 0x38
    4ab6:	d10c      	bne.n	4ad2 <processOnDTMF+0x17e>
			subDTMF();
    4ab8:	4b19      	ldr	r3, [pc, #100]	; (4b20 <processOnDTMF+0x1cc>)
    4aba:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
    4abc:	2001      	movs	r0, #1
    4abe:	4b21      	ldr	r3, [pc, #132]	; (4b44 <processOnDTMF+0x1f0>)
    4ac0:	4798      	blx	r3
			resetAutoStart(true);
    4ac2:	2001      	movs	r0, #1
    4ac4:	4b20      	ldr	r3, [pc, #128]	; (4b48 <processOnDTMF+0x1f4>)
    4ac6:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
    4ac8:	2101      	movs	r1, #1
    4aca:	2029      	movs	r0, #41	; 0x29
    4acc:	4b20      	ldr	r3, [pc, #128]	; (4b50 <processOnDTMF+0x1fc>)
    4ace:	4798      	blx	r3
}
    4ad0:	e01a      	b.n	4b08 <processOnDTMF+0x1b4>
		else if (dtmf == '9') //Set AUTOTIMER OFF
    4ad2:	230f      	movs	r3, #15
    4ad4:	18fb      	adds	r3, r7, r3
    4ad6:	781b      	ldrb	r3, [r3, #0]
    4ad8:	2b39      	cmp	r3, #57	; 0x39
    4ada:	d10c      	bne.n	4af6 <processOnDTMF+0x1a2>
			subDTMF();
    4adc:	4b10      	ldr	r3, [pc, #64]	; (4b20 <processOnDTMF+0x1cc>)
    4ade:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
    4ae0:	2000      	movs	r0, #0
    4ae2:	4b18      	ldr	r3, [pc, #96]	; (4b44 <processOnDTMF+0x1f0>)
    4ae4:	4798      	blx	r3
			resetAutoStart(true);
    4ae6:	2001      	movs	r0, #1
    4ae8:	4b17      	ldr	r3, [pc, #92]	; (4b48 <processOnDTMF+0x1f4>)
    4aea:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
    4aec:	2101      	movs	r1, #1
    4aee:	205b      	movs	r0, #91	; 0x5b
    4af0:	4b17      	ldr	r3, [pc, #92]	; (4b50 <processOnDTMF+0x1fc>)
    4af2:	4798      	blx	r3
}
    4af4:	e008      	b.n	4b08 <processOnDTMF+0x1b4>
		else if(dtmf == '*')
    4af6:	230f      	movs	r3, #15
    4af8:	18fb      	adds	r3, r7, r3
    4afa:	781b      	ldrb	r3, [r3, #0]
    4afc:	2b2a      	cmp	r3, #42	; 0x2a
    4afe:	d103      	bne.n	4b08 <processOnDTMF+0x1b4>
			subDTMF();
    4b00:	4b07      	ldr	r3, [pc, #28]	; (4b20 <processOnDTMF+0x1cc>)
    4b02:	4798      	blx	r3
			voltageOnCall();
    4b04:	4b13      	ldr	r3, [pc, #76]	; (4b54 <processOnDTMF+0x200>)
    4b06:	4798      	blx	r3
}
    4b08:	46c0      	nop			; (mov r8, r8)
    4b0a:	46bd      	mov	sp, r7
    4b0c:	b004      	add	sp, #16
    4b0e:	bd80      	pop	{r7, pc}
    4b10:	20000628 	.word	0x20000628
    4b14:	2000071b 	.word	0x2000071b
    4b18:	20000714 	.word	0x20000714
    4b1c:	00002e1d 	.word	0x00002e1d
    4b20:	00004931 	.word	0x00004931
    4b24:	0000a5c9 	.word	0x0000a5c9
    4b28:	0000a78d 	.word	0x0000a78d
    4b2c:	0000ac3d 	.word	0x0000ac3d
    4b30:	00008c21 	.word	0x00008c21
    4b34:	00008ad9 	.word	0x00008ad9
    4b38:	200007c7 	.word	0x200007c7
    4b3c:	000095bd 	.word	0x000095bd
    4b40:	000096b1 	.word	0x000096b1
    4b44:	000012a9 	.word	0x000012a9
    4b48:	0000a195 	.word	0x0000a195
    4b4c:	00006e01 	.word	0x00006e01
    4b50:	00004409 	.word	0x00004409
    4b54:	0000ad4d 	.word	0x0000ad4d

00004b58 <processOnSMS>:

void processOnSMS(char *received_command, bool admin,bool response_sms_processed_cmd,bool alterNumber, char *phone_number)
{
    4b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b5a:	46c6      	mov	lr, r8
    4b5c:	b500      	push	{lr}
    4b5e:	b0d2      	sub	sp, #328	; 0x148
    4b60:	af06      	add	r7, sp, #24
    4b62:	60f8      	str	r0, [r7, #12]
    4b64:	000c      	movs	r4, r1
    4b66:	0010      	movs	r0, r2
    4b68:	0019      	movs	r1, r3
    4b6a:	4bea      	ldr	r3, [pc, #936]	; (4f14 <processOnSMS+0x3bc>)
    4b6c:	2294      	movs	r2, #148	; 0x94
    4b6e:	0052      	lsls	r2, r2, #1
    4b70:	4694      	mov	ip, r2
    4b72:	2208      	movs	r2, #8
    4b74:	4690      	mov	r8, r2
    4b76:	44b8      	add	r8, r7
    4b78:	44c4      	add	ip, r8
    4b7a:	4463      	add	r3, ip
    4b7c:	1c22      	adds	r2, r4, #0
    4b7e:	701a      	strb	r2, [r3, #0]
    4b80:	4be5      	ldr	r3, [pc, #916]	; (4f18 <processOnSMS+0x3c0>)
    4b82:	2294      	movs	r2, #148	; 0x94
    4b84:	0052      	lsls	r2, r2, #1
    4b86:	4694      	mov	ip, r2
    4b88:	2208      	movs	r2, #8
    4b8a:	4690      	mov	r8, r2
    4b8c:	44b8      	add	r8, r7
    4b8e:	44c4      	add	ip, r8
    4b90:	4463      	add	r3, ip
    4b92:	1c02      	adds	r2, r0, #0
    4b94:	701a      	strb	r2, [r3, #0]
    4b96:	4be1      	ldr	r3, [pc, #900]	; (4f1c <processOnSMS+0x3c4>)
    4b98:	2294      	movs	r2, #148	; 0x94
    4b9a:	0052      	lsls	r2, r2, #1
    4b9c:	4694      	mov	ip, r2
    4b9e:	2208      	movs	r2, #8
    4ba0:	4690      	mov	r8, r2
    4ba2:	44b8      	add	r8, r7
    4ba4:	44c4      	add	ip, r8
    4ba6:	4463      	add	r3, ip
    4ba8:	1c0a      	adds	r2, r1, #0
    4baa:	701a      	strb	r2, [r3, #0]
	char *copy_received_command;
	char resep_msg[250];
	bool incomingSMSProcessed=false;
    4bac:	2328      	movs	r3, #40	; 0x28
    4bae:	33ff      	adds	r3, #255	; 0xff
    4bb0:	2208      	movs	r2, #8
    4bb2:	4694      	mov	ip, r2
    4bb4:	44bc      	add	ip, r7
    4bb6:	4463      	add	r3, ip
    4bb8:	2200      	movs	r2, #0
    4bba:	701a      	strb	r2, [r3, #0]

	copy_received_command = received_command;
    4bbc:	68fb      	ldr	r3, [r7, #12]
    4bbe:	228c      	movs	r2, #140	; 0x8c
    4bc0:	0052      	lsls	r2, r2, #1
    4bc2:	2108      	movs	r1, #8
    4bc4:	468c      	mov	ip, r1
    4bc6:	44bc      	add	ip, r7
    4bc8:	4462      	add	r2, ip
    4bca:	6013      	str	r3, [r2, #0]
	
	if(alterNumber)
    4bcc:	4bd3      	ldr	r3, [pc, #844]	; (4f1c <processOnSMS+0x3c4>)
    4bce:	2294      	movs	r2, #148	; 0x94
    4bd0:	0052      	lsls	r2, r2, #1
    4bd2:	4694      	mov	ip, r2
    4bd4:	2208      	movs	r2, #8
    4bd6:	4690      	mov	r8, r2
    4bd8:	44b8      	add	r8, r7
    4bda:	44c4      	add	ip, r8
    4bdc:	4463      	add	r3, ip
    4bde:	781b      	ldrb	r3, [r3, #0]
    4be0:	2b00      	cmp	r3, #0
    4be2:	d00e      	beq.n	4c02 <processOnSMS+0xaa>
	{
		if(!StringstartsWith(received_command,"AMON"))
    4be4:	4ace      	ldr	r2, [pc, #824]	; (4f20 <processOnSMS+0x3c8>)
    4be6:	68fb      	ldr	r3, [r7, #12]
    4be8:	0011      	movs	r1, r2
    4bea:	0018      	movs	r0, r3
    4bec:	4bcd      	ldr	r3, [pc, #820]	; (4f24 <processOnSMS+0x3cc>)
    4bee:	4798      	blx	r3
    4bf0:	0003      	movs	r3, r0
    4bf2:	001a      	movs	r2, r3
    4bf4:	2301      	movs	r3, #1
    4bf6:	4053      	eors	r3, r2
    4bf8:	b2db      	uxtb	r3, r3
    4bfa:	2b00      	cmp	r3, #0
    4bfc:	d001      	beq.n	4c02 <processOnSMS+0xaa>
    4bfe:	f001 feed 	bl	69dc <processOnSMS+0x1e84>
		return;
	}
	
	if (StringstartsWith(received_command,"PRGUPD"))
    4c02:	4ac9      	ldr	r2, [pc, #804]	; (4f28 <processOnSMS+0x3d0>)
    4c04:	68fb      	ldr	r3, [r7, #12]
    4c06:	0011      	movs	r1, r2
    4c08:	0018      	movs	r0, r3
    4c0a:	4bc6      	ldr	r3, [pc, #792]	; (4f24 <processOnSMS+0x3cc>)
    4c0c:	4798      	blx	r3
    4c0e:	1e03      	subs	r3, r0, #0
    4c10:	d014      	beq.n	4c3c <processOnSMS+0xe4>
	{
		//if (admin)
		{
			bootloader_parameter.firmware_download_pending = true;
    4c12:	4bc6      	ldr	r3, [pc, #792]	; (4f2c <processOnSMS+0x3d4>)
    4c14:	2201      	movs	r2, #1
    4c16:	715a      	strb	r2, [r3, #5]
			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    4c18:	49c4      	ldr	r1, [pc, #784]	; (4f2c <processOnSMS+0x3d4>)
    4c1a:	4bc5      	ldr	r3, [pc, #788]	; (4f30 <processOnSMS+0x3d8>)
    4c1c:	2218      	movs	r2, #24
    4c1e:	0018      	movs	r0, r3
    4c20:	4bc4      	ldr	r3, [pc, #784]	; (4f34 <processOnSMS+0x3dc>)
    4c22:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    4c24:	4bc2      	ldr	r3, [pc, #776]	; (4f30 <processOnSMS+0x3d8>)
    4c26:	0019      	movs	r1, r3
    4c28:	2000      	movs	r0, #0
    4c2a:	4bc3      	ldr	r3, [pc, #780]	; (4f38 <processOnSMS+0x3e0>)
    4c2c:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    4c2e:	4bc3      	ldr	r3, [pc, #780]	; (4f3c <processOnSMS+0x3e4>)
    4c30:	4798      	blx	r3
			vTaskDelay(100);
    4c32:	2064      	movs	r0, #100	; 0x64
    4c34:	4bc2      	ldr	r3, [pc, #776]	; (4f40 <processOnSMS+0x3e8>)
    4c36:	4798      	blx	r3
			system_reset();
    4c38:	4bc2      	ldr	r3, [pc, #776]	; (4f44 <processOnSMS+0x3ec>)
    4c3a:	4798      	blx	r3
		}
	}
	
	if (StringstartsWith(received_command,"WAIT"))
    4c3c:	4ac2      	ldr	r2, [pc, #776]	; (4f48 <processOnSMS+0x3f0>)
    4c3e:	68fb      	ldr	r3, [r7, #12]
    4c40:	0011      	movs	r1, r2
    4c42:	0018      	movs	r0, r3
    4c44:	4bb7      	ldr	r3, [pc, #732]	; (4f24 <processOnSMS+0x3cc>)
    4c46:	4798      	blx	r3
    4c48:	1e03      	subs	r3, r0, #0
    4c4a:	d047      	beq.n	4cdc <processOnSMS+0x184>
	{
		enum gsm_error err = gsm_disable_call_waiting();
    4c4c:	2318      	movs	r3, #24
    4c4e:	33ff      	adds	r3, #255	; 0xff
    4c50:	2208      	movs	r2, #8
    4c52:	18ba      	adds	r2, r7, r2
    4c54:	18d4      	adds	r4, r2, r3
    4c56:	4bbd      	ldr	r3, [pc, #756]	; (4f4c <processOnSMS+0x3f4>)
    4c58:	4798      	blx	r3
    4c5a:	0003      	movs	r3, r0
    4c5c:	7023      	strb	r3, [r4, #0]
		incomingSMSProcessed=true;
    4c5e:	2328      	movs	r3, #40	; 0x28
    4c60:	33ff      	adds	r3, #255	; 0xff
    4c62:	2208      	movs	r2, #8
    4c64:	4694      	mov	ip, r2
    4c66:	44bc      	add	ip, r7
    4c68:	4463      	add	r3, ip
    4c6a:	2201      	movs	r2, #1
    4c6c:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
    4c6e:	4baa      	ldr	r3, [pc, #680]	; (4f18 <processOnSMS+0x3c0>)
    4c70:	2294      	movs	r2, #148	; 0x94
    4c72:	0052      	lsls	r2, r2, #1
    4c74:	4694      	mov	ip, r2
    4c76:	2208      	movs	r2, #8
    4c78:	4690      	mov	r8, r2
    4c7a:	44b8      	add	r8, r7
    4c7c:	44c4      	add	ip, r8
    4c7e:	4463      	add	r3, ip
    4c80:	781b      	ldrb	r3, [r3, #0]
    4c82:	2b00      	cmp	r3, #0
    4c84:	d101      	bne.n	4c8a <processOnSMS+0x132>
    4c86:	f001 fe63 	bl	6950 <processOnSMS+0x1df8>
		{
			if (err == GSM_ERROR_NONE)
    4c8a:	2318      	movs	r3, #24
    4c8c:	33ff      	adds	r3, #255	; 0xff
    4c8e:	2208      	movs	r2, #8
    4c90:	4694      	mov	ip, r2
    4c92:	44bc      	add	ip, r7
    4c94:	4463      	add	r3, ip
    4c96:	781b      	ldrb	r3, [r3, #0]
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d10d      	bne.n	4cb8 <processOnSMS+0x160>
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
    4c9c:	230c      	movs	r3, #12
    4c9e:	2208      	movs	r2, #8
    4ca0:	4694      	mov	ip, r2
    4ca2:	44bc      	add	ip, r7
    4ca4:	4463      	add	r3, ip
    4ca6:	4aaa      	ldr	r2, [pc, #680]	; (4f50 <processOnSMS+0x3f8>)
    4ca8:	ca13      	ldmia	r2!, {r0, r1, r4}
    4caa:	c313      	stmia	r3!, {r0, r1, r4}
    4cac:	ca13      	ldmia	r2!, {r0, r1, r4}
    4cae:	c313      	stmia	r3!, {r0, r1, r4}
    4cb0:	ca13      	ldmia	r2!, {r0, r1, r4}
    4cb2:	c313      	stmia	r3!, {r0, r1, r4}
    4cb4:	f001 fe4c 	bl	6950 <processOnSMS+0x1df8>
			}
			else
			{
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
    4cb8:	230c      	movs	r3, #12
    4cba:	2208      	movs	r2, #8
    4cbc:	4694      	mov	ip, r2
    4cbe:	44bc      	add	ip, r7
    4cc0:	4463      	add	r3, ip
    4cc2:	4aa4      	ldr	r2, [pc, #656]	; (4f54 <processOnSMS+0x3fc>)
    4cc4:	ca13      	ldmia	r2!, {r0, r1, r4}
    4cc6:	c313      	stmia	r3!, {r0, r1, r4}
    4cc8:	ca13      	ldmia	r2!, {r0, r1, r4}
    4cca:	c313      	stmia	r3!, {r0, r1, r4}
    4ccc:	ca03      	ldmia	r2!, {r0, r1}
    4cce:	c303      	stmia	r3!, {r0, r1}
    4cd0:	8811      	ldrh	r1, [r2, #0]
    4cd2:	8019      	strh	r1, [r3, #0]
    4cd4:	7892      	ldrb	r2, [r2, #2]
    4cd6:	709a      	strb	r2, [r3, #2]
    4cd8:	f001 fe3a 	bl	6950 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"CLEARALL"))
    4cdc:	4a9e      	ldr	r2, [pc, #632]	; (4f58 <processOnSMS+0x400>)
    4cde:	68fb      	ldr	r3, [r7, #12]
    4ce0:	0011      	movs	r1, r2
    4ce2:	0018      	movs	r0, r3
    4ce4:	4b8f      	ldr	r3, [pc, #572]	; (4f24 <processOnSMS+0x3cc>)
    4ce6:	4798      	blx	r3
    4ce8:	1e03      	subs	r3, r0, #0
    4cea:	d030      	beq.n	4d4e <processOnSMS+0x1f6>
	{
		clearNumbers(admin);
    4cec:	4b89      	ldr	r3, [pc, #548]	; (4f14 <processOnSMS+0x3bc>)
    4cee:	2294      	movs	r2, #148	; 0x94
    4cf0:	0052      	lsls	r2, r2, #1
    4cf2:	4694      	mov	ip, r2
    4cf4:	2208      	movs	r2, #8
    4cf6:	4690      	mov	r8, r2
    4cf8:	44b8      	add	r8, r7
    4cfa:	44c4      	add	ip, r8
    4cfc:	4463      	add	r3, ip
    4cfe:	781b      	ldrb	r3, [r3, #0]
    4d00:	0018      	movs	r0, r3
    4d02:	4b96      	ldr	r3, [pc, #600]	; (4f5c <processOnSMS+0x404>)
    4d04:	4798      	blx	r3
		incomingSMSProcessed=true;
    4d06:	2328      	movs	r3, #40	; 0x28
    4d08:	33ff      	adds	r3, #255	; 0xff
    4d0a:	2208      	movs	r2, #8
    4d0c:	4694      	mov	ip, r2
    4d0e:	44bc      	add	ip, r7
    4d10:	4463      	add	r3, ip
    4d12:	2201      	movs	r2, #1
    4d14:	701a      	strb	r2, [r3, #0]
		if (response_sms_processed_cmd == true)
    4d16:	4b80      	ldr	r3, [pc, #512]	; (4f18 <processOnSMS+0x3c0>)
    4d18:	2294      	movs	r2, #148	; 0x94
    4d1a:	0052      	lsls	r2, r2, #1
    4d1c:	4694      	mov	ip, r2
    4d1e:	2208      	movs	r2, #8
    4d20:	4690      	mov	r8, r2
    4d22:	44b8      	add	r8, r7
    4d24:	44c4      	add	ip, r8
    4d26:	4463      	add	r3, ip
    4d28:	781b      	ldrb	r3, [r3, #0]
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	d101      	bne.n	4d32 <processOnSMS+0x1da>
    4d2e:	f001 fe0f 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
    4d32:	230c      	movs	r3, #12
    4d34:	2208      	movs	r2, #8
    4d36:	4694      	mov	ip, r2
    4d38:	44bc      	add	ip, r7
    4d3a:	4463      	add	r3, ip
    4d3c:	4a88      	ldr	r2, [pc, #544]	; (4f60 <processOnSMS+0x408>)
    4d3e:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d40:	c313      	stmia	r3!, {r0, r1, r4}
    4d42:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d44:	c313      	stmia	r3!, {r0, r1, r4}
    4d46:	7812      	ldrb	r2, [r2, #0]
    4d48:	701a      	strb	r2, [r3, #0]
    4d4a:	f001 fe01 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"DEFAULT"))
    4d4e:	4a85      	ldr	r2, [pc, #532]	; (4f64 <processOnSMS+0x40c>)
    4d50:	68fb      	ldr	r3, [r7, #12]
    4d52:	0011      	movs	r1, r2
    4d54:	0018      	movs	r0, r3
    4d56:	4b73      	ldr	r3, [pc, #460]	; (4f24 <processOnSMS+0x3cc>)
    4d58:	4798      	blx	r3
    4d5a:	1e03      	subs	r3, r0, #0
    4d5c:	d065      	beq.n	4e2a <processOnSMS+0x2d2>
	{
		saveAutoStartSettings(false);
    4d5e:	2000      	movs	r0, #0
    4d60:	4b81      	ldr	r3, [pc, #516]	; (4f68 <processOnSMS+0x410>)
    4d62:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
    4d64:	4b81      	ldr	r3, [pc, #516]	; (4f6c <processOnSMS+0x414>)
    4d66:	795b      	ldrb	r3, [r3, #5]
    4d68:	2b00      	cmp	r3, #0
    4d6a:	d00d      	beq.n	4d88 <processOnSMS+0x230>
		{
			saveWaterBypassSettings(false);
    4d6c:	2000      	movs	r0, #0
    4d6e:	4b80      	ldr	r3, [pc, #512]	; (4f70 <processOnSMS+0x418>)
    4d70:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
    4d72:	4b7e      	ldr	r3, [pc, #504]	; (4f6c <processOnSMS+0x414>)
    4d74:	78db      	ldrb	r3, [r3, #3]
    4d76:	2b00      	cmp	r3, #0
    4d78:	d003      	beq.n	4d82 <processOnSMS+0x22a>
			{
				saveM2MSettings(false);
    4d7a:	2000      	movs	r0, #0
    4d7c:	4b7d      	ldr	r3, [pc, #500]	; (4f74 <processOnSMS+0x41c>)
    4d7e:	4798      	blx	r3
    4d80:	e002      	b.n	4d88 <processOnSMS+0x230>
			}
			else
			{
				savePreventOverFlowSettings(false);
    4d82:	2000      	movs	r0, #0
    4d84:	4b7c      	ldr	r3, [pc, #496]	; (4f78 <processOnSMS+0x420>)
    4d86:	4798      	blx	r3
			}
		}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    4d88:	4b78      	ldr	r3, [pc, #480]	; (4f6c <processOnSMS+0x414>)
    4d8a:	785b      	ldrb	r3, [r3, #1]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d008      	beq.n	4da2 <processOnSMS+0x24a>
		{
			setOverloadPer(120);
    4d90:	2078      	movs	r0, #120	; 0x78
    4d92:	4b7a      	ldr	r3, [pc, #488]	; (4f7c <processOnSMS+0x424>)
    4d94:	4798      	blx	r3
			setUnderloadPer(85);
    4d96:	2055      	movs	r0, #85	; 0x55
    4d98:	4b79      	ldr	r3, [pc, #484]	; (4f80 <processOnSMS+0x428>)
    4d9a:	4798      	blx	r3
			setCurrentDetection(false);
    4d9c:	2000      	movs	r0, #0
    4d9e:	4b79      	ldr	r3, [pc, #484]	; (4f84 <processOnSMS+0x42c>)
    4da0:	4798      	blx	r3
		}
		saveEventStageSettings(0);
    4da2:	2000      	movs	r0, #0
    4da4:	4b78      	ldr	r3, [pc, #480]	; (4f88 <processOnSMS+0x430>)
    4da6:	4798      	blx	r3
		//saveBypassSettings(false);
		saveDNDSettings(false);
    4da8:	2000      	movs	r0, #0
    4daa:	4b78      	ldr	r3, [pc, #480]	; (4f8c <processOnSMS+0x434>)
    4dac:	4798      	blx	r3
		saveResponseSettings('C');
    4dae:	2043      	movs	r0, #67	; 0x43
    4db0:	4b77      	ldr	r3, [pc, #476]	; (4f90 <processOnSMS+0x438>)
    4db2:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
    4db4:	2032      	movs	r0, #50	; 0x32
    4db6:	4b77      	ldr	r3, [pc, #476]	; (4f94 <processOnSMS+0x43c>)
    4db8:	4798      	blx	r3
		saveStarDeltaTimer(2);
    4dba:	2002      	movs	r0, #2
    4dbc:	4b76      	ldr	r3, [pc, #472]	; (4f98 <processOnSMS+0x440>)
    4dbe:	4798      	blx	r3
		
		saveSinglePhasingSettings(true);
    4dc0:	2001      	movs	r0, #1
    4dc2:	4b76      	ldr	r3, [pc, #472]	; (4f9c <processOnSMS+0x444>)
    4dc4:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
    4dc6:	2050      	movs	r0, #80	; 0x50
    4dc8:	4b75      	ldr	r3, [pc, #468]	; (4fa0 <processOnSMS+0x448>)
    4dca:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
    4dcc:	2001      	movs	r0, #1
    4dce:	4b75      	ldr	r3, [pc, #468]	; (4fa4 <processOnSMS+0x44c>)
    4dd0:	4798      	blx	r3
		setPrimaryNumberIndex(0);
    4dd2:	2000      	movs	r0, #0
    4dd4:	4b74      	ldr	r3, [pc, #464]	; (4fa8 <processOnSMS+0x450>)
    4dd6:	4798      	blx	r3
		setSecondaryNumberIndex(1);
    4dd8:	2001      	movs	r0, #1
    4dda:	4b74      	ldr	r3, [pc, #464]	; (4fac <processOnSMS+0x454>)
    4ddc:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    4dde:	2328      	movs	r3, #40	; 0x28
    4de0:	33ff      	adds	r3, #255	; 0xff
    4de2:	2208      	movs	r2, #8
    4de4:	4694      	mov	ip, r2
    4de6:	44bc      	add	ip, r7
    4de8:	4463      	add	r3, ip
    4dea:	2201      	movs	r2, #1
    4dec:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    4dee:	4b4a      	ldr	r3, [pc, #296]	; (4f18 <processOnSMS+0x3c0>)
    4df0:	2294      	movs	r2, #148	; 0x94
    4df2:	0052      	lsls	r2, r2, #1
    4df4:	4694      	mov	ip, r2
    4df6:	2208      	movs	r2, #8
    4df8:	4690      	mov	r8, r2
    4dfa:	44b8      	add	r8, r7
    4dfc:	44c4      	add	ip, r8
    4dfe:	4463      	add	r3, ip
    4e00:	781b      	ldrb	r3, [r3, #0]
    4e02:	2b00      	cmp	r3, #0
    4e04:	d101      	bne.n	4e0a <processOnSMS+0x2b2>
    4e06:	f001 fda3 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"ALL SETTINGS ARE NOW FACTORY DEFAULT");
    4e0a:	230c      	movs	r3, #12
    4e0c:	2208      	movs	r2, #8
    4e0e:	4694      	mov	ip, r2
    4e10:	44bc      	add	ip, r7
    4e12:	4463      	add	r3, ip
    4e14:	4a66      	ldr	r2, [pc, #408]	; (4fb0 <processOnSMS+0x458>)
    4e16:	ca13      	ldmia	r2!, {r0, r1, r4}
    4e18:	c313      	stmia	r3!, {r0, r1, r4}
    4e1a:	ca13      	ldmia	r2!, {r0, r1, r4}
    4e1c:	c313      	stmia	r3!, {r0, r1, r4}
    4e1e:	ca13      	ldmia	r2!, {r0, r1, r4}
    4e20:	c313      	stmia	r3!, {r0, r1, r4}
    4e22:	7812      	ldrb	r2, [r2, #0]
    4e24:	701a      	strb	r2, [r3, #0]
    4e26:	f001 fd93 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"NUM"))
    4e2a:	4a62      	ldr	r2, [pc, #392]	; (4fb4 <processOnSMS+0x45c>)
    4e2c:	68fb      	ldr	r3, [r7, #12]
    4e2e:	0011      	movs	r1, r2
    4e30:	0018      	movs	r0, r3
    4e32:	4b3c      	ldr	r3, [pc, #240]	; (4f24 <processOnSMS+0x3cc>)
    4e34:	4798      	blx	r3
    4e36:	1e03      	subs	r3, r0, #0
    4e38:	d038      	beq.n	4eac <processOnSMS+0x354>
	{
		response_sms_processed_cmd = true;
    4e3a:	4b37      	ldr	r3, [pc, #220]	; (4f18 <processOnSMS+0x3c0>)
    4e3c:	2294      	movs	r2, #148	; 0x94
    4e3e:	0052      	lsls	r2, r2, #1
    4e40:	4694      	mov	ip, r2
    4e42:	2208      	movs	r2, #8
    4e44:	4690      	mov	r8, r2
    4e46:	44b8      	add	r8, r7
    4e48:	44c4      	add	ip, r8
    4e4a:	4463      	add	r3, ip
    4e4c:	2201      	movs	r2, #1
    4e4e:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
    4e50:	2328      	movs	r3, #40	; 0x28
    4e52:	33ff      	adds	r3, #255	; 0xff
    4e54:	2208      	movs	r2, #8
    4e56:	4694      	mov	ip, r2
    4e58:	44bc      	add	ip, r7
    4e5a:	4463      	add	r3, ip
    4e5c:	2201      	movs	r2, #1
    4e5e:	701a      	strb	r2, [r3, #0]
		
		memset(resep_msg, '\0', sizeof(resep_msg));
    4e60:	230c      	movs	r3, #12
    4e62:	2208      	movs	r2, #8
    4e64:	4694      	mov	ip, r2
    4e66:	44bc      	add	ip, r7
    4e68:	4463      	add	r3, ip
    4e6a:	22fa      	movs	r2, #250	; 0xfa
    4e6c:	2100      	movs	r1, #0
    4e6e:	0018      	movs	r0, r3
    4e70:	4b51      	ldr	r3, [pc, #324]	; (4fb8 <processOnSMS+0x460>)
    4e72:	4798      	blx	r3
		if (user_count_struct.current_user_no_count==0)
    4e74:	4b51      	ldr	r3, [pc, #324]	; (4fbc <processOnSMS+0x464>)
    4e76:	789b      	ldrb	r3, [r3, #2]
    4e78:	2b00      	cmp	r3, #0
    4e7a:	d10d      	bne.n	4e98 <processOnSMS+0x340>
		{
			strcpy(resep_msg,"No Numbers Exists");
    4e7c:	230c      	movs	r3, #12
    4e7e:	2208      	movs	r2, #8
    4e80:	4694      	mov	ip, r2
    4e82:	44bc      	add	ip, r7
    4e84:	4463      	add	r3, ip
    4e86:	4a4e      	ldr	r2, [pc, #312]	; (4fc0 <processOnSMS+0x468>)
    4e88:	ca13      	ldmia	r2!, {r0, r1, r4}
    4e8a:	c313      	stmia	r3!, {r0, r1, r4}
    4e8c:	6811      	ldr	r1, [r2, #0]
    4e8e:	6019      	str	r1, [r3, #0]
    4e90:	8892      	ldrh	r2, [r2, #4]
    4e92:	809a      	strh	r2, [r3, #4]
    4e94:	f001 fd5c 	bl	6950 <processOnSMS+0x1df8>
		}
		else
		{
			getNumbers(resep_msg);
    4e98:	230c      	movs	r3, #12
    4e9a:	2208      	movs	r2, #8
    4e9c:	4694      	mov	ip, r2
    4e9e:	44bc      	add	ip, r7
    4ea0:	4463      	add	r3, ip
    4ea2:	0018      	movs	r0, r3
    4ea4:	4b47      	ldr	r3, [pc, #284]	; (4fc4 <processOnSMS+0x46c>)
    4ea6:	4798      	blx	r3
    4ea8:	f001 fd52 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"RESET"))
    4eac:	4a46      	ldr	r2, [pc, #280]	; (4fc8 <processOnSMS+0x470>)
    4eae:	68fb      	ldr	r3, [r7, #12]
    4eb0:	0011      	movs	r1, r2
    4eb2:	0018      	movs	r0, r3
    4eb4:	4b1b      	ldr	r3, [pc, #108]	; (4f24 <processOnSMS+0x3cc>)
    4eb6:	4798      	blx	r3
    4eb8:	1e03      	subs	r3, r0, #0
    4eba:	d003      	beq.n	4ec4 <processOnSMS+0x36c>
	{
		system_reset();
    4ebc:	4b21      	ldr	r3, [pc, #132]	; (4f44 <processOnSMS+0x3ec>)
    4ebe:	4798      	blx	r3
    4ec0:	f001 fd46 	bl	6950 <processOnSMS+0x1df8>
	}
	else if (StringstartsWith(received_command,"DID"))
    4ec4:	4a41      	ldr	r2, [pc, #260]	; (4fcc <processOnSMS+0x474>)
    4ec6:	68fb      	ldr	r3, [r7, #12]
    4ec8:	0011      	movs	r1, r2
    4eca:	0018      	movs	r0, r3
    4ecc:	4b15      	ldr	r3, [pc, #84]	; (4f24 <processOnSMS+0x3cc>)
    4ece:	4798      	blx	r3
    4ed0:	1e03      	subs	r3, r0, #0
    4ed2:	d100      	bne.n	4ed6 <processOnSMS+0x37e>
    4ed4:	e080      	b.n	4fd8 <processOnSMS+0x480>
	{
		response_sms_processed_cmd=true;
    4ed6:	4b10      	ldr	r3, [pc, #64]	; (4f18 <processOnSMS+0x3c0>)
    4ed8:	2294      	movs	r2, #148	; 0x94
    4eda:	0052      	lsls	r2, r2, #1
    4edc:	4694      	mov	ip, r2
    4ede:	2208      	movs	r2, #8
    4ee0:	4690      	mov	r8, r2
    4ee2:	44b8      	add	r8, r7
    4ee4:	44c4      	add	ip, r8
    4ee6:	4463      	add	r3, ip
    4ee8:	2201      	movs	r2, #1
    4eea:	701a      	strb	r2, [r3, #0]
		incomingSMSProcessed=true;
    4eec:	2328      	movs	r3, #40	; 0x28
    4eee:	33ff      	adds	r3, #255	; 0xff
    4ef0:	2208      	movs	r2, #8
    4ef2:	4694      	mov	ip, r2
    4ef4:	44bc      	add	ip, r7
    4ef6:	4463      	add	r3, ip
    4ef8:	2201      	movs	r2, #1
    4efa:	701a      	strb	r2, [r3, #0]
		
		strcpy(resep_msg,factory_settings_parameter_struct.DeviceID_ee);
    4efc:	4a34      	ldr	r2, [pc, #208]	; (4fd0 <processOnSMS+0x478>)
    4efe:	230c      	movs	r3, #12
    4f00:	2108      	movs	r1, #8
    4f02:	468c      	mov	ip, r1
    4f04:	44bc      	add	ip, r7
    4f06:	4463      	add	r3, ip
    4f08:	0011      	movs	r1, r2
    4f0a:	0018      	movs	r0, r3
    4f0c:	4b31      	ldr	r3, [pc, #196]	; (4fd4 <processOnSMS+0x47c>)
    4f0e:	4798      	blx	r3
    4f10:	f001 fd1e 	bl	6950 <processOnSMS+0x1df8>
    4f14:	fffffedb 	.word	0xfffffedb
    4f18:	fffffeda 	.word	0xfffffeda
    4f1c:	fffffed9 	.word	0xfffffed9
    4f20:	00018f10 	.word	0x00018f10
    4f24:	00003e0d 	.word	0x00003e0d
    4f28:	00018f18 	.word	0x00018f18
    4f2c:	200005f8 	.word	0x200005f8
    4f30:	20000584 	.word	0x20000584
    4f34:	00017ca1 	.word	0x00017ca1
    4f38:	00012969 	.word	0x00012969
    4f3c:	00012b11 	.word	0x00012b11
    4f40:	0000f019 	.word	0x0000f019
    4f44:	00003ee1 	.word	0x00003ee1
    4f48:	00018f20 	.word	0x00018f20
    4f4c:	00002e4d 	.word	0x00002e4d
    4f50:	00018f28 	.word	0x00018f28
    4f54:	00018f4c 	.word	0x00018f4c
    4f58:	00018f70 	.word	0x00018f70
    4f5c:	0000110d 	.word	0x0000110d
    4f60:	00018f7c 	.word	0x00018f7c
    4f64:	00018f98 	.word	0x00018f98
    4f68:	000012a9 	.word	0x000012a9
    4f6c:	20000628 	.word	0x20000628
    4f70:	00001469 	.word	0x00001469
    4f74:	00000be5 	.word	0x00000be5
    4f78:	000014b5 	.word	0x000014b5
    4f7c:	00001501 	.word	0x00001501
    4f80:	00001569 	.word	0x00001569
    4f84:	000018ad 	.word	0x000018ad
    4f88:	00001945 	.word	0x00001945
    4f8c:	00001341 	.word	0x00001341
    4f90:	0000138d 	.word	0x0000138d
    4f94:	000012f5 	.word	0x000012f5
    4f98:	000018f9 	.word	0x000018f9
    4f9c:	000015d9 	.word	0x000015d9
    4fa0:	00001625 	.word	0x00001625
    4fa4:	00001671 	.word	0x00001671
    4fa8:	00001a25 	.word	0x00001a25
    4fac:	00001a75 	.word	0x00001a75
    4fb0:	00018fa0 	.word	0x00018fa0
    4fb4:	00018fc8 	.word	0x00018fc8
    4fb8:	00017cd7 	.word	0x00017cd7
    4fbc:	20000610 	.word	0x20000610
    4fc0:	00018fcc 	.word	0x00018fcc
    4fc4:	000007f9 	.word	0x000007f9
    4fc8:	00018fe0 	.word	0x00018fe0
    4fcc:	00018fe8 	.word	0x00018fe8
    4fd0:	20000630 	.word	0x20000630
    4fd4:	00017f57 	.word	0x00017f57
		//sprintf(resep_msg,"Software:%s\nModel:%d\nDeviceId:%lu\nHW:%d",
		//SOFTWARE_VER,factory_parameter_struct.u16tmodelNo,factory_parameter_struct.u32deviceId,
		//factory_parameter_struct.u16thardwareVer);

	}
	else if (StringstartsWith(received_command,"AUTOON"))
    4fd8:	4aec      	ldr	r2, [pc, #944]	; (538c <processOnSMS+0x834>)
    4fda:	68fb      	ldr	r3, [r7, #12]
    4fdc:	0011      	movs	r1, r2
    4fde:	0018      	movs	r0, r3
    4fe0:	4beb      	ldr	r3, [pc, #940]	; (5390 <processOnSMS+0x838>)
    4fe2:	4798      	blx	r3
    4fe4:	1e03      	subs	r3, r0, #0
    4fe6:	d027      	beq.n	5038 <processOnSMS+0x4e0>
	{
		saveAutoStartSettings(true);
    4fe8:	2001      	movs	r0, #1
    4fea:	4bea      	ldr	r3, [pc, #936]	; (5394 <processOnSMS+0x83c>)
    4fec:	4798      	blx	r3
		resetAutoStart(true);
    4fee:	2001      	movs	r0, #1
    4ff0:	4be9      	ldr	r3, [pc, #932]	; (5398 <processOnSMS+0x840>)
    4ff2:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    4ff4:	2328      	movs	r3, #40	; 0x28
    4ff6:	33ff      	adds	r3, #255	; 0xff
    4ff8:	2208      	movs	r2, #8
    4ffa:	4694      	mov	ip, r2
    4ffc:	44bc      	add	ip, r7
    4ffe:	4463      	add	r3, ip
    5000:	2201      	movs	r2, #1
    5002:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    5004:	4be5      	ldr	r3, [pc, #916]	; (539c <processOnSMS+0x844>)
    5006:	2294      	movs	r2, #148	; 0x94
    5008:	0052      	lsls	r2, r2, #1
    500a:	4694      	mov	ip, r2
    500c:	2208      	movs	r2, #8
    500e:	4690      	mov	r8, r2
    5010:	44b8      	add	r8, r7
    5012:	44c4      	add	ip, r8
    5014:	4463      	add	r3, ip
    5016:	781b      	ldrb	r3, [r3, #0]
    5018:	2b00      	cmp	r3, #0
    501a:	d101      	bne.n	5020 <processOnSMS+0x4c8>
    501c:	f001 fc98 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"MOTOR AUTOON ON");
    5020:	230c      	movs	r3, #12
    5022:	2208      	movs	r2, #8
    5024:	4694      	mov	ip, r2
    5026:	44bc      	add	ip, r7
    5028:	4463      	add	r3, ip
    502a:	4add      	ldr	r2, [pc, #884]	; (53a0 <processOnSMS+0x848>)
    502c:	ca13      	ldmia	r2!, {r0, r1, r4}
    502e:	c313      	stmia	r3!, {r0, r1, r4}
    5030:	6812      	ldr	r2, [r2, #0]
    5032:	601a      	str	r2, [r3, #0]
    5034:	f001 fc8c 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"AUTOOFF"))
    5038:	4ada      	ldr	r2, [pc, #872]	; (53a4 <processOnSMS+0x84c>)
    503a:	68fb      	ldr	r3, [r7, #12]
    503c:	0011      	movs	r1, r2
    503e:	0018      	movs	r0, r3
    5040:	4bd3      	ldr	r3, [pc, #844]	; (5390 <processOnSMS+0x838>)
    5042:	4798      	blx	r3
    5044:	1e03      	subs	r3, r0, #0
    5046:	d029      	beq.n	509c <processOnSMS+0x544>
	{
		saveAutoStartSettings(false);
    5048:	2000      	movs	r0, #0
    504a:	4bd2      	ldr	r3, [pc, #840]	; (5394 <processOnSMS+0x83c>)
    504c:	4798      	blx	r3
		resetAutoStart(true);
    504e:	2001      	movs	r0, #1
    5050:	4bd1      	ldr	r3, [pc, #836]	; (5398 <processOnSMS+0x840>)
    5052:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    5054:	2328      	movs	r3, #40	; 0x28
    5056:	33ff      	adds	r3, #255	; 0xff
    5058:	2208      	movs	r2, #8
    505a:	4694      	mov	ip, r2
    505c:	44bc      	add	ip, r7
    505e:	4463      	add	r3, ip
    5060:	2201      	movs	r2, #1
    5062:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    5064:	4bcd      	ldr	r3, [pc, #820]	; (539c <processOnSMS+0x844>)
    5066:	2294      	movs	r2, #148	; 0x94
    5068:	0052      	lsls	r2, r2, #1
    506a:	4694      	mov	ip, r2
    506c:	2208      	movs	r2, #8
    506e:	4690      	mov	r8, r2
    5070:	44b8      	add	r8, r7
    5072:	44c4      	add	ip, r8
    5074:	4463      	add	r3, ip
    5076:	781b      	ldrb	r3, [r3, #0]
    5078:	2b00      	cmp	r3, #0
    507a:	d101      	bne.n	5080 <processOnSMS+0x528>
    507c:	f001 fc68 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"MOTOR AUTOON OFF");
    5080:	230c      	movs	r3, #12
    5082:	2208      	movs	r2, #8
    5084:	4694      	mov	ip, r2
    5086:	44bc      	add	ip, r7
    5088:	4463      	add	r3, ip
    508a:	4ac7      	ldr	r2, [pc, #796]	; (53a8 <processOnSMS+0x850>)
    508c:	ca13      	ldmia	r2!, {r0, r1, r4}
    508e:	c313      	stmia	r3!, {r0, r1, r4}
    5090:	6811      	ldr	r1, [r2, #0]
    5092:	6019      	str	r1, [r3, #0]
    5094:	7912      	ldrb	r2, [r2, #4]
    5096:	711a      	strb	r2, [r3, #4]
    5098:	f001 fc5a 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"WBYPON"))
    509c:	4ac3      	ldr	r2, [pc, #780]	; (53ac <processOnSMS+0x854>)
    509e:	68fb      	ldr	r3, [r7, #12]
    50a0:	0011      	movs	r1, r2
    50a2:	0018      	movs	r0, r3
    50a4:	4bba      	ldr	r3, [pc, #744]	; (5390 <processOnSMS+0x838>)
    50a6:	4798      	blx	r3
    50a8:	1e03      	subs	r3, r0, #0
    50aa:	d02a      	beq.n	5102 <processOnSMS+0x5aa>
	{
		
		if (factory_settings_parameter_struct.ENABLE_WATER)
    50ac:	4bc0      	ldr	r3, [pc, #768]	; (53b0 <processOnSMS+0x858>)
    50ae:	795b      	ldrb	r3, [r3, #5]
    50b0:	2b00      	cmp	r3, #0
    50b2:	d101      	bne.n	50b8 <processOnSMS+0x560>
    50b4:	f001 fc4c 	bl	6950 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    50b8:	2328      	movs	r3, #40	; 0x28
    50ba:	33ff      	adds	r3, #255	; 0xff
    50bc:	2208      	movs	r2, #8
    50be:	4694      	mov	ip, r2
    50c0:	44bc      	add	ip, r7
    50c2:	4463      	add	r3, ip
    50c4:	2201      	movs	r2, #1
    50c6:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(true);
    50c8:	2001      	movs	r0, #1
    50ca:	4bba      	ldr	r3, [pc, #744]	; (53b4 <processOnSMS+0x85c>)
    50cc:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    50ce:	4bb3      	ldr	r3, [pc, #716]	; (539c <processOnSMS+0x844>)
    50d0:	2294      	movs	r2, #148	; 0x94
    50d2:	0052      	lsls	r2, r2, #1
    50d4:	4694      	mov	ip, r2
    50d6:	2208      	movs	r2, #8
    50d8:	4690      	mov	r8, r2
    50da:	44b8      	add	r8, r7
    50dc:	44c4      	add	ip, r8
    50de:	4463      	add	r3, ip
    50e0:	781b      	ldrb	r3, [r3, #0]
    50e2:	2b00      	cmp	r3, #0
    50e4:	d101      	bne.n	50ea <processOnSMS+0x592>
    50e6:	f001 fc33 	bl	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"WATER BYPASS ON");
    50ea:	230c      	movs	r3, #12
    50ec:	2208      	movs	r2, #8
    50ee:	4694      	mov	ip, r2
    50f0:	44bc      	add	ip, r7
    50f2:	4463      	add	r3, ip
    50f4:	4ab0      	ldr	r2, [pc, #704]	; (53b8 <processOnSMS+0x860>)
    50f6:	ca13      	ldmia	r2!, {r0, r1, r4}
    50f8:	c313      	stmia	r3!, {r0, r1, r4}
    50fa:	6812      	ldr	r2, [r2, #0]
    50fc:	601a      	str	r2, [r3, #0]
    50fe:	f001 fc27 	bl	6950 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"WBYPOFF"))
    5102:	4aae      	ldr	r2, [pc, #696]	; (53bc <processOnSMS+0x864>)
    5104:	68fb      	ldr	r3, [r7, #12]
    5106:	0011      	movs	r1, r2
    5108:	0018      	movs	r0, r3
    510a:	4ba1      	ldr	r3, [pc, #644]	; (5390 <processOnSMS+0x838>)
    510c:	4798      	blx	r3
    510e:	1e03      	subs	r3, r0, #0
    5110:	d02c      	beq.n	516c <processOnSMS+0x614>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER)
    5112:	4ba7      	ldr	r3, [pc, #668]	; (53b0 <processOnSMS+0x858>)
    5114:	795b      	ldrb	r3, [r3, #5]
    5116:	2b00      	cmp	r3, #0
    5118:	d101      	bne.n	511e <processOnSMS+0x5c6>
    511a:	f001 fc19 	bl	6950 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    511e:	2328      	movs	r3, #40	; 0x28
    5120:	33ff      	adds	r3, #255	; 0xff
    5122:	2208      	movs	r2, #8
    5124:	4694      	mov	ip, r2
    5126:	44bc      	add	ip, r7
    5128:	4463      	add	r3, ip
    512a:	2201      	movs	r2, #1
    512c:	701a      	strb	r2, [r3, #0]
			saveWaterBypassSettings(false);
    512e:	2000      	movs	r0, #0
    5130:	4ba0      	ldr	r3, [pc, #640]	; (53b4 <processOnSMS+0x85c>)
    5132:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    5134:	4b99      	ldr	r3, [pc, #612]	; (539c <processOnSMS+0x844>)
    5136:	2294      	movs	r2, #148	; 0x94
    5138:	0052      	lsls	r2, r2, #1
    513a:	4694      	mov	ip, r2
    513c:	2208      	movs	r2, #8
    513e:	4690      	mov	r8, r2
    5140:	44b8      	add	r8, r7
    5142:	44c4      	add	ip, r8
    5144:	4463      	add	r3, ip
    5146:	781b      	ldrb	r3, [r3, #0]
    5148:	2b00      	cmp	r3, #0
    514a:	d101      	bne.n	5150 <processOnSMS+0x5f8>
    514c:	f001 fc00 	bl	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"WATER BYPASS OFF");
    5150:	230c      	movs	r3, #12
    5152:	2208      	movs	r2, #8
    5154:	4694      	mov	ip, r2
    5156:	44bc      	add	ip, r7
    5158:	4463      	add	r3, ip
    515a:	4a99      	ldr	r2, [pc, #612]	; (53c0 <processOnSMS+0x868>)
    515c:	ca13      	ldmia	r2!, {r0, r1, r4}
    515e:	c313      	stmia	r3!, {r0, r1, r4}
    5160:	6811      	ldr	r1, [r2, #0]
    5162:	6019      	str	r1, [r3, #0]
    5164:	7912      	ldrb	r2, [r2, #4]
    5166:	711a      	strb	r2, [r3, #4]
    5168:	f001 fbf2 	bl	6950 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"SPPON"))
    516c:	4a95      	ldr	r2, [pc, #596]	; (53c4 <processOnSMS+0x86c>)
    516e:	68fb      	ldr	r3, [r7, #12]
    5170:	0011      	movs	r1, r2
    5172:	0018      	movs	r0, r3
    5174:	4b86      	ldr	r3, [pc, #536]	; (5390 <processOnSMS+0x838>)
    5176:	4798      	blx	r3
    5178:	1e03      	subs	r3, r0, #0
    517a:	d026      	beq.n	51ca <processOnSMS+0x672>
	{
		saveSinglePhasingSettings(true);
    517c:	2001      	movs	r0, #1
    517e:	4b92      	ldr	r3, [pc, #584]	; (53c8 <processOnSMS+0x870>)
    5180:	4798      	blx	r3
		incomingSMSProcessed=true;
    5182:	2328      	movs	r3, #40	; 0x28
    5184:	33ff      	adds	r3, #255	; 0xff
    5186:	2208      	movs	r2, #8
    5188:	4694      	mov	ip, r2
    518a:	44bc      	add	ip, r7
    518c:	4463      	add	r3, ip
    518e:	2201      	movs	r2, #1
    5190:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5192:	4b82      	ldr	r3, [pc, #520]	; (539c <processOnSMS+0x844>)
    5194:	2294      	movs	r2, #148	; 0x94
    5196:	0052      	lsls	r2, r2, #1
    5198:	4694      	mov	ip, r2
    519a:	2208      	movs	r2, #8
    519c:	4690      	mov	r8, r2
    519e:	44b8      	add	r8, r7
    51a0:	44c4      	add	ip, r8
    51a2:	4463      	add	r3, ip
    51a4:	781b      	ldrb	r3, [r3, #0]
    51a6:	2b00      	cmp	r3, #0
    51a8:	d101      	bne.n	51ae <processOnSMS+0x656>
    51aa:	f001 fbd1 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SPP ON");
    51ae:	230c      	movs	r3, #12
    51b0:	2208      	movs	r2, #8
    51b2:	4694      	mov	ip, r2
    51b4:	44bc      	add	ip, r7
    51b6:	4463      	add	r3, ip
    51b8:	4a84      	ldr	r2, [pc, #528]	; (53cc <processOnSMS+0x874>)
    51ba:	6811      	ldr	r1, [r2, #0]
    51bc:	6019      	str	r1, [r3, #0]
    51be:	8891      	ldrh	r1, [r2, #4]
    51c0:	8099      	strh	r1, [r3, #4]
    51c2:	7992      	ldrb	r2, [r2, #6]
    51c4:	719a      	strb	r2, [r3, #6]
    51c6:	f001 fbc3 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"SPPOFF"))
    51ca:	4a81      	ldr	r2, [pc, #516]	; (53d0 <processOnSMS+0x878>)
    51cc:	68fb      	ldr	r3, [r7, #12]
    51ce:	0011      	movs	r1, r2
    51d0:	0018      	movs	r0, r3
    51d2:	4b6f      	ldr	r3, [pc, #444]	; (5390 <processOnSMS+0x838>)
    51d4:	4798      	blx	r3
    51d6:	1e03      	subs	r3, r0, #0
    51d8:	d022      	beq.n	5220 <processOnSMS+0x6c8>
	{
		saveSinglePhasingSettings(false);
    51da:	2000      	movs	r0, #0
    51dc:	4b7a      	ldr	r3, [pc, #488]	; (53c8 <processOnSMS+0x870>)
    51de:	4798      	blx	r3
		incomingSMSProcessed=true;
    51e0:	2328      	movs	r3, #40	; 0x28
    51e2:	33ff      	adds	r3, #255	; 0xff
    51e4:	2208      	movs	r2, #8
    51e6:	4694      	mov	ip, r2
    51e8:	44bc      	add	ip, r7
    51ea:	4463      	add	r3, ip
    51ec:	2201      	movs	r2, #1
    51ee:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    51f0:	4b6a      	ldr	r3, [pc, #424]	; (539c <processOnSMS+0x844>)
    51f2:	2294      	movs	r2, #148	; 0x94
    51f4:	0052      	lsls	r2, r2, #1
    51f6:	4694      	mov	ip, r2
    51f8:	2208      	movs	r2, #8
    51fa:	4690      	mov	r8, r2
    51fc:	44b8      	add	r8, r7
    51fe:	44c4      	add	ip, r8
    5200:	4463      	add	r3, ip
    5202:	781b      	ldrb	r3, [r3, #0]
    5204:	2b00      	cmp	r3, #0
    5206:	d101      	bne.n	520c <processOnSMS+0x6b4>
    5208:	f001 fba2 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SPP OFF");
    520c:	230c      	movs	r3, #12
    520e:	2208      	movs	r2, #8
    5210:	4694      	mov	ip, r2
    5212:	44bc      	add	ip, r7
    5214:	4463      	add	r3, ip
    5216:	4a6f      	ldr	r2, [pc, #444]	; (53d4 <processOnSMS+0x87c>)
    5218:	ca03      	ldmia	r2!, {r0, r1}
    521a:	c303      	stmia	r3!, {r0, r1}
    521c:	f001 fb98 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"SPPV"))
    5220:	4a6d      	ldr	r2, [pc, #436]	; (53d8 <processOnSMS+0x880>)
    5222:	68fb      	ldr	r3, [r7, #12]
    5224:	0011      	movs	r1, r2
    5226:	0018      	movs	r0, r3
    5228:	4b59      	ldr	r3, [pc, #356]	; (5390 <processOnSMS+0x838>)
    522a:	4798      	blx	r3
    522c:	1e03      	subs	r3, r0, #0
    522e:	d055      	beq.n	52dc <processOnSMS+0x784>
	{
		memmove(received_command,received_command+4,strlen(received_command));
    5230:	68fb      	ldr	r3, [r7, #12]
    5232:	1d1c      	adds	r4, r3, #4
    5234:	68fb      	ldr	r3, [r7, #12]
    5236:	0018      	movs	r0, r3
    5238:	4b68      	ldr	r3, [pc, #416]	; (53dc <processOnSMS+0x884>)
    523a:	4798      	blx	r3
    523c:	0002      	movs	r2, r0
    523e:	68fb      	ldr	r3, [r7, #12]
    5240:	0021      	movs	r1, r4
    5242:	0018      	movs	r0, r3
    5244:	4b66      	ldr	r3, [pc, #408]	; (53e0 <processOnSMS+0x888>)
    5246:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
    5248:	68fb      	ldr	r3, [r7, #12]
    524a:	0018      	movs	r0, r3
    524c:	4b65      	ldr	r3, [pc, #404]	; (53e4 <processOnSMS+0x88c>)
    524e:	4798      	blx	r3
    5250:	0002      	movs	r2, r0
    5252:	2393      	movs	r3, #147	; 0x93
    5254:	005b      	lsls	r3, r3, #1
    5256:	2108      	movs	r1, #8
    5258:	468c      	mov	ip, r1
    525a:	44bc      	add	ip, r7
    525c:	4463      	add	r3, ip
    525e:	701a      	strb	r2, [r3, #0]
		if(sppVoltage<20) sppVoltage=20;
    5260:	2393      	movs	r3, #147	; 0x93
    5262:	005b      	lsls	r3, r3, #1
    5264:	2208      	movs	r2, #8
    5266:	4694      	mov	ip, r2
    5268:	44bc      	add	ip, r7
    526a:	4463      	add	r3, ip
    526c:	781b      	ldrb	r3, [r3, #0]
    526e:	2b13      	cmp	r3, #19
    5270:	d807      	bhi.n	5282 <processOnSMS+0x72a>
    5272:	2393      	movs	r3, #147	; 0x93
    5274:	005b      	lsls	r3, r3, #1
    5276:	2208      	movs	r2, #8
    5278:	4694      	mov	ip, r2
    527a:	44bc      	add	ip, r7
    527c:	4463      	add	r3, ip
    527e:	2214      	movs	r2, #20
    5280:	701a      	strb	r2, [r3, #0]
		if(sppVoltage>440) sppVoltage=440;
		saveSinglePhasingVoltage(sppVoltage);
    5282:	2393      	movs	r3, #147	; 0x93
    5284:	005b      	lsls	r3, r3, #1
    5286:	2208      	movs	r2, #8
    5288:	4694      	mov	ip, r2
    528a:	44bc      	add	ip, r7
    528c:	4463      	add	r3, ip
    528e:	781b      	ldrb	r3, [r3, #0]
    5290:	b29b      	uxth	r3, r3
    5292:	0018      	movs	r0, r3
    5294:	4b54      	ldr	r3, [pc, #336]	; (53e8 <processOnSMS+0x890>)
    5296:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    5298:	2328      	movs	r3, #40	; 0x28
    529a:	33ff      	adds	r3, #255	; 0xff
    529c:	2208      	movs	r2, #8
    529e:	4694      	mov	ip, r2
    52a0:	44bc      	add	ip, r7
    52a2:	4463      	add	r3, ip
    52a4:	2201      	movs	r2, #1
    52a6:	701a      	strb	r2, [r3, #0]
		
		
		if (response_sms_processed_cmd == true)
    52a8:	4b3c      	ldr	r3, [pc, #240]	; (539c <processOnSMS+0x844>)
    52aa:	2294      	movs	r2, #148	; 0x94
    52ac:	0052      	lsls	r2, r2, #1
    52ae:	4694      	mov	ip, r2
    52b0:	2208      	movs	r2, #8
    52b2:	4690      	mov	r8, r2
    52b4:	44b8      	add	r8, r7
    52b6:	44c4      	add	ip, r8
    52b8:	4463      	add	r3, ip
    52ba:	781b      	ldrb	r3, [r3, #0]
    52bc:	2b00      	cmp	r3, #0
    52be:	d101      	bne.n	52c4 <processOnSMS+0x76c>
    52c0:	f001 fb46 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SPP VOLT SET");
    52c4:	230c      	movs	r3, #12
    52c6:	2208      	movs	r2, #8
    52c8:	4694      	mov	ip, r2
    52ca:	44bc      	add	ip, r7
    52cc:	4463      	add	r3, ip
    52ce:	4a47      	ldr	r2, [pc, #284]	; (53ec <processOnSMS+0x894>)
    52d0:	ca13      	ldmia	r2!, {r0, r1, r4}
    52d2:	c313      	stmia	r3!, {r0, r1, r4}
    52d4:	7812      	ldrb	r2, [r2, #0]
    52d6:	701a      	strb	r2, [r3, #0]
    52d8:	f001 fb3a 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"SEQON"))
    52dc:	4a44      	ldr	r2, [pc, #272]	; (53f0 <processOnSMS+0x898>)
    52de:	68fb      	ldr	r3, [r7, #12]
    52e0:	0011      	movs	r1, r2
    52e2:	0018      	movs	r0, r3
    52e4:	4b2a      	ldr	r3, [pc, #168]	; (5390 <processOnSMS+0x838>)
    52e6:	4798      	blx	r3
    52e8:	1e03      	subs	r3, r0, #0
    52ea:	d022      	beq.n	5332 <processOnSMS+0x7da>
	{
		savePhaseSequenceProtectionSettings(true);
    52ec:	2001      	movs	r0, #1
    52ee:	4b41      	ldr	r3, [pc, #260]	; (53f4 <processOnSMS+0x89c>)
    52f0:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    52f2:	2328      	movs	r3, #40	; 0x28
    52f4:	33ff      	adds	r3, #255	; 0xff
    52f6:	2208      	movs	r2, #8
    52f8:	4694      	mov	ip, r2
    52fa:	44bc      	add	ip, r7
    52fc:	4463      	add	r3, ip
    52fe:	2201      	movs	r2, #1
    5300:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    5302:	4b26      	ldr	r3, [pc, #152]	; (539c <processOnSMS+0x844>)
    5304:	2294      	movs	r2, #148	; 0x94
    5306:	0052      	lsls	r2, r2, #1
    5308:	4694      	mov	ip, r2
    530a:	2208      	movs	r2, #8
    530c:	4690      	mov	r8, r2
    530e:	44b8      	add	r8, r7
    5310:	44c4      	add	ip, r8
    5312:	4463      	add	r3, ip
    5314:	781b      	ldrb	r3, [r3, #0]
    5316:	2b00      	cmp	r3, #0
    5318:	d101      	bne.n	531e <processOnSMS+0x7c6>
    531a:	f001 fb19 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SEQP ON");
    531e:	230c      	movs	r3, #12
    5320:	2208      	movs	r2, #8
    5322:	4694      	mov	ip, r2
    5324:	44bc      	add	ip, r7
    5326:	4463      	add	r3, ip
    5328:	4a33      	ldr	r2, [pc, #204]	; (53f8 <processOnSMS+0x8a0>)
    532a:	ca03      	ldmia	r2!, {r0, r1}
    532c:	c303      	stmia	r3!, {r0, r1}
    532e:	f001 fb0f 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"SEQOFF"))
    5332:	4a32      	ldr	r2, [pc, #200]	; (53fc <processOnSMS+0x8a4>)
    5334:	68fb      	ldr	r3, [r7, #12]
    5336:	0011      	movs	r1, r2
    5338:	0018      	movs	r0, r3
    533a:	4b15      	ldr	r3, [pc, #84]	; (5390 <processOnSMS+0x838>)
    533c:	4798      	blx	r3
    533e:	1e03      	subs	r3, r0, #0
    5340:	d060      	beq.n	5404 <processOnSMS+0x8ac>
	{
		savePhaseSequenceProtectionSettings(false);
    5342:	2000      	movs	r0, #0
    5344:	4b2b      	ldr	r3, [pc, #172]	; (53f4 <processOnSMS+0x89c>)
    5346:	4798      	blx	r3

		incomingSMSProcessed=true;
    5348:	2328      	movs	r3, #40	; 0x28
    534a:	33ff      	adds	r3, #255	; 0xff
    534c:	2208      	movs	r2, #8
    534e:	4694      	mov	ip, r2
    5350:	44bc      	add	ip, r7
    5352:	4463      	add	r3, ip
    5354:	2201      	movs	r2, #1
    5356:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5358:	4b10      	ldr	r3, [pc, #64]	; (539c <processOnSMS+0x844>)
    535a:	2294      	movs	r2, #148	; 0x94
    535c:	0052      	lsls	r2, r2, #1
    535e:	4694      	mov	ip, r2
    5360:	2208      	movs	r2, #8
    5362:	4690      	mov	r8, r2
    5364:	44b8      	add	r8, r7
    5366:	44c4      	add	ip, r8
    5368:	4463      	add	r3, ip
    536a:	781b      	ldrb	r3, [r3, #0]
    536c:	2b00      	cmp	r3, #0
    536e:	d101      	bne.n	5374 <processOnSMS+0x81c>
    5370:	f001 faee 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"SEQP OFF");
    5374:	230c      	movs	r3, #12
    5376:	2208      	movs	r2, #8
    5378:	4694      	mov	ip, r2
    537a:	44bc      	add	ip, r7
    537c:	4463      	add	r3, ip
    537e:	4a20      	ldr	r2, [pc, #128]	; (5400 <processOnSMS+0x8a8>)
    5380:	ca03      	ldmia	r2!, {r0, r1}
    5382:	c303      	stmia	r3!, {r0, r1}
    5384:	7812      	ldrb	r2, [r2, #0]
    5386:	701a      	strb	r2, [r3, #0]
    5388:	f001 fae2 	bl	6950 <processOnSMS+0x1df8>
    538c:	00018fec 	.word	0x00018fec
    5390:	00003e0d 	.word	0x00003e0d
    5394:	000012a9 	.word	0x000012a9
    5398:	0000a195 	.word	0x0000a195
    539c:	fffffeda 	.word	0xfffffeda
    53a0:	00018ff4 	.word	0x00018ff4
    53a4:	00019004 	.word	0x00019004
    53a8:	0001900c 	.word	0x0001900c
    53ac:	00019020 	.word	0x00019020
    53b0:	20000628 	.word	0x20000628
    53b4:	00001469 	.word	0x00001469
    53b8:	00019028 	.word	0x00019028
    53bc:	00019038 	.word	0x00019038
    53c0:	00019040 	.word	0x00019040
    53c4:	00019054 	.word	0x00019054
    53c8:	000015d9 	.word	0x000015d9
    53cc:	0001905c 	.word	0x0001905c
    53d0:	00019064 	.word	0x00019064
    53d4:	0001906c 	.word	0x0001906c
    53d8:	00019074 	.word	0x00019074
    53dc:	00017f67 	.word	0x00017f67
    53e0:	00017cb3 	.word	0x00017cb3
    53e4:	00017bbd 	.word	0x00017bbd
    53e8:	00001625 	.word	0x00001625
    53ec:	0001907c 	.word	0x0001907c
    53f0:	0001908c 	.word	0x0001908c
    53f4:	00001671 	.word	0x00001671
    53f8:	00019094 	.word	0x00019094
    53fc:	0001909c 	.word	0x0001909c
    5400:	000190a4 	.word	0x000190a4
		}
	}
	else if (StringstartsWith(received_command,"DND"))
    5404:	4adf      	ldr	r2, [pc, #892]	; (5784 <processOnSMS+0xc2c>)
    5406:	68fb      	ldr	r3, [r7, #12]
    5408:	0011      	movs	r1, r2
    540a:	0018      	movs	r0, r3
    540c:	4bde      	ldr	r3, [pc, #888]	; (5788 <processOnSMS+0xc30>)
    540e:	4798      	blx	r3
    5410:	1e03      	subs	r3, r0, #0
    5412:	d06c      	beq.n	54ee <processOnSMS+0x996>
	{
		if (strlen(received_command)>3)
    5414:	68fb      	ldr	r3, [r7, #12]
    5416:	0018      	movs	r0, r3
    5418:	4bdc      	ldr	r3, [pc, #880]	; (578c <processOnSMS+0xc34>)
    541a:	4798      	blx	r3
    541c:	0003      	movs	r3, r0
    541e:	2b03      	cmp	r3, #3
    5420:	d801      	bhi.n	5426 <processOnSMS+0x8ce>
    5422:	f001 fa95 	bl	6950 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+3,strlen(received_command));
    5426:	68fb      	ldr	r3, [r7, #12]
    5428:	1cdc      	adds	r4, r3, #3
    542a:	68fb      	ldr	r3, [r7, #12]
    542c:	0018      	movs	r0, r3
    542e:	4bd7      	ldr	r3, [pc, #860]	; (578c <processOnSMS+0xc34>)
    5430:	4798      	blx	r3
    5432:	0002      	movs	r2, r0
    5434:	68fb      	ldr	r3, [r7, #12]
    5436:	0021      	movs	r1, r4
    5438:	0018      	movs	r0, r3
    543a:	4bd5      	ldr	r3, [pc, #852]	; (5790 <processOnSMS+0xc38>)
    543c:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
    543e:	68fb      	ldr	r3, [r7, #12]
    5440:	781b      	ldrb	r3, [r3, #0]
    5442:	2b4c      	cmp	r3, #76	; 0x4c
    5444:	d009      	beq.n	545a <processOnSMS+0x902>
    5446:	68fb      	ldr	r3, [r7, #12]
    5448:	781b      	ldrb	r3, [r3, #0]
    544a:	2b53      	cmp	r3, #83	; 0x53
    544c:	d005      	beq.n	545a <processOnSMS+0x902>
    544e:	68fb      	ldr	r3, [r7, #12]
    5450:	781b      	ldrb	r3, [r3, #0]
    5452:	2b4f      	cmp	r3, #79	; 0x4f
    5454:	d001      	beq.n	545a <processOnSMS+0x902>
    5456:	f001 fa7b 	bl	6950 <processOnSMS+0x1df8>
			{
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
    545a:	68fb      	ldr	r3, [r7, #12]
    545c:	b2db      	uxtb	r3, r3
    545e:	0018      	movs	r0, r3
    5460:	4bcc      	ldr	r3, [pc, #816]	; (5794 <processOnSMS+0xc3c>)
    5462:	4798      	blx	r3
				
				incomingSMSProcessed=true;
    5464:	2328      	movs	r3, #40	; 0x28
    5466:	33ff      	adds	r3, #255	; 0xff
    5468:	2208      	movs	r2, #8
    546a:	4694      	mov	ip, r2
    546c:	44bc      	add	ip, r7
    546e:	4463      	add	r3, ip
    5470:	2201      	movs	r2, #1
    5472:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    5474:	4bc8      	ldr	r3, [pc, #800]	; (5798 <processOnSMS+0xc40>)
    5476:	2294      	movs	r2, #148	; 0x94
    5478:	0052      	lsls	r2, r2, #1
    547a:	4694      	mov	ip, r2
    547c:	2208      	movs	r2, #8
    547e:	4690      	mov	r8, r2
    5480:	44b8      	add	r8, r7
    5482:	44c4      	add	ip, r8
    5484:	4463      	add	r3, ip
    5486:	781b      	ldrb	r3, [r3, #0]
    5488:	2b00      	cmp	r3, #0
    548a:	d101      	bne.n	5490 <processOnSMS+0x938>
    548c:	f001 fa60 	bl	6950 <processOnSMS+0x1df8>
				{
					strcpy(resep_msg,"DND : ");
    5490:	230c      	movs	r3, #12
    5492:	2208      	movs	r2, #8
    5494:	4694      	mov	ip, r2
    5496:	44bc      	add	ip, r7
    5498:	4463      	add	r3, ip
    549a:	4ac0      	ldr	r2, [pc, #768]	; (579c <processOnSMS+0xc44>)
    549c:	6811      	ldr	r1, [r2, #0]
    549e:	6019      	str	r1, [r3, #0]
    54a0:	8891      	ldrh	r1, [r2, #4]
    54a2:	8099      	strh	r1, [r3, #4]
    54a4:	7992      	ldrb	r2, [r2, #6]
    54a6:	719a      	strb	r2, [r3, #6]
					strcat(resep_msg,received_command);
    54a8:	68fa      	ldr	r2, [r7, #12]
    54aa:	230c      	movs	r3, #12
    54ac:	2108      	movs	r1, #8
    54ae:	468c      	mov	ip, r1
    54b0:	44bc      	add	ip, r7
    54b2:	4463      	add	r3, ip
    54b4:	0011      	movs	r1, r2
    54b6:	0018      	movs	r0, r3
    54b8:	4bb9      	ldr	r3, [pc, #740]	; (57a0 <processOnSMS+0xc48>)
    54ba:	4798      	blx	r3
					strcat(resep_msg," OK");
    54bc:	230c      	movs	r3, #12
    54be:	2208      	movs	r2, #8
    54c0:	4694      	mov	ip, r2
    54c2:	44bc      	add	ip, r7
    54c4:	4463      	add	r3, ip
    54c6:	0018      	movs	r0, r3
    54c8:	4bb0      	ldr	r3, [pc, #704]	; (578c <processOnSMS+0xc34>)
    54ca:	4798      	blx	r3
    54cc:	0003      	movs	r3, r0
    54ce:	001a      	movs	r2, r3
    54d0:	230c      	movs	r3, #12
    54d2:	2108      	movs	r1, #8
    54d4:	468c      	mov	ip, r1
    54d6:	44bc      	add	ip, r7
    54d8:	4463      	add	r3, ip
    54da:	189a      	adds	r2, r3, r2
    54dc:	4bb1      	ldr	r3, [pc, #708]	; (57a4 <processOnSMS+0xc4c>)
    54de:	0010      	movs	r0, r2
    54e0:	0019      	movs	r1, r3
    54e2:	2304      	movs	r3, #4
    54e4:	001a      	movs	r2, r3
    54e6:	4bb0      	ldr	r3, [pc, #704]	; (57a8 <processOnSMS+0xc50>)
    54e8:	4798      	blx	r3
    54ea:	f001 fa31 	bl	6950 <processOnSMS+0x1df8>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"FDBK"))
    54ee:	4aaf      	ldr	r2, [pc, #700]	; (57ac <processOnSMS+0xc54>)
    54f0:	68fb      	ldr	r3, [r7, #12]
    54f2:	0011      	movs	r1, r2
    54f4:	0018      	movs	r0, r3
    54f6:	4ba4      	ldr	r3, [pc, #656]	; (5788 <processOnSMS+0xc30>)
    54f8:	4798      	blx	r3
    54fa:	1e03      	subs	r3, r0, #0
    54fc:	d072      	beq.n	55e4 <processOnSMS+0xa8c>
	{
		if (strlen(received_command)>4)
    54fe:	68fb      	ldr	r3, [r7, #12]
    5500:	0018      	movs	r0, r3
    5502:	4ba2      	ldr	r3, [pc, #648]	; (578c <processOnSMS+0xc34>)
    5504:	4798      	blx	r3
    5506:	0003      	movs	r3, r0
    5508:	2b04      	cmp	r3, #4
    550a:	d801      	bhi.n	5510 <processOnSMS+0x9b8>
    550c:	f001 fa20 	bl	6950 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+4,strlen(received_command));
    5510:	68fb      	ldr	r3, [r7, #12]
    5512:	1d1c      	adds	r4, r3, #4
    5514:	68fb      	ldr	r3, [r7, #12]
    5516:	0018      	movs	r0, r3
    5518:	4b9c      	ldr	r3, [pc, #624]	; (578c <processOnSMS+0xc34>)
    551a:	4798      	blx	r3
    551c:	0002      	movs	r2, r0
    551e:	68fb      	ldr	r3, [r7, #12]
    5520:	0021      	movs	r1, r4
    5522:	0018      	movs	r0, r3
    5524:	4b9a      	ldr	r3, [pc, #616]	; (5790 <processOnSMS+0xc38>)
    5526:	4798      	blx	r3
			uint8_t fdbkValue = atoi(received_command);
    5528:	68fb      	ldr	r3, [r7, #12]
    552a:	0018      	movs	r0, r3
    552c:	4ba0      	ldr	r3, [pc, #640]	; (57b0 <processOnSMS+0xc58>)
    552e:	4798      	blx	r3
    5530:	0002      	movs	r2, r0
    5532:	2326      	movs	r3, #38	; 0x26
    5534:	33ff      	adds	r3, #255	; 0xff
    5536:	2108      	movs	r1, #8
    5538:	468c      	mov	ip, r1
    553a:	44bc      	add	ip, r7
    553c:	4463      	add	r3, ip
    553e:	701a      	strb	r2, [r3, #0]
			if (fdbkValue <= MOTORFEEDBACK_DETECTION_ON)
    5540:	2326      	movs	r3, #38	; 0x26
    5542:	33ff      	adds	r3, #255	; 0xff
    5544:	2208      	movs	r2, #8
    5546:	4694      	mov	ip, r2
    5548:	44bc      	add	ip, r7
    554a:	4463      	add	r3, ip
    554c:	781b      	ldrb	r3, [r3, #0]
    554e:	2b02      	cmp	r3, #2
    5550:	d901      	bls.n	5556 <processOnSMS+0x9fe>
    5552:	f001 f9fd 	bl	6950 <processOnSMS+0x1df8>
			{
				if (fdbkValue == MOTORFEEDBACK_DETECTION_CURRENT)
    5556:	2326      	movs	r3, #38	; 0x26
    5558:	33ff      	adds	r3, #255	; 0xff
    555a:	2208      	movs	r2, #8
    555c:	4694      	mov	ip, r2
    555e:	44bc      	add	ip, r7
    5560:	4463      	add	r3, ip
    5562:	781b      	ldrb	r3, [r3, #0]
    5564:	2b01      	cmp	r3, #1
    5566:	d10b      	bne.n	5580 <processOnSMS+0xa28>
				{
					if (!factory_settings_parameter_struct.ENABLE_CURRENT)
    5568:	4b92      	ldr	r3, [pc, #584]	; (57b4 <processOnSMS+0xc5c>)
    556a:	785b      	ldrb	r3, [r3, #1]
    556c:	2b00      	cmp	r3, #0
    556e:	d107      	bne.n	5580 <processOnSMS+0xa28>
					{
						fdbkValue=MOTORFEEDBACK_DETECTION_OFF;
    5570:	2326      	movs	r3, #38	; 0x26
    5572:	33ff      	adds	r3, #255	; 0xff
    5574:	2208      	movs	r2, #8
    5576:	4694      	mov	ip, r2
    5578:	44bc      	add	ip, r7
    557a:	4463      	add	r3, ip
    557c:	2200      	movs	r2, #0
    557e:	701a      	strb	r2, [r3, #0]
					}
				}
				saveMotorFeedbackDetectionSettings(fdbkValue);
    5580:	2326      	movs	r3, #38	; 0x26
    5582:	33ff      	adds	r3, #255	; 0xff
    5584:	2208      	movs	r2, #8
    5586:	4694      	mov	ip, r2
    5588:	44bc      	add	ip, r7
    558a:	4463      	add	r3, ip
    558c:	781b      	ldrb	r3, [r3, #0]
    558e:	0018      	movs	r0, r3
    5590:	4b89      	ldr	r3, [pc, #548]	; (57b8 <processOnSMS+0xc60>)
    5592:	4798      	blx	r3
				incomingSMSProcessed=true;
    5594:	2328      	movs	r3, #40	; 0x28
    5596:	33ff      	adds	r3, #255	; 0xff
    5598:	2208      	movs	r2, #8
    559a:	4694      	mov	ip, r2
    559c:	44bc      	add	ip, r7
    559e:	4463      	add	r3, ip
    55a0:	2201      	movs	r2, #1
    55a2:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    55a4:	4b7c      	ldr	r3, [pc, #496]	; (5798 <processOnSMS+0xc40>)
    55a6:	2294      	movs	r2, #148	; 0x94
    55a8:	0052      	lsls	r2, r2, #1
    55aa:	4694      	mov	ip, r2
    55ac:	2208      	movs	r2, #8
    55ae:	4690      	mov	r8, r2
    55b0:	44b8      	add	r8, r7
    55b2:	44c4      	add	ip, r8
    55b4:	4463      	add	r3, ip
    55b6:	781b      	ldrb	r3, [r3, #0]
    55b8:	2b00      	cmp	r3, #0
    55ba:	d101      	bne.n	55c0 <processOnSMS+0xa68>
    55bc:	f001 f9c8 	bl	6950 <processOnSMS+0x1df8>
				{
					sprintf(resep_msg,"FDBK : %d", fdbkValue);
    55c0:	2326      	movs	r3, #38	; 0x26
    55c2:	33ff      	adds	r3, #255	; 0xff
    55c4:	2208      	movs	r2, #8
    55c6:	4694      	mov	ip, r2
    55c8:	44bc      	add	ip, r7
    55ca:	4463      	add	r3, ip
    55cc:	781a      	ldrb	r2, [r3, #0]
    55ce:	497b      	ldr	r1, [pc, #492]	; (57bc <processOnSMS+0xc64>)
    55d0:	230c      	movs	r3, #12
    55d2:	2008      	movs	r0, #8
    55d4:	4684      	mov	ip, r0
    55d6:	44bc      	add	ip, r7
    55d8:	4463      	add	r3, ip
    55da:	0018      	movs	r0, r3
    55dc:	4b78      	ldr	r3, [pc, #480]	; (57c0 <processOnSMS+0xc68>)
    55de:	4798      	blx	r3
    55e0:	f001 f9b6 	bl	6950 <processOnSMS+0x1df8>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"RESP"))
    55e4:	4a77      	ldr	r2, [pc, #476]	; (57c4 <processOnSMS+0xc6c>)
    55e6:	68fb      	ldr	r3, [r7, #12]
    55e8:	0011      	movs	r1, r2
    55ea:	0018      	movs	r0, r3
    55ec:	4b66      	ldr	r3, [pc, #408]	; (5788 <processOnSMS+0xc30>)
    55ee:	4798      	blx	r3
    55f0:	1e03      	subs	r3, r0, #0
    55f2:	d06c      	beq.n	56ce <processOnSMS+0xb76>
	{
		if (strlen(received_command)>4)
    55f4:	68fb      	ldr	r3, [r7, #12]
    55f6:	0018      	movs	r0, r3
    55f8:	4b64      	ldr	r3, [pc, #400]	; (578c <processOnSMS+0xc34>)
    55fa:	4798      	blx	r3
    55fc:	0003      	movs	r3, r0
    55fe:	2b04      	cmp	r3, #4
    5600:	d801      	bhi.n	5606 <processOnSMS+0xaae>
    5602:	f001 f9a5 	bl	6950 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+4,strlen(received_command));
    5606:	68fb      	ldr	r3, [r7, #12]
    5608:	1d1c      	adds	r4, r3, #4
    560a:	68fb      	ldr	r3, [r7, #12]
    560c:	0018      	movs	r0, r3
    560e:	4b5f      	ldr	r3, [pc, #380]	; (578c <processOnSMS+0xc34>)
    5610:	4798      	blx	r3
    5612:	0002      	movs	r2, r0
    5614:	68fb      	ldr	r3, [r7, #12]
    5616:	0021      	movs	r1, r4
    5618:	0018      	movs	r0, r3
    561a:	4b5d      	ldr	r3, [pc, #372]	; (5790 <processOnSMS+0xc38>)
    561c:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
    561e:	68fb      	ldr	r3, [r7, #12]
    5620:	781b      	ldrb	r3, [r3, #0]
    5622:	2b43      	cmp	r3, #67	; 0x43
    5624:	d00d      	beq.n	5642 <processOnSMS+0xaea>
    5626:	68fb      	ldr	r3, [r7, #12]
    5628:	781b      	ldrb	r3, [r3, #0]
    562a:	2b41      	cmp	r3, #65	; 0x41
    562c:	d009      	beq.n	5642 <processOnSMS+0xaea>
    562e:	68fb      	ldr	r3, [r7, #12]
    5630:	781b      	ldrb	r3, [r3, #0]
    5632:	2b54      	cmp	r3, #84	; 0x54
    5634:	d005      	beq.n	5642 <processOnSMS+0xaea>
    5636:	68fb      	ldr	r3, [r7, #12]
    5638:	781b      	ldrb	r3, [r3, #0]
    563a:	2b4e      	cmp	r3, #78	; 0x4e
    563c:	d001      	beq.n	5642 <processOnSMS+0xaea>
    563e:	f001 f987 	bl	6950 <processOnSMS+0x1df8>
			{
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
    5642:	68fb      	ldr	r3, [r7, #12]
    5644:	b2db      	uxtb	r3, r3
    5646:	0018      	movs	r0, r3
    5648:	4b5f      	ldr	r3, [pc, #380]	; (57c8 <processOnSMS+0xc70>)
    564a:	4798      	blx	r3
				
				incomingSMSProcessed=true;
    564c:	2328      	movs	r3, #40	; 0x28
    564e:	33ff      	adds	r3, #255	; 0xff
    5650:	2208      	movs	r2, #8
    5652:	4694      	mov	ip, r2
    5654:	44bc      	add	ip, r7
    5656:	4463      	add	r3, ip
    5658:	2201      	movs	r2, #1
    565a:	701a      	strb	r2, [r3, #0]
				
				if (response_sms_processed_cmd == true)
    565c:	4b4e      	ldr	r3, [pc, #312]	; (5798 <processOnSMS+0xc40>)
    565e:	2294      	movs	r2, #148	; 0x94
    5660:	0052      	lsls	r2, r2, #1
    5662:	4694      	mov	ip, r2
    5664:	2208      	movs	r2, #8
    5666:	4690      	mov	r8, r2
    5668:	44b8      	add	r8, r7
    566a:	44c4      	add	ip, r8
    566c:	4463      	add	r3, ip
    566e:	781b      	ldrb	r3, [r3, #0]
    5670:	2b00      	cmp	r3, #0
    5672:	d101      	bne.n	5678 <processOnSMS+0xb20>
    5674:	f001 f96c 	bl	6950 <processOnSMS+0x1df8>
				{
					strcpy(resep_msg,"RESP : ");
    5678:	230c      	movs	r3, #12
    567a:	2208      	movs	r2, #8
    567c:	4694      	mov	ip, r2
    567e:	44bc      	add	ip, r7
    5680:	4463      	add	r3, ip
    5682:	4a52      	ldr	r2, [pc, #328]	; (57cc <processOnSMS+0xc74>)
    5684:	ca03      	ldmia	r2!, {r0, r1}
    5686:	c303      	stmia	r3!, {r0, r1}
					strcat(resep_msg,received_command);
    5688:	68fa      	ldr	r2, [r7, #12]
    568a:	230c      	movs	r3, #12
    568c:	2108      	movs	r1, #8
    568e:	468c      	mov	ip, r1
    5690:	44bc      	add	ip, r7
    5692:	4463      	add	r3, ip
    5694:	0011      	movs	r1, r2
    5696:	0018      	movs	r0, r3
    5698:	4b41      	ldr	r3, [pc, #260]	; (57a0 <processOnSMS+0xc48>)
    569a:	4798      	blx	r3
					strcat(resep_msg," OK");
    569c:	230c      	movs	r3, #12
    569e:	2208      	movs	r2, #8
    56a0:	4694      	mov	ip, r2
    56a2:	44bc      	add	ip, r7
    56a4:	4463      	add	r3, ip
    56a6:	0018      	movs	r0, r3
    56a8:	4b38      	ldr	r3, [pc, #224]	; (578c <processOnSMS+0xc34>)
    56aa:	4798      	blx	r3
    56ac:	0003      	movs	r3, r0
    56ae:	001a      	movs	r2, r3
    56b0:	230c      	movs	r3, #12
    56b2:	2108      	movs	r1, #8
    56b4:	468c      	mov	ip, r1
    56b6:	44bc      	add	ip, r7
    56b8:	4463      	add	r3, ip
    56ba:	189a      	adds	r2, r3, r2
    56bc:	4b39      	ldr	r3, [pc, #228]	; (57a4 <processOnSMS+0xc4c>)
    56be:	0010      	movs	r0, r2
    56c0:	0019      	movs	r1, r3
    56c2:	2304      	movs	r3, #4
    56c4:	001a      	movs	r2, r3
    56c6:	4b38      	ldr	r3, [pc, #224]	; (57a8 <processOnSMS+0xc50>)
    56c8:	4798      	blx	r3
    56ca:	f001 f941 	bl	6950 <processOnSMS+0x1df8>
	}
	//else if (StringstartsWith(received_command,"SJMP"))
	//{
	//strcpy(resep_msg,"New hardware does not required Jumper Setting");
	//}
	else if (StringstartsWith(received_command,"OVR"))
    56ce:	4a40      	ldr	r2, [pc, #256]	; (57d0 <processOnSMS+0xc78>)
    56d0:	68fb      	ldr	r3, [r7, #12]
    56d2:	0011      	movs	r1, r2
    56d4:	0018      	movs	r0, r3
    56d6:	4b2c      	ldr	r3, [pc, #176]	; (5788 <processOnSMS+0xc30>)
    56d8:	4798      	blx	r3
    56da:	1e03      	subs	r3, r0, #0
    56dc:	d100      	bne.n	56e0 <processOnSMS+0xb88>
    56de:	e07d      	b.n	57dc <processOnSMS+0xc84>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    56e0:	68fb      	ldr	r3, [r7, #12]
    56e2:	1cdc      	adds	r4, r3, #3
    56e4:	68fb      	ldr	r3, [r7, #12]
    56e6:	0018      	movs	r0, r3
    56e8:	4b28      	ldr	r3, [pc, #160]	; (578c <processOnSMS+0xc34>)
    56ea:	4798      	blx	r3
    56ec:	0002      	movs	r2, r0
    56ee:	68fb      	ldr	r3, [r7, #12]
    56f0:	0021      	movs	r1, r4
    56f2:	0018      	movs	r0, r3
    56f4:	4b26      	ldr	r3, [pc, #152]	; (5790 <processOnSMS+0xc38>)
    56f6:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
    56f8:	68fb      	ldr	r3, [r7, #12]
    56fa:	0018      	movs	r0, r3
    56fc:	4b2c      	ldr	r3, [pc, #176]	; (57b0 <processOnSMS+0xc58>)
    56fe:	4798      	blx	r3
    5700:	0002      	movs	r2, r0
    5702:	238b      	movs	r3, #139	; 0x8b
    5704:	005b      	lsls	r3, r3, #1
    5706:	2108      	movs	r1, #8
    5708:	468c      	mov	ip, r1
    570a:	44bc      	add	ip, r7
    570c:	4463      	add	r3, ip
    570e:	701a      	strb	r2, [r3, #0]
		if(ovr_per>104)
    5710:	238b      	movs	r3, #139	; 0x8b
    5712:	005b      	lsls	r3, r3, #1
    5714:	2208      	movs	r2, #8
    5716:	4694      	mov	ip, r2
    5718:	44bc      	add	ip, r7
    571a:	4463      	add	r3, ip
    571c:	781b      	ldrb	r3, [r3, #0]
    571e:	2b68      	cmp	r3, #104	; 0x68
    5720:	d801      	bhi.n	5726 <processOnSMS+0xbce>
    5722:	f001 f915 	bl	6950 <processOnSMS+0x1df8>
		{
			setOverloadPer(ovr_per);
    5726:	238b      	movs	r3, #139	; 0x8b
    5728:	005b      	lsls	r3, r3, #1
    572a:	2208      	movs	r2, #8
    572c:	4694      	mov	ip, r2
    572e:	44bc      	add	ip, r7
    5730:	4463      	add	r3, ip
    5732:	781b      	ldrb	r3, [r3, #0]
    5734:	0018      	movs	r0, r3
    5736:	4b27      	ldr	r3, [pc, #156]	; (57d4 <processOnSMS+0xc7c>)
    5738:	4798      	blx	r3
			incomingSMSProcessed=true;
    573a:	2328      	movs	r3, #40	; 0x28
    573c:	33ff      	adds	r3, #255	; 0xff
    573e:	2208      	movs	r2, #8
    5740:	4694      	mov	ip, r2
    5742:	44bc      	add	ip, r7
    5744:	4463      	add	r3, ip
    5746:	2201      	movs	r2, #1
    5748:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
    574a:	4b13      	ldr	r3, [pc, #76]	; (5798 <processOnSMS+0xc40>)
    574c:	2294      	movs	r2, #148	; 0x94
    574e:	0052      	lsls	r2, r2, #1
    5750:	4694      	mov	ip, r2
    5752:	2208      	movs	r2, #8
    5754:	4690      	mov	r8, r2
    5756:	44b8      	add	r8, r7
    5758:	44c4      	add	ip, r8
    575a:	4463      	add	r3, ip
    575c:	781b      	ldrb	r3, [r3, #0]
    575e:	2b00      	cmp	r3, #0
    5760:	d101      	bne.n	5766 <processOnSMS+0xc0e>
    5762:	f001 f8f5 	bl	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"OVR SET OK");
    5766:	230c      	movs	r3, #12
    5768:	2208      	movs	r2, #8
    576a:	4694      	mov	ip, r2
    576c:	44bc      	add	ip, r7
    576e:	4463      	add	r3, ip
    5770:	4a19      	ldr	r2, [pc, #100]	; (57d8 <processOnSMS+0xc80>)
    5772:	ca03      	ldmia	r2!, {r0, r1}
    5774:	c303      	stmia	r3!, {r0, r1}
    5776:	8811      	ldrh	r1, [r2, #0]
    5778:	8019      	strh	r1, [r3, #0]
    577a:	7892      	ldrb	r2, [r2, #2]
    577c:	709a      	strb	r2, [r3, #2]
    577e:	f001 f8e7 	bl	6950 <processOnSMS+0x1df8>
    5782:	46c0      	nop			; (mov r8, r8)
    5784:	000190b0 	.word	0x000190b0
    5788:	00003e0d 	.word	0x00003e0d
    578c:	00017f67 	.word	0x00017f67
    5790:	00017cb3 	.word	0x00017cb3
    5794:	00001341 	.word	0x00001341
    5798:	fffffeda 	.word	0xfffffeda
    579c:	000190b4 	.word	0x000190b4
    57a0:	00017f21 	.word	0x00017f21
    57a4:	000190bc 	.word	0x000190bc
    57a8:	00017ca1 	.word	0x00017ca1
    57ac:	000190c0 	.word	0x000190c0
    57b0:	00017bbd 	.word	0x00017bbd
    57b4:	20000628 	.word	0x20000628
    57b8:	000016bd 	.word	0x000016bd
    57bc:	000190c8 	.word	0x000190c8
    57c0:	00017edd 	.word	0x00017edd
    57c4:	000190d4 	.word	0x000190d4
    57c8:	0000138d 	.word	0x0000138d
    57cc:	000190dc 	.word	0x000190dc
    57d0:	000190e4 	.word	0x000190e4
    57d4:	00001501 	.word	0x00001501
    57d8:	000190e8 	.word	0x000190e8
			}
		}
	}
	else if (StringstartsWith(received_command,"UNDR"))
    57dc:	4aee      	ldr	r2, [pc, #952]	; (5b98 <processOnSMS+0x1040>)
    57de:	68fb      	ldr	r3, [r7, #12]
    57e0:	0011      	movs	r1, r2
    57e2:	0018      	movs	r0, r3
    57e4:	4bed      	ldr	r3, [pc, #948]	; (5b9c <processOnSMS+0x1044>)
    57e6:	4798      	blx	r3
    57e8:	1e03      	subs	r3, r0, #0
    57ea:	d057      	beq.n	589c <processOnSMS+0xd44>
	{
		memmove(received_command,received_command+4,strlen(received_command));
    57ec:	68fb      	ldr	r3, [r7, #12]
    57ee:	1d1c      	adds	r4, r3, #4
    57f0:	68fb      	ldr	r3, [r7, #12]
    57f2:	0018      	movs	r0, r3
    57f4:	4bea      	ldr	r3, [pc, #936]	; (5ba0 <processOnSMS+0x1048>)
    57f6:	4798      	blx	r3
    57f8:	0002      	movs	r2, r0
    57fa:	68fb      	ldr	r3, [r7, #12]
    57fc:	0021      	movs	r1, r4
    57fe:	0018      	movs	r0, r3
    5800:	4be8      	ldr	r3, [pc, #928]	; (5ba4 <processOnSMS+0x104c>)
    5802:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
    5804:	68fb      	ldr	r3, [r7, #12]
    5806:	0018      	movs	r0, r3
    5808:	4be7      	ldr	r3, [pc, #924]	; (5ba8 <processOnSMS+0x1050>)
    580a:	4798      	blx	r3
    580c:	0002      	movs	r2, r0
    580e:	2316      	movs	r3, #22
    5810:	33ff      	adds	r3, #255	; 0xff
    5812:	2108      	movs	r1, #8
    5814:	468c      	mov	ip, r1
    5816:	44bc      	add	ip, r7
    5818:	4463      	add	r3, ip
    581a:	701a      	strb	r2, [r3, #0]
		if(undr_per<98 && undr_per>0)
    581c:	2316      	movs	r3, #22
    581e:	33ff      	adds	r3, #255	; 0xff
    5820:	2208      	movs	r2, #8
    5822:	4694      	mov	ip, r2
    5824:	44bc      	add	ip, r7
    5826:	4463      	add	r3, ip
    5828:	781b      	ldrb	r3, [r3, #0]
    582a:	2b61      	cmp	r3, #97	; 0x61
    582c:	d901      	bls.n	5832 <processOnSMS+0xcda>
    582e:	f001 f88f 	bl	6950 <processOnSMS+0x1df8>
    5832:	2316      	movs	r3, #22
    5834:	33ff      	adds	r3, #255	; 0xff
    5836:	2208      	movs	r2, #8
    5838:	4694      	mov	ip, r2
    583a:	44bc      	add	ip, r7
    583c:	4463      	add	r3, ip
    583e:	781b      	ldrb	r3, [r3, #0]
    5840:	2b00      	cmp	r3, #0
    5842:	d101      	bne.n	5848 <processOnSMS+0xcf0>
    5844:	f001 f884 	bl	6950 <processOnSMS+0x1df8>
		{

			setUnderloadPer(undr_per);
    5848:	2316      	movs	r3, #22
    584a:	33ff      	adds	r3, #255	; 0xff
    584c:	2208      	movs	r2, #8
    584e:	4694      	mov	ip, r2
    5850:	44bc      	add	ip, r7
    5852:	4463      	add	r3, ip
    5854:	781b      	ldrb	r3, [r3, #0]
    5856:	0018      	movs	r0, r3
    5858:	4bd4      	ldr	r3, [pc, #848]	; (5bac <processOnSMS+0x1054>)
    585a:	4798      	blx	r3

			incomingSMSProcessed=true;
    585c:	2328      	movs	r3, #40	; 0x28
    585e:	33ff      	adds	r3, #255	; 0xff
    5860:	2208      	movs	r2, #8
    5862:	4694      	mov	ip, r2
    5864:	44bc      	add	ip, r7
    5866:	4463      	add	r3, ip
    5868:	2201      	movs	r2, #1
    586a:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
    586c:	4bd0      	ldr	r3, [pc, #832]	; (5bb0 <processOnSMS+0x1058>)
    586e:	2294      	movs	r2, #148	; 0x94
    5870:	0052      	lsls	r2, r2, #1
    5872:	4694      	mov	ip, r2
    5874:	2208      	movs	r2, #8
    5876:	4690      	mov	r8, r2
    5878:	44b8      	add	r8, r7
    587a:	44c4      	add	ip, r8
    587c:	4463      	add	r3, ip
    587e:	781b      	ldrb	r3, [r3, #0]
    5880:	2b00      	cmp	r3, #0
    5882:	d101      	bne.n	5888 <processOnSMS+0xd30>
    5884:	f001 f864 	bl	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"UNDR SET OK");
    5888:	230c      	movs	r3, #12
    588a:	2208      	movs	r2, #8
    588c:	4694      	mov	ip, r2
    588e:	44bc      	add	ip, r7
    5890:	4463      	add	r3, ip
    5892:	4ac8      	ldr	r2, [pc, #800]	; (5bb4 <processOnSMS+0x105c>)
    5894:	ca13      	ldmia	r2!, {r0, r1, r4}
    5896:	c313      	stmia	r3!, {r0, r1, r4}
    5898:	f001 f85a 	bl	6950 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"ASTAT"))
    589c:	4ac6      	ldr	r2, [pc, #792]	; (5bb8 <processOnSMS+0x1060>)
    589e:	68fb      	ldr	r3, [r7, #12]
    58a0:	0011      	movs	r1, r2
    58a2:	0018      	movs	r0, r3
    58a4:	4bbd      	ldr	r3, [pc, #756]	; (5b9c <processOnSMS+0x1044>)
    58a6:	4798      	blx	r3
    58a8:	1e03      	subs	r3, r0, #0
    58aa:	d040      	beq.n	592e <processOnSMS+0xdd6>
	{
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
    58ac:	4bc3      	ldr	r3, [pc, #780]	; (5bbc <processOnSMS+0x1064>)
    58ae:	785b      	ldrb	r3, [r3, #1]
    58b0:	2b00      	cmp	r3, #0
    58b2:	d101      	bne.n	58b8 <processOnSMS+0xd60>
    58b4:	f001 f84c 	bl	6950 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
			Analog_Parameter_Struct.Motor_Current_IntPart,
    58b8:	4bc1      	ldr	r3, [pc, #772]	; (5bc0 <processOnSMS+0x1068>)
    58ba:	8a9b      	ldrh	r3, [r3, #20]
    58bc:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    58be:	607b      	str	r3, [r7, #4]
			Analog_Parameter_Struct.Motor_Current_DecPart,
    58c0:	4bbf      	ldr	r3, [pc, #764]	; (5bc0 <processOnSMS+0x1068>)
    58c2:	8adb      	ldrh	r3, [r3, #22]
    58c4:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    58c6:	603b      	str	r3, [r7, #0]
    58c8:	4bbe      	ldr	r3, [pc, #760]	; (5bc4 <processOnSMS+0x106c>)
    58ca:	691a      	ldr	r2, [r3, #16]
    58cc:	4bbd      	ldr	r3, [pc, #756]	; (5bc4 <processOnSMS+0x106c>)
    58ce:	6959      	ldr	r1, [r3, #20]
    58d0:	4bbc      	ldr	r3, [pc, #752]	; (5bc4 <processOnSMS+0x106c>)
    58d2:	699b      	ldr	r3, [r3, #24]
    58d4:	4698      	mov	r8, r3
			user_settings_parameter_struct.normalLoadAddress,
			user_settings_parameter_struct.overloadAddress,
			user_settings_parameter_struct.underloadAddress,
			user_settings_parameter_struct.overloadPerAddress,
    58d6:	48bb      	ldr	r0, [pc, #748]	; (5bc4 <processOnSMS+0x106c>)
    58d8:	7f40      	ldrb	r0, [r0, #29]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    58da:	0005      	movs	r5, r0
			user_settings_parameter_struct.underloadPerAddress);
    58dc:	48b9      	ldr	r0, [pc, #740]	; (5bc4 <processOnSMS+0x106c>)
    58de:	7f00      	ldrb	r0, [r0, #28]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    58e0:	0006      	movs	r6, r0
    58e2:	4cb9      	ldr	r4, [pc, #740]	; (5bc8 <processOnSMS+0x1070>)
    58e4:	200c      	movs	r0, #12
    58e6:	2308      	movs	r3, #8
    58e8:	469c      	mov	ip, r3
    58ea:	44bc      	add	ip, r7
    58ec:	4460      	add	r0, ip
    58ee:	9604      	str	r6, [sp, #16]
    58f0:	9503      	str	r5, [sp, #12]
    58f2:	4643      	mov	r3, r8
    58f4:	9302      	str	r3, [sp, #8]
    58f6:	9101      	str	r1, [sp, #4]
    58f8:	9200      	str	r2, [sp, #0]
    58fa:	683b      	ldr	r3, [r7, #0]
    58fc:	687a      	ldr	r2, [r7, #4]
    58fe:	0021      	movs	r1, r4
    5900:	4cb2      	ldr	r4, [pc, #712]	; (5bcc <processOnSMS+0x1074>)
    5902:	47a0      	blx	r4
			response_sms_processed_cmd = true;
    5904:	4baa      	ldr	r3, [pc, #680]	; (5bb0 <processOnSMS+0x1058>)
    5906:	2294      	movs	r2, #148	; 0x94
    5908:	0052      	lsls	r2, r2, #1
    590a:	4694      	mov	ip, r2
    590c:	2208      	movs	r2, #8
    590e:	4690      	mov	r8, r2
    5910:	44b8      	add	r8, r7
    5912:	44c4      	add	ip, r8
    5914:	4463      	add	r3, ip
    5916:	2201      	movs	r2, #1
    5918:	701a      	strb	r2, [r3, #0]
			incomingSMSProcessed=true;
    591a:	2328      	movs	r3, #40	; 0x28
    591c:	33ff      	adds	r3, #255	; 0xff
    591e:	2208      	movs	r2, #8
    5920:	4694      	mov	ip, r2
    5922:	44bc      	add	ip, r7
    5924:	4463      	add	r3, ip
    5926:	2201      	movs	r2, #1
    5928:	701a      	strb	r2, [r3, #0]
    592a:	f001 f811 	bl	6950 <processOnSMS+0x1df8>

		}

	}
	else if (StringstartsWith(received_command,"OVFON"))
    592e:	4aa8      	ldr	r2, [pc, #672]	; (5bd0 <processOnSMS+0x1078>)
    5930:	68fb      	ldr	r3, [r7, #12]
    5932:	0011      	movs	r1, r2
    5934:	0018      	movs	r0, r3
    5936:	4b99      	ldr	r3, [pc, #612]	; (5b9c <processOnSMS+0x1044>)
    5938:	4798      	blx	r3
    593a:	1e03      	subs	r3, r0, #0
    593c:	d032      	beq.n	59a4 <processOnSMS+0xe4c>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
    593e:	4b9f      	ldr	r3, [pc, #636]	; (5bbc <processOnSMS+0x1064>)
    5940:	795b      	ldrb	r3, [r3, #5]
    5942:	2b00      	cmp	r3, #0
    5944:	d101      	bne.n	594a <processOnSMS+0xdf2>
    5946:	f001 f803 	bl	6950 <processOnSMS+0x1df8>
    594a:	4b9c      	ldr	r3, [pc, #624]	; (5bbc <processOnSMS+0x1064>)
    594c:	78db      	ldrb	r3, [r3, #3]
    594e:	2b00      	cmp	r3, #0
    5950:	d001      	beq.n	5956 <processOnSMS+0xdfe>
    5952:	f000 fffd 	bl	6950 <processOnSMS+0x1df8>
		{
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
    5956:	2001      	movs	r0, #1
    5958:	4b9e      	ldr	r3, [pc, #632]	; (5bd4 <processOnSMS+0x107c>)
    595a:	4798      	blx	r3
			
			incomingSMSProcessed=true;
    595c:	2328      	movs	r3, #40	; 0x28
    595e:	33ff      	adds	r3, #255	; 0xff
    5960:	2208      	movs	r2, #8
    5962:	4694      	mov	ip, r2
    5964:	44bc      	add	ip, r7
    5966:	4463      	add	r3, ip
    5968:	2201      	movs	r2, #1
    596a:	701a      	strb	r2, [r3, #0]
			
			if(response_sms_processed_cmd == true)
    596c:	4b90      	ldr	r3, [pc, #576]	; (5bb0 <processOnSMS+0x1058>)
    596e:	2294      	movs	r2, #148	; 0x94
    5970:	0052      	lsls	r2, r2, #1
    5972:	4694      	mov	ip, r2
    5974:	2208      	movs	r2, #8
    5976:	4690      	mov	r8, r2
    5978:	44b8      	add	r8, r7
    597a:	44c4      	add	ip, r8
    597c:	4463      	add	r3, ip
    597e:	781b      	ldrb	r3, [r3, #0]
    5980:	2b00      	cmp	r3, #0
    5982:	d101      	bne.n	5988 <processOnSMS+0xe30>
    5984:	f000 ffe4 	bl	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
    5988:	230c      	movs	r3, #12
    598a:	2208      	movs	r2, #8
    598c:	4694      	mov	ip, r2
    598e:	44bc      	add	ip, r7
    5990:	4463      	add	r3, ip
    5992:	4a91      	ldr	r2, [pc, #580]	; (5bd8 <processOnSMS+0x1080>)
    5994:	ca13      	ldmia	r2!, {r0, r1, r4}
    5996:	c313      	stmia	r3!, {r0, r1, r4}
    5998:	ca13      	ldmia	r2!, {r0, r1, r4}
    599a:	c313      	stmia	r3!, {r0, r1, r4}
    599c:	6812      	ldr	r2, [r2, #0]
    599e:	601a      	str	r2, [r3, #0]
    59a0:	f000 ffd6 	bl	6950 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"OVFOFF"))
    59a4:	4a8d      	ldr	r2, [pc, #564]	; (5bdc <processOnSMS+0x1084>)
    59a6:	68fb      	ldr	r3, [r7, #12]
    59a8:	0011      	movs	r1, r2
    59aa:	0018      	movs	r0, r3
    59ac:	4b7b      	ldr	r3, [pc, #492]	; (5b9c <processOnSMS+0x1044>)
    59ae:	4798      	blx	r3
    59b0:	1e03      	subs	r3, r0, #0
    59b2:	d034      	beq.n	5a1e <processOnSMS+0xec6>
	{
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
    59b4:	4b81      	ldr	r3, [pc, #516]	; (5bbc <processOnSMS+0x1064>)
    59b6:	795b      	ldrb	r3, [r3, #5]
    59b8:	2b00      	cmp	r3, #0
    59ba:	d101      	bne.n	59c0 <processOnSMS+0xe68>
    59bc:	f000 ffc8 	bl	6950 <processOnSMS+0x1df8>
    59c0:	4b7e      	ldr	r3, [pc, #504]	; (5bbc <processOnSMS+0x1064>)
    59c2:	78db      	ldrb	r3, [r3, #3]
    59c4:	2b00      	cmp	r3, #0
    59c6:	d001      	beq.n	59cc <processOnSMS+0xe74>
    59c8:	f000 ffc2 	bl	6950 <processOnSMS+0x1df8>
		{
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
    59cc:	2000      	movs	r0, #0
    59ce:	4b81      	ldr	r3, [pc, #516]	; (5bd4 <processOnSMS+0x107c>)
    59d0:	4798      	blx	r3

			incomingSMSProcessed=true;
    59d2:	2328      	movs	r3, #40	; 0x28
    59d4:	33ff      	adds	r3, #255	; 0xff
    59d6:	2208      	movs	r2, #8
    59d8:	4694      	mov	ip, r2
    59da:	44bc      	add	ip, r7
    59dc:	4463      	add	r3, ip
    59de:	2201      	movs	r2, #1
    59e0:	701a      	strb	r2, [r3, #0]

			if(response_sms_processed_cmd == true)
    59e2:	4b73      	ldr	r3, [pc, #460]	; (5bb0 <processOnSMS+0x1058>)
    59e4:	2294      	movs	r2, #148	; 0x94
    59e6:	0052      	lsls	r2, r2, #1
    59e8:	4694      	mov	ip, r2
    59ea:	2208      	movs	r2, #8
    59ec:	4690      	mov	r8, r2
    59ee:	44b8      	add	r8, r7
    59f0:	44c4      	add	ip, r8
    59f2:	4463      	add	r3, ip
    59f4:	781b      	ldrb	r3, [r3, #0]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d101      	bne.n	59fe <processOnSMS+0xea6>
    59fa:	f000 ffa9 	bl	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
    59fe:	230c      	movs	r3, #12
    5a00:	2208      	movs	r2, #8
    5a02:	4694      	mov	ip, r2
    5a04:	44bc      	add	ip, r7
    5a06:	4463      	add	r3, ip
    5a08:	4a75      	ldr	r2, [pc, #468]	; (5be0 <processOnSMS+0x1088>)
    5a0a:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a0c:	c313      	stmia	r3!, {r0, r1, r4}
    5a0e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a10:	c313      	stmia	r3!, {r0, r1, r4}
    5a12:	6811      	ldr	r1, [r2, #0]
    5a14:	6019      	str	r1, [r3, #0]
    5a16:	7912      	ldrb	r2, [r2, #4]
    5a18:	711a      	strb	r2, [r3, #4]
    5a1a:	f000 ff99 	bl	6950 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MON"))
    5a1e:	4a71      	ldr	r2, [pc, #452]	; (5be4 <processOnSMS+0x108c>)
    5a20:	68fb      	ldr	r3, [r7, #12]
    5a22:	0011      	movs	r1, r2
    5a24:	0018      	movs	r0, r3
    5a26:	4b5d      	ldr	r3, [pc, #372]	; (5b9c <processOnSMS+0x1044>)
    5a28:	4798      	blx	r3
    5a2a:	1e03      	subs	r3, r0, #0
    5a2c:	d05c      	beq.n	5ae8 <processOnSMS+0xf90>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    5a2e:	4b63      	ldr	r3, [pc, #396]	; (5bbc <processOnSMS+0x1064>)
    5a30:	78db      	ldrb	r3, [r3, #3]
    5a32:	2b00      	cmp	r3, #0
    5a34:	d101      	bne.n	5a3a <processOnSMS+0xee2>
    5a36:	f000 ff8b 	bl	6950 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    5a3a:	2328      	movs	r3, #40	; 0x28
    5a3c:	33ff      	adds	r3, #255	; 0xff
    5a3e:	2208      	movs	r2, #8
    5a40:	4694      	mov	ip, r2
    5a42:	44bc      	add	ip, r7
    5a44:	4463      	add	r3, ip
    5a46:	2201      	movs	r2, #1
    5a48:	701a      	strb	r2, [r3, #0]
			
			if(m2m_Numbers_struct.m2mRemotePresent)
    5a4a:	4b67      	ldr	r3, [pc, #412]	; (5be8 <processOnSMS+0x1090>)
    5a4c:	78db      	ldrb	r3, [r3, #3]
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d02f      	beq.n	5ab2 <processOnSMS+0xf5a>
			{
				if(!m2m_Numbers_struct.m2mRemoteVerified)
    5a52:	4b65      	ldr	r3, [pc, #404]	; (5be8 <processOnSMS+0x1090>)
    5a54:	791b      	ldrb	r3, [r3, #4]
    5a56:	2b00      	cmp	r3, #0
    5a58:	d10e      	bne.n	5a78 <processOnSMS+0xf20>
				{
					response_sms_processed_cmd = false;
    5a5a:	4b55      	ldr	r3, [pc, #340]	; (5bb0 <processOnSMS+0x1058>)
    5a5c:	2294      	movs	r2, #148	; 0x94
    5a5e:	0052      	lsls	r2, r2, #1
    5a60:	4694      	mov	ip, r2
    5a62:	2208      	movs	r2, #8
    5a64:	4690      	mov	r8, r2
    5a66:	44b8      	add	r8, r7
    5a68:	44c4      	add	ip, r8
    5a6a:	4463      	add	r3, ip
    5a6c:	2200      	movs	r2, #0
    5a6e:	701a      	strb	r2, [r3, #0]
					verifyRemoteNumber();
    5a70:	4b5e      	ldr	r3, [pc, #376]	; (5bec <processOnSMS+0x1094>)
    5a72:	4798      	blx	r3
    5a74:	f000 ff6c 	bl	6950 <processOnSMS+0x1df8>
				}
				else
				{
					response_sms_processed_cmd = true;
    5a78:	4b4d      	ldr	r3, [pc, #308]	; (5bb0 <processOnSMS+0x1058>)
    5a7a:	2294      	movs	r2, #148	; 0x94
    5a7c:	0052      	lsls	r2, r2, #1
    5a7e:	4694      	mov	ip, r2
    5a80:	2208      	movs	r2, #8
    5a82:	4690      	mov	r8, r2
    5a84:	44b8      	add	r8, r7
    5a86:	44c4      	add	ip, r8
    5a88:	4463      	add	r3, ip
    5a8a:	2201      	movs	r2, #1
    5a8c:	701a      	strb	r2, [r3, #0]
					strcpy(resep_msg,"M2M Turned On, Remote Number Already Verified");
    5a8e:	230c      	movs	r3, #12
    5a90:	2208      	movs	r2, #8
    5a92:	4694      	mov	ip, r2
    5a94:	44bc      	add	ip, r7
    5a96:	4463      	add	r3, ip
    5a98:	4a55      	ldr	r2, [pc, #340]	; (5bf0 <processOnSMS+0x1098>)
    5a9a:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a9c:	c313      	stmia	r3!, {r0, r1, r4}
    5a9e:	ca13      	ldmia	r2!, {r0, r1, r4}
    5aa0:	c313      	stmia	r3!, {r0, r1, r4}
    5aa2:	ca13      	ldmia	r2!, {r0, r1, r4}
    5aa4:	c313      	stmia	r3!, {r0, r1, r4}
    5aa6:	ca03      	ldmia	r2!, {r0, r1}
    5aa8:	c303      	stmia	r3!, {r0, r1}
    5aaa:	8812      	ldrh	r2, [r2, #0]
    5aac:	801a      	strh	r2, [r3, #0]
    5aae:	f000 ff4f 	bl	6950 <processOnSMS+0x1df8>
				}
			}
			else
			{
				response_sms_processed_cmd=true;
    5ab2:	4b3f      	ldr	r3, [pc, #252]	; (5bb0 <processOnSMS+0x1058>)
    5ab4:	2294      	movs	r2, #148	; 0x94
    5ab6:	0052      	lsls	r2, r2, #1
    5ab8:	4694      	mov	ip, r2
    5aba:	2208      	movs	r2, #8
    5abc:	4690      	mov	r8, r2
    5abe:	44b8      	add	r8, r7
    5ac0:	44c4      	add	ip, r8
    5ac2:	4463      	add	r3, ip
    5ac4:	2201      	movs	r2, #1
    5ac6:	701a      	strb	r2, [r3, #0]
				strcpy(resep_msg,"Error: M2M Remote Number Not Present");
    5ac8:	230c      	movs	r3, #12
    5aca:	2208      	movs	r2, #8
    5acc:	4694      	mov	ip, r2
    5ace:	44bc      	add	ip, r7
    5ad0:	4463      	add	r3, ip
    5ad2:	4a48      	ldr	r2, [pc, #288]	; (5bf4 <processOnSMS+0x109c>)
    5ad4:	ca13      	ldmia	r2!, {r0, r1, r4}
    5ad6:	c313      	stmia	r3!, {r0, r1, r4}
    5ad8:	ca13      	ldmia	r2!, {r0, r1, r4}
    5ada:	c313      	stmia	r3!, {r0, r1, r4}
    5adc:	ca13      	ldmia	r2!, {r0, r1, r4}
    5ade:	c313      	stmia	r3!, {r0, r1, r4}
    5ae0:	7812      	ldrb	r2, [r2, #0]
    5ae2:	701a      	strb	r2, [r3, #0]
    5ae4:	f000 ff34 	bl	6950 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"M2MOFF"))
    5ae8:	4a43      	ldr	r2, [pc, #268]	; (5bf8 <processOnSMS+0x10a0>)
    5aea:	68fb      	ldr	r3, [r7, #12]
    5aec:	0011      	movs	r1, r2
    5aee:	0018      	movs	r0, r3
    5af0:	4b2a      	ldr	r3, [pc, #168]	; (5b9c <processOnSMS+0x1044>)
    5af2:	4798      	blx	r3
    5af4:	1e03      	subs	r3, r0, #0
    5af6:	d02a      	beq.n	5b4e <processOnSMS+0xff6>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    5af8:	4b30      	ldr	r3, [pc, #192]	; (5bbc <processOnSMS+0x1064>)
    5afa:	78db      	ldrb	r3, [r3, #3]
    5afc:	2b00      	cmp	r3, #0
    5afe:	d101      	bne.n	5b04 <processOnSMS+0xfac>
    5b00:	f000 ff26 	bl	6950 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    5b04:	2328      	movs	r3, #40	; 0x28
    5b06:	33ff      	adds	r3, #255	; 0xff
    5b08:	2208      	movs	r2, #8
    5b0a:	4694      	mov	ip, r2
    5b0c:	44bc      	add	ip, r7
    5b0e:	4463      	add	r3, ip
    5b10:	2201      	movs	r2, #1
    5b12:	701a      	strb	r2, [r3, #0]
			
			saveM2MSettings(false);
    5b14:	2000      	movs	r0, #0
    5b16:	4b39      	ldr	r3, [pc, #228]	; (5bfc <processOnSMS+0x10a4>)
    5b18:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
    5b1a:	4b25      	ldr	r3, [pc, #148]	; (5bb0 <processOnSMS+0x1058>)
    5b1c:	2294      	movs	r2, #148	; 0x94
    5b1e:	0052      	lsls	r2, r2, #1
    5b20:	4694      	mov	ip, r2
    5b22:	2208      	movs	r2, #8
    5b24:	4690      	mov	r8, r2
    5b26:	44b8      	add	r8, r7
    5b28:	44c4      	add	ip, r8
    5b2a:	4463      	add	r3, ip
    5b2c:	781b      	ldrb	r3, [r3, #0]
    5b2e:	2b00      	cmp	r3, #0
    5b30:	d101      	bne.n	5b36 <processOnSMS+0xfde>
    5b32:	f000 ff0d 	bl	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"M2M SETTING OFF");
    5b36:	230c      	movs	r3, #12
    5b38:	2208      	movs	r2, #8
    5b3a:	4694      	mov	ip, r2
    5b3c:	44bc      	add	ip, r7
    5b3e:	4463      	add	r3, ip
    5b40:	4a2f      	ldr	r2, [pc, #188]	; (5c00 <processOnSMS+0x10a8>)
    5b42:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b44:	c313      	stmia	r3!, {r0, r1, r4}
    5b46:	6812      	ldr	r2, [r2, #0]
    5b48:	601a      	str	r2, [r3, #0]
    5b4a:	f000 ff01 	bl	6950 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"STATUS"))
    5b4e:	4a2d      	ldr	r2, [pc, #180]	; (5c04 <processOnSMS+0x10ac>)
    5b50:	68fb      	ldr	r3, [r7, #12]
    5b52:	0011      	movs	r1, r2
    5b54:	0018      	movs	r0, r3
    5b56:	4b11      	ldr	r3, [pc, #68]	; (5b9c <processOnSMS+0x1044>)
    5b58:	4798      	blx	r3
    5b5a:	1e03      	subs	r3, r0, #0
    5b5c:	d056      	beq.n	5c0c <processOnSMS+0x10b4>
	{
		incomingSMSProcessed=true;
    5b5e:	2328      	movs	r3, #40	; 0x28
    5b60:	33ff      	adds	r3, #255	; 0xff
    5b62:	2208      	movs	r2, #8
    5b64:	4694      	mov	ip, r2
    5b66:	44bc      	add	ip, r7
    5b68:	4463      	add	r3, ip
    5b6a:	2201      	movs	r2, #1
    5b6c:	701a      	strb	r2, [r3, #0]
		response_sms_processed_cmd=true;
    5b6e:	4b10      	ldr	r3, [pc, #64]	; (5bb0 <processOnSMS+0x1058>)
    5b70:	2294      	movs	r2, #148	; 0x94
    5b72:	0052      	lsls	r2, r2, #1
    5b74:	4694      	mov	ip, r2
    5b76:	2208      	movs	r2, #8
    5b78:	4690      	mov	r8, r2
    5b7a:	44b8      	add	r8, r7
    5b7c:	44c4      	add	ip, r8
    5b7e:	4463      	add	r3, ip
    5b80:	2201      	movs	r2, #1
    5b82:	701a      	strb	r2, [r3, #0]
		
		buildStatusMessage(&resep_msg);
    5b84:	230c      	movs	r3, #12
    5b86:	2208      	movs	r2, #8
    5b88:	4694      	mov	ip, r2
    5b8a:	44bc      	add	ip, r7
    5b8c:	4463      	add	r3, ip
    5b8e:	0018      	movs	r0, r3
    5b90:	4b1d      	ldr	r3, [pc, #116]	; (5c08 <processOnSMS+0x10b0>)
    5b92:	4798      	blx	r3
    5b94:	f000 fedc 	bl	6950 <processOnSMS+0x1df8>
    5b98:	000190f4 	.word	0x000190f4
    5b9c:	00003e0d 	.word	0x00003e0d
    5ba0:	00017f67 	.word	0x00017f67
    5ba4:	00017cb3 	.word	0x00017cb3
    5ba8:	00017bbd 	.word	0x00017bbd
    5bac:	00001569 	.word	0x00001569
    5bb0:	fffffeda 	.word	0xfffffeda
    5bb4:	000190fc 	.word	0x000190fc
    5bb8:	00019108 	.word	0x00019108
    5bbc:	20000628 	.word	0x20000628
    5bc0:	200006dc 	.word	0x200006dc
    5bc4:	2000065c 	.word	0x2000065c
    5bc8:	00019110 	.word	0x00019110
    5bcc:	00017edd 	.word	0x00017edd
    5bd0:	00019134 	.word	0x00019134
    5bd4:	000014b5 	.word	0x000014b5
    5bd8:	0001913c 	.word	0x0001913c
    5bdc:	00019158 	.word	0x00019158
    5be0:	00019160 	.word	0x00019160
    5be4:	00019180 	.word	0x00019180
    5be8:	20000554 	.word	0x20000554
    5bec:	00006c25 	.word	0x00006c25
    5bf0:	00019188 	.word	0x00019188
    5bf4:	000191b8 	.word	0x000191b8
    5bf8:	000191e0 	.word	0x000191e0
    5bfc:	00000be5 	.word	0x00000be5
    5c00:	000191e8 	.word	0x000191e8
    5c04:	000191f8 	.word	0x000191f8
    5c08:	00006a19 	.word	0x00006a19
	}
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
    5c0c:	4a87      	ldr	r2, [pc, #540]	; (5e2c <processOnSMS+0x12d4>)
    5c0e:	68fb      	ldr	r3, [r7, #12]
    5c10:	0011      	movs	r1, r2
    5c12:	0018      	movs	r0, r3
    5c14:	4b86      	ldr	r3, [pc, #536]	; (5e30 <processOnSMS+0x12d8>)
    5c16:	4798      	blx	r3
    5c18:	1e03      	subs	r3, r0, #0
    5c1a:	d05e      	beq.n	5cda <processOnSMS+0x1182>
    5c1c:	4b85      	ldr	r3, [pc, #532]	; (5e34 <processOnSMS+0x12dc>)
    5c1e:	2294      	movs	r2, #148	; 0x94
    5c20:	0052      	lsls	r2, r2, #1
    5c22:	4694      	mov	ip, r2
    5c24:	2208      	movs	r2, #8
    5c26:	4690      	mov	r8, r2
    5c28:	44b8      	add	r8, r7
    5c2a:	44c4      	add	ip, r8
    5c2c:	4463      	add	r3, ip
    5c2e:	781b      	ldrb	r3, [r3, #0]
    5c30:	2b00      	cmp	r3, #0
    5c32:	d10b      	bne.n	5c4c <processOnSMS+0x10f4>
    5c34:	4b80      	ldr	r3, [pc, #512]	; (5e38 <processOnSMS+0x12e0>)
    5c36:	2294      	movs	r2, #148	; 0x94
    5c38:	0052      	lsls	r2, r2, #1
    5c3a:	4694      	mov	ip, r2
    5c3c:	2208      	movs	r2, #8
    5c3e:	4690      	mov	r8, r2
    5c40:	44b8      	add	r8, r7
    5c42:	44c4      	add	ip, r8
    5c44:	4463      	add	r3, ip
    5c46:	781b      	ldrb	r3, [r3, #0]
    5c48:	2b00      	cmp	r3, #0
    5c4a:	d046      	beq.n	5cda <processOnSMS+0x1182>
	{
		incomingSMSProcessed=true;
    5c4c:	2328      	movs	r3, #40	; 0x28
    5c4e:	33ff      	adds	r3, #255	; 0xff
    5c50:	2208      	movs	r2, #8
    5c52:	4694      	mov	ip, r2
    5c54:	44bc      	add	ip, r7
    5c56:	4463      	add	r3, ip
    5c58:	2201      	movs	r2, #1
    5c5a:	701a      	strb	r2, [r3, #0]
		
		if (alternateNumber_struct.alterNumberPresent)
    5c5c:	4b77      	ldr	r3, [pc, #476]	; (5e3c <processOnSMS+0x12e4>)
    5c5e:	789b      	ldrb	r3, [r3, #2]
    5c60:	2b00      	cmp	r3, #0
    5c62:	d01c      	beq.n	5c9e <processOnSMS+0x1146>
		{
			saveAlterNumberSetting(true);
    5c64:	2001      	movs	r0, #1
    5c66:	4b76      	ldr	r3, [pc, #472]	; (5e40 <processOnSMS+0x12e8>)
    5c68:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
    5c6a:	4b76      	ldr	r3, [pc, #472]	; (5e44 <processOnSMS+0x12ec>)
    5c6c:	2294      	movs	r2, #148	; 0x94
    5c6e:	0052      	lsls	r2, r2, #1
    5c70:	4694      	mov	ip, r2
    5c72:	2208      	movs	r2, #8
    5c74:	4690      	mov	r8, r2
    5c76:	44b8      	add	r8, r7
    5c78:	44c4      	add	ip, r8
    5c7a:	4463      	add	r3, ip
    5c7c:	781b      	ldrb	r3, [r3, #0]
    5c7e:	2b00      	cmp	r3, #0
    5c80:	d101      	bne.n	5c86 <processOnSMS+0x112e>
    5c82:	f000 fe64 	bl	694e <processOnSMS+0x1df6>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
    5c86:	230c      	movs	r3, #12
    5c88:	2208      	movs	r2, #8
    5c8a:	4694      	mov	ip, r2
    5c8c:	44bc      	add	ip, r7
    5c8e:	4463      	add	r3, ip
    5c90:	4a6d      	ldr	r2, [pc, #436]	; (5e48 <processOnSMS+0x12f0>)
    5c92:	ca13      	ldmia	r2!, {r0, r1, r4}
    5c94:	c313      	stmia	r3!, {r0, r1, r4}
    5c96:	ca03      	ldmia	r2!, {r0, r1}
    5c98:	c303      	stmia	r3!, {r0, r1}
		if (alternateNumber_struct.alterNumberPresent)
    5c9a:	f000 fe58 	bl	694e <processOnSMS+0x1df6>
			}
		}
		else
		{
			if(response_sms_processed_cmd == true)
    5c9e:	4b69      	ldr	r3, [pc, #420]	; (5e44 <processOnSMS+0x12ec>)
    5ca0:	2294      	movs	r2, #148	; 0x94
    5ca2:	0052      	lsls	r2, r2, #1
    5ca4:	4694      	mov	ip, r2
    5ca6:	2208      	movs	r2, #8
    5ca8:	4690      	mov	r8, r2
    5caa:	44b8      	add	r8, r7
    5cac:	44c4      	add	ip, r8
    5cae:	4463      	add	r3, ip
    5cb0:	781b      	ldrb	r3, [r3, #0]
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	d101      	bne.n	5cba <processOnSMS+0x1162>
    5cb6:	f000 fe4a 	bl	694e <processOnSMS+0x1df6>
			{
				strcpy(resep_msg,"ALTERNATE NUMBER NOT PRESENT");
    5cba:	230c      	movs	r3, #12
    5cbc:	2208      	movs	r2, #8
    5cbe:	4694      	mov	ip, r2
    5cc0:	44bc      	add	ip, r7
    5cc2:	4463      	add	r3, ip
    5cc4:	4a61      	ldr	r2, [pc, #388]	; (5e4c <processOnSMS+0x12f4>)
    5cc6:	ca13      	ldmia	r2!, {r0, r1, r4}
    5cc8:	c313      	stmia	r3!, {r0, r1, r4}
    5cca:	ca13      	ldmia	r2!, {r0, r1, r4}
    5ccc:	c313      	stmia	r3!, {r0, r1, r4}
    5cce:	6811      	ldr	r1, [r2, #0]
    5cd0:	6019      	str	r1, [r3, #0]
    5cd2:	7912      	ldrb	r2, [r2, #4]
    5cd4:	711a      	strb	r2, [r3, #4]
		if (alternateNumber_struct.alterNumberPresent)
    5cd6:	f000 fe3a 	bl	694e <processOnSMS+0x1df6>
			}
		}
	}
	else if (StringstartsWith(received_command,"AMOFF"))
    5cda:	4a5d      	ldr	r2, [pc, #372]	; (5e50 <processOnSMS+0x12f8>)
    5cdc:	68fb      	ldr	r3, [r7, #12]
    5cde:	0011      	movs	r1, r2
    5ce0:	0018      	movs	r0, r3
    5ce2:	4b53      	ldr	r3, [pc, #332]	; (5e30 <processOnSMS+0x12d8>)
    5ce4:	4798      	blx	r3
    5ce6:	1e03      	subs	r3, r0, #0
    5ce8:	d026      	beq.n	5d38 <processOnSMS+0x11e0>
	{
		saveAlterNumberSetting(false);
    5cea:	2000      	movs	r0, #0
    5cec:	4b54      	ldr	r3, [pc, #336]	; (5e40 <processOnSMS+0x12e8>)
    5cee:	4798      	blx	r3
		incomingSMSProcessed=true;
    5cf0:	2328      	movs	r3, #40	; 0x28
    5cf2:	33ff      	adds	r3, #255	; 0xff
    5cf4:	2208      	movs	r2, #8
    5cf6:	4694      	mov	ip, r2
    5cf8:	44bc      	add	ip, r7
    5cfa:	4463      	add	r3, ip
    5cfc:	2201      	movs	r2, #1
    5cfe:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    5d00:	4b50      	ldr	r3, [pc, #320]	; (5e44 <processOnSMS+0x12ec>)
    5d02:	2294      	movs	r2, #148	; 0x94
    5d04:	0052      	lsls	r2, r2, #1
    5d06:	4694      	mov	ip, r2
    5d08:	2208      	movs	r2, #8
    5d0a:	4690      	mov	r8, r2
    5d0c:	44b8      	add	r8, r7
    5d0e:	44c4      	add	ip, r8
    5d10:	4463      	add	r3, ip
    5d12:	781b      	ldrb	r3, [r3, #0]
    5d14:	2b00      	cmp	r3, #0
    5d16:	d101      	bne.n	5d1c <processOnSMS+0x11c4>
    5d18:	f000 fe1a 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
    5d1c:	230c      	movs	r3, #12
    5d1e:	2208      	movs	r2, #8
    5d20:	4694      	mov	ip, r2
    5d22:	44bc      	add	ip, r7
    5d24:	4463      	add	r3, ip
    5d26:	4a4b      	ldr	r2, [pc, #300]	; (5e54 <processOnSMS+0x12fc>)
    5d28:	ca13      	ldmia	r2!, {r0, r1, r4}
    5d2a:	c313      	stmia	r3!, {r0, r1, r4}
    5d2c:	ca13      	ldmia	r2!, {r0, r1, r4}
    5d2e:	c313      	stmia	r3!, {r0, r1, r4}
    5d30:	6812      	ldr	r2, [r2, #0]
    5d32:	601a      	str	r2, [r3, #0]
    5d34:	f000 fe0c 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"NCOFF"))
    5d38:	4a47      	ldr	r2, [pc, #284]	; (5e58 <processOnSMS+0x1300>)
    5d3a:	68fb      	ldr	r3, [r7, #12]
    5d3c:	0011      	movs	r1, r2
    5d3e:	0018      	movs	r0, r3
    5d40:	4b3b      	ldr	r3, [pc, #236]	; (5e30 <processOnSMS+0x12d8>)
    5d42:	4798      	blx	r3
    5d44:	1e03      	subs	r3, r0, #0
    5d46:	d029      	beq.n	5d9c <processOnSMS+0x1244>
	{
		saveNoCallSettings(false,0,0,0,0);
    5d48:	2300      	movs	r3, #0
    5d4a:	9300      	str	r3, [sp, #0]
    5d4c:	2300      	movs	r3, #0
    5d4e:	2200      	movs	r2, #0
    5d50:	2100      	movs	r1, #0
    5d52:	2000      	movs	r0, #0
    5d54:	4c41      	ldr	r4, [pc, #260]	; (5e5c <processOnSMS+0x1304>)
    5d56:	47a0      	blx	r4
		incomingSMSProcessed=true;
    5d58:	2328      	movs	r3, #40	; 0x28
    5d5a:	33ff      	adds	r3, #255	; 0xff
    5d5c:	2208      	movs	r2, #8
    5d5e:	4694      	mov	ip, r2
    5d60:	44bc      	add	ip, r7
    5d62:	4463      	add	r3, ip
    5d64:	2201      	movs	r2, #1
    5d66:	701a      	strb	r2, [r3, #0]

		if (response_sms_processed_cmd == true)
    5d68:	4b36      	ldr	r3, [pc, #216]	; (5e44 <processOnSMS+0x12ec>)
    5d6a:	2294      	movs	r2, #148	; 0x94
    5d6c:	0052      	lsls	r2, r2, #1
    5d6e:	4694      	mov	ip, r2
    5d70:	2208      	movs	r2, #8
    5d72:	4690      	mov	r8, r2
    5d74:	44b8      	add	r8, r7
    5d76:	44c4      	add	ip, r8
    5d78:	4463      	add	r3, ip
    5d7a:	781b      	ldrb	r3, [r3, #0]
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	d101      	bne.n	5d84 <processOnSMS+0x122c>
    5d80:	f000 fde6 	bl	6950 <processOnSMS+0x1df8>
		{
			strcpy(resep_msg,"NO CALL SETTING OFF");
    5d84:	230c      	movs	r3, #12
    5d86:	2208      	movs	r2, #8
    5d88:	4694      	mov	ip, r2
    5d8a:	44bc      	add	ip, r7
    5d8c:	4463      	add	r3, ip
    5d8e:	4a34      	ldr	r2, [pc, #208]	; (5e60 <processOnSMS+0x1308>)
    5d90:	ca13      	ldmia	r2!, {r0, r1, r4}
    5d92:	c313      	stmia	r3!, {r0, r1, r4}
    5d94:	ca03      	ldmia	r2!, {r0, r1}
    5d96:	c303      	stmia	r3!, {r0, r1}
    5d98:	f000 fdda 	bl	6950 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"GETTIME"))
    5d9c:	4a31      	ldr	r2, [pc, #196]	; (5e64 <processOnSMS+0x130c>)
    5d9e:	68fb      	ldr	r3, [r7, #12]
    5da0:	0011      	movs	r1, r2
    5da2:	0018      	movs	r0, r3
    5da4:	4b22      	ldr	r3, [pc, #136]	; (5e30 <processOnSMS+0x12d8>)
    5da6:	4798      	blx	r3
    5da8:	1e03      	subs	r3, r0, #0
    5daa:	d067      	beq.n	5e7c <processOnSMS+0x1324>
	{
		uint8_t globalHours,globalMinutes;
		getSystemTime(&globalHours,&globalMinutes);
    5dac:	230a      	movs	r3, #10
    5dae:	2208      	movs	r2, #8
    5db0:	18ba      	adds	r2, r7, r2
    5db2:	18d2      	adds	r2, r2, r3
    5db4:	230b      	movs	r3, #11
    5db6:	2108      	movs	r1, #8
    5db8:	468c      	mov	ip, r1
    5dba:	44bc      	add	ip, r7
    5dbc:	4463      	add	r3, ip
    5dbe:	0011      	movs	r1, r2
    5dc0:	0018      	movs	r0, r3
    5dc2:	4b29      	ldr	r3, [pc, #164]	; (5e68 <processOnSMS+0x1310>)
    5dc4:	4798      	blx	r3
		
		sprintf(resep_msg,"TIME : %u:%u",
    5dc6:	4b29      	ldr	r3, [pc, #164]	; (5e6c <processOnSMS+0x1314>)
    5dc8:	2294      	movs	r2, #148	; 0x94
    5dca:	0052      	lsls	r2, r2, #1
    5dcc:	4694      	mov	ip, r2
    5dce:	2208      	movs	r2, #8
    5dd0:	4690      	mov	r8, r2
    5dd2:	44b8      	add	r8, r7
    5dd4:	44c4      	add	ip, r8
    5dd6:	4463      	add	r3, ip
    5dd8:	781b      	ldrb	r3, [r3, #0]
    5dda:	001a      	movs	r2, r3
    5ddc:	4b24      	ldr	r3, [pc, #144]	; (5e70 <processOnSMS+0x1318>)
    5dde:	2194      	movs	r1, #148	; 0x94
    5de0:	0049      	lsls	r1, r1, #1
    5de2:	468c      	mov	ip, r1
    5de4:	2108      	movs	r1, #8
    5de6:	4688      	mov	r8, r1
    5de8:	44b8      	add	r8, r7
    5dea:	44c4      	add	ip, r8
    5dec:	4463      	add	r3, ip
    5dee:	781b      	ldrb	r3, [r3, #0]
    5df0:	4920      	ldr	r1, [pc, #128]	; (5e74 <processOnSMS+0x131c>)
    5df2:	200c      	movs	r0, #12
    5df4:	2408      	movs	r4, #8
    5df6:	46a4      	mov	ip, r4
    5df8:	44bc      	add	ip, r7
    5dfa:	4460      	add	r0, ip
    5dfc:	4c1e      	ldr	r4, [pc, #120]	; (5e78 <processOnSMS+0x1320>)
    5dfe:	47a0      	blx	r4
		globalHours,globalMinutes);

		incomingSMSProcessed=true;
    5e00:	2328      	movs	r3, #40	; 0x28
    5e02:	33ff      	adds	r3, #255	; 0xff
    5e04:	2208      	movs	r2, #8
    5e06:	4694      	mov	ip, r2
    5e08:	44bc      	add	ip, r7
    5e0a:	4463      	add	r3, ip
    5e0c:	2201      	movs	r2, #1
    5e0e:	701a      	strb	r2, [r3, #0]

		response_sms_processed_cmd = true;
    5e10:	4b0c      	ldr	r3, [pc, #48]	; (5e44 <processOnSMS+0x12ec>)
    5e12:	2294      	movs	r2, #148	; 0x94
    5e14:	0052      	lsls	r2, r2, #1
    5e16:	4694      	mov	ip, r2
    5e18:	2208      	movs	r2, #8
    5e1a:	4690      	mov	r8, r2
    5e1c:	44b8      	add	r8, r7
    5e1e:	44c4      	add	ip, r8
    5e20:	4463      	add	r3, ip
    5e22:	2201      	movs	r2, #1
    5e24:	701a      	strb	r2, [r3, #0]
    5e26:	f000 fd93 	bl	6950 <processOnSMS+0x1df8>
    5e2a:	46c0      	nop			; (mov r8, r8)
    5e2c:	00018f10 	.word	0x00018f10
    5e30:	00003e0d 	.word	0x00003e0d
    5e34:	fffffedb 	.word	0xfffffedb
    5e38:	fffffed9 	.word	0xfffffed9
    5e3c:	20000644 	.word	0x20000644
    5e40:	000011e9 	.word	0x000011e9
    5e44:	fffffeda 	.word	0xfffffeda
    5e48:	00019200 	.word	0x00019200
    5e4c:	00019214 	.word	0x00019214
    5e50:	00019234 	.word	0x00019234
    5e54:	0001923c 	.word	0x0001923c
    5e58:	00019258 	.word	0x00019258
    5e5c:	000013d9 	.word	0x000013d9
    5e60:	00019260 	.word	0x00019260
    5e64:	00019274 	.word	0x00019274
    5e68:	00006e5d 	.word	0x00006e5d
    5e6c:	fffffee3 	.word	0xfffffee3
    5e70:	fffffee2 	.word	0xfffffee2
    5e74:	0001927c 	.word	0x0001927c
    5e78:	00017edd 	.word	0x00017edd
	}
	else if (StringstartsWith(received_command,"SETTIME"))
    5e7c:	4ada      	ldr	r2, [pc, #872]	; (61e8 <processOnSMS+0x1690>)
    5e7e:	68fb      	ldr	r3, [r7, #12]
    5e80:	0011      	movs	r1, r2
    5e82:	0018      	movs	r0, r3
    5e84:	4bd9      	ldr	r3, [pc, #868]	; (61ec <processOnSMS+0x1694>)
    5e86:	4798      	blx	r3
    5e88:	1e03      	subs	r3, r0, #0
    5e8a:	d001      	beq.n	5e90 <processOnSMS+0x1338>
    5e8c:	f000 fd60 	bl	6950 <processOnSMS+0x1df8>
		//todo: implement
		//set internal RTC of Either MCU or SIM800 to check no call time
		

	}
	else if (StringstartsWith(received_command,"NCTIME"))
    5e90:	4ad7      	ldr	r2, [pc, #860]	; (61f0 <processOnSMS+0x1698>)
    5e92:	68fb      	ldr	r3, [r7, #12]
    5e94:	0011      	movs	r1, r2
    5e96:	0018      	movs	r0, r3
    5e98:	4bd4      	ldr	r3, [pc, #848]	; (61ec <processOnSMS+0x1694>)
    5e9a:	4798      	blx	r3
    5e9c:	1e03      	subs	r3, r0, #0
    5e9e:	d100      	bne.n	5ea2 <processOnSMS+0x134a>
    5ea0:	e13c      	b.n	611c <processOnSMS+0x15c4>
	{
		char *ptrclcc;
		uint8_t startHH, startMM, stopHH, stopMM;

		ptrclcc = strtok(received_command,"-");
    5ea2:	4ad4      	ldr	r2, [pc, #848]	; (61f4 <processOnSMS+0x169c>)
    5ea4:	68fb      	ldr	r3, [r7, #12]
    5ea6:	0011      	movs	r1, r2
    5ea8:	0018      	movs	r0, r3
    5eaa:	4bd3      	ldr	r3, [pc, #844]	; (61f8 <processOnSMS+0x16a0>)
    5eac:	4798      	blx	r3
    5eae:	0003      	movs	r3, r0
    5eb0:	2288      	movs	r2, #136	; 0x88
    5eb2:	0052      	lsls	r2, r2, #1
    5eb4:	2108      	movs	r1, #8
    5eb6:	468c      	mov	ip, r1
    5eb8:	44bc      	add	ip, r7
    5eba:	4462      	add	r2, ip
    5ebc:	6013      	str	r3, [r2, #0]
		ptrclcc = strtok(NULL,":");
    5ebe:	4bcf      	ldr	r3, [pc, #828]	; (61fc <processOnSMS+0x16a4>)
    5ec0:	0019      	movs	r1, r3
    5ec2:	2000      	movs	r0, #0
    5ec4:	4bcc      	ldr	r3, [pc, #816]	; (61f8 <processOnSMS+0x16a0>)
    5ec6:	4798      	blx	r3
    5ec8:	0003      	movs	r3, r0
    5eca:	2288      	movs	r2, #136	; 0x88
    5ecc:	0052      	lsls	r2, r2, #1
    5ece:	2108      	movs	r1, #8
    5ed0:	468c      	mov	ip, r1
    5ed2:	44bc      	add	ip, r7
    5ed4:	4462      	add	r2, ip
    5ed6:	6013      	str	r3, [r2, #0]
		startHH=atoi(*ptrclcc);
    5ed8:	2388      	movs	r3, #136	; 0x88
    5eda:	005b      	lsls	r3, r3, #1
    5edc:	2208      	movs	r2, #8
    5ede:	4694      	mov	ip, r2
    5ee0:	44bc      	add	ip, r7
    5ee2:	4463      	add	r3, ip
    5ee4:	681b      	ldr	r3, [r3, #0]
    5ee6:	781b      	ldrb	r3, [r3, #0]
    5ee8:	0018      	movs	r0, r3
    5eea:	4bc5      	ldr	r3, [pc, #788]	; (6200 <processOnSMS+0x16a8>)
    5eec:	4798      	blx	r3
    5eee:	0002      	movs	r2, r0
    5ef0:	2310      	movs	r3, #16
    5ef2:	33ff      	adds	r3, #255	; 0xff
    5ef4:	2108      	movs	r1, #8
    5ef6:	468c      	mov	ip, r1
    5ef8:	44bc      	add	ip, r7
    5efa:	4463      	add	r3, ip
    5efc:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,"-");
    5efe:	4bbd      	ldr	r3, [pc, #756]	; (61f4 <processOnSMS+0x169c>)
    5f00:	0019      	movs	r1, r3
    5f02:	2000      	movs	r0, #0
    5f04:	4bbc      	ldr	r3, [pc, #752]	; (61f8 <processOnSMS+0x16a0>)
    5f06:	4798      	blx	r3
    5f08:	0003      	movs	r3, r0
    5f0a:	2288      	movs	r2, #136	; 0x88
    5f0c:	0052      	lsls	r2, r2, #1
    5f0e:	2108      	movs	r1, #8
    5f10:	468c      	mov	ip, r1
    5f12:	44bc      	add	ip, r7
    5f14:	4462      	add	r2, ip
    5f16:	6013      	str	r3, [r2, #0]
		startMM=atoi(*ptrclcc);
    5f18:	2388      	movs	r3, #136	; 0x88
    5f1a:	005b      	lsls	r3, r3, #1
    5f1c:	2208      	movs	r2, #8
    5f1e:	4694      	mov	ip, r2
    5f20:	44bc      	add	ip, r7
    5f22:	4463      	add	r3, ip
    5f24:	681b      	ldr	r3, [r3, #0]
    5f26:	781b      	ldrb	r3, [r3, #0]
    5f28:	0018      	movs	r0, r3
    5f2a:	4bb5      	ldr	r3, [pc, #724]	; (6200 <processOnSMS+0x16a8>)
    5f2c:	4798      	blx	r3
    5f2e:	0002      	movs	r2, r0
    5f30:	2387      	movs	r3, #135	; 0x87
    5f32:	005b      	lsls	r3, r3, #1
    5f34:	2108      	movs	r1, #8
    5f36:	468c      	mov	ip, r1
    5f38:	44bc      	add	ip, r7
    5f3a:	4463      	add	r3, ip
    5f3c:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
    5f3e:	4baf      	ldr	r3, [pc, #700]	; (61fc <processOnSMS+0x16a4>)
    5f40:	0019      	movs	r1, r3
    5f42:	2000      	movs	r0, #0
    5f44:	4bac      	ldr	r3, [pc, #688]	; (61f8 <processOnSMS+0x16a0>)
    5f46:	4798      	blx	r3
    5f48:	0003      	movs	r3, r0
    5f4a:	2288      	movs	r2, #136	; 0x88
    5f4c:	0052      	lsls	r2, r2, #1
    5f4e:	2108      	movs	r1, #8
    5f50:	468c      	mov	ip, r1
    5f52:	44bc      	add	ip, r7
    5f54:	4462      	add	r2, ip
    5f56:	6013      	str	r3, [r2, #0]
		stopHH=atoi(*ptrclcc);
    5f58:	2388      	movs	r3, #136	; 0x88
    5f5a:	005b      	lsls	r3, r3, #1
    5f5c:	2208      	movs	r2, #8
    5f5e:	4694      	mov	ip, r2
    5f60:	44bc      	add	ip, r7
    5f62:	4463      	add	r3, ip
    5f64:	681b      	ldr	r3, [r3, #0]
    5f66:	781b      	ldrb	r3, [r3, #0]
    5f68:	0018      	movs	r0, r3
    5f6a:	4ba5      	ldr	r3, [pc, #660]	; (6200 <processOnSMS+0x16a8>)
    5f6c:	4798      	blx	r3
    5f6e:	0002      	movs	r2, r0
    5f70:	230e      	movs	r3, #14
    5f72:	33ff      	adds	r3, #255	; 0xff
    5f74:	2108      	movs	r1, #8
    5f76:	468c      	mov	ip, r1
    5f78:	44bc      	add	ip, r7
    5f7a:	4463      	add	r3, ip
    5f7c:	701a      	strb	r2, [r3, #0]
		ptrclcc = strtok(NULL,":");
    5f7e:	4b9f      	ldr	r3, [pc, #636]	; (61fc <processOnSMS+0x16a4>)
    5f80:	0019      	movs	r1, r3
    5f82:	2000      	movs	r0, #0
    5f84:	4b9c      	ldr	r3, [pc, #624]	; (61f8 <processOnSMS+0x16a0>)
    5f86:	4798      	blx	r3
    5f88:	0003      	movs	r3, r0
    5f8a:	2288      	movs	r2, #136	; 0x88
    5f8c:	0052      	lsls	r2, r2, #1
    5f8e:	2108      	movs	r1, #8
    5f90:	468c      	mov	ip, r1
    5f92:	44bc      	add	ip, r7
    5f94:	4462      	add	r2, ip
    5f96:	6013      	str	r3, [r2, #0]
		stopMM=atoi(*ptrclcc);
    5f98:	2388      	movs	r3, #136	; 0x88
    5f9a:	005b      	lsls	r3, r3, #1
    5f9c:	2208      	movs	r2, #8
    5f9e:	4694      	mov	ip, r2
    5fa0:	44bc      	add	ip, r7
    5fa2:	4463      	add	r3, ip
    5fa4:	681b      	ldr	r3, [r3, #0]
    5fa6:	781b      	ldrb	r3, [r3, #0]
    5fa8:	0018      	movs	r0, r3
    5faa:	4b95      	ldr	r3, [pc, #596]	; (6200 <processOnSMS+0x16a8>)
    5fac:	4798      	blx	r3
    5fae:	0002      	movs	r2, r0
    5fb0:	2386      	movs	r3, #134	; 0x86
    5fb2:	005b      	lsls	r3, r3, #1
    5fb4:	2108      	movs	r1, #8
    5fb6:	468c      	mov	ip, r1
    5fb8:	44bc      	add	ip, r7
    5fba:	4463      	add	r3, ip
    5fbc:	701a      	strb	r2, [r3, #0]

		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
    5fbe:	2310      	movs	r3, #16
    5fc0:	33ff      	adds	r3, #255	; 0xff
    5fc2:	2208      	movs	r2, #8
    5fc4:	4694      	mov	ip, r2
    5fc6:	44bc      	add	ip, r7
    5fc8:	4463      	add	r3, ip
    5fca:	781b      	ldrb	r3, [r3, #0]
    5fcc:	2b17      	cmp	r3, #23
    5fce:	d901      	bls.n	5fd4 <processOnSMS+0x147c>
    5fd0:	f000 fcbe 	bl	6950 <processOnSMS+0x1df8>
    5fd4:	2387      	movs	r3, #135	; 0x87
    5fd6:	005b      	lsls	r3, r3, #1
    5fd8:	2208      	movs	r2, #8
    5fda:	4694      	mov	ip, r2
    5fdc:	44bc      	add	ip, r7
    5fde:	4463      	add	r3, ip
    5fe0:	781b      	ldrb	r3, [r3, #0]
    5fe2:	2b3b      	cmp	r3, #59	; 0x3b
    5fe4:	d901      	bls.n	5fea <processOnSMS+0x1492>
    5fe6:	f000 fcb3 	bl	6950 <processOnSMS+0x1df8>
		{
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
    5fea:	230e      	movs	r3, #14
    5fec:	33ff      	adds	r3, #255	; 0xff
    5fee:	2208      	movs	r2, #8
    5ff0:	4694      	mov	ip, r2
    5ff2:	44bc      	add	ip, r7
    5ff4:	4463      	add	r3, ip
    5ff6:	781b      	ldrb	r3, [r3, #0]
    5ff8:	2b17      	cmp	r3, #23
    5ffa:	d901      	bls.n	6000 <processOnSMS+0x14a8>
    5ffc:	f000 fca8 	bl	6950 <processOnSMS+0x1df8>
    6000:	2386      	movs	r3, #134	; 0x86
    6002:	005b      	lsls	r3, r3, #1
    6004:	2208      	movs	r2, #8
    6006:	4694      	mov	ip, r2
    6008:	44bc      	add	ip, r7
    600a:	4463      	add	r3, ip
    600c:	781b      	ldrb	r3, [r3, #0]
    600e:	2b3b      	cmp	r3, #59	; 0x3b
    6010:	d901      	bls.n	6016 <processOnSMS+0x14be>
    6012:	f000 fc9d 	bl	6950 <processOnSMS+0x1df8>
			{
				incomingSMSProcessed=true;
    6016:	2328      	movs	r3, #40	; 0x28
    6018:	33ff      	adds	r3, #255	; 0xff
    601a:	2208      	movs	r2, #8
    601c:	4694      	mov	ip, r2
    601e:	44bc      	add	ip, r7
    6020:	4463      	add	r3, ip
    6022:	2201      	movs	r2, #1
    6024:	701a      	strb	r2, [r3, #0]
				
				if(startHH==stopHH && startMM==stopMM)
    6026:	2310      	movs	r3, #16
    6028:	33ff      	adds	r3, #255	; 0xff
    602a:	2208      	movs	r2, #8
    602c:	18ba      	adds	r2, r7, r2
    602e:	18d2      	adds	r2, r2, r3
    6030:	230e      	movs	r3, #14
    6032:	33ff      	adds	r3, #255	; 0xff
    6034:	2108      	movs	r1, #8
    6036:	468c      	mov	ip, r1
    6038:	44bc      	add	ip, r7
    603a:	4463      	add	r3, ip
    603c:	7812      	ldrb	r2, [r2, #0]
    603e:	781b      	ldrb	r3, [r3, #0]
    6040:	429a      	cmp	r2, r3
    6042:	d130      	bne.n	60a6 <processOnSMS+0x154e>
    6044:	2387      	movs	r3, #135	; 0x87
    6046:	005b      	lsls	r3, r3, #1
    6048:	2208      	movs	r2, #8
    604a:	18ba      	adds	r2, r7, r2
    604c:	18d2      	adds	r2, r2, r3
    604e:	2386      	movs	r3, #134	; 0x86
    6050:	005b      	lsls	r3, r3, #1
    6052:	2108      	movs	r1, #8
    6054:	468c      	mov	ip, r1
    6056:	44bc      	add	ip, r7
    6058:	4463      	add	r3, ip
    605a:	7812      	ldrb	r2, [r2, #0]
    605c:	781b      	ldrb	r3, [r3, #0]
    605e:	429a      	cmp	r2, r3
    6060:	d121      	bne.n	60a6 <processOnSMS+0x154e>
				{
					saveNoCallSettings(false,0,0,0,0);
    6062:	2300      	movs	r3, #0
    6064:	9300      	str	r3, [sp, #0]
    6066:	2300      	movs	r3, #0
    6068:	2200      	movs	r2, #0
    606a:	2100      	movs	r1, #0
    606c:	2000      	movs	r0, #0
    606e:	4c65      	ldr	r4, [pc, #404]	; (6204 <processOnSMS+0x16ac>)
    6070:	47a0      	blx	r4
					if(response_sms_processed_cmd)
    6072:	4b65      	ldr	r3, [pc, #404]	; (6208 <processOnSMS+0x16b0>)
    6074:	2294      	movs	r2, #148	; 0x94
    6076:	0052      	lsls	r2, r2, #1
    6078:	4694      	mov	ip, r2
    607a:	2208      	movs	r2, #8
    607c:	4690      	mov	r8, r2
    607e:	44b8      	add	r8, r7
    6080:	44c4      	add	ip, r8
    6082:	4463      	add	r3, ip
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	2b00      	cmp	r3, #0
    6088:	d101      	bne.n	608e <processOnSMS+0x1536>
    608a:	f000 fc61 	bl	6950 <processOnSMS+0x1df8>
					{
						strcpy(resep_msg,"NO CALL SETTING OFF");
    608e:	230c      	movs	r3, #12
    6090:	2208      	movs	r2, #8
    6092:	4694      	mov	ip, r2
    6094:	44bc      	add	ip, r7
    6096:	4463      	add	r3, ip
    6098:	4a5c      	ldr	r2, [pc, #368]	; (620c <processOnSMS+0x16b4>)
    609a:	ca13      	ldmia	r2!, {r0, r1, r4}
    609c:	c313      	stmia	r3!, {r0, r1, r4}
    609e:	ca03      	ldmia	r2!, {r0, r1}
    60a0:	c303      	stmia	r3!, {r0, r1}
					if(response_sms_processed_cmd)
    60a2:	f000 fc55 	bl	6950 <processOnSMS+0x1df8>
					}
				}
				else
				{
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
    60a6:	230e      	movs	r3, #14
    60a8:	33ff      	adds	r3, #255	; 0xff
    60aa:	2208      	movs	r2, #8
    60ac:	4694      	mov	ip, r2
    60ae:	44bc      	add	ip, r7
    60b0:	4463      	add	r3, ip
    60b2:	7818      	ldrb	r0, [r3, #0]
    60b4:	2387      	movs	r3, #135	; 0x87
    60b6:	005b      	lsls	r3, r3, #1
    60b8:	2208      	movs	r2, #8
    60ba:	4694      	mov	ip, r2
    60bc:	44bc      	add	ip, r7
    60be:	4463      	add	r3, ip
    60c0:	781a      	ldrb	r2, [r3, #0]
    60c2:	2310      	movs	r3, #16
    60c4:	33ff      	adds	r3, #255	; 0xff
    60c6:	2108      	movs	r1, #8
    60c8:	468c      	mov	ip, r1
    60ca:	44bc      	add	ip, r7
    60cc:	4463      	add	r3, ip
    60ce:	7819      	ldrb	r1, [r3, #0]
    60d0:	2386      	movs	r3, #134	; 0x86
    60d2:	005b      	lsls	r3, r3, #1
    60d4:	2408      	movs	r4, #8
    60d6:	46a4      	mov	ip, r4
    60d8:	44bc      	add	ip, r7
    60da:	4463      	add	r3, ip
    60dc:	781b      	ldrb	r3, [r3, #0]
    60de:	9300      	str	r3, [sp, #0]
    60e0:	0003      	movs	r3, r0
    60e2:	2001      	movs	r0, #1
    60e4:	4c47      	ldr	r4, [pc, #284]	; (6204 <processOnSMS+0x16ac>)
    60e6:	47a0      	blx	r4
					if(response_sms_processed_cmd)
    60e8:	4b47      	ldr	r3, [pc, #284]	; (6208 <processOnSMS+0x16b0>)
    60ea:	2294      	movs	r2, #148	; 0x94
    60ec:	0052      	lsls	r2, r2, #1
    60ee:	4694      	mov	ip, r2
    60f0:	2208      	movs	r2, #8
    60f2:	4690      	mov	r8, r2
    60f4:	44b8      	add	r8, r7
    60f6:	44c4      	add	ip, r8
    60f8:	4463      	add	r3, ip
    60fa:	781b      	ldrb	r3, [r3, #0]
    60fc:	2b00      	cmp	r3, #0
    60fe:	d101      	bne.n	6104 <processOnSMS+0x15ac>
    6100:	f000 fc26 	bl	6950 <processOnSMS+0x1df8>
					{
						strcpy(resep_msg,"NO CALL TIMINGS SET");
    6104:	230c      	movs	r3, #12
    6106:	2208      	movs	r2, #8
    6108:	4694      	mov	ip, r2
    610a:	44bc      	add	ip, r7
    610c:	4463      	add	r3, ip
    610e:	4a40      	ldr	r2, [pc, #256]	; (6210 <processOnSMS+0x16b8>)
    6110:	ca13      	ldmia	r2!, {r0, r1, r4}
    6112:	c313      	stmia	r3!, {r0, r1, r4}
    6114:	ca03      	ldmia	r2!, {r0, r1}
    6116:	c303      	stmia	r3!, {r0, r1}
    6118:	f000 fc1a 	bl	6950 <processOnSMS+0x1df8>
					}
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"STAGE"))
    611c:	4a3d      	ldr	r2, [pc, #244]	; (6214 <processOnSMS+0x16bc>)
    611e:	68fb      	ldr	r3, [r7, #12]
    6120:	0011      	movs	r1, r2
    6122:	0018      	movs	r0, r3
    6124:	4b31      	ldr	r3, [pc, #196]	; (61ec <processOnSMS+0x1694>)
    6126:	4798      	blx	r3
    6128:	1e03      	subs	r3, r0, #0
    612a:	d100      	bne.n	612e <processOnSMS+0x15d6>
    612c:	e07e      	b.n	622c <processOnSMS+0x16d4>
	{
		memmove(received_command,received_command+5,strlen(received_command));
    612e:	68fb      	ldr	r3, [r7, #12]
    6130:	1d5c      	adds	r4, r3, #5
    6132:	68fb      	ldr	r3, [r7, #12]
    6134:	0018      	movs	r0, r3
    6136:	4b38      	ldr	r3, [pc, #224]	; (6218 <processOnSMS+0x16c0>)
    6138:	4798      	blx	r3
    613a:	0002      	movs	r2, r0
    613c:	68fb      	ldr	r3, [r7, #12]
    613e:	0021      	movs	r1, r4
    6140:	0018      	movs	r0, r3
    6142:	4b36      	ldr	r3, [pc, #216]	; (621c <processOnSMS+0x16c4>)
    6144:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
    6146:	68fb      	ldr	r3, [r7, #12]
    6148:	0018      	movs	r0, r3
    614a:	4b2d      	ldr	r3, [pc, #180]	; (6200 <processOnSMS+0x16a8>)
    614c:	4798      	blx	r3
    614e:	0002      	movs	r2, r0
    6150:	2391      	movs	r3, #145	; 0x91
    6152:	005b      	lsls	r3, r3, #1
    6154:	2108      	movs	r1, #8
    6156:	468c      	mov	ip, r1
    6158:	44bc      	add	ip, r7
    615a:	4463      	add	r3, ip
    615c:	801a      	strh	r2, [r3, #0]
		if (stageLevel < 0) stageLevel = 0;
		if (stageLevel > 5) stageLevel = 5;
    615e:	2391      	movs	r3, #145	; 0x91
    6160:	005b      	lsls	r3, r3, #1
    6162:	2208      	movs	r2, #8
    6164:	4694      	mov	ip, r2
    6166:	44bc      	add	ip, r7
    6168:	4463      	add	r3, ip
    616a:	881b      	ldrh	r3, [r3, #0]
    616c:	2b05      	cmp	r3, #5
    616e:	d907      	bls.n	6180 <processOnSMS+0x1628>
    6170:	2391      	movs	r3, #145	; 0x91
    6172:	005b      	lsls	r3, r3, #1
    6174:	2208      	movs	r2, #8
    6176:	4694      	mov	ip, r2
    6178:	44bc      	add	ip, r7
    617a:	4463      	add	r3, ip
    617c:	2205      	movs	r2, #5
    617e:	801a      	strh	r2, [r3, #0]
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
    6180:	2391      	movs	r3, #145	; 0x91
    6182:	005b      	lsls	r3, r3, #1
    6184:	2208      	movs	r2, #8
    6186:	4694      	mov	ip, r2
    6188:	44bc      	add	ip, r7
    618a:	4463      	add	r3, ip
    618c:	881b      	ldrh	r3, [r3, #0]
    618e:	b2db      	uxtb	r3, r3
    6190:	0018      	movs	r0, r3
    6192:	4b23      	ldr	r3, [pc, #140]	; (6220 <processOnSMS+0x16c8>)
    6194:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    6196:	2328      	movs	r3, #40	; 0x28
    6198:	33ff      	adds	r3, #255	; 0xff
    619a:	2208      	movs	r2, #8
    619c:	4694      	mov	ip, r2
    619e:	44bc      	add	ip, r7
    61a0:	4463      	add	r3, ip
    61a2:	2201      	movs	r2, #1
    61a4:	701a      	strb	r2, [r3, #0]
		
		if(response_sms_processed_cmd)
    61a6:	4b18      	ldr	r3, [pc, #96]	; (6208 <processOnSMS+0x16b0>)
    61a8:	2294      	movs	r2, #148	; 0x94
    61aa:	0052      	lsls	r2, r2, #1
    61ac:	4694      	mov	ip, r2
    61ae:	2208      	movs	r2, #8
    61b0:	4690      	mov	r8, r2
    61b2:	44b8      	add	r8, r7
    61b4:	44c4      	add	ip, r8
    61b6:	4463      	add	r3, ip
    61b8:	781b      	ldrb	r3, [r3, #0]
    61ba:	2b00      	cmp	r3, #0
    61bc:	d101      	bne.n	61c2 <processOnSMS+0x166a>
    61be:	f000 fbc7 	bl	6950 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
    61c2:	2391      	movs	r3, #145	; 0x91
    61c4:	005b      	lsls	r3, r3, #1
    61c6:	2208      	movs	r2, #8
    61c8:	4694      	mov	ip, r2
    61ca:	44bc      	add	ip, r7
    61cc:	4463      	add	r3, ip
    61ce:	881a      	ldrh	r2, [r3, #0]
    61d0:	4914      	ldr	r1, [pc, #80]	; (6224 <processOnSMS+0x16cc>)
    61d2:	230c      	movs	r3, #12
    61d4:	2008      	movs	r0, #8
    61d6:	4684      	mov	ip, r0
    61d8:	44bc      	add	ip, r7
    61da:	4463      	add	r3, ip
    61dc:	0018      	movs	r0, r3
    61de:	4b12      	ldr	r3, [pc, #72]	; (6228 <processOnSMS+0x16d0>)
    61e0:	4798      	blx	r3
    61e2:	f000 fbb5 	bl	6950 <processOnSMS+0x1df8>
    61e6:	46c0      	nop			; (mov r8, r8)
    61e8:	0001928c 	.word	0x0001928c
    61ec:	00003e0d 	.word	0x00003e0d
    61f0:	00019294 	.word	0x00019294
    61f4:	0001929c 	.word	0x0001929c
    61f8:	00017fc9 	.word	0x00017fc9
    61fc:	000192a0 	.word	0x000192a0
    6200:	00017bbd 	.word	0x00017bbd
    6204:	000013d9 	.word	0x000013d9
    6208:	fffffeda 	.word	0xfffffeda
    620c:	00019260 	.word	0x00019260
    6210:	000192a4 	.word	0x000192a4
    6214:	000192b8 	.word	0x000192b8
    6218:	00017f67 	.word	0x00017f67
    621c:	00017cb3 	.word	0x00017cb3
    6220:	00001945 	.word	0x00001945
    6224:	000192c0 	.word	0x000192c0
    6228:	00017edd 	.word	0x00017edd
		}
	}
	else if (StringstartsWith(received_command,"STARTIME"))
    622c:	4aa6      	ldr	r2, [pc, #664]	; (64c8 <processOnSMS+0x1970>)
    622e:	68fb      	ldr	r3, [r7, #12]
    6230:	0011      	movs	r1, r2
    6232:	0018      	movs	r0, r3
    6234:	4ba5      	ldr	r3, [pc, #660]	; (64cc <processOnSMS+0x1974>)
    6236:	4798      	blx	r3
    6238:	1e03      	subs	r3, r0, #0
    623a:	d06d      	beq.n	6318 <processOnSMS+0x17c0>
	{
		memmove(received_command,received_command+8,strlen(received_command));
    623c:	68fb      	ldr	r3, [r7, #12]
    623e:	3308      	adds	r3, #8
    6240:	001c      	movs	r4, r3
    6242:	68fb      	ldr	r3, [r7, #12]
    6244:	0018      	movs	r0, r3
    6246:	4ba2      	ldr	r3, [pc, #648]	; (64d0 <processOnSMS+0x1978>)
    6248:	4798      	blx	r3
    624a:	0002      	movs	r2, r0
    624c:	68fb      	ldr	r3, [r7, #12]
    624e:	0021      	movs	r1, r4
    6250:	0018      	movs	r0, r3
    6252:	4ba0      	ldr	r3, [pc, #640]	; (64d4 <processOnSMS+0x197c>)
    6254:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
    6256:	68fb      	ldr	r3, [r7, #12]
    6258:	0018      	movs	r0, r3
    625a:	4b9f      	ldr	r3, [pc, #636]	; (64d8 <processOnSMS+0x1980>)
    625c:	4798      	blx	r3
    625e:	0002      	movs	r2, r0
    6260:	2390      	movs	r3, #144	; 0x90
    6262:	005b      	lsls	r3, r3, #1
    6264:	2108      	movs	r1, #8
    6266:	468c      	mov	ip, r1
    6268:	44bc      	add	ip, r7
    626a:	4463      	add	r3, ip
    626c:	801a      	strh	r2, [r3, #0]
		if (STARTIME < 2)
    626e:	2390      	movs	r3, #144	; 0x90
    6270:	005b      	lsls	r3, r3, #1
    6272:	2208      	movs	r2, #8
    6274:	4694      	mov	ip, r2
    6276:	44bc      	add	ip, r7
    6278:	4463      	add	r3, ip
    627a:	881b      	ldrh	r3, [r3, #0]
    627c:	2b01      	cmp	r3, #1
    627e:	d807      	bhi.n	6290 <processOnSMS+0x1738>
		{
			STARTIME = 2;
    6280:	2390      	movs	r3, #144	; 0x90
    6282:	005b      	lsls	r3, r3, #1
    6284:	2208      	movs	r2, #8
    6286:	4694      	mov	ip, r2
    6288:	44bc      	add	ip, r7
    628a:	4463      	add	r3, ip
    628c:	2202      	movs	r2, #2
    628e:	801a      	strh	r2, [r3, #0]
		}
		if (STARTIME > 1200)
    6290:	2390      	movs	r3, #144	; 0x90
    6292:	005b      	lsls	r3, r3, #1
    6294:	2208      	movs	r2, #8
    6296:	4694      	mov	ip, r2
    6298:	44bc      	add	ip, r7
    629a:	4463      	add	r3, ip
    629c:	881a      	ldrh	r2, [r3, #0]
    629e:	2396      	movs	r3, #150	; 0x96
    62a0:	00db      	lsls	r3, r3, #3
    62a2:	429a      	cmp	r2, r3
    62a4:	d908      	bls.n	62b8 <processOnSMS+0x1760>
		{
			STARTIME = 1200;
    62a6:	2390      	movs	r3, #144	; 0x90
    62a8:	005b      	lsls	r3, r3, #1
    62aa:	2208      	movs	r2, #8
    62ac:	4694      	mov	ip, r2
    62ae:	44bc      	add	ip, r7
    62b0:	4463      	add	r3, ip
    62b2:	2296      	movs	r2, #150	; 0x96
    62b4:	00d2      	lsls	r2, r2, #3
    62b6:	801a      	strh	r2, [r3, #0]
		}
		saveStarDeltaTimer(STARTIME);
    62b8:	2390      	movs	r3, #144	; 0x90
    62ba:	005b      	lsls	r3, r3, #1
    62bc:	2208      	movs	r2, #8
    62be:	4694      	mov	ip, r2
    62c0:	44bc      	add	ip, r7
    62c2:	4463      	add	r3, ip
    62c4:	881b      	ldrh	r3, [r3, #0]
    62c6:	0018      	movs	r0, r3
    62c8:	4b84      	ldr	r3, [pc, #528]	; (64dc <processOnSMS+0x1984>)
    62ca:	4798      	blx	r3
		
		incomingSMSProcessed=true;
    62cc:	2328      	movs	r3, #40	; 0x28
    62ce:	33ff      	adds	r3, #255	; 0xff
    62d0:	2208      	movs	r2, #8
    62d2:	4694      	mov	ip, r2
    62d4:	44bc      	add	ip, r7
    62d6:	4463      	add	r3, ip
    62d8:	2201      	movs	r2, #1
    62da:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    62dc:	4b80      	ldr	r3, [pc, #512]	; (64e0 <processOnSMS+0x1988>)
    62de:	2294      	movs	r2, #148	; 0x94
    62e0:	0052      	lsls	r2, r2, #1
    62e2:	4694      	mov	ip, r2
    62e4:	2208      	movs	r2, #8
    62e6:	4690      	mov	r8, r2
    62e8:	44b8      	add	r8, r7
    62ea:	44c4      	add	ip, r8
    62ec:	4463      	add	r3, ip
    62ee:	781b      	ldrb	r3, [r3, #0]
    62f0:	2b00      	cmp	r3, #0
    62f2:	d100      	bne.n	62f6 <processOnSMS+0x179e>
    62f4:	e32c      	b.n	6950 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg," STARTIME SET TO : %d",STARTIME);
    62f6:	2390      	movs	r3, #144	; 0x90
    62f8:	005b      	lsls	r3, r3, #1
    62fa:	2208      	movs	r2, #8
    62fc:	4694      	mov	ip, r2
    62fe:	44bc      	add	ip, r7
    6300:	4463      	add	r3, ip
    6302:	881a      	ldrh	r2, [r3, #0]
    6304:	4977      	ldr	r1, [pc, #476]	; (64e4 <processOnSMS+0x198c>)
    6306:	230c      	movs	r3, #12
    6308:	2008      	movs	r0, #8
    630a:	4684      	mov	ip, r0
    630c:	44bc      	add	ip, r7
    630e:	4463      	add	r3, ip
    6310:	0018      	movs	r0, r3
    6312:	4b75      	ldr	r3, [pc, #468]	; (64e8 <processOnSMS+0x1990>)
    6314:	4798      	blx	r3
    6316:	e31b      	b.n	6950 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"AUTOTIME"))
    6318:	4a74      	ldr	r2, [pc, #464]	; (64ec <processOnSMS+0x1994>)
    631a:	68fb      	ldr	r3, [r7, #12]
    631c:	0011      	movs	r1, r2
    631e:	0018      	movs	r0, r3
    6320:	4b6a      	ldr	r3, [pc, #424]	; (64cc <processOnSMS+0x1974>)
    6322:	4798      	blx	r3
    6324:	1e03      	subs	r3, r0, #0
    6326:	d06d      	beq.n	6404 <processOnSMS+0x18ac>
	{
		memmove(received_command,received_command+8,strlen(received_command));
    6328:	68fb      	ldr	r3, [r7, #12]
    632a:	3308      	adds	r3, #8
    632c:	001c      	movs	r4, r3
    632e:	68fb      	ldr	r3, [r7, #12]
    6330:	0018      	movs	r0, r3
    6332:	4b67      	ldr	r3, [pc, #412]	; (64d0 <processOnSMS+0x1978>)
    6334:	4798      	blx	r3
    6336:	0002      	movs	r2, r0
    6338:	68fb      	ldr	r3, [r7, #12]
    633a:	0021      	movs	r1, r4
    633c:	0018      	movs	r0, r3
    633e:	4b65      	ldr	r3, [pc, #404]	; (64d4 <processOnSMS+0x197c>)
    6340:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
    6342:	68fb      	ldr	r3, [r7, #12]
    6344:	0018      	movs	r0, r3
    6346:	4b64      	ldr	r3, [pc, #400]	; (64d8 <processOnSMS+0x1980>)
    6348:	4798      	blx	r3
    634a:	0002      	movs	r2, r0
    634c:	238f      	movs	r3, #143	; 0x8f
    634e:	005b      	lsls	r3, r3, #1
    6350:	2108      	movs	r1, #8
    6352:	468c      	mov	ip, r1
    6354:	44bc      	add	ip, r7
    6356:	4463      	add	r3, ip
    6358:	801a      	strh	r2, [r3, #0]
		if (AUTOTIME < 50)
    635a:	238f      	movs	r3, #143	; 0x8f
    635c:	005b      	lsls	r3, r3, #1
    635e:	2208      	movs	r2, #8
    6360:	4694      	mov	ip, r2
    6362:	44bc      	add	ip, r7
    6364:	4463      	add	r3, ip
    6366:	881b      	ldrh	r3, [r3, #0]
    6368:	2b31      	cmp	r3, #49	; 0x31
    636a:	d807      	bhi.n	637c <processOnSMS+0x1824>
		{
			AUTOTIME = 50;
    636c:	238f      	movs	r3, #143	; 0x8f
    636e:	005b      	lsls	r3, r3, #1
    6370:	2208      	movs	r2, #8
    6372:	4694      	mov	ip, r2
    6374:	44bc      	add	ip, r7
    6376:	4463      	add	r3, ip
    6378:	2232      	movs	r2, #50	; 0x32
    637a:	801a      	strh	r2, [r3, #0]
		}
		if (AUTOTIME > 28800)
    637c:	238f      	movs	r3, #143	; 0x8f
    637e:	005b      	lsls	r3, r3, #1
    6380:	2208      	movs	r2, #8
    6382:	4694      	mov	ip, r2
    6384:	44bc      	add	ip, r7
    6386:	4463      	add	r3, ip
    6388:	881a      	ldrh	r2, [r3, #0]
    638a:	23e1      	movs	r3, #225	; 0xe1
    638c:	01db      	lsls	r3, r3, #7
    638e:	429a      	cmp	r2, r3
    6390:	d908      	bls.n	63a4 <processOnSMS+0x184c>
		{
			AUTOTIME = 28800;
    6392:	238f      	movs	r3, #143	; 0x8f
    6394:	005b      	lsls	r3, r3, #1
    6396:	2208      	movs	r2, #8
    6398:	4694      	mov	ip, r2
    639a:	44bc      	add	ip, r7
    639c:	4463      	add	r3, ip
    639e:	22e1      	movs	r2, #225	; 0xe1
    63a0:	01d2      	lsls	r2, r2, #7
    63a2:	801a      	strh	r2, [r3, #0]
		}
		saveAutoStartTimeSettings(AUTOTIME);
    63a4:	238f      	movs	r3, #143	; 0x8f
    63a6:	005b      	lsls	r3, r3, #1
    63a8:	2208      	movs	r2, #8
    63aa:	4694      	mov	ip, r2
    63ac:	44bc      	add	ip, r7
    63ae:	4463      	add	r3, ip
    63b0:	881b      	ldrh	r3, [r3, #0]
    63b2:	0018      	movs	r0, r3
    63b4:	4b4e      	ldr	r3, [pc, #312]	; (64f0 <processOnSMS+0x1998>)
    63b6:	4798      	blx	r3
		incomingSMSProcessed=true;
    63b8:	2328      	movs	r3, #40	; 0x28
    63ba:	33ff      	adds	r3, #255	; 0xff
    63bc:	2208      	movs	r2, #8
    63be:	4694      	mov	ip, r2
    63c0:	44bc      	add	ip, r7
    63c2:	4463      	add	r3, ip
    63c4:	2201      	movs	r2, #1
    63c6:	701a      	strb	r2, [r3, #0]
		
		if (response_sms_processed_cmd == true)
    63c8:	4b45      	ldr	r3, [pc, #276]	; (64e0 <processOnSMS+0x1988>)
    63ca:	2294      	movs	r2, #148	; 0x94
    63cc:	0052      	lsls	r2, r2, #1
    63ce:	4694      	mov	ip, r2
    63d0:	2208      	movs	r2, #8
    63d2:	4690      	mov	r8, r2
    63d4:	44b8      	add	r8, r7
    63d6:	44c4      	add	ip, r8
    63d8:	4463      	add	r3, ip
    63da:	781b      	ldrb	r3, [r3, #0]
    63dc:	2b00      	cmp	r3, #0
    63de:	d100      	bne.n	63e2 <processOnSMS+0x188a>
    63e0:	e2b6      	b.n	6950 <processOnSMS+0x1df8>
		{
			sprintf(resep_msg," AUTOTIME SET TO : %d",AUTOTIME);
    63e2:	238f      	movs	r3, #143	; 0x8f
    63e4:	005b      	lsls	r3, r3, #1
    63e6:	2208      	movs	r2, #8
    63e8:	4694      	mov	ip, r2
    63ea:	44bc      	add	ip, r7
    63ec:	4463      	add	r3, ip
    63ee:	881a      	ldrh	r2, [r3, #0]
    63f0:	4940      	ldr	r1, [pc, #256]	; (64f4 <processOnSMS+0x199c>)
    63f2:	230c      	movs	r3, #12
    63f4:	2008      	movs	r0, #8
    63f6:	4684      	mov	ip, r0
    63f8:	44bc      	add	ip, r7
    63fa:	4463      	add	r3, ip
    63fc:	0018      	movs	r0, r3
    63fe:	4b3a      	ldr	r3, [pc, #232]	; (64e8 <processOnSMS+0x1990>)
    6400:	4798      	blx	r3
    6402:	e2a5      	b.n	6950 <processOnSMS+0x1df8>
		}
	}
	else if (StringstartsWith(received_command,"BAL"))
    6404:	4a3c      	ldr	r2, [pc, #240]	; (64f8 <processOnSMS+0x19a0>)
    6406:	68fb      	ldr	r3, [r7, #12]
    6408:	0011      	movs	r1, r2
    640a:	0018      	movs	r0, r3
    640c:	4b2f      	ldr	r3, [pc, #188]	; (64cc <processOnSMS+0x1974>)
    640e:	4798      	blx	r3
    6410:	1e03      	subs	r3, r0, #0
    6412:	d000      	beq.n	6416 <processOnSMS+0x18be>
    6414:	e29c      	b.n	6950 <processOnSMS+0x1df8>
		// The received sms will be like BAL*141# for vodafone
		// We need to extract the URC number and check the balance, and send it to user
		//todo: implement mechanism to check current balance of sim card
		
	}
	else if(StringstartsWith(received_command,"MP+"))
    6416:	4a39      	ldr	r2, [pc, #228]	; (64fc <processOnSMS+0x19a4>)
    6418:	68fb      	ldr	r3, [r7, #12]
    641a:	0011      	movs	r1, r2
    641c:	0018      	movs	r0, r3
    641e:	4b2b      	ldr	r3, [pc, #172]	; (64cc <processOnSMS+0x1974>)
    6420:	4798      	blx	r3
    6422:	1e03      	subs	r3, r0, #0
    6424:	d023      	beq.n	646e <processOnSMS+0x1916>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    6426:	68fb      	ldr	r3, [r7, #12]
    6428:	1cdc      	adds	r4, r3, #3
    642a:	68fb      	ldr	r3, [r7, #12]
    642c:	0018      	movs	r0, r3
    642e:	4b28      	ldr	r3, [pc, #160]	; (64d0 <processOnSMS+0x1978>)
    6430:	4798      	blx	r3
    6432:	0002      	movs	r2, r0
    6434:	68fb      	ldr	r3, [r7, #12]
    6436:	0021      	movs	r1, r4
    6438:	0018      	movs	r0, r3
    643a:	4b26      	ldr	r3, [pc, #152]	; (64d4 <processOnSMS+0x197c>)
    643c:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
    643e:	68fb      	ldr	r3, [r7, #12]
    6440:	0018      	movs	r0, r3
    6442:	4b2f      	ldr	r3, [pc, #188]	; (6500 <processOnSMS+0x19a8>)
    6444:	4798      	blx	r3
    6446:	1e03      	subs	r3, r0, #0
    6448:	d100      	bne.n	644c <processOnSMS+0x18f4>
    644a:	e281      	b.n	6950 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    644c:	2328      	movs	r3, #40	; 0x28
    644e:	33ff      	adds	r3, #255	; 0xff
    6450:	2208      	movs	r2, #8
    6452:	4694      	mov	ip, r2
    6454:	44bc      	add	ip, r7
    6456:	4463      	add	r3, ip
    6458:	2201      	movs	r2, #1
    645a:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"P NO ADDDED");
    645c:	230c      	movs	r3, #12
    645e:	2208      	movs	r2, #8
    6460:	4694      	mov	ip, r2
    6462:	44bc      	add	ip, r7
    6464:	4463      	add	r3, ip
    6466:	4a27      	ldr	r2, [pc, #156]	; (6504 <processOnSMS+0x19ac>)
    6468:	ca13      	ldmia	r2!, {r0, r1, r4}
    646a:	c313      	stmia	r3!, {r0, r1, r4}
    646c:	e270      	b.n	6950 <processOnSMS+0x1df8>
		}
	}
	else if(StringstartsWith(received_command,"MS+"))
    646e:	4a26      	ldr	r2, [pc, #152]	; (6508 <processOnSMS+0x19b0>)
    6470:	68fb      	ldr	r3, [r7, #12]
    6472:	0011      	movs	r1, r2
    6474:	0018      	movs	r0, r3
    6476:	4b15      	ldr	r3, [pc, #84]	; (64cc <processOnSMS+0x1974>)
    6478:	4798      	blx	r3
    647a:	1e03      	subs	r3, r0, #0
    647c:	d04a      	beq.n	6514 <processOnSMS+0x19bc>
	{
		memmove(received_command,received_command+3,strlen(received_command));
    647e:	68fb      	ldr	r3, [r7, #12]
    6480:	1cdc      	adds	r4, r3, #3
    6482:	68fb      	ldr	r3, [r7, #12]
    6484:	0018      	movs	r0, r3
    6486:	4b12      	ldr	r3, [pc, #72]	; (64d0 <processOnSMS+0x1978>)
    6488:	4798      	blx	r3
    648a:	0002      	movs	r2, r0
    648c:	68fb      	ldr	r3, [r7, #12]
    648e:	0021      	movs	r1, r4
    6490:	0018      	movs	r0, r3
    6492:	4b10      	ldr	r3, [pc, #64]	; (64d4 <processOnSMS+0x197c>)
    6494:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
    6496:	68fb      	ldr	r3, [r7, #12]
    6498:	0018      	movs	r0, r3
    649a:	4b1c      	ldr	r3, [pc, #112]	; (650c <processOnSMS+0x19b4>)
    649c:	4798      	blx	r3
    649e:	1e03      	subs	r3, r0, #0
    64a0:	d100      	bne.n	64a4 <processOnSMS+0x194c>
    64a2:	e255      	b.n	6950 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    64a4:	2328      	movs	r3, #40	; 0x28
    64a6:	33ff      	adds	r3, #255	; 0xff
    64a8:	2208      	movs	r2, #8
    64aa:	4694      	mov	ip, r2
    64ac:	44bc      	add	ip, r7
    64ae:	4463      	add	r3, ip
    64b0:	2201      	movs	r2, #1
    64b2:	701a      	strb	r2, [r3, #0]
			strcpy(resep_msg,"S NO ADDDED");
    64b4:	230c      	movs	r3, #12
    64b6:	2208      	movs	r2, #8
    64b8:	4694      	mov	ip, r2
    64ba:	44bc      	add	ip, r7
    64bc:	4463      	add	r3, ip
    64be:	4a14      	ldr	r2, [pc, #80]	; (6510 <processOnSMS+0x19b8>)
    64c0:	ca13      	ldmia	r2!, {r0, r1, r4}
    64c2:	c313      	stmia	r3!, {r0, r1, r4}
    64c4:	e244      	b.n	6950 <processOnSMS+0x1df8>
    64c6:	46c0      	nop			; (mov r8, r8)
    64c8:	000192d8 	.word	0x000192d8
    64cc:	00003e0d 	.word	0x00003e0d
    64d0:	00017f67 	.word	0x00017f67
    64d4:	00017cb3 	.word	0x00017cb3
    64d8:	00017bbd 	.word	0x00017bbd
    64dc:	000018f9 	.word	0x000018f9
    64e0:	fffffeda 	.word	0xfffffeda
    64e4:	000192e4 	.word	0x000192e4
    64e8:	00017edd 	.word	0x00017edd
    64ec:	000192fc 	.word	0x000192fc
    64f0:	000012f5 	.word	0x000012f5
    64f4:	00019308 	.word	0x00019308
    64f8:	00019320 	.word	0x00019320
    64fc:	00019324 	.word	0x00019324
    6500:	00001ac5 	.word	0x00001ac5
    6504:	00019328 	.word	0x00019328
    6508:	00019334 	.word	0x00019334
    650c:	00001b71 	.word	0x00001b71
    6510:	00019338 	.word	0x00019338
		}
	}
	else if (StringstartsWith(received_command,"M+"))
    6514:	4adb      	ldr	r2, [pc, #876]	; (6884 <processOnSMS+0x1d2c>)
    6516:	68fb      	ldr	r3, [r7, #12]
    6518:	0011      	movs	r1, r2
    651a:	0018      	movs	r0, r3
    651c:	4bda      	ldr	r3, [pc, #872]	; (6888 <processOnSMS+0x1d30>)
    651e:	4798      	blx	r3
    6520:	1e03      	subs	r3, r0, #0
    6522:	d100      	bne.n	6526 <processOnSMS+0x19ce>
    6524:	e091      	b.n	664a <processOnSMS+0x1af2>
	{
		memmove(received_command,received_command+2,strlen(received_command));
    6526:	68fb      	ldr	r3, [r7, #12]
    6528:	1c9c      	adds	r4, r3, #2
    652a:	68fb      	ldr	r3, [r7, #12]
    652c:	0018      	movs	r0, r3
    652e:	4bd7      	ldr	r3, [pc, #860]	; (688c <processOnSMS+0x1d34>)
    6530:	4798      	blx	r3
    6532:	0002      	movs	r2, r0
    6534:	68fb      	ldr	r3, [r7, #12]
    6536:	0021      	movs	r1, r4
    6538:	0018      	movs	r0, r3
    653a:	4bd5      	ldr	r3, [pc, #852]	; (6890 <processOnSMS+0x1d38>)
    653c:	4798      	blx	r3
		bool result = addNumber(received_command);
    653e:	230c      	movs	r3, #12
    6540:	33ff      	adds	r3, #255	; 0xff
    6542:	2208      	movs	r2, #8
    6544:	18ba      	adds	r2, r7, r2
    6546:	18d4      	adds	r4, r2, r3
    6548:	68fb      	ldr	r3, [r7, #12]
    654a:	0018      	movs	r0, r3
    654c:	4bd1      	ldr	r3, [pc, #836]	; (6894 <processOnSMS+0x1d3c>)
    654e:	4798      	blx	r3
    6550:	0003      	movs	r3, r0
    6552:	7023      	strb	r3, [r4, #0]
		if(result)
    6554:	230c      	movs	r3, #12
    6556:	33ff      	adds	r3, #255	; 0xff
    6558:	2208      	movs	r2, #8
    655a:	4694      	mov	ip, r2
    655c:	44bc      	add	ip, r7
    655e:	4463      	add	r3, ip
    6560:	781b      	ldrb	r3, [r3, #0]
    6562:	2b00      	cmp	r3, #0
    6564:	d100      	bne.n	6568 <processOnSMS+0x1a10>
    6566:	e1f3      	b.n	6950 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    6568:	2328      	movs	r3, #40	; 0x28
    656a:	33ff      	adds	r3, #255	; 0xff
    656c:	2208      	movs	r2, #8
    656e:	4694      	mov	ip, r2
    6570:	44bc      	add	ip, r7
    6572:	4463      	add	r3, ip
    6574:	2201      	movs	r2, #1
    6576:	701a      	strb	r2, [r3, #0]
			if (response_sms_processed_cmd == true)
    6578:	4bc7      	ldr	r3, [pc, #796]	; (6898 <processOnSMS+0x1d40>)
    657a:	2294      	movs	r2, #148	; 0x94
    657c:	0052      	lsls	r2, r2, #1
    657e:	4694      	mov	ip, r2
    6580:	2208      	movs	r2, #8
    6582:	4690      	mov	r8, r2
    6584:	44b8      	add	r8, r7
    6586:	44c4      	add	ip, r8
    6588:	4463      	add	r3, ip
    658a:	781b      	ldrb	r3, [r3, #0]
    658c:	2b00      	cmp	r3, #0
    658e:	d100      	bne.n	6592 <processOnSMS+0x1a3a>
    6590:	e1de      	b.n	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"MOBILE NO:");
    6592:	230c      	movs	r3, #12
    6594:	2208      	movs	r2, #8
    6596:	4694      	mov	ip, r2
    6598:	44bc      	add	ip, r7
    659a:	4463      	add	r3, ip
    659c:	4abf      	ldr	r2, [pc, #764]	; (689c <processOnSMS+0x1d44>)
    659e:	ca03      	ldmia	r2!, {r0, r1}
    65a0:	c303      	stmia	r3!, {r0, r1}
    65a2:	8811      	ldrh	r1, [r2, #0]
    65a4:	8019      	strh	r1, [r3, #0]
    65a6:	7892      	ldrb	r2, [r2, #2]
    65a8:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
    65aa:	230c      	movs	r3, #12
    65ac:	2208      	movs	r2, #8
    65ae:	4694      	mov	ip, r2
    65b0:	44bc      	add	ip, r7
    65b2:	4463      	add	r3, ip
    65b4:	0018      	movs	r0, r3
    65b6:	4bb5      	ldr	r3, [pc, #724]	; (688c <processOnSMS+0x1d34>)
    65b8:	4798      	blx	r3
    65ba:	0003      	movs	r3, r0
    65bc:	001a      	movs	r2, r3
    65be:	230c      	movs	r3, #12
    65c0:	2108      	movs	r1, #8
    65c2:	468c      	mov	ip, r1
    65c4:	44bc      	add	ip, r7
    65c6:	4463      	add	r3, ip
    65c8:	189a      	adds	r2, r3, r2
    65ca:	4bb5      	ldr	r3, [pc, #724]	; (68a0 <processOnSMS+0x1d48>)
    65cc:	0010      	movs	r0, r2
    65ce:	0019      	movs	r1, r3
    65d0:	2302      	movs	r3, #2
    65d2:	001a      	movs	r2, r3
    65d4:	4bb3      	ldr	r3, [pc, #716]	; (68a4 <processOnSMS+0x1d4c>)
    65d6:	4798      	blx	r3
				strcat(resep_msg,received_command);
    65d8:	68fa      	ldr	r2, [r7, #12]
    65da:	230c      	movs	r3, #12
    65dc:	2108      	movs	r1, #8
    65de:	468c      	mov	ip, r1
    65e0:	44bc      	add	ip, r7
    65e2:	4463      	add	r3, ip
    65e4:	0011      	movs	r1, r2
    65e6:	0018      	movs	r0, r3
    65e8:	4baf      	ldr	r3, [pc, #700]	; (68a8 <processOnSMS+0x1d50>)
    65ea:	4798      	blx	r3
				strcat(resep_msg,"\n");
    65ec:	230c      	movs	r3, #12
    65ee:	2208      	movs	r2, #8
    65f0:	4694      	mov	ip, r2
    65f2:	44bc      	add	ip, r7
    65f4:	4463      	add	r3, ip
    65f6:	0018      	movs	r0, r3
    65f8:	4ba4      	ldr	r3, [pc, #656]	; (688c <processOnSMS+0x1d34>)
    65fa:	4798      	blx	r3
    65fc:	0003      	movs	r3, r0
    65fe:	001a      	movs	r2, r3
    6600:	230c      	movs	r3, #12
    6602:	2108      	movs	r1, #8
    6604:	468c      	mov	ip, r1
    6606:	44bc      	add	ip, r7
    6608:	4463      	add	r3, ip
    660a:	189a      	adds	r2, r3, r2
    660c:	4ba4      	ldr	r3, [pc, #656]	; (68a0 <processOnSMS+0x1d48>)
    660e:	0010      	movs	r0, r2
    6610:	0019      	movs	r1, r3
    6612:	2302      	movs	r3, #2
    6614:	001a      	movs	r2, r3
    6616:	4ba3      	ldr	r3, [pc, #652]	; (68a4 <processOnSMS+0x1d4c>)
    6618:	4798      	blx	r3
				strcat(resep_msg,"ADDED SUCCESSFULLY");
    661a:	230c      	movs	r3, #12
    661c:	2208      	movs	r2, #8
    661e:	4694      	mov	ip, r2
    6620:	44bc      	add	ip, r7
    6622:	4463      	add	r3, ip
    6624:	0018      	movs	r0, r3
    6626:	4b99      	ldr	r3, [pc, #612]	; (688c <processOnSMS+0x1d34>)
    6628:	4798      	blx	r3
    662a:	0003      	movs	r3, r0
    662c:	001a      	movs	r2, r3
    662e:	230c      	movs	r3, #12
    6630:	2108      	movs	r1, #8
    6632:	468c      	mov	ip, r1
    6634:	44bc      	add	ip, r7
    6636:	4463      	add	r3, ip
    6638:	189a      	adds	r2, r3, r2
    663a:	4b9c      	ldr	r3, [pc, #624]	; (68ac <processOnSMS+0x1d54>)
    663c:	0010      	movs	r0, r2
    663e:	0019      	movs	r1, r3
    6640:	2313      	movs	r3, #19
    6642:	001a      	movs	r2, r3
    6644:	4b97      	ldr	r3, [pc, #604]	; (68a4 <processOnSMS+0x1d4c>)
    6646:	4798      	blx	r3
    6648:	e182      	b.n	6950 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"M-"))
    664a:	4a99      	ldr	r2, [pc, #612]	; (68b0 <processOnSMS+0x1d58>)
    664c:	68fb      	ldr	r3, [r7, #12]
    664e:	0011      	movs	r1, r2
    6650:	0018      	movs	r0, r3
    6652:	4b8d      	ldr	r3, [pc, #564]	; (6888 <processOnSMS+0x1d30>)
    6654:	4798      	blx	r3
    6656:	1e03      	subs	r3, r0, #0
    6658:	d100      	bne.n	665c <processOnSMS+0x1b04>
    665a:	e091      	b.n	6780 <processOnSMS+0x1c28>
	{
		memmove(received_command,received_command+2,strlen(received_command));
    665c:	68fb      	ldr	r3, [r7, #12]
    665e:	1c9c      	adds	r4, r3, #2
    6660:	68fb      	ldr	r3, [r7, #12]
    6662:	0018      	movs	r0, r3
    6664:	4b89      	ldr	r3, [pc, #548]	; (688c <processOnSMS+0x1d34>)
    6666:	4798      	blx	r3
    6668:	0002      	movs	r2, r0
    666a:	68fb      	ldr	r3, [r7, #12]
    666c:	0021      	movs	r1, r4
    666e:	0018      	movs	r0, r3
    6670:	4b87      	ldr	r3, [pc, #540]	; (6890 <processOnSMS+0x1d38>)
    6672:	4798      	blx	r3
		bool result = removeNumber(received_command);
    6674:	2385      	movs	r3, #133	; 0x85
    6676:	005b      	lsls	r3, r3, #1
    6678:	2208      	movs	r2, #8
    667a:	18ba      	adds	r2, r7, r2
    667c:	18d4      	adds	r4, r2, r3
    667e:	68fb      	ldr	r3, [r7, #12]
    6680:	0018      	movs	r0, r3
    6682:	4b8c      	ldr	r3, [pc, #560]	; (68b4 <processOnSMS+0x1d5c>)
    6684:	4798      	blx	r3
    6686:	0003      	movs	r3, r0
    6688:	7023      	strb	r3, [r4, #0]
		if(result)
    668a:	2385      	movs	r3, #133	; 0x85
    668c:	005b      	lsls	r3, r3, #1
    668e:	2208      	movs	r2, #8
    6690:	4694      	mov	ip, r2
    6692:	44bc      	add	ip, r7
    6694:	4463      	add	r3, ip
    6696:	781b      	ldrb	r3, [r3, #0]
    6698:	2b00      	cmp	r3, #0
    669a:	d100      	bne.n	669e <processOnSMS+0x1b46>
    669c:	e158      	b.n	6950 <processOnSMS+0x1df8>
		{
			incomingSMSProcessed=true;
    669e:	2328      	movs	r3, #40	; 0x28
    66a0:	33ff      	adds	r3, #255	; 0xff
    66a2:	2208      	movs	r2, #8
    66a4:	4694      	mov	ip, r2
    66a6:	44bc      	add	ip, r7
    66a8:	4463      	add	r3, ip
    66aa:	2201      	movs	r2, #1
    66ac:	701a      	strb	r2, [r3, #0]
			
			if (response_sms_processed_cmd == true)
    66ae:	4b7a      	ldr	r3, [pc, #488]	; (6898 <processOnSMS+0x1d40>)
    66b0:	2294      	movs	r2, #148	; 0x94
    66b2:	0052      	lsls	r2, r2, #1
    66b4:	4694      	mov	ip, r2
    66b6:	2208      	movs	r2, #8
    66b8:	4690      	mov	r8, r2
    66ba:	44b8      	add	r8, r7
    66bc:	44c4      	add	ip, r8
    66be:	4463      	add	r3, ip
    66c0:	781b      	ldrb	r3, [r3, #0]
    66c2:	2b00      	cmp	r3, #0
    66c4:	d100      	bne.n	66c8 <processOnSMS+0x1b70>
    66c6:	e143      	b.n	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"MOBILE NO:");
    66c8:	230c      	movs	r3, #12
    66ca:	2208      	movs	r2, #8
    66cc:	4694      	mov	ip, r2
    66ce:	44bc      	add	ip, r7
    66d0:	4463      	add	r3, ip
    66d2:	4a72      	ldr	r2, [pc, #456]	; (689c <processOnSMS+0x1d44>)
    66d4:	ca03      	ldmia	r2!, {r0, r1}
    66d6:	c303      	stmia	r3!, {r0, r1}
    66d8:	8811      	ldrh	r1, [r2, #0]
    66da:	8019      	strh	r1, [r3, #0]
    66dc:	7892      	ldrb	r2, [r2, #2]
    66de:	709a      	strb	r2, [r3, #2]
				strcat(resep_msg,"\n");
    66e0:	230c      	movs	r3, #12
    66e2:	2208      	movs	r2, #8
    66e4:	4694      	mov	ip, r2
    66e6:	44bc      	add	ip, r7
    66e8:	4463      	add	r3, ip
    66ea:	0018      	movs	r0, r3
    66ec:	4b67      	ldr	r3, [pc, #412]	; (688c <processOnSMS+0x1d34>)
    66ee:	4798      	blx	r3
    66f0:	0003      	movs	r3, r0
    66f2:	001a      	movs	r2, r3
    66f4:	230c      	movs	r3, #12
    66f6:	2108      	movs	r1, #8
    66f8:	468c      	mov	ip, r1
    66fa:	44bc      	add	ip, r7
    66fc:	4463      	add	r3, ip
    66fe:	189a      	adds	r2, r3, r2
    6700:	4b67      	ldr	r3, [pc, #412]	; (68a0 <processOnSMS+0x1d48>)
    6702:	0010      	movs	r0, r2
    6704:	0019      	movs	r1, r3
    6706:	2302      	movs	r3, #2
    6708:	001a      	movs	r2, r3
    670a:	4b66      	ldr	r3, [pc, #408]	; (68a4 <processOnSMS+0x1d4c>)
    670c:	4798      	blx	r3
				strcat(resep_msg,received_command);
    670e:	68fa      	ldr	r2, [r7, #12]
    6710:	230c      	movs	r3, #12
    6712:	2108      	movs	r1, #8
    6714:	468c      	mov	ip, r1
    6716:	44bc      	add	ip, r7
    6718:	4463      	add	r3, ip
    671a:	0011      	movs	r1, r2
    671c:	0018      	movs	r0, r3
    671e:	4b62      	ldr	r3, [pc, #392]	; (68a8 <processOnSMS+0x1d50>)
    6720:	4798      	blx	r3
				strcat(resep_msg,"\n");
    6722:	230c      	movs	r3, #12
    6724:	2208      	movs	r2, #8
    6726:	4694      	mov	ip, r2
    6728:	44bc      	add	ip, r7
    672a:	4463      	add	r3, ip
    672c:	0018      	movs	r0, r3
    672e:	4b57      	ldr	r3, [pc, #348]	; (688c <processOnSMS+0x1d34>)
    6730:	4798      	blx	r3
    6732:	0003      	movs	r3, r0
    6734:	001a      	movs	r2, r3
    6736:	230c      	movs	r3, #12
    6738:	2108      	movs	r1, #8
    673a:	468c      	mov	ip, r1
    673c:	44bc      	add	ip, r7
    673e:	4463      	add	r3, ip
    6740:	189a      	adds	r2, r3, r2
    6742:	4b57      	ldr	r3, [pc, #348]	; (68a0 <processOnSMS+0x1d48>)
    6744:	0010      	movs	r0, r2
    6746:	0019      	movs	r1, r3
    6748:	2302      	movs	r3, #2
    674a:	001a      	movs	r2, r3
    674c:	4b55      	ldr	r3, [pc, #340]	; (68a4 <processOnSMS+0x1d4c>)
    674e:	4798      	blx	r3
				strcat(resep_msg,"REMOVED SUCCESSFULLY");
    6750:	230c      	movs	r3, #12
    6752:	2208      	movs	r2, #8
    6754:	4694      	mov	ip, r2
    6756:	44bc      	add	ip, r7
    6758:	4463      	add	r3, ip
    675a:	0018      	movs	r0, r3
    675c:	4b4b      	ldr	r3, [pc, #300]	; (688c <processOnSMS+0x1d34>)
    675e:	4798      	blx	r3
    6760:	0003      	movs	r3, r0
    6762:	001a      	movs	r2, r3
    6764:	230c      	movs	r3, #12
    6766:	2108      	movs	r1, #8
    6768:	468c      	mov	ip, r1
    676a:	44bc      	add	ip, r7
    676c:	4463      	add	r3, ip
    676e:	189a      	adds	r2, r3, r2
    6770:	4b51      	ldr	r3, [pc, #324]	; (68b8 <processOnSMS+0x1d60>)
    6772:	0010      	movs	r0, r2
    6774:	0019      	movs	r1, r3
    6776:	2315      	movs	r3, #21
    6778:	001a      	movs	r2, r3
    677a:	4b4a      	ldr	r3, [pc, #296]	; (68a4 <processOnSMS+0x1d4c>)
    677c:	4798      	blx	r3
    677e:	e0e7      	b.n	6950 <processOnSMS+0x1df8>
			}
		}
	}
	else if (StringstartsWith(received_command,"AM+"))
    6780:	4a4e      	ldr	r2, [pc, #312]	; (68bc <processOnSMS+0x1d64>)
    6782:	68fb      	ldr	r3, [r7, #12]
    6784:	0011      	movs	r1, r2
    6786:	0018      	movs	r0, r3
    6788:	4b3f      	ldr	r3, [pc, #252]	; (6888 <processOnSMS+0x1d30>)
    678a:	4798      	blx	r3
    678c:	1e03      	subs	r3, r0, #0
    678e:	d042      	beq.n	6816 <processOnSMS+0x1cbe>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
    6790:	68fb      	ldr	r3, [r7, #12]
    6792:	1cdc      	adds	r4, r3, #3
    6794:	68fb      	ldr	r3, [r7, #12]
    6796:	0018      	movs	r0, r3
    6798:	4b3c      	ldr	r3, [pc, #240]	; (688c <processOnSMS+0x1d34>)
    679a:	4798      	blx	r3
    679c:	0002      	movs	r2, r0
    679e:	68fb      	ldr	r3, [r7, #12]
    67a0:	0021      	movs	r1, r4
    67a2:	0018      	movs	r0, r3
    67a4:	4b3a      	ldr	r3, [pc, #232]	; (6890 <processOnSMS+0x1d38>)
    67a6:	4798      	blx	r3
			bool result  = addAlternateNumber(received_command);
    67a8:	230a      	movs	r3, #10
    67aa:	33ff      	adds	r3, #255	; 0xff
    67ac:	2208      	movs	r2, #8
    67ae:	18ba      	adds	r2, r7, r2
    67b0:	18d4      	adds	r4, r2, r3
    67b2:	68fb      	ldr	r3, [r7, #12]
    67b4:	0018      	movs	r0, r3
    67b6:	4b42      	ldr	r3, [pc, #264]	; (68c0 <processOnSMS+0x1d68>)
    67b8:	4798      	blx	r3
    67ba:	0003      	movs	r3, r0
    67bc:	7023      	strb	r3, [r4, #0]
			incomingSMSProcessed=true;
    67be:	2328      	movs	r3, #40	; 0x28
    67c0:	33ff      	adds	r3, #255	; 0xff
    67c2:	2208      	movs	r2, #8
    67c4:	4694      	mov	ip, r2
    67c6:	44bc      	add	ip, r7
    67c8:	4463      	add	r3, ip
    67ca:	2201      	movs	r2, #1
    67cc:	701a      	strb	r2, [r3, #0]
			if(result)
    67ce:	230a      	movs	r3, #10
    67d0:	33ff      	adds	r3, #255	; 0xff
    67d2:	2208      	movs	r2, #8
    67d4:	4694      	mov	ip, r2
    67d6:	44bc      	add	ip, r7
    67d8:	4463      	add	r3, ip
    67da:	781b      	ldrb	r3, [r3, #0]
    67dc:	2b00      	cmp	r3, #0
    67de:	d100      	bne.n	67e2 <processOnSMS+0x1c8a>
    67e0:	e0b6      	b.n	6950 <processOnSMS+0x1df8>
			{
				if (response_sms_processed_cmd == true)
    67e2:	4b2d      	ldr	r3, [pc, #180]	; (6898 <processOnSMS+0x1d40>)
    67e4:	2294      	movs	r2, #148	; 0x94
    67e6:	0052      	lsls	r2, r2, #1
    67e8:	4694      	mov	ip, r2
    67ea:	2208      	movs	r2, #8
    67ec:	4690      	mov	r8, r2
    67ee:	44b8      	add	r8, r7
    67f0:	44c4      	add	ip, r8
    67f2:	4463      	add	r3, ip
    67f4:	781b      	ldrb	r3, [r3, #0]
    67f6:	2b00      	cmp	r3, #0
    67f8:	d100      	bne.n	67fc <processOnSMS+0x1ca4>
    67fa:	e0a9      	b.n	6950 <processOnSMS+0x1df8>
				{
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
    67fc:	230c      	movs	r3, #12
    67fe:	2208      	movs	r2, #8
    6800:	4694      	mov	ip, r2
    6802:	44bc      	add	ip, r7
    6804:	4463      	add	r3, ip
    6806:	4a2f      	ldr	r2, [pc, #188]	; (68c4 <processOnSMS+0x1d6c>)
    6808:	ca13      	ldmia	r2!, {r0, r1, r4}
    680a:	c313      	stmia	r3!, {r0, r1, r4}
    680c:	ca13      	ldmia	r2!, {r0, r1, r4}
    680e:	c313      	stmia	r3!, {r0, r1, r4}
    6810:	ca03      	ldmia	r2!, {r0, r1}
    6812:	c303      	stmia	r3!, {r0, r1}
    6814:	e09c      	b.n	6950 <processOnSMS+0x1df8>
				}
			}
		}
	}
	else if (StringstartsWith(received_command,"MM+"))
    6816:	4a2c      	ldr	r2, [pc, #176]	; (68c8 <processOnSMS+0x1d70>)
    6818:	68fb      	ldr	r3, [r7, #12]
    681a:	0011      	movs	r1, r2
    681c:	0018      	movs	r0, r3
    681e:	4b1a      	ldr	r3, [pc, #104]	; (6888 <processOnSMS+0x1d30>)
    6820:	4798      	blx	r3
    6822:	1e03      	subs	r3, r0, #0
    6824:	d056      	beq.n	68d4 <processOnSMS+0x1d7c>
	{
		//if (isNumeric(str))
		{
			memmove(received_command,received_command+3,strlen(received_command));
    6826:	68fb      	ldr	r3, [r7, #12]
    6828:	1cdc      	adds	r4, r3, #3
    682a:	68fb      	ldr	r3, [r7, #12]
    682c:	0018      	movs	r0, r3
    682e:	4b17      	ldr	r3, [pc, #92]	; (688c <processOnSMS+0x1d34>)
    6830:	4798      	blx	r3
    6832:	0002      	movs	r2, r0
    6834:	68fb      	ldr	r3, [r7, #12]
    6836:	0021      	movs	r1, r4
    6838:	0018      	movs	r0, r3
    683a:	4b15      	ldr	r3, [pc, #84]	; (6890 <processOnSMS+0x1d38>)
    683c:	4798      	blx	r3
			addM2MNumber(received_command);
    683e:	68fb      	ldr	r3, [r7, #12]
    6840:	0018      	movs	r0, r3
    6842:	4b22      	ldr	r3, [pc, #136]	; (68cc <processOnSMS+0x1d74>)
    6844:	4798      	blx	r3
			incomingSMSProcessed=true;
    6846:	2328      	movs	r3, #40	; 0x28
    6848:	33ff      	adds	r3, #255	; 0xff
    684a:	2208      	movs	r2, #8
    684c:	4694      	mov	ip, r2
    684e:	44bc      	add	ip, r7
    6850:	4463      	add	r3, ip
    6852:	2201      	movs	r2, #1
    6854:	701a      	strb	r2, [r3, #0]

			if (response_sms_processed_cmd == true)
    6856:	4b10      	ldr	r3, [pc, #64]	; (6898 <processOnSMS+0x1d40>)
    6858:	2294      	movs	r2, #148	; 0x94
    685a:	0052      	lsls	r2, r2, #1
    685c:	4694      	mov	ip, r2
    685e:	2208      	movs	r2, #8
    6860:	4690      	mov	r8, r2
    6862:	44b8      	add	r8, r7
    6864:	44c4      	add	ip, r8
    6866:	4463      	add	r3, ip
    6868:	781b      	ldrb	r3, [r3, #0]
    686a:	2b00      	cmp	r3, #0
    686c:	d070      	beq.n	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"M2M NO. ADDED");
    686e:	230c      	movs	r3, #12
    6870:	2208      	movs	r2, #8
    6872:	4694      	mov	ip, r2
    6874:	44bc      	add	ip, r7
    6876:	4463      	add	r3, ip
    6878:	4a15      	ldr	r2, [pc, #84]	; (68d0 <processOnSMS+0x1d78>)
    687a:	ca13      	ldmia	r2!, {r0, r1, r4}
    687c:	c313      	stmia	r3!, {r0, r1, r4}
    687e:	8812      	ldrh	r2, [r2, #0]
    6880:	801a      	strh	r2, [r3, #0]
    6882:	e065      	b.n	6950 <processOnSMS+0x1df8>
    6884:	00019344 	.word	0x00019344
    6888:	00003e0d 	.word	0x00003e0d
    688c:	00017f67 	.word	0x00017f67
    6890:	00017cb3 	.word	0x00017cb3
    6894:	00000ef1 	.word	0x00000ef1
    6898:	fffffeda 	.word	0xfffffeda
    689c:	00019348 	.word	0x00019348
    68a0:	00019354 	.word	0x00019354
    68a4:	00017ca1 	.word	0x00017ca1
    68a8:	00017f21 	.word	0x00017f21
    68ac:	00019358 	.word	0x00019358
    68b0:	0001936c 	.word	0x0001936c
    68b4:	00000fed 	.word	0x00000fed
    68b8:	00019370 	.word	0x00019370
    68bc:	00019388 	.word	0x00019388
    68c0:	00001239 	.word	0x00001239
    68c4:	0001938c 	.word	0x0001938c
    68c8:	000193ac 	.word	0x000193ac
    68cc:	00000c49 	.word	0x00000c49
    68d0:	000193b0 	.word	0x000193b0
			}
		}
	}
	
	else if (StringstartsWith(received_command,"MR+"))
    68d4:	4a44      	ldr	r2, [pc, #272]	; (69e8 <processOnSMS+0x1e90>)
    68d6:	68fb      	ldr	r3, [r7, #12]
    68d8:	0011      	movs	r1, r2
    68da:	0018      	movs	r0, r3
    68dc:	4b43      	ldr	r3, [pc, #268]	; (69ec <processOnSMS+0x1e94>)
    68de:	4798      	blx	r3
    68e0:	1e03      	subs	r3, r0, #0
    68e2:	d035      	beq.n	6950 <processOnSMS+0x1df8>
	{
		//if (isNumeric(str))
		if(factory_settings_parameter_struct.ENABLE_M2M)
    68e4:	4b42      	ldr	r3, [pc, #264]	; (69f0 <processOnSMS+0x1e98>)
    68e6:	78db      	ldrb	r3, [r3, #3]
    68e8:	2b00      	cmp	r3, #0
    68ea:	d031      	beq.n	6950 <processOnSMS+0x1df8>
		{
			memmove(received_command,received_command+3,strlen(received_command));
    68ec:	68fb      	ldr	r3, [r7, #12]
    68ee:	1cdc      	adds	r4, r3, #3
    68f0:	68fb      	ldr	r3, [r7, #12]
    68f2:	0018      	movs	r0, r3
    68f4:	4b3f      	ldr	r3, [pc, #252]	; (69f4 <processOnSMS+0x1e9c>)
    68f6:	4798      	blx	r3
    68f8:	0002      	movs	r2, r0
    68fa:	68fb      	ldr	r3, [r7, #12]
    68fc:	0021      	movs	r1, r4
    68fe:	0018      	movs	r0, r3
    6900:	4b3d      	ldr	r3, [pc, #244]	; (69f8 <processOnSMS+0x1ea0>)
    6902:	4798      	blx	r3
			incomingSMSProcessed=true;
    6904:	2328      	movs	r3, #40	; 0x28
    6906:	33ff      	adds	r3, #255	; 0xff
    6908:	2208      	movs	r2, #8
    690a:	4694      	mov	ip, r2
    690c:	44bc      	add	ip, r7
    690e:	4463      	add	r3, ip
    6910:	2201      	movs	r2, #1
    6912:	701a      	strb	r2, [r3, #0]
			
			addM2MRemoteNumber(received_command);
    6914:	68fb      	ldr	r3, [r7, #12]
    6916:	0018      	movs	r0, r3
    6918:	4b38      	ldr	r3, [pc, #224]	; (69fc <processOnSMS+0x1ea4>)
    691a:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    691c:	4b38      	ldr	r3, [pc, #224]	; (6a00 <processOnSMS+0x1ea8>)
    691e:	2294      	movs	r2, #148	; 0x94
    6920:	0052      	lsls	r2, r2, #1
    6922:	4694      	mov	ip, r2
    6924:	2208      	movs	r2, #8
    6926:	4690      	mov	r8, r2
    6928:	44b8      	add	r8, r7
    692a:	44c4      	add	ip, r8
    692c:	4463      	add	r3, ip
    692e:	781b      	ldrb	r3, [r3, #0]
    6930:	2b00      	cmp	r3, #0
    6932:	d00d      	beq.n	6950 <processOnSMS+0x1df8>
			{
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
    6934:	230c      	movs	r3, #12
    6936:	2208      	movs	r2, #8
    6938:	4694      	mov	ip, r2
    693a:	44bc      	add	ip, r7
    693c:	4463      	add	r3, ip
    693e:	4a31      	ldr	r2, [pc, #196]	; (6a04 <processOnSMS+0x1eac>)
    6940:	ca13      	ldmia	r2!, {r0, r1, r4}
    6942:	c313      	stmia	r3!, {r0, r1, r4}
    6944:	ca03      	ldmia	r2!, {r0, r1}
    6946:	c303      	stmia	r3!, {r0, r1}
    6948:	7812      	ldrb	r2, [r2, #0]
    694a:	701a      	strb	r2, [r3, #0]
    694c:	e000      	b.n	6950 <processOnSMS+0x1df8>
		if (alternateNumber_struct.alterNumberPresent)
    694e:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	
	if (response_sms_processed_cmd == true)
    6950:	4b2b      	ldr	r3, [pc, #172]	; (6a00 <processOnSMS+0x1ea8>)
    6952:	2294      	movs	r2, #148	; 0x94
    6954:	0052      	lsls	r2, r2, #1
    6956:	4694      	mov	ip, r2
    6958:	2208      	movs	r2, #8
    695a:	4690      	mov	r8, r2
    695c:	44b8      	add	r8, r7
    695e:	44c4      	add	ip, r8
    6960:	4463      	add	r3, ip
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	2b00      	cmp	r3, #0
    6966:	d03a      	beq.n	69de <processOnSMS+0x1e86>
	{
		if(!incomingSMSProcessed)
    6968:	2328      	movs	r3, #40	; 0x28
    696a:	33ff      	adds	r3, #255	; 0xff
    696c:	2208      	movs	r2, #8
    696e:	4694      	mov	ip, r2
    6970:	44bc      	add	ip, r7
    6972:	4463      	add	r3, ip
    6974:	781b      	ldrb	r3, [r3, #0]
    6976:	2201      	movs	r2, #1
    6978:	4053      	eors	r3, r2
    697a:	b2db      	uxtb	r3, r3
    697c:	2b00      	cmp	r3, #0
    697e:	d011      	beq.n	69a4 <processOnSMS+0x1e4c>
		{
			sprintf(resep_msg,"ERROR : %s",*copy_received_command);
    6980:	238c      	movs	r3, #140	; 0x8c
    6982:	005b      	lsls	r3, r3, #1
    6984:	2208      	movs	r2, #8
    6986:	4694      	mov	ip, r2
    6988:	44bc      	add	ip, r7
    698a:	4463      	add	r3, ip
    698c:	681b      	ldr	r3, [r3, #0]
    698e:	781b      	ldrb	r3, [r3, #0]
    6990:	001a      	movs	r2, r3
    6992:	491d      	ldr	r1, [pc, #116]	; (6a08 <processOnSMS+0x1eb0>)
    6994:	230c      	movs	r3, #12
    6996:	2008      	movs	r0, #8
    6998:	4684      	mov	ip, r0
    699a:	44bc      	add	ip, r7
    699c:	4463      	add	r3, ip
    699e:	0018      	movs	r0, r3
    69a0:	4b1a      	ldr	r3, [pc, #104]	; (6a0c <processOnSMS+0x1eb4>)
    69a2:	4798      	blx	r3
		}
		setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    69a4:	23a0      	movs	r3, #160	; 0xa0
    69a6:	005b      	lsls	r3, r3, #1
    69a8:	2208      	movs	r2, #8
    69aa:	4694      	mov	ip, r2
    69ac:	44bc      	add	ip, r7
    69ae:	4463      	add	r3, ip
    69b0:	681b      	ldr	r3, [r3, #0]
    69b2:	2200      	movs	r2, #0
    69b4:	0019      	movs	r1, r3
    69b6:	2005      	movs	r0, #5
    69b8:	4b15      	ldr	r3, [pc, #84]	; (6a10 <processOnSMS+0x1eb8>)
    69ba:	4798      	blx	r3
		gsm_send_sms(phone_number,resep_msg);
    69bc:	230c      	movs	r3, #12
    69be:	2208      	movs	r2, #8
    69c0:	18ba      	adds	r2, r7, r2
    69c2:	18d2      	adds	r2, r2, r3
    69c4:	23a0      	movs	r3, #160	; 0xa0
    69c6:	005b      	lsls	r3, r3, #1
    69c8:	2108      	movs	r1, #8
    69ca:	468c      	mov	ip, r1
    69cc:	44bc      	add	ip, r7
    69ce:	4463      	add	r3, ip
    69d0:	681b      	ldr	r3, [r3, #0]
    69d2:	0011      	movs	r1, r2
    69d4:	0018      	movs	r0, r3
    69d6:	4b0f      	ldr	r3, [pc, #60]	; (6a14 <processOnSMS+0x1ebc>)
    69d8:	4798      	blx	r3
    69da:	e000      	b.n	69de <processOnSMS+0x1e86>
		return;
    69dc:	46c0      	nop			; (mov r8, r8)
	}
}
    69de:	46bd      	mov	sp, r7
    69e0:	b04c      	add	sp, #304	; 0x130
    69e2:	bc04      	pop	{r2}
    69e4:	4690      	mov	r8, r2
    69e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69e8:	000193c0 	.word	0x000193c0
    69ec:	00003e0d 	.word	0x00003e0d
    69f0:	20000628 	.word	0x20000628
    69f4:	00017f67 	.word	0x00017f67
    69f8:	00017cb3 	.word	0x00017cb3
    69fc:	00000cb1 	.word	0x00000cb1
    6a00:	fffffeda 	.word	0xfffffeda
    6a04:	000193c4 	.word	0x000193c4
    6a08:	000193dc 	.word	0x000193dc
    6a0c:	00017edd 	.word	0x00017edd
    6a10:	0000bd65 	.word	0x0000bd65
    6a14:	0000290d 	.word	0x0000290d

00006a18 <buildStatusMessage>:

void buildStatusMessage(char *resep_msg)
{
    6a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a1a:	b091      	sub	sp, #68	; 0x44
    6a1c:	af06      	add	r7, sp, #24
    6a1e:	6078      	str	r0, [r7, #4]
	uint8_t network= gsm_getsignalstrength();
    6a20:	2327      	movs	r3, #39	; 0x27
    6a22:	18fc      	adds	r4, r7, r3
    6a24:	4b32      	ldr	r3, [pc, #200]	; (6af0 <buildStatusMessage+0xd8>)
    6a26:	4798      	blx	r3
    6a28:	0003      	movs	r3, r0
    6a2a:	7023      	strb	r3, [r4, #0]
	char strACState[10],strSeq[7],strMotor[5];
	switch(structThreePhase_state.u8t_phase_ac_state)
    6a2c:	4b31      	ldr	r3, [pc, #196]	; (6af4 <buildStatusMessage+0xdc>)
    6a2e:	785b      	ldrb	r3, [r3, #1]
    6a30:	b2db      	uxtb	r3, r3
    6a32:	2b02      	cmp	r3, #2
    6a34:	d009      	beq.n	6a4a <buildStatusMessage+0x32>
    6a36:	2b03      	cmp	r3, #3
    6a38:	d10d      	bne.n	6a56 <buildStatusMessage+0x3e>
	{
		case AC_3PH:
		sprintf(strACState,(const uint8_t*)("ON"));
    6a3a:	231c      	movs	r3, #28
    6a3c:	18fb      	adds	r3, r7, r3
    6a3e:	4a2e      	ldr	r2, [pc, #184]	; (6af8 <buildStatusMessage+0xe0>)
    6a40:	8811      	ldrh	r1, [r2, #0]
    6a42:	8019      	strh	r1, [r3, #0]
    6a44:	7892      	ldrb	r2, [r2, #2]
    6a46:	709a      	strb	r2, [r3, #2]
		break;
    6a48:	e00a      	b.n	6a60 <buildStatusMessage+0x48>
		case AC_2PH:
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
    6a4a:	231c      	movs	r3, #28
    6a4c:	18fb      	adds	r3, r7, r3
    6a4e:	4a2b      	ldr	r2, [pc, #172]	; (6afc <buildStatusMessage+0xe4>)
    6a50:	ca03      	ldmia	r2!, {r0, r1}
    6a52:	c303      	stmia	r3!, {r0, r1}
		break;
    6a54:	e004      	b.n	6a60 <buildStatusMessage+0x48>
		default:
		sprintf(strACState,(const uint8_t*)("OFF"));
    6a56:	231c      	movs	r3, #28
    6a58:	18fb      	adds	r3, r7, r3
    6a5a:	4a29      	ldr	r2, [pc, #164]	; (6b00 <buildStatusMessage+0xe8>)
    6a5c:	601a      	str	r2, [r3, #0]
		break;
    6a5e:	46c0      	nop			; (mov r8, r8)
	}
	
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    6a60:	4b24      	ldr	r3, [pc, #144]	; (6af4 <buildStatusMessage+0xdc>)
    6a62:	781b      	ldrb	r3, [r3, #0]
    6a64:	b2db      	uxtb	r3, r3
    6a66:	2b02      	cmp	r3, #2
    6a68:	d107      	bne.n	6a7a <buildStatusMessage+0x62>
	{
		sprintf(strSeq,(const uint8_t*)("OK"));
    6a6a:	2314      	movs	r3, #20
    6a6c:	18fb      	adds	r3, r7, r3
    6a6e:	4a25      	ldr	r2, [pc, #148]	; (6b04 <buildStatusMessage+0xec>)
    6a70:	8811      	ldrh	r1, [r2, #0]
    6a72:	8019      	strh	r1, [r3, #0]
    6a74:	7892      	ldrb	r2, [r2, #2]
    6a76:	709a      	strb	r2, [r3, #2]
    6a78:	e006      	b.n	6a88 <buildStatusMessage+0x70>
	}
	else
	{
		sprintf(strSeq,(const uint8_t*)("ERROR"));
    6a7a:	2314      	movs	r3, #20
    6a7c:	18fb      	adds	r3, r7, r3
    6a7e:	4a22      	ldr	r2, [pc, #136]	; (6b08 <buildStatusMessage+0xf0>)
    6a80:	6811      	ldr	r1, [r2, #0]
    6a82:	6019      	str	r1, [r3, #0]
    6a84:	8892      	ldrh	r2, [r2, #4]
    6a86:	809a      	strh	r2, [r3, #4]
	}
	
	if(getMotorState())
    6a88:	4b20      	ldr	r3, [pc, #128]	; (6b0c <buildStatusMessage+0xf4>)
    6a8a:	4798      	blx	r3
    6a8c:	1e03      	subs	r3, r0, #0
    6a8e:	d007      	beq.n	6aa0 <buildStatusMessage+0x88>
	{
		sprintf(strMotor,(const uint8_t*)("ON"));
    6a90:	230c      	movs	r3, #12
    6a92:	18fb      	adds	r3, r7, r3
    6a94:	4a18      	ldr	r2, [pc, #96]	; (6af8 <buildStatusMessage+0xe0>)
    6a96:	8811      	ldrh	r1, [r2, #0]
    6a98:	8019      	strh	r1, [r3, #0]
    6a9a:	7892      	ldrb	r2, [r2, #2]
    6a9c:	709a      	strb	r2, [r3, #2]
    6a9e:	e003      	b.n	6aa8 <buildStatusMessage+0x90>
	}
	else
	{
		sprintf(strMotor,(const uint8_t*)("OFF"));
    6aa0:	230c      	movs	r3, #12
    6aa2:	18fb      	adds	r3, r7, r3
    6aa4:	4a16      	ldr	r2, [pc, #88]	; (6b00 <buildStatusMessage+0xe8>)
    6aa6:	601a      	str	r2, [r3, #0]
	}
	
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
    6aa8:	4b19      	ldr	r3, [pc, #100]	; (6b10 <buildStatusMessage+0xf8>)
    6aaa:	681c      	ldr	r4, [r3, #0]
    6aac:	4b18      	ldr	r3, [pc, #96]	; (6b10 <buildStatusMessage+0xf8>)
    6aae:	685d      	ldr	r5, [r3, #4]
    6ab0:	4b17      	ldr	r3, [pc, #92]	; (6b10 <buildStatusMessage+0xf8>)
    6ab2:	689b      	ldr	r3, [r3, #8]
	Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage,
	strACState,strSeq,strMotor,Analog_Parameter_Struct.Motor_Current_IntPart,network);
    6ab4:	4a16      	ldr	r2, [pc, #88]	; (6b10 <buildStatusMessage+0xf8>)
    6ab6:	8a92      	ldrh	r2, [r2, #20]
    6ab8:	b292      	uxth	r2, r2
	sprintf(resep_msg,"RY: %d YB: %d BR: %d\nAC: %s\nSequence: %s\nMotor: %s\nCurrent: %dA\nNetwork: %d",
    6aba:	0016      	movs	r6, r2
    6abc:	2227      	movs	r2, #39	; 0x27
    6abe:	18ba      	adds	r2, r7, r2
    6ac0:	7812      	ldrb	r2, [r2, #0]
    6ac2:	4914      	ldr	r1, [pc, #80]	; (6b14 <buildStatusMessage+0xfc>)
    6ac4:	6878      	ldr	r0, [r7, #4]
    6ac6:	9205      	str	r2, [sp, #20]
    6ac8:	9604      	str	r6, [sp, #16]
    6aca:	220c      	movs	r2, #12
    6acc:	18ba      	adds	r2, r7, r2
    6ace:	9203      	str	r2, [sp, #12]
    6ad0:	2214      	movs	r2, #20
    6ad2:	18ba      	adds	r2, r7, r2
    6ad4:	9202      	str	r2, [sp, #8]
    6ad6:	221c      	movs	r2, #28
    6ad8:	18ba      	adds	r2, r7, r2
    6ada:	9201      	str	r2, [sp, #4]
    6adc:	9300      	str	r3, [sp, #0]
    6ade:	002b      	movs	r3, r5
    6ae0:	0022      	movs	r2, r4
    6ae2:	4c0d      	ldr	r4, [pc, #52]	; (6b18 <buildStatusMessage+0x100>)
    6ae4:	47a0      	blx	r4
}
    6ae6:	46c0      	nop			; (mov r8, r8)
    6ae8:	46bd      	mov	sp, r7
    6aea:	b00b      	add	sp, #44	; 0x2c
    6aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6aee:	46c0      	nop			; (mov r8, r8)
    6af0:	000026c5 	.word	0x000026c5
    6af4:	20000720 	.word	0x20000720
    6af8:	000193e8 	.word	0x000193e8
    6afc:	000193ec 	.word	0x000193ec
    6b00:	0046464f 	.word	0x0046464f
    6b04:	000193f4 	.word	0x000193f4
    6b08:	000193f8 	.word	0x000193f8
    6b0c:	00009e8d 	.word	0x00009e8d
    6b10:	200006dc 	.word	0x200006dc
    6b14:	00019400 	.word	0x00019400
    6b18:	00017edd 	.word	0x00017edd

00006b1c <checkNumber>:


bool checkNumber(char *number)
{
    6b1c:	b580      	push	{r7, lr}
    6b1e:	b082      	sub	sp, #8
    6b20:	af00      	add	r7, sp, #0
    6b22:	6078      	str	r0, [r7, #4]
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
    6b24:	687b      	ldr	r3, [r7, #4]
    6b26:	0018      	movs	r0, r3
    6b28:	4b0a      	ldr	r3, [pc, #40]	; (6b54 <checkNumber+0x38>)
    6b2a:	4798      	blx	r3
    6b2c:	1e03      	subs	r3, r0, #0
    6b2e:	d109      	bne.n	6b44 <checkNumber+0x28>
    6b30:	687b      	ldr	r3, [r7, #4]
    6b32:	0018      	movs	r0, r3
    6b34:	4b08      	ldr	r3, [pc, #32]	; (6b58 <checkNumber+0x3c>)
    6b36:	4798      	blx	r3
    6b38:	0003      	movs	r3, r0
    6b3a:	001a      	movs	r2, r3
    6b3c:	4b07      	ldr	r3, [pc, #28]	; (6b5c <checkNumber+0x40>)
    6b3e:	785b      	ldrb	r3, [r3, #1]
    6b40:	429a      	cmp	r2, r3
    6b42:	d201      	bcs.n	6b48 <checkNumber+0x2c>
	{
		return true;
    6b44:	2301      	movs	r3, #1
    6b46:	e000      	b.n	6b4a <checkNumber+0x2e>
	}
	else
	{
		return false;
    6b48:	2300      	movs	r3, #0
	}
}
    6b4a:	0018      	movs	r0, r3
    6b4c:	46bd      	mov	sp, r7
    6b4e:	b002      	add	sp, #8
    6b50:	bd80      	pop	{r7, pc}
    6b52:	46c0      	nop			; (mov r8, r8)
    6b54:	00001991 	.word	0x00001991
    6b58:	00000ded 	.word	0x00000ded
    6b5c:	20000610 	.word	0x20000610

00006b60 <checkNoCallTime>:

bool checkNoCallTime(void)
{
    6b60:	b580      	push	{r7, lr}
    6b62:	b082      	sub	sp, #8
    6b64:	af00      	add	r7, sp, #0
	uint8_t globalHours, globalMinutes;
	getSystemTime(&globalHours,&globalMinutes);
    6b66:	1dba      	adds	r2, r7, #6
    6b68:	1dfb      	adds	r3, r7, #7
    6b6a:	0011      	movs	r1, r2
    6b6c:	0018      	movs	r0, r3
    6b6e:	4b2b      	ldr	r3, [pc, #172]	; (6c1c <checkNoCallTime+0xbc>)
    6b70:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
    6b72:	4b2b      	ldr	r3, [pc, #172]	; (6c20 <checkNoCallTime+0xc0>)
    6b74:	7a9a      	ldrb	r2, [r3, #10]
    6b76:	1dfb      	adds	r3, r7, #7
    6b78:	781b      	ldrb	r3, [r3, #0]
    6b7a:	429a      	cmp	r2, r3
    6b7c:	d849      	bhi.n	6c12 <checkNoCallTime+0xb2>
    6b7e:	4b28      	ldr	r3, [pc, #160]	; (6c20 <checkNoCallTime+0xc0>)
    6b80:	7b1a      	ldrb	r2, [r3, #12]
    6b82:	1dfb      	adds	r3, r7, #7
    6b84:	781b      	ldrb	r3, [r3, #0]
    6b86:	429a      	cmp	r2, r3
    6b88:	d343      	bcc.n	6c12 <checkNoCallTime+0xb2>
	{
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
    6b8a:	4b25      	ldr	r3, [pc, #148]	; (6c20 <checkNoCallTime+0xc0>)
    6b8c:	7a9a      	ldrb	r2, [r3, #10]
    6b8e:	4b24      	ldr	r3, [pc, #144]	; (6c20 <checkNoCallTime+0xc0>)
    6b90:	7b1b      	ldrb	r3, [r3, #12]
    6b92:	429a      	cmp	r2, r3
    6b94:	d10f      	bne.n	6bb6 <checkNoCallTime+0x56>
		{
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
    6b96:	4b22      	ldr	r3, [pc, #136]	; (6c20 <checkNoCallTime+0xc0>)
    6b98:	7ada      	ldrb	r2, [r3, #11]
    6b9a:	1dbb      	adds	r3, r7, #6
    6b9c:	781b      	ldrb	r3, [r3, #0]
    6b9e:	429a      	cmp	r2, r3
    6ba0:	d807      	bhi.n	6bb2 <checkNoCallTime+0x52>
    6ba2:	4b1f      	ldr	r3, [pc, #124]	; (6c20 <checkNoCallTime+0xc0>)
    6ba4:	7b5a      	ldrb	r2, [r3, #13]
    6ba6:	1dbb      	adds	r3, r7, #6
    6ba8:	781b      	ldrb	r3, [r3, #0]
    6baa:	429a      	cmp	r2, r3
    6bac:	d301      	bcc.n	6bb2 <checkNoCallTime+0x52>
			return true;
    6bae:	2301      	movs	r3, #1
    6bb0:	e030      	b.n	6c14 <checkNoCallTime+0xb4>
			else
			return false;
    6bb2:	2300      	movs	r3, #0
    6bb4:	e02e      	b.n	6c14 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
    6bb6:	4b1a      	ldr	r3, [pc, #104]	; (6c20 <checkNoCallTime+0xc0>)
    6bb8:	7a9a      	ldrb	r2, [r3, #10]
    6bba:	1dfb      	adds	r3, r7, #7
    6bbc:	781b      	ldrb	r3, [r3, #0]
    6bbe:	429a      	cmp	r2, r3
    6bc0:	d109      	bne.n	6bd6 <checkNoCallTime+0x76>
		{
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
    6bc2:	4b17      	ldr	r3, [pc, #92]	; (6c20 <checkNoCallTime+0xc0>)
    6bc4:	7ada      	ldrb	r2, [r3, #11]
    6bc6:	1dbb      	adds	r3, r7, #6
    6bc8:	781b      	ldrb	r3, [r3, #0]
    6bca:	429a      	cmp	r2, r3
    6bcc:	d801      	bhi.n	6bd2 <checkNoCallTime+0x72>
			return true;
    6bce:	2301      	movs	r3, #1
    6bd0:	e020      	b.n	6c14 <checkNoCallTime+0xb4>
			else
			return false;
    6bd2:	2300      	movs	r3, #0
    6bd4:	e01e      	b.n	6c14 <checkNoCallTime+0xb4>
		}
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
    6bd6:	4b12      	ldr	r3, [pc, #72]	; (6c20 <checkNoCallTime+0xc0>)
    6bd8:	7b1a      	ldrb	r2, [r3, #12]
    6bda:	1dfb      	adds	r3, r7, #7
    6bdc:	781b      	ldrb	r3, [r3, #0]
    6bde:	429a      	cmp	r2, r3
    6be0:	d109      	bne.n	6bf6 <checkNoCallTime+0x96>
		{
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
    6be2:	4b0f      	ldr	r3, [pc, #60]	; (6c20 <checkNoCallTime+0xc0>)
    6be4:	7b5a      	ldrb	r2, [r3, #13]
    6be6:	1dbb      	adds	r3, r7, #6
    6be8:	781b      	ldrb	r3, [r3, #0]
    6bea:	429a      	cmp	r2, r3
    6bec:	d301      	bcc.n	6bf2 <checkNoCallTime+0x92>
			return true;
    6bee:	2301      	movs	r3, #1
    6bf0:	e010      	b.n	6c14 <checkNoCallTime+0xb4>
			else
			return false;
    6bf2:	2300      	movs	r3, #0
    6bf4:	e00e      	b.n	6c14 <checkNoCallTime+0xb4>
		}
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
    6bf6:	4b0a      	ldr	r3, [pc, #40]	; (6c20 <checkNoCallTime+0xc0>)
    6bf8:	7a9a      	ldrb	r2, [r3, #10]
    6bfa:	1dfb      	adds	r3, r7, #7
    6bfc:	781b      	ldrb	r3, [r3, #0]
    6bfe:	429a      	cmp	r2, r3
    6c00:	d207      	bcs.n	6c12 <checkNoCallTime+0xb2>
    6c02:	4b07      	ldr	r3, [pc, #28]	; (6c20 <checkNoCallTime+0xc0>)
    6c04:	7b1a      	ldrb	r2, [r3, #12]
    6c06:	1dfb      	adds	r3, r7, #7
    6c08:	781b      	ldrb	r3, [r3, #0]
    6c0a:	429a      	cmp	r2, r3
    6c0c:	d901      	bls.n	6c12 <checkNoCallTime+0xb2>
		return true;
    6c0e:	2301      	movs	r3, #1
    6c10:	e000      	b.n	6c14 <checkNoCallTime+0xb4>
	}
	return false;
    6c12:	2300      	movs	r3, #0
}
    6c14:	0018      	movs	r0, r3
    6c16:	46bd      	mov	sp, r7
    6c18:	b002      	add	sp, #8
    6c1a:	bd80      	pop	{r7, pc}
    6c1c:	00006e5d 	.word	0x00006e5d
    6c20:	2000065c 	.word	0x2000065c

00006c24 <verifyRemoteNumber>:

void verifyRemoteNumber(void)
{
    6c24:	b580      	push	{r7, lr}
    6c26:	af00      	add	r7, sp, #0
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
    6c28:	4b04      	ldr	r3, [pc, #16]	; (6c3c <verifyRemoteNumber+0x18>)
    6c2a:	2201      	movs	r2, #1
    6c2c:	2101      	movs	r1, #1
    6c2e:	0018      	movs	r0, r3
    6c30:	4b03      	ldr	r3, [pc, #12]	; (6c40 <verifyRemoteNumber+0x1c>)
    6c32:	4798      	blx	r3
}
    6c34:	46c0      	nop			; (mov r8, r8)
    6c36:	46bd      	mov	sp, r7
    6c38:	bd80      	pop	{r7, pc}
    6c3a:	46c0      	nop			; (mov r8, r8)
    6c3c:	0001944c 	.word	0x0001944c
    6c40:	00006c45 	.word	0x00006c45

00006c44 <sendSMS>:

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
{
    6c44:	b580      	push	{r7, lr}
    6c46:	b08e      	sub	sp, #56	; 0x38
    6c48:	af00      	add	r7, sp, #0
    6c4a:	6078      	str	r0, [r7, #4]
    6c4c:	0008      	movs	r0, r1
    6c4e:	0011      	movs	r1, r2
    6c50:	1cfb      	adds	r3, r7, #3
    6c52:	1c02      	adds	r2, r0, #0
    6c54:	701a      	strb	r2, [r3, #0]
    6c56:	1cbb      	adds	r3, r7, #2
    6c58:	1c0a      	adds	r2, r1, #0
    6c5a:	701a      	strb	r2, [r3, #0]
	inCall=true;
    6c5c:	4b55      	ldr	r3, [pc, #340]	; (6db4 <sendSMS+0x170>)
    6c5e:	2201      	movs	r2, #1
    6c60:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
    6c62:	1cfb      	adds	r3, r7, #3
    6c64:	781b      	ldrb	r3, [r3, #0]
    6c66:	2201      	movs	r2, #1
    6c68:	4053      	eors	r3, r2
    6c6a:	b2db      	uxtb	r3, r3
    6c6c:	2b00      	cmp	r3, #0
    6c6e:	d048      	beq.n	6d02 <sendSMS+0xbe>
	{
		switch(actionType)
    6c70:	4b51      	ldr	r3, [pc, #324]	; (6db8 <sendSMS+0x174>)
    6c72:	781b      	ldrb	r3, [r3, #0]
    6c74:	3b43      	subs	r3, #67	; 0x43
    6c76:	2b12      	cmp	r3, #18
    6c78:	d900      	bls.n	6c7c <sendSMS+0x38>
    6c7a:	e096      	b.n	6daa <sendSMS+0x166>
    6c7c:	009a      	lsls	r2, r3, #2
    6c7e:	4b4f      	ldr	r3, [pc, #316]	; (6dbc <sendSMS+0x178>)
    6c80:	18d3      	adds	r3, r2, r3
    6c82:	681b      	ldr	r3, [r3, #0]
    6c84:	469f      	mov	pc, r3
		{
			case 'S':
			strcat(msg,STR_MOTOR);
    6c86:	687b      	ldr	r3, [r7, #4]
    6c88:	0018      	movs	r0, r3
    6c8a:	4b4d      	ldr	r3, [pc, #308]	; (6dc0 <sendSMS+0x17c>)
    6c8c:	4798      	blx	r3
    6c8e:	0003      	movs	r3, r0
    6c90:	001a      	movs	r2, r3
    6c92:	687b      	ldr	r3, [r7, #4]
    6c94:	189a      	adds	r2, r3, r2
    6c96:	4b4b      	ldr	r3, [pc, #300]	; (6dc4 <sendSMS+0x180>)
    6c98:	0010      	movs	r0, r2
    6c9a:	0019      	movs	r1, r3
    6c9c:	2307      	movs	r3, #7
    6c9e:	001a      	movs	r2, r3
    6ca0:	4b49      	ldr	r3, [pc, #292]	; (6dc8 <sendSMS+0x184>)
    6ca2:	4798      	blx	r3
			strcat(msg,STR_ON);
    6ca4:	687b      	ldr	r3, [r7, #4]
    6ca6:	0018      	movs	r0, r3
    6ca8:	4b45      	ldr	r3, [pc, #276]	; (6dc0 <sendSMS+0x17c>)
    6caa:	4798      	blx	r3
    6cac:	0003      	movs	r3, r0
    6cae:	001a      	movs	r2, r3
    6cb0:	687b      	ldr	r3, [r7, #4]
    6cb2:	189a      	adds	r2, r3, r2
    6cb4:	4b45      	ldr	r3, [pc, #276]	; (6dcc <sendSMS+0x188>)
    6cb6:	0010      	movs	r0, r2
    6cb8:	0019      	movs	r1, r3
    6cba:	2303      	movs	r3, #3
    6cbc:	001a      	movs	r2, r3
    6cbe:	4b42      	ldr	r3, [pc, #264]	; (6dc8 <sendSMS+0x184>)
    6cc0:	4798      	blx	r3
			break;
    6cc2:	e01e      	b.n	6d02 <sendSMS+0xbe>
			case 'O':
			case 'U':
			case 'C':
			case 'F':
			strcat(msg,STR_MOTOR);
    6cc4:	687b      	ldr	r3, [r7, #4]
    6cc6:	0018      	movs	r0, r3
    6cc8:	4b3d      	ldr	r3, [pc, #244]	; (6dc0 <sendSMS+0x17c>)
    6cca:	4798      	blx	r3
    6ccc:	0003      	movs	r3, r0
    6cce:	001a      	movs	r2, r3
    6cd0:	687b      	ldr	r3, [r7, #4]
    6cd2:	189a      	adds	r2, r3, r2
    6cd4:	4b3b      	ldr	r3, [pc, #236]	; (6dc4 <sendSMS+0x180>)
    6cd6:	0010      	movs	r0, r2
    6cd8:	0019      	movs	r1, r3
    6cda:	2307      	movs	r3, #7
    6cdc:	001a      	movs	r2, r3
    6cde:	4b3a      	ldr	r3, [pc, #232]	; (6dc8 <sendSMS+0x184>)
    6ce0:	4798      	blx	r3
			strcat(msg,STR_OFF);
    6ce2:	687b      	ldr	r3, [r7, #4]
    6ce4:	0018      	movs	r0, r3
    6ce6:	4b36      	ldr	r3, [pc, #216]	; (6dc0 <sendSMS+0x17c>)
    6ce8:	4798      	blx	r3
    6cea:	0003      	movs	r3, r0
    6cec:	001a      	movs	r2, r3
    6cee:	687b      	ldr	r3, [r7, #4]
    6cf0:	189a      	adds	r2, r3, r2
    6cf2:	4b37      	ldr	r3, [pc, #220]	; (6dd0 <sendSMS+0x18c>)
    6cf4:	0010      	movs	r0, r2
    6cf6:	0019      	movs	r1, r3
    6cf8:	2304      	movs	r3, #4
    6cfa:	001a      	movs	r2, r3
    6cfc:	4b32      	ldr	r3, [pc, #200]	; (6dc8 <sendSMS+0x184>)
    6cfe:	4798      	blx	r3
			break;
    6d00:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
    6d02:	1cbb      	adds	r3, r7, #2
    6d04:	781b      	ldrb	r3, [r3, #0]
    6d06:	2b02      	cmp	r3, #2
    6d08:	d105      	bne.n	6d16 <sendSMS+0xd2>
	{
		getM2MNumber(phone_number);
    6d0a:	2324      	movs	r3, #36	; 0x24
    6d0c:	18fb      	adds	r3, r7, r3
    6d0e:	0018      	movs	r0, r3
    6d10:	4b30      	ldr	r3, [pc, #192]	; (6dd4 <sendSMS+0x190>)
    6d12:	4798      	blx	r3
    6d14:	e034      	b.n	6d80 <sendSMS+0x13c>
	}
	else if (isM2M==SEND_TO_M2M_REMOTE)
    6d16:	1cbb      	adds	r3, r7, #2
    6d18:	781b      	ldrb	r3, [r3, #0]
    6d1a:	2b01      	cmp	r3, #1
    6d1c:	d109      	bne.n	6d32 <sendSMS+0xee>
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    6d1e:	4b2e      	ldr	r3, [pc, #184]	; (6dd8 <sendSMS+0x194>)
    6d20:	78db      	ldrb	r3, [r3, #3]
    6d22:	2b00      	cmp	r3, #0
    6d24:	d02c      	beq.n	6d80 <sendSMS+0x13c>
		{
			getM2MRemoteNumber(phone_number);
    6d26:	2324      	movs	r3, #36	; 0x24
    6d28:	18fb      	adds	r3, r7, r3
    6d2a:	0018      	movs	r0, r3
    6d2c:	4b2b      	ldr	r3, [pc, #172]	; (6ddc <sendSMS+0x198>)
    6d2e:	4798      	blx	r3
    6d30:	e026      	b.n	6d80 <sendSMS+0x13c>
		}
	}
	else
	{
		if (isMsgFromAdmin)
    6d32:	4b2b      	ldr	r3, [pc, #172]	; (6de0 <sendSMS+0x19c>)
    6d34:	781b      	ldrb	r3, [r3, #0]
    6d36:	2b00      	cmp	r3, #0
    6d38:	d01d      	beq.n	6d76 <sendSMS+0x132>
		{
			struct mobile_no_struct mobile_no;
			memset(page_data, '\0', sizeof(page_data));
    6d3a:	4b2a      	ldr	r3, [pc, #168]	; (6de4 <sendSMS+0x1a0>)
    6d3c:	223c      	movs	r2, #60	; 0x3c
    6d3e:	2100      	movs	r1, #0
    6d40:	0018      	movs	r0, r3
    6d42:	4b29      	ldr	r3, [pc, #164]	; (6de8 <sendSMS+0x1a4>)
    6d44:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
    6d46:	4b27      	ldr	r3, [pc, #156]	; (6de4 <sendSMS+0x1a0>)
    6d48:	0019      	movs	r1, r3
    6d4a:	2003      	movs	r0, #3
    6d4c:	4b27      	ldr	r3, [pc, #156]	; (6dec <sendSMS+0x1a8>)
    6d4e:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
    6d50:	230c      	movs	r3, #12
    6d52:	18fa      	adds	r2, r7, r3
    6d54:	4b23      	ldr	r3, [pc, #140]	; (6de4 <sendSMS+0x1a0>)
    6d56:	0010      	movs	r0, r2
    6d58:	0019      	movs	r1, r3
    6d5a:	2318      	movs	r3, #24
    6d5c:	001a      	movs	r2, r3
    6d5e:	4b1a      	ldr	r3, [pc, #104]	; (6dc8 <sendSMS+0x184>)
    6d60:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
    6d62:	230c      	movs	r3, #12
    6d64:	18fb      	adds	r3, r7, r3
    6d66:	1d1a      	adds	r2, r3, #4
    6d68:	2324      	movs	r3, #36	; 0x24
    6d6a:	18fb      	adds	r3, r7, r3
    6d6c:	0011      	movs	r1, r2
    6d6e:	0018      	movs	r0, r3
    6d70:	4b1f      	ldr	r3, [pc, #124]	; (6df0 <sendSMS+0x1ac>)
    6d72:	4798      	blx	r3
    6d74:	e004      	b.n	6d80 <sendSMS+0x13c>
		}
		else
		{
			getActiveNumber(phone_number);
    6d76:	2324      	movs	r3, #36	; 0x24
    6d78:	18fb      	adds	r3, r7, r3
    6d7a:	0018      	movs	r0, r3
    6d7c:	4b1d      	ldr	r3, [pc, #116]	; (6df4 <sendSMS+0x1b0>)
    6d7e:	4798      	blx	r3
		}
	}
	setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    6d80:	2324      	movs	r3, #36	; 0x24
    6d82:	18fb      	adds	r3, r7, r3
    6d84:	2200      	movs	r2, #0
    6d86:	0019      	movs	r1, r3
    6d88:	2005      	movs	r0, #5
    6d8a:	4b1b      	ldr	r3, [pc, #108]	; (6df8 <sendSMS+0x1b4>)
    6d8c:	4798      	blx	r3
	gsm_send_sms(phone_number,msg);
    6d8e:	687a      	ldr	r2, [r7, #4]
    6d90:	2324      	movs	r3, #36	; 0x24
    6d92:	18fb      	adds	r3, r7, r3
    6d94:	0011      	movs	r1, r2
    6d96:	0018      	movs	r0, r3
    6d98:	4b18      	ldr	r3, [pc, #96]	; (6dfc <sendSMS+0x1b8>)
    6d9a:	4798      	blx	r3
	isMsgFromAdmin = false;
    6d9c:	4b10      	ldr	r3, [pc, #64]	; (6de0 <sendSMS+0x19c>)
    6d9e:	2200      	movs	r2, #0
    6da0:	701a      	strb	r2, [r3, #0]
	inCall=false;
    6da2:	4b04      	ldr	r3, [pc, #16]	; (6db4 <sendSMS+0x170>)
    6da4:	2200      	movs	r2, #0
    6da6:	701a      	strb	r2, [r3, #0]
    6da8:	e000      	b.n	6dac <sendSMS+0x168>
			return;
    6daa:	46c0      	nop			; (mov r8, r8)
}
    6dac:	46bd      	mov	sp, r7
    6dae:	b00e      	add	sp, #56	; 0x38
    6db0:	bd80      	pop	{r7, pc}
    6db2:	46c0      	nop			; (mov r8, r8)
    6db4:	20000774 	.word	0x20000774
    6db8:	2000073b 	.word	0x2000073b
    6dbc:	00019488 	.word	0x00019488
    6dc0:	00017f67 	.word	0x00017f67
    6dc4:	00019454 	.word	0x00019454
    6dc8:	00017ca1 	.word	0x00017ca1
    6dcc:	000193e8 	.word	0x000193e8
    6dd0:	0001945c 	.word	0x0001945c
    6dd4:	00000acd 	.word	0x00000acd
    6dd8:	20000628 	.word	0x20000628
    6ddc:	00000b09 	.word	0x00000b09
    6de0:	20000755 	.word	0x20000755
    6de4:	20000584 	.word	0x20000584
    6de8:	00017cd7 	.word	0x00017cd7
    6dec:	00012a75 	.word	0x00012a75
    6df0:	00017f57 	.word	0x00017f57
    6df4:	00000d21 	.word	0x00000d21
    6df8:	0000bd65 	.word	0x0000bd65
    6dfc:	0000290d 	.word	0x0000290d

00006e00 <sendDTMFTone>:

void sendDTMFTone(uint8_t eventNo)
{
    6e00:	b580      	push	{r7, lr}
    6e02:	b082      	sub	sp, #8
    6e04:	af00      	add	r7, sp, #0
    6e06:	0002      	movs	r2, r0
    6e08:	1dfb      	adds	r3, r7, #7
    6e0a:	701a      	strb	r2, [r3, #0]
	if(eventNo==0xFF)
    6e0c:	1dfb      	adds	r3, r7, #7
    6e0e:	781b      	ldrb	r3, [r3, #0]
    6e10:	2bff      	cmp	r3, #255	; 0xff
    6e12:	d103      	bne.n	6e1c <sendDTMFTone+0x1c>
	{
		gsm_send_DTMF_Tone('A');
    6e14:	2041      	movs	r0, #65	; 0x41
    6e16:	4b0f      	ldr	r3, [pc, #60]	; (6e54 <sendDTMFTone+0x54>)
    6e18:	4798      	blx	r3
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
	}
}
    6e1a:	e016      	b.n	6e4a <sendDTMFTone+0x4a>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
    6e1c:	1dfb      	adds	r3, r7, #7
    6e1e:	781b      	ldrb	r3, [r3, #0]
    6e20:	2b00      	cmp	r3, #0
    6e22:	d107      	bne.n	6e34 <sendDTMFTone+0x34>
    6e24:	4b0c      	ldr	r3, [pc, #48]	; (6e58 <sendDTMFTone+0x58>)
    6e26:	78db      	ldrb	r3, [r3, #3]
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d003      	beq.n	6e34 <sendDTMFTone+0x34>
		gsm_send_DTMF_Tone('D');
    6e2c:	2044      	movs	r0, #68	; 0x44
    6e2e:	4b09      	ldr	r3, [pc, #36]	; (6e54 <sendDTMFTone+0x54>)
    6e30:	4798      	blx	r3
}
    6e32:	e00a      	b.n	6e4a <sendDTMFTone+0x4a>
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
    6e34:	1dfb      	adds	r3, r7, #7
    6e36:	781b      	ldrb	r3, [r3, #0]
    6e38:	2b01      	cmp	r3, #1
    6e3a:	d106      	bne.n	6e4a <sendDTMFTone+0x4a>
    6e3c:	4b06      	ldr	r3, [pc, #24]	; (6e58 <sendDTMFTone+0x58>)
    6e3e:	78db      	ldrb	r3, [r3, #3]
    6e40:	2b00      	cmp	r3, #0
    6e42:	d002      	beq.n	6e4a <sendDTMFTone+0x4a>
		gsm_send_DTMF_Tone('C');
    6e44:	2043      	movs	r0, #67	; 0x43
    6e46:	4b03      	ldr	r3, [pc, #12]	; (6e54 <sendDTMFTone+0x54>)
    6e48:	4798      	blx	r3
}
    6e4a:	46c0      	nop			; (mov r8, r8)
    6e4c:	46bd      	mov	sp, r7
    6e4e:	b002      	add	sp, #8
    6e50:	bd80      	pop	{r7, pc}
    6e52:	46c0      	nop			; (mov r8, r8)
    6e54:	00002d81 	.word	0x00002d81
    6e58:	20000628 	.word	0x20000628

00006e5c <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
    6e5c:	b580      	push	{r7, lr}
    6e5e:	b082      	sub	sp, #8
    6e60:	af00      	add	r7, sp, #0
    6e62:	6078      	str	r0, [r7, #4]
    6e64:	6039      	str	r1, [r7, #0]
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
    6e66:	4b09      	ldr	r3, [pc, #36]	; (6e8c <getSystemTime+0x30>)
    6e68:	4798      	blx	r3
    6e6a:	1e03      	subs	r3, r0, #0
    6e6c:	d109      	bne.n	6e82 <getSystemTime+0x26>
	{
		*Hours = struct_internal_rtc.Network_hour;
    6e6e:	4b08      	ldr	r3, [pc, #32]	; (6e90 <getSystemTime+0x34>)
    6e70:	78db      	ldrb	r3, [r3, #3]
    6e72:	b2da      	uxtb	r2, r3
    6e74:	687b      	ldr	r3, [r7, #4]
    6e76:	701a      	strb	r2, [r3, #0]
		*Minutes = struct_internal_rtc.Network_minute;
    6e78:	4b05      	ldr	r3, [pc, #20]	; (6e90 <getSystemTime+0x34>)
    6e7a:	791b      	ldrb	r3, [r3, #4]
    6e7c:	b2da      	uxtb	r2, r3
    6e7e:	683b      	ldr	r3, [r7, #0]
    6e80:	701a      	strb	r2, [r3, #0]
	}
}
    6e82:	46c0      	nop			; (mov r8, r8)
    6e84:	46bd      	mov	sp, r7
    6e86:	b002      	add	sp, #8
    6e88:	bd80      	pop	{r7, pc}
    6e8a:	46c0      	nop			; (mov r8, r8)
    6e8c:	00002f61 	.word	0x00002f61
    6e90:	20000688 	.word	0x20000688

00006e94 <vTask_GSM_service>:
#define GSM_PWR_AS_OP	GSM_PWR_DDR|=GSM_PWR_POS
#define GSM_PWR_ON		GSM_PWR_PORT|=GSM_PWR_POS
#define GSM_PWR_OFF		GSM_PWR_PORT&=~(GSM_PWR_POS)
//////////////////////////////////////////////////////////////////////////
static void vTask_GSM_service(void *params)
{
    6e94:	b590      	push	{r4, r7, lr}
    6e96:	b0cf      	sub	sp, #316	; 0x13c
    6e98:	af02      	add	r7, sp, #8
    6e9a:	6078      	str	r0, [r7, #4]
	
	uint32_t network_update_time = 0;
    6e9c:	2300      	movs	r3, #0
    6e9e:	2296      	movs	r2, #150	; 0x96
    6ea0:	0052      	lsls	r2, r2, #1
    6ea2:	18ba      	adds	r2, r7, r2
    6ea4:	6013      	str	r3, [r2, #0]
	
	GSM_PWR_AS_OP;
    6ea6:	4bc5      	ldr	r3, [pc, #788]	; (71bc <vTask_GSM_service+0x328>)
    6ea8:	4ac4      	ldr	r2, [pc, #784]	; (71bc <vTask_GSM_service+0x328>)
    6eaa:	6812      	ldr	r2, [r2, #0]
    6eac:	2180      	movs	r1, #128	; 0x80
    6eae:	0249      	lsls	r1, r1, #9
    6eb0:	430a      	orrs	r2, r1
    6eb2:	601a      	str	r2, [r3, #0]
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
    6eb4:	2388      	movs	r3, #136	; 0x88
    6eb6:	005b      	lsls	r3, r3, #1
    6eb8:	18fb      	adds	r3, r7, r3
    6eba:	0018      	movs	r0, r3
    6ebc:	4bc0      	ldr	r3, [pc, #768]	; (71c0 <vTask_GSM_service+0x32c>)
    6ebe:	4798      	blx	r3
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
    6ec0:	2388      	movs	r3, #136	; 0x88
    6ec2:	005b      	lsls	r3, r3, #1
    6ec4:	18fb      	adds	r3, r7, r3
    6ec6:	2200      	movs	r2, #0
    6ec8:	701a      	strb	r2, [r3, #0]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    6eca:	2388      	movs	r3, #136	; 0x88
    6ecc:	005b      	lsls	r3, r3, #1
    6ece:	18fb      	adds	r3, r7, r3
    6ed0:	2200      	movs	r2, #0
    6ed2:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
    6ed4:	2388      	movs	r3, #136	; 0x88
    6ed6:	005b      	lsls	r3, r3, #1
    6ed8:	18fb      	adds	r3, r7, r3
    6eda:	0019      	movs	r1, r3
    6edc:	201b      	movs	r0, #27
    6ede:	4bb9      	ldr	r3, [pc, #740]	; (71c4 <vTask_GSM_service+0x330>)
    6ee0:	4798      	blx	r3
	
	gsm_init();
    6ee2:	4bb9      	ldr	r3, [pc, #740]	; (71c8 <vTask_GSM_service+0x334>)
    6ee4:	4798      	blx	r3
	
	initialized = false;
    6ee6:	4bb9      	ldr	r3, [pc, #740]	; (71cc <vTask_GSM_service+0x338>)
    6ee8:	2200      	movs	r2, #0
    6eea:	701a      	strb	r2, [r3, #0]
	
	inCall=false;
    6eec:	4bb8      	ldr	r3, [pc, #736]	; (71d0 <vTask_GSM_service+0x33c>)
    6eee:	2200      	movs	r2, #0
    6ef0:	701a      	strb	r2, [r3, #0]
	simReInit=false;
    6ef2:	4bb8      	ldr	r3, [pc, #736]	; (71d4 <vTask_GSM_service+0x340>)
    6ef4:	2200      	movs	r2, #0
    6ef6:	701a      	strb	r2, [r3, #0]
	
	bool boolGsm_config_flag			=false;
    6ef8:	232c      	movs	r3, #44	; 0x2c
    6efa:	33ff      	adds	r3, #255	; 0xff
    6efc:	18fb      	adds	r3, r7, r3
    6efe:	2200      	movs	r2, #0
    6f00:	701a      	strb	r2, [r3, #0]
	bool boolOne_Time_Msg_Delete_Flag   =false;
    6f02:	2395      	movs	r3, #149	; 0x95
    6f04:	005b      	lsls	r3, r3, #1
    6f06:	18fb      	adds	r3, r7, r3
    6f08:	2200      	movs	r2, #0
    6f0a:	701a      	strb	r2, [r3, #0]
	
	Signal_Strength = 0;
    6f0c:	4bb2      	ldr	r3, [pc, #712]	; (71d8 <vTask_GSM_service+0x344>)
    6f0e:	2200      	movs	r2, #0
    6f10:	701a      	strb	r2, [r3, #0]
	
	soundWaitTime = 5;
    6f12:	4bb2      	ldr	r3, [pc, #712]	; (71dc <vTask_GSM_service+0x348>)
    6f14:	2205      	movs	r2, #5
    6f16:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
    6f18:	4bb1      	ldr	r3, [pc, #708]	; (71e0 <vTask_GSM_service+0x34c>)
    6f1a:	2200      	movs	r2, #0
    6f1c:	701a      	strb	r2, [r3, #0]
	
	//actionType = 'N';
	callCutWaitTime = 580;
    6f1e:	4bb1      	ldr	r3, [pc, #708]	; (71e4 <vTask_GSM_service+0x350>)
    6f20:	2291      	movs	r2, #145	; 0x91
    6f22:	0092      	lsls	r2, r2, #2
    6f24:	801a      	strh	r2, [r3, #0]
	nr = 0;
    6f26:	4bb0      	ldr	r3, [pc, #704]	; (71e8 <vTask_GSM_service+0x354>)
    6f28:	2200      	movs	r2, #0
    6f2a:	701a      	strb	r2, [r3, #0]
	currentStatus = 'N';
    6f2c:	4baf      	ldr	r3, [pc, #700]	; (71ec <vTask_GSM_service+0x358>)
    6f2e:	224e      	movs	r2, #78	; 0x4e
    6f30:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'N';
    6f32:	4baf      	ldr	r3, [pc, #700]	; (71f0 <vTask_GSM_service+0x35c>)
    6f34:	224e      	movs	r2, #78	; 0x4e
    6f36:	701a      	strb	r2, [r3, #0]
	callAccepted = false;
    6f38:	4bae      	ldr	r3, [pc, #696]	; (71f4 <vTask_GSM_service+0x360>)
    6f3a:	2200      	movs	r2, #0
    6f3c:	701a      	strb	r2, [r3, #0]
	freezeIncomingCalls = false;
    6f3e:	4bae      	ldr	r3, [pc, #696]	; (71f8 <vTask_GSM_service+0x364>)
    6f40:	2200      	movs	r2, #0
    6f42:	701a      	strb	r2, [r3, #0]
	obtainNewEvent = true;
    6f44:	4bad      	ldr	r3, [pc, #692]	; (71fc <vTask_GSM_service+0x368>)
    6f46:	2201      	movs	r2, #1
    6f48:	701a      	strb	r2, [r3, #0]
	isMsgFromAdmin = false;
    6f4a:	4bad      	ldr	r3, [pc, #692]	; (7200 <vTask_GSM_service+0x36c>)
    6f4c:	2200      	movs	r2, #0
    6f4e:	701a      	strb	r2, [r3, #0]
	eventStaged=false;
    6f50:	4bac      	ldr	r3, [pc, #688]	; (7204 <vTask_GSM_service+0x370>)
    6f52:	2200      	movs	r2, #0
    6f54:	701a      	strb	r2, [r3, #0]
	stagedEventType = 'N';
    6f56:	4bac      	ldr	r3, [pc, #688]	; (7208 <vTask_GSM_service+0x374>)
    6f58:	224e      	movs	r2, #78	; 0x4e
    6f5a:	701a      	strb	r2, [r3, #0]
	isRegisteredNumber=false;
    6f5c:	4bab      	ldr	r3, [pc, #684]	; (720c <vTask_GSM_service+0x378>)
    6f5e:	2200      	movs	r2, #0
    6f60:	701a      	strb	r2, [r3, #0]
	retries=0;
    6f62:	4bab      	ldr	r3, [pc, #684]	; (7210 <vTask_GSM_service+0x37c>)
    6f64:	2200      	movs	r2, #0
    6f66:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    6f68:	4baa      	ldr	r3, [pc, #680]	; (7214 <vTask_GSM_service+0x380>)
    6f6a:	785b      	ldrb	r3, [r3, #1]
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	d002      	beq.n	6f76 <vTask_GSM_service+0xe2>
	{
		zeroPressed=false;
    6f70:	4ba9      	ldr	r3, [pc, #676]	; (7218 <vTask_GSM_service+0x384>)
    6f72:	2200      	movs	r2, #0
    6f74:	701a      	strb	r2, [r3, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    6f76:	4ba7      	ldr	r3, [pc, #668]	; (7214 <vTask_GSM_service+0x380>)
    6f78:	78db      	ldrb	r3, [r3, #3]
    6f7a:	2b00      	cmp	r3, #0
    6f7c:	d012      	beq.n	6fa4 <vTask_GSM_service+0x110>
	{
		m2mAck=false;
    6f7e:	4ba7      	ldr	r3, [pc, #668]	; (721c <vTask_GSM_service+0x388>)
    6f80:	2200      	movs	r2, #0
    6f82:	701a      	strb	r2, [r3, #0]
		m2mEventCalls=m2mEventNo=0;
    6f84:	4ba6      	ldr	r3, [pc, #664]	; (7220 <vTask_GSM_service+0x38c>)
    6f86:	2200      	movs	r2, #0
    6f88:	701a      	strb	r2, [r3, #0]
    6f8a:	4ba5      	ldr	r3, [pc, #660]	; (7220 <vTask_GSM_service+0x38c>)
    6f8c:	781a      	ldrb	r2, [r3, #0]
    6f8e:	4ba5      	ldr	r3, [pc, #660]	; (7224 <vTask_GSM_service+0x390>)
    6f90:	701a      	strb	r2, [r3, #0]
		m2mEventStaged=false;
    6f92:	4ba5      	ldr	r3, [pc, #660]	; (7228 <vTask_GSM_service+0x394>)
    6f94:	2200      	movs	r2, #0
    6f96:	701a      	strb	r2, [r3, #0]
		m2mEvent=false;
    6f98:	4ba4      	ldr	r3, [pc, #656]	; (722c <vTask_GSM_service+0x398>)
    6f9a:	2200      	movs	r2, #0
    6f9c:	701a      	strb	r2, [r3, #0]
		keyPressed=false;
    6f9e:	4ba4      	ldr	r3, [pc, #656]	; (7230 <vTask_GSM_service+0x39c>)
    6fa0:	2200      	movs	r2, #0
    6fa2:	701a      	strb	r2, [r3, #0]
	}
	
	if(GSM_STATUS_OK)
    6fa4:	201b      	movs	r0, #27
    6fa6:	4ba3      	ldr	r3, [pc, #652]	; (7234 <vTask_GSM_service+0x3a0>)
    6fa8:	4798      	blx	r3
    6faa:	1e03      	subs	r3, r0, #0
    6fac:	d01e      	beq.n	6fec <vTask_GSM_service+0x158>
	{
		boolGsm_config_flag			=false;
    6fae:	232c      	movs	r3, #44	; 0x2c
    6fb0:	33ff      	adds	r3, #255	; 0xff
    6fb2:	18fb      	adds	r3, r7, r3
    6fb4:	2200      	movs	r2, #0
    6fb6:	701a      	strb	r2, [r3, #0]
		boolOne_Time_Msg_Delete_Flag   =false;
    6fb8:	2395      	movs	r3, #149	; 0x95
    6fba:	005b      	lsls	r3, r3, #1
    6fbc:	18fb      	adds	r3, r7, r3
    6fbe:	2200      	movs	r2, #0
    6fc0:	701a      	strb	r2, [r3, #0]
		
		GSM_PWR_ON;
    6fc2:	4b9d      	ldr	r3, [pc, #628]	; (7238 <vTask_GSM_service+0x3a4>)
    6fc4:	4a9c      	ldr	r2, [pc, #624]	; (7238 <vTask_GSM_service+0x3a4>)
    6fc6:	6812      	ldr	r2, [r2, #0]
    6fc8:	2180      	movs	r1, #128	; 0x80
    6fca:	0249      	lsls	r1, r1, #9
    6fcc:	430a      	orrs	r2, r1
    6fce:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
    6fd0:	4b9a      	ldr	r3, [pc, #616]	; (723c <vTask_GSM_service+0x3a8>)
    6fd2:	0018      	movs	r0, r3
    6fd4:	4b9a      	ldr	r3, [pc, #616]	; (7240 <vTask_GSM_service+0x3ac>)
    6fd6:	4798      	blx	r3
		GSM_PWR_OFF;
    6fd8:	4b97      	ldr	r3, [pc, #604]	; (7238 <vTask_GSM_service+0x3a4>)
    6fda:	4a97      	ldr	r2, [pc, #604]	; (7238 <vTask_GSM_service+0x3a4>)
    6fdc:	6812      	ldr	r2, [r2, #0]
    6fde:	4999      	ldr	r1, [pc, #612]	; (7244 <vTask_GSM_service+0x3b0>)
    6fe0:	400a      	ands	r2, r1
    6fe2:	601a      	str	r2, [r3, #0]
		vTaskDelay(5000);
    6fe4:	4b98      	ldr	r3, [pc, #608]	; (7248 <vTask_GSM_service+0x3b4>)
    6fe6:	0018      	movs	r0, r3
    6fe8:	4b95      	ldr	r3, [pc, #596]	; (7240 <vTask_GSM_service+0x3ac>)
    6fea:	4798      	blx	r3
	}
	
	for (;;)
	{
		if (GSM_STATUS_OK)
    6fec:	201b      	movs	r0, #27
    6fee:	4b91      	ldr	r3, [pc, #580]	; (7234 <vTask_GSM_service+0x3a0>)
    6ff0:	4798      	blx	r3
    6ff2:	1e03      	subs	r3, r0, #0
    6ff4:	d101      	bne.n	6ffa <vTask_GSM_service+0x166>
    6ff6:	f000 fc4f 	bl	7898 <vTask_GSM_service+0xa04>
		{
			if (boolGsm_config_flag == false)
    6ffa:	232c      	movs	r3, #44	; 0x2c
    6ffc:	33ff      	adds	r3, #255	; 0xff
    6ffe:	18fb      	adds	r3, r7, r3
    7000:	781b      	ldrb	r3, [r3, #0]
    7002:	2201      	movs	r2, #1
    7004:	4053      	eors	r3, r2
    7006:	b2db      	uxtb	r3, r3
    7008:	2b00      	cmp	r3, #0
    700a:	d038      	beq.n	707e <vTask_GSM_service+0x1ea>
			{
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
    700c:	4b8f      	ldr	r3, [pc, #572]	; (724c <vTask_GSM_service+0x3b8>)
    700e:	4798      	blx	r3
    7010:	0003      	movs	r3, r0
    7012:	2b09      	cmp	r3, #9
    7014:	d12d      	bne.n	7072 <vTask_GSM_service+0x1de>
				{
					if(gsm_config_module()==GSM_ERROR_NONE)
    7016:	4b8e      	ldr	r3, [pc, #568]	; (7250 <vTask_GSM_service+0x3bc>)
    7018:	4798      	blx	r3
    701a:	1e03      	subs	r3, r0, #0
    701c:	d123      	bne.n	7066 <vTask_GSM_service+0x1d2>
					{
						for (uint8_t i=0;i<20;i++)
    701e:	232a      	movs	r3, #42	; 0x2a
    7020:	33ff      	adds	r3, #255	; 0xff
    7022:	18fb      	adds	r3, r7, r3
    7024:	2200      	movs	r2, #0
    7026:	701a      	strb	r2, [r3, #0]
    7028:	e011      	b.n	704e <vTask_GSM_service+0x1ba>
						{
							Signal_Strength = gsm_getsignalstrength();
    702a:	4b8a      	ldr	r3, [pc, #552]	; (7254 <vTask_GSM_service+0x3c0>)
    702c:	4798      	blx	r3
    702e:	0003      	movs	r3, r0
    7030:	001a      	movs	r2, r3
    7032:	4b69      	ldr	r3, [pc, #420]	; (71d8 <vTask_GSM_service+0x344>)
    7034:	701a      	strb	r2, [r3, #0]
							vTaskDelay(50);
    7036:	2032      	movs	r0, #50	; 0x32
    7038:	4b81      	ldr	r3, [pc, #516]	; (7240 <vTask_GSM_service+0x3ac>)
    703a:	4798      	blx	r3
						for (uint8_t i=0;i<20;i++)
    703c:	232a      	movs	r3, #42	; 0x2a
    703e:	33ff      	adds	r3, #255	; 0xff
    7040:	18fb      	adds	r3, r7, r3
    7042:	781a      	ldrb	r2, [r3, #0]
    7044:	232a      	movs	r3, #42	; 0x2a
    7046:	33ff      	adds	r3, #255	; 0xff
    7048:	18fb      	adds	r3, r7, r3
    704a:	3201      	adds	r2, #1
    704c:	701a      	strb	r2, [r3, #0]
    704e:	232a      	movs	r3, #42	; 0x2a
    7050:	33ff      	adds	r3, #255	; 0xff
    7052:	18fb      	adds	r3, r7, r3
    7054:	781b      	ldrb	r3, [r3, #0]
    7056:	2b13      	cmp	r3, #19
    7058:	d9e7      	bls.n	702a <vTask_GSM_service+0x196>
						}
						boolGsm_config_flag = true;
    705a:	232c      	movs	r3, #44	; 0x2c
    705c:	33ff      	adds	r3, #255	; 0xff
    705e:	18fb      	adds	r3, r7, r3
    7060:	2201      	movs	r2, #1
    7062:	701a      	strb	r2, [r3, #0]
    7064:	e7c2      	b.n	6fec <vTask_GSM_service+0x158>
					}
					else
					{
						boolGsm_config_flag = false;
    7066:	232c      	movs	r3, #44	; 0x2c
    7068:	33ff      	adds	r3, #255	; 0xff
    706a:	18fb      	adds	r3, r7, r3
    706c:	2200      	movs	r2, #0
    706e:	701a      	strb	r2, [r3, #0]
    7070:	e7bc      	b.n	6fec <vTask_GSM_service+0x158>
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
    7072:	23fa      	movs	r3, #250	; 0xfa
    7074:	00db      	lsls	r3, r3, #3
    7076:	0018      	movs	r0, r3
    7078:	4b71      	ldr	r3, [pc, #452]	; (7240 <vTask_GSM_service+0x3ac>)
    707a:	4798      	blx	r3
    707c:	e7b6      	b.n	6fec <vTask_GSM_service+0x158>
				}
			}
			else
			{
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
    707e:	2395      	movs	r3, #149	; 0x95
    7080:	005b      	lsls	r3, r3, #1
    7082:	18fb      	adds	r3, r7, r3
    7084:	781b      	ldrb	r3, [r3, #0]
    7086:	2201      	movs	r2, #1
    7088:	4053      	eors	r3, r2
    708a:	b2db      	uxtb	r3, r3
    708c:	2b00      	cmp	r3, #0
    708e:	d01a      	beq.n	70c6 <vTask_GSM_service+0x232>
    7090:	232c      	movs	r3, #44	; 0x2c
    7092:	33ff      	adds	r3, #255	; 0xff
    7094:	18fb      	adds	r3, r7, r3
    7096:	781b      	ldrb	r3, [r3, #0]
    7098:	2b00      	cmp	r3, #0
    709a:	d014      	beq.n	70c6 <vTask_GSM_service+0x232>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    709c:	4b6e      	ldr	r3, [pc, #440]	; (7258 <vTask_GSM_service+0x3c4>)
    709e:	4798      	blx	r3
    70a0:	1e03      	subs	r3, r0, #0
    70a2:	d109      	bne.n	70b8 <vTask_GSM_service+0x224>
					{
						boolOne_Time_Msg_Delete_Flag = true;
    70a4:	2395      	movs	r3, #149	; 0x95
    70a6:	005b      	lsls	r3, r3, #1
    70a8:	18fb      	adds	r3, r7, r3
    70aa:	2201      	movs	r2, #1
    70ac:	701a      	strb	r2, [r3, #0]
						initialized = true;
    70ae:	4b47      	ldr	r3, [pc, #284]	; (71cc <vTask_GSM_service+0x338>)
    70b0:	2201      	movs	r2, #1
    70b2:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    70b4:	f000 fc15 	bl	78e2 <vTask_GSM_service+0xa4e>
					}
					else
					{
						boolOne_Time_Msg_Delete_Flag = false;
    70b8:	2395      	movs	r3, #149	; 0x95
    70ba:	005b      	lsls	r3, r3, #1
    70bc:	18fb      	adds	r3, r7, r3
    70be:	2200      	movs	r2, #0
    70c0:	701a      	strb	r2, [r3, #0]
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    70c2:	f000 fc0e 	bl	78e2 <vTask_GSM_service+0xa4e>
					}
				}
				else
				{
					if (currentStatus == 'N' && currentCallStatus == 'N')
    70c6:	4b49      	ldr	r3, [pc, #292]	; (71ec <vTask_GSM_service+0x358>)
    70c8:	781b      	ldrb	r3, [r3, #0]
    70ca:	b2db      	uxtb	r3, r3
    70cc:	2b4e      	cmp	r3, #78	; 0x4e
    70ce:	d12a      	bne.n	7126 <vTask_GSM_service+0x292>
    70d0:	4b47      	ldr	r3, [pc, #284]	; (71f0 <vTask_GSM_service+0x35c>)
    70d2:	781b      	ldrb	r3, [r3, #0]
    70d4:	b2db      	uxtb	r3, r3
    70d6:	2b4e      	cmp	r3, #78	; 0x4e
    70d8:	d125      	bne.n	7126 <vTask_GSM_service+0x292>
					{
						////Update network
						if (xTaskGetTickCount() - network_update_time>= (1*30*1000))
    70da:	4b60      	ldr	r3, [pc, #384]	; (725c <vTask_GSM_service+0x3c8>)
    70dc:	4798      	blx	r3
    70de:	0002      	movs	r2, r0
    70e0:	2396      	movs	r3, #150	; 0x96
    70e2:	005b      	lsls	r3, r3, #1
    70e4:	18fb      	adds	r3, r7, r3
    70e6:	681b      	ldr	r3, [r3, #0]
    70e8:	1ad3      	subs	r3, r2, r3
    70ea:	4a5d      	ldr	r2, [pc, #372]	; (7260 <vTask_GSM_service+0x3cc>)
    70ec:	4293      	cmp	r3, r2
    70ee:	d90c      	bls.n	710a <vTask_GSM_service+0x276>
						{
							network_update_time = xTaskGetTickCount();
    70f0:	4b5a      	ldr	r3, [pc, #360]	; (725c <vTask_GSM_service+0x3c8>)
    70f2:	4798      	blx	r3
    70f4:	0003      	movs	r3, r0
    70f6:	2296      	movs	r2, #150	; 0x96
    70f8:	0052      	lsls	r2, r2, #1
    70fa:	18ba      	adds	r2, r7, r2
    70fc:	6013      	str	r3, [r2, #0]
							Signal_Strength = gsm_getsignalstrength();
    70fe:	4b55      	ldr	r3, [pc, #340]	; (7254 <vTask_GSM_service+0x3c0>)
    7100:	4798      	blx	r3
    7102:	0003      	movs	r3, r0
    7104:	001a      	movs	r2, r3
    7106:	4b34      	ldr	r3, [pc, #208]	; (71d8 <vTask_GSM_service+0x344>)
    7108:	701a      	strb	r2, [r3, #0]
						}
						
						setObtainEvent();
    710a:	4b56      	ldr	r3, [pc, #344]	; (7264 <vTask_GSM_service+0x3d0>)
    710c:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
    710e:	4b3d      	ldr	r3, [pc, #244]	; (7204 <vTask_GSM_service+0x370>)
    7110:	781b      	ldrb	r3, [r3, #0]
    7112:	2b00      	cmp	r3, #0
    7114:	d104      	bne.n	7120 <vTask_GSM_service+0x28c>
    7116:	4b44      	ldr	r3, [pc, #272]	; (7228 <vTask_GSM_service+0x394>)
    7118:	781b      	ldrb	r3, [r3, #0]
    711a:	2b00      	cmp	r3, #0
    711c:	d100      	bne.n	7120 <vTask_GSM_service+0x28c>
    711e:	e0b5      	b.n	728c <vTask_GSM_service+0x3f8>
						{
							operateOnStagedEvent();
    7120:	4b51      	ldr	r3, [pc, #324]	; (7268 <vTask_GSM_service+0x3d4>)
    7122:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
    7124:	e0b2      	b.n	728c <vTask_GSM_service+0x3f8>
						}
					}
					else if (currentStatus == 'I' || currentStatus == 'R')
    7126:	4b31      	ldr	r3, [pc, #196]	; (71ec <vTask_GSM_service+0x358>)
    7128:	781b      	ldrb	r3, [r3, #0]
    712a:	b2db      	uxtb	r3, r3
    712c:	2b49      	cmp	r3, #73	; 0x49
    712e:	d005      	beq.n	713c <vTask_GSM_service+0x2a8>
    7130:	4b2e      	ldr	r3, [pc, #184]	; (71ec <vTask_GSM_service+0x358>)
    7132:	781b      	ldrb	r3, [r3, #0]
    7134:	b2db      	uxtb	r3, r3
    7136:	2b52      	cmp	r3, #82	; 0x52
    7138:	d000      	beq.n	713c <vTask_GSM_service+0x2a8>
    713a:	e0a8      	b.n	728e <vTask_GSM_service+0x3fa>
					{
						if (callTimerExpire())
    713c:	4b4b      	ldr	r3, [pc, #300]	; (726c <vTask_GSM_service+0x3d8>)
    713e:	4798      	blx	r3
    7140:	1e03      	subs	r3, r0, #0
    7142:	d00e      	beq.n	7162 <vTask_GSM_service+0x2ce>
						{
							char t1 = actionType;
    7144:	2326      	movs	r3, #38	; 0x26
    7146:	33ff      	adds	r3, #255	; 0xff
    7148:	18fb      	adds	r3, r7, r3
    714a:	4a49      	ldr	r2, [pc, #292]	; (7270 <vTask_GSM_service+0x3dc>)
    714c:	7812      	ldrb	r2, [r2, #0]
    714e:	701a      	strb	r2, [r3, #0]
							endCall();
    7150:	4b48      	ldr	r3, [pc, #288]	; (7274 <vTask_GSM_service+0x3e0>)
    7152:	4798      	blx	r3
							checkRespSMS(t1);
    7154:	2326      	movs	r3, #38	; 0x26
    7156:	33ff      	adds	r3, #255	; 0xff
    7158:	18fb      	adds	r3, r7, r3
    715a:	781b      	ldrb	r3, [r3, #0]
    715c:	0018      	movs	r0, r3
    715e:	4b46      	ldr	r3, [pc, #280]	; (7278 <vTask_GSM_service+0x3e4>)
    7160:	4798      	blx	r3
						}
						if (factory_settings_parameter_struct.ENABLE_M2M)
    7162:	4b2c      	ldr	r3, [pc, #176]	; (7214 <vTask_GSM_service+0x380>)
    7164:	78db      	ldrb	r3, [r3, #3]
    7166:	2b00      	cmp	r3, #0
    7168:	d020      	beq.n	71ac <vTask_GSM_service+0x318>
						{
							if(m2mEvent && callAccepted)
    716a:	4b30      	ldr	r3, [pc, #192]	; (722c <vTask_GSM_service+0x398>)
    716c:	781b      	ldrb	r3, [r3, #0]
    716e:	2b00      	cmp	r3, #0
    7170:	d01c      	beq.n	71ac <vTask_GSM_service+0x318>
    7172:	4b20      	ldr	r3, [pc, #128]	; (71f4 <vTask_GSM_service+0x360>)
    7174:	781b      	ldrb	r3, [r3, #0]
    7176:	2b00      	cmp	r3, #0
    7178:	d018      	beq.n	71ac <vTask_GSM_service+0x318>
							{
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
    717a:	4b2d      	ldr	r3, [pc, #180]	; (7230 <vTask_GSM_service+0x39c>)
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	2201      	movs	r2, #1
    7180:	4053      	eors	r3, r2
    7182:	b2db      	uxtb	r3, r3
    7184:	2b00      	cmp	r3, #0
    7186:	d011      	beq.n	71ac <vTask_GSM_service+0x318>
    7188:	4b34      	ldr	r3, [pc, #208]	; (725c <vTask_GSM_service+0x3c8>)
    718a:	4798      	blx	r3
    718c:	0002      	movs	r2, r0
    718e:	4b3b      	ldr	r3, [pc, #236]	; (727c <vTask_GSM_service+0x3e8>)
    7190:	681b      	ldr	r3, [r3, #0]
    7192:	1ad2      	subs	r2, r2, r3
    7194:	23fa      	movs	r3, #250	; 0xfa
    7196:	00db      	lsls	r3, r3, #3
    7198:	429a      	cmp	r2, r3
    719a:	d907      	bls.n	71ac <vTask_GSM_service+0x318>
								{
									keyPressed=true;
    719c:	4b24      	ldr	r3, [pc, #144]	; (7230 <vTask_GSM_service+0x39c>)
    719e:	2201      	movs	r2, #1
    71a0:	701a      	strb	r2, [r3, #0]
									sendDTMFTone(m2mEventNo);
    71a2:	4b1f      	ldr	r3, [pc, #124]	; (7220 <vTask_GSM_service+0x38c>)
    71a4:	781b      	ldrb	r3, [r3, #0]
    71a6:	0018      	movs	r0, r3
    71a8:	4b35      	ldr	r3, [pc, #212]	; (7280 <vTask_GSM_service+0x3ec>)
    71aa:	4798      	blx	r3
								}
							}
						}
						if (playSoundElligible())
    71ac:	4b35      	ldr	r3, [pc, #212]	; (7284 <vTask_GSM_service+0x3f0>)
    71ae:	4798      	blx	r3
    71b0:	1e03      	subs	r3, r0, #0
    71b2:	d06c      	beq.n	728e <vTask_GSM_service+0x3fa>
						{
							triggerPlaySound();
    71b4:	4b34      	ldr	r3, [pc, #208]	; (7288 <vTask_GSM_service+0x3f4>)
    71b6:	4798      	blx	r3
    71b8:	e069      	b.n	728e <vTask_GSM_service+0x3fa>
    71ba:	46c0      	nop			; (mov r8, r8)
    71bc:	41004480 	.word	0x41004480
    71c0:	00003f19 	.word	0x00003f19
    71c4:	00011ee9 	.word	0x00011ee9
    71c8:	00002059 	.word	0x00002059
    71cc:	20000775 	.word	0x20000775
    71d0:	20000774 	.word	0x20000774
    71d4:	2000075f 	.word	0x2000075f
    71d8:	20000762 	.word	0x20000762
    71dc:	2000079d 	.word	0x2000079d
    71e0:	20000816 	.word	0x20000816
    71e4:	2000073c 	.word	0x2000073c
    71e8:	200006d8 	.word	0x200006d8
    71ec:	200007a8 	.word	0x200007a8
    71f0:	20000767 	.word	0x20000767
    71f4:	20000776 	.word	0x20000776
    71f8:	2000071c 	.word	0x2000071c
    71fc:	2000074a 	.word	0x2000074a
    7200:	20000755 	.word	0x20000755
    7204:	2000079a 	.word	0x2000079a
    7208:	2000074c 	.word	0x2000074c
    720c:	20000770 	.word	0x20000770
    7210:	200006d9 	.word	0x200006d9
    7214:	20000628 	.word	0x20000628
    7218:	200007c7 	.word	0x200007c7
    721c:	20000714 	.word	0x20000714
    7220:	20000715 	.word	0x20000715
    7224:	2000079b 	.word	0x2000079b
    7228:	20000766 	.word	0x20000766
    722c:	2000071b 	.word	0x2000071b
    7230:	20000798 	.word	0x20000798
    7234:	00003f3d 	.word	0x00003f3d
    7238:	41004490 	.word	0x41004490
    723c:	00000bb8 	.word	0x00000bb8
    7240:	0000f019 	.word	0x0000f019
    7244:	fffeffff 	.word	0xfffeffff
    7248:	00001388 	.word	0x00001388
    724c:	00002429 	.word	0x00002429
    7250:	00003115 	.word	0x00003115
    7254:	000026c5 	.word	0x000026c5
    7258:	00002515 	.word	0x00002515
    725c:	0000f37d 	.word	0x0000f37d
    7260:	0000752f 	.word	0x0000752f
    7264:	00003f81 	.word	0x00003f81
    7268:	00003fc1 	.word	0x00003fc1
    726c:	00004621 	.word	0x00004621
    7270:	2000073b 	.word	0x2000073b
    7274:	000040c9 	.word	0x000040c9
    7278:	000048dd 	.word	0x000048dd
    727c:	200007d0 	.word	0x200007d0
    7280:	00006e01 	.word	0x00006e01
    7284:	00004489 	.word	0x00004489
    7288:	000044d5 	.word	0x000044d5
						if (eventStaged || m2mEventStaged)
    728c:	46c0      	nop			; (mov r8, r8)
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
    728e:	4bde      	ldr	r3, [pc, #888]	; (7608 <vTask_GSM_service+0x774>)
    7290:	2298      	movs	r2, #152	; 0x98
    7292:	0052      	lsls	r2, r2, #1
    7294:	4694      	mov	ip, r2
    7296:	44bc      	add	ip, r7
    7298:	4463      	add	r3, ip
    729a:	0018      	movs	r0, r3
    729c:	2340      	movs	r3, #64	; 0x40
    729e:	001a      	movs	r2, r3
    72a0:	2100      	movs	r1, #0
    72a2:	4bda      	ldr	r3, [pc, #872]	; (760c <vTask_GSM_service+0x778>)
    72a4:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
    72a6:	230c      	movs	r3, #12
    72a8:	18fb      	adds	r3, r7, r3
    72aa:	2140      	movs	r1, #64	; 0x40
    72ac:	0018      	movs	r0, r3
    72ae:	4bd8      	ldr	r3, [pc, #864]	; (7610 <vTask_GSM_service+0x77c>)
    72b0:	4798      	blx	r3
    72b2:	1e03      	subs	r3, r0, #0
    72b4:	d100      	bne.n	72b8 <vTask_GSM_service+0x424>
    72b6:	e699      	b.n	6fec <vTask_GSM_service+0x158>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
    72b8:	2392      	movs	r3, #146	; 0x92
    72ba:	005b      	lsls	r3, r3, #1
    72bc:	18fc      	adds	r4, r7, r3
    72be:	230c      	movs	r3, #12
    72c0:	18fb      	adds	r3, r7, r3
    72c2:	0018      	movs	r0, r3
    72c4:	4bd3      	ldr	r3, [pc, #844]	; (7614 <vTask_GSM_service+0x780>)
    72c6:	4798      	blx	r3
    72c8:	0003      	movs	r3, r0
    72ca:	7023      	strb	r3, [r4, #0]
						if (sms_index>0)
    72cc:	2392      	movs	r3, #146	; 0x92
    72ce:	005b      	lsls	r3, r3, #1
    72d0:	18fb      	adds	r3, r7, r3
    72d2:	781b      	ldrb	r3, [r3, #0]
    72d4:	2b00      	cmp	r3, #0
    72d6:	d100      	bne.n	72da <vTask_GSM_service+0x446>
    72d8:	e0d5      	b.n	7486 <vTask_GSM_service+0x5f2>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
    72da:	234c      	movs	r3, #76	; 0x4c
    72dc:	18fa      	adds	r2, r7, r3
    72de:	1c79      	adds	r1, r7, #1
    72e0:	31ff      	adds	r1, #255	; 0xff
    72e2:	2392      	movs	r3, #146	; 0x92
    72e4:	005b      	lsls	r3, r3, #1
    72e6:	18fb      	adds	r3, r7, r3
    72e8:	7818      	ldrb	r0, [r3, #0]
    72ea:	23a0      	movs	r3, #160	; 0xa0
    72ec:	9300      	str	r3, [sp, #0]
    72ee:	0013      	movs	r3, r2
    72f0:	220f      	movs	r2, #15
    72f2:	4cc9      	ldr	r4, [pc, #804]	; (7618 <vTask_GSM_service+0x784>)
    72f4:	47a0      	blx	r4
							bool admin = isAdmin(phone_number);
    72f6:	2324      	movs	r3, #36	; 0x24
    72f8:	33ff      	adds	r3, #255	; 0xff
    72fa:	18fc      	adds	r4, r7, r3
    72fc:	1c7b      	adds	r3, r7, #1
    72fe:	33ff      	adds	r3, #255	; 0xff
    7300:	0018      	movs	r0, r3
    7302:	4bc6      	ldr	r3, [pc, #792]	; (761c <vTask_GSM_service+0x788>)
    7304:	4798      	blx	r3
    7306:	0003      	movs	r3, r0
    7308:	7023      	strb	r3, [r4, #0]
							bool primaryUser = isPrimaryNumber(phone_number);
    730a:	2391      	movs	r3, #145	; 0x91
    730c:	005b      	lsls	r3, r3, #1
    730e:	18fc      	adds	r4, r7, r3
    7310:	1c7b      	adds	r3, r7, #1
    7312:	33ff      	adds	r3, #255	; 0xff
    7314:	0018      	movs	r0, r3
    7316:	4bc2      	ldr	r3, [pc, #776]	; (7620 <vTask_GSM_service+0x78c>)
    7318:	4798      	blx	r3
    731a:	0003      	movs	r3, r0
    731c:	7023      	strb	r3, [r4, #0]
							bool alterUsr = isAlterNumber(phone_number);
    731e:	2322      	movs	r3, #34	; 0x22
    7320:	33ff      	adds	r3, #255	; 0xff
    7322:	18fc      	adds	r4, r7, r3
    7324:	1c7b      	adds	r3, r7, #1
    7326:	33ff      	adds	r3, #255	; 0xff
    7328:	0018      	movs	r0, r3
    732a:	4bbe      	ldr	r3, [pc, #760]	; (7624 <vTask_GSM_service+0x790>)
    732c:	4798      	blx	r3
    732e:	0003      	movs	r3, r0
    7330:	7023      	strb	r3, [r4, #0]
							bool response_sms_processed_cmd = true;
    7332:	2394      	movs	r3, #148	; 0x94
    7334:	005b      	lsls	r3, r3, #1
    7336:	18fb      	adds	r3, r7, r3
    7338:	2201      	movs	r2, #1
    733a:	701a      	strb	r2, [r3, #0]
							
							if(isAdmin)
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,"ADMIN",false);
    733c:	4bba      	ldr	r3, [pc, #744]	; (7628 <vTask_GSM_service+0x794>)
    733e:	2200      	movs	r2, #0
    7340:	0019      	movs	r1, r3
    7342:	2004      	movs	r0, #4
    7344:	4bb9      	ldr	r3, [pc, #740]	; (762c <vTask_GSM_service+0x798>)
    7346:	4798      	blx	r3
							else
							{
								setCallStateOnLCD(LCDCALLSTATE_INCOMINGSMS,phone_number,false);
							}
							
							StringtoUpperCase(Received_SMS);
    7348:	234c      	movs	r3, #76	; 0x4c
    734a:	18fb      	adds	r3, r7, r3
    734c:	0018      	movs	r0, r3
    734e:	4bb8      	ldr	r3, [pc, #736]	; (7630 <vTask_GSM_service+0x79c>)
    7350:	4798      	blx	r3
							//{
							//memmove(Received_SMS,Received_SMS+17,strlen(Received_SMS));		//discard passPhrase
							//admin = true;													//set admin as true as passCode matches
							//}

							if (admin || primaryUser || alterUsr)
    7352:	2324      	movs	r3, #36	; 0x24
    7354:	33ff      	adds	r3, #255	; 0xff
    7356:	18fb      	adds	r3, r7, r3
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	d10b      	bne.n	7376 <vTask_GSM_service+0x4e2>
    735e:	2391      	movs	r3, #145	; 0x91
    7360:	005b      	lsls	r3, r3, #1
    7362:	18fb      	adds	r3, r7, r3
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	2b00      	cmp	r3, #0
    7368:	d105      	bne.n	7376 <vTask_GSM_service+0x4e2>
    736a:	2322      	movs	r3, #34	; 0x22
    736c:	33ff      	adds	r3, #255	; 0xff
    736e:	18fb      	adds	r3, r7, r3
    7370:	781b      	ldrb	r3, [r3, #0]
    7372:	2b00      	cmp	r3, #0
    7374:	d031      	beq.n	73da <vTask_GSM_service+0x546>
							{
								if(StringstartsWith(Received_SMS,"#"))
    7376:	4aaf      	ldr	r2, [pc, #700]	; (7634 <vTask_GSM_service+0x7a0>)
    7378:	234c      	movs	r3, #76	; 0x4c
    737a:	18fb      	adds	r3, r7, r3
    737c:	0011      	movs	r1, r2
    737e:	0018      	movs	r0, r3
    7380:	4bad      	ldr	r3, [pc, #692]	; (7638 <vTask_GSM_service+0x7a4>)
    7382:	4798      	blx	r3
    7384:	1e03      	subs	r3, r0, #0
    7386:	d013      	beq.n	73b0 <vTask_GSM_service+0x51c>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
    7388:	234c      	movs	r3, #76	; 0x4c
    738a:	18fc      	adds	r4, r7, r3
    738c:	3401      	adds	r4, #1
    738e:	234c      	movs	r3, #76	; 0x4c
    7390:	18fb      	adds	r3, r7, r3
    7392:	0018      	movs	r0, r3
    7394:	4ba9      	ldr	r3, [pc, #676]	; (763c <vTask_GSM_service+0x7a8>)
    7396:	4798      	blx	r3
    7398:	0002      	movs	r2, r0
    739a:	234c      	movs	r3, #76	; 0x4c
    739c:	18fb      	adds	r3, r7, r3
    739e:	0021      	movs	r1, r4
    73a0:	0018      	movs	r0, r3
    73a2:	4ba7      	ldr	r3, [pc, #668]	; (7640 <vTask_GSM_service+0x7ac>)
    73a4:	4798      	blx	r3
									response_sms_processed_cmd=false;
    73a6:	2394      	movs	r3, #148	; 0x94
    73a8:	005b      	lsls	r3, r3, #1
    73aa:	18fb      	adds	r3, r7, r3
    73ac:	2200      	movs	r2, #0
    73ae:	701a      	strb	r2, [r3, #0]
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
    73b0:	2322      	movs	r3, #34	; 0x22
    73b2:	33ff      	adds	r3, #255	; 0xff
    73b4:	18fb      	adds	r3, r7, r3
    73b6:	781c      	ldrb	r4, [r3, #0]
    73b8:	2394      	movs	r3, #148	; 0x94
    73ba:	005b      	lsls	r3, r3, #1
    73bc:	18fb      	adds	r3, r7, r3
    73be:	781a      	ldrb	r2, [r3, #0]
    73c0:	2324      	movs	r3, #36	; 0x24
    73c2:	33ff      	adds	r3, #255	; 0xff
    73c4:	18fb      	adds	r3, r7, r3
    73c6:	7819      	ldrb	r1, [r3, #0]
    73c8:	234c      	movs	r3, #76	; 0x4c
    73ca:	18f8      	adds	r0, r7, r3
    73cc:	1c7b      	adds	r3, r7, #1
    73ce:	33ff      	adds	r3, #255	; 0xff
    73d0:	9300      	str	r3, [sp, #0]
    73d2:	0023      	movs	r3, r4
    73d4:	4c9b      	ldr	r4, [pc, #620]	; (7644 <vTask_GSM_service+0x7b0>)
    73d6:	47a0      	blx	r4
    73d8:	e053      	b.n	7482 <vTask_GSM_service+0x5ee>
							}
							else if(isM2MNumber(phone_number))
    73da:	1c7b      	adds	r3, r7, #1
    73dc:	33ff      	adds	r3, #255	; 0xff
    73de:	0018      	movs	r0, r3
    73e0:	4b99      	ldr	r3, [pc, #612]	; (7648 <vTask_GSM_service+0x7b4>)
    73e2:	4798      	blx	r3
    73e4:	1e03      	subs	r3, r0, #0
    73e6:	d01f      	beq.n	7428 <vTask_GSM_service+0x594>
							{
								if(StringstartsWith(Received_SMS,"VMM01"))
    73e8:	4a98      	ldr	r2, [pc, #608]	; (764c <vTask_GSM_service+0x7b8>)
    73ea:	234c      	movs	r3, #76	; 0x4c
    73ec:	18fb      	adds	r3, r7, r3
    73ee:	0011      	movs	r1, r2
    73f0:	0018      	movs	r0, r3
    73f2:	4b91      	ldr	r3, [pc, #580]	; (7638 <vTask_GSM_service+0x7a4>)
    73f4:	4798      	blx	r3
    73f6:	1e03      	subs	r3, r0, #0
    73f8:	d043      	beq.n	7482 <vTask_GSM_service+0x5ee>
								{
									setM2MVerify(true);
    73fa:	2001      	movs	r0, #1
    73fc:	4b94      	ldr	r3, [pc, #592]	; (7650 <vTask_GSM_service+0x7bc>)
    73fe:	4798      	blx	r3
									getM2MNumber(phone_number);
    7400:	1c7b      	adds	r3, r7, #1
    7402:	33ff      	adds	r3, #255	; 0xff
    7404:	0018      	movs	r0, r3
    7406:	4b93      	ldr	r3, [pc, #588]	; (7654 <vTask_GSM_service+0x7c0>)
    7408:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    740a:	1c7b      	adds	r3, r7, #1
    740c:	33ff      	adds	r3, #255	; 0xff
    740e:	2200      	movs	r2, #0
    7410:	0019      	movs	r1, r3
    7412:	2005      	movs	r0, #5
    7414:	4b85      	ldr	r3, [pc, #532]	; (762c <vTask_GSM_service+0x798>)
    7416:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
    7418:	4a8f      	ldr	r2, [pc, #572]	; (7658 <vTask_GSM_service+0x7c4>)
    741a:	1c7b      	adds	r3, r7, #1
    741c:	33ff      	adds	r3, #255	; 0xff
    741e:	0011      	movs	r1, r2
    7420:	0018      	movs	r0, r3
    7422:	4b8e      	ldr	r3, [pc, #568]	; (765c <vTask_GSM_service+0x7c8>)
    7424:	4798      	blx	r3
    7426:	e02c      	b.n	7482 <vTask_GSM_service+0x5ee>
								}
							}
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
    7428:	4b8d      	ldr	r3, [pc, #564]	; (7660 <vTask_GSM_service+0x7cc>)
    742a:	78db      	ldrb	r3, [r3, #3]
    742c:	2b00      	cmp	r3, #0
    742e:	d028      	beq.n	7482 <vTask_GSM_service+0x5ee>
    7430:	1c7b      	adds	r3, r7, #1
    7432:	33ff      	adds	r3, #255	; 0xff
    7434:	0018      	movs	r0, r3
    7436:	4b8b      	ldr	r3, [pc, #556]	; (7664 <vTask_GSM_service+0x7d0>)
    7438:	4798      	blx	r3
    743a:	1e03      	subs	r3, r0, #0
    743c:	d021      	beq.n	7482 <vTask_GSM_service+0x5ee>
							{
								if(StringstartsWith(Received_SMS,"VMR02"))
    743e:	4a86      	ldr	r2, [pc, #536]	; (7658 <vTask_GSM_service+0x7c4>)
    7440:	234c      	movs	r3, #76	; 0x4c
    7442:	18fb      	adds	r3, r7, r3
    7444:	0011      	movs	r1, r2
    7446:	0018      	movs	r0, r3
    7448:	4b7b      	ldr	r3, [pc, #492]	; (7638 <vTask_GSM_service+0x7a4>)
    744a:	4798      	blx	r3
    744c:	1e03      	subs	r3, r0, #0
    744e:	d018      	beq.n	7482 <vTask_GSM_service+0x5ee>
								{
									setM2MRemoteVerified(true);
    7450:	2001      	movs	r0, #1
    7452:	4b85      	ldr	r3, [pc, #532]	; (7668 <vTask_GSM_service+0x7d4>)
    7454:	4798      	blx	r3
									saveM2MSettings(true);
    7456:	2001      	movs	r0, #1
    7458:	4b84      	ldr	r3, [pc, #528]	; (766c <vTask_GSM_service+0x7d8>)
    745a:	4798      	blx	r3
									getActiveNumber(phone_number);
    745c:	1c7b      	adds	r3, r7, #1
    745e:	33ff      	adds	r3, #255	; 0xff
    7460:	0018      	movs	r0, r3
    7462:	4b83      	ldr	r3, [pc, #524]	; (7670 <vTask_GSM_service+0x7dc>)
    7464:	4798      	blx	r3
									setCallStateOnLCD(LCDCALLSTATE_OUTGOINGSMS,phone_number,false);
    7466:	1c7b      	adds	r3, r7, #1
    7468:	33ff      	adds	r3, #255	; 0xff
    746a:	2200      	movs	r2, #0
    746c:	0019      	movs	r1, r3
    746e:	2005      	movs	r0, #5
    7470:	4b6e      	ldr	r3, [pc, #440]	; (762c <vTask_GSM_service+0x798>)
    7472:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
    7474:	4a7f      	ldr	r2, [pc, #508]	; (7674 <vTask_GSM_service+0x7e0>)
    7476:	1c7b      	adds	r3, r7, #1
    7478:	33ff      	adds	r3, #255	; 0xff
    747a:	0011      	movs	r1, r2
    747c:	0018      	movs	r0, r3
    747e:	4b77      	ldr	r3, [pc, #476]	; (765c <vTask_GSM_service+0x7c8>)
    7480:	4798      	blx	r3
								}
							}
							gsm_delete_all_sms();
    7482:	4b7d      	ldr	r3, [pc, #500]	; (7678 <vTask_GSM_service+0x7e4>)
    7484:	4798      	blx	r3
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
    7486:	4b7d      	ldr	r3, [pc, #500]	; (767c <vTask_GSM_service+0x7e8>)
    7488:	781b      	ldrb	r3, [r3, #0]
    748a:	2201      	movs	r2, #1
    748c:	4053      	eors	r3, r2
    748e:	b2db      	uxtb	r3, r3
    7490:	2b00      	cmp	r3, #0
    7492:	d100      	bne.n	7496 <vTask_GSM_service+0x602>
    7494:	e099      	b.n	75ca <vTask_GSM_service+0x736>
    7496:	4b7a      	ldr	r3, [pc, #488]	; (7680 <vTask_GSM_service+0x7ec>)
    7498:	781b      	ldrb	r3, [r3, #0]
    749a:	b2db      	uxtb	r3, r3
    749c:	2b4e      	cmp	r3, #78	; 0x4e
    749e:	d005      	beq.n	74ac <vTask_GSM_service+0x618>
    74a0:	4b77      	ldr	r3, [pc, #476]	; (7680 <vTask_GSM_service+0x7ec>)
    74a2:	781b      	ldrb	r3, [r3, #0]
    74a4:	b2db      	uxtb	r3, r3
    74a6:	2b52      	cmp	r3, #82	; 0x52
    74a8:	d000      	beq.n	74ac <vTask_GSM_service+0x618>
    74aa:	e08e      	b.n	75ca <vTask_GSM_service+0x736>
    74ac:	4b75      	ldr	r3, [pc, #468]	; (7684 <vTask_GSM_service+0x7f0>)
    74ae:	781b      	ldrb	r3, [r3, #0]
    74b0:	b2db      	uxtb	r3, r3
    74b2:	2b4e      	cmp	r3, #78	; 0x4e
    74b4:	d005      	beq.n	74c2 <vTask_GSM_service+0x62e>
    74b6:	4b73      	ldr	r3, [pc, #460]	; (7684 <vTask_GSM_service+0x7f0>)
    74b8:	781b      	ldrb	r3, [r3, #0]
    74ba:	b2db      	uxtb	r3, r3
    74bc:	2b49      	cmp	r3, #73	; 0x49
    74be:	d000      	beq.n	74c2 <vTask_GSM_service+0x62e>
    74c0:	e083      	b.n	75ca <vTask_GSM_service+0x736>
						{
							if (gsm_responseLine_isRinging(response))
    74c2:	230c      	movs	r3, #12
    74c4:	18fb      	adds	r3, r7, r3
    74c6:	0018      	movs	r0, r3
    74c8:	4b6f      	ldr	r3, [pc, #444]	; (7688 <vTask_GSM_service+0x7f4>)
    74ca:	4798      	blx	r3
    74cc:	1e03      	subs	r3, r0, #0
    74ce:	d071      	beq.n	75b4 <vTask_GSM_service+0x720>
							{
								currentStatus = 'R';
    74d0:	4b6b      	ldr	r3, [pc, #428]	; (7680 <vTask_GSM_service+0x7ec>)
    74d2:	2252      	movs	r2, #82	; 0x52
    74d4:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'I';
    74d6:	4b6b      	ldr	r3, [pc, #428]	; (7684 <vTask_GSM_service+0x7f0>)
    74d8:	2249      	movs	r2, #73	; 0x49
    74da:	701a      	strb	r2, [r3, #0]
								char incoming_caller[20]={0};
    74dc:	23ec      	movs	r3, #236	; 0xec
    74de:	18fb      	adds	r3, r7, r3
    74e0:	0018      	movs	r0, r3
    74e2:	2314      	movs	r3, #20
    74e4:	001a      	movs	r2, r3
    74e6:	2100      	movs	r1, #0
    74e8:	4b48      	ldr	r3, [pc, #288]	; (760c <vTask_GSM_service+0x778>)
    74ea:	4798      	blx	r3
								inCall = true;
    74ec:	4b67      	ldr	r3, [pc, #412]	; (768c <vTask_GSM_service+0x7f8>)
    74ee:	2201      	movs	r2, #1
    74f0:	701a      	strb	r2, [r3, #0]
								
								bool new_call = false;
    74f2:	2328      	movs	r3, #40	; 0x28
    74f4:	33ff      	adds	r3, #255	; 0xff
    74f6:	18fb      	adds	r3, r7, r3
    74f8:	2200      	movs	r2, #0
    74fa:	701a      	strb	r2, [r3, #0]
								for (uint8_t i=0;i<4;i++)
    74fc:	2393      	movs	r3, #147	; 0x93
    74fe:	005b      	lsls	r3, r3, #1
    7500:	18fb      	adds	r3, r7, r3
    7502:	2200      	movs	r2, #0
    7504:	701a      	strb	r2, [r3, #0]
    7506:	e02f      	b.n	7568 <vTask_GSM_service+0x6d4>
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
    7508:	23fa      	movs	r3, #250	; 0xfa
    750a:	005b      	lsls	r3, r3, #1
    750c:	0018      	movs	r0, r3
    750e:	4b60      	ldr	r3, [pc, #384]	; (7690 <vTask_GSM_service+0x7fc>)
    7510:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
    7512:	230c      	movs	r3, #12
    7514:	18fb      	adds	r3, r7, r3
    7516:	2140      	movs	r1, #64	; 0x40
    7518:	0018      	movs	r0, r3
    751a:	4b3d      	ldr	r3, [pc, #244]	; (7610 <vTask_GSM_service+0x77c>)
    751c:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
    751e:	23ec      	movs	r3, #236	; 0xec
    7520:	18fa      	adds	r2, r7, r3
    7522:	230c      	movs	r3, #12
    7524:	18fb      	adds	r3, r7, r3
    7526:	0011      	movs	r1, r2
    7528:	0018      	movs	r0, r3
    752a:	4b5a      	ldr	r3, [pc, #360]	; (7694 <vTask_GSM_service+0x800>)
    752c:	4798      	blx	r3
    752e:	1e03      	subs	r3, r0, #0
    7530:	d011      	beq.n	7556 <vTask_GSM_service+0x6c2>
									{
										setCallStateOnLCD(LCDCALLSTATE_RINGING,incoming_caller,false);
    7532:	23ec      	movs	r3, #236	; 0xec
    7534:	18fb      	adds	r3, r7, r3
    7536:	2200      	movs	r2, #0
    7538:	0019      	movs	r1, r3
    753a:	2001      	movs	r0, #1
    753c:	4b3b      	ldr	r3, [pc, #236]	; (762c <vTask_GSM_service+0x798>)
    753e:	4798      	blx	r3
										new_call = true;
    7540:	2328      	movs	r3, #40	; 0x28
    7542:	33ff      	adds	r3, #255	; 0xff
    7544:	18fb      	adds	r3, r7, r3
    7546:	2201      	movs	r2, #1
    7548:	701a      	strb	r2, [r3, #0]
										callCutWait = xTaskGetTickCount();
    754a:	4b53      	ldr	r3, [pc, #332]	; (7698 <vTask_GSM_service+0x804>)
    754c:	4798      	blx	r3
    754e:	0002      	movs	r2, r0
    7550:	4b52      	ldr	r3, [pc, #328]	; (769c <vTask_GSM_service+0x808>)
    7552:	601a      	str	r2, [r3, #0]
										break;
    7554:	e00e      	b.n	7574 <vTask_GSM_service+0x6e0>
								for (uint8_t i=0;i<4;i++)
    7556:	2393      	movs	r3, #147	; 0x93
    7558:	005b      	lsls	r3, r3, #1
    755a:	18fb      	adds	r3, r7, r3
    755c:	781a      	ldrb	r2, [r3, #0]
    755e:	2393      	movs	r3, #147	; 0x93
    7560:	005b      	lsls	r3, r3, #1
    7562:	18fb      	adds	r3, r7, r3
    7564:	3201      	adds	r2, #1
    7566:	701a      	strb	r2, [r3, #0]
    7568:	2393      	movs	r3, #147	; 0x93
    756a:	005b      	lsls	r3, r3, #1
    756c:	18fb      	adds	r3, r7, r3
    756e:	781b      	ldrb	r3, [r3, #0]
    7570:	2b03      	cmp	r3, #3
    7572:	d9c9      	bls.n	7508 <vTask_GSM_service+0x674>
									}
								}
								if (new_call)
    7574:	2328      	movs	r3, #40	; 0x28
    7576:	33ff      	adds	r3, #255	; 0xff
    7578:	18fb      	adds	r3, r7, r3
    757a:	781b      	ldrb	r3, [r3, #0]
    757c:	2b00      	cmp	r3, #0
    757e:	d100      	bne.n	7582 <vTask_GSM_service+0x6ee>
    7580:	e1ab      	b.n	78da <vTask_GSM_service+0xa46>
								{
									new_call = false;
    7582:	2328      	movs	r3, #40	; 0x28
    7584:	33ff      	adds	r3, #255	; 0xff
    7586:	18fb      	adds	r3, r7, r3
    7588:	2200      	movs	r2, #0
    758a:	701a      	strb	r2, [r3, #0]
									if (checkNumber(incoming_caller))
    758c:	23ec      	movs	r3, #236	; 0xec
    758e:	18fb      	adds	r3, r7, r3
    7590:	0018      	movs	r0, r3
    7592:	4b43      	ldr	r3, [pc, #268]	; (76a0 <vTask_GSM_service+0x80c>)
    7594:	4798      	blx	r3
    7596:	1e03      	subs	r3, r0, #0
    7598:	d009      	beq.n	75ae <vTask_GSM_service+0x71a>
									{
										acceptCall();
    759a:	4b42      	ldr	r3, [pc, #264]	; (76a4 <vTask_GSM_service+0x810>)
    759c:	4798      	blx	r3
										setCallStateOnLCD(LCDCALLSTATE_INCALL,incoming_caller,false);
    759e:	23ec      	movs	r3, #236	; 0xec
    75a0:	18fb      	adds	r3, r7, r3
    75a2:	2200      	movs	r2, #0
    75a4:	0019      	movs	r1, r3
    75a6:	2002      	movs	r0, #2
    75a8:	4b20      	ldr	r3, [pc, #128]	; (762c <vTask_GSM_service+0x798>)
    75aa:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    75ac:	e195      	b.n	78da <vTask_GSM_service+0xa46>
									}
									else
									{
										endCall();
    75ae:	4b3e      	ldr	r3, [pc, #248]	; (76a8 <vTask_GSM_service+0x814>)
    75b0:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    75b2:	e192      	b.n	78da <vTask_GSM_service+0xa46>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
    75b4:	230c      	movs	r3, #12
    75b6:	18fb      	adds	r3, r7, r3
    75b8:	0018      	movs	r0, r3
    75ba:	4b3c      	ldr	r3, [pc, #240]	; (76ac <vTask_GSM_service+0x818>)
    75bc:	4798      	blx	r3
    75be:	1e03      	subs	r3, r0, #0
    75c0:	d100      	bne.n	75c4 <vTask_GSM_service+0x730>
    75c2:	e18a      	b.n	78da <vTask_GSM_service+0xa46>
							{
								endCall();
    75c4:	4b38      	ldr	r3, [pc, #224]	; (76a8 <vTask_GSM_service+0x814>)
    75c6:	4798      	blx	r3
							if (gsm_responseLine_isRinging(response))
    75c8:	e187      	b.n	78da <vTask_GSM_service+0xa46>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
    75ca:	4b2c      	ldr	r3, [pc, #176]	; (767c <vTask_GSM_service+0x7e8>)
    75cc:	781b      	ldrb	r3, [r3, #0]
    75ce:	2201      	movs	r2, #1
    75d0:	4053      	eors	r3, r2
    75d2:	b2db      	uxtb	r3, r3
    75d4:	2b00      	cmp	r3, #0
    75d6:	d100      	bne.n	75da <vTask_GSM_service+0x746>
    75d8:	e09c      	b.n	7714 <vTask_GSM_service+0x880>
    75da:	4b29      	ldr	r3, [pc, #164]	; (7680 <vTask_GSM_service+0x7ec>)
    75dc:	781b      	ldrb	r3, [r3, #0]
    75de:	b2db      	uxtb	r3, r3
    75e0:	2b49      	cmp	r3, #73	; 0x49
    75e2:	d000      	beq.n	75e6 <vTask_GSM_service+0x752>
    75e4:	e096      	b.n	7714 <vTask_GSM_service+0x880>
    75e6:	4b27      	ldr	r3, [pc, #156]	; (7684 <vTask_GSM_service+0x7f0>)
    75e8:	781b      	ldrb	r3, [r3, #0]
    75ea:	b2db      	uxtb	r3, r3
    75ec:	2b49      	cmp	r3, #73	; 0x49
    75ee:	d000      	beq.n	75f2 <vTask_GSM_service+0x75e>
    75f0:	e090      	b.n	7714 <vTask_GSM_service+0x880>
						{
							if (gsm_responseLine_isCallCut(response))
    75f2:	230c      	movs	r3, #12
    75f4:	18fb      	adds	r3, r7, r3
    75f6:	0018      	movs	r0, r3
    75f8:	4b2c      	ldr	r3, [pc, #176]	; (76ac <vTask_GSM_service+0x818>)
    75fa:	4798      	blx	r3
    75fc:	1e03      	subs	r3, r0, #0
    75fe:	d057      	beq.n	76b0 <vTask_GSM_service+0x81c>
							{
								endCall();
    7600:	4b29      	ldr	r3, [pc, #164]	; (76a8 <vTask_GSM_service+0x814>)
    7602:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    7604:	e16d      	b.n	78e2 <vTask_GSM_service+0xa4e>
    7606:	46c0      	nop			; (mov r8, r8)
    7608:	fffffedc 	.word	0xfffffedc
    760c:	00017cd7 	.word	0x00017cd7
    7610:	0000321d 	.word	0x0000321d
    7614:	000032ad 	.word	0x000032ad
    7618:	00002a39 	.word	0x00002a39
    761c:	00001991 	.word	0x00001991
    7620:	0000099d 	.word	0x0000099d
    7624:	00000a0d 	.word	0x00000a0d
    7628:	00019460 	.word	0x00019460
    762c:	0000bd65 	.word	0x0000bd65
    7630:	00003da1 	.word	0x00003da1
    7634:	00019468 	.word	0x00019468
    7638:	00003e0d 	.word	0x00003e0d
    763c:	00017f67 	.word	0x00017f67
    7640:	00017cb3 	.word	0x00017cb3
    7644:	00004b59 	.word	0x00004b59
    7648:	00000a55 	.word	0x00000a55
    764c:	0001944c 	.word	0x0001944c
    7650:	00000b45 	.word	0x00000b45
    7654:	00000acd 	.word	0x00000acd
    7658:	0001946c 	.word	0x0001946c
    765c:	0000290d 	.word	0x0000290d
    7660:	20000628 	.word	0x20000628
    7664:	00000a91 	.word	0x00000a91
    7668:	00000b95 	.word	0x00000b95
    766c:	00000be5 	.word	0x00000be5
    7670:	00000d21 	.word	0x00000d21
    7674:	00019474 	.word	0x00019474
    7678:	00002515 	.word	0x00002515
    767c:	2000071c 	.word	0x2000071c
    7680:	200007a8 	.word	0x200007a8
    7684:	20000767 	.word	0x20000767
    7688:	00003335 	.word	0x00003335
    768c:	20000774 	.word	0x20000774
    7690:	0000f019 	.word	0x0000f019
    7694:	00003365 	.word	0x00003365
    7698:	0000f37d 	.word	0x0000f37d
    769c:	200007d0 	.word	0x200007d0
    76a0:	00006b1d 	.word	0x00006b1d
    76a4:	000043c1 	.word	0x000043c1
    76a8:	000040c9 	.word	0x000040c9
    76ac:	00003409 	.word	0x00003409
							}
							else if(gsm_responseLine_isNew_DTMF_Command_Received(response))
    76b0:	230c      	movs	r3, #12
    76b2:	18fb      	adds	r3, r7, r3
    76b4:	0018      	movs	r0, r3
    76b6:	4b8c      	ldr	r3, [pc, #560]	; (78e8 <vTask_GSM_service+0xa54>)
    76b8:	4798      	blx	r3
    76ba:	1e03      	subs	r3, r0, #0
    76bc:	d024      	beq.n	7708 <vTask_GSM_service+0x874>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
    76be:	4a8b      	ldr	r2, [pc, #556]	; (78ec <vTask_GSM_service+0xa58>)
    76c0:	230c      	movs	r3, #12
    76c2:	18fb      	adds	r3, r7, r3
    76c4:	0011      	movs	r1, r2
    76c6:	0018      	movs	r0, r3
    76c8:	4b89      	ldr	r3, [pc, #548]	; (78f0 <vTask_GSM_service+0xa5c>)
    76ca:	4798      	blx	r3
    76cc:	0003      	movs	r3, r0
    76ce:	228e      	movs	r2, #142	; 0x8e
    76d0:	0052      	lsls	r2, r2, #1
    76d2:	18ba      	adds	r2, r7, r2
    76d4:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
    76d6:	4b85      	ldr	r3, [pc, #532]	; (78ec <vTask_GSM_service+0xa58>)
    76d8:	0019      	movs	r1, r3
    76da:	2000      	movs	r0, #0
    76dc:	4b84      	ldr	r3, [pc, #528]	; (78f0 <vTask_GSM_service+0xa5c>)
    76de:	4798      	blx	r3
    76e0:	0003      	movs	r3, r0
    76e2:	228e      	movs	r2, #142	; 0x8e
    76e4:	0052      	lsls	r2, r2, #1
    76e6:	18ba      	adds	r2, r7, r2
    76e8:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
    76ea:	238e      	movs	r3, #142	; 0x8e
    76ec:	005b      	lsls	r3, r3, #1
    76ee:	18fb      	adds	r3, r7, r3
    76f0:	681b      	ldr	r3, [r3, #0]
    76f2:	0018      	movs	r0, r3
    76f4:	4b7f      	ldr	r3, [pc, #508]	; (78f4 <vTask_GSM_service+0xa60>)
    76f6:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
    76f8:	238e      	movs	r3, #142	; 0x8e
    76fa:	005b      	lsls	r3, r3, #1
    76fc:	18fb      	adds	r3, r7, r3
    76fe:	681b      	ldr	r3, [r3, #0]
    7700:	0018      	movs	r0, r3
    7702:	4b7d      	ldr	r3, [pc, #500]	; (78f8 <vTask_GSM_service+0xa64>)
    7704:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    7706:	e0ec      	b.n	78e2 <vTask_GSM_service+0xa4e>
							}
							else
							{
								playSoundAgain(response);
    7708:	230c      	movs	r3, #12
    770a:	18fb      	adds	r3, r7, r3
    770c:	0018      	movs	r0, r3
    770e:	4b7b      	ldr	r3, [pc, #492]	; (78fc <vTask_GSM_service+0xa68>)
    7710:	4798      	blx	r3
							if (gsm_responseLine_isCallCut(response))
    7712:	e0e6      	b.n	78e2 <vTask_GSM_service+0xa4e>
							}
						}
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
    7714:	4b7a      	ldr	r3, [pc, #488]	; (7900 <vTask_GSM_service+0xa6c>)
    7716:	781b      	ldrb	r3, [r3, #0]
    7718:	b2db      	uxtb	r3, r3
    771a:	2b4e      	cmp	r3, #78	; 0x4e
    771c:	d004      	beq.n	7728 <vTask_GSM_service+0x894>
    771e:	4b78      	ldr	r3, [pc, #480]	; (7900 <vTask_GSM_service+0xa6c>)
    7720:	781b      	ldrb	r3, [r3, #0]
    7722:	b2db      	uxtb	r3, r3
    7724:	2b52      	cmp	r3, #82	; 0x52
    7726:	d163      	bne.n	77f0 <vTask_GSM_service+0x95c>
    7728:	4b76      	ldr	r3, [pc, #472]	; (7904 <vTask_GSM_service+0xa70>)
    772a:	781b      	ldrb	r3, [r3, #0]
    772c:	b2db      	uxtb	r3, r3
    772e:	2b4f      	cmp	r3, #79	; 0x4f
    7730:	d15e      	bne.n	77f0 <vTask_GSM_service+0x95c>
						{
							if (OutGoingcallState(response) == 'R')
    7732:	230c      	movs	r3, #12
    7734:	18fb      	adds	r3, r7, r3
    7736:	0018      	movs	r0, r3
    7738:	4b73      	ldr	r3, [pc, #460]	; (7908 <vTask_GSM_service+0xa74>)
    773a:	4798      	blx	r3
    773c:	0003      	movs	r3, r0
    773e:	2b52      	cmp	r3, #82	; 0x52
    7740:	d10b      	bne.n	775a <vTask_GSM_service+0x8c6>
							{
								callCutWait = xTaskGetTickCount();
    7742:	4b72      	ldr	r3, [pc, #456]	; (790c <vTask_GSM_service+0xa78>)
    7744:	4798      	blx	r3
    7746:	0002      	movs	r2, r0
    7748:	4b71      	ldr	r3, [pc, #452]	; (7910 <vTask_GSM_service+0xa7c>)
    774a:	601a      	str	r2, [r3, #0]
								currentStatus = 'R';
    774c:	4b6c      	ldr	r3, [pc, #432]	; (7900 <vTask_GSM_service+0xa6c>)
    774e:	2252      	movs	r2, #82	; 0x52
    7750:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
    7752:	4b6c      	ldr	r3, [pc, #432]	; (7904 <vTask_GSM_service+0xa70>)
    7754:	224f      	movs	r2, #79	; 0x4f
    7756:	701a      	strb	r2, [r3, #0]
							if (OutGoingcallState(response) == 'R')
    7758:	e0c2      	b.n	78e0 <vTask_GSM_service+0xa4c>
							}
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
    775a:	230c      	movs	r3, #12
    775c:	18fb      	adds	r3, r7, r3
    775e:	0018      	movs	r0, r3
    7760:	4b6c      	ldr	r3, [pc, #432]	; (7914 <vTask_GSM_service+0xa80>)
    7762:	4798      	blx	r3
    7764:	1e03      	subs	r3, r0, #0
    7766:	d107      	bne.n	7778 <vTask_GSM_service+0x8e4>
    7768:	230c      	movs	r3, #12
    776a:	18fb      	adds	r3, r7, r3
    776c:	0018      	movs	r0, r3
    776e:	4b66      	ldr	r3, [pc, #408]	; (7908 <vTask_GSM_service+0xa74>)
    7770:	4798      	blx	r3
    7772:	0003      	movs	r3, r0
    7774:	2b45      	cmp	r3, #69	; 0x45
    7776:	d110      	bne.n	779a <vTask_GSM_service+0x906>
							{
								char t1 = actionType;
    7778:	231c      	movs	r3, #28
    777a:	33ff      	adds	r3, #255	; 0xff
    777c:	18fb      	adds	r3, r7, r3
    777e:	4a66      	ldr	r2, [pc, #408]	; (7918 <vTask_GSM_service+0xa84>)
    7780:	7812      	ldrb	r2, [r2, #0]
    7782:	701a      	strb	r2, [r3, #0]
								endCall();
    7784:	4b65      	ldr	r3, [pc, #404]	; (791c <vTask_GSM_service+0xa88>)
    7786:	4798      	blx	r3
								checkRespSMS(t1);
    7788:	231c      	movs	r3, #28
    778a:	33ff      	adds	r3, #255	; 0xff
    778c:	18fb      	adds	r3, r7, r3
    778e:	781b      	ldrb	r3, [r3, #0]
    7790:	0018      	movs	r0, r3
    7792:	4b63      	ldr	r3, [pc, #396]	; (7920 <vTask_GSM_service+0xa8c>)
    7794:	4798      	blx	r3
							{
    7796:	46c0      	nop			; (mov r8, r8)
							if (OutGoingcallState(response) == 'R')
    7798:	e0a2      	b.n	78e0 <vTask_GSM_service+0xa4c>
							}
							else if (OutGoingcallState(response) == 'I')
    779a:	230c      	movs	r3, #12
    779c:	18fb      	adds	r3, r7, r3
    779e:	0018      	movs	r0, r3
    77a0:	4b59      	ldr	r3, [pc, #356]	; (7908 <vTask_GSM_service+0xa74>)
    77a2:	4798      	blx	r3
    77a4:	0003      	movs	r3, r0
    77a6:	2b49      	cmp	r3, #73	; 0x49
    77a8:	d000      	beq.n	77ac <vTask_GSM_service+0x918>
    77aa:	e099      	b.n	78e0 <vTask_GSM_service+0xa4c>
							{
								callCutWait = xTaskGetTickCount();
    77ac:	4b57      	ldr	r3, [pc, #348]	; (790c <vTask_GSM_service+0xa78>)
    77ae:	4798      	blx	r3
    77b0:	0002      	movs	r2, r0
    77b2:	4b57      	ldr	r3, [pc, #348]	; (7910 <vTask_GSM_service+0xa7c>)
    77b4:	601a      	str	r2, [r3, #0]
								currentStatus = 'I';
    77b6:	4b52      	ldr	r3, [pc, #328]	; (7900 <vTask_GSM_service+0xa6c>)
    77b8:	2249      	movs	r2, #73	; 0x49
    77ba:	701a      	strb	r2, [r3, #0]
								currentCallStatus = 'O';
    77bc:	4b51      	ldr	r3, [pc, #324]	; (7904 <vTask_GSM_service+0xa70>)
    77be:	224f      	movs	r2, #79	; 0x4f
    77c0:	701a      	strb	r2, [r3, #0]
								callAccepted = true;
    77c2:	4b58      	ldr	r3, [pc, #352]	; (7924 <vTask_GSM_service+0xa90>)
    77c4:	2201      	movs	r2, #1
    77c6:	701a      	strb	r2, [r3, #0]
								setCallStateOnLCD(LCDCALLSTATE_INCALL,NULL,true);
    77c8:	2201      	movs	r2, #1
    77ca:	2100      	movs	r1, #0
    77cc:	2002      	movs	r0, #2
    77ce:	4b56      	ldr	r3, [pc, #344]	; (7928 <vTask_GSM_service+0xa94>)
    77d0:	4798      	blx	r3
								if (!m2mEvent)
    77d2:	4b56      	ldr	r3, [pc, #344]	; (792c <vTask_GSM_service+0xa98>)
    77d4:	781b      	ldrb	r3, [r3, #0]
    77d6:	2201      	movs	r2, #1
    77d8:	4053      	eors	r3, r2
    77da:	b2db      	uxtb	r3, r3
    77dc:	2b00      	cmp	r3, #0
    77de:	d100      	bne.n	77e2 <vTask_GSM_service+0x94e>
    77e0:	e07e      	b.n	78e0 <vTask_GSM_service+0xa4c>
								{
									playSound(actionType,true);
    77e2:	4b4d      	ldr	r3, [pc, #308]	; (7918 <vTask_GSM_service+0xa84>)
    77e4:	781b      	ldrb	r3, [r3, #0]
    77e6:	2101      	movs	r1, #1
    77e8:	0018      	movs	r0, r3
    77ea:	4b51      	ldr	r3, [pc, #324]	; (7930 <vTask_GSM_service+0xa9c>)
    77ec:	4798      	blx	r3
							if (OutGoingcallState(response) == 'R')
    77ee:	e077      	b.n	78e0 <vTask_GSM_service+0xa4c>
								}
							}
						}
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
    77f0:	4b43      	ldr	r3, [pc, #268]	; (7900 <vTask_GSM_service+0xa6c>)
    77f2:	781b      	ldrb	r3, [r3, #0]
    77f4:	b2db      	uxtb	r3, r3
    77f6:	2b49      	cmp	r3, #73	; 0x49
    77f8:	d001      	beq.n	77fe <vTask_GSM_service+0x96a>
    77fa:	f7ff fbf7 	bl	6fec <vTask_GSM_service+0x158>
    77fe:	4b41      	ldr	r3, [pc, #260]	; (7904 <vTask_GSM_service+0xa70>)
    7800:	781b      	ldrb	r3, [r3, #0]
    7802:	b2db      	uxtb	r3, r3
    7804:	2b4f      	cmp	r3, #79	; 0x4f
    7806:	d001      	beq.n	780c <vTask_GSM_service+0x978>
    7808:	f7ff fbf0 	bl	6fec <vTask_GSM_service+0x158>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
    780c:	230c      	movs	r3, #12
    780e:	18fb      	adds	r3, r7, r3
    7810:	0018      	movs	r0, r3
    7812:	4b40      	ldr	r3, [pc, #256]	; (7914 <vTask_GSM_service+0xa80>)
    7814:	4798      	blx	r3
    7816:	1e03      	subs	r3, r0, #0
    7818:	d107      	bne.n	782a <vTask_GSM_service+0x996>
    781a:	230c      	movs	r3, #12
    781c:	18fb      	adds	r3, r7, r3
    781e:	0018      	movs	r0, r3
    7820:	4b39      	ldr	r3, [pc, #228]	; (7908 <vTask_GSM_service+0xa74>)
    7822:	4798      	blx	r3
    7824:	0003      	movs	r3, r0
    7826:	2b45      	cmp	r3, #69	; 0x45
    7828:	d102      	bne.n	7830 <vTask_GSM_service+0x99c>
							{
								endCall();
    782a:	4b3c      	ldr	r3, [pc, #240]	; (791c <vTask_GSM_service+0xa88>)
    782c:	4798      	blx	r3
    782e:	e058      	b.n	78e2 <vTask_GSM_service+0xa4e>
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
    7830:	230c      	movs	r3, #12
    7832:	18fb      	adds	r3, r7, r3
    7834:	0018      	movs	r0, r3
    7836:	4b2c      	ldr	r3, [pc, #176]	; (78e8 <vTask_GSM_service+0xa54>)
    7838:	4798      	blx	r3
    783a:	1e03      	subs	r3, r0, #0
    783c:	d025      	beq.n	788a <vTask_GSM_service+0x9f6>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
    783e:	4a2b      	ldr	r2, [pc, #172]	; (78ec <vTask_GSM_service+0xa58>)
    7840:	230c      	movs	r3, #12
    7842:	18fb      	adds	r3, r7, r3
    7844:	0011      	movs	r1, r2
    7846:	0018      	movs	r0, r3
    7848:	4b29      	ldr	r3, [pc, #164]	; (78f0 <vTask_GSM_service+0xa5c>)
    784a:	4798      	blx	r3
    784c:	0003      	movs	r3, r0
    784e:	228a      	movs	r2, #138	; 0x8a
    7850:	0052      	lsls	r2, r2, #1
    7852:	18ba      	adds	r2, r7, r2
    7854:	6013      	str	r3, [r2, #0]
								dtmf_tocken = strtok(NULL,": ");
    7856:	4b25      	ldr	r3, [pc, #148]	; (78ec <vTask_GSM_service+0xa58>)
    7858:	0019      	movs	r1, r3
    785a:	2000      	movs	r0, #0
    785c:	4b24      	ldr	r3, [pc, #144]	; (78f0 <vTask_GSM_service+0xa5c>)
    785e:	4798      	blx	r3
    7860:	0003      	movs	r3, r0
    7862:	228a      	movs	r2, #138	; 0x8a
    7864:	0052      	lsls	r2, r2, #1
    7866:	18ba      	adds	r2, r7, r2
    7868:	6013      	str	r3, [r2, #0]
								RemoveSpaces(dtmf_tocken);
    786a:	238a      	movs	r3, #138	; 0x8a
    786c:	005b      	lsls	r3, r3, #1
    786e:	18fb      	adds	r3, r7, r3
    7870:	681b      	ldr	r3, [r3, #0]
    7872:	0018      	movs	r0, r3
    7874:	4b1f      	ldr	r3, [pc, #124]	; (78f4 <vTask_GSM_service+0xa60>)
    7876:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
    7878:	238a      	movs	r3, #138	; 0x8a
    787a:	005b      	lsls	r3, r3, #1
    787c:	18fb      	adds	r3, r7, r3
    787e:	681b      	ldr	r3, [r3, #0]
    7880:	0018      	movs	r0, r3
    7882:	4b1d      	ldr	r3, [pc, #116]	; (78f8 <vTask_GSM_service+0xa64>)
    7884:	4798      	blx	r3
    7886:	f7ff fbb1 	bl	6fec <vTask_GSM_service+0x158>
							}
							else
							{
								playSoundAgain(response);
    788a:	230c      	movs	r3, #12
    788c:	18fb      	adds	r3, r7, r3
    788e:	0018      	movs	r0, r3
    7890:	4b1a      	ldr	r3, [pc, #104]	; (78fc <vTask_GSM_service+0xa68>)
    7892:	4798      	blx	r3
    7894:	f7ff fbaa 	bl	6fec <vTask_GSM_service+0x158>
				}
			}
		}
		else
		{
			boolGsm_config_flag			=false;
    7898:	232c      	movs	r3, #44	; 0x2c
    789a:	33ff      	adds	r3, #255	; 0xff
    789c:	18fb      	adds	r3, r7, r3
    789e:	2200      	movs	r2, #0
    78a0:	701a      	strb	r2, [r3, #0]
			boolOne_Time_Msg_Delete_Flag   =false;
    78a2:	2395      	movs	r3, #149	; 0x95
    78a4:	005b      	lsls	r3, r3, #1
    78a6:	18fb      	adds	r3, r7, r3
    78a8:	2200      	movs	r2, #0
    78aa:	701a      	strb	r2, [r3, #0]
			
			GSM_PWR_ON;
    78ac:	4b21      	ldr	r3, [pc, #132]	; (7934 <vTask_GSM_service+0xaa0>)
    78ae:	4a21      	ldr	r2, [pc, #132]	; (7934 <vTask_GSM_service+0xaa0>)
    78b0:	6812      	ldr	r2, [r2, #0]
    78b2:	2180      	movs	r1, #128	; 0x80
    78b4:	0249      	lsls	r1, r1, #9
    78b6:	430a      	orrs	r2, r1
    78b8:	601a      	str	r2, [r3, #0]
			vTaskDelay(3000);
    78ba:	4b1f      	ldr	r3, [pc, #124]	; (7938 <vTask_GSM_service+0xaa4>)
    78bc:	0018      	movs	r0, r3
    78be:	4b1f      	ldr	r3, [pc, #124]	; (793c <vTask_GSM_service+0xaa8>)
    78c0:	4798      	blx	r3
			GSM_PWR_OFF;
    78c2:	4b1c      	ldr	r3, [pc, #112]	; (7934 <vTask_GSM_service+0xaa0>)
    78c4:	4a1b      	ldr	r2, [pc, #108]	; (7934 <vTask_GSM_service+0xaa0>)
    78c6:	6812      	ldr	r2, [r2, #0]
    78c8:	491d      	ldr	r1, [pc, #116]	; (7940 <vTask_GSM_service+0xaac>)
    78ca:	400a      	ands	r2, r1
    78cc:	601a      	str	r2, [r3, #0]
			vTaskDelay(5000);
    78ce:	4b1d      	ldr	r3, [pc, #116]	; (7944 <vTask_GSM_service+0xab0>)
    78d0:	0018      	movs	r0, r3
    78d2:	4b1a      	ldr	r3, [pc, #104]	; (793c <vTask_GSM_service+0xaa8>)
    78d4:	4798      	blx	r3
    78d6:	f7ff fb89 	bl	6fec <vTask_GSM_service+0x158>
							if (gsm_responseLine_isRinging(response))
    78da:	46c0      	nop			; (mov r8, r8)
    78dc:	f7ff fb86 	bl	6fec <vTask_GSM_service+0x158>
							if (OutGoingcallState(response) == 'R')
    78e0:	46c0      	nop			; (mov r8, r8)
		if (GSM_STATUS_OK)
    78e2:	f7ff fb83 	bl	6fec <vTask_GSM_service+0x158>
    78e6:	46c0      	nop			; (mov r8, r8)
    78e8:	00003481 	.word	0x00003481
    78ec:	00019484 	.word	0x00019484
    78f0:	00017fc9 	.word	0x00017fc9
    78f4:	00002899 	.word	0x00002899
    78f8:	00004955 	.word	0x00004955
    78fc:	00004519 	.word	0x00004519
    7900:	200007a8 	.word	0x200007a8
    7904:	20000767 	.word	0x20000767
    7908:	00004659 	.word	0x00004659
    790c:	0000f37d 	.word	0x0000f37d
    7910:	200007d0 	.word	0x200007d0
    7914:	00003409 	.word	0x00003409
    7918:	2000073b 	.word	0x2000073b
    791c:	000040c9 	.word	0x000040c9
    7920:	000048dd 	.word	0x000048dd
    7924:	20000776 	.word	0x20000776
    7928:	0000bd65 	.word	0x0000bd65
    792c:	2000071b 	.word	0x2000071b
    7930:	00004409 	.word	0x00004409
    7934:	41004490 	.word	0x41004490
    7938:	00000bb8 	.word	0x00000bb8
    793c:	0000f019 	.word	0x0000f019
    7940:	fffeffff 	.word	0xfffeffff
    7944:	00001388 	.word	0x00001388

00007948 <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
    7948:	b590      	push	{r4, r7, lr}
    794a:	b083      	sub	sp, #12
    794c:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)940,NULL,1,NULL);
    794e:	23eb      	movs	r3, #235	; 0xeb
    7950:	009a      	lsls	r2, r3, #2
    7952:	4806      	ldr	r0, [pc, #24]	; (796c <start_gsm_service+0x24>)
    7954:	2300      	movs	r3, #0
    7956:	9301      	str	r3, [sp, #4]
    7958:	2301      	movs	r3, #1
    795a:	9300      	str	r3, [sp, #0]
    795c:	2300      	movs	r3, #0
    795e:	2100      	movs	r1, #0
    7960:	4c03      	ldr	r4, [pc, #12]	; (7970 <start_gsm_service+0x28>)
    7962:	47a0      	blx	r4
}
    7964:	46c0      	nop			; (mov r8, r8)
    7966:	46bd      	mov	sp, r7
    7968:	b001      	add	sp, #4
    796a:	bd90      	pop	{r4, r7, pc}
    796c:	00006e95 	.word	0x00006e95
    7970:	0000ecd9 	.word	0x0000ecd9

00007974 <busy>:

bool busy(void)
{
    7974:	b580      	push	{r7, lr}
    7976:	af00      	add	r7, sp, #0
	return (inCall || isRinging  /*|| inInterrupt*/);
    7978:	4b08      	ldr	r3, [pc, #32]	; (799c <busy+0x28>)
    797a:	781b      	ldrb	r3, [r3, #0]
    797c:	2b00      	cmp	r3, #0
    797e:	d103      	bne.n	7988 <busy+0x14>
    7980:	4b07      	ldr	r3, [pc, #28]	; (79a0 <busy+0x2c>)
    7982:	781b      	ldrb	r3, [r3, #0]
    7984:	2b00      	cmp	r3, #0
    7986:	d001      	beq.n	798c <busy+0x18>
    7988:	2301      	movs	r3, #1
    798a:	e000      	b.n	798e <busy+0x1a>
    798c:	2300      	movs	r3, #0
    798e:	1c1a      	adds	r2, r3, #0
    7990:	2301      	movs	r3, #1
    7992:	4013      	ands	r3, r2
    7994:	b2db      	uxtb	r3, r3
}
    7996:	0018      	movs	r0, r3
    7998:	46bd      	mov	sp, r7
    799a:	bd80      	pop	{r7, pc}
    799c:	20000774 	.word	0x20000774
    79a0:	2000022c 	.word	0x2000022c

000079a4 <checkNotInCall>:

bool checkNotInCall(void)
{
    79a4:	b580      	push	{r7, lr}
    79a6:	af00      	add	r7, sp, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
    79a8:	4b13      	ldr	r3, [pc, #76]	; (79f8 <checkNotInCall+0x54>)
    79aa:	781b      	ldrb	r3, [r3, #0]
    79ac:	b2db      	uxtb	r3, r3
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
    79ae:	2b4e      	cmp	r3, #78	; 0x4e
    79b0:	d11a      	bne.n	79e8 <checkNotInCall+0x44>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
    79b2:	4b12      	ldr	r3, [pc, #72]	; (79fc <checkNotInCall+0x58>)
    79b4:	781b      	ldrb	r3, [r3, #0]
    79b6:	b2db      	uxtb	r3, r3
    79b8:	2b4e      	cmp	r3, #78	; 0x4e
    79ba:	d115      	bne.n	79e8 <checkNotInCall+0x44>
    79bc:	4b10      	ldr	r3, [pc, #64]	; (7a00 <checkNotInCall+0x5c>)
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	2b00      	cmp	r3, #0
    79c2:	d011      	beq.n	79e8 <checkNotInCall+0x44>
	&&  !freezeIncomingCalls && !busy());
    79c4:	4b0f      	ldr	r3, [pc, #60]	; (7a04 <checkNotInCall+0x60>)
    79c6:	781b      	ldrb	r3, [r3, #0]
    79c8:	2201      	movs	r2, #1
    79ca:	4053      	eors	r3, r2
    79cc:	b2db      	uxtb	r3, r3
    79ce:	2b00      	cmp	r3, #0
    79d0:	d00a      	beq.n	79e8 <checkNotInCall+0x44>
    79d2:	4b0d      	ldr	r3, [pc, #52]	; (7a08 <checkNotInCall+0x64>)
    79d4:	4798      	blx	r3
    79d6:	0003      	movs	r3, r0
    79d8:	001a      	movs	r2, r3
    79da:	2301      	movs	r3, #1
    79dc:	4053      	eors	r3, r2
    79de:	b2db      	uxtb	r3, r3
    79e0:	2b00      	cmp	r3, #0
    79e2:	d001      	beq.n	79e8 <checkNotInCall+0x44>
    79e4:	2301      	movs	r3, #1
    79e6:	e000      	b.n	79ea <checkNotInCall+0x46>
    79e8:	2300      	movs	r3, #0
    79ea:	1c1a      	adds	r2, r3, #0
    79ec:	2301      	movs	r3, #1
    79ee:	4013      	ands	r3, r2
    79f0:	b2db      	uxtb	r3, r3
}
    79f2:	0018      	movs	r0, r3
    79f4:	46bd      	mov	sp, r7
    79f6:	bd80      	pop	{r7, pc}
    79f8:	200007a8 	.word	0x200007a8
    79fc:	20000767 	.word	0x20000767
    7a00:	2000074a 	.word	0x2000074a
    7a04:	2000071c 	.word	0x2000071c
    7a08:	00007975 	.word	0x00007975

00007a0c <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
    7a0c:	b580      	push	{r7, lr}
    7a0e:	af00      	add	r7, sp, #0
	if (factory_settings_parameter_struct.ENABLE_M2M)
    7a10:	4b20      	ldr	r3, [pc, #128]	; (7a94 <gsm_checkSleepElligible+0x88>)
    7a12:	78db      	ldrb	r3, [r3, #3]
    7a14:	2b00      	cmp	r3, #0
    7a16:	d020      	beq.n	7a5a <gsm_checkSleepElligible+0x4e>
	{
		return(!commandsAccepted  && checkNotInCall() && !m2mEventStaged && !eventStaged);
    7a18:	4b1f      	ldr	r3, [pc, #124]	; (7a98 <gsm_checkSleepElligible+0x8c>)
    7a1a:	781b      	ldrb	r3, [r3, #0]
    7a1c:	2201      	movs	r2, #1
    7a1e:	4053      	eors	r3, r2
    7a20:	b2db      	uxtb	r3, r3
    7a22:	2b00      	cmp	r3, #0
    7a24:	d013      	beq.n	7a4e <gsm_checkSleepElligible+0x42>
    7a26:	4b1d      	ldr	r3, [pc, #116]	; (7a9c <gsm_checkSleepElligible+0x90>)
    7a28:	4798      	blx	r3
    7a2a:	1e03      	subs	r3, r0, #0
    7a2c:	d00f      	beq.n	7a4e <gsm_checkSleepElligible+0x42>
    7a2e:	4b1c      	ldr	r3, [pc, #112]	; (7aa0 <gsm_checkSleepElligible+0x94>)
    7a30:	781b      	ldrb	r3, [r3, #0]
    7a32:	2201      	movs	r2, #1
    7a34:	4053      	eors	r3, r2
    7a36:	b2db      	uxtb	r3, r3
    7a38:	2b00      	cmp	r3, #0
    7a3a:	d008      	beq.n	7a4e <gsm_checkSleepElligible+0x42>
    7a3c:	4b19      	ldr	r3, [pc, #100]	; (7aa4 <gsm_checkSleepElligible+0x98>)
    7a3e:	781b      	ldrb	r3, [r3, #0]
    7a40:	2201      	movs	r2, #1
    7a42:	4053      	eors	r3, r2
    7a44:	b2db      	uxtb	r3, r3
    7a46:	2b00      	cmp	r3, #0
    7a48:	d001      	beq.n	7a4e <gsm_checkSleepElligible+0x42>
    7a4a:	2301      	movs	r3, #1
    7a4c:	e000      	b.n	7a50 <gsm_checkSleepElligible+0x44>
    7a4e:	2300      	movs	r3, #0
    7a50:	1c1a      	adds	r2, r3, #0
    7a52:	2301      	movs	r3, #1
    7a54:	4013      	ands	r3, r2
    7a56:	b2db      	uxtb	r3, r3
    7a58:	e018      	b.n	7a8c <gsm_checkSleepElligible+0x80>
	}
	else
	{
		return(!commandsAccepted  && checkNotInCall() && !eventStaged);
    7a5a:	4b0f      	ldr	r3, [pc, #60]	; (7a98 <gsm_checkSleepElligible+0x8c>)
    7a5c:	781b      	ldrb	r3, [r3, #0]
    7a5e:	2201      	movs	r2, #1
    7a60:	4053      	eors	r3, r2
    7a62:	b2db      	uxtb	r3, r3
    7a64:	2b00      	cmp	r3, #0
    7a66:	d00c      	beq.n	7a82 <gsm_checkSleepElligible+0x76>
    7a68:	4b0c      	ldr	r3, [pc, #48]	; (7a9c <gsm_checkSleepElligible+0x90>)
    7a6a:	4798      	blx	r3
    7a6c:	1e03      	subs	r3, r0, #0
    7a6e:	d008      	beq.n	7a82 <gsm_checkSleepElligible+0x76>
    7a70:	4b0c      	ldr	r3, [pc, #48]	; (7aa4 <gsm_checkSleepElligible+0x98>)
    7a72:	781b      	ldrb	r3, [r3, #0]
    7a74:	2201      	movs	r2, #1
    7a76:	4053      	eors	r3, r2
    7a78:	b2db      	uxtb	r3, r3
    7a7a:	2b00      	cmp	r3, #0
    7a7c:	d001      	beq.n	7a82 <gsm_checkSleepElligible+0x76>
    7a7e:	2301      	movs	r3, #1
    7a80:	e000      	b.n	7a84 <gsm_checkSleepElligible+0x78>
    7a82:	2300      	movs	r3, #0
    7a84:	1c1a      	adds	r2, r3, #0
    7a86:	2301      	movs	r3, #1
    7a88:	4013      	ands	r3, r2
    7a8a:	b2db      	uxtb	r3, r3
	}
    7a8c:	0018      	movs	r0, r3
    7a8e:	46bd      	mov	sp, r7
    7a90:	bd80      	pop	{r7, pc}
    7a92:	46c0      	nop			; (mov r8, r8)
    7a94:	20000628 	.word	0x20000628
    7a98:	20000763 	.word	0x20000763
    7a9c:	000079a5 	.word	0x000079a5
    7aa0:	20000766 	.word	0x20000766
    7aa4:	2000079a 	.word	0x2000079a

00007aa8 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
    7aa8:	b590      	push	{r4, r7, lr}
    7aaa:	b093      	sub	sp, #76	; 0x4c
    7aac:	af02      	add	r7, sp, #8
    7aae:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	lcd_in_sleep = false;
    7ab0:	4be6      	ldr	r3, [pc, #920]	; (7e4c <lcd_displaying_task+0x3a4>)
    7ab2:	2200      	movs	r2, #0
    7ab4:	701a      	strb	r2, [r3, #0]
	
	LCD_PWR_CONFIG();
    7ab6:	4be6      	ldr	r3, [pc, #920]	; (7e50 <lcd_displaying_task+0x3a8>)
    7ab8:	4798      	blx	r3
	LCD_PWR_EN();
    7aba:	4be6      	ldr	r3, [pc, #920]	; (7e54 <lcd_displaying_task+0x3ac>)
    7abc:	4798      	blx	r3
	vTaskDelay(500);
    7abe:	23fa      	movs	r3, #250	; 0xfa
    7ac0:	005b      	lsls	r3, r3, #1
    7ac2:	0018      	movs	r0, r3
    7ac4:	4be4      	ldr	r3, [pc, #912]	; (7e58 <lcd_displaying_task+0x3b0>)
    7ac6:	4798      	blx	r3
	
	LCD_init();
    7ac8:	4be4      	ldr	r3, [pc, #912]	; (7e5c <lcd_displaying_task+0x3b4>)
    7aca:	4798      	blx	r3
	
	uint8_t screen=1;
    7acc:	233f      	movs	r3, #63	; 0x3f
    7ace:	18fb      	adds	r3, r7, r3
    7ad0:	2201      	movs	r2, #1
    7ad2:	701a      	strb	r2, [r3, #0]
	
	bool four_sec_timer_is_active = true;
    7ad4:	233d      	movs	r3, #61	; 0x3d
    7ad6:	18fb      	adds	r3, r7, r3
    7ad8:	2201      	movs	r2, #1
    7ada:	701a      	strb	r2, [r3, #0]
	bool two_sec_timer_is_active = false;
    7adc:	233c      	movs	r3, #60	; 0x3c
    7ade:	18fb      	adds	r3, r7, r3
    7ae0:	2200      	movs	r2, #0
    7ae2:	701a      	strb	r2, [r3, #0]
	
	uint8_t time=0;
    7ae4:	233a      	movs	r3, #58	; 0x3a
    7ae6:	18fb      	adds	r3, r7, r3
    7ae8:	2200      	movs	r2, #0
    7aea:	701a      	strb	r2, [r3, #0]
	
	byte Network_0[8]={
    7aec:	2330      	movs	r3, #48	; 0x30
    7aee:	18fb      	adds	r3, r7, r3
    7af0:	0018      	movs	r0, r3
    7af2:	2308      	movs	r3, #8
    7af4:	001a      	movs	r2, r3
    7af6:	2100      	movs	r1, #0
    7af8:	4bd9      	ldr	r3, [pc, #868]	; (7e60 <lcd_displaying_task+0x3b8>)
    7afa:	4798      	blx	r3
		0B00000,
		0B00000,
		0B00000
	};
	
	byte Network_1[8]={
    7afc:	2328      	movs	r3, #40	; 0x28
    7afe:	18fb      	adds	r3, r7, r3
    7b00:	4ad8      	ldr	r2, [pc, #864]	; (7e64 <lcd_displaying_task+0x3bc>)
    7b02:	ca03      	ldmia	r2!, {r0, r1}
    7b04:	c303      	stmia	r3!, {r0, r1}
		0B00000,
		0B00000,
		0B11111,
		0B11111
	};
	byte Network_2[8]={
    7b06:	2320      	movs	r3, #32
    7b08:	18fb      	adds	r3, r7, r3
    7b0a:	4ad7      	ldr	r2, [pc, #860]	; (7e68 <lcd_displaying_task+0x3c0>)
    7b0c:	ca03      	ldmia	r2!, {r0, r1}
    7b0e:	c303      	stmia	r3!, {r0, r1}
		0B00000,
		0B11111,
		0B11111,
		0B11111
	};
	byte Network_3[8]={
    7b10:	2318      	movs	r3, #24
    7b12:	18fb      	adds	r3, r7, r3
    7b14:	4ad5      	ldr	r2, [pc, #852]	; (7e6c <lcd_displaying_task+0x3c4>)
    7b16:	ca03      	ldmia	r2!, {r0, r1}
    7b18:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111,
		0B11111
	};
	byte Network_4[8]={
    7b1a:	2310      	movs	r3, #16
    7b1c:	18fb      	adds	r3, r7, r3
    7b1e:	4ad4      	ldr	r2, [pc, #848]	; (7e70 <lcd_displaying_task+0x3c8>)
    7b20:	ca03      	ldmia	r2!, {r0, r1}
    7b22:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111
	};

	byte Network_5[8]={
    7b24:	2308      	movs	r3, #8
    7b26:	18fb      	adds	r3, r7, r3
    7b28:	4ad2      	ldr	r2, [pc, #840]	; (7e74 <lcd_displaying_task+0x3cc>)
    7b2a:	ca03      	ldmia	r2!, {r0, r1}
    7b2c:	c303      	stmia	r3!, {r0, r1}
		0B11111,
		0B11111,
		0B11111
	};
	
	LCD_Create_Custom_createChar(0,Network_0);
    7b2e:	2330      	movs	r3, #48	; 0x30
    7b30:	18fb      	adds	r3, r7, r3
    7b32:	0019      	movs	r1, r3
    7b34:	2000      	movs	r0, #0
    7b36:	4bd0      	ldr	r3, [pc, #832]	; (7e78 <lcd_displaying_task+0x3d0>)
    7b38:	4798      	blx	r3
	LCD_Create_Custom_createChar(1,Network_1);
    7b3a:	2328      	movs	r3, #40	; 0x28
    7b3c:	18fb      	adds	r3, r7, r3
    7b3e:	0019      	movs	r1, r3
    7b40:	2001      	movs	r0, #1
    7b42:	4bcd      	ldr	r3, [pc, #820]	; (7e78 <lcd_displaying_task+0x3d0>)
    7b44:	4798      	blx	r3
	LCD_Create_Custom_createChar(2,Network_2);
    7b46:	2320      	movs	r3, #32
    7b48:	18fb      	adds	r3, r7, r3
    7b4a:	0019      	movs	r1, r3
    7b4c:	2002      	movs	r0, #2
    7b4e:	4bca      	ldr	r3, [pc, #808]	; (7e78 <lcd_displaying_task+0x3d0>)
    7b50:	4798      	blx	r3
	LCD_Create_Custom_createChar(3,Network_3);
    7b52:	2318      	movs	r3, #24
    7b54:	18fb      	adds	r3, r7, r3
    7b56:	0019      	movs	r1, r3
    7b58:	2003      	movs	r0, #3
    7b5a:	4bc7      	ldr	r3, [pc, #796]	; (7e78 <lcd_displaying_task+0x3d0>)
    7b5c:	4798      	blx	r3
	LCD_Create_Custom_createChar(4,Network_4);
    7b5e:	2310      	movs	r3, #16
    7b60:	18fb      	adds	r3, r7, r3
    7b62:	0019      	movs	r1, r3
    7b64:	2004      	movs	r0, #4
    7b66:	4bc4      	ldr	r3, [pc, #784]	; (7e78 <lcd_displaying_task+0x3d0>)
    7b68:	4798      	blx	r3
	LCD_Create_Custom_createChar(5,Network_5);
    7b6a:	2308      	movs	r3, #8
    7b6c:	18fb      	adds	r3, r7, r3
    7b6e:	0019      	movs	r1, r3
    7b70:	2005      	movs	r0, #5
    7b72:	4bc1      	ldr	r3, [pc, #772]	; (7e78 <lcd_displaying_task+0x3d0>)
    7b74:	4798      	blx	r3
	
	LCD_clear();
    7b76:	4bc1      	ldr	r3, [pc, #772]	; (7e7c <lcd_displaying_task+0x3d4>)
    7b78:	4798      	blx	r3
	LCD_setCursor(0,0);
    7b7a:	2100      	movs	r1, #0
    7b7c:	2000      	movs	r0, #0
    7b7e:	4bc0      	ldr	r3, [pc, #768]	; (7e80 <lcd_displaying_task+0x3d8>)
    7b80:	4798      	blx	r3
	lcd_printf(" KRISHNA  SMART ");
    7b82:	4bc0      	ldr	r3, [pc, #768]	; (7e84 <lcd_displaying_task+0x3dc>)
    7b84:	0018      	movs	r0, r3
    7b86:	4bc0      	ldr	r3, [pc, #768]	; (7e88 <lcd_displaying_task+0x3e0>)
    7b88:	4798      	blx	r3
	LCD_setCursor(0,1);
    7b8a:	2101      	movs	r1, #1
    7b8c:	2000      	movs	r0, #0
    7b8e:	4bbc      	ldr	r3, [pc, #752]	; (7e80 <lcd_displaying_task+0x3d8>)
    7b90:	4798      	blx	r3
	lcd_printf("   TECHNOLOGY   ");
    7b92:	4bbe      	ldr	r3, [pc, #760]	; (7e8c <lcd_displaying_task+0x3e4>)
    7b94:	0018      	movs	r0, r3
    7b96:	4bbc      	ldr	r3, [pc, #752]	; (7e88 <lcd_displaying_task+0x3e0>)
    7b98:	4798      	blx	r3
	vTaskDelay(3000);
    7b9a:	4bbd      	ldr	r3, [pc, #756]	; (7e90 <lcd_displaying_task+0x3e8>)
    7b9c:	0018      	movs	r0, r3
    7b9e:	4bae      	ldr	r3, [pc, #696]	; (7e58 <lcd_displaying_task+0x3b0>)
    7ba0:	4798      	blx	r3
	
	LCD_clear();
    7ba2:	4bb6      	ldr	r3, [pc, #728]	; (7e7c <lcd_displaying_task+0x3d4>)
    7ba4:	4798      	blx	r3
	LCD_setCursor(0,0);
    7ba6:	2100      	movs	r1, #0
    7ba8:	2000      	movs	r0, #0
    7baa:	4bb5      	ldr	r3, [pc, #724]	; (7e80 <lcd_displaying_task+0x3d8>)
    7bac:	4798      	blx	r3
	lcd_printf("  SOFTWARE VER  ");
    7bae:	4bb9      	ldr	r3, [pc, #740]	; (7e94 <lcd_displaying_task+0x3ec>)
    7bb0:	0018      	movs	r0, r3
    7bb2:	4bb5      	ldr	r3, [pc, #724]	; (7e88 <lcd_displaying_task+0x3e0>)
    7bb4:	4798      	blx	r3
	LCD_setCursor(0,1);
    7bb6:	2101      	movs	r1, #1
    7bb8:	2000      	movs	r0, #0
    7bba:	4bb1      	ldr	r3, [pc, #708]	; (7e80 <lcd_displaying_task+0x3d8>)
    7bbc:	4798      	blx	r3
	lcd_printf("%s",VERSION_NO);
    7bbe:	4ab6      	ldr	r2, [pc, #728]	; (7e98 <lcd_displaying_task+0x3f0>)
    7bc0:	4bb6      	ldr	r3, [pc, #728]	; (7e9c <lcd_displaying_task+0x3f4>)
    7bc2:	0011      	movs	r1, r2
    7bc4:	0018      	movs	r0, r3
    7bc6:	4bb0      	ldr	r3, [pc, #704]	; (7e88 <lcd_displaying_task+0x3e0>)
    7bc8:	4798      	blx	r3
	vTaskDelay(2000);
    7bca:	23fa      	movs	r3, #250	; 0xfa
    7bcc:	00db      	lsls	r3, r3, #3
    7bce:	0018      	movs	r0, r3
    7bd0:	4ba1      	ldr	r3, [pc, #644]	; (7e58 <lcd_displaying_task+0x3b0>)
    7bd2:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
    7bd4:	23fa      	movs	r3, #250	; 0xfa
    7bd6:	0119      	lsls	r1, r3, #4
    7bd8:	4bb1      	ldr	r3, [pc, #708]	; (7ea0 <lcd_displaying_task+0x3f8>)
    7bda:	9300      	str	r3, [sp, #0]
    7bdc:	2300      	movs	r3, #0
    7bde:	2201      	movs	r2, #1
    7be0:	2000      	movs	r0, #0
    7be2:	4cb0      	ldr	r4, [pc, #704]	; (7ea4 <lcd_displaying_task+0x3fc>)
    7be4:	47a0      	blx	r4
    7be6:	0002      	movs	r2, r0
    7be8:	4baf      	ldr	r3, [pc, #700]	; (7ea8 <lcd_displaying_task+0x400>)
    7bea:	601a      	str	r2, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
    7bec:	4bae      	ldr	r3, [pc, #696]	; (7ea8 <lcd_displaying_task+0x400>)
    7bee:	681c      	ldr	r4, [r3, #0]
    7bf0:	4bae      	ldr	r3, [pc, #696]	; (7eac <lcd_displaying_task+0x404>)
    7bf2:	4798      	blx	r3
    7bf4:	0002      	movs	r2, r0
    7bf6:	2300      	movs	r3, #0
    7bf8:	9300      	str	r3, [sp, #0]
    7bfa:	2300      	movs	r3, #0
    7bfc:	2101      	movs	r1, #1
    7bfe:	0020      	movs	r0, r4
    7c00:	4cab      	ldr	r4, [pc, #684]	; (7eb0 <lcd_displaying_task+0x408>)
    7c02:	47a0      	blx	r4
	
	
	for (;;)
	{
		if (lcd_in_sleep)
    7c04:	4b91      	ldr	r3, [pc, #580]	; (7e4c <lcd_displaying_task+0x3a4>)
    7c06:	781b      	ldrb	r3, [r3, #0]
    7c08:	b2db      	uxtb	r3, r3
    7c0a:	2b00      	cmp	r3, #0
    7c0c:	d009      	beq.n	7c22 <lcd_displaying_task+0x17a>
		{
			lcd_in_sleep = false;
    7c0e:	4b8f      	ldr	r3, [pc, #572]	; (7e4c <lcd_displaying_task+0x3a4>)
    7c10:	2200      	movs	r2, #0
    7c12:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
    7c14:	4b8f      	ldr	r3, [pc, #572]	; (7e54 <lcd_displaying_task+0x3ac>)
    7c16:	4798      	blx	r3
			vTaskDelay(100);
    7c18:	2064      	movs	r0, #100	; 0x64
    7c1a:	4b8f      	ldr	r3, [pc, #572]	; (7e58 <lcd_displaying_task+0x3b0>)
    7c1c:	4798      	blx	r3
			LCD_init();
    7c1e:	4b8f      	ldr	r3, [pc, #572]	; (7e5c <lcd_displaying_task+0x3b4>)
    7c20:	4798      	blx	r3
		}
		
		switch(screen)
    7c22:	233f      	movs	r3, #63	; 0x3f
    7c24:	18fb      	adds	r3, r7, r3
    7c26:	781b      	ldrb	r3, [r3, #0]
    7c28:	2b06      	cmp	r3, #6
    7c2a:	d900      	bls.n	7c2e <lcd_displaying_task+0x186>
    7c2c:	e1fa      	b.n	8024 <lcd_displaying_task+0x57c>
    7c2e:	009a      	lsls	r2, r3, #2
    7c30:	4ba0      	ldr	r3, [pc, #640]	; (7eb4 <lcd_displaying_task+0x40c>)
    7c32:	18d3      	adds	r3, r2, r3
    7c34:	681b      	ldr	r3, [r3, #0]
    7c36:	469f      	mov	pc, r3
		{
			case  1:
			{
				LCD_setCursor(0,0);
    7c38:	2100      	movs	r1, #0
    7c3a:	2000      	movs	r0, #0
    7c3c:	4b90      	ldr	r3, [pc, #576]	; (7e80 <lcd_displaying_task+0x3d8>)
    7c3e:	4798      	blx	r3
				lcd_printf("VRY   VYB   VBR ");
    7c40:	4b9d      	ldr	r3, [pc, #628]	; (7eb8 <lcd_displaying_task+0x410>)
    7c42:	0018      	movs	r0, r3
    7c44:	4b90      	ldr	r3, [pc, #576]	; (7e88 <lcd_displaying_task+0x3e0>)
    7c46:	4798      	blx	r3
				LCD_setCursor(0,1);
    7c48:	2101      	movs	r1, #1
    7c4a:	2000      	movs	r0, #0
    7c4c:	4b8c      	ldr	r3, [pc, #560]	; (7e80 <lcd_displaying_task+0x3d8>)
    7c4e:	4798      	blx	r3
				lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
    7c50:	4b9a      	ldr	r3, [pc, #616]	; (7ebc <lcd_displaying_task+0x414>)
    7c52:	681a      	ldr	r2, [r3, #0]
    7c54:	4b9a      	ldr	r3, [pc, #616]	; (7ec0 <lcd_displaying_task+0x418>)
    7c56:	0011      	movs	r1, r2
    7c58:	0018      	movs	r0, r3
    7c5a:	4b8b      	ldr	r3, [pc, #556]	; (7e88 <lcd_displaying_task+0x3e0>)
    7c5c:	4798      	blx	r3
				lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
    7c5e:	4b97      	ldr	r3, [pc, #604]	; (7ebc <lcd_displaying_task+0x414>)
    7c60:	685a      	ldr	r2, [r3, #4]
    7c62:	4b97      	ldr	r3, [pc, #604]	; (7ec0 <lcd_displaying_task+0x418>)
    7c64:	0011      	movs	r1, r2
    7c66:	0018      	movs	r0, r3
    7c68:	4b87      	ldr	r3, [pc, #540]	; (7e88 <lcd_displaying_task+0x3e0>)
    7c6a:	4798      	blx	r3
				lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
    7c6c:	4b93      	ldr	r3, [pc, #588]	; (7ebc <lcd_displaying_task+0x414>)
    7c6e:	689a      	ldr	r2, [r3, #8]
    7c70:	4b94      	ldr	r3, [pc, #592]	; (7ec4 <lcd_displaying_task+0x41c>)
    7c72:	0011      	movs	r1, r2
    7c74:	0018      	movs	r0, r3
    7c76:	4b84      	ldr	r3, [pc, #528]	; (7e88 <lcd_displaying_task+0x3e0>)
    7c78:	4798      	blx	r3
				break;
    7c7a:	e1d3      	b.n	8024 <lcd_displaying_task+0x57c>
			}
			case  2:
			{
				if(!getMotorState())
    7c7c:	4b92      	ldr	r3, [pc, #584]	; (7ec8 <lcd_displaying_task+0x420>)
    7c7e:	4798      	blx	r3
    7c80:	0003      	movs	r3, r0
    7c82:	001a      	movs	r2, r3
    7c84:	2301      	movs	r3, #1
    7c86:	4053      	eors	r3, r2
    7c88:	b2db      	uxtb	r3, r3
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	d010      	beq.n	7cb0 <lcd_displaying_task+0x208>
				{
					LCD_setCursor(0,0);
    7c8e:	2100      	movs	r1, #0
    7c90:	2000      	movs	r0, #0
    7c92:	4b7b      	ldr	r3, [pc, #492]	; (7e80 <lcd_displaying_task+0x3d8>)
    7c94:	4798      	blx	r3
					lcd_printf("MOTOR:  OFF     ");
    7c96:	4b8d      	ldr	r3, [pc, #564]	; (7ecc <lcd_displaying_task+0x424>)
    7c98:	0018      	movs	r0, r3
    7c9a:	4b7b      	ldr	r3, [pc, #492]	; (7e88 <lcd_displaying_task+0x3e0>)
    7c9c:	4798      	blx	r3
					LCD_setCursor(0,1);
    7c9e:	2101      	movs	r1, #1
    7ca0:	2000      	movs	r0, #0
    7ca2:	4b77      	ldr	r3, [pc, #476]	; (7e80 <lcd_displaying_task+0x3d8>)
    7ca4:	4798      	blx	r3
					lcd_printf("                ");
    7ca6:	4b8a      	ldr	r3, [pc, #552]	; (7ed0 <lcd_displaying_task+0x428>)
    7ca8:	0018      	movs	r0, r3
    7caa:	4b77      	ldr	r3, [pc, #476]	; (7e88 <lcd_displaying_task+0x3e0>)
    7cac:	4798      	blx	r3
					LCD_setCursor(0,0);
					lcd_printf("MOTOR CURRENT:  ");
					LCD_setCursor(0,1);
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
				}
				break;
    7cae:	e1b9      	b.n	8024 <lcd_displaying_task+0x57c>
					LCD_setCursor(0,0);
    7cb0:	2100      	movs	r1, #0
    7cb2:	2000      	movs	r0, #0
    7cb4:	4b72      	ldr	r3, [pc, #456]	; (7e80 <lcd_displaying_task+0x3d8>)
    7cb6:	4798      	blx	r3
					lcd_printf("MOTOR CURRENT:  ");
    7cb8:	4b86      	ldr	r3, [pc, #536]	; (7ed4 <lcd_displaying_task+0x42c>)
    7cba:	0018      	movs	r0, r3
    7cbc:	4b72      	ldr	r3, [pc, #456]	; (7e88 <lcd_displaying_task+0x3e0>)
    7cbe:	4798      	blx	r3
					LCD_setCursor(0,1);
    7cc0:	2101      	movs	r1, #1
    7cc2:	2000      	movs	r0, #0
    7cc4:	4b6e      	ldr	r3, [pc, #440]	; (7e80 <lcd_displaying_task+0x3d8>)
    7cc6:	4798      	blx	r3
					lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
    7cc8:	4b7c      	ldr	r3, [pc, #496]	; (7ebc <lcd_displaying_task+0x414>)
    7cca:	8a9b      	ldrh	r3, [r3, #20]
    7ccc:	b29b      	uxth	r3, r3
    7cce:	0019      	movs	r1, r3
    7cd0:	4b7a      	ldr	r3, [pc, #488]	; (7ebc <lcd_displaying_task+0x414>)
    7cd2:	8adb      	ldrh	r3, [r3, #22]
    7cd4:	b29b      	uxth	r3, r3
    7cd6:	001a      	movs	r2, r3
    7cd8:	4b7f      	ldr	r3, [pc, #508]	; (7ed8 <lcd_displaying_task+0x430>)
    7cda:	0018      	movs	r0, r3
    7cdc:	4b6a      	ldr	r3, [pc, #424]	; (7e88 <lcd_displaying_task+0x3e0>)
    7cde:	4798      	blx	r3
				break;
    7ce0:	e1a0      	b.n	8024 <lcd_displaying_task+0x57c>
			}
			
			case 3:
			{
				LCD_setCursor(0,0);
    7ce2:	2100      	movs	r1, #0
    7ce4:	2000      	movs	r0, #0
    7ce6:	4b66      	ldr	r3, [pc, #408]	; (7e80 <lcd_displaying_task+0x3d8>)
    7ce8:	4798      	blx	r3
				lcd_printf("3 PHASE SEQ:");
    7cea:	4b7c      	ldr	r3, [pc, #496]	; (7edc <lcd_displaying_task+0x434>)
    7cec:	0018      	movs	r0, r3
    7cee:	4b66      	ldr	r3, [pc, #408]	; (7e88 <lcd_displaying_task+0x3e0>)
    7cf0:	4798      	blx	r3
				if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    7cf2:	4b7b      	ldr	r3, [pc, #492]	; (7ee0 <lcd_displaying_task+0x438>)
    7cf4:	781b      	ldrb	r3, [r3, #0]
    7cf6:	b2db      	uxtb	r3, r3
    7cf8:	2b02      	cmp	r3, #2
    7cfa:	d104      	bne.n	7d06 <lcd_displaying_task+0x25e>
				{
					lcd_printf(" OK ");
    7cfc:	4b79      	ldr	r3, [pc, #484]	; (7ee4 <lcd_displaying_task+0x43c>)
    7cfe:	0018      	movs	r0, r3
    7d00:	4b61      	ldr	r3, [pc, #388]	; (7e88 <lcd_displaying_task+0x3e0>)
    7d02:	4798      	blx	r3
    7d04:	e003      	b.n	7d0e <lcd_displaying_task+0x266>
				}
				else
				{
					lcd_printf(" ERR");
    7d06:	4b78      	ldr	r3, [pc, #480]	; (7ee8 <lcd_displaying_task+0x440>)
    7d08:	0018      	movs	r0, r3
    7d0a:	4b5f      	ldr	r3, [pc, #380]	; (7e88 <lcd_displaying_task+0x3e0>)
    7d0c:	4798      	blx	r3
				}
				LCD_setCursor(0,1);
    7d0e:	2101      	movs	r1, #1
    7d10:	2000      	movs	r0, #0
    7d12:	4b5b      	ldr	r3, [pc, #364]	; (7e80 <lcd_displaying_task+0x3d8>)
    7d14:	4798      	blx	r3
				lcd_printf("PHASE STATE:");
    7d16:	4b75      	ldr	r3, [pc, #468]	; (7eec <lcd_displaying_task+0x444>)
    7d18:	0018      	movs	r0, r3
    7d1a:	4b5b      	ldr	r3, [pc, #364]	; (7e88 <lcd_displaying_task+0x3e0>)
    7d1c:	4798      	blx	r3
				if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
    7d1e:	4b70      	ldr	r3, [pc, #448]	; (7ee0 <lcd_displaying_task+0x438>)
    7d20:	785b      	ldrb	r3, [r3, #1]
    7d22:	b2db      	uxtb	r3, r3
    7d24:	2b03      	cmp	r3, #3
    7d26:	d104      	bne.n	7d32 <lcd_displaying_task+0x28a>
				{
					lcd_printf(" 3PH ");
    7d28:	4b71      	ldr	r3, [pc, #452]	; (7ef0 <lcd_displaying_task+0x448>)
    7d2a:	0018      	movs	r0, r3
    7d2c:	4b56      	ldr	r3, [pc, #344]	; (7e88 <lcd_displaying_task+0x3e0>)
    7d2e:	4798      	blx	r3
				}
				else
				{
					lcd_printf(" OFF");
				}
				break;
    7d30:	e178      	b.n	8024 <lcd_displaying_task+0x57c>
				else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
    7d32:	4b6b      	ldr	r3, [pc, #428]	; (7ee0 <lcd_displaying_task+0x438>)
    7d34:	785b      	ldrb	r3, [r3, #1]
    7d36:	b2db      	uxtb	r3, r3
    7d38:	2b02      	cmp	r3, #2
    7d3a:	d104      	bne.n	7d46 <lcd_displaying_task+0x29e>
					lcd_printf(" 2PH ");
    7d3c:	4b6d      	ldr	r3, [pc, #436]	; (7ef4 <lcd_displaying_task+0x44c>)
    7d3e:	0018      	movs	r0, r3
    7d40:	4b51      	ldr	r3, [pc, #324]	; (7e88 <lcd_displaying_task+0x3e0>)
    7d42:	4798      	blx	r3
				break;
    7d44:	e16e      	b.n	8024 <lcd_displaying_task+0x57c>
					lcd_printf(" OFF");
    7d46:	4b6c      	ldr	r3, [pc, #432]	; (7ef8 <lcd_displaying_task+0x450>)
    7d48:	0018      	movs	r0, r3
    7d4a:	4b4f      	ldr	r3, [pc, #316]	; (7e88 <lcd_displaying_task+0x3e0>)
    7d4c:	4798      	blx	r3
				break;
    7d4e:	e169      	b.n	8024 <lcd_displaying_task+0x57c>
			}
			case 4:
			{
				LCD_setCursor(0,0);
    7d50:	2100      	movs	r1, #0
    7d52:	2000      	movs	r0, #0
    7d54:	4b4a      	ldr	r3, [pc, #296]	; (7e80 <lcd_displaying_task+0x3d8>)
    7d56:	4798      	blx	r3
				lcd_printf("O-LEVEL : ");
    7d58:	4b68      	ldr	r3, [pc, #416]	; (7efc <lcd_displaying_task+0x454>)
    7d5a:	0018      	movs	r0, r3
    7d5c:	4b4a      	ldr	r3, [pc, #296]	; (7e88 <lcd_displaying_task+0x3e0>)
    7d5e:	4798      	blx	r3
				if (overheadLevel == OVERHEADHIGHLEVEL)
    7d60:	4b67      	ldr	r3, [pc, #412]	; (7f00 <lcd_displaying_task+0x458>)
    7d62:	781b      	ldrb	r3, [r3, #0]
    7d64:	b2db      	uxtb	r3, r3
    7d66:	2b02      	cmp	r3, #2
    7d68:	d104      	bne.n	7d74 <lcd_displaying_task+0x2cc>
				{
					lcd_printf("HIGH  ");
    7d6a:	4b66      	ldr	r3, [pc, #408]	; (7f04 <lcd_displaying_task+0x45c>)
    7d6c:	0018      	movs	r0, r3
    7d6e:	4b46      	ldr	r3, [pc, #280]	; (7e88 <lcd_displaying_task+0x3e0>)
    7d70:	4798      	blx	r3
    7d72:	e012      	b.n	7d9a <lcd_displaying_task+0x2f2>
				}
				else if (overheadLevel == OVERHEADMIDLEVEL)
    7d74:	4b62      	ldr	r3, [pc, #392]	; (7f00 <lcd_displaying_task+0x458>)
    7d76:	781b      	ldrb	r3, [r3, #0]
    7d78:	b2db      	uxtb	r3, r3
    7d7a:	2b01      	cmp	r3, #1
    7d7c:	d104      	bne.n	7d88 <lcd_displaying_task+0x2e0>
				{
					lcd_printf("MID   ");
    7d7e:	4b62      	ldr	r3, [pc, #392]	; (7f08 <lcd_displaying_task+0x460>)
    7d80:	0018      	movs	r0, r3
    7d82:	4b41      	ldr	r3, [pc, #260]	; (7e88 <lcd_displaying_task+0x3e0>)
    7d84:	4798      	blx	r3
    7d86:	e008      	b.n	7d9a <lcd_displaying_task+0x2f2>
				}
				else if (overheadLevel == OVERHEADCRITICALLEVEL)
    7d88:	4b5d      	ldr	r3, [pc, #372]	; (7f00 <lcd_displaying_task+0x458>)
    7d8a:	781b      	ldrb	r3, [r3, #0]
    7d8c:	b2db      	uxtb	r3, r3
    7d8e:	2b00      	cmp	r3, #0
    7d90:	d103      	bne.n	7d9a <lcd_displaying_task+0x2f2>
				{
					lcd_printf("LOW   ");
    7d92:	4b5e      	ldr	r3, [pc, #376]	; (7f0c <lcd_displaying_task+0x464>)
    7d94:	0018      	movs	r0, r3
    7d96:	4b3c      	ldr	r3, [pc, #240]	; (7e88 <lcd_displaying_task+0x3e0>)
    7d98:	4798      	blx	r3
				}
				LCD_setCursor(0,1);
    7d9a:	2101      	movs	r1, #1
    7d9c:	2000      	movs	r0, #0
    7d9e:	4b38      	ldr	r3, [pc, #224]	; (7e80 <lcd_displaying_task+0x3d8>)
    7da0:	4798      	blx	r3
				lcd_printf("U-LEVEL : ");
    7da2:	4b5b      	ldr	r3, [pc, #364]	; (7f10 <lcd_displaying_task+0x468>)
    7da4:	0018      	movs	r0, r3
    7da6:	4b38      	ldr	r3, [pc, #224]	; (7e88 <lcd_displaying_task+0x3e0>)
    7da8:	4798      	blx	r3
				if (undergroundLevel == CRITICALLEVEL)
    7daa:	4b5a      	ldr	r3, [pc, #360]	; (7f14 <lcd_displaying_task+0x46c>)
    7dac:	781b      	ldrb	r3, [r3, #0]
    7dae:	2b00      	cmp	r3, #0
    7db0:	d104      	bne.n	7dbc <lcd_displaying_task+0x314>
				{
					lcd_printf("CRTCL ");
    7db2:	4b59      	ldr	r3, [pc, #356]	; (7f18 <lcd_displaying_task+0x470>)
    7db4:	0018      	movs	r0, r3
    7db6:	4b34      	ldr	r3, [pc, #208]	; (7e88 <lcd_displaying_task+0x3e0>)
    7db8:	4798      	blx	r3
				}
				else if (undergroundLevel == HIGHLEVEL)
				{
					lcd_printf("HIGH  ");
				}
				break;
    7dba:	e130      	b.n	801e <lcd_displaying_task+0x576>
				else if (undergroundLevel == LOWLEVEL)
    7dbc:	4b55      	ldr	r3, [pc, #340]	; (7f14 <lcd_displaying_task+0x46c>)
    7dbe:	781b      	ldrb	r3, [r3, #0]
    7dc0:	2b01      	cmp	r3, #1
    7dc2:	d104      	bne.n	7dce <lcd_displaying_task+0x326>
					lcd_printf("LOW   ");
    7dc4:	4b51      	ldr	r3, [pc, #324]	; (7f0c <lcd_displaying_task+0x464>)
    7dc6:	0018      	movs	r0, r3
    7dc8:	4b2f      	ldr	r3, [pc, #188]	; (7e88 <lcd_displaying_task+0x3e0>)
    7dca:	4798      	blx	r3
				break;
    7dcc:	e127      	b.n	801e <lcd_displaying_task+0x576>
				else if (undergroundLevel == MIDLEVEL)
    7dce:	4b51      	ldr	r3, [pc, #324]	; (7f14 <lcd_displaying_task+0x46c>)
    7dd0:	781b      	ldrb	r3, [r3, #0]
    7dd2:	2b02      	cmp	r3, #2
    7dd4:	d104      	bne.n	7de0 <lcd_displaying_task+0x338>
					lcd_printf("MID   ");
    7dd6:	4b4c      	ldr	r3, [pc, #304]	; (7f08 <lcd_displaying_task+0x460>)
    7dd8:	0018      	movs	r0, r3
    7dda:	4b2b      	ldr	r3, [pc, #172]	; (7e88 <lcd_displaying_task+0x3e0>)
    7ddc:	4798      	blx	r3
				break;
    7dde:	e11e      	b.n	801e <lcd_displaying_task+0x576>
				else if (undergroundLevel == HIGHLEVEL)
    7de0:	4b4c      	ldr	r3, [pc, #304]	; (7f14 <lcd_displaying_task+0x46c>)
    7de2:	781b      	ldrb	r3, [r3, #0]
    7de4:	2b03      	cmp	r3, #3
    7de6:	d000      	beq.n	7dea <lcd_displaying_task+0x342>
    7de8:	e119      	b.n	801e <lcd_displaying_task+0x576>
					lcd_printf("HIGH  ");
    7dea:	4b46      	ldr	r3, [pc, #280]	; (7f04 <lcd_displaying_task+0x45c>)
    7dec:	0018      	movs	r0, r3
    7dee:	4b26      	ldr	r3, [pc, #152]	; (7e88 <lcd_displaying_task+0x3e0>)
    7df0:	4798      	blx	r3
				break;
    7df2:	e114      	b.n	801e <lcd_displaying_task+0x576>
			}
			case 5:
			{
				LCD_setCursor(0,0);
    7df4:	2100      	movs	r1, #0
    7df6:	2000      	movs	r0, #0
    7df8:	4b21      	ldr	r3, [pc, #132]	; (7e80 <lcd_displaying_task+0x3d8>)
    7dfa:	4798      	blx	r3
				lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
    7dfc:	4b2f      	ldr	r3, [pc, #188]	; (7ebc <lcd_displaying_task+0x414>)
    7dfe:	7f1b      	ldrb	r3, [r3, #28]
    7e00:	b2db      	uxtb	r3, r3
    7e02:	001a      	movs	r2, r3
    7e04:	4b45      	ldr	r3, [pc, #276]	; (7f1c <lcd_displaying_task+0x474>)
    7e06:	0011      	movs	r1, r2
    7e08:	0018      	movs	r0, r3
    7e0a:	4b1f      	ldr	r3, [pc, #124]	; (7e88 <lcd_displaying_task+0x3e0>)
    7e0c:	4798      	blx	r3
				LCD_setCursor(0,1);
    7e0e:	2101      	movs	r1, #1
    7e10:	2000      	movs	r0, #0
    7e12:	4b1b      	ldr	r3, [pc, #108]	; (7e80 <lcd_displaying_task+0x3d8>)
    7e14:	4798      	blx	r3
				lcd_printf("SIGNAL : ");
    7e16:	4b42      	ldr	r3, [pc, #264]	; (7f20 <lcd_displaying_task+0x478>)
    7e18:	0018      	movs	r0, r3
    7e1a:	4b1b      	ldr	r3, [pc, #108]	; (7e88 <lcd_displaying_task+0x3e0>)
    7e1c:	4798      	blx	r3
				LCD_setCursor(9,1);
    7e1e:	2101      	movs	r1, #1
    7e20:	2009      	movs	r0, #9
    7e22:	4b17      	ldr	r3, [pc, #92]	; (7e80 <lcd_displaying_task+0x3d8>)
    7e24:	4798      	blx	r3
				lcd_printf("       ");
    7e26:	4b3f      	ldr	r3, [pc, #252]	; (7f24 <lcd_displaying_task+0x47c>)
    7e28:	0018      	movs	r0, r3
    7e2a:	4b17      	ldr	r3, [pc, #92]	; (7e88 <lcd_displaying_task+0x3e0>)
    7e2c:	4798      	blx	r3
				LCD_setCursor(9,1);
    7e2e:	2101      	movs	r1, #1
    7e30:	2009      	movs	r0, #9
    7e32:	4b13      	ldr	r3, [pc, #76]	; (7e80 <lcd_displaying_task+0x3d8>)
    7e34:	4798      	blx	r3
				
				uint8_t tempSignal = Signal_Strength;
    7e36:	233b      	movs	r3, #59	; 0x3b
    7e38:	18fb      	adds	r3, r7, r3
    7e3a:	4a3b      	ldr	r2, [pc, #236]	; (7f28 <lcd_displaying_task+0x480>)
    7e3c:	7812      	ldrb	r2, [r2, #0]
    7e3e:	701a      	strb	r2, [r3, #0]
				for (uint8_t i=0;i<=tempSignal;i++)
    7e40:	233e      	movs	r3, #62	; 0x3e
    7e42:	18fb      	adds	r3, r7, r3
    7e44:	2200      	movs	r2, #0
    7e46:	701a      	strb	r2, [r3, #0]
    7e48:	e07d      	b.n	7f46 <lcd_displaying_task+0x49e>
    7e4a:	46c0      	nop			; (mov r8, r8)
    7e4c:	20000818 	.word	0x20000818
    7e50:	000038a1 	.word	0x000038a1
    7e54:	000038d5 	.word	0x000038d5
    7e58:	0000f019 	.word	0x0000f019
    7e5c:	000035dd 	.word	0x000035dd
    7e60:	00017cd7 	.word	0x00017cd7
    7e64:	000196b8 	.word	0x000196b8
    7e68:	000196c0 	.word	0x000196c0
    7e6c:	000196c8 	.word	0x000196c8
    7e70:	000196d0 	.word	0x000196d0
    7e74:	000196d8 	.word	0x000196d8
    7e78:	00003bdd 	.word	0x00003bdd
    7e7c:	00003b6d 	.word	0x00003b6d
    7e80:	00003c3d 	.word	0x00003c3d
    7e84:	000194d4 	.word	0x000194d4
    7e88:	00003d39 	.word	0x00003d39
    7e8c:	000194e8 	.word	0x000194e8
    7e90:	00000bb8 	.word	0x00000bb8
    7e94:	000194fc 	.word	0x000194fc
    7e98:	00019510 	.word	0x00019510
    7e9c:	00019524 	.word	0x00019524
    7ea0:	00008161 	.word	0x00008161
    7ea4:	0000fd81 	.word	0x0000fd81
    7ea8:	20000234 	.word	0x20000234
    7eac:	0000f37d 	.word	0x0000f37d
    7eb0:	0000fe25 	.word	0x0000fe25
    7eb4:	000196e0 	.word	0x000196e0
    7eb8:	00019528 	.word	0x00019528
    7ebc:	200006dc 	.word	0x200006dc
    7ec0:	0001953c 	.word	0x0001953c
    7ec4:	00019548 	.word	0x00019548
    7ec8:	00009e8d 	.word	0x00009e8d
    7ecc:	00019550 	.word	0x00019550
    7ed0:	00019564 	.word	0x00019564
    7ed4:	00019578 	.word	0x00019578
    7ed8:	0001958c 	.word	0x0001958c
    7edc:	000195a4 	.word	0x000195a4
    7ee0:	20000720 	.word	0x20000720
    7ee4:	000195b4 	.word	0x000195b4
    7ee8:	000195bc 	.word	0x000195bc
    7eec:	000195c4 	.word	0x000195c4
    7ef0:	000195d4 	.word	0x000195d4
    7ef4:	000195dc 	.word	0x000195dc
    7ef8:	000195e4 	.word	0x000195e4
    7efc:	000195ec 	.word	0x000195ec
    7f00:	20000768 	.word	0x20000768
    7f04:	000195f8 	.word	0x000195f8
    7f08:	00019600 	.word	0x00019600
    7f0c:	00019608 	.word	0x00019608
    7f10:	00019610 	.word	0x00019610
    7f14:	20000814 	.word	0x20000814
    7f18:	0001961c 	.word	0x0001961c
    7f1c:	00019624 	.word	0x00019624
    7f20:	00019638 	.word	0x00019638
    7f24:	00019644 	.word	0x00019644
    7f28:	20000762 	.word	0x20000762
				{
					LCD_write(i);
    7f2c:	233e      	movs	r3, #62	; 0x3e
    7f2e:	18fb      	adds	r3, r7, r3
    7f30:	781b      	ldrb	r3, [r3, #0]
    7f32:	0018      	movs	r0, r3
    7f34:	4b65      	ldr	r3, [pc, #404]	; (80cc <lcd_displaying_task+0x624>)
    7f36:	4798      	blx	r3
				for (uint8_t i=0;i<=tempSignal;i++)
    7f38:	233e      	movs	r3, #62	; 0x3e
    7f3a:	18fb      	adds	r3, r7, r3
    7f3c:	781a      	ldrb	r2, [r3, #0]
    7f3e:	233e      	movs	r3, #62	; 0x3e
    7f40:	18fb      	adds	r3, r7, r3
    7f42:	3201      	adds	r2, #1
    7f44:	701a      	strb	r2, [r3, #0]
    7f46:	233e      	movs	r3, #62	; 0x3e
    7f48:	18fa      	adds	r2, r7, r3
    7f4a:	233b      	movs	r3, #59	; 0x3b
    7f4c:	18fb      	adds	r3, r7, r3
    7f4e:	7812      	ldrb	r2, [r2, #0]
    7f50:	781b      	ldrb	r3, [r3, #0]
    7f52:	429a      	cmp	r2, r3
    7f54:	d9ea      	bls.n	7f2c <lcd_displaying_task+0x484>
				}
				
				break;
    7f56:	e065      	b.n	8024 <lcd_displaying_task+0x57c>
			}
			case 6:
			{
				LCD_setCursor(0,0);
    7f58:	2100      	movs	r1, #0
    7f5a:	2000      	movs	r0, #0
    7f5c:	4b5c      	ldr	r3, [pc, #368]	; (80d0 <lcd_displaying_task+0x628>)
    7f5e:	4798      	blx	r3
				switch(callStateOnLCD)
    7f60:	4b5c      	ldr	r3, [pc, #368]	; (80d4 <lcd_displaying_task+0x62c>)
    7f62:	781b      	ldrb	r3, [r3, #0]
    7f64:	2b05      	cmp	r3, #5
    7f66:	d85c      	bhi.n	8022 <lcd_displaying_task+0x57a>
    7f68:	009a      	lsls	r2, r3, #2
    7f6a:	4b5b      	ldr	r3, [pc, #364]	; (80d8 <lcd_displaying_task+0x630>)
    7f6c:	18d3      	adds	r3, r2, r3
    7f6e:	681b      	ldr	r3, [r3, #0]
    7f70:	469f      	mov	pc, r3
				{
					case LCDCALLSTATE_RINGING:
					{
						lcd_printf("INCOMING CALL.. ");
    7f72:	4b5a      	ldr	r3, [pc, #360]	; (80dc <lcd_displaying_task+0x634>)
    7f74:	0018      	movs	r0, r3
    7f76:	4b5a      	ldr	r3, [pc, #360]	; (80e0 <lcd_displaying_task+0x638>)
    7f78:	4798      	blx	r3
						LCD_setCursor(0,1);
    7f7a:	2101      	movs	r1, #1
    7f7c:	2000      	movs	r0, #0
    7f7e:	4b54      	ldr	r3, [pc, #336]	; (80d0 <lcd_displaying_task+0x628>)
    7f80:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7f82:	4a58      	ldr	r2, [pc, #352]	; (80e4 <lcd_displaying_task+0x63c>)
    7f84:	4b58      	ldr	r3, [pc, #352]	; (80e8 <lcd_displaying_task+0x640>)
    7f86:	0011      	movs	r1, r2
    7f88:	0018      	movs	r0, r3
    7f8a:	4b55      	ldr	r3, [pc, #340]	; (80e0 <lcd_displaying_task+0x638>)
    7f8c:	4798      	blx	r3
						break;
    7f8e:	e045      	b.n	801c <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_INCALL:
					{
						lcd_printf("IN CALL...      ");
    7f90:	4b56      	ldr	r3, [pc, #344]	; (80ec <lcd_displaying_task+0x644>)
    7f92:	0018      	movs	r0, r3
    7f94:	4b52      	ldr	r3, [pc, #328]	; (80e0 <lcd_displaying_task+0x638>)
    7f96:	4798      	blx	r3
						LCD_setCursor(0,1);
    7f98:	2101      	movs	r1, #1
    7f9a:	2000      	movs	r0, #0
    7f9c:	4b4c      	ldr	r3, [pc, #304]	; (80d0 <lcd_displaying_task+0x628>)
    7f9e:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7fa0:	4a50      	ldr	r2, [pc, #320]	; (80e4 <lcd_displaying_task+0x63c>)
    7fa2:	4b51      	ldr	r3, [pc, #324]	; (80e8 <lcd_displaying_task+0x640>)
    7fa4:	0011      	movs	r1, r2
    7fa6:	0018      	movs	r0, r3
    7fa8:	4b4d      	ldr	r3, [pc, #308]	; (80e0 <lcd_displaying_task+0x638>)
    7faa:	4798      	blx	r3
						break;
    7fac:	e036      	b.n	801c <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_OUTGOING:
					{
						lcd_printf("DIALING...      ");
    7fae:	4b50      	ldr	r3, [pc, #320]	; (80f0 <lcd_displaying_task+0x648>)
    7fb0:	0018      	movs	r0, r3
    7fb2:	4b4b      	ldr	r3, [pc, #300]	; (80e0 <lcd_displaying_task+0x638>)
    7fb4:	4798      	blx	r3
						LCD_setCursor(0,1);
    7fb6:	2101      	movs	r1, #1
    7fb8:	2000      	movs	r0, #0
    7fba:	4b45      	ldr	r3, [pc, #276]	; (80d0 <lcd_displaying_task+0x628>)
    7fbc:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7fbe:	4a49      	ldr	r2, [pc, #292]	; (80e4 <lcd_displaying_task+0x63c>)
    7fc0:	4b49      	ldr	r3, [pc, #292]	; (80e8 <lcd_displaying_task+0x640>)
    7fc2:	0011      	movs	r1, r2
    7fc4:	0018      	movs	r0, r3
    7fc6:	4b46      	ldr	r3, [pc, #280]	; (80e0 <lcd_displaying_task+0x638>)
    7fc8:	4798      	blx	r3
						break;
    7fca:	e027      	b.n	801c <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_INCOMINGSMS:
					{
						lcd_printf("INCOMING SMS... ");
    7fcc:	4b49      	ldr	r3, [pc, #292]	; (80f4 <lcd_displaying_task+0x64c>)
    7fce:	0018      	movs	r0, r3
    7fd0:	4b43      	ldr	r3, [pc, #268]	; (80e0 <lcd_displaying_task+0x638>)
    7fd2:	4798      	blx	r3
						LCD_setCursor(0,1);
    7fd4:	2101      	movs	r1, #1
    7fd6:	2000      	movs	r0, #0
    7fd8:	4b3d      	ldr	r3, [pc, #244]	; (80d0 <lcd_displaying_task+0x628>)
    7fda:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    7fdc:	4a41      	ldr	r2, [pc, #260]	; (80e4 <lcd_displaying_task+0x63c>)
    7fde:	4b42      	ldr	r3, [pc, #264]	; (80e8 <lcd_displaying_task+0x640>)
    7fe0:	0011      	movs	r1, r2
    7fe2:	0018      	movs	r0, r3
    7fe4:	4b3e      	ldr	r3, [pc, #248]	; (80e0 <lcd_displaying_task+0x638>)
    7fe6:	4798      	blx	r3
						setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    7fe8:	2200      	movs	r2, #0
    7fea:	2100      	movs	r1, #0
    7fec:	2000      	movs	r0, #0
    7fee:	4b42      	ldr	r3, [pc, #264]	; (80f8 <lcd_displaying_task+0x650>)
    7ff0:	4798      	blx	r3
						break;
    7ff2:	e013      	b.n	801c <lcd_displaying_task+0x574>
					}
					case LCDCALLSTATE_OUTGOINGSMS:
					{
						lcd_printf("OUTGOING SMS... ");
    7ff4:	4b41      	ldr	r3, [pc, #260]	; (80fc <lcd_displaying_task+0x654>)
    7ff6:	0018      	movs	r0, r3
    7ff8:	4b39      	ldr	r3, [pc, #228]	; (80e0 <lcd_displaying_task+0x638>)
    7ffa:	4798      	blx	r3
						LCD_setCursor(0,1);
    7ffc:	2101      	movs	r1, #1
    7ffe:	2000      	movs	r0, #0
    8000:	4b33      	ldr	r3, [pc, #204]	; (80d0 <lcd_displaying_task+0x628>)
    8002:	4798      	blx	r3
						lcd_printf("%-16s",numberOnLCD);
    8004:	4a37      	ldr	r2, [pc, #220]	; (80e4 <lcd_displaying_task+0x63c>)
    8006:	4b38      	ldr	r3, [pc, #224]	; (80e8 <lcd_displaying_task+0x640>)
    8008:	0011      	movs	r1, r2
    800a:	0018      	movs	r0, r3
    800c:	4b34      	ldr	r3, [pc, #208]	; (80e0 <lcd_displaying_task+0x638>)
    800e:	4798      	blx	r3
						setCallStateOnLCD(LCDCALLSTATE_IDLE,NULL,false);
    8010:	2200      	movs	r2, #0
    8012:	2100      	movs	r1, #0
    8014:	2000      	movs	r0, #0
    8016:	4b38      	ldr	r3, [pc, #224]	; (80f8 <lcd_displaying_task+0x650>)
    8018:	4798      	blx	r3
						break;
    801a:	46c0      	nop			; (mov r8, r8)
					}
				}
				break;
    801c:	e001      	b.n	8022 <lcd_displaying_task+0x57a>
				break;
    801e:	46c0      	nop			; (mov r8, r8)
    8020:	e000      	b.n	8024 <lcd_displaying_task+0x57c>
				break;
    8022:	46c0      	nop			; (mov r8, r8)
			}
		}
		if (xQueueReceive(xfour_Second_Queue,&time,0))
    8024:	4b36      	ldr	r3, [pc, #216]	; (8100 <lcd_displaying_task+0x658>)
    8026:	681b      	ldr	r3, [r3, #0]
    8028:	223a      	movs	r2, #58	; 0x3a
    802a:	18b9      	adds	r1, r7, r2
    802c:	2200      	movs	r2, #0
    802e:	0018      	movs	r0, r3
    8030:	4b34      	ldr	r3, [pc, #208]	; (8104 <lcd_displaying_task+0x65c>)
    8032:	4798      	blx	r3
    8034:	1e03      	subs	r3, r0, #0
    8036:	d039      	beq.n	80ac <lcd_displaying_task+0x604>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
    8038:	4b33      	ldr	r3, [pc, #204]	; (8108 <lcd_displaying_task+0x660>)
    803a:	6818      	ldr	r0, [r3, #0]
    803c:	23fa      	movs	r3, #250	; 0xfa
    803e:	011a      	lsls	r2, r3, #4
    8040:	2301      	movs	r3, #1
    8042:	425b      	negs	r3, r3
    8044:	9300      	str	r3, [sp, #0]
    8046:	2300      	movs	r3, #0
    8048:	2104      	movs	r1, #4
    804a:	4c30      	ldr	r4, [pc, #192]	; (810c <lcd_displaying_task+0x664>)
    804c:	47a0      	blx	r4
			if(varPauseDisplay==false)
    804e:	4b30      	ldr	r3, [pc, #192]	; (8110 <lcd_displaying_task+0x668>)
    8050:	781b      	ldrb	r3, [r3, #0]
    8052:	b2db      	uxtb	r3, r3
    8054:	2201      	movs	r2, #1
    8056:	4053      	eors	r3, r2
    8058:	b2db      	uxtb	r3, r3
    805a:	2b00      	cmp	r3, #0
    805c:	d026      	beq.n	80ac <lcd_displaying_task+0x604>
			{
				screen++;
    805e:	233f      	movs	r3, #63	; 0x3f
    8060:	18fb      	adds	r3, r7, r3
    8062:	781a      	ldrb	r2, [r3, #0]
    8064:	233f      	movs	r3, #63	; 0x3f
    8066:	18fb      	adds	r3, r7, r3
    8068:	3201      	adds	r2, #1
    806a:	701a      	strb	r2, [r3, #0]
				if(!factory_settings_parameter_struct.ENABLE_WATER && screen==4)
    806c:	4b29      	ldr	r3, [pc, #164]	; (8114 <lcd_displaying_task+0x66c>)
    806e:	795b      	ldrb	r3, [r3, #5]
    8070:	2b00      	cmp	r3, #0
    8072:	d10b      	bne.n	808c <lcd_displaying_task+0x5e4>
    8074:	233f      	movs	r3, #63	; 0x3f
    8076:	18fb      	adds	r3, r7, r3
    8078:	781b      	ldrb	r3, [r3, #0]
    807a:	2b04      	cmp	r3, #4
    807c:	d106      	bne.n	808c <lcd_displaying_task+0x5e4>
				{
					screen++;
    807e:	233f      	movs	r3, #63	; 0x3f
    8080:	18fb      	adds	r3, r7, r3
    8082:	781a      	ldrb	r2, [r3, #0]
    8084:	233f      	movs	r3, #63	; 0x3f
    8086:	18fb      	adds	r3, r7, r3
    8088:	3201      	adds	r2, #1
    808a:	701a      	strb	r2, [r3, #0]
				}
				if(callStateOnLCD==LCDCALLSTATE_IDLE && screen==6)
    808c:	4b11      	ldr	r3, [pc, #68]	; (80d4 <lcd_displaying_task+0x62c>)
    808e:	781b      	ldrb	r3, [r3, #0]
    8090:	2b00      	cmp	r3, #0
    8092:	d10b      	bne.n	80ac <lcd_displaying_task+0x604>
    8094:	233f      	movs	r3, #63	; 0x3f
    8096:	18fb      	adds	r3, r7, r3
    8098:	781b      	ldrb	r3, [r3, #0]
    809a:	2b06      	cmp	r3, #6
    809c:	d106      	bne.n	80ac <lcd_displaying_task+0x604>
				{
					screen++;
    809e:	233f      	movs	r3, #63	; 0x3f
    80a0:	18fb      	adds	r3, r7, r3
    80a2:	781a      	ldrb	r2, [r3, #0]
    80a4:	233f      	movs	r3, #63	; 0x3f
    80a6:	18fb      	adds	r3, r7, r3
    80a8:	3201      	adds	r2, #1
    80aa:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		
		if (screen>6)
    80ac:	233f      	movs	r3, #63	; 0x3f
    80ae:	18fb      	adds	r3, r7, r3
    80b0:	781b      	ldrb	r3, [r3, #0]
    80b2:	2b06      	cmp	r3, #6
    80b4:	d903      	bls.n	80be <lcd_displaying_task+0x616>
		{
			screen=1;
    80b6:	233f      	movs	r3, #63	; 0x3f
    80b8:	18fb      	adds	r3, r7, r3
    80ba:	2201      	movs	r2, #1
    80bc:	701a      	strb	r2, [r3, #0]
		}
		
		vTaskDelay(500);
    80be:	23fa      	movs	r3, #250	; 0xfa
    80c0:	005b      	lsls	r3, r3, #1
    80c2:	0018      	movs	r0, r3
    80c4:	4b14      	ldr	r3, [pc, #80]	; (8118 <lcd_displaying_task+0x670>)
    80c6:	4798      	blx	r3
		if (lcd_in_sleep)
    80c8:	e59c      	b.n	7c04 <lcd_displaying_task+0x15c>
    80ca:	46c0      	nop			; (mov r8, r8)
    80cc:	00003af1 	.word	0x00003af1
    80d0:	00003c3d 	.word	0x00003c3d
    80d4:	20000799 	.word	0x20000799
    80d8:	000196fc 	.word	0x000196fc
    80dc:	0001964c 	.word	0x0001964c
    80e0:	00003d39 	.word	0x00003d39
    80e4:	20000800 	.word	0x20000800
    80e8:	00019660 	.word	0x00019660
    80ec:	00019668 	.word	0x00019668
    80f0:	0001967c 	.word	0x0001967c
    80f4:	00019690 	.word	0x00019690
    80f8:	0000bd65 	.word	0x0000bd65
    80fc:	000196a4 	.word	0x000196a4
    8100:	20000230 	.word	0x20000230
    8104:	0000e571 	.word	0x0000e571
    8108:	20000234 	.word	0x20000234
    810c:	0000fe25 	.word	0x0000fe25
    8110:	20000784 	.word	0x20000784
    8114:	20000628 	.word	0x20000628
    8118:	0000f019 	.word	0x0000f019

0000811c <start_lcd_service>:
	}
}


void start_lcd_service(void)
{
    811c:	b590      	push	{r4, r7, lr}
    811e:	b083      	sub	sp, #12
    8120:	af02      	add	r7, sp, #8
	
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));
    8122:	2200      	movs	r2, #0
    8124:	2101      	movs	r1, #1
    8126:	2001      	movs	r0, #1
    8128:	4b09      	ldr	r3, [pc, #36]	; (8150 <start_lcd_service+0x34>)
    812a:	4798      	blx	r3
    812c:	0002      	movs	r2, r0
    812e:	4b09      	ldr	r3, [pc, #36]	; (8154 <start_lcd_service+0x38>)
    8130:	601a      	str	r2, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
    8132:	23c8      	movs	r3, #200	; 0xc8
    8134:	005a      	lsls	r2, r3, #1
    8136:	4808      	ldr	r0, [pc, #32]	; (8158 <start_lcd_service+0x3c>)
    8138:	2300      	movs	r3, #0
    813a:	9301      	str	r3, [sp, #4]
    813c:	2301      	movs	r3, #1
    813e:	9300      	str	r3, [sp, #0]
    8140:	2300      	movs	r3, #0
    8142:	2100      	movs	r1, #0
    8144:	4c05      	ldr	r4, [pc, #20]	; (815c <start_lcd_service+0x40>)
    8146:	47a0      	blx	r4
	
}
    8148:	46c0      	nop			; (mov r8, r8)
    814a:	46bd      	mov	sp, r7
    814c:	b001      	add	sp, #4
    814e:	bd90      	pop	{r4, r7, pc}
    8150:	0000e1b5 	.word	0x0000e1b5
    8154:	20000230 	.word	0x20000230
    8158:	00007aa9 	.word	0x00007aa9
    815c:	0000ecd9 	.word	0x0000ecd9

00008160 <four_second_timer_callback>:

static void four_second_timer_callback(TimerHandle_t timer)
{
    8160:	b590      	push	{r4, r7, lr}
    8162:	b085      	sub	sp, #20
    8164:	af00      	add	r7, sp, #0
    8166:	6078      	str	r0, [r7, #4]
	uint8_t ucharfour_Second=1;
    8168:	230f      	movs	r3, #15
    816a:	18fb      	adds	r3, r7, r3
    816c:	2201      	movs	r2, #1
    816e:	701a      	strb	r2, [r3, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
    8170:	4b05      	ldr	r3, [pc, #20]	; (8188 <four_second_timer_callback+0x28>)
    8172:	6818      	ldr	r0, [r3, #0]
    8174:	230f      	movs	r3, #15
    8176:	18f9      	adds	r1, r7, r3
    8178:	2300      	movs	r3, #0
    817a:	2200      	movs	r2, #0
    817c:	4c03      	ldr	r4, [pc, #12]	; (818c <four_second_timer_callback+0x2c>)
    817e:	47a0      	blx	r4
}
    8180:	46c0      	nop			; (mov r8, r8)
    8182:	46bd      	mov	sp, r7
    8184:	b005      	add	sp, #20
    8186:	bd90      	pop	{r4, r7, pc}
    8188:	20000230 	.word	0x20000230
    818c:	0000e451 	.word	0x0000e451

00008190 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
    8190:	b580      	push	{r7, lr}
    8192:	b084      	sub	sp, #16
    8194:	af00      	add	r7, sp, #0
    8196:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
    8198:	687b      	ldr	r3, [r7, #4]
    819a:	681b      	ldr	r3, [r3, #0]
    819c:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    819e:	68fb      	ldr	r3, [r7, #12]
    81a0:	7a5b      	ldrb	r3, [r3, #9]
    81a2:	b2db      	uxtb	r3, r3
    81a4:	b25b      	sxtb	r3, r3
    81a6:	2b00      	cmp	r3, #0
    81a8:	da01      	bge.n	81ae <ac_is_syncing+0x1e>
		return true;
    81aa:	2301      	movs	r3, #1
    81ac:	e000      	b.n	81b0 <ac_is_syncing+0x20>
	}

	return false;
    81ae:	2300      	movs	r3, #0
#endif
}
    81b0:	0018      	movs	r0, r3
    81b2:	46bd      	mov	sp, r7
    81b4:	b004      	add	sp, #16
    81b6:	bd80      	pop	{r7, pc}

000081b8 <ac_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void ac_get_config_defaults(
		struct ac_config *const config)
{
    81b8:	b580      	push	{r7, lr}
    81ba:	b084      	sub	sp, #16
    81bc:	af00      	add	r7, sp, #0
    81be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);
#ifdef FEATURE_AC_RUN_IN_STANDY_PAIR_COMPARATOR
	/* Default configuration values */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    81c0:	2300      	movs	r3, #0
    81c2:	60fb      	str	r3, [r7, #12]
    81c4:	e007      	b.n	81d6 <ac_get_config_defaults+0x1e>
		config->run_in_standby[i] = false;
    81c6:	687a      	ldr	r2, [r7, #4]
    81c8:	68fb      	ldr	r3, [r7, #12]
    81ca:	18d3      	adds	r3, r2, r3
    81cc:	2200      	movs	r2, #0
    81ce:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    81d0:	68fb      	ldr	r3, [r7, #12]
    81d2:	3301      	adds	r3, #1
    81d4:	60fb      	str	r3, [r7, #12]
    81d6:	68fb      	ldr	r3, [r7, #12]
    81d8:	2b00      	cmp	r3, #0
    81da:	d0f4      	beq.n	81c6 <ac_get_config_defaults+0xe>
	}
#endif
#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	config->dig_source_generator = GCLK_GENERATOR_0;
    81dc:	687b      	ldr	r3, [r7, #4]
    81de:	2200      	movs	r2, #0
    81e0:	705a      	strb	r2, [r3, #1]
	config->ana_source_generator = GCLK_GENERATOR_3;
    81e2:	687b      	ldr	r3, [r7, #4]
    81e4:	2203      	movs	r2, #3
    81e6:	709a      	strb	r2, [r3, #2]
#else
	config->source_generator = GCLK_GENERATOR_0;
#endif
}
    81e8:	46c0      	nop			; (mov r8, r8)
    81ea:	46bd      	mov	sp, r7
    81ec:	b004      	add	sp, #16
    81ee:	bd80      	pop	{r7, pc}

000081f0 <ac_enable>:
 *
 * \param[in] module_inst  Software instance for the Analog Comparator peripheral
 */
static inline void ac_enable(
		struct ac_module *const module_inst)
{
    81f0:	b580      	push	{r7, lr}
    81f2:	b084      	sub	sp, #16
    81f4:	af00      	add	r7, sp, #0
    81f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    81f8:	687b      	ldr	r3, [r7, #4]
    81fa:	681b      	ldr	r3, [r3, #0]
    81fc:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
    81fe:	46c0      	nop			; (mov r8, r8)
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	0018      	movs	r0, r3
    8204:	4b07      	ldr	r3, [pc, #28]	; (8224 <ac_enable+0x34>)
    8206:	4798      	blx	r3
    8208:	1e03      	subs	r3, r0, #0
    820a:	d1f9      	bne.n	8200 <ac_enable+0x10>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
    820c:	68fb      	ldr	r3, [r7, #12]
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	b2db      	uxtb	r3, r3
    8212:	2202      	movs	r2, #2
    8214:	4313      	orrs	r3, r2
    8216:	b2da      	uxtb	r2, r3
    8218:	68fb      	ldr	r3, [r7, #12]
    821a:	701a      	strb	r2, [r3, #0]
}
    821c:	46c0      	nop			; (mov r8, r8)
    821e:	46bd      	mov	sp, r7
    8220:	b004      	add	sp, #16
    8222:	bd80      	pop	{r7, pc}
    8224:	00008191 	.word	0x00008191

00008228 <ac_enable_events>:
 *  \param[in] events       Struct containing flags of events to enable
 */
static inline void ac_enable_events(
		struct ac_module *const module_inst,
		struct ac_events *const events)
{
    8228:	b580      	push	{r7, lr}
    822a:	b086      	sub	sp, #24
    822c:	af00      	add	r7, sp, #0
    822e:	6078      	str	r0, [r7, #4]
    8230:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Ac *const ac_module = module_inst->hw;
    8232:	687b      	ldr	r3, [r7, #4]
    8234:	681b      	ldr	r3, [r3, #0]
    8236:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
    8238:	2300      	movs	r3, #0
    823a:	617b      	str	r3, [r7, #20]

	/* Configure window output events for each comparator pair */
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
    823c:	2313      	movs	r3, #19
    823e:	18fb      	adds	r3, r7, r3
    8240:	2200      	movs	r2, #0
    8242:	701a      	strb	r2, [r3, #0]
    8244:	e017      	b.n	8276 <ac_enable_events+0x4e>
		if (events->generate_event_on_window[i] == true) {
    8246:	2313      	movs	r3, #19
    8248:	18fb      	adds	r3, r7, r3
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	683a      	ldr	r2, [r7, #0]
    824e:	5cd3      	ldrb	r3, [r2, r3]
    8250:	2b00      	cmp	r3, #0
    8252:	d009      	beq.n	8268 <ac_enable_events+0x40>
			event_mask |= (AC_EVCTRL_WINEO0 << i);
    8254:	2313      	movs	r3, #19
    8256:	18fb      	adds	r3, r7, r3
    8258:	781b      	ldrb	r3, [r3, #0]
    825a:	2210      	movs	r2, #16
    825c:	409a      	lsls	r2, r3
    825e:	0013      	movs	r3, r2
    8260:	001a      	movs	r2, r3
    8262:	697b      	ldr	r3, [r7, #20]
    8264:	4313      	orrs	r3, r2
    8266:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_PAIRS; i++) {
    8268:	2313      	movs	r3, #19
    826a:	18fb      	adds	r3, r7, r3
    826c:	781a      	ldrb	r2, [r3, #0]
    826e:	2313      	movs	r3, #19
    8270:	18fb      	adds	r3, r7, r3
    8272:	3201      	adds	r2, #1
    8274:	701a      	strb	r2, [r3, #0]
    8276:	2313      	movs	r3, #19
    8278:	18fb      	adds	r3, r7, r3
    827a:	781b      	ldrb	r3, [r3, #0]
    827c:	2b00      	cmp	r3, #0
    827e:	d0e2      	beq.n	8246 <ac_enable_events+0x1e>
		}
	}

	/* Configure sample input/output events for each comparator */
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
    8280:	2312      	movs	r3, #18
    8282:	18fb      	adds	r3, r7, r3
    8284:	2200      	movs	r2, #0
    8286:	701a      	strb	r2, [r3, #0]
    8288:	e02b      	b.n	82e2 <ac_enable_events+0xba>
		if (events->on_event_sample[i] == true) {
    828a:	2312      	movs	r3, #18
    828c:	18fb      	adds	r3, r7, r3
    828e:	781b      	ldrb	r3, [r3, #0]
    8290:	683a      	ldr	r2, [r7, #0]
    8292:	18d3      	adds	r3, r2, r3
    8294:	78db      	ldrb	r3, [r3, #3]
    8296:	2b00      	cmp	r3, #0
    8298:	d00a      	beq.n	82b0 <ac_enable_events+0x88>
			event_mask |= (AC_EVCTRL_COMPEI0 << i);
    829a:	2312      	movs	r3, #18
    829c:	18fb      	adds	r3, r7, r3
    829e:	781b      	ldrb	r3, [r3, #0]
    82a0:	2280      	movs	r2, #128	; 0x80
    82a2:	0052      	lsls	r2, r2, #1
    82a4:	409a      	lsls	r2, r3
    82a6:	0013      	movs	r3, r2
    82a8:	001a      	movs	r2, r3
    82aa:	697b      	ldr	r3, [r7, #20]
    82ac:	4313      	orrs	r3, r2
    82ae:	617b      	str	r3, [r7, #20]
		}

		if (events->generate_event_on_state[i] == true) {
    82b0:	2312      	movs	r3, #18
    82b2:	18fb      	adds	r3, r7, r3
    82b4:	781b      	ldrb	r3, [r3, #0]
    82b6:	683a      	ldr	r2, [r7, #0]
    82b8:	18d3      	adds	r3, r2, r3
    82ba:	785b      	ldrb	r3, [r3, #1]
    82bc:	2b00      	cmp	r3, #0
    82be:	d009      	beq.n	82d4 <ac_enable_events+0xac>
			event_mask |= (AC_EVCTRL_COMPEO0 << i);
    82c0:	2312      	movs	r3, #18
    82c2:	18fb      	adds	r3, r7, r3
    82c4:	781b      	ldrb	r3, [r3, #0]
    82c6:	2201      	movs	r2, #1
    82c8:	409a      	lsls	r2, r3
    82ca:	0013      	movs	r3, r2
    82cc:	001a      	movs	r2, r3
    82ce:	697b      	ldr	r3, [r7, #20]
    82d0:	4313      	orrs	r3, r2
    82d2:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < AC_NUM_CMP; i++) {
    82d4:	2312      	movs	r3, #18
    82d6:	18fb      	adds	r3, r7, r3
    82d8:	781a      	ldrb	r2, [r3, #0]
    82da:	2312      	movs	r3, #18
    82dc:	18fb      	adds	r3, r7, r3
    82de:	3201      	adds	r2, #1
    82e0:	701a      	strb	r2, [r3, #0]
    82e2:	2312      	movs	r3, #18
    82e4:	18fb      	adds	r3, r7, r3
    82e6:	781b      	ldrb	r3, [r3, #0]
    82e8:	2b01      	cmp	r3, #1
    82ea:	d9ce      	bls.n	828a <ac_enable_events+0x62>
		}
	}

	ac_module->EVCTRL.reg |= event_mask;
    82ec:	68fb      	ldr	r3, [r7, #12]
    82ee:	885b      	ldrh	r3, [r3, #2]
    82f0:	b29a      	uxth	r2, r3
    82f2:	697b      	ldr	r3, [r7, #20]
    82f4:	b29b      	uxth	r3, r3
    82f6:	4313      	orrs	r3, r2
    82f8:	b29a      	uxth	r2, r3
    82fa:	68fb      	ldr	r3, [r7, #12]
    82fc:	805a      	strh	r2, [r3, #2]
}
    82fe:	46c0      	nop			; (mov r8, r8)
    8300:	46bd      	mov	sp, r7
    8302:	b006      	add	sp, #24
    8304:	bd80      	pop	{r7, pc}
	...

00008308 <ac_chan_enable>:
 *  \param[in] channel      Comparator channel to enable
 */
static inline void ac_chan_enable(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    8308:	b580      	push	{r7, lr}
    830a:	b084      	sub	sp, #16
    830c:	af00      	add	r7, sp, #0
    830e:	6078      	str	r0, [r7, #4]
    8310:	000a      	movs	r2, r1
    8312:	1cfb      	adds	r3, r7, #3
    8314:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    8316:	687b      	ldr	r3, [r7, #4]
    8318:	681b      	ldr	r3, [r3, #0]
    831a:	60fb      	str	r3, [r7, #12]

	while (ac_is_syncing(module_inst)) {
    831c:	46c0      	nop			; (mov r8, r8)
    831e:	687b      	ldr	r3, [r7, #4]
    8320:	0018      	movs	r0, r3
    8322:	4b0b      	ldr	r3, [pc, #44]	; (8350 <ac_chan_enable+0x48>)
    8324:	4798      	blx	r3
    8326:	1e03      	subs	r3, r0, #0
    8328:	d1f9      	bne.n	831e <ac_chan_enable+0x16>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
    832a:	1cfb      	adds	r3, r7, #3
    832c:	781a      	ldrb	r2, [r3, #0]
    832e:	1cfb      	adds	r3, r7, #3
    8330:	7819      	ldrb	r1, [r3, #0]
    8332:	68fb      	ldr	r3, [r7, #12]
    8334:	3104      	adds	r1, #4
    8336:	0089      	lsls	r1, r1, #2
    8338:	58cb      	ldr	r3, [r1, r3]
    833a:	2101      	movs	r1, #1
    833c:	4319      	orrs	r1, r3
    833e:	68fb      	ldr	r3, [r7, #12]
    8340:	3204      	adds	r2, #4
    8342:	0092      	lsls	r2, r2, #2
    8344:	50d1      	str	r1, [r2, r3]
}
    8346:	46c0      	nop			; (mov r8, r8)
    8348:	46bd      	mov	sp, r7
    834a:	b004      	add	sp, #16
    834c:	bd80      	pop	{r7, pc}
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	00008191 	.word	0x00008191

00008354 <ac_chan_is_ready>:
 *  \return Comparator channel readiness state.
 */
static inline bool ac_chan_is_ready(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    8354:	b580      	push	{r7, lr}
    8356:	b084      	sub	sp, #16
    8358:	af00      	add	r7, sp, #0
    835a:	6078      	str	r0, [r7, #4]
    835c:	000a      	movs	r2, r1
    835e:	1cfb      	adds	r3, r7, #3
    8360:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    8362:	687b      	ldr	r3, [r7, #4]
    8364:	681b      	ldr	r3, [r3, #0]
    8366:	60fb      	str	r3, [r7, #12]

	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
    8368:	68fb      	ldr	r3, [r7, #12]
    836a:	7a5b      	ldrb	r3, [r3, #9]
    836c:	b2db      	uxtb	r3, r3
    836e:	0019      	movs	r1, r3
    8370:	1cfb      	adds	r3, r7, #3
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	2201      	movs	r2, #1
    8376:	409a      	lsls	r2, r3
    8378:	0013      	movs	r3, r2
    837a:	400b      	ands	r3, r1
    837c:	1e5a      	subs	r2, r3, #1
    837e:	4193      	sbcs	r3, r2
    8380:	b2db      	uxtb	r3, r3
}
    8382:	0018      	movs	r0, r3
    8384:	46bd      	mov	sp, r7
    8386:	b004      	add	sp, #16
    8388:	bd80      	pop	{r7, pc}
	...

0000838c <ac_chan_get_status>:
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel)
{
    838c:	b580      	push	{r7, lr}
    838e:	b084      	sub	sp, #16
    8390:	af00      	add	r7, sp, #0
    8392:	6078      	str	r0, [r7, #4]
    8394:	000a      	movs	r2, r1
    8396:	1cfb      	adds	r3, r7, #3
    8398:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Ac *const ac_module = module_inst->hw;
    839a:	687b      	ldr	r3, [r7, #4]
    839c:	681b      	ldr	r3, [r3, #0]
    839e:	60bb      	str	r3, [r7, #8]

	uint8_t status_mask = 0;
    83a0:	230f      	movs	r3, #15
    83a2:	18fb      	adds	r3, r7, r3
    83a4:	2200      	movs	r2, #0
    83a6:	701a      	strb	r2, [r3, #0]

	if (ac_module->INTFLAG.reg & (1 << channel)) {
    83a8:	68bb      	ldr	r3, [r7, #8]
    83aa:	799b      	ldrb	r3, [r3, #6]
    83ac:	b2db      	uxtb	r3, r3
    83ae:	001a      	movs	r2, r3
    83b0:	1cfb      	adds	r3, r7, #3
    83b2:	781b      	ldrb	r3, [r3, #0]
    83b4:	411a      	asrs	r2, r3
    83b6:	0013      	movs	r3, r2
    83b8:	2201      	movs	r2, #1
    83ba:	4013      	ands	r3, r2
    83bc:	d003      	beq.n	83c6 <ac_chan_get_status+0x3a>
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
    83be:	230f      	movs	r3, #15
    83c0:	18fb      	adds	r3, r7, r3
    83c2:	2208      	movs	r2, #8
    83c4:	701a      	strb	r2, [r3, #0]
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
    83c6:	1cfb      	adds	r3, r7, #3
    83c8:	781a      	ldrb	r2, [r3, #0]
    83ca:	687b      	ldr	r3, [r7, #4]
    83cc:	0011      	movs	r1, r2
    83ce:	0018      	movs	r0, r3
    83d0:	4b1b      	ldr	r3, [pc, #108]	; (8440 <ac_chan_get_status+0xb4>)
    83d2:	4798      	blx	r3
    83d4:	0003      	movs	r3, r0
    83d6:	001a      	movs	r2, r3
    83d8:	2301      	movs	r3, #1
    83da:	4053      	eors	r3, r2
    83dc:	b2db      	uxtb	r3, r3
    83de:	2b00      	cmp	r3, #0
    83e0:	d00b      	beq.n	83fa <ac_chan_get_status+0x6e>
		status_mask |= AC_CHAN_STATUS_UNKNOWN;
    83e2:	230f      	movs	r3, #15
    83e4:	18fb      	adds	r3, r7, r3
    83e6:	220f      	movs	r2, #15
    83e8:	18ba      	adds	r2, r7, r2
    83ea:	7812      	ldrb	r2, [r2, #0]
    83ec:	2101      	movs	r1, #1
    83ee:	430a      	orrs	r2, r1
    83f0:	701a      	strb	r2, [r3, #0]
		return status_mask;
    83f2:	230f      	movs	r3, #15
    83f4:	18fb      	adds	r3, r7, r3
    83f6:	781b      	ldrb	r3, [r3, #0]
    83f8:	e01e      	b.n	8438 <ac_chan_get_status+0xac>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
    83fa:	68bb      	ldr	r3, [r7, #8]
    83fc:	7a1b      	ldrb	r3, [r3, #8]
    83fe:	b2db      	uxtb	r3, r3
    8400:	001a      	movs	r2, r3
    8402:	1cfb      	adds	r3, r7, #3
    8404:	781b      	ldrb	r3, [r3, #0]
    8406:	411a      	asrs	r2, r3
    8408:	0013      	movs	r3, r2
    840a:	2201      	movs	r2, #1
    840c:	4013      	ands	r3, r2
    840e:	d008      	beq.n	8422 <ac_chan_get_status+0x96>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
    8410:	230f      	movs	r3, #15
    8412:	18fb      	adds	r3, r7, r3
    8414:	220f      	movs	r2, #15
    8416:	18ba      	adds	r2, r7, r2
    8418:	7812      	ldrb	r2, [r2, #0]
    841a:	2104      	movs	r1, #4
    841c:	430a      	orrs	r2, r1
    841e:	701a      	strb	r2, [r3, #0]
    8420:	e007      	b.n	8432 <ac_chan_get_status+0xa6>
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
    8422:	230f      	movs	r3, #15
    8424:	18fb      	adds	r3, r7, r3
    8426:	220f      	movs	r2, #15
    8428:	18ba      	adds	r2, r7, r2
    842a:	7812      	ldrb	r2, [r2, #0]
    842c:	2102      	movs	r1, #2
    842e:	430a      	orrs	r2, r1
    8430:	701a      	strb	r2, [r3, #0]
	}
	return status_mask;
    8432:	230f      	movs	r3, #15
    8434:	18fb      	adds	r3, r7, r3
    8436:	781b      	ldrb	r3, [r3, #0]
}
    8438:	0018      	movs	r0, r3
    843a:	46bd      	mov	sp, r7
    843c:	b004      	add	sp, #16
    843e:	bd80      	pop	{r7, pc}
    8440:	00008355 	.word	0x00008355

00008444 <system_interrupt_enable>:
{
    8444:	b580      	push	{r7, lr}
    8446:	b082      	sub	sp, #8
    8448:	af00      	add	r7, sp, #0
    844a:	0002      	movs	r2, r0
    844c:	1dfb      	adds	r3, r7, #7
    844e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8450:	4b06      	ldr	r3, [pc, #24]	; (846c <system_interrupt_enable+0x28>)
    8452:	1dfa      	adds	r2, r7, #7
    8454:	7812      	ldrb	r2, [r2, #0]
    8456:	0011      	movs	r1, r2
    8458:	221f      	movs	r2, #31
    845a:	400a      	ands	r2, r1
    845c:	2101      	movs	r1, #1
    845e:	4091      	lsls	r1, r2
    8460:	000a      	movs	r2, r1
    8462:	601a      	str	r2, [r3, #0]
}
    8464:	46c0      	nop			; (mov r8, r8)
    8466:	46bd      	mov	sp, r7
    8468:	b002      	add	sp, #8
    846a:	bd80      	pop	{r7, pc}
    846c:	e000e100 	.word	0xe000e100

00008470 <ac_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void ac_enable_callback(
		struct ac_module *const module,
		const enum ac_callback callback_type)
{
    8470:	b580      	push	{r7, lr}
    8472:	b084      	sub	sp, #16
    8474:	af00      	add	r7, sp, #0
    8476:	6078      	str	r0, [r7, #4]
    8478:	000a      	movs	r2, r1
    847a:	1cfb      	adds	r3, r7, #3
    847c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
    847e:	687b      	ldr	r3, [r7, #4]
    8480:	7e5b      	ldrb	r3, [r3, #25]
    8482:	b25a      	sxtb	r2, r3
    8484:	1cfb      	adds	r3, r7, #3
    8486:	781b      	ldrb	r3, [r3, #0]
    8488:	2101      	movs	r1, #1
    848a:	4099      	lsls	r1, r3
    848c:	000b      	movs	r3, r1
    848e:	b25b      	sxtb	r3, r3
    8490:	4313      	orrs	r3, r2
    8492:	b25b      	sxtb	r3, r3
    8494:	b2da      	uxtb	r2, r3
    8496:	687b      	ldr	r3, [r7, #4]
    8498:	765a      	strb	r2, [r3, #25]

	uint32_t inenset_temp = 0;
    849a:	2300      	movs	r3, #0
    849c:	60fb      	str	r3, [r7, #12]

	switch (callback_type)
    849e:	1cfb      	adds	r3, r7, #3
    84a0:	781b      	ldrb	r3, [r3, #0]
    84a2:	2b01      	cmp	r3, #1
    84a4:	d009      	beq.n	84ba <ac_enable_callback+0x4a>
    84a6:	2b04      	cmp	r3, #4
    84a8:	d00c      	beq.n	84c4 <ac_enable_callback+0x54>
    84aa:	2b00      	cmp	r3, #0
    84ac:	d000      	beq.n	84b0 <ac_enable_callback+0x40>
			inenset_temp |= AC_INTFLAG_WIN1;
			break;
#  endif
#endif
		default:
			break;
    84ae:	e00e      	b.n	84ce <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP0;
    84b0:	68fb      	ldr	r3, [r7, #12]
    84b2:	2201      	movs	r2, #1
    84b4:	4313      	orrs	r3, r2
    84b6:	60fb      	str	r3, [r7, #12]
			break;
    84b8:	e009      	b.n	84ce <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_COMP1;
    84ba:	68fb      	ldr	r3, [r7, #12]
    84bc:	2202      	movs	r2, #2
    84be:	4313      	orrs	r3, r2
    84c0:	60fb      	str	r3, [r7, #12]
			break;
    84c2:	e004      	b.n	84ce <ac_enable_callback+0x5e>
			inenset_temp |= AC_INTFLAG_WIN0;
    84c4:	68fb      	ldr	r3, [r7, #12]
    84c6:	2210      	movs	r2, #16
    84c8:	4313      	orrs	r3, r2
    84ca:	60fb      	str	r3, [r7, #12]
			break;
    84cc:	46c0      	nop			; (mov r8, r8)
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
    84ce:	687b      	ldr	r3, [r7, #4]
    84d0:	681b      	ldr	r3, [r3, #0]
    84d2:	68fa      	ldr	r2, [r7, #12]
    84d4:	b2d2      	uxtb	r2, r2
    84d6:	715a      	strb	r2, [r3, #5]

#if (AC_INST_NUM == 1)
	/* Enable interrupts for AC module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_AC);
    84d8:	2018      	movs	r0, #24
    84da:	4b03      	ldr	r3, [pc, #12]	; (84e8 <ac_enable_callback+0x78>)
    84dc:	4798      	blx	r3
#elif (AC_INST_NUM > 1)
	system_interrupt_enable(_ac_interrupt_get_interrupt_vector(_ac_get_inst_index(module->hw)));
#endif /* (AC_INST_NUM > 1) */
}
    84de:	46c0      	nop			; (mov r8, r8)
    84e0:	46bd      	mov	sp, r7
    84e2:	b004      	add	sp, #16
    84e4:	bd80      	pop	{r7, pc}
    84e6:	46c0      	nop			; (mov r8, r8)
    84e8:	00008445 	.word	0x00008445

000084ec <system_pinmux_get_group_from_gpio_pin>:
{
    84ec:	b580      	push	{r7, lr}
    84ee:	b084      	sub	sp, #16
    84f0:	af00      	add	r7, sp, #0
    84f2:	0002      	movs	r2, r0
    84f4:	1dfb      	adds	r3, r7, #7
    84f6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    84f8:	230f      	movs	r3, #15
    84fa:	18fb      	adds	r3, r7, r3
    84fc:	1dfa      	adds	r2, r7, #7
    84fe:	7812      	ldrb	r2, [r2, #0]
    8500:	09d2      	lsrs	r2, r2, #7
    8502:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8504:	230e      	movs	r3, #14
    8506:	18fb      	adds	r3, r7, r3
    8508:	1dfa      	adds	r2, r7, #7
    850a:	7812      	ldrb	r2, [r2, #0]
    850c:	0952      	lsrs	r2, r2, #5
    850e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8510:	4b0d      	ldr	r3, [pc, #52]	; (8548 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8512:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    8514:	230f      	movs	r3, #15
    8516:	18fb      	adds	r3, r7, r3
    8518:	781b      	ldrb	r3, [r3, #0]
    851a:	2b00      	cmp	r3, #0
    851c:	d10f      	bne.n	853e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    851e:	230f      	movs	r3, #15
    8520:	18fb      	adds	r3, r7, r3
    8522:	781b      	ldrb	r3, [r3, #0]
    8524:	009b      	lsls	r3, r3, #2
    8526:	2210      	movs	r2, #16
    8528:	4694      	mov	ip, r2
    852a:	44bc      	add	ip, r7
    852c:	4463      	add	r3, ip
    852e:	3b08      	subs	r3, #8
    8530:	681a      	ldr	r2, [r3, #0]
    8532:	230e      	movs	r3, #14
    8534:	18fb      	adds	r3, r7, r3
    8536:	781b      	ldrb	r3, [r3, #0]
    8538:	01db      	lsls	r3, r3, #7
    853a:	18d3      	adds	r3, r2, r3
    853c:	e000      	b.n	8540 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    853e:	2300      	movs	r3, #0
}
    8540:	0018      	movs	r0, r3
    8542:	46bd      	mov	sp, r7
    8544:	b004      	add	sp, #16
    8546:	bd80      	pop	{r7, pc}
    8548:	41004400 	.word	0x41004400

0000854c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    854c:	b580      	push	{r7, lr}
    854e:	b084      	sub	sp, #16
    8550:	af00      	add	r7, sp, #0
    8552:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    8554:	687b      	ldr	r3, [r7, #4]
    8556:	681b      	ldr	r3, [r3, #0]
    8558:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    855a:	68fb      	ldr	r3, [r7, #12]
    855c:	7e5b      	ldrb	r3, [r3, #25]
    855e:	b2db      	uxtb	r3, r3
    8560:	b25b      	sxtb	r3, r3
    8562:	2b00      	cmp	r3, #0
    8564:	da01      	bge.n	856a <adc_is_syncing+0x1e>
		return true;
    8566:	2301      	movs	r3, #1
    8568:	e000      	b.n	856c <adc_is_syncing+0x20>
	}

	return false;
    856a:	2300      	movs	r3, #0
}
    856c:	0018      	movs	r0, r3
    856e:	46bd      	mov	sp, r7
    8570:	b004      	add	sp, #16
    8572:	bd80      	pop	{r7, pc}

00008574 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    8574:	b580      	push	{r7, lr}
    8576:	b086      	sub	sp, #24
    8578:	af00      	add	r7, sp, #0
    857a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    857c:	687b      	ldr	r3, [r7, #4]
    857e:	681b      	ldr	r3, [r3, #0]
    8580:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    8582:	693b      	ldr	r3, [r7, #16]
    8584:	7e1b      	ldrb	r3, [r3, #24]
    8586:	b2db      	uxtb	r3, r3
    8588:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    858a:	2300      	movs	r3, #0
    858c:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    858e:	68fb      	ldr	r3, [r7, #12]
    8590:	2201      	movs	r2, #1
    8592:	4013      	ands	r3, r2
    8594:	d003      	beq.n	859e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    8596:	697b      	ldr	r3, [r7, #20]
    8598:	2201      	movs	r2, #1
    859a:	4313      	orrs	r3, r2
    859c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    859e:	68fb      	ldr	r3, [r7, #12]
    85a0:	2204      	movs	r2, #4
    85a2:	4013      	ands	r3, r2
    85a4:	d003      	beq.n	85ae <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    85a6:	697b      	ldr	r3, [r7, #20]
    85a8:	2202      	movs	r2, #2
    85aa:	4313      	orrs	r3, r2
    85ac:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    85ae:	68fb      	ldr	r3, [r7, #12]
    85b0:	2202      	movs	r2, #2
    85b2:	4013      	ands	r3, r2
    85b4:	d003      	beq.n	85be <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    85b6:	697b      	ldr	r3, [r7, #20]
    85b8:	2204      	movs	r2, #4
    85ba:	4313      	orrs	r3, r2
    85bc:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    85be:	697b      	ldr	r3, [r7, #20]
}
    85c0:	0018      	movs	r0, r3
    85c2:	46bd      	mov	sp, r7
    85c4:	b006      	add	sp, #24
    85c6:	bd80      	pop	{r7, pc}

000085c8 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    85c8:	b580      	push	{r7, lr}
    85ca:	b084      	sub	sp, #16
    85cc:	af00      	add	r7, sp, #0
    85ce:	6078      	str	r0, [r7, #4]
    85d0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    85d2:	687b      	ldr	r3, [r7, #4]
    85d4:	681b      	ldr	r3, [r3, #0]
    85d6:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    85d8:	2300      	movs	r3, #0
    85da:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    85dc:	683b      	ldr	r3, [r7, #0]
    85de:	2201      	movs	r2, #1
    85e0:	4013      	ands	r3, r2
    85e2:	d003      	beq.n	85ec <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    85e4:	68fb      	ldr	r3, [r7, #12]
    85e6:	2201      	movs	r2, #1
    85e8:	4313      	orrs	r3, r2
    85ea:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    85ec:	683b      	ldr	r3, [r7, #0]
    85ee:	2202      	movs	r2, #2
    85f0:	4013      	ands	r3, r2
    85f2:	d003      	beq.n	85fc <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    85f4:	68fb      	ldr	r3, [r7, #12]
    85f6:	2204      	movs	r2, #4
    85f8:	4313      	orrs	r3, r2
    85fa:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    85fc:	683b      	ldr	r3, [r7, #0]
    85fe:	2204      	movs	r2, #4
    8600:	4013      	ands	r3, r2
    8602:	d003      	beq.n	860c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    8604:	68fb      	ldr	r3, [r7, #12]
    8606:	2202      	movs	r2, #2
    8608:	4313      	orrs	r3, r2
    860a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    860c:	68fb      	ldr	r3, [r7, #12]
    860e:	b2da      	uxtb	r2, r3
    8610:	68bb      	ldr	r3, [r7, #8]
    8612:	761a      	strb	r2, [r3, #24]
}
    8614:	46c0      	nop			; (mov r8, r8)
    8616:	46bd      	mov	sp, r7
    8618:	b004      	add	sp, #16
    861a:	bd80      	pop	{r7, pc}

0000861c <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    861c:	b580      	push	{r7, lr}
    861e:	b084      	sub	sp, #16
    8620:	af00      	add	r7, sp, #0
    8622:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8624:	687b      	ldr	r3, [r7, #4]
    8626:	681b      	ldr	r3, [r3, #0]
    8628:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    862a:	46c0      	nop			; (mov r8, r8)
    862c:	687b      	ldr	r3, [r7, #4]
    862e:	0018      	movs	r0, r3
    8630:	4b10      	ldr	r3, [pc, #64]	; (8674 <adc_enable+0x58>)
    8632:	4798      	blx	r3
    8634:	1e03      	subs	r3, r0, #0
    8636:	d1f9      	bne.n	862c <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    8638:	2017      	movs	r0, #23
    863a:	4b0f      	ldr	r3, [pc, #60]	; (8678 <adc_enable+0x5c>)
    863c:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    863e:	68fb      	ldr	r3, [r7, #12]
    8640:	220f      	movs	r2, #15
    8642:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    8644:	68fb      	ldr	r3, [r7, #12]
    8646:	220f      	movs	r2, #15
    8648:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    864a:	68fb      	ldr	r3, [r7, #12]
    864c:	781b      	ldrb	r3, [r3, #0]
    864e:	b2db      	uxtb	r3, r3
    8650:	2202      	movs	r2, #2
    8652:	4313      	orrs	r3, r2
    8654:	b2da      	uxtb	r2, r3
    8656:	68fb      	ldr	r3, [r7, #12]
    8658:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    865a:	46c0      	nop			; (mov r8, r8)
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	0018      	movs	r0, r3
    8660:	4b04      	ldr	r3, [pc, #16]	; (8674 <adc_enable+0x58>)
    8662:	4798      	blx	r3
    8664:	1e03      	subs	r3, r0, #0
    8666:	d1f9      	bne.n	865c <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    8668:	2300      	movs	r3, #0
}
    866a:	0018      	movs	r0, r3
    866c:	46bd      	mov	sp, r7
    866e:	b004      	add	sp, #16
    8670:	bd80      	pop	{r7, pc}
    8672:	46c0      	nop			; (mov r8, r8)
    8674:	0000854d 	.word	0x0000854d
    8678:	00008445 	.word	0x00008445

0000867c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    867c:	b580      	push	{r7, lr}
    867e:	b084      	sub	sp, #16
    8680:	af00      	add	r7, sp, #0
    8682:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8684:	687b      	ldr	r3, [r7, #4]
    8686:	681b      	ldr	r3, [r3, #0]
    8688:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    868a:	46c0      	nop			; (mov r8, r8)
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	0018      	movs	r0, r3
    8690:	4b0b      	ldr	r3, [pc, #44]	; (86c0 <adc_start_conversion+0x44>)
    8692:	4798      	blx	r3
    8694:	1e03      	subs	r3, r0, #0
    8696:	d1f9      	bne.n	868c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    8698:	68fb      	ldr	r3, [r7, #12]
    869a:	7b1b      	ldrb	r3, [r3, #12]
    869c:	b2db      	uxtb	r3, r3
    869e:	2202      	movs	r2, #2
    86a0:	4313      	orrs	r3, r2
    86a2:	b2da      	uxtb	r2, r3
    86a4:	68fb      	ldr	r3, [r7, #12]
    86a6:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    86a8:	46c0      	nop			; (mov r8, r8)
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	0018      	movs	r0, r3
    86ae:	4b04      	ldr	r3, [pc, #16]	; (86c0 <adc_start_conversion+0x44>)
    86b0:	4798      	blx	r3
    86b2:	1e03      	subs	r3, r0, #0
    86b4:	d1f9      	bne.n	86aa <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    86b6:	46c0      	nop			; (mov r8, r8)
    86b8:	46bd      	mov	sp, r7
    86ba:	b004      	add	sp, #16
    86bc:	bd80      	pop	{r7, pc}
    86be:	46c0      	nop			; (mov r8, r8)
    86c0:	0000854d 	.word	0x0000854d

000086c4 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    86c4:	b580      	push	{r7, lr}
    86c6:	b084      	sub	sp, #16
    86c8:	af00      	add	r7, sp, #0
    86ca:	6078      	str	r0, [r7, #4]
    86cc:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    86ce:	687b      	ldr	r3, [r7, #4]
    86d0:	0018      	movs	r0, r3
    86d2:	4b18      	ldr	r3, [pc, #96]	; (8734 <adc_read+0x70>)
    86d4:	4798      	blx	r3
    86d6:	0002      	movs	r2, r0
    86d8:	2301      	movs	r3, #1
    86da:	4013      	ands	r3, r2
    86dc:	d101      	bne.n	86e2 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    86de:	2305      	movs	r3, #5
    86e0:	e023      	b.n	872a <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    86e2:	687b      	ldr	r3, [r7, #4]
    86e4:	681b      	ldr	r3, [r3, #0]
    86e6:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    86e8:	46c0      	nop			; (mov r8, r8)
    86ea:	687b      	ldr	r3, [r7, #4]
    86ec:	0018      	movs	r0, r3
    86ee:	4b12      	ldr	r3, [pc, #72]	; (8738 <adc_read+0x74>)
    86f0:	4798      	blx	r3
    86f2:	1e03      	subs	r3, r0, #0
    86f4:	d1f9      	bne.n	86ea <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    86f6:	68fb      	ldr	r3, [r7, #12]
    86f8:	8b5b      	ldrh	r3, [r3, #26]
    86fa:	b29a      	uxth	r2, r3
    86fc:	683b      	ldr	r3, [r7, #0]
    86fe:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    8700:	687b      	ldr	r3, [r7, #4]
    8702:	2101      	movs	r1, #1
    8704:	0018      	movs	r0, r3
    8706:	4b0d      	ldr	r3, [pc, #52]	; (873c <adc_read+0x78>)
    8708:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    870a:	687b      	ldr	r3, [r7, #4]
    870c:	0018      	movs	r0, r3
    870e:	4b09      	ldr	r3, [pc, #36]	; (8734 <adc_read+0x70>)
    8710:	4798      	blx	r3
    8712:	0002      	movs	r2, r0
    8714:	2304      	movs	r3, #4
    8716:	4013      	ands	r3, r2
    8718:	d006      	beq.n	8728 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    871a:	687b      	ldr	r3, [r7, #4]
    871c:	2104      	movs	r1, #4
    871e:	0018      	movs	r0, r3
    8720:	4b06      	ldr	r3, [pc, #24]	; (873c <adc_read+0x78>)
    8722:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    8724:	231e      	movs	r3, #30
    8726:	e000      	b.n	872a <adc_read+0x66>
	}

	return STATUS_OK;
    8728:	2300      	movs	r3, #0
}
    872a:	0018      	movs	r0, r3
    872c:	46bd      	mov	sp, r7
    872e:	b004      	add	sp, #16
    8730:	bd80      	pop	{r7, pc}
    8732:	46c0      	nop			; (mov r8, r8)
    8734:	00008575 	.word	0x00008575
    8738:	0000854d 	.word	0x0000854d
    873c:	000085c9 	.word	0x000085c9

00008740 <adc_set_positive_input>:
 * \param[in] positive_input  Positive input pin
 */
static inline void adc_set_positive_input(
		struct adc_module *const module_inst,
		const enum adc_positive_input positive_input)
{
    8740:	b580      	push	{r7, lr}
    8742:	b084      	sub	sp, #16
    8744:	af00      	add	r7, sp, #0
    8746:	6078      	str	r0, [r7, #4]
    8748:	000a      	movs	r2, r1
    874a:	1cfb      	adds	r3, r7, #3
    874c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    874e:	687b      	ldr	r3, [r7, #4]
    8750:	681b      	ldr	r3, [r3, #0]
    8752:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8754:	46c0      	nop			; (mov r8, r8)
    8756:	687b      	ldr	r3, [r7, #4]
    8758:	0018      	movs	r0, r3
    875a:	4b0c      	ldr	r3, [pc, #48]	; (878c <adc_set_positive_input+0x4c>)
    875c:	4798      	blx	r3
    875e:	1e03      	subs	r3, r0, #0
    8760:	d1f9      	bne.n	8756 <adc_set_positive_input+0x16>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    8762:	68fb      	ldr	r3, [r7, #12]
    8764:	691b      	ldr	r3, [r3, #16]
    8766:	221f      	movs	r2, #31
    8768:	4393      	bics	r3, r2
    876a:	001a      	movs	r2, r3
    876c:	1cfb      	adds	r3, r7, #3
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    8772:	68fb      	ldr	r3, [r7, #12]
    8774:	611a      	str	r2, [r3, #16]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    8776:	46c0      	nop			; (mov r8, r8)
    8778:	687b      	ldr	r3, [r7, #4]
    877a:	0018      	movs	r0, r3
    877c:	4b03      	ldr	r3, [pc, #12]	; (878c <adc_set_positive_input+0x4c>)
    877e:	4798      	blx	r3
    8780:	1e03      	subs	r3, r0, #0
    8782:	d1f9      	bne.n	8778 <adc_set_positive_input+0x38>
		/* Wait for synchronization */
	}
}
    8784:	46c0      	nop			; (mov r8, r8)
    8786:	46bd      	mov	sp, r7
    8788:	b004      	add	sp, #16
    878a:	bd80      	pop	{r7, pc}
    878c:	0000854d 	.word	0x0000854d

00008790 <port_get_group_from_gpio_pin>:
{
    8790:	b580      	push	{r7, lr}
    8792:	b082      	sub	sp, #8
    8794:	af00      	add	r7, sp, #0
    8796:	0002      	movs	r2, r0
    8798:	1dfb      	adds	r3, r7, #7
    879a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    879c:	1dfb      	adds	r3, r7, #7
    879e:	781b      	ldrb	r3, [r3, #0]
    87a0:	0018      	movs	r0, r3
    87a2:	4b03      	ldr	r3, [pc, #12]	; (87b0 <port_get_group_from_gpio_pin+0x20>)
    87a4:	4798      	blx	r3
    87a6:	0003      	movs	r3, r0
}
    87a8:	0018      	movs	r0, r3
    87aa:	46bd      	mov	sp, r7
    87ac:	b002      	add	sp, #8
    87ae:	bd80      	pop	{r7, pc}
    87b0:	000084ed 	.word	0x000084ed

000087b4 <port_get_config_defaults>:
{
    87b4:	b580      	push	{r7, lr}
    87b6:	b082      	sub	sp, #8
    87b8:	af00      	add	r7, sp, #0
    87ba:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    87bc:	687b      	ldr	r3, [r7, #4]
    87be:	2200      	movs	r2, #0
    87c0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    87c2:	687b      	ldr	r3, [r7, #4]
    87c4:	2201      	movs	r2, #1
    87c6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    87c8:	687b      	ldr	r3, [r7, #4]
    87ca:	2200      	movs	r2, #0
    87cc:	709a      	strb	r2, [r3, #2]
}
    87ce:	46c0      	nop			; (mov r8, r8)
    87d0:	46bd      	mov	sp, r7
    87d2:	b002      	add	sp, #8
    87d4:	bd80      	pop	{r7, pc}
	...

000087d8 <port_pin_get_input_level>:
{
    87d8:	b580      	push	{r7, lr}
    87da:	b084      	sub	sp, #16
    87dc:	af00      	add	r7, sp, #0
    87de:	0002      	movs	r2, r0
    87e0:	1dfb      	adds	r3, r7, #7
    87e2:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    87e4:	1dfb      	adds	r3, r7, #7
    87e6:	781b      	ldrb	r3, [r3, #0]
    87e8:	0018      	movs	r0, r3
    87ea:	4b0b      	ldr	r3, [pc, #44]	; (8818 <port_pin_get_input_level+0x40>)
    87ec:	4798      	blx	r3
    87ee:	0003      	movs	r3, r0
    87f0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    87f2:	1dfb      	adds	r3, r7, #7
    87f4:	781b      	ldrb	r3, [r3, #0]
    87f6:	221f      	movs	r2, #31
    87f8:	4013      	ands	r3, r2
    87fa:	2201      	movs	r2, #1
    87fc:	409a      	lsls	r2, r3
    87fe:	0013      	movs	r3, r2
    8800:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    8802:	68fb      	ldr	r3, [r7, #12]
    8804:	6a1b      	ldr	r3, [r3, #32]
    8806:	68ba      	ldr	r2, [r7, #8]
    8808:	4013      	ands	r3, r2
    880a:	1e5a      	subs	r2, r3, #1
    880c:	4193      	sbcs	r3, r2
    880e:	b2db      	uxtb	r3, r3
}
    8810:	0018      	movs	r0, r3
    8812:	46bd      	mov	sp, r7
    8814:	b004      	add	sp, #16
    8816:	bd80      	pop	{r7, pc}
    8818:	00008791 	.word	0x00008791

0000881c <port_pin_set_output_level>:
{
    881c:	b580      	push	{r7, lr}
    881e:	b084      	sub	sp, #16
    8820:	af00      	add	r7, sp, #0
    8822:	0002      	movs	r2, r0
    8824:	1dfb      	adds	r3, r7, #7
    8826:	701a      	strb	r2, [r3, #0]
    8828:	1dbb      	adds	r3, r7, #6
    882a:	1c0a      	adds	r2, r1, #0
    882c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    882e:	1dfb      	adds	r3, r7, #7
    8830:	781b      	ldrb	r3, [r3, #0]
    8832:	0018      	movs	r0, r3
    8834:	4b0d      	ldr	r3, [pc, #52]	; (886c <port_pin_set_output_level+0x50>)
    8836:	4798      	blx	r3
    8838:	0003      	movs	r3, r0
    883a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    883c:	1dfb      	adds	r3, r7, #7
    883e:	781b      	ldrb	r3, [r3, #0]
    8840:	221f      	movs	r2, #31
    8842:	4013      	ands	r3, r2
    8844:	2201      	movs	r2, #1
    8846:	409a      	lsls	r2, r3
    8848:	0013      	movs	r3, r2
    884a:	60bb      	str	r3, [r7, #8]
	if (level) {
    884c:	1dbb      	adds	r3, r7, #6
    884e:	781b      	ldrb	r3, [r3, #0]
    8850:	2b00      	cmp	r3, #0
    8852:	d003      	beq.n	885c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8854:	68fb      	ldr	r3, [r7, #12]
    8856:	68ba      	ldr	r2, [r7, #8]
    8858:	619a      	str	r2, [r3, #24]
}
    885a:	e002      	b.n	8862 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    885c:	68fb      	ldr	r3, [r7, #12]
    885e:	68ba      	ldr	r2, [r7, #8]
    8860:	615a      	str	r2, [r3, #20]
}
    8862:	46c0      	nop			; (mov r8, r8)
    8864:	46bd      	mov	sp, r7
    8866:	b004      	add	sp, #16
    8868:	bd80      	pop	{r7, pc}
    886a:	46c0      	nop			; (mov r8, r8)
    886c:	00008791 	.word	0x00008791

00008870 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    8870:	b580      	push	{r7, lr}
    8872:	b084      	sub	sp, #16
    8874:	af00      	add	r7, sp, #0
    8876:	0002      	movs	r2, r0
    8878:	1dfb      	adds	r3, r7, #7
    887a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    887c:	230f      	movs	r3, #15
    887e:	18fb      	adds	r3, r7, r3
    8880:	1dfa      	adds	r2, r7, #7
    8882:	7812      	ldrb	r2, [r2, #0]
    8884:	0952      	lsrs	r2, r2, #5
    8886:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    8888:	230f      	movs	r3, #15
    888a:	18fb      	adds	r3, r7, r3
    888c:	781b      	ldrb	r3, [r3, #0]
    888e:	2b00      	cmp	r3, #0
    8890:	d10c      	bne.n	88ac <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8892:	4b09      	ldr	r3, [pc, #36]	; (88b8 <_extint_get_eic_from_channel+0x48>)
    8894:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    8896:	230f      	movs	r3, #15
    8898:	18fb      	adds	r3, r7, r3
    889a:	781b      	ldrb	r3, [r3, #0]
    889c:	009b      	lsls	r3, r3, #2
    889e:	2210      	movs	r2, #16
    88a0:	4694      	mov	ip, r2
    88a2:	44bc      	add	ip, r7
    88a4:	4463      	add	r3, ip
    88a6:	3b08      	subs	r3, #8
    88a8:	681b      	ldr	r3, [r3, #0]
    88aa:	e000      	b.n	88ae <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    88ac:	2300      	movs	r3, #0
	}
}
    88ae:	0018      	movs	r0, r3
    88b0:	46bd      	mov	sp, r7
    88b2:	b004      	add	sp, #16
    88b4:	bd80      	pop	{r7, pc}
    88b6:	46c0      	nop			; (mov r8, r8)
    88b8:	40001800 	.word	0x40001800

000088bc <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    88bc:	b580      	push	{r7, lr}
    88be:	b084      	sub	sp, #16
    88c0:	af00      	add	r7, sp, #0
    88c2:	0002      	movs	r2, r0
    88c4:	1dfb      	adds	r3, r7, #7
    88c6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    88c8:	1dfb      	adds	r3, r7, #7
    88ca:	781b      	ldrb	r3, [r3, #0]
    88cc:	0018      	movs	r0, r3
    88ce:	4b09      	ldr	r3, [pc, #36]	; (88f4 <extint_chan_clear_detected+0x38>)
    88d0:	4798      	blx	r3
    88d2:	0003      	movs	r3, r0
    88d4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    88d6:	1dfb      	adds	r3, r7, #7
    88d8:	781b      	ldrb	r3, [r3, #0]
    88da:	221f      	movs	r2, #31
    88dc:	4013      	ands	r3, r2
    88de:	2201      	movs	r2, #1
    88e0:	409a      	lsls	r2, r3
    88e2:	0013      	movs	r3, r2
    88e4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    88e6:	68fb      	ldr	r3, [r7, #12]
    88e8:	68ba      	ldr	r2, [r7, #8]
    88ea:	611a      	str	r2, [r3, #16]
}
    88ec:	46c0      	nop			; (mov r8, r8)
    88ee:	46bd      	mov	sp, r7
    88f0:	b004      	add	sp, #16
    88f2:	bd80      	pop	{r7, pc}
    88f4:	00008871 	.word	0x00008871

000088f8 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    88f8:	b580      	push	{r7, lr}
    88fa:	b084      	sub	sp, #16
    88fc:	af00      	add	r7, sp, #0
    88fe:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    8900:	687b      	ldr	r3, [r7, #4]
    8902:	22a0      	movs	r2, #160	; 0xa0
    8904:	0112      	lsls	r2, r2, #4
    8906:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    8908:	687b      	ldr	r3, [r7, #4]
    890a:	2201      	movs	r2, #1
    890c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    890e:	687b      	ldr	r3, [r7, #4]
    8910:	2200      	movs	r2, #0
    8912:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    8914:	687b      	ldr	r3, [r7, #4]
    8916:	2200      	movs	r2, #0
    8918:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    891a:	230f      	movs	r3, #15
    891c:	18fb      	adds	r3, r7, r3
    891e:	2200      	movs	r2, #0
    8920:	701a      	strb	r2, [r3, #0]
    8922:	e00e      	b.n	8942 <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    8924:	230f      	movs	r3, #15
    8926:	18fb      	adds	r3, r7, r3
    8928:	781a      	ldrb	r2, [r3, #0]
    892a:	687b      	ldr	r3, [r7, #4]
    892c:	3202      	adds	r2, #2
    892e:	0092      	lsls	r2, r2, #2
    8930:	2100      	movs	r1, #0
    8932:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    8934:	230f      	movs	r3, #15
    8936:	18fb      	adds	r3, r7, r3
    8938:	781a      	ldrb	r2, [r3, #0]
    893a:	230f      	movs	r3, #15
    893c:	18fb      	adds	r3, r7, r3
    893e:	3201      	adds	r2, #1
    8940:	701a      	strb	r2, [r3, #0]
    8942:	230f      	movs	r3, #15
    8944:	18fb      	adds	r3, r7, r3
    8946:	781b      	ldrb	r3, [r3, #0]
    8948:	2b01      	cmp	r3, #1
    894a:	d9eb      	bls.n	8924 <rtc_count_get_config_defaults+0x2c>
	}
}
    894c:	46c0      	nop			; (mov r8, r8)
    894e:	46bd      	mov	sp, r7
    8950:	b004      	add	sp, #16
    8952:	bd80      	pop	{r7, pc}

00008954 <rtc_count_enable_events>:
 *  \param[in] events    Struct containing flags of events to enable
 */
static inline void rtc_count_enable_events(
		struct rtc_module *const module,
		struct rtc_count_events *const events)
{
    8954:	b580      	push	{r7, lr}
    8956:	b086      	sub	sp, #24
    8958:	af00      	add	r7, sp, #0
    895a:	6078      	str	r0, [r7, #4]
    895c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	681b      	ldr	r3, [r3, #0]
    8962:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
    8964:	2300      	movs	r3, #0
    8966:	617b      	str	r3, [r7, #20]

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
    8968:	683b      	ldr	r3, [r7, #0]
    896a:	781b      	ldrb	r3, [r3, #0]
    896c:	2b00      	cmp	r3, #0
    896e:	d004      	beq.n	897a <rtc_count_enable_events+0x26>
		event_mask |= RTC_MODE0_EVCTRL_OVFEO;
    8970:	697b      	ldr	r3, [r7, #20]
    8972:	2280      	movs	r2, #128	; 0x80
    8974:	0212      	lsls	r2, r2, #8
    8976:	4313      	orrs	r3, r2
    8978:	617b      	str	r3, [r7, #20]
	}

	/* Check if the user has requested any compare events */
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    897a:	2313      	movs	r3, #19
    897c:	18fb      	adds	r3, r7, r3
    897e:	2200      	movs	r2, #0
    8980:	701a      	strb	r2, [r3, #0]
    8982:	e01c      	b.n	89be <rtc_count_enable_events+0x6a>
		if (events->generate_event_on_compare[i]) {
    8984:	2313      	movs	r3, #19
    8986:	18fb      	adds	r3, r7, r3
    8988:	781b      	ldrb	r3, [r3, #0]
    898a:	683a      	ldr	r2, [r7, #0]
    898c:	18d3      	adds	r3, r2, r3
    898e:	785b      	ldrb	r3, [r3, #1]
    8990:	2b00      	cmp	r3, #0
    8992:	d00d      	beq.n	89b0 <rtc_count_enable_events+0x5c>
			event_mask |= RTC_MODE0_EVCTRL_CMPEO(1 << i);
    8994:	2313      	movs	r3, #19
    8996:	18fb      	adds	r3, r7, r3
    8998:	781b      	ldrb	r3, [r3, #0]
    899a:	2201      	movs	r2, #1
    899c:	409a      	lsls	r2, r3
    899e:	0013      	movs	r3, r2
    89a0:	021b      	lsls	r3, r3, #8
    89a2:	001a      	movs	r2, r3
    89a4:	2380      	movs	r3, #128	; 0x80
    89a6:	005b      	lsls	r3, r3, #1
    89a8:	4013      	ands	r3, r2
    89aa:	697a      	ldr	r2, [r7, #20]
    89ac:	4313      	orrs	r3, r2
    89ae:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    89b0:	2313      	movs	r3, #19
    89b2:	18fb      	adds	r3, r7, r3
    89b4:	781a      	ldrb	r2, [r3, #0]
    89b6:	2313      	movs	r3, #19
    89b8:	18fb      	adds	r3, r7, r3
    89ba:	3201      	adds	r2, #1
    89bc:	701a      	strb	r2, [r3, #0]
    89be:	2313      	movs	r3, #19
    89c0:	18fb      	adds	r3, r7, r3
    89c2:	781b      	ldrb	r3, [r3, #0]
    89c4:	2b01      	cmp	r3, #1
    89c6:	d9dd      	bls.n	8984 <rtc_count_enable_events+0x30>
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
    89c8:	2312      	movs	r3, #18
    89ca:	18fb      	adds	r3, r7, r3
    89cc:	2200      	movs	r2, #0
    89ce:	701a      	strb	r2, [r3, #0]
    89d0:	e01a      	b.n	8a08 <rtc_count_enable_events+0xb4>
		if (events->generate_event_on_periodic[i]) {
    89d2:	2312      	movs	r3, #18
    89d4:	18fb      	adds	r3, r7, r3
    89d6:	781b      	ldrb	r3, [r3, #0]
    89d8:	683a      	ldr	r2, [r7, #0]
    89da:	18d3      	adds	r3, r2, r3
    89dc:	78db      	ldrb	r3, [r3, #3]
    89de:	2b00      	cmp	r3, #0
    89e0:	d00b      	beq.n	89fa <rtc_count_enable_events+0xa6>
			event_mask |= RTC_MODE0_EVCTRL_PEREO(1 << i);
    89e2:	2312      	movs	r3, #18
    89e4:	18fb      	adds	r3, r7, r3
    89e6:	781b      	ldrb	r3, [r3, #0]
    89e8:	2201      	movs	r2, #1
    89ea:	409a      	lsls	r2, r3
    89ec:	0013      	movs	r3, r2
    89ee:	001a      	movs	r2, r3
    89f0:	23ff      	movs	r3, #255	; 0xff
    89f2:	4013      	ands	r3, r2
    89f4:	697a      	ldr	r2, [r7, #20]
    89f6:	4313      	orrs	r3, r2
    89f8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < 8; i++) {
    89fa:	2312      	movs	r3, #18
    89fc:	18fb      	adds	r3, r7, r3
    89fe:	781a      	ldrb	r2, [r3, #0]
    8a00:	2312      	movs	r3, #18
    8a02:	18fb      	adds	r3, r7, r3
    8a04:	3201      	adds	r2, #1
    8a06:	701a      	strb	r2, [r3, #0]
    8a08:	2312      	movs	r3, #18
    8a0a:	18fb      	adds	r3, r7, r3
    8a0c:	781b      	ldrb	r3, [r3, #0]
    8a0e:	2b07      	cmp	r3, #7
    8a10:	d9df      	bls.n	89d2 <rtc_count_enable_events+0x7e>
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
    8a12:	68fb      	ldr	r3, [r7, #12]
    8a14:	889b      	ldrh	r3, [r3, #4]
    8a16:	b29a      	uxth	r2, r3
    8a18:	697b      	ldr	r3, [r7, #20]
    8a1a:	b29b      	uxth	r3, r3
    8a1c:	4313      	orrs	r3, r2
    8a1e:	b29a      	uxth	r2, r3
    8a20:	68fb      	ldr	r3, [r7, #12]
    8a22:	809a      	strh	r2, [r3, #4]
}
    8a24:	46c0      	nop			; (mov r8, r8)
    8a26:	46bd      	mov	sp, r7
    8a28:	b006      	add	sp, #24
    8a2a:	bd80      	pop	{r7, pc}

00008a2c <readOverHeadWaterSensorState>:
simEventTemp[9]		: lost AC power in 1 phase						A
*/


void readOverHeadWaterSensorState(bool *olow,bool *ohigh)
{
    8a2c:	b580      	push	{r7, lr}
    8a2e:	b082      	sub	sp, #8
    8a30:	af00      	add	r7, sp, #0
    8a32:	6078      	str	r0, [r7, #4]
    8a34:	6039      	str	r1, [r7, #0]
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
    8a36:	200d      	movs	r0, #13
    8a38:	4b08      	ldr	r3, [pc, #32]	; (8a5c <readOverHeadWaterSensorState+0x30>)
    8a3a:	4798      	blx	r3
    8a3c:	0003      	movs	r3, r0
    8a3e:	001a      	movs	r2, r3
    8a40:	687b      	ldr	r3, [r7, #4]
    8a42:	701a      	strb	r2, [r3, #0]
	//*omid = port_pin_get_input_level(OVERHEAD_TANK_ML_PIN);
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
    8a44:	202f      	movs	r0, #47	; 0x2f
    8a46:	4b05      	ldr	r3, [pc, #20]	; (8a5c <readOverHeadWaterSensorState+0x30>)
    8a48:	4798      	blx	r3
    8a4a:	0003      	movs	r3, r0
    8a4c:	001a      	movs	r2, r3
    8a4e:	683b      	ldr	r3, [r7, #0]
    8a50:	701a      	strb	r2, [r3, #0]
}
    8a52:	46c0      	nop			; (mov r8, r8)
    8a54:	46bd      	mov	sp, r7
    8a56:	b002      	add	sp, #8
    8a58:	bd80      	pop	{r7, pc}
    8a5a:	46c0      	nop			; (mov r8, r8)
    8a5c:	000087d9 	.word	0x000087d9

00008a60 <updateOverheadLevel>:

void updateOverheadLevel(uint8_t level)
{
    8a60:	b580      	push	{r7, lr}
    8a62:	b082      	sub	sp, #8
    8a64:	af00      	add	r7, sp, #0
    8a66:	0002      	movs	r2, r0
    8a68:	1dfb      	adds	r3, r7, #7
    8a6a:	701a      	strb	r2, [r3, #0]
	overheadLevel=level;
    8a6c:	4b03      	ldr	r3, [pc, #12]	; (8a7c <updateOverheadLevel+0x1c>)
    8a6e:	1dfa      	adds	r2, r7, #7
    8a70:	7812      	ldrb	r2, [r2, #0]
    8a72:	701a      	strb	r2, [r3, #0]
}
    8a74:	46c0      	nop			; (mov r8, r8)
    8a76:	46bd      	mov	sp, r7
    8a78:	b002      	add	sp, #8
    8a7a:	bd80      	pop	{r7, pc}
    8a7c:	20000768 	.word	0x20000768

00008a80 <getOverHeadWaterSensorState>:

uint8_t getOverHeadWaterSensorState(void)
{
    8a80:	b580      	push	{r7, lr}
    8a82:	b082      	sub	sp, #8
    8a84:	af00      	add	r7, sp, #0
	bool olow,omid,ohigh;
	readOverHeadWaterSensorState(&olow,&ohigh);
    8a86:	1d7a      	adds	r2, r7, #5
    8a88:	1dbb      	adds	r3, r7, #6
    8a8a:	0011      	movs	r1, r2
    8a8c:	0018      	movs	r0, r3
    8a8e:	4b11      	ldr	r3, [pc, #68]	; (8ad4 <getOverHeadWaterSensorState+0x54>)
    8a90:	4798      	blx	r3
	uint8_t ans=0;
    8a92:	1dfb      	adds	r3, r7, #7
    8a94:	2200      	movs	r2, #0
    8a96:	701a      	strb	r2, [r3, #0]
	if(!olow)
    8a98:	1dbb      	adds	r3, r7, #6
    8a9a:	781b      	ldrb	r3, [r3, #0]
    8a9c:	2201      	movs	r2, #1
    8a9e:	4053      	eors	r3, r2
    8aa0:	b2db      	uxtb	r3, r3
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	d010      	beq.n	8ac8 <getOverHeadWaterSensorState+0x48>
	{
		ans++;
    8aa6:	1dfb      	adds	r3, r7, #7
    8aa8:	781a      	ldrb	r2, [r3, #0]
    8aaa:	1dfb      	adds	r3, r7, #7
    8aac:	3201      	adds	r2, #1
    8aae:	701a      	strb	r2, [r3, #0]
		//if(!omid)
		{
			//ans++;
			if (!ohigh)
    8ab0:	1d7b      	adds	r3, r7, #5
    8ab2:	781b      	ldrb	r3, [r3, #0]
    8ab4:	2201      	movs	r2, #1
    8ab6:	4053      	eors	r3, r2
    8ab8:	b2db      	uxtb	r3, r3
    8aba:	2b00      	cmp	r3, #0
    8abc:	d004      	beq.n	8ac8 <getOverHeadWaterSensorState+0x48>
			{
				ans++;
    8abe:	1dfb      	adds	r3, r7, #7
    8ac0:	781a      	ldrb	r2, [r3, #0]
    8ac2:	1dfb      	adds	r3, r7, #7
    8ac4:	3201      	adds	r2, #1
    8ac6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
    8ac8:	1dfb      	adds	r3, r7, #7
    8aca:	781b      	ldrb	r3, [r3, #0]
}
    8acc:	0018      	movs	r0, r3
    8ace:	46bd      	mov	sp, r7
    8ad0:	b002      	add	sp, #8
    8ad2:	bd80      	pop	{r7, pc}
    8ad4:	00008a2d 	.word	0x00008a2d

00008ad8 <overHeadWaterStatusOnCall>:

void overHeadWaterStatusOnCall(bool current)
{
    8ad8:	b590      	push	{r4, r7, lr}
    8ada:	b085      	sub	sp, #20
    8adc:	af00      	add	r7, sp, #0
    8ade:	0002      	movs	r2, r0
    8ae0:	1dfb      	adds	r3, r7, #7
    8ae2:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getOverHeadWaterSensorState();
    8ae4:	230f      	movs	r3, #15
    8ae6:	18fc      	adds	r4, r7, r3
    8ae8:	4b15      	ldr	r3, [pc, #84]	; (8b40 <overHeadWaterStatusOnCall+0x68>)
    8aea:	4798      	blx	r3
    8aec:	0003      	movs	r3, r0
    8aee:	7023      	strb	r3, [r4, #0]
	if(current)
    8af0:	1dfb      	adds	r3, r7, #7
    8af2:	781b      	ldrb	r3, [r3, #0]
    8af4:	2b00      	cmp	r3, #0
    8af6:	d004      	beq.n	8b02 <overHeadWaterStatusOnCall+0x2a>
	temp = overheadLevel;
    8af8:	230f      	movs	r3, #15
    8afa:	18fb      	adds	r3, r7, r3
    8afc:	4a11      	ldr	r2, [pc, #68]	; (8b44 <overHeadWaterStatusOnCall+0x6c>)
    8afe:	7812      	ldrb	r2, [r2, #0]
    8b00:	701a      	strb	r2, [r3, #0]
	if(temp == OVERHEADHIGHLEVEL)
    8b02:	230f      	movs	r3, #15
    8b04:	18fb      	adds	r3, r7, r3
    8b06:	781b      	ldrb	r3, [r3, #0]
    8b08:	2b02      	cmp	r3, #2
    8b0a:	d103      	bne.n	8b14 <overHeadWaterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('V');
    8b0c:	2056      	movs	r0, #86	; 0x56
    8b0e:	4b0e      	ldr	r3, [pc, #56]	; (8b48 <overHeadWaterStatusOnCall+0x70>)
    8b10:	4798      	blx	r3
	}
	else if (temp == OVERHEADCRITICALLEVEL)
	{
		setMotorMGRResponse('W');
	}
}
    8b12:	e010      	b.n	8b36 <overHeadWaterStatusOnCall+0x5e>
	else if(temp == OVERHEADMIDLEVEL)
    8b14:	230f      	movs	r3, #15
    8b16:	18fb      	adds	r3, r7, r3
    8b18:	781b      	ldrb	r3, [r3, #0]
    8b1a:	2b01      	cmp	r3, #1
    8b1c:	d103      	bne.n	8b26 <overHeadWaterStatusOnCall+0x4e>
		setMotorMGRResponse('X');
    8b1e:	2058      	movs	r0, #88	; 0x58
    8b20:	4b09      	ldr	r3, [pc, #36]	; (8b48 <overHeadWaterStatusOnCall+0x70>)
    8b22:	4798      	blx	r3
}
    8b24:	e007      	b.n	8b36 <overHeadWaterStatusOnCall+0x5e>
	else if (temp == OVERHEADCRITICALLEVEL)
    8b26:	230f      	movs	r3, #15
    8b28:	18fb      	adds	r3, r7, r3
    8b2a:	781b      	ldrb	r3, [r3, #0]
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	d102      	bne.n	8b36 <overHeadWaterStatusOnCall+0x5e>
		setMotorMGRResponse('W');
    8b30:	2057      	movs	r0, #87	; 0x57
    8b32:	4b05      	ldr	r3, [pc, #20]	; (8b48 <overHeadWaterStatusOnCall+0x70>)
    8b34:	4798      	blx	r3
}
    8b36:	46c0      	nop			; (mov r8, r8)
    8b38:	46bd      	mov	sp, r7
    8b3a:	b005      	add	sp, #20
    8b3c:	bd90      	pop	{r4, r7, pc}
    8b3e:	46c0      	nop			; (mov r8, r8)
    8b40:	00008a81 	.word	0x00008a81
    8b44:	20000768 	.word	0x20000768
    8b48:	000048a9 	.word	0x000048a9

00008b4c <readWaterSensorState>:

void readWaterSensorState(bool *low,bool *mid,bool *high)
{
    8b4c:	b580      	push	{r7, lr}
    8b4e:	b084      	sub	sp, #16
    8b50:	af00      	add	r7, sp, #0
    8b52:	60f8      	str	r0, [r7, #12]
    8b54:	60b9      	str	r1, [r7, #8]
    8b56:	607a      	str	r2, [r7, #4]
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
    8b58:	2037      	movs	r0, #55	; 0x37
    8b5a:	4b0c      	ldr	r3, [pc, #48]	; (8b8c <readWaterSensorState+0x40>)
    8b5c:	4798      	blx	r3
    8b5e:	0003      	movs	r3, r0
    8b60:	001a      	movs	r2, r3
    8b62:	68fb      	ldr	r3, [r7, #12]
    8b64:	701a      	strb	r2, [r3, #0]
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
    8b66:	200f      	movs	r0, #15
    8b68:	4b08      	ldr	r3, [pc, #32]	; (8b8c <readWaterSensorState+0x40>)
    8b6a:	4798      	blx	r3
    8b6c:	0003      	movs	r3, r0
    8b6e:	001a      	movs	r2, r3
    8b70:	68bb      	ldr	r3, [r7, #8]
    8b72:	701a      	strb	r2, [r3, #0]
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
    8b74:	200e      	movs	r0, #14
    8b76:	4b05      	ldr	r3, [pc, #20]	; (8b8c <readWaterSensorState+0x40>)
    8b78:	4798      	blx	r3
    8b7a:	0003      	movs	r3, r0
    8b7c:	001a      	movs	r2, r3
    8b7e:	687b      	ldr	r3, [r7, #4]
    8b80:	701a      	strb	r2, [r3, #0]
}
    8b82:	46c0      	nop			; (mov r8, r8)
    8b84:	46bd      	mov	sp, r7
    8b86:	b004      	add	sp, #16
    8b88:	bd80      	pop	{r7, pc}
    8b8a:	46c0      	nop			; (mov r8, r8)
    8b8c:	000087d9 	.word	0x000087d9

00008b90 <updateUndergroundLevel>:

void updateUndergroundLevel(uint8_t level)
{
    8b90:	b580      	push	{r7, lr}
    8b92:	b082      	sub	sp, #8
    8b94:	af00      	add	r7, sp, #0
    8b96:	0002      	movs	r2, r0
    8b98:	1dfb      	adds	r3, r7, #7
    8b9a:	701a      	strb	r2, [r3, #0]
	undergroundLevel=level;
    8b9c:	4b03      	ldr	r3, [pc, #12]	; (8bac <updateUndergroundLevel+0x1c>)
    8b9e:	1dfa      	adds	r2, r7, #7
    8ba0:	7812      	ldrb	r2, [r2, #0]
    8ba2:	701a      	strb	r2, [r3, #0]
}
    8ba4:	46c0      	nop			; (mov r8, r8)
    8ba6:	46bd      	mov	sp, r7
    8ba8:	b002      	add	sp, #8
    8baa:	bd80      	pop	{r7, pc}
    8bac:	20000814 	.word	0x20000814

00008bb0 <getWaterSensorState>:

uint8_t getWaterSensorState(void)
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	b082      	sub	sp, #8
    8bb4:	af00      	add	r7, sp, #0
	bool l,m,h;
	readWaterSensorState(&l,&m,&h);
    8bb6:	1d3a      	adds	r2, r7, #4
    8bb8:	1d79      	adds	r1, r7, #5
    8bba:	1dbb      	adds	r3, r7, #6
    8bbc:	0018      	movs	r0, r3
    8bbe:	4b17      	ldr	r3, [pc, #92]	; (8c1c <getWaterSensorState+0x6c>)
    8bc0:	4798      	blx	r3
	uint8_t ans=0;
    8bc2:	1dfb      	adds	r3, r7, #7
    8bc4:	2200      	movs	r2, #0
    8bc6:	701a      	strb	r2, [r3, #0]

	if(!l)
    8bc8:	1dbb      	adds	r3, r7, #6
    8bca:	781b      	ldrb	r3, [r3, #0]
    8bcc:	2201      	movs	r2, #1
    8bce:	4053      	eors	r3, r2
    8bd0:	b2db      	uxtb	r3, r3
    8bd2:	2b00      	cmp	r3, #0
    8bd4:	d01c      	beq.n	8c10 <getWaterSensorState+0x60>
	{
		ans++;
    8bd6:	1dfb      	adds	r3, r7, #7
    8bd8:	781a      	ldrb	r2, [r3, #0]
    8bda:	1dfb      	adds	r3, r7, #7
    8bdc:	3201      	adds	r2, #1
    8bde:	701a      	strb	r2, [r3, #0]
		if(!m)
    8be0:	1d7b      	adds	r3, r7, #5
    8be2:	781b      	ldrb	r3, [r3, #0]
    8be4:	2201      	movs	r2, #1
    8be6:	4053      	eors	r3, r2
    8be8:	b2db      	uxtb	r3, r3
    8bea:	2b00      	cmp	r3, #0
    8bec:	d010      	beq.n	8c10 <getWaterSensorState+0x60>
		{
			ans++;
    8bee:	1dfb      	adds	r3, r7, #7
    8bf0:	781a      	ldrb	r2, [r3, #0]
    8bf2:	1dfb      	adds	r3, r7, #7
    8bf4:	3201      	adds	r2, #1
    8bf6:	701a      	strb	r2, [r3, #0]
			if(!h)
    8bf8:	1d3b      	adds	r3, r7, #4
    8bfa:	781b      	ldrb	r3, [r3, #0]
    8bfc:	2201      	movs	r2, #1
    8bfe:	4053      	eors	r3, r2
    8c00:	b2db      	uxtb	r3, r3
    8c02:	2b00      	cmp	r3, #0
    8c04:	d004      	beq.n	8c10 <getWaterSensorState+0x60>
			{
				ans++;
    8c06:	1dfb      	adds	r3, r7, #7
    8c08:	781a      	ldrb	r2, [r3, #0]
    8c0a:	1dfb      	adds	r3, r7, #7
    8c0c:	3201      	adds	r2, #1
    8c0e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return ans;
    8c10:	1dfb      	adds	r3, r7, #7
    8c12:	781b      	ldrb	r3, [r3, #0]
}
    8c14:	0018      	movs	r0, r3
    8c16:	46bd      	mov	sp, r7
    8c18:	b002      	add	sp, #8
    8c1a:	bd80      	pop	{r7, pc}
    8c1c:	00008b4d 	.word	0x00008b4d

00008c20 <waterStatusOnCall>:

void waterStatusOnCall(bool current)
{
    8c20:	b590      	push	{r4, r7, lr}
    8c22:	b085      	sub	sp, #20
    8c24:	af00      	add	r7, sp, #0
    8c26:	0002      	movs	r2, r0
    8c28:	1dfb      	adds	r3, r7, #7
    8c2a:	701a      	strb	r2, [r3, #0]
	uint8_t temp = getWaterSensorState();
    8c2c:	230f      	movs	r3, #15
    8c2e:	18fc      	adds	r4, r7, r3
    8c30:	4b19      	ldr	r3, [pc, #100]	; (8c98 <waterStatusOnCall+0x78>)
    8c32:	4798      	blx	r3
    8c34:	0003      	movs	r3, r0
    8c36:	7023      	strb	r3, [r4, #0]
	if(current)
    8c38:	1dfb      	adds	r3, r7, #7
    8c3a:	781b      	ldrb	r3, [r3, #0]
    8c3c:	2b00      	cmp	r3, #0
    8c3e:	d004      	beq.n	8c4a <waterStatusOnCall+0x2a>
	temp = undergroundLevel;
    8c40:	230f      	movs	r3, #15
    8c42:	18fb      	adds	r3, r7, r3
    8c44:	4a15      	ldr	r2, [pc, #84]	; (8c9c <waterStatusOnCall+0x7c>)
    8c46:	7812      	ldrb	r2, [r2, #0]
    8c48:	701a      	strb	r2, [r3, #0]

	if(temp==CRITICALLEVEL)
    8c4a:	230f      	movs	r3, #15
    8c4c:	18fb      	adds	r3, r7, r3
    8c4e:	781b      	ldrb	r3, [r3, #0]
    8c50:	2b00      	cmp	r3, #0
    8c52:	d103      	bne.n	8c5c <waterStatusOnCall+0x3c>
	{
		setMotorMGRResponse('T');	//water level insufficient
    8c54:	2054      	movs	r0, #84	; 0x54
    8c56:	4b12      	ldr	r3, [pc, #72]	; (8ca0 <waterStatusOnCall+0x80>)
    8c58:	4798      	blx	r3
	}
	else if(temp==HIGHLEVEL)
	{
		setMotorMGRResponse('E');	//well is full
	}
}
    8c5a:	e019      	b.n	8c90 <waterStatusOnCall+0x70>
	else if(temp==LOWLEVEL)
    8c5c:	230f      	movs	r3, #15
    8c5e:	18fb      	adds	r3, r7, r3
    8c60:	781b      	ldrb	r3, [r3, #0]
    8c62:	2b01      	cmp	r3, #1
    8c64:	d103      	bne.n	8c6e <waterStatusOnCall+0x4e>
		setMotorMGRResponse('Q');	//water below 2nd sensor
    8c66:	2051      	movs	r0, #81	; 0x51
    8c68:	4b0d      	ldr	r3, [pc, #52]	; (8ca0 <waterStatusOnCall+0x80>)
    8c6a:	4798      	blx	r3
}
    8c6c:	e010      	b.n	8c90 <waterStatusOnCall+0x70>
	else if(temp==MIDLEVEL)
    8c6e:	230f      	movs	r3, #15
    8c70:	18fb      	adds	r3, r7, r3
    8c72:	781b      	ldrb	r3, [r3, #0]
    8c74:	2b02      	cmp	r3, #2
    8c76:	d103      	bne.n	8c80 <waterStatusOnCall+0x60>
		setMotorMGRResponse('R');	//water below 1st sensor
    8c78:	2052      	movs	r0, #82	; 0x52
    8c7a:	4b09      	ldr	r3, [pc, #36]	; (8ca0 <waterStatusOnCall+0x80>)
    8c7c:	4798      	blx	r3
}
    8c7e:	e007      	b.n	8c90 <waterStatusOnCall+0x70>
	else if(temp==HIGHLEVEL)
    8c80:	230f      	movs	r3, #15
    8c82:	18fb      	adds	r3, r7, r3
    8c84:	781b      	ldrb	r3, [r3, #0]
    8c86:	2b03      	cmp	r3, #3
    8c88:	d102      	bne.n	8c90 <waterStatusOnCall+0x70>
		setMotorMGRResponse('E');	//well is full
    8c8a:	2045      	movs	r0, #69	; 0x45
    8c8c:	4b04      	ldr	r3, [pc, #16]	; (8ca0 <waterStatusOnCall+0x80>)
    8c8e:	4798      	blx	r3
}
    8c90:	46c0      	nop			; (mov r8, r8)
    8c92:	46bd      	mov	sp, r7
    8c94:	b005      	add	sp, #20
    8c96:	bd90      	pop	{r4, r7, pc}
    8c98:	00008bb1 	.word	0x00008bb1
    8c9c:	20000814 	.word	0x20000814
    8ca0:	000048a9 	.word	0x000048a9

00008ca4 <Water_Level_Task>:

static void Water_Level_Task(void *params)
{
    8ca4:	b590      	push	{r4, r7, lr}
    8ca6:	b085      	sub	sp, #20
    8ca8:	af00      	add	r7, sp, #0
    8caa:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	struct port_config water_level_sensor_pin_config;
	port_get_config_defaults(&water_level_sensor_pin_config);
    8cac:	2308      	movs	r3, #8
    8cae:	18fb      	adds	r3, r7, r3
    8cb0:	0018      	movs	r0, r3
    8cb2:	4b8b      	ldr	r3, [pc, #556]	; (8ee0 <Water_Level_Task+0x23c>)
    8cb4:	4798      	blx	r3
	
	water_level_sensor_pin_config.direction = PORT_PIN_DIR_INPUT;
    8cb6:	2308      	movs	r3, #8
    8cb8:	18fb      	adds	r3, r7, r3
    8cba:	2200      	movs	r2, #0
    8cbc:	701a      	strb	r2, [r3, #0]
	water_level_sensor_pin_config.input_pull = PORT_PIN_PULL_UP;
    8cbe:	2308      	movs	r3, #8
    8cc0:	18fb      	adds	r3, r7, r3
    8cc2:	2201      	movs	r2, #1
    8cc4:	705a      	strb	r2, [r3, #1]
	
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
    8cc6:	2308      	movs	r3, #8
    8cc8:	18fb      	adds	r3, r7, r3
    8cca:	0019      	movs	r1, r3
    8ccc:	202f      	movs	r0, #47	; 0x2f
    8cce:	4b85      	ldr	r3, [pc, #532]	; (8ee4 <Water_Level_Task+0x240>)
    8cd0:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
    8cd2:	2308      	movs	r3, #8
    8cd4:	18fb      	adds	r3, r7, r3
    8cd6:	0019      	movs	r1, r3
    8cd8:	200c      	movs	r0, #12
    8cda:	4b82      	ldr	r3, [pc, #520]	; (8ee4 <Water_Level_Task+0x240>)
    8cdc:	4798      	blx	r3
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
    8cde:	2308      	movs	r3, #8
    8ce0:	18fb      	adds	r3, r7, r3
    8ce2:	0019      	movs	r1, r3
    8ce4:	200d      	movs	r0, #13
    8ce6:	4b7f      	ldr	r3, [pc, #508]	; (8ee4 <Water_Level_Task+0x240>)
    8ce8:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
    8cea:	2308      	movs	r3, #8
    8cec:	18fb      	adds	r3, r7, r3
    8cee:	0019      	movs	r1, r3
    8cf0:	200e      	movs	r0, #14
    8cf2:	4b7c      	ldr	r3, [pc, #496]	; (8ee4 <Water_Level_Task+0x240>)
    8cf4:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
    8cf6:	2308      	movs	r3, #8
    8cf8:	18fb      	adds	r3, r7, r3
    8cfa:	0019      	movs	r1, r3
    8cfc:	200f      	movs	r0, #15
    8cfe:	4b79      	ldr	r3, [pc, #484]	; (8ee4 <Water_Level_Task+0x240>)
    8d00:	4798      	blx	r3
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
    8d02:	2308      	movs	r3, #8
    8d04:	18fb      	adds	r3, r7, r3
    8d06:	0019      	movs	r1, r3
    8d08:	2037      	movs	r0, #55	; 0x37
    8d0a:	4b76      	ldr	r3, [pc, #472]	; (8ee4 <Water_Level_Task+0x240>)
    8d0c:	4798      	blx	r3
	
	undergroundLevel = MIDLEVEL;
    8d0e:	4b76      	ldr	r3, [pc, #472]	; (8ee8 <Water_Level_Task+0x244>)
    8d10:	2202      	movs	r2, #2
    8d12:	701a      	strb	r2, [r3, #0]
	tempUndergroundLevel = MIDLEVEL;
    8d14:	4b75      	ldr	r3, [pc, #468]	; (8eec <Water_Level_Task+0x248>)
    8d16:	2202      	movs	r2, #2
    8d18:	701a      	strb	r2, [r3, #0]
	
	overheadLevel = OVERHEADMIDLEVEL;
    8d1a:	4b75      	ldr	r3, [pc, #468]	; (8ef0 <Water_Level_Task+0x24c>)
    8d1c:	2201      	movs	r2, #1
    8d1e:	701a      	strb	r2, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
    8d20:	4b74      	ldr	r3, [pc, #464]	; (8ef4 <Water_Level_Task+0x250>)
    8d22:	2201      	movs	r2, #1
    8d24:	701a      	strb	r2, [r3, #0]
	tempWaterEventCount = 0;
    8d26:	4b74      	ldr	r3, [pc, #464]	; (8ef8 <Water_Level_Task+0x254>)
    8d28:	2200      	movs	r2, #0
    8d2a:	701a      	strb	r2, [r3, #0]
	
	uint8_t j = 0;
    8d2c:	230f      	movs	r3, #15
    8d2e:	18fb      	adds	r3, r7, r3
    8d30:	2200      	movs	r2, #0
    8d32:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
    8d34:	4b71      	ldr	r3, [pc, #452]	; (8efc <Water_Level_Task+0x258>)
    8d36:	791b      	ldrb	r3, [r3, #4]
    8d38:	2b00      	cmp	r3, #0
    8d3a:	d004      	beq.n	8d46 <Water_Level_Task+0xa2>
	{
		j = 19;
    8d3c:	230f      	movs	r3, #15
    8d3e:	18fb      	adds	r3, r7, r3
    8d40:	2213      	movs	r2, #19
    8d42:	701a      	strb	r2, [r3, #0]
    8d44:	e003      	b.n	8d4e <Water_Level_Task+0xaa>
	}
	else
	{
		j= 17;
    8d46:	230f      	movs	r3, #15
    8d48:	18fb      	adds	r3, r7, r3
    8d4a:	2211      	movs	r2, #17
    8d4c:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i=12;i<j;i++)
    8d4e:	230e      	movs	r3, #14
    8d50:	18fb      	adds	r3, r7, r3
    8d52:	220c      	movs	r2, #12
    8d54:	701a      	strb	r2, [r3, #0]
    8d56:	e00c      	b.n	8d72 <Water_Level_Task+0xce>
	{
		simEventTemp[i] = true;
    8d58:	230e      	movs	r3, #14
    8d5a:	18fb      	adds	r3, r7, r3
    8d5c:	781b      	ldrb	r3, [r3, #0]
    8d5e:	4a68      	ldr	r2, [pc, #416]	; (8f00 <Water_Level_Task+0x25c>)
    8d60:	2101      	movs	r1, #1
    8d62:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=12;i<j;i++)
    8d64:	230e      	movs	r3, #14
    8d66:	18fb      	adds	r3, r7, r3
    8d68:	781a      	ldrb	r2, [r3, #0]
    8d6a:	230e      	movs	r3, #14
    8d6c:	18fb      	adds	r3, r7, r3
    8d6e:	3201      	adds	r2, #1
    8d70:	701a      	strb	r2, [r3, #0]
    8d72:	230e      	movs	r3, #14
    8d74:	18fa      	adds	r2, r7, r3
    8d76:	230f      	movs	r3, #15
    8d78:	18fb      	adds	r3, r7, r3
    8d7a:	7812      	ldrb	r2, [r2, #0]
    8d7c:	781b      	ldrb	r3, [r3, #0]
    8d7e:	429a      	cmp	r2, r3
    8d80:	d3ea      	bcc.n	8d58 <Water_Level_Task+0xb4>
	}
	simEvent[12] = 'I';
    8d82:	4b60      	ldr	r3, [pc, #384]	; (8f04 <Water_Level_Task+0x260>)
    8d84:	2249      	movs	r2, #73	; 0x49
    8d86:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
    8d88:	4b5e      	ldr	r3, [pc, #376]	; (8f04 <Water_Level_Task+0x260>)
    8d8a:	2244      	movs	r2, #68	; 0x44
    8d8c:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
    8d8e:	4b5d      	ldr	r3, [pc, #372]	; (8f04 <Water_Level_Task+0x260>)
    8d90:	2248      	movs	r2, #72	; 0x48
    8d92:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
    8d94:	4b5b      	ldr	r3, [pc, #364]	; (8f04 <Water_Level_Task+0x260>)
    8d96:	2245      	movs	r2, #69	; 0x45
    8d98:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
    8d9a:	4b5a      	ldr	r3, [pc, #360]	; (8f04 <Water_Level_Task+0x260>)
    8d9c:	225a      	movs	r2, #90	; 0x5a
    8d9e:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
    8da0:	4b56      	ldr	r3, [pc, #344]	; (8efc <Water_Level_Task+0x258>)
    8da2:	791b      	ldrb	r3, [r3, #4]
    8da4:	2b00      	cmp	r3, #0
    8da6:	d005      	beq.n	8db4 <Water_Level_Task+0x110>
	{
		simEvent[17] = 'V';
    8da8:	4b56      	ldr	r3, [pc, #344]	; (8f04 <Water_Level_Task+0x260>)
    8daa:	2256      	movs	r2, #86	; 0x56
    8dac:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
    8dae:	4b55      	ldr	r3, [pc, #340]	; (8f04 <Water_Level_Task+0x260>)
    8db0:	2257      	movs	r2, #87	; 0x57
    8db2:	749a      	strb	r2, [r3, #18]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    8db4:	4b51      	ldr	r3, [pc, #324]	; (8efc <Water_Level_Task+0x258>)
    8db6:	78db      	ldrb	r3, [r3, #3]
    8db8:	2b00      	cmp	r3, #0
    8dba:	d00b      	beq.n	8dd4 <Water_Level_Task+0x130>
	{
		m2mEvent_arr[0] = ME_CLEARED;
    8dbc:	4b52      	ldr	r3, [pc, #328]	; (8f08 <Water_Level_Task+0x264>)
    8dbe:	2200      	movs	r2, #0
    8dc0:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
    8dc2:	4b51      	ldr	r3, [pc, #324]	; (8f08 <Water_Level_Task+0x264>)
    8dc4:	2200      	movs	r2, #0
    8dc6:	705a      	strb	r2, [r3, #1]
		
		mapTable[0] = 13;
    8dc8:	4b50      	ldr	r3, [pc, #320]	; (8f0c <Water_Level_Task+0x268>)
    8dca:	220d      	movs	r2, #13
    8dcc:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
    8dce:	4b4f      	ldr	r3, [pc, #316]	; (8f0c <Water_Level_Task+0x268>)
    8dd0:	220f      	movs	r2, #15
    8dd2:	705a      	strb	r2, [r3, #1]
	}
	
	
	for (;;)
	{
		bool result=false;
    8dd4:	230c      	movs	r3, #12
    8dd6:	18fb      	adds	r3, r7, r3
    8dd8:	2200      	movs	r2, #0
    8dda:	701a      	strb	r2, [r3, #0]
		
		if (!(user_settings_parameter_struct.waterBypassAddress))
    8ddc:	4b4c      	ldr	r3, [pc, #304]	; (8f10 <Water_Level_Task+0x26c>)
    8dde:	7fdb      	ldrb	r3, [r3, #31]
    8de0:	2b00      	cmp	r3, #0
    8de2:	d000      	beq.n	8de6 <Water_Level_Task+0x142>
    8de4:	e073      	b.n	8ece <Water_Level_Task+0x22a>
		{
			uint8_t uLevel;
			uint8_t oLevel;
			uLevel = getWaterSensorState();
    8de6:	230b      	movs	r3, #11
    8de8:	18fc      	adds	r4, r7, r3
    8dea:	4b4a      	ldr	r3, [pc, #296]	; (8f14 <Water_Level_Task+0x270>)
    8dec:	4798      	blx	r3
    8dee:	0003      	movs	r3, r0
    8df0:	7023      	strb	r3, [r4, #0]
			
			if (factory_settings_parameter_struct.ENABLE_GP)
    8df2:	4b42      	ldr	r3, [pc, #264]	; (8efc <Water_Level_Task+0x258>)
    8df4:	791b      	ldrb	r3, [r3, #4]
    8df6:	2b00      	cmp	r3, #0
    8df8:	d005      	beq.n	8e06 <Water_Level_Task+0x162>
			{
				oLevel =getOverHeadWaterSensorState();
    8dfa:	230d      	movs	r3, #13
    8dfc:	18fc      	adds	r4, r7, r3
    8dfe:	4b46      	ldr	r3, [pc, #280]	; (8f18 <Water_Level_Task+0x274>)
    8e00:	4798      	blx	r3
    8e02:	0003      	movs	r3, r0
    8e04:	7023      	strb	r3, [r4, #0]
			}
			
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8e06:	4b3d      	ldr	r3, [pc, #244]	; (8efc <Water_Level_Task+0x258>)
    8e08:	791b      	ldrb	r3, [r3, #4]
    8e0a:	2b01      	cmp	r3, #1
    8e0c:	d125      	bne.n	8e5a <Water_Level_Task+0x1b6>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
    8e0e:	4b36      	ldr	r3, [pc, #216]	; (8ee8 <Water_Level_Task+0x244>)
    8e10:	781b      	ldrb	r3, [r3, #0]
    8e12:	220b      	movs	r2, #11
    8e14:	18ba      	adds	r2, r7, r2
    8e16:	7812      	ldrb	r2, [r2, #0]
    8e18:	429a      	cmp	r2, r3
    8e1a:	d006      	beq.n	8e2a <Water_Level_Task+0x186>
    8e1c:	4b33      	ldr	r3, [pc, #204]	; (8eec <Water_Level_Task+0x248>)
    8e1e:	781b      	ldrb	r3, [r3, #0]
    8e20:	220b      	movs	r2, #11
    8e22:	18ba      	adds	r2, r7, r2
    8e24:	7812      	ldrb	r2, [r2, #0]
    8e26:	429a      	cmp	r2, r3
    8e28:	d00f      	beq.n	8e4a <Water_Level_Task+0x1a6>
    8e2a:	4b31      	ldr	r3, [pc, #196]	; (8ef0 <Water_Level_Task+0x24c>)
    8e2c:	781b      	ldrb	r3, [r3, #0]
    8e2e:	b2db      	uxtb	r3, r3
    8e30:	220d      	movs	r2, #13
    8e32:	18ba      	adds	r2, r7, r2
    8e34:	7812      	ldrb	r2, [r2, #0]
    8e36:	429a      	cmp	r2, r3
    8e38:	d009      	beq.n	8e4e <Water_Level_Task+0x1aa>
    8e3a:	4b2e      	ldr	r3, [pc, #184]	; (8ef4 <Water_Level_Task+0x250>)
    8e3c:	781b      	ldrb	r3, [r3, #0]
    8e3e:	b2db      	uxtb	r3, r3
    8e40:	220d      	movs	r2, #13
    8e42:	18ba      	adds	r2, r7, r2
    8e44:	7812      	ldrb	r2, [r2, #0]
    8e46:	429a      	cmp	r2, r3
    8e48:	d101      	bne.n	8e4e <Water_Level_Task+0x1aa>
    8e4a:	2301      	movs	r3, #1
    8e4c:	e000      	b.n	8e50 <Water_Level_Task+0x1ac>
    8e4e:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8e50:	1c1a      	adds	r2, r3, #0
    8e52:	2301      	movs	r3, #1
    8e54:	4013      	ands	r3, r2
    8e56:	b2db      	uxtb	r3, r3
    8e58:	e014      	b.n	8e84 <Water_Level_Task+0x1e0>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
    8e5a:	4b23      	ldr	r3, [pc, #140]	; (8ee8 <Water_Level_Task+0x244>)
    8e5c:	781b      	ldrb	r3, [r3, #0]
    8e5e:	220b      	movs	r2, #11
    8e60:	18ba      	adds	r2, r7, r2
    8e62:	7812      	ldrb	r2, [r2, #0]
    8e64:	429a      	cmp	r2, r3
    8e66:	d008      	beq.n	8e7a <Water_Level_Task+0x1d6>
    8e68:	4b20      	ldr	r3, [pc, #128]	; (8eec <Water_Level_Task+0x248>)
    8e6a:	781b      	ldrb	r3, [r3, #0]
    8e6c:	220b      	movs	r2, #11
    8e6e:	18ba      	adds	r2, r7, r2
    8e70:	7812      	ldrb	r2, [r2, #0]
    8e72:	429a      	cmp	r2, r3
    8e74:	d101      	bne.n	8e7a <Water_Level_Task+0x1d6>
    8e76:	2301      	movs	r3, #1
    8e78:	e000      	b.n	8e7c <Water_Level_Task+0x1d8>
    8e7a:	2300      	movs	r3, #0
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    8e7c:	1c1a      	adds	r2, r3, #0
    8e7e:	2301      	movs	r3, #1
    8e80:	4013      	ands	r3, r2
    8e82:	b2db      	uxtb	r3, r3
    8e84:	2b00      	cmp	r3, #0
    8e86:	d010      	beq.n	8eaa <Water_Level_Task+0x206>
			)
			{
				tempWaterEventCount++;
    8e88:	4b1b      	ldr	r3, [pc, #108]	; (8ef8 <Water_Level_Task+0x254>)
    8e8a:	781b      	ldrb	r3, [r3, #0]
    8e8c:	3301      	adds	r3, #1
    8e8e:	b2da      	uxtb	r2, r3
    8e90:	4b19      	ldr	r3, [pc, #100]	; (8ef8 <Water_Level_Task+0x254>)
    8e92:	701a      	strb	r2, [r3, #0]
				if(tempWaterEventCount>9)
    8e94:	4b18      	ldr	r3, [pc, #96]	; (8ef8 <Water_Level_Task+0x254>)
    8e96:	781b      	ldrb	r3, [r3, #0]
    8e98:	2b09      	cmp	r3, #9
    8e9a:	d909      	bls.n	8eb0 <Water_Level_Task+0x20c>
				{
					operateOnWaterEvent();
    8e9c:	4b1f      	ldr	r3, [pc, #124]	; (8f1c <Water_Level_Task+0x278>)
    8e9e:	4798      	blx	r3
					result=true;
    8ea0:	230c      	movs	r3, #12
    8ea2:	18fb      	adds	r3, r7, r3
    8ea4:	2201      	movs	r2, #1
    8ea6:	701a      	strb	r2, [r3, #0]
    8ea8:	e002      	b.n	8eb0 <Water_Level_Task+0x20c>
				}
			}
			else
			{
				tempWaterEventCount=0;
    8eaa:	4b13      	ldr	r3, [pc, #76]	; (8ef8 <Water_Level_Task+0x254>)
    8eac:	2200      	movs	r2, #0
    8eae:	701a      	strb	r2, [r3, #0]
			}
			tempUndergroundLevel=uLevel;
    8eb0:	4b0e      	ldr	r3, [pc, #56]	; (8eec <Water_Level_Task+0x248>)
    8eb2:	220b      	movs	r2, #11
    8eb4:	18ba      	adds	r2, r7, r2
    8eb6:	7812      	ldrb	r2, [r2, #0]
    8eb8:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
    8eba:	4b10      	ldr	r3, [pc, #64]	; (8efc <Water_Level_Task+0x258>)
    8ebc:	791b      	ldrb	r3, [r3, #4]
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d009      	beq.n	8ed6 <Water_Level_Task+0x232>
			{
				tempOverheadLevel=oLevel;
    8ec2:	4b0c      	ldr	r3, [pc, #48]	; (8ef4 <Water_Level_Task+0x250>)
    8ec4:	220d      	movs	r2, #13
    8ec6:	18ba      	adds	r2, r7, r2
    8ec8:	7812      	ldrb	r2, [r2, #0]
    8eca:	701a      	strb	r2, [r3, #0]
    8ecc:	e003      	b.n	8ed6 <Water_Level_Task+0x232>
			}
		}
		else
		{
			vTaskDelay(5000/portTICK_PERIOD_MS);
    8ece:	4b14      	ldr	r3, [pc, #80]	; (8f20 <Water_Level_Task+0x27c>)
    8ed0:	0018      	movs	r0, r3
    8ed2:	4b14      	ldr	r3, [pc, #80]	; (8f24 <Water_Level_Task+0x280>)
    8ed4:	4798      	blx	r3
		}
		vTaskDelay(100/portTICK_PERIOD_MS);
    8ed6:	2064      	movs	r0, #100	; 0x64
    8ed8:	4b12      	ldr	r3, [pc, #72]	; (8f24 <Water_Level_Task+0x280>)
    8eda:	4798      	blx	r3
	{
    8edc:	e77a      	b.n	8dd4 <Water_Level_Task+0x130>
    8ede:	46c0      	nop			; (mov r8, r8)
    8ee0:	000087b5 	.word	0x000087b5
    8ee4:	00011ee9 	.word	0x00011ee9
    8ee8:	20000814 	.word	0x20000814
    8eec:	20000749 	.word	0x20000749
    8ef0:	20000768 	.word	0x20000768
    8ef4:	2000073a 	.word	0x2000073a
    8ef8:	20000764 	.word	0x20000764
    8efc:	20000628 	.word	0x20000628
    8f00:	20000700 	.word	0x20000700
    8f04:	200007b4 	.word	0x200007b4
    8f08:	20000788 	.word	0x20000788
    8f0c:	20000718 	.word	0x20000718
    8f10:	2000065c 	.word	0x2000065c
    8f14:	00008bb1 	.word	0x00008bb1
    8f18:	00008a81 	.word	0x00008a81
    8f1c:	00008f29 	.word	0x00008f29
    8f20:	00001388 	.word	0x00001388
    8f24:	0000f019 	.word	0x0000f019

00008f28 <operateOnWaterEvent>:
	}
}

void operateOnWaterEvent(void)
{
    8f28:	b580      	push	{r7, lr}
    8f2a:	b082      	sub	sp, #8
    8f2c:	af00      	add	r7, sp, #0
	uint8_t uLevel = tempUndergroundLevel;
    8f2e:	1dfb      	adds	r3, r7, #7
    8f30:	4abb      	ldr	r2, [pc, #748]	; (9220 <operateOnWaterEvent+0x2f8>)
    8f32:	7812      	ldrb	r2, [r2, #0]
    8f34:	701a      	strb	r2, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
    8f36:	1dbb      	adds	r3, r7, #6
    8f38:	4aba      	ldr	r2, [pc, #744]	; (9224 <operateOnWaterEvent+0x2fc>)
    8f3a:	7812      	ldrb	r2, [r2, #0]
    8f3c:	701a      	strb	r2, [r3, #0]
	if(uLevel == undergroundLevel)
    8f3e:	4bba      	ldr	r3, [pc, #744]	; (9228 <operateOnWaterEvent+0x300>)
    8f40:	781b      	ldrb	r3, [r3, #0]
    8f42:	1dfa      	adds	r2, r7, #7
    8f44:	7812      	ldrb	r2, [r2, #0]
    8f46:	429a      	cmp	r2, r3
    8f48:	d10c      	bne.n	8f64 <operateOnWaterEvent+0x3c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    8f4a:	4bb8      	ldr	r3, [pc, #736]	; (922c <operateOnWaterEvent+0x304>)
    8f4c:	791b      	ldrb	r3, [r3, #4]
    8f4e:	2b00      	cmp	r3, #0
    8f50:	d000      	beq.n	8f54 <operateOnWaterEvent+0x2c>
    8f52:	e15e      	b.n	9212 <operateOnWaterEvent+0x2ea>
		{
			return;
		}
		else
		{
			if(oLevel==overheadLevel)
    8f54:	4bb6      	ldr	r3, [pc, #728]	; (9230 <operateOnWaterEvent+0x308>)
    8f56:	781b      	ldrb	r3, [r3, #0]
    8f58:	b2db      	uxtb	r3, r3
    8f5a:	1dba      	adds	r2, r7, #6
    8f5c:	7812      	ldrb	r2, [r2, #0]
    8f5e:	429a      	cmp	r2, r3
    8f60:	d100      	bne.n	8f64 <operateOnWaterEvent+0x3c>
    8f62:	e158      	b.n	9216 <operateOnWaterEvent+0x2ee>
			{
				return;
			}
		}
	}
	if (getMotorState())
    8f64:	4bb3      	ldr	r3, [pc, #716]	; (9234 <operateOnWaterEvent+0x30c>)
    8f66:	4798      	blx	r3
    8f68:	1e03      	subs	r3, r0, #0
    8f6a:	d100      	bne.n	8f6e <operateOnWaterEvent+0x46>
    8f6c:	e0c3      	b.n	90f6 <operateOnWaterEvent+0x1ce>
	{
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
    8f6e:	1dfb      	adds	r3, r7, #7
    8f70:	781b      	ldrb	r3, [r3, #0]
    8f72:	2b00      	cmp	r3, #0
    8f74:	d122      	bne.n	8fbc <operateOnWaterEvent+0x94>
    8f76:	4bac      	ldr	r3, [pc, #688]	; (9228 <operateOnWaterEvent+0x300>)
    8f78:	781b      	ldrb	r3, [r3, #0]
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d01e      	beq.n	8fbc <operateOnWaterEvent+0x94>
		{
			stopMotor(false,true,false);
    8f7e:	2200      	movs	r2, #0
    8f80:	2101      	movs	r1, #1
    8f82:	2000      	movs	r0, #0
    8f84:	4bac      	ldr	r3, [pc, #688]	; (9238 <operateOnWaterEvent+0x310>)
    8f86:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
    8f88:	2049      	movs	r0, #73	; 0x49
    8f8a:	4bac      	ldr	r3, [pc, #688]	; (923c <operateOnWaterEvent+0x314>)
    8f8c:	4798      	blx	r3
    8f8e:	0003      	movs	r3, r0
    8f90:	001a      	movs	r2, r3
    8f92:	4bab      	ldr	r3, [pc, #684]	; (9240 <operateOnWaterEvent+0x318>)
    8f94:	731a      	strb	r2, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8f96:	4ba5      	ldr	r3, [pc, #660]	; (922c <operateOnWaterEvent+0x304>)
    8f98:	78db      	ldrb	r3, [r3, #3]
    8f9a:	2b00      	cmp	r3, #0
    8f9c:	d100      	bne.n	8fa0 <operateOnWaterEvent+0x78>
    8f9e:	e071      	b.n	9084 <operateOnWaterEvent+0x15c>
			{
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
    8fa0:	4ba8      	ldr	r3, [pc, #672]	; (9244 <operateOnWaterEvent+0x31c>)
    8fa2:	795b      	ldrb	r3, [r3, #5]
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	d100      	bne.n	8faa <operateOnWaterEvent+0x82>
    8fa8:	e06c      	b.n	9084 <operateOnWaterEvent+0x15c>
    8faa:	4b9f      	ldr	r3, [pc, #636]	; (9228 <operateOnWaterEvent+0x300>)
    8fac:	781b      	ldrb	r3, [r3, #0]
    8fae:	2b01      	cmp	r3, #1
    8fb0:	d800      	bhi.n	8fb4 <operateOnWaterEvent+0x8c>
    8fb2:	e067      	b.n	9084 <operateOnWaterEvent+0x15c>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
    8fb4:	4ba4      	ldr	r3, [pc, #656]	; (9248 <operateOnWaterEvent+0x320>)
    8fb6:	2201      	movs	r2, #1
    8fb8:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8fba:	e063      	b.n	9084 <operateOnWaterEvent+0x15c>
				}
			}
		}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
    8fbc:	1dfb      	adds	r3, r7, #7
    8fbe:	781b      	ldrb	r3, [r3, #0]
    8fc0:	2b03      	cmp	r3, #3
    8fc2:	d12f      	bne.n	9024 <operateOnWaterEvent+0xfc>
    8fc4:	4b98      	ldr	r3, [pc, #608]	; (9228 <operateOnWaterEvent+0x300>)
    8fc6:	781b      	ldrb	r3, [r3, #0]
    8fc8:	2b02      	cmp	r3, #2
    8fca:	d82b      	bhi.n	9024 <operateOnWaterEvent+0xfc>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
    8fcc:	4b97      	ldr	r3, [pc, #604]	; (922c <operateOnWaterEvent+0x304>)
    8fce:	78db      	ldrb	r3, [r3, #3]
    8fd0:	2b00      	cmp	r3, #0
    8fd2:	d05a      	beq.n	908a <operateOnWaterEvent+0x162>
			{
				if (m2m_Numbers_struct.m2mSetting)
    8fd4:	4b9b      	ldr	r3, [pc, #620]	; (9244 <operateOnWaterEvent+0x31c>)
    8fd6:	795b      	ldrb	r3, [r3, #5]
    8fd8:	2b00      	cmp	r3, #0
    8fda:	d003      	beq.n	8fe4 <operateOnWaterEvent+0xbc>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
    8fdc:	4b9a      	ldr	r3, [pc, #616]	; (9248 <operateOnWaterEvent+0x320>)
    8fde:	2201      	movs	r2, #1
    8fe0:	705a      	strb	r2, [r3, #1]
    8fe2:	e006      	b.n	8ff2 <operateOnWaterEvent+0xca>
				}
				else
				{
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
    8fe4:	2045      	movs	r0, #69	; 0x45
    8fe6:	4b95      	ldr	r3, [pc, #596]	; (923c <operateOnWaterEvent+0x314>)
    8fe8:	4798      	blx	r3
    8fea:	0003      	movs	r3, r0
    8fec:	001a      	movs	r2, r3
    8fee:	4b94      	ldr	r3, [pc, #592]	; (9240 <operateOnWaterEvent+0x318>)
    8ff0:	73da      	strb	r2, [r3, #15]
				}
				if (user_settings_parameter_struct.preventOverFlowAddress)
    8ff2:	4b96      	ldr	r3, [pc, #600]	; (924c <operateOnWaterEvent+0x324>)
    8ff4:	7f9b      	ldrb	r3, [r3, #30]
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d00c      	beq.n	9014 <operateOnWaterEvent+0xec>
				{
					stopMotor(false,true,false);
    8ffa:	2200      	movs	r2, #0
    8ffc:	2101      	movs	r1, #1
    8ffe:	2000      	movs	r0, #0
    9000:	4b8d      	ldr	r3, [pc, #564]	; (9238 <operateOnWaterEvent+0x310>)
    9002:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
    9004:	2048      	movs	r0, #72	; 0x48
    9006:	4b8d      	ldr	r3, [pc, #564]	; (923c <operateOnWaterEvent+0x314>)
    9008:	4798      	blx	r3
    900a:	0003      	movs	r3, r0
    900c:	001a      	movs	r2, r3
    900e:	4b8c      	ldr	r3, [pc, #560]	; (9240 <operateOnWaterEvent+0x318>)
    9010:	739a      	strb	r2, [r3, #14]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    9012:	e03a      	b.n	908a <operateOnWaterEvent+0x162>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    9014:	2045      	movs	r0, #69	; 0x45
    9016:	4b89      	ldr	r3, [pc, #548]	; (923c <operateOnWaterEvent+0x314>)
    9018:	4798      	blx	r3
    901a:	0003      	movs	r3, r0
    901c:	001a      	movs	r2, r3
    901e:	4b88      	ldr	r3, [pc, #544]	; (9240 <operateOnWaterEvent+0x318>)
    9020:	73da      	strb	r2, [r3, #15]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    9022:	e032      	b.n	908a <operateOnWaterEvent+0x162>
				}
			}
		}
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
    9024:	1dfb      	adds	r3, r7, #7
    9026:	781b      	ldrb	r3, [r3, #0]
    9028:	2b01      	cmp	r3, #1
    902a:	d11b      	bne.n	9064 <operateOnWaterEvent+0x13c>
    902c:	4b7e      	ldr	r3, [pc, #504]	; (9228 <operateOnWaterEvent+0x300>)
    902e:	781b      	ldrb	r3, [r3, #0]
    9030:	2b01      	cmp	r3, #1
    9032:	d917      	bls.n	9064 <operateOnWaterEvent+0x13c>
		{
			if (factory_settings_parameter_struct.ENABLE_M2M)
    9034:	4b7d      	ldr	r3, [pc, #500]	; (922c <operateOnWaterEvent+0x304>)
    9036:	78db      	ldrb	r3, [r3, #3]
    9038:	2b00      	cmp	r3, #0
    903a:	d007      	beq.n	904c <operateOnWaterEvent+0x124>
			{
				if (m2m_Numbers_struct.m2mSetting)
    903c:	4b81      	ldr	r3, [pc, #516]	; (9244 <operateOnWaterEvent+0x31c>)
    903e:	795b      	ldrb	r3, [r3, #5]
    9040:	2b00      	cmp	r3, #0
    9042:	d021      	beq.n	9088 <operateOnWaterEvent+0x160>
				{
					m2mEvent_arr[0] = ME_WAITREGISTER;
    9044:	4b80      	ldr	r3, [pc, #512]	; (9248 <operateOnWaterEvent+0x320>)
    9046:	2201      	movs	r2, #1
    9048:	701a      	strb	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    904a:	e01d      	b.n	9088 <operateOnWaterEvent+0x160>
				}
			}
			else
			{
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
    904c:	4b77      	ldr	r3, [pc, #476]	; (922c <operateOnWaterEvent+0x304>)
    904e:	79db      	ldrb	r3, [r3, #7]
    9050:	2b00      	cmp	r3, #0
    9052:	d019      	beq.n	9088 <operateOnWaterEvent+0x160>
				{
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
    9054:	2044      	movs	r0, #68	; 0x44
    9056:	4b79      	ldr	r3, [pc, #484]	; (923c <operateOnWaterEvent+0x314>)
    9058:	4798      	blx	r3
    905a:	0003      	movs	r3, r0
    905c:	001a      	movs	r2, r3
    905e:	4b78      	ldr	r3, [pc, #480]	; (9240 <operateOnWaterEvent+0x318>)
    9060:	735a      	strb	r2, [r3, #13]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    9062:	e011      	b.n	9088 <operateOnWaterEvent+0x160>
				}
			}
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
    9064:	1dfb      	adds	r3, r7, #7
    9066:	781b      	ldrb	r3, [r3, #0]
    9068:	2b02      	cmp	r3, #2
    906a:	d10e      	bne.n	908a <operateOnWaterEvent+0x162>
    906c:	4b6e      	ldr	r3, [pc, #440]	; (9228 <operateOnWaterEvent+0x300>)
    906e:	781b      	ldrb	r3, [r3, #0]
    9070:	2b01      	cmp	r3, #1
    9072:	d80a      	bhi.n	908a <operateOnWaterEvent+0x162>
		{
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
    9074:	205a      	movs	r0, #90	; 0x5a
    9076:	4b71      	ldr	r3, [pc, #452]	; (923c <operateOnWaterEvent+0x314>)
    9078:	4798      	blx	r3
    907a:	0003      	movs	r3, r0
    907c:	001a      	movs	r2, r3
    907e:	4b70      	ldr	r3, [pc, #448]	; (9240 <operateOnWaterEvent+0x318>)
    9080:	741a      	strb	r2, [r3, #16]
    9082:	e002      	b.n	908a <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
    9084:	46c0      	nop			; (mov r8, r8)
    9086:	e000      	b.n	908a <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_M2M)
    9088:	46c0      	nop			; (mov r8, r8)
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
    908a:	4b68      	ldr	r3, [pc, #416]	; (922c <operateOnWaterEvent+0x304>)
    908c:	791b      	ldrb	r3, [r3, #4]
    908e:	2b00      	cmp	r3, #0
    9090:	d100      	bne.n	9094 <operateOnWaterEvent+0x16c>
    9092:	e0af      	b.n	91f4 <operateOnWaterEvent+0x2cc>
		{
			if(oLevel!=overheadLevel)
    9094:	4b66      	ldr	r3, [pc, #408]	; (9230 <operateOnWaterEvent+0x308>)
    9096:	781b      	ldrb	r3, [r3, #0]
    9098:	b2db      	uxtb	r3, r3
    909a:	1dba      	adds	r2, r7, #6
    909c:	7812      	ldrb	r2, [r2, #0]
    909e:	429a      	cmp	r2, r3
    90a0:	d100      	bne.n	90a4 <operateOnWaterEvent+0x17c>
    90a2:	e0a7      	b.n	91f4 <operateOnWaterEvent+0x2cc>
			{
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
    90a4:	1dbb      	adds	r3, r7, #6
    90a6:	781b      	ldrb	r3, [r3, #0]
    90a8:	2b02      	cmp	r3, #2
    90aa:	d111      	bne.n	90d0 <operateOnWaterEvent+0x1a8>
    90ac:	4b60      	ldr	r3, [pc, #384]	; (9230 <operateOnWaterEvent+0x308>)
    90ae:	781b      	ldrb	r3, [r3, #0]
    90b0:	b2db      	uxtb	r3, r3
    90b2:	2b01      	cmp	r3, #1
    90b4:	d80c      	bhi.n	90d0 <operateOnWaterEvent+0x1a8>
				{
					stopMotor(false,true,false);
    90b6:	2200      	movs	r2, #0
    90b8:	2101      	movs	r1, #1
    90ba:	2000      	movs	r0, #0
    90bc:	4b5e      	ldr	r3, [pc, #376]	; (9238 <operateOnWaterEvent+0x310>)
    90be:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
    90c0:	2056      	movs	r0, #86	; 0x56
    90c2:	4b5e      	ldr	r3, [pc, #376]	; (923c <operateOnWaterEvent+0x314>)
    90c4:	4798      	blx	r3
    90c6:	0003      	movs	r3, r0
    90c8:	001a      	movs	r2, r3
    90ca:	4b5d      	ldr	r3, [pc, #372]	; (9240 <operateOnWaterEvent+0x318>)
    90cc:	745a      	strb	r2, [r3, #17]
    90ce:	e091      	b.n	91f4 <operateOnWaterEvent+0x2cc>
				}
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
    90d0:	1dbb      	adds	r3, r7, #6
    90d2:	781b      	ldrb	r3, [r3, #0]
    90d4:	2b00      	cmp	r3, #0
    90d6:	d000      	beq.n	90da <operateOnWaterEvent+0x1b2>
    90d8:	e08c      	b.n	91f4 <operateOnWaterEvent+0x2cc>
    90da:	4b55      	ldr	r3, [pc, #340]	; (9230 <operateOnWaterEvent+0x308>)
    90dc:	781b      	ldrb	r3, [r3, #0]
    90de:	b2db      	uxtb	r3, r3
    90e0:	2b00      	cmp	r3, #0
    90e2:	d100      	bne.n	90e6 <operateOnWaterEvent+0x1be>
    90e4:	e086      	b.n	91f4 <operateOnWaterEvent+0x2cc>
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM , overhead tank empty.
    90e6:	2057      	movs	r0, #87	; 0x57
    90e8:	4b54      	ldr	r3, [pc, #336]	; (923c <operateOnWaterEvent+0x314>)
    90ea:	4798      	blx	r3
    90ec:	0003      	movs	r3, r0
    90ee:	001a      	movs	r2, r3
    90f0:	4b53      	ldr	r3, [pc, #332]	; (9240 <operateOnWaterEvent+0x318>)
    90f2:	749a      	strb	r2, [r3, #18]
    90f4:	e07e      	b.n	91f4 <operateOnWaterEvent+0x2cc>
			}
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_M2M)
    90f6:	4b4d      	ldr	r3, [pc, #308]	; (922c <operateOnWaterEvent+0x304>)
    90f8:	78db      	ldrb	r3, [r3, #3]
    90fa:	2b00      	cmp	r3, #0
    90fc:	d027      	beq.n	914e <operateOnWaterEvent+0x226>
		{
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
    90fe:	4b51      	ldr	r3, [pc, #324]	; (9244 <operateOnWaterEvent+0x31c>)
    9100:	795b      	ldrb	r3, [r3, #5]
    9102:	2b00      	cmp	r3, #0
    9104:	d00b      	beq.n	911e <operateOnWaterEvent+0x1f6>
    9106:	1dfb      	adds	r3, r7, #7
    9108:	781b      	ldrb	r3, [r3, #0]
    910a:	2b01      	cmp	r3, #1
    910c:	d807      	bhi.n	911e <operateOnWaterEvent+0x1f6>
    910e:	4b46      	ldr	r3, [pc, #280]	; (9228 <operateOnWaterEvent+0x300>)
    9110:	781b      	ldrb	r3, [r3, #0]
    9112:	2b01      	cmp	r3, #1
    9114:	d903      	bls.n	911e <operateOnWaterEvent+0x1f6>
			{
				m2mEvent_arr[0] = ME_WAITREGISTER;
    9116:	4b4c      	ldr	r3, [pc, #304]	; (9248 <operateOnWaterEvent+0x320>)
    9118:	2201      	movs	r2, #1
    911a:	701a      	strb	r2, [r3, #0]
    911c:	e04b      	b.n	91b6 <operateOnWaterEvent+0x28e>
			}
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
    911e:	1dfb      	adds	r3, r7, #7
    9120:	781b      	ldrb	r3, [r3, #0]
    9122:	2b03      	cmp	r3, #3
    9124:	d147      	bne.n	91b6 <operateOnWaterEvent+0x28e>
    9126:	4b40      	ldr	r3, [pc, #256]	; (9228 <operateOnWaterEvent+0x300>)
    9128:	781b      	ldrb	r3, [r3, #0]
    912a:	2b02      	cmp	r3, #2
    912c:	d843      	bhi.n	91b6 <operateOnWaterEvent+0x28e>
			{
				if(m2m_Numbers_struct.m2mSetting)
    912e:	4b45      	ldr	r3, [pc, #276]	; (9244 <operateOnWaterEvent+0x31c>)
    9130:	795b      	ldrb	r3, [r3, #5]
    9132:	2b00      	cmp	r3, #0
    9134:	d003      	beq.n	913e <operateOnWaterEvent+0x216>
				{
					m2mEvent_arr[1] = ME_WAITREGISTER;
    9136:	4b44      	ldr	r3, [pc, #272]	; (9248 <operateOnWaterEvent+0x320>)
    9138:	2201      	movs	r2, #1
    913a:	705a      	strb	r2, [r3, #1]
    913c:	e03b      	b.n	91b6 <operateOnWaterEvent+0x28e>
				}
				else
				{
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    913e:	2045      	movs	r0, #69	; 0x45
    9140:	4b3e      	ldr	r3, [pc, #248]	; (923c <operateOnWaterEvent+0x314>)
    9142:	4798      	blx	r3
    9144:	0003      	movs	r3, r0
    9146:	001a      	movs	r2, r3
    9148:	4b3d      	ldr	r3, [pc, #244]	; (9240 <operateOnWaterEvent+0x318>)
    914a:	73da      	strb	r2, [r3, #15]
    914c:	e033      	b.n	91b6 <operateOnWaterEvent+0x28e>
				}
			}
		}
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
    914e:	1dfb      	adds	r3, r7, #7
    9150:	781b      	ldrb	r3, [r3, #0]
    9152:	2b03      	cmp	r3, #3
    9154:	d10b      	bne.n	916e <operateOnWaterEvent+0x246>
    9156:	4b34      	ldr	r3, [pc, #208]	; (9228 <operateOnWaterEvent+0x300>)
    9158:	781b      	ldrb	r3, [r3, #0]
    915a:	2b02      	cmp	r3, #2
    915c:	d807      	bhi.n	916e <operateOnWaterEvent+0x246>
		{
			simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    915e:	2045      	movs	r0, #69	; 0x45
    9160:	4b36      	ldr	r3, [pc, #216]	; (923c <operateOnWaterEvent+0x314>)
    9162:	4798      	blx	r3
    9164:	0003      	movs	r3, r0
    9166:	001a      	movs	r2, r3
    9168:	4b35      	ldr	r3, [pc, #212]	; (9240 <operateOnWaterEvent+0x318>)
    916a:	73da      	strb	r2, [r3, #15]
    916c:	e023      	b.n	91b6 <operateOnWaterEvent+0x28e>
		}
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
    916e:	1dfb      	adds	r3, r7, #7
    9170:	781b      	ldrb	r3, [r3, #0]
    9172:	2b02      	cmp	r3, #2
    9174:	d11f      	bne.n	91b6 <operateOnWaterEvent+0x28e>
    9176:	4b2c      	ldr	r3, [pc, #176]	; (9228 <operateOnWaterEvent+0x300>)
    9178:	781b      	ldrb	r3, [r3, #0]
    917a:	2b01      	cmp	r3, #1
    917c:	d81b      	bhi.n	91b6 <operateOnWaterEvent+0x28e>
		{
			if (factory_settings_parameter_struct.ENABLE_GP)
    917e:	4b2b      	ldr	r3, [pc, #172]	; (922c <operateOnWaterEvent+0x304>)
    9180:	791b      	ldrb	r3, [r3, #4]
    9182:	2b00      	cmp	r3, #0
    9184:	d00d      	beq.n	91a2 <operateOnWaterEvent+0x27a>
			{
				if (factory_settings_parameter_struct.DUAL_LEVEL)
    9186:	4b29      	ldr	r3, [pc, #164]	; (922c <operateOnWaterEvent+0x304>)
    9188:	799b      	ldrb	r3, [r3, #6]
    918a:	2b00      	cmp	r3, #0
    918c:	d009      	beq.n	91a2 <operateOnWaterEvent+0x27a>
				{
					if(oLevel<OVERHEADHIGHLEVEL)
    918e:	1dbb      	adds	r3, r7, #6
    9190:	781b      	ldrb	r3, [r3, #0]
    9192:	2b01      	cmp	r3, #1
    9194:	d805      	bhi.n	91a2 <operateOnWaterEvent+0x27a>
					{
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
    9196:	4b2d      	ldr	r3, [pc, #180]	; (924c <operateOnWaterEvent+0x324>)
    9198:	785b      	ldrb	r3, [r3, #1]
    919a:	2b00      	cmp	r3, #0
    919c:	d001      	beq.n	91a2 <operateOnWaterEvent+0x27a>
						{
							triggerAutoStart();
    919e:	4b2c      	ldr	r3, [pc, #176]	; (9250 <operateOnWaterEvent+0x328>)
    91a0:	4798      	blx	r3
						}
					}
				}
			}
			if (factory_settings_parameter_struct.DUAL_LEVEL)
    91a2:	4b22      	ldr	r3, [pc, #136]	; (922c <operateOnWaterEvent+0x304>)
    91a4:	799b      	ldrb	r3, [r3, #6]
    91a6:	2b00      	cmp	r3, #0
    91a8:	d005      	beq.n	91b6 <operateOnWaterEvent+0x28e>
			{
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
    91aa:	4b28      	ldr	r3, [pc, #160]	; (924c <operateOnWaterEvent+0x324>)
    91ac:	785b      	ldrb	r3, [r3, #1]
    91ae:	2b00      	cmp	r3, #0
    91b0:	d001      	beq.n	91b6 <operateOnWaterEvent+0x28e>
				{
					triggerAutoStart();
    91b2:	4b27      	ldr	r3, [pc, #156]	; (9250 <operateOnWaterEvent+0x328>)
    91b4:	4798      	blx	r3
				}
			}
		}
		if (factory_settings_parameter_struct.ENABLE_GP)
    91b6:	4b1d      	ldr	r3, [pc, #116]	; (922c <operateOnWaterEvent+0x304>)
    91b8:	791b      	ldrb	r3, [r3, #4]
    91ba:	2b00      	cmp	r3, #0
    91bc:	d01a      	beq.n	91f4 <operateOnWaterEvent+0x2cc>
		{
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
    91be:	1dbb      	adds	r3, r7, #6
    91c0:	781b      	ldrb	r3, [r3, #0]
    91c2:	2b00      	cmp	r3, #0
    91c4:	d116      	bne.n	91f4 <operateOnWaterEvent+0x2cc>
    91c6:	4b1a      	ldr	r3, [pc, #104]	; (9230 <operateOnWaterEvent+0x308>)
    91c8:	781b      	ldrb	r3, [r3, #0]
    91ca:	b2db      	uxtb	r3, r3
    91cc:	2b00      	cmp	r3, #0
    91ce:	d011      	beq.n	91f4 <operateOnWaterEvent+0x2cc>
    91d0:	1dfb      	adds	r3, r7, #7
    91d2:	781b      	ldrb	r3, [r3, #0]
    91d4:	2b00      	cmp	r3, #0
    91d6:	d00d      	beq.n	91f4 <operateOnWaterEvent+0x2cc>
			{
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
    91d8:	4b1c      	ldr	r3, [pc, #112]	; (924c <operateOnWaterEvent+0x324>)
    91da:	785b      	ldrb	r3, [r3, #1]
    91dc:	2b00      	cmp	r3, #0
    91de:	d002      	beq.n	91e6 <operateOnWaterEvent+0x2be>
				{
					triggerAutoStart();
    91e0:	4b1b      	ldr	r3, [pc, #108]	; (9250 <operateOnWaterEvent+0x328>)
    91e2:	4798      	blx	r3
    91e4:	e006      	b.n	91f4 <operateOnWaterEvent+0x2cc>
				}
				else
				{
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
    91e6:	2057      	movs	r0, #87	; 0x57
    91e8:	4b14      	ldr	r3, [pc, #80]	; (923c <operateOnWaterEvent+0x314>)
    91ea:	4798      	blx	r3
    91ec:	0003      	movs	r3, r0
    91ee:	001a      	movs	r2, r3
    91f0:	4b13      	ldr	r3, [pc, #76]	; (9240 <operateOnWaterEvent+0x318>)
    91f2:	749a      	strb	r2, [r3, #18]
				}
			}
		}
	}
	if (factory_settings_parameter_struct.ENABLE_GP)
    91f4:	4b0d      	ldr	r3, [pc, #52]	; (922c <operateOnWaterEvent+0x304>)
    91f6:	791b      	ldrb	r3, [r3, #4]
    91f8:	2b00      	cmp	r3, #0
    91fa:	d004      	beq.n	9206 <operateOnWaterEvent+0x2de>
	{
		updateOverheadLevel(oLevel);
    91fc:	1dbb      	adds	r3, r7, #6
    91fe:	781b      	ldrb	r3, [r3, #0]
    9200:	0018      	movs	r0, r3
    9202:	4b14      	ldr	r3, [pc, #80]	; (9254 <operateOnWaterEvent+0x32c>)
    9204:	4798      	blx	r3
	}
	updateUndergroundLevel(uLevel);
    9206:	1dfb      	adds	r3, r7, #7
    9208:	781b      	ldrb	r3, [r3, #0]
    920a:	0018      	movs	r0, r3
    920c:	4b12      	ldr	r3, [pc, #72]	; (9258 <operateOnWaterEvent+0x330>)
    920e:	4798      	blx	r3
    9210:	e002      	b.n	9218 <operateOnWaterEvent+0x2f0>
			return;
    9212:	46c0      	nop			; (mov r8, r8)
    9214:	e000      	b.n	9218 <operateOnWaterEvent+0x2f0>
				return;
    9216:	46c0      	nop			; (mov r8, r8)
}
    9218:	46bd      	mov	sp, r7
    921a:	b002      	add	sp, #8
    921c:	bd80      	pop	{r7, pc}
    921e:	46c0      	nop			; (mov r8, r8)
    9220:	20000749 	.word	0x20000749
    9224:	2000073a 	.word	0x2000073a
    9228:	20000814 	.word	0x20000814
    922c:	20000628 	.word	0x20000628
    9230:	20000768 	.word	0x20000768
    9234:	00009e8d 	.word	0x00009e8d
    9238:	0000a78d 	.word	0x0000a78d
    923c:	000046d1 	.word	0x000046d1
    9240:	20000700 	.word	0x20000700
    9244:	20000554 	.word	0x20000554
    9248:	20000788 	.word	0x20000788
    924c:	2000065c 	.word	0x2000065c
    9250:	0000a1ed 	.word	0x0000a1ed
    9254:	00008a61 	.word	0x00008a61
    9258:	00008b91 	.word	0x00008b91

0000925c <Configure_ADC0>:

void Configure_ADC0(void)
{
    925c:	b580      	push	{r7, lr}
    925e:	b08c      	sub	sp, #48	; 0x30
    9260:	af00      	add	r7, sp, #0
	struct adc_config config;
	adc_get_config_defaults(&config);
    9262:	003b      	movs	r3, r7
    9264:	0018      	movs	r0, r3
    9266:	4b15      	ldr	r3, [pc, #84]	; (92bc <Configure_ADC0+0x60>)
    9268:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
    926a:	003b      	movs	r3, r7
    926c:	2213      	movs	r2, #19
    926e:	731a      	strb	r2, [r3, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    9270:	003b      	movs	r3, r7
    9272:	22c0      	movs	r2, #192	; 0xc0
    9274:	0152      	lsls	r2, r2, #5
    9276:	81da      	strh	r2, [r3, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
    9278:	003b      	movs	r3, r7
    927a:	2203      	movs	r2, #3
    927c:	705a      	strb	r2, [r3, #1]
	config.clock_source   = GCLK_GENERATOR_3;
    927e:	003b      	movs	r3, r7
    9280:	2203      	movs	r2, #3
    9282:	701a      	strb	r2, [r3, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
    9284:	003b      	movs	r3, r7
    9286:	2200      	movs	r2, #0
    9288:	609a      	str	r2, [r3, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
    928a:	003b      	movs	r3, r7
    928c:	2200      	movs	r2, #0
    928e:	711a      	strb	r2, [r3, #4]
	
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
    9290:	003b      	movs	r3, r7
    9292:	2280      	movs	r2, #128	; 0x80
    9294:	00d2      	lsls	r2, r2, #3
    9296:	805a      	strh	r2, [r3, #2]
	
	config.run_in_standby = true;
    9298:	003b      	movs	r3, r7
    929a:	2201      	movs	r2, #1
    929c:	755a      	strb	r2, [r3, #21]
	
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
    929e:	003a      	movs	r2, r7
    92a0:	4907      	ldr	r1, [pc, #28]	; (92c0 <Configure_ADC0+0x64>)
    92a2:	4b08      	ldr	r3, [pc, #32]	; (92c4 <Configure_ADC0+0x68>)
    92a4:	0018      	movs	r0, r3
    92a6:	4b08      	ldr	r3, [pc, #32]	; (92c8 <Configure_ADC0+0x6c>)
    92a8:	4798      	blx	r3
	adc_enable(&adc_inst);
    92aa:	4b06      	ldr	r3, [pc, #24]	; (92c4 <Configure_ADC0+0x68>)
    92ac:	0018      	movs	r0, r3
    92ae:	4b07      	ldr	r3, [pc, #28]	; (92cc <Configure_ADC0+0x70>)
    92b0:	4798      	blx	r3
}
    92b2:	46c0      	nop			; (mov r8, r8)
    92b4:	46bd      	mov	sp, r7
    92b6:	b00c      	add	sp, #48	; 0x30
    92b8:	bd80      	pop	{r7, pc}
    92ba:	46c0      	nop			; (mov r8, r8)
    92bc:	0000c1c9 	.word	0x0000c1c9
    92c0:	42004000 	.word	0x42004000
    92c4:	200007d8 	.word	0x200007d8
    92c8:	0000c819 	.word	0x0000c819
    92cc:	0000861d 	.word	0x0000861d

000092d0 <Read_ADC0>:

uint32_t Read_ADC0(uint32_t adc_pin,uint16_t samples)
{
    92d0:	b580      	push	{r7, lr}
    92d2:	b084      	sub	sp, #16
    92d4:	af00      	add	r7, sp, #0
    92d6:	6078      	str	r0, [r7, #4]
    92d8:	000a      	movs	r2, r1
    92da:	1cbb      	adds	r3, r7, #2
    92dc:	801a      	strh	r2, [r3, #0]
	adc_set_positive_input(&adc_inst, adc_pin);
    92de:	687b      	ldr	r3, [r7, #4]
    92e0:	b2da      	uxtb	r2, r3
    92e2:	4b24      	ldr	r3, [pc, #144]	; (9374 <Read_ADC0+0xa4>)
    92e4:	0011      	movs	r1, r2
    92e6:	0018      	movs	r0, r3
    92e8:	4b23      	ldr	r3, [pc, #140]	; (9378 <Read_ADC0+0xa8>)
    92ea:	4798      	blx	r3
	uint16_t current_value = 0;
    92ec:	2308      	movs	r3, #8
    92ee:	18fb      	adds	r3, r7, r3
    92f0:	2200      	movs	r2, #0
    92f2:	801a      	strh	r2, [r3, #0]
	uint32_t total_value = 0;
    92f4:	2300      	movs	r3, #0
    92f6:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    92f8:	230a      	movs	r3, #10
    92fa:	18fb      	adds	r3, r7, r3
    92fc:	2200      	movs	r2, #0
    92fe:	801a      	strh	r2, [r3, #0]
    9300:	e026      	b.n	9350 <Read_ADC0+0x80>
	{
		current_value = 0;
    9302:	2308      	movs	r3, #8
    9304:	18fb      	adds	r3, r7, r3
    9306:	2200      	movs	r2, #0
    9308:	801a      	strh	r2, [r3, #0]
		adc_start_conversion(&adc_inst);
    930a:	4b1a      	ldr	r3, [pc, #104]	; (9374 <Read_ADC0+0xa4>)
    930c:	0018      	movs	r0, r3
    930e:	4b1b      	ldr	r3, [pc, #108]	; (937c <Read_ADC0+0xac>)
    9310:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
    9312:	46c0      	nop			; (mov r8, r8)
    9314:	4b17      	ldr	r3, [pc, #92]	; (9374 <Read_ADC0+0xa4>)
    9316:	0018      	movs	r0, r3
    9318:	4b19      	ldr	r3, [pc, #100]	; (9380 <Read_ADC0+0xb0>)
    931a:	4798      	blx	r3
    931c:	0002      	movs	r2, r0
    931e:	2301      	movs	r3, #1
    9320:	4013      	ands	r3, r2
    9322:	2b01      	cmp	r3, #1
    9324:	d1f6      	bne.n	9314 <Read_ADC0+0x44>
		adc_read(&adc_inst, &current_value);
    9326:	2308      	movs	r3, #8
    9328:	18fa      	adds	r2, r7, r3
    932a:	4b12      	ldr	r3, [pc, #72]	; (9374 <Read_ADC0+0xa4>)
    932c:	0011      	movs	r1, r2
    932e:	0018      	movs	r0, r3
    9330:	4b14      	ldr	r3, [pc, #80]	; (9384 <Read_ADC0+0xb4>)
    9332:	4798      	blx	r3
		total_value+=current_value;
    9334:	2308      	movs	r3, #8
    9336:	18fb      	adds	r3, r7, r3
    9338:	881b      	ldrh	r3, [r3, #0]
    933a:	001a      	movs	r2, r3
    933c:	68fb      	ldr	r3, [r7, #12]
    933e:	189b      	adds	r3, r3, r2
    9340:	60fb      	str	r3, [r7, #12]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    9342:	230a      	movs	r3, #10
    9344:	18fb      	adds	r3, r7, r3
    9346:	881a      	ldrh	r2, [r3, #0]
    9348:	230a      	movs	r3, #10
    934a:	18fb      	adds	r3, r7, r3
    934c:	3201      	adds	r2, #1
    934e:	801a      	strh	r2, [r3, #0]
    9350:	230a      	movs	r3, #10
    9352:	18fa      	adds	r2, r7, r3
    9354:	1cbb      	adds	r3, r7, #2
    9356:	8812      	ldrh	r2, [r2, #0]
    9358:	881b      	ldrh	r3, [r3, #0]
    935a:	429a      	cmp	r2, r3
    935c:	d3d1      	bcc.n	9302 <Read_ADC0+0x32>
	}
	
	return (total_value/samples);
    935e:	1cbb      	adds	r3, r7, #2
    9360:	881a      	ldrh	r2, [r3, #0]
    9362:	4b09      	ldr	r3, [pc, #36]	; (9388 <Read_ADC0+0xb8>)
    9364:	0011      	movs	r1, r2
    9366:	68f8      	ldr	r0, [r7, #12]
    9368:	4798      	blx	r3
    936a:	0003      	movs	r3, r0
}
    936c:	0018      	movs	r0, r3
    936e:	46bd      	mov	sp, r7
    9370:	b004      	add	sp, #16
    9372:	bd80      	pop	{r7, pc}
    9374:	200007d8 	.word	0x200007d8
    9378:	00008741 	.word	0x00008741
    937c:	0000867d 	.word	0x0000867d
    9380:	00008575 	.word	0x00008575
    9384:	000086c5 	.word	0x000086c5
    9388:	00015461 	.word	0x00015461

0000938c <Read_Voltage_ADC0>:


uint32_t Read_Voltage_ADC0(uint32_t adc_pin)
{
    938c:	b5f0      	push	{r4, r5, r6, r7, lr}
    938e:	b093      	sub	sp, #76	; 0x4c
    9390:	af00      	add	r7, sp, #0
    9392:	61f8      	str	r0, [r7, #28]
    9394:	466b      	mov	r3, sp
    9396:	61bb      	str	r3, [r7, #24]
	adc_set_positive_input(&adc_inst, adc_pin);
    9398:	69fb      	ldr	r3, [r7, #28]
    939a:	b2da      	uxtb	r2, r3
    939c:	4b7b      	ldr	r3, [pc, #492]	; (958c <Read_Voltage_ADC0+0x200>)
    939e:	0011      	movs	r1, r2
    93a0:	0018      	movs	r0, r3
    93a2:	4b7b      	ldr	r3, [pc, #492]	; (9590 <Read_Voltage_ADC0+0x204>)
    93a4:	4798      	blx	r3
	//read 500 samples
	
	uint16_t no_of_samples = 544;  //272 samples contain one full cycle
    93a6:	2324      	movs	r3, #36	; 0x24
    93a8:	2218      	movs	r2, #24
    93aa:	4694      	mov	ip, r2
    93ac:	44bc      	add	ip, r7
    93ae:	4463      	add	r3, ip
    93b0:	2288      	movs	r2, #136	; 0x88
    93b2:	0092      	lsls	r2, r2, #2
    93b4:	801a      	strh	r2, [r3, #0]
	uint16_t samples_buffer[no_of_samples];
    93b6:	2324      	movs	r3, #36	; 0x24
    93b8:	2218      	movs	r2, #24
    93ba:	4694      	mov	ip, r2
    93bc:	44bc      	add	ip, r7
    93be:	4463      	add	r3, ip
    93c0:	881b      	ldrh	r3, [r3, #0]
    93c2:	001a      	movs	r2, r3
    93c4:	3a01      	subs	r2, #1
    93c6:	63ba      	str	r2, [r7, #56]	; 0x38
    93c8:	60bb      	str	r3, [r7, #8]
    93ca:	2200      	movs	r2, #0
    93cc:	60fa      	str	r2, [r7, #12]
    93ce:	68b8      	ldr	r0, [r7, #8]
    93d0:	68f9      	ldr	r1, [r7, #12]
    93d2:	0002      	movs	r2, r0
    93d4:	0f12      	lsrs	r2, r2, #28
    93d6:	000e      	movs	r6, r1
    93d8:	0136      	lsls	r6, r6, #4
    93da:	617e      	str	r6, [r7, #20]
    93dc:	697e      	ldr	r6, [r7, #20]
    93de:	4316      	orrs	r6, r2
    93e0:	617e      	str	r6, [r7, #20]
    93e2:	0002      	movs	r2, r0
    93e4:	0112      	lsls	r2, r2, #4
    93e6:	613a      	str	r2, [r7, #16]
    93e8:	603b      	str	r3, [r7, #0]
    93ea:	2200      	movs	r2, #0
    93ec:	607a      	str	r2, [r7, #4]
    93ee:	6838      	ldr	r0, [r7, #0]
    93f0:	6879      	ldr	r1, [r7, #4]
    93f2:	0002      	movs	r2, r0
    93f4:	0f12      	lsrs	r2, r2, #28
    93f6:	000e      	movs	r6, r1
    93f8:	0135      	lsls	r5, r6, #4
    93fa:	4315      	orrs	r5, r2
    93fc:	0002      	movs	r2, r0
    93fe:	0114      	lsls	r4, r2, #4
    9400:	005b      	lsls	r3, r3, #1
    9402:	3301      	adds	r3, #1
    9404:	3307      	adds	r3, #7
    9406:	08db      	lsrs	r3, r3, #3
    9408:	00db      	lsls	r3, r3, #3
    940a:	466a      	mov	r2, sp
    940c:	1ad3      	subs	r3, r2, r3
    940e:	469d      	mov	sp, r3
    9410:	466b      	mov	r3, sp
    9412:	3301      	adds	r3, #1
    9414:	085b      	lsrs	r3, r3, #1
    9416:	005b      	lsls	r3, r3, #1
    9418:	637b      	str	r3, [r7, #52]	; 0x34
	for (uint16_t i=0;i<no_of_samples;i++)
    941a:	232e      	movs	r3, #46	; 0x2e
    941c:	2218      	movs	r2, #24
    941e:	4694      	mov	ip, r2
    9420:	44bc      	add	ip, r7
    9422:	4463      	add	r3, ip
    9424:	2200      	movs	r2, #0
    9426:	801a      	strh	r2, [r3, #0]
    9428:	e021      	b.n	946e <Read_Voltage_ADC0+0xe2>
	{
		adc_start_conversion(&adc_inst);
    942a:	4b58      	ldr	r3, [pc, #352]	; (958c <Read_Voltage_ADC0+0x200>)
    942c:	0018      	movs	r0, r3
    942e:	4b59      	ldr	r3, [pc, #356]	; (9594 <Read_Voltage_ADC0+0x208>)
    9430:	4798      	blx	r3
		while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
    9432:	46c0      	nop			; (mov r8, r8)
    9434:	232e      	movs	r3, #46	; 0x2e
    9436:	2218      	movs	r2, #24
    9438:	4694      	mov	ip, r2
    943a:	44bc      	add	ip, r7
    943c:	4463      	add	r3, ip
    943e:	881b      	ldrh	r3, [r3, #0]
    9440:	005b      	lsls	r3, r3, #1
    9442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9444:	18d2      	adds	r2, r2, r3
    9446:	4b51      	ldr	r3, [pc, #324]	; (958c <Read_Voltage_ADC0+0x200>)
    9448:	0011      	movs	r1, r2
    944a:	0018      	movs	r0, r3
    944c:	4b52      	ldr	r3, [pc, #328]	; (9598 <Read_Voltage_ADC0+0x20c>)
    944e:	4798      	blx	r3
    9450:	1e03      	subs	r3, r0, #0
    9452:	d1ef      	bne.n	9434 <Read_Voltage_ADC0+0xa8>
	for (uint16_t i=0;i<no_of_samples;i++)
    9454:	232e      	movs	r3, #46	; 0x2e
    9456:	2218      	movs	r2, #24
    9458:	4694      	mov	ip, r2
    945a:	44bc      	add	ip, r7
    945c:	4463      	add	r3, ip
    945e:	881a      	ldrh	r2, [r3, #0]
    9460:	232e      	movs	r3, #46	; 0x2e
    9462:	2118      	movs	r1, #24
    9464:	468c      	mov	ip, r1
    9466:	44bc      	add	ip, r7
    9468:	4463      	add	r3, ip
    946a:	3201      	adds	r2, #1
    946c:	801a      	strh	r2, [r3, #0]
    946e:	232e      	movs	r3, #46	; 0x2e
    9470:	2218      	movs	r2, #24
    9472:	18ba      	adds	r2, r7, r2
    9474:	18d2      	adds	r2, r2, r3
    9476:	2324      	movs	r3, #36	; 0x24
    9478:	2118      	movs	r1, #24
    947a:	468c      	mov	ip, r1
    947c:	44bc      	add	ip, r7
    947e:	4463      	add	r3, ip
    9480:	8812      	ldrh	r2, [r2, #0]
    9482:	881b      	ldrh	r3, [r3, #0]
    9484:	429a      	cmp	r2, r3
    9486:	d3d0      	bcc.n	942a <Read_Voltage_ADC0+0x9e>
		}
	}
	
	uint32_t square = 0;
    9488:	2300      	movs	r3, #0
    948a:	643b      	str	r3, [r7, #64]	; 0x40
	
	double  mean = 0.0;
    948c:	2300      	movs	r3, #0
    948e:	2400      	movs	r4, #0
    9490:	62bb      	str	r3, [r7, #40]	; 0x28
    9492:	62fc      	str	r4, [r7, #44]	; 0x2c
	
	double  root = 0.0;
    9494:	2300      	movs	r3, #0
    9496:	2400      	movs	r4, #0
    9498:	623b      	str	r3, [r7, #32]
    949a:	627c      	str	r4, [r7, #36]	; 0x24
	
	for (uint16_t i = 0; i < no_of_samples; i++)
    949c:	2326      	movs	r3, #38	; 0x26
    949e:	2218      	movs	r2, #24
    94a0:	4694      	mov	ip, r2
    94a2:	44bc      	add	ip, r7
    94a4:	4463      	add	r3, ip
    94a6:	2200      	movs	r2, #0
    94a8:	801a      	strh	r2, [r3, #0]
    94aa:	e032      	b.n	9512 <Read_Voltage_ADC0+0x186>
	{
		square += pow(samples_buffer[i], 2);
    94ac:	2326      	movs	r3, #38	; 0x26
    94ae:	2218      	movs	r2, #24
    94b0:	4694      	mov	ip, r2
    94b2:	44bc      	add	ip, r7
    94b4:	4463      	add	r3, ip
    94b6:	881a      	ldrh	r2, [r3, #0]
    94b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    94ba:	0052      	lsls	r2, r2, #1
    94bc:	5ad2      	ldrh	r2, [r2, r3]
    94be:	4b37      	ldr	r3, [pc, #220]	; (959c <Read_Voltage_ADC0+0x210>)
    94c0:	0010      	movs	r0, r2
    94c2:	4798      	blx	r3
    94c4:	2300      	movs	r3, #0
    94c6:	2480      	movs	r4, #128	; 0x80
    94c8:	05e4      	lsls	r4, r4, #23
    94ca:	001a      	movs	r2, r3
    94cc:	0023      	movs	r3, r4
    94ce:	4c34      	ldr	r4, [pc, #208]	; (95a0 <Read_Voltage_ADC0+0x214>)
    94d0:	47a0      	blx	r4
    94d2:	0005      	movs	r5, r0
    94d4:	000e      	movs	r6, r1
    94d6:	4b31      	ldr	r3, [pc, #196]	; (959c <Read_Voltage_ADC0+0x210>)
    94d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
    94da:	4798      	blx	r3
    94dc:	4c31      	ldr	r4, [pc, #196]	; (95a4 <Read_Voltage_ADC0+0x218>)
    94de:	002a      	movs	r2, r5
    94e0:	0033      	movs	r3, r6
    94e2:	47a0      	blx	r4
    94e4:	0003      	movs	r3, r0
    94e6:	000c      	movs	r4, r1
    94e8:	0019      	movs	r1, r3
    94ea:	0022      	movs	r2, r4
    94ec:	4b2e      	ldr	r3, [pc, #184]	; (95a8 <Read_Voltage_ADC0+0x21c>)
    94ee:	0008      	movs	r0, r1
    94f0:	0011      	movs	r1, r2
    94f2:	4798      	blx	r3
    94f4:	0003      	movs	r3, r0
    94f6:	643b      	str	r3, [r7, #64]	; 0x40
	for (uint16_t i = 0; i < no_of_samples; i++)
    94f8:	2326      	movs	r3, #38	; 0x26
    94fa:	2218      	movs	r2, #24
    94fc:	4694      	mov	ip, r2
    94fe:	44bc      	add	ip, r7
    9500:	4463      	add	r3, ip
    9502:	881a      	ldrh	r2, [r3, #0]
    9504:	2326      	movs	r3, #38	; 0x26
    9506:	2118      	movs	r1, #24
    9508:	468c      	mov	ip, r1
    950a:	44bc      	add	ip, r7
    950c:	4463      	add	r3, ip
    950e:	3201      	adds	r2, #1
    9510:	801a      	strh	r2, [r3, #0]
    9512:	2326      	movs	r3, #38	; 0x26
    9514:	2218      	movs	r2, #24
    9516:	18ba      	adds	r2, r7, r2
    9518:	18d2      	adds	r2, r2, r3
    951a:	2324      	movs	r3, #36	; 0x24
    951c:	2118      	movs	r1, #24
    951e:	468c      	mov	ip, r1
    9520:	44bc      	add	ip, r7
    9522:	4463      	add	r3, ip
    9524:	8812      	ldrh	r2, [r2, #0]
    9526:	881b      	ldrh	r3, [r3, #0]
    9528:	429a      	cmp	r2, r3
    952a:	d3bf      	bcc.n	94ac <Read_Voltage_ADC0+0x120>
	}
	
	mean = (square / (float)(no_of_samples));
    952c:	4b1f      	ldr	r3, [pc, #124]	; (95ac <Read_Voltage_ADC0+0x220>)
    952e:	6c38      	ldr	r0, [r7, #64]	; 0x40
    9530:	4798      	blx	r3
    9532:	1c04      	adds	r4, r0, #0
    9534:	2324      	movs	r3, #36	; 0x24
    9536:	2218      	movs	r2, #24
    9538:	4694      	mov	ip, r2
    953a:	44bc      	add	ip, r7
    953c:	4463      	add	r3, ip
    953e:	881a      	ldrh	r2, [r3, #0]
    9540:	4b1a      	ldr	r3, [pc, #104]	; (95ac <Read_Voltage_ADC0+0x220>)
    9542:	0010      	movs	r0, r2
    9544:	4798      	blx	r3
    9546:	1c02      	adds	r2, r0, #0
    9548:	4b19      	ldr	r3, [pc, #100]	; (95b0 <Read_Voltage_ADC0+0x224>)
    954a:	1c11      	adds	r1, r2, #0
    954c:	1c20      	adds	r0, r4, #0
    954e:	4798      	blx	r3
    9550:	1c03      	adds	r3, r0, #0
    9552:	1c1a      	adds	r2, r3, #0
    9554:	4b17      	ldr	r3, [pc, #92]	; (95b4 <Read_Voltage_ADC0+0x228>)
    9556:	1c10      	adds	r0, r2, #0
    9558:	4798      	blx	r3
    955a:	0003      	movs	r3, r0
    955c:	000c      	movs	r4, r1
    955e:	62bb      	str	r3, [r7, #40]	; 0x28
    9560:	62fc      	str	r4, [r7, #44]	; 0x2c
	
	// Calculate Root.
	root = sqrt(mean);
    9562:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9564:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    9566:	0018      	movs	r0, r3
    9568:	0021      	movs	r1, r4
    956a:	4b13      	ldr	r3, [pc, #76]	; (95b8 <Read_Voltage_ADC0+0x22c>)
    956c:	4798      	blx	r3
    956e:	0003      	movs	r3, r0
    9570:	000c      	movs	r4, r1
    9572:	623b      	str	r3, [r7, #32]
    9574:	627c      	str	r4, [r7, #36]	; 0x24
	
	return (uint32_t)root;
    9576:	4b0c      	ldr	r3, [pc, #48]	; (95a8 <Read_Voltage_ADC0+0x21c>)
    9578:	6a38      	ldr	r0, [r7, #32]
    957a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    957c:	4798      	blx	r3
    957e:	0003      	movs	r3, r0
    9580:	69ba      	ldr	r2, [r7, #24]
    9582:	4695      	mov	sp, r2
	//}
	//}
	//}
	//
	//return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
}
    9584:	0018      	movs	r0, r3
    9586:	46bd      	mov	sp, r7
    9588:	b013      	add	sp, #76	; 0x4c
    958a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    958c:	200007d8 	.word	0x200007d8
    9590:	00008741 	.word	0x00008741
    9594:	0000867d 	.word	0x0000867d
    9598:	000086c5 	.word	0x000086c5
    959c:	00017a55 	.word	0x00017a55
    95a0:	000141cd 	.word	0x000141cd
    95a4:	00015f75 	.word	0x00015f75
    95a8:	0001585d 	.word	0x0001585d
    95ac:	00015ee9 	.word	0x00015ee9
    95b0:	00015a19 	.word	0x00015a19
    95b4:	00017ac5 	.word	0x00017ac5
    95b8:	00014525 	.word	0x00014525

000095bc <autoSetCurrent>:

void autoSetCurrent(void)
{
    95bc:	b580      	push	{r7, lr}
    95be:	b084      	sub	sp, #16
    95c0:	af00      	add	r7, sp, #0
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
    95c2:	4b2e      	ldr	r3, [pc, #184]	; (967c <autoSetCurrent+0xc0>)
    95c4:	4798      	blx	r3
    95c6:	1e03      	subs	r3, r0, #0
    95c8:	d04e      	beq.n	9668 <autoSetCurrent+0xac>
    95ca:	4b2d      	ldr	r3, [pc, #180]	; (9680 <autoSetCurrent+0xc4>)
    95cc:	781b      	ldrb	r3, [r3, #0]
    95ce:	2201      	movs	r2, #1
    95d0:	4053      	eors	r3, r2
    95d2:	b2db      	uxtb	r3, r3
    95d4:	2b00      	cmp	r3, #0
    95d6:	d047      	beq.n	9668 <autoSetCurrent+0xac>
    95d8:	4b2a      	ldr	r3, [pc, #168]	; (9684 <autoSetCurrent+0xc8>)
    95da:	781b      	ldrb	r3, [r3, #0]
    95dc:	2201      	movs	r2, #1
    95de:	4053      	eors	r3, r2
    95e0:	b2db      	uxtb	r3, r3
    95e2:	2b00      	cmp	r3, #0
    95e4:	d040      	beq.n	9668 <autoSetCurrent+0xac>
    95e6:	4b28      	ldr	r3, [pc, #160]	; (9688 <autoSetCurrent+0xcc>)
    95e8:	781b      	ldrb	r3, [r3, #0]
    95ea:	2201      	movs	r2, #1
    95ec:	4053      	eors	r3, r2
    95ee:	b2db      	uxtb	r3, r3
    95f0:	2b00      	cmp	r3, #0
    95f2:	d039      	beq.n	9668 <autoSetCurrent+0xac>
    95f4:	4b25      	ldr	r3, [pc, #148]	; (968c <autoSetCurrent+0xd0>)
    95f6:	4798      	blx	r3
    95f8:	1e03      	subs	r3, r0, #0
    95fa:	d035      	beq.n	9668 <autoSetCurrent+0xac>
	{
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    95fc:	4b24      	ldr	r3, [pc, #144]	; (9690 <autoSetCurrent+0xd4>)
    95fe:	691b      	ldr	r3, [r3, #16]
    9600:	60fb      	str	r3, [r7, #12]
		//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
    9602:	68fb      	ldr	r3, [r7, #12]
    9604:	2bf9      	cmp	r3, #249	; 0xf9
    9606:	d806      	bhi.n	9616 <autoSetCurrent+0x5a>
		{
			setCurrentDetection(false);
    9608:	2000      	movs	r0, #0
    960a:	4b22      	ldr	r3, [pc, #136]	; (9694 <autoSetCurrent+0xd8>)
    960c:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
    960e:	2059      	movs	r0, #89	; 0x59
    9610:	4b21      	ldr	r3, [pc, #132]	; (9698 <autoSetCurrent+0xdc>)
    9612:	4798      	blx	r3
			return;
    9614:	e02e      	b.n	9674 <autoSetCurrent+0xb8>
		}
		
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
    9616:	4b21      	ldr	r3, [pc, #132]	; (969c <autoSetCurrent+0xe0>)
    9618:	7f1b      	ldrb	r3, [r3, #28]
    961a:	001a      	movs	r2, r3
    961c:	68fb      	ldr	r3, [r7, #12]
    961e:	435a      	muls	r2, r3
    9620:	4b1f      	ldr	r3, [pc, #124]	; (96a0 <autoSetCurrent+0xe4>)
    9622:	2164      	movs	r1, #100	; 0x64
    9624:	0010      	movs	r0, r2
    9626:	4798      	blx	r3
    9628:	0003      	movs	r3, r0
    962a:	60bb      	str	r3, [r7, #8]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
    962c:	4b1b      	ldr	r3, [pc, #108]	; (969c <autoSetCurrent+0xe0>)
    962e:	7f5b      	ldrb	r3, [r3, #29]
    9630:	001a      	movs	r2, r3
    9632:	68fb      	ldr	r3, [r7, #12]
    9634:	435a      	muls	r2, r3
    9636:	4b1a      	ldr	r3, [pc, #104]	; (96a0 <autoSetCurrent+0xe4>)
    9638:	2164      	movs	r1, #100	; 0x64
    963a:	0010      	movs	r0, r2
    963c:	4798      	blx	r3
    963e:	0003      	movs	r3, r0
    9640:	607b      	str	r3, [r7, #4]

		setNormalLoadValue(ADCcurrent);
    9642:	68fb      	ldr	r3, [r7, #12]
    9644:	0018      	movs	r0, r3
    9646:	4b17      	ldr	r3, [pc, #92]	; (96a4 <autoSetCurrent+0xe8>)
    9648:	4798      	blx	r3
		setUnderloadValue(tempUnder);
    964a:	68bb      	ldr	r3, [r7, #8]
    964c:	0018      	movs	r0, r3
    964e:	4b16      	ldr	r3, [pc, #88]	; (96a8 <autoSetCurrent+0xec>)
    9650:	4798      	blx	r3
		setOverloadValue(tempOver);
    9652:	687b      	ldr	r3, [r7, #4]
    9654:	0018      	movs	r0, r3
    9656:	4b15      	ldr	r3, [pc, #84]	; (96ac <autoSetCurrent+0xf0>)
    9658:	4798      	blx	r3
		setCurrentDetection(true);
    965a:	2001      	movs	r0, #1
    965c:	4b0d      	ldr	r3, [pc, #52]	; (9694 <autoSetCurrent+0xd8>)
    965e:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
    9660:	204b      	movs	r0, #75	; 0x4b
    9662:	4b0d      	ldr	r3, [pc, #52]	; (9698 <autoSetCurrent+0xdc>)
    9664:	4798      	blx	r3
	{
    9666:	e005      	b.n	9674 <autoSetCurrent+0xb8>
	}
	else
	{
		setCurrentDetection(false);
    9668:	2000      	movs	r0, #0
    966a:	4b0a      	ldr	r3, [pc, #40]	; (9694 <autoSetCurrent+0xd8>)
    966c:	4798      	blx	r3
		setMotorMGRResponse('Y');		//ampere cleared
    966e:	2059      	movs	r0, #89	; 0x59
    9670:	4b09      	ldr	r3, [pc, #36]	; (9698 <autoSetCurrent+0xdc>)
    9672:	4798      	blx	r3
	}
}
    9674:	46bd      	mov	sp, r7
    9676:	b004      	add	sp, #16
    9678:	bd80      	pop	{r7, pc}
    967a:	46c0      	nop			; (mov r8, r8)
    967c:	00009e8d 	.word	0x00009e8d
    9680:	20000771 	.word	0x20000771
    9684:	20000773 	.word	0x20000773
    9688:	20000761 	.word	0x20000761
    968c:	00009e25 	.word	0x00009e25
    9690:	200006dc 	.word	0x200006dc
    9694:	000018ad 	.word	0x000018ad
    9698:	000048a9 	.word	0x000048a9
    969c:	2000065c 	.word	0x2000065c
    96a0:	00015461 	.word	0x00015461
    96a4:	00001869 	.word	0x00001869
    96a8:	000017e1 	.word	0x000017e1
    96ac:	00001825 	.word	0x00001825

000096b0 <speakAmpere>:

void speakAmpere(void)
{
    96b0:	b580      	push	{r7, lr}
    96b2:	b084      	sub	sp, #16
    96b4:	af00      	add	r7, sp, #0
	if(getMotorState())
    96b6:	4b0d      	ldr	r3, [pc, #52]	; (96ec <speakAmpere+0x3c>)
    96b8:	4798      	blx	r3
    96ba:	1e03      	subs	r3, r0, #0
    96bc:	d00f      	beq.n	96de <speakAmpere+0x2e>
	{
		char cTemp[8];
		
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
    96be:	4b0c      	ldr	r3, [pc, #48]	; (96f0 <speakAmpere+0x40>)
    96c0:	8a9b      	ldrh	r3, [r3, #20]
    96c2:	b29b      	uxth	r3, r3
    96c4:	60fb      	str	r3, [r7, #12]
		//xSemaphoreGive(xADC_Semaphore);
		//ADCcurrent = (ADCcurrent*7225)/100000;
		//xSemaphoreGive(xADC_Semaphore);
		//}
		
		utoa(ADCcurrent, cTemp, 10);
    96c6:	1d39      	adds	r1, r7, #4
    96c8:	68fb      	ldr	r3, [r7, #12]
    96ca:	220a      	movs	r2, #10
    96cc:	0018      	movs	r0, r3
    96ce:	4b09      	ldr	r3, [pc, #36]	; (96f4 <speakAmpere+0x44>)
    96d0:	4798      	blx	r3
		playRepeatedFiles(cTemp);
    96d2:	1d3b      	adds	r3, r7, #4
    96d4:	0018      	movs	r0, r3
    96d6:	4b08      	ldr	r3, [pc, #32]	; (96f8 <speakAmpere+0x48>)
    96d8:	4798      	blx	r3
		return;
    96da:	46c0      	nop			; (mov r8, r8)
    96dc:	e002      	b.n	96e4 <speakAmpere+0x34>
	}
	setMotorMGRResponse('-');
    96de:	202d      	movs	r0, #45	; 0x2d
    96e0:	4b06      	ldr	r3, [pc, #24]	; (96fc <speakAmpere+0x4c>)
    96e2:	4798      	blx	r3
}
    96e4:	46bd      	mov	sp, r7
    96e6:	b004      	add	sp, #16
    96e8:	bd80      	pop	{r7, pc}
    96ea:	46c0      	nop			; (mov r8, r8)
    96ec:	00009e8d 	.word	0x00009e8d
    96f0:	200006dc 	.word	0x200006dc
    96f4:	0001821d 	.word	0x0001821d
    96f8:	0000459d 	.word	0x0000459d
    96fc:	000048a9 	.word	0x000048a9

00009700 <PR2_ISR>:

void PR2_ISR(void)
{
    9700:	b5f0      	push	{r4, r5, r6, r7, lr}
    9702:	b08b      	sub	sp, #44	; 0x2c
    9704:	af00      	add	r7, sp, #0
	if (ucharPhase_Seq_Check_Flag==1)
    9706:	4b77      	ldr	r3, [pc, #476]	; (98e4 <PR2_ISR+0x1e4>)
    9708:	781b      	ldrb	r3, [r3, #0]
    970a:	b2db      	uxtb	r3, r3
    970c:	2b01      	cmp	r3, #1
    970e:	d000      	beq.n	9712 <PR2_ISR+0x12>
    9710:	e0e3      	b.n	98da <PR2_ISR+0x1da>
	{
		ucharPhase_1_Timer_Counter=0;
    9712:	4b75      	ldr	r3, [pc, #468]	; (98e8 <PR2_ISR+0x1e8>)
    9714:	2200      	movs	r2, #0
    9716:	701a      	strb	r2, [r3, #0]
		delay_ms(5);
    9718:	2000      	movs	r0, #0
    971a:	4b74      	ldr	r3, [pc, #464]	; (98ec <PR2_ISR+0x1ec>)
    971c:	4798      	blx	r3
    971e:	0003      	movs	r3, r0
    9720:	60bb      	str	r3, [r7, #8]
    9722:	2300      	movs	r3, #0
    9724:	60fb      	str	r3, [r7, #12]
    9726:	68bb      	ldr	r3, [r7, #8]
    9728:	68fc      	ldr	r4, [r7, #12]
    972a:	0f9a      	lsrs	r2, r3, #30
    972c:	00a0      	lsls	r0, r4, #2
    972e:	61f8      	str	r0, [r7, #28]
    9730:	69f8      	ldr	r0, [r7, #28]
    9732:	4310      	orrs	r0, r2
    9734:	61f8      	str	r0, [r7, #28]
    9736:	009b      	lsls	r3, r3, #2
    9738:	61bb      	str	r3, [r7, #24]
    973a:	69bb      	ldr	r3, [r7, #24]
    973c:	69fc      	ldr	r4, [r7, #28]
    973e:	68b9      	ldr	r1, [r7, #8]
    9740:	68fa      	ldr	r2, [r7, #12]
    9742:	185b      	adds	r3, r3, r1
    9744:	4154      	adcs	r4, r2
    9746:	496a      	ldr	r1, [pc, #424]	; (98f0 <PR2_ISR+0x1f0>)
    9748:	2200      	movs	r2, #0
    974a:	185b      	adds	r3, r3, r1
    974c:	4154      	adcs	r4, r2
    974e:	0018      	movs	r0, r3
    9750:	0021      	movs	r1, r4
    9752:	4c68      	ldr	r4, [pc, #416]	; (98f4 <PR2_ISR+0x1f4>)
    9754:	4a68      	ldr	r2, [pc, #416]	; (98f8 <PR2_ISR+0x1f8>)
    9756:	2300      	movs	r3, #0
    9758:	47a0      	blx	r4
    975a:	0003      	movs	r3, r0
    975c:	000c      	movs	r4, r1
    975e:	0018      	movs	r0, r3
    9760:	4b66      	ldr	r3, [pc, #408]	; (98fc <PR2_ISR+0x1fc>)
    9762:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
    9764:	2323      	movs	r3, #35	; 0x23
    9766:	18fb      	adds	r3, r7, r3
    9768:	2200      	movs	r2, #0
    976a:	701a      	strb	r2, [r3, #0]
    976c:	2322      	movs	r3, #34	; 0x22
    976e:	18fb      	adds	r3, r7, r3
    9770:	2200      	movs	r2, #0
    9772:	701a      	strb	r2, [r3, #0]
    9774:	2321      	movs	r3, #33	; 0x21
    9776:	18fb      	adds	r3, r7, r3
    9778:	2200      	movs	r2, #0
    977a:	701a      	strb	r2, [r3, #0]
    977c:	2320      	movs	r3, #32
    977e:	18fb      	adds	r3, r7, r3
    9780:	2200      	movs	r2, #0
    9782:	701a      	strb	r2, [r3, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
    9784:	202b      	movs	r0, #43	; 0x2b
    9786:	4b5e      	ldr	r3, [pc, #376]	; (9900 <PR2_ISR+0x200>)
    9788:	4798      	blx	r3
    978a:	1e03      	subs	r3, r0, #0
    978c:	d100      	bne.n	9790 <PR2_ISR+0x90>
    978e:	e08e      	b.n	98ae <PR2_ISR+0x1ae>
		{
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
    9790:	2300      	movs	r3, #0
    9792:	627b      	str	r3, [r7, #36]	; 0x24
    9794:	e085      	b.n	98a2 <PR2_ISR+0x1a2>
			{
				delay_us(25);
    9796:	2000      	movs	r0, #0
    9798:	4b54      	ldr	r3, [pc, #336]	; (98ec <PR2_ISR+0x1ec>)
    979a:	4798      	blx	r3
    979c:	0003      	movs	r3, r0
    979e:	603b      	str	r3, [r7, #0]
    97a0:	2300      	movs	r3, #0
    97a2:	607b      	str	r3, [r7, #4]
    97a4:	6838      	ldr	r0, [r7, #0]
    97a6:	6879      	ldr	r1, [r7, #4]
    97a8:	0003      	movs	r3, r0
    97aa:	000c      	movs	r4, r1
    97ac:	0f9a      	lsrs	r2, r3, #30
    97ae:	00a6      	lsls	r6, r4, #2
    97b0:	4316      	orrs	r6, r2
    97b2:	009d      	lsls	r5, r3, #2
    97b4:	0003      	movs	r3, r0
    97b6:	000c      	movs	r4, r1
    97b8:	195b      	adds	r3, r3, r5
    97ba:	4174      	adcs	r4, r6
    97bc:	0f9a      	lsrs	r2, r3, #30
    97be:	00a1      	lsls	r1, r4, #2
    97c0:	6179      	str	r1, [r7, #20]
    97c2:	6979      	ldr	r1, [r7, #20]
    97c4:	4311      	orrs	r1, r2
    97c6:	6179      	str	r1, [r7, #20]
    97c8:	009a      	lsls	r2, r3, #2
    97ca:	613a      	str	r2, [r7, #16]
    97cc:	6939      	ldr	r1, [r7, #16]
    97ce:	697a      	ldr	r2, [r7, #20]
    97d0:	185b      	adds	r3, r3, r1
    97d2:	4154      	adcs	r4, r2
    97d4:	494b      	ldr	r1, [pc, #300]	; (9904 <PR2_ISR+0x204>)
    97d6:	2200      	movs	r2, #0
    97d8:	185b      	adds	r3, r3, r1
    97da:	4154      	adcs	r4, r2
    97dc:	0018      	movs	r0, r3
    97de:	0021      	movs	r1, r4
    97e0:	4c44      	ldr	r4, [pc, #272]	; (98f4 <PR2_ISR+0x1f4>)
    97e2:	4a49      	ldr	r2, [pc, #292]	; (9908 <PR2_ISR+0x208>)
    97e4:	2300      	movs	r3, #0
    97e6:	47a0      	blx	r4
    97e8:	0003      	movs	r3, r0
    97ea:	000c      	movs	r4, r1
    97ec:	0018      	movs	r0, r3
    97ee:	4b43      	ldr	r3, [pc, #268]	; (98fc <PR2_ISR+0x1fc>)
    97f0:	4798      	blx	r3
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
    97f2:	202a      	movs	r0, #42	; 0x2a
    97f4:	4b42      	ldr	r3, [pc, #264]	; (9900 <PR2_ISR+0x200>)
    97f6:	4798      	blx	r3
    97f8:	1e03      	subs	r3, r0, #0
    97fa:	d014      	beq.n	9826 <PR2_ISR+0x126>
    97fc:	2323      	movs	r3, #35	; 0x23
    97fe:	18fb      	adds	r3, r7, r3
    9800:	781b      	ldrb	r3, [r3, #0]
    9802:	b2db      	uxtb	r3, r3
    9804:	2b00      	cmp	r3, #0
    9806:	d10e      	bne.n	9826 <PR2_ISR+0x126>
				{
					ucharHigh_Flag=1;
    9808:	2323      	movs	r3, #35	; 0x23
    980a:	18fb      	adds	r3, r7, r3
    980c:	2201      	movs	r2, #1
    980e:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
    9810:	2322      	movs	r3, #34	; 0x22
    9812:	18fb      	adds	r3, r7, r3
    9814:	781b      	ldrb	r3, [r3, #0]
    9816:	b2db      	uxtb	r3, r3
    9818:	2b01      	cmp	r3, #1
    981a:	d104      	bne.n	9826 <PR2_ISR+0x126>
					{
						ucharLow_To_High_Flag=1;
    981c:	2320      	movs	r3, #32
    981e:	18fb      	adds	r3, r7, r3
    9820:	2201      	movs	r2, #1
    9822:	701a      	strb	r2, [r3, #0]
						break;
    9824:	e043      	b.n	98ae <PR2_ISR+0x1ae>
					}
				}
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
    9826:	202a      	movs	r0, #42	; 0x2a
    9828:	4b35      	ldr	r3, [pc, #212]	; (9900 <PR2_ISR+0x200>)
    982a:	4798      	blx	r3
    982c:	0003      	movs	r3, r0
    982e:	001a      	movs	r2, r3
    9830:	2301      	movs	r3, #1
    9832:	4053      	eors	r3, r2
    9834:	b2db      	uxtb	r3, r3
    9836:	2b00      	cmp	r3, #0
    9838:	d013      	beq.n	9862 <PR2_ISR+0x162>
    983a:	2322      	movs	r3, #34	; 0x22
    983c:	18fb      	adds	r3, r7, r3
    983e:	781b      	ldrb	r3, [r3, #0]
    9840:	b2db      	uxtb	r3, r3
    9842:	2b00      	cmp	r3, #0
    9844:	d10d      	bne.n	9862 <PR2_ISR+0x162>
				{
					ucharLow_Flag=1;
    9846:	2322      	movs	r3, #34	; 0x22
    9848:	18fb      	adds	r3, r7, r3
    984a:	2201      	movs	r2, #1
    984c:	701a      	strb	r2, [r3, #0]
					if (ucharHigh_Flag==1)
    984e:	2323      	movs	r3, #35	; 0x23
    9850:	18fb      	adds	r3, r7, r3
    9852:	781b      	ldrb	r3, [r3, #0]
    9854:	b2db      	uxtb	r3, r3
    9856:	2b01      	cmp	r3, #1
    9858:	d103      	bne.n	9862 <PR2_ISR+0x162>
					{
						ucharHigh_To_Low_Flag=1;
    985a:	2321      	movs	r3, #33	; 0x21
    985c:	18fb      	adds	r3, r7, r3
    985e:	2201      	movs	r2, #1
    9860:	701a      	strb	r2, [r3, #0]
					}
				}
				if (ucharHigh_To_Low_Flag==1)
    9862:	2321      	movs	r3, #33	; 0x21
    9864:	18fb      	adds	r3, r7, r3
    9866:	781b      	ldrb	r3, [r3, #0]
    9868:	b2db      	uxtb	r3, r3
    986a:	2b01      	cmp	r3, #1
    986c:	d10c      	bne.n	9888 <PR2_ISR+0x188>
				{
					// LCD takes data from structThreePhase_state, which should have latest sequence data.
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
    986e:	4b27      	ldr	r3, [pc, #156]	; (990c <PR2_ISR+0x20c>)
    9870:	2202      	movs	r2, #2
    9872:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
    9874:	4b26      	ldr	r3, [pc, #152]	; (9910 <PR2_ISR+0x210>)
    9876:	2202      	movs	r2, #2
    9878:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Err_Counter=0;
    987a:	4b26      	ldr	r3, [pc, #152]	; (9914 <PR2_ISR+0x214>)
    987c:	2200      	movs	r2, #0
    987e:	701a      	strb	r2, [r3, #0]
					ucharPhase_Seq_Check_Flag=0;
    9880:	4b18      	ldr	r3, [pc, #96]	; (98e4 <PR2_ISR+0x1e4>)
    9882:	2200      	movs	r2, #0
    9884:	701a      	strb	r2, [r3, #0]
					break;
    9886:	e012      	b.n	98ae <PR2_ISR+0x1ae>
				}
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
    9888:	202b      	movs	r0, #43	; 0x2b
    988a:	4b1d      	ldr	r3, [pc, #116]	; (9900 <PR2_ISR+0x200>)
    988c:	4798      	blx	r3
    988e:	0003      	movs	r3, r0
    9890:	001a      	movs	r2, r3
    9892:	2301      	movs	r3, #1
    9894:	4053      	eors	r3, r2
    9896:	b2db      	uxtb	r3, r3
    9898:	2b00      	cmp	r3, #0
    989a:	d107      	bne.n	98ac <PR2_ISR+0x1ac>
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
    989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    989e:	3301      	adds	r3, #1
    98a0:	627b      	str	r3, [r7, #36]	; 0x24
    98a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    98a4:	2b77      	cmp	r3, #119	; 0x77
    98a6:	d800      	bhi.n	98aa <PR2_ISR+0x1aa>
    98a8:	e775      	b.n	9796 <PR2_ISR+0x96>
    98aa:	e000      	b.n	98ae <PR2_ISR+0x1ae>
				{
					break;
    98ac:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
		if (++ucharPhase_Seq_Err_Counter>2)
    98ae:	4b19      	ldr	r3, [pc, #100]	; (9914 <PR2_ISR+0x214>)
    98b0:	781b      	ldrb	r3, [r3, #0]
    98b2:	b2db      	uxtb	r3, r3
    98b4:	3301      	adds	r3, #1
    98b6:	b2db      	uxtb	r3, r3
    98b8:	4a16      	ldr	r2, [pc, #88]	; (9914 <PR2_ISR+0x214>)
    98ba:	1c19      	adds	r1, r3, #0
    98bc:	7011      	strb	r1, [r2, #0]
    98be:	2b02      	cmp	r3, #2
    98c0:	d90b      	bls.n	98da <PR2_ISR+0x1da>
		{
			ucharPhase_Seq_Err_Counter=0;
    98c2:	4b14      	ldr	r3, [pc, #80]	; (9914 <PR2_ISR+0x214>)
    98c4:	2200      	movs	r2, #0
    98c6:	701a      	strb	r2, [r3, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
    98c8:	4b10      	ldr	r3, [pc, #64]	; (990c <PR2_ISR+0x20c>)
    98ca:	2201      	movs	r2, #1
    98cc:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
    98ce:	4b10      	ldr	r3, [pc, #64]	; (9910 <PR2_ISR+0x210>)
    98d0:	2201      	movs	r2, #1
    98d2:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=0;
    98d4:	4b03      	ldr	r3, [pc, #12]	; (98e4 <PR2_ISR+0x1e4>)
    98d6:	2200      	movs	r2, #0
    98d8:	701a      	strb	r2, [r3, #0]
		}
	}
}
    98da:	46c0      	nop			; (mov r8, r8)
    98dc:	46bd      	mov	sp, r7
    98de:	b00b      	add	sp, #44	; 0x2c
    98e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    98e2:	46c0      	nop			; (mov r8, r8)
    98e4:	2000000c 	.word	0x2000000c
    98e8:	20000240 	.word	0x20000240
    98ec:	00013855 	.word	0x00013855
    98f0:	00001b57 	.word	0x00001b57
    98f4:	000157c9 	.word	0x000157c9
    98f8:	00001b58 	.word	0x00001b58
    98fc:	20000001 	.word	0x20000001
    9900:	000087d9 	.word	0x000087d9
    9904:	006acfbf 	.word	0x006acfbf
    9908:	006acfc0 	.word	0x006acfc0
    990c:	20000720 	.word	0x20000720
    9910:	2000023c 	.word	0x2000023c
    9914:	2000023d 	.word	0x2000023d

00009918 <vTask_10ms_Timer>:

static void vTask_10ms_Timer(void *params)
{
    9918:	b580      	push	{r7, lr}
    991a:	b084      	sub	sp, #16
    991c:	af00      	add	r7, sp, #0
    991e:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    9920:	4b12      	ldr	r3, [pc, #72]	; (996c <vTask_10ms_Timer+0x54>)
    9922:	4798      	blx	r3
    9924:	0003      	movs	r3, r0
    9926:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
    9928:	230c      	movs	r3, #12
    992a:	18fb      	adds	r3, r7, r3
    992c:	210a      	movs	r1, #10
    992e:	0018      	movs	r0, r3
    9930:	4b0f      	ldr	r3, [pc, #60]	; (9970 <vTask_10ms_Timer+0x58>)
    9932:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
    9934:	4b0f      	ldr	r3, [pc, #60]	; (9974 <vTask_10ms_Timer+0x5c>)
    9936:	781b      	ldrb	r3, [r3, #0]
    9938:	b2db      	uxtb	r3, r3
    993a:	2b01      	cmp	r3, #1
    993c:	d1f4      	bne.n	9928 <vTask_10ms_Timer+0x10>
		{
			if(++ucharPhase_1_Timer_Counter>=20)
    993e:	4b0e      	ldr	r3, [pc, #56]	; (9978 <vTask_10ms_Timer+0x60>)
    9940:	781b      	ldrb	r3, [r3, #0]
    9942:	3301      	adds	r3, #1
    9944:	b2da      	uxtb	r2, r3
    9946:	4b0c      	ldr	r3, [pc, #48]	; (9978 <vTask_10ms_Timer+0x60>)
    9948:	701a      	strb	r2, [r3, #0]
    994a:	4b0b      	ldr	r3, [pc, #44]	; (9978 <vTask_10ms_Timer+0x60>)
    994c:	781b      	ldrb	r3, [r3, #0]
    994e:	2b13      	cmp	r3, #19
    9950:	d9ea      	bls.n	9928 <vTask_10ms_Timer+0x10>
			{
				ucharPhase_1_Timer_Counter=0;
    9952:	4b09      	ldr	r3, [pc, #36]	; (9978 <vTask_10ms_Timer+0x60>)
    9954:	2200      	movs	r2, #0
    9956:	701a      	strb	r2, [r3, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
    9958:	4b08      	ldr	r3, [pc, #32]	; (997c <vTask_10ms_Timer+0x64>)
    995a:	2201      	movs	r2, #1
    995c:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
    995e:	4b08      	ldr	r3, [pc, #32]	; (9980 <vTask_10ms_Timer+0x68>)
    9960:	2201      	movs	r2, #1
    9962:	701a      	strb	r2, [r3, #0]
				ucharPhase_Seq_Check_Flag=0;
    9964:	4b03      	ldr	r3, [pc, #12]	; (9974 <vTask_10ms_Timer+0x5c>)
    9966:	2200      	movs	r2, #0
    9968:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
    996a:	e7dd      	b.n	9928 <vTask_10ms_Timer+0x10>
    996c:	0000f37d 	.word	0x0000f37d
    9970:	0000ef51 	.word	0x0000ef51
    9974:	2000000c 	.word	0x2000000c
    9978:	20000240 	.word	0x20000240
    997c:	20000720 	.word	0x20000720
    9980:	2000023c 	.word	0x2000023c

00009984 <vTask_100ms_Timer>:
		}
	}
}

static void vTask_100ms_Timer(void *params)
{
    9984:	b580      	push	{r7, lr}
    9986:	b084      	sub	sp, #16
    9988:	af00      	add	r7, sp, #0
    998a:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    998c:	4b17      	ldr	r3, [pc, #92]	; (99ec <vTask_100ms_Timer+0x68>)
    998e:	4798      	blx	r3
    9990:	0003      	movs	r3, r0
    9992:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
    9994:	230c      	movs	r3, #12
    9996:	18fb      	adds	r3, r7, r3
    9998:	2164      	movs	r1, #100	; 0x64
    999a:	0018      	movs	r0, r3
    999c:	4b14      	ldr	r3, [pc, #80]	; (99f0 <vTask_100ms_Timer+0x6c>)
    999e:	4798      	blx	r3
		
		////////
		//Voltaqe Detect Timer Counter, Reset every 500ms to 0, which triggers the New Voltage Reading Acquisition from ADC.
		if(ucharVoltage_Detect_Timer_Counter++>4)
    99a0:	4b14      	ldr	r3, [pc, #80]	; (99f4 <vTask_100ms_Timer+0x70>)
    99a2:	781b      	ldrb	r3, [r3, #0]
    99a4:	b2db      	uxtb	r3, r3
    99a6:	1c5a      	adds	r2, r3, #1
    99a8:	b2d1      	uxtb	r1, r2
    99aa:	4a12      	ldr	r2, [pc, #72]	; (99f4 <vTask_100ms_Timer+0x70>)
    99ac:	7011      	strb	r1, [r2, #0]
    99ae:	2b04      	cmp	r3, #4
    99b0:	d905      	bls.n	99be <vTask_100ms_Timer+0x3a>
		{
			ucharVoltage_Detect_Timer_Counter=0;
    99b2:	4b10      	ldr	r3, [pc, #64]	; (99f4 <vTask_100ms_Timer+0x70>)
    99b4:	2200      	movs	r2, #0
    99b6:	701a      	strb	r2, [r3, #0]
			//Add Flag to enable detection of current, as the Voltage Detect Timer Counter won't be 0, as voltage reading takes 100ms Time.
			ucharCurrent_Detect_Flag=1;
    99b8:	4b0f      	ldr	r3, [pc, #60]	; (99f8 <vTask_100ms_Timer+0x74>)
    99ba:	2201      	movs	r2, #1
    99bc:	701a      	strb	r2, [r3, #0]
			
		}
		/////////
		if (ucharPhase_Seq_Timer_Counter++>4)
    99be:	4b0f      	ldr	r3, [pc, #60]	; (99fc <vTask_100ms_Timer+0x78>)
    99c0:	781b      	ldrb	r3, [r3, #0]
    99c2:	b2db      	uxtb	r3, r3
    99c4:	1c5a      	adds	r2, r3, #1
    99c6:	b2d1      	uxtb	r1, r2
    99c8:	4a0c      	ldr	r2, [pc, #48]	; (99fc <vTask_100ms_Timer+0x78>)
    99ca:	7011      	strb	r1, [r2, #0]
    99cc:	2b04      	cmp	r3, #4
    99ce:	d9e1      	bls.n	9994 <vTask_100ms_Timer+0x10>
		{
			ucharPhase_Seq_Timer_Counter=0;
    99d0:	4b0a      	ldr	r3, [pc, #40]	; (99fc <vTask_100ms_Timer+0x78>)
    99d2:	2200      	movs	r2, #0
    99d4:	701a      	strb	r2, [r3, #0]
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
    99d6:	4b0a      	ldr	r3, [pc, #40]	; (9a00 <vTask_100ms_Timer+0x7c>)
    99d8:	2201      	movs	r2, #1
    99da:	701a      	strb	r2, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
    99dc:	4b09      	ldr	r3, [pc, #36]	; (9a04 <vTask_100ms_Timer+0x80>)
    99de:	2200      	movs	r2, #0
    99e0:	701a      	strb	r2, [r3, #0]
			extint_chan_clear_detected(11);
    99e2:	200b      	movs	r0, #11
    99e4:	4b08      	ldr	r3, [pc, #32]	; (9a08 <vTask_100ms_Timer+0x84>)
    99e6:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
    99e8:	e7d4      	b.n	9994 <vTask_100ms_Timer+0x10>
    99ea:	46c0      	nop			; (mov r8, r8)
    99ec:	0000f37d 	.word	0x0000f37d
    99f0:	0000ef51 	.word	0x0000ef51
    99f4:	2000000d 	.word	0x2000000d
    99f8:	2000023f 	.word	0x2000023f
    99fc:	2000023e 	.word	0x2000023e
    9a00:	2000000c 	.word	0x2000000c
    9a04:	20000240 	.word	0x20000240
    9a08:	000088bd 	.word	0x000088bd

00009a0c <should_Detect_New_Voltage>:
		}
	}
}

//Function to check if new Voltage reading should be acquired from the ADC, by checking the timer Variable for reading Voltage with 0.
bool should_Detect_New_Voltage(void) {
    9a0c:	b580      	push	{r7, lr}
    9a0e:	af00      	add	r7, sp, #0
	return (ucharVoltage_Detect_Timer_Counter == 0);
    9a10:	4b04      	ldr	r3, [pc, #16]	; (9a24 <should_Detect_New_Voltage+0x18>)
    9a12:	781b      	ldrb	r3, [r3, #0]
    9a14:	b2db      	uxtb	r3, r3
    9a16:	425a      	negs	r2, r3
    9a18:	4153      	adcs	r3, r2
    9a1a:	b2db      	uxtb	r3, r3
}
    9a1c:	0018      	movs	r0, r3
    9a1e:	46bd      	mov	sp, r7
    9a20:	bd80      	pop	{r7, pc}
    9a22:	46c0      	nop			; (mov r8, r8)
    9a24:	2000000d 	.word	0x2000000d

00009a28 <detect_battery_voltage_and_percentage>:

void detect_battery_voltage_and_percentage(void)
{
    9a28:	b590      	push	{r4, r7, lr}
    9a2a:	b083      	sub	sp, #12
    9a2c:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    9a2e:	4b25      	ldr	r3, [pc, #148]	; (9ac4 <detect_battery_voltage_and_percentage+0x9c>)
    9a30:	681a      	ldr	r2, [r3, #0]
    9a32:	2301      	movs	r3, #1
    9a34:	425b      	negs	r3, r3
    9a36:	0019      	movs	r1, r3
    9a38:	0010      	movs	r0, r2
    9a3a:	4b23      	ldr	r3, [pc, #140]	; (9ac8 <detect_battery_voltage_and_percentage+0xa0>)
    9a3c:	4798      	blx	r3
    9a3e:	0003      	movs	r3, r0
    9a40:	2b01      	cmp	r3, #1
    9a42:	d13b      	bne.n	9abc <detect_battery_voltage_and_percentage+0x94>
	{
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
    9a44:	21c8      	movs	r1, #200	; 0xc8
    9a46:	2007      	movs	r0, #7
    9a48:	4b20      	ldr	r3, [pc, #128]	; (9acc <detect_battery_voltage_and_percentage+0xa4>)
    9a4a:	4798      	blx	r3
    9a4c:	0003      	movs	r3, r0
    9a4e:	603b      	str	r3, [r7, #0]
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
    9a50:	683b      	ldr	r3, [r7, #0]
    9a52:	4a1f      	ldr	r2, [pc, #124]	; (9ad0 <detect_battery_voltage_and_percentage+0xa8>)
    9a54:	435a      	muls	r2, r3
    9a56:	0010      	movs	r0, r2
    9a58:	4b1e      	ldr	r3, [pc, #120]	; (9ad4 <detect_battery_voltage_and_percentage+0xac>)
    9a5a:	22fa      	movs	r2, #250	; 0xfa
    9a5c:	0091      	lsls	r1, r2, #2
    9a5e:	4798      	blx	r3
    9a60:	0003      	movs	r3, r0
    9a62:	001a      	movs	r2, r3
    9a64:	4b1c      	ldr	r3, [pc, #112]	; (9ad8 <detect_battery_voltage_and_percentage+0xb0>)
    9a66:	619a      	str	r2, [r3, #24]
		uint8_t bat_per = 0;
    9a68:	1dfb      	adds	r3, r7, #7
    9a6a:	2200      	movs	r2, #0
    9a6c:	701a      	strb	r2, [r3, #0]
		
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
    9a6e:	4b1a      	ldr	r3, [pc, #104]	; (9ad8 <detect_battery_voltage_and_percentage+0xb0>)
    9a70:	699b      	ldr	r3, [r3, #24]
    9a72:	4a1a      	ldr	r2, [pc, #104]	; (9adc <detect_battery_voltage_and_percentage+0xb4>)
    9a74:	4293      	cmp	r3, r2
    9a76:	d803      	bhi.n	9a80 <detect_battery_voltage_and_percentage+0x58>
		{
			bat_per = 0;
    9a78:	1dfb      	adds	r3, r7, #7
    9a7a:	2200      	movs	r2, #0
    9a7c:	701a      	strb	r2, [r3, #0]
    9a7e:	e012      	b.n	9aa6 <detect_battery_voltage_and_percentage+0x7e>
		}
		else
		{
			//bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
			bat_per = (Analog_Parameter_Struct.Battery_Voltage-3300)/9;
    9a80:	4b15      	ldr	r3, [pc, #84]	; (9ad8 <detect_battery_voltage_and_percentage+0xb0>)
    9a82:	699b      	ldr	r3, [r3, #24]
    9a84:	4a16      	ldr	r2, [pc, #88]	; (9ae0 <detect_battery_voltage_and_percentage+0xb8>)
    9a86:	189a      	adds	r2, r3, r2
    9a88:	4b12      	ldr	r3, [pc, #72]	; (9ad4 <detect_battery_voltage_and_percentage+0xac>)
    9a8a:	2109      	movs	r1, #9
    9a8c:	0010      	movs	r0, r2
    9a8e:	4798      	blx	r3
    9a90:	0003      	movs	r3, r0
    9a92:	001a      	movs	r2, r3
    9a94:	1dfb      	adds	r3, r7, #7
    9a96:	701a      	strb	r2, [r3, #0]
			if (bat_per>100) bat_per=100;
    9a98:	1dfb      	adds	r3, r7, #7
    9a9a:	781b      	ldrb	r3, [r3, #0]
    9a9c:	2b64      	cmp	r3, #100	; 0x64
    9a9e:	d902      	bls.n	9aa6 <detect_battery_voltage_and_percentage+0x7e>
    9aa0:	1dfb      	adds	r3, r7, #7
    9aa2:	2264      	movs	r2, #100	; 0x64
    9aa4:	701a      	strb	r2, [r3, #0]
		}
		
		Analog_Parameter_Struct.Battery_percentage = bat_per;
    9aa6:	4b0c      	ldr	r3, [pc, #48]	; (9ad8 <detect_battery_voltage_and_percentage+0xb0>)
    9aa8:	1dfa      	adds	r2, r7, #7
    9aaa:	7812      	ldrb	r2, [r2, #0]
    9aac:	771a      	strb	r2, [r3, #28]
		
		xSemaphoreGive(xADC_Semaphore);
    9aae:	4b05      	ldr	r3, [pc, #20]	; (9ac4 <detect_battery_voltage_and_percentage+0x9c>)
    9ab0:	6818      	ldr	r0, [r3, #0]
    9ab2:	2300      	movs	r3, #0
    9ab4:	2200      	movs	r2, #0
    9ab6:	2100      	movs	r1, #0
    9ab8:	4c0a      	ldr	r4, [pc, #40]	; (9ae4 <detect_battery_voltage_and_percentage+0xbc>)
    9aba:	47a0      	blx	r4
	}
}
    9abc:	46c0      	nop			; (mov r8, r8)
    9abe:	46bd      	mov	sp, r7
    9ac0:	b003      	add	sp, #12
    9ac2:	bd90      	pop	{r4, r7, pc}
    9ac4:	20000238 	.word	0x20000238
    9ac8:	0000e711 	.word	0x0000e711
    9acc:	000092d1 	.word	0x000092d1
    9ad0:	000005b1 	.word	0x000005b1
    9ad4:	00015461 	.word	0x00015461
    9ad8:	200006dc 	.word	0x200006dc
    9adc:	00000ce4 	.word	0x00000ce4
    9ae0:	fffff31c 	.word	0xfffff31c
    9ae4:	0000e271 	.word	0x0000e271

00009ae8 <detect_Three_Phase_Voltage>:

//Function to save the 3 phase voltage from ADC in to the structure, ADC values are filtered, and multiplied by factor here.
void detect_Three_Phase_Voltage(void) {
    9ae8:	b590      	push	{r4, r7, lr}
    9aea:	b085      	sub	sp, #20
    9aec:	af00      	add	r7, sp, #0
	
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    9aee:	4b3d      	ldr	r3, [pc, #244]	; (9be4 <detect_Three_Phase_Voltage+0xfc>)
    9af0:	681a      	ldr	r2, [r3, #0]
    9af2:	2301      	movs	r3, #1
    9af4:	425b      	negs	r3, r3
    9af6:	0019      	movs	r1, r3
    9af8:	0010      	movs	r0, r2
    9afa:	4b3b      	ldr	r3, [pc, #236]	; (9be8 <detect_Three_Phase_Voltage+0x100>)
    9afc:	4798      	blx	r3
    9afe:	0003      	movs	r3, r0
    9b00:	2b01      	cmp	r3, #1
    9b02:	d16b      	bne.n	9bdc <detect_Three_Phase_Voltage+0xf4>
	{
		//int32_t adcRY = Read_ADC0(ADC_POSITIVE_INPUT_PIN19,2000);
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
    9b04:	2013      	movs	r0, #19
    9b06:	4b39      	ldr	r3, [pc, #228]	; (9bec <detect_Three_Phase_Voltage+0x104>)
    9b08:	4798      	blx	r3
    9b0a:	0003      	movs	r3, r0
    9b0c:	60fb      	str	r3, [r7, #12]
		adcRY = (adcRY-10);
    9b0e:	68fb      	ldr	r3, [r7, #12]
    9b10:	3b0a      	subs	r3, #10
    9b12:	60fb      	str	r3, [r7, #12]
		if (adcRY<0)
    9b14:	68fb      	ldr	r3, [r7, #12]
    9b16:	2b00      	cmp	r3, #0
    9b18:	da02      	bge.n	9b20 <detect_Three_Phase_Voltage+0x38>
		{
			adcRY = 0;
    9b1a:	2300      	movs	r3, #0
    9b1c:	60fb      	str	r3, [r7, #12]
    9b1e:	e00f      	b.n	9b40 <detect_Three_Phase_Voltage+0x58>
		}
		else
		{
			adcRY = (((adcRY-10)*655)/1000);
    9b20:	68fb      	ldr	r3, [r7, #12]
    9b22:	3b0a      	subs	r3, #10
    9b24:	4a32      	ldr	r2, [pc, #200]	; (9bf0 <detect_Three_Phase_Voltage+0x108>)
    9b26:	435a      	muls	r2, r3
    9b28:	0010      	movs	r0, r2
    9b2a:	4b32      	ldr	r3, [pc, #200]	; (9bf4 <detect_Three_Phase_Voltage+0x10c>)
    9b2c:	22fa      	movs	r2, #250	; 0xfa
    9b2e:	0091      	lsls	r1, r2, #2
    9b30:	4798      	blx	r3
    9b32:	0003      	movs	r3, r0
    9b34:	60fb      	str	r3, [r7, #12]
			if (adcRY<0)
    9b36:	68fb      	ldr	r3, [r7, #12]
    9b38:	2b00      	cmp	r3, #0
    9b3a:	da01      	bge.n	9b40 <detect_Three_Phase_Voltage+0x58>
			{
				adcRY = 0;
    9b3c:	2300      	movs	r3, #0
    9b3e:	60fb      	str	r3, [r7, #12]
			}
		}
		
		//int32_t adcYB = Read_ADC0(ADC_POSITIVE_INPUT_PIN18,2000);
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
    9b40:	2012      	movs	r0, #18
    9b42:	4b2a      	ldr	r3, [pc, #168]	; (9bec <detect_Three_Phase_Voltage+0x104>)
    9b44:	4798      	blx	r3
    9b46:	0003      	movs	r3, r0
    9b48:	60bb      	str	r3, [r7, #8]
		adcYB = (adcYB-10);
    9b4a:	68bb      	ldr	r3, [r7, #8]
    9b4c:	3b0a      	subs	r3, #10
    9b4e:	60bb      	str	r3, [r7, #8]
		if (adcYB<0)
    9b50:	68bb      	ldr	r3, [r7, #8]
    9b52:	2b00      	cmp	r3, #0
    9b54:	da02      	bge.n	9b5c <detect_Three_Phase_Voltage+0x74>
		{
			adcYB = 0;
    9b56:	2300      	movs	r3, #0
    9b58:	60bb      	str	r3, [r7, #8]
    9b5a:	e00f      	b.n	9b7c <detect_Three_Phase_Voltage+0x94>
		}
		else
		{
			adcYB = (((adcYB-10)*655)/1000);
    9b5c:	68bb      	ldr	r3, [r7, #8]
    9b5e:	3b0a      	subs	r3, #10
    9b60:	4a23      	ldr	r2, [pc, #140]	; (9bf0 <detect_Three_Phase_Voltage+0x108>)
    9b62:	435a      	muls	r2, r3
    9b64:	0010      	movs	r0, r2
    9b66:	4b23      	ldr	r3, [pc, #140]	; (9bf4 <detect_Three_Phase_Voltage+0x10c>)
    9b68:	22fa      	movs	r2, #250	; 0xfa
    9b6a:	0091      	lsls	r1, r2, #2
    9b6c:	4798      	blx	r3
    9b6e:	0003      	movs	r3, r0
    9b70:	60bb      	str	r3, [r7, #8]
			if (adcYB<0)
    9b72:	68bb      	ldr	r3, [r7, #8]
    9b74:	2b00      	cmp	r3, #0
    9b76:	da01      	bge.n	9b7c <detect_Three_Phase_Voltage+0x94>
			{
				adcYB = 0;
    9b78:	2300      	movs	r3, #0
    9b7a:	60bb      	str	r3, [r7, #8]
			}
		}
		//int32_t adcBR =  Read_ADC0(ADC_POSITIVE_INPUT_PIN17,2000);
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
    9b7c:	2011      	movs	r0, #17
    9b7e:	4b1b      	ldr	r3, [pc, #108]	; (9bec <detect_Three_Phase_Voltage+0x104>)
    9b80:	4798      	blx	r3
    9b82:	0003      	movs	r3, r0
    9b84:	607b      	str	r3, [r7, #4]
		adcBR = (adcBR-12);
    9b86:	687b      	ldr	r3, [r7, #4]
    9b88:	3b0c      	subs	r3, #12
    9b8a:	607b      	str	r3, [r7, #4]
		if (adcBR<0)
    9b8c:	687b      	ldr	r3, [r7, #4]
    9b8e:	2b00      	cmp	r3, #0
    9b90:	da02      	bge.n	9b98 <detect_Three_Phase_Voltage+0xb0>
		{
			adcBR = 0;
    9b92:	2300      	movs	r3, #0
    9b94:	607b      	str	r3, [r7, #4]
    9b96:	e00f      	b.n	9bb8 <detect_Three_Phase_Voltage+0xd0>
		}
		else
		{
			adcBR = (((adcBR-12)*670)/1000);
    9b98:	687b      	ldr	r3, [r7, #4]
    9b9a:	3b0c      	subs	r3, #12
    9b9c:	4a16      	ldr	r2, [pc, #88]	; (9bf8 <detect_Three_Phase_Voltage+0x110>)
    9b9e:	435a      	muls	r2, r3
    9ba0:	0010      	movs	r0, r2
    9ba2:	4b14      	ldr	r3, [pc, #80]	; (9bf4 <detect_Three_Phase_Voltage+0x10c>)
    9ba4:	22fa      	movs	r2, #250	; 0xfa
    9ba6:	0091      	lsls	r1, r2, #2
    9ba8:	4798      	blx	r3
    9baa:	0003      	movs	r3, r0
    9bac:	607b      	str	r3, [r7, #4]
			if (adcBR<0)
    9bae:	687b      	ldr	r3, [r7, #4]
    9bb0:	2b00      	cmp	r3, #0
    9bb2:	da01      	bge.n	9bb8 <detect_Three_Phase_Voltage+0xd0>
			{
				adcBR = 0;
    9bb4:	2300      	movs	r3, #0
    9bb6:	607b      	str	r3, [r7, #4]
			}
		}
		
		
		Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
    9bb8:	68fa      	ldr	r2, [r7, #12]
    9bba:	4b10      	ldr	r3, [pc, #64]	; (9bfc <detect_Three_Phase_Voltage+0x114>)
    9bbc:	601a      	str	r2, [r3, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
    9bbe:	68ba      	ldr	r2, [r7, #8]
    9bc0:	4b0e      	ldr	r3, [pc, #56]	; (9bfc <detect_Three_Phase_Voltage+0x114>)
    9bc2:	605a      	str	r2, [r3, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
    9bc4:	687a      	ldr	r2, [r7, #4]
    9bc6:	4b0d      	ldr	r3, [pc, #52]	; (9bfc <detect_Three_Phase_Voltage+0x114>)
    9bc8:	609a      	str	r2, [r3, #8]
		
		set_Three_Phase_State_From_Voltage();
    9bca:	4b0d      	ldr	r3, [pc, #52]	; (9c00 <detect_Three_Phase_Voltage+0x118>)
    9bcc:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
    9bce:	4b05      	ldr	r3, [pc, #20]	; (9be4 <detect_Three_Phase_Voltage+0xfc>)
    9bd0:	6818      	ldr	r0, [r3, #0]
    9bd2:	2300      	movs	r3, #0
    9bd4:	2200      	movs	r2, #0
    9bd6:	2100      	movs	r1, #0
    9bd8:	4c0a      	ldr	r4, [pc, #40]	; (9c04 <detect_Three_Phase_Voltage+0x11c>)
    9bda:	47a0      	blx	r4
	}
}
    9bdc:	46c0      	nop			; (mov r8, r8)
    9bde:	46bd      	mov	sp, r7
    9be0:	b005      	add	sp, #20
    9be2:	bd90      	pop	{r4, r7, pc}
    9be4:	20000238 	.word	0x20000238
    9be8:	0000e711 	.word	0x0000e711
    9bec:	0000938d 	.word	0x0000938d
    9bf0:	0000028f 	.word	0x0000028f
    9bf4:	00015575 	.word	0x00015575
    9bf8:	0000029e 	.word	0x0000029e
    9bfc:	200006dc 	.word	0x200006dc
    9c00:	00009c09 	.word	0x00009c09
    9c04:	0000e271 	.word	0x0000e271

00009c08 <set_Three_Phase_State_From_Voltage>:

//Function to set the Three Phase State from acquired voltage
void set_Three_Phase_State_From_Voltage(void) {
    9c08:	b580      	push	{r7, lr}
    9c0a:	b082      	sub	sp, #8
    9c0c:	af00      	add	r7, sp, #0
	
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
    9c0e:	1dfb      	adds	r3, r7, #7
    9c10:	4a2a      	ldr	r2, [pc, #168]	; (9cbc <set_Three_Phase_State_From_Voltage+0xb4>)
    9c12:	7852      	ldrb	r2, [r2, #1]
    9c14:	701a      	strb	r2, [r3, #0]
	
	
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    9c16:	4b2a      	ldr	r3, [pc, #168]	; (9cc0 <set_Three_Phase_State_From_Voltage+0xb8>)
    9c18:	681b      	ldr	r3, [r3, #0]
    9c1a:	2b27      	cmp	r3, #39	; 0x27
    9c1c:	d80b      	bhi.n	9c36 <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
    9c1e:	4b28      	ldr	r3, [pc, #160]	; (9cc0 <set_Three_Phase_State_From_Voltage+0xb8>)
    9c20:	685b      	ldr	r3, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    9c22:	2b27      	cmp	r3, #39	; 0x27
    9c24:	d807      	bhi.n	9c36 <set_Three_Phase_State_From_Voltage+0x2e>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 40))				// if All phase volt, less than 40
    9c26:	4b26      	ldr	r3, [pc, #152]	; (9cc0 <set_Three_Phase_State_From_Voltage+0xb8>)
    9c28:	689b      	ldr	r3, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
    9c2a:	2b27      	cmp	r3, #39	; 0x27
    9c2c:	d803      	bhi.n	9c36 <set_Three_Phase_State_From_Voltage+0x2e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
    9c2e:	4b23      	ldr	r3, [pc, #140]	; (9cbc <set_Three_Phase_State_From_Voltage+0xb4>)
    9c30:	2200      	movs	r2, #0
    9c32:	705a      	strb	r2, [r3, #1]
    9c34:	e02a      	b.n	9c8c <set_Three_Phase_State_From_Voltage+0x84>
	}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9c36:	4b22      	ldr	r3, [pc, #136]	; (9cc0 <set_Three_Phase_State_From_Voltage+0xb8>)
    9c38:	681a      	ldr	r2, [r3, #0]
    9c3a:	4b21      	ldr	r3, [pc, #132]	; (9cc0 <set_Three_Phase_State_From_Voltage+0xb8>)
    9c3c:	685b      	ldr	r3, [r3, #4]
    9c3e:	1ad3      	subs	r3, r2, r3
    9c40:	17da      	asrs	r2, r3, #31
    9c42:	189b      	adds	r3, r3, r2
    9c44:	4053      	eors	r3, r2
    9c46:	4a1f      	ldr	r2, [pc, #124]	; (9cc4 <set_Three_Phase_State_From_Voltage+0xbc>)
    9c48:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    9c4a:	4293      	cmp	r3, r2
    9c4c:	dc17      	bgt.n	9c7e <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9c4e:	4b1c      	ldr	r3, [pc, #112]	; (9cc0 <set_Three_Phase_State_From_Voltage+0xb8>)
    9c50:	685a      	ldr	r2, [r3, #4]
    9c52:	4b1b      	ldr	r3, [pc, #108]	; (9cc0 <set_Three_Phase_State_From_Voltage+0xb8>)
    9c54:	689b      	ldr	r3, [r3, #8]
    9c56:	1ad3      	subs	r3, r2, r3
    9c58:	17da      	asrs	r2, r3, #31
    9c5a:	189b      	adds	r3, r3, r2
    9c5c:	4053      	eors	r3, r2
    9c5e:	4a19      	ldr	r2, [pc, #100]	; (9cc4 <set_Three_Phase_State_From_Voltage+0xbc>)
    9c60:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9c62:	4293      	cmp	r3, r2
    9c64:	dc0b      	bgt.n	9c7e <set_Three_Phase_State_From_Voltage+0x76>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
    9c66:	4b16      	ldr	r3, [pc, #88]	; (9cc0 <set_Three_Phase_State_From_Voltage+0xb8>)
    9c68:	689a      	ldr	r2, [r3, #8]
    9c6a:	4b15      	ldr	r3, [pc, #84]	; (9cc0 <set_Three_Phase_State_From_Voltage+0xb8>)
    9c6c:	681b      	ldr	r3, [r3, #0]
    9c6e:	1ad3      	subs	r3, r2, r3
    9c70:	17da      	asrs	r2, r3, #31
    9c72:	189b      	adds	r3, r3, r2
    9c74:	4053      	eors	r3, r2
    9c76:	4a13      	ldr	r2, [pc, #76]	; (9cc4 <set_Three_Phase_State_From_Voltage+0xbc>)
    9c78:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    9c7a:	4293      	cmp	r3, r2
    9c7c:	dd03      	ble.n	9c86 <set_Three_Phase_State_From_Voltage+0x7e>
	{
		structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
    9c7e:	4b0f      	ldr	r3, [pc, #60]	; (9cbc <set_Three_Phase_State_From_Voltage+0xb4>)
    9c80:	2202      	movs	r2, #2
    9c82:	705a      	strb	r2, [r3, #1]
    9c84:	e002      	b.n	9c8c <set_Three_Phase_State_From_Voltage+0x84>
	}
	else  //all Phase are present
	{
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
    9c86:	4b0d      	ldr	r3, [pc, #52]	; (9cbc <set_Three_Phase_State_From_Voltage+0xb4>)
    9c88:	2203      	movs	r2, #3
    9c8a:	705a      	strb	r2, [r3, #1]
	}
	
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
    9c8c:	4b0b      	ldr	r3, [pc, #44]	; (9cbc <set_Three_Phase_State_From_Voltage+0xb4>)
    9c8e:	785b      	ldrb	r3, [r3, #1]
    9c90:	b2da      	uxtb	r2, r3
    9c92:	4b0d      	ldr	r3, [pc, #52]	; (9cc8 <set_Three_Phase_State_From_Voltage+0xc0>)
    9c94:	781b      	ldrb	r3, [r3, #0]
    9c96:	b2db      	uxtb	r3, r3
    9c98:	429a      	cmp	r2, r3
    9c9a:	d00b      	beq.n	9cb4 <set_Three_Phase_State_From_Voltage+0xac>
	{
		last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
    9c9c:	4b0b      	ldr	r3, [pc, #44]	; (9ccc <set_Three_Phase_State_From_Voltage+0xc4>)
    9c9e:	1dfa      	adds	r2, r7, #7
    9ca0:	7812      	ldrb	r2, [r2, #0]
    9ca2:	701a      	strb	r2, [r3, #0]
		current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
    9ca4:	4b05      	ldr	r3, [pc, #20]	; (9cbc <set_Three_Phase_State_From_Voltage+0xb4>)
    9ca6:	785b      	ldrb	r3, [r3, #1]
    9ca8:	b2da      	uxtb	r2, r3
    9caa:	4b07      	ldr	r3, [pc, #28]	; (9cc8 <set_Three_Phase_State_From_Voltage+0xc0>)
    9cac:	701a      	strb	r2, [r3, #0]
		eventOccured = true;
    9cae:	4b08      	ldr	r3, [pc, #32]	; (9cd0 <set_Three_Phase_State_From_Voltage+0xc8>)
    9cb0:	2201      	movs	r2, #1
    9cb2:	701a      	strb	r2, [r3, #0]
	}
}
    9cb4:	46c0      	nop			; (mov r8, r8)
    9cb6:	46bd      	mov	sp, r7
    9cb8:	b002      	add	sp, #8
    9cba:	bd80      	pop	{r7, pc}
    9cbc:	20000720 	.word	0x20000720
    9cc0:	200006dc 	.word	0x200006dc
    9cc4:	2000065c 	.word	0x2000065c
    9cc8:	200007fc 	.word	0x200007fc
    9ccc:	20000713 	.word	0x20000713
    9cd0:	20000717 	.word	0x20000717

00009cd4 <detect_Motor_Current>:

//Function to detect the Motor Current, From ADC, Average it (using ADC_0) , and store it in the Analog_Parameter_Struct
void detect_Motor_Current(void){
    9cd4:	b590      	push	{r4, r7, lr}
    9cd6:	b083      	sub	sp, #12
    9cd8:	af00      	add	r7, sp, #0
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    9cda:	4b32      	ldr	r3, [pc, #200]	; (9da4 <detect_Motor_Current+0xd0>)
    9cdc:	681a      	ldr	r2, [r3, #0]
    9cde:	2301      	movs	r3, #1
    9ce0:	425b      	negs	r3, r3
    9ce2:	0019      	movs	r1, r3
    9ce4:	0010      	movs	r0, r2
    9ce6:	4b30      	ldr	r3, [pc, #192]	; (9da8 <detect_Motor_Current+0xd4>)
    9ce8:	4798      	blx	r3
    9cea:	0003      	movs	r3, r0
    9cec:	2b01      	cmp	r3, #1
    9cee:	d155      	bne.n	9d9c <detect_Motor_Current+0xc8>
	{
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
    9cf0:	21c8      	movs	r1, #200	; 0xc8
    9cf2:	2010      	movs	r0, #16
    9cf4:	4b2d      	ldr	r3, [pc, #180]	; (9dac <detect_Motor_Current+0xd8>)
    9cf6:	4798      	blx	r3
    9cf8:	0003      	movs	r3, r0
    9cfa:	607b      	str	r3, [r7, #4]
		
		
		if(ADCcurrent>15)
    9cfc:	687b      	ldr	r3, [r7, #4]
    9cfe:	2b0f      	cmp	r3, #15
    9d00:	d906      	bls.n	9d10 <detect_Motor_Current+0x3c>
		{
			ADCcurrent = abs(ADCcurrent - 15);
    9d02:	687b      	ldr	r3, [r7, #4]
    9d04:	3b0f      	subs	r3, #15
    9d06:	17da      	asrs	r2, r3, #31
    9d08:	189b      	adds	r3, r3, r2
    9d0a:	4053      	eors	r3, r2
    9d0c:	607b      	str	r3, [r7, #4]
    9d0e:	e004      	b.n	9d1a <detect_Motor_Current+0x46>
		}
		else if(ADCcurrent <= 15)
    9d10:	687b      	ldr	r3, [r7, #4]
    9d12:	2b0f      	cmp	r3, #15
    9d14:	d801      	bhi.n	9d1a <detect_Motor_Current+0x46>
		{
			ADCcurrent = 0;
    9d16:	2300      	movs	r3, #0
    9d18:	607b      	str	r3, [r7, #4]
		}
		
		xSemaphoreGive(xADC_Semaphore);
    9d1a:	4b22      	ldr	r3, [pc, #136]	; (9da4 <detect_Motor_Current+0xd0>)
    9d1c:	6818      	ldr	r0, [r3, #0]
    9d1e:	2300      	movs	r3, #0
    9d20:	2200      	movs	r2, #0
    9d22:	2100      	movs	r1, #0
    9d24:	4c22      	ldr	r4, [pc, #136]	; (9db0 <detect_Motor_Current+0xdc>)
    9d26:	47a0      	blx	r4
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
    9d28:	4b22      	ldr	r3, [pc, #136]	; (9db4 <detect_Motor_Current+0xe0>)
    9d2a:	687a      	ldr	r2, [r7, #4]
    9d2c:	60da      	str	r2, [r3, #12]
		//ADCcurrent = (ADCcurrent*7225)/1000;
		ADCcurrent = (ADCcurrent*3425)/1000;
    9d2e:	687b      	ldr	r3, [r7, #4]
    9d30:	4a21      	ldr	r2, [pc, #132]	; (9db8 <detect_Motor_Current+0xe4>)
    9d32:	435a      	muls	r2, r3
    9d34:	0010      	movs	r0, r2
    9d36:	4b21      	ldr	r3, [pc, #132]	; (9dbc <detect_Motor_Current+0xe8>)
    9d38:	22fa      	movs	r2, #250	; 0xfa
    9d3a:	0091      	lsls	r1, r2, #2
    9d3c:	4798      	blx	r3
    9d3e:	0003      	movs	r3, r0
    9d40:	607b      	str	r3, [r7, #4]
		if(ADCcurrent<1200 && ADCcurrent!=0)
    9d42:	687b      	ldr	r3, [r7, #4]
    9d44:	4a1e      	ldr	r2, [pc, #120]	; (9dc0 <detect_Motor_Current+0xec>)
    9d46:	4293      	cmp	r3, r2
    9d48:	d810      	bhi.n	9d6c <detect_Motor_Current+0x98>
    9d4a:	687b      	ldr	r3, [r7, #4]
    9d4c:	2b00      	cmp	r3, #0
    9d4e:	d00d      	beq.n	9d6c <detect_Motor_Current+0x98>
		{
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
    9d50:	687b      	ldr	r3, [r7, #4]
    9d52:	4a1c      	ldr	r2, [pc, #112]	; (9dc4 <detect_Motor_Current+0xf0>)
    9d54:	4353      	muls	r3, r2
    9d56:	4a1c      	ldr	r2, [pc, #112]	; (9dc8 <detect_Motor_Current+0xf4>)
    9d58:	1898      	adds	r0, r3, r2
    9d5a:	4b18      	ldr	r3, [pc, #96]	; (9dbc <detect_Motor_Current+0xe8>)
    9d5c:	22fa      	movs	r2, #250	; 0xfa
    9d5e:	0091      	lsls	r1, r2, #2
    9d60:	4798      	blx	r3
    9d62:	0003      	movs	r3, r0
    9d64:	001a      	movs	r2, r3
    9d66:	687b      	ldr	r3, [r7, #4]
    9d68:	189b      	adds	r3, r3, r2
    9d6a:	607b      	str	r3, [r7, #4]
		}
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
    9d6c:	4b11      	ldr	r3, [pc, #68]	; (9db4 <detect_Motor_Current+0xe0>)
    9d6e:	687a      	ldr	r2, [r7, #4]
    9d70:	611a      	str	r2, [r3, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
    9d72:	687a      	ldr	r2, [r7, #4]
    9d74:	4b11      	ldr	r3, [pc, #68]	; (9dbc <detect_Motor_Current+0xe8>)
    9d76:	2164      	movs	r1, #100	; 0x64
    9d78:	0010      	movs	r0, r2
    9d7a:	4798      	blx	r3
    9d7c:	0003      	movs	r3, r0
    9d7e:	b29a      	uxth	r2, r3
    9d80:	4b0c      	ldr	r3, [pc, #48]	; (9db4 <detect_Motor_Current+0xe0>)
    9d82:	829a      	strh	r2, [r3, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
    9d84:	687a      	ldr	r2, [r7, #4]
    9d86:	4b11      	ldr	r3, [pc, #68]	; (9dcc <detect_Motor_Current+0xf8>)
    9d88:	2164      	movs	r1, #100	; 0x64
    9d8a:	0010      	movs	r0, r2
    9d8c:	4798      	blx	r3
    9d8e:	000b      	movs	r3, r1
    9d90:	b29a      	uxth	r2, r3
    9d92:	4b08      	ldr	r3, [pc, #32]	; (9db4 <detect_Motor_Current+0xe0>)
    9d94:	82da      	strh	r2, [r3, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
    9d96:	4b0e      	ldr	r3, [pc, #56]	; (9dd0 <detect_Motor_Current+0xfc>)
    9d98:	2200      	movs	r2, #0
    9d9a:	701a      	strb	r2, [r3, #0]
	}
}
    9d9c:	46c0      	nop			; (mov r8, r8)
    9d9e:	46bd      	mov	sp, r7
    9da0:	b003      	add	sp, #12
    9da2:	bd90      	pop	{r4, r7, pc}
    9da4:	20000238 	.word	0x20000238
    9da8:	0000e711 	.word	0x0000e711
    9dac:	000092d1 	.word	0x000092d1
    9db0:	0000e271 	.word	0x0000e271
    9db4:	200006dc 	.word	0x200006dc
    9db8:	00000d61 	.word	0x00000d61
    9dbc:	00015461 	.word	0x00015461
    9dc0:	000004af 	.word	0x000004af
    9dc4:	fffffef0 	.word	0xfffffef0
    9dc8:	0004fb00 	.word	0x0004fb00
    9dcc:	0001556d 	.word	0x0001556d
    9dd0:	2000023f 	.word	0x2000023f

00009dd4 <should_Detect_New_Current>:

//Function to check if the New Current Reading should be read
bool should_Detect_New_Current(void){
    9dd4:	b580      	push	{r7, lr}
    9dd6:	af00      	add	r7, sp, #0
	
	//todo : add all the conditions checks i.e. motor ON, current consumption ON etc. , and should get new reading every 500ms
	
	return (ucharCurrent_Detect_Flag == 1);
    9dd8:	4b04      	ldr	r3, [pc, #16]	; (9dec <should_Detect_New_Current+0x18>)
    9dda:	781b      	ldrb	r3, [r3, #0]
    9ddc:	b2db      	uxtb	r3, r3
    9dde:	3b01      	subs	r3, #1
    9de0:	425a      	negs	r2, r3
    9de2:	4153      	adcs	r3, r2
    9de4:	b2db      	uxtb	r3, r3
	
	//return (should_Detect_New_Voltage());
}
    9de6:	0018      	movs	r0, r3
    9de8:	46bd      	mov	sp, r7
    9dea:	bd80      	pop	{r7, pc}
    9dec:	2000023f 	.word	0x2000023f

00009df0 <getACPowerState>:


bool getACPowerState(void)
{
    9df0:	b580      	push	{r7, lr}
    9df2:	af00      	add	r7, sp, #0
	//return false;
	return phaseAC;
    9df4:	4b02      	ldr	r3, [pc, #8]	; (9e00 <getACPowerState+0x10>)
    9df6:	781b      	ldrb	r3, [r3, #0]
    9df8:	b2db      	uxtb	r3, r3
}
    9dfa:	0018      	movs	r0, r3
    9dfc:	46bd      	mov	sp, r7
    9dfe:	bd80      	pop	{r7, pc}
    9e00:	2000078a 	.word	0x2000078a

00009e04 <setACPowerState>:

void setACPowerState(bool state)
{
    9e04:	b580      	push	{r7, lr}
    9e06:	b082      	sub	sp, #8
    9e08:	af00      	add	r7, sp, #0
    9e0a:	0002      	movs	r2, r0
    9e0c:	1dfb      	adds	r3, r7, #7
    9e0e:	701a      	strb	r2, [r3, #0]
	phaseAC = state;
    9e10:	4b03      	ldr	r3, [pc, #12]	; (9e20 <setACPowerState+0x1c>)
    9e12:	1dfa      	adds	r2, r7, #7
    9e14:	7812      	ldrb	r2, [r2, #0]
    9e16:	701a      	strb	r2, [r3, #0]
}
    9e18:	46c0      	nop			; (mov r8, r8)
    9e1a:	46bd      	mov	sp, r7
    9e1c:	b002      	add	sp, #8
    9e1e:	bd80      	pop	{r7, pc}
    9e20:	2000078a 	.word	0x2000078a

00009e24 <getAllPhaseState>:

uint8_t getAllPhaseState(void)
{
    9e24:	b580      	push	{r7, lr}
    9e26:	af00      	add	r7, sp, #0
	return allPhase;
    9e28:	4b02      	ldr	r3, [pc, #8]	; (9e34 <getAllPhaseState+0x10>)
    9e2a:	781b      	ldrb	r3, [r3, #0]
    9e2c:	b2db      	uxtb	r3, r3
	//}
	//else
	//{
	//return allPhase;
	//}
}
    9e2e:	0018      	movs	r0, r3
    9e30:	46bd      	mov	sp, r7
    9e32:	bd80      	pop	{r7, pc}
    9e34:	20000739 	.word	0x20000739

00009e38 <setAllPhaseState>:

void setAllPhaseState(uint8_t state)
{
    9e38:	b580      	push	{r7, lr}
    9e3a:	b082      	sub	sp, #8
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	0002      	movs	r2, r0
    9e40:	1dfb      	adds	r3, r7, #7
    9e42:	701a      	strb	r2, [r3, #0]
	allPhase = state;
    9e44:	4b03      	ldr	r3, [pc, #12]	; (9e54 <setAllPhaseState+0x1c>)
    9e46:	1dfa      	adds	r2, r7, #7
    9e48:	7812      	ldrb	r2, [r2, #0]
    9e4a:	701a      	strb	r2, [r3, #0]
}
    9e4c:	46c0      	nop			; (mov r8, r8)
    9e4e:	46bd      	mov	sp, r7
    9e50:	b002      	add	sp, #8
    9e52:	bd80      	pop	{r7, pc}
    9e54:	20000739 	.word	0x20000739

00009e58 <getPhaseSequence>:

bool getPhaseSequence()
{
    9e58:	b580      	push	{r7, lr}
    9e5a:	af00      	add	r7, sp, #0
	return vBoolPhaseSeq;
    9e5c:	4b02      	ldr	r3, [pc, #8]	; (9e68 <getPhaseSequence+0x10>)
    9e5e:	781b      	ldrb	r3, [r3, #0]
    9e60:	b2db      	uxtb	r3, r3
}
    9e62:	0018      	movs	r0, r3
    9e64:	46bd      	mov	sp, r7
    9e66:	bd80      	pop	{r7, pc}
    9e68:	2000074b 	.word	0x2000074b

00009e6c <setPhaseSequence>:

void setPhaseSequence(bool phaseSequence)
{
    9e6c:	b580      	push	{r7, lr}
    9e6e:	b082      	sub	sp, #8
    9e70:	af00      	add	r7, sp, #0
    9e72:	0002      	movs	r2, r0
    9e74:	1dfb      	adds	r3, r7, #7
    9e76:	701a      	strb	r2, [r3, #0]
	vBoolPhaseSeq=phaseSequence;
    9e78:	4b03      	ldr	r3, [pc, #12]	; (9e88 <setPhaseSequence+0x1c>)
    9e7a:	1dfa      	adds	r2, r7, #7
    9e7c:	7812      	ldrb	r2, [r2, #0]
    9e7e:	701a      	strb	r2, [r3, #0]
}
    9e80:	46c0      	nop			; (mov r8, r8)
    9e82:	46bd      	mov	sp, r7
    9e84:	b002      	add	sp, #8
    9e86:	bd80      	pop	{r7, pc}
    9e88:	2000074b 	.word	0x2000074b

00009e8c <getMotorState>:


bool getMotorState(void)
{
    9e8c:	b580      	push	{r7, lr}
    9e8e:	af00      	add	r7, sp, #0
	return mFeedback;
    9e90:	4b02      	ldr	r3, [pc, #8]	; (9e9c <getMotorState+0x10>)
    9e92:	781b      	ldrb	r3, [r3, #0]
    9e94:	b2db      	uxtb	r3, r3
}
    9e96:	0018      	movs	r0, r3
    9e98:	46bd      	mov	sp, r7
    9e9a:	bd80      	pop	{r7, pc}
    9e9c:	2000071a 	.word	0x2000071a

00009ea0 <setMotorState>:

void setMotorState(bool state)
{
    9ea0:	b580      	push	{r7, lr}
    9ea2:	b082      	sub	sp, #8
    9ea4:	af00      	add	r7, sp, #0
    9ea6:	0002      	movs	r2, r0
    9ea8:	1dfb      	adds	r3, r7, #7
    9eaa:	701a      	strb	r2, [r3, #0]
	mFeedback = state;
    9eac:	4b0a      	ldr	r3, [pc, #40]	; (9ed8 <setMotorState+0x38>)
    9eae:	1dfa      	adds	r2, r7, #7
    9eb0:	7812      	ldrb	r2, [r2, #0]
    9eb2:	701a      	strb	r2, [r3, #0]
	if (state)
    9eb4:	1dfb      	adds	r3, r7, #7
    9eb6:	781b      	ldrb	r3, [r3, #0]
    9eb8:	2b00      	cmp	r3, #0
    9eba:	d004      	beq.n	9ec6 <setMotorState+0x26>
	{
		MOTOR_ON_LED_ON;
    9ebc:	2100      	movs	r1, #0
    9ebe:	2005      	movs	r0, #5
    9ec0:	4b06      	ldr	r3, [pc, #24]	; (9edc <setMotorState+0x3c>)
    9ec2:	4798      	blx	r3
	}
	else
	{
		MOTOR_ON_LED_OFF;
	}
}
    9ec4:	e003      	b.n	9ece <setMotorState+0x2e>
		MOTOR_ON_LED_OFF;
    9ec6:	2101      	movs	r1, #1
    9ec8:	2005      	movs	r0, #5
    9eca:	4b04      	ldr	r3, [pc, #16]	; (9edc <setMotorState+0x3c>)
    9ecc:	4798      	blx	r3
}
    9ece:	46c0      	nop			; (mov r8, r8)
    9ed0:	46bd      	mov	sp, r7
    9ed2:	b002      	add	sp, #8
    9ed4:	bd80      	pop	{r7, pc}
    9ed6:	46c0      	nop			; (mov r8, r8)
    9ed8:	2000071a 	.word	0x2000071a
    9edc:	0000881d 	.word	0x0000881d

00009ee0 <getMotorState_from_pin>:

bool getMotorState_from_pin(void)
{
    9ee0:	b590      	push	{r4, r7, lr}
    9ee2:	b083      	sub	sp, #12
    9ee4:	af00      	add	r7, sp, #0
	uint8_t p1;
	bool p2, p3, p4;
	readSensorState(&p1, &p2, &p3, &p4);
    9ee6:	1d3b      	adds	r3, r7, #4
    9ee8:	1d7a      	adds	r2, r7, #5
    9eea:	1db9      	adds	r1, r7, #6
    9eec:	1df8      	adds	r0, r7, #7
    9eee:	4c06      	ldr	r4, [pc, #24]	; (9f08 <getMotorState_from_pin+0x28>)
    9ef0:	47a0      	blx	r4
	setMotorState(p3);
    9ef2:	1d7b      	adds	r3, r7, #5
    9ef4:	781b      	ldrb	r3, [r3, #0]
    9ef6:	0018      	movs	r0, r3
    9ef8:	4b04      	ldr	r3, [pc, #16]	; (9f0c <getMotorState_from_pin+0x2c>)
    9efa:	4798      	blx	r3
	return p3;
    9efc:	1d7b      	adds	r3, r7, #5
    9efe:	781b      	ldrb	r3, [r3, #0]
}
    9f00:	0018      	movs	r0, r3
    9f02:	46bd      	mov	sp, r7
    9f04:	b003      	add	sp, #12
    9f06:	bd90      	pop	{r4, r7, pc}
    9f08:	00009f11 	.word	0x00009f11
    9f0c:	00009ea1 	.word	0x00009ea1

00009f10 <readSensorState>:



void readSensorState(uint8_t *allPhase, bool *phaseSeq,bool *motor, bool *acPhase)
{
    9f10:	b590      	push	{r4, r7, lr}
    9f12:	b087      	sub	sp, #28
    9f14:	af00      	add	r7, sp, #0
    9f16:	60f8      	str	r0, [r7, #12]
    9f18:	60b9      	str	r1, [r7, #8]
    9f1a:	607a      	str	r2, [r7, #4]
    9f1c:	603b      	str	r3, [r7, #0]
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
    9f1e:	4b37      	ldr	r3, [pc, #220]	; (9ffc <readSensorState+0xec>)
    9f20:	785b      	ldrb	r3, [r3, #1]
    9f22:	b2da      	uxtb	r2, r3
    9f24:	68fb      	ldr	r3, [r7, #12]
    9f26:	701a      	strb	r2, [r3, #0]
	//*phaseSeq = structThreePhase_state.u8t_phase_sequence_flag;
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    9f28:	4b34      	ldr	r3, [pc, #208]	; (9ffc <readSensorState+0xec>)
    9f2a:	781b      	ldrb	r3, [r3, #0]
    9f2c:	b2db      	uxtb	r3, r3
    9f2e:	2b02      	cmp	r3, #2
    9f30:	d103      	bne.n	9f3a <readSensorState+0x2a>
	{
		*phaseSeq=true;
    9f32:	68bb      	ldr	r3, [r7, #8]
    9f34:	2201      	movs	r2, #1
    9f36:	701a      	strb	r2, [r3, #0]
    9f38:	e002      	b.n	9f40 <readSensorState+0x30>
	}
	else
	{
		*phaseSeq = false;
    9f3a:	68bb      	ldr	r3, [r7, #8]
    9f3c:	2200      	movs	r2, #0
    9f3e:	701a      	strb	r2, [r3, #0]
	//{
	//*p1 = false;
	//}

	// If MotorFeedback Detection is disabled
	if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_OFF)
    9f40:	4b2f      	ldr	r3, [pc, #188]	; (a000 <readSensorState+0xf0>)
    9f42:	2225      	movs	r2, #37	; 0x25
    9f44:	5c9b      	ldrb	r3, [r3, r2]
    9f46:	2b00      	cmp	r3, #0
    9f48:	d106      	bne.n	9f58 <readSensorState+0x48>
	{
		*motor  = getMotorState();
    9f4a:	4b2e      	ldr	r3, [pc, #184]	; (a004 <readSensorState+0xf4>)
    9f4c:	4798      	blx	r3
    9f4e:	0003      	movs	r3, r0
    9f50:	001a      	movs	r2, r3
    9f52:	687b      	ldr	r3, [r7, #4]
    9f54:	701a      	strb	r2, [r3, #0]
    9f56:	e020      	b.n	9f9a <readSensorState+0x8a>
	}
	// If Motor Feedback is to be detected using Current
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
    9f58:	4b29      	ldr	r3, [pc, #164]	; (a000 <readSensorState+0xf0>)
    9f5a:	2225      	movs	r2, #37	; 0x25
    9f5c:	5c9b      	ldrb	r3, [r3, r2]
    9f5e:	2b01      	cmp	r3, #1
    9f60:	d106      	bne.n	9f70 <readSensorState+0x60>
	{
		*motor = checkMotorStatusUsingCurrent();
    9f62:	4b29      	ldr	r3, [pc, #164]	; (a008 <readSensorState+0xf8>)
    9f64:	4798      	blx	r3
    9f66:	0003      	movs	r3, r0
    9f68:	001a      	movs	r2, r3
    9f6a:	687b      	ldr	r3, [r7, #4]
    9f6c:	701a      	strb	r2, [r3, #0]
    9f6e:	e014      	b.n	9f9a <readSensorState+0x8a>
		
	}
	// if Motor Feedback is to be detected using HW Feedback Circuit
	else if(user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_ON)
    9f70:	4b23      	ldr	r3, [pc, #140]	; (a000 <readSensorState+0xf0>)
    9f72:	2225      	movs	r2, #37	; 0x25
    9f74:	5c9b      	ldrb	r3, [r3, r2]
    9f76:	2b02      	cmp	r3, #2
    9f78:	d10f      	bne.n	9f9a <readSensorState+0x8a>
	{
		*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
    9f7a:	202e      	movs	r0, #46	; 0x2e
    9f7c:	4b23      	ldr	r3, [pc, #140]	; (a00c <readSensorState+0xfc>)
    9f7e:	4798      	blx	r3
    9f80:	0003      	movs	r3, r0
    9f82:	1e5a      	subs	r2, r3, #1
    9f84:	4193      	sbcs	r3, r2
    9f86:	b2db      	uxtb	r3, r3
    9f88:	2201      	movs	r2, #1
    9f8a:	4053      	eors	r3, r2
    9f8c:	b2db      	uxtb	r3, r3
    9f8e:	1c1a      	adds	r2, r3, #0
    9f90:	2301      	movs	r3, #1
    9f92:	4013      	ands	r3, r2
    9f94:	b2da      	uxtb	r2, r3
    9f96:	687b      	ldr	r3, [r7, #4]
    9f98:	701a      	strb	r2, [r3, #0]
	}


	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
    9f9a:	2317      	movs	r3, #23
    9f9c:	18fb      	adds	r3, r7, r3
    9f9e:	2201      	movs	r2, #1
    9fa0:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    9fa2:	2317      	movs	r3, #23
    9fa4:	18fc      	adds	r4, r7, r3
    9fa6:	4b1a      	ldr	r3, [pc, #104]	; (a010 <readSensorState+0x100>)
    9fa8:	2100      	movs	r1, #0
    9faa:	0018      	movs	r0, r3
    9fac:	4b19      	ldr	r3, [pc, #100]	; (a014 <readSensorState+0x104>)
    9fae:	4798      	blx	r3
    9fb0:	0003      	movs	r3, r0
    9fb2:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
    9fb4:	23fa      	movs	r3, #250	; 0xfa
    9fb6:	005b      	lsls	r3, r3, #1
    9fb8:	0018      	movs	r0, r3
    9fba:	4b17      	ldr	r3, [pc, #92]	; (a018 <readSensorState+0x108>)
    9fbc:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
    9fbe:	2317      	movs	r3, #23
    9fc0:	18fc      	adds	r4, r7, r3
    9fc2:	4b13      	ldr	r3, [pc, #76]	; (a010 <readSensorState+0x100>)
    9fc4:	2100      	movs	r1, #0
    9fc6:	0018      	movs	r0, r3
    9fc8:	4b12      	ldr	r3, [pc, #72]	; (a014 <readSensorState+0x104>)
    9fca:	4798      	blx	r3
    9fcc:	0003      	movs	r3, r0
    9fce:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
    9fd0:	2317      	movs	r3, #23
    9fd2:	18fb      	adds	r3, r7, r3
    9fd4:	781b      	ldrb	r3, [r3, #0]
    9fd6:	2204      	movs	r2, #4
    9fd8:	4013      	ands	r3, r2
    9fda:	d003      	beq.n	9fe4 <readSensorState+0xd4>
	{
		isACpowerAvailable = true;
    9fdc:	4b0f      	ldr	r3, [pc, #60]	; (a01c <readSensorState+0x10c>)
    9fde:	2201      	movs	r2, #1
    9fe0:	701a      	strb	r2, [r3, #0]
    9fe2:	e002      	b.n	9fea <readSensorState+0xda>
	}
	else
	{
		isACpowerAvailable = false;
    9fe4:	4b0d      	ldr	r3, [pc, #52]	; (a01c <readSensorState+0x10c>)
    9fe6:	2200      	movs	r2, #0
    9fe8:	701a      	strb	r2, [r3, #0]
	}
	
	*acPhase =  isACpowerAvailable;
    9fea:	4b0c      	ldr	r3, [pc, #48]	; (a01c <readSensorState+0x10c>)
    9fec:	781b      	ldrb	r3, [r3, #0]
    9fee:	b2da      	uxtb	r2, r3
    9ff0:	683b      	ldr	r3, [r7, #0]
    9ff2:	701a      	strb	r2, [r3, #0]
}
    9ff4:	46c0      	nop			; (mov r8, r8)
    9ff6:	46bd      	mov	sp, r7
    9ff8:	b007      	add	sp, #28
    9ffa:	bd90      	pop	{r4, r7, pc}
    9ffc:	20000720 	.word	0x20000720
    a000:	2000065c 	.word	0x2000065c
    a004:	00009e8d 	.word	0x00009e8d
    a008:	0000a021 	.word	0x0000a021
    a00c:	000087d9 	.word	0x000087d9
    a010:	2000083c 	.word	0x2000083c
    a014:	0000838d 	.word	0x0000838d
    a018:	0000f019 	.word	0x0000f019
    a01c:	20000765 	.word	0x20000765

0000a020 <checkMotorStatusUsingCurrent>:

bool checkMotorStatusUsingCurrent(void)
{
    a020:	b580      	push	{r7, lr}
    a022:	af00      	add	r7, sp, #0
	if(stopMotorCommandGiven)
    a024:	4b0e      	ldr	r3, [pc, #56]	; (a060 <checkMotorStatusUsingCurrent+0x40>)
    a026:	781b      	ldrb	r3, [r3, #0]
    a028:	2b00      	cmp	r3, #0
    a02a:	d00d      	beq.n	a048 <checkMotorStatusUsingCurrent+0x28>
	{
		if(Analog_Parameter_Struct.Motor_Current_IntPart <= (fdbkRefCurrent/2))
    a02c:	4b0d      	ldr	r3, [pc, #52]	; (a064 <checkMotorStatusUsingCurrent+0x44>)
    a02e:	8a9b      	ldrh	r3, [r3, #20]
    a030:	b29a      	uxth	r2, r3
    a032:	4b0d      	ldr	r3, [pc, #52]	; (a068 <checkMotorStatusUsingCurrent+0x48>)
    a034:	781b      	ldrb	r3, [r3, #0]
    a036:	085b      	lsrs	r3, r3, #1
    a038:	b2db      	uxtb	r3, r3
    a03a:	b29b      	uxth	r3, r3
    a03c:	429a      	cmp	r2, r3
    a03e:	d801      	bhi.n	a044 <checkMotorStatusUsingCurrent+0x24>
		{
			return false;
    a040:	2300      	movs	r3, #0
    a042:	e009      	b.n	a058 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return true;
    a044:	2301      	movs	r3, #1
    a046:	e007      	b.n	a058 <checkMotorStatusUsingCurrent+0x38>
		}
	}
	else
	{
		if (Analog_Parameter_Struct.Motor_Current_IntPart > 4)
    a048:	4b06      	ldr	r3, [pc, #24]	; (a064 <checkMotorStatusUsingCurrent+0x44>)
    a04a:	8a9b      	ldrh	r3, [r3, #20]
    a04c:	b29b      	uxth	r3, r3
    a04e:	2b04      	cmp	r3, #4
    a050:	d901      	bls.n	a056 <checkMotorStatusUsingCurrent+0x36>
		{
			return true;
    a052:	2301      	movs	r3, #1
    a054:	e000      	b.n	a058 <checkMotorStatusUsingCurrent+0x38>
		}
		else
		{
			return false;
    a056:	2300      	movs	r3, #0
		}
	}
}
    a058:	0018      	movs	r0, r3
    a05a:	46bd      	mov	sp, r7
    a05c:	bd80      	pop	{r7, pc}
    a05e:	46c0      	nop			; (mov r8, r8)
    a060:	20000815 	.word	0x20000815
    a064:	200006dc 	.word	0x200006dc
    a068:	200007b0 	.word	0x200007b0

0000a06c <detectMotorStateChangeUsingCurrent>:

bool detectMotorStateChangeUsingCurrent(void)
{
    a06c:	b5b0      	push	{r4, r5, r7, lr}
    a06e:	af00      	add	r7, sp, #0
	if (getMotorState() != checkMotorStatusUsingCurrent())
    a070:	4b07      	ldr	r3, [pc, #28]	; (a090 <detectMotorStateChangeUsingCurrent+0x24>)
    a072:	4798      	blx	r3
    a074:	0003      	movs	r3, r0
    a076:	001c      	movs	r4, r3
    a078:	4b06      	ldr	r3, [pc, #24]	; (a094 <detectMotorStateChangeUsingCurrent+0x28>)
    a07a:	4798      	blx	r3
    a07c:	0003      	movs	r3, r0
    a07e:	429c      	cmp	r4, r3
    a080:	d001      	beq.n	a086 <detectMotorStateChangeUsingCurrent+0x1a>
	{
		return true;
    a082:	2301      	movs	r3, #1
    a084:	e000      	b.n	a088 <detectMotorStateChangeUsingCurrent+0x1c>
	}
	else
	{
		return false;
    a086:	2300      	movs	r3, #0
	}
}
    a088:	0018      	movs	r0, r3
    a08a:	46bd      	mov	sp, r7
    a08c:	bdb0      	pop	{r4, r5, r7, pc}
    a08e:	46c0      	nop			; (mov r8, r8)
    a090:	00009e8d 	.word	0x00009e8d
    a094:	0000a021 	.word	0x0000a021

0000a098 <updateSensorState>:


void updateSensorState(uint8_t var3PhaseState, bool var3PhaseSeq, bool motorState, bool acPhaseState)
{
    a098:	b5b0      	push	{r4, r5, r7, lr}
    a09a:	b084      	sub	sp, #16
    a09c:	af00      	add	r7, sp, #0
    a09e:	0005      	movs	r5, r0
    a0a0:	000c      	movs	r4, r1
    a0a2:	0010      	movs	r0, r2
    a0a4:	0019      	movs	r1, r3
    a0a6:	1dfb      	adds	r3, r7, #7
    a0a8:	1c2a      	adds	r2, r5, #0
    a0aa:	701a      	strb	r2, [r3, #0]
    a0ac:	1dbb      	adds	r3, r7, #6
    a0ae:	1c22      	adds	r2, r4, #0
    a0b0:	701a      	strb	r2, [r3, #0]
    a0b2:	1d7b      	adds	r3, r7, #5
    a0b4:	1c02      	adds	r2, r0, #0
    a0b6:	701a      	strb	r2, [r3, #0]
    a0b8:	1d3b      	adds	r3, r7, #4
    a0ba:	1c0a      	adds	r2, r1, #0
    a0bc:	701a      	strb	r2, [r3, #0]
	setAllPhaseState(var3PhaseState); // allPhase = p1;
    a0be:	1dfb      	adds	r3, r7, #7
    a0c0:	781b      	ldrb	r3, [r3, #0]
    a0c2:	0018      	movs	r0, r3
    a0c4:	4b29      	ldr	r3, [pc, #164]	; (a16c <updateSensorState+0xd4>)
    a0c6:	4798      	blx	r3
	setPhaseSequence(var3PhaseSeq);
    a0c8:	1dbb      	adds	r3, r7, #6
    a0ca:	781b      	ldrb	r3, [r3, #0]
    a0cc:	0018      	movs	r0, r3
    a0ce:	4b28      	ldr	r3, [pc, #160]	; (a170 <updateSensorState+0xd8>)
    a0d0:	4798      	blx	r3
	setMotorState(motorState); // mFeedback = p2;
    a0d2:	1d7b      	adds	r3, r7, #5
    a0d4:	781b      	ldrb	r3, [r3, #0]
    a0d6:	0018      	movs	r0, r3
    a0d8:	4b26      	ldr	r3, [pc, #152]	; (a174 <updateSensorState+0xdc>)
    a0da:	4798      	blx	r3
	setACPowerState(acPhaseState); // phaseAC = p4;
    a0dc:	1d3b      	adds	r3, r7, #4
    a0de:	781b      	ldrb	r3, [r3, #0]
    a0e0:	0018      	movs	r0, r3
    a0e2:	4b25      	ldr	r3, [pc, #148]	; (a178 <updateSensorState+0xe0>)
    a0e4:	4798      	blx	r3
	
	if(getAllPhaseState()==AC_3PH && getACPowerState())
    a0e6:	4b25      	ldr	r3, [pc, #148]	; (a17c <updateSensorState+0xe4>)
    a0e8:	4798      	blx	r3
    a0ea:	0003      	movs	r3, r0
    a0ec:	2b03      	cmp	r3, #3
    a0ee:	d12e      	bne.n	a14e <updateSensorState+0xb6>
    a0f0:	4b23      	ldr	r3, [pc, #140]	; (a180 <updateSensorState+0xe8>)
    a0f2:	4798      	blx	r3
    a0f4:	1e03      	subs	r3, r0, #0
    a0f6:	d02a      	beq.n	a14e <updateSensorState+0xb6>
	{
		bool tempPhaseSequence = true;									// init temp variable with default value as correct sequence
    a0f8:	230f      	movs	r3, #15
    a0fa:	18fb      	adds	r3, r7, r3
    a0fc:	2201      	movs	r2, #1
    a0fe:	701a      	strb	r2, [r3, #0]

		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
    a100:	4b20      	ldr	r3, [pc, #128]	; (a184 <updateSensorState+0xec>)
    a102:	2224      	movs	r2, #36	; 0x24
    a104:	5c9b      	ldrb	r3, [r3, r2]
    a106:	2b00      	cmp	r3, #0
    a108:	d005      	beq.n	a116 <updateSensorState+0x7e>
		{
			tempPhaseSequence = getPhaseSequence();						// save the current phase sequence  in temp varialbe for further use
    a10a:	230f      	movs	r3, #15
    a10c:	18fc      	adds	r4, r7, r3
    a10e:	4b1e      	ldr	r3, [pc, #120]	; (a188 <updateSensorState+0xf0>)
    a110:	4798      	blx	r3
    a112:	0003      	movs	r3, r0
    a114:	7023      	strb	r3, [r4, #0]
		}

		if(tempPhaseSequence)											// check if sequence is correct
    a116:	230f      	movs	r3, #15
    a118:	18fb      	adds	r3, r7, r3
    a11a:	781b      	ldrb	r3, [r3, #0]
    a11c:	2b00      	cmp	r3, #0
    a11e:	d004      	beq.n	a12a <updateSensorState+0x92>
		{
			THREEPHASE_OK_LED_ON;
    a120:	2100      	movs	r1, #0
    a122:	2027      	movs	r0, #39	; 0x27
    a124:	4b19      	ldr	r3, [pc, #100]	; (a18c <updateSensorState+0xf4>)
    a126:	4798      	blx	r3
    a128:	e003      	b.n	a132 <updateSensorState+0x9a>
		}
		else
		{
			THREEPHASE_OK_LED_OFF;
    a12a:	2101      	movs	r1, #1
    a12c:	2027      	movs	r0, #39	; 0x27
    a12e:	4b17      	ldr	r3, [pc, #92]	; (a18c <updateSensorState+0xf4>)
    a130:	4798      	blx	r3
		}
		
		if((bool)user_settings_parameter_struct.autoStartAddress)
    a132:	4b14      	ldr	r3, [pc, #80]	; (a184 <updateSensorState+0xec>)
    a134:	785b      	ldrb	r3, [r3, #1]
    a136:	2b00      	cmp	r3, #0
    a138:	d004      	beq.n	a144 <updateSensorState+0xac>
		{
			AUTO_ON_LED_ON;
    a13a:	2100      	movs	r1, #0
    a13c:	2028      	movs	r0, #40	; 0x28
    a13e:	4b13      	ldr	r3, [pc, #76]	; (a18c <updateSensorState+0xf4>)
    a140:	4798      	blx	r3
	{
    a142:	e00f      	b.n	a164 <updateSensorState+0xcc>
		}
		else
		{
			AUTO_ON_LED_OFF;
    a144:	2101      	movs	r1, #1
    a146:	2028      	movs	r0, #40	; 0x28
    a148:	4b10      	ldr	r3, [pc, #64]	; (a18c <updateSensorState+0xf4>)
    a14a:	4798      	blx	r3
	{
    a14c:	e00a      	b.n	a164 <updateSensorState+0xcc>
		}
	}
	else
	{
		THREEPHASE_OK_LED_OFF;
    a14e:	2101      	movs	r1, #1
    a150:	2027      	movs	r0, #39	; 0x27
    a152:	4b0e      	ldr	r3, [pc, #56]	; (a18c <updateSensorState+0xf4>)
    a154:	4798      	blx	r3
		AUTO_ON_LED_OFF;
    a156:	2101      	movs	r1, #1
    a158:	2028      	movs	r0, #40	; 0x28
    a15a:	4b0c      	ldr	r3, [pc, #48]	; (a18c <updateSensorState+0xf4>)
    a15c:	4798      	blx	r3
		startTimerOn=false;
    a15e:	4b0c      	ldr	r3, [pc, #48]	; (a190 <updateSensorState+0xf8>)
    a160:	2200      	movs	r2, #0
    a162:	701a      	strb	r2, [r3, #0]
	//
	//if (!getACPowerState() || !getAllPhaseState())
	//{
	//startTimerOn = false;
	//}
}
    a164:	46c0      	nop			; (mov r8, r8)
    a166:	46bd      	mov	sp, r7
    a168:	b004      	add	sp, #16
    a16a:	bdb0      	pop	{r4, r5, r7, pc}
    a16c:	00009e39 	.word	0x00009e39
    a170:	00009e6d 	.word	0x00009e6d
    a174:	00009ea1 	.word	0x00009ea1
    a178:	00009e05 	.word	0x00009e05
    a17c:	00009e25 	.word	0x00009e25
    a180:	00009df1 	.word	0x00009df1
    a184:	2000065c 	.word	0x2000065c
    a188:	00009e59 	.word	0x00009e59
    a18c:	0000881d 	.word	0x0000881d
    a190:	20000772 	.word	0x20000772

0000a194 <resetAutoStart>:

void resetAutoStart(bool setChange)
{
    a194:	b580      	push	{r7, lr}
    a196:	b082      	sub	sp, #8
    a198:	af00      	add	r7, sp, #0
    a19a:	0002      	movs	r2, r0
    a19c:	1dfb      	adds	r3, r7, #7
    a19e:	701a      	strb	r2, [r3, #0]
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
    a1a0:	4b0e      	ldr	r3, [pc, #56]	; (a1dc <resetAutoStart+0x48>)
    a1a2:	785b      	ldrb	r3, [r3, #1]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d107      	bne.n	a1b8 <resetAutoStart+0x24>
	{
		startTimerOn=false;
    a1a8:	4b0d      	ldr	r3, [pc, #52]	; (a1e0 <resetAutoStart+0x4c>)
    a1aa:	2200      	movs	r2, #0
    a1ac:	701a      	strb	r2, [r3, #0]
		AUTO_ON_LED_OFF;
    a1ae:	2101      	movs	r1, #1
    a1b0:	2028      	movs	r0, #40	; 0x28
    a1b2:	4b0c      	ldr	r3, [pc, #48]	; (a1e4 <resetAutoStart+0x50>)
    a1b4:	4798      	blx	r3
		if (setChange)
		{
			triggerAutoStart();
		}
	}
}
    a1b6:	e00d      	b.n	a1d4 <resetAutoStart+0x40>
	else if ((bool)user_settings_parameter_struct.autoStartAddress)
    a1b8:	4b08      	ldr	r3, [pc, #32]	; (a1dc <resetAutoStart+0x48>)
    a1ba:	785b      	ldrb	r3, [r3, #1]
    a1bc:	2b00      	cmp	r3, #0
    a1be:	d009      	beq.n	a1d4 <resetAutoStart+0x40>
		AUTO_ON_LED_ON;
    a1c0:	2100      	movs	r1, #0
    a1c2:	2028      	movs	r0, #40	; 0x28
    a1c4:	4b07      	ldr	r3, [pc, #28]	; (a1e4 <resetAutoStart+0x50>)
    a1c6:	4798      	blx	r3
		if (setChange)
    a1c8:	1dfb      	adds	r3, r7, #7
    a1ca:	781b      	ldrb	r3, [r3, #0]
    a1cc:	2b00      	cmp	r3, #0
    a1ce:	d001      	beq.n	a1d4 <resetAutoStart+0x40>
			triggerAutoStart();
    a1d0:	4b05      	ldr	r3, [pc, #20]	; (a1e8 <resetAutoStart+0x54>)
    a1d2:	4798      	blx	r3
}
    a1d4:	46c0      	nop			; (mov r8, r8)
    a1d6:	46bd      	mov	sp, r7
    a1d8:	b002      	add	sp, #8
    a1da:	bd80      	pop	{r7, pc}
    a1dc:	2000065c 	.word	0x2000065c
    a1e0:	20000772 	.word	0x20000772
    a1e4:	0000881d 	.word	0x0000881d
    a1e8:	0000a1ed 	.word	0x0000a1ed

0000a1ec <triggerAutoStart>:

void triggerAutoStart(void)
{
    a1ec:	b580      	push	{r7, lr}
    a1ee:	af00      	add	r7, sp, #0
	if (!getMotorState())
    a1f0:	4b0d      	ldr	r3, [pc, #52]	; (a228 <triggerAutoStart+0x3c>)
    a1f2:	4798      	blx	r3
    a1f4:	0003      	movs	r3, r0
    a1f6:	001a      	movs	r2, r3
    a1f8:	2301      	movs	r3, #1
    a1fa:	4053      	eors	r3, r2
    a1fc:	b2db      	uxtb	r3, r3
    a1fe:	2b00      	cmp	r3, #0
    a200:	d00f      	beq.n	a222 <triggerAutoStart+0x36>
	{
		if (getAllPhaseState() && getACPowerState())
    a202:	4b0a      	ldr	r3, [pc, #40]	; (a22c <triggerAutoStart+0x40>)
    a204:	4798      	blx	r3
    a206:	1e03      	subs	r3, r0, #0
    a208:	d00b      	beq.n	a222 <triggerAutoStart+0x36>
    a20a:	4b09      	ldr	r3, [pc, #36]	; (a230 <triggerAutoStart+0x44>)
    a20c:	4798      	blx	r3
    a20e:	1e03      	subs	r3, r0, #0
    a210:	d007      	beq.n	a222 <triggerAutoStart+0x36>
		{
			startTimerOn = true;
    a212:	4b08      	ldr	r3, [pc, #32]	; (a234 <triggerAutoStart+0x48>)
    a214:	2201      	movs	r2, #1
    a216:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
    a218:	4b07      	ldr	r3, [pc, #28]	; (a238 <triggerAutoStart+0x4c>)
    a21a:	4798      	blx	r3
    a21c:	0002      	movs	r2, r0
    a21e:	4b07      	ldr	r3, [pc, #28]	; (a23c <triggerAutoStart+0x50>)
    a220:	601a      	str	r2, [r3, #0]
		}
	}
}
    a222:	46c0      	nop			; (mov r8, r8)
    a224:	46bd      	mov	sp, r7
    a226:	bd80      	pop	{r7, pc}
    a228:	00009e8d 	.word	0x00009e8d
    a22c:	00009e25 	.word	0x00009e25
    a230:	00009df1 	.word	0x00009df1
    a234:	20000772 	.word	0x20000772
    a238:	0000f37d 	.word	0x0000f37d
    a23c:	20000778 	.word	0x20000778

0000a240 <operateOnEvent>:

void operateOnEvent(void)
{
    a240:	b590      	push	{r4, r7, lr}
    a242:	b083      	sub	sp, #12
    a244:	af00      	add	r7, sp, #0
	uint8_t t3Phase;
	//bool t3Phase, tMotor, tacPhase;
	bool tPhaseSeq, tMotor, tacPhase;
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
    a246:	1d3b      	adds	r3, r7, #4
    a248:	1d7a      	adds	r2, r7, #5
    a24a:	1db9      	adds	r1, r7, #6
    a24c:	1df8      	adds	r0, r7, #7
    a24e:	4c67      	ldr	r4, [pc, #412]	; (a3ec <operateOnEvent+0x1ac>)
    a250:	47a0      	blx	r4
	eventOccured = false;
    a252:	4b67      	ldr	r3, [pc, #412]	; (a3f0 <operateOnEvent+0x1b0>)
    a254:	2200      	movs	r2, #0
    a256:	701a      	strb	r2, [r3, #0]
	
	//todo: add current phase Sequence and previous phase sequence is equals check here
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
    a258:	4b66      	ldr	r3, [pc, #408]	; (a3f4 <operateOnEvent+0x1b4>)
    a25a:	4798      	blx	r3
    a25c:	0003      	movs	r3, r0
    a25e:	001a      	movs	r2, r3
    a260:	1dfb      	adds	r3, r7, #7
    a262:	781b      	ldrb	r3, [r3, #0]
    a264:	429a      	cmp	r2, r3
    a266:	d110      	bne.n	a28a <operateOnEvent+0x4a>
    a268:	4b63      	ldr	r3, [pc, #396]	; (a3f8 <operateOnEvent+0x1b8>)
    a26a:	4798      	blx	r3
    a26c:	0003      	movs	r3, r0
    a26e:	001a      	movs	r2, r3
    a270:	1d7b      	adds	r3, r7, #5
    a272:	781b      	ldrb	r3, [r3, #0]
    a274:	429a      	cmp	r2, r3
    a276:	d108      	bne.n	a28a <operateOnEvent+0x4a>
    a278:	4b60      	ldr	r3, [pc, #384]	; (a3fc <operateOnEvent+0x1bc>)
    a27a:	4798      	blx	r3
    a27c:	0003      	movs	r3, r0
    a27e:	001a      	movs	r2, r3
    a280:	1d3b      	adds	r3, r7, #4
    a282:	781b      	ldrb	r3, [r3, #0]
    a284:	429a      	cmp	r2, r3
    a286:	d100      	bne.n	a28a <operateOnEvent+0x4a>
    a288:	e0ab      	b.n	a3e2 <operateOnEvent+0x1a2>
	{
		return;
	}
	if (getMotorState())	//motorOn
    a28a:	4b5b      	ldr	r3, [pc, #364]	; (a3f8 <operateOnEvent+0x1b8>)
    a28c:	4798      	blx	r3
    a28e:	1e03      	subs	r3, r0, #0
    a290:	d100      	bne.n	a294 <operateOnEvent+0x54>
    a292:	e066      	b.n	a362 <operateOnEvent+0x122>
	{
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
    a294:	1dfb      	adds	r3, r7, #7
    a296:	781b      	ldrb	r3, [r3, #0]
    a298:	2b00      	cmp	r3, #0
    a29a:	d11e      	bne.n	a2da <operateOnEvent+0x9a>
    a29c:	1d7b      	adds	r3, r7, #5
    a29e:	781b      	ldrb	r3, [r3, #0]
    a2a0:	2201      	movs	r2, #1
    a2a2:	4053      	eors	r3, r2
    a2a4:	b2db      	uxtb	r3, r3
    a2a6:	2b00      	cmp	r3, #0
    a2a8:	d017      	beq.n	a2da <operateOnEvent+0x9a>
    a2aa:	1d3b      	adds	r3, r7, #4
    a2ac:	781b      	ldrb	r3, [r3, #0]
    a2ae:	2201      	movs	r2, #1
    a2b0:	4053      	eors	r3, r2
    a2b2:	b2db      	uxtb	r3, r3
    a2b4:	2b00      	cmp	r3, #0
    a2b6:	d010      	beq.n	a2da <operateOnEvent+0x9a>
		{
			stopMotor(false,true,false);
    a2b8:	2200      	movs	r2, #0
    a2ba:	2101      	movs	r1, #1
    a2bc:	2000      	movs	r0, #0
    a2be:	4b50      	ldr	r3, [pc, #320]	; (a400 <operateOnEvent+0x1c0>)
    a2c0:	4798      	blx	r3
			THREEPHASE_OK_LED_OFF;
    a2c2:	2101      	movs	r1, #1
    a2c4:	2027      	movs	r0, #39	; 0x27
    a2c6:	4b4f      	ldr	r3, [pc, #316]	; (a404 <operateOnEvent+0x1c4>)
    a2c8:	4798      	blx	r3
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
    a2ca:	2043      	movs	r0, #67	; 0x43
    a2cc:	4b4e      	ldr	r3, [pc, #312]	; (a408 <operateOnEvent+0x1c8>)
    a2ce:	4798      	blx	r3
    a2d0:	0003      	movs	r3, r0
    a2d2:	001a      	movs	r2, r3
    a2d4:	4b4d      	ldr	r3, [pc, #308]	; (a40c <operateOnEvent+0x1cc>)
    a2d6:	719a      	strb	r2, [r3, #6]
    a2d8:	e078      	b.n	a3cc <operateOnEvent+0x18c>
		}
		////////////////////////////////////////Unknown Motor Off Check ////////////////////////////////////////
		
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    a2da:	1d3b      	adds	r3, r7, #4
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	2b00      	cmp	r3, #0
    a2e0:	d029      	beq.n	a336 <operateOnEvent+0xf6>
    a2e2:	4b46      	ldr	r3, [pc, #280]	; (a3fc <operateOnEvent+0x1bc>)
    a2e4:	4798      	blx	r3
    a2e6:	1e03      	subs	r3, r0, #0
    a2e8:	d025      	beq.n	a336 <operateOnEvent+0xf6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a2ea:	4b49      	ldr	r3, [pc, #292]	; (a410 <operateOnEvent+0x1d0>)
    a2ec:	2220      	movs	r2, #32
    a2ee:	5c9b      	ldrb	r3, [r3, r2]
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    a2f0:	2b00      	cmp	r3, #0
    a2f2:	d008      	beq.n	a306 <operateOnEvent+0xc6>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a2f4:	1dfb      	adds	r3, r7, #7
    a2f6:	781b      	ldrb	r3, [r3, #0]
    a2f8:	2b03      	cmp	r3, #3
    a2fa:	d104      	bne.n	a306 <operateOnEvent+0xc6>
    a2fc:	4b3d      	ldr	r3, [pc, #244]	; (a3f4 <operateOnEvent+0x1b4>)
    a2fe:	4798      	blx	r3
    a300:	0003      	movs	r3, r0
    a302:	2b03      	cmp	r3, #3
    a304:	d00d      	beq.n	a322 <operateOnEvent+0xe2>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a306:	4b42      	ldr	r3, [pc, #264]	; (a410 <operateOnEvent+0x1d0>)
    a308:	2220      	movs	r2, #32
    a30a:	5c9b      	ldrb	r3, [r3, r2]
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    a30c:	2b00      	cmp	r3, #0
    a30e:	d112      	bne.n	a336 <operateOnEvent+0xf6>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a310:	1dfb      	adds	r3, r7, #7
    a312:	781b      	ldrb	r3, [r3, #0]
    a314:	2b01      	cmp	r3, #1
    a316:	d90e      	bls.n	a336 <operateOnEvent+0xf6>
    a318:	4b36      	ldr	r3, [pc, #216]	; (a3f4 <operateOnEvent+0x1b4>)
    a31a:	4798      	blx	r3
    a31c:	0003      	movs	r3, r0
    a31e:	2b01      	cmp	r3, #1
    a320:	d909      	bls.n	a336 <operateOnEvent+0xf6>
		(!tMotor))																																// AND MOTOR HAS TURNED OFF
    a322:	1d7b      	adds	r3, r7, #5
    a324:	781b      	ldrb	r3, [r3, #0]
    a326:	2201      	movs	r2, #1
    a328:	4053      	eors	r3, r2
    a32a:	b2db      	uxtb	r3, r3
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    a32c:	2b00      	cmp	r3, #0
    a32e:	d002      	beq.n	a336 <operateOnEvent+0xf6>
		{
			unknownMotorOff();
    a330:	4b38      	ldr	r3, [pc, #224]	; (a414 <operateOnEvent+0x1d4>)
    a332:	4798      	blx	r3
    a334:	e04a      	b.n	a3cc <operateOnEvent+0x18c>
		}
		///////////////////////// SINGLE PHASING CHECK /////////////////////////
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
    a336:	4b36      	ldr	r3, [pc, #216]	; (a410 <operateOnEvent+0x1d0>)
    a338:	2220      	movs	r2, #32
    a33a:	5c9b      	ldrb	r3, [r3, r2]
    a33c:	2b00      	cmp	r3, #0
    a33e:	d045      	beq.n	a3cc <operateOnEvent+0x18c>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
    a340:	1dfb      	adds	r3, r7, #7
    a342:	781b      	ldrb	r3, [r3, #0]
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
    a344:	2b02      	cmp	r3, #2
    a346:	d141      	bne.n	a3cc <operateOnEvent+0x18c>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
    a348:	1d3b      	adds	r3, r7, #4
    a34a:	781b      	ldrb	r3, [r3, #0]
    a34c:	2b00      	cmp	r3, #0
    a34e:	d03d      	beq.n	a3cc <operateOnEvent+0x18c>
		tacPhase) ////single phasing occured																									// AC Phase is Present
		{
			tempSinglePhasingTimer = xTaskGetTickCount();
    a350:	4b31      	ldr	r3, [pc, #196]	; (a418 <operateOnEvent+0x1d8>)
    a352:	4798      	blx	r3
    a354:	0002      	movs	r2, r0
    a356:	4b31      	ldr	r3, [pc, #196]	; (a41c <operateOnEvent+0x1dc>)
    a358:	601a      	str	r2, [r3, #0]
			singlePhasingTimerOn = true;
    a35a:	4b31      	ldr	r3, [pc, #196]	; (a420 <operateOnEvent+0x1e0>)
    a35c:	2201      	movs	r2, #1
    a35e:	701a      	strb	r2, [r3, #0]
    a360:	e034      	b.n	a3cc <operateOnEvent+0x18c>
		}
	}
	else
	{
		if (tMotor)		// motor turn on manually
    a362:	1d7b      	adds	r3, r7, #5
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	2b00      	cmp	r3, #0
    a368:	d028      	beq.n	a3bc <operateOnEvent+0x17c>
		{
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
    a36a:	1dfb      	adds	r3, r7, #7
    a36c:	781b      	ldrb	r3, [r3, #0]
    a36e:	2b03      	cmp	r3, #3
    a370:	d11e      	bne.n	a3b0 <operateOnEvent+0x170>
    a372:	1dbb      	adds	r3, r7, #6
    a374:	781b      	ldrb	r3, [r3, #0]
    a376:	2b00      	cmp	r3, #0
    a378:	d01a      	beq.n	a3b0 <operateOnEvent+0x170>
    a37a:	1d3b      	adds	r3, r7, #4
    a37c:	781b      	ldrb	r3, [r3, #0]
    a37e:	2b00      	cmp	r3, #0
    a380:	d016      	beq.n	a3b0 <operateOnEvent+0x170>
			{
				if (startTimerOn)
    a382:	4b28      	ldr	r3, [pc, #160]	; (a424 <operateOnEvent+0x1e4>)
    a384:	781b      	ldrb	r3, [r3, #0]
    a386:	2b00      	cmp	r3, #0
    a388:	d002      	beq.n	a390 <operateOnEvent+0x150>
				{
					startTimerOn = false;
    a38a:	4b26      	ldr	r3, [pc, #152]	; (a424 <operateOnEvent+0x1e4>)
    a38c:	2200      	movs	r2, #0
    a38e:	701a      	strb	r2, [r3, #0]
				}
				THREEPHASE_OK_LED_ON;
    a390:	2100      	movs	r1, #0
    a392:	2027      	movs	r0, #39	; 0x27
    a394:	4b1b      	ldr	r3, [pc, #108]	; (a404 <operateOnEvent+0x1c4>)
    a396:	4798      	blx	r3
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
    a398:	2053      	movs	r0, #83	; 0x53
    a39a:	4b1b      	ldr	r3, [pc, #108]	; (a408 <operateOnEvent+0x1c8>)
    a39c:	4798      	blx	r3
    a39e:	0003      	movs	r3, r0
    a3a0:	001a      	movs	r2, r3
    a3a2:	4b1a      	ldr	r3, [pc, #104]	; (a40c <operateOnEvent+0x1cc>)
    a3a4:	71da      	strb	r2, [r3, #7]
				startMotor(true,true);
    a3a6:	2101      	movs	r1, #1
    a3a8:	2001      	movs	r0, #1
    a3aa:	4b1f      	ldr	r3, [pc, #124]	; (a428 <operateOnEvent+0x1e8>)
    a3ac:	4798      	blx	r3
    a3ae:	e00d      	b.n	a3cc <operateOnEvent+0x18c>
			}
			else
			{
				stopMotor(false,true,false);
    a3b0:	2200      	movs	r2, #0
    a3b2:	2101      	movs	r1, #1
    a3b4:	2000      	movs	r0, #0
    a3b6:	4b12      	ldr	r3, [pc, #72]	; (a400 <operateOnEvent+0x1c0>)
    a3b8:	4798      	blx	r3
    a3ba:	e007      	b.n	a3cc <operateOnEvent+0x18c>
			}
		}
		else
		{
			waitStableLineOn = true;
    a3bc:	4b1b      	ldr	r3, [pc, #108]	; (a42c <operateOnEvent+0x1ec>)
    a3be:	2201      	movs	r2, #1
    a3c0:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
    a3c2:	4b15      	ldr	r3, [pc, #84]	; (a418 <operateOnEvent+0x1d8>)
    a3c4:	4798      	blx	r3
    a3c6:	0002      	movs	r2, r0
    a3c8:	4b19      	ldr	r3, [pc, #100]	; (a430 <operateOnEvent+0x1f0>)
    a3ca:	601a      	str	r2, [r3, #0]
		}
	}
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
    a3cc:	1dfb      	adds	r3, r7, #7
    a3ce:	7818      	ldrb	r0, [r3, #0]
    a3d0:	1dbb      	adds	r3, r7, #6
    a3d2:	7819      	ldrb	r1, [r3, #0]
    a3d4:	1d7b      	adds	r3, r7, #5
    a3d6:	781a      	ldrb	r2, [r3, #0]
    a3d8:	1d3b      	adds	r3, r7, #4
    a3da:	781b      	ldrb	r3, [r3, #0]
    a3dc:	4c15      	ldr	r4, [pc, #84]	; (a434 <operateOnEvent+0x1f4>)
    a3de:	47a0      	blx	r4
    a3e0:	e000      	b.n	a3e4 <operateOnEvent+0x1a4>
		return;
    a3e2:	46c0      	nop			; (mov r8, r8)
}
    a3e4:	46bd      	mov	sp, r7
    a3e6:	b003      	add	sp, #12
    a3e8:	bd90      	pop	{r4, r7, pc}
    a3ea:	46c0      	nop			; (mov r8, r8)
    a3ec:	00009f11 	.word	0x00009f11
    a3f0:	20000717 	.word	0x20000717
    a3f4:	00009e25 	.word	0x00009e25
    a3f8:	00009e8d 	.word	0x00009e8d
    a3fc:	00009df1 	.word	0x00009df1
    a400:	0000a78d 	.word	0x0000a78d
    a404:	0000881d 	.word	0x0000881d
    a408:	000046d1 	.word	0x000046d1
    a40c:	20000700 	.word	0x20000700
    a410:	2000065c 	.word	0x2000065c
    a414:	0000a8ad 	.word	0x0000a8ad
    a418:	0000f37d 	.word	0x0000f37d
    a41c:	20000758 	.word	0x20000758
    a420:	20000769 	.word	0x20000769
    a424:	20000772 	.word	0x20000772
    a428:	0000a5c9 	.word	0x0000a5c9
    a42c:	200007c9 	.word	0x200007c9
    a430:	20000794 	.word	0x20000794
    a434:	0000a099 	.word	0x0000a099

0000a438 <checkLineSensors>:

uint8_t checkLineSensors(void)
{
    a438:	b580      	push	{r7, lr}
    a43a:	af00      	add	r7, sp, #0
	return structThreePhase_state.u8t_phase_ac_state;
    a43c:	4b02      	ldr	r3, [pc, #8]	; (a448 <checkLineSensors+0x10>)
    a43e:	785b      	ldrb	r3, [r3, #1]
    a440:	b2db      	uxtb	r3, r3
}
    a442:	0018      	movs	r0, r3
    a444:	46bd      	mov	sp, r7
    a446:	bd80      	pop	{r7, pc}
    a448:	20000720 	.word	0x20000720

0000a44c <operateOnStableLine>:

void operateOnStableLine(void)
{
    a44c:	b590      	push	{r4, r7, lr}
    a44e:	b083      	sub	sp, #12
    a450:	af00      	add	r7, sp, #0
	waitStableLineOn = false;
    a452:	4b41      	ldr	r3, [pc, #260]	; (a558 <operateOnStableLine+0x10c>)
    a454:	2200      	movs	r2, #0
    a456:	701a      	strb	r2, [r3, #0]
	uint8_t temp = checkLineSensors();
    a458:	1dbc      	adds	r4, r7, #6
    a45a:	4b40      	ldr	r3, [pc, #256]	; (a55c <operateOnStableLine+0x110>)
    a45c:	4798      	blx	r3
    a45e:	0003      	movs	r3, r0
    a460:	7023      	strb	r3, [r4, #0]
	if (temp == AC_3PH)
    a462:	1dbb      	adds	r3, r7, #6
    a464:	781b      	ldrb	r3, [r3, #0]
    a466:	2b03      	cmp	r3, #3
    a468:	d133      	bne.n	a4d2 <operateOnStableLine+0x86>
	{
		bool tempPhaseSeq = true;													//Set Temp Phase Seq to True
    a46a:	1dfb      	adds	r3, r7, #7
    a46c:	2201      	movs	r2, #1
    a46e:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
    a470:	4b3b      	ldr	r3, [pc, #236]	; (a560 <operateOnStableLine+0x114>)
    a472:	2224      	movs	r2, #36	; 0x24
    a474:	5c9b      	ldrb	r3, [r3, r2]
    a476:	2b00      	cmp	r3, #0
    a478:	d004      	beq.n	a484 <operateOnStableLine+0x38>
		{
			tempPhaseSeq = getPhaseSequence();										// set current phase seq to the temp variable
    a47a:	1dfc      	adds	r4, r7, #7
    a47c:	4b39      	ldr	r3, [pc, #228]	; (a564 <operateOnStableLine+0x118>)
    a47e:	4798      	blx	r3
    a480:	0003      	movs	r3, r0
    a482:	7023      	strb	r3, [r4, #0]
		}
		
		if(tempPhaseSeq)															// if correct phase seq than
    a484:	1dfb      	adds	r3, r7, #7
    a486:	781b      	ldrb	r3, [r3, #0]
    a488:	2b00      	cmp	r3, #0
    a48a:	d016      	beq.n	a4ba <operateOnStableLine+0x6e>
		{
			THREEPHASE_OK_LED_ON;
    a48c:	2100      	movs	r1, #0
    a48e:	2027      	movs	r0, #39	; 0x27
    a490:	4b35      	ldr	r3, [pc, #212]	; (a568 <operateOnStableLine+0x11c>)
    a492:	4798      	blx	r3
			if (user_settings_parameter_struct.autoStartAddress)
    a494:	4b32      	ldr	r3, [pc, #200]	; (a560 <operateOnStableLine+0x114>)
    a496:	785b      	ldrb	r3, [r3, #1]
    a498:	2b00      	cmp	r3, #0
    a49a:	d002      	beq.n	a4a2 <operateOnStableLine+0x56>
			{
				triggerAutoStart();
    a49c:	4b33      	ldr	r3, [pc, #204]	; (a56c <operateOnStableLine+0x120>)
    a49e:	4798      	blx	r3
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
		{
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
		}
	}
}
    a4a0:	e055      	b.n	a54e <operateOnStableLine+0x102>
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
    a4a2:	4b2f      	ldr	r3, [pc, #188]	; (a560 <operateOnStableLine+0x114>)
    a4a4:	791b      	ldrb	r3, [r3, #4]
    a4a6:	2b4c      	cmp	r3, #76	; 0x4c
    a4a8:	d051      	beq.n	a54e <operateOnStableLine+0x102>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
    a4aa:	2047      	movs	r0, #71	; 0x47
    a4ac:	4b30      	ldr	r3, [pc, #192]	; (a570 <operateOnStableLine+0x124>)
    a4ae:	4798      	blx	r3
    a4b0:	0003      	movs	r3, r0
    a4b2:	001a      	movs	r2, r3
    a4b4:	4b2f      	ldr	r3, [pc, #188]	; (a574 <operateOnStableLine+0x128>)
    a4b6:	711a      	strb	r2, [r3, #4]
}
    a4b8:	e049      	b.n	a54e <operateOnStableLine+0x102>
			THREEPHASE_OK_LED_OFF;
    a4ba:	2101      	movs	r1, #1
    a4bc:	2027      	movs	r0, #39	; 0x27
    a4be:	4b2a      	ldr	r3, [pc, #168]	; (a568 <operateOnStableLine+0x11c>)
    a4c0:	4798      	blx	r3
			simEventTemp[9] = registerEvent('A');								//incorrect sequence
    a4c2:	2041      	movs	r0, #65	; 0x41
    a4c4:	4b2a      	ldr	r3, [pc, #168]	; (a570 <operateOnStableLine+0x124>)
    a4c6:	4798      	blx	r3
    a4c8:	0003      	movs	r3, r0
    a4ca:	001a      	movs	r2, r3
    a4cc:	4b29      	ldr	r3, [pc, #164]	; (a574 <operateOnStableLine+0x128>)
    a4ce:	725a      	strb	r2, [r3, #9]
}
    a4d0:	e03d      	b.n	a54e <operateOnStableLine+0x102>
	else if (temp == AC_2PH) //Got Power in 2 phase
    a4d2:	1dbb      	adds	r3, r7, #6
    a4d4:	781b      	ldrb	r3, [r3, #0]
    a4d6:	2b02      	cmp	r3, #2
    a4d8:	d114      	bne.n	a504 <operateOnStableLine+0xb8>
		THREEPHASE_OK_LED_OFF;
    a4da:	2101      	movs	r1, #1
    a4dc:	2027      	movs	r0, #39	; 0x27
    a4de:	4b22      	ldr	r3, [pc, #136]	; (a568 <operateOnStableLine+0x11c>)
    a4e0:	4798      	blx	r3
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
    a4e2:	4b1f      	ldr	r3, [pc, #124]	; (a560 <operateOnStableLine+0x114>)
    a4e4:	791b      	ldrb	r3, [r3, #4]
    a4e6:	2b4f      	cmp	r3, #79	; 0x4f
    a4e8:	d131      	bne.n	a54e <operateOnStableLine+0x102>
		!user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
    a4ea:	4b1d      	ldr	r3, [pc, #116]	; (a560 <operateOnStableLine+0x114>)
    a4ec:	2220      	movs	r2, #32
    a4ee:	5c9b      	ldrb	r3, [r3, r2]
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
    a4f0:	2b00      	cmp	r3, #0
    a4f2:	d12c      	bne.n	a54e <operateOnStableLine+0x102>
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
    a4f4:	2041      	movs	r0, #65	; 0x41
    a4f6:	4b1e      	ldr	r3, [pc, #120]	; (a570 <operateOnStableLine+0x124>)
    a4f8:	4798      	blx	r3
    a4fa:	0003      	movs	r3, r0
    a4fc:	001a      	movs	r2, r3
    a4fe:	4b1d      	ldr	r3, [pc, #116]	; (a574 <operateOnStableLine+0x128>)
    a500:	725a      	strb	r2, [r3, #9]
}
    a502:	e024      	b.n	a54e <operateOnStableLine+0x102>
	else if (temp == AC_OFF)	//Lost Power in All Phase
    a504:	1dbb      	adds	r3, r7, #6
    a506:	781b      	ldrb	r3, [r3, #0]
    a508:	2b00      	cmp	r3, #0
    a50a:	d120      	bne.n	a54e <operateOnStableLine+0x102>
		THREEPHASE_OK_LED_OFF;
    a50c:	2101      	movs	r1, #1
    a50e:	2027      	movs	r0, #39	; 0x27
    a510:	4b15      	ldr	r3, [pc, #84]	; (a568 <operateOnStableLine+0x11c>)
    a512:	4798      	blx	r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
    a514:	4b12      	ldr	r3, [pc, #72]	; (a560 <operateOnStableLine+0x114>)
    a516:	791b      	ldrb	r3, [r3, #4]
    a518:	2b4f      	cmp	r3, #79	; 0x4f
    a51a:	d011      	beq.n	a540 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a51c:	4b16      	ldr	r3, [pc, #88]	; (a578 <operateOnStableLine+0x12c>)
    a51e:	781b      	ldrb	r3, [r3, #0]
    a520:	b2db      	uxtb	r3, r3
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
    a522:	2b02      	cmp	r3, #2
    a524:	d103      	bne.n	a52e <operateOnStableLine+0xe2>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a526:	4b0e      	ldr	r3, [pc, #56]	; (a560 <operateOnStableLine+0x114>)
    a528:	791b      	ldrb	r3, [r3, #4]
    a52a:	2b4f      	cmp	r3, #79	; 0x4f
    a52c:	d008      	beq.n	a540 <operateOnStableLine+0xf4>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
    a52e:	4b12      	ldr	r3, [pc, #72]	; (a578 <operateOnStableLine+0x12c>)
    a530:	781b      	ldrb	r3, [r3, #0]
    a532:	b2db      	uxtb	r3, r3
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    a534:	2b03      	cmp	r3, #3
    a536:	d10a      	bne.n	a54e <operateOnStableLine+0x102>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
    a538:	4b09      	ldr	r3, [pc, #36]	; (a560 <operateOnStableLine+0x114>)
    a53a:	791b      	ldrb	r3, [r3, #4]
    a53c:	2b4c      	cmp	r3, #76	; 0x4c
    a53e:	d006      	beq.n	a54e <operateOnStableLine+0x102>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
    a540:	204c      	movs	r0, #76	; 0x4c
    a542:	4b0b      	ldr	r3, [pc, #44]	; (a570 <operateOnStableLine+0x124>)
    a544:	4798      	blx	r3
    a546:	0003      	movs	r3, r0
    a548:	001a      	movs	r2, r3
    a54a:	4b0a      	ldr	r3, [pc, #40]	; (a574 <operateOnStableLine+0x128>)
    a54c:	715a      	strb	r2, [r3, #5]
}
    a54e:	46c0      	nop			; (mov r8, r8)
    a550:	46bd      	mov	sp, r7
    a552:	b003      	add	sp, #12
    a554:	bd90      	pop	{r4, r7, pc}
    a556:	46c0      	nop			; (mov r8, r8)
    a558:	200007c9 	.word	0x200007c9
    a55c:	0000a439 	.word	0x0000a439
    a560:	2000065c 	.word	0x2000065c
    a564:	00009e59 	.word	0x00009e59
    a568:	0000881d 	.word	0x0000881d
    a56c:	0000a1ed 	.word	0x0000a1ed
    a570:	000046d1 	.word	0x000046d1
    a574:	20000700 	.word	0x20000700
    a578:	20000713 	.word	0x20000713

0000a57c <waitStableLineOver>:

bool waitStableLineOver(void)
{
    a57c:	b580      	push	{r7, lr}
    a57e:	af00      	add	r7, sp, #0
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
    a580:	4b0d      	ldr	r3, [pc, #52]	; (a5b8 <waitStableLineOver+0x3c>)
    a582:	781b      	ldrb	r3, [r3, #0]
    a584:	2b00      	cmp	r3, #0
    a586:	d00e      	beq.n	a5a6 <waitStableLineOver+0x2a>
    a588:	4b0c      	ldr	r3, [pc, #48]	; (a5bc <waitStableLineOver+0x40>)
    a58a:	4798      	blx	r3
    a58c:	0002      	movs	r2, r0
    a58e:	4b0c      	ldr	r3, [pc, #48]	; (a5c0 <waitStableLineOver+0x44>)
    a590:	681b      	ldr	r3, [r3, #0]
    a592:	1ad3      	subs	r3, r2, r3
    a594:	4a0b      	ldr	r2, [pc, #44]	; (a5c4 <waitStableLineOver+0x48>)
    a596:	7812      	ldrb	r2, [r2, #0]
    a598:	0011      	movs	r1, r2
    a59a:	2264      	movs	r2, #100	; 0x64
    a59c:	434a      	muls	r2, r1
    a59e:	4293      	cmp	r3, r2
    a5a0:	d301      	bcc.n	a5a6 <waitStableLineOver+0x2a>
    a5a2:	2301      	movs	r3, #1
    a5a4:	e000      	b.n	a5a8 <waitStableLineOver+0x2c>
    a5a6:	2300      	movs	r3, #0
    a5a8:	1c1a      	adds	r2, r3, #0
    a5aa:	2301      	movs	r3, #1
    a5ac:	4013      	ands	r3, r2
    a5ae:	b2db      	uxtb	r3, r3
}
    a5b0:	0018      	movs	r0, r3
    a5b2:	46bd      	mov	sp, r7
    a5b4:	bd80      	pop	{r7, pc}
    a5b6:	46c0      	nop			; (mov r8, r8)
    a5b8:	200007c9 	.word	0x200007c9
    a5bc:	0000f37d 	.word	0x0000f37d
    a5c0:	20000794 	.word	0x20000794
    a5c4:	200007a9 	.word	0x200007a9

0000a5c8 <startMotor>:


void startMotor(bool commanded, bool forcedStart)
{
    a5c8:	b580      	push	{r7, lr}
    a5ca:	b082      	sub	sp, #8
    a5cc:	af00      	add	r7, sp, #0
    a5ce:	0002      	movs	r2, r0
    a5d0:	1dfb      	adds	r3, r7, #7
    a5d2:	701a      	strb	r2, [r3, #0]
    a5d4:	1dbb      	adds	r3, r7, #6
    a5d6:	1c0a      	adds	r2, r1, #0
    a5d8:	701a      	strb	r2, [r3, #0]
	startTimerOn = false;
    a5da:	4b57      	ldr	r3, [pc, #348]	; (a738 <startMotor+0x170>)
    a5dc:	2200      	movs	r2, #0
    a5de:	701a      	strb	r2, [r3, #0]
	
	if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
    a5e0:	1dbb      	adds	r3, r7, #6
    a5e2:	781b      	ldrb	r3, [r3, #0]
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d124      	bne.n	a632 <startMotor+0x6a>
    a5e8:	4b54      	ldr	r3, [pc, #336]	; (a73c <startMotor+0x174>)
    a5ea:	4798      	blx	r3
    a5ec:	1e03      	subs	r3, r0, #0
    a5ee:	d100      	bne.n	a5f2 <startMotor+0x2a>
    a5f0:	e08e      	b.n	a710 <startMotor+0x148>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a5f2:	4b53      	ldr	r3, [pc, #332]	; (a740 <startMotor+0x178>)
    a5f4:	4798      	blx	r3
    a5f6:	0003      	movs	r3, r0
	if (forcedStart || (getACPowerState() &&																														//AC Phase is Presnet
    a5f8:	2b03      	cmp	r3, #3
    a5fa:	d00b      	beq.n	a614 <startMotor+0x4c>
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a5fc:	4b50      	ldr	r3, [pc, #320]	; (a740 <startMotor+0x178>)
    a5fe:	4798      	blx	r3
    a600:	0003      	movs	r3, r0
    a602:	2b02      	cmp	r3, #2
    a604:	d000      	beq.n	a608 <startMotor+0x40>
    a606:	e083      	b.n	a710 <startMotor+0x148>
    a608:	4b4e      	ldr	r3, [pc, #312]	; (a744 <startMotor+0x17c>)
    a60a:	2220      	movs	r2, #32
    a60c:	5c9b      	ldrb	r3, [r3, r2]
    a60e:	2b00      	cmp	r3, #0
    a610:	d000      	beq.n	a614 <startMotor+0x4c>
    a612:	e07d      	b.n	a710 <startMotor+0x148>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
    a614:	4b4b      	ldr	r3, [pc, #300]	; (a744 <startMotor+0x17c>)
    a616:	2224      	movs	r2, #36	; 0x24
    a618:	5c9b      	ldrb	r3, [r3, r2]
	((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    a61a:	2b00      	cmp	r3, #0
    a61c:	d003      	beq.n	a626 <startMotor+0x5e>
	((user_settings_parameter_struct.detectPhaseSequence && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence))))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
    a61e:	4b4a      	ldr	r3, [pc, #296]	; (a748 <startMotor+0x180>)
    a620:	4798      	blx	r3
    a622:	1e03      	subs	r3, r0, #0
    a624:	d105      	bne.n	a632 <startMotor+0x6a>
    a626:	4b47      	ldr	r3, [pc, #284]	; (a744 <startMotor+0x17c>)
    a628:	2224      	movs	r2, #36	; 0x24
    a62a:	5c9b      	ldrb	r3, [r3, r2]
    a62c:	2b00      	cmp	r3, #0
    a62e:	d000      	beq.n	a632 <startMotor+0x6a>
    a630:	e06e      	b.n	a710 <startMotor+0x148>
	{
		if (!getMotorState())
    a632:	4b46      	ldr	r3, [pc, #280]	; (a74c <startMotor+0x184>)
    a634:	4798      	blx	r3
    a636:	0003      	movs	r3, r0
    a638:	001a      	movs	r2, r3
    a63a:	2301      	movs	r3, #1
    a63c:	4053      	eors	r3, r2
    a63e:	b2db      	uxtb	r3, r3
    a640:	2b00      	cmp	r3, #0
    a642:	d05d      	beq.n	a700 <startMotor+0x138>
		{
			if (factory_settings_parameter_struct.ENABLE_WATER)
    a644:	4b42      	ldr	r3, [pc, #264]	; (a750 <startMotor+0x188>)
    a646:	795b      	ldrb	r3, [r3, #5]
    a648:	2b00      	cmp	r3, #0
    a64a:	d034      	beq.n	a6b6 <startMotor+0xee>
			{
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
    a64c:	4b3d      	ldr	r3, [pc, #244]	; (a744 <startMotor+0x17c>)
    a64e:	7fdb      	ldrb	r3, [r3, #31]
    a650:	2b00      	cmp	r3, #0
    a652:	d113      	bne.n	a67c <startMotor+0xb4>
    a654:	4b3f      	ldr	r3, [pc, #252]	; (a754 <startMotor+0x18c>)
    a656:	4798      	blx	r3
    a658:	1e03      	subs	r3, r0, #0
    a65a:	d10f      	bne.n	a67c <startMotor+0xb4>
				{
					if (commanded)
    a65c:	1dfb      	adds	r3, r7, #7
    a65e:	781b      	ldrb	r3, [r3, #0]
    a660:	2b00      	cmp	r3, #0
    a662:	d003      	beq.n	a66c <startMotor+0xa4>
					{
						setMotorMGRResponse('T');	//cannot start motor due to some problem
    a664:	2054      	movs	r0, #84	; 0x54
    a666:	4b3c      	ldr	r3, [pc, #240]	; (a758 <startMotor+0x190>)
    a668:	4798      	blx	r3
					}
					else
					{
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
					}
					return;
    a66a:	e062      	b.n	a732 <startMotor+0x16a>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    a66c:	204e      	movs	r0, #78	; 0x4e
    a66e:	4b3b      	ldr	r3, [pc, #236]	; (a75c <startMotor+0x194>)
    a670:	4798      	blx	r3
    a672:	0003      	movs	r3, r0
    a674:	001a      	movs	r2, r3
    a676:	4b3a      	ldr	r3, [pc, #232]	; (a760 <startMotor+0x198>)
    a678:	701a      	strb	r2, [r3, #0]
					return;
    a67a:	e05a      	b.n	a732 <startMotor+0x16a>
				}
				
				if (factory_settings_parameter_struct.ENABLE_GP)
    a67c:	4b34      	ldr	r3, [pc, #208]	; (a750 <startMotor+0x188>)
    a67e:	791b      	ldrb	r3, [r3, #4]
    a680:	2b00      	cmp	r3, #0
    a682:	d018      	beq.n	a6b6 <startMotor+0xee>
				{
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
    a684:	4b2f      	ldr	r3, [pc, #188]	; (a744 <startMotor+0x17c>)
    a686:	7fdb      	ldrb	r3, [r3, #31]
    a688:	2b00      	cmp	r3, #0
    a68a:	d114      	bne.n	a6b6 <startMotor+0xee>
    a68c:	4b35      	ldr	r3, [pc, #212]	; (a764 <startMotor+0x19c>)
    a68e:	4798      	blx	r3
    a690:	0003      	movs	r3, r0
    a692:	2b02      	cmp	r3, #2
    a694:	d10f      	bne.n	a6b6 <startMotor+0xee>
					{
						if(commanded)
    a696:	1dfb      	adds	r3, r7, #7
    a698:	781b      	ldrb	r3, [r3, #0]
    a69a:	2b00      	cmp	r3, #0
    a69c:	d003      	beq.n	a6a6 <startMotor+0xde>
						{
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
    a69e:	2056      	movs	r0, #86	; 0x56
    a6a0:	4b2d      	ldr	r3, [pc, #180]	; (a758 <startMotor+0x190>)
    a6a2:	4798      	blx	r3
						}
						else
						{
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
						}
						return;
    a6a4:	e045      	b.n	a732 <startMotor+0x16a>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
    a6a6:	2056      	movs	r0, #86	; 0x56
    a6a8:	4b2c      	ldr	r3, [pc, #176]	; (a75c <startMotor+0x194>)
    a6aa:	4798      	blx	r3
    a6ac:	0003      	movs	r3, r0
    a6ae:	001a      	movs	r2, r3
    a6b0:	4b2b      	ldr	r3, [pc, #172]	; (a760 <startMotor+0x198>)
    a6b2:	745a      	strb	r2, [r3, #17]
						return;
    a6b4:	e03d      	b.n	a732 <startMotor+0x16a>
					}
				}
			}

			STOP_RELAY_ON;
    a6b6:	2101      	movs	r1, #1
    a6b8:	202c      	movs	r0, #44	; 0x2c
    a6ba:	4b2b      	ldr	r3, [pc, #172]	; (a768 <startMotor+0x1a0>)
    a6bc:	4798      	blx	r3
			START_RELAY_ON;
    a6be:	2101      	movs	r1, #1
    a6c0:	202d      	movs	r0, #45	; 0x2d
    a6c2:	4b29      	ldr	r3, [pc, #164]	; (a768 <startMotor+0x1a0>)
    a6c4:	4798      	blx	r3
			stopMotorCommandGiven=false;
    a6c6:	4b29      	ldr	r3, [pc, #164]	; (a76c <startMotor+0x1a4>)
    a6c8:	2200      	movs	r2, #0
    a6ca:	701a      	strb	r2, [r3, #0]
			//MOTOR_ON_LED_ON;
			tempStartSequenceTimer = xTaskGetTickCount();
    a6cc:	4b28      	ldr	r3, [pc, #160]	; (a770 <startMotor+0x1a8>)
    a6ce:	4798      	blx	r3
    a6d0:	0002      	movs	r2, r0
    a6d2:	4b28      	ldr	r3, [pc, #160]	; (a774 <startMotor+0x1ac>)
    a6d4:	601a      	str	r2, [r3, #0]
			startSequenceOn = true;
    a6d6:	4b28      	ldr	r3, [pc, #160]	; (a778 <startMotor+0x1b0>)
    a6d8:	2201      	movs	r2, #1
    a6da:	701a      	strb	r2, [r3, #0]
			setMotorState(true);
    a6dc:	2001      	movs	r0, #1
    a6de:	4b27      	ldr	r3, [pc, #156]	; (a77c <startMotor+0x1b4>)
    a6e0:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a6e2:	4b1b      	ldr	r3, [pc, #108]	; (a750 <startMotor+0x188>)
    a6e4:	785b      	ldrb	r3, [r3, #1]
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	d005      	beq.n	a6f6 <startMotor+0x12e>
			{
				enableCurrentBuffer=false;
    a6ea:	4b25      	ldr	r3, [pc, #148]	; (a780 <startMotor+0x1b8>)
    a6ec:	2200      	movs	r2, #0
    a6ee:	701a      	strb	r2, [r3, #0]
				lastCurrentReading=CR_NORMAL;
    a6f0:	4b24      	ldr	r3, [pc, #144]	; (a784 <startMotor+0x1bc>)
    a6f2:	2200      	movs	r2, #0
    a6f4:	701a      	strb	r2, [r3, #0]
			}
			gotOnCommand = commanded;
    a6f6:	4b24      	ldr	r3, [pc, #144]	; (a788 <startMotor+0x1c0>)
    a6f8:	1dfa      	adds	r2, r7, #7
    a6fa:	7812      	ldrb	r2, [r2, #0]
    a6fc:	701a      	strb	r2, [r3, #0]
		if (!getMotorState())
    a6fe:	e017      	b.n	a730 <startMotor+0x168>
		}
		else
		{
			if (commanded)
    a700:	1dfb      	adds	r3, r7, #7
    a702:	781b      	ldrb	r3, [r3, #0]
    a704:	2b00      	cmp	r3, #0
    a706:	d013      	beq.n	a730 <startMotor+0x168>
			{
				setMotorMGRResponse('+');		//motor is already on
    a708:	202b      	movs	r0, #43	; 0x2b
    a70a:	4b13      	ldr	r3, [pc, #76]	; (a758 <startMotor+0x190>)
    a70c:	4798      	blx	r3
		if (!getMotorState())
    a70e:	e00f      	b.n	a730 <startMotor+0x168>
			}
		}
	}
	else
	{
		if (commanded)
    a710:	1dfb      	adds	r3, r7, #7
    a712:	781b      	ldrb	r3, [r3, #0]
    a714:	2b00      	cmp	r3, #0
    a716:	d003      	beq.n	a720 <startMotor+0x158>
		{
			setMotorMGRResponse('N');	//cannot start motor due to some problem
    a718:	204e      	movs	r0, #78	; 0x4e
    a71a:	4b0f      	ldr	r3, [pc, #60]	; (a758 <startMotor+0x190>)
    a71c:	4798      	blx	r3
    a71e:	e008      	b.n	a732 <startMotor+0x16a>
		}
		else
		{
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    a720:	204e      	movs	r0, #78	; 0x4e
    a722:	4b0e      	ldr	r3, [pc, #56]	; (a75c <startMotor+0x194>)
    a724:	4798      	blx	r3
    a726:	0003      	movs	r3, r0
    a728:	001a      	movs	r2, r3
    a72a:	4b0d      	ldr	r3, [pc, #52]	; (a760 <startMotor+0x198>)
    a72c:	701a      	strb	r2, [r3, #0]
    a72e:	e000      	b.n	a732 <startMotor+0x16a>
		if (!getMotorState())
    a730:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    a732:	46bd      	mov	sp, r7
    a734:	b002      	add	sp, #8
    a736:	bd80      	pop	{r7, pc}
    a738:	20000772 	.word	0x20000772
    a73c:	00009df1 	.word	0x00009df1
    a740:	00009e25 	.word	0x00009e25
    a744:	2000065c 	.word	0x2000065c
    a748:	00009e59 	.word	0x00009e59
    a74c:	00009e8d 	.word	0x00009e8d
    a750:	20000628 	.word	0x20000628
    a754:	00008bb1 	.word	0x00008bb1
    a758:	000048a9 	.word	0x000048a9
    a75c:	000046d1 	.word	0x000046d1
    a760:	20000700 	.word	0x20000700
    a764:	00008a81 	.word	0x00008a81
    a768:	0000881d 	.word	0x0000881d
    a76c:	20000815 	.word	0x20000815
    a770:	0000f37d 	.word	0x0000f37d
    a774:	2000076c 	.word	0x2000076c
    a778:	20000771 	.word	0x20000771
    a77c:	00009ea1 	.word	0x00009ea1
    a780:	20000738 	.word	0x20000738
    a784:	2000075e 	.word	0x2000075e
    a788:	200006fc 	.word	0x200006fc

0000a78c <stopMotor>:

void stopMotor(bool commanded, bool forceStop,bool offButton)
{
    a78c:	b590      	push	{r4, r7, lr}
    a78e:	b083      	sub	sp, #12
    a790:	af00      	add	r7, sp, #0
    a792:	0004      	movs	r4, r0
    a794:	0008      	movs	r0, r1
    a796:	0011      	movs	r1, r2
    a798:	1dfb      	adds	r3, r7, #7
    a79a:	1c22      	adds	r2, r4, #0
    a79c:	701a      	strb	r2, [r3, #0]
    a79e:	1dbb      	adds	r3, r7, #6
    a7a0:	1c02      	adds	r2, r0, #0
    a7a2:	701a      	strb	r2, [r3, #0]
    a7a4:	1d7b      	adds	r3, r7, #5
    a7a6:	1c0a      	adds	r2, r1, #0
    a7a8:	701a      	strb	r2, [r3, #0]
	if (forceStop || getMotorState())
    a7aa:	1dbb      	adds	r3, r7, #6
    a7ac:	781b      	ldrb	r3, [r3, #0]
    a7ae:	2b00      	cmp	r3, #0
    a7b0:	d103      	bne.n	a7ba <stopMotor+0x2e>
    a7b2:	4b20      	ldr	r3, [pc, #128]	; (a834 <stopMotor+0xa8>)
    a7b4:	4798      	blx	r3
    a7b6:	1e03      	subs	r3, r0, #0
    a7b8:	d02f      	beq.n	a81a <stopMotor+0x8e>
	{
		singlePhasingTimerOn = false;
    a7ba:	4b1f      	ldr	r3, [pc, #124]	; (a838 <stopMotor+0xac>)
    a7bc:	2200      	movs	r2, #0
    a7be:	701a      	strb	r2, [r3, #0]
		if (user_settings_parameter_struct.detectMotorFeedback == MOTORFEEDBACK_DETECTION_CURRENT)
    a7c0:	4b1e      	ldr	r3, [pc, #120]	; (a83c <stopMotor+0xb0>)
    a7c2:	2225      	movs	r2, #37	; 0x25
    a7c4:	5c9b      	ldrb	r3, [r3, r2]
    a7c6:	2b01      	cmp	r3, #1
    a7c8:	d105      	bne.n	a7d6 <stopMotor+0x4a>
		{
			fdbkRefCurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
    a7ca:	4b1d      	ldr	r3, [pc, #116]	; (a840 <stopMotor+0xb4>)
    a7cc:	8a9b      	ldrh	r3, [r3, #20]
    a7ce:	b29b      	uxth	r3, r3
    a7d0:	b2da      	uxtb	r2, r3
    a7d2:	4b1c      	ldr	r3, [pc, #112]	; (a844 <stopMotor+0xb8>)
    a7d4:	701a      	strb	r2, [r3, #0]
		}
		STOP_RELAY_OFF;
    a7d6:	2100      	movs	r1, #0
    a7d8:	202c      	movs	r0, #44	; 0x2c
    a7da:	4b1b      	ldr	r3, [pc, #108]	; (a848 <stopMotor+0xbc>)
    a7dc:	4798      	blx	r3
		stopMotorCommandGiven=true;
    a7de:	4b1b      	ldr	r3, [pc, #108]	; (a84c <stopMotor+0xc0>)
    a7e0:	2201      	movs	r2, #1
    a7e2:	701a      	strb	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
    a7e4:	4b1a      	ldr	r3, [pc, #104]	; (a850 <stopMotor+0xc4>)
    a7e6:	4798      	blx	r3
    a7e8:	0002      	movs	r2, r0
    a7ea:	4b1a      	ldr	r3, [pc, #104]	; (a854 <stopMotor+0xc8>)
    a7ec:	601a      	str	r2, [r3, #0]
		stopSequenceOn = true;
    a7ee:	4b1a      	ldr	r3, [pc, #104]	; (a858 <stopMotor+0xcc>)
    a7f0:	2201      	movs	r2, #1
    a7f2:	701a      	strb	r2, [r3, #0]
		setMotorState(false);
    a7f4:	2000      	movs	r0, #0
    a7f6:	4b19      	ldr	r3, [pc, #100]	; (a85c <stopMotor+0xd0>)
    a7f8:	4798      	blx	r3
		gotOffCommand = commanded;
    a7fa:	4b19      	ldr	r3, [pc, #100]	; (a860 <stopMotor+0xd4>)
    a7fc:	1dfa      	adds	r2, r7, #7
    a7fe:	7812      	ldrb	r2, [r2, #0]
    a800:	701a      	strb	r2, [r3, #0]
		offButtonPressed=offButton;
    a802:	4b18      	ldr	r3, [pc, #96]	; (a864 <stopMotor+0xd8>)
    a804:	1d7a      	adds	r2, r7, #5
    a806:	7812      	ldrb	r2, [r2, #0]
    a808:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a80a:	4b17      	ldr	r3, [pc, #92]	; (a868 <stopMotor+0xdc>)
    a80c:	785b      	ldrb	r3, [r3, #1]
    a80e:	2b00      	cmp	r3, #0
    a810:	d00b      	beq.n	a82a <stopMotor+0x9e>
		{
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
    a812:	4b16      	ldr	r3, [pc, #88]	; (a86c <stopMotor+0xe0>)
    a814:	2200      	movs	r2, #0
    a816:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    a818:	e007      	b.n	a82a <stopMotor+0x9e>
		}
	}
	else
	{
		if (commanded)
    a81a:	1dfb      	adds	r3, r7, #7
    a81c:	781b      	ldrb	r3, [r3, #0]
    a81e:	2b00      	cmp	r3, #0
    a820:	d003      	beq.n	a82a <stopMotor+0x9e>
		{
			setMotorMGRResponse('-');	//motor is already off
    a822:	202d      	movs	r0, #45	; 0x2d
    a824:	4b12      	ldr	r3, [pc, #72]	; (a870 <stopMotor+0xe4>)
    a826:	4798      	blx	r3
		}
	}
}
    a828:	e7ff      	b.n	a82a <stopMotor+0x9e>
    a82a:	46c0      	nop			; (mov r8, r8)
    a82c:	46bd      	mov	sp, r7
    a82e:	b003      	add	sp, #12
    a830:	bd90      	pop	{r4, r7, pc}
    a832:	46c0      	nop			; (mov r8, r8)
    a834:	00009e8d 	.word	0x00009e8d
    a838:	20000769 	.word	0x20000769
    a83c:	2000065c 	.word	0x2000065c
    a840:	200006dc 	.word	0x200006dc
    a844:	200007b0 	.word	0x200007b0
    a848:	0000881d 	.word	0x0000881d
    a84c:	20000815 	.word	0x20000815
    a850:	0000f37d 	.word	0x0000f37d
    a854:	20000780 	.word	0x20000780
    a858:	20000761 	.word	0x20000761
    a85c:	00009ea1 	.word	0x00009ea1
    a860:	200007c8 	.word	0x200007c8
    a864:	2000077c 	.word	0x2000077c
    a868:	20000628 	.word	0x20000628
    a86c:	2000075e 	.word	0x2000075e
    a870:	000048a9 	.word	0x000048a9

0000a874 <startMotorTimerOver>:

bool startMotorTimerOver(void)
{
    a874:	b580      	push	{r7, lr}
    a876:	af00      	add	r7, sp, #0
	return (xTaskGetTickCount() - tempStartTimer >= (((unsigned long int)user_settings_parameter_struct.autoStartTimeAddress * 1000)));
    a878:	4b09      	ldr	r3, [pc, #36]	; (a8a0 <startMotorTimerOver+0x2c>)
    a87a:	4798      	blx	r3
    a87c:	0002      	movs	r2, r0
    a87e:	4b09      	ldr	r3, [pc, #36]	; (a8a4 <startMotorTimerOver+0x30>)
    a880:	681b      	ldr	r3, [r3, #0]
    a882:	1ad1      	subs	r1, r2, r3
    a884:	4b08      	ldr	r3, [pc, #32]	; (a8a8 <startMotorTimerOver+0x34>)
    a886:	885b      	ldrh	r3, [r3, #2]
    a888:	001a      	movs	r2, r3
    a88a:	23fa      	movs	r3, #250	; 0xfa
    a88c:	009b      	lsls	r3, r3, #2
    a88e:	435a      	muls	r2, r3
    a890:	2300      	movs	r3, #0
    a892:	4291      	cmp	r1, r2
    a894:	415b      	adcs	r3, r3
    a896:	b2db      	uxtb	r3, r3
}
    a898:	0018      	movs	r0, r3
    a89a:	46bd      	mov	sp, r7
    a89c:	bd80      	pop	{r7, pc}
    a89e:	46c0      	nop			; (mov r8, r8)
    a8a0:	0000f37d 	.word	0x0000f37d
    a8a4:	20000778 	.word	0x20000778
    a8a8:	2000065c 	.word	0x2000065c

0000a8ac <unknownMotorOff>:

void unknownMotorOff(void)
{
    a8ac:	b580      	push	{r7, lr}
    a8ae:	af00      	add	r7, sp, #0
	// waitCheckACTimerOn = false;
	//report to SIM Motor Off due to Unknown Reason
	stopMotor(false,true,false);
    a8b0:	2200      	movs	r2, #0
    a8b2:	2101      	movs	r1, #1
    a8b4:	2000      	movs	r0, #0
    a8b6:	4b06      	ldr	r3, [pc, #24]	; (a8d0 <unknownMotorOff+0x24>)
    a8b8:	4798      	blx	r3
	simEventTemp[2] = registerEvent('U');
    a8ba:	2055      	movs	r0, #85	; 0x55
    a8bc:	4b05      	ldr	r3, [pc, #20]	; (a8d4 <unknownMotorOff+0x28>)
    a8be:	4798      	blx	r3
    a8c0:	0003      	movs	r3, r0
    a8c2:	001a      	movs	r2, r3
    a8c4:	4b04      	ldr	r3, [pc, #16]	; (a8d8 <unknownMotorOff+0x2c>)
    a8c6:	709a      	strb	r2, [r3, #2]
}
    a8c8:	46c0      	nop			; (mov r8, r8)
    a8ca:	46bd      	mov	sp, r7
    a8cc:	bd80      	pop	{r7, pc}
    a8ce:	46c0      	nop			; (mov r8, r8)
    a8d0:	0000a78d 	.word	0x0000a78d
    a8d4:	000046d1 	.word	0x000046d1
    a8d8:	20000700 	.word	0x20000700

0000a8dc <singlePhasingTimerOver>:

bool singlePhasingTimerOver(void)
{
    a8dc:	b580      	push	{r7, lr}
    a8de:	af00      	add	r7, sp, #0
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
    a8e0:	4b0d      	ldr	r3, [pc, #52]	; (a918 <singlePhasingTimerOver+0x3c>)
    a8e2:	781b      	ldrb	r3, [r3, #0]
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d00e      	beq.n	a906 <singlePhasingTimerOver+0x2a>
    a8e8:	4b0c      	ldr	r3, [pc, #48]	; (a91c <singlePhasingTimerOver+0x40>)
    a8ea:	4798      	blx	r3
    a8ec:	0002      	movs	r2, r0
    a8ee:	4b0c      	ldr	r3, [pc, #48]	; (a920 <singlePhasingTimerOver+0x44>)
    a8f0:	681b      	ldr	r3, [r3, #0]
    a8f2:	1ad2      	subs	r2, r2, r3
    a8f4:	4b0b      	ldr	r3, [pc, #44]	; (a924 <singlePhasingTimerOver+0x48>)
    a8f6:	781b      	ldrb	r3, [r3, #0]
    a8f8:	0019      	movs	r1, r3
    a8fa:	2364      	movs	r3, #100	; 0x64
    a8fc:	434b      	muls	r3, r1
    a8fe:	429a      	cmp	r2, r3
    a900:	d901      	bls.n	a906 <singlePhasingTimerOver+0x2a>
    a902:	2301      	movs	r3, #1
    a904:	e000      	b.n	a908 <singlePhasingTimerOver+0x2c>
    a906:	2300      	movs	r3, #0
    a908:	1c1a      	adds	r2, r3, #0
    a90a:	2301      	movs	r3, #1
    a90c:	4013      	ands	r3, r2
    a90e:	b2db      	uxtb	r3, r3
}
    a910:	0018      	movs	r0, r3
    a912:	46bd      	mov	sp, r7
    a914:	bd80      	pop	{r7, pc}
    a916:	46c0      	nop			; (mov r8, r8)
    a918:	20000769 	.word	0x20000769
    a91c:	0000f37d 	.word	0x0000f37d
    a920:	20000758 	.word	0x20000758
    a924:	20000748 	.word	0x20000748

0000a928 <operateOnSinglePhasing>:

void operateOnSinglePhasing(void)
{
    a928:	b580      	push	{r7, lr}
    a92a:	af00      	add	r7, sp, #0
	THREEPHASE_OK_LED_OFF;
    a92c:	2101      	movs	r1, #1
    a92e:	2027      	movs	r0, #39	; 0x27
    a930:	4b08      	ldr	r3, [pc, #32]	; (a954 <operateOnSinglePhasing+0x2c>)
    a932:	4798      	blx	r3
	stopMotor(false,true,false);
    a934:	2200      	movs	r2, #0
    a936:	2101      	movs	r1, #1
    a938:	2000      	movs	r0, #0
    a93a:	4b07      	ldr	r3, [pc, #28]	; (a958 <operateOnSinglePhasing+0x30>)
    a93c:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
    a93e:	2046      	movs	r0, #70	; 0x46
    a940:	4b06      	ldr	r3, [pc, #24]	; (a95c <operateOnSinglePhasing+0x34>)
    a942:	4798      	blx	r3
    a944:	0003      	movs	r3, r0
    a946:	001a      	movs	r2, r3
    a948:	4b05      	ldr	r3, [pc, #20]	; (a960 <operateOnSinglePhasing+0x38>)
    a94a:	70da      	strb	r2, [r3, #3]
}
    a94c:	46c0      	nop			; (mov r8, r8)
    a94e:	46bd      	mov	sp, r7
    a950:	bd80      	pop	{r7, pc}
    a952:	46c0      	nop			; (mov r8, r8)
    a954:	0000881d 	.word	0x0000881d
    a958:	0000a78d 	.word	0x0000a78d
    a95c:	000046d1 	.word	0x000046d1
    a960:	20000700 	.word	0x20000700

0000a964 <terminateStopRelay>:

void terminateStopRelay(void)
{
    a964:	b5f0      	push	{r4, r5, r6, r7, lr}
    a966:	b083      	sub	sp, #12
    a968:	af00      	add	r7, sp, #0
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
    a96a:	4b3f      	ldr	r3, [pc, #252]	; (aa68 <terminateStopRelay+0x104>)
    a96c:	781b      	ldrb	r3, [r3, #0]
    a96e:	2b00      	cmp	r3, #0
    a970:	d100      	bne.n	a974 <terminateStopRelay+0x10>
    a972:	e074      	b.n	aa5e <terminateStopRelay+0xfa>
    a974:	4b3d      	ldr	r3, [pc, #244]	; (aa6c <terminateStopRelay+0x108>)
    a976:	4798      	blx	r3
    a978:	0002      	movs	r2, r0
    a97a:	4b3d      	ldr	r3, [pc, #244]	; (aa70 <terminateStopRelay+0x10c>)
    a97c:	681b      	ldr	r3, [r3, #0]
    a97e:	1ad3      	subs	r3, r2, r3
    a980:	4a3c      	ldr	r2, [pc, #240]	; (aa74 <terminateStopRelay+0x110>)
    a982:	7812      	ldrb	r2, [r2, #0]
    a984:	0011      	movs	r1, r2
    a986:	2264      	movs	r2, #100	; 0x64
    a988:	434a      	muls	r2, r1
    a98a:	4293      	cmp	r3, r2
    a98c:	d967      	bls.n	aa5e <terminateStopRelay+0xfa>
	{
		//if ((bool)(user_settings_parameter_struct.autoStartAddress) && getACPowerState())
		//{
		//STOP_RELAY_ON;
		//}
		stopSequenceOn = false;
    a98e:	4b36      	ldr	r3, [pc, #216]	; (aa68 <terminateStopRelay+0x104>)
    a990:	2200      	movs	r2, #0
    a992:	701a      	strb	r2, [r3, #0]
		stopMotorCommandGiven=true;
    a994:	4b38      	ldr	r3, [pc, #224]	; (aa78 <terminateStopRelay+0x114>)
    a996:	2201      	movs	r2, #1
    a998:	701a      	strb	r2, [r3, #0]
		if((user_settings_parameter_struct.detectMotorFeedback==MOTORFEEDBACK_DETECTION_CURRENT?				//if feedback mechanism is current
    a99a:	4b38      	ldr	r3, [pc, #224]	; (aa7c <terminateStopRelay+0x118>)
    a99c:	2225      	movs	r2, #37	; 0x25
    a99e:	5c9b      	ldrb	r3, [r3, r2]
    a9a0:	2b01      	cmp	r3, #1
    a9a2:	d124      	bne.n	a9ee <terminateStopRelay+0x8a>
		(Analog_Parameter_Struct.Motor_Current_IntPart <= fdbkRefCurrent*0.5):									// less than 50% in 2 seconds after stop command
    a9a4:	4b36      	ldr	r3, [pc, #216]	; (aa80 <terminateStopRelay+0x11c>)
    a9a6:	8a9b      	ldrh	r3, [r3, #20]
    a9a8:	b29b      	uxth	r3, r3
    a9aa:	001a      	movs	r2, r3
		if((user_settings_parameter_struct.detectMotorFeedback==MOTORFEEDBACK_DETECTION_CURRENT?				//if feedback mechanism is current
    a9ac:	4b35      	ldr	r3, [pc, #212]	; (aa84 <terminateStopRelay+0x120>)
    a9ae:	0010      	movs	r0, r2
    a9b0:	4798      	blx	r3
    a9b2:	0005      	movs	r5, r0
    a9b4:	000e      	movs	r6, r1
		(Analog_Parameter_Struct.Motor_Current_IntPart <= fdbkRefCurrent*0.5):									// less than 50% in 2 seconds after stop command
    a9b6:	4b34      	ldr	r3, [pc, #208]	; (aa88 <terminateStopRelay+0x124>)
    a9b8:	781b      	ldrb	r3, [r3, #0]
    a9ba:	001a      	movs	r2, r3
    a9bc:	4b31      	ldr	r3, [pc, #196]	; (aa84 <terminateStopRelay+0x120>)
    a9be:	0010      	movs	r0, r2
    a9c0:	4798      	blx	r3
    a9c2:	4c32      	ldr	r4, [pc, #200]	; (aa8c <terminateStopRelay+0x128>)
    a9c4:	2200      	movs	r2, #0
    a9c6:	4b32      	ldr	r3, [pc, #200]	; (aa90 <terminateStopRelay+0x12c>)
    a9c8:	47a0      	blx	r4
    a9ca:	0003      	movs	r3, r0
    a9cc:	000c      	movs	r4, r1
    a9ce:	0019      	movs	r1, r3
    a9d0:	0022      	movs	r2, r4
		if((user_settings_parameter_struct.detectMotorFeedback==MOTORFEEDBACK_DETECTION_CURRENT?				//if feedback mechanism is current
    a9d2:	2301      	movs	r3, #1
    a9d4:	71fb      	strb	r3, [r7, #7]
    a9d6:	4c2f      	ldr	r4, [pc, #188]	; (aa94 <terminateStopRelay+0x130>)
    a9d8:	0013      	movs	r3, r2
    a9da:	000a      	movs	r2, r1
    a9dc:	0028      	movs	r0, r5
    a9de:	0031      	movs	r1, r6
    a9e0:	47a0      	blx	r4
    a9e2:	1e03      	subs	r3, r0, #0
    a9e4:	d101      	bne.n	a9ea <terminateStopRelay+0x86>
    a9e6:	2300      	movs	r3, #0
    a9e8:	71fb      	strb	r3, [r7, #7]
    a9ea:	79fb      	ldrb	r3, [r7, #7]
    a9ec:	e006      	b.n	a9fc <terminateStopRelay+0x98>
		(!getMotorState_from_pin())))																			// OTHER THAN CURRENT FEEDBACK; motor has turned off OR NOT
    a9ee:	4b2a      	ldr	r3, [pc, #168]	; (aa98 <terminateStopRelay+0x134>)
    a9f0:	4798      	blx	r3
    a9f2:	0003      	movs	r3, r0
    a9f4:	001a      	movs	r2, r3
		if((user_settings_parameter_struct.detectMotorFeedback==MOTORFEEDBACK_DETECTION_CURRENT?				//if feedback mechanism is current
    a9f6:	2301      	movs	r3, #1
    a9f8:	4053      	eors	r3, r2
    a9fa:	b2db      	uxtb	r3, r3
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	d019      	beq.n	aa34 <terminateStopRelay+0xd0>
		{
			if (gotOffCommand)
    aa00:	4b26      	ldr	r3, [pc, #152]	; (aa9c <terminateStopRelay+0x138>)
    aa02:	781b      	ldrb	r3, [r3, #0]
    aa04:	2b00      	cmp	r3, #0
    aa06:	d006      	beq.n	aa16 <terminateStopRelay+0xb2>
			{
				gotOffCommand = false;
    aa08:	4b24      	ldr	r3, [pc, #144]	; (aa9c <terminateStopRelay+0x138>)
    aa0a:	2200      	movs	r2, #0
    aa0c:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
    aa0e:	204f      	movs	r0, #79	; 0x4f
    aa10:	4b23      	ldr	r3, [pc, #140]	; (aaa0 <terminateStopRelay+0x13c>)
    aa12:	4798      	blx	r3
    aa14:	e020      	b.n	aa58 <terminateStopRelay+0xf4>
			}
			else if(offButtonPressed)
    aa16:	4b23      	ldr	r3, [pc, #140]	; (aaa4 <terminateStopRelay+0x140>)
    aa18:	781b      	ldrb	r3, [r3, #0]
    aa1a:	2b00      	cmp	r3, #0
    aa1c:	d01c      	beq.n	aa58 <terminateStopRelay+0xf4>
			{
				offButtonPressed=false;
    aa1e:	4b21      	ldr	r3, [pc, #132]	; (aaa4 <terminateStopRelay+0x140>)
    aa20:	2200      	movs	r2, #0
    aa22:	701a      	strb	r2, [r3, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
    aa24:	204f      	movs	r0, #79	; 0x4f
    aa26:	4b20      	ldr	r3, [pc, #128]	; (aaa8 <terminateStopRelay+0x144>)
    aa28:	4798      	blx	r3
    aa2a:	0003      	movs	r3, r0
    aa2c:	001a      	movs	r2, r3
    aa2e:	4b1f      	ldr	r3, [pc, #124]	; (aaac <terminateStopRelay+0x148>)
    aa30:	721a      	strb	r2, [r3, #8]
    aa32:	e011      	b.n	aa58 <terminateStopRelay+0xf4>
			}
		}
		else
		{
			if (gotOffCommand)
    aa34:	4b19      	ldr	r3, [pc, #100]	; (aa9c <terminateStopRelay+0x138>)
    aa36:	781b      	ldrb	r3, [r3, #0]
    aa38:	2b00      	cmp	r3, #0
    aa3a:	d006      	beq.n	aa4a <terminateStopRelay+0xe6>
			{
				gotOffCommand = false;
    aa3c:	4b17      	ldr	r3, [pc, #92]	; (aa9c <terminateStopRelay+0x138>)
    aa3e:	2200      	movs	r2, #0
    aa40:	701a      	strb	r2, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
    aa42:	2050      	movs	r0, #80	; 0x50
    aa44:	4b16      	ldr	r3, [pc, #88]	; (aaa0 <terminateStopRelay+0x13c>)
    aa46:	4798      	blx	r3
    aa48:	e006      	b.n	aa58 <terminateStopRelay+0xf4>
			}
			else
			{
				simEventTemp[1] = registerEvent('P');
    aa4a:	2050      	movs	r0, #80	; 0x50
    aa4c:	4b16      	ldr	r3, [pc, #88]	; (aaa8 <terminateStopRelay+0x144>)
    aa4e:	4798      	blx	r3
    aa50:	0003      	movs	r3, r0
    aa52:	001a      	movs	r2, r3
    aa54:	4b15      	ldr	r3, [pc, #84]	; (aaac <terminateStopRelay+0x148>)
    aa56:	705a      	strb	r2, [r3, #1]
			}
		}
		offButtonPressed=false;
    aa58:	4b12      	ldr	r3, [pc, #72]	; (aaa4 <terminateStopRelay+0x140>)
    aa5a:	2200      	movs	r2, #0
    aa5c:	701a      	strb	r2, [r3, #0]
	}
}
    aa5e:	46c0      	nop			; (mov r8, r8)
    aa60:	46bd      	mov	sp, r7
    aa62:	b003      	add	sp, #12
    aa64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa66:	46c0      	nop			; (mov r8, r8)
    aa68:	20000761 	.word	0x20000761
    aa6c:	0000f37d 	.word	0x0000f37d
    aa70:	20000780 	.word	0x20000780
    aa74:	20000817 	.word	0x20000817
    aa78:	20000815 	.word	0x20000815
    aa7c:	2000065c 	.word	0x2000065c
    aa80:	200006dc 	.word	0x200006dc
    aa84:	000179d1 	.word	0x000179d1
    aa88:	200007b0 	.word	0x200007b0
    aa8c:	00016dfd 	.word	0x00016dfd
    aa90:	3fe00000 	.word	0x3fe00000
    aa94:	0001578d 	.word	0x0001578d
    aa98:	00009ee1 	.word	0x00009ee1
    aa9c:	200007c8 	.word	0x200007c8
    aaa0:	000048a9 	.word	0x000048a9
    aaa4:	2000077c 	.word	0x2000077c
    aaa8:	000046d1 	.word	0x000046d1
    aaac:	20000700 	.word	0x20000700

0000aab0 <terminateStarDeltaTimer>:

void terminateStarDeltaTimer(void)
{
    aab0:	b580      	push	{r7, lr}
    aab2:	af00      	add	r7, sp, #0
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
    aab4:	4b13      	ldr	r3, [pc, #76]	; (ab04 <terminateStarDeltaTimer+0x54>)
    aab6:	781b      	ldrb	r3, [r3, #0]
    aab8:	2b00      	cmp	r3, #0
    aaba:	d020      	beq.n	aafe <terminateStarDeltaTimer+0x4e>
    aabc:	4b12      	ldr	r3, [pc, #72]	; (ab08 <terminateStarDeltaTimer+0x58>)
    aabe:	4798      	blx	r3
    aac0:	0002      	movs	r2, r0
    aac2:	4b12      	ldr	r3, [pc, #72]	; (ab0c <terminateStarDeltaTimer+0x5c>)
    aac4:	681b      	ldr	r3, [r3, #0]
    aac6:	1ad2      	subs	r2, r2, r3
    aac8:	4b11      	ldr	r3, [pc, #68]	; (ab10 <terminateStarDeltaTimer+0x60>)
    aaca:	88db      	ldrh	r3, [r3, #6]
    aacc:	0019      	movs	r1, r3
    aace:	23fa      	movs	r3, #250	; 0xfa
    aad0:	009b      	lsls	r3, r3, #2
    aad2:	434b      	muls	r3, r1
    aad4:	429a      	cmp	r2, r3
    aad6:	d912      	bls.n	aafe <terminateStarDeltaTimer+0x4e>
	{
		START_RELAY_OFF;
    aad8:	2100      	movs	r1, #0
    aada:	202d      	movs	r0, #45	; 0x2d
    aadc:	4b0d      	ldr	r3, [pc, #52]	; (ab14 <terminateStarDeltaTimer+0x64>)
    aade:	4798      	blx	r3
		starDeltaTimerOn=false;
    aae0:	4b08      	ldr	r3, [pc, #32]	; (ab04 <terminateStarDeltaTimer+0x54>)
    aae2:	2200      	movs	r2, #0
    aae4:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    aae6:	4b0c      	ldr	r3, [pc, #48]	; (ab18 <terminateStarDeltaTimer+0x68>)
    aae8:	785b      	ldrb	r3, [r3, #1]
    aaea:	2b00      	cmp	r3, #0
    aaec:	d007      	beq.n	aafe <terminateStarDeltaTimer+0x4e>
		{
			enableCurrentBuffer=true;
    aaee:	4b0b      	ldr	r3, [pc, #44]	; (ab1c <terminateStarDeltaTimer+0x6c>)
    aaf0:	2201      	movs	r2, #1
    aaf2:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
    aaf4:	4b04      	ldr	r3, [pc, #16]	; (ab08 <terminateStarDeltaTimer+0x58>)
    aaf6:	4798      	blx	r3
    aaf8:	0002      	movs	r2, r0
    aafa:	4b04      	ldr	r3, [pc, #16]	; (ab0c <terminateStarDeltaTimer+0x5c>)
    aafc:	601a      	str	r2, [r3, #0]
		}
	}
}
    aafe:	46c0      	nop			; (mov r8, r8)
    ab00:	46bd      	mov	sp, r7
    ab02:	bd80      	pop	{r7, pc}
    ab04:	20000773 	.word	0x20000773
    ab08:	0000f37d 	.word	0x0000f37d
    ab0c:	2000076c 	.word	0x2000076c
    ab10:	2000065c 	.word	0x2000065c
    ab14:	0000881d 	.word	0x0000881d
    ab18:	20000628 	.word	0x20000628
    ab1c:	20000738 	.word	0x20000738

0000ab20 <terminateStartRelay>:

void terminateStartRelay(void)
{
    ab20:	b590      	push	{r4, r7, lr}
    ab22:	b083      	sub	sp, #12
    ab24:	af00      	add	r7, sp, #0
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
    ab26:	4b36      	ldr	r3, [pc, #216]	; (ac00 <terminateStartRelay+0xe0>)
    ab28:	781b      	ldrb	r3, [r3, #0]
    ab2a:	2b00      	cmp	r3, #0
    ab2c:	d064      	beq.n	abf8 <terminateStartRelay+0xd8>
    ab2e:	4b35      	ldr	r3, [pc, #212]	; (ac04 <terminateStartRelay+0xe4>)
    ab30:	4798      	blx	r3
    ab32:	0002      	movs	r2, r0
    ab34:	4b34      	ldr	r3, [pc, #208]	; (ac08 <terminateStartRelay+0xe8>)
    ab36:	681b      	ldr	r3, [r3, #0]
    ab38:	1ad3      	subs	r3, r2, r3
    ab3a:	4a34      	ldr	r2, [pc, #208]	; (ac0c <terminateStartRelay+0xec>)
    ab3c:	7812      	ldrb	r2, [r2, #0]
    ab3e:	0011      	movs	r1, r2
    ab40:	2264      	movs	r2, #100	; 0x64
    ab42:	434a      	muls	r2, r1
    ab44:	4293      	cmp	r3, r2
    ab46:	d957      	bls.n	abf8 <terminateStartRelay+0xd8>
	{
		if(((unsigned int)user_settings_parameter_struct.starDeltaTimerAddress *10) <= startSequenceTimerTime)
    ab48:	4b31      	ldr	r3, [pc, #196]	; (ac10 <terminateStartRelay+0xf0>)
    ab4a:	88db      	ldrh	r3, [r3, #6]
    ab4c:	001a      	movs	r2, r3
    ab4e:	0013      	movs	r3, r2
    ab50:	009b      	lsls	r3, r3, #2
    ab52:	189b      	adds	r3, r3, r2
    ab54:	005b      	lsls	r3, r3, #1
    ab56:	001a      	movs	r2, r3
    ab58:	4b2c      	ldr	r3, [pc, #176]	; (ac0c <terminateStartRelay+0xec>)
    ab5a:	781b      	ldrb	r3, [r3, #0]
    ab5c:	429a      	cmp	r2, r3
    ab5e:	d810      	bhi.n	ab82 <terminateStartRelay+0x62>
		{
			START_RELAY_OFF;
    ab60:	2100      	movs	r1, #0
    ab62:	202d      	movs	r0, #45	; 0x2d
    ab64:	4b2b      	ldr	r3, [pc, #172]	; (ac14 <terminateStartRelay+0xf4>)
    ab66:	4798      	blx	r3
			tempStartSequenceTimer=xTaskGetTickCount();
    ab68:	4b26      	ldr	r3, [pc, #152]	; (ac04 <terminateStartRelay+0xe4>)
    ab6a:	4798      	blx	r3
    ab6c:	0002      	movs	r2, r0
    ab6e:	4b26      	ldr	r3, [pc, #152]	; (ac08 <terminateStartRelay+0xe8>)
    ab70:	601a      	str	r2, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    ab72:	4b29      	ldr	r3, [pc, #164]	; (ac18 <terminateStartRelay+0xf8>)
    ab74:	785b      	ldrb	r3, [r3, #1]
    ab76:	2b00      	cmp	r3, #0
    ab78:	d006      	beq.n	ab88 <terminateStartRelay+0x68>
			{
				enableCurrentBuffer=true;
    ab7a:	4b28      	ldr	r3, [pc, #160]	; (ac1c <terminateStartRelay+0xfc>)
    ab7c:	2201      	movs	r2, #1
    ab7e:	701a      	strb	r2, [r3, #0]
    ab80:	e002      	b.n	ab88 <terminateStartRelay+0x68>
			}
		}
		else
		{
			starDeltaTimerOn=true;
    ab82:	4b27      	ldr	r3, [pc, #156]	; (ac20 <terminateStartRelay+0x100>)
    ab84:	2201      	movs	r2, #1
    ab86:	701a      	strb	r2, [r3, #0]
		}
		startSequenceOn = false;
    ab88:	4b1d      	ldr	r3, [pc, #116]	; (ac00 <terminateStartRelay+0xe0>)
    ab8a:	2200      	movs	r2, #0
    ab8c:	701a      	strb	r2, [r3, #0]
		bool motor = getMotorState_from_pin();
    ab8e:	1dfc      	adds	r4, r7, #7
    ab90:	4b24      	ldr	r3, [pc, #144]	; (ac24 <terminateStartRelay+0x104>)
    ab92:	4798      	blx	r3
    ab94:	0003      	movs	r3, r0
    ab96:	7023      	strb	r3, [r4, #0]
		if (gotOnCommand)
    ab98:	4b23      	ldr	r3, [pc, #140]	; (ac28 <terminateStartRelay+0x108>)
    ab9a:	781b      	ldrb	r3, [r3, #0]
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d013      	beq.n	abc8 <terminateStartRelay+0xa8>
		{
			gotOnCommand = false;
    aba0:	4b21      	ldr	r3, [pc, #132]	; (ac28 <terminateStartRelay+0x108>)
    aba2:	2200      	movs	r2, #0
    aba4:	701a      	strb	r2, [r3, #0]
			if (motor)
    aba6:	1dfb      	adds	r3, r7, #7
    aba8:	781b      	ldrb	r3, [r3, #0]
    abaa:	2b00      	cmp	r3, #0
    abac:	d003      	beq.n	abb6 <terminateStartRelay+0x96>
			{
				setMotorMGRResponse('S'); // motor has started
    abae:	2053      	movs	r0, #83	; 0x53
    abb0:	4b1e      	ldr	r3, [pc, #120]	; (ac2c <terminateStartRelay+0x10c>)
    abb2:	4798      	blx	r3
				stopMotor(false,true,false);
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
			}
		}
	}
}
    abb4:	e020      	b.n	abf8 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
    abb6:	2200      	movs	r2, #0
    abb8:	2101      	movs	r1, #1
    abba:	2000      	movs	r0, #0
    abbc:	4b1c      	ldr	r3, [pc, #112]	; (ac30 <terminateStartRelay+0x110>)
    abbe:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
    abc0:	204e      	movs	r0, #78	; 0x4e
    abc2:	4b1a      	ldr	r3, [pc, #104]	; (ac2c <terminateStartRelay+0x10c>)
    abc4:	4798      	blx	r3
}
    abc6:	e017      	b.n	abf8 <terminateStartRelay+0xd8>
			if (motor)
    abc8:	1dfb      	adds	r3, r7, #7
    abca:	781b      	ldrb	r3, [r3, #0]
    abcc:	2b00      	cmp	r3, #0
    abce:	d007      	beq.n	abe0 <terminateStartRelay+0xc0>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
    abd0:	2053      	movs	r0, #83	; 0x53
    abd2:	4b18      	ldr	r3, [pc, #96]	; (ac34 <terminateStartRelay+0x114>)
    abd4:	4798      	blx	r3
    abd6:	0003      	movs	r3, r0
    abd8:	001a      	movs	r2, r3
    abda:	4b17      	ldr	r3, [pc, #92]	; (ac38 <terminateStartRelay+0x118>)
    abdc:	71da      	strb	r2, [r3, #7]
}
    abde:	e00b      	b.n	abf8 <terminateStartRelay+0xd8>
				stopMotor(false,true,false);
    abe0:	2200      	movs	r2, #0
    abe2:	2101      	movs	r1, #1
    abe4:	2000      	movs	r0, #0
    abe6:	4b12      	ldr	r3, [pc, #72]	; (ac30 <terminateStartRelay+0x110>)
    abe8:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    abea:	204e      	movs	r0, #78	; 0x4e
    abec:	4b11      	ldr	r3, [pc, #68]	; (ac34 <terminateStartRelay+0x114>)
    abee:	4798      	blx	r3
    abf0:	0003      	movs	r3, r0
    abf2:	001a      	movs	r2, r3
    abf4:	4b10      	ldr	r3, [pc, #64]	; (ac38 <terminateStartRelay+0x118>)
    abf6:	701a      	strb	r2, [r3, #0]
}
    abf8:	46c0      	nop			; (mov r8, r8)
    abfa:	46bd      	mov	sp, r7
    abfc:	b003      	add	sp, #12
    abfe:	bd90      	pop	{r4, r7, pc}
    ac00:	20000771 	.word	0x20000771
    ac04:	0000f37d 	.word	0x0000f37d
    ac08:	2000076c 	.word	0x2000076c
    ac0c:	200007d4 	.word	0x200007d4
    ac10:	2000065c 	.word	0x2000065c
    ac14:	0000881d 	.word	0x0000881d
    ac18:	20000628 	.word	0x20000628
    ac1c:	20000738 	.word	0x20000738
    ac20:	20000773 	.word	0x20000773
    ac24:	00009ee1 	.word	0x00009ee1
    ac28:	200006fc 	.word	0x200006fc
    ac2c:	000048a9 	.word	0x000048a9
    ac30:	0000a78d 	.word	0x0000a78d
    ac34:	000046d1 	.word	0x000046d1
    ac38:	20000700 	.word	0x20000700

0000ac3c <statusOnCall>:

void statusOnCall(void)
{
    ac3c:	b590      	push	{r4, r7, lr}
    ac3e:	b083      	sub	sp, #12
    ac40:	af00      	add	r7, sp, #0
	char status[5];
	uint8_t index=0;
    ac42:	1dfb      	adds	r3, r7, #7
    ac44:	2200      	movs	r2, #0
    ac46:	701a      	strb	r2, [r3, #0]
	uint8_t b = checkLineSensors();
    ac48:	1dbc      	adds	r4, r7, #6
    ac4a:	4b3b      	ldr	r3, [pc, #236]	; (ad38 <statusOnCall+0xfc>)
    ac4c:	4798      	blx	r3
    ac4e:	0003      	movs	r3, r0
    ac50:	7023      	strb	r3, [r4, #0]
	if (b == AC_OFF)
    ac52:	1dbb      	adds	r3, r7, #6
    ac54:	781b      	ldrb	r3, [r3, #0]
    ac56:	2b00      	cmp	r3, #0
    ac58:	d109      	bne.n	ac6e <statusOnCall+0x32>
	{
		status[index++]='L';
    ac5a:	1dfb      	adds	r3, r7, #7
    ac5c:	781b      	ldrb	r3, [r3, #0]
    ac5e:	1dfa      	adds	r2, r7, #7
    ac60:	1c59      	adds	r1, r3, #1
    ac62:	7011      	strb	r1, [r2, #0]
    ac64:	001a      	movs	r2, r3
    ac66:	003b      	movs	r3, r7
    ac68:	214c      	movs	r1, #76	; 0x4c
    ac6a:	5499      	strb	r1, [r3, r2]
    ac6c:	e03b      	b.n	ace6 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('L');	//motor off, no light
	}
	else if (b == AC_2PH)	//power only in 2 phase
    ac6e:	1dbb      	adds	r3, r7, #6
    ac70:	781b      	ldrb	r3, [r3, #0]
    ac72:	2b02      	cmp	r3, #2
    ac74:	d109      	bne.n	ac8a <statusOnCall+0x4e>
	{
		status[index++]='A';
    ac76:	1dfb      	adds	r3, r7, #7
    ac78:	781b      	ldrb	r3, [r3, #0]
    ac7a:	1dfa      	adds	r2, r7, #7
    ac7c:	1c59      	adds	r1, r3, #1
    ac7e:	7011      	strb	r1, [r2, #0]
    ac80:	001a      	movs	r2, r3
    ac82:	003b      	movs	r3, r7
    ac84:	2141      	movs	r1, #65	; 0x41
    ac86:	5499      	strb	r1, [r3, r2]
    ac88:	e02d      	b.n	ace6 <statusOnCall+0xaa>
		// sim1->setMotorMGRResponse('A');
	}
	else if (b == AC_3PH)
    ac8a:	1dbb      	adds	r3, r7, #6
    ac8c:	781b      	ldrb	r3, [r3, #0]
    ac8e:	2b03      	cmp	r3, #3
    ac90:	d129      	bne.n	ace6 <statusOnCall+0xaa>
	{
		bool temp = getMotorState_from_pin();
    ac92:	1d7c      	adds	r4, r7, #5
    ac94:	4b29      	ldr	r3, [pc, #164]	; (ad3c <statusOnCall+0x100>)
    ac96:	4798      	blx	r3
    ac98:	0003      	movs	r3, r0
    ac9a:	7023      	strb	r3, [r4, #0]
		if (temp)
    ac9c:	1d7b      	adds	r3, r7, #5
    ac9e:	781b      	ldrb	r3, [r3, #0]
    aca0:	2b00      	cmp	r3, #0
    aca2:	d009      	beq.n	acb8 <statusOnCall+0x7c>
		{
			status[index++]='+';
    aca4:	1dfb      	adds	r3, r7, #7
    aca6:	781b      	ldrb	r3, [r3, #0]
    aca8:	1dfa      	adds	r2, r7, #7
    acaa:	1c59      	adds	r1, r3, #1
    acac:	7011      	strb	r1, [r2, #0]
    acae:	001a      	movs	r2, r3
    acb0:	003b      	movs	r3, r7
    acb2:	212b      	movs	r1, #43	; 0x2b
    acb4:	5499      	strb	r1, [r3, r2]
    acb6:	e016      	b.n	ace6 <statusOnCall+0xaa>
			// sim1->setMotorMGRResponse('+');	//motor is on
		}
		else
		{
			status[index++]='_';
    acb8:	1dfb      	adds	r3, r7, #7
    acba:	781b      	ldrb	r3, [r3, #0]
    acbc:	1dfa      	adds	r2, r7, #7
    acbe:	1c59      	adds	r1, r3, #1
    acc0:	7011      	strb	r1, [r2, #0]
    acc2:	001a      	movs	r2, r3
    acc4:	003b      	movs	r3, r7
    acc6:	215f      	movs	r1, #95	; 0x5f
    acc8:	5499      	strb	r1, [r3, r2]
			
			//Play File for Wrong Phase Sequence if phase seq is wrong
			if(structThreePhase_state.u8t_phase_sequence_flag !=THREEPHASE_OK)					//3 phase sequence is incorrect
    acca:	4b1d      	ldr	r3, [pc, #116]	; (ad40 <statusOnCall+0x104>)
    accc:	781b      	ldrb	r3, [r3, #0]
    acce:	b2db      	uxtb	r3, r3
    acd0:	2b02      	cmp	r3, #2
    acd2:	d008      	beq.n	ace6 <statusOnCall+0xaa>
			{
				//todo: replace A(single Phasing) in below statement with Character for Wrong Phase Sequence Event
				status[index++]='A';
    acd4:	1dfb      	adds	r3, r7, #7
    acd6:	781b      	ldrb	r3, [r3, #0]
    acd8:	1dfa      	adds	r2, r7, #7
    acda:	1c59      	adds	r1, r3, #1
    acdc:	7011      	strb	r1, [r2, #0]
    acde:	001a      	movs	r2, r3
    ace0:	003b      	movs	r3, r7
    ace2:	2141      	movs	r1, #65	; 0x41
    ace4:	5499      	strb	r1, [r3, r2]

			// sim1->setMotorMGRResponse('_');	//motor off, light on
		}
	}

	if(user_settings_parameter_struct.autoStartAddress)
    ace6:	4b17      	ldr	r3, [pc, #92]	; (ad44 <statusOnCall+0x108>)
    ace8:	785b      	ldrb	r3, [r3, #1]
    acea:	2b00      	cmp	r3, #0
    acec:	d009      	beq.n	ad02 <statusOnCall+0xc6>
	{
		status[index++]=')';
    acee:	1dfb      	adds	r3, r7, #7
    acf0:	781b      	ldrb	r3, [r3, #0]
    acf2:	1dfa      	adds	r2, r7, #7
    acf4:	1c59      	adds	r1, r3, #1
    acf6:	7011      	strb	r1, [r2, #0]
    acf8:	001a      	movs	r2, r3
    acfa:	003b      	movs	r3, r7
    acfc:	2129      	movs	r1, #41	; 0x29
    acfe:	5499      	strb	r1, [r3, r2]
    ad00:	e008      	b.n	ad14 <statusOnCall+0xd8>
	}
	else
	{
		status[index++]='[';
    ad02:	1dfb      	adds	r3, r7, #7
    ad04:	781b      	ldrb	r3, [r3, #0]
    ad06:	1dfa      	adds	r2, r7, #7
    ad08:	1c59      	adds	r1, r3, #1
    ad0a:	7011      	strb	r1, [r2, #0]
    ad0c:	001a      	movs	r2, r3
    ad0e:	003b      	movs	r3, r7
    ad10:	215b      	movs	r1, #91	; 0x5b
    ad12:	5499      	strb	r1, [r3, r2]
	}
	
	status[index++]='\0';
    ad14:	1dfb      	adds	r3, r7, #7
    ad16:	781b      	ldrb	r3, [r3, #0]
    ad18:	1dfa      	adds	r2, r7, #7
    ad1a:	1c59      	adds	r1, r3, #1
    ad1c:	7011      	strb	r1, [r2, #0]
    ad1e:	001a      	movs	r2, r3
    ad20:	003b      	movs	r3, r7
    ad22:	2100      	movs	r1, #0
    ad24:	5499      	strb	r1, [r3, r2]

	playRepeatedFiles(status);
    ad26:	003b      	movs	r3, r7
    ad28:	0018      	movs	r0, r3
    ad2a:	4b07      	ldr	r3, [pc, #28]	; (ad48 <statusOnCall+0x10c>)
    ad2c:	4798      	blx	r3
}
    ad2e:	46c0      	nop			; (mov r8, r8)
    ad30:	46bd      	mov	sp, r7
    ad32:	b003      	add	sp, #12
    ad34:	bd90      	pop	{r4, r7, pc}
    ad36:	46c0      	nop			; (mov r8, r8)
    ad38:	0000a439 	.word	0x0000a439
    ad3c:	00009ee1 	.word	0x00009ee1
    ad40:	20000720 	.word	0x20000720
    ad44:	2000065c 	.word	0x2000065c
    ad48:	0000459d 	.word	0x0000459d

0000ad4c <voltageOnCall>:

void voltageOnCall(void)
{
    ad4c:	b590      	push	{r4, r7, lr}
    ad4e:	b087      	sub	sp, #28
    ad50:	af02      	add	r7, sp, #8
	char voltFiles[13];
	//change the below string seq to speak R Y B instead of 0
	sprintf(voltFiles,"0%lu0%lu0%lu",Analog_Parameter_Struct.PhaseRY_Voltage,Analog_Parameter_Struct.PhaseYB_Voltage,Analog_Parameter_Struct.PhaseBR_Voltage);
    ad52:	4b0a      	ldr	r3, [pc, #40]	; (ad7c <voltageOnCall+0x30>)
    ad54:	681a      	ldr	r2, [r3, #0]
    ad56:	4b09      	ldr	r3, [pc, #36]	; (ad7c <voltageOnCall+0x30>)
    ad58:	685c      	ldr	r4, [r3, #4]
    ad5a:	4b08      	ldr	r3, [pc, #32]	; (ad7c <voltageOnCall+0x30>)
    ad5c:	689b      	ldr	r3, [r3, #8]
    ad5e:	4908      	ldr	r1, [pc, #32]	; (ad80 <voltageOnCall+0x34>)
    ad60:	0038      	movs	r0, r7
    ad62:	9300      	str	r3, [sp, #0]
    ad64:	0023      	movs	r3, r4
    ad66:	4c07      	ldr	r4, [pc, #28]	; (ad84 <voltageOnCall+0x38>)
    ad68:	47a0      	blx	r4
	playRepeatedFiles(voltFiles);
    ad6a:	003b      	movs	r3, r7
    ad6c:	0018      	movs	r0, r3
    ad6e:	4b06      	ldr	r3, [pc, #24]	; (ad88 <voltageOnCall+0x3c>)
    ad70:	4798      	blx	r3
}
    ad72:	46c0      	nop			; (mov r8, r8)
    ad74:	46bd      	mov	sp, r7
    ad76:	b005      	add	sp, #20
    ad78:	bd90      	pop	{r4, r7, pc}
    ad7a:	46c0      	nop			; (mov r8, r8)
    ad7c:	200006dc 	.word	0x200006dc
    ad80:	00019714 	.word	0x00019714
    ad84:	00017edd 	.word	0x00017edd
    ad88:	0000459d 	.word	0x0000459d

0000ad8c <setM2MEventState>:

void setM2MEventState(uint8_t eventNo, uint8_t state)
{
    ad8c:	b580      	push	{r7, lr}
    ad8e:	b082      	sub	sp, #8
    ad90:	af00      	add	r7, sp, #0
    ad92:	0002      	movs	r2, r0
    ad94:	1dfb      	adds	r3, r7, #7
    ad96:	701a      	strb	r2, [r3, #0]
    ad98:	1dbb      	adds	r3, r7, #6
    ad9a:	1c0a      	adds	r2, r1, #0
    ad9c:	701a      	strb	r2, [r3, #0]
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
    ad9e:	1dfb      	adds	r3, r7, #7
    ada0:	781b      	ldrb	r3, [r3, #0]
    ada2:	4a0e      	ldr	r2, [pc, #56]	; (addc <setM2MEventState+0x50>)
    ada4:	5cd3      	ldrb	r3, [r2, r3]
    ada6:	2b02      	cmp	r3, #2
    ada8:	d10e      	bne.n	adc8 <setM2MEventState+0x3c>
	{
		if(state==ME_NOTAVAILABLE)
    adaa:	1dbb      	adds	r3, r7, #6
    adac:	781b      	ldrb	r3, [r3, #0]
    adae:	2b03      	cmp	r3, #3
    adb0:	d10a      	bne.n	adc8 <setM2MEventState+0x3c>
		{
			state=ME_CLEARED;
    adb2:	1dbb      	adds	r3, r7, #6
    adb4:	2200      	movs	r2, #0
    adb6:	701a      	strb	r2, [r3, #0]
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
    adb8:	1dfb      	adds	r3, r7, #7
    adba:	781b      	ldrb	r3, [r3, #0]
    adbc:	4a08      	ldr	r2, [pc, #32]	; (ade0 <setM2MEventState+0x54>)
    adbe:	5cd3      	ldrb	r3, [r2, r3]
    adc0:	001a      	movs	r2, r3
    adc2:	4b08      	ldr	r3, [pc, #32]	; (ade4 <setM2MEventState+0x58>)
    adc4:	2100      	movs	r1, #0
    adc6:	5499      	strb	r1, [r3, r2]
		}
	}
	m2mEvent_arr[eventNo]=state;
    adc8:	1dfb      	adds	r3, r7, #7
    adca:	781b      	ldrb	r3, [r3, #0]
    adcc:	4a03      	ldr	r2, [pc, #12]	; (addc <setM2MEventState+0x50>)
    adce:	1db9      	adds	r1, r7, #6
    add0:	7809      	ldrb	r1, [r1, #0]
    add2:	54d1      	strb	r1, [r2, r3]
}
    add4:	46c0      	nop			; (mov r8, r8)
    add6:	46bd      	mov	sp, r7
    add8:	b002      	add	sp, #8
    adda:	bd80      	pop	{r7, pc}
    addc:	20000788 	.word	0x20000788
    ade0:	20000718 	.word	0x20000718
    ade4:	20000700 	.word	0x20000700

0000ade8 <M2MEventManager>:

void M2MEventManager(void)
{
    ade8:	b580      	push	{r7, lr}
    adea:	b082      	sub	sp, #8
    adec:	af00      	add	r7, sp, #0
	uint8_t j=2;
    adee:	1dfb      	adds	r3, r7, #7
    adf0:	2202      	movs	r2, #2
    adf2:	701a      	strb	r2, [r3, #0]
	while(j--)
    adf4:	e00a      	b.n	ae0c <M2MEventManager+0x24>
	{
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
    adf6:	1dfb      	adds	r3, r7, #7
    adf8:	781b      	ldrb	r3, [r3, #0]
    adfa:	4a0a      	ldr	r2, [pc, #40]	; (ae24 <M2MEventManager+0x3c>)
    adfc:	5cd3      	ldrb	r3, [r2, r3]
    adfe:	2b01      	cmp	r3, #1
    ae00:	d104      	bne.n	ae0c <M2MEventManager+0x24>
		{
			registerM2MEvent(j);
    ae02:	1dfb      	adds	r3, r7, #7
    ae04:	781b      	ldrb	r3, [r3, #0]
    ae06:	0018      	movs	r0, r3
    ae08:	4b07      	ldr	r3, [pc, #28]	; (ae28 <M2MEventManager+0x40>)
    ae0a:	4798      	blx	r3
	while(j--)
    ae0c:	1dfb      	adds	r3, r7, #7
    ae0e:	781b      	ldrb	r3, [r3, #0]
    ae10:	1dfa      	adds	r2, r7, #7
    ae12:	1e59      	subs	r1, r3, #1
    ae14:	7011      	strb	r1, [r2, #0]
    ae16:	2b00      	cmp	r3, #0
    ae18:	d1ed      	bne.n	adf6 <M2MEventManager+0xe>
		}
	}
}
    ae1a:	46c0      	nop			; (mov r8, r8)
    ae1c:	46bd      	mov	sp, r7
    ae1e:	b002      	add	sp, #8
    ae20:	bd80      	pop	{r7, pc}
    ae22:	46c0      	nop			; (mov r8, r8)
    ae24:	20000788 	.word	0x20000788
    ae28:	000047ed 	.word	0x000047ed

0000ae2c <SIMEventManager>:

void SIMEventManager(void)
{
    ae2c:	b590      	push	{r4, r7, lr}
    ae2e:	b083      	sub	sp, #12
    ae30:	af00      	add	r7, sp, #0
	uint8_t i = 0;
    ae32:	1dfb      	adds	r3, r7, #7
    ae34:	2200      	movs	r2, #0
    ae36:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
    ae38:	4b1e      	ldr	r3, [pc, #120]	; (aeb4 <SIMEventManager+0x88>)
    ae3a:	795b      	ldrb	r3, [r3, #5]
    ae3c:	2b00      	cmp	r3, #0
    ae3e:	d00b      	beq.n	ae58 <SIMEventManager+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    ae40:	4b1c      	ldr	r3, [pc, #112]	; (aeb4 <SIMEventManager+0x88>)
    ae42:	791b      	ldrb	r3, [r3, #4]
    ae44:	2b00      	cmp	r3, #0
    ae46:	d003      	beq.n	ae50 <SIMEventManager+0x24>
		{
			i = 19;
    ae48:	1dfb      	adds	r3, r7, #7
    ae4a:	2213      	movs	r2, #19
    ae4c:	701a      	strb	r2, [r3, #0]
    ae4e:	e025      	b.n	ae9c <SIMEventManager+0x70>
		}
		else
		{
			i = 17;
    ae50:	1dfb      	adds	r3, r7, #7
    ae52:	2211      	movs	r2, #17
    ae54:	701a      	strb	r2, [r3, #0]
    ae56:	e021      	b.n	ae9c <SIMEventManager+0x70>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    ae58:	4b16      	ldr	r3, [pc, #88]	; (aeb4 <SIMEventManager+0x88>)
    ae5a:	785b      	ldrb	r3, [r3, #1]
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d003      	beq.n	ae68 <SIMEventManager+0x3c>
		{
			i = 14;
    ae60:	1dfb      	adds	r3, r7, #7
    ae62:	220e      	movs	r2, #14
    ae64:	701a      	strb	r2, [r3, #0]
    ae66:	e019      	b.n	ae9c <SIMEventManager+0x70>
		}
		else
		{
			i = 12;
    ae68:	1dfb      	adds	r3, r7, #7
    ae6a:	220c      	movs	r2, #12
    ae6c:	701a      	strb	r2, [r3, #0]
		}
	}
	
	while(i--)
    ae6e:	e015      	b.n	ae9c <SIMEventManager+0x70>
	{
		if (!simEventTemp[i])
    ae70:	1dfb      	adds	r3, r7, #7
    ae72:	781b      	ldrb	r3, [r3, #0]
    ae74:	4a10      	ldr	r2, [pc, #64]	; (aeb8 <SIMEventManager+0x8c>)
    ae76:	5cd3      	ldrb	r3, [r2, r3]
    ae78:	2201      	movs	r2, #1
    ae7a:	4053      	eors	r3, r2
    ae7c:	b2db      	uxtb	r3, r3
    ae7e:	2b00      	cmp	r3, #0
    ae80:	d00c      	beq.n	ae9c <SIMEventManager+0x70>
		simEventTemp[i] = registerEvent(simEvent[i]);
    ae82:	1dfb      	adds	r3, r7, #7
    ae84:	781c      	ldrb	r4, [r3, #0]
    ae86:	1dfb      	adds	r3, r7, #7
    ae88:	781b      	ldrb	r3, [r3, #0]
    ae8a:	4a0c      	ldr	r2, [pc, #48]	; (aebc <SIMEventManager+0x90>)
    ae8c:	5cd3      	ldrb	r3, [r2, r3]
    ae8e:	0018      	movs	r0, r3
    ae90:	4b0b      	ldr	r3, [pc, #44]	; (aec0 <SIMEventManager+0x94>)
    ae92:	4798      	blx	r3
    ae94:	0003      	movs	r3, r0
    ae96:	001a      	movs	r2, r3
    ae98:	4b07      	ldr	r3, [pc, #28]	; (aeb8 <SIMEventManager+0x8c>)
    ae9a:	551a      	strb	r2, [r3, r4]
	while(i--)
    ae9c:	1dfb      	adds	r3, r7, #7
    ae9e:	781b      	ldrb	r3, [r3, #0]
    aea0:	1dfa      	adds	r2, r7, #7
    aea2:	1e59      	subs	r1, r3, #1
    aea4:	7011      	strb	r1, [r2, #0]
    aea6:	2b00      	cmp	r3, #0
    aea8:	d1e2      	bne.n	ae70 <SIMEventManager+0x44>
	}
}
    aeaa:	46c0      	nop			; (mov r8, r8)
    aeac:	46bd      	mov	sp, r7
    aeae:	b003      	add	sp, #12
    aeb0:	bd90      	pop	{r4, r7, pc}
    aeb2:	46c0      	nop			; (mov r8, r8)
    aeb4:	20000628 	.word	0x20000628
    aeb8:	20000700 	.word	0x20000700
    aebc:	200007b4 	.word	0x200007b4
    aec0:	000046d1 	.word	0x000046d1

0000aec4 <checkCurrentConsumption>:


void checkCurrentConsumption(void)
{
    aec4:	b580      	push	{r7, lr}
    aec6:	b084      	sub	sp, #16
    aec8:	af00      	add	r7, sp, #0
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
    aeca:	4b6f      	ldr	r3, [pc, #444]	; (b088 <checkCurrentConsumption+0x1c4>)
    aecc:	781b      	ldrb	r3, [r3, #0]
    aece:	2b00      	cmp	r3, #0
    aed0:	d000      	beq.n	aed4 <checkCurrentConsumption+0x10>
    aed2:	e0d5      	b.n	b080 <checkCurrentConsumption+0x1bc>
    aed4:	4b6d      	ldr	r3, [pc, #436]	; (b08c <checkCurrentConsumption+0x1c8>)
    aed6:	781b      	ldrb	r3, [r3, #0]
    aed8:	2b00      	cmp	r3, #0
    aeda:	d000      	beq.n	aede <checkCurrentConsumption+0x1a>
    aedc:	e0d0      	b.n	b080 <checkCurrentConsumption+0x1bc>
    aede:	4b6c      	ldr	r3, [pc, #432]	; (b090 <checkCurrentConsumption+0x1cc>)
    aee0:	4798      	blx	r3
    aee2:	0003      	movs	r3, r0
    aee4:	001a      	movs	r2, r3
    aee6:	2301      	movs	r3, #1
    aee8:	4053      	eors	r3, r2
    aeea:	b2db      	uxtb	r3, r3
    aeec:	2b00      	cmp	r3, #0
    aeee:	d000      	beq.n	aef2 <checkCurrentConsumption+0x2e>
    aef0:	e0c6      	b.n	b080 <checkCurrentConsumption+0x1bc>
    aef2:	4b68      	ldr	r3, [pc, #416]	; (b094 <checkCurrentConsumption+0x1d0>)
    aef4:	7bdb      	ldrb	r3, [r3, #15]
    aef6:	2b00      	cmp	r3, #0
    aef8:	d100      	bne.n	aefc <checkCurrentConsumption+0x38>
    aefa:	e0c1      	b.n	b080 <checkCurrentConsumption+0x1bc>
    aefc:	4b66      	ldr	r3, [pc, #408]	; (b098 <checkCurrentConsumption+0x1d4>)
    aefe:	781b      	ldrb	r3, [r3, #0]
    af00:	2b00      	cmp	r3, #0
    af02:	d000      	beq.n	af06 <checkCurrentConsumption+0x42>
    af04:	e0bc      	b.n	b080 <checkCurrentConsumption+0x1bc>
	{
		return;
	}
	//|| ((xTaskGetTickCount()-lastCurrentReadingTime)<500))
	
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
    af06:	4b65      	ldr	r3, [pc, #404]	; (b09c <checkCurrentConsumption+0x1d8>)
    af08:	781b      	ldrb	r3, [r3, #0]
    af0a:	2b00      	cmp	r3, #0
    af0c:	d00b      	beq.n	af26 <checkCurrentConsumption+0x62>
    af0e:	4b64      	ldr	r3, [pc, #400]	; (b0a0 <checkCurrentConsumption+0x1dc>)
    af10:	4798      	blx	r3
    af12:	0002      	movs	r2, r0
    af14:	4b63      	ldr	r3, [pc, #396]	; (b0a4 <checkCurrentConsumption+0x1e0>)
    af16:	681b      	ldr	r3, [r3, #0]
    af18:	1ad3      	subs	r3, r2, r3
    af1a:	4a63      	ldr	r2, [pc, #396]	; (b0a8 <checkCurrentConsumption+0x1e4>)
    af1c:	4293      	cmp	r3, r2
    af1e:	d902      	bls.n	af26 <checkCurrentConsumption+0x62>
	{
		enableCurrentBuffer=false;
    af20:	4b5e      	ldr	r3, [pc, #376]	; (b09c <checkCurrentConsumption+0x1d8>)
    af22:	2200      	movs	r2, #0
    af24:	701a      	strb	r2, [r3, #0]
	}
	
	//lastCurrentReadingTime=xTaskGetTickCount();
	
	uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    af26:	4b61      	ldr	r3, [pc, #388]	; (b0ac <checkCurrentConsumption+0x1e8>)
    af28:	691b      	ldr	r3, [r3, #16]
    af2a:	607b      	str	r3, [r7, #4]
	//{
	//ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
	//xSemaphoreGive(xADC_Semaphore);
	//}
	
	uint32_t temp = ADCcurrent;
    af2c:	687b      	ldr	r3, [r7, #4]
    af2e:	603b      	str	r3, [r7, #0]
	
	uint32_t overLoadDetectValue=12000;
    af30:	4b5f      	ldr	r3, [pc, #380]	; (b0b0 <checkCurrentConsumption+0x1ec>)
    af32:	60fb      	str	r3, [r7, #12]
	
	uint8_t temp2;
	
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
    af34:	4b59      	ldr	r3, [pc, #356]	; (b09c <checkCurrentConsumption+0x1d8>)
    af36:	781b      	ldrb	r3, [r3, #0]
    af38:	2b00      	cmp	r3, #0
    af3a:	d00c      	beq.n	af56 <checkCurrentConsumption+0x92>
    af3c:	4b55      	ldr	r3, [pc, #340]	; (b094 <checkCurrentConsumption+0x1d0>)
    af3e:	691b      	ldr	r3, [r3, #16]
    af40:	005a      	lsls	r2, r3, #1
    af42:	683b      	ldr	r3, [r7, #0]
    af44:	429a      	cmp	r2, r3
    af46:	d206      	bcs.n	af56 <checkCurrentConsumption+0x92>
	{
		temp2 = CR_OVER2;
    af48:	230b      	movs	r3, #11
    af4a:	18fb      	adds	r3, r7, r3
    af4c:	2202      	movs	r2, #2
    af4e:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=18000;
    af50:	4b58      	ldr	r3, [pc, #352]	; (b0b4 <checkCurrentConsumption+0x1f0>)
    af52:	60fb      	str	r3, [r7, #12]
    af54:	e055      	b.n	b002 <checkCurrentConsumption+0x13e>
	}
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
    af56:	4b51      	ldr	r3, [pc, #324]	; (b09c <checkCurrentConsumption+0x1d8>)
    af58:	781b      	ldrb	r3, [r3, #0]
    af5a:	2201      	movs	r2, #1
    af5c:	4053      	eors	r3, r2
    af5e:	b2db      	uxtb	r3, r3
    af60:	2b00      	cmp	r3, #0
    af62:	d00d      	beq.n	af80 <checkCurrentConsumption+0xbc>
    af64:	4b4b      	ldr	r3, [pc, #300]	; (b094 <checkCurrentConsumption+0x1d0>)
    af66:	691b      	ldr	r3, [r3, #16]
    af68:	005a      	lsls	r2, r3, #1
    af6a:	683b      	ldr	r3, [r7, #0]
    af6c:	429a      	cmp	r2, r3
    af6e:	d207      	bcs.n	af80 <checkCurrentConsumption+0xbc>
	{
		temp2 = CR_OVER;
    af70:	230b      	movs	r3, #11
    af72:	18fb      	adds	r3, r7, r3
    af74:	2201      	movs	r2, #1
    af76:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
    af78:	68fb      	ldr	r3, [r7, #12]
    af7a:	089b      	lsrs	r3, r3, #2
    af7c:	60fb      	str	r3, [r7, #12]
    af7e:	e040      	b.n	b002 <checkCurrentConsumption+0x13e>
	}
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
    af80:	4b46      	ldr	r3, [pc, #280]	; (b09c <checkCurrentConsumption+0x1d8>)
    af82:	781b      	ldrb	r3, [r3, #0]
    af84:	2201      	movs	r2, #1
    af86:	4053      	eors	r3, r2
    af88:	b2db      	uxtb	r3, r3
    af8a:	2b00      	cmp	r3, #0
    af8c:	d010      	beq.n	afb0 <checkCurrentConsumption+0xec>
    af8e:	4b41      	ldr	r3, [pc, #260]	; (b094 <checkCurrentConsumption+0x1d0>)
    af90:	691a      	ldr	r2, [r3, #16]
    af92:	4b40      	ldr	r3, [pc, #256]	; (b094 <checkCurrentConsumption+0x1d0>)
    af94:	691b      	ldr	r3, [r3, #16]
    af96:	085b      	lsrs	r3, r3, #1
    af98:	18d2      	adds	r2, r2, r3
    af9a:	683b      	ldr	r3, [r7, #0]
    af9c:	429a      	cmp	r2, r3
    af9e:	d207      	bcs.n	afb0 <checkCurrentConsumption+0xec>
	{
		temp2 = CR_OVER;
    afa0:	230b      	movs	r3, #11
    afa2:	18fb      	adds	r3, r7, r3
    afa4:	2201      	movs	r2, #1
    afa6:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>1;
    afa8:	68fb      	ldr	r3, [r7, #12]
    afaa:	085b      	lsrs	r3, r3, #1
    afac:	60fb      	str	r3, [r7, #12]
    afae:	e028      	b.n	b002 <checkCurrentConsumption+0x13e>
	}
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
    afb0:	4b3a      	ldr	r3, [pc, #232]	; (b09c <checkCurrentConsumption+0x1d8>)
    afb2:	781b      	ldrb	r3, [r3, #0]
    afb4:	2201      	movs	r2, #1
    afb6:	4053      	eors	r3, r2
    afb8:	b2db      	uxtb	r3, r3
    afba:	2b00      	cmp	r3, #0
    afbc:	d009      	beq.n	afd2 <checkCurrentConsumption+0x10e>
    afbe:	4b35      	ldr	r3, [pc, #212]	; (b094 <checkCurrentConsumption+0x1d0>)
    afc0:	695a      	ldr	r2, [r3, #20]
    afc2:	683b      	ldr	r3, [r7, #0]
    afc4:	429a      	cmp	r2, r3
    afc6:	d204      	bcs.n	afd2 <checkCurrentConsumption+0x10e>
	{
		temp2 = CR_OVER;
    afc8:	230b      	movs	r3, #11
    afca:	18fb      	adds	r3, r7, r3
    afcc:	2201      	movs	r2, #1
    afce:	701a      	strb	r2, [r3, #0]
    afd0:	e017      	b.n	b002 <checkCurrentConsumption+0x13e>
	}
	else if(temp < user_settings_parameter_struct.underloadAddress && !enableCurrentBuffer)		// only consider noLoad after 30 secs
    afd2:	4b30      	ldr	r3, [pc, #192]	; (b094 <checkCurrentConsumption+0x1d0>)
    afd4:	699a      	ldr	r2, [r3, #24]
    afd6:	683b      	ldr	r3, [r7, #0]
    afd8:	429a      	cmp	r2, r3
    afda:	d90e      	bls.n	affa <checkCurrentConsumption+0x136>
    afdc:	4b2f      	ldr	r3, [pc, #188]	; (b09c <checkCurrentConsumption+0x1d8>)
    afde:	781b      	ldrb	r3, [r3, #0]
    afe0:	2201      	movs	r2, #1
    afe2:	4053      	eors	r3, r2
    afe4:	b2db      	uxtb	r3, r3
    afe6:	2b00      	cmp	r3, #0
    afe8:	d007      	beq.n	affa <checkCurrentConsumption+0x136>
	{
		temp2 = CR_UNDER;
    afea:	230b      	movs	r3, #11
    afec:	18fb      	adds	r3, r7, r3
    afee:	2202      	movs	r2, #2
    aff0:	701a      	strb	r2, [r3, #0]
		overLoadDetectValue=overLoadDetectValue>>2;
    aff2:	68fb      	ldr	r3, [r7, #12]
    aff4:	089b      	lsrs	r3, r3, #2
    aff6:	60fb      	str	r3, [r7, #12]
    aff8:	e003      	b.n	b002 <checkCurrentConsumption+0x13e>
	}
	else
	{
		temp2= CR_NORMAL;
    affa:	230b      	movs	r3, #11
    affc:	18fb      	adds	r3, r7, r3
    affe:	2200      	movs	r2, #0
    b000:	701a      	strb	r2, [r3, #0]
	}
	if(lastCurrentReading == temp2)
    b002:	4b2d      	ldr	r3, [pc, #180]	; (b0b8 <checkCurrentConsumption+0x1f4>)
    b004:	781b      	ldrb	r3, [r3, #0]
    b006:	220b      	movs	r2, #11
    b008:	18ba      	adds	r2, r7, r2
    b00a:	7812      	ldrb	r2, [r2, #0]
    b00c:	429a      	cmp	r2, r3
    b00e:	d12c      	bne.n	b06a <checkCurrentConsumption+0x1a6>
	{
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
    b010:	4b23      	ldr	r3, [pc, #140]	; (b0a0 <checkCurrentConsumption+0x1dc>)
    b012:	4798      	blx	r3
    b014:	0002      	movs	r2, r0
    b016:	4b29      	ldr	r3, [pc, #164]	; (b0bc <checkCurrentConsumption+0x1f8>)
    b018:	681b      	ldr	r3, [r3, #0]
    b01a:	1ad2      	subs	r2, r2, r3
    b01c:	68fb      	ldr	r3, [r7, #12]
    b01e:	429a      	cmp	r2, r3
    b020:	d92f      	bls.n	b082 <checkCurrentConsumption+0x1be>
		{
			if(temp2==CR_OVER)
    b022:	230b      	movs	r3, #11
    b024:	18fb      	adds	r3, r7, r3
    b026:	781b      	ldrb	r3, [r3, #0]
    b028:	2b01      	cmp	r3, #1
    b02a:	d10c      	bne.n	b046 <checkCurrentConsumption+0x182>
			{
				stopMotor(false,true,false);
    b02c:	2200      	movs	r2, #0
    b02e:	2101      	movs	r1, #1
    b030:	2000      	movs	r0, #0
    b032:	4b23      	ldr	r3, [pc, #140]	; (b0c0 <checkCurrentConsumption+0x1fc>)
    b034:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
    b036:	2042      	movs	r0, #66	; 0x42
    b038:	4b22      	ldr	r3, [pc, #136]	; (b0c4 <checkCurrentConsumption+0x200>)
    b03a:	4798      	blx	r3
    b03c:	0003      	movs	r3, r0
    b03e:	001a      	movs	r2, r3
    b040:	4b21      	ldr	r3, [pc, #132]	; (b0c8 <checkCurrentConsumption+0x204>)
    b042:	731a      	strb	r2, [r3, #12]
    b044:	e01d      	b.n	b082 <checkCurrentConsumption+0x1be>
			}
			else if(temp2==CR_UNDER)
    b046:	230b      	movs	r3, #11
    b048:	18fb      	adds	r3, r7, r3
    b04a:	781b      	ldrb	r3, [r3, #0]
    b04c:	2b02      	cmp	r3, #2
    b04e:	d118      	bne.n	b082 <checkCurrentConsumption+0x1be>
			{
				stopMotor(false,true,false);
    b050:	2200      	movs	r2, #0
    b052:	2101      	movs	r1, #1
    b054:	2000      	movs	r0, #0
    b056:	4b1a      	ldr	r3, [pc, #104]	; (b0c0 <checkCurrentConsumption+0x1fc>)
    b058:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
    b05a:	204a      	movs	r0, #74	; 0x4a
    b05c:	4b19      	ldr	r3, [pc, #100]	; (b0c4 <checkCurrentConsumption+0x200>)
    b05e:	4798      	blx	r3
    b060:	0003      	movs	r3, r0
    b062:	001a      	movs	r2, r3
    b064:	4b18      	ldr	r3, [pc, #96]	; (b0c8 <checkCurrentConsumption+0x204>)
    b066:	735a      	strb	r2, [r3, #13]
    b068:	e00b      	b.n	b082 <checkCurrentConsumption+0x1be>
			}
		}
	}
	else
	{
		currentEventFilterTempTime = xTaskGetTickCount();
    b06a:	4b0d      	ldr	r3, [pc, #52]	; (b0a0 <checkCurrentConsumption+0x1dc>)
    b06c:	4798      	blx	r3
    b06e:	0002      	movs	r2, r0
    b070:	4b12      	ldr	r3, [pc, #72]	; (b0bc <checkCurrentConsumption+0x1f8>)
    b072:	601a      	str	r2, [r3, #0]
		lastCurrentReading=temp2;
    b074:	4b10      	ldr	r3, [pc, #64]	; (b0b8 <checkCurrentConsumption+0x1f4>)
    b076:	220b      	movs	r2, #11
    b078:	18ba      	adds	r2, r7, r2
    b07a:	7812      	ldrb	r2, [r2, #0]
    b07c:	701a      	strb	r2, [r3, #0]
    b07e:	e000      	b.n	b082 <checkCurrentConsumption+0x1be>
		return;
    b080:	46c0      	nop			; (mov r8, r8)
	}
}
    b082:	46bd      	mov	sp, r7
    b084:	b004      	add	sp, #16
    b086:	bd80      	pop	{r7, pc}
    b088:	20000771 	.word	0x20000771
    b08c:	20000761 	.word	0x20000761
    b090:	00009e8d 	.word	0x00009e8d
    b094:	2000065c 	.word	0x2000065c
    b098:	20000773 	.word	0x20000773
    b09c:	20000738 	.word	0x20000738
    b0a0:	0000f37d 	.word	0x0000f37d
    b0a4:	2000076c 	.word	0x2000076c
    b0a8:	00007530 	.word	0x00007530
    b0ac:	200006dc 	.word	0x200006dc
    b0b0:	00002ee0 	.word	0x00002ee0
    b0b4:	00004650 	.word	0x00004650
    b0b8:	2000075e 	.word	0x2000075e
    b0bc:	20000744 	.word	0x20000744
    b0c0:	0000a78d 	.word	0x0000a78d
    b0c4:	000046d1 	.word	0x000046d1
    b0c8:	20000700 	.word	0x20000700

0000b0cc <button_detect_pin_callback>:

static void button_detect_pin_callback(void)
{
    b0cc:	b580      	push	{r7, lr}
    b0ce:	af00      	add	r7, sp, #0
	buttonEventOccured = true;
    b0d0:	4b02      	ldr	r3, [pc, #8]	; (b0dc <button_detect_pin_callback+0x10>)
    b0d2:	2201      	movs	r2, #1
    b0d4:	701a      	strb	r2, [r3, #0]
	//	xTaskNotifyGive(fiftymsTask);
}
    b0d6:	46c0      	nop			; (mov r8, r8)
    b0d8:	46bd      	mov	sp, r7
    b0da:	bd80      	pop	{r7, pc}
    b0dc:	20000777 	.word	0x20000777

0000b0e0 <vTask_MOTORCONTROL>:

static void vTask_MOTORCONTROL(void *params)
{
    b0e0:	b590      	push	{r4, r7, lr}
    b0e2:	b087      	sub	sp, #28
    b0e4:	af00      	add	r7, sp, #0
    b0e6:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	
	Configure_ADC0();
    b0e8:	4bc1      	ldr	r3, [pc, #772]	; (b3f0 <vTask_MOTORCONTROL+0x310>)
    b0ea:	4798      	blx	r3
	
	configure_ac();
    b0ec:	4bc1      	ldr	r3, [pc, #772]	; (b3f4 <vTask_MOTORCONTROL+0x314>)
    b0ee:	4798      	blx	r3
	configure_rtc();
    b0f0:	4bc1      	ldr	r3, [pc, #772]	; (b3f8 <vTask_MOTORCONTROL+0x318>)
    b0f2:	4798      	blx	r3
	configure_event();
    b0f4:	4bc1      	ldr	r3, [pc, #772]	; (b3fc <vTask_MOTORCONTROL+0x31c>)
    b0f6:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	gotOffCommand = false;
    b0f8:	4bc1      	ldr	r3, [pc, #772]	; (b400 <vTask_MOTORCONTROL+0x320>)
    b0fa:	2200      	movs	r2, #0
    b0fc:	701a      	strb	r2, [r3, #0]
	gotOnCommand = false;
    b0fe:	4bc1      	ldr	r3, [pc, #772]	; (b404 <vTask_MOTORCONTROL+0x324>)
    b100:	2200      	movs	r2, #0
    b102:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////
	eventOccured = false;
    b104:	4bc0      	ldr	r3, [pc, #768]	; (b408 <vTask_MOTORCONTROL+0x328>)
    b106:	2200      	movs	r2, #0
    b108:	701a      	strb	r2, [r3, #0]
	
	uint8_t last_comparison = AC_CHAN_STATUS_UNKNOWN;
    b10a:	2315      	movs	r3, #21
    b10c:	18fb      	adds	r3, r7, r3
    b10e:	2201      	movs	r2, #1
    b110:	701a      	strb	r2, [r3, #0]
	
	//sets the variable to store current ticks, so that we can delay first event operation
	uint32_t delayForFirstEvent = xTaskGetTickCount();
    b112:	4bbe      	ldr	r3, [pc, #760]	; (b40c <vTask_MOTORCONTROL+0x32c>)
    b114:	4798      	blx	r3
    b116:	0003      	movs	r3, r0
    b118:	613b      	str	r3, [r7, #16]
	firstEvent = true;
    b11a:	4bbd      	ldr	r3, [pc, #756]	; (b410 <vTask_MOTORCONTROL+0x330>)
    b11c:	2201      	movs	r2, #1
    b11e:	701a      	strb	r2, [r3, #0]
	
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    b120:	2315      	movs	r3, #21
    b122:	18fc      	adds	r4, r7, r3
    b124:	4bbb      	ldr	r3, [pc, #748]	; (b414 <vTask_MOTORCONTROL+0x334>)
    b126:	2100      	movs	r1, #0
    b128:	0018      	movs	r0, r3
    b12a:	4bbb      	ldr	r3, [pc, #748]	; (b418 <vTask_MOTORCONTROL+0x338>)
    b12c:	4798      	blx	r3
    b12e:	0003      	movs	r3, r0
    b130:	7023      	strb	r3, [r4, #0]
	vTaskDelay(500/portTICK_PERIOD_MS);
    b132:	23fa      	movs	r3, #250	; 0xfa
    b134:	005b      	lsls	r3, r3, #1
    b136:	0018      	movs	r0, r3
    b138:	4bb8      	ldr	r3, [pc, #736]	; (b41c <vTask_MOTORCONTROL+0x33c>)
    b13a:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
    b13c:	2315      	movs	r3, #21
    b13e:	18fc      	adds	r4, r7, r3
    b140:	4bb4      	ldr	r3, [pc, #720]	; (b414 <vTask_MOTORCONTROL+0x334>)
    b142:	2100      	movs	r1, #0
    b144:	0018      	movs	r0, r3
    b146:	4bb4      	ldr	r3, [pc, #720]	; (b418 <vTask_MOTORCONTROL+0x338>)
    b148:	4798      	blx	r3
    b14a:	0003      	movs	r3, r0
    b14c:	7023      	strb	r3, [r4, #0]
	
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
    b14e:	2315      	movs	r3, #21
    b150:	18fb      	adds	r3, r7, r3
    b152:	781b      	ldrb	r3, [r3, #0]
    b154:	2204      	movs	r2, #4
    b156:	4013      	ands	r3, r2
    b158:	d003      	beq.n	b162 <vTask_MOTORCONTROL+0x82>
	{
		isACpowerAvailable = true;
    b15a:	4bb1      	ldr	r3, [pc, #708]	; (b420 <vTask_MOTORCONTROL+0x340>)
    b15c:	2201      	movs	r2, #1
    b15e:	701a      	strb	r2, [r3, #0]
    b160:	e002      	b.n	b168 <vTask_MOTORCONTROL+0x88>
	}
	else
	{
		isACpowerAvailable = false;
    b162:	4baf      	ldr	r3, [pc, #700]	; (b420 <vTask_MOTORCONTROL+0x340>)
    b164:	2200      	movs	r2, #0
    b166:	701a      	strb	r2, [r3, #0]
	}
	
	current_three_phase_state = AC_OFF;
    b168:	4bae      	ldr	r3, [pc, #696]	; (b424 <vTask_MOTORCONTROL+0x344>)
    b16a:	2200      	movs	r2, #0
    b16c:	701a      	strb	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////
	
	startTimerOn = false;
    b16e:	4bae      	ldr	r3, [pc, #696]	; (b428 <vTask_MOTORCONTROL+0x348>)
    b170:	2200      	movs	r2, #0
    b172:	701a      	strb	r2, [r3, #0]

	singlePhasingTime = 10;
    b174:	4bad      	ldr	r3, [pc, #692]	; (b42c <vTask_MOTORCONTROL+0x34c>)
    b176:	220a      	movs	r2, #10
    b178:	701a      	strb	r2, [r3, #0]
	singlePhasingTimerOn = false;
    b17a:	4bad      	ldr	r3, [pc, #692]	; (b430 <vTask_MOTORCONTROL+0x350>)
    b17c:	2200      	movs	r2, #0
    b17e:	701a      	strb	r2, [r3, #0]

	startSequenceTimerTime = 20;
    b180:	4bac      	ldr	r3, [pc, #688]	; (b434 <vTask_MOTORCONTROL+0x354>)
    b182:	2214      	movs	r2, #20
    b184:	701a      	strb	r2, [r3, #0]
	starDeltaTimerOn=false;
    b186:	4bac      	ldr	r3, [pc, #688]	; (b438 <vTask_MOTORCONTROL+0x358>)
    b188:	2200      	movs	r2, #0
    b18a:	701a      	strb	r2, [r3, #0]
	startSequenceOn = false;
    b18c:	4bab      	ldr	r3, [pc, #684]	; (b43c <vTask_MOTORCONTROL+0x35c>)
    b18e:	2200      	movs	r2, #0
    b190:	701a      	strb	r2, [r3, #0]

	stopSequenceTimerTime = 20;
    b192:	4bab      	ldr	r3, [pc, #684]	; (b440 <vTask_MOTORCONTROL+0x360>)
    b194:	2214      	movs	r2, #20
    b196:	701a      	strb	r2, [r3, #0]
	stopSequenceOn = false;
    b198:	4baa      	ldr	r3, [pc, #680]	; (b444 <vTask_MOTORCONTROL+0x364>)
    b19a:	2200      	movs	r2, #0
    b19c:	701a      	strb	r2, [r3, #0]
	
	setAllPhaseState(false); // allPhase = false;
    b19e:	2000      	movs	r0, #0
    b1a0:	4ba9      	ldr	r3, [pc, #676]	; (b448 <vTask_MOTORCONTROL+0x368>)
    b1a2:	4798      	blx	r3
	setMotorState(false);// mFeedback = false;
    b1a4:	2000      	movs	r0, #0
    b1a6:	4ba9      	ldr	r3, [pc, #676]	; (b44c <vTask_MOTORCONTROL+0x36c>)
    b1a8:	4798      	blx	r3
	setACPowerState(false);//  phaseAC = false;
    b1aa:	2000      	movs	r0, #0
    b1ac:	4ba8      	ldr	r3, [pc, #672]	; (b450 <vTask_MOTORCONTROL+0x370>)
    b1ae:	4798      	blx	r3
	
	lastPressTime=0;
    b1b0:	4ba8      	ldr	r3, [pc, #672]	; (b454 <vTask_MOTORCONTROL+0x374>)
    b1b2:	2200      	movs	r2, #0
    b1b4:	601a      	str	r2, [r3, #0]
	lastButtonEvent=0;
    b1b6:	4ba8      	ldr	r3, [pc, #672]	; (b458 <vTask_MOTORCONTROL+0x378>)
    b1b8:	2200      	movs	r2, #0
    b1ba:	701a      	strb	r2, [r3, #0]
	
	uint8_t i= 0;
    b1bc:	2317      	movs	r3, #23
    b1be:	18fb      	adds	r3, r7, r3
    b1c0:	2200      	movs	r2, #0
    b1c2:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b1c4:	4ba5      	ldr	r3, [pc, #660]	; (b45c <vTask_MOTORCONTROL+0x37c>)
    b1c6:	785b      	ldrb	r3, [r3, #1]
    b1c8:	2b00      	cmp	r3, #0
    b1ca:	d004      	beq.n	b1d6 <vTask_MOTORCONTROL+0xf6>
	{
		i=14;
    b1cc:	2317      	movs	r3, #23
    b1ce:	18fb      	adds	r3, r7, r3
    b1d0:	220e      	movs	r2, #14
    b1d2:	701a      	strb	r2, [r3, #0]
    b1d4:	e00a      	b.n	b1ec <vTask_MOTORCONTROL+0x10c>
	}
	else
	{
		i = 12;
    b1d6:	2317      	movs	r3, #23
    b1d8:	18fb      	adds	r3, r7, r3
    b1da:	220c      	movs	r2, #12
    b1dc:	701a      	strb	r2, [r3, #0]
	}
	while(i--)
    b1de:	e005      	b.n	b1ec <vTask_MOTORCONTROL+0x10c>
	{
		simEventTemp[i] = true;
    b1e0:	2317      	movs	r3, #23
    b1e2:	18fb      	adds	r3, r7, r3
    b1e4:	781b      	ldrb	r3, [r3, #0]
    b1e6:	4a9e      	ldr	r2, [pc, #632]	; (b460 <vTask_MOTORCONTROL+0x380>)
    b1e8:	2101      	movs	r1, #1
    b1ea:	54d1      	strb	r1, [r2, r3]
	while(i--)
    b1ec:	2317      	movs	r3, #23
    b1ee:	18fb      	adds	r3, r7, r3
    b1f0:	781b      	ldrb	r3, [r3, #0]
    b1f2:	2217      	movs	r2, #23
    b1f4:	18ba      	adds	r2, r7, r2
    b1f6:	1e59      	subs	r1, r3, #1
    b1f8:	7011      	strb	r1, [r2, #0]
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	d1f0      	bne.n	b1e0 <vTask_MOTORCONTROL+0x100>
	}
	simEvent[0] = 'N';
    b1fe:	4b99      	ldr	r3, [pc, #612]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b200:	224e      	movs	r2, #78	; 0x4e
    b202:	701a      	strb	r2, [r3, #0]
	simEvent[1] = 'P';
    b204:	4b97      	ldr	r3, [pc, #604]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b206:	2250      	movs	r2, #80	; 0x50
    b208:	705a      	strb	r2, [r3, #1]
	simEvent[2] = 'U';
    b20a:	4b96      	ldr	r3, [pc, #600]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b20c:	2255      	movs	r2, #85	; 0x55
    b20e:	709a      	strb	r2, [r3, #2]
	simEvent[3] = 'F';
    b210:	4b94      	ldr	r3, [pc, #592]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b212:	2246      	movs	r2, #70	; 0x46
    b214:	70da      	strb	r2, [r3, #3]
	simEvent[4] = 'G';
    b216:	4b93      	ldr	r3, [pc, #588]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b218:	2247      	movs	r2, #71	; 0x47
    b21a:	711a      	strb	r2, [r3, #4]
	simEvent[5] = 'L';
    b21c:	4b91      	ldr	r3, [pc, #580]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b21e:	224c      	movs	r2, #76	; 0x4c
    b220:	715a      	strb	r2, [r3, #5]
	simEvent[6] = 'C';
    b222:	4b90      	ldr	r3, [pc, #576]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b224:	2243      	movs	r2, #67	; 0x43
    b226:	719a      	strb	r2, [r3, #6]
	simEvent[7] = 'S';
    b228:	4b8e      	ldr	r3, [pc, #568]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b22a:	2253      	movs	r2, #83	; 0x53
    b22c:	71da      	strb	r2, [r3, #7]
	simEvent[8] = 'O';
    b22e:	4b8d      	ldr	r3, [pc, #564]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b230:	224f      	movs	r2, #79	; 0x4f
    b232:	721a      	strb	r2, [r3, #8]
	simEvent[9] = 'A';
    b234:	4b8b      	ldr	r3, [pc, #556]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b236:	2241      	movs	r2, #65	; 0x41
    b238:	725a      	strb	r2, [r3, #9]

	simEvent[10] = ')';		//AUTO ON EVENT
    b23a:	4b8a      	ldr	r3, [pc, #552]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b23c:	2229      	movs	r2, #41	; 0x29
    b23e:	729a      	strb	r2, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
    b240:	4b88      	ldr	r3, [pc, #544]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b242:	225b      	movs	r2, #91	; 0x5b
    b244:	72da      	strb	r2, [r3, #11]
	
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b246:	4b85      	ldr	r3, [pc, #532]	; (b45c <vTask_MOTORCONTROL+0x37c>)
    b248:	785b      	ldrb	r3, [r3, #1]
    b24a:	2b00      	cmp	r3, #0
    b24c:	d005      	beq.n	b25a <vTask_MOTORCONTROL+0x17a>
	{
		simEvent[12] = 'B';		//Overload Event
    b24e:	4b85      	ldr	r3, [pc, #532]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b250:	2242      	movs	r2, #66	; 0x42
    b252:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
    b254:	4b83      	ldr	r3, [pc, #524]	; (b464 <vTask_MOTORCONTROL+0x384>)
    b256:	224a      	movs	r2, #74	; 0x4a
    b258:	735a      	strb	r2, [r3, #13]
	}
	//////////////////////////////////////////////////////////////////////////
	
	resetAutoStart(true);
    b25a:	2001      	movs	r0, #1
    b25c:	4b82      	ldr	r3, [pc, #520]	; (b468 <vTask_MOTORCONTROL+0x388>)
    b25e:	4798      	blx	r3
	eventOccured=true;
    b260:	4b69      	ldr	r3, [pc, #420]	; (b408 <vTask_MOTORCONTROL+0x328>)
    b262:	2201      	movs	r2, #1
    b264:	701a      	strb	r2, [r3, #0]

	
	for (;;)
	{
		
		if(taskPSet)
    b266:	4b81      	ldr	r3, [pc, #516]	; (b46c <vTask_MOTORCONTROL+0x38c>)
    b268:	781b      	ldrb	r3, [r3, #0]
    b26a:	b2db      	uxtb	r3, r3
    b26c:	2b00      	cmp	r3, #0
    b26e:	d006      	beq.n	b27e <vTask_MOTORCONTROL+0x19e>
		{
			vTaskPrioritySet(NULL,1);
    b270:	2101      	movs	r1, #1
    b272:	2000      	movs	r0, #0
    b274:	4b7e      	ldr	r3, [pc, #504]	; (b470 <vTask_MOTORCONTROL+0x390>)
    b276:	4798      	blx	r3
			taskPSet=false;
    b278:	4b7c      	ldr	r3, [pc, #496]	; (b46c <vTask_MOTORCONTROL+0x38c>)
    b27a:	2200      	movs	r2, #0
    b27c:	701a      	strb	r2, [r3, #0]
		}
		
		if(!startSequenceOn && !stopSequenceOn)
    b27e:	4b6f      	ldr	r3, [pc, #444]	; (b43c <vTask_MOTORCONTROL+0x35c>)
    b280:	781b      	ldrb	r3, [r3, #0]
    b282:	2201      	movs	r2, #1
    b284:	4053      	eors	r3, r2
    b286:	b2db      	uxtb	r3, r3
    b288:	2b00      	cmp	r3, #0
    b28a:	d030      	beq.n	b2ee <vTask_MOTORCONTROL+0x20e>
    b28c:	4b6d      	ldr	r3, [pc, #436]	; (b444 <vTask_MOTORCONTROL+0x364>)
    b28e:	781b      	ldrb	r3, [r3, #0]
    b290:	2201      	movs	r2, #1
    b292:	4053      	eors	r3, r2
    b294:	b2db      	uxtb	r3, r3
    b296:	2b00      	cmp	r3, #0
    b298:	d029      	beq.n	b2ee <vTask_MOTORCONTROL+0x20e>
		{
			uint8_t tempEventOccured=eventOccured;
    b29a:	4b5b      	ldr	r3, [pc, #364]	; (b408 <vTask_MOTORCONTROL+0x328>)
    b29c:	781b      	ldrb	r3, [r3, #0]
    b29e:	b2da      	uxtb	r2, r3
    b2a0:	230f      	movs	r3, #15
    b2a2:	18fb      	adds	r3, r7, r3
    b2a4:	701a      	strb	r2, [r3, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
    b2a6:	4b73      	ldr	r3, [pc, #460]	; (b474 <vTask_MOTORCONTROL+0x394>)
    b2a8:	781b      	ldrb	r3, [r3, #0]
    b2aa:	b2da      	uxtb	r2, r3
    b2ac:	230e      	movs	r3, #14
    b2ae:	18fb      	adds	r3, r7, r3
    b2b0:	701a      	strb	r2, [r3, #0]
			
			
			if(tempEventOccured)
    b2b2:	230f      	movs	r3, #15
    b2b4:	18fb      	adds	r3, r7, r3
    b2b6:	781b      	ldrb	r3, [r3, #0]
    b2b8:	2b00      	cmp	r3, #0
    b2ba:	d011      	beq.n	b2e0 <vTask_MOTORCONTROL+0x200>
			{
				if(firstEvent)
    b2bc:	4b54      	ldr	r3, [pc, #336]	; (b410 <vTask_MOTORCONTROL+0x330>)
    b2be:	781b      	ldrb	r3, [r3, #0]
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d00b      	beq.n	b2dc <vTask_MOTORCONTROL+0x1fc>
				{
					if(xTaskGetTickCount()-delayForFirstEvent>35000L)
    b2c4:	4b51      	ldr	r3, [pc, #324]	; (b40c <vTask_MOTORCONTROL+0x32c>)
    b2c6:	4798      	blx	r3
    b2c8:	0002      	movs	r2, r0
    b2ca:	693b      	ldr	r3, [r7, #16]
    b2cc:	1ad3      	subs	r3, r2, r3
    b2ce:	4a6a      	ldr	r2, [pc, #424]	; (b478 <vTask_MOTORCONTROL+0x398>)
    b2d0:	4293      	cmp	r3, r2
    b2d2:	d905      	bls.n	b2e0 <vTask_MOTORCONTROL+0x200>
					{
						firstEvent = false;
    b2d4:	4b4e      	ldr	r3, [pc, #312]	; (b410 <vTask_MOTORCONTROL+0x330>)
    b2d6:	2200      	movs	r2, #0
    b2d8:	701a      	strb	r2, [r3, #0]
    b2da:	e001      	b.n	b2e0 <vTask_MOTORCONTROL+0x200>
					}
				}
				else
				{
					operateOnEvent();
    b2dc:	4b67      	ldr	r3, [pc, #412]	; (b47c <vTask_MOTORCONTROL+0x39c>)
    b2de:	4798      	blx	r3
			//if(tempButtonEventOccured)
			//{
			//operateOnButtonEvent();
			//}
			
			if(lastButtonEvent)
    b2e0:	4b5d      	ldr	r3, [pc, #372]	; (b458 <vTask_MOTORCONTROL+0x378>)
    b2e2:	781b      	ldrb	r3, [r3, #0]
    b2e4:	b2db      	uxtb	r3, r3
    b2e6:	2b00      	cmp	r3, #0
    b2e8:	d001      	beq.n	b2ee <vTask_MOTORCONTROL+0x20e>
			{
				buttonFilter();
    b2ea:	4b65      	ldr	r3, [pc, #404]	; (b480 <vTask_MOTORCONTROL+0x3a0>)
    b2ec:	4798      	blx	r3
			}
		}
		//// check if it is the time for new Voltage reading and if so than get new Voltage Reading.
		if(should_Detect_New_Voltage()) {
    b2ee:	4b65      	ldr	r3, [pc, #404]	; (b484 <vTask_MOTORCONTROL+0x3a4>)
    b2f0:	4798      	blx	r3
    b2f2:	1e03      	subs	r3, r0, #0
    b2f4:	d003      	beq.n	b2fe <vTask_MOTORCONTROL+0x21e>
			detect_battery_voltage_and_percentage();
    b2f6:	4b64      	ldr	r3, [pc, #400]	; (b488 <vTask_MOTORCONTROL+0x3a8>)
    b2f8:	4798      	blx	r3
			detect_Three_Phase_Voltage();
    b2fa:	4b64      	ldr	r3, [pc, #400]	; (b48c <vTask_MOTORCONTROL+0x3ac>)
    b2fc:	4798      	blx	r3
		}
		////////
		
		// To check if new reading of motor current is needed, and get new reading, and update in Analog_Parameter_Struct
		
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b2fe:	4b57      	ldr	r3, [pc, #348]	; (b45c <vTask_MOTORCONTROL+0x37c>)
    b300:	785b      	ldrb	r3, [r3, #1]
    b302:	2b00      	cmp	r3, #0
    b304:	d013      	beq.n	b32e <vTask_MOTORCONTROL+0x24e>
		{
			if(should_Detect_New_Current()) {
    b306:	4b62      	ldr	r3, [pc, #392]	; (b490 <vTask_MOTORCONTROL+0x3b0>)
    b308:	4798      	blx	r3
    b30a:	1e03      	subs	r3, r0, #0
    b30c:	d00f      	beq.n	b32e <vTask_MOTORCONTROL+0x24e>
				detect_Motor_Current();
    b30e:	4b61      	ldr	r3, [pc, #388]	; (b494 <vTask_MOTORCONTROL+0x3b4>)
    b310:	4798      	blx	r3
				if (user_settings_parameter_struct.detectMotorFeedback== MOTORFEEDBACK_DETECTION_CURRENT)
    b312:	4b61      	ldr	r3, [pc, #388]	; (b498 <vTask_MOTORCONTROL+0x3b8>)
    b314:	2225      	movs	r2, #37	; 0x25
    b316:	5c9b      	ldrb	r3, [r3, r2]
    b318:	2b01      	cmp	r3, #1
    b31a:	d106      	bne.n	b32a <vTask_MOTORCONTROL+0x24a>
				{
					if(detectMotorStateChangeUsingCurrent())
    b31c:	4b5f      	ldr	r3, [pc, #380]	; (b49c <vTask_MOTORCONTROL+0x3bc>)
    b31e:	4798      	blx	r3
    b320:	1e03      	subs	r3, r0, #0
    b322:	d002      	beq.n	b32a <vTask_MOTORCONTROL+0x24a>
					{
						eventOccured=true;
    b324:	4b38      	ldr	r3, [pc, #224]	; (b408 <vTask_MOTORCONTROL+0x328>)
    b326:	2201      	movs	r2, #1
    b328:	701a      	strb	r2, [r3, #0]
					}
				}
				
				checkCurrentConsumption();
    b32a:	4b5d      	ldr	r3, [pc, #372]	; (b4a0 <vTask_MOTORCONTROL+0x3c0>)
    b32c:	4798      	blx	r3
			}
		}
		///////
		if (waitStableLineOn && waitStableLineOver())
    b32e:	4b5d      	ldr	r3, [pc, #372]	; (b4a4 <vTask_MOTORCONTROL+0x3c4>)
    b330:	781b      	ldrb	r3, [r3, #0]
    b332:	2b00      	cmp	r3, #0
    b334:	d005      	beq.n	b342 <vTask_MOTORCONTROL+0x262>
    b336:	4b5c      	ldr	r3, [pc, #368]	; (b4a8 <vTask_MOTORCONTROL+0x3c8>)
    b338:	4798      	blx	r3
    b33a:	1e03      	subs	r3, r0, #0
    b33c:	d001      	beq.n	b342 <vTask_MOTORCONTROL+0x262>
		{
			operateOnStableLine();
    b33e:	4b5b      	ldr	r3, [pc, #364]	; (b4ac <vTask_MOTORCONTROL+0x3cc>)
    b340:	4798      	blx	r3
		}
		
		if(stopMotorCommandGiven && xTaskGetTickCount()-tempStopSequenceTimer>5000)
    b342:	4b5b      	ldr	r3, [pc, #364]	; (b4b0 <vTask_MOTORCONTROL+0x3d0>)
    b344:	781b      	ldrb	r3, [r3, #0]
    b346:	2b00      	cmp	r3, #0
    b348:	d00b      	beq.n	b362 <vTask_MOTORCONTROL+0x282>
    b34a:	4b30      	ldr	r3, [pc, #192]	; (b40c <vTask_MOTORCONTROL+0x32c>)
    b34c:	4798      	blx	r3
    b34e:	0002      	movs	r2, r0
    b350:	4b58      	ldr	r3, [pc, #352]	; (b4b4 <vTask_MOTORCONTROL+0x3d4>)
    b352:	681b      	ldr	r3, [r3, #0]
    b354:	1ad3      	subs	r3, r2, r3
    b356:	4a58      	ldr	r2, [pc, #352]	; (b4b8 <vTask_MOTORCONTROL+0x3d8>)
    b358:	4293      	cmp	r3, r2
    b35a:	d902      	bls.n	b362 <vTask_MOTORCONTROL+0x282>
		{
			stopMotorCommandGiven=false;
    b35c:	4b54      	ldr	r3, [pc, #336]	; (b4b0 <vTask_MOTORCONTROL+0x3d0>)
    b35e:	2200      	movs	r2, #0
    b360:	701a      	strb	r2, [r3, #0]
		}
		
		if(singlePhasingTimerOn)
    b362:	4b33      	ldr	r3, [pc, #204]	; (b430 <vTask_MOTORCONTROL+0x350>)
    b364:	781b      	ldrb	r3, [r3, #0]
    b366:	2b00      	cmp	r3, #0
    b368:	d01a      	beq.n	b3a0 <vTask_MOTORCONTROL+0x2c0>
		{
			bool b;
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
    b36a:	4b54      	ldr	r3, [pc, #336]	; (b4bc <vTask_MOTORCONTROL+0x3dc>)
    b36c:	785b      	ldrb	r3, [r3, #1]
    b36e:	b2db      	uxtb	r3, r3
    b370:	2b03      	cmp	r3, #3
    b372:	d003      	beq.n	b37c <vTask_MOTORCONTROL+0x29c>
			{
				b = false;
    b374:	2316      	movs	r3, #22
    b376:	18fb      	adds	r3, r7, r3
    b378:	2200      	movs	r2, #0
    b37a:	701a      	strb	r2, [r3, #0]
			}
			if(!b)		//3 phase pin is low
    b37c:	2316      	movs	r3, #22
    b37e:	18fb      	adds	r3, r7, r3
    b380:	781b      	ldrb	r3, [r3, #0]
    b382:	2201      	movs	r2, #1
    b384:	4053      	eors	r3, r2
    b386:	b2db      	uxtb	r3, r3
    b388:	2b00      	cmp	r3, #0
    b38a:	d006      	beq.n	b39a <vTask_MOTORCONTROL+0x2ba>
			{
				if(singlePhasingTimerOver())
    b38c:	4b4c      	ldr	r3, [pc, #304]	; (b4c0 <vTask_MOTORCONTROL+0x3e0>)
    b38e:	4798      	blx	r3
    b390:	1e03      	subs	r3, r0, #0
    b392:	d005      	beq.n	b3a0 <vTask_MOTORCONTROL+0x2c0>
				{
					operateOnSinglePhasing();
    b394:	4b4b      	ldr	r3, [pc, #300]	; (b4c4 <vTask_MOTORCONTROL+0x3e4>)
    b396:	4798      	blx	r3
    b398:	e002      	b.n	b3a0 <vTask_MOTORCONTROL+0x2c0>
				}
			}
			else
			{
				singlePhasingTimerOn=false;
    b39a:	4b25      	ldr	r3, [pc, #148]	; (b430 <vTask_MOTORCONTROL+0x350>)
    b39c:	2200      	movs	r2, #0
    b39e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (startTimerOn)
    b3a0:	4b21      	ldr	r3, [pc, #132]	; (b428 <vTask_MOTORCONTROL+0x348>)
    b3a2:	781b      	ldrb	r3, [r3, #0]
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d007      	beq.n	b3b8 <vTask_MOTORCONTROL+0x2d8>
		{
			if (startMotorTimerOver())
    b3a8:	4b47      	ldr	r3, [pc, #284]	; (b4c8 <vTask_MOTORCONTROL+0x3e8>)
    b3aa:	4798      	blx	r3
    b3ac:	1e03      	subs	r3, r0, #0
    b3ae:	d003      	beq.n	b3b8 <vTask_MOTORCONTROL+0x2d8>
			{
				startMotor(false,false);
    b3b0:	2100      	movs	r1, #0
    b3b2:	2000      	movs	r0, #0
    b3b4:	4b45      	ldr	r3, [pc, #276]	; (b4cc <vTask_MOTORCONTROL+0x3ec>)
    b3b6:	4798      	blx	r3
			}
		}
		if (startSequenceOn)
    b3b8:	4b20      	ldr	r3, [pc, #128]	; (b43c <vTask_MOTORCONTROL+0x35c>)
    b3ba:	781b      	ldrb	r3, [r3, #0]
    b3bc:	2b00      	cmp	r3, #0
    b3be:	d001      	beq.n	b3c4 <vTask_MOTORCONTROL+0x2e4>
		{
			terminateStartRelay();
    b3c0:	4b43      	ldr	r3, [pc, #268]	; (b4d0 <vTask_MOTORCONTROL+0x3f0>)
    b3c2:	4798      	blx	r3
		}
		if(starDeltaTimerOn)
    b3c4:	4b1c      	ldr	r3, [pc, #112]	; (b438 <vTask_MOTORCONTROL+0x358>)
    b3c6:	781b      	ldrb	r3, [r3, #0]
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d001      	beq.n	b3d0 <vTask_MOTORCONTROL+0x2f0>
		{
			terminateStarDeltaTimer();
    b3cc:	4b41      	ldr	r3, [pc, #260]	; (b4d4 <vTask_MOTORCONTROL+0x3f4>)
    b3ce:	4798      	blx	r3
		}
		if(stopSequenceOn)
    b3d0:	4b1c      	ldr	r3, [pc, #112]	; (b444 <vTask_MOTORCONTROL+0x364>)
    b3d2:	781b      	ldrb	r3, [r3, #0]
    b3d4:	2b00      	cmp	r3, #0
    b3d6:	d001      	beq.n	b3dc <vTask_MOTORCONTROL+0x2fc>
		{
			terminateStopRelay();
    b3d8:	4b3f      	ldr	r3, [pc, #252]	; (b4d8 <vTask_MOTORCONTROL+0x3f8>)
    b3da:	4798      	blx	r3
		}
		
		SIMEventManager();
    b3dc:	4b3f      	ldr	r3, [pc, #252]	; (b4dc <vTask_MOTORCONTROL+0x3fc>)
    b3de:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
    b3e0:	4b1e      	ldr	r3, [pc, #120]	; (b45c <vTask_MOTORCONTROL+0x37c>)
    b3e2:	78db      	ldrb	r3, [r3, #3]
    b3e4:	2b00      	cmp	r3, #0
    b3e6:	d100      	bne.n	b3ea <vTask_MOTORCONTROL+0x30a>
    b3e8:	e73d      	b.n	b266 <vTask_MOTORCONTROL+0x186>
		{
			M2MEventManager();
    b3ea:	4b3d      	ldr	r3, [pc, #244]	; (b4e0 <vTask_MOTORCONTROL+0x400>)
    b3ec:	4798      	blx	r3
		if(taskPSet)
    b3ee:	e73a      	b.n	b266 <vTask_MOTORCONTROL+0x186>
    b3f0:	0000925d 	.word	0x0000925d
    b3f4:	0000b935 	.word	0x0000b935
    b3f8:	0000ba29 	.word	0x0000ba29
    b3fc:	0000bae9 	.word	0x0000bae9
    b400:	200007c8 	.word	0x200007c8
    b404:	200006fc 	.word	0x200006fc
    b408:	20000717 	.word	0x20000717
    b40c:	0000f37d 	.word	0x0000f37d
    b410:	20000754 	.word	0x20000754
    b414:	2000083c 	.word	0x2000083c
    b418:	0000838d 	.word	0x0000838d
    b41c:	0000f019 	.word	0x0000f019
    b420:	20000765 	.word	0x20000765
    b424:	200007fc 	.word	0x200007fc
    b428:	20000772 	.word	0x20000772
    b42c:	20000748 	.word	0x20000748
    b430:	20000769 	.word	0x20000769
    b434:	200007d4 	.word	0x200007d4
    b438:	20000773 	.word	0x20000773
    b43c:	20000771 	.word	0x20000771
    b440:	20000817 	.word	0x20000817
    b444:	20000761 	.word	0x20000761
    b448:	00009e39 	.word	0x00009e39
    b44c:	00009ea1 	.word	0x00009ea1
    b450:	00009e05 	.word	0x00009e05
    b454:	20000740 	.word	0x20000740
    b458:	20000760 	.word	0x20000760
    b45c:	20000628 	.word	0x20000628
    b460:	20000700 	.word	0x20000700
    b464:	200007b4 	.word	0x200007b4
    b468:	0000a195 	.word	0x0000a195
    b46c:	20000716 	.word	0x20000716
    b470:	0000f075 	.word	0x0000f075
    b474:	20000777 	.word	0x20000777
    b478:	000088b8 	.word	0x000088b8
    b47c:	0000a241 	.word	0x0000a241
    b480:	0000bbf5 	.word	0x0000bbf5
    b484:	00009a0d 	.word	0x00009a0d
    b488:	00009a29 	.word	0x00009a29
    b48c:	00009ae9 	.word	0x00009ae9
    b490:	00009dd5 	.word	0x00009dd5
    b494:	00009cd5 	.word	0x00009cd5
    b498:	2000065c 	.word	0x2000065c
    b49c:	0000a06d 	.word	0x0000a06d
    b4a0:	0000aec5 	.word	0x0000aec5
    b4a4:	200007c9 	.word	0x200007c9
    b4a8:	0000a57d 	.word	0x0000a57d
    b4ac:	0000a44d 	.word	0x0000a44d
    b4b0:	20000815 	.word	0x20000815
    b4b4:	20000780 	.word	0x20000780
    b4b8:	00001388 	.word	0x00001388
    b4bc:	20000720 	.word	0x20000720
    b4c0:	0000a8dd 	.word	0x0000a8dd
    b4c4:	0000a929 	.word	0x0000a929
    b4c8:	0000a875 	.word	0x0000a875
    b4cc:	0000a5c9 	.word	0x0000a5c9
    b4d0:	0000ab21 	.word	0x0000ab21
    b4d4:	0000aab1 	.word	0x0000aab1
    b4d8:	0000a965 	.word	0x0000a965
    b4dc:	0000ae2d 	.word	0x0000ae2d
    b4e0:	0000ade9 	.word	0x0000ade9

0000b4e4 <start_motor_service>:
		}
	}
}

void start_motor_service(void)
{
    b4e4:	b590      	push	{r4, r7, lr}
    b4e6:	b08b      	sub	sp, #44	; 0x2c
    b4e8:	af02      	add	r7, sp, #8
	struct extint_chan_conf config_extint_chan_isr;
	extint_chan_get_config_defaults(&config_extint_chan_isr);
    b4ea:	2314      	movs	r3, #20
    b4ec:	18fb      	adds	r3, r7, r3
    b4ee:	0018      	movs	r0, r3
    b4f0:	4ba4      	ldr	r3, [pc, #656]	; (b784 <start_motor_service+0x2a0>)
    b4f2:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
    b4f4:	2314      	movs	r3, #20
    b4f6:	18fb      	adds	r3, r7, r3
    b4f8:	222b      	movs	r2, #43	; 0x2b
    b4fa:	601a      	str	r2, [r3, #0]
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
    b4fc:	2314      	movs	r3, #20
    b4fe:	18fb      	adds	r3, r7, r3
    b500:	2200      	movs	r2, #0
    b502:	605a      	str	r2, [r3, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
    b504:	2314      	movs	r3, #20
    b506:	18fb      	adds	r3, r7, r3
    b508:	2201      	movs	r2, #1
    b50a:	721a      	strb	r2, [r3, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
    b50c:	2314      	movs	r3, #20
    b50e:	18fb      	adds	r3, r7, r3
    b510:	2201      	movs	r2, #1
    b512:	72da      	strb	r2, [r3, #11]
	config_extint_chan_isr.wake_if_sleeping   = false;
    b514:	2314      	movs	r3, #20
    b516:	18fb      	adds	r3, r7, r3
    b518:	2200      	movs	r2, #0
    b51a:	725a      	strb	r2, [r3, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
    b51c:	2314      	movs	r3, #20
    b51e:	18fb      	adds	r3, r7, r3
    b520:	0019      	movs	r1, r3
    b522:	200b      	movs	r0, #11
    b524:	4b98      	ldr	r3, [pc, #608]	; (b788 <start_motor_service+0x2a4>)
    b526:	4798      	blx	r3
	
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
    b528:	4b98      	ldr	r3, [pc, #608]	; (b78c <start_motor_service+0x2a8>)
    b52a:	2200      	movs	r2, #0
    b52c:	210b      	movs	r1, #11
    b52e:	0018      	movs	r0, r3
    b530:	4b97      	ldr	r3, [pc, #604]	; (b790 <start_motor_service+0x2ac>)
    b532:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
    b534:	2100      	movs	r1, #0
    b536:	200b      	movs	r0, #11
    b538:	4b96      	ldr	r3, [pc, #600]	; (b794 <start_motor_service+0x2b0>)
    b53a:	4798      	blx	r3
	
	struct port_config pin_confg;
	port_get_config_defaults(&pin_confg);
    b53c:	2310      	movs	r3, #16
    b53e:	18fb      	adds	r3, r7, r3
    b540:	0018      	movs	r0, r3
    b542:	4b95      	ldr	r3, [pc, #596]	; (b798 <start_motor_service+0x2b4>)
    b544:	4798      	blx	r3
	pin_confg.direction = PORT_PIN_DIR_INPUT;
    b546:	2310      	movs	r3, #16
    b548:	18fb      	adds	r3, r7, r3
    b54a:	2200      	movs	r2, #0
    b54c:	701a      	strb	r2, [r3, #0]
	pin_confg.input_pull = PORT_PIN_PULL_UP;
    b54e:	2310      	movs	r3, #16
    b550:	18fb      	adds	r3, r7, r3
    b552:	2201      	movs	r2, #1
    b554:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PR1_PIN, &pin_confg);
    b556:	2310      	movs	r3, #16
    b558:	18fb      	adds	r3, r7, r3
    b55a:	0019      	movs	r1, r3
    b55c:	202a      	movs	r0, #42	; 0x2a
    b55e:	4b8f      	ldr	r3, [pc, #572]	; (b79c <start_motor_service+0x2b8>)
    b560:	4798      	blx	r3
	
	//Transferring the below statement from LCD_SERVICE to here, as it solves the problem of the device hanging.
	// Whenever xSemaphoreTake is executed on xADC_Semaphore in task other than which xADC_Semaphore is defined in, than the MCU hangs.
	vSemaphoreCreateBinary(xADC_Semaphore);
    b562:	2203      	movs	r2, #3
    b564:	2100      	movs	r1, #0
    b566:	2001      	movs	r0, #1
    b568:	4b8d      	ldr	r3, [pc, #564]	; (b7a0 <start_motor_service+0x2bc>)
    b56a:	4798      	blx	r3
    b56c:	0002      	movs	r2, r0
    b56e:	4b8d      	ldr	r3, [pc, #564]	; (b7a4 <start_motor_service+0x2c0>)
    b570:	601a      	str	r2, [r3, #0]
    b572:	4b8c      	ldr	r3, [pc, #560]	; (b7a4 <start_motor_service+0x2c0>)
    b574:	681b      	ldr	r3, [r3, #0]
    b576:	2b00      	cmp	r3, #0
    b578:	d006      	beq.n	b588 <start_motor_service+0xa4>
    b57a:	4b8a      	ldr	r3, [pc, #552]	; (b7a4 <start_motor_service+0x2c0>)
    b57c:	6818      	ldr	r0, [r3, #0]
    b57e:	2300      	movs	r3, #0
    b580:	2200      	movs	r2, #0
    b582:	2100      	movs	r1, #0
    b584:	4c88      	ldr	r4, [pc, #544]	; (b7a8 <start_motor_service+0x2c4>)
    b586:	47a0      	blx	r4
	
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	struct port_config config_pins;
	port_get_config_defaults(&config_pins);
    b588:	230c      	movs	r3, #12
    b58a:	18fb      	adds	r3, r7, r3
    b58c:	0018      	movs	r0, r3
    b58e:	4b82      	ldr	r3, [pc, #520]	; (b798 <start_motor_service+0x2b4>)
    b590:	4798      	blx	r3
	
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
    b592:	230c      	movs	r3, #12
    b594:	18fb      	adds	r3, r7, r3
    b596:	2201      	movs	r2, #1
    b598:	701a      	strb	r2, [r3, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
    b59a:	230c      	movs	r3, #12
    b59c:	18fb      	adds	r3, r7, r3
    b59e:	2200      	movs	r2, #0
    b5a0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
    b5a2:	230c      	movs	r3, #12
    b5a4:	18fb      	adds	r3, r7, r3
    b5a6:	0019      	movs	r1, r3
    b5a8:	202d      	movs	r0, #45	; 0x2d
    b5aa:	4b7c      	ldr	r3, [pc, #496]	; (b79c <start_motor_service+0x2b8>)
    b5ac:	4798      	blx	r3
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
    b5ae:	230c      	movs	r3, #12
    b5b0:	18fb      	adds	r3, r7, r3
    b5b2:	0019      	movs	r1, r3
    b5b4:	202c      	movs	r0, #44	; 0x2c
    b5b6:	4b79      	ldr	r3, [pc, #484]	; (b79c <start_motor_service+0x2b8>)
    b5b8:	4798      	blx	r3
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
    b5ba:	230c      	movs	r3, #12
    b5bc:	18fb      	adds	r3, r7, r3
    b5be:	0019      	movs	r1, r3
    b5c0:	2028      	movs	r0, #40	; 0x28
    b5c2:	4b76      	ldr	r3, [pc, #472]	; (b79c <start_motor_service+0x2b8>)
    b5c4:	4798      	blx	r3
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
    b5c6:	230c      	movs	r3, #12
    b5c8:	18fb      	adds	r3, r7, r3
    b5ca:	0019      	movs	r1, r3
    b5cc:	2027      	movs	r0, #39	; 0x27
    b5ce:	4b73      	ldr	r3, [pc, #460]	; (b79c <start_motor_service+0x2b8>)
    b5d0:	4798      	blx	r3
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
    b5d2:	230c      	movs	r3, #12
    b5d4:	18fb      	adds	r3, r7, r3
    b5d6:	0019      	movs	r1, r3
    b5d8:	2005      	movs	r0, #5
    b5da:	4b70      	ldr	r3, [pc, #448]	; (b79c <start_motor_service+0x2b8>)
    b5dc:	4798      	blx	r3
	
	AUTO_ON_LED_OFF;
    b5de:	2101      	movs	r1, #1
    b5e0:	2028      	movs	r0, #40	; 0x28
    b5e2:	4b72      	ldr	r3, [pc, #456]	; (b7ac <start_motor_service+0x2c8>)
    b5e4:	4798      	blx	r3
	MOTOR_ON_LED_OFF;
    b5e6:	2101      	movs	r1, #1
    b5e8:	2005      	movs	r0, #5
    b5ea:	4b70      	ldr	r3, [pc, #448]	; (b7ac <start_motor_service+0x2c8>)
    b5ec:	4798      	blx	r3
	THREEPHASE_OK_LED_OFF;
    b5ee:	2101      	movs	r1, #1
    b5f0:	2027      	movs	r0, #39	; 0x27
    b5f2:	4b6e      	ldr	r3, [pc, #440]	; (b7ac <start_motor_service+0x2c8>)
    b5f4:	4798      	blx	r3
	//port_pin_set_config(PIN_MOTOR_FEEDBACK,&config_pins);
	
	
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    b5f6:	003b      	movs	r3, r7
    b5f8:	0018      	movs	r0, r3
    b5fa:	4b62      	ldr	r3, [pc, #392]	; (b784 <start_motor_service+0x2a0>)
    b5fc:	4798      	blx	r3
	
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
    b5fe:	003b      	movs	r3, r7
    b600:	222e      	movs	r2, #46	; 0x2e
    b602:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = MOTOR_FEEDBACK_EIC_MUX;
    b604:	003b      	movs	r3, r7
    b606:	2200      	movs	r2, #0
    b608:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b60a:	003b      	movs	r3, r7
    b60c:	2201      	movs	r2, #1
    b60e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    b610:	003b      	movs	r3, r7
    b612:	2203      	movs	r2, #3
    b614:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
    b616:	003b      	movs	r3, r7
    b618:	0019      	movs	r1, r3
    b61a:	200e      	movs	r0, #14
    b61c:	4b5a      	ldr	r3, [pc, #360]	; (b788 <start_motor_service+0x2a4>)
    b61e:	4798      	blx	r3
	
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b620:	2100      	movs	r1, #0
    b622:	200e      	movs	r0, #14
    b624:	4b5b      	ldr	r3, [pc, #364]	; (b794 <start_motor_service+0x2b0>)
    b626:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b628:	4b61      	ldr	r3, [pc, #388]	; (b7b0 <start_motor_service+0x2cc>)
    b62a:	2200      	movs	r2, #0
    b62c:	210e      	movs	r1, #14
    b62e:	0018      	movs	r0, r3
    b630:	4b57      	ldr	r3, [pc, #348]	; (b790 <start_motor_service+0x2ac>)
    b632:	4798      	blx	r3
	
	//////////////////////////////////////////////////////////////////////////
	
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
    b634:	003b      	movs	r3, r7
    b636:	2226      	movs	r2, #38	; 0x26
    b638:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
    b63a:	003b      	movs	r3, r7
    b63c:	2200      	movs	r2, #0
    b63e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b640:	003b      	movs	r3, r7
    b642:	2201      	movs	r2, #1
    b644:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b646:	003b      	movs	r3, r7
    b648:	2202      	movs	r2, #2
    b64a:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
    b64c:	003b      	movs	r3, r7
    b64e:	0019      	movs	r1, r3
    b650:	2006      	movs	r0, #6
    b652:	4b4d      	ldr	r3, [pc, #308]	; (b788 <start_motor_service+0x2a4>)
    b654:	4798      	blx	r3
	
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b656:	2100      	movs	r1, #0
    b658:	2006      	movs	r0, #6
    b65a:	4b4e      	ldr	r3, [pc, #312]	; (b794 <start_motor_service+0x2b0>)
    b65c:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b65e:	4b55      	ldr	r3, [pc, #340]	; (b7b4 <start_motor_service+0x2d0>)
    b660:	2200      	movs	r2, #0
    b662:	2106      	movs	r1, #6
    b664:	0018      	movs	r0, r3
    b666:	4b4a      	ldr	r3, [pc, #296]	; (b790 <start_motor_service+0x2ac>)
    b668:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
    b66a:	003b      	movs	r3, r7
    b66c:	2225      	movs	r2, #37	; 0x25
    b66e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
    b670:	003b      	movs	r3, r7
    b672:	2200      	movs	r2, #0
    b674:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b676:	003b      	movs	r3, r7
    b678:	2201      	movs	r2, #1
    b67a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b67c:	003b      	movs	r3, r7
    b67e:	2202      	movs	r2, #2
    b680:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
    b682:	003b      	movs	r3, r7
    b684:	0019      	movs	r1, r3
    b686:	2005      	movs	r0, #5
    b688:	4b3f      	ldr	r3, [pc, #252]	; (b788 <start_motor_service+0x2a4>)
    b68a:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b68c:	2100      	movs	r1, #0
    b68e:	2005      	movs	r0, #5
    b690:	4b40      	ldr	r3, [pc, #256]	; (b794 <start_motor_service+0x2b0>)
    b692:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b694:	4b47      	ldr	r3, [pc, #284]	; (b7b4 <start_motor_service+0x2d0>)
    b696:	2200      	movs	r2, #0
    b698:	2105      	movs	r1, #5
    b69a:	0018      	movs	r0, r3
    b69c:	4b3c      	ldr	r3, [pc, #240]	; (b790 <start_motor_service+0x2ac>)
    b69e:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
    b6a0:	003b      	movs	r3, r7
    b6a2:	221c      	movs	r2, #28
    b6a4:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
    b6a6:	003b      	movs	r3, r7
    b6a8:	2200      	movs	r2, #0
    b6aa:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b6ac:	003b      	movs	r3, r7
    b6ae:	2201      	movs	r2, #1
    b6b0:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b6b2:	003b      	movs	r3, r7
    b6b4:	2202      	movs	r2, #2
    b6b6:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
    b6b8:	003b      	movs	r3, r7
    b6ba:	0019      	movs	r1, r3
    b6bc:	2008      	movs	r0, #8
    b6be:	4b32      	ldr	r3, [pc, #200]	; (b788 <start_motor_service+0x2a4>)
    b6c0:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b6c2:	2100      	movs	r1, #0
    b6c4:	2008      	movs	r0, #8
    b6c6:	4b33      	ldr	r3, [pc, #204]	; (b794 <start_motor_service+0x2b0>)
    b6c8:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b6ca:	4b3a      	ldr	r3, [pc, #232]	; (b7b4 <start_motor_service+0x2d0>)
    b6cc:	2200      	movs	r2, #0
    b6ce:	2108      	movs	r1, #8
    b6d0:	0018      	movs	r0, r3
    b6d2:	4b2f      	ldr	r3, [pc, #188]	; (b790 <start_motor_service+0x2ac>)
    b6d4:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
    b6d6:	003b      	movs	r3, r7
    b6d8:	2229      	movs	r2, #41	; 0x29
    b6da:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
    b6dc:	003b      	movs	r3, r7
    b6de:	2200      	movs	r2, #0
    b6e0:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b6e2:	003b      	movs	r3, r7
    b6e4:	2201      	movs	r2, #1
    b6e6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b6e8:	003b      	movs	r3, r7
    b6ea:	2202      	movs	r2, #2
    b6ec:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
    b6ee:	003b      	movs	r3, r7
    b6f0:	0019      	movs	r1, r3
    b6f2:	2009      	movs	r0, #9
    b6f4:	4b24      	ldr	r3, [pc, #144]	; (b788 <start_motor_service+0x2a4>)
    b6f6:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    b6f8:	2100      	movs	r1, #0
    b6fa:	2009      	movs	r0, #9
    b6fc:	4b25      	ldr	r3, [pc, #148]	; (b794 <start_motor_service+0x2b0>)
    b6fe:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    b700:	4b2c      	ldr	r3, [pc, #176]	; (b7b4 <start_motor_service+0x2d0>)
    b702:	2200      	movs	r2, #0
    b704:	2109      	movs	r1, #9
    b706:	0018      	movs	r0, r3
    b708:	4b21      	ldr	r3, [pc, #132]	; (b790 <start_motor_service+0x2ac>)
    b70a:	4798      	blx	r3
	////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
    b70c:	482a      	ldr	r0, [pc, #168]	; (b7b8 <start_motor_service+0x2d4>)
    b70e:	2300      	movs	r3, #0
    b710:	9301      	str	r3, [sp, #4]
    b712:	2301      	movs	r3, #1
    b714:	9300      	str	r3, [sp, #0]
    b716:	2300      	movs	r3, #0
    b718:	2282      	movs	r2, #130	; 0x82
    b71a:	2100      	movs	r1, #0
    b71c:	4c27      	ldr	r4, [pc, #156]	; (b7bc <start_motor_service+0x2d8>)
    b71e:	47a0      	blx	r4
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
    b720:	4827      	ldr	r0, [pc, #156]	; (b7c0 <start_motor_service+0x2dc>)
    b722:	2300      	movs	r3, #0
    b724:	9301      	str	r3, [sp, #4]
    b726:	2301      	movs	r3, #1
    b728:	9300      	str	r3, [sp, #0]
    b72a:	2300      	movs	r3, #0
    b72c:	2282      	movs	r2, #130	; 0x82
    b72e:	2100      	movs	r1, #0
    b730:	4c22      	ldr	r4, [pc, #136]	; (b7bc <start_motor_service+0x2d8>)
    b732:	47a0      	blx	r4
	xTaskCreate(vTask_50ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,&fiftymsTask);
    b734:	4823      	ldr	r0, [pc, #140]	; (b7c4 <start_motor_service+0x2e0>)
    b736:	4b24      	ldr	r3, [pc, #144]	; (b7c8 <start_motor_service+0x2e4>)
    b738:	9301      	str	r3, [sp, #4]
    b73a:	2301      	movs	r3, #1
    b73c:	9300      	str	r3, [sp, #0]
    b73e:	2300      	movs	r3, #0
    b740:	2282      	movs	r2, #130	; 0x82
    b742:	2100      	movs	r1, #0
    b744:	4c1d      	ldr	r4, [pc, #116]	; (b7bc <start_motor_service+0x2d8>)
    b746:	47a0      	blx	r4
	
	if(factory_settings_parameter_struct.ENABLE_WATER)
    b748:	4b20      	ldr	r3, [pc, #128]	; (b7cc <start_motor_service+0x2e8>)
    b74a:	795b      	ldrb	r3, [r3, #5]
    b74c:	2b00      	cmp	r3, #0
    b74e:	d00a      	beq.n	b766 <start_motor_service+0x282>
	{
		xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
    b750:	23af      	movs	r3, #175	; 0xaf
    b752:	009a      	lsls	r2, r3, #2
    b754:	481e      	ldr	r0, [pc, #120]	; (b7d0 <start_motor_service+0x2ec>)
    b756:	2300      	movs	r3, #0
    b758:	9301      	str	r3, [sp, #4]
    b75a:	2301      	movs	r3, #1
    b75c:	9300      	str	r3, [sp, #0]
    b75e:	2300      	movs	r3, #0
    b760:	2100      	movs	r1, #0
    b762:	4c16      	ldr	r4, [pc, #88]	; (b7bc <start_motor_service+0x2d8>)
    b764:	47a0      	blx	r4
	}
	

	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)720,NULL,1, &motorTask);
    b766:	23b4      	movs	r3, #180	; 0xb4
    b768:	009a      	lsls	r2, r3, #2
    b76a:	481a      	ldr	r0, [pc, #104]	; (b7d4 <start_motor_service+0x2f0>)
    b76c:	4b1a      	ldr	r3, [pc, #104]	; (b7d8 <start_motor_service+0x2f4>)
    b76e:	9301      	str	r3, [sp, #4]
    b770:	2301      	movs	r3, #1
    b772:	9300      	str	r3, [sp, #0]
    b774:	2300      	movs	r3, #0
    b776:	2100      	movs	r1, #0
    b778:	4c10      	ldr	r4, [pc, #64]	; (b7bc <start_motor_service+0x2d8>)
    b77a:	47a0      	blx	r4

}
    b77c:	46c0      	nop			; (mov r8, r8)
    b77e:	46bd      	mov	sp, r7
    b780:	b009      	add	sp, #36	; 0x24
    b782:	bd90      	pop	{r4, r7, pc}
    b784:	0000d03d 	.word	0x0000d03d
    b788:	0000d071 	.word	0x0000d071
    b78c:	00009701 	.word	0x00009701
    b790:	00011375 	.word	0x00011375
    b794:	000113d9 	.word	0x000113d9
    b798:	000087b5 	.word	0x000087b5
    b79c:	00011ee9 	.word	0x00011ee9
    b7a0:	0000e1b5 	.word	0x0000e1b5
    b7a4:	20000238 	.word	0x20000238
    b7a8:	0000e271 	.word	0x0000e271
    b7ac:	0000881d 	.word	0x0000881d
    b7b0:	0000bad5 	.word	0x0000bad5
    b7b4:	0000b0cd 	.word	0x0000b0cd
    b7b8:	00009919 	.word	0x00009919
    b7bc:	0000ecd9 	.word	0x0000ecd9
    b7c0:	00009985 	.word	0x00009985
    b7c4:	0000bdc9 	.word	0x0000bdc9
    b7c8:	20000750 	.word	0x20000750
    b7cc:	20000628 	.word	0x20000628
    b7d0:	00008ca5 	.word	0x00008ca5
    b7d4:	0000b0e1 	.word	0x0000b0e1
    b7d8:	200007a4 	.word	0x200007a4

0000b7dc <motor_checkSleepElligible>:

bool motor_checkSleepElligible(void)
{
    b7dc:	b580      	push	{r7, lr}
    b7de:	b082      	sub	sp, #8
    b7e0:	af00      	add	r7, sp, #0
	uint8_t j = 0;
    b7e2:	1dfb      	adds	r3, r7, #7
    b7e4:	2200      	movs	r2, #0
    b7e6:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_WATER)
    b7e8:	4b47      	ldr	r3, [pc, #284]	; (b908 <motor_checkSleepElligible+0x12c>)
    b7ea:	795b      	ldrb	r3, [r3, #5]
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	d00b      	beq.n	b808 <motor_checkSleepElligible+0x2c>
	{
		if (factory_settings_parameter_struct.ENABLE_GP)
    b7f0:	4b45      	ldr	r3, [pc, #276]	; (b908 <motor_checkSleepElligible+0x12c>)
    b7f2:	791b      	ldrb	r3, [r3, #4]
    b7f4:	2b00      	cmp	r3, #0
    b7f6:	d003      	beq.n	b800 <motor_checkSleepElligible+0x24>
		{
			j = 19;
    b7f8:	1dfb      	adds	r3, r7, #7
    b7fa:	2213      	movs	r2, #19
    b7fc:	701a      	strb	r2, [r3, #0]
    b7fe:	e00e      	b.n	b81e <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 17;
    b800:	1dfb      	adds	r3, r7, #7
    b802:	2211      	movs	r2, #17
    b804:	701a      	strb	r2, [r3, #0]
    b806:	e00a      	b.n	b81e <motor_checkSleepElligible+0x42>
		}
	}
	else
	{
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    b808:	4b3f      	ldr	r3, [pc, #252]	; (b908 <motor_checkSleepElligible+0x12c>)
    b80a:	785b      	ldrb	r3, [r3, #1]
    b80c:	2b00      	cmp	r3, #0
    b80e:	d003      	beq.n	b818 <motor_checkSleepElligible+0x3c>
		{
			j = 14;
    b810:	1dfb      	adds	r3, r7, #7
    b812:	220e      	movs	r2, #14
    b814:	701a      	strb	r2, [r3, #0]
    b816:	e002      	b.n	b81e <motor_checkSleepElligible+0x42>
		}
		else
		{
			j = 12;
    b818:	1dfb      	adds	r3, r7, #7
    b81a:	220c      	movs	r2, #12
    b81c:	701a      	strb	r2, [r3, #0]
		}
	}
	
	bool event=true;
    b81e:	1dbb      	adds	r3, r7, #6
    b820:	2201      	movs	r2, #1
    b822:	701a      	strb	r2, [r3, #0]
	while(j--)
    b824:	e00c      	b.n	b840 <motor_checkSleepElligible+0x64>
	{
		if(!simEventTemp[j])
    b826:	1dfb      	adds	r3, r7, #7
    b828:	781b      	ldrb	r3, [r3, #0]
    b82a:	4a38      	ldr	r2, [pc, #224]	; (b90c <motor_checkSleepElligible+0x130>)
    b82c:	5cd3      	ldrb	r3, [r2, r3]
    b82e:	2201      	movs	r2, #1
    b830:	4053      	eors	r3, r2
    b832:	b2db      	uxtb	r3, r3
    b834:	2b00      	cmp	r3, #0
    b836:	d003      	beq.n	b840 <motor_checkSleepElligible+0x64>
		{
			event=false;
    b838:	1dbb      	adds	r3, r7, #6
    b83a:	2200      	movs	r2, #0
    b83c:	701a      	strb	r2, [r3, #0]
			break;
    b83e:	e006      	b.n	b84e <motor_checkSleepElligible+0x72>
	while(j--)
    b840:	1dfb      	adds	r3, r7, #7
    b842:	781b      	ldrb	r3, [r3, #0]
    b844:	1dfa      	adds	r2, r7, #7
    b846:	1e59      	subs	r1, r3, #1
    b848:	7011      	strb	r1, [r2, #0]
    b84a:	2b00      	cmp	r3, #0
    b84c:	d1eb      	bne.n	b826 <motor_checkSleepElligible+0x4a>
		}
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    b84e:	4b2e      	ldr	r3, [pc, #184]	; (b908 <motor_checkSleepElligible+0x12c>)
    b850:	78db      	ldrb	r3, [r3, #3]
    b852:	2b00      	cmp	r3, #0
    b854:	d00e      	beq.n	b874 <motor_checkSleepElligible+0x98>
	{
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
    b856:	1dbb      	adds	r3, r7, #6
    b858:	781b      	ldrb	r3, [r3, #0]
    b85a:	2b00      	cmp	r3, #0
    b85c:	d003      	beq.n	b866 <motor_checkSleepElligible+0x8a>
    b85e:	4b2c      	ldr	r3, [pc, #176]	; (b910 <motor_checkSleepElligible+0x134>)
    b860:	781b      	ldrb	r3, [r3, #0]
    b862:	2b01      	cmp	r3, #1
    b864:	d003      	beq.n	b86e <motor_checkSleepElligible+0x92>
    b866:	4b2a      	ldr	r3, [pc, #168]	; (b910 <motor_checkSleepElligible+0x134>)
    b868:	785b      	ldrb	r3, [r3, #1]
    b86a:	2b01      	cmp	r3, #1
    b86c:	d102      	bne.n	b874 <motor_checkSleepElligible+0x98>
		{
			event = false;
    b86e:	1dbb      	adds	r3, r7, #6
    b870:	2200      	movs	r2, #0
    b872:	701a      	strb	r2, [r3, #0]
		}
	}
	
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
    b874:	4b27      	ldr	r3, [pc, #156]	; (b914 <motor_checkSleepElligible+0x138>)
    b876:	4798      	blx	r3
    b878:	0003      	movs	r3, r0
    b87a:	001a      	movs	r2, r3
    b87c:	2301      	movs	r3, #1
    b87e:	4053      	eors	r3, r2
    b880:	b2db      	uxtb	r3, r3
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent);
    b882:	2b00      	cmp	r3, #0
    b884:	d037      	beq.n	b8f6 <motor_checkSleepElligible+0x11a>
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
    b886:	4b24      	ldr	r3, [pc, #144]	; (b918 <motor_checkSleepElligible+0x13c>)
    b888:	781b      	ldrb	r3, [r3, #0]
    b88a:	b2db      	uxtb	r3, r3
    b88c:	2201      	movs	r2, #1
    b88e:	4053      	eors	r3, r2
    b890:	b2db      	uxtb	r3, r3
    b892:	2b00      	cmp	r3, #0
    b894:	d02f      	beq.n	b8f6 <motor_checkSleepElligible+0x11a>
    b896:	1dbb      	adds	r3, r7, #6
    b898:	781b      	ldrb	r3, [r3, #0]
    b89a:	2b00      	cmp	r3, #0
    b89c:	d02b      	beq.n	b8f6 <motor_checkSleepElligible+0x11a>
    b89e:	4b1f      	ldr	r3, [pc, #124]	; (b91c <motor_checkSleepElligible+0x140>)
    b8a0:	781b      	ldrb	r3, [r3, #0]
    b8a2:	2201      	movs	r2, #1
    b8a4:	4053      	eors	r3, r2
    b8a6:	b2db      	uxtb	r3, r3
    b8a8:	2b00      	cmp	r3, #0
    b8aa:	d024      	beq.n	b8f6 <motor_checkSleepElligible+0x11a>
    b8ac:	4b1c      	ldr	r3, [pc, #112]	; (b920 <motor_checkSleepElligible+0x144>)
    b8ae:	781b      	ldrb	r3, [r3, #0]
    b8b0:	2201      	movs	r2, #1
    b8b2:	4053      	eors	r3, r2
    b8b4:	b2db      	uxtb	r3, r3
    b8b6:	2b00      	cmp	r3, #0
    b8b8:	d01d      	beq.n	b8f6 <motor_checkSleepElligible+0x11a>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn && !firstEvent);
    b8ba:	4b1a      	ldr	r3, [pc, #104]	; (b924 <motor_checkSleepElligible+0x148>)
    b8bc:	781b      	ldrb	r3, [r3, #0]
    b8be:	2201      	movs	r2, #1
    b8c0:	4053      	eors	r3, r2
    b8c2:	b2db      	uxtb	r3, r3
    b8c4:	2b00      	cmp	r3, #0
    b8c6:	d016      	beq.n	b8f6 <motor_checkSleepElligible+0x11a>
    b8c8:	4b17      	ldr	r3, [pc, #92]	; (b928 <motor_checkSleepElligible+0x14c>)
    b8ca:	781b      	ldrb	r3, [r3, #0]
    b8cc:	2201      	movs	r2, #1
    b8ce:	4053      	eors	r3, r2
    b8d0:	b2db      	uxtb	r3, r3
    b8d2:	2b00      	cmp	r3, #0
    b8d4:	d00f      	beq.n	b8f6 <motor_checkSleepElligible+0x11a>
    b8d6:	4b15      	ldr	r3, [pc, #84]	; (b92c <motor_checkSleepElligible+0x150>)
    b8d8:	781b      	ldrb	r3, [r3, #0]
    b8da:	2201      	movs	r2, #1
    b8dc:	4053      	eors	r3, r2
    b8de:	b2db      	uxtb	r3, r3
    b8e0:	2b00      	cmp	r3, #0
    b8e2:	d008      	beq.n	b8f6 <motor_checkSleepElligible+0x11a>
    b8e4:	4b12      	ldr	r3, [pc, #72]	; (b930 <motor_checkSleepElligible+0x154>)
    b8e6:	781b      	ldrb	r3, [r3, #0]
    b8e8:	2201      	movs	r2, #1
    b8ea:	4053      	eors	r3, r2
    b8ec:	b2db      	uxtb	r3, r3
    b8ee:	2b00      	cmp	r3, #0
    b8f0:	d001      	beq.n	b8f6 <motor_checkSleepElligible+0x11a>
    b8f2:	2301      	movs	r3, #1
    b8f4:	e000      	b.n	b8f8 <motor_checkSleepElligible+0x11c>
    b8f6:	2300      	movs	r3, #0
    b8f8:	1c1a      	adds	r2, r3, #0
    b8fa:	2301      	movs	r3, #1
    b8fc:	4013      	ands	r3, r2
    b8fe:	b2db      	uxtb	r3, r3
	
}
    b900:	0018      	movs	r0, r3
    b902:	46bd      	mov	sp, r7
    b904:	b002      	add	sp, #8
    b906:	bd80      	pop	{r7, pc}
    b908:	20000628 	.word	0x20000628
    b90c:	20000700 	.word	0x20000700
    b910:	20000788 	.word	0x20000788
    b914:	00009df1 	.word	0x00009df1
    b918:	20000717 	.word	0x20000717
    b91c:	200007c9 	.word	0x200007c9
    b920:	20000769 	.word	0x20000769
    b924:	20000772 	.word	0x20000772
    b928:	20000771 	.word	0x20000771
    b92c:	20000761 	.word	0x20000761
    b930:	20000754 	.word	0x20000754

0000b934 <configure_ac>:


void configure_ac(void)
{
    b934:	b580      	push	{r7, lr}
    b936:	b08a      	sub	sp, #40	; 0x28
    b938:	af00      	add	r7, sp, #0
	struct ac_config conf_ac;
	struct ac_events conf_ac_events = {{0}};
    b93a:	231c      	movs	r3, #28
    b93c:	18fb      	adds	r3, r7, r3
    b93e:	0018      	movs	r0, r3
    b940:	2305      	movs	r3, #5
    b942:	001a      	movs	r2, r3
    b944:	2100      	movs	r1, #0
    b946:	4b2c      	ldr	r3, [pc, #176]	; (b9f8 <configure_ac+0xc4>)
    b948:	4798      	blx	r3
	
	struct ac_chan_config conf_ac_channel;
	struct port_config pin_conf;
	
	ac_get_config_defaults(&conf_ac);
    b94a:	2324      	movs	r3, #36	; 0x24
    b94c:	18fb      	adds	r3, r7, r3
    b94e:	0018      	movs	r0, r3
    b950:	4b2a      	ldr	r3, [pc, #168]	; (b9fc <configure_ac+0xc8>)
    b952:	4798      	blx	r3
	conf_ac.run_in_standby[0] = true;
    b954:	2324      	movs	r3, #36	; 0x24
    b956:	18fb      	adds	r3, r7, r3
    b958:	2201      	movs	r2, #1
    b95a:	701a      	strb	r2, [r3, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
    b95c:	2324      	movs	r3, #36	; 0x24
    b95e:	18fb      	adds	r3, r7, r3
    b960:	2206      	movs	r2, #6
    b962:	705a      	strb	r2, [r3, #1]
	ac_init(&ac_instance, AC, &conf_ac);
    b964:	2324      	movs	r3, #36	; 0x24
    b966:	18fa      	adds	r2, r7, r3
    b968:	4925      	ldr	r1, [pc, #148]	; (ba00 <configure_ac+0xcc>)
    b96a:	4b26      	ldr	r3, [pc, #152]	; (ba04 <configure_ac+0xd0>)
    b96c:	0018      	movs	r0, r3
    b96e:	4b26      	ldr	r3, [pc, #152]	; (ba08 <configure_ac+0xd4>)
    b970:	4798      	blx	r3
	
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
    b972:	1d3b      	adds	r3, r7, #4
    b974:	2200      	movs	r2, #0
    b976:	701a      	strb	r2, [r3, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
    b978:	1d3b      	adds	r3, r7, #4
    b97a:	2200      	movs	r2, #0
    b97c:	605a      	str	r2, [r3, #4]
	conf_ac_channel.enable_hysteresis = false;
    b97e:	1d3b      	adds	r3, r7, #4
    b980:	2200      	movs	r2, #0
    b982:	721a      	strb	r2, [r3, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
    b984:	1d3b      	adds	r3, r7, #4
    b986:	2200      	movs	r2, #0
    b988:	60da      	str	r2, [r3, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
    b98a:	1d3b      	adds	r3, r7, #4
    b98c:	2200      	movs	r2, #0
    b98e:	821a      	strh	r2, [r3, #16]
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
    b990:	1d3b      	adds	r3, r7, #4
    b992:	22a0      	movs	r2, #160	; 0xa0
    b994:	00d2      	lsls	r2, r2, #3
    b996:	825a      	strh	r2, [r3, #18]
	/* Detect threshold 0.515625V */
	conf_ac_channel.vcc_scale_factor = 45;
    b998:	1d3b      	adds	r3, r7, #4
    b99a:	222d      	movs	r2, #45	; 0x2d
    b99c:	751a      	strb	r2, [r3, #20]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
    b99e:	1d3b      	adds	r3, r7, #4
    b9a0:	2200      	movs	r2, #0
    b9a2:	755a      	strb	r2, [r3, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
    b9a4:	1d3a      	adds	r2, r7, #4
    b9a6:	4b17      	ldr	r3, [pc, #92]	; (ba04 <configure_ac+0xd0>)
    b9a8:	2100      	movs	r1, #0
    b9aa:	0018      	movs	r0, r3
    b9ac:	4b17      	ldr	r3, [pc, #92]	; (ba0c <configure_ac+0xd8>)
    b9ae:	4798      	blx	r3
	ac_chan_enable(&ac_instance, AC_CHAN_CHANNEL_0);
    b9b0:	4b14      	ldr	r3, [pc, #80]	; (ba04 <configure_ac+0xd0>)
    b9b2:	2100      	movs	r1, #0
    b9b4:	0018      	movs	r0, r3
    b9b6:	4b16      	ldr	r3, [pc, #88]	; (ba10 <configure_ac+0xdc>)
    b9b8:	4798      	blx	r3
	
	conf_ac_events.on_event_sample[0] = true;
    b9ba:	231c      	movs	r3, #28
    b9bc:	18fb      	adds	r3, r7, r3
    b9be:	2201      	movs	r2, #1
    b9c0:	70da      	strb	r2, [r3, #3]
	ac_enable_events(&ac_instance ,&conf_ac_events);
    b9c2:	231c      	movs	r3, #28
    b9c4:	18fa      	adds	r2, r7, r3
    b9c6:	4b0f      	ldr	r3, [pc, #60]	; (ba04 <configure_ac+0xd0>)
    b9c8:	0011      	movs	r1, r2
    b9ca:	0018      	movs	r0, r3
    b9cc:	4b11      	ldr	r3, [pc, #68]	; (ba14 <configure_ac+0xe0>)
    b9ce:	4798      	blx	r3
	
	ac_enable(&ac_instance);
    b9d0:	4b0c      	ldr	r3, [pc, #48]	; (ba04 <configure_ac+0xd0>)
    b9d2:	0018      	movs	r0, r3
    b9d4:	4b10      	ldr	r3, [pc, #64]	; (ba18 <configure_ac+0xe4>)
    b9d6:	4798      	blx	r3
	
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
    b9d8:	4910      	ldr	r1, [pc, #64]	; (ba1c <configure_ac+0xe8>)
    b9da:	4b0a      	ldr	r3, [pc, #40]	; (ba04 <configure_ac+0xd0>)
    b9dc:	2200      	movs	r2, #0
    b9de:	0018      	movs	r0, r3
    b9e0:	4b0f      	ldr	r3, [pc, #60]	; (ba20 <configure_ac+0xec>)
    b9e2:	4798      	blx	r3
	ac_enable_callback(&ac_instance, AC_CALLBACK_COMPARATOR_0);
    b9e4:	4b07      	ldr	r3, [pc, #28]	; (ba04 <configure_ac+0xd0>)
    b9e6:	2100      	movs	r1, #0
    b9e8:	0018      	movs	r0, r3
    b9ea:	4b0e      	ldr	r3, [pc, #56]	; (ba24 <configure_ac+0xf0>)
    b9ec:	4798      	blx	r3
}
    b9ee:	46c0      	nop			; (mov r8, r8)
    b9f0:	46bd      	mov	sp, r7
    b9f2:	b00a      	add	sp, #40	; 0x28
    b9f4:	bd80      	pop	{r7, pc}
    b9f6:	46c0      	nop			; (mov r8, r8)
    b9f8:	00017cd7 	.word	0x00017cd7
    b9fc:	000081b9 	.word	0x000081b9
    ba00:	42004400 	.word	0x42004400
    ba04:	2000083c 	.word	0x2000083c
    ba08:	0000bf31 	.word	0x0000bf31
    ba0c:	0000c011 	.word	0x0000c011
    ba10:	00008309 	.word	0x00008309
    ba14:	00008229 	.word	0x00008229
    ba18:	000081f1 	.word	0x000081f1
    ba1c:	0000bab9 	.word	0x0000bab9
    ba20:	000117a1 	.word	0x000117a1
    ba24:	00008471 	.word	0x00008471

0000ba28 <configure_rtc>:

void configure_rtc(void)
{
    ba28:	b580      	push	{r7, lr}
    ba2a:	b088      	sub	sp, #32
    ba2c:	af00      	add	r7, sp, #0
	struct rtc_count_config conf_rtc_count;
	struct rtc_count_events conf_rtc_events = {0};
    ba2e:	1d3b      	adds	r3, r7, #4
    ba30:	0018      	movs	r0, r3
    ba32:	230b      	movs	r3, #11
    ba34:	001a      	movs	r2, r3
    ba36:	2100      	movs	r1, #0
    ba38:	4b17      	ldr	r3, [pc, #92]	; (ba98 <configure_rtc+0x70>)
    ba3a:	4798      	blx	r3
	
	rtc_count_get_config_defaults(&conf_rtc_count);
    ba3c:	2310      	movs	r3, #16
    ba3e:	18fb      	adds	r3, r7, r3
    ba40:	0018      	movs	r0, r3
    ba42:	4b16      	ldr	r3, [pc, #88]	; (ba9c <configure_rtc+0x74>)
    ba44:	4798      	blx	r3
	conf_rtc_count.prescaler  = RTC_COUNT_PRESCALER_DIV_1;
    ba46:	2310      	movs	r3, #16
    ba48:	18fb      	adds	r3, r7, r3
    ba4a:	2200      	movs	r2, #0
    ba4c:	801a      	strh	r2, [r3, #0]
	conf_rtc_count.mode       = RTC_COUNT_MODE_16BIT;
    ba4e:	2310      	movs	r3, #16
    ba50:	18fb      	adds	r3, r7, r3
    ba52:	2200      	movs	r2, #0
    ba54:	709a      	strb	r2, [r3, #2]
	conf_rtc_count.continuously_update =  true;
    ba56:	2310      	movs	r3, #16
    ba58:	18fb      	adds	r3, r7, r3
    ba5a:	2201      	movs	r2, #1
    ba5c:	711a      	strb	r2, [r3, #4]
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
    ba5e:	2310      	movs	r3, #16
    ba60:	18fa      	adds	r2, r7, r3
    ba62:	490f      	ldr	r1, [pc, #60]	; (baa0 <configure_rtc+0x78>)
    ba64:	4b0f      	ldr	r3, [pc, #60]	; (baa4 <configure_rtc+0x7c>)
    ba66:	0018      	movs	r0, r3
    ba68:	4b0f      	ldr	r3, [pc, #60]	; (baa8 <configure_rtc+0x80>)
    ba6a:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 10);
    ba6c:	4b0d      	ldr	r3, [pc, #52]	; (baa4 <configure_rtc+0x7c>)
    ba6e:	210a      	movs	r1, #10
    ba70:	0018      	movs	r0, r3
    ba72:	4b0e      	ldr	r3, [pc, #56]	; (baac <configure_rtc+0x84>)
    ba74:	4798      	blx	r3
	conf_rtc_events.generate_event_on_overflow = true;
    ba76:	1d3b      	adds	r3, r7, #4
    ba78:	2201      	movs	r2, #1
    ba7a:	701a      	strb	r2, [r3, #0]
	
	rtc_count_enable_events(&rtc_instance, &conf_rtc_events);
    ba7c:	1d3a      	adds	r2, r7, #4
    ba7e:	4b09      	ldr	r3, [pc, #36]	; (baa4 <configure_rtc+0x7c>)
    ba80:	0011      	movs	r1, r2
    ba82:	0018      	movs	r0, r3
    ba84:	4b0a      	ldr	r3, [pc, #40]	; (bab0 <configure_rtc+0x88>)
    ba86:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    ba88:	4b06      	ldr	r3, [pc, #24]	; (baa4 <configure_rtc+0x7c>)
    ba8a:	0018      	movs	r0, r3
    ba8c:	4b09      	ldr	r3, [pc, #36]	; (bab4 <configure_rtc+0x8c>)
    ba8e:	4798      	blx	r3
}
    ba90:	46c0      	nop			; (mov r8, r8)
    ba92:	46bd      	mov	sp, r7
    ba94:	b008      	add	sp, #32
    ba96:	bd80      	pop	{r7, pc}
    ba98:	00017cd7 	.word	0x00017cd7
    ba9c:	000088f9 	.word	0x000088f9
    baa0:	40001400 	.word	0x40001400
    baa4:	2000081c 	.word	0x2000081c
    baa8:	0000d48d 	.word	0x0000d48d
    baac:	0000d5a9 	.word	0x0000d5a9
    bab0:	00008955 	.word	0x00008955
    bab4:	0000d265 	.word	0x0000d265

0000bab8 <ac_detect_callback>:

void ac_detect_callback(struct ac_module *const module_inst)
{
    bab8:	b580      	push	{r7, lr}
    baba:	b082      	sub	sp, #8
    babc:	af00      	add	r7, sp, #0
    babe:	6078      	str	r0, [r7, #4]
	eventOccured = true;
    bac0:	4b03      	ldr	r3, [pc, #12]	; (bad0 <ac_detect_callback+0x18>)
    bac2:	2201      	movs	r2, #1
    bac4:	701a      	strb	r2, [r3, #0]
}
    bac6:	46c0      	nop			; (mov r8, r8)
    bac8:	46bd      	mov	sp, r7
    baca:	b002      	add	sp, #8
    bacc:	bd80      	pop	{r7, pc}
    bace:	46c0      	nop			; (mov r8, r8)
    bad0:	20000717 	.word	0x20000717

0000bad4 <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
    bad4:	b580      	push	{r7, lr}
    bad6:	af00      	add	r7, sp, #0
	eventOccured = true;
    bad8:	4b02      	ldr	r3, [pc, #8]	; (bae4 <motor_feedback_callback+0x10>)
    bada:	2201      	movs	r2, #1
    badc:	701a      	strb	r2, [r3, #0]
}
    bade:	46c0      	nop			; (mov r8, r8)
    bae0:	46bd      	mov	sp, r7
    bae2:	bd80      	pop	{r7, pc}
    bae4:	20000717 	.word	0x20000717

0000bae8 <configure_event>:

void configure_event(void)
{
    bae8:	b580      	push	{r7, lr}
    baea:	b082      	sub	sp, #8
    baec:	af00      	add	r7, sp, #0
	struct events_config conf_event;
	events_get_config_defaults(&conf_event);
    baee:	1d3b      	adds	r3, r7, #4
    baf0:	0018      	movs	r0, r3
    baf2:	4b0d      	ldr	r3, [pc, #52]	; (bb28 <configure_event+0x40>)
    baf4:	4798      	blx	r3
	conf_event.generator = EVSYS_ID_GEN_RTC_OVF;
    baf6:	1d3b      	adds	r3, r7, #4
    baf8:	2203      	movs	r2, #3
    bafa:	709a      	strb	r2, [r3, #2]
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
    bafc:	1d3b      	adds	r3, r7, #4
    bafe:	2200      	movs	r2, #0
    bb00:	701a      	strb	r2, [r3, #0]
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
    bb02:	1d3b      	adds	r3, r7, #4
    bb04:	2202      	movs	r2, #2
    bb06:	705a      	strb	r2, [r3, #1]
	
	events_allocate(&resource, &conf_event);
    bb08:	1d3a      	adds	r2, r7, #4
    bb0a:	4b08      	ldr	r3, [pc, #32]	; (bb2c <configure_event+0x44>)
    bb0c:	0011      	movs	r1, r2
    bb0e:	0018      	movs	r0, r3
    bb10:	4b07      	ldr	r3, [pc, #28]	; (bb30 <configure_event+0x48>)
    bb12:	4798      	blx	r3
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
    bb14:	4b05      	ldr	r3, [pc, #20]	; (bb2c <configure_event+0x44>)
    bb16:	2119      	movs	r1, #25
    bb18:	0018      	movs	r0, r3
    bb1a:	4b06      	ldr	r3, [pc, #24]	; (bb34 <configure_event+0x4c>)
    bb1c:	4798      	blx	r3
}
    bb1e:	46c0      	nop			; (mov r8, r8)
    bb20:	46bd      	mov	sp, r7
    bb22:	b002      	add	sp, #8
    bb24:	bd80      	pop	{r7, pc}
    bb26:	46c0      	nop			; (mov r8, r8)
    bb28:	00011661 	.word	0x00011661
    bb2c:	20000834 	.word	0x20000834
    bb30:	00011689 	.word	0x00011689
    bb34:	00011751 	.word	0x00011751

0000bb38 <operateOnButtonEvent>:

void operateOnButtonEvent(void)
{
    bb38:	b580      	push	{r7, lr}
    bb3a:	af00      	add	r7, sp, #0
	buttonEventOccured=false;
    bb3c:	4b28      	ldr	r3, [pc, #160]	; (bbe0 <operateOnButtonEvent+0xa8>)
    bb3e:	2200      	movs	r2, #0
    bb40:	701a      	strb	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
    bb42:	2026      	movs	r0, #38	; 0x26
    bb44:	4b27      	ldr	r3, [pc, #156]	; (bbe4 <operateOnButtonEvent+0xac>)
    bb46:	4798      	blx	r3
    bb48:	0003      	movs	r3, r0
    bb4a:	001a      	movs	r2, r3
    bb4c:	2301      	movs	r3, #1
    bb4e:	4053      	eors	r3, r2
    bb50:	b2db      	uxtb	r3, r3
    bb52:	2b00      	cmp	r3, #0
    bb54:	d008      	beq.n	bb68 <operateOnButtonEvent+0x30>
	{
		lastPressTime=xTaskGetTickCount();
    bb56:	4b24      	ldr	r3, [pc, #144]	; (bbe8 <operateOnButtonEvent+0xb0>)
    bb58:	4798      	blx	r3
    bb5a:	0002      	movs	r2, r0
    bb5c:	4b23      	ldr	r3, [pc, #140]	; (bbec <operateOnButtonEvent+0xb4>)
    bb5e:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTART;
    bb60:	4b23      	ldr	r3, [pc, #140]	; (bbf0 <operateOnButtonEvent+0xb8>)
    bb62:	2201      	movs	r2, #1
    bb64:	701a      	strb	r2, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
	}
}
    bb66:	e037      	b.n	bbd8 <operateOnButtonEvent+0xa0>
	else if (STOP_BUTTON_INPUT_COMES)
    bb68:	2025      	movs	r0, #37	; 0x25
    bb6a:	4b1e      	ldr	r3, [pc, #120]	; (bbe4 <operateOnButtonEvent+0xac>)
    bb6c:	4798      	blx	r3
    bb6e:	0003      	movs	r3, r0
    bb70:	001a      	movs	r2, r3
    bb72:	2301      	movs	r3, #1
    bb74:	4053      	eors	r3, r2
    bb76:	b2db      	uxtb	r3, r3
    bb78:	2b00      	cmp	r3, #0
    bb7a:	d008      	beq.n	bb8e <operateOnButtonEvent+0x56>
		lastPressTime=xTaskGetTickCount();
    bb7c:	4b1a      	ldr	r3, [pc, #104]	; (bbe8 <operateOnButtonEvent+0xb0>)
    bb7e:	4798      	blx	r3
    bb80:	0002      	movs	r2, r0
    bb82:	4b1a      	ldr	r3, [pc, #104]	; (bbec <operateOnButtonEvent+0xb4>)
    bb84:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTSTOP;
    bb86:	4b1a      	ldr	r3, [pc, #104]	; (bbf0 <operateOnButtonEvent+0xb8>)
    bb88:	2202      	movs	r2, #2
    bb8a:	701a      	strb	r2, [r3, #0]
}
    bb8c:	e024      	b.n	bbd8 <operateOnButtonEvent+0xa0>
	else if (AUTO_BUTTON_INPUT_COMES)
    bb8e:	201c      	movs	r0, #28
    bb90:	4b14      	ldr	r3, [pc, #80]	; (bbe4 <operateOnButtonEvent+0xac>)
    bb92:	4798      	blx	r3
    bb94:	0003      	movs	r3, r0
    bb96:	001a      	movs	r2, r3
    bb98:	2301      	movs	r3, #1
    bb9a:	4053      	eors	r3, r2
    bb9c:	b2db      	uxtb	r3, r3
    bb9e:	2b00      	cmp	r3, #0
    bba0:	d008      	beq.n	bbb4 <operateOnButtonEvent+0x7c>
		lastPressTime=xTaskGetTickCount();
    bba2:	4b11      	ldr	r3, [pc, #68]	; (bbe8 <operateOnButtonEvent+0xb0>)
    bba4:	4798      	blx	r3
    bba6:	0002      	movs	r2, r0
    bba8:	4b10      	ldr	r3, [pc, #64]	; (bbec <operateOnButtonEvent+0xb4>)
    bbaa:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
    bbac:	4b10      	ldr	r3, [pc, #64]	; (bbf0 <operateOnButtonEvent+0xb8>)
    bbae:	2203      	movs	r2, #3
    bbb0:	701a      	strb	r2, [r3, #0]
}
    bbb2:	e011      	b.n	bbd8 <operateOnButtonEvent+0xa0>
	else if(LCDSHOW_BUTTON_INPUT_COMES)
    bbb4:	2029      	movs	r0, #41	; 0x29
    bbb6:	4b0b      	ldr	r3, [pc, #44]	; (bbe4 <operateOnButtonEvent+0xac>)
    bbb8:	4798      	blx	r3
    bbba:	0003      	movs	r3, r0
    bbbc:	001a      	movs	r2, r3
    bbbe:	2301      	movs	r3, #1
    bbc0:	4053      	eors	r3, r2
    bbc2:	b2db      	uxtb	r3, r3
    bbc4:	2b00      	cmp	r3, #0
    bbc6:	d007      	beq.n	bbd8 <operateOnButtonEvent+0xa0>
		lastPressTime= xTaskGetTickCount();
    bbc8:	4b07      	ldr	r3, [pc, #28]	; (bbe8 <operateOnButtonEvent+0xb0>)
    bbca:	4798      	blx	r3
    bbcc:	0002      	movs	r2, r0
    bbce:	4b07      	ldr	r3, [pc, #28]	; (bbec <operateOnButtonEvent+0xb4>)
    bbd0:	601a      	str	r2, [r3, #0]
		lastButtonEvent=BTNEVENTLCDSHOW;
    bbd2:	4b07      	ldr	r3, [pc, #28]	; (bbf0 <operateOnButtonEvent+0xb8>)
    bbd4:	2204      	movs	r2, #4
    bbd6:	701a      	strb	r2, [r3, #0]
}
    bbd8:	46c0      	nop			; (mov r8, r8)
    bbda:	46bd      	mov	sp, r7
    bbdc:	bd80      	pop	{r7, pc}
    bbde:	46c0      	nop			; (mov r8, r8)
    bbe0:	20000777 	.word	0x20000777
    bbe4:	000087d9 	.word	0x000087d9
    bbe8:	0000f37d 	.word	0x0000f37d
    bbec:	20000740 	.word	0x20000740
    bbf0:	20000760 	.word	0x20000760

0000bbf4 <buttonFilter>:

void buttonFilter(void)
{
    bbf4:	b580      	push	{r7, lr}
    bbf6:	af00      	add	r7, sp, #0
	//&& xTaskGetTickCount() - lastPressTime > 30
	if(lastButtonEvent>0)
    bbf8:	4b47      	ldr	r3, [pc, #284]	; (bd18 <buttonFilter+0x124>)
    bbfa:	781b      	ldrb	r3, [r3, #0]
    bbfc:	b2db      	uxtb	r3, r3
    bbfe:	2b00      	cmp	r3, #0
    bc00:	d100      	bne.n	bc04 <buttonFilter+0x10>
    bc02:	e086      	b.n	bd12 <buttonFilter+0x11e>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
    bc04:	4b44      	ldr	r3, [pc, #272]	; (bd18 <buttonFilter+0x124>)
    bc06:	781b      	ldrb	r3, [r3, #0]
    bc08:	b2db      	uxtb	r3, r3
    bc0a:	2b01      	cmp	r3, #1
    bc0c:	d111      	bne.n	bc32 <buttonFilter+0x3e>
    bc0e:	2026      	movs	r0, #38	; 0x26
    bc10:	4b42      	ldr	r3, [pc, #264]	; (bd1c <buttonFilter+0x128>)
    bc12:	4798      	blx	r3
    bc14:	0003      	movs	r3, r0
    bc16:	001a      	movs	r2, r3
    bc18:	2301      	movs	r3, #1
    bc1a:	4053      	eors	r3, r2
    bc1c:	b2db      	uxtb	r3, r3
    bc1e:	2b00      	cmp	r3, #0
    bc20:	d007      	beq.n	bc32 <buttonFilter+0x3e>
		{
			lastButtonEvent=0;
    bc22:	4b3d      	ldr	r3, [pc, #244]	; (bd18 <buttonFilter+0x124>)
    bc24:	2200      	movs	r2, #0
    bc26:	701a      	strb	r2, [r3, #0]
			startMotor(false,false);
    bc28:	2100      	movs	r1, #0
    bc2a:	2000      	movs	r0, #0
    bc2c:	4b3c      	ldr	r3, [pc, #240]	; (bd20 <buttonFilter+0x12c>)
    bc2e:	4798      	blx	r3
    bc30:	e06f      	b.n	bd12 <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
    bc32:	4b39      	ldr	r3, [pc, #228]	; (bd18 <buttonFilter+0x124>)
    bc34:	781b      	ldrb	r3, [r3, #0]
    bc36:	b2db      	uxtb	r3, r3
    bc38:	2b02      	cmp	r3, #2
    bc3a:	d112      	bne.n	bc62 <buttonFilter+0x6e>
    bc3c:	2025      	movs	r0, #37	; 0x25
    bc3e:	4b37      	ldr	r3, [pc, #220]	; (bd1c <buttonFilter+0x128>)
    bc40:	4798      	blx	r3
    bc42:	0003      	movs	r3, r0
    bc44:	001a      	movs	r2, r3
    bc46:	2301      	movs	r3, #1
    bc48:	4053      	eors	r3, r2
    bc4a:	b2db      	uxtb	r3, r3
    bc4c:	2b00      	cmp	r3, #0
    bc4e:	d008      	beq.n	bc62 <buttonFilter+0x6e>
		{
			lastButtonEvent=0;
    bc50:	4b31      	ldr	r3, [pc, #196]	; (bd18 <buttonFilter+0x124>)
    bc52:	2200      	movs	r2, #0
    bc54:	701a      	strb	r2, [r3, #0]
			stopMotor(false,false,true);
    bc56:	2201      	movs	r2, #1
    bc58:	2100      	movs	r1, #0
    bc5a:	2000      	movs	r0, #0
    bc5c:	4b31      	ldr	r3, [pc, #196]	; (bd24 <buttonFilter+0x130>)
    bc5e:	4798      	blx	r3
    bc60:	e057      	b.n	bd12 <buttonFilter+0x11e>
		}
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
    bc62:	4b2d      	ldr	r3, [pc, #180]	; (bd18 <buttonFilter+0x124>)
    bc64:	781b      	ldrb	r3, [r3, #0]
    bc66:	b2db      	uxtb	r3, r3
    bc68:	2b03      	cmp	r3, #3
    bc6a:	d12b      	bne.n	bcc4 <buttonFilter+0xd0>
    bc6c:	201c      	movs	r0, #28
    bc6e:	4b2b      	ldr	r3, [pc, #172]	; (bd1c <buttonFilter+0x128>)
    bc70:	4798      	blx	r3
    bc72:	0003      	movs	r3, r0
    bc74:	001a      	movs	r2, r3
    bc76:	2301      	movs	r3, #1
    bc78:	4053      	eors	r3, r2
    bc7a:	b2db      	uxtb	r3, r3
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	d021      	beq.n	bcc4 <buttonFilter+0xd0>
		{
			lastButtonEvent=0;
    bc80:	4b25      	ldr	r3, [pc, #148]	; (bd18 <buttonFilter+0x124>)
    bc82:	2200      	movs	r2, #0
    bc84:	701a      	strb	r2, [r3, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
    bc86:	4b28      	ldr	r3, [pc, #160]	; (bd28 <buttonFilter+0x134>)
    bc88:	785b      	ldrb	r3, [r3, #1]
    bc8a:	425a      	negs	r2, r3
    bc8c:	4153      	adcs	r3, r2
    bc8e:	b2db      	uxtb	r3, r3
    bc90:	0018      	movs	r0, r3
    bc92:	4b26      	ldr	r3, [pc, #152]	; (bd2c <buttonFilter+0x138>)
    bc94:	4798      	blx	r3
			resetAutoStart(true);
    bc96:	2001      	movs	r0, #1
    bc98:	4b25      	ldr	r3, [pc, #148]	; (bd30 <buttonFilter+0x13c>)
    bc9a:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
    bc9c:	4b22      	ldr	r3, [pc, #136]	; (bd28 <buttonFilter+0x134>)
    bc9e:	785b      	ldrb	r3, [r3, #1]
    bca0:	2b00      	cmp	r3, #0
    bca2:	d007      	beq.n	bcb4 <buttonFilter+0xc0>
			{
				simEventTemp[10] = registerEvent(')');
    bca4:	2029      	movs	r0, #41	; 0x29
    bca6:	4b23      	ldr	r3, [pc, #140]	; (bd34 <buttonFilter+0x140>)
    bca8:	4798      	blx	r3
    bcaa:	0003      	movs	r3, r0
    bcac:	001a      	movs	r2, r3
    bcae:	4b22      	ldr	r3, [pc, #136]	; (bd38 <buttonFilter+0x144>)
    bcb0:	729a      	strb	r2, [r3, #10]
			if(user_settings_parameter_struct.autoStartAddress)
    bcb2:	e02e      	b.n	bd12 <buttonFilter+0x11e>
			}
			else
			{
				simEventTemp[11] = registerEvent('[');
    bcb4:	205b      	movs	r0, #91	; 0x5b
    bcb6:	4b1f      	ldr	r3, [pc, #124]	; (bd34 <buttonFilter+0x140>)
    bcb8:	4798      	blx	r3
    bcba:	0003      	movs	r3, r0
    bcbc:	001a      	movs	r2, r3
    bcbe:	4b1e      	ldr	r3, [pc, #120]	; (bd38 <buttonFilter+0x144>)
    bcc0:	72da      	strb	r2, [r3, #11]
			if(user_settings_parameter_struct.autoStartAddress)
    bcc2:	e026      	b.n	bd12 <buttonFilter+0x11e>
			}
		}
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
    bcc4:	4b14      	ldr	r3, [pc, #80]	; (bd18 <buttonFilter+0x124>)
    bcc6:	781b      	ldrb	r3, [r3, #0]
    bcc8:	b2db      	uxtb	r3, r3
    bcca:	2b04      	cmp	r3, #4
    bccc:	d11d      	bne.n	bd0a <buttonFilter+0x116>
    bcce:	2029      	movs	r0, #41	; 0x29
    bcd0:	4b12      	ldr	r3, [pc, #72]	; (bd1c <buttonFilter+0x128>)
    bcd2:	4798      	blx	r3
    bcd4:	0003      	movs	r3, r0
    bcd6:	001a      	movs	r2, r3
    bcd8:	2301      	movs	r3, #1
    bcda:	4053      	eors	r3, r2
    bcdc:	b2db      	uxtb	r3, r3
    bcde:	2b00      	cmp	r3, #0
    bce0:	d013      	beq.n	bd0a <buttonFilter+0x116>
		{
			lastButtonEvent=0;
    bce2:	4b0d      	ldr	r3, [pc, #52]	; (bd18 <buttonFilter+0x124>)
    bce4:	2200      	movs	r2, #0
    bce6:	701a      	strb	r2, [r3, #0]
			setDisplayPause(!varPauseDisplay);
    bce8:	4b14      	ldr	r3, [pc, #80]	; (bd3c <buttonFilter+0x148>)
    bcea:	781b      	ldrb	r3, [r3, #0]
    bcec:	b2db      	uxtb	r3, r3
    bcee:	1e5a      	subs	r2, r3, #1
    bcf0:	4193      	sbcs	r3, r2
    bcf2:	b2db      	uxtb	r3, r3
    bcf4:	2201      	movs	r2, #1
    bcf6:	4053      	eors	r3, r2
    bcf8:	b2db      	uxtb	r3, r3
    bcfa:	1c1a      	adds	r2, r3, #0
    bcfc:	2301      	movs	r3, #1
    bcfe:	4013      	ands	r3, r2
    bd00:	b2db      	uxtb	r3, r3
    bd02:	0018      	movs	r0, r3
    bd04:	4b0e      	ldr	r3, [pc, #56]	; (bd40 <buttonFilter+0x14c>)
    bd06:	4798      	blx	r3
    bd08:	e003      	b.n	bd12 <buttonFilter+0x11e>
		}
		else
		{
			lastButtonEvent=0;
    bd0a:	4b03      	ldr	r3, [pc, #12]	; (bd18 <buttonFilter+0x124>)
    bd0c:	2200      	movs	r2, #0
    bd0e:	701a      	strb	r2, [r3, #0]
		}
	}
}
    bd10:	e7ff      	b.n	bd12 <buttonFilter+0x11e>
    bd12:	46c0      	nop			; (mov r8, r8)
    bd14:	46bd      	mov	sp, r7
    bd16:	bd80      	pop	{r7, pc}
    bd18:	20000760 	.word	0x20000760
    bd1c:	000087d9 	.word	0x000087d9
    bd20:	0000a5c9 	.word	0x0000a5c9
    bd24:	0000a78d 	.word	0x0000a78d
    bd28:	2000065c 	.word	0x2000065c
    bd2c:	000012a9 	.word	0x000012a9
    bd30:	0000a195 	.word	0x0000a195
    bd34:	000046d1 	.word	0x000046d1
    bd38:	20000700 	.word	0x20000700
    bd3c:	20000784 	.word	0x20000784
    bd40:	0000bd45 	.word	0x0000bd45

0000bd44 <setDisplayPause>:
//}
//}


void setDisplayPause(bool value)
{
    bd44:	b580      	push	{r7, lr}
    bd46:	b082      	sub	sp, #8
    bd48:	af00      	add	r7, sp, #0
    bd4a:	0002      	movs	r2, r0
    bd4c:	1dfb      	adds	r3, r7, #7
    bd4e:	701a      	strb	r2, [r3, #0]
	varPauseDisplay=value;
    bd50:	4b03      	ldr	r3, [pc, #12]	; (bd60 <setDisplayPause+0x1c>)
    bd52:	1dfa      	adds	r2, r7, #7
    bd54:	7812      	ldrb	r2, [r2, #0]
    bd56:	701a      	strb	r2, [r3, #0]
}
    bd58:	46c0      	nop			; (mov r8, r8)
    bd5a:	46bd      	mov	sp, r7
    bd5c:	b002      	add	sp, #8
    bd5e:	bd80      	pop	{r7, pc}
    bd60:	20000784 	.word	0x20000784

0000bd64 <setCallStateOnLCD>:

void setCallStateOnLCD(uint8_t callState,char* number,bool usePrevious)
{
    bd64:	b580      	push	{r7, lr}
    bd66:	b082      	sub	sp, #8
    bd68:	af00      	add	r7, sp, #0
    bd6a:	6039      	str	r1, [r7, #0]
    bd6c:	0011      	movs	r1, r2
    bd6e:	1dfb      	adds	r3, r7, #7
    bd70:	1c02      	adds	r2, r0, #0
    bd72:	701a      	strb	r2, [r3, #0]
    bd74:	1dbb      	adds	r3, r7, #6
    bd76:	1c0a      	adds	r2, r1, #0
    bd78:	701a      	strb	r2, [r3, #0]
	callStateOnLCD = callState;
    bd7a:	4b0f      	ldr	r3, [pc, #60]	; (bdb8 <setCallStateOnLCD+0x54>)
    bd7c:	1dfa      	adds	r2, r7, #7
    bd7e:	7812      	ldrb	r2, [r2, #0]
    bd80:	701a      	strb	r2, [r3, #0]

	if(!usePrevious)
    bd82:	1dbb      	adds	r3, r7, #6
    bd84:	781b      	ldrb	r3, [r3, #0]
    bd86:	2201      	movs	r2, #1
    bd88:	4053      	eors	r3, r2
    bd8a:	b2db      	uxtb	r3, r3
    bd8c:	2b00      	cmp	r3, #0
    bd8e:	d00f      	beq.n	bdb0 <setCallStateOnLCD+0x4c>
	{
		memset(numberOnLCD, '\0', sizeof(numberOnLCD));
    bd90:	4b0a      	ldr	r3, [pc, #40]	; (bdbc <setCallStateOnLCD+0x58>)
    bd92:	2214      	movs	r2, #20
    bd94:	2100      	movs	r1, #0
    bd96:	0018      	movs	r0, r3
    bd98:	4b09      	ldr	r3, [pc, #36]	; (bdc0 <setCallStateOnLCD+0x5c>)
    bd9a:	4798      	blx	r3
		if(callStateOnLCD!=LCDCALLSTATE_IDLE)
    bd9c:	4b06      	ldr	r3, [pc, #24]	; (bdb8 <setCallStateOnLCD+0x54>)
    bd9e:	781b      	ldrb	r3, [r3, #0]
    bda0:	2b00      	cmp	r3, #0
    bda2:	d005      	beq.n	bdb0 <setCallStateOnLCD+0x4c>
		{
			strcpy(numberOnLCD,number);
    bda4:	683a      	ldr	r2, [r7, #0]
    bda6:	4b05      	ldr	r3, [pc, #20]	; (bdbc <setCallStateOnLCD+0x58>)
    bda8:	0011      	movs	r1, r2
    bdaa:	0018      	movs	r0, r3
    bdac:	4b05      	ldr	r3, [pc, #20]	; (bdc4 <setCallStateOnLCD+0x60>)
    bdae:	4798      	blx	r3
			//sprintf(numberOnLCD,"%s",number);
		}
	}
}
    bdb0:	46c0      	nop			; (mov r8, r8)
    bdb2:	46bd      	mov	sp, r7
    bdb4:	b002      	add	sp, #8
    bdb6:	bd80      	pop	{r7, pc}
    bdb8:	20000799 	.word	0x20000799
    bdbc:	20000800 	.word	0x20000800
    bdc0:	00017cd7 	.word	0x00017cd7
    bdc4:	00017f57 	.word	0x00017f57

0000bdc8 <vTask_50ms_Timer>:

static void vTask_50ms_Timer(void *params)
{
    bdc8:	b580      	push	{r7, lr}
    bdca:	b084      	sub	sp, #16
    bdcc:	af00      	add	r7, sp, #0
    bdce:	6078      	str	r0, [r7, #4]
	TickType_t xLastExecutionGsm_Send_Time;
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    bdd0:	4b0f      	ldr	r3, [pc, #60]	; (be10 <vTask_50ms_Timer+0x48>)
    bdd2:	4798      	blx	r3
    bdd4:	0003      	movs	r3, r0
    bdd6:	60fb      	str	r3, [r7, #12]
	//--------------------------------
	for( ;; )
	{
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
    bdd8:	230c      	movs	r3, #12
    bdda:	18fb      	adds	r3, r7, r3
    bddc:	2119      	movs	r1, #25
    bdde:	0018      	movs	r0, r3
    bde0:	4b0c      	ldr	r3, [pc, #48]	; (be14 <vTask_50ms_Timer+0x4c>)
    bde2:	4798      	blx	r3
		if(buttonEventOccured)
    bde4:	4b0c      	ldr	r3, [pc, #48]	; (be18 <vTask_50ms_Timer+0x50>)
    bde6:	781b      	ldrb	r3, [r3, #0]
    bde8:	b2db      	uxtb	r3, r3
    bdea:	2b00      	cmp	r3, #0
    bdec:	d001      	beq.n	bdf2 <vTask_50ms_Timer+0x2a>
		{
			operateOnButtonEvent();
    bdee:	4b0b      	ldr	r3, [pc, #44]	; (be1c <vTask_50ms_Timer+0x54>)
    bdf0:	4798      	blx	r3
		}
		if(lastButtonEvent>0)
    bdf2:	4b0b      	ldr	r3, [pc, #44]	; (be20 <vTask_50ms_Timer+0x58>)
    bdf4:	781b      	ldrb	r3, [r3, #0]
    bdf6:	b2db      	uxtb	r3, r3
    bdf8:	2b00      	cmp	r3, #0
    bdfa:	d0ed      	beq.n	bdd8 <vTask_50ms_Timer+0x10>
		{
			taskPSet=true;
    bdfc:	4b09      	ldr	r3, [pc, #36]	; (be24 <vTask_50ms_Timer+0x5c>)
    bdfe:	2201      	movs	r2, #1
    be00:	701a      	strb	r2, [r3, #0]
			vTaskPrioritySet(motorTask,2);
    be02:	4b09      	ldr	r3, [pc, #36]	; (be28 <vTask_50ms_Timer+0x60>)
    be04:	681b      	ldr	r3, [r3, #0]
    be06:	2102      	movs	r1, #2
    be08:	0018      	movs	r0, r3
    be0a:	4b08      	ldr	r3, [pc, #32]	; (be2c <vTask_50ms_Timer+0x64>)
    be0c:	4798      	blx	r3
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (25/portTICK_PERIOD_MS));
    be0e:	e7e3      	b.n	bdd8 <vTask_50ms_Timer+0x10>
    be10:	0000f37d 	.word	0x0000f37d
    be14:	0000ef51 	.word	0x0000ef51
    be18:	20000777 	.word	0x20000777
    be1c:	0000bb39 	.word	0x0000bb39
    be20:	20000760 	.word	0x20000760
    be24:	20000716 	.word	0x20000716
    be28:	200007a4 	.word	0x200007a4
    be2c:	0000f075 	.word	0x0000f075

0000be30 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    be30:	b580      	push	{r7, lr}
    be32:	b082      	sub	sp, #8
    be34:	af00      	add	r7, sp, #0
    be36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    be38:	687b      	ldr	r3, [r7, #4]
    be3a:	2200      	movs	r2, #0
    be3c:	701a      	strb	r2, [r3, #0]
}
    be3e:	46c0      	nop			; (mov r8, r8)
    be40:	46bd      	mov	sp, r7
    be42:	b002      	add	sp, #8
    be44:	bd80      	pop	{r7, pc}
	...

0000be48 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    be48:	b580      	push	{r7, lr}
    be4a:	b082      	sub	sp, #8
    be4c:	af00      	add	r7, sp, #0
    be4e:	0002      	movs	r2, r0
    be50:	6039      	str	r1, [r7, #0]
    be52:	1dfb      	adds	r3, r7, #7
    be54:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    be56:	1dfb      	adds	r3, r7, #7
    be58:	781b      	ldrb	r3, [r3, #0]
    be5a:	2b01      	cmp	r3, #1
    be5c:	d00a      	beq.n	be74 <system_apb_clock_set_mask+0x2c>
    be5e:	2b02      	cmp	r3, #2
    be60:	d00f      	beq.n	be82 <system_apb_clock_set_mask+0x3a>
    be62:	2b00      	cmp	r3, #0
    be64:	d114      	bne.n	be90 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    be66:	4b0e      	ldr	r3, [pc, #56]	; (bea0 <system_apb_clock_set_mask+0x58>)
    be68:	4a0d      	ldr	r2, [pc, #52]	; (bea0 <system_apb_clock_set_mask+0x58>)
    be6a:	6991      	ldr	r1, [r2, #24]
    be6c:	683a      	ldr	r2, [r7, #0]
    be6e:	430a      	orrs	r2, r1
    be70:	619a      	str	r2, [r3, #24]
			break;
    be72:	e00f      	b.n	be94 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    be74:	4b0a      	ldr	r3, [pc, #40]	; (bea0 <system_apb_clock_set_mask+0x58>)
    be76:	4a0a      	ldr	r2, [pc, #40]	; (bea0 <system_apb_clock_set_mask+0x58>)
    be78:	69d1      	ldr	r1, [r2, #28]
    be7a:	683a      	ldr	r2, [r7, #0]
    be7c:	430a      	orrs	r2, r1
    be7e:	61da      	str	r2, [r3, #28]
			break;
    be80:	e008      	b.n	be94 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    be82:	4b07      	ldr	r3, [pc, #28]	; (bea0 <system_apb_clock_set_mask+0x58>)
    be84:	4a06      	ldr	r2, [pc, #24]	; (bea0 <system_apb_clock_set_mask+0x58>)
    be86:	6a11      	ldr	r1, [r2, #32]
    be88:	683a      	ldr	r2, [r7, #0]
    be8a:	430a      	orrs	r2, r1
    be8c:	621a      	str	r2, [r3, #32]
			break;
    be8e:	e001      	b.n	be94 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    be90:	2317      	movs	r3, #23
    be92:	e000      	b.n	be96 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    be94:	2300      	movs	r3, #0
}
    be96:	0018      	movs	r0, r3
    be98:	46bd      	mov	sp, r7
    be9a:	b002      	add	sp, #8
    be9c:	bd80      	pop	{r7, pc}
    be9e:	46c0      	nop			; (mov r8, r8)
    bea0:	40000400 	.word	0x40000400

0000bea4 <ac_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval ture If the module synchronization is ongoing
 */
static inline bool ac_is_syncing(
        struct ac_module *const module_inst)
{
    bea4:	b580      	push	{r7, lr}
    bea6:	b084      	sub	sp, #16
    bea8:	af00      	add	r7, sp, #0
    beaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Ac *const ac_module = module_inst->hw;
    beac:	687b      	ldr	r3, [r7, #4]
    beae:	681b      	ldr	r3, [r3, #0]
    beb0:	60fb      	str	r3, [r7, #12]
		return true;
	}

	return false;
#else
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    beb2:	68fb      	ldr	r3, [r7, #12]
    beb4:	7a5b      	ldrb	r3, [r3, #9]
    beb6:	b2db      	uxtb	r3, r3
    beb8:	b25b      	sxtb	r3, r3
    beba:	2b00      	cmp	r3, #0
    bebc:	da01      	bge.n	bec2 <ac_is_syncing+0x1e>
		return true;
    bebe:	2301      	movs	r3, #1
    bec0:	e000      	b.n	bec4 <ac_is_syncing+0x20>
	}

	return false;
    bec2:	2300      	movs	r3, #0
#endif
}
    bec4:	0018      	movs	r0, r3
    bec6:	46bd      	mov	sp, r7
    bec8:	b004      	add	sp, #16
    beca:	bd80      	pop	{r7, pc}

0000becc <_ac_set_config>:
#include "ac.h"

static enum status_code _ac_set_config(
		struct ac_module *const module_inst,
		struct ac_config *const config)
{
    becc:	b580      	push	{r7, lr}
    bece:	b086      	sub	sp, #24
    bed0:	af00      	add	r7, sp, #0
    bed2:	6078      	str	r0, [r7, #4]
    bed4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
    bed6:	687b      	ldr	r3, [r7, #4]
    bed8:	681b      	ldr	r3, [r3, #0]
    beda:	60fb      	str	r3, [r7, #12]

	/* Use a temporary register for computing the control bits */
	uint32_t ctrla_temp = 0;
    bedc:	2300      	movs	r3, #0
    bede:	617b      	str	r3, [r7, #20]

	/* Check if the comparators should be enabled during sleep */
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    bee0:	2300      	movs	r3, #0
    bee2:	613b      	str	r3, [r7, #16]
    bee4:	e00f      	b.n	bf06 <_ac_set_config+0x3a>
		if (config->run_in_standby[i] == true) {
    bee6:	683a      	ldr	r2, [r7, #0]
    bee8:	693b      	ldr	r3, [r7, #16]
    beea:	18d3      	adds	r3, r2, r3
    beec:	781b      	ldrb	r3, [r3, #0]
    beee:	2b00      	cmp	r3, #0
    bef0:	d006      	beq.n	bf00 <_ac_set_config+0x34>
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
    bef2:	2204      	movs	r2, #4
    bef4:	693b      	ldr	r3, [r7, #16]
    bef6:	409a      	lsls	r2, r3
    bef8:	0013      	movs	r3, r2
    befa:	697a      	ldr	r2, [r7, #20]
    befc:	4313      	orrs	r3, r2
    befe:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < AC_PAIRS; i++) {
    bf00:	693b      	ldr	r3, [r7, #16]
    bf02:	3301      	adds	r3, #1
    bf04:	613b      	str	r3, [r7, #16]
    bf06:	693b      	ldr	r3, [r7, #16]
    bf08:	2b00      	cmp	r3, #0
    bf0a:	d0ec      	beq.n	bee6 <_ac_set_config+0x1a>
		}
	}

	while (ac_is_syncing(module_inst)) {
    bf0c:	46c0      	nop			; (mov r8, r8)
    bf0e:	687b      	ldr	r3, [r7, #4]
    bf10:	0018      	movs	r0, r3
    bf12:	4b06      	ldr	r3, [pc, #24]	; (bf2c <_ac_set_config+0x60>)
    bf14:	4798      	blx	r3
    bf16:	1e03      	subs	r3, r0, #0
    bf18:	d1f9      	bne.n	bf0e <_ac_set_config+0x42>
		/* Wait until synchronization is complete */
	}

	/* Write the new comparator module control configuration */
	ac_module->CTRLA.reg = ctrla_temp;
    bf1a:	697b      	ldr	r3, [r7, #20]
    bf1c:	b2da      	uxtb	r2, r3
    bf1e:	68fb      	ldr	r3, [r7, #12]
    bf20:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    bf22:	2300      	movs	r3, #0
}
    bf24:	0018      	movs	r0, r3
    bf26:	46bd      	mov	sp, r7
    bf28:	b006      	add	sp, #24
    bf2a:	bd80      	pop	{r7, pc}
    bf2c:	0000bea5 	.word	0x0000bea5

0000bf30 <ac_init>:
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
    bf30:	b580      	push	{r7, lr}
    bf32:	b086      	sub	sp, #24
    bf34:	af00      	add	r7, sp, #0
    bf36:	60f8      	str	r0, [r7, #12]
    bf38:	60b9      	str	r1, [r7, #8]
    bf3a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = hw;
    bf3c:	68fb      	ldr	r3, [r7, #12]
    bf3e:	68ba      	ldr	r2, [r7, #8]
    bf40:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    bf42:	2314      	movs	r3, #20
    bf44:	18fb      	adds	r3, r7, r3
    bf46:	0018      	movs	r0, r3
    bf48:	4b2a      	ldr	r3, [pc, #168]	; (bff4 <ac_init+0xc4>)
    bf4a:	4798      	blx	r3

	if (hw == AC) {
    bf4c:	68bb      	ldr	r3, [r7, #8]
    bf4e:	4a2a      	ldr	r2, [pc, #168]	; (bff8 <ac_init+0xc8>)
    bf50:	4293      	cmp	r3, r2
    bf52:	d121      	bne.n	bf98 <ac_init+0x68>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
    bf54:	2380      	movs	r3, #128	; 0x80
    bf56:	029b      	lsls	r3, r3, #10
    bf58:	0019      	movs	r1, r3
    bf5a:	2002      	movs	r0, #2
    bf5c:	4b27      	ldr	r3, [pc, #156]	; (bffc <ac_init+0xcc>)
    bf5e:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->dig_source_generator;
    bf60:	687b      	ldr	r3, [r7, #4]
    bf62:	785a      	ldrb	r2, [r3, #1]
    bf64:	2314      	movs	r3, #20
    bf66:	18fb      	adds	r3, r7, r3
    bf68:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
    bf6a:	2314      	movs	r3, #20
    bf6c:	18fb      	adds	r3, r7, r3
    bf6e:	0019      	movs	r1, r3
    bf70:	201f      	movs	r0, #31
    bf72:	4b23      	ldr	r3, [pc, #140]	; (c000 <ac_init+0xd0>)
    bf74:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
    bf76:	201f      	movs	r0, #31
    bf78:	4b22      	ldr	r3, [pc, #136]	; (c004 <ac_init+0xd4>)
    bf7a:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
    bf7c:	687b      	ldr	r3, [r7, #4]
    bf7e:	789a      	ldrb	r2, [r3, #2]
    bf80:	2314      	movs	r3, #20
    bf82:	18fb      	adds	r3, r7, r3
    bf84:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
    bf86:	2314      	movs	r3, #20
    bf88:	18fb      	adds	r3, r7, r3
    bf8a:	0019      	movs	r1, r3
    bf8c:	2020      	movs	r0, #32
    bf8e:	4b1c      	ldr	r3, [pc, #112]	; (c000 <ac_init+0xd0>)
    bf90:	4798      	blx	r3
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
    bf92:	2020      	movs	r0, #32
    bf94:	4b1b      	ldr	r3, [pc, #108]	; (c004 <ac_init+0xd4>)
    bf96:	4798      	blx	r3
#  error This driver is not support more than three AC instances.
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
    bf98:	2317      	movs	r3, #23
    bf9a:	18fb      	adds	r3, r7, r3
    bf9c:	2200      	movs	r2, #0
    bf9e:	701a      	strb	r2, [r3, #0]
    bfa0:	e00f      	b.n	bfc2 <ac_init+0x92>
		module_inst->callback[i]        = NULL;
    bfa2:	2317      	movs	r3, #23
    bfa4:	18fb      	adds	r3, r7, r3
    bfa6:	781b      	ldrb	r3, [r3, #0]
    bfa8:	68fa      	ldr	r2, [r7, #12]
    bfaa:	009b      	lsls	r3, r3, #2
    bfac:	18d3      	adds	r3, r2, r3
    bfae:	3304      	adds	r3, #4
    bfb0:	2200      	movs	r2, #0
    bfb2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
    bfb4:	2317      	movs	r3, #23
    bfb6:	18fb      	adds	r3, r7, r3
    bfb8:	781a      	ldrb	r2, [r3, #0]
    bfba:	2317      	movs	r3, #23
    bfbc:	18fb      	adds	r3, r7, r3
    bfbe:	3201      	adds	r2, #1
    bfc0:	701a      	strb	r2, [r3, #0]
    bfc2:	2317      	movs	r3, #23
    bfc4:	18fb      	adds	r3, r7, r3
    bfc6:	781b      	ldrb	r3, [r3, #0]
    bfc8:	2b04      	cmp	r3, #4
    bfca:	d9ea      	bls.n	bfa2 <ac_init+0x72>
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
    bfcc:	68fb      	ldr	r3, [r7, #12]
    bfce:	2200      	movs	r2, #0
    bfd0:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask   = 0x00;
    bfd2:	68fb      	ldr	r3, [r7, #12]
    bfd4:	2200      	movs	r2, #0
    bfd6:	765a      	strb	r2, [r3, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
    bfd8:	4b0b      	ldr	r3, [pc, #44]	; (c008 <ac_init+0xd8>)
    bfda:	68fa      	ldr	r2, [r7, #12]
    bfdc:	601a      	str	r2, [r3, #0]
	_ac_instance[_ac_get_inst_index(hw)] = module_inst;
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
    bfde:	687a      	ldr	r2, [r7, #4]
    bfe0:	68fb      	ldr	r3, [r7, #12]
    bfe2:	0011      	movs	r1, r2
    bfe4:	0018      	movs	r0, r3
    bfe6:	4b09      	ldr	r3, [pc, #36]	; (c00c <ac_init+0xdc>)
    bfe8:	4798      	blx	r3
    bfea:	0003      	movs	r3, r0
}
    bfec:	0018      	movs	r0, r3
    bfee:	46bd      	mov	sp, r7
    bff0:	b006      	add	sp, #24
    bff2:	bd80      	pop	{r7, pc}
    bff4:	0000be31 	.word	0x0000be31
    bff8:	42004400 	.word	0x42004400
    bffc:	0000be49 	.word	0x0000be49
    c000:	0001392d 	.word	0x0001392d
    c004:	00013971 	.word	0x00013971
    c008:	20000934 	.word	0x20000934
    c00c:	0000becd 	.word	0x0000becd

0000c010 <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
    c010:	b580      	push	{r7, lr}
    c012:	b086      	sub	sp, #24
    c014:	af00      	add	r7, sp, #0
    c016:	60f8      	str	r0, [r7, #12]
    c018:	607a      	str	r2, [r7, #4]
    c01a:	230b      	movs	r3, #11
    c01c:	18fb      	adds	r3, r7, r3
    c01e:	1c0a      	adds	r2, r1, #0
    c020:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(config);

	Ac *const ac_module = module_inst->hw;
    c022:	68fb      	ldr	r3, [r7, #12]
    c024:	681b      	ldr	r3, [r3, #0]
    c026:	613b      	str	r3, [r7, #16]

	/* Use a temporary variable to compute the comparator configuration */
	uint32_t compctrl_temp = 0;
    c028:	2300      	movs	r3, #0
    c02a:	617b      	str	r3, [r7, #20]

	/* Enable output filter mode */
	compctrl_temp |= config->filter;
    c02c:	687b      	ldr	r3, [r7, #4]
    c02e:	685b      	ldr	r3, [r3, #4]
    c030:	697a      	ldr	r2, [r7, #20]
    c032:	4313      	orrs	r3, r2
    c034:	617b      	str	r3, [r7, #20]

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
    c036:	687b      	ldr	r3, [r7, #4]
    c038:	7a1b      	ldrb	r3, [r3, #8]
    c03a:	2b00      	cmp	r3, #0
    c03c:	d004      	beq.n	c048 <ac_chan_set_config+0x38>
		compctrl_temp |= AC_COMPCTRL_HYST;
    c03e:	697b      	ldr	r3, [r7, #20]
    c040:	2280      	movs	r2, #128	; 0x80
    c042:	0312      	lsls	r2, r2, #12
    c044:	4313      	orrs	r3, r2
    c046:	617b      	str	r3, [r7, #20]
	}

	/* Set output signal routing mode */
	compctrl_temp |= config->output_mode;
    c048:	687b      	ldr	r3, [r7, #4]
    c04a:	68db      	ldr	r3, [r3, #12]
    c04c:	697a      	ldr	r2, [r7, #20]
    c04e:	4313      	orrs	r3, r2
    c050:	617b      	str	r3, [r7, #20]

	/* Configure comparator positive and negative pin MUX configurations */
	compctrl_temp |=
			(uint32_t)config->positive_input |
    c052:	687b      	ldr	r3, [r7, #4]
    c054:	8a1a      	ldrh	r2, [r3, #16]
			(uint32_t)config->negative_input;
    c056:	687b      	ldr	r3, [r7, #4]
    c058:	8a5b      	ldrh	r3, [r3, #18]
			(uint32_t)config->positive_input |
    c05a:	4313      	orrs	r3, r2
    c05c:	b29b      	uxth	r3, r3
    c05e:	001a      	movs	r2, r3
	compctrl_temp |=
    c060:	697b      	ldr	r3, [r7, #20]
    c062:	4313      	orrs	r3, r2
    c064:	617b      	str	r3, [r7, #20]

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;
    c066:	687b      	ldr	r3, [r7, #4]
    c068:	781b      	ldrb	r3, [r3, #0]
    c06a:	001a      	movs	r2, r3
    c06c:	697b      	ldr	r3, [r7, #20]
    c06e:	4313      	orrs	r3, r2
    c070:	617b      	str	r3, [r7, #20]

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
    c072:	687b      	ldr	r3, [r7, #4]
    c074:	7d5b      	ldrb	r3, [r3, #21]
    c076:	001a      	movs	r2, r3
    c078:	697b      	ldr	r3, [r7, #20]
    c07a:	4313      	orrs	r3, r2
    c07c:	617b      	str	r3, [r7, #20]

	while (ac_is_syncing(module_inst)) {
    c07e:	46c0      	nop			; (mov r8, r8)
    c080:	68fb      	ldr	r3, [r7, #12]
    c082:	0018      	movs	r0, r3
    c084:	4b0e      	ldr	r3, [pc, #56]	; (c0c0 <ac_chan_set_config+0xb0>)
    c086:	4798      	blx	r3
    c088:	1e03      	subs	r3, r0, #0
    c08a:	d1f9      	bne.n	c080 <ac_chan_set_config+0x70>
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
    c08c:	230b      	movs	r3, #11
    c08e:	18fb      	adds	r3, r7, r3
    c090:	781a      	ldrb	r2, [r3, #0]
    c092:	693b      	ldr	r3, [r7, #16]
    c094:	3204      	adds	r2, #4
    c096:	0092      	lsls	r2, r2, #2
    c098:	6979      	ldr	r1, [r7, #20]
    c09a:	50d1      	str	r1, [r2, r3]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
    c09c:	230b      	movs	r3, #11
    c09e:	18fb      	adds	r3, r7, r3
    c0a0:	781b      	ldrb	r3, [r3, #0]
    c0a2:	687a      	ldr	r2, [r7, #4]
    c0a4:	7d12      	ldrb	r2, [r2, #20]
    c0a6:	3a01      	subs	r2, #1
    c0a8:	b2d0      	uxtb	r0, r2
    c0aa:	693a      	ldr	r2, [r7, #16]
    c0ac:	2120      	movs	r1, #32
    c0ae:	18d3      	adds	r3, r2, r3
    c0b0:	185b      	adds	r3, r3, r1
    c0b2:	1c02      	adds	r2, r0, #0
    c0b4:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    c0b6:	2300      	movs	r3, #0
}
    c0b8:	0018      	movs	r0, r3
    c0ba:	46bd      	mov	sp, r7
    c0bc:	b006      	add	sp, #24
    c0be:	bd80      	pop	{r7, pc}
    c0c0:	0000bea5 	.word	0x0000bea5

0000c0c4 <system_gclk_chan_get_config_defaults>:
{
    c0c4:	b580      	push	{r7, lr}
    c0c6:	b082      	sub	sp, #8
    c0c8:	af00      	add	r7, sp, #0
    c0ca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    c0cc:	687b      	ldr	r3, [r7, #4]
    c0ce:	2200      	movs	r2, #0
    c0d0:	701a      	strb	r2, [r3, #0]
}
    c0d2:	46c0      	nop			; (mov r8, r8)
    c0d4:	46bd      	mov	sp, r7
    c0d6:	b002      	add	sp, #8
    c0d8:	bd80      	pop	{r7, pc}
	...

0000c0dc <system_apb_clock_set_mask>:
{
    c0dc:	b580      	push	{r7, lr}
    c0de:	b082      	sub	sp, #8
    c0e0:	af00      	add	r7, sp, #0
    c0e2:	0002      	movs	r2, r0
    c0e4:	6039      	str	r1, [r7, #0]
    c0e6:	1dfb      	adds	r3, r7, #7
    c0e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c0ea:	1dfb      	adds	r3, r7, #7
    c0ec:	781b      	ldrb	r3, [r3, #0]
    c0ee:	2b01      	cmp	r3, #1
    c0f0:	d00a      	beq.n	c108 <system_apb_clock_set_mask+0x2c>
    c0f2:	2b02      	cmp	r3, #2
    c0f4:	d00f      	beq.n	c116 <system_apb_clock_set_mask+0x3a>
    c0f6:	2b00      	cmp	r3, #0
    c0f8:	d114      	bne.n	c124 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    c0fa:	4b0e      	ldr	r3, [pc, #56]	; (c134 <system_apb_clock_set_mask+0x58>)
    c0fc:	4a0d      	ldr	r2, [pc, #52]	; (c134 <system_apb_clock_set_mask+0x58>)
    c0fe:	6991      	ldr	r1, [r2, #24]
    c100:	683a      	ldr	r2, [r7, #0]
    c102:	430a      	orrs	r2, r1
    c104:	619a      	str	r2, [r3, #24]
			break;
    c106:	e00f      	b.n	c128 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    c108:	4b0a      	ldr	r3, [pc, #40]	; (c134 <system_apb_clock_set_mask+0x58>)
    c10a:	4a0a      	ldr	r2, [pc, #40]	; (c134 <system_apb_clock_set_mask+0x58>)
    c10c:	69d1      	ldr	r1, [r2, #28]
    c10e:	683a      	ldr	r2, [r7, #0]
    c110:	430a      	orrs	r2, r1
    c112:	61da      	str	r2, [r3, #28]
			break;
    c114:	e008      	b.n	c128 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    c116:	4b07      	ldr	r3, [pc, #28]	; (c134 <system_apb_clock_set_mask+0x58>)
    c118:	4a06      	ldr	r2, [pc, #24]	; (c134 <system_apb_clock_set_mask+0x58>)
    c11a:	6a11      	ldr	r1, [r2, #32]
    c11c:	683a      	ldr	r2, [r7, #0]
    c11e:	430a      	orrs	r2, r1
    c120:	621a      	str	r2, [r3, #32]
			break;
    c122:	e001      	b.n	c128 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    c124:	2317      	movs	r3, #23
    c126:	e000      	b.n	c12a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    c128:	2300      	movs	r3, #0
}
    c12a:	0018      	movs	r0, r3
    c12c:	46bd      	mov	sp, r7
    c12e:	b002      	add	sp, #8
    c130:	bd80      	pop	{r7, pc}
    c132:	46c0      	nop			; (mov r8, r8)
    c134:	40000400 	.word	0x40000400

0000c138 <system_pinmux_get_config_defaults>:
{
    c138:	b580      	push	{r7, lr}
    c13a:	b082      	sub	sp, #8
    c13c:	af00      	add	r7, sp, #0
    c13e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    c140:	687b      	ldr	r3, [r7, #4]
    c142:	2280      	movs	r2, #128	; 0x80
    c144:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c146:	687b      	ldr	r3, [r7, #4]
    c148:	2200      	movs	r2, #0
    c14a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c14c:	687b      	ldr	r3, [r7, #4]
    c14e:	2201      	movs	r2, #1
    c150:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    c152:	687b      	ldr	r3, [r7, #4]
    c154:	2200      	movs	r2, #0
    c156:	70da      	strb	r2, [r3, #3]
}
    c158:	46c0      	nop			; (mov r8, r8)
    c15a:	46bd      	mov	sp, r7
    c15c:	b002      	add	sp, #8
    c15e:	bd80      	pop	{r7, pc}

0000c160 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    c160:	b580      	push	{r7, lr}
    c162:	b082      	sub	sp, #8
    c164:	af00      	add	r7, sp, #0
    c166:	0002      	movs	r2, r0
    c168:	1dfb      	adds	r3, r7, #7
    c16a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    c16c:	1dfb      	adds	r3, r7, #7
    c16e:	781b      	ldrb	r3, [r3, #0]
    c170:	2b00      	cmp	r3, #0
    c172:	d002      	beq.n	c17a <system_voltage_reference_enable+0x1a>
    c174:	2b01      	cmp	r3, #1
    c176:	d007      	beq.n	c188 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    c178:	e00d      	b.n	c196 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    c17a:	4b08      	ldr	r3, [pc, #32]	; (c19c <system_voltage_reference_enable+0x3c>)
    c17c:	4a07      	ldr	r2, [pc, #28]	; (c19c <system_voltage_reference_enable+0x3c>)
    c17e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    c180:	2102      	movs	r1, #2
    c182:	430a      	orrs	r2, r1
    c184:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    c186:	e006      	b.n	c196 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    c188:	4b04      	ldr	r3, [pc, #16]	; (c19c <system_voltage_reference_enable+0x3c>)
    c18a:	4a04      	ldr	r2, [pc, #16]	; (c19c <system_voltage_reference_enable+0x3c>)
    c18c:	6c12      	ldr	r2, [r2, #64]	; 0x40
    c18e:	2104      	movs	r1, #4
    c190:	430a      	orrs	r2, r1
    c192:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    c194:	46c0      	nop			; (mov r8, r8)
	}
}
    c196:	46bd      	mov	sp, r7
    c198:	b002      	add	sp, #8
    c19a:	bd80      	pop	{r7, pc}
    c19c:	40000800 	.word	0x40000800

0000c1a0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    c1a0:	b580      	push	{r7, lr}
    c1a2:	b084      	sub	sp, #16
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    c1a8:	687b      	ldr	r3, [r7, #4]
    c1aa:	681b      	ldr	r3, [r3, #0]
    c1ac:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    c1ae:	68fb      	ldr	r3, [r7, #12]
    c1b0:	7e5b      	ldrb	r3, [r3, #25]
    c1b2:	b2db      	uxtb	r3, r3
    c1b4:	b25b      	sxtb	r3, r3
    c1b6:	2b00      	cmp	r3, #0
    c1b8:	da01      	bge.n	c1be <adc_is_syncing+0x1e>
		return true;
    c1ba:	2301      	movs	r3, #1
    c1bc:	e000      	b.n	c1c0 <adc_is_syncing+0x20>
	}

	return false;
    c1be:	2300      	movs	r3, #0
}
    c1c0:	0018      	movs	r0, r3
    c1c2:	46bd      	mov	sp, r7
    c1c4:	b004      	add	sp, #16
    c1c6:	bd80      	pop	{r7, pc}

0000c1c8 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    c1c8:	b580      	push	{r7, lr}
    c1ca:	b082      	sub	sp, #8
    c1cc:	af00      	add	r7, sp, #0
    c1ce:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    c1d0:	687b      	ldr	r3, [r7, #4]
    c1d2:	2200      	movs	r2, #0
    c1d4:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    c1d6:	687b      	ldr	r3, [r7, #4]
    c1d8:	2200      	movs	r2, #0
    c1da:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    c1dc:	687b      	ldr	r3, [r7, #4]
    c1de:	2200      	movs	r2, #0
    c1e0:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    c1e2:	687b      	ldr	r3, [r7, #4]
    c1e4:	2200      	movs	r2, #0
    c1e6:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    c1e8:	687b      	ldr	r3, [r7, #4]
    c1ea:	2200      	movs	r2, #0
    c1ec:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    c1ee:	687b      	ldr	r3, [r7, #4]
    c1f0:	2200      	movs	r2, #0
    c1f2:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    c1f4:	687b      	ldr	r3, [r7, #4]
    c1f6:	2200      	movs	r2, #0
    c1f8:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    c1fa:	687b      	ldr	r3, [r7, #4]
    c1fc:	2200      	movs	r2, #0
    c1fe:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    c200:	687b      	ldr	r3, [r7, #4]
    c202:	2200      	movs	r2, #0
    c204:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    c206:	687b      	ldr	r3, [r7, #4]
    c208:	22c0      	movs	r2, #192	; 0xc0
    c20a:	0152      	lsls	r2, r2, #5
    c20c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    c20e:	687b      	ldr	r3, [r7, #4]
    c210:	2200      	movs	r2, #0
    c212:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    c214:	687b      	ldr	r3, [r7, #4]
    c216:	2200      	movs	r2, #0
    c218:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    c21a:	687b      	ldr	r3, [r7, #4]
    c21c:	2200      	movs	r2, #0
    c21e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    c220:	687b      	ldr	r3, [r7, #4]
    c222:	2200      	movs	r2, #0
    c224:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    c226:	687b      	ldr	r3, [r7, #4]
    c228:	2200      	movs	r2, #0
    c22a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    c22c:	687b      	ldr	r3, [r7, #4]
    c22e:	222a      	movs	r2, #42	; 0x2a
    c230:	2100      	movs	r1, #0
    c232:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    c234:	687b      	ldr	r3, [r7, #4]
    c236:	2200      	movs	r2, #0
    c238:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    c23a:	687b      	ldr	r3, [r7, #4]
    c23c:	2200      	movs	r2, #0
    c23e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    c240:	687b      	ldr	r3, [r7, #4]
    c242:	2224      	movs	r2, #36	; 0x24
    c244:	2100      	movs	r1, #0
    c246:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    c248:	687b      	ldr	r3, [r7, #4]
    c24a:	2200      	movs	r2, #0
    c24c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    c24e:	687b      	ldr	r3, [r7, #4]
    c250:	2200      	movs	r2, #0
    c252:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    c254:	687b      	ldr	r3, [r7, #4]
    c256:	2200      	movs	r2, #0
    c258:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    c25a:	687b      	ldr	r3, [r7, #4]
    c25c:	222b      	movs	r2, #43	; 0x2b
    c25e:	2100      	movs	r1, #0
    c260:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    c262:	687b      	ldr	r3, [r7, #4]
    c264:	222c      	movs	r2, #44	; 0x2c
    c266:	2100      	movs	r1, #0
    c268:	5499      	strb	r1, [r3, r2]
}
    c26a:	46c0      	nop			; (mov r8, r8)
    c26c:	46bd      	mov	sp, r7
    c26e:	b002      	add	sp, #8
    c270:	bd80      	pop	{r7, pc}
	...

0000c274 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    c274:	b580      	push	{r7, lr}
    c276:	b098      	sub	sp, #96	; 0x60
    c278:	af00      	add	r7, sp, #0
    c27a:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    c27c:	230c      	movs	r3, #12
    c27e:	18fa      	adds	r2, r7, r3
    c280:	4b15      	ldr	r3, [pc, #84]	; (c2d8 <_adc_configure_ain_pin+0x64>)
    c282:	0010      	movs	r0, r2
    c284:	0019      	movs	r1, r3
    c286:	2350      	movs	r3, #80	; 0x50
    c288:	001a      	movs	r2, r3
    c28a:	4b14      	ldr	r3, [pc, #80]	; (c2dc <_adc_configure_ain_pin+0x68>)
    c28c:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    c28e:	4b14      	ldr	r3, [pc, #80]	; (c2e0 <_adc_configure_ain_pin+0x6c>)
    c290:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    c292:	687b      	ldr	r3, [r7, #4]
    c294:	2b13      	cmp	r3, #19
    c296:	d81a      	bhi.n	c2ce <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    c298:	230c      	movs	r3, #12
    c29a:	18fb      	adds	r3, r7, r3
    c29c:	687a      	ldr	r2, [r7, #4]
    c29e:	0092      	lsls	r2, r2, #2
    c2a0:	58d3      	ldr	r3, [r2, r3]
    c2a2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    c2a4:	2308      	movs	r3, #8
    c2a6:	18fb      	adds	r3, r7, r3
    c2a8:	0018      	movs	r0, r3
    c2aa:	4b0e      	ldr	r3, [pc, #56]	; (c2e4 <_adc_configure_ain_pin+0x70>)
    c2ac:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    c2ae:	2308      	movs	r3, #8
    c2b0:	18fb      	adds	r3, r7, r3
    c2b2:	2200      	movs	r2, #0
    c2b4:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    c2b6:	2308      	movs	r3, #8
    c2b8:	18fb      	adds	r3, r7, r3
    c2ba:	2201      	movs	r2, #1
    c2bc:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    c2be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c2c0:	b2db      	uxtb	r3, r3
    c2c2:	2208      	movs	r2, #8
    c2c4:	18ba      	adds	r2, r7, r2
    c2c6:	0011      	movs	r1, r2
    c2c8:	0018      	movs	r0, r3
    c2ca:	4b07      	ldr	r3, [pc, #28]	; (c2e8 <_adc_configure_ain_pin+0x74>)
    c2cc:	4798      	blx	r3
	}
}
    c2ce:	46c0      	nop			; (mov r8, r8)
    c2d0:	46bd      	mov	sp, r7
    c2d2:	b018      	add	sp, #96	; 0x60
    c2d4:	bd80      	pop	{r7, pc}
    c2d6:	46c0      	nop			; (mov r8, r8)
    c2d8:	00019724 	.word	0x00019724
    c2dc:	00017ca1 	.word	0x00017ca1
    c2e0:	0000ffff 	.word	0x0000ffff
    c2e4:	0000c139 	.word	0x0000c139
    c2e8:	00013c19 	.word	0x00013c19

0000c2ec <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    c2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2ee:	b089      	sub	sp, #36	; 0x24
    c2f0:	af00      	add	r7, sp, #0
    c2f2:	6078      	str	r0, [r7, #4]
    c2f4:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    c2f6:	231f      	movs	r3, #31
    c2f8:	18fb      	adds	r3, r7, r3
    c2fa:	2200      	movs	r2, #0
    c2fc:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    c2fe:	2310      	movs	r3, #16
    c300:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    c302:	2317      	movs	r3, #23
    c304:	18fb      	adds	r3, r7, r3
    c306:	2200      	movs	r2, #0
    c308:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    c30a:	687b      	ldr	r3, [r7, #4]
    c30c:	681b      	ldr	r3, [r3, #0]
    c30e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    c310:	230c      	movs	r3, #12
    c312:	18fb      	adds	r3, r7, r3
    c314:	0018      	movs	r0, r3
    c316:	4bce      	ldr	r3, [pc, #824]	; (c650 <_adc_set_config+0x364>)
    c318:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    c31a:	683b      	ldr	r3, [r7, #0]
    c31c:	781a      	ldrb	r2, [r3, #0]
    c31e:	230c      	movs	r3, #12
    c320:	18fb      	adds	r3, r7, r3
    c322:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    c324:	230c      	movs	r3, #12
    c326:	18fb      	adds	r3, r7, r3
    c328:	0019      	movs	r1, r3
    c32a:	201e      	movs	r0, #30
    c32c:	4bc9      	ldr	r3, [pc, #804]	; (c654 <_adc_set_config+0x368>)
    c32e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    c330:	201e      	movs	r0, #30
    c332:	4bc9      	ldr	r3, [pc, #804]	; (c658 <_adc_set_config+0x36c>)
    c334:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    c336:	683b      	ldr	r3, [r7, #0]
    c338:	222c      	movs	r2, #44	; 0x2c
    c33a:	5c9b      	ldrb	r3, [r3, r2]
    c33c:	2b00      	cmp	r3, #0
    c33e:	d040      	beq.n	c3c2 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    c340:	2316      	movs	r3, #22
    c342:	18fb      	adds	r3, r7, r3
    c344:	683a      	ldr	r2, [r7, #0]
    c346:	212b      	movs	r1, #43	; 0x2b
    c348:	5c52      	ldrb	r2, [r2, r1]
    c34a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    c34c:	683b      	ldr	r3, [r7, #0]
    c34e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
    c350:	2315      	movs	r3, #21
    c352:	18fb      	adds	r3, r7, r3
    c354:	2216      	movs	r2, #22
    c356:	18ba      	adds	r2, r7, r2
    c358:	7812      	ldrb	r2, [r2, #0]
    c35a:	188a      	adds	r2, r1, r2
    c35c:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    c35e:	683b      	ldr	r3, [r7, #0]
    c360:	222c      	movs	r2, #44	; 0x2c
    c362:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
    c364:	230f      	movs	r3, #15
    c366:	18fb      	adds	r3, r7, r3
    c368:	2215      	movs	r2, #21
    c36a:	18ba      	adds	r2, r7, r2
    c36c:	7812      	ldrb	r2, [r2, #0]
    c36e:	188a      	adds	r2, r1, r2
    c370:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
    c372:	e018      	b.n	c3a6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    c374:	2316      	movs	r3, #22
    c376:	18fb      	adds	r3, r7, r3
    c378:	781b      	ldrb	r3, [r3, #0]
    c37a:	220f      	movs	r2, #15
    c37c:	4013      	ands	r3, r2
    c37e:	683a      	ldr	r2, [r7, #0]
    c380:	7b12      	ldrb	r2, [r2, #12]
    c382:	189b      	adds	r3, r3, r2
    c384:	0018      	movs	r0, r3
    c386:	4bb5      	ldr	r3, [pc, #724]	; (c65c <_adc_set_config+0x370>)
    c388:	4798      	blx	r3
			start_pin++;
    c38a:	2315      	movs	r3, #21
    c38c:	18fb      	adds	r3, r7, r3
    c38e:	781a      	ldrb	r2, [r3, #0]
    c390:	2315      	movs	r3, #21
    c392:	18fb      	adds	r3, r7, r3
    c394:	3201      	adds	r2, #1
    c396:	701a      	strb	r2, [r3, #0]
			offset++;
    c398:	2316      	movs	r3, #22
    c39a:	18fb      	adds	r3, r7, r3
    c39c:	781a      	ldrb	r2, [r3, #0]
    c39e:	2316      	movs	r3, #22
    c3a0:	18fb      	adds	r3, r7, r3
    c3a2:	3201      	adds	r2, #1
    c3a4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
    c3a6:	2315      	movs	r3, #21
    c3a8:	18fa      	adds	r2, r7, r3
    c3aa:	230f      	movs	r3, #15
    c3ac:	18fb      	adds	r3, r7, r3
    c3ae:	7812      	ldrb	r2, [r2, #0]
    c3b0:	781b      	ldrb	r3, [r3, #0]
    c3b2:	429a      	cmp	r2, r3
    c3b4:	d3de      	bcc.n	c374 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
    c3b6:	683b      	ldr	r3, [r7, #0]
    c3b8:	89db      	ldrh	r3, [r3, #14]
    c3ba:	0018      	movs	r0, r3
    c3bc:	4ba7      	ldr	r3, [pc, #668]	; (c65c <_adc_set_config+0x370>)
    c3be:	4798      	blx	r3
    c3c0:	e009      	b.n	c3d6 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    c3c2:	683b      	ldr	r3, [r7, #0]
    c3c4:	7b1b      	ldrb	r3, [r3, #12]
    c3c6:	0018      	movs	r0, r3
    c3c8:	4ba4      	ldr	r3, [pc, #656]	; (c65c <_adc_set_config+0x370>)
    c3ca:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    c3cc:	683b      	ldr	r3, [r7, #0]
    c3ce:	89db      	ldrh	r3, [r3, #14]
    c3d0:	0018      	movs	r0, r3
    c3d2:	4ba2      	ldr	r3, [pc, #648]	; (c65c <_adc_set_config+0x370>)
    c3d4:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    c3d6:	683b      	ldr	r3, [r7, #0]
    c3d8:	7d5b      	ldrb	r3, [r3, #21]
    c3da:	009b      	lsls	r3, r3, #2
    c3dc:	b2da      	uxtb	r2, r3
    c3de:	693b      	ldr	r3, [r7, #16]
    c3e0:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    c3e2:	683b      	ldr	r3, [r7, #0]
    c3e4:	7d9b      	ldrb	r3, [r3, #22]
    c3e6:	01db      	lsls	r3, r3, #7
    c3e8:	b25a      	sxtb	r2, r3
			(config->reference);
    c3ea:	683b      	ldr	r3, [r7, #0]
    c3ec:	785b      	ldrb	r3, [r3, #1]
    c3ee:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    c3f0:	4313      	orrs	r3, r2
    c3f2:	b25b      	sxtb	r3, r3
    c3f4:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
    c3f6:	693b      	ldr	r3, [r7, #16]
    c3f8:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    c3fa:	683b      	ldr	r3, [r7, #0]
    c3fc:	791b      	ldrb	r3, [r3, #4]
    c3fe:	2b34      	cmp	r3, #52	; 0x34
    c400:	d846      	bhi.n	c490 <_adc_set_config+0x1a4>
    c402:	009a      	lsls	r2, r3, #2
    c404:	4b96      	ldr	r3, [pc, #600]	; (c660 <_adc_set_config+0x374>)
    c406:	18d3      	adds	r3, r2, r3
    c408:	681b      	ldr	r3, [r3, #0]
    c40a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    c40c:	231f      	movs	r3, #31
    c40e:	18fb      	adds	r3, r7, r3
    c410:	683a      	ldr	r2, [r7, #0]
    c412:	7c52      	ldrb	r2, [r2, #17]
    c414:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    c416:	2317      	movs	r3, #23
    c418:	18fb      	adds	r3, r7, r3
    c41a:	683a      	ldr	r2, [r7, #0]
    c41c:	7c12      	ldrb	r2, [r2, #16]
    c41e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c420:	2310      	movs	r3, #16
    c422:	61bb      	str	r3, [r7, #24]
		break;
    c424:	e036      	b.n	c494 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    c426:	231f      	movs	r3, #31
    c428:	18fb      	adds	r3, r7, r3
    c42a:	2201      	movs	r2, #1
    c42c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    c42e:	2317      	movs	r3, #23
    c430:	18fb      	adds	r3, r7, r3
    c432:	2202      	movs	r2, #2
    c434:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c436:	2310      	movs	r3, #16
    c438:	61bb      	str	r3, [r7, #24]
		break;
    c43a:	e02b      	b.n	c494 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    c43c:	231f      	movs	r3, #31
    c43e:	18fb      	adds	r3, r7, r3
    c440:	2202      	movs	r2, #2
    c442:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    c444:	2317      	movs	r3, #23
    c446:	18fb      	adds	r3, r7, r3
    c448:	2204      	movs	r2, #4
    c44a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c44c:	2310      	movs	r3, #16
    c44e:	61bb      	str	r3, [r7, #24]
		break;
    c450:	e020      	b.n	c494 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    c452:	231f      	movs	r3, #31
    c454:	18fb      	adds	r3, r7, r3
    c456:	2201      	movs	r2, #1
    c458:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    c45a:	2317      	movs	r3, #23
    c45c:	18fb      	adds	r3, r7, r3
    c45e:	2206      	movs	r2, #6
    c460:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c462:	2310      	movs	r3, #16
    c464:	61bb      	str	r3, [r7, #24]
		break;
    c466:	e015      	b.n	c494 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    c468:	231f      	movs	r3, #31
    c46a:	18fb      	adds	r3, r7, r3
    c46c:	2200      	movs	r2, #0
    c46e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    c470:	2317      	movs	r3, #23
    c472:	18fb      	adds	r3, r7, r3
    c474:	2208      	movs	r2, #8
    c476:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    c478:	2310      	movs	r3, #16
    c47a:	61bb      	str	r3, [r7, #24]
		break;
    c47c:	e00a      	b.n	c494 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    c47e:	2330      	movs	r3, #48	; 0x30
    c480:	61bb      	str	r3, [r7, #24]
		break;
    c482:	e007      	b.n	c494 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    c484:	2320      	movs	r3, #32
    c486:	61bb      	str	r3, [r7, #24]
		break;
    c488:	e004      	b.n	c494 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    c48a:	2300      	movs	r3, #0
    c48c:	61bb      	str	r3, [r7, #24]
		break;
    c48e:	e001      	b.n	c494 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    c490:	2317      	movs	r3, #23
    c492:	e1ae      	b.n	c7f2 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    c494:	231f      	movs	r3, #31
    c496:	18fb      	adds	r3, r7, r3
    c498:	781b      	ldrb	r3, [r3, #0]
    c49a:	011b      	lsls	r3, r3, #4
    c49c:	b2db      	uxtb	r3, r3
    c49e:	2270      	movs	r2, #112	; 0x70
    c4a0:	4013      	ands	r3, r2
    c4a2:	b2da      	uxtb	r2, r3
    c4a4:	2317      	movs	r3, #23
    c4a6:	18fb      	adds	r3, r7, r3
    c4a8:	781b      	ldrb	r3, [r3, #0]
    c4aa:	4313      	orrs	r3, r2
    c4ac:	b2da      	uxtb	r2, r3
    c4ae:	693b      	ldr	r3, [r7, #16]
    c4b0:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    c4b2:	683b      	ldr	r3, [r7, #0]
    c4b4:	7ddb      	ldrb	r3, [r3, #23]
    c4b6:	2b3f      	cmp	r3, #63	; 0x3f
    c4b8:	d901      	bls.n	c4be <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    c4ba:	2317      	movs	r3, #23
    c4bc:	e199      	b.n	c7f2 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    c4be:	683b      	ldr	r3, [r7, #0]
    c4c0:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
    c4c2:	693b      	ldr	r3, [r7, #16]
    c4c4:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
    c4c6:	46c0      	nop			; (mov r8, r8)
    c4c8:	687b      	ldr	r3, [r7, #4]
    c4ca:	0018      	movs	r0, r3
    c4cc:	4b65      	ldr	r3, [pc, #404]	; (c664 <_adc_set_config+0x378>)
    c4ce:	4798      	blx	r3
    c4d0:	1e03      	subs	r3, r0, #0
    c4d2:	d1f9      	bne.n	c4c8 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    c4d4:	683b      	ldr	r3, [r7, #0]
    c4d6:	885a      	ldrh	r2, [r3, #2]
    c4d8:	69bb      	ldr	r3, [r7, #24]
    c4da:	b29b      	uxth	r3, r3
    c4dc:	4313      	orrs	r3, r2
    c4de:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    c4e0:	683b      	ldr	r3, [r7, #0]
    c4e2:	2124      	movs	r1, #36	; 0x24
    c4e4:	5c5b      	ldrb	r3, [r3, r1]
    c4e6:	b29b      	uxth	r3, r3
    c4e8:	00db      	lsls	r3, r3, #3
    c4ea:	b29b      	uxth	r3, r3
			resolution |
    c4ec:	4313      	orrs	r3, r2
    c4ee:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    c4f0:	683b      	ldr	r3, [r7, #0]
    c4f2:	7d1b      	ldrb	r3, [r3, #20]
    c4f4:	b29b      	uxth	r3, r3
    c4f6:	009b      	lsls	r3, r3, #2
    c4f8:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    c4fa:	4313      	orrs	r3, r2
    c4fc:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    c4fe:	683b      	ldr	r3, [r7, #0]
    c500:	7c9b      	ldrb	r3, [r3, #18]
    c502:	b29b      	uxth	r3, r3
    c504:	18db      	adds	r3, r3, r3
    c506:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    c508:	4313      	orrs	r3, r2
    c50a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    c50c:	683b      	ldr	r3, [r7, #0]
    c50e:	7cdb      	ldrb	r3, [r3, #19]
    c510:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    c512:	4313      	orrs	r3, r2
    c514:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
    c516:	693b      	ldr	r3, [r7, #16]
    c518:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    c51a:	683b      	ldr	r3, [r7, #0]
    c51c:	7e1b      	ldrb	r3, [r3, #24]
    c51e:	2b00      	cmp	r3, #0
    c520:	d100      	bne.n	c524 <_adc_set_config+0x238>
    c522:	e0c4      	b.n	c6ae <_adc_set_config+0x3c2>
		switch (resolution) {
    c524:	69bb      	ldr	r3, [r7, #24]
    c526:	2b10      	cmp	r3, #16
    c528:	d100      	bne.n	c52c <_adc_set_config+0x240>
    c52a:	e076      	b.n	c61a <_adc_set_config+0x32e>
    c52c:	d802      	bhi.n	c534 <_adc_set_config+0x248>
    c52e:	2b00      	cmp	r3, #0
    c530:	d04d      	beq.n	c5ce <_adc_set_config+0x2e2>
    c532:	e0bc      	b.n	c6ae <_adc_set_config+0x3c2>
    c534:	2b20      	cmp	r3, #32
    c536:	d023      	beq.n	c580 <_adc_set_config+0x294>
    c538:	2b30      	cmp	r3, #48	; 0x30
    c53a:	d000      	beq.n	c53e <_adc_set_config+0x252>
    c53c:	e0b7      	b.n	c6ae <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    c53e:	683b      	ldr	r3, [r7, #0]
    c540:	7cdb      	ldrb	r3, [r3, #19]
    c542:	2b00      	cmp	r3, #0
    c544:	d011      	beq.n	c56a <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    c546:	683b      	ldr	r3, [r7, #0]
    c548:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c54a:	2b7f      	cmp	r3, #127	; 0x7f
    c54c:	dc0b      	bgt.n	c566 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
    c54e:	683b      	ldr	r3, [r7, #0]
    c550:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
    c552:	3380      	adds	r3, #128	; 0x80
    c554:	db07      	blt.n	c566 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
    c556:	683b      	ldr	r3, [r7, #0]
    c558:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
    c55a:	2b7f      	cmp	r3, #127	; 0x7f
    c55c:	dc03      	bgt.n	c566 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
    c55e:	683b      	ldr	r3, [r7, #0]
    c560:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
    c562:	3380      	adds	r3, #128	; 0x80
    c564:	da01      	bge.n	c56a <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c566:	2317      	movs	r3, #23
    c568:	e143      	b.n	c7f2 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    c56a:	683b      	ldr	r3, [r7, #0]
    c56c:	69db      	ldr	r3, [r3, #28]
    c56e:	2bff      	cmp	r3, #255	; 0xff
    c570:	dc04      	bgt.n	c57c <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    c572:	683b      	ldr	r3, [r7, #0]
    c574:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
    c576:	2bff      	cmp	r3, #255	; 0xff
    c578:	dc00      	bgt.n	c57c <_adc_set_config+0x290>
    c57a:	e091      	b.n	c6a0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c57c:	2317      	movs	r3, #23
    c57e:	e138      	b.n	c7f2 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    c580:	683b      	ldr	r3, [r7, #0]
    c582:	7cdb      	ldrb	r3, [r3, #19]
    c584:	2b00      	cmp	r3, #0
    c586:	d015      	beq.n	c5b4 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    c588:	683b      	ldr	r3, [r7, #0]
    c58a:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c58c:	4a36      	ldr	r2, [pc, #216]	; (c668 <_adc_set_config+0x37c>)
    c58e:	4293      	cmp	r3, r2
    c590:	dc0e      	bgt.n	c5b0 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
    c592:	683b      	ldr	r3, [r7, #0]
    c594:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
    c596:	4a35      	ldr	r2, [pc, #212]	; (c66c <_adc_set_config+0x380>)
    c598:	4293      	cmp	r3, r2
    c59a:	db09      	blt.n	c5b0 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
    c59c:	683b      	ldr	r3, [r7, #0]
    c59e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
    c5a0:	4a31      	ldr	r2, [pc, #196]	; (c668 <_adc_set_config+0x37c>)
    c5a2:	4293      	cmp	r3, r2
    c5a4:	dc04      	bgt.n	c5b0 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
    c5a6:	683b      	ldr	r3, [r7, #0]
    c5a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
    c5aa:	4a30      	ldr	r2, [pc, #192]	; (c66c <_adc_set_config+0x380>)
    c5ac:	4293      	cmp	r3, r2
    c5ae:	da01      	bge.n	c5b4 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c5b0:	2317      	movs	r3, #23
    c5b2:	e11e      	b.n	c7f2 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    c5b4:	683b      	ldr	r3, [r7, #0]
    c5b6:	69db      	ldr	r3, [r3, #28]
    c5b8:	4a2d      	ldr	r2, [pc, #180]	; (c670 <_adc_set_config+0x384>)
    c5ba:	4293      	cmp	r3, r2
    c5bc:	dc05      	bgt.n	c5ca <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    c5be:	683b      	ldr	r3, [r7, #0]
    c5c0:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
    c5c2:	4a2b      	ldr	r2, [pc, #172]	; (c670 <_adc_set_config+0x384>)
    c5c4:	4293      	cmp	r3, r2
    c5c6:	dc00      	bgt.n	c5ca <_adc_set_config+0x2de>
    c5c8:	e06c      	b.n	c6a4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c5ca:	2317      	movs	r3, #23
    c5cc:	e111      	b.n	c7f2 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    c5ce:	683b      	ldr	r3, [r7, #0]
    c5d0:	7cdb      	ldrb	r3, [r3, #19]
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d015      	beq.n	c602 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    c5d6:	683b      	ldr	r3, [r7, #0]
    c5d8:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c5da:	4a26      	ldr	r2, [pc, #152]	; (c674 <_adc_set_config+0x388>)
    c5dc:	4293      	cmp	r3, r2
    c5de:	dc0e      	bgt.n	c5fe <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
    c5e0:	683b      	ldr	r3, [r7, #0]
    c5e2:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
    c5e4:	4a24      	ldr	r2, [pc, #144]	; (c678 <_adc_set_config+0x38c>)
    c5e6:	4293      	cmp	r3, r2
    c5e8:	db09      	blt.n	c5fe <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
    c5ea:	683b      	ldr	r3, [r7, #0]
    c5ec:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
    c5ee:	4a21      	ldr	r2, [pc, #132]	; (c674 <_adc_set_config+0x388>)
    c5f0:	4293      	cmp	r3, r2
    c5f2:	dc04      	bgt.n	c5fe <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
    c5f4:	683b      	ldr	r3, [r7, #0]
    c5f6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
    c5f8:	4a1f      	ldr	r2, [pc, #124]	; (c678 <_adc_set_config+0x38c>)
    c5fa:	4293      	cmp	r3, r2
    c5fc:	da01      	bge.n	c602 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c5fe:	2317      	movs	r3, #23
    c600:	e0f7      	b.n	c7f2 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    c602:	683b      	ldr	r3, [r7, #0]
    c604:	69db      	ldr	r3, [r3, #28]
    c606:	4a1d      	ldr	r2, [pc, #116]	; (c67c <_adc_set_config+0x390>)
    c608:	4293      	cmp	r3, r2
    c60a:	dc04      	bgt.n	c616 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    c60c:	683b      	ldr	r3, [r7, #0]
    c60e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
    c610:	4a1a      	ldr	r2, [pc, #104]	; (c67c <_adc_set_config+0x390>)
    c612:	4293      	cmp	r3, r2
    c614:	dd48      	ble.n	c6a8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c616:	2317      	movs	r3, #23
    c618:	e0eb      	b.n	c7f2 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    c61a:	683b      	ldr	r3, [r7, #0]
    c61c:	7cdb      	ldrb	r3, [r3, #19]
    c61e:	2b00      	cmp	r3, #0
    c620:	d032      	beq.n	c688 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    c622:	683b      	ldr	r3, [r7, #0]
    c624:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
    c626:	4a16      	ldr	r2, [pc, #88]	; (c680 <_adc_set_config+0x394>)
    c628:	4293      	cmp	r3, r2
    c62a:	dc0e      	bgt.n	c64a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
    c62c:	683b      	ldr	r3, [r7, #0]
    c62e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
    c630:	4a14      	ldr	r2, [pc, #80]	; (c684 <_adc_set_config+0x398>)
    c632:	4293      	cmp	r3, r2
    c634:	db09      	blt.n	c64a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
    c636:	683b      	ldr	r3, [r7, #0]
    c638:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
    c63a:	4a11      	ldr	r2, [pc, #68]	; (c680 <_adc_set_config+0x394>)
    c63c:	4293      	cmp	r3, r2
    c63e:	dc04      	bgt.n	c64a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
    c640:	683b      	ldr	r3, [r7, #0]
    c642:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
    c644:	4a0f      	ldr	r2, [pc, #60]	; (c684 <_adc_set_config+0x398>)
    c646:	4293      	cmp	r3, r2
    c648:	da1e      	bge.n	c688 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c64a:	2317      	movs	r3, #23
    c64c:	e0d1      	b.n	c7f2 <_adc_set_config+0x506>
    c64e:	46c0      	nop			; (mov r8, r8)
    c650:	0000c0c5 	.word	0x0000c0c5
    c654:	0001392d 	.word	0x0001392d
    c658:	00013971 	.word	0x00013971
    c65c:	0000c275 	.word	0x0000c275
    c660:	00019774 	.word	0x00019774
    c664:	0000c1a1 	.word	0x0000c1a1
    c668:	000001ff 	.word	0x000001ff
    c66c:	fffffe00 	.word	0xfffffe00
    c670:	000003ff 	.word	0x000003ff
    c674:	000007ff 	.word	0x000007ff
    c678:	fffff800 	.word	0xfffff800
    c67c:	00000fff 	.word	0x00000fff
    c680:	00007fff 	.word	0x00007fff
    c684:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    c688:	683b      	ldr	r3, [r7, #0]
    c68a:	69db      	ldr	r3, [r3, #28]
    c68c:	4a5b      	ldr	r2, [pc, #364]	; (c7fc <_adc_set_config+0x510>)
    c68e:	4293      	cmp	r3, r2
    c690:	dc04      	bgt.n	c69c <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    c692:	683b      	ldr	r3, [r7, #0]
    c694:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
    c696:	4a59      	ldr	r2, [pc, #356]	; (c7fc <_adc_set_config+0x510>)
    c698:	4293      	cmp	r3, r2
    c69a:	dd07      	ble.n	c6ac <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    c69c:	2317      	movs	r3, #23
    c69e:	e0a8      	b.n	c7f2 <_adc_set_config+0x506>
			break;
    c6a0:	46c0      	nop			; (mov r8, r8)
    c6a2:	e004      	b.n	c6ae <_adc_set_config+0x3c2>
			break;
    c6a4:	46c0      	nop			; (mov r8, r8)
    c6a6:	e002      	b.n	c6ae <_adc_set_config+0x3c2>
			break;
    c6a8:	46c0      	nop			; (mov r8, r8)
    c6aa:	e000      	b.n	c6ae <_adc_set_config+0x3c2>
			}
			break;
    c6ac:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    c6ae:	46c0      	nop			; (mov r8, r8)
    c6b0:	687b      	ldr	r3, [r7, #4]
    c6b2:	0018      	movs	r0, r3
    c6b4:	4b52      	ldr	r3, [pc, #328]	; (c800 <_adc_set_config+0x514>)
    c6b6:	4798      	blx	r3
    c6b8:	1e03      	subs	r3, r0, #0
    c6ba:	d1f9      	bne.n	c6b0 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    c6bc:	683b      	ldr	r3, [r7, #0]
    c6be:	7e1a      	ldrb	r2, [r3, #24]
    c6c0:	693b      	ldr	r3, [r7, #16]
    c6c2:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    c6c4:	46c0      	nop			; (mov r8, r8)
    c6c6:	687b      	ldr	r3, [r7, #4]
    c6c8:	0018      	movs	r0, r3
    c6ca:	4b4d      	ldr	r3, [pc, #308]	; (c800 <_adc_set_config+0x514>)
    c6cc:	4798      	blx	r3
    c6ce:	1e03      	subs	r3, r0, #0
    c6d0:	d1f9      	bne.n	c6c6 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    c6d2:	683b      	ldr	r3, [r7, #0]
    c6d4:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
    c6d6:	b29a      	uxth	r2, r3
    c6d8:	693b      	ldr	r3, [r7, #16]
    c6da:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
    c6dc:	46c0      	nop			; (mov r8, r8)
    c6de:	687b      	ldr	r3, [r7, #4]
    c6e0:	0018      	movs	r0, r3
    c6e2:	4b47      	ldr	r3, [pc, #284]	; (c800 <_adc_set_config+0x514>)
    c6e4:	4798      	blx	r3
    c6e6:	1e03      	subs	r3, r0, #0
    c6e8:	d1f9      	bne.n	c6de <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    c6ea:	683b      	ldr	r3, [r7, #0]
    c6ec:	6a1b      	ldr	r3, [r3, #32]
    c6ee:	b29a      	uxth	r2, r3
    c6f0:	693b      	ldr	r3, [r7, #16]
    c6f2:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    c6f4:	2314      	movs	r3, #20
    c6f6:	18fb      	adds	r3, r7, r3
    c6f8:	683a      	ldr	r2, [r7, #0]
    c6fa:	212c      	movs	r1, #44	; 0x2c
    c6fc:	5c52      	ldrb	r2, [r2, r1]
    c6fe:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    c700:	2314      	movs	r3, #20
    c702:	18fb      	adds	r3, r7, r3
    c704:	781b      	ldrb	r3, [r3, #0]
    c706:	2b00      	cmp	r3, #0
    c708:	d006      	beq.n	c718 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    c70a:	2314      	movs	r3, #20
    c70c:	18fb      	adds	r3, r7, r3
    c70e:	781a      	ldrb	r2, [r3, #0]
    c710:	2314      	movs	r3, #20
    c712:	18fb      	adds	r3, r7, r3
    c714:	3a01      	subs	r2, #1
    c716:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    c718:	2314      	movs	r3, #20
    c71a:	18fb      	adds	r3, r7, r3
    c71c:	781b      	ldrb	r3, [r3, #0]
    c71e:	2b0f      	cmp	r3, #15
    c720:	d804      	bhi.n	c72c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    c722:	683b      	ldr	r3, [r7, #0]
    c724:	222b      	movs	r2, #43	; 0x2b
    c726:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    c728:	2b0f      	cmp	r3, #15
    c72a:	d901      	bls.n	c730 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    c72c:	2317      	movs	r3, #23
    c72e:	e060      	b.n	c7f2 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    c730:	46c0      	nop			; (mov r8, r8)
    c732:	687b      	ldr	r3, [r7, #4]
    c734:	0018      	movs	r0, r3
    c736:	4b32      	ldr	r3, [pc, #200]	; (c800 <_adc_set_config+0x514>)
    c738:	4798      	blx	r3
    c73a:	1e03      	subs	r3, r0, #0
    c73c:	d1f9      	bne.n	c732 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    c73e:	683b      	ldr	r3, [r7, #0]
    c740:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    c742:	683a      	ldr	r2, [r7, #0]
    c744:	212b      	movs	r1, #43	; 0x2b
    c746:	5c52      	ldrb	r2, [r2, r1]
    c748:	0512      	lsls	r2, r2, #20
			config->gain_factor |
    c74a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    c74c:	2214      	movs	r2, #20
    c74e:	18ba      	adds	r2, r7, r2
    c750:	7812      	ldrb	r2, [r2, #0]
    c752:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    c754:	4313      	orrs	r3, r2
			config->negative_input |
    c756:	683a      	ldr	r2, [r7, #0]
    c758:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    c75a:	4313      	orrs	r3, r2
			config->positive_input;
    c75c:	683a      	ldr	r2, [r7, #0]
    c75e:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
    c760:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
    c762:	693b      	ldr	r3, [r7, #16]
    c764:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    c766:	683b      	ldr	r3, [r7, #0]
    c768:	222a      	movs	r2, #42	; 0x2a
    c76a:	5c9a      	ldrb	r2, [r3, r2]
    c76c:	693b      	ldr	r3, [r7, #16]
    c76e:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    c770:	693b      	ldr	r3, [r7, #16]
    c772:	220f      	movs	r2, #15
    c774:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    c776:	683b      	ldr	r3, [r7, #0]
    c778:	2224      	movs	r2, #36	; 0x24
    c77a:	5c9b      	ldrb	r3, [r3, r2]
    c77c:	2b00      	cmp	r3, #0
    c77e:	d01e      	beq.n	c7be <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    c780:	683b      	ldr	r3, [r7, #0]
    c782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    c784:	4a1f      	ldr	r2, [pc, #124]	; (c804 <_adc_set_config+0x518>)
    c786:	4293      	cmp	r3, r2
    c788:	d901      	bls.n	c78e <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    c78a:	2317      	movs	r3, #23
    c78c:	e031      	b.n	c7f2 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    c78e:	683b      	ldr	r3, [r7, #0]
    c790:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    c792:	693b      	ldr	r3, [r7, #16]
    c794:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    c796:	683b      	ldr	r3, [r7, #0]
    c798:	2228      	movs	r2, #40	; 0x28
    c79a:	5e9b      	ldrsh	r3, [r3, r2]
    c79c:	4a1a      	ldr	r2, [pc, #104]	; (c808 <_adc_set_config+0x51c>)
    c79e:	4293      	cmp	r3, r2
    c7a0:	dc05      	bgt.n	c7ae <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    c7a2:	683b      	ldr	r3, [r7, #0]
    c7a4:	2228      	movs	r2, #40	; 0x28
    c7a6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
    c7a8:	4a18      	ldr	r2, [pc, #96]	; (c80c <_adc_set_config+0x520>)
    c7aa:	4293      	cmp	r3, r2
    c7ac:	da01      	bge.n	c7b2 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
    c7ae:	2317      	movs	r3, #23
    c7b0:	e01f      	b.n	c7f2 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    c7b2:	683b      	ldr	r3, [r7, #0]
    c7b4:	2228      	movs	r2, #40	; 0x28
    c7b6:	5e9b      	ldrsh	r3, [r3, r2]
    c7b8:	b29a      	uxth	r2, r3
    c7ba:	693b      	ldr	r3, [r7, #16]
    c7bc:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    c7be:	4b14      	ldr	r3, [pc, #80]	; (c810 <_adc_set_config+0x524>)
    c7c0:	681b      	ldr	r3, [r3, #0]
    c7c2:	08db      	lsrs	r3, r3, #3
    c7c4:	b29b      	uxth	r3, r3
    c7c6:	021b      	lsls	r3, r3, #8
    c7c8:	b29a      	uxth	r2, r3
    c7ca:	23e0      	movs	r3, #224	; 0xe0
    c7cc:	00db      	lsls	r3, r3, #3
    c7ce:	4013      	ands	r3, r2
    c7d0:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    c7d2:	4b10      	ldr	r3, [pc, #64]	; (c814 <_adc_set_config+0x528>)
    c7d4:	685c      	ldr	r4, [r3, #4]
    c7d6:	681b      	ldr	r3, [r3, #0]
    c7d8:	0161      	lsls	r1, r4, #5
    c7da:	0edd      	lsrs	r5, r3, #27
    c7dc:	430d      	orrs	r5, r1
    c7de:	0ee6      	lsrs	r6, r4, #27
    c7e0:	b2ab      	uxth	r3, r5
    c7e2:	21ff      	movs	r1, #255	; 0xff
    c7e4:	400b      	ands	r3, r1
    c7e6:	b29b      	uxth	r3, r3
			) |
    c7e8:	4313      	orrs	r3, r2
    c7ea:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
    c7ec:	693b      	ldr	r3, [r7, #16]
    c7ee:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    c7f0:	2300      	movs	r3, #0
}
    c7f2:	0018      	movs	r0, r3
    c7f4:	46bd      	mov	sp, r7
    c7f6:	b009      	add	sp, #36	; 0x24
    c7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7fa:	46c0      	nop			; (mov r8, r8)
    c7fc:	0000ffff 	.word	0x0000ffff
    c800:	0000c1a1 	.word	0x0000c1a1
    c804:	00000fff 	.word	0x00000fff
    c808:	000007ff 	.word	0x000007ff
    c80c:	fffff800 	.word	0xfffff800
    c810:	00806024 	.word	0x00806024
    c814:	00806020 	.word	0x00806020

0000c818 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    c818:	b580      	push	{r7, lr}
    c81a:	b086      	sub	sp, #24
    c81c:	af00      	add	r7, sp, #0
    c81e:	60f8      	str	r0, [r7, #12]
    c820:	60b9      	str	r1, [r7, #8]
    c822:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    c824:	68fb      	ldr	r3, [r7, #12]
    c826:	68ba      	ldr	r2, [r7, #8]
    c828:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    c82a:	2380      	movs	r3, #128	; 0x80
    c82c:	025b      	lsls	r3, r3, #9
    c82e:	0019      	movs	r1, r3
    c830:	2002      	movs	r0, #2
    c832:	4b32      	ldr	r3, [pc, #200]	; (c8fc <adc_init+0xe4>)
    c834:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    c836:	68bb      	ldr	r3, [r7, #8]
    c838:	781b      	ldrb	r3, [r3, #0]
    c83a:	b2db      	uxtb	r3, r3
    c83c:	001a      	movs	r2, r3
    c83e:	2301      	movs	r3, #1
    c840:	4013      	ands	r3, r2
    c842:	d001      	beq.n	c848 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    c844:	2305      	movs	r3, #5
    c846:	e055      	b.n	c8f4 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    c848:	68bb      	ldr	r3, [r7, #8]
    c84a:	781b      	ldrb	r3, [r3, #0]
    c84c:	b2db      	uxtb	r3, r3
    c84e:	001a      	movs	r2, r3
    c850:	2302      	movs	r3, #2
    c852:	4013      	ands	r3, r2
    c854:	d001      	beq.n	c85a <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    c856:	231c      	movs	r3, #28
    c858:	e04c      	b.n	c8f4 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    c85a:	687b      	ldr	r3, [r7, #4]
    c85c:	785a      	ldrb	r2, [r3, #1]
    c85e:	68fb      	ldr	r3, [r7, #12]
    c860:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    c862:	68fb      	ldr	r3, [r7, #12]
    c864:	791b      	ldrb	r3, [r3, #4]
    c866:	2b00      	cmp	r3, #0
    c868:	d102      	bne.n	c870 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    c86a:	2001      	movs	r0, #1
    c86c:	4b24      	ldr	r3, [pc, #144]	; (c900 <adc_init+0xe8>)
    c86e:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    c870:	2317      	movs	r3, #23
    c872:	18fb      	adds	r3, r7, r3
    c874:	2200      	movs	r2, #0
    c876:	701a      	strb	r2, [r3, #0]
    c878:	e00e      	b.n	c898 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    c87a:	2317      	movs	r3, #23
    c87c:	18fb      	adds	r3, r7, r3
    c87e:	781a      	ldrb	r2, [r3, #0]
    c880:	68fb      	ldr	r3, [r7, #12]
    c882:	3202      	adds	r2, #2
    c884:	0092      	lsls	r2, r2, #2
    c886:	2100      	movs	r1, #0
    c888:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    c88a:	2317      	movs	r3, #23
    c88c:	18fb      	adds	r3, r7, r3
    c88e:	781a      	ldrb	r2, [r3, #0]
    c890:	2317      	movs	r3, #23
    c892:	18fb      	adds	r3, r7, r3
    c894:	3201      	adds	r2, #1
    c896:	701a      	strb	r2, [r3, #0]
    c898:	2317      	movs	r3, #23
    c89a:	18fb      	adds	r3, r7, r3
    c89c:	781b      	ldrb	r3, [r3, #0]
    c89e:	2b02      	cmp	r3, #2
    c8a0:	d9eb      	bls.n	c87a <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
    c8a2:	68fb      	ldr	r3, [r7, #12]
    c8a4:	2200      	movs	r2, #0
    c8a6:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    c8a8:	68fb      	ldr	r3, [r7, #12]
    c8aa:	2200      	movs	r2, #0
    c8ac:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    c8ae:	68fb      	ldr	r3, [r7, #12]
    c8b0:	2200      	movs	r2, #0
    c8b2:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    c8b4:	68fb      	ldr	r3, [r7, #12]
    c8b6:	2200      	movs	r2, #0
    c8b8:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    c8ba:	4b12      	ldr	r3, [pc, #72]	; (c904 <adc_init+0xec>)
    c8bc:	68fa      	ldr	r2, [r7, #12]
    c8be:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    c8c0:	687b      	ldr	r3, [r7, #4]
    c8c2:	222a      	movs	r2, #42	; 0x2a
    c8c4:	5c9b      	ldrb	r3, [r3, r2]
    c8c6:	2b00      	cmp	r3, #0
    c8c8:	d10a      	bne.n	c8e0 <adc_init+0xc8>
			!config->freerunning) {
    c8ca:	687b      	ldr	r3, [r7, #4]
    c8cc:	7d1b      	ldrb	r3, [r3, #20]
    c8ce:	2201      	movs	r2, #1
    c8d0:	4053      	eors	r3, r2
    c8d2:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    c8d4:	2b00      	cmp	r3, #0
    c8d6:	d003      	beq.n	c8e0 <adc_init+0xc8>
		module_inst->software_trigger = true;
    c8d8:	68fb      	ldr	r3, [r7, #12]
    c8da:	2201      	movs	r2, #1
    c8dc:	775a      	strb	r2, [r3, #29]
    c8de:	e002      	b.n	c8e6 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    c8e0:	68fb      	ldr	r3, [r7, #12]
    c8e2:	2200      	movs	r2, #0
    c8e4:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    c8e6:	687a      	ldr	r2, [r7, #4]
    c8e8:	68fb      	ldr	r3, [r7, #12]
    c8ea:	0011      	movs	r1, r2
    c8ec:	0018      	movs	r0, r3
    c8ee:	4b06      	ldr	r3, [pc, #24]	; (c908 <adc_init+0xf0>)
    c8f0:	4798      	blx	r3
    c8f2:	0003      	movs	r3, r0
}
    c8f4:	0018      	movs	r0, r3
    c8f6:	46bd      	mov	sp, r7
    c8f8:	b006      	add	sp, #24
    c8fa:	bd80      	pop	{r7, pc}
    c8fc:	0000c0dd 	.word	0x0000c0dd
    c900:	0000c161 	.word	0x0000c161
    c904:	20000858 	.word	0x20000858
    c908:	0000c2ed 	.word	0x0000c2ed

0000c90c <adc_is_syncing>:
{
    c90c:	b580      	push	{r7, lr}
    c90e:	b084      	sub	sp, #16
    c910:	af00      	add	r7, sp, #0
    c912:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    c914:	687b      	ldr	r3, [r7, #4]
    c916:	681b      	ldr	r3, [r3, #0]
    c918:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    c91a:	68fb      	ldr	r3, [r7, #12]
    c91c:	7e5b      	ldrb	r3, [r3, #25]
    c91e:	b2db      	uxtb	r3, r3
    c920:	b25b      	sxtb	r3, r3
    c922:	2b00      	cmp	r3, #0
    c924:	da01      	bge.n	c92a <adc_is_syncing+0x1e>
		return true;
    c926:	2301      	movs	r3, #1
    c928:	e000      	b.n	c92c <adc_is_syncing+0x20>
	return false;
    c92a:	2300      	movs	r3, #0
}
    c92c:	0018      	movs	r0, r3
    c92e:	46bd      	mov	sp, r7
    c930:	b004      	add	sp, #16
    c932:	bd80      	pop	{r7, pc}

0000c934 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    c934:	b580      	push	{r7, lr}
    c936:	b084      	sub	sp, #16
    c938:	af00      	add	r7, sp, #0
    c93a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c93c:	687b      	ldr	r3, [r7, #4]
    c93e:	681b      	ldr	r3, [r3, #0]
    c940:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    c942:	46c0      	nop			; (mov r8, r8)
    c944:	687b      	ldr	r3, [r7, #4]
    c946:	0018      	movs	r0, r3
    c948:	4b0b      	ldr	r3, [pc, #44]	; (c978 <adc_start_conversion+0x44>)
    c94a:	4798      	blx	r3
    c94c:	1e03      	subs	r3, r0, #0
    c94e:	d1f9      	bne.n	c944 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    c950:	68fb      	ldr	r3, [r7, #12]
    c952:	7b1b      	ldrb	r3, [r3, #12]
    c954:	b2db      	uxtb	r3, r3
    c956:	2202      	movs	r2, #2
    c958:	4313      	orrs	r3, r2
    c95a:	b2da      	uxtb	r2, r3
    c95c:	68fb      	ldr	r3, [r7, #12]
    c95e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    c960:	46c0      	nop			; (mov r8, r8)
    c962:	687b      	ldr	r3, [r7, #4]
    c964:	0018      	movs	r0, r3
    c966:	4b04      	ldr	r3, [pc, #16]	; (c978 <adc_start_conversion+0x44>)
    c968:	4798      	blx	r3
    c96a:	1e03      	subs	r3, r0, #0
    c96c:	d1f9      	bne.n	c962 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    c96e:	46c0      	nop			; (mov r8, r8)
    c970:	46bd      	mov	sp, r7
    c972:	b004      	add	sp, #16
    c974:	bd80      	pop	{r7, pc}
    c976:	46c0      	nop			; (mov r8, r8)
    c978:	0000c90d 	.word	0x0000c90d

0000c97c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    c97c:	b580      	push	{r7, lr}
    c97e:	b084      	sub	sp, #16
    c980:	af00      	add	r7, sp, #0
    c982:	6078      	str	r0, [r7, #4]
    c984:	000a      	movs	r2, r1
    c986:	1cfb      	adds	r3, r7, #3
    c988:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    c98a:	687b      	ldr	r3, [r7, #4]
    c98c:	681b      	ldr	r3, [r3, #0]
    c98e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    c990:	68fb      	ldr	r3, [r7, #12]
    c992:	1cfa      	adds	r2, r7, #3
    c994:	7812      	ldrb	r2, [r2, #0]
    c996:	759a      	strb	r2, [r3, #22]
}
    c998:	46c0      	nop			; (mov r8, r8)
    c99a:	46bd      	mov	sp, r7
    c99c:	b004      	add	sp, #16
    c99e:	bd80      	pop	{r7, pc}

0000c9a0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    c9a0:	b580      	push	{r7, lr}
    c9a2:	b084      	sub	sp, #16
    c9a4:	af00      	add	r7, sp, #0
    c9a6:	0002      	movs	r2, r0
    c9a8:	1dfb      	adds	r3, r7, #7
    c9aa:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    c9ac:	1dfb      	adds	r3, r7, #7
    c9ae:	781a      	ldrb	r2, [r3, #0]
    c9b0:	4b47      	ldr	r3, [pc, #284]	; (cad0 <_adc_interrupt_handler+0x130>)
    c9b2:	0092      	lsls	r2, r2, #2
    c9b4:	58d3      	ldr	r3, [r2, r3]
    c9b6:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    c9b8:	68fb      	ldr	r3, [r7, #12]
    c9ba:	681b      	ldr	r3, [r3, #0]
    c9bc:	7e1b      	ldrb	r3, [r3, #24]
    c9be:	b2da      	uxtb	r2, r3
    c9c0:	68fb      	ldr	r3, [r7, #12]
    c9c2:	681b      	ldr	r3, [r3, #0]
    c9c4:	7ddb      	ldrb	r3, [r3, #23]
    c9c6:	b2db      	uxtb	r3, r3
    c9c8:	4013      	ands	r3, r2
    c9ca:	b2db      	uxtb	r3, r3
    c9cc:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    c9ce:	68bb      	ldr	r3, [r7, #8]
    c9d0:	2201      	movs	r2, #1
    c9d2:	4013      	ands	r3, r2
    c9d4:	d045      	beq.n	ca62 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    c9d6:	68fb      	ldr	r3, [r7, #12]
    c9d8:	681b      	ldr	r3, [r3, #0]
    c9da:	2201      	movs	r2, #1
    c9dc:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
    c9de:	46c0      	nop			; (mov r8, r8)
    c9e0:	68fb      	ldr	r3, [r7, #12]
    c9e2:	0018      	movs	r0, r3
    c9e4:	4b3b      	ldr	r3, [pc, #236]	; (cad4 <_adc_interrupt_handler+0x134>)
    c9e6:	4798      	blx	r3
    c9e8:	1e03      	subs	r3, r0, #0
    c9ea:	d1f9      	bne.n	c9e0 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
    c9ec:	68fb      	ldr	r3, [r7, #12]
    c9ee:	695b      	ldr	r3, [r3, #20]
    c9f0:	1c99      	adds	r1, r3, #2
    c9f2:	68fa      	ldr	r2, [r7, #12]
    c9f4:	6151      	str	r1, [r2, #20]
    c9f6:	68fa      	ldr	r2, [r7, #12]
    c9f8:	6812      	ldr	r2, [r2, #0]
    c9fa:	8b52      	ldrh	r2, [r2, #26]
    c9fc:	b292      	uxth	r2, r2
    c9fe:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
    ca00:	68fb      	ldr	r3, [r7, #12]
    ca02:	8b1b      	ldrh	r3, [r3, #24]
    ca04:	b29b      	uxth	r3, r3
    ca06:	3b01      	subs	r3, #1
    ca08:	b29b      	uxth	r3, r3
    ca0a:	68fa      	ldr	r2, [r7, #12]
    ca0c:	1c19      	adds	r1, r3, #0
    ca0e:	8311      	strh	r1, [r2, #24]
    ca10:	2b00      	cmp	r3, #0
    ca12:	d008      	beq.n	ca26 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
    ca14:	68fb      	ldr	r3, [r7, #12]
    ca16:	7f5b      	ldrb	r3, [r3, #29]
    ca18:	2b00      	cmp	r3, #0
    ca1a:	d022      	beq.n	ca62 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
    ca1c:	68fb      	ldr	r3, [r7, #12]
    ca1e:	0018      	movs	r0, r3
    ca20:	4b2d      	ldr	r3, [pc, #180]	; (cad8 <_adc_interrupt_handler+0x138>)
    ca22:	4798      	blx	r3
    ca24:	e01d      	b.n	ca62 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    ca26:	68fb      	ldr	r3, [r7, #12]
    ca28:	2101      	movs	r1, #1
    ca2a:	0018      	movs	r0, r3
    ca2c:	4b2b      	ldr	r3, [pc, #172]	; (cadc <_adc_interrupt_handler+0x13c>)
    ca2e:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
    ca30:	68fb      	ldr	r3, [r7, #12]
    ca32:	7f1b      	ldrb	r3, [r3, #28]
    ca34:	b2db      	uxtb	r3, r3
    ca36:	2b05      	cmp	r3, #5
    ca38:	d113      	bne.n	ca62 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
    ca3a:	68fb      	ldr	r3, [r7, #12]
    ca3c:	2200      	movs	r2, #0
    ca3e:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
    ca40:	68fb      	ldr	r3, [r7, #12]
    ca42:	7edb      	ldrb	r3, [r3, #27]
    ca44:	001a      	movs	r2, r3
    ca46:	2301      	movs	r3, #1
    ca48:	4013      	ands	r3, r2
    ca4a:	d00a      	beq.n	ca62 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
    ca4c:	68fb      	ldr	r3, [r7, #12]
    ca4e:	7e9b      	ldrb	r3, [r3, #26]
    ca50:	001a      	movs	r2, r3
    ca52:	2301      	movs	r3, #1
    ca54:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    ca56:	d004      	beq.n	ca62 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    ca58:	68fb      	ldr	r3, [r7, #12]
    ca5a:	689b      	ldr	r3, [r3, #8]
    ca5c:	68fa      	ldr	r2, [r7, #12]
    ca5e:	0010      	movs	r0, r2
    ca60:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    ca62:	68bb      	ldr	r3, [r7, #8]
    ca64:	2204      	movs	r2, #4
    ca66:	4013      	ands	r3, r2
    ca68:	d014      	beq.n	ca94 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    ca6a:	68fb      	ldr	r3, [r7, #12]
    ca6c:	681b      	ldr	r3, [r3, #0]
    ca6e:	2204      	movs	r2, #4
    ca70:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    ca72:	68fb      	ldr	r3, [r7, #12]
    ca74:	7edb      	ldrb	r3, [r3, #27]
    ca76:	001a      	movs	r2, r3
    ca78:	2302      	movs	r3, #2
    ca7a:	4013      	ands	r3, r2
    ca7c:	d00a      	beq.n	ca94 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    ca7e:	68fb      	ldr	r3, [r7, #12]
    ca80:	7e9b      	ldrb	r3, [r3, #26]
    ca82:	001a      	movs	r2, r3
    ca84:	2302      	movs	r3, #2
    ca86:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    ca88:	d004      	beq.n	ca94 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    ca8a:	68fb      	ldr	r3, [r7, #12]
    ca8c:	68db      	ldr	r3, [r3, #12]
    ca8e:	68fa      	ldr	r2, [r7, #12]
    ca90:	0010      	movs	r0, r2
    ca92:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    ca94:	68bb      	ldr	r3, [r7, #8]
    ca96:	2202      	movs	r2, #2
    ca98:	4013      	ands	r3, r2
    ca9a:	d014      	beq.n	cac6 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    ca9c:	68fb      	ldr	r3, [r7, #12]
    ca9e:	681b      	ldr	r3, [r3, #0]
    caa0:	2202      	movs	r2, #2
    caa2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    caa4:	68fb      	ldr	r3, [r7, #12]
    caa6:	7edb      	ldrb	r3, [r3, #27]
    caa8:	001a      	movs	r2, r3
    caaa:	2304      	movs	r3, #4
    caac:	4013      	ands	r3, r2
    caae:	d00a      	beq.n	cac6 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    cab0:	68fb      	ldr	r3, [r7, #12]
    cab2:	7e9b      	ldrb	r3, [r3, #26]
    cab4:	001a      	movs	r2, r3
    cab6:	2304      	movs	r3, #4
    cab8:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    caba:	d004      	beq.n	cac6 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    cabc:	68fb      	ldr	r3, [r7, #12]
    cabe:	691b      	ldr	r3, [r3, #16]
    cac0:	68fa      	ldr	r2, [r7, #12]
    cac2:	0010      	movs	r0, r2
    cac4:	4798      	blx	r3
		}
	}
}
    cac6:	46c0      	nop			; (mov r8, r8)
    cac8:	46bd      	mov	sp, r7
    caca:	b004      	add	sp, #16
    cacc:	bd80      	pop	{r7, pc}
    cace:	46c0      	nop			; (mov r8, r8)
    cad0:	20000858 	.word	0x20000858
    cad4:	0000c90d 	.word	0x0000c90d
    cad8:	0000c935 	.word	0x0000c935
    cadc:	0000c97d 	.word	0x0000c97d

0000cae0 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    cae0:	b580      	push	{r7, lr}
    cae2:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    cae4:	2000      	movs	r0, #0
    cae6:	4b02      	ldr	r3, [pc, #8]	; (caf0 <ADC_Handler+0x10>)
    cae8:	4798      	blx	r3
}
    caea:	46c0      	nop			; (mov r8, r8)
    caec:	46bd      	mov	sp, r7
    caee:	bd80      	pop	{r7, pc}
    caf0:	0000c9a1 	.word	0x0000c9a1

0000caf4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    caf4:	b580      	push	{r7, lr}
    caf6:	b082      	sub	sp, #8
    caf8:	af00      	add	r7, sp, #0
    cafa:	0002      	movs	r2, r0
    cafc:	1dfb      	adds	r3, r7, #7
    cafe:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cb00:	4a07      	ldr	r2, [pc, #28]	; (cb20 <system_interrupt_disable+0x2c>)
    cb02:	1dfb      	adds	r3, r7, #7
    cb04:	781b      	ldrb	r3, [r3, #0]
    cb06:	0019      	movs	r1, r3
    cb08:	231f      	movs	r3, #31
    cb0a:	400b      	ands	r3, r1
    cb0c:	2101      	movs	r1, #1
    cb0e:	4099      	lsls	r1, r3
    cb10:	000b      	movs	r3, r1
    cb12:	0019      	movs	r1, r3
    cb14:	2380      	movs	r3, #128	; 0x80
    cb16:	50d1      	str	r1, [r2, r3]
}
    cb18:	46c0      	nop			; (mov r8, r8)
    cb1a:	46bd      	mov	sp, r7
    cb1c:	b002      	add	sp, #8
    cb1e:	bd80      	pop	{r7, pc}
    cb20:	e000e100 	.word	0xe000e100

0000cb24 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
    cb24:	b580      	push	{r7, lr}
    cb26:	b084      	sub	sp, #16
    cb28:	af00      	add	r7, sp, #0
    cb2a:	0002      	movs	r2, r0
    cb2c:	1dfb      	adds	r3, r7, #7
    cb2e:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
    cb30:	1dfb      	adds	r3, r7, #7
    cb32:	781a      	ldrb	r2, [r3, #0]
    cb34:	4b37      	ldr	r3, [pc, #220]	; (cc14 <_dac_interrupt_handler+0xf0>)
    cb36:	0092      	lsls	r2, r2, #2
    cb38:	58d3      	ldr	r3, [r2, r3]
    cb3a:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
    cb3c:	68fb      	ldr	r3, [r7, #12]
    cb3e:	681b      	ldr	r3, [r3, #0]
    cb40:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    cb42:	68bb      	ldr	r3, [r7, #8]
    cb44:	799b      	ldrb	r3, [r3, #6]
    cb46:	b2db      	uxtb	r3, r3
    cb48:	001a      	movs	r2, r3
    cb4a:	2301      	movs	r3, #1
    cb4c:	4013      	ands	r3, r2
    cb4e:	d00e      	beq.n	cb6e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    cb50:	68bb      	ldr	r3, [r7, #8]
    cb52:	2201      	movs	r2, #1
    cb54:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
    cb56:	68fb      	ldr	r3, [r7, #12]
    cb58:	3314      	adds	r3, #20
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d007      	beq.n	cb6e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
    cb5e:	68fb      	ldr	r3, [r7, #12]
    cb60:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
    cb62:	2b00      	cmp	r3, #0
    cb64:	d003      	beq.n	cb6e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    cb66:	68fb      	ldr	r3, [r7, #12]
    cb68:	699b      	ldr	r3, [r3, #24]
    cb6a:	2000      	movs	r0, #0
    cb6c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    cb6e:	68bb      	ldr	r3, [r7, #8]
    cb70:	799b      	ldrb	r3, [r3, #6]
    cb72:	b2db      	uxtb	r3, r3
    cb74:	001a      	movs	r2, r3
    cb76:	2302      	movs	r3, #2
    cb78:	4013      	ands	r3, r2
    cb7a:	d047      	beq.n	cc0c <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    cb7c:	68bb      	ldr	r3, [r7, #8]
    cb7e:	2202      	movs	r2, #2
    cb80:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
    cb82:	68fb      	ldr	r3, [r7, #12]
    cb84:	899b      	ldrh	r3, [r3, #12]
    cb86:	b29b      	uxth	r3, r3
    cb88:	2b00      	cmp	r3, #0
    cb8a:	d033      	beq.n	cbf4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
    cb8c:	68fb      	ldr	r3, [r7, #12]
    cb8e:	689a      	ldr	r2, [r3, #8]
    cb90:	68fb      	ldr	r3, [r7, #12]
    cb92:	89db      	ldrh	r3, [r3, #14]
    cb94:	b29b      	uxth	r3, r3
    cb96:	1c59      	adds	r1, r3, #1
    cb98:	b288      	uxth	r0, r1
    cb9a:	68f9      	ldr	r1, [r7, #12]
    cb9c:	81c8      	strh	r0, [r1, #14]
    cb9e:	005b      	lsls	r3, r3, #1
    cba0:	18d3      	adds	r3, r2, r3
    cba2:	881b      	ldrh	r3, [r3, #0]
    cba4:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
    cba6:	68bb      	ldr	r3, [r7, #8]
    cba8:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
    cbaa:	68fb      	ldr	r3, [r7, #12]
    cbac:	899b      	ldrh	r3, [r3, #12]
    cbae:	b29b      	uxth	r3, r3
    cbb0:	3b01      	subs	r3, #1
    cbb2:	b29a      	uxth	r2, r3
    cbb4:	68fb      	ldr	r3, [r7, #12]
    cbb6:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
    cbb8:	68fb      	ldr	r3, [r7, #12]
    cbba:	899b      	ldrh	r3, [r3, #12]
    cbbc:	b29b      	uxth	r3, r3
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	d118      	bne.n	cbf4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
    cbc2:	68fb      	ldr	r3, [r7, #12]
    cbc4:	2220      	movs	r2, #32
    cbc6:	2100      	movs	r1, #0
    cbc8:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    cbca:	68bb      	ldr	r3, [r7, #8]
    cbcc:	2202      	movs	r2, #2
    cbce:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    cbd0:	68bb      	ldr	r3, [r7, #8]
    cbd2:	2202      	movs	r2, #2
    cbd4:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
    cbd6:	2019      	movs	r0, #25
    cbd8:	4b0f      	ldr	r3, [pc, #60]	; (cc18 <_dac_interrupt_handler+0xf4>)
    cbda:	4798      	blx	r3

				if ((module->callback) &&
    cbdc:	68fb      	ldr	r3, [r7, #12]
    cbde:	3314      	adds	r3, #20
    cbe0:	2b00      	cmp	r3, #0
    cbe2:	d007      	beq.n	cbf4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
    cbe4:	68fb      	ldr	r3, [r7, #12]
    cbe6:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
    cbe8:	2b00      	cmp	r3, #0
    cbea:	d003      	beq.n	cbf4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    cbec:	68fb      	ldr	r3, [r7, #12]
    cbee:	69db      	ldr	r3, [r3, #28]
    cbf0:	2000      	movs	r0, #0
    cbf2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
    cbf4:	68fb      	ldr	r3, [r7, #12]
    cbf6:	3314      	adds	r3, #20
    cbf8:	2b00      	cmp	r3, #0
    cbfa:	d007      	beq.n	cc0c <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
    cbfc:	68fb      	ldr	r3, [r7, #12]
    cbfe:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
    cc00:	2b00      	cmp	r3, #0
    cc02:	d003      	beq.n	cc0c <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    cc04:	68fb      	ldr	r3, [r7, #12]
    cc06:	695b      	ldr	r3, [r3, #20]
    cc08:	2000      	movs	r0, #0
    cc0a:	4798      	blx	r3
		}
	}
}
    cc0c:	46c0      	nop			; (mov r8, r8)
    cc0e:	46bd      	mov	sp, r7
    cc10:	b004      	add	sp, #16
    cc12:	bd80      	pop	{r7, pc}
    cc14:	2000085c 	.word	0x2000085c
    cc18:	0000caf5 	.word	0x0000caf5

0000cc1c <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    cc1c:	b580      	push	{r7, lr}
    cc1e:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
    cc20:	2000      	movs	r0, #0
    cc22:	4b02      	ldr	r3, [pc, #8]	; (cc2c <DAC_Handler+0x10>)
    cc24:	4798      	blx	r3
}
    cc26:	46c0      	nop			; (mov r8, r8)
    cc28:	46bd      	mov	sp, r7
    cc2a:	bd80      	pop	{r7, pc}
    cc2c:	0000cb25 	.word	0x0000cb25

0000cc30 <system_interrupt_enter_critical_section>:
{
    cc30:	b580      	push	{r7, lr}
    cc32:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    cc34:	4b02      	ldr	r3, [pc, #8]	; (cc40 <system_interrupt_enter_critical_section+0x10>)
    cc36:	4798      	blx	r3
}
    cc38:	46c0      	nop			; (mov r8, r8)
    cc3a:	46bd      	mov	sp, r7
    cc3c:	bd80      	pop	{r7, pc}
    cc3e:	46c0      	nop			; (mov r8, r8)
    cc40:	00012b75 	.word	0x00012b75

0000cc44 <system_interrupt_leave_critical_section>:
{
    cc44:	b580      	push	{r7, lr}
    cc46:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    cc48:	4b02      	ldr	r3, [pc, #8]	; (cc54 <system_interrupt_leave_critical_section+0x10>)
    cc4a:	4798      	blx	r3
}
    cc4c:	46c0      	nop			; (mov r8, r8)
    cc4e:	46bd      	mov	sp, r7
    cc50:	bd80      	pop	{r7, pc}
    cc52:	46c0      	nop			; (mov r8, r8)
    cc54:	00012bc9 	.word	0x00012bc9

0000cc58 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    cc58:	b580      	push	{r7, lr}
    cc5a:	b086      	sub	sp, #24
    cc5c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    cc5e:	4b49      	ldr	r3, [pc, #292]	; (cd84 <DMAC_Handler+0x12c>)
    cc60:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    cc62:	4b49      	ldr	r3, [pc, #292]	; (cd88 <DMAC_Handler+0x130>)
    cc64:	8c1b      	ldrh	r3, [r3, #32]
    cc66:	b29b      	uxth	r3, r3
    cc68:	b2da      	uxtb	r2, r3
    cc6a:	2317      	movs	r3, #23
    cc6c:	18fb      	adds	r3, r7, r3
    cc6e:	210f      	movs	r1, #15
    cc70:	400a      	ands	r2, r1
    cc72:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    cc74:	2317      	movs	r3, #23
    cc76:	18fb      	adds	r3, r7, r3
    cc78:	781a      	ldrb	r2, [r3, #0]
    cc7a:	4b44      	ldr	r3, [pc, #272]	; (cd8c <DMAC_Handler+0x134>)
    cc7c:	0092      	lsls	r2, r2, #2
    cc7e:	58d3      	ldr	r3, [r2, r3]
    cc80:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    cc82:	4a41      	ldr	r2, [pc, #260]	; (cd88 <DMAC_Handler+0x130>)
    cc84:	693b      	ldr	r3, [r7, #16]
    cc86:	781b      	ldrb	r3, [r3, #0]
    cc88:	210f      	movs	r1, #15
    cc8a:	400b      	ands	r3, r1
    cc8c:	b2d9      	uxtb	r1, r3
    cc8e:	233f      	movs	r3, #63	; 0x3f
    cc90:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    cc92:	493d      	ldr	r1, [pc, #244]	; (cd88 <DMAC_Handler+0x130>)
    cc94:	230f      	movs	r3, #15
    cc96:	18fb      	adds	r3, r7, r3
    cc98:	224e      	movs	r2, #78	; 0x4e
    cc9a:	5c8a      	ldrb	r2, [r1, r2]
    cc9c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    cc9e:	693b      	ldr	r3, [r7, #16]
    cca0:	781b      	ldrb	r3, [r3, #0]
    cca2:	4a3b      	ldr	r2, [pc, #236]	; (cd90 <DMAC_Handler+0x138>)
    cca4:	011b      	lsls	r3, r3, #4
    cca6:	18d3      	adds	r3, r2, r3
    cca8:	3302      	adds	r3, #2
    ccaa:	881b      	ldrh	r3, [r3, #0]
    ccac:	b29b      	uxth	r3, r3
    ccae:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    ccb0:	693b      	ldr	r3, [r7, #16]
    ccb2:	781b      	ldrb	r3, [r3, #0]
    ccb4:	4a37      	ldr	r2, [pc, #220]	; (cd94 <DMAC_Handler+0x13c>)
    ccb6:	011b      	lsls	r3, r3, #4
    ccb8:	18d3      	adds	r3, r2, r3
    ccba:	3302      	adds	r3, #2
    ccbc:	881b      	ldrh	r3, [r3, #0]
    ccbe:	b29b      	uxth	r3, r3
    ccc0:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    ccc2:	68ba      	ldr	r2, [r7, #8]
    ccc4:	687b      	ldr	r3, [r7, #4]
    ccc6:	1ad2      	subs	r2, r2, r3
    ccc8:	693b      	ldr	r3, [r7, #16]
    ccca:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    cccc:	230f      	movs	r3, #15
    ccce:	18fb      	adds	r3, r7, r3
    ccd0:	781b      	ldrb	r3, [r3, #0]
    ccd2:	2201      	movs	r2, #1
    ccd4:	4013      	ands	r3, r2
    ccd6:	d016      	beq.n	cd06 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    ccd8:	4a2b      	ldr	r2, [pc, #172]	; (cd88 <DMAC_Handler+0x130>)
    ccda:	234e      	movs	r3, #78	; 0x4e
    ccdc:	2101      	movs	r1, #1
    ccde:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    cce0:	693b      	ldr	r3, [r7, #16]
    cce2:	2210      	movs	r2, #16
    cce4:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    cce6:	693b      	ldr	r3, [r7, #16]
    cce8:	7c1b      	ldrb	r3, [r3, #16]
    ccea:	001a      	movs	r2, r3
    ccec:	2301      	movs	r3, #1
    ccee:	4013      	ands	r3, r2
    ccf0:	d042      	beq.n	cd78 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    ccf2:	693b      	ldr	r3, [r7, #16]
    ccf4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    ccf6:	2b00      	cmp	r3, #0
    ccf8:	d03e      	beq.n	cd78 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    ccfa:	693b      	ldr	r3, [r7, #16]
    ccfc:	685b      	ldr	r3, [r3, #4]
    ccfe:	693a      	ldr	r2, [r7, #16]
    cd00:	0010      	movs	r0, r2
    cd02:	4798      	blx	r3
    cd04:	e038      	b.n	cd78 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    cd06:	230f      	movs	r3, #15
    cd08:	18fb      	adds	r3, r7, r3
    cd0a:	781b      	ldrb	r3, [r3, #0]
    cd0c:	2202      	movs	r2, #2
    cd0e:	4013      	ands	r3, r2
    cd10:	d016      	beq.n	cd40 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    cd12:	4a1d      	ldr	r2, [pc, #116]	; (cd88 <DMAC_Handler+0x130>)
    cd14:	234e      	movs	r3, #78	; 0x4e
    cd16:	2102      	movs	r1, #2
    cd18:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    cd1a:	693b      	ldr	r3, [r7, #16]
    cd1c:	2200      	movs	r2, #0
    cd1e:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    cd20:	693b      	ldr	r3, [r7, #16]
    cd22:	7c1b      	ldrb	r3, [r3, #16]
    cd24:	001a      	movs	r2, r3
    cd26:	2302      	movs	r3, #2
    cd28:	4013      	ands	r3, r2
    cd2a:	d025      	beq.n	cd78 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    cd2c:	693b      	ldr	r3, [r7, #16]
    cd2e:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    cd30:	2b00      	cmp	r3, #0
    cd32:	d021      	beq.n	cd78 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    cd34:	693b      	ldr	r3, [r7, #16]
    cd36:	689b      	ldr	r3, [r3, #8]
    cd38:	693a      	ldr	r2, [r7, #16]
    cd3a:	0010      	movs	r0, r2
    cd3c:	4798      	blx	r3
    cd3e:	e01b      	b.n	cd78 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    cd40:	230f      	movs	r3, #15
    cd42:	18fb      	adds	r3, r7, r3
    cd44:	781b      	ldrb	r3, [r3, #0]
    cd46:	2204      	movs	r2, #4
    cd48:	4013      	ands	r3, r2
    cd4a:	d015      	beq.n	cd78 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    cd4c:	4a0e      	ldr	r2, [pc, #56]	; (cd88 <DMAC_Handler+0x130>)
    cd4e:	234e      	movs	r3, #78	; 0x4e
    cd50:	2104      	movs	r1, #4
    cd52:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    cd54:	693b      	ldr	r3, [r7, #16]
    cd56:	2206      	movs	r2, #6
    cd58:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    cd5a:	693b      	ldr	r3, [r7, #16]
    cd5c:	7c1b      	ldrb	r3, [r3, #16]
    cd5e:	001a      	movs	r2, r3
    cd60:	2304      	movs	r3, #4
    cd62:	4013      	ands	r3, r2
    cd64:	d008      	beq.n	cd78 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    cd66:	693b      	ldr	r3, [r7, #16]
    cd68:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    cd6a:	2b00      	cmp	r3, #0
    cd6c:	d004      	beq.n	cd78 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    cd6e:	693b      	ldr	r3, [r7, #16]
    cd70:	68db      	ldr	r3, [r3, #12]
    cd72:	693a      	ldr	r2, [r7, #16]
    cd74:	0010      	movs	r0, r2
    cd76:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    cd78:	4b07      	ldr	r3, [pc, #28]	; (cd98 <DMAC_Handler+0x140>)
    cd7a:	4798      	blx	r3
}
    cd7c:	46c0      	nop			; (mov r8, r8)
    cd7e:	46bd      	mov	sp, r7
    cd80:	b006      	add	sp, #24
    cd82:	bd80      	pop	{r7, pc}
    cd84:	0000cc31 	.word	0x0000cc31
    cd88:	41004800 	.word	0x41004800
    cd8c:	200002a0 	.word	0x200002a0
    cd90:	20000860 	.word	0x20000860
    cd94:	20000250 	.word	0x20000250
    cd98:	0000cc45 	.word	0x0000cc45

0000cd9c <system_gclk_chan_get_config_defaults>:
{
    cd9c:	b580      	push	{r7, lr}
    cd9e:	b082      	sub	sp, #8
    cda0:	af00      	add	r7, sp, #0
    cda2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    cda4:	687b      	ldr	r3, [r7, #4]
    cda6:	2200      	movs	r2, #0
    cda8:	701a      	strb	r2, [r3, #0]
}
    cdaa:	46c0      	nop			; (mov r8, r8)
    cdac:	46bd      	mov	sp, r7
    cdae:	b002      	add	sp, #8
    cdb0:	bd80      	pop	{r7, pc}
	...

0000cdb4 <system_apb_clock_set_mask>:
{
    cdb4:	b580      	push	{r7, lr}
    cdb6:	b082      	sub	sp, #8
    cdb8:	af00      	add	r7, sp, #0
    cdba:	0002      	movs	r2, r0
    cdbc:	6039      	str	r1, [r7, #0]
    cdbe:	1dfb      	adds	r3, r7, #7
    cdc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    cdc2:	1dfb      	adds	r3, r7, #7
    cdc4:	781b      	ldrb	r3, [r3, #0]
    cdc6:	2b01      	cmp	r3, #1
    cdc8:	d00a      	beq.n	cde0 <system_apb_clock_set_mask+0x2c>
    cdca:	2b02      	cmp	r3, #2
    cdcc:	d00f      	beq.n	cdee <system_apb_clock_set_mask+0x3a>
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d114      	bne.n	cdfc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    cdd2:	4b0e      	ldr	r3, [pc, #56]	; (ce0c <system_apb_clock_set_mask+0x58>)
    cdd4:	4a0d      	ldr	r2, [pc, #52]	; (ce0c <system_apb_clock_set_mask+0x58>)
    cdd6:	6991      	ldr	r1, [r2, #24]
    cdd8:	683a      	ldr	r2, [r7, #0]
    cdda:	430a      	orrs	r2, r1
    cddc:	619a      	str	r2, [r3, #24]
			break;
    cdde:	e00f      	b.n	ce00 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    cde0:	4b0a      	ldr	r3, [pc, #40]	; (ce0c <system_apb_clock_set_mask+0x58>)
    cde2:	4a0a      	ldr	r2, [pc, #40]	; (ce0c <system_apb_clock_set_mask+0x58>)
    cde4:	69d1      	ldr	r1, [r2, #28]
    cde6:	683a      	ldr	r2, [r7, #0]
    cde8:	430a      	orrs	r2, r1
    cdea:	61da      	str	r2, [r3, #28]
			break;
    cdec:	e008      	b.n	ce00 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    cdee:	4b07      	ldr	r3, [pc, #28]	; (ce0c <system_apb_clock_set_mask+0x58>)
    cdf0:	4a06      	ldr	r2, [pc, #24]	; (ce0c <system_apb_clock_set_mask+0x58>)
    cdf2:	6a11      	ldr	r1, [r2, #32]
    cdf4:	683a      	ldr	r2, [r7, #0]
    cdf6:	430a      	orrs	r2, r1
    cdf8:	621a      	str	r2, [r3, #32]
			break;
    cdfa:	e001      	b.n	ce00 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    cdfc:	2317      	movs	r3, #23
    cdfe:	e000      	b.n	ce02 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    ce00:	2300      	movs	r3, #0
}
    ce02:	0018      	movs	r0, r3
    ce04:	46bd      	mov	sp, r7
    ce06:	b002      	add	sp, #8
    ce08:	bd80      	pop	{r7, pc}
    ce0a:	46c0      	nop			; (mov r8, r8)
    ce0c:	40000400 	.word	0x40000400

0000ce10 <system_pinmux_get_config_defaults>:
{
    ce10:	b580      	push	{r7, lr}
    ce12:	b082      	sub	sp, #8
    ce14:	af00      	add	r7, sp, #0
    ce16:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    ce18:	687b      	ldr	r3, [r7, #4]
    ce1a:	2280      	movs	r2, #128	; 0x80
    ce1c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ce1e:	687b      	ldr	r3, [r7, #4]
    ce20:	2200      	movs	r2, #0
    ce22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    ce24:	687b      	ldr	r3, [r7, #4]
    ce26:	2201      	movs	r2, #1
    ce28:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    ce2a:	687b      	ldr	r3, [r7, #4]
    ce2c:	2200      	movs	r2, #0
    ce2e:	70da      	strb	r2, [r3, #3]
}
    ce30:	46c0      	nop			; (mov r8, r8)
    ce32:	46bd      	mov	sp, r7
    ce34:	b002      	add	sp, #8
    ce36:	bd80      	pop	{r7, pc}

0000ce38 <system_interrupt_enable>:
{
    ce38:	b580      	push	{r7, lr}
    ce3a:	b082      	sub	sp, #8
    ce3c:	af00      	add	r7, sp, #0
    ce3e:	0002      	movs	r2, r0
    ce40:	1dfb      	adds	r3, r7, #7
    ce42:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ce44:	4b06      	ldr	r3, [pc, #24]	; (ce60 <system_interrupt_enable+0x28>)
    ce46:	1dfa      	adds	r2, r7, #7
    ce48:	7812      	ldrb	r2, [r2, #0]
    ce4a:	0011      	movs	r1, r2
    ce4c:	221f      	movs	r2, #31
    ce4e:	400a      	ands	r2, r1
    ce50:	2101      	movs	r1, #1
    ce52:	4091      	lsls	r1, r2
    ce54:	000a      	movs	r2, r1
    ce56:	601a      	str	r2, [r3, #0]
}
    ce58:	46c0      	nop			; (mov r8, r8)
    ce5a:	46bd      	mov	sp, r7
    ce5c:	b002      	add	sp, #8
    ce5e:	bd80      	pop	{r7, pc}
    ce60:	e000e100 	.word	0xe000e100

0000ce64 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    ce64:	b580      	push	{r7, lr}
    ce66:	b084      	sub	sp, #16
    ce68:	af00      	add	r7, sp, #0
    ce6a:	0002      	movs	r2, r0
    ce6c:	1dfb      	adds	r3, r7, #7
    ce6e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    ce70:	230f      	movs	r3, #15
    ce72:	18fb      	adds	r3, r7, r3
    ce74:	1dfa      	adds	r2, r7, #7
    ce76:	7812      	ldrb	r2, [r2, #0]
    ce78:	0952      	lsrs	r2, r2, #5
    ce7a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    ce7c:	230f      	movs	r3, #15
    ce7e:	18fb      	adds	r3, r7, r3
    ce80:	781b      	ldrb	r3, [r3, #0]
    ce82:	2b00      	cmp	r3, #0
    ce84:	d10c      	bne.n	cea0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    ce86:	4b09      	ldr	r3, [pc, #36]	; (ceac <_extint_get_eic_from_channel+0x48>)
    ce88:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    ce8a:	230f      	movs	r3, #15
    ce8c:	18fb      	adds	r3, r7, r3
    ce8e:	781b      	ldrb	r3, [r3, #0]
    ce90:	009b      	lsls	r3, r3, #2
    ce92:	2210      	movs	r2, #16
    ce94:	4694      	mov	ip, r2
    ce96:	44bc      	add	ip, r7
    ce98:	4463      	add	r3, ip
    ce9a:	3b08      	subs	r3, #8
    ce9c:	681b      	ldr	r3, [r3, #0]
    ce9e:	e000      	b.n	cea2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    cea0:	2300      	movs	r3, #0
	}
}
    cea2:	0018      	movs	r0, r3
    cea4:	46bd      	mov	sp, r7
    cea6:	b004      	add	sp, #16
    cea8:	bd80      	pop	{r7, pc}
    ceaa:	46c0      	nop			; (mov r8, r8)
    ceac:	40001800 	.word	0x40001800

0000ceb0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    ceb0:	b580      	push	{r7, lr}
    ceb2:	b082      	sub	sp, #8
    ceb4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    ceb6:	4b0f      	ldr	r3, [pc, #60]	; (cef4 <extint_is_syncing+0x44>)
    ceb8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    ceba:	2300      	movs	r3, #0
    cebc:	607b      	str	r3, [r7, #4]
    cebe:	e011      	b.n	cee4 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    cec0:	687b      	ldr	r3, [r7, #4]
    cec2:	009b      	lsls	r3, r3, #2
    cec4:	2208      	movs	r2, #8
    cec6:	4694      	mov	ip, r2
    cec8:	44bc      	add	ip, r7
    ceca:	4463      	add	r3, ip
    cecc:	3b08      	subs	r3, #8
    cece:	681b      	ldr	r3, [r3, #0]
    ced0:	785b      	ldrb	r3, [r3, #1]
    ced2:	b2db      	uxtb	r3, r3
    ced4:	b25b      	sxtb	r3, r3
    ced6:	2b00      	cmp	r3, #0
    ced8:	da01      	bge.n	cede <extint_is_syncing+0x2e>
			return true;
    ceda:	2301      	movs	r3, #1
    cedc:	e006      	b.n	ceec <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cede:	687b      	ldr	r3, [r7, #4]
    cee0:	3301      	adds	r3, #1
    cee2:	607b      	str	r3, [r7, #4]
    cee4:	687b      	ldr	r3, [r7, #4]
    cee6:	2b00      	cmp	r3, #0
    cee8:	d0ea      	beq.n	cec0 <extint_is_syncing+0x10>
		}
	}
	return false;
    ceea:	2300      	movs	r3, #0
}
    ceec:	0018      	movs	r0, r3
    ceee:	46bd      	mov	sp, r7
    cef0:	b002      	add	sp, #8
    cef2:	bd80      	pop	{r7, pc}
    cef4:	40001800 	.word	0x40001800

0000cef8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    cef8:	b580      	push	{r7, lr}
    cefa:	b084      	sub	sp, #16
    cefc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    cefe:	4b2d      	ldr	r3, [pc, #180]	; (cfb4 <_system_extint_init+0xbc>)
    cf00:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    cf02:	2140      	movs	r1, #64	; 0x40
    cf04:	2000      	movs	r0, #0
    cf06:	4b2c      	ldr	r3, [pc, #176]	; (cfb8 <_system_extint_init+0xc0>)
    cf08:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    cf0a:	003b      	movs	r3, r7
    cf0c:	0018      	movs	r0, r3
    cf0e:	4b2b      	ldr	r3, [pc, #172]	; (cfbc <_system_extint_init+0xc4>)
    cf10:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    cf12:	003b      	movs	r3, r7
    cf14:	2206      	movs	r2, #6
    cf16:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    cf18:	003b      	movs	r3, r7
    cf1a:	0019      	movs	r1, r3
    cf1c:	2005      	movs	r0, #5
    cf1e:	4b28      	ldr	r3, [pc, #160]	; (cfc0 <_system_extint_init+0xc8>)
    cf20:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    cf22:	2005      	movs	r0, #5
    cf24:	4b27      	ldr	r3, [pc, #156]	; (cfc4 <_system_extint_init+0xcc>)
    cf26:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cf28:	2300      	movs	r3, #0
    cf2a:	60fb      	str	r3, [r7, #12]
    cf2c:	e018      	b.n	cf60 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    cf2e:	68fb      	ldr	r3, [r7, #12]
    cf30:	009b      	lsls	r3, r3, #2
    cf32:	2210      	movs	r2, #16
    cf34:	4694      	mov	ip, r2
    cf36:	44bc      	add	ip, r7
    cf38:	4463      	add	r3, ip
    cf3a:	3b0c      	subs	r3, #12
    cf3c:	681a      	ldr	r2, [r3, #0]
    cf3e:	68fb      	ldr	r3, [r7, #12]
    cf40:	009b      	lsls	r3, r3, #2
    cf42:	2110      	movs	r1, #16
    cf44:	468c      	mov	ip, r1
    cf46:	44bc      	add	ip, r7
    cf48:	4463      	add	r3, ip
    cf4a:	3b0c      	subs	r3, #12
    cf4c:	681b      	ldr	r3, [r3, #0]
    cf4e:	781b      	ldrb	r3, [r3, #0]
    cf50:	b2db      	uxtb	r3, r3
    cf52:	2101      	movs	r1, #1
    cf54:	430b      	orrs	r3, r1
    cf56:	b2db      	uxtb	r3, r3
    cf58:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cf5a:	68fb      	ldr	r3, [r7, #12]
    cf5c:	3301      	adds	r3, #1
    cf5e:	60fb      	str	r3, [r7, #12]
    cf60:	68fb      	ldr	r3, [r7, #12]
    cf62:	2b00      	cmp	r3, #0
    cf64:	d0e3      	beq.n	cf2e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    cf66:	46c0      	nop			; (mov r8, r8)
    cf68:	4b17      	ldr	r3, [pc, #92]	; (cfc8 <_system_extint_init+0xd0>)
    cf6a:	4798      	blx	r3
    cf6c:	1e03      	subs	r3, r0, #0
    cf6e:	d1fb      	bne.n	cf68 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    cf70:	230b      	movs	r3, #11
    cf72:	18fb      	adds	r3, r7, r3
    cf74:	2200      	movs	r2, #0
    cf76:	701a      	strb	r2, [r3, #0]
    cf78:	e00d      	b.n	cf96 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    cf7a:	230b      	movs	r3, #11
    cf7c:	18fb      	adds	r3, r7, r3
    cf7e:	781a      	ldrb	r2, [r3, #0]
    cf80:	4b12      	ldr	r3, [pc, #72]	; (cfcc <_system_extint_init+0xd4>)
    cf82:	0092      	lsls	r2, r2, #2
    cf84:	2100      	movs	r1, #0
    cf86:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    cf88:	230b      	movs	r3, #11
    cf8a:	18fb      	adds	r3, r7, r3
    cf8c:	781a      	ldrb	r2, [r3, #0]
    cf8e:	230b      	movs	r3, #11
    cf90:	18fb      	adds	r3, r7, r3
    cf92:	3201      	adds	r2, #1
    cf94:	701a      	strb	r2, [r3, #0]
    cf96:	230b      	movs	r3, #11
    cf98:	18fb      	adds	r3, r7, r3
    cf9a:	781b      	ldrb	r3, [r3, #0]
    cf9c:	2b0f      	cmp	r3, #15
    cf9e:	d9ec      	bls.n	cf7a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    cfa0:	2004      	movs	r0, #4
    cfa2:	4b0b      	ldr	r3, [pc, #44]	; (cfd0 <_system_extint_init+0xd8>)
    cfa4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    cfa6:	4b0b      	ldr	r3, [pc, #44]	; (cfd4 <_system_extint_init+0xdc>)
    cfa8:	4798      	blx	r3
}
    cfaa:	46c0      	nop			; (mov r8, r8)
    cfac:	46bd      	mov	sp, r7
    cfae:	b004      	add	sp, #16
    cfb0:	bd80      	pop	{r7, pc}
    cfb2:	46c0      	nop			; (mov r8, r8)
    cfb4:	40001800 	.word	0x40001800
    cfb8:	0000cdb5 	.word	0x0000cdb5
    cfbc:	0000cd9d 	.word	0x0000cd9d
    cfc0:	0001392d 	.word	0x0001392d
    cfc4:	00013971 	.word	0x00013971
    cfc8:	0000ceb1 	.word	0x0000ceb1
    cfcc:	200008b0 	.word	0x200008b0
    cfd0:	0000ce39 	.word	0x0000ce39
    cfd4:	0000cfd9 	.word	0x0000cfd9

0000cfd8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    cfd8:	b580      	push	{r7, lr}
    cfda:	b082      	sub	sp, #8
    cfdc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    cfde:	4b15      	ldr	r3, [pc, #84]	; (d034 <_extint_enable+0x5c>)
    cfe0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    cfe2:	2300      	movs	r3, #0
    cfe4:	607b      	str	r3, [r7, #4]
    cfe6:	e018      	b.n	d01a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    cfe8:	687b      	ldr	r3, [r7, #4]
    cfea:	009b      	lsls	r3, r3, #2
    cfec:	2208      	movs	r2, #8
    cfee:	4694      	mov	ip, r2
    cff0:	44bc      	add	ip, r7
    cff2:	4463      	add	r3, ip
    cff4:	3b08      	subs	r3, #8
    cff6:	681a      	ldr	r2, [r3, #0]
    cff8:	687b      	ldr	r3, [r7, #4]
    cffa:	009b      	lsls	r3, r3, #2
    cffc:	2108      	movs	r1, #8
    cffe:	468c      	mov	ip, r1
    d000:	44bc      	add	ip, r7
    d002:	4463      	add	r3, ip
    d004:	3b08      	subs	r3, #8
    d006:	681b      	ldr	r3, [r3, #0]
    d008:	781b      	ldrb	r3, [r3, #0]
    d00a:	b2db      	uxtb	r3, r3
    d00c:	2102      	movs	r1, #2
    d00e:	430b      	orrs	r3, r1
    d010:	b2db      	uxtb	r3, r3
    d012:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    d014:	687b      	ldr	r3, [r7, #4]
    d016:	3301      	adds	r3, #1
    d018:	607b      	str	r3, [r7, #4]
    d01a:	687b      	ldr	r3, [r7, #4]
    d01c:	2b00      	cmp	r3, #0
    d01e:	d0e3      	beq.n	cfe8 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    d020:	46c0      	nop			; (mov r8, r8)
    d022:	4b05      	ldr	r3, [pc, #20]	; (d038 <_extint_enable+0x60>)
    d024:	4798      	blx	r3
    d026:	1e03      	subs	r3, r0, #0
    d028:	d1fb      	bne.n	d022 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    d02a:	46c0      	nop			; (mov r8, r8)
    d02c:	46bd      	mov	sp, r7
    d02e:	b002      	add	sp, #8
    d030:	bd80      	pop	{r7, pc}
    d032:	46c0      	nop			; (mov r8, r8)
    d034:	40001800 	.word	0x40001800
    d038:	0000ceb1 	.word	0x0000ceb1

0000d03c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    d03c:	b580      	push	{r7, lr}
    d03e:	b082      	sub	sp, #8
    d040:	af00      	add	r7, sp, #0
    d042:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    d044:	687b      	ldr	r3, [r7, #4]
    d046:	2200      	movs	r2, #0
    d048:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    d04a:	687b      	ldr	r3, [r7, #4]
    d04c:	2200      	movs	r2, #0
    d04e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    d050:	687b      	ldr	r3, [r7, #4]
    d052:	2201      	movs	r2, #1
    d054:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    d056:	687b      	ldr	r3, [r7, #4]
    d058:	2201      	movs	r2, #1
    d05a:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    d05c:	687b      	ldr	r3, [r7, #4]
    d05e:	2200      	movs	r2, #0
    d060:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    d062:	687b      	ldr	r3, [r7, #4]
    d064:	2202      	movs	r2, #2
    d066:	72da      	strb	r2, [r3, #11]
}
    d068:	46c0      	nop			; (mov r8, r8)
    d06a:	46bd      	mov	sp, r7
    d06c:	b002      	add	sp, #8
    d06e:	bd80      	pop	{r7, pc}

0000d070 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    d070:	b580      	push	{r7, lr}
    d072:	b086      	sub	sp, #24
    d074:	af00      	add	r7, sp, #0
    d076:	0002      	movs	r2, r0
    d078:	6039      	str	r1, [r7, #0]
    d07a:	1dfb      	adds	r3, r7, #7
    d07c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    d07e:	2308      	movs	r3, #8
    d080:	18fb      	adds	r3, r7, r3
    d082:	0018      	movs	r0, r3
    d084:	4b36      	ldr	r3, [pc, #216]	; (d160 <extint_chan_set_config+0xf0>)
    d086:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    d088:	683b      	ldr	r3, [r7, #0]
    d08a:	685b      	ldr	r3, [r3, #4]
    d08c:	b2da      	uxtb	r2, r3
    d08e:	2308      	movs	r3, #8
    d090:	18fb      	adds	r3, r7, r3
    d092:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d094:	2308      	movs	r3, #8
    d096:	18fb      	adds	r3, r7, r3
    d098:	2200      	movs	r2, #0
    d09a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    d09c:	683b      	ldr	r3, [r7, #0]
    d09e:	7a1a      	ldrb	r2, [r3, #8]
    d0a0:	2308      	movs	r3, #8
    d0a2:	18fb      	adds	r3, r7, r3
    d0a4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    d0a6:	683b      	ldr	r3, [r7, #0]
    d0a8:	681b      	ldr	r3, [r3, #0]
    d0aa:	b2db      	uxtb	r3, r3
    d0ac:	2208      	movs	r2, #8
    d0ae:	18ba      	adds	r2, r7, r2
    d0b0:	0011      	movs	r1, r2
    d0b2:	0018      	movs	r0, r3
    d0b4:	4b2b      	ldr	r3, [pc, #172]	; (d164 <extint_chan_set_config+0xf4>)
    d0b6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    d0b8:	1dfb      	adds	r3, r7, #7
    d0ba:	781b      	ldrb	r3, [r3, #0]
    d0bc:	0018      	movs	r0, r3
    d0be:	4b2a      	ldr	r3, [pc, #168]	; (d168 <extint_chan_set_config+0xf8>)
    d0c0:	4798      	blx	r3
    d0c2:	0003      	movs	r3, r0
    d0c4:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    d0c6:	1dfb      	adds	r3, r7, #7
    d0c8:	781b      	ldrb	r3, [r3, #0]
    d0ca:	2207      	movs	r2, #7
    d0cc:	4013      	ands	r3, r2
    d0ce:	009b      	lsls	r3, r3, #2
    d0d0:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    d0d2:	683b      	ldr	r3, [r7, #0]
    d0d4:	7adb      	ldrb	r3, [r3, #11]
    d0d6:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    d0d8:	683b      	ldr	r3, [r7, #0]
    d0da:	7a9b      	ldrb	r3, [r3, #10]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d003      	beq.n	d0e8 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    d0e0:	697b      	ldr	r3, [r7, #20]
    d0e2:	2208      	movs	r2, #8
    d0e4:	4313      	orrs	r3, r2
    d0e6:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    d0e8:	1dfb      	adds	r3, r7, #7
    d0ea:	781b      	ldrb	r3, [r3, #0]
    d0ec:	08db      	lsrs	r3, r3, #3
    d0ee:	b2db      	uxtb	r3, r3
    d0f0:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    d0f2:	1dfb      	adds	r3, r7, #7
    d0f4:	781b      	ldrb	r3, [r3, #0]
    d0f6:	08db      	lsrs	r3, r3, #3
    d0f8:	b2db      	uxtb	r3, r3
    d0fa:	001a      	movs	r2, r3
    d0fc:	693b      	ldr	r3, [r7, #16]
    d0fe:	3206      	adds	r2, #6
    d100:	0092      	lsls	r2, r2, #2
    d102:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    d104:	210f      	movs	r1, #15
    d106:	68fa      	ldr	r2, [r7, #12]
    d108:	4091      	lsls	r1, r2
    d10a:	000a      	movs	r2, r1
    d10c:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    d10e:	401a      	ands	r2, r3
			(new_config << config_pos);
    d110:	6979      	ldr	r1, [r7, #20]
    d112:	68fb      	ldr	r3, [r7, #12]
    d114:	4099      	lsls	r1, r3
    d116:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    d118:	431a      	orrs	r2, r3
    d11a:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    d11c:	693b      	ldr	r3, [r7, #16]
    d11e:	1d82      	adds	r2, r0, #6
    d120:	0092      	lsls	r2, r2, #2
    d122:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    d124:	683b      	ldr	r3, [r7, #0]
    d126:	7a5b      	ldrb	r3, [r3, #9]
    d128:	2b00      	cmp	r3, #0
    d12a:	d00a      	beq.n	d142 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    d12c:	693b      	ldr	r3, [r7, #16]
    d12e:	695a      	ldr	r2, [r3, #20]
    d130:	1dfb      	adds	r3, r7, #7
    d132:	781b      	ldrb	r3, [r3, #0]
    d134:	2101      	movs	r1, #1
    d136:	4099      	lsls	r1, r3
    d138:	000b      	movs	r3, r1
    d13a:	431a      	orrs	r2, r3
    d13c:	693b      	ldr	r3, [r7, #16]
    d13e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    d140:	e00a      	b.n	d158 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    d142:	693b      	ldr	r3, [r7, #16]
    d144:	695b      	ldr	r3, [r3, #20]
    d146:	1dfa      	adds	r2, r7, #7
    d148:	7812      	ldrb	r2, [r2, #0]
    d14a:	2101      	movs	r1, #1
    d14c:	4091      	lsls	r1, r2
    d14e:	000a      	movs	r2, r1
    d150:	43d2      	mvns	r2, r2
    d152:	401a      	ands	r2, r3
    d154:	693b      	ldr	r3, [r7, #16]
    d156:	615a      	str	r2, [r3, #20]
}
    d158:	46c0      	nop			; (mov r8, r8)
    d15a:	46bd      	mov	sp, r7
    d15c:	b006      	add	sp, #24
    d15e:	bd80      	pop	{r7, pc}
    d160:	0000ce11 	.word	0x0000ce11
    d164:	00013c19 	.word	0x00013c19
    d168:	0000ce65 	.word	0x0000ce65

0000d16c <system_gclk_chan_get_config_defaults>:
{
    d16c:	b580      	push	{r7, lr}
    d16e:	b082      	sub	sp, #8
    d170:	af00      	add	r7, sp, #0
    d172:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    d174:	687b      	ldr	r3, [r7, #4]
    d176:	2200      	movs	r2, #0
    d178:	701a      	strb	r2, [r3, #0]
}
    d17a:	46c0      	nop			; (mov r8, r8)
    d17c:	46bd      	mov	sp, r7
    d17e:	b002      	add	sp, #8
    d180:	bd80      	pop	{r7, pc}
	...

0000d184 <system_apb_clock_set_mask>:
{
    d184:	b580      	push	{r7, lr}
    d186:	b082      	sub	sp, #8
    d188:	af00      	add	r7, sp, #0
    d18a:	0002      	movs	r2, r0
    d18c:	6039      	str	r1, [r7, #0]
    d18e:	1dfb      	adds	r3, r7, #7
    d190:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    d192:	1dfb      	adds	r3, r7, #7
    d194:	781b      	ldrb	r3, [r3, #0]
    d196:	2b01      	cmp	r3, #1
    d198:	d00a      	beq.n	d1b0 <system_apb_clock_set_mask+0x2c>
    d19a:	2b02      	cmp	r3, #2
    d19c:	d00f      	beq.n	d1be <system_apb_clock_set_mask+0x3a>
    d19e:	2b00      	cmp	r3, #0
    d1a0:	d114      	bne.n	d1cc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    d1a2:	4b0e      	ldr	r3, [pc, #56]	; (d1dc <system_apb_clock_set_mask+0x58>)
    d1a4:	4a0d      	ldr	r2, [pc, #52]	; (d1dc <system_apb_clock_set_mask+0x58>)
    d1a6:	6991      	ldr	r1, [r2, #24]
    d1a8:	683a      	ldr	r2, [r7, #0]
    d1aa:	430a      	orrs	r2, r1
    d1ac:	619a      	str	r2, [r3, #24]
			break;
    d1ae:	e00f      	b.n	d1d0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    d1b0:	4b0a      	ldr	r3, [pc, #40]	; (d1dc <system_apb_clock_set_mask+0x58>)
    d1b2:	4a0a      	ldr	r2, [pc, #40]	; (d1dc <system_apb_clock_set_mask+0x58>)
    d1b4:	69d1      	ldr	r1, [r2, #28]
    d1b6:	683a      	ldr	r2, [r7, #0]
    d1b8:	430a      	orrs	r2, r1
    d1ba:	61da      	str	r2, [r3, #28]
			break;
    d1bc:	e008      	b.n	d1d0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    d1be:	4b07      	ldr	r3, [pc, #28]	; (d1dc <system_apb_clock_set_mask+0x58>)
    d1c0:	4a06      	ldr	r2, [pc, #24]	; (d1dc <system_apb_clock_set_mask+0x58>)
    d1c2:	6a11      	ldr	r1, [r2, #32]
    d1c4:	683a      	ldr	r2, [r7, #0]
    d1c6:	430a      	orrs	r2, r1
    d1c8:	621a      	str	r2, [r3, #32]
			break;
    d1ca:	e001      	b.n	d1d0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    d1cc:	2317      	movs	r3, #23
    d1ce:	e000      	b.n	d1d2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    d1d0:	2300      	movs	r3, #0
}
    d1d2:	0018      	movs	r0, r3
    d1d4:	46bd      	mov	sp, r7
    d1d6:	b002      	add	sp, #8
    d1d8:	bd80      	pop	{r7, pc}
    d1da:	46c0      	nop			; (mov r8, r8)
    d1dc:	40000400 	.word	0x40000400

0000d1e0 <system_interrupt_enable>:
{
    d1e0:	b580      	push	{r7, lr}
    d1e2:	b082      	sub	sp, #8
    d1e4:	af00      	add	r7, sp, #0
    d1e6:	0002      	movs	r2, r0
    d1e8:	1dfb      	adds	r3, r7, #7
    d1ea:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d1ec:	4b06      	ldr	r3, [pc, #24]	; (d208 <system_interrupt_enable+0x28>)
    d1ee:	1dfa      	adds	r2, r7, #7
    d1f0:	7812      	ldrb	r2, [r2, #0]
    d1f2:	0011      	movs	r1, r2
    d1f4:	221f      	movs	r2, #31
    d1f6:	400a      	ands	r2, r1
    d1f8:	2101      	movs	r1, #1
    d1fa:	4091      	lsls	r1, r2
    d1fc:	000a      	movs	r2, r1
    d1fe:	601a      	str	r2, [r3, #0]
}
    d200:	46c0      	nop			; (mov r8, r8)
    d202:	46bd      	mov	sp, r7
    d204:	b002      	add	sp, #8
    d206:	bd80      	pop	{r7, pc}
    d208:	e000e100 	.word	0xe000e100

0000d20c <system_interrupt_disable>:
{
    d20c:	b580      	push	{r7, lr}
    d20e:	b082      	sub	sp, #8
    d210:	af00      	add	r7, sp, #0
    d212:	0002      	movs	r2, r0
    d214:	1dfb      	adds	r3, r7, #7
    d216:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d218:	4a07      	ldr	r2, [pc, #28]	; (d238 <system_interrupt_disable+0x2c>)
    d21a:	1dfb      	adds	r3, r7, #7
    d21c:	781b      	ldrb	r3, [r3, #0]
    d21e:	0019      	movs	r1, r3
    d220:	231f      	movs	r3, #31
    d222:	400b      	ands	r3, r1
    d224:	2101      	movs	r1, #1
    d226:	4099      	lsls	r1, r3
    d228:	000b      	movs	r3, r1
    d22a:	0019      	movs	r1, r3
    d22c:	2380      	movs	r3, #128	; 0x80
    d22e:	50d1      	str	r1, [r2, r3]
}
    d230:	46c0      	nop			; (mov r8, r8)
    d232:	46bd      	mov	sp, r7
    d234:	b002      	add	sp, #8
    d236:	bd80      	pop	{r7, pc}
    d238:	e000e100 	.word	0xe000e100

0000d23c <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
    d23c:	b580      	push	{r7, lr}
    d23e:	b084      	sub	sp, #16
    d240:	af00      	add	r7, sp, #0
    d242:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d244:	687b      	ldr	r3, [r7, #4]
    d246:	681b      	ldr	r3, [r3, #0]
    d248:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    d24a:	68fb      	ldr	r3, [r7, #12]
    d24c:	7a9b      	ldrb	r3, [r3, #10]
    d24e:	b2db      	uxtb	r3, r3
    d250:	b25b      	sxtb	r3, r3
    d252:	2b00      	cmp	r3, #0
    d254:	da01      	bge.n	d25a <rtc_count_is_syncing+0x1e>
                return true;
    d256:	2301      	movs	r3, #1
    d258:	e000      	b.n	d25c <rtc_count_is_syncing+0x20>
        }

        return false;
    d25a:	2300      	movs	r3, #0
}
    d25c:	0018      	movs	r0, r3
    d25e:	46bd      	mov	sp, r7
    d260:	b004      	add	sp, #16
    d262:	bd80      	pop	{r7, pc}

0000d264 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    d264:	b580      	push	{r7, lr}
    d266:	b084      	sub	sp, #16
    d268:	af00      	add	r7, sp, #0
    d26a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d26c:	687b      	ldr	r3, [r7, #4]
    d26e:	681b      	ldr	r3, [r3, #0]
    d270:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    d272:	2003      	movs	r0, #3
    d274:	4b0a      	ldr	r3, [pc, #40]	; (d2a0 <rtc_count_enable+0x3c>)
    d276:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    d278:	46c0      	nop			; (mov r8, r8)
    d27a:	687b      	ldr	r3, [r7, #4]
    d27c:	0018      	movs	r0, r3
    d27e:	4b09      	ldr	r3, [pc, #36]	; (d2a4 <rtc_count_enable+0x40>)
    d280:	4798      	blx	r3
    d282:	1e03      	subs	r3, r0, #0
    d284:	d1f9      	bne.n	d27a <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    d286:	68fb      	ldr	r3, [r7, #12]
    d288:	881b      	ldrh	r3, [r3, #0]
    d28a:	b29b      	uxth	r3, r3
    d28c:	2202      	movs	r2, #2
    d28e:	4313      	orrs	r3, r2
    d290:	b29a      	uxth	r2, r3
    d292:	68fb      	ldr	r3, [r7, #12]
    d294:	801a      	strh	r2, [r3, #0]
}
    d296:	46c0      	nop			; (mov r8, r8)
    d298:	46bd      	mov	sp, r7
    d29a:	b004      	add	sp, #16
    d29c:	bd80      	pop	{r7, pc}
    d29e:	46c0      	nop			; (mov r8, r8)
    d2a0:	0000d1e1 	.word	0x0000d1e1
    d2a4:	0000d23d 	.word	0x0000d23d

0000d2a8 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    d2a8:	b580      	push	{r7, lr}
    d2aa:	b084      	sub	sp, #16
    d2ac:	af00      	add	r7, sp, #0
    d2ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d2b0:	687b      	ldr	r3, [r7, #4]
    d2b2:	681b      	ldr	r3, [r3, #0]
    d2b4:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    d2b6:	2003      	movs	r0, #3
    d2b8:	4b0d      	ldr	r3, [pc, #52]	; (d2f0 <rtc_count_disable+0x48>)
    d2ba:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    d2bc:	46c0      	nop			; (mov r8, r8)
    d2be:	687b      	ldr	r3, [r7, #4]
    d2c0:	0018      	movs	r0, r3
    d2c2:	4b0c      	ldr	r3, [pc, #48]	; (d2f4 <rtc_count_disable+0x4c>)
    d2c4:	4798      	blx	r3
    d2c6:	1e03      	subs	r3, r0, #0
    d2c8:	d1f9      	bne.n	d2be <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    d2ca:	68fb      	ldr	r3, [r7, #12]
    d2cc:	22c1      	movs	r2, #193	; 0xc1
    d2ce:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    d2d0:	68fb      	ldr	r3, [r7, #12]
    d2d2:	22c1      	movs	r2, #193	; 0xc1
    d2d4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    d2d6:	68fb      	ldr	r3, [r7, #12]
    d2d8:	881b      	ldrh	r3, [r3, #0]
    d2da:	b29b      	uxth	r3, r3
    d2dc:	2202      	movs	r2, #2
    d2de:	4393      	bics	r3, r2
    d2e0:	b29a      	uxth	r2, r3
    d2e2:	68fb      	ldr	r3, [r7, #12]
    d2e4:	801a      	strh	r2, [r3, #0]
}
    d2e6:	46c0      	nop			; (mov r8, r8)
    d2e8:	46bd      	mov	sp, r7
    d2ea:	b004      	add	sp, #16
    d2ec:	bd80      	pop	{r7, pc}
    d2ee:	46c0      	nop			; (mov r8, r8)
    d2f0:	0000d20d 	.word	0x0000d20d
    d2f4:	0000d23d 	.word	0x0000d23d

0000d2f8 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    d2f8:	b580      	push	{r7, lr}
    d2fa:	b084      	sub	sp, #16
    d2fc:	af00      	add	r7, sp, #0
    d2fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d300:	687b      	ldr	r3, [r7, #4]
    d302:	681b      	ldr	r3, [r3, #0]
    d304:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
    d306:	687b      	ldr	r3, [r7, #4]
    d308:	0018      	movs	r0, r3
    d30a:	4b0d      	ldr	r3, [pc, #52]	; (d340 <rtc_count_reset+0x48>)
    d30c:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    d30e:	687b      	ldr	r3, [r7, #4]
    d310:	2200      	movs	r2, #0
    d312:	829a      	strh	r2, [r3, #20]
	module->enabled_callback    = 0;
    d314:	687b      	ldr	r3, [r7, #4]
    d316:	2200      	movs	r2, #0
    d318:	82da      	strh	r2, [r3, #22]
#endif

	while (rtc_count_is_syncing(module)) {
    d31a:	46c0      	nop			; (mov r8, r8)
    d31c:	687b      	ldr	r3, [r7, #4]
    d31e:	0018      	movs	r0, r3
    d320:	4b08      	ldr	r3, [pc, #32]	; (d344 <rtc_count_reset+0x4c>)
    d322:	4798      	blx	r3
    d324:	1e03      	subs	r3, r0, #0
    d326:	d1f9      	bne.n	d31c <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    d328:	68fb      	ldr	r3, [r7, #12]
    d32a:	881b      	ldrh	r3, [r3, #0]
    d32c:	b29b      	uxth	r3, r3
    d32e:	2201      	movs	r2, #1
    d330:	4313      	orrs	r3, r2
    d332:	b29a      	uxth	r2, r3
    d334:	68fb      	ldr	r3, [r7, #12]
    d336:	801a      	strh	r2, [r3, #0]
}
    d338:	46c0      	nop			; (mov r8, r8)
    d33a:	46bd      	mov	sp, r7
    d33c:	b004      	add	sp, #16
    d33e:	bd80      	pop	{r7, pc}
    d340:	0000d2a9 	.word	0x0000d2a9
    d344:	0000d23d 	.word	0x0000d23d

0000d348 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
    d348:	b580      	push	{r7, lr}
    d34a:	b084      	sub	sp, #16
    d34c:	af00      	add	r7, sp, #0
    d34e:	6078      	str	r0, [r7, #4]
    d350:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d352:	687b      	ldr	r3, [r7, #4]
    d354:	681b      	ldr	r3, [r3, #0]
    d356:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
    d358:	683b      	ldr	r3, [r7, #0]
    d35a:	881a      	ldrh	r2, [r3, #0]
    d35c:	68bb      	ldr	r3, [r7, #8]
    d35e:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    d360:	683b      	ldr	r3, [r7, #0]
    d362:	789b      	ldrb	r3, [r3, #2]
    d364:	2b00      	cmp	r3, #0
    d366:	d03a      	beq.n	d3de <_rtc_count_set_config+0x96>
    d368:	2b01      	cmp	r3, #1
    d36a:	d000      	beq.n	d36e <_rtc_count_set_config+0x26>
    d36c:	e06c      	b.n	d448 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
    d36e:	68bb      	ldr	r3, [r7, #8]
    d370:	881b      	ldrh	r3, [r3, #0]
    d372:	b29a      	uxth	r2, r3
    d374:	68bb      	ldr	r3, [r7, #8]
    d376:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    d378:	683b      	ldr	r3, [r7, #0]
    d37a:	78db      	ldrb	r3, [r3, #3]
    d37c:	2b00      	cmp	r3, #0
    d37e:	d007      	beq.n	d390 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
    d380:	68bb      	ldr	r3, [r7, #8]
    d382:	881b      	ldrh	r3, [r3, #0]
    d384:	b29b      	uxth	r3, r3
    d386:	2280      	movs	r2, #128	; 0x80
    d388:	4313      	orrs	r3, r2
    d38a:	b29a      	uxth	r2, r3
    d38c:	68bb      	ldr	r3, [r7, #8]
    d38e:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    d390:	230f      	movs	r3, #15
    d392:	18fb      	adds	r3, r7, r3
    d394:	2200      	movs	r2, #0
    d396:	701a      	strb	r2, [r3, #0]
    d398:	e01b      	b.n	d3d2 <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
    d39a:	46c0      	nop			; (mov r8, r8)
    d39c:	687b      	ldr	r3, [r7, #4]
    d39e:	0018      	movs	r0, r3
    d3a0:	4b37      	ldr	r3, [pc, #220]	; (d480 <_rtc_count_set_config+0x138>)
    d3a2:	4798      	blx	r3
    d3a4:	1e03      	subs	r3, r0, #0
    d3a6:	d1f9      	bne.n	d39c <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    d3a8:	230f      	movs	r3, #15
    d3aa:	18fb      	adds	r3, r7, r3
    d3ac:	781a      	ldrb	r2, [r3, #0]
    d3ae:	683b      	ldr	r3, [r7, #0]
    d3b0:	3202      	adds	r2, #2
    d3b2:	0092      	lsls	r2, r2, #2
    d3b4:	58d1      	ldr	r1, [r2, r3]
    d3b6:	230f      	movs	r3, #15
    d3b8:	18fb      	adds	r3, r7, r3
    d3ba:	781a      	ldrb	r2, [r3, #0]
    d3bc:	687b      	ldr	r3, [r7, #4]
    d3be:	0018      	movs	r0, r3
    d3c0:	4b30      	ldr	r3, [pc, #192]	; (d484 <_rtc_count_set_config+0x13c>)
    d3c2:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    d3c4:	230f      	movs	r3, #15
    d3c6:	18fb      	adds	r3, r7, r3
    d3c8:	781a      	ldrb	r2, [r3, #0]
    d3ca:	230f      	movs	r3, #15
    d3cc:	18fb      	adds	r3, r7, r3
    d3ce:	3201      	adds	r2, #1
    d3d0:	701a      	strb	r2, [r3, #0]
    d3d2:	230f      	movs	r3, #15
    d3d4:	18fb      	adds	r3, r7, r3
    d3d6:	781b      	ldrb	r3, [r3, #0]
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d0de      	beq.n	d39a <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
    d3dc:	e036      	b.n	d44c <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
    d3de:	68bb      	ldr	r3, [r7, #8]
    d3e0:	881b      	ldrh	r3, [r3, #0]
    d3e2:	b29b      	uxth	r3, r3
    d3e4:	2204      	movs	r2, #4
    d3e6:	4313      	orrs	r3, r2
    d3e8:	b29a      	uxth	r2, r3
    d3ea:	68bb      	ldr	r3, [r7, #8]
    d3ec:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    d3ee:	683b      	ldr	r3, [r7, #0]
    d3f0:	78db      	ldrb	r3, [r3, #3]
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d001      	beq.n	d3fa <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    d3f6:	2317      	movs	r3, #23
    d3f8:	e03e      	b.n	d478 <_rtc_count_set_config+0x130>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    d3fa:	230e      	movs	r3, #14
    d3fc:	18fb      	adds	r3, r7, r3
    d3fe:	2200      	movs	r2, #0
    d400:	701a      	strb	r2, [r3, #0]
    d402:	e01b      	b.n	d43c <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
    d404:	46c0      	nop			; (mov r8, r8)
    d406:	687b      	ldr	r3, [r7, #4]
    d408:	0018      	movs	r0, r3
    d40a:	4b1d      	ldr	r3, [pc, #116]	; (d480 <_rtc_count_set_config+0x138>)
    d40c:	4798      	blx	r3
    d40e:	1e03      	subs	r3, r0, #0
    d410:	d1f9      	bne.n	d406 <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    d412:	230e      	movs	r3, #14
    d414:	18fb      	adds	r3, r7, r3
    d416:	781a      	ldrb	r2, [r3, #0]
    d418:	683b      	ldr	r3, [r7, #0]
    d41a:	3202      	adds	r2, #2
    d41c:	0092      	lsls	r2, r2, #2
    d41e:	58d1      	ldr	r1, [r2, r3]
    d420:	230e      	movs	r3, #14
    d422:	18fb      	adds	r3, r7, r3
    d424:	781a      	ldrb	r2, [r3, #0]
    d426:	687b      	ldr	r3, [r7, #4]
    d428:	0018      	movs	r0, r3
    d42a:	4b16      	ldr	r3, [pc, #88]	; (d484 <_rtc_count_set_config+0x13c>)
    d42c:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    d42e:	230e      	movs	r3, #14
    d430:	18fb      	adds	r3, r7, r3
    d432:	781a      	ldrb	r2, [r3, #0]
    d434:	230e      	movs	r3, #14
    d436:	18fb      	adds	r3, r7, r3
    d438:	3201      	adds	r2, #1
    d43a:	701a      	strb	r2, [r3, #0]
    d43c:	230e      	movs	r3, #14
    d43e:	18fb      	adds	r3, r7, r3
    d440:	781b      	ldrb	r3, [r3, #0]
    d442:	2b01      	cmp	r3, #1
    d444:	d9de      	bls.n	d404 <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
    d446:	e001      	b.n	d44c <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    d448:	2317      	movs	r3, #23
    d44a:	e015      	b.n	d478 <_rtc_count_set_config+0x130>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    d44c:	683b      	ldr	r3, [r7, #0]
    d44e:	791b      	ldrb	r3, [r3, #4]
    d450:	2b00      	cmp	r3, #0
    d452:	d010      	beq.n	d476 <_rtc_count_set_config+0x12e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    d454:	68bb      	ldr	r3, [r7, #8]
    d456:	885b      	ldrh	r3, [r3, #2]
    d458:	b29b      	uxth	r3, r3
    d45a:	2280      	movs	r2, #128	; 0x80
    d45c:	01d2      	lsls	r2, r2, #7
    d45e:	4313      	orrs	r3, r2
    d460:	b29a      	uxth	r2, r3
    d462:	68bb      	ldr	r3, [r7, #8]
    d464:	805a      	strh	r2, [r3, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    d466:	68bb      	ldr	r3, [r7, #8]
    d468:	885b      	ldrh	r3, [r3, #2]
    d46a:	b29b      	uxth	r3, r3
    d46c:	4a06      	ldr	r2, [pc, #24]	; (d488 <_rtc_count_set_config+0x140>)
    d46e:	4313      	orrs	r3, r2
    d470:	b29a      	uxth	r2, r3
    d472:	68bb      	ldr	r3, [r7, #8]
    d474:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    d476:	2300      	movs	r3, #0
}
    d478:	0018      	movs	r0, r3
    d47a:	46bd      	mov	sp, r7
    d47c:	b004      	add	sp, #16
    d47e:	bd80      	pop	{r7, pc}
    d480:	0000d23d 	.word	0x0000d23d
    d484:	0000d51d 	.word	0x0000d51d
    d488:	ffff8000 	.word	0xffff8000

0000d48c <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    d48c:	b580      	push	{r7, lr}
    d48e:	b086      	sub	sp, #24
    d490:	af00      	add	r7, sp, #0
    d492:	60f8      	str	r0, [r7, #12]
    d494:	60b9      	str	r1, [r7, #8]
    d496:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    d498:	68fb      	ldr	r3, [r7, #12]
    d49a:	68ba      	ldr	r2, [r7, #8]
    d49c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    d49e:	2120      	movs	r1, #32
    d4a0:	2000      	movs	r0, #0
    d4a2:	4b17      	ldr	r3, [pc, #92]	; (d500 <rtc_count_init+0x74>)
    d4a4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    d4a6:	2314      	movs	r3, #20
    d4a8:	18fb      	adds	r3, r7, r3
    d4aa:	0018      	movs	r0, r3
    d4ac:	4b15      	ldr	r3, [pc, #84]	; (d504 <rtc_count_init+0x78>)
    d4ae:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    d4b0:	2314      	movs	r3, #20
    d4b2:	18fb      	adds	r3, r7, r3
    d4b4:	2202      	movs	r2, #2
    d4b6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    d4b8:	2314      	movs	r3, #20
    d4ba:	18fb      	adds	r3, r7, r3
    d4bc:	0019      	movs	r1, r3
    d4be:	2004      	movs	r0, #4
    d4c0:	4b11      	ldr	r3, [pc, #68]	; (d508 <rtc_count_init+0x7c>)
    d4c2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    d4c4:	2004      	movs	r0, #4
    d4c6:	4b11      	ldr	r3, [pc, #68]	; (d50c <rtc_count_init+0x80>)
    d4c8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    d4ca:	68fb      	ldr	r3, [r7, #12]
    d4cc:	0018      	movs	r0, r3
    d4ce:	4b10      	ldr	r3, [pc, #64]	; (d510 <rtc_count_init+0x84>)
    d4d0:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    d4d2:	687b      	ldr	r3, [r7, #4]
    d4d4:	789a      	ldrb	r2, [r3, #2]
    d4d6:	68fb      	ldr	r3, [r7, #12]
    d4d8:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    d4da:	687b      	ldr	r3, [r7, #4]
    d4dc:	791a      	ldrb	r2, [r3, #4]
    d4de:	68fb      	ldr	r3, [r7, #12]
    d4e0:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    d4e2:	4b0c      	ldr	r3, [pc, #48]	; (d514 <rtc_count_init+0x88>)
    d4e4:	68fa      	ldr	r2, [r7, #12]
    d4e6:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
    d4e8:	687a      	ldr	r2, [r7, #4]
    d4ea:	68fb      	ldr	r3, [r7, #12]
    d4ec:	0011      	movs	r1, r2
    d4ee:	0018      	movs	r0, r3
    d4f0:	4b09      	ldr	r3, [pc, #36]	; (d518 <rtc_count_init+0x8c>)
    d4f2:	4798      	blx	r3
    d4f4:	0003      	movs	r3, r0
}
    d4f6:	0018      	movs	r0, r3
    d4f8:	46bd      	mov	sp, r7
    d4fa:	b006      	add	sp, #24
    d4fc:	bd80      	pop	{r7, pc}
    d4fe:	46c0      	nop			; (mov r8, r8)
    d500:	0000d185 	.word	0x0000d185
    d504:	0000d16d 	.word	0x0000d16d
    d508:	0001392d 	.word	0x0001392d
    d50c:	00013971 	.word	0x00013971
    d510:	0000d2f9 	.word	0x0000d2f9
    d514:	200008f0 	.word	0x200008f0
    d518:	0000d349 	.word	0x0000d349

0000d51c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    d51c:	b580      	push	{r7, lr}
    d51e:	b086      	sub	sp, #24
    d520:	af00      	add	r7, sp, #0
    d522:	60f8      	str	r0, [r7, #12]
    d524:	60b9      	str	r1, [r7, #8]
    d526:	1dfb      	adds	r3, r7, #7
    d528:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d52a:	68fb      	ldr	r3, [r7, #12]
    d52c:	681b      	ldr	r3, [r3, #0]
    d52e:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    d530:	46c0      	nop			; (mov r8, r8)
    d532:	68fb      	ldr	r3, [r7, #12]
    d534:	0018      	movs	r0, r3
    d536:	4b1a      	ldr	r3, [pc, #104]	; (d5a0 <rtc_count_set_compare+0x84>)
    d538:	4798      	blx	r3
    d53a:	1e03      	subs	r3, r0, #0
    d53c:	d1f9      	bne.n	d532 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    d53e:	68fb      	ldr	r3, [r7, #12]
    d540:	791b      	ldrb	r3, [r3, #4]
    d542:	2b00      	cmp	r3, #0
    d544:	d00f      	beq.n	d566 <rtc_count_set_compare+0x4a>
    d546:	2b01      	cmp	r3, #1
    d548:	d122      	bne.n	d590 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
    d54a:	1dfb      	adds	r3, r7, #7
    d54c:	781b      	ldrb	r3, [r3, #0]
    d54e:	2b01      	cmp	r3, #1
    d550:	d901      	bls.n	d556 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    d552:	2317      	movs	r3, #23
    d554:	e01f      	b.n	d596 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    d556:	1dfb      	adds	r3, r7, #7
    d558:	781a      	ldrb	r2, [r3, #0]
    d55a:	697b      	ldr	r3, [r7, #20]
    d55c:	3206      	adds	r2, #6
    d55e:	0092      	lsls	r2, r2, #2
    d560:	68b9      	ldr	r1, [r7, #8]
    d562:	50d1      	str	r1, [r2, r3]

			break;
    d564:	e016      	b.n	d594 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    d566:	1dfb      	adds	r3, r7, #7
    d568:	781b      	ldrb	r3, [r3, #0]
    d56a:	2b02      	cmp	r3, #2
    d56c:	d901      	bls.n	d572 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    d56e:	2317      	movs	r3, #23
    d570:	e011      	b.n	d596 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    d572:	68bb      	ldr	r3, [r7, #8]
    d574:	4a0b      	ldr	r2, [pc, #44]	; (d5a4 <rtc_count_set_compare+0x88>)
    d576:	4293      	cmp	r3, r2
    d578:	d901      	bls.n	d57e <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    d57a:	2317      	movs	r3, #23
    d57c:	e00b      	b.n	d596 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    d57e:	1dfb      	adds	r3, r7, #7
    d580:	781a      	ldrb	r2, [r3, #0]
    d582:	68bb      	ldr	r3, [r7, #8]
    d584:	b299      	uxth	r1, r3
    d586:	697b      	ldr	r3, [r7, #20]
    d588:	320c      	adds	r2, #12
    d58a:	0052      	lsls	r2, r2, #1
    d58c:	52d1      	strh	r1, [r2, r3]

			break;
    d58e:	e001      	b.n	d594 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    d590:	231a      	movs	r3, #26
    d592:	e000      	b.n	d596 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    d594:	2300      	movs	r3, #0
}
    d596:	0018      	movs	r0, r3
    d598:	46bd      	mov	sp, r7
    d59a:	b006      	add	sp, #24
    d59c:	bd80      	pop	{r7, pc}
    d59e:	46c0      	nop			; (mov r8, r8)
    d5a0:	0000d23d 	.word	0x0000d23d
    d5a4:	0000ffff 	.word	0x0000ffff

0000d5a8 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
    d5a8:	b580      	push	{r7, lr}
    d5aa:	b084      	sub	sp, #16
    d5ac:	af00      	add	r7, sp, #0
    d5ae:	6078      	str	r0, [r7, #4]
    d5b0:	000a      	movs	r2, r1
    d5b2:	1cbb      	adds	r3, r7, #2
    d5b4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    d5b6:	687b      	ldr	r3, [r7, #4]
    d5b8:	681b      	ldr	r3, [r3, #0]
    d5ba:	60fb      	str	r3, [r7, #12]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    d5bc:	687b      	ldr	r3, [r7, #4]
    d5be:	791b      	ldrb	r3, [r3, #4]
    d5c0:	2b00      	cmp	r3, #0
    d5c2:	d001      	beq.n	d5c8 <rtc_count_set_period+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
    d5c4:	2315      	movs	r3, #21
    d5c6:	e00b      	b.n	d5e0 <rtc_count_set_period+0x38>
	}

	while (rtc_count_is_syncing(module)) {
    d5c8:	46c0      	nop			; (mov r8, r8)
    d5ca:	687b      	ldr	r3, [r7, #4]
    d5cc:	0018      	movs	r0, r3
    d5ce:	4b06      	ldr	r3, [pc, #24]	; (d5e8 <rtc_count_set_period+0x40>)
    d5d0:	4798      	blx	r3
    d5d2:	1e03      	subs	r3, r0, #0
    d5d4:	d1f9      	bne.n	d5ca <rtc_count_set_period+0x22>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
    d5d6:	68fb      	ldr	r3, [r7, #12]
    d5d8:	1cba      	adds	r2, r7, #2
    d5da:	8812      	ldrh	r2, [r2, #0]
    d5dc:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    d5de:	2300      	movs	r3, #0
}
    d5e0:	0018      	movs	r0, r3
    d5e2:	46bd      	mov	sp, r7
    d5e4:	b004      	add	sp, #16
    d5e6:	bd80      	pop	{r7, pc}
    d5e8:	0000d23d 	.word	0x0000d23d

0000d5ec <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    d5ec:	b580      	push	{r7, lr}
    d5ee:	b086      	sub	sp, #24
    d5f0:	af00      	add	r7, sp, #0
    d5f2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    d5f4:	4b31      	ldr	r3, [pc, #196]	; (d6bc <_rtc_interrupt_handler+0xd0>)
    d5f6:	687a      	ldr	r2, [r7, #4]
    d5f8:	0092      	lsls	r2, r2, #2
    d5fa:	58d3      	ldr	r3, [r2, r3]
    d5fc:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    d5fe:	697b      	ldr	r3, [r7, #20]
    d600:	681b      	ldr	r3, [r3, #0]
    d602:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    d604:	230e      	movs	r3, #14
    d606:	18fb      	adds	r3, r7, r3
    d608:	697a      	ldr	r2, [r7, #20]
    d60a:	8ad2      	ldrh	r2, [r2, #22]
    d60c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    d60e:	697b      	ldr	r3, [r7, #20]
    d610:	8a9b      	ldrh	r3, [r3, #20]
    d612:	b29a      	uxth	r2, r3
    d614:	230e      	movs	r3, #14
    d616:	18fb      	adds	r3, r7, r3
    d618:	210e      	movs	r1, #14
    d61a:	1879      	adds	r1, r7, r1
    d61c:	8809      	ldrh	r1, [r1, #0]
    d61e:	400a      	ands	r2, r1
    d620:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    d622:	693b      	ldr	r3, [r7, #16]
    d624:	7a1b      	ldrb	r3, [r3, #8]
    d626:	b2da      	uxtb	r2, r3
    d628:	230c      	movs	r3, #12
    d62a:	18fb      	adds	r3, r7, r3
    d62c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    d62e:	693b      	ldr	r3, [r7, #16]
    d630:	79db      	ldrb	r3, [r3, #7]
    d632:	b2db      	uxtb	r3, r3
    d634:	b29a      	uxth	r2, r3
    d636:	230c      	movs	r3, #12
    d638:	18fb      	adds	r3, r7, r3
    d63a:	210c      	movs	r1, #12
    d63c:	1879      	adds	r1, r7, r1
    d63e:	8809      	ldrh	r1, [r1, #0]
    d640:	400a      	ands	r2, r1
    d642:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    d644:	230c      	movs	r3, #12
    d646:	18fb      	adds	r3, r7, r3
    d648:	881b      	ldrh	r3, [r3, #0]
    d64a:	2280      	movs	r2, #128	; 0x80
    d64c:	4013      	ands	r3, r2
    d64e:	d00c      	beq.n	d66a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    d650:	230e      	movs	r3, #14
    d652:	18fb      	adds	r3, r7, r3
    d654:	881b      	ldrh	r3, [r3, #0]
    d656:	2204      	movs	r2, #4
    d658:	4013      	ands	r3, r2
    d65a:	d002      	beq.n	d662 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    d65c:	697b      	ldr	r3, [r7, #20]
    d65e:	691b      	ldr	r3, [r3, #16]
    d660:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    d662:	693b      	ldr	r3, [r7, #16]
    d664:	2280      	movs	r2, #128	; 0x80
    d666:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    d668:	e024      	b.n	d6b4 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    d66a:	230c      	movs	r3, #12
    d66c:	18fb      	adds	r3, r7, r3
    d66e:	881b      	ldrh	r3, [r3, #0]
    d670:	2201      	movs	r2, #1
    d672:	4013      	ands	r3, r2
    d674:	d00c      	beq.n	d690 <_rtc_interrupt_handler+0xa4>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    d676:	230e      	movs	r3, #14
    d678:	18fb      	adds	r3, r7, r3
    d67a:	881b      	ldrh	r3, [r3, #0]
    d67c:	2201      	movs	r2, #1
    d67e:	4013      	ands	r3, r2
    d680:	d002      	beq.n	d688 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    d682:	697b      	ldr	r3, [r7, #20]
    d684:	689b      	ldr	r3, [r3, #8]
    d686:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    d688:	693b      	ldr	r3, [r7, #16]
    d68a:	2201      	movs	r2, #1
    d68c:	721a      	strb	r2, [r3, #8]
}
    d68e:	e011      	b.n	d6b4 <_rtc_interrupt_handler+0xc8>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    d690:	230c      	movs	r3, #12
    d692:	18fb      	adds	r3, r7, r3
    d694:	881b      	ldrh	r3, [r3, #0]
    d696:	2202      	movs	r2, #2
    d698:	4013      	ands	r3, r2
    d69a:	d00b      	beq.n	d6b4 <_rtc_interrupt_handler+0xc8>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    d69c:	230e      	movs	r3, #14
    d69e:	18fb      	adds	r3, r7, r3
    d6a0:	881b      	ldrh	r3, [r3, #0]
    d6a2:	2202      	movs	r2, #2
    d6a4:	4013      	ands	r3, r2
    d6a6:	d002      	beq.n	d6ae <_rtc_interrupt_handler+0xc2>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    d6a8:	697b      	ldr	r3, [r7, #20]
    d6aa:	68db      	ldr	r3, [r3, #12]
    d6ac:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    d6ae:	693b      	ldr	r3, [r7, #16]
    d6b0:	2202      	movs	r2, #2
    d6b2:	721a      	strb	r2, [r3, #8]
}
    d6b4:	46c0      	nop			; (mov r8, r8)
    d6b6:	46bd      	mov	sp, r7
    d6b8:	b006      	add	sp, #24
    d6ba:	bd80      	pop	{r7, pc}
    d6bc:	200008f0 	.word	0x200008f0

0000d6c0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    d6c0:	b580      	push	{r7, lr}
    d6c2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    d6c4:	2000      	movs	r0, #0
    d6c6:	4b02      	ldr	r3, [pc, #8]	; (d6d0 <RTC_Handler+0x10>)
    d6c8:	4798      	blx	r3
}
    d6ca:	46c0      	nop			; (mov r8, r8)
    d6cc:	46bd      	mov	sp, r7
    d6ce:	bd80      	pop	{r7, pc}
    d6d0:	0000d5ed 	.word	0x0000d5ed

0000d6d4 <system_gclk_chan_get_config_defaults>:
{
    d6d4:	b580      	push	{r7, lr}
    d6d6:	b082      	sub	sp, #8
    d6d8:	af00      	add	r7, sp, #0
    d6da:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    d6dc:	687b      	ldr	r3, [r7, #4]
    d6de:	2200      	movs	r2, #0
    d6e0:	701a      	strb	r2, [r3, #0]
}
    d6e2:	46c0      	nop			; (mov r8, r8)
    d6e4:	46bd      	mov	sp, r7
    d6e6:	b002      	add	sp, #8
    d6e8:	bd80      	pop	{r7, pc}

0000d6ea <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    d6ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6ec:	b08d      	sub	sp, #52	; 0x34
    d6ee:	af00      	add	r7, sp, #0
    d6f0:	60b8      	str	r0, [r7, #8]
    d6f2:	60f9      	str	r1, [r7, #12]
    d6f4:	603a      	str	r2, [r7, #0]
    d6f6:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    d6f8:	2300      	movs	r3, #0
    d6fa:	2400      	movs	r4, #0
    d6fc:	623b      	str	r3, [r7, #32]
    d6fe:	627c      	str	r4, [r7, #36]	; 0x24
    d700:	2300      	movs	r3, #0
    d702:	2400      	movs	r4, #0
    d704:	61bb      	str	r3, [r7, #24]
    d706:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    d708:	233f      	movs	r3, #63	; 0x3f
    d70a:	62fb      	str	r3, [r7, #44]	; 0x2c
    d70c:	e053      	b.n	d7b6 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    d70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d710:	3b20      	subs	r3, #32
    d712:	2b00      	cmp	r3, #0
    d714:	db04      	blt.n	d720 <long_division+0x36>
    d716:	2201      	movs	r2, #1
    d718:	409a      	lsls	r2, r3
    d71a:	0013      	movs	r3, r2
    d71c:	617b      	str	r3, [r7, #20]
    d71e:	e00b      	b.n	d738 <long_division+0x4e>
    d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d722:	2220      	movs	r2, #32
    d724:	1ad3      	subs	r3, r2, r3
    d726:	2201      	movs	r2, #1
    d728:	40da      	lsrs	r2, r3
    d72a:	0013      	movs	r3, r2
    d72c:	2100      	movs	r1, #0
    d72e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d730:	4091      	lsls	r1, r2
    d732:	000a      	movs	r2, r1
    d734:	4313      	orrs	r3, r2
    d736:	617b      	str	r3, [r7, #20]
    d738:	2201      	movs	r2, #1
    d73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d73c:	409a      	lsls	r2, r3
    d73e:	0013      	movs	r3, r2
    d740:	613b      	str	r3, [r7, #16]

		r = r << 1;
    d742:	69bb      	ldr	r3, [r7, #24]
    d744:	69fc      	ldr	r4, [r7, #28]
    d746:	18db      	adds	r3, r3, r3
    d748:	4164      	adcs	r4, r4
    d74a:	61bb      	str	r3, [r7, #24]
    d74c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    d74e:	68bb      	ldr	r3, [r7, #8]
    d750:	693a      	ldr	r2, [r7, #16]
    d752:	401a      	ands	r2, r3
    d754:	0015      	movs	r5, r2
    d756:	68fb      	ldr	r3, [r7, #12]
    d758:	697a      	ldr	r2, [r7, #20]
    d75a:	401a      	ands	r2, r3
    d75c:	0016      	movs	r6, r2
    d75e:	002b      	movs	r3, r5
    d760:	4333      	orrs	r3, r6
    d762:	d007      	beq.n	d774 <long_division+0x8a>
			r |= 0x01;
    d764:	69bb      	ldr	r3, [r7, #24]
    d766:	2201      	movs	r2, #1
    d768:	4313      	orrs	r3, r2
    d76a:	61bb      	str	r3, [r7, #24]
    d76c:	69fb      	ldr	r3, [r7, #28]
    d76e:	2200      	movs	r2, #0
    d770:	4313      	orrs	r3, r2
    d772:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    d774:	687a      	ldr	r2, [r7, #4]
    d776:	69fb      	ldr	r3, [r7, #28]
    d778:	429a      	cmp	r2, r3
    d77a:	d819      	bhi.n	d7b0 <long_division+0xc6>
    d77c:	687a      	ldr	r2, [r7, #4]
    d77e:	69fb      	ldr	r3, [r7, #28]
    d780:	429a      	cmp	r2, r3
    d782:	d103      	bne.n	d78c <long_division+0xa2>
    d784:	683a      	ldr	r2, [r7, #0]
    d786:	69bb      	ldr	r3, [r7, #24]
    d788:	429a      	cmp	r2, r3
    d78a:	d811      	bhi.n	d7b0 <long_division+0xc6>
			r = r - d;
    d78c:	69b9      	ldr	r1, [r7, #24]
    d78e:	69fa      	ldr	r2, [r7, #28]
    d790:	683b      	ldr	r3, [r7, #0]
    d792:	687c      	ldr	r4, [r7, #4]
    d794:	1ac9      	subs	r1, r1, r3
    d796:	41a2      	sbcs	r2, r4
    d798:	000b      	movs	r3, r1
    d79a:	0014      	movs	r4, r2
    d79c:	61bb      	str	r3, [r7, #24]
    d79e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    d7a0:	6a3a      	ldr	r2, [r7, #32]
    d7a2:	693b      	ldr	r3, [r7, #16]
    d7a4:	4313      	orrs	r3, r2
    d7a6:	623b      	str	r3, [r7, #32]
    d7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d7aa:	697b      	ldr	r3, [r7, #20]
    d7ac:	4313      	orrs	r3, r2
    d7ae:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7b2:	3b01      	subs	r3, #1
    d7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7b8:	2b00      	cmp	r3, #0
    d7ba:	daa8      	bge.n	d70e <long_division+0x24>
		}
	}

	return q;
    d7bc:	6a3b      	ldr	r3, [r7, #32]
    d7be:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    d7c0:	0018      	movs	r0, r3
    d7c2:	0021      	movs	r1, r4
    d7c4:	46bd      	mov	sp, r7
    d7c6:	b00d      	add	sp, #52	; 0x34
    d7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d7ca <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    d7ca:	b580      	push	{r7, lr}
    d7cc:	b086      	sub	sp, #24
    d7ce:	af00      	add	r7, sp, #0
    d7d0:	60f8      	str	r0, [r7, #12]
    d7d2:	60b9      	str	r1, [r7, #8]
    d7d4:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    d7d6:	2316      	movs	r3, #22
    d7d8:	18fb      	adds	r3, r7, r3
    d7da:	2200      	movs	r2, #0
    d7dc:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    d7de:	68bb      	ldr	r3, [r7, #8]
    d7e0:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    d7e2:	68bb      	ldr	r3, [r7, #8]
    d7e4:	085a      	lsrs	r2, r3, #1
    d7e6:	68fb      	ldr	r3, [r7, #12]
    d7e8:	429a      	cmp	r2, r3
    d7ea:	d201      	bcs.n	d7f0 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d7ec:	2340      	movs	r3, #64	; 0x40
    d7ee:	e026      	b.n	d83e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    d7f0:	68bb      	ldr	r3, [r7, #8]
    d7f2:	085b      	lsrs	r3, r3, #1
    d7f4:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    d7f6:	e00a      	b.n	d80e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    d7f8:	693a      	ldr	r2, [r7, #16]
    d7fa:	68fb      	ldr	r3, [r7, #12]
    d7fc:	1ad3      	subs	r3, r2, r3
    d7fe:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    d800:	2316      	movs	r3, #22
    d802:	18fb      	adds	r3, r7, r3
    d804:	881a      	ldrh	r2, [r3, #0]
    d806:	2316      	movs	r3, #22
    d808:	18fb      	adds	r3, r7, r3
    d80a:	3201      	adds	r2, #1
    d80c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    d80e:	693a      	ldr	r2, [r7, #16]
    d810:	68fb      	ldr	r3, [r7, #12]
    d812:	429a      	cmp	r2, r3
    d814:	d2f0      	bcs.n	d7f8 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    d816:	2316      	movs	r3, #22
    d818:	18fb      	adds	r3, r7, r3
    d81a:	2216      	movs	r2, #22
    d81c:	18ba      	adds	r2, r7, r2
    d81e:	8812      	ldrh	r2, [r2, #0]
    d820:	3a01      	subs	r2, #1
    d822:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    d824:	2316      	movs	r3, #22
    d826:	18fb      	adds	r3, r7, r3
    d828:	881b      	ldrh	r3, [r3, #0]
    d82a:	2bff      	cmp	r3, #255	; 0xff
    d82c:	d901      	bls.n	d832 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d82e:	2340      	movs	r3, #64	; 0x40
    d830:	e005      	b.n	d83e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    d832:	687b      	ldr	r3, [r7, #4]
    d834:	2216      	movs	r2, #22
    d836:	18ba      	adds	r2, r7, r2
    d838:	8812      	ldrh	r2, [r2, #0]
    d83a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    d83c:	2300      	movs	r3, #0
	}
}
    d83e:	0018      	movs	r0, r3
    d840:	46bd      	mov	sp, r7
    d842:	b006      	add	sp, #24
    d844:	bd80      	pop	{r7, pc}
	...

0000d848 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    d848:	b5f0      	push	{r4, r5, r6, r7, lr}
    d84a:	b0a1      	sub	sp, #132	; 0x84
    d84c:	af00      	add	r7, sp, #0
    d84e:	64f8      	str	r0, [r7, #76]	; 0x4c
    d850:	64b9      	str	r1, [r7, #72]	; 0x48
    d852:	647a      	str	r2, [r7, #68]	; 0x44
    d854:	2243      	movs	r2, #67	; 0x43
    d856:	18ba      	adds	r2, r7, r2
    d858:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    d85a:	2300      	movs	r3, #0
    d85c:	2400      	movs	r4, #0
    d85e:	673b      	str	r3, [r7, #112]	; 0x70
    d860:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    d862:	2300      	movs	r3, #0
    d864:	2400      	movs	r4, #0
    d866:	66bb      	str	r3, [r7, #104]	; 0x68
    d868:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    d86a:	2300      	movs	r3, #0
    d86c:	2400      	movs	r4, #0
    d86e:	67bb      	str	r3, [r7, #120]	; 0x78
    d870:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    d872:	2300      	movs	r3, #0
    d874:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    d876:	2358      	movs	r3, #88	; 0x58
    d878:	2240      	movs	r2, #64	; 0x40
    d87a:	4694      	mov	ip, r2
    d87c:	44bc      	add	ip, r7
    d87e:	4463      	add	r3, ip
    d880:	781a      	ldrb	r2, [r3, #0]
    d882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d884:	435a      	muls	r2, r3
    d886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d888:	429a      	cmp	r2, r3
    d88a:	d901      	bls.n	d890 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d88c:	2340      	movs	r3, #64	; 0x40
    d88e:	e0b3      	b.n	d9f8 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    d890:	2343      	movs	r3, #67	; 0x43
    d892:	18fb      	adds	r3, r7, r3
    d894:	781b      	ldrb	r3, [r3, #0]
    d896:	2b00      	cmp	r3, #0
    d898:	d13d      	bne.n	d916 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    d89a:	2358      	movs	r3, #88	; 0x58
    d89c:	2240      	movs	r2, #64	; 0x40
    d89e:	4694      	mov	ip, r2
    d8a0:	44bc      	add	ip, r7
    d8a2:	4463      	add	r3, ip
    d8a4:	781b      	ldrb	r3, [r3, #0]
    d8a6:	b2db      	uxtb	r3, r3
    d8a8:	613b      	str	r3, [r7, #16]
    d8aa:	2300      	movs	r3, #0
    d8ac:	617b      	str	r3, [r7, #20]
    d8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d8b0:	60bb      	str	r3, [r7, #8]
    d8b2:	2300      	movs	r3, #0
    d8b4:	60fb      	str	r3, [r7, #12]
    d8b6:	4c52      	ldr	r4, [pc, #328]	; (da00 <_sercom_get_async_baud_val+0x1b8>)
    d8b8:	68ba      	ldr	r2, [r7, #8]
    d8ba:	68fb      	ldr	r3, [r7, #12]
    d8bc:	6938      	ldr	r0, [r7, #16]
    d8be:	6979      	ldr	r1, [r7, #20]
    d8c0:	47a0      	blx	r4
    d8c2:	0003      	movs	r3, r0
    d8c4:	000c      	movs	r4, r1
    d8c6:	001b      	movs	r3, r3
    d8c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    d8ca:	2300      	movs	r3, #0
    d8cc:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    d8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d8d0:	603b      	str	r3, [r7, #0]
    d8d2:	2300      	movs	r3, #0
    d8d4:	607b      	str	r3, [r7, #4]
    d8d6:	6db8      	ldr	r0, [r7, #88]	; 0x58
    d8d8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    d8da:	683a      	ldr	r2, [r7, #0]
    d8dc:	687b      	ldr	r3, [r7, #4]
    d8de:	4c49      	ldr	r4, [pc, #292]	; (da04 <_sercom_get_async_baud_val+0x1bc>)
    d8e0:	47a0      	blx	r4
    d8e2:	0003      	movs	r3, r0
    d8e4:	000c      	movs	r4, r1
    d8e6:	673b      	str	r3, [r7, #112]	; 0x70
    d8e8:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    d8ea:	2100      	movs	r1, #0
    d8ec:	2201      	movs	r2, #1
    d8ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    d8f0:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    d8f2:	1ac9      	subs	r1, r1, r3
    d8f4:	41a2      	sbcs	r2, r4
    d8f6:	000b      	movs	r3, r1
    d8f8:	0014      	movs	r4, r2
    d8fa:	66bb      	str	r3, [r7, #104]	; 0x68
    d8fc:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    d8fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d900:	0c1b      	lsrs	r3, r3, #16
    d902:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    d904:	0416      	lsls	r6, r2, #16
    d906:	431e      	orrs	r6, r3
    d908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d90a:	041d      	lsls	r5, r3, #16
    d90c:	0033      	movs	r3, r6
    d90e:	67bb      	str	r3, [r7, #120]	; 0x78
    d910:	2300      	movs	r3, #0
    d912:	67fb      	str	r3, [r7, #124]	; 0x7c
    d914:	e06a      	b.n	d9ec <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    d916:	2343      	movs	r3, #67	; 0x43
    d918:	18fb      	adds	r3, r7, r3
    d91a:	781b      	ldrb	r3, [r3, #0]
    d91c:	2b01      	cmp	r3, #1
    d91e:	d165      	bne.n	d9ec <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    d920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d922:	633b      	str	r3, [r7, #48]	; 0x30
    d924:	2300      	movs	r3, #0
    d926:	637b      	str	r3, [r7, #52]	; 0x34
    d928:	2358      	movs	r3, #88	; 0x58
    d92a:	2240      	movs	r2, #64	; 0x40
    d92c:	4694      	mov	ip, r2
    d92e:	44bc      	add	ip, r7
    d930:	4463      	add	r3, ip
    d932:	781b      	ldrb	r3, [r3, #0]
    d934:	b2db      	uxtb	r3, r3
    d936:	62bb      	str	r3, [r7, #40]	; 0x28
    d938:	2300      	movs	r3, #0
    d93a:	62fb      	str	r3, [r7, #44]	; 0x2c
    d93c:	4c30      	ldr	r4, [pc, #192]	; (da00 <_sercom_get_async_baud_val+0x1b8>)
    d93e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d942:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d944:	6b79      	ldr	r1, [r7, #52]	; 0x34
    d946:	47a0      	blx	r4
    d948:	0003      	movs	r3, r0
    d94a:	000c      	movs	r4, r1
    d94c:	65bb      	str	r3, [r7, #88]	; 0x58
    d94e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    d950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d952:	623b      	str	r3, [r7, #32]
    d954:	2300      	movs	r3, #0
    d956:	627b      	str	r3, [r7, #36]	; 0x24
    d958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d95a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    d95c:	001a      	movs	r2, r3
    d95e:	0023      	movs	r3, r4
    d960:	6a38      	ldr	r0, [r7, #32]
    d962:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d964:	4c27      	ldr	r4, [pc, #156]	; (da04 <_sercom_get_async_baud_val+0x1bc>)
    d966:	47a0      	blx	r4
    d968:	0003      	movs	r3, r0
    d96a:	000c      	movs	r4, r1
    d96c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    d96e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    d970:	2380      	movs	r3, #128	; 0x80
    d972:	019b      	lsls	r3, r3, #6
    d974:	429a      	cmp	r2, r3
    d976:	d901      	bls.n	d97c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d978:	2340      	movs	r3, #64	; 0x40
    d97a:	e03d      	b.n	d9f8 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    d97c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    d97e:	61bb      	str	r3, [r7, #24]
    d980:	2300      	movs	r3, #0
    d982:	61fb      	str	r3, [r7, #28]
    d984:	69b9      	ldr	r1, [r7, #24]
    d986:	69fa      	ldr	r2, [r7, #28]
    d988:	000b      	movs	r3, r1
    d98a:	0f5b      	lsrs	r3, r3, #29
    d98c:	0010      	movs	r0, r2
    d98e:	00c0      	lsls	r0, r0, #3
    d990:	63f8      	str	r0, [r7, #60]	; 0x3c
    d992:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    d994:	4318      	orrs	r0, r3
    d996:	63f8      	str	r0, [r7, #60]	; 0x3c
    d998:	000b      	movs	r3, r1
    d99a:	00db      	lsls	r3, r3, #3
    d99c:	63bb      	str	r3, [r7, #56]	; 0x38
    d99e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d9a0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    d9a2:	001a      	movs	r2, r3
    d9a4:	0023      	movs	r3, r4
    d9a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d9a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    d9aa:	4c16      	ldr	r4, [pc, #88]	; (da04 <_sercom_get_async_baud_val+0x1bc>)
    d9ac:	47a0      	blx	r4
    d9ae:	0003      	movs	r3, r0
    d9b0:	000c      	movs	r4, r1
    d9b2:	65bb      	str	r3, [r7, #88]	; 0x58
    d9b4:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    d9b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d9b8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    d9ba:	b2d9      	uxtb	r1, r3
    d9bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    d9be:	b2db      	uxtb	r3, r3
    d9c0:	00db      	lsls	r3, r3, #3
    d9c2:	b2da      	uxtb	r2, r3
    d9c4:	2317      	movs	r3, #23
    d9c6:	2040      	movs	r0, #64	; 0x40
    d9c8:	4684      	mov	ip, r0
    d9ca:	44bc      	add	ip, r7
    d9cc:	4463      	add	r3, ip
    d9ce:	1a8a      	subs	r2, r1, r2
    d9d0:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    d9d2:	2317      	movs	r3, #23
    d9d4:	2240      	movs	r2, #64	; 0x40
    d9d6:	4694      	mov	ip, r2
    d9d8:	44bc      	add	ip, r7
    d9da:	4463      	add	r3, ip
    d9dc:	781b      	ldrb	r3, [r3, #0]
    d9de:	035b      	lsls	r3, r3, #13
    d9e0:	001a      	movs	r2, r3
    d9e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    d9e4:	4313      	orrs	r3, r2
    d9e6:	67bb      	str	r3, [r7, #120]	; 0x78
    d9e8:	2300      	movs	r3, #0
    d9ea:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    d9ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    d9ee:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    d9f0:	b29a      	uxth	r2, r3
    d9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d9f4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    d9f6:	2300      	movs	r3, #0
}
    d9f8:	0018      	movs	r0, r3
    d9fa:	46bd      	mov	sp, r7
    d9fc:	b021      	add	sp, #132	; 0x84
    d9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da00:	00015809 	.word	0x00015809
    da04:	0000d6eb 	.word	0x0000d6eb

0000da08 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    da08:	b580      	push	{r7, lr}
    da0a:	b084      	sub	sp, #16
    da0c:	af00      	add	r7, sp, #0
    da0e:	0002      	movs	r2, r0
    da10:	1dfb      	adds	r3, r7, #7
    da12:	701a      	strb	r2, [r3, #0]
    da14:	1dbb      	adds	r3, r7, #6
    da16:	1c0a      	adds	r2, r1, #0
    da18:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    da1a:	4b1a      	ldr	r3, [pc, #104]	; (da84 <sercom_set_gclk_generator+0x7c>)
    da1c:	781b      	ldrb	r3, [r3, #0]
    da1e:	2201      	movs	r2, #1
    da20:	4053      	eors	r3, r2
    da22:	b2db      	uxtb	r3, r3
    da24:	2b00      	cmp	r3, #0
    da26:	d103      	bne.n	da30 <sercom_set_gclk_generator+0x28>
    da28:	1dbb      	adds	r3, r7, #6
    da2a:	781b      	ldrb	r3, [r3, #0]
    da2c:	2b00      	cmp	r3, #0
    da2e:	d01b      	beq.n	da68 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    da30:	230c      	movs	r3, #12
    da32:	18fb      	adds	r3, r7, r3
    da34:	0018      	movs	r0, r3
    da36:	4b14      	ldr	r3, [pc, #80]	; (da88 <sercom_set_gclk_generator+0x80>)
    da38:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    da3a:	230c      	movs	r3, #12
    da3c:	18fb      	adds	r3, r7, r3
    da3e:	1dfa      	adds	r2, r7, #7
    da40:	7812      	ldrb	r2, [r2, #0]
    da42:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    da44:	230c      	movs	r3, #12
    da46:	18fb      	adds	r3, r7, r3
    da48:	0019      	movs	r1, r3
    da4a:	2013      	movs	r0, #19
    da4c:	4b0f      	ldr	r3, [pc, #60]	; (da8c <sercom_set_gclk_generator+0x84>)
    da4e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    da50:	2013      	movs	r0, #19
    da52:	4b0f      	ldr	r3, [pc, #60]	; (da90 <sercom_set_gclk_generator+0x88>)
    da54:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    da56:	4b0b      	ldr	r3, [pc, #44]	; (da84 <sercom_set_gclk_generator+0x7c>)
    da58:	1dfa      	adds	r2, r7, #7
    da5a:	7812      	ldrb	r2, [r2, #0]
    da5c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    da5e:	4b09      	ldr	r3, [pc, #36]	; (da84 <sercom_set_gclk_generator+0x7c>)
    da60:	2201      	movs	r2, #1
    da62:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    da64:	2300      	movs	r3, #0
    da66:	e008      	b.n	da7a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    da68:	4b06      	ldr	r3, [pc, #24]	; (da84 <sercom_set_gclk_generator+0x7c>)
    da6a:	785b      	ldrb	r3, [r3, #1]
    da6c:	1dfa      	adds	r2, r7, #7
    da6e:	7812      	ldrb	r2, [r2, #0]
    da70:	429a      	cmp	r2, r3
    da72:	d101      	bne.n	da78 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    da74:	2300      	movs	r3, #0
    da76:	e000      	b.n	da7a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    da78:	231d      	movs	r3, #29
}
    da7a:	0018      	movs	r0, r3
    da7c:	46bd      	mov	sp, r7
    da7e:	b004      	add	sp, #16
    da80:	bd80      	pop	{r7, pc}
    da82:	46c0      	nop			; (mov r8, r8)
    da84:	200002b4 	.word	0x200002b4
    da88:	0000d6d5 	.word	0x0000d6d5
    da8c:	0001392d 	.word	0x0001392d
    da90:	00013971 	.word	0x00013971

0000da94 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    da94:	b580      	push	{r7, lr}
    da96:	b082      	sub	sp, #8
    da98:	af00      	add	r7, sp, #0
    da9a:	6078      	str	r0, [r7, #4]
    da9c:	000a      	movs	r2, r1
    da9e:	1cfb      	adds	r3, r7, #3
    daa0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    daa2:	687b      	ldr	r3, [r7, #4]
    daa4:	4a4d      	ldr	r2, [pc, #308]	; (dbdc <_sercom_get_default_pad+0x148>)
    daa6:	4293      	cmp	r3, r2
    daa8:	d03f      	beq.n	db2a <_sercom_get_default_pad+0x96>
    daaa:	4a4c      	ldr	r2, [pc, #304]	; (dbdc <_sercom_get_default_pad+0x148>)
    daac:	4293      	cmp	r3, r2
    daae:	d806      	bhi.n	dabe <_sercom_get_default_pad+0x2a>
    dab0:	4a4b      	ldr	r2, [pc, #300]	; (dbe0 <_sercom_get_default_pad+0x14c>)
    dab2:	4293      	cmp	r3, r2
    dab4:	d00f      	beq.n	dad6 <_sercom_get_default_pad+0x42>
    dab6:	4a4b      	ldr	r2, [pc, #300]	; (dbe4 <_sercom_get_default_pad+0x150>)
    dab8:	4293      	cmp	r3, r2
    daba:	d021      	beq.n	db00 <_sercom_get_default_pad+0x6c>
    dabc:	e089      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    dabe:	4a4a      	ldr	r2, [pc, #296]	; (dbe8 <_sercom_get_default_pad+0x154>)
    dac0:	4293      	cmp	r3, r2
    dac2:	d100      	bne.n	dac6 <_sercom_get_default_pad+0x32>
    dac4:	e05b      	b.n	db7e <_sercom_get_default_pad+0xea>
    dac6:	4a49      	ldr	r2, [pc, #292]	; (dbec <_sercom_get_default_pad+0x158>)
    dac8:	4293      	cmp	r3, r2
    daca:	d100      	bne.n	dace <_sercom_get_default_pad+0x3a>
    dacc:	e06c      	b.n	dba8 <_sercom_get_default_pad+0x114>
    dace:	4a48      	ldr	r2, [pc, #288]	; (dbf0 <_sercom_get_default_pad+0x15c>)
    dad0:	4293      	cmp	r3, r2
    dad2:	d03f      	beq.n	db54 <_sercom_get_default_pad+0xc0>
    dad4:	e07d      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    dad6:	1cfb      	adds	r3, r7, #3
    dad8:	781b      	ldrb	r3, [r3, #0]
    dada:	2b01      	cmp	r3, #1
    dadc:	d00a      	beq.n	daf4 <_sercom_get_default_pad+0x60>
    dade:	dc02      	bgt.n	dae6 <_sercom_get_default_pad+0x52>
    dae0:	2b00      	cmp	r3, #0
    dae2:	d005      	beq.n	daf0 <_sercom_get_default_pad+0x5c>
    dae4:	e075      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    dae6:	2b02      	cmp	r3, #2
    dae8:	d006      	beq.n	daf8 <_sercom_get_default_pad+0x64>
    daea:	2b03      	cmp	r3, #3
    daec:	d006      	beq.n	dafc <_sercom_get_default_pad+0x68>
    daee:	e070      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    daf0:	4b40      	ldr	r3, [pc, #256]	; (dbf4 <_sercom_get_default_pad+0x160>)
    daf2:	e06f      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    daf4:	4b40      	ldr	r3, [pc, #256]	; (dbf8 <_sercom_get_default_pad+0x164>)
    daf6:	e06d      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    daf8:	4b40      	ldr	r3, [pc, #256]	; (dbfc <_sercom_get_default_pad+0x168>)
    dafa:	e06b      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    dafc:	4b40      	ldr	r3, [pc, #256]	; (dc00 <_sercom_get_default_pad+0x16c>)
    dafe:	e069      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db00:	1cfb      	adds	r3, r7, #3
    db02:	781b      	ldrb	r3, [r3, #0]
    db04:	2b01      	cmp	r3, #1
    db06:	d00a      	beq.n	db1e <_sercom_get_default_pad+0x8a>
    db08:	dc02      	bgt.n	db10 <_sercom_get_default_pad+0x7c>
    db0a:	2b00      	cmp	r3, #0
    db0c:	d005      	beq.n	db1a <_sercom_get_default_pad+0x86>
    db0e:	e060      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    db10:	2b02      	cmp	r3, #2
    db12:	d006      	beq.n	db22 <_sercom_get_default_pad+0x8e>
    db14:	2b03      	cmp	r3, #3
    db16:	d006      	beq.n	db26 <_sercom_get_default_pad+0x92>
    db18:	e05b      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    db1a:	2303      	movs	r3, #3
    db1c:	e05a      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db1e:	4b39      	ldr	r3, [pc, #228]	; (dc04 <_sercom_get_default_pad+0x170>)
    db20:	e058      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db22:	4b39      	ldr	r3, [pc, #228]	; (dc08 <_sercom_get_default_pad+0x174>)
    db24:	e056      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db26:	4b39      	ldr	r3, [pc, #228]	; (dc0c <_sercom_get_default_pad+0x178>)
    db28:	e054      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db2a:	1cfb      	adds	r3, r7, #3
    db2c:	781b      	ldrb	r3, [r3, #0]
    db2e:	2b01      	cmp	r3, #1
    db30:	d00a      	beq.n	db48 <_sercom_get_default_pad+0xb4>
    db32:	dc02      	bgt.n	db3a <_sercom_get_default_pad+0xa6>
    db34:	2b00      	cmp	r3, #0
    db36:	d005      	beq.n	db44 <_sercom_get_default_pad+0xb0>
    db38:	e04b      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    db3a:	2b02      	cmp	r3, #2
    db3c:	d006      	beq.n	db4c <_sercom_get_default_pad+0xb8>
    db3e:	2b03      	cmp	r3, #3
    db40:	d006      	beq.n	db50 <_sercom_get_default_pad+0xbc>
    db42:	e046      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    db44:	4b32      	ldr	r3, [pc, #200]	; (dc10 <_sercom_get_default_pad+0x17c>)
    db46:	e045      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db48:	4b32      	ldr	r3, [pc, #200]	; (dc14 <_sercom_get_default_pad+0x180>)
    db4a:	e043      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db4c:	4b32      	ldr	r3, [pc, #200]	; (dc18 <_sercom_get_default_pad+0x184>)
    db4e:	e041      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db50:	4b32      	ldr	r3, [pc, #200]	; (dc1c <_sercom_get_default_pad+0x188>)
    db52:	e03f      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db54:	1cfb      	adds	r3, r7, #3
    db56:	781b      	ldrb	r3, [r3, #0]
    db58:	2b01      	cmp	r3, #1
    db5a:	d00a      	beq.n	db72 <_sercom_get_default_pad+0xde>
    db5c:	dc02      	bgt.n	db64 <_sercom_get_default_pad+0xd0>
    db5e:	2b00      	cmp	r3, #0
    db60:	d005      	beq.n	db6e <_sercom_get_default_pad+0xda>
    db62:	e036      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    db64:	2b02      	cmp	r3, #2
    db66:	d006      	beq.n	db76 <_sercom_get_default_pad+0xe2>
    db68:	2b03      	cmp	r3, #3
    db6a:	d006      	beq.n	db7a <_sercom_get_default_pad+0xe6>
    db6c:	e031      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    db6e:	4b2c      	ldr	r3, [pc, #176]	; (dc20 <_sercom_get_default_pad+0x18c>)
    db70:	e030      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db72:	4b2c      	ldr	r3, [pc, #176]	; (dc24 <_sercom_get_default_pad+0x190>)
    db74:	e02e      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db76:	4b2c      	ldr	r3, [pc, #176]	; (dc28 <_sercom_get_default_pad+0x194>)
    db78:	e02c      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db7a:	4b2c      	ldr	r3, [pc, #176]	; (dc2c <_sercom_get_default_pad+0x198>)
    db7c:	e02a      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db7e:	1cfb      	adds	r3, r7, #3
    db80:	781b      	ldrb	r3, [r3, #0]
    db82:	2b01      	cmp	r3, #1
    db84:	d00a      	beq.n	db9c <_sercom_get_default_pad+0x108>
    db86:	dc02      	bgt.n	db8e <_sercom_get_default_pad+0xfa>
    db88:	2b00      	cmp	r3, #0
    db8a:	d005      	beq.n	db98 <_sercom_get_default_pad+0x104>
    db8c:	e021      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    db8e:	2b02      	cmp	r3, #2
    db90:	d006      	beq.n	dba0 <_sercom_get_default_pad+0x10c>
    db92:	2b03      	cmp	r3, #3
    db94:	d006      	beq.n	dba4 <_sercom_get_default_pad+0x110>
    db96:	e01c      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    db98:	4b25      	ldr	r3, [pc, #148]	; (dc30 <_sercom_get_default_pad+0x19c>)
    db9a:	e01b      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    db9c:	4b25      	ldr	r3, [pc, #148]	; (dc34 <_sercom_get_default_pad+0x1a0>)
    db9e:	e019      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    dba0:	4b25      	ldr	r3, [pc, #148]	; (dc38 <_sercom_get_default_pad+0x1a4>)
    dba2:	e017      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    dba4:	4b25      	ldr	r3, [pc, #148]	; (dc3c <_sercom_get_default_pad+0x1a8>)
    dba6:	e015      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    dba8:	1cfb      	adds	r3, r7, #3
    dbaa:	781b      	ldrb	r3, [r3, #0]
    dbac:	2b01      	cmp	r3, #1
    dbae:	d00a      	beq.n	dbc6 <_sercom_get_default_pad+0x132>
    dbb0:	dc02      	bgt.n	dbb8 <_sercom_get_default_pad+0x124>
    dbb2:	2b00      	cmp	r3, #0
    dbb4:	d005      	beq.n	dbc2 <_sercom_get_default_pad+0x12e>
    dbb6:	e00c      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    dbb8:	2b02      	cmp	r3, #2
    dbba:	d006      	beq.n	dbca <_sercom_get_default_pad+0x136>
    dbbc:	2b03      	cmp	r3, #3
    dbbe:	d006      	beq.n	dbce <_sercom_get_default_pad+0x13a>
    dbc0:	e007      	b.n	dbd2 <_sercom_get_default_pad+0x13e>
    dbc2:	4b1f      	ldr	r3, [pc, #124]	; (dc40 <_sercom_get_default_pad+0x1ac>)
    dbc4:	e006      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    dbc6:	4b1f      	ldr	r3, [pc, #124]	; (dc44 <_sercom_get_default_pad+0x1b0>)
    dbc8:	e004      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    dbca:	4b1f      	ldr	r3, [pc, #124]	; (dc48 <_sercom_get_default_pad+0x1b4>)
    dbcc:	e002      	b.n	dbd4 <_sercom_get_default_pad+0x140>
    dbce:	4b1f      	ldr	r3, [pc, #124]	; (dc4c <_sercom_get_default_pad+0x1b8>)
    dbd0:	e000      	b.n	dbd4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    dbd2:	2300      	movs	r3, #0
}
    dbd4:	0018      	movs	r0, r3
    dbd6:	46bd      	mov	sp, r7
    dbd8:	b002      	add	sp, #8
    dbda:	bd80      	pop	{r7, pc}
    dbdc:	42001000 	.word	0x42001000
    dbe0:	42000800 	.word	0x42000800
    dbe4:	42000c00 	.word	0x42000c00
    dbe8:	42001800 	.word	0x42001800
    dbec:	42001c00 	.word	0x42001c00
    dbf0:	42001400 	.word	0x42001400
    dbf4:	00040003 	.word	0x00040003
    dbf8:	00050003 	.word	0x00050003
    dbfc:	00060003 	.word	0x00060003
    dc00:	00070003 	.word	0x00070003
    dc04:	00010003 	.word	0x00010003
    dc08:	001e0003 	.word	0x001e0003
    dc0c:	001f0003 	.word	0x001f0003
    dc10:	00080003 	.word	0x00080003
    dc14:	00090003 	.word	0x00090003
    dc18:	000a0003 	.word	0x000a0003
    dc1c:	000b0003 	.word	0x000b0003
    dc20:	00100003 	.word	0x00100003
    dc24:	00110003 	.word	0x00110003
    dc28:	00120003 	.word	0x00120003
    dc2c:	00130003 	.word	0x00130003
    dc30:	000c0003 	.word	0x000c0003
    dc34:	000d0003 	.word	0x000d0003
    dc38:	000e0003 	.word	0x000e0003
    dc3c:	000f0003 	.word	0x000f0003
    dc40:	00160003 	.word	0x00160003
    dc44:	00170003 	.word	0x00170003
    dc48:	00180003 	.word	0x00180003
    dc4c:	00190003 	.word	0x00190003

0000dc50 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    dc50:	b590      	push	{r4, r7, lr}
    dc52:	b08b      	sub	sp, #44	; 0x2c
    dc54:	af00      	add	r7, sp, #0
    dc56:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    dc58:	230c      	movs	r3, #12
    dc5a:	18fb      	adds	r3, r7, r3
    dc5c:	4a0f      	ldr	r2, [pc, #60]	; (dc9c <_sercom_get_sercom_inst_index+0x4c>)
    dc5e:	ca13      	ldmia	r2!, {r0, r1, r4}
    dc60:	c313      	stmia	r3!, {r0, r1, r4}
    dc62:	ca13      	ldmia	r2!, {r0, r1, r4}
    dc64:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    dc66:	2300      	movs	r3, #0
    dc68:	627b      	str	r3, [r7, #36]	; 0x24
    dc6a:	e00e      	b.n	dc8a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    dc6c:	230c      	movs	r3, #12
    dc6e:	18fb      	adds	r3, r7, r3
    dc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dc72:	0092      	lsls	r2, r2, #2
    dc74:	58d3      	ldr	r3, [r2, r3]
    dc76:	001a      	movs	r2, r3
    dc78:	687b      	ldr	r3, [r7, #4]
    dc7a:	429a      	cmp	r2, r3
    dc7c:	d102      	bne.n	dc84 <_sercom_get_sercom_inst_index+0x34>
			return i;
    dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dc80:	b2db      	uxtb	r3, r3
    dc82:	e006      	b.n	dc92 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    dc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dc86:	3301      	adds	r3, #1
    dc88:	627b      	str	r3, [r7, #36]	; 0x24
    dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dc8c:	2b05      	cmp	r3, #5
    dc8e:	d9ed      	bls.n	dc6c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    dc90:	2300      	movs	r3, #0
}
    dc92:	0018      	movs	r0, r3
    dc94:	46bd      	mov	sp, r7
    dc96:	b00b      	add	sp, #44	; 0x2c
    dc98:	bd90      	pop	{r4, r7, pc}
    dc9a:	46c0      	nop			; (mov r8, r8)
    dc9c:	00019848 	.word	0x00019848

0000dca0 <system_cpu_clock_get_hz>:
{
    dca0:	b580      	push	{r7, lr}
    dca2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    dca4:	2000      	movs	r0, #0
    dca6:	4b05      	ldr	r3, [pc, #20]	; (dcbc <system_cpu_clock_get_hz+0x1c>)
    dca8:	4798      	blx	r3
    dcaa:	0002      	movs	r2, r0
    dcac:	4b04      	ldr	r3, [pc, #16]	; (dcc0 <system_cpu_clock_get_hz+0x20>)
    dcae:	7a1b      	ldrb	r3, [r3, #8]
    dcb0:	b2db      	uxtb	r3, r3
    dcb2:	40da      	lsrs	r2, r3
    dcb4:	0013      	movs	r3, r2
}
    dcb6:	0018      	movs	r0, r3
    dcb8:	46bd      	mov	sp, r7
    dcba:	bd80      	pop	{r7, pc}
    dcbc:	00013855 	.word	0x00013855
    dcc0:	40000400 	.word	0x40000400

0000dcc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    dcc4:	b580      	push	{r7, lr}
    dcc6:	b084      	sub	sp, #16
    dcc8:	af00      	add	r7, sp, #0
    dcca:	60f8      	str	r0, [r7, #12]
    dccc:	60b9      	str	r1, [r7, #8]
    dcce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    dcd0:	68fb      	ldr	r3, [r7, #12]
    dcd2:	3b04      	subs	r3, #4
    dcd4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    dcd6:	68fb      	ldr	r3, [r7, #12]
    dcd8:	2280      	movs	r2, #128	; 0x80
    dcda:	0452      	lsls	r2, r2, #17
    dcdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    dcde:	68fb      	ldr	r3, [r7, #12]
    dce0:	3b04      	subs	r3, #4
    dce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    dce4:	68ba      	ldr	r2, [r7, #8]
    dce6:	68fb      	ldr	r3, [r7, #12]
    dce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    dcea:	68fb      	ldr	r3, [r7, #12]
    dcec:	3b04      	subs	r3, #4
    dcee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    dcf0:	4a08      	ldr	r2, [pc, #32]	; (dd14 <pxPortInitialiseStack+0x50>)
    dcf2:	68fb      	ldr	r3, [r7, #12]
    dcf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    dcf6:	68fb      	ldr	r3, [r7, #12]
    dcf8:	3b14      	subs	r3, #20
    dcfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    dcfc:	687a      	ldr	r2, [r7, #4]
    dcfe:	68fb      	ldr	r3, [r7, #12]
    dd00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    dd02:	68fb      	ldr	r3, [r7, #12]
    dd04:	3b20      	subs	r3, #32
    dd06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    dd08:	68fb      	ldr	r3, [r7, #12]
}
    dd0a:	0018      	movs	r0, r3
    dd0c:	46bd      	mov	sp, r7
    dd0e:	b004      	add	sp, #16
    dd10:	bd80      	pop	{r7, pc}
    dd12:	46c0      	nop			; (mov r8, r8)
    dd14:	0000dd19 	.word	0x0000dd19

0000dd18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    dd18:	b580      	push	{r7, lr}
    dd1a:	b082      	sub	sp, #8
    dd1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    dd1e:	2300      	movs	r3, #0
    dd20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    dd22:	4b07      	ldr	r3, [pc, #28]	; (dd40 <prvTaskExitError+0x28>)
    dd24:	681b      	ldr	r3, [r3, #0]
    dd26:	3301      	adds	r3, #1
    dd28:	d001      	beq.n	dd2e <prvTaskExitError+0x16>
    dd2a:	b672      	cpsid	i
    dd2c:	e7fe      	b.n	dd2c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    dd2e:	b672      	cpsid	i
	while( ulDummy == 0 )
    dd30:	46c0      	nop			; (mov r8, r8)
    dd32:	687b      	ldr	r3, [r7, #4]
    dd34:	2b00      	cmp	r3, #0
    dd36:	d0fc      	beq.n	dd32 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    dd38:	46c0      	nop			; (mov r8, r8)
    dd3a:	46bd      	mov	sp, r7
    dd3c:	b002      	add	sp, #8
    dd3e:	bd80      	pop	{r7, pc}
    dd40:	20000010 	.word	0x20000010

0000dd44 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    dd44:	b580      	push	{r7, lr}
    dd46:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    dd48:	46c0      	nop			; (mov r8, r8)
    dd4a:	46bd      	mov	sp, r7
    dd4c:	bd80      	pop	{r7, pc}
	...

0000dd50 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    dd50:	4a0b      	ldr	r2, [pc, #44]	; (dd80 <pxCurrentTCBConst2>)
    dd52:	6813      	ldr	r3, [r2, #0]
    dd54:	6818      	ldr	r0, [r3, #0]
    dd56:	3020      	adds	r0, #32
    dd58:	f380 8809 	msr	PSP, r0
    dd5c:	2002      	movs	r0, #2
    dd5e:	f380 8814 	msr	CONTROL, r0
    dd62:	f3bf 8f6f 	isb	sy
    dd66:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    dd68:	46ae      	mov	lr, r5
    dd6a:	bc08      	pop	{r3}
    dd6c:	bc04      	pop	{r2}
    dd6e:	b662      	cpsie	i
    dd70:	4718      	bx	r3
    dd72:	46c0      	nop			; (mov r8, r8)
    dd74:	46c0      	nop			; (mov r8, r8)
    dd76:	46c0      	nop			; (mov r8, r8)
    dd78:	46c0      	nop			; (mov r8, r8)
    dd7a:	46c0      	nop			; (mov r8, r8)
    dd7c:	46c0      	nop			; (mov r8, r8)
    dd7e:	46c0      	nop			; (mov r8, r8)

0000dd80 <pxCurrentTCBConst2>:
    dd80:	200002b8 	.word	0x200002b8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    dd84:	46c0      	nop			; (mov r8, r8)
    dd86:	46c0      	nop			; (mov r8, r8)

0000dd88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    dd88:	b580      	push	{r7, lr}
    dd8a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    dd8c:	4b0e      	ldr	r3, [pc, #56]	; (ddc8 <xPortStartScheduler+0x40>)
    dd8e:	4a0e      	ldr	r2, [pc, #56]	; (ddc8 <xPortStartScheduler+0x40>)
    dd90:	6812      	ldr	r2, [r2, #0]
    dd92:	21ff      	movs	r1, #255	; 0xff
    dd94:	0409      	lsls	r1, r1, #16
    dd96:	430a      	orrs	r2, r1
    dd98:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    dd9a:	4b0b      	ldr	r3, [pc, #44]	; (ddc8 <xPortStartScheduler+0x40>)
    dd9c:	4a0a      	ldr	r2, [pc, #40]	; (ddc8 <xPortStartScheduler+0x40>)
    dd9e:	6812      	ldr	r2, [r2, #0]
    dda0:	21ff      	movs	r1, #255	; 0xff
    dda2:	0609      	lsls	r1, r1, #24
    dda4:	430a      	orrs	r2, r1
    dda6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    dda8:	4b08      	ldr	r3, [pc, #32]	; (ddcc <xPortStartScheduler+0x44>)
    ddaa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    ddac:	4b08      	ldr	r3, [pc, #32]	; (ddd0 <xPortStartScheduler+0x48>)
    ddae:	2200      	movs	r2, #0
    ddb0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    ddb2:	4b08      	ldr	r3, [pc, #32]	; (ddd4 <xPortStartScheduler+0x4c>)
    ddb4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    ddb6:	4b08      	ldr	r3, [pc, #32]	; (ddd8 <xPortStartScheduler+0x50>)
    ddb8:	4798      	blx	r3
	prvTaskExitError();
    ddba:	4b08      	ldr	r3, [pc, #32]	; (dddc <xPortStartScheduler+0x54>)
    ddbc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    ddbe:	2300      	movs	r3, #0
}
    ddc0:	0018      	movs	r0, r3
    ddc2:	46bd      	mov	sp, r7
    ddc4:	bd80      	pop	{r7, pc}
    ddc6:	46c0      	nop			; (mov r8, r8)
    ddc8:	e000ed20 	.word	0xe000ed20
    ddcc:	0000def9 	.word	0x0000def9
    ddd0:	20000010 	.word	0x20000010
    ddd4:	0000dd51 	.word	0x0000dd51
    ddd8:	0000f50d 	.word	0x0000f50d
    dddc:	0000dd19 	.word	0x0000dd19

0000dde0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    dde0:	b580      	push	{r7, lr}
    dde2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    dde4:	4b05      	ldr	r3, [pc, #20]	; (ddfc <vPortYield+0x1c>)
    dde6:	2280      	movs	r2, #128	; 0x80
    dde8:	0552      	lsls	r2, r2, #21
    ddea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
    ddec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    ddf0:	f3bf 8f6f 	isb	sy
}
    ddf4:	46c0      	nop			; (mov r8, r8)
    ddf6:	46bd      	mov	sp, r7
    ddf8:	bd80      	pop	{r7, pc}
    ddfa:	46c0      	nop			; (mov r8, r8)
    ddfc:	e000ed04 	.word	0xe000ed04

0000de00 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    de00:	b580      	push	{r7, lr}
    de02:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    de04:	b672      	cpsid	i
    uxCriticalNesting++;
    de06:	4b06      	ldr	r3, [pc, #24]	; (de20 <vPortEnterCritical+0x20>)
    de08:	681b      	ldr	r3, [r3, #0]
    de0a:	1c5a      	adds	r2, r3, #1
    de0c:	4b04      	ldr	r3, [pc, #16]	; (de20 <vPortEnterCritical+0x20>)
    de0e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    de10:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    de14:	f3bf 8f6f 	isb	sy
}
    de18:	46c0      	nop			; (mov r8, r8)
    de1a:	46bd      	mov	sp, r7
    de1c:	bd80      	pop	{r7, pc}
    de1e:	46c0      	nop			; (mov r8, r8)
    de20:	20000010 	.word	0x20000010

0000de24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    de24:	b580      	push	{r7, lr}
    de26:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    de28:	4b09      	ldr	r3, [pc, #36]	; (de50 <vPortExitCritical+0x2c>)
    de2a:	681b      	ldr	r3, [r3, #0]
    de2c:	2b00      	cmp	r3, #0
    de2e:	d101      	bne.n	de34 <vPortExitCritical+0x10>
    de30:	b672      	cpsid	i
    de32:	e7fe      	b.n	de32 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    de34:	4b06      	ldr	r3, [pc, #24]	; (de50 <vPortExitCritical+0x2c>)
    de36:	681b      	ldr	r3, [r3, #0]
    de38:	1e5a      	subs	r2, r3, #1
    de3a:	4b05      	ldr	r3, [pc, #20]	; (de50 <vPortExitCritical+0x2c>)
    de3c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    de3e:	4b04      	ldr	r3, [pc, #16]	; (de50 <vPortExitCritical+0x2c>)
    de40:	681b      	ldr	r3, [r3, #0]
    de42:	2b00      	cmp	r3, #0
    de44:	d100      	bne.n	de48 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    de46:	b662      	cpsie	i
    }
}
    de48:	46c0      	nop			; (mov r8, r8)
    de4a:	46bd      	mov	sp, r7
    de4c:	bd80      	pop	{r7, pc}
    de4e:	46c0      	nop			; (mov r8, r8)
    de50:	20000010 	.word	0x20000010

0000de54 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    de54:	f3ef 8010 	mrs	r0, PRIMASK
    de58:	b672      	cpsid	i
    de5a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    de5c:	46c0      	nop			; (mov r8, r8)
    de5e:	0018      	movs	r0, r3

0000de60 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    de60:	f380 8810 	msr	PRIMASK, r0
    de64:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    de66:	46c0      	nop			; (mov r8, r8)
	...

0000de70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    de70:	f3ef 8009 	mrs	r0, PSP
    de74:	4b0e      	ldr	r3, [pc, #56]	; (deb0 <pxCurrentTCBConst>)
    de76:	681a      	ldr	r2, [r3, #0]
    de78:	3820      	subs	r0, #32
    de7a:	6010      	str	r0, [r2, #0]
    de7c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    de7e:	4644      	mov	r4, r8
    de80:	464d      	mov	r5, r9
    de82:	4656      	mov	r6, sl
    de84:	465f      	mov	r7, fp
    de86:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    de88:	b508      	push	{r3, lr}
    de8a:	b672      	cpsid	i
    de8c:	f001 fb3e 	bl	f50c <vTaskSwitchContext>
    de90:	b662      	cpsie	i
    de92:	bc0c      	pop	{r2, r3}
    de94:	6811      	ldr	r1, [r2, #0]
    de96:	6808      	ldr	r0, [r1, #0]
    de98:	3010      	adds	r0, #16
    de9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    de9c:	46a0      	mov	r8, r4
    de9e:	46a9      	mov	r9, r5
    dea0:	46b2      	mov	sl, r6
    dea2:	46bb      	mov	fp, r7
    dea4:	f380 8809 	msr	PSP, r0
    dea8:	3820      	subs	r0, #32
    deaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    deac:	4718      	bx	r3
    deae:	46c0      	nop			; (mov r8, r8)

0000deb0 <pxCurrentTCBConst>:
    deb0:	200002b8 	.word	0x200002b8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    deb4:	46c0      	nop			; (mov r8, r8)
    deb6:	46c0      	nop			; (mov r8, r8)

0000deb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    deb8:	b580      	push	{r7, lr}
    deba:	b082      	sub	sp, #8
    debc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    debe:	4b0a      	ldr	r3, [pc, #40]	; (dee8 <SysTick_Handler+0x30>)
    dec0:	4798      	blx	r3
    dec2:	0003      	movs	r3, r0
    dec4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    dec6:	4b09      	ldr	r3, [pc, #36]	; (deec <SysTick_Handler+0x34>)
    dec8:	4798      	blx	r3
    deca:	1e03      	subs	r3, r0, #0
    decc:	d003      	beq.n	ded6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    dece:	4b08      	ldr	r3, [pc, #32]	; (def0 <SysTick_Handler+0x38>)
    ded0:	2280      	movs	r2, #128	; 0x80
    ded2:	0552      	lsls	r2, r2, #21
    ded4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    ded6:	687b      	ldr	r3, [r7, #4]
    ded8:	0018      	movs	r0, r3
    deda:	4b06      	ldr	r3, [pc, #24]	; (def4 <SysTick_Handler+0x3c>)
    dedc:	4798      	blx	r3
}
    dede:	46c0      	nop			; (mov r8, r8)
    dee0:	46bd      	mov	sp, r7
    dee2:	b002      	add	sp, #8
    dee4:	bd80      	pop	{r7, pc}
    dee6:	46c0      	nop			; (mov r8, r8)
    dee8:	0000de55 	.word	0x0000de55
    deec:	0000f399 	.word	0x0000f399
    def0:	e000ed04 	.word	0xe000ed04
    def4:	0000de61 	.word	0x0000de61

0000def8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    def8:	b5b0      	push	{r4, r5, r7, lr}
    defa:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    defc:	4b0a      	ldr	r3, [pc, #40]	; (df28 <prvSetupTimerInterrupt+0x30>)
    defe:	2200      	movs	r2, #0
    df00:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    df02:	4b0a      	ldr	r3, [pc, #40]	; (df2c <prvSetupTimerInterrupt+0x34>)
    df04:	2200      	movs	r2, #0
    df06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    df08:	4c09      	ldr	r4, [pc, #36]	; (df30 <prvSetupTimerInterrupt+0x38>)
    df0a:	4b0a      	ldr	r3, [pc, #40]	; (df34 <prvSetupTimerInterrupt+0x3c>)
    df0c:	4798      	blx	r3
    df0e:	4b0a      	ldr	r3, [pc, #40]	; (df38 <prvSetupTimerInterrupt+0x40>)
    df10:	22fa      	movs	r2, #250	; 0xfa
    df12:	0091      	lsls	r1, r2, #2
    df14:	4798      	blx	r3
    df16:	0003      	movs	r3, r0
    df18:	3b01      	subs	r3, #1
    df1a:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    df1c:	4b02      	ldr	r3, [pc, #8]	; (df28 <prvSetupTimerInterrupt+0x30>)
    df1e:	2207      	movs	r2, #7
    df20:	601a      	str	r2, [r3, #0]
}
    df22:	46c0      	nop			; (mov r8, r8)
    df24:	46bd      	mov	sp, r7
    df26:	bdb0      	pop	{r4, r5, r7, pc}
    df28:	e000e010 	.word	0xe000e010
    df2c:	e000e018 	.word	0xe000e018
    df30:	e000e014 	.word	0xe000e014
    df34:	0000dca1 	.word	0x0000dca1
    df38:	00015461 	.word	0x00015461

0000df3c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    df3c:	b580      	push	{r7, lr}
    df3e:	b084      	sub	sp, #16
    df40:	af00      	add	r7, sp, #0
    df42:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
    df44:	4b07      	ldr	r3, [pc, #28]	; (df64 <pvPortMalloc+0x28>)
    df46:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
    df48:	687b      	ldr	r3, [r7, #4]
    df4a:	0018      	movs	r0, r3
    df4c:	4b06      	ldr	r3, [pc, #24]	; (df68 <pvPortMalloc+0x2c>)
    df4e:	4798      	blx	r3
    df50:	0003      	movs	r3, r0
    df52:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    df54:	4b05      	ldr	r3, [pc, #20]	; (df6c <pvPortMalloc+0x30>)
    df56:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    df58:	68fb      	ldr	r3, [r7, #12]
}
    df5a:	0018      	movs	r0, r3
    df5c:	46bd      	mov	sp, r7
    df5e:	b004      	add	sp, #16
    df60:	bd80      	pop	{r7, pc}
    df62:	46c0      	nop			; (mov r8, r8)
    df64:	0000f231 	.word	0x0000f231
    df68:	00017c55 	.word	0x00017c55
    df6c:	0000f249 	.word	0x0000f249

0000df70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    df70:	b580      	push	{r7, lr}
    df72:	b082      	sub	sp, #8
    df74:	af00      	add	r7, sp, #0
    df76:	6078      	str	r0, [r7, #4]
	if( pv )
    df78:	687b      	ldr	r3, [r7, #4]
    df7a:	2b00      	cmp	r3, #0
    df7c:	d007      	beq.n	df8e <vPortFree+0x1e>
	{
		vTaskSuspendAll();
    df7e:	4b06      	ldr	r3, [pc, #24]	; (df98 <vPortFree+0x28>)
    df80:	4798      	blx	r3
		{
			free( pv );
    df82:	687b      	ldr	r3, [r7, #4]
    df84:	0018      	movs	r0, r3
    df86:	4b05      	ldr	r3, [pc, #20]	; (df9c <vPortFree+0x2c>)
    df88:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    df8a:	4b05      	ldr	r3, [pc, #20]	; (dfa0 <vPortFree+0x30>)
    df8c:	4798      	blx	r3
	}
}
    df8e:	46c0      	nop			; (mov r8, r8)
    df90:	46bd      	mov	sp, r7
    df92:	b002      	add	sp, #8
    df94:	bd80      	pop	{r7, pc}
    df96:	46c0      	nop			; (mov r8, r8)
    df98:	0000f231 	.word	0x0000f231
    df9c:	00017c69 	.word	0x00017c69
    dfa0:	0000f249 	.word	0x0000f249

0000dfa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    dfa4:	b580      	push	{r7, lr}
    dfa6:	b082      	sub	sp, #8
    dfa8:	af00      	add	r7, sp, #0
    dfaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    dfac:	687b      	ldr	r3, [r7, #4]
    dfae:	3308      	adds	r3, #8
    dfb0:	001a      	movs	r2, r3
    dfb2:	687b      	ldr	r3, [r7, #4]
    dfb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    dfb6:	687b      	ldr	r3, [r7, #4]
    dfb8:	2201      	movs	r2, #1
    dfba:	4252      	negs	r2, r2
    dfbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    dfbe:	687b      	ldr	r3, [r7, #4]
    dfc0:	3308      	adds	r3, #8
    dfc2:	001a      	movs	r2, r3
    dfc4:	687b      	ldr	r3, [r7, #4]
    dfc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    dfc8:	687b      	ldr	r3, [r7, #4]
    dfca:	3308      	adds	r3, #8
    dfcc:	001a      	movs	r2, r3
    dfce:	687b      	ldr	r3, [r7, #4]
    dfd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    dfd2:	687b      	ldr	r3, [r7, #4]
    dfd4:	2200      	movs	r2, #0
    dfd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    dfd8:	46c0      	nop			; (mov r8, r8)
    dfda:	46bd      	mov	sp, r7
    dfdc:	b002      	add	sp, #8
    dfde:	bd80      	pop	{r7, pc}

0000dfe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    dfe0:	b580      	push	{r7, lr}
    dfe2:	b082      	sub	sp, #8
    dfe4:	af00      	add	r7, sp, #0
    dfe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    dfe8:	687b      	ldr	r3, [r7, #4]
    dfea:	2200      	movs	r2, #0
    dfec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    dfee:	46c0      	nop			; (mov r8, r8)
    dff0:	46bd      	mov	sp, r7
    dff2:	b002      	add	sp, #8
    dff4:	bd80      	pop	{r7, pc}

0000dff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    dff6:	b580      	push	{r7, lr}
    dff8:	b084      	sub	sp, #16
    dffa:	af00      	add	r7, sp, #0
    dffc:	6078      	str	r0, [r7, #4]
    dffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    e000:	687b      	ldr	r3, [r7, #4]
    e002:	685b      	ldr	r3, [r3, #4]
    e004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    e006:	683b      	ldr	r3, [r7, #0]
    e008:	68fa      	ldr	r2, [r7, #12]
    e00a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    e00c:	68fb      	ldr	r3, [r7, #12]
    e00e:	689a      	ldr	r2, [r3, #8]
    e010:	683b      	ldr	r3, [r7, #0]
    e012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    e014:	68fb      	ldr	r3, [r7, #12]
    e016:	689b      	ldr	r3, [r3, #8]
    e018:	683a      	ldr	r2, [r7, #0]
    e01a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    e01c:	68fb      	ldr	r3, [r7, #12]
    e01e:	683a      	ldr	r2, [r7, #0]
    e020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    e022:	683b      	ldr	r3, [r7, #0]
    e024:	687a      	ldr	r2, [r7, #4]
    e026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    e028:	687b      	ldr	r3, [r7, #4]
    e02a:	681b      	ldr	r3, [r3, #0]
    e02c:	1c5a      	adds	r2, r3, #1
    e02e:	687b      	ldr	r3, [r7, #4]
    e030:	601a      	str	r2, [r3, #0]
}
    e032:	46c0      	nop			; (mov r8, r8)
    e034:	46bd      	mov	sp, r7
    e036:	b004      	add	sp, #16
    e038:	bd80      	pop	{r7, pc}

0000e03a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    e03a:	b580      	push	{r7, lr}
    e03c:	b084      	sub	sp, #16
    e03e:	af00      	add	r7, sp, #0
    e040:	6078      	str	r0, [r7, #4]
    e042:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    e044:	683b      	ldr	r3, [r7, #0]
    e046:	681b      	ldr	r3, [r3, #0]
    e048:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    e04a:	68bb      	ldr	r3, [r7, #8]
    e04c:	3301      	adds	r3, #1
    e04e:	d103      	bne.n	e058 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    e050:	687b      	ldr	r3, [r7, #4]
    e052:	691b      	ldr	r3, [r3, #16]
    e054:	60fb      	str	r3, [r7, #12]
    e056:	e00c      	b.n	e072 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    e058:	687b      	ldr	r3, [r7, #4]
    e05a:	3308      	adds	r3, #8
    e05c:	60fb      	str	r3, [r7, #12]
    e05e:	e002      	b.n	e066 <vListInsert+0x2c>
    e060:	68fb      	ldr	r3, [r7, #12]
    e062:	685b      	ldr	r3, [r3, #4]
    e064:	60fb      	str	r3, [r7, #12]
    e066:	68fb      	ldr	r3, [r7, #12]
    e068:	685b      	ldr	r3, [r3, #4]
    e06a:	681a      	ldr	r2, [r3, #0]
    e06c:	68bb      	ldr	r3, [r7, #8]
    e06e:	429a      	cmp	r2, r3
    e070:	d9f6      	bls.n	e060 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    e072:	68fb      	ldr	r3, [r7, #12]
    e074:	685a      	ldr	r2, [r3, #4]
    e076:	683b      	ldr	r3, [r7, #0]
    e078:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    e07a:	683b      	ldr	r3, [r7, #0]
    e07c:	685b      	ldr	r3, [r3, #4]
    e07e:	683a      	ldr	r2, [r7, #0]
    e080:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    e082:	683b      	ldr	r3, [r7, #0]
    e084:	68fa      	ldr	r2, [r7, #12]
    e086:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    e088:	68fb      	ldr	r3, [r7, #12]
    e08a:	683a      	ldr	r2, [r7, #0]
    e08c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    e08e:	683b      	ldr	r3, [r7, #0]
    e090:	687a      	ldr	r2, [r7, #4]
    e092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    e094:	687b      	ldr	r3, [r7, #4]
    e096:	681b      	ldr	r3, [r3, #0]
    e098:	1c5a      	adds	r2, r3, #1
    e09a:	687b      	ldr	r3, [r7, #4]
    e09c:	601a      	str	r2, [r3, #0]
}
    e09e:	46c0      	nop			; (mov r8, r8)
    e0a0:	46bd      	mov	sp, r7
    e0a2:	b004      	add	sp, #16
    e0a4:	bd80      	pop	{r7, pc}

0000e0a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    e0a6:	b580      	push	{r7, lr}
    e0a8:	b084      	sub	sp, #16
    e0aa:	af00      	add	r7, sp, #0
    e0ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    e0ae:	687b      	ldr	r3, [r7, #4]
    e0b0:	691b      	ldr	r3, [r3, #16]
    e0b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    e0b4:	687b      	ldr	r3, [r7, #4]
    e0b6:	685b      	ldr	r3, [r3, #4]
    e0b8:	687a      	ldr	r2, [r7, #4]
    e0ba:	6892      	ldr	r2, [r2, #8]
    e0bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    e0be:	687b      	ldr	r3, [r7, #4]
    e0c0:	689b      	ldr	r3, [r3, #8]
    e0c2:	687a      	ldr	r2, [r7, #4]
    e0c4:	6852      	ldr	r2, [r2, #4]
    e0c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    e0c8:	68fb      	ldr	r3, [r7, #12]
    e0ca:	685a      	ldr	r2, [r3, #4]
    e0cc:	687b      	ldr	r3, [r7, #4]
    e0ce:	429a      	cmp	r2, r3
    e0d0:	d103      	bne.n	e0da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    e0d2:	687b      	ldr	r3, [r7, #4]
    e0d4:	689a      	ldr	r2, [r3, #8]
    e0d6:	68fb      	ldr	r3, [r7, #12]
    e0d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    e0da:	687b      	ldr	r3, [r7, #4]
    e0dc:	2200      	movs	r2, #0
    e0de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    e0e0:	68fb      	ldr	r3, [r7, #12]
    e0e2:	681b      	ldr	r3, [r3, #0]
    e0e4:	1e5a      	subs	r2, r3, #1
    e0e6:	68fb      	ldr	r3, [r7, #12]
    e0e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    e0ea:	68fb      	ldr	r3, [r7, #12]
    e0ec:	681b      	ldr	r3, [r3, #0]
}
    e0ee:	0018      	movs	r0, r3
    e0f0:	46bd      	mov	sp, r7
    e0f2:	b004      	add	sp, #16
    e0f4:	bd80      	pop	{r7, pc}
	...

0000e0f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    e0f8:	b580      	push	{r7, lr}
    e0fa:	b084      	sub	sp, #16
    e0fc:	af00      	add	r7, sp, #0
    e0fe:	6078      	str	r0, [r7, #4]
    e100:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e102:	687b      	ldr	r3, [r7, #4]
    e104:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    e106:	68fb      	ldr	r3, [r7, #12]
    e108:	2b00      	cmp	r3, #0
    e10a:	d101      	bne.n	e110 <xQueueGenericReset+0x18>
    e10c:	b672      	cpsid	i
    e10e:	e7fe      	b.n	e10e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    e110:	4b23      	ldr	r3, [pc, #140]	; (e1a0 <xQueueGenericReset+0xa8>)
    e112:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    e114:	68fb      	ldr	r3, [r7, #12]
    e116:	681a      	ldr	r2, [r3, #0]
    e118:	68fb      	ldr	r3, [r7, #12]
    e11a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    e11c:	68fb      	ldr	r3, [r7, #12]
    e11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e120:	434b      	muls	r3, r1
    e122:	18d2      	adds	r2, r2, r3
    e124:	68fb      	ldr	r3, [r7, #12]
    e126:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    e128:	68fb      	ldr	r3, [r7, #12]
    e12a:	2200      	movs	r2, #0
    e12c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    e12e:	68fb      	ldr	r3, [r7, #12]
    e130:	681a      	ldr	r2, [r3, #0]
    e132:	68fb      	ldr	r3, [r7, #12]
    e134:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    e136:	68fb      	ldr	r3, [r7, #12]
    e138:	681a      	ldr	r2, [r3, #0]
    e13a:	68fb      	ldr	r3, [r7, #12]
    e13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e13e:	1e59      	subs	r1, r3, #1
    e140:	68fb      	ldr	r3, [r7, #12]
    e142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e144:	434b      	muls	r3, r1
    e146:	18d2      	adds	r2, r2, r3
    e148:	68fb      	ldr	r3, [r7, #12]
    e14a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    e14c:	68fb      	ldr	r3, [r7, #12]
    e14e:	2244      	movs	r2, #68	; 0x44
    e150:	21ff      	movs	r1, #255	; 0xff
    e152:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    e154:	68fb      	ldr	r3, [r7, #12]
    e156:	2245      	movs	r2, #69	; 0x45
    e158:	21ff      	movs	r1, #255	; 0xff
    e15a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    e15c:	683b      	ldr	r3, [r7, #0]
    e15e:	2b00      	cmp	r3, #0
    e160:	d10d      	bne.n	e17e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e162:	68fb      	ldr	r3, [r7, #12]
    e164:	691b      	ldr	r3, [r3, #16]
    e166:	2b00      	cmp	r3, #0
    e168:	d013      	beq.n	e192 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e16a:	68fb      	ldr	r3, [r7, #12]
    e16c:	3310      	adds	r3, #16
    e16e:	0018      	movs	r0, r3
    e170:	4b0c      	ldr	r3, [pc, #48]	; (e1a4 <xQueueGenericReset+0xac>)
    e172:	4798      	blx	r3
    e174:	1e03      	subs	r3, r0, #0
    e176:	d00c      	beq.n	e192 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    e178:	4b0b      	ldr	r3, [pc, #44]	; (e1a8 <xQueueGenericReset+0xb0>)
    e17a:	4798      	blx	r3
    e17c:	e009      	b.n	e192 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    e17e:	68fb      	ldr	r3, [r7, #12]
    e180:	3310      	adds	r3, #16
    e182:	0018      	movs	r0, r3
    e184:	4b09      	ldr	r3, [pc, #36]	; (e1ac <xQueueGenericReset+0xb4>)
    e186:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    e188:	68fb      	ldr	r3, [r7, #12]
    e18a:	3324      	adds	r3, #36	; 0x24
    e18c:	0018      	movs	r0, r3
    e18e:	4b07      	ldr	r3, [pc, #28]	; (e1ac <xQueueGenericReset+0xb4>)
    e190:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    e192:	4b07      	ldr	r3, [pc, #28]	; (e1b0 <xQueueGenericReset+0xb8>)
    e194:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    e196:	2301      	movs	r3, #1
}
    e198:	0018      	movs	r0, r3
    e19a:	46bd      	mov	sp, r7
    e19c:	b004      	add	sp, #16
    e19e:	bd80      	pop	{r7, pc}
    e1a0:	0000de01 	.word	0x0000de01
    e1a4:	0000f649 	.word	0x0000f649
    e1a8:	0000dde1 	.word	0x0000dde1
    e1ac:	0000dfa5 	.word	0x0000dfa5
    e1b0:	0000de25 	.word	0x0000de25

0000e1b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    e1b4:	b590      	push	{r4, r7, lr}
    e1b6:	b08b      	sub	sp, #44	; 0x2c
    e1b8:	af02      	add	r7, sp, #8
    e1ba:	60f8      	str	r0, [r7, #12]
    e1bc:	60b9      	str	r1, [r7, #8]
    e1be:	1dfb      	adds	r3, r7, #7
    e1c0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    e1c2:	68fb      	ldr	r3, [r7, #12]
    e1c4:	2b00      	cmp	r3, #0
    e1c6:	d101      	bne.n	e1cc <xQueueGenericCreate+0x18>
    e1c8:	b672      	cpsid	i
    e1ca:	e7fe      	b.n	e1ca <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    e1cc:	68bb      	ldr	r3, [r7, #8]
    e1ce:	2b00      	cmp	r3, #0
    e1d0:	d102      	bne.n	e1d8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    e1d2:	2300      	movs	r3, #0
    e1d4:	61fb      	str	r3, [r7, #28]
    e1d6:	e003      	b.n	e1e0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    e1d8:	68fb      	ldr	r3, [r7, #12]
    e1da:	68ba      	ldr	r2, [r7, #8]
    e1dc:	4353      	muls	r3, r2
    e1de:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    e1e0:	69fb      	ldr	r3, [r7, #28]
    e1e2:	334c      	adds	r3, #76	; 0x4c
    e1e4:	0018      	movs	r0, r3
    e1e6:	4b0c      	ldr	r3, [pc, #48]	; (e218 <xQueueGenericCreate+0x64>)
    e1e8:	4798      	blx	r3
    e1ea:	0003      	movs	r3, r0
    e1ec:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    e1ee:	69bb      	ldr	r3, [r7, #24]
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d00c      	beq.n	e20e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    e1f4:	69bb      	ldr	r3, [r7, #24]
    e1f6:	334c      	adds	r3, #76	; 0x4c
    e1f8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    e1fa:	1dfb      	adds	r3, r7, #7
    e1fc:	781c      	ldrb	r4, [r3, #0]
    e1fe:	697a      	ldr	r2, [r7, #20]
    e200:	68b9      	ldr	r1, [r7, #8]
    e202:	68f8      	ldr	r0, [r7, #12]
    e204:	69bb      	ldr	r3, [r7, #24]
    e206:	9300      	str	r3, [sp, #0]
    e208:	0023      	movs	r3, r4
    e20a:	4c04      	ldr	r4, [pc, #16]	; (e21c <xQueueGenericCreate+0x68>)
    e20c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
    e20e:	69bb      	ldr	r3, [r7, #24]
	}
    e210:	0018      	movs	r0, r3
    e212:	46bd      	mov	sp, r7
    e214:	b009      	add	sp, #36	; 0x24
    e216:	bd90      	pop	{r4, r7, pc}
    e218:	0000df3d 	.word	0x0000df3d
    e21c:	0000e221 	.word	0x0000e221

0000e220 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    e220:	b580      	push	{r7, lr}
    e222:	b084      	sub	sp, #16
    e224:	af00      	add	r7, sp, #0
    e226:	60f8      	str	r0, [r7, #12]
    e228:	60b9      	str	r1, [r7, #8]
    e22a:	607a      	str	r2, [r7, #4]
    e22c:	001a      	movs	r2, r3
    e22e:	1cfb      	adds	r3, r7, #3
    e230:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    e232:	68bb      	ldr	r3, [r7, #8]
    e234:	2b00      	cmp	r3, #0
    e236:	d103      	bne.n	e240 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    e238:	69bb      	ldr	r3, [r7, #24]
    e23a:	69ba      	ldr	r2, [r7, #24]
    e23c:	601a      	str	r2, [r3, #0]
    e23e:	e002      	b.n	e246 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    e240:	69bb      	ldr	r3, [r7, #24]
    e242:	687a      	ldr	r2, [r7, #4]
    e244:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    e246:	69bb      	ldr	r3, [r7, #24]
    e248:	68fa      	ldr	r2, [r7, #12]
    e24a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    e24c:	69bb      	ldr	r3, [r7, #24]
    e24e:	68ba      	ldr	r2, [r7, #8]
    e250:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    e252:	69bb      	ldr	r3, [r7, #24]
    e254:	2101      	movs	r1, #1
    e256:	0018      	movs	r0, r3
    e258:	4b04      	ldr	r3, [pc, #16]	; (e26c <prvInitialiseNewQueue+0x4c>)
    e25a:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    e25c:	69bb      	ldr	r3, [r7, #24]
    e25e:	2200      	movs	r2, #0
    e260:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    e262:	46c0      	nop			; (mov r8, r8)
    e264:	46bd      	mov	sp, r7
    e266:	b004      	add	sp, #16
    e268:	bd80      	pop	{r7, pc}
    e26a:	46c0      	nop			; (mov r8, r8)
    e26c:	0000e0f9 	.word	0x0000e0f9

0000e270 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    e270:	b580      	push	{r7, lr}
    e272:	b08a      	sub	sp, #40	; 0x28
    e274:	af00      	add	r7, sp, #0
    e276:	60f8      	str	r0, [r7, #12]
    e278:	60b9      	str	r1, [r7, #8]
    e27a:	607a      	str	r2, [r7, #4]
    e27c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    e27e:	2300      	movs	r3, #0
    e280:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e282:	68fb      	ldr	r3, [r7, #12]
    e284:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    e286:	6a3b      	ldr	r3, [r7, #32]
    e288:	2b00      	cmp	r3, #0
    e28a:	d101      	bne.n	e290 <xQueueGenericSend+0x20>
    e28c:	b672      	cpsid	i
    e28e:	e7fe      	b.n	e28e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e290:	68bb      	ldr	r3, [r7, #8]
    e292:	2b00      	cmp	r3, #0
    e294:	d103      	bne.n	e29e <xQueueGenericSend+0x2e>
    e296:	6a3b      	ldr	r3, [r7, #32]
    e298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e29a:	2b00      	cmp	r3, #0
    e29c:	d101      	bne.n	e2a2 <xQueueGenericSend+0x32>
    e29e:	2301      	movs	r3, #1
    e2a0:	e000      	b.n	e2a4 <xQueueGenericSend+0x34>
    e2a2:	2300      	movs	r3, #0
    e2a4:	2b00      	cmp	r3, #0
    e2a6:	d101      	bne.n	e2ac <xQueueGenericSend+0x3c>
    e2a8:	b672      	cpsid	i
    e2aa:	e7fe      	b.n	e2aa <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    e2ac:	683b      	ldr	r3, [r7, #0]
    e2ae:	2b02      	cmp	r3, #2
    e2b0:	d103      	bne.n	e2ba <xQueueGenericSend+0x4a>
    e2b2:	6a3b      	ldr	r3, [r7, #32]
    e2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e2b6:	2b01      	cmp	r3, #1
    e2b8:	d101      	bne.n	e2be <xQueueGenericSend+0x4e>
    e2ba:	2301      	movs	r3, #1
    e2bc:	e000      	b.n	e2c0 <xQueueGenericSend+0x50>
    e2be:	2300      	movs	r3, #0
    e2c0:	2b00      	cmp	r3, #0
    e2c2:	d101      	bne.n	e2c8 <xQueueGenericSend+0x58>
    e2c4:	b672      	cpsid	i
    e2c6:	e7fe      	b.n	e2c6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e2c8:	4b53      	ldr	r3, [pc, #332]	; (e418 <xQueueGenericSend+0x1a8>)
    e2ca:	4798      	blx	r3
    e2cc:	1e03      	subs	r3, r0, #0
    e2ce:	d102      	bne.n	e2d6 <xQueueGenericSend+0x66>
    e2d0:	687b      	ldr	r3, [r7, #4]
    e2d2:	2b00      	cmp	r3, #0
    e2d4:	d101      	bne.n	e2da <xQueueGenericSend+0x6a>
    e2d6:	2301      	movs	r3, #1
    e2d8:	e000      	b.n	e2dc <xQueueGenericSend+0x6c>
    e2da:	2300      	movs	r3, #0
    e2dc:	2b00      	cmp	r3, #0
    e2de:	d101      	bne.n	e2e4 <xQueueGenericSend+0x74>
    e2e0:	b672      	cpsid	i
    e2e2:	e7fe      	b.n	e2e2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    e2e4:	4b4d      	ldr	r3, [pc, #308]	; (e41c <xQueueGenericSend+0x1ac>)
    e2e6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    e2e8:	6a3b      	ldr	r3, [r7, #32]
    e2ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e2ec:	6a3b      	ldr	r3, [r7, #32]
    e2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e2f0:	429a      	cmp	r2, r3
    e2f2:	d302      	bcc.n	e2fa <xQueueGenericSend+0x8a>
    e2f4:	683b      	ldr	r3, [r7, #0]
    e2f6:	2b02      	cmp	r3, #2
    e2f8:	d12d      	bne.n	e356 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    e2fa:	683a      	ldr	r2, [r7, #0]
    e2fc:	68b9      	ldr	r1, [r7, #8]
    e2fe:	6a3b      	ldr	r3, [r7, #32]
    e300:	0018      	movs	r0, r3
    e302:	4b47      	ldr	r3, [pc, #284]	; (e420 <xQueueGenericSend+0x1b0>)
    e304:	4798      	blx	r3
    e306:	0003      	movs	r3, r0
    e308:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    e30a:	6a3b      	ldr	r3, [r7, #32]
    e30c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e30e:	2b00      	cmp	r3, #0
    e310:	d00a      	beq.n	e328 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    e312:	683a      	ldr	r2, [r7, #0]
    e314:	6a3b      	ldr	r3, [r7, #32]
    e316:	0011      	movs	r1, r2
    e318:	0018      	movs	r0, r3
    e31a:	4b42      	ldr	r3, [pc, #264]	; (e424 <xQueueGenericSend+0x1b4>)
    e31c:	4798      	blx	r3
    e31e:	1e03      	subs	r3, r0, #0
    e320:	d015      	beq.n	e34e <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    e322:	4b41      	ldr	r3, [pc, #260]	; (e428 <xQueueGenericSend+0x1b8>)
    e324:	4798      	blx	r3
    e326:	e012      	b.n	e34e <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e328:	6a3b      	ldr	r3, [r7, #32]
    e32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e32c:	2b00      	cmp	r3, #0
    e32e:	d009      	beq.n	e344 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e330:	6a3b      	ldr	r3, [r7, #32]
    e332:	3324      	adds	r3, #36	; 0x24
    e334:	0018      	movs	r0, r3
    e336:	4b3d      	ldr	r3, [pc, #244]	; (e42c <xQueueGenericSend+0x1bc>)
    e338:	4798      	blx	r3
    e33a:	1e03      	subs	r3, r0, #0
    e33c:	d007      	beq.n	e34e <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    e33e:	4b3a      	ldr	r3, [pc, #232]	; (e428 <xQueueGenericSend+0x1b8>)
    e340:	4798      	blx	r3
    e342:	e004      	b.n	e34e <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    e344:	69fb      	ldr	r3, [r7, #28]
    e346:	2b00      	cmp	r3, #0
    e348:	d001      	beq.n	e34e <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    e34a:	4b37      	ldr	r3, [pc, #220]	; (e428 <xQueueGenericSend+0x1b8>)
    e34c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    e34e:	4b38      	ldr	r3, [pc, #224]	; (e430 <xQueueGenericSend+0x1c0>)
    e350:	4798      	blx	r3
				return pdPASS;
    e352:	2301      	movs	r3, #1
    e354:	e05c      	b.n	e410 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e356:	687b      	ldr	r3, [r7, #4]
    e358:	2b00      	cmp	r3, #0
    e35a:	d103      	bne.n	e364 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    e35c:	4b34      	ldr	r3, [pc, #208]	; (e430 <xQueueGenericSend+0x1c0>)
    e35e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    e360:	2300      	movs	r3, #0
    e362:	e055      	b.n	e410 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    e364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e366:	2b00      	cmp	r3, #0
    e368:	d106      	bne.n	e378 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e36a:	2314      	movs	r3, #20
    e36c:	18fb      	adds	r3, r7, r3
    e36e:	0018      	movs	r0, r3
    e370:	4b30      	ldr	r3, [pc, #192]	; (e434 <xQueueGenericSend+0x1c4>)
    e372:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e374:	2301      	movs	r3, #1
    e376:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e378:	4b2d      	ldr	r3, [pc, #180]	; (e430 <xQueueGenericSend+0x1c0>)
    e37a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    e37c:	4b2e      	ldr	r3, [pc, #184]	; (e438 <xQueueGenericSend+0x1c8>)
    e37e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e380:	4b26      	ldr	r3, [pc, #152]	; (e41c <xQueueGenericSend+0x1ac>)
    e382:	4798      	blx	r3
    e384:	6a3b      	ldr	r3, [r7, #32]
    e386:	2244      	movs	r2, #68	; 0x44
    e388:	5c9b      	ldrb	r3, [r3, r2]
    e38a:	b25b      	sxtb	r3, r3
    e38c:	3301      	adds	r3, #1
    e38e:	d103      	bne.n	e398 <xQueueGenericSend+0x128>
    e390:	6a3b      	ldr	r3, [r7, #32]
    e392:	2244      	movs	r2, #68	; 0x44
    e394:	2100      	movs	r1, #0
    e396:	5499      	strb	r1, [r3, r2]
    e398:	6a3b      	ldr	r3, [r7, #32]
    e39a:	2245      	movs	r2, #69	; 0x45
    e39c:	5c9b      	ldrb	r3, [r3, r2]
    e39e:	b25b      	sxtb	r3, r3
    e3a0:	3301      	adds	r3, #1
    e3a2:	d103      	bne.n	e3ac <xQueueGenericSend+0x13c>
    e3a4:	6a3b      	ldr	r3, [r7, #32]
    e3a6:	2245      	movs	r2, #69	; 0x45
    e3a8:	2100      	movs	r1, #0
    e3aa:	5499      	strb	r1, [r3, r2]
    e3ac:	4b20      	ldr	r3, [pc, #128]	; (e430 <xQueueGenericSend+0x1c0>)
    e3ae:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e3b0:	1d3a      	adds	r2, r7, #4
    e3b2:	2314      	movs	r3, #20
    e3b4:	18fb      	adds	r3, r7, r3
    e3b6:	0011      	movs	r1, r2
    e3b8:	0018      	movs	r0, r3
    e3ba:	4b20      	ldr	r3, [pc, #128]	; (e43c <xQueueGenericSend+0x1cc>)
    e3bc:	4798      	blx	r3
    e3be:	1e03      	subs	r3, r0, #0
    e3c0:	d11f      	bne.n	e402 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    e3c2:	6a3b      	ldr	r3, [r7, #32]
    e3c4:	0018      	movs	r0, r3
    e3c6:	4b1e      	ldr	r3, [pc, #120]	; (e440 <xQueueGenericSend+0x1d0>)
    e3c8:	4798      	blx	r3
    e3ca:	1e03      	subs	r3, r0, #0
    e3cc:	d012      	beq.n	e3f4 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    e3ce:	6a3b      	ldr	r3, [r7, #32]
    e3d0:	3310      	adds	r3, #16
    e3d2:	687a      	ldr	r2, [r7, #4]
    e3d4:	0011      	movs	r1, r2
    e3d6:	0018      	movs	r0, r3
    e3d8:	4b1a      	ldr	r3, [pc, #104]	; (e444 <xQueueGenericSend+0x1d4>)
    e3da:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    e3dc:	6a3b      	ldr	r3, [r7, #32]
    e3de:	0018      	movs	r0, r3
    e3e0:	4b19      	ldr	r3, [pc, #100]	; (e448 <xQueueGenericSend+0x1d8>)
    e3e2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    e3e4:	4b19      	ldr	r3, [pc, #100]	; (e44c <xQueueGenericSend+0x1dc>)
    e3e6:	4798      	blx	r3
    e3e8:	1e03      	subs	r3, r0, #0
    e3ea:	d000      	beq.n	e3ee <xQueueGenericSend+0x17e>
    e3ec:	e77a      	b.n	e2e4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    e3ee:	4b0e      	ldr	r3, [pc, #56]	; (e428 <xQueueGenericSend+0x1b8>)
    e3f0:	4798      	blx	r3
    e3f2:	e777      	b.n	e2e4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    e3f4:	6a3b      	ldr	r3, [r7, #32]
    e3f6:	0018      	movs	r0, r3
    e3f8:	4b13      	ldr	r3, [pc, #76]	; (e448 <xQueueGenericSend+0x1d8>)
    e3fa:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e3fc:	4b13      	ldr	r3, [pc, #76]	; (e44c <xQueueGenericSend+0x1dc>)
    e3fe:	4798      	blx	r3
    e400:	e770      	b.n	e2e4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    e402:	6a3b      	ldr	r3, [r7, #32]
    e404:	0018      	movs	r0, r3
    e406:	4b10      	ldr	r3, [pc, #64]	; (e448 <xQueueGenericSend+0x1d8>)
    e408:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e40a:	4b10      	ldr	r3, [pc, #64]	; (e44c <xQueueGenericSend+0x1dc>)
    e40c:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    e40e:	2300      	movs	r3, #0
		}
	}
}
    e410:	0018      	movs	r0, r3
    e412:	46bd      	mov	sp, r7
    e414:	b00a      	add	sp, #40	; 0x28
    e416:	bd80      	pop	{r7, pc}
    e418:	0000f981 	.word	0x0000f981
    e41c:	0000de01 	.word	0x0000de01
    e420:	0000e931 	.word	0x0000e931
    e424:	0000ec35 	.word	0x0000ec35
    e428:	0000dde1 	.word	0x0000dde1
    e42c:	0000f649 	.word	0x0000f649
    e430:	0000de25 	.word	0x0000de25
    e434:	0000f709 	.word	0x0000f709
    e438:	0000f231 	.word	0x0000f231
    e43c:	0000f731 	.word	0x0000f731
    e440:	0000eb85 	.word	0x0000eb85
    e444:	0000f5b1 	.word	0x0000f5b1
    e448:	0000ea61 	.word	0x0000ea61
    e44c:	0000f249 	.word	0x0000f249

0000e450 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    e450:	b580      	push	{r7, lr}
    e452:	b088      	sub	sp, #32
    e454:	af00      	add	r7, sp, #0
    e456:	60f8      	str	r0, [r7, #12]
    e458:	60b9      	str	r1, [r7, #8]
    e45a:	607a      	str	r2, [r7, #4]
    e45c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e45e:	68fb      	ldr	r3, [r7, #12]
    e460:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    e462:	69bb      	ldr	r3, [r7, #24]
    e464:	2b00      	cmp	r3, #0
    e466:	d101      	bne.n	e46c <xQueueGenericSendFromISR+0x1c>
    e468:	b672      	cpsid	i
    e46a:	e7fe      	b.n	e46a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e46c:	68bb      	ldr	r3, [r7, #8]
    e46e:	2b00      	cmp	r3, #0
    e470:	d103      	bne.n	e47a <xQueueGenericSendFromISR+0x2a>
    e472:	69bb      	ldr	r3, [r7, #24]
    e474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e476:	2b00      	cmp	r3, #0
    e478:	d101      	bne.n	e47e <xQueueGenericSendFromISR+0x2e>
    e47a:	2301      	movs	r3, #1
    e47c:	e000      	b.n	e480 <xQueueGenericSendFromISR+0x30>
    e47e:	2300      	movs	r3, #0
    e480:	2b00      	cmp	r3, #0
    e482:	d101      	bne.n	e488 <xQueueGenericSendFromISR+0x38>
    e484:	b672      	cpsid	i
    e486:	e7fe      	b.n	e486 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    e488:	683b      	ldr	r3, [r7, #0]
    e48a:	2b02      	cmp	r3, #2
    e48c:	d103      	bne.n	e496 <xQueueGenericSendFromISR+0x46>
    e48e:	69bb      	ldr	r3, [r7, #24]
    e490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e492:	2b01      	cmp	r3, #1
    e494:	d101      	bne.n	e49a <xQueueGenericSendFromISR+0x4a>
    e496:	2301      	movs	r3, #1
    e498:	e000      	b.n	e49c <xQueueGenericSendFromISR+0x4c>
    e49a:	2300      	movs	r3, #0
    e49c:	2b00      	cmp	r3, #0
    e49e:	d101      	bne.n	e4a4 <xQueueGenericSendFromISR+0x54>
    e4a0:	b672      	cpsid	i
    e4a2:	e7fe      	b.n	e4a2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    e4a4:	4b2d      	ldr	r3, [pc, #180]	; (e55c <xQueueGenericSendFromISR+0x10c>)
    e4a6:	4798      	blx	r3
    e4a8:	0003      	movs	r3, r0
    e4aa:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    e4ac:	69bb      	ldr	r3, [r7, #24]
    e4ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e4b0:	69bb      	ldr	r3, [r7, #24]
    e4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e4b4:	429a      	cmp	r2, r3
    e4b6:	d302      	bcc.n	e4be <xQueueGenericSendFromISR+0x6e>
    e4b8:	683b      	ldr	r3, [r7, #0]
    e4ba:	2b02      	cmp	r3, #2
    e4bc:	d142      	bne.n	e544 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    e4be:	2313      	movs	r3, #19
    e4c0:	18fb      	adds	r3, r7, r3
    e4c2:	69ba      	ldr	r2, [r7, #24]
    e4c4:	2145      	movs	r1, #69	; 0x45
    e4c6:	5c52      	ldrb	r2, [r2, r1]
    e4c8:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    e4ca:	683a      	ldr	r2, [r7, #0]
    e4cc:	68b9      	ldr	r1, [r7, #8]
    e4ce:	69bb      	ldr	r3, [r7, #24]
    e4d0:	0018      	movs	r0, r3
    e4d2:	4b23      	ldr	r3, [pc, #140]	; (e560 <xQueueGenericSendFromISR+0x110>)
    e4d4:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    e4d6:	2313      	movs	r3, #19
    e4d8:	18fb      	adds	r3, r7, r3
    e4da:	781b      	ldrb	r3, [r3, #0]
    e4dc:	b25b      	sxtb	r3, r3
    e4de:	3301      	adds	r3, #1
    e4e0:	d124      	bne.n	e52c <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    e4e2:	69bb      	ldr	r3, [r7, #24]
    e4e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e4e6:	2b00      	cmp	r3, #0
    e4e8:	d00e      	beq.n	e508 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    e4ea:	683a      	ldr	r2, [r7, #0]
    e4ec:	69bb      	ldr	r3, [r7, #24]
    e4ee:	0011      	movs	r1, r2
    e4f0:	0018      	movs	r0, r3
    e4f2:	4b1c      	ldr	r3, [pc, #112]	; (e564 <xQueueGenericSendFromISR+0x114>)
    e4f4:	4798      	blx	r3
    e4f6:	1e03      	subs	r3, r0, #0
    e4f8:	d021      	beq.n	e53e <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    e4fa:	687b      	ldr	r3, [r7, #4]
    e4fc:	2b00      	cmp	r3, #0
    e4fe:	d01e      	beq.n	e53e <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    e500:	687b      	ldr	r3, [r7, #4]
    e502:	2201      	movs	r2, #1
    e504:	601a      	str	r2, [r3, #0]
    e506:	e01a      	b.n	e53e <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    e508:	69bb      	ldr	r3, [r7, #24]
    e50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e50c:	2b00      	cmp	r3, #0
    e50e:	d016      	beq.n	e53e <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    e510:	69bb      	ldr	r3, [r7, #24]
    e512:	3324      	adds	r3, #36	; 0x24
    e514:	0018      	movs	r0, r3
    e516:	4b14      	ldr	r3, [pc, #80]	; (e568 <xQueueGenericSendFromISR+0x118>)
    e518:	4798      	blx	r3
    e51a:	1e03      	subs	r3, r0, #0
    e51c:	d00f      	beq.n	e53e <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    e51e:	687b      	ldr	r3, [r7, #4]
    e520:	2b00      	cmp	r3, #0
    e522:	d00c      	beq.n	e53e <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    e524:	687b      	ldr	r3, [r7, #4]
    e526:	2201      	movs	r2, #1
    e528:	601a      	str	r2, [r3, #0]
    e52a:	e008      	b.n	e53e <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    e52c:	2313      	movs	r3, #19
    e52e:	18fb      	adds	r3, r7, r3
    e530:	781b      	ldrb	r3, [r3, #0]
    e532:	3301      	adds	r3, #1
    e534:	b2db      	uxtb	r3, r3
    e536:	b259      	sxtb	r1, r3
    e538:	69bb      	ldr	r3, [r7, #24]
    e53a:	2245      	movs	r2, #69	; 0x45
    e53c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    e53e:	2301      	movs	r3, #1
    e540:	61fb      	str	r3, [r7, #28]
		{
    e542:	e001      	b.n	e548 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    e544:	2300      	movs	r3, #0
    e546:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    e548:	697b      	ldr	r3, [r7, #20]
    e54a:	0018      	movs	r0, r3
    e54c:	4b07      	ldr	r3, [pc, #28]	; (e56c <xQueueGenericSendFromISR+0x11c>)
    e54e:	4798      	blx	r3

	return xReturn;
    e550:	69fb      	ldr	r3, [r7, #28]
}
    e552:	0018      	movs	r0, r3
    e554:	46bd      	mov	sp, r7
    e556:	b008      	add	sp, #32
    e558:	bd80      	pop	{r7, pc}
    e55a:	46c0      	nop			; (mov r8, r8)
    e55c:	0000de55 	.word	0x0000de55
    e560:	0000e931 	.word	0x0000e931
    e564:	0000ec35 	.word	0x0000ec35
    e568:	0000f649 	.word	0x0000f649
    e56c:	0000de61 	.word	0x0000de61

0000e570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    e570:	b580      	push	{r7, lr}
    e572:	b08a      	sub	sp, #40	; 0x28
    e574:	af00      	add	r7, sp, #0
    e576:	60f8      	str	r0, [r7, #12]
    e578:	60b9      	str	r1, [r7, #8]
    e57a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    e57c:	2300      	movs	r3, #0
    e57e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e580:	68fb      	ldr	r3, [r7, #12]
    e582:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    e584:	6a3b      	ldr	r3, [r7, #32]
    e586:	2b00      	cmp	r3, #0
    e588:	d101      	bne.n	e58e <xQueueReceive+0x1e>
    e58a:	b672      	cpsid	i
    e58c:	e7fe      	b.n	e58c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    e58e:	68bb      	ldr	r3, [r7, #8]
    e590:	2b00      	cmp	r3, #0
    e592:	d103      	bne.n	e59c <xQueueReceive+0x2c>
    e594:	6a3b      	ldr	r3, [r7, #32]
    e596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e598:	2b00      	cmp	r3, #0
    e59a:	d101      	bne.n	e5a0 <xQueueReceive+0x30>
    e59c:	2301      	movs	r3, #1
    e59e:	e000      	b.n	e5a2 <xQueueReceive+0x32>
    e5a0:	2300      	movs	r3, #0
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	d101      	bne.n	e5aa <xQueueReceive+0x3a>
    e5a6:	b672      	cpsid	i
    e5a8:	e7fe      	b.n	e5a8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e5aa:	4b4c      	ldr	r3, [pc, #304]	; (e6dc <xQueueReceive+0x16c>)
    e5ac:	4798      	blx	r3
    e5ae:	1e03      	subs	r3, r0, #0
    e5b0:	d102      	bne.n	e5b8 <xQueueReceive+0x48>
    e5b2:	687b      	ldr	r3, [r7, #4]
    e5b4:	2b00      	cmp	r3, #0
    e5b6:	d101      	bne.n	e5bc <xQueueReceive+0x4c>
    e5b8:	2301      	movs	r3, #1
    e5ba:	e000      	b.n	e5be <xQueueReceive+0x4e>
    e5bc:	2300      	movs	r3, #0
    e5be:	2b00      	cmp	r3, #0
    e5c0:	d101      	bne.n	e5c6 <xQueueReceive+0x56>
    e5c2:	b672      	cpsid	i
    e5c4:	e7fe      	b.n	e5c4 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    e5c6:	4b46      	ldr	r3, [pc, #280]	; (e6e0 <xQueueReceive+0x170>)
    e5c8:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    e5ca:	6a3b      	ldr	r3, [r7, #32]
    e5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e5ce:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    e5d0:	69fb      	ldr	r3, [r7, #28]
    e5d2:	2b00      	cmp	r3, #0
    e5d4:	d01a      	beq.n	e60c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    e5d6:	68ba      	ldr	r2, [r7, #8]
    e5d8:	6a3b      	ldr	r3, [r7, #32]
    e5da:	0011      	movs	r1, r2
    e5dc:	0018      	movs	r0, r3
    e5de:	4b41      	ldr	r3, [pc, #260]	; (e6e4 <xQueueReceive+0x174>)
    e5e0:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    e5e2:	69fb      	ldr	r3, [r7, #28]
    e5e4:	1e5a      	subs	r2, r3, #1
    e5e6:	6a3b      	ldr	r3, [r7, #32]
    e5e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e5ea:	6a3b      	ldr	r3, [r7, #32]
    e5ec:	691b      	ldr	r3, [r3, #16]
    e5ee:	2b00      	cmp	r3, #0
    e5f0:	d008      	beq.n	e604 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e5f2:	6a3b      	ldr	r3, [r7, #32]
    e5f4:	3310      	adds	r3, #16
    e5f6:	0018      	movs	r0, r3
    e5f8:	4b3b      	ldr	r3, [pc, #236]	; (e6e8 <xQueueReceive+0x178>)
    e5fa:	4798      	blx	r3
    e5fc:	1e03      	subs	r3, r0, #0
    e5fe:	d001      	beq.n	e604 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
    e600:	4b3a      	ldr	r3, [pc, #232]	; (e6ec <xQueueReceive+0x17c>)
    e602:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    e604:	4b3a      	ldr	r3, [pc, #232]	; (e6f0 <xQueueReceive+0x180>)
    e606:	4798      	blx	r3
				return pdPASS;
    e608:	2301      	movs	r3, #1
    e60a:	e062      	b.n	e6d2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e60c:	687b      	ldr	r3, [r7, #4]
    e60e:	2b00      	cmp	r3, #0
    e610:	d103      	bne.n	e61a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    e612:	4b37      	ldr	r3, [pc, #220]	; (e6f0 <xQueueReceive+0x180>)
    e614:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    e616:	2300      	movs	r3, #0
    e618:	e05b      	b.n	e6d2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
    e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e61c:	2b00      	cmp	r3, #0
    e61e:	d106      	bne.n	e62e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e620:	2314      	movs	r3, #20
    e622:	18fb      	adds	r3, r7, r3
    e624:	0018      	movs	r0, r3
    e626:	4b33      	ldr	r3, [pc, #204]	; (e6f4 <xQueueReceive+0x184>)
    e628:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e62a:	2301      	movs	r3, #1
    e62c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e62e:	4b30      	ldr	r3, [pc, #192]	; (e6f0 <xQueueReceive+0x180>)
    e630:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    e632:	4b31      	ldr	r3, [pc, #196]	; (e6f8 <xQueueReceive+0x188>)
    e634:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e636:	4b2a      	ldr	r3, [pc, #168]	; (e6e0 <xQueueReceive+0x170>)
    e638:	4798      	blx	r3
    e63a:	6a3b      	ldr	r3, [r7, #32]
    e63c:	2244      	movs	r2, #68	; 0x44
    e63e:	5c9b      	ldrb	r3, [r3, r2]
    e640:	b25b      	sxtb	r3, r3
    e642:	3301      	adds	r3, #1
    e644:	d103      	bne.n	e64e <xQueueReceive+0xde>
    e646:	6a3b      	ldr	r3, [r7, #32]
    e648:	2244      	movs	r2, #68	; 0x44
    e64a:	2100      	movs	r1, #0
    e64c:	5499      	strb	r1, [r3, r2]
    e64e:	6a3b      	ldr	r3, [r7, #32]
    e650:	2245      	movs	r2, #69	; 0x45
    e652:	5c9b      	ldrb	r3, [r3, r2]
    e654:	b25b      	sxtb	r3, r3
    e656:	3301      	adds	r3, #1
    e658:	d103      	bne.n	e662 <xQueueReceive+0xf2>
    e65a:	6a3b      	ldr	r3, [r7, #32]
    e65c:	2245      	movs	r2, #69	; 0x45
    e65e:	2100      	movs	r1, #0
    e660:	5499      	strb	r1, [r3, r2]
    e662:	4b23      	ldr	r3, [pc, #140]	; (e6f0 <xQueueReceive+0x180>)
    e664:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e666:	1d3a      	adds	r2, r7, #4
    e668:	2314      	movs	r3, #20
    e66a:	18fb      	adds	r3, r7, r3
    e66c:	0011      	movs	r1, r2
    e66e:	0018      	movs	r0, r3
    e670:	4b22      	ldr	r3, [pc, #136]	; (e6fc <xQueueReceive+0x18c>)
    e672:	4798      	blx	r3
    e674:	1e03      	subs	r3, r0, #0
    e676:	d11e      	bne.n	e6b6 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e678:	6a3b      	ldr	r3, [r7, #32]
    e67a:	0018      	movs	r0, r3
    e67c:	4b20      	ldr	r3, [pc, #128]	; (e700 <xQueueReceive+0x190>)
    e67e:	4798      	blx	r3
    e680:	1e03      	subs	r3, r0, #0
    e682:	d011      	beq.n	e6a8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e684:	6a3b      	ldr	r3, [r7, #32]
    e686:	3324      	adds	r3, #36	; 0x24
    e688:	687a      	ldr	r2, [r7, #4]
    e68a:	0011      	movs	r1, r2
    e68c:	0018      	movs	r0, r3
    e68e:	4b1d      	ldr	r3, [pc, #116]	; (e704 <xQueueReceive+0x194>)
    e690:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    e692:	6a3b      	ldr	r3, [r7, #32]
    e694:	0018      	movs	r0, r3
    e696:	4b1c      	ldr	r3, [pc, #112]	; (e708 <xQueueReceive+0x198>)
    e698:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    e69a:	4b1c      	ldr	r3, [pc, #112]	; (e70c <xQueueReceive+0x19c>)
    e69c:	4798      	blx	r3
    e69e:	1e03      	subs	r3, r0, #0
    e6a0:	d191      	bne.n	e5c6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    e6a2:	4b12      	ldr	r3, [pc, #72]	; (e6ec <xQueueReceive+0x17c>)
    e6a4:	4798      	blx	r3
    e6a6:	e78e      	b.n	e5c6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    e6a8:	6a3b      	ldr	r3, [r7, #32]
    e6aa:	0018      	movs	r0, r3
    e6ac:	4b16      	ldr	r3, [pc, #88]	; (e708 <xQueueReceive+0x198>)
    e6ae:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e6b0:	4b16      	ldr	r3, [pc, #88]	; (e70c <xQueueReceive+0x19c>)
    e6b2:	4798      	blx	r3
    e6b4:	e787      	b.n	e5c6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    e6b6:	6a3b      	ldr	r3, [r7, #32]
    e6b8:	0018      	movs	r0, r3
    e6ba:	4b13      	ldr	r3, [pc, #76]	; (e708 <xQueueReceive+0x198>)
    e6bc:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e6be:	4b13      	ldr	r3, [pc, #76]	; (e70c <xQueueReceive+0x19c>)
    e6c0:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e6c2:	6a3b      	ldr	r3, [r7, #32]
    e6c4:	0018      	movs	r0, r3
    e6c6:	4b0e      	ldr	r3, [pc, #56]	; (e700 <xQueueReceive+0x190>)
    e6c8:	4798      	blx	r3
    e6ca:	1e03      	subs	r3, r0, #0
    e6cc:	d100      	bne.n	e6d0 <xQueueReceive+0x160>
    e6ce:	e77a      	b.n	e5c6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    e6d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    e6d2:	0018      	movs	r0, r3
    e6d4:	46bd      	mov	sp, r7
    e6d6:	b00a      	add	sp, #40	; 0x28
    e6d8:	bd80      	pop	{r7, pc}
    e6da:	46c0      	nop			; (mov r8, r8)
    e6dc:	0000f981 	.word	0x0000f981
    e6e0:	0000de01 	.word	0x0000de01
    e6e4:	0000ea11 	.word	0x0000ea11
    e6e8:	0000f649 	.word	0x0000f649
    e6ec:	0000dde1 	.word	0x0000dde1
    e6f0:	0000de25 	.word	0x0000de25
    e6f4:	0000f709 	.word	0x0000f709
    e6f8:	0000f231 	.word	0x0000f231
    e6fc:	0000f731 	.word	0x0000f731
    e700:	0000eb51 	.word	0x0000eb51
    e704:	0000f5b1 	.word	0x0000f5b1
    e708:	0000ea61 	.word	0x0000ea61
    e70c:	0000f249 	.word	0x0000f249

0000e710 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    e710:	b580      	push	{r7, lr}
    e712:	b08a      	sub	sp, #40	; 0x28
    e714:	af00      	add	r7, sp, #0
    e716:	6078      	str	r0, [r7, #4]
    e718:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    e71a:	2300      	movs	r3, #0
    e71c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    e71e:	687b      	ldr	r3, [r7, #4]
    e720:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    e722:	2300      	movs	r3, #0
    e724:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    e726:	69fb      	ldr	r3, [r7, #28]
    e728:	2b00      	cmp	r3, #0
    e72a:	d101      	bne.n	e730 <xQueueSemaphoreTake+0x20>
    e72c:	b672      	cpsid	i
    e72e:	e7fe      	b.n	e72e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    e730:	69fb      	ldr	r3, [r7, #28]
    e732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e734:	2b00      	cmp	r3, #0
    e736:	d001      	beq.n	e73c <xQueueSemaphoreTake+0x2c>
    e738:	b672      	cpsid	i
    e73a:	e7fe      	b.n	e73a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    e73c:	4b61      	ldr	r3, [pc, #388]	; (e8c4 <xQueueSemaphoreTake+0x1b4>)
    e73e:	4798      	blx	r3
    e740:	1e03      	subs	r3, r0, #0
    e742:	d102      	bne.n	e74a <xQueueSemaphoreTake+0x3a>
    e744:	683b      	ldr	r3, [r7, #0]
    e746:	2b00      	cmp	r3, #0
    e748:	d101      	bne.n	e74e <xQueueSemaphoreTake+0x3e>
    e74a:	2301      	movs	r3, #1
    e74c:	e000      	b.n	e750 <xQueueSemaphoreTake+0x40>
    e74e:	2300      	movs	r3, #0
    e750:	2b00      	cmp	r3, #0
    e752:	d101      	bne.n	e758 <xQueueSemaphoreTake+0x48>
    e754:	b672      	cpsid	i
    e756:	e7fe      	b.n	e756 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    e758:	4b5b      	ldr	r3, [pc, #364]	; (e8c8 <xQueueSemaphoreTake+0x1b8>)
    e75a:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    e75c:	69fb      	ldr	r3, [r7, #28]
    e75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e760:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    e762:	69bb      	ldr	r3, [r7, #24]
    e764:	2b00      	cmp	r3, #0
    e766:	d01d      	beq.n	e7a4 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    e768:	69bb      	ldr	r3, [r7, #24]
    e76a:	1e5a      	subs	r2, r3, #1
    e76c:	69fb      	ldr	r3, [r7, #28]
    e76e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e770:	69fb      	ldr	r3, [r7, #28]
    e772:	681b      	ldr	r3, [r3, #0]
    e774:	2b00      	cmp	r3, #0
    e776:	d104      	bne.n	e782 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    e778:	4b54      	ldr	r3, [pc, #336]	; (e8cc <xQueueSemaphoreTake+0x1bc>)
    e77a:	4798      	blx	r3
    e77c:	0002      	movs	r2, r0
    e77e:	69fb      	ldr	r3, [r7, #28]
    e780:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    e782:	69fb      	ldr	r3, [r7, #28]
    e784:	691b      	ldr	r3, [r3, #16]
    e786:	2b00      	cmp	r3, #0
    e788:	d008      	beq.n	e79c <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    e78a:	69fb      	ldr	r3, [r7, #28]
    e78c:	3310      	adds	r3, #16
    e78e:	0018      	movs	r0, r3
    e790:	4b4f      	ldr	r3, [pc, #316]	; (e8d0 <xQueueSemaphoreTake+0x1c0>)
    e792:	4798      	blx	r3
    e794:	1e03      	subs	r3, r0, #0
    e796:	d001      	beq.n	e79c <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    e798:	4b4e      	ldr	r3, [pc, #312]	; (e8d4 <xQueueSemaphoreTake+0x1c4>)
    e79a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    e79c:	4b4e      	ldr	r3, [pc, #312]	; (e8d8 <xQueueSemaphoreTake+0x1c8>)
    e79e:	4798      	blx	r3
				return pdPASS;
    e7a0:	2301      	movs	r3, #1
    e7a2:	e08b      	b.n	e8bc <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    e7a4:	683b      	ldr	r3, [r7, #0]
    e7a6:	2b00      	cmp	r3, #0
    e7a8:	d108      	bne.n	e7bc <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    e7aa:	6a3b      	ldr	r3, [r7, #32]
    e7ac:	2b00      	cmp	r3, #0
    e7ae:	d001      	beq.n	e7b4 <xQueueSemaphoreTake+0xa4>
    e7b0:	b672      	cpsid	i
    e7b2:	e7fe      	b.n	e7b2 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    e7b4:	4b48      	ldr	r3, [pc, #288]	; (e8d8 <xQueueSemaphoreTake+0x1c8>)
    e7b6:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    e7b8:	2300      	movs	r3, #0
    e7ba:	e07f      	b.n	e8bc <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
    e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e7be:	2b00      	cmp	r3, #0
    e7c0:	d106      	bne.n	e7d0 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    e7c2:	230c      	movs	r3, #12
    e7c4:	18fb      	adds	r3, r7, r3
    e7c6:	0018      	movs	r0, r3
    e7c8:	4b44      	ldr	r3, [pc, #272]	; (e8dc <xQueueSemaphoreTake+0x1cc>)
    e7ca:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    e7cc:	2301      	movs	r3, #1
    e7ce:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    e7d0:	4b41      	ldr	r3, [pc, #260]	; (e8d8 <xQueueSemaphoreTake+0x1c8>)
    e7d2:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    e7d4:	4b42      	ldr	r3, [pc, #264]	; (e8e0 <xQueueSemaphoreTake+0x1d0>)
    e7d6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    e7d8:	4b3b      	ldr	r3, [pc, #236]	; (e8c8 <xQueueSemaphoreTake+0x1b8>)
    e7da:	4798      	blx	r3
    e7dc:	69fb      	ldr	r3, [r7, #28]
    e7de:	2244      	movs	r2, #68	; 0x44
    e7e0:	5c9b      	ldrb	r3, [r3, r2]
    e7e2:	b25b      	sxtb	r3, r3
    e7e4:	3301      	adds	r3, #1
    e7e6:	d103      	bne.n	e7f0 <xQueueSemaphoreTake+0xe0>
    e7e8:	69fb      	ldr	r3, [r7, #28]
    e7ea:	2244      	movs	r2, #68	; 0x44
    e7ec:	2100      	movs	r1, #0
    e7ee:	5499      	strb	r1, [r3, r2]
    e7f0:	69fb      	ldr	r3, [r7, #28]
    e7f2:	2245      	movs	r2, #69	; 0x45
    e7f4:	5c9b      	ldrb	r3, [r3, r2]
    e7f6:	b25b      	sxtb	r3, r3
    e7f8:	3301      	adds	r3, #1
    e7fa:	d103      	bne.n	e804 <xQueueSemaphoreTake+0xf4>
    e7fc:	69fb      	ldr	r3, [r7, #28]
    e7fe:	2245      	movs	r2, #69	; 0x45
    e800:	2100      	movs	r1, #0
    e802:	5499      	strb	r1, [r3, r2]
    e804:	4b34      	ldr	r3, [pc, #208]	; (e8d8 <xQueueSemaphoreTake+0x1c8>)
    e806:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    e808:	003a      	movs	r2, r7
    e80a:	230c      	movs	r3, #12
    e80c:	18fb      	adds	r3, r7, r3
    e80e:	0011      	movs	r1, r2
    e810:	0018      	movs	r0, r3
    e812:	4b34      	ldr	r3, [pc, #208]	; (e8e4 <xQueueSemaphoreTake+0x1d4>)
    e814:	4798      	blx	r3
    e816:	1e03      	subs	r3, r0, #0
    e818:	d12e      	bne.n	e878 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e81a:	69fb      	ldr	r3, [r7, #28]
    e81c:	0018      	movs	r0, r3
    e81e:	4b32      	ldr	r3, [pc, #200]	; (e8e8 <xQueueSemaphoreTake+0x1d8>)
    e820:	4798      	blx	r3
    e822:	1e03      	subs	r3, r0, #0
    e824:	d021      	beq.n	e86a <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e826:	69fb      	ldr	r3, [r7, #28]
    e828:	681b      	ldr	r3, [r3, #0]
    e82a:	2b00      	cmp	r3, #0
    e82c:	d10a      	bne.n	e844 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
    e82e:	4b26      	ldr	r3, [pc, #152]	; (e8c8 <xQueueSemaphoreTake+0x1b8>)
    e830:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    e832:	69fb      	ldr	r3, [r7, #28]
    e834:	685b      	ldr	r3, [r3, #4]
    e836:	0018      	movs	r0, r3
    e838:	4b2c      	ldr	r3, [pc, #176]	; (e8ec <xQueueSemaphoreTake+0x1dc>)
    e83a:	4798      	blx	r3
    e83c:	0003      	movs	r3, r0
    e83e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    e840:	4b25      	ldr	r3, [pc, #148]	; (e8d8 <xQueueSemaphoreTake+0x1c8>)
    e842:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    e844:	69fb      	ldr	r3, [r7, #28]
    e846:	3324      	adds	r3, #36	; 0x24
    e848:	683a      	ldr	r2, [r7, #0]
    e84a:	0011      	movs	r1, r2
    e84c:	0018      	movs	r0, r3
    e84e:	4b28      	ldr	r3, [pc, #160]	; (e8f0 <xQueueSemaphoreTake+0x1e0>)
    e850:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    e852:	69fb      	ldr	r3, [r7, #28]
    e854:	0018      	movs	r0, r3
    e856:	4b27      	ldr	r3, [pc, #156]	; (e8f4 <xQueueSemaphoreTake+0x1e4>)
    e858:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    e85a:	4b27      	ldr	r3, [pc, #156]	; (e8f8 <xQueueSemaphoreTake+0x1e8>)
    e85c:	4798      	blx	r3
    e85e:	1e03      	subs	r3, r0, #0
    e860:	d000      	beq.n	e864 <xQueueSemaphoreTake+0x154>
    e862:	e779      	b.n	e758 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    e864:	4b1b      	ldr	r3, [pc, #108]	; (e8d4 <xQueueSemaphoreTake+0x1c4>)
    e866:	4798      	blx	r3
    e868:	e776      	b.n	e758 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    e86a:	69fb      	ldr	r3, [r7, #28]
    e86c:	0018      	movs	r0, r3
    e86e:	4b21      	ldr	r3, [pc, #132]	; (e8f4 <xQueueSemaphoreTake+0x1e4>)
    e870:	4798      	blx	r3
				( void ) xTaskResumeAll();
    e872:	4b21      	ldr	r3, [pc, #132]	; (e8f8 <xQueueSemaphoreTake+0x1e8>)
    e874:	4798      	blx	r3
    e876:	e76f      	b.n	e758 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    e878:	69fb      	ldr	r3, [r7, #28]
    e87a:	0018      	movs	r0, r3
    e87c:	4b1d      	ldr	r3, [pc, #116]	; (e8f4 <xQueueSemaphoreTake+0x1e4>)
    e87e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    e880:	4b1d      	ldr	r3, [pc, #116]	; (e8f8 <xQueueSemaphoreTake+0x1e8>)
    e882:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    e884:	69fb      	ldr	r3, [r7, #28]
    e886:	0018      	movs	r0, r3
    e888:	4b17      	ldr	r3, [pc, #92]	; (e8e8 <xQueueSemaphoreTake+0x1d8>)
    e88a:	4798      	blx	r3
    e88c:	1e03      	subs	r3, r0, #0
    e88e:	d100      	bne.n	e892 <xQueueSemaphoreTake+0x182>
    e890:	e762      	b.n	e758 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    e892:	6a3b      	ldr	r3, [r7, #32]
    e894:	2b00      	cmp	r3, #0
    e896:	d010      	beq.n	e8ba <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
    e898:	4b0b      	ldr	r3, [pc, #44]	; (e8c8 <xQueueSemaphoreTake+0x1b8>)
    e89a:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    e89c:	69fb      	ldr	r3, [r7, #28]
    e89e:	0018      	movs	r0, r3
    e8a0:	4b16      	ldr	r3, [pc, #88]	; (e8fc <xQueueSemaphoreTake+0x1ec>)
    e8a2:	4798      	blx	r3
    e8a4:	0003      	movs	r3, r0
    e8a6:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    e8a8:	69fb      	ldr	r3, [r7, #28]
    e8aa:	685b      	ldr	r3, [r3, #4]
    e8ac:	697a      	ldr	r2, [r7, #20]
    e8ae:	0011      	movs	r1, r2
    e8b0:	0018      	movs	r0, r3
    e8b2:	4b13      	ldr	r3, [pc, #76]	; (e900 <xQueueSemaphoreTake+0x1f0>)
    e8b4:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    e8b6:	4b08      	ldr	r3, [pc, #32]	; (e8d8 <xQueueSemaphoreTake+0x1c8>)
    e8b8:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    e8ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    e8bc:	0018      	movs	r0, r3
    e8be:	46bd      	mov	sp, r7
    e8c0:	b00a      	add	sp, #40	; 0x28
    e8c2:	bd80      	pop	{r7, pc}
    e8c4:	0000f981 	.word	0x0000f981
    e8c8:	0000de01 	.word	0x0000de01
    e8cc:	0000fc4d 	.word	0x0000fc4d
    e8d0:	0000f649 	.word	0x0000f649
    e8d4:	0000dde1 	.word	0x0000dde1
    e8d8:	0000de25 	.word	0x0000de25
    e8dc:	0000f709 	.word	0x0000f709
    e8e0:	0000f231 	.word	0x0000f231
    e8e4:	0000f731 	.word	0x0000f731
    e8e8:	0000eb51 	.word	0x0000eb51
    e8ec:	0000f9b9 	.word	0x0000f9b9
    e8f0:	0000f5b1 	.word	0x0000f5b1
    e8f4:	0000ea61 	.word	0x0000ea61
    e8f8:	0000f249 	.word	0x0000f249
    e8fc:	0000e905 	.word	0x0000e905
    e900:	0000fb5d 	.word	0x0000fb5d

0000e904 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    e904:	b580      	push	{r7, lr}
    e906:	b084      	sub	sp, #16
    e908:	af00      	add	r7, sp, #0
    e90a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    e90c:	687b      	ldr	r3, [r7, #4]
    e90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e910:	2b00      	cmp	r3, #0
    e912:	d006      	beq.n	e922 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    e914:	687b      	ldr	r3, [r7, #4]
    e916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    e918:	681b      	ldr	r3, [r3, #0]
    e91a:	2205      	movs	r2, #5
    e91c:	1ad3      	subs	r3, r2, r3
    e91e:	60fb      	str	r3, [r7, #12]
    e920:	e001      	b.n	e926 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    e922:	2300      	movs	r3, #0
    e924:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    e926:	68fb      	ldr	r3, [r7, #12]
	}
    e928:	0018      	movs	r0, r3
    e92a:	46bd      	mov	sp, r7
    e92c:	b004      	add	sp, #16
    e92e:	bd80      	pop	{r7, pc}

0000e930 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    e930:	b580      	push	{r7, lr}
    e932:	b086      	sub	sp, #24
    e934:	af00      	add	r7, sp, #0
    e936:	60f8      	str	r0, [r7, #12]
    e938:	60b9      	str	r1, [r7, #8]
    e93a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    e93c:	2300      	movs	r3, #0
    e93e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    e940:	68fb      	ldr	r3, [r7, #12]
    e942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e944:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    e946:	68fb      	ldr	r3, [r7, #12]
    e948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e94a:	2b00      	cmp	r3, #0
    e94c:	d10e      	bne.n	e96c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    e94e:	68fb      	ldr	r3, [r7, #12]
    e950:	681b      	ldr	r3, [r3, #0]
    e952:	2b00      	cmp	r3, #0
    e954:	d14e      	bne.n	e9f4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    e956:	68fb      	ldr	r3, [r7, #12]
    e958:	685b      	ldr	r3, [r3, #4]
    e95a:	0018      	movs	r0, r3
    e95c:	4b2a      	ldr	r3, [pc, #168]	; (ea08 <prvCopyDataToQueue+0xd8>)
    e95e:	4798      	blx	r3
    e960:	0003      	movs	r3, r0
    e962:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    e964:	68fb      	ldr	r3, [r7, #12]
    e966:	2200      	movs	r2, #0
    e968:	605a      	str	r2, [r3, #4]
    e96a:	e043      	b.n	e9f4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    e96c:	687b      	ldr	r3, [r7, #4]
    e96e:	2b00      	cmp	r3, #0
    e970:	d119      	bne.n	e9a6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    e972:	68fb      	ldr	r3, [r7, #12]
    e974:	6898      	ldr	r0, [r3, #8]
    e976:	68fb      	ldr	r3, [r7, #12]
    e978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e97a:	68bb      	ldr	r3, [r7, #8]
    e97c:	0019      	movs	r1, r3
    e97e:	4b23      	ldr	r3, [pc, #140]	; (ea0c <prvCopyDataToQueue+0xdc>)
    e980:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    e982:	68fb      	ldr	r3, [r7, #12]
    e984:	689a      	ldr	r2, [r3, #8]
    e986:	68fb      	ldr	r3, [r7, #12]
    e988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e98a:	18d2      	adds	r2, r2, r3
    e98c:	68fb      	ldr	r3, [r7, #12]
    e98e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    e990:	68fb      	ldr	r3, [r7, #12]
    e992:	689a      	ldr	r2, [r3, #8]
    e994:	68fb      	ldr	r3, [r7, #12]
    e996:	685b      	ldr	r3, [r3, #4]
    e998:	429a      	cmp	r2, r3
    e99a:	d32b      	bcc.n	e9f4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    e99c:	68fb      	ldr	r3, [r7, #12]
    e99e:	681a      	ldr	r2, [r3, #0]
    e9a0:	68fb      	ldr	r3, [r7, #12]
    e9a2:	609a      	str	r2, [r3, #8]
    e9a4:	e026      	b.n	e9f4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    e9a6:	68fb      	ldr	r3, [r7, #12]
    e9a8:	68d8      	ldr	r0, [r3, #12]
    e9aa:	68fb      	ldr	r3, [r7, #12]
    e9ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    e9ae:	68bb      	ldr	r3, [r7, #8]
    e9b0:	0019      	movs	r1, r3
    e9b2:	4b16      	ldr	r3, [pc, #88]	; (ea0c <prvCopyDataToQueue+0xdc>)
    e9b4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    e9b6:	68fb      	ldr	r3, [r7, #12]
    e9b8:	68da      	ldr	r2, [r3, #12]
    e9ba:	68fb      	ldr	r3, [r7, #12]
    e9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e9be:	425b      	negs	r3, r3
    e9c0:	18d2      	adds	r2, r2, r3
    e9c2:	68fb      	ldr	r3, [r7, #12]
    e9c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    e9c6:	68fb      	ldr	r3, [r7, #12]
    e9c8:	68da      	ldr	r2, [r3, #12]
    e9ca:	68fb      	ldr	r3, [r7, #12]
    e9cc:	681b      	ldr	r3, [r3, #0]
    e9ce:	429a      	cmp	r2, r3
    e9d0:	d207      	bcs.n	e9e2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    e9d2:	68fb      	ldr	r3, [r7, #12]
    e9d4:	685a      	ldr	r2, [r3, #4]
    e9d6:	68fb      	ldr	r3, [r7, #12]
    e9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e9da:	425b      	negs	r3, r3
    e9dc:	18d2      	adds	r2, r2, r3
    e9de:	68fb      	ldr	r3, [r7, #12]
    e9e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    e9e2:	687b      	ldr	r3, [r7, #4]
    e9e4:	2b02      	cmp	r3, #2
    e9e6:	d105      	bne.n	e9f4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    e9e8:	693b      	ldr	r3, [r7, #16]
    e9ea:	2b00      	cmp	r3, #0
    e9ec:	d002      	beq.n	e9f4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    e9ee:	693b      	ldr	r3, [r7, #16]
    e9f0:	3b01      	subs	r3, #1
    e9f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    e9f4:	693b      	ldr	r3, [r7, #16]
    e9f6:	1c5a      	adds	r2, r3, #1
    e9f8:	68fb      	ldr	r3, [r7, #12]
    e9fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    e9fc:	697b      	ldr	r3, [r7, #20]
}
    e9fe:	0018      	movs	r0, r3
    ea00:	46bd      	mov	sp, r7
    ea02:	b006      	add	sp, #24
    ea04:	bd80      	pop	{r7, pc}
    ea06:	46c0      	nop			; (mov r8, r8)
    ea08:	0000fa9d 	.word	0x0000fa9d
    ea0c:	00017ca1 	.word	0x00017ca1

0000ea10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    ea10:	b580      	push	{r7, lr}
    ea12:	b082      	sub	sp, #8
    ea14:	af00      	add	r7, sp, #0
    ea16:	6078      	str	r0, [r7, #4]
    ea18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    ea1a:	687b      	ldr	r3, [r7, #4]
    ea1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ea1e:	2b00      	cmp	r3, #0
    ea20:	d018      	beq.n	ea54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    ea22:	687b      	ldr	r3, [r7, #4]
    ea24:	68da      	ldr	r2, [r3, #12]
    ea26:	687b      	ldr	r3, [r7, #4]
    ea28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ea2a:	18d2      	adds	r2, r2, r3
    ea2c:	687b      	ldr	r3, [r7, #4]
    ea2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    ea30:	687b      	ldr	r3, [r7, #4]
    ea32:	68da      	ldr	r2, [r3, #12]
    ea34:	687b      	ldr	r3, [r7, #4]
    ea36:	685b      	ldr	r3, [r3, #4]
    ea38:	429a      	cmp	r2, r3
    ea3a:	d303      	bcc.n	ea44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    ea3c:	687b      	ldr	r3, [r7, #4]
    ea3e:	681a      	ldr	r2, [r3, #0]
    ea40:	687b      	ldr	r3, [r7, #4]
    ea42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    ea44:	687b      	ldr	r3, [r7, #4]
    ea46:	68d9      	ldr	r1, [r3, #12]
    ea48:	687b      	ldr	r3, [r7, #4]
    ea4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ea4c:	683b      	ldr	r3, [r7, #0]
    ea4e:	0018      	movs	r0, r3
    ea50:	4b02      	ldr	r3, [pc, #8]	; (ea5c <prvCopyDataFromQueue+0x4c>)
    ea52:	4798      	blx	r3
	}
}
    ea54:	46c0      	nop			; (mov r8, r8)
    ea56:	46bd      	mov	sp, r7
    ea58:	b002      	add	sp, #8
    ea5a:	bd80      	pop	{r7, pc}
    ea5c:	00017ca1 	.word	0x00017ca1

0000ea60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    ea60:	b580      	push	{r7, lr}
    ea62:	b084      	sub	sp, #16
    ea64:	af00      	add	r7, sp, #0
    ea66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    ea68:	4b34      	ldr	r3, [pc, #208]	; (eb3c <prvUnlockQueue+0xdc>)
    ea6a:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    ea6c:	230f      	movs	r3, #15
    ea6e:	18fb      	adds	r3, r7, r3
    ea70:	687a      	ldr	r2, [r7, #4]
    ea72:	2145      	movs	r1, #69	; 0x45
    ea74:	5c52      	ldrb	r2, [r2, r1]
    ea76:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    ea78:	e022      	b.n	eac0 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    ea7a:	687b      	ldr	r3, [r7, #4]
    ea7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ea7e:	2b00      	cmp	r3, #0
    ea80:	d009      	beq.n	ea96 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    ea82:	687b      	ldr	r3, [r7, #4]
    ea84:	2100      	movs	r1, #0
    ea86:	0018      	movs	r0, r3
    ea88:	4b2d      	ldr	r3, [pc, #180]	; (eb40 <prvUnlockQueue+0xe0>)
    ea8a:	4798      	blx	r3
    ea8c:	1e03      	subs	r3, r0, #0
    ea8e:	d00f      	beq.n	eab0 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    ea90:	4b2c      	ldr	r3, [pc, #176]	; (eb44 <prvUnlockQueue+0xe4>)
    ea92:	4798      	blx	r3
    ea94:	e00c      	b.n	eab0 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    ea96:	687b      	ldr	r3, [r7, #4]
    ea98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea9a:	2b00      	cmp	r3, #0
    ea9c:	d017      	beq.n	eace <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    ea9e:	687b      	ldr	r3, [r7, #4]
    eaa0:	3324      	adds	r3, #36	; 0x24
    eaa2:	0018      	movs	r0, r3
    eaa4:	4b28      	ldr	r3, [pc, #160]	; (eb48 <prvUnlockQueue+0xe8>)
    eaa6:	4798      	blx	r3
    eaa8:	1e03      	subs	r3, r0, #0
    eaaa:	d001      	beq.n	eab0 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    eaac:	4b25      	ldr	r3, [pc, #148]	; (eb44 <prvUnlockQueue+0xe4>)
    eaae:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    eab0:	230f      	movs	r3, #15
    eab2:	18fb      	adds	r3, r7, r3
    eab4:	781b      	ldrb	r3, [r3, #0]
    eab6:	3b01      	subs	r3, #1
    eab8:	b2da      	uxtb	r2, r3
    eaba:	230f      	movs	r3, #15
    eabc:	18fb      	adds	r3, r7, r3
    eabe:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    eac0:	230f      	movs	r3, #15
    eac2:	18fb      	adds	r3, r7, r3
    eac4:	781b      	ldrb	r3, [r3, #0]
    eac6:	b25b      	sxtb	r3, r3
    eac8:	2b00      	cmp	r3, #0
    eaca:	dcd6      	bgt.n	ea7a <prvUnlockQueue+0x1a>
    eacc:	e000      	b.n	ead0 <prvUnlockQueue+0x70>
						break;
    eace:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    ead0:	687b      	ldr	r3, [r7, #4]
    ead2:	2245      	movs	r2, #69	; 0x45
    ead4:	21ff      	movs	r1, #255	; 0xff
    ead6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    ead8:	4b1c      	ldr	r3, [pc, #112]	; (eb4c <prvUnlockQueue+0xec>)
    eada:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    eadc:	4b17      	ldr	r3, [pc, #92]	; (eb3c <prvUnlockQueue+0xdc>)
    eade:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    eae0:	230e      	movs	r3, #14
    eae2:	18fb      	adds	r3, r7, r3
    eae4:	687a      	ldr	r2, [r7, #4]
    eae6:	2144      	movs	r1, #68	; 0x44
    eae8:	5c52      	ldrb	r2, [r2, r1]
    eaea:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    eaec:	e014      	b.n	eb18 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    eaee:	687b      	ldr	r3, [r7, #4]
    eaf0:	691b      	ldr	r3, [r3, #16]
    eaf2:	2b00      	cmp	r3, #0
    eaf4:	d017      	beq.n	eb26 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    eaf6:	687b      	ldr	r3, [r7, #4]
    eaf8:	3310      	adds	r3, #16
    eafa:	0018      	movs	r0, r3
    eafc:	4b12      	ldr	r3, [pc, #72]	; (eb48 <prvUnlockQueue+0xe8>)
    eafe:	4798      	blx	r3
    eb00:	1e03      	subs	r3, r0, #0
    eb02:	d001      	beq.n	eb08 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    eb04:	4b0f      	ldr	r3, [pc, #60]	; (eb44 <prvUnlockQueue+0xe4>)
    eb06:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    eb08:	230e      	movs	r3, #14
    eb0a:	18fb      	adds	r3, r7, r3
    eb0c:	781b      	ldrb	r3, [r3, #0]
    eb0e:	3b01      	subs	r3, #1
    eb10:	b2da      	uxtb	r2, r3
    eb12:	230e      	movs	r3, #14
    eb14:	18fb      	adds	r3, r7, r3
    eb16:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    eb18:	230e      	movs	r3, #14
    eb1a:	18fb      	adds	r3, r7, r3
    eb1c:	781b      	ldrb	r3, [r3, #0]
    eb1e:	b25b      	sxtb	r3, r3
    eb20:	2b00      	cmp	r3, #0
    eb22:	dce4      	bgt.n	eaee <prvUnlockQueue+0x8e>
    eb24:	e000      	b.n	eb28 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    eb26:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    eb28:	687b      	ldr	r3, [r7, #4]
    eb2a:	2244      	movs	r2, #68	; 0x44
    eb2c:	21ff      	movs	r1, #255	; 0xff
    eb2e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    eb30:	4b06      	ldr	r3, [pc, #24]	; (eb4c <prvUnlockQueue+0xec>)
    eb32:	4798      	blx	r3
}
    eb34:	46c0      	nop			; (mov r8, r8)
    eb36:	46bd      	mov	sp, r7
    eb38:	b004      	add	sp, #16
    eb3a:	bd80      	pop	{r7, pc}
    eb3c:	0000de01 	.word	0x0000de01
    eb40:	0000ec35 	.word	0x0000ec35
    eb44:	0000f7dd 	.word	0x0000f7dd
    eb48:	0000f649 	.word	0x0000f649
    eb4c:	0000de25 	.word	0x0000de25

0000eb50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    eb50:	b580      	push	{r7, lr}
    eb52:	b084      	sub	sp, #16
    eb54:	af00      	add	r7, sp, #0
    eb56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    eb58:	4b08      	ldr	r3, [pc, #32]	; (eb7c <prvIsQueueEmpty+0x2c>)
    eb5a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    eb5c:	687b      	ldr	r3, [r7, #4]
    eb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    eb60:	2b00      	cmp	r3, #0
    eb62:	d102      	bne.n	eb6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    eb64:	2301      	movs	r3, #1
    eb66:	60fb      	str	r3, [r7, #12]
    eb68:	e001      	b.n	eb6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    eb6a:	2300      	movs	r3, #0
    eb6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    eb6e:	4b04      	ldr	r3, [pc, #16]	; (eb80 <prvIsQueueEmpty+0x30>)
    eb70:	4798      	blx	r3

	return xReturn;
    eb72:	68fb      	ldr	r3, [r7, #12]
}
    eb74:	0018      	movs	r0, r3
    eb76:	46bd      	mov	sp, r7
    eb78:	b004      	add	sp, #16
    eb7a:	bd80      	pop	{r7, pc}
    eb7c:	0000de01 	.word	0x0000de01
    eb80:	0000de25 	.word	0x0000de25

0000eb84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    eb84:	b580      	push	{r7, lr}
    eb86:	b084      	sub	sp, #16
    eb88:	af00      	add	r7, sp, #0
    eb8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    eb8c:	4b09      	ldr	r3, [pc, #36]	; (ebb4 <prvIsQueueFull+0x30>)
    eb8e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    eb90:	687b      	ldr	r3, [r7, #4]
    eb92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    eb94:	687b      	ldr	r3, [r7, #4]
    eb96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    eb98:	429a      	cmp	r2, r3
    eb9a:	d102      	bne.n	eba2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    eb9c:	2301      	movs	r3, #1
    eb9e:	60fb      	str	r3, [r7, #12]
    eba0:	e001      	b.n	eba6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    eba2:	2300      	movs	r3, #0
    eba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    eba6:	4b04      	ldr	r3, [pc, #16]	; (ebb8 <prvIsQueueFull+0x34>)
    eba8:	4798      	blx	r3

	return xReturn;
    ebaa:	68fb      	ldr	r3, [r7, #12]
}
    ebac:	0018      	movs	r0, r3
    ebae:	46bd      	mov	sp, r7
    ebb0:	b004      	add	sp, #16
    ebb2:	bd80      	pop	{r7, pc}
    ebb4:	0000de01 	.word	0x0000de01
    ebb8:	0000de25 	.word	0x0000de25

0000ebbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    ebbc:	b580      	push	{r7, lr}
    ebbe:	b086      	sub	sp, #24
    ebc0:	af00      	add	r7, sp, #0
    ebc2:	60f8      	str	r0, [r7, #12]
    ebc4:	60b9      	str	r1, [r7, #8]
    ebc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    ebc8:	68fb      	ldr	r3, [r7, #12]
    ebca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    ebcc:	4b15      	ldr	r3, [pc, #84]	; (ec24 <vQueueWaitForMessageRestricted+0x68>)
    ebce:	4798      	blx	r3
    ebd0:	697b      	ldr	r3, [r7, #20]
    ebd2:	2244      	movs	r2, #68	; 0x44
    ebd4:	5c9b      	ldrb	r3, [r3, r2]
    ebd6:	b25b      	sxtb	r3, r3
    ebd8:	3301      	adds	r3, #1
    ebda:	d103      	bne.n	ebe4 <vQueueWaitForMessageRestricted+0x28>
    ebdc:	697b      	ldr	r3, [r7, #20]
    ebde:	2244      	movs	r2, #68	; 0x44
    ebe0:	2100      	movs	r1, #0
    ebe2:	5499      	strb	r1, [r3, r2]
    ebe4:	697b      	ldr	r3, [r7, #20]
    ebe6:	2245      	movs	r2, #69	; 0x45
    ebe8:	5c9b      	ldrb	r3, [r3, r2]
    ebea:	b25b      	sxtb	r3, r3
    ebec:	3301      	adds	r3, #1
    ebee:	d103      	bne.n	ebf8 <vQueueWaitForMessageRestricted+0x3c>
    ebf0:	697b      	ldr	r3, [r7, #20]
    ebf2:	2245      	movs	r2, #69	; 0x45
    ebf4:	2100      	movs	r1, #0
    ebf6:	5499      	strb	r1, [r3, r2]
    ebf8:	4b0b      	ldr	r3, [pc, #44]	; (ec28 <vQueueWaitForMessageRestricted+0x6c>)
    ebfa:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    ebfc:	697b      	ldr	r3, [r7, #20]
    ebfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ec00:	2b00      	cmp	r3, #0
    ec02:	d106      	bne.n	ec12 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    ec04:	697b      	ldr	r3, [r7, #20]
    ec06:	3324      	adds	r3, #36	; 0x24
    ec08:	687a      	ldr	r2, [r7, #4]
    ec0a:	68b9      	ldr	r1, [r7, #8]
    ec0c:	0018      	movs	r0, r3
    ec0e:	4b07      	ldr	r3, [pc, #28]	; (ec2c <vQueueWaitForMessageRestricted+0x70>)
    ec10:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    ec12:	697b      	ldr	r3, [r7, #20]
    ec14:	0018      	movs	r0, r3
    ec16:	4b06      	ldr	r3, [pc, #24]	; (ec30 <vQueueWaitForMessageRestricted+0x74>)
    ec18:	4798      	blx	r3
	}
    ec1a:	46c0      	nop			; (mov r8, r8)
    ec1c:	46bd      	mov	sp, r7
    ec1e:	b006      	add	sp, #24
    ec20:	bd80      	pop	{r7, pc}
    ec22:	46c0      	nop			; (mov r8, r8)
    ec24:	0000de01 	.word	0x0000de01
    ec28:	0000de25 	.word	0x0000de25
    ec2c:	0000f5f5 	.word	0x0000f5f5
    ec30:	0000ea61 	.word	0x0000ea61

0000ec34 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    ec34:	b580      	push	{r7, lr}
    ec36:	b086      	sub	sp, #24
    ec38:	af00      	add	r7, sp, #0
    ec3a:	6078      	str	r0, [r7, #4]
    ec3c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    ec3e:	687b      	ldr	r3, [r7, #4]
    ec40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ec42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    ec44:	2300      	movs	r3, #0
    ec46:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    ec48:	693b      	ldr	r3, [r7, #16]
    ec4a:	2b00      	cmp	r3, #0
    ec4c:	d101      	bne.n	ec52 <prvNotifyQueueSetContainer+0x1e>
    ec4e:	b672      	cpsid	i
    ec50:	e7fe      	b.n	ec50 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    ec52:	693b      	ldr	r3, [r7, #16]
    ec54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ec56:	693b      	ldr	r3, [r7, #16]
    ec58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ec5a:	429a      	cmp	r2, r3
    ec5c:	d301      	bcc.n	ec62 <prvNotifyQueueSetContainer+0x2e>
    ec5e:	b672      	cpsid	i
    ec60:	e7fe      	b.n	ec60 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    ec62:	693b      	ldr	r3, [r7, #16]
    ec64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ec66:	693b      	ldr	r3, [r7, #16]
    ec68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ec6a:	429a      	cmp	r2, r3
    ec6c:	d22a      	bcs.n	ecc4 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    ec6e:	230f      	movs	r3, #15
    ec70:	18fb      	adds	r3, r7, r3
    ec72:	693a      	ldr	r2, [r7, #16]
    ec74:	2145      	movs	r1, #69	; 0x45
    ec76:	5c52      	ldrb	r2, [r2, r1]
    ec78:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    ec7a:	683a      	ldr	r2, [r7, #0]
    ec7c:	1d39      	adds	r1, r7, #4
    ec7e:	693b      	ldr	r3, [r7, #16]
    ec80:	0018      	movs	r0, r3
    ec82:	4b13      	ldr	r3, [pc, #76]	; (ecd0 <prvNotifyQueueSetContainer+0x9c>)
    ec84:	4798      	blx	r3
    ec86:	0003      	movs	r3, r0
    ec88:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    ec8a:	230f      	movs	r3, #15
    ec8c:	18fb      	adds	r3, r7, r3
    ec8e:	781b      	ldrb	r3, [r3, #0]
    ec90:	b25b      	sxtb	r3, r3
    ec92:	3301      	adds	r3, #1
    ec94:	d10d      	bne.n	ecb2 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    ec96:	693b      	ldr	r3, [r7, #16]
    ec98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ec9a:	2b00      	cmp	r3, #0
    ec9c:	d012      	beq.n	ecc4 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    ec9e:	693b      	ldr	r3, [r7, #16]
    eca0:	3324      	adds	r3, #36	; 0x24
    eca2:	0018      	movs	r0, r3
    eca4:	4b0b      	ldr	r3, [pc, #44]	; (ecd4 <prvNotifyQueueSetContainer+0xa0>)
    eca6:	4798      	blx	r3
    eca8:	1e03      	subs	r3, r0, #0
    ecaa:	d00b      	beq.n	ecc4 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    ecac:	2301      	movs	r3, #1
    ecae:	617b      	str	r3, [r7, #20]
    ecb0:	e008      	b.n	ecc4 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    ecb2:	230f      	movs	r3, #15
    ecb4:	18fb      	adds	r3, r7, r3
    ecb6:	781b      	ldrb	r3, [r3, #0]
    ecb8:	3301      	adds	r3, #1
    ecba:	b2db      	uxtb	r3, r3
    ecbc:	b259      	sxtb	r1, r3
    ecbe:	693b      	ldr	r3, [r7, #16]
    ecc0:	2245      	movs	r2, #69	; 0x45
    ecc2:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    ecc4:	697b      	ldr	r3, [r7, #20]
	}
    ecc6:	0018      	movs	r0, r3
    ecc8:	46bd      	mov	sp, r7
    ecca:	b006      	add	sp, #24
    eccc:	bd80      	pop	{r7, pc}
    ecce:	46c0      	nop			; (mov r8, r8)
    ecd0:	0000e931 	.word	0x0000e931
    ecd4:	0000f649 	.word	0x0000f649

0000ecd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    ecd8:	b590      	push	{r4, r7, lr}
    ecda:	b08d      	sub	sp, #52	; 0x34
    ecdc:	af04      	add	r7, sp, #16
    ecde:	60f8      	str	r0, [r7, #12]
    ece0:	60b9      	str	r1, [r7, #8]
    ece2:	603b      	str	r3, [r7, #0]
    ece4:	1dbb      	adds	r3, r7, #6
    ece6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ece8:	1dbb      	adds	r3, r7, #6
    ecea:	881b      	ldrh	r3, [r3, #0]
    ecec:	009b      	lsls	r3, r3, #2
    ecee:	0018      	movs	r0, r3
    ecf0:	4b1d      	ldr	r3, [pc, #116]	; (ed68 <xTaskCreate+0x90>)
    ecf2:	4798      	blx	r3
    ecf4:	0003      	movs	r3, r0
    ecf6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    ecf8:	697b      	ldr	r3, [r7, #20]
    ecfa:	2b00      	cmp	r3, #0
    ecfc:	d010      	beq.n	ed20 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    ecfe:	2050      	movs	r0, #80	; 0x50
    ed00:	4b19      	ldr	r3, [pc, #100]	; (ed68 <xTaskCreate+0x90>)
    ed02:	4798      	blx	r3
    ed04:	0003      	movs	r3, r0
    ed06:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    ed08:	69fb      	ldr	r3, [r7, #28]
    ed0a:	2b00      	cmp	r3, #0
    ed0c:	d003      	beq.n	ed16 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    ed0e:	69fb      	ldr	r3, [r7, #28]
    ed10:	697a      	ldr	r2, [r7, #20]
    ed12:	631a      	str	r2, [r3, #48]	; 0x30
    ed14:	e006      	b.n	ed24 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    ed16:	697b      	ldr	r3, [r7, #20]
    ed18:	0018      	movs	r0, r3
    ed1a:	4b14      	ldr	r3, [pc, #80]	; (ed6c <xTaskCreate+0x94>)
    ed1c:	4798      	blx	r3
    ed1e:	e001      	b.n	ed24 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    ed20:	2300      	movs	r3, #0
    ed22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    ed24:	69fb      	ldr	r3, [r7, #28]
    ed26:	2b00      	cmp	r3, #0
    ed28:	d016      	beq.n	ed58 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    ed2a:	1dbb      	adds	r3, r7, #6
    ed2c:	881a      	ldrh	r2, [r3, #0]
    ed2e:	683c      	ldr	r4, [r7, #0]
    ed30:	68b9      	ldr	r1, [r7, #8]
    ed32:	68f8      	ldr	r0, [r7, #12]
    ed34:	2300      	movs	r3, #0
    ed36:	9303      	str	r3, [sp, #12]
    ed38:	69fb      	ldr	r3, [r7, #28]
    ed3a:	9302      	str	r3, [sp, #8]
    ed3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ed3e:	9301      	str	r3, [sp, #4]
    ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ed42:	9300      	str	r3, [sp, #0]
    ed44:	0023      	movs	r3, r4
    ed46:	4c0a      	ldr	r4, [pc, #40]	; (ed70 <xTaskCreate+0x98>)
    ed48:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    ed4a:	69fb      	ldr	r3, [r7, #28]
    ed4c:	0018      	movs	r0, r3
    ed4e:	4b09      	ldr	r3, [pc, #36]	; (ed74 <xTaskCreate+0x9c>)
    ed50:	4798      	blx	r3
			xReturn = pdPASS;
    ed52:	2301      	movs	r3, #1
    ed54:	61bb      	str	r3, [r7, #24]
    ed56:	e002      	b.n	ed5e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    ed58:	2301      	movs	r3, #1
    ed5a:	425b      	negs	r3, r3
    ed5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    ed5e:	69bb      	ldr	r3, [r7, #24]
	}
    ed60:	0018      	movs	r0, r3
    ed62:	46bd      	mov	sp, r7
    ed64:	b009      	add	sp, #36	; 0x24
    ed66:	bd90      	pop	{r4, r7, pc}
    ed68:	0000df3d 	.word	0x0000df3d
    ed6c:	0000df71 	.word	0x0000df71
    ed70:	0000ed79 	.word	0x0000ed79
    ed74:	0000ee75 	.word	0x0000ee75

0000ed78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    ed78:	b580      	push	{r7, lr}
    ed7a:	b086      	sub	sp, #24
    ed7c:	af00      	add	r7, sp, #0
    ed7e:	60f8      	str	r0, [r7, #12]
    ed80:	60b9      	str	r1, [r7, #8]
    ed82:	607a      	str	r2, [r7, #4]
    ed84:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    ed86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ed88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ed8a:	687b      	ldr	r3, [r7, #4]
    ed8c:	4936      	ldr	r1, [pc, #216]	; (ee68 <prvInitialiseNewTask+0xf0>)
    ed8e:	468c      	mov	ip, r1
    ed90:	4463      	add	r3, ip
    ed92:	009b      	lsls	r3, r3, #2
    ed94:	18d3      	adds	r3, r2, r3
    ed96:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    ed98:	693b      	ldr	r3, [r7, #16]
    ed9a:	2207      	movs	r2, #7
    ed9c:	4393      	bics	r3, r2
    ed9e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    eda0:	693b      	ldr	r3, [r7, #16]
    eda2:	2207      	movs	r2, #7
    eda4:	4013      	ands	r3, r2
    eda6:	d001      	beq.n	edac <prvInitialiseNewTask+0x34>
    eda8:	b672      	cpsid	i
    edaa:	e7fe      	b.n	edaa <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    edac:	2300      	movs	r3, #0
    edae:	617b      	str	r3, [r7, #20]
    edb0:	e013      	b.n	edda <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    edb2:	68ba      	ldr	r2, [r7, #8]
    edb4:	697b      	ldr	r3, [r7, #20]
    edb6:	18d3      	adds	r3, r2, r3
    edb8:	7818      	ldrb	r0, [r3, #0]
    edba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    edbc:	2134      	movs	r1, #52	; 0x34
    edbe:	697b      	ldr	r3, [r7, #20]
    edc0:	18d3      	adds	r3, r2, r3
    edc2:	185b      	adds	r3, r3, r1
    edc4:	1c02      	adds	r2, r0, #0
    edc6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    edc8:	68ba      	ldr	r2, [r7, #8]
    edca:	697b      	ldr	r3, [r7, #20]
    edcc:	18d3      	adds	r3, r2, r3
    edce:	781b      	ldrb	r3, [r3, #0]
    edd0:	2b00      	cmp	r3, #0
    edd2:	d006      	beq.n	ede2 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    edd4:	697b      	ldr	r3, [r7, #20]
    edd6:	3301      	adds	r3, #1
    edd8:	617b      	str	r3, [r7, #20]
    edda:	697b      	ldr	r3, [r7, #20]
    eddc:	2b09      	cmp	r3, #9
    edde:	d9e8      	bls.n	edb2 <prvInitialiseNewTask+0x3a>
    ede0:	e000      	b.n	ede4 <prvInitialiseNewTask+0x6c>
		{
			break;
    ede2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    ede4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ede6:	223d      	movs	r2, #61	; 0x3d
    ede8:	2100      	movs	r1, #0
    edea:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    edec:	6a3b      	ldr	r3, [r7, #32]
    edee:	2b04      	cmp	r3, #4
    edf0:	d901      	bls.n	edf6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    edf2:	2304      	movs	r3, #4
    edf4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    edf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edf8:	6a3a      	ldr	r2, [r7, #32]
    edfa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    edfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    edfe:	6a3a      	ldr	r2, [r7, #32]
    ee00:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    ee02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee04:	2200      	movs	r2, #0
    ee06:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee0a:	3304      	adds	r3, #4
    ee0c:	0018      	movs	r0, r3
    ee0e:	4b17      	ldr	r3, [pc, #92]	; (ee6c <prvInitialiseNewTask+0xf4>)
    ee10:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    ee12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee14:	3318      	adds	r3, #24
    ee16:	0018      	movs	r0, r3
    ee18:	4b14      	ldr	r3, [pc, #80]	; (ee6c <prvInitialiseNewTask+0xf4>)
    ee1a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    ee1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ee20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ee22:	6a3b      	ldr	r3, [r7, #32]
    ee24:	2205      	movs	r2, #5
    ee26:	1ad2      	subs	r2, r2, r3
    ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ee30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    ee32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee34:	2200      	movs	r2, #0
    ee36:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    ee38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee3a:	224c      	movs	r2, #76	; 0x4c
    ee3c:	2100      	movs	r1, #0
    ee3e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    ee40:	683a      	ldr	r2, [r7, #0]
    ee42:	68f9      	ldr	r1, [r7, #12]
    ee44:	693b      	ldr	r3, [r7, #16]
    ee46:	0018      	movs	r0, r3
    ee48:	4b09      	ldr	r3, [pc, #36]	; (ee70 <prvInitialiseNewTask+0xf8>)
    ee4a:	4798      	blx	r3
    ee4c:	0002      	movs	r2, r0
    ee4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee50:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    ee52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee54:	2b00      	cmp	r3, #0
    ee56:	d002      	beq.n	ee5e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    ee58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ee5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    ee5e:	46c0      	nop			; (mov r8, r8)
    ee60:	46bd      	mov	sp, r7
    ee62:	b006      	add	sp, #24
    ee64:	bd80      	pop	{r7, pc}
    ee66:	46c0      	nop			; (mov r8, r8)
    ee68:	3fffffff 	.word	0x3fffffff
    ee6c:	0000dfe1 	.word	0x0000dfe1
    ee70:	0000dcc5 	.word	0x0000dcc5

0000ee74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    ee74:	b580      	push	{r7, lr}
    ee76:	b082      	sub	sp, #8
    ee78:	af00      	add	r7, sp, #0
    ee7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    ee7c:	4b29      	ldr	r3, [pc, #164]	; (ef24 <prvAddNewTaskToReadyList+0xb0>)
    ee7e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    ee80:	4b29      	ldr	r3, [pc, #164]	; (ef28 <prvAddNewTaskToReadyList+0xb4>)
    ee82:	681b      	ldr	r3, [r3, #0]
    ee84:	1c5a      	adds	r2, r3, #1
    ee86:	4b28      	ldr	r3, [pc, #160]	; (ef28 <prvAddNewTaskToReadyList+0xb4>)
    ee88:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    ee8a:	4b28      	ldr	r3, [pc, #160]	; (ef2c <prvAddNewTaskToReadyList+0xb8>)
    ee8c:	681b      	ldr	r3, [r3, #0]
    ee8e:	2b00      	cmp	r3, #0
    ee90:	d109      	bne.n	eea6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    ee92:	4b26      	ldr	r3, [pc, #152]	; (ef2c <prvAddNewTaskToReadyList+0xb8>)
    ee94:	687a      	ldr	r2, [r7, #4]
    ee96:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    ee98:	4b23      	ldr	r3, [pc, #140]	; (ef28 <prvAddNewTaskToReadyList+0xb4>)
    ee9a:	681b      	ldr	r3, [r3, #0]
    ee9c:	2b01      	cmp	r3, #1
    ee9e:	d110      	bne.n	eec2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    eea0:	4b23      	ldr	r3, [pc, #140]	; (ef30 <prvAddNewTaskToReadyList+0xbc>)
    eea2:	4798      	blx	r3
    eea4:	e00d      	b.n	eec2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    eea6:	4b23      	ldr	r3, [pc, #140]	; (ef34 <prvAddNewTaskToReadyList+0xc0>)
    eea8:	681b      	ldr	r3, [r3, #0]
    eeaa:	2b00      	cmp	r3, #0
    eeac:	d109      	bne.n	eec2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    eeae:	4b1f      	ldr	r3, [pc, #124]	; (ef2c <prvAddNewTaskToReadyList+0xb8>)
    eeb0:	681b      	ldr	r3, [r3, #0]
    eeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eeb4:	687b      	ldr	r3, [r7, #4]
    eeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    eeb8:	429a      	cmp	r2, r3
    eeba:	d802      	bhi.n	eec2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    eebc:	4b1b      	ldr	r3, [pc, #108]	; (ef2c <prvAddNewTaskToReadyList+0xb8>)
    eebe:	687a      	ldr	r2, [r7, #4]
    eec0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    eec2:	4b1d      	ldr	r3, [pc, #116]	; (ef38 <prvAddNewTaskToReadyList+0xc4>)
    eec4:	681b      	ldr	r3, [r3, #0]
    eec6:	1c5a      	adds	r2, r3, #1
    eec8:	4b1b      	ldr	r3, [pc, #108]	; (ef38 <prvAddNewTaskToReadyList+0xc4>)
    eeca:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    eecc:	687b      	ldr	r3, [r7, #4]
    eece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eed0:	4b1a      	ldr	r3, [pc, #104]	; (ef3c <prvAddNewTaskToReadyList+0xc8>)
    eed2:	681b      	ldr	r3, [r3, #0]
    eed4:	429a      	cmp	r2, r3
    eed6:	d903      	bls.n	eee0 <prvAddNewTaskToReadyList+0x6c>
    eed8:	687b      	ldr	r3, [r7, #4]
    eeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eedc:	4b17      	ldr	r3, [pc, #92]	; (ef3c <prvAddNewTaskToReadyList+0xc8>)
    eede:	601a      	str	r2, [r3, #0]
    eee0:	687b      	ldr	r3, [r7, #4]
    eee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eee4:	0013      	movs	r3, r2
    eee6:	009b      	lsls	r3, r3, #2
    eee8:	189b      	adds	r3, r3, r2
    eeea:	009b      	lsls	r3, r3, #2
    eeec:	4a14      	ldr	r2, [pc, #80]	; (ef40 <prvAddNewTaskToReadyList+0xcc>)
    eeee:	189a      	adds	r2, r3, r2
    eef0:	687b      	ldr	r3, [r7, #4]
    eef2:	3304      	adds	r3, #4
    eef4:	0019      	movs	r1, r3
    eef6:	0010      	movs	r0, r2
    eef8:	4b12      	ldr	r3, [pc, #72]	; (ef44 <prvAddNewTaskToReadyList+0xd0>)
    eefa:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    eefc:	4b12      	ldr	r3, [pc, #72]	; (ef48 <prvAddNewTaskToReadyList+0xd4>)
    eefe:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    ef00:	4b0c      	ldr	r3, [pc, #48]	; (ef34 <prvAddNewTaskToReadyList+0xc0>)
    ef02:	681b      	ldr	r3, [r3, #0]
    ef04:	2b00      	cmp	r3, #0
    ef06:	d008      	beq.n	ef1a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    ef08:	4b08      	ldr	r3, [pc, #32]	; (ef2c <prvAddNewTaskToReadyList+0xb8>)
    ef0a:	681b      	ldr	r3, [r3, #0]
    ef0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ef0e:	687b      	ldr	r3, [r7, #4]
    ef10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ef12:	429a      	cmp	r2, r3
    ef14:	d201      	bcs.n	ef1a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    ef16:	4b0d      	ldr	r3, [pc, #52]	; (ef4c <prvAddNewTaskToReadyList+0xd8>)
    ef18:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    ef1a:	46c0      	nop			; (mov r8, r8)
    ef1c:	46bd      	mov	sp, r7
    ef1e:	b002      	add	sp, #8
    ef20:	bd80      	pop	{r7, pc}
    ef22:	46c0      	nop			; (mov r8, r8)
    ef24:	0000de01 	.word	0x0000de01
    ef28:	20000390 	.word	0x20000390
    ef2c:	200002b8 	.word	0x200002b8
    ef30:	0000f819 	.word	0x0000f819
    ef34:	2000039c 	.word	0x2000039c
    ef38:	200003ac 	.word	0x200003ac
    ef3c:	20000398 	.word	0x20000398
    ef40:	200002bc 	.word	0x200002bc
    ef44:	0000dff7 	.word	0x0000dff7
    ef48:	0000de25 	.word	0x0000de25
    ef4c:	0000dde1 	.word	0x0000dde1

0000ef50 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    ef50:	b580      	push	{r7, lr}
    ef52:	b086      	sub	sp, #24
    ef54:	af00      	add	r7, sp, #0
    ef56:	6078      	str	r0, [r7, #4]
    ef58:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    ef5a:	2300      	movs	r3, #0
    ef5c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    ef5e:	687b      	ldr	r3, [r7, #4]
    ef60:	2b00      	cmp	r3, #0
    ef62:	d101      	bne.n	ef68 <vTaskDelayUntil+0x18>
    ef64:	b672      	cpsid	i
    ef66:	e7fe      	b.n	ef66 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    ef68:	683b      	ldr	r3, [r7, #0]
    ef6a:	2b00      	cmp	r3, #0
    ef6c:	d101      	bne.n	ef72 <vTaskDelayUntil+0x22>
    ef6e:	b672      	cpsid	i
    ef70:	e7fe      	b.n	ef70 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    ef72:	4b23      	ldr	r3, [pc, #140]	; (f000 <vTaskDelayUntil+0xb0>)
    ef74:	681b      	ldr	r3, [r3, #0]
    ef76:	2b00      	cmp	r3, #0
    ef78:	d001      	beq.n	ef7e <vTaskDelayUntil+0x2e>
    ef7a:	b672      	cpsid	i
    ef7c:	e7fe      	b.n	ef7c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    ef7e:	4b21      	ldr	r3, [pc, #132]	; (f004 <vTaskDelayUntil+0xb4>)
    ef80:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    ef82:	4b21      	ldr	r3, [pc, #132]	; (f008 <vTaskDelayUntil+0xb8>)
    ef84:	681b      	ldr	r3, [r3, #0]
    ef86:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    ef88:	687b      	ldr	r3, [r7, #4]
    ef8a:	681a      	ldr	r2, [r3, #0]
    ef8c:	683b      	ldr	r3, [r7, #0]
    ef8e:	18d3      	adds	r3, r2, r3
    ef90:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    ef92:	687b      	ldr	r3, [r7, #4]
    ef94:	681a      	ldr	r2, [r3, #0]
    ef96:	693b      	ldr	r3, [r7, #16]
    ef98:	429a      	cmp	r2, r3
    ef9a:	d90b      	bls.n	efb4 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    ef9c:	687b      	ldr	r3, [r7, #4]
    ef9e:	681a      	ldr	r2, [r3, #0]
    efa0:	68fb      	ldr	r3, [r7, #12]
    efa2:	429a      	cmp	r2, r3
    efa4:	d911      	bls.n	efca <vTaskDelayUntil+0x7a>
    efa6:	68fa      	ldr	r2, [r7, #12]
    efa8:	693b      	ldr	r3, [r7, #16]
    efaa:	429a      	cmp	r2, r3
    efac:	d90d      	bls.n	efca <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    efae:	2301      	movs	r3, #1
    efb0:	617b      	str	r3, [r7, #20]
    efb2:	e00a      	b.n	efca <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    efb4:	687b      	ldr	r3, [r7, #4]
    efb6:	681a      	ldr	r2, [r3, #0]
    efb8:	68fb      	ldr	r3, [r7, #12]
    efba:	429a      	cmp	r2, r3
    efbc:	d803      	bhi.n	efc6 <vTaskDelayUntil+0x76>
    efbe:	68fa      	ldr	r2, [r7, #12]
    efc0:	693b      	ldr	r3, [r7, #16]
    efc2:	429a      	cmp	r2, r3
    efc4:	d901      	bls.n	efca <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    efc6:	2301      	movs	r3, #1
    efc8:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    efca:	687b      	ldr	r3, [r7, #4]
    efcc:	68fa      	ldr	r2, [r7, #12]
    efce:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    efd0:	697b      	ldr	r3, [r7, #20]
    efd2:	2b00      	cmp	r3, #0
    efd4:	d006      	beq.n	efe4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    efd6:	68fa      	ldr	r2, [r7, #12]
    efd8:	693b      	ldr	r3, [r7, #16]
    efda:	1ad3      	subs	r3, r2, r3
    efdc:	2100      	movs	r1, #0
    efde:	0018      	movs	r0, r3
    efe0:	4b0a      	ldr	r3, [pc, #40]	; (f00c <vTaskDelayUntil+0xbc>)
    efe2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    efe4:	4b0a      	ldr	r3, [pc, #40]	; (f010 <vTaskDelayUntil+0xc0>)
    efe6:	4798      	blx	r3
    efe8:	0003      	movs	r3, r0
    efea:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    efec:	68bb      	ldr	r3, [r7, #8]
    efee:	2b00      	cmp	r3, #0
    eff0:	d101      	bne.n	eff6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    eff2:	4b08      	ldr	r3, [pc, #32]	; (f014 <vTaskDelayUntil+0xc4>)
    eff4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    eff6:	46c0      	nop			; (mov r8, r8)
    eff8:	46bd      	mov	sp, r7
    effa:	b006      	add	sp, #24
    effc:	bd80      	pop	{r7, pc}
    effe:	46c0      	nop			; (mov r8, r8)
    f000:	200003b8 	.word	0x200003b8
    f004:	0000f231 	.word	0x0000f231
    f008:	20000394 	.word	0x20000394
    f00c:	0000fc71 	.word	0x0000fc71
    f010:	0000f249 	.word	0x0000f249
    f014:	0000dde1 	.word	0x0000dde1

0000f018 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    f018:	b580      	push	{r7, lr}
    f01a:	b084      	sub	sp, #16
    f01c:	af00      	add	r7, sp, #0
    f01e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    f020:	2300      	movs	r3, #0
    f022:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    f024:	687b      	ldr	r3, [r7, #4]
    f026:	2b00      	cmp	r3, #0
    f028:	d010      	beq.n	f04c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    f02a:	4b0d      	ldr	r3, [pc, #52]	; (f060 <vTaskDelay+0x48>)
    f02c:	681b      	ldr	r3, [r3, #0]
    f02e:	2b00      	cmp	r3, #0
    f030:	d001      	beq.n	f036 <vTaskDelay+0x1e>
    f032:	b672      	cpsid	i
    f034:	e7fe      	b.n	f034 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    f036:	4b0b      	ldr	r3, [pc, #44]	; (f064 <vTaskDelay+0x4c>)
    f038:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    f03a:	687b      	ldr	r3, [r7, #4]
    f03c:	2100      	movs	r1, #0
    f03e:	0018      	movs	r0, r3
    f040:	4b09      	ldr	r3, [pc, #36]	; (f068 <vTaskDelay+0x50>)
    f042:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    f044:	4b09      	ldr	r3, [pc, #36]	; (f06c <vTaskDelay+0x54>)
    f046:	4798      	blx	r3
    f048:	0003      	movs	r3, r0
    f04a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    f04c:	68fb      	ldr	r3, [r7, #12]
    f04e:	2b00      	cmp	r3, #0
    f050:	d101      	bne.n	f056 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    f052:	4b07      	ldr	r3, [pc, #28]	; (f070 <vTaskDelay+0x58>)
    f054:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    f056:	46c0      	nop			; (mov r8, r8)
    f058:	46bd      	mov	sp, r7
    f05a:	b004      	add	sp, #16
    f05c:	bd80      	pop	{r7, pc}
    f05e:	46c0      	nop			; (mov r8, r8)
    f060:	200003b8 	.word	0x200003b8
    f064:	0000f231 	.word	0x0000f231
    f068:	0000fc71 	.word	0x0000fc71
    f06c:	0000f249 	.word	0x0000f249
    f070:	0000dde1 	.word	0x0000dde1

0000f074 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    f074:	b580      	push	{r7, lr}
    f076:	b086      	sub	sp, #24
    f078:	af00      	add	r7, sp, #0
    f07a:	6078      	str	r0, [r7, #4]
    f07c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    f07e:	2300      	movs	r3, #0
    f080:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
    f082:	683b      	ldr	r3, [r7, #0]
    f084:	2b04      	cmp	r3, #4
    f086:	d901      	bls.n	f08c <vTaskPrioritySet+0x18>
    f088:	b672      	cpsid	i
    f08a:	e7fe      	b.n	f08a <vTaskPrioritySet+0x16>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    f08c:	683b      	ldr	r3, [r7, #0]
    f08e:	2b04      	cmp	r3, #4
    f090:	d901      	bls.n	f096 <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    f092:	2304      	movs	r3, #4
    f094:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    f096:	4b3d      	ldr	r3, [pc, #244]	; (f18c <vTaskPrioritySet+0x118>)
    f098:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    f09a:	687b      	ldr	r3, [r7, #4]
    f09c:	2b00      	cmp	r3, #0
    f09e:	d102      	bne.n	f0a6 <vTaskPrioritySet+0x32>
    f0a0:	4b3b      	ldr	r3, [pc, #236]	; (f190 <vTaskPrioritySet+0x11c>)
    f0a2:	681b      	ldr	r3, [r3, #0]
    f0a4:	e000      	b.n	f0a8 <vTaskPrioritySet+0x34>
    f0a6:	687b      	ldr	r3, [r7, #4]
    f0a8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    f0aa:	693b      	ldr	r3, [r7, #16]
    f0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f0ae:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    f0b0:	68fa      	ldr	r2, [r7, #12]
    f0b2:	683b      	ldr	r3, [r7, #0]
    f0b4:	429a      	cmp	r2, r3
    f0b6:	d062      	beq.n	f17e <vTaskPrioritySet+0x10a>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    f0b8:	683a      	ldr	r2, [r7, #0]
    f0ba:	68fb      	ldr	r3, [r7, #12]
    f0bc:	429a      	cmp	r2, r3
    f0be:	d90d      	bls.n	f0dc <vTaskPrioritySet+0x68>
				{
					if( pxTCB != pxCurrentTCB )
    f0c0:	4b33      	ldr	r3, [pc, #204]	; (f190 <vTaskPrioritySet+0x11c>)
    f0c2:	681b      	ldr	r3, [r3, #0]
    f0c4:	693a      	ldr	r2, [r7, #16]
    f0c6:	429a      	cmp	r2, r3
    f0c8:	d00f      	beq.n	f0ea <vTaskPrioritySet+0x76>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    f0ca:	4b31      	ldr	r3, [pc, #196]	; (f190 <vTaskPrioritySet+0x11c>)
    f0cc:	681b      	ldr	r3, [r3, #0]
    f0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f0d0:	683b      	ldr	r3, [r7, #0]
    f0d2:	429a      	cmp	r2, r3
    f0d4:	d809      	bhi.n	f0ea <vTaskPrioritySet+0x76>
						{
							xYieldRequired = pdTRUE;
    f0d6:	2301      	movs	r3, #1
    f0d8:	617b      	str	r3, [r7, #20]
    f0da:	e006      	b.n	f0ea <vTaskPrioritySet+0x76>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    f0dc:	4b2c      	ldr	r3, [pc, #176]	; (f190 <vTaskPrioritySet+0x11c>)
    f0de:	681b      	ldr	r3, [r3, #0]
    f0e0:	693a      	ldr	r2, [r7, #16]
    f0e2:	429a      	cmp	r2, r3
    f0e4:	d101      	bne.n	f0ea <vTaskPrioritySet+0x76>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    f0e6:	2301      	movs	r3, #1
    f0e8:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    f0ea:	693b      	ldr	r3, [r7, #16]
    f0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f0ee:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    f0f0:	693b      	ldr	r3, [r7, #16]
    f0f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    f0f4:	693b      	ldr	r3, [r7, #16]
    f0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f0f8:	429a      	cmp	r2, r3
    f0fa:	d102      	bne.n	f102 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
    f0fc:	693b      	ldr	r3, [r7, #16]
    f0fe:	683a      	ldr	r2, [r7, #0]
    f100:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    f102:	693b      	ldr	r3, [r7, #16]
    f104:	683a      	ldr	r2, [r7, #0]
    f106:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    f108:	693b      	ldr	r3, [r7, #16]
    f10a:	699b      	ldr	r3, [r3, #24]
    f10c:	2b00      	cmp	r3, #0
    f10e:	db04      	blt.n	f11a <vTaskPrioritySet+0xa6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f110:	683b      	ldr	r3, [r7, #0]
    f112:	2205      	movs	r2, #5
    f114:	1ad2      	subs	r2, r2, r3
    f116:	693b      	ldr	r3, [r7, #16]
    f118:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    f11a:	693b      	ldr	r3, [r7, #16]
    f11c:	6959      	ldr	r1, [r3, #20]
    f11e:	68ba      	ldr	r2, [r7, #8]
    f120:	0013      	movs	r3, r2
    f122:	009b      	lsls	r3, r3, #2
    f124:	189b      	adds	r3, r3, r2
    f126:	009b      	lsls	r3, r3, #2
    f128:	4a1a      	ldr	r2, [pc, #104]	; (f194 <vTaskPrioritySet+0x120>)
    f12a:	189b      	adds	r3, r3, r2
    f12c:	4299      	cmp	r1, r3
    f12e:	d101      	bne.n	f134 <vTaskPrioritySet+0xc0>
    f130:	2301      	movs	r3, #1
    f132:	e000      	b.n	f136 <vTaskPrioritySet+0xc2>
    f134:	2300      	movs	r3, #0
    f136:	2b00      	cmp	r3, #0
    f138:	d01c      	beq.n	f174 <vTaskPrioritySet+0x100>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    f13a:	693b      	ldr	r3, [r7, #16]
    f13c:	3304      	adds	r3, #4
    f13e:	0018      	movs	r0, r3
    f140:	4b15      	ldr	r3, [pc, #84]	; (f198 <vTaskPrioritySet+0x124>)
    f142:	4798      	blx	r3
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    f144:	693b      	ldr	r3, [r7, #16]
    f146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f148:	4b14      	ldr	r3, [pc, #80]	; (f19c <vTaskPrioritySet+0x128>)
    f14a:	681b      	ldr	r3, [r3, #0]
    f14c:	429a      	cmp	r2, r3
    f14e:	d903      	bls.n	f158 <vTaskPrioritySet+0xe4>
    f150:	693b      	ldr	r3, [r7, #16]
    f152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f154:	4b11      	ldr	r3, [pc, #68]	; (f19c <vTaskPrioritySet+0x128>)
    f156:	601a      	str	r2, [r3, #0]
    f158:	693b      	ldr	r3, [r7, #16]
    f15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f15c:	0013      	movs	r3, r2
    f15e:	009b      	lsls	r3, r3, #2
    f160:	189b      	adds	r3, r3, r2
    f162:	009b      	lsls	r3, r3, #2
    f164:	4a0b      	ldr	r2, [pc, #44]	; (f194 <vTaskPrioritySet+0x120>)
    f166:	189a      	adds	r2, r3, r2
    f168:	693b      	ldr	r3, [r7, #16]
    f16a:	3304      	adds	r3, #4
    f16c:	0019      	movs	r1, r3
    f16e:	0010      	movs	r0, r2
    f170:	4b0b      	ldr	r3, [pc, #44]	; (f1a0 <vTaskPrioritySet+0x12c>)
    f172:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    f174:	697b      	ldr	r3, [r7, #20]
    f176:	2b00      	cmp	r3, #0
    f178:	d001      	beq.n	f17e <vTaskPrioritySet+0x10a>
				{
					taskYIELD_IF_USING_PREEMPTION();
    f17a:	4b0a      	ldr	r3, [pc, #40]	; (f1a4 <vTaskPrioritySet+0x130>)
    f17c:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    f17e:	4b0a      	ldr	r3, [pc, #40]	; (f1a8 <vTaskPrioritySet+0x134>)
    f180:	4798      	blx	r3
	}
    f182:	46c0      	nop			; (mov r8, r8)
    f184:	46bd      	mov	sp, r7
    f186:	b006      	add	sp, #24
    f188:	bd80      	pop	{r7, pc}
    f18a:	46c0      	nop			; (mov r8, r8)
    f18c:	0000de01 	.word	0x0000de01
    f190:	200002b8 	.word	0x200002b8
    f194:	200002bc 	.word	0x200002bc
    f198:	0000e0a7 	.word	0x0000e0a7
    f19c:	20000398 	.word	0x20000398
    f1a0:	0000dff7 	.word	0x0000dff7
    f1a4:	0000dde1 	.word	0x0000dde1
    f1a8:	0000de25 	.word	0x0000de25

0000f1ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    f1ac:	b590      	push	{r4, r7, lr}
    f1ae:	b085      	sub	sp, #20
    f1b0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    f1b2:	4916      	ldr	r1, [pc, #88]	; (f20c <vTaskStartScheduler+0x60>)
    f1b4:	4816      	ldr	r0, [pc, #88]	; (f210 <vTaskStartScheduler+0x64>)
    f1b6:	4b17      	ldr	r3, [pc, #92]	; (f214 <vTaskStartScheduler+0x68>)
    f1b8:	9301      	str	r3, [sp, #4]
    f1ba:	2300      	movs	r3, #0
    f1bc:	9300      	str	r3, [sp, #0]
    f1be:	2300      	movs	r3, #0
    f1c0:	2282      	movs	r2, #130	; 0x82
    f1c2:	4c15      	ldr	r4, [pc, #84]	; (f218 <vTaskStartScheduler+0x6c>)
    f1c4:	47a0      	blx	r4
    f1c6:	0003      	movs	r3, r0
    f1c8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    f1ca:	687b      	ldr	r3, [r7, #4]
    f1cc:	2b01      	cmp	r3, #1
    f1ce:	d103      	bne.n	f1d8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    f1d0:	4b12      	ldr	r3, [pc, #72]	; (f21c <vTaskStartScheduler+0x70>)
    f1d2:	4798      	blx	r3
    f1d4:	0003      	movs	r3, r0
    f1d6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    f1d8:	687b      	ldr	r3, [r7, #4]
    f1da:	2b01      	cmp	r3, #1
    f1dc:	d10d      	bne.n	f1fa <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    f1de:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    f1e0:	4b0f      	ldr	r3, [pc, #60]	; (f220 <vTaskStartScheduler+0x74>)
    f1e2:	2201      	movs	r2, #1
    f1e4:	4252      	negs	r2, r2
    f1e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    f1e8:	4b0e      	ldr	r3, [pc, #56]	; (f224 <vTaskStartScheduler+0x78>)
    f1ea:	2201      	movs	r2, #1
    f1ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    f1ee:	4b0e      	ldr	r3, [pc, #56]	; (f228 <vTaskStartScheduler+0x7c>)
    f1f0:	2200      	movs	r2, #0
    f1f2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    f1f4:	4b0d      	ldr	r3, [pc, #52]	; (f22c <vTaskStartScheduler+0x80>)
    f1f6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    f1f8:	e004      	b.n	f204 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    f1fa:	687b      	ldr	r3, [r7, #4]
    f1fc:	3301      	adds	r3, #1
    f1fe:	d101      	bne.n	f204 <vTaskStartScheduler+0x58>
    f200:	b672      	cpsid	i
    f202:	e7fe      	b.n	f202 <vTaskStartScheduler+0x56>
}
    f204:	46c0      	nop			; (mov r8, r8)
    f206:	46bd      	mov	sp, r7
    f208:	b003      	add	sp, #12
    f20a:	bd90      	pop	{r4, r7, pc}
    f20c:	00019860 	.word	0x00019860
    f210:	0000f7f1 	.word	0x0000f7f1
    f214:	200003b4 	.word	0x200003b4
    f218:	0000ecd9 	.word	0x0000ecd9
    f21c:	0000fd25 	.word	0x0000fd25
    f220:	200003b0 	.word	0x200003b0
    f224:	2000039c 	.word	0x2000039c
    f228:	20000394 	.word	0x20000394
    f22c:	0000dd89 	.word	0x0000dd89

0000f230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    f230:	b580      	push	{r7, lr}
    f232:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    f234:	4b03      	ldr	r3, [pc, #12]	; (f244 <vTaskSuspendAll+0x14>)
    f236:	681b      	ldr	r3, [r3, #0]
    f238:	1c5a      	adds	r2, r3, #1
    f23a:	4b02      	ldr	r3, [pc, #8]	; (f244 <vTaskSuspendAll+0x14>)
    f23c:	601a      	str	r2, [r3, #0]
}
    f23e:	46c0      	nop			; (mov r8, r8)
    f240:	46bd      	mov	sp, r7
    f242:	bd80      	pop	{r7, pc}
    f244:	200003b8 	.word	0x200003b8

0000f248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    f248:	b580      	push	{r7, lr}
    f24a:	b084      	sub	sp, #16
    f24c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    f24e:	2300      	movs	r3, #0
    f250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    f252:	2300      	movs	r3, #0
    f254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    f256:	4b3a      	ldr	r3, [pc, #232]	; (f340 <xTaskResumeAll+0xf8>)
    f258:	681b      	ldr	r3, [r3, #0]
    f25a:	2b00      	cmp	r3, #0
    f25c:	d101      	bne.n	f262 <xTaskResumeAll+0x1a>
    f25e:	b672      	cpsid	i
    f260:	e7fe      	b.n	f260 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    f262:	4b38      	ldr	r3, [pc, #224]	; (f344 <xTaskResumeAll+0xfc>)
    f264:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    f266:	4b36      	ldr	r3, [pc, #216]	; (f340 <xTaskResumeAll+0xf8>)
    f268:	681b      	ldr	r3, [r3, #0]
    f26a:	1e5a      	subs	r2, r3, #1
    f26c:	4b34      	ldr	r3, [pc, #208]	; (f340 <xTaskResumeAll+0xf8>)
    f26e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f270:	4b33      	ldr	r3, [pc, #204]	; (f340 <xTaskResumeAll+0xf8>)
    f272:	681b      	ldr	r3, [r3, #0]
    f274:	2b00      	cmp	r3, #0
    f276:	d15b      	bne.n	f330 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    f278:	4b33      	ldr	r3, [pc, #204]	; (f348 <xTaskResumeAll+0x100>)
    f27a:	681b      	ldr	r3, [r3, #0]
    f27c:	2b00      	cmp	r3, #0
    f27e:	d057      	beq.n	f330 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    f280:	e02f      	b.n	f2e2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    f282:	4b32      	ldr	r3, [pc, #200]	; (f34c <xTaskResumeAll+0x104>)
    f284:	68db      	ldr	r3, [r3, #12]
    f286:	68db      	ldr	r3, [r3, #12]
    f288:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    f28a:	68fb      	ldr	r3, [r7, #12]
    f28c:	3318      	adds	r3, #24
    f28e:	0018      	movs	r0, r3
    f290:	4b2f      	ldr	r3, [pc, #188]	; (f350 <xTaskResumeAll+0x108>)
    f292:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f294:	68fb      	ldr	r3, [r7, #12]
    f296:	3304      	adds	r3, #4
    f298:	0018      	movs	r0, r3
    f29a:	4b2d      	ldr	r3, [pc, #180]	; (f350 <xTaskResumeAll+0x108>)
    f29c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    f29e:	68fb      	ldr	r3, [r7, #12]
    f2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f2a2:	4b2c      	ldr	r3, [pc, #176]	; (f354 <xTaskResumeAll+0x10c>)
    f2a4:	681b      	ldr	r3, [r3, #0]
    f2a6:	429a      	cmp	r2, r3
    f2a8:	d903      	bls.n	f2b2 <xTaskResumeAll+0x6a>
    f2aa:	68fb      	ldr	r3, [r7, #12]
    f2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f2ae:	4b29      	ldr	r3, [pc, #164]	; (f354 <xTaskResumeAll+0x10c>)
    f2b0:	601a      	str	r2, [r3, #0]
    f2b2:	68fb      	ldr	r3, [r7, #12]
    f2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f2b6:	0013      	movs	r3, r2
    f2b8:	009b      	lsls	r3, r3, #2
    f2ba:	189b      	adds	r3, r3, r2
    f2bc:	009b      	lsls	r3, r3, #2
    f2be:	4a26      	ldr	r2, [pc, #152]	; (f358 <xTaskResumeAll+0x110>)
    f2c0:	189a      	adds	r2, r3, r2
    f2c2:	68fb      	ldr	r3, [r7, #12]
    f2c4:	3304      	adds	r3, #4
    f2c6:	0019      	movs	r1, r3
    f2c8:	0010      	movs	r0, r2
    f2ca:	4b24      	ldr	r3, [pc, #144]	; (f35c <xTaskResumeAll+0x114>)
    f2cc:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    f2ce:	68fb      	ldr	r3, [r7, #12]
    f2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f2d2:	4b23      	ldr	r3, [pc, #140]	; (f360 <xTaskResumeAll+0x118>)
    f2d4:	681b      	ldr	r3, [r3, #0]
    f2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f2d8:	429a      	cmp	r2, r3
    f2da:	d302      	bcc.n	f2e2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    f2dc:	4b21      	ldr	r3, [pc, #132]	; (f364 <xTaskResumeAll+0x11c>)
    f2de:	2201      	movs	r2, #1
    f2e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    f2e2:	4b1a      	ldr	r3, [pc, #104]	; (f34c <xTaskResumeAll+0x104>)
    f2e4:	681b      	ldr	r3, [r3, #0]
    f2e6:	2b00      	cmp	r3, #0
    f2e8:	d1cb      	bne.n	f282 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    f2ea:	68fb      	ldr	r3, [r7, #12]
    f2ec:	2b00      	cmp	r3, #0
    f2ee:	d001      	beq.n	f2f4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    f2f0:	4b1d      	ldr	r3, [pc, #116]	; (f368 <xTaskResumeAll+0x120>)
    f2f2:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    f2f4:	4b1d      	ldr	r3, [pc, #116]	; (f36c <xTaskResumeAll+0x124>)
    f2f6:	681b      	ldr	r3, [r3, #0]
    f2f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    f2fa:	687b      	ldr	r3, [r7, #4]
    f2fc:	2b00      	cmp	r3, #0
    f2fe:	d00f      	beq.n	f320 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    f300:	4b1b      	ldr	r3, [pc, #108]	; (f370 <xTaskResumeAll+0x128>)
    f302:	4798      	blx	r3
    f304:	1e03      	subs	r3, r0, #0
    f306:	d002      	beq.n	f30e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    f308:	4b16      	ldr	r3, [pc, #88]	; (f364 <xTaskResumeAll+0x11c>)
    f30a:	2201      	movs	r2, #1
    f30c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    f30e:	687b      	ldr	r3, [r7, #4]
    f310:	3b01      	subs	r3, #1
    f312:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    f314:	687b      	ldr	r3, [r7, #4]
    f316:	2b00      	cmp	r3, #0
    f318:	d1f2      	bne.n	f300 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    f31a:	4b14      	ldr	r3, [pc, #80]	; (f36c <xTaskResumeAll+0x124>)
    f31c:	2200      	movs	r2, #0
    f31e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    f320:	4b10      	ldr	r3, [pc, #64]	; (f364 <xTaskResumeAll+0x11c>)
    f322:	681b      	ldr	r3, [r3, #0]
    f324:	2b00      	cmp	r3, #0
    f326:	d003      	beq.n	f330 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    f328:	2301      	movs	r3, #1
    f32a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    f32c:	4b11      	ldr	r3, [pc, #68]	; (f374 <xTaskResumeAll+0x12c>)
    f32e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    f330:	4b11      	ldr	r3, [pc, #68]	; (f378 <xTaskResumeAll+0x130>)
    f332:	4798      	blx	r3

	return xAlreadyYielded;
    f334:	68bb      	ldr	r3, [r7, #8]
}
    f336:	0018      	movs	r0, r3
    f338:	46bd      	mov	sp, r7
    f33a:	b004      	add	sp, #16
    f33c:	bd80      	pop	{r7, pc}
    f33e:	46c0      	nop			; (mov r8, r8)
    f340:	200003b8 	.word	0x200003b8
    f344:	0000de01 	.word	0x0000de01
    f348:	20000390 	.word	0x20000390
    f34c:	20000350 	.word	0x20000350
    f350:	0000e0a7 	.word	0x0000e0a7
    f354:	20000398 	.word	0x20000398
    f358:	200002bc 	.word	0x200002bc
    f35c:	0000dff7 	.word	0x0000dff7
    f360:	200002b8 	.word	0x200002b8
    f364:	200003a4 	.word	0x200003a4
    f368:	0000f939 	.word	0x0000f939
    f36c:	200003a0 	.word	0x200003a0
    f370:	0000f399 	.word	0x0000f399
    f374:	0000dde1 	.word	0x0000dde1
    f378:	0000de25 	.word	0x0000de25

0000f37c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    f37c:	b580      	push	{r7, lr}
    f37e:	b082      	sub	sp, #8
    f380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    f382:	4b04      	ldr	r3, [pc, #16]	; (f394 <xTaskGetTickCount+0x18>)
    f384:	681b      	ldr	r3, [r3, #0]
    f386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    f388:	687b      	ldr	r3, [r7, #4]
}
    f38a:	0018      	movs	r0, r3
    f38c:	46bd      	mov	sp, r7
    f38e:	b002      	add	sp, #8
    f390:	bd80      	pop	{r7, pc}
    f392:	46c0      	nop			; (mov r8, r8)
    f394:	20000394 	.word	0x20000394

0000f398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    f398:	b580      	push	{r7, lr}
    f39a:	b086      	sub	sp, #24
    f39c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    f39e:	2300      	movs	r3, #0
    f3a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f3a2:	4b4c      	ldr	r3, [pc, #304]	; (f4d4 <xTaskIncrementTick+0x13c>)
    f3a4:	681b      	ldr	r3, [r3, #0]
    f3a6:	2b00      	cmp	r3, #0
    f3a8:	d000      	beq.n	f3ac <xTaskIncrementTick+0x14>
    f3aa:	e083      	b.n	f4b4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    f3ac:	4b4a      	ldr	r3, [pc, #296]	; (f4d8 <xTaskIncrementTick+0x140>)
    f3ae:	681b      	ldr	r3, [r3, #0]
    f3b0:	3301      	adds	r3, #1
    f3b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    f3b4:	4b48      	ldr	r3, [pc, #288]	; (f4d8 <xTaskIncrementTick+0x140>)
    f3b6:	693a      	ldr	r2, [r7, #16]
    f3b8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    f3ba:	693b      	ldr	r3, [r7, #16]
    f3bc:	2b00      	cmp	r3, #0
    f3be:	d117      	bne.n	f3f0 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    f3c0:	4b46      	ldr	r3, [pc, #280]	; (f4dc <xTaskIncrementTick+0x144>)
    f3c2:	681b      	ldr	r3, [r3, #0]
    f3c4:	681b      	ldr	r3, [r3, #0]
    f3c6:	2b00      	cmp	r3, #0
    f3c8:	d001      	beq.n	f3ce <xTaskIncrementTick+0x36>
    f3ca:	b672      	cpsid	i
    f3cc:	e7fe      	b.n	f3cc <xTaskIncrementTick+0x34>
    f3ce:	4b43      	ldr	r3, [pc, #268]	; (f4dc <xTaskIncrementTick+0x144>)
    f3d0:	681b      	ldr	r3, [r3, #0]
    f3d2:	60fb      	str	r3, [r7, #12]
    f3d4:	4b42      	ldr	r3, [pc, #264]	; (f4e0 <xTaskIncrementTick+0x148>)
    f3d6:	681a      	ldr	r2, [r3, #0]
    f3d8:	4b40      	ldr	r3, [pc, #256]	; (f4dc <xTaskIncrementTick+0x144>)
    f3da:	601a      	str	r2, [r3, #0]
    f3dc:	4b40      	ldr	r3, [pc, #256]	; (f4e0 <xTaskIncrementTick+0x148>)
    f3de:	68fa      	ldr	r2, [r7, #12]
    f3e0:	601a      	str	r2, [r3, #0]
    f3e2:	4b40      	ldr	r3, [pc, #256]	; (f4e4 <xTaskIncrementTick+0x14c>)
    f3e4:	681b      	ldr	r3, [r3, #0]
    f3e6:	1c5a      	adds	r2, r3, #1
    f3e8:	4b3e      	ldr	r3, [pc, #248]	; (f4e4 <xTaskIncrementTick+0x14c>)
    f3ea:	601a      	str	r2, [r3, #0]
    f3ec:	4b3e      	ldr	r3, [pc, #248]	; (f4e8 <xTaskIncrementTick+0x150>)
    f3ee:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    f3f0:	4b3e      	ldr	r3, [pc, #248]	; (f4ec <xTaskIncrementTick+0x154>)
    f3f2:	681b      	ldr	r3, [r3, #0]
    f3f4:	693a      	ldr	r2, [r7, #16]
    f3f6:	429a      	cmp	r2, r3
    f3f8:	d34e      	bcc.n	f498 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f3fa:	4b38      	ldr	r3, [pc, #224]	; (f4dc <xTaskIncrementTick+0x144>)
    f3fc:	681b      	ldr	r3, [r3, #0]
    f3fe:	681b      	ldr	r3, [r3, #0]
    f400:	2b00      	cmp	r3, #0
    f402:	d101      	bne.n	f408 <xTaskIncrementTick+0x70>
    f404:	2301      	movs	r3, #1
    f406:	e000      	b.n	f40a <xTaskIncrementTick+0x72>
    f408:	2300      	movs	r3, #0
    f40a:	2b00      	cmp	r3, #0
    f40c:	d004      	beq.n	f418 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f40e:	4b37      	ldr	r3, [pc, #220]	; (f4ec <xTaskIncrementTick+0x154>)
    f410:	2201      	movs	r2, #1
    f412:	4252      	negs	r2, r2
    f414:	601a      	str	r2, [r3, #0]
					break;
    f416:	e03f      	b.n	f498 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    f418:	4b30      	ldr	r3, [pc, #192]	; (f4dc <xTaskIncrementTick+0x144>)
    f41a:	681b      	ldr	r3, [r3, #0]
    f41c:	68db      	ldr	r3, [r3, #12]
    f41e:	68db      	ldr	r3, [r3, #12]
    f420:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    f422:	68bb      	ldr	r3, [r7, #8]
    f424:	685b      	ldr	r3, [r3, #4]
    f426:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    f428:	693a      	ldr	r2, [r7, #16]
    f42a:	687b      	ldr	r3, [r7, #4]
    f42c:	429a      	cmp	r2, r3
    f42e:	d203      	bcs.n	f438 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    f430:	4b2e      	ldr	r3, [pc, #184]	; (f4ec <xTaskIncrementTick+0x154>)
    f432:	687a      	ldr	r2, [r7, #4]
    f434:	601a      	str	r2, [r3, #0]
						break;
    f436:	e02f      	b.n	f498 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f438:	68bb      	ldr	r3, [r7, #8]
    f43a:	3304      	adds	r3, #4
    f43c:	0018      	movs	r0, r3
    f43e:	4b2c      	ldr	r3, [pc, #176]	; (f4f0 <xTaskIncrementTick+0x158>)
    f440:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    f442:	68bb      	ldr	r3, [r7, #8]
    f444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f446:	2b00      	cmp	r3, #0
    f448:	d004      	beq.n	f454 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    f44a:	68bb      	ldr	r3, [r7, #8]
    f44c:	3318      	adds	r3, #24
    f44e:	0018      	movs	r0, r3
    f450:	4b27      	ldr	r3, [pc, #156]	; (f4f0 <xTaskIncrementTick+0x158>)
    f452:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    f454:	68bb      	ldr	r3, [r7, #8]
    f456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f458:	4b26      	ldr	r3, [pc, #152]	; (f4f4 <xTaskIncrementTick+0x15c>)
    f45a:	681b      	ldr	r3, [r3, #0]
    f45c:	429a      	cmp	r2, r3
    f45e:	d903      	bls.n	f468 <xTaskIncrementTick+0xd0>
    f460:	68bb      	ldr	r3, [r7, #8]
    f462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f464:	4b23      	ldr	r3, [pc, #140]	; (f4f4 <xTaskIncrementTick+0x15c>)
    f466:	601a      	str	r2, [r3, #0]
    f468:	68bb      	ldr	r3, [r7, #8]
    f46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f46c:	0013      	movs	r3, r2
    f46e:	009b      	lsls	r3, r3, #2
    f470:	189b      	adds	r3, r3, r2
    f472:	009b      	lsls	r3, r3, #2
    f474:	4a20      	ldr	r2, [pc, #128]	; (f4f8 <xTaskIncrementTick+0x160>)
    f476:	189a      	adds	r2, r3, r2
    f478:	68bb      	ldr	r3, [r7, #8]
    f47a:	3304      	adds	r3, #4
    f47c:	0019      	movs	r1, r3
    f47e:	0010      	movs	r0, r2
    f480:	4b1e      	ldr	r3, [pc, #120]	; (f4fc <xTaskIncrementTick+0x164>)
    f482:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    f484:	68bb      	ldr	r3, [r7, #8]
    f486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f488:	4b1d      	ldr	r3, [pc, #116]	; (f500 <xTaskIncrementTick+0x168>)
    f48a:	681b      	ldr	r3, [r3, #0]
    f48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f48e:	429a      	cmp	r2, r3
    f490:	d3b3      	bcc.n	f3fa <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    f492:	2301      	movs	r3, #1
    f494:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f496:	e7b0      	b.n	f3fa <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    f498:	4b19      	ldr	r3, [pc, #100]	; (f500 <xTaskIncrementTick+0x168>)
    f49a:	681b      	ldr	r3, [r3, #0]
    f49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f49e:	4916      	ldr	r1, [pc, #88]	; (f4f8 <xTaskIncrementTick+0x160>)
    f4a0:	0013      	movs	r3, r2
    f4a2:	009b      	lsls	r3, r3, #2
    f4a4:	189b      	adds	r3, r3, r2
    f4a6:	009b      	lsls	r3, r3, #2
    f4a8:	585b      	ldr	r3, [r3, r1]
    f4aa:	2b01      	cmp	r3, #1
    f4ac:	d907      	bls.n	f4be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    f4ae:	2301      	movs	r3, #1
    f4b0:	617b      	str	r3, [r7, #20]
    f4b2:	e004      	b.n	f4be <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    f4b4:	4b13      	ldr	r3, [pc, #76]	; (f504 <xTaskIncrementTick+0x16c>)
    f4b6:	681b      	ldr	r3, [r3, #0]
    f4b8:	1c5a      	adds	r2, r3, #1
    f4ba:	4b12      	ldr	r3, [pc, #72]	; (f504 <xTaskIncrementTick+0x16c>)
    f4bc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    f4be:	4b12      	ldr	r3, [pc, #72]	; (f508 <xTaskIncrementTick+0x170>)
    f4c0:	681b      	ldr	r3, [r3, #0]
    f4c2:	2b00      	cmp	r3, #0
    f4c4:	d001      	beq.n	f4ca <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    f4c6:	2301      	movs	r3, #1
    f4c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    f4ca:	697b      	ldr	r3, [r7, #20]
}
    f4cc:	0018      	movs	r0, r3
    f4ce:	46bd      	mov	sp, r7
    f4d0:	b006      	add	sp, #24
    f4d2:	bd80      	pop	{r7, pc}
    f4d4:	200003b8 	.word	0x200003b8
    f4d8:	20000394 	.word	0x20000394
    f4dc:	20000348 	.word	0x20000348
    f4e0:	2000034c 	.word	0x2000034c
    f4e4:	200003a8 	.word	0x200003a8
    f4e8:	0000f939 	.word	0x0000f939
    f4ec:	200003b0 	.word	0x200003b0
    f4f0:	0000e0a7 	.word	0x0000e0a7
    f4f4:	20000398 	.word	0x20000398
    f4f8:	200002bc 	.word	0x200002bc
    f4fc:	0000dff7 	.word	0x0000dff7
    f500:	200002b8 	.word	0x200002b8
    f504:	200003a0 	.word	0x200003a0
    f508:	200003a4 	.word	0x200003a4

0000f50c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    f50c:	b580      	push	{r7, lr}
    f50e:	b082      	sub	sp, #8
    f510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    f512:	4b22      	ldr	r3, [pc, #136]	; (f59c <vTaskSwitchContext+0x90>)
    f514:	681b      	ldr	r3, [r3, #0]
    f516:	2b00      	cmp	r3, #0
    f518:	d003      	beq.n	f522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    f51a:	4b21      	ldr	r3, [pc, #132]	; (f5a0 <vTaskSwitchContext+0x94>)
    f51c:	2201      	movs	r2, #1
    f51e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    f520:	e037      	b.n	f592 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
    f522:	4b1f      	ldr	r3, [pc, #124]	; (f5a0 <vTaskSwitchContext+0x94>)
    f524:	2200      	movs	r2, #0
    f526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    f528:	4b1e      	ldr	r3, [pc, #120]	; (f5a4 <vTaskSwitchContext+0x98>)
    f52a:	681b      	ldr	r3, [r3, #0]
    f52c:	607b      	str	r3, [r7, #4]
    f52e:	e007      	b.n	f540 <vTaskSwitchContext+0x34>
    f530:	687b      	ldr	r3, [r7, #4]
    f532:	2b00      	cmp	r3, #0
    f534:	d101      	bne.n	f53a <vTaskSwitchContext+0x2e>
    f536:	b672      	cpsid	i
    f538:	e7fe      	b.n	f538 <vTaskSwitchContext+0x2c>
    f53a:	687b      	ldr	r3, [r7, #4]
    f53c:	3b01      	subs	r3, #1
    f53e:	607b      	str	r3, [r7, #4]
    f540:	4919      	ldr	r1, [pc, #100]	; (f5a8 <vTaskSwitchContext+0x9c>)
    f542:	687a      	ldr	r2, [r7, #4]
    f544:	0013      	movs	r3, r2
    f546:	009b      	lsls	r3, r3, #2
    f548:	189b      	adds	r3, r3, r2
    f54a:	009b      	lsls	r3, r3, #2
    f54c:	585b      	ldr	r3, [r3, r1]
    f54e:	2b00      	cmp	r3, #0
    f550:	d0ee      	beq.n	f530 <vTaskSwitchContext+0x24>
    f552:	687a      	ldr	r2, [r7, #4]
    f554:	0013      	movs	r3, r2
    f556:	009b      	lsls	r3, r3, #2
    f558:	189b      	adds	r3, r3, r2
    f55a:	009b      	lsls	r3, r3, #2
    f55c:	4a12      	ldr	r2, [pc, #72]	; (f5a8 <vTaskSwitchContext+0x9c>)
    f55e:	189b      	adds	r3, r3, r2
    f560:	603b      	str	r3, [r7, #0]
    f562:	683b      	ldr	r3, [r7, #0]
    f564:	685b      	ldr	r3, [r3, #4]
    f566:	685a      	ldr	r2, [r3, #4]
    f568:	683b      	ldr	r3, [r7, #0]
    f56a:	605a      	str	r2, [r3, #4]
    f56c:	683b      	ldr	r3, [r7, #0]
    f56e:	685a      	ldr	r2, [r3, #4]
    f570:	683b      	ldr	r3, [r7, #0]
    f572:	3308      	adds	r3, #8
    f574:	429a      	cmp	r2, r3
    f576:	d104      	bne.n	f582 <vTaskSwitchContext+0x76>
    f578:	683b      	ldr	r3, [r7, #0]
    f57a:	685b      	ldr	r3, [r3, #4]
    f57c:	685a      	ldr	r2, [r3, #4]
    f57e:	683b      	ldr	r3, [r7, #0]
    f580:	605a      	str	r2, [r3, #4]
    f582:	683b      	ldr	r3, [r7, #0]
    f584:	685b      	ldr	r3, [r3, #4]
    f586:	68da      	ldr	r2, [r3, #12]
    f588:	4b08      	ldr	r3, [pc, #32]	; (f5ac <vTaskSwitchContext+0xa0>)
    f58a:	601a      	str	r2, [r3, #0]
    f58c:	4b05      	ldr	r3, [pc, #20]	; (f5a4 <vTaskSwitchContext+0x98>)
    f58e:	687a      	ldr	r2, [r7, #4]
    f590:	601a      	str	r2, [r3, #0]
}
    f592:	46c0      	nop			; (mov r8, r8)
    f594:	46bd      	mov	sp, r7
    f596:	b002      	add	sp, #8
    f598:	bd80      	pop	{r7, pc}
    f59a:	46c0      	nop			; (mov r8, r8)
    f59c:	200003b8 	.word	0x200003b8
    f5a0:	200003a4 	.word	0x200003a4
    f5a4:	20000398 	.word	0x20000398
    f5a8:	200002bc 	.word	0x200002bc
    f5ac:	200002b8 	.word	0x200002b8

0000f5b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    f5b0:	b580      	push	{r7, lr}
    f5b2:	b082      	sub	sp, #8
    f5b4:	af00      	add	r7, sp, #0
    f5b6:	6078      	str	r0, [r7, #4]
    f5b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    f5ba:	687b      	ldr	r3, [r7, #4]
    f5bc:	2b00      	cmp	r3, #0
    f5be:	d101      	bne.n	f5c4 <vTaskPlaceOnEventList+0x14>
    f5c0:	b672      	cpsid	i
    f5c2:	e7fe      	b.n	f5c2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f5c4:	4b08      	ldr	r3, [pc, #32]	; (f5e8 <vTaskPlaceOnEventList+0x38>)
    f5c6:	681b      	ldr	r3, [r3, #0]
    f5c8:	3318      	adds	r3, #24
    f5ca:	001a      	movs	r2, r3
    f5cc:	687b      	ldr	r3, [r7, #4]
    f5ce:	0011      	movs	r1, r2
    f5d0:	0018      	movs	r0, r3
    f5d2:	4b06      	ldr	r3, [pc, #24]	; (f5ec <vTaskPlaceOnEventList+0x3c>)
    f5d4:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    f5d6:	683b      	ldr	r3, [r7, #0]
    f5d8:	2101      	movs	r1, #1
    f5da:	0018      	movs	r0, r3
    f5dc:	4b04      	ldr	r3, [pc, #16]	; (f5f0 <vTaskPlaceOnEventList+0x40>)
    f5de:	4798      	blx	r3
}
    f5e0:	46c0      	nop			; (mov r8, r8)
    f5e2:	46bd      	mov	sp, r7
    f5e4:	b002      	add	sp, #8
    f5e6:	bd80      	pop	{r7, pc}
    f5e8:	200002b8 	.word	0x200002b8
    f5ec:	0000e03b 	.word	0x0000e03b
    f5f0:	0000fc71 	.word	0x0000fc71

0000f5f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    f5f4:	b580      	push	{r7, lr}
    f5f6:	b084      	sub	sp, #16
    f5f8:	af00      	add	r7, sp, #0
    f5fa:	60f8      	str	r0, [r7, #12]
    f5fc:	60b9      	str	r1, [r7, #8]
    f5fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    f600:	68fb      	ldr	r3, [r7, #12]
    f602:	2b00      	cmp	r3, #0
    f604:	d101      	bne.n	f60a <vTaskPlaceOnEventListRestricted+0x16>
    f606:	b672      	cpsid	i
    f608:	e7fe      	b.n	f608 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    f60a:	4b0c      	ldr	r3, [pc, #48]	; (f63c <vTaskPlaceOnEventListRestricted+0x48>)
    f60c:	681b      	ldr	r3, [r3, #0]
    f60e:	3318      	adds	r3, #24
    f610:	001a      	movs	r2, r3
    f612:	68fb      	ldr	r3, [r7, #12]
    f614:	0011      	movs	r1, r2
    f616:	0018      	movs	r0, r3
    f618:	4b09      	ldr	r3, [pc, #36]	; (f640 <vTaskPlaceOnEventListRestricted+0x4c>)
    f61a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    f61c:	687b      	ldr	r3, [r7, #4]
    f61e:	2b00      	cmp	r3, #0
    f620:	d002      	beq.n	f628 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    f622:	2301      	movs	r3, #1
    f624:	425b      	negs	r3, r3
    f626:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    f628:	687a      	ldr	r2, [r7, #4]
    f62a:	68bb      	ldr	r3, [r7, #8]
    f62c:	0011      	movs	r1, r2
    f62e:	0018      	movs	r0, r3
    f630:	4b04      	ldr	r3, [pc, #16]	; (f644 <vTaskPlaceOnEventListRestricted+0x50>)
    f632:	4798      	blx	r3
	}
    f634:	46c0      	nop			; (mov r8, r8)
    f636:	46bd      	mov	sp, r7
    f638:	b004      	add	sp, #16
    f63a:	bd80      	pop	{r7, pc}
    f63c:	200002b8 	.word	0x200002b8
    f640:	0000dff7 	.word	0x0000dff7
    f644:	0000fc71 	.word	0x0000fc71

0000f648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    f648:	b580      	push	{r7, lr}
    f64a:	b084      	sub	sp, #16
    f64c:	af00      	add	r7, sp, #0
    f64e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    f650:	687b      	ldr	r3, [r7, #4]
    f652:	68db      	ldr	r3, [r3, #12]
    f654:	68db      	ldr	r3, [r3, #12]
    f656:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    f658:	68bb      	ldr	r3, [r7, #8]
    f65a:	2b00      	cmp	r3, #0
    f65c:	d101      	bne.n	f662 <xTaskRemoveFromEventList+0x1a>
    f65e:	b672      	cpsid	i
    f660:	e7fe      	b.n	f660 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    f662:	68bb      	ldr	r3, [r7, #8]
    f664:	3318      	adds	r3, #24
    f666:	0018      	movs	r0, r3
    f668:	4b1f      	ldr	r3, [pc, #124]	; (f6e8 <xTaskRemoveFromEventList+0xa0>)
    f66a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f66c:	4b1f      	ldr	r3, [pc, #124]	; (f6ec <xTaskRemoveFromEventList+0xa4>)
    f66e:	681b      	ldr	r3, [r3, #0]
    f670:	2b00      	cmp	r3, #0
    f672:	d11d      	bne.n	f6b0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    f674:	68bb      	ldr	r3, [r7, #8]
    f676:	3304      	adds	r3, #4
    f678:	0018      	movs	r0, r3
    f67a:	4b1b      	ldr	r3, [pc, #108]	; (f6e8 <xTaskRemoveFromEventList+0xa0>)
    f67c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    f67e:	68bb      	ldr	r3, [r7, #8]
    f680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f682:	4b1b      	ldr	r3, [pc, #108]	; (f6f0 <xTaskRemoveFromEventList+0xa8>)
    f684:	681b      	ldr	r3, [r3, #0]
    f686:	429a      	cmp	r2, r3
    f688:	d903      	bls.n	f692 <xTaskRemoveFromEventList+0x4a>
    f68a:	68bb      	ldr	r3, [r7, #8]
    f68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f68e:	4b18      	ldr	r3, [pc, #96]	; (f6f0 <xTaskRemoveFromEventList+0xa8>)
    f690:	601a      	str	r2, [r3, #0]
    f692:	68bb      	ldr	r3, [r7, #8]
    f694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f696:	0013      	movs	r3, r2
    f698:	009b      	lsls	r3, r3, #2
    f69a:	189b      	adds	r3, r3, r2
    f69c:	009b      	lsls	r3, r3, #2
    f69e:	4a15      	ldr	r2, [pc, #84]	; (f6f4 <xTaskRemoveFromEventList+0xac>)
    f6a0:	189a      	adds	r2, r3, r2
    f6a2:	68bb      	ldr	r3, [r7, #8]
    f6a4:	3304      	adds	r3, #4
    f6a6:	0019      	movs	r1, r3
    f6a8:	0010      	movs	r0, r2
    f6aa:	4b13      	ldr	r3, [pc, #76]	; (f6f8 <xTaskRemoveFromEventList+0xb0>)
    f6ac:	4798      	blx	r3
    f6ae:	e007      	b.n	f6c0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    f6b0:	68bb      	ldr	r3, [r7, #8]
    f6b2:	3318      	adds	r3, #24
    f6b4:	001a      	movs	r2, r3
    f6b6:	4b11      	ldr	r3, [pc, #68]	; (f6fc <xTaskRemoveFromEventList+0xb4>)
    f6b8:	0011      	movs	r1, r2
    f6ba:	0018      	movs	r0, r3
    f6bc:	4b0e      	ldr	r3, [pc, #56]	; (f6f8 <xTaskRemoveFromEventList+0xb0>)
    f6be:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    f6c0:	68bb      	ldr	r3, [r7, #8]
    f6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f6c4:	4b0e      	ldr	r3, [pc, #56]	; (f700 <xTaskRemoveFromEventList+0xb8>)
    f6c6:	681b      	ldr	r3, [r3, #0]
    f6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f6ca:	429a      	cmp	r2, r3
    f6cc:	d905      	bls.n	f6da <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    f6ce:	2301      	movs	r3, #1
    f6d0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    f6d2:	4b0c      	ldr	r3, [pc, #48]	; (f704 <xTaskRemoveFromEventList+0xbc>)
    f6d4:	2201      	movs	r2, #1
    f6d6:	601a      	str	r2, [r3, #0]
    f6d8:	e001      	b.n	f6de <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    f6da:	2300      	movs	r3, #0
    f6dc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    f6de:	68fb      	ldr	r3, [r7, #12]
}
    f6e0:	0018      	movs	r0, r3
    f6e2:	46bd      	mov	sp, r7
    f6e4:	b004      	add	sp, #16
    f6e6:	bd80      	pop	{r7, pc}
    f6e8:	0000e0a7 	.word	0x0000e0a7
    f6ec:	200003b8 	.word	0x200003b8
    f6f0:	20000398 	.word	0x20000398
    f6f4:	200002bc 	.word	0x200002bc
    f6f8:	0000dff7 	.word	0x0000dff7
    f6fc:	20000350 	.word	0x20000350
    f700:	200002b8 	.word	0x200002b8
    f704:	200003a4 	.word	0x200003a4

0000f708 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    f708:	b580      	push	{r7, lr}
    f70a:	b082      	sub	sp, #8
    f70c:	af00      	add	r7, sp, #0
    f70e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    f710:	4b05      	ldr	r3, [pc, #20]	; (f728 <vTaskInternalSetTimeOutState+0x20>)
    f712:	681a      	ldr	r2, [r3, #0]
    f714:	687b      	ldr	r3, [r7, #4]
    f716:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    f718:	4b04      	ldr	r3, [pc, #16]	; (f72c <vTaskInternalSetTimeOutState+0x24>)
    f71a:	681a      	ldr	r2, [r3, #0]
    f71c:	687b      	ldr	r3, [r7, #4]
    f71e:	605a      	str	r2, [r3, #4]
}
    f720:	46c0      	nop			; (mov r8, r8)
    f722:	46bd      	mov	sp, r7
    f724:	b002      	add	sp, #8
    f726:	bd80      	pop	{r7, pc}
    f728:	200003a8 	.word	0x200003a8
    f72c:	20000394 	.word	0x20000394

0000f730 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    f730:	b580      	push	{r7, lr}
    f732:	b086      	sub	sp, #24
    f734:	af00      	add	r7, sp, #0
    f736:	6078      	str	r0, [r7, #4]
    f738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    f73a:	687b      	ldr	r3, [r7, #4]
    f73c:	2b00      	cmp	r3, #0
    f73e:	d101      	bne.n	f744 <xTaskCheckForTimeOut+0x14>
    f740:	b672      	cpsid	i
    f742:	e7fe      	b.n	f742 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    f744:	683b      	ldr	r3, [r7, #0]
    f746:	2b00      	cmp	r3, #0
    f748:	d101      	bne.n	f74e <xTaskCheckForTimeOut+0x1e>
    f74a:	b672      	cpsid	i
    f74c:	e7fe      	b.n	f74c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    f74e:	4b1e      	ldr	r3, [pc, #120]	; (f7c8 <xTaskCheckForTimeOut+0x98>)
    f750:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    f752:	4b1e      	ldr	r3, [pc, #120]	; (f7cc <xTaskCheckForTimeOut+0x9c>)
    f754:	681b      	ldr	r3, [r3, #0]
    f756:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    f758:	687b      	ldr	r3, [r7, #4]
    f75a:	685b      	ldr	r3, [r3, #4]
    f75c:	693a      	ldr	r2, [r7, #16]
    f75e:	1ad3      	subs	r3, r2, r3
    f760:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    f762:	683b      	ldr	r3, [r7, #0]
    f764:	681b      	ldr	r3, [r3, #0]
    f766:	3301      	adds	r3, #1
    f768:	d102      	bne.n	f770 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    f76a:	2300      	movs	r3, #0
    f76c:	617b      	str	r3, [r7, #20]
    f76e:	e024      	b.n	f7ba <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    f770:	687b      	ldr	r3, [r7, #4]
    f772:	681a      	ldr	r2, [r3, #0]
    f774:	4b16      	ldr	r3, [pc, #88]	; (f7d0 <xTaskCheckForTimeOut+0xa0>)
    f776:	681b      	ldr	r3, [r3, #0]
    f778:	429a      	cmp	r2, r3
    f77a:	d007      	beq.n	f78c <xTaskCheckForTimeOut+0x5c>
    f77c:	687b      	ldr	r3, [r7, #4]
    f77e:	685a      	ldr	r2, [r3, #4]
    f780:	693b      	ldr	r3, [r7, #16]
    f782:	429a      	cmp	r2, r3
    f784:	d802      	bhi.n	f78c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    f786:	2301      	movs	r3, #1
    f788:	617b      	str	r3, [r7, #20]
    f78a:	e016      	b.n	f7ba <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    f78c:	683b      	ldr	r3, [r7, #0]
    f78e:	681a      	ldr	r2, [r3, #0]
    f790:	68fb      	ldr	r3, [r7, #12]
    f792:	429a      	cmp	r2, r3
    f794:	d90c      	bls.n	f7b0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    f796:	683b      	ldr	r3, [r7, #0]
    f798:	681a      	ldr	r2, [r3, #0]
    f79a:	68fb      	ldr	r3, [r7, #12]
    f79c:	1ad2      	subs	r2, r2, r3
    f79e:	683b      	ldr	r3, [r7, #0]
    f7a0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    f7a2:	687b      	ldr	r3, [r7, #4]
    f7a4:	0018      	movs	r0, r3
    f7a6:	4b0b      	ldr	r3, [pc, #44]	; (f7d4 <xTaskCheckForTimeOut+0xa4>)
    f7a8:	4798      	blx	r3
			xReturn = pdFALSE;
    f7aa:	2300      	movs	r3, #0
    f7ac:	617b      	str	r3, [r7, #20]
    f7ae:	e004      	b.n	f7ba <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    f7b0:	683b      	ldr	r3, [r7, #0]
    f7b2:	2200      	movs	r2, #0
    f7b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    f7b6:	2301      	movs	r3, #1
    f7b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    f7ba:	4b07      	ldr	r3, [pc, #28]	; (f7d8 <xTaskCheckForTimeOut+0xa8>)
    f7bc:	4798      	blx	r3

	return xReturn;
    f7be:	697b      	ldr	r3, [r7, #20]
}
    f7c0:	0018      	movs	r0, r3
    f7c2:	46bd      	mov	sp, r7
    f7c4:	b006      	add	sp, #24
    f7c6:	bd80      	pop	{r7, pc}
    f7c8:	0000de01 	.word	0x0000de01
    f7cc:	20000394 	.word	0x20000394
    f7d0:	200003a8 	.word	0x200003a8
    f7d4:	0000f709 	.word	0x0000f709
    f7d8:	0000de25 	.word	0x0000de25

0000f7dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    f7dc:	b580      	push	{r7, lr}
    f7de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    f7e0:	4b02      	ldr	r3, [pc, #8]	; (f7ec <vTaskMissedYield+0x10>)
    f7e2:	2201      	movs	r2, #1
    f7e4:	601a      	str	r2, [r3, #0]
}
    f7e6:	46c0      	nop			; (mov r8, r8)
    f7e8:	46bd      	mov	sp, r7
    f7ea:	bd80      	pop	{r7, pc}
    f7ec:	200003a4 	.word	0x200003a4

0000f7f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    f7f0:	b580      	push	{r7, lr}
    f7f2:	b082      	sub	sp, #8
    f7f4:	af00      	add	r7, sp, #0
    f7f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    f7f8:	4b04      	ldr	r3, [pc, #16]	; (f80c <prvIdleTask+0x1c>)
    f7fa:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    f7fc:	4b04      	ldr	r3, [pc, #16]	; (f810 <prvIdleTask+0x20>)
    f7fe:	681b      	ldr	r3, [r3, #0]
    f800:	2b01      	cmp	r3, #1
    f802:	d9f9      	bls.n	f7f8 <prvIdleTask+0x8>
			{
				taskYIELD();
    f804:	4b03      	ldr	r3, [pc, #12]	; (f814 <prvIdleTask+0x24>)
    f806:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    f808:	e7f6      	b.n	f7f8 <prvIdleTask+0x8>
    f80a:	46c0      	nop			; (mov r8, r8)
    f80c:	0000f8a5 	.word	0x0000f8a5
    f810:	200002bc 	.word	0x200002bc
    f814:	0000dde1 	.word	0x0000dde1

0000f818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    f818:	b580      	push	{r7, lr}
    f81a:	b082      	sub	sp, #8
    f81c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    f81e:	2300      	movs	r3, #0
    f820:	607b      	str	r3, [r7, #4]
    f822:	e00c      	b.n	f83e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    f824:	687a      	ldr	r2, [r7, #4]
    f826:	0013      	movs	r3, r2
    f828:	009b      	lsls	r3, r3, #2
    f82a:	189b      	adds	r3, r3, r2
    f82c:	009b      	lsls	r3, r3, #2
    f82e:	4a14      	ldr	r2, [pc, #80]	; (f880 <prvInitialiseTaskLists+0x68>)
    f830:	189b      	adds	r3, r3, r2
    f832:	0018      	movs	r0, r3
    f834:	4b13      	ldr	r3, [pc, #76]	; (f884 <prvInitialiseTaskLists+0x6c>)
    f836:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    f838:	687b      	ldr	r3, [r7, #4]
    f83a:	3301      	adds	r3, #1
    f83c:	607b      	str	r3, [r7, #4]
    f83e:	687b      	ldr	r3, [r7, #4]
    f840:	2b04      	cmp	r3, #4
    f842:	d9ef      	bls.n	f824 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    f844:	4b10      	ldr	r3, [pc, #64]	; (f888 <prvInitialiseTaskLists+0x70>)
    f846:	0018      	movs	r0, r3
    f848:	4b0e      	ldr	r3, [pc, #56]	; (f884 <prvInitialiseTaskLists+0x6c>)
    f84a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    f84c:	4b0f      	ldr	r3, [pc, #60]	; (f88c <prvInitialiseTaskLists+0x74>)
    f84e:	0018      	movs	r0, r3
    f850:	4b0c      	ldr	r3, [pc, #48]	; (f884 <prvInitialiseTaskLists+0x6c>)
    f852:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    f854:	4b0e      	ldr	r3, [pc, #56]	; (f890 <prvInitialiseTaskLists+0x78>)
    f856:	0018      	movs	r0, r3
    f858:	4b0a      	ldr	r3, [pc, #40]	; (f884 <prvInitialiseTaskLists+0x6c>)
    f85a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    f85c:	4b0d      	ldr	r3, [pc, #52]	; (f894 <prvInitialiseTaskLists+0x7c>)
    f85e:	0018      	movs	r0, r3
    f860:	4b08      	ldr	r3, [pc, #32]	; (f884 <prvInitialiseTaskLists+0x6c>)
    f862:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    f864:	4b0c      	ldr	r3, [pc, #48]	; (f898 <prvInitialiseTaskLists+0x80>)
    f866:	0018      	movs	r0, r3
    f868:	4b06      	ldr	r3, [pc, #24]	; (f884 <prvInitialiseTaskLists+0x6c>)
    f86a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    f86c:	4b0b      	ldr	r3, [pc, #44]	; (f89c <prvInitialiseTaskLists+0x84>)
    f86e:	4a06      	ldr	r2, [pc, #24]	; (f888 <prvInitialiseTaskLists+0x70>)
    f870:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    f872:	4b0b      	ldr	r3, [pc, #44]	; (f8a0 <prvInitialiseTaskLists+0x88>)
    f874:	4a05      	ldr	r2, [pc, #20]	; (f88c <prvInitialiseTaskLists+0x74>)
    f876:	601a      	str	r2, [r3, #0]
}
    f878:	46c0      	nop			; (mov r8, r8)
    f87a:	46bd      	mov	sp, r7
    f87c:	b002      	add	sp, #8
    f87e:	bd80      	pop	{r7, pc}
    f880:	200002bc 	.word	0x200002bc
    f884:	0000dfa5 	.word	0x0000dfa5
    f888:	20000320 	.word	0x20000320
    f88c:	20000334 	.word	0x20000334
    f890:	20000350 	.word	0x20000350
    f894:	20000364 	.word	0x20000364
    f898:	2000037c 	.word	0x2000037c
    f89c:	20000348 	.word	0x20000348
    f8a0:	2000034c 	.word	0x2000034c

0000f8a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    f8a4:	b580      	push	{r7, lr}
    f8a6:	b082      	sub	sp, #8
    f8a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    f8aa:	e01a      	b.n	f8e2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    f8ac:	4b11      	ldr	r3, [pc, #68]	; (f8f4 <prvCheckTasksWaitingTermination+0x50>)
    f8ae:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    f8b0:	4b11      	ldr	r3, [pc, #68]	; (f8f8 <prvCheckTasksWaitingTermination+0x54>)
    f8b2:	68db      	ldr	r3, [r3, #12]
    f8b4:	68db      	ldr	r3, [r3, #12]
    f8b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    f8b8:	687b      	ldr	r3, [r7, #4]
    f8ba:	3304      	adds	r3, #4
    f8bc:	0018      	movs	r0, r3
    f8be:	4b0f      	ldr	r3, [pc, #60]	; (f8fc <prvCheckTasksWaitingTermination+0x58>)
    f8c0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    f8c2:	4b0f      	ldr	r3, [pc, #60]	; (f900 <prvCheckTasksWaitingTermination+0x5c>)
    f8c4:	681b      	ldr	r3, [r3, #0]
    f8c6:	1e5a      	subs	r2, r3, #1
    f8c8:	4b0d      	ldr	r3, [pc, #52]	; (f900 <prvCheckTasksWaitingTermination+0x5c>)
    f8ca:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    f8cc:	4b0d      	ldr	r3, [pc, #52]	; (f904 <prvCheckTasksWaitingTermination+0x60>)
    f8ce:	681b      	ldr	r3, [r3, #0]
    f8d0:	1e5a      	subs	r2, r3, #1
    f8d2:	4b0c      	ldr	r3, [pc, #48]	; (f904 <prvCheckTasksWaitingTermination+0x60>)
    f8d4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    f8d6:	4b0c      	ldr	r3, [pc, #48]	; (f908 <prvCheckTasksWaitingTermination+0x64>)
    f8d8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    f8da:	687b      	ldr	r3, [r7, #4]
    f8dc:	0018      	movs	r0, r3
    f8de:	4b0b      	ldr	r3, [pc, #44]	; (f90c <prvCheckTasksWaitingTermination+0x68>)
    f8e0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    f8e2:	4b08      	ldr	r3, [pc, #32]	; (f904 <prvCheckTasksWaitingTermination+0x60>)
    f8e4:	681b      	ldr	r3, [r3, #0]
    f8e6:	2b00      	cmp	r3, #0
    f8e8:	d1e0      	bne.n	f8ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    f8ea:	46c0      	nop			; (mov r8, r8)
    f8ec:	46bd      	mov	sp, r7
    f8ee:	b002      	add	sp, #8
    f8f0:	bd80      	pop	{r7, pc}
    f8f2:	46c0      	nop			; (mov r8, r8)
    f8f4:	0000de01 	.word	0x0000de01
    f8f8:	20000364 	.word	0x20000364
    f8fc:	0000e0a7 	.word	0x0000e0a7
    f900:	20000390 	.word	0x20000390
    f904:	20000378 	.word	0x20000378
    f908:	0000de25 	.word	0x0000de25
    f90c:	0000f911 	.word	0x0000f911

0000f910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    f910:	b580      	push	{r7, lr}
    f912:	b082      	sub	sp, #8
    f914:	af00      	add	r7, sp, #0
    f916:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    f918:	687b      	ldr	r3, [r7, #4]
    f91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f91c:	0018      	movs	r0, r3
    f91e:	4b05      	ldr	r3, [pc, #20]	; (f934 <prvDeleteTCB+0x24>)
    f920:	4798      	blx	r3
			vPortFree( pxTCB );
    f922:	687b      	ldr	r3, [r7, #4]
    f924:	0018      	movs	r0, r3
    f926:	4b03      	ldr	r3, [pc, #12]	; (f934 <prvDeleteTCB+0x24>)
    f928:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    f92a:	46c0      	nop			; (mov r8, r8)
    f92c:	46bd      	mov	sp, r7
    f92e:	b002      	add	sp, #8
    f930:	bd80      	pop	{r7, pc}
    f932:	46c0      	nop			; (mov r8, r8)
    f934:	0000df71 	.word	0x0000df71

0000f938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    f938:	b580      	push	{r7, lr}
    f93a:	b082      	sub	sp, #8
    f93c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    f93e:	4b0e      	ldr	r3, [pc, #56]	; (f978 <prvResetNextTaskUnblockTime+0x40>)
    f940:	681b      	ldr	r3, [r3, #0]
    f942:	681b      	ldr	r3, [r3, #0]
    f944:	2b00      	cmp	r3, #0
    f946:	d101      	bne.n	f94c <prvResetNextTaskUnblockTime+0x14>
    f948:	2301      	movs	r3, #1
    f94a:	e000      	b.n	f94e <prvResetNextTaskUnblockTime+0x16>
    f94c:	2300      	movs	r3, #0
    f94e:	2b00      	cmp	r3, #0
    f950:	d004      	beq.n	f95c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    f952:	4b0a      	ldr	r3, [pc, #40]	; (f97c <prvResetNextTaskUnblockTime+0x44>)
    f954:	2201      	movs	r2, #1
    f956:	4252      	negs	r2, r2
    f958:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    f95a:	e008      	b.n	f96e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    f95c:	4b06      	ldr	r3, [pc, #24]	; (f978 <prvResetNextTaskUnblockTime+0x40>)
    f95e:	681b      	ldr	r3, [r3, #0]
    f960:	68db      	ldr	r3, [r3, #12]
    f962:	68db      	ldr	r3, [r3, #12]
    f964:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    f966:	687b      	ldr	r3, [r7, #4]
    f968:	685a      	ldr	r2, [r3, #4]
    f96a:	4b04      	ldr	r3, [pc, #16]	; (f97c <prvResetNextTaskUnblockTime+0x44>)
    f96c:	601a      	str	r2, [r3, #0]
}
    f96e:	46c0      	nop			; (mov r8, r8)
    f970:	46bd      	mov	sp, r7
    f972:	b002      	add	sp, #8
    f974:	bd80      	pop	{r7, pc}
    f976:	46c0      	nop			; (mov r8, r8)
    f978:	20000348 	.word	0x20000348
    f97c:	200003b0 	.word	0x200003b0

0000f980 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    f980:	b580      	push	{r7, lr}
    f982:	b082      	sub	sp, #8
    f984:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    f986:	4b0a      	ldr	r3, [pc, #40]	; (f9b0 <xTaskGetSchedulerState+0x30>)
    f988:	681b      	ldr	r3, [r3, #0]
    f98a:	2b00      	cmp	r3, #0
    f98c:	d102      	bne.n	f994 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    f98e:	2301      	movs	r3, #1
    f990:	607b      	str	r3, [r7, #4]
    f992:	e008      	b.n	f9a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    f994:	4b07      	ldr	r3, [pc, #28]	; (f9b4 <xTaskGetSchedulerState+0x34>)
    f996:	681b      	ldr	r3, [r3, #0]
    f998:	2b00      	cmp	r3, #0
    f99a:	d102      	bne.n	f9a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    f99c:	2302      	movs	r3, #2
    f99e:	607b      	str	r3, [r7, #4]
    f9a0:	e001      	b.n	f9a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    f9a2:	2300      	movs	r3, #0
    f9a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    f9a6:	687b      	ldr	r3, [r7, #4]
	}
    f9a8:	0018      	movs	r0, r3
    f9aa:	46bd      	mov	sp, r7
    f9ac:	b002      	add	sp, #8
    f9ae:	bd80      	pop	{r7, pc}
    f9b0:	2000039c 	.word	0x2000039c
    f9b4:	200003b8 	.word	0x200003b8

0000f9b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    f9b8:	b580      	push	{r7, lr}
    f9ba:	b084      	sub	sp, #16
    f9bc:	af00      	add	r7, sp, #0
    f9be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    f9c0:	687b      	ldr	r3, [r7, #4]
    f9c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    f9c4:	2300      	movs	r3, #0
    f9c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    f9c8:	687b      	ldr	r3, [r7, #4]
    f9ca:	2b00      	cmp	r3, #0
    f9cc:	d056      	beq.n	fa7c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    f9ce:	68bb      	ldr	r3, [r7, #8]
    f9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f9d2:	4b2d      	ldr	r3, [pc, #180]	; (fa88 <xTaskPriorityInherit+0xd0>)
    f9d4:	681b      	ldr	r3, [r3, #0]
    f9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f9d8:	429a      	cmp	r2, r3
    f9da:	d246      	bcs.n	fa6a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    f9dc:	68bb      	ldr	r3, [r7, #8]
    f9de:	699b      	ldr	r3, [r3, #24]
    f9e0:	2b00      	cmp	r3, #0
    f9e2:	db06      	blt.n	f9f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f9e4:	4b28      	ldr	r3, [pc, #160]	; (fa88 <xTaskPriorityInherit+0xd0>)
    f9e6:	681b      	ldr	r3, [r3, #0]
    f9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f9ea:	2205      	movs	r2, #5
    f9ec:	1ad2      	subs	r2, r2, r3
    f9ee:	68bb      	ldr	r3, [r7, #8]
    f9f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    f9f2:	68bb      	ldr	r3, [r7, #8]
    f9f4:	6959      	ldr	r1, [r3, #20]
    f9f6:	68bb      	ldr	r3, [r7, #8]
    f9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f9fa:	0013      	movs	r3, r2
    f9fc:	009b      	lsls	r3, r3, #2
    f9fe:	189b      	adds	r3, r3, r2
    fa00:	009b      	lsls	r3, r3, #2
    fa02:	4a22      	ldr	r2, [pc, #136]	; (fa8c <xTaskPriorityInherit+0xd4>)
    fa04:	189b      	adds	r3, r3, r2
    fa06:	4299      	cmp	r1, r3
    fa08:	d101      	bne.n	fa0e <xTaskPriorityInherit+0x56>
    fa0a:	2301      	movs	r3, #1
    fa0c:	e000      	b.n	fa10 <xTaskPriorityInherit+0x58>
    fa0e:	2300      	movs	r3, #0
    fa10:	2b00      	cmp	r3, #0
    fa12:	d022      	beq.n	fa5a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fa14:	68bb      	ldr	r3, [r7, #8]
    fa16:	3304      	adds	r3, #4
    fa18:	0018      	movs	r0, r3
    fa1a:	4b1d      	ldr	r3, [pc, #116]	; (fa90 <xTaskPriorityInherit+0xd8>)
    fa1c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    fa1e:	4b1a      	ldr	r3, [pc, #104]	; (fa88 <xTaskPriorityInherit+0xd0>)
    fa20:	681b      	ldr	r3, [r3, #0]
    fa22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa24:	68bb      	ldr	r3, [r7, #8]
    fa26:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    fa28:	68bb      	ldr	r3, [r7, #8]
    fa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa2c:	4b19      	ldr	r3, [pc, #100]	; (fa94 <xTaskPriorityInherit+0xdc>)
    fa2e:	681b      	ldr	r3, [r3, #0]
    fa30:	429a      	cmp	r2, r3
    fa32:	d903      	bls.n	fa3c <xTaskPriorityInherit+0x84>
    fa34:	68bb      	ldr	r3, [r7, #8]
    fa36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa38:	4b16      	ldr	r3, [pc, #88]	; (fa94 <xTaskPriorityInherit+0xdc>)
    fa3a:	601a      	str	r2, [r3, #0]
    fa3c:	68bb      	ldr	r3, [r7, #8]
    fa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa40:	0013      	movs	r3, r2
    fa42:	009b      	lsls	r3, r3, #2
    fa44:	189b      	adds	r3, r3, r2
    fa46:	009b      	lsls	r3, r3, #2
    fa48:	4a10      	ldr	r2, [pc, #64]	; (fa8c <xTaskPriorityInherit+0xd4>)
    fa4a:	189a      	adds	r2, r3, r2
    fa4c:	68bb      	ldr	r3, [r7, #8]
    fa4e:	3304      	adds	r3, #4
    fa50:	0019      	movs	r1, r3
    fa52:	0010      	movs	r0, r2
    fa54:	4b10      	ldr	r3, [pc, #64]	; (fa98 <xTaskPriorityInherit+0xe0>)
    fa56:	4798      	blx	r3
    fa58:	e004      	b.n	fa64 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    fa5a:	4b0b      	ldr	r3, [pc, #44]	; (fa88 <xTaskPriorityInherit+0xd0>)
    fa5c:	681b      	ldr	r3, [r3, #0]
    fa5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fa60:	68bb      	ldr	r3, [r7, #8]
    fa62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    fa64:	2301      	movs	r3, #1
    fa66:	60fb      	str	r3, [r7, #12]
    fa68:	e008      	b.n	fa7c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    fa6a:	68bb      	ldr	r3, [r7, #8]
    fa6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    fa6e:	4b06      	ldr	r3, [pc, #24]	; (fa88 <xTaskPriorityInherit+0xd0>)
    fa70:	681b      	ldr	r3, [r3, #0]
    fa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fa74:	429a      	cmp	r2, r3
    fa76:	d201      	bcs.n	fa7c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    fa78:	2301      	movs	r3, #1
    fa7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    fa7c:	68fb      	ldr	r3, [r7, #12]
	}
    fa7e:	0018      	movs	r0, r3
    fa80:	46bd      	mov	sp, r7
    fa82:	b004      	add	sp, #16
    fa84:	bd80      	pop	{r7, pc}
    fa86:	46c0      	nop			; (mov r8, r8)
    fa88:	200002b8 	.word	0x200002b8
    fa8c:	200002bc 	.word	0x200002bc
    fa90:	0000e0a7 	.word	0x0000e0a7
    fa94:	20000398 	.word	0x20000398
    fa98:	0000dff7 	.word	0x0000dff7

0000fa9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    fa9c:	b580      	push	{r7, lr}
    fa9e:	b084      	sub	sp, #16
    faa0:	af00      	add	r7, sp, #0
    faa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    faa4:	687b      	ldr	r3, [r7, #4]
    faa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    faa8:	2300      	movs	r3, #0
    faaa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    faac:	687b      	ldr	r3, [r7, #4]
    faae:	2b00      	cmp	r3, #0
    fab0:	d044      	beq.n	fb3c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    fab2:	4b25      	ldr	r3, [pc, #148]	; (fb48 <xTaskPriorityDisinherit+0xac>)
    fab4:	681b      	ldr	r3, [r3, #0]
    fab6:	68ba      	ldr	r2, [r7, #8]
    fab8:	429a      	cmp	r2, r3
    faba:	d001      	beq.n	fac0 <xTaskPriorityDisinherit+0x24>
    fabc:	b672      	cpsid	i
    fabe:	e7fe      	b.n	fabe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    fac0:	68bb      	ldr	r3, [r7, #8]
    fac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fac4:	2b00      	cmp	r3, #0
    fac6:	d101      	bne.n	facc <xTaskPriorityDisinherit+0x30>
    fac8:	b672      	cpsid	i
    faca:	e7fe      	b.n	faca <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    facc:	68bb      	ldr	r3, [r7, #8]
    face:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fad0:	1e5a      	subs	r2, r3, #1
    fad2:	68bb      	ldr	r3, [r7, #8]
    fad4:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    fad6:	68bb      	ldr	r3, [r7, #8]
    fad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fada:	68bb      	ldr	r3, [r7, #8]
    fadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    fade:	429a      	cmp	r2, r3
    fae0:	d02c      	beq.n	fb3c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    fae2:	68bb      	ldr	r3, [r7, #8]
    fae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fae6:	2b00      	cmp	r3, #0
    fae8:	d128      	bne.n	fb3c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    faea:	68bb      	ldr	r3, [r7, #8]
    faec:	3304      	adds	r3, #4
    faee:	0018      	movs	r0, r3
    faf0:	4b16      	ldr	r3, [pc, #88]	; (fb4c <xTaskPriorityDisinherit+0xb0>)
    faf2:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    faf4:	68bb      	ldr	r3, [r7, #8]
    faf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    faf8:	68bb      	ldr	r3, [r7, #8]
    fafa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fafc:	68bb      	ldr	r3, [r7, #8]
    fafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fb00:	2205      	movs	r2, #5
    fb02:	1ad2      	subs	r2, r2, r3
    fb04:	68bb      	ldr	r3, [r7, #8]
    fb06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    fb08:	68bb      	ldr	r3, [r7, #8]
    fb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fb0c:	4b10      	ldr	r3, [pc, #64]	; (fb50 <xTaskPriorityDisinherit+0xb4>)
    fb0e:	681b      	ldr	r3, [r3, #0]
    fb10:	429a      	cmp	r2, r3
    fb12:	d903      	bls.n	fb1c <xTaskPriorityDisinherit+0x80>
    fb14:	68bb      	ldr	r3, [r7, #8]
    fb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fb18:	4b0d      	ldr	r3, [pc, #52]	; (fb50 <xTaskPriorityDisinherit+0xb4>)
    fb1a:	601a      	str	r2, [r3, #0]
    fb1c:	68bb      	ldr	r3, [r7, #8]
    fb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fb20:	0013      	movs	r3, r2
    fb22:	009b      	lsls	r3, r3, #2
    fb24:	189b      	adds	r3, r3, r2
    fb26:	009b      	lsls	r3, r3, #2
    fb28:	4a0a      	ldr	r2, [pc, #40]	; (fb54 <xTaskPriorityDisinherit+0xb8>)
    fb2a:	189a      	adds	r2, r3, r2
    fb2c:	68bb      	ldr	r3, [r7, #8]
    fb2e:	3304      	adds	r3, #4
    fb30:	0019      	movs	r1, r3
    fb32:	0010      	movs	r0, r2
    fb34:	4b08      	ldr	r3, [pc, #32]	; (fb58 <xTaskPriorityDisinherit+0xbc>)
    fb36:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    fb38:	2301      	movs	r3, #1
    fb3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    fb3c:	68fb      	ldr	r3, [r7, #12]
	}
    fb3e:	0018      	movs	r0, r3
    fb40:	46bd      	mov	sp, r7
    fb42:	b004      	add	sp, #16
    fb44:	bd80      	pop	{r7, pc}
    fb46:	46c0      	nop			; (mov r8, r8)
    fb48:	200002b8 	.word	0x200002b8
    fb4c:	0000e0a7 	.word	0x0000e0a7
    fb50:	20000398 	.word	0x20000398
    fb54:	200002bc 	.word	0x200002bc
    fb58:	0000dff7 	.word	0x0000dff7

0000fb5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    fb5c:	b580      	push	{r7, lr}
    fb5e:	b086      	sub	sp, #24
    fb60:	af00      	add	r7, sp, #0
    fb62:	6078      	str	r0, [r7, #4]
    fb64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    fb66:	687b      	ldr	r3, [r7, #4]
    fb68:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    fb6a:	2301      	movs	r3, #1
    fb6c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    fb6e:	687b      	ldr	r3, [r7, #4]
    fb70:	2b00      	cmp	r3, #0
    fb72:	d05d      	beq.n	fc30 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    fb74:	693b      	ldr	r3, [r7, #16]
    fb76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    fb78:	2b00      	cmp	r3, #0
    fb7a:	d101      	bne.n	fb80 <vTaskPriorityDisinheritAfterTimeout+0x24>
    fb7c:	b672      	cpsid	i
    fb7e:	e7fe      	b.n	fb7e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    fb80:	693b      	ldr	r3, [r7, #16]
    fb82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    fb84:	683b      	ldr	r3, [r7, #0]
    fb86:	429a      	cmp	r2, r3
    fb88:	d202      	bcs.n	fb90 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    fb8a:	683b      	ldr	r3, [r7, #0]
    fb8c:	617b      	str	r3, [r7, #20]
    fb8e:	e002      	b.n	fb96 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    fb90:	693b      	ldr	r3, [r7, #16]
    fb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    fb94:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    fb96:	693b      	ldr	r3, [r7, #16]
    fb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fb9a:	697b      	ldr	r3, [r7, #20]
    fb9c:	429a      	cmp	r2, r3
    fb9e:	d047      	beq.n	fc30 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    fba0:	693b      	ldr	r3, [r7, #16]
    fba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    fba4:	68fb      	ldr	r3, [r7, #12]
    fba6:	429a      	cmp	r2, r3
    fba8:	d142      	bne.n	fc30 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    fbaa:	4b23      	ldr	r3, [pc, #140]	; (fc38 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    fbac:	681b      	ldr	r3, [r3, #0]
    fbae:	693a      	ldr	r2, [r7, #16]
    fbb0:	429a      	cmp	r2, r3
    fbb2:	d101      	bne.n	fbb8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
    fbb4:	b672      	cpsid	i
    fbb6:	e7fe      	b.n	fbb6 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    fbb8:	693b      	ldr	r3, [r7, #16]
    fbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    fbbc:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    fbbe:	693b      	ldr	r3, [r7, #16]
    fbc0:	697a      	ldr	r2, [r7, #20]
    fbc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    fbc4:	693b      	ldr	r3, [r7, #16]
    fbc6:	699b      	ldr	r3, [r3, #24]
    fbc8:	2b00      	cmp	r3, #0
    fbca:	db04      	blt.n	fbd6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    fbcc:	697b      	ldr	r3, [r7, #20]
    fbce:	2205      	movs	r2, #5
    fbd0:	1ad2      	subs	r2, r2, r3
    fbd2:	693b      	ldr	r3, [r7, #16]
    fbd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    fbd6:	693b      	ldr	r3, [r7, #16]
    fbd8:	6959      	ldr	r1, [r3, #20]
    fbda:	68ba      	ldr	r2, [r7, #8]
    fbdc:	0013      	movs	r3, r2
    fbde:	009b      	lsls	r3, r3, #2
    fbe0:	189b      	adds	r3, r3, r2
    fbe2:	009b      	lsls	r3, r3, #2
    fbe4:	4a15      	ldr	r2, [pc, #84]	; (fc3c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    fbe6:	189b      	adds	r3, r3, r2
    fbe8:	4299      	cmp	r1, r3
    fbea:	d101      	bne.n	fbf0 <vTaskPriorityDisinheritAfterTimeout+0x94>
    fbec:	2301      	movs	r3, #1
    fbee:	e000      	b.n	fbf2 <vTaskPriorityDisinheritAfterTimeout+0x96>
    fbf0:	2300      	movs	r3, #0
    fbf2:	2b00      	cmp	r3, #0
    fbf4:	d01c      	beq.n	fc30 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fbf6:	693b      	ldr	r3, [r7, #16]
    fbf8:	3304      	adds	r3, #4
    fbfa:	0018      	movs	r0, r3
    fbfc:	4b10      	ldr	r3, [pc, #64]	; (fc40 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    fbfe:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    fc00:	693b      	ldr	r3, [r7, #16]
    fc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fc04:	4b0f      	ldr	r3, [pc, #60]	; (fc44 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    fc06:	681b      	ldr	r3, [r3, #0]
    fc08:	429a      	cmp	r2, r3
    fc0a:	d903      	bls.n	fc14 <vTaskPriorityDisinheritAfterTimeout+0xb8>
    fc0c:	693b      	ldr	r3, [r7, #16]
    fc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fc10:	4b0c      	ldr	r3, [pc, #48]	; (fc44 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    fc12:	601a      	str	r2, [r3, #0]
    fc14:	693b      	ldr	r3, [r7, #16]
    fc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fc18:	0013      	movs	r3, r2
    fc1a:	009b      	lsls	r3, r3, #2
    fc1c:	189b      	adds	r3, r3, r2
    fc1e:	009b      	lsls	r3, r3, #2
    fc20:	4a06      	ldr	r2, [pc, #24]	; (fc3c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    fc22:	189a      	adds	r2, r3, r2
    fc24:	693b      	ldr	r3, [r7, #16]
    fc26:	3304      	adds	r3, #4
    fc28:	0019      	movs	r1, r3
    fc2a:	0010      	movs	r0, r2
    fc2c:	4b06      	ldr	r3, [pc, #24]	; (fc48 <vTaskPriorityDisinheritAfterTimeout+0xec>)
    fc2e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    fc30:	46c0      	nop			; (mov r8, r8)
    fc32:	46bd      	mov	sp, r7
    fc34:	b006      	add	sp, #24
    fc36:	bd80      	pop	{r7, pc}
    fc38:	200002b8 	.word	0x200002b8
    fc3c:	200002bc 	.word	0x200002bc
    fc40:	0000e0a7 	.word	0x0000e0a7
    fc44:	20000398 	.word	0x20000398
    fc48:	0000dff7 	.word	0x0000dff7

0000fc4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    fc4c:	b580      	push	{r7, lr}
    fc4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    fc50:	4b06      	ldr	r3, [pc, #24]	; (fc6c <pvTaskIncrementMutexHeldCount+0x20>)
    fc52:	681b      	ldr	r3, [r3, #0]
    fc54:	2b00      	cmp	r3, #0
    fc56:	d004      	beq.n	fc62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    fc58:	4b04      	ldr	r3, [pc, #16]	; (fc6c <pvTaskIncrementMutexHeldCount+0x20>)
    fc5a:	681b      	ldr	r3, [r3, #0]
    fc5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    fc5e:	3201      	adds	r2, #1
    fc60:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    fc62:	4b02      	ldr	r3, [pc, #8]	; (fc6c <pvTaskIncrementMutexHeldCount+0x20>)
    fc64:	681b      	ldr	r3, [r3, #0]
	}
    fc66:	0018      	movs	r0, r3
    fc68:	46bd      	mov	sp, r7
    fc6a:	bd80      	pop	{r7, pc}
    fc6c:	200002b8 	.word	0x200002b8

0000fc70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    fc70:	b580      	push	{r7, lr}
    fc72:	b084      	sub	sp, #16
    fc74:	af00      	add	r7, sp, #0
    fc76:	6078      	str	r0, [r7, #4]
    fc78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    fc7a:	4b21      	ldr	r3, [pc, #132]	; (fd00 <prvAddCurrentTaskToDelayedList+0x90>)
    fc7c:	681b      	ldr	r3, [r3, #0]
    fc7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    fc80:	4b20      	ldr	r3, [pc, #128]	; (fd04 <prvAddCurrentTaskToDelayedList+0x94>)
    fc82:	681b      	ldr	r3, [r3, #0]
    fc84:	3304      	adds	r3, #4
    fc86:	0018      	movs	r0, r3
    fc88:	4b1f      	ldr	r3, [pc, #124]	; (fd08 <prvAddCurrentTaskToDelayedList+0x98>)
    fc8a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    fc8c:	687b      	ldr	r3, [r7, #4]
    fc8e:	3301      	adds	r3, #1
    fc90:	d10b      	bne.n	fcaa <prvAddCurrentTaskToDelayedList+0x3a>
    fc92:	683b      	ldr	r3, [r7, #0]
    fc94:	2b00      	cmp	r3, #0
    fc96:	d008      	beq.n	fcaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    fc98:	4b1a      	ldr	r3, [pc, #104]	; (fd04 <prvAddCurrentTaskToDelayedList+0x94>)
    fc9a:	681b      	ldr	r3, [r3, #0]
    fc9c:	1d1a      	adds	r2, r3, #4
    fc9e:	4b1b      	ldr	r3, [pc, #108]	; (fd0c <prvAddCurrentTaskToDelayedList+0x9c>)
    fca0:	0011      	movs	r1, r2
    fca2:	0018      	movs	r0, r3
    fca4:	4b1a      	ldr	r3, [pc, #104]	; (fd10 <prvAddCurrentTaskToDelayedList+0xa0>)
    fca6:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    fca8:	e026      	b.n	fcf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    fcaa:	68fa      	ldr	r2, [r7, #12]
    fcac:	687b      	ldr	r3, [r7, #4]
    fcae:	18d3      	adds	r3, r2, r3
    fcb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    fcb2:	4b14      	ldr	r3, [pc, #80]	; (fd04 <prvAddCurrentTaskToDelayedList+0x94>)
    fcb4:	681b      	ldr	r3, [r3, #0]
    fcb6:	68ba      	ldr	r2, [r7, #8]
    fcb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    fcba:	68ba      	ldr	r2, [r7, #8]
    fcbc:	68fb      	ldr	r3, [r7, #12]
    fcbe:	429a      	cmp	r2, r3
    fcc0:	d209      	bcs.n	fcd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    fcc2:	4b14      	ldr	r3, [pc, #80]	; (fd14 <prvAddCurrentTaskToDelayedList+0xa4>)
    fcc4:	681a      	ldr	r2, [r3, #0]
    fcc6:	4b0f      	ldr	r3, [pc, #60]	; (fd04 <prvAddCurrentTaskToDelayedList+0x94>)
    fcc8:	681b      	ldr	r3, [r3, #0]
    fcca:	3304      	adds	r3, #4
    fccc:	0019      	movs	r1, r3
    fcce:	0010      	movs	r0, r2
    fcd0:	4b11      	ldr	r3, [pc, #68]	; (fd18 <prvAddCurrentTaskToDelayedList+0xa8>)
    fcd2:	4798      	blx	r3
}
    fcd4:	e010      	b.n	fcf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    fcd6:	4b11      	ldr	r3, [pc, #68]	; (fd1c <prvAddCurrentTaskToDelayedList+0xac>)
    fcd8:	681a      	ldr	r2, [r3, #0]
    fcda:	4b0a      	ldr	r3, [pc, #40]	; (fd04 <prvAddCurrentTaskToDelayedList+0x94>)
    fcdc:	681b      	ldr	r3, [r3, #0]
    fcde:	3304      	adds	r3, #4
    fce0:	0019      	movs	r1, r3
    fce2:	0010      	movs	r0, r2
    fce4:	4b0c      	ldr	r3, [pc, #48]	; (fd18 <prvAddCurrentTaskToDelayedList+0xa8>)
    fce6:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    fce8:	4b0d      	ldr	r3, [pc, #52]	; (fd20 <prvAddCurrentTaskToDelayedList+0xb0>)
    fcea:	681b      	ldr	r3, [r3, #0]
    fcec:	68ba      	ldr	r2, [r7, #8]
    fcee:	429a      	cmp	r2, r3
    fcf0:	d202      	bcs.n	fcf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    fcf2:	4b0b      	ldr	r3, [pc, #44]	; (fd20 <prvAddCurrentTaskToDelayedList+0xb0>)
    fcf4:	68ba      	ldr	r2, [r7, #8]
    fcf6:	601a      	str	r2, [r3, #0]
}
    fcf8:	46c0      	nop			; (mov r8, r8)
    fcfa:	46bd      	mov	sp, r7
    fcfc:	b004      	add	sp, #16
    fcfe:	bd80      	pop	{r7, pc}
    fd00:	20000394 	.word	0x20000394
    fd04:	200002b8 	.word	0x200002b8
    fd08:	0000e0a7 	.word	0x0000e0a7
    fd0c:	2000037c 	.word	0x2000037c
    fd10:	0000dff7 	.word	0x0000dff7
    fd14:	2000034c 	.word	0x2000034c
    fd18:	0000e03b 	.word	0x0000e03b
    fd1c:	20000348 	.word	0x20000348
    fd20:	200003b0 	.word	0x200003b0

0000fd24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    fd24:	b590      	push	{r4, r7, lr}
    fd26:	b085      	sub	sp, #20
    fd28:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    fd2a:	2300      	movs	r3, #0
    fd2c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    fd2e:	4b0e      	ldr	r3, [pc, #56]	; (fd68 <xTimerCreateTimerTask+0x44>)
    fd30:	4798      	blx	r3

	if( xTimerQueue != NULL )
    fd32:	4b0e      	ldr	r3, [pc, #56]	; (fd6c <xTimerCreateTimerTask+0x48>)
    fd34:	681b      	ldr	r3, [r3, #0]
    fd36:	2b00      	cmp	r3, #0
    fd38:	d00c      	beq.n	fd54 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    fd3a:	2382      	movs	r3, #130	; 0x82
    fd3c:	005a      	lsls	r2, r3, #1
    fd3e:	490c      	ldr	r1, [pc, #48]	; (fd70 <xTimerCreateTimerTask+0x4c>)
    fd40:	480c      	ldr	r0, [pc, #48]	; (fd74 <xTimerCreateTimerTask+0x50>)
    fd42:	4b0d      	ldr	r3, [pc, #52]	; (fd78 <xTimerCreateTimerTask+0x54>)
    fd44:	9301      	str	r3, [sp, #4]
    fd46:	2304      	movs	r3, #4
    fd48:	9300      	str	r3, [sp, #0]
    fd4a:	2300      	movs	r3, #0
    fd4c:	4c0b      	ldr	r4, [pc, #44]	; (fd7c <xTimerCreateTimerTask+0x58>)
    fd4e:	47a0      	blx	r4
    fd50:	0003      	movs	r3, r0
    fd52:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    fd54:	687b      	ldr	r3, [r7, #4]
    fd56:	2b00      	cmp	r3, #0
    fd58:	d101      	bne.n	fd5e <xTimerCreateTimerTask+0x3a>
    fd5a:	b672      	cpsid	i
    fd5c:	e7fe      	b.n	fd5c <xTimerCreateTimerTask+0x38>
	return xReturn;
    fd5e:	687b      	ldr	r3, [r7, #4]
}
    fd60:	0018      	movs	r0, r3
    fd62:	46bd      	mov	sp, r7
    fd64:	b003      	add	sp, #12
    fd66:	bd90      	pop	{r4, r7, pc}
    fd68:	00010335 	.word	0x00010335
    fd6c:	200003ec 	.word	0x200003ec
    fd70:	00019868 	.word	0x00019868
    fd74:	0000ff49 	.word	0x0000ff49
    fd78:	200003f0 	.word	0x200003f0
    fd7c:	0000ecd9 	.word	0x0000ecd9

0000fd80 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
    fd80:	b590      	push	{r4, r7, lr}
    fd82:	b089      	sub	sp, #36	; 0x24
    fd84:	af02      	add	r7, sp, #8
    fd86:	60f8      	str	r0, [r7, #12]
    fd88:	60b9      	str	r1, [r7, #8]
    fd8a:	607a      	str	r2, [r7, #4]
    fd8c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    fd8e:	2028      	movs	r0, #40	; 0x28
    fd90:	4b0b      	ldr	r3, [pc, #44]	; (fdc0 <xTimerCreate+0x40>)
    fd92:	4798      	blx	r3
    fd94:	0003      	movs	r3, r0
    fd96:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
    fd98:	697b      	ldr	r3, [r7, #20]
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	d00a      	beq.n	fdb4 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    fd9e:	683c      	ldr	r4, [r7, #0]
    fda0:	687a      	ldr	r2, [r7, #4]
    fda2:	68b9      	ldr	r1, [r7, #8]
    fda4:	68f8      	ldr	r0, [r7, #12]
    fda6:	697b      	ldr	r3, [r7, #20]
    fda8:	9301      	str	r3, [sp, #4]
    fdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fdac:	9300      	str	r3, [sp, #0]
    fdae:	0023      	movs	r3, r4
    fdb0:	4c04      	ldr	r4, [pc, #16]	; (fdc4 <xTimerCreate+0x44>)
    fdb2:	47a0      	blx	r4
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
    fdb4:	697b      	ldr	r3, [r7, #20]
	}
    fdb6:	0018      	movs	r0, r3
    fdb8:	46bd      	mov	sp, r7
    fdba:	b007      	add	sp, #28
    fdbc:	bd90      	pop	{r4, r7, pc}
    fdbe:	46c0      	nop			; (mov r8, r8)
    fdc0:	0000df3d 	.word	0x0000df3d
    fdc4:	0000fdc9 	.word	0x0000fdc9

0000fdc8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
    fdc8:	b580      	push	{r7, lr}
    fdca:	b084      	sub	sp, #16
    fdcc:	af00      	add	r7, sp, #0
    fdce:	60f8      	str	r0, [r7, #12]
    fdd0:	60b9      	str	r1, [r7, #8]
    fdd2:	607a      	str	r2, [r7, #4]
    fdd4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    fdd6:	68bb      	ldr	r3, [r7, #8]
    fdd8:	2b00      	cmp	r3, #0
    fdda:	d101      	bne.n	fde0 <prvInitialiseNewTimer+0x18>
    fddc:	b672      	cpsid	i
    fdde:	e7fe      	b.n	fdde <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
    fde0:	69fb      	ldr	r3, [r7, #28]
    fde2:	2b00      	cmp	r3, #0
    fde4:	d015      	beq.n	fe12 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
    fde6:	4b0d      	ldr	r3, [pc, #52]	; (fe1c <prvInitialiseNewTimer+0x54>)
    fde8:	4798      	blx	r3

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
    fdea:	69fb      	ldr	r3, [r7, #28]
    fdec:	68fa      	ldr	r2, [r7, #12]
    fdee:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    fdf0:	69fb      	ldr	r3, [r7, #28]
    fdf2:	68ba      	ldr	r2, [r7, #8]
    fdf4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
    fdf6:	69fb      	ldr	r3, [r7, #28]
    fdf8:	687a      	ldr	r2, [r7, #4]
    fdfa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
    fdfc:	69fb      	ldr	r3, [r7, #28]
    fdfe:	683a      	ldr	r2, [r7, #0]
    fe00:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    fe02:	69fb      	ldr	r3, [r7, #28]
    fe04:	69ba      	ldr	r2, [r7, #24]
    fe06:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    fe08:	69fb      	ldr	r3, [r7, #28]
    fe0a:	3304      	adds	r3, #4
    fe0c:	0018      	movs	r0, r3
    fe0e:	4b04      	ldr	r3, [pc, #16]	; (fe20 <prvInitialiseNewTimer+0x58>)
    fe10:	4798      	blx	r3
		traceTIMER_CREATE( pxNewTimer );
	}
}
    fe12:	46c0      	nop			; (mov r8, r8)
    fe14:	46bd      	mov	sp, r7
    fe16:	b004      	add	sp, #16
    fe18:	bd80      	pop	{r7, pc}
    fe1a:	46c0      	nop			; (mov r8, r8)
    fe1c:	00010335 	.word	0x00010335
    fe20:	0000dfe1 	.word	0x0000dfe1

0000fe24 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    fe24:	b590      	push	{r4, r7, lr}
    fe26:	b08b      	sub	sp, #44	; 0x2c
    fe28:	af00      	add	r7, sp, #0
    fe2a:	60f8      	str	r0, [r7, #12]
    fe2c:	60b9      	str	r1, [r7, #8]
    fe2e:	607a      	str	r2, [r7, #4]
    fe30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    fe32:	2300      	movs	r3, #0
    fe34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    fe36:	68fb      	ldr	r3, [r7, #12]
    fe38:	2b00      	cmp	r3, #0
    fe3a:	d101      	bne.n	fe40 <xTimerGenericCommand+0x1c>
    fe3c:	b672      	cpsid	i
    fe3e:	e7fe      	b.n	fe3e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    fe40:	4b1e      	ldr	r3, [pc, #120]	; (febc <xTimerGenericCommand+0x98>)
    fe42:	681b      	ldr	r3, [r3, #0]
    fe44:	2b00      	cmp	r3, #0
    fe46:	d033      	beq.n	feb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    fe48:	2314      	movs	r3, #20
    fe4a:	18fb      	adds	r3, r7, r3
    fe4c:	68ba      	ldr	r2, [r7, #8]
    fe4e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    fe50:	2314      	movs	r3, #20
    fe52:	18fb      	adds	r3, r7, r3
    fe54:	687a      	ldr	r2, [r7, #4]
    fe56:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    fe58:	2314      	movs	r3, #20
    fe5a:	18fb      	adds	r3, r7, r3
    fe5c:	68fa      	ldr	r2, [r7, #12]
    fe5e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    fe60:	68bb      	ldr	r3, [r7, #8]
    fe62:	2b05      	cmp	r3, #5
    fe64:	dc1a      	bgt.n	fe9c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    fe66:	4b16      	ldr	r3, [pc, #88]	; (fec0 <xTimerGenericCommand+0x9c>)
    fe68:	4798      	blx	r3
    fe6a:	0003      	movs	r3, r0
    fe6c:	2b02      	cmp	r3, #2
    fe6e:	d10a      	bne.n	fe86 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    fe70:	4b12      	ldr	r3, [pc, #72]	; (febc <xTimerGenericCommand+0x98>)
    fe72:	6818      	ldr	r0, [r3, #0]
    fe74:	6bba      	ldr	r2, [r7, #56]	; 0x38
    fe76:	2314      	movs	r3, #20
    fe78:	18f9      	adds	r1, r7, r3
    fe7a:	2300      	movs	r3, #0
    fe7c:	4c11      	ldr	r4, [pc, #68]	; (fec4 <xTimerGenericCommand+0xa0>)
    fe7e:	47a0      	blx	r4
    fe80:	0003      	movs	r3, r0
    fe82:	627b      	str	r3, [r7, #36]	; 0x24
    fe84:	e014      	b.n	feb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    fe86:	4b0d      	ldr	r3, [pc, #52]	; (febc <xTimerGenericCommand+0x98>)
    fe88:	6818      	ldr	r0, [r3, #0]
    fe8a:	2314      	movs	r3, #20
    fe8c:	18f9      	adds	r1, r7, r3
    fe8e:	2300      	movs	r3, #0
    fe90:	2200      	movs	r2, #0
    fe92:	4c0c      	ldr	r4, [pc, #48]	; (fec4 <xTimerGenericCommand+0xa0>)
    fe94:	47a0      	blx	r4
    fe96:	0003      	movs	r3, r0
    fe98:	627b      	str	r3, [r7, #36]	; 0x24
    fe9a:	e009      	b.n	feb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    fe9c:	4b07      	ldr	r3, [pc, #28]	; (febc <xTimerGenericCommand+0x98>)
    fe9e:	6818      	ldr	r0, [r3, #0]
    fea0:	683a      	ldr	r2, [r7, #0]
    fea2:	2314      	movs	r3, #20
    fea4:	18f9      	adds	r1, r7, r3
    fea6:	2300      	movs	r3, #0
    fea8:	4c07      	ldr	r4, [pc, #28]	; (fec8 <xTimerGenericCommand+0xa4>)
    feaa:	47a0      	blx	r4
    feac:	0003      	movs	r3, r0
    feae:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    feb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    feb2:	0018      	movs	r0, r3
    feb4:	46bd      	mov	sp, r7
    feb6:	b00b      	add	sp, #44	; 0x2c
    feb8:	bd90      	pop	{r4, r7, pc}
    feba:	46c0      	nop			; (mov r8, r8)
    febc:	200003ec 	.word	0x200003ec
    fec0:	0000f981 	.word	0x0000f981
    fec4:	0000e271 	.word	0x0000e271
    fec8:	0000e451 	.word	0x0000e451

0000fecc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    fecc:	b590      	push	{r4, r7, lr}
    fece:	b087      	sub	sp, #28
    fed0:	af02      	add	r7, sp, #8
    fed2:	6078      	str	r0, [r7, #4]
    fed4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    fed6:	4b18      	ldr	r3, [pc, #96]	; (ff38 <prvProcessExpiredTimer+0x6c>)
    fed8:	681b      	ldr	r3, [r3, #0]
    feda:	68db      	ldr	r3, [r3, #12]
    fedc:	68db      	ldr	r3, [r3, #12]
    fede:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    fee0:	68fb      	ldr	r3, [r7, #12]
    fee2:	3304      	adds	r3, #4
    fee4:	0018      	movs	r0, r3
    fee6:	4b15      	ldr	r3, [pc, #84]	; (ff3c <prvProcessExpiredTimer+0x70>)
    fee8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    feea:	68fb      	ldr	r3, [r7, #12]
    feec:	69db      	ldr	r3, [r3, #28]
    feee:	2b01      	cmp	r3, #1
    fef0:	d119      	bne.n	ff26 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    fef2:	68fb      	ldr	r3, [r7, #12]
    fef4:	699a      	ldr	r2, [r3, #24]
    fef6:	687b      	ldr	r3, [r7, #4]
    fef8:	18d1      	adds	r1, r2, r3
    fefa:	687b      	ldr	r3, [r7, #4]
    fefc:	683a      	ldr	r2, [r7, #0]
    fefe:	68f8      	ldr	r0, [r7, #12]
    ff00:	4c0f      	ldr	r4, [pc, #60]	; (ff40 <prvProcessExpiredTimer+0x74>)
    ff02:	47a0      	blx	r4
    ff04:	1e03      	subs	r3, r0, #0
    ff06:	d00e      	beq.n	ff26 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    ff08:	687a      	ldr	r2, [r7, #4]
    ff0a:	68f8      	ldr	r0, [r7, #12]
    ff0c:	2300      	movs	r3, #0
    ff0e:	9300      	str	r3, [sp, #0]
    ff10:	2300      	movs	r3, #0
    ff12:	2100      	movs	r1, #0
    ff14:	4c0b      	ldr	r4, [pc, #44]	; (ff44 <prvProcessExpiredTimer+0x78>)
    ff16:	47a0      	blx	r4
    ff18:	0003      	movs	r3, r0
    ff1a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    ff1c:	68bb      	ldr	r3, [r7, #8]
    ff1e:	2b00      	cmp	r3, #0
    ff20:	d101      	bne.n	ff26 <prvProcessExpiredTimer+0x5a>
    ff22:	b672      	cpsid	i
    ff24:	e7fe      	b.n	ff24 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    ff26:	68fb      	ldr	r3, [r7, #12]
    ff28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ff2a:	68fa      	ldr	r2, [r7, #12]
    ff2c:	0010      	movs	r0, r2
    ff2e:	4798      	blx	r3
}
    ff30:	46c0      	nop			; (mov r8, r8)
    ff32:	46bd      	mov	sp, r7
    ff34:	b005      	add	sp, #20
    ff36:	bd90      	pop	{r4, r7, pc}
    ff38:	200003e4 	.word	0x200003e4
    ff3c:	0000e0a7 	.word	0x0000e0a7
    ff40:	000100a9 	.word	0x000100a9
    ff44:	0000fe25 	.word	0x0000fe25

0000ff48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    ff48:	b580      	push	{r7, lr}
    ff4a:	b084      	sub	sp, #16
    ff4c:	af00      	add	r7, sp, #0
    ff4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    ff50:	2308      	movs	r3, #8
    ff52:	18fb      	adds	r3, r7, r3
    ff54:	0018      	movs	r0, r3
    ff56:	4b06      	ldr	r3, [pc, #24]	; (ff70 <prvTimerTask+0x28>)
    ff58:	4798      	blx	r3
    ff5a:	0003      	movs	r3, r0
    ff5c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    ff5e:	68ba      	ldr	r2, [r7, #8]
    ff60:	68fb      	ldr	r3, [r7, #12]
    ff62:	0011      	movs	r1, r2
    ff64:	0018      	movs	r0, r3
    ff66:	4b03      	ldr	r3, [pc, #12]	; (ff74 <prvTimerTask+0x2c>)
    ff68:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    ff6a:	4b03      	ldr	r3, [pc, #12]	; (ff78 <prvTimerTask+0x30>)
    ff6c:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    ff6e:	e7ef      	b.n	ff50 <prvTimerTask+0x8>
    ff70:	00010021 	.word	0x00010021
    ff74:	0000ff7d 	.word	0x0000ff7d
    ff78:	00010131 	.word	0x00010131

0000ff7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    ff7c:	b580      	push	{r7, lr}
    ff7e:	b084      	sub	sp, #16
    ff80:	af00      	add	r7, sp, #0
    ff82:	6078      	str	r0, [r7, #4]
    ff84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    ff86:	4b1e      	ldr	r3, [pc, #120]	; (10000 <prvProcessTimerOrBlockTask+0x84>)
    ff88:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    ff8a:	2308      	movs	r3, #8
    ff8c:	18fb      	adds	r3, r7, r3
    ff8e:	0018      	movs	r0, r3
    ff90:	4b1c      	ldr	r3, [pc, #112]	; (10004 <prvProcessTimerOrBlockTask+0x88>)
    ff92:	4798      	blx	r3
    ff94:	0003      	movs	r3, r0
    ff96:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    ff98:	68bb      	ldr	r3, [r7, #8]
    ff9a:	2b00      	cmp	r3, #0
    ff9c:	d129      	bne.n	fff2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    ff9e:	683b      	ldr	r3, [r7, #0]
    ffa0:	2b00      	cmp	r3, #0
    ffa2:	d10c      	bne.n	ffbe <prvProcessTimerOrBlockTask+0x42>
    ffa4:	687a      	ldr	r2, [r7, #4]
    ffa6:	68fb      	ldr	r3, [r7, #12]
    ffa8:	429a      	cmp	r2, r3
    ffaa:	d808      	bhi.n	ffbe <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    ffac:	4b16      	ldr	r3, [pc, #88]	; (10008 <prvProcessTimerOrBlockTask+0x8c>)
    ffae:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    ffb0:	68fa      	ldr	r2, [r7, #12]
    ffb2:	687b      	ldr	r3, [r7, #4]
    ffb4:	0011      	movs	r1, r2
    ffb6:	0018      	movs	r0, r3
    ffb8:	4b14      	ldr	r3, [pc, #80]	; (1000c <prvProcessTimerOrBlockTask+0x90>)
    ffba:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    ffbc:	e01b      	b.n	fff6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    ffbe:	683b      	ldr	r3, [r7, #0]
    ffc0:	2b00      	cmp	r3, #0
    ffc2:	d006      	beq.n	ffd2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    ffc4:	4b12      	ldr	r3, [pc, #72]	; (10010 <prvProcessTimerOrBlockTask+0x94>)
    ffc6:	681b      	ldr	r3, [r3, #0]
    ffc8:	681b      	ldr	r3, [r3, #0]
    ffca:	425a      	negs	r2, r3
    ffcc:	4153      	adcs	r3, r2
    ffce:	b2db      	uxtb	r3, r3
    ffd0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    ffd2:	4b10      	ldr	r3, [pc, #64]	; (10014 <prvProcessTimerOrBlockTask+0x98>)
    ffd4:	6818      	ldr	r0, [r3, #0]
    ffd6:	687a      	ldr	r2, [r7, #4]
    ffd8:	68fb      	ldr	r3, [r7, #12]
    ffda:	1ad3      	subs	r3, r2, r3
    ffdc:	683a      	ldr	r2, [r7, #0]
    ffde:	0019      	movs	r1, r3
    ffe0:	4b0d      	ldr	r3, [pc, #52]	; (10018 <prvProcessTimerOrBlockTask+0x9c>)
    ffe2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    ffe4:	4b08      	ldr	r3, [pc, #32]	; (10008 <prvProcessTimerOrBlockTask+0x8c>)
    ffe6:	4798      	blx	r3
    ffe8:	1e03      	subs	r3, r0, #0
    ffea:	d104      	bne.n	fff6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    ffec:	4b0b      	ldr	r3, [pc, #44]	; (1001c <prvProcessTimerOrBlockTask+0xa0>)
    ffee:	4798      	blx	r3
}
    fff0:	e001      	b.n	fff6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    fff2:	4b05      	ldr	r3, [pc, #20]	; (10008 <prvProcessTimerOrBlockTask+0x8c>)
    fff4:	4798      	blx	r3
}
    fff6:	46c0      	nop			; (mov r8, r8)
    fff8:	46bd      	mov	sp, r7
    fffa:	b004      	add	sp, #16
    fffc:	bd80      	pop	{r7, pc}
    fffe:	46c0      	nop			; (mov r8, r8)
   10000:	0000f231 	.word	0x0000f231
   10004:	00010061 	.word	0x00010061
   10008:	0000f249 	.word	0x0000f249
   1000c:	0000fecd 	.word	0x0000fecd
   10010:	200003e8 	.word	0x200003e8
   10014:	200003ec 	.word	0x200003ec
   10018:	0000ebbd 	.word	0x0000ebbd
   1001c:	0000dde1 	.word	0x0000dde1

00010020 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   10020:	b580      	push	{r7, lr}
   10022:	b084      	sub	sp, #16
   10024:	af00      	add	r7, sp, #0
   10026:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   10028:	4b0c      	ldr	r3, [pc, #48]	; (1005c <prvGetNextExpireTime+0x3c>)
   1002a:	681b      	ldr	r3, [r3, #0]
   1002c:	681b      	ldr	r3, [r3, #0]
   1002e:	425a      	negs	r2, r3
   10030:	4153      	adcs	r3, r2
   10032:	b2db      	uxtb	r3, r3
   10034:	001a      	movs	r2, r3
   10036:	687b      	ldr	r3, [r7, #4]
   10038:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1003a:	687b      	ldr	r3, [r7, #4]
   1003c:	681b      	ldr	r3, [r3, #0]
   1003e:	2b00      	cmp	r3, #0
   10040:	d105      	bne.n	1004e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   10042:	4b06      	ldr	r3, [pc, #24]	; (1005c <prvGetNextExpireTime+0x3c>)
   10044:	681b      	ldr	r3, [r3, #0]
   10046:	68db      	ldr	r3, [r3, #12]
   10048:	681b      	ldr	r3, [r3, #0]
   1004a:	60fb      	str	r3, [r7, #12]
   1004c:	e001      	b.n	10052 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1004e:	2300      	movs	r3, #0
   10050:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   10052:	68fb      	ldr	r3, [r7, #12]
}
   10054:	0018      	movs	r0, r3
   10056:	46bd      	mov	sp, r7
   10058:	b004      	add	sp, #16
   1005a:	bd80      	pop	{r7, pc}
   1005c:	200003e4 	.word	0x200003e4

00010060 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   10060:	b580      	push	{r7, lr}
   10062:	b084      	sub	sp, #16
   10064:	af00      	add	r7, sp, #0
   10066:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   10068:	4b0c      	ldr	r3, [pc, #48]	; (1009c <prvSampleTimeNow+0x3c>)
   1006a:	4798      	blx	r3
   1006c:	0003      	movs	r3, r0
   1006e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   10070:	4b0b      	ldr	r3, [pc, #44]	; (100a0 <prvSampleTimeNow+0x40>)
   10072:	681b      	ldr	r3, [r3, #0]
   10074:	68fa      	ldr	r2, [r7, #12]
   10076:	429a      	cmp	r2, r3
   10078:	d205      	bcs.n	10086 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1007a:	4b0a      	ldr	r3, [pc, #40]	; (100a4 <prvSampleTimeNow+0x44>)
   1007c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1007e:	687b      	ldr	r3, [r7, #4]
   10080:	2201      	movs	r2, #1
   10082:	601a      	str	r2, [r3, #0]
   10084:	e002      	b.n	1008c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   10086:	687b      	ldr	r3, [r7, #4]
   10088:	2200      	movs	r2, #0
   1008a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1008c:	4b04      	ldr	r3, [pc, #16]	; (100a0 <prvSampleTimeNow+0x40>)
   1008e:	68fa      	ldr	r2, [r7, #12]
   10090:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   10092:	68fb      	ldr	r3, [r7, #12]
}
   10094:	0018      	movs	r0, r3
   10096:	46bd      	mov	sp, r7
   10098:	b004      	add	sp, #16
   1009a:	bd80      	pop	{r7, pc}
   1009c:	0000f37d 	.word	0x0000f37d
   100a0:	200003f4 	.word	0x200003f4
   100a4:	00010275 	.word	0x00010275

000100a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   100a8:	b580      	push	{r7, lr}
   100aa:	b086      	sub	sp, #24
   100ac:	af00      	add	r7, sp, #0
   100ae:	60f8      	str	r0, [r7, #12]
   100b0:	60b9      	str	r1, [r7, #8]
   100b2:	607a      	str	r2, [r7, #4]
   100b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   100b6:	2300      	movs	r3, #0
   100b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   100ba:	68fb      	ldr	r3, [r7, #12]
   100bc:	68ba      	ldr	r2, [r7, #8]
   100be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   100c0:	68fb      	ldr	r3, [r7, #12]
   100c2:	68fa      	ldr	r2, [r7, #12]
   100c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   100c6:	68ba      	ldr	r2, [r7, #8]
   100c8:	687b      	ldr	r3, [r7, #4]
   100ca:	429a      	cmp	r2, r3
   100cc:	d812      	bhi.n	100f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   100ce:	687a      	ldr	r2, [r7, #4]
   100d0:	683b      	ldr	r3, [r7, #0]
   100d2:	1ad2      	subs	r2, r2, r3
   100d4:	68fb      	ldr	r3, [r7, #12]
   100d6:	699b      	ldr	r3, [r3, #24]
   100d8:	429a      	cmp	r2, r3
   100da:	d302      	bcc.n	100e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   100dc:	2301      	movs	r3, #1
   100de:	617b      	str	r3, [r7, #20]
   100e0:	e01b      	b.n	1011a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   100e2:	4b10      	ldr	r3, [pc, #64]	; (10124 <prvInsertTimerInActiveList+0x7c>)
   100e4:	681a      	ldr	r2, [r3, #0]
   100e6:	68fb      	ldr	r3, [r7, #12]
   100e8:	3304      	adds	r3, #4
   100ea:	0019      	movs	r1, r3
   100ec:	0010      	movs	r0, r2
   100ee:	4b0e      	ldr	r3, [pc, #56]	; (10128 <prvInsertTimerInActiveList+0x80>)
   100f0:	4798      	blx	r3
   100f2:	e012      	b.n	1011a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   100f4:	687a      	ldr	r2, [r7, #4]
   100f6:	683b      	ldr	r3, [r7, #0]
   100f8:	429a      	cmp	r2, r3
   100fa:	d206      	bcs.n	1010a <prvInsertTimerInActiveList+0x62>
   100fc:	68ba      	ldr	r2, [r7, #8]
   100fe:	683b      	ldr	r3, [r7, #0]
   10100:	429a      	cmp	r2, r3
   10102:	d302      	bcc.n	1010a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   10104:	2301      	movs	r3, #1
   10106:	617b      	str	r3, [r7, #20]
   10108:	e007      	b.n	1011a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1010a:	4b08      	ldr	r3, [pc, #32]	; (1012c <prvInsertTimerInActiveList+0x84>)
   1010c:	681a      	ldr	r2, [r3, #0]
   1010e:	68fb      	ldr	r3, [r7, #12]
   10110:	3304      	adds	r3, #4
   10112:	0019      	movs	r1, r3
   10114:	0010      	movs	r0, r2
   10116:	4b04      	ldr	r3, [pc, #16]	; (10128 <prvInsertTimerInActiveList+0x80>)
   10118:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1011a:	697b      	ldr	r3, [r7, #20]
}
   1011c:	0018      	movs	r0, r3
   1011e:	46bd      	mov	sp, r7
   10120:	b006      	add	sp, #24
   10122:	bd80      	pop	{r7, pc}
   10124:	200003e8 	.word	0x200003e8
   10128:	0000e03b 	.word	0x0000e03b
   1012c:	200003e4 	.word	0x200003e4

00010130 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   10130:	b590      	push	{r4, r7, lr}
   10132:	b08d      	sub	sp, #52	; 0x34
   10134:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   10136:	e07e      	b.n	10236 <prvProcessReceivedCommands+0x106>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   10138:	2308      	movs	r3, #8
   1013a:	18fb      	adds	r3, r7, r3
   1013c:	681b      	ldr	r3, [r3, #0]
   1013e:	2b00      	cmp	r3, #0
   10140:	da10      	bge.n	10164 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   10142:	2308      	movs	r3, #8
   10144:	18fb      	adds	r3, r7, r3
   10146:	3304      	adds	r3, #4
   10148:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   1014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1014c:	2b00      	cmp	r3, #0
   1014e:	d101      	bne.n	10154 <prvProcessReceivedCommands+0x24>
   10150:	b672      	cpsid	i
   10152:	e7fe      	b.n	10152 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   10154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10156:	681a      	ldr	r2, [r3, #0]
   10158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1015a:	6858      	ldr	r0, [r3, #4]
   1015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1015e:	689b      	ldr	r3, [r3, #8]
   10160:	0019      	movs	r1, r3
   10162:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   10164:	2308      	movs	r3, #8
   10166:	18fb      	adds	r3, r7, r3
   10168:	681b      	ldr	r3, [r3, #0]
   1016a:	2b00      	cmp	r3, #0
   1016c:	db63      	blt.n	10236 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1016e:	2308      	movs	r3, #8
   10170:	18fb      	adds	r3, r7, r3
   10172:	689b      	ldr	r3, [r3, #8]
   10174:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   10176:	6a3b      	ldr	r3, [r7, #32]
   10178:	695b      	ldr	r3, [r3, #20]
   1017a:	2b00      	cmp	r3, #0
   1017c:	d004      	beq.n	10188 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1017e:	6a3b      	ldr	r3, [r7, #32]
   10180:	3304      	adds	r3, #4
   10182:	0018      	movs	r0, r3
   10184:	4b33      	ldr	r3, [pc, #204]	; (10254 <prvProcessReceivedCommands+0x124>)
   10186:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   10188:	1d3b      	adds	r3, r7, #4
   1018a:	0018      	movs	r0, r3
   1018c:	4b32      	ldr	r3, [pc, #200]	; (10258 <prvProcessReceivedCommands+0x128>)
   1018e:	4798      	blx	r3
   10190:	0003      	movs	r3, r0
   10192:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
   10194:	2308      	movs	r3, #8
   10196:	18fb      	adds	r3, r7, r3
   10198:	681b      	ldr	r3, [r3, #0]
   1019a:	2b09      	cmp	r3, #9
   1019c:	d84a      	bhi.n	10234 <prvProcessReceivedCommands+0x104>
   1019e:	009a      	lsls	r2, r3, #2
   101a0:	4b2e      	ldr	r3, [pc, #184]	; (1025c <prvProcessReceivedCommands+0x12c>)
   101a2:	18d3      	adds	r3, r2, r3
   101a4:	681b      	ldr	r3, [r3, #0]
   101a6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   101a8:	2308      	movs	r3, #8
   101aa:	18fb      	adds	r3, r7, r3
   101ac:	685a      	ldr	r2, [r3, #4]
   101ae:	6a3b      	ldr	r3, [r7, #32]
   101b0:	699b      	ldr	r3, [r3, #24]
   101b2:	18d1      	adds	r1, r2, r3
   101b4:	2308      	movs	r3, #8
   101b6:	18fb      	adds	r3, r7, r3
   101b8:	685b      	ldr	r3, [r3, #4]
   101ba:	69fa      	ldr	r2, [r7, #28]
   101bc:	6a38      	ldr	r0, [r7, #32]
   101be:	4c28      	ldr	r4, [pc, #160]	; (10260 <prvProcessReceivedCommands+0x130>)
   101c0:	47a0      	blx	r4
   101c2:	1e03      	subs	r3, r0, #0
   101c4:	d037      	beq.n	10236 <prvProcessReceivedCommands+0x106>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   101c6:	6a3b      	ldr	r3, [r7, #32]
   101c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   101ca:	6a3a      	ldr	r2, [r7, #32]
   101cc:	0010      	movs	r0, r2
   101ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   101d0:	6a3b      	ldr	r3, [r7, #32]
   101d2:	69db      	ldr	r3, [r3, #28]
   101d4:	2b01      	cmp	r3, #1
   101d6:	d12e      	bne.n	10236 <prvProcessReceivedCommands+0x106>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   101d8:	2308      	movs	r3, #8
   101da:	18fb      	adds	r3, r7, r3
   101dc:	685a      	ldr	r2, [r3, #4]
   101de:	6a3b      	ldr	r3, [r7, #32]
   101e0:	699b      	ldr	r3, [r3, #24]
   101e2:	18d2      	adds	r2, r2, r3
   101e4:	6a38      	ldr	r0, [r7, #32]
   101e6:	2300      	movs	r3, #0
   101e8:	9300      	str	r3, [sp, #0]
   101ea:	2300      	movs	r3, #0
   101ec:	2100      	movs	r1, #0
   101ee:	4c1d      	ldr	r4, [pc, #116]	; (10264 <prvProcessReceivedCommands+0x134>)
   101f0:	47a0      	blx	r4
   101f2:	0003      	movs	r3, r0
   101f4:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
   101f6:	69bb      	ldr	r3, [r7, #24]
   101f8:	2b00      	cmp	r3, #0
   101fa:	d11c      	bne.n	10236 <prvProcessReceivedCommands+0x106>
   101fc:	b672      	cpsid	i
   101fe:	e7fe      	b.n	101fe <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   10200:	2308      	movs	r3, #8
   10202:	18fb      	adds	r3, r7, r3
   10204:	685a      	ldr	r2, [r3, #4]
   10206:	6a3b      	ldr	r3, [r7, #32]
   10208:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1020a:	6a3b      	ldr	r3, [r7, #32]
   1020c:	699b      	ldr	r3, [r3, #24]
   1020e:	2b00      	cmp	r3, #0
   10210:	d101      	bne.n	10216 <prvProcessReceivedCommands+0xe6>
   10212:	b672      	cpsid	i
   10214:	e7fe      	b.n	10214 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   10216:	6a3b      	ldr	r3, [r7, #32]
   10218:	699a      	ldr	r2, [r3, #24]
   1021a:	69fb      	ldr	r3, [r7, #28]
   1021c:	18d1      	adds	r1, r2, r3
   1021e:	69fb      	ldr	r3, [r7, #28]
   10220:	69fa      	ldr	r2, [r7, #28]
   10222:	6a38      	ldr	r0, [r7, #32]
   10224:	4c0e      	ldr	r4, [pc, #56]	; (10260 <prvProcessReceivedCommands+0x130>)
   10226:	47a0      	blx	r4
					break;
   10228:	e005      	b.n	10236 <prvProcessReceivedCommands+0x106>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1022a:	6a3b      	ldr	r3, [r7, #32]
   1022c:	0018      	movs	r0, r3
   1022e:	4b0e      	ldr	r3, [pc, #56]	; (10268 <prvProcessReceivedCommands+0x138>)
   10230:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   10232:	e000      	b.n	10236 <prvProcessReceivedCommands+0x106>

				default	:
					/* Don't expect to get here. */
					break;
   10234:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   10236:	4b0d      	ldr	r3, [pc, #52]	; (1026c <prvProcessReceivedCommands+0x13c>)
   10238:	681b      	ldr	r3, [r3, #0]
   1023a:	2208      	movs	r2, #8
   1023c:	18b9      	adds	r1, r7, r2
   1023e:	2200      	movs	r2, #0
   10240:	0018      	movs	r0, r3
   10242:	4b0b      	ldr	r3, [pc, #44]	; (10270 <prvProcessReceivedCommands+0x140>)
   10244:	4798      	blx	r3
   10246:	1e03      	subs	r3, r0, #0
   10248:	d000      	beq.n	1024c <prvProcessReceivedCommands+0x11c>
   1024a:	e775      	b.n	10138 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1024c:	46c0      	nop			; (mov r8, r8)
   1024e:	46bd      	mov	sp, r7
   10250:	b00b      	add	sp, #44	; 0x2c
   10252:	bd90      	pop	{r4, r7, pc}
   10254:	0000e0a7 	.word	0x0000e0a7
   10258:	00010061 	.word	0x00010061
   1025c:	00019870 	.word	0x00019870
   10260:	000100a9 	.word	0x000100a9
   10264:	0000fe25 	.word	0x0000fe25
   10268:	0000df71 	.word	0x0000df71
   1026c:	200003ec 	.word	0x200003ec
   10270:	0000e571 	.word	0x0000e571

00010274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   10274:	b590      	push	{r4, r7, lr}
   10276:	b089      	sub	sp, #36	; 0x24
   10278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1027a:	e03e      	b.n	102fa <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1027c:	4b28      	ldr	r3, [pc, #160]	; (10320 <prvSwitchTimerLists+0xac>)
   1027e:	681b      	ldr	r3, [r3, #0]
   10280:	68db      	ldr	r3, [r3, #12]
   10282:	681b      	ldr	r3, [r3, #0]
   10284:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   10286:	4b26      	ldr	r3, [pc, #152]	; (10320 <prvSwitchTimerLists+0xac>)
   10288:	681b      	ldr	r3, [r3, #0]
   1028a:	68db      	ldr	r3, [r3, #12]
   1028c:	68db      	ldr	r3, [r3, #12]
   1028e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   10290:	693b      	ldr	r3, [r7, #16]
   10292:	3304      	adds	r3, #4
   10294:	0018      	movs	r0, r3
   10296:	4b23      	ldr	r3, [pc, #140]	; (10324 <prvSwitchTimerLists+0xb0>)
   10298:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1029a:	693b      	ldr	r3, [r7, #16]
   1029c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1029e:	693a      	ldr	r2, [r7, #16]
   102a0:	0010      	movs	r0, r2
   102a2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   102a4:	693b      	ldr	r3, [r7, #16]
   102a6:	69db      	ldr	r3, [r3, #28]
   102a8:	2b01      	cmp	r3, #1
   102aa:	d126      	bne.n	102fa <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   102ac:	693b      	ldr	r3, [r7, #16]
   102ae:	699a      	ldr	r2, [r3, #24]
   102b0:	697b      	ldr	r3, [r7, #20]
   102b2:	18d3      	adds	r3, r2, r3
   102b4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   102b6:	68fa      	ldr	r2, [r7, #12]
   102b8:	697b      	ldr	r3, [r7, #20]
   102ba:	429a      	cmp	r2, r3
   102bc:	d90e      	bls.n	102dc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   102be:	693b      	ldr	r3, [r7, #16]
   102c0:	68fa      	ldr	r2, [r7, #12]
   102c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   102c4:	693b      	ldr	r3, [r7, #16]
   102c6:	693a      	ldr	r2, [r7, #16]
   102c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   102ca:	4b15      	ldr	r3, [pc, #84]	; (10320 <prvSwitchTimerLists+0xac>)
   102cc:	681a      	ldr	r2, [r3, #0]
   102ce:	693b      	ldr	r3, [r7, #16]
   102d0:	3304      	adds	r3, #4
   102d2:	0019      	movs	r1, r3
   102d4:	0010      	movs	r0, r2
   102d6:	4b14      	ldr	r3, [pc, #80]	; (10328 <prvSwitchTimerLists+0xb4>)
   102d8:	4798      	blx	r3
   102da:	e00e      	b.n	102fa <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   102dc:	697a      	ldr	r2, [r7, #20]
   102de:	6938      	ldr	r0, [r7, #16]
   102e0:	2300      	movs	r3, #0
   102e2:	9300      	str	r3, [sp, #0]
   102e4:	2300      	movs	r3, #0
   102e6:	2100      	movs	r1, #0
   102e8:	4c10      	ldr	r4, [pc, #64]	; (1032c <prvSwitchTimerLists+0xb8>)
   102ea:	47a0      	blx	r4
   102ec:	0003      	movs	r3, r0
   102ee:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   102f0:	68bb      	ldr	r3, [r7, #8]
   102f2:	2b00      	cmp	r3, #0
   102f4:	d101      	bne.n	102fa <prvSwitchTimerLists+0x86>
   102f6:	b672      	cpsid	i
   102f8:	e7fe      	b.n	102f8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   102fa:	4b09      	ldr	r3, [pc, #36]	; (10320 <prvSwitchTimerLists+0xac>)
   102fc:	681b      	ldr	r3, [r3, #0]
   102fe:	681b      	ldr	r3, [r3, #0]
   10300:	2b00      	cmp	r3, #0
   10302:	d1bb      	bne.n	1027c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   10304:	4b06      	ldr	r3, [pc, #24]	; (10320 <prvSwitchTimerLists+0xac>)
   10306:	681b      	ldr	r3, [r3, #0]
   10308:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1030a:	4b09      	ldr	r3, [pc, #36]	; (10330 <prvSwitchTimerLists+0xbc>)
   1030c:	681a      	ldr	r2, [r3, #0]
   1030e:	4b04      	ldr	r3, [pc, #16]	; (10320 <prvSwitchTimerLists+0xac>)
   10310:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   10312:	4b07      	ldr	r3, [pc, #28]	; (10330 <prvSwitchTimerLists+0xbc>)
   10314:	687a      	ldr	r2, [r7, #4]
   10316:	601a      	str	r2, [r3, #0]
}
   10318:	46c0      	nop			; (mov r8, r8)
   1031a:	46bd      	mov	sp, r7
   1031c:	b007      	add	sp, #28
   1031e:	bd90      	pop	{r4, r7, pc}
   10320:	200003e4 	.word	0x200003e4
   10324:	0000e0a7 	.word	0x0000e0a7
   10328:	0000e03b 	.word	0x0000e03b
   1032c:	0000fe25 	.word	0x0000fe25
   10330:	200003e8 	.word	0x200003e8

00010334 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   10334:	b580      	push	{r7, lr}
   10336:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   10338:	4b10      	ldr	r3, [pc, #64]	; (1037c <prvCheckForValidListAndQueue+0x48>)
   1033a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1033c:	4b10      	ldr	r3, [pc, #64]	; (10380 <prvCheckForValidListAndQueue+0x4c>)
   1033e:	681b      	ldr	r3, [r3, #0]
   10340:	2b00      	cmp	r3, #0
   10342:	d115      	bne.n	10370 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   10344:	4b0f      	ldr	r3, [pc, #60]	; (10384 <prvCheckForValidListAndQueue+0x50>)
   10346:	0018      	movs	r0, r3
   10348:	4b0f      	ldr	r3, [pc, #60]	; (10388 <prvCheckForValidListAndQueue+0x54>)
   1034a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1034c:	4b0f      	ldr	r3, [pc, #60]	; (1038c <prvCheckForValidListAndQueue+0x58>)
   1034e:	0018      	movs	r0, r3
   10350:	4b0d      	ldr	r3, [pc, #52]	; (10388 <prvCheckForValidListAndQueue+0x54>)
   10352:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   10354:	4b0e      	ldr	r3, [pc, #56]	; (10390 <prvCheckForValidListAndQueue+0x5c>)
   10356:	4a0b      	ldr	r2, [pc, #44]	; (10384 <prvCheckForValidListAndQueue+0x50>)
   10358:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1035a:	4b0e      	ldr	r3, [pc, #56]	; (10394 <prvCheckForValidListAndQueue+0x60>)
   1035c:	4a0b      	ldr	r2, [pc, #44]	; (1038c <prvCheckForValidListAndQueue+0x58>)
   1035e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   10360:	2200      	movs	r2, #0
   10362:	2110      	movs	r1, #16
   10364:	2005      	movs	r0, #5
   10366:	4b0c      	ldr	r3, [pc, #48]	; (10398 <prvCheckForValidListAndQueue+0x64>)
   10368:	4798      	blx	r3
   1036a:	0002      	movs	r2, r0
   1036c:	4b04      	ldr	r3, [pc, #16]	; (10380 <prvCheckForValidListAndQueue+0x4c>)
   1036e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   10370:	4b0a      	ldr	r3, [pc, #40]	; (1039c <prvCheckForValidListAndQueue+0x68>)
   10372:	4798      	blx	r3
}
   10374:	46c0      	nop			; (mov r8, r8)
   10376:	46bd      	mov	sp, r7
   10378:	bd80      	pop	{r7, pc}
   1037a:	46c0      	nop			; (mov r8, r8)
   1037c:	0000de01 	.word	0x0000de01
   10380:	200003ec 	.word	0x200003ec
   10384:	200003bc 	.word	0x200003bc
   10388:	0000dfa5 	.word	0x0000dfa5
   1038c:	200003d0 	.word	0x200003d0
   10390:	200003e4 	.word	0x200003e4
   10394:	200003e8 	.word	0x200003e8
   10398:	0000e1b5 	.word	0x0000e1b5
   1039c:	0000de25 	.word	0x0000de25

000103a0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
   103a0:	b580      	push	{r7, lr}
   103a2:	b084      	sub	sp, #16
   103a4:	af00      	add	r7, sp, #0
   103a6:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
   103a8:	687b      	ldr	r3, [r7, #4]
   103aa:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
   103ac:	687b      	ldr	r3, [r7, #4]
   103ae:	2b00      	cmp	r3, #0
   103b0:	d101      	bne.n	103b6 <xTimerIsTimerActive+0x16>
   103b2:	b672      	cpsid	i
   103b4:	e7fe      	b.n	103b4 <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
   103b6:	4b07      	ldr	r3, [pc, #28]	; (103d4 <xTimerIsTimerActive+0x34>)
   103b8:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
   103ba:	68fb      	ldr	r3, [r7, #12]
   103bc:	695b      	ldr	r3, [r3, #20]
   103be:	1e5a      	subs	r2, r3, #1
   103c0:	4193      	sbcs	r3, r2
   103c2:	b2db      	uxtb	r3, r3
   103c4:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
   103c6:	4b04      	ldr	r3, [pc, #16]	; (103d8 <xTimerIsTimerActive+0x38>)
   103c8:	4798      	blx	r3

	return xTimerIsInActiveList;
   103ca:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
   103cc:	0018      	movs	r0, r3
   103ce:	46bd      	mov	sp, r7
   103d0:	b004      	add	sp, #16
   103d2:	bd80      	pop	{r7, pc}
   103d4:	0000de01 	.word	0x0000de01
   103d8:	0000de25 	.word	0x0000de25

000103dc <wdt_clear_early_warning>:
 *
 *  Clears the Watchdog timer early warning period elapsed flag, so that a new
 *  early warning period can be detected.
 */
static inline void wdt_clear_early_warning(void)
{
   103dc:	b580      	push	{r7, lr}
   103de:	b082      	sub	sp, #8
   103e0:	af00      	add	r7, sp, #0
	Wdt *const WDT_module = WDT;
   103e2:	4b04      	ldr	r3, [pc, #16]	; (103f4 <wdt_clear_early_warning+0x18>)
   103e4:	607b      	str	r3, [r7, #4]

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
   103e6:	687b      	ldr	r3, [r7, #4]
   103e8:	2201      	movs	r2, #1
   103ea:	719a      	strb	r2, [r3, #6]
}
   103ec:	46c0      	nop			; (mov r8, r8)
   103ee:	46bd      	mov	sp, r7
   103f0:	b002      	add	sp, #8
   103f2:	bd80      	pop	{r7, pc}
   103f4:	40001000 	.word	0x40001000

000103f8 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
   103f8:	b580      	push	{r7, lr}
   103fa:	af00      	add	r7, sp, #0
	wdt_clear_early_warning();
   103fc:	4b05      	ldr	r3, [pc, #20]	; (10414 <WDT_Handler+0x1c>)
   103fe:	4798      	blx	r3

	if (wdt_early_warning_callback) {
   10400:	4b05      	ldr	r3, [pc, #20]	; (10418 <WDT_Handler+0x20>)
   10402:	681b      	ldr	r3, [r3, #0]
   10404:	2b00      	cmp	r3, #0
   10406:	d002      	beq.n	1040e <WDT_Handler+0x16>
		wdt_early_warning_callback();
   10408:	4b03      	ldr	r3, [pc, #12]	; (10418 <WDT_Handler+0x20>)
   1040a:	681b      	ldr	r3, [r3, #0]
   1040c:	4798      	blx	r3
	}
}
   1040e:	46c0      	nop			; (mov r8, r8)
   10410:	46bd      	mov	sp, r7
   10412:	bd80      	pop	{r7, pc}
   10414:	000103dd 	.word	0x000103dd
   10418:	200008f4 	.word	0x200008f4

0001041c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   1041c:	b580      	push	{r7, lr}
   1041e:	af00      	add	r7, sp, #0
   10420:	2000      	movs	r0, #0
   10422:	4b02      	ldr	r3, [pc, #8]	; (1042c <TCC0_Handler+0x10>)
   10424:	4798      	blx	r3
   10426:	46c0      	nop			; (mov r8, r8)
   10428:	46bd      	mov	sp, r7
   1042a:	bd80      	pop	{r7, pc}
   1042c:	00010459 	.word	0x00010459

00010430 <TCC1_Handler>:
   10430:	b580      	push	{r7, lr}
   10432:	af00      	add	r7, sp, #0
   10434:	2001      	movs	r0, #1
   10436:	4b02      	ldr	r3, [pc, #8]	; (10440 <TCC1_Handler+0x10>)
   10438:	4798      	blx	r3
   1043a:	46c0      	nop			; (mov r8, r8)
   1043c:	46bd      	mov	sp, r7
   1043e:	bd80      	pop	{r7, pc}
   10440:	00010459 	.word	0x00010459

00010444 <TCC2_Handler>:
   10444:	b580      	push	{r7, lr}
   10446:	af00      	add	r7, sp, #0
   10448:	2002      	movs	r0, #2
   1044a:	4b02      	ldr	r3, [pc, #8]	; (10454 <TCC2_Handler+0x10>)
   1044c:	4798      	blx	r3
   1044e:	46c0      	nop			; (mov r8, r8)
   10450:	46bd      	mov	sp, r7
   10452:	bd80      	pop	{r7, pc}
   10454:	00010459 	.word	0x00010459

00010458 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   10458:	b580      	push	{r7, lr}
   1045a:	b086      	sub	sp, #24
   1045c:	af00      	add	r7, sp, #0
   1045e:	0002      	movs	r2, r0
   10460:	1dfb      	adds	r3, r7, #7
   10462:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   10464:	1dfb      	adds	r3, r7, #7
   10466:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   10468:	4b18      	ldr	r3, [pc, #96]	; (104cc <_tcc_interrupt_handler+0x74>)
   1046a:	0092      	lsls	r2, r2, #2
   1046c:	58d3      	ldr	r3, [r2, r3]
   1046e:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   10470:	693b      	ldr	r3, [r7, #16]
   10472:	681b      	ldr	r3, [r3, #0]
   10474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   10476:	693b      	ldr	r3, [r7, #16]
   10478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1047a:	401a      	ands	r2, r3
			module->enable_callback_mask);
   1047c:	693b      	ldr	r3, [r7, #16]
   1047e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   10480:	4013      	ands	r3, r2
   10482:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   10484:	2300      	movs	r3, #0
   10486:	617b      	str	r3, [r7, #20]
   10488:	e019      	b.n	104be <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1048a:	4b11      	ldr	r3, [pc, #68]	; (104d0 <_tcc_interrupt_handler+0x78>)
   1048c:	697a      	ldr	r2, [r7, #20]
   1048e:	0092      	lsls	r2, r2, #2
   10490:	58d3      	ldr	r3, [r2, r3]
   10492:	68fa      	ldr	r2, [r7, #12]
   10494:	4013      	ands	r3, r2
   10496:	d00f      	beq.n	104b8 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   10498:	693a      	ldr	r2, [r7, #16]
   1049a:	697b      	ldr	r3, [r7, #20]
   1049c:	009b      	lsls	r3, r3, #2
   1049e:	18d3      	adds	r3, r2, r3
   104a0:	3304      	adds	r3, #4
   104a2:	681b      	ldr	r3, [r3, #0]
   104a4:	693a      	ldr	r2, [r7, #16]
   104a6:	0010      	movs	r0, r2
   104a8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   104aa:	693b      	ldr	r3, [r7, #16]
   104ac:	681b      	ldr	r3, [r3, #0]
   104ae:	4a08      	ldr	r2, [pc, #32]	; (104d0 <_tcc_interrupt_handler+0x78>)
   104b0:	6979      	ldr	r1, [r7, #20]
   104b2:	0089      	lsls	r1, r1, #2
   104b4:	588a      	ldr	r2, [r1, r2]
   104b6:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   104b8:	697b      	ldr	r3, [r7, #20]
   104ba:	3301      	adds	r3, #1
   104bc:	617b      	str	r3, [r7, #20]
   104be:	697b      	ldr	r3, [r7, #20]
   104c0:	2b0b      	cmp	r3, #11
   104c2:	dde2      	ble.n	1048a <_tcc_interrupt_handler+0x32>
		}
	}
}
   104c4:	46c0      	nop			; (mov r8, r8)
   104c6:	46bd      	mov	sp, r7
   104c8:	b006      	add	sp, #24
   104ca:	bd80      	pop	{r7, pc}
   104cc:	200008f8 	.word	0x200008f8
   104d0:	00019898 	.word	0x00019898

000104d4 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   104d4:	b580      	push	{r7, lr}
   104d6:	af00      	add	r7, sp, #0
   104d8:	2000      	movs	r0, #0
   104da:	4b02      	ldr	r3, [pc, #8]	; (104e4 <TC3_Handler+0x10>)
   104dc:	4798      	blx	r3
   104de:	46c0      	nop			; (mov r8, r8)
   104e0:	46bd      	mov	sp, r7
   104e2:	bd80      	pop	{r7, pc}
   104e4:	00010539 	.word	0x00010539

000104e8 <TC4_Handler>:
   104e8:	b580      	push	{r7, lr}
   104ea:	af00      	add	r7, sp, #0
   104ec:	2001      	movs	r0, #1
   104ee:	4b02      	ldr	r3, [pc, #8]	; (104f8 <TC4_Handler+0x10>)
   104f0:	4798      	blx	r3
   104f2:	46c0      	nop			; (mov r8, r8)
   104f4:	46bd      	mov	sp, r7
   104f6:	bd80      	pop	{r7, pc}
   104f8:	00010539 	.word	0x00010539

000104fc <TC5_Handler>:
   104fc:	b580      	push	{r7, lr}
   104fe:	af00      	add	r7, sp, #0
   10500:	2002      	movs	r0, #2
   10502:	4b02      	ldr	r3, [pc, #8]	; (1050c <TC5_Handler+0x10>)
   10504:	4798      	blx	r3
   10506:	46c0      	nop			; (mov r8, r8)
   10508:	46bd      	mov	sp, r7
   1050a:	bd80      	pop	{r7, pc}
   1050c:	00010539 	.word	0x00010539

00010510 <TC6_Handler>:
   10510:	b580      	push	{r7, lr}
   10512:	af00      	add	r7, sp, #0
   10514:	2003      	movs	r0, #3
   10516:	4b02      	ldr	r3, [pc, #8]	; (10520 <TC6_Handler+0x10>)
   10518:	4798      	blx	r3
   1051a:	46c0      	nop			; (mov r8, r8)
   1051c:	46bd      	mov	sp, r7
   1051e:	bd80      	pop	{r7, pc}
   10520:	00010539 	.word	0x00010539

00010524 <TC7_Handler>:
   10524:	b580      	push	{r7, lr}
   10526:	af00      	add	r7, sp, #0
   10528:	2004      	movs	r0, #4
   1052a:	4b02      	ldr	r3, [pc, #8]	; (10534 <TC7_Handler+0x10>)
   1052c:	4798      	blx	r3
   1052e:	46c0      	nop			; (mov r8, r8)
   10530:	46bd      	mov	sp, r7
   10532:	bd80      	pop	{r7, pc}
   10534:	00010539 	.word	0x00010539

00010538 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   10538:	b580      	push	{r7, lr}
   1053a:	b084      	sub	sp, #16
   1053c:	af00      	add	r7, sp, #0
   1053e:	0002      	movs	r2, r0
   10540:	1dfb      	adds	r3, r7, #7
   10542:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   10544:	1dfb      	adds	r3, r7, #7
   10546:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   10548:	4b28      	ldr	r3, [pc, #160]	; (105ec <_tc_interrupt_handler+0xb4>)
   1054a:	0092      	lsls	r2, r2, #2
   1054c:	58d3      	ldr	r3, [r2, r3]
   1054e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   10550:	68fb      	ldr	r3, [r7, #12]
   10552:	681b      	ldr	r3, [r3, #0]
   10554:	7b9b      	ldrb	r3, [r3, #14]
   10556:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   10558:	68fa      	ldr	r2, [r7, #12]
   1055a:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1055c:	4013      	ands	r3, r2
   1055e:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   10560:	68fb      	ldr	r3, [r7, #12]
   10562:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   10564:	230b      	movs	r3, #11
   10566:	18fb      	adds	r3, r7, r3
   10568:	400a      	ands	r2, r1
   1056a:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1056c:	230b      	movs	r3, #11
   1056e:	18fb      	adds	r3, r7, r3
   10570:	781b      	ldrb	r3, [r3, #0]
   10572:	2201      	movs	r2, #1
   10574:	4013      	ands	r3, r2
   10576:	d008      	beq.n	1058a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   10578:	68fb      	ldr	r3, [r7, #12]
   1057a:	689b      	ldr	r3, [r3, #8]
   1057c:	68fa      	ldr	r2, [r7, #12]
   1057e:	0010      	movs	r0, r2
   10580:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   10582:	68fb      	ldr	r3, [r7, #12]
   10584:	681b      	ldr	r3, [r3, #0]
   10586:	2201      	movs	r2, #1
   10588:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1058a:	230b      	movs	r3, #11
   1058c:	18fb      	adds	r3, r7, r3
   1058e:	781b      	ldrb	r3, [r3, #0]
   10590:	2202      	movs	r2, #2
   10592:	4013      	ands	r3, r2
   10594:	d008      	beq.n	105a8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   10596:	68fb      	ldr	r3, [r7, #12]
   10598:	68db      	ldr	r3, [r3, #12]
   1059a:	68fa      	ldr	r2, [r7, #12]
   1059c:	0010      	movs	r0, r2
   1059e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   105a0:	68fb      	ldr	r3, [r7, #12]
   105a2:	681b      	ldr	r3, [r3, #0]
   105a4:	2202      	movs	r2, #2
   105a6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   105a8:	230b      	movs	r3, #11
   105aa:	18fb      	adds	r3, r7, r3
   105ac:	781b      	ldrb	r3, [r3, #0]
   105ae:	2210      	movs	r2, #16
   105b0:	4013      	ands	r3, r2
   105b2:	d008      	beq.n	105c6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   105b4:	68fb      	ldr	r3, [r7, #12]
   105b6:	691b      	ldr	r3, [r3, #16]
   105b8:	68fa      	ldr	r2, [r7, #12]
   105ba:	0010      	movs	r0, r2
   105bc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   105be:	68fb      	ldr	r3, [r7, #12]
   105c0:	681b      	ldr	r3, [r3, #0]
   105c2:	2210      	movs	r2, #16
   105c4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   105c6:	230b      	movs	r3, #11
   105c8:	18fb      	adds	r3, r7, r3
   105ca:	781b      	ldrb	r3, [r3, #0]
   105cc:	2220      	movs	r2, #32
   105ce:	4013      	ands	r3, r2
   105d0:	d008      	beq.n	105e4 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   105d2:	68fb      	ldr	r3, [r7, #12]
   105d4:	695b      	ldr	r3, [r3, #20]
   105d6:	68fa      	ldr	r2, [r7, #12]
   105d8:	0010      	movs	r0, r2
   105da:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   105dc:	68fb      	ldr	r3, [r7, #12]
   105de:	681b      	ldr	r3, [r3, #0]
   105e0:	2220      	movs	r2, #32
   105e2:	739a      	strb	r2, [r3, #14]
	}
}
   105e4:	46c0      	nop			; (mov r8, r8)
   105e6:	46bd      	mov	sp, r7
   105e8:	b004      	add	sp, #16
   105ea:	bd80      	pop	{r7, pc}
   105ec:	20000904 	.word	0x20000904

000105f0 <system_gclk_chan_get_config_defaults>:
{
   105f0:	b580      	push	{r7, lr}
   105f2:	b082      	sub	sp, #8
   105f4:	af00      	add	r7, sp, #0
   105f6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   105f8:	687b      	ldr	r3, [r7, #4]
   105fa:	2200      	movs	r2, #0
   105fc:	701a      	strb	r2, [r3, #0]
}
   105fe:	46c0      	nop			; (mov r8, r8)
   10600:	46bd      	mov	sp, r7
   10602:	b002      	add	sp, #8
   10604:	bd80      	pop	{r7, pc}
	...

00010608 <system_apb_clock_set_mask>:
{
   10608:	b580      	push	{r7, lr}
   1060a:	b082      	sub	sp, #8
   1060c:	af00      	add	r7, sp, #0
   1060e:	0002      	movs	r2, r0
   10610:	6039      	str	r1, [r7, #0]
   10612:	1dfb      	adds	r3, r7, #7
   10614:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   10616:	1dfb      	adds	r3, r7, #7
   10618:	781b      	ldrb	r3, [r3, #0]
   1061a:	2b01      	cmp	r3, #1
   1061c:	d00a      	beq.n	10634 <system_apb_clock_set_mask+0x2c>
   1061e:	2b02      	cmp	r3, #2
   10620:	d00f      	beq.n	10642 <system_apb_clock_set_mask+0x3a>
   10622:	2b00      	cmp	r3, #0
   10624:	d114      	bne.n	10650 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   10626:	4b0e      	ldr	r3, [pc, #56]	; (10660 <system_apb_clock_set_mask+0x58>)
   10628:	4a0d      	ldr	r2, [pc, #52]	; (10660 <system_apb_clock_set_mask+0x58>)
   1062a:	6991      	ldr	r1, [r2, #24]
   1062c:	683a      	ldr	r2, [r7, #0]
   1062e:	430a      	orrs	r2, r1
   10630:	619a      	str	r2, [r3, #24]
			break;
   10632:	e00f      	b.n	10654 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   10634:	4b0a      	ldr	r3, [pc, #40]	; (10660 <system_apb_clock_set_mask+0x58>)
   10636:	4a0a      	ldr	r2, [pc, #40]	; (10660 <system_apb_clock_set_mask+0x58>)
   10638:	69d1      	ldr	r1, [r2, #28]
   1063a:	683a      	ldr	r2, [r7, #0]
   1063c:	430a      	orrs	r2, r1
   1063e:	61da      	str	r2, [r3, #28]
			break;
   10640:	e008      	b.n	10654 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   10642:	4b07      	ldr	r3, [pc, #28]	; (10660 <system_apb_clock_set_mask+0x58>)
   10644:	4a06      	ldr	r2, [pc, #24]	; (10660 <system_apb_clock_set_mask+0x58>)
   10646:	6a11      	ldr	r1, [r2, #32]
   10648:	683a      	ldr	r2, [r7, #0]
   1064a:	430a      	orrs	r2, r1
   1064c:	621a      	str	r2, [r3, #32]
			break;
   1064e:	e001      	b.n	10654 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   10650:	2317      	movs	r3, #23
   10652:	e000      	b.n	10656 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   10654:	2300      	movs	r3, #0
}
   10656:	0018      	movs	r0, r3
   10658:	46bd      	mov	sp, r7
   1065a:	b002      	add	sp, #8
   1065c:	bd80      	pop	{r7, pc}
   1065e:	46c0      	nop			; (mov r8, r8)
   10660:	40000400 	.word	0x40000400

00010664 <system_pinmux_get_config_defaults>:
{
   10664:	b580      	push	{r7, lr}
   10666:	b082      	sub	sp, #8
   10668:	af00      	add	r7, sp, #0
   1066a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1066c:	687b      	ldr	r3, [r7, #4]
   1066e:	2280      	movs	r2, #128	; 0x80
   10670:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10672:	687b      	ldr	r3, [r7, #4]
   10674:	2200      	movs	r2, #0
   10676:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10678:	687b      	ldr	r3, [r7, #4]
   1067a:	2201      	movs	r2, #1
   1067c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1067e:	687b      	ldr	r3, [r7, #4]
   10680:	2200      	movs	r2, #0
   10682:	70da      	strb	r2, [r3, #3]
}
   10684:	46c0      	nop			; (mov r8, r8)
   10686:	46bd      	mov	sp, r7
   10688:	b002      	add	sp, #8
   1068a:	bd80      	pop	{r7, pc}

0001068c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   1068c:	b580      	push	{r7, lr}
   1068e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   10690:	4b05      	ldr	r3, [pc, #20]	; (106a8 <system_is_debugger_present+0x1c>)
   10692:	789b      	ldrb	r3, [r3, #2]
   10694:	b2db      	uxtb	r3, r3
   10696:	001a      	movs	r2, r3
   10698:	2302      	movs	r3, #2
   1069a:	4013      	ands	r3, r2
   1069c:	1e5a      	subs	r2, r3, #1
   1069e:	4193      	sbcs	r3, r2
   106a0:	b2db      	uxtb	r3, r3
}
   106a2:	0018      	movs	r0, r3
   106a4:	46bd      	mov	sp, r7
   106a6:	bd80      	pop	{r7, pc}
   106a8:	41002000 	.word	0x41002000

000106ac <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   106ac:	b580      	push	{r7, lr}
   106ae:	b084      	sub	sp, #16
   106b0:	af00      	add	r7, sp, #0
   106b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   106b4:	687b      	ldr	r3, [r7, #4]
   106b6:	681b      	ldr	r3, [r3, #0]
   106b8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   106ba:	68fb      	ldr	r3, [r7, #12]
   106bc:	69db      	ldr	r3, [r3, #28]
   106be:	1e5a      	subs	r2, r3, #1
   106c0:	4193      	sbcs	r3, r2
   106c2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   106c4:	0018      	movs	r0, r3
   106c6:	46bd      	mov	sp, r7
   106c8:	b004      	add	sp, #16
   106ca:	bd80      	pop	{r7, pc}

000106cc <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   106cc:	b580      	push	{r7, lr}
   106ce:	b082      	sub	sp, #8
   106d0:	af00      	add	r7, sp, #0
   106d2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   106d4:	46c0      	nop			; (mov r8, r8)
   106d6:	687b      	ldr	r3, [r7, #4]
   106d8:	0018      	movs	r0, r3
   106da:	4b04      	ldr	r3, [pc, #16]	; (106ec <_usart_wait_for_sync+0x20>)
   106dc:	4798      	blx	r3
   106de:	1e03      	subs	r3, r0, #0
   106e0:	d1f9      	bne.n	106d6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   106e2:	46c0      	nop			; (mov r8, r8)
   106e4:	46bd      	mov	sp, r7
   106e6:	b002      	add	sp, #8
   106e8:	bd80      	pop	{r7, pc}
   106ea:	46c0      	nop			; (mov r8, r8)
   106ec:	000106ad 	.word	0x000106ad

000106f0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   106f0:	b5b0      	push	{r4, r5, r7, lr}
   106f2:	b08c      	sub	sp, #48	; 0x30
   106f4:	af02      	add	r7, sp, #8
   106f6:	6078      	str	r0, [r7, #4]
   106f8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   106fa:	687b      	ldr	r3, [r7, #4]
   106fc:	681b      	ldr	r3, [r3, #0]
   106fe:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   10700:	687b      	ldr	r3, [r7, #4]
   10702:	681b      	ldr	r3, [r3, #0]
   10704:	0018      	movs	r0, r3
   10706:	4bab      	ldr	r3, [pc, #684]	; (109b4 <_usart_set_config+0x2c4>)
   10708:	4798      	blx	r3
   1070a:	0003      	movs	r3, r0
   1070c:	617b      	str	r3, [r7, #20]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1070e:	697b      	ldr	r3, [r7, #20]
   10710:	3314      	adds	r3, #20
   10712:	613b      	str	r3, [r7, #16]
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   10714:	2300      	movs	r3, #0
   10716:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   10718:	2300      	movs	r3, #0
   1071a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   1071c:	230a      	movs	r3, #10
   1071e:	18fb      	adds	r3, r7, r3
   10720:	2200      	movs	r2, #0
   10722:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10724:	231f      	movs	r3, #31
   10726:	18fb      	adds	r3, r7, r3
   10728:	2200      	movs	r2, #0
   1072a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1072c:	231e      	movs	r3, #30
   1072e:	18fb      	adds	r3, r7, r3
   10730:	2210      	movs	r2, #16
   10732:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   10734:	683b      	ldr	r3, [r7, #0]
   10736:	8a1b      	ldrh	r3, [r3, #16]
   10738:	2280      	movs	r2, #128	; 0x80
   1073a:	01d2      	lsls	r2, r2, #7
   1073c:	4293      	cmp	r3, r2
   1073e:	d01c      	beq.n	1077a <_usart_set_config+0x8a>
   10740:	2280      	movs	r2, #128	; 0x80
   10742:	01d2      	lsls	r2, r2, #7
   10744:	4293      	cmp	r3, r2
   10746:	dc06      	bgt.n	10756 <_usart_set_config+0x66>
   10748:	2b00      	cmp	r3, #0
   1074a:	d00d      	beq.n	10768 <_usart_set_config+0x78>
   1074c:	2280      	movs	r2, #128	; 0x80
   1074e:	0192      	lsls	r2, r2, #6
   10750:	4293      	cmp	r3, r2
   10752:	d024      	beq.n	1079e <_usart_set_config+0xae>
   10754:	e035      	b.n	107c2 <_usart_set_config+0xd2>
   10756:	22c0      	movs	r2, #192	; 0xc0
   10758:	01d2      	lsls	r2, r2, #7
   1075a:	4293      	cmp	r3, r2
   1075c:	d028      	beq.n	107b0 <_usart_set_config+0xc0>
   1075e:	2280      	movs	r2, #128	; 0x80
   10760:	0212      	lsls	r2, r2, #8
   10762:	4293      	cmp	r3, r2
   10764:	d012      	beq.n	1078c <_usart_set_config+0x9c>
   10766:	e02c      	b.n	107c2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10768:	231f      	movs	r3, #31
   1076a:	18fb      	adds	r3, r7, r3
   1076c:	2200      	movs	r2, #0
   1076e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   10770:	231e      	movs	r3, #30
   10772:	18fb      	adds	r3, r7, r3
   10774:	2210      	movs	r2, #16
   10776:	701a      	strb	r2, [r3, #0]
			break;
   10778:	e023      	b.n	107c2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1077a:	231f      	movs	r3, #31
   1077c:	18fb      	adds	r3, r7, r3
   1077e:	2200      	movs	r2, #0
   10780:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10782:	231e      	movs	r3, #30
   10784:	18fb      	adds	r3, r7, r3
   10786:	2208      	movs	r2, #8
   10788:	701a      	strb	r2, [r3, #0]
			break;
   1078a:	e01a      	b.n	107c2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1078c:	231f      	movs	r3, #31
   1078e:	18fb      	adds	r3, r7, r3
   10790:	2200      	movs	r2, #0
   10792:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   10794:	231e      	movs	r3, #30
   10796:	18fb      	adds	r3, r7, r3
   10798:	2203      	movs	r2, #3
   1079a:	701a      	strb	r2, [r3, #0]
			break;
   1079c:	e011      	b.n	107c2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1079e:	231f      	movs	r3, #31
   107a0:	18fb      	adds	r3, r7, r3
   107a2:	2201      	movs	r2, #1
   107a4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   107a6:	231e      	movs	r3, #30
   107a8:	18fb      	adds	r3, r7, r3
   107aa:	2210      	movs	r2, #16
   107ac:	701a      	strb	r2, [r3, #0]
			break;
   107ae:	e008      	b.n	107c2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   107b0:	231f      	movs	r3, #31
   107b2:	18fb      	adds	r3, r7, r3
   107b4:	2201      	movs	r2, #1
   107b6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   107b8:	231e      	movs	r3, #30
   107ba:	18fb      	adds	r3, r7, r3
   107bc:	2208      	movs	r2, #8
   107be:	701a      	strb	r2, [r3, #0]
			break;
   107c0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   107c2:	683b      	ldr	r3, [r7, #0]
   107c4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   107c6:	683b      	ldr	r3, [r7, #0]
   107c8:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   107ca:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   107cc:	683b      	ldr	r3, [r7, #0]
   107ce:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   107d0:	4313      	orrs	r3, r2
		config->sample_rate |
   107d2:	683a      	ldr	r2, [r7, #0]
   107d4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   107d6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   107d8:	683a      	ldr	r2, [r7, #0]
   107da:	7e12      	ldrb	r2, [r2, #24]
   107dc:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   107de:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   107e0:	683a      	ldr	r2, [r7, #0]
   107e2:	2126      	movs	r1, #38	; 0x26
   107e4:	5c52      	ldrb	r2, [r2, r1]
   107e6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   107e8:	4313      	orrs	r3, r2
   107ea:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   107ec:	231d      	movs	r3, #29
   107ee:	18fb      	adds	r3, r7, r3
   107f0:	2200      	movs	r2, #0
   107f2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   107f4:	683b      	ldr	r3, [r7, #0]
   107f6:	685b      	ldr	r3, [r3, #4]
   107f8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   107fa:	68fb      	ldr	r3, [r7, #12]
   107fc:	2b00      	cmp	r3, #0
   107fe:	d01e      	beq.n	1083e <_usart_set_config+0x14e>
   10800:	2280      	movs	r2, #128	; 0x80
   10802:	0552      	lsls	r2, r2, #21
   10804:	4293      	cmp	r3, r2
   10806:	d14f      	bne.n	108a8 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   10808:	683b      	ldr	r3, [r7, #0]
   1080a:	2227      	movs	r2, #39	; 0x27
   1080c:	5c9b      	ldrb	r3, [r3, r2]
   1080e:	2201      	movs	r2, #1
   10810:	4053      	eors	r3, r2
   10812:	b2db      	uxtb	r3, r3
   10814:	2b00      	cmp	r3, #0
   10816:	d046      	beq.n	108a6 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   10818:	683b      	ldr	r3, [r7, #0]
   1081a:	6a1d      	ldr	r5, [r3, #32]
   1081c:	693b      	ldr	r3, [r7, #16]
   1081e:	b2db      	uxtb	r3, r3
   10820:	0018      	movs	r0, r3
   10822:	4b65      	ldr	r3, [pc, #404]	; (109b8 <_usart_set_config+0x2c8>)
   10824:	4798      	blx	r3
   10826:	0001      	movs	r1, r0
   10828:	231d      	movs	r3, #29
   1082a:	18fc      	adds	r4, r7, r3
   1082c:	230a      	movs	r3, #10
   1082e:	18fb      	adds	r3, r7, r3
   10830:	001a      	movs	r2, r3
   10832:	0028      	movs	r0, r5
   10834:	4b61      	ldr	r3, [pc, #388]	; (109bc <_usart_set_config+0x2cc>)
   10836:	4798      	blx	r3
   10838:	0003      	movs	r3, r0
   1083a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   1083c:	e033      	b.n	108a6 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   1083e:	683b      	ldr	r3, [r7, #0]
   10840:	2227      	movs	r2, #39	; 0x27
   10842:	5c9b      	ldrb	r3, [r3, r2]
   10844:	2b00      	cmp	r3, #0
   10846:	d014      	beq.n	10872 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   10848:	683b      	ldr	r3, [r7, #0]
   1084a:	6a18      	ldr	r0, [r3, #32]
   1084c:	683b      	ldr	r3, [r7, #0]
   1084e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   10850:	231d      	movs	r3, #29
   10852:	18fc      	adds	r4, r7, r3
   10854:	231f      	movs	r3, #31
   10856:	18fb      	adds	r3, r7, r3
   10858:	781d      	ldrb	r5, [r3, #0]
   1085a:	230a      	movs	r3, #10
   1085c:	18fa      	adds	r2, r7, r3
   1085e:	231e      	movs	r3, #30
   10860:	18fb      	adds	r3, r7, r3
   10862:	781b      	ldrb	r3, [r3, #0]
   10864:	9300      	str	r3, [sp, #0]
   10866:	002b      	movs	r3, r5
   10868:	4d55      	ldr	r5, [pc, #340]	; (109c0 <_usart_set_config+0x2d0>)
   1086a:	47a8      	blx	r5
   1086c:	0003      	movs	r3, r0
   1086e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   10870:	e01a      	b.n	108a8 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   10872:	683b      	ldr	r3, [r7, #0]
   10874:	6a1d      	ldr	r5, [r3, #32]
   10876:	693b      	ldr	r3, [r7, #16]
   10878:	b2db      	uxtb	r3, r3
   1087a:	0018      	movs	r0, r3
   1087c:	4b4e      	ldr	r3, [pc, #312]	; (109b8 <_usart_set_config+0x2c8>)
   1087e:	4798      	blx	r3
				status_code =
   10880:	231d      	movs	r3, #29
   10882:	18fc      	adds	r4, r7, r3
   10884:	231f      	movs	r3, #31
   10886:	18fb      	adds	r3, r7, r3
   10888:	7819      	ldrb	r1, [r3, #0]
   1088a:	230a      	movs	r3, #10
   1088c:	18fa      	adds	r2, r7, r3
   1088e:	231e      	movs	r3, #30
   10890:	18fb      	adds	r3, r7, r3
   10892:	781b      	ldrb	r3, [r3, #0]
   10894:	9300      	str	r3, [sp, #0]
   10896:	000b      	movs	r3, r1
   10898:	0001      	movs	r1, r0
   1089a:	0028      	movs	r0, r5
   1089c:	4d48      	ldr	r5, [pc, #288]	; (109c0 <_usart_set_config+0x2d0>)
   1089e:	47a8      	blx	r5
   108a0:	0003      	movs	r3, r0
   108a2:	7023      	strb	r3, [r4, #0]
			break;
   108a4:	e000      	b.n	108a8 <_usart_set_config+0x1b8>
			break;
   108a6:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   108a8:	231d      	movs	r3, #29
   108aa:	18fb      	adds	r3, r7, r3
   108ac:	781b      	ldrb	r3, [r3, #0]
   108ae:	2b00      	cmp	r3, #0
   108b0:	d003      	beq.n	108ba <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   108b2:	231d      	movs	r3, #29
   108b4:	18fb      	adds	r3, r7, r3
   108b6:	781b      	ldrb	r3, [r3, #0]
   108b8:	e077      	b.n	109aa <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   108ba:	683b      	ldr	r3, [r7, #0]
   108bc:	7e5b      	ldrb	r3, [r3, #25]
   108be:	2b00      	cmp	r3, #0
   108c0:	d003      	beq.n	108ca <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   108c2:	683b      	ldr	r3, [r7, #0]
   108c4:	7e9a      	ldrb	r2, [r3, #26]
   108c6:	69bb      	ldr	r3, [r7, #24]
   108c8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   108ca:	687b      	ldr	r3, [r7, #4]
   108cc:	0018      	movs	r0, r3
   108ce:	4b3d      	ldr	r3, [pc, #244]	; (109c4 <_usart_set_config+0x2d4>)
   108d0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   108d2:	230a      	movs	r3, #10
   108d4:	18fb      	adds	r3, r7, r3
   108d6:	881a      	ldrh	r2, [r3, #0]
   108d8:	69bb      	ldr	r3, [r7, #24]
   108da:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   108dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   108de:	68fb      	ldr	r3, [r7, #12]
   108e0:	4313      	orrs	r3, r2
   108e2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   108e4:	683b      	ldr	r3, [r7, #0]
   108e6:	2227      	movs	r2, #39	; 0x27
   108e8:	5c9b      	ldrb	r3, [r3, r2]
   108ea:	2201      	movs	r2, #1
   108ec:	4053      	eors	r3, r2
   108ee:	b2db      	uxtb	r3, r3
   108f0:	2b00      	cmp	r3, #0
   108f2:	d003      	beq.n	108fc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   108f6:	2204      	movs	r2, #4
   108f8:	4313      	orrs	r3, r2
   108fa:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   108fc:	683b      	ldr	r3, [r7, #0]
   108fe:	7e5b      	ldrb	r3, [r3, #25]
   10900:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10902:	683b      	ldr	r3, [r7, #0]
   10904:	7f1b      	ldrb	r3, [r3, #28]
   10906:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   10908:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1090a:	683b      	ldr	r3, [r7, #0]
   1090c:	7f5b      	ldrb	r3, [r3, #29]
   1090e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   10910:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   10912:	683b      	ldr	r3, [r7, #0]
   10914:	2124      	movs	r1, #36	; 0x24
   10916:	5c5b      	ldrb	r3, [r3, r1]
   10918:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1091a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   1091c:	683b      	ldr	r3, [r7, #0]
   1091e:	2125      	movs	r1, #37	; 0x25
   10920:	5c5b      	ldrb	r3, [r3, r1]
   10922:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   10924:	4313      	orrs	r3, r2
	ctrlb =  
   10926:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   10928:	683b      	ldr	r3, [r7, #0]
   1092a:	7a9b      	ldrb	r3, [r3, #10]
   1092c:	001a      	movs	r2, r3
   1092e:	6a3b      	ldr	r3, [r7, #32]
   10930:	4313      	orrs	r3, r2
   10932:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   10934:	683b      	ldr	r3, [r7, #0]
   10936:	7adb      	ldrb	r3, [r3, #11]
   10938:	001a      	movs	r2, r3
   1093a:	6a3b      	ldr	r3, [r7, #32]
   1093c:	4313      	orrs	r3, r2
   1093e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   10940:	683b      	ldr	r3, [r7, #0]
   10942:	891b      	ldrh	r3, [r3, #8]
   10944:	2bff      	cmp	r3, #255	; 0xff
   10946:	d00b      	beq.n	10960 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   10948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1094a:	2280      	movs	r2, #128	; 0x80
   1094c:	0452      	lsls	r2, r2, #17
   1094e:	4313      	orrs	r3, r2
   10950:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   10952:	683b      	ldr	r3, [r7, #0]
   10954:	891b      	ldrh	r3, [r3, #8]
   10956:	001a      	movs	r2, r3
   10958:	6a3b      	ldr	r3, [r7, #32]
   1095a:	4313      	orrs	r3, r2
   1095c:	623b      	str	r3, [r7, #32]
   1095e:	e008      	b.n	10972 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   10960:	683b      	ldr	r3, [r7, #0]
   10962:	7edb      	ldrb	r3, [r3, #27]
   10964:	2b00      	cmp	r3, #0
   10966:	d004      	beq.n	10972 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   10968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1096a:	2280      	movs	r2, #128	; 0x80
   1096c:	04d2      	lsls	r2, r2, #19
   1096e:	4313      	orrs	r3, r2
   10970:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   10972:	683b      	ldr	r3, [r7, #0]
   10974:	222c      	movs	r2, #44	; 0x2c
   10976:	5c9b      	ldrb	r3, [r3, r2]
   10978:	2b00      	cmp	r3, #0
   1097a:	d103      	bne.n	10984 <_usart_set_config+0x294>
   1097c:	4b12      	ldr	r3, [pc, #72]	; (109c8 <_usart_set_config+0x2d8>)
   1097e:	4798      	blx	r3
   10980:	1e03      	subs	r3, r0, #0
   10982:	d003      	beq.n	1098c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   10984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10986:	2280      	movs	r2, #128	; 0x80
   10988:	4313      	orrs	r3, r2
   1098a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1098c:	687b      	ldr	r3, [r7, #4]
   1098e:	0018      	movs	r0, r3
   10990:	4b0c      	ldr	r3, [pc, #48]	; (109c4 <_usart_set_config+0x2d4>)
   10992:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   10994:	69bb      	ldr	r3, [r7, #24]
   10996:	6a3a      	ldr	r2, [r7, #32]
   10998:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1099a:	687b      	ldr	r3, [r7, #4]
   1099c:	0018      	movs	r0, r3
   1099e:	4b09      	ldr	r3, [pc, #36]	; (109c4 <_usart_set_config+0x2d4>)
   109a0:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   109a2:	69bb      	ldr	r3, [r7, #24]
   109a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   109a6:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   109a8:	2300      	movs	r3, #0
}
   109aa:	0018      	movs	r0, r3
   109ac:	46bd      	mov	sp, r7
   109ae:	b00a      	add	sp, #40	; 0x28
   109b0:	bdb0      	pop	{r4, r5, r7, pc}
   109b2:	46c0      	nop			; (mov r8, r8)
   109b4:	0000dc51 	.word	0x0000dc51
   109b8:	00013a51 	.word	0x00013a51
   109bc:	0000d7cb 	.word	0x0000d7cb
   109c0:	0000d849 	.word	0x0000d849
   109c4:	000106cd 	.word	0x000106cd
   109c8:	0001068d 	.word	0x0001068d

000109cc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   109cc:	b590      	push	{r4, r7, lr}
   109ce:	b093      	sub	sp, #76	; 0x4c
   109d0:	af00      	add	r7, sp, #0
   109d2:	60f8      	str	r0, [r7, #12]
   109d4:	60b9      	str	r1, [r7, #8]
   109d6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   109d8:	233b      	movs	r3, #59	; 0x3b
   109da:	18fb      	adds	r3, r7, r3
   109dc:	2200      	movs	r2, #0
   109de:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   109e0:	68fb      	ldr	r3, [r7, #12]
   109e2:	68ba      	ldr	r2, [r7, #8]
   109e4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   109e6:	68fb      	ldr	r3, [r7, #12]
   109e8:	681b      	ldr	r3, [r3, #0]
   109ea:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   109ec:	68fb      	ldr	r3, [r7, #12]
   109ee:	681b      	ldr	r3, [r3, #0]
   109f0:	0018      	movs	r0, r3
   109f2:	4b86      	ldr	r3, [pc, #536]	; (10c0c <usart_init+0x240>)
   109f4:	4798      	blx	r3
   109f6:	0003      	movs	r3, r0
   109f8:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   109fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   109fc:	3302      	adds	r3, #2
   109fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   10a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10a02:	3314      	adds	r3, #20
   10a04:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   10a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a08:	681b      	ldr	r3, [r3, #0]
   10a0a:	2201      	movs	r2, #1
   10a0c:	4013      	ands	r3, r2
   10a0e:	d001      	beq.n	10a14 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   10a10:	2305      	movs	r3, #5
   10a12:	e0f6      	b.n	10c02 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   10a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10a16:	681b      	ldr	r3, [r3, #0]
   10a18:	2202      	movs	r2, #2
   10a1a:	4013      	ands	r3, r2
   10a1c:	d001      	beq.n	10a22 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   10a1e:	231c      	movs	r3, #28
   10a20:	e0ef      	b.n	10c02 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   10a22:	2201      	movs	r2, #1
   10a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10a26:	409a      	lsls	r2, r3
   10a28:	0013      	movs	r3, r2
   10a2a:	0019      	movs	r1, r3
   10a2c:	2002      	movs	r0, #2
   10a2e:	4b78      	ldr	r3, [pc, #480]	; (10c10 <usart_init+0x244>)
   10a30:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   10a32:	2324      	movs	r3, #36	; 0x24
   10a34:	18fb      	adds	r3, r7, r3
   10a36:	0018      	movs	r0, r3
   10a38:	4b76      	ldr	r3, [pc, #472]	; (10c14 <usart_init+0x248>)
   10a3a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   10a3c:	687b      	ldr	r3, [r7, #4]
   10a3e:	222d      	movs	r2, #45	; 0x2d
   10a40:	5c9a      	ldrb	r2, [r3, r2]
   10a42:	2324      	movs	r3, #36	; 0x24
   10a44:	18fb      	adds	r3, r7, r3
   10a46:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   10a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10a4a:	b2db      	uxtb	r3, r3
   10a4c:	2224      	movs	r2, #36	; 0x24
   10a4e:	18ba      	adds	r2, r7, r2
   10a50:	0011      	movs	r1, r2
   10a52:	0018      	movs	r0, r3
   10a54:	4b70      	ldr	r3, [pc, #448]	; (10c18 <usart_init+0x24c>)
   10a56:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   10a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10a5a:	b2db      	uxtb	r3, r3
   10a5c:	0018      	movs	r0, r3
   10a5e:	4b6f      	ldr	r3, [pc, #444]	; (10c1c <usart_init+0x250>)
   10a60:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   10a62:	687b      	ldr	r3, [r7, #4]
   10a64:	222d      	movs	r2, #45	; 0x2d
   10a66:	5c9b      	ldrb	r3, [r3, r2]
   10a68:	2100      	movs	r1, #0
   10a6a:	0018      	movs	r0, r3
   10a6c:	4b6c      	ldr	r3, [pc, #432]	; (10c20 <usart_init+0x254>)
   10a6e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   10a70:	687b      	ldr	r3, [r7, #4]
   10a72:	7ada      	ldrb	r2, [r3, #11]
   10a74:	68fb      	ldr	r3, [r7, #12]
   10a76:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   10a78:	687b      	ldr	r3, [r7, #4]
   10a7a:	2224      	movs	r2, #36	; 0x24
   10a7c:	5c9a      	ldrb	r2, [r3, r2]
   10a7e:	68fb      	ldr	r3, [r7, #12]
   10a80:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   10a82:	687b      	ldr	r3, [r7, #4]
   10a84:	2225      	movs	r2, #37	; 0x25
   10a86:	5c9a      	ldrb	r2, [r3, r2]
   10a88:	68fb      	ldr	r3, [r7, #12]
   10a8a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   10a8c:	687b      	ldr	r3, [r7, #4]
   10a8e:	7eda      	ldrb	r2, [r3, #27]
   10a90:	68fb      	ldr	r3, [r7, #12]
   10a92:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   10a94:	687b      	ldr	r3, [r7, #4]
   10a96:	7f1a      	ldrb	r2, [r3, #28]
   10a98:	68fb      	ldr	r3, [r7, #12]
   10a9a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   10a9c:	233b      	movs	r3, #59	; 0x3b
   10a9e:	18fc      	adds	r4, r7, r3
   10aa0:	687a      	ldr	r2, [r7, #4]
   10aa2:	68fb      	ldr	r3, [r7, #12]
   10aa4:	0011      	movs	r1, r2
   10aa6:	0018      	movs	r0, r3
   10aa8:	4b5e      	ldr	r3, [pc, #376]	; (10c24 <usart_init+0x258>)
   10aaa:	4798      	blx	r3
   10aac:	0003      	movs	r3, r0
   10aae:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   10ab0:	233b      	movs	r3, #59	; 0x3b
   10ab2:	18fb      	adds	r3, r7, r3
   10ab4:	781b      	ldrb	r3, [r3, #0]
   10ab6:	2b00      	cmp	r3, #0
   10ab8:	d003      	beq.n	10ac2 <usart_init+0xf6>
		return status_code;
   10aba:	233b      	movs	r3, #59	; 0x3b
   10abc:	18fb      	adds	r3, r7, r3
   10abe:	781b      	ldrb	r3, [r3, #0]
   10ac0:	e09f      	b.n	10c02 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   10ac2:	2320      	movs	r3, #32
   10ac4:	18fb      	adds	r3, r7, r3
   10ac6:	0018      	movs	r0, r3
   10ac8:	4b57      	ldr	r3, [pc, #348]	; (10c28 <usart_init+0x25c>)
   10aca:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   10acc:	2320      	movs	r3, #32
   10ace:	18fb      	adds	r3, r7, r3
   10ad0:	2200      	movs	r2, #0
   10ad2:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   10ad4:	2320      	movs	r3, #32
   10ad6:	18fb      	adds	r3, r7, r3
   10ad8:	2200      	movs	r2, #0
   10ada:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   10adc:	687b      	ldr	r3, [r7, #4]
   10ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   10ae0:	2310      	movs	r3, #16
   10ae2:	18fb      	adds	r3, r7, r3
   10ae4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   10ae6:	687b      	ldr	r3, [r7, #4]
   10ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   10aea:	2310      	movs	r3, #16
   10aec:	18fb      	adds	r3, r7, r3
   10aee:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   10af0:	687b      	ldr	r3, [r7, #4]
   10af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   10af4:	2310      	movs	r3, #16
   10af6:	18fb      	adds	r3, r7, r3
   10af8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   10afa:	687b      	ldr	r3, [r7, #4]
   10afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   10afe:	2310      	movs	r3, #16
   10b00:	18fb      	adds	r3, r7, r3
   10b02:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   10b04:	2347      	movs	r3, #71	; 0x47
   10b06:	18fb      	adds	r3, r7, r3
   10b08:	2200      	movs	r2, #0
   10b0a:	701a      	strb	r2, [r3, #0]
   10b0c:	e02c      	b.n	10b68 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   10b0e:	2347      	movs	r3, #71	; 0x47
   10b10:	18fb      	adds	r3, r7, r3
   10b12:	781a      	ldrb	r2, [r3, #0]
   10b14:	2310      	movs	r3, #16
   10b16:	18fb      	adds	r3, r7, r3
   10b18:	0092      	lsls	r2, r2, #2
   10b1a:	58d3      	ldr	r3, [r2, r3]
   10b1c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   10b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b20:	2b00      	cmp	r3, #0
   10b22:	d109      	bne.n	10b38 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   10b24:	2347      	movs	r3, #71	; 0x47
   10b26:	18fb      	adds	r3, r7, r3
   10b28:	781a      	ldrb	r2, [r3, #0]
   10b2a:	68bb      	ldr	r3, [r7, #8]
   10b2c:	0011      	movs	r1, r2
   10b2e:	0018      	movs	r0, r3
   10b30:	4b3e      	ldr	r3, [pc, #248]	; (10c2c <usart_init+0x260>)
   10b32:	4798      	blx	r3
   10b34:	0003      	movs	r3, r0
   10b36:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   10b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b3a:	3301      	adds	r3, #1
   10b3c:	d00d      	beq.n	10b5a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   10b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b40:	b2da      	uxtb	r2, r3
   10b42:	2320      	movs	r3, #32
   10b44:	18fb      	adds	r3, r7, r3
   10b46:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   10b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10b4a:	0c1b      	lsrs	r3, r3, #16
   10b4c:	b2db      	uxtb	r3, r3
   10b4e:	2220      	movs	r2, #32
   10b50:	18ba      	adds	r2, r7, r2
   10b52:	0011      	movs	r1, r2
   10b54:	0018      	movs	r0, r3
   10b56:	4b36      	ldr	r3, [pc, #216]	; (10c30 <usart_init+0x264>)
   10b58:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   10b5a:	2347      	movs	r3, #71	; 0x47
   10b5c:	18fb      	adds	r3, r7, r3
   10b5e:	781a      	ldrb	r2, [r3, #0]
   10b60:	2347      	movs	r3, #71	; 0x47
   10b62:	18fb      	adds	r3, r7, r3
   10b64:	3201      	adds	r2, #1
   10b66:	701a      	strb	r2, [r3, #0]
   10b68:	2347      	movs	r3, #71	; 0x47
   10b6a:	18fb      	adds	r3, r7, r3
   10b6c:	781b      	ldrb	r3, [r3, #0]
   10b6e:	2b03      	cmp	r3, #3
   10b70:	d9cd      	bls.n	10b0e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   10b72:	2300      	movs	r3, #0
   10b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   10b76:	e00a      	b.n	10b8e <usart_init+0x1c2>
		module->callback[i]            = NULL;
   10b78:	68fa      	ldr	r2, [r7, #12]
   10b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b7c:	3302      	adds	r3, #2
   10b7e:	009b      	lsls	r3, r3, #2
   10b80:	18d3      	adds	r3, r2, r3
   10b82:	3304      	adds	r3, #4
   10b84:	2200      	movs	r2, #0
   10b86:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   10b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b8a:	3301      	adds	r3, #1
   10b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   10b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10b90:	2b05      	cmp	r3, #5
   10b92:	d9f1      	bls.n	10b78 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   10b94:	68fb      	ldr	r3, [r7, #12]
   10b96:	2200      	movs	r2, #0
   10b98:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   10b9a:	68fb      	ldr	r3, [r7, #12]
   10b9c:	2200      	movs	r2, #0
   10b9e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   10ba0:	68fb      	ldr	r3, [r7, #12]
   10ba2:	2200      	movs	r2, #0
   10ba4:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   10ba6:	68fb      	ldr	r3, [r7, #12]
   10ba8:	2200      	movs	r2, #0
   10baa:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   10bac:	68fb      	ldr	r3, [r7, #12]
   10bae:	2230      	movs	r2, #48	; 0x30
   10bb0:	2100      	movs	r1, #0
   10bb2:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   10bb4:	68fb      	ldr	r3, [r7, #12]
   10bb6:	2231      	movs	r2, #49	; 0x31
   10bb8:	2100      	movs	r1, #0
   10bba:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   10bbc:	68fb      	ldr	r3, [r7, #12]
   10bbe:	2232      	movs	r2, #50	; 0x32
   10bc0:	2100      	movs	r1, #0
   10bc2:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   10bc4:	68fb      	ldr	r3, [r7, #12]
   10bc6:	2233      	movs	r2, #51	; 0x33
   10bc8:	2100      	movs	r1, #0
   10bca:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   10bcc:	68fb      	ldr	r3, [r7, #12]
   10bce:	681b      	ldr	r3, [r3, #0]
   10bd0:	2227      	movs	r2, #39	; 0x27
   10bd2:	18bc      	adds	r4, r7, r2
   10bd4:	0018      	movs	r0, r3
   10bd6:	4b0d      	ldr	r3, [pc, #52]	; (10c0c <usart_init+0x240>)
   10bd8:	4798      	blx	r3
   10bda:	0003      	movs	r3, r0
   10bdc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   10bde:	4a15      	ldr	r2, [pc, #84]	; (10c34 <usart_init+0x268>)
   10be0:	2327      	movs	r3, #39	; 0x27
   10be2:	18fb      	adds	r3, r7, r3
   10be4:	781b      	ldrb	r3, [r3, #0]
   10be6:	0011      	movs	r1, r2
   10be8:	0018      	movs	r0, r3
   10bea:	4b13      	ldr	r3, [pc, #76]	; (10c38 <usart_init+0x26c>)
   10bec:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   10bee:	2327      	movs	r3, #39	; 0x27
   10bf0:	18fb      	adds	r3, r7, r3
   10bf2:	781a      	ldrb	r2, [r3, #0]
   10bf4:	4b11      	ldr	r3, [pc, #68]	; (10c3c <usart_init+0x270>)
   10bf6:	0092      	lsls	r2, r2, #2
   10bf8:	68f9      	ldr	r1, [r7, #12]
   10bfa:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   10bfc:	233b      	movs	r3, #59	; 0x3b
   10bfe:	18fb      	adds	r3, r7, r3
   10c00:	781b      	ldrb	r3, [r3, #0]
}
   10c02:	0018      	movs	r0, r3
   10c04:	46bd      	mov	sp, r7
   10c06:	b013      	add	sp, #76	; 0x4c
   10c08:	bd90      	pop	{r4, r7, pc}
   10c0a:	46c0      	nop			; (mov r8, r8)
   10c0c:	0000dc51 	.word	0x0000dc51
   10c10:	00010609 	.word	0x00010609
   10c14:	000105f1 	.word	0x000105f1
   10c18:	0001392d 	.word	0x0001392d
   10c1c:	00013971 	.word	0x00013971
   10c20:	0000da09 	.word	0x0000da09
   10c24:	000106f1 	.word	0x000106f1
   10c28:	00010665 	.word	0x00010665
   10c2c:	0000da95 	.word	0x0000da95
   10c30:	00013c19 	.word	0x00013c19
   10c34:	00010e15 	.word	0x00010e15
   10c38:	00011169 	.word	0x00011169
   10c3c:	20000918 	.word	0x20000918

00010c40 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   10c40:	b580      	push	{r7, lr}
   10c42:	b084      	sub	sp, #16
   10c44:	af00      	add	r7, sp, #0
   10c46:	6078      	str	r0, [r7, #4]
   10c48:	000a      	movs	r2, r1
   10c4a:	1cbb      	adds	r3, r7, #2
   10c4c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10c4e:	687b      	ldr	r3, [r7, #4]
   10c50:	681b      	ldr	r3, [r3, #0]
   10c52:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10c54:	687b      	ldr	r3, [r7, #4]
   10c56:	79db      	ldrb	r3, [r3, #7]
   10c58:	2201      	movs	r2, #1
   10c5a:	4053      	eors	r3, r2
   10c5c:	b2db      	uxtb	r3, r3
   10c5e:	2b00      	cmp	r3, #0
   10c60:	d001      	beq.n	10c66 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   10c62:	231c      	movs	r3, #28
   10c64:	e017      	b.n	10c96 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   10c66:	687b      	ldr	r3, [r7, #4]
   10c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10c6a:	b29b      	uxth	r3, r3
   10c6c:	2b00      	cmp	r3, #0
   10c6e:	d001      	beq.n	10c74 <usart_write_wait+0x34>
		return STATUS_BUSY;
   10c70:	2305      	movs	r3, #5
   10c72:	e010      	b.n	10c96 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10c74:	687b      	ldr	r3, [r7, #4]
   10c76:	0018      	movs	r0, r3
   10c78:	4b09      	ldr	r3, [pc, #36]	; (10ca0 <usart_write_wait+0x60>)
   10c7a:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   10c7c:	68fb      	ldr	r3, [r7, #12]
   10c7e:	1cba      	adds	r2, r7, #2
   10c80:	8812      	ldrh	r2, [r2, #0]
   10c82:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10c84:	46c0      	nop			; (mov r8, r8)
   10c86:	68fb      	ldr	r3, [r7, #12]
   10c88:	7e1b      	ldrb	r3, [r3, #24]
   10c8a:	b2db      	uxtb	r3, r3
   10c8c:	001a      	movs	r2, r3
   10c8e:	2302      	movs	r3, #2
   10c90:	4013      	ands	r3, r2
   10c92:	d0f8      	beq.n	10c86 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   10c94:	2300      	movs	r3, #0
}
   10c96:	0018      	movs	r0, r3
   10c98:	46bd      	mov	sp, r7
   10c9a:	b004      	add	sp, #16
   10c9c:	bd80      	pop	{r7, pc}
   10c9e:	46c0      	nop			; (mov r8, r8)
   10ca0:	000106cd 	.word	0x000106cd

00010ca4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   10ca4:	b580      	push	{r7, lr}
   10ca6:	b08a      	sub	sp, #40	; 0x28
   10ca8:	af00      	add	r7, sp, #0
   10caa:	60f8      	str	r0, [r7, #12]
   10cac:	60b9      	str	r1, [r7, #8]
   10cae:	1dbb      	adds	r3, r7, #6
   10cb0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
   10cb2:	1dbb      	adds	r3, r7, #6
   10cb4:	881b      	ldrh	r3, [r3, #0]
   10cb6:	2b00      	cmp	r3, #0
   10cb8:	d101      	bne.n	10cbe <usart_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
   10cba:	2317      	movs	r3, #23
   10cbc:	e07e      	b.n	10dbc <usart_write_buffer_wait+0x118>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10cbe:	68fb      	ldr	r3, [r7, #12]
   10cc0:	79db      	ldrb	r3, [r3, #7]
   10cc2:	2201      	movs	r2, #1
   10cc4:	4053      	eors	r3, r2
   10cc6:	b2db      	uxtb	r3, r3
   10cc8:	2b00      	cmp	r3, #0
   10cca:	d001      	beq.n	10cd0 <usart_write_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
   10ccc:	231c      	movs	r3, #28
   10cce:	e075      	b.n	10dbc <usart_write_buffer_wait+0x118>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10cd0:	68fb      	ldr	r3, [r7, #12]
   10cd2:	681b      	ldr	r3, [r3, #0]
   10cd4:	617b      	str	r3, [r7, #20]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   10cd6:	68fb      	ldr	r3, [r7, #12]
   10cd8:	0018      	movs	r0, r3
   10cda:	4b3a      	ldr	r3, [pc, #232]	; (10dc4 <usart_write_buffer_wait+0x120>)
   10cdc:	4798      	blx	r3

	uint16_t tx_pos = 0;
   10cde:	2326      	movs	r3, #38	; 0x26
   10ce0:	18fb      	adds	r3, r7, r3
   10ce2:	2200      	movs	r2, #0
   10ce4:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being transferred */
	while (length--) {
   10ce6:	e048      	b.n	10d7a <usart_write_buffer_wait+0xd6>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10ce8:	2300      	movs	r3, #0
   10cea:	623b      	str	r3, [r7, #32]
   10cec:	e00f      	b.n	10d0e <usart_write_buffer_wait+0x6a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
   10cee:	697b      	ldr	r3, [r7, #20]
   10cf0:	7e1b      	ldrb	r3, [r3, #24]
   10cf2:	b2db      	uxtb	r3, r3
   10cf4:	001a      	movs	r2, r3
   10cf6:	2301      	movs	r3, #1
   10cf8:	4013      	ands	r3, r2
   10cfa:	d10d      	bne.n	10d18 <usart_write_buffer_wait+0x74>
				break;
			} else if (i == USART_TIMEOUT) {
   10cfc:	6a3b      	ldr	r3, [r7, #32]
   10cfe:	4a32      	ldr	r2, [pc, #200]	; (10dc8 <usart_write_buffer_wait+0x124>)
   10d00:	4293      	cmp	r3, r2
   10d02:	d101      	bne.n	10d08 <usart_write_buffer_wait+0x64>
				return STATUS_ERR_TIMEOUT;
   10d04:	2312      	movs	r3, #18
   10d06:	e059      	b.n	10dbc <usart_write_buffer_wait+0x118>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10d08:	6a3b      	ldr	r3, [r7, #32]
   10d0a:	3301      	adds	r3, #1
   10d0c:	623b      	str	r3, [r7, #32]
   10d0e:	6a3b      	ldr	r3, [r7, #32]
   10d10:	4a2d      	ldr	r2, [pc, #180]	; (10dc8 <usart_write_buffer_wait+0x124>)
   10d12:	4293      	cmp	r3, r2
   10d14:	d9eb      	bls.n	10cee <usart_write_buffer_wait+0x4a>
   10d16:	e000      	b.n	10d1a <usart_write_buffer_wait+0x76>
				break;
   10d18:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   10d1a:	2326      	movs	r3, #38	; 0x26
   10d1c:	18fb      	adds	r3, r7, r3
   10d1e:	881b      	ldrh	r3, [r3, #0]
   10d20:	2226      	movs	r2, #38	; 0x26
   10d22:	18ba      	adds	r2, r7, r2
   10d24:	1c59      	adds	r1, r3, #1
   10d26:	8011      	strh	r1, [r2, #0]
   10d28:	001a      	movs	r2, r3
   10d2a:	68bb      	ldr	r3, [r7, #8]
   10d2c:	189b      	adds	r3, r3, r2
   10d2e:	781a      	ldrb	r2, [r3, #0]
   10d30:	231e      	movs	r3, #30
   10d32:	18fb      	adds	r3, r7, r3
   10d34:	801a      	strh	r2, [r3, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10d36:	68fb      	ldr	r3, [r7, #12]
   10d38:	795b      	ldrb	r3, [r3, #5]
   10d3a:	2b01      	cmp	r3, #1
   10d3c:	d115      	bne.n	10d6a <usart_write_buffer_wait+0xc6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   10d3e:	2326      	movs	r3, #38	; 0x26
   10d40:	18fb      	adds	r3, r7, r3
   10d42:	881b      	ldrh	r3, [r3, #0]
   10d44:	2226      	movs	r2, #38	; 0x26
   10d46:	18ba      	adds	r2, r7, r2
   10d48:	1c59      	adds	r1, r3, #1
   10d4a:	8011      	strh	r1, [r2, #0]
   10d4c:	001a      	movs	r2, r3
   10d4e:	68bb      	ldr	r3, [r7, #8]
   10d50:	189b      	adds	r3, r3, r2
   10d52:	781b      	ldrb	r3, [r3, #0]
   10d54:	021b      	lsls	r3, r3, #8
   10d56:	b21a      	sxth	r2, r3
   10d58:	231e      	movs	r3, #30
   10d5a:	18fb      	adds	r3, r7, r3
   10d5c:	2100      	movs	r1, #0
   10d5e:	5e5b      	ldrsh	r3, [r3, r1]
   10d60:	4313      	orrs	r3, r2
   10d62:	b21a      	sxth	r2, r3
   10d64:	231e      	movs	r3, #30
   10d66:	18fb      	adds	r3, r7, r3
   10d68:	801a      	strh	r2, [r3, #0]
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
   10d6a:	231e      	movs	r3, #30
   10d6c:	18fb      	adds	r3, r7, r3
   10d6e:	881a      	ldrh	r2, [r3, #0]
   10d70:	68fb      	ldr	r3, [r7, #12]
   10d72:	0011      	movs	r1, r2
   10d74:	0018      	movs	r0, r3
   10d76:	4b15      	ldr	r3, [pc, #84]	; (10dcc <usart_write_buffer_wait+0x128>)
   10d78:	4798      	blx	r3
	while (length--) {
   10d7a:	1dbb      	adds	r3, r7, #6
   10d7c:	881b      	ldrh	r3, [r3, #0]
   10d7e:	1dba      	adds	r2, r7, #6
   10d80:	1e59      	subs	r1, r3, #1
   10d82:	8011      	strh	r1, [r2, #0]
   10d84:	2b00      	cmp	r3, #0
   10d86:	d1af      	bne.n	10ce8 <usart_write_buffer_wait+0x44>
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10d88:	2300      	movs	r3, #0
   10d8a:	61bb      	str	r3, [r7, #24]
   10d8c:	e00f      	b.n	10dae <usart_write_buffer_wait+0x10a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
   10d8e:	697b      	ldr	r3, [r7, #20]
   10d90:	7e1b      	ldrb	r3, [r3, #24]
   10d92:	b2db      	uxtb	r3, r3
   10d94:	001a      	movs	r2, r3
   10d96:	2302      	movs	r3, #2
   10d98:	4013      	ands	r3, r2
   10d9a:	d10d      	bne.n	10db8 <usart_write_buffer_wait+0x114>
			break;
		} else if (i == USART_TIMEOUT) {
   10d9c:	69bb      	ldr	r3, [r7, #24]
   10d9e:	4a0a      	ldr	r2, [pc, #40]	; (10dc8 <usart_write_buffer_wait+0x124>)
   10da0:	4293      	cmp	r3, r2
   10da2:	d101      	bne.n	10da8 <usart_write_buffer_wait+0x104>
			return STATUS_ERR_TIMEOUT;
   10da4:	2312      	movs	r3, #18
   10da6:	e009      	b.n	10dbc <usart_write_buffer_wait+0x118>
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
   10da8:	69bb      	ldr	r3, [r7, #24]
   10daa:	3301      	adds	r3, #1
   10dac:	61bb      	str	r3, [r7, #24]
   10dae:	69bb      	ldr	r3, [r7, #24]
   10db0:	4a05      	ldr	r2, [pc, #20]	; (10dc8 <usart_write_buffer_wait+0x124>)
   10db2:	4293      	cmp	r3, r2
   10db4:	d9eb      	bls.n	10d8e <usart_write_buffer_wait+0xea>
   10db6:	e000      	b.n	10dba <usart_write_buffer_wait+0x116>
			break;
   10db8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return STATUS_OK;
   10dba:	2300      	movs	r3, #0
}
   10dbc:	0018      	movs	r0, r3
   10dbe:	46bd      	mov	sp, r7
   10dc0:	b00a      	add	sp, #40	; 0x28
   10dc2:	bd80      	pop	{r7, pc}
   10dc4:	000106cd 	.word	0x000106cd
   10dc8:	0000ffff 	.word	0x0000ffff
   10dcc:	00010c41 	.word	0x00010c41

00010dd0 <usart_is_syncing>:
{
   10dd0:	b580      	push	{r7, lr}
   10dd2:	b084      	sub	sp, #16
   10dd4:	af00      	add	r7, sp, #0
   10dd6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10dd8:	687b      	ldr	r3, [r7, #4]
   10dda:	681b      	ldr	r3, [r3, #0]
   10ddc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   10dde:	68fb      	ldr	r3, [r7, #12]
   10de0:	69db      	ldr	r3, [r3, #28]
   10de2:	1e5a      	subs	r2, r3, #1
   10de4:	4193      	sbcs	r3, r2
   10de6:	b2db      	uxtb	r3, r3
}
   10de8:	0018      	movs	r0, r3
   10dea:	46bd      	mov	sp, r7
   10dec:	b004      	add	sp, #16
   10dee:	bd80      	pop	{r7, pc}

00010df0 <_usart_wait_for_sync>:
{
   10df0:	b580      	push	{r7, lr}
   10df2:	b082      	sub	sp, #8
   10df4:	af00      	add	r7, sp, #0
   10df6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   10df8:	46c0      	nop			; (mov r8, r8)
   10dfa:	687b      	ldr	r3, [r7, #4]
   10dfc:	0018      	movs	r0, r3
   10dfe:	4b04      	ldr	r3, [pc, #16]	; (10e10 <_usart_wait_for_sync+0x20>)
   10e00:	4798      	blx	r3
   10e02:	1e03      	subs	r3, r0, #0
   10e04:	d1f9      	bne.n	10dfa <_usart_wait_for_sync+0xa>
}
   10e06:	46c0      	nop			; (mov r8, r8)
   10e08:	46bd      	mov	sp, r7
   10e0a:	b002      	add	sp, #8
   10e0c:	bd80      	pop	{r7, pc}
   10e0e:	46c0      	nop			; (mov r8, r8)
   10e10:	00010dd1 	.word	0x00010dd1

00010e14 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   10e14:	b580      	push	{r7, lr}
   10e16:	b088      	sub	sp, #32
   10e18:	af00      	add	r7, sp, #0
   10e1a:	0002      	movs	r2, r0
   10e1c:	1dfb      	adds	r3, r7, #7
   10e1e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   10e20:	1dfb      	adds	r3, r7, #7
   10e22:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   10e24:	4ba3      	ldr	r3, [pc, #652]	; (110b4 <_usart_interrupt_handler+0x2a0>)
   10e26:	0092      	lsls	r2, r2, #2
   10e28:	58d3      	ldr	r3, [r2, r3]
   10e2a:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   10e2c:	69bb      	ldr	r3, [r7, #24]
   10e2e:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   10e30:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   10e32:	69bb      	ldr	r3, [r7, #24]
   10e34:	0018      	movs	r0, r3
   10e36:	4ba0      	ldr	r3, [pc, #640]	; (110b8 <_usart_interrupt_handler+0x2a4>)
   10e38:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   10e3a:	697b      	ldr	r3, [r7, #20]
   10e3c:	7e1b      	ldrb	r3, [r3, #24]
   10e3e:	b2da      	uxtb	r2, r3
   10e40:	2312      	movs	r3, #18
   10e42:	18fb      	adds	r3, r7, r3
   10e44:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   10e46:	697b      	ldr	r3, [r7, #20]
   10e48:	7d9b      	ldrb	r3, [r3, #22]
   10e4a:	b2db      	uxtb	r3, r3
   10e4c:	b29a      	uxth	r2, r3
   10e4e:	2312      	movs	r3, #18
   10e50:	18fb      	adds	r3, r7, r3
   10e52:	2112      	movs	r1, #18
   10e54:	1879      	adds	r1, r7, r1
   10e56:	8809      	ldrh	r1, [r1, #0]
   10e58:	400a      	ands	r2, r1
   10e5a:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   10e5c:	69bb      	ldr	r3, [r7, #24]
   10e5e:	2230      	movs	r2, #48	; 0x30
   10e60:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   10e62:	69ba      	ldr	r2, [r7, #24]
   10e64:	2131      	movs	r1, #49	; 0x31
   10e66:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   10e68:	4013      	ands	r3, r2
   10e6a:	b2da      	uxtb	r2, r3
   10e6c:	2310      	movs	r3, #16
   10e6e:	18fb      	adds	r3, r7, r3
   10e70:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   10e72:	2312      	movs	r3, #18
   10e74:	18fb      	adds	r3, r7, r3
   10e76:	881b      	ldrh	r3, [r3, #0]
   10e78:	2201      	movs	r2, #1
   10e7a:	4013      	ands	r3, r2
   10e7c:	d044      	beq.n	10f08 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   10e7e:	69bb      	ldr	r3, [r7, #24]
   10e80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10e82:	b29b      	uxth	r3, r3
   10e84:	2b00      	cmp	r3, #0
   10e86:	d03c      	beq.n	10f02 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10e88:	69bb      	ldr	r3, [r7, #24]
   10e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e8c:	781b      	ldrb	r3, [r3, #0]
   10e8e:	b2da      	uxtb	r2, r3
   10e90:	231c      	movs	r3, #28
   10e92:	18fb      	adds	r3, r7, r3
   10e94:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   10e96:	69bb      	ldr	r3, [r7, #24]
   10e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e9a:	1c5a      	adds	r2, r3, #1
   10e9c:	69bb      	ldr	r3, [r7, #24]
   10e9e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10ea0:	69bb      	ldr	r3, [r7, #24]
   10ea2:	795b      	ldrb	r3, [r3, #5]
   10ea4:	2b01      	cmp	r3, #1
   10ea6:	d113      	bne.n	10ed0 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   10ea8:	69bb      	ldr	r3, [r7, #24]
   10eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10eac:	781b      	ldrb	r3, [r3, #0]
   10eae:	b2db      	uxtb	r3, r3
   10eb0:	021b      	lsls	r3, r3, #8
   10eb2:	b21a      	sxth	r2, r3
   10eb4:	231c      	movs	r3, #28
   10eb6:	18fb      	adds	r3, r7, r3
   10eb8:	2100      	movs	r1, #0
   10eba:	5e5b      	ldrsh	r3, [r3, r1]
   10ebc:	4313      	orrs	r3, r2
   10ebe:	b21a      	sxth	r2, r3
   10ec0:	231c      	movs	r3, #28
   10ec2:	18fb      	adds	r3, r7, r3
   10ec4:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   10ec6:	69bb      	ldr	r3, [r7, #24]
   10ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10eca:	1c5a      	adds	r2, r3, #1
   10ecc:	69bb      	ldr	r3, [r7, #24]
   10ece:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   10ed0:	231c      	movs	r3, #28
   10ed2:	18fb      	adds	r3, r7, r3
   10ed4:	881b      	ldrh	r3, [r3, #0]
   10ed6:	05db      	lsls	r3, r3, #23
   10ed8:	0ddb      	lsrs	r3, r3, #23
   10eda:	b29a      	uxth	r2, r3
   10edc:	697b      	ldr	r3, [r7, #20]
   10ede:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   10ee0:	69bb      	ldr	r3, [r7, #24]
   10ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   10ee4:	b29b      	uxth	r3, r3
   10ee6:	3b01      	subs	r3, #1
   10ee8:	b29b      	uxth	r3, r3
   10eea:	69ba      	ldr	r2, [r7, #24]
   10eec:	1c19      	adds	r1, r3, #0
   10eee:	85d1      	strh	r1, [r2, #46]	; 0x2e
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d109      	bne.n	10f08 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10ef4:	697b      	ldr	r3, [r7, #20]
   10ef6:	2201      	movs	r2, #1
   10ef8:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   10efa:	697b      	ldr	r3, [r7, #20]
   10efc:	2202      	movs	r2, #2
   10efe:	759a      	strb	r2, [r3, #22]
   10f00:	e002      	b.n	10f08 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10f02:	697b      	ldr	r3, [r7, #20]
   10f04:	2201      	movs	r2, #1
   10f06:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   10f08:	2312      	movs	r3, #18
   10f0a:	18fb      	adds	r3, r7, r3
   10f0c:	881b      	ldrh	r3, [r3, #0]
   10f0e:	2202      	movs	r2, #2
   10f10:	4013      	ands	r3, r2
   10f12:	d011      	beq.n	10f38 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   10f14:	697b      	ldr	r3, [r7, #20]
   10f16:	2202      	movs	r2, #2
   10f18:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   10f1a:	69bb      	ldr	r3, [r7, #24]
   10f1c:	2233      	movs	r2, #51	; 0x33
   10f1e:	2100      	movs	r1, #0
   10f20:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   10f22:	2310      	movs	r3, #16
   10f24:	18fb      	adds	r3, r7, r3
   10f26:	881b      	ldrh	r3, [r3, #0]
   10f28:	2201      	movs	r2, #1
   10f2a:	4013      	ands	r3, r2
   10f2c:	d004      	beq.n	10f38 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   10f2e:	69bb      	ldr	r3, [r7, #24]
   10f30:	68db      	ldr	r3, [r3, #12]
   10f32:	69ba      	ldr	r2, [r7, #24]
   10f34:	0010      	movs	r0, r2
   10f36:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   10f38:	2312      	movs	r3, #18
   10f3a:	18fb      	adds	r3, r7, r3
   10f3c:	881b      	ldrh	r3, [r3, #0]
   10f3e:	2204      	movs	r2, #4
   10f40:	4013      	ands	r3, r2
   10f42:	d100      	bne.n	10f46 <_usart_interrupt_handler+0x132>
   10f44:	e0bd      	b.n	110c2 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   10f46:	69bb      	ldr	r3, [r7, #24]
   10f48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   10f4a:	b29b      	uxth	r3, r3
   10f4c:	2b00      	cmp	r3, #0
   10f4e:	d100      	bne.n	10f52 <_usart_interrupt_handler+0x13e>
   10f50:	e0b4      	b.n	110bc <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10f52:	697b      	ldr	r3, [r7, #20]
   10f54:	8b5b      	ldrh	r3, [r3, #26]
   10f56:	b29b      	uxth	r3, r3
   10f58:	b2da      	uxtb	r2, r3
   10f5a:	231f      	movs	r3, #31
   10f5c:	18fb      	adds	r3, r7, r3
   10f5e:	213f      	movs	r1, #63	; 0x3f
   10f60:	400a      	ands	r2, r1
   10f62:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   10f64:	231f      	movs	r3, #31
   10f66:	18fb      	adds	r3, r7, r3
   10f68:	781b      	ldrb	r3, [r3, #0]
   10f6a:	2208      	movs	r2, #8
   10f6c:	4013      	ands	r3, r2
   10f6e:	d007      	beq.n	10f80 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   10f70:	231f      	movs	r3, #31
   10f72:	18fb      	adds	r3, r7, r3
   10f74:	221f      	movs	r2, #31
   10f76:	18ba      	adds	r2, r7, r2
   10f78:	7812      	ldrb	r2, [r2, #0]
   10f7a:	2108      	movs	r1, #8
   10f7c:	438a      	bics	r2, r1
   10f7e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   10f80:	231f      	movs	r3, #31
   10f82:	18fb      	adds	r3, r7, r3
   10f84:	781b      	ldrb	r3, [r3, #0]
   10f86:	2b00      	cmp	r3, #0
   10f88:	d050      	beq.n	1102c <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   10f8a:	231f      	movs	r3, #31
   10f8c:	18fb      	adds	r3, r7, r3
   10f8e:	781b      	ldrb	r3, [r3, #0]
   10f90:	2202      	movs	r2, #2
   10f92:	4013      	ands	r3, r2
   10f94:	d007      	beq.n	10fa6 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   10f96:	69bb      	ldr	r3, [r7, #24]
   10f98:	2232      	movs	r2, #50	; 0x32
   10f9a:	211a      	movs	r1, #26
   10f9c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   10f9e:	697b      	ldr	r3, [r7, #20]
   10fa0:	2202      	movs	r2, #2
   10fa2:	835a      	strh	r2, [r3, #26]
   10fa4:	e036      	b.n	11014 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   10fa6:	231f      	movs	r3, #31
   10fa8:	18fb      	adds	r3, r7, r3
   10faa:	781b      	ldrb	r3, [r3, #0]
   10fac:	2204      	movs	r2, #4
   10fae:	4013      	ands	r3, r2
   10fb0:	d007      	beq.n	10fc2 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   10fb2:	69bb      	ldr	r3, [r7, #24]
   10fb4:	2232      	movs	r2, #50	; 0x32
   10fb6:	211e      	movs	r1, #30
   10fb8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   10fba:	697b      	ldr	r3, [r7, #20]
   10fbc:	2204      	movs	r2, #4
   10fbe:	835a      	strh	r2, [r3, #26]
   10fc0:	e028      	b.n	11014 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   10fc2:	231f      	movs	r3, #31
   10fc4:	18fb      	adds	r3, r7, r3
   10fc6:	781b      	ldrb	r3, [r3, #0]
   10fc8:	2201      	movs	r2, #1
   10fca:	4013      	ands	r3, r2
   10fcc:	d007      	beq.n	10fde <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   10fce:	69bb      	ldr	r3, [r7, #24]
   10fd0:	2232      	movs	r2, #50	; 0x32
   10fd2:	2113      	movs	r1, #19
   10fd4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   10fd6:	697b      	ldr	r3, [r7, #20]
   10fd8:	2201      	movs	r2, #1
   10fda:	835a      	strh	r2, [r3, #26]
   10fdc:	e01a      	b.n	11014 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   10fde:	231f      	movs	r3, #31
   10fe0:	18fb      	adds	r3, r7, r3
   10fe2:	781b      	ldrb	r3, [r3, #0]
   10fe4:	2210      	movs	r2, #16
   10fe6:	4013      	ands	r3, r2
   10fe8:	d007      	beq.n	10ffa <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   10fea:	69bb      	ldr	r3, [r7, #24]
   10fec:	2232      	movs	r2, #50	; 0x32
   10fee:	2142      	movs	r1, #66	; 0x42
   10ff0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   10ff2:	697b      	ldr	r3, [r7, #20]
   10ff4:	2210      	movs	r2, #16
   10ff6:	835a      	strh	r2, [r3, #26]
   10ff8:	e00c      	b.n	11014 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   10ffa:	231f      	movs	r3, #31
   10ffc:	18fb      	adds	r3, r7, r3
   10ffe:	781b      	ldrb	r3, [r3, #0]
   11000:	2220      	movs	r2, #32
   11002:	4013      	ands	r3, r2
   11004:	d006      	beq.n	11014 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   11006:	69bb      	ldr	r3, [r7, #24]
   11008:	2232      	movs	r2, #50	; 0x32
   1100a:	2141      	movs	r1, #65	; 0x41
   1100c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1100e:	697b      	ldr	r3, [r7, #20]
   11010:	2220      	movs	r2, #32
   11012:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   11014:	2310      	movs	r3, #16
   11016:	18fb      	adds	r3, r7, r3
   11018:	881b      	ldrh	r3, [r3, #0]
   1101a:	2204      	movs	r2, #4
   1101c:	4013      	ands	r3, r2
				if (callback_status
   1101e:	d050      	beq.n	110c2 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   11020:	69bb      	ldr	r3, [r7, #24]
   11022:	695b      	ldr	r3, [r3, #20]
   11024:	69ba      	ldr	r2, [r7, #24]
   11026:	0010      	movs	r0, r2
   11028:	4798      	blx	r3
   1102a:	e04a      	b.n	110c2 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   1102c:	697b      	ldr	r3, [r7, #20]
   1102e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   11030:	b29a      	uxth	r2, r3
   11032:	230e      	movs	r3, #14
   11034:	18fb      	adds	r3, r7, r3
   11036:	05d2      	lsls	r2, r2, #23
   11038:	0dd2      	lsrs	r2, r2, #23
   1103a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   1103c:	69bb      	ldr	r3, [r7, #24]
   1103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11040:	220e      	movs	r2, #14
   11042:	18ba      	adds	r2, r7, r2
   11044:	8812      	ldrh	r2, [r2, #0]
   11046:	b2d2      	uxtb	r2, r2
   11048:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   1104a:	69bb      	ldr	r3, [r7, #24]
   1104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1104e:	1c5a      	adds	r2, r3, #1
   11050:	69bb      	ldr	r3, [r7, #24]
   11052:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   11054:	69bb      	ldr	r3, [r7, #24]
   11056:	795b      	ldrb	r3, [r3, #5]
   11058:	2b01      	cmp	r3, #1
   1105a:	d10d      	bne.n	11078 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   1105c:	69bb      	ldr	r3, [r7, #24]
   1105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11060:	220e      	movs	r2, #14
   11062:	18ba      	adds	r2, r7, r2
   11064:	8812      	ldrh	r2, [r2, #0]
   11066:	0a12      	lsrs	r2, r2, #8
   11068:	b292      	uxth	r2, r2
   1106a:	b2d2      	uxtb	r2, r2
   1106c:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   1106e:	69bb      	ldr	r3, [r7, #24]
   11070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11072:	1c5a      	adds	r2, r3, #1
   11074:	69bb      	ldr	r3, [r7, #24]
   11076:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   11078:	69bb      	ldr	r3, [r7, #24]
   1107a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1107c:	b29b      	uxth	r3, r3
   1107e:	3b01      	subs	r3, #1
   11080:	b29b      	uxth	r3, r3
   11082:	69ba      	ldr	r2, [r7, #24]
   11084:	1c19      	adds	r1, r3, #0
   11086:	8591      	strh	r1, [r2, #44]	; 0x2c
   11088:	2b00      	cmp	r3, #0
   1108a:	d11a      	bne.n	110c2 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1108c:	697b      	ldr	r3, [r7, #20]
   1108e:	2204      	movs	r2, #4
   11090:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   11092:	69bb      	ldr	r3, [r7, #24]
   11094:	2232      	movs	r2, #50	; 0x32
   11096:	2100      	movs	r1, #0
   11098:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   1109a:	2310      	movs	r3, #16
   1109c:	18fb      	adds	r3, r7, r3
   1109e:	881b      	ldrh	r3, [r3, #0]
   110a0:	2202      	movs	r2, #2
   110a2:	4013      	ands	r3, r2
					if (callback_status
   110a4:	d00d      	beq.n	110c2 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   110a6:	69bb      	ldr	r3, [r7, #24]
   110a8:	691b      	ldr	r3, [r3, #16]
   110aa:	69ba      	ldr	r2, [r7, #24]
   110ac:	0010      	movs	r0, r2
   110ae:	4798      	blx	r3
   110b0:	e007      	b.n	110c2 <_usart_interrupt_handler+0x2ae>
   110b2:	46c0      	nop			; (mov r8, r8)
   110b4:	20000918 	.word	0x20000918
   110b8:	00010df1 	.word	0x00010df1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   110bc:	697b      	ldr	r3, [r7, #20]
   110be:	2204      	movs	r2, #4
   110c0:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   110c2:	2312      	movs	r3, #18
   110c4:	18fb      	adds	r3, r7, r3
   110c6:	881b      	ldrh	r3, [r3, #0]
   110c8:	2210      	movs	r2, #16
   110ca:	4013      	ands	r3, r2
   110cc:	d010      	beq.n	110f0 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   110ce:	697b      	ldr	r3, [r7, #20]
   110d0:	2210      	movs	r2, #16
   110d2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   110d4:	697b      	ldr	r3, [r7, #20]
   110d6:	2210      	movs	r2, #16
   110d8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   110da:	2310      	movs	r3, #16
   110dc:	18fb      	adds	r3, r7, r3
   110de:	881b      	ldrh	r3, [r3, #0]
   110e0:	2210      	movs	r2, #16
   110e2:	4013      	ands	r3, r2
   110e4:	d004      	beq.n	110f0 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   110e6:	69bb      	ldr	r3, [r7, #24]
   110e8:	69db      	ldr	r3, [r3, #28]
   110ea:	69ba      	ldr	r2, [r7, #24]
   110ec:	0010      	movs	r0, r2
   110ee:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   110f0:	2312      	movs	r3, #18
   110f2:	18fb      	adds	r3, r7, r3
   110f4:	881b      	ldrh	r3, [r3, #0]
   110f6:	2220      	movs	r2, #32
   110f8:	4013      	ands	r3, r2
   110fa:	d010      	beq.n	1111e <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   110fc:	697b      	ldr	r3, [r7, #20]
   110fe:	2220      	movs	r2, #32
   11100:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   11102:	697b      	ldr	r3, [r7, #20]
   11104:	2220      	movs	r2, #32
   11106:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   11108:	2310      	movs	r3, #16
   1110a:	18fb      	adds	r3, r7, r3
   1110c:	881b      	ldrh	r3, [r3, #0]
   1110e:	2208      	movs	r2, #8
   11110:	4013      	ands	r3, r2
   11112:	d004      	beq.n	1111e <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   11114:	69bb      	ldr	r3, [r7, #24]
   11116:	699b      	ldr	r3, [r3, #24]
   11118:	69ba      	ldr	r2, [r7, #24]
   1111a:	0010      	movs	r0, r2
   1111c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   1111e:	2312      	movs	r3, #18
   11120:	18fb      	adds	r3, r7, r3
   11122:	881b      	ldrh	r3, [r3, #0]
   11124:	2208      	movs	r2, #8
   11126:	4013      	ands	r3, r2
   11128:	d010      	beq.n	1114c <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   1112a:	697b      	ldr	r3, [r7, #20]
   1112c:	2208      	movs	r2, #8
   1112e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   11130:	697b      	ldr	r3, [r7, #20]
   11132:	2208      	movs	r2, #8
   11134:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   11136:	2310      	movs	r3, #16
   11138:	18fb      	adds	r3, r7, r3
   1113a:	881b      	ldrh	r3, [r3, #0]
   1113c:	2220      	movs	r2, #32
   1113e:	4013      	ands	r3, r2
   11140:	d004      	beq.n	1114c <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   11142:	69bb      	ldr	r3, [r7, #24]
   11144:	6a1b      	ldr	r3, [r3, #32]
   11146:	69ba      	ldr	r2, [r7, #24]
   11148:	0010      	movs	r0, r2
   1114a:	4798      	blx	r3
		}
	}
#endif
}
   1114c:	46c0      	nop			; (mov r8, r8)
   1114e:	46bd      	mov	sp, r7
   11150:	b008      	add	sp, #32
   11152:	bd80      	pop	{r7, pc}

00011154 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   11154:	b580      	push	{r7, lr}
   11156:	b082      	sub	sp, #8
   11158:	af00      	add	r7, sp, #0
   1115a:	0002      	movs	r2, r0
   1115c:	1dfb      	adds	r3, r7, #7
   1115e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   11160:	46c0      	nop			; (mov r8, r8)
   11162:	46bd      	mov	sp, r7
   11164:	b002      	add	sp, #8
   11166:	bd80      	pop	{r7, pc}

00011168 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   11168:	b580      	push	{r7, lr}
   1116a:	b084      	sub	sp, #16
   1116c:	af00      	add	r7, sp, #0
   1116e:	0002      	movs	r2, r0
   11170:	6039      	str	r1, [r7, #0]
   11172:	1dfb      	adds	r3, r7, #7
   11174:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   11176:	4b13      	ldr	r3, [pc, #76]	; (111c4 <_sercom_set_handler+0x5c>)
   11178:	781b      	ldrb	r3, [r3, #0]
   1117a:	2201      	movs	r2, #1
   1117c:	4053      	eors	r3, r2
   1117e:	b2db      	uxtb	r3, r3
   11180:	2b00      	cmp	r3, #0
   11182:	d015      	beq.n	111b0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   11184:	2300      	movs	r3, #0
   11186:	60fb      	str	r3, [r7, #12]
   11188:	e00c      	b.n	111a4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1118a:	4b0f      	ldr	r3, [pc, #60]	; (111c8 <_sercom_set_handler+0x60>)
   1118c:	68fa      	ldr	r2, [r7, #12]
   1118e:	0092      	lsls	r2, r2, #2
   11190:	490e      	ldr	r1, [pc, #56]	; (111cc <_sercom_set_handler+0x64>)
   11192:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   11194:	4b0e      	ldr	r3, [pc, #56]	; (111d0 <_sercom_set_handler+0x68>)
   11196:	68fa      	ldr	r2, [r7, #12]
   11198:	0092      	lsls	r2, r2, #2
   1119a:	2100      	movs	r1, #0
   1119c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1119e:	68fb      	ldr	r3, [r7, #12]
   111a0:	3301      	adds	r3, #1
   111a2:	60fb      	str	r3, [r7, #12]
   111a4:	68fb      	ldr	r3, [r7, #12]
   111a6:	2b05      	cmp	r3, #5
   111a8:	d9ef      	bls.n	1118a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   111aa:	4b06      	ldr	r3, [pc, #24]	; (111c4 <_sercom_set_handler+0x5c>)
   111ac:	2201      	movs	r2, #1
   111ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   111b0:	1dfb      	adds	r3, r7, #7
   111b2:	781a      	ldrb	r2, [r3, #0]
   111b4:	4b04      	ldr	r3, [pc, #16]	; (111c8 <_sercom_set_handler+0x60>)
   111b6:	0092      	lsls	r2, r2, #2
   111b8:	6839      	ldr	r1, [r7, #0]
   111ba:	50d1      	str	r1, [r2, r3]
}
   111bc:	46c0      	nop			; (mov r8, r8)
   111be:	46bd      	mov	sp, r7
   111c0:	b004      	add	sp, #16
   111c2:	bd80      	pop	{r7, pc}
   111c4:	200003f8 	.word	0x200003f8
   111c8:	200003fc 	.word	0x200003fc
   111cc:	00011155 	.word	0x00011155
   111d0:	20000918 	.word	0x20000918

000111d4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   111d4:	b590      	push	{r4, r7, lr}
   111d6:	b085      	sub	sp, #20
   111d8:	af00      	add	r7, sp, #0
   111da:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   111dc:	2308      	movs	r3, #8
   111de:	18fb      	adds	r3, r7, r3
   111e0:	4a0b      	ldr	r2, [pc, #44]	; (11210 <_sercom_get_interrupt_vector+0x3c>)
   111e2:	6811      	ldr	r1, [r2, #0]
   111e4:	6019      	str	r1, [r3, #0]
   111e6:	8892      	ldrh	r2, [r2, #4]
   111e8:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   111ea:	230f      	movs	r3, #15
   111ec:	18fc      	adds	r4, r7, r3
   111ee:	687b      	ldr	r3, [r7, #4]
   111f0:	0018      	movs	r0, r3
   111f2:	4b08      	ldr	r3, [pc, #32]	; (11214 <_sercom_get_interrupt_vector+0x40>)
   111f4:	4798      	blx	r3
   111f6:	0003      	movs	r3, r0
   111f8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   111fa:	230f      	movs	r3, #15
   111fc:	18fb      	adds	r3, r7, r3
   111fe:	781b      	ldrb	r3, [r3, #0]
   11200:	2208      	movs	r2, #8
   11202:	18ba      	adds	r2, r7, r2
   11204:	5cd3      	ldrb	r3, [r2, r3]
   11206:	b25b      	sxtb	r3, r3
}
   11208:	0018      	movs	r0, r3
   1120a:	46bd      	mov	sp, r7
   1120c:	b005      	add	sp, #20
   1120e:	bd90      	pop	{r4, r7, pc}
   11210:	000198c8 	.word	0x000198c8
   11214:	0000dc51 	.word	0x0000dc51

00011218 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   11218:	b580      	push	{r7, lr}
   1121a:	af00      	add	r7, sp, #0
   1121c:	4b03      	ldr	r3, [pc, #12]	; (1122c <SERCOM0_Handler+0x14>)
   1121e:	681b      	ldr	r3, [r3, #0]
   11220:	2000      	movs	r0, #0
   11222:	4798      	blx	r3
   11224:	46c0      	nop			; (mov r8, r8)
   11226:	46bd      	mov	sp, r7
   11228:	bd80      	pop	{r7, pc}
   1122a:	46c0      	nop			; (mov r8, r8)
   1122c:	200003fc 	.word	0x200003fc

00011230 <SERCOM1_Handler>:
   11230:	b580      	push	{r7, lr}
   11232:	af00      	add	r7, sp, #0
   11234:	4b03      	ldr	r3, [pc, #12]	; (11244 <SERCOM1_Handler+0x14>)
   11236:	685b      	ldr	r3, [r3, #4]
   11238:	2001      	movs	r0, #1
   1123a:	4798      	blx	r3
   1123c:	46c0      	nop			; (mov r8, r8)
   1123e:	46bd      	mov	sp, r7
   11240:	bd80      	pop	{r7, pc}
   11242:	46c0      	nop			; (mov r8, r8)
   11244:	200003fc 	.word	0x200003fc

00011248 <SERCOM2_Handler>:
   11248:	b580      	push	{r7, lr}
   1124a:	af00      	add	r7, sp, #0
   1124c:	4b03      	ldr	r3, [pc, #12]	; (1125c <SERCOM2_Handler+0x14>)
   1124e:	689b      	ldr	r3, [r3, #8]
   11250:	2002      	movs	r0, #2
   11252:	4798      	blx	r3
   11254:	46c0      	nop			; (mov r8, r8)
   11256:	46bd      	mov	sp, r7
   11258:	bd80      	pop	{r7, pc}
   1125a:	46c0      	nop			; (mov r8, r8)
   1125c:	200003fc 	.word	0x200003fc

00011260 <SERCOM3_Handler>:
   11260:	b580      	push	{r7, lr}
   11262:	af00      	add	r7, sp, #0
   11264:	4b03      	ldr	r3, [pc, #12]	; (11274 <SERCOM3_Handler+0x14>)
   11266:	68db      	ldr	r3, [r3, #12]
   11268:	2003      	movs	r0, #3
   1126a:	4798      	blx	r3
   1126c:	46c0      	nop			; (mov r8, r8)
   1126e:	46bd      	mov	sp, r7
   11270:	bd80      	pop	{r7, pc}
   11272:	46c0      	nop			; (mov r8, r8)
   11274:	200003fc 	.word	0x200003fc

00011278 <SERCOM4_Handler>:
   11278:	b580      	push	{r7, lr}
   1127a:	af00      	add	r7, sp, #0
   1127c:	4b03      	ldr	r3, [pc, #12]	; (1128c <SERCOM4_Handler+0x14>)
   1127e:	691b      	ldr	r3, [r3, #16]
   11280:	2004      	movs	r0, #4
   11282:	4798      	blx	r3
   11284:	46c0      	nop			; (mov r8, r8)
   11286:	46bd      	mov	sp, r7
   11288:	bd80      	pop	{r7, pc}
   1128a:	46c0      	nop			; (mov r8, r8)
   1128c:	200003fc 	.word	0x200003fc

00011290 <SERCOM5_Handler>:
   11290:	b580      	push	{r7, lr}
   11292:	af00      	add	r7, sp, #0
   11294:	4b03      	ldr	r3, [pc, #12]	; (112a4 <SERCOM5_Handler+0x14>)
   11296:	695b      	ldr	r3, [r3, #20]
   11298:	2005      	movs	r0, #5
   1129a:	4798      	blx	r3
   1129c:	46c0      	nop			; (mov r8, r8)
   1129e:	46bd      	mov	sp, r7
   112a0:	bd80      	pop	{r7, pc}
   112a2:	46c0      	nop			; (mov r8, r8)
   112a4:	200003fc 	.word	0x200003fc

000112a8 <_extint_get_eic_from_channel>:
{
   112a8:	b580      	push	{r7, lr}
   112aa:	b084      	sub	sp, #16
   112ac:	af00      	add	r7, sp, #0
   112ae:	0002      	movs	r2, r0
   112b0:	1dfb      	adds	r3, r7, #7
   112b2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   112b4:	230f      	movs	r3, #15
   112b6:	18fb      	adds	r3, r7, r3
   112b8:	1dfa      	adds	r2, r7, #7
   112ba:	7812      	ldrb	r2, [r2, #0]
   112bc:	0952      	lsrs	r2, r2, #5
   112be:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   112c0:	230f      	movs	r3, #15
   112c2:	18fb      	adds	r3, r7, r3
   112c4:	781b      	ldrb	r3, [r3, #0]
   112c6:	2b00      	cmp	r3, #0
   112c8:	d10c      	bne.n	112e4 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   112ca:	4b09      	ldr	r3, [pc, #36]	; (112f0 <_extint_get_eic_from_channel+0x48>)
   112cc:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   112ce:	230f      	movs	r3, #15
   112d0:	18fb      	adds	r3, r7, r3
   112d2:	781b      	ldrb	r3, [r3, #0]
   112d4:	009b      	lsls	r3, r3, #2
   112d6:	2210      	movs	r2, #16
   112d8:	4694      	mov	ip, r2
   112da:	44bc      	add	ip, r7
   112dc:	4463      	add	r3, ip
   112de:	3b08      	subs	r3, #8
   112e0:	681b      	ldr	r3, [r3, #0]
   112e2:	e000      	b.n	112e6 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   112e4:	2300      	movs	r3, #0
}
   112e6:	0018      	movs	r0, r3
   112e8:	46bd      	mov	sp, r7
   112ea:	b004      	add	sp, #16
   112ec:	bd80      	pop	{r7, pc}
   112ee:	46c0      	nop			; (mov r8, r8)
   112f0:	40001800 	.word	0x40001800

000112f4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   112f4:	b580      	push	{r7, lr}
   112f6:	b084      	sub	sp, #16
   112f8:	af00      	add	r7, sp, #0
   112fa:	0002      	movs	r2, r0
   112fc:	1dfb      	adds	r3, r7, #7
   112fe:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   11300:	1dfb      	adds	r3, r7, #7
   11302:	781b      	ldrb	r3, [r3, #0]
   11304:	0018      	movs	r0, r3
   11306:	4b0b      	ldr	r3, [pc, #44]	; (11334 <extint_chan_is_detected+0x40>)
   11308:	4798      	blx	r3
   1130a:	0003      	movs	r3, r0
   1130c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1130e:	1dfb      	adds	r3, r7, #7
   11310:	781b      	ldrb	r3, [r3, #0]
   11312:	221f      	movs	r2, #31
   11314:	4013      	ands	r3, r2
   11316:	2201      	movs	r2, #1
   11318:	409a      	lsls	r2, r3
   1131a:	0013      	movs	r3, r2
   1131c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   1131e:	68fb      	ldr	r3, [r7, #12]
   11320:	691b      	ldr	r3, [r3, #16]
   11322:	68ba      	ldr	r2, [r7, #8]
   11324:	4013      	ands	r3, r2
   11326:	1e5a      	subs	r2, r3, #1
   11328:	4193      	sbcs	r3, r2
   1132a:	b2db      	uxtb	r3, r3
}
   1132c:	0018      	movs	r0, r3
   1132e:	46bd      	mov	sp, r7
   11330:	b004      	add	sp, #16
   11332:	bd80      	pop	{r7, pc}
   11334:	000112a9 	.word	0x000112a9

00011338 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   11338:	b580      	push	{r7, lr}
   1133a:	b084      	sub	sp, #16
   1133c:	af00      	add	r7, sp, #0
   1133e:	0002      	movs	r2, r0
   11340:	1dfb      	adds	r3, r7, #7
   11342:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   11344:	1dfb      	adds	r3, r7, #7
   11346:	781b      	ldrb	r3, [r3, #0]
   11348:	0018      	movs	r0, r3
   1134a:	4b09      	ldr	r3, [pc, #36]	; (11370 <extint_chan_clear_detected+0x38>)
   1134c:	4798      	blx	r3
   1134e:	0003      	movs	r3, r0
   11350:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   11352:	1dfb      	adds	r3, r7, #7
   11354:	781b      	ldrb	r3, [r3, #0]
   11356:	221f      	movs	r2, #31
   11358:	4013      	ands	r3, r2
   1135a:	2201      	movs	r2, #1
   1135c:	409a      	lsls	r2, r3
   1135e:	0013      	movs	r3, r2
   11360:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   11362:	68fb      	ldr	r3, [r7, #12]
   11364:	68ba      	ldr	r2, [r7, #8]
   11366:	611a      	str	r2, [r3, #16]
}
   11368:	46c0      	nop			; (mov r8, r8)
   1136a:	46bd      	mov	sp, r7
   1136c:	b004      	add	sp, #16
   1136e:	bd80      	pop	{r7, pc}
   11370:	000112a9 	.word	0x000112a9

00011374 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   11374:	b580      	push	{r7, lr}
   11376:	b082      	sub	sp, #8
   11378:	af00      	add	r7, sp, #0
   1137a:	6078      	str	r0, [r7, #4]
   1137c:	0008      	movs	r0, r1
   1137e:	0011      	movs	r1, r2
   11380:	1cfb      	adds	r3, r7, #3
   11382:	1c02      	adds	r2, r0, #0
   11384:	701a      	strb	r2, [r3, #0]
   11386:	1cbb      	adds	r3, r7, #2
   11388:	1c0a      	adds	r2, r1, #0
   1138a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   1138c:	1cbb      	adds	r3, r7, #2
   1138e:	781b      	ldrb	r3, [r3, #0]
   11390:	2b00      	cmp	r3, #0
   11392:	d001      	beq.n	11398 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   11394:	2317      	movs	r3, #23
   11396:	e019      	b.n	113cc <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   11398:	1cfb      	adds	r3, r7, #3
   1139a:	781a      	ldrb	r2, [r3, #0]
   1139c:	4b0d      	ldr	r3, [pc, #52]	; (113d4 <extint_register_callback+0x60>)
   1139e:	0092      	lsls	r2, r2, #2
   113a0:	58d3      	ldr	r3, [r2, r3]
   113a2:	2b00      	cmp	r3, #0
   113a4:	d107      	bne.n	113b6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   113a6:	1cfb      	adds	r3, r7, #3
   113a8:	781a      	ldrb	r2, [r3, #0]
   113aa:	4b0a      	ldr	r3, [pc, #40]	; (113d4 <extint_register_callback+0x60>)
   113ac:	0092      	lsls	r2, r2, #2
   113ae:	6879      	ldr	r1, [r7, #4]
   113b0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   113b2:	2300      	movs	r3, #0
   113b4:	e00a      	b.n	113cc <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   113b6:	1cfb      	adds	r3, r7, #3
   113b8:	781a      	ldrb	r2, [r3, #0]
   113ba:	4b06      	ldr	r3, [pc, #24]	; (113d4 <extint_register_callback+0x60>)
   113bc:	0092      	lsls	r2, r2, #2
   113be:	58d2      	ldr	r2, [r2, r3]
   113c0:	687b      	ldr	r3, [r7, #4]
   113c2:	429a      	cmp	r2, r3
   113c4:	d101      	bne.n	113ca <extint_register_callback+0x56>
		return STATUS_OK;
   113c6:	2300      	movs	r3, #0
   113c8:	e000      	b.n	113cc <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   113ca:	231d      	movs	r3, #29
}
   113cc:	0018      	movs	r0, r3
   113ce:	46bd      	mov	sp, r7
   113d0:	b002      	add	sp, #8
   113d2:	bd80      	pop	{r7, pc}
   113d4:	200008b0 	.word	0x200008b0

000113d8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   113d8:	b580      	push	{r7, lr}
   113da:	b084      	sub	sp, #16
   113dc:	af00      	add	r7, sp, #0
   113de:	0002      	movs	r2, r0
   113e0:	1dfb      	adds	r3, r7, #7
   113e2:	701a      	strb	r2, [r3, #0]
   113e4:	1dbb      	adds	r3, r7, #6
   113e6:	1c0a      	adds	r2, r1, #0
   113e8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   113ea:	1dbb      	adds	r3, r7, #6
   113ec:	781b      	ldrb	r3, [r3, #0]
   113ee:	2b00      	cmp	r3, #0
   113f0:	d10e      	bne.n	11410 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   113f2:	1dfb      	adds	r3, r7, #7
   113f4:	781b      	ldrb	r3, [r3, #0]
   113f6:	0018      	movs	r0, r3
   113f8:	4b08      	ldr	r3, [pc, #32]	; (1141c <extint_chan_enable_callback+0x44>)
   113fa:	4798      	blx	r3
   113fc:	0003      	movs	r3, r0
   113fe:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   11400:	1dfb      	adds	r3, r7, #7
   11402:	781b      	ldrb	r3, [r3, #0]
   11404:	2201      	movs	r2, #1
   11406:	409a      	lsls	r2, r3
   11408:	68fb      	ldr	r3, [r7, #12]
   1140a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   1140c:	2300      	movs	r3, #0
   1140e:	e000      	b.n	11412 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   11410:	2317      	movs	r3, #23
}
   11412:	0018      	movs	r0, r3
   11414:	46bd      	mov	sp, r7
   11416:	b004      	add	sp, #16
   11418:	bd80      	pop	{r7, pc}
   1141a:	46c0      	nop			; (mov r8, r8)
   1141c:	000112a9 	.word	0x000112a9

00011420 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   11420:	b580      	push	{r7, lr}
   11422:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   11424:	4b15      	ldr	r3, [pc, #84]	; (1147c <EIC_Handler+0x5c>)
   11426:	2200      	movs	r2, #0
   11428:	701a      	strb	r2, [r3, #0]
   1142a:	e020      	b.n	1146e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   1142c:	4b13      	ldr	r3, [pc, #76]	; (1147c <EIC_Handler+0x5c>)
   1142e:	781b      	ldrb	r3, [r3, #0]
   11430:	0018      	movs	r0, r3
   11432:	4b13      	ldr	r3, [pc, #76]	; (11480 <EIC_Handler+0x60>)
   11434:	4798      	blx	r3
   11436:	1e03      	subs	r3, r0, #0
   11438:	d013      	beq.n	11462 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   1143a:	4b10      	ldr	r3, [pc, #64]	; (1147c <EIC_Handler+0x5c>)
   1143c:	781b      	ldrb	r3, [r3, #0]
   1143e:	0018      	movs	r0, r3
   11440:	4b10      	ldr	r3, [pc, #64]	; (11484 <EIC_Handler+0x64>)
   11442:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   11444:	4b0d      	ldr	r3, [pc, #52]	; (1147c <EIC_Handler+0x5c>)
   11446:	781b      	ldrb	r3, [r3, #0]
   11448:	001a      	movs	r2, r3
   1144a:	4b0f      	ldr	r3, [pc, #60]	; (11488 <EIC_Handler+0x68>)
   1144c:	0092      	lsls	r2, r2, #2
   1144e:	58d3      	ldr	r3, [r2, r3]
   11450:	2b00      	cmp	r3, #0
   11452:	d006      	beq.n	11462 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   11454:	4b09      	ldr	r3, [pc, #36]	; (1147c <EIC_Handler+0x5c>)
   11456:	781b      	ldrb	r3, [r3, #0]
   11458:	001a      	movs	r2, r3
   1145a:	4b0b      	ldr	r3, [pc, #44]	; (11488 <EIC_Handler+0x68>)
   1145c:	0092      	lsls	r2, r2, #2
   1145e:	58d3      	ldr	r3, [r2, r3]
   11460:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   11462:	4b06      	ldr	r3, [pc, #24]	; (1147c <EIC_Handler+0x5c>)
   11464:	781b      	ldrb	r3, [r3, #0]
   11466:	3301      	adds	r3, #1
   11468:	b2da      	uxtb	r2, r3
   1146a:	4b04      	ldr	r3, [pc, #16]	; (1147c <EIC_Handler+0x5c>)
   1146c:	701a      	strb	r2, [r3, #0]
   1146e:	4b03      	ldr	r3, [pc, #12]	; (1147c <EIC_Handler+0x5c>)
   11470:	781b      	ldrb	r3, [r3, #0]
   11472:	2b0f      	cmp	r3, #15
   11474:	d9da      	bls.n	1142c <EIC_Handler+0xc>
			}
		}
	}
}
   11476:	46c0      	nop			; (mov r8, r8)
   11478:	46bd      	mov	sp, r7
   1147a:	bd80      	pop	{r7, pc}
   1147c:	20000930 	.word	0x20000930
   11480:	000112f5 	.word	0x000112f5
   11484:	00011339 	.word	0x00011339
   11488:	200008b0 	.word	0x200008b0

0001148c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   1148c:	b580      	push	{r7, lr}
   1148e:	b082      	sub	sp, #8
   11490:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   11492:	4b15      	ldr	r3, [pc, #84]	; (114e8 <EVSYS_Handler+0x5c>)
   11494:	691b      	ldr	r3, [r3, #16]
   11496:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   11498:	4b14      	ldr	r3, [pc, #80]	; (114ec <EVSYS_Handler+0x60>)
   1149a:	699b      	ldr	r3, [r3, #24]
   1149c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   1149e:	4b12      	ldr	r3, [pc, #72]	; (114e8 <EVSYS_Handler+0x5c>)
   114a0:	689a      	ldr	r2, [r3, #8]
   114a2:	683b      	ldr	r3, [r7, #0]
   114a4:	431a      	orrs	r2, r3
   114a6:	4b10      	ldr	r3, [pc, #64]	; (114e8 <EVSYS_Handler+0x5c>)
   114a8:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   114aa:	4b10      	ldr	r3, [pc, #64]	; (114ec <EVSYS_Handler+0x60>)
   114ac:	4a10      	ldr	r2, [pc, #64]	; (114f0 <EVSYS_Handler+0x64>)
   114ae:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   114b0:	e008      	b.n	114c4 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   114b2:	687b      	ldr	r3, [r7, #4]
   114b4:	685a      	ldr	r2, [r3, #4]
   114b6:	687b      	ldr	r3, [r7, #4]
   114b8:	681b      	ldr	r3, [r3, #0]
   114ba:	0018      	movs	r0, r3
   114bc:	4790      	blx	r2
		current_hook = current_hook->next;
   114be:	687b      	ldr	r3, [r7, #4]
   114c0:	689b      	ldr	r3, [r3, #8]
   114c2:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   114c4:	687b      	ldr	r3, [r7, #4]
   114c6:	2b00      	cmp	r3, #0
   114c8:	d1f3      	bne.n	114b2 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   114ca:	4b07      	ldr	r3, [pc, #28]	; (114e8 <EVSYS_Handler+0x5c>)
   114cc:	68db      	ldr	r3, [r3, #12]
   114ce:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   114d0:	4b05      	ldr	r3, [pc, #20]	; (114e8 <EVSYS_Handler+0x5c>)
   114d2:	689b      	ldr	r3, [r3, #8]
   114d4:	683a      	ldr	r2, [r7, #0]
   114d6:	43d2      	mvns	r2, r2
   114d8:	401a      	ands	r2, r3
   114da:	4b03      	ldr	r3, [pc, #12]	; (114e8 <EVSYS_Handler+0x5c>)
   114dc:	609a      	str	r2, [r3, #8]
}
   114de:	46c0      	nop			; (mov r8, r8)
   114e0:	46bd      	mov	sp, r7
   114e2:	b002      	add	sp, #8
   114e4:	bd80      	pop	{r7, pc}
   114e6:	46c0      	nop			; (mov r8, r8)
   114e8:	20000014 	.word	0x20000014
   114ec:	42000400 	.word	0x42000400
   114f0:	0f0fffff 	.word	0x0f0fffff

000114f4 <system_gclk_chan_get_config_defaults>:
{
   114f4:	b580      	push	{r7, lr}
   114f6:	b082      	sub	sp, #8
   114f8:	af00      	add	r7, sp, #0
   114fa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   114fc:	687b      	ldr	r3, [r7, #4]
   114fe:	2200      	movs	r2, #0
   11500:	701a      	strb	r2, [r3, #0]
}
   11502:	46c0      	nop			; (mov r8, r8)
   11504:	46bd      	mov	sp, r7
   11506:	b002      	add	sp, #8
   11508:	bd80      	pop	{r7, pc}
	...

0001150c <system_apb_clock_set_mask>:
{
   1150c:	b580      	push	{r7, lr}
   1150e:	b082      	sub	sp, #8
   11510:	af00      	add	r7, sp, #0
   11512:	0002      	movs	r2, r0
   11514:	6039      	str	r1, [r7, #0]
   11516:	1dfb      	adds	r3, r7, #7
   11518:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1151a:	1dfb      	adds	r3, r7, #7
   1151c:	781b      	ldrb	r3, [r3, #0]
   1151e:	2b01      	cmp	r3, #1
   11520:	d00a      	beq.n	11538 <system_apb_clock_set_mask+0x2c>
   11522:	2b02      	cmp	r3, #2
   11524:	d00f      	beq.n	11546 <system_apb_clock_set_mask+0x3a>
   11526:	2b00      	cmp	r3, #0
   11528:	d114      	bne.n	11554 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1152a:	4b0e      	ldr	r3, [pc, #56]	; (11564 <system_apb_clock_set_mask+0x58>)
   1152c:	4a0d      	ldr	r2, [pc, #52]	; (11564 <system_apb_clock_set_mask+0x58>)
   1152e:	6991      	ldr	r1, [r2, #24]
   11530:	683a      	ldr	r2, [r7, #0]
   11532:	430a      	orrs	r2, r1
   11534:	619a      	str	r2, [r3, #24]
			break;
   11536:	e00f      	b.n	11558 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   11538:	4b0a      	ldr	r3, [pc, #40]	; (11564 <system_apb_clock_set_mask+0x58>)
   1153a:	4a0a      	ldr	r2, [pc, #40]	; (11564 <system_apb_clock_set_mask+0x58>)
   1153c:	69d1      	ldr	r1, [r2, #28]
   1153e:	683a      	ldr	r2, [r7, #0]
   11540:	430a      	orrs	r2, r1
   11542:	61da      	str	r2, [r3, #28]
			break;
   11544:	e008      	b.n	11558 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   11546:	4b07      	ldr	r3, [pc, #28]	; (11564 <system_apb_clock_set_mask+0x58>)
   11548:	4a06      	ldr	r2, [pc, #24]	; (11564 <system_apb_clock_set_mask+0x58>)
   1154a:	6a11      	ldr	r1, [r2, #32]
   1154c:	683a      	ldr	r2, [r7, #0]
   1154e:	430a      	orrs	r2, r1
   11550:	621a      	str	r2, [r3, #32]
			break;
   11552:	e001      	b.n	11558 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   11554:	2317      	movs	r3, #23
   11556:	e000      	b.n	1155a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   11558:	2300      	movs	r3, #0
}
   1155a:	0018      	movs	r0, r3
   1155c:	46bd      	mov	sp, r7
   1155e:	b002      	add	sp, #8
   11560:	bd80      	pop	{r7, pc}
   11562:	46c0      	nop			; (mov r8, r8)
   11564:	40000400 	.word	0x40000400

00011568 <system_interrupt_enter_critical_section>:
{
   11568:	b580      	push	{r7, lr}
   1156a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1156c:	4b02      	ldr	r3, [pc, #8]	; (11578 <system_interrupt_enter_critical_section+0x10>)
   1156e:	4798      	blx	r3
}
   11570:	46c0      	nop			; (mov r8, r8)
   11572:	46bd      	mov	sp, r7
   11574:	bd80      	pop	{r7, pc}
   11576:	46c0      	nop			; (mov r8, r8)
   11578:	00012b75 	.word	0x00012b75

0001157c <system_interrupt_leave_critical_section>:
{
   1157c:	b580      	push	{r7, lr}
   1157e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   11580:	4b02      	ldr	r3, [pc, #8]	; (1158c <system_interrupt_leave_critical_section+0x10>)
   11582:	4798      	blx	r3
}
   11584:	46c0      	nop			; (mov r8, r8)
   11586:	46bd      	mov	sp, r7
   11588:	bd80      	pop	{r7, pc}
   1158a:	46c0      	nop			; (mov r8, r8)
   1158c:	00012bc9 	.word	0x00012bc9

00011590 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
   11590:	b580      	push	{r7, lr}
   11592:	b084      	sub	sp, #16
   11594:	af00      	add	r7, sp, #0
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
   11596:	1dfb      	adds	r3, r7, #7
   11598:	2200      	movs	r2, #0
   1159a:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
   1159c:	4b21      	ldr	r3, [pc, #132]	; (11624 <_events_find_first_free_channel_and_allocate+0x94>)
   1159e:	4798      	blx	r3

	tmp = _events_inst.allocated_channels;
   115a0:	4b21      	ldr	r3, [pc, #132]	; (11628 <_events_find_first_free_channel_and_allocate+0x98>)
   115a2:	681b      	ldr	r3, [r3, #0]
   115a4:	60bb      	str	r3, [r7, #8]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   115a6:	230f      	movs	r3, #15
   115a8:	18fb      	adds	r3, r7, r3
   115aa:	2200      	movs	r2, #0
   115ac:	701a      	strb	r2, [r3, #0]
   115ae:	e022      	b.n	115f6 <_events_find_first_free_channel_and_allocate+0x66>

		if(!(tmp & 0x00000001)) {
   115b0:	68bb      	ldr	r3, [r7, #8]
   115b2:	2201      	movs	r2, #1
   115b4:	4013      	ands	r3, r2
   115b6:	d114      	bne.n	115e2 <_events_find_first_free_channel_and_allocate+0x52>
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
   115b8:	4b1b      	ldr	r3, [pc, #108]	; (11628 <_events_find_first_free_channel_and_allocate+0x98>)
   115ba:	681b      	ldr	r3, [r3, #0]
   115bc:	220f      	movs	r2, #15
   115be:	18ba      	adds	r2, r7, r2
   115c0:	7812      	ldrb	r2, [r2, #0]
   115c2:	2101      	movs	r1, #1
   115c4:	4091      	lsls	r1, r2
   115c6:	000a      	movs	r2, r1
   115c8:	431a      	orrs	r2, r3
   115ca:	4b17      	ldr	r3, [pc, #92]	; (11628 <_events_find_first_free_channel_and_allocate+0x98>)
   115cc:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
   115ce:	4b16      	ldr	r3, [pc, #88]	; (11628 <_events_find_first_free_channel_and_allocate+0x98>)
   115d0:	791b      	ldrb	r3, [r3, #4]
   115d2:	3b01      	subs	r3, #1
   115d4:	b2da      	uxtb	r2, r3
   115d6:	4b14      	ldr	r3, [pc, #80]	; (11628 <_events_find_first_free_channel_and_allocate+0x98>)
   115d8:	711a      	strb	r2, [r3, #4]
			allocated = true;
   115da:	1dfb      	adds	r3, r7, #7
   115dc:	2201      	movs	r2, #1
   115de:	701a      	strb	r2, [r3, #0]

			break;
   115e0:	e00e      	b.n	11600 <_events_find_first_free_channel_and_allocate+0x70>

		}

		tmp = tmp >> 1;
   115e2:	68bb      	ldr	r3, [r7, #8]
   115e4:	085b      	lsrs	r3, r3, #1
   115e6:	60bb      	str	r3, [r7, #8]
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
   115e8:	230f      	movs	r3, #15
   115ea:	18fb      	adds	r3, r7, r3
   115ec:	220f      	movs	r2, #15
   115ee:	18ba      	adds	r2, r7, r2
   115f0:	7812      	ldrb	r2, [r2, #0]
   115f2:	3201      	adds	r2, #1
   115f4:	701a      	strb	r2, [r3, #0]
   115f6:	230f      	movs	r3, #15
   115f8:	18fb      	adds	r3, r7, r3
   115fa:	781b      	ldrb	r3, [r3, #0]
   115fc:	2b0b      	cmp	r3, #11
   115fe:	d9d7      	bls.n	115b0 <_events_find_first_free_channel_and_allocate+0x20>
	}

	system_interrupt_leave_critical_section();
   11600:	4b0a      	ldr	r3, [pc, #40]	; (1162c <_events_find_first_free_channel_and_allocate+0x9c>)
   11602:	4798      	blx	r3

	if(!allocated) {
   11604:	1dfb      	adds	r3, r7, #7
   11606:	781b      	ldrb	r3, [r3, #0]
   11608:	2201      	movs	r2, #1
   1160a:	4053      	eors	r3, r2
   1160c:	b2db      	uxtb	r3, r3
   1160e:	2b00      	cmp	r3, #0
   11610:	d001      	beq.n	11616 <_events_find_first_free_channel_and_allocate+0x86>
		return EVENTS_INVALID_CHANNEL;
   11612:	23ff      	movs	r3, #255	; 0xff
   11614:	e002      	b.n	1161c <_events_find_first_free_channel_and_allocate+0x8c>
	} else {
		return count;
   11616:	230f      	movs	r3, #15
   11618:	18fb      	adds	r3, r7, r3
   1161a:	781b      	ldrb	r3, [r3, #0]
	}
}
   1161c:	0018      	movs	r0, r3
   1161e:	46bd      	mov	sp, r7
   11620:	b004      	add	sp, #16
   11622:	bd80      	pop	{r7, pc}
   11624:	00011569 	.word	0x00011569
   11628:	20000014 	.word	0x20000014
   1162c:	0001157d 	.word	0x0001157d

00011630 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   11630:	b580      	push	{r7, lr}
   11632:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   11634:	2102      	movs	r1, #2
   11636:	2002      	movs	r0, #2
   11638:	4b07      	ldr	r3, [pc, #28]	; (11658 <_system_events_init+0x28>)
   1163a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1163c:	4b07      	ldr	r3, [pc, #28]	; (1165c <_system_events_init+0x2c>)
   1163e:	2201      	movs	r2, #1
   11640:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   11642:	46c0      	nop			; (mov r8, r8)
   11644:	4b05      	ldr	r3, [pc, #20]	; (1165c <_system_events_init+0x2c>)
   11646:	781b      	ldrb	r3, [r3, #0]
   11648:	b2db      	uxtb	r3, r3
   1164a:	001a      	movs	r2, r3
   1164c:	2301      	movs	r3, #1
   1164e:	4013      	ands	r3, r2
   11650:	d1f8      	bne.n	11644 <_system_events_init+0x14>
	}
}
   11652:	46c0      	nop			; (mov r8, r8)
   11654:	46bd      	mov	sp, r7
   11656:	bd80      	pop	{r7, pc}
   11658:	0001150d 	.word	0x0001150d
   1165c:	42000400 	.word	0x42000400

00011660 <events_get_config_defaults>:
#if defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

void events_get_config_defaults(struct events_config *config)
{
   11660:	b580      	push	{r7, lr}
   11662:	b082      	sub	sp, #8
   11664:	af00      	add	r7, sp, #0
   11666:	6078      	str	r0, [r7, #4]
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
   11668:	687b      	ldr	r3, [r7, #4]
   1166a:	2201      	movs	r2, #1
   1166c:	701a      	strb	r2, [r3, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
   1166e:	687b      	ldr	r3, [r7, #4]
   11670:	2200      	movs	r2, #0
   11672:	705a      	strb	r2, [r3, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
   11674:	687b      	ldr	r3, [r7, #4]
   11676:	2200      	movs	r2, #0
   11678:	709a      	strb	r2, [r3, #2]
	config->clock_source = GCLK_GENERATOR_0;
   1167a:	687b      	ldr	r3, [r7, #4]
   1167c:	2200      	movs	r2, #0
   1167e:	70da      	strb	r2, [r3, #3]
}
   11680:	46c0      	nop			; (mov r8, r8)
   11682:	46bd      	mov	sp, r7
   11684:	b002      	add	sp, #8
   11686:	bd80      	pop	{r7, pc}

00011688 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
   11688:	b590      	push	{r4, r7, lr}
   1168a:	b085      	sub	sp, #20
   1168c:	af00      	add	r7, sp, #0
   1168e:	6078      	str	r0, [r7, #4]
   11690:	6039      	str	r1, [r7, #0]
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
   11692:	230f      	movs	r3, #15
   11694:	18fc      	adds	r4, r7, r3
   11696:	4b2a      	ldr	r3, [pc, #168]	; (11740 <events_allocate+0xb8>)
   11698:	4798      	blx	r3
   1169a:	0003      	movs	r3, r0
   1169c:	7023      	strb	r3, [r4, #0]

	if(new_channel == EVENTS_INVALID_CHANNEL) {
   1169e:	230f      	movs	r3, #15
   116a0:	18fb      	adds	r3, r7, r3
   116a2:	781b      	ldrb	r3, [r3, #0]
   116a4:	2bff      	cmp	r3, #255	; 0xff
   116a6:	d101      	bne.n	116ac <events_allocate+0x24>
		return STATUS_ERR_NOT_FOUND;
   116a8:	2314      	movs	r3, #20
   116aa:	e045      	b.n	11738 <events_allocate+0xb0>
	}

	resource->channel = new_channel;
   116ac:	687b      	ldr	r3, [r7, #4]
   116ae:	220f      	movs	r2, #15
   116b0:	18ba      	adds	r2, r7, r2
   116b2:	7812      	ldrb	r2, [r2, #0]
   116b4:	701a      	strb	r2, [r3, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
   116b6:	683b      	ldr	r3, [r7, #0]
   116b8:	785b      	ldrb	r3, [r3, #1]
   116ba:	2b02      	cmp	r3, #2
   116bc:	d01c      	beq.n	116f8 <events_allocate+0x70>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   116be:	230c      	movs	r3, #12
   116c0:	18fb      	adds	r3, r7, r3
   116c2:	0018      	movs	r0, r3
   116c4:	4b1f      	ldr	r3, [pc, #124]	; (11744 <events_allocate+0xbc>)
   116c6:	4798      	blx	r3
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
   116c8:	683b      	ldr	r3, [r7, #0]
   116ca:	78da      	ldrb	r2, [r3, #3]
		gclk_chan_conf.source_generator =
   116cc:	230c      	movs	r3, #12
   116ce:	18fb      	adds	r3, r7, r3
   116d0:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
   116d2:	230f      	movs	r3, #15
   116d4:	18fb      	adds	r3, r7, r3
   116d6:	781b      	ldrb	r3, [r3, #0]
   116d8:	3307      	adds	r3, #7
   116da:	b2db      	uxtb	r3, r3
   116dc:	220c      	movs	r2, #12
   116de:	18ba      	adds	r2, r7, r2
   116e0:	0011      	movs	r1, r2
   116e2:	0018      	movs	r0, r3
   116e4:	4b18      	ldr	r3, [pc, #96]	; (11748 <events_allocate+0xc0>)
   116e6:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
   116e8:	230f      	movs	r3, #15
   116ea:	18fb      	adds	r3, r7, r3
   116ec:	781b      	ldrb	r3, [r3, #0]
   116ee:	3307      	adds	r3, #7
   116f0:	b2db      	uxtb	r3, r3
   116f2:	0018      	movs	r0, r3
   116f4:	4b15      	ldr	r3, [pc, #84]	; (1174c <events_allocate+0xc4>)
   116f6:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   116f8:	230f      	movs	r3, #15
   116fa:	18fb      	adds	r3, r7, r3
   116fc:	781b      	ldrb	r3, [r3, #0]
   116fe:	220f      	movs	r2, #15
   11700:	401a      	ands	r2, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   11702:	683b      	ldr	r3, [r7, #0]
   11704:	789b      	ldrb	r3, [r3, #2]
   11706:	041b      	lsls	r3, r3, #16
   11708:	0019      	movs	r1, r3
   1170a:	23fe      	movs	r3, #254	; 0xfe
   1170c:	03db      	lsls	r3, r3, #15
   1170e:	400b      	ands	r3, r1
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   11710:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
   11712:	683b      	ldr	r3, [r7, #0]
   11714:	785b      	ldrb	r3, [r3, #1]
   11716:	061b      	lsls	r3, r3, #24
   11718:	0019      	movs	r1, r3
   1171a:	23c0      	movs	r3, #192	; 0xc0
   1171c:	049b      	lsls	r3, r3, #18
   1171e:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
   11720:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
   11722:	683b      	ldr	r3, [r7, #0]
   11724:	781b      	ldrb	r3, [r3, #0]
   11726:	069b      	lsls	r3, r3, #26
   11728:	0019      	movs	r1, r3
   1172a:	23c0      	movs	r3, #192	; 0xc0
   1172c:	051b      	lsls	r3, r3, #20
   1172e:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
   11730:	431a      	orrs	r2, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
   11732:	687b      	ldr	r3, [r7, #4]
   11734:	605a      	str	r2, [r3, #4]


	return STATUS_OK;
   11736:	2300      	movs	r3, #0
}
   11738:	0018      	movs	r0, r3
   1173a:	46bd      	mov	sp, r7
   1173c:	b005      	add	sp, #20
   1173e:	bd90      	pop	{r4, r7, pc}
   11740:	00011591 	.word	0x00011591
   11744:	000114f5 	.word	0x000114f5
   11748:	0001392d 	.word	0x0001392d
   1174c:	00013971 	.word	0x00013971

00011750 <events_attach_user>:

	return false;
}

enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
   11750:	b580      	push	{r7, lr}
   11752:	b082      	sub	sp, #8
   11754:	af00      	add	r7, sp, #0
   11756:	6078      	str	r0, [r7, #4]
   11758:	000a      	movs	r2, r1
   1175a:	1cfb      	adds	r3, r7, #3
   1175c:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   1175e:	490f      	ldr	r1, [pc, #60]	; (1179c <events_attach_user+0x4c>)
   11760:	687b      	ldr	r3, [r7, #4]
   11762:	781b      	ldrb	r3, [r3, #0]
   11764:	b29b      	uxth	r3, r3
   11766:	3301      	adds	r3, #1
   11768:	b29b      	uxth	r3, r3
   1176a:	021b      	lsls	r3, r3, #8
   1176c:	b29a      	uxth	r2, r3
   1176e:	23f8      	movs	r3, #248	; 0xf8
   11770:	015b      	lsls	r3, r3, #5
   11772:	4013      	ands	r3, r2
   11774:	b29a      	uxth	r2, r3
			  EVSYS_USER_USER(user_id);
   11776:	1cfb      	adds	r3, r7, #3
   11778:	781b      	ldrb	r3, [r3, #0]
   1177a:	b29b      	uxth	r3, r3
   1177c:	201f      	movs	r0, #31
   1177e:	4003      	ands	r3, r0
   11780:	b29b      	uxth	r3, r3
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
   11782:	4313      	orrs	r3, r2
   11784:	b29b      	uxth	r3, r3
   11786:	810b      	strh	r3, [r1, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
   11788:	4a04      	ldr	r2, [pc, #16]	; (1179c <events_attach_user+0x4c>)
   1178a:	687b      	ldr	r3, [r7, #4]
   1178c:	685b      	ldr	r3, [r3, #4]
   1178e:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
   11790:	2300      	movs	r3, #0
}
   11792:	0018      	movs	r0, r3
   11794:	46bd      	mov	sp, r7
   11796:	b002      	add	sp, #8
   11798:	bd80      	pop	{r7, pc}
   1179a:	46c0      	nop			; (mov r8, r8)
   1179c:	42000400 	.word	0x42000400

000117a0 <ac_register_callback>:
 */
enum status_code ac_register_callback(
		struct ac_module *const module,
		ac_callback_t callback_func,
		const enum ac_callback callback_type)
{
   117a0:	b580      	push	{r7, lr}
   117a2:	b084      	sub	sp, #16
   117a4:	af00      	add	r7, sp, #0
   117a6:	60f8      	str	r0, [r7, #12]
   117a8:	60b9      	str	r1, [r7, #8]
   117aa:	1dfb      	adds	r3, r7, #7
   117ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   117ae:	1dfb      	adds	r3, r7, #7
   117b0:	781b      	ldrb	r3, [r3, #0]
   117b2:	68fa      	ldr	r2, [r7, #12]
   117b4:	009b      	lsls	r3, r3, #2
   117b6:	18d3      	adds	r3, r2, r3
   117b8:	3304      	adds	r3, #4
   117ba:	68ba      	ldr	r2, [r7, #8]
   117bc:	601a      	str	r2, [r3, #0]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
   117be:	68fb      	ldr	r3, [r7, #12]
   117c0:	7e1b      	ldrb	r3, [r3, #24]
   117c2:	b25a      	sxtb	r2, r3
   117c4:	1dfb      	adds	r3, r7, #7
   117c6:	781b      	ldrb	r3, [r3, #0]
   117c8:	2101      	movs	r1, #1
   117ca:	4099      	lsls	r1, r3
   117cc:	000b      	movs	r3, r1
   117ce:	b25b      	sxtb	r3, r3
   117d0:	4313      	orrs	r3, r2
   117d2:	b25b      	sxtb	r3, r3
   117d4:	b2da      	uxtb	r2, r3
   117d6:	68fb      	ldr	r3, [r7, #12]
   117d8:	761a      	strb	r2, [r3, #24]

	return STATUS_OK;
   117da:	2300      	movs	r3, #0
}
   117dc:	0018      	movs	r0, r3
   117de:	46bd      	mov	sp, r7
   117e0:	b004      	add	sp, #16
   117e2:	bd80      	pop	{r7, pc}

000117e4 <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
   117e4:	b580      	push	{r7, lr}
   117e6:	af00      	add	r7, sp, #0
	_ac_interrupt_handler(0);
   117e8:	2000      	movs	r0, #0
   117ea:	4b02      	ldr	r3, [pc, #8]	; (117f4 <AC_Handler+0x10>)
   117ec:	4798      	blx	r3
}
   117ee:	46c0      	nop			; (mov r8, r8)
   117f0:	46bd      	mov	sp, r7
   117f2:	bd80      	pop	{r7, pc}
   117f4:	000117f9 	.word	0x000117f9

000117f8 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
   117f8:	b580      	push	{r7, lr}
   117fa:	b084      	sub	sp, #16
   117fc:	af00      	add	r7, sp, #0
   117fe:	6078      	str	r0, [r7, #4]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
   11800:	4b23      	ldr	r3, [pc, #140]	; (11890 <_ac_interrupt_handler+0x98>)
   11802:	687a      	ldr	r2, [r7, #4]
   11804:	0092      	lsls	r2, r2, #2
   11806:	58d3      	ldr	r3, [r2, r3]
   11808:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
   1180a:	4b21      	ldr	r3, [pc, #132]	; (11890 <_ac_interrupt_handler+0x98>)
   1180c:	687a      	ldr	r2, [r7, #4]
   1180e:	0092      	lsls	r2, r2, #2
   11810:	58d3      	ldr	r3, [r2, r3]
   11812:	681b      	ldr	r3, [r3, #0]
   11814:	799b      	ldrb	r3, [r3, #6]
   11816:	b2da      	uxtb	r2, r3
			(module->register_callback_mask & module->enable_callback_mask);
   11818:	68fb      	ldr	r3, [r7, #12]
   1181a:	7e1b      	ldrb	r3, [r3, #24]
   1181c:	68f9      	ldr	r1, [r7, #12]
   1181e:	7e49      	ldrb	r1, [r1, #25]
	interrupt_and_callback_status_mask =
   11820:	400b      	ands	r3, r1
   11822:	b2d9      	uxtb	r1, r3
   11824:	230b      	movs	r3, #11
   11826:	18fb      	adds	r3, r7, r3
   11828:	400a      	ands	r2, r1
   1182a:	701a      	strb	r2, [r3, #0]

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
   1182c:	230b      	movs	r3, #11
   1182e:	18fb      	adds	r3, r7, r3
   11830:	781b      	ldrb	r3, [r3, #0]
   11832:	2201      	movs	r2, #1
   11834:	4013      	ands	r3, r2
   11836:	d008      	beq.n	1184a <_ac_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
   11838:	68fb      	ldr	r3, [r7, #12]
   1183a:	685b      	ldr	r3, [r3, #4]
   1183c:	68fa      	ldr	r2, [r7, #12]
   1183e:	0010      	movs	r0, r2
   11840:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
   11842:	68fb      	ldr	r3, [r7, #12]
   11844:	681b      	ldr	r3, [r3, #0]
   11846:	2201      	movs	r2, #1
   11848:	719a      	strb	r2, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
   1184a:	230b      	movs	r3, #11
   1184c:	18fb      	adds	r3, r7, r3
   1184e:	781b      	ldrb	r3, [r3, #0]
   11850:	2202      	movs	r2, #2
   11852:	4013      	ands	r3, r2
   11854:	d008      	beq.n	11868 <_ac_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
   11856:	68fb      	ldr	r3, [r7, #12]
   11858:	689b      	ldr	r3, [r3, #8]
   1185a:	68fa      	ldr	r2, [r7, #12]
   1185c:	0010      	movs	r0, r2
   1185e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
   11860:	68fb      	ldr	r3, [r7, #12]
   11862:	681b      	ldr	r3, [r3, #0]
   11864:	2202      	movs	r2, #2
   11866:	719a      	strb	r2, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
   11868:	230b      	movs	r3, #11
   1186a:	18fb      	adds	r3, r7, r3
   1186c:	781b      	ldrb	r3, [r3, #0]
   1186e:	2210      	movs	r2, #16
   11870:	4013      	ands	r3, r2
   11872:	d008      	beq.n	11886 <_ac_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
   11874:	68fb      	ldr	r3, [r7, #12]
   11876:	695b      	ldr	r3, [r3, #20]
   11878:	68fa      	ldr	r2, [r7, #12]
   1187a:	0010      	movs	r0, r2
   1187c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
   1187e:	68fb      	ldr	r3, [r7, #12]
   11880:	681b      	ldr	r3, [r3, #0]
   11882:	2210      	movs	r2, #16
   11884:	719a      	strb	r2, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
   11886:	46c0      	nop			; (mov r8, r8)
   11888:	46bd      	mov	sp, r7
   1188a:	b004      	add	sp, #16
   1188c:	bd80      	pop	{r7, pc}
   1188e:	46c0      	nop			; (mov r8, r8)
   11890:	20000934 	.word	0x20000934

00011894 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
   11894:	b580      	push	{r7, lr}
   11896:	af00      	add	r7, sp, #0
}
   11898:	46c0      	nop			; (mov r8, r8)
   1189a:	46bd      	mov	sp, r7
   1189c:	bd80      	pop	{r7, pc}
	...

000118a0 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   118a0:	b580      	push	{r7, lr}
   118a2:	b082      	sub	sp, #8
   118a4:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   118a6:	4b07      	ldr	r3, [pc, #28]	; (118c4 <nvm_is_ready+0x24>)
   118a8:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   118aa:	687b      	ldr	r3, [r7, #4]
   118ac:	7d1b      	ldrb	r3, [r3, #20]
   118ae:	b2db      	uxtb	r3, r3
   118b0:	001a      	movs	r2, r3
   118b2:	2301      	movs	r3, #1
   118b4:	4013      	ands	r3, r2
   118b6:	1e5a      	subs	r2, r3, #1
   118b8:	4193      	sbcs	r3, r2
   118ba:	b2db      	uxtb	r3, r3
}
   118bc:	0018      	movs	r0, r3
   118be:	46bd      	mov	sp, r7
   118c0:	b002      	add	sp, #8
   118c2:	bd80      	pop	{r7, pc}
   118c4:	41004000 	.word	0x41004000

000118c8 <system_apb_clock_set_mask>:
{
   118c8:	b580      	push	{r7, lr}
   118ca:	b082      	sub	sp, #8
   118cc:	af00      	add	r7, sp, #0
   118ce:	0002      	movs	r2, r0
   118d0:	6039      	str	r1, [r7, #0]
   118d2:	1dfb      	adds	r3, r7, #7
   118d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   118d6:	1dfb      	adds	r3, r7, #7
   118d8:	781b      	ldrb	r3, [r3, #0]
   118da:	2b01      	cmp	r3, #1
   118dc:	d00a      	beq.n	118f4 <system_apb_clock_set_mask+0x2c>
   118de:	2b02      	cmp	r3, #2
   118e0:	d00f      	beq.n	11902 <system_apb_clock_set_mask+0x3a>
   118e2:	2b00      	cmp	r3, #0
   118e4:	d114      	bne.n	11910 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   118e6:	4b0e      	ldr	r3, [pc, #56]	; (11920 <system_apb_clock_set_mask+0x58>)
   118e8:	4a0d      	ldr	r2, [pc, #52]	; (11920 <system_apb_clock_set_mask+0x58>)
   118ea:	6991      	ldr	r1, [r2, #24]
   118ec:	683a      	ldr	r2, [r7, #0]
   118ee:	430a      	orrs	r2, r1
   118f0:	619a      	str	r2, [r3, #24]
			break;
   118f2:	e00f      	b.n	11914 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   118f4:	4b0a      	ldr	r3, [pc, #40]	; (11920 <system_apb_clock_set_mask+0x58>)
   118f6:	4a0a      	ldr	r2, [pc, #40]	; (11920 <system_apb_clock_set_mask+0x58>)
   118f8:	69d1      	ldr	r1, [r2, #28]
   118fa:	683a      	ldr	r2, [r7, #0]
   118fc:	430a      	orrs	r2, r1
   118fe:	61da      	str	r2, [r3, #28]
			break;
   11900:	e008      	b.n	11914 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   11902:	4b07      	ldr	r3, [pc, #28]	; (11920 <system_apb_clock_set_mask+0x58>)
   11904:	4a06      	ldr	r2, [pc, #24]	; (11920 <system_apb_clock_set_mask+0x58>)
   11906:	6a11      	ldr	r1, [r2, #32]
   11908:	683a      	ldr	r2, [r7, #0]
   1190a:	430a      	orrs	r2, r1
   1190c:	621a      	str	r2, [r3, #32]
			break;
   1190e:	e001      	b.n	11914 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   11910:	2317      	movs	r3, #23
   11912:	e000      	b.n	11916 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   11914:	2300      	movs	r3, #0
}
   11916:	0018      	movs	r0, r3
   11918:	46bd      	mov	sp, r7
   1191a:	b002      	add	sp, #8
   1191c:	bd80      	pop	{r7, pc}
   1191e:	46c0      	nop			; (mov r8, r8)
   11920:	40000400 	.word	0x40000400

00011924 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   11924:	b580      	push	{r7, lr}
   11926:	b084      	sub	sp, #16
   11928:	af00      	add	r7, sp, #0
   1192a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   1192c:	4b2f      	ldr	r3, [pc, #188]	; (119ec <nvm_set_config+0xc8>)
   1192e:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   11930:	2104      	movs	r1, #4
   11932:	2001      	movs	r0, #1
   11934:	4b2e      	ldr	r3, [pc, #184]	; (119f0 <nvm_set_config+0xcc>)
   11936:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11938:	68fb      	ldr	r3, [r7, #12]
   1193a:	2220      	movs	r2, #32
   1193c:	32ff      	adds	r2, #255	; 0xff
   1193e:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11940:	4b2c      	ldr	r3, [pc, #176]	; (119f4 <nvm_set_config+0xd0>)
   11942:	4798      	blx	r3
   11944:	0003      	movs	r3, r0
   11946:	001a      	movs	r2, r3
   11948:	2301      	movs	r3, #1
   1194a:	4053      	eors	r3, r2
   1194c:	b2db      	uxtb	r3, r3
   1194e:	2b00      	cmp	r3, #0
   11950:	d001      	beq.n	11956 <nvm_set_config+0x32>
		return STATUS_BUSY;
   11952:	2305      	movs	r3, #5
   11954:	e045      	b.n	119e2 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11956:	687b      	ldr	r3, [r7, #4]
   11958:	781b      	ldrb	r3, [r3, #0]
   1195a:	021b      	lsls	r3, r3, #8
   1195c:	001a      	movs	r2, r3
   1195e:	23c0      	movs	r3, #192	; 0xc0
   11960:	009b      	lsls	r3, r3, #2
   11962:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   11964:	687b      	ldr	r3, [r7, #4]
   11966:	785b      	ldrb	r3, [r3, #1]
   11968:	01db      	lsls	r3, r3, #7
   1196a:	0019      	movs	r1, r3
   1196c:	23ff      	movs	r3, #255	; 0xff
   1196e:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11970:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   11972:	687b      	ldr	r3, [r7, #4]
   11974:	789b      	ldrb	r3, [r3, #2]
   11976:	005b      	lsls	r3, r3, #1
   11978:	0019      	movs	r1, r3
   1197a:	231e      	movs	r3, #30
   1197c:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   1197e:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11980:	687b      	ldr	r3, [r7, #4]
   11982:	78db      	ldrb	r3, [r3, #3]
   11984:	049b      	lsls	r3, r3, #18
   11986:	0019      	movs	r1, r3
   11988:	2380      	movs	r3, #128	; 0x80
   1198a:	02db      	lsls	r3, r3, #11
   1198c:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   1198e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   11990:	687b      	ldr	r3, [r7, #4]
   11992:	791b      	ldrb	r3, [r3, #4]
   11994:	041b      	lsls	r3, r3, #16
   11996:	0019      	movs	r1, r3
   11998:	23c0      	movs	r3, #192	; 0xc0
   1199a:	029b      	lsls	r3, r3, #10
   1199c:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   1199e:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   119a0:	68fb      	ldr	r3, [r7, #12]
   119a2:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   119a4:	68fb      	ldr	r3, [r7, #12]
   119a6:	689b      	ldr	r3, [r3, #8]
   119a8:	035b      	lsls	r3, r3, #13
   119aa:	0f5b      	lsrs	r3, r3, #29
   119ac:	b2db      	uxtb	r3, r3
   119ae:	001a      	movs	r2, r3
   119b0:	2308      	movs	r3, #8
   119b2:	4093      	lsls	r3, r2
   119b4:	b29a      	uxth	r2, r3
   119b6:	4b10      	ldr	r3, [pc, #64]	; (119f8 <nvm_set_config+0xd4>)
   119b8:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   119ba:	68fb      	ldr	r3, [r7, #12]
   119bc:	689b      	ldr	r3, [r3, #8]
   119be:	b29a      	uxth	r2, r3
   119c0:	4b0d      	ldr	r3, [pc, #52]	; (119f8 <nvm_set_config+0xd4>)
   119c2:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   119c4:	687b      	ldr	r3, [r7, #4]
   119c6:	785a      	ldrb	r2, [r3, #1]
   119c8:	4b0b      	ldr	r3, [pc, #44]	; (119f8 <nvm_set_config+0xd4>)
   119ca:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   119cc:	68fb      	ldr	r3, [r7, #12]
   119ce:	8b1b      	ldrh	r3, [r3, #24]
   119d0:	b29b      	uxth	r3, r3
   119d2:	001a      	movs	r2, r3
   119d4:	2380      	movs	r3, #128	; 0x80
   119d6:	005b      	lsls	r3, r3, #1
   119d8:	4013      	ands	r3, r2
   119da:	d001      	beq.n	119e0 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   119dc:	2310      	movs	r3, #16
   119de:	e000      	b.n	119e2 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   119e0:	2300      	movs	r3, #0
}
   119e2:	0018      	movs	r0, r3
   119e4:	46bd      	mov	sp, r7
   119e6:	b004      	add	sp, #16
   119e8:	bd80      	pop	{r7, pc}
   119ea:	46c0      	nop			; (mov r8, r8)
   119ec:	41004000 	.word	0x41004000
   119f0:	000118c9 	.word	0x000118c9
   119f4:	000118a1 	.word	0x000118a1
   119f8:	20000414 	.word	0x20000414

000119fc <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   119fc:	b580      	push	{r7, lr}
   119fe:	b086      	sub	sp, #24
   11a00:	af00      	add	r7, sp, #0
   11a02:	60b9      	str	r1, [r7, #8]
   11a04:	607a      	str	r2, [r7, #4]
   11a06:	230f      	movs	r3, #15
   11a08:	18fb      	adds	r3, r7, r3
   11a0a:	1c02      	adds	r2, r0, #0
   11a0c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   11a0e:	4b3a      	ldr	r3, [pc, #232]	; (11af8 <nvm_execute_command+0xfc>)
   11a10:	881b      	ldrh	r3, [r3, #0]
   11a12:	001a      	movs	r2, r3
   11a14:	4b38      	ldr	r3, [pc, #224]	; (11af8 <nvm_execute_command+0xfc>)
   11a16:	885b      	ldrh	r3, [r3, #2]
   11a18:	435a      	muls	r2, r3
   11a1a:	68bb      	ldr	r3, [r7, #8]
   11a1c:	429a      	cmp	r2, r3
   11a1e:	d209      	bcs.n	11a34 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   11a20:	68bb      	ldr	r3, [r7, #8]
   11a22:	4a36      	ldr	r2, [pc, #216]	; (11afc <nvm_execute_command+0x100>)
   11a24:	4293      	cmp	r3, r2
   11a26:	d903      	bls.n	11a30 <nvm_execute_command+0x34>
   11a28:	68bb      	ldr	r3, [r7, #8]
   11a2a:	4a35      	ldr	r2, [pc, #212]	; (11b00 <nvm_execute_command+0x104>)
   11a2c:	4293      	cmp	r3, r2
   11a2e:	d901      	bls.n	11a34 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11a30:	2318      	movs	r3, #24
   11a32:	e05c      	b.n	11aee <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11a34:	4b33      	ldr	r3, [pc, #204]	; (11b04 <nvm_execute_command+0x108>)
   11a36:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   11a38:	697b      	ldr	r3, [r7, #20]
   11a3a:	685b      	ldr	r3, [r3, #4]
   11a3c:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   11a3e:	693b      	ldr	r3, [r7, #16]
   11a40:	2280      	movs	r2, #128	; 0x80
   11a42:	02d2      	lsls	r2, r2, #11
   11a44:	431a      	orrs	r2, r3
   11a46:	697b      	ldr	r3, [r7, #20]
   11a48:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11a4a:	697b      	ldr	r3, [r7, #20]
   11a4c:	2220      	movs	r2, #32
   11a4e:	32ff      	adds	r2, #255	; 0xff
   11a50:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11a52:	4b2d      	ldr	r3, [pc, #180]	; (11b08 <nvm_execute_command+0x10c>)
   11a54:	4798      	blx	r3
   11a56:	0003      	movs	r3, r0
   11a58:	001a      	movs	r2, r3
   11a5a:	2301      	movs	r3, #1
   11a5c:	4053      	eors	r3, r2
   11a5e:	b2db      	uxtb	r3, r3
   11a60:	2b00      	cmp	r3, #0
   11a62:	d004      	beq.n	11a6e <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   11a64:	697b      	ldr	r3, [r7, #20]
   11a66:	693a      	ldr	r2, [r7, #16]
   11a68:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   11a6a:	2305      	movs	r3, #5
   11a6c:	e03f      	b.n	11aee <nvm_execute_command+0xf2>
	}

	switch (command) {
   11a6e:	230f      	movs	r3, #15
   11a70:	18fb      	adds	r3, r7, r3
   11a72:	781b      	ldrb	r3, [r3, #0]
   11a74:	2b45      	cmp	r3, #69	; 0x45
   11a76:	d81d      	bhi.n	11ab4 <nvm_execute_command+0xb8>
   11a78:	009a      	lsls	r2, r3, #2
   11a7a:	4b24      	ldr	r3, [pc, #144]	; (11b0c <nvm_execute_command+0x110>)
   11a7c:	18d3      	adds	r3, r2, r3
   11a7e:	681b      	ldr	r3, [r3, #0]
   11a80:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11a82:	697b      	ldr	r3, [r7, #20]
   11a84:	8b1b      	ldrh	r3, [r3, #24]
   11a86:	b29b      	uxth	r3, r3
   11a88:	001a      	movs	r2, r3
   11a8a:	2380      	movs	r3, #128	; 0x80
   11a8c:	005b      	lsls	r3, r3, #1
   11a8e:	4013      	ands	r3, r2
   11a90:	d004      	beq.n	11a9c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   11a92:	697b      	ldr	r3, [r7, #20]
   11a94:	693a      	ldr	r2, [r7, #16]
   11a96:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   11a98:	2310      	movs	r3, #16
   11a9a:	e028      	b.n	11aee <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11a9c:	68bb      	ldr	r3, [r7, #8]
   11a9e:	089b      	lsrs	r3, r3, #2
   11aa0:	005a      	lsls	r2, r3, #1
   11aa2:	697b      	ldr	r3, [r7, #20]
   11aa4:	61da      	str	r2, [r3, #28]
			break;
   11aa6:	e00b      	b.n	11ac0 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11aa8:	68bb      	ldr	r3, [r7, #8]
   11aaa:	089b      	lsrs	r3, r3, #2
   11aac:	005a      	lsls	r2, r3, #1
   11aae:	697b      	ldr	r3, [r7, #20]
   11ab0:	61da      	str	r2, [r3, #28]
			break;
   11ab2:	e005      	b.n	11ac0 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   11ab4:	697b      	ldr	r3, [r7, #20]
   11ab6:	693a      	ldr	r2, [r7, #16]
   11ab8:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   11aba:	2317      	movs	r3, #23
   11abc:	e017      	b.n	11aee <nvm_execute_command+0xf2>
			break;
   11abe:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   11ac0:	230f      	movs	r3, #15
   11ac2:	18fb      	adds	r3, r7, r3
   11ac4:	781b      	ldrb	r3, [r3, #0]
   11ac6:	b29b      	uxth	r3, r3
   11ac8:	4a11      	ldr	r2, [pc, #68]	; (11b10 <nvm_execute_command+0x114>)
   11aca:	4313      	orrs	r3, r2
   11acc:	b29a      	uxth	r2, r3
   11ace:	697b      	ldr	r3, [r7, #20]
   11ad0:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   11ad2:	46c0      	nop			; (mov r8, r8)
   11ad4:	4b0c      	ldr	r3, [pc, #48]	; (11b08 <nvm_execute_command+0x10c>)
   11ad6:	4798      	blx	r3
   11ad8:	0003      	movs	r3, r0
   11ada:	001a      	movs	r2, r3
   11adc:	2301      	movs	r3, #1
   11ade:	4053      	eors	r3, r2
   11ae0:	b2db      	uxtb	r3, r3
   11ae2:	2b00      	cmp	r3, #0
   11ae4:	d1f6      	bne.n	11ad4 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   11ae6:	697b      	ldr	r3, [r7, #20]
   11ae8:	693a      	ldr	r2, [r7, #16]
   11aea:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   11aec:	2300      	movs	r3, #0
}
   11aee:	0018      	movs	r0, r3
   11af0:	46bd      	mov	sp, r7
   11af2:	b006      	add	sp, #24
   11af4:	bd80      	pop	{r7, pc}
   11af6:	46c0      	nop			; (mov r8, r8)
   11af8:	20000414 	.word	0x20000414
   11afc:	00803fff 	.word	0x00803fff
   11b00:	00806000 	.word	0x00806000
   11b04:	41004000 	.word	0x41004000
   11b08:	000118a1 	.word	0x000118a1
   11b0c:	000198d0 	.word	0x000198d0
   11b10:	ffffa500 	.word	0xffffa500

00011b14 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   11b14:	b580      	push	{r7, lr}
   11b16:	b088      	sub	sp, #32
   11b18:	af00      	add	r7, sp, #0
   11b1a:	60f8      	str	r0, [r7, #12]
   11b1c:	60b9      	str	r1, [r7, #8]
   11b1e:	1dbb      	adds	r3, r7, #6
   11b20:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11b22:	4b4a      	ldr	r3, [pc, #296]	; (11c4c <nvm_write_buffer+0x138>)
   11b24:	881b      	ldrh	r3, [r3, #0]
   11b26:	001a      	movs	r2, r3
   11b28:	4b48      	ldr	r3, [pc, #288]	; (11c4c <nvm_write_buffer+0x138>)
   11b2a:	885b      	ldrh	r3, [r3, #2]
   11b2c:	435a      	muls	r2, r3
	if (destination_address >
   11b2e:	68fb      	ldr	r3, [r7, #12]
   11b30:	429a      	cmp	r2, r3
   11b32:	d201      	bcs.n	11b38 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11b34:	2318      	movs	r3, #24
   11b36:	e084      	b.n	11c42 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   11b38:	4b44      	ldr	r3, [pc, #272]	; (11c4c <nvm_write_buffer+0x138>)
   11b3a:	881b      	ldrh	r3, [r3, #0]
   11b3c:	3b01      	subs	r3, #1
   11b3e:	001a      	movs	r2, r3
   11b40:	68fb      	ldr	r3, [r7, #12]
   11b42:	4013      	ands	r3, r2
   11b44:	d001      	beq.n	11b4a <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11b46:	2318      	movs	r3, #24
   11b48:	e07b      	b.n	11c42 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11b4a:	4b40      	ldr	r3, [pc, #256]	; (11c4c <nvm_write_buffer+0x138>)
   11b4c:	881b      	ldrh	r3, [r3, #0]
   11b4e:	1dba      	adds	r2, r7, #6
   11b50:	8812      	ldrh	r2, [r2, #0]
   11b52:	429a      	cmp	r2, r3
   11b54:	d901      	bls.n	11b5a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11b56:	2317      	movs	r3, #23
   11b58:	e073      	b.n	11c42 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11b5a:	4b3d      	ldr	r3, [pc, #244]	; (11c50 <nvm_write_buffer+0x13c>)
   11b5c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11b5e:	4b3d      	ldr	r3, [pc, #244]	; (11c54 <nvm_write_buffer+0x140>)
   11b60:	4798      	blx	r3
   11b62:	0003      	movs	r3, r0
   11b64:	001a      	movs	r2, r3
   11b66:	2301      	movs	r3, #1
   11b68:	4053      	eors	r3, r2
   11b6a:	b2db      	uxtb	r3, r3
   11b6c:	2b00      	cmp	r3, #0
   11b6e:	d001      	beq.n	11b74 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   11b70:	2305      	movs	r3, #5
   11b72:	e066      	b.n	11c42 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   11b74:	697b      	ldr	r3, [r7, #20]
   11b76:	4a38      	ldr	r2, [pc, #224]	; (11c58 <nvm_write_buffer+0x144>)
   11b78:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   11b7a:	46c0      	nop			; (mov r8, r8)
   11b7c:	4b35      	ldr	r3, [pc, #212]	; (11c54 <nvm_write_buffer+0x140>)
   11b7e:	4798      	blx	r3
   11b80:	0003      	movs	r3, r0
   11b82:	001a      	movs	r2, r3
   11b84:	2301      	movs	r3, #1
   11b86:	4053      	eors	r3, r2
   11b88:	b2db      	uxtb	r3, r3
   11b8a:	2b00      	cmp	r3, #0
   11b8c:	d1f6      	bne.n	11b7c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11b8e:	697b      	ldr	r3, [r7, #20]
   11b90:	2220      	movs	r2, #32
   11b92:	32ff      	adds	r2, #255	; 0xff
   11b94:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   11b96:	68fb      	ldr	r3, [r7, #12]
   11b98:	085b      	lsrs	r3, r3, #1
   11b9a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11b9c:	231a      	movs	r3, #26
   11b9e:	18fb      	adds	r3, r7, r3
   11ba0:	2200      	movs	r2, #0
   11ba2:	801a      	strh	r2, [r3, #0]
   11ba4:	e032      	b.n	11c0c <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   11ba6:	231a      	movs	r3, #26
   11ba8:	18fb      	adds	r3, r7, r3
   11baa:	881b      	ldrh	r3, [r3, #0]
   11bac:	68ba      	ldr	r2, [r7, #8]
   11bae:	18d3      	adds	r3, r2, r3
   11bb0:	781a      	ldrb	r2, [r3, #0]
   11bb2:	2318      	movs	r3, #24
   11bb4:	18fb      	adds	r3, r7, r3
   11bb6:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11bb8:	231a      	movs	r3, #26
   11bba:	18fb      	adds	r3, r7, r3
   11bbc:	881a      	ldrh	r2, [r3, #0]
   11bbe:	1dbb      	adds	r3, r7, #6
   11bc0:	881b      	ldrh	r3, [r3, #0]
   11bc2:	3b01      	subs	r3, #1
   11bc4:	429a      	cmp	r2, r3
   11bc6:	da11      	bge.n	11bec <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   11bc8:	231a      	movs	r3, #26
   11bca:	18fb      	adds	r3, r7, r3
   11bcc:	881b      	ldrh	r3, [r3, #0]
   11bce:	3301      	adds	r3, #1
   11bd0:	68ba      	ldr	r2, [r7, #8]
   11bd2:	18d3      	adds	r3, r2, r3
   11bd4:	781b      	ldrb	r3, [r3, #0]
   11bd6:	021b      	lsls	r3, r3, #8
   11bd8:	b21a      	sxth	r2, r3
   11bda:	2318      	movs	r3, #24
   11bdc:	18fb      	adds	r3, r7, r3
   11bde:	2100      	movs	r1, #0
   11be0:	5e5b      	ldrsh	r3, [r3, r1]
   11be2:	4313      	orrs	r3, r2
   11be4:	b21a      	sxth	r2, r3
   11be6:	2318      	movs	r3, #24
   11be8:	18fb      	adds	r3, r7, r3
   11bea:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   11bec:	69fb      	ldr	r3, [r7, #28]
   11bee:	1c5a      	adds	r2, r3, #1
   11bf0:	61fa      	str	r2, [r7, #28]
   11bf2:	005b      	lsls	r3, r3, #1
   11bf4:	001a      	movs	r2, r3
   11bf6:	2318      	movs	r3, #24
   11bf8:	18fb      	adds	r3, r7, r3
   11bfa:	881b      	ldrh	r3, [r3, #0]
   11bfc:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   11bfe:	231a      	movs	r3, #26
   11c00:	18fb      	adds	r3, r7, r3
   11c02:	221a      	movs	r2, #26
   11c04:	18ba      	adds	r2, r7, r2
   11c06:	8812      	ldrh	r2, [r2, #0]
   11c08:	3202      	adds	r2, #2
   11c0a:	801a      	strh	r2, [r3, #0]
   11c0c:	231a      	movs	r3, #26
   11c0e:	18fa      	adds	r2, r7, r3
   11c10:	1dbb      	adds	r3, r7, #6
   11c12:	8812      	ldrh	r2, [r2, #0]
   11c14:	881b      	ldrh	r3, [r3, #0]
   11c16:	429a      	cmp	r2, r3
   11c18:	d3c5      	bcc.n	11ba6 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   11c1a:	4b0c      	ldr	r3, [pc, #48]	; (11c4c <nvm_write_buffer+0x138>)
   11c1c:	791b      	ldrb	r3, [r3, #4]
   11c1e:	2201      	movs	r2, #1
   11c20:	4053      	eors	r3, r2
   11c22:	b2db      	uxtb	r3, r3
   11c24:	2b00      	cmp	r3, #0
   11c26:	d00b      	beq.n	11c40 <nvm_write_buffer+0x12c>
   11c28:	1dbb      	adds	r3, r7, #6
   11c2a:	881b      	ldrh	r3, [r3, #0]
   11c2c:	2b3f      	cmp	r3, #63	; 0x3f
   11c2e:	d807      	bhi.n	11c40 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   11c30:	68fb      	ldr	r3, [r7, #12]
   11c32:	2200      	movs	r2, #0
   11c34:	0019      	movs	r1, r3
   11c36:	2004      	movs	r0, #4
   11c38:	4b08      	ldr	r3, [pc, #32]	; (11c5c <nvm_write_buffer+0x148>)
   11c3a:	4798      	blx	r3
   11c3c:	0003      	movs	r3, r0
   11c3e:	e000      	b.n	11c42 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   11c40:	2300      	movs	r3, #0
}
   11c42:	0018      	movs	r0, r3
   11c44:	46bd      	mov	sp, r7
   11c46:	b008      	add	sp, #32
   11c48:	bd80      	pop	{r7, pc}
   11c4a:	46c0      	nop			; (mov r8, r8)
   11c4c:	20000414 	.word	0x20000414
   11c50:	41004000 	.word	0x41004000
   11c54:	000118a1 	.word	0x000118a1
   11c58:	ffffa544 	.word	0xffffa544
   11c5c:	000119fd 	.word	0x000119fd

00011c60 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   11c60:	b580      	push	{r7, lr}
   11c62:	b088      	sub	sp, #32
   11c64:	af00      	add	r7, sp, #0
   11c66:	60f8      	str	r0, [r7, #12]
   11c68:	60b9      	str	r1, [r7, #8]
   11c6a:	1dbb      	adds	r3, r7, #6
   11c6c:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11c6e:	4b38      	ldr	r3, [pc, #224]	; (11d50 <nvm_read_buffer+0xf0>)
   11c70:	881b      	ldrh	r3, [r3, #0]
   11c72:	001a      	movs	r2, r3
   11c74:	4b36      	ldr	r3, [pc, #216]	; (11d50 <nvm_read_buffer+0xf0>)
   11c76:	885b      	ldrh	r3, [r3, #2]
   11c78:	435a      	muls	r2, r3
	if (source_address >
   11c7a:	68fb      	ldr	r3, [r7, #12]
   11c7c:	429a      	cmp	r2, r3
   11c7e:	d201      	bcs.n	11c84 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11c80:	2318      	movs	r3, #24
   11c82:	e060      	b.n	11d46 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   11c84:	4b32      	ldr	r3, [pc, #200]	; (11d50 <nvm_read_buffer+0xf0>)
   11c86:	881b      	ldrh	r3, [r3, #0]
   11c88:	3b01      	subs	r3, #1
   11c8a:	001a      	movs	r2, r3
   11c8c:	68fb      	ldr	r3, [r7, #12]
   11c8e:	4013      	ands	r3, r2
   11c90:	d001      	beq.n	11c96 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11c92:	2318      	movs	r3, #24
   11c94:	e057      	b.n	11d46 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11c96:	4b2e      	ldr	r3, [pc, #184]	; (11d50 <nvm_read_buffer+0xf0>)
   11c98:	881b      	ldrh	r3, [r3, #0]
   11c9a:	1dba      	adds	r2, r7, #6
   11c9c:	8812      	ldrh	r2, [r2, #0]
   11c9e:	429a      	cmp	r2, r3
   11ca0:	d901      	bls.n	11ca6 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11ca2:	2317      	movs	r3, #23
   11ca4:	e04f      	b.n	11d46 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11ca6:	4b2b      	ldr	r3, [pc, #172]	; (11d54 <nvm_read_buffer+0xf4>)
   11ca8:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11caa:	4b2b      	ldr	r3, [pc, #172]	; (11d58 <nvm_read_buffer+0xf8>)
   11cac:	4798      	blx	r3
   11cae:	0003      	movs	r3, r0
   11cb0:	001a      	movs	r2, r3
   11cb2:	2301      	movs	r3, #1
   11cb4:	4053      	eors	r3, r2
   11cb6:	b2db      	uxtb	r3, r3
   11cb8:	2b00      	cmp	r3, #0
   11cba:	d001      	beq.n	11cc0 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   11cbc:	2305      	movs	r3, #5
   11cbe:	e042      	b.n	11d46 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11cc0:	697b      	ldr	r3, [r7, #20]
   11cc2:	2220      	movs	r2, #32
   11cc4:	32ff      	adds	r2, #255	; 0xff
   11cc6:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   11cc8:	68fb      	ldr	r3, [r7, #12]
   11cca:	085b      	lsrs	r3, r3, #1
   11ccc:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11cce:	231a      	movs	r3, #26
   11cd0:	18fb      	adds	r3, r7, r3
   11cd2:	2200      	movs	r2, #0
   11cd4:	801a      	strh	r2, [r3, #0]
   11cd6:	e02e      	b.n	11d36 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   11cd8:	69fb      	ldr	r3, [r7, #28]
   11cda:	1c5a      	adds	r2, r3, #1
   11cdc:	61fa      	str	r2, [r7, #28]
   11cde:	005b      	lsls	r3, r3, #1
   11ce0:	001a      	movs	r2, r3
   11ce2:	2312      	movs	r3, #18
   11ce4:	18fb      	adds	r3, r7, r3
   11ce6:	8812      	ldrh	r2, [r2, #0]
   11ce8:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   11cea:	231a      	movs	r3, #26
   11cec:	18fb      	adds	r3, r7, r3
   11cee:	881b      	ldrh	r3, [r3, #0]
   11cf0:	68ba      	ldr	r2, [r7, #8]
   11cf2:	18d3      	adds	r3, r2, r3
   11cf4:	2212      	movs	r2, #18
   11cf6:	18ba      	adds	r2, r7, r2
   11cf8:	8812      	ldrh	r2, [r2, #0]
   11cfa:	b2d2      	uxtb	r2, r2
   11cfc:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11cfe:	231a      	movs	r3, #26
   11d00:	18fb      	adds	r3, r7, r3
   11d02:	881a      	ldrh	r2, [r3, #0]
   11d04:	1dbb      	adds	r3, r7, #6
   11d06:	881b      	ldrh	r3, [r3, #0]
   11d08:	3b01      	subs	r3, #1
   11d0a:	429a      	cmp	r2, r3
   11d0c:	da0c      	bge.n	11d28 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   11d0e:	231a      	movs	r3, #26
   11d10:	18fb      	adds	r3, r7, r3
   11d12:	881b      	ldrh	r3, [r3, #0]
   11d14:	3301      	adds	r3, #1
   11d16:	68ba      	ldr	r2, [r7, #8]
   11d18:	18d3      	adds	r3, r2, r3
   11d1a:	2212      	movs	r2, #18
   11d1c:	18ba      	adds	r2, r7, r2
   11d1e:	8812      	ldrh	r2, [r2, #0]
   11d20:	0a12      	lsrs	r2, r2, #8
   11d22:	b292      	uxth	r2, r2
   11d24:	b2d2      	uxtb	r2, r2
   11d26:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   11d28:	231a      	movs	r3, #26
   11d2a:	18fb      	adds	r3, r7, r3
   11d2c:	221a      	movs	r2, #26
   11d2e:	18ba      	adds	r2, r7, r2
   11d30:	8812      	ldrh	r2, [r2, #0]
   11d32:	3202      	adds	r2, #2
   11d34:	801a      	strh	r2, [r3, #0]
   11d36:	231a      	movs	r3, #26
   11d38:	18fa      	adds	r2, r7, r3
   11d3a:	1dbb      	adds	r3, r7, #6
   11d3c:	8812      	ldrh	r2, [r2, #0]
   11d3e:	881b      	ldrh	r3, [r3, #0]
   11d40:	429a      	cmp	r2, r3
   11d42:	d3c9      	bcc.n	11cd8 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   11d44:	2300      	movs	r3, #0
}
   11d46:	0018      	movs	r0, r3
   11d48:	46bd      	mov	sp, r7
   11d4a:	b008      	add	sp, #32
   11d4c:	bd80      	pop	{r7, pc}
   11d4e:	46c0      	nop			; (mov r8, r8)
   11d50:	20000414 	.word	0x20000414
   11d54:	41004000 	.word	0x41004000
   11d58:	000118a1 	.word	0x000118a1

00011d5c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   11d5c:	b580      	push	{r7, lr}
   11d5e:	b084      	sub	sp, #16
   11d60:	af00      	add	r7, sp, #0
   11d62:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11d64:	4b23      	ldr	r3, [pc, #140]	; (11df4 <nvm_erase_row+0x98>)
   11d66:	881b      	ldrh	r3, [r3, #0]
   11d68:	001a      	movs	r2, r3
   11d6a:	4b22      	ldr	r3, [pc, #136]	; (11df4 <nvm_erase_row+0x98>)
   11d6c:	885b      	ldrh	r3, [r3, #2]
   11d6e:	435a      	muls	r2, r3
	if (row_address >
   11d70:	687b      	ldr	r3, [r7, #4]
   11d72:	429a      	cmp	r2, r3
   11d74:	d201      	bcs.n	11d7a <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11d76:	2318      	movs	r3, #24
   11d78:	e037      	b.n	11dea <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   11d7a:	4b1e      	ldr	r3, [pc, #120]	; (11df4 <nvm_erase_row+0x98>)
   11d7c:	881b      	ldrh	r3, [r3, #0]
   11d7e:	009b      	lsls	r3, r3, #2
   11d80:	3b01      	subs	r3, #1
   11d82:	001a      	movs	r2, r3
   11d84:	687b      	ldr	r3, [r7, #4]
   11d86:	4013      	ands	r3, r2
   11d88:	d001      	beq.n	11d8e <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   11d8a:	2318      	movs	r3, #24
   11d8c:	e02d      	b.n	11dea <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11d8e:	4b1a      	ldr	r3, [pc, #104]	; (11df8 <nvm_erase_row+0x9c>)
   11d90:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11d92:	4b1a      	ldr	r3, [pc, #104]	; (11dfc <nvm_erase_row+0xa0>)
   11d94:	4798      	blx	r3
   11d96:	0003      	movs	r3, r0
   11d98:	001a      	movs	r2, r3
   11d9a:	2301      	movs	r3, #1
   11d9c:	4053      	eors	r3, r2
   11d9e:	b2db      	uxtb	r3, r3
   11da0:	2b00      	cmp	r3, #0
   11da2:	d001      	beq.n	11da8 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   11da4:	2305      	movs	r3, #5
   11da6:	e020      	b.n	11dea <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11da8:	68fb      	ldr	r3, [r7, #12]
   11daa:	2220      	movs	r2, #32
   11dac:	32ff      	adds	r2, #255	; 0xff
   11dae:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   11db0:	687b      	ldr	r3, [r7, #4]
   11db2:	089b      	lsrs	r3, r3, #2
   11db4:	005a      	lsls	r2, r3, #1
   11db6:	68fb      	ldr	r3, [r7, #12]
   11db8:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   11dba:	68fb      	ldr	r3, [r7, #12]
   11dbc:	4a10      	ldr	r2, [pc, #64]	; (11e00 <nvm_erase_row+0xa4>)
   11dbe:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   11dc0:	46c0      	nop			; (mov r8, r8)
   11dc2:	4b0e      	ldr	r3, [pc, #56]	; (11dfc <nvm_erase_row+0xa0>)
   11dc4:	4798      	blx	r3
   11dc6:	0003      	movs	r3, r0
   11dc8:	001a      	movs	r2, r3
   11dca:	2301      	movs	r3, #1
   11dcc:	4053      	eors	r3, r2
   11dce:	b2db      	uxtb	r3, r3
   11dd0:	2b00      	cmp	r3, #0
   11dd2:	d1f6      	bne.n	11dc2 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   11dd4:	68fb      	ldr	r3, [r7, #12]
   11dd6:	8b1b      	ldrh	r3, [r3, #24]
   11dd8:	b29b      	uxth	r3, r3
   11dda:	b2db      	uxtb	r3, r3
   11ddc:	001a      	movs	r2, r3
   11dde:	231c      	movs	r3, #28
   11de0:	4013      	ands	r3, r2
   11de2:	d001      	beq.n	11de8 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   11de4:	2304      	movs	r3, #4
   11de6:	e000      	b.n	11dea <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   11de8:	2300      	movs	r3, #0
}
   11dea:	0018      	movs	r0, r3
   11dec:	46bd      	mov	sp, r7
   11dee:	b004      	add	sp, #16
   11df0:	bd80      	pop	{r7, pc}
   11df2:	46c0      	nop			; (mov r8, r8)
   11df4:	20000414 	.word	0x20000414
   11df8:	41004000 	.word	0x41004000
   11dfc:	000118a1 	.word	0x000118a1
   11e00:	ffffa502 	.word	0xffffa502

00011e04 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
   11e04:	b580      	push	{r7, lr}
   11e06:	b086      	sub	sp, #24
   11e08:	af00      	add	r7, sp, #0
   11e0a:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11e0c:	4b2a      	ldr	r3, [pc, #168]	; (11eb8 <nvm_get_parameters+0xb4>)
   11e0e:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11e10:	697b      	ldr	r3, [r7, #20]
   11e12:	2220      	movs	r2, #32
   11e14:	32ff      	adds	r2, #255	; 0xff
   11e16:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
   11e18:	697b      	ldr	r3, [r7, #20]
   11e1a:	689b      	ldr	r3, [r3, #8]
   11e1c:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
   11e1e:	693b      	ldr	r3, [r7, #16]
   11e20:	0c1b      	lsrs	r3, r3, #16
   11e22:	2207      	movs	r2, #7
   11e24:	4013      	ands	r3, r2
   11e26:	2208      	movs	r2, #8
   11e28:	409a      	lsls	r2, r3
   11e2a:	0013      	movs	r3, r2
	parameters->page_size =
   11e2c:	b2da      	uxtb	r2, r3
   11e2e:	687b      	ldr	r3, [r7, #4]
   11e30:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
   11e32:	693b      	ldr	r3, [r7, #16]
   11e34:	b29a      	uxth	r2, r3
   11e36:	687b      	ldr	r3, [r7, #4]
   11e38:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
   11e3a:	4b20      	ldr	r3, [pc, #128]	; (11ebc <nvm_get_parameters+0xb8>)
   11e3c:	881b      	ldrh	r3, [r3, #0]
   11e3e:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
   11e40:	091b      	lsrs	r3, r3, #4
   11e42:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
   11e44:	230e      	movs	r3, #14
   11e46:	18fb      	adds	r3, r7, r3
   11e48:	2107      	movs	r1, #7
   11e4a:	400a      	ands	r2, r1
   11e4c:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
   11e4e:	230e      	movs	r3, #14
   11e50:	18fb      	adds	r3, r7, r3
   11e52:	881b      	ldrh	r3, [r3, #0]
   11e54:	2b07      	cmp	r3, #7
   11e56:	d103      	bne.n	11e60 <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
   11e58:	687b      	ldr	r3, [r7, #4]
   11e5a:	2200      	movs	r2, #0
   11e5c:	605a      	str	r2, [r3, #4]
   11e5e:	e00a      	b.n	11e76 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
   11e60:	230e      	movs	r3, #14
   11e62:	18fb      	adds	r3, r7, r3
   11e64:	881b      	ldrh	r3, [r3, #0]
   11e66:	2206      	movs	r2, #6
   11e68:	1ad3      	subs	r3, r2, r3
   11e6a:	2204      	movs	r2, #4
   11e6c:	409a      	lsls	r2, r3
   11e6e:	0013      	movs	r3, r2
   11e70:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
   11e72:	687b      	ldr	r3, [r7, #4]
   11e74:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
   11e76:	4b11      	ldr	r3, [pc, #68]	; (11ebc <nvm_get_parameters+0xb8>)
   11e78:	881b      	ldrh	r3, [r3, #0]
   11e7a:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
   11e7c:	230c      	movs	r3, #12
   11e7e:	18fb      	adds	r3, r7, r3
   11e80:	2107      	movs	r1, #7
   11e82:	400a      	ands	r2, r1
   11e84:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
   11e86:	230c      	movs	r3, #12
   11e88:	18fb      	adds	r3, r7, r3
   11e8a:	881b      	ldrh	r3, [r3, #0]
   11e8c:	2b07      	cmp	r3, #7
   11e8e:	d103      	bne.n	11e98 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
   11e90:	687b      	ldr	r3, [r7, #4]
   11e92:	2200      	movs	r2, #0
   11e94:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
   11e96:	e00a      	b.n	11eae <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
   11e98:	230c      	movs	r3, #12
   11e9a:	18fb      	adds	r3, r7, r3
   11e9c:	881b      	ldrh	r3, [r3, #0]
   11e9e:	2207      	movs	r2, #7
   11ea0:	1ad3      	subs	r3, r2, r3
   11ea2:	2204      	movs	r2, #4
   11ea4:	409a      	lsls	r2, r3
   11ea6:	0013      	movs	r3, r2
   11ea8:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
   11eaa:	687b      	ldr	r3, [r7, #4]
   11eac:	609a      	str	r2, [r3, #8]
}
   11eae:	46c0      	nop			; (mov r8, r8)
   11eb0:	46bd      	mov	sp, r7
   11eb2:	b006      	add	sp, #24
   11eb4:	bd80      	pop	{r7, pc}
   11eb6:	46c0      	nop			; (mov r8, r8)
   11eb8:	41004000 	.word	0x41004000
   11ebc:	00804000 	.word	0x00804000

00011ec0 <system_pinmux_get_config_defaults>:
{
   11ec0:	b580      	push	{r7, lr}
   11ec2:	b082      	sub	sp, #8
   11ec4:	af00      	add	r7, sp, #0
   11ec6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   11ec8:	687b      	ldr	r3, [r7, #4]
   11eca:	2280      	movs	r2, #128	; 0x80
   11ecc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   11ece:	687b      	ldr	r3, [r7, #4]
   11ed0:	2200      	movs	r2, #0
   11ed2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   11ed4:	687b      	ldr	r3, [r7, #4]
   11ed6:	2201      	movs	r2, #1
   11ed8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   11eda:	687b      	ldr	r3, [r7, #4]
   11edc:	2200      	movs	r2, #0
   11ede:	70da      	strb	r2, [r3, #3]
}
   11ee0:	46c0      	nop			; (mov r8, r8)
   11ee2:	46bd      	mov	sp, r7
   11ee4:	b002      	add	sp, #8
   11ee6:	bd80      	pop	{r7, pc}

00011ee8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   11ee8:	b580      	push	{r7, lr}
   11eea:	b084      	sub	sp, #16
   11eec:	af00      	add	r7, sp, #0
   11eee:	0002      	movs	r2, r0
   11ef0:	6039      	str	r1, [r7, #0]
   11ef2:	1dfb      	adds	r3, r7, #7
   11ef4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   11ef6:	230c      	movs	r3, #12
   11ef8:	18fb      	adds	r3, r7, r3
   11efa:	0018      	movs	r0, r3
   11efc:	4b10      	ldr	r3, [pc, #64]	; (11f40 <port_pin_set_config+0x58>)
   11efe:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   11f00:	230c      	movs	r3, #12
   11f02:	18fb      	adds	r3, r7, r3
   11f04:	2280      	movs	r2, #128	; 0x80
   11f06:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   11f08:	683b      	ldr	r3, [r7, #0]
   11f0a:	781a      	ldrb	r2, [r3, #0]
   11f0c:	230c      	movs	r3, #12
   11f0e:	18fb      	adds	r3, r7, r3
   11f10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   11f12:	683b      	ldr	r3, [r7, #0]
   11f14:	785a      	ldrb	r2, [r3, #1]
   11f16:	230c      	movs	r3, #12
   11f18:	18fb      	adds	r3, r7, r3
   11f1a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   11f1c:	683b      	ldr	r3, [r7, #0]
   11f1e:	789a      	ldrb	r2, [r3, #2]
   11f20:	230c      	movs	r3, #12
   11f22:	18fb      	adds	r3, r7, r3
   11f24:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   11f26:	230c      	movs	r3, #12
   11f28:	18fa      	adds	r2, r7, r3
   11f2a:	1dfb      	adds	r3, r7, #7
   11f2c:	781b      	ldrb	r3, [r3, #0]
   11f2e:	0011      	movs	r1, r2
   11f30:	0018      	movs	r0, r3
   11f32:	4b04      	ldr	r3, [pc, #16]	; (11f44 <port_pin_set_config+0x5c>)
   11f34:	4798      	blx	r3
}
   11f36:	46c0      	nop			; (mov r8, r8)
   11f38:	46bd      	mov	sp, r7
   11f3a:	b004      	add	sp, #16
   11f3c:	bd80      	pop	{r7, pc}
   11f3e:	46c0      	nop			; (mov r8, r8)
   11f40:	00011ec1 	.word	0x00011ec1
   11f44:	00013c19 	.word	0x00013c19

00011f48 <nvm_get_config_defaults>:
{
   11f48:	b580      	push	{r7, lr}
   11f4a:	b082      	sub	sp, #8
   11f4c:	af00      	add	r7, sp, #0
   11f4e:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   11f50:	687b      	ldr	r3, [r7, #4]
   11f52:	2200      	movs	r2, #0
   11f54:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   11f56:	687b      	ldr	r3, [r7, #4]
   11f58:	2201      	movs	r2, #1
   11f5a:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   11f5c:	4b08      	ldr	r3, [pc, #32]	; (11f80 <nvm_get_config_defaults+0x38>)
   11f5e:	685b      	ldr	r3, [r3, #4]
   11f60:	06db      	lsls	r3, r3, #27
   11f62:	0f1b      	lsrs	r3, r3, #28
   11f64:	b2db      	uxtb	r3, r3
   11f66:	001a      	movs	r2, r3
   11f68:	687b      	ldr	r3, [r7, #4]
   11f6a:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   11f6c:	687b      	ldr	r3, [r7, #4]
   11f6e:	2200      	movs	r2, #0
   11f70:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   11f72:	687b      	ldr	r3, [r7, #4]
   11f74:	2200      	movs	r2, #0
   11f76:	711a      	strb	r2, [r3, #4]
}
   11f78:	46c0      	nop			; (mov r8, r8)
   11f7a:	46bd      	mov	sp, r7
   11f7c:	b002      	add	sp, #8
   11f7e:	bd80      	pop	{r7, pc}
   11f80:	41004000 	.word	0x41004000

00011f84 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
   11f84:	b590      	push	{r4, r7, lr}
   11f86:	b085      	sub	sp, #20
   11f88:	af00      	add	r7, sp, #0
   11f8a:	0002      	movs	r2, r0
   11f8c:	1dfb      	adds	r3, r7, #7
   11f8e:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   11f90:	230f      	movs	r3, #15
   11f92:	18fb      	adds	r3, r7, r3
   11f94:	2200      	movs	r2, #0
   11f96:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
   11f98:	4b0a      	ldr	r3, [pc, #40]	; (11fc4 <_eeprom_emulator_nvm_erase_row+0x40>)
   11f9a:	685b      	ldr	r3, [r3, #4]
   11f9c:	1dfa      	adds	r2, r7, #7
   11f9e:	7812      	ldrb	r2, [r2, #0]
   11fa0:	0212      	lsls	r2, r2, #8
   11fa2:	189b      	adds	r3, r3, r2
		error_code = nvm_erase_row(
   11fa4:	220f      	movs	r2, #15
   11fa6:	18bc      	adds	r4, r7, r2
   11fa8:	0018      	movs	r0, r3
   11faa:	4b07      	ldr	r3, [pc, #28]	; (11fc8 <_eeprom_emulator_nvm_erase_row+0x44>)
   11fac:	4798      	blx	r3
   11fae:	0003      	movs	r3, r0
   11fb0:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   11fb2:	230f      	movs	r3, #15
   11fb4:	18fb      	adds	r3, r7, r3
   11fb6:	781b      	ldrb	r3, [r3, #0]
   11fb8:	2b05      	cmp	r3, #5
   11fba:	d0ed      	beq.n	11f98 <_eeprom_emulator_nvm_erase_row+0x14>
}
   11fbc:	46c0      	nop			; (mov r8, r8)
   11fbe:	46bd      	mov	sp, r7
   11fc0:	b005      	add	sp, #20
   11fc2:	bd90      	pop	{r4, r7, pc}
   11fc4:	2000041c 	.word	0x2000041c
   11fc8:	00011d5d 	.word	0x00011d5d

00011fcc <_eeprom_emulator_nvm_fill_cache>:
 *  \param[in] data           Data to write to the physical memory page
 */
static void _eeprom_emulator_nvm_fill_cache(
		const uint16_t physical_page,
		const void* const data)
{
   11fcc:	b590      	push	{r4, r7, lr}
   11fce:	b085      	sub	sp, #20
   11fd0:	af00      	add	r7, sp, #0
   11fd2:	0002      	movs	r2, r0
   11fd4:	6039      	str	r1, [r7, #0]
   11fd6:	1dbb      	adds	r3, r7, #6
   11fd8:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   11fda:	230f      	movs	r3, #15
   11fdc:	18fb      	adds	r3, r7, r3
   11fde:	2200      	movs	r2, #0
   11fe0:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_write_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   11fe2:	4b0c      	ldr	r3, [pc, #48]	; (12014 <_eeprom_emulator_nvm_fill_cache+0x48>)
   11fe4:	685a      	ldr	r2, [r3, #4]
   11fe6:	1dbb      	adds	r3, r7, #6
   11fe8:	881b      	ldrh	r3, [r3, #0]
   11fea:	019b      	lsls	r3, r3, #6
   11fec:	18d3      	adds	r3, r2, r3
		error_code = nvm_write_buffer(
   11fee:	0018      	movs	r0, r3
   11ff0:	230f      	movs	r3, #15
   11ff2:	18fc      	adds	r4, r7, r3
   11ff4:	683b      	ldr	r3, [r7, #0]
   11ff6:	2240      	movs	r2, #64	; 0x40
   11ff8:	0019      	movs	r1, r3
   11ffa:	4b07      	ldr	r3, [pc, #28]	; (12018 <_eeprom_emulator_nvm_fill_cache+0x4c>)
   11ffc:	4798      	blx	r3
   11ffe:	0003      	movs	r3, r0
   12000:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   12002:	230f      	movs	r3, #15
   12004:	18fb      	adds	r3, r7, r3
   12006:	781b      	ldrb	r3, [r3, #0]
   12008:	2b05      	cmp	r3, #5
   1200a:	d0ea      	beq.n	11fe2 <_eeprom_emulator_nvm_fill_cache+0x16>
}
   1200c:	46c0      	nop			; (mov r8, r8)
   1200e:	46bd      	mov	sp, r7
   12010:	b005      	add	sp, #20
   12012:	bd90      	pop	{r4, r7, pc}
   12014:	2000041c 	.word	0x2000041c
   12018:	00011b15 	.word	0x00011b15

0001201c <_eeprom_emulator_nvm_commit_cache>:
 *
 *  \param[in] physical_page  Physical page in EEPROM space to commit
 */
static void _eeprom_emulator_nvm_commit_cache(
		const uint16_t physical_page)
{
   1201c:	b590      	push	{r4, r7, lr}
   1201e:	b085      	sub	sp, #20
   12020:	af00      	add	r7, sp, #0
   12022:	0002      	movs	r2, r0
   12024:	1dbb      	adds	r3, r7, #6
   12026:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   12028:	230f      	movs	r3, #15
   1202a:	18fb      	adds	r3, r7, r3
   1202c:	2200      	movs	r2, #0
   1202e:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_execute_command(
				NVM_COMMAND_WRITE_PAGE,
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
   12030:	4b0b      	ldr	r3, [pc, #44]	; (12060 <_eeprom_emulator_nvm_commit_cache+0x44>)
   12032:	685a      	ldr	r2, [r3, #4]
   12034:	1dbb      	adds	r3, r7, #6
   12036:	881b      	ldrh	r3, [r3, #0]
   12038:	019b      	lsls	r3, r3, #6
   1203a:	18d3      	adds	r3, r2, r3
		error_code = nvm_execute_command(
   1203c:	220f      	movs	r2, #15
   1203e:	18bc      	adds	r4, r7, r2
   12040:	2200      	movs	r2, #0
   12042:	0019      	movs	r1, r3
   12044:	2004      	movs	r0, #4
   12046:	4b07      	ldr	r3, [pc, #28]	; (12064 <_eeprom_emulator_nvm_commit_cache+0x48>)
   12048:	4798      	blx	r3
   1204a:	0003      	movs	r3, r0
   1204c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   1204e:	230f      	movs	r3, #15
   12050:	18fb      	adds	r3, r7, r3
   12052:	781b      	ldrb	r3, [r3, #0]
   12054:	2b05      	cmp	r3, #5
   12056:	d0eb      	beq.n	12030 <_eeprom_emulator_nvm_commit_cache+0x14>
}
   12058:	46c0      	nop			; (mov r8, r8)
   1205a:	46bd      	mov	sp, r7
   1205c:	b005      	add	sp, #20
   1205e:	bd90      	pop	{r4, r7, pc}
   12060:	2000041c 	.word	0x2000041c
   12064:	000119fd 	.word	0x000119fd

00012068 <_eeprom_emulator_nvm_read_page>:
 *  \param[out] data           Destination buffer to fill with the read data
 */
static void _eeprom_emulator_nvm_read_page(
		const uint16_t physical_page,
		void* const data)
{
   12068:	b590      	push	{r4, r7, lr}
   1206a:	b085      	sub	sp, #20
   1206c:	af00      	add	r7, sp, #0
   1206e:	0002      	movs	r2, r0
   12070:	6039      	str	r1, [r7, #0]
   12072:	1dbb      	adds	r3, r7, #6
   12074:	801a      	strh	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   12076:	230f      	movs	r3, #15
   12078:	18fb      	adds	r3, r7, r3
   1207a:	2200      	movs	r2, #0
   1207c:	701a      	strb	r2, [r3, #0]

	do {
		error_code = nvm_read_buffer(
				(uint32_t)&_eeprom_instance.flash[physical_page],
   1207e:	4b0c      	ldr	r3, [pc, #48]	; (120b0 <_eeprom_emulator_nvm_read_page+0x48>)
   12080:	685a      	ldr	r2, [r3, #4]
   12082:	1dbb      	adds	r3, r7, #6
   12084:	881b      	ldrh	r3, [r3, #0]
   12086:	019b      	lsls	r3, r3, #6
   12088:	18d3      	adds	r3, r2, r3
		error_code = nvm_read_buffer(
   1208a:	0018      	movs	r0, r3
   1208c:	230f      	movs	r3, #15
   1208e:	18fc      	adds	r4, r7, r3
   12090:	683b      	ldr	r3, [r7, #0]
   12092:	2240      	movs	r2, #64	; 0x40
   12094:	0019      	movs	r1, r3
   12096:	4b07      	ldr	r3, [pc, #28]	; (120b4 <_eeprom_emulator_nvm_read_page+0x4c>)
   12098:	4798      	blx	r3
   1209a:	0003      	movs	r3, r0
   1209c:	7023      	strb	r3, [r4, #0]
				(uint8_t*)data,
				NVMCTRL_PAGE_SIZE);
	} while (error_code == STATUS_BUSY);
   1209e:	230f      	movs	r3, #15
   120a0:	18fb      	adds	r3, r7, r3
   120a2:	781b      	ldrb	r3, [r3, #0]
   120a4:	2b05      	cmp	r3, #5
   120a6:	d0ea      	beq.n	1207e <_eeprom_emulator_nvm_read_page+0x16>
}
   120a8:	46c0      	nop			; (mov r8, r8)
   120aa:	46bd      	mov	sp, r7
   120ac:	b005      	add	sp, #20
   120ae:	bd90      	pop	{r4, r7, pc}
   120b0:	2000041c 	.word	0x2000041c
   120b4:	00011c61 	.word	0x00011c61

000120b8 <_eeprom_emulator_format_memory>:

/**
 * \brief Initializes the emulated EEPROM memory, destroying the current contents.
 */
static void _eeprom_emulator_format_memory(void)
{
   120b8:	b580      	push	{r7, lr}
   120ba:	b092      	sub	sp, #72	; 0x48
   120bc:	af00      	add	r7, sp, #0
	uint16_t logical_page = 0;
   120be:	2346      	movs	r3, #70	; 0x46
   120c0:	18fb      	adds	r3, r7, r3
   120c2:	2200      	movs	r2, #0
   120c4:	801a      	strh	r2, [r3, #0]

	/* Set row 0 as the spare row */
	_eeprom_instance.spare_row = 0;
   120c6:	4b32      	ldr	r3, [pc, #200]	; (12190 <_eeprom_emulator_format_memory+0xd8>)
   120c8:	2287      	movs	r2, #135	; 0x87
   120ca:	2100      	movs	r1, #0
   120cc:	5499      	strb	r1, [r3, r2]
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
   120ce:	4b30      	ldr	r3, [pc, #192]	; (12190 <_eeprom_emulator_format_memory+0xd8>)
   120d0:	2287      	movs	r2, #135	; 0x87
   120d2:	5c9b      	ldrb	r3, [r3, r2]
   120d4:	0018      	movs	r0, r3
   120d6:	4b2f      	ldr	r3, [pc, #188]	; (12194 <_eeprom_emulator_format_memory+0xdc>)
   120d8:	4798      	blx	r3

	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   120da:	2344      	movs	r3, #68	; 0x44
   120dc:	18fb      	adds	r3, r7, r3
   120de:	2204      	movs	r2, #4
   120e0:	801a      	strh	r2, [r3, #0]
   120e2:	e04a      	b.n	1217a <_eeprom_emulator_format_memory+0xc2>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {

		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   120e4:	2344      	movs	r3, #68	; 0x44
   120e6:	18fb      	adds	r3, r7, r3
   120e8:	881a      	ldrh	r2, [r3, #0]
   120ea:	4b29      	ldr	r3, [pc, #164]	; (12190 <_eeprom_emulator_format_memory+0xd8>)
   120ec:	891b      	ldrh	r3, [r3, #8]
   120ee:	3b01      	subs	r3, #1
   120f0:	429a      	cmp	r2, r3
   120f2:	d03a      	beq.n	1216a <_eeprom_emulator_format_memory+0xb2>
			continue;
		}

		/* If we are at the first page in a new row, erase the entire row */
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
   120f4:	2344      	movs	r3, #68	; 0x44
   120f6:	18fb      	adds	r3, r7, r3
   120f8:	881b      	ldrh	r3, [r3, #0]
   120fa:	2203      	movs	r2, #3
   120fc:	4013      	ands	r3, r2
   120fe:	b29b      	uxth	r3, r3
   12100:	2b00      	cmp	r3, #0
   12102:	d108      	bne.n	12116 <_eeprom_emulator_format_memory+0x5e>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
   12104:	2344      	movs	r3, #68	; 0x44
   12106:	18fb      	adds	r3, r7, r3
   12108:	881b      	ldrh	r3, [r3, #0]
   1210a:	089b      	lsrs	r3, r3, #2
   1210c:	b29b      	uxth	r3, r3
   1210e:	b2db      	uxtb	r3, r3
   12110:	0018      	movs	r0, r3
   12112:	4b20      	ldr	r3, [pc, #128]	; (12194 <_eeprom_emulator_format_memory+0xdc>)
   12114:	4798      	blx	r3
		}

		/* Two logical pages are stored in each physical row; program in a
		 * pair of initialized but blank set of emulated EEPROM pages */
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
   12116:	2344      	movs	r3, #68	; 0x44
   12118:	18fb      	adds	r3, r7, r3
   1211a:	881b      	ldrh	r3, [r3, #0]
   1211c:	2203      	movs	r2, #3
   1211e:	4013      	ands	r3, r2
   12120:	b29b      	uxth	r3, r3
   12122:	2b01      	cmp	r3, #1
   12124:	d822      	bhi.n	1216c <_eeprom_emulator_format_memory+0xb4>
			/* Make a buffer to hold the initialized EEPROM page */
			struct _eeprom_page data;
			memset(&data, 0xFF, sizeof(data));
   12126:	1d3b      	adds	r3, r7, #4
   12128:	2240      	movs	r2, #64	; 0x40
   1212a:	21ff      	movs	r1, #255	; 0xff
   1212c:	0018      	movs	r0, r3
   1212e:	4b1a      	ldr	r3, [pc, #104]	; (12198 <_eeprom_emulator_format_memory+0xe0>)
   12130:	4798      	blx	r3

			/* Set up the new EEPROM row's header */
			data.header.logical_page = logical_page;
   12132:	2346      	movs	r3, #70	; 0x46
   12134:	18fb      	adds	r3, r7, r3
   12136:	881b      	ldrh	r3, [r3, #0]
   12138:	b2da      	uxtb	r2, r3
   1213a:	1d3b      	adds	r3, r7, #4
   1213c:	701a      	strb	r2, [r3, #0]

			/* Write the page out to physical memory */
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
   1213e:	1d3a      	adds	r2, r7, #4
   12140:	2344      	movs	r3, #68	; 0x44
   12142:	18fb      	adds	r3, r7, r3
   12144:	881b      	ldrh	r3, [r3, #0]
   12146:	0011      	movs	r1, r2
   12148:	0018      	movs	r0, r3
   1214a:	4b14      	ldr	r3, [pc, #80]	; (1219c <_eeprom_emulator_format_memory+0xe4>)
   1214c:	4798      	blx	r3
			_eeprom_emulator_nvm_commit_cache(physical_page);
   1214e:	2344      	movs	r3, #68	; 0x44
   12150:	18fb      	adds	r3, r7, r3
   12152:	881b      	ldrh	r3, [r3, #0]
   12154:	0018      	movs	r0, r3
   12156:	4b12      	ldr	r3, [pc, #72]	; (121a0 <_eeprom_emulator_format_memory+0xe8>)
   12158:	4798      	blx	r3

			/* Increment the logical EEPROM page address now that the current
			 * address' page has been initialized */
			logical_page++;
   1215a:	2346      	movs	r3, #70	; 0x46
   1215c:	18fb      	adds	r3, r7, r3
   1215e:	881a      	ldrh	r2, [r3, #0]
   12160:	2346      	movs	r3, #70	; 0x46
   12162:	18fb      	adds	r3, r7, r3
   12164:	3201      	adds	r2, #1
   12166:	801a      	strh	r2, [r3, #0]
   12168:	e000      	b.n	1216c <_eeprom_emulator_format_memory+0xb4>
			continue;
   1216a:	46c0      	nop			; (mov r8, r8)
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
   1216c:	2344      	movs	r3, #68	; 0x44
   1216e:	18fb      	adds	r3, r7, r3
   12170:	881a      	ldrh	r2, [r3, #0]
   12172:	2344      	movs	r3, #68	; 0x44
   12174:	18fb      	adds	r3, r7, r3
   12176:	3201      	adds	r2, #1
   12178:	801a      	strh	r2, [r3, #0]
   1217a:	4b05      	ldr	r3, [pc, #20]	; (12190 <_eeprom_emulator_format_memory+0xd8>)
   1217c:	891b      	ldrh	r3, [r3, #8]
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
   1217e:	2244      	movs	r2, #68	; 0x44
   12180:	18ba      	adds	r2, r7, r2
   12182:	8812      	ldrh	r2, [r2, #0]
   12184:	429a      	cmp	r2, r3
   12186:	d3ad      	bcc.n	120e4 <_eeprom_emulator_format_memory+0x2c>
		}
	}
}
   12188:	46c0      	nop			; (mov r8, r8)
   1218a:	46bd      	mov	sp, r7
   1218c:	b012      	add	sp, #72	; 0x48
   1218e:	bd80      	pop	{r7, pc}
   12190:	2000041c 	.word	0x2000041c
   12194:	00011f85 	.word	0x00011f85
   12198:	00017cd7 	.word	0x00017cd7
   1219c:	00011fcd 	.word	0x00011fcd
   121a0:	0001201d 	.word	0x0001201d

000121a4 <_eeprom_emulator_is_full_row>:
 *  it is the full row.
 *
 *  \param[in]  phy_page  Physical page that in a row
 */
static bool _eeprom_emulator_is_full_row(uint16_t phy_page)
{
   121a4:	b580      	push	{r7, lr}
   121a6:	b082      	sub	sp, #8
   121a8:	af00      	add	r7, sp, #0
   121aa:	0002      	movs	r2, r0
   121ac:	1dbb      	adds	r3, r7, #6
   121ae:	801a      	strh	r2, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   121b0:	4b14      	ldr	r3, [pc, #80]	; (12204 <_eeprom_emulator_is_full_row+0x60>)
   121b2:	685a      	ldr	r2, [r3, #4]
   121b4:	1dbb      	adds	r3, r7, #6
   121b6:	881b      	ldrh	r3, [r3, #0]
   121b8:	019b      	lsls	r3, r3, #6
   121ba:	18d3      	adds	r3, r2, r3
   121bc:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
   121be:	4b11      	ldr	r3, [pc, #68]	; (12204 <_eeprom_emulator_is_full_row+0x60>)
   121c0:	6859      	ldr	r1, [r3, #4]
   121c2:	1dbb      	adds	r3, r7, #6
   121c4:	881b      	ldrh	r3, [r3, #0]
   121c6:	3302      	adds	r3, #2
   121c8:	019b      	lsls	r3, r3, #6
   121ca:	18cb      	adds	r3, r1, r3
   121cc:	781b      	ldrb	r3, [r3, #0]
	if((_eeprom_instance.flash[phy_page].header.logical_page
   121ce:	429a      	cmp	r2, r3
   121d0:	d011      	beq.n	121f6 <_eeprom_emulator_is_full_row+0x52>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   121d2:	4b0c      	ldr	r3, [pc, #48]	; (12204 <_eeprom_emulator_is_full_row+0x60>)
   121d4:	685a      	ldr	r2, [r3, #4]
   121d6:	1dbb      	adds	r3, r7, #6
   121d8:	881b      	ldrh	r3, [r3, #0]
   121da:	3301      	adds	r3, #1
   121dc:	019b      	lsls	r3, r3, #6
   121de:	18d3      	adds	r3, r2, r3
   121e0:	781a      	ldrb	r2, [r3, #0]
		== _eeprom_instance.flash[phy_page+2].header.logical_page )) {
   121e2:	4b08      	ldr	r3, [pc, #32]	; (12204 <_eeprom_emulator_is_full_row+0x60>)
   121e4:	6859      	ldr	r1, [r3, #4]
   121e6:	1dbb      	adds	r3, r7, #6
   121e8:	881b      	ldrh	r3, [r3, #0]
   121ea:	3302      	adds	r3, #2
   121ec:	019b      	lsls	r3, r3, #6
   121ee:	18cb      	adds	r3, r1, r3
   121f0:	781b      	ldrb	r3, [r3, #0]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
   121f2:	429a      	cmp	r2, r3
   121f4:	d101      	bne.n	121fa <_eeprom_emulator_is_full_row+0x56>
		return true;
   121f6:	2301      	movs	r3, #1
   121f8:	e000      	b.n	121fc <_eeprom_emulator_is_full_row+0x58>
	} else {
		return false;
   121fa:	2300      	movs	r3, #0
	}
}
   121fc:	0018      	movs	r0, r3
   121fe:	46bd      	mov	sp, r7
   12200:	b002      	add	sp, #8
   12202:	bd80      	pop	{r7, pc}
   12204:	2000041c 	.word	0x2000041c

00012208 <_eeprom_emulator_erase_invalid_page>:
 *
 *  \param[in]  pre_phy_page  One physical invalid page
 *  \param[in]  next_phy_page Another physical invalid page
 */
static void _eeprom_emulator_erase_invalid_page(uint16_t pre_phy_page,uint16_t next_phy_page)
{
   12208:	b580      	push	{r7, lr}
   1220a:	b082      	sub	sp, #8
   1220c:	af00      	add	r7, sp, #0
   1220e:	0002      	movs	r2, r0
   12210:	1dbb      	adds	r3, r7, #6
   12212:	801a      	strh	r2, [r3, #0]
   12214:	1d3b      	adds	r3, r7, #4
   12216:	1c0a      	adds	r2, r1, #0
   12218:	801a      	strh	r2, [r3, #0]
 	/* Erase the old/full row*/
	if(_eeprom_emulator_is_full_row(pre_phy_page)) {
   1221a:	1dbb      	adds	r3, r7, #6
   1221c:	881b      	ldrh	r3, [r3, #0]
   1221e:	0018      	movs	r0, r3
   12220:	4b0c      	ldr	r3, [pc, #48]	; (12254 <_eeprom_emulator_erase_invalid_page+0x4c>)
   12222:	4798      	blx	r3
   12224:	1e03      	subs	r3, r0, #0
   12226:	d008      	beq.n	1223a <_eeprom_emulator_erase_invalid_page+0x32>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
   12228:	1dbb      	adds	r3, r7, #6
   1222a:	881b      	ldrh	r3, [r3, #0]
   1222c:	089b      	lsrs	r3, r3, #2
   1222e:	b29b      	uxth	r3, r3
   12230:	b2db      	uxtb	r3, r3
   12232:	0018      	movs	r0, r3
   12234:	4b08      	ldr	r3, [pc, #32]	; (12258 <_eeprom_emulator_erase_invalid_page+0x50>)
   12236:	4798      	blx	r3
	} else {
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
	}
}
   12238:	e007      	b.n	1224a <_eeprom_emulator_erase_invalid_page+0x42>
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
   1223a:	1d3b      	adds	r3, r7, #4
   1223c:	881b      	ldrh	r3, [r3, #0]
   1223e:	089b      	lsrs	r3, r3, #2
   12240:	b29b      	uxth	r3, r3
   12242:	b2db      	uxtb	r3, r3
   12244:	0018      	movs	r0, r3
   12246:	4b04      	ldr	r3, [pc, #16]	; (12258 <_eeprom_emulator_erase_invalid_page+0x50>)
   12248:	4798      	blx	r3
}
   1224a:	46c0      	nop			; (mov r8, r8)
   1224c:	46bd      	mov	sp, r7
   1224e:	b002      	add	sp, #8
   12250:	bd80      	pop	{r7, pc}
   12252:	46c0      	nop			; (mov r8, r8)
   12254:	000121a5 	.word	0x000121a5
   12258:	00011f85 	.word	0x00011f85

0001225c <_eeprom_emulator_check_logical_page>:
 * \brief Check if there exist rows with same logical pages due to power drop
 *  when writing or erasing page.
 *  when existed same logical page, the old(full) row will be erased.
 */
static void _eeprom_emulator_check_logical_page(void)
{
   1225c:	b580      	push	{r7, lr}
   1225e:	b082      	sub	sp, #8
   12260:	af00      	add	r7, sp, #0
	uint16_t i = 0, j = 0;
   12262:	1dbb      	adds	r3, r7, #6
   12264:	2200      	movs	r2, #0
   12266:	801a      	strh	r2, [r3, #0]
   12268:	1d3b      	adds	r3, r7, #4
   1226a:	2200      	movs	r2, #0
   1226c:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   1226e:	1dbb      	adds	r3, r7, #6
   12270:	2200      	movs	r2, #0
   12272:	801a      	strh	r2, [r3, #0]
   12274:	e04a      	b.n	1230c <_eeprom_emulator_check_logical_page+0xb0>

		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
   12276:	4b2a      	ldr	r3, [pc, #168]	; (12320 <_eeprom_emulator_check_logical_page+0xc4>)
   12278:	685a      	ldr	r2, [r3, #4]
   1227a:	1dbb      	adds	r3, r7, #6
   1227c:	881b      	ldrh	r3, [r3, #0]
   1227e:	019b      	lsls	r3, r3, #6
   12280:	18d3      	adds	r3, r2, r3
   12282:	781a      	ldrb	r2, [r3, #0]
   12284:	1cbb      	adds	r3, r7, #2
   12286:	801a      	strh	r2, [r3, #0]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   12288:	1cbb      	adds	r3, r7, #2
   1228a:	881b      	ldrh	r3, [r3, #0]
   1228c:	2bff      	cmp	r3, #255	; 0xff
   1228e:	d037      	beq.n	12300 <_eeprom_emulator_check_logical_page+0xa4>
			continue;
		}

		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   12290:	1d3b      	adds	r3, r7, #4
   12292:	1dba      	adds	r2, r7, #6
   12294:	8812      	ldrh	r2, [r2, #0]
   12296:	3204      	adds	r2, #4
   12298:	801a      	strh	r2, [r3, #0]
   1229a:	e02a      	b.n	122f2 <_eeprom_emulator_check_logical_page+0x96>

			if (j == EEPROM_MASTER_PAGE_NUMBER) {
   1229c:	1d3b      	adds	r3, r7, #4
   1229e:	881a      	ldrh	r2, [r3, #0]
   122a0:	4b1f      	ldr	r3, [pc, #124]	; (12320 <_eeprom_emulator_check_logical_page+0xc4>)
   122a2:	891b      	ldrh	r3, [r3, #8]
   122a4:	3b01      	subs	r3, #1
   122a6:	429a      	cmp	r2, r3
   122a8:	d01b      	beq.n	122e2 <_eeprom_emulator_check_logical_page+0x86>
				continue;
			}
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
   122aa:	4b1d      	ldr	r3, [pc, #116]	; (12320 <_eeprom_emulator_check_logical_page+0xc4>)
   122ac:	685a      	ldr	r2, [r3, #4]
   122ae:	1d3b      	adds	r3, r7, #4
   122b0:	881b      	ldrh	r3, [r3, #0]
   122b2:	019b      	lsls	r3, r3, #6
   122b4:	18d3      	adds	r3, r2, r3
   122b6:	781a      	ldrb	r2, [r3, #0]
   122b8:	003b      	movs	r3, r7
   122ba:	801a      	strh	r2, [r3, #0]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
   122bc:	003b      	movs	r3, r7
   122be:	881b      	ldrh	r3, [r3, #0]
   122c0:	2bff      	cmp	r3, #255	; 0xff
   122c2:	d010      	beq.n	122e6 <_eeprom_emulator_check_logical_page+0x8a>
				continue;
			}

			if(pre_logical_page == next_logical_page) {
   122c4:	1cba      	adds	r2, r7, #2
   122c6:	003b      	movs	r3, r7
   122c8:	8812      	ldrh	r2, [r2, #0]
   122ca:	881b      	ldrh	r3, [r3, #0]
   122cc:	429a      	cmp	r2, r3
   122ce:	d10b      	bne.n	122e8 <_eeprom_emulator_check_logical_page+0x8c>
				/* Found invalid logical page and erase it */
				_eeprom_emulator_erase_invalid_page(i,j);
   122d0:	1d3b      	adds	r3, r7, #4
   122d2:	881a      	ldrh	r2, [r3, #0]
   122d4:	1dbb      	adds	r3, r7, #6
   122d6:	881b      	ldrh	r3, [r3, #0]
   122d8:	0011      	movs	r1, r2
   122da:	0018      	movs	r0, r3
   122dc:	4b11      	ldr	r3, [pc, #68]	; (12324 <_eeprom_emulator_check_logical_page+0xc8>)
   122de:	4798      	blx	r3
   122e0:	e002      	b.n	122e8 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   122e2:	46c0      	nop			; (mov r8, r8)
   122e4:	e000      	b.n	122e8 <_eeprom_emulator_check_logical_page+0x8c>
				continue;
   122e6:	46c0      	nop			; (mov r8, r8)
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
   122e8:	1d3b      	adds	r3, r7, #4
   122ea:	1d3a      	adds	r2, r7, #4
   122ec:	8812      	ldrh	r2, [r2, #0]
   122ee:	3204      	adds	r2, #4
   122f0:	801a      	strh	r2, [r3, #0]
   122f2:	4b0b      	ldr	r3, [pc, #44]	; (12320 <_eeprom_emulator_check_logical_page+0xc4>)
   122f4:	891b      	ldrh	r3, [r3, #8]
   122f6:	1d3a      	adds	r2, r7, #4
   122f8:	8812      	ldrh	r2, [r2, #0]
   122fa:	429a      	cmp	r2, r3
   122fc:	d3ce      	bcc.n	1229c <_eeprom_emulator_check_logical_page+0x40>
   122fe:	e000      	b.n	12302 <_eeprom_emulator_check_logical_page+0xa6>
			continue;
   12300:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
   12302:	1dbb      	adds	r3, r7, #6
   12304:	1dba      	adds	r2, r7, #6
   12306:	8812      	ldrh	r2, [r2, #0]
   12308:	3204      	adds	r2, #4
   1230a:	801a      	strh	r2, [r3, #0]
   1230c:	4b04      	ldr	r3, [pc, #16]	; (12320 <_eeprom_emulator_check_logical_page+0xc4>)
   1230e:	891b      	ldrh	r3, [r3, #8]
   12310:	1dba      	adds	r2, r7, #6
   12312:	8812      	ldrh	r2, [r2, #0]
   12314:	429a      	cmp	r2, r3
   12316:	d3ae      	bcc.n	12276 <_eeprom_emulator_check_logical_page+0x1a>
			}
		}
	}
}
   12318:	46c0      	nop			; (mov r8, r8)
   1231a:	46bd      	mov	sp, r7
   1231c:	b002      	add	sp, #8
   1231e:	bd80      	pop	{r7, pc}
   12320:	2000041c 	.word	0x2000041c
   12324:	00012209 	.word	0x00012209

00012328 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
   12328:	b580      	push	{r7, lr}
   1232a:	b084      	sub	sp, #16
   1232c:	af00      	add	r7, sp, #0
	/* Check if exists invalid logical page */
	_eeprom_emulator_check_logical_page();
   1232e:	4b51      	ldr	r3, [pc, #324]	; (12474 <_eeprom_emulator_update_page_mapping+0x14c>)
   12330:	4798      	blx	r3

	/* Scan through all physical pages, to map physical and logical pages */
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   12332:	230e      	movs	r3, #14
   12334:	18fb      	adds	r3, r7, r3
   12336:	2200      	movs	r2, #0
   12338:	801a      	strh	r2, [r3, #0]
   1233a:	e033      	b.n	123a4 <_eeprom_emulator_update_page_mapping+0x7c>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
   1233c:	230e      	movs	r3, #14
   1233e:	18fb      	adds	r3, r7, r3
   12340:	881a      	ldrh	r2, [r3, #0]
   12342:	4b4d      	ldr	r3, [pc, #308]	; (12478 <_eeprom_emulator_update_page_mapping+0x150>)
   12344:	891b      	ldrh	r3, [r3, #8]
   12346:	3b01      	subs	r3, #1
   12348:	429a      	cmp	r2, r3
   1234a:	d023      	beq.n	12394 <_eeprom_emulator_update_page_mapping+0x6c>
			continue;
		}

		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
   1234c:	4b4a      	ldr	r3, [pc, #296]	; (12478 <_eeprom_emulator_update_page_mapping+0x150>)
   1234e:	685a      	ldr	r2, [r3, #4]
   12350:	230e      	movs	r3, #14
   12352:	18fb      	adds	r3, r7, r3
   12354:	881b      	ldrh	r3, [r3, #0]
   12356:	019b      	lsls	r3, r3, #6
   12358:	18d3      	adds	r3, r2, r3
   1235a:	781a      	ldrb	r2, [r3, #0]
   1235c:	2308      	movs	r3, #8
   1235e:	18fb      	adds	r3, r7, r3
   12360:	801a      	strh	r2, [r3, #0]

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   12362:	2308      	movs	r3, #8
   12364:	18fb      	adds	r3, r7, r3
   12366:	881b      	ldrh	r3, [r3, #0]
   12368:	2bff      	cmp	r3, #255	; 0xff
   1236a:	d014      	beq.n	12396 <_eeprom_emulator_update_page_mapping+0x6e>
				(logical_page < _eeprom_instance.logical_pages)) {
   1236c:	4b42      	ldr	r3, [pc, #264]	; (12478 <_eeprom_emulator_update_page_mapping+0x150>)
   1236e:	7a9b      	ldrb	r3, [r3, #10]
   12370:	b29b      	uxth	r3, r3
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
   12372:	2208      	movs	r2, #8
   12374:	18ba      	adds	r2, r7, r2
   12376:	8812      	ldrh	r2, [r2, #0]
   12378:	429a      	cmp	r2, r3
   1237a:	d20c      	bcs.n	12396 <_eeprom_emulator_update_page_mapping+0x6e>
			_eeprom_instance.page_map[logical_page] = c;
   1237c:	2308      	movs	r3, #8
   1237e:	18fb      	adds	r3, r7, r3
   12380:	881b      	ldrh	r3, [r3, #0]
   12382:	220e      	movs	r2, #14
   12384:	18ba      	adds	r2, r7, r2
   12386:	8812      	ldrh	r2, [r2, #0]
   12388:	b2d1      	uxtb	r1, r2
   1238a:	4a3b      	ldr	r2, [pc, #236]	; (12478 <_eeprom_emulator_update_page_mapping+0x150>)
   1238c:	18d3      	adds	r3, r2, r3
   1238e:	1c0a      	adds	r2, r1, #0
   12390:	72da      	strb	r2, [r3, #11]
   12392:	e000      	b.n	12396 <_eeprom_emulator_update_page_mapping+0x6e>
			continue;
   12394:	46c0      	nop			; (mov r8, r8)
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
   12396:	230e      	movs	r3, #14
   12398:	18fb      	adds	r3, r7, r3
   1239a:	881a      	ldrh	r2, [r3, #0]
   1239c:	230e      	movs	r3, #14
   1239e:	18fb      	adds	r3, r7, r3
   123a0:	3201      	adds	r2, #1
   123a2:	801a      	strh	r2, [r3, #0]
   123a4:	4b34      	ldr	r3, [pc, #208]	; (12478 <_eeprom_emulator_update_page_mapping+0x150>)
   123a6:	891b      	ldrh	r3, [r3, #8]
   123a8:	220e      	movs	r2, #14
   123aa:	18ba      	adds	r2, r7, r2
   123ac:	8812      	ldrh	r2, [r2, #0]
   123ae:	429a      	cmp	r2, r3
   123b0:	d3c4      	bcc.n	1233c <_eeprom_emulator_update_page_mapping+0x14>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
   123b2:	4b31      	ldr	r3, [pc, #196]	; (12478 <_eeprom_emulator_update_page_mapping+0x150>)
   123b4:	2287      	movs	r2, #135	; 0x87
   123b6:	213f      	movs	r1, #63	; 0x3f
   123b8:	5499      	strb	r1, [r3, r2]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   123ba:	230c      	movs	r3, #12
   123bc:	18fb      	adds	r3, r7, r3
   123be:	2200      	movs	r2, #0
   123c0:	801a      	strh	r2, [r3, #0]
   123c2:	e04a      	b.n	1245a <_eeprom_emulator_update_page_mapping+0x132>
		bool spare_row_found = true;
   123c4:	230b      	movs	r3, #11
   123c6:	18fb      	adds	r3, r7, r3
   123c8:	2201      	movs	r2, #1
   123ca:	701a      	strb	r2, [r3, #0]

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   123cc:	230a      	movs	r3, #10
   123ce:	18fb      	adds	r3, r7, r3
   123d0:	2200      	movs	r2, #0
   123d2:	701a      	strb	r2, [r3, #0]
   123d4:	e028      	b.n	12428 <_eeprom_emulator_update_page_mapping+0x100>
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;
   123d6:	230c      	movs	r3, #12
   123d8:	18fb      	adds	r3, r7, r3
   123da:	881b      	ldrh	r3, [r3, #0]
   123dc:	009b      	lsls	r3, r3, #2
   123de:	b299      	uxth	r1, r3
   123e0:	230a      	movs	r3, #10
   123e2:	18fb      	adds	r3, r7, r3
   123e4:	781b      	ldrb	r3, [r3, #0]
   123e6:	b29a      	uxth	r2, r3
   123e8:	1dbb      	adds	r3, r7, #6
   123ea:	188a      	adds	r2, r1, r2
   123ec:	801a      	strh	r2, [r3, #0]

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
   123ee:	1dbb      	adds	r3, r7, #6
   123f0:	881a      	ldrh	r2, [r3, #0]
   123f2:	4b21      	ldr	r3, [pc, #132]	; (12478 <_eeprom_emulator_update_page_mapping+0x150>)
   123f4:	891b      	ldrh	r3, [r3, #8]
   123f6:	3b01      	subs	r3, #1
   123f8:	429a      	cmp	r2, r3
   123fa:	d00d      	beq.n	12418 <_eeprom_emulator_update_page_mapping+0xf0>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
   123fc:	4b1e      	ldr	r3, [pc, #120]	; (12478 <_eeprom_emulator_update_page_mapping+0x150>)
   123fe:	685a      	ldr	r2, [r3, #4]
   12400:	1dbb      	adds	r3, r7, #6
   12402:	881b      	ldrh	r3, [r3, #0]
   12404:	019b      	lsls	r3, r3, #6
   12406:	18d3      	adds	r3, r2, r3
   12408:	781b      	ldrb	r3, [r3, #0]
   1240a:	2bff      	cmp	r3, #255	; 0xff
   1240c:	d005      	beq.n	1241a <_eeprom_emulator_update_page_mapping+0xf2>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
   1240e:	230b      	movs	r3, #11
   12410:	18fb      	adds	r3, r7, r3
   12412:	2200      	movs	r2, #0
   12414:	701a      	strb	r2, [r3, #0]
   12416:	e000      	b.n	1241a <_eeprom_emulator_update_page_mapping+0xf2>
				continue;
   12418:	46c0      	nop			; (mov r8, r8)
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
   1241a:	230a      	movs	r3, #10
   1241c:	18fb      	adds	r3, r7, r3
   1241e:	781a      	ldrb	r2, [r3, #0]
   12420:	230a      	movs	r3, #10
   12422:	18fb      	adds	r3, r7, r3
   12424:	3201      	adds	r2, #1
   12426:	701a      	strb	r2, [r3, #0]
   12428:	230a      	movs	r3, #10
   1242a:	18fb      	adds	r3, r7, r3
   1242c:	781b      	ldrb	r3, [r3, #0]
   1242e:	2b03      	cmp	r3, #3
   12430:	d9d1      	bls.n	123d6 <_eeprom_emulator_update_page_mapping+0xae>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
   12432:	230b      	movs	r3, #11
   12434:	18fb      	adds	r3, r7, r3
   12436:	781b      	ldrb	r3, [r3, #0]
   12438:	2b00      	cmp	r3, #0
   1243a:	d007      	beq.n	1244c <_eeprom_emulator_update_page_mapping+0x124>
			_eeprom_instance.spare_row = c;
   1243c:	230c      	movs	r3, #12
   1243e:	18fb      	adds	r3, r7, r3
   12440:	881b      	ldrh	r3, [r3, #0]
   12442:	b2d9      	uxtb	r1, r3
   12444:	4b0c      	ldr	r3, [pc, #48]	; (12478 <_eeprom_emulator_update_page_mapping+0x150>)
   12446:	2287      	movs	r2, #135	; 0x87
   12448:	5499      	strb	r1, [r3, r2]
			break;
   1244a:	e00f      	b.n	1246c <_eeprom_emulator_update_page_mapping+0x144>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
   1244c:	230c      	movs	r3, #12
   1244e:	18fb      	adds	r3, r7, r3
   12450:	881a      	ldrh	r2, [r3, #0]
   12452:	230c      	movs	r3, #12
   12454:	18fb      	adds	r3, r7, r3
   12456:	3201      	adds	r2, #1
   12458:	801a      	strh	r2, [r3, #0]
   1245a:	4b07      	ldr	r3, [pc, #28]	; (12478 <_eeprom_emulator_update_page_mapping+0x150>)
   1245c:	891b      	ldrh	r3, [r3, #8]
   1245e:	089b      	lsrs	r3, r3, #2
   12460:	b29b      	uxth	r3, r3
   12462:	220c      	movs	r2, #12
   12464:	18ba      	adds	r2, r7, r2
   12466:	8812      	ldrh	r2, [r2, #0]
   12468:	429a      	cmp	r2, r3
   1246a:	d3ab      	bcc.n	123c4 <_eeprom_emulator_update_page_mapping+0x9c>
		}
	}
}
   1246c:	46c0      	nop			; (mov r8, r8)
   1246e:	46bd      	mov	sp, r7
   12470:	b004      	add	sp, #16
   12472:	bd80      	pop	{r7, pc}
   12474:	0001225d 	.word	0x0001225d
   12478:	2000041c 	.word	0x2000041c

0001247c <_eeprom_emulator_is_page_free_on_row>:
 * \retval \c false  If the specified row was full and needs an erase
 */
static bool _eeprom_emulator_is_page_free_on_row(
		const uint8_t start_physical_page,
		uint8_t *const free_physical_page)
{
   1247c:	b580      	push	{r7, lr}
   1247e:	b084      	sub	sp, #16
   12480:	af00      	add	r7, sp, #0
   12482:	0002      	movs	r2, r0
   12484:	6039      	str	r1, [r7, #0]
   12486:	1dfb      	adds	r3, r7, #7
   12488:	701a      	strb	r2, [r3, #0]
	/* Convert physical page number to a FLASH row and page within the row */
	uint8_t row         = (start_physical_page / NVMCTRL_ROW_PAGES);
   1248a:	230e      	movs	r3, #14
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	1dfa      	adds	r2, r7, #7
   12490:	7812      	ldrb	r2, [r2, #0]
   12492:	0892      	lsrs	r2, r2, #2
   12494:	701a      	strb	r2, [r3, #0]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
   12496:	230d      	movs	r3, #13
   12498:	18fb      	adds	r3, r7, r3
   1249a:	1dfa      	adds	r2, r7, #7
   1249c:	7812      	ldrb	r2, [r2, #0]
   1249e:	2103      	movs	r1, #3
   124a0:	400a      	ands	r2, r1
   124a2:	701a      	strb	r2, [r3, #0]

	/* Look in the current row for a page that isn't currently used */
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   124a4:	230f      	movs	r3, #15
   124a6:	18fb      	adds	r3, r7, r3
   124a8:	220d      	movs	r2, #13
   124aa:	18ba      	adds	r2, r7, r2
   124ac:	7812      	ldrb	r2, [r2, #0]
   124ae:	701a      	strb	r2, [r3, #0]
   124b0:	e023      	b.n	124fa <_eeprom_emulator_is_page_free_on_row+0x7e>
		/* Calculate the page number for the current page being examined */
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
   124b2:	230e      	movs	r3, #14
   124b4:	18fb      	adds	r3, r7, r3
   124b6:	781b      	ldrb	r3, [r3, #0]
   124b8:	009b      	lsls	r3, r3, #2
   124ba:	b2d9      	uxtb	r1, r3
   124bc:	230c      	movs	r3, #12
   124be:	18fb      	adds	r3, r7, r3
   124c0:	220f      	movs	r2, #15
   124c2:	18ba      	adds	r2, r7, r2
   124c4:	7812      	ldrb	r2, [r2, #0]
   124c6:	188a      	adds	r2, r1, r2
   124c8:	701a      	strb	r2, [r3, #0]

		/* If the page is free, pass it to the caller and exit */
		if (_eeprom_instance.flash[page].header.logical_page ==
   124ca:	4b11      	ldr	r3, [pc, #68]	; (12510 <_eeprom_emulator_is_page_free_on_row+0x94>)
   124cc:	685a      	ldr	r2, [r3, #4]
   124ce:	230c      	movs	r3, #12
   124d0:	18fb      	adds	r3, r7, r3
   124d2:	781b      	ldrb	r3, [r3, #0]
   124d4:	019b      	lsls	r3, r3, #6
   124d6:	18d3      	adds	r3, r2, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2bff      	cmp	r3, #255	; 0xff
   124dc:	d106      	bne.n	124ec <_eeprom_emulator_is_page_free_on_row+0x70>
				EEPROM_INVALID_PAGE_NUMBER) {
			*free_physical_page = page;
   124de:	683b      	ldr	r3, [r7, #0]
   124e0:	220c      	movs	r2, #12
   124e2:	18ba      	adds	r2, r7, r2
   124e4:	7812      	ldrb	r2, [r2, #0]
   124e6:	701a      	strb	r2, [r3, #0]
			return true;
   124e8:	2301      	movs	r3, #1
   124ea:	e00c      	b.n	12506 <_eeprom_emulator_is_page_free_on_row+0x8a>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
   124ec:	230f      	movs	r3, #15
   124ee:	18fb      	adds	r3, r7, r3
   124f0:	781a      	ldrb	r2, [r3, #0]
   124f2:	230f      	movs	r3, #15
   124f4:	18fb      	adds	r3, r7, r3
   124f6:	3201      	adds	r2, #1
   124f8:	701a      	strb	r2, [r3, #0]
   124fa:	230f      	movs	r3, #15
   124fc:	18fb      	adds	r3, r7, r3
   124fe:	781b      	ldrb	r3, [r3, #0]
   12500:	2b03      	cmp	r3, #3
   12502:	d9d6      	bls.n	124b2 <_eeprom_emulator_is_page_free_on_row+0x36>
		}
	}

	/* No free page in the current row was found */
	return false;
   12504:	2300      	movs	r3, #0
}
   12506:	0018      	movs	r0, r3
   12508:	46bd      	mov	sp, r7
   1250a:	b004      	add	sp, #16
   1250c:	bd80      	pop	{r7, pc}
   1250e:	46c0      	nop			; (mov r8, r8)
   12510:	2000041c 	.word	0x2000041c

00012514 <_eeprom_emulator_move_data_to_spare>:
 */
static enum status_code _eeprom_emulator_move_data_to_spare(
		const uint8_t row_number,
		const uint8_t logical_page,
		const uint8_t *const data)
{
   12514:	b580      	push	{r7, lr}
   12516:	b086      	sub	sp, #24
   12518:	af00      	add	r7, sp, #0
   1251a:	603a      	str	r2, [r7, #0]
   1251c:	1dfb      	adds	r3, r7, #7
   1251e:	1c02      	adds	r2, r0, #0
   12520:	701a      	strb	r2, [r3, #0]
   12522:	1dbb      	adds	r3, r7, #6
   12524:	1c0a      	adds	r2, r1, #0
   12526:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   12528:	2314      	movs	r3, #20
   1252a:	18fb      	adds	r3, r7, r3
   1252c:	2200      	movs	r2, #0
   1252e:	701a      	strb	r2, [r3, #0]
		uint8_t logical_page;
		uint8_t physical_page;
	} page_trans[2];

	const struct _eeprom_page *row_data =
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
   12530:	4b69      	ldr	r3, [pc, #420]	; (126d8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12532:	685b      	ldr	r3, [r3, #4]
   12534:	1dfa      	adds	r2, r7, #7
   12536:	7812      	ldrb	r2, [r2, #0]
   12538:	0212      	lsls	r2, r2, #8
	const struct _eeprom_page *row_data =
   1253a:	189b      	adds	r3, r3, r2
   1253c:	613b      	str	r3, [r7, #16]

	/* There should be two logical pages of data in each row, possibly with
	 * multiple revisions (right-most version is the newest). Start by assuming
	 * the left-most two pages contain the newest page revisions. */
	page_trans[0].logical_page  = row_data[0].header.logical_page;
   1253e:	693b      	ldr	r3, [r7, #16]
   12540:	781a      	ldrb	r2, [r3, #0]
   12542:	2308      	movs	r3, #8
   12544:	18fb      	adds	r3, r7, r3
   12546:	701a      	strb	r2, [r3, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
   12548:	1dfb      	adds	r3, r7, #7
   1254a:	781b      	ldrb	r3, [r3, #0]
   1254c:	009b      	lsls	r3, r3, #2
   1254e:	b2da      	uxtb	r2, r3
   12550:	2308      	movs	r3, #8
   12552:	18fb      	adds	r3, r7, r3
   12554:	705a      	strb	r2, [r3, #1]

	page_trans[1].logical_page  = row_data[1].header.logical_page;
   12556:	693b      	ldr	r3, [r7, #16]
   12558:	3340      	adds	r3, #64	; 0x40
   1255a:	781a      	ldrb	r2, [r3, #0]
   1255c:	2308      	movs	r3, #8
   1255e:	18fb      	adds	r3, r7, r3
   12560:	709a      	strb	r2, [r3, #2]
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
   12562:	1dfb      	adds	r3, r7, #7
   12564:	781b      	ldrb	r3, [r3, #0]
   12566:	009b      	lsls	r3, r3, #2
   12568:	b2db      	uxtb	r3, r3
   1256a:	3301      	adds	r3, #1
   1256c:	b2da      	uxtb	r2, r3
   1256e:	2308      	movs	r3, #8
   12570:	18fb      	adds	r3, r7, r3
   12572:	70da      	strb	r2, [r3, #3]

	/* Look for newer revisions of the two logical pages stored in the row */
	for (uint8_t c = 0; c < 2; c++) {
   12574:	2317      	movs	r3, #23
   12576:	18fb      	adds	r3, r7, r3
   12578:	2200      	movs	r2, #0
   1257a:	701a      	strb	r2, [r3, #0]
   1257c:	e03a      	b.n	125f4 <_eeprom_emulator_move_data_to_spare+0xe0>
		/* Look through the remaining pages in the row for any newer revisions */
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   1257e:	2316      	movs	r3, #22
   12580:	18fb      	adds	r3, r7, r3
   12582:	2202      	movs	r2, #2
   12584:	701a      	strb	r2, [r3, #0]
   12586:	e029      	b.n	125dc <_eeprom_emulator_move_data_to_spare+0xc8>
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
   12588:	2317      	movs	r3, #23
   1258a:	18fb      	adds	r3, r7, r3
   1258c:	781a      	ldrb	r2, [r3, #0]
   1258e:	2308      	movs	r3, #8
   12590:	18fb      	adds	r3, r7, r3
   12592:	0052      	lsls	r2, r2, #1
   12594:	5cd2      	ldrb	r2, [r2, r3]
   12596:	2316      	movs	r3, #22
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781b      	ldrb	r3, [r3, #0]
   1259c:	019b      	lsls	r3, r3, #6
   1259e:	6939      	ldr	r1, [r7, #16]
   125a0:	18cb      	adds	r3, r1, r3
   125a2:	781b      	ldrb	r3, [r3, #0]
   125a4:	429a      	cmp	r2, r3
   125a6:	d112      	bne.n	125ce <_eeprom_emulator_move_data_to_spare+0xba>
				page_trans[c].physical_page =
   125a8:	2317      	movs	r3, #23
   125aa:	18fb      	adds	r3, r7, r3
   125ac:	781b      	ldrb	r3, [r3, #0]
						(row_number * NVMCTRL_ROW_PAGES) + c2;
   125ae:	1dfa      	adds	r2, r7, #7
   125b0:	7812      	ldrb	r2, [r2, #0]
   125b2:	0092      	lsls	r2, r2, #2
   125b4:	b2d1      	uxtb	r1, r2
   125b6:	2216      	movs	r2, #22
   125b8:	18ba      	adds	r2, r7, r2
   125ba:	7812      	ldrb	r2, [r2, #0]
   125bc:	188a      	adds	r2, r1, r2
   125be:	b2d1      	uxtb	r1, r2
				page_trans[c].physical_page =
   125c0:	2208      	movs	r2, #8
   125c2:	18ba      	adds	r2, r7, r2
   125c4:	005b      	lsls	r3, r3, #1
   125c6:	18d3      	adds	r3, r2, r3
   125c8:	3301      	adds	r3, #1
   125ca:	1c0a      	adds	r2, r1, #0
   125cc:	701a      	strb	r2, [r3, #0]
		for (uint8_t c2 = 2; c2 < NVMCTRL_ROW_PAGES; c2++) {
   125ce:	2316      	movs	r3, #22
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	781a      	ldrb	r2, [r3, #0]
   125d4:	2316      	movs	r3, #22
   125d6:	18fb      	adds	r3, r7, r3
   125d8:	3201      	adds	r2, #1
   125da:	701a      	strb	r2, [r3, #0]
   125dc:	2316      	movs	r3, #22
   125de:	18fb      	adds	r3, r7, r3
   125e0:	781b      	ldrb	r3, [r3, #0]
   125e2:	2b03      	cmp	r3, #3
   125e4:	d9d0      	bls.n	12588 <_eeprom_emulator_move_data_to_spare+0x74>
	for (uint8_t c = 0; c < 2; c++) {
   125e6:	2317      	movs	r3, #23
   125e8:	18fb      	adds	r3, r7, r3
   125ea:	781a      	ldrb	r2, [r3, #0]
   125ec:	2317      	movs	r3, #23
   125ee:	18fb      	adds	r3, r7, r3
   125f0:	3201      	adds	r2, #1
   125f2:	701a      	strb	r2, [r3, #0]
   125f4:	2317      	movs	r3, #23
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	781b      	ldrb	r3, [r3, #0]
   125fa:	2b01      	cmp	r3, #1
   125fc:	d9bf      	bls.n	1257e <_eeprom_emulator_move_data_to_spare+0x6a>
			}
		}
	}

	/* Need to move both saved logical pages stored in the same row */
	for (uint8_t c = 0; c < 2; c++) {
   125fe:	2315      	movs	r3, #21
   12600:	18fb      	adds	r3, r7, r3
   12602:	2200      	movs	r2, #0
   12604:	701a      	strb	r2, [r3, #0]
   12606:	e051      	b.n	126ac <_eeprom_emulator_move_data_to_spare+0x198>
		/* Find the physical page index for the new spare row pages */
		uint32_t new_page =
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
   12608:	4b33      	ldr	r3, [pc, #204]	; (126d8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   1260a:	2287      	movs	r2, #135	; 0x87
   1260c:	5c9b      	ldrb	r3, [r3, r2]
   1260e:	009a      	lsls	r2, r3, #2
   12610:	2315      	movs	r3, #21
   12612:	18fb      	adds	r3, r7, r3
   12614:	781b      	ldrb	r3, [r3, #0]
   12616:	18d3      	adds	r3, r2, r3
		uint32_t new_page =
   12618:	60fb      	str	r3, [r7, #12]

		/* Commit any cached data to physical non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   1261a:	4b30      	ldr	r3, [pc, #192]	; (126dc <_eeprom_emulator_move_data_to_spare+0x1c8>)
   1261c:	4798      	blx	r3

		/* Check if we we are looking at the page the calling function wishes
		 * to change during the move operation */
		if (logical_page == page_trans[c].logical_page) {
   1261e:	2315      	movs	r3, #21
   12620:	18fb      	adds	r3, r7, r3
   12622:	781a      	ldrb	r2, [r3, #0]
   12624:	2308      	movs	r3, #8
   12626:	18fb      	adds	r3, r7, r3
   12628:	0052      	lsls	r2, r2, #1
   1262a:	5cd3      	ldrb	r3, [r2, r3]
   1262c:	1dba      	adds	r2, r7, #6
   1262e:	7812      	ldrb	r2, [r2, #0]
   12630:	429a      	cmp	r2, r3
   12632:	d10d      	bne.n	12650 <_eeprom_emulator_move_data_to_spare+0x13c>
			/* Fill out new (updated) logical page's header in the cache */
			_eeprom_instance.cache.header.logical_page = logical_page;
   12634:	4b28      	ldr	r3, [pc, #160]	; (126d8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12636:	1dba      	adds	r2, r7, #6
   12638:	2188      	movs	r1, #136	; 0x88
   1263a:	7812      	ldrb	r2, [r2, #0]
   1263c:	545a      	strb	r2, [r3, r1]

			/* Write data to SRAM cache */
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
   1263e:	4b26      	ldr	r3, [pc, #152]	; (126d8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12640:	228c      	movs	r2, #140	; 0x8c
   12642:	6839      	ldr	r1, [r7, #0]
   12644:	189b      	adds	r3, r3, r2
   12646:	223c      	movs	r2, #60	; 0x3c
   12648:	0018      	movs	r0, r3
   1264a:	4b25      	ldr	r3, [pc, #148]	; (126e0 <_eeprom_emulator_move_data_to_spare+0x1cc>)
   1264c:	4798      	blx	r3
   1264e:	e00e      	b.n	1266e <_eeprom_emulator_move_data_to_spare+0x15a>
		} else {
			/* Copy existing EEPROM page to cache buffer wholesale */
			_eeprom_emulator_nvm_read_page(
					page_trans[c].physical_page, &_eeprom_instance.cache);
   12650:	2315      	movs	r3, #21
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	2208      	movs	r2, #8
   12658:	18ba      	adds	r2, r7, r2
   1265a:	005b      	lsls	r3, r3, #1
   1265c:	18d3      	adds	r3, r2, r3
   1265e:	3301      	adds	r3, #1
   12660:	781b      	ldrb	r3, [r3, #0]
			_eeprom_emulator_nvm_read_page(
   12662:	b29b      	uxth	r3, r3
   12664:	4a1f      	ldr	r2, [pc, #124]	; (126e4 <_eeprom_emulator_move_data_to_spare+0x1d0>)
   12666:	0011      	movs	r1, r2
   12668:	0018      	movs	r0, r3
   1266a:	4b1f      	ldr	r3, [pc, #124]	; (126e8 <_eeprom_emulator_move_data_to_spare+0x1d4>)
   1266c:	4798      	blx	r3
		}

		/* Fill the physical NVM buffer with the new data so that it can be
		 * quickly committed in the future if needed due to a low power
		 * condition */
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   1266e:	68fb      	ldr	r3, [r7, #12]
   12670:	b29b      	uxth	r3, r3
   12672:	4a1c      	ldr	r2, [pc, #112]	; (126e4 <_eeprom_emulator_move_data_to_spare+0x1d0>)
   12674:	0011      	movs	r1, r2
   12676:	0018      	movs	r0, r3
   12678:	4b1c      	ldr	r3, [pc, #112]	; (126ec <_eeprom_emulator_move_data_to_spare+0x1d8>)
   1267a:	4798      	blx	r3

		/* Update the page map with the new page location and indicate that
		 * the cache now holds new data */
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
   1267c:	2315      	movs	r3, #21
   1267e:	18fb      	adds	r3, r7, r3
   12680:	781a      	ldrb	r2, [r3, #0]
   12682:	2308      	movs	r3, #8
   12684:	18fb      	adds	r3, r7, r3
   12686:	0052      	lsls	r2, r2, #1
   12688:	5cd3      	ldrb	r3, [r2, r3]
   1268a:	0019      	movs	r1, r3
   1268c:	68fb      	ldr	r3, [r7, #12]
   1268e:	b2da      	uxtb	r2, r3
   12690:	4b11      	ldr	r3, [pc, #68]	; (126d8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12692:	185b      	adds	r3, r3, r1
   12694:	72da      	strb	r2, [r3, #11]
		_eeprom_instance.cache_active = true;
   12696:	4b10      	ldr	r3, [pc, #64]	; (126d8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   12698:	22c8      	movs	r2, #200	; 0xc8
   1269a:	2101      	movs	r1, #1
   1269c:	5499      	strb	r1, [r3, r2]
	for (uint8_t c = 0; c < 2; c++) {
   1269e:	2315      	movs	r3, #21
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781a      	ldrb	r2, [r3, #0]
   126a4:	2315      	movs	r3, #21
   126a6:	18fb      	adds	r3, r7, r3
   126a8:	3201      	adds	r2, #1
   126aa:	701a      	strb	r2, [r3, #0]
   126ac:	2315      	movs	r3, #21
   126ae:	18fb      	adds	r3, r7, r3
   126b0:	781b      	ldrb	r3, [r3, #0]
   126b2:	2b01      	cmp	r3, #1
   126b4:	d9a8      	bls.n	12608 <_eeprom_emulator_move_data_to_spare+0xf4>
	}

	/* Erase the row that was moved and set it as the new spare row */
	_eeprom_emulator_nvm_erase_row(row_number);
   126b6:	1dfb      	adds	r3, r7, #7
   126b8:	781b      	ldrb	r3, [r3, #0]
   126ba:	0018      	movs	r0, r3
   126bc:	4b0c      	ldr	r3, [pc, #48]	; (126f0 <_eeprom_emulator_move_data_to_spare+0x1dc>)
   126be:	4798      	blx	r3

	/* Keep the index of the new spare row */
	_eeprom_instance.spare_row = row_number;
   126c0:	4b05      	ldr	r3, [pc, #20]	; (126d8 <_eeprom_emulator_move_data_to_spare+0x1c4>)
   126c2:	1dfa      	adds	r2, r7, #7
   126c4:	2187      	movs	r1, #135	; 0x87
   126c6:	7812      	ldrb	r2, [r2, #0]
   126c8:	545a      	strb	r2, [r3, r1]

	return error_code;
   126ca:	2314      	movs	r3, #20
   126cc:	18fb      	adds	r3, r7, r3
   126ce:	781b      	ldrb	r3, [r3, #0]
}
   126d0:	0018      	movs	r0, r3
   126d2:	46bd      	mov	sp, r7
   126d4:	b006      	add	sp, #24
   126d6:	bd80      	pop	{r7, pc}
   126d8:	2000041c 	.word	0x2000041c
   126dc:	00012b11 	.word	0x00012b11
   126e0:	00017ca1 	.word	0x00017ca1
   126e4:	200004a4 	.word	0x200004a4
   126e8:	00012069 	.word	0x00012069
   126ec:	00011fcd 	.word	0x00011fcd
   126f0:	00011f85 	.word	0x00011f85

000126f4 <_eeprom_emulator_create_master_page>:
 *
 * Creates a new master page in emulated EEPROM, giving information on the
 * emulator used to store the EEPROM data.
 */
static void _eeprom_emulator_create_master_page(void)
{
   126f4:	b590      	push	{r4, r7, lr}
   126f6:	b095      	sub	sp, #84	; 0x54
   126f8:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   126fa:	2340      	movs	r3, #64	; 0x40
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	4a29      	ldr	r2, [pc, #164]	; (127a4 <_eeprom_emulator_create_master_page+0xb0>)
   12700:	ca13      	ldmia	r2!, {r0, r1, r4}
   12702:	c313      	stmia	r3!, {r0, r1, r4}

	struct _eeprom_master_page master_page;
	memset(&master_page, 0xFF, sizeof(master_page));
   12704:	003b      	movs	r3, r7
   12706:	2240      	movs	r2, #64	; 0x40
   12708:	21ff      	movs	r1, #255	; 0xff
   1270a:	0018      	movs	r0, r3
   1270c:	4b26      	ldr	r3, [pc, #152]	; (127a8 <_eeprom_emulator_create_master_page+0xb4>)
   1270e:	4798      	blx	r3

	/* Fill out the magic key header to indicate an initialized master page */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   12710:	234f      	movs	r3, #79	; 0x4f
   12712:	18fb      	adds	r3, r7, r3
   12714:	2200      	movs	r2, #0
   12716:	701a      	strb	r2, [r3, #0]
   12718:	e013      	b.n	12742 <_eeprom_emulator_create_master_page+0x4e>
		master_page.magic_key[c] = magic_key[c];
   1271a:	234f      	movs	r3, #79	; 0x4f
   1271c:	18fb      	adds	r3, r7, r3
   1271e:	781a      	ldrb	r2, [r3, #0]
   12720:	234f      	movs	r3, #79	; 0x4f
   12722:	18fb      	adds	r3, r7, r3
   12724:	7819      	ldrb	r1, [r3, #0]
   12726:	2340      	movs	r3, #64	; 0x40
   12728:	18fb      	adds	r3, r7, r3
   1272a:	0089      	lsls	r1, r1, #2
   1272c:	58c9      	ldr	r1, [r1, r3]
   1272e:	003b      	movs	r3, r7
   12730:	0092      	lsls	r2, r2, #2
   12732:	50d1      	str	r1, [r2, r3]
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   12734:	234f      	movs	r3, #79	; 0x4f
   12736:	18fb      	adds	r3, r7, r3
   12738:	781a      	ldrb	r2, [r3, #0]
   1273a:	234f      	movs	r3, #79	; 0x4f
   1273c:	18fb      	adds	r3, r7, r3
   1273e:	3201      	adds	r2, #1
   12740:	701a      	strb	r2, [r3, #0]
   12742:	234f      	movs	r3, #79	; 0x4f
   12744:	18fb      	adds	r3, r7, r3
   12746:	781b      	ldrb	r3, [r3, #0]
   12748:	2b02      	cmp	r3, #2
   1274a:	d9e6      	bls.n	1271a <_eeprom_emulator_create_master_page+0x26>
	}

	/* Update master header with version information of this emulator */
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
   1274c:	003b      	movs	r3, r7
   1274e:	2201      	movs	r2, #1
   12750:	73da      	strb	r2, [r3, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
   12752:	003b      	movs	r3, r7
   12754:	2201      	movs	r2, #1
   12756:	731a      	strb	r2, [r3, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
   12758:	003b      	movs	r3, r7
   1275a:	2200      	movs	r2, #0
   1275c:	735a      	strb	r2, [r3, #13]
	master_page.revision      = EEPROM_REVISION;
   1275e:	003b      	movs	r3, r7
   12760:	2200      	movs	r2, #0
   12762:	739a      	strb	r2, [r3, #14]

	_eeprom_emulator_nvm_erase_row(
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
   12764:	4b11      	ldr	r3, [pc, #68]	; (127ac <_eeprom_emulator_create_master_page+0xb8>)
   12766:	891b      	ldrh	r3, [r3, #8]
   12768:	3b01      	subs	r3, #1
   1276a:	2b00      	cmp	r3, #0
   1276c:	da00      	bge.n	12770 <_eeprom_emulator_create_master_page+0x7c>
   1276e:	3303      	adds	r3, #3
   12770:	109b      	asrs	r3, r3, #2
	_eeprom_emulator_nvm_erase_row(
   12772:	b2db      	uxtb	r3, r3
   12774:	0018      	movs	r0, r3
   12776:	4b0e      	ldr	r3, [pc, #56]	; (127b0 <_eeprom_emulator_create_master_page+0xbc>)
   12778:	4798      	blx	r3

	/* Write the new master page data to physical memory */
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   1277a:	4b0c      	ldr	r3, [pc, #48]	; (127ac <_eeprom_emulator_create_master_page+0xb8>)
   1277c:	891b      	ldrh	r3, [r3, #8]
   1277e:	3b01      	subs	r3, #1
   12780:	b29b      	uxth	r3, r3
   12782:	003a      	movs	r2, r7
   12784:	0011      	movs	r1, r2
   12786:	0018      	movs	r0, r3
   12788:	4b0a      	ldr	r3, [pc, #40]	; (127b4 <_eeprom_emulator_create_master_page+0xc0>)
   1278a:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
   1278c:	4b07      	ldr	r3, [pc, #28]	; (127ac <_eeprom_emulator_create_master_page+0xb8>)
   1278e:	891b      	ldrh	r3, [r3, #8]
   12790:	3b01      	subs	r3, #1
   12792:	b29b      	uxth	r3, r3
   12794:	0018      	movs	r0, r3
   12796:	4b08      	ldr	r3, [pc, #32]	; (127b8 <_eeprom_emulator_create_master_page+0xc4>)
   12798:	4798      	blx	r3
}
   1279a:	46c0      	nop			; (mov r8, r8)
   1279c:	46bd      	mov	sp, r7
   1279e:	b015      	add	sp, #84	; 0x54
   127a0:	bd90      	pop	{r4, r7, pc}
   127a2:	46c0      	nop			; (mov r8, r8)
   127a4:	000199e8 	.word	0x000199e8
   127a8:	00017cd7 	.word	0x00017cd7
   127ac:	2000041c 	.word	0x2000041c
   127b0:	00011f85 	.word	0x00011f85
   127b4:	00011fcd 	.word	0x00011fcd
   127b8:	0001201d 	.word	0x0001201d

000127bc <_eeprom_emulator_verify_master_page>:
 * \retval STATUS_ERR_BAD_FORMAT  Master page contents was invalid
 * \retval STATUS_ERR_IO          Master page indicates the data is incompatible
 *                                with this version of the EEPROM emulator
 */
static enum status_code _eeprom_emulator_verify_master_page(void)
{
   127bc:	b590      	push	{r4, r7, lr}
   127be:	b095      	sub	sp, #84	; 0x54
   127c0:	af00      	add	r7, sp, #0
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
   127c2:	2340      	movs	r3, #64	; 0x40
   127c4:	18fb      	adds	r3, r7, r3
   127c6:	4a22      	ldr	r2, [pc, #136]	; (12850 <_eeprom_emulator_verify_master_page+0x94>)
   127c8:	ca13      	ldmia	r2!, {r0, r1, r4}
   127ca:	c313      	stmia	r3!, {r0, r1, r4}
	struct _eeprom_master_page master_page;

	/* Copy the master page to the RAM buffer so that it can be inspected */
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
   127cc:	4b21      	ldr	r3, [pc, #132]	; (12854 <_eeprom_emulator_verify_master_page+0x98>)
   127ce:	891b      	ldrh	r3, [r3, #8]
   127d0:	3b01      	subs	r3, #1
   127d2:	b29b      	uxth	r3, r3
   127d4:	003a      	movs	r2, r7
   127d6:	0011      	movs	r1, r2
   127d8:	0018      	movs	r0, r3
   127da:	4b1f      	ldr	r3, [pc, #124]	; (12858 <_eeprom_emulator_verify_master_page+0x9c>)
   127dc:	4798      	blx	r3

	/* Verify magic key is correct in the master page header */
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   127de:	234f      	movs	r3, #79	; 0x4f
   127e0:	18fb      	adds	r3, r7, r3
   127e2:	2200      	movs	r2, #0
   127e4:	701a      	strb	r2, [r3, #0]
   127e6:	e017      	b.n	12818 <_eeprom_emulator_verify_master_page+0x5c>
		if (master_page.magic_key[c] != magic_key[c]) {
   127e8:	234f      	movs	r3, #79	; 0x4f
   127ea:	18fb      	adds	r3, r7, r3
   127ec:	781a      	ldrb	r2, [r3, #0]
   127ee:	003b      	movs	r3, r7
   127f0:	0092      	lsls	r2, r2, #2
   127f2:	58d2      	ldr	r2, [r2, r3]
   127f4:	234f      	movs	r3, #79	; 0x4f
   127f6:	18fb      	adds	r3, r7, r3
   127f8:	7819      	ldrb	r1, [r3, #0]
   127fa:	2340      	movs	r3, #64	; 0x40
   127fc:	18fb      	adds	r3, r7, r3
   127fe:	0089      	lsls	r1, r1, #2
   12800:	58cb      	ldr	r3, [r1, r3]
   12802:	429a      	cmp	r2, r3
   12804:	d001      	beq.n	1280a <_eeprom_emulator_verify_master_page+0x4e>
			return STATUS_ERR_BAD_FORMAT;
   12806:	231a      	movs	r3, #26
   12808:	e01e      	b.n	12848 <_eeprom_emulator_verify_master_page+0x8c>
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
   1280a:	234f      	movs	r3, #79	; 0x4f
   1280c:	18fb      	adds	r3, r7, r3
   1280e:	781a      	ldrb	r2, [r3, #0]
   12810:	234f      	movs	r3, #79	; 0x4f
   12812:	18fb      	adds	r3, r7, r3
   12814:	3201      	adds	r2, #1
   12816:	701a      	strb	r2, [r3, #0]
   12818:	234f      	movs	r3, #79	; 0x4f
   1281a:	18fb      	adds	r3, r7, r3
   1281c:	781b      	ldrb	r3, [r3, #0]
   1281e:	2b02      	cmp	r3, #2
   12820:	d9e2      	bls.n	127e8 <_eeprom_emulator_verify_master_page+0x2c>
		}
	}

	/* Verify emulator ID in header to ensure the same scheme is used */
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
   12822:	003b      	movs	r3, r7
   12824:	7bdb      	ldrb	r3, [r3, #15]
   12826:	2b01      	cmp	r3, #1
   12828:	d001      	beq.n	1282e <_eeprom_emulator_verify_master_page+0x72>
		return STATUS_ERR_IO;
   1282a:	2310      	movs	r3, #16
   1282c:	e00c      	b.n	12848 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify major version in header to ensure the same version is used */
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
   1282e:	003b      	movs	r3, r7
   12830:	7b1b      	ldrb	r3, [r3, #12]
   12832:	2b01      	cmp	r3, #1
   12834:	d001      	beq.n	1283a <_eeprom_emulator_verify_master_page+0x7e>
		return STATUS_ERR_IO;
   12836:	2310      	movs	r3, #16
   12838:	e006      	b.n	12848 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Verify minor version in header to ensure the same version is used */
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
   1283a:	003b      	movs	r3, r7
   1283c:	7b5b      	ldrb	r3, [r3, #13]
   1283e:	2b00      	cmp	r3, #0
   12840:	d001      	beq.n	12846 <_eeprom_emulator_verify_master_page+0x8a>
		return STATUS_ERR_IO;
   12842:	2310      	movs	r3, #16
   12844:	e000      	b.n	12848 <_eeprom_emulator_verify_master_page+0x8c>
	}

	/* Don't verify revision number - same major/minor is considered enough
	 * to ensure the stored data is compatible. */

	return STATUS_OK;
   12846:	2300      	movs	r3, #0
}
   12848:	0018      	movs	r0, r3
   1284a:	46bd      	mov	sp, r7
   1284c:	b015      	add	sp, #84	; 0x54
   1284e:	bd90      	pop	{r4, r7, pc}
   12850:	000199e8 	.word	0x000199e8
   12854:	2000041c 	.word	0x2000041c
   12858:	00012069 	.word	0x00012069

0001285c <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
   1285c:	b590      	push	{r4, r7, lr}
   1285e:	b087      	sub	sp, #28
   12860:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   12862:	2317      	movs	r3, #23
   12864:	18fb      	adds	r3, r7, r3
   12866:	2200      	movs	r2, #0
   12868:	701a      	strb	r2, [r3, #0]
	struct nvm_parameters parameters;

	/* Retrieve the NVM controller configuration - enable manual page writing
	 * mode so that the emulator has exclusive control over page writes to
	 * allow for caching */
	nvm_get_config_defaults(&config);
   1286a:	2310      	movs	r3, #16
   1286c:	18fb      	adds	r3, r7, r3
   1286e:	0018      	movs	r0, r3
   12870:	4b2e      	ldr	r3, [pc, #184]	; (1292c <eeprom_emulator_init+0xd0>)
   12872:	4798      	blx	r3
	config.manual_page_write = true;
   12874:	2310      	movs	r3, #16
   12876:	18fb      	adds	r3, r7, r3
   12878:	2201      	movs	r2, #1
   1287a:	705a      	strb	r2, [r3, #1]

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
   1287c:	2317      	movs	r3, #23
   1287e:	18fc      	adds	r4, r7, r3
   12880:	2310      	movs	r3, #16
   12882:	18fb      	adds	r3, r7, r3
   12884:	0018      	movs	r0, r3
   12886:	4b2a      	ldr	r3, [pc, #168]	; (12930 <eeprom_emulator_init+0xd4>)
   12888:	4798      	blx	r3
   1288a:	0003      	movs	r3, r0
   1288c:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   1288e:	2317      	movs	r3, #23
   12890:	18fb      	adds	r3, r7, r3
   12892:	781b      	ldrb	r3, [r3, #0]
   12894:	2b05      	cmp	r3, #5
   12896:	d0f1      	beq.n	1287c <eeprom_emulator_init+0x20>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
   12898:	1d3b      	adds	r3, r7, #4
   1289a:	0018      	movs	r0, r3
   1289c:	4b25      	ldr	r3, [pc, #148]	; (12934 <eeprom_emulator_init+0xd8>)
   1289e:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
   128a0:	1d3b      	adds	r3, r7, #4
   128a2:	685b      	ldr	r3, [r3, #4]
   128a4:	2b0b      	cmp	r3, #11
   128a6:	d801      	bhi.n	128ac <eeprom_emulator_init+0x50>
		return STATUS_ERR_NO_MEMORY;
   128a8:	2316      	movs	r3, #22
   128aa:	e03b      	b.n	12924 <eeprom_emulator_init+0xc8>
	 *  - One row is reserved for the master page
	 *  - One row is reserved for the spare row
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
   128ac:	1d3b      	adds	r3, r7, #4
   128ae:	685b      	ldr	r3, [r3, #4]
	_eeprom_instance.physical_pages =
   128b0:	b29a      	uxth	r2, r3
   128b2:	4b21      	ldr	r3, [pc, #132]	; (12938 <eeprom_emulator_init+0xdc>)
   128b4:	811a      	strh	r2, [r3, #8]
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
   128b6:	1d3b      	adds	r3, r7, #4
   128b8:	685b      	ldr	r3, [r3, #4]
   128ba:	3b08      	subs	r3, #8
   128bc:	085b      	lsrs	r3, r3, #1
	_eeprom_instance.logical_pages  =
   128be:	b2da      	uxtb	r2, r3
   128c0:	4b1d      	ldr	r3, [pc, #116]	; (12938 <eeprom_emulator_init+0xdc>)
   128c2:	729a      	strb	r2, [r3, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));
   128c4:	4b1c      	ldr	r3, [pc, #112]	; (12938 <eeprom_emulator_init+0xdc>)
   128c6:	891b      	ldrh	r3, [r3, #8]
   128c8:	001a      	movs	r2, r3
			(void*)(FLASH_SIZE -
   128ca:	0013      	movs	r3, r2
   128cc:	069b      	lsls	r3, r3, #26
   128ce:	1a9b      	subs	r3, r3, r2
   128d0:	019b      	lsls	r3, r3, #6
   128d2:	2280      	movs	r2, #128	; 0x80
   128d4:	02d2      	lsls	r2, r2, #11
   128d6:	4694      	mov	ip, r2
   128d8:	4463      	add	r3, ip
   128da:	001a      	movs	r2, r3
	_eeprom_instance.flash =
   128dc:	4b16      	ldr	r3, [pc, #88]	; (12938 <eeprom_emulator_init+0xdc>)
   128de:	605a      	str	r2, [r3, #4]

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
   128e0:	4b15      	ldr	r3, [pc, #84]	; (12938 <eeprom_emulator_init+0xdc>)
   128e2:	22c8      	movs	r2, #200	; 0xc8
   128e4:	2100      	movs	r1, #0
   128e6:	5499      	strb	r1, [r3, r2]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
   128e8:	4b14      	ldr	r3, [pc, #80]	; (1293c <eeprom_emulator_init+0xe0>)
   128ea:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
   128ec:	4b12      	ldr	r3, [pc, #72]	; (12938 <eeprom_emulator_init+0xdc>)
   128ee:	2287      	movs	r2, #135	; 0x87
   128f0:	5c9b      	ldrb	r3, [r3, r2]
   128f2:	2b3f      	cmp	r3, #63	; 0x3f
   128f4:	d101      	bne.n	128fa <eeprom_emulator_init+0x9e>
		return STATUS_ERR_BAD_FORMAT;
   128f6:	231a      	movs	r3, #26
   128f8:	e014      	b.n	12924 <eeprom_emulator_init+0xc8>
	}

	/* Verify that the master page contains valid data for this service */
	error_code = _eeprom_emulator_verify_master_page();
   128fa:	2317      	movs	r3, #23
   128fc:	18fc      	adds	r4, r7, r3
   128fe:	4b10      	ldr	r3, [pc, #64]	; (12940 <eeprom_emulator_init+0xe4>)
   12900:	4798      	blx	r3
   12902:	0003      	movs	r3, r0
   12904:	7023      	strb	r3, [r4, #0]
	if (error_code != STATUS_OK) {
   12906:	2317      	movs	r3, #23
   12908:	18fb      	adds	r3, r7, r3
   1290a:	781b      	ldrb	r3, [r3, #0]
   1290c:	2b00      	cmp	r3, #0
   1290e:	d003      	beq.n	12918 <eeprom_emulator_init+0xbc>
		return error_code;
   12910:	2317      	movs	r3, #23
   12912:	18fb      	adds	r3, r7, r3
   12914:	781b      	ldrb	r3, [r3, #0]
   12916:	e005      	b.n	12924 <eeprom_emulator_init+0xc8>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;
   12918:	4b07      	ldr	r3, [pc, #28]	; (12938 <eeprom_emulator_init+0xdc>)
   1291a:	2201      	movs	r2, #1
   1291c:	701a      	strb	r2, [r3, #0]

	return error_code;
   1291e:	2317      	movs	r3, #23
   12920:	18fb      	adds	r3, r7, r3
   12922:	781b      	ldrb	r3, [r3, #0]
}
   12924:	0018      	movs	r0, r3
   12926:	46bd      	mov	sp, r7
   12928:	b007      	add	sp, #28
   1292a:	bd90      	pop	{r4, r7, pc}
   1292c:	00011f49 	.word	0x00011f49
   12930:	00011925 	.word	0x00011925
   12934:	00011e05 	.word	0x00011e05
   12938:	2000041c 	.word	0x2000041c
   1293c:	00012329 	.word	0x00012329
   12940:	000127bd 	.word	0x000127bd

00012944 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
   12944:	b580      	push	{r7, lr}
   12946:	af00      	add	r7, sp, #0
	/* Create new EEPROM memory block in EEPROM emulation section */
	_eeprom_emulator_format_memory();
   12948:	4b04      	ldr	r3, [pc, #16]	; (1295c <eeprom_emulator_erase_memory+0x18>)
   1294a:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();
   1294c:	4b04      	ldr	r3, [pc, #16]	; (12960 <eeprom_emulator_erase_memory+0x1c>)
   1294e:	4798      	blx	r3

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
   12950:	4b04      	ldr	r3, [pc, #16]	; (12964 <eeprom_emulator_erase_memory+0x20>)
   12952:	4798      	blx	r3
}
   12954:	46c0      	nop			; (mov r8, r8)
   12956:	46bd      	mov	sp, r7
   12958:	bd80      	pop	{r7, pc}
   1295a:	46c0      	nop			; (mov r8, r8)
   1295c:	000120b9 	.word	0x000120b9
   12960:	000126f5 	.word	0x000126f5
   12964:	00012329 	.word	0x00012329

00012968 <eeprom_emulator_write_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_write_page(
		const uint8_t logical_page,
		const uint8_t *const data)
{
   12968:	b590      	push	{r4, r7, lr}
   1296a:	b085      	sub	sp, #20
   1296c:	af00      	add	r7, sp, #0
   1296e:	0002      	movs	r2, r0
   12970:	6039      	str	r1, [r7, #0]
   12972:	1dfb      	adds	r3, r7, #7
   12974:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   12976:	4b38      	ldr	r3, [pc, #224]	; (12a58 <eeprom_emulator_write_page+0xf0>)
   12978:	781b      	ldrb	r3, [r3, #0]
   1297a:	2201      	movs	r2, #1
   1297c:	4053      	eors	r3, r2
   1297e:	b2db      	uxtb	r3, r3
   12980:	2b00      	cmp	r3, #0
   12982:	d001      	beq.n	12988 <eeprom_emulator_write_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   12984:	231f      	movs	r3, #31
   12986:	e063      	b.n	12a50 <eeprom_emulator_write_page+0xe8>
	}

	/* Make sure the write address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   12988:	4b33      	ldr	r3, [pc, #204]	; (12a58 <eeprom_emulator_write_page+0xf0>)
   1298a:	7a9b      	ldrb	r3, [r3, #10]
   1298c:	1dfa      	adds	r2, r7, #7
   1298e:	7812      	ldrb	r2, [r2, #0]
   12990:	429a      	cmp	r2, r3
   12992:	d301      	bcc.n	12998 <eeprom_emulator_write_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   12994:	2318      	movs	r3, #24
   12996:	e05b      	b.n	12a50 <eeprom_emulator_write_page+0xe8>
	}

	/* Check if the cache is active and the currently cached page is not the
	 * page that is being written (if not, we need to commit and cache the new
	 * page) */
	if ((_eeprom_instance.cache_active == true) &&
   12998:	4b2f      	ldr	r3, [pc, #188]	; (12a58 <eeprom_emulator_write_page+0xf0>)
   1299a:	22c8      	movs	r2, #200	; 0xc8
   1299c:	5c9b      	ldrb	r3, [r3, r2]
   1299e:	2b00      	cmp	r3, #0
   129a0:	d008      	beq.n	129b4 <eeprom_emulator_write_page+0x4c>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
   129a2:	4b2d      	ldr	r3, [pc, #180]	; (12a58 <eeprom_emulator_write_page+0xf0>)
   129a4:	2288      	movs	r2, #136	; 0x88
   129a6:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   129a8:	1dfa      	adds	r2, r7, #7
   129aa:	7812      	ldrb	r2, [r2, #0]
   129ac:	429a      	cmp	r2, r3
   129ae:	d001      	beq.n	129b4 <eeprom_emulator_write_page+0x4c>
		/* Commit the currently cached data buffer to non-volatile memory */
		eeprom_emulator_commit_page_buffer();
   129b0:	4b2a      	ldr	r3, [pc, #168]	; (12a5c <eeprom_emulator_write_page+0xf4>)
   129b2:	4798      	blx	r3
	}

	/* Check if we have space in the current page location's physical row for
	 * a new version, and if so get the new page index */
	uint8_t new_page = 0;
   129b4:	230e      	movs	r3, #14
   129b6:	18fb      	adds	r3, r7, r3
   129b8:	2200      	movs	r2, #0
   129ba:	701a      	strb	r2, [r3, #0]
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
   129bc:	1dfb      	adds	r3, r7, #7
   129be:	781b      	ldrb	r3, [r3, #0]
   129c0:	4a25      	ldr	r2, [pc, #148]	; (12a58 <eeprom_emulator_write_page+0xf0>)
   129c2:	18d3      	adds	r3, r2, r3
   129c4:	7adb      	ldrb	r3, [r3, #11]
   129c6:	220f      	movs	r2, #15
   129c8:	18bc      	adds	r4, r7, r2
   129ca:	220e      	movs	r2, #14
   129cc:	18ba      	adds	r2, r7, r2
   129ce:	0011      	movs	r1, r2
   129d0:	0018      	movs	r0, r3
   129d2:	4b23      	ldr	r3, [pc, #140]	; (12a60 <eeprom_emulator_write_page+0xf8>)
   129d4:	4798      	blx	r3
   129d6:	0003      	movs	r3, r0
   129d8:	7023      	strb	r3, [r4, #0]
			_eeprom_instance.page_map[logical_page], &new_page);

	/* Check if the current row is full, and we need to swap it out with a
	 * spare row */
	if (page_spare == false) {
   129da:	230f      	movs	r3, #15
   129dc:	18fb      	adds	r3, r7, r3
   129de:	781b      	ldrb	r3, [r3, #0]
   129e0:	2201      	movs	r2, #1
   129e2:	4053      	eors	r3, r2
   129e4:	b2db      	uxtb	r3, r3
   129e6:	2b00      	cmp	r3, #0
   129e8:	d00e      	beq.n	12a08 <eeprom_emulator_write_page+0xa0>
		/* Move the other page we aren't writing that is stored in the same
		 * page to the new row, and replace the old current page with the
		 * new page contents (cache is updated to match) */
		_eeprom_emulator_move_data_to_spare(
				_eeprom_instance.page_map[logical_page] / NVMCTRL_ROW_PAGES,
   129ea:	1dfb      	adds	r3, r7, #7
   129ec:	781b      	ldrb	r3, [r3, #0]
   129ee:	4a1a      	ldr	r2, [pc, #104]	; (12a58 <eeprom_emulator_write_page+0xf0>)
   129f0:	18d3      	adds	r3, r2, r3
   129f2:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_move_data_to_spare(
   129f4:	089b      	lsrs	r3, r3, #2
   129f6:	b2d8      	uxtb	r0, r3
   129f8:	683a      	ldr	r2, [r7, #0]
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	781b      	ldrb	r3, [r3, #0]
   129fe:	0019      	movs	r1, r3
   12a00:	4b18      	ldr	r3, [pc, #96]	; (12a64 <eeprom_emulator_write_page+0xfc>)
   12a02:	4798      	blx	r3
				logical_page,
				data);

		/* New data is now written and the cache is updated, exit */
		return STATUS_OK;
   12a04:	2300      	movs	r3, #0
   12a06:	e023      	b.n	12a50 <eeprom_emulator_write_page+0xe8>
	}

	/* Update the page cache header section with the new page header */
	_eeprom_instance.cache.header.logical_page = logical_page;
   12a08:	4b13      	ldr	r3, [pc, #76]	; (12a58 <eeprom_emulator_write_page+0xf0>)
   12a0a:	1dfa      	adds	r2, r7, #7
   12a0c:	2188      	movs	r1, #136	; 0x88
   12a0e:	7812      	ldrb	r2, [r2, #0]
   12a10:	545a      	strb	r2, [r3, r1]

	/* Update the page cache contents with the new data */
	memcpy(&_eeprom_instance.cache.data,
   12a12:	4b11      	ldr	r3, [pc, #68]	; (12a58 <eeprom_emulator_write_page+0xf0>)
   12a14:	228c      	movs	r2, #140	; 0x8c
   12a16:	6839      	ldr	r1, [r7, #0]
   12a18:	189b      	adds	r3, r3, r2
   12a1a:	223c      	movs	r2, #60	; 0x3c
   12a1c:	0018      	movs	r0, r3
   12a1e:	4b12      	ldr	r3, [pc, #72]	; (12a68 <eeprom_emulator_write_page+0x100>)
   12a20:	4798      	blx	r3
			data,
			EEPROM_PAGE_SIZE);

	/* Fill the physical NVM buffer with the new data so that it can be quickly
	 * committed in the future if needed due to a low power condition */
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
   12a22:	230e      	movs	r3, #14
   12a24:	18fb      	adds	r3, r7, r3
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	b29b      	uxth	r3, r3
   12a2a:	4a10      	ldr	r2, [pc, #64]	; (12a6c <eeprom_emulator_write_page+0x104>)
   12a2c:	0011      	movs	r1, r2
   12a2e:	0018      	movs	r0, r3
   12a30:	4b0f      	ldr	r3, [pc, #60]	; (12a70 <eeprom_emulator_write_page+0x108>)
   12a32:	4798      	blx	r3

	/* Update the cache parameters and mark the cache as active */
	_eeprom_instance.page_map[logical_page] = new_page;
   12a34:	1dfb      	adds	r3, r7, #7
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	220e      	movs	r2, #14
   12a3a:	18ba      	adds	r2, r7, r2
   12a3c:	7811      	ldrb	r1, [r2, #0]
   12a3e:	4a06      	ldr	r2, [pc, #24]	; (12a58 <eeprom_emulator_write_page+0xf0>)
   12a40:	18d3      	adds	r3, r2, r3
   12a42:	1c0a      	adds	r2, r1, #0
   12a44:	72da      	strb	r2, [r3, #11]
	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active           = true;
   12a46:	4b04      	ldr	r3, [pc, #16]	; (12a58 <eeprom_emulator_write_page+0xf0>)
   12a48:	22c8      	movs	r2, #200	; 0xc8
   12a4a:	2101      	movs	r1, #1
   12a4c:	5499      	strb	r1, [r3, r2]

	return STATUS_OK;
   12a4e:	2300      	movs	r3, #0
}
   12a50:	0018      	movs	r0, r3
   12a52:	46bd      	mov	sp, r7
   12a54:	b005      	add	sp, #20
   12a56:	bd90      	pop	{r4, r7, pc}
   12a58:	2000041c 	.word	0x2000041c
   12a5c:	00012b11 	.word	0x00012b11
   12a60:	0001247d 	.word	0x0001247d
   12a64:	00012515 	.word	0x00012515
   12a68:	00017ca1 	.word	0x00017ca1
   12a6c:	200004a4 	.word	0x200004a4
   12a70:	00011fcd 	.word	0x00011fcd

00012a74 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
   12a74:	b580      	push	{r7, lr}
   12a76:	b092      	sub	sp, #72	; 0x48
   12a78:	af00      	add	r7, sp, #0
   12a7a:	0002      	movs	r2, r0
   12a7c:	6039      	str	r1, [r7, #0]
   12a7e:	1dfb      	adds	r3, r7, #7
   12a80:	701a      	strb	r2, [r3, #0]
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
   12a82:	4b20      	ldr	r3, [pc, #128]	; (12b04 <eeprom_emulator_read_page+0x90>)
   12a84:	781b      	ldrb	r3, [r3, #0]
   12a86:	2201      	movs	r2, #1
   12a88:	4053      	eors	r3, r2
   12a8a:	b2db      	uxtb	r3, r3
   12a8c:	2b00      	cmp	r3, #0
   12a8e:	d001      	beq.n	12a94 <eeprom_emulator_read_page+0x20>
		return STATUS_ERR_NOT_INITIALIZED;
   12a90:	231f      	movs	r3, #31
   12a92:	e033      	b.n	12afc <eeprom_emulator_read_page+0x88>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
   12a94:	4b1b      	ldr	r3, [pc, #108]	; (12b04 <eeprom_emulator_read_page+0x90>)
   12a96:	7a9b      	ldrb	r3, [r3, #10]
   12a98:	1dfa      	adds	r2, r7, #7
   12a9a:	7812      	ldrb	r2, [r2, #0]
   12a9c:	429a      	cmp	r2, r3
   12a9e:	d301      	bcc.n	12aa4 <eeprom_emulator_read_page+0x30>
		return STATUS_ERR_BAD_ADDRESS;
   12aa0:	2318      	movs	r3, #24
   12aa2:	e02b      	b.n	12afc <eeprom_emulator_read_page+0x88>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
   12aa4:	4b17      	ldr	r3, [pc, #92]	; (12b04 <eeprom_emulator_read_page+0x90>)
   12aa6:	22c8      	movs	r2, #200	; 0xc8
   12aa8:	5c9b      	ldrb	r3, [r3, r2]
   12aaa:	2b00      	cmp	r3, #0
   12aac:	d010      	beq.n	12ad0 <eeprom_emulator_read_page+0x5c>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
   12aae:	4b15      	ldr	r3, [pc, #84]	; (12b04 <eeprom_emulator_read_page+0x90>)
   12ab0:	2288      	movs	r2, #136	; 0x88
   12ab2:	5c9b      	ldrb	r3, [r3, r2]
	if ((_eeprom_instance.cache_active == true) &&
   12ab4:	1dfa      	adds	r2, r7, #7
   12ab6:	7812      	ldrb	r2, [r2, #0]
   12ab8:	429a      	cmp	r2, r3
   12aba:	d109      	bne.n	12ad0 <eeprom_emulator_read_page+0x5c>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
   12abc:	6839      	ldr	r1, [r7, #0]
   12abe:	4b11      	ldr	r3, [pc, #68]	; (12b04 <eeprom_emulator_read_page+0x90>)
   12ac0:	228c      	movs	r2, #140	; 0x8c
   12ac2:	0008      	movs	r0, r1
   12ac4:	189b      	adds	r3, r3, r2
   12ac6:	223c      	movs	r2, #60	; 0x3c
   12ac8:	0019      	movs	r1, r3
   12aca:	4b0f      	ldr	r3, [pc, #60]	; (12b08 <eeprom_emulator_read_page+0x94>)
   12acc:	4798      	blx	r3
   12ace:	e014      	b.n	12afa <eeprom_emulator_read_page+0x86>
	} else {
		struct _eeprom_page temp;

		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);
   12ad0:	1dfb      	adds	r3, r7, #7
   12ad2:	781b      	ldrb	r3, [r3, #0]
   12ad4:	4a0b      	ldr	r2, [pc, #44]	; (12b04 <eeprom_emulator_read_page+0x90>)
   12ad6:	18d3      	adds	r3, r2, r3
   12ad8:	7adb      	ldrb	r3, [r3, #11]
		_eeprom_emulator_nvm_read_page(
   12ada:	b29b      	uxth	r3, r3
   12adc:	2208      	movs	r2, #8
   12ade:	18ba      	adds	r2, r7, r2
   12ae0:	0011      	movs	r1, r2
   12ae2:	0018      	movs	r0, r3
   12ae4:	4b09      	ldr	r3, [pc, #36]	; (12b0c <eeprom_emulator_read_page+0x98>)
   12ae6:	4798      	blx	r3

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
   12ae8:	683a      	ldr	r2, [r7, #0]
   12aea:	2308      	movs	r3, #8
   12aec:	18fb      	adds	r3, r7, r3
   12aee:	0010      	movs	r0, r2
   12af0:	3304      	adds	r3, #4
   12af2:	223c      	movs	r2, #60	; 0x3c
   12af4:	0019      	movs	r1, r3
   12af6:	4b04      	ldr	r3, [pc, #16]	; (12b08 <eeprom_emulator_read_page+0x94>)
   12af8:	4798      	blx	r3
	}

	return STATUS_OK;
   12afa:	2300      	movs	r3, #0
}
   12afc:	0018      	movs	r0, r3
   12afe:	46bd      	mov	sp, r7
   12b00:	b012      	add	sp, #72	; 0x48
   12b02:	bd80      	pop	{r7, pc}
   12b04:	2000041c 	.word	0x2000041c
   12b08:	00017ca1 	.word	0x00017ca1
   12b0c:	00012069 	.word	0x00012069

00012b10 <eeprom_emulator_commit_page_buffer>:
 *       data loss.
 *
 * \return Status code indicating the status of the operation.
 */
enum status_code eeprom_emulator_commit_page_buffer(void)
{
   12b10:	b580      	push	{r7, lr}
   12b12:	b082      	sub	sp, #8
   12b14:	af00      	add	r7, sp, #0
	enum status_code error_code = STATUS_OK;
   12b16:	1dfb      	adds	r3, r7, #7
   12b18:	2200      	movs	r2, #0
   12b1a:	701a      	strb	r2, [r3, #0]

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
   12b1c:	4b10      	ldr	r3, [pc, #64]	; (12b60 <eeprom_emulator_commit_page_buffer+0x50>)
   12b1e:	22c8      	movs	r2, #200	; 0xc8
   12b20:	5c9b      	ldrb	r3, [r3, r2]
   12b22:	2201      	movs	r2, #1
   12b24:	4053      	eors	r3, r2
   12b26:	b2db      	uxtb	r3, r3
   12b28:	2b00      	cmp	r3, #0
   12b2a:	d001      	beq.n	12b30 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
   12b2c:	2300      	movs	r3, #0
   12b2e:	e013      	b.n	12b58 <eeprom_emulator_commit_page_buffer+0x48>
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
   12b30:	1dbb      	adds	r3, r7, #6
   12b32:	4a0b      	ldr	r2, [pc, #44]	; (12b60 <eeprom_emulator_commit_page_buffer+0x50>)
   12b34:	2188      	movs	r1, #136	; 0x88
   12b36:	5c52      	ldrb	r2, [r2, r1]
   12b38:	701a      	strb	r2, [r3, #0]

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
   12b3a:	1dbb      	adds	r3, r7, #6
   12b3c:	781b      	ldrb	r3, [r3, #0]
   12b3e:	4a08      	ldr	r2, [pc, #32]	; (12b60 <eeprom_emulator_commit_page_buffer+0x50>)
   12b40:	18d3      	adds	r3, r2, r3
   12b42:	7adb      	ldrb	r3, [r3, #11]
	_eeprom_emulator_nvm_commit_cache(
   12b44:	b29b      	uxth	r3, r3
   12b46:	0018      	movs	r0, r3
   12b48:	4b06      	ldr	r3, [pc, #24]	; (12b64 <eeprom_emulator_commit_page_buffer+0x54>)
   12b4a:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
   12b4c:	4b04      	ldr	r3, [pc, #16]	; (12b60 <eeprom_emulator_commit_page_buffer+0x50>)
   12b4e:	22c8      	movs	r2, #200	; 0xc8
   12b50:	2100      	movs	r1, #0
   12b52:	5499      	strb	r1, [r3, r2]

	return error_code;
   12b54:	1dfb      	adds	r3, r7, #7
   12b56:	781b      	ldrb	r3, [r3, #0]
}
   12b58:	0018      	movs	r0, r3
   12b5a:	46bd      	mov	sp, r7
   12b5c:	b002      	add	sp, #8
   12b5e:	bd80      	pop	{r7, pc}
   12b60:	2000041c 	.word	0x2000041c
   12b64:	0001201d 	.word	0x0001201d

00012b68 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   12b68:	b580      	push	{r7, lr}
   12b6a:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   12b6c:	46c0      	nop			; (mov r8, r8)
   12b6e:	46bd      	mov	sp, r7
   12b70:	bd80      	pop	{r7, pc}
	...

00012b74 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   12b74:	b580      	push	{r7, lr}
   12b76:	b082      	sub	sp, #8
   12b78:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   12b7a:	4b10      	ldr	r3, [pc, #64]	; (12bbc <cpu_irq_enter_critical+0x48>)
   12b7c:	681b      	ldr	r3, [r3, #0]
   12b7e:	2b00      	cmp	r3, #0
   12b80:	d112      	bne.n	12ba8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   12b82:	f3ef 8310 	mrs	r3, PRIMASK
   12b86:	607b      	str	r3, [r7, #4]
  return(result);
   12b88:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   12b8a:	2b00      	cmp	r3, #0
   12b8c:	d109      	bne.n	12ba2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   12b8e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   12b90:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   12b94:	4b0a      	ldr	r3, [pc, #40]	; (12bc0 <cpu_irq_enter_critical+0x4c>)
   12b96:	2200      	movs	r2, #0
   12b98:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   12b9a:	4b0a      	ldr	r3, [pc, #40]	; (12bc4 <cpu_irq_enter_critical+0x50>)
   12b9c:	2201      	movs	r2, #1
   12b9e:	701a      	strb	r2, [r3, #0]
   12ba0:	e002      	b.n	12ba8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   12ba2:	4b08      	ldr	r3, [pc, #32]	; (12bc4 <cpu_irq_enter_critical+0x50>)
   12ba4:	2200      	movs	r2, #0
   12ba6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   12ba8:	4b04      	ldr	r3, [pc, #16]	; (12bbc <cpu_irq_enter_critical+0x48>)
   12baa:	681b      	ldr	r3, [r3, #0]
   12bac:	1c5a      	adds	r2, r3, #1
   12bae:	4b03      	ldr	r3, [pc, #12]	; (12bbc <cpu_irq_enter_critical+0x48>)
   12bb0:	601a      	str	r2, [r3, #0]
}
   12bb2:	46c0      	nop			; (mov r8, r8)
   12bb4:	46bd      	mov	sp, r7
   12bb6:	b002      	add	sp, #8
   12bb8:	bd80      	pop	{r7, pc}
   12bba:	46c0      	nop			; (mov r8, r8)
   12bbc:	200004e8 	.word	0x200004e8
   12bc0:	20000028 	.word	0x20000028
   12bc4:	200004ec 	.word	0x200004ec

00012bc8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   12bc8:	b580      	push	{r7, lr}
   12bca:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   12bcc:	4b0b      	ldr	r3, [pc, #44]	; (12bfc <cpu_irq_leave_critical+0x34>)
   12bce:	681b      	ldr	r3, [r3, #0]
   12bd0:	1e5a      	subs	r2, r3, #1
   12bd2:	4b0a      	ldr	r3, [pc, #40]	; (12bfc <cpu_irq_leave_critical+0x34>)
   12bd4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   12bd6:	4b09      	ldr	r3, [pc, #36]	; (12bfc <cpu_irq_leave_critical+0x34>)
   12bd8:	681b      	ldr	r3, [r3, #0]
   12bda:	2b00      	cmp	r3, #0
   12bdc:	d10a      	bne.n	12bf4 <cpu_irq_leave_critical+0x2c>
   12bde:	4b08      	ldr	r3, [pc, #32]	; (12c00 <cpu_irq_leave_critical+0x38>)
   12be0:	781b      	ldrb	r3, [r3, #0]
   12be2:	b2db      	uxtb	r3, r3
   12be4:	2b00      	cmp	r3, #0
   12be6:	d005      	beq.n	12bf4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   12be8:	4b06      	ldr	r3, [pc, #24]	; (12c04 <cpu_irq_leave_critical+0x3c>)
   12bea:	2201      	movs	r2, #1
   12bec:	701a      	strb	r2, [r3, #0]
   12bee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   12bf2:	b662      	cpsie	i
	}
}
   12bf4:	46c0      	nop			; (mov r8, r8)
   12bf6:	46bd      	mov	sp, r7
   12bf8:	bd80      	pop	{r7, pc}
   12bfa:	46c0      	nop			; (mov r8, r8)
   12bfc:	200004e8 	.word	0x200004e8
   12c00:	200004ec 	.word	0x200004ec
   12c04:	20000028 	.word	0x20000028

00012c08 <system_gclk_gen_get_config_defaults>:
{
   12c08:	b580      	push	{r7, lr}
   12c0a:	b082      	sub	sp, #8
   12c0c:	af00      	add	r7, sp, #0
   12c0e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   12c10:	687b      	ldr	r3, [r7, #4]
   12c12:	2201      	movs	r2, #1
   12c14:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   12c16:	687b      	ldr	r3, [r7, #4]
   12c18:	2200      	movs	r2, #0
   12c1a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   12c1c:	687b      	ldr	r3, [r7, #4]
   12c1e:	2206      	movs	r2, #6
   12c20:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   12c22:	687b      	ldr	r3, [r7, #4]
   12c24:	2200      	movs	r2, #0
   12c26:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   12c28:	687b      	ldr	r3, [r7, #4]
   12c2a:	2200      	movs	r2, #0
   12c2c:	725a      	strb	r2, [r3, #9]
}
   12c2e:	46c0      	nop			; (mov r8, r8)
   12c30:	46bd      	mov	sp, r7
   12c32:	b002      	add	sp, #8
   12c34:	bd80      	pop	{r7, pc}

00012c36 <system_gclk_chan_get_config_defaults>:
{
   12c36:	b580      	push	{r7, lr}
   12c38:	b082      	sub	sp, #8
   12c3a:	af00      	add	r7, sp, #0
   12c3c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   12c3e:	687b      	ldr	r3, [r7, #4]
   12c40:	2200      	movs	r2, #0
   12c42:	701a      	strb	r2, [r3, #0]
}
   12c44:	46c0      	nop			; (mov r8, r8)
   12c46:	46bd      	mov	sp, r7
   12c48:	b002      	add	sp, #8
   12c4a:	bd80      	pop	{r7, pc}

00012c4c <system_clock_source_xosc32k_get_config_defaults>:
{
   12c4c:	b580      	push	{r7, lr}
   12c4e:	b082      	sub	sp, #8
   12c50:	af00      	add	r7, sp, #0
   12c52:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   12c54:	687b      	ldr	r3, [r7, #4]
   12c56:	2200      	movs	r2, #0
   12c58:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   12c5a:	687b      	ldr	r3, [r7, #4]
   12c5c:	2204      	movs	r2, #4
   12c5e:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   12c60:	687b      	ldr	r3, [r7, #4]
   12c62:	2200      	movs	r2, #0
   12c64:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   12c66:	687b      	ldr	r3, [r7, #4]
   12c68:	2280      	movs	r2, #128	; 0x80
   12c6a:	0212      	lsls	r2, r2, #8
   12c6c:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   12c6e:	687b      	ldr	r3, [r7, #4]
   12c70:	2200      	movs	r2, #0
   12c72:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   12c74:	687b      	ldr	r3, [r7, #4]
   12c76:	2201      	movs	r2, #1
   12c78:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   12c7a:	687b      	ldr	r3, [r7, #4]
   12c7c:	2200      	movs	r2, #0
   12c7e:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   12c80:	687b      	ldr	r3, [r7, #4]
   12c82:	2201      	movs	r2, #1
   12c84:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   12c86:	687b      	ldr	r3, [r7, #4]
   12c88:	2200      	movs	r2, #0
   12c8a:	739a      	strb	r2, [r3, #14]
}
   12c8c:	46c0      	nop			; (mov r8, r8)
   12c8e:	46bd      	mov	sp, r7
   12c90:	b002      	add	sp, #8
   12c92:	bd80      	pop	{r7, pc}

00012c94 <system_clock_source_osc8m_get_config_defaults>:
{
   12c94:	b580      	push	{r7, lr}
   12c96:	b082      	sub	sp, #8
   12c98:	af00      	add	r7, sp, #0
   12c9a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   12c9c:	687b      	ldr	r3, [r7, #4]
   12c9e:	2203      	movs	r2, #3
   12ca0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   12ca2:	687b      	ldr	r3, [r7, #4]
   12ca4:	2200      	movs	r2, #0
   12ca6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   12ca8:	687b      	ldr	r3, [r7, #4]
   12caa:	2201      	movs	r2, #1
   12cac:	709a      	strb	r2, [r3, #2]
}
   12cae:	46c0      	nop			; (mov r8, r8)
   12cb0:	46bd      	mov	sp, r7
   12cb2:	b002      	add	sp, #8
   12cb4:	bd80      	pop	{r7, pc}

00012cb6 <system_clock_source_dfll_get_config_defaults>:
{
   12cb6:	b580      	push	{r7, lr}
   12cb8:	b082      	sub	sp, #8
   12cba:	af00      	add	r7, sp, #0
   12cbc:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   12cbe:	687b      	ldr	r3, [r7, #4]
   12cc0:	2200      	movs	r2, #0
   12cc2:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   12cc4:	687b      	ldr	r3, [r7, #4]
   12cc6:	2200      	movs	r2, #0
   12cc8:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   12cca:	687b      	ldr	r3, [r7, #4]
   12ccc:	2200      	movs	r2, #0
   12cce:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   12cd0:	687b      	ldr	r3, [r7, #4]
   12cd2:	2200      	movs	r2, #0
   12cd4:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   12cd6:	687b      	ldr	r3, [r7, #4]
   12cd8:	2200      	movs	r2, #0
   12cda:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   12cdc:	687b      	ldr	r3, [r7, #4]
   12cde:	2201      	movs	r2, #1
   12ce0:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   12ce2:	687b      	ldr	r3, [r7, #4]
   12ce4:	2207      	movs	r2, #7
   12ce6:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   12ce8:	687b      	ldr	r3, [r7, #4]
   12cea:	223f      	movs	r2, #63	; 0x3f
   12cec:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   12cee:	687b      	ldr	r3, [r7, #4]
   12cf0:	2201      	movs	r2, #1
   12cf2:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   12cf4:	687b      	ldr	r3, [r7, #4]
   12cf6:	2201      	movs	r2, #1
   12cf8:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   12cfa:	687b      	ldr	r3, [r7, #4]
   12cfc:	2206      	movs	r2, #6
   12cfe:	821a      	strh	r2, [r3, #16]
}
   12d00:	46c0      	nop			; (mov r8, r8)
   12d02:	46bd      	mov	sp, r7
   12d04:	b002      	add	sp, #8
   12d06:	bd80      	pop	{r7, pc}

00012d08 <system_cpu_clock_set_divider>:
{
   12d08:	b580      	push	{r7, lr}
   12d0a:	b082      	sub	sp, #8
   12d0c:	af00      	add	r7, sp, #0
   12d0e:	0002      	movs	r2, r0
   12d10:	1dfb      	adds	r3, r7, #7
   12d12:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   12d14:	4a03      	ldr	r2, [pc, #12]	; (12d24 <system_cpu_clock_set_divider+0x1c>)
   12d16:	1dfb      	adds	r3, r7, #7
   12d18:	781b      	ldrb	r3, [r3, #0]
   12d1a:	7213      	strb	r3, [r2, #8]
}
   12d1c:	46c0      	nop			; (mov r8, r8)
   12d1e:	46bd      	mov	sp, r7
   12d20:	b002      	add	sp, #8
   12d22:	bd80      	pop	{r7, pc}
   12d24:	40000400 	.word	0x40000400

00012d28 <system_apb_clock_set_divider>:
{
   12d28:	b580      	push	{r7, lr}
   12d2a:	b082      	sub	sp, #8
   12d2c:	af00      	add	r7, sp, #0
   12d2e:	0002      	movs	r2, r0
   12d30:	1dfb      	adds	r3, r7, #7
   12d32:	701a      	strb	r2, [r3, #0]
   12d34:	1dbb      	adds	r3, r7, #6
   12d36:	1c0a      	adds	r2, r1, #0
   12d38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12d3a:	1dfb      	adds	r3, r7, #7
   12d3c:	781b      	ldrb	r3, [r3, #0]
   12d3e:	2b01      	cmp	r3, #1
   12d40:	d008      	beq.n	12d54 <system_apb_clock_set_divider+0x2c>
   12d42:	2b02      	cmp	r3, #2
   12d44:	d00b      	beq.n	12d5e <system_apb_clock_set_divider+0x36>
   12d46:	2b00      	cmp	r3, #0
   12d48:	d10e      	bne.n	12d68 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   12d4a:	4a0b      	ldr	r2, [pc, #44]	; (12d78 <system_apb_clock_set_divider+0x50>)
   12d4c:	1dbb      	adds	r3, r7, #6
   12d4e:	781b      	ldrb	r3, [r3, #0]
   12d50:	7253      	strb	r3, [r2, #9]
			break;
   12d52:	e00b      	b.n	12d6c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   12d54:	4a08      	ldr	r2, [pc, #32]	; (12d78 <system_apb_clock_set_divider+0x50>)
   12d56:	1dbb      	adds	r3, r7, #6
   12d58:	781b      	ldrb	r3, [r3, #0]
   12d5a:	7293      	strb	r3, [r2, #10]
			break;
   12d5c:	e006      	b.n	12d6c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   12d5e:	4a06      	ldr	r2, [pc, #24]	; (12d78 <system_apb_clock_set_divider+0x50>)
   12d60:	1dbb      	adds	r3, r7, #6
   12d62:	781b      	ldrb	r3, [r3, #0]
   12d64:	72d3      	strb	r3, [r2, #11]
			break;
   12d66:	e001      	b.n	12d6c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   12d68:	2317      	movs	r3, #23
   12d6a:	e000      	b.n	12d6e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   12d6c:	2300      	movs	r3, #0
}
   12d6e:	0018      	movs	r0, r3
   12d70:	46bd      	mov	sp, r7
   12d72:	b002      	add	sp, #8
   12d74:	bd80      	pop	{r7, pc}
   12d76:	46c0      	nop			; (mov r8, r8)
   12d78:	40000400 	.word	0x40000400

00012d7c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   12d7c:	b580      	push	{r7, lr}
   12d7e:	b082      	sub	sp, #8
   12d80:	af00      	add	r7, sp, #0
   12d82:	0002      	movs	r2, r0
   12d84:	1dfb      	adds	r3, r7, #7
   12d86:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   12d88:	4a08      	ldr	r2, [pc, #32]	; (12dac <system_flash_set_waitstates+0x30>)
   12d8a:	1dfb      	adds	r3, r7, #7
   12d8c:	781b      	ldrb	r3, [r3, #0]
   12d8e:	210f      	movs	r1, #15
   12d90:	400b      	ands	r3, r1
   12d92:	b2d9      	uxtb	r1, r3
   12d94:	6853      	ldr	r3, [r2, #4]
   12d96:	200f      	movs	r0, #15
   12d98:	4001      	ands	r1, r0
   12d9a:	0049      	lsls	r1, r1, #1
   12d9c:	201e      	movs	r0, #30
   12d9e:	4383      	bics	r3, r0
   12da0:	430b      	orrs	r3, r1
   12da2:	6053      	str	r3, [r2, #4]
}
   12da4:	46c0      	nop			; (mov r8, r8)
   12da6:	46bd      	mov	sp, r7
   12da8:	b002      	add	sp, #8
   12daa:	bd80      	pop	{r7, pc}
   12dac:	41004000 	.word	0x41004000

00012db0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   12db0:	b580      	push	{r7, lr}
   12db2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   12db4:	46c0      	nop			; (mov r8, r8)
   12db6:	4b04      	ldr	r3, [pc, #16]	; (12dc8 <_system_dfll_wait_for_sync+0x18>)
   12db8:	68db      	ldr	r3, [r3, #12]
   12dba:	2210      	movs	r2, #16
   12dbc:	4013      	ands	r3, r2
   12dbe:	d0fa      	beq.n	12db6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   12dc0:	46c0      	nop			; (mov r8, r8)
   12dc2:	46bd      	mov	sp, r7
   12dc4:	bd80      	pop	{r7, pc}
   12dc6:	46c0      	nop			; (mov r8, r8)
   12dc8:	40000800 	.word	0x40000800

00012dcc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   12dd0:	4b0c      	ldr	r3, [pc, #48]	; (12e04 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12dd2:	2202      	movs	r2, #2
   12dd4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   12dd6:	4b0c      	ldr	r3, [pc, #48]	; (12e08 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   12dd8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   12dda:	4a0a      	ldr	r2, [pc, #40]	; (12e04 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12ddc:	4b0b      	ldr	r3, [pc, #44]	; (12e0c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   12dde:	689b      	ldr	r3, [r3, #8]
   12de0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   12de2:	4a08      	ldr	r2, [pc, #32]	; (12e04 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12de4:	4b09      	ldr	r3, [pc, #36]	; (12e0c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   12de6:	685b      	ldr	r3, [r3, #4]
   12de8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   12dea:	4b06      	ldr	r3, [pc, #24]	; (12e04 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12dec:	2200      	movs	r2, #0
   12dee:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   12df0:	4b05      	ldr	r3, [pc, #20]	; (12e08 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   12df2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   12df4:	4a03      	ldr	r2, [pc, #12]	; (12e04 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   12df6:	4b05      	ldr	r3, [pc, #20]	; (12e0c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   12df8:	681b      	ldr	r3, [r3, #0]
   12dfa:	b29b      	uxth	r3, r3
   12dfc:	8493      	strh	r3, [r2, #36]	; 0x24
}
   12dfe:	46c0      	nop			; (mov r8, r8)
   12e00:	46bd      	mov	sp, r7
   12e02:	bd80      	pop	{r7, pc}
   12e04:	40000800 	.word	0x40000800
   12e08:	00012db1 	.word	0x00012db1
   12e0c:	200004f0 	.word	0x200004f0

00012e10 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   12e10:	b580      	push	{r7, lr}
   12e12:	b082      	sub	sp, #8
   12e14:	af00      	add	r7, sp, #0
   12e16:	0002      	movs	r2, r0
   12e18:	1dfb      	adds	r3, r7, #7
   12e1a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   12e1c:	1dfb      	adds	r3, r7, #7
   12e1e:	781b      	ldrb	r3, [r3, #0]
   12e20:	2b08      	cmp	r3, #8
   12e22:	d841      	bhi.n	12ea8 <system_clock_source_get_hz+0x98>
   12e24:	009a      	lsls	r2, r3, #2
   12e26:	4b23      	ldr	r3, [pc, #140]	; (12eb4 <system_clock_source_get_hz+0xa4>)
   12e28:	18d3      	adds	r3, r2, r3
   12e2a:	681b      	ldr	r3, [r3, #0]
   12e2c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   12e2e:	4b22      	ldr	r3, [pc, #136]	; (12eb8 <system_clock_source_get_hz+0xa8>)
   12e30:	691b      	ldr	r3, [r3, #16]
   12e32:	e03a      	b.n	12eaa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   12e34:	4b21      	ldr	r3, [pc, #132]	; (12ebc <system_clock_source_get_hz+0xac>)
   12e36:	6a1b      	ldr	r3, [r3, #32]
   12e38:	059b      	lsls	r3, r3, #22
   12e3a:	0f9b      	lsrs	r3, r3, #30
   12e3c:	b2db      	uxtb	r3, r3
   12e3e:	001a      	movs	r2, r3
   12e40:	4b1f      	ldr	r3, [pc, #124]	; (12ec0 <system_clock_source_get_hz+0xb0>)
   12e42:	40d3      	lsrs	r3, r2
   12e44:	e031      	b.n	12eaa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   12e46:	2380      	movs	r3, #128	; 0x80
   12e48:	021b      	lsls	r3, r3, #8
   12e4a:	e02e      	b.n	12eaa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   12e4c:	2380      	movs	r3, #128	; 0x80
   12e4e:	021b      	lsls	r3, r3, #8
   12e50:	e02b      	b.n	12eaa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   12e52:	4b19      	ldr	r3, [pc, #100]	; (12eb8 <system_clock_source_get_hz+0xa8>)
   12e54:	695b      	ldr	r3, [r3, #20]
   12e56:	e028      	b.n	12eaa <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   12e58:	4b17      	ldr	r3, [pc, #92]	; (12eb8 <system_clock_source_get_hz+0xa8>)
   12e5a:	681b      	ldr	r3, [r3, #0]
   12e5c:	2202      	movs	r2, #2
   12e5e:	4013      	ands	r3, r2
   12e60:	d101      	bne.n	12e66 <system_clock_source_get_hz+0x56>
			return 0;
   12e62:	2300      	movs	r3, #0
   12e64:	e021      	b.n	12eaa <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   12e66:	4b17      	ldr	r3, [pc, #92]	; (12ec4 <system_clock_source_get_hz+0xb4>)
   12e68:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   12e6a:	4b13      	ldr	r3, [pc, #76]	; (12eb8 <system_clock_source_get_hz+0xa8>)
   12e6c:	681b      	ldr	r3, [r3, #0]
   12e6e:	2224      	movs	r2, #36	; 0x24
   12e70:	4013      	ands	r3, r2
   12e72:	2b04      	cmp	r3, #4
   12e74:	d109      	bne.n	12e8a <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   12e76:	2000      	movs	r0, #0
   12e78:	4b13      	ldr	r3, [pc, #76]	; (12ec8 <system_clock_source_get_hz+0xb8>)
   12e7a:	4798      	blx	r3
   12e7c:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   12e7e:	4b0e      	ldr	r3, [pc, #56]	; (12eb8 <system_clock_source_get_hz+0xa8>)
   12e80:	689b      	ldr	r3, [r3, #8]
   12e82:	041b      	lsls	r3, r3, #16
   12e84:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   12e86:	4353      	muls	r3, r2
   12e88:	e00f      	b.n	12eaa <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   12e8a:	4b10      	ldr	r3, [pc, #64]	; (12ecc <system_clock_source_get_hz+0xbc>)
   12e8c:	e00d      	b.n	12eaa <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   12e8e:	4a0b      	ldr	r2, [pc, #44]	; (12ebc <system_clock_source_get_hz+0xac>)
   12e90:	2350      	movs	r3, #80	; 0x50
   12e92:	5cd3      	ldrb	r3, [r2, r3]
   12e94:	b2db      	uxtb	r3, r3
   12e96:	001a      	movs	r2, r3
   12e98:	2304      	movs	r3, #4
   12e9a:	4013      	ands	r3, r2
   12e9c:	d101      	bne.n	12ea2 <system_clock_source_get_hz+0x92>
			return 0;
   12e9e:	2300      	movs	r3, #0
   12ea0:	e003      	b.n	12eaa <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   12ea2:	4b05      	ldr	r3, [pc, #20]	; (12eb8 <system_clock_source_get_hz+0xa8>)
   12ea4:	68db      	ldr	r3, [r3, #12]
   12ea6:	e000      	b.n	12eaa <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   12ea8:	2300      	movs	r3, #0
	}
}
   12eaa:	0018      	movs	r0, r3
   12eac:	46bd      	mov	sp, r7
   12eae:	b002      	add	sp, #8
   12eb0:	bd80      	pop	{r7, pc}
   12eb2:	46c0      	nop			; (mov r8, r8)
   12eb4:	000199f4 	.word	0x000199f4
   12eb8:	200004f0 	.word	0x200004f0
   12ebc:	40000800 	.word	0x40000800
   12ec0:	007a1200 	.word	0x007a1200
   12ec4:	00012db1 	.word	0x00012db1
   12ec8:	00013a51 	.word	0x00013a51
   12ecc:	02dc6c00 	.word	0x02dc6c00

00012ed0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   12ed0:	b580      	push	{r7, lr}
   12ed2:	b084      	sub	sp, #16
   12ed4:	af00      	add	r7, sp, #0
   12ed6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   12ed8:	4b1a      	ldr	r3, [pc, #104]	; (12f44 <system_clock_source_osc8m_set_config+0x74>)
   12eda:	6a1b      	ldr	r3, [r3, #32]
   12edc:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   12ede:	687b      	ldr	r3, [r7, #4]
   12ee0:	781b      	ldrb	r3, [r3, #0]
   12ee2:	1c1a      	adds	r2, r3, #0
   12ee4:	2303      	movs	r3, #3
   12ee6:	4013      	ands	r3, r2
   12ee8:	b2da      	uxtb	r2, r3
   12eea:	230d      	movs	r3, #13
   12eec:	18fb      	adds	r3, r7, r3
   12eee:	2103      	movs	r1, #3
   12ef0:	400a      	ands	r2, r1
   12ef2:	0010      	movs	r0, r2
   12ef4:	781a      	ldrb	r2, [r3, #0]
   12ef6:	2103      	movs	r1, #3
   12ef8:	438a      	bics	r2, r1
   12efa:	1c11      	adds	r1, r2, #0
   12efc:	1c02      	adds	r2, r0, #0
   12efe:	430a      	orrs	r2, r1
   12f00:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   12f02:	687b      	ldr	r3, [r7, #4]
   12f04:	789a      	ldrb	r2, [r3, #2]
   12f06:	230c      	movs	r3, #12
   12f08:	18fb      	adds	r3, r7, r3
   12f0a:	01d0      	lsls	r0, r2, #7
   12f0c:	781a      	ldrb	r2, [r3, #0]
   12f0e:	217f      	movs	r1, #127	; 0x7f
   12f10:	400a      	ands	r2, r1
   12f12:	1c11      	adds	r1, r2, #0
   12f14:	1c02      	adds	r2, r0, #0
   12f16:	430a      	orrs	r2, r1
   12f18:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   12f1a:	687b      	ldr	r3, [r7, #4]
   12f1c:	785a      	ldrb	r2, [r3, #1]
   12f1e:	230c      	movs	r3, #12
   12f20:	18fb      	adds	r3, r7, r3
   12f22:	2101      	movs	r1, #1
   12f24:	400a      	ands	r2, r1
   12f26:	0190      	lsls	r0, r2, #6
   12f28:	781a      	ldrb	r2, [r3, #0]
   12f2a:	2140      	movs	r1, #64	; 0x40
   12f2c:	438a      	bics	r2, r1
   12f2e:	1c11      	adds	r1, r2, #0
   12f30:	1c02      	adds	r2, r0, #0
   12f32:	430a      	orrs	r2, r1
   12f34:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   12f36:	4b03      	ldr	r3, [pc, #12]	; (12f44 <system_clock_source_osc8m_set_config+0x74>)
   12f38:	68fa      	ldr	r2, [r7, #12]
   12f3a:	621a      	str	r2, [r3, #32]
}
   12f3c:	46c0      	nop			; (mov r8, r8)
   12f3e:	46bd      	mov	sp, r7
   12f40:	b004      	add	sp, #16
   12f42:	bd80      	pop	{r7, pc}
   12f44:	40000800 	.word	0x40000800

00012f48 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   12f48:	b580      	push	{r7, lr}
   12f4a:	b084      	sub	sp, #16
   12f4c:	af00      	add	r7, sp, #0
   12f4e:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   12f50:	4a43      	ldr	r2, [pc, #268]	; (13060 <system_clock_source_xosc32k_set_config+0x118>)
   12f52:	230c      	movs	r3, #12
   12f54:	18fb      	adds	r3, r7, r3
   12f56:	8a92      	ldrh	r2, [r2, #20]
   12f58:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   12f5a:	687b      	ldr	r3, [r7, #4]
   12f5c:	785b      	ldrb	r3, [r3, #1]
   12f5e:	1c1a      	adds	r2, r3, #0
   12f60:	2307      	movs	r3, #7
   12f62:	4013      	ands	r3, r2
   12f64:	b2da      	uxtb	r2, r3
   12f66:	230c      	movs	r3, #12
   12f68:	18fb      	adds	r3, r7, r3
   12f6a:	2107      	movs	r1, #7
   12f6c:	400a      	ands	r2, r1
   12f6e:	0010      	movs	r0, r2
   12f70:	785a      	ldrb	r2, [r3, #1]
   12f72:	2107      	movs	r1, #7
   12f74:	438a      	bics	r2, r1
   12f76:	1c11      	adds	r1, r2, #0
   12f78:	1c02      	adds	r2, r0, #0
   12f7a:	430a      	orrs	r2, r1
   12f7c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	781b      	ldrb	r3, [r3, #0]
   12f82:	2b00      	cmp	r3, #0
   12f84:	d106      	bne.n	12f94 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   12f86:	230c      	movs	r3, #12
   12f88:	18fb      	adds	r3, r7, r3
   12f8a:	781a      	ldrb	r2, [r3, #0]
   12f8c:	2104      	movs	r1, #4
   12f8e:	430a      	orrs	r2, r1
   12f90:	701a      	strb	r2, [r3, #0]
   12f92:	e005      	b.n	12fa0 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   12f94:	230c      	movs	r3, #12
   12f96:	18fb      	adds	r3, r7, r3
   12f98:	781a      	ldrb	r2, [r3, #0]
   12f9a:	2104      	movs	r1, #4
   12f9c:	438a      	bics	r2, r1
   12f9e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   12fa0:	687b      	ldr	r3, [r7, #4]
   12fa2:	789a      	ldrb	r2, [r3, #2]
   12fa4:	230c      	movs	r3, #12
   12fa6:	18fb      	adds	r3, r7, r3
   12fa8:	2101      	movs	r1, #1
   12faa:	400a      	ands	r2, r1
   12fac:	0150      	lsls	r0, r2, #5
   12fae:	781a      	ldrb	r2, [r3, #0]
   12fb0:	2120      	movs	r1, #32
   12fb2:	438a      	bics	r2, r1
   12fb4:	1c11      	adds	r1, r2, #0
   12fb6:	1c02      	adds	r2, r0, #0
   12fb8:	430a      	orrs	r2, r1
   12fba:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   12fbc:	687b      	ldr	r3, [r7, #4]
   12fbe:	78da      	ldrb	r2, [r3, #3]
   12fc0:	230c      	movs	r3, #12
   12fc2:	18fb      	adds	r3, r7, r3
   12fc4:	2101      	movs	r1, #1
   12fc6:	400a      	ands	r2, r1
   12fc8:	0110      	lsls	r0, r2, #4
   12fca:	781a      	ldrb	r2, [r3, #0]
   12fcc:	2110      	movs	r1, #16
   12fce:	438a      	bics	r2, r1
   12fd0:	1c11      	adds	r1, r2, #0
   12fd2:	1c02      	adds	r2, r0, #0
   12fd4:	430a      	orrs	r2, r1
   12fd6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   12fd8:	687b      	ldr	r3, [r7, #4]
   12fda:	791a      	ldrb	r2, [r3, #4]
   12fdc:	230c      	movs	r3, #12
   12fde:	18fb      	adds	r3, r7, r3
   12fe0:	2101      	movs	r1, #1
   12fe2:	400a      	ands	r2, r1
   12fe4:	00d0      	lsls	r0, r2, #3
   12fe6:	781a      	ldrb	r2, [r3, #0]
   12fe8:	2108      	movs	r1, #8
   12fea:	438a      	bics	r2, r1
   12fec:	1c11      	adds	r1, r2, #0
   12fee:	1c02      	adds	r2, r0, #0
   12ff0:	430a      	orrs	r2, r1
   12ff2:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   12ff4:	687b      	ldr	r3, [r7, #4]
   12ff6:	7b5a      	ldrb	r2, [r3, #13]
   12ff8:	230c      	movs	r3, #12
   12ffa:	18fb      	adds	r3, r7, r3
   12ffc:	01d0      	lsls	r0, r2, #7
   12ffe:	781a      	ldrb	r2, [r3, #0]
   13000:	217f      	movs	r1, #127	; 0x7f
   13002:	400a      	ands	r2, r1
   13004:	1c11      	adds	r1, r2, #0
   13006:	1c02      	adds	r2, r0, #0
   13008:	430a      	orrs	r2, r1
   1300a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1300c:	687b      	ldr	r3, [r7, #4]
   1300e:	7b1a      	ldrb	r2, [r3, #12]
   13010:	230c      	movs	r3, #12
   13012:	18fb      	adds	r3, r7, r3
   13014:	2101      	movs	r1, #1
   13016:	400a      	ands	r2, r1
   13018:	0190      	lsls	r0, r2, #6
   1301a:	781a      	ldrb	r2, [r3, #0]
   1301c:	2140      	movs	r1, #64	; 0x40
   1301e:	438a      	bics	r2, r1
   13020:	1c11      	adds	r1, r2, #0
   13022:	1c02      	adds	r2, r0, #0
   13024:	430a      	orrs	r2, r1
   13026:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   13028:	687b      	ldr	r3, [r7, #4]
   1302a:	7b9a      	ldrb	r2, [r3, #14]
   1302c:	230c      	movs	r3, #12
   1302e:	18fb      	adds	r3, r7, r3
   13030:	2101      	movs	r1, #1
   13032:	400a      	ands	r2, r1
   13034:	0110      	lsls	r0, r2, #4
   13036:	785a      	ldrb	r2, [r3, #1]
   13038:	2110      	movs	r1, #16
   1303a:	438a      	bics	r2, r1
   1303c:	1c11      	adds	r1, r2, #0
   1303e:	1c02      	adds	r2, r0, #0
   13040:	430a      	orrs	r2, r1
   13042:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   13044:	687b      	ldr	r3, [r7, #4]
   13046:	689a      	ldr	r2, [r3, #8]
   13048:	4b06      	ldr	r3, [pc, #24]	; (13064 <system_clock_source_xosc32k_set_config+0x11c>)
   1304a:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   1304c:	4a04      	ldr	r2, [pc, #16]	; (13060 <system_clock_source_xosc32k_set_config+0x118>)
   1304e:	230c      	movs	r3, #12
   13050:	18fb      	adds	r3, r7, r3
   13052:	881b      	ldrh	r3, [r3, #0]
   13054:	8293      	strh	r3, [r2, #20]
}
   13056:	46c0      	nop			; (mov r8, r8)
   13058:	46bd      	mov	sp, r7
   1305a:	b004      	add	sp, #16
   1305c:	bd80      	pop	{r7, pc}
   1305e:	46c0      	nop			; (mov r8, r8)
   13060:	40000800 	.word	0x40000800
   13064:	200004f0 	.word	0x200004f0

00013068 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   13068:	b580      	push	{r7, lr}
   1306a:	b082      	sub	sp, #8
   1306c:	af00      	add	r7, sp, #0
   1306e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   13070:	687b      	ldr	r3, [r7, #4]
   13072:	7a1b      	ldrb	r3, [r3, #8]
   13074:	029b      	lsls	r3, r3, #10
   13076:	041b      	lsls	r3, r3, #16
   13078:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   1307a:	687b      	ldr	r3, [r7, #4]
   1307c:	895b      	ldrh	r3, [r3, #10]
   1307e:	059b      	lsls	r3, r3, #22
   13080:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   13082:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   13084:	4b2a      	ldr	r3, [pc, #168]	; (13130 <system_clock_source_dfll_set_config+0xc8>)
   13086:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   13088:	687b      	ldr	r3, [r7, #4]
   1308a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   1308c:	687b      	ldr	r3, [r7, #4]
   1308e:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   13090:	4313      	orrs	r3, r2
   13092:	b2db      	uxtb	r3, r3
   13094:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   13096:	687b      	ldr	r3, [r7, #4]
   13098:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   1309a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   1309c:	687a      	ldr	r2, [r7, #4]
   1309e:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   130a0:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   130a2:	687b      	ldr	r3, [r7, #4]
   130a4:	785b      	ldrb	r3, [r3, #1]
   130a6:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   130a8:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   130aa:	4b21      	ldr	r3, [pc, #132]	; (13130 <system_clock_source_dfll_set_config+0xc8>)
   130ac:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   130ae:	687b      	ldr	r3, [r7, #4]
   130b0:	781b      	ldrb	r3, [r3, #0]
   130b2:	2b04      	cmp	r3, #4
   130b4:	d116      	bne.n	130e4 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	7b1b      	ldrb	r3, [r3, #12]
   130ba:	069b      	lsls	r3, r3, #26
   130bc:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   130be:	687b      	ldr	r3, [r7, #4]
   130c0:	89db      	ldrh	r3, [r3, #14]
   130c2:	041b      	lsls	r3, r3, #16
   130c4:	0019      	movs	r1, r3
   130c6:	4b1b      	ldr	r3, [pc, #108]	; (13134 <system_clock_source_dfll_set_config+0xcc>)
   130c8:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   130ca:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   130cc:	687a      	ldr	r2, [r7, #4]
   130ce:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   130d0:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   130d2:	4b17      	ldr	r3, [pc, #92]	; (13130 <system_clock_source_dfll_set_config+0xc8>)
   130d4:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   130d6:	4b16      	ldr	r3, [pc, #88]	; (13130 <system_clock_source_dfll_set_config+0xc8>)
   130d8:	681b      	ldr	r3, [r3, #0]
   130da:	687a      	ldr	r2, [r7, #4]
   130dc:	7812      	ldrb	r2, [r2, #0]
   130de:	431a      	orrs	r2, r3
   130e0:	4b13      	ldr	r3, [pc, #76]	; (13130 <system_clock_source_dfll_set_config+0xc8>)
   130e2:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   130e4:	687b      	ldr	r3, [r7, #4]
   130e6:	781b      	ldrb	r3, [r3, #0]
   130e8:	2b20      	cmp	r3, #32
   130ea:	d11c      	bne.n	13126 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   130ec:	687b      	ldr	r3, [r7, #4]
   130ee:	7b1b      	ldrb	r3, [r3, #12]
   130f0:	069b      	lsls	r3, r3, #26
   130f2:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   130f4:	687b      	ldr	r3, [r7, #4]
   130f6:	89db      	ldrh	r3, [r3, #14]
   130f8:	041b      	lsls	r3, r3, #16
   130fa:	0019      	movs	r1, r3
   130fc:	4b0d      	ldr	r3, [pc, #52]	; (13134 <system_clock_source_dfll_set_config+0xcc>)
   130fe:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   13100:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   13102:	687a      	ldr	r2, [r7, #4]
   13104:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   13106:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   13108:	4b09      	ldr	r3, [pc, #36]	; (13130 <system_clock_source_dfll_set_config+0xc8>)
   1310a:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   1310c:	4b08      	ldr	r3, [pc, #32]	; (13130 <system_clock_source_dfll_set_config+0xc8>)
   1310e:	681b      	ldr	r3, [r3, #0]
   13110:	687a      	ldr	r2, [r7, #4]
   13112:	7812      	ldrb	r2, [r2, #0]
   13114:	2104      	movs	r1, #4
   13116:	430a      	orrs	r2, r1
   13118:	b2d2      	uxtb	r2, r2
   1311a:	4313      	orrs	r3, r2
   1311c:	2280      	movs	r2, #128	; 0x80
   1311e:	00d2      	lsls	r2, r2, #3
   13120:	431a      	orrs	r2, r3
   13122:	4b03      	ldr	r3, [pc, #12]	; (13130 <system_clock_source_dfll_set_config+0xc8>)
   13124:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   13126:	46c0      	nop			; (mov r8, r8)
   13128:	46bd      	mov	sp, r7
   1312a:	b002      	add	sp, #8
   1312c:	bd80      	pop	{r7, pc}
   1312e:	46c0      	nop			; (mov r8, r8)
   13130:	200004f0 	.word	0x200004f0
   13134:	03ff0000 	.word	0x03ff0000

00013138 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   13138:	b580      	push	{r7, lr}
   1313a:	b082      	sub	sp, #8
   1313c:	af00      	add	r7, sp, #0
   1313e:	0002      	movs	r2, r0
   13140:	1dfb      	adds	r3, r7, #7
   13142:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   13144:	1dfb      	adds	r3, r7, #7
   13146:	781b      	ldrb	r3, [r3, #0]
   13148:	2b08      	cmp	r3, #8
   1314a:	d83b      	bhi.n	131c4 <system_clock_source_enable+0x8c>
   1314c:	009a      	lsls	r2, r3, #2
   1314e:	4b21      	ldr	r3, [pc, #132]	; (131d4 <system_clock_source_enable+0x9c>)
   13150:	18d3      	adds	r3, r2, r3
   13152:	681b      	ldr	r3, [r3, #0]
   13154:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   13156:	4b20      	ldr	r3, [pc, #128]	; (131d8 <system_clock_source_enable+0xa0>)
   13158:	4a1f      	ldr	r2, [pc, #124]	; (131d8 <system_clock_source_enable+0xa0>)
   1315a:	6a12      	ldr	r2, [r2, #32]
   1315c:	2102      	movs	r1, #2
   1315e:	430a      	orrs	r2, r1
   13160:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   13162:	2300      	movs	r3, #0
   13164:	e031      	b.n	131ca <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   13166:	4b1c      	ldr	r3, [pc, #112]	; (131d8 <system_clock_source_enable+0xa0>)
   13168:	4a1b      	ldr	r2, [pc, #108]	; (131d8 <system_clock_source_enable+0xa0>)
   1316a:	6992      	ldr	r2, [r2, #24]
   1316c:	2102      	movs	r1, #2
   1316e:	430a      	orrs	r2, r1
   13170:	619a      	str	r2, [r3, #24]
		break;
   13172:	e029      	b.n	131c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   13174:	4a18      	ldr	r2, [pc, #96]	; (131d8 <system_clock_source_enable+0xa0>)
   13176:	4b18      	ldr	r3, [pc, #96]	; (131d8 <system_clock_source_enable+0xa0>)
   13178:	8a1b      	ldrh	r3, [r3, #16]
   1317a:	b29b      	uxth	r3, r3
   1317c:	2102      	movs	r1, #2
   1317e:	430b      	orrs	r3, r1
   13180:	b29b      	uxth	r3, r3
   13182:	8213      	strh	r3, [r2, #16]
		break;
   13184:	e020      	b.n	131c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   13186:	4a14      	ldr	r2, [pc, #80]	; (131d8 <system_clock_source_enable+0xa0>)
   13188:	4b13      	ldr	r3, [pc, #76]	; (131d8 <system_clock_source_enable+0xa0>)
   1318a:	8a9b      	ldrh	r3, [r3, #20]
   1318c:	b29b      	uxth	r3, r3
   1318e:	2102      	movs	r1, #2
   13190:	430b      	orrs	r3, r1
   13192:	b29b      	uxth	r3, r3
   13194:	8293      	strh	r3, [r2, #20]
		break;
   13196:	e017      	b.n	131c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   13198:	4b10      	ldr	r3, [pc, #64]	; (131dc <system_clock_source_enable+0xa4>)
   1319a:	681b      	ldr	r3, [r3, #0]
   1319c:	2202      	movs	r2, #2
   1319e:	431a      	orrs	r2, r3
   131a0:	4b0e      	ldr	r3, [pc, #56]	; (131dc <system_clock_source_enable+0xa4>)
   131a2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   131a4:	4b0e      	ldr	r3, [pc, #56]	; (131e0 <system_clock_source_enable+0xa8>)
   131a6:	4798      	blx	r3
		break;
   131a8:	e00e      	b.n	131c8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   131aa:	4a0b      	ldr	r2, [pc, #44]	; (131d8 <system_clock_source_enable+0xa0>)
   131ac:	490a      	ldr	r1, [pc, #40]	; (131d8 <system_clock_source_enable+0xa0>)
   131ae:	2344      	movs	r3, #68	; 0x44
   131b0:	5ccb      	ldrb	r3, [r1, r3]
   131b2:	b2db      	uxtb	r3, r3
   131b4:	2102      	movs	r1, #2
   131b6:	430b      	orrs	r3, r1
   131b8:	b2d9      	uxtb	r1, r3
   131ba:	2344      	movs	r3, #68	; 0x44
   131bc:	54d1      	strb	r1, [r2, r3]
		break;
   131be:	e003      	b.n	131c8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   131c0:	2300      	movs	r3, #0
   131c2:	e002      	b.n	131ca <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   131c4:	2317      	movs	r3, #23
   131c6:	e000      	b.n	131ca <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   131c8:	2300      	movs	r3, #0
}
   131ca:	0018      	movs	r0, r3
   131cc:	46bd      	mov	sp, r7
   131ce:	b002      	add	sp, #8
   131d0:	bd80      	pop	{r7, pc}
   131d2:	46c0      	nop			; (mov r8, r8)
   131d4:	00019a18 	.word	0x00019a18
   131d8:	40000800 	.word	0x40000800
   131dc:	200004f0 	.word	0x200004f0
   131e0:	00012dcd 	.word	0x00012dcd

000131e4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   131e4:	b580      	push	{r7, lr}
   131e6:	b084      	sub	sp, #16
   131e8:	af00      	add	r7, sp, #0
   131ea:	0002      	movs	r2, r0
   131ec:	1dfb      	adds	r3, r7, #7
   131ee:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   131f0:	2300      	movs	r3, #0
   131f2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   131f4:	1dfb      	adds	r3, r7, #7
   131f6:	781b      	ldrb	r3, [r3, #0]
   131f8:	2b08      	cmp	r3, #8
   131fa:	d821      	bhi.n	13240 <system_clock_source_is_ready+0x5c>
   131fc:	009a      	lsls	r2, r3, #2
   131fe:	4b18      	ldr	r3, [pc, #96]	; (13260 <system_clock_source_is_ready+0x7c>)
   13200:	18d3      	adds	r3, r2, r3
   13202:	681b      	ldr	r3, [r3, #0]
   13204:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   13206:	2308      	movs	r3, #8
   13208:	60fb      	str	r3, [r7, #12]
		break;
   1320a:	e01b      	b.n	13244 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   1320c:	2304      	movs	r3, #4
   1320e:	60fb      	str	r3, [r7, #12]
		break;
   13210:	e018      	b.n	13244 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   13212:	2301      	movs	r3, #1
   13214:	60fb      	str	r3, [r7, #12]
		break;
   13216:	e015      	b.n	13244 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   13218:	2302      	movs	r3, #2
   1321a:	60fb      	str	r3, [r7, #12]
		break;
   1321c:	e012      	b.n	13244 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   1321e:	23d0      	movs	r3, #208	; 0xd0
   13220:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   13222:	e00f      	b.n	13244 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   13224:	4a0f      	ldr	r2, [pc, #60]	; (13264 <system_clock_source_is_ready+0x80>)
   13226:	2350      	movs	r3, #80	; 0x50
   13228:	5cd3      	ldrb	r3, [r2, r3]
   1322a:	b2db      	uxtb	r3, r3
   1322c:	001a      	movs	r2, r3
   1322e:	2303      	movs	r3, #3
   13230:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   13232:	3b03      	subs	r3, #3
   13234:	425a      	negs	r2, r3
   13236:	4153      	adcs	r3, r2
   13238:	b2db      	uxtb	r3, r3
   1323a:	e00c      	b.n	13256 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   1323c:	2301      	movs	r3, #1
   1323e:	e00a      	b.n	13256 <system_clock_source_is_ready+0x72>

	default:
		return false;
   13240:	2300      	movs	r3, #0
   13242:	e008      	b.n	13256 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   13244:	4b07      	ldr	r3, [pc, #28]	; (13264 <system_clock_source_is_ready+0x80>)
   13246:	68db      	ldr	r3, [r3, #12]
   13248:	68fa      	ldr	r2, [r7, #12]
   1324a:	401a      	ands	r2, r3
   1324c:	68fb      	ldr	r3, [r7, #12]
   1324e:	1ad3      	subs	r3, r2, r3
   13250:	425a      	negs	r2, r3
   13252:	4153      	adcs	r3, r2
   13254:	b2db      	uxtb	r3, r3
}
   13256:	0018      	movs	r0, r3
   13258:	46bd      	mov	sp, r7
   1325a:	b004      	add	sp, #16
   1325c:	bd80      	pop	{r7, pc}
   1325e:	46c0      	nop			; (mov r8, r8)
   13260:	00019a3c 	.word	0x00019a3c
   13264:	40000800 	.word	0x40000800

00013268 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   13268:	b580      	push	{r7, lr}
   1326a:	b082      	sub	sp, #8
   1326c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   1326e:	003b      	movs	r3, r7
   13270:	2202      	movs	r2, #2
   13272:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   13274:	2300      	movs	r3, #0
   13276:	607b      	str	r3, [r7, #4]
   13278:	e009      	b.n	1328e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1327a:	687b      	ldr	r3, [r7, #4]
   1327c:	b2db      	uxtb	r3, r3
   1327e:	003a      	movs	r2, r7
   13280:	0011      	movs	r1, r2
   13282:	0018      	movs	r0, r3
   13284:	4b05      	ldr	r3, [pc, #20]	; (1329c <_switch_peripheral_gclk+0x34>)
   13286:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   13288:	687b      	ldr	r3, [r7, #4]
   1328a:	3301      	adds	r3, #1
   1328c:	607b      	str	r3, [r7, #4]
   1328e:	687b      	ldr	r3, [r7, #4]
   13290:	2b24      	cmp	r3, #36	; 0x24
   13292:	d9f2      	bls.n	1327a <_switch_peripheral_gclk+0x12>
	}
}
   13294:	46c0      	nop			; (mov r8, r8)
   13296:	46bd      	mov	sp, r7
   13298:	b002      	add	sp, #8
   1329a:	bd80      	pop	{r7, pc}
   1329c:	0001392d 	.word	0x0001392d

000132a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   132a0:	b580      	push	{r7, lr}
   132a2:	b0aa      	sub	sp, #168	; 0xa8
   132a4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   132a6:	4bc1      	ldr	r3, [pc, #772]	; (135ac <system_clock_init+0x30c>)
   132a8:	22c2      	movs	r2, #194	; 0xc2
   132aa:	00d2      	lsls	r2, r2, #3
   132ac:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   132ae:	2002      	movs	r0, #2
   132b0:	4bbf      	ldr	r3, [pc, #764]	; (135b0 <system_clock_init+0x310>)
   132b2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   132b4:	4bbf      	ldr	r3, [pc, #764]	; (135b4 <system_clock_init+0x314>)
   132b6:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   132b8:	2394      	movs	r3, #148	; 0x94
   132ba:	18fb      	adds	r3, r7, r3
   132bc:	0018      	movs	r0, r3
   132be:	4bbe      	ldr	r3, [pc, #760]	; (135b8 <system_clock_init+0x318>)
   132c0:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   132c2:	2394      	movs	r3, #148	; 0x94
   132c4:	18fb      	adds	r3, r7, r3
   132c6:	2280      	movs	r2, #128	; 0x80
   132c8:	0212      	lsls	r2, r2, #8
   132ca:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   132cc:	2394      	movs	r3, #148	; 0x94
   132ce:	18fb      	adds	r3, r7, r3
   132d0:	2200      	movs	r2, #0
   132d2:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   132d4:	2394      	movs	r3, #148	; 0x94
   132d6:	18fb      	adds	r3, r7, r3
   132d8:	2206      	movs	r2, #6
   132da:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   132dc:	2394      	movs	r3, #148	; 0x94
   132de:	18fb      	adds	r3, r7, r3
   132e0:	2200      	movs	r2, #0
   132e2:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   132e4:	2394      	movs	r3, #148	; 0x94
   132e6:	18fb      	adds	r3, r7, r3
   132e8:	2200      	movs	r2, #0
   132ea:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   132ec:	2394      	movs	r3, #148	; 0x94
   132ee:	18fb      	adds	r3, r7, r3
   132f0:	2201      	movs	r2, #1
   132f2:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   132f4:	2394      	movs	r3, #148	; 0x94
   132f6:	18fb      	adds	r3, r7, r3
   132f8:	2200      	movs	r2, #0
   132fa:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   132fc:	2394      	movs	r3, #148	; 0x94
   132fe:	18fb      	adds	r3, r7, r3
   13300:	2201      	movs	r2, #1
   13302:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   13304:	2394      	movs	r3, #148	; 0x94
   13306:	18fb      	adds	r3, r7, r3
   13308:	0018      	movs	r0, r3
   1330a:	4bac      	ldr	r3, [pc, #688]	; (135bc <system_clock_init+0x31c>)
   1330c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   1330e:	2005      	movs	r0, #5
   13310:	4bab      	ldr	r3, [pc, #684]	; (135c0 <system_clock_init+0x320>)
   13312:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   13314:	46c0      	nop			; (mov r8, r8)
   13316:	2005      	movs	r0, #5
   13318:	4baa      	ldr	r3, [pc, #680]	; (135c4 <system_clock_init+0x324>)
   1331a:	4798      	blx	r3
   1331c:	0003      	movs	r3, r0
   1331e:	001a      	movs	r2, r3
   13320:	2301      	movs	r3, #1
   13322:	4053      	eors	r3, r2
   13324:	b2db      	uxtb	r3, r3
   13326:	2b00      	cmp	r3, #0
   13328:	d1f5      	bne.n	13316 <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   1332a:	2380      	movs	r3, #128	; 0x80
   1332c:	18fb      	adds	r3, r7, r3
   1332e:	0018      	movs	r0, r3
   13330:	4ba5      	ldr	r3, [pc, #660]	; (135c8 <system_clock_init+0x328>)
   13332:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   13334:	2380      	movs	r3, #128	; 0x80
   13336:	18fb      	adds	r3, r7, r3
   13338:	2204      	movs	r2, #4
   1333a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   1333c:	2380      	movs	r3, #128	; 0x80
   1333e:	18fb      	adds	r3, r7, r3
   13340:	2200      	movs	r2, #0
   13342:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   13344:	4ba1      	ldr	r3, [pc, #644]	; (135cc <system_clock_init+0x32c>)
   13346:	681b      	ldr	r3, [r3, #0]
   13348:	0e9b      	lsrs	r3, r3, #26
   1334a:	22a4      	movs	r2, #164	; 0xa4
   1334c:	18ba      	adds	r2, r7, r2
   1334e:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   13350:	23a4      	movs	r3, #164	; 0xa4
   13352:	18fb      	adds	r3, r7, r3
   13354:	681b      	ldr	r3, [r3, #0]
   13356:	2b3f      	cmp	r3, #63	; 0x3f
   13358:	d103      	bne.n	13362 <system_clock_init+0xc2>
		coarse = 0x1f;
   1335a:	231f      	movs	r3, #31
   1335c:	22a4      	movs	r2, #164	; 0xa4
   1335e:	18ba      	adds	r2, r7, r2
   13360:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   13362:	23a4      	movs	r3, #164	; 0xa4
   13364:	18fb      	adds	r3, r7, r3
   13366:	681b      	ldr	r3, [r3, #0]
   13368:	b2da      	uxtb	r2, r3
   1336a:	2380      	movs	r3, #128	; 0x80
   1336c:	18fb      	adds	r3, r7, r3
   1336e:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   13370:	2380      	movs	r3, #128	; 0x80
   13372:	18fb      	adds	r3, r7, r3
   13374:	2200      	movs	r2, #0
   13376:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   13378:	2380      	movs	r3, #128	; 0x80
   1337a:	18fb      	adds	r3, r7, r3
   1337c:	2200      	movs	r2, #0
   1337e:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   13380:	2380      	movs	r3, #128	; 0x80
   13382:	18fb      	adds	r3, r7, r3
   13384:	2200      	movs	r2, #0
   13386:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   13388:	2380      	movs	r3, #128	; 0x80
   1338a:	18fb      	adds	r3, r7, r3
   1338c:	2200      	movs	r2, #0
   1338e:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   13390:	2380      	movs	r3, #128	; 0x80
   13392:	18fb      	adds	r3, r7, r3
   13394:	22b7      	movs	r2, #183	; 0xb7
   13396:	00d2      	lsls	r2, r2, #3
   13398:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	18fb      	adds	r3, r7, r3
   1339e:	2203      	movs	r2, #3
   133a0:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   133a2:	2380      	movs	r3, #128	; 0x80
   133a4:	18fb      	adds	r3, r7, r3
   133a6:	221f      	movs	r2, #31
   133a8:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   133aa:	2380      	movs	r3, #128	; 0x80
   133ac:	18fb      	adds	r3, r7, r3
   133ae:	0018      	movs	r0, r3
   133b0:	4b87      	ldr	r3, [pc, #540]	; (135d0 <system_clock_init+0x330>)
   133b2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   133b4:	237c      	movs	r3, #124	; 0x7c
   133b6:	18fb      	adds	r3, r7, r3
   133b8:	0018      	movs	r0, r3
   133ba:	4b86      	ldr	r3, [pc, #536]	; (135d4 <system_clock_init+0x334>)
   133bc:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   133be:	237c      	movs	r3, #124	; 0x7c
   133c0:	18fb      	adds	r3, r7, r3
   133c2:	2200      	movs	r2, #0
   133c4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   133c6:	237c      	movs	r3, #124	; 0x7c
   133c8:	18fb      	adds	r3, r7, r3
   133ca:	2201      	movs	r2, #1
   133cc:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   133ce:	237c      	movs	r3, #124	; 0x7c
   133d0:	18fb      	adds	r3, r7, r3
   133d2:	2201      	movs	r2, #1
   133d4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   133d6:	237c      	movs	r3, #124	; 0x7c
   133d8:	18fb      	adds	r3, r7, r3
   133da:	0018      	movs	r0, r3
   133dc:	4b7e      	ldr	r3, [pc, #504]	; (135d8 <system_clock_init+0x338>)
   133de:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   133e0:	2006      	movs	r0, #6
   133e2:	4b77      	ldr	r3, [pc, #476]	; (135c0 <system_clock_init+0x320>)
   133e4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   133e6:	4b7d      	ldr	r3, [pc, #500]	; (135dc <system_clock_init+0x33c>)
   133e8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   133ea:	2364      	movs	r3, #100	; 0x64
   133ec:	18fb      	adds	r3, r7, r3
   133ee:	0018      	movs	r0, r3
   133f0:	4b7b      	ldr	r3, [pc, #492]	; (135e0 <system_clock_init+0x340>)
   133f2:	4798      	blx	r3
   133f4:	2364      	movs	r3, #100	; 0x64
   133f6:	18fb      	adds	r3, r7, r3
   133f8:	2205      	movs	r2, #5
   133fa:	701a      	strb	r2, [r3, #0]
   133fc:	2364      	movs	r3, #100	; 0x64
   133fe:	18fb      	adds	r3, r7, r3
   13400:	2201      	movs	r2, #1
   13402:	605a      	str	r2, [r3, #4]
   13404:	2364      	movs	r3, #100	; 0x64
   13406:	18fb      	adds	r3, r7, r3
   13408:	2200      	movs	r2, #0
   1340a:	721a      	strb	r2, [r3, #8]
   1340c:	2364      	movs	r3, #100	; 0x64
   1340e:	18fb      	adds	r3, r7, r3
   13410:	2200      	movs	r2, #0
   13412:	725a      	strb	r2, [r3, #9]
   13414:	2364      	movs	r3, #100	; 0x64
   13416:	18fb      	adds	r3, r7, r3
   13418:	0019      	movs	r1, r3
   1341a:	2001      	movs	r0, #1
   1341c:	4b71      	ldr	r3, [pc, #452]	; (135e4 <system_clock_init+0x344>)
   1341e:	4798      	blx	r3
   13420:	2001      	movs	r0, #1
   13422:	4b71      	ldr	r3, [pc, #452]	; (135e8 <system_clock_init+0x348>)
   13424:	4798      	blx	r3
   13426:	234c      	movs	r3, #76	; 0x4c
   13428:	18fb      	adds	r3, r7, r3
   1342a:	0018      	movs	r0, r3
   1342c:	4b6c      	ldr	r3, [pc, #432]	; (135e0 <system_clock_init+0x340>)
   1342e:	4798      	blx	r3
   13430:	234c      	movs	r3, #76	; 0x4c
   13432:	18fb      	adds	r3, r7, r3
   13434:	2206      	movs	r2, #6
   13436:	701a      	strb	r2, [r3, #0]
   13438:	234c      	movs	r3, #76	; 0x4c
   1343a:	18fb      	adds	r3, r7, r3
   1343c:	2201      	movs	r2, #1
   1343e:	605a      	str	r2, [r3, #4]
   13440:	234c      	movs	r3, #76	; 0x4c
   13442:	18fb      	adds	r3, r7, r3
   13444:	2201      	movs	r2, #1
   13446:	721a      	strb	r2, [r3, #8]
   13448:	234c      	movs	r3, #76	; 0x4c
   1344a:	18fb      	adds	r3, r7, r3
   1344c:	2200      	movs	r2, #0
   1344e:	725a      	strb	r2, [r3, #9]
   13450:	234c      	movs	r3, #76	; 0x4c
   13452:	18fb      	adds	r3, r7, r3
   13454:	0019      	movs	r1, r3
   13456:	2003      	movs	r0, #3
   13458:	4b62      	ldr	r3, [pc, #392]	; (135e4 <system_clock_init+0x344>)
   1345a:	4798      	blx	r3
   1345c:	2003      	movs	r0, #3
   1345e:	4b62      	ldr	r3, [pc, #392]	; (135e8 <system_clock_init+0x348>)
   13460:	4798      	blx	r3
   13462:	2340      	movs	r3, #64	; 0x40
   13464:	18fb      	adds	r3, r7, r3
   13466:	0018      	movs	r0, r3
   13468:	4b5d      	ldr	r3, [pc, #372]	; (135e0 <system_clock_init+0x340>)
   1346a:	4798      	blx	r3
   1346c:	2340      	movs	r3, #64	; 0x40
   1346e:	18fb      	adds	r3, r7, r3
   13470:	2203      	movs	r2, #3
   13472:	701a      	strb	r2, [r3, #0]
   13474:	2340      	movs	r3, #64	; 0x40
   13476:	18fb      	adds	r3, r7, r3
   13478:	2220      	movs	r2, #32
   1347a:	605a      	str	r2, [r3, #4]
   1347c:	2340      	movs	r3, #64	; 0x40
   1347e:	18fb      	adds	r3, r7, r3
   13480:	2200      	movs	r2, #0
   13482:	721a      	strb	r2, [r3, #8]
   13484:	2340      	movs	r3, #64	; 0x40
   13486:	18fb      	adds	r3, r7, r3
   13488:	2200      	movs	r2, #0
   1348a:	725a      	strb	r2, [r3, #9]
   1348c:	2340      	movs	r3, #64	; 0x40
   1348e:	18fb      	adds	r3, r7, r3
   13490:	0019      	movs	r1, r3
   13492:	2004      	movs	r0, #4
   13494:	4b53      	ldr	r3, [pc, #332]	; (135e4 <system_clock_init+0x344>)
   13496:	4798      	blx	r3
   13498:	2004      	movs	r0, #4
   1349a:	4b53      	ldr	r3, [pc, #332]	; (135e8 <system_clock_init+0x348>)
   1349c:	4798      	blx	r3
   1349e:	2334      	movs	r3, #52	; 0x34
   134a0:	18fb      	adds	r3, r7, r3
   134a2:	0018      	movs	r0, r3
   134a4:	4b4e      	ldr	r3, [pc, #312]	; (135e0 <system_clock_init+0x340>)
   134a6:	4798      	blx	r3
   134a8:	2334      	movs	r3, #52	; 0x34
   134aa:	18fb      	adds	r3, r7, r3
   134ac:	2207      	movs	r2, #7
   134ae:	701a      	strb	r2, [r3, #0]
   134b0:	2334      	movs	r3, #52	; 0x34
   134b2:	18fb      	adds	r3, r7, r3
   134b4:	2201      	movs	r2, #1
   134b6:	605a      	str	r2, [r3, #4]
   134b8:	2334      	movs	r3, #52	; 0x34
   134ba:	18fb      	adds	r3, r7, r3
   134bc:	2200      	movs	r2, #0
   134be:	721a      	strb	r2, [r3, #8]
   134c0:	2334      	movs	r3, #52	; 0x34
   134c2:	18fb      	adds	r3, r7, r3
   134c4:	2200      	movs	r2, #0
   134c6:	725a      	strb	r2, [r3, #9]
   134c8:	2334      	movs	r3, #52	; 0x34
   134ca:	18fb      	adds	r3, r7, r3
   134cc:	0019      	movs	r1, r3
   134ce:	2005      	movs	r0, #5
   134d0:	4b44      	ldr	r3, [pc, #272]	; (135e4 <system_clock_init+0x344>)
   134d2:	4798      	blx	r3
   134d4:	2005      	movs	r0, #5
   134d6:	4b44      	ldr	r3, [pc, #272]	; (135e8 <system_clock_init+0x348>)
   134d8:	4798      	blx	r3
   134da:	2328      	movs	r3, #40	; 0x28
   134dc:	18fb      	adds	r3, r7, r3
   134de:	0018      	movs	r0, r3
   134e0:	4b3f      	ldr	r3, [pc, #252]	; (135e0 <system_clock_init+0x340>)
   134e2:	4798      	blx	r3
   134e4:	2328      	movs	r3, #40	; 0x28
   134e6:	18fb      	adds	r3, r7, r3
   134e8:	2206      	movs	r2, #6
   134ea:	701a      	strb	r2, [r3, #0]
   134ec:	2328      	movs	r3, #40	; 0x28
   134ee:	18fb      	adds	r3, r7, r3
   134f0:	2201      	movs	r2, #1
   134f2:	605a      	str	r2, [r3, #4]
   134f4:	2328      	movs	r3, #40	; 0x28
   134f6:	18fb      	adds	r3, r7, r3
   134f8:	2201      	movs	r2, #1
   134fa:	721a      	strb	r2, [r3, #8]
   134fc:	2328      	movs	r3, #40	; 0x28
   134fe:	18fb      	adds	r3, r7, r3
   13500:	2200      	movs	r2, #0
   13502:	725a      	strb	r2, [r3, #9]
   13504:	2328      	movs	r3, #40	; 0x28
   13506:	18fb      	adds	r3, r7, r3
   13508:	0019      	movs	r1, r3
   1350a:	2006      	movs	r0, #6
   1350c:	4b35      	ldr	r3, [pc, #212]	; (135e4 <system_clock_init+0x344>)
   1350e:	4798      	blx	r3
   13510:	2006      	movs	r0, #6
   13512:	4b35      	ldr	r3, [pc, #212]	; (135e8 <system_clock_init+0x348>)
   13514:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   13516:	230c      	movs	r3, #12
   13518:	18fb      	adds	r3, r7, r3
   1351a:	0018      	movs	r0, r3
   1351c:	4b33      	ldr	r3, [pc, #204]	; (135ec <system_clock_init+0x34c>)
   1351e:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   13520:	230c      	movs	r3, #12
   13522:	18fb      	adds	r3, r7, r3
   13524:	2201      	movs	r2, #1
   13526:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   13528:	230c      	movs	r3, #12
   1352a:	18fb      	adds	r3, r7, r3
   1352c:	0019      	movs	r1, r3
   1352e:	2000      	movs	r0, #0
   13530:	4b2f      	ldr	r3, [pc, #188]	; (135f0 <system_clock_init+0x350>)
   13532:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   13534:	2000      	movs	r0, #0
   13536:	4b2f      	ldr	r3, [pc, #188]	; (135f4 <system_clock_init+0x354>)
   13538:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   1353a:	2007      	movs	r0, #7
   1353c:	4b20      	ldr	r3, [pc, #128]	; (135c0 <system_clock_init+0x320>)
   1353e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   13540:	46c0      	nop			; (mov r8, r8)
   13542:	2007      	movs	r0, #7
   13544:	4b1f      	ldr	r3, [pc, #124]	; (135c4 <system_clock_init+0x324>)
   13546:	4798      	blx	r3
   13548:	0003      	movs	r3, r0
   1354a:	001a      	movs	r2, r3
   1354c:	2301      	movs	r3, #1
   1354e:	4053      	eors	r3, r2
   13550:	b2db      	uxtb	r3, r3
   13552:	2b00      	cmp	r3, #0
   13554:	d1f5      	bne.n	13542 <system_clock_init+0x2a2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   13556:	2000      	movs	r0, #0
   13558:	4b27      	ldr	r3, [pc, #156]	; (135f8 <system_clock_init+0x358>)
   1355a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   1355c:	2100      	movs	r1, #0
   1355e:	2000      	movs	r0, #0
   13560:	4b26      	ldr	r3, [pc, #152]	; (135fc <system_clock_init+0x35c>)
   13562:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   13564:	2100      	movs	r1, #0
   13566:	2001      	movs	r0, #1
   13568:	4b24      	ldr	r3, [pc, #144]	; (135fc <system_clock_init+0x35c>)
   1356a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   1356c:	2100      	movs	r1, #0
   1356e:	2002      	movs	r0, #2
   13570:	4b22      	ldr	r3, [pc, #136]	; (135fc <system_clock_init+0x35c>)
   13572:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   13574:	003b      	movs	r3, r7
   13576:	0018      	movs	r0, r3
   13578:	4b19      	ldr	r3, [pc, #100]	; (135e0 <system_clock_init+0x340>)
   1357a:	4798      	blx	r3
   1357c:	003b      	movs	r3, r7
   1357e:	2207      	movs	r2, #7
   13580:	701a      	strb	r2, [r3, #0]
   13582:	003b      	movs	r3, r7
   13584:	2201      	movs	r2, #1
   13586:	605a      	str	r2, [r3, #4]
   13588:	003b      	movs	r3, r7
   1358a:	2200      	movs	r2, #0
   1358c:	721a      	strb	r2, [r3, #8]
   1358e:	003b      	movs	r3, r7
   13590:	2200      	movs	r2, #0
   13592:	725a      	strb	r2, [r3, #9]
   13594:	003b      	movs	r3, r7
   13596:	0019      	movs	r1, r3
   13598:	2000      	movs	r0, #0
   1359a:	4b12      	ldr	r3, [pc, #72]	; (135e4 <system_clock_init+0x344>)
   1359c:	4798      	blx	r3
   1359e:	2000      	movs	r0, #0
   135a0:	4b11      	ldr	r3, [pc, #68]	; (135e8 <system_clock_init+0x348>)
   135a2:	4798      	blx	r3
#endif
}
   135a4:	46c0      	nop			; (mov r8, r8)
   135a6:	46bd      	mov	sp, r7
   135a8:	b02a      	add	sp, #168	; 0xa8
   135aa:	bd80      	pop	{r7, pc}
   135ac:	40000800 	.word	0x40000800
   135b0:	00012d7d 	.word	0x00012d7d
   135b4:	00013269 	.word	0x00013269
   135b8:	00012c4d 	.word	0x00012c4d
   135bc:	00012f49 	.word	0x00012f49
   135c0:	00013139 	.word	0x00013139
   135c4:	000131e5 	.word	0x000131e5
   135c8:	00012cb7 	.word	0x00012cb7
   135cc:	00806024 	.word	0x00806024
   135d0:	00013069 	.word	0x00013069
   135d4:	00012c95 	.word	0x00012c95
   135d8:	00012ed1 	.word	0x00012ed1
   135dc:	000136a5 	.word	0x000136a5
   135e0:	00012c09 	.word	0x00012c09
   135e4:	000136d5 	.word	0x000136d5
   135e8:	000137f9 	.word	0x000137f9
   135ec:	00012c37 	.word	0x00012c37
   135f0:	0001392d 	.word	0x0001392d
   135f4:	00013971 	.word	0x00013971
   135f8:	00012d09 	.word	0x00012d09
   135fc:	00012d29 	.word	0x00012d29

00013600 <system_apb_clock_set_mask>:
{
   13600:	b580      	push	{r7, lr}
   13602:	b082      	sub	sp, #8
   13604:	af00      	add	r7, sp, #0
   13606:	0002      	movs	r2, r0
   13608:	6039      	str	r1, [r7, #0]
   1360a:	1dfb      	adds	r3, r7, #7
   1360c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1360e:	1dfb      	adds	r3, r7, #7
   13610:	781b      	ldrb	r3, [r3, #0]
   13612:	2b01      	cmp	r3, #1
   13614:	d00a      	beq.n	1362c <system_apb_clock_set_mask+0x2c>
   13616:	2b02      	cmp	r3, #2
   13618:	d00f      	beq.n	1363a <system_apb_clock_set_mask+0x3a>
   1361a:	2b00      	cmp	r3, #0
   1361c:	d114      	bne.n	13648 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1361e:	4b0e      	ldr	r3, [pc, #56]	; (13658 <system_apb_clock_set_mask+0x58>)
   13620:	4a0d      	ldr	r2, [pc, #52]	; (13658 <system_apb_clock_set_mask+0x58>)
   13622:	6991      	ldr	r1, [r2, #24]
   13624:	683a      	ldr	r2, [r7, #0]
   13626:	430a      	orrs	r2, r1
   13628:	619a      	str	r2, [r3, #24]
			break;
   1362a:	e00f      	b.n	1364c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1362c:	4b0a      	ldr	r3, [pc, #40]	; (13658 <system_apb_clock_set_mask+0x58>)
   1362e:	4a0a      	ldr	r2, [pc, #40]	; (13658 <system_apb_clock_set_mask+0x58>)
   13630:	69d1      	ldr	r1, [r2, #28]
   13632:	683a      	ldr	r2, [r7, #0]
   13634:	430a      	orrs	r2, r1
   13636:	61da      	str	r2, [r3, #28]
			break;
   13638:	e008      	b.n	1364c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1363a:	4b07      	ldr	r3, [pc, #28]	; (13658 <system_apb_clock_set_mask+0x58>)
   1363c:	4a06      	ldr	r2, [pc, #24]	; (13658 <system_apb_clock_set_mask+0x58>)
   1363e:	6a11      	ldr	r1, [r2, #32]
   13640:	683a      	ldr	r2, [r7, #0]
   13642:	430a      	orrs	r2, r1
   13644:	621a      	str	r2, [r3, #32]
			break;
   13646:	e001      	b.n	1364c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   13648:	2317      	movs	r3, #23
   1364a:	e000      	b.n	1364e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1364c:	2300      	movs	r3, #0
}
   1364e:	0018      	movs	r0, r3
   13650:	46bd      	mov	sp, r7
   13652:	b002      	add	sp, #8
   13654:	bd80      	pop	{r7, pc}
   13656:	46c0      	nop			; (mov r8, r8)
   13658:	40000400 	.word	0x40000400

0001365c <system_interrupt_enter_critical_section>:
{
   1365c:	b580      	push	{r7, lr}
   1365e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   13660:	4b02      	ldr	r3, [pc, #8]	; (1366c <system_interrupt_enter_critical_section+0x10>)
   13662:	4798      	blx	r3
}
   13664:	46c0      	nop			; (mov r8, r8)
   13666:	46bd      	mov	sp, r7
   13668:	bd80      	pop	{r7, pc}
   1366a:	46c0      	nop			; (mov r8, r8)
   1366c:	00012b75 	.word	0x00012b75

00013670 <system_interrupt_leave_critical_section>:
{
   13670:	b580      	push	{r7, lr}
   13672:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13674:	4b02      	ldr	r3, [pc, #8]	; (13680 <system_interrupt_leave_critical_section+0x10>)
   13676:	4798      	blx	r3
}
   13678:	46c0      	nop			; (mov r8, r8)
   1367a:	46bd      	mov	sp, r7
   1367c:	bd80      	pop	{r7, pc}
   1367e:	46c0      	nop			; (mov r8, r8)
   13680:	00012bc9 	.word	0x00012bc9

00013684 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   13684:	b580      	push	{r7, lr}
   13686:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   13688:	4b05      	ldr	r3, [pc, #20]	; (136a0 <system_gclk_is_syncing+0x1c>)
   1368a:	785b      	ldrb	r3, [r3, #1]
   1368c:	b2db      	uxtb	r3, r3
   1368e:	b25b      	sxtb	r3, r3
   13690:	2b00      	cmp	r3, #0
   13692:	da01      	bge.n	13698 <system_gclk_is_syncing+0x14>
		return true;
   13694:	2301      	movs	r3, #1
   13696:	e000      	b.n	1369a <system_gclk_is_syncing+0x16>
	}

	return false;
   13698:	2300      	movs	r3, #0
}
   1369a:	0018      	movs	r0, r3
   1369c:	46bd      	mov	sp, r7
   1369e:	bd80      	pop	{r7, pc}
   136a0:	40000c00 	.word	0x40000c00

000136a4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   136a4:	b580      	push	{r7, lr}
   136a6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   136a8:	2108      	movs	r1, #8
   136aa:	2000      	movs	r0, #0
   136ac:	4b07      	ldr	r3, [pc, #28]	; (136cc <system_gclk_init+0x28>)
   136ae:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   136b0:	4b07      	ldr	r3, [pc, #28]	; (136d0 <system_gclk_init+0x2c>)
   136b2:	2201      	movs	r2, #1
   136b4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   136b6:	46c0      	nop			; (mov r8, r8)
   136b8:	4b05      	ldr	r3, [pc, #20]	; (136d0 <system_gclk_init+0x2c>)
   136ba:	781b      	ldrb	r3, [r3, #0]
   136bc:	b2db      	uxtb	r3, r3
   136be:	001a      	movs	r2, r3
   136c0:	2301      	movs	r3, #1
   136c2:	4013      	ands	r3, r2
   136c4:	d1f8      	bne.n	136b8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   136c6:	46c0      	nop			; (mov r8, r8)
   136c8:	46bd      	mov	sp, r7
   136ca:	bd80      	pop	{r7, pc}
   136cc:	00013601 	.word	0x00013601
   136d0:	40000c00 	.word	0x40000c00

000136d4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   136d4:	b580      	push	{r7, lr}
   136d6:	b086      	sub	sp, #24
   136d8:	af00      	add	r7, sp, #0
   136da:	0002      	movs	r2, r0
   136dc:	6039      	str	r1, [r7, #0]
   136de:	1dfb      	adds	r3, r7, #7
   136e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   136e2:	1dfb      	adds	r3, r7, #7
   136e4:	781b      	ldrb	r3, [r3, #0]
   136e6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   136e8:	1dfb      	adds	r3, r7, #7
   136ea:	781b      	ldrb	r3, [r3, #0]
   136ec:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   136ee:	683b      	ldr	r3, [r7, #0]
   136f0:	781b      	ldrb	r3, [r3, #0]
   136f2:	021b      	lsls	r3, r3, #8
   136f4:	001a      	movs	r2, r3
   136f6:	697b      	ldr	r3, [r7, #20]
   136f8:	4313      	orrs	r3, r2
   136fa:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   136fc:	683b      	ldr	r3, [r7, #0]
   136fe:	785b      	ldrb	r3, [r3, #1]
   13700:	2b00      	cmp	r3, #0
   13702:	d004      	beq.n	1370e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   13704:	697b      	ldr	r3, [r7, #20]
   13706:	2280      	movs	r2, #128	; 0x80
   13708:	02d2      	lsls	r2, r2, #11
   1370a:	4313      	orrs	r3, r2
   1370c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1370e:	683b      	ldr	r3, [r7, #0]
   13710:	7a5b      	ldrb	r3, [r3, #9]
   13712:	2b00      	cmp	r3, #0
   13714:	d004      	beq.n	13720 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   13716:	697b      	ldr	r3, [r7, #20]
   13718:	2280      	movs	r2, #128	; 0x80
   1371a:	0312      	lsls	r2, r2, #12
   1371c:	4313      	orrs	r3, r2
   1371e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   13720:	683b      	ldr	r3, [r7, #0]
   13722:	685b      	ldr	r3, [r3, #4]
   13724:	2b01      	cmp	r3, #1
   13726:	d92c      	bls.n	13782 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   13728:	683b      	ldr	r3, [r7, #0]
   1372a:	685a      	ldr	r2, [r3, #4]
   1372c:	683b      	ldr	r3, [r7, #0]
   1372e:	685b      	ldr	r3, [r3, #4]
   13730:	3b01      	subs	r3, #1
   13732:	4013      	ands	r3, r2
   13734:	d11a      	bne.n	1376c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   13736:	2300      	movs	r3, #0
   13738:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1373a:	2302      	movs	r3, #2
   1373c:	60bb      	str	r3, [r7, #8]
   1373e:	e005      	b.n	1374c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   13740:	68fb      	ldr	r3, [r7, #12]
   13742:	3301      	adds	r3, #1
   13744:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   13746:	68bb      	ldr	r3, [r7, #8]
   13748:	005b      	lsls	r3, r3, #1
   1374a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   1374c:	683b      	ldr	r3, [r7, #0]
   1374e:	685a      	ldr	r2, [r3, #4]
   13750:	68bb      	ldr	r3, [r7, #8]
   13752:	429a      	cmp	r2, r3
   13754:	d8f4      	bhi.n	13740 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   13756:	68fb      	ldr	r3, [r7, #12]
   13758:	021b      	lsls	r3, r3, #8
   1375a:	693a      	ldr	r2, [r7, #16]
   1375c:	4313      	orrs	r3, r2
   1375e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2280      	movs	r2, #128	; 0x80
   13764:	0352      	lsls	r2, r2, #13
   13766:	4313      	orrs	r3, r2
   13768:	617b      	str	r3, [r7, #20]
   1376a:	e00a      	b.n	13782 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1376c:	683b      	ldr	r3, [r7, #0]
   1376e:	685b      	ldr	r3, [r3, #4]
   13770:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   13772:	693a      	ldr	r2, [r7, #16]
   13774:	4313      	orrs	r3, r2
   13776:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   13778:	697b      	ldr	r3, [r7, #20]
   1377a:	2280      	movs	r2, #128	; 0x80
   1377c:	0292      	lsls	r2, r2, #10
   1377e:	4313      	orrs	r3, r2
   13780:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   13782:	683b      	ldr	r3, [r7, #0]
   13784:	7a1b      	ldrb	r3, [r3, #8]
   13786:	2b00      	cmp	r3, #0
   13788:	d004      	beq.n	13794 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2280      	movs	r2, #128	; 0x80
   1378e:	0392      	lsls	r2, r2, #14
   13790:	4313      	orrs	r3, r2
   13792:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   13794:	46c0      	nop			; (mov r8, r8)
   13796:	4b13      	ldr	r3, [pc, #76]	; (137e4 <system_gclk_gen_set_config+0x110>)
   13798:	4798      	blx	r3
   1379a:	1e03      	subs	r3, r0, #0
   1379c:	d1fb      	bne.n	13796 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1379e:	4b12      	ldr	r3, [pc, #72]	; (137e8 <system_gclk_gen_set_config+0x114>)
   137a0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   137a2:	4a12      	ldr	r2, [pc, #72]	; (137ec <system_gclk_gen_set_config+0x118>)
   137a4:	1dfb      	adds	r3, r7, #7
   137a6:	781b      	ldrb	r3, [r3, #0]
   137a8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   137aa:	46c0      	nop			; (mov r8, r8)
   137ac:	4b0d      	ldr	r3, [pc, #52]	; (137e4 <system_gclk_gen_set_config+0x110>)
   137ae:	4798      	blx	r3
   137b0:	1e03      	subs	r3, r0, #0
   137b2:	d1fb      	bne.n	137ac <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   137b4:	4b0e      	ldr	r3, [pc, #56]	; (137f0 <system_gclk_gen_set_config+0x11c>)
   137b6:	693a      	ldr	r2, [r7, #16]
   137b8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   137ba:	46c0      	nop			; (mov r8, r8)
   137bc:	4b09      	ldr	r3, [pc, #36]	; (137e4 <system_gclk_gen_set_config+0x110>)
   137be:	4798      	blx	r3
   137c0:	1e03      	subs	r3, r0, #0
   137c2:	d1fb      	bne.n	137bc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   137c4:	4b0a      	ldr	r3, [pc, #40]	; (137f0 <system_gclk_gen_set_config+0x11c>)
   137c6:	4a0a      	ldr	r2, [pc, #40]	; (137f0 <system_gclk_gen_set_config+0x11c>)
   137c8:	6851      	ldr	r1, [r2, #4]
   137ca:	2280      	movs	r2, #128	; 0x80
   137cc:	0252      	lsls	r2, r2, #9
   137ce:	4011      	ands	r1, r2
   137d0:	697a      	ldr	r2, [r7, #20]
   137d2:	430a      	orrs	r2, r1
   137d4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   137d6:	4b07      	ldr	r3, [pc, #28]	; (137f4 <system_gclk_gen_set_config+0x120>)
   137d8:	4798      	blx	r3
}
   137da:	46c0      	nop			; (mov r8, r8)
   137dc:	46bd      	mov	sp, r7
   137de:	b006      	add	sp, #24
   137e0:	bd80      	pop	{r7, pc}
   137e2:	46c0      	nop			; (mov r8, r8)
   137e4:	00013685 	.word	0x00013685
   137e8:	0001365d 	.word	0x0001365d
   137ec:	40000c08 	.word	0x40000c08
   137f0:	40000c00 	.word	0x40000c00
   137f4:	00013671 	.word	0x00013671

000137f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   137f8:	b580      	push	{r7, lr}
   137fa:	b082      	sub	sp, #8
   137fc:	af00      	add	r7, sp, #0
   137fe:	0002      	movs	r2, r0
   13800:	1dfb      	adds	r3, r7, #7
   13802:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13804:	46c0      	nop			; (mov r8, r8)
   13806:	4b0e      	ldr	r3, [pc, #56]	; (13840 <system_gclk_gen_enable+0x48>)
   13808:	4798      	blx	r3
   1380a:	1e03      	subs	r3, r0, #0
   1380c:	d1fb      	bne.n	13806 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1380e:	4b0d      	ldr	r3, [pc, #52]	; (13844 <system_gclk_gen_enable+0x4c>)
   13810:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13812:	4a0d      	ldr	r2, [pc, #52]	; (13848 <system_gclk_gen_enable+0x50>)
   13814:	1dfb      	adds	r3, r7, #7
   13816:	781b      	ldrb	r3, [r3, #0]
   13818:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1381a:	46c0      	nop			; (mov r8, r8)
   1381c:	4b08      	ldr	r3, [pc, #32]	; (13840 <system_gclk_gen_enable+0x48>)
   1381e:	4798      	blx	r3
   13820:	1e03      	subs	r3, r0, #0
   13822:	d1fb      	bne.n	1381c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   13824:	4b09      	ldr	r3, [pc, #36]	; (1384c <system_gclk_gen_enable+0x54>)
   13826:	4a09      	ldr	r2, [pc, #36]	; (1384c <system_gclk_gen_enable+0x54>)
   13828:	6852      	ldr	r2, [r2, #4]
   1382a:	2180      	movs	r1, #128	; 0x80
   1382c:	0249      	lsls	r1, r1, #9
   1382e:	430a      	orrs	r2, r1
   13830:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   13832:	4b07      	ldr	r3, [pc, #28]	; (13850 <system_gclk_gen_enable+0x58>)
   13834:	4798      	blx	r3
}
   13836:	46c0      	nop			; (mov r8, r8)
   13838:	46bd      	mov	sp, r7
   1383a:	b002      	add	sp, #8
   1383c:	bd80      	pop	{r7, pc}
   1383e:	46c0      	nop			; (mov r8, r8)
   13840:	00013685 	.word	0x00013685
   13844:	0001365d 	.word	0x0001365d
   13848:	40000c04 	.word	0x40000c04
   1384c:	40000c00 	.word	0x40000c00
   13850:	00013671 	.word	0x00013671

00013854 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   13854:	b580      	push	{r7, lr}
   13856:	b086      	sub	sp, #24
   13858:	af00      	add	r7, sp, #0
   1385a:	0002      	movs	r2, r0
   1385c:	1dfb      	adds	r3, r7, #7
   1385e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   13860:	46c0      	nop			; (mov r8, r8)
   13862:	4b2a      	ldr	r3, [pc, #168]	; (1390c <system_gclk_gen_get_hz+0xb8>)
   13864:	4798      	blx	r3
   13866:	1e03      	subs	r3, r0, #0
   13868:	d1fb      	bne.n	13862 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1386a:	4b29      	ldr	r3, [pc, #164]	; (13910 <system_gclk_gen_get_hz+0xbc>)
   1386c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1386e:	4a29      	ldr	r2, [pc, #164]	; (13914 <system_gclk_gen_get_hz+0xc0>)
   13870:	1dfb      	adds	r3, r7, #7
   13872:	781b      	ldrb	r3, [r3, #0]
   13874:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   13876:	46c0      	nop			; (mov r8, r8)
   13878:	4b24      	ldr	r3, [pc, #144]	; (1390c <system_gclk_gen_get_hz+0xb8>)
   1387a:	4798      	blx	r3
   1387c:	1e03      	subs	r3, r0, #0
   1387e:	d1fb      	bne.n	13878 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   13880:	4b25      	ldr	r3, [pc, #148]	; (13918 <system_gclk_gen_get_hz+0xc4>)
   13882:	685b      	ldr	r3, [r3, #4]
   13884:	04db      	lsls	r3, r3, #19
   13886:	0edb      	lsrs	r3, r3, #27
   13888:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1388a:	0018      	movs	r0, r3
   1388c:	4b23      	ldr	r3, [pc, #140]	; (1391c <system_gclk_gen_get_hz+0xc8>)
   1388e:	4798      	blx	r3
   13890:	0003      	movs	r3, r0
   13892:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   13894:	4a1f      	ldr	r2, [pc, #124]	; (13914 <system_gclk_gen_get_hz+0xc0>)
   13896:	1dfb      	adds	r3, r7, #7
   13898:	781b      	ldrb	r3, [r3, #0]
   1389a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1389c:	4b1e      	ldr	r3, [pc, #120]	; (13918 <system_gclk_gen_get_hz+0xc4>)
   1389e:	685b      	ldr	r3, [r3, #4]
   138a0:	02db      	lsls	r3, r3, #11
   138a2:	0fdb      	lsrs	r3, r3, #31
   138a4:	b2da      	uxtb	r2, r3
   138a6:	2313      	movs	r3, #19
   138a8:	18fb      	adds	r3, r7, r3
   138aa:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   138ac:	4a1c      	ldr	r2, [pc, #112]	; (13920 <system_gclk_gen_get_hz+0xcc>)
   138ae:	1dfb      	adds	r3, r7, #7
   138b0:	781b      	ldrb	r3, [r3, #0]
   138b2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   138b4:	46c0      	nop			; (mov r8, r8)
   138b6:	4b15      	ldr	r3, [pc, #84]	; (1390c <system_gclk_gen_get_hz+0xb8>)
   138b8:	4798      	blx	r3
   138ba:	1e03      	subs	r3, r0, #0
   138bc:	d1fb      	bne.n	138b6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   138be:	4b16      	ldr	r3, [pc, #88]	; (13918 <system_gclk_gen_get_hz+0xc4>)
   138c0:	689b      	ldr	r3, [r3, #8]
   138c2:	021b      	lsls	r3, r3, #8
   138c4:	0c1b      	lsrs	r3, r3, #16
   138c6:	b29b      	uxth	r3, r3
   138c8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   138ca:	4b16      	ldr	r3, [pc, #88]	; (13924 <system_gclk_gen_get_hz+0xd0>)
   138cc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   138ce:	2313      	movs	r3, #19
   138d0:	18fb      	adds	r3, r7, r3
   138d2:	781b      	ldrb	r3, [r3, #0]
   138d4:	2b00      	cmp	r3, #0
   138d6:	d109      	bne.n	138ec <system_gclk_gen_get_hz+0x98>
   138d8:	68fb      	ldr	r3, [r7, #12]
   138da:	2b01      	cmp	r3, #1
   138dc:	d906      	bls.n	138ec <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   138de:	4b12      	ldr	r3, [pc, #72]	; (13928 <system_gclk_gen_get_hz+0xd4>)
   138e0:	68f9      	ldr	r1, [r7, #12]
   138e2:	6978      	ldr	r0, [r7, #20]
   138e4:	4798      	blx	r3
   138e6:	0003      	movs	r3, r0
   138e8:	617b      	str	r3, [r7, #20]
   138ea:	e00a      	b.n	13902 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   138ec:	2313      	movs	r3, #19
   138ee:	18fb      	adds	r3, r7, r3
   138f0:	781b      	ldrb	r3, [r3, #0]
   138f2:	2b00      	cmp	r3, #0
   138f4:	d005      	beq.n	13902 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   138f6:	68fb      	ldr	r3, [r7, #12]
   138f8:	3301      	adds	r3, #1
   138fa:	697a      	ldr	r2, [r7, #20]
   138fc:	40da      	lsrs	r2, r3
   138fe:	0013      	movs	r3, r2
   13900:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   13902:	697b      	ldr	r3, [r7, #20]
}
   13904:	0018      	movs	r0, r3
   13906:	46bd      	mov	sp, r7
   13908:	b006      	add	sp, #24
   1390a:	bd80      	pop	{r7, pc}
   1390c:	00013685 	.word	0x00013685
   13910:	0001365d 	.word	0x0001365d
   13914:	40000c04 	.word	0x40000c04
   13918:	40000c00 	.word	0x40000c00
   1391c:	00012e11 	.word	0x00012e11
   13920:	40000c08 	.word	0x40000c08
   13924:	00013671 	.word	0x00013671
   13928:	00015461 	.word	0x00015461

0001392c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   1392c:	b580      	push	{r7, lr}
   1392e:	b084      	sub	sp, #16
   13930:	af00      	add	r7, sp, #0
   13932:	0002      	movs	r2, r0
   13934:	6039      	str	r1, [r7, #0]
   13936:	1dfb      	adds	r3, r7, #7
   13938:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   1393a:	1dfb      	adds	r3, r7, #7
   1393c:	781b      	ldrb	r3, [r3, #0]
   1393e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   13940:	683b      	ldr	r3, [r7, #0]
   13942:	781b      	ldrb	r3, [r3, #0]
   13944:	021b      	lsls	r3, r3, #8
   13946:	001a      	movs	r2, r3
   13948:	68fb      	ldr	r3, [r7, #12]
   1394a:	4313      	orrs	r3, r2
   1394c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   1394e:	1dfb      	adds	r3, r7, #7
   13950:	781b      	ldrb	r3, [r3, #0]
   13952:	0018      	movs	r0, r3
   13954:	4b04      	ldr	r3, [pc, #16]	; (13968 <system_gclk_chan_set_config+0x3c>)
   13956:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   13958:	4b04      	ldr	r3, [pc, #16]	; (1396c <system_gclk_chan_set_config+0x40>)
   1395a:	68fa      	ldr	r2, [r7, #12]
   1395c:	b292      	uxth	r2, r2
   1395e:	805a      	strh	r2, [r3, #2]
}
   13960:	46c0      	nop			; (mov r8, r8)
   13962:	46bd      	mov	sp, r7
   13964:	b004      	add	sp, #16
   13966:	bd80      	pop	{r7, pc}
   13968:	000139b9 	.word	0x000139b9
   1396c:	40000c00 	.word	0x40000c00

00013970 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   13970:	b580      	push	{r7, lr}
   13972:	b082      	sub	sp, #8
   13974:	af00      	add	r7, sp, #0
   13976:	0002      	movs	r2, r0
   13978:	1dfb      	adds	r3, r7, #7
   1397a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   1397c:	4b0a      	ldr	r3, [pc, #40]	; (139a8 <system_gclk_chan_enable+0x38>)
   1397e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13980:	4a0a      	ldr	r2, [pc, #40]	; (139ac <system_gclk_chan_enable+0x3c>)
   13982:	1dfb      	adds	r3, r7, #7
   13984:	781b      	ldrb	r3, [r3, #0]
   13986:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   13988:	4909      	ldr	r1, [pc, #36]	; (139b0 <system_gclk_chan_enable+0x40>)
   1398a:	4b09      	ldr	r3, [pc, #36]	; (139b0 <system_gclk_chan_enable+0x40>)
   1398c:	885b      	ldrh	r3, [r3, #2]
   1398e:	b29b      	uxth	r3, r3
   13990:	2280      	movs	r2, #128	; 0x80
   13992:	01d2      	lsls	r2, r2, #7
   13994:	4313      	orrs	r3, r2
   13996:	b29b      	uxth	r3, r3
   13998:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   1399a:	4b06      	ldr	r3, [pc, #24]	; (139b4 <system_gclk_chan_enable+0x44>)
   1399c:	4798      	blx	r3
}
   1399e:	46c0      	nop			; (mov r8, r8)
   139a0:	46bd      	mov	sp, r7
   139a2:	b002      	add	sp, #8
   139a4:	bd80      	pop	{r7, pc}
   139a6:	46c0      	nop			; (mov r8, r8)
   139a8:	0001365d 	.word	0x0001365d
   139ac:	40000c02 	.word	0x40000c02
   139b0:	40000c00 	.word	0x40000c00
   139b4:	00013671 	.word	0x00013671

000139b8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   139b8:	b580      	push	{r7, lr}
   139ba:	b084      	sub	sp, #16
   139bc:	af00      	add	r7, sp, #0
   139be:	0002      	movs	r2, r0
   139c0:	1dfb      	adds	r3, r7, #7
   139c2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   139c4:	4b1c      	ldr	r3, [pc, #112]	; (13a38 <system_gclk_chan_disable+0x80>)
   139c6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   139c8:	4a1c      	ldr	r2, [pc, #112]	; (13a3c <system_gclk_chan_disable+0x84>)
   139ca:	1dfb      	adds	r3, r7, #7
   139cc:	781b      	ldrb	r3, [r3, #0]
   139ce:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   139d0:	4b1b      	ldr	r3, [pc, #108]	; (13a40 <system_gclk_chan_disable+0x88>)
   139d2:	885b      	ldrh	r3, [r3, #2]
   139d4:	051b      	lsls	r3, r3, #20
   139d6:	0f1b      	lsrs	r3, r3, #28
   139d8:	b2db      	uxtb	r3, r3
   139da:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   139dc:	4a18      	ldr	r2, [pc, #96]	; (13a40 <system_gclk_chan_disable+0x88>)
   139de:	8853      	ldrh	r3, [r2, #2]
   139e0:	4918      	ldr	r1, [pc, #96]	; (13a44 <system_gclk_chan_disable+0x8c>)
   139e2:	400b      	ands	r3, r1
   139e4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   139e6:	4a16      	ldr	r2, [pc, #88]	; (13a40 <system_gclk_chan_disable+0x88>)
   139e8:	4b15      	ldr	r3, [pc, #84]	; (13a40 <system_gclk_chan_disable+0x88>)
   139ea:	885b      	ldrh	r3, [r3, #2]
   139ec:	b29b      	uxth	r3, r3
   139ee:	4916      	ldr	r1, [pc, #88]	; (13a48 <system_gclk_chan_disable+0x90>)
   139f0:	400b      	ands	r3, r1
   139f2:	b29b      	uxth	r3, r3
   139f4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   139f6:	46c0      	nop			; (mov r8, r8)
   139f8:	4b11      	ldr	r3, [pc, #68]	; (13a40 <system_gclk_chan_disable+0x88>)
   139fa:	885b      	ldrh	r3, [r3, #2]
   139fc:	b29b      	uxth	r3, r3
   139fe:	001a      	movs	r2, r3
   13a00:	2380      	movs	r3, #128	; 0x80
   13a02:	01db      	lsls	r3, r3, #7
   13a04:	4013      	ands	r3, r2
   13a06:	d1f7      	bne.n	139f8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   13a08:	4a0d      	ldr	r2, [pc, #52]	; (13a40 <system_gclk_chan_disable+0x88>)
   13a0a:	68fb      	ldr	r3, [r7, #12]
   13a0c:	b2db      	uxtb	r3, r3
   13a0e:	1c19      	adds	r1, r3, #0
   13a10:	230f      	movs	r3, #15
   13a12:	400b      	ands	r3, r1
   13a14:	b2d9      	uxtb	r1, r3
   13a16:	8853      	ldrh	r3, [r2, #2]
   13a18:	1c08      	adds	r0, r1, #0
   13a1a:	210f      	movs	r1, #15
   13a1c:	4001      	ands	r1, r0
   13a1e:	0208      	lsls	r0, r1, #8
   13a20:	4908      	ldr	r1, [pc, #32]	; (13a44 <system_gclk_chan_disable+0x8c>)
   13a22:	400b      	ands	r3, r1
   13a24:	1c19      	adds	r1, r3, #0
   13a26:	1c03      	adds	r3, r0, #0
   13a28:	430b      	orrs	r3, r1
   13a2a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   13a2c:	4b07      	ldr	r3, [pc, #28]	; (13a4c <system_gclk_chan_disable+0x94>)
   13a2e:	4798      	blx	r3
}
   13a30:	46c0      	nop			; (mov r8, r8)
   13a32:	46bd      	mov	sp, r7
   13a34:	b004      	add	sp, #16
   13a36:	bd80      	pop	{r7, pc}
   13a38:	0001365d 	.word	0x0001365d
   13a3c:	40000c02 	.word	0x40000c02
   13a40:	40000c00 	.word	0x40000c00
   13a44:	fffff0ff 	.word	0xfffff0ff
   13a48:	ffffbfff 	.word	0xffffbfff
   13a4c:	00013671 	.word	0x00013671

00013a50 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   13a50:	b580      	push	{r7, lr}
   13a52:	b084      	sub	sp, #16
   13a54:	af00      	add	r7, sp, #0
   13a56:	0002      	movs	r2, r0
   13a58:	1dfb      	adds	r3, r7, #7
   13a5a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   13a5c:	4b0d      	ldr	r3, [pc, #52]	; (13a94 <system_gclk_chan_get_hz+0x44>)
   13a5e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   13a60:	4a0d      	ldr	r2, [pc, #52]	; (13a98 <system_gclk_chan_get_hz+0x48>)
   13a62:	1dfb      	adds	r3, r7, #7
   13a64:	781b      	ldrb	r3, [r3, #0]
   13a66:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   13a68:	4b0c      	ldr	r3, [pc, #48]	; (13a9c <system_gclk_chan_get_hz+0x4c>)
   13a6a:	885b      	ldrh	r3, [r3, #2]
   13a6c:	051b      	lsls	r3, r3, #20
   13a6e:	0f1b      	lsrs	r3, r3, #28
   13a70:	b2da      	uxtb	r2, r3
   13a72:	230f      	movs	r3, #15
   13a74:	18fb      	adds	r3, r7, r3
   13a76:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   13a78:	4b09      	ldr	r3, [pc, #36]	; (13aa0 <system_gclk_chan_get_hz+0x50>)
   13a7a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   13a7c:	230f      	movs	r3, #15
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	781b      	ldrb	r3, [r3, #0]
   13a82:	0018      	movs	r0, r3
   13a84:	4b07      	ldr	r3, [pc, #28]	; (13aa4 <system_gclk_chan_get_hz+0x54>)
   13a86:	4798      	blx	r3
   13a88:	0003      	movs	r3, r0
}
   13a8a:	0018      	movs	r0, r3
   13a8c:	46bd      	mov	sp, r7
   13a8e:	b004      	add	sp, #16
   13a90:	bd80      	pop	{r7, pc}
   13a92:	46c0      	nop			; (mov r8, r8)
   13a94:	0001365d 	.word	0x0001365d
   13a98:	40000c02 	.word	0x40000c02
   13a9c:	40000c00 	.word	0x40000c00
   13aa0:	00013671 	.word	0x00013671
   13aa4:	00013855 	.word	0x00013855

00013aa8 <system_pinmux_get_group_from_gpio_pin>:
{
   13aa8:	b580      	push	{r7, lr}
   13aaa:	b084      	sub	sp, #16
   13aac:	af00      	add	r7, sp, #0
   13aae:	0002      	movs	r2, r0
   13ab0:	1dfb      	adds	r3, r7, #7
   13ab2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13ab4:	230f      	movs	r3, #15
   13ab6:	18fb      	adds	r3, r7, r3
   13ab8:	1dfa      	adds	r2, r7, #7
   13aba:	7812      	ldrb	r2, [r2, #0]
   13abc:	09d2      	lsrs	r2, r2, #7
   13abe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13ac0:	230e      	movs	r3, #14
   13ac2:	18fb      	adds	r3, r7, r3
   13ac4:	1dfa      	adds	r2, r7, #7
   13ac6:	7812      	ldrb	r2, [r2, #0]
   13ac8:	0952      	lsrs	r2, r2, #5
   13aca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13acc:	4b0d      	ldr	r3, [pc, #52]	; (13b04 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13ace:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13ad0:	230f      	movs	r3, #15
   13ad2:	18fb      	adds	r3, r7, r3
   13ad4:	781b      	ldrb	r3, [r3, #0]
   13ad6:	2b00      	cmp	r3, #0
   13ad8:	d10f      	bne.n	13afa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13ada:	230f      	movs	r3, #15
   13adc:	18fb      	adds	r3, r7, r3
   13ade:	781b      	ldrb	r3, [r3, #0]
   13ae0:	009b      	lsls	r3, r3, #2
   13ae2:	2210      	movs	r2, #16
   13ae4:	4694      	mov	ip, r2
   13ae6:	44bc      	add	ip, r7
   13ae8:	4463      	add	r3, ip
   13aea:	3b08      	subs	r3, #8
   13aec:	681a      	ldr	r2, [r3, #0]
   13aee:	230e      	movs	r3, #14
   13af0:	18fb      	adds	r3, r7, r3
   13af2:	781b      	ldrb	r3, [r3, #0]
   13af4:	01db      	lsls	r3, r3, #7
   13af6:	18d3      	adds	r3, r2, r3
   13af8:	e000      	b.n	13afc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13afa:	2300      	movs	r3, #0
}
   13afc:	0018      	movs	r0, r3
   13afe:	46bd      	mov	sp, r7
   13b00:	b004      	add	sp, #16
   13b02:	bd80      	pop	{r7, pc}
   13b04:	41004400 	.word	0x41004400

00013b08 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   13b08:	b580      	push	{r7, lr}
   13b0a:	b088      	sub	sp, #32
   13b0c:	af00      	add	r7, sp, #0
   13b0e:	60f8      	str	r0, [r7, #12]
   13b10:	60b9      	str	r1, [r7, #8]
   13b12:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   13b14:	2300      	movs	r3, #0
   13b16:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   13b18:	687b      	ldr	r3, [r7, #4]
   13b1a:	78db      	ldrb	r3, [r3, #3]
   13b1c:	2201      	movs	r2, #1
   13b1e:	4053      	eors	r3, r2
   13b20:	b2db      	uxtb	r3, r3
   13b22:	2b00      	cmp	r3, #0
   13b24:	d035      	beq.n	13b92 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   13b26:	687b      	ldr	r3, [r7, #4]
   13b28:	781b      	ldrb	r3, [r3, #0]
   13b2a:	2b80      	cmp	r3, #128	; 0x80
   13b2c:	d00b      	beq.n	13b46 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   13b2e:	69fb      	ldr	r3, [r7, #28]
   13b30:	2280      	movs	r2, #128	; 0x80
   13b32:	0252      	lsls	r2, r2, #9
   13b34:	4313      	orrs	r3, r2
   13b36:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   13b38:	687b      	ldr	r3, [r7, #4]
   13b3a:	781b      	ldrb	r3, [r3, #0]
   13b3c:	061b      	lsls	r3, r3, #24
   13b3e:	001a      	movs	r2, r3
   13b40:	69fb      	ldr	r3, [r7, #28]
   13b42:	4313      	orrs	r3, r2
   13b44:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   13b46:	687b      	ldr	r3, [r7, #4]
   13b48:	785b      	ldrb	r3, [r3, #1]
   13b4a:	2b00      	cmp	r3, #0
   13b4c:	d003      	beq.n	13b56 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13b4e:	687b      	ldr	r3, [r7, #4]
   13b50:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   13b52:	2b02      	cmp	r3, #2
   13b54:	d110      	bne.n	13b78 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   13b56:	69fb      	ldr	r3, [r7, #28]
   13b58:	2280      	movs	r2, #128	; 0x80
   13b5a:	0292      	lsls	r2, r2, #10
   13b5c:	4313      	orrs	r3, r2
   13b5e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   13b60:	687b      	ldr	r3, [r7, #4]
   13b62:	789b      	ldrb	r3, [r3, #2]
   13b64:	2b00      	cmp	r3, #0
   13b66:	d004      	beq.n	13b72 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   13b68:	69fb      	ldr	r3, [r7, #28]
   13b6a:	2280      	movs	r2, #128	; 0x80
   13b6c:	02d2      	lsls	r2, r2, #11
   13b6e:	4313      	orrs	r3, r2
   13b70:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   13b72:	68fb      	ldr	r3, [r7, #12]
   13b74:	68ba      	ldr	r2, [r7, #8]
   13b76:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13b78:	687b      	ldr	r3, [r7, #4]
   13b7a:	785b      	ldrb	r3, [r3, #1]
   13b7c:	2b01      	cmp	r3, #1
   13b7e:	d003      	beq.n	13b88 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13b80:	687b      	ldr	r3, [r7, #4]
   13b82:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13b84:	2b02      	cmp	r3, #2
   13b86:	d107      	bne.n	13b98 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   13b88:	69fb      	ldr	r3, [r7, #28]
   13b8a:	4a22      	ldr	r2, [pc, #136]	; (13c14 <_system_pinmux_config+0x10c>)
   13b8c:	4013      	ands	r3, r2
   13b8e:	61fb      	str	r3, [r7, #28]
   13b90:	e002      	b.n	13b98 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   13b92:	68fb      	ldr	r3, [r7, #12]
   13b94:	68ba      	ldr	r2, [r7, #8]
   13b96:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   13b98:	68bb      	ldr	r3, [r7, #8]
   13b9a:	041b      	lsls	r3, r3, #16
   13b9c:	0c1b      	lsrs	r3, r3, #16
   13b9e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   13ba0:	68bb      	ldr	r3, [r7, #8]
   13ba2:	0c1b      	lsrs	r3, r3, #16
   13ba4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13ba6:	69ba      	ldr	r2, [r7, #24]
   13ba8:	69fb      	ldr	r3, [r7, #28]
   13baa:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   13bac:	22a0      	movs	r2, #160	; 0xa0
   13bae:	05d2      	lsls	r2, r2, #23
   13bb0:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13bb2:	68fb      	ldr	r3, [r7, #12]
   13bb4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13bb6:	697a      	ldr	r2, [r7, #20]
   13bb8:	69fb      	ldr	r3, [r7, #28]
   13bba:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   13bbc:	22d0      	movs	r2, #208	; 0xd0
   13bbe:	0612      	lsls	r2, r2, #24
   13bc0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   13bc2:	68fb      	ldr	r3, [r7, #12]
   13bc4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   13bc6:	687b      	ldr	r3, [r7, #4]
   13bc8:	78db      	ldrb	r3, [r3, #3]
   13bca:	2201      	movs	r2, #1
   13bcc:	4053      	eors	r3, r2
   13bce:	b2db      	uxtb	r3, r3
   13bd0:	2b00      	cmp	r3, #0
   13bd2:	d01a      	beq.n	13c0a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   13bd4:	69fa      	ldr	r2, [r7, #28]
   13bd6:	2380      	movs	r3, #128	; 0x80
   13bd8:	02db      	lsls	r3, r3, #11
   13bda:	4013      	ands	r3, r2
   13bdc:	d00a      	beq.n	13bf4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   13bde:	687b      	ldr	r3, [r7, #4]
   13be0:	789b      	ldrb	r3, [r3, #2]
   13be2:	2b01      	cmp	r3, #1
   13be4:	d103      	bne.n	13bee <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   13be6:	68fb      	ldr	r3, [r7, #12]
   13be8:	68ba      	ldr	r2, [r7, #8]
   13bea:	619a      	str	r2, [r3, #24]
   13bec:	e002      	b.n	13bf4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   13bee:	68fb      	ldr	r3, [r7, #12]
   13bf0:	68ba      	ldr	r2, [r7, #8]
   13bf2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13bf4:	687b      	ldr	r3, [r7, #4]
   13bf6:	785b      	ldrb	r3, [r3, #1]
   13bf8:	2b01      	cmp	r3, #1
   13bfa:	d003      	beq.n	13c04 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   13bfc:	687b      	ldr	r3, [r7, #4]
   13bfe:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   13c00:	2b02      	cmp	r3, #2
   13c02:	d102      	bne.n	13c0a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   13c04:	68fb      	ldr	r3, [r7, #12]
   13c06:	68ba      	ldr	r2, [r7, #8]
   13c08:	609a      	str	r2, [r3, #8]
		}
	}
}
   13c0a:	46c0      	nop			; (mov r8, r8)
   13c0c:	46bd      	mov	sp, r7
   13c0e:	b008      	add	sp, #32
   13c10:	bd80      	pop	{r7, pc}
   13c12:	46c0      	nop			; (mov r8, r8)
   13c14:	fffbffff 	.word	0xfffbffff

00013c18 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   13c18:	b580      	push	{r7, lr}
   13c1a:	b084      	sub	sp, #16
   13c1c:	af00      	add	r7, sp, #0
   13c1e:	0002      	movs	r2, r0
   13c20:	6039      	str	r1, [r7, #0]
   13c22:	1dfb      	adds	r3, r7, #7
   13c24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13c26:	1dfb      	adds	r3, r7, #7
   13c28:	781b      	ldrb	r3, [r3, #0]
   13c2a:	0018      	movs	r0, r3
   13c2c:	4b0a      	ldr	r3, [pc, #40]	; (13c58 <system_pinmux_pin_set_config+0x40>)
   13c2e:	4798      	blx	r3
   13c30:	0003      	movs	r3, r0
   13c32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   13c34:	1dfb      	adds	r3, r7, #7
   13c36:	781b      	ldrb	r3, [r3, #0]
   13c38:	221f      	movs	r2, #31
   13c3a:	4013      	ands	r3, r2
   13c3c:	2201      	movs	r2, #1
   13c3e:	409a      	lsls	r2, r3
   13c40:	0013      	movs	r3, r2
   13c42:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   13c44:	683a      	ldr	r2, [r7, #0]
   13c46:	68b9      	ldr	r1, [r7, #8]
   13c48:	68fb      	ldr	r3, [r7, #12]
   13c4a:	0018      	movs	r0, r3
   13c4c:	4b03      	ldr	r3, [pc, #12]	; (13c5c <system_pinmux_pin_set_config+0x44>)
   13c4e:	4798      	blx	r3
}
   13c50:	46c0      	nop			; (mov r8, r8)
   13c52:	46bd      	mov	sp, r7
   13c54:	b004      	add	sp, #16
   13c56:	bd80      	pop	{r7, pc}
   13c58:	00013aa9 	.word	0x00013aa9
   13c5c:	00013b09 	.word	0x00013b09

00013c60 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   13c60:	b580      	push	{r7, lr}
   13c62:	af00      	add	r7, sp, #0
	return;
   13c64:	46c0      	nop			; (mov r8, r8)
}
   13c66:	46bd      	mov	sp, r7
   13c68:	bd80      	pop	{r7, pc}
	...

00013c6c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   13c6c:	b580      	push	{r7, lr}
   13c6e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   13c70:	4b06      	ldr	r3, [pc, #24]	; (13c8c <system_init+0x20>)
   13c72:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   13c74:	4b06      	ldr	r3, [pc, #24]	; (13c90 <system_init+0x24>)
   13c76:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   13c78:	4b06      	ldr	r3, [pc, #24]	; (13c94 <system_init+0x28>)
   13c7a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   13c7c:	4b06      	ldr	r3, [pc, #24]	; (13c98 <system_init+0x2c>)
   13c7e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   13c80:	4b06      	ldr	r3, [pc, #24]	; (13c9c <system_init+0x30>)
   13c82:	4798      	blx	r3
}
   13c84:	46c0      	nop			; (mov r8, r8)
   13c86:	46bd      	mov	sp, r7
   13c88:	bd80      	pop	{r7, pc}
   13c8a:	46c0      	nop			; (mov r8, r8)
   13c8c:	000132a1 	.word	0x000132a1
   13c90:	00012b69 	.word	0x00012b69
   13c94:	00011631 	.word	0x00011631
   13c98:	0000cef9 	.word	0x0000cef9
   13c9c:	00013c61 	.word	0x00013c61

00013ca0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   13ca0:	b580      	push	{r7, lr}
   13ca2:	b082      	sub	sp, #8
   13ca4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   13ca6:	4b2f      	ldr	r3, [pc, #188]	; (13d64 <Reset_Handler+0xc4>)
   13ca8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   13caa:	4b2f      	ldr	r3, [pc, #188]	; (13d68 <Reset_Handler+0xc8>)
   13cac:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   13cae:	687a      	ldr	r2, [r7, #4]
   13cb0:	683b      	ldr	r3, [r7, #0]
   13cb2:	429a      	cmp	r2, r3
   13cb4:	d00c      	beq.n	13cd0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   13cb6:	e007      	b.n	13cc8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   13cb8:	683b      	ldr	r3, [r7, #0]
   13cba:	1d1a      	adds	r2, r3, #4
   13cbc:	603a      	str	r2, [r7, #0]
   13cbe:	687a      	ldr	r2, [r7, #4]
   13cc0:	1d11      	adds	r1, r2, #4
   13cc2:	6079      	str	r1, [r7, #4]
   13cc4:	6812      	ldr	r2, [r2, #0]
   13cc6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   13cc8:	683a      	ldr	r2, [r7, #0]
   13cca:	4b28      	ldr	r3, [pc, #160]	; (13d6c <Reset_Handler+0xcc>)
   13ccc:	429a      	cmp	r2, r3
   13cce:	d3f3      	bcc.n	13cb8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   13cd0:	4b27      	ldr	r3, [pc, #156]	; (13d70 <Reset_Handler+0xd0>)
   13cd2:	603b      	str	r3, [r7, #0]
   13cd4:	e004      	b.n	13ce0 <Reset_Handler+0x40>
                *pDest++ = 0;
   13cd6:	683b      	ldr	r3, [r7, #0]
   13cd8:	1d1a      	adds	r2, r3, #4
   13cda:	603a      	str	r2, [r7, #0]
   13cdc:	2200      	movs	r2, #0
   13cde:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   13ce0:	683a      	ldr	r2, [r7, #0]
   13ce2:	4b24      	ldr	r3, [pc, #144]	; (13d74 <Reset_Handler+0xd4>)
   13ce4:	429a      	cmp	r2, r3
   13ce6:	d3f6      	bcc.n	13cd6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   13ce8:	4b23      	ldr	r3, [pc, #140]	; (13d78 <Reset_Handler+0xd8>)
   13cea:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   13cec:	4b23      	ldr	r3, [pc, #140]	; (13d7c <Reset_Handler+0xdc>)
   13cee:	687a      	ldr	r2, [r7, #4]
   13cf0:	21ff      	movs	r1, #255	; 0xff
   13cf2:	438a      	bics	r2, r1
   13cf4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   13cf6:	4a22      	ldr	r2, [pc, #136]	; (13d80 <Reset_Handler+0xe0>)
   13cf8:	2390      	movs	r3, #144	; 0x90
   13cfa:	005b      	lsls	r3, r3, #1
   13cfc:	2102      	movs	r1, #2
   13cfe:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   13d00:	4a20      	ldr	r2, [pc, #128]	; (13d84 <Reset_Handler+0xe4>)
   13d02:	78d3      	ldrb	r3, [r2, #3]
   13d04:	2103      	movs	r1, #3
   13d06:	438b      	bics	r3, r1
   13d08:	1c19      	adds	r1, r3, #0
   13d0a:	2302      	movs	r3, #2
   13d0c:	430b      	orrs	r3, r1
   13d0e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   13d10:	4a1c      	ldr	r2, [pc, #112]	; (13d84 <Reset_Handler+0xe4>)
   13d12:	78d3      	ldrb	r3, [r2, #3]
   13d14:	210c      	movs	r1, #12
   13d16:	438b      	bics	r3, r1
   13d18:	1c19      	adds	r1, r3, #0
   13d1a:	2308      	movs	r3, #8
   13d1c:	430b      	orrs	r3, r1
   13d1e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   13d20:	4a19      	ldr	r2, [pc, #100]	; (13d88 <Reset_Handler+0xe8>)
   13d22:	7b93      	ldrb	r3, [r2, #14]
   13d24:	2130      	movs	r1, #48	; 0x30
   13d26:	438b      	bics	r3, r1
   13d28:	1c19      	adds	r1, r3, #0
   13d2a:	2320      	movs	r3, #32
   13d2c:	430b      	orrs	r3, r1
   13d2e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   13d30:	4a15      	ldr	r2, [pc, #84]	; (13d88 <Reset_Handler+0xe8>)
   13d32:	7b93      	ldrb	r3, [r2, #14]
   13d34:	210c      	movs	r1, #12
   13d36:	438b      	bics	r3, r1
   13d38:	1c19      	adds	r1, r3, #0
   13d3a:	2308      	movs	r3, #8
   13d3c:	430b      	orrs	r3, r1
   13d3e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   13d40:	4a11      	ldr	r2, [pc, #68]	; (13d88 <Reset_Handler+0xe8>)
   13d42:	7b93      	ldrb	r3, [r2, #14]
   13d44:	2103      	movs	r1, #3
   13d46:	438b      	bics	r3, r1
   13d48:	1c19      	adds	r1, r3, #0
   13d4a:	2302      	movs	r3, #2
   13d4c:	430b      	orrs	r3, r1
   13d4e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   13d50:	4a0e      	ldr	r2, [pc, #56]	; (13d8c <Reset_Handler+0xec>)
   13d52:	6853      	ldr	r3, [r2, #4]
   13d54:	2180      	movs	r1, #128	; 0x80
   13d56:	430b      	orrs	r3, r1
   13d58:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   13d5a:	4b0d      	ldr	r3, [pc, #52]	; (13d90 <Reset_Handler+0xf0>)
   13d5c:	4798      	blx	r3

        /* Branch to main function */
        main();
   13d5e:	4b0d      	ldr	r3, [pc, #52]	; (13d94 <Reset_Handler+0xf4>)
   13d60:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   13d62:	e7fe      	b.n	13d62 <Reset_Handler+0xc2>
   13d64:	00019d4c 	.word	0x00019d4c
   13d68:	20000000 	.word	0x20000000
   13d6c:	200001fc 	.word	0x200001fc
   13d70:	20000200 	.word	0x20000200
   13d74:	2000093c 	.word	0x2000093c
   13d78:	00000000 	.word	0x00000000
   13d7c:	e000ed00 	.word	0xe000ed00
   13d80:	41007000 	.word	0x41007000
   13d84:	41005000 	.word	0x41005000
   13d88:	41004800 	.word	0x41004800
   13d8c:	41004000 	.word	0x41004000
   13d90:	00017be9 	.word	0x00017be9
   13d94:	00013fc9 	.word	0x00013fc9

00013d98 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   13d98:	b580      	push	{r7, lr}
   13d9a:	af00      	add	r7, sp, #0
        while (1) {
   13d9c:	e7fe      	b.n	13d9c <Dummy_Handler+0x4>
	...

00013da0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   13da0:	b580      	push	{r7, lr}
   13da2:	b084      	sub	sp, #16
   13da4:	af00      	add	r7, sp, #0
   13da6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   13da8:	4b0a      	ldr	r3, [pc, #40]	; (13dd4 <_sbrk+0x34>)
   13daa:	681b      	ldr	r3, [r3, #0]
   13dac:	2b00      	cmp	r3, #0
   13dae:	d102      	bne.n	13db6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   13db0:	4b08      	ldr	r3, [pc, #32]	; (13dd4 <_sbrk+0x34>)
   13db2:	4a09      	ldr	r2, [pc, #36]	; (13dd8 <_sbrk+0x38>)
   13db4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   13db6:	4b07      	ldr	r3, [pc, #28]	; (13dd4 <_sbrk+0x34>)
   13db8:	681b      	ldr	r3, [r3, #0]
   13dba:	60fb      	str	r3, [r7, #12]

	heap += incr;
   13dbc:	4b05      	ldr	r3, [pc, #20]	; (13dd4 <_sbrk+0x34>)
   13dbe:	681a      	ldr	r2, [r3, #0]
   13dc0:	687b      	ldr	r3, [r7, #4]
   13dc2:	18d2      	adds	r2, r2, r3
   13dc4:	4b03      	ldr	r3, [pc, #12]	; (13dd4 <_sbrk+0x34>)
   13dc6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   13dc8:	68fb      	ldr	r3, [r7, #12]
}
   13dca:	0018      	movs	r0, r3
   13dcc:	46bd      	mov	sp, r7
   13dce:	b004      	add	sp, #16
   13dd0:	bd80      	pop	{r7, pc}
   13dd2:	46c0      	nop			; (mov r8, r8)
   13dd4:	20000508 	.word	0x20000508
   13dd8:	20002940 	.word	0x20002940

00013ddc <system_apb_clock_clear_mask>:
 * \retval STATUS_OK               The clock mask was changed successfully
 */
static inline enum status_code system_apb_clock_clear_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13ddc:	b580      	push	{r7, lr}
   13dde:	b082      	sub	sp, #8
   13de0:	af00      	add	r7, sp, #0
   13de2:	0002      	movs	r2, r0
   13de4:	6039      	str	r1, [r7, #0]
   13de6:	1dfb      	adds	r3, r7, #7
   13de8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13dea:	1dfb      	adds	r3, r7, #7
   13dec:	781b      	ldrb	r3, [r3, #0]
   13dee:	2b01      	cmp	r3, #1
   13df0:	d00b      	beq.n	13e0a <system_apb_clock_clear_mask+0x2e>
   13df2:	2b02      	cmp	r3, #2
   13df4:	d011      	beq.n	13e1a <system_apb_clock_clear_mask+0x3e>
   13df6:	2b00      	cmp	r3, #0
   13df8:	d117      	bne.n	13e2a <system_apb_clock_clear_mask+0x4e>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg &= ~mask;
   13dfa:	4b0f      	ldr	r3, [pc, #60]	; (13e38 <system_apb_clock_clear_mask+0x5c>)
   13dfc:	4a0e      	ldr	r2, [pc, #56]	; (13e38 <system_apb_clock_clear_mask+0x5c>)
   13dfe:	6992      	ldr	r2, [r2, #24]
   13e00:	6839      	ldr	r1, [r7, #0]
   13e02:	43c9      	mvns	r1, r1
   13e04:	400a      	ands	r2, r1
   13e06:	619a      	str	r2, [r3, #24]
			break;
   13e08:	e011      	b.n	13e2e <system_apb_clock_clear_mask+0x52>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg &= ~mask;
   13e0a:	4b0b      	ldr	r3, [pc, #44]	; (13e38 <system_apb_clock_clear_mask+0x5c>)
   13e0c:	4a0a      	ldr	r2, [pc, #40]	; (13e38 <system_apb_clock_clear_mask+0x5c>)
   13e0e:	69d2      	ldr	r2, [r2, #28]
   13e10:	6839      	ldr	r1, [r7, #0]
   13e12:	43c9      	mvns	r1, r1
   13e14:	400a      	ands	r2, r1
   13e16:	61da      	str	r2, [r3, #28]
			break;
   13e18:	e009      	b.n	13e2e <system_apb_clock_clear_mask+0x52>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg &= ~mask;
   13e1a:	4b07      	ldr	r3, [pc, #28]	; (13e38 <system_apb_clock_clear_mask+0x5c>)
   13e1c:	4a06      	ldr	r2, [pc, #24]	; (13e38 <system_apb_clock_clear_mask+0x5c>)
   13e1e:	6a12      	ldr	r2, [r2, #32]
   13e20:	6839      	ldr	r1, [r7, #0]
   13e22:	43c9      	mvns	r1, r1
   13e24:	400a      	ands	r2, r1
   13e26:	621a      	str	r2, [r3, #32]
			break;
   13e28:	e001      	b.n	13e2e <system_apb_clock_clear_mask+0x52>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   13e2a:	2317      	movs	r3, #23
   13e2c:	e000      	b.n	13e30 <system_apb_clock_clear_mask+0x54>
	}

	return STATUS_OK;
   13e2e:	2300      	movs	r3, #0
}
   13e30:	0018      	movs	r0, r3
   13e32:	46bd      	mov	sp, r7
   13e34:	b002      	add	sp, #8
   13e36:	bd80      	pop	{r7, pc}
   13e38:	40000400 	.word	0x40000400

00013e3c <system_interrupt_enable_global>:
{
   13e3c:	b580      	push	{r7, lr}
   13e3e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   13e40:	4b04      	ldr	r3, [pc, #16]	; (13e54 <system_interrupt_enable_global+0x18>)
   13e42:	2201      	movs	r2, #1
   13e44:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   13e46:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   13e4a:	b662      	cpsie	i
}
   13e4c:	46c0      	nop			; (mov r8, r8)
   13e4e:	46bd      	mov	sp, r7
   13e50:	bd80      	pop	{r7, pc}
   13e52:	46c0      	nop			; (mov r8, r8)
   13e54:	20000028 	.word	0x20000028

00013e58 <system_pinmux_get_group_from_gpio_pin>:
{
   13e58:	b580      	push	{r7, lr}
   13e5a:	b084      	sub	sp, #16
   13e5c:	af00      	add	r7, sp, #0
   13e5e:	0002      	movs	r2, r0
   13e60:	1dfb      	adds	r3, r7, #7
   13e62:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13e64:	230f      	movs	r3, #15
   13e66:	18fb      	adds	r3, r7, r3
   13e68:	1dfa      	adds	r2, r7, #7
   13e6a:	7812      	ldrb	r2, [r2, #0]
   13e6c:	09d2      	lsrs	r2, r2, #7
   13e6e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13e70:	230e      	movs	r3, #14
   13e72:	18fb      	adds	r3, r7, r3
   13e74:	1dfa      	adds	r2, r7, #7
   13e76:	7812      	ldrb	r2, [r2, #0]
   13e78:	0952      	lsrs	r2, r2, #5
   13e7a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13e7c:	4b0d      	ldr	r3, [pc, #52]	; (13eb4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13e7e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13e80:	230f      	movs	r3, #15
   13e82:	18fb      	adds	r3, r7, r3
   13e84:	781b      	ldrb	r3, [r3, #0]
   13e86:	2b00      	cmp	r3, #0
   13e88:	d10f      	bne.n	13eaa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13e8a:	230f      	movs	r3, #15
   13e8c:	18fb      	adds	r3, r7, r3
   13e8e:	781b      	ldrb	r3, [r3, #0]
   13e90:	009b      	lsls	r3, r3, #2
   13e92:	2210      	movs	r2, #16
   13e94:	4694      	mov	ip, r2
   13e96:	44bc      	add	ip, r7
   13e98:	4463      	add	r3, ip
   13e9a:	3b08      	subs	r3, #8
   13e9c:	681a      	ldr	r2, [r3, #0]
   13e9e:	230e      	movs	r3, #14
   13ea0:	18fb      	adds	r3, r7, r3
   13ea2:	781b      	ldrb	r3, [r3, #0]
   13ea4:	01db      	lsls	r3, r3, #7
   13ea6:	18d3      	adds	r3, r2, r3
   13ea8:	e000      	b.n	13eac <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13eaa:	2300      	movs	r3, #0
}
   13eac:	0018      	movs	r0, r3
   13eae:	46bd      	mov	sp, r7
   13eb0:	b004      	add	sp, #16
   13eb2:	bd80      	pop	{r7, pc}
   13eb4:	41004400 	.word	0x41004400

00013eb8 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
   13eb8:	b580      	push	{r7, lr}
   13eba:	b084      	sub	sp, #16
   13ebc:	af00      	add	r7, sp, #0
   13ebe:	0002      	movs	r2, r0
   13ec0:	1dfb      	adds	r3, r7, #7
   13ec2:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
   13ec4:	4b1a      	ldr	r3, [pc, #104]	; (13f30 <system_set_sleepmode+0x78>)
   13ec6:	699b      	ldr	r3, [r3, #24]
   13ec8:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
   13eca:	68fa      	ldr	r2, [r7, #12]
   13ecc:	23f0      	movs	r3, #240	; 0xf0
   13ece:	011b      	lsls	r3, r3, #4
   13ed0:	4013      	ands	r3, r2
   13ed2:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
   13ed4:	68fb      	ldr	r3, [r7, #12]
   13ed6:	0a1b      	lsrs	r3, r3, #8
   13ed8:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
   13eda:	68fb      	ldr	r3, [r7, #12]
   13edc:	2b02      	cmp	r3, #2
   13ede:	d805      	bhi.n	13eec <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   13ee0:	4a14      	ldr	r2, [pc, #80]	; (13f34 <system_set_sleepmode+0x7c>)
   13ee2:	6853      	ldr	r3, [r2, #4]
   13ee4:	21c0      	movs	r1, #192	; 0xc0
   13ee6:	0089      	lsls	r1, r1, #2
   13ee8:	430b      	orrs	r3, r1
   13eea:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
   13eec:	1dfb      	adds	r3, r7, #7
   13eee:	781b      	ldrb	r3, [r3, #0]
   13ef0:	2b00      	cmp	r3, #0
   13ef2:	db16      	blt.n	13f22 <system_set_sleepmode+0x6a>
   13ef4:	2b02      	cmp	r3, #2
   13ef6:	dd02      	ble.n	13efe <system_set_sleepmode+0x46>
   13ef8:	2b03      	cmp	r3, #3
   13efa:	d00b      	beq.n	13f14 <system_set_sleepmode+0x5c>
   13efc:	e011      	b.n	13f22 <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
   13efe:	4b0e      	ldr	r3, [pc, #56]	; (13f38 <system_set_sleepmode+0x80>)
   13f00:	4a0d      	ldr	r2, [pc, #52]	; (13f38 <system_set_sleepmode+0x80>)
   13f02:	6912      	ldr	r2, [r2, #16]
   13f04:	2104      	movs	r1, #4
   13f06:	438a      	bics	r2, r1
   13f08:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
   13f0a:	4a0c      	ldr	r2, [pc, #48]	; (13f3c <system_set_sleepmode+0x84>)
   13f0c:	1dfb      	adds	r3, r7, #7
   13f0e:	781b      	ldrb	r3, [r3, #0]
   13f10:	7053      	strb	r3, [r2, #1]
			break;
   13f12:	e008      	b.n	13f26 <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
   13f14:	4b08      	ldr	r3, [pc, #32]	; (13f38 <system_set_sleepmode+0x80>)
   13f16:	4a08      	ldr	r2, [pc, #32]	; (13f38 <system_set_sleepmode+0x80>)
   13f18:	6912      	ldr	r2, [r2, #16]
   13f1a:	2104      	movs	r1, #4
   13f1c:	430a      	orrs	r2, r1
   13f1e:	611a      	str	r2, [r3, #16]
			break;
   13f20:	e001      	b.n	13f26 <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
   13f22:	2317      	movs	r3, #23
   13f24:	e000      	b.n	13f28 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
   13f26:	2300      	movs	r3, #0
}
   13f28:	0018      	movs	r0, r3
   13f2a:	46bd      	mov	sp, r7
   13f2c:	b004      	add	sp, #16
   13f2e:	bd80      	pop	{r7, pc}
   13f30:	41002000 	.word	0x41002000
   13f34:	41004000 	.word	0x41004000
   13f38:	e000ed00 	.word	0xe000ed00
   13f3c:	40000400 	.word	0x40000400

00013f40 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
   13f40:	b580      	push	{r7, lr}
   13f42:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   13f44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
   13f48:	bf30      	wfi
	__DSB();
	__WFI();
}
   13f4a:	46c0      	nop			; (mov r8, r8)
   13f4c:	46bd      	mov	sp, r7
   13f4e:	bd80      	pop	{r7, pc}

00013f50 <port_get_group_from_gpio_pin>:
{
   13f50:	b580      	push	{r7, lr}
   13f52:	b082      	sub	sp, #8
   13f54:	af00      	add	r7, sp, #0
   13f56:	0002      	movs	r2, r0
   13f58:	1dfb      	adds	r3, r7, #7
   13f5a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13f5c:	1dfb      	adds	r3, r7, #7
   13f5e:	781b      	ldrb	r3, [r3, #0]
   13f60:	0018      	movs	r0, r3
   13f62:	4b03      	ldr	r3, [pc, #12]	; (13f70 <port_get_group_from_gpio_pin+0x20>)
   13f64:	4798      	blx	r3
   13f66:	0003      	movs	r3, r0
}
   13f68:	0018      	movs	r0, r3
   13f6a:	46bd      	mov	sp, r7
   13f6c:	b002      	add	sp, #8
   13f6e:	bd80      	pop	{r7, pc}
   13f70:	00013e59 	.word	0x00013e59

00013f74 <port_pin_set_output_level>:
{
   13f74:	b580      	push	{r7, lr}
   13f76:	b084      	sub	sp, #16
   13f78:	af00      	add	r7, sp, #0
   13f7a:	0002      	movs	r2, r0
   13f7c:	1dfb      	adds	r3, r7, #7
   13f7e:	701a      	strb	r2, [r3, #0]
   13f80:	1dbb      	adds	r3, r7, #6
   13f82:	1c0a      	adds	r2, r1, #0
   13f84:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13f86:	1dfb      	adds	r3, r7, #7
   13f88:	781b      	ldrb	r3, [r3, #0]
   13f8a:	0018      	movs	r0, r3
   13f8c:	4b0d      	ldr	r3, [pc, #52]	; (13fc4 <port_pin_set_output_level+0x50>)
   13f8e:	4798      	blx	r3
   13f90:	0003      	movs	r3, r0
   13f92:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13f94:	1dfb      	adds	r3, r7, #7
   13f96:	781b      	ldrb	r3, [r3, #0]
   13f98:	221f      	movs	r2, #31
   13f9a:	4013      	ands	r3, r2
   13f9c:	2201      	movs	r2, #1
   13f9e:	409a      	lsls	r2, r3
   13fa0:	0013      	movs	r3, r2
   13fa2:	60bb      	str	r3, [r7, #8]
	if (level) {
   13fa4:	1dbb      	adds	r3, r7, #6
   13fa6:	781b      	ldrb	r3, [r3, #0]
   13fa8:	2b00      	cmp	r3, #0
   13faa:	d003      	beq.n	13fb4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13fac:	68fb      	ldr	r3, [r7, #12]
   13fae:	68ba      	ldr	r2, [r7, #8]
   13fb0:	619a      	str	r2, [r3, #24]
}
   13fb2:	e002      	b.n	13fba <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13fb4:	68fb      	ldr	r3, [r7, #12]
   13fb6:	68ba      	ldr	r2, [r7, #8]
   13fb8:	615a      	str	r2, [r3, #20]
}
   13fba:	46c0      	nop			; (mov r8, r8)
   13fbc:	46bd      	mov	sp, r7
   13fbe:	b004      	add	sp, #16
   13fc0:	bd80      	pop	{r7, pc}
   13fc2:	46c0      	nop			; (mov r8, r8)
   13fc4:	00013f51 	.word	0x00013f51

00013fc8 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
   13fc8:	b590      	push	{r4, r7, lr}
   13fca:	b083      	sub	sp, #12
   13fcc:	af02      	add	r7, sp, #8
	system_init();
   13fce:	4b18      	ldr	r3, [pc, #96]	; (14030 <main+0x68>)
   13fd0:	4798      	blx	r3
	
	/* Disable digital interfaces to unused peripherals */
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBA,
   13fd2:	2111      	movs	r1, #17
   13fd4:	2000      	movs	r0, #0
   13fd6:	4b17      	ldr	r3, [pc, #92]	; (14034 <main+0x6c>)
   13fd8:	4798      	blx	r3
	PM_APBAMASK_PAC0 | PM_APBAMASK_WDT);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBB,
   13fda:	2103      	movs	r1, #3
   13fdc:	2001      	movs	r0, #1
   13fde:	4b15      	ldr	r3, [pc, #84]	; (14034 <main+0x6c>)
   13fe0:	4798      	blx	r3
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
   13fe2:	4b15      	ldr	r3, [pc, #84]	; (14038 <main+0x70>)
   13fe4:	0019      	movs	r1, r3
   13fe6:	2002      	movs	r0, #2
   13fe8:	4b12      	ldr	r3, [pc, #72]	; (14034 <main+0x6c>)
   13fea:	4798      	blx	r3
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
   13fec:	4a13      	ldr	r2, [pc, #76]	; (1403c <main+0x74>)
   13fee:	6853      	ldr	r3, [r2, #4]
   13ff0:	21c0      	movs	r1, #192	; 0xc0
   13ff2:	0089      	lsls	r1, r1, #2
   13ff4:	430b      	orrs	r3, r1
   13ff6:	6053      	str	r3, [r2, #4]
	
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
   13ff8:	2003      	movs	r0, #3
   13ffa:	4b11      	ldr	r3, [pc, #68]	; (14040 <main+0x78>)
   13ffc:	4798      	blx	r3
	
	system_interrupt_enable_global();
   13ffe:	4b11      	ldr	r3, [pc, #68]	; (14044 <main+0x7c>)
   14000:	4798      	blx	r3
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
   14002:	4b11      	ldr	r3, [pc, #68]	; (14048 <main+0x80>)
   14004:	4798      	blx	r3
	init_eeprom();
   14006:	4b11      	ldr	r3, [pc, #68]	; (1404c <main+0x84>)
   14008:	4798      	blx	r3
	
	
	
	start_lcd_service();
   1400a:	4b11      	ldr	r3, [pc, #68]	; (14050 <main+0x88>)
   1400c:	4798      	blx	r3
	start_gsm_service();
   1400e:	4b11      	ldr	r3, [pc, #68]	; (14054 <main+0x8c>)
   14010:	4798      	blx	r3
	start_motor_service();
   14012:	4b11      	ldr	r3, [pc, #68]	; (14058 <main+0x90>)
   14014:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
   14016:	4811      	ldr	r0, [pc, #68]	; (1405c <main+0x94>)
   14018:	2300      	movs	r3, #0
   1401a:	9301      	str	r3, [sp, #4]
   1401c:	2301      	movs	r3, #1
   1401e:	9300      	str	r3, [sp, #0]
   14020:	2300      	movs	r3, #0
   14022:	2264      	movs	r2, #100	; 0x64
   14024:	2100      	movs	r1, #0
   14026:	4c0e      	ldr	r4, [pc, #56]	; (14060 <main+0x98>)
   14028:	47a0      	blx	r4
	
	vTaskStartScheduler();
   1402a:	4b0e      	ldr	r3, [pc, #56]	; (14064 <main+0x9c>)
   1402c:	4798      	blx	r3
	
	for (;;)
   1402e:	e7fe      	b.n	1402e <main+0x66>
   14030:	00013c6d 	.word	0x00013c6d
   14034:	00013ddd 	.word	0x00013ddd
   14038:	00060001 	.word	0x00060001
   1403c:	41004000 	.word	0x41004000
   14040:	00013eb9 	.word	0x00013eb9
   14044:	00013e3d 	.word	0x00013e3d
   14048:	00011895 	.word	0x00011895
   1404c:	00000151 	.word	0x00000151
   14050:	0000811d 	.word	0x0000811d
   14054:	00007949 	.word	0x00007949
   14058:	0000b4e5 	.word	0x0000b4e5
   1405c:	000140b1 	.word	0x000140b1
   14060:	0000ecd9 	.word	0x0000ecd9
   14064:	0000f1ad 	.word	0x0000f1ad

00014068 <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
   14068:	b580      	push	{r7, lr}
   1406a:	af00      	add	r7, sp, #0
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
   1406c:	4b0d      	ldr	r3, [pc, #52]	; (140a4 <checkSleepElligible+0x3c>)
   1406e:	4798      	blx	r3
   14070:	0003      	movs	r3, r0
   14072:	001a      	movs	r2, r3
   14074:	2301      	movs	r3, #1
   14076:	4053      	eors	r3, r2
   14078:	b2db      	uxtb	r3, r3
   1407a:	2b00      	cmp	r3, #0
   1407c:	d009      	beq.n	14092 <checkSleepElligible+0x2a>
   1407e:	4b0a      	ldr	r3, [pc, #40]	; (140a8 <checkSleepElligible+0x40>)
   14080:	4798      	blx	r3
   14082:	1e03      	subs	r3, r0, #0
   14084:	d005      	beq.n	14092 <checkSleepElligible+0x2a>
   14086:	4b09      	ldr	r3, [pc, #36]	; (140ac <checkSleepElligible+0x44>)
   14088:	4798      	blx	r3
   1408a:	1e03      	subs	r3, r0, #0
   1408c:	d001      	beq.n	14092 <checkSleepElligible+0x2a>
   1408e:	2301      	movs	r3, #1
   14090:	e000      	b.n	14094 <checkSleepElligible+0x2c>
   14092:	2300      	movs	r3, #0
   14094:	1c1a      	adds	r2, r3, #0
   14096:	2301      	movs	r3, #1
   14098:	4013      	ands	r3, r2
   1409a:	b2db      	uxtb	r3, r3
}
   1409c:	0018      	movs	r0, r3
   1409e:	46bd      	mov	sp, r7
   140a0:	bd80      	pop	{r7, pc}
   140a2:	46c0      	nop			; (mov r8, r8)
   140a4:	00009df1 	.word	0x00009df1
   140a8:	0000b7dd 	.word	0x0000b7dd
   140ac:	00007a0d 	.word	0x00007a0d

000140b0 <vTask_sleep_manager>:

static void vTask_sleep_manager(void *params)
{
   140b0:	b580      	push	{r7, lr}
   140b2:	b084      	sub	sp, #16
   140b4:	af00      	add	r7, sp, #0
   140b6:	6078      	str	r0, [r7, #4]
	UNUSED(params);
	for (;;)
	{
		if (checkSleepElligible())
   140b8:	4b34      	ldr	r3, [pc, #208]	; (1418c <vTask_sleep_manager+0xdc>)
   140ba:	4798      	blx	r3
   140bc:	1e03      	subs	r3, r0, #0
   140be:	d060      	beq.n	14182 <vTask_sleep_manager+0xd2>
		{
			if(!initSleepSeqeunce)
   140c0:	4b33      	ldr	r3, [pc, #204]	; (14190 <vTask_sleep_manager+0xe0>)
   140c2:	781b      	ldrb	r3, [r3, #0]
   140c4:	2201      	movs	r2, #1
   140c6:	4053      	eors	r3, r2
   140c8:	b2db      	uxtb	r3, r3
   140ca:	2b00      	cmp	r3, #0
   140cc:	d008      	beq.n	140e0 <vTask_sleep_manager+0x30>
			{
				tempSleepWait=xTaskGetTickCount();
   140ce:	4b31      	ldr	r3, [pc, #196]	; (14194 <vTask_sleep_manager+0xe4>)
   140d0:	4798      	blx	r3
   140d2:	0002      	movs	r2, r0
   140d4:	4b30      	ldr	r3, [pc, #192]	; (14198 <vTask_sleep_manager+0xe8>)
   140d6:	601a      	str	r2, [r3, #0]
				initSleepSeqeunce=true;
   140d8:	4b2d      	ldr	r3, [pc, #180]	; (14190 <vTask_sleep_manager+0xe0>)
   140da:	2201      	movs	r2, #1
   140dc:	701a      	strb	r2, [r3, #0]
   140de:	e7eb      	b.n	140b8 <vTask_sleep_manager+0x8>
			}
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
   140e0:	4b2b      	ldr	r3, [pc, #172]	; (14190 <vTask_sleep_manager+0xe0>)
   140e2:	781b      	ldrb	r3, [r3, #0]
   140e4:	2b00      	cmp	r3, #0
   140e6:	d0e7      	beq.n	140b8 <vTask_sleep_manager+0x8>
   140e8:	4b2a      	ldr	r3, [pc, #168]	; (14194 <vTask_sleep_manager+0xe4>)
   140ea:	4798      	blx	r3
   140ec:	0002      	movs	r2, r0
   140ee:	4b2a      	ldr	r3, [pc, #168]	; (14198 <vTask_sleep_manager+0xe8>)
   140f0:	681b      	ldr	r3, [r3, #0]
   140f2:	1ad3      	subs	r3, r2, r3
   140f4:	4a29      	ldr	r2, [pc, #164]	; (1419c <vTask_sleep_manager+0xec>)
   140f6:	4293      	cmp	r3, r2
   140f8:	d9de      	bls.n	140b8 <vTask_sleep_manager+0x8>
			{
				uint8_t cnt=10;
   140fa:	230f      	movs	r3, #15
   140fc:	18fb      	adds	r3, r7, r3
   140fe:	220a      	movs	r2, #10
   14100:	701a      	strb	r2, [r3, #0]
				bool led=false;
   14102:	230e      	movs	r3, #14
   14104:	18fb      	adds	r3, r7, r3
   14106:	2200      	movs	r2, #0
   14108:	701a      	strb	r2, [r3, #0]
				do
				{
					led=!led;
   1410a:	230e      	movs	r3, #14
   1410c:	18fb      	adds	r3, r7, r3
   1410e:	781b      	ldrb	r3, [r3, #0]
   14110:	1e5a      	subs	r2, r3, #1
   14112:	4193      	sbcs	r3, r2
   14114:	b2db      	uxtb	r3, r3
   14116:	2201      	movs	r2, #1
   14118:	4053      	eors	r3, r2
   1411a:	b2db      	uxtb	r3, r3
   1411c:	001a      	movs	r2, r3
   1411e:	230e      	movs	r3, #14
   14120:	18fb      	adds	r3, r7, r3
   14122:	701a      	strb	r2, [r3, #0]
   14124:	781a      	ldrb	r2, [r3, #0]
   14126:	2101      	movs	r1, #1
   14128:	400a      	ands	r2, r1
   1412a:	701a      	strb	r2, [r3, #0]
					if(led)
   1412c:	230e      	movs	r3, #14
   1412e:	18fb      	adds	r3, r7, r3
   14130:	781b      	ldrb	r3, [r3, #0]
   14132:	2b00      	cmp	r3, #0
   14134:	d004      	beq.n	14140 <vTask_sleep_manager+0x90>
					THREEPHASE_OK_LED_ON;
   14136:	2100      	movs	r1, #0
   14138:	2027      	movs	r0, #39	; 0x27
   1413a:	4b19      	ldr	r3, [pc, #100]	; (141a0 <vTask_sleep_manager+0xf0>)
   1413c:	4798      	blx	r3
   1413e:	e003      	b.n	14148 <vTask_sleep_manager+0x98>
					else
					THREEPHASE_OK_LED_OFF;
   14140:	2101      	movs	r1, #1
   14142:	2027      	movs	r0, #39	; 0x27
   14144:	4b16      	ldr	r3, [pc, #88]	; (141a0 <vTask_sleep_manager+0xf0>)
   14146:	4798      	blx	r3

					tempSleepWait=xTaskGetTickCount();
   14148:	4b12      	ldr	r3, [pc, #72]	; (14194 <vTask_sleep_manager+0xe4>)
   1414a:	4798      	blx	r3
   1414c:	0002      	movs	r2, r0
   1414e:	4b12      	ldr	r3, [pc, #72]	; (14198 <vTask_sleep_manager+0xe8>)
   14150:	601a      	str	r2, [r3, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
   14152:	46c0      	nop			; (mov r8, r8)
   14154:	4b0f      	ldr	r3, [pc, #60]	; (14194 <vTask_sleep_manager+0xe4>)
   14156:	4798      	blx	r3
   14158:	0002      	movs	r2, r0
   1415a:	4b0f      	ldr	r3, [pc, #60]	; (14198 <vTask_sleep_manager+0xe8>)
   1415c:	681b      	ldr	r3, [r3, #0]
   1415e:	1ad3      	subs	r3, r2, r3
   14160:	2bc7      	cmp	r3, #199	; 0xc7
   14162:	d9f7      	bls.n	14154 <vTask_sleep_manager+0xa4>
					{}
				}while(--cnt);
   14164:	230f      	movs	r3, #15
   14166:	18fb      	adds	r3, r7, r3
   14168:	220f      	movs	r2, #15
   1416a:	18ba      	adds	r2, r7, r2
   1416c:	7812      	ldrb	r2, [r2, #0]
   1416e:	3a01      	subs	r2, #1
   14170:	701a      	strb	r2, [r3, #0]
   14172:	230f      	movs	r3, #15
   14174:	18fb      	adds	r3, r7, r3
   14176:	781b      	ldrb	r3, [r3, #0]
   14178:	2b00      	cmp	r3, #0
   1417a:	d1c6      	bne.n	1410a <vTask_sleep_manager+0x5a>
				
				gotoSleep();
   1417c:	4b09      	ldr	r3, [pc, #36]	; (141a4 <vTask_sleep_manager+0xf4>)
   1417e:	4798      	blx	r3
   14180:	e79a      	b.n	140b8 <vTask_sleep_manager+0x8>
			}
		}
		else
		{
			initSleepSeqeunce=false;
   14182:	4b03      	ldr	r3, [pc, #12]	; (14190 <vTask_sleep_manager+0xe0>)
   14184:	2200      	movs	r2, #0
   14186:	701a      	strb	r2, [r3, #0]
		if (checkSleepElligible())
   14188:	e796      	b.n	140b8 <vTask_sleep_manager+0x8>
   1418a:	46c0      	nop			; (mov r8, r8)
   1418c:	00014069 	.word	0x00014069
   14190:	2000050c 	.word	0x2000050c
   14194:	0000f37d 	.word	0x0000f37d
   14198:	20000510 	.word	0x20000510
   1419c:	00004650 	.word	0x00004650
   141a0:	00013f75 	.word	0x00013f75
   141a4:	000141a9 	.word	0x000141a9

000141a8 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
   141a8:	b580      	push	{r7, lr}
   141aa:	af00      	add	r7, sp, #0
	LCD_PWR_DIS();
   141ac:	4b04      	ldr	r3, [pc, #16]	; (141c0 <gotoSleep+0x18>)
   141ae:	4798      	blx	r3
	
	lcd_in_sleep = true;
   141b0:	4b04      	ldr	r3, [pc, #16]	; (141c4 <gotoSleep+0x1c>)
   141b2:	2201      	movs	r2, #1
   141b4:	701a      	strb	r2, [r3, #0]
	system_sleep();
   141b6:	4b04      	ldr	r3, [pc, #16]	; (141c8 <gotoSleep+0x20>)
   141b8:	4798      	blx	r3
   141ba:	46c0      	nop			; (mov r8, r8)
   141bc:	46bd      	mov	sp, r7
   141be:	bd80      	pop	{r7, pc}
   141c0:	000038ed 	.word	0x000038ed
   141c4:	20000818 	.word	0x20000818
   141c8:	00013f41 	.word	0x00013f41

000141cc <pow>:
   141cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   141ce:	4657      	mov	r7, sl
   141d0:	464e      	mov	r6, r9
   141d2:	46de      	mov	lr, fp
   141d4:	4645      	mov	r5, r8
   141d6:	b5e0      	push	{r5, r6, r7, lr}
   141d8:	b08f      	sub	sp, #60	; 0x3c
   141da:	001d      	movs	r5, r3
   141dc:	0006      	movs	r6, r0
   141de:	000f      	movs	r7, r1
   141e0:	0014      	movs	r4, r2
   141e2:	f000 f9ff 	bl	145e4 <__ieee754_pow>
   141e6:	4bc7      	ldr	r3, [pc, #796]	; (14504 <pow+0x338>)
   141e8:	9000      	str	r0, [sp, #0]
   141ea:	9101      	str	r1, [sp, #4]
   141ec:	469a      	mov	sl, r3
   141ee:	781b      	ldrb	r3, [r3, #0]
   141f0:	b25b      	sxtb	r3, r3
   141f2:	4699      	mov	r9, r3
   141f4:	3301      	adds	r3, #1
   141f6:	d03e      	beq.n	14276 <pow+0xaa>
   141f8:	0022      	movs	r2, r4
   141fa:	002b      	movs	r3, r5
   141fc:	0020      	movs	r0, r4
   141fe:	0029      	movs	r1, r5
   14200:	f003 fb92 	bl	17928 <__aeabi_dcmpun>
   14204:	4683      	mov	fp, r0
   14206:	2800      	cmp	r0, #0
   14208:	d135      	bne.n	14276 <pow+0xaa>
   1420a:	0032      	movs	r2, r6
   1420c:	003b      	movs	r3, r7
   1420e:	0030      	movs	r0, r6
   14210:	0039      	movs	r1, r7
   14212:	f003 fb89 	bl	17928 <__aeabi_dcmpun>
   14216:	2200      	movs	r2, #0
   14218:	9003      	str	r0, [sp, #12]
   1421a:	2800      	cmp	r0, #0
   1421c:	d000      	beq.n	14220 <pow+0x54>
   1421e:	e0b6      	b.n	1438e <pow+0x1c2>
   14220:	2300      	movs	r3, #0
   14222:	0030      	movs	r0, r6
   14224:	0039      	movs	r1, r7
   14226:	f001 faa1 	bl	1576c <__aeabi_dcmpeq>
   1422a:	2800      	cmp	r0, #0
   1422c:	d02c      	beq.n	14288 <pow+0xbc>
   1422e:	2200      	movs	r2, #0
   14230:	2300      	movs	r3, #0
   14232:	0020      	movs	r0, r4
   14234:	0029      	movs	r1, r5
   14236:	f001 fa99 	bl	1576c <__aeabi_dcmpeq>
   1423a:	4683      	mov	fp, r0
   1423c:	2800      	cmp	r0, #0
   1423e:	d100      	bne.n	14242 <pow+0x76>
   14240:	e077      	b.n	14332 <pow+0x166>
   14242:	ab04      	add	r3, sp, #16
   14244:	4698      	mov	r8, r3
   14246:	2301      	movs	r3, #1
   14248:	4642      	mov	r2, r8
   1424a:	9304      	str	r3, [sp, #16]
   1424c:	4bae      	ldr	r3, [pc, #696]	; (14508 <pow+0x33c>)
   1424e:	6053      	str	r3, [r2, #4]
   14250:	4643      	mov	r3, r8
   14252:	9a03      	ldr	r2, [sp, #12]
   14254:	611c      	str	r4, [r3, #16]
   14256:	615d      	str	r5, [r3, #20]
   14258:	621a      	str	r2, [r3, #32]
   1425a:	609e      	str	r6, [r3, #8]
   1425c:	60df      	str	r7, [r3, #12]
   1425e:	4642      	mov	r2, r8
   14260:	2300      	movs	r3, #0
   14262:	2400      	movs	r4, #0
   14264:	6193      	str	r3, [r2, #24]
   14266:	61d4      	str	r4, [r2, #28]
   14268:	464b      	mov	r3, r9
   1426a:	2b00      	cmp	r3, #0
   1426c:	d04d      	beq.n	1430a <pow+0x13e>
   1426e:	2300      	movs	r3, #0
   14270:	4ca6      	ldr	r4, [pc, #664]	; (1450c <pow+0x340>)
   14272:	9300      	str	r3, [sp, #0]
   14274:	9401      	str	r4, [sp, #4]
   14276:	9800      	ldr	r0, [sp, #0]
   14278:	9901      	ldr	r1, [sp, #4]
   1427a:	b00f      	add	sp, #60	; 0x3c
   1427c:	bc3c      	pop	{r2, r3, r4, r5}
   1427e:	4690      	mov	r8, r2
   14280:	4699      	mov	r9, r3
   14282:	46a2      	mov	sl, r4
   14284:	46ab      	mov	fp, r5
   14286:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14288:	9800      	ldr	r0, [sp, #0]
   1428a:	9901      	ldr	r1, [sp, #4]
   1428c:	f000 ffc4 	bl	15218 <finite>
   14290:	4681      	mov	r9, r0
   14292:	2800      	cmp	r0, #0
   14294:	d100      	bne.n	14298 <pow+0xcc>
   14296:	e09b      	b.n	143d0 <pow+0x204>
   14298:	9800      	ldr	r0, [sp, #0]
   1429a:	9901      	ldr	r1, [sp, #4]
   1429c:	2200      	movs	r2, #0
   1429e:	2300      	movs	r3, #0
   142a0:	f001 fa64 	bl	1576c <__aeabi_dcmpeq>
   142a4:	2800      	cmp	r0, #0
   142a6:	d0e6      	beq.n	14276 <pow+0xaa>
   142a8:	0030      	movs	r0, r6
   142aa:	0039      	movs	r1, r7
   142ac:	f000 ffb4 	bl	15218 <finite>
   142b0:	2800      	cmp	r0, #0
   142b2:	d0e0      	beq.n	14276 <pow+0xaa>
   142b4:	0020      	movs	r0, r4
   142b6:	0029      	movs	r1, r5
   142b8:	f000 ffae 	bl	15218 <finite>
   142bc:	2800      	cmp	r0, #0
   142be:	d0da      	beq.n	14276 <pow+0xaa>
   142c0:	ab04      	add	r3, sp, #16
   142c2:	4698      	mov	r8, r3
   142c4:	2304      	movs	r3, #4
   142c6:	4642      	mov	r2, r8
   142c8:	9304      	str	r3, [sp, #16]
   142ca:	4b8f      	ldr	r3, [pc, #572]	; (14508 <pow+0x33c>)
   142cc:	6114      	str	r4, [r2, #16]
   142ce:	6155      	str	r5, [r2, #20]
   142d0:	6053      	str	r3, [r2, #4]
   142d2:	2300      	movs	r3, #0
   142d4:	2400      	movs	r4, #0
   142d6:	6213      	str	r3, [r2, #32]
   142d8:	2300      	movs	r3, #0
   142da:	6193      	str	r3, [r2, #24]
   142dc:	61d4      	str	r4, [r2, #28]
   142de:	4653      	mov	r3, sl
   142e0:	781b      	ldrb	r3, [r3, #0]
   142e2:	6096      	str	r6, [r2, #8]
   142e4:	60d7      	str	r7, [r2, #12]
   142e6:	b25b      	sxtb	r3, r3
   142e8:	2b02      	cmp	r3, #2
   142ea:	d004      	beq.n	142f6 <pow+0x12a>
   142ec:	4640      	mov	r0, r8
   142ee:	f000 ff9d 	bl	1522c <matherr>
   142f2:	2800      	cmp	r0, #0
   142f4:	d10e      	bne.n	14314 <pow+0x148>
   142f6:	f003 fc71 	bl	17bdc <__errno>
   142fa:	2322      	movs	r3, #34	; 0x22
   142fc:	6003      	str	r3, [r0, #0]
   142fe:	e009      	b.n	14314 <pow+0x148>
   14300:	4642      	mov	r2, r8
   14302:	2300      	movs	r3, #0
   14304:	2400      	movs	r4, #0
   14306:	6193      	str	r3, [r2, #24]
   14308:	61d4      	str	r4, [r2, #28]
   1430a:	4640      	mov	r0, r8
   1430c:	f000 ff8e 	bl	1522c <matherr>
   14310:	2800      	cmp	r0, #0
   14312:	d037      	beq.n	14384 <pow+0x1b8>
   14314:	4643      	mov	r3, r8
   14316:	6a1b      	ldr	r3, [r3, #32]
   14318:	2b00      	cmp	r3, #0
   1431a:	d004      	beq.n	14326 <pow+0x15a>
   1431c:	f003 fc5e 	bl	17bdc <__errno>
   14320:	4643      	mov	r3, r8
   14322:	6a1b      	ldr	r3, [r3, #32]
   14324:	6003      	str	r3, [r0, #0]
   14326:	4643      	mov	r3, r8
   14328:	69dc      	ldr	r4, [r3, #28]
   1432a:	699b      	ldr	r3, [r3, #24]
   1432c:	9300      	str	r3, [sp, #0]
   1432e:	9401      	str	r4, [sp, #4]
   14330:	e7a1      	b.n	14276 <pow+0xaa>
   14332:	0020      	movs	r0, r4
   14334:	0029      	movs	r1, r5
   14336:	f000 ff6f 	bl	15218 <finite>
   1433a:	2800      	cmp	r0, #0
   1433c:	d09b      	beq.n	14276 <pow+0xaa>
   1433e:	2200      	movs	r2, #0
   14340:	2300      	movs	r3, #0
   14342:	0020      	movs	r0, r4
   14344:	0029      	movs	r1, r5
   14346:	f001 fa17 	bl	15778 <__aeabi_dcmplt>
   1434a:	2800      	cmp	r0, #0
   1434c:	d100      	bne.n	14350 <pow+0x184>
   1434e:	e792      	b.n	14276 <pow+0xaa>
   14350:	ab04      	add	r3, sp, #16
   14352:	4698      	mov	r8, r3
   14354:	2301      	movs	r3, #1
   14356:	4642      	mov	r2, r8
   14358:	9304      	str	r3, [sp, #16]
   1435a:	4b6b      	ldr	r3, [pc, #428]	; (14508 <pow+0x33c>)
   1435c:	6053      	str	r3, [r2, #4]
   1435e:	4643      	mov	r3, r8
   14360:	465a      	mov	r2, fp
   14362:	609e      	str	r6, [r3, #8]
   14364:	60df      	str	r7, [r3, #12]
   14366:	621a      	str	r2, [r3, #32]
   14368:	611c      	str	r4, [r3, #16]
   1436a:	615d      	str	r5, [r3, #20]
   1436c:	4653      	mov	r3, sl
   1436e:	781b      	ldrb	r3, [r3, #0]
   14370:	b25b      	sxtb	r3, r3
   14372:	2b00      	cmp	r3, #0
   14374:	d0c4      	beq.n	14300 <pow+0x134>
   14376:	2000      	movs	r0, #0
   14378:	4642      	mov	r2, r8
   1437a:	4965      	ldr	r1, [pc, #404]	; (14510 <pow+0x344>)
   1437c:	6190      	str	r0, [r2, #24]
   1437e:	61d1      	str	r1, [r2, #28]
   14380:	2b02      	cmp	r3, #2
   14382:	d1c2      	bne.n	1430a <pow+0x13e>
   14384:	f003 fc2a 	bl	17bdc <__errno>
   14388:	2321      	movs	r3, #33	; 0x21
   1438a:	6003      	str	r3, [r0, #0]
   1438c:	e7c2      	b.n	14314 <pow+0x148>
   1438e:	2300      	movs	r3, #0
   14390:	0020      	movs	r0, r4
   14392:	0029      	movs	r1, r5
   14394:	f001 f9ea 	bl	1576c <__aeabi_dcmpeq>
   14398:	2800      	cmp	r0, #0
   1439a:	d100      	bne.n	1439e <pow+0x1d2>
   1439c:	e76b      	b.n	14276 <pow+0xaa>
   1439e:	ab04      	add	r3, sp, #16
   143a0:	4698      	mov	r8, r3
   143a2:	2301      	movs	r3, #1
   143a4:	4642      	mov	r2, r8
   143a6:	9304      	str	r3, [sp, #16]
   143a8:	4b57      	ldr	r3, [pc, #348]	; (14508 <pow+0x33c>)
   143aa:	4641      	mov	r1, r8
   143ac:	6053      	str	r3, [r2, #4]
   143ae:	4643      	mov	r3, r8
   143b0:	465a      	mov	r2, fp
   143b2:	621a      	str	r2, [r3, #32]
   143b4:	2200      	movs	r2, #0
   143b6:	609e      	str	r6, [r3, #8]
   143b8:	60df      	str	r7, [r3, #12]
   143ba:	611c      	str	r4, [r3, #16]
   143bc:	615d      	str	r5, [r3, #20]
   143be:	4b53      	ldr	r3, [pc, #332]	; (1450c <pow+0x340>)
   143c0:	618a      	str	r2, [r1, #24]
   143c2:	61cb      	str	r3, [r1, #28]
   143c4:	9200      	str	r2, [sp, #0]
   143c6:	9301      	str	r3, [sp, #4]
   143c8:	464b      	mov	r3, r9
   143ca:	2b02      	cmp	r3, #2
   143cc:	d19d      	bne.n	1430a <pow+0x13e>
   143ce:	e752      	b.n	14276 <pow+0xaa>
   143d0:	0030      	movs	r0, r6
   143d2:	0039      	movs	r1, r7
   143d4:	f000 ff20 	bl	15218 <finite>
   143d8:	2800      	cmp	r0, #0
   143da:	d100      	bne.n	143de <pow+0x212>
   143dc:	e75c      	b.n	14298 <pow+0xcc>
   143de:	0020      	movs	r0, r4
   143e0:	0029      	movs	r1, r5
   143e2:	f000 ff19 	bl	15218 <finite>
   143e6:	2800      	cmp	r0, #0
   143e8:	d100      	bne.n	143ec <pow+0x220>
   143ea:	e755      	b.n	14298 <pow+0xcc>
   143ec:	9800      	ldr	r0, [sp, #0]
   143ee:	9901      	ldr	r1, [sp, #4]
   143f0:	000b      	movs	r3, r1
   143f2:	0002      	movs	r2, r0
   143f4:	f003 fa98 	bl	17928 <__aeabi_dcmpun>
   143f8:	ab04      	add	r3, sp, #16
   143fa:	4698      	mov	r8, r3
   143fc:	2800      	cmp	r0, #0
   143fe:	d161      	bne.n	144c4 <pow+0x2f8>
   14400:	2303      	movs	r3, #3
   14402:	4642      	mov	r2, r8
   14404:	9304      	str	r3, [sp, #16]
   14406:	4b40      	ldr	r3, [pc, #256]	; (14508 <pow+0x33c>)
   14408:	6210      	str	r0, [r2, #32]
   1440a:	6053      	str	r3, [r2, #4]
   1440c:	4653      	mov	r3, sl
   1440e:	781b      	ldrb	r3, [r3, #0]
   14410:	6096      	str	r6, [r2, #8]
   14412:	60d7      	str	r7, [r2, #12]
   14414:	b25b      	sxtb	r3, r3
   14416:	6114      	str	r4, [r2, #16]
   14418:	6155      	str	r5, [r2, #20]
   1441a:	4699      	mov	r9, r3
   1441c:	2b00      	cmp	r3, #0
   1441e:	d12f      	bne.n	14480 <pow+0x2b4>
   14420:	22e0      	movs	r2, #224	; 0xe0
   14422:	4641      	mov	r1, r8
   14424:	4b3b      	ldr	r3, [pc, #236]	; (14514 <pow+0x348>)
   14426:	0612      	lsls	r2, r2, #24
   14428:	618a      	str	r2, [r1, #24]
   1442a:	61cb      	str	r3, [r1, #28]
   1442c:	0030      	movs	r0, r6
   1442e:	2200      	movs	r2, #0
   14430:	2300      	movs	r3, #0
   14432:	0039      	movs	r1, r7
   14434:	f001 f9a0 	bl	15778 <__aeabi_dcmplt>
   14438:	2800      	cmp	r0, #0
   1443a:	d100      	bne.n	1443e <pow+0x272>
   1443c:	e756      	b.n	142ec <pow+0x120>
   1443e:	2200      	movs	r2, #0
   14440:	4b35      	ldr	r3, [pc, #212]	; (14518 <pow+0x34c>)
   14442:	0020      	movs	r0, r4
   14444:	0029      	movs	r1, r5
   14446:	f002 fcd9 	bl	16dfc <__aeabi_dmul>
   1444a:	0004      	movs	r4, r0
   1444c:	000d      	movs	r5, r1
   1444e:	f000 fef5 	bl	1523c <rint>
   14452:	0002      	movs	r2, r0
   14454:	000b      	movs	r3, r1
   14456:	0020      	movs	r0, r4
   14458:	0029      	movs	r1, r5
   1445a:	f001 f987 	bl	1576c <__aeabi_dcmpeq>
   1445e:	2800      	cmp	r0, #0
   14460:	d105      	bne.n	1446e <pow+0x2a2>
   14462:	22e0      	movs	r2, #224	; 0xe0
   14464:	4b2d      	ldr	r3, [pc, #180]	; (1451c <pow+0x350>)
   14466:	0612      	lsls	r2, r2, #24
   14468:	4641      	mov	r1, r8
   1446a:	618a      	str	r2, [r1, #24]
   1446c:	61cb      	str	r3, [r1, #28]
   1446e:	4653      	mov	r3, sl
   14470:	781b      	ldrb	r3, [r3, #0]
   14472:	b25b      	sxtb	r3, r3
   14474:	4699      	mov	r9, r3
   14476:	464b      	mov	r3, r9
   14478:	2b02      	cmp	r3, #2
   1447a:	d000      	beq.n	1447e <pow+0x2b2>
   1447c:	e736      	b.n	142ec <pow+0x120>
   1447e:	e73a      	b.n	142f6 <pow+0x12a>
   14480:	2200      	movs	r2, #0
   14482:	4641      	mov	r1, r8
   14484:	4b26      	ldr	r3, [pc, #152]	; (14520 <pow+0x354>)
   14486:	0030      	movs	r0, r6
   14488:	618a      	str	r2, [r1, #24]
   1448a:	61cb      	str	r3, [r1, #28]
   1448c:	2200      	movs	r2, #0
   1448e:	2300      	movs	r3, #0
   14490:	0039      	movs	r1, r7
   14492:	f001 f971 	bl	15778 <__aeabi_dcmplt>
   14496:	2800      	cmp	r0, #0
   14498:	d0ed      	beq.n	14476 <pow+0x2aa>
   1449a:	2200      	movs	r2, #0
   1449c:	4b1e      	ldr	r3, [pc, #120]	; (14518 <pow+0x34c>)
   1449e:	0020      	movs	r0, r4
   144a0:	0029      	movs	r1, r5
   144a2:	f002 fcab 	bl	16dfc <__aeabi_dmul>
   144a6:	0004      	movs	r4, r0
   144a8:	000d      	movs	r5, r1
   144aa:	f000 fec7 	bl	1523c <rint>
   144ae:	0002      	movs	r2, r0
   144b0:	000b      	movs	r3, r1
   144b2:	0020      	movs	r0, r4
   144b4:	0029      	movs	r1, r5
   144b6:	f001 f959 	bl	1576c <__aeabi_dcmpeq>
   144ba:	2800      	cmp	r0, #0
   144bc:	d1d7      	bne.n	1446e <pow+0x2a2>
   144be:	2200      	movs	r2, #0
   144c0:	4b13      	ldr	r3, [pc, #76]	; (14510 <pow+0x344>)
   144c2:	e7d1      	b.n	14468 <pow+0x29c>
   144c4:	2301      	movs	r3, #1
   144c6:	4642      	mov	r2, r8
   144c8:	9304      	str	r3, [sp, #16]
   144ca:	4b0f      	ldr	r3, [pc, #60]	; (14508 <pow+0x33c>)
   144cc:	6053      	str	r3, [r2, #4]
   144ce:	4643      	mov	r3, r8
   144d0:	464a      	mov	r2, r9
   144d2:	611c      	str	r4, [r3, #16]
   144d4:	615d      	str	r5, [r3, #20]
   144d6:	621a      	str	r2, [r3, #32]
   144d8:	609e      	str	r6, [r3, #8]
   144da:	60df      	str	r7, [r3, #12]
   144dc:	2400      	movs	r4, #0
   144de:	4653      	mov	r3, sl
   144e0:	571c      	ldrsb	r4, [r3, r4]
   144e2:	2c00      	cmp	r4, #0
   144e4:	d100      	bne.n	144e8 <pow+0x31c>
   144e6:	e70b      	b.n	14300 <pow+0x134>
   144e8:	2300      	movs	r3, #0
   144ea:	2200      	movs	r2, #0
   144ec:	0019      	movs	r1, r3
   144ee:	0010      	movs	r0, r2
   144f0:	f002 f850 	bl	16594 <__aeabi_ddiv>
   144f4:	4643      	mov	r3, r8
   144f6:	6198      	str	r0, [r3, #24]
   144f8:	61d9      	str	r1, [r3, #28]
   144fa:	2c02      	cmp	r4, #2
   144fc:	d100      	bne.n	14500 <pow+0x334>
   144fe:	e741      	b.n	14384 <pow+0x1b8>
   14500:	e703      	b.n	1430a <pow+0x13e>
   14502:	46c0      	nop			; (mov r8, r8)
   14504:	20000029 	.word	0x20000029
   14508:	00019a60 	.word	0x00019a60
   1450c:	3ff00000 	.word	0x3ff00000
   14510:	fff00000 	.word	0xfff00000
   14514:	47efffff 	.word	0x47efffff
   14518:	3fe00000 	.word	0x3fe00000
   1451c:	c7efffff 	.word	0xc7efffff
   14520:	7ff00000 	.word	0x7ff00000

00014524 <sqrt>:
   14524:	b5f0      	push	{r4, r5, r6, r7, lr}
   14526:	4647      	mov	r7, r8
   14528:	46ce      	mov	lr, r9
   1452a:	b580      	push	{r7, lr}
   1452c:	b08d      	sub	sp, #52	; 0x34
   1452e:	0004      	movs	r4, r0
   14530:	000d      	movs	r5, r1
   14532:	f000 fd8d 	bl	15050 <__ieee754_sqrt>
   14536:	4b29      	ldr	r3, [pc, #164]	; (145dc <sqrt+0xb8>)
   14538:	0006      	movs	r6, r0
   1453a:	781b      	ldrb	r3, [r3, #0]
   1453c:	000f      	movs	r7, r1
   1453e:	b25b      	sxtb	r3, r3
   14540:	4698      	mov	r8, r3
   14542:	3301      	adds	r3, #1
   14544:	d010      	beq.n	14568 <sqrt+0x44>
   14546:	0022      	movs	r2, r4
   14548:	002b      	movs	r3, r5
   1454a:	0020      	movs	r0, r4
   1454c:	0029      	movs	r1, r5
   1454e:	f003 f9eb 	bl	17928 <__aeabi_dcmpun>
   14552:	4681      	mov	r9, r0
   14554:	2800      	cmp	r0, #0
   14556:	d107      	bne.n	14568 <sqrt+0x44>
   14558:	2200      	movs	r2, #0
   1455a:	2300      	movs	r3, #0
   1455c:	0020      	movs	r0, r4
   1455e:	0029      	movs	r1, r5
   14560:	f001 f90a 	bl	15778 <__aeabi_dcmplt>
   14564:	2800      	cmp	r0, #0
   14566:	d106      	bne.n	14576 <sqrt+0x52>
   14568:	0030      	movs	r0, r6
   1456a:	0039      	movs	r1, r7
   1456c:	b00d      	add	sp, #52	; 0x34
   1456e:	bc0c      	pop	{r2, r3}
   14570:	4690      	mov	r8, r2
   14572:	4699      	mov	r9, r3
   14574:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14576:	2301      	movs	r3, #1
   14578:	9302      	str	r3, [sp, #8]
   1457a:	4b19      	ldr	r3, [pc, #100]	; (145e0 <sqrt+0xbc>)
   1457c:	9406      	str	r4, [sp, #24]
   1457e:	9507      	str	r5, [sp, #28]
   14580:	9303      	str	r3, [sp, #12]
   14582:	464b      	mov	r3, r9
   14584:	930a      	str	r3, [sp, #40]	; 0x28
   14586:	4643      	mov	r3, r8
   14588:	9404      	str	r4, [sp, #16]
   1458a:	9505      	str	r5, [sp, #20]
   1458c:	2b00      	cmp	r3, #0
   1458e:	d015      	beq.n	145bc <sqrt+0x98>
   14590:	2300      	movs	r3, #0
   14592:	2200      	movs	r2, #0
   14594:	0019      	movs	r1, r3
   14596:	0010      	movs	r0, r2
   14598:	f001 fffc 	bl	16594 <__aeabi_ddiv>
   1459c:	4643      	mov	r3, r8
   1459e:	9008      	str	r0, [sp, #32]
   145a0:	9109      	str	r1, [sp, #36]	; 0x24
   145a2:	2b02      	cmp	r3, #2
   145a4:	d10e      	bne.n	145c4 <sqrt+0xa0>
   145a6:	f003 fb19 	bl	17bdc <__errno>
   145aa:	2321      	movs	r3, #33	; 0x21
   145ac:	6003      	str	r3, [r0, #0]
   145ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   145b0:	9301      	str	r3, [sp, #4]
   145b2:	2b00      	cmp	r3, #0
   145b4:	d10c      	bne.n	145d0 <sqrt+0xac>
   145b6:	9e08      	ldr	r6, [sp, #32]
   145b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   145ba:	e7d5      	b.n	14568 <sqrt+0x44>
   145bc:	2300      	movs	r3, #0
   145be:	2400      	movs	r4, #0
   145c0:	9308      	str	r3, [sp, #32]
   145c2:	9409      	str	r4, [sp, #36]	; 0x24
   145c4:	a802      	add	r0, sp, #8
   145c6:	f000 fe31 	bl	1522c <matherr>
   145ca:	2800      	cmp	r0, #0
   145cc:	d1ef      	bne.n	145ae <sqrt+0x8a>
   145ce:	e7ea      	b.n	145a6 <sqrt+0x82>
   145d0:	f003 fb04 	bl	17bdc <__errno>
   145d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   145d6:	9301      	str	r3, [sp, #4]
   145d8:	6003      	str	r3, [r0, #0]
   145da:	e7ec      	b.n	145b6 <sqrt+0x92>
   145dc:	20000029 	.word	0x20000029
   145e0:	00019a64 	.word	0x00019a64

000145e4 <__ieee754_pow>:
   145e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   145e6:	4657      	mov	r7, sl
   145e8:	464e      	mov	r6, r9
   145ea:	4645      	mov	r5, r8
   145ec:	46de      	mov	lr, fp
   145ee:	001c      	movs	r4, r3
   145f0:	0013      	movs	r3, r2
   145f2:	b5e0      	push	{r5, r6, r7, lr}
   145f4:	0065      	lsls	r5, r4, #1
   145f6:	b091      	sub	sp, #68	; 0x44
   145f8:	086d      	lsrs	r5, r5, #1
   145fa:	9300      	str	r3, [sp, #0]
   145fc:	9401      	str	r4, [sp, #4]
   145fe:	0007      	movs	r7, r0
   14600:	000e      	movs	r6, r1
   14602:	4680      	mov	r8, r0
   14604:	4689      	mov	r9, r1
   14606:	46a2      	mov	sl, r4
   14608:	432b      	orrs	r3, r5
   1460a:	d031      	beq.n	14670 <__ieee754_pow+0x8c>
   1460c:	4b67      	ldr	r3, [pc, #412]	; (147ac <__ieee754_pow+0x1c8>)
   1460e:	0074      	lsls	r4, r6, #1
   14610:	0864      	lsrs	r4, r4, #1
   14612:	429c      	cmp	r4, r3
   14614:	dc27      	bgt.n	14666 <__ieee754_pow+0x82>
   14616:	d024      	beq.n	14662 <__ieee754_pow+0x7e>
   14618:	429d      	cmp	r5, r3
   1461a:	dc24      	bgt.n	14666 <__ieee754_pow+0x82>
   1461c:	4b63      	ldr	r3, [pc, #396]	; (147ac <__ieee754_pow+0x1c8>)
   1461e:	429d      	cmp	r5, r3
   14620:	d100      	bne.n	14624 <__ieee754_pow+0x40>
   14622:	e081      	b.n	14728 <__ieee754_pow+0x144>
   14624:	2300      	movs	r3, #0
   14626:	469b      	mov	fp, r3
   14628:	464b      	mov	r3, r9
   1462a:	2b00      	cmp	r3, #0
   1462c:	da00      	bge.n	14630 <__ieee754_pow+0x4c>
   1462e:	e07f      	b.n	14730 <__ieee754_pow+0x14c>
   14630:	2a00      	cmp	r2, #0
   14632:	d12c      	bne.n	1468e <__ieee754_pow+0xaa>
   14634:	4b5d      	ldr	r3, [pc, #372]	; (147ac <__ieee754_pow+0x1c8>)
   14636:	429d      	cmp	r5, r3
   14638:	d100      	bne.n	1463c <__ieee754_pow+0x58>
   1463a:	e097      	b.n	1476c <__ieee754_pow+0x188>
   1463c:	4b5c      	ldr	r3, [pc, #368]	; (147b0 <__ieee754_pow+0x1cc>)
   1463e:	429d      	cmp	r5, r3
   14640:	d066      	beq.n	14710 <__ieee754_pow+0x12c>
   14642:	2380      	movs	r3, #128	; 0x80
   14644:	05db      	lsls	r3, r3, #23
   14646:	459a      	cmp	sl, r3
   14648:	d100      	bne.n	1464c <__ieee754_pow+0x68>
   1464a:	e3b9      	b.n	14dc0 <__ieee754_pow+0x7dc>
   1464c:	4b59      	ldr	r3, [pc, #356]	; (147b4 <__ieee754_pow+0x1d0>)
   1464e:	459a      	cmp	sl, r3
   14650:	d11d      	bne.n	1468e <__ieee754_pow+0xaa>
   14652:	464b      	mov	r3, r9
   14654:	2b00      	cmp	r3, #0
   14656:	db1a      	blt.n	1468e <__ieee754_pow+0xaa>
   14658:	0038      	movs	r0, r7
   1465a:	0031      	movs	r1, r6
   1465c:	f000 fcf8 	bl	15050 <__ieee754_sqrt>
   14660:	e008      	b.n	14674 <__ieee754_pow+0x90>
   14662:	2800      	cmp	r0, #0
   14664:	d00d      	beq.n	14682 <__ieee754_pow+0x9e>
   14666:	4b54      	ldr	r3, [pc, #336]	; (147b8 <__ieee754_pow+0x1d4>)
   14668:	469c      	mov	ip, r3
   1466a:	4464      	add	r4, ip
   1466c:	4327      	orrs	r7, r4
   1466e:	d10a      	bne.n	14686 <__ieee754_pow+0xa2>
   14670:	2000      	movs	r0, #0
   14672:	494f      	ldr	r1, [pc, #316]	; (147b0 <__ieee754_pow+0x1cc>)
   14674:	b011      	add	sp, #68	; 0x44
   14676:	bc3c      	pop	{r2, r3, r4, r5}
   14678:	4690      	mov	r8, r2
   1467a:	4699      	mov	r9, r3
   1467c:	46a2      	mov	sl, r4
   1467e:	46ab      	mov	fp, r5
   14680:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14682:	42a5      	cmp	r5, r4
   14684:	ddca      	ble.n	1461c <__ieee754_pow+0x38>
   14686:	484d      	ldr	r0, [pc, #308]	; (147bc <__ieee754_pow+0x1d8>)
   14688:	f000 fdd2 	bl	15230 <nan>
   1468c:	e7f2      	b.n	14674 <__ieee754_pow+0x90>
   1468e:	0038      	movs	r0, r7
   14690:	0031      	movs	r1, r6
   14692:	f000 fdbd 	bl	15210 <fabs>
   14696:	4643      	mov	r3, r8
   14698:	2b00      	cmp	r3, #0
   1469a:	d11d      	bne.n	146d8 <__ieee754_pow+0xf4>
   1469c:	2c00      	cmp	r4, #0
   1469e:	d004      	beq.n	146aa <__ieee754_pow+0xc6>
   146a0:	4a43      	ldr	r2, [pc, #268]	; (147b0 <__ieee754_pow+0x1cc>)
   146a2:	00b3      	lsls	r3, r6, #2
   146a4:	089b      	lsrs	r3, r3, #2
   146a6:	4293      	cmp	r3, r2
   146a8:	d116      	bne.n	146d8 <__ieee754_pow+0xf4>
   146aa:	4653      	mov	r3, sl
   146ac:	2b00      	cmp	r3, #0
   146ae:	da00      	bge.n	146b2 <__ieee754_pow+0xce>
   146b0:	e3c5      	b.n	14e3e <__ieee754_pow+0x85a>
   146b2:	464b      	mov	r3, r9
   146b4:	2b00      	cmp	r3, #0
   146b6:	dadd      	bge.n	14674 <__ieee754_pow+0x90>
   146b8:	4b3f      	ldr	r3, [pc, #252]	; (147b8 <__ieee754_pow+0x1d4>)
   146ba:	469c      	mov	ip, r3
   146bc:	465b      	mov	r3, fp
   146be:	4464      	add	r4, ip
   146c0:	431c      	orrs	r4, r3
   146c2:	d101      	bne.n	146c8 <__ieee754_pow+0xe4>
   146c4:	f000 fc53 	bl	14f6e <__ieee754_pow+0x98a>
   146c8:	465b      	mov	r3, fp
   146ca:	2b01      	cmp	r3, #1
   146cc:	d1d2      	bne.n	14674 <__ieee754_pow+0x90>
   146ce:	2480      	movs	r4, #128	; 0x80
   146d0:	0624      	lsls	r4, r4, #24
   146d2:	190b      	adds	r3, r1, r4
   146d4:	0019      	movs	r1, r3
   146d6:	e7cd      	b.n	14674 <__ieee754_pow+0x90>
   146d8:	0ff3      	lsrs	r3, r6, #31
   146da:	3b01      	subs	r3, #1
   146dc:	4698      	mov	r8, r3
   146de:	465b      	mov	r3, fp
   146e0:	4642      	mov	r2, r8
   146e2:	4313      	orrs	r3, r2
   146e4:	d057      	beq.n	14796 <__ieee754_pow+0x1b2>
   146e6:	4b36      	ldr	r3, [pc, #216]	; (147c0 <__ieee754_pow+0x1dc>)
   146e8:	429d      	cmp	r5, r3
   146ea:	dd77      	ble.n	147dc <__ieee754_pow+0x1f8>
   146ec:	4b35      	ldr	r3, [pc, #212]	; (147c4 <__ieee754_pow+0x1e0>)
   146ee:	429d      	cmp	r5, r3
   146f0:	dc00      	bgt.n	146f4 <__ieee754_pow+0x110>
   146f2:	e3b1      	b.n	14e58 <__ieee754_pow+0x874>
   146f4:	4b34      	ldr	r3, [pc, #208]	; (147c8 <__ieee754_pow+0x1e4>)
   146f6:	429c      	cmp	r4, r3
   146f8:	dc00      	bgt.n	146fc <__ieee754_pow+0x118>
   146fa:	e3a8      	b.n	14e4e <__ieee754_pow+0x86a>
   146fc:	4653      	mov	r3, sl
   146fe:	2b00      	cmp	r3, #0
   14700:	dd43      	ble.n	1478a <__ieee754_pow+0x1a6>
   14702:	4a32      	ldr	r2, [pc, #200]	; (147cc <__ieee754_pow+0x1e8>)
   14704:	4b32      	ldr	r3, [pc, #200]	; (147d0 <__ieee754_pow+0x1ec>)
   14706:	0010      	movs	r0, r2
   14708:	0019      	movs	r1, r3
   1470a:	f002 fb77 	bl	16dfc <__aeabi_dmul>
   1470e:	e7b1      	b.n	14674 <__ieee754_pow+0x90>
   14710:	4653      	mov	r3, sl
   14712:	0038      	movs	r0, r7
   14714:	0031      	movs	r1, r6
   14716:	2b00      	cmp	r3, #0
   14718:	daac      	bge.n	14674 <__ieee754_pow+0x90>
   1471a:	003a      	movs	r2, r7
   1471c:	0033      	movs	r3, r6
   1471e:	2000      	movs	r0, #0
   14720:	4923      	ldr	r1, [pc, #140]	; (147b0 <__ieee754_pow+0x1cc>)
   14722:	f001 ff37 	bl	16594 <__aeabi_ddiv>
   14726:	e7a5      	b.n	14674 <__ieee754_pow+0x90>
   14728:	2a00      	cmp	r2, #0
   1472a:	d100      	bne.n	1472e <__ieee754_pow+0x14a>
   1472c:	e77a      	b.n	14624 <__ieee754_pow+0x40>
   1472e:	e79a      	b.n	14666 <__ieee754_pow+0x82>
   14730:	4b28      	ldr	r3, [pc, #160]	; (147d4 <__ieee754_pow+0x1f0>)
   14732:	429d      	cmp	r5, r3
   14734:	dc2c      	bgt.n	14790 <__ieee754_pow+0x1ac>
   14736:	4b24      	ldr	r3, [pc, #144]	; (147c8 <__ieee754_pow+0x1e4>)
   14738:	429d      	cmp	r5, r3
   1473a:	dc00      	bgt.n	1473e <__ieee754_pow+0x15a>
   1473c:	e778      	b.n	14630 <__ieee754_pow+0x4c>
   1473e:	4926      	ldr	r1, [pc, #152]	; (147d8 <__ieee754_pow+0x1f4>)
   14740:	152b      	asrs	r3, r5, #20
   14742:	468c      	mov	ip, r1
   14744:	4463      	add	r3, ip
   14746:	2b14      	cmp	r3, #20
   14748:	dc01      	bgt.n	1474e <__ieee754_pow+0x16a>
   1474a:	f000 fbf3 	bl	14f34 <__ieee754_pow+0x950>
   1474e:	2134      	movs	r1, #52	; 0x34
   14750:	1acb      	subs	r3, r1, r3
   14752:	9900      	ldr	r1, [sp, #0]
   14754:	40d9      	lsrs	r1, r3
   14756:	0008      	movs	r0, r1
   14758:	4098      	lsls	r0, r3
   1475a:	4282      	cmp	r2, r0
   1475c:	d000      	beq.n	14760 <__ieee754_pow+0x17c>
   1475e:	e767      	b.n	14630 <__ieee754_pow+0x4c>
   14760:	2301      	movs	r3, #1
   14762:	4019      	ands	r1, r3
   14764:	3301      	adds	r3, #1
   14766:	1a5b      	subs	r3, r3, r1
   14768:	469b      	mov	fp, r3
   1476a:	e761      	b.n	14630 <__ieee754_pow+0x4c>
   1476c:	4b12      	ldr	r3, [pc, #72]	; (147b8 <__ieee754_pow+0x1d4>)
   1476e:	18e3      	adds	r3, r4, r3
   14770:	431f      	orrs	r7, r3
   14772:	d100      	bne.n	14776 <__ieee754_pow+0x192>
   14774:	e77c      	b.n	14670 <__ieee754_pow+0x8c>
   14776:	4b14      	ldr	r3, [pc, #80]	; (147c8 <__ieee754_pow+0x1e4>)
   14778:	429c      	cmp	r4, r3
   1477a:	dc00      	bgt.n	1477e <__ieee754_pow+0x19a>
   1477c:	e327      	b.n	14dce <__ieee754_pow+0x7ea>
   1477e:	9800      	ldr	r0, [sp, #0]
   14780:	9901      	ldr	r1, [sp, #4]
   14782:	4653      	mov	r3, sl
   14784:	2b00      	cmp	r3, #0
   14786:	db00      	blt.n	1478a <__ieee754_pow+0x1a6>
   14788:	e774      	b.n	14674 <__ieee754_pow+0x90>
   1478a:	2000      	movs	r0, #0
   1478c:	2100      	movs	r1, #0
   1478e:	e771      	b.n	14674 <__ieee754_pow+0x90>
   14790:	2302      	movs	r3, #2
   14792:	469b      	mov	fp, r3
   14794:	e74c      	b.n	14630 <__ieee754_pow+0x4c>
   14796:	003a      	movs	r2, r7
   14798:	0033      	movs	r3, r6
   1479a:	0038      	movs	r0, r7
   1479c:	0031      	movs	r1, r6
   1479e:	f002 fdad 	bl	172fc <__aeabi_dsub>
   147a2:	0002      	movs	r2, r0
   147a4:	000b      	movs	r3, r1
   147a6:	f001 fef5 	bl	16594 <__aeabi_ddiv>
   147aa:	e763      	b.n	14674 <__ieee754_pow+0x90>
   147ac:	7ff00000 	.word	0x7ff00000
   147b0:	3ff00000 	.word	0x3ff00000
   147b4:	3fe00000 	.word	0x3fe00000
   147b8:	c0100000 	.word	0xc0100000
   147bc:	00019a68 	.word	0x00019a68
   147c0:	41e00000 	.word	0x41e00000
   147c4:	43f00000 	.word	0x43f00000
   147c8:	3fefffff 	.word	0x3fefffff
   147cc:	8800759c 	.word	0x8800759c
   147d0:	7e37e43c 	.word	0x7e37e43c
   147d4:	433fffff 	.word	0x433fffff
   147d8:	fffffc01 	.word	0xfffffc01
   147dc:	4be9      	ldr	r3, [pc, #932]	; (14b84 <__ieee754_pow+0x5a0>)
   147de:	2200      	movs	r2, #0
   147e0:	429c      	cmp	r4, r3
   147e2:	dc06      	bgt.n	147f2 <__ieee754_pow+0x20e>
   147e4:	2200      	movs	r2, #0
   147e6:	4be8      	ldr	r3, [pc, #928]	; (14b88 <__ieee754_pow+0x5a4>)
   147e8:	f002 fb08 	bl	16dfc <__aeabi_dmul>
   147ec:	2235      	movs	r2, #53	; 0x35
   147ee:	000c      	movs	r4, r1
   147f0:	4252      	negs	r2, r2
   147f2:	4de6      	ldr	r5, [pc, #920]	; (14b8c <__ieee754_pow+0x5a8>)
   147f4:	1523      	asrs	r3, r4, #20
   147f6:	46ac      	mov	ip, r5
   147f8:	4463      	add	r3, ip
   147fa:	4699      	mov	r9, r3
   147fc:	0324      	lsls	r4, r4, #12
   147fe:	4de4      	ldr	r5, [pc, #912]	; (14b90 <__ieee754_pow+0x5ac>)
   14800:	4be4      	ldr	r3, [pc, #912]	; (14b94 <__ieee754_pow+0x5b0>)
   14802:	0b24      	lsrs	r4, r4, #12
   14804:	4491      	add	r9, r2
   14806:	4325      	orrs	r5, r4
   14808:	429c      	cmp	r4, r3
   1480a:	dd09      	ble.n	14820 <__ieee754_pow+0x23c>
   1480c:	4be2      	ldr	r3, [pc, #904]	; (14b98 <__ieee754_pow+0x5b4>)
   1480e:	429c      	cmp	r4, r3
   14810:	dc00      	bgt.n	14814 <__ieee754_pow+0x230>
   14812:	e3b6      	b.n	14f82 <__ieee754_pow+0x99e>
   14814:	2301      	movs	r3, #1
   14816:	469c      	mov	ip, r3
   14818:	4be0      	ldr	r3, [pc, #896]	; (14b9c <__ieee754_pow+0x5b8>)
   1481a:	44e1      	add	r9, ip
   1481c:	469c      	mov	ip, r3
   1481e:	4465      	add	r5, ip
   14820:	2300      	movs	r3, #0
   14822:	2400      	movs	r4, #0
   14824:	2200      	movs	r2, #0
   14826:	9308      	str	r3, [sp, #32]
   14828:	9409      	str	r4, [sp, #36]	; 0x24
   1482a:	930c      	str	r3, [sp, #48]	; 0x30
   1482c:	940d      	str	r4, [sp, #52]	; 0x34
   1482e:	2400      	movs	r4, #0
   14830:	4bd7      	ldr	r3, [pc, #860]	; (14b90 <__ieee754_pow+0x5ac>)
   14832:	9206      	str	r2, [sp, #24]
   14834:	9307      	str	r3, [sp, #28]
   14836:	9a06      	ldr	r2, [sp, #24]
   14838:	9b07      	ldr	r3, [sp, #28]
   1483a:	0029      	movs	r1, r5
   1483c:	900a      	str	r0, [sp, #40]	; 0x28
   1483e:	910b      	str	r1, [sp, #44]	; 0x2c
   14840:	f002 fd5c 	bl	172fc <__aeabi_dsub>
   14844:	9a06      	ldr	r2, [sp, #24]
   14846:	9b07      	ldr	r3, [sp, #28]
   14848:	0006      	movs	r6, r0
   1484a:	000f      	movs	r7, r1
   1484c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1484e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14850:	f001 fb90 	bl	15f74 <__aeabi_dadd>
   14854:	0002      	movs	r2, r0
   14856:	000b      	movs	r3, r1
   14858:	2000      	movs	r0, #0
   1485a:	49cd      	ldr	r1, [pc, #820]	; (14b90 <__ieee754_pow+0x5ac>)
   1485c:	f001 fe9a 	bl	16594 <__aeabi_ddiv>
   14860:	000a      	movs	r2, r1
   14862:	0001      	movs	r1, r0
   14864:	0013      	movs	r3, r2
   14866:	910e      	str	r1, [sp, #56]	; 0x38
   14868:	920f      	str	r2, [sp, #60]	; 0x3c
   1486a:	0002      	movs	r2, r0
   1486c:	0039      	movs	r1, r7
   1486e:	0030      	movs	r0, r6
   14870:	f002 fac4 	bl	16dfc <__aeabi_dmul>
   14874:	000a      	movs	r2, r1
   14876:	0001      	movs	r1, r0
   14878:	2080      	movs	r0, #128	; 0x80
   1487a:	9104      	str	r1, [sp, #16]
   1487c:	9205      	str	r2, [sp, #20]
   1487e:	0013      	movs	r3, r2
   14880:	2200      	movs	r2, #0
   14882:	1069      	asrs	r1, r5, #1
   14884:	2580      	movs	r5, #128	; 0x80
   14886:	0300      	lsls	r0, r0, #12
   14888:	4684      	mov	ip, r0
   1488a:	9202      	str	r2, [sp, #8]
   1488c:	9303      	str	r3, [sp, #12]
   1488e:	2200      	movs	r2, #0
   14890:	05ad      	lsls	r5, r5, #22
   14892:	430d      	orrs	r5, r1
   14894:	4465      	add	r5, ip
   14896:	192b      	adds	r3, r5, r4
   14898:	9802      	ldr	r0, [sp, #8]
   1489a:	9903      	ldr	r1, [sp, #12]
   1489c:	0014      	movs	r4, r2
   1489e:	001d      	movs	r5, r3
   148a0:	f002 faac 	bl	16dfc <__aeabi_dmul>
   148a4:	0002      	movs	r2, r0
   148a6:	000b      	movs	r3, r1
   148a8:	0030      	movs	r0, r6
   148aa:	0039      	movs	r1, r7
   148ac:	f002 fd26 	bl	172fc <__aeabi_dsub>
   148b0:	9a06      	ldr	r2, [sp, #24]
   148b2:	9b07      	ldr	r3, [sp, #28]
   148b4:	0006      	movs	r6, r0
   148b6:	000f      	movs	r7, r1
   148b8:	0020      	movs	r0, r4
   148ba:	0029      	movs	r1, r5
   148bc:	f002 fd1e 	bl	172fc <__aeabi_dsub>
   148c0:	0002      	movs	r2, r0
   148c2:	000b      	movs	r3, r1
   148c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   148c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   148c8:	f002 fd18 	bl	172fc <__aeabi_dsub>
   148cc:	9a02      	ldr	r2, [sp, #8]
   148ce:	9b03      	ldr	r3, [sp, #12]
   148d0:	f002 fa94 	bl	16dfc <__aeabi_dmul>
   148d4:	0002      	movs	r2, r0
   148d6:	000b      	movs	r3, r1
   148d8:	0030      	movs	r0, r6
   148da:	0039      	movs	r1, r7
   148dc:	f002 fd0e 	bl	172fc <__aeabi_dsub>
   148e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   148e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   148e4:	f002 fa8a 	bl	16dfc <__aeabi_dmul>
   148e8:	9d04      	ldr	r5, [sp, #16]
   148ea:	9e05      	ldr	r6, [sp, #20]
   148ec:	9006      	str	r0, [sp, #24]
   148ee:	9107      	str	r1, [sp, #28]
   148f0:	002a      	movs	r2, r5
   148f2:	0033      	movs	r3, r6
   148f4:	0028      	movs	r0, r5
   148f6:	0031      	movs	r1, r6
   148f8:	f002 fa80 	bl	16dfc <__aeabi_dmul>
   148fc:	0006      	movs	r6, r0
   148fe:	000f      	movs	r7, r1
   14900:	4aa7      	ldr	r2, [pc, #668]	; (14ba0 <__ieee754_pow+0x5bc>)
   14902:	4ba8      	ldr	r3, [pc, #672]	; (14ba4 <__ieee754_pow+0x5c0>)
   14904:	f002 fa7a 	bl	16dfc <__aeabi_dmul>
   14908:	4aa7      	ldr	r2, [pc, #668]	; (14ba8 <__ieee754_pow+0x5c4>)
   1490a:	4ba8      	ldr	r3, [pc, #672]	; (14bac <__ieee754_pow+0x5c8>)
   1490c:	f001 fb32 	bl	15f74 <__aeabi_dadd>
   14910:	0032      	movs	r2, r6
   14912:	003b      	movs	r3, r7
   14914:	f002 fa72 	bl	16dfc <__aeabi_dmul>
   14918:	4aa5      	ldr	r2, [pc, #660]	; (14bb0 <__ieee754_pow+0x5cc>)
   1491a:	4ba6      	ldr	r3, [pc, #664]	; (14bb4 <__ieee754_pow+0x5d0>)
   1491c:	f001 fb2a 	bl	15f74 <__aeabi_dadd>
   14920:	0032      	movs	r2, r6
   14922:	003b      	movs	r3, r7
   14924:	f002 fa6a 	bl	16dfc <__aeabi_dmul>
   14928:	4aa3      	ldr	r2, [pc, #652]	; (14bb8 <__ieee754_pow+0x5d4>)
   1492a:	4ba4      	ldr	r3, [pc, #656]	; (14bbc <__ieee754_pow+0x5d8>)
   1492c:	f001 fb22 	bl	15f74 <__aeabi_dadd>
   14930:	0032      	movs	r2, r6
   14932:	003b      	movs	r3, r7
   14934:	f002 fa62 	bl	16dfc <__aeabi_dmul>
   14938:	4aa1      	ldr	r2, [pc, #644]	; (14bc0 <__ieee754_pow+0x5dc>)
   1493a:	4ba2      	ldr	r3, [pc, #648]	; (14bc4 <__ieee754_pow+0x5e0>)
   1493c:	f001 fb1a 	bl	15f74 <__aeabi_dadd>
   14940:	0032      	movs	r2, r6
   14942:	003b      	movs	r3, r7
   14944:	f002 fa5a 	bl	16dfc <__aeabi_dmul>
   14948:	4a9f      	ldr	r2, [pc, #636]	; (14bc8 <__ieee754_pow+0x5e4>)
   1494a:	4ba0      	ldr	r3, [pc, #640]	; (14bcc <__ieee754_pow+0x5e8>)
   1494c:	f001 fb12 	bl	15f74 <__aeabi_dadd>
   14950:	0032      	movs	r2, r6
   14952:	0004      	movs	r4, r0
   14954:	000d      	movs	r5, r1
   14956:	003b      	movs	r3, r7
   14958:	0030      	movs	r0, r6
   1495a:	0039      	movs	r1, r7
   1495c:	f002 fa4e 	bl	16dfc <__aeabi_dmul>
   14960:	0002      	movs	r2, r0
   14962:	000b      	movs	r3, r1
   14964:	0020      	movs	r0, r4
   14966:	0029      	movs	r1, r5
   14968:	f002 fa48 	bl	16dfc <__aeabi_dmul>
   1496c:	9e02      	ldr	r6, [sp, #8]
   1496e:	9f03      	ldr	r7, [sp, #12]
   14970:	0004      	movs	r4, r0
   14972:	000d      	movs	r5, r1
   14974:	9804      	ldr	r0, [sp, #16]
   14976:	9905      	ldr	r1, [sp, #20]
   14978:	0032      	movs	r2, r6
   1497a:	003b      	movs	r3, r7
   1497c:	f001 fafa 	bl	15f74 <__aeabi_dadd>
   14980:	9a06      	ldr	r2, [sp, #24]
   14982:	9b07      	ldr	r3, [sp, #28]
   14984:	f002 fa3a 	bl	16dfc <__aeabi_dmul>
   14988:	0022      	movs	r2, r4
   1498a:	002b      	movs	r3, r5
   1498c:	f001 faf2 	bl	15f74 <__aeabi_dadd>
   14990:	0032      	movs	r2, r6
   14992:	900a      	str	r0, [sp, #40]	; 0x28
   14994:	910b      	str	r1, [sp, #44]	; 0x2c
   14996:	003b      	movs	r3, r7
   14998:	0030      	movs	r0, r6
   1499a:	0039      	movs	r1, r7
   1499c:	9602      	str	r6, [sp, #8]
   1499e:	9703      	str	r7, [sp, #12]
   149a0:	f002 fa2c 	bl	16dfc <__aeabi_dmul>
   149a4:	2200      	movs	r2, #0
   149a6:	4b8a      	ldr	r3, [pc, #552]	; (14bd0 <__ieee754_pow+0x5ec>)
   149a8:	0004      	movs	r4, r0
   149aa:	000d      	movs	r5, r1
   149ac:	f001 fae2 	bl	15f74 <__aeabi_dadd>
   149b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   149b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   149b4:	f001 fade 	bl	15f74 <__aeabi_dadd>
   149b8:	2600      	movs	r6, #0
   149ba:	000f      	movs	r7, r1
   149bc:	0032      	movs	r2, r6
   149be:	000b      	movs	r3, r1
   149c0:	9802      	ldr	r0, [sp, #8]
   149c2:	9903      	ldr	r1, [sp, #12]
   149c4:	f002 fa1a 	bl	16dfc <__aeabi_dmul>
   149c8:	2200      	movs	r2, #0
   149ca:	9002      	str	r0, [sp, #8]
   149cc:	9103      	str	r1, [sp, #12]
   149ce:	4b80      	ldr	r3, [pc, #512]	; (14bd0 <__ieee754_pow+0x5ec>)
   149d0:	0030      	movs	r0, r6
   149d2:	0039      	movs	r1, r7
   149d4:	f002 fc92 	bl	172fc <__aeabi_dsub>
   149d8:	0022      	movs	r2, r4
   149da:	002b      	movs	r3, r5
   149dc:	f002 fc8e 	bl	172fc <__aeabi_dsub>
   149e0:	0002      	movs	r2, r0
   149e2:	000b      	movs	r3, r1
   149e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   149e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   149e8:	f002 fc88 	bl	172fc <__aeabi_dsub>
   149ec:	9a04      	ldr	r2, [sp, #16]
   149ee:	9b05      	ldr	r3, [sp, #20]
   149f0:	f002 fa04 	bl	16dfc <__aeabi_dmul>
   149f4:	0032      	movs	r2, r6
   149f6:	0004      	movs	r4, r0
   149f8:	000d      	movs	r5, r1
   149fa:	9806      	ldr	r0, [sp, #24]
   149fc:	9907      	ldr	r1, [sp, #28]
   149fe:	003b      	movs	r3, r7
   14a00:	f002 f9fc 	bl	16dfc <__aeabi_dmul>
   14a04:	0002      	movs	r2, r0
   14a06:	000b      	movs	r3, r1
   14a08:	0020      	movs	r0, r4
   14a0a:	0029      	movs	r1, r5
   14a0c:	f001 fab2 	bl	15f74 <__aeabi_dadd>
   14a10:	0004      	movs	r4, r0
   14a12:	000d      	movs	r5, r1
   14a14:	0002      	movs	r2, r0
   14a16:	000b      	movs	r3, r1
   14a18:	9802      	ldr	r0, [sp, #8]
   14a1a:	9903      	ldr	r1, [sp, #12]
   14a1c:	f001 faaa 	bl	15f74 <__aeabi_dadd>
   14a20:	2600      	movs	r6, #0
   14a22:	22e0      	movs	r2, #224	; 0xe0
   14a24:	4b6b      	ldr	r3, [pc, #428]	; (14bd4 <__ieee754_pow+0x5f0>)
   14a26:	0612      	lsls	r2, r2, #24
   14a28:	0030      	movs	r0, r6
   14a2a:	000f      	movs	r7, r1
   14a2c:	f002 f9e6 	bl	16dfc <__aeabi_dmul>
   14a30:	9a02      	ldr	r2, [sp, #8]
   14a32:	9b03      	ldr	r3, [sp, #12]
   14a34:	9004      	str	r0, [sp, #16]
   14a36:	9105      	str	r1, [sp, #20]
   14a38:	0030      	movs	r0, r6
   14a3a:	0039      	movs	r1, r7
   14a3c:	f002 fc5e 	bl	172fc <__aeabi_dsub>
   14a40:	0002      	movs	r2, r0
   14a42:	000b      	movs	r3, r1
   14a44:	0020      	movs	r0, r4
   14a46:	0029      	movs	r1, r5
   14a48:	f002 fc58 	bl	172fc <__aeabi_dsub>
   14a4c:	4a62      	ldr	r2, [pc, #392]	; (14bd8 <__ieee754_pow+0x5f4>)
   14a4e:	4b61      	ldr	r3, [pc, #388]	; (14bd4 <__ieee754_pow+0x5f0>)
   14a50:	f002 f9d4 	bl	16dfc <__aeabi_dmul>
   14a54:	4a61      	ldr	r2, [pc, #388]	; (14bdc <__ieee754_pow+0x5f8>)
   14a56:	0004      	movs	r4, r0
   14a58:	000d      	movs	r5, r1
   14a5a:	4b61      	ldr	r3, [pc, #388]	; (14be0 <__ieee754_pow+0x5fc>)
   14a5c:	0030      	movs	r0, r6
   14a5e:	0039      	movs	r1, r7
   14a60:	f002 f9cc 	bl	16dfc <__aeabi_dmul>
   14a64:	0002      	movs	r2, r0
   14a66:	000b      	movs	r3, r1
   14a68:	0020      	movs	r0, r4
   14a6a:	0029      	movs	r1, r5
   14a6c:	f001 fa82 	bl	15f74 <__aeabi_dadd>
   14a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14a74:	f001 fa7e 	bl	15f74 <__aeabi_dadd>
   14a78:	0006      	movs	r6, r0
   14a7a:	4648      	mov	r0, r9
   14a7c:	000f      	movs	r7, r1
   14a7e:	f002 ffa7 	bl	179d0 <__aeabi_i2d>
   14a82:	0004      	movs	r4, r0
   14a84:	000d      	movs	r5, r1
   14a86:	9804      	ldr	r0, [sp, #16]
   14a88:	9905      	ldr	r1, [sp, #20]
   14a8a:	0032      	movs	r2, r6
   14a8c:	003b      	movs	r3, r7
   14a8e:	f001 fa71 	bl	15f74 <__aeabi_dadd>
   14a92:	9a08      	ldr	r2, [sp, #32]
   14a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14a96:	f001 fa6d 	bl	15f74 <__aeabi_dadd>
   14a9a:	0022      	movs	r2, r4
   14a9c:	002b      	movs	r3, r5
   14a9e:	f001 fa69 	bl	15f74 <__aeabi_dadd>
   14aa2:	2000      	movs	r0, #0
   14aa4:	0022      	movs	r2, r4
   14aa6:	002b      	movs	r3, r5
   14aa8:	9002      	str	r0, [sp, #8]
   14aaa:	9103      	str	r1, [sp, #12]
   14aac:	f002 fc26 	bl	172fc <__aeabi_dsub>
   14ab0:	9a08      	ldr	r2, [sp, #32]
   14ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14ab4:	f002 fc22 	bl	172fc <__aeabi_dsub>
   14ab8:	9a04      	ldr	r2, [sp, #16]
   14aba:	9b05      	ldr	r3, [sp, #20]
   14abc:	f002 fc1e 	bl	172fc <__aeabi_dsub>
   14ac0:	0002      	movs	r2, r0
   14ac2:	000b      	movs	r3, r1
   14ac4:	0030      	movs	r0, r6
   14ac6:	0039      	movs	r1, r7
   14ac8:	f002 fc18 	bl	172fc <__aeabi_dsub>
   14acc:	9004      	str	r0, [sp, #16]
   14ace:	9105      	str	r1, [sp, #20]
   14ad0:	465b      	mov	r3, fp
   14ad2:	4642      	mov	r2, r8
   14ad4:	3b01      	subs	r3, #1
   14ad6:	4313      	orrs	r3, r2
   14ad8:	d100      	bne.n	14adc <__ieee754_pow+0x4f8>
   14ada:	e1ab      	b.n	14e34 <__ieee754_pow+0x850>
   14adc:	2300      	movs	r3, #0
   14ade:	4c2c      	ldr	r4, [pc, #176]	; (14b90 <__ieee754_pow+0x5ac>)
   14ae0:	9306      	str	r3, [sp, #24]
   14ae2:	9407      	str	r4, [sp, #28]
   14ae4:	9800      	ldr	r0, [sp, #0]
   14ae6:	9901      	ldr	r1, [sp, #4]
   14ae8:	2600      	movs	r6, #0
   14aea:	000b      	movs	r3, r1
   14aec:	0032      	movs	r2, r6
   14aee:	000f      	movs	r7, r1
   14af0:	f002 fc04 	bl	172fc <__aeabi_dsub>
   14af4:	9a02      	ldr	r2, [sp, #8]
   14af6:	9b03      	ldr	r3, [sp, #12]
   14af8:	f002 f980 	bl	16dfc <__aeabi_dmul>
   14afc:	9a00      	ldr	r2, [sp, #0]
   14afe:	9b01      	ldr	r3, [sp, #4]
   14b00:	0004      	movs	r4, r0
   14b02:	000d      	movs	r5, r1
   14b04:	9804      	ldr	r0, [sp, #16]
   14b06:	9905      	ldr	r1, [sp, #20]
   14b08:	f002 f978 	bl	16dfc <__aeabi_dmul>
   14b0c:	0002      	movs	r2, r0
   14b0e:	000b      	movs	r3, r1
   14b10:	0020      	movs	r0, r4
   14b12:	0029      	movs	r1, r5
   14b14:	f001 fa2e 	bl	15f74 <__aeabi_dadd>
   14b18:	0004      	movs	r4, r0
   14b1a:	000d      	movs	r5, r1
   14b1c:	9802      	ldr	r0, [sp, #8]
   14b1e:	9903      	ldr	r1, [sp, #12]
   14b20:	0032      	movs	r2, r6
   14b22:	003b      	movs	r3, r7
   14b24:	9400      	str	r4, [sp, #0]
   14b26:	9501      	str	r5, [sp, #4]
   14b28:	f002 f968 	bl	16dfc <__aeabi_dmul>
   14b2c:	0002      	movs	r2, r0
   14b2e:	000b      	movs	r3, r1
   14b30:	0006      	movs	r6, r0
   14b32:	000f      	movs	r7, r1
   14b34:	0020      	movs	r0, r4
   14b36:	0029      	movs	r1, r5
   14b38:	f001 fa1c 	bl	15f74 <__aeabi_dadd>
   14b3c:	4b29      	ldr	r3, [pc, #164]	; (14be4 <__ieee754_pow+0x600>)
   14b3e:	0004      	movs	r4, r0
   14b40:	000d      	movs	r5, r1
   14b42:	0002      	movs	r2, r0
   14b44:	468b      	mov	fp, r1
   14b46:	4299      	cmp	r1, r3
   14b48:	dc00      	bgt.n	14b4c <__ieee754_pow+0x568>
   14b4a:	e14f      	b.n	14dec <__ieee754_pow+0x808>
   14b4c:	4b26      	ldr	r3, [pc, #152]	; (14be8 <__ieee754_pow+0x604>)
   14b4e:	18cb      	adds	r3, r1, r3
   14b50:	4303      	orrs	r3, r0
   14b52:	d000      	beq.n	14b56 <__ieee754_pow+0x572>
   14b54:	e1e2      	b.n	14f1c <__ieee754_pow+0x938>
   14b56:	9800      	ldr	r0, [sp, #0]
   14b58:	9901      	ldr	r1, [sp, #4]
   14b5a:	4a24      	ldr	r2, [pc, #144]	; (14bec <__ieee754_pow+0x608>)
   14b5c:	4b24      	ldr	r3, [pc, #144]	; (14bf0 <__ieee754_pow+0x60c>)
   14b5e:	f001 fa09 	bl	15f74 <__aeabi_dadd>
   14b62:	0032      	movs	r2, r6
   14b64:	9002      	str	r0, [sp, #8]
   14b66:	9103      	str	r1, [sp, #12]
   14b68:	003b      	movs	r3, r7
   14b6a:	0020      	movs	r0, r4
   14b6c:	0029      	movs	r1, r5
   14b6e:	f002 fbc5 	bl	172fc <__aeabi_dsub>
   14b72:	0002      	movs	r2, r0
   14b74:	000b      	movs	r3, r1
   14b76:	9802      	ldr	r0, [sp, #8]
   14b78:	9903      	ldr	r1, [sp, #12]
   14b7a:	f000 fe11 	bl	157a0 <__aeabi_dcmpgt>
   14b7e:	46aa      	mov	sl, r5
   14b80:	e038      	b.n	14bf4 <__ieee754_pow+0x610>
   14b82:	46c0      	nop			; (mov r8, r8)
   14b84:	000fffff 	.word	0x000fffff
   14b88:	43400000 	.word	0x43400000
   14b8c:	fffffc01 	.word	0xfffffc01
   14b90:	3ff00000 	.word	0x3ff00000
   14b94:	0003988e 	.word	0x0003988e
   14b98:	000bb679 	.word	0x000bb679
   14b9c:	fff00000 	.word	0xfff00000
   14ba0:	4a454eef 	.word	0x4a454eef
   14ba4:	3fca7e28 	.word	0x3fca7e28
   14ba8:	93c9db65 	.word	0x93c9db65
   14bac:	3fcd864a 	.word	0x3fcd864a
   14bb0:	a91d4101 	.word	0xa91d4101
   14bb4:	3fd17460 	.word	0x3fd17460
   14bb8:	518f264d 	.word	0x518f264d
   14bbc:	3fd55555 	.word	0x3fd55555
   14bc0:	db6fabff 	.word	0xdb6fabff
   14bc4:	3fdb6db6 	.word	0x3fdb6db6
   14bc8:	33333303 	.word	0x33333303
   14bcc:	3fe33333 	.word	0x3fe33333
   14bd0:	40080000 	.word	0x40080000
   14bd4:	3feec709 	.word	0x3feec709
   14bd8:	dc3a03fd 	.word	0xdc3a03fd
   14bdc:	145b01f5 	.word	0x145b01f5
   14be0:	be3e2fe0 	.word	0xbe3e2fe0
   14be4:	408fffff 	.word	0x408fffff
   14be8:	bf700000 	.word	0xbf700000
   14bec:	652b82fe 	.word	0x652b82fe
   14bf0:	3c971547 	.word	0x3c971547
   14bf4:	2800      	cmp	r0, #0
   14bf6:	d000      	beq.n	14bfa <__ieee754_pow+0x616>
   14bf8:	e190      	b.n	14f1c <__ieee754_pow+0x938>
   14bfa:	4aec      	ldr	r2, [pc, #944]	; (14fac <__ieee754_pow+0x9c8>)
   14bfc:	4653      	mov	r3, sl
   14bfe:	4694      	mov	ip, r2
   14c00:	2280      	movs	r2, #128	; 0x80
   14c02:	0352      	lsls	r2, r2, #13
   14c04:	0011      	movs	r1, r2
   14c06:	151b      	asrs	r3, r3, #20
   14c08:	4463      	add	r3, ip
   14c0a:	4119      	asrs	r1, r3
   14c0c:	000b      	movs	r3, r1
   14c0e:	4690      	mov	r8, r2
   14c10:	4ae7      	ldr	r2, [pc, #924]	; (14fb0 <__ieee754_pow+0x9cc>)
   14c12:	445b      	add	r3, fp
   14c14:	4694      	mov	ip, r2
   14c16:	005c      	lsls	r4, r3, #1
   14c18:	0d64      	lsrs	r4, r4, #21
   14c1a:	4de6      	ldr	r5, [pc, #920]	; (14fb4 <__ieee754_pow+0x9d0>)
   14c1c:	4464      	add	r4, ip
   14c1e:	4125      	asrs	r5, r4
   14c20:	001a      	movs	r2, r3
   14c22:	43aa      	bics	r2, r5
   14c24:	0011      	movs	r1, r2
   14c26:	4642      	mov	r2, r8
   14c28:	031b      	lsls	r3, r3, #12
   14c2a:	0b1b      	lsrs	r3, r3, #12
   14c2c:	4313      	orrs	r3, r2
   14c2e:	2214      	movs	r2, #20
   14c30:	1b14      	subs	r4, r2, r4
   14c32:	4123      	asrs	r3, r4
   14c34:	4699      	mov	r9, r3
   14c36:	465b      	mov	r3, fp
   14c38:	2000      	movs	r0, #0
   14c3a:	2b00      	cmp	r3, #0
   14c3c:	da00      	bge.n	14c40 <__ieee754_pow+0x65c>
   14c3e:	e1b0      	b.n	14fa2 <__ieee754_pow+0x9be>
   14c40:	0002      	movs	r2, r0
   14c42:	000b      	movs	r3, r1
   14c44:	0030      	movs	r0, r6
   14c46:	0039      	movs	r1, r7
   14c48:	f002 fb58 	bl	172fc <__aeabi_dsub>
   14c4c:	000b      	movs	r3, r1
   14c4e:	0002      	movs	r2, r0
   14c50:	0006      	movs	r6, r0
   14c52:	000f      	movs	r7, r1
   14c54:	9800      	ldr	r0, [sp, #0]
   14c56:	9901      	ldr	r1, [sp, #4]
   14c58:	f001 f98c 	bl	15f74 <__aeabi_dadd>
   14c5c:	464b      	mov	r3, r9
   14c5e:	051b      	lsls	r3, r3, #20
   14c60:	000d      	movs	r5, r1
   14c62:	4698      	mov	r8, r3
   14c64:	2400      	movs	r4, #0
   14c66:	2200      	movs	r2, #0
   14c68:	4bd3      	ldr	r3, [pc, #844]	; (14fb8 <__ieee754_pow+0x9d4>)
   14c6a:	0020      	movs	r0, r4
   14c6c:	0029      	movs	r1, r5
   14c6e:	f002 f8c5 	bl	16dfc <__aeabi_dmul>
   14c72:	0032      	movs	r2, r6
   14c74:	9002      	str	r0, [sp, #8]
   14c76:	9103      	str	r1, [sp, #12]
   14c78:	003b      	movs	r3, r7
   14c7a:	0020      	movs	r0, r4
   14c7c:	0029      	movs	r1, r5
   14c7e:	f002 fb3d 	bl	172fc <__aeabi_dsub>
   14c82:	0002      	movs	r2, r0
   14c84:	000b      	movs	r3, r1
   14c86:	9800      	ldr	r0, [sp, #0]
   14c88:	9901      	ldr	r1, [sp, #4]
   14c8a:	f002 fb37 	bl	172fc <__aeabi_dsub>
   14c8e:	4acb      	ldr	r2, [pc, #812]	; (14fbc <__ieee754_pow+0x9d8>)
   14c90:	4bcb      	ldr	r3, [pc, #812]	; (14fc0 <__ieee754_pow+0x9dc>)
   14c92:	f002 f8b3 	bl	16dfc <__aeabi_dmul>
   14c96:	4acb      	ldr	r2, [pc, #812]	; (14fc4 <__ieee754_pow+0x9e0>)
   14c98:	0006      	movs	r6, r0
   14c9a:	000f      	movs	r7, r1
   14c9c:	4bca      	ldr	r3, [pc, #808]	; (14fc8 <__ieee754_pow+0x9e4>)
   14c9e:	0020      	movs	r0, r4
   14ca0:	0029      	movs	r1, r5
   14ca2:	f002 f8ab 	bl	16dfc <__aeabi_dmul>
   14ca6:	0002      	movs	r2, r0
   14ca8:	000b      	movs	r3, r1
   14caa:	0030      	movs	r0, r6
   14cac:	0039      	movs	r1, r7
   14cae:	f001 f961 	bl	15f74 <__aeabi_dadd>
   14cb2:	0004      	movs	r4, r0
   14cb4:	000d      	movs	r5, r1
   14cb6:	0002      	movs	r2, r0
   14cb8:	000b      	movs	r3, r1
   14cba:	9802      	ldr	r0, [sp, #8]
   14cbc:	9903      	ldr	r1, [sp, #12]
   14cbe:	f001 f959 	bl	15f74 <__aeabi_dadd>
   14cc2:	9a02      	ldr	r2, [sp, #8]
   14cc4:	9b03      	ldr	r3, [sp, #12]
   14cc6:	0006      	movs	r6, r0
   14cc8:	000f      	movs	r7, r1
   14cca:	f002 fb17 	bl	172fc <__aeabi_dsub>
   14cce:	0002      	movs	r2, r0
   14cd0:	000b      	movs	r3, r1
   14cd2:	0020      	movs	r0, r4
   14cd4:	0029      	movs	r1, r5
   14cd6:	f002 fb11 	bl	172fc <__aeabi_dsub>
   14cda:	0032      	movs	r2, r6
   14cdc:	9000      	str	r0, [sp, #0]
   14cde:	9101      	str	r1, [sp, #4]
   14ce0:	003b      	movs	r3, r7
   14ce2:	0030      	movs	r0, r6
   14ce4:	0039      	movs	r1, r7
   14ce6:	f002 f889 	bl	16dfc <__aeabi_dmul>
   14cea:	0004      	movs	r4, r0
   14cec:	000d      	movs	r5, r1
   14cee:	4ab7      	ldr	r2, [pc, #732]	; (14fcc <__ieee754_pow+0x9e8>)
   14cf0:	4bb7      	ldr	r3, [pc, #732]	; (14fd0 <__ieee754_pow+0x9ec>)
   14cf2:	f002 f883 	bl	16dfc <__aeabi_dmul>
   14cf6:	4ab7      	ldr	r2, [pc, #732]	; (14fd4 <__ieee754_pow+0x9f0>)
   14cf8:	4bb7      	ldr	r3, [pc, #732]	; (14fd8 <__ieee754_pow+0x9f4>)
   14cfa:	f002 faff 	bl	172fc <__aeabi_dsub>
   14cfe:	0022      	movs	r2, r4
   14d00:	002b      	movs	r3, r5
   14d02:	f002 f87b 	bl	16dfc <__aeabi_dmul>
   14d06:	4ab5      	ldr	r2, [pc, #724]	; (14fdc <__ieee754_pow+0x9f8>)
   14d08:	4bb5      	ldr	r3, [pc, #724]	; (14fe0 <__ieee754_pow+0x9fc>)
   14d0a:	f001 f933 	bl	15f74 <__aeabi_dadd>
   14d0e:	0022      	movs	r2, r4
   14d10:	002b      	movs	r3, r5
   14d12:	f002 f873 	bl	16dfc <__aeabi_dmul>
   14d16:	4ab3      	ldr	r2, [pc, #716]	; (14fe4 <__ieee754_pow+0xa00>)
   14d18:	4bb3      	ldr	r3, [pc, #716]	; (14fe8 <__ieee754_pow+0xa04>)
   14d1a:	f002 faef 	bl	172fc <__aeabi_dsub>
   14d1e:	0022      	movs	r2, r4
   14d20:	002b      	movs	r3, r5
   14d22:	f002 f86b 	bl	16dfc <__aeabi_dmul>
   14d26:	4ab1      	ldr	r2, [pc, #708]	; (14fec <__ieee754_pow+0xa08>)
   14d28:	4bb1      	ldr	r3, [pc, #708]	; (14ff0 <__ieee754_pow+0xa0c>)
   14d2a:	f001 f923 	bl	15f74 <__aeabi_dadd>
   14d2e:	0022      	movs	r2, r4
   14d30:	002b      	movs	r3, r5
   14d32:	f002 f863 	bl	16dfc <__aeabi_dmul>
   14d36:	0002      	movs	r2, r0
   14d38:	000b      	movs	r3, r1
   14d3a:	0030      	movs	r0, r6
   14d3c:	0039      	movs	r1, r7
   14d3e:	f002 fadd 	bl	172fc <__aeabi_dsub>
   14d42:	0004      	movs	r4, r0
   14d44:	000d      	movs	r5, r1
   14d46:	0002      	movs	r2, r0
   14d48:	000b      	movs	r3, r1
   14d4a:	0030      	movs	r0, r6
   14d4c:	0039      	movs	r1, r7
   14d4e:	f002 f855 	bl	16dfc <__aeabi_dmul>
   14d52:	2380      	movs	r3, #128	; 0x80
   14d54:	9002      	str	r0, [sp, #8]
   14d56:	9103      	str	r1, [sp, #12]
   14d58:	2200      	movs	r2, #0
   14d5a:	05db      	lsls	r3, r3, #23
   14d5c:	0020      	movs	r0, r4
   14d5e:	0029      	movs	r1, r5
   14d60:	f002 facc 	bl	172fc <__aeabi_dsub>
   14d64:	0002      	movs	r2, r0
   14d66:	000b      	movs	r3, r1
   14d68:	9802      	ldr	r0, [sp, #8]
   14d6a:	9903      	ldr	r1, [sp, #12]
   14d6c:	f001 fc12 	bl	16594 <__aeabi_ddiv>
   14d70:	9a00      	ldr	r2, [sp, #0]
   14d72:	9b01      	ldr	r3, [sp, #4]
   14d74:	0004      	movs	r4, r0
   14d76:	000d      	movs	r5, r1
   14d78:	0030      	movs	r0, r6
   14d7a:	0039      	movs	r1, r7
   14d7c:	f002 f83e 	bl	16dfc <__aeabi_dmul>
   14d80:	9a00      	ldr	r2, [sp, #0]
   14d82:	9b01      	ldr	r3, [sp, #4]
   14d84:	f001 f8f6 	bl	15f74 <__aeabi_dadd>
   14d88:	0002      	movs	r2, r0
   14d8a:	000b      	movs	r3, r1
   14d8c:	0020      	movs	r0, r4
   14d8e:	0029      	movs	r1, r5
   14d90:	f002 fab4 	bl	172fc <__aeabi_dsub>
   14d94:	0032      	movs	r2, r6
   14d96:	003b      	movs	r3, r7
   14d98:	f002 fab0 	bl	172fc <__aeabi_dsub>
   14d9c:	0002      	movs	r2, r0
   14d9e:	000b      	movs	r3, r1
   14da0:	2000      	movs	r0, #0
   14da2:	4994      	ldr	r1, [pc, #592]	; (14ff4 <__ieee754_pow+0xa10>)
   14da4:	f002 faaa 	bl	172fc <__aeabi_dsub>
   14da8:	4643      	mov	r3, r8
   14daa:	185b      	adds	r3, r3, r1
   14dac:	151a      	asrs	r2, r3, #20
   14dae:	2a00      	cmp	r2, #0
   14db0:	dc00      	bgt.n	14db4 <__ieee754_pow+0x7d0>
   14db2:	e149      	b.n	15048 <__ieee754_pow+0xa64>
   14db4:	0019      	movs	r1, r3
   14db6:	9a06      	ldr	r2, [sp, #24]
   14db8:	9b07      	ldr	r3, [sp, #28]
   14dba:	f002 f81f 	bl	16dfc <__aeabi_dmul>
   14dbe:	e459      	b.n	14674 <__ieee754_pow+0x90>
   14dc0:	003a      	movs	r2, r7
   14dc2:	0033      	movs	r3, r6
   14dc4:	0038      	movs	r0, r7
   14dc6:	0031      	movs	r1, r6
   14dc8:	f002 f818 	bl	16dfc <__aeabi_dmul>
   14dcc:	e452      	b.n	14674 <__ieee754_pow+0x90>
   14dce:	4653      	mov	r3, sl
   14dd0:	2b00      	cmp	r3, #0
   14dd2:	db00      	blt.n	14dd6 <__ieee754_pow+0x7f2>
   14dd4:	e4d9      	b.n	1478a <__ieee754_pow+0x1a6>
   14dd6:	9c00      	ldr	r4, [sp, #0]
   14dd8:	9d01      	ldr	r5, [sp, #4]
   14dda:	2280      	movs	r2, #128	; 0x80
   14ddc:	0612      	lsls	r2, r2, #24
   14dde:	002b      	movs	r3, r5
   14de0:	4694      	mov	ip, r2
   14de2:	4463      	add	r3, ip
   14de4:	0020      	movs	r0, r4
   14de6:	0019      	movs	r1, r3
   14de8:	f7ff fc44 	bl	14674 <__ieee754_pow+0x90>
   14dec:	004b      	lsls	r3, r1, #1
   14dee:	085b      	lsrs	r3, r3, #1
   14df0:	469a      	mov	sl, r3
   14df2:	4b81      	ldr	r3, [pc, #516]	; (14ff8 <__ieee754_pow+0xa14>)
   14df4:	459a      	cmp	sl, r3
   14df6:	dc00      	bgt.n	14dfa <__ieee754_pow+0x816>
   14df8:	e0b1      	b.n	14f5e <__ieee754_pow+0x97a>
   14dfa:	4b80      	ldr	r3, [pc, #512]	; (14ffc <__ieee754_pow+0xa18>)
   14dfc:	445b      	add	r3, fp
   14dfe:	431a      	orrs	r2, r3
   14e00:	d10c      	bne.n	14e1c <__ieee754_pow+0x838>
   14e02:	0032      	movs	r2, r6
   14e04:	003b      	movs	r3, r7
   14e06:	f002 fa79 	bl	172fc <__aeabi_dsub>
   14e0a:	0002      	movs	r2, r0
   14e0c:	000b      	movs	r3, r1
   14e0e:	9800      	ldr	r0, [sp, #0]
   14e10:	9901      	ldr	r1, [sp, #4]
   14e12:	f000 fcbb 	bl	1578c <__aeabi_dcmple>
   14e16:	2800      	cmp	r0, #0
   14e18:	d100      	bne.n	14e1c <__ieee754_pow+0x838>
   14e1a:	e6ee      	b.n	14bfa <__ieee754_pow+0x616>
   14e1c:	9806      	ldr	r0, [sp, #24]
   14e1e:	9907      	ldr	r1, [sp, #28]
   14e20:	4a77      	ldr	r2, [pc, #476]	; (15000 <__ieee754_pow+0xa1c>)
   14e22:	4b78      	ldr	r3, [pc, #480]	; (15004 <__ieee754_pow+0xa20>)
   14e24:	f001 ffea 	bl	16dfc <__aeabi_dmul>
   14e28:	4a75      	ldr	r2, [pc, #468]	; (15000 <__ieee754_pow+0xa1c>)
   14e2a:	4b76      	ldr	r3, [pc, #472]	; (15004 <__ieee754_pow+0xa20>)
   14e2c:	f001 ffe6 	bl	16dfc <__aeabi_dmul>
   14e30:	f7ff fc20 	bl	14674 <__ieee754_pow+0x90>
   14e34:	2300      	movs	r3, #0
   14e36:	4c74      	ldr	r4, [pc, #464]	; (15008 <__ieee754_pow+0xa24>)
   14e38:	9306      	str	r3, [sp, #24]
   14e3a:	9407      	str	r4, [sp, #28]
   14e3c:	e652      	b.n	14ae4 <__ieee754_pow+0x500>
   14e3e:	0002      	movs	r2, r0
   14e40:	000b      	movs	r3, r1
   14e42:	2000      	movs	r0, #0
   14e44:	496b      	ldr	r1, [pc, #428]	; (14ff4 <__ieee754_pow+0xa10>)
   14e46:	f001 fba5 	bl	16594 <__aeabi_ddiv>
   14e4a:	f7ff fc32 	bl	146b2 <__ieee754_pow+0xce>
   14e4e:	4653      	mov	r3, sl
   14e50:	2b00      	cmp	r3, #0
   14e52:	db00      	blt.n	14e56 <__ieee754_pow+0x872>
   14e54:	e499      	b.n	1478a <__ieee754_pow+0x1a6>
   14e56:	e454      	b.n	14702 <__ieee754_pow+0x11e>
   14e58:	4b6c      	ldr	r3, [pc, #432]	; (1500c <__ieee754_pow+0xa28>)
   14e5a:	429c      	cmp	r4, r3
   14e5c:	ddf7      	ble.n	14e4e <__ieee754_pow+0x86a>
   14e5e:	4b65      	ldr	r3, [pc, #404]	; (14ff4 <__ieee754_pow+0xa10>)
   14e60:	429c      	cmp	r4, r3
   14e62:	dd00      	ble.n	14e66 <__ieee754_pow+0x882>
   14e64:	e44a      	b.n	146fc <__ieee754_pow+0x118>
   14e66:	2200      	movs	r2, #0
   14e68:	4b62      	ldr	r3, [pc, #392]	; (14ff4 <__ieee754_pow+0xa10>)
   14e6a:	f002 fa47 	bl	172fc <__aeabi_dsub>
   14e6e:	22c0      	movs	r2, #192	; 0xc0
   14e70:	4b67      	ldr	r3, [pc, #412]	; (15010 <__ieee754_pow+0xa2c>)
   14e72:	05d2      	lsls	r2, r2, #23
   14e74:	0004      	movs	r4, r0
   14e76:	000d      	movs	r5, r1
   14e78:	f001 ffc0 	bl	16dfc <__aeabi_dmul>
   14e7c:	4a65      	ldr	r2, [pc, #404]	; (15014 <__ieee754_pow+0xa30>)
   14e7e:	0006      	movs	r6, r0
   14e80:	000f      	movs	r7, r1
   14e82:	4b65      	ldr	r3, [pc, #404]	; (15018 <__ieee754_pow+0xa34>)
   14e84:	0020      	movs	r0, r4
   14e86:	0029      	movs	r1, r5
   14e88:	f001 ffb8 	bl	16dfc <__aeabi_dmul>
   14e8c:	2200      	movs	r2, #0
   14e8e:	9002      	str	r0, [sp, #8]
   14e90:	9103      	str	r1, [sp, #12]
   14e92:	4b62      	ldr	r3, [pc, #392]	; (1501c <__ieee754_pow+0xa38>)
   14e94:	0020      	movs	r0, r4
   14e96:	0029      	movs	r1, r5
   14e98:	f001 ffb0 	bl	16dfc <__aeabi_dmul>
   14e9c:	0002      	movs	r2, r0
   14e9e:	000b      	movs	r3, r1
   14ea0:	485f      	ldr	r0, [pc, #380]	; (15020 <__ieee754_pow+0xa3c>)
   14ea2:	4960      	ldr	r1, [pc, #384]	; (15024 <__ieee754_pow+0xa40>)
   14ea4:	f002 fa2a 	bl	172fc <__aeabi_dsub>
   14ea8:	0022      	movs	r2, r4
   14eaa:	002b      	movs	r3, r5
   14eac:	f001 ffa6 	bl	16dfc <__aeabi_dmul>
   14eb0:	0002      	movs	r2, r0
   14eb2:	000b      	movs	r3, r1
   14eb4:	2000      	movs	r0, #0
   14eb6:	495c      	ldr	r1, [pc, #368]	; (15028 <__ieee754_pow+0xa44>)
   14eb8:	f002 fa20 	bl	172fc <__aeabi_dsub>
   14ebc:	0022      	movs	r2, r4
   14ebe:	9004      	str	r0, [sp, #16]
   14ec0:	9105      	str	r1, [sp, #20]
   14ec2:	002b      	movs	r3, r5
   14ec4:	0020      	movs	r0, r4
   14ec6:	0029      	movs	r1, r5
   14ec8:	f001 ff98 	bl	16dfc <__aeabi_dmul>
   14ecc:	0002      	movs	r2, r0
   14ece:	000b      	movs	r3, r1
   14ed0:	9804      	ldr	r0, [sp, #16]
   14ed2:	9905      	ldr	r1, [sp, #20]
   14ed4:	f001 ff92 	bl	16dfc <__aeabi_dmul>
   14ed8:	4a54      	ldr	r2, [pc, #336]	; (1502c <__ieee754_pow+0xa48>)
   14eda:	4b4d      	ldr	r3, [pc, #308]	; (15010 <__ieee754_pow+0xa2c>)
   14edc:	f001 ff8e 	bl	16dfc <__aeabi_dmul>
   14ee0:	0002      	movs	r2, r0
   14ee2:	000b      	movs	r3, r1
   14ee4:	9802      	ldr	r0, [sp, #8]
   14ee6:	9903      	ldr	r1, [sp, #12]
   14ee8:	f002 fa08 	bl	172fc <__aeabi_dsub>
   14eec:	0002      	movs	r2, r0
   14eee:	000b      	movs	r3, r1
   14ef0:	0004      	movs	r4, r0
   14ef2:	000d      	movs	r5, r1
   14ef4:	0030      	movs	r0, r6
   14ef6:	0039      	movs	r1, r7
   14ef8:	f001 f83c 	bl	15f74 <__aeabi_dadd>
   14efc:	2000      	movs	r0, #0
   14efe:	0032      	movs	r2, r6
   14f00:	003b      	movs	r3, r7
   14f02:	9002      	str	r0, [sp, #8]
   14f04:	9103      	str	r1, [sp, #12]
   14f06:	f002 f9f9 	bl	172fc <__aeabi_dsub>
   14f0a:	0002      	movs	r2, r0
   14f0c:	000b      	movs	r3, r1
   14f0e:	0020      	movs	r0, r4
   14f10:	0029      	movs	r1, r5
   14f12:	f002 f9f3 	bl	172fc <__aeabi_dsub>
   14f16:	9004      	str	r0, [sp, #16]
   14f18:	9105      	str	r1, [sp, #20]
   14f1a:	e5d9      	b.n	14ad0 <__ieee754_pow+0x4ec>
   14f1c:	4a44      	ldr	r2, [pc, #272]	; (15030 <__ieee754_pow+0xa4c>)
   14f1e:	4b45      	ldr	r3, [pc, #276]	; (15034 <__ieee754_pow+0xa50>)
   14f20:	9806      	ldr	r0, [sp, #24]
   14f22:	9907      	ldr	r1, [sp, #28]
   14f24:	f001 ff6a 	bl	16dfc <__aeabi_dmul>
   14f28:	4a41      	ldr	r2, [pc, #260]	; (15030 <__ieee754_pow+0xa4c>)
   14f2a:	4b42      	ldr	r3, [pc, #264]	; (15034 <__ieee754_pow+0xa50>)
   14f2c:	f001 ff66 	bl	16dfc <__aeabi_dmul>
   14f30:	f7ff fba0 	bl	14674 <__ieee754_pow+0x90>
   14f34:	2a00      	cmp	r2, #0
   14f36:	d001      	beq.n	14f3c <__ieee754_pow+0x958>
   14f38:	f7ff fba9 	bl	1468e <__ieee754_pow+0xaa>
   14f3c:	3214      	adds	r2, #20
   14f3e:	1ad3      	subs	r3, r2, r3
   14f40:	002a      	movs	r2, r5
   14f42:	411a      	asrs	r2, r3
   14f44:	0011      	movs	r1, r2
   14f46:	4099      	lsls	r1, r3
   14f48:	428d      	cmp	r5, r1
   14f4a:	d001      	beq.n	14f50 <__ieee754_pow+0x96c>
   14f4c:	f7ff fb76 	bl	1463c <__ieee754_pow+0x58>
   14f50:	2301      	movs	r3, #1
   14f52:	401a      	ands	r2, r3
   14f54:	18db      	adds	r3, r3, r3
   14f56:	1a9b      	subs	r3, r3, r2
   14f58:	469b      	mov	fp, r3
   14f5a:	f7ff fb6f 	bl	1463c <__ieee754_pow+0x58>
   14f5e:	2200      	movs	r2, #0
   14f60:	4b31      	ldr	r3, [pc, #196]	; (15028 <__ieee754_pow+0xa44>)
   14f62:	4690      	mov	r8, r2
   14f64:	4691      	mov	r9, r2
   14f66:	459a      	cmp	sl, r3
   14f68:	dc00      	bgt.n	14f6c <__ieee754_pow+0x988>
   14f6a:	e67b      	b.n	14c64 <__ieee754_pow+0x680>
   14f6c:	e645      	b.n	14bfa <__ieee754_pow+0x616>
   14f6e:	0002      	movs	r2, r0
   14f70:	000b      	movs	r3, r1
   14f72:	f002 f9c3 	bl	172fc <__aeabi_dsub>
   14f76:	0002      	movs	r2, r0
   14f78:	000b      	movs	r3, r1
   14f7a:	f001 fb0b 	bl	16594 <__aeabi_ddiv>
   14f7e:	f7ff fb79 	bl	14674 <__ieee754_pow+0x90>
   14f82:	2380      	movs	r3, #128	; 0x80
   14f84:	4c2c      	ldr	r4, [pc, #176]	; (15038 <__ieee754_pow+0xa54>)
   14f86:	05db      	lsls	r3, r3, #23
   14f88:	9308      	str	r3, [sp, #32]
   14f8a:	9409      	str	r4, [sp, #36]	; 0x24
   14f8c:	4b2b      	ldr	r3, [pc, #172]	; (1503c <__ieee754_pow+0xa58>)
   14f8e:	4c2c      	ldr	r4, [pc, #176]	; (15040 <__ieee754_pow+0xa5c>)
   14f90:	2200      	movs	r2, #0
   14f92:	930c      	str	r3, [sp, #48]	; 0x30
   14f94:	940d      	str	r4, [sp, #52]	; 0x34
   14f96:	2480      	movs	r4, #128	; 0x80
   14f98:	4b2a      	ldr	r3, [pc, #168]	; (15044 <__ieee754_pow+0xa60>)
   14f9a:	02e4      	lsls	r4, r4, #11
   14f9c:	9206      	str	r2, [sp, #24]
   14f9e:	9307      	str	r3, [sp, #28]
   14fa0:	e449      	b.n	14836 <__ieee754_pow+0x252>
   14fa2:	464b      	mov	r3, r9
   14fa4:	425b      	negs	r3, r3
   14fa6:	4699      	mov	r9, r3
   14fa8:	e64a      	b.n	14c40 <__ieee754_pow+0x65c>
   14faa:	46c0      	nop			; (mov r8, r8)
   14fac:	fffffc02 	.word	0xfffffc02
   14fb0:	fffffc01 	.word	0xfffffc01
   14fb4:	000fffff 	.word	0x000fffff
   14fb8:	3fe62e43 	.word	0x3fe62e43
   14fbc:	fefa39ef 	.word	0xfefa39ef
   14fc0:	3fe62e42 	.word	0x3fe62e42
   14fc4:	0ca86c39 	.word	0x0ca86c39
   14fc8:	be205c61 	.word	0xbe205c61
   14fcc:	72bea4d0 	.word	0x72bea4d0
   14fd0:	3e663769 	.word	0x3e663769
   14fd4:	c5d26bf1 	.word	0xc5d26bf1
   14fd8:	3ebbbd41 	.word	0x3ebbbd41
   14fdc:	af25de2c 	.word	0xaf25de2c
   14fe0:	3f11566a 	.word	0x3f11566a
   14fe4:	16bebd93 	.word	0x16bebd93
   14fe8:	3f66c16c 	.word	0x3f66c16c
   14fec:	5555553e 	.word	0x5555553e
   14ff0:	3fc55555 	.word	0x3fc55555
   14ff4:	3ff00000 	.word	0x3ff00000
   14ff8:	4090cbff 	.word	0x4090cbff
   14ffc:	3f6f3400 	.word	0x3f6f3400
   15000:	c2f8f359 	.word	0xc2f8f359
   15004:	01a56e1f 	.word	0x01a56e1f
   15008:	bff00000 	.word	0xbff00000
   1500c:	3feffffe 	.word	0x3feffffe
   15010:	3ff71547 	.word	0x3ff71547
   15014:	f85ddf44 	.word	0xf85ddf44
   15018:	3e54ae0b 	.word	0x3e54ae0b
   1501c:	3fd00000 	.word	0x3fd00000
   15020:	55555555 	.word	0x55555555
   15024:	3fd55555 	.word	0x3fd55555
   15028:	3fe00000 	.word	0x3fe00000
   1502c:	652b82fe 	.word	0x652b82fe
   15030:	8800759c 	.word	0x8800759c
   15034:	7e37e43c 	.word	0x7e37e43c
   15038:	3fe2b803 	.word	0x3fe2b803
   1503c:	43cfd006 	.word	0x43cfd006
   15040:	3e4cfdeb 	.word	0x3e4cfdeb
   15044:	3ff80000 	.word	0x3ff80000
   15048:	464a      	mov	r2, r9
   1504a:	f000 f999 	bl	15380 <scalbn>
   1504e:	e6b2      	b.n	14db6 <__ieee754_pow+0x7d2>

00015050 <__ieee754_sqrt>:
   15050:	4b6c      	ldr	r3, [pc, #432]	; (15204 <__ieee754_sqrt+0x1b4>)
   15052:	b5f0      	push	{r4, r5, r6, r7, lr}
   15054:	000a      	movs	r2, r1
   15056:	4646      	mov	r6, r8
   15058:	000d      	movs	r5, r1
   1505a:	46d6      	mov	lr, sl
   1505c:	464f      	mov	r7, r9
   1505e:	0019      	movs	r1, r3
   15060:	b5c0      	push	{r6, r7, lr}
   15062:	0004      	movs	r4, r0
   15064:	0006      	movs	r6, r0
   15066:	4029      	ands	r1, r5
   15068:	4299      	cmp	r1, r3
   1506a:	d100      	bne.n	1506e <__ieee754_sqrt+0x1e>
   1506c:	e0a7      	b.n	151be <__ieee754_sqrt+0x16e>
   1506e:	2d00      	cmp	r5, #0
   15070:	dc00      	bgt.n	15074 <__ieee754_sqrt+0x24>
   15072:	e081      	b.n	15178 <__ieee754_sqrt+0x128>
   15074:	152f      	asrs	r7, r5, #20
   15076:	d100      	bne.n	1507a <__ieee754_sqrt+0x2a>
   15078:	e08e      	b.n	15198 <__ieee754_sqrt+0x148>
   1507a:	4b63      	ldr	r3, [pc, #396]	; (15208 <__ieee754_sqrt+0x1b8>)
   1507c:	0312      	lsls	r2, r2, #12
   1507e:	469c      	mov	ip, r3
   15080:	2380      	movs	r3, #128	; 0x80
   15082:	0b12      	lsrs	r2, r2, #12
   15084:	035b      	lsls	r3, r3, #13
   15086:	4467      	add	r7, ip
   15088:	431a      	orrs	r2, r3
   1508a:	07fb      	lsls	r3, r7, #31
   1508c:	d468      	bmi.n	15160 <__ieee754_sqrt+0x110>
   1508e:	107b      	asrs	r3, r7, #1
   15090:	469c      	mov	ip, r3
   15092:	0fe3      	lsrs	r3, r4, #31
   15094:	189b      	adds	r3, r3, r2
   15096:	189b      	adds	r3, r3, r2
   15098:	2280      	movs	r2, #128	; 0x80
   1509a:	2116      	movs	r1, #22
   1509c:	2600      	movs	r6, #0
   1509e:	2500      	movs	r5, #0
   150a0:	0064      	lsls	r4, r4, #1
   150a2:	0392      	lsls	r2, r2, #14
   150a4:	18a8      	adds	r0, r5, r2
   150a6:	4298      	cmp	r0, r3
   150a8:	dc02      	bgt.n	150b0 <__ieee754_sqrt+0x60>
   150aa:	1885      	adds	r5, r0, r2
   150ac:	1a1b      	subs	r3, r3, r0
   150ae:	18b6      	adds	r6, r6, r2
   150b0:	0fe0      	lsrs	r0, r4, #31
   150b2:	005b      	lsls	r3, r3, #1
   150b4:	3901      	subs	r1, #1
   150b6:	181b      	adds	r3, r3, r0
   150b8:	0064      	lsls	r4, r4, #1
   150ba:	0852      	lsrs	r2, r2, #1
   150bc:	2900      	cmp	r1, #0
   150be:	d1f1      	bne.n	150a4 <__ieee754_sqrt+0x54>
   150c0:	2200      	movs	r2, #0
   150c2:	4692      	mov	sl, r2
   150c4:	4690      	mov	r8, r2
   150c6:	2280      	movs	r2, #128	; 0x80
   150c8:	2020      	movs	r0, #32
   150ca:	0612      	lsls	r2, r2, #24
   150cc:	e009      	b.n	150e2 <__ieee754_sqrt+0x92>
   150ce:	42ab      	cmp	r3, r5
   150d0:	d038      	beq.n	15144 <__ieee754_sqrt+0xf4>
   150d2:	0fe1      	lsrs	r1, r4, #31
   150d4:	18c9      	adds	r1, r1, r3
   150d6:	3801      	subs	r0, #1
   150d8:	18cb      	adds	r3, r1, r3
   150da:	0064      	lsls	r4, r4, #1
   150dc:	0852      	lsrs	r2, r2, #1
   150de:	2800      	cmp	r0, #0
   150e0:	d018      	beq.n	15114 <__ieee754_sqrt+0xc4>
   150e2:	4641      	mov	r1, r8
   150e4:	1851      	adds	r1, r2, r1
   150e6:	42ab      	cmp	r3, r5
   150e8:	ddf1      	ble.n	150ce <__ieee754_sqrt+0x7e>
   150ea:	188f      	adds	r7, r1, r2
   150ec:	46b8      	mov	r8, r7
   150ee:	46a9      	mov	r9, r5
   150f0:	2900      	cmp	r1, #0
   150f2:	db30      	blt.n	15156 <__ieee754_sqrt+0x106>
   150f4:	1b5b      	subs	r3, r3, r5
   150f6:	428c      	cmp	r4, r1
   150f8:	41ad      	sbcs	r5, r5
   150fa:	426d      	negs	r5, r5
   150fc:	1b5b      	subs	r3, r3, r5
   150fe:	1a64      	subs	r4, r4, r1
   15100:	0fe1      	lsrs	r1, r4, #31
   15102:	18c9      	adds	r1, r1, r3
   15104:	3801      	subs	r0, #1
   15106:	4492      	add	sl, r2
   15108:	464d      	mov	r5, r9
   1510a:	18cb      	adds	r3, r1, r3
   1510c:	0064      	lsls	r4, r4, #1
   1510e:	0852      	lsrs	r2, r2, #1
   15110:	2800      	cmp	r0, #0
   15112:	d1e6      	bne.n	150e2 <__ieee754_sqrt+0x92>
   15114:	4323      	orrs	r3, r4
   15116:	d128      	bne.n	1516a <__ieee754_sqrt+0x11a>
   15118:	4653      	mov	r3, sl
   1511a:	085b      	lsrs	r3, r3, #1
   1511c:	493b      	ldr	r1, [pc, #236]	; (1520c <__ieee754_sqrt+0x1bc>)
   1511e:	1072      	asrs	r2, r6, #1
   15120:	4688      	mov	r8, r1
   15122:	4442      	add	r2, r8
   15124:	07f1      	lsls	r1, r6, #31
   15126:	d502      	bpl.n	1512e <__ieee754_sqrt+0xde>
   15128:	2180      	movs	r1, #128	; 0x80
   1512a:	0609      	lsls	r1, r1, #24
   1512c:	430b      	orrs	r3, r1
   1512e:	4661      	mov	r1, ip
   15130:	001e      	movs	r6, r3
   15132:	050f      	lsls	r7, r1, #20
   15134:	18bd      	adds	r5, r7, r2
   15136:	0030      	movs	r0, r6
   15138:	0029      	movs	r1, r5
   1513a:	bc1c      	pop	{r2, r3, r4}
   1513c:	4690      	mov	r8, r2
   1513e:	4699      	mov	r9, r3
   15140:	46a2      	mov	sl, r4
   15142:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15144:	42a1      	cmp	r1, r4
   15146:	d8c4      	bhi.n	150d2 <__ieee754_sqrt+0x82>
   15148:	188f      	adds	r7, r1, r2
   1514a:	46b8      	mov	r8, r7
   1514c:	2900      	cmp	r1, #0
   1514e:	db42      	blt.n	151d6 <__ieee754_sqrt+0x186>
   15150:	4699      	mov	r9, r3
   15152:	2300      	movs	r3, #0
   15154:	e7d3      	b.n	150fe <__ieee754_sqrt+0xae>
   15156:	2f00      	cmp	r7, #0
   15158:	db2f      	blt.n	151ba <__ieee754_sqrt+0x16a>
   1515a:	1c6f      	adds	r7, r5, #1
   1515c:	46b9      	mov	r9, r7
   1515e:	e7c9      	b.n	150f4 <__ieee754_sqrt+0xa4>
   15160:	0fe1      	lsrs	r1, r4, #31
   15162:	0052      	lsls	r2, r2, #1
   15164:	188a      	adds	r2, r1, r2
   15166:	0064      	lsls	r4, r4, #1
   15168:	e791      	b.n	1508e <__ieee754_sqrt+0x3e>
   1516a:	4653      	mov	r3, sl
   1516c:	3301      	adds	r3, #1
   1516e:	d035      	beq.n	151dc <__ieee754_sqrt+0x18c>
   15170:	4653      	mov	r3, sl
   15172:	3301      	adds	r3, #1
   15174:	085b      	lsrs	r3, r3, #1
   15176:	e7d1      	b.n	1511c <__ieee754_sqrt+0xcc>
   15178:	006b      	lsls	r3, r5, #1
   1517a:	085b      	lsrs	r3, r3, #1
   1517c:	4303      	orrs	r3, r0
   1517e:	d0da      	beq.n	15136 <__ieee754_sqrt+0xe6>
   15180:	2700      	movs	r7, #0
   15182:	2d00      	cmp	r5, #0
   15184:	d132      	bne.n	151ec <__ieee754_sqrt+0x19c>
   15186:	0ae2      	lsrs	r2, r4, #11
   15188:	3f15      	subs	r7, #21
   1518a:	0564      	lsls	r4, r4, #21
   1518c:	2a00      	cmp	r2, #0
   1518e:	d0fa      	beq.n	15186 <__ieee754_sqrt+0x136>
   15190:	2380      	movs	r3, #128	; 0x80
   15192:	035b      	lsls	r3, r3, #13
   15194:	421a      	tst	r2, r3
   15196:	d124      	bne.n	151e2 <__ieee754_sqrt+0x192>
   15198:	2080      	movs	r0, #128	; 0x80
   1519a:	2300      	movs	r3, #0
   1519c:	0340      	lsls	r0, r0, #13
   1519e:	e000      	b.n	151a2 <__ieee754_sqrt+0x152>
   151a0:	000b      	movs	r3, r1
   151a2:	0052      	lsls	r2, r2, #1
   151a4:	1c59      	adds	r1, r3, #1
   151a6:	4202      	tst	r2, r0
   151a8:	d0fa      	beq.n	151a0 <__ieee754_sqrt+0x150>
   151aa:	2020      	movs	r0, #32
   151ac:	1a40      	subs	r0, r0, r1
   151ae:	1aff      	subs	r7, r7, r3
   151b0:	0023      	movs	r3, r4
   151b2:	40c3      	lsrs	r3, r0
   151b4:	408c      	lsls	r4, r1
   151b6:	431a      	orrs	r2, r3
   151b8:	e75f      	b.n	1507a <__ieee754_sqrt+0x2a>
   151ba:	46a9      	mov	r9, r5
   151bc:	e79a      	b.n	150f4 <__ieee754_sqrt+0xa4>
   151be:	002b      	movs	r3, r5
   151c0:	0002      	movs	r2, r0
   151c2:	0029      	movs	r1, r5
   151c4:	f001 fe1a 	bl	16dfc <__aeabi_dmul>
   151c8:	0032      	movs	r2, r6
   151ca:	002b      	movs	r3, r5
   151cc:	f000 fed2 	bl	15f74 <__aeabi_dadd>
   151d0:	0006      	movs	r6, r0
   151d2:	000d      	movs	r5, r1
   151d4:	e7af      	b.n	15136 <__ieee754_sqrt+0xe6>
   151d6:	2f00      	cmp	r7, #0
   151d8:	dabf      	bge.n	1515a <__ieee754_sqrt+0x10a>
   151da:	e7b9      	b.n	15150 <__ieee754_sqrt+0x100>
   151dc:	3601      	adds	r6, #1
   151de:	2300      	movs	r3, #0
   151e0:	e79c      	b.n	1511c <__ieee754_sqrt+0xcc>
   151e2:	2301      	movs	r3, #1
   151e4:	2100      	movs	r1, #0
   151e6:	2020      	movs	r0, #32
   151e8:	425b      	negs	r3, r3
   151ea:	e7e0      	b.n	151ae <__ieee754_sqrt+0x15e>
   151ec:	002b      	movs	r3, r5
   151ee:	0002      	movs	r2, r0
   151f0:	0029      	movs	r1, r5
   151f2:	f002 f883 	bl	172fc <__aeabi_dsub>
   151f6:	0002      	movs	r2, r0
   151f8:	000b      	movs	r3, r1
   151fa:	f001 f9cb 	bl	16594 <__aeabi_ddiv>
   151fe:	0006      	movs	r6, r0
   15200:	000d      	movs	r5, r1
   15202:	e798      	b.n	15136 <__ieee754_sqrt+0xe6>
   15204:	7ff00000 	.word	0x7ff00000
   15208:	fffffc01 	.word	0xfffffc01
   1520c:	3fe00000 	.word	0x3fe00000

00015210 <fabs>:
   15210:	0049      	lsls	r1, r1, #1
   15212:	084b      	lsrs	r3, r1, #1
   15214:	0019      	movs	r1, r3
   15216:	4770      	bx	lr

00015218 <finite>:
   15218:	4b03      	ldr	r3, [pc, #12]	; (15228 <finite+0x10>)
   1521a:	0048      	lsls	r0, r1, #1
   1521c:	469c      	mov	ip, r3
   1521e:	0840      	lsrs	r0, r0, #1
   15220:	4460      	add	r0, ip
   15222:	0fc0      	lsrs	r0, r0, #31
   15224:	4770      	bx	lr
   15226:	46c0      	nop			; (mov r8, r8)
   15228:	80100000 	.word	0x80100000

0001522c <matherr>:
   1522c:	2000      	movs	r0, #0
   1522e:	4770      	bx	lr

00015230 <nan>:
   15230:	2000      	movs	r0, #0
   15232:	4901      	ldr	r1, [pc, #4]	; (15238 <nan+0x8>)
   15234:	4770      	bx	lr
   15236:	46c0      	nop			; (mov r8, r8)
   15238:	7ff80000 	.word	0x7ff80000

0001523c <rint>:
   1523c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1523e:	46c6      	mov	lr, r8
   15240:	b500      	push	{lr}
   15242:	0fcb      	lsrs	r3, r1, #31
   15244:	4698      	mov	r8, r3
   15246:	4c4a      	ldr	r4, [pc, #296]	; (15370 <rint+0x134>)
   15248:	004b      	lsls	r3, r1, #1
   1524a:	0d5b      	lsrs	r3, r3, #21
   1524c:	191e      	adds	r6, r3, r4
   1524e:	b082      	sub	sp, #8
   15250:	0007      	movs	r7, r0
   15252:	000a      	movs	r2, r1
   15254:	2e13      	cmp	r6, #19
   15256:	dc35      	bgt.n	152c4 <rint+0x88>
   15258:	2e00      	cmp	r6, #0
   1525a:	db57      	blt.n	1530c <rint+0xd0>
   1525c:	4b45      	ldr	r3, [pc, #276]	; (15374 <rint+0x138>)
   1525e:	0004      	movs	r4, r0
   15260:	4133      	asrs	r3, r6
   15262:	001f      	movs	r7, r3
   15264:	400f      	ands	r7, r1
   15266:	4307      	orrs	r7, r0
   15268:	000d      	movs	r5, r1
   1526a:	2f00      	cmp	r7, #0
   1526c:	d024      	beq.n	152b8 <rint+0x7c>
   1526e:	085b      	lsrs	r3, r3, #1
   15270:	001c      	movs	r4, r3
   15272:	400c      	ands	r4, r1
   15274:	4320      	orrs	r0, r4
   15276:	2700      	movs	r7, #0
   15278:	2800      	cmp	r0, #0
   1527a:	d007      	beq.n	1528c <rint+0x50>
   1527c:	2e13      	cmp	r6, #19
   1527e:	d100      	bne.n	15282 <rint+0x46>
   15280:	e073      	b.n	1536a <rint+0x12e>
   15282:	2280      	movs	r2, #128	; 0x80
   15284:	02d2      	lsls	r2, r2, #11
   15286:	4132      	asrs	r2, r6
   15288:	4399      	bics	r1, r3
   1528a:	430a      	orrs	r2, r1
   1528c:	4643      	mov	r3, r8
   1528e:	00de      	lsls	r6, r3, #3
   15290:	4b39      	ldr	r3, [pc, #228]	; (15378 <rint+0x13c>)
   15292:	0011      	movs	r1, r2
   15294:	199e      	adds	r6, r3, r6
   15296:	6834      	ldr	r4, [r6, #0]
   15298:	6875      	ldr	r5, [r6, #4]
   1529a:	0038      	movs	r0, r7
   1529c:	0022      	movs	r2, r4
   1529e:	002b      	movs	r3, r5
   152a0:	f000 fe68 	bl	15f74 <__aeabi_dadd>
   152a4:	9000      	str	r0, [sp, #0]
   152a6:	9101      	str	r1, [sp, #4]
   152a8:	9800      	ldr	r0, [sp, #0]
   152aa:	9901      	ldr	r1, [sp, #4]
   152ac:	0022      	movs	r2, r4
   152ae:	002b      	movs	r3, r5
   152b0:	f002 f824 	bl	172fc <__aeabi_dsub>
   152b4:	0004      	movs	r4, r0
   152b6:	000d      	movs	r5, r1
   152b8:	0020      	movs	r0, r4
   152ba:	0029      	movs	r1, r5
   152bc:	b002      	add	sp, #8
   152be:	bc04      	pop	{r2}
   152c0:	4690      	mov	r8, r2
   152c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   152c4:	2e33      	cmp	r6, #51	; 0x33
   152c6:	dd0c      	ble.n	152e2 <rint+0xa6>
   152c8:	2380      	movs	r3, #128	; 0x80
   152ca:	0004      	movs	r4, r0
   152cc:	00db      	lsls	r3, r3, #3
   152ce:	000d      	movs	r5, r1
   152d0:	429e      	cmp	r6, r3
   152d2:	d1f1      	bne.n	152b8 <rint+0x7c>
   152d4:	0002      	movs	r2, r0
   152d6:	000b      	movs	r3, r1
   152d8:	f000 fe4c 	bl	15f74 <__aeabi_dadd>
   152dc:	0004      	movs	r4, r0
   152de:	000d      	movs	r5, r1
   152e0:	e7ea      	b.n	152b8 <rint+0x7c>
   152e2:	4c26      	ldr	r4, [pc, #152]	; (1537c <rint+0x140>)
   152e4:	000d      	movs	r5, r1
   152e6:	46a4      	mov	ip, r4
   152e8:	2401      	movs	r4, #1
   152ea:	4463      	add	r3, ip
   152ec:	4264      	negs	r4, r4
   152ee:	40dc      	lsrs	r4, r3
   152f0:	46a4      	mov	ip, r4
   152f2:	4661      	mov	r1, ip
   152f4:	0004      	movs	r4, r0
   152f6:	4201      	tst	r1, r0
   152f8:	d0de      	beq.n	152b8 <rint+0x7c>
   152fa:	0849      	lsrs	r1, r1, #1
   152fc:	4201      	tst	r1, r0
   152fe:	d0c5      	beq.n	1528c <rint+0x50>
   15300:	2780      	movs	r7, #128	; 0x80
   15302:	05ff      	lsls	r7, r7, #23
   15304:	411f      	asrs	r7, r3
   15306:	4388      	bics	r0, r1
   15308:	4307      	orrs	r7, r0
   1530a:	e7bf      	b.n	1528c <rint+0x50>
   1530c:	004b      	lsls	r3, r1, #1
   1530e:	085b      	lsrs	r3, r3, #1
   15310:	4303      	orrs	r3, r0
   15312:	0004      	movs	r4, r0
   15314:	000d      	movs	r5, r1
   15316:	2b00      	cmp	r3, #0
   15318:	d0ce      	beq.n	152b8 <rint+0x7c>
   1531a:	030b      	lsls	r3, r1, #12
   1531c:	0b1b      	lsrs	r3, r3, #12
   1531e:	4303      	orrs	r3, r0
   15320:	001a      	movs	r2, r3
   15322:	425b      	negs	r3, r3
   15324:	4313      	orrs	r3, r2
   15326:	2280      	movs	r2, #128	; 0x80
   15328:	0b1b      	lsrs	r3, r3, #12
   1532a:	0312      	lsls	r2, r2, #12
   1532c:	4013      	ands	r3, r2
   1532e:	0c4a      	lsrs	r2, r1, #17
   15330:	0452      	lsls	r2, r2, #17
   15332:	4313      	orrs	r3, r2
   15334:	0019      	movs	r1, r3
   15336:	4643      	mov	r3, r8
   15338:	00da      	lsls	r2, r3, #3
   1533a:	4b0f      	ldr	r3, [pc, #60]	; (15378 <rint+0x13c>)
   1533c:	189b      	adds	r3, r3, r2
   1533e:	681c      	ldr	r4, [r3, #0]
   15340:	685d      	ldr	r5, [r3, #4]
   15342:	0022      	movs	r2, r4
   15344:	002b      	movs	r3, r5
   15346:	f000 fe15 	bl	15f74 <__aeabi_dadd>
   1534a:	9000      	str	r0, [sp, #0]
   1534c:	9101      	str	r1, [sp, #4]
   1534e:	9800      	ldr	r0, [sp, #0]
   15350:	9901      	ldr	r1, [sp, #4]
   15352:	0022      	movs	r2, r4
   15354:	002b      	movs	r3, r5
   15356:	f001 ffd1 	bl	172fc <__aeabi_dsub>
   1535a:	4642      	mov	r2, r8
   1535c:	004b      	lsls	r3, r1, #1
   1535e:	085b      	lsrs	r3, r3, #1
   15360:	07d6      	lsls	r6, r2, #31
   15362:	4333      	orrs	r3, r6
   15364:	0004      	movs	r4, r0
   15366:	001d      	movs	r5, r3
   15368:	e7a6      	b.n	152b8 <rint+0x7c>
   1536a:	2780      	movs	r7, #128	; 0x80
   1536c:	063f      	lsls	r7, r7, #24
   1536e:	e788      	b.n	15282 <rint+0x46>
   15370:	fffffc01 	.word	0xfffffc01
   15374:	000fffff 	.word	0x000fffff
   15378:	00019a70 	.word	0x00019a70
   1537c:	fffffbed 	.word	0xfffffbed

00015380 <scalbn>:
   15380:	004b      	lsls	r3, r1, #1
   15382:	b570      	push	{r4, r5, r6, lr}
   15384:	0d5b      	lsrs	r3, r3, #21
   15386:	0014      	movs	r4, r2
   15388:	000a      	movs	r2, r1
   1538a:	2b00      	cmp	r3, #0
   1538c:	d11a      	bne.n	153c4 <scalbn+0x44>
   1538e:	004b      	lsls	r3, r1, #1
   15390:	085b      	lsrs	r3, r3, #1
   15392:	4303      	orrs	r3, r0
   15394:	d015      	beq.n	153c2 <scalbn+0x42>
   15396:	2200      	movs	r2, #0
   15398:	4b22      	ldr	r3, [pc, #136]	; (15424 <scalbn+0xa4>)
   1539a:	f001 fd2f 	bl	16dfc <__aeabi_dmul>
   1539e:	4b22      	ldr	r3, [pc, #136]	; (15428 <scalbn+0xa8>)
   153a0:	000a      	movs	r2, r1
   153a2:	429c      	cmp	r4, r3
   153a4:	db22      	blt.n	153ec <scalbn+0x6c>
   153a6:	004b      	lsls	r3, r1, #1
   153a8:	0d5b      	lsrs	r3, r3, #21
   153aa:	3b36      	subs	r3, #54	; 0x36
   153ac:	4d1f      	ldr	r5, [pc, #124]	; (1542c <scalbn+0xac>)
   153ae:	18e3      	adds	r3, r4, r3
   153b0:	42ab      	cmp	r3, r5
   153b2:	dc20      	bgt.n	153f6 <scalbn+0x76>
   153b4:	2b00      	cmp	r3, #0
   153b6:	dd0d      	ble.n	153d4 <scalbn+0x54>
   153b8:	4c1d      	ldr	r4, [pc, #116]	; (15430 <scalbn+0xb0>)
   153ba:	051b      	lsls	r3, r3, #20
   153bc:	4022      	ands	r2, r4
   153be:	431a      	orrs	r2, r3
   153c0:	0011      	movs	r1, r2
   153c2:	bd70      	pop	{r4, r5, r6, pc}
   153c4:	4d1b      	ldr	r5, [pc, #108]	; (15434 <scalbn+0xb4>)
   153c6:	42ab      	cmp	r3, r5
   153c8:	d1f0      	bne.n	153ac <scalbn+0x2c>
   153ca:	0002      	movs	r2, r0
   153cc:	000b      	movs	r3, r1
   153ce:	f000 fdd1 	bl	15f74 <__aeabi_dadd>
   153d2:	e7f6      	b.n	153c2 <scalbn+0x42>
   153d4:	001d      	movs	r5, r3
   153d6:	3535      	adds	r5, #53	; 0x35
   153d8:	da18      	bge.n	1540c <scalbn+0x8c>
   153da:	4b17      	ldr	r3, [pc, #92]	; (15438 <scalbn+0xb8>)
   153dc:	0002      	movs	r2, r0
   153de:	429c      	cmp	r4, r3
   153e0:	dc0a      	bgt.n	153f8 <scalbn+0x78>
   153e2:	000b      	movs	r3, r1
   153e4:	4815      	ldr	r0, [pc, #84]	; (1543c <scalbn+0xbc>)
   153e6:	4916      	ldr	r1, [pc, #88]	; (15440 <scalbn+0xc0>)
   153e8:	f000 f832 	bl	15450 <copysign>
   153ec:	4a13      	ldr	r2, [pc, #76]	; (1543c <scalbn+0xbc>)
   153ee:	4b14      	ldr	r3, [pc, #80]	; (15440 <scalbn+0xc0>)
   153f0:	f001 fd04 	bl	16dfc <__aeabi_dmul>
   153f4:	e7e5      	b.n	153c2 <scalbn+0x42>
   153f6:	0002      	movs	r2, r0
   153f8:	000b      	movs	r3, r1
   153fa:	4812      	ldr	r0, [pc, #72]	; (15444 <scalbn+0xc4>)
   153fc:	4912      	ldr	r1, [pc, #72]	; (15448 <scalbn+0xc8>)
   153fe:	f000 f827 	bl	15450 <copysign>
   15402:	4a10      	ldr	r2, [pc, #64]	; (15444 <scalbn+0xc4>)
   15404:	4b10      	ldr	r3, [pc, #64]	; (15448 <scalbn+0xc8>)
   15406:	f001 fcf9 	bl	16dfc <__aeabi_dmul>
   1540a:	e7da      	b.n	153c2 <scalbn+0x42>
   1540c:	4c08      	ldr	r4, [pc, #32]	; (15430 <scalbn+0xb0>)
   1540e:	3336      	adds	r3, #54	; 0x36
   15410:	4022      	ands	r2, r4
   15412:	051b      	lsls	r3, r3, #20
   15414:	4313      	orrs	r3, r2
   15416:	0019      	movs	r1, r3
   15418:	2200      	movs	r2, #0
   1541a:	4b0c      	ldr	r3, [pc, #48]	; (1544c <scalbn+0xcc>)
   1541c:	f001 fcee 	bl	16dfc <__aeabi_dmul>
   15420:	e7cf      	b.n	153c2 <scalbn+0x42>
   15422:	46c0      	nop			; (mov r8, r8)
   15424:	43500000 	.word	0x43500000
   15428:	ffff3cb0 	.word	0xffff3cb0
   1542c:	000007fe 	.word	0x000007fe
   15430:	800fffff 	.word	0x800fffff
   15434:	000007ff 	.word	0x000007ff
   15438:	0000c350 	.word	0x0000c350
   1543c:	c2f8f359 	.word	0xc2f8f359
   15440:	01a56e1f 	.word	0x01a56e1f
   15444:	8800759c 	.word	0x8800759c
   15448:	7e37e43c 	.word	0x7e37e43c
   1544c:	3c900000 	.word	0x3c900000

00015450 <copysign>:
   15450:	b530      	push	{r4, r5, lr}
   15452:	004a      	lsls	r2, r1, #1
   15454:	0fdb      	lsrs	r3, r3, #31
   15456:	07db      	lsls	r3, r3, #31
   15458:	0852      	lsrs	r2, r2, #1
   1545a:	431a      	orrs	r2, r3
   1545c:	0011      	movs	r1, r2
   1545e:	bd30      	pop	{r4, r5, pc}

00015460 <__udivsi3>:
   15460:	2200      	movs	r2, #0
   15462:	0843      	lsrs	r3, r0, #1
   15464:	428b      	cmp	r3, r1
   15466:	d374      	bcc.n	15552 <__udivsi3+0xf2>
   15468:	0903      	lsrs	r3, r0, #4
   1546a:	428b      	cmp	r3, r1
   1546c:	d35f      	bcc.n	1552e <__udivsi3+0xce>
   1546e:	0a03      	lsrs	r3, r0, #8
   15470:	428b      	cmp	r3, r1
   15472:	d344      	bcc.n	154fe <__udivsi3+0x9e>
   15474:	0b03      	lsrs	r3, r0, #12
   15476:	428b      	cmp	r3, r1
   15478:	d328      	bcc.n	154cc <__udivsi3+0x6c>
   1547a:	0c03      	lsrs	r3, r0, #16
   1547c:	428b      	cmp	r3, r1
   1547e:	d30d      	bcc.n	1549c <__udivsi3+0x3c>
   15480:	22ff      	movs	r2, #255	; 0xff
   15482:	0209      	lsls	r1, r1, #8
   15484:	ba12      	rev	r2, r2
   15486:	0c03      	lsrs	r3, r0, #16
   15488:	428b      	cmp	r3, r1
   1548a:	d302      	bcc.n	15492 <__udivsi3+0x32>
   1548c:	1212      	asrs	r2, r2, #8
   1548e:	0209      	lsls	r1, r1, #8
   15490:	d065      	beq.n	1555e <__udivsi3+0xfe>
   15492:	0b03      	lsrs	r3, r0, #12
   15494:	428b      	cmp	r3, r1
   15496:	d319      	bcc.n	154cc <__udivsi3+0x6c>
   15498:	e000      	b.n	1549c <__udivsi3+0x3c>
   1549a:	0a09      	lsrs	r1, r1, #8
   1549c:	0bc3      	lsrs	r3, r0, #15
   1549e:	428b      	cmp	r3, r1
   154a0:	d301      	bcc.n	154a6 <__udivsi3+0x46>
   154a2:	03cb      	lsls	r3, r1, #15
   154a4:	1ac0      	subs	r0, r0, r3
   154a6:	4152      	adcs	r2, r2
   154a8:	0b83      	lsrs	r3, r0, #14
   154aa:	428b      	cmp	r3, r1
   154ac:	d301      	bcc.n	154b2 <__udivsi3+0x52>
   154ae:	038b      	lsls	r3, r1, #14
   154b0:	1ac0      	subs	r0, r0, r3
   154b2:	4152      	adcs	r2, r2
   154b4:	0b43      	lsrs	r3, r0, #13
   154b6:	428b      	cmp	r3, r1
   154b8:	d301      	bcc.n	154be <__udivsi3+0x5e>
   154ba:	034b      	lsls	r3, r1, #13
   154bc:	1ac0      	subs	r0, r0, r3
   154be:	4152      	adcs	r2, r2
   154c0:	0b03      	lsrs	r3, r0, #12
   154c2:	428b      	cmp	r3, r1
   154c4:	d301      	bcc.n	154ca <__udivsi3+0x6a>
   154c6:	030b      	lsls	r3, r1, #12
   154c8:	1ac0      	subs	r0, r0, r3
   154ca:	4152      	adcs	r2, r2
   154cc:	0ac3      	lsrs	r3, r0, #11
   154ce:	428b      	cmp	r3, r1
   154d0:	d301      	bcc.n	154d6 <__udivsi3+0x76>
   154d2:	02cb      	lsls	r3, r1, #11
   154d4:	1ac0      	subs	r0, r0, r3
   154d6:	4152      	adcs	r2, r2
   154d8:	0a83      	lsrs	r3, r0, #10
   154da:	428b      	cmp	r3, r1
   154dc:	d301      	bcc.n	154e2 <__udivsi3+0x82>
   154de:	028b      	lsls	r3, r1, #10
   154e0:	1ac0      	subs	r0, r0, r3
   154e2:	4152      	adcs	r2, r2
   154e4:	0a43      	lsrs	r3, r0, #9
   154e6:	428b      	cmp	r3, r1
   154e8:	d301      	bcc.n	154ee <__udivsi3+0x8e>
   154ea:	024b      	lsls	r3, r1, #9
   154ec:	1ac0      	subs	r0, r0, r3
   154ee:	4152      	adcs	r2, r2
   154f0:	0a03      	lsrs	r3, r0, #8
   154f2:	428b      	cmp	r3, r1
   154f4:	d301      	bcc.n	154fa <__udivsi3+0x9a>
   154f6:	020b      	lsls	r3, r1, #8
   154f8:	1ac0      	subs	r0, r0, r3
   154fa:	4152      	adcs	r2, r2
   154fc:	d2cd      	bcs.n	1549a <__udivsi3+0x3a>
   154fe:	09c3      	lsrs	r3, r0, #7
   15500:	428b      	cmp	r3, r1
   15502:	d301      	bcc.n	15508 <__udivsi3+0xa8>
   15504:	01cb      	lsls	r3, r1, #7
   15506:	1ac0      	subs	r0, r0, r3
   15508:	4152      	adcs	r2, r2
   1550a:	0983      	lsrs	r3, r0, #6
   1550c:	428b      	cmp	r3, r1
   1550e:	d301      	bcc.n	15514 <__udivsi3+0xb4>
   15510:	018b      	lsls	r3, r1, #6
   15512:	1ac0      	subs	r0, r0, r3
   15514:	4152      	adcs	r2, r2
   15516:	0943      	lsrs	r3, r0, #5
   15518:	428b      	cmp	r3, r1
   1551a:	d301      	bcc.n	15520 <__udivsi3+0xc0>
   1551c:	014b      	lsls	r3, r1, #5
   1551e:	1ac0      	subs	r0, r0, r3
   15520:	4152      	adcs	r2, r2
   15522:	0903      	lsrs	r3, r0, #4
   15524:	428b      	cmp	r3, r1
   15526:	d301      	bcc.n	1552c <__udivsi3+0xcc>
   15528:	010b      	lsls	r3, r1, #4
   1552a:	1ac0      	subs	r0, r0, r3
   1552c:	4152      	adcs	r2, r2
   1552e:	08c3      	lsrs	r3, r0, #3
   15530:	428b      	cmp	r3, r1
   15532:	d301      	bcc.n	15538 <__udivsi3+0xd8>
   15534:	00cb      	lsls	r3, r1, #3
   15536:	1ac0      	subs	r0, r0, r3
   15538:	4152      	adcs	r2, r2
   1553a:	0883      	lsrs	r3, r0, #2
   1553c:	428b      	cmp	r3, r1
   1553e:	d301      	bcc.n	15544 <__udivsi3+0xe4>
   15540:	008b      	lsls	r3, r1, #2
   15542:	1ac0      	subs	r0, r0, r3
   15544:	4152      	adcs	r2, r2
   15546:	0843      	lsrs	r3, r0, #1
   15548:	428b      	cmp	r3, r1
   1554a:	d301      	bcc.n	15550 <__udivsi3+0xf0>
   1554c:	004b      	lsls	r3, r1, #1
   1554e:	1ac0      	subs	r0, r0, r3
   15550:	4152      	adcs	r2, r2
   15552:	1a41      	subs	r1, r0, r1
   15554:	d200      	bcs.n	15558 <__udivsi3+0xf8>
   15556:	4601      	mov	r1, r0
   15558:	4152      	adcs	r2, r2
   1555a:	4610      	mov	r0, r2
   1555c:	4770      	bx	lr
   1555e:	e7ff      	b.n	15560 <__udivsi3+0x100>
   15560:	b501      	push	{r0, lr}
   15562:	2000      	movs	r0, #0
   15564:	f000 f8f0 	bl	15748 <__aeabi_idiv0>
   15568:	bd02      	pop	{r1, pc}
   1556a:	46c0      	nop			; (mov r8, r8)

0001556c <__aeabi_uidivmod>:
   1556c:	2900      	cmp	r1, #0
   1556e:	d0f7      	beq.n	15560 <__udivsi3+0x100>
   15570:	e776      	b.n	15460 <__udivsi3>
   15572:	4770      	bx	lr

00015574 <__divsi3>:
   15574:	4603      	mov	r3, r0
   15576:	430b      	orrs	r3, r1
   15578:	d47f      	bmi.n	1567a <__divsi3+0x106>
   1557a:	2200      	movs	r2, #0
   1557c:	0843      	lsrs	r3, r0, #1
   1557e:	428b      	cmp	r3, r1
   15580:	d374      	bcc.n	1566c <__divsi3+0xf8>
   15582:	0903      	lsrs	r3, r0, #4
   15584:	428b      	cmp	r3, r1
   15586:	d35f      	bcc.n	15648 <__divsi3+0xd4>
   15588:	0a03      	lsrs	r3, r0, #8
   1558a:	428b      	cmp	r3, r1
   1558c:	d344      	bcc.n	15618 <__divsi3+0xa4>
   1558e:	0b03      	lsrs	r3, r0, #12
   15590:	428b      	cmp	r3, r1
   15592:	d328      	bcc.n	155e6 <__divsi3+0x72>
   15594:	0c03      	lsrs	r3, r0, #16
   15596:	428b      	cmp	r3, r1
   15598:	d30d      	bcc.n	155b6 <__divsi3+0x42>
   1559a:	22ff      	movs	r2, #255	; 0xff
   1559c:	0209      	lsls	r1, r1, #8
   1559e:	ba12      	rev	r2, r2
   155a0:	0c03      	lsrs	r3, r0, #16
   155a2:	428b      	cmp	r3, r1
   155a4:	d302      	bcc.n	155ac <__divsi3+0x38>
   155a6:	1212      	asrs	r2, r2, #8
   155a8:	0209      	lsls	r1, r1, #8
   155aa:	d065      	beq.n	15678 <__divsi3+0x104>
   155ac:	0b03      	lsrs	r3, r0, #12
   155ae:	428b      	cmp	r3, r1
   155b0:	d319      	bcc.n	155e6 <__divsi3+0x72>
   155b2:	e000      	b.n	155b6 <__divsi3+0x42>
   155b4:	0a09      	lsrs	r1, r1, #8
   155b6:	0bc3      	lsrs	r3, r0, #15
   155b8:	428b      	cmp	r3, r1
   155ba:	d301      	bcc.n	155c0 <__divsi3+0x4c>
   155bc:	03cb      	lsls	r3, r1, #15
   155be:	1ac0      	subs	r0, r0, r3
   155c0:	4152      	adcs	r2, r2
   155c2:	0b83      	lsrs	r3, r0, #14
   155c4:	428b      	cmp	r3, r1
   155c6:	d301      	bcc.n	155cc <__divsi3+0x58>
   155c8:	038b      	lsls	r3, r1, #14
   155ca:	1ac0      	subs	r0, r0, r3
   155cc:	4152      	adcs	r2, r2
   155ce:	0b43      	lsrs	r3, r0, #13
   155d0:	428b      	cmp	r3, r1
   155d2:	d301      	bcc.n	155d8 <__divsi3+0x64>
   155d4:	034b      	lsls	r3, r1, #13
   155d6:	1ac0      	subs	r0, r0, r3
   155d8:	4152      	adcs	r2, r2
   155da:	0b03      	lsrs	r3, r0, #12
   155dc:	428b      	cmp	r3, r1
   155de:	d301      	bcc.n	155e4 <__divsi3+0x70>
   155e0:	030b      	lsls	r3, r1, #12
   155e2:	1ac0      	subs	r0, r0, r3
   155e4:	4152      	adcs	r2, r2
   155e6:	0ac3      	lsrs	r3, r0, #11
   155e8:	428b      	cmp	r3, r1
   155ea:	d301      	bcc.n	155f0 <__divsi3+0x7c>
   155ec:	02cb      	lsls	r3, r1, #11
   155ee:	1ac0      	subs	r0, r0, r3
   155f0:	4152      	adcs	r2, r2
   155f2:	0a83      	lsrs	r3, r0, #10
   155f4:	428b      	cmp	r3, r1
   155f6:	d301      	bcc.n	155fc <__divsi3+0x88>
   155f8:	028b      	lsls	r3, r1, #10
   155fa:	1ac0      	subs	r0, r0, r3
   155fc:	4152      	adcs	r2, r2
   155fe:	0a43      	lsrs	r3, r0, #9
   15600:	428b      	cmp	r3, r1
   15602:	d301      	bcc.n	15608 <__divsi3+0x94>
   15604:	024b      	lsls	r3, r1, #9
   15606:	1ac0      	subs	r0, r0, r3
   15608:	4152      	adcs	r2, r2
   1560a:	0a03      	lsrs	r3, r0, #8
   1560c:	428b      	cmp	r3, r1
   1560e:	d301      	bcc.n	15614 <__divsi3+0xa0>
   15610:	020b      	lsls	r3, r1, #8
   15612:	1ac0      	subs	r0, r0, r3
   15614:	4152      	adcs	r2, r2
   15616:	d2cd      	bcs.n	155b4 <__divsi3+0x40>
   15618:	09c3      	lsrs	r3, r0, #7
   1561a:	428b      	cmp	r3, r1
   1561c:	d301      	bcc.n	15622 <__divsi3+0xae>
   1561e:	01cb      	lsls	r3, r1, #7
   15620:	1ac0      	subs	r0, r0, r3
   15622:	4152      	adcs	r2, r2
   15624:	0983      	lsrs	r3, r0, #6
   15626:	428b      	cmp	r3, r1
   15628:	d301      	bcc.n	1562e <__divsi3+0xba>
   1562a:	018b      	lsls	r3, r1, #6
   1562c:	1ac0      	subs	r0, r0, r3
   1562e:	4152      	adcs	r2, r2
   15630:	0943      	lsrs	r3, r0, #5
   15632:	428b      	cmp	r3, r1
   15634:	d301      	bcc.n	1563a <__divsi3+0xc6>
   15636:	014b      	lsls	r3, r1, #5
   15638:	1ac0      	subs	r0, r0, r3
   1563a:	4152      	adcs	r2, r2
   1563c:	0903      	lsrs	r3, r0, #4
   1563e:	428b      	cmp	r3, r1
   15640:	d301      	bcc.n	15646 <__divsi3+0xd2>
   15642:	010b      	lsls	r3, r1, #4
   15644:	1ac0      	subs	r0, r0, r3
   15646:	4152      	adcs	r2, r2
   15648:	08c3      	lsrs	r3, r0, #3
   1564a:	428b      	cmp	r3, r1
   1564c:	d301      	bcc.n	15652 <__divsi3+0xde>
   1564e:	00cb      	lsls	r3, r1, #3
   15650:	1ac0      	subs	r0, r0, r3
   15652:	4152      	adcs	r2, r2
   15654:	0883      	lsrs	r3, r0, #2
   15656:	428b      	cmp	r3, r1
   15658:	d301      	bcc.n	1565e <__divsi3+0xea>
   1565a:	008b      	lsls	r3, r1, #2
   1565c:	1ac0      	subs	r0, r0, r3
   1565e:	4152      	adcs	r2, r2
   15660:	0843      	lsrs	r3, r0, #1
   15662:	428b      	cmp	r3, r1
   15664:	d301      	bcc.n	1566a <__divsi3+0xf6>
   15666:	004b      	lsls	r3, r1, #1
   15668:	1ac0      	subs	r0, r0, r3
   1566a:	4152      	adcs	r2, r2
   1566c:	1a41      	subs	r1, r0, r1
   1566e:	d200      	bcs.n	15672 <__divsi3+0xfe>
   15670:	4601      	mov	r1, r0
   15672:	4152      	adcs	r2, r2
   15674:	4610      	mov	r0, r2
   15676:	4770      	bx	lr
   15678:	e05d      	b.n	15736 <__divsi3+0x1c2>
   1567a:	0fca      	lsrs	r2, r1, #31
   1567c:	d000      	beq.n	15680 <__divsi3+0x10c>
   1567e:	4249      	negs	r1, r1
   15680:	1003      	asrs	r3, r0, #32
   15682:	d300      	bcc.n	15686 <__divsi3+0x112>
   15684:	4240      	negs	r0, r0
   15686:	4053      	eors	r3, r2
   15688:	2200      	movs	r2, #0
   1568a:	469c      	mov	ip, r3
   1568c:	0903      	lsrs	r3, r0, #4
   1568e:	428b      	cmp	r3, r1
   15690:	d32d      	bcc.n	156ee <__divsi3+0x17a>
   15692:	0a03      	lsrs	r3, r0, #8
   15694:	428b      	cmp	r3, r1
   15696:	d312      	bcc.n	156be <__divsi3+0x14a>
   15698:	22fc      	movs	r2, #252	; 0xfc
   1569a:	0189      	lsls	r1, r1, #6
   1569c:	ba12      	rev	r2, r2
   1569e:	0a03      	lsrs	r3, r0, #8
   156a0:	428b      	cmp	r3, r1
   156a2:	d30c      	bcc.n	156be <__divsi3+0x14a>
   156a4:	0189      	lsls	r1, r1, #6
   156a6:	1192      	asrs	r2, r2, #6
   156a8:	428b      	cmp	r3, r1
   156aa:	d308      	bcc.n	156be <__divsi3+0x14a>
   156ac:	0189      	lsls	r1, r1, #6
   156ae:	1192      	asrs	r2, r2, #6
   156b0:	428b      	cmp	r3, r1
   156b2:	d304      	bcc.n	156be <__divsi3+0x14a>
   156b4:	0189      	lsls	r1, r1, #6
   156b6:	d03a      	beq.n	1572e <__divsi3+0x1ba>
   156b8:	1192      	asrs	r2, r2, #6
   156ba:	e000      	b.n	156be <__divsi3+0x14a>
   156bc:	0989      	lsrs	r1, r1, #6
   156be:	09c3      	lsrs	r3, r0, #7
   156c0:	428b      	cmp	r3, r1
   156c2:	d301      	bcc.n	156c8 <__divsi3+0x154>
   156c4:	01cb      	lsls	r3, r1, #7
   156c6:	1ac0      	subs	r0, r0, r3
   156c8:	4152      	adcs	r2, r2
   156ca:	0983      	lsrs	r3, r0, #6
   156cc:	428b      	cmp	r3, r1
   156ce:	d301      	bcc.n	156d4 <__divsi3+0x160>
   156d0:	018b      	lsls	r3, r1, #6
   156d2:	1ac0      	subs	r0, r0, r3
   156d4:	4152      	adcs	r2, r2
   156d6:	0943      	lsrs	r3, r0, #5
   156d8:	428b      	cmp	r3, r1
   156da:	d301      	bcc.n	156e0 <__divsi3+0x16c>
   156dc:	014b      	lsls	r3, r1, #5
   156de:	1ac0      	subs	r0, r0, r3
   156e0:	4152      	adcs	r2, r2
   156e2:	0903      	lsrs	r3, r0, #4
   156e4:	428b      	cmp	r3, r1
   156e6:	d301      	bcc.n	156ec <__divsi3+0x178>
   156e8:	010b      	lsls	r3, r1, #4
   156ea:	1ac0      	subs	r0, r0, r3
   156ec:	4152      	adcs	r2, r2
   156ee:	08c3      	lsrs	r3, r0, #3
   156f0:	428b      	cmp	r3, r1
   156f2:	d301      	bcc.n	156f8 <__divsi3+0x184>
   156f4:	00cb      	lsls	r3, r1, #3
   156f6:	1ac0      	subs	r0, r0, r3
   156f8:	4152      	adcs	r2, r2
   156fa:	0883      	lsrs	r3, r0, #2
   156fc:	428b      	cmp	r3, r1
   156fe:	d301      	bcc.n	15704 <__divsi3+0x190>
   15700:	008b      	lsls	r3, r1, #2
   15702:	1ac0      	subs	r0, r0, r3
   15704:	4152      	adcs	r2, r2
   15706:	d2d9      	bcs.n	156bc <__divsi3+0x148>
   15708:	0843      	lsrs	r3, r0, #1
   1570a:	428b      	cmp	r3, r1
   1570c:	d301      	bcc.n	15712 <__divsi3+0x19e>
   1570e:	004b      	lsls	r3, r1, #1
   15710:	1ac0      	subs	r0, r0, r3
   15712:	4152      	adcs	r2, r2
   15714:	1a41      	subs	r1, r0, r1
   15716:	d200      	bcs.n	1571a <__divsi3+0x1a6>
   15718:	4601      	mov	r1, r0
   1571a:	4663      	mov	r3, ip
   1571c:	4152      	adcs	r2, r2
   1571e:	105b      	asrs	r3, r3, #1
   15720:	4610      	mov	r0, r2
   15722:	d301      	bcc.n	15728 <__divsi3+0x1b4>
   15724:	4240      	negs	r0, r0
   15726:	2b00      	cmp	r3, #0
   15728:	d500      	bpl.n	1572c <__divsi3+0x1b8>
   1572a:	4249      	negs	r1, r1
   1572c:	4770      	bx	lr
   1572e:	4663      	mov	r3, ip
   15730:	105b      	asrs	r3, r3, #1
   15732:	d300      	bcc.n	15736 <__divsi3+0x1c2>
   15734:	4240      	negs	r0, r0
   15736:	b501      	push	{r0, lr}
   15738:	2000      	movs	r0, #0
   1573a:	f000 f805 	bl	15748 <__aeabi_idiv0>
   1573e:	bd02      	pop	{r1, pc}

00015740 <__aeabi_idivmod>:
   15740:	2900      	cmp	r1, #0
   15742:	d0f8      	beq.n	15736 <__divsi3+0x1c2>
   15744:	e716      	b.n	15574 <__divsi3>
   15746:	4770      	bx	lr

00015748 <__aeabi_idiv0>:
   15748:	4770      	bx	lr
   1574a:	46c0      	nop			; (mov r8, r8)

0001574c <__aeabi_cdrcmple>:
   1574c:	4684      	mov	ip, r0
   1574e:	1c10      	adds	r0, r2, #0
   15750:	4662      	mov	r2, ip
   15752:	468c      	mov	ip, r1
   15754:	1c19      	adds	r1, r3, #0
   15756:	4663      	mov	r3, ip
   15758:	e000      	b.n	1575c <__aeabi_cdcmpeq>
   1575a:	46c0      	nop			; (mov r8, r8)

0001575c <__aeabi_cdcmpeq>:
   1575c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1575e:	f001 faeb 	bl	16d38 <__ledf2>
   15762:	2800      	cmp	r0, #0
   15764:	d401      	bmi.n	1576a <__aeabi_cdcmpeq+0xe>
   15766:	2100      	movs	r1, #0
   15768:	42c8      	cmn	r0, r1
   1576a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001576c <__aeabi_dcmpeq>:
   1576c:	b510      	push	{r4, lr}
   1576e:	f001 fa45 	bl	16bfc <__eqdf2>
   15772:	4240      	negs	r0, r0
   15774:	3001      	adds	r0, #1
   15776:	bd10      	pop	{r4, pc}

00015778 <__aeabi_dcmplt>:
   15778:	b510      	push	{r4, lr}
   1577a:	f001 fadd 	bl	16d38 <__ledf2>
   1577e:	2800      	cmp	r0, #0
   15780:	db01      	blt.n	15786 <__aeabi_dcmplt+0xe>
   15782:	2000      	movs	r0, #0
   15784:	bd10      	pop	{r4, pc}
   15786:	2001      	movs	r0, #1
   15788:	bd10      	pop	{r4, pc}
   1578a:	46c0      	nop			; (mov r8, r8)

0001578c <__aeabi_dcmple>:
   1578c:	b510      	push	{r4, lr}
   1578e:	f001 fad3 	bl	16d38 <__ledf2>
   15792:	2800      	cmp	r0, #0
   15794:	dd01      	ble.n	1579a <__aeabi_dcmple+0xe>
   15796:	2000      	movs	r0, #0
   15798:	bd10      	pop	{r4, pc}
   1579a:	2001      	movs	r0, #1
   1579c:	bd10      	pop	{r4, pc}
   1579e:	46c0      	nop			; (mov r8, r8)

000157a0 <__aeabi_dcmpgt>:
   157a0:	b510      	push	{r4, lr}
   157a2:	f001 fa65 	bl	16c70 <__gedf2>
   157a6:	2800      	cmp	r0, #0
   157a8:	dc01      	bgt.n	157ae <__aeabi_dcmpgt+0xe>
   157aa:	2000      	movs	r0, #0
   157ac:	bd10      	pop	{r4, pc}
   157ae:	2001      	movs	r0, #1
   157b0:	bd10      	pop	{r4, pc}
   157b2:	46c0      	nop			; (mov r8, r8)

000157b4 <__aeabi_dcmpge>:
   157b4:	b510      	push	{r4, lr}
   157b6:	f001 fa5b 	bl	16c70 <__gedf2>
   157ba:	2800      	cmp	r0, #0
   157bc:	da01      	bge.n	157c2 <__aeabi_dcmpge+0xe>
   157be:	2000      	movs	r0, #0
   157c0:	bd10      	pop	{r4, pc}
   157c2:	2001      	movs	r0, #1
   157c4:	bd10      	pop	{r4, pc}
   157c6:	46c0      	nop			; (mov r8, r8)

000157c8 <__aeabi_uldivmod>:
   157c8:	2b00      	cmp	r3, #0
   157ca:	d111      	bne.n	157f0 <__aeabi_uldivmod+0x28>
   157cc:	2a00      	cmp	r2, #0
   157ce:	d10f      	bne.n	157f0 <__aeabi_uldivmod+0x28>
   157d0:	2900      	cmp	r1, #0
   157d2:	d100      	bne.n	157d6 <__aeabi_uldivmod+0xe>
   157d4:	2800      	cmp	r0, #0
   157d6:	d002      	beq.n	157de <__aeabi_uldivmod+0x16>
   157d8:	2100      	movs	r1, #0
   157da:	43c9      	mvns	r1, r1
   157dc:	1c08      	adds	r0, r1, #0
   157de:	b407      	push	{r0, r1, r2}
   157e0:	4802      	ldr	r0, [pc, #8]	; (157ec <__aeabi_uldivmod+0x24>)
   157e2:	a102      	add	r1, pc, #8	; (adr r1, 157ec <__aeabi_uldivmod+0x24>)
   157e4:	1840      	adds	r0, r0, r1
   157e6:	9002      	str	r0, [sp, #8]
   157e8:	bd03      	pop	{r0, r1, pc}
   157ea:	46c0      	nop			; (mov r8, r8)
   157ec:	ffffff5d 	.word	0xffffff5d
   157f0:	b403      	push	{r0, r1}
   157f2:	4668      	mov	r0, sp
   157f4:	b501      	push	{r0, lr}
   157f6:	9802      	ldr	r0, [sp, #8]
   157f8:	f000 f84e 	bl	15898 <__udivmoddi4>
   157fc:	9b01      	ldr	r3, [sp, #4]
   157fe:	469e      	mov	lr, r3
   15800:	b002      	add	sp, #8
   15802:	bc0c      	pop	{r2, r3}
   15804:	4770      	bx	lr
   15806:	46c0      	nop			; (mov r8, r8)

00015808 <__aeabi_lmul>:
   15808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1580a:	46ce      	mov	lr, r9
   1580c:	4647      	mov	r7, r8
   1580e:	0415      	lsls	r5, r2, #16
   15810:	0c2d      	lsrs	r5, r5, #16
   15812:	002e      	movs	r6, r5
   15814:	b580      	push	{r7, lr}
   15816:	0407      	lsls	r7, r0, #16
   15818:	0c14      	lsrs	r4, r2, #16
   1581a:	0c3f      	lsrs	r7, r7, #16
   1581c:	4699      	mov	r9, r3
   1581e:	0c03      	lsrs	r3, r0, #16
   15820:	437e      	muls	r6, r7
   15822:	435d      	muls	r5, r3
   15824:	4367      	muls	r7, r4
   15826:	4363      	muls	r3, r4
   15828:	197f      	adds	r7, r7, r5
   1582a:	0c34      	lsrs	r4, r6, #16
   1582c:	19e4      	adds	r4, r4, r7
   1582e:	469c      	mov	ip, r3
   15830:	42a5      	cmp	r5, r4
   15832:	d903      	bls.n	1583c <__aeabi_lmul+0x34>
   15834:	2380      	movs	r3, #128	; 0x80
   15836:	025b      	lsls	r3, r3, #9
   15838:	4698      	mov	r8, r3
   1583a:	44c4      	add	ip, r8
   1583c:	464b      	mov	r3, r9
   1583e:	4351      	muls	r1, r2
   15840:	4343      	muls	r3, r0
   15842:	0436      	lsls	r6, r6, #16
   15844:	0c36      	lsrs	r6, r6, #16
   15846:	0c25      	lsrs	r5, r4, #16
   15848:	0424      	lsls	r4, r4, #16
   1584a:	4465      	add	r5, ip
   1584c:	19a4      	adds	r4, r4, r6
   1584e:	1859      	adds	r1, r3, r1
   15850:	1949      	adds	r1, r1, r5
   15852:	0020      	movs	r0, r4
   15854:	bc0c      	pop	{r2, r3}
   15856:	4690      	mov	r8, r2
   15858:	4699      	mov	r9, r3
   1585a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001585c <__aeabi_d2uiz>:
   1585c:	b570      	push	{r4, r5, r6, lr}
   1585e:	2200      	movs	r2, #0
   15860:	4b0c      	ldr	r3, [pc, #48]	; (15894 <__aeabi_d2uiz+0x38>)
   15862:	0004      	movs	r4, r0
   15864:	000d      	movs	r5, r1
   15866:	f7ff ffa5 	bl	157b4 <__aeabi_dcmpge>
   1586a:	2800      	cmp	r0, #0
   1586c:	d104      	bne.n	15878 <__aeabi_d2uiz+0x1c>
   1586e:	0020      	movs	r0, r4
   15870:	0029      	movs	r1, r5
   15872:	f002 f879 	bl	17968 <__aeabi_d2iz>
   15876:	bd70      	pop	{r4, r5, r6, pc}
   15878:	4b06      	ldr	r3, [pc, #24]	; (15894 <__aeabi_d2uiz+0x38>)
   1587a:	2200      	movs	r2, #0
   1587c:	0020      	movs	r0, r4
   1587e:	0029      	movs	r1, r5
   15880:	f001 fd3c 	bl	172fc <__aeabi_dsub>
   15884:	f002 f870 	bl	17968 <__aeabi_d2iz>
   15888:	2380      	movs	r3, #128	; 0x80
   1588a:	061b      	lsls	r3, r3, #24
   1588c:	469c      	mov	ip, r3
   1588e:	4460      	add	r0, ip
   15890:	e7f1      	b.n	15876 <__aeabi_d2uiz+0x1a>
   15892:	46c0      	nop			; (mov r8, r8)
   15894:	41e00000 	.word	0x41e00000

00015898 <__udivmoddi4>:
   15898:	b5f0      	push	{r4, r5, r6, r7, lr}
   1589a:	4657      	mov	r7, sl
   1589c:	464e      	mov	r6, r9
   1589e:	4645      	mov	r5, r8
   158a0:	46de      	mov	lr, fp
   158a2:	b5e0      	push	{r5, r6, r7, lr}
   158a4:	0004      	movs	r4, r0
   158a6:	b083      	sub	sp, #12
   158a8:	000d      	movs	r5, r1
   158aa:	4692      	mov	sl, r2
   158ac:	4699      	mov	r9, r3
   158ae:	428b      	cmp	r3, r1
   158b0:	d82f      	bhi.n	15912 <__udivmoddi4+0x7a>
   158b2:	d02c      	beq.n	1590e <__udivmoddi4+0x76>
   158b4:	4649      	mov	r1, r9
   158b6:	4650      	mov	r0, sl
   158b8:	f002 f974 	bl	17ba4 <__clzdi2>
   158bc:	0029      	movs	r1, r5
   158be:	0006      	movs	r6, r0
   158c0:	0020      	movs	r0, r4
   158c2:	f002 f96f 	bl	17ba4 <__clzdi2>
   158c6:	1a33      	subs	r3, r6, r0
   158c8:	4698      	mov	r8, r3
   158ca:	3b20      	subs	r3, #32
   158cc:	469b      	mov	fp, r3
   158ce:	d500      	bpl.n	158d2 <__udivmoddi4+0x3a>
   158d0:	e074      	b.n	159bc <__udivmoddi4+0x124>
   158d2:	4653      	mov	r3, sl
   158d4:	465a      	mov	r2, fp
   158d6:	4093      	lsls	r3, r2
   158d8:	001f      	movs	r7, r3
   158da:	4653      	mov	r3, sl
   158dc:	4642      	mov	r2, r8
   158de:	4093      	lsls	r3, r2
   158e0:	001e      	movs	r6, r3
   158e2:	42af      	cmp	r7, r5
   158e4:	d829      	bhi.n	1593a <__udivmoddi4+0xa2>
   158e6:	d026      	beq.n	15936 <__udivmoddi4+0x9e>
   158e8:	465b      	mov	r3, fp
   158ea:	1ba4      	subs	r4, r4, r6
   158ec:	41bd      	sbcs	r5, r7
   158ee:	2b00      	cmp	r3, #0
   158f0:	da00      	bge.n	158f4 <__udivmoddi4+0x5c>
   158f2:	e079      	b.n	159e8 <__udivmoddi4+0x150>
   158f4:	2200      	movs	r2, #0
   158f6:	2300      	movs	r3, #0
   158f8:	9200      	str	r2, [sp, #0]
   158fa:	9301      	str	r3, [sp, #4]
   158fc:	2301      	movs	r3, #1
   158fe:	465a      	mov	r2, fp
   15900:	4093      	lsls	r3, r2
   15902:	9301      	str	r3, [sp, #4]
   15904:	2301      	movs	r3, #1
   15906:	4642      	mov	r2, r8
   15908:	4093      	lsls	r3, r2
   1590a:	9300      	str	r3, [sp, #0]
   1590c:	e019      	b.n	15942 <__udivmoddi4+0xaa>
   1590e:	4282      	cmp	r2, r0
   15910:	d9d0      	bls.n	158b4 <__udivmoddi4+0x1c>
   15912:	2200      	movs	r2, #0
   15914:	2300      	movs	r3, #0
   15916:	9200      	str	r2, [sp, #0]
   15918:	9301      	str	r3, [sp, #4]
   1591a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1591c:	2b00      	cmp	r3, #0
   1591e:	d001      	beq.n	15924 <__udivmoddi4+0x8c>
   15920:	601c      	str	r4, [r3, #0]
   15922:	605d      	str	r5, [r3, #4]
   15924:	9800      	ldr	r0, [sp, #0]
   15926:	9901      	ldr	r1, [sp, #4]
   15928:	b003      	add	sp, #12
   1592a:	bc3c      	pop	{r2, r3, r4, r5}
   1592c:	4690      	mov	r8, r2
   1592e:	4699      	mov	r9, r3
   15930:	46a2      	mov	sl, r4
   15932:	46ab      	mov	fp, r5
   15934:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15936:	42a3      	cmp	r3, r4
   15938:	d9d6      	bls.n	158e8 <__udivmoddi4+0x50>
   1593a:	2200      	movs	r2, #0
   1593c:	2300      	movs	r3, #0
   1593e:	9200      	str	r2, [sp, #0]
   15940:	9301      	str	r3, [sp, #4]
   15942:	4643      	mov	r3, r8
   15944:	2b00      	cmp	r3, #0
   15946:	d0e8      	beq.n	1591a <__udivmoddi4+0x82>
   15948:	07fb      	lsls	r3, r7, #31
   1594a:	0872      	lsrs	r2, r6, #1
   1594c:	431a      	orrs	r2, r3
   1594e:	4646      	mov	r6, r8
   15950:	087b      	lsrs	r3, r7, #1
   15952:	e00e      	b.n	15972 <__udivmoddi4+0xda>
   15954:	42ab      	cmp	r3, r5
   15956:	d101      	bne.n	1595c <__udivmoddi4+0xc4>
   15958:	42a2      	cmp	r2, r4
   1595a:	d80c      	bhi.n	15976 <__udivmoddi4+0xde>
   1595c:	1aa4      	subs	r4, r4, r2
   1595e:	419d      	sbcs	r5, r3
   15960:	2001      	movs	r0, #1
   15962:	1924      	adds	r4, r4, r4
   15964:	416d      	adcs	r5, r5
   15966:	2100      	movs	r1, #0
   15968:	3e01      	subs	r6, #1
   1596a:	1824      	adds	r4, r4, r0
   1596c:	414d      	adcs	r5, r1
   1596e:	2e00      	cmp	r6, #0
   15970:	d006      	beq.n	15980 <__udivmoddi4+0xe8>
   15972:	42ab      	cmp	r3, r5
   15974:	d9ee      	bls.n	15954 <__udivmoddi4+0xbc>
   15976:	3e01      	subs	r6, #1
   15978:	1924      	adds	r4, r4, r4
   1597a:	416d      	adcs	r5, r5
   1597c:	2e00      	cmp	r6, #0
   1597e:	d1f8      	bne.n	15972 <__udivmoddi4+0xda>
   15980:	465b      	mov	r3, fp
   15982:	9800      	ldr	r0, [sp, #0]
   15984:	9901      	ldr	r1, [sp, #4]
   15986:	1900      	adds	r0, r0, r4
   15988:	4169      	adcs	r1, r5
   1598a:	2b00      	cmp	r3, #0
   1598c:	db22      	blt.n	159d4 <__udivmoddi4+0x13c>
   1598e:	002b      	movs	r3, r5
   15990:	465a      	mov	r2, fp
   15992:	40d3      	lsrs	r3, r2
   15994:	002a      	movs	r2, r5
   15996:	4644      	mov	r4, r8
   15998:	40e2      	lsrs	r2, r4
   1599a:	001c      	movs	r4, r3
   1599c:	465b      	mov	r3, fp
   1599e:	0015      	movs	r5, r2
   159a0:	2b00      	cmp	r3, #0
   159a2:	db2c      	blt.n	159fe <__udivmoddi4+0x166>
   159a4:	0026      	movs	r6, r4
   159a6:	409e      	lsls	r6, r3
   159a8:	0033      	movs	r3, r6
   159aa:	0026      	movs	r6, r4
   159ac:	4647      	mov	r7, r8
   159ae:	40be      	lsls	r6, r7
   159b0:	0032      	movs	r2, r6
   159b2:	1a80      	subs	r0, r0, r2
   159b4:	4199      	sbcs	r1, r3
   159b6:	9000      	str	r0, [sp, #0]
   159b8:	9101      	str	r1, [sp, #4]
   159ba:	e7ae      	b.n	1591a <__udivmoddi4+0x82>
   159bc:	4642      	mov	r2, r8
   159be:	2320      	movs	r3, #32
   159c0:	1a9b      	subs	r3, r3, r2
   159c2:	4652      	mov	r2, sl
   159c4:	40da      	lsrs	r2, r3
   159c6:	4641      	mov	r1, r8
   159c8:	0013      	movs	r3, r2
   159ca:	464a      	mov	r2, r9
   159cc:	408a      	lsls	r2, r1
   159ce:	0017      	movs	r7, r2
   159d0:	431f      	orrs	r7, r3
   159d2:	e782      	b.n	158da <__udivmoddi4+0x42>
   159d4:	4642      	mov	r2, r8
   159d6:	2320      	movs	r3, #32
   159d8:	1a9b      	subs	r3, r3, r2
   159da:	002a      	movs	r2, r5
   159dc:	4646      	mov	r6, r8
   159de:	409a      	lsls	r2, r3
   159e0:	0023      	movs	r3, r4
   159e2:	40f3      	lsrs	r3, r6
   159e4:	4313      	orrs	r3, r2
   159e6:	e7d5      	b.n	15994 <__udivmoddi4+0xfc>
   159e8:	4642      	mov	r2, r8
   159ea:	2320      	movs	r3, #32
   159ec:	2100      	movs	r1, #0
   159ee:	1a9b      	subs	r3, r3, r2
   159f0:	2200      	movs	r2, #0
   159f2:	9100      	str	r1, [sp, #0]
   159f4:	9201      	str	r2, [sp, #4]
   159f6:	2201      	movs	r2, #1
   159f8:	40da      	lsrs	r2, r3
   159fa:	9201      	str	r2, [sp, #4]
   159fc:	e782      	b.n	15904 <__udivmoddi4+0x6c>
   159fe:	4642      	mov	r2, r8
   15a00:	2320      	movs	r3, #32
   15a02:	0026      	movs	r6, r4
   15a04:	1a9b      	subs	r3, r3, r2
   15a06:	40de      	lsrs	r6, r3
   15a08:	002f      	movs	r7, r5
   15a0a:	46b4      	mov	ip, r6
   15a0c:	4097      	lsls	r7, r2
   15a0e:	4666      	mov	r6, ip
   15a10:	003b      	movs	r3, r7
   15a12:	4333      	orrs	r3, r6
   15a14:	e7c9      	b.n	159aa <__udivmoddi4+0x112>
   15a16:	46c0      	nop			; (mov r8, r8)

00015a18 <__aeabi_fdiv>:
   15a18:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a1a:	4657      	mov	r7, sl
   15a1c:	464e      	mov	r6, r9
   15a1e:	46de      	mov	lr, fp
   15a20:	4645      	mov	r5, r8
   15a22:	b5e0      	push	{r5, r6, r7, lr}
   15a24:	0244      	lsls	r4, r0, #9
   15a26:	0043      	lsls	r3, r0, #1
   15a28:	0fc6      	lsrs	r6, r0, #31
   15a2a:	b083      	sub	sp, #12
   15a2c:	1c0f      	adds	r7, r1, #0
   15a2e:	0a64      	lsrs	r4, r4, #9
   15a30:	0e1b      	lsrs	r3, r3, #24
   15a32:	46b2      	mov	sl, r6
   15a34:	d053      	beq.n	15ade <__aeabi_fdiv+0xc6>
   15a36:	2bff      	cmp	r3, #255	; 0xff
   15a38:	d027      	beq.n	15a8a <__aeabi_fdiv+0x72>
   15a3a:	2280      	movs	r2, #128	; 0x80
   15a3c:	00e4      	lsls	r4, r4, #3
   15a3e:	04d2      	lsls	r2, r2, #19
   15a40:	4314      	orrs	r4, r2
   15a42:	227f      	movs	r2, #127	; 0x7f
   15a44:	4252      	negs	r2, r2
   15a46:	4690      	mov	r8, r2
   15a48:	4498      	add	r8, r3
   15a4a:	2300      	movs	r3, #0
   15a4c:	4699      	mov	r9, r3
   15a4e:	469b      	mov	fp, r3
   15a50:	027d      	lsls	r5, r7, #9
   15a52:	0078      	lsls	r0, r7, #1
   15a54:	0ffb      	lsrs	r3, r7, #31
   15a56:	0a6d      	lsrs	r5, r5, #9
   15a58:	0e00      	lsrs	r0, r0, #24
   15a5a:	9300      	str	r3, [sp, #0]
   15a5c:	d024      	beq.n	15aa8 <__aeabi_fdiv+0x90>
   15a5e:	28ff      	cmp	r0, #255	; 0xff
   15a60:	d046      	beq.n	15af0 <__aeabi_fdiv+0xd8>
   15a62:	2380      	movs	r3, #128	; 0x80
   15a64:	2100      	movs	r1, #0
   15a66:	00ed      	lsls	r5, r5, #3
   15a68:	04db      	lsls	r3, r3, #19
   15a6a:	431d      	orrs	r5, r3
   15a6c:	387f      	subs	r0, #127	; 0x7f
   15a6e:	4647      	mov	r7, r8
   15a70:	1a38      	subs	r0, r7, r0
   15a72:	464f      	mov	r7, r9
   15a74:	430f      	orrs	r7, r1
   15a76:	00bf      	lsls	r7, r7, #2
   15a78:	46b9      	mov	r9, r7
   15a7a:	0033      	movs	r3, r6
   15a7c:	9a00      	ldr	r2, [sp, #0]
   15a7e:	4f87      	ldr	r7, [pc, #540]	; (15c9c <__aeabi_fdiv+0x284>)
   15a80:	4053      	eors	r3, r2
   15a82:	464a      	mov	r2, r9
   15a84:	58ba      	ldr	r2, [r7, r2]
   15a86:	9301      	str	r3, [sp, #4]
   15a88:	4697      	mov	pc, r2
   15a8a:	2c00      	cmp	r4, #0
   15a8c:	d14e      	bne.n	15b2c <__aeabi_fdiv+0x114>
   15a8e:	2308      	movs	r3, #8
   15a90:	4699      	mov	r9, r3
   15a92:	33f7      	adds	r3, #247	; 0xf7
   15a94:	4698      	mov	r8, r3
   15a96:	3bfd      	subs	r3, #253	; 0xfd
   15a98:	469b      	mov	fp, r3
   15a9a:	027d      	lsls	r5, r7, #9
   15a9c:	0078      	lsls	r0, r7, #1
   15a9e:	0ffb      	lsrs	r3, r7, #31
   15aa0:	0a6d      	lsrs	r5, r5, #9
   15aa2:	0e00      	lsrs	r0, r0, #24
   15aa4:	9300      	str	r3, [sp, #0]
   15aa6:	d1da      	bne.n	15a5e <__aeabi_fdiv+0x46>
   15aa8:	2d00      	cmp	r5, #0
   15aaa:	d126      	bne.n	15afa <__aeabi_fdiv+0xe2>
   15aac:	2000      	movs	r0, #0
   15aae:	2101      	movs	r1, #1
   15ab0:	0033      	movs	r3, r6
   15ab2:	9a00      	ldr	r2, [sp, #0]
   15ab4:	4f7a      	ldr	r7, [pc, #488]	; (15ca0 <__aeabi_fdiv+0x288>)
   15ab6:	4053      	eors	r3, r2
   15ab8:	4642      	mov	r2, r8
   15aba:	1a10      	subs	r0, r2, r0
   15abc:	464a      	mov	r2, r9
   15abe:	430a      	orrs	r2, r1
   15ac0:	0092      	lsls	r2, r2, #2
   15ac2:	58ba      	ldr	r2, [r7, r2]
   15ac4:	001d      	movs	r5, r3
   15ac6:	4697      	mov	pc, r2
   15ac8:	9b00      	ldr	r3, [sp, #0]
   15aca:	002c      	movs	r4, r5
   15acc:	469a      	mov	sl, r3
   15ace:	468b      	mov	fp, r1
   15ad0:	465b      	mov	r3, fp
   15ad2:	2b02      	cmp	r3, #2
   15ad4:	d131      	bne.n	15b3a <__aeabi_fdiv+0x122>
   15ad6:	4653      	mov	r3, sl
   15ad8:	21ff      	movs	r1, #255	; 0xff
   15ada:	2400      	movs	r4, #0
   15adc:	e038      	b.n	15b50 <__aeabi_fdiv+0x138>
   15ade:	2c00      	cmp	r4, #0
   15ae0:	d117      	bne.n	15b12 <__aeabi_fdiv+0xfa>
   15ae2:	2304      	movs	r3, #4
   15ae4:	4699      	mov	r9, r3
   15ae6:	2300      	movs	r3, #0
   15ae8:	4698      	mov	r8, r3
   15aea:	3301      	adds	r3, #1
   15aec:	469b      	mov	fp, r3
   15aee:	e7af      	b.n	15a50 <__aeabi_fdiv+0x38>
   15af0:	20ff      	movs	r0, #255	; 0xff
   15af2:	2d00      	cmp	r5, #0
   15af4:	d10b      	bne.n	15b0e <__aeabi_fdiv+0xf6>
   15af6:	2102      	movs	r1, #2
   15af8:	e7da      	b.n	15ab0 <__aeabi_fdiv+0x98>
   15afa:	0028      	movs	r0, r5
   15afc:	f002 f834 	bl	17b68 <__clzsi2>
   15b00:	1f43      	subs	r3, r0, #5
   15b02:	409d      	lsls	r5, r3
   15b04:	2376      	movs	r3, #118	; 0x76
   15b06:	425b      	negs	r3, r3
   15b08:	1a18      	subs	r0, r3, r0
   15b0a:	2100      	movs	r1, #0
   15b0c:	e7af      	b.n	15a6e <__aeabi_fdiv+0x56>
   15b0e:	2103      	movs	r1, #3
   15b10:	e7ad      	b.n	15a6e <__aeabi_fdiv+0x56>
   15b12:	0020      	movs	r0, r4
   15b14:	f002 f828 	bl	17b68 <__clzsi2>
   15b18:	1f43      	subs	r3, r0, #5
   15b1a:	409c      	lsls	r4, r3
   15b1c:	2376      	movs	r3, #118	; 0x76
   15b1e:	425b      	negs	r3, r3
   15b20:	1a1b      	subs	r3, r3, r0
   15b22:	4698      	mov	r8, r3
   15b24:	2300      	movs	r3, #0
   15b26:	4699      	mov	r9, r3
   15b28:	469b      	mov	fp, r3
   15b2a:	e791      	b.n	15a50 <__aeabi_fdiv+0x38>
   15b2c:	230c      	movs	r3, #12
   15b2e:	4699      	mov	r9, r3
   15b30:	33f3      	adds	r3, #243	; 0xf3
   15b32:	4698      	mov	r8, r3
   15b34:	3bfc      	subs	r3, #252	; 0xfc
   15b36:	469b      	mov	fp, r3
   15b38:	e78a      	b.n	15a50 <__aeabi_fdiv+0x38>
   15b3a:	2b03      	cmp	r3, #3
   15b3c:	d100      	bne.n	15b40 <__aeabi_fdiv+0x128>
   15b3e:	e0a5      	b.n	15c8c <__aeabi_fdiv+0x274>
   15b40:	4655      	mov	r5, sl
   15b42:	2b01      	cmp	r3, #1
   15b44:	d000      	beq.n	15b48 <__aeabi_fdiv+0x130>
   15b46:	e081      	b.n	15c4c <__aeabi_fdiv+0x234>
   15b48:	2301      	movs	r3, #1
   15b4a:	2100      	movs	r1, #0
   15b4c:	2400      	movs	r4, #0
   15b4e:	402b      	ands	r3, r5
   15b50:	0264      	lsls	r4, r4, #9
   15b52:	05c9      	lsls	r1, r1, #23
   15b54:	0a60      	lsrs	r0, r4, #9
   15b56:	07db      	lsls	r3, r3, #31
   15b58:	4308      	orrs	r0, r1
   15b5a:	4318      	orrs	r0, r3
   15b5c:	b003      	add	sp, #12
   15b5e:	bc3c      	pop	{r2, r3, r4, r5}
   15b60:	4690      	mov	r8, r2
   15b62:	4699      	mov	r9, r3
   15b64:	46a2      	mov	sl, r4
   15b66:	46ab      	mov	fp, r5
   15b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b6a:	2480      	movs	r4, #128	; 0x80
   15b6c:	2300      	movs	r3, #0
   15b6e:	03e4      	lsls	r4, r4, #15
   15b70:	21ff      	movs	r1, #255	; 0xff
   15b72:	e7ed      	b.n	15b50 <__aeabi_fdiv+0x138>
   15b74:	21ff      	movs	r1, #255	; 0xff
   15b76:	2400      	movs	r4, #0
   15b78:	e7ea      	b.n	15b50 <__aeabi_fdiv+0x138>
   15b7a:	2301      	movs	r3, #1
   15b7c:	1a59      	subs	r1, r3, r1
   15b7e:	291b      	cmp	r1, #27
   15b80:	dd66      	ble.n	15c50 <__aeabi_fdiv+0x238>
   15b82:	9a01      	ldr	r2, [sp, #4]
   15b84:	4013      	ands	r3, r2
   15b86:	2100      	movs	r1, #0
   15b88:	2400      	movs	r4, #0
   15b8a:	e7e1      	b.n	15b50 <__aeabi_fdiv+0x138>
   15b8c:	2380      	movs	r3, #128	; 0x80
   15b8e:	03db      	lsls	r3, r3, #15
   15b90:	421c      	tst	r4, r3
   15b92:	d038      	beq.n	15c06 <__aeabi_fdiv+0x1ee>
   15b94:	421d      	tst	r5, r3
   15b96:	d051      	beq.n	15c3c <__aeabi_fdiv+0x224>
   15b98:	431c      	orrs	r4, r3
   15b9a:	0264      	lsls	r4, r4, #9
   15b9c:	0a64      	lsrs	r4, r4, #9
   15b9e:	0033      	movs	r3, r6
   15ba0:	21ff      	movs	r1, #255	; 0xff
   15ba2:	e7d5      	b.n	15b50 <__aeabi_fdiv+0x138>
   15ba4:	0163      	lsls	r3, r4, #5
   15ba6:	016c      	lsls	r4, r5, #5
   15ba8:	42a3      	cmp	r3, r4
   15baa:	d23b      	bcs.n	15c24 <__aeabi_fdiv+0x20c>
   15bac:	261b      	movs	r6, #27
   15bae:	2100      	movs	r1, #0
   15bb0:	3801      	subs	r0, #1
   15bb2:	2501      	movs	r5, #1
   15bb4:	001f      	movs	r7, r3
   15bb6:	0049      	lsls	r1, r1, #1
   15bb8:	005b      	lsls	r3, r3, #1
   15bba:	2f00      	cmp	r7, #0
   15bbc:	db01      	blt.n	15bc2 <__aeabi_fdiv+0x1aa>
   15bbe:	429c      	cmp	r4, r3
   15bc0:	d801      	bhi.n	15bc6 <__aeabi_fdiv+0x1ae>
   15bc2:	1b1b      	subs	r3, r3, r4
   15bc4:	4329      	orrs	r1, r5
   15bc6:	3e01      	subs	r6, #1
   15bc8:	2e00      	cmp	r6, #0
   15bca:	d1f3      	bne.n	15bb4 <__aeabi_fdiv+0x19c>
   15bcc:	001c      	movs	r4, r3
   15bce:	1e63      	subs	r3, r4, #1
   15bd0:	419c      	sbcs	r4, r3
   15bd2:	430c      	orrs	r4, r1
   15bd4:	0001      	movs	r1, r0
   15bd6:	317f      	adds	r1, #127	; 0x7f
   15bd8:	2900      	cmp	r1, #0
   15bda:	ddce      	ble.n	15b7a <__aeabi_fdiv+0x162>
   15bdc:	0763      	lsls	r3, r4, #29
   15bde:	d004      	beq.n	15bea <__aeabi_fdiv+0x1d2>
   15be0:	230f      	movs	r3, #15
   15be2:	4023      	ands	r3, r4
   15be4:	2b04      	cmp	r3, #4
   15be6:	d000      	beq.n	15bea <__aeabi_fdiv+0x1d2>
   15be8:	3404      	adds	r4, #4
   15bea:	0123      	lsls	r3, r4, #4
   15bec:	d503      	bpl.n	15bf6 <__aeabi_fdiv+0x1de>
   15bee:	0001      	movs	r1, r0
   15bf0:	4b2c      	ldr	r3, [pc, #176]	; (15ca4 <__aeabi_fdiv+0x28c>)
   15bf2:	3180      	adds	r1, #128	; 0x80
   15bf4:	401c      	ands	r4, r3
   15bf6:	29fe      	cmp	r1, #254	; 0xfe
   15bf8:	dd0d      	ble.n	15c16 <__aeabi_fdiv+0x1fe>
   15bfa:	2301      	movs	r3, #1
   15bfc:	9a01      	ldr	r2, [sp, #4]
   15bfe:	21ff      	movs	r1, #255	; 0xff
   15c00:	4013      	ands	r3, r2
   15c02:	2400      	movs	r4, #0
   15c04:	e7a4      	b.n	15b50 <__aeabi_fdiv+0x138>
   15c06:	2380      	movs	r3, #128	; 0x80
   15c08:	03db      	lsls	r3, r3, #15
   15c0a:	431c      	orrs	r4, r3
   15c0c:	0264      	lsls	r4, r4, #9
   15c0e:	0a64      	lsrs	r4, r4, #9
   15c10:	0033      	movs	r3, r6
   15c12:	21ff      	movs	r1, #255	; 0xff
   15c14:	e79c      	b.n	15b50 <__aeabi_fdiv+0x138>
   15c16:	2301      	movs	r3, #1
   15c18:	9a01      	ldr	r2, [sp, #4]
   15c1a:	01a4      	lsls	r4, r4, #6
   15c1c:	0a64      	lsrs	r4, r4, #9
   15c1e:	b2c9      	uxtb	r1, r1
   15c20:	4013      	ands	r3, r2
   15c22:	e795      	b.n	15b50 <__aeabi_fdiv+0x138>
   15c24:	1b1b      	subs	r3, r3, r4
   15c26:	261a      	movs	r6, #26
   15c28:	2101      	movs	r1, #1
   15c2a:	e7c2      	b.n	15bb2 <__aeabi_fdiv+0x19a>
   15c2c:	9b00      	ldr	r3, [sp, #0]
   15c2e:	468b      	mov	fp, r1
   15c30:	469a      	mov	sl, r3
   15c32:	2400      	movs	r4, #0
   15c34:	e74c      	b.n	15ad0 <__aeabi_fdiv+0xb8>
   15c36:	0263      	lsls	r3, r4, #9
   15c38:	d5e5      	bpl.n	15c06 <__aeabi_fdiv+0x1ee>
   15c3a:	2500      	movs	r5, #0
   15c3c:	2480      	movs	r4, #128	; 0x80
   15c3e:	03e4      	lsls	r4, r4, #15
   15c40:	432c      	orrs	r4, r5
   15c42:	0264      	lsls	r4, r4, #9
   15c44:	0a64      	lsrs	r4, r4, #9
   15c46:	9b00      	ldr	r3, [sp, #0]
   15c48:	21ff      	movs	r1, #255	; 0xff
   15c4a:	e781      	b.n	15b50 <__aeabi_fdiv+0x138>
   15c4c:	9501      	str	r5, [sp, #4]
   15c4e:	e7c1      	b.n	15bd4 <__aeabi_fdiv+0x1bc>
   15c50:	0023      	movs	r3, r4
   15c52:	2020      	movs	r0, #32
   15c54:	40cb      	lsrs	r3, r1
   15c56:	1a41      	subs	r1, r0, r1
   15c58:	408c      	lsls	r4, r1
   15c5a:	1e61      	subs	r1, r4, #1
   15c5c:	418c      	sbcs	r4, r1
   15c5e:	431c      	orrs	r4, r3
   15c60:	0763      	lsls	r3, r4, #29
   15c62:	d004      	beq.n	15c6e <__aeabi_fdiv+0x256>
   15c64:	230f      	movs	r3, #15
   15c66:	4023      	ands	r3, r4
   15c68:	2b04      	cmp	r3, #4
   15c6a:	d000      	beq.n	15c6e <__aeabi_fdiv+0x256>
   15c6c:	3404      	adds	r4, #4
   15c6e:	0163      	lsls	r3, r4, #5
   15c70:	d505      	bpl.n	15c7e <__aeabi_fdiv+0x266>
   15c72:	2301      	movs	r3, #1
   15c74:	9a01      	ldr	r2, [sp, #4]
   15c76:	2101      	movs	r1, #1
   15c78:	4013      	ands	r3, r2
   15c7a:	2400      	movs	r4, #0
   15c7c:	e768      	b.n	15b50 <__aeabi_fdiv+0x138>
   15c7e:	2301      	movs	r3, #1
   15c80:	9a01      	ldr	r2, [sp, #4]
   15c82:	01a4      	lsls	r4, r4, #6
   15c84:	0a64      	lsrs	r4, r4, #9
   15c86:	4013      	ands	r3, r2
   15c88:	2100      	movs	r1, #0
   15c8a:	e761      	b.n	15b50 <__aeabi_fdiv+0x138>
   15c8c:	2380      	movs	r3, #128	; 0x80
   15c8e:	03db      	lsls	r3, r3, #15
   15c90:	431c      	orrs	r4, r3
   15c92:	0264      	lsls	r4, r4, #9
   15c94:	0a64      	lsrs	r4, r4, #9
   15c96:	4653      	mov	r3, sl
   15c98:	21ff      	movs	r1, #255	; 0xff
   15c9a:	e759      	b.n	15b50 <__aeabi_fdiv+0x138>
   15c9c:	00019a80 	.word	0x00019a80
   15ca0:	00019ac0 	.word	0x00019ac0
   15ca4:	f7ffffff 	.word	0xf7ffffff

00015ca8 <__aeabi_fmul>:
   15ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15caa:	4657      	mov	r7, sl
   15cac:	464e      	mov	r6, r9
   15cae:	4645      	mov	r5, r8
   15cb0:	46de      	mov	lr, fp
   15cb2:	b5e0      	push	{r5, r6, r7, lr}
   15cb4:	0247      	lsls	r7, r0, #9
   15cb6:	0046      	lsls	r6, r0, #1
   15cb8:	4688      	mov	r8, r1
   15cba:	0a7f      	lsrs	r7, r7, #9
   15cbc:	0e36      	lsrs	r6, r6, #24
   15cbe:	0fc4      	lsrs	r4, r0, #31
   15cc0:	2e00      	cmp	r6, #0
   15cc2:	d047      	beq.n	15d54 <__aeabi_fmul+0xac>
   15cc4:	2eff      	cmp	r6, #255	; 0xff
   15cc6:	d024      	beq.n	15d12 <__aeabi_fmul+0x6a>
   15cc8:	00fb      	lsls	r3, r7, #3
   15cca:	2780      	movs	r7, #128	; 0x80
   15ccc:	04ff      	lsls	r7, r7, #19
   15cce:	431f      	orrs	r7, r3
   15cd0:	2300      	movs	r3, #0
   15cd2:	4699      	mov	r9, r3
   15cd4:	469a      	mov	sl, r3
   15cd6:	3e7f      	subs	r6, #127	; 0x7f
   15cd8:	4643      	mov	r3, r8
   15cda:	025d      	lsls	r5, r3, #9
   15cdc:	0058      	lsls	r0, r3, #1
   15cde:	0fdb      	lsrs	r3, r3, #31
   15ce0:	0a6d      	lsrs	r5, r5, #9
   15ce2:	0e00      	lsrs	r0, r0, #24
   15ce4:	4698      	mov	r8, r3
   15ce6:	d043      	beq.n	15d70 <__aeabi_fmul+0xc8>
   15ce8:	28ff      	cmp	r0, #255	; 0xff
   15cea:	d03b      	beq.n	15d64 <__aeabi_fmul+0xbc>
   15cec:	00eb      	lsls	r3, r5, #3
   15cee:	2580      	movs	r5, #128	; 0x80
   15cf0:	2200      	movs	r2, #0
   15cf2:	04ed      	lsls	r5, r5, #19
   15cf4:	431d      	orrs	r5, r3
   15cf6:	387f      	subs	r0, #127	; 0x7f
   15cf8:	1836      	adds	r6, r6, r0
   15cfa:	1c73      	adds	r3, r6, #1
   15cfc:	4641      	mov	r1, r8
   15cfe:	469b      	mov	fp, r3
   15d00:	464b      	mov	r3, r9
   15d02:	4061      	eors	r1, r4
   15d04:	4313      	orrs	r3, r2
   15d06:	2b0f      	cmp	r3, #15
   15d08:	d864      	bhi.n	15dd4 <__aeabi_fmul+0x12c>
   15d0a:	4875      	ldr	r0, [pc, #468]	; (15ee0 <__aeabi_fmul+0x238>)
   15d0c:	009b      	lsls	r3, r3, #2
   15d0e:	58c3      	ldr	r3, [r0, r3]
   15d10:	469f      	mov	pc, r3
   15d12:	2f00      	cmp	r7, #0
   15d14:	d142      	bne.n	15d9c <__aeabi_fmul+0xf4>
   15d16:	2308      	movs	r3, #8
   15d18:	4699      	mov	r9, r3
   15d1a:	3b06      	subs	r3, #6
   15d1c:	26ff      	movs	r6, #255	; 0xff
   15d1e:	469a      	mov	sl, r3
   15d20:	e7da      	b.n	15cd8 <__aeabi_fmul+0x30>
   15d22:	4641      	mov	r1, r8
   15d24:	2a02      	cmp	r2, #2
   15d26:	d028      	beq.n	15d7a <__aeabi_fmul+0xd2>
   15d28:	2a03      	cmp	r2, #3
   15d2a:	d100      	bne.n	15d2e <__aeabi_fmul+0x86>
   15d2c:	e0ce      	b.n	15ecc <__aeabi_fmul+0x224>
   15d2e:	2a01      	cmp	r2, #1
   15d30:	d000      	beq.n	15d34 <__aeabi_fmul+0x8c>
   15d32:	e0ac      	b.n	15e8e <__aeabi_fmul+0x1e6>
   15d34:	4011      	ands	r1, r2
   15d36:	2000      	movs	r0, #0
   15d38:	2200      	movs	r2, #0
   15d3a:	b2cc      	uxtb	r4, r1
   15d3c:	0240      	lsls	r0, r0, #9
   15d3e:	05d2      	lsls	r2, r2, #23
   15d40:	0a40      	lsrs	r0, r0, #9
   15d42:	07e4      	lsls	r4, r4, #31
   15d44:	4310      	orrs	r0, r2
   15d46:	4320      	orrs	r0, r4
   15d48:	bc3c      	pop	{r2, r3, r4, r5}
   15d4a:	4690      	mov	r8, r2
   15d4c:	4699      	mov	r9, r3
   15d4e:	46a2      	mov	sl, r4
   15d50:	46ab      	mov	fp, r5
   15d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d54:	2f00      	cmp	r7, #0
   15d56:	d115      	bne.n	15d84 <__aeabi_fmul+0xdc>
   15d58:	2304      	movs	r3, #4
   15d5a:	4699      	mov	r9, r3
   15d5c:	3b03      	subs	r3, #3
   15d5e:	2600      	movs	r6, #0
   15d60:	469a      	mov	sl, r3
   15d62:	e7b9      	b.n	15cd8 <__aeabi_fmul+0x30>
   15d64:	20ff      	movs	r0, #255	; 0xff
   15d66:	2202      	movs	r2, #2
   15d68:	2d00      	cmp	r5, #0
   15d6a:	d0c5      	beq.n	15cf8 <__aeabi_fmul+0x50>
   15d6c:	2203      	movs	r2, #3
   15d6e:	e7c3      	b.n	15cf8 <__aeabi_fmul+0x50>
   15d70:	2d00      	cmp	r5, #0
   15d72:	d119      	bne.n	15da8 <__aeabi_fmul+0x100>
   15d74:	2000      	movs	r0, #0
   15d76:	2201      	movs	r2, #1
   15d78:	e7be      	b.n	15cf8 <__aeabi_fmul+0x50>
   15d7a:	2401      	movs	r4, #1
   15d7c:	22ff      	movs	r2, #255	; 0xff
   15d7e:	400c      	ands	r4, r1
   15d80:	2000      	movs	r0, #0
   15d82:	e7db      	b.n	15d3c <__aeabi_fmul+0x94>
   15d84:	0038      	movs	r0, r7
   15d86:	f001 feef 	bl	17b68 <__clzsi2>
   15d8a:	2676      	movs	r6, #118	; 0x76
   15d8c:	1f43      	subs	r3, r0, #5
   15d8e:	409f      	lsls	r7, r3
   15d90:	2300      	movs	r3, #0
   15d92:	4276      	negs	r6, r6
   15d94:	1a36      	subs	r6, r6, r0
   15d96:	4699      	mov	r9, r3
   15d98:	469a      	mov	sl, r3
   15d9a:	e79d      	b.n	15cd8 <__aeabi_fmul+0x30>
   15d9c:	230c      	movs	r3, #12
   15d9e:	4699      	mov	r9, r3
   15da0:	3b09      	subs	r3, #9
   15da2:	26ff      	movs	r6, #255	; 0xff
   15da4:	469a      	mov	sl, r3
   15da6:	e797      	b.n	15cd8 <__aeabi_fmul+0x30>
   15da8:	0028      	movs	r0, r5
   15daa:	f001 fedd 	bl	17b68 <__clzsi2>
   15dae:	1f43      	subs	r3, r0, #5
   15db0:	409d      	lsls	r5, r3
   15db2:	2376      	movs	r3, #118	; 0x76
   15db4:	425b      	negs	r3, r3
   15db6:	1a18      	subs	r0, r3, r0
   15db8:	2200      	movs	r2, #0
   15dba:	e79d      	b.n	15cf8 <__aeabi_fmul+0x50>
   15dbc:	2080      	movs	r0, #128	; 0x80
   15dbe:	2400      	movs	r4, #0
   15dc0:	03c0      	lsls	r0, r0, #15
   15dc2:	22ff      	movs	r2, #255	; 0xff
   15dc4:	e7ba      	b.n	15d3c <__aeabi_fmul+0x94>
   15dc6:	003d      	movs	r5, r7
   15dc8:	4652      	mov	r2, sl
   15dca:	e7ab      	b.n	15d24 <__aeabi_fmul+0x7c>
   15dcc:	003d      	movs	r5, r7
   15dce:	0021      	movs	r1, r4
   15dd0:	4652      	mov	r2, sl
   15dd2:	e7a7      	b.n	15d24 <__aeabi_fmul+0x7c>
   15dd4:	0c3b      	lsrs	r3, r7, #16
   15dd6:	469c      	mov	ip, r3
   15dd8:	042a      	lsls	r2, r5, #16
   15dda:	0c12      	lsrs	r2, r2, #16
   15ddc:	0c2b      	lsrs	r3, r5, #16
   15dde:	0014      	movs	r4, r2
   15de0:	4660      	mov	r0, ip
   15de2:	4665      	mov	r5, ip
   15de4:	043f      	lsls	r7, r7, #16
   15de6:	0c3f      	lsrs	r7, r7, #16
   15de8:	437c      	muls	r4, r7
   15dea:	4342      	muls	r2, r0
   15dec:	435d      	muls	r5, r3
   15dee:	437b      	muls	r3, r7
   15df0:	0c27      	lsrs	r7, r4, #16
   15df2:	189b      	adds	r3, r3, r2
   15df4:	18ff      	adds	r7, r7, r3
   15df6:	42ba      	cmp	r2, r7
   15df8:	d903      	bls.n	15e02 <__aeabi_fmul+0x15a>
   15dfa:	2380      	movs	r3, #128	; 0x80
   15dfc:	025b      	lsls	r3, r3, #9
   15dfe:	469c      	mov	ip, r3
   15e00:	4465      	add	r5, ip
   15e02:	0424      	lsls	r4, r4, #16
   15e04:	043a      	lsls	r2, r7, #16
   15e06:	0c24      	lsrs	r4, r4, #16
   15e08:	1912      	adds	r2, r2, r4
   15e0a:	0193      	lsls	r3, r2, #6
   15e0c:	1e5c      	subs	r4, r3, #1
   15e0e:	41a3      	sbcs	r3, r4
   15e10:	0c3f      	lsrs	r7, r7, #16
   15e12:	0e92      	lsrs	r2, r2, #26
   15e14:	197d      	adds	r5, r7, r5
   15e16:	431a      	orrs	r2, r3
   15e18:	01ad      	lsls	r5, r5, #6
   15e1a:	4315      	orrs	r5, r2
   15e1c:	012b      	lsls	r3, r5, #4
   15e1e:	d504      	bpl.n	15e2a <__aeabi_fmul+0x182>
   15e20:	2301      	movs	r3, #1
   15e22:	465e      	mov	r6, fp
   15e24:	086a      	lsrs	r2, r5, #1
   15e26:	401d      	ands	r5, r3
   15e28:	4315      	orrs	r5, r2
   15e2a:	0032      	movs	r2, r6
   15e2c:	327f      	adds	r2, #127	; 0x7f
   15e2e:	2a00      	cmp	r2, #0
   15e30:	dd25      	ble.n	15e7e <__aeabi_fmul+0x1d6>
   15e32:	076b      	lsls	r3, r5, #29
   15e34:	d004      	beq.n	15e40 <__aeabi_fmul+0x198>
   15e36:	230f      	movs	r3, #15
   15e38:	402b      	ands	r3, r5
   15e3a:	2b04      	cmp	r3, #4
   15e3c:	d000      	beq.n	15e40 <__aeabi_fmul+0x198>
   15e3e:	3504      	adds	r5, #4
   15e40:	012b      	lsls	r3, r5, #4
   15e42:	d503      	bpl.n	15e4c <__aeabi_fmul+0x1a4>
   15e44:	0032      	movs	r2, r6
   15e46:	4b27      	ldr	r3, [pc, #156]	; (15ee4 <__aeabi_fmul+0x23c>)
   15e48:	3280      	adds	r2, #128	; 0x80
   15e4a:	401d      	ands	r5, r3
   15e4c:	2afe      	cmp	r2, #254	; 0xfe
   15e4e:	dc94      	bgt.n	15d7a <__aeabi_fmul+0xd2>
   15e50:	2401      	movs	r4, #1
   15e52:	01a8      	lsls	r0, r5, #6
   15e54:	0a40      	lsrs	r0, r0, #9
   15e56:	b2d2      	uxtb	r2, r2
   15e58:	400c      	ands	r4, r1
   15e5a:	e76f      	b.n	15d3c <__aeabi_fmul+0x94>
   15e5c:	2080      	movs	r0, #128	; 0x80
   15e5e:	03c0      	lsls	r0, r0, #15
   15e60:	4207      	tst	r7, r0
   15e62:	d007      	beq.n	15e74 <__aeabi_fmul+0x1cc>
   15e64:	4205      	tst	r5, r0
   15e66:	d105      	bne.n	15e74 <__aeabi_fmul+0x1cc>
   15e68:	4328      	orrs	r0, r5
   15e6a:	0240      	lsls	r0, r0, #9
   15e6c:	0a40      	lsrs	r0, r0, #9
   15e6e:	4644      	mov	r4, r8
   15e70:	22ff      	movs	r2, #255	; 0xff
   15e72:	e763      	b.n	15d3c <__aeabi_fmul+0x94>
   15e74:	4338      	orrs	r0, r7
   15e76:	0240      	lsls	r0, r0, #9
   15e78:	0a40      	lsrs	r0, r0, #9
   15e7a:	22ff      	movs	r2, #255	; 0xff
   15e7c:	e75e      	b.n	15d3c <__aeabi_fmul+0x94>
   15e7e:	2401      	movs	r4, #1
   15e80:	1aa3      	subs	r3, r4, r2
   15e82:	2b1b      	cmp	r3, #27
   15e84:	dd05      	ble.n	15e92 <__aeabi_fmul+0x1ea>
   15e86:	400c      	ands	r4, r1
   15e88:	2200      	movs	r2, #0
   15e8a:	2000      	movs	r0, #0
   15e8c:	e756      	b.n	15d3c <__aeabi_fmul+0x94>
   15e8e:	465e      	mov	r6, fp
   15e90:	e7cb      	b.n	15e2a <__aeabi_fmul+0x182>
   15e92:	002a      	movs	r2, r5
   15e94:	2020      	movs	r0, #32
   15e96:	40da      	lsrs	r2, r3
   15e98:	1ac3      	subs	r3, r0, r3
   15e9a:	409d      	lsls	r5, r3
   15e9c:	002b      	movs	r3, r5
   15e9e:	1e5d      	subs	r5, r3, #1
   15ea0:	41ab      	sbcs	r3, r5
   15ea2:	4313      	orrs	r3, r2
   15ea4:	075a      	lsls	r2, r3, #29
   15ea6:	d004      	beq.n	15eb2 <__aeabi_fmul+0x20a>
   15ea8:	220f      	movs	r2, #15
   15eaa:	401a      	ands	r2, r3
   15eac:	2a04      	cmp	r2, #4
   15eae:	d000      	beq.n	15eb2 <__aeabi_fmul+0x20a>
   15eb0:	3304      	adds	r3, #4
   15eb2:	015a      	lsls	r2, r3, #5
   15eb4:	d504      	bpl.n	15ec0 <__aeabi_fmul+0x218>
   15eb6:	2401      	movs	r4, #1
   15eb8:	2201      	movs	r2, #1
   15eba:	400c      	ands	r4, r1
   15ebc:	2000      	movs	r0, #0
   15ebe:	e73d      	b.n	15d3c <__aeabi_fmul+0x94>
   15ec0:	2401      	movs	r4, #1
   15ec2:	019b      	lsls	r3, r3, #6
   15ec4:	0a58      	lsrs	r0, r3, #9
   15ec6:	400c      	ands	r4, r1
   15ec8:	2200      	movs	r2, #0
   15eca:	e737      	b.n	15d3c <__aeabi_fmul+0x94>
   15ecc:	2080      	movs	r0, #128	; 0x80
   15ece:	2401      	movs	r4, #1
   15ed0:	03c0      	lsls	r0, r0, #15
   15ed2:	4328      	orrs	r0, r5
   15ed4:	0240      	lsls	r0, r0, #9
   15ed6:	0a40      	lsrs	r0, r0, #9
   15ed8:	400c      	ands	r4, r1
   15eda:	22ff      	movs	r2, #255	; 0xff
   15edc:	e72e      	b.n	15d3c <__aeabi_fmul+0x94>
   15ede:	46c0      	nop			; (mov r8, r8)
   15ee0:	00019b00 	.word	0x00019b00
   15ee4:	f7ffffff 	.word	0xf7ffffff

00015ee8 <__aeabi_ui2f>:
   15ee8:	b510      	push	{r4, lr}
   15eea:	1e04      	subs	r4, r0, #0
   15eec:	d027      	beq.n	15f3e <__aeabi_ui2f+0x56>
   15eee:	f001 fe3b 	bl	17b68 <__clzsi2>
   15ef2:	239e      	movs	r3, #158	; 0x9e
   15ef4:	1a1b      	subs	r3, r3, r0
   15ef6:	2b96      	cmp	r3, #150	; 0x96
   15ef8:	dc0a      	bgt.n	15f10 <__aeabi_ui2f+0x28>
   15efa:	2296      	movs	r2, #150	; 0x96
   15efc:	1ad2      	subs	r2, r2, r3
   15efe:	4094      	lsls	r4, r2
   15f00:	0264      	lsls	r4, r4, #9
   15f02:	0a64      	lsrs	r4, r4, #9
   15f04:	b2db      	uxtb	r3, r3
   15f06:	0264      	lsls	r4, r4, #9
   15f08:	05db      	lsls	r3, r3, #23
   15f0a:	0a60      	lsrs	r0, r4, #9
   15f0c:	4318      	orrs	r0, r3
   15f0e:	bd10      	pop	{r4, pc}
   15f10:	2b99      	cmp	r3, #153	; 0x99
   15f12:	dc17      	bgt.n	15f44 <__aeabi_ui2f+0x5c>
   15f14:	2299      	movs	r2, #153	; 0x99
   15f16:	1ad2      	subs	r2, r2, r3
   15f18:	2a00      	cmp	r2, #0
   15f1a:	dd27      	ble.n	15f6c <__aeabi_ui2f+0x84>
   15f1c:	4094      	lsls	r4, r2
   15f1e:	0022      	movs	r2, r4
   15f20:	4c13      	ldr	r4, [pc, #76]	; (15f70 <__aeabi_ui2f+0x88>)
   15f22:	4014      	ands	r4, r2
   15f24:	0751      	lsls	r1, r2, #29
   15f26:	d004      	beq.n	15f32 <__aeabi_ui2f+0x4a>
   15f28:	210f      	movs	r1, #15
   15f2a:	400a      	ands	r2, r1
   15f2c:	2a04      	cmp	r2, #4
   15f2e:	d000      	beq.n	15f32 <__aeabi_ui2f+0x4a>
   15f30:	3404      	adds	r4, #4
   15f32:	0162      	lsls	r2, r4, #5
   15f34:	d412      	bmi.n	15f5c <__aeabi_ui2f+0x74>
   15f36:	01a4      	lsls	r4, r4, #6
   15f38:	0a64      	lsrs	r4, r4, #9
   15f3a:	b2db      	uxtb	r3, r3
   15f3c:	e7e3      	b.n	15f06 <__aeabi_ui2f+0x1e>
   15f3e:	2300      	movs	r3, #0
   15f40:	2400      	movs	r4, #0
   15f42:	e7e0      	b.n	15f06 <__aeabi_ui2f+0x1e>
   15f44:	22b9      	movs	r2, #185	; 0xb9
   15f46:	0021      	movs	r1, r4
   15f48:	1ad2      	subs	r2, r2, r3
   15f4a:	4091      	lsls	r1, r2
   15f4c:	000a      	movs	r2, r1
   15f4e:	1e51      	subs	r1, r2, #1
   15f50:	418a      	sbcs	r2, r1
   15f52:	2105      	movs	r1, #5
   15f54:	1a09      	subs	r1, r1, r0
   15f56:	40cc      	lsrs	r4, r1
   15f58:	4314      	orrs	r4, r2
   15f5a:	e7db      	b.n	15f14 <__aeabi_ui2f+0x2c>
   15f5c:	4b04      	ldr	r3, [pc, #16]	; (15f70 <__aeabi_ui2f+0x88>)
   15f5e:	401c      	ands	r4, r3
   15f60:	239f      	movs	r3, #159	; 0x9f
   15f62:	01a4      	lsls	r4, r4, #6
   15f64:	1a1b      	subs	r3, r3, r0
   15f66:	0a64      	lsrs	r4, r4, #9
   15f68:	b2db      	uxtb	r3, r3
   15f6a:	e7cc      	b.n	15f06 <__aeabi_ui2f+0x1e>
   15f6c:	0022      	movs	r2, r4
   15f6e:	e7d7      	b.n	15f20 <__aeabi_ui2f+0x38>
   15f70:	fbffffff 	.word	0xfbffffff

00015f74 <__aeabi_dadd>:
   15f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f76:	4645      	mov	r5, r8
   15f78:	46de      	mov	lr, fp
   15f7a:	4657      	mov	r7, sl
   15f7c:	464e      	mov	r6, r9
   15f7e:	030c      	lsls	r4, r1, #12
   15f80:	b5e0      	push	{r5, r6, r7, lr}
   15f82:	004e      	lsls	r6, r1, #1
   15f84:	0fc9      	lsrs	r1, r1, #31
   15f86:	4688      	mov	r8, r1
   15f88:	000d      	movs	r5, r1
   15f8a:	0a61      	lsrs	r1, r4, #9
   15f8c:	0f44      	lsrs	r4, r0, #29
   15f8e:	430c      	orrs	r4, r1
   15f90:	00c7      	lsls	r7, r0, #3
   15f92:	0319      	lsls	r1, r3, #12
   15f94:	0058      	lsls	r0, r3, #1
   15f96:	0fdb      	lsrs	r3, r3, #31
   15f98:	469b      	mov	fp, r3
   15f9a:	0a4b      	lsrs	r3, r1, #9
   15f9c:	0f51      	lsrs	r1, r2, #29
   15f9e:	430b      	orrs	r3, r1
   15fa0:	0d76      	lsrs	r6, r6, #21
   15fa2:	0d40      	lsrs	r0, r0, #21
   15fa4:	0019      	movs	r1, r3
   15fa6:	00d2      	lsls	r2, r2, #3
   15fa8:	45d8      	cmp	r8, fp
   15faa:	d100      	bne.n	15fae <__aeabi_dadd+0x3a>
   15fac:	e0ae      	b.n	1610c <__aeabi_dadd+0x198>
   15fae:	1a35      	subs	r5, r6, r0
   15fb0:	2d00      	cmp	r5, #0
   15fb2:	dc00      	bgt.n	15fb6 <__aeabi_dadd+0x42>
   15fb4:	e0f6      	b.n	161a4 <__aeabi_dadd+0x230>
   15fb6:	2800      	cmp	r0, #0
   15fb8:	d10f      	bne.n	15fda <__aeabi_dadd+0x66>
   15fba:	4313      	orrs	r3, r2
   15fbc:	d100      	bne.n	15fc0 <__aeabi_dadd+0x4c>
   15fbe:	e0db      	b.n	16178 <__aeabi_dadd+0x204>
   15fc0:	1e6b      	subs	r3, r5, #1
   15fc2:	2b00      	cmp	r3, #0
   15fc4:	d000      	beq.n	15fc8 <__aeabi_dadd+0x54>
   15fc6:	e137      	b.n	16238 <__aeabi_dadd+0x2c4>
   15fc8:	1aba      	subs	r2, r7, r2
   15fca:	4297      	cmp	r7, r2
   15fcc:	41bf      	sbcs	r7, r7
   15fce:	1a64      	subs	r4, r4, r1
   15fd0:	427f      	negs	r7, r7
   15fd2:	1be4      	subs	r4, r4, r7
   15fd4:	2601      	movs	r6, #1
   15fd6:	0017      	movs	r7, r2
   15fd8:	e024      	b.n	16024 <__aeabi_dadd+0xb0>
   15fda:	4bc6      	ldr	r3, [pc, #792]	; (162f4 <__aeabi_dadd+0x380>)
   15fdc:	429e      	cmp	r6, r3
   15fde:	d04d      	beq.n	1607c <__aeabi_dadd+0x108>
   15fe0:	2380      	movs	r3, #128	; 0x80
   15fe2:	041b      	lsls	r3, r3, #16
   15fe4:	4319      	orrs	r1, r3
   15fe6:	2d38      	cmp	r5, #56	; 0x38
   15fe8:	dd00      	ble.n	15fec <__aeabi_dadd+0x78>
   15fea:	e107      	b.n	161fc <__aeabi_dadd+0x288>
   15fec:	2d1f      	cmp	r5, #31
   15fee:	dd00      	ble.n	15ff2 <__aeabi_dadd+0x7e>
   15ff0:	e138      	b.n	16264 <__aeabi_dadd+0x2f0>
   15ff2:	2020      	movs	r0, #32
   15ff4:	1b43      	subs	r3, r0, r5
   15ff6:	469a      	mov	sl, r3
   15ff8:	000b      	movs	r3, r1
   15ffa:	4650      	mov	r0, sl
   15ffc:	4083      	lsls	r3, r0
   15ffe:	4699      	mov	r9, r3
   16000:	0013      	movs	r3, r2
   16002:	4648      	mov	r0, r9
   16004:	40eb      	lsrs	r3, r5
   16006:	4318      	orrs	r0, r3
   16008:	0003      	movs	r3, r0
   1600a:	4650      	mov	r0, sl
   1600c:	4082      	lsls	r2, r0
   1600e:	1e50      	subs	r0, r2, #1
   16010:	4182      	sbcs	r2, r0
   16012:	40e9      	lsrs	r1, r5
   16014:	431a      	orrs	r2, r3
   16016:	1aba      	subs	r2, r7, r2
   16018:	1a61      	subs	r1, r4, r1
   1601a:	4297      	cmp	r7, r2
   1601c:	41a4      	sbcs	r4, r4
   1601e:	0017      	movs	r7, r2
   16020:	4264      	negs	r4, r4
   16022:	1b0c      	subs	r4, r1, r4
   16024:	0223      	lsls	r3, r4, #8
   16026:	d562      	bpl.n	160ee <__aeabi_dadd+0x17a>
   16028:	0264      	lsls	r4, r4, #9
   1602a:	0a65      	lsrs	r5, r4, #9
   1602c:	2d00      	cmp	r5, #0
   1602e:	d100      	bne.n	16032 <__aeabi_dadd+0xbe>
   16030:	e0df      	b.n	161f2 <__aeabi_dadd+0x27e>
   16032:	0028      	movs	r0, r5
   16034:	f001 fd98 	bl	17b68 <__clzsi2>
   16038:	0003      	movs	r3, r0
   1603a:	3b08      	subs	r3, #8
   1603c:	2b1f      	cmp	r3, #31
   1603e:	dd00      	ble.n	16042 <__aeabi_dadd+0xce>
   16040:	e0d2      	b.n	161e8 <__aeabi_dadd+0x274>
   16042:	2220      	movs	r2, #32
   16044:	003c      	movs	r4, r7
   16046:	1ad2      	subs	r2, r2, r3
   16048:	409d      	lsls	r5, r3
   1604a:	40d4      	lsrs	r4, r2
   1604c:	409f      	lsls	r7, r3
   1604e:	4325      	orrs	r5, r4
   16050:	429e      	cmp	r6, r3
   16052:	dd00      	ble.n	16056 <__aeabi_dadd+0xe2>
   16054:	e0c4      	b.n	161e0 <__aeabi_dadd+0x26c>
   16056:	1b9e      	subs	r6, r3, r6
   16058:	1c73      	adds	r3, r6, #1
   1605a:	2b1f      	cmp	r3, #31
   1605c:	dd00      	ble.n	16060 <__aeabi_dadd+0xec>
   1605e:	e0f1      	b.n	16244 <__aeabi_dadd+0x2d0>
   16060:	2220      	movs	r2, #32
   16062:	0038      	movs	r0, r7
   16064:	0029      	movs	r1, r5
   16066:	1ad2      	subs	r2, r2, r3
   16068:	40d8      	lsrs	r0, r3
   1606a:	4091      	lsls	r1, r2
   1606c:	4097      	lsls	r7, r2
   1606e:	002c      	movs	r4, r5
   16070:	4301      	orrs	r1, r0
   16072:	1e78      	subs	r0, r7, #1
   16074:	4187      	sbcs	r7, r0
   16076:	40dc      	lsrs	r4, r3
   16078:	2600      	movs	r6, #0
   1607a:	430f      	orrs	r7, r1
   1607c:	077b      	lsls	r3, r7, #29
   1607e:	d009      	beq.n	16094 <__aeabi_dadd+0x120>
   16080:	230f      	movs	r3, #15
   16082:	403b      	ands	r3, r7
   16084:	2b04      	cmp	r3, #4
   16086:	d005      	beq.n	16094 <__aeabi_dadd+0x120>
   16088:	1d3b      	adds	r3, r7, #4
   1608a:	42bb      	cmp	r3, r7
   1608c:	41bf      	sbcs	r7, r7
   1608e:	427f      	negs	r7, r7
   16090:	19e4      	adds	r4, r4, r7
   16092:	001f      	movs	r7, r3
   16094:	0223      	lsls	r3, r4, #8
   16096:	d52c      	bpl.n	160f2 <__aeabi_dadd+0x17e>
   16098:	4b96      	ldr	r3, [pc, #600]	; (162f4 <__aeabi_dadd+0x380>)
   1609a:	3601      	adds	r6, #1
   1609c:	429e      	cmp	r6, r3
   1609e:	d100      	bne.n	160a2 <__aeabi_dadd+0x12e>
   160a0:	e09a      	b.n	161d8 <__aeabi_dadd+0x264>
   160a2:	4645      	mov	r5, r8
   160a4:	4b94      	ldr	r3, [pc, #592]	; (162f8 <__aeabi_dadd+0x384>)
   160a6:	08ff      	lsrs	r7, r7, #3
   160a8:	401c      	ands	r4, r3
   160aa:	0760      	lsls	r0, r4, #29
   160ac:	0576      	lsls	r6, r6, #21
   160ae:	0264      	lsls	r4, r4, #9
   160b0:	4307      	orrs	r7, r0
   160b2:	0b24      	lsrs	r4, r4, #12
   160b4:	0d76      	lsrs	r6, r6, #21
   160b6:	2100      	movs	r1, #0
   160b8:	0324      	lsls	r4, r4, #12
   160ba:	0b23      	lsrs	r3, r4, #12
   160bc:	0d0c      	lsrs	r4, r1, #20
   160be:	4a8f      	ldr	r2, [pc, #572]	; (162fc <__aeabi_dadd+0x388>)
   160c0:	0524      	lsls	r4, r4, #20
   160c2:	431c      	orrs	r4, r3
   160c4:	4014      	ands	r4, r2
   160c6:	0533      	lsls	r3, r6, #20
   160c8:	4323      	orrs	r3, r4
   160ca:	005b      	lsls	r3, r3, #1
   160cc:	07ed      	lsls	r5, r5, #31
   160ce:	085b      	lsrs	r3, r3, #1
   160d0:	432b      	orrs	r3, r5
   160d2:	0038      	movs	r0, r7
   160d4:	0019      	movs	r1, r3
   160d6:	bc3c      	pop	{r2, r3, r4, r5}
   160d8:	4690      	mov	r8, r2
   160da:	4699      	mov	r9, r3
   160dc:	46a2      	mov	sl, r4
   160de:	46ab      	mov	fp, r5
   160e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160e2:	4664      	mov	r4, ip
   160e4:	4304      	orrs	r4, r0
   160e6:	d100      	bne.n	160ea <__aeabi_dadd+0x176>
   160e8:	e211      	b.n	1650e <__aeabi_dadd+0x59a>
   160ea:	0004      	movs	r4, r0
   160ec:	4667      	mov	r7, ip
   160ee:	077b      	lsls	r3, r7, #29
   160f0:	d1c6      	bne.n	16080 <__aeabi_dadd+0x10c>
   160f2:	4645      	mov	r5, r8
   160f4:	0760      	lsls	r0, r4, #29
   160f6:	08ff      	lsrs	r7, r7, #3
   160f8:	4307      	orrs	r7, r0
   160fa:	08e4      	lsrs	r4, r4, #3
   160fc:	4b7d      	ldr	r3, [pc, #500]	; (162f4 <__aeabi_dadd+0x380>)
   160fe:	429e      	cmp	r6, r3
   16100:	d030      	beq.n	16164 <__aeabi_dadd+0x1f0>
   16102:	0324      	lsls	r4, r4, #12
   16104:	0576      	lsls	r6, r6, #21
   16106:	0b24      	lsrs	r4, r4, #12
   16108:	0d76      	lsrs	r6, r6, #21
   1610a:	e7d4      	b.n	160b6 <__aeabi_dadd+0x142>
   1610c:	1a33      	subs	r3, r6, r0
   1610e:	469a      	mov	sl, r3
   16110:	2b00      	cmp	r3, #0
   16112:	dd78      	ble.n	16206 <__aeabi_dadd+0x292>
   16114:	2800      	cmp	r0, #0
   16116:	d031      	beq.n	1617c <__aeabi_dadd+0x208>
   16118:	4876      	ldr	r0, [pc, #472]	; (162f4 <__aeabi_dadd+0x380>)
   1611a:	4286      	cmp	r6, r0
   1611c:	d0ae      	beq.n	1607c <__aeabi_dadd+0x108>
   1611e:	2080      	movs	r0, #128	; 0x80
   16120:	0400      	lsls	r0, r0, #16
   16122:	4301      	orrs	r1, r0
   16124:	4653      	mov	r3, sl
   16126:	2b38      	cmp	r3, #56	; 0x38
   16128:	dc00      	bgt.n	1612c <__aeabi_dadd+0x1b8>
   1612a:	e0e9      	b.n	16300 <__aeabi_dadd+0x38c>
   1612c:	430a      	orrs	r2, r1
   1612e:	1e51      	subs	r1, r2, #1
   16130:	418a      	sbcs	r2, r1
   16132:	2100      	movs	r1, #0
   16134:	19d2      	adds	r2, r2, r7
   16136:	42ba      	cmp	r2, r7
   16138:	41bf      	sbcs	r7, r7
   1613a:	1909      	adds	r1, r1, r4
   1613c:	427c      	negs	r4, r7
   1613e:	0017      	movs	r7, r2
   16140:	190c      	adds	r4, r1, r4
   16142:	0223      	lsls	r3, r4, #8
   16144:	d5d3      	bpl.n	160ee <__aeabi_dadd+0x17a>
   16146:	4b6b      	ldr	r3, [pc, #428]	; (162f4 <__aeabi_dadd+0x380>)
   16148:	3601      	adds	r6, #1
   1614a:	429e      	cmp	r6, r3
   1614c:	d100      	bne.n	16150 <__aeabi_dadd+0x1dc>
   1614e:	e13a      	b.n	163c6 <__aeabi_dadd+0x452>
   16150:	2001      	movs	r0, #1
   16152:	4b69      	ldr	r3, [pc, #420]	; (162f8 <__aeabi_dadd+0x384>)
   16154:	401c      	ands	r4, r3
   16156:	087b      	lsrs	r3, r7, #1
   16158:	4007      	ands	r7, r0
   1615a:	431f      	orrs	r7, r3
   1615c:	07e0      	lsls	r0, r4, #31
   1615e:	4307      	orrs	r7, r0
   16160:	0864      	lsrs	r4, r4, #1
   16162:	e78b      	b.n	1607c <__aeabi_dadd+0x108>
   16164:	0023      	movs	r3, r4
   16166:	433b      	orrs	r3, r7
   16168:	d100      	bne.n	1616c <__aeabi_dadd+0x1f8>
   1616a:	e1cb      	b.n	16504 <__aeabi_dadd+0x590>
   1616c:	2280      	movs	r2, #128	; 0x80
   1616e:	0312      	lsls	r2, r2, #12
   16170:	4314      	orrs	r4, r2
   16172:	0324      	lsls	r4, r4, #12
   16174:	0b24      	lsrs	r4, r4, #12
   16176:	e79e      	b.n	160b6 <__aeabi_dadd+0x142>
   16178:	002e      	movs	r6, r5
   1617a:	e77f      	b.n	1607c <__aeabi_dadd+0x108>
   1617c:	0008      	movs	r0, r1
   1617e:	4310      	orrs	r0, r2
   16180:	d100      	bne.n	16184 <__aeabi_dadd+0x210>
   16182:	e0b4      	b.n	162ee <__aeabi_dadd+0x37a>
   16184:	1e58      	subs	r0, r3, #1
   16186:	2800      	cmp	r0, #0
   16188:	d000      	beq.n	1618c <__aeabi_dadd+0x218>
   1618a:	e0de      	b.n	1634a <__aeabi_dadd+0x3d6>
   1618c:	18ba      	adds	r2, r7, r2
   1618e:	42ba      	cmp	r2, r7
   16190:	419b      	sbcs	r3, r3
   16192:	1864      	adds	r4, r4, r1
   16194:	425b      	negs	r3, r3
   16196:	18e4      	adds	r4, r4, r3
   16198:	0017      	movs	r7, r2
   1619a:	2601      	movs	r6, #1
   1619c:	0223      	lsls	r3, r4, #8
   1619e:	d5a6      	bpl.n	160ee <__aeabi_dadd+0x17a>
   161a0:	2602      	movs	r6, #2
   161a2:	e7d5      	b.n	16150 <__aeabi_dadd+0x1dc>
   161a4:	2d00      	cmp	r5, #0
   161a6:	d16e      	bne.n	16286 <__aeabi_dadd+0x312>
   161a8:	1c70      	adds	r0, r6, #1
   161aa:	0540      	lsls	r0, r0, #21
   161ac:	0d40      	lsrs	r0, r0, #21
   161ae:	2801      	cmp	r0, #1
   161b0:	dc00      	bgt.n	161b4 <__aeabi_dadd+0x240>
   161b2:	e0f9      	b.n	163a8 <__aeabi_dadd+0x434>
   161b4:	1ab8      	subs	r0, r7, r2
   161b6:	4684      	mov	ip, r0
   161b8:	4287      	cmp	r7, r0
   161ba:	4180      	sbcs	r0, r0
   161bc:	1ae5      	subs	r5, r4, r3
   161be:	4240      	negs	r0, r0
   161c0:	1a2d      	subs	r5, r5, r0
   161c2:	0228      	lsls	r0, r5, #8
   161c4:	d400      	bmi.n	161c8 <__aeabi_dadd+0x254>
   161c6:	e089      	b.n	162dc <__aeabi_dadd+0x368>
   161c8:	1bd7      	subs	r7, r2, r7
   161ca:	42ba      	cmp	r2, r7
   161cc:	4192      	sbcs	r2, r2
   161ce:	1b1c      	subs	r4, r3, r4
   161d0:	4252      	negs	r2, r2
   161d2:	1aa5      	subs	r5, r4, r2
   161d4:	46d8      	mov	r8, fp
   161d6:	e729      	b.n	1602c <__aeabi_dadd+0xb8>
   161d8:	4645      	mov	r5, r8
   161da:	2400      	movs	r4, #0
   161dc:	2700      	movs	r7, #0
   161de:	e76a      	b.n	160b6 <__aeabi_dadd+0x142>
   161e0:	4c45      	ldr	r4, [pc, #276]	; (162f8 <__aeabi_dadd+0x384>)
   161e2:	1af6      	subs	r6, r6, r3
   161e4:	402c      	ands	r4, r5
   161e6:	e749      	b.n	1607c <__aeabi_dadd+0x108>
   161e8:	003d      	movs	r5, r7
   161ea:	3828      	subs	r0, #40	; 0x28
   161ec:	4085      	lsls	r5, r0
   161ee:	2700      	movs	r7, #0
   161f0:	e72e      	b.n	16050 <__aeabi_dadd+0xdc>
   161f2:	0038      	movs	r0, r7
   161f4:	f001 fcb8 	bl	17b68 <__clzsi2>
   161f8:	3020      	adds	r0, #32
   161fa:	e71d      	b.n	16038 <__aeabi_dadd+0xc4>
   161fc:	430a      	orrs	r2, r1
   161fe:	1e51      	subs	r1, r2, #1
   16200:	418a      	sbcs	r2, r1
   16202:	2100      	movs	r1, #0
   16204:	e707      	b.n	16016 <__aeabi_dadd+0xa2>
   16206:	2b00      	cmp	r3, #0
   16208:	d000      	beq.n	1620c <__aeabi_dadd+0x298>
   1620a:	e0f3      	b.n	163f4 <__aeabi_dadd+0x480>
   1620c:	1c70      	adds	r0, r6, #1
   1620e:	0543      	lsls	r3, r0, #21
   16210:	0d5b      	lsrs	r3, r3, #21
   16212:	2b01      	cmp	r3, #1
   16214:	dc00      	bgt.n	16218 <__aeabi_dadd+0x2a4>
   16216:	e0ad      	b.n	16374 <__aeabi_dadd+0x400>
   16218:	4b36      	ldr	r3, [pc, #216]	; (162f4 <__aeabi_dadd+0x380>)
   1621a:	4298      	cmp	r0, r3
   1621c:	d100      	bne.n	16220 <__aeabi_dadd+0x2ac>
   1621e:	e0d1      	b.n	163c4 <__aeabi_dadd+0x450>
   16220:	18ba      	adds	r2, r7, r2
   16222:	42ba      	cmp	r2, r7
   16224:	41bf      	sbcs	r7, r7
   16226:	1864      	adds	r4, r4, r1
   16228:	427f      	negs	r7, r7
   1622a:	19e4      	adds	r4, r4, r7
   1622c:	07e7      	lsls	r7, r4, #31
   1622e:	0852      	lsrs	r2, r2, #1
   16230:	4317      	orrs	r7, r2
   16232:	0864      	lsrs	r4, r4, #1
   16234:	0006      	movs	r6, r0
   16236:	e721      	b.n	1607c <__aeabi_dadd+0x108>
   16238:	482e      	ldr	r0, [pc, #184]	; (162f4 <__aeabi_dadd+0x380>)
   1623a:	4285      	cmp	r5, r0
   1623c:	d100      	bne.n	16240 <__aeabi_dadd+0x2cc>
   1623e:	e093      	b.n	16368 <__aeabi_dadd+0x3f4>
   16240:	001d      	movs	r5, r3
   16242:	e6d0      	b.n	15fe6 <__aeabi_dadd+0x72>
   16244:	0029      	movs	r1, r5
   16246:	3e1f      	subs	r6, #31
   16248:	40f1      	lsrs	r1, r6
   1624a:	2b20      	cmp	r3, #32
   1624c:	d100      	bne.n	16250 <__aeabi_dadd+0x2dc>
   1624e:	e08d      	b.n	1636c <__aeabi_dadd+0x3f8>
   16250:	2240      	movs	r2, #64	; 0x40
   16252:	1ad3      	subs	r3, r2, r3
   16254:	409d      	lsls	r5, r3
   16256:	432f      	orrs	r7, r5
   16258:	1e7d      	subs	r5, r7, #1
   1625a:	41af      	sbcs	r7, r5
   1625c:	2400      	movs	r4, #0
   1625e:	430f      	orrs	r7, r1
   16260:	2600      	movs	r6, #0
   16262:	e744      	b.n	160ee <__aeabi_dadd+0x17a>
   16264:	002b      	movs	r3, r5
   16266:	0008      	movs	r0, r1
   16268:	3b20      	subs	r3, #32
   1626a:	40d8      	lsrs	r0, r3
   1626c:	0003      	movs	r3, r0
   1626e:	2d20      	cmp	r5, #32
   16270:	d100      	bne.n	16274 <__aeabi_dadd+0x300>
   16272:	e07d      	b.n	16370 <__aeabi_dadd+0x3fc>
   16274:	2040      	movs	r0, #64	; 0x40
   16276:	1b45      	subs	r5, r0, r5
   16278:	40a9      	lsls	r1, r5
   1627a:	430a      	orrs	r2, r1
   1627c:	1e51      	subs	r1, r2, #1
   1627e:	418a      	sbcs	r2, r1
   16280:	2100      	movs	r1, #0
   16282:	431a      	orrs	r2, r3
   16284:	e6c7      	b.n	16016 <__aeabi_dadd+0xa2>
   16286:	2e00      	cmp	r6, #0
   16288:	d050      	beq.n	1632c <__aeabi_dadd+0x3b8>
   1628a:	4e1a      	ldr	r6, [pc, #104]	; (162f4 <__aeabi_dadd+0x380>)
   1628c:	42b0      	cmp	r0, r6
   1628e:	d057      	beq.n	16340 <__aeabi_dadd+0x3cc>
   16290:	2680      	movs	r6, #128	; 0x80
   16292:	426b      	negs	r3, r5
   16294:	4699      	mov	r9, r3
   16296:	0436      	lsls	r6, r6, #16
   16298:	4334      	orrs	r4, r6
   1629a:	464b      	mov	r3, r9
   1629c:	2b38      	cmp	r3, #56	; 0x38
   1629e:	dd00      	ble.n	162a2 <__aeabi_dadd+0x32e>
   162a0:	e0d6      	b.n	16450 <__aeabi_dadd+0x4dc>
   162a2:	2b1f      	cmp	r3, #31
   162a4:	dd00      	ble.n	162a8 <__aeabi_dadd+0x334>
   162a6:	e135      	b.n	16514 <__aeabi_dadd+0x5a0>
   162a8:	2620      	movs	r6, #32
   162aa:	1af5      	subs	r5, r6, r3
   162ac:	0026      	movs	r6, r4
   162ae:	40ae      	lsls	r6, r5
   162b0:	46b2      	mov	sl, r6
   162b2:	003e      	movs	r6, r7
   162b4:	40de      	lsrs	r6, r3
   162b6:	46ac      	mov	ip, r5
   162b8:	0035      	movs	r5, r6
   162ba:	4656      	mov	r6, sl
   162bc:	432e      	orrs	r6, r5
   162be:	4665      	mov	r5, ip
   162c0:	40af      	lsls	r7, r5
   162c2:	1e7d      	subs	r5, r7, #1
   162c4:	41af      	sbcs	r7, r5
   162c6:	40dc      	lsrs	r4, r3
   162c8:	4337      	orrs	r7, r6
   162ca:	1bd7      	subs	r7, r2, r7
   162cc:	42ba      	cmp	r2, r7
   162ce:	4192      	sbcs	r2, r2
   162d0:	1b0c      	subs	r4, r1, r4
   162d2:	4252      	negs	r2, r2
   162d4:	1aa4      	subs	r4, r4, r2
   162d6:	0006      	movs	r6, r0
   162d8:	46d8      	mov	r8, fp
   162da:	e6a3      	b.n	16024 <__aeabi_dadd+0xb0>
   162dc:	4664      	mov	r4, ip
   162de:	4667      	mov	r7, ip
   162e0:	432c      	orrs	r4, r5
   162e2:	d000      	beq.n	162e6 <__aeabi_dadd+0x372>
   162e4:	e6a2      	b.n	1602c <__aeabi_dadd+0xb8>
   162e6:	2500      	movs	r5, #0
   162e8:	2600      	movs	r6, #0
   162ea:	2700      	movs	r7, #0
   162ec:	e706      	b.n	160fc <__aeabi_dadd+0x188>
   162ee:	001e      	movs	r6, r3
   162f0:	e6c4      	b.n	1607c <__aeabi_dadd+0x108>
   162f2:	46c0      	nop			; (mov r8, r8)
   162f4:	000007ff 	.word	0x000007ff
   162f8:	ff7fffff 	.word	0xff7fffff
   162fc:	800fffff 	.word	0x800fffff
   16300:	2b1f      	cmp	r3, #31
   16302:	dc63      	bgt.n	163cc <__aeabi_dadd+0x458>
   16304:	2020      	movs	r0, #32
   16306:	1ac3      	subs	r3, r0, r3
   16308:	0008      	movs	r0, r1
   1630a:	4098      	lsls	r0, r3
   1630c:	469c      	mov	ip, r3
   1630e:	4683      	mov	fp, r0
   16310:	4653      	mov	r3, sl
   16312:	0010      	movs	r0, r2
   16314:	40d8      	lsrs	r0, r3
   16316:	0003      	movs	r3, r0
   16318:	4658      	mov	r0, fp
   1631a:	4318      	orrs	r0, r3
   1631c:	4663      	mov	r3, ip
   1631e:	409a      	lsls	r2, r3
   16320:	1e53      	subs	r3, r2, #1
   16322:	419a      	sbcs	r2, r3
   16324:	4653      	mov	r3, sl
   16326:	4302      	orrs	r2, r0
   16328:	40d9      	lsrs	r1, r3
   1632a:	e703      	b.n	16134 <__aeabi_dadd+0x1c0>
   1632c:	0026      	movs	r6, r4
   1632e:	433e      	orrs	r6, r7
   16330:	d006      	beq.n	16340 <__aeabi_dadd+0x3cc>
   16332:	43eb      	mvns	r3, r5
   16334:	4699      	mov	r9, r3
   16336:	2b00      	cmp	r3, #0
   16338:	d0c7      	beq.n	162ca <__aeabi_dadd+0x356>
   1633a:	4e94      	ldr	r6, [pc, #592]	; (1658c <__aeabi_dadd+0x618>)
   1633c:	42b0      	cmp	r0, r6
   1633e:	d1ac      	bne.n	1629a <__aeabi_dadd+0x326>
   16340:	000c      	movs	r4, r1
   16342:	0017      	movs	r7, r2
   16344:	0006      	movs	r6, r0
   16346:	46d8      	mov	r8, fp
   16348:	e698      	b.n	1607c <__aeabi_dadd+0x108>
   1634a:	4b90      	ldr	r3, [pc, #576]	; (1658c <__aeabi_dadd+0x618>)
   1634c:	459a      	cmp	sl, r3
   1634e:	d00b      	beq.n	16368 <__aeabi_dadd+0x3f4>
   16350:	4682      	mov	sl, r0
   16352:	e6e7      	b.n	16124 <__aeabi_dadd+0x1b0>
   16354:	2800      	cmp	r0, #0
   16356:	d000      	beq.n	1635a <__aeabi_dadd+0x3e6>
   16358:	e09e      	b.n	16498 <__aeabi_dadd+0x524>
   1635a:	0018      	movs	r0, r3
   1635c:	4310      	orrs	r0, r2
   1635e:	d100      	bne.n	16362 <__aeabi_dadd+0x3ee>
   16360:	e0e9      	b.n	16536 <__aeabi_dadd+0x5c2>
   16362:	001c      	movs	r4, r3
   16364:	0017      	movs	r7, r2
   16366:	46d8      	mov	r8, fp
   16368:	4e88      	ldr	r6, [pc, #544]	; (1658c <__aeabi_dadd+0x618>)
   1636a:	e687      	b.n	1607c <__aeabi_dadd+0x108>
   1636c:	2500      	movs	r5, #0
   1636e:	e772      	b.n	16256 <__aeabi_dadd+0x2e2>
   16370:	2100      	movs	r1, #0
   16372:	e782      	b.n	1627a <__aeabi_dadd+0x306>
   16374:	0023      	movs	r3, r4
   16376:	433b      	orrs	r3, r7
   16378:	2e00      	cmp	r6, #0
   1637a:	d000      	beq.n	1637e <__aeabi_dadd+0x40a>
   1637c:	e0ab      	b.n	164d6 <__aeabi_dadd+0x562>
   1637e:	2b00      	cmp	r3, #0
   16380:	d100      	bne.n	16384 <__aeabi_dadd+0x410>
   16382:	e0e7      	b.n	16554 <__aeabi_dadd+0x5e0>
   16384:	000b      	movs	r3, r1
   16386:	4313      	orrs	r3, r2
   16388:	d100      	bne.n	1638c <__aeabi_dadd+0x418>
   1638a:	e677      	b.n	1607c <__aeabi_dadd+0x108>
   1638c:	18ba      	adds	r2, r7, r2
   1638e:	42ba      	cmp	r2, r7
   16390:	41bf      	sbcs	r7, r7
   16392:	1864      	adds	r4, r4, r1
   16394:	427f      	negs	r7, r7
   16396:	19e4      	adds	r4, r4, r7
   16398:	0223      	lsls	r3, r4, #8
   1639a:	d400      	bmi.n	1639e <__aeabi_dadd+0x42a>
   1639c:	e0f2      	b.n	16584 <__aeabi_dadd+0x610>
   1639e:	4b7c      	ldr	r3, [pc, #496]	; (16590 <__aeabi_dadd+0x61c>)
   163a0:	0017      	movs	r7, r2
   163a2:	401c      	ands	r4, r3
   163a4:	0006      	movs	r6, r0
   163a6:	e669      	b.n	1607c <__aeabi_dadd+0x108>
   163a8:	0020      	movs	r0, r4
   163aa:	4338      	orrs	r0, r7
   163ac:	2e00      	cmp	r6, #0
   163ae:	d1d1      	bne.n	16354 <__aeabi_dadd+0x3e0>
   163b0:	2800      	cmp	r0, #0
   163b2:	d15b      	bne.n	1646c <__aeabi_dadd+0x4f8>
   163b4:	001c      	movs	r4, r3
   163b6:	4314      	orrs	r4, r2
   163b8:	d100      	bne.n	163bc <__aeabi_dadd+0x448>
   163ba:	e0a8      	b.n	1650e <__aeabi_dadd+0x59a>
   163bc:	001c      	movs	r4, r3
   163be:	0017      	movs	r7, r2
   163c0:	46d8      	mov	r8, fp
   163c2:	e65b      	b.n	1607c <__aeabi_dadd+0x108>
   163c4:	0006      	movs	r6, r0
   163c6:	2400      	movs	r4, #0
   163c8:	2700      	movs	r7, #0
   163ca:	e697      	b.n	160fc <__aeabi_dadd+0x188>
   163cc:	4650      	mov	r0, sl
   163ce:	000b      	movs	r3, r1
   163d0:	3820      	subs	r0, #32
   163d2:	40c3      	lsrs	r3, r0
   163d4:	4699      	mov	r9, r3
   163d6:	4653      	mov	r3, sl
   163d8:	2b20      	cmp	r3, #32
   163da:	d100      	bne.n	163de <__aeabi_dadd+0x46a>
   163dc:	e095      	b.n	1650a <__aeabi_dadd+0x596>
   163de:	2340      	movs	r3, #64	; 0x40
   163e0:	4650      	mov	r0, sl
   163e2:	1a1b      	subs	r3, r3, r0
   163e4:	4099      	lsls	r1, r3
   163e6:	430a      	orrs	r2, r1
   163e8:	1e51      	subs	r1, r2, #1
   163ea:	418a      	sbcs	r2, r1
   163ec:	464b      	mov	r3, r9
   163ee:	2100      	movs	r1, #0
   163f0:	431a      	orrs	r2, r3
   163f2:	e69f      	b.n	16134 <__aeabi_dadd+0x1c0>
   163f4:	2e00      	cmp	r6, #0
   163f6:	d130      	bne.n	1645a <__aeabi_dadd+0x4e6>
   163f8:	0026      	movs	r6, r4
   163fa:	433e      	orrs	r6, r7
   163fc:	d067      	beq.n	164ce <__aeabi_dadd+0x55a>
   163fe:	43db      	mvns	r3, r3
   16400:	469a      	mov	sl, r3
   16402:	2b00      	cmp	r3, #0
   16404:	d01c      	beq.n	16440 <__aeabi_dadd+0x4cc>
   16406:	4e61      	ldr	r6, [pc, #388]	; (1658c <__aeabi_dadd+0x618>)
   16408:	42b0      	cmp	r0, r6
   1640a:	d060      	beq.n	164ce <__aeabi_dadd+0x55a>
   1640c:	4653      	mov	r3, sl
   1640e:	2b38      	cmp	r3, #56	; 0x38
   16410:	dd00      	ble.n	16414 <__aeabi_dadd+0x4a0>
   16412:	e096      	b.n	16542 <__aeabi_dadd+0x5ce>
   16414:	2b1f      	cmp	r3, #31
   16416:	dd00      	ble.n	1641a <__aeabi_dadd+0x4a6>
   16418:	e09f      	b.n	1655a <__aeabi_dadd+0x5e6>
   1641a:	2620      	movs	r6, #32
   1641c:	1af3      	subs	r3, r6, r3
   1641e:	0026      	movs	r6, r4
   16420:	409e      	lsls	r6, r3
   16422:	469c      	mov	ip, r3
   16424:	46b3      	mov	fp, r6
   16426:	4653      	mov	r3, sl
   16428:	003e      	movs	r6, r7
   1642a:	40de      	lsrs	r6, r3
   1642c:	0033      	movs	r3, r6
   1642e:	465e      	mov	r6, fp
   16430:	431e      	orrs	r6, r3
   16432:	4663      	mov	r3, ip
   16434:	409f      	lsls	r7, r3
   16436:	1e7b      	subs	r3, r7, #1
   16438:	419f      	sbcs	r7, r3
   1643a:	4653      	mov	r3, sl
   1643c:	40dc      	lsrs	r4, r3
   1643e:	4337      	orrs	r7, r6
   16440:	18bf      	adds	r7, r7, r2
   16442:	4297      	cmp	r7, r2
   16444:	4192      	sbcs	r2, r2
   16446:	1864      	adds	r4, r4, r1
   16448:	4252      	negs	r2, r2
   1644a:	18a4      	adds	r4, r4, r2
   1644c:	0006      	movs	r6, r0
   1644e:	e678      	b.n	16142 <__aeabi_dadd+0x1ce>
   16450:	4327      	orrs	r7, r4
   16452:	1e7c      	subs	r4, r7, #1
   16454:	41a7      	sbcs	r7, r4
   16456:	2400      	movs	r4, #0
   16458:	e737      	b.n	162ca <__aeabi_dadd+0x356>
   1645a:	4e4c      	ldr	r6, [pc, #304]	; (1658c <__aeabi_dadd+0x618>)
   1645c:	42b0      	cmp	r0, r6
   1645e:	d036      	beq.n	164ce <__aeabi_dadd+0x55a>
   16460:	2680      	movs	r6, #128	; 0x80
   16462:	425b      	negs	r3, r3
   16464:	0436      	lsls	r6, r6, #16
   16466:	469a      	mov	sl, r3
   16468:	4334      	orrs	r4, r6
   1646a:	e7cf      	b.n	1640c <__aeabi_dadd+0x498>
   1646c:	0018      	movs	r0, r3
   1646e:	4310      	orrs	r0, r2
   16470:	d100      	bne.n	16474 <__aeabi_dadd+0x500>
   16472:	e603      	b.n	1607c <__aeabi_dadd+0x108>
   16474:	1ab8      	subs	r0, r7, r2
   16476:	4684      	mov	ip, r0
   16478:	4567      	cmp	r7, ip
   1647a:	41ad      	sbcs	r5, r5
   1647c:	1ae0      	subs	r0, r4, r3
   1647e:	426d      	negs	r5, r5
   16480:	1b40      	subs	r0, r0, r5
   16482:	0205      	lsls	r5, r0, #8
   16484:	d400      	bmi.n	16488 <__aeabi_dadd+0x514>
   16486:	e62c      	b.n	160e2 <__aeabi_dadd+0x16e>
   16488:	1bd7      	subs	r7, r2, r7
   1648a:	42ba      	cmp	r2, r7
   1648c:	4192      	sbcs	r2, r2
   1648e:	1b1c      	subs	r4, r3, r4
   16490:	4252      	negs	r2, r2
   16492:	1aa4      	subs	r4, r4, r2
   16494:	46d8      	mov	r8, fp
   16496:	e5f1      	b.n	1607c <__aeabi_dadd+0x108>
   16498:	0018      	movs	r0, r3
   1649a:	4310      	orrs	r0, r2
   1649c:	d100      	bne.n	164a0 <__aeabi_dadd+0x52c>
   1649e:	e763      	b.n	16368 <__aeabi_dadd+0x3f4>
   164a0:	08f8      	lsrs	r0, r7, #3
   164a2:	0767      	lsls	r7, r4, #29
   164a4:	4307      	orrs	r7, r0
   164a6:	2080      	movs	r0, #128	; 0x80
   164a8:	08e4      	lsrs	r4, r4, #3
   164aa:	0300      	lsls	r0, r0, #12
   164ac:	4204      	tst	r4, r0
   164ae:	d008      	beq.n	164c2 <__aeabi_dadd+0x54e>
   164b0:	08dd      	lsrs	r5, r3, #3
   164b2:	4205      	tst	r5, r0
   164b4:	d105      	bne.n	164c2 <__aeabi_dadd+0x54e>
   164b6:	08d2      	lsrs	r2, r2, #3
   164b8:	0759      	lsls	r1, r3, #29
   164ba:	4311      	orrs	r1, r2
   164bc:	000f      	movs	r7, r1
   164be:	002c      	movs	r4, r5
   164c0:	46d8      	mov	r8, fp
   164c2:	0f7b      	lsrs	r3, r7, #29
   164c4:	00e4      	lsls	r4, r4, #3
   164c6:	431c      	orrs	r4, r3
   164c8:	00ff      	lsls	r7, r7, #3
   164ca:	4e30      	ldr	r6, [pc, #192]	; (1658c <__aeabi_dadd+0x618>)
   164cc:	e5d6      	b.n	1607c <__aeabi_dadd+0x108>
   164ce:	000c      	movs	r4, r1
   164d0:	0017      	movs	r7, r2
   164d2:	0006      	movs	r6, r0
   164d4:	e5d2      	b.n	1607c <__aeabi_dadd+0x108>
   164d6:	2b00      	cmp	r3, #0
   164d8:	d038      	beq.n	1654c <__aeabi_dadd+0x5d8>
   164da:	000b      	movs	r3, r1
   164dc:	4313      	orrs	r3, r2
   164de:	d100      	bne.n	164e2 <__aeabi_dadd+0x56e>
   164e0:	e742      	b.n	16368 <__aeabi_dadd+0x3f4>
   164e2:	08f8      	lsrs	r0, r7, #3
   164e4:	0767      	lsls	r7, r4, #29
   164e6:	4307      	orrs	r7, r0
   164e8:	2080      	movs	r0, #128	; 0x80
   164ea:	08e4      	lsrs	r4, r4, #3
   164ec:	0300      	lsls	r0, r0, #12
   164ee:	4204      	tst	r4, r0
   164f0:	d0e7      	beq.n	164c2 <__aeabi_dadd+0x54e>
   164f2:	08cb      	lsrs	r3, r1, #3
   164f4:	4203      	tst	r3, r0
   164f6:	d1e4      	bne.n	164c2 <__aeabi_dadd+0x54e>
   164f8:	08d2      	lsrs	r2, r2, #3
   164fa:	0749      	lsls	r1, r1, #29
   164fc:	4311      	orrs	r1, r2
   164fe:	000f      	movs	r7, r1
   16500:	001c      	movs	r4, r3
   16502:	e7de      	b.n	164c2 <__aeabi_dadd+0x54e>
   16504:	2700      	movs	r7, #0
   16506:	2400      	movs	r4, #0
   16508:	e5d5      	b.n	160b6 <__aeabi_dadd+0x142>
   1650a:	2100      	movs	r1, #0
   1650c:	e76b      	b.n	163e6 <__aeabi_dadd+0x472>
   1650e:	2500      	movs	r5, #0
   16510:	2700      	movs	r7, #0
   16512:	e5f3      	b.n	160fc <__aeabi_dadd+0x188>
   16514:	464e      	mov	r6, r9
   16516:	0025      	movs	r5, r4
   16518:	3e20      	subs	r6, #32
   1651a:	40f5      	lsrs	r5, r6
   1651c:	464b      	mov	r3, r9
   1651e:	002e      	movs	r6, r5
   16520:	2b20      	cmp	r3, #32
   16522:	d02d      	beq.n	16580 <__aeabi_dadd+0x60c>
   16524:	2540      	movs	r5, #64	; 0x40
   16526:	1aed      	subs	r5, r5, r3
   16528:	40ac      	lsls	r4, r5
   1652a:	4327      	orrs	r7, r4
   1652c:	1e7c      	subs	r4, r7, #1
   1652e:	41a7      	sbcs	r7, r4
   16530:	2400      	movs	r4, #0
   16532:	4337      	orrs	r7, r6
   16534:	e6c9      	b.n	162ca <__aeabi_dadd+0x356>
   16536:	2480      	movs	r4, #128	; 0x80
   16538:	2500      	movs	r5, #0
   1653a:	0324      	lsls	r4, r4, #12
   1653c:	4e13      	ldr	r6, [pc, #76]	; (1658c <__aeabi_dadd+0x618>)
   1653e:	2700      	movs	r7, #0
   16540:	e5dc      	b.n	160fc <__aeabi_dadd+0x188>
   16542:	4327      	orrs	r7, r4
   16544:	1e7c      	subs	r4, r7, #1
   16546:	41a7      	sbcs	r7, r4
   16548:	2400      	movs	r4, #0
   1654a:	e779      	b.n	16440 <__aeabi_dadd+0x4cc>
   1654c:	000c      	movs	r4, r1
   1654e:	0017      	movs	r7, r2
   16550:	4e0e      	ldr	r6, [pc, #56]	; (1658c <__aeabi_dadd+0x618>)
   16552:	e593      	b.n	1607c <__aeabi_dadd+0x108>
   16554:	000c      	movs	r4, r1
   16556:	0017      	movs	r7, r2
   16558:	e590      	b.n	1607c <__aeabi_dadd+0x108>
   1655a:	4656      	mov	r6, sl
   1655c:	0023      	movs	r3, r4
   1655e:	3e20      	subs	r6, #32
   16560:	40f3      	lsrs	r3, r6
   16562:	4699      	mov	r9, r3
   16564:	4653      	mov	r3, sl
   16566:	2b20      	cmp	r3, #32
   16568:	d00e      	beq.n	16588 <__aeabi_dadd+0x614>
   1656a:	2340      	movs	r3, #64	; 0x40
   1656c:	4656      	mov	r6, sl
   1656e:	1b9b      	subs	r3, r3, r6
   16570:	409c      	lsls	r4, r3
   16572:	4327      	orrs	r7, r4
   16574:	1e7c      	subs	r4, r7, #1
   16576:	41a7      	sbcs	r7, r4
   16578:	464b      	mov	r3, r9
   1657a:	2400      	movs	r4, #0
   1657c:	431f      	orrs	r7, r3
   1657e:	e75f      	b.n	16440 <__aeabi_dadd+0x4cc>
   16580:	2400      	movs	r4, #0
   16582:	e7d2      	b.n	1652a <__aeabi_dadd+0x5b6>
   16584:	0017      	movs	r7, r2
   16586:	e5b2      	b.n	160ee <__aeabi_dadd+0x17a>
   16588:	2400      	movs	r4, #0
   1658a:	e7f2      	b.n	16572 <__aeabi_dadd+0x5fe>
   1658c:	000007ff 	.word	0x000007ff
   16590:	ff7fffff 	.word	0xff7fffff

00016594 <__aeabi_ddiv>:
   16594:	b5f0      	push	{r4, r5, r6, r7, lr}
   16596:	4657      	mov	r7, sl
   16598:	4645      	mov	r5, r8
   1659a:	46de      	mov	lr, fp
   1659c:	464e      	mov	r6, r9
   1659e:	b5e0      	push	{r5, r6, r7, lr}
   165a0:	004c      	lsls	r4, r1, #1
   165a2:	030e      	lsls	r6, r1, #12
   165a4:	b087      	sub	sp, #28
   165a6:	4683      	mov	fp, r0
   165a8:	4692      	mov	sl, r2
   165aa:	001d      	movs	r5, r3
   165ac:	4680      	mov	r8, r0
   165ae:	0b36      	lsrs	r6, r6, #12
   165b0:	0d64      	lsrs	r4, r4, #21
   165b2:	0fcf      	lsrs	r7, r1, #31
   165b4:	2c00      	cmp	r4, #0
   165b6:	d04f      	beq.n	16658 <__aeabi_ddiv+0xc4>
   165b8:	4b6f      	ldr	r3, [pc, #444]	; (16778 <__aeabi_ddiv+0x1e4>)
   165ba:	429c      	cmp	r4, r3
   165bc:	d035      	beq.n	1662a <__aeabi_ddiv+0x96>
   165be:	2380      	movs	r3, #128	; 0x80
   165c0:	0f42      	lsrs	r2, r0, #29
   165c2:	041b      	lsls	r3, r3, #16
   165c4:	00f6      	lsls	r6, r6, #3
   165c6:	4313      	orrs	r3, r2
   165c8:	4333      	orrs	r3, r6
   165ca:	4699      	mov	r9, r3
   165cc:	00c3      	lsls	r3, r0, #3
   165ce:	4698      	mov	r8, r3
   165d0:	4b6a      	ldr	r3, [pc, #424]	; (1677c <__aeabi_ddiv+0x1e8>)
   165d2:	2600      	movs	r6, #0
   165d4:	469c      	mov	ip, r3
   165d6:	2300      	movs	r3, #0
   165d8:	4464      	add	r4, ip
   165da:	9303      	str	r3, [sp, #12]
   165dc:	032b      	lsls	r3, r5, #12
   165de:	0b1b      	lsrs	r3, r3, #12
   165e0:	469b      	mov	fp, r3
   165e2:	006b      	lsls	r3, r5, #1
   165e4:	0fed      	lsrs	r5, r5, #31
   165e6:	4650      	mov	r0, sl
   165e8:	0d5b      	lsrs	r3, r3, #21
   165ea:	9501      	str	r5, [sp, #4]
   165ec:	d05e      	beq.n	166ac <__aeabi_ddiv+0x118>
   165ee:	4a62      	ldr	r2, [pc, #392]	; (16778 <__aeabi_ddiv+0x1e4>)
   165f0:	4293      	cmp	r3, r2
   165f2:	d053      	beq.n	1669c <__aeabi_ddiv+0x108>
   165f4:	465a      	mov	r2, fp
   165f6:	00d1      	lsls	r1, r2, #3
   165f8:	2280      	movs	r2, #128	; 0x80
   165fa:	0f40      	lsrs	r0, r0, #29
   165fc:	0412      	lsls	r2, r2, #16
   165fe:	4302      	orrs	r2, r0
   16600:	430a      	orrs	r2, r1
   16602:	4693      	mov	fp, r2
   16604:	4652      	mov	r2, sl
   16606:	00d1      	lsls	r1, r2, #3
   16608:	4a5c      	ldr	r2, [pc, #368]	; (1677c <__aeabi_ddiv+0x1e8>)
   1660a:	4694      	mov	ip, r2
   1660c:	2200      	movs	r2, #0
   1660e:	4463      	add	r3, ip
   16610:	0038      	movs	r0, r7
   16612:	4068      	eors	r0, r5
   16614:	4684      	mov	ip, r0
   16616:	9002      	str	r0, [sp, #8]
   16618:	1ae4      	subs	r4, r4, r3
   1661a:	4316      	orrs	r6, r2
   1661c:	2e0f      	cmp	r6, #15
   1661e:	d900      	bls.n	16622 <__aeabi_ddiv+0x8e>
   16620:	e0b4      	b.n	1678c <__aeabi_ddiv+0x1f8>
   16622:	4b57      	ldr	r3, [pc, #348]	; (16780 <__aeabi_ddiv+0x1ec>)
   16624:	00b6      	lsls	r6, r6, #2
   16626:	599b      	ldr	r3, [r3, r6]
   16628:	469f      	mov	pc, r3
   1662a:	0003      	movs	r3, r0
   1662c:	4333      	orrs	r3, r6
   1662e:	4699      	mov	r9, r3
   16630:	d16c      	bne.n	1670c <__aeabi_ddiv+0x178>
   16632:	2300      	movs	r3, #0
   16634:	4698      	mov	r8, r3
   16636:	3302      	adds	r3, #2
   16638:	2608      	movs	r6, #8
   1663a:	9303      	str	r3, [sp, #12]
   1663c:	e7ce      	b.n	165dc <__aeabi_ddiv+0x48>
   1663e:	46cb      	mov	fp, r9
   16640:	4641      	mov	r1, r8
   16642:	9a03      	ldr	r2, [sp, #12]
   16644:	9701      	str	r7, [sp, #4]
   16646:	2a02      	cmp	r2, #2
   16648:	d165      	bne.n	16716 <__aeabi_ddiv+0x182>
   1664a:	9b01      	ldr	r3, [sp, #4]
   1664c:	4c4a      	ldr	r4, [pc, #296]	; (16778 <__aeabi_ddiv+0x1e4>)
   1664e:	469c      	mov	ip, r3
   16650:	2300      	movs	r3, #0
   16652:	2200      	movs	r2, #0
   16654:	4698      	mov	r8, r3
   16656:	e06b      	b.n	16730 <__aeabi_ddiv+0x19c>
   16658:	0003      	movs	r3, r0
   1665a:	4333      	orrs	r3, r6
   1665c:	4699      	mov	r9, r3
   1665e:	d04e      	beq.n	166fe <__aeabi_ddiv+0x16a>
   16660:	2e00      	cmp	r6, #0
   16662:	d100      	bne.n	16666 <__aeabi_ddiv+0xd2>
   16664:	e1bc      	b.n	169e0 <__aeabi_ddiv+0x44c>
   16666:	0030      	movs	r0, r6
   16668:	f001 fa7e 	bl	17b68 <__clzsi2>
   1666c:	0003      	movs	r3, r0
   1666e:	3b0b      	subs	r3, #11
   16670:	2b1c      	cmp	r3, #28
   16672:	dd00      	ble.n	16676 <__aeabi_ddiv+0xe2>
   16674:	e1ac      	b.n	169d0 <__aeabi_ddiv+0x43c>
   16676:	221d      	movs	r2, #29
   16678:	1ad3      	subs	r3, r2, r3
   1667a:	465a      	mov	r2, fp
   1667c:	0001      	movs	r1, r0
   1667e:	40da      	lsrs	r2, r3
   16680:	3908      	subs	r1, #8
   16682:	408e      	lsls	r6, r1
   16684:	0013      	movs	r3, r2
   16686:	4333      	orrs	r3, r6
   16688:	4699      	mov	r9, r3
   1668a:	465b      	mov	r3, fp
   1668c:	408b      	lsls	r3, r1
   1668e:	4698      	mov	r8, r3
   16690:	2300      	movs	r3, #0
   16692:	4c3c      	ldr	r4, [pc, #240]	; (16784 <__aeabi_ddiv+0x1f0>)
   16694:	2600      	movs	r6, #0
   16696:	1a24      	subs	r4, r4, r0
   16698:	9303      	str	r3, [sp, #12]
   1669a:	e79f      	b.n	165dc <__aeabi_ddiv+0x48>
   1669c:	4651      	mov	r1, sl
   1669e:	465a      	mov	r2, fp
   166a0:	4311      	orrs	r1, r2
   166a2:	d129      	bne.n	166f8 <__aeabi_ddiv+0x164>
   166a4:	2200      	movs	r2, #0
   166a6:	4693      	mov	fp, r2
   166a8:	3202      	adds	r2, #2
   166aa:	e7b1      	b.n	16610 <__aeabi_ddiv+0x7c>
   166ac:	4659      	mov	r1, fp
   166ae:	4301      	orrs	r1, r0
   166b0:	d01e      	beq.n	166f0 <__aeabi_ddiv+0x15c>
   166b2:	465b      	mov	r3, fp
   166b4:	2b00      	cmp	r3, #0
   166b6:	d100      	bne.n	166ba <__aeabi_ddiv+0x126>
   166b8:	e19e      	b.n	169f8 <__aeabi_ddiv+0x464>
   166ba:	4658      	mov	r0, fp
   166bc:	f001 fa54 	bl	17b68 <__clzsi2>
   166c0:	0003      	movs	r3, r0
   166c2:	3b0b      	subs	r3, #11
   166c4:	2b1c      	cmp	r3, #28
   166c6:	dd00      	ble.n	166ca <__aeabi_ddiv+0x136>
   166c8:	e18f      	b.n	169ea <__aeabi_ddiv+0x456>
   166ca:	0002      	movs	r2, r0
   166cc:	4659      	mov	r1, fp
   166ce:	3a08      	subs	r2, #8
   166d0:	4091      	lsls	r1, r2
   166d2:	468b      	mov	fp, r1
   166d4:	211d      	movs	r1, #29
   166d6:	1acb      	subs	r3, r1, r3
   166d8:	4651      	mov	r1, sl
   166da:	40d9      	lsrs	r1, r3
   166dc:	000b      	movs	r3, r1
   166de:	4659      	mov	r1, fp
   166e0:	430b      	orrs	r3, r1
   166e2:	4651      	mov	r1, sl
   166e4:	469b      	mov	fp, r3
   166e6:	4091      	lsls	r1, r2
   166e8:	4b26      	ldr	r3, [pc, #152]	; (16784 <__aeabi_ddiv+0x1f0>)
   166ea:	2200      	movs	r2, #0
   166ec:	1a1b      	subs	r3, r3, r0
   166ee:	e78f      	b.n	16610 <__aeabi_ddiv+0x7c>
   166f0:	2300      	movs	r3, #0
   166f2:	2201      	movs	r2, #1
   166f4:	469b      	mov	fp, r3
   166f6:	e78b      	b.n	16610 <__aeabi_ddiv+0x7c>
   166f8:	4651      	mov	r1, sl
   166fa:	2203      	movs	r2, #3
   166fc:	e788      	b.n	16610 <__aeabi_ddiv+0x7c>
   166fe:	2300      	movs	r3, #0
   16700:	4698      	mov	r8, r3
   16702:	3301      	adds	r3, #1
   16704:	2604      	movs	r6, #4
   16706:	2400      	movs	r4, #0
   16708:	9303      	str	r3, [sp, #12]
   1670a:	e767      	b.n	165dc <__aeabi_ddiv+0x48>
   1670c:	2303      	movs	r3, #3
   1670e:	46b1      	mov	r9, r6
   16710:	9303      	str	r3, [sp, #12]
   16712:	260c      	movs	r6, #12
   16714:	e762      	b.n	165dc <__aeabi_ddiv+0x48>
   16716:	2a03      	cmp	r2, #3
   16718:	d100      	bne.n	1671c <__aeabi_ddiv+0x188>
   1671a:	e25c      	b.n	16bd6 <__aeabi_ddiv+0x642>
   1671c:	9b01      	ldr	r3, [sp, #4]
   1671e:	2a01      	cmp	r2, #1
   16720:	d000      	beq.n	16724 <__aeabi_ddiv+0x190>
   16722:	e1e4      	b.n	16aee <__aeabi_ddiv+0x55a>
   16724:	4013      	ands	r3, r2
   16726:	469c      	mov	ip, r3
   16728:	2300      	movs	r3, #0
   1672a:	2400      	movs	r4, #0
   1672c:	2200      	movs	r2, #0
   1672e:	4698      	mov	r8, r3
   16730:	2100      	movs	r1, #0
   16732:	0312      	lsls	r2, r2, #12
   16734:	0b13      	lsrs	r3, r2, #12
   16736:	0d0a      	lsrs	r2, r1, #20
   16738:	0512      	lsls	r2, r2, #20
   1673a:	431a      	orrs	r2, r3
   1673c:	0523      	lsls	r3, r4, #20
   1673e:	4c12      	ldr	r4, [pc, #72]	; (16788 <__aeabi_ddiv+0x1f4>)
   16740:	4640      	mov	r0, r8
   16742:	4022      	ands	r2, r4
   16744:	4313      	orrs	r3, r2
   16746:	4662      	mov	r2, ip
   16748:	005b      	lsls	r3, r3, #1
   1674a:	07d2      	lsls	r2, r2, #31
   1674c:	085b      	lsrs	r3, r3, #1
   1674e:	4313      	orrs	r3, r2
   16750:	0019      	movs	r1, r3
   16752:	b007      	add	sp, #28
   16754:	bc3c      	pop	{r2, r3, r4, r5}
   16756:	4690      	mov	r8, r2
   16758:	4699      	mov	r9, r3
   1675a:	46a2      	mov	sl, r4
   1675c:	46ab      	mov	fp, r5
   1675e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16760:	2300      	movs	r3, #0
   16762:	2280      	movs	r2, #128	; 0x80
   16764:	469c      	mov	ip, r3
   16766:	0312      	lsls	r2, r2, #12
   16768:	4698      	mov	r8, r3
   1676a:	4c03      	ldr	r4, [pc, #12]	; (16778 <__aeabi_ddiv+0x1e4>)
   1676c:	e7e0      	b.n	16730 <__aeabi_ddiv+0x19c>
   1676e:	2300      	movs	r3, #0
   16770:	4c01      	ldr	r4, [pc, #4]	; (16778 <__aeabi_ddiv+0x1e4>)
   16772:	2200      	movs	r2, #0
   16774:	4698      	mov	r8, r3
   16776:	e7db      	b.n	16730 <__aeabi_ddiv+0x19c>
   16778:	000007ff 	.word	0x000007ff
   1677c:	fffffc01 	.word	0xfffffc01
   16780:	00019b40 	.word	0x00019b40
   16784:	fffffc0d 	.word	0xfffffc0d
   16788:	800fffff 	.word	0x800fffff
   1678c:	45d9      	cmp	r9, fp
   1678e:	d900      	bls.n	16792 <__aeabi_ddiv+0x1fe>
   16790:	e139      	b.n	16a06 <__aeabi_ddiv+0x472>
   16792:	d100      	bne.n	16796 <__aeabi_ddiv+0x202>
   16794:	e134      	b.n	16a00 <__aeabi_ddiv+0x46c>
   16796:	2300      	movs	r3, #0
   16798:	4646      	mov	r6, r8
   1679a:	464d      	mov	r5, r9
   1679c:	469a      	mov	sl, r3
   1679e:	3c01      	subs	r4, #1
   167a0:	465b      	mov	r3, fp
   167a2:	0e0a      	lsrs	r2, r1, #24
   167a4:	021b      	lsls	r3, r3, #8
   167a6:	431a      	orrs	r2, r3
   167a8:	020b      	lsls	r3, r1, #8
   167aa:	0c17      	lsrs	r7, r2, #16
   167ac:	9303      	str	r3, [sp, #12]
   167ae:	0413      	lsls	r3, r2, #16
   167b0:	0c1b      	lsrs	r3, r3, #16
   167b2:	0039      	movs	r1, r7
   167b4:	0028      	movs	r0, r5
   167b6:	4690      	mov	r8, r2
   167b8:	9301      	str	r3, [sp, #4]
   167ba:	f7fe fe51 	bl	15460 <__udivsi3>
   167be:	0002      	movs	r2, r0
   167c0:	9b01      	ldr	r3, [sp, #4]
   167c2:	4683      	mov	fp, r0
   167c4:	435a      	muls	r2, r3
   167c6:	0028      	movs	r0, r5
   167c8:	0039      	movs	r1, r7
   167ca:	4691      	mov	r9, r2
   167cc:	f7fe fece 	bl	1556c <__aeabi_uidivmod>
   167d0:	0c35      	lsrs	r5, r6, #16
   167d2:	0409      	lsls	r1, r1, #16
   167d4:	430d      	orrs	r5, r1
   167d6:	45a9      	cmp	r9, r5
   167d8:	d90d      	bls.n	167f6 <__aeabi_ddiv+0x262>
   167da:	465b      	mov	r3, fp
   167dc:	4445      	add	r5, r8
   167de:	3b01      	subs	r3, #1
   167e0:	45a8      	cmp	r8, r5
   167e2:	d900      	bls.n	167e6 <__aeabi_ddiv+0x252>
   167e4:	e13a      	b.n	16a5c <__aeabi_ddiv+0x4c8>
   167e6:	45a9      	cmp	r9, r5
   167e8:	d800      	bhi.n	167ec <__aeabi_ddiv+0x258>
   167ea:	e137      	b.n	16a5c <__aeabi_ddiv+0x4c8>
   167ec:	2302      	movs	r3, #2
   167ee:	425b      	negs	r3, r3
   167f0:	469c      	mov	ip, r3
   167f2:	4445      	add	r5, r8
   167f4:	44e3      	add	fp, ip
   167f6:	464b      	mov	r3, r9
   167f8:	1aeb      	subs	r3, r5, r3
   167fa:	0039      	movs	r1, r7
   167fc:	0018      	movs	r0, r3
   167fe:	9304      	str	r3, [sp, #16]
   16800:	f7fe fe2e 	bl	15460 <__udivsi3>
   16804:	9b01      	ldr	r3, [sp, #4]
   16806:	0005      	movs	r5, r0
   16808:	4343      	muls	r3, r0
   1680a:	0039      	movs	r1, r7
   1680c:	9804      	ldr	r0, [sp, #16]
   1680e:	4699      	mov	r9, r3
   16810:	f7fe feac 	bl	1556c <__aeabi_uidivmod>
   16814:	0433      	lsls	r3, r6, #16
   16816:	0409      	lsls	r1, r1, #16
   16818:	0c1b      	lsrs	r3, r3, #16
   1681a:	430b      	orrs	r3, r1
   1681c:	4599      	cmp	r9, r3
   1681e:	d909      	bls.n	16834 <__aeabi_ddiv+0x2a0>
   16820:	4443      	add	r3, r8
   16822:	1e6a      	subs	r2, r5, #1
   16824:	4598      	cmp	r8, r3
   16826:	d900      	bls.n	1682a <__aeabi_ddiv+0x296>
   16828:	e11a      	b.n	16a60 <__aeabi_ddiv+0x4cc>
   1682a:	4599      	cmp	r9, r3
   1682c:	d800      	bhi.n	16830 <__aeabi_ddiv+0x29c>
   1682e:	e117      	b.n	16a60 <__aeabi_ddiv+0x4cc>
   16830:	3d02      	subs	r5, #2
   16832:	4443      	add	r3, r8
   16834:	464a      	mov	r2, r9
   16836:	1a9b      	subs	r3, r3, r2
   16838:	465a      	mov	r2, fp
   1683a:	0412      	lsls	r2, r2, #16
   1683c:	432a      	orrs	r2, r5
   1683e:	9903      	ldr	r1, [sp, #12]
   16840:	4693      	mov	fp, r2
   16842:	0c10      	lsrs	r0, r2, #16
   16844:	0c0a      	lsrs	r2, r1, #16
   16846:	4691      	mov	r9, r2
   16848:	0409      	lsls	r1, r1, #16
   1684a:	465a      	mov	r2, fp
   1684c:	0c09      	lsrs	r1, r1, #16
   1684e:	464e      	mov	r6, r9
   16850:	000d      	movs	r5, r1
   16852:	0412      	lsls	r2, r2, #16
   16854:	0c12      	lsrs	r2, r2, #16
   16856:	4345      	muls	r5, r0
   16858:	9105      	str	r1, [sp, #20]
   1685a:	4351      	muls	r1, r2
   1685c:	4372      	muls	r2, r6
   1685e:	4370      	muls	r0, r6
   16860:	1952      	adds	r2, r2, r5
   16862:	0c0e      	lsrs	r6, r1, #16
   16864:	18b2      	adds	r2, r6, r2
   16866:	4295      	cmp	r5, r2
   16868:	d903      	bls.n	16872 <__aeabi_ddiv+0x2de>
   1686a:	2580      	movs	r5, #128	; 0x80
   1686c:	026d      	lsls	r5, r5, #9
   1686e:	46ac      	mov	ip, r5
   16870:	4460      	add	r0, ip
   16872:	0c15      	lsrs	r5, r2, #16
   16874:	0409      	lsls	r1, r1, #16
   16876:	0412      	lsls	r2, r2, #16
   16878:	0c09      	lsrs	r1, r1, #16
   1687a:	1828      	adds	r0, r5, r0
   1687c:	1852      	adds	r2, r2, r1
   1687e:	4283      	cmp	r3, r0
   16880:	d200      	bcs.n	16884 <__aeabi_ddiv+0x2f0>
   16882:	e0ce      	b.n	16a22 <__aeabi_ddiv+0x48e>
   16884:	d100      	bne.n	16888 <__aeabi_ddiv+0x2f4>
   16886:	e0c8      	b.n	16a1a <__aeabi_ddiv+0x486>
   16888:	1a1d      	subs	r5, r3, r0
   1688a:	4653      	mov	r3, sl
   1688c:	1a9e      	subs	r6, r3, r2
   1688e:	45b2      	cmp	sl, r6
   16890:	4192      	sbcs	r2, r2
   16892:	4252      	negs	r2, r2
   16894:	1aab      	subs	r3, r5, r2
   16896:	469a      	mov	sl, r3
   16898:	4598      	cmp	r8, r3
   1689a:	d100      	bne.n	1689e <__aeabi_ddiv+0x30a>
   1689c:	e117      	b.n	16ace <__aeabi_ddiv+0x53a>
   1689e:	0039      	movs	r1, r7
   168a0:	0018      	movs	r0, r3
   168a2:	f7fe fddd 	bl	15460 <__udivsi3>
   168a6:	9b01      	ldr	r3, [sp, #4]
   168a8:	0005      	movs	r5, r0
   168aa:	4343      	muls	r3, r0
   168ac:	0039      	movs	r1, r7
   168ae:	4650      	mov	r0, sl
   168b0:	9304      	str	r3, [sp, #16]
   168b2:	f7fe fe5b 	bl	1556c <__aeabi_uidivmod>
   168b6:	9804      	ldr	r0, [sp, #16]
   168b8:	040b      	lsls	r3, r1, #16
   168ba:	0c31      	lsrs	r1, r6, #16
   168bc:	4319      	orrs	r1, r3
   168be:	4288      	cmp	r0, r1
   168c0:	d909      	bls.n	168d6 <__aeabi_ddiv+0x342>
   168c2:	4441      	add	r1, r8
   168c4:	1e6b      	subs	r3, r5, #1
   168c6:	4588      	cmp	r8, r1
   168c8:	d900      	bls.n	168cc <__aeabi_ddiv+0x338>
   168ca:	e107      	b.n	16adc <__aeabi_ddiv+0x548>
   168cc:	4288      	cmp	r0, r1
   168ce:	d800      	bhi.n	168d2 <__aeabi_ddiv+0x33e>
   168d0:	e104      	b.n	16adc <__aeabi_ddiv+0x548>
   168d2:	3d02      	subs	r5, #2
   168d4:	4441      	add	r1, r8
   168d6:	9b04      	ldr	r3, [sp, #16]
   168d8:	1acb      	subs	r3, r1, r3
   168da:	0018      	movs	r0, r3
   168dc:	0039      	movs	r1, r7
   168de:	9304      	str	r3, [sp, #16]
   168e0:	f7fe fdbe 	bl	15460 <__udivsi3>
   168e4:	9b01      	ldr	r3, [sp, #4]
   168e6:	4682      	mov	sl, r0
   168e8:	4343      	muls	r3, r0
   168ea:	0039      	movs	r1, r7
   168ec:	9804      	ldr	r0, [sp, #16]
   168ee:	9301      	str	r3, [sp, #4]
   168f0:	f7fe fe3c 	bl	1556c <__aeabi_uidivmod>
   168f4:	9801      	ldr	r0, [sp, #4]
   168f6:	040b      	lsls	r3, r1, #16
   168f8:	0431      	lsls	r1, r6, #16
   168fa:	0c09      	lsrs	r1, r1, #16
   168fc:	4319      	orrs	r1, r3
   168fe:	4288      	cmp	r0, r1
   16900:	d90d      	bls.n	1691e <__aeabi_ddiv+0x38a>
   16902:	4653      	mov	r3, sl
   16904:	4441      	add	r1, r8
   16906:	3b01      	subs	r3, #1
   16908:	4588      	cmp	r8, r1
   1690a:	d900      	bls.n	1690e <__aeabi_ddiv+0x37a>
   1690c:	e0e8      	b.n	16ae0 <__aeabi_ddiv+0x54c>
   1690e:	4288      	cmp	r0, r1
   16910:	d800      	bhi.n	16914 <__aeabi_ddiv+0x380>
   16912:	e0e5      	b.n	16ae0 <__aeabi_ddiv+0x54c>
   16914:	2302      	movs	r3, #2
   16916:	425b      	negs	r3, r3
   16918:	469c      	mov	ip, r3
   1691a:	4441      	add	r1, r8
   1691c:	44e2      	add	sl, ip
   1691e:	9b01      	ldr	r3, [sp, #4]
   16920:	042d      	lsls	r5, r5, #16
   16922:	1ace      	subs	r6, r1, r3
   16924:	4651      	mov	r1, sl
   16926:	4329      	orrs	r1, r5
   16928:	9d05      	ldr	r5, [sp, #20]
   1692a:	464f      	mov	r7, r9
   1692c:	002a      	movs	r2, r5
   1692e:	040b      	lsls	r3, r1, #16
   16930:	0c08      	lsrs	r0, r1, #16
   16932:	0c1b      	lsrs	r3, r3, #16
   16934:	435a      	muls	r2, r3
   16936:	4345      	muls	r5, r0
   16938:	437b      	muls	r3, r7
   1693a:	4378      	muls	r0, r7
   1693c:	195b      	adds	r3, r3, r5
   1693e:	0c17      	lsrs	r7, r2, #16
   16940:	18fb      	adds	r3, r7, r3
   16942:	429d      	cmp	r5, r3
   16944:	d903      	bls.n	1694e <__aeabi_ddiv+0x3ba>
   16946:	2580      	movs	r5, #128	; 0x80
   16948:	026d      	lsls	r5, r5, #9
   1694a:	46ac      	mov	ip, r5
   1694c:	4460      	add	r0, ip
   1694e:	0c1d      	lsrs	r5, r3, #16
   16950:	0412      	lsls	r2, r2, #16
   16952:	041b      	lsls	r3, r3, #16
   16954:	0c12      	lsrs	r2, r2, #16
   16956:	1828      	adds	r0, r5, r0
   16958:	189b      	adds	r3, r3, r2
   1695a:	4286      	cmp	r6, r0
   1695c:	d200      	bcs.n	16960 <__aeabi_ddiv+0x3cc>
   1695e:	e093      	b.n	16a88 <__aeabi_ddiv+0x4f4>
   16960:	d100      	bne.n	16964 <__aeabi_ddiv+0x3d0>
   16962:	e08e      	b.n	16a82 <__aeabi_ddiv+0x4ee>
   16964:	2301      	movs	r3, #1
   16966:	4319      	orrs	r1, r3
   16968:	4ba0      	ldr	r3, [pc, #640]	; (16bec <__aeabi_ddiv+0x658>)
   1696a:	18e3      	adds	r3, r4, r3
   1696c:	2b00      	cmp	r3, #0
   1696e:	dc00      	bgt.n	16972 <__aeabi_ddiv+0x3de>
   16970:	e099      	b.n	16aa6 <__aeabi_ddiv+0x512>
   16972:	074a      	lsls	r2, r1, #29
   16974:	d000      	beq.n	16978 <__aeabi_ddiv+0x3e4>
   16976:	e09e      	b.n	16ab6 <__aeabi_ddiv+0x522>
   16978:	465a      	mov	r2, fp
   1697a:	01d2      	lsls	r2, r2, #7
   1697c:	d506      	bpl.n	1698c <__aeabi_ddiv+0x3f8>
   1697e:	465a      	mov	r2, fp
   16980:	4b9b      	ldr	r3, [pc, #620]	; (16bf0 <__aeabi_ddiv+0x65c>)
   16982:	401a      	ands	r2, r3
   16984:	2380      	movs	r3, #128	; 0x80
   16986:	4693      	mov	fp, r2
   16988:	00db      	lsls	r3, r3, #3
   1698a:	18e3      	adds	r3, r4, r3
   1698c:	4a99      	ldr	r2, [pc, #612]	; (16bf4 <__aeabi_ddiv+0x660>)
   1698e:	4293      	cmp	r3, r2
   16990:	dd68      	ble.n	16a64 <__aeabi_ddiv+0x4d0>
   16992:	2301      	movs	r3, #1
   16994:	9a02      	ldr	r2, [sp, #8]
   16996:	4c98      	ldr	r4, [pc, #608]	; (16bf8 <__aeabi_ddiv+0x664>)
   16998:	401a      	ands	r2, r3
   1699a:	2300      	movs	r3, #0
   1699c:	4694      	mov	ip, r2
   1699e:	4698      	mov	r8, r3
   169a0:	2200      	movs	r2, #0
   169a2:	e6c5      	b.n	16730 <__aeabi_ddiv+0x19c>
   169a4:	2280      	movs	r2, #128	; 0x80
   169a6:	464b      	mov	r3, r9
   169a8:	0312      	lsls	r2, r2, #12
   169aa:	4213      	tst	r3, r2
   169ac:	d00a      	beq.n	169c4 <__aeabi_ddiv+0x430>
   169ae:	465b      	mov	r3, fp
   169b0:	4213      	tst	r3, r2
   169b2:	d106      	bne.n	169c2 <__aeabi_ddiv+0x42e>
   169b4:	431a      	orrs	r2, r3
   169b6:	0312      	lsls	r2, r2, #12
   169b8:	0b12      	lsrs	r2, r2, #12
   169ba:	46ac      	mov	ip, r5
   169bc:	4688      	mov	r8, r1
   169be:	4c8e      	ldr	r4, [pc, #568]	; (16bf8 <__aeabi_ddiv+0x664>)
   169c0:	e6b6      	b.n	16730 <__aeabi_ddiv+0x19c>
   169c2:	464b      	mov	r3, r9
   169c4:	431a      	orrs	r2, r3
   169c6:	0312      	lsls	r2, r2, #12
   169c8:	0b12      	lsrs	r2, r2, #12
   169ca:	46bc      	mov	ip, r7
   169cc:	4c8a      	ldr	r4, [pc, #552]	; (16bf8 <__aeabi_ddiv+0x664>)
   169ce:	e6af      	b.n	16730 <__aeabi_ddiv+0x19c>
   169d0:	0003      	movs	r3, r0
   169d2:	465a      	mov	r2, fp
   169d4:	3b28      	subs	r3, #40	; 0x28
   169d6:	409a      	lsls	r2, r3
   169d8:	2300      	movs	r3, #0
   169da:	4691      	mov	r9, r2
   169dc:	4698      	mov	r8, r3
   169de:	e657      	b.n	16690 <__aeabi_ddiv+0xfc>
   169e0:	4658      	mov	r0, fp
   169e2:	f001 f8c1 	bl	17b68 <__clzsi2>
   169e6:	3020      	adds	r0, #32
   169e8:	e640      	b.n	1666c <__aeabi_ddiv+0xd8>
   169ea:	0003      	movs	r3, r0
   169ec:	4652      	mov	r2, sl
   169ee:	3b28      	subs	r3, #40	; 0x28
   169f0:	409a      	lsls	r2, r3
   169f2:	2100      	movs	r1, #0
   169f4:	4693      	mov	fp, r2
   169f6:	e677      	b.n	166e8 <__aeabi_ddiv+0x154>
   169f8:	f001 f8b6 	bl	17b68 <__clzsi2>
   169fc:	3020      	adds	r0, #32
   169fe:	e65f      	b.n	166c0 <__aeabi_ddiv+0x12c>
   16a00:	4588      	cmp	r8, r1
   16a02:	d200      	bcs.n	16a06 <__aeabi_ddiv+0x472>
   16a04:	e6c7      	b.n	16796 <__aeabi_ddiv+0x202>
   16a06:	464b      	mov	r3, r9
   16a08:	07de      	lsls	r6, r3, #31
   16a0a:	085d      	lsrs	r5, r3, #1
   16a0c:	4643      	mov	r3, r8
   16a0e:	085b      	lsrs	r3, r3, #1
   16a10:	431e      	orrs	r6, r3
   16a12:	4643      	mov	r3, r8
   16a14:	07db      	lsls	r3, r3, #31
   16a16:	469a      	mov	sl, r3
   16a18:	e6c2      	b.n	167a0 <__aeabi_ddiv+0x20c>
   16a1a:	2500      	movs	r5, #0
   16a1c:	4592      	cmp	sl, r2
   16a1e:	d300      	bcc.n	16a22 <__aeabi_ddiv+0x48e>
   16a20:	e733      	b.n	1688a <__aeabi_ddiv+0x2f6>
   16a22:	9e03      	ldr	r6, [sp, #12]
   16a24:	4659      	mov	r1, fp
   16a26:	46b4      	mov	ip, r6
   16a28:	44e2      	add	sl, ip
   16a2a:	45b2      	cmp	sl, r6
   16a2c:	41ad      	sbcs	r5, r5
   16a2e:	426d      	negs	r5, r5
   16a30:	4445      	add	r5, r8
   16a32:	18eb      	adds	r3, r5, r3
   16a34:	3901      	subs	r1, #1
   16a36:	4598      	cmp	r8, r3
   16a38:	d207      	bcs.n	16a4a <__aeabi_ddiv+0x4b6>
   16a3a:	4298      	cmp	r0, r3
   16a3c:	d900      	bls.n	16a40 <__aeabi_ddiv+0x4ac>
   16a3e:	e07f      	b.n	16b40 <__aeabi_ddiv+0x5ac>
   16a40:	d100      	bne.n	16a44 <__aeabi_ddiv+0x4b0>
   16a42:	e0bc      	b.n	16bbe <__aeabi_ddiv+0x62a>
   16a44:	1a1d      	subs	r5, r3, r0
   16a46:	468b      	mov	fp, r1
   16a48:	e71f      	b.n	1688a <__aeabi_ddiv+0x2f6>
   16a4a:	4598      	cmp	r8, r3
   16a4c:	d1fa      	bne.n	16a44 <__aeabi_ddiv+0x4b0>
   16a4e:	9d03      	ldr	r5, [sp, #12]
   16a50:	4555      	cmp	r5, sl
   16a52:	d9f2      	bls.n	16a3a <__aeabi_ddiv+0x4a6>
   16a54:	4643      	mov	r3, r8
   16a56:	468b      	mov	fp, r1
   16a58:	1a1d      	subs	r5, r3, r0
   16a5a:	e716      	b.n	1688a <__aeabi_ddiv+0x2f6>
   16a5c:	469b      	mov	fp, r3
   16a5e:	e6ca      	b.n	167f6 <__aeabi_ddiv+0x262>
   16a60:	0015      	movs	r5, r2
   16a62:	e6e7      	b.n	16834 <__aeabi_ddiv+0x2a0>
   16a64:	465a      	mov	r2, fp
   16a66:	08c9      	lsrs	r1, r1, #3
   16a68:	0752      	lsls	r2, r2, #29
   16a6a:	430a      	orrs	r2, r1
   16a6c:	055b      	lsls	r3, r3, #21
   16a6e:	4690      	mov	r8, r2
   16a70:	0d5c      	lsrs	r4, r3, #21
   16a72:	465a      	mov	r2, fp
   16a74:	2301      	movs	r3, #1
   16a76:	9902      	ldr	r1, [sp, #8]
   16a78:	0252      	lsls	r2, r2, #9
   16a7a:	4019      	ands	r1, r3
   16a7c:	0b12      	lsrs	r2, r2, #12
   16a7e:	468c      	mov	ip, r1
   16a80:	e656      	b.n	16730 <__aeabi_ddiv+0x19c>
   16a82:	2b00      	cmp	r3, #0
   16a84:	d100      	bne.n	16a88 <__aeabi_ddiv+0x4f4>
   16a86:	e76f      	b.n	16968 <__aeabi_ddiv+0x3d4>
   16a88:	4446      	add	r6, r8
   16a8a:	1e4a      	subs	r2, r1, #1
   16a8c:	45b0      	cmp	r8, r6
   16a8e:	d929      	bls.n	16ae4 <__aeabi_ddiv+0x550>
   16a90:	0011      	movs	r1, r2
   16a92:	4286      	cmp	r6, r0
   16a94:	d000      	beq.n	16a98 <__aeabi_ddiv+0x504>
   16a96:	e765      	b.n	16964 <__aeabi_ddiv+0x3d0>
   16a98:	9a03      	ldr	r2, [sp, #12]
   16a9a:	4293      	cmp	r3, r2
   16a9c:	d000      	beq.n	16aa0 <__aeabi_ddiv+0x50c>
   16a9e:	e761      	b.n	16964 <__aeabi_ddiv+0x3d0>
   16aa0:	e762      	b.n	16968 <__aeabi_ddiv+0x3d4>
   16aa2:	2101      	movs	r1, #1
   16aa4:	4249      	negs	r1, r1
   16aa6:	2001      	movs	r0, #1
   16aa8:	1ac2      	subs	r2, r0, r3
   16aaa:	2a38      	cmp	r2, #56	; 0x38
   16aac:	dd21      	ble.n	16af2 <__aeabi_ddiv+0x55e>
   16aae:	9b02      	ldr	r3, [sp, #8]
   16ab0:	4003      	ands	r3, r0
   16ab2:	469c      	mov	ip, r3
   16ab4:	e638      	b.n	16728 <__aeabi_ddiv+0x194>
   16ab6:	220f      	movs	r2, #15
   16ab8:	400a      	ands	r2, r1
   16aba:	2a04      	cmp	r2, #4
   16abc:	d100      	bne.n	16ac0 <__aeabi_ddiv+0x52c>
   16abe:	e75b      	b.n	16978 <__aeabi_ddiv+0x3e4>
   16ac0:	000a      	movs	r2, r1
   16ac2:	1d11      	adds	r1, r2, #4
   16ac4:	4291      	cmp	r1, r2
   16ac6:	4192      	sbcs	r2, r2
   16ac8:	4252      	negs	r2, r2
   16aca:	4493      	add	fp, r2
   16acc:	e754      	b.n	16978 <__aeabi_ddiv+0x3e4>
   16ace:	4b47      	ldr	r3, [pc, #284]	; (16bec <__aeabi_ddiv+0x658>)
   16ad0:	18e3      	adds	r3, r4, r3
   16ad2:	2b00      	cmp	r3, #0
   16ad4:	dde5      	ble.n	16aa2 <__aeabi_ddiv+0x50e>
   16ad6:	2201      	movs	r2, #1
   16ad8:	4252      	negs	r2, r2
   16ada:	e7f2      	b.n	16ac2 <__aeabi_ddiv+0x52e>
   16adc:	001d      	movs	r5, r3
   16ade:	e6fa      	b.n	168d6 <__aeabi_ddiv+0x342>
   16ae0:	469a      	mov	sl, r3
   16ae2:	e71c      	b.n	1691e <__aeabi_ddiv+0x38a>
   16ae4:	42b0      	cmp	r0, r6
   16ae6:	d839      	bhi.n	16b5c <__aeabi_ddiv+0x5c8>
   16ae8:	d06e      	beq.n	16bc8 <__aeabi_ddiv+0x634>
   16aea:	0011      	movs	r1, r2
   16aec:	e73a      	b.n	16964 <__aeabi_ddiv+0x3d0>
   16aee:	9302      	str	r3, [sp, #8]
   16af0:	e73a      	b.n	16968 <__aeabi_ddiv+0x3d4>
   16af2:	2a1f      	cmp	r2, #31
   16af4:	dc3c      	bgt.n	16b70 <__aeabi_ddiv+0x5dc>
   16af6:	2320      	movs	r3, #32
   16af8:	1a9b      	subs	r3, r3, r2
   16afa:	000c      	movs	r4, r1
   16afc:	4658      	mov	r0, fp
   16afe:	4099      	lsls	r1, r3
   16b00:	4098      	lsls	r0, r3
   16b02:	1e4b      	subs	r3, r1, #1
   16b04:	4199      	sbcs	r1, r3
   16b06:	465b      	mov	r3, fp
   16b08:	40d4      	lsrs	r4, r2
   16b0a:	40d3      	lsrs	r3, r2
   16b0c:	4320      	orrs	r0, r4
   16b0e:	4308      	orrs	r0, r1
   16b10:	001a      	movs	r2, r3
   16b12:	0743      	lsls	r3, r0, #29
   16b14:	d009      	beq.n	16b2a <__aeabi_ddiv+0x596>
   16b16:	230f      	movs	r3, #15
   16b18:	4003      	ands	r3, r0
   16b1a:	2b04      	cmp	r3, #4
   16b1c:	d005      	beq.n	16b2a <__aeabi_ddiv+0x596>
   16b1e:	0001      	movs	r1, r0
   16b20:	1d08      	adds	r0, r1, #4
   16b22:	4288      	cmp	r0, r1
   16b24:	419b      	sbcs	r3, r3
   16b26:	425b      	negs	r3, r3
   16b28:	18d2      	adds	r2, r2, r3
   16b2a:	0213      	lsls	r3, r2, #8
   16b2c:	d53a      	bpl.n	16ba4 <__aeabi_ddiv+0x610>
   16b2e:	2301      	movs	r3, #1
   16b30:	9a02      	ldr	r2, [sp, #8]
   16b32:	2401      	movs	r4, #1
   16b34:	401a      	ands	r2, r3
   16b36:	2300      	movs	r3, #0
   16b38:	4694      	mov	ip, r2
   16b3a:	4698      	mov	r8, r3
   16b3c:	2200      	movs	r2, #0
   16b3e:	e5f7      	b.n	16730 <__aeabi_ddiv+0x19c>
   16b40:	2102      	movs	r1, #2
   16b42:	4249      	negs	r1, r1
   16b44:	468c      	mov	ip, r1
   16b46:	9d03      	ldr	r5, [sp, #12]
   16b48:	44e3      	add	fp, ip
   16b4a:	46ac      	mov	ip, r5
   16b4c:	44e2      	add	sl, ip
   16b4e:	45aa      	cmp	sl, r5
   16b50:	41ad      	sbcs	r5, r5
   16b52:	426d      	negs	r5, r5
   16b54:	4445      	add	r5, r8
   16b56:	18ed      	adds	r5, r5, r3
   16b58:	1a2d      	subs	r5, r5, r0
   16b5a:	e696      	b.n	1688a <__aeabi_ddiv+0x2f6>
   16b5c:	1e8a      	subs	r2, r1, #2
   16b5e:	9903      	ldr	r1, [sp, #12]
   16b60:	004d      	lsls	r5, r1, #1
   16b62:	428d      	cmp	r5, r1
   16b64:	4189      	sbcs	r1, r1
   16b66:	4249      	negs	r1, r1
   16b68:	4441      	add	r1, r8
   16b6a:	1876      	adds	r6, r6, r1
   16b6c:	9503      	str	r5, [sp, #12]
   16b6e:	e78f      	b.n	16a90 <__aeabi_ddiv+0x4fc>
   16b70:	201f      	movs	r0, #31
   16b72:	4240      	negs	r0, r0
   16b74:	1ac3      	subs	r3, r0, r3
   16b76:	4658      	mov	r0, fp
   16b78:	40d8      	lsrs	r0, r3
   16b7a:	0003      	movs	r3, r0
   16b7c:	2a20      	cmp	r2, #32
   16b7e:	d028      	beq.n	16bd2 <__aeabi_ddiv+0x63e>
   16b80:	2040      	movs	r0, #64	; 0x40
   16b82:	465d      	mov	r5, fp
   16b84:	1a82      	subs	r2, r0, r2
   16b86:	4095      	lsls	r5, r2
   16b88:	4329      	orrs	r1, r5
   16b8a:	1e4a      	subs	r2, r1, #1
   16b8c:	4191      	sbcs	r1, r2
   16b8e:	4319      	orrs	r1, r3
   16b90:	2307      	movs	r3, #7
   16b92:	2200      	movs	r2, #0
   16b94:	400b      	ands	r3, r1
   16b96:	d009      	beq.n	16bac <__aeabi_ddiv+0x618>
   16b98:	230f      	movs	r3, #15
   16b9a:	2200      	movs	r2, #0
   16b9c:	400b      	ands	r3, r1
   16b9e:	0008      	movs	r0, r1
   16ba0:	2b04      	cmp	r3, #4
   16ba2:	d1bd      	bne.n	16b20 <__aeabi_ddiv+0x58c>
   16ba4:	0001      	movs	r1, r0
   16ba6:	0753      	lsls	r3, r2, #29
   16ba8:	0252      	lsls	r2, r2, #9
   16baa:	0b12      	lsrs	r2, r2, #12
   16bac:	08c9      	lsrs	r1, r1, #3
   16bae:	4319      	orrs	r1, r3
   16bb0:	2301      	movs	r3, #1
   16bb2:	4688      	mov	r8, r1
   16bb4:	9902      	ldr	r1, [sp, #8]
   16bb6:	2400      	movs	r4, #0
   16bb8:	4019      	ands	r1, r3
   16bba:	468c      	mov	ip, r1
   16bbc:	e5b8      	b.n	16730 <__aeabi_ddiv+0x19c>
   16bbe:	4552      	cmp	r2, sl
   16bc0:	d8be      	bhi.n	16b40 <__aeabi_ddiv+0x5ac>
   16bc2:	468b      	mov	fp, r1
   16bc4:	2500      	movs	r5, #0
   16bc6:	e660      	b.n	1688a <__aeabi_ddiv+0x2f6>
   16bc8:	9d03      	ldr	r5, [sp, #12]
   16bca:	429d      	cmp	r5, r3
   16bcc:	d3c6      	bcc.n	16b5c <__aeabi_ddiv+0x5c8>
   16bce:	0011      	movs	r1, r2
   16bd0:	e762      	b.n	16a98 <__aeabi_ddiv+0x504>
   16bd2:	2500      	movs	r5, #0
   16bd4:	e7d8      	b.n	16b88 <__aeabi_ddiv+0x5f4>
   16bd6:	2280      	movs	r2, #128	; 0x80
   16bd8:	465b      	mov	r3, fp
   16bda:	0312      	lsls	r2, r2, #12
   16bdc:	431a      	orrs	r2, r3
   16bde:	9b01      	ldr	r3, [sp, #4]
   16be0:	0312      	lsls	r2, r2, #12
   16be2:	0b12      	lsrs	r2, r2, #12
   16be4:	469c      	mov	ip, r3
   16be6:	4688      	mov	r8, r1
   16be8:	4c03      	ldr	r4, [pc, #12]	; (16bf8 <__aeabi_ddiv+0x664>)
   16bea:	e5a1      	b.n	16730 <__aeabi_ddiv+0x19c>
   16bec:	000003ff 	.word	0x000003ff
   16bf0:	feffffff 	.word	0xfeffffff
   16bf4:	000007fe 	.word	0x000007fe
   16bf8:	000007ff 	.word	0x000007ff

00016bfc <__eqdf2>:
   16bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bfe:	464f      	mov	r7, r9
   16c00:	4646      	mov	r6, r8
   16c02:	46d6      	mov	lr, sl
   16c04:	005c      	lsls	r4, r3, #1
   16c06:	b5c0      	push	{r6, r7, lr}
   16c08:	031f      	lsls	r7, r3, #12
   16c0a:	0fdb      	lsrs	r3, r3, #31
   16c0c:	469a      	mov	sl, r3
   16c0e:	4b17      	ldr	r3, [pc, #92]	; (16c6c <__eqdf2+0x70>)
   16c10:	030e      	lsls	r6, r1, #12
   16c12:	004d      	lsls	r5, r1, #1
   16c14:	4684      	mov	ip, r0
   16c16:	4680      	mov	r8, r0
   16c18:	0b36      	lsrs	r6, r6, #12
   16c1a:	0d6d      	lsrs	r5, r5, #21
   16c1c:	0fc9      	lsrs	r1, r1, #31
   16c1e:	4691      	mov	r9, r2
   16c20:	0b3f      	lsrs	r7, r7, #12
   16c22:	0d64      	lsrs	r4, r4, #21
   16c24:	2001      	movs	r0, #1
   16c26:	429d      	cmp	r5, r3
   16c28:	d008      	beq.n	16c3c <__eqdf2+0x40>
   16c2a:	429c      	cmp	r4, r3
   16c2c:	d001      	beq.n	16c32 <__eqdf2+0x36>
   16c2e:	42a5      	cmp	r5, r4
   16c30:	d00b      	beq.n	16c4a <__eqdf2+0x4e>
   16c32:	bc1c      	pop	{r2, r3, r4}
   16c34:	4690      	mov	r8, r2
   16c36:	4699      	mov	r9, r3
   16c38:	46a2      	mov	sl, r4
   16c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16c3c:	4663      	mov	r3, ip
   16c3e:	4333      	orrs	r3, r6
   16c40:	d1f7      	bne.n	16c32 <__eqdf2+0x36>
   16c42:	42ac      	cmp	r4, r5
   16c44:	d1f5      	bne.n	16c32 <__eqdf2+0x36>
   16c46:	433a      	orrs	r2, r7
   16c48:	d1f3      	bne.n	16c32 <__eqdf2+0x36>
   16c4a:	2001      	movs	r0, #1
   16c4c:	42be      	cmp	r6, r7
   16c4e:	d1f0      	bne.n	16c32 <__eqdf2+0x36>
   16c50:	45c8      	cmp	r8, r9
   16c52:	d1ee      	bne.n	16c32 <__eqdf2+0x36>
   16c54:	4551      	cmp	r1, sl
   16c56:	d007      	beq.n	16c68 <__eqdf2+0x6c>
   16c58:	2d00      	cmp	r5, #0
   16c5a:	d1ea      	bne.n	16c32 <__eqdf2+0x36>
   16c5c:	4663      	mov	r3, ip
   16c5e:	431e      	orrs	r6, r3
   16c60:	0030      	movs	r0, r6
   16c62:	1e46      	subs	r6, r0, #1
   16c64:	41b0      	sbcs	r0, r6
   16c66:	e7e4      	b.n	16c32 <__eqdf2+0x36>
   16c68:	2000      	movs	r0, #0
   16c6a:	e7e2      	b.n	16c32 <__eqdf2+0x36>
   16c6c:	000007ff 	.word	0x000007ff

00016c70 <__gedf2>:
   16c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c72:	4645      	mov	r5, r8
   16c74:	46de      	mov	lr, fp
   16c76:	4657      	mov	r7, sl
   16c78:	464e      	mov	r6, r9
   16c7a:	b5e0      	push	{r5, r6, r7, lr}
   16c7c:	031f      	lsls	r7, r3, #12
   16c7e:	0b3d      	lsrs	r5, r7, #12
   16c80:	4f2c      	ldr	r7, [pc, #176]	; (16d34 <__gedf2+0xc4>)
   16c82:	030e      	lsls	r6, r1, #12
   16c84:	004c      	lsls	r4, r1, #1
   16c86:	46ab      	mov	fp, r5
   16c88:	005d      	lsls	r5, r3, #1
   16c8a:	4684      	mov	ip, r0
   16c8c:	0b36      	lsrs	r6, r6, #12
   16c8e:	0d64      	lsrs	r4, r4, #21
   16c90:	0fc9      	lsrs	r1, r1, #31
   16c92:	4690      	mov	r8, r2
   16c94:	0d6d      	lsrs	r5, r5, #21
   16c96:	0fdb      	lsrs	r3, r3, #31
   16c98:	42bc      	cmp	r4, r7
   16c9a:	d02a      	beq.n	16cf2 <__gedf2+0x82>
   16c9c:	4f25      	ldr	r7, [pc, #148]	; (16d34 <__gedf2+0xc4>)
   16c9e:	42bd      	cmp	r5, r7
   16ca0:	d02d      	beq.n	16cfe <__gedf2+0x8e>
   16ca2:	2c00      	cmp	r4, #0
   16ca4:	d10f      	bne.n	16cc6 <__gedf2+0x56>
   16ca6:	4330      	orrs	r0, r6
   16ca8:	0007      	movs	r7, r0
   16caa:	4681      	mov	r9, r0
   16cac:	4278      	negs	r0, r7
   16cae:	4178      	adcs	r0, r7
   16cb0:	b2c0      	uxtb	r0, r0
   16cb2:	2d00      	cmp	r5, #0
   16cb4:	d117      	bne.n	16ce6 <__gedf2+0x76>
   16cb6:	465f      	mov	r7, fp
   16cb8:	433a      	orrs	r2, r7
   16cba:	d114      	bne.n	16ce6 <__gedf2+0x76>
   16cbc:	464b      	mov	r3, r9
   16cbe:	2000      	movs	r0, #0
   16cc0:	2b00      	cmp	r3, #0
   16cc2:	d00a      	beq.n	16cda <__gedf2+0x6a>
   16cc4:	e006      	b.n	16cd4 <__gedf2+0x64>
   16cc6:	2d00      	cmp	r5, #0
   16cc8:	d102      	bne.n	16cd0 <__gedf2+0x60>
   16cca:	4658      	mov	r0, fp
   16ccc:	4302      	orrs	r2, r0
   16cce:	d001      	beq.n	16cd4 <__gedf2+0x64>
   16cd0:	4299      	cmp	r1, r3
   16cd2:	d018      	beq.n	16d06 <__gedf2+0x96>
   16cd4:	4248      	negs	r0, r1
   16cd6:	2101      	movs	r1, #1
   16cd8:	4308      	orrs	r0, r1
   16cda:	bc3c      	pop	{r2, r3, r4, r5}
   16cdc:	4690      	mov	r8, r2
   16cde:	4699      	mov	r9, r3
   16ce0:	46a2      	mov	sl, r4
   16ce2:	46ab      	mov	fp, r5
   16ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ce6:	2800      	cmp	r0, #0
   16ce8:	d0f2      	beq.n	16cd0 <__gedf2+0x60>
   16cea:	2001      	movs	r0, #1
   16cec:	3b01      	subs	r3, #1
   16cee:	4318      	orrs	r0, r3
   16cf0:	e7f3      	b.n	16cda <__gedf2+0x6a>
   16cf2:	0037      	movs	r7, r6
   16cf4:	4307      	orrs	r7, r0
   16cf6:	d0d1      	beq.n	16c9c <__gedf2+0x2c>
   16cf8:	2002      	movs	r0, #2
   16cfa:	4240      	negs	r0, r0
   16cfc:	e7ed      	b.n	16cda <__gedf2+0x6a>
   16cfe:	465f      	mov	r7, fp
   16d00:	4317      	orrs	r7, r2
   16d02:	d0ce      	beq.n	16ca2 <__gedf2+0x32>
   16d04:	e7f8      	b.n	16cf8 <__gedf2+0x88>
   16d06:	42ac      	cmp	r4, r5
   16d08:	dce4      	bgt.n	16cd4 <__gedf2+0x64>
   16d0a:	da03      	bge.n	16d14 <__gedf2+0xa4>
   16d0c:	1e48      	subs	r0, r1, #1
   16d0e:	2101      	movs	r1, #1
   16d10:	4308      	orrs	r0, r1
   16d12:	e7e2      	b.n	16cda <__gedf2+0x6a>
   16d14:	455e      	cmp	r6, fp
   16d16:	d8dd      	bhi.n	16cd4 <__gedf2+0x64>
   16d18:	d006      	beq.n	16d28 <__gedf2+0xb8>
   16d1a:	2000      	movs	r0, #0
   16d1c:	455e      	cmp	r6, fp
   16d1e:	d2dc      	bcs.n	16cda <__gedf2+0x6a>
   16d20:	2301      	movs	r3, #1
   16d22:	1e48      	subs	r0, r1, #1
   16d24:	4318      	orrs	r0, r3
   16d26:	e7d8      	b.n	16cda <__gedf2+0x6a>
   16d28:	45c4      	cmp	ip, r8
   16d2a:	d8d3      	bhi.n	16cd4 <__gedf2+0x64>
   16d2c:	2000      	movs	r0, #0
   16d2e:	45c4      	cmp	ip, r8
   16d30:	d3f6      	bcc.n	16d20 <__gedf2+0xb0>
   16d32:	e7d2      	b.n	16cda <__gedf2+0x6a>
   16d34:	000007ff 	.word	0x000007ff

00016d38 <__ledf2>:
   16d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d3a:	464e      	mov	r6, r9
   16d3c:	4645      	mov	r5, r8
   16d3e:	46de      	mov	lr, fp
   16d40:	4657      	mov	r7, sl
   16d42:	005c      	lsls	r4, r3, #1
   16d44:	b5e0      	push	{r5, r6, r7, lr}
   16d46:	031f      	lsls	r7, r3, #12
   16d48:	0fdb      	lsrs	r3, r3, #31
   16d4a:	4699      	mov	r9, r3
   16d4c:	4b2a      	ldr	r3, [pc, #168]	; (16df8 <__ledf2+0xc0>)
   16d4e:	030e      	lsls	r6, r1, #12
   16d50:	004d      	lsls	r5, r1, #1
   16d52:	0fc9      	lsrs	r1, r1, #31
   16d54:	4684      	mov	ip, r0
   16d56:	0b36      	lsrs	r6, r6, #12
   16d58:	0d6d      	lsrs	r5, r5, #21
   16d5a:	468b      	mov	fp, r1
   16d5c:	4690      	mov	r8, r2
   16d5e:	0b3f      	lsrs	r7, r7, #12
   16d60:	0d64      	lsrs	r4, r4, #21
   16d62:	429d      	cmp	r5, r3
   16d64:	d020      	beq.n	16da8 <__ledf2+0x70>
   16d66:	4b24      	ldr	r3, [pc, #144]	; (16df8 <__ledf2+0xc0>)
   16d68:	429c      	cmp	r4, r3
   16d6a:	d022      	beq.n	16db2 <__ledf2+0x7a>
   16d6c:	2d00      	cmp	r5, #0
   16d6e:	d112      	bne.n	16d96 <__ledf2+0x5e>
   16d70:	4330      	orrs	r0, r6
   16d72:	4243      	negs	r3, r0
   16d74:	4143      	adcs	r3, r0
   16d76:	b2db      	uxtb	r3, r3
   16d78:	2c00      	cmp	r4, #0
   16d7a:	d01f      	beq.n	16dbc <__ledf2+0x84>
   16d7c:	2b00      	cmp	r3, #0
   16d7e:	d00c      	beq.n	16d9a <__ledf2+0x62>
   16d80:	464b      	mov	r3, r9
   16d82:	2001      	movs	r0, #1
   16d84:	3b01      	subs	r3, #1
   16d86:	4303      	orrs	r3, r0
   16d88:	0018      	movs	r0, r3
   16d8a:	bc3c      	pop	{r2, r3, r4, r5}
   16d8c:	4690      	mov	r8, r2
   16d8e:	4699      	mov	r9, r3
   16d90:	46a2      	mov	sl, r4
   16d92:	46ab      	mov	fp, r5
   16d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d96:	2c00      	cmp	r4, #0
   16d98:	d016      	beq.n	16dc8 <__ledf2+0x90>
   16d9a:	45cb      	cmp	fp, r9
   16d9c:	d017      	beq.n	16dce <__ledf2+0x96>
   16d9e:	465b      	mov	r3, fp
   16da0:	4259      	negs	r1, r3
   16da2:	2301      	movs	r3, #1
   16da4:	430b      	orrs	r3, r1
   16da6:	e7ef      	b.n	16d88 <__ledf2+0x50>
   16da8:	0031      	movs	r1, r6
   16daa:	2302      	movs	r3, #2
   16dac:	4301      	orrs	r1, r0
   16dae:	d1eb      	bne.n	16d88 <__ledf2+0x50>
   16db0:	e7d9      	b.n	16d66 <__ledf2+0x2e>
   16db2:	0039      	movs	r1, r7
   16db4:	2302      	movs	r3, #2
   16db6:	4311      	orrs	r1, r2
   16db8:	d1e6      	bne.n	16d88 <__ledf2+0x50>
   16dba:	e7d7      	b.n	16d6c <__ledf2+0x34>
   16dbc:	433a      	orrs	r2, r7
   16dbe:	d1dd      	bne.n	16d7c <__ledf2+0x44>
   16dc0:	2300      	movs	r3, #0
   16dc2:	2800      	cmp	r0, #0
   16dc4:	d0e0      	beq.n	16d88 <__ledf2+0x50>
   16dc6:	e7ea      	b.n	16d9e <__ledf2+0x66>
   16dc8:	433a      	orrs	r2, r7
   16dca:	d1e6      	bne.n	16d9a <__ledf2+0x62>
   16dcc:	e7e7      	b.n	16d9e <__ledf2+0x66>
   16dce:	42a5      	cmp	r5, r4
   16dd0:	dce5      	bgt.n	16d9e <__ledf2+0x66>
   16dd2:	db05      	blt.n	16de0 <__ledf2+0xa8>
   16dd4:	42be      	cmp	r6, r7
   16dd6:	d8e2      	bhi.n	16d9e <__ledf2+0x66>
   16dd8:	d007      	beq.n	16dea <__ledf2+0xb2>
   16dda:	2300      	movs	r3, #0
   16ddc:	42be      	cmp	r6, r7
   16dde:	d2d3      	bcs.n	16d88 <__ledf2+0x50>
   16de0:	4659      	mov	r1, fp
   16de2:	2301      	movs	r3, #1
   16de4:	3901      	subs	r1, #1
   16de6:	430b      	orrs	r3, r1
   16de8:	e7ce      	b.n	16d88 <__ledf2+0x50>
   16dea:	45c4      	cmp	ip, r8
   16dec:	d8d7      	bhi.n	16d9e <__ledf2+0x66>
   16dee:	2300      	movs	r3, #0
   16df0:	45c4      	cmp	ip, r8
   16df2:	d3f5      	bcc.n	16de0 <__ledf2+0xa8>
   16df4:	e7c8      	b.n	16d88 <__ledf2+0x50>
   16df6:	46c0      	nop			; (mov r8, r8)
   16df8:	000007ff 	.word	0x000007ff

00016dfc <__aeabi_dmul>:
   16dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16dfe:	4657      	mov	r7, sl
   16e00:	4645      	mov	r5, r8
   16e02:	46de      	mov	lr, fp
   16e04:	464e      	mov	r6, r9
   16e06:	b5e0      	push	{r5, r6, r7, lr}
   16e08:	030c      	lsls	r4, r1, #12
   16e0a:	4698      	mov	r8, r3
   16e0c:	004e      	lsls	r6, r1, #1
   16e0e:	0b23      	lsrs	r3, r4, #12
   16e10:	b087      	sub	sp, #28
   16e12:	0007      	movs	r7, r0
   16e14:	4692      	mov	sl, r2
   16e16:	469b      	mov	fp, r3
   16e18:	0d76      	lsrs	r6, r6, #21
   16e1a:	0fcd      	lsrs	r5, r1, #31
   16e1c:	2e00      	cmp	r6, #0
   16e1e:	d06b      	beq.n	16ef8 <__aeabi_dmul+0xfc>
   16e20:	4b6d      	ldr	r3, [pc, #436]	; (16fd8 <__aeabi_dmul+0x1dc>)
   16e22:	429e      	cmp	r6, r3
   16e24:	d035      	beq.n	16e92 <__aeabi_dmul+0x96>
   16e26:	2480      	movs	r4, #128	; 0x80
   16e28:	465b      	mov	r3, fp
   16e2a:	0f42      	lsrs	r2, r0, #29
   16e2c:	0424      	lsls	r4, r4, #16
   16e2e:	00db      	lsls	r3, r3, #3
   16e30:	4314      	orrs	r4, r2
   16e32:	431c      	orrs	r4, r3
   16e34:	00c3      	lsls	r3, r0, #3
   16e36:	4699      	mov	r9, r3
   16e38:	4b68      	ldr	r3, [pc, #416]	; (16fdc <__aeabi_dmul+0x1e0>)
   16e3a:	46a3      	mov	fp, r4
   16e3c:	469c      	mov	ip, r3
   16e3e:	2300      	movs	r3, #0
   16e40:	2700      	movs	r7, #0
   16e42:	4466      	add	r6, ip
   16e44:	9302      	str	r3, [sp, #8]
   16e46:	4643      	mov	r3, r8
   16e48:	031c      	lsls	r4, r3, #12
   16e4a:	005a      	lsls	r2, r3, #1
   16e4c:	0fdb      	lsrs	r3, r3, #31
   16e4e:	4650      	mov	r0, sl
   16e50:	0b24      	lsrs	r4, r4, #12
   16e52:	0d52      	lsrs	r2, r2, #21
   16e54:	4698      	mov	r8, r3
   16e56:	d100      	bne.n	16e5a <__aeabi_dmul+0x5e>
   16e58:	e076      	b.n	16f48 <__aeabi_dmul+0x14c>
   16e5a:	4b5f      	ldr	r3, [pc, #380]	; (16fd8 <__aeabi_dmul+0x1dc>)
   16e5c:	429a      	cmp	r2, r3
   16e5e:	d06d      	beq.n	16f3c <__aeabi_dmul+0x140>
   16e60:	2380      	movs	r3, #128	; 0x80
   16e62:	0f41      	lsrs	r1, r0, #29
   16e64:	041b      	lsls	r3, r3, #16
   16e66:	430b      	orrs	r3, r1
   16e68:	495c      	ldr	r1, [pc, #368]	; (16fdc <__aeabi_dmul+0x1e0>)
   16e6a:	00e4      	lsls	r4, r4, #3
   16e6c:	468c      	mov	ip, r1
   16e6e:	431c      	orrs	r4, r3
   16e70:	00c3      	lsls	r3, r0, #3
   16e72:	2000      	movs	r0, #0
   16e74:	4462      	add	r2, ip
   16e76:	4641      	mov	r1, r8
   16e78:	18b6      	adds	r6, r6, r2
   16e7a:	4069      	eors	r1, r5
   16e7c:	1c72      	adds	r2, r6, #1
   16e7e:	9101      	str	r1, [sp, #4]
   16e80:	4694      	mov	ip, r2
   16e82:	4307      	orrs	r7, r0
   16e84:	2f0f      	cmp	r7, #15
   16e86:	d900      	bls.n	16e8a <__aeabi_dmul+0x8e>
   16e88:	e0b0      	b.n	16fec <__aeabi_dmul+0x1f0>
   16e8a:	4a55      	ldr	r2, [pc, #340]	; (16fe0 <__aeabi_dmul+0x1e4>)
   16e8c:	00bf      	lsls	r7, r7, #2
   16e8e:	59d2      	ldr	r2, [r2, r7]
   16e90:	4697      	mov	pc, r2
   16e92:	465b      	mov	r3, fp
   16e94:	4303      	orrs	r3, r0
   16e96:	4699      	mov	r9, r3
   16e98:	d000      	beq.n	16e9c <__aeabi_dmul+0xa0>
   16e9a:	e087      	b.n	16fac <__aeabi_dmul+0x1b0>
   16e9c:	2300      	movs	r3, #0
   16e9e:	469b      	mov	fp, r3
   16ea0:	3302      	adds	r3, #2
   16ea2:	2708      	movs	r7, #8
   16ea4:	9302      	str	r3, [sp, #8]
   16ea6:	e7ce      	b.n	16e46 <__aeabi_dmul+0x4a>
   16ea8:	4642      	mov	r2, r8
   16eaa:	9201      	str	r2, [sp, #4]
   16eac:	2802      	cmp	r0, #2
   16eae:	d067      	beq.n	16f80 <__aeabi_dmul+0x184>
   16eb0:	2803      	cmp	r0, #3
   16eb2:	d100      	bne.n	16eb6 <__aeabi_dmul+0xba>
   16eb4:	e20e      	b.n	172d4 <__aeabi_dmul+0x4d8>
   16eb6:	2801      	cmp	r0, #1
   16eb8:	d000      	beq.n	16ebc <__aeabi_dmul+0xc0>
   16eba:	e162      	b.n	17182 <__aeabi_dmul+0x386>
   16ebc:	2300      	movs	r3, #0
   16ebe:	2400      	movs	r4, #0
   16ec0:	2200      	movs	r2, #0
   16ec2:	4699      	mov	r9, r3
   16ec4:	9901      	ldr	r1, [sp, #4]
   16ec6:	4001      	ands	r1, r0
   16ec8:	b2cd      	uxtb	r5, r1
   16eca:	2100      	movs	r1, #0
   16ecc:	0312      	lsls	r2, r2, #12
   16ece:	0d0b      	lsrs	r3, r1, #20
   16ed0:	0b12      	lsrs	r2, r2, #12
   16ed2:	051b      	lsls	r3, r3, #20
   16ed4:	4313      	orrs	r3, r2
   16ed6:	4a43      	ldr	r2, [pc, #268]	; (16fe4 <__aeabi_dmul+0x1e8>)
   16ed8:	0524      	lsls	r4, r4, #20
   16eda:	4013      	ands	r3, r2
   16edc:	431c      	orrs	r4, r3
   16ede:	0064      	lsls	r4, r4, #1
   16ee0:	07ed      	lsls	r5, r5, #31
   16ee2:	0864      	lsrs	r4, r4, #1
   16ee4:	432c      	orrs	r4, r5
   16ee6:	4648      	mov	r0, r9
   16ee8:	0021      	movs	r1, r4
   16eea:	b007      	add	sp, #28
   16eec:	bc3c      	pop	{r2, r3, r4, r5}
   16eee:	4690      	mov	r8, r2
   16ef0:	4699      	mov	r9, r3
   16ef2:	46a2      	mov	sl, r4
   16ef4:	46ab      	mov	fp, r5
   16ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ef8:	4303      	orrs	r3, r0
   16efa:	4699      	mov	r9, r3
   16efc:	d04f      	beq.n	16f9e <__aeabi_dmul+0x1a2>
   16efe:	465b      	mov	r3, fp
   16f00:	2b00      	cmp	r3, #0
   16f02:	d100      	bne.n	16f06 <__aeabi_dmul+0x10a>
   16f04:	e189      	b.n	1721a <__aeabi_dmul+0x41e>
   16f06:	4658      	mov	r0, fp
   16f08:	f000 fe2e 	bl	17b68 <__clzsi2>
   16f0c:	0003      	movs	r3, r0
   16f0e:	3b0b      	subs	r3, #11
   16f10:	2b1c      	cmp	r3, #28
   16f12:	dd00      	ble.n	16f16 <__aeabi_dmul+0x11a>
   16f14:	e17a      	b.n	1720c <__aeabi_dmul+0x410>
   16f16:	221d      	movs	r2, #29
   16f18:	1ad3      	subs	r3, r2, r3
   16f1a:	003a      	movs	r2, r7
   16f1c:	0001      	movs	r1, r0
   16f1e:	465c      	mov	r4, fp
   16f20:	40da      	lsrs	r2, r3
   16f22:	3908      	subs	r1, #8
   16f24:	408c      	lsls	r4, r1
   16f26:	0013      	movs	r3, r2
   16f28:	408f      	lsls	r7, r1
   16f2a:	4323      	orrs	r3, r4
   16f2c:	469b      	mov	fp, r3
   16f2e:	46b9      	mov	r9, r7
   16f30:	2300      	movs	r3, #0
   16f32:	4e2d      	ldr	r6, [pc, #180]	; (16fe8 <__aeabi_dmul+0x1ec>)
   16f34:	2700      	movs	r7, #0
   16f36:	1a36      	subs	r6, r6, r0
   16f38:	9302      	str	r3, [sp, #8]
   16f3a:	e784      	b.n	16e46 <__aeabi_dmul+0x4a>
   16f3c:	4653      	mov	r3, sl
   16f3e:	4323      	orrs	r3, r4
   16f40:	d12a      	bne.n	16f98 <__aeabi_dmul+0x19c>
   16f42:	2400      	movs	r4, #0
   16f44:	2002      	movs	r0, #2
   16f46:	e796      	b.n	16e76 <__aeabi_dmul+0x7a>
   16f48:	4653      	mov	r3, sl
   16f4a:	4323      	orrs	r3, r4
   16f4c:	d020      	beq.n	16f90 <__aeabi_dmul+0x194>
   16f4e:	2c00      	cmp	r4, #0
   16f50:	d100      	bne.n	16f54 <__aeabi_dmul+0x158>
   16f52:	e157      	b.n	17204 <__aeabi_dmul+0x408>
   16f54:	0020      	movs	r0, r4
   16f56:	f000 fe07 	bl	17b68 <__clzsi2>
   16f5a:	0003      	movs	r3, r0
   16f5c:	3b0b      	subs	r3, #11
   16f5e:	2b1c      	cmp	r3, #28
   16f60:	dd00      	ble.n	16f64 <__aeabi_dmul+0x168>
   16f62:	e149      	b.n	171f8 <__aeabi_dmul+0x3fc>
   16f64:	211d      	movs	r1, #29
   16f66:	1acb      	subs	r3, r1, r3
   16f68:	4651      	mov	r1, sl
   16f6a:	0002      	movs	r2, r0
   16f6c:	40d9      	lsrs	r1, r3
   16f6e:	4653      	mov	r3, sl
   16f70:	3a08      	subs	r2, #8
   16f72:	4094      	lsls	r4, r2
   16f74:	4093      	lsls	r3, r2
   16f76:	430c      	orrs	r4, r1
   16f78:	4a1b      	ldr	r2, [pc, #108]	; (16fe8 <__aeabi_dmul+0x1ec>)
   16f7a:	1a12      	subs	r2, r2, r0
   16f7c:	2000      	movs	r0, #0
   16f7e:	e77a      	b.n	16e76 <__aeabi_dmul+0x7a>
   16f80:	2501      	movs	r5, #1
   16f82:	9b01      	ldr	r3, [sp, #4]
   16f84:	4c14      	ldr	r4, [pc, #80]	; (16fd8 <__aeabi_dmul+0x1dc>)
   16f86:	401d      	ands	r5, r3
   16f88:	2300      	movs	r3, #0
   16f8a:	2200      	movs	r2, #0
   16f8c:	4699      	mov	r9, r3
   16f8e:	e79c      	b.n	16eca <__aeabi_dmul+0xce>
   16f90:	2400      	movs	r4, #0
   16f92:	2200      	movs	r2, #0
   16f94:	2001      	movs	r0, #1
   16f96:	e76e      	b.n	16e76 <__aeabi_dmul+0x7a>
   16f98:	4653      	mov	r3, sl
   16f9a:	2003      	movs	r0, #3
   16f9c:	e76b      	b.n	16e76 <__aeabi_dmul+0x7a>
   16f9e:	2300      	movs	r3, #0
   16fa0:	469b      	mov	fp, r3
   16fa2:	3301      	adds	r3, #1
   16fa4:	2704      	movs	r7, #4
   16fa6:	2600      	movs	r6, #0
   16fa8:	9302      	str	r3, [sp, #8]
   16faa:	e74c      	b.n	16e46 <__aeabi_dmul+0x4a>
   16fac:	2303      	movs	r3, #3
   16fae:	4681      	mov	r9, r0
   16fb0:	270c      	movs	r7, #12
   16fb2:	9302      	str	r3, [sp, #8]
   16fb4:	e747      	b.n	16e46 <__aeabi_dmul+0x4a>
   16fb6:	2280      	movs	r2, #128	; 0x80
   16fb8:	2300      	movs	r3, #0
   16fba:	2500      	movs	r5, #0
   16fbc:	0312      	lsls	r2, r2, #12
   16fbe:	4699      	mov	r9, r3
   16fc0:	4c05      	ldr	r4, [pc, #20]	; (16fd8 <__aeabi_dmul+0x1dc>)
   16fc2:	e782      	b.n	16eca <__aeabi_dmul+0xce>
   16fc4:	465c      	mov	r4, fp
   16fc6:	464b      	mov	r3, r9
   16fc8:	9802      	ldr	r0, [sp, #8]
   16fca:	e76f      	b.n	16eac <__aeabi_dmul+0xb0>
   16fcc:	465c      	mov	r4, fp
   16fce:	464b      	mov	r3, r9
   16fd0:	9501      	str	r5, [sp, #4]
   16fd2:	9802      	ldr	r0, [sp, #8]
   16fd4:	e76a      	b.n	16eac <__aeabi_dmul+0xb0>
   16fd6:	46c0      	nop			; (mov r8, r8)
   16fd8:	000007ff 	.word	0x000007ff
   16fdc:	fffffc01 	.word	0xfffffc01
   16fe0:	00019b80 	.word	0x00019b80
   16fe4:	800fffff 	.word	0x800fffff
   16fe8:	fffffc0d 	.word	0xfffffc0d
   16fec:	464a      	mov	r2, r9
   16fee:	4649      	mov	r1, r9
   16ff0:	0c17      	lsrs	r7, r2, #16
   16ff2:	0c1a      	lsrs	r2, r3, #16
   16ff4:	041b      	lsls	r3, r3, #16
   16ff6:	0c1b      	lsrs	r3, r3, #16
   16ff8:	0408      	lsls	r0, r1, #16
   16ffa:	0019      	movs	r1, r3
   16ffc:	0c00      	lsrs	r0, r0, #16
   16ffe:	4341      	muls	r1, r0
   17000:	0015      	movs	r5, r2
   17002:	4688      	mov	r8, r1
   17004:	0019      	movs	r1, r3
   17006:	437d      	muls	r5, r7
   17008:	4379      	muls	r1, r7
   1700a:	9503      	str	r5, [sp, #12]
   1700c:	4689      	mov	r9, r1
   1700e:	0029      	movs	r1, r5
   17010:	0015      	movs	r5, r2
   17012:	4345      	muls	r5, r0
   17014:	444d      	add	r5, r9
   17016:	9502      	str	r5, [sp, #8]
   17018:	4645      	mov	r5, r8
   1701a:	0c2d      	lsrs	r5, r5, #16
   1701c:	46aa      	mov	sl, r5
   1701e:	9d02      	ldr	r5, [sp, #8]
   17020:	4455      	add	r5, sl
   17022:	45a9      	cmp	r9, r5
   17024:	d906      	bls.n	17034 <__aeabi_dmul+0x238>
   17026:	468a      	mov	sl, r1
   17028:	2180      	movs	r1, #128	; 0x80
   1702a:	0249      	lsls	r1, r1, #9
   1702c:	4689      	mov	r9, r1
   1702e:	44ca      	add	sl, r9
   17030:	4651      	mov	r1, sl
   17032:	9103      	str	r1, [sp, #12]
   17034:	0c29      	lsrs	r1, r5, #16
   17036:	9104      	str	r1, [sp, #16]
   17038:	4641      	mov	r1, r8
   1703a:	0409      	lsls	r1, r1, #16
   1703c:	042d      	lsls	r5, r5, #16
   1703e:	0c09      	lsrs	r1, r1, #16
   17040:	4688      	mov	r8, r1
   17042:	0029      	movs	r1, r5
   17044:	0c25      	lsrs	r5, r4, #16
   17046:	0424      	lsls	r4, r4, #16
   17048:	4441      	add	r1, r8
   1704a:	0c24      	lsrs	r4, r4, #16
   1704c:	9105      	str	r1, [sp, #20]
   1704e:	0021      	movs	r1, r4
   17050:	4341      	muls	r1, r0
   17052:	4688      	mov	r8, r1
   17054:	0021      	movs	r1, r4
   17056:	4379      	muls	r1, r7
   17058:	468a      	mov	sl, r1
   1705a:	4368      	muls	r0, r5
   1705c:	4641      	mov	r1, r8
   1705e:	4450      	add	r0, sl
   17060:	4681      	mov	r9, r0
   17062:	0c08      	lsrs	r0, r1, #16
   17064:	4448      	add	r0, r9
   17066:	436f      	muls	r7, r5
   17068:	4582      	cmp	sl, r0
   1706a:	d903      	bls.n	17074 <__aeabi_dmul+0x278>
   1706c:	2180      	movs	r1, #128	; 0x80
   1706e:	0249      	lsls	r1, r1, #9
   17070:	4689      	mov	r9, r1
   17072:	444f      	add	r7, r9
   17074:	0c01      	lsrs	r1, r0, #16
   17076:	4689      	mov	r9, r1
   17078:	0039      	movs	r1, r7
   1707a:	4449      	add	r1, r9
   1707c:	9102      	str	r1, [sp, #8]
   1707e:	4641      	mov	r1, r8
   17080:	040f      	lsls	r7, r1, #16
   17082:	9904      	ldr	r1, [sp, #16]
   17084:	0c3f      	lsrs	r7, r7, #16
   17086:	4688      	mov	r8, r1
   17088:	0400      	lsls	r0, r0, #16
   1708a:	19c0      	adds	r0, r0, r7
   1708c:	4480      	add	r8, r0
   1708e:	4641      	mov	r1, r8
   17090:	9104      	str	r1, [sp, #16]
   17092:	4659      	mov	r1, fp
   17094:	0c0f      	lsrs	r7, r1, #16
   17096:	0409      	lsls	r1, r1, #16
   17098:	0c09      	lsrs	r1, r1, #16
   1709a:	4688      	mov	r8, r1
   1709c:	4359      	muls	r1, r3
   1709e:	468a      	mov	sl, r1
   170a0:	0039      	movs	r1, r7
   170a2:	4351      	muls	r1, r2
   170a4:	4689      	mov	r9, r1
   170a6:	4641      	mov	r1, r8
   170a8:	434a      	muls	r2, r1
   170aa:	4651      	mov	r1, sl
   170ac:	0c09      	lsrs	r1, r1, #16
   170ae:	468b      	mov	fp, r1
   170b0:	437b      	muls	r3, r7
   170b2:	18d2      	adds	r2, r2, r3
   170b4:	445a      	add	r2, fp
   170b6:	4293      	cmp	r3, r2
   170b8:	d903      	bls.n	170c2 <__aeabi_dmul+0x2c6>
   170ba:	2380      	movs	r3, #128	; 0x80
   170bc:	025b      	lsls	r3, r3, #9
   170be:	469b      	mov	fp, r3
   170c0:	44d9      	add	r9, fp
   170c2:	4651      	mov	r1, sl
   170c4:	0409      	lsls	r1, r1, #16
   170c6:	0c09      	lsrs	r1, r1, #16
   170c8:	468a      	mov	sl, r1
   170ca:	4641      	mov	r1, r8
   170cc:	4361      	muls	r1, r4
   170ce:	437c      	muls	r4, r7
   170d0:	0c13      	lsrs	r3, r2, #16
   170d2:	0412      	lsls	r2, r2, #16
   170d4:	444b      	add	r3, r9
   170d6:	4452      	add	r2, sl
   170d8:	46a1      	mov	r9, r4
   170da:	468a      	mov	sl, r1
   170dc:	003c      	movs	r4, r7
   170de:	4641      	mov	r1, r8
   170e0:	436c      	muls	r4, r5
   170e2:	434d      	muls	r5, r1
   170e4:	4651      	mov	r1, sl
   170e6:	444d      	add	r5, r9
   170e8:	0c0f      	lsrs	r7, r1, #16
   170ea:	197d      	adds	r5, r7, r5
   170ec:	45a9      	cmp	r9, r5
   170ee:	d903      	bls.n	170f8 <__aeabi_dmul+0x2fc>
   170f0:	2180      	movs	r1, #128	; 0x80
   170f2:	0249      	lsls	r1, r1, #9
   170f4:	4688      	mov	r8, r1
   170f6:	4444      	add	r4, r8
   170f8:	9f04      	ldr	r7, [sp, #16]
   170fa:	9903      	ldr	r1, [sp, #12]
   170fc:	46b8      	mov	r8, r7
   170fe:	4441      	add	r1, r8
   17100:	468b      	mov	fp, r1
   17102:	4583      	cmp	fp, r0
   17104:	4180      	sbcs	r0, r0
   17106:	4241      	negs	r1, r0
   17108:	4688      	mov	r8, r1
   1710a:	4651      	mov	r1, sl
   1710c:	0408      	lsls	r0, r1, #16
   1710e:	042f      	lsls	r7, r5, #16
   17110:	0c00      	lsrs	r0, r0, #16
   17112:	183f      	adds	r7, r7, r0
   17114:	4658      	mov	r0, fp
   17116:	9902      	ldr	r1, [sp, #8]
   17118:	1810      	adds	r0, r2, r0
   1711a:	4689      	mov	r9, r1
   1711c:	4290      	cmp	r0, r2
   1711e:	4192      	sbcs	r2, r2
   17120:	444f      	add	r7, r9
   17122:	46ba      	mov	sl, r7
   17124:	4252      	negs	r2, r2
   17126:	4699      	mov	r9, r3
   17128:	4693      	mov	fp, r2
   1712a:	44c2      	add	sl, r8
   1712c:	44d1      	add	r9, sl
   1712e:	44cb      	add	fp, r9
   17130:	428f      	cmp	r7, r1
   17132:	41bf      	sbcs	r7, r7
   17134:	45c2      	cmp	sl, r8
   17136:	4189      	sbcs	r1, r1
   17138:	4599      	cmp	r9, r3
   1713a:	419b      	sbcs	r3, r3
   1713c:	4593      	cmp	fp, r2
   1713e:	4192      	sbcs	r2, r2
   17140:	427f      	negs	r7, r7
   17142:	4249      	negs	r1, r1
   17144:	0c2d      	lsrs	r5, r5, #16
   17146:	4252      	negs	r2, r2
   17148:	430f      	orrs	r7, r1
   1714a:	425b      	negs	r3, r3
   1714c:	4313      	orrs	r3, r2
   1714e:	197f      	adds	r7, r7, r5
   17150:	18ff      	adds	r7, r7, r3
   17152:	465b      	mov	r3, fp
   17154:	193c      	adds	r4, r7, r4
   17156:	0ddb      	lsrs	r3, r3, #23
   17158:	9a05      	ldr	r2, [sp, #20]
   1715a:	0264      	lsls	r4, r4, #9
   1715c:	431c      	orrs	r4, r3
   1715e:	0243      	lsls	r3, r0, #9
   17160:	4313      	orrs	r3, r2
   17162:	1e5d      	subs	r5, r3, #1
   17164:	41ab      	sbcs	r3, r5
   17166:	465a      	mov	r2, fp
   17168:	0dc0      	lsrs	r0, r0, #23
   1716a:	4303      	orrs	r3, r0
   1716c:	0252      	lsls	r2, r2, #9
   1716e:	4313      	orrs	r3, r2
   17170:	01e2      	lsls	r2, r4, #7
   17172:	d556      	bpl.n	17222 <__aeabi_dmul+0x426>
   17174:	2001      	movs	r0, #1
   17176:	085a      	lsrs	r2, r3, #1
   17178:	4003      	ands	r3, r0
   1717a:	4313      	orrs	r3, r2
   1717c:	07e2      	lsls	r2, r4, #31
   1717e:	4313      	orrs	r3, r2
   17180:	0864      	lsrs	r4, r4, #1
   17182:	485a      	ldr	r0, [pc, #360]	; (172ec <__aeabi_dmul+0x4f0>)
   17184:	4460      	add	r0, ip
   17186:	2800      	cmp	r0, #0
   17188:	dd4d      	ble.n	17226 <__aeabi_dmul+0x42a>
   1718a:	075a      	lsls	r2, r3, #29
   1718c:	d009      	beq.n	171a2 <__aeabi_dmul+0x3a6>
   1718e:	220f      	movs	r2, #15
   17190:	401a      	ands	r2, r3
   17192:	2a04      	cmp	r2, #4
   17194:	d005      	beq.n	171a2 <__aeabi_dmul+0x3a6>
   17196:	1d1a      	adds	r2, r3, #4
   17198:	429a      	cmp	r2, r3
   1719a:	419b      	sbcs	r3, r3
   1719c:	425b      	negs	r3, r3
   1719e:	18e4      	adds	r4, r4, r3
   171a0:	0013      	movs	r3, r2
   171a2:	01e2      	lsls	r2, r4, #7
   171a4:	d504      	bpl.n	171b0 <__aeabi_dmul+0x3b4>
   171a6:	2080      	movs	r0, #128	; 0x80
   171a8:	4a51      	ldr	r2, [pc, #324]	; (172f0 <__aeabi_dmul+0x4f4>)
   171aa:	00c0      	lsls	r0, r0, #3
   171ac:	4014      	ands	r4, r2
   171ae:	4460      	add	r0, ip
   171b0:	4a50      	ldr	r2, [pc, #320]	; (172f4 <__aeabi_dmul+0x4f8>)
   171b2:	4290      	cmp	r0, r2
   171b4:	dd00      	ble.n	171b8 <__aeabi_dmul+0x3bc>
   171b6:	e6e3      	b.n	16f80 <__aeabi_dmul+0x184>
   171b8:	2501      	movs	r5, #1
   171ba:	08db      	lsrs	r3, r3, #3
   171bc:	0762      	lsls	r2, r4, #29
   171be:	431a      	orrs	r2, r3
   171c0:	0264      	lsls	r4, r4, #9
   171c2:	9b01      	ldr	r3, [sp, #4]
   171c4:	4691      	mov	r9, r2
   171c6:	0b22      	lsrs	r2, r4, #12
   171c8:	0544      	lsls	r4, r0, #21
   171ca:	0d64      	lsrs	r4, r4, #21
   171cc:	401d      	ands	r5, r3
   171ce:	e67c      	b.n	16eca <__aeabi_dmul+0xce>
   171d0:	2280      	movs	r2, #128	; 0x80
   171d2:	4659      	mov	r1, fp
   171d4:	0312      	lsls	r2, r2, #12
   171d6:	4211      	tst	r1, r2
   171d8:	d008      	beq.n	171ec <__aeabi_dmul+0x3f0>
   171da:	4214      	tst	r4, r2
   171dc:	d106      	bne.n	171ec <__aeabi_dmul+0x3f0>
   171de:	4322      	orrs	r2, r4
   171e0:	0312      	lsls	r2, r2, #12
   171e2:	0b12      	lsrs	r2, r2, #12
   171e4:	4645      	mov	r5, r8
   171e6:	4699      	mov	r9, r3
   171e8:	4c43      	ldr	r4, [pc, #268]	; (172f8 <__aeabi_dmul+0x4fc>)
   171ea:	e66e      	b.n	16eca <__aeabi_dmul+0xce>
   171ec:	465b      	mov	r3, fp
   171ee:	431a      	orrs	r2, r3
   171f0:	0312      	lsls	r2, r2, #12
   171f2:	0b12      	lsrs	r2, r2, #12
   171f4:	4c40      	ldr	r4, [pc, #256]	; (172f8 <__aeabi_dmul+0x4fc>)
   171f6:	e668      	b.n	16eca <__aeabi_dmul+0xce>
   171f8:	0003      	movs	r3, r0
   171fa:	4654      	mov	r4, sl
   171fc:	3b28      	subs	r3, #40	; 0x28
   171fe:	409c      	lsls	r4, r3
   17200:	2300      	movs	r3, #0
   17202:	e6b9      	b.n	16f78 <__aeabi_dmul+0x17c>
   17204:	f000 fcb0 	bl	17b68 <__clzsi2>
   17208:	3020      	adds	r0, #32
   1720a:	e6a6      	b.n	16f5a <__aeabi_dmul+0x15e>
   1720c:	0003      	movs	r3, r0
   1720e:	3b28      	subs	r3, #40	; 0x28
   17210:	409f      	lsls	r7, r3
   17212:	2300      	movs	r3, #0
   17214:	46bb      	mov	fp, r7
   17216:	4699      	mov	r9, r3
   17218:	e68a      	b.n	16f30 <__aeabi_dmul+0x134>
   1721a:	f000 fca5 	bl	17b68 <__clzsi2>
   1721e:	3020      	adds	r0, #32
   17220:	e674      	b.n	16f0c <__aeabi_dmul+0x110>
   17222:	46b4      	mov	ip, r6
   17224:	e7ad      	b.n	17182 <__aeabi_dmul+0x386>
   17226:	2501      	movs	r5, #1
   17228:	1a2a      	subs	r2, r5, r0
   1722a:	2a38      	cmp	r2, #56	; 0x38
   1722c:	dd06      	ble.n	1723c <__aeabi_dmul+0x440>
   1722e:	9b01      	ldr	r3, [sp, #4]
   17230:	2400      	movs	r4, #0
   17232:	401d      	ands	r5, r3
   17234:	2300      	movs	r3, #0
   17236:	2200      	movs	r2, #0
   17238:	4699      	mov	r9, r3
   1723a:	e646      	b.n	16eca <__aeabi_dmul+0xce>
   1723c:	2a1f      	cmp	r2, #31
   1723e:	dc21      	bgt.n	17284 <__aeabi_dmul+0x488>
   17240:	2520      	movs	r5, #32
   17242:	0020      	movs	r0, r4
   17244:	1aad      	subs	r5, r5, r2
   17246:	001e      	movs	r6, r3
   17248:	40ab      	lsls	r3, r5
   1724a:	40a8      	lsls	r0, r5
   1724c:	40d6      	lsrs	r6, r2
   1724e:	1e5d      	subs	r5, r3, #1
   17250:	41ab      	sbcs	r3, r5
   17252:	4330      	orrs	r0, r6
   17254:	4318      	orrs	r0, r3
   17256:	40d4      	lsrs	r4, r2
   17258:	0743      	lsls	r3, r0, #29
   1725a:	d009      	beq.n	17270 <__aeabi_dmul+0x474>
   1725c:	230f      	movs	r3, #15
   1725e:	4003      	ands	r3, r0
   17260:	2b04      	cmp	r3, #4
   17262:	d005      	beq.n	17270 <__aeabi_dmul+0x474>
   17264:	0003      	movs	r3, r0
   17266:	1d18      	adds	r0, r3, #4
   17268:	4298      	cmp	r0, r3
   1726a:	419b      	sbcs	r3, r3
   1726c:	425b      	negs	r3, r3
   1726e:	18e4      	adds	r4, r4, r3
   17270:	0223      	lsls	r3, r4, #8
   17272:	d521      	bpl.n	172b8 <__aeabi_dmul+0x4bc>
   17274:	2501      	movs	r5, #1
   17276:	9b01      	ldr	r3, [sp, #4]
   17278:	2401      	movs	r4, #1
   1727a:	401d      	ands	r5, r3
   1727c:	2300      	movs	r3, #0
   1727e:	2200      	movs	r2, #0
   17280:	4699      	mov	r9, r3
   17282:	e622      	b.n	16eca <__aeabi_dmul+0xce>
   17284:	251f      	movs	r5, #31
   17286:	0021      	movs	r1, r4
   17288:	426d      	negs	r5, r5
   1728a:	1a28      	subs	r0, r5, r0
   1728c:	40c1      	lsrs	r1, r0
   1728e:	0008      	movs	r0, r1
   17290:	2a20      	cmp	r2, #32
   17292:	d01d      	beq.n	172d0 <__aeabi_dmul+0x4d4>
   17294:	355f      	adds	r5, #95	; 0x5f
   17296:	1aaa      	subs	r2, r5, r2
   17298:	4094      	lsls	r4, r2
   1729a:	4323      	orrs	r3, r4
   1729c:	1e5c      	subs	r4, r3, #1
   1729e:	41a3      	sbcs	r3, r4
   172a0:	2507      	movs	r5, #7
   172a2:	4303      	orrs	r3, r0
   172a4:	401d      	ands	r5, r3
   172a6:	2200      	movs	r2, #0
   172a8:	2d00      	cmp	r5, #0
   172aa:	d009      	beq.n	172c0 <__aeabi_dmul+0x4c4>
   172ac:	220f      	movs	r2, #15
   172ae:	2400      	movs	r4, #0
   172b0:	401a      	ands	r2, r3
   172b2:	0018      	movs	r0, r3
   172b4:	2a04      	cmp	r2, #4
   172b6:	d1d6      	bne.n	17266 <__aeabi_dmul+0x46a>
   172b8:	0003      	movs	r3, r0
   172ba:	0765      	lsls	r5, r4, #29
   172bc:	0264      	lsls	r4, r4, #9
   172be:	0b22      	lsrs	r2, r4, #12
   172c0:	08db      	lsrs	r3, r3, #3
   172c2:	432b      	orrs	r3, r5
   172c4:	2501      	movs	r5, #1
   172c6:	4699      	mov	r9, r3
   172c8:	9b01      	ldr	r3, [sp, #4]
   172ca:	2400      	movs	r4, #0
   172cc:	401d      	ands	r5, r3
   172ce:	e5fc      	b.n	16eca <__aeabi_dmul+0xce>
   172d0:	2400      	movs	r4, #0
   172d2:	e7e2      	b.n	1729a <__aeabi_dmul+0x49e>
   172d4:	2280      	movs	r2, #128	; 0x80
   172d6:	2501      	movs	r5, #1
   172d8:	0312      	lsls	r2, r2, #12
   172da:	4322      	orrs	r2, r4
   172dc:	9901      	ldr	r1, [sp, #4]
   172de:	0312      	lsls	r2, r2, #12
   172e0:	0b12      	lsrs	r2, r2, #12
   172e2:	400d      	ands	r5, r1
   172e4:	4699      	mov	r9, r3
   172e6:	4c04      	ldr	r4, [pc, #16]	; (172f8 <__aeabi_dmul+0x4fc>)
   172e8:	e5ef      	b.n	16eca <__aeabi_dmul+0xce>
   172ea:	46c0      	nop			; (mov r8, r8)
   172ec:	000003ff 	.word	0x000003ff
   172f0:	feffffff 	.word	0xfeffffff
   172f4:	000007fe 	.word	0x000007fe
   172f8:	000007ff 	.word	0x000007ff

000172fc <__aeabi_dsub>:
   172fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   172fe:	4646      	mov	r6, r8
   17300:	46d6      	mov	lr, sl
   17302:	464f      	mov	r7, r9
   17304:	030c      	lsls	r4, r1, #12
   17306:	b5c0      	push	{r6, r7, lr}
   17308:	0fcd      	lsrs	r5, r1, #31
   1730a:	004e      	lsls	r6, r1, #1
   1730c:	0a61      	lsrs	r1, r4, #9
   1730e:	0f44      	lsrs	r4, r0, #29
   17310:	430c      	orrs	r4, r1
   17312:	00c1      	lsls	r1, r0, #3
   17314:	0058      	lsls	r0, r3, #1
   17316:	0d40      	lsrs	r0, r0, #21
   17318:	4684      	mov	ip, r0
   1731a:	468a      	mov	sl, r1
   1731c:	000f      	movs	r7, r1
   1731e:	0319      	lsls	r1, r3, #12
   17320:	0f50      	lsrs	r0, r2, #29
   17322:	0a49      	lsrs	r1, r1, #9
   17324:	4301      	orrs	r1, r0
   17326:	48c6      	ldr	r0, [pc, #792]	; (17640 <__aeabi_dsub+0x344>)
   17328:	0d76      	lsrs	r6, r6, #21
   1732a:	46a8      	mov	r8, r5
   1732c:	0fdb      	lsrs	r3, r3, #31
   1732e:	00d2      	lsls	r2, r2, #3
   17330:	4584      	cmp	ip, r0
   17332:	d100      	bne.n	17336 <__aeabi_dsub+0x3a>
   17334:	e0d8      	b.n	174e8 <__aeabi_dsub+0x1ec>
   17336:	2001      	movs	r0, #1
   17338:	4043      	eors	r3, r0
   1733a:	42ab      	cmp	r3, r5
   1733c:	d100      	bne.n	17340 <__aeabi_dsub+0x44>
   1733e:	e0a6      	b.n	1748e <__aeabi_dsub+0x192>
   17340:	4660      	mov	r0, ip
   17342:	1a35      	subs	r5, r6, r0
   17344:	2d00      	cmp	r5, #0
   17346:	dc00      	bgt.n	1734a <__aeabi_dsub+0x4e>
   17348:	e105      	b.n	17556 <__aeabi_dsub+0x25a>
   1734a:	2800      	cmp	r0, #0
   1734c:	d110      	bne.n	17370 <__aeabi_dsub+0x74>
   1734e:	000b      	movs	r3, r1
   17350:	4313      	orrs	r3, r2
   17352:	d100      	bne.n	17356 <__aeabi_dsub+0x5a>
   17354:	e0d7      	b.n	17506 <__aeabi_dsub+0x20a>
   17356:	1e6b      	subs	r3, r5, #1
   17358:	2b00      	cmp	r3, #0
   1735a:	d000      	beq.n	1735e <__aeabi_dsub+0x62>
   1735c:	e14b      	b.n	175f6 <__aeabi_dsub+0x2fa>
   1735e:	4653      	mov	r3, sl
   17360:	1a9f      	subs	r7, r3, r2
   17362:	45ba      	cmp	sl, r7
   17364:	4180      	sbcs	r0, r0
   17366:	1a64      	subs	r4, r4, r1
   17368:	4240      	negs	r0, r0
   1736a:	1a24      	subs	r4, r4, r0
   1736c:	2601      	movs	r6, #1
   1736e:	e01e      	b.n	173ae <__aeabi_dsub+0xb2>
   17370:	4bb3      	ldr	r3, [pc, #716]	; (17640 <__aeabi_dsub+0x344>)
   17372:	429e      	cmp	r6, r3
   17374:	d048      	beq.n	17408 <__aeabi_dsub+0x10c>
   17376:	2380      	movs	r3, #128	; 0x80
   17378:	041b      	lsls	r3, r3, #16
   1737a:	4319      	orrs	r1, r3
   1737c:	2d38      	cmp	r5, #56	; 0x38
   1737e:	dd00      	ble.n	17382 <__aeabi_dsub+0x86>
   17380:	e119      	b.n	175b6 <__aeabi_dsub+0x2ba>
   17382:	2d1f      	cmp	r5, #31
   17384:	dd00      	ble.n	17388 <__aeabi_dsub+0x8c>
   17386:	e14c      	b.n	17622 <__aeabi_dsub+0x326>
   17388:	2320      	movs	r3, #32
   1738a:	000f      	movs	r7, r1
   1738c:	1b5b      	subs	r3, r3, r5
   1738e:	0010      	movs	r0, r2
   17390:	409a      	lsls	r2, r3
   17392:	409f      	lsls	r7, r3
   17394:	40e8      	lsrs	r0, r5
   17396:	1e53      	subs	r3, r2, #1
   17398:	419a      	sbcs	r2, r3
   1739a:	40e9      	lsrs	r1, r5
   1739c:	4307      	orrs	r7, r0
   1739e:	4317      	orrs	r7, r2
   173a0:	4653      	mov	r3, sl
   173a2:	1bdf      	subs	r7, r3, r7
   173a4:	1a61      	subs	r1, r4, r1
   173a6:	45ba      	cmp	sl, r7
   173a8:	41a4      	sbcs	r4, r4
   173aa:	4264      	negs	r4, r4
   173ac:	1b0c      	subs	r4, r1, r4
   173ae:	0223      	lsls	r3, r4, #8
   173b0:	d400      	bmi.n	173b4 <__aeabi_dsub+0xb8>
   173b2:	e0c5      	b.n	17540 <__aeabi_dsub+0x244>
   173b4:	0264      	lsls	r4, r4, #9
   173b6:	0a65      	lsrs	r5, r4, #9
   173b8:	2d00      	cmp	r5, #0
   173ba:	d100      	bne.n	173be <__aeabi_dsub+0xc2>
   173bc:	e0f6      	b.n	175ac <__aeabi_dsub+0x2b0>
   173be:	0028      	movs	r0, r5
   173c0:	f000 fbd2 	bl	17b68 <__clzsi2>
   173c4:	0003      	movs	r3, r0
   173c6:	3b08      	subs	r3, #8
   173c8:	2b1f      	cmp	r3, #31
   173ca:	dd00      	ble.n	173ce <__aeabi_dsub+0xd2>
   173cc:	e0e9      	b.n	175a2 <__aeabi_dsub+0x2a6>
   173ce:	2220      	movs	r2, #32
   173d0:	003c      	movs	r4, r7
   173d2:	1ad2      	subs	r2, r2, r3
   173d4:	409d      	lsls	r5, r3
   173d6:	40d4      	lsrs	r4, r2
   173d8:	409f      	lsls	r7, r3
   173da:	4325      	orrs	r5, r4
   173dc:	429e      	cmp	r6, r3
   173de:	dd00      	ble.n	173e2 <__aeabi_dsub+0xe6>
   173e0:	e0db      	b.n	1759a <__aeabi_dsub+0x29e>
   173e2:	1b9e      	subs	r6, r3, r6
   173e4:	1c73      	adds	r3, r6, #1
   173e6:	2b1f      	cmp	r3, #31
   173e8:	dd00      	ble.n	173ec <__aeabi_dsub+0xf0>
   173ea:	e10a      	b.n	17602 <__aeabi_dsub+0x306>
   173ec:	2220      	movs	r2, #32
   173ee:	0038      	movs	r0, r7
   173f0:	1ad2      	subs	r2, r2, r3
   173f2:	0029      	movs	r1, r5
   173f4:	4097      	lsls	r7, r2
   173f6:	002c      	movs	r4, r5
   173f8:	4091      	lsls	r1, r2
   173fa:	40d8      	lsrs	r0, r3
   173fc:	1e7a      	subs	r2, r7, #1
   173fe:	4197      	sbcs	r7, r2
   17400:	40dc      	lsrs	r4, r3
   17402:	2600      	movs	r6, #0
   17404:	4301      	orrs	r1, r0
   17406:	430f      	orrs	r7, r1
   17408:	077b      	lsls	r3, r7, #29
   1740a:	d009      	beq.n	17420 <__aeabi_dsub+0x124>
   1740c:	230f      	movs	r3, #15
   1740e:	403b      	ands	r3, r7
   17410:	2b04      	cmp	r3, #4
   17412:	d005      	beq.n	17420 <__aeabi_dsub+0x124>
   17414:	1d3b      	adds	r3, r7, #4
   17416:	42bb      	cmp	r3, r7
   17418:	41bf      	sbcs	r7, r7
   1741a:	427f      	negs	r7, r7
   1741c:	19e4      	adds	r4, r4, r7
   1741e:	001f      	movs	r7, r3
   17420:	0223      	lsls	r3, r4, #8
   17422:	d525      	bpl.n	17470 <__aeabi_dsub+0x174>
   17424:	4b86      	ldr	r3, [pc, #536]	; (17640 <__aeabi_dsub+0x344>)
   17426:	3601      	adds	r6, #1
   17428:	429e      	cmp	r6, r3
   1742a:	d100      	bne.n	1742e <__aeabi_dsub+0x132>
   1742c:	e0af      	b.n	1758e <__aeabi_dsub+0x292>
   1742e:	4b85      	ldr	r3, [pc, #532]	; (17644 <__aeabi_dsub+0x348>)
   17430:	2501      	movs	r5, #1
   17432:	401c      	ands	r4, r3
   17434:	4643      	mov	r3, r8
   17436:	0762      	lsls	r2, r4, #29
   17438:	08ff      	lsrs	r7, r7, #3
   1743a:	0264      	lsls	r4, r4, #9
   1743c:	0576      	lsls	r6, r6, #21
   1743e:	4317      	orrs	r7, r2
   17440:	0b24      	lsrs	r4, r4, #12
   17442:	0d76      	lsrs	r6, r6, #21
   17444:	401d      	ands	r5, r3
   17446:	2100      	movs	r1, #0
   17448:	0324      	lsls	r4, r4, #12
   1744a:	0b23      	lsrs	r3, r4, #12
   1744c:	0d0c      	lsrs	r4, r1, #20
   1744e:	4a7e      	ldr	r2, [pc, #504]	; (17648 <__aeabi_dsub+0x34c>)
   17450:	0524      	lsls	r4, r4, #20
   17452:	431c      	orrs	r4, r3
   17454:	4014      	ands	r4, r2
   17456:	0533      	lsls	r3, r6, #20
   17458:	4323      	orrs	r3, r4
   1745a:	005b      	lsls	r3, r3, #1
   1745c:	07ed      	lsls	r5, r5, #31
   1745e:	085b      	lsrs	r3, r3, #1
   17460:	432b      	orrs	r3, r5
   17462:	0038      	movs	r0, r7
   17464:	0019      	movs	r1, r3
   17466:	bc1c      	pop	{r2, r3, r4}
   17468:	4690      	mov	r8, r2
   1746a:	4699      	mov	r9, r3
   1746c:	46a2      	mov	sl, r4
   1746e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17470:	2501      	movs	r5, #1
   17472:	4643      	mov	r3, r8
   17474:	0762      	lsls	r2, r4, #29
   17476:	08ff      	lsrs	r7, r7, #3
   17478:	4317      	orrs	r7, r2
   1747a:	08e4      	lsrs	r4, r4, #3
   1747c:	401d      	ands	r5, r3
   1747e:	4b70      	ldr	r3, [pc, #448]	; (17640 <__aeabi_dsub+0x344>)
   17480:	429e      	cmp	r6, r3
   17482:	d036      	beq.n	174f2 <__aeabi_dsub+0x1f6>
   17484:	0324      	lsls	r4, r4, #12
   17486:	0576      	lsls	r6, r6, #21
   17488:	0b24      	lsrs	r4, r4, #12
   1748a:	0d76      	lsrs	r6, r6, #21
   1748c:	e7db      	b.n	17446 <__aeabi_dsub+0x14a>
   1748e:	4663      	mov	r3, ip
   17490:	1af3      	subs	r3, r6, r3
   17492:	2b00      	cmp	r3, #0
   17494:	dc00      	bgt.n	17498 <__aeabi_dsub+0x19c>
   17496:	e094      	b.n	175c2 <__aeabi_dsub+0x2c6>
   17498:	4660      	mov	r0, ip
   1749a:	2800      	cmp	r0, #0
   1749c:	d035      	beq.n	1750a <__aeabi_dsub+0x20e>
   1749e:	4868      	ldr	r0, [pc, #416]	; (17640 <__aeabi_dsub+0x344>)
   174a0:	4286      	cmp	r6, r0
   174a2:	d0b1      	beq.n	17408 <__aeabi_dsub+0x10c>
   174a4:	2780      	movs	r7, #128	; 0x80
   174a6:	043f      	lsls	r7, r7, #16
   174a8:	4339      	orrs	r1, r7
   174aa:	2b38      	cmp	r3, #56	; 0x38
   174ac:	dc00      	bgt.n	174b0 <__aeabi_dsub+0x1b4>
   174ae:	e0fd      	b.n	176ac <__aeabi_dsub+0x3b0>
   174b0:	430a      	orrs	r2, r1
   174b2:	0017      	movs	r7, r2
   174b4:	2100      	movs	r1, #0
   174b6:	1e7a      	subs	r2, r7, #1
   174b8:	4197      	sbcs	r7, r2
   174ba:	4457      	add	r7, sl
   174bc:	4557      	cmp	r7, sl
   174be:	4180      	sbcs	r0, r0
   174c0:	1909      	adds	r1, r1, r4
   174c2:	4244      	negs	r4, r0
   174c4:	190c      	adds	r4, r1, r4
   174c6:	0223      	lsls	r3, r4, #8
   174c8:	d53a      	bpl.n	17540 <__aeabi_dsub+0x244>
   174ca:	4b5d      	ldr	r3, [pc, #372]	; (17640 <__aeabi_dsub+0x344>)
   174cc:	3601      	adds	r6, #1
   174ce:	429e      	cmp	r6, r3
   174d0:	d100      	bne.n	174d4 <__aeabi_dsub+0x1d8>
   174d2:	e14b      	b.n	1776c <__aeabi_dsub+0x470>
   174d4:	2201      	movs	r2, #1
   174d6:	4b5b      	ldr	r3, [pc, #364]	; (17644 <__aeabi_dsub+0x348>)
   174d8:	401c      	ands	r4, r3
   174da:	087b      	lsrs	r3, r7, #1
   174dc:	4017      	ands	r7, r2
   174de:	431f      	orrs	r7, r3
   174e0:	07e2      	lsls	r2, r4, #31
   174e2:	4317      	orrs	r7, r2
   174e4:	0864      	lsrs	r4, r4, #1
   174e6:	e78f      	b.n	17408 <__aeabi_dsub+0x10c>
   174e8:	0008      	movs	r0, r1
   174ea:	4310      	orrs	r0, r2
   174ec:	d000      	beq.n	174f0 <__aeabi_dsub+0x1f4>
   174ee:	e724      	b.n	1733a <__aeabi_dsub+0x3e>
   174f0:	e721      	b.n	17336 <__aeabi_dsub+0x3a>
   174f2:	0023      	movs	r3, r4
   174f4:	433b      	orrs	r3, r7
   174f6:	d100      	bne.n	174fa <__aeabi_dsub+0x1fe>
   174f8:	e1b9      	b.n	1786e <__aeabi_dsub+0x572>
   174fa:	2280      	movs	r2, #128	; 0x80
   174fc:	0312      	lsls	r2, r2, #12
   174fe:	4314      	orrs	r4, r2
   17500:	0324      	lsls	r4, r4, #12
   17502:	0b24      	lsrs	r4, r4, #12
   17504:	e79f      	b.n	17446 <__aeabi_dsub+0x14a>
   17506:	002e      	movs	r6, r5
   17508:	e77e      	b.n	17408 <__aeabi_dsub+0x10c>
   1750a:	0008      	movs	r0, r1
   1750c:	4310      	orrs	r0, r2
   1750e:	d100      	bne.n	17512 <__aeabi_dsub+0x216>
   17510:	e0ca      	b.n	176a8 <__aeabi_dsub+0x3ac>
   17512:	1e58      	subs	r0, r3, #1
   17514:	4684      	mov	ip, r0
   17516:	2800      	cmp	r0, #0
   17518:	d000      	beq.n	1751c <__aeabi_dsub+0x220>
   1751a:	e0e7      	b.n	176ec <__aeabi_dsub+0x3f0>
   1751c:	4452      	add	r2, sl
   1751e:	4552      	cmp	r2, sl
   17520:	4180      	sbcs	r0, r0
   17522:	1864      	adds	r4, r4, r1
   17524:	4240      	negs	r0, r0
   17526:	1824      	adds	r4, r4, r0
   17528:	0017      	movs	r7, r2
   1752a:	2601      	movs	r6, #1
   1752c:	0223      	lsls	r3, r4, #8
   1752e:	d507      	bpl.n	17540 <__aeabi_dsub+0x244>
   17530:	2602      	movs	r6, #2
   17532:	e7cf      	b.n	174d4 <__aeabi_dsub+0x1d8>
   17534:	4664      	mov	r4, ip
   17536:	432c      	orrs	r4, r5
   17538:	d100      	bne.n	1753c <__aeabi_dsub+0x240>
   1753a:	e1b3      	b.n	178a4 <__aeabi_dsub+0x5a8>
   1753c:	002c      	movs	r4, r5
   1753e:	4667      	mov	r7, ip
   17540:	077b      	lsls	r3, r7, #29
   17542:	d000      	beq.n	17546 <__aeabi_dsub+0x24a>
   17544:	e762      	b.n	1740c <__aeabi_dsub+0x110>
   17546:	0763      	lsls	r3, r4, #29
   17548:	08ff      	lsrs	r7, r7, #3
   1754a:	431f      	orrs	r7, r3
   1754c:	2501      	movs	r5, #1
   1754e:	4643      	mov	r3, r8
   17550:	08e4      	lsrs	r4, r4, #3
   17552:	401d      	ands	r5, r3
   17554:	e793      	b.n	1747e <__aeabi_dsub+0x182>
   17556:	2d00      	cmp	r5, #0
   17558:	d178      	bne.n	1764c <__aeabi_dsub+0x350>
   1755a:	1c75      	adds	r5, r6, #1
   1755c:	056d      	lsls	r5, r5, #21
   1755e:	0d6d      	lsrs	r5, r5, #21
   17560:	2d01      	cmp	r5, #1
   17562:	dc00      	bgt.n	17566 <__aeabi_dsub+0x26a>
   17564:	e0f2      	b.n	1774c <__aeabi_dsub+0x450>
   17566:	4650      	mov	r0, sl
   17568:	1a80      	subs	r0, r0, r2
   1756a:	4582      	cmp	sl, r0
   1756c:	41bf      	sbcs	r7, r7
   1756e:	1a65      	subs	r5, r4, r1
   17570:	427f      	negs	r7, r7
   17572:	1bed      	subs	r5, r5, r7
   17574:	4684      	mov	ip, r0
   17576:	0228      	lsls	r0, r5, #8
   17578:	d400      	bmi.n	1757c <__aeabi_dsub+0x280>
   1757a:	e08c      	b.n	17696 <__aeabi_dsub+0x39a>
   1757c:	4650      	mov	r0, sl
   1757e:	1a17      	subs	r7, r2, r0
   17580:	42ba      	cmp	r2, r7
   17582:	4192      	sbcs	r2, r2
   17584:	1b0c      	subs	r4, r1, r4
   17586:	4255      	negs	r5, r2
   17588:	1b65      	subs	r5, r4, r5
   1758a:	4698      	mov	r8, r3
   1758c:	e714      	b.n	173b8 <__aeabi_dsub+0xbc>
   1758e:	2501      	movs	r5, #1
   17590:	4643      	mov	r3, r8
   17592:	2400      	movs	r4, #0
   17594:	401d      	ands	r5, r3
   17596:	2700      	movs	r7, #0
   17598:	e755      	b.n	17446 <__aeabi_dsub+0x14a>
   1759a:	4c2a      	ldr	r4, [pc, #168]	; (17644 <__aeabi_dsub+0x348>)
   1759c:	1af6      	subs	r6, r6, r3
   1759e:	402c      	ands	r4, r5
   175a0:	e732      	b.n	17408 <__aeabi_dsub+0x10c>
   175a2:	003d      	movs	r5, r7
   175a4:	3828      	subs	r0, #40	; 0x28
   175a6:	4085      	lsls	r5, r0
   175a8:	2700      	movs	r7, #0
   175aa:	e717      	b.n	173dc <__aeabi_dsub+0xe0>
   175ac:	0038      	movs	r0, r7
   175ae:	f000 fadb 	bl	17b68 <__clzsi2>
   175b2:	3020      	adds	r0, #32
   175b4:	e706      	b.n	173c4 <__aeabi_dsub+0xc8>
   175b6:	430a      	orrs	r2, r1
   175b8:	0017      	movs	r7, r2
   175ba:	2100      	movs	r1, #0
   175bc:	1e7a      	subs	r2, r7, #1
   175be:	4197      	sbcs	r7, r2
   175c0:	e6ee      	b.n	173a0 <__aeabi_dsub+0xa4>
   175c2:	2b00      	cmp	r3, #0
   175c4:	d000      	beq.n	175c8 <__aeabi_dsub+0x2cc>
   175c6:	e0e5      	b.n	17794 <__aeabi_dsub+0x498>
   175c8:	1c73      	adds	r3, r6, #1
   175ca:	469c      	mov	ip, r3
   175cc:	055b      	lsls	r3, r3, #21
   175ce:	0d5b      	lsrs	r3, r3, #21
   175d0:	2b01      	cmp	r3, #1
   175d2:	dc00      	bgt.n	175d6 <__aeabi_dsub+0x2da>
   175d4:	e09f      	b.n	17716 <__aeabi_dsub+0x41a>
   175d6:	4b1a      	ldr	r3, [pc, #104]	; (17640 <__aeabi_dsub+0x344>)
   175d8:	459c      	cmp	ip, r3
   175da:	d100      	bne.n	175de <__aeabi_dsub+0x2e2>
   175dc:	e0c5      	b.n	1776a <__aeabi_dsub+0x46e>
   175de:	4452      	add	r2, sl
   175e0:	4552      	cmp	r2, sl
   175e2:	4180      	sbcs	r0, r0
   175e4:	1864      	adds	r4, r4, r1
   175e6:	4240      	negs	r0, r0
   175e8:	1824      	adds	r4, r4, r0
   175ea:	07e7      	lsls	r7, r4, #31
   175ec:	0852      	lsrs	r2, r2, #1
   175ee:	4317      	orrs	r7, r2
   175f0:	0864      	lsrs	r4, r4, #1
   175f2:	4666      	mov	r6, ip
   175f4:	e708      	b.n	17408 <__aeabi_dsub+0x10c>
   175f6:	4812      	ldr	r0, [pc, #72]	; (17640 <__aeabi_dsub+0x344>)
   175f8:	4285      	cmp	r5, r0
   175fa:	d100      	bne.n	175fe <__aeabi_dsub+0x302>
   175fc:	e085      	b.n	1770a <__aeabi_dsub+0x40e>
   175fe:	001d      	movs	r5, r3
   17600:	e6bc      	b.n	1737c <__aeabi_dsub+0x80>
   17602:	0029      	movs	r1, r5
   17604:	3e1f      	subs	r6, #31
   17606:	40f1      	lsrs	r1, r6
   17608:	2b20      	cmp	r3, #32
   1760a:	d100      	bne.n	1760e <__aeabi_dsub+0x312>
   1760c:	e07f      	b.n	1770e <__aeabi_dsub+0x412>
   1760e:	2240      	movs	r2, #64	; 0x40
   17610:	1ad3      	subs	r3, r2, r3
   17612:	409d      	lsls	r5, r3
   17614:	432f      	orrs	r7, r5
   17616:	1e7d      	subs	r5, r7, #1
   17618:	41af      	sbcs	r7, r5
   1761a:	2400      	movs	r4, #0
   1761c:	430f      	orrs	r7, r1
   1761e:	2600      	movs	r6, #0
   17620:	e78e      	b.n	17540 <__aeabi_dsub+0x244>
   17622:	002b      	movs	r3, r5
   17624:	000f      	movs	r7, r1
   17626:	3b20      	subs	r3, #32
   17628:	40df      	lsrs	r7, r3
   1762a:	2d20      	cmp	r5, #32
   1762c:	d071      	beq.n	17712 <__aeabi_dsub+0x416>
   1762e:	2340      	movs	r3, #64	; 0x40
   17630:	1b5d      	subs	r5, r3, r5
   17632:	40a9      	lsls	r1, r5
   17634:	430a      	orrs	r2, r1
   17636:	1e51      	subs	r1, r2, #1
   17638:	418a      	sbcs	r2, r1
   1763a:	2100      	movs	r1, #0
   1763c:	4317      	orrs	r7, r2
   1763e:	e6af      	b.n	173a0 <__aeabi_dsub+0xa4>
   17640:	000007ff 	.word	0x000007ff
   17644:	ff7fffff 	.word	0xff7fffff
   17648:	800fffff 	.word	0x800fffff
   1764c:	2e00      	cmp	r6, #0
   1764e:	d03e      	beq.n	176ce <__aeabi_dsub+0x3d2>
   17650:	4eb3      	ldr	r6, [pc, #716]	; (17920 <__aeabi_dsub+0x624>)
   17652:	45b4      	cmp	ip, r6
   17654:	d045      	beq.n	176e2 <__aeabi_dsub+0x3e6>
   17656:	2680      	movs	r6, #128	; 0x80
   17658:	0436      	lsls	r6, r6, #16
   1765a:	426d      	negs	r5, r5
   1765c:	4334      	orrs	r4, r6
   1765e:	2d38      	cmp	r5, #56	; 0x38
   17660:	dd00      	ble.n	17664 <__aeabi_dsub+0x368>
   17662:	e0a8      	b.n	177b6 <__aeabi_dsub+0x4ba>
   17664:	2d1f      	cmp	r5, #31
   17666:	dd00      	ble.n	1766a <__aeabi_dsub+0x36e>
   17668:	e11f      	b.n	178aa <__aeabi_dsub+0x5ae>
   1766a:	2620      	movs	r6, #32
   1766c:	0027      	movs	r7, r4
   1766e:	4650      	mov	r0, sl
   17670:	1b76      	subs	r6, r6, r5
   17672:	40b7      	lsls	r7, r6
   17674:	40e8      	lsrs	r0, r5
   17676:	4307      	orrs	r7, r0
   17678:	4650      	mov	r0, sl
   1767a:	40b0      	lsls	r0, r6
   1767c:	1e46      	subs	r6, r0, #1
   1767e:	41b0      	sbcs	r0, r6
   17680:	40ec      	lsrs	r4, r5
   17682:	4338      	orrs	r0, r7
   17684:	1a17      	subs	r7, r2, r0
   17686:	42ba      	cmp	r2, r7
   17688:	4192      	sbcs	r2, r2
   1768a:	1b0c      	subs	r4, r1, r4
   1768c:	4252      	negs	r2, r2
   1768e:	1aa4      	subs	r4, r4, r2
   17690:	4666      	mov	r6, ip
   17692:	4698      	mov	r8, r3
   17694:	e68b      	b.n	173ae <__aeabi_dsub+0xb2>
   17696:	4664      	mov	r4, ip
   17698:	4667      	mov	r7, ip
   1769a:	432c      	orrs	r4, r5
   1769c:	d000      	beq.n	176a0 <__aeabi_dsub+0x3a4>
   1769e:	e68b      	b.n	173b8 <__aeabi_dsub+0xbc>
   176a0:	2500      	movs	r5, #0
   176a2:	2600      	movs	r6, #0
   176a4:	2700      	movs	r7, #0
   176a6:	e6ea      	b.n	1747e <__aeabi_dsub+0x182>
   176a8:	001e      	movs	r6, r3
   176aa:	e6ad      	b.n	17408 <__aeabi_dsub+0x10c>
   176ac:	2b1f      	cmp	r3, #31
   176ae:	dc60      	bgt.n	17772 <__aeabi_dsub+0x476>
   176b0:	2720      	movs	r7, #32
   176b2:	1af8      	subs	r0, r7, r3
   176b4:	000f      	movs	r7, r1
   176b6:	4684      	mov	ip, r0
   176b8:	4087      	lsls	r7, r0
   176ba:	0010      	movs	r0, r2
   176bc:	40d8      	lsrs	r0, r3
   176be:	4307      	orrs	r7, r0
   176c0:	4660      	mov	r0, ip
   176c2:	4082      	lsls	r2, r0
   176c4:	1e50      	subs	r0, r2, #1
   176c6:	4182      	sbcs	r2, r0
   176c8:	40d9      	lsrs	r1, r3
   176ca:	4317      	orrs	r7, r2
   176cc:	e6f5      	b.n	174ba <__aeabi_dsub+0x1be>
   176ce:	0026      	movs	r6, r4
   176d0:	4650      	mov	r0, sl
   176d2:	4306      	orrs	r6, r0
   176d4:	d005      	beq.n	176e2 <__aeabi_dsub+0x3e6>
   176d6:	43ed      	mvns	r5, r5
   176d8:	2d00      	cmp	r5, #0
   176da:	d0d3      	beq.n	17684 <__aeabi_dsub+0x388>
   176dc:	4e90      	ldr	r6, [pc, #576]	; (17920 <__aeabi_dsub+0x624>)
   176de:	45b4      	cmp	ip, r6
   176e0:	d1bd      	bne.n	1765e <__aeabi_dsub+0x362>
   176e2:	000c      	movs	r4, r1
   176e4:	0017      	movs	r7, r2
   176e6:	4666      	mov	r6, ip
   176e8:	4698      	mov	r8, r3
   176ea:	e68d      	b.n	17408 <__aeabi_dsub+0x10c>
   176ec:	488c      	ldr	r0, [pc, #560]	; (17920 <__aeabi_dsub+0x624>)
   176ee:	4283      	cmp	r3, r0
   176f0:	d00b      	beq.n	1770a <__aeabi_dsub+0x40e>
   176f2:	4663      	mov	r3, ip
   176f4:	e6d9      	b.n	174aa <__aeabi_dsub+0x1ae>
   176f6:	2d00      	cmp	r5, #0
   176f8:	d000      	beq.n	176fc <__aeabi_dsub+0x400>
   176fa:	e096      	b.n	1782a <__aeabi_dsub+0x52e>
   176fc:	0008      	movs	r0, r1
   176fe:	4310      	orrs	r0, r2
   17700:	d100      	bne.n	17704 <__aeabi_dsub+0x408>
   17702:	e0e2      	b.n	178ca <__aeabi_dsub+0x5ce>
   17704:	000c      	movs	r4, r1
   17706:	0017      	movs	r7, r2
   17708:	4698      	mov	r8, r3
   1770a:	4e85      	ldr	r6, [pc, #532]	; (17920 <__aeabi_dsub+0x624>)
   1770c:	e67c      	b.n	17408 <__aeabi_dsub+0x10c>
   1770e:	2500      	movs	r5, #0
   17710:	e780      	b.n	17614 <__aeabi_dsub+0x318>
   17712:	2100      	movs	r1, #0
   17714:	e78e      	b.n	17634 <__aeabi_dsub+0x338>
   17716:	0023      	movs	r3, r4
   17718:	4650      	mov	r0, sl
   1771a:	4303      	orrs	r3, r0
   1771c:	2e00      	cmp	r6, #0
   1771e:	d000      	beq.n	17722 <__aeabi_dsub+0x426>
   17720:	e0a8      	b.n	17874 <__aeabi_dsub+0x578>
   17722:	2b00      	cmp	r3, #0
   17724:	d100      	bne.n	17728 <__aeabi_dsub+0x42c>
   17726:	e0de      	b.n	178e6 <__aeabi_dsub+0x5ea>
   17728:	000b      	movs	r3, r1
   1772a:	4313      	orrs	r3, r2
   1772c:	d100      	bne.n	17730 <__aeabi_dsub+0x434>
   1772e:	e66b      	b.n	17408 <__aeabi_dsub+0x10c>
   17730:	4452      	add	r2, sl
   17732:	4552      	cmp	r2, sl
   17734:	4180      	sbcs	r0, r0
   17736:	1864      	adds	r4, r4, r1
   17738:	4240      	negs	r0, r0
   1773a:	1824      	adds	r4, r4, r0
   1773c:	0017      	movs	r7, r2
   1773e:	0223      	lsls	r3, r4, #8
   17740:	d400      	bmi.n	17744 <__aeabi_dsub+0x448>
   17742:	e6fd      	b.n	17540 <__aeabi_dsub+0x244>
   17744:	4b77      	ldr	r3, [pc, #476]	; (17924 <__aeabi_dsub+0x628>)
   17746:	4666      	mov	r6, ip
   17748:	401c      	ands	r4, r3
   1774a:	e65d      	b.n	17408 <__aeabi_dsub+0x10c>
   1774c:	0025      	movs	r5, r4
   1774e:	4650      	mov	r0, sl
   17750:	4305      	orrs	r5, r0
   17752:	2e00      	cmp	r6, #0
   17754:	d1cf      	bne.n	176f6 <__aeabi_dsub+0x3fa>
   17756:	2d00      	cmp	r5, #0
   17758:	d14f      	bne.n	177fa <__aeabi_dsub+0x4fe>
   1775a:	000c      	movs	r4, r1
   1775c:	4314      	orrs	r4, r2
   1775e:	d100      	bne.n	17762 <__aeabi_dsub+0x466>
   17760:	e0a0      	b.n	178a4 <__aeabi_dsub+0x5a8>
   17762:	000c      	movs	r4, r1
   17764:	0017      	movs	r7, r2
   17766:	4698      	mov	r8, r3
   17768:	e64e      	b.n	17408 <__aeabi_dsub+0x10c>
   1776a:	4666      	mov	r6, ip
   1776c:	2400      	movs	r4, #0
   1776e:	2700      	movs	r7, #0
   17770:	e685      	b.n	1747e <__aeabi_dsub+0x182>
   17772:	001f      	movs	r7, r3
   17774:	0008      	movs	r0, r1
   17776:	3f20      	subs	r7, #32
   17778:	40f8      	lsrs	r0, r7
   1777a:	0007      	movs	r7, r0
   1777c:	2b20      	cmp	r3, #32
   1777e:	d100      	bne.n	17782 <__aeabi_dsub+0x486>
   17780:	e08e      	b.n	178a0 <__aeabi_dsub+0x5a4>
   17782:	2040      	movs	r0, #64	; 0x40
   17784:	1ac3      	subs	r3, r0, r3
   17786:	4099      	lsls	r1, r3
   17788:	430a      	orrs	r2, r1
   1778a:	1e51      	subs	r1, r2, #1
   1778c:	418a      	sbcs	r2, r1
   1778e:	2100      	movs	r1, #0
   17790:	4317      	orrs	r7, r2
   17792:	e692      	b.n	174ba <__aeabi_dsub+0x1be>
   17794:	2e00      	cmp	r6, #0
   17796:	d114      	bne.n	177c2 <__aeabi_dsub+0x4c6>
   17798:	0026      	movs	r6, r4
   1779a:	4650      	mov	r0, sl
   1779c:	4306      	orrs	r6, r0
   1779e:	d062      	beq.n	17866 <__aeabi_dsub+0x56a>
   177a0:	43db      	mvns	r3, r3
   177a2:	2b00      	cmp	r3, #0
   177a4:	d15c      	bne.n	17860 <__aeabi_dsub+0x564>
   177a6:	1887      	adds	r7, r0, r2
   177a8:	4297      	cmp	r7, r2
   177aa:	4192      	sbcs	r2, r2
   177ac:	1864      	adds	r4, r4, r1
   177ae:	4252      	negs	r2, r2
   177b0:	18a4      	adds	r4, r4, r2
   177b2:	4666      	mov	r6, ip
   177b4:	e687      	b.n	174c6 <__aeabi_dsub+0x1ca>
   177b6:	4650      	mov	r0, sl
   177b8:	4320      	orrs	r0, r4
   177ba:	1e44      	subs	r4, r0, #1
   177bc:	41a0      	sbcs	r0, r4
   177be:	2400      	movs	r4, #0
   177c0:	e760      	b.n	17684 <__aeabi_dsub+0x388>
   177c2:	4e57      	ldr	r6, [pc, #348]	; (17920 <__aeabi_dsub+0x624>)
   177c4:	45b4      	cmp	ip, r6
   177c6:	d04e      	beq.n	17866 <__aeabi_dsub+0x56a>
   177c8:	2680      	movs	r6, #128	; 0x80
   177ca:	0436      	lsls	r6, r6, #16
   177cc:	425b      	negs	r3, r3
   177ce:	4334      	orrs	r4, r6
   177d0:	2b38      	cmp	r3, #56	; 0x38
   177d2:	dd00      	ble.n	177d6 <__aeabi_dsub+0x4da>
   177d4:	e07f      	b.n	178d6 <__aeabi_dsub+0x5da>
   177d6:	2b1f      	cmp	r3, #31
   177d8:	dd00      	ble.n	177dc <__aeabi_dsub+0x4e0>
   177da:	e08b      	b.n	178f4 <__aeabi_dsub+0x5f8>
   177dc:	2620      	movs	r6, #32
   177de:	0027      	movs	r7, r4
   177e0:	4650      	mov	r0, sl
   177e2:	1af6      	subs	r6, r6, r3
   177e4:	40b7      	lsls	r7, r6
   177e6:	40d8      	lsrs	r0, r3
   177e8:	4307      	orrs	r7, r0
   177ea:	4650      	mov	r0, sl
   177ec:	40b0      	lsls	r0, r6
   177ee:	1e46      	subs	r6, r0, #1
   177f0:	41b0      	sbcs	r0, r6
   177f2:	4307      	orrs	r7, r0
   177f4:	40dc      	lsrs	r4, r3
   177f6:	18bf      	adds	r7, r7, r2
   177f8:	e7d6      	b.n	177a8 <__aeabi_dsub+0x4ac>
   177fa:	000d      	movs	r5, r1
   177fc:	4315      	orrs	r5, r2
   177fe:	d100      	bne.n	17802 <__aeabi_dsub+0x506>
   17800:	e602      	b.n	17408 <__aeabi_dsub+0x10c>
   17802:	4650      	mov	r0, sl
   17804:	1a80      	subs	r0, r0, r2
   17806:	4582      	cmp	sl, r0
   17808:	41bf      	sbcs	r7, r7
   1780a:	1a65      	subs	r5, r4, r1
   1780c:	427f      	negs	r7, r7
   1780e:	1bed      	subs	r5, r5, r7
   17810:	4684      	mov	ip, r0
   17812:	0228      	lsls	r0, r5, #8
   17814:	d400      	bmi.n	17818 <__aeabi_dsub+0x51c>
   17816:	e68d      	b.n	17534 <__aeabi_dsub+0x238>
   17818:	4650      	mov	r0, sl
   1781a:	1a17      	subs	r7, r2, r0
   1781c:	42ba      	cmp	r2, r7
   1781e:	4192      	sbcs	r2, r2
   17820:	1b0c      	subs	r4, r1, r4
   17822:	4252      	negs	r2, r2
   17824:	1aa4      	subs	r4, r4, r2
   17826:	4698      	mov	r8, r3
   17828:	e5ee      	b.n	17408 <__aeabi_dsub+0x10c>
   1782a:	000d      	movs	r5, r1
   1782c:	4315      	orrs	r5, r2
   1782e:	d100      	bne.n	17832 <__aeabi_dsub+0x536>
   17830:	e76b      	b.n	1770a <__aeabi_dsub+0x40e>
   17832:	4650      	mov	r0, sl
   17834:	0767      	lsls	r7, r4, #29
   17836:	08c0      	lsrs	r0, r0, #3
   17838:	4307      	orrs	r7, r0
   1783a:	2080      	movs	r0, #128	; 0x80
   1783c:	08e4      	lsrs	r4, r4, #3
   1783e:	0300      	lsls	r0, r0, #12
   17840:	4204      	tst	r4, r0
   17842:	d007      	beq.n	17854 <__aeabi_dsub+0x558>
   17844:	08cd      	lsrs	r5, r1, #3
   17846:	4205      	tst	r5, r0
   17848:	d104      	bne.n	17854 <__aeabi_dsub+0x558>
   1784a:	002c      	movs	r4, r5
   1784c:	4698      	mov	r8, r3
   1784e:	08d7      	lsrs	r7, r2, #3
   17850:	0749      	lsls	r1, r1, #29
   17852:	430f      	orrs	r7, r1
   17854:	0f7b      	lsrs	r3, r7, #29
   17856:	00e4      	lsls	r4, r4, #3
   17858:	431c      	orrs	r4, r3
   1785a:	00ff      	lsls	r7, r7, #3
   1785c:	4e30      	ldr	r6, [pc, #192]	; (17920 <__aeabi_dsub+0x624>)
   1785e:	e5d3      	b.n	17408 <__aeabi_dsub+0x10c>
   17860:	4e2f      	ldr	r6, [pc, #188]	; (17920 <__aeabi_dsub+0x624>)
   17862:	45b4      	cmp	ip, r6
   17864:	d1b4      	bne.n	177d0 <__aeabi_dsub+0x4d4>
   17866:	000c      	movs	r4, r1
   17868:	0017      	movs	r7, r2
   1786a:	4666      	mov	r6, ip
   1786c:	e5cc      	b.n	17408 <__aeabi_dsub+0x10c>
   1786e:	2700      	movs	r7, #0
   17870:	2400      	movs	r4, #0
   17872:	e5e8      	b.n	17446 <__aeabi_dsub+0x14a>
   17874:	2b00      	cmp	r3, #0
   17876:	d039      	beq.n	178ec <__aeabi_dsub+0x5f0>
   17878:	000b      	movs	r3, r1
   1787a:	4313      	orrs	r3, r2
   1787c:	d100      	bne.n	17880 <__aeabi_dsub+0x584>
   1787e:	e744      	b.n	1770a <__aeabi_dsub+0x40e>
   17880:	08c0      	lsrs	r0, r0, #3
   17882:	0767      	lsls	r7, r4, #29
   17884:	4307      	orrs	r7, r0
   17886:	2080      	movs	r0, #128	; 0x80
   17888:	08e4      	lsrs	r4, r4, #3
   1788a:	0300      	lsls	r0, r0, #12
   1788c:	4204      	tst	r4, r0
   1788e:	d0e1      	beq.n	17854 <__aeabi_dsub+0x558>
   17890:	08cb      	lsrs	r3, r1, #3
   17892:	4203      	tst	r3, r0
   17894:	d1de      	bne.n	17854 <__aeabi_dsub+0x558>
   17896:	08d7      	lsrs	r7, r2, #3
   17898:	0749      	lsls	r1, r1, #29
   1789a:	430f      	orrs	r7, r1
   1789c:	001c      	movs	r4, r3
   1789e:	e7d9      	b.n	17854 <__aeabi_dsub+0x558>
   178a0:	2100      	movs	r1, #0
   178a2:	e771      	b.n	17788 <__aeabi_dsub+0x48c>
   178a4:	2500      	movs	r5, #0
   178a6:	2700      	movs	r7, #0
   178a8:	e5e9      	b.n	1747e <__aeabi_dsub+0x182>
   178aa:	002e      	movs	r6, r5
   178ac:	0027      	movs	r7, r4
   178ae:	3e20      	subs	r6, #32
   178b0:	40f7      	lsrs	r7, r6
   178b2:	2d20      	cmp	r5, #32
   178b4:	d02f      	beq.n	17916 <__aeabi_dsub+0x61a>
   178b6:	2640      	movs	r6, #64	; 0x40
   178b8:	1b75      	subs	r5, r6, r5
   178ba:	40ac      	lsls	r4, r5
   178bc:	4650      	mov	r0, sl
   178be:	4320      	orrs	r0, r4
   178c0:	1e44      	subs	r4, r0, #1
   178c2:	41a0      	sbcs	r0, r4
   178c4:	2400      	movs	r4, #0
   178c6:	4338      	orrs	r0, r7
   178c8:	e6dc      	b.n	17684 <__aeabi_dsub+0x388>
   178ca:	2480      	movs	r4, #128	; 0x80
   178cc:	2500      	movs	r5, #0
   178ce:	0324      	lsls	r4, r4, #12
   178d0:	4e13      	ldr	r6, [pc, #76]	; (17920 <__aeabi_dsub+0x624>)
   178d2:	2700      	movs	r7, #0
   178d4:	e5d3      	b.n	1747e <__aeabi_dsub+0x182>
   178d6:	4650      	mov	r0, sl
   178d8:	4320      	orrs	r0, r4
   178da:	0007      	movs	r7, r0
   178dc:	1e78      	subs	r0, r7, #1
   178de:	4187      	sbcs	r7, r0
   178e0:	2400      	movs	r4, #0
   178e2:	18bf      	adds	r7, r7, r2
   178e4:	e760      	b.n	177a8 <__aeabi_dsub+0x4ac>
   178e6:	000c      	movs	r4, r1
   178e8:	0017      	movs	r7, r2
   178ea:	e58d      	b.n	17408 <__aeabi_dsub+0x10c>
   178ec:	000c      	movs	r4, r1
   178ee:	0017      	movs	r7, r2
   178f0:	4e0b      	ldr	r6, [pc, #44]	; (17920 <__aeabi_dsub+0x624>)
   178f2:	e589      	b.n	17408 <__aeabi_dsub+0x10c>
   178f4:	001e      	movs	r6, r3
   178f6:	0027      	movs	r7, r4
   178f8:	3e20      	subs	r6, #32
   178fa:	40f7      	lsrs	r7, r6
   178fc:	2b20      	cmp	r3, #32
   178fe:	d00c      	beq.n	1791a <__aeabi_dsub+0x61e>
   17900:	2640      	movs	r6, #64	; 0x40
   17902:	1af3      	subs	r3, r6, r3
   17904:	409c      	lsls	r4, r3
   17906:	4650      	mov	r0, sl
   17908:	4320      	orrs	r0, r4
   1790a:	1e44      	subs	r4, r0, #1
   1790c:	41a0      	sbcs	r0, r4
   1790e:	4307      	orrs	r7, r0
   17910:	2400      	movs	r4, #0
   17912:	18bf      	adds	r7, r7, r2
   17914:	e748      	b.n	177a8 <__aeabi_dsub+0x4ac>
   17916:	2400      	movs	r4, #0
   17918:	e7d0      	b.n	178bc <__aeabi_dsub+0x5c0>
   1791a:	2400      	movs	r4, #0
   1791c:	e7f3      	b.n	17906 <__aeabi_dsub+0x60a>
   1791e:	46c0      	nop			; (mov r8, r8)
   17920:	000007ff 	.word	0x000007ff
   17924:	ff7fffff 	.word	0xff7fffff

00017928 <__aeabi_dcmpun>:
   17928:	b570      	push	{r4, r5, r6, lr}
   1792a:	4e0e      	ldr	r6, [pc, #56]	; (17964 <__aeabi_dcmpun+0x3c>)
   1792c:	030d      	lsls	r5, r1, #12
   1792e:	031c      	lsls	r4, r3, #12
   17930:	0049      	lsls	r1, r1, #1
   17932:	005b      	lsls	r3, r3, #1
   17934:	0b2d      	lsrs	r5, r5, #12
   17936:	0d49      	lsrs	r1, r1, #21
   17938:	0b24      	lsrs	r4, r4, #12
   1793a:	0d5b      	lsrs	r3, r3, #21
   1793c:	42b1      	cmp	r1, r6
   1793e:	d004      	beq.n	1794a <__aeabi_dcmpun+0x22>
   17940:	4908      	ldr	r1, [pc, #32]	; (17964 <__aeabi_dcmpun+0x3c>)
   17942:	2000      	movs	r0, #0
   17944:	428b      	cmp	r3, r1
   17946:	d008      	beq.n	1795a <__aeabi_dcmpun+0x32>
   17948:	bd70      	pop	{r4, r5, r6, pc}
   1794a:	4305      	orrs	r5, r0
   1794c:	2001      	movs	r0, #1
   1794e:	2d00      	cmp	r5, #0
   17950:	d1fa      	bne.n	17948 <__aeabi_dcmpun+0x20>
   17952:	4904      	ldr	r1, [pc, #16]	; (17964 <__aeabi_dcmpun+0x3c>)
   17954:	2000      	movs	r0, #0
   17956:	428b      	cmp	r3, r1
   17958:	d1f6      	bne.n	17948 <__aeabi_dcmpun+0x20>
   1795a:	4314      	orrs	r4, r2
   1795c:	0020      	movs	r0, r4
   1795e:	1e44      	subs	r4, r0, #1
   17960:	41a0      	sbcs	r0, r4
   17962:	e7f1      	b.n	17948 <__aeabi_dcmpun+0x20>
   17964:	000007ff 	.word	0x000007ff

00017968 <__aeabi_d2iz>:
   17968:	b530      	push	{r4, r5, lr}
   1796a:	4d13      	ldr	r5, [pc, #76]	; (179b8 <__aeabi_d2iz+0x50>)
   1796c:	030a      	lsls	r2, r1, #12
   1796e:	004b      	lsls	r3, r1, #1
   17970:	0b12      	lsrs	r2, r2, #12
   17972:	0d5b      	lsrs	r3, r3, #21
   17974:	0fc9      	lsrs	r1, r1, #31
   17976:	2400      	movs	r4, #0
   17978:	42ab      	cmp	r3, r5
   1797a:	dd10      	ble.n	1799e <__aeabi_d2iz+0x36>
   1797c:	4c0f      	ldr	r4, [pc, #60]	; (179bc <__aeabi_d2iz+0x54>)
   1797e:	42a3      	cmp	r3, r4
   17980:	dc0f      	bgt.n	179a2 <__aeabi_d2iz+0x3a>
   17982:	2480      	movs	r4, #128	; 0x80
   17984:	4d0e      	ldr	r5, [pc, #56]	; (179c0 <__aeabi_d2iz+0x58>)
   17986:	0364      	lsls	r4, r4, #13
   17988:	4322      	orrs	r2, r4
   1798a:	1aed      	subs	r5, r5, r3
   1798c:	2d1f      	cmp	r5, #31
   1798e:	dd0b      	ble.n	179a8 <__aeabi_d2iz+0x40>
   17990:	480c      	ldr	r0, [pc, #48]	; (179c4 <__aeabi_d2iz+0x5c>)
   17992:	1ac3      	subs	r3, r0, r3
   17994:	40da      	lsrs	r2, r3
   17996:	4254      	negs	r4, r2
   17998:	2900      	cmp	r1, #0
   1799a:	d100      	bne.n	1799e <__aeabi_d2iz+0x36>
   1799c:	0014      	movs	r4, r2
   1799e:	0020      	movs	r0, r4
   179a0:	bd30      	pop	{r4, r5, pc}
   179a2:	4b09      	ldr	r3, [pc, #36]	; (179c8 <__aeabi_d2iz+0x60>)
   179a4:	18cc      	adds	r4, r1, r3
   179a6:	e7fa      	b.n	1799e <__aeabi_d2iz+0x36>
   179a8:	4c08      	ldr	r4, [pc, #32]	; (179cc <__aeabi_d2iz+0x64>)
   179aa:	40e8      	lsrs	r0, r5
   179ac:	46a4      	mov	ip, r4
   179ae:	4463      	add	r3, ip
   179b0:	409a      	lsls	r2, r3
   179b2:	4302      	orrs	r2, r0
   179b4:	e7ef      	b.n	17996 <__aeabi_d2iz+0x2e>
   179b6:	46c0      	nop			; (mov r8, r8)
   179b8:	000003fe 	.word	0x000003fe
   179bc:	0000041d 	.word	0x0000041d
   179c0:	00000433 	.word	0x00000433
   179c4:	00000413 	.word	0x00000413
   179c8:	7fffffff 	.word	0x7fffffff
   179cc:	fffffbed 	.word	0xfffffbed

000179d0 <__aeabi_i2d>:
   179d0:	b570      	push	{r4, r5, r6, lr}
   179d2:	2800      	cmp	r0, #0
   179d4:	d030      	beq.n	17a38 <__aeabi_i2d+0x68>
   179d6:	17c3      	asrs	r3, r0, #31
   179d8:	18c4      	adds	r4, r0, r3
   179da:	405c      	eors	r4, r3
   179dc:	0fc5      	lsrs	r5, r0, #31
   179de:	0020      	movs	r0, r4
   179e0:	f000 f8c2 	bl	17b68 <__clzsi2>
   179e4:	4b17      	ldr	r3, [pc, #92]	; (17a44 <__aeabi_i2d+0x74>)
   179e6:	4a18      	ldr	r2, [pc, #96]	; (17a48 <__aeabi_i2d+0x78>)
   179e8:	1a1b      	subs	r3, r3, r0
   179ea:	1ad2      	subs	r2, r2, r3
   179ec:	2a1f      	cmp	r2, #31
   179ee:	dd18      	ble.n	17a22 <__aeabi_i2d+0x52>
   179f0:	4a16      	ldr	r2, [pc, #88]	; (17a4c <__aeabi_i2d+0x7c>)
   179f2:	1ad2      	subs	r2, r2, r3
   179f4:	4094      	lsls	r4, r2
   179f6:	2200      	movs	r2, #0
   179f8:	0324      	lsls	r4, r4, #12
   179fa:	055b      	lsls	r3, r3, #21
   179fc:	0b24      	lsrs	r4, r4, #12
   179fe:	0d5b      	lsrs	r3, r3, #21
   17a00:	2100      	movs	r1, #0
   17a02:	0010      	movs	r0, r2
   17a04:	0324      	lsls	r4, r4, #12
   17a06:	0d0a      	lsrs	r2, r1, #20
   17a08:	0b24      	lsrs	r4, r4, #12
   17a0a:	0512      	lsls	r2, r2, #20
   17a0c:	4322      	orrs	r2, r4
   17a0e:	4c10      	ldr	r4, [pc, #64]	; (17a50 <__aeabi_i2d+0x80>)
   17a10:	051b      	lsls	r3, r3, #20
   17a12:	4022      	ands	r2, r4
   17a14:	4313      	orrs	r3, r2
   17a16:	005b      	lsls	r3, r3, #1
   17a18:	07ed      	lsls	r5, r5, #31
   17a1a:	085b      	lsrs	r3, r3, #1
   17a1c:	432b      	orrs	r3, r5
   17a1e:	0019      	movs	r1, r3
   17a20:	bd70      	pop	{r4, r5, r6, pc}
   17a22:	0021      	movs	r1, r4
   17a24:	4091      	lsls	r1, r2
   17a26:	000a      	movs	r2, r1
   17a28:	210b      	movs	r1, #11
   17a2a:	1a08      	subs	r0, r1, r0
   17a2c:	40c4      	lsrs	r4, r0
   17a2e:	055b      	lsls	r3, r3, #21
   17a30:	0324      	lsls	r4, r4, #12
   17a32:	0b24      	lsrs	r4, r4, #12
   17a34:	0d5b      	lsrs	r3, r3, #21
   17a36:	e7e3      	b.n	17a00 <__aeabi_i2d+0x30>
   17a38:	2500      	movs	r5, #0
   17a3a:	2300      	movs	r3, #0
   17a3c:	2400      	movs	r4, #0
   17a3e:	2200      	movs	r2, #0
   17a40:	e7de      	b.n	17a00 <__aeabi_i2d+0x30>
   17a42:	46c0      	nop			; (mov r8, r8)
   17a44:	0000041e 	.word	0x0000041e
   17a48:	00000433 	.word	0x00000433
   17a4c:	00000413 	.word	0x00000413
   17a50:	800fffff 	.word	0x800fffff

00017a54 <__aeabi_ui2d>:
   17a54:	b510      	push	{r4, lr}
   17a56:	1e04      	subs	r4, r0, #0
   17a58:	d028      	beq.n	17aac <__aeabi_ui2d+0x58>
   17a5a:	f000 f885 	bl	17b68 <__clzsi2>
   17a5e:	4b15      	ldr	r3, [pc, #84]	; (17ab4 <__aeabi_ui2d+0x60>)
   17a60:	4a15      	ldr	r2, [pc, #84]	; (17ab8 <__aeabi_ui2d+0x64>)
   17a62:	1a1b      	subs	r3, r3, r0
   17a64:	1ad2      	subs	r2, r2, r3
   17a66:	2a1f      	cmp	r2, #31
   17a68:	dd15      	ble.n	17a96 <__aeabi_ui2d+0x42>
   17a6a:	4a14      	ldr	r2, [pc, #80]	; (17abc <__aeabi_ui2d+0x68>)
   17a6c:	1ad2      	subs	r2, r2, r3
   17a6e:	4094      	lsls	r4, r2
   17a70:	2200      	movs	r2, #0
   17a72:	0324      	lsls	r4, r4, #12
   17a74:	055b      	lsls	r3, r3, #21
   17a76:	0b24      	lsrs	r4, r4, #12
   17a78:	0d5b      	lsrs	r3, r3, #21
   17a7a:	2100      	movs	r1, #0
   17a7c:	0010      	movs	r0, r2
   17a7e:	0324      	lsls	r4, r4, #12
   17a80:	0d0a      	lsrs	r2, r1, #20
   17a82:	0b24      	lsrs	r4, r4, #12
   17a84:	0512      	lsls	r2, r2, #20
   17a86:	4322      	orrs	r2, r4
   17a88:	4c0d      	ldr	r4, [pc, #52]	; (17ac0 <__aeabi_ui2d+0x6c>)
   17a8a:	051b      	lsls	r3, r3, #20
   17a8c:	4022      	ands	r2, r4
   17a8e:	4313      	orrs	r3, r2
   17a90:	005b      	lsls	r3, r3, #1
   17a92:	0859      	lsrs	r1, r3, #1
   17a94:	bd10      	pop	{r4, pc}
   17a96:	0021      	movs	r1, r4
   17a98:	4091      	lsls	r1, r2
   17a9a:	000a      	movs	r2, r1
   17a9c:	210b      	movs	r1, #11
   17a9e:	1a08      	subs	r0, r1, r0
   17aa0:	40c4      	lsrs	r4, r0
   17aa2:	055b      	lsls	r3, r3, #21
   17aa4:	0324      	lsls	r4, r4, #12
   17aa6:	0b24      	lsrs	r4, r4, #12
   17aa8:	0d5b      	lsrs	r3, r3, #21
   17aaa:	e7e6      	b.n	17a7a <__aeabi_ui2d+0x26>
   17aac:	2300      	movs	r3, #0
   17aae:	2400      	movs	r4, #0
   17ab0:	2200      	movs	r2, #0
   17ab2:	e7e2      	b.n	17a7a <__aeabi_ui2d+0x26>
   17ab4:	0000041e 	.word	0x0000041e
   17ab8:	00000433 	.word	0x00000433
   17abc:	00000413 	.word	0x00000413
   17ac0:	800fffff 	.word	0x800fffff

00017ac4 <__aeabi_f2d>:
   17ac4:	0041      	lsls	r1, r0, #1
   17ac6:	0e09      	lsrs	r1, r1, #24
   17ac8:	1c4b      	adds	r3, r1, #1
   17aca:	b570      	push	{r4, r5, r6, lr}
   17acc:	b2db      	uxtb	r3, r3
   17ace:	0246      	lsls	r6, r0, #9
   17ad0:	0a75      	lsrs	r5, r6, #9
   17ad2:	0fc4      	lsrs	r4, r0, #31
   17ad4:	2b01      	cmp	r3, #1
   17ad6:	dd14      	ble.n	17b02 <__aeabi_f2d+0x3e>
   17ad8:	23e0      	movs	r3, #224	; 0xe0
   17ada:	009b      	lsls	r3, r3, #2
   17adc:	076d      	lsls	r5, r5, #29
   17ade:	0b36      	lsrs	r6, r6, #12
   17ae0:	18cb      	adds	r3, r1, r3
   17ae2:	2100      	movs	r1, #0
   17ae4:	0d0a      	lsrs	r2, r1, #20
   17ae6:	0028      	movs	r0, r5
   17ae8:	0512      	lsls	r2, r2, #20
   17aea:	4d1c      	ldr	r5, [pc, #112]	; (17b5c <__aeabi_f2d+0x98>)
   17aec:	4332      	orrs	r2, r6
   17aee:	055b      	lsls	r3, r3, #21
   17af0:	402a      	ands	r2, r5
   17af2:	085b      	lsrs	r3, r3, #1
   17af4:	4313      	orrs	r3, r2
   17af6:	005b      	lsls	r3, r3, #1
   17af8:	07e4      	lsls	r4, r4, #31
   17afa:	085b      	lsrs	r3, r3, #1
   17afc:	4323      	orrs	r3, r4
   17afe:	0019      	movs	r1, r3
   17b00:	bd70      	pop	{r4, r5, r6, pc}
   17b02:	2900      	cmp	r1, #0
   17b04:	d114      	bne.n	17b30 <__aeabi_f2d+0x6c>
   17b06:	2d00      	cmp	r5, #0
   17b08:	d01e      	beq.n	17b48 <__aeabi_f2d+0x84>
   17b0a:	0028      	movs	r0, r5
   17b0c:	f000 f82c 	bl	17b68 <__clzsi2>
   17b10:	280a      	cmp	r0, #10
   17b12:	dc1c      	bgt.n	17b4e <__aeabi_f2d+0x8a>
   17b14:	230b      	movs	r3, #11
   17b16:	002a      	movs	r2, r5
   17b18:	1a1b      	subs	r3, r3, r0
   17b1a:	40da      	lsrs	r2, r3
   17b1c:	0003      	movs	r3, r0
   17b1e:	3315      	adds	r3, #21
   17b20:	409d      	lsls	r5, r3
   17b22:	4b0f      	ldr	r3, [pc, #60]	; (17b60 <__aeabi_f2d+0x9c>)
   17b24:	0312      	lsls	r2, r2, #12
   17b26:	1a1b      	subs	r3, r3, r0
   17b28:	055b      	lsls	r3, r3, #21
   17b2a:	0b16      	lsrs	r6, r2, #12
   17b2c:	0d5b      	lsrs	r3, r3, #21
   17b2e:	e7d8      	b.n	17ae2 <__aeabi_f2d+0x1e>
   17b30:	2d00      	cmp	r5, #0
   17b32:	d006      	beq.n	17b42 <__aeabi_f2d+0x7e>
   17b34:	0b32      	lsrs	r2, r6, #12
   17b36:	2680      	movs	r6, #128	; 0x80
   17b38:	0336      	lsls	r6, r6, #12
   17b3a:	076d      	lsls	r5, r5, #29
   17b3c:	4316      	orrs	r6, r2
   17b3e:	4b09      	ldr	r3, [pc, #36]	; (17b64 <__aeabi_f2d+0xa0>)
   17b40:	e7cf      	b.n	17ae2 <__aeabi_f2d+0x1e>
   17b42:	4b08      	ldr	r3, [pc, #32]	; (17b64 <__aeabi_f2d+0xa0>)
   17b44:	2600      	movs	r6, #0
   17b46:	e7cc      	b.n	17ae2 <__aeabi_f2d+0x1e>
   17b48:	2300      	movs	r3, #0
   17b4a:	2600      	movs	r6, #0
   17b4c:	e7c9      	b.n	17ae2 <__aeabi_f2d+0x1e>
   17b4e:	0003      	movs	r3, r0
   17b50:	002a      	movs	r2, r5
   17b52:	3b0b      	subs	r3, #11
   17b54:	409a      	lsls	r2, r3
   17b56:	2500      	movs	r5, #0
   17b58:	e7e3      	b.n	17b22 <__aeabi_f2d+0x5e>
   17b5a:	46c0      	nop			; (mov r8, r8)
   17b5c:	800fffff 	.word	0x800fffff
   17b60:	00000389 	.word	0x00000389
   17b64:	000007ff 	.word	0x000007ff

00017b68 <__clzsi2>:
   17b68:	211c      	movs	r1, #28
   17b6a:	2301      	movs	r3, #1
   17b6c:	041b      	lsls	r3, r3, #16
   17b6e:	4298      	cmp	r0, r3
   17b70:	d301      	bcc.n	17b76 <__clzsi2+0xe>
   17b72:	0c00      	lsrs	r0, r0, #16
   17b74:	3910      	subs	r1, #16
   17b76:	0a1b      	lsrs	r3, r3, #8
   17b78:	4298      	cmp	r0, r3
   17b7a:	d301      	bcc.n	17b80 <__clzsi2+0x18>
   17b7c:	0a00      	lsrs	r0, r0, #8
   17b7e:	3908      	subs	r1, #8
   17b80:	091b      	lsrs	r3, r3, #4
   17b82:	4298      	cmp	r0, r3
   17b84:	d301      	bcc.n	17b8a <__clzsi2+0x22>
   17b86:	0900      	lsrs	r0, r0, #4
   17b88:	3904      	subs	r1, #4
   17b8a:	a202      	add	r2, pc, #8	; (adr r2, 17b94 <__clzsi2+0x2c>)
   17b8c:	5c10      	ldrb	r0, [r2, r0]
   17b8e:	1840      	adds	r0, r0, r1
   17b90:	4770      	bx	lr
   17b92:	46c0      	nop			; (mov r8, r8)
   17b94:	02020304 	.word	0x02020304
   17b98:	01010101 	.word	0x01010101
	...

00017ba4 <__clzdi2>:
   17ba4:	b510      	push	{r4, lr}
   17ba6:	2900      	cmp	r1, #0
   17ba8:	d103      	bne.n	17bb2 <__clzdi2+0xe>
   17baa:	f7ff ffdd 	bl	17b68 <__clzsi2>
   17bae:	3020      	adds	r0, #32
   17bb0:	e002      	b.n	17bb8 <__clzdi2+0x14>
   17bb2:	1c08      	adds	r0, r1, #0
   17bb4:	f7ff ffd8 	bl	17b68 <__clzsi2>
   17bb8:	bd10      	pop	{r4, pc}
   17bba:	46c0      	nop			; (mov r8, r8)

00017bbc <atoi>:
   17bbc:	b510      	push	{r4, lr}
   17bbe:	220a      	movs	r2, #10
   17bc0:	2100      	movs	r1, #0
   17bc2:	f000 fadd 	bl	18180 <strtol>
   17bc6:	bd10      	pop	{r4, pc}

00017bc8 <calloc>:
   17bc8:	b510      	push	{r4, lr}
   17bca:	4b03      	ldr	r3, [pc, #12]	; (17bd8 <calloc+0x10>)
   17bcc:	000a      	movs	r2, r1
   17bce:	0001      	movs	r1, r0
   17bd0:	6818      	ldr	r0, [r3, #0]
   17bd2:	f000 f888 	bl	17ce6 <_calloc_r>
   17bd6:	bd10      	pop	{r4, pc}
   17bd8:	2000002c 	.word	0x2000002c

00017bdc <__errno>:
   17bdc:	4b01      	ldr	r3, [pc, #4]	; (17be4 <__errno+0x8>)
   17bde:	6818      	ldr	r0, [r3, #0]
   17be0:	4770      	bx	lr
   17be2:	46c0      	nop			; (mov r8, r8)
   17be4:	2000002c 	.word	0x2000002c

00017be8 <__libc_init_array>:
   17be8:	b570      	push	{r4, r5, r6, lr}
   17bea:	2600      	movs	r6, #0
   17bec:	4d0c      	ldr	r5, [pc, #48]	; (17c20 <__libc_init_array+0x38>)
   17bee:	4c0d      	ldr	r4, [pc, #52]	; (17c24 <__libc_init_array+0x3c>)
   17bf0:	1b64      	subs	r4, r4, r5
   17bf2:	10a4      	asrs	r4, r4, #2
   17bf4:	42a6      	cmp	r6, r4
   17bf6:	d109      	bne.n	17c0c <__libc_init_array+0x24>
   17bf8:	2600      	movs	r6, #0
   17bfa:	f002 f893 	bl	19d24 <_init>
   17bfe:	4d0a      	ldr	r5, [pc, #40]	; (17c28 <__libc_init_array+0x40>)
   17c00:	4c0a      	ldr	r4, [pc, #40]	; (17c2c <__libc_init_array+0x44>)
   17c02:	1b64      	subs	r4, r4, r5
   17c04:	10a4      	asrs	r4, r4, #2
   17c06:	42a6      	cmp	r6, r4
   17c08:	d105      	bne.n	17c16 <__libc_init_array+0x2e>
   17c0a:	bd70      	pop	{r4, r5, r6, pc}
   17c0c:	00b3      	lsls	r3, r6, #2
   17c0e:	58eb      	ldr	r3, [r5, r3]
   17c10:	4798      	blx	r3
   17c12:	3601      	adds	r6, #1
   17c14:	e7ee      	b.n	17bf4 <__libc_init_array+0xc>
   17c16:	00b3      	lsls	r3, r6, #2
   17c18:	58eb      	ldr	r3, [r5, r3]
   17c1a:	4798      	blx	r3
   17c1c:	3601      	adds	r6, #1
   17c1e:	e7f2      	b.n	17c06 <__libc_init_array+0x1e>
   17c20:	00019d30 	.word	0x00019d30
   17c24:	00019d30 	.word	0x00019d30
   17c28:	00019d30 	.word	0x00019d30
   17c2c:	00019d34 	.word	0x00019d34

00017c30 <__locale_ctype_ptr_l>:
   17c30:	30ec      	adds	r0, #236	; 0xec
   17c32:	6800      	ldr	r0, [r0, #0]
   17c34:	4770      	bx	lr
	...

00017c38 <__locale_ctype_ptr>:
   17c38:	4b04      	ldr	r3, [pc, #16]	; (17c4c <__locale_ctype_ptr+0x14>)
   17c3a:	681b      	ldr	r3, [r3, #0]
   17c3c:	6a1b      	ldr	r3, [r3, #32]
   17c3e:	2b00      	cmp	r3, #0
   17c40:	d100      	bne.n	17c44 <__locale_ctype_ptr+0xc>
   17c42:	4b03      	ldr	r3, [pc, #12]	; (17c50 <__locale_ctype_ptr+0x18>)
   17c44:	33ec      	adds	r3, #236	; 0xec
   17c46:	6818      	ldr	r0, [r3, #0]
   17c48:	4770      	bx	lr
   17c4a:	46c0      	nop			; (mov r8, r8)
   17c4c:	2000002c 	.word	0x2000002c
   17c50:	20000090 	.word	0x20000090

00017c54 <malloc>:
   17c54:	b510      	push	{r4, lr}
   17c56:	4b03      	ldr	r3, [pc, #12]	; (17c64 <malloc+0x10>)
   17c58:	0001      	movs	r1, r0
   17c5a:	6818      	ldr	r0, [r3, #0]
   17c5c:	f000 f89c 	bl	17d98 <_malloc_r>
   17c60:	bd10      	pop	{r4, pc}
   17c62:	46c0      	nop			; (mov r8, r8)
   17c64:	2000002c 	.word	0x2000002c

00017c68 <free>:
   17c68:	b510      	push	{r4, lr}
   17c6a:	4b03      	ldr	r3, [pc, #12]	; (17c78 <free+0x10>)
   17c6c:	0001      	movs	r1, r0
   17c6e:	6818      	ldr	r0, [r3, #0]
   17c70:	f000 f848 	bl	17d04 <_free_r>
   17c74:	bd10      	pop	{r4, pc}
   17c76:	46c0      	nop			; (mov r8, r8)
   17c78:	2000002c 	.word	0x2000002c

00017c7c <__ascii_mbtowc>:
   17c7c:	b082      	sub	sp, #8
   17c7e:	2900      	cmp	r1, #0
   17c80:	d100      	bne.n	17c84 <__ascii_mbtowc+0x8>
   17c82:	a901      	add	r1, sp, #4
   17c84:	1e10      	subs	r0, r2, #0
   17c86:	d006      	beq.n	17c96 <__ascii_mbtowc+0x1a>
   17c88:	2b00      	cmp	r3, #0
   17c8a:	d006      	beq.n	17c9a <__ascii_mbtowc+0x1e>
   17c8c:	7813      	ldrb	r3, [r2, #0]
   17c8e:	600b      	str	r3, [r1, #0]
   17c90:	7810      	ldrb	r0, [r2, #0]
   17c92:	1e43      	subs	r3, r0, #1
   17c94:	4198      	sbcs	r0, r3
   17c96:	b002      	add	sp, #8
   17c98:	4770      	bx	lr
   17c9a:	2002      	movs	r0, #2
   17c9c:	4240      	negs	r0, r0
   17c9e:	e7fa      	b.n	17c96 <__ascii_mbtowc+0x1a>

00017ca0 <memcpy>:
   17ca0:	2300      	movs	r3, #0
   17ca2:	b510      	push	{r4, lr}
   17ca4:	429a      	cmp	r2, r3
   17ca6:	d100      	bne.n	17caa <memcpy+0xa>
   17ca8:	bd10      	pop	{r4, pc}
   17caa:	5ccc      	ldrb	r4, [r1, r3]
   17cac:	54c4      	strb	r4, [r0, r3]
   17cae:	3301      	adds	r3, #1
   17cb0:	e7f8      	b.n	17ca4 <memcpy+0x4>

00017cb2 <memmove>:
   17cb2:	b510      	push	{r4, lr}
   17cb4:	4288      	cmp	r0, r1
   17cb6:	d902      	bls.n	17cbe <memmove+0xc>
   17cb8:	188b      	adds	r3, r1, r2
   17cba:	4298      	cmp	r0, r3
   17cbc:	d308      	bcc.n	17cd0 <memmove+0x1e>
   17cbe:	2300      	movs	r3, #0
   17cc0:	429a      	cmp	r2, r3
   17cc2:	d007      	beq.n	17cd4 <memmove+0x22>
   17cc4:	5ccc      	ldrb	r4, [r1, r3]
   17cc6:	54c4      	strb	r4, [r0, r3]
   17cc8:	3301      	adds	r3, #1
   17cca:	e7f9      	b.n	17cc0 <memmove+0xe>
   17ccc:	5c8b      	ldrb	r3, [r1, r2]
   17cce:	5483      	strb	r3, [r0, r2]
   17cd0:	3a01      	subs	r2, #1
   17cd2:	d2fb      	bcs.n	17ccc <memmove+0x1a>
   17cd4:	bd10      	pop	{r4, pc}

00017cd6 <memset>:
   17cd6:	0003      	movs	r3, r0
   17cd8:	1882      	adds	r2, r0, r2
   17cda:	4293      	cmp	r3, r2
   17cdc:	d100      	bne.n	17ce0 <memset+0xa>
   17cde:	4770      	bx	lr
   17ce0:	7019      	strb	r1, [r3, #0]
   17ce2:	3301      	adds	r3, #1
   17ce4:	e7f9      	b.n	17cda <memset+0x4>

00017ce6 <_calloc_r>:
   17ce6:	434a      	muls	r2, r1
   17ce8:	b570      	push	{r4, r5, r6, lr}
   17cea:	0011      	movs	r1, r2
   17cec:	0014      	movs	r4, r2
   17cee:	f000 f853 	bl	17d98 <_malloc_r>
   17cf2:	1e05      	subs	r5, r0, #0
   17cf4:	d003      	beq.n	17cfe <_calloc_r+0x18>
   17cf6:	0022      	movs	r2, r4
   17cf8:	2100      	movs	r1, #0
   17cfa:	f7ff ffec 	bl	17cd6 <memset>
   17cfe:	0028      	movs	r0, r5
   17d00:	bd70      	pop	{r4, r5, r6, pc}
	...

00017d04 <_free_r>:
   17d04:	b570      	push	{r4, r5, r6, lr}
   17d06:	0005      	movs	r5, r0
   17d08:	2900      	cmp	r1, #0
   17d0a:	d010      	beq.n	17d2e <_free_r+0x2a>
   17d0c:	1f0c      	subs	r4, r1, #4
   17d0e:	6823      	ldr	r3, [r4, #0]
   17d10:	2b00      	cmp	r3, #0
   17d12:	da00      	bge.n	17d16 <_free_r+0x12>
   17d14:	18e4      	adds	r4, r4, r3
   17d16:	0028      	movs	r0, r5
   17d18:	f000 fab4 	bl	18284 <__malloc_lock>
   17d1c:	4a1d      	ldr	r2, [pc, #116]	; (17d94 <_free_r+0x90>)
   17d1e:	6813      	ldr	r3, [r2, #0]
   17d20:	2b00      	cmp	r3, #0
   17d22:	d105      	bne.n	17d30 <_free_r+0x2c>
   17d24:	6063      	str	r3, [r4, #4]
   17d26:	6014      	str	r4, [r2, #0]
   17d28:	0028      	movs	r0, r5
   17d2a:	f000 faac 	bl	18286 <__malloc_unlock>
   17d2e:	bd70      	pop	{r4, r5, r6, pc}
   17d30:	42a3      	cmp	r3, r4
   17d32:	d909      	bls.n	17d48 <_free_r+0x44>
   17d34:	6821      	ldr	r1, [r4, #0]
   17d36:	1860      	adds	r0, r4, r1
   17d38:	4283      	cmp	r3, r0
   17d3a:	d1f3      	bne.n	17d24 <_free_r+0x20>
   17d3c:	6818      	ldr	r0, [r3, #0]
   17d3e:	685b      	ldr	r3, [r3, #4]
   17d40:	1841      	adds	r1, r0, r1
   17d42:	6021      	str	r1, [r4, #0]
   17d44:	e7ee      	b.n	17d24 <_free_r+0x20>
   17d46:	0013      	movs	r3, r2
   17d48:	685a      	ldr	r2, [r3, #4]
   17d4a:	2a00      	cmp	r2, #0
   17d4c:	d001      	beq.n	17d52 <_free_r+0x4e>
   17d4e:	42a2      	cmp	r2, r4
   17d50:	d9f9      	bls.n	17d46 <_free_r+0x42>
   17d52:	6819      	ldr	r1, [r3, #0]
   17d54:	1858      	adds	r0, r3, r1
   17d56:	42a0      	cmp	r0, r4
   17d58:	d10b      	bne.n	17d72 <_free_r+0x6e>
   17d5a:	6820      	ldr	r0, [r4, #0]
   17d5c:	1809      	adds	r1, r1, r0
   17d5e:	1858      	adds	r0, r3, r1
   17d60:	6019      	str	r1, [r3, #0]
   17d62:	4282      	cmp	r2, r0
   17d64:	d1e0      	bne.n	17d28 <_free_r+0x24>
   17d66:	6810      	ldr	r0, [r2, #0]
   17d68:	6852      	ldr	r2, [r2, #4]
   17d6a:	1841      	adds	r1, r0, r1
   17d6c:	6019      	str	r1, [r3, #0]
   17d6e:	605a      	str	r2, [r3, #4]
   17d70:	e7da      	b.n	17d28 <_free_r+0x24>
   17d72:	42a0      	cmp	r0, r4
   17d74:	d902      	bls.n	17d7c <_free_r+0x78>
   17d76:	230c      	movs	r3, #12
   17d78:	602b      	str	r3, [r5, #0]
   17d7a:	e7d5      	b.n	17d28 <_free_r+0x24>
   17d7c:	6821      	ldr	r1, [r4, #0]
   17d7e:	1860      	adds	r0, r4, r1
   17d80:	4282      	cmp	r2, r0
   17d82:	d103      	bne.n	17d8c <_free_r+0x88>
   17d84:	6810      	ldr	r0, [r2, #0]
   17d86:	6852      	ldr	r2, [r2, #4]
   17d88:	1841      	adds	r1, r0, r1
   17d8a:	6021      	str	r1, [r4, #0]
   17d8c:	6062      	str	r2, [r4, #4]
   17d8e:	605c      	str	r4, [r3, #4]
   17d90:	e7ca      	b.n	17d28 <_free_r+0x24>
   17d92:	46c0      	nop			; (mov r8, r8)
   17d94:	20000514 	.word	0x20000514

00017d98 <_malloc_r>:
   17d98:	2303      	movs	r3, #3
   17d9a:	b570      	push	{r4, r5, r6, lr}
   17d9c:	1ccd      	adds	r5, r1, #3
   17d9e:	439d      	bics	r5, r3
   17da0:	3508      	adds	r5, #8
   17da2:	0006      	movs	r6, r0
   17da4:	2d0c      	cmp	r5, #12
   17da6:	d21e      	bcs.n	17de6 <_malloc_r+0x4e>
   17da8:	250c      	movs	r5, #12
   17daa:	42a9      	cmp	r1, r5
   17dac:	d81d      	bhi.n	17dea <_malloc_r+0x52>
   17dae:	0030      	movs	r0, r6
   17db0:	f000 fa68 	bl	18284 <__malloc_lock>
   17db4:	4a25      	ldr	r2, [pc, #148]	; (17e4c <_malloc_r+0xb4>)
   17db6:	6814      	ldr	r4, [r2, #0]
   17db8:	0021      	movs	r1, r4
   17dba:	2900      	cmp	r1, #0
   17dbc:	d119      	bne.n	17df2 <_malloc_r+0x5a>
   17dbe:	4c24      	ldr	r4, [pc, #144]	; (17e50 <_malloc_r+0xb8>)
   17dc0:	6823      	ldr	r3, [r4, #0]
   17dc2:	2b00      	cmp	r3, #0
   17dc4:	d103      	bne.n	17dce <_malloc_r+0x36>
   17dc6:	0030      	movs	r0, r6
   17dc8:	f000 f844 	bl	17e54 <_sbrk_r>
   17dcc:	6020      	str	r0, [r4, #0]
   17dce:	0029      	movs	r1, r5
   17dd0:	0030      	movs	r0, r6
   17dd2:	f000 f83f 	bl	17e54 <_sbrk_r>
   17dd6:	1c43      	adds	r3, r0, #1
   17dd8:	d12c      	bne.n	17e34 <_malloc_r+0x9c>
   17dda:	230c      	movs	r3, #12
   17ddc:	0030      	movs	r0, r6
   17dde:	6033      	str	r3, [r6, #0]
   17de0:	f000 fa51 	bl	18286 <__malloc_unlock>
   17de4:	e003      	b.n	17dee <_malloc_r+0x56>
   17de6:	2d00      	cmp	r5, #0
   17de8:	dadf      	bge.n	17daa <_malloc_r+0x12>
   17dea:	230c      	movs	r3, #12
   17dec:	6033      	str	r3, [r6, #0]
   17dee:	2000      	movs	r0, #0
   17df0:	bd70      	pop	{r4, r5, r6, pc}
   17df2:	680b      	ldr	r3, [r1, #0]
   17df4:	1b5b      	subs	r3, r3, r5
   17df6:	d41a      	bmi.n	17e2e <_malloc_r+0x96>
   17df8:	2b0b      	cmp	r3, #11
   17dfa:	d903      	bls.n	17e04 <_malloc_r+0x6c>
   17dfc:	600b      	str	r3, [r1, #0]
   17dfe:	18cc      	adds	r4, r1, r3
   17e00:	6025      	str	r5, [r4, #0]
   17e02:	e003      	b.n	17e0c <_malloc_r+0x74>
   17e04:	428c      	cmp	r4, r1
   17e06:	d10e      	bne.n	17e26 <_malloc_r+0x8e>
   17e08:	6863      	ldr	r3, [r4, #4]
   17e0a:	6013      	str	r3, [r2, #0]
   17e0c:	0030      	movs	r0, r6
   17e0e:	f000 fa3a 	bl	18286 <__malloc_unlock>
   17e12:	0020      	movs	r0, r4
   17e14:	2207      	movs	r2, #7
   17e16:	300b      	adds	r0, #11
   17e18:	1d23      	adds	r3, r4, #4
   17e1a:	4390      	bics	r0, r2
   17e1c:	1ac3      	subs	r3, r0, r3
   17e1e:	d0e7      	beq.n	17df0 <_malloc_r+0x58>
   17e20:	425a      	negs	r2, r3
   17e22:	50e2      	str	r2, [r4, r3]
   17e24:	e7e4      	b.n	17df0 <_malloc_r+0x58>
   17e26:	684b      	ldr	r3, [r1, #4]
   17e28:	6063      	str	r3, [r4, #4]
   17e2a:	000c      	movs	r4, r1
   17e2c:	e7ee      	b.n	17e0c <_malloc_r+0x74>
   17e2e:	000c      	movs	r4, r1
   17e30:	6849      	ldr	r1, [r1, #4]
   17e32:	e7c2      	b.n	17dba <_malloc_r+0x22>
   17e34:	2303      	movs	r3, #3
   17e36:	1cc4      	adds	r4, r0, #3
   17e38:	439c      	bics	r4, r3
   17e3a:	42a0      	cmp	r0, r4
   17e3c:	d0e0      	beq.n	17e00 <_malloc_r+0x68>
   17e3e:	1a21      	subs	r1, r4, r0
   17e40:	0030      	movs	r0, r6
   17e42:	f000 f807 	bl	17e54 <_sbrk_r>
   17e46:	1c43      	adds	r3, r0, #1
   17e48:	d1da      	bne.n	17e00 <_malloc_r+0x68>
   17e4a:	e7c6      	b.n	17dda <_malloc_r+0x42>
   17e4c:	20000514 	.word	0x20000514
   17e50:	20000518 	.word	0x20000518

00017e54 <_sbrk_r>:
   17e54:	2300      	movs	r3, #0
   17e56:	b570      	push	{r4, r5, r6, lr}
   17e58:	4c06      	ldr	r4, [pc, #24]	; (17e74 <_sbrk_r+0x20>)
   17e5a:	0005      	movs	r5, r0
   17e5c:	0008      	movs	r0, r1
   17e5e:	6023      	str	r3, [r4, #0]
   17e60:	f7fb ff9e 	bl	13da0 <_sbrk>
   17e64:	1c43      	adds	r3, r0, #1
   17e66:	d103      	bne.n	17e70 <_sbrk_r+0x1c>
   17e68:	6823      	ldr	r3, [r4, #0]
   17e6a:	2b00      	cmp	r3, #0
   17e6c:	d000      	beq.n	17e70 <_sbrk_r+0x1c>
   17e6e:	602b      	str	r3, [r5, #0]
   17e70:	bd70      	pop	{r4, r5, r6, pc}
   17e72:	46c0      	nop			; (mov r8, r8)
   17e74:	20000938 	.word	0x20000938

00017e78 <sniprintf>:
   17e78:	b40c      	push	{r2, r3}
   17e7a:	b530      	push	{r4, r5, lr}
   17e7c:	4b16      	ldr	r3, [pc, #88]	; (17ed8 <sniprintf+0x60>)
   17e7e:	b09d      	sub	sp, #116	; 0x74
   17e80:	1e0c      	subs	r4, r1, #0
   17e82:	681d      	ldr	r5, [r3, #0]
   17e84:	da08      	bge.n	17e98 <sniprintf+0x20>
   17e86:	238b      	movs	r3, #139	; 0x8b
   17e88:	2001      	movs	r0, #1
   17e8a:	602b      	str	r3, [r5, #0]
   17e8c:	4240      	negs	r0, r0
   17e8e:	b01d      	add	sp, #116	; 0x74
   17e90:	bc30      	pop	{r4, r5}
   17e92:	bc08      	pop	{r3}
   17e94:	b002      	add	sp, #8
   17e96:	4718      	bx	r3
   17e98:	2382      	movs	r3, #130	; 0x82
   17e9a:	a902      	add	r1, sp, #8
   17e9c:	009b      	lsls	r3, r3, #2
   17e9e:	818b      	strh	r3, [r1, #12]
   17ea0:	2300      	movs	r3, #0
   17ea2:	9002      	str	r0, [sp, #8]
   17ea4:	6108      	str	r0, [r1, #16]
   17ea6:	429c      	cmp	r4, r3
   17ea8:	d000      	beq.n	17eac <sniprintf+0x34>
   17eaa:	1e63      	subs	r3, r4, #1
   17eac:	608b      	str	r3, [r1, #8]
   17eae:	614b      	str	r3, [r1, #20]
   17eb0:	2301      	movs	r3, #1
   17eb2:	425b      	negs	r3, r3
   17eb4:	81cb      	strh	r3, [r1, #14]
   17eb6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17eb8:	ab21      	add	r3, sp, #132	; 0x84
   17eba:	0028      	movs	r0, r5
   17ebc:	9301      	str	r3, [sp, #4]
   17ebe:	f000 fa45 	bl	1834c <_svfiprintf_r>
   17ec2:	1c43      	adds	r3, r0, #1
   17ec4:	da01      	bge.n	17eca <sniprintf+0x52>
   17ec6:	238b      	movs	r3, #139	; 0x8b
   17ec8:	602b      	str	r3, [r5, #0]
   17eca:	2c00      	cmp	r4, #0
   17ecc:	d0df      	beq.n	17e8e <sniprintf+0x16>
   17ece:	2300      	movs	r3, #0
   17ed0:	9a02      	ldr	r2, [sp, #8]
   17ed2:	7013      	strb	r3, [r2, #0]
   17ed4:	e7db      	b.n	17e8e <sniprintf+0x16>
   17ed6:	46c0      	nop			; (mov r8, r8)
   17ed8:	2000002c 	.word	0x2000002c

00017edc <siprintf>:
   17edc:	b40e      	push	{r1, r2, r3}
   17ede:	b510      	push	{r4, lr}
   17ee0:	b09d      	sub	sp, #116	; 0x74
   17ee2:	a902      	add	r1, sp, #8
   17ee4:	9002      	str	r0, [sp, #8]
   17ee6:	6108      	str	r0, [r1, #16]
   17ee8:	480b      	ldr	r0, [pc, #44]	; (17f18 <siprintf+0x3c>)
   17eea:	2482      	movs	r4, #130	; 0x82
   17eec:	6088      	str	r0, [r1, #8]
   17eee:	6148      	str	r0, [r1, #20]
   17ef0:	2001      	movs	r0, #1
   17ef2:	4240      	negs	r0, r0
   17ef4:	ab1f      	add	r3, sp, #124	; 0x7c
   17ef6:	81c8      	strh	r0, [r1, #14]
   17ef8:	4808      	ldr	r0, [pc, #32]	; (17f1c <siprintf+0x40>)
   17efa:	cb04      	ldmia	r3!, {r2}
   17efc:	00a4      	lsls	r4, r4, #2
   17efe:	6800      	ldr	r0, [r0, #0]
   17f00:	9301      	str	r3, [sp, #4]
   17f02:	818c      	strh	r4, [r1, #12]
   17f04:	f000 fa22 	bl	1834c <_svfiprintf_r>
   17f08:	2300      	movs	r3, #0
   17f0a:	9a02      	ldr	r2, [sp, #8]
   17f0c:	7013      	strb	r3, [r2, #0]
   17f0e:	b01d      	add	sp, #116	; 0x74
   17f10:	bc10      	pop	{r4}
   17f12:	bc08      	pop	{r3}
   17f14:	b003      	add	sp, #12
   17f16:	4718      	bx	r3
   17f18:	7fffffff 	.word	0x7fffffff
   17f1c:	2000002c 	.word	0x2000002c

00017f20 <strcat>:
   17f20:	0002      	movs	r2, r0
   17f22:	b510      	push	{r4, lr}
   17f24:	7813      	ldrb	r3, [r2, #0]
   17f26:	2b00      	cmp	r3, #0
   17f28:	d105      	bne.n	17f36 <strcat+0x16>
   17f2a:	5ccc      	ldrb	r4, [r1, r3]
   17f2c:	54d4      	strb	r4, [r2, r3]
   17f2e:	3301      	adds	r3, #1
   17f30:	2c00      	cmp	r4, #0
   17f32:	d1fa      	bne.n	17f2a <strcat+0xa>
   17f34:	bd10      	pop	{r4, pc}
   17f36:	3201      	adds	r2, #1
   17f38:	e7f4      	b.n	17f24 <strcat+0x4>

00017f3a <strchr>:
   17f3a:	b2c9      	uxtb	r1, r1
   17f3c:	7803      	ldrb	r3, [r0, #0]
   17f3e:	2b00      	cmp	r3, #0
   17f40:	d004      	beq.n	17f4c <strchr+0x12>
   17f42:	4299      	cmp	r1, r3
   17f44:	d100      	bne.n	17f48 <strchr+0xe>
   17f46:	4770      	bx	lr
   17f48:	3001      	adds	r0, #1
   17f4a:	e7f7      	b.n	17f3c <strchr+0x2>
   17f4c:	424b      	negs	r3, r1
   17f4e:	4159      	adcs	r1, r3
   17f50:	4249      	negs	r1, r1
   17f52:	4008      	ands	r0, r1
   17f54:	e7f7      	b.n	17f46 <strchr+0xc>

00017f56 <strcpy>:
   17f56:	1c03      	adds	r3, r0, #0
   17f58:	780a      	ldrb	r2, [r1, #0]
   17f5a:	3101      	adds	r1, #1
   17f5c:	701a      	strb	r2, [r3, #0]
   17f5e:	3301      	adds	r3, #1
   17f60:	2a00      	cmp	r2, #0
   17f62:	d1f9      	bne.n	17f58 <strcpy+0x2>
   17f64:	4770      	bx	lr

00017f66 <strlen>:
   17f66:	2300      	movs	r3, #0
   17f68:	5cc2      	ldrb	r2, [r0, r3]
   17f6a:	3301      	adds	r3, #1
   17f6c:	2a00      	cmp	r2, #0
   17f6e:	d1fb      	bne.n	17f68 <strlen+0x2>
   17f70:	1e58      	subs	r0, r3, #1
   17f72:	4770      	bx	lr

00017f74 <strncmp>:
   17f74:	2300      	movs	r3, #0
   17f76:	b530      	push	{r4, r5, lr}
   17f78:	429a      	cmp	r2, r3
   17f7a:	d00a      	beq.n	17f92 <strncmp+0x1e>
   17f7c:	3a01      	subs	r2, #1
   17f7e:	5cc4      	ldrb	r4, [r0, r3]
   17f80:	5ccd      	ldrb	r5, [r1, r3]
   17f82:	42ac      	cmp	r4, r5
   17f84:	d104      	bne.n	17f90 <strncmp+0x1c>
   17f86:	429a      	cmp	r2, r3
   17f88:	d002      	beq.n	17f90 <strncmp+0x1c>
   17f8a:	3301      	adds	r3, #1
   17f8c:	2c00      	cmp	r4, #0
   17f8e:	d1f6      	bne.n	17f7e <strncmp+0xa>
   17f90:	1b63      	subs	r3, r4, r5
   17f92:	0018      	movs	r0, r3
   17f94:	bd30      	pop	{r4, r5, pc}

00017f96 <strstr>:
   17f96:	b510      	push	{r4, lr}
   17f98:	0002      	movs	r2, r0
   17f9a:	7800      	ldrb	r0, [r0, #0]
   17f9c:	2800      	cmp	r0, #0
   17f9e:	d104      	bne.n	17faa <strstr+0x14>
   17fa0:	7809      	ldrb	r1, [r1, #0]
   17fa2:	2900      	cmp	r1, #0
   17fa4:	d00d      	beq.n	17fc2 <strstr+0x2c>
   17fa6:	bd10      	pop	{r4, pc}
   17fa8:	3201      	adds	r2, #1
   17faa:	7810      	ldrb	r0, [r2, #0]
   17fac:	2800      	cmp	r0, #0
   17fae:	d0fa      	beq.n	17fa6 <strstr+0x10>
   17fb0:	2300      	movs	r3, #0
   17fb2:	5cc8      	ldrb	r0, [r1, r3]
   17fb4:	2800      	cmp	r0, #0
   17fb6:	d004      	beq.n	17fc2 <strstr+0x2c>
   17fb8:	5cd4      	ldrb	r4, [r2, r3]
   17fba:	4284      	cmp	r4, r0
   17fbc:	d1f4      	bne.n	17fa8 <strstr+0x12>
   17fbe:	3301      	adds	r3, #1
   17fc0:	e7f7      	b.n	17fb2 <strstr+0x1c>
   17fc2:	0010      	movs	r0, r2
   17fc4:	e7ef      	b.n	17fa6 <strstr+0x10>
	...

00017fc8 <strtok>:
   17fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17fca:	4b12      	ldr	r3, [pc, #72]	; (18014 <strtok+0x4c>)
   17fcc:	0006      	movs	r6, r0
   17fce:	681d      	ldr	r5, [r3, #0]
   17fd0:	000f      	movs	r7, r1
   17fd2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   17fd4:	2c00      	cmp	r4, #0
   17fd6:	d116      	bne.n	18006 <strtok+0x3e>
   17fd8:	2050      	movs	r0, #80	; 0x50
   17fda:	f7ff fe3b 	bl	17c54 <malloc>
   17fde:	65a8      	str	r0, [r5, #88]	; 0x58
   17fe0:	6004      	str	r4, [r0, #0]
   17fe2:	6044      	str	r4, [r0, #4]
   17fe4:	6084      	str	r4, [r0, #8]
   17fe6:	60c4      	str	r4, [r0, #12]
   17fe8:	6104      	str	r4, [r0, #16]
   17fea:	6144      	str	r4, [r0, #20]
   17fec:	6184      	str	r4, [r0, #24]
   17fee:	6284      	str	r4, [r0, #40]	; 0x28
   17ff0:	62c4      	str	r4, [r0, #44]	; 0x2c
   17ff2:	6304      	str	r4, [r0, #48]	; 0x30
   17ff4:	6344      	str	r4, [r0, #52]	; 0x34
   17ff6:	6384      	str	r4, [r0, #56]	; 0x38
   17ff8:	63c4      	str	r4, [r0, #60]	; 0x3c
   17ffa:	6404      	str	r4, [r0, #64]	; 0x40
   17ffc:	6444      	str	r4, [r0, #68]	; 0x44
   17ffe:	6484      	str	r4, [r0, #72]	; 0x48
   18000:	64c4      	str	r4, [r0, #76]	; 0x4c
   18002:	7704      	strb	r4, [r0, #28]
   18004:	6244      	str	r4, [r0, #36]	; 0x24
   18006:	6daa      	ldr	r2, [r5, #88]	; 0x58
   18008:	0039      	movs	r1, r7
   1800a:	0030      	movs	r0, r6
   1800c:	2301      	movs	r3, #1
   1800e:	f000 f803 	bl	18018 <__strtok_r>
   18012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18014:	2000002c 	.word	0x2000002c

00018018 <__strtok_r>:
   18018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1801a:	2800      	cmp	r0, #0
   1801c:	d104      	bne.n	18028 <__strtok_r+0x10>
   1801e:	6810      	ldr	r0, [r2, #0]
   18020:	2800      	cmp	r0, #0
   18022:	d101      	bne.n	18028 <__strtok_r+0x10>
   18024:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18026:	0020      	movs	r0, r4
   18028:	000e      	movs	r6, r1
   1802a:	7805      	ldrb	r5, [r0, #0]
   1802c:	1c44      	adds	r4, r0, #1
   1802e:	7837      	ldrb	r7, [r6, #0]
   18030:	2f00      	cmp	r7, #0
   18032:	d104      	bne.n	1803e <__strtok_r+0x26>
   18034:	2d00      	cmp	r5, #0
   18036:	d110      	bne.n	1805a <__strtok_r+0x42>
   18038:	6015      	str	r5, [r2, #0]
   1803a:	0028      	movs	r0, r5
   1803c:	e7f2      	b.n	18024 <__strtok_r+0xc>
   1803e:	3601      	adds	r6, #1
   18040:	42bd      	cmp	r5, r7
   18042:	d1f4      	bne.n	1802e <__strtok_r+0x16>
   18044:	2b00      	cmp	r3, #0
   18046:	d1ee      	bne.n	18026 <__strtok_r+0xe>
   18048:	6014      	str	r4, [r2, #0]
   1804a:	7003      	strb	r3, [r0, #0]
   1804c:	e7ea      	b.n	18024 <__strtok_r+0xc>
   1804e:	0033      	movs	r3, r6
   18050:	e00e      	b.n	18070 <__strtok_r+0x58>
   18052:	3501      	adds	r5, #1
   18054:	001c      	movs	r4, r3
   18056:	2f00      	cmp	r7, #0
   18058:	d102      	bne.n	18060 <__strtok_r+0x48>
   1805a:	000d      	movs	r5, r1
   1805c:	7826      	ldrb	r6, [r4, #0]
   1805e:	1c63      	adds	r3, r4, #1
   18060:	782f      	ldrb	r7, [r5, #0]
   18062:	42be      	cmp	r6, r7
   18064:	d1f5      	bne.n	18052 <__strtok_r+0x3a>
   18066:	2e00      	cmp	r6, #0
   18068:	d0f1      	beq.n	1804e <__strtok_r+0x36>
   1806a:	2400      	movs	r4, #0
   1806c:	1e59      	subs	r1, r3, #1
   1806e:	700c      	strb	r4, [r1, #0]
   18070:	6013      	str	r3, [r2, #0]
   18072:	e7d7      	b.n	18024 <__strtok_r+0xc>

00018074 <_strtol_l.isra.0>:
   18074:	b5f0      	push	{r4, r5, r6, r7, lr}
   18076:	001f      	movs	r7, r3
   18078:	000e      	movs	r6, r1
   1807a:	b087      	sub	sp, #28
   1807c:	9005      	str	r0, [sp, #20]
   1807e:	9103      	str	r1, [sp, #12]
   18080:	9202      	str	r2, [sp, #8]
   18082:	980c      	ldr	r0, [sp, #48]	; 0x30
   18084:	7834      	ldrb	r4, [r6, #0]
   18086:	f7ff fdd3 	bl	17c30 <__locale_ctype_ptr_l>
   1808a:	2208      	movs	r2, #8
   1808c:	1900      	adds	r0, r0, r4
   1808e:	7843      	ldrb	r3, [r0, #1]
   18090:	1c75      	adds	r5, r6, #1
   18092:	4013      	ands	r3, r2
   18094:	d10c      	bne.n	180b0 <_strtol_l.isra.0+0x3c>
   18096:	2c2d      	cmp	r4, #45	; 0x2d
   18098:	d10c      	bne.n	180b4 <_strtol_l.isra.0+0x40>
   1809a:	3301      	adds	r3, #1
   1809c:	782c      	ldrb	r4, [r5, #0]
   1809e:	9301      	str	r3, [sp, #4]
   180a0:	1cb5      	adds	r5, r6, #2
   180a2:	2f00      	cmp	r7, #0
   180a4:	d00c      	beq.n	180c0 <_strtol_l.isra.0+0x4c>
   180a6:	2f10      	cmp	r7, #16
   180a8:	d114      	bne.n	180d4 <_strtol_l.isra.0+0x60>
   180aa:	2c30      	cmp	r4, #48	; 0x30
   180ac:	d00a      	beq.n	180c4 <_strtol_l.isra.0+0x50>
   180ae:	e011      	b.n	180d4 <_strtol_l.isra.0+0x60>
   180b0:	002e      	movs	r6, r5
   180b2:	e7e6      	b.n	18082 <_strtol_l.isra.0+0xe>
   180b4:	9301      	str	r3, [sp, #4]
   180b6:	2c2b      	cmp	r4, #43	; 0x2b
   180b8:	d1f3      	bne.n	180a2 <_strtol_l.isra.0+0x2e>
   180ba:	782c      	ldrb	r4, [r5, #0]
   180bc:	1cb5      	adds	r5, r6, #2
   180be:	e7f0      	b.n	180a2 <_strtol_l.isra.0+0x2e>
   180c0:	2c30      	cmp	r4, #48	; 0x30
   180c2:	d12f      	bne.n	18124 <_strtol_l.isra.0+0xb0>
   180c4:	2220      	movs	r2, #32
   180c6:	782b      	ldrb	r3, [r5, #0]
   180c8:	4393      	bics	r3, r2
   180ca:	2b58      	cmp	r3, #88	; 0x58
   180cc:	d151      	bne.n	18172 <_strtol_l.isra.0+0xfe>
   180ce:	2710      	movs	r7, #16
   180d0:	786c      	ldrb	r4, [r5, #1]
   180d2:	3502      	adds	r5, #2
   180d4:	9b01      	ldr	r3, [sp, #4]
   180d6:	4a29      	ldr	r2, [pc, #164]	; (1817c <_strtol_l.isra.0+0x108>)
   180d8:	0039      	movs	r1, r7
   180da:	189e      	adds	r6, r3, r2
   180dc:	0030      	movs	r0, r6
   180de:	f7fd fa45 	bl	1556c <__aeabi_uidivmod>
   180e2:	0030      	movs	r0, r6
   180e4:	9104      	str	r1, [sp, #16]
   180e6:	0039      	movs	r1, r7
   180e8:	f7fd f9ba 	bl	15460 <__udivsi3>
   180ec:	2101      	movs	r1, #1
   180ee:	2300      	movs	r3, #0
   180f0:	4249      	negs	r1, r1
   180f2:	0002      	movs	r2, r0
   180f4:	468c      	mov	ip, r1
   180f6:	0018      	movs	r0, r3
   180f8:	0021      	movs	r1, r4
   180fa:	3930      	subs	r1, #48	; 0x30
   180fc:	2909      	cmp	r1, #9
   180fe:	d813      	bhi.n	18128 <_strtol_l.isra.0+0xb4>
   18100:	000c      	movs	r4, r1
   18102:	42a7      	cmp	r7, r4
   18104:	dd1c      	ble.n	18140 <_strtol_l.isra.0+0xcc>
   18106:	1c59      	adds	r1, r3, #1
   18108:	d009      	beq.n	1811e <_strtol_l.isra.0+0xaa>
   1810a:	4663      	mov	r3, ip
   1810c:	4282      	cmp	r2, r0
   1810e:	d306      	bcc.n	1811e <_strtol_l.isra.0+0xaa>
   18110:	d102      	bne.n	18118 <_strtol_l.isra.0+0xa4>
   18112:	9904      	ldr	r1, [sp, #16]
   18114:	42a1      	cmp	r1, r4
   18116:	db02      	blt.n	1811e <_strtol_l.isra.0+0xaa>
   18118:	2301      	movs	r3, #1
   1811a:	4378      	muls	r0, r7
   1811c:	1820      	adds	r0, r4, r0
   1811e:	782c      	ldrb	r4, [r5, #0]
   18120:	3501      	adds	r5, #1
   18122:	e7e9      	b.n	180f8 <_strtol_l.isra.0+0x84>
   18124:	270a      	movs	r7, #10
   18126:	e7d5      	b.n	180d4 <_strtol_l.isra.0+0x60>
   18128:	0021      	movs	r1, r4
   1812a:	3941      	subs	r1, #65	; 0x41
   1812c:	2919      	cmp	r1, #25
   1812e:	d801      	bhi.n	18134 <_strtol_l.isra.0+0xc0>
   18130:	3c37      	subs	r4, #55	; 0x37
   18132:	e7e6      	b.n	18102 <_strtol_l.isra.0+0x8e>
   18134:	0021      	movs	r1, r4
   18136:	3961      	subs	r1, #97	; 0x61
   18138:	2919      	cmp	r1, #25
   1813a:	d801      	bhi.n	18140 <_strtol_l.isra.0+0xcc>
   1813c:	3c57      	subs	r4, #87	; 0x57
   1813e:	e7e0      	b.n	18102 <_strtol_l.isra.0+0x8e>
   18140:	1c5a      	adds	r2, r3, #1
   18142:	d108      	bne.n	18156 <_strtol_l.isra.0+0xe2>
   18144:	9a05      	ldr	r2, [sp, #20]
   18146:	3323      	adds	r3, #35	; 0x23
   18148:	6013      	str	r3, [r2, #0]
   1814a:	9b02      	ldr	r3, [sp, #8]
   1814c:	0030      	movs	r0, r6
   1814e:	2b00      	cmp	r3, #0
   18150:	d10b      	bne.n	1816a <_strtol_l.isra.0+0xf6>
   18152:	b007      	add	sp, #28
   18154:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18156:	9a01      	ldr	r2, [sp, #4]
   18158:	2a00      	cmp	r2, #0
   1815a:	d000      	beq.n	1815e <_strtol_l.isra.0+0xea>
   1815c:	4240      	negs	r0, r0
   1815e:	9a02      	ldr	r2, [sp, #8]
   18160:	2a00      	cmp	r2, #0
   18162:	d0f6      	beq.n	18152 <_strtol_l.isra.0+0xde>
   18164:	9a03      	ldr	r2, [sp, #12]
   18166:	2b00      	cmp	r3, #0
   18168:	d000      	beq.n	1816c <_strtol_l.isra.0+0xf8>
   1816a:	1e6a      	subs	r2, r5, #1
   1816c:	9b02      	ldr	r3, [sp, #8]
   1816e:	601a      	str	r2, [r3, #0]
   18170:	e7ef      	b.n	18152 <_strtol_l.isra.0+0xde>
   18172:	2430      	movs	r4, #48	; 0x30
   18174:	2f00      	cmp	r7, #0
   18176:	d1ad      	bne.n	180d4 <_strtol_l.isra.0+0x60>
   18178:	3708      	adds	r7, #8
   1817a:	e7ab      	b.n	180d4 <_strtol_l.isra.0+0x60>
   1817c:	7fffffff 	.word	0x7fffffff

00018180 <strtol>:
   18180:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18182:	0013      	movs	r3, r2
   18184:	4a06      	ldr	r2, [pc, #24]	; (181a0 <strtol+0x20>)
   18186:	0005      	movs	r5, r0
   18188:	6810      	ldr	r0, [r2, #0]
   1818a:	6a04      	ldr	r4, [r0, #32]
   1818c:	2c00      	cmp	r4, #0
   1818e:	d100      	bne.n	18192 <strtol+0x12>
   18190:	4c04      	ldr	r4, [pc, #16]	; (181a4 <strtol+0x24>)
   18192:	000a      	movs	r2, r1
   18194:	9400      	str	r4, [sp, #0]
   18196:	0029      	movs	r1, r5
   18198:	f7ff ff6c 	bl	18074 <_strtol_l.isra.0>
   1819c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1819e:	46c0      	nop			; (mov r8, r8)
   181a0:	2000002c 	.word	0x2000002c
   181a4:	20000090 	.word	0x20000090

000181a8 <__utoa>:
   181a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   181aa:	0017      	movs	r7, r2
   181ac:	b08f      	sub	sp, #60	; 0x3c
   181ae:	2225      	movs	r2, #37	; 0x25
   181b0:	0006      	movs	r6, r0
   181b2:	000d      	movs	r5, r1
   181b4:	a804      	add	r0, sp, #16
   181b6:	4918      	ldr	r1, [pc, #96]	; (18218 <__utoa+0x70>)
   181b8:	f7ff fd72 	bl	17ca0 <memcpy>
   181bc:	aa04      	add	r2, sp, #16
   181be:	1ebb      	subs	r3, r7, #2
   181c0:	2400      	movs	r4, #0
   181c2:	9203      	str	r2, [sp, #12]
   181c4:	2b22      	cmp	r3, #34	; 0x22
   181c6:	d905      	bls.n	181d4 <__utoa+0x2c>
   181c8:	702c      	strb	r4, [r5, #0]
   181ca:	0025      	movs	r5, r4
   181cc:	0028      	movs	r0, r5
   181ce:	b00f      	add	sp, #60	; 0x3c
   181d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   181d2:	9c01      	ldr	r4, [sp, #4]
   181d4:	1c63      	adds	r3, r4, #1
   181d6:	9301      	str	r3, [sp, #4]
   181d8:	18eb      	adds	r3, r5, r3
   181da:	9300      	str	r3, [sp, #0]
   181dc:	0030      	movs	r0, r6
   181de:	3b01      	subs	r3, #1
   181e0:	0039      	movs	r1, r7
   181e2:	9302      	str	r3, [sp, #8]
   181e4:	f7fd f9c2 	bl	1556c <__aeabi_uidivmod>
   181e8:	9b03      	ldr	r3, [sp, #12]
   181ea:	9a02      	ldr	r2, [sp, #8]
   181ec:	5c5b      	ldrb	r3, [r3, r1]
   181ee:	0030      	movs	r0, r6
   181f0:	7013      	strb	r3, [r2, #0]
   181f2:	0039      	movs	r1, r7
   181f4:	f7fd f934 	bl	15460 <__udivsi3>
   181f8:	1e06      	subs	r6, r0, #0
   181fa:	d1ea      	bne.n	181d2 <__utoa+0x2a>
   181fc:	9b00      	ldr	r3, [sp, #0]
   181fe:	7018      	strb	r0, [r3, #0]
   18200:	002b      	movs	r3, r5
   18202:	1b5a      	subs	r2, r3, r5
   18204:	4294      	cmp	r4, r2
   18206:	dde1      	ble.n	181cc <__utoa+0x24>
   18208:	781a      	ldrb	r2, [r3, #0]
   1820a:	5d29      	ldrb	r1, [r5, r4]
   1820c:	7019      	strb	r1, [r3, #0]
   1820e:	552a      	strb	r2, [r5, r4]
   18210:	3301      	adds	r3, #1
   18212:	3c01      	subs	r4, #1
   18214:	e7f5      	b.n	18202 <__utoa+0x5a>
   18216:	46c0      	nop			; (mov r8, r8)
   18218:	00019bca 	.word	0x00019bca

0001821c <utoa>:
   1821c:	b510      	push	{r4, lr}
   1821e:	f7ff ffc3 	bl	181a8 <__utoa>
   18222:	bd10      	pop	{r4, pc}

00018224 <_vsiprintf_r>:
   18224:	b530      	push	{r4, r5, lr}
   18226:	b09b      	sub	sp, #108	; 0x6c
   18228:	9100      	str	r1, [sp, #0]
   1822a:	9104      	str	r1, [sp, #16]
   1822c:	4908      	ldr	r1, [pc, #32]	; (18250 <_vsiprintf_r+0x2c>)
   1822e:	466d      	mov	r5, sp
   18230:	9102      	str	r1, [sp, #8]
   18232:	9105      	str	r1, [sp, #20]
   18234:	2101      	movs	r1, #1
   18236:	2482      	movs	r4, #130	; 0x82
   18238:	4249      	negs	r1, r1
   1823a:	81e9      	strh	r1, [r5, #14]
   1823c:	00a4      	lsls	r4, r4, #2
   1823e:	4669      	mov	r1, sp
   18240:	81ac      	strh	r4, [r5, #12]
   18242:	f000 f883 	bl	1834c <_svfiprintf_r>
   18246:	2300      	movs	r3, #0
   18248:	9a00      	ldr	r2, [sp, #0]
   1824a:	7013      	strb	r3, [r2, #0]
   1824c:	b01b      	add	sp, #108	; 0x6c
   1824e:	bd30      	pop	{r4, r5, pc}
   18250:	7fffffff 	.word	0x7fffffff

00018254 <vsiprintf>:
   18254:	b510      	push	{r4, lr}
   18256:	0013      	movs	r3, r2
   18258:	000a      	movs	r2, r1
   1825a:	0001      	movs	r1, r0
   1825c:	4802      	ldr	r0, [pc, #8]	; (18268 <vsiprintf+0x14>)
   1825e:	6800      	ldr	r0, [r0, #0]
   18260:	f7ff ffe0 	bl	18224 <_vsiprintf_r>
   18264:	bd10      	pop	{r4, pc}
   18266:	46c0      	nop			; (mov r8, r8)
   18268:	2000002c 	.word	0x2000002c

0001826c <__ascii_wctomb>:
   1826c:	1e0b      	subs	r3, r1, #0
   1826e:	d004      	beq.n	1827a <__ascii_wctomb+0xe>
   18270:	2aff      	cmp	r2, #255	; 0xff
   18272:	d904      	bls.n	1827e <__ascii_wctomb+0x12>
   18274:	238a      	movs	r3, #138	; 0x8a
   18276:	6003      	str	r3, [r0, #0]
   18278:	3b8b      	subs	r3, #139	; 0x8b
   1827a:	0018      	movs	r0, r3
   1827c:	4770      	bx	lr
   1827e:	700a      	strb	r2, [r1, #0]
   18280:	2301      	movs	r3, #1
   18282:	e7fa      	b.n	1827a <__ascii_wctomb+0xe>

00018284 <__malloc_lock>:
   18284:	4770      	bx	lr

00018286 <__malloc_unlock>:
   18286:	4770      	bx	lr

00018288 <__ssputs_r>:
   18288:	b5f0      	push	{r4, r5, r6, r7, lr}
   1828a:	688e      	ldr	r6, [r1, #8]
   1828c:	b085      	sub	sp, #20
   1828e:	0007      	movs	r7, r0
   18290:	000c      	movs	r4, r1
   18292:	9203      	str	r2, [sp, #12]
   18294:	9301      	str	r3, [sp, #4]
   18296:	429e      	cmp	r6, r3
   18298:	d839      	bhi.n	1830e <__ssputs_r+0x86>
   1829a:	2390      	movs	r3, #144	; 0x90
   1829c:	898a      	ldrh	r2, [r1, #12]
   1829e:	00db      	lsls	r3, r3, #3
   182a0:	421a      	tst	r2, r3
   182a2:	d034      	beq.n	1830e <__ssputs_r+0x86>
   182a4:	2503      	movs	r5, #3
   182a6:	6909      	ldr	r1, [r1, #16]
   182a8:	6823      	ldr	r3, [r4, #0]
   182aa:	1a5b      	subs	r3, r3, r1
   182ac:	9302      	str	r3, [sp, #8]
   182ae:	6963      	ldr	r3, [r4, #20]
   182b0:	9802      	ldr	r0, [sp, #8]
   182b2:	435d      	muls	r5, r3
   182b4:	0feb      	lsrs	r3, r5, #31
   182b6:	195d      	adds	r5, r3, r5
   182b8:	9b01      	ldr	r3, [sp, #4]
   182ba:	106d      	asrs	r5, r5, #1
   182bc:	3301      	adds	r3, #1
   182be:	181b      	adds	r3, r3, r0
   182c0:	42ab      	cmp	r3, r5
   182c2:	d900      	bls.n	182c6 <__ssputs_r+0x3e>
   182c4:	001d      	movs	r5, r3
   182c6:	0553      	lsls	r3, r2, #21
   182c8:	d532      	bpl.n	18330 <__ssputs_r+0xa8>
   182ca:	0029      	movs	r1, r5
   182cc:	0038      	movs	r0, r7
   182ce:	f7ff fd63 	bl	17d98 <_malloc_r>
   182d2:	1e06      	subs	r6, r0, #0
   182d4:	d109      	bne.n	182ea <__ssputs_r+0x62>
   182d6:	230c      	movs	r3, #12
   182d8:	603b      	str	r3, [r7, #0]
   182da:	2340      	movs	r3, #64	; 0x40
   182dc:	2001      	movs	r0, #1
   182de:	89a2      	ldrh	r2, [r4, #12]
   182e0:	4240      	negs	r0, r0
   182e2:	4313      	orrs	r3, r2
   182e4:	81a3      	strh	r3, [r4, #12]
   182e6:	b005      	add	sp, #20
   182e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   182ea:	9a02      	ldr	r2, [sp, #8]
   182ec:	6921      	ldr	r1, [r4, #16]
   182ee:	f7ff fcd7 	bl	17ca0 <memcpy>
   182f2:	89a3      	ldrh	r3, [r4, #12]
   182f4:	4a14      	ldr	r2, [pc, #80]	; (18348 <__ssputs_r+0xc0>)
   182f6:	401a      	ands	r2, r3
   182f8:	2380      	movs	r3, #128	; 0x80
   182fa:	4313      	orrs	r3, r2
   182fc:	81a3      	strh	r3, [r4, #12]
   182fe:	9b02      	ldr	r3, [sp, #8]
   18300:	6126      	str	r6, [r4, #16]
   18302:	18f6      	adds	r6, r6, r3
   18304:	6026      	str	r6, [r4, #0]
   18306:	6165      	str	r5, [r4, #20]
   18308:	9e01      	ldr	r6, [sp, #4]
   1830a:	1aed      	subs	r5, r5, r3
   1830c:	60a5      	str	r5, [r4, #8]
   1830e:	9b01      	ldr	r3, [sp, #4]
   18310:	42b3      	cmp	r3, r6
   18312:	d200      	bcs.n	18316 <__ssputs_r+0x8e>
   18314:	001e      	movs	r6, r3
   18316:	0032      	movs	r2, r6
   18318:	9903      	ldr	r1, [sp, #12]
   1831a:	6820      	ldr	r0, [r4, #0]
   1831c:	f7ff fcc9 	bl	17cb2 <memmove>
   18320:	68a3      	ldr	r3, [r4, #8]
   18322:	2000      	movs	r0, #0
   18324:	1b9b      	subs	r3, r3, r6
   18326:	60a3      	str	r3, [r4, #8]
   18328:	6823      	ldr	r3, [r4, #0]
   1832a:	199e      	adds	r6, r3, r6
   1832c:	6026      	str	r6, [r4, #0]
   1832e:	e7da      	b.n	182e6 <__ssputs_r+0x5e>
   18330:	002a      	movs	r2, r5
   18332:	0038      	movs	r0, r7
   18334:	f000 faa1 	bl	1887a <_realloc_r>
   18338:	1e06      	subs	r6, r0, #0
   1833a:	d1e0      	bne.n	182fe <__ssputs_r+0x76>
   1833c:	6921      	ldr	r1, [r4, #16]
   1833e:	0038      	movs	r0, r7
   18340:	f7ff fce0 	bl	17d04 <_free_r>
   18344:	e7c7      	b.n	182d6 <__ssputs_r+0x4e>
   18346:	46c0      	nop			; (mov r8, r8)
   18348:	fffffb7f 	.word	0xfffffb7f

0001834c <_svfiprintf_r>:
   1834c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1834e:	b09f      	sub	sp, #124	; 0x7c
   18350:	9002      	str	r0, [sp, #8]
   18352:	9305      	str	r3, [sp, #20]
   18354:	898b      	ldrh	r3, [r1, #12]
   18356:	000f      	movs	r7, r1
   18358:	0016      	movs	r6, r2
   1835a:	061b      	lsls	r3, r3, #24
   1835c:	d511      	bpl.n	18382 <_svfiprintf_r+0x36>
   1835e:	690b      	ldr	r3, [r1, #16]
   18360:	2b00      	cmp	r3, #0
   18362:	d10e      	bne.n	18382 <_svfiprintf_r+0x36>
   18364:	2140      	movs	r1, #64	; 0x40
   18366:	f7ff fd17 	bl	17d98 <_malloc_r>
   1836a:	6038      	str	r0, [r7, #0]
   1836c:	6138      	str	r0, [r7, #16]
   1836e:	2800      	cmp	r0, #0
   18370:	d105      	bne.n	1837e <_svfiprintf_r+0x32>
   18372:	230c      	movs	r3, #12
   18374:	9a02      	ldr	r2, [sp, #8]
   18376:	3801      	subs	r0, #1
   18378:	6013      	str	r3, [r2, #0]
   1837a:	b01f      	add	sp, #124	; 0x7c
   1837c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1837e:	2340      	movs	r3, #64	; 0x40
   18380:	617b      	str	r3, [r7, #20]
   18382:	2300      	movs	r3, #0
   18384:	ad06      	add	r5, sp, #24
   18386:	616b      	str	r3, [r5, #20]
   18388:	3320      	adds	r3, #32
   1838a:	766b      	strb	r3, [r5, #25]
   1838c:	3310      	adds	r3, #16
   1838e:	76ab      	strb	r3, [r5, #26]
   18390:	0034      	movs	r4, r6
   18392:	7823      	ldrb	r3, [r4, #0]
   18394:	2b00      	cmp	r3, #0
   18396:	d147      	bne.n	18428 <_svfiprintf_r+0xdc>
   18398:	1ba3      	subs	r3, r4, r6
   1839a:	9304      	str	r3, [sp, #16]
   1839c:	d00d      	beq.n	183ba <_svfiprintf_r+0x6e>
   1839e:	1ba3      	subs	r3, r4, r6
   183a0:	0032      	movs	r2, r6
   183a2:	0039      	movs	r1, r7
   183a4:	9802      	ldr	r0, [sp, #8]
   183a6:	f7ff ff6f 	bl	18288 <__ssputs_r>
   183aa:	1c43      	adds	r3, r0, #1
   183ac:	d100      	bne.n	183b0 <_svfiprintf_r+0x64>
   183ae:	e0b5      	b.n	1851c <_svfiprintf_r+0x1d0>
   183b0:	696a      	ldr	r2, [r5, #20]
   183b2:	9b04      	ldr	r3, [sp, #16]
   183b4:	4694      	mov	ip, r2
   183b6:	4463      	add	r3, ip
   183b8:	616b      	str	r3, [r5, #20]
   183ba:	7823      	ldrb	r3, [r4, #0]
   183bc:	2b00      	cmp	r3, #0
   183be:	d100      	bne.n	183c2 <_svfiprintf_r+0x76>
   183c0:	e0ac      	b.n	1851c <_svfiprintf_r+0x1d0>
   183c2:	2201      	movs	r2, #1
   183c4:	2300      	movs	r3, #0
   183c6:	4252      	negs	r2, r2
   183c8:	606a      	str	r2, [r5, #4]
   183ca:	a902      	add	r1, sp, #8
   183cc:	3254      	adds	r2, #84	; 0x54
   183ce:	1852      	adds	r2, r2, r1
   183d0:	3401      	adds	r4, #1
   183d2:	602b      	str	r3, [r5, #0]
   183d4:	60eb      	str	r3, [r5, #12]
   183d6:	60ab      	str	r3, [r5, #8]
   183d8:	7013      	strb	r3, [r2, #0]
   183da:	65ab      	str	r3, [r5, #88]	; 0x58
   183dc:	4e58      	ldr	r6, [pc, #352]	; (18540 <_svfiprintf_r+0x1f4>)
   183de:	2205      	movs	r2, #5
   183e0:	7821      	ldrb	r1, [r4, #0]
   183e2:	0030      	movs	r0, r6
   183e4:	f000 fa3e 	bl	18864 <memchr>
   183e8:	1c62      	adds	r2, r4, #1
   183ea:	2800      	cmp	r0, #0
   183ec:	d120      	bne.n	18430 <_svfiprintf_r+0xe4>
   183ee:	6829      	ldr	r1, [r5, #0]
   183f0:	06cb      	lsls	r3, r1, #27
   183f2:	d504      	bpl.n	183fe <_svfiprintf_r+0xb2>
   183f4:	2353      	movs	r3, #83	; 0x53
   183f6:	ae02      	add	r6, sp, #8
   183f8:	3020      	adds	r0, #32
   183fa:	199b      	adds	r3, r3, r6
   183fc:	7018      	strb	r0, [r3, #0]
   183fe:	070b      	lsls	r3, r1, #28
   18400:	d504      	bpl.n	1840c <_svfiprintf_r+0xc0>
   18402:	2353      	movs	r3, #83	; 0x53
   18404:	202b      	movs	r0, #43	; 0x2b
   18406:	ae02      	add	r6, sp, #8
   18408:	199b      	adds	r3, r3, r6
   1840a:	7018      	strb	r0, [r3, #0]
   1840c:	7823      	ldrb	r3, [r4, #0]
   1840e:	2b2a      	cmp	r3, #42	; 0x2a
   18410:	d016      	beq.n	18440 <_svfiprintf_r+0xf4>
   18412:	2000      	movs	r0, #0
   18414:	210a      	movs	r1, #10
   18416:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18418:	7822      	ldrb	r2, [r4, #0]
   1841a:	3a30      	subs	r2, #48	; 0x30
   1841c:	2a09      	cmp	r2, #9
   1841e:	d955      	bls.n	184cc <_svfiprintf_r+0x180>
   18420:	2800      	cmp	r0, #0
   18422:	d015      	beq.n	18450 <_svfiprintf_r+0x104>
   18424:	9309      	str	r3, [sp, #36]	; 0x24
   18426:	e013      	b.n	18450 <_svfiprintf_r+0x104>
   18428:	2b25      	cmp	r3, #37	; 0x25
   1842a:	d0b5      	beq.n	18398 <_svfiprintf_r+0x4c>
   1842c:	3401      	adds	r4, #1
   1842e:	e7b0      	b.n	18392 <_svfiprintf_r+0x46>
   18430:	2301      	movs	r3, #1
   18432:	1b80      	subs	r0, r0, r6
   18434:	4083      	lsls	r3, r0
   18436:	6829      	ldr	r1, [r5, #0]
   18438:	0014      	movs	r4, r2
   1843a:	430b      	orrs	r3, r1
   1843c:	602b      	str	r3, [r5, #0]
   1843e:	e7cd      	b.n	183dc <_svfiprintf_r+0x90>
   18440:	9b05      	ldr	r3, [sp, #20]
   18442:	1d18      	adds	r0, r3, #4
   18444:	681b      	ldr	r3, [r3, #0]
   18446:	9005      	str	r0, [sp, #20]
   18448:	2b00      	cmp	r3, #0
   1844a:	db39      	blt.n	184c0 <_svfiprintf_r+0x174>
   1844c:	9309      	str	r3, [sp, #36]	; 0x24
   1844e:	0014      	movs	r4, r2
   18450:	7823      	ldrb	r3, [r4, #0]
   18452:	2b2e      	cmp	r3, #46	; 0x2e
   18454:	d10b      	bne.n	1846e <_svfiprintf_r+0x122>
   18456:	7863      	ldrb	r3, [r4, #1]
   18458:	1c62      	adds	r2, r4, #1
   1845a:	2b2a      	cmp	r3, #42	; 0x2a
   1845c:	d13e      	bne.n	184dc <_svfiprintf_r+0x190>
   1845e:	9b05      	ldr	r3, [sp, #20]
   18460:	3402      	adds	r4, #2
   18462:	1d1a      	adds	r2, r3, #4
   18464:	681b      	ldr	r3, [r3, #0]
   18466:	9205      	str	r2, [sp, #20]
   18468:	2b00      	cmp	r3, #0
   1846a:	db34      	blt.n	184d6 <_svfiprintf_r+0x18a>
   1846c:	9307      	str	r3, [sp, #28]
   1846e:	4e35      	ldr	r6, [pc, #212]	; (18544 <_svfiprintf_r+0x1f8>)
   18470:	7821      	ldrb	r1, [r4, #0]
   18472:	2203      	movs	r2, #3
   18474:	0030      	movs	r0, r6
   18476:	f000 f9f5 	bl	18864 <memchr>
   1847a:	2800      	cmp	r0, #0
   1847c:	d006      	beq.n	1848c <_svfiprintf_r+0x140>
   1847e:	2340      	movs	r3, #64	; 0x40
   18480:	1b80      	subs	r0, r0, r6
   18482:	4083      	lsls	r3, r0
   18484:	682a      	ldr	r2, [r5, #0]
   18486:	3401      	adds	r4, #1
   18488:	4313      	orrs	r3, r2
   1848a:	602b      	str	r3, [r5, #0]
   1848c:	7821      	ldrb	r1, [r4, #0]
   1848e:	2206      	movs	r2, #6
   18490:	482d      	ldr	r0, [pc, #180]	; (18548 <_svfiprintf_r+0x1fc>)
   18492:	1c66      	adds	r6, r4, #1
   18494:	7629      	strb	r1, [r5, #24]
   18496:	f000 f9e5 	bl	18864 <memchr>
   1849a:	2800      	cmp	r0, #0
   1849c:	d046      	beq.n	1852c <_svfiprintf_r+0x1e0>
   1849e:	4b2b      	ldr	r3, [pc, #172]	; (1854c <_svfiprintf_r+0x200>)
   184a0:	2b00      	cmp	r3, #0
   184a2:	d12f      	bne.n	18504 <_svfiprintf_r+0x1b8>
   184a4:	6829      	ldr	r1, [r5, #0]
   184a6:	9b05      	ldr	r3, [sp, #20]
   184a8:	2207      	movs	r2, #7
   184aa:	05c9      	lsls	r1, r1, #23
   184ac:	d528      	bpl.n	18500 <_svfiprintf_r+0x1b4>
   184ae:	189b      	adds	r3, r3, r2
   184b0:	4393      	bics	r3, r2
   184b2:	3308      	adds	r3, #8
   184b4:	9305      	str	r3, [sp, #20]
   184b6:	696b      	ldr	r3, [r5, #20]
   184b8:	9a03      	ldr	r2, [sp, #12]
   184ba:	189b      	adds	r3, r3, r2
   184bc:	616b      	str	r3, [r5, #20]
   184be:	e767      	b.n	18390 <_svfiprintf_r+0x44>
   184c0:	425b      	negs	r3, r3
   184c2:	60eb      	str	r3, [r5, #12]
   184c4:	2302      	movs	r3, #2
   184c6:	430b      	orrs	r3, r1
   184c8:	602b      	str	r3, [r5, #0]
   184ca:	e7c0      	b.n	1844e <_svfiprintf_r+0x102>
   184cc:	434b      	muls	r3, r1
   184ce:	3401      	adds	r4, #1
   184d0:	189b      	adds	r3, r3, r2
   184d2:	2001      	movs	r0, #1
   184d4:	e7a0      	b.n	18418 <_svfiprintf_r+0xcc>
   184d6:	2301      	movs	r3, #1
   184d8:	425b      	negs	r3, r3
   184da:	e7c7      	b.n	1846c <_svfiprintf_r+0x120>
   184dc:	2300      	movs	r3, #0
   184de:	0014      	movs	r4, r2
   184e0:	200a      	movs	r0, #10
   184e2:	001a      	movs	r2, r3
   184e4:	606b      	str	r3, [r5, #4]
   184e6:	7821      	ldrb	r1, [r4, #0]
   184e8:	3930      	subs	r1, #48	; 0x30
   184ea:	2909      	cmp	r1, #9
   184ec:	d903      	bls.n	184f6 <_svfiprintf_r+0x1aa>
   184ee:	2b00      	cmp	r3, #0
   184f0:	d0bd      	beq.n	1846e <_svfiprintf_r+0x122>
   184f2:	9207      	str	r2, [sp, #28]
   184f4:	e7bb      	b.n	1846e <_svfiprintf_r+0x122>
   184f6:	4342      	muls	r2, r0
   184f8:	3401      	adds	r4, #1
   184fa:	1852      	adds	r2, r2, r1
   184fc:	2301      	movs	r3, #1
   184fe:	e7f2      	b.n	184e6 <_svfiprintf_r+0x19a>
   18500:	3307      	adds	r3, #7
   18502:	e7d5      	b.n	184b0 <_svfiprintf_r+0x164>
   18504:	ab05      	add	r3, sp, #20
   18506:	9300      	str	r3, [sp, #0]
   18508:	003a      	movs	r2, r7
   1850a:	4b11      	ldr	r3, [pc, #68]	; (18550 <_svfiprintf_r+0x204>)
   1850c:	0029      	movs	r1, r5
   1850e:	9802      	ldr	r0, [sp, #8]
   18510:	e000      	b.n	18514 <_svfiprintf_r+0x1c8>
   18512:	bf00      	nop
   18514:	9003      	str	r0, [sp, #12]
   18516:	9b03      	ldr	r3, [sp, #12]
   18518:	3301      	adds	r3, #1
   1851a:	d1cc      	bne.n	184b6 <_svfiprintf_r+0x16a>
   1851c:	89bb      	ldrh	r3, [r7, #12]
   1851e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18520:	065b      	lsls	r3, r3, #25
   18522:	d400      	bmi.n	18526 <_svfiprintf_r+0x1da>
   18524:	e729      	b.n	1837a <_svfiprintf_r+0x2e>
   18526:	2001      	movs	r0, #1
   18528:	4240      	negs	r0, r0
   1852a:	e726      	b.n	1837a <_svfiprintf_r+0x2e>
   1852c:	ab05      	add	r3, sp, #20
   1852e:	9300      	str	r3, [sp, #0]
   18530:	003a      	movs	r2, r7
   18532:	4b07      	ldr	r3, [pc, #28]	; (18550 <_svfiprintf_r+0x204>)
   18534:	0029      	movs	r1, r5
   18536:	9802      	ldr	r0, [sp, #8]
   18538:	f000 f87a 	bl	18630 <_printf_i>
   1853c:	e7ea      	b.n	18514 <_svfiprintf_r+0x1c8>
   1853e:	46c0      	nop			; (mov r8, r8)
   18540:	00019cf0 	.word	0x00019cf0
   18544:	00019cf6 	.word	0x00019cf6
   18548:	00019cfa 	.word	0x00019cfa
   1854c:	00000000 	.word	0x00000000
   18550:	00018289 	.word	0x00018289

00018554 <_printf_common>:
   18554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18556:	0015      	movs	r5, r2
   18558:	9301      	str	r3, [sp, #4]
   1855a:	688a      	ldr	r2, [r1, #8]
   1855c:	690b      	ldr	r3, [r1, #16]
   1855e:	9000      	str	r0, [sp, #0]
   18560:	000c      	movs	r4, r1
   18562:	4293      	cmp	r3, r2
   18564:	da00      	bge.n	18568 <_printf_common+0x14>
   18566:	0013      	movs	r3, r2
   18568:	0022      	movs	r2, r4
   1856a:	602b      	str	r3, [r5, #0]
   1856c:	3243      	adds	r2, #67	; 0x43
   1856e:	7812      	ldrb	r2, [r2, #0]
   18570:	2a00      	cmp	r2, #0
   18572:	d001      	beq.n	18578 <_printf_common+0x24>
   18574:	3301      	adds	r3, #1
   18576:	602b      	str	r3, [r5, #0]
   18578:	6823      	ldr	r3, [r4, #0]
   1857a:	069b      	lsls	r3, r3, #26
   1857c:	d502      	bpl.n	18584 <_printf_common+0x30>
   1857e:	682b      	ldr	r3, [r5, #0]
   18580:	3302      	adds	r3, #2
   18582:	602b      	str	r3, [r5, #0]
   18584:	2706      	movs	r7, #6
   18586:	6823      	ldr	r3, [r4, #0]
   18588:	401f      	ands	r7, r3
   1858a:	d027      	beq.n	185dc <_printf_common+0x88>
   1858c:	0023      	movs	r3, r4
   1858e:	3343      	adds	r3, #67	; 0x43
   18590:	781b      	ldrb	r3, [r3, #0]
   18592:	1e5a      	subs	r2, r3, #1
   18594:	4193      	sbcs	r3, r2
   18596:	6822      	ldr	r2, [r4, #0]
   18598:	0692      	lsls	r2, r2, #26
   1859a:	d430      	bmi.n	185fe <_printf_common+0xaa>
   1859c:	0022      	movs	r2, r4
   1859e:	9901      	ldr	r1, [sp, #4]
   185a0:	3243      	adds	r2, #67	; 0x43
   185a2:	9800      	ldr	r0, [sp, #0]
   185a4:	9e08      	ldr	r6, [sp, #32]
   185a6:	47b0      	blx	r6
   185a8:	1c43      	adds	r3, r0, #1
   185aa:	d025      	beq.n	185f8 <_printf_common+0xa4>
   185ac:	2306      	movs	r3, #6
   185ae:	6820      	ldr	r0, [r4, #0]
   185b0:	682a      	ldr	r2, [r5, #0]
   185b2:	68e1      	ldr	r1, [r4, #12]
   185b4:	4003      	ands	r3, r0
   185b6:	2500      	movs	r5, #0
   185b8:	2b04      	cmp	r3, #4
   185ba:	d103      	bne.n	185c4 <_printf_common+0x70>
   185bc:	1a8d      	subs	r5, r1, r2
   185be:	43eb      	mvns	r3, r5
   185c0:	17db      	asrs	r3, r3, #31
   185c2:	401d      	ands	r5, r3
   185c4:	68a3      	ldr	r3, [r4, #8]
   185c6:	6922      	ldr	r2, [r4, #16]
   185c8:	4293      	cmp	r3, r2
   185ca:	dd01      	ble.n	185d0 <_printf_common+0x7c>
   185cc:	1a9b      	subs	r3, r3, r2
   185ce:	18ed      	adds	r5, r5, r3
   185d0:	2700      	movs	r7, #0
   185d2:	42bd      	cmp	r5, r7
   185d4:	d120      	bne.n	18618 <_printf_common+0xc4>
   185d6:	2000      	movs	r0, #0
   185d8:	e010      	b.n	185fc <_printf_common+0xa8>
   185da:	3701      	adds	r7, #1
   185dc:	68e3      	ldr	r3, [r4, #12]
   185de:	682a      	ldr	r2, [r5, #0]
   185e0:	1a9b      	subs	r3, r3, r2
   185e2:	429f      	cmp	r7, r3
   185e4:	dad2      	bge.n	1858c <_printf_common+0x38>
   185e6:	0022      	movs	r2, r4
   185e8:	2301      	movs	r3, #1
   185ea:	3219      	adds	r2, #25
   185ec:	9901      	ldr	r1, [sp, #4]
   185ee:	9800      	ldr	r0, [sp, #0]
   185f0:	9e08      	ldr	r6, [sp, #32]
   185f2:	47b0      	blx	r6
   185f4:	1c43      	adds	r3, r0, #1
   185f6:	d1f0      	bne.n	185da <_printf_common+0x86>
   185f8:	2001      	movs	r0, #1
   185fa:	4240      	negs	r0, r0
   185fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   185fe:	2030      	movs	r0, #48	; 0x30
   18600:	18e1      	adds	r1, r4, r3
   18602:	3143      	adds	r1, #67	; 0x43
   18604:	7008      	strb	r0, [r1, #0]
   18606:	0021      	movs	r1, r4
   18608:	1c5a      	adds	r2, r3, #1
   1860a:	3145      	adds	r1, #69	; 0x45
   1860c:	7809      	ldrb	r1, [r1, #0]
   1860e:	18a2      	adds	r2, r4, r2
   18610:	3243      	adds	r2, #67	; 0x43
   18612:	3302      	adds	r3, #2
   18614:	7011      	strb	r1, [r2, #0]
   18616:	e7c1      	b.n	1859c <_printf_common+0x48>
   18618:	0022      	movs	r2, r4
   1861a:	2301      	movs	r3, #1
   1861c:	321a      	adds	r2, #26
   1861e:	9901      	ldr	r1, [sp, #4]
   18620:	9800      	ldr	r0, [sp, #0]
   18622:	9e08      	ldr	r6, [sp, #32]
   18624:	47b0      	blx	r6
   18626:	1c43      	adds	r3, r0, #1
   18628:	d0e6      	beq.n	185f8 <_printf_common+0xa4>
   1862a:	3701      	adds	r7, #1
   1862c:	e7d1      	b.n	185d2 <_printf_common+0x7e>
	...

00018630 <_printf_i>:
   18630:	b5f0      	push	{r4, r5, r6, r7, lr}
   18632:	b08b      	sub	sp, #44	; 0x2c
   18634:	9206      	str	r2, [sp, #24]
   18636:	000a      	movs	r2, r1
   18638:	3243      	adds	r2, #67	; 0x43
   1863a:	9307      	str	r3, [sp, #28]
   1863c:	9005      	str	r0, [sp, #20]
   1863e:	9204      	str	r2, [sp, #16]
   18640:	7e0a      	ldrb	r2, [r1, #24]
   18642:	000c      	movs	r4, r1
   18644:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18646:	2a6e      	cmp	r2, #110	; 0x6e
   18648:	d100      	bne.n	1864c <_printf_i+0x1c>
   1864a:	e08f      	b.n	1876c <_printf_i+0x13c>
   1864c:	d817      	bhi.n	1867e <_printf_i+0x4e>
   1864e:	2a63      	cmp	r2, #99	; 0x63
   18650:	d02c      	beq.n	186ac <_printf_i+0x7c>
   18652:	d808      	bhi.n	18666 <_printf_i+0x36>
   18654:	2a00      	cmp	r2, #0
   18656:	d100      	bne.n	1865a <_printf_i+0x2a>
   18658:	e099      	b.n	1878e <_printf_i+0x15e>
   1865a:	2a58      	cmp	r2, #88	; 0x58
   1865c:	d054      	beq.n	18708 <_printf_i+0xd8>
   1865e:	0026      	movs	r6, r4
   18660:	3642      	adds	r6, #66	; 0x42
   18662:	7032      	strb	r2, [r6, #0]
   18664:	e029      	b.n	186ba <_printf_i+0x8a>
   18666:	2a64      	cmp	r2, #100	; 0x64
   18668:	d001      	beq.n	1866e <_printf_i+0x3e>
   1866a:	2a69      	cmp	r2, #105	; 0x69
   1866c:	d1f7      	bne.n	1865e <_printf_i+0x2e>
   1866e:	6821      	ldr	r1, [r4, #0]
   18670:	681a      	ldr	r2, [r3, #0]
   18672:	0608      	lsls	r0, r1, #24
   18674:	d523      	bpl.n	186be <_printf_i+0x8e>
   18676:	1d11      	adds	r1, r2, #4
   18678:	6019      	str	r1, [r3, #0]
   1867a:	6815      	ldr	r5, [r2, #0]
   1867c:	e025      	b.n	186ca <_printf_i+0x9a>
   1867e:	2a73      	cmp	r2, #115	; 0x73
   18680:	d100      	bne.n	18684 <_printf_i+0x54>
   18682:	e088      	b.n	18796 <_printf_i+0x166>
   18684:	d808      	bhi.n	18698 <_printf_i+0x68>
   18686:	2a6f      	cmp	r2, #111	; 0x6f
   18688:	d029      	beq.n	186de <_printf_i+0xae>
   1868a:	2a70      	cmp	r2, #112	; 0x70
   1868c:	d1e7      	bne.n	1865e <_printf_i+0x2e>
   1868e:	2220      	movs	r2, #32
   18690:	6809      	ldr	r1, [r1, #0]
   18692:	430a      	orrs	r2, r1
   18694:	6022      	str	r2, [r4, #0]
   18696:	e003      	b.n	186a0 <_printf_i+0x70>
   18698:	2a75      	cmp	r2, #117	; 0x75
   1869a:	d020      	beq.n	186de <_printf_i+0xae>
   1869c:	2a78      	cmp	r2, #120	; 0x78
   1869e:	d1de      	bne.n	1865e <_printf_i+0x2e>
   186a0:	0022      	movs	r2, r4
   186a2:	2178      	movs	r1, #120	; 0x78
   186a4:	3245      	adds	r2, #69	; 0x45
   186a6:	7011      	strb	r1, [r2, #0]
   186a8:	4a6c      	ldr	r2, [pc, #432]	; (1885c <_printf_i+0x22c>)
   186aa:	e030      	b.n	1870e <_printf_i+0xde>
   186ac:	000e      	movs	r6, r1
   186ae:	681a      	ldr	r2, [r3, #0]
   186b0:	3642      	adds	r6, #66	; 0x42
   186b2:	1d11      	adds	r1, r2, #4
   186b4:	6019      	str	r1, [r3, #0]
   186b6:	6813      	ldr	r3, [r2, #0]
   186b8:	7033      	strb	r3, [r6, #0]
   186ba:	2301      	movs	r3, #1
   186bc:	e079      	b.n	187b2 <_printf_i+0x182>
   186be:	0649      	lsls	r1, r1, #25
   186c0:	d5d9      	bpl.n	18676 <_printf_i+0x46>
   186c2:	1d11      	adds	r1, r2, #4
   186c4:	6019      	str	r1, [r3, #0]
   186c6:	2300      	movs	r3, #0
   186c8:	5ed5      	ldrsh	r5, [r2, r3]
   186ca:	2d00      	cmp	r5, #0
   186cc:	da03      	bge.n	186d6 <_printf_i+0xa6>
   186ce:	232d      	movs	r3, #45	; 0x2d
   186d0:	9a04      	ldr	r2, [sp, #16]
   186d2:	426d      	negs	r5, r5
   186d4:	7013      	strb	r3, [r2, #0]
   186d6:	4b62      	ldr	r3, [pc, #392]	; (18860 <_printf_i+0x230>)
   186d8:	270a      	movs	r7, #10
   186da:	9303      	str	r3, [sp, #12]
   186dc:	e02f      	b.n	1873e <_printf_i+0x10e>
   186de:	6820      	ldr	r0, [r4, #0]
   186e0:	6819      	ldr	r1, [r3, #0]
   186e2:	0605      	lsls	r5, r0, #24
   186e4:	d503      	bpl.n	186ee <_printf_i+0xbe>
   186e6:	1d08      	adds	r0, r1, #4
   186e8:	6018      	str	r0, [r3, #0]
   186ea:	680d      	ldr	r5, [r1, #0]
   186ec:	e005      	b.n	186fa <_printf_i+0xca>
   186ee:	0640      	lsls	r0, r0, #25
   186f0:	d5f9      	bpl.n	186e6 <_printf_i+0xb6>
   186f2:	680d      	ldr	r5, [r1, #0]
   186f4:	1d08      	adds	r0, r1, #4
   186f6:	6018      	str	r0, [r3, #0]
   186f8:	b2ad      	uxth	r5, r5
   186fa:	4b59      	ldr	r3, [pc, #356]	; (18860 <_printf_i+0x230>)
   186fc:	2708      	movs	r7, #8
   186fe:	9303      	str	r3, [sp, #12]
   18700:	2a6f      	cmp	r2, #111	; 0x6f
   18702:	d018      	beq.n	18736 <_printf_i+0x106>
   18704:	270a      	movs	r7, #10
   18706:	e016      	b.n	18736 <_printf_i+0x106>
   18708:	3145      	adds	r1, #69	; 0x45
   1870a:	700a      	strb	r2, [r1, #0]
   1870c:	4a54      	ldr	r2, [pc, #336]	; (18860 <_printf_i+0x230>)
   1870e:	9203      	str	r2, [sp, #12]
   18710:	681a      	ldr	r2, [r3, #0]
   18712:	6821      	ldr	r1, [r4, #0]
   18714:	1d10      	adds	r0, r2, #4
   18716:	6018      	str	r0, [r3, #0]
   18718:	6815      	ldr	r5, [r2, #0]
   1871a:	0608      	lsls	r0, r1, #24
   1871c:	d522      	bpl.n	18764 <_printf_i+0x134>
   1871e:	07cb      	lsls	r3, r1, #31
   18720:	d502      	bpl.n	18728 <_printf_i+0xf8>
   18722:	2320      	movs	r3, #32
   18724:	4319      	orrs	r1, r3
   18726:	6021      	str	r1, [r4, #0]
   18728:	2710      	movs	r7, #16
   1872a:	2d00      	cmp	r5, #0
   1872c:	d103      	bne.n	18736 <_printf_i+0x106>
   1872e:	2320      	movs	r3, #32
   18730:	6822      	ldr	r2, [r4, #0]
   18732:	439a      	bics	r2, r3
   18734:	6022      	str	r2, [r4, #0]
   18736:	0023      	movs	r3, r4
   18738:	2200      	movs	r2, #0
   1873a:	3343      	adds	r3, #67	; 0x43
   1873c:	701a      	strb	r2, [r3, #0]
   1873e:	6863      	ldr	r3, [r4, #4]
   18740:	60a3      	str	r3, [r4, #8]
   18742:	2b00      	cmp	r3, #0
   18744:	db5c      	blt.n	18800 <_printf_i+0x1d0>
   18746:	2204      	movs	r2, #4
   18748:	6821      	ldr	r1, [r4, #0]
   1874a:	4391      	bics	r1, r2
   1874c:	6021      	str	r1, [r4, #0]
   1874e:	2d00      	cmp	r5, #0
   18750:	d158      	bne.n	18804 <_printf_i+0x1d4>
   18752:	9e04      	ldr	r6, [sp, #16]
   18754:	2b00      	cmp	r3, #0
   18756:	d064      	beq.n	18822 <_printf_i+0x1f2>
   18758:	0026      	movs	r6, r4
   1875a:	9b03      	ldr	r3, [sp, #12]
   1875c:	3642      	adds	r6, #66	; 0x42
   1875e:	781b      	ldrb	r3, [r3, #0]
   18760:	7033      	strb	r3, [r6, #0]
   18762:	e05e      	b.n	18822 <_printf_i+0x1f2>
   18764:	0648      	lsls	r0, r1, #25
   18766:	d5da      	bpl.n	1871e <_printf_i+0xee>
   18768:	b2ad      	uxth	r5, r5
   1876a:	e7d8      	b.n	1871e <_printf_i+0xee>
   1876c:	6809      	ldr	r1, [r1, #0]
   1876e:	681a      	ldr	r2, [r3, #0]
   18770:	0608      	lsls	r0, r1, #24
   18772:	d505      	bpl.n	18780 <_printf_i+0x150>
   18774:	1d11      	adds	r1, r2, #4
   18776:	6019      	str	r1, [r3, #0]
   18778:	6813      	ldr	r3, [r2, #0]
   1877a:	6962      	ldr	r2, [r4, #20]
   1877c:	601a      	str	r2, [r3, #0]
   1877e:	e006      	b.n	1878e <_printf_i+0x15e>
   18780:	0649      	lsls	r1, r1, #25
   18782:	d5f7      	bpl.n	18774 <_printf_i+0x144>
   18784:	1d11      	adds	r1, r2, #4
   18786:	6019      	str	r1, [r3, #0]
   18788:	6813      	ldr	r3, [r2, #0]
   1878a:	8aa2      	ldrh	r2, [r4, #20]
   1878c:	801a      	strh	r2, [r3, #0]
   1878e:	2300      	movs	r3, #0
   18790:	9e04      	ldr	r6, [sp, #16]
   18792:	6123      	str	r3, [r4, #16]
   18794:	e054      	b.n	18840 <_printf_i+0x210>
   18796:	681a      	ldr	r2, [r3, #0]
   18798:	1d11      	adds	r1, r2, #4
   1879a:	6019      	str	r1, [r3, #0]
   1879c:	6816      	ldr	r6, [r2, #0]
   1879e:	2100      	movs	r1, #0
   187a0:	6862      	ldr	r2, [r4, #4]
   187a2:	0030      	movs	r0, r6
   187a4:	f000 f85e 	bl	18864 <memchr>
   187a8:	2800      	cmp	r0, #0
   187aa:	d001      	beq.n	187b0 <_printf_i+0x180>
   187ac:	1b80      	subs	r0, r0, r6
   187ae:	6060      	str	r0, [r4, #4]
   187b0:	6863      	ldr	r3, [r4, #4]
   187b2:	6123      	str	r3, [r4, #16]
   187b4:	2300      	movs	r3, #0
   187b6:	9a04      	ldr	r2, [sp, #16]
   187b8:	7013      	strb	r3, [r2, #0]
   187ba:	e041      	b.n	18840 <_printf_i+0x210>
   187bc:	6923      	ldr	r3, [r4, #16]
   187be:	0032      	movs	r2, r6
   187c0:	9906      	ldr	r1, [sp, #24]
   187c2:	9805      	ldr	r0, [sp, #20]
   187c4:	9d07      	ldr	r5, [sp, #28]
   187c6:	47a8      	blx	r5
   187c8:	1c43      	adds	r3, r0, #1
   187ca:	d043      	beq.n	18854 <_printf_i+0x224>
   187cc:	6823      	ldr	r3, [r4, #0]
   187ce:	2500      	movs	r5, #0
   187d0:	079b      	lsls	r3, r3, #30
   187d2:	d40f      	bmi.n	187f4 <_printf_i+0x1c4>
   187d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   187d6:	68e0      	ldr	r0, [r4, #12]
   187d8:	4298      	cmp	r0, r3
   187da:	da3d      	bge.n	18858 <_printf_i+0x228>
   187dc:	0018      	movs	r0, r3
   187de:	e03b      	b.n	18858 <_printf_i+0x228>
   187e0:	0022      	movs	r2, r4
   187e2:	2301      	movs	r3, #1
   187e4:	3219      	adds	r2, #25
   187e6:	9906      	ldr	r1, [sp, #24]
   187e8:	9805      	ldr	r0, [sp, #20]
   187ea:	9e07      	ldr	r6, [sp, #28]
   187ec:	47b0      	blx	r6
   187ee:	1c43      	adds	r3, r0, #1
   187f0:	d030      	beq.n	18854 <_printf_i+0x224>
   187f2:	3501      	adds	r5, #1
   187f4:	68e3      	ldr	r3, [r4, #12]
   187f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   187f8:	1a9b      	subs	r3, r3, r2
   187fa:	429d      	cmp	r5, r3
   187fc:	dbf0      	blt.n	187e0 <_printf_i+0x1b0>
   187fe:	e7e9      	b.n	187d4 <_printf_i+0x1a4>
   18800:	2d00      	cmp	r5, #0
   18802:	d0a9      	beq.n	18758 <_printf_i+0x128>
   18804:	9e04      	ldr	r6, [sp, #16]
   18806:	0028      	movs	r0, r5
   18808:	0039      	movs	r1, r7
   1880a:	f7fc feaf 	bl	1556c <__aeabi_uidivmod>
   1880e:	9b03      	ldr	r3, [sp, #12]
   18810:	3e01      	subs	r6, #1
   18812:	5c5b      	ldrb	r3, [r3, r1]
   18814:	0028      	movs	r0, r5
   18816:	7033      	strb	r3, [r6, #0]
   18818:	0039      	movs	r1, r7
   1881a:	f7fc fe21 	bl	15460 <__udivsi3>
   1881e:	1e05      	subs	r5, r0, #0
   18820:	d1f1      	bne.n	18806 <_printf_i+0x1d6>
   18822:	2f08      	cmp	r7, #8
   18824:	d109      	bne.n	1883a <_printf_i+0x20a>
   18826:	6823      	ldr	r3, [r4, #0]
   18828:	07db      	lsls	r3, r3, #31
   1882a:	d506      	bpl.n	1883a <_printf_i+0x20a>
   1882c:	6863      	ldr	r3, [r4, #4]
   1882e:	6922      	ldr	r2, [r4, #16]
   18830:	4293      	cmp	r3, r2
   18832:	dc02      	bgt.n	1883a <_printf_i+0x20a>
   18834:	2330      	movs	r3, #48	; 0x30
   18836:	3e01      	subs	r6, #1
   18838:	7033      	strb	r3, [r6, #0]
   1883a:	9b04      	ldr	r3, [sp, #16]
   1883c:	1b9b      	subs	r3, r3, r6
   1883e:	6123      	str	r3, [r4, #16]
   18840:	9b07      	ldr	r3, [sp, #28]
   18842:	aa09      	add	r2, sp, #36	; 0x24
   18844:	9300      	str	r3, [sp, #0]
   18846:	0021      	movs	r1, r4
   18848:	9b06      	ldr	r3, [sp, #24]
   1884a:	9805      	ldr	r0, [sp, #20]
   1884c:	f7ff fe82 	bl	18554 <_printf_common>
   18850:	1c43      	adds	r3, r0, #1
   18852:	d1b3      	bne.n	187bc <_printf_i+0x18c>
   18854:	2001      	movs	r0, #1
   18856:	4240      	negs	r0, r0
   18858:	b00b      	add	sp, #44	; 0x2c
   1885a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1885c:	00019d12 	.word	0x00019d12
   18860:	00019d01 	.word	0x00019d01

00018864 <memchr>:
   18864:	b2c9      	uxtb	r1, r1
   18866:	1882      	adds	r2, r0, r2
   18868:	4290      	cmp	r0, r2
   1886a:	d101      	bne.n	18870 <memchr+0xc>
   1886c:	2000      	movs	r0, #0
   1886e:	4770      	bx	lr
   18870:	7803      	ldrb	r3, [r0, #0]
   18872:	428b      	cmp	r3, r1
   18874:	d0fb      	beq.n	1886e <memchr+0xa>
   18876:	3001      	adds	r0, #1
   18878:	e7f6      	b.n	18868 <memchr+0x4>

0001887a <_realloc_r>:
   1887a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1887c:	0007      	movs	r7, r0
   1887e:	000d      	movs	r5, r1
   18880:	0016      	movs	r6, r2
   18882:	2900      	cmp	r1, #0
   18884:	d105      	bne.n	18892 <_realloc_r+0x18>
   18886:	0011      	movs	r1, r2
   18888:	f7ff fa86 	bl	17d98 <_malloc_r>
   1888c:	0004      	movs	r4, r0
   1888e:	0020      	movs	r0, r4
   18890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18892:	2a00      	cmp	r2, #0
   18894:	d103      	bne.n	1889e <_realloc_r+0x24>
   18896:	f7ff fa35 	bl	17d04 <_free_r>
   1889a:	0034      	movs	r4, r6
   1889c:	e7f7      	b.n	1888e <_realloc_r+0x14>
   1889e:	f000 f812 	bl	188c6 <_malloc_usable_size_r>
   188a2:	002c      	movs	r4, r5
   188a4:	4286      	cmp	r6, r0
   188a6:	d9f2      	bls.n	1888e <_realloc_r+0x14>
   188a8:	0031      	movs	r1, r6
   188aa:	0038      	movs	r0, r7
   188ac:	f7ff fa74 	bl	17d98 <_malloc_r>
   188b0:	1e04      	subs	r4, r0, #0
   188b2:	d0ec      	beq.n	1888e <_realloc_r+0x14>
   188b4:	0029      	movs	r1, r5
   188b6:	0032      	movs	r2, r6
   188b8:	f7ff f9f2 	bl	17ca0 <memcpy>
   188bc:	0029      	movs	r1, r5
   188be:	0038      	movs	r0, r7
   188c0:	f7ff fa20 	bl	17d04 <_free_r>
   188c4:	e7e3      	b.n	1888e <_realloc_r+0x14>

000188c6 <_malloc_usable_size_r>:
   188c6:	1f0b      	subs	r3, r1, #4
   188c8:	681b      	ldr	r3, [r3, #0]
   188ca:	1f18      	subs	r0, r3, #4
   188cc:	2b00      	cmp	r3, #0
   188ce:	da01      	bge.n	188d4 <_malloc_usable_size_r+0xe>
   188d0:	580b      	ldr	r3, [r1, r0]
   188d2:	18c0      	adds	r0, r0, r3
   188d4:	4770      	bx	lr
   188d6:	0000      	movs	r0, r0
   188d8:	30303030 	.word	0x30303030
   188dc:	30303030 	.word	0x30303030
   188e0:	00003030 	.word	0x00003030
   188e4:	2e707466 	.word	0x2e707466
   188e8:	76697264 	.word	0x76697264
   188ec:	2e716865 	.word	0x2e716865
   188f0:	006d6f63 	.word	0x006d6f63
   188f4:	7269662f 	.word	0x7269662f
   188f8:	7261776d 	.word	0x7261776d
   188fc:	00002f65 	.word	0x00002f65
   18900:	75686172 	.word	0x75686172
   18904:	61726e6c 	.word	0x61726e6c
   18908:	646f6874 	.word	0x646f6874
   1890c:	006c636b 	.word	0x006c636b
   18910:	34333231 	.word	0x34333231
   18914:	38373635 	.word	0x38373635
   18918:	00000039 	.word	0x00000039
   1891c:	6d726966 	.word	0x6d726966
   18920:	65726177 	.word	0x65726177
   18924:	6e69622e 	.word	0x6e69622e
   18928:	00000000 	.word	0x00000000
   1892c:	31343037 	.word	0x31343037
   18930:	39363931 	.word	0x39363931
   18934:	00003935 	.word	0x00003935
   18938:	38393637 	.word	0x38393637
   1893c:	32393334 	.word	0x32393334
   18940:	00003130 	.word	0x00003130
   18944:	33383337 	.word	0x33383337
   18948:	32343136 	.word	0x32343136
   1894c:	00003431 	.word	0x00003431
   18950:	33383337 	.word	0x33383337
   18954:	36323236 	.word	0x36323236
   18958:	00003837 	.word	0x00003837
   1895c:	36383539 	.word	0x36383539
   18960:	39353331 	.word	0x39353331
   18964:	00003837 	.word	0x00003837
   18968:	00003a50 	.word	0x00003a50
   1896c:	00003a53 	.word	0x00003a53
   18970:	0000000a 	.word	0x0000000a
   18974:	204d5347 	.word	0x204d5347
   18978:	656d6954 	.word	0x656d6954
   1897c:	0074756f 	.word	0x0074756f
   18980:	4f525245 	.word	0x4f525245
   18984:	00000052 	.word	0x00000052
   18988:	00004b4f 	.word	0x00004b4f
   1898c:	000d5441 	.word	0x000d5441
   18990:	492b5441 	.word	0x492b5441
   18994:	303d4346 	.word	0x303d4346
   18998:	000d302c 	.word	0x000d302c
   1899c:	4552432b 	.word	0x4552432b
   189a0:	30203a47 	.word	0x30203a47
   189a4:	0000312c 	.word	0x0000312c
   189a8:	432b5441 	.word	0x432b5441
   189ac:	3f474552 	.word	0x3f474552
   189b0:	0000000d 	.word	0x0000000d
   189b4:	4552432b 	.word	0x4552432b
   189b8:	30203a47 	.word	0x30203a47
   189bc:	0000352c 	.word	0x0000352c
   189c0:	492b5441 	.word	0x492b5441
   189c4:	253d5250 	.word	0x253d5250
   189c8:	00000d64 	.word	0x00000d64
   189cc:	492b5441 	.word	0x492b5441
   189d0:	303d5250 	.word	0x303d5250
   189d4:	0000000d 	.word	0x0000000d
   189d8:	432b5441 	.word	0x432b5441
   189dc:	3d474552 	.word	0x3d474552
   189e0:	00000d31 	.word	0x00000d31
   189e4:	432b5441 	.word	0x432b5441
   189e8:	3d4e5546 	.word	0x3d4e5546
   189ec:	00000d31 	.word	0x00000d31
   189f0:	5546432b 	.word	0x5546432b
   189f4:	31203a4e 	.word	0x31203a4e
   189f8:	00000000 	.word	0x00000000
   189fc:	432b5441 	.word	0x432b5441
   18a00:	3f4e5546 	.word	0x3f4e5546
   18a04:	0000000d 	.word	0x0000000d
   18a08:	432b5441 	.word	0x432b5441
   18a0c:	3d4e5546 	.word	0x3d4e5546
   18a10:	00000d30 	.word	0x00000d30
   18a14:	5546432b 	.word	0x5546432b
   18a18:	30203a4e 	.word	0x30203a4e
   18a1c:	00000000 	.word	0x00000000
   18a20:	432b5441 	.word	0x432b5441
   18a24:	3d4e5546 	.word	0x3d4e5546
   18a28:	0d312c31 	.word	0x0d312c31
   18a2c:	00000000 	.word	0x00000000
   18a30:	4950432b 	.word	0x4950432b
   18a34:	52203a4e 	.word	0x52203a4e
   18a38:	59444145 	.word	0x59444145
   18a3c:	00000000 	.word	0x00000000
   18a40:	432b5441 	.word	0x432b5441
   18a44:	3f4e4950 	.word	0x3f4e4950
   18a48:	0000000d 	.word	0x0000000d
   18a4c:	432b5441 	.word	0x432b5441
   18a50:	4144474d 	.word	0x4144474d
   18a54:	4544223d 	.word	0x4544223d
   18a58:	4c41204c 	.word	0x4c41204c
   18a5c:	000d224c 	.word	0x000d224c
   18a60:	57265441 	.word	0x57265441
   18a64:	0000000d 	.word	0x0000000d
   18a68:	432b5441 	.word	0x432b5441
   18a6c:	3d50494c 	.word	0x3d50494c
   18a70:	00000d31 	.word	0x00000d31
   18a74:	432b5441 	.word	0x432b5441
   18a78:	3d504c4f 	.word	0x3d504c4f
   18a7c:	00000d31 	.word	0x00000d31
   18a80:	432b5441 	.word	0x432b5441
   18a84:	4b4c4353 	.word	0x4b4c4353
   18a88:	000d313d 	.word	0x000d313d
   18a8c:	432b5441 	.word	0x432b5441
   18a90:	3f504c4f 	.word	0x3f504c4f
   18a94:	0000000d 	.word	0x0000000d
   18a98:	4c4f432b 	.word	0x4c4f432b
   18a9c:	00000050 	.word	0x00000050
   18aa0:	0000003a 	.word	0x0000003a
   18aa4:	0000002c 	.word	0x0000002c
   18aa8:	432b5441 	.word	0x432b5441
   18aac:	3d43434c 	.word	0x3d43434c
   18ab0:	00000d31 	.word	0x00000d31
   18ab4:	46265441 	.word	0x46265441
   18ab8:	0000000d 	.word	0x0000000d
   18abc:	30455441 	.word	0x30455441
   18ac0:	0000000d 	.word	0x0000000d
   18ac4:	432b5441 	.word	0x432b5441
   18ac8:	3d46474d 	.word	0x3d46474d
   18acc:	00000d31 	.word	0x00000d31
   18ad0:	432b5441 	.word	0x432b5441
   18ad4:	3d504d53 	.word	0x3d504d53
   18ad8:	312c3731 	.word	0x312c3731
   18adc:	302c3736 	.word	0x302c3736
   18ae0:	000d302c 	.word	0x000d302c
   18ae4:	432b5441 	.word	0x432b5441
   18ae8:	3d534153 	.word	0x3d534153
   18aec:	00000d30 	.word	0x00000d30
   18af0:	432b5441 	.word	0x432b5441
   18af4:	3d534153 	.word	0x3d534153
   18af8:	00000d31 	.word	0x00000d31
   18afc:	432b5441 	.word	0x432b5441
   18b00:	000d5153 	.word	0x000d5153
   18b04:	00003939 	.word	0x00003939
   18b08:	432b5441 	.word	0x432b5441
   18b0c:	3d494d4e 	.word	0x3d494d4e
   18b10:	2c312c32 	.word	0x2c312c32
   18b14:	2c302c30 	.word	0x2c302c30
   18b18:	00000d30 	.word	0x00000d30
   18b1c:	432b5441 	.word	0x432b5441
   18b20:	3d494d4e 	.word	0x3d494d4e
   18b24:	2c302c31 	.word	0x2c302c31
   18b28:	2c302c30 	.word	0x2c302c30
   18b2c:	00000d30 	.word	0x00000d30
   18b30:	432b5441 	.word	0x432b5441
   18b34:	3d53474d 	.word	0x3d53474d
   18b38:	22732522 	.word	0x22732522
   18b3c:	0000000d 	.word	0x0000000d
   18b40:	0000003e 	.word	0x0000003e
   18b44:	0d1a7325 	.word	0x0d1a7325
   18b48:	00000000 	.word	0x00000000
   18b4c:	432b5441 	.word	0x432b5441
   18b50:	3d4c474d 	.word	0x3d4c474d
   18b54:	43455222 	.word	0x43455222
   18b58:	524e5520 	.word	0x524e5520
   18b5c:	22444145 	.word	0x22444145
   18b60:	0000000d 	.word	0x0000000d
   18b64:	432b5441 	.word	0x432b5441
   18b68:	3d4c474d 	.word	0x3d4c474d
   18b6c:	43455222 	.word	0x43455222
   18b70:	41455220 	.word	0x41455220
   18b74:	000d2244 	.word	0x000d2244
   18b78:	432b5441 	.word	0x432b5441
   18b7c:	3d4c474d 	.word	0x3d4c474d
   18b80:	4c4c4122 	.word	0x4c4c4122
   18b84:	00000d22 	.word	0x00000d22
   18b88:	4c474d43 	.word	0x4c474d43
   18b8c:	00000000 	.word	0x00000000
   18b90:	432b5441 	.word	0x432b5441
   18b94:	3d52474d 	.word	0x3d52474d
   18b98:	000d6425 	.word	0x000d6425
   18b9c:	474d432b 	.word	0x474d432b
   18ba0:	00000052 	.word	0x00000052
   18ba4:	25445441 	.word	0x25445441
   18ba8:	000d3b73 	.word	0x000d3b73
   18bac:	0d415441 	.word	0x0d415441
   18bb0:	00000000 	.word	0x00000000
   18bb4:	432b5441 	.word	0x432b5441
   18bb8:	3d53544c 	.word	0x3d53544c
   18bbc:	00000d31 	.word	0x00000d31
   18bc0:	432b5441 	.word	0x432b5441
   18bc4:	3d53544c 	.word	0x3d53544c
   18bc8:	00000d30 	.word	0x00000d30
   18bcc:	442b5441 	.word	0x442b5441
   18bd0:	3d544544 	.word	0x3d544544
   18bd4:	00000d31 	.word	0x00000d31
   18bd8:	562b5441 	.word	0x562b5441
   18bdc:	223d5354 	.word	0x223d5354
   18be0:	0d227325 	.word	0x0d227325
   18be4:	00000000 	.word	0x00000000
   18be8:	432b5441 	.word	0x432b5441
   18bec:	0d505548 	.word	0x0d505548
   18bf0:	00000000 	.word	0x00000000
   18bf4:	432b5441 	.word	0x432b5441
   18bf8:	3d415743 	.word	0x3d415743
   18bfc:	0d302c30 	.word	0x0d302c30
   18c00:	00000000 	.word	0x00000000
   18c04:	472b5441 	.word	0x472b5441
   18c08:	55424d53 	.word	0x55424d53
   18c0c:	313d5953 	.word	0x313d5953
   18c10:	0000000d 	.word	0x0000000d
   18c14:	472b5441 	.word	0x472b5441
   18c18:	55424d53 	.word	0x55424d53
   18c1c:	303d5953 	.word	0x303d5953
   18c20:	0000000d 	.word	0x0000000d
   18c24:	432b5441 	.word	0x432b5441
   18c28:	3d434552 	.word	0x3d434552
   18c2c:	00000d35 	.word	0x00000d35
   18c30:	432b5441 	.word	0x432b5441
   18c34:	3d434552 	.word	0x3d434552
   18c38:	43222c34 	.word	0x43222c34
   18c3c:	73555c3a 	.word	0x73555c3a
   18c40:	255c7265 	.word	0x255c7265
   18c44:	6d612e63 	.word	0x6d612e63
   18c48:	302c2272 	.word	0x302c2272
   18c4c:	2c30392c 	.word	0x2c30392c
   18c50:	000d7525 	.word	0x000d7525
   18c54:	432b5441 	.word	0x432b5441
   18c58:	3f4b4c43 	.word	0x3f4b4c43
   18c5c:	0000000d 	.word	0x0000000d
   18c60:	00000022 	.word	0x00000022
   18c64:	0000002f 	.word	0x0000002f
   18c68:	0000002b 	.word	0x0000002b
   18c6c:	544d432b 	.word	0x544d432b
   18c70:	00003a49 	.word	0x00003a49
   18c74:	474e4952 	.word	0x474e4952
   18c78:	00000000 	.word	0x00000000
   18c7c:	494c432b 	.word	0x494c432b
   18c80:	00000050 	.word	0x00000050
   18c84:	43204f4e 	.word	0x43204f4e
   18c88:	49525241 	.word	0x49525241
   18c8c:	00005245 	.word	0x00005245
   18c90:	59535542 	.word	0x59535542
   18c94:	00000000 	.word	0x00000000
   18c98:	41204f4e 	.word	0x41204f4e
   18c9c:	4557534e 	.word	0x4557534e
   18ca0:	00000052 	.word	0x00000052
   18ca4:	4d54442b 	.word	0x4d54442b
   18ca8:	00003a46 	.word	0x00003a46
   18cac:	4552432b 	.word	0x4552432b
   18cb0:	30203a43 	.word	0x30203a43
   18cb4:	00000000 	.word	0x00000000
   18cb8:	532b5441 	.word	0x532b5441
   18cbc:	52425041 	.word	0x52425041
   18cc0:	312c333d 	.word	0x312c333d
   18cc4:	4f43222c 	.word	0x4f43222c
   18cc8:	5059544e 	.word	0x5059544e
   18ccc:	222c2245 	.word	0x222c2245
   18cd0:	53525047 	.word	0x53525047
   18cd4:	00000d22 	.word	0x00000d22
   18cd8:	432b5441 	.word	0x432b5441
   18cdc:	3f53504f 	.word	0x3f53504f
   18ce0:	0000000d 	.word	0x0000000d
   18ce4:	504f432b 	.word	0x504f432b
   18ce8:	00003a53 	.word	0x00003a53
   18cec:	41454449 	.word	0x41454449
   18cf0:	00000000 	.word	0x00000000
   18cf4:	532b5441 	.word	0x532b5441
   18cf8:	52425041 	.word	0x52425041
   18cfc:	312c333d 	.word	0x312c333d
   18d00:	5041222c 	.word	0x5041222c
   18d04:	222c224e 	.word	0x222c224e
   18d08:	65746e69 	.word	0x65746e69
   18d0c:	74656e72 	.word	0x74656e72
   18d10:	00000d22 	.word	0x00000d22
   18d14:	41444f56 	.word	0x41444f56
   18d18:	00000000 	.word	0x00000000
   18d1c:	532b5441 	.word	0x532b5441
   18d20:	52425041 	.word	0x52425041
   18d24:	312c333d 	.word	0x312c333d
   18d28:	5041222c 	.word	0x5041222c
   18d2c:	222c224e 	.word	0x222c224e
   18d30:	22777777 	.word	0x22777777
   18d34:	0000000d 	.word	0x0000000d
   18d38:	4c4e5342 	.word	0x4c4e5342
   18d3c:	00000000 	.word	0x00000000
   18d40:	532b5441 	.word	0x532b5441
   18d44:	52425041 	.word	0x52425041
   18d48:	312c333d 	.word	0x312c333d
   18d4c:	5041222c 	.word	0x5041222c
   18d50:	222c224e 	.word	0x222c224e
   18d54:	6c6e7362 	.word	0x6c6e7362
   18d58:	2274656e 	.word	0x2274656e
   18d5c:	0000000d 	.word	0x0000000d
   18d60:	54524941 	.word	0x54524941
   18d64:	00004c45 	.word	0x00004c45
   18d68:	532b5441 	.word	0x532b5441
   18d6c:	52425041 	.word	0x52425041
   18d70:	312c333d 	.word	0x312c333d
   18d74:	5041222c 	.word	0x5041222c
   18d78:	222c224e 	.word	0x222c224e
   18d7c:	74726961 	.word	0x74726961
   18d80:	70676c65 	.word	0x70676c65
   18d84:	632e7372 	.word	0x632e7372
   18d88:	0d226d6f 	.word	0x0d226d6f
   18d8c:	00000000 	.word	0x00000000
   18d90:	532b5441 	.word	0x532b5441
   18d94:	52425041 	.word	0x52425041
   18d98:	312c333d 	.word	0x312c333d
   18d9c:	5041222c 	.word	0x5041222c
   18da0:	222c224e 	.word	0x222c224e
   18da4:	00000d22 	.word	0x00000d22
   18da8:	532b5441 	.word	0x532b5441
   18dac:	52425041 	.word	0x52425041
   18db0:	312c323d 	.word	0x312c323d
   18db4:	0000000d 	.word	0x0000000d
   18db8:	5041532b 	.word	0x5041532b
   18dbc:	203a5242 	.word	0x203a5242
   18dc0:	00302c31 	.word	0x00302c31
   18dc4:	5041532b 	.word	0x5041532b
   18dc8:	203a5242 	.word	0x203a5242
   18dcc:	00312c31 	.word	0x00312c31
   18dd0:	5041532b 	.word	0x5041532b
   18dd4:	203a5242 	.word	0x203a5242
   18dd8:	00322c31 	.word	0x00322c31
   18ddc:	5041532b 	.word	0x5041532b
   18de0:	203a5242 	.word	0x203a5242
   18de4:	00332c31 	.word	0x00332c31
   18de8:	532b5441 	.word	0x532b5441
   18dec:	52425041 	.word	0x52425041
   18df0:	312c313d 	.word	0x312c313d
   18df4:	0000000d 	.word	0x0000000d
   18df8:	532b5441 	.word	0x532b5441
   18dfc:	52425041 	.word	0x52425041
   18e00:	312c303d 	.word	0x312c303d
   18e04:	0000000d 	.word	0x0000000d
   18e08:	462b5441 	.word	0x462b5441
   18e0c:	49435054 	.word	0x49435054
   18e10:	0d313d44 	.word	0x0d313d44
   18e14:	00000000 	.word	0x00000000
   18e18:	462b5441 	.word	0x462b5441
   18e1c:	45535054 	.word	0x45535054
   18e20:	223d5652 	.word	0x223d5652
   18e24:	0d227325 	.word	0x0d227325
   18e28:	00000000 	.word	0x00000000
   18e2c:	462b5441 	.word	0x462b5441
   18e30:	4e555054 	.word	0x4e555054
   18e34:	7325223d 	.word	0x7325223d
   18e38:	00000d22 	.word	0x00000d22
   18e3c:	462b5441 	.word	0x462b5441
   18e40:	57505054 	.word	0x57505054
   18e44:	7325223d 	.word	0x7325223d
   18e48:	00000d22 	.word	0x00000d22
   18e4c:	462b5441 	.word	0x462b5441
   18e50:	45475054 	.word	0x45475054
   18e54:	4d414e54 	.word	0x4d414e54
   18e58:	25223d45 	.word	0x25223d45
   18e5c:	000d2273 	.word	0x000d2273
   18e60:	462b5441 	.word	0x462b5441
   18e64:	45475054 	.word	0x45475054
   18e68:	54415054 	.word	0x54415054
   18e6c:	25223d48 	.word	0x25223d48
   18e70:	000d2273 	.word	0x000d2273
   18e74:	5054462b 	.word	0x5054462b
   18e78:	455a4953 	.word	0x455a4953
   18e7c:	2c31203a 	.word	0x2c31203a
   18e80:	00000000 	.word	0x00000000
   18e84:	462b5441 	.word	0x462b5441
   18e88:	49535054 	.word	0x49535054
   18e8c:	000d455a 	.word	0x000d455a
   18e90:	5054462b 	.word	0x5054462b
   18e94:	3a544547 	.word	0x3a544547
   18e98:	312c3120 	.word	0x312c3120
   18e9c:	00000000 	.word	0x00000000
   18ea0:	462b5441 	.word	0x462b5441
   18ea4:	45475054 	.word	0x45475054
   18ea8:	0d313d54 	.word	0x0d313d54
   18eac:	00000000 	.word	0x00000000
   18eb0:	462b5441 	.word	0x462b5441
   18eb4:	45475054 	.word	0x45475054
   18eb8:	2c323d54 	.word	0x2c323d54
   18ebc:	000d6425 	.word	0x000d6425
   18ec0:	5054462b 	.word	0x5054462b
   18ec4:	3a544547 	.word	0x3a544547
   18ec8:	00000020 	.word	0x00000020
   18ecc:	434c432b 	.word	0x434c432b
   18ed0:	31203a43 	.word	0x31203a43
   18ed4:	322c302c 	.word	0x322c302c
   18ed8:	00000000 	.word	0x00000000
   18edc:	434c432b 	.word	0x434c432b
   18ee0:	31203a43 	.word	0x31203a43
   18ee4:	332c302c 	.word	0x332c302c
   18ee8:	00000000 	.word	0x00000000
   18eec:	434c432b 	.word	0x434c432b
   18ef0:	31203a43 	.word	0x31203a43
   18ef4:	302c302c 	.word	0x302c302c
   18ef8:	00000000 	.word	0x00000000
   18efc:	434c432b 	.word	0x434c432b
   18f00:	31203a43 	.word	0x31203a43
   18f04:	362c302c 	.word	0x362c302c
	...
   18f10:	4e4f4d41 	.word	0x4e4f4d41
   18f14:	00000000 	.word	0x00000000
   18f18:	55475250 	.word	0x55475250
   18f1c:	00004450 	.word	0x00004450
   18f20:	54494157 	.word	0x54494157
   18f24:	00000000 	.word	0x00000000
   18f28:	204d5347 	.word	0x204d5347
   18f2c:	4c4c4143 	.word	0x4c4c4143
   18f30:	49415720 	.word	0x49415720
   18f34:	4e495454 	.word	0x4e495454
   18f38:	49442047 	.word	0x49442047
   18f3c:	4c424153 	.word	0x4c424153
   18f40:	203a2045 	.word	0x203a2045
   18f44:	43435553 	.word	0x43435553
   18f48:	00535345 	.word	0x00535345
   18f4c:	204d5347 	.word	0x204d5347
   18f50:	4c4c4143 	.word	0x4c4c4143
   18f54:	49415720 	.word	0x49415720
   18f58:	4e495454 	.word	0x4e495454
   18f5c:	49442047 	.word	0x49442047
   18f60:	4c424153 	.word	0x4c424153
   18f64:	203a2045 	.word	0x203a2045
   18f68:	4c494146 	.word	0x4c494146
   18f6c:	00004445 	.word	0x00004445
   18f70:	41454c43 	.word	0x41454c43
   18f74:	4c4c4152 	.word	0x4c4c4152
   18f78:	00000000 	.word	0x00000000
   18f7c:	204c4c41 	.word	0x204c4c41
   18f80:	52455355 	.word	0x52455355
   18f84:	4d554e20 	.word	0x4d554e20
   18f88:	53524542 	.word	0x53524542
   18f8c:	454c4320 	.word	0x454c4320
   18f90:	44455241 	.word	0x44455241
   18f94:	00000000 	.word	0x00000000
   18f98:	41464544 	.word	0x41464544
   18f9c:	00544c55 	.word	0x00544c55
   18fa0:	204c4c41 	.word	0x204c4c41
   18fa4:	54544553 	.word	0x54544553
   18fa8:	53474e49 	.word	0x53474e49
   18fac:	45524120 	.word	0x45524120
   18fb0:	574f4e20 	.word	0x574f4e20
   18fb4:	43414620 	.word	0x43414620
   18fb8:	59524f54 	.word	0x59524f54
   18fbc:	46454420 	.word	0x46454420
   18fc0:	544c5541 	.word	0x544c5541
   18fc4:	00000000 	.word	0x00000000
   18fc8:	004d554e 	.word	0x004d554e
   18fcc:	4e206f4e 	.word	0x4e206f4e
   18fd0:	65626d75 	.word	0x65626d75
   18fd4:	45207372 	.word	0x45207372
   18fd8:	74736978 	.word	0x74736978
   18fdc:	00000073 	.word	0x00000073
   18fe0:	45534552 	.word	0x45534552
   18fe4:	00000054 	.word	0x00000054
   18fe8:	00444944 	.word	0x00444944
   18fec:	4f545541 	.word	0x4f545541
   18ff0:	00004e4f 	.word	0x00004e4f
   18ff4:	4f544f4d 	.word	0x4f544f4d
   18ff8:	55412052 	.word	0x55412052
   18ffc:	4e4f4f54 	.word	0x4e4f4f54
   19000:	004e4f20 	.word	0x004e4f20
   19004:	4f545541 	.word	0x4f545541
   19008:	0046464f 	.word	0x0046464f
   1900c:	4f544f4d 	.word	0x4f544f4d
   19010:	55412052 	.word	0x55412052
   19014:	4e4f4f54 	.word	0x4e4f4f54
   19018:	46464f20 	.word	0x46464f20
   1901c:	00000000 	.word	0x00000000
   19020:	50594257 	.word	0x50594257
   19024:	00004e4f 	.word	0x00004e4f
   19028:	45544157 	.word	0x45544157
   1902c:	59422052 	.word	0x59422052
   19030:	53534150 	.word	0x53534150
   19034:	004e4f20 	.word	0x004e4f20
   19038:	50594257 	.word	0x50594257
   1903c:	0046464f 	.word	0x0046464f
   19040:	45544157 	.word	0x45544157
   19044:	59422052 	.word	0x59422052
   19048:	53534150 	.word	0x53534150
   1904c:	46464f20 	.word	0x46464f20
   19050:	00000000 	.word	0x00000000
   19054:	4f505053 	.word	0x4f505053
   19058:	0000004e 	.word	0x0000004e
   1905c:	20505053 	.word	0x20505053
   19060:	00004e4f 	.word	0x00004e4f
   19064:	4f505053 	.word	0x4f505053
   19068:	00004646 	.word	0x00004646
   1906c:	20505053 	.word	0x20505053
   19070:	0046464f 	.word	0x0046464f
   19074:	56505053 	.word	0x56505053
   19078:	00000000 	.word	0x00000000
   1907c:	20505053 	.word	0x20505053
   19080:	544c4f56 	.word	0x544c4f56
   19084:	54455320 	.word	0x54455320
   19088:	00000000 	.word	0x00000000
   1908c:	4f514553 	.word	0x4f514553
   19090:	0000004e 	.word	0x0000004e
   19094:	50514553 	.word	0x50514553
   19098:	004e4f20 	.word	0x004e4f20
   1909c:	4f514553 	.word	0x4f514553
   190a0:	00004646 	.word	0x00004646
   190a4:	50514553 	.word	0x50514553
   190a8:	46464f20 	.word	0x46464f20
   190ac:	00000000 	.word	0x00000000
   190b0:	00444e44 	.word	0x00444e44
   190b4:	20444e44 	.word	0x20444e44
   190b8:	0000203a 	.word	0x0000203a
   190bc:	004b4f20 	.word	0x004b4f20
   190c0:	4b424446 	.word	0x4b424446
   190c4:	00000000 	.word	0x00000000
   190c8:	4b424446 	.word	0x4b424446
   190cc:	25203a20 	.word	0x25203a20
   190d0:	00000064 	.word	0x00000064
   190d4:	50534552 	.word	0x50534552
   190d8:	00000000 	.word	0x00000000
   190dc:	50534552 	.word	0x50534552
   190e0:	00203a20 	.word	0x00203a20
   190e4:	0052564f 	.word	0x0052564f
   190e8:	2052564f 	.word	0x2052564f
   190ec:	20544553 	.word	0x20544553
   190f0:	00004b4f 	.word	0x00004b4f
   190f4:	52444e55 	.word	0x52444e55
   190f8:	00000000 	.word	0x00000000
   190fc:	52444e55 	.word	0x52444e55
   19100:	54455320 	.word	0x54455320
   19104:	004b4f20 	.word	0x004b4f20
   19108:	41545341 	.word	0x41545341
   1910c:	00000054 	.word	0x00000054
   19110:	75253a43 	.word	0x75253a43
   19114:	0a75252e 	.word	0x0a75252e
   19118:	75253a4e 	.word	0x75253a4e
   1911c:	253a4f0a 	.word	0x253a4f0a
   19120:	3a550a75 	.word	0x3a550a75
   19124:	4f0a7525 	.word	0x4f0a7525
   19128:	75253a50 	.word	0x75253a50
   1912c:	3a50550a 	.word	0x3a50550a
   19130:	00007525 	.word	0x00007525
   19134:	4f46564f 	.word	0x4f46564f
   19138:	0000004e 	.word	0x0000004e
   1913c:	56455250 	.word	0x56455250
   19140:	20544e45 	.word	0x20544e45
   19144:	5245564f 	.word	0x5245564f
   19148:	574f4c46 	.word	0x574f4c46
   1914c:	54455320 	.word	0x54455320
   19150:	474e4954 	.word	0x474e4954
   19154:	004e4f20 	.word	0x004e4f20
   19158:	4f46564f 	.word	0x4f46564f
   1915c:	00004646 	.word	0x00004646
   19160:	56455250 	.word	0x56455250
   19164:	20544e45 	.word	0x20544e45
   19168:	5245564f 	.word	0x5245564f
   1916c:	574f4c46 	.word	0x574f4c46
   19170:	54455320 	.word	0x54455320
   19174:	474e4954 	.word	0x474e4954
   19178:	46464f20 	.word	0x46464f20
   1917c:	00000000 	.word	0x00000000
   19180:	4f4d324d 	.word	0x4f4d324d
   19184:	0000004e 	.word	0x0000004e
   19188:	204d324d 	.word	0x204d324d
   1918c:	6e727554 	.word	0x6e727554
   19190:	4f206465 	.word	0x4f206465
   19194:	52202c6e 	.word	0x52202c6e
   19198:	746f6d65 	.word	0x746f6d65
   1919c:	754e2065 	.word	0x754e2065
   191a0:	7265626d 	.word	0x7265626d
   191a4:	726c4120 	.word	0x726c4120
   191a8:	79646165 	.word	0x79646165
   191ac:	72655620 	.word	0x72655620
   191b0:	65696669 	.word	0x65696669
   191b4:	00000064 	.word	0x00000064
   191b8:	6f727245 	.word	0x6f727245
   191bc:	4d203a72 	.word	0x4d203a72
   191c0:	52204d32 	.word	0x52204d32
   191c4:	746f6d65 	.word	0x746f6d65
   191c8:	754e2065 	.word	0x754e2065
   191cc:	7265626d 	.word	0x7265626d
   191d0:	746f4e20 	.word	0x746f4e20
   191d4:	65725020 	.word	0x65725020
   191d8:	746e6573 	.word	0x746e6573
   191dc:	00000000 	.word	0x00000000
   191e0:	4f4d324d 	.word	0x4f4d324d
   191e4:	00004646 	.word	0x00004646
   191e8:	204d324d 	.word	0x204d324d
   191ec:	54544553 	.word	0x54544553
   191f0:	20474e49 	.word	0x20474e49
   191f4:	0046464f 	.word	0x0046464f
   191f8:	54415453 	.word	0x54415453
   191fc:	00005355 	.word	0x00005355
   19200:	45544c41 	.word	0x45544c41
   19204:	54414e52 	.word	0x54414e52
   19208:	554e2045 	.word	0x554e2045
   1920c:	5245424d 	.word	0x5245424d
   19210:	004e4f20 	.word	0x004e4f20
   19214:	45544c41 	.word	0x45544c41
   19218:	54414e52 	.word	0x54414e52
   1921c:	554e2045 	.word	0x554e2045
   19220:	5245424d 	.word	0x5245424d
   19224:	544f4e20 	.word	0x544f4e20
   19228:	45525020 	.word	0x45525020
   1922c:	544e4553 	.word	0x544e4553
   19230:	00000000 	.word	0x00000000
   19234:	464f4d41 	.word	0x464f4d41
   19238:	00000046 	.word	0x00000046
   1923c:	45544c41 	.word	0x45544c41
   19240:	54414e52 	.word	0x54414e52
   19244:	4f4d2045 	.word	0x4f4d2045
   19248:	454c4942 	.word	0x454c4942
   1924c:	4d554e20 	.word	0x4d554e20
   19250:	20524542 	.word	0x20524542
   19254:	0046464f 	.word	0x0046464f
   19258:	464f434e 	.word	0x464f434e
   1925c:	00000046 	.word	0x00000046
   19260:	43204f4e 	.word	0x43204f4e
   19264:	204c4c41 	.word	0x204c4c41
   19268:	54544553 	.word	0x54544553
   1926c:	20474e49 	.word	0x20474e49
   19270:	0046464f 	.word	0x0046464f
   19274:	54544547 	.word	0x54544547
   19278:	00454d49 	.word	0x00454d49
   1927c:	454d4954 	.word	0x454d4954
   19280:	25203a20 	.word	0x25203a20
   19284:	75253a75 	.word	0x75253a75
   19288:	00000000 	.word	0x00000000
   1928c:	54544553 	.word	0x54544553
   19290:	00454d49 	.word	0x00454d49
   19294:	4954434e 	.word	0x4954434e
   19298:	0000454d 	.word	0x0000454d
   1929c:	0000002d 	.word	0x0000002d
   192a0:	0000003a 	.word	0x0000003a
   192a4:	43204f4e 	.word	0x43204f4e
   192a8:	204c4c41 	.word	0x204c4c41
   192ac:	494d4954 	.word	0x494d4954
   192b0:	2053474e 	.word	0x2053474e
   192b4:	00544553 	.word	0x00544553
   192b8:	47415453 	.word	0x47415453
   192bc:	00000045 	.word	0x00000045
   192c0:	4c4c4143 	.word	0x4c4c4143
   192c4:	41545320 	.word	0x41545320
   192c8:	53204547 	.word	0x53204547
   192cc:	54205445 	.word	0x54205445
   192d0:	203a204f 	.word	0x203a204f
   192d4:	00006425 	.word	0x00006425
   192d8:	52415453 	.word	0x52415453
   192dc:	454d4954 	.word	0x454d4954
   192e0:	00000000 	.word	0x00000000
   192e4:	41545320 	.word	0x41545320
   192e8:	4d495452 	.word	0x4d495452
   192ec:	45532045 	.word	0x45532045
   192f0:	4f542054 	.word	0x4f542054
   192f4:	25203a20 	.word	0x25203a20
   192f8:	00000064 	.word	0x00000064
   192fc:	4f545541 	.word	0x4f545541
   19300:	454d4954 	.word	0x454d4954
   19304:	00000000 	.word	0x00000000
   19308:	54554120 	.word	0x54554120
   1930c:	4d49544f 	.word	0x4d49544f
   19310:	45532045 	.word	0x45532045
   19314:	4f542054 	.word	0x4f542054
   19318:	25203a20 	.word	0x25203a20
   1931c:	00000064 	.word	0x00000064
   19320:	004c4142 	.word	0x004c4142
   19324:	002b504d 	.word	0x002b504d
   19328:	4f4e2050 	.word	0x4f4e2050
   1932c:	44444120 	.word	0x44444120
   19330:	00444544 	.word	0x00444544
   19334:	002b534d 	.word	0x002b534d
   19338:	4f4e2053 	.word	0x4f4e2053
   1933c:	44444120 	.word	0x44444120
   19340:	00444544 	.word	0x00444544
   19344:	00002b4d 	.word	0x00002b4d
   19348:	49424f4d 	.word	0x49424f4d
   1934c:	4e20454c 	.word	0x4e20454c
   19350:	00003a4f 	.word	0x00003a4f
   19354:	0000000a 	.word	0x0000000a
   19358:	45444441 	.word	0x45444441
   1935c:	55532044 	.word	0x55532044
   19360:	53454343 	.word	0x53454343
   19364:	4c554653 	.word	0x4c554653
   19368:	0000594c 	.word	0x0000594c
   1936c:	00002d4d 	.word	0x00002d4d
   19370:	4f4d4552 	.word	0x4f4d4552
   19374:	20444556 	.word	0x20444556
   19378:	43435553 	.word	0x43435553
   1937c:	46535345 	.word	0x46535345
   19380:	594c4c55 	.word	0x594c4c55
   19384:	00000000 	.word	0x00000000
   19388:	002b4d41 	.word	0x002b4d41
   1938c:	45544c41 	.word	0x45544c41
   19390:	54414e52 	.word	0x54414e52
   19394:	4f4d2045 	.word	0x4f4d2045
   19398:	454c4942 	.word	0x454c4942
   1939c:	204f4e20 	.word	0x204f4e20
   193a0:	20444441 	.word	0x20444441
   193a4:	43435553 	.word	0x43435553
   193a8:	00535345 	.word	0x00535345
   193ac:	002b4d4d 	.word	0x002b4d4d
   193b0:	204d324d 	.word	0x204d324d
   193b4:	202e4f4e 	.word	0x202e4f4e
   193b8:	45444441 	.word	0x45444441
   193bc:	00000044 	.word	0x00000044
   193c0:	002b524d 	.word	0x002b524d
   193c4:	204d324d 	.word	0x204d324d
   193c8:	4f4d4552 	.word	0x4f4d4552
   193cc:	4e204554 	.word	0x4e204554
   193d0:	41202e4f 	.word	0x41202e4f
   193d4:	44454444 	.word	0x44454444
   193d8:	00000000 	.word	0x00000000
   193dc:	4f525245 	.word	0x4f525245
   193e0:	203a2052 	.word	0x203a2052
   193e4:	00007325 	.word	0x00007325
   193e8:	00004e4f 	.word	0x00004e4f
   193ec:	48502032 	.word	0x48502032
   193f0:	00455341 	.word	0x00455341
   193f4:	00004b4f 	.word	0x00004b4f
   193f8:	4f525245 	.word	0x4f525245
   193fc:	00000052 	.word	0x00000052
   19400:	203a5952 	.word	0x203a5952
   19404:	59206425 	.word	0x59206425
   19408:	25203a42 	.word	0x25203a42
   1940c:	52422064 	.word	0x52422064
   19410:	6425203a 	.word	0x6425203a
   19414:	3a43410a 	.word	0x3a43410a
   19418:	0a732520 	.word	0x0a732520
   1941c:	75716553 	.word	0x75716553
   19420:	65636e65 	.word	0x65636e65
   19424:	7325203a 	.word	0x7325203a
   19428:	746f4d0a 	.word	0x746f4d0a
   1942c:	203a726f 	.word	0x203a726f
   19430:	430a7325 	.word	0x430a7325
   19434:	65727275 	.word	0x65727275
   19438:	203a746e 	.word	0x203a746e
   1943c:	0a416425 	.word	0x0a416425
   19440:	7774654e 	.word	0x7774654e
   19444:	3a6b726f 	.word	0x3a6b726f
   19448:	00642520 	.word	0x00642520
   1944c:	304d4d56 	.word	0x304d4d56
   19450:	00000031 	.word	0x00000031
   19454:	4f544f4d 	.word	0x4f544f4d
   19458:	00002052 	.word	0x00002052
   1945c:	0046464f 	.word	0x0046464f
   19460:	494d4441 	.word	0x494d4441
   19464:	0000004e 	.word	0x0000004e
   19468:	00000023 	.word	0x00000023
   1946c:	30524d56 	.word	0x30524d56
   19470:	00000032 	.word	0x00000032
   19474:	204d324d 	.word	0x204d324d
   19478:	4e525554 	.word	0x4e525554
   1947c:	4f204445 	.word	0x4f204445
   19480:	0000004e 	.word	0x0000004e
   19484:	0000203a 	.word	0x0000203a
   19488:	00006cc4 	.word	0x00006cc4
   1948c:	00006daa 	.word	0x00006daa
   19490:	00006daa 	.word	0x00006daa
   19494:	00006cc4 	.word	0x00006cc4
   19498:	00006daa 	.word	0x00006daa
   1949c:	00006daa 	.word	0x00006daa
   194a0:	00006daa 	.word	0x00006daa
   194a4:	00006daa 	.word	0x00006daa
   194a8:	00006daa 	.word	0x00006daa
   194ac:	00006daa 	.word	0x00006daa
   194b0:	00006daa 	.word	0x00006daa
   194b4:	00006daa 	.word	0x00006daa
   194b8:	00006cc4 	.word	0x00006cc4
   194bc:	00006daa 	.word	0x00006daa
   194c0:	00006daa 	.word	0x00006daa
   194c4:	00006daa 	.word	0x00006daa
   194c8:	00006c86 	.word	0x00006c86
   194cc:	00006daa 	.word	0x00006daa
   194d0:	00006cc4 	.word	0x00006cc4
   194d4:	49524b20 	.word	0x49524b20
   194d8:	414e4853 	.word	0x414e4853
   194dc:	4d532020 	.word	0x4d532020
   194e0:	20545241 	.word	0x20545241
   194e4:	00000000 	.word	0x00000000
   194e8:	54202020 	.word	0x54202020
   194ec:	4e484345 	.word	0x4e484345
   194f0:	474f4c4f 	.word	0x474f4c4f
   194f4:	20202059 	.word	0x20202059
   194f8:	00000000 	.word	0x00000000
   194fc:	4f532020 	.word	0x4f532020
   19500:	41575446 	.word	0x41575446
   19504:	56204552 	.word	0x56204552
   19508:	20205245 	.word	0x20205245
   1950c:	00000000 	.word	0x00000000
   19510:	31422020 	.word	0x31422020
   19514:	33302d36 	.word	0x33302d36
   19518:	2d34302d 	.word	0x2d34302d
   1951c:	20203931 	.word	0x20203931
   19520:	00000000 	.word	0x00000000
   19524:	00007325 	.word	0x00007325
   19528:	20595256 	.word	0x20595256
   1952c:	59562020 	.word	0x59562020
   19530:	20202042 	.word	0x20202042
   19534:	20524256 	.word	0x20524256
   19538:	00000000 	.word	0x00000000
   1953c:	6c333025 	.word	0x6c333025
   19540:	20202075 	.word	0x20202075
   19544:	00000000 	.word	0x00000000
   19548:	6c333025 	.word	0x6c333025
   1954c:	00002075 	.word	0x00002075
   19550:	4f544f4d 	.word	0x4f544f4d
   19554:	20203a52 	.word	0x20203a52
   19558:	2046464f 	.word	0x2046464f
   1955c:	20202020 	.word	0x20202020
   19560:	00000000 	.word	0x00000000
   19564:	20202020 	.word	0x20202020
   19568:	20202020 	.word	0x20202020
   1956c:	20202020 	.word	0x20202020
   19570:	20202020 	.word	0x20202020
   19574:	00000000 	.word	0x00000000
   19578:	4f544f4d 	.word	0x4f544f4d
   1957c:	55432052 	.word	0x55432052
   19580:	4e455252 	.word	0x4e455252
   19584:	20203a54 	.word	0x20203a54
   19588:	00000000 	.word	0x00000000
   1958c:	6c333025 	.word	0x6c333025
   19590:	30252e75 	.word	0x30252e75
   19594:	20756c32 	.word	0x20756c32
   19598:	20202020 	.word	0x20202020
   1959c:	20202020 	.word	0x20202020
   195a0:	00202020 	.word	0x00202020
   195a4:	48502033 	.word	0x48502033
   195a8:	20455341 	.word	0x20455341
   195ac:	3a514553 	.word	0x3a514553
   195b0:	00000000 	.word	0x00000000
   195b4:	204b4f20 	.word	0x204b4f20
   195b8:	00000000 	.word	0x00000000
   195bc:	52524520 	.word	0x52524520
   195c0:	00000000 	.word	0x00000000
   195c4:	53414850 	.word	0x53414850
   195c8:	54532045 	.word	0x54532045
   195cc:	3a455441 	.word	0x3a455441
   195d0:	00000000 	.word	0x00000000
   195d4:	48503320 	.word	0x48503320
   195d8:	00000020 	.word	0x00000020
   195dc:	48503220 	.word	0x48503220
   195e0:	00000020 	.word	0x00000020
   195e4:	46464f20 	.word	0x46464f20
   195e8:	00000000 	.word	0x00000000
   195ec:	454c2d4f 	.word	0x454c2d4f
   195f0:	204c4556 	.word	0x204c4556
   195f4:	0000203a 	.word	0x0000203a
   195f8:	48474948 	.word	0x48474948
   195fc:	00002020 	.word	0x00002020
   19600:	2044494d 	.word	0x2044494d
   19604:	00002020 	.word	0x00002020
   19608:	20574f4c 	.word	0x20574f4c
   1960c:	00002020 	.word	0x00002020
   19610:	454c2d55 	.word	0x454c2d55
   19614:	204c4556 	.word	0x204c4556
   19618:	0000203a 	.word	0x0000203a
   1961c:	43545243 	.word	0x43545243
   19620:	0000204c 	.word	0x0000204c
   19624:	74746142 	.word	0x74746142
   19628:	50797265 	.word	0x50797265
   1962c:	203a7265 	.word	0x203a7265
   19630:	25257525 	.word	0x25257525
   19634:	00000020 	.word	0x00000020
   19638:	4e474953 	.word	0x4e474953
   1963c:	3a204c41 	.word	0x3a204c41
   19640:	00000020 	.word	0x00000020
   19644:	20202020 	.word	0x20202020
   19648:	00202020 	.word	0x00202020
   1964c:	4f434e49 	.word	0x4f434e49
   19650:	474e494d 	.word	0x474e494d
   19654:	4c414320 	.word	0x4c414320
   19658:	202e2e4c 	.word	0x202e2e4c
   1965c:	00000000 	.word	0x00000000
   19660:	36312d25 	.word	0x36312d25
   19664:	00000073 	.word	0x00000073
   19668:	43204e49 	.word	0x43204e49
   1966c:	2e4c4c41 	.word	0x2e4c4c41
   19670:	20202e2e 	.word	0x20202e2e
   19674:	20202020 	.word	0x20202020
   19678:	00000000 	.word	0x00000000
   1967c:	4c414944 	.word	0x4c414944
   19680:	2e474e49 	.word	0x2e474e49
   19684:	20202e2e 	.word	0x20202e2e
   19688:	20202020 	.word	0x20202020
   1968c:	00000000 	.word	0x00000000
   19690:	4f434e49 	.word	0x4f434e49
   19694:	474e494d 	.word	0x474e494d
   19698:	534d5320 	.word	0x534d5320
   1969c:	202e2e2e 	.word	0x202e2e2e
   196a0:	00000000 	.word	0x00000000
   196a4:	4754554f 	.word	0x4754554f
   196a8:	474e494f 	.word	0x474e494f
   196ac:	534d5320 	.word	0x534d5320
   196b0:	202e2e2e 	.word	0x202e2e2e
	...
   196bc:	1f1f0000 	.word	0x1f1f0000
   196c0:	00000000 	.word	0x00000000
   196c4:	1f1f1f00 	.word	0x1f1f1f00
   196c8:	00000000 	.word	0x00000000
   196cc:	1f1f1f1f 	.word	0x1f1f1f1f
   196d0:	1f1f0000 	.word	0x1f1f0000
   196d4:	1f1f1f1f 	.word	0x1f1f1f1f
   196d8:	1f1f1f1f 	.word	0x1f1f1f1f
   196dc:	1f1f1f1f 	.word	0x1f1f1f1f
   196e0:	00008024 	.word	0x00008024
   196e4:	00007c38 	.word	0x00007c38
   196e8:	00007c7c 	.word	0x00007c7c
   196ec:	00007ce2 	.word	0x00007ce2
   196f0:	00007d50 	.word	0x00007d50
   196f4:	00007df4 	.word	0x00007df4
   196f8:	00007f58 	.word	0x00007f58
   196fc:	00008022 	.word	0x00008022
   19700:	00007f72 	.word	0x00007f72
   19704:	00007f90 	.word	0x00007f90
   19708:	00007fae 	.word	0x00007fae
   1970c:	00007fcc 	.word	0x00007fcc
   19710:	00007ff4 	.word	0x00007ff4
   19714:	756c2530 	.word	0x756c2530
   19718:	756c2530 	.word	0x756c2530
   1971c:	756c2530 	.word	0x756c2530
   19720:	00000000 	.word	0x00000000
   19724:	00000002 	.word	0x00000002
   19728:	00000003 	.word	0x00000003
   1972c:	00000028 	.word	0x00000028
   19730:	00000029 	.word	0x00000029
   19734:	00000004 	.word	0x00000004
   19738:	00000005 	.word	0x00000005
   1973c:	00000006 	.word	0x00000006
   19740:	00000007 	.word	0x00000007
   19744:	00000020 	.word	0x00000020
   19748:	00000021 	.word	0x00000021
   1974c:	00000022 	.word	0x00000022
   19750:	00000023 	.word	0x00000023
   19754:	00000024 	.word	0x00000024
   19758:	00000025 	.word	0x00000025
   1975c:	00000026 	.word	0x00000026
   19760:	00000027 	.word	0x00000027
   19764:	00000008 	.word	0x00000008
   19768:	00000009 	.word	0x00000009
   1976c:	0000000a 	.word	0x0000000a
   19770:	0000000b 	.word	0x0000000b
   19774:	0000c48a 	.word	0x0000c48a
   19778:	0000c490 	.word	0x0000c490
   1977c:	0000c490 	.word	0x0000c490
   19780:	0000c490 	.word	0x0000c490
   19784:	0000c490 	.word	0x0000c490
   19788:	0000c490 	.word	0x0000c490
   1978c:	0000c490 	.word	0x0000c490
   19790:	0000c490 	.word	0x0000c490
   19794:	0000c490 	.word	0x0000c490
   19798:	0000c490 	.word	0x0000c490
   1979c:	0000c490 	.word	0x0000c490
   197a0:	0000c490 	.word	0x0000c490
   197a4:	0000c490 	.word	0x0000c490
   197a8:	0000c490 	.word	0x0000c490
   197ac:	0000c490 	.word	0x0000c490
   197b0:	0000c490 	.word	0x0000c490
   197b4:	0000c468 	.word	0x0000c468
   197b8:	0000c490 	.word	0x0000c490
   197bc:	0000c490 	.word	0x0000c490
   197c0:	0000c490 	.word	0x0000c490
   197c4:	0000c490 	.word	0x0000c490
   197c8:	0000c490 	.word	0x0000c490
   197cc:	0000c490 	.word	0x0000c490
   197d0:	0000c490 	.word	0x0000c490
   197d4:	0000c490 	.word	0x0000c490
   197d8:	0000c490 	.word	0x0000c490
   197dc:	0000c490 	.word	0x0000c490
   197e0:	0000c490 	.word	0x0000c490
   197e4:	0000c490 	.word	0x0000c490
   197e8:	0000c490 	.word	0x0000c490
   197ec:	0000c490 	.word	0x0000c490
   197f0:	0000c490 	.word	0x0000c490
   197f4:	0000c484 	.word	0x0000c484
   197f8:	0000c490 	.word	0x0000c490
   197fc:	0000c490 	.word	0x0000c490
   19800:	0000c490 	.word	0x0000c490
   19804:	0000c490 	.word	0x0000c490
   19808:	0000c490 	.word	0x0000c490
   1980c:	0000c490 	.word	0x0000c490
   19810:	0000c490 	.word	0x0000c490
   19814:	0000c490 	.word	0x0000c490
   19818:	0000c490 	.word	0x0000c490
   1981c:	0000c490 	.word	0x0000c490
   19820:	0000c490 	.word	0x0000c490
   19824:	0000c490 	.word	0x0000c490
   19828:	0000c490 	.word	0x0000c490
   1982c:	0000c490 	.word	0x0000c490
   19830:	0000c490 	.word	0x0000c490
   19834:	0000c47e 	.word	0x0000c47e
   19838:	0000c426 	.word	0x0000c426
   1983c:	0000c43c 	.word	0x0000c43c
   19840:	0000c452 	.word	0x0000c452
   19844:	0000c40c 	.word	0x0000c40c
   19848:	42000800 	.word	0x42000800
   1984c:	42000c00 	.word	0x42000c00
   19850:	42001000 	.word	0x42001000
   19854:	42001400 	.word	0x42001400
   19858:	42001800 	.word	0x42001800
   1985c:	42001c00 	.word	0x42001c00
   19860:	454c4449 	.word	0x454c4449
   19864:	00000000 	.word	0x00000000
   19868:	20726d54 	.word	0x20726d54
   1986c:	00637653 	.word	0x00637653
   19870:	000101a8 	.word	0x000101a8
   19874:	000101a8 	.word	0x000101a8
   19878:	000101a8 	.word	0x000101a8
   1987c:	00010236 	.word	0x00010236
   19880:	00010200 	.word	0x00010200
   19884:	0001022a 	.word	0x0001022a
   19888:	000101a8 	.word	0x000101a8
   1988c:	000101a8 	.word	0x000101a8
   19890:	00010236 	.word	0x00010236
   19894:	00010200 	.word	0x00010200

00019898 <_tcc_intflag>:
   19898:	00000001 00000002 00000004 00000008     ................
   198a8:	00001000 00002000 00004000 00008000     ..... ...@......
   198b8:	00010000 00020000 00040000 00080000     ................
   198c8:	0c0b0a09 00000e0d 00011ab4 00011ab4     ................
   198d8:	00011aa8 00011ab4 00011aa8 00011a82     ................
   198e8:	00011a82 00011ab4 00011ab4 00011ab4     ................
   198f8:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   19908:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   19918:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   19928:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   19938:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   19948:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   19958:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   19968:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   19978:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   19988:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   19998:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   199a8:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   199b8:	00011ab4 00011ab4 00011ab4 00011ab4     ................
   199c8:	00011ab4 00011ab4 00011aa8 00011aa8     ................
   199d8:	00011abe 00011abe 00011abe 00011abe     ................
   199e8:	41744545 50524f4d 456d752e 00012e2e     EEtAMORP.umE....
   199f8:	00012ea8 00012ea8 00012e4c 00012e46     ........L...F...
   19a08:	00012e52 00012e34 00012e58 00012e8e     R...4...X.......
   19a18:	00013174 000131c4 000131c4 000131c0     t1...1...1...1..
   19a28:	00013166 00013186 00013156 00013198     f1...1..V1...1..
   19a38:	000131aa 00013212 00013240 00013240     .1...2..@2..@2..
   19a48:	0001323c 0001320c 00013218 00013206     <2...2...2...2..
   19a58:	0001321e 00013224 00776f70 74727173     .2..$2..pow.sqrt
	...

00019a70 <TWO52>:
   19a70:	00000000 43300000 00000000 c3300000     ......0C......0.
   19a80:	00015ba4 00015b74 00015b86 00015ac8     .[..t[...[...Z..
   19a90:	00015b86 00015b6a 00015b86 00015ac8     .[..j[...[...Z..
   19aa0:	00015b74 00015b74 00015b6a 00015ac8     t[..t[..j[...Z..
   19ab0:	00015ad0 00015ad0 00015ad0 00015b8c     .Z...Z...Z...[..
   19ac0:	00015b74 00015b74 00015b48 00015c2c     t[..t[..H[..,\..
   19ad0:	00015b48 00015b6a 00015b48 00015c2c     H[..j[..H[..,\..
   19ae0:	00015b74 00015b74 00015b6a 00015c2c     t[..t[..j[..,\..
   19af0:	00015ad0 00015ad0 00015ad0 00015c36     .Z...Z...Z..6\..
   19b00:	00015dd4 00015d24 00015d24 00015d22     .]..$]..$].."]..
   19b10:	00015dc6 00015dc6 00015dbc 00015d22     .]...]...].."]..
   19b20:	00015dc6 00015dbc 00015dc6 00015d22     .]...]...].."]..
   19b30:	00015dcc 00015dcc 00015dcc 00015e5c     .]...]...]..\^..
   19b40:	0001678c 0001676e 00016728 00016646     .g..ng..(g..Ff..
   19b50:	00016728 00016760 00016728 00016646     (g..`g..(g..Ff..
   19b60:	0001676e 0001676e 00016760 00016646     ng..ng..`g..Ff..
   19b70:	0001663e 0001663e 0001663e 000169a4     >f..>f..>f...i..
   19b80:	00016fec 00016eac 00016eac 00016ea8     .o...n...n...n..
   19b90:	00016fc4 00016fc4 00016fb6 00016ea8     .o...o...o...n..
   19ba0:	00016fc4 00016fb6 00016fc4 00016ea8     .o...o...o...n..
   19bb0:	00016fcc 00016fcc 00016fcc 000171d0     .o...o...o...q..
   19bc0:	4f500043 00584953 3130002e 35343332     C.POSIX...012345
   19bd0:	39383736 64636261 68676665 6c6b6a69     6789abcdefghijkl
   19be0:	706f6e6d 74737271 78777675 00007a79              mnopqrstuvwxyz.

00019bef <_ctype_>:
   19bef:	20202000 20202020 28282020 20282828     .         ((((( 
   19bff:	20202020 20202020 20202020 20202020                     
   19c0f:	10108820 10101010 10101010 10101010      ...............
   19c1f:	04040410 04040404 10040404 10101010     ................
   19c2f:	41411010 41414141 01010101 01010101     ..AAAAAA........
   19c3f:	01010101 01010101 01010101 10101010     ................
   19c4f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   19c5f:	02020202 02020202 02020202 10101010     ................
   19c6f:	00000020 00000000 00000000 00000000      ...............
	...
   19cef:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
   19cff:	31300047 35343332 39383736 44434241     G.0123456789ABCD
   19d0f:	30004645 34333231 38373635 63626139     EF.0123456789abc
   19d1f:	00666564 c0b5f800                                def..

00019d24 <_init>:
   19d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d26:	46c0      	nop			; (mov r8, r8)
   19d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19d2a:	bc08      	pop	{r3}
   19d2c:	469e      	mov	lr, r3
   19d2e:	4770      	bx	lr

00019d30 <__init_array_start>:
   19d30:	000000dd 	.word	0x000000dd

00019d34 <_fini>:
   19d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d36:	46c0      	nop			; (mov r8, r8)
   19d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19d3a:	bc08      	pop	{r3}
   19d3c:	469e      	mov	lr, r3
   19d3e:	4770      	bx	lr

00019d40 <__fini_array_start>:
   19d40:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0101                                             .

20000029 <__fdlib_version>:
20000029:	0001 3000                                        ...

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	826d 0001 7c7d 0001 0000 0000 9bef 0001     m...}|..........
20000180:	9bc8 0001 9cf5 0001 9cf5 0001 9cf5 0001     ................
20000190:	9cf5 0001 9cf5 0001 9cf5 0001 9cf5 0001     ................
200001a0:	9cf5 0001 9cf5 0001 ffff ffff ffff ffff     ................
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
