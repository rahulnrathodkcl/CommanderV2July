
LCD Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000387c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000387c  0000387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000074  20000000  00003884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004f4  20000074  000038f8  00020074  2**2
                  ALLOC
  4 .stack        00002000  20000568  00003dec  00020074  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004756a  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000061be  00000000  00000000  0006765f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cea5  00000000  00000000  0006d81d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000df0  00000000  00000000  0007a6c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001c28  00000000  00000000  0007b4b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00021503  00000000  00000000  0007d0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016a44  00000000  00000000  0009e5dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009f792  00000000  00000000  000b5021  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002a5c  00000000  00000000  001547b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
{
	return gsm_send_at_command((const char*)"AT+FTPGET=1\r", (const char*)"+FTPGET: 1,1",76000,0,NULL);
}

enum gsm_error gsm_read_ftp_download_data(uint16_t size_to_download, char *recv_data,uint16_t *downloaded_data_size)
{	
       0:	68 25 00 20 35 25 00 00 31 25 00 00 31 25 00 00     h%. 5%..1%..1%..
	...
	enum gsm_error err;
	
	char ftpget[20] = {0};
	snprintf(ftpget,20,"AT+FTPGET=2,%d\r",size_to_download);

	err = gsm_send_at_command((const char*)(ftpget), (const char*)"+FTPGET: ",76000,0,NULL);
      2c:	f1 07 00 00 00 00 00 00 00 00 00 00 01 08 00 00     ................
	
	const uint8_t MAX_BUFFER = 50;
	char *aDataBuffer = (char*) calloc(MAX_BUFFER,sizeof(char));
	//buffer created???
	if (aDataBuffer == NULL)
      3c:	45 08 00 00 31 25 00 00 31 25 00 00 51 0a 00 00     E...1%..1%..Q...
	}
	memset(aDataBuffer, '\0', MAX_BUFFER);
	
	if (err == GSM_ERROR_NONE)
	{
		if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
      4c:	31 25 00 00 e9 14 00 00 31 25 00 00 31 25 00 00     1%......1%..1%..
	}
	
	free(aDataBuffer);
	return err;

}
      5c:	6d 0a 00 00 31 25 00 00 89 14 00 00 99 14 00 00     m...1%..........
		char u8tTemp_Char=0;
      6c:	a9 14 00 00 b9 14 00 00 c9 14 00 00 d9 14 00 00     ................
			xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 10);
      7c:	31 25 00 00 31 25 00 00 31 25 00 00 31 25 00 00     1%..1%..1%..1%..
				if (u8tTemp_Char == '\r')
      8c:	31 25 00 00 31 25 00 00 31 25 00 00 31 25 00 00     1%..1%..1%..1%..
		ptrtkn = strtok(aDataBuffer,",");
      9c:	31 25 00 00 31 25 00 00 31 25 00 00 31 25 00 00     1%..1%..1%..1%..
			ptrtkn = strtok(NULL,",");
      ac:	31 25 00 00 00 00 00 00                             1%......

000000b4 <__do_global_dtors_aux>:
			if (atoi(ptrtkn) == 1)
      b4:	b510      	push	{r4, lr}
				*downloaded_data_size = 0;
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
				err = GSM_FTP_DOWNLOAD_DATA_AVAILABLE;
      b8:	7823      	ldrb	r3, [r4, #0]
				*downloaded_data_size = 0;
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
		xSemaphoreGive(gsm_busy_semaphore);
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
	free(aDataBuffer);
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
      d4:	00000000 	.word	0x00000000
		for (uint8_t i=0;i<50;i++)
      d8:	00003884 	.word	0x00003884

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
				*downloaded_data_size = 0;
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
						err = GSM_FTP_DOWNLOAD_FAILED;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
		else if (err_code == 2)
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
			ptrtkn = strtok(NULL,",");
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
			uint16_t recv_data_size = atoi(ptrtkn);
      f4:	bd10      	pop	{r4, pc}
				*downloaded_data_size = 0;
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
			uint16_t recv_data_size = atoi(ptrtkn);
      f8:	2b00      	cmp	r3, #0
				*downloaded_data_size = 0;
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
			if (recv_data_size == 0)
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
				err = GSM_FTP_DOWNLOAD_NO_DATA_AVAILABLE_IN_BUFFER;
     100:	00000000 	.word	0x00000000
				xTimerChangePeriod(gsm_cmd_timeout_timer,((5*1000)/portTICK_PERIOD_MS),portMAX_DELAY);	
     104:	20000078 	.word	0x20000078
     108:	00003884 	.word	0x00003884
     10c:	00003884 	.word	0x00003884
     110:	00000000 	.word	0x00000000

00000114 <port_pin_set_output_level>:
     114:	2200      	movs	r2, #0
     116:	b510      	push	{r4, lr}
				u8tTemp_Char=0;
     118:	0943      	lsrs	r3, r0, #5
     11a:	09c4      	lsrs	r4, r0, #7
     11c:	4294      	cmp	r4, r2
     11e:	d102      	bne.n	126 <port_pin_set_output_level+0x12>
     120:	01da      	lsls	r2, r3, #7
					if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
     122:	4b06      	ldr	r3, [pc, #24]	; (13c <port_pin_set_output_level+0x28>)
     124:	18d2      	adds	r2, r2, r3
     126:	231f      	movs	r3, #31
     128:	4018      	ands	r0, r3
     12a:	3b1e      	subs	r3, #30
						if (u8tRx_Index<recv_data_size)
     12c:	4083      	lsls	r3, r0
     12e:	2900      	cmp	r1, #0
     130:	d001      	beq.n	136 <port_pin_set_output_level+0x22>
							xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
     132:	6193      	str	r3, [r2, #24]
     134:	bd10      	pop	{r4, pc}
     136:	6153      	str	r3, [r2, #20]
     138:	e7fc      	b.n	134 <port_pin_set_output_level+0x20>
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	41004400 	.word	0x41004400

00000140 <LCD_PWR_CONFIG>:
     140:	2300      	movs	r3, #0
     142:	b507      	push	{r0, r1, r2, lr}
							if(xStatus!=errQUEUE_EMPTY)
     144:	2201      	movs	r2, #1
     146:	a901      	add	r1, sp, #4
								*recv_data=u8tTemp_Char;
     148:	708b      	strb	r3, [r1, #2]
     14a:	704b      	strb	r3, [r1, #1]
     14c:	2024      	movs	r0, #36	; 0x24
     14e:	4b02      	ldr	r3, [pc, #8]	; (158 <LCD_PWR_CONFIG+0x18>)
     150:	700a      	strb	r2, [r1, #0]
							err = GSM_FTP_DOWNLOAD_SUCCESS;
     152:	4798      	blx	r3
     154:	bd07      	pop	{r0, r1, r2, pc}
		return 0;
     156:	46c0      	nop			; (mov r8, r8)
     158:	00001825 	.word	0x00001825

0000015c <LCD_PWR_EN>:
     15c:	2210      	movs	r2, #16
     15e:	4b01      	ldr	r3, [pc, #4]	; (164 <LCD_PWR_EN+0x8>)
     160:	601a      	str	r2, [r3, #0]
     162:	4770      	bx	lr
     164:	41004498 	.word	0x41004498

00000168 <pulseEnable>:
     168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     16a:	4f1e      	ldr	r7, [pc, #120]	; (1e4 <pulseEnable+0x7c>)
     16c:	4e1e      	ldr	r6, [pc, #120]	; (1e8 <pulseEnable+0x80>)
     16e:	7838      	ldrb	r0, [r7, #0]
     170:	2100      	movs	r1, #0
     172:	47b0      	blx	r6
     174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <pulseEnable+0x84>)
     176:	2000      	movs	r0, #0
     178:	4798      	blx	r3
     17a:	2400      	movs	r4, #0
     17c:	0002      	movs	r2, r0
     17e:	0023      	movs	r3, r4
     180:	2100      	movs	r1, #0
     182:	481b      	ldr	r0, [pc, #108]	; (1f0 <pulseEnable+0x88>)
     184:	4d1b      	ldr	r5, [pc, #108]	; (1f4 <pulseEnable+0x8c>)
     186:	1880      	adds	r0, r0, r2
     188:	4159      	adcs	r1, r3
     18a:	4a1b      	ldr	r2, [pc, #108]	; (1f8 <pulseEnable+0x90>)
     18c:	2300      	movs	r3, #0
     18e:	47a8      	blx	r5
     190:	4b1a      	ldr	r3, [pc, #104]	; (1fc <pulseEnable+0x94>)
     192:	4798      	blx	r3
     194:	7838      	ldrb	r0, [r7, #0]
     196:	2101      	movs	r1, #1
     198:	47b0      	blx	r6
     19a:	0020      	movs	r0, r4
     19c:	4b13      	ldr	r3, [pc, #76]	; (1ec <pulseEnable+0x84>)
     19e:	4798      	blx	r3
     1a0:	0023      	movs	r3, r4
     1a2:	0002      	movs	r2, r0
     1a4:	2100      	movs	r1, #0
     1a6:	4812      	ldr	r0, [pc, #72]	; (1f0 <pulseEnable+0x88>)
     1a8:	4d12      	ldr	r5, [pc, #72]	; (1f4 <pulseEnable+0x8c>)
     1aa:	1880      	adds	r0, r0, r2
void pulseEnable(void)
{
 	port_pin_set_output_level(_enable_pin, LOW);
 	delay_us(1);
 	port_pin_set_output_level(_enable_pin, HIGH);
 	delay_us(1);
     1ac:	4159      	adcs	r1, r3
     1ae:	4a12      	ldr	r2, [pc, #72]	; (1f8 <pulseEnable+0x90>)
     1b0:	2300      	movs	r3, #0
     1b2:	47a8      	blx	r5
     1b4:	4b11      	ldr	r3, [pc, #68]	; (1fc <pulseEnable+0x94>)
     1b6:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
     1b8:	7838      	ldrb	r0, [r7, #0]
     1ba:	0021      	movs	r1, r4
     1bc:	47b0      	blx	r6
 	delay_us(100);
     1be:	0020      	movs	r0, r4
     1c0:	4b0a      	ldr	r3, [pc, #40]	; (1ec <pulseEnable+0x84>)
     1c2:	4798      	blx	r3
     1c4:	2264      	movs	r2, #100	; 0x64
     1c6:	2300      	movs	r3, #0
     1c8:	0021      	movs	r1, r4
     1ca:	4c0d      	ldr	r4, [pc, #52]	; (200 <pulseEnable+0x98>)
     1cc:	47a0      	blx	r4
     1ce:	2400      	movs	r4, #0
     1d0:	4b07      	ldr	r3, [pc, #28]	; (1f0 <pulseEnable+0x88>)
     1d2:	4a09      	ldr	r2, [pc, #36]	; (1f8 <pulseEnable+0x90>)
     1d4:	18c0      	adds	r0, r0, r3
     1d6:	4161      	adcs	r1, r4
     1d8:	4c06      	ldr	r4, [pc, #24]	; (1f4 <pulseEnable+0x8c>)
     1da:	2300      	movs	r3, #0
     1dc:	47a0      	blx	r4
     1de:	4b07      	ldr	r3, [pc, #28]	; (1fc <pulseEnable+0x94>)
     1e0:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
     1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1e4:	200002e1 	.word	0x200002e1
     1e8:	00000115 	.word	0x00000115
     1ec:	000022f1 	.word	0x000022f1
     1f0:	006acfbf 	.word	0x006acfbf
     1f4:	00002c71 	.word	0x00002c71
     1f8:	006acfc0 	.word	0x006acfc0
     1fc:	20000001 	.word	0x20000001
     200:	00002cb1 	.word	0x00002cb1

00000204 <write4bits>:
{
     204:	b570      	push	{r4, r5, r6, lr}
     206:	0006      	movs	r6, r0
	for (int i = 0; i < 4; i++) 
     208:	2400      	movs	r4, #0
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
     20a:	2501      	movs	r5, #1
     20c:	0031      	movs	r1, r6
     20e:	4121      	asrs	r1, r4
     210:	4b05      	ldr	r3, [pc, #20]	; (228 <write4bits+0x24>)
     212:	4029      	ands	r1, r5
     214:	5d18      	ldrb	r0, [r3, r4]
     216:	4b05      	ldr	r3, [pc, #20]	; (22c <write4bits+0x28>)
	for (int i = 0; i < 4; i++) 
     218:	3401      	adds	r4, #1
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
     21a:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
     21c:	2c04      	cmp	r4, #4
     21e:	d1f5      	bne.n	20c <write4bits+0x8>
	pulseEnable();
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <write4bits+0x2c>)
     222:	4798      	blx	r3
}
     224:	bd70      	pop	{r4, r5, r6, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	200002db 	.word	0x200002db
     22c:	00000115 	.word	0x00000115
     230:	00000169 	.word	0x00000169

00000234 <send>:
	return 1;
}

void send(uint8_t value, uint8_t mode) 
{
	port_pin_set_output_level(_rs_pin, mode);
     234:	1e4b      	subs	r3, r1, #1
     236:	4199      	sbcs	r1, r3
{
     238:	b570      	push	{r4, r5, r6, lr}
     23a:	0004      	movs	r4, r0
	port_pin_set_output_level(_rs_pin, mode);
     23c:	4b05      	ldr	r3, [pc, #20]	; (254 <send+0x20>)
     23e:	b2c9      	uxtb	r1, r1
     240:	7818      	ldrb	r0, [r3, #0]
     242:	4b05      	ldr	r3, [pc, #20]	; (258 <send+0x24>)
     244:	4798      	blx	r3
	
	{
		write4bits(value>>4);
     246:	4d05      	ldr	r5, [pc, #20]	; (25c <send+0x28>)
     248:	0920      	lsrs	r0, r4, #4
     24a:	47a8      	blx	r5
		write4bits(value);
     24c:	0020      	movs	r0, r4
     24e:	47a8      	blx	r5
	}
}
     250:	bd70      	pop	{r4, r5, r6, pc}
     252:	46c0      	nop			; (mov r8, r8)
     254:	200002e2 	.word	0x200002e2
     258:	00000115 	.word	0x00000115
     25c:	00000205 	.word	0x00000205

00000260 <command>:
{
     260:	b510      	push	{r4, lr}
	send(value, LOW);
     262:	2100      	movs	r1, #0
     264:	4b01      	ldr	r3, [pc, #4]	; (26c <command+0xc>)
     266:	4798      	blx	r3
}
     268:	bd10      	pop	{r4, pc}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	00000235 	.word	0x00000235

00000270 <LCD_write>:
     270:	b510      	push	{r4, lr}
     272:	2101      	movs	r1, #1
     274:	4b01      	ldr	r3, [pc, #4]	; (27c <LCD_write+0xc>)
     276:	4798      	blx	r3
     278:	2001      	movs	r0, #1
     27a:	bd10      	pop	{r4, pc}
     27c:	00000235 	.word	0x00000235

00000280 <LCD_clear>:

void LCD_clear(void)
{
     280:	b510      	push	{r4, lr}
	command(LCD_CLEARDISPLAY);
     282:	2001      	movs	r0, #1
     284:	4b0a      	ldr	r3, [pc, #40]	; (2b0 <LCD_clear+0x30>)
     286:	4798      	blx	r3
	delay_us(2000);
     288:	4b0a      	ldr	r3, [pc, #40]	; (2b4 <LCD_clear+0x34>)
     28a:	2000      	movs	r0, #0
     28c:	4798      	blx	r3
     28e:	22fa      	movs	r2, #250	; 0xfa
     290:	4c09      	ldr	r4, [pc, #36]	; (2b8 <LCD_clear+0x38>)
     292:	00d2      	lsls	r2, r2, #3
     294:	2300      	movs	r3, #0
     296:	2100      	movs	r1, #0
     298:	47a0      	blx	r4
     29a:	2300      	movs	r3, #0
     29c:	4a07      	ldr	r2, [pc, #28]	; (2bc <LCD_clear+0x3c>)
     29e:	4c08      	ldr	r4, [pc, #32]	; (2c0 <LCD_clear+0x40>)
     2a0:	1880      	adds	r0, r0, r2
     2a2:	4159      	adcs	r1, r3
     2a4:	4a07      	ldr	r2, [pc, #28]	; (2c4 <LCD_clear+0x44>)
     2a6:	2300      	movs	r3, #0
     2a8:	47a0      	blx	r4
     2aa:	4b07      	ldr	r3, [pc, #28]	; (2c8 <LCD_clear+0x48>)
     2ac:	4798      	blx	r3
}
     2ae:	bd10      	pop	{r4, pc}
     2b0:	00000261 	.word	0x00000261
     2b4:	000022f1 	.word	0x000022f1
     2b8:	00002cb1 	.word	0x00002cb1
     2bc:	006acfbf 	.word	0x006acfbf
     2c0:	00002c71 	.word	0x00002c71
     2c4:	006acfc0 	.word	0x006acfc0
     2c8:	20000001 	.word	0x20000001

000002cc <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
     2cc:	b510      	push	{r4, lr}
     2ce:	1c0b      	adds	r3, r1, #0
     2d0:	2903      	cmp	r1, #3
     2d2:	d900      	bls.n	2d6 <LCD_setCursor+0xa>
     2d4:	2303      	movs	r3, #3
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
	if ( row >= max_lines ) 
	{
		row = max_lines - 1; 
	}
	if ( row >= _numlines )
     2d6:	4a08      	ldr	r2, [pc, #32]	; (2f8 <LCD_setCursor+0x2c>)
     2d8:	b2db      	uxtb	r3, r3
     2da:	7812      	ldrb	r2, [r2, #0]
     2dc:	429a      	cmp	r2, r3
     2de:	d801      	bhi.n	2e4 <LCD_setCursor+0x18>
	{
		row = _numlines - 1;
     2e0:	3a01      	subs	r2, #1
     2e2:	b2d3      	uxtb	r3, r2
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
     2e4:	4a05      	ldr	r2, [pc, #20]	; (2fc <LCD_setCursor+0x30>)
     2e6:	5cd3      	ldrb	r3, [r2, r3]
     2e8:	18c3      	adds	r3, r0, r3
     2ea:	2080      	movs	r0, #128	; 0x80
     2ec:	4240      	negs	r0, r0
     2ee:	4318      	orrs	r0, r3
     2f0:	b2c0      	uxtb	r0, r0
     2f2:	4b03      	ldr	r3, [pc, #12]	; (300 <LCD_setCursor+0x34>)
     2f4:	4798      	blx	r3
}
     2f6:	bd10      	pop	{r4, pc}
     2f8:	200002da 	.word	0x200002da
     2fc:	200002d4 	.word	0x200002d4
     300:	00000261 	.word	0x00000261

00000304 <LCD_display>:
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
	_displaycontrol |= LCD_DISPLAYON;
     304:	2304      	movs	r3, #4
	command(LCD_DISPLAYCONTROL | _displaycontrol);
     306:	200c      	movs	r0, #12
{
     308:	b510      	push	{r4, lr}
	_displaycontrol |= LCD_DISPLAYON;
     30a:	4904      	ldr	r1, [pc, #16]	; (31c <LCD_display+0x18>)
     30c:	780a      	ldrb	r2, [r1, #0]
     30e:	4313      	orrs	r3, r2
     310:	700b      	strb	r3, [r1, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
     312:	4310      	orrs	r0, r2
     314:	4b02      	ldr	r3, [pc, #8]	; (320 <LCD_display+0x1c>)
     316:	4798      	blx	r3
}
     318:	bd10      	pop	{r4, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	200002d9 	.word	0x200002d9
     320:	00000261 	.word	0x00000261

00000324 <LCD_init>:
{
     324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	delay_init();
     326:	4b4d      	ldr	r3, [pc, #308]	; (45c <LCD_init+0x138>)
     328:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
     32a:	203f      	movs	r0, #63	; 0x3f
     32c:	4b4c      	ldr	r3, [pc, #304]	; (460 <LCD_init+0x13c>)
	_enable_pin = LCD_EN_PIN;
     32e:	4a4d      	ldr	r2, [pc, #308]	; (464 <LCD_init+0x140>)
	_rs_pin     = LCD_RS_PIN;
     330:	7018      	strb	r0, [r3, #0]
	_enable_pin = LCD_EN_PIN;
     332:	233e      	movs	r3, #62	; 0x3e
     334:	7013      	strb	r3, [r2, #0]
		_displayfunction |= LCD_2LINE;
     336:	2208      	movs	r2, #8
	_row_offsets[0] = row0;
     338:	2400      	movs	r4, #0
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
     33a:	4e4b      	ldr	r6, [pc, #300]	; (468 <LCD_init+0x144>)
     33c:	3b1d      	subs	r3, #29
     33e:	7033      	strb	r3, [r6, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
     340:	3b01      	subs	r3, #1
     342:	7073      	strb	r3, [r6, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
     344:	3303      	adds	r3, #3
     346:	70b3      	strb	r3, [r6, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
     348:	3b01      	subs	r3, #1
     34a:	70f3      	strb	r3, [r6, #3]
		_displayfunction |= LCD_2LINE;
     34c:	4b47      	ldr	r3, [pc, #284]	; (46c <LCD_init+0x148>)
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     34e:	ad01      	add	r5, sp, #4
     350:	701a      	strb	r2, [r3, #0]
	_numlines = lines;
     352:	4b47      	ldr	r3, [pc, #284]	; (470 <LCD_init+0x14c>)
     354:	3a06      	subs	r2, #6
     356:	701a      	strb	r2, [r3, #0]
	_row_offsets[0] = row0;
     358:	4b46      	ldr	r3, [pc, #280]	; (474 <LCD_init+0x150>)
	_row_offsets[1] = row1;
     35a:	323e      	adds	r2, #62	; 0x3e
     35c:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
     35e:	3a30      	subs	r2, #48	; 0x30
     360:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
     362:	3240      	adds	r2, #64	; 0x40
	_row_offsets[0] = row0;
     364:	701c      	strb	r4, [r3, #0]
	_row_offsets[3] = row3;
     366:	70da      	strb	r2, [r3, #3]
     368:	2301      	movs	r3, #1
	port_pin_set_config(_rs_pin,&config_port_pin);
     36a:	0029      	movs	r1, r5
     36c:	4f42      	ldr	r7, [pc, #264]	; (478 <LCD_init+0x154>)
     36e:	706b      	strb	r3, [r5, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     370:	702b      	strb	r3, [r5, #0]
	config->powersave  = false;
     372:	70ac      	strb	r4, [r5, #2]
	port_pin_set_config(_rs_pin,&config_port_pin);
     374:	47b8      	blx	r7
	port_pin_set_config(_enable_pin,&config_port_pin);
     376:	4b3b      	ldr	r3, [pc, #236]	; (464 <LCD_init+0x140>)
     378:	0029      	movs	r1, r5
     37a:	7818      	ldrb	r0, [r3, #0]
     37c:	47b8      	blx	r7
		port_pin_set_config(_data_pins[i],&config_port_pin);
     37e:	5d30      	ldrb	r0, [r6, r4]
     380:	0029      	movs	r1, r5
	for (int i=0; i<4; ++i)
     382:	3401      	adds	r4, #1
		port_pin_set_config(_data_pins[i],&config_port_pin);
     384:	47b8      	blx	r7
	for (int i=0; i<4; ++i)
     386:	2c04      	cmp	r4, #4
     388:	d1f9      	bne.n	37e <LCD_init+0x5a>
	delay_us(50000);
     38a:	4f3c      	ldr	r7, [pc, #240]	; (47c <LCD_init+0x158>)
     38c:	2000      	movs	r0, #0
     38e:	47b8      	blx	r7
     390:	4d3b      	ldr	r5, [pc, #236]	; (480 <LCD_init+0x15c>)
     392:	4a3c      	ldr	r2, [pc, #240]	; (484 <LCD_init+0x160>)
     394:	2300      	movs	r3, #0
     396:	2100      	movs	r1, #0
     398:	47a8      	blx	r5
     39a:	2300      	movs	r3, #0
     39c:	4a3a      	ldr	r2, [pc, #232]	; (488 <LCD_init+0x164>)
     39e:	4d3b      	ldr	r5, [pc, #236]	; (48c <LCD_init+0x168>)
     3a0:	1880      	adds	r0, r0, r2
     3a2:	4159      	adcs	r1, r3
     3a4:	4a3a      	ldr	r2, [pc, #232]	; (490 <LCD_init+0x16c>)
     3a6:	2300      	movs	r3, #0
     3a8:	47a8      	blx	r5
     3aa:	4e3a      	ldr	r6, [pc, #232]	; (494 <LCD_init+0x170>)
     3ac:	47b0      	blx	r6
	port_pin_set_output_level(_rs_pin,LOW);
     3ae:	4b2c      	ldr	r3, [pc, #176]	; (460 <LCD_init+0x13c>)
     3b0:	4d39      	ldr	r5, [pc, #228]	; (498 <LCD_init+0x174>)
     3b2:	7818      	ldrb	r0, [r3, #0]
     3b4:	2100      	movs	r1, #0
     3b6:	47a8      	blx	r5
	port_pin_set_output_level(_enable_pin,LOW);
     3b8:	4b2a      	ldr	r3, [pc, #168]	; (464 <LCD_init+0x140>)
     3ba:	2100      	movs	r1, #0
     3bc:	7818      	ldrb	r0, [r3, #0]
     3be:	47a8      	blx	r5
	 write4bits(0x03);
     3c0:	4b36      	ldr	r3, [pc, #216]	; (49c <LCD_init+0x178>)
     3c2:	2003      	movs	r0, #3
     3c4:	4798      	blx	r3
	 delay_us(4500); 
     3c6:	2000      	movs	r0, #0
     3c8:	47b8      	blx	r7
     3ca:	4d2d      	ldr	r5, [pc, #180]	; (480 <LCD_init+0x15c>)
     3cc:	4a34      	ldr	r2, [pc, #208]	; (4a0 <LCD_init+0x17c>)
     3ce:	2300      	movs	r3, #0
     3d0:	2100      	movs	r1, #0
     3d2:	47a8      	blx	r5
     3d4:	2300      	movs	r3, #0
     3d6:	4a2c      	ldr	r2, [pc, #176]	; (488 <LCD_init+0x164>)
     3d8:	4d2c      	ldr	r5, [pc, #176]	; (48c <LCD_init+0x168>)
     3da:	1880      	adds	r0, r0, r2
     3dc:	4159      	adcs	r1, r3
     3de:	4a2c      	ldr	r2, [pc, #176]	; (490 <LCD_init+0x16c>)
     3e0:	2300      	movs	r3, #0
     3e2:	47a8      	blx	r5
     3e4:	47b0      	blx	r6
	 write4bits(0x03);
     3e6:	4b2d      	ldr	r3, [pc, #180]	; (49c <LCD_init+0x178>)
     3e8:	2003      	movs	r0, #3
     3ea:	4798      	blx	r3
	 delay_us(4500); 
     3ec:	2000      	movs	r0, #0
     3ee:	47b8      	blx	r7
     3f0:	4d23      	ldr	r5, [pc, #140]	; (480 <LCD_init+0x15c>)
     3f2:	4a2b      	ldr	r2, [pc, #172]	; (4a0 <LCD_init+0x17c>)
     3f4:	2300      	movs	r3, #0
     3f6:	2100      	movs	r1, #0
     3f8:	47a8      	blx	r5
     3fa:	2300      	movs	r3, #0
     3fc:	4a22      	ldr	r2, [pc, #136]	; (488 <LCD_init+0x164>)
     3fe:	4d23      	ldr	r5, [pc, #140]	; (48c <LCD_init+0x168>)
     400:	1880      	adds	r0, r0, r2
     402:	4159      	adcs	r1, r3
     404:	4a22      	ldr	r2, [pc, #136]	; (490 <LCD_init+0x16c>)
     406:	2300      	movs	r3, #0
     408:	47a8      	blx	r5
     40a:	47b0      	blx	r6
	 write4bits(0x03);
     40c:	4b23      	ldr	r3, [pc, #140]	; (49c <LCD_init+0x178>)
     40e:	2003      	movs	r0, #3
     410:	4798      	blx	r3
	 delay_us(150);
     412:	2000      	movs	r0, #0
     414:	47b8      	blx	r7
     416:	4d1a      	ldr	r5, [pc, #104]	; (480 <LCD_init+0x15c>)
     418:	2296      	movs	r2, #150	; 0x96
     41a:	2300      	movs	r3, #0
     41c:	2100      	movs	r1, #0
     41e:	47a8      	blx	r5
     420:	2300      	movs	r3, #0
     422:	4a19      	ldr	r2, [pc, #100]	; (488 <LCD_init+0x164>)
     424:	4d19      	ldr	r5, [pc, #100]	; (48c <LCD_init+0x168>)
     426:	1880      	adds	r0, r0, r2
     428:	4159      	adcs	r1, r3
     42a:	4a19      	ldr	r2, [pc, #100]	; (490 <LCD_init+0x16c>)
     42c:	2300      	movs	r3, #0
     42e:	47a8      	blx	r5
     430:	47b0      	blx	r6
	 write4bits(0x02);
     432:	2002      	movs	r0, #2
     434:	4b19      	ldr	r3, [pc, #100]	; (49c <LCD_init+0x178>)
     436:	4798      	blx	r3
	 command(LCD_FUNCTIONSET | _displayfunction);
     438:	2020      	movs	r0, #32
     43a:	4b0c      	ldr	r3, [pc, #48]	; (46c <LCD_init+0x148>)
     43c:	4d19      	ldr	r5, [pc, #100]	; (4a4 <LCD_init+0x180>)
     43e:	781b      	ldrb	r3, [r3, #0]
     440:	4318      	orrs	r0, r3
     442:	47a8      	blx	r5
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     444:	4b18      	ldr	r3, [pc, #96]	; (4a8 <LCD_init+0x184>)
     446:	701c      	strb	r4, [r3, #0]
	LCD_display();
     448:	4b18      	ldr	r3, [pc, #96]	; (4ac <LCD_init+0x188>)
     44a:	4798      	blx	r3
	LCD_clear();
     44c:	4b18      	ldr	r3, [pc, #96]	; (4b0 <LCD_init+0x18c>)
     44e:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     450:	2202      	movs	r2, #2
     452:	4b18      	ldr	r3, [pc, #96]	; (4b4 <LCD_init+0x190>)
	command(LCD_ENTRYMODESET | _displaymode);
     454:	2006      	movs	r0, #6
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     456:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
     458:	47a8      	blx	r5
}
     45a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     45c:	00001529 	.word	0x00001529
     460:	200002e2 	.word	0x200002e2
     464:	200002e1 	.word	0x200002e1
     468:	200002db 	.word	0x200002db
     46c:	200002e0 	.word	0x200002e0
     470:	200002da 	.word	0x200002da
     474:	200002d4 	.word	0x200002d4
     478:	00001825 	.word	0x00001825
     47c:	000022f1 	.word	0x000022f1
     480:	00002cb1 	.word	0x00002cb1
     484:	0000c350 	.word	0x0000c350
     488:	006acfbf 	.word	0x006acfbf
     48c:	00002c71 	.word	0x00002c71
     490:	006acfc0 	.word	0x006acfc0
     494:	20000001 	.word	0x20000001
     498:	00000115 	.word	0x00000115
     49c:	00000205 	.word	0x00000205
     4a0:	00001194 	.word	0x00001194
     4a4:	00000261 	.word	0x00000261
     4a8:	200002d9 	.word	0x200002d9
     4ac:	00000305 	.word	0x00000305
     4b0:	00000281 	.word	0x00000281
     4b4:	200002df 	.word	0x200002df

000004b8 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
     4b8:	b570      	push	{r4, r5, r6, lr}
	size_t size = strlen(buffer);
     4ba:	4b07      	ldr	r3, [pc, #28]	; (4d8 <Buffer_writer+0x20>)
{
     4bc:	0004      	movs	r4, r0
	size_t size = strlen(buffer);
     4be:	4798      	blx	r3
     4c0:	0005      	movs	r5, r0
     4c2:	1826      	adds	r6, r4, r0
	size_t n = 0;
	while (size--) {
     4c4:	42b4      	cmp	r4, r6
     4c6:	d101      	bne.n	4cc <Buffer_writer+0x14>
		if (LCD_write(*buffer++)) n++;
		else break;
	}
	return n;
}
     4c8:	0028      	movs	r0, r5
     4ca:	bd70      	pop	{r4, r5, r6, pc}
	send(value, HIGH);
     4cc:	7820      	ldrb	r0, [r4, #0]
     4ce:	2101      	movs	r1, #1
     4d0:	4b02      	ldr	r3, [pc, #8]	; (4dc <Buffer_writer+0x24>)
     4d2:	4798      	blx	r3
     4d4:	3401      	adds	r4, #1
     4d6:	e7f5      	b.n	4c4 <Buffer_writer+0xc>
     4d8:	000030b5 	.word	0x000030b5
     4dc:	00000235 	.word	0x00000235

000004e0 <print_ch>:
{
	return Buffer_writer(str);
}

size_t print_ch(char c)
{
     4e0:	b510      	push	{r4, lr}
	send(value, HIGH);
     4e2:	2101      	movs	r1, #1
     4e4:	4b01      	ldr	r3, [pc, #4]	; (4ec <print_ch+0xc>)
     4e6:	4798      	blx	r3
	return LCD_write(c);
}
     4e8:	2001      	movs	r0, #1
     4ea:	bd10      	pop	{r4, pc}
     4ec:	00000235 	.word	0x00000235

000004f0 <LCD_Create_Custom_createChar>:
	command(LCD_SETCGRAMADDR | (location << 3));
     4f0:	2307      	movs	r3, #7
{
     4f2:	b570      	push	{r4, r5, r6, lr}
     4f4:	000c      	movs	r4, r1
	command(LCD_SETCGRAMADDR | (location << 3));
     4f6:	4018      	ands	r0, r3
     4f8:	00c0      	lsls	r0, r0, #3
     4fa:	3339      	adds	r3, #57	; 0x39
     4fc:	4318      	orrs	r0, r3
     4fe:	0025      	movs	r5, r4
     500:	4b04      	ldr	r3, [pc, #16]	; (514 <LCD_Create_Custom_createChar+0x24>)
     502:	4798      	blx	r3
     504:	3508      	adds	r5, #8
		LCD_write(charmap[i]);
     506:	7820      	ldrb	r0, [r4, #0]
     508:	4b03      	ldr	r3, [pc, #12]	; (518 <LCD_Create_Custom_createChar+0x28>)
     50a:	3401      	adds	r4, #1
     50c:	4798      	blx	r3
	for (int i=0; i<8; i++)
     50e:	42ac      	cmp	r4, r5
     510:	d1f9      	bne.n	506 <LCD_Create_Custom_createChar+0x16>
}
     512:	bd70      	pop	{r4, r5, r6, pc}
     514:	00000261 	.word	0x00000261
     518:	000004e1 	.word	0x000004e1

0000051c <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
     51c:	b40f      	push	{r0, r1, r2, r3}
     51e:	b573      	push	{r0, r1, r4, r5, r6, lr}
     520:	ac06      	add	r4, sp, #24
     522:	cc40      	ldmia	r4!, {r6}
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
     524:	4b0a      	ldr	r3, [pc, #40]	; (550 <lcd_printf+0x34>)
     526:	0030      	movs	r0, r6
     528:	4798      	blx	r3
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
     52a:	4b0a      	ldr	r3, [pc, #40]	; (554 <lcd_printf+0x38>)
	num_chars = strlen(fmt) + 3;
     52c:	3003      	adds	r0, #3
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
     52e:	4798      	blx	r3
     530:	0005      	movs	r5, r0
	va_list args;
	va_start(args, fmt);
	vsprintf(lcd_buff,fmt,args);
     532:	0031      	movs	r1, r6
     534:	0022      	movs	r2, r4
	va_start(args, fmt);
     536:	9401      	str	r4, [sp, #4]
	vsprintf(lcd_buff,fmt,args);
     538:	4b07      	ldr	r3, [pc, #28]	; (558 <lcd_printf+0x3c>)
     53a:	4798      	blx	r3
	Buffer_writer(lcd_buff);
     53c:	0028      	movs	r0, r5
     53e:	4b07      	ldr	r3, [pc, #28]	; (55c <lcd_printf+0x40>)
     540:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
     542:	0028      	movs	r0, r5
     544:	4b06      	ldr	r3, [pc, #24]	; (560 <lcd_printf+0x44>)
     546:	4798      	blx	r3
}
     548:	bc73      	pop	{r0, r1, r4, r5, r6}
     54a:	bc08      	pop	{r3}
     54c:	b004      	add	sp, #16
     54e:	4718      	bx	r3
     550:	000030b5 	.word	0x000030b5
     554:	00002ee5 	.word	0x00002ee5
     558:	000030f5 	.word	0x000030f5
     55c:	000004b9 	.word	0x000004b9
     560:	00002ef9 	.word	0x00002ef9

00000564 <extint_is_syncing>:
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     564:	4b01      	ldr	r3, [pc, #4]	; (56c <extint_is_syncing+0x8>)
     566:	7858      	ldrb	r0, [r3, #1]
     568:	09c0      	lsrs	r0, r0, #7
			return true;
		}
	}
	return false;
}
     56a:	4770      	bx	lr
     56c:	40001800 	.word	0x40001800

00000570 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     570:	2302      	movs	r3, #2
{
     572:	b510      	push	{r4, lr}
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     574:	4a04      	ldr	r2, [pc, #16]	; (588 <_extint_enable+0x18>)
     576:	7811      	ldrb	r1, [r2, #0]
     578:	430b      	orrs	r3, r1
     57a:	7013      	strb	r3, [r2, #0]
	}

	while (extint_is_syncing()) {
     57c:	4b03      	ldr	r3, [pc, #12]	; (58c <_extint_enable+0x1c>)
     57e:	4798      	blx	r3
     580:	2800      	cmp	r0, #0
     582:	d1fb      	bne.n	57c <_extint_enable+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     584:	bd10      	pop	{r4, pc}
     586:	46c0      	nop			; (mov r8, r8)
     588:	40001800 	.word	0x40001800
     58c:	00000565 	.word	0x00000565

00000590 <_system_extint_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     590:	2340      	movs	r3, #64	; 0x40
{
     592:	b507      	push	{r0, r1, r2, lr}
     594:	4a10      	ldr	r2, [pc, #64]	; (5d8 <_system_extint_init+0x48>)
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     596:	2005      	movs	r0, #5
     598:	6991      	ldr	r1, [r2, #24]
     59a:	430b      	orrs	r3, r1
     59c:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
     59e:	2306      	movs	r3, #6
     5a0:	a901      	add	r1, sp, #4
     5a2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     5a4:	4b0d      	ldr	r3, [pc, #52]	; (5dc <_system_extint_init+0x4c>)
     5a6:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     5a8:	4b0d      	ldr	r3, [pc, #52]	; (5e0 <_system_extint_init+0x50>)
     5aa:	2005      	movs	r0, #5
     5ac:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     5ae:	2301      	movs	r3, #1
     5b0:	4a0c      	ldr	r2, [pc, #48]	; (5e4 <_system_extint_init+0x54>)
     5b2:	7811      	ldrb	r1, [r2, #0]
     5b4:	430b      	orrs	r3, r1
     5b6:	7013      	strb	r3, [r2, #0]
	while (extint_is_syncing()) {
     5b8:	4b0b      	ldr	r3, [pc, #44]	; (5e8 <_system_extint_init+0x58>)
     5ba:	4798      	blx	r3
     5bc:	2800      	cmp	r0, #0
     5be:	d1fb      	bne.n	5b8 <_system_extint_init+0x28>
		_extint_dev.callbacks[j] = NULL;
     5c0:	0002      	movs	r2, r0
     5c2:	4b0a      	ldr	r3, [pc, #40]	; (5ec <_system_extint_init+0x5c>)
     5c4:	501a      	str	r2, [r3, r0]
     5c6:	3004      	adds	r0, #4
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     5c8:	2840      	cmp	r0, #64	; 0x40
     5ca:	d1fb      	bne.n	5c4 <_system_extint_init+0x34>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5cc:	2210      	movs	r2, #16
     5ce:	4b08      	ldr	r3, [pc, #32]	; (5f0 <_system_extint_init+0x60>)
     5d0:	601a      	str	r2, [r3, #0]
	_extint_enable();
     5d2:	4b08      	ldr	r3, [pc, #32]	; (5f4 <_system_extint_init+0x64>)
     5d4:	4798      	blx	r3
}
     5d6:	bd07      	pop	{r0, r1, r2, pc}
     5d8:	40000400 	.word	0x40000400
     5dc:	00002401 	.word	0x00002401
     5e0:	00002379 	.word	0x00002379
     5e4:	40001800 	.word	0x40001800
     5e8:	00000565 	.word	0x00000565
     5ec:	200002e4 	.word	0x200002e4
     5f0:	e000e100 	.word	0xe000e100
     5f4:	00000571 	.word	0x00000571

000005f8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     5f8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     5fa:	0849      	lsrs	r1, r1, #1
{
     5fc:	0004      	movs	r4, r0
     5fe:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     600:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
     602:	42a1      	cmp	r1, r4
     604:	d201      	bcs.n	60a <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     606:	bd10      	pop	{r4, pc}
		baud_calculated++;
     608:	0003      	movs	r3, r0
     60a:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
     60c:	1b09      	subs	r1, r1, r4
		baud_calculated++;
     60e:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
     610:	428c      	cmp	r4, r1
     612:	d9f9      	bls.n	608 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     614:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
     616:	2bff      	cmp	r3, #255	; 0xff
     618:	d8f5      	bhi.n	606 <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
     61a:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     61c:	2000      	movs	r0, #0
     61e:	e7f2      	b.n	606 <_sercom_get_sync_baud_val+0xe>

00000620 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     620:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     622:	4c0d      	ldr	r4, [pc, #52]	; (658 <sercom_set_gclk_generator+0x38>)
{
     624:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
     626:	7823      	ldrb	r3, [r4, #0]
     628:	2b00      	cmp	r3, #0
     62a:	d001      	beq.n	630 <sercom_set_gclk_generator+0x10>
     62c:	2900      	cmp	r1, #0
     62e:	d00c      	beq.n	64a <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     630:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     632:	2013      	movs	r0, #19
     634:	4b09      	ldr	r3, [pc, #36]	; (65c <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
     636:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     638:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     63a:	2013      	movs	r0, #19
     63c:	4b08      	ldr	r3, [pc, #32]	; (660 <sercom_set_gclk_generator+0x40>)
     63e:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
     640:	2301      	movs	r3, #1

		return STATUS_OK;
     642:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
     644:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
     646:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     648:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
     64a:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     64c:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
     64e:	42ab      	cmp	r3, r5
     650:	d0fa      	beq.n	648 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
     652:	201d      	movs	r0, #29
     654:	e7f8      	b.n	648 <sercom_set_gclk_generator+0x28>
     656:	46c0      	nop			; (mov r8, r8)
     658:	20000090 	.word	0x20000090
     65c:	00002401 	.word	0x00002401
     660:	00002379 	.word	0x00002379

00000664 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     664:	4a39      	ldr	r2, [pc, #228]	; (74c <_sercom_get_default_pad+0xe8>)
{
     666:	0003      	movs	r3, r0
     668:	b500      	push	{lr}
     66a:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
     66c:	4293      	cmp	r3, r2
     66e:	d033      	beq.n	6d8 <_sercom_get_default_pad+0x74>
     670:	d807      	bhi.n	682 <_sercom_get_default_pad+0x1e>
     672:	4a37      	ldr	r2, [pc, #220]	; (750 <_sercom_get_default_pad+0xec>)
     674:	4293      	cmp	r3, r2
     676:	d014      	beq.n	6a2 <_sercom_get_default_pad+0x3e>
     678:	4a36      	ldr	r2, [pc, #216]	; (754 <_sercom_get_default_pad+0xf0>)
     67a:	4293      	cmp	r3, r2
     67c:	d01f      	beq.n	6be <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     67e:	2300      	movs	r3, #0
     680:	e017      	b.n	6b2 <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
     682:	4a35      	ldr	r2, [pc, #212]	; (758 <_sercom_get_default_pad+0xf4>)
     684:	4293      	cmp	r3, r2
     686:	d03a      	beq.n	6fe <_sercom_get_default_pad+0x9a>
     688:	4a34      	ldr	r2, [pc, #208]	; (75c <_sercom_get_default_pad+0xf8>)
     68a:	4293      	cmp	r3, r2
     68c:	d044      	beq.n	718 <_sercom_get_default_pad+0xb4>
     68e:	4a34      	ldr	r2, [pc, #208]	; (760 <_sercom_get_default_pad+0xfc>)
     690:	4293      	cmp	r3, r2
     692:	d1f4      	bne.n	67e <_sercom_get_default_pad+0x1a>
	return 0;
     694:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     696:	2903      	cmp	r1, #3
     698:	d80b      	bhi.n	6b2 <_sercom_get_default_pad+0x4e>
     69a:	f002 fa15 	bl	2ac8 <__gnu_thumb1_case_uqi>
     69e:	2a50      	.short	0x2a50
     6a0:	2e2c      	.short	0x2e2c
	return 0;
     6a2:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6a4:	2903      	cmp	r1, #3
     6a6:	d804      	bhi.n	6b2 <_sercom_get_default_pad+0x4e>
     6a8:	f002 fa0e 	bl	2ac8 <__gnu_thumb1_case_uqi>
     6ac:	07050243 	.word	0x07050243
     6b0:	4b2c      	ldr	r3, [pc, #176]	; (764 <_sercom_get_default_pad+0x100>)
}
     6b2:	0018      	movs	r0, r3
     6b4:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6b6:	4b2c      	ldr	r3, [pc, #176]	; (768 <_sercom_get_default_pad+0x104>)
     6b8:	e7fb      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     6ba:	4b2c      	ldr	r3, [pc, #176]	; (76c <_sercom_get_default_pad+0x108>)
     6bc:	e7f9      	b.n	6b2 <_sercom_get_default_pad+0x4e>
	return 0;
     6be:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6c0:	2903      	cmp	r1, #3
     6c2:	d8f6      	bhi.n	6b2 <_sercom_get_default_pad+0x4e>
     6c4:	f002 fa00 	bl	2ac8 <__gnu_thumb1_case_uqi>
     6c8:	06040237 	.word	0x06040237
     6cc:	4b28      	ldr	r3, [pc, #160]	; (770 <_sercom_get_default_pad+0x10c>)
     6ce:	e7f0      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     6d0:	4b28      	ldr	r3, [pc, #160]	; (774 <_sercom_get_default_pad+0x110>)
     6d2:	e7ee      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     6d4:	4b28      	ldr	r3, [pc, #160]	; (778 <_sercom_get_default_pad+0x114>)
     6d6:	e7ec      	b.n	6b2 <_sercom_get_default_pad+0x4e>
	return 0;
     6d8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6da:	2903      	cmp	r1, #3
     6dc:	d8e9      	bhi.n	6b2 <_sercom_get_default_pad+0x4e>
     6de:	f002 f9f3 	bl	2ac8 <__gnu_thumb1_case_uqi>
     6e2:	022c      	.short	0x022c
     6e4:	0604      	.short	0x0604
     6e6:	4b25      	ldr	r3, [pc, #148]	; (77c <_sercom_get_default_pad+0x118>)
     6e8:	e7e3      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     6ea:	4b25      	ldr	r3, [pc, #148]	; (780 <_sercom_get_default_pad+0x11c>)
     6ec:	e7e1      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     6ee:	4b25      	ldr	r3, [pc, #148]	; (784 <_sercom_get_default_pad+0x120>)
     6f0:	e7df      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     6f2:	4b25      	ldr	r3, [pc, #148]	; (788 <_sercom_get_default_pad+0x124>)
     6f4:	e7dd      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     6f6:	4b25      	ldr	r3, [pc, #148]	; (78c <_sercom_get_default_pad+0x128>)
     6f8:	e7db      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     6fa:	4b25      	ldr	r3, [pc, #148]	; (790 <_sercom_get_default_pad+0x12c>)
     6fc:	e7d9      	b.n	6b2 <_sercom_get_default_pad+0x4e>
	return 0;
     6fe:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     700:	2903      	cmp	r1, #3
     702:	d8d6      	bhi.n	6b2 <_sercom_get_default_pad+0x4e>
     704:	f002 f9e0 	bl	2ac8 <__gnu_thumb1_case_uqi>
     708:	0604021d 	.word	0x0604021d
     70c:	4b21      	ldr	r3, [pc, #132]	; (794 <_sercom_get_default_pad+0x130>)
     70e:	e7d0      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     710:	4b21      	ldr	r3, [pc, #132]	; (798 <_sercom_get_default_pad+0x134>)
     712:	e7ce      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     714:	4b21      	ldr	r3, [pc, #132]	; (79c <_sercom_get_default_pad+0x138>)
     716:	e7cc      	b.n	6b2 <_sercom_get_default_pad+0x4e>
	return 0;
     718:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     71a:	2903      	cmp	r1, #3
     71c:	d8c9      	bhi.n	6b2 <_sercom_get_default_pad+0x4e>
     71e:	f002 f9d3 	bl	2ac8 <__gnu_thumb1_case_uqi>
     722:	0212      	.short	0x0212
     724:	0604      	.short	0x0604
     726:	4b1e      	ldr	r3, [pc, #120]	; (7a0 <_sercom_get_default_pad+0x13c>)
     728:	e7c3      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     72a:	4b1e      	ldr	r3, [pc, #120]	; (7a4 <_sercom_get_default_pad+0x140>)
     72c:	e7c1      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     72e:	4b1e      	ldr	r3, [pc, #120]	; (7a8 <_sercom_get_default_pad+0x144>)
     730:	e7bf      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     732:	4b1e      	ldr	r3, [pc, #120]	; (7ac <_sercom_get_default_pad+0x148>)
     734:	e7bd      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     736:	2303      	movs	r3, #3
     738:	e7bb      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     73a:	4b1d      	ldr	r3, [pc, #116]	; (7b0 <_sercom_get_default_pad+0x14c>)
     73c:	e7b9      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     73e:	4b1d      	ldr	r3, [pc, #116]	; (7b4 <_sercom_get_default_pad+0x150>)
     740:	e7b7      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     742:	4b1d      	ldr	r3, [pc, #116]	; (7b8 <_sercom_get_default_pad+0x154>)
     744:	e7b5      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     746:	4b1d      	ldr	r3, [pc, #116]	; (7bc <_sercom_get_default_pad+0x158>)
     748:	e7b3      	b.n	6b2 <_sercom_get_default_pad+0x4e>
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	42001000 	.word	0x42001000
     750:	42000800 	.word	0x42000800
     754:	42000c00 	.word	0x42000c00
     758:	42001800 	.word	0x42001800
     75c:	42001c00 	.word	0x42001c00
     760:	42001400 	.word	0x42001400
     764:	00050003 	.word	0x00050003
     768:	00060003 	.word	0x00060003
     76c:	00070003 	.word	0x00070003
     770:	00010003 	.word	0x00010003
     774:	001e0003 	.word	0x001e0003
     778:	001f0003 	.word	0x001f0003
     77c:	00090003 	.word	0x00090003
     780:	000a0003 	.word	0x000a0003
     784:	000b0003 	.word	0x000b0003
     788:	00110003 	.word	0x00110003
     78c:	00120003 	.word	0x00120003
     790:	00130003 	.word	0x00130003
     794:	000d0003 	.word	0x000d0003
     798:	000e0003 	.word	0x000e0003
     79c:	000f0003 	.word	0x000f0003
     7a0:	00170003 	.word	0x00170003
     7a4:	00180003 	.word	0x00180003
     7a8:	00190003 	.word	0x00190003
     7ac:	00040003 	.word	0x00040003
     7b0:	00080003 	.word	0x00080003
     7b4:	00100003 	.word	0x00100003
     7b8:	000c0003 	.word	0x000c0003
     7bc:	00160003 	.word	0x00160003

000007c0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     7c4:	4669      	mov	r1, sp
     7c6:	4b09      	ldr	r3, [pc, #36]	; (7ec <_sercom_get_sercom_inst_index+0x2c>)
     7c8:	466a      	mov	r2, sp
     7ca:	cb70      	ldmia	r3!, {r4, r5, r6}
     7cc:	c170      	stmia	r1!, {r4, r5, r6}
     7ce:	cb70      	ldmia	r3!, {r4, r5, r6}
     7d0:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7d2:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     7d4:	0099      	lsls	r1, r3, #2
     7d6:	5851      	ldr	r1, [r2, r1]
     7d8:	4281      	cmp	r1, r0
     7da:	d102      	bne.n	7e2 <_sercom_get_sercom_inst_index+0x22>
			return i;
     7dc:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
     7de:	b006      	add	sp, #24
     7e0:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     7e2:	3301      	adds	r3, #1
     7e4:	2b06      	cmp	r3, #6
     7e6:	d1f5      	bne.n	7d4 <_sercom_get_sercom_inst_index+0x14>
	return 0;
     7e8:	2000      	movs	r0, #0
     7ea:	e7f8      	b.n	7de <_sercom_get_sercom_inst_index+0x1e>
     7ec:	00003784 	.word	0x00003784

000007f0 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
     7f0:	4770      	bx	lr

000007f2 <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     7f2:	f3ef 8010 	mrs	r0, PRIMASK
     7f6:	b672      	cpsid	i
     7f8:	4770      	bx	lr

000007fa <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
     7fa:	f380 8810 	msr	PRIMASK, r0
     7fe:	4770      	bx	lr

00000800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     800:	f3ef 8009 	mrs	r0, PSP
     804:	4b0e      	ldr	r3, [pc, #56]	; (840 <pxCurrentTCBConst>)
     806:	681a      	ldr	r2, [r3, #0]
     808:	3820      	subs	r0, #32
     80a:	6010      	str	r0, [r2, #0]
     80c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     80e:	4644      	mov	r4, r8
     810:	464d      	mov	r5, r9
     812:	4656      	mov	r6, sl
     814:	465f      	mov	r7, fp
     816:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     818:	b508      	push	{r3, lr}
     81a:	b672      	cpsid	i
     81c:	f000 f8e2 	bl	9e4 <vTaskSwitchContext>
     820:	b662      	cpsie	i
     822:	bc0c      	pop	{r2, r3}
     824:	6811      	ldr	r1, [r2, #0]
     826:	6808      	ldr	r0, [r1, #0]
     828:	3010      	adds	r0, #16
     82a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     82c:	46a0      	mov	r8, r4
     82e:	46a9      	mov	r9, r5
     830:	46b2      	mov	sl, r6
     832:	46bb      	mov	fp, r7
     834:	f380 8809 	msr	PSP, r0
     838:	3820      	subs	r0, #32
     83a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     83c:	4718      	bx	r3
     83e:	46c0      	nop			; (mov r8, r8)

00000840 <pxCurrentTCBConst>:
     840:	20000094 	.word	0x20000094

00000844 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     844:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     846:	4b07      	ldr	r3, [pc, #28]	; (864 <SysTick_Handler+0x20>)
     848:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     84a:	4b07      	ldr	r3, [pc, #28]	; (868 <SysTick_Handler+0x24>)
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     84c:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
     84e:	4798      	blx	r3
     850:	2800      	cmp	r0, #0
     852:	d003      	beq.n	85c <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     854:	2280      	movs	r2, #128	; 0x80
     856:	4b05      	ldr	r3, [pc, #20]	; (86c <SysTick_Handler+0x28>)
     858:	0552      	lsls	r2, r2, #21
     85a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     85c:	0020      	movs	r0, r4
     85e:	4b04      	ldr	r3, [pc, #16]	; (870 <SysTick_Handler+0x2c>)
     860:	4798      	blx	r3
}
     862:	bd10      	pop	{r4, pc}
     864:	000007f3 	.word	0x000007f3
     868:	000008dd 	.word	0x000008dd
     86c:	e000ed04 	.word	0xe000ed04
     870:	000007fb 	.word	0x000007fb

00000874 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     874:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     876:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     878:	689a      	ldr	r2, [r3, #8]
     87a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     87c:	689a      	ldr	r2, [r3, #8]
     87e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     880:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     882:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     884:	6803      	ldr	r3, [r0, #0]
     886:	3301      	adds	r3, #1
     888:	6003      	str	r3, [r0, #0]
}
     88a:	4770      	bx	lr

0000088c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     88c:	6842      	ldr	r2, [r0, #4]
     88e:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     890:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     892:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     894:	6882      	ldr	r2, [r0, #8]
     896:	6841      	ldr	r1, [r0, #4]
     898:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     89a:	685a      	ldr	r2, [r3, #4]
     89c:	4290      	cmp	r0, r2
     89e:	d101      	bne.n	8a4 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     8a0:	6882      	ldr	r2, [r0, #8]
     8a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     8a4:	2200      	movs	r2, #0
     8a6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     8a8:	681a      	ldr	r2, [r3, #0]
     8aa:	3a01      	subs	r2, #1
     8ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     8ae:	6818      	ldr	r0, [r3, #0]
}
     8b0:	4770      	bx	lr
	...

000008b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     8b4:	4a07      	ldr	r2, [pc, #28]	; (8d4 <prvResetNextTaskUnblockTime+0x20>)
     8b6:	6813      	ldr	r3, [r2, #0]
     8b8:	6819      	ldr	r1, [r3, #0]
     8ba:	4b07      	ldr	r3, [pc, #28]	; (8d8 <prvResetNextTaskUnblockTime+0x24>)
     8bc:	2900      	cmp	r1, #0
     8be:	d103      	bne.n	8c8 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     8c0:	2201      	movs	r2, #1
     8c2:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     8c4:	601a      	str	r2, [r3, #0]
	}
}
     8c6:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     8c8:	6812      	ldr	r2, [r2, #0]
     8ca:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     8cc:	68d2      	ldr	r2, [r2, #12]
     8ce:	6852      	ldr	r2, [r2, #4]
     8d0:	e7f8      	b.n	8c4 <prvResetNextTaskUnblockTime+0x10>
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	20000098 	.word	0x20000098
     8d8:	20000110 	.word	0x20000110

000008dc <xTaskIncrementTick>:
{
     8dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     8de:	4b33      	ldr	r3, [pc, #204]	; (9ac <xTaskIncrementTick+0xd0>)
     8e0:	681b      	ldr	r3, [r3, #0]
     8e2:	2b00      	cmp	r3, #0
     8e4:	d135      	bne.n	952 <xTaskIncrementTick+0x76>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
     8e6:	4b32      	ldr	r3, [pc, #200]	; (9b0 <xTaskIncrementTick+0xd4>)
     8e8:	681f      	ldr	r7, [r3, #0]
     8ea:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
     8ec:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
     8ee:	2f00      	cmp	r7, #0
     8f0:	d111      	bne.n	916 <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
     8f2:	4b30      	ldr	r3, [pc, #192]	; (9b4 <xTaskIncrementTick+0xd8>)
     8f4:	681a      	ldr	r2, [r3, #0]
     8f6:	6812      	ldr	r2, [r2, #0]
     8f8:	2a00      	cmp	r2, #0
     8fa:	d001      	beq.n	900 <xTaskIncrementTick+0x24>
     8fc:	b672      	cpsid	i
     8fe:	e7fe      	b.n	8fe <xTaskIncrementTick+0x22>
     900:	4a2d      	ldr	r2, [pc, #180]	; (9b8 <xTaskIncrementTick+0xdc>)
     902:	6819      	ldr	r1, [r3, #0]
     904:	6810      	ldr	r0, [r2, #0]
     906:	6018      	str	r0, [r3, #0]
     908:	6011      	str	r1, [r2, #0]
     90a:	4a2c      	ldr	r2, [pc, #176]	; (9bc <xTaskIncrementTick+0xe0>)
     90c:	6813      	ldr	r3, [r2, #0]
     90e:	3301      	adds	r3, #1
     910:	6013      	str	r3, [r2, #0]
     912:	4b2b      	ldr	r3, [pc, #172]	; (9c0 <xTaskIncrementTick+0xe4>)
     914:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
     916:	4e2b      	ldr	r6, [pc, #172]	; (9c4 <xTaskIncrementTick+0xe8>)
BaseType_t xSwitchRequired = pdFALSE;
     918:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
     91a:	6833      	ldr	r3, [r6, #0]
     91c:	429f      	cmp	r7, r3
     91e:	d307      	bcc.n	930 <xTaskIncrementTick+0x54>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     920:	4b24      	ldr	r3, [pc, #144]	; (9b4 <xTaskIncrementTick+0xd8>)
     922:	681a      	ldr	r2, [r3, #0]
     924:	6812      	ldr	r2, [r2, #0]
     926:	2a00      	cmp	r2, #0
     928:	d119      	bne.n	95e <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     92a:	2301      	movs	r3, #1
     92c:	425b      	negs	r3, r3
     92e:	6033      	str	r3, [r6, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     930:	4b25      	ldr	r3, [pc, #148]	; (9c8 <xTaskIncrementTick+0xec>)
     932:	681b      	ldr	r3, [r3, #0]
     934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     936:	2314      	movs	r3, #20
     938:	4353      	muls	r3, r2
     93a:	4a24      	ldr	r2, [pc, #144]	; (9cc <xTaskIncrementTick+0xf0>)
     93c:	58d3      	ldr	r3, [r2, r3]
     93e:	2b01      	cmp	r3, #1
     940:	d900      	bls.n	944 <xTaskIncrementTick+0x68>
				xSwitchRequired = pdTRUE;
     942:	2501      	movs	r5, #1
		if( xYieldPending != pdFALSE )
     944:	4b22      	ldr	r3, [pc, #136]	; (9d0 <xTaskIncrementTick+0xf4>)
     946:	681b      	ldr	r3, [r3, #0]
     948:	2b00      	cmp	r3, #0
     94a:	d000      	beq.n	94e <xTaskIncrementTick+0x72>
			xSwitchRequired = pdTRUE;
     94c:	2501      	movs	r5, #1
}
     94e:	0028      	movs	r0, r5
     950:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		++uxPendedTicks;
     952:	4a20      	ldr	r2, [pc, #128]	; (9d4 <xTaskIncrementTick+0xf8>)
BaseType_t xSwitchRequired = pdFALSE;
     954:	2500      	movs	r5, #0
		++uxPendedTicks;
     956:	6813      	ldr	r3, [r2, #0]
     958:	3301      	adds	r3, #1
     95a:	6013      	str	r3, [r2, #0]
     95c:	e7f2      	b.n	944 <xTaskIncrementTick+0x68>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     95e:	681b      	ldr	r3, [r3, #0]
     960:	68db      	ldr	r3, [r3, #12]
     962:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
     964:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
     966:	429f      	cmp	r7, r3
     968:	d3e1      	bcc.n	92e <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     96a:	1d23      	adds	r3, r4, #4
     96c:	9301      	str	r3, [sp, #4]
     96e:	0018      	movs	r0, r3
     970:	4b19      	ldr	r3, [pc, #100]	; (9d8 <xTaskIncrementTick+0xfc>)
     972:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     974:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     976:	2b00      	cmp	r3, #0
     978:	d003      	beq.n	982 <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     97a:	0020      	movs	r0, r4
     97c:	4b16      	ldr	r3, [pc, #88]	; (9d8 <xTaskIncrementTick+0xfc>)
     97e:	3018      	adds	r0, #24
     980:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
     982:	4b16      	ldr	r3, [pc, #88]	; (9dc <xTaskIncrementTick+0x100>)
     984:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     986:	681a      	ldr	r2, [r3, #0]
     988:	4290      	cmp	r0, r2
     98a:	d900      	bls.n	98e <xTaskIncrementTick+0xb2>
     98c:	6018      	str	r0, [r3, #0]
     98e:	2314      	movs	r3, #20
     990:	4358      	muls	r0, r3
     992:	4b0e      	ldr	r3, [pc, #56]	; (9cc <xTaskIncrementTick+0xf0>)
     994:	1d21      	adds	r1, r4, #4
     996:	1818      	adds	r0, r3, r0
     998:	4b11      	ldr	r3, [pc, #68]	; (9e0 <xTaskIncrementTick+0x104>)
     99a:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     99c:	4b0a      	ldr	r3, [pc, #40]	; (9c8 <xTaskIncrementTick+0xec>)
     99e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     9a0:	681b      	ldr	r3, [r3, #0]
     9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     9a4:	429a      	cmp	r2, r3
     9a6:	d3bb      	bcc.n	920 <xTaskIncrementTick+0x44>
							xSwitchRequired = pdTRUE;
     9a8:	2501      	movs	r5, #1
     9aa:	e7b9      	b.n	920 <xTaskIncrementTick+0x44>
     9ac:	20000108 	.word	0x20000108
     9b0:	20000118 	.word	0x20000118
     9b4:	20000098 	.word	0x20000098
     9b8:	2000009c 	.word	0x2000009c
     9bc:	20000114 	.word	0x20000114
     9c0:	000008b5 	.word	0x000008b5
     9c4:	20000110 	.word	0x20000110
     9c8:	20000094 	.word	0x20000094
     9cc:	200000a0 	.word	0x200000a0
     9d0:	2000011c 	.word	0x2000011c
     9d4:	20000104 	.word	0x20000104
     9d8:	0000088d 	.word	0x0000088d
     9dc:	2000010c 	.word	0x2000010c
     9e0:	00000875 	.word	0x00000875

000009e4 <vTaskSwitchContext>:
{
     9e4:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     9e6:	4b15      	ldr	r3, [pc, #84]	; (a3c <vTaskSwitchContext+0x58>)
     9e8:	681a      	ldr	r2, [r3, #0]
     9ea:	4b15      	ldr	r3, [pc, #84]	; (a40 <vTaskSwitchContext+0x5c>)
     9ec:	2a00      	cmp	r2, #0
     9ee:	d002      	beq.n	9f6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
     9f0:	2201      	movs	r2, #1
     9f2:	601a      	str	r2, [r3, #0]
}
     9f4:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
     9f6:	2514      	movs	r5, #20
     9f8:	4812      	ldr	r0, [pc, #72]	; (a44 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
     9fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
     9fc:	6802      	ldr	r2, [r0, #0]
     9fe:	4912      	ldr	r1, [pc, #72]	; (a48 <vTaskSwitchContext+0x64>)
     a00:	002b      	movs	r3, r5
     a02:	4353      	muls	r3, r2
     a04:	585c      	ldr	r4, [r3, r1]
     a06:	2c00      	cmp	r4, #0
     a08:	d012      	beq.n	a30 <vTaskSwitchContext+0x4c>
     a0a:	18cc      	adds	r4, r1, r3
     a0c:	6865      	ldr	r5, [r4, #4]
     a0e:	3308      	adds	r3, #8
     a10:	686d      	ldr	r5, [r5, #4]
     a12:	18cb      	adds	r3, r1, r3
     a14:	6065      	str	r5, [r4, #4]
     a16:	429d      	cmp	r5, r3
     a18:	d101      	bne.n	a1e <vTaskSwitchContext+0x3a>
     a1a:	686b      	ldr	r3, [r5, #4]
     a1c:	6063      	str	r3, [r4, #4]
     a1e:	2314      	movs	r3, #20
     a20:	4353      	muls	r3, r2
     a22:	18c9      	adds	r1, r1, r3
     a24:	684b      	ldr	r3, [r1, #4]
     a26:	68d9      	ldr	r1, [r3, #12]
     a28:	4b08      	ldr	r3, [pc, #32]	; (a4c <vTaskSwitchContext+0x68>)
     a2a:	6019      	str	r1, [r3, #0]
     a2c:	6002      	str	r2, [r0, #0]
}
     a2e:	e7e1      	b.n	9f4 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
     a30:	2a00      	cmp	r2, #0
     a32:	d101      	bne.n	a38 <vTaskSwitchContext+0x54>
     a34:	b672      	cpsid	i
     a36:	e7fe      	b.n	a36 <vTaskSwitchContext+0x52>
     a38:	3a01      	subs	r2, #1
     a3a:	e7e1      	b.n	a00 <vTaskSwitchContext+0x1c>
     a3c:	20000108 	.word	0x20000108
     a40:	2000011c 	.word	0x2000011c
     a44:	2000010c 	.word	0x2000010c
     a48:	200000a0 	.word	0x200000a0
     a4c:	20000094 	.word	0x20000094

00000a50 <WDT_Handler>:
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     a50:	2201      	movs	r2, #1
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     a52:	b510      	push	{r4, lr}
     a54:	4b03      	ldr	r3, [pc, #12]	; (a64 <WDT_Handler+0x14>)
     a56:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
     a58:	4b03      	ldr	r3, [pc, #12]	; (a68 <WDT_Handler+0x18>)
     a5a:	681b      	ldr	r3, [r3, #0]
     a5c:	2b00      	cmp	r3, #0
     a5e:	d000      	beq.n	a62 <WDT_Handler+0x12>
		wdt_early_warning_callback();
     a60:	4798      	blx	r3
	}
}
     a62:	bd10      	pop	{r4, pc}
     a64:	40001000 	.word	0x40001000
     a68:	20000324 	.word	0x20000324

00000a6c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
     a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
     a6e:	4ed7      	ldr	r6, [pc, #860]	; (dcc <USB_Handler+0x360>)
{
     a70:	b085      	sub	sp, #20
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
     a72:	6837      	ldr	r7, [r6, #0]
     a74:	683d      	ldr	r5, [r7, #0]
     a76:	782b      	ldrb	r3, [r5, #0]
     a78:	09db      	lsrs	r3, r3, #7
     a7a:	d100      	bne.n	a7e <USB_Handler+0x12>
     a7c:	e122      	b.n	cc4 <USB_Handler+0x258>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     a7e:	8c2b      	ldrh	r3, [r5, #32]
     a80:	2b00      	cmp	r3, #0
     a82:	d100      	bne.n	a86 <USB_Handler+0x1a>
     a84:	e22d      	b.n	ee2 <USB_Handler+0x476>
     a86:	8c28      	ldrh	r0, [r5, #32]
     a88:	4bd1      	ldr	r3, [pc, #836]	; (dd0 <USB_Handler+0x364>)
     a8a:	b280      	uxth	r0, r0
     a8c:	4798      	blx	r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     a8e:	0003      	movs	r3, r0
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     a90:	0004      	movs	r4, r0
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     a92:	2003      	movs	r0, #3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     a94:	3308      	adds	r3, #8
     a96:	015b      	lsls	r3, r3, #5
     a98:	18ed      	adds	r5, r5, r3
     a9a:	79ed      	ldrb	r5, [r5, #7]
     a9c:	b2ea      	uxtb	r2, r5
     a9e:	9201      	str	r2, [sp, #4]
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     aa0:	4202      	tst	r2, r0
     aa2:	d031      	beq.n	b08 <USB_Handler+0x9c>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     aa4:	2101      	movs	r1, #1
     aa6:	4acb      	ldr	r2, [pc, #812]	; (dd4 <USB_Handler+0x368>)
     aa8:	4694      	mov	ip, r2
     aaa:	000a      	movs	r2, r1
     aac:	4665      	mov	r5, ip
     aae:	40a2      	lsls	r2, r4
     ab0:	682d      	ldr	r5, [r5, #0]
     ab2:	4395      	bics	r5, r2
     ab4:	002a      	movs	r2, r5
     ab6:	4665      	mov	r5, ip
     ab8:	602a      	str	r2, [r5, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     aba:	683a      	ldr	r2, [r7, #0]
     abc:	18d2      	adds	r2, r2, r3
     abe:	71d0      	strb	r0, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     ac0:	193a      	adds	r2, r7, r4
     ac2:	32ae      	adds	r2, #174	; 0xae
     ac4:	7812      	ldrb	r2, [r2, #0]
     ac6:	420a      	tst	r2, r1
     ac8:	d01e      	beq.n	b08 <USB_Handler+0x9c>
				pipe_callback_para.pipe_num = pipe_int;
     aca:	4ac3      	ldr	r2, [pc, #780]	; (dd8 <USB_Handler+0x36c>)
     acc:	0160      	lsls	r0, r4, #5
     ace:	7014      	strb	r4, [r2, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     ad0:	6839      	ldr	r1, [r7, #0]
     ad2:	5c59      	ldrb	r1, [r3, r1]
     ad4:	4bc1      	ldr	r3, [pc, #772]	; (ddc <USB_Handler+0x370>)
     ad6:	0789      	lsls	r1, r1, #30
     ad8:	0f89      	lsrs	r1, r1, #30
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     ada:	181b      	adds	r3, r3, r0
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     adc:	2901      	cmp	r1, #1
     ade:	d000      	beq.n	ae2 <USB_Handler+0x76>
     ae0:	e0b4      	b.n	c4c <USB_Handler+0x1e0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     ae2:	6859      	ldr	r1, [r3, #4]
     ae4:	0489      	lsls	r1, r1, #18
     ae6:	0c89      	lsrs	r1, r1, #18
     ae8:	8051      	strh	r1, [r2, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     aea:	6859      	ldr	r1, [r3, #4]
     aec:	0109      	lsls	r1, r1, #4
     aee:	0c89      	lsrs	r1, r1, #18
     af0:	8091      	strh	r1, [r2, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
     af2:	685a      	ldr	r2, [r3, #4]
     af4:	0b92      	lsrs	r2, r2, #14
     af6:	0392      	lsls	r2, r2, #14
     af8:	605a      	str	r2, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
     afa:	1ca3      	adds	r3, r4, #2
     afc:	011b      	lsls	r3, r3, #4
     afe:	18fb      	adds	r3, r7, r3
     b00:	685b      	ldr	r3, [r3, #4]
     b02:	49b5      	ldr	r1, [pc, #724]	; (dd8 <USB_Handler+0x36c>)
     b04:	0038      	movs	r0, r7
     b06:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
     b08:	2304      	movs	r3, #4
     b0a:	9a01      	ldr	r2, [sp, #4]
     b0c:	421a      	tst	r2, r3
     b0e:	d038      	beq.n	b82 <USB_Handler+0x116>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
     b10:	0022      	movs	r2, r4
     b12:	4bae      	ldr	r3, [pc, #696]	; (dcc <USB_Handler+0x360>)
     b14:	3208      	adds	r2, #8
     b16:	6818      	ldr	r0, [r3, #0]
     b18:	0153      	lsls	r3, r2, #5
     b1a:	6801      	ldr	r1, [r0, #0]
     b1c:	469c      	mov	ip, r3
     b1e:	5c5b      	ldrb	r3, [r3, r1]
     b20:	069b      	lsls	r3, r3, #26
     b22:	0f5b      	lsrs	r3, r3, #29
     b24:	9302      	str	r3, [sp, #8]
     b26:	2b02      	cmp	r3, #2
     b28:	d000      	beq.n	b2c <USB_Handler+0xc0>
     b2a:	e0a4      	b.n	c76 <USB_Handler+0x20a>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
     b2c:	4663      	mov	r3, ip
     b2e:	5c5b      	ldrb	r3, [r3, r1]
     b30:	079b      	lsls	r3, r3, #30
     b32:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
     b34:	2b01      	cmp	r3, #1
     b36:	d000      	beq.n	b3a <USB_Handler+0xce>
     b38:	e09d      	b.n	c76 <USB_Handler+0x20a>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
     b3a:	4fa8      	ldr	r7, [pc, #672]	; (ddc <USB_Handler+0x370>)
     b3c:	0165      	lsls	r5, r4, #5
     b3e:	197d      	adds	r5, r7, r5
     b40:	002f      	movs	r7, r5
     b42:	9503      	str	r5, [sp, #12]
     b44:	3708      	adds	r7, #8
     b46:	78bf      	ldrb	r7, [r7, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
     b48:	07fd      	lsls	r5, r7, #31
     b4a:	d400      	bmi.n	b4e <USB_Handler+0xe2>
     b4c:	e093      	b.n	c76 <USB_Handler+0x20a>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
     b4e:	40a3      	lsls	r3, r4
     b50:	4aa0      	ldr	r2, [pc, #640]	; (dd4 <USB_Handler+0x368>)
     b52:	6811      	ldr	r1, [r2, #0]
     b54:	4399      	bics	r1, r3
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
     b56:	2300      	movs	r3, #0
				host_pipe_job_busy_status &= ~(1 << pipe_int);
     b58:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
     b5a:	9a03      	ldr	r2, [sp, #12]
     b5c:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     b5e:	2204      	movs	r2, #4
     b60:	6803      	ldr	r3, [r0, #0]
     b62:	4463      	add	r3, ip
     b64:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     b66:	1903      	adds	r3, r0, r4
     b68:	33ae      	adds	r3, #174	; 0xae
     b6a:	781b      	ldrb	r3, [r3, #0]
     b6c:	9a02      	ldr	r2, [sp, #8]
     b6e:	4213      	tst	r3, r2
     b70:	d007      	beq.n	b82 <USB_Handler+0x116>
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
     b72:	2310      	movs	r3, #16
					pipe_callback_para.pipe_num = pipe_int;
     b74:	4998      	ldr	r1, [pc, #608]	; (dd8 <USB_Handler+0x36c>)
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
     b76:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     b78:	0123      	lsls	r3, r4, #4
     b7a:	18c3      	adds	r3, r0, r3
					pipe_callback_para.pipe_num = pipe_int;
     b7c:	700c      	strb	r4, [r1, #0]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b80:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_PERR) {
     b82:	2208      	movs	r2, #8
     b84:	9b01      	ldr	r3, [sp, #4]
     b86:	4213      	tst	r3, r2
     b88:	d01d      	beq.n	bc6 <USB_Handler+0x15a>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     b8a:	2301      	movs	r3, #1
     b8c:	40a3      	lsls	r3, r4
     b8e:	4991      	ldr	r1, [pc, #580]	; (dd4 <USB_Handler+0x368>)
     b90:	6808      	ldr	r0, [r1, #0]
     b92:	4398      	bics	r0, r3
     b94:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     b96:	6830      	ldr	r0, [r6, #0]
     b98:	18a3      	adds	r3, r4, r2
     b9a:	6801      	ldr	r1, [r0, #0]
     b9c:	015b      	lsls	r3, r3, #5
     b9e:	18cb      	adds	r3, r1, r3
     ba0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     ba2:	1903      	adds	r3, r0, r4
     ba4:	33ae      	adds	r3, #174	; 0xae
     ba6:	781b      	ldrb	r3, [r3, #0]
     ba8:	079b      	lsls	r3, r3, #30
     baa:	d50c      	bpl.n	bc6 <USB_Handler+0x15a>
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
     bac:	4b8b      	ldr	r3, [pc, #556]	; (ddc <USB_Handler+0x370>)
     bae:	0162      	lsls	r2, r4, #5
     bb0:	189b      	adds	r3, r3, r2
     bb2:	221f      	movs	r2, #31
     bb4:	89db      	ldrh	r3, [r3, #14]
				pipe_callback_para.pipe_num = pipe_int;
     bb6:	4988      	ldr	r1, [pc, #544]	; (dd8 <USB_Handler+0x36c>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
     bb8:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
     bba:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     bbc:	0123      	lsls	r3, r4, #4
     bbe:	18c3      	adds	r3, r0, r3
				pipe_callback_para.pipe_num = pipe_int;
     bc0:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bc4:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
     bc6:	2210      	movs	r2, #16
     bc8:	9b01      	ldr	r3, [sp, #4]
     bca:	4213      	tst	r3, r2
     bcc:	d01f      	beq.n	c0e <USB_Handler+0x1a2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     bce:	2301      	movs	r3, #1
     bd0:	40a3      	lsls	r3, r4
     bd2:	4980      	ldr	r1, [pc, #512]	; (dd4 <USB_Handler+0x368>)
     bd4:	6808      	ldr	r0, [r1, #0]
     bd6:	4398      	bics	r0, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     bd8:	0023      	movs	r3, r4
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     bda:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     bdc:	6830      	ldr	r0, [r6, #0]
     bde:	3308      	adds	r3, #8
     be0:	6801      	ldr	r1, [r0, #0]
     be2:	015b      	lsls	r3, r3, #5
     be4:	18cb      	adds	r3, r1, r3
     be6:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     be8:	1903      	adds	r3, r0, r4
     bea:	33ae      	adds	r3, #174	; 0xae
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	075b      	lsls	r3, r3, #29
     bf0:	d50d      	bpl.n	c0e <USB_Handler+0x1a2>
				pipe_callback_para.pipe_num = pipe_int;
     bf2:	4a79      	ldr	r2, [pc, #484]	; (dd8 <USB_Handler+0x36c>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     bf4:	4b79      	ldr	r3, [pc, #484]	; (ddc <USB_Handler+0x370>)
     bf6:	0161      	lsls	r1, r4, #5
     bf8:	185b      	adds	r3, r3, r1
				pipe_callback_para.pipe_num = pipe_int;
     bfa:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     bfc:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
     bfe:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     c00:	011b      	lsls	r3, r3, #4
     c02:	0c9b      	lsrs	r3, r3, #18
     c04:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
     c06:	0123      	lsls	r3, r4, #4
     c08:	18c3      	adds	r3, r0, r3
     c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     c0c:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_STALL) {
     c0e:	2220      	movs	r2, #32
     c10:	9b01      	ldr	r3, [sp, #4]
     c12:	4213      	tst	r3, r2
     c14:	d100      	bne.n	c18 <USB_Handler+0x1ac>
     c16:	e1f9      	b.n	100c <USB_Handler+0x5a0>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     c18:	2301      	movs	r3, #1
     c1a:	40a3      	lsls	r3, r4
     c1c:	496d      	ldr	r1, [pc, #436]	; (dd4 <USB_Handler+0x368>)
     c1e:	6808      	ldr	r0, [r1, #0]
     c20:	4398      	bics	r0, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     c22:	0023      	movs	r3, r4
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     c24:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     c26:	6830      	ldr	r0, [r6, #0]
     c28:	3308      	adds	r3, #8
     c2a:	6801      	ldr	r1, [r0, #0]
     c2c:	015b      	lsls	r3, r3, #5
     c2e:	18cb      	adds	r3, r1, r3
     c30:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     c32:	1903      	adds	r3, r0, r4
     c34:	33ae      	adds	r3, #174	; 0xae
     c36:	781b      	ldrb	r3, [r3, #0]
     c38:	071b      	lsls	r3, r3, #28
     c3a:	d400      	bmi.n	c3e <USB_Handler+0x1d2>
     c3c:	e1e6      	b.n	100c <USB_Handler+0x5a0>
				pipe_callback_para.pipe_num = pipe_int;
     c3e:	4966      	ldr	r1, [pc, #408]	; (dd8 <USB_Handler+0x36c>)
     c40:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
     c42:	0124      	lsls	r4, r4, #4
     c44:	1904      	adds	r4, r0, r4
     c46:	6b23      	ldr	r3, [r4, #48]	; 0x30
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
     c48:	4798      	blx	r3
     c4a:	e1df      	b.n	100c <USB_Handler+0x5a0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     c4c:	6859      	ldr	r1, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     c4e:	4d64      	ldr	r5, [pc, #400]	; (de0 <USB_Handler+0x374>)
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     c50:	0109      	lsls	r1, r1, #4
     c52:	0c89      	lsrs	r1, r1, #18
     c54:	8051      	strh	r1, [r2, #2]
     c56:	b288      	uxth	r0, r1
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     c58:	6859      	ldr	r1, [r3, #4]
     c5a:	0489      	lsls	r1, r1, #18
     c5c:	0c89      	lsrs	r1, r1, #18
     c5e:	8091      	strh	r1, [r2, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     c60:	6859      	ldr	r1, [r3, #4]
     c62:	4029      	ands	r1, r5
     c64:	6059      	str	r1, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
     c66:	2800      	cmp	r0, #0
     c68:	d000      	beq.n	c6c <USB_Handler+0x200>
     c6a:	e746      	b.n	afa <USB_Handler+0x8e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     c6c:	685b      	ldr	r3, [r3, #4]
     c6e:	049b      	lsls	r3, r3, #18
     c70:	0c9b      	lsrs	r3, r3, #18
     c72:	8053      	strh	r3, [r2, #2]
     c74:	e741      	b.n	afa <USB_Handler+0x8e>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
     c76:	0152      	lsls	r2, r2, #5
     c78:	5c53      	ldrb	r3, [r2, r1]
     c7a:	4d58      	ldr	r5, [pc, #352]	; (ddc <USB_Handler+0x370>)
     c7c:	069b      	lsls	r3, r3, #26
     c7e:	0f5b      	lsrs	r3, r3, #29
     c80:	46ac      	mov	ip, r5
     c82:	0167      	lsls	r7, r4, #5
     c84:	2b03      	cmp	r3, #3
     c86:	d111      	bne.n	cac <USB_Handler+0x240>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
     c88:	5c53      	ldrb	r3, [r2, r1]
     c8a:	079b      	lsls	r3, r3, #30
     c8c:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
     c8e:	2b01      	cmp	r3, #1
     c90:	d10c      	bne.n	cac <USB_Handler+0x240>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
     c92:	0039      	movs	r1, r7
     c94:	2300      	movs	r3, #0
     c96:	4461      	add	r1, ip
     c98:	728b      	strb	r3, [r1, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     c9a:	2104      	movs	r1, #4
     c9c:	6803      	ldr	r3, [r0, #0]
     c9e:	189b      	adds	r3, r3, r2
     ca0:	71d9      	strb	r1, [r3, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
     ca2:	6803      	ldr	r3, [r0, #0]
     ca4:	189a      	adds	r2, r3, r2
     ca6:	2310      	movs	r3, #16
     ca8:	7153      	strb	r3, [r2, #5]
     caa:	e76a      	b.n	b82 <USB_Handler+0x116>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
     cac:	003a      	movs	r2, r7
     cae:	2300      	movs	r3, #0
     cb0:	4462      	add	r2, ip
     cb2:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     cb4:	0022      	movs	r2, r4
     cb6:	6803      	ldr	r3, [r0, #0]
     cb8:	3208      	adds	r2, #8
     cba:	0152      	lsls	r2, r2, #5
     cbc:	189b      	adds	r3, r3, r2
     cbe:	2204      	movs	r2, #4
     cc0:	71da      	strb	r2, [r3, #7]
     cc2:	e75e      	b.n	b82 <USB_Handler+0x116>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
     cc4:	8c2c      	ldrh	r4, [r5, #32]
     cc6:	b2a2      	uxth	r2, r4
     cc8:	9201      	str	r2, [sp, #4]
	if (0 == ep_inst) {
     cca:	2a00      	cmp	r2, #0
     ccc:	d12c      	bne.n	d28 <USB_Handler+0x2bc>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
     cce:	8bab      	ldrh	r3, [r5, #28]
		flags_run = flags &
     cd0:	3255      	adds	r2, #85	; 0x55
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
     cd2:	b29b      	uxth	r3, r3
     cd4:	9302      	str	r3, [sp, #8]
				_usb_instances->device_enabled_callback_mask &
     cd6:	23ab      	movs	r3, #171	; 0xab
		flags_run = flags &
     cd8:	32ff      	adds	r2, #255	; 0xff
				_usb_instances->device_enabled_callback_mask &
     cda:	005b      	lsls	r3, r3, #1
		flags_run = flags &
     cdc:	5afb      	ldrh	r3, [r7, r3]
     cde:	5abd      	ldrh	r5, [r7, r2]
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
     ce0:	2780      	movs	r7, #128	; 0x80
		flags_run = flags &
     ce2:	401d      	ands	r5, r3
     ce4:	9b02      	ldr	r3, [sp, #8]
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     ce6:	9c01      	ldr	r4, [sp, #4]
		flags_run = flags &
     ce8:	401d      	ands	r5, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
     cea:	007f      	lsls	r7, r7, #1
			if (flags & _usb_device_irq_bits[i]) {
     cec:	4b3d      	ldr	r3, [pc, #244]	; (de4 <USB_Handler+0x378>)
     cee:	0062      	lsls	r2, r4, #1
     cf0:	5ad3      	ldrh	r3, [r2, r3]
     cf2:	9a02      	ldr	r2, [sp, #8]
     cf4:	4213      	tst	r3, r2
     cf6:	d002      	beq.n	cfe <USB_Handler+0x292>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     cf8:	6832      	ldr	r2, [r6, #0]
     cfa:	6812      	ldr	r2, [r2, #0]
     cfc:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
     cfe:	422b      	tst	r3, r5
     d00:	d00e      	beq.n	d20 <USB_Handler+0x2b4>
     d02:	4939      	ldr	r1, [pc, #228]	; (de8 <USB_Handler+0x37c>)
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
     d04:	2c06      	cmp	r4, #6
     d06:	d104      	bne.n	d12 <USB_Handler+0x2a6>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
     d08:	4b34      	ldr	r3, [pc, #208]	; (ddc <USB_Handler+0x370>)
     d0a:	891b      	ldrh	r3, [r3, #8]
     d0c:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
     d0e:	403b      	ands	r3, r7
     d10:	600b      	str	r3, [r1, #0]
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     d12:	0023      	movs	r3, r4
     d14:	6832      	ldr	r2, [r6, #0]
     d16:	332e      	adds	r3, #46	; 0x2e
     d18:	009b      	lsls	r3, r3, #2
     d1a:	589b      	ldr	r3, [r3, r2]
     d1c:	0010      	movs	r0, r2
     d1e:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     d20:	3401      	adds	r4, #1
     d22:	2c07      	cmp	r4, #7
     d24:	d1e2      	bne.n	cec <USB_Handler+0x280>
     d26:	e171      	b.n	100c <USB_Handler+0x5a0>
     d28:	003e      	movs	r6, r7
     d2a:	3659      	adds	r6, #89	; 0x59
     d2c:	36ff      	adds	r6, #255	; 0xff
			if (ep_inst & (1 << i)) {
     d2e:	9a01      	ldr	r2, [sp, #4]
     d30:	2101      	movs	r1, #1
     d32:	411a      	asrs	r2, r3
     d34:	b2dc      	uxtb	r4, r3
     d36:	420a      	tst	r2, r1
     d38:	d100      	bne.n	d3c <USB_Handler+0x2d0>
     d3a:	e0cc      	b.n	ed6 <USB_Handler+0x46a>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
     d3c:	001a      	movs	r2, r3
     d3e:	3208      	adds	r2, #8
     d40:	0151      	lsls	r1, r2, #5
     d42:	1869      	adds	r1, r5, r1
     d44:	1dc8      	adds	r0, r1, #7
     d46:	9003      	str	r0, [sp, #12]
     d48:	79c8      	ldrb	r0, [r1, #7]
     d4a:	7a31      	ldrb	r1, [r6, #8]
     d4c:	9202      	str	r2, [sp, #8]
     d4e:	b2c0      	uxtb	r0, r0
     d50:	7832      	ldrb	r2, [r6, #0]
     d52:	4001      	ands	r1, r0
     d54:	4011      	ands	r1, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     d56:	2260      	movs	r2, #96	; 0x60
     d58:	4210      	tst	r0, r2
     d5a:	d01a      	beq.n	d92 <USB_Handler+0x326>
     d5c:	015a      	lsls	r2, r3, #5
     d5e:	18ad      	adds	r5, r5, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
     d60:	2240      	movs	r2, #64	; 0x40
     d62:	35ff      	adds	r5, #255	; 0xff
     d64:	7a28      	ldrb	r0, [r5, #8]
     d66:	4210      	tst	r0, r2
     d68:	d00d      	beq.n	d86 <USB_Handler+0x31a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
     d6a:	722a      	strb	r2, [r5, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     d6c:	3ac0      	subs	r2, #192	; 0xc0
     d6e:	4314      	orrs	r4, r2
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     d70:	4a1e      	ldr	r2, [pc, #120]	; (dec <USB_Handler+0x380>)
     d72:	7194      	strb	r4, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
     d74:	2260      	movs	r2, #96	; 0x60
     d76:	4211      	tst	r1, r2
     d78:	d100      	bne.n	d7c <USB_Handler+0x310>
     d7a:	e147      	b.n	100c <USB_Handler+0x5a0>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
     d7c:	011b      	lsls	r3, r3, #4
     d7e:	18fb      	adds	r3, r7, r3
     d80:	33e0      	adds	r3, #224	; 0xe0
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
     d82:	681b      	ldr	r3, [r3, #0]
     d84:	e052      	b.n	e2c <USB_Handler+0x3c0>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
     d86:	2220      	movs	r2, #32
     d88:	7a28      	ldrb	r0, [r5, #8]
     d8a:	4210      	tst	r0, r2
     d8c:	d0f2      	beq.n	d74 <USB_Handler+0x308>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
     d8e:	722a      	strb	r2, [r5, #8]
     d90:	e7ee      	b.n	d70 <USB_Handler+0x304>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
     d92:	2210      	movs	r2, #16
     d94:	4210      	tst	r0, r2
     d96:	d02b      	beq.n	df0 <USB_Handler+0x384>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
     d98:	2110      	movs	r1, #16
     d9a:	9a03      	ldr	r2, [sp, #12]
     d9c:	7011      	strb	r1, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
     d9e:	2110      	movs	r1, #16
     da0:	18fa      	adds	r2, r7, r3
     da2:	3261      	adds	r2, #97	; 0x61
     da4:	32ff      	adds	r2, #255	; 0xff
     da6:	7812      	ldrb	r2, [r2, #0]
     da8:	420a      	tst	r2, r1
     daa:	d100      	bne.n	dae <USB_Handler+0x342>
     dac:	e12e      	b.n	100c <USB_Handler+0x5a0>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     dae:	4a0b      	ldr	r2, [pc, #44]	; (ddc <USB_Handler+0x370>)
     db0:	0159      	lsls	r1, r3, #5
     db2:	1852      	adds	r2, r2, r1
     db4:	6852      	ldr	r2, [r2, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     db6:	011b      	lsls	r3, r3, #4
     db8:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     dba:	0492      	lsls	r2, r2, #18
     dbc:	490b      	ldr	r1, [pc, #44]	; (dec <USB_Handler+0x380>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     dbe:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     dc0:	0c92      	lsrs	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
     dc2:	681b      	ldr	r3, [r3, #0]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     dc4:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
     dc6:	0038      	movs	r0, r7
     dc8:	e73e      	b.n	c48 <USB_Handler+0x1dc>
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	20000120 	.word	0x20000120
     dd0:	00002c31 	.word	0x00002c31
     dd4:	20000130 	.word	0x20000130
     dd8:	20000134 	.word	0x20000134
     ddc:	20000328 	.word	0x20000328
     de0:	f0003fff 	.word	0xf0003fff
     de4:	0000379c 	.word	0x0000379c
     de8:	20000124 	.word	0x20000124
     dec:	20000128 	.word	0x20000128
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     df0:	2203      	movs	r2, #3
     df2:	4210      	tst	r0, r2
     df4:	d02e      	beq.n	e54 <USB_Handler+0x3e8>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     df6:	2002      	movs	r0, #2
     df8:	015a      	lsls	r2, r3, #5
     dfa:	18ad      	adds	r5, r5, r2
     dfc:	35ff      	adds	r5, #255	; 0xff
     dfe:	7a2e      	ldrb	r6, [r5, #8]
     e00:	4206      	tst	r6, r0
     e02:	d015      	beq.n	e30 <USB_Handler+0x3c4>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
     e04:	7228      	strb	r0, [r5, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     e06:	2580      	movs	r5, #128	; 0x80
     e08:	4881      	ldr	r0, [pc, #516]	; (1010 <USB_Handler+0x5a4>)
     e0a:	426d      	negs	r5, r5
     e0c:	432c      	orrs	r4, r5
     e0e:	7184      	strb	r4, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
     e10:	4c80      	ldr	r4, [pc, #512]	; (1014 <USB_Handler+0x5a8>)
     e12:	18a2      	adds	r2, r4, r2
     e14:	3210      	adds	r2, #16
     e16:	6852      	ldr	r2, [r2, #4]
     e18:	0492      	lsls	r2, r2, #18
     e1a:	0c92      	lsrs	r2, r2, #18
     e1c:	8042      	strh	r2, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
     e1e:	078a      	lsls	r2, r1, #30
     e20:	d100      	bne.n	e24 <USB_Handler+0x3b8>
     e22:	e0f3      	b.n	100c <USB_Handler+0x5a0>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
     e24:	330d      	adds	r3, #13
     e26:	011b      	lsls	r3, r3, #4
     e28:	18fb      	adds	r3, r7, r3
     e2a:	685b      	ldr	r3, [r3, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
     e2c:	4978      	ldr	r1, [pc, #480]	; (1010 <USB_Handler+0x5a4>)
     e2e:	e7ca      	b.n	dc6 <USB_Handler+0x35a>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     e30:	2601      	movs	r6, #1
     e32:	7a28      	ldrb	r0, [r5, #8]
     e34:	4230      	tst	r0, r6
     e36:	d0f2      	beq.n	e1e <USB_Handler+0x3b2>
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     e38:	4875      	ldr	r0, [pc, #468]	; (1010 <USB_Handler+0x5a4>)
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
     e3a:	722e      	strb	r6, [r5, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     e3c:	7184      	strb	r4, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
     e3e:	4c75      	ldr	r4, [pc, #468]	; (1014 <USB_Handler+0x5a8>)
     e40:	18a4      	adds	r4, r4, r2
     e42:	6862      	ldr	r2, [r4, #4]
     e44:	0492      	lsls	r2, r2, #18
     e46:	0c92      	lsrs	r2, r2, #18
     e48:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
     e4a:	6862      	ldr	r2, [r4, #4]
     e4c:	0112      	lsls	r2, r2, #4
     e4e:	0c92      	lsrs	r2, r2, #18
     e50:	8082      	strh	r2, [r0, #4]
     e52:	e7e4      	b.n	e1e <USB_Handler+0x3b2>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     e54:	220c      	movs	r2, #12
     e56:	4210      	tst	r0, r2
     e58:	d03d      	beq.n	ed6 <USB_Handler+0x46a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
     e5a:	2008      	movs	r0, #8
     e5c:	015e      	lsls	r6, r3, #5
     e5e:	19ad      	adds	r5, r5, r6
     e60:	35ff      	adds	r5, #255	; 0xff
     e62:	7a2a      	ldrb	r2, [r5, #8]
     e64:	4202      	tst	r2, r0
     e66:	d01e      	beq.n	ea6 <USB_Handler+0x43a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
     e68:	7228      	strb	r0, [r5, #8]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     e6a:	486a      	ldr	r0, [pc, #424]	; (1014 <USB_Handler+0x5a8>)
     e6c:	1980      	adds	r0, r0, r6
     e6e:	2602      	movs	r6, #2
     e70:	7e85      	ldrb	r5, [r0, #26]
     e72:	4235      	tst	r5, r6
     e74:	d002      	beq.n	e7c <USB_Handler+0x410>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     e76:	7e85      	ldrb	r5, [r0, #26]
     e78:	43b5      	bics	r5, r6
     e7a:	7685      	strb	r5, [r0, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     e7c:	2080      	movs	r0, #128	; 0x80
     e7e:	4240      	negs	r0, r0
     e80:	4304      	orrs	r4, r0
     e82:	4863      	ldr	r0, [pc, #396]	; (1010 <USB_Handler+0x5a4>)
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     e84:	9a02      	ldr	r2, [sp, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
     e86:	7184      	strb	r4, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
     e88:	6838      	ldr	r0, [r7, #0]
     e8a:	0152      	lsls	r2, r2, #5
     e8c:	1882      	adds	r2, r0, r2
     e8e:	79d2      	ldrb	r2, [r2, #7]
     e90:	0792      	lsls	r2, r2, #30
     e92:	d500      	bpl.n	e96 <USB_Handler+0x42a>
     e94:	e0ba      	b.n	100c <USB_Handler+0x5a0>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
     e96:	220c      	movs	r2, #12
     e98:	4211      	tst	r1, r2
     e9a:	d100      	bne.n	e9e <USB_Handler+0x432>
     e9c:	e0b6      	b.n	100c <USB_Handler+0x5a0>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
     e9e:	011b      	lsls	r3, r3, #4
     ea0:	18fb      	adds	r3, r7, r3
     ea2:	33d8      	adds	r3, #216	; 0xd8
     ea4:	e76d      	b.n	d82 <USB_Handler+0x316>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
     ea6:	2004      	movs	r0, #4
     ea8:	7a2a      	ldrb	r2, [r5, #8]
     eaa:	4202      	tst	r2, r0
     eac:	d0f3      	beq.n	e96 <USB_Handler+0x42a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
     eae:	7228      	strb	r0, [r5, #8]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
     eb0:	4858      	ldr	r0, [pc, #352]	; (1014 <USB_Handler+0x5a8>)
     eb2:	1980      	adds	r0, r0, r6
     eb4:	2602      	movs	r6, #2
     eb6:	7a85      	ldrb	r5, [r0, #10]
     eb8:	4235      	tst	r5, r6
     eba:	d002      	beq.n	ec2 <USB_Handler+0x456>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
     ebc:	7a85      	ldrb	r5, [r0, #10]
     ebe:	43b5      	bics	r5, r6
     ec0:	7285      	strb	r5, [r0, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     ec2:	4853      	ldr	r0, [pc, #332]	; (1010 <USB_Handler+0x5a4>)
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     ec4:	9a02      	ldr	r2, [sp, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
     ec6:	7184      	strb	r4, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
     ec8:	6838      	ldr	r0, [r7, #0]
     eca:	0152      	lsls	r2, r2, #5
     ecc:	1882      	adds	r2, r0, r2
     ece:	79d2      	ldrb	r2, [r2, #7]
     ed0:	07d2      	lsls	r2, r2, #31
     ed2:	d5e0      	bpl.n	e96 <USB_Handler+0x42a>
     ed4:	e09a      	b.n	100c <USB_Handler+0x5a0>
     ed6:	3301      	adds	r3, #1
     ed8:	3601      	adds	r6, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
     eda:	2b08      	cmp	r3, #8
     edc:	d000      	beq.n	ee0 <USB_Handler+0x474>
     ede:	e726      	b.n	d2e <USB_Handler+0x2c2>
     ee0:	e094      	b.n	100c <USB_Handler+0x5a0>
		if (flags & USB_HOST_INTFLAG_HSOF) {
     ee2:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
     ee4:	8bac      	ldrh	r4, [r5, #28]
     ee6:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
     ee8:	421c      	tst	r4, r3
     eea:	d026      	beq.n	f3a <USB_Handler+0x4ce>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
     eec:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
     eee:	4b4a      	ldr	r3, [pc, #296]	; (1018 <USB_Handler+0x5ac>)
     ef0:	681b      	ldr	r3, [r3, #0]
     ef2:	469c      	mov	ip, r3
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
     ef4:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
     ef6:	001d      	movs	r5, r3
     ef8:	002a      	movs	r2, r5
     efa:	4661      	mov	r1, ip
     efc:	409a      	lsls	r2, r3
     efe:	4211      	tst	r1, r2
     f00:	d010      	beq.n	f24 <USB_Handler+0x4b8>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
     f02:	0019      	movs	r1, r3
     f04:	683a      	ldr	r2, [r7, #0]
     f06:	3108      	adds	r1, #8
     f08:	0149      	lsls	r1, r1, #5
     f0a:	5c88      	ldrb	r0, [r1, r2]
     f0c:	0680      	lsls	r0, r0, #26
     f0e:	0f40      	lsrs	r0, r0, #29
     f10:	2803      	cmp	r0, #3
     f12:	d107      	bne.n	f24 <USB_Handler+0x4b8>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
     f14:	5c88      	ldrb	r0, [r1, r2]
     f16:	0780      	lsls	r0, r0, #30
     f18:	0f80      	lsrs	r0, r0, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
     f1a:	2801      	cmp	r0, #1
     f1c:	d102      	bne.n	f24 <USB_Handler+0x4b8>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
     f1e:	1852      	adds	r2, r2, r1
     f20:	2110      	movs	r1, #16
     f22:	7111      	strb	r1, [r2, #4]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
     f24:	3301      	adds	r3, #1
     f26:	2b08      	cmp	r3, #8
     f28:	d1e6      	bne.n	ef8 <USB_Handler+0x48c>
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
     f2a:	003b      	movs	r3, r7
     f2c:	33a5      	adds	r3, #165	; 0xa5
     f2e:	781b      	ldrb	r3, [r3, #0]
     f30:	07db      	lsls	r3, r3, #31
     f32:	d502      	bpl.n	f3a <USB_Handler+0x4ce>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
     f34:	687b      	ldr	r3, [r7, #4]
     f36:	0038      	movs	r0, r7
     f38:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_RST) {
     f3a:	2308      	movs	r3, #8
     f3c:	421c      	tst	r4, r3
     f3e:	d00c      	beq.n	f5a <USB_Handler+0x4ee>
			host_pipe_job_busy_status = 0;
     f40:	2100      	movs	r1, #0
     f42:	4a35      	ldr	r2, [pc, #212]	; (1018 <USB_Handler+0x5ac>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
     f44:	6830      	ldr	r0, [r6, #0]
			host_pipe_job_busy_status = 0;
     f46:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
     f48:	6802      	ldr	r2, [r0, #0]
     f4a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
     f4c:	0003      	movs	r3, r0
     f4e:	33a5      	adds	r3, #165	; 0xa5
     f50:	781b      	ldrb	r3, [r3, #0]
     f52:	079b      	lsls	r3, r3, #30
     f54:	d501      	bpl.n	f5a <USB_Handler+0x4ee>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
     f56:	6883      	ldr	r3, [r0, #8]
     f58:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_UPRSM) {
     f5a:	2340      	movs	r3, #64	; 0x40
     f5c:	421c      	tst	r4, r3
     f5e:	d009      	beq.n	f74 <USB_Handler+0x508>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
     f60:	6830      	ldr	r0, [r6, #0]
     f62:	6802      	ldr	r2, [r0, #0]
     f64:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
     f66:	0003      	movs	r3, r0
     f68:	33a5      	adds	r3, #165	; 0xa5
     f6a:	781b      	ldrb	r3, [r3, #0]
     f6c:	06db      	lsls	r3, r3, #27
     f6e:	d501      	bpl.n	f74 <USB_Handler+0x508>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
     f70:	6943      	ldr	r3, [r0, #20]
     f72:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DNRSM) {
     f74:	2320      	movs	r3, #32
     f76:	421c      	tst	r4, r3
     f78:	d009      	beq.n	f8e <USB_Handler+0x522>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
     f7a:	6830      	ldr	r0, [r6, #0]
     f7c:	6802      	ldr	r2, [r0, #0]
     f7e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
     f80:	0003      	movs	r3, r0
     f82:	33a5      	adds	r3, #165	; 0xa5
     f84:	781b      	ldrb	r3, [r3, #0]
     f86:	071b      	lsls	r3, r3, #28
     f88:	d501      	bpl.n	f8e <USB_Handler+0x522>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
     f8a:	6903      	ldr	r3, [r0, #16]
     f8c:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
     f8e:	2310      	movs	r3, #16
     f90:	421c      	tst	r4, r3
     f92:	d009      	beq.n	fa8 <USB_Handler+0x53c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
     f94:	6830      	ldr	r0, [r6, #0]
     f96:	6802      	ldr	r2, [r0, #0]
     f98:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
     f9a:	0003      	movs	r3, r0
     f9c:	33a5      	adds	r3, #165	; 0xa5
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	075b      	lsls	r3, r3, #29
     fa2:	d501      	bpl.n	fa8 <USB_Handler+0x53c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
     fa4:	68c3      	ldr	r3, [r0, #12]
     fa6:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_RAMACER) {
     fa8:	2380      	movs	r3, #128	; 0x80
     faa:	421c      	tst	r4, r3
     fac:	d00c      	beq.n	fc8 <USB_Handler+0x55c>
			host_pipe_job_busy_status = 0;
     fae:	2100      	movs	r1, #0
     fb0:	4a19      	ldr	r2, [pc, #100]	; (1018 <USB_Handler+0x5ac>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
     fb2:	6830      	ldr	r0, [r6, #0]
			host_pipe_job_busy_status = 0;
     fb4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
     fb6:	6802      	ldr	r2, [r0, #0]
     fb8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
     fba:	0003      	movs	r3, r0
     fbc:	33a5      	adds	r3, #165	; 0xa5
     fbe:	781b      	ldrb	r3, [r3, #0]
     fc0:	069b      	lsls	r3, r3, #26
     fc2:	d501      	bpl.n	fc8 <USB_Handler+0x55c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
     fc4:	6983      	ldr	r3, [r0, #24]
     fc6:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DCONN) {
     fc8:	2380      	movs	r3, #128	; 0x80
     fca:	005b      	lsls	r3, r3, #1
     fcc:	421c      	tst	r4, r3
     fce:	d00c      	beq.n	fea <USB_Handler+0x57e>
			host_pipe_job_busy_status = 0;
     fd0:	2100      	movs	r1, #0
     fd2:	4a11      	ldr	r2, [pc, #68]	; (1018 <USB_Handler+0x5ac>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
     fd4:	6830      	ldr	r0, [r6, #0]
			host_pipe_job_busy_status = 0;
     fd6:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
     fd8:	6802      	ldr	r2, [r0, #0]
     fda:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
     fdc:	0003      	movs	r3, r0
     fde:	33a5      	adds	r3, #165	; 0xa5
     fe0:	781b      	ldrb	r3, [r3, #0]
     fe2:	065b      	lsls	r3, r3, #25
     fe4:	d501      	bpl.n	fea <USB_Handler+0x57e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
     fe6:	69c3      	ldr	r3, [r0, #28]
     fe8:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DDISC) {
     fea:	2380      	movs	r3, #128	; 0x80
     fec:	009b      	lsls	r3, r3, #2
     fee:	421c      	tst	r4, r3
     ff0:	d00c      	beq.n	100c <USB_Handler+0x5a0>
			host_pipe_job_busy_status = 0;
     ff2:	2100      	movs	r1, #0
     ff4:	4a08      	ldr	r2, [pc, #32]	; (1018 <USB_Handler+0x5ac>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
     ff6:	6830      	ldr	r0, [r6, #0]
			host_pipe_job_busy_status = 0;
     ff8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
     ffa:	6802      	ldr	r2, [r0, #0]
     ffc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
     ffe:	0003      	movs	r3, r0
    1000:	33a5      	adds	r3, #165	; 0xa5
    1002:	781b      	ldrb	r3, [r3, #0]
    1004:	2b7f      	cmp	r3, #127	; 0x7f
    1006:	d901      	bls.n	100c <USB_Handler+0x5a0>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    1008:	6a03      	ldr	r3, [r0, #32]
    100a:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    100c:	b005      	add	sp, #20
    100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1010:	20000128 	.word	0x20000128
    1014:	20000328 	.word	0x20000328
    1018:	20000130 	.word	0x20000130

0000101c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    101c:	b5f0      	push	{r4, r5, r6, r7, lr}
    101e:	0005      	movs	r5, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1020:	6029      	str	r1, [r5, #0]
{
    1022:	0014      	movs	r4, r2

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1024:	680a      	ldr	r2, [r1, #0]
{
    1026:	b089      	sub	sp, #36	; 0x24
    1028:	000e      	movs	r6, r1
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    102a:	231c      	movs	r3, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    102c:	0792      	lsls	r2, r2, #30
    102e:	d500      	bpl.n	1032 <spi_init+0x16>
    1030:	e0d4      	b.n	11dc <spi_init+0x1c0>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1032:	2701      	movs	r7, #1
    1034:	680b      	ldr	r3, [r1, #0]
    1036:	403b      	ands	r3, r7
    1038:	9301      	str	r3, [sp, #4]
    103a:	9a01      	ldr	r2, [sp, #4]
		return STATUS_BUSY;
    103c:	2305      	movs	r3, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    103e:	2a00      	cmp	r2, #0
    1040:	d000      	beq.n	1044 <spi_init+0x28>
    1042:	e0cb      	b.n	11dc <spi_init+0x1c0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1044:	0008      	movs	r0, r1
    1046:	4b6a      	ldr	r3, [pc, #424]	; (11f0 <spi_init+0x1d4>)
    1048:	4798      	blx	r3
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    104a:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    104c:	408f      	lsls	r7, r1
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    104e:	4b69      	ldr	r3, [pc, #420]	; (11f4 <spi_init+0x1d8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1050:	3014      	adds	r0, #20
    1052:	6a1a      	ldr	r2, [r3, #32]
    1054:	4317      	orrs	r7, r2
    1056:	621f      	str	r7, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1058:	1d63      	adds	r3, r4, #5
    105a:	7fdb      	ldrb	r3, [r3, #31]
    105c:	aa02      	add	r2, sp, #8
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    105e:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
    1060:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1062:	0011      	movs	r1, r2
    1064:	0038      	movs	r0, r7
    1066:	4b64      	ldr	r3, [pc, #400]	; (11f8 <spi_init+0x1dc>)
    1068:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    106a:	0038      	movs	r0, r7
    106c:	4b63      	ldr	r3, [pc, #396]	; (11fc <spi_init+0x1e0>)
    106e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1070:	1d63      	adds	r3, r4, #5
    1072:	7fd8      	ldrb	r0, [r3, #31]
    1074:	9901      	ldr	r1, [sp, #4]
    1076:	4b62      	ldr	r3, [pc, #392]	; (1200 <spi_init+0x1e4>)
    1078:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    107a:	7823      	ldrb	r3, [r4, #0]
    107c:	2b01      	cmp	r3, #1
    107e:	d103      	bne.n	1088 <spi_init+0x6c>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1080:	6832      	ldr	r2, [r6, #0]
    1082:	330b      	adds	r3, #11
    1084:	4313      	orrs	r3, r2
    1086:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1088:	7823      	ldrb	r3, [r4, #0]
    108a:	2b00      	cmp	r3, #0
    108c:	d103      	bne.n	1096 <spi_init+0x7a>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    108e:	6832      	ldr	r2, [r6, #0]
    1090:	3308      	adds	r3, #8
    1092:	4313      	orrs	r3, r2
    1094:	6033      	str	r3, [r6, #0]
    1096:	002b      	movs	r3, r5
    1098:	002a      	movs	r2, r5
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    109a:	2600      	movs	r6, #0
    109c:	330c      	adds	r3, #12
    109e:	3228      	adds	r2, #40	; 0x28
    10a0:	c340      	stmia	r3!, {r6}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    10a2:	429a      	cmp	r2, r3
    10a4:	d1fc      	bne.n	10a0 <spi_init+0x84>
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
    10a6:	002b      	movs	r3, r5
    10a8:	3336      	adds	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
    10aa:	86ae      	strh	r6, [r5, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
    10ac:	62ee      	str	r6, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
    10ae:	862e      	strh	r6, [r5, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
    10b0:	62ae      	str	r6, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
    10b2:	701e      	strb	r6, [r3, #0]
	module->enabled_callback           = 0x00;
    10b4:	705e      	strb	r6, [r3, #1]
	module->status                     = STATUS_OK;
    10b6:	709e      	strb	r6, [r3, #2]
	module->dir                        = SPI_DIRECTION_IDLE;
    10b8:	2303      	movs	r3, #3
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    10ba:	6828      	ldr	r0, [r5, #0]
	module->dir                        = SPI_DIRECTION_IDLE;
    10bc:	726b      	strb	r3, [r5, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    10be:	4b4c      	ldr	r3, [pc, #304]	; (11f0 <spi_init+0x1d4>)
	module->locked                     = false;
    10c0:	712e      	strb	r6, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    10c2:	4798      	blx	r3
    10c4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    10c6:	4b4f      	ldr	r3, [pc, #316]	; (1204 <spi_init+0x1e8>)
    10c8:	494f      	ldr	r1, [pc, #316]	; (1208 <spi_init+0x1ec>)
    10ca:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    10cc:	4b4f      	ldr	r3, [pc, #316]	; (120c <spi_init+0x1f0>)
    10ce:	00bf      	lsls	r7, r7, #2
    10d0:	50fd      	str	r5, [r7, r3]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10d2:	2380      	movs	r3, #128	; 0x80
    10d4:	aa02      	add	r2, sp, #8
    10d6:	7113      	strb	r3, [r2, #4]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    10d8:	2301      	movs	r3, #1
    10da:	7193      	strb	r3, [r2, #6]
	if(config->mode == SPI_MODE_SLAVE) {
    10dc:	7823      	ldrb	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    10de:	682f      	ldr	r7, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10e0:	7156      	strb	r6, [r2, #5]
	config->powersave    = false;
    10e2:	71d6      	strb	r6, [r2, #7]
	if(config->mode == SPI_MODE_SLAVE) {
    10e4:	2b00      	cmp	r3, #0
    10e6:	d100      	bne.n	10ea <spi_init+0xce>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    10e8:	7196      	strb	r6, [r2, #6]
	uint32_t pad_pinmuxes[] = {
    10ea:	2600      	movs	r6, #0
    10ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    10ee:	9304      	str	r3, [sp, #16]
    10f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    10f2:	9305      	str	r3, [sp, #20]
    10f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    10f6:	9306      	str	r3, [sp, #24]
    10f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    10fa:	9307      	str	r3, [sp, #28]
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10fc:	00b3      	lsls	r3, r6, #2
    10fe:	aa04      	add	r2, sp, #16
    1100:	5898      	ldr	r0, [r3, r2]
    1102:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
    1104:	2800      	cmp	r0, #0
    1106:	d102      	bne.n	110e <spi_init+0xf2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1108:	0038      	movs	r0, r7
    110a:	4b41      	ldr	r3, [pc, #260]	; (1210 <spi_init+0x1f4>)
    110c:	4798      	blx	r3
		if (current_pinmux != PINMUX_UNUSED) {
    110e:	1c43      	adds	r3, r0, #1
    1110:	d006      	beq.n	1120 <spi_init+0x104>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1112:	ab02      	add	r3, sp, #8
    1114:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1116:	0c00      	lsrs	r0, r0, #16
    1118:	b2c0      	uxtb	r0, r0
    111a:	a903      	add	r1, sp, #12
    111c:	4b3d      	ldr	r3, [pc, #244]	; (1214 <spi_init+0x1f8>)
    111e:	4798      	blx	r3
    1120:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1122:	2e04      	cmp	r6, #4
    1124:	d1ea      	bne.n	10fc <spi_init+0xe0>
	module->mode             = config->mode;
    1126:	7823      	ldrb	r3, [r4, #0]
    1128:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    112a:	7c23      	ldrb	r3, [r4, #16]
    112c:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    112e:	7ca3      	ldrb	r3, [r4, #18]
    1130:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1132:	7d23      	ldrb	r3, [r4, #20]
    1134:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1136:	ab02      	add	r3, sp, #8
    1138:	1c9e      	adds	r6, r3, #2
    113a:	2300      	movs	r3, #0
    113c:	8033      	strh	r3, [r6, #0]
	if (config->mode == SPI_MODE_MASTER) {
    113e:	7823      	ldrb	r3, [r4, #0]
    1140:	2b01      	cmp	r3, #1
    1142:	d110      	bne.n	1166 <spi_init+0x14a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1144:	4b2a      	ldr	r3, [pc, #168]	; (11f0 <spi_init+0x1d4>)
    1146:	6828      	ldr	r0, [r5, #0]
    1148:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    114a:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    114c:	4b32      	ldr	r3, [pc, #200]	; (1218 <spi_init+0x1fc>)
    114e:	b2c0      	uxtb	r0, r0
    1150:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
    1152:	4b32      	ldr	r3, [pc, #200]	; (121c <spi_init+0x200>)
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1154:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1156:	0032      	movs	r2, r6
    1158:	69a0      	ldr	r0, [r4, #24]
    115a:	4798      	blx	r3
			return STATUS_ERR_INVALID_ARG;
    115c:	2317      	movs	r3, #23
		if (error_code != STATUS_OK) {
    115e:	2800      	cmp	r0, #0
    1160:	d13c      	bne.n	11dc <spi_init+0x1c0>
		spi_module->BAUD.reg = (uint8_t)baud;
    1162:	7833      	ldrb	r3, [r6, #0]
    1164:	733b      	strb	r3, [r7, #12]
	if (config->mode == SPI_MODE_SLAVE) {
    1166:	7823      	ldrb	r3, [r4, #0]
    1168:	2b00      	cmp	r3, #0
    116a:	d13d      	bne.n	11e8 <spi_init+0x1cc>
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    116c:	7fe1      	ldrb	r1, [r4, #31]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    116e:	7fa5      	ldrb	r5, [r4, #30]
		spi_module->ADDR.reg |=
    1170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1172:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1174:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    1176:	4319      	orrs	r1, r3
		ctrla = config->mode_specific.slave.frame_format;
    1178:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    117a:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    117c:	1c63      	adds	r3, r4, #1
		spi_module->ADDR.reg |=
    117e:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    1180:	7fdb      	ldrb	r3, [r3, #31]
    1182:	2b00      	cmp	r3, #0
    1184:	d12d      	bne.n	11e2 <spi_init+0x1c6>
		ctrlb = config->mode_specific.slave.address_mode;
    1186:	0013      	movs	r3, r2
	ctrla |= config->mux_setting;
    1188:	68a1      	ldr	r1, [r4, #8]
    118a:	6862      	ldr	r2, [r4, #4]
    118c:	430a      	orrs	r2, r1
    118e:	68e1      	ldr	r1, [r4, #12]
    1190:	430a      	orrs	r2, r1
	ctrlb |= config->character_size;
    1192:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->mux_setting;
    1194:	4302      	orrs	r2, r0
	ctrlb |= config->character_size;
    1196:	430b      	orrs	r3, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    1198:	7c61      	ldrb	r1, [r4, #17]
    119a:	2900      	cmp	r1, #0
    119c:	d103      	bne.n	11a6 <spi_init+0x18a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    119e:	4920      	ldr	r1, [pc, #128]	; (1220 <spi_init+0x204>)
    11a0:	7889      	ldrb	r1, [r1, #2]
    11a2:	0789      	lsls	r1, r1, #30
    11a4:	d501      	bpl.n	11aa <spi_init+0x18e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    11a6:	2180      	movs	r1, #128	; 0x80
    11a8:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
    11aa:	7ca1      	ldrb	r1, [r4, #18]
    11ac:	2900      	cmp	r1, #0
    11ae:	d002      	beq.n	11b6 <spi_init+0x19a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    11b0:	2180      	movs	r1, #128	; 0x80
    11b2:	0289      	lsls	r1, r1, #10
    11b4:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
    11b6:	7ce1      	ldrb	r1, [r4, #19]
    11b8:	2900      	cmp	r1, #0
    11ba:	d002      	beq.n	11c2 <spi_init+0x1a6>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    11bc:	2180      	movs	r1, #128	; 0x80
    11be:	0089      	lsls	r1, r1, #2
    11c0:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
    11c2:	7d21      	ldrb	r1, [r4, #20]
    11c4:	2900      	cmp	r1, #0
    11c6:	d002      	beq.n	11ce <spi_init+0x1b2>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    11c8:	2180      	movs	r1, #128	; 0x80
    11ca:	0189      	lsls	r1, r1, #6
    11cc:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
    11ce:	6839      	ldr	r1, [r7, #0]
    11d0:	430a      	orrs	r2, r1
    11d2:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    11d4:	687a      	ldr	r2, [r7, #4]
    11d6:	4313      	orrs	r3, r2
    11d8:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    11da:	2300      	movs	r3, #0
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    11dc:	0018      	movs	r0, r3
    11de:	b009      	add	sp, #36	; 0x24
    11e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    11e2:	2340      	movs	r3, #64	; 0x40
    11e4:	4313      	orrs	r3, r2
    11e6:	e7cf      	b.n	1188 <spi_init+0x16c>
	uint32_t ctrlb = 0;
    11e8:	2300      	movs	r3, #0
	uint32_t ctrla = 0;
    11ea:	0018      	movs	r0, r3
    11ec:	e7cc      	b.n	1188 <spi_init+0x16c>
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	000007c1 	.word	0x000007c1
    11f4:	40000400 	.word	0x40000400
    11f8:	00002401 	.word	0x00002401
    11fc:	00002379 	.word	0x00002379
    1200:	00000621 	.word	0x00000621
    1204:	00001425 	.word	0x00001425
    1208:	00001225 	.word	0x00001225
    120c:	2000042c 	.word	0x2000042c
    1210:	00000665 	.word	0x00000665
    1214:	000024d5 	.word	0x000024d5
    1218:	0000241d 	.word	0x0000241d
    121c:	000005f9 	.word	0x000005f9
    1220:	41002000 	.word	0x41002000

00001224 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1226:	4b7c      	ldr	r3, [pc, #496]	; (1418 <_spi_interrupt_handler+0x1f4>)
    1228:	0080      	lsls	r0, r0, #2
    122a:	58c4      	ldr	r4, [r0, r3]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    122c:	0023      	movs	r3, r4
    122e:	0022      	movs	r2, r4
    1230:	3337      	adds	r3, #55	; 0x37
    1232:	3236      	adds	r2, #54	; 0x36
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1234:	6825      	ldr	r5, [r4, #0]
	uint8_t callback_mask =
    1236:	781b      	ldrb	r3, [r3, #0]
    1238:	7816      	ldrb	r6, [r2, #0]
    123a:	401e      	ands	r6, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    123c:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    123e:	7daf      	ldrb	r7, [r5, #22]
    1240:	401f      	ands	r7, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1242:	07fb      	lsls	r3, r7, #31
    1244:	d539      	bpl.n	12ba <_spi_interrupt_handler+0x96>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1246:	7962      	ldrb	r2, [r4, #5]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1248:	0013      	movs	r3, r2
		if ((module->mode == SPI_MODE_MASTER) &&
    124a:	2a01      	cmp	r2, #1
    124c:	d133      	bne.n	12b6 <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
    124e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1250:	2b00      	cmp	r3, #0
    1252:	d10d      	bne.n	1270 <_spi_interrupt_handler+0x4c>
	spi_hw->DATA.reg = dummy_write;
    1254:	4b71      	ldr	r3, [pc, #452]	; (141c <_spi_interrupt_handler+0x1f8>)
    1256:	881b      	ldrh	r3, [r3, #0]
    1258:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    125a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    125c:	3b01      	subs	r3, #1
    125e:	b29b      	uxth	r3, r3
    1260:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1262:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1264:	2b00      	cmp	r3, #0
    1266:	d100      	bne.n	126a <_spi_interrupt_handler+0x46>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1268:	752a      	strb	r2, [r5, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    126a:	7963      	ldrb	r3, [r4, #5]
		if (0
    126c:	2b01      	cmp	r3, #1
    126e:	d122      	bne.n	12b6 <_spi_interrupt_handler+0x92>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
    1270:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1272:	2b00      	cmp	r3, #0
    1274:	d021      	beq.n	12ba <_spi_interrupt_handler+0x96>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1276:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1278:	6822      	ldr	r2, [r4, #0]
	(module->tx_buffer_ptr)++;
    127a:	1c48      	adds	r0, r1, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    127c:	780b      	ldrb	r3, [r1, #0]
	(module->tx_buffer_ptr)++;
    127e:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1280:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1282:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1284:	2801      	cmp	r0, #1
    1286:	d100      	bne.n	128a <_spi_interrupt_handler+0x66>
    1288:	e074      	b.n	1374 <_spi_interrupt_handler+0x150>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    128a:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    128c:	05db      	lsls	r3, r3, #23
    128e:	0ddb      	lsrs	r3, r3, #23
    1290:	6293      	str	r3, [r2, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    1292:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1294:	3b01      	subs	r3, #1
    1296:	b29b      	uxth	r3, r3
    1298:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    129a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    129c:	2b00      	cmp	r3, #0
    129e:	d10c      	bne.n	12ba <_spi_interrupt_handler+0x96>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    12a0:	3301      	adds	r3, #1
    12a2:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    12a4:	7a63      	ldrb	r3, [r4, #9]
    12a6:	2b01      	cmp	r3, #1
    12a8:	d107      	bne.n	12ba <_spi_interrupt_handler+0x96>
    12aa:	79e3      	ldrb	r3, [r4, #7]
    12ac:	2b00      	cmp	r3, #0
    12ae:	d104      	bne.n	12ba <_spi_interrupt_handler+0x96>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    12b0:	3302      	adds	r3, #2
    12b2:	75ab      	strb	r3, [r5, #22]
    12b4:	e001      	b.n	12ba <_spi_interrupt_handler+0x96>
		|| ((module->mode == SPI_MODE_SLAVE) &&
    12b6:	2b00      	cmp	r3, #0
    12b8:	d0da      	beq.n	1270 <_spi_interrupt_handler+0x4c>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    12ba:	2104      	movs	r1, #4
    12bc:	420f      	tst	r7, r1
    12be:	d015      	beq.n	12ec <_spi_interrupt_handler+0xc8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    12c0:	8b6b      	ldrh	r3, [r5, #26]
    12c2:	420b      	tst	r3, r1
    12c4:	d05c      	beq.n	1380 <_spi_interrupt_handler+0x15c>
			if (module->dir != SPI_DIRECTION_WRITE) {
    12c6:	7a63      	ldrb	r3, [r4, #9]
    12c8:	2b01      	cmp	r3, #1
    12ca:	d00c      	beq.n	12e6 <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    12cc:	0023      	movs	r3, r4
    12ce:	221e      	movs	r2, #30
    12d0:	3338      	adds	r3, #56	; 0x38
    12d2:	701a      	strb	r2, [r3, #0]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    12d4:	2303      	movs	r3, #3
    12d6:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    12d8:	3302      	adds	r3, #2
    12da:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    12dc:	0733      	lsls	r3, r6, #28
    12de:	d502      	bpl.n	12e6 <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    12e0:	0020      	movs	r0, r4
    12e2:	69a3      	ldr	r3, [r4, #24]
    12e4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    12e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    12e8:	2304      	movs	r3, #4
    12ea:	836b      	strh	r3, [r5, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    12ec:	2202      	movs	r2, #2
    12ee:	4217      	tst	r7, r2
    12f0:	d027      	beq.n	1342 <_spi_interrupt_handler+0x11e>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    12f2:	7963      	ldrb	r3, [r4, #5]
    12f4:	2b00      	cmp	r3, #0
    12f6:	d10e      	bne.n	1316 <_spi_interrupt_handler+0xf2>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    12f8:	2107      	movs	r1, #7
    12fa:	7529      	strb	r1, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    12fc:	762a      	strb	r2, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    12fe:	3201      	adds	r2, #1
    1300:	7262      	strb	r2, [r4, #9]
			module->remaining_tx_buffer_length = 0;
			module->remaining_rx_buffer_length = 0;
			module->status = STATUS_OK;
    1302:	0022      	movs	r2, r4
    1304:	3238      	adds	r2, #56	; 0x38
			module->remaining_tx_buffer_length = 0;
    1306:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1308:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    130a:	7013      	strb	r3, [r2, #0]

			if (callback_mask &
    130c:	06f3      	lsls	r3, r6, #27
    130e:	d502      	bpl.n	1316 <_spi_interrupt_handler+0xf2>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1310:	0020      	movs	r0, r4
    1312:	69e3      	ldr	r3, [r4, #28]
    1314:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1316:	7963      	ldrb	r3, [r4, #5]
    1318:	2b01      	cmp	r3, #1
    131a:	d112      	bne.n	1342 <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    131c:	7a63      	ldrb	r3, [r4, #9]
    131e:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    1320:	2b01      	cmp	r3, #1
    1322:	d10e      	bne.n	1342 <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1324:	79e2      	ldrb	r2, [r4, #7]
    1326:	2a00      	cmp	r2, #0
    1328:	d10b      	bne.n	1342 <_spi_interrupt_handler+0x11e>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    132a:	2102      	movs	r1, #2
    132c:	7529      	strb	r1, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    132e:	3101      	adds	r1, #1
    1330:	7261      	strb	r1, [r4, #9]
			module->status = STATUS_OK;
    1332:	0021      	movs	r1, r4
    1334:	3138      	adds	r1, #56	; 0x38
    1336:	700a      	strb	r2, [r1, #0]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1338:	421e      	tst	r6, r3
    133a:	d002      	beq.n	1342 <_spi_interrupt_handler+0x11e>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    133c:	0020      	movs	r0, r4
    133e:	68e3      	ldr	r3, [r4, #12]
    1340:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1342:	2308      	movs	r3, #8
    1344:	421f      	tst	r7, r3
    1346:	d009      	beq.n	135c <_spi_interrupt_handler+0x138>
			if (module->mode == SPI_MODE_SLAVE) {
    1348:	7962      	ldrb	r2, [r4, #5]
    134a:	2a00      	cmp	r2, #0
    134c:	d106      	bne.n	135c <_spi_interrupt_handler+0x138>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    134e:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1350:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1352:	06b3      	lsls	r3, r6, #26
    1354:	d502      	bpl.n	135c <_spi_interrupt_handler+0x138>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1356:	0020      	movs	r0, r4
    1358:	6a23      	ldr	r3, [r4, #32]
    135a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    135c:	b27f      	sxtb	r7, r7
    135e:	2f00      	cmp	r7, #0
    1360:	da07      	bge.n	1372 <_spi_interrupt_handler+0x14e>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1362:	2380      	movs	r3, #128	; 0x80
    1364:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1366:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1368:	0673      	lsls	r3, r6, #25
    136a:	d502      	bpl.n	1372 <_spi_interrupt_handler+0x14e>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    136c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    136e:	0020      	movs	r0, r4
    1370:	4798      	blx	r3
		}
	}
#  endif
}
    1372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1374:	7848      	ldrb	r0, [r1, #1]
		(module->tx_buffer_ptr)++;
    1376:	3102      	adds	r1, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1378:	0200      	lsls	r0, r0, #8
    137a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    137c:	62e1      	str	r1, [r4, #44]	; 0x2c
    137e:	e785      	b.n	128c <_spi_interrupt_handler+0x68>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1380:	7a62      	ldrb	r2, [r4, #9]
    1382:	6823      	ldr	r3, [r4, #0]
    1384:	b2d2      	uxtb	r2, r2
	flush = spi_hw->DATA.reg;
    1386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			if (module->dir == SPI_DIRECTION_WRITE) {
    1388:	2a01      	cmp	r2, #1
    138a:	d113      	bne.n	13b4 <_spi_interrupt_handler+0x190>
	module->remaining_dummy_buffer_length--;
    138c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    138e:	3b01      	subs	r3, #1
    1390:	b29b      	uxth	r3, r3
    1392:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1394:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1396:	b29b      	uxth	r3, r3
    1398:	2b00      	cmp	r3, #0
    139a:	d1a7      	bne.n	12ec <_spi_interrupt_handler+0xc8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    139c:	7529      	strb	r1, [r5, #20]
					module->status = STATUS_OK;
    139e:	0021      	movs	r1, r4
    13a0:	3138      	adds	r1, #56	; 0x38
    13a2:	700b      	strb	r3, [r1, #0]
					module->dir = SPI_DIRECTION_IDLE;
    13a4:	3303      	adds	r3, #3
    13a6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    13a8:	4216      	tst	r6, r2
    13aa:	d09f      	beq.n	12ec <_spi_interrupt_handler+0xc8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    13ac:	0020      	movs	r0, r4
    13ae:	68e3      	ldr	r3, [r4, #12]
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    13b0:	4798      	blx	r3
    13b2:	e79b      	b.n	12ec <_spi_interrupt_handler+0xc8>
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    13b4:	05db      	lsls	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    13b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    13b8:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    13ba:	b2da      	uxtb	r2, r3
    13bc:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    13be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    13c0:	1c51      	adds	r1, r2, #1
    13c2:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13c4:	79a1      	ldrb	r1, [r4, #6]
    13c6:	2901      	cmp	r1, #1
    13c8:	d104      	bne.n	13d4 <_spi_interrupt_handler+0x1b0>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    13ca:	0a1b      	lsrs	r3, r3, #8
    13cc:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    13ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    13d0:	3301      	adds	r3, #1
    13d2:	62a3      	str	r3, [r4, #40]	; 0x28
	module->remaining_rx_buffer_length--;
    13d4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13d6:	3b01      	subs	r3, #1
    13d8:	b29b      	uxth	r3, r3
    13da:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    13dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13de:	b29b      	uxth	r3, r3
    13e0:	2b00      	cmp	r3, #0
    13e2:	d000      	beq.n	13e6 <_spi_interrupt_handler+0x1c2>
    13e4:	e782      	b.n	12ec <_spi_interrupt_handler+0xc8>
					module->status = STATUS_OK;
    13e6:	0022      	movs	r2, r4
    13e8:	3238      	adds	r2, #56	; 0x38
    13ea:	7013      	strb	r3, [r2, #0]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    13ec:	3304      	adds	r3, #4
    13ee:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    13f0:	7a62      	ldrb	r2, [r4, #9]
    13f2:	2a02      	cmp	r2, #2
    13f4:	d105      	bne.n	1402 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    13f6:	421e      	tst	r6, r3
    13f8:	d100      	bne.n	13fc <_spi_interrupt_handler+0x1d8>
    13fa:	e777      	b.n	12ec <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    13fc:	0020      	movs	r0, r4
    13fe:	6963      	ldr	r3, [r4, #20]
    1400:	e7d6      	b.n	13b0 <_spi_interrupt_handler+0x18c>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1402:	7a63      	ldrb	r3, [r4, #9]
    1404:	2b00      	cmp	r3, #0
    1406:	d000      	beq.n	140a <_spi_interrupt_handler+0x1e6>
    1408:	e770      	b.n	12ec <_spi_interrupt_handler+0xc8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    140a:	07b3      	lsls	r3, r6, #30
    140c:	d400      	bmi.n	1410 <_spi_interrupt_handler+0x1ec>
    140e:	e76d      	b.n	12ec <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1410:	0020      	movs	r0, r4
    1412:	6923      	ldr	r3, [r4, #16]
    1414:	e7cc      	b.n	13b0 <_spi_interrupt_handler+0x18c>
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	2000042c 	.word	0x2000042c
    141c:	20000428 	.word	0x20000428

00001420 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1420:	4770      	bx	lr
	...

00001424 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1424:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1426:	4c09      	ldr	r4, [pc, #36]	; (144c <_sercom_set_handler+0x28>)
    1428:	4a09      	ldr	r2, [pc, #36]	; (1450 <_sercom_set_handler+0x2c>)
    142a:	7823      	ldrb	r3, [r4, #0]
    142c:	2b00      	cmp	r3, #0
    142e:	d109      	bne.n	1444 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    1430:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1432:	4f08      	ldr	r7, [pc, #32]	; (1454 <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    1434:	4d08      	ldr	r5, [pc, #32]	; (1458 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1436:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
    1438:	50ee      	str	r6, [r5, r3]
    143a:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    143c:	2b18      	cmp	r3, #24
    143e:	d1fa      	bne.n	1436 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1440:	3b17      	subs	r3, #23
    1442:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1444:	0080      	lsls	r0, r0, #2
    1446:	5011      	str	r1, [r2, r0]
}
    1448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	2000013a 	.word	0x2000013a
    1450:	2000013c 	.word	0x2000013c
    1454:	00001421 	.word	0x00001421
    1458:	2000042c 	.word	0x2000042c

0000145c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    145c:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    145e:	2309      	movs	r3, #9
    1460:	466a      	mov	r2, sp
    1462:	7013      	strb	r3, [r2, #0]
    1464:	3301      	adds	r3, #1
    1466:	7053      	strb	r3, [r2, #1]
    1468:	3301      	adds	r3, #1
    146a:	7093      	strb	r3, [r2, #2]
    146c:	3301      	adds	r3, #1
    146e:	70d3      	strb	r3, [r2, #3]
    1470:	3301      	adds	r3, #1
    1472:	7113      	strb	r3, [r2, #4]
    1474:	3301      	adds	r3, #1
    1476:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1478:	4b02      	ldr	r3, [pc, #8]	; (1484 <_sercom_get_interrupt_vector+0x28>)
    147a:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    147c:	466b      	mov	r3, sp
    147e:	5618      	ldrsb	r0, [r3, r0]
}
    1480:	bd0e      	pop	{r1, r2, r3, pc}
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	000007c1 	.word	0x000007c1

00001488 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1488:	b510      	push	{r4, lr}
    148a:	4b02      	ldr	r3, [pc, #8]	; (1494 <SERCOM0_Handler+0xc>)
    148c:	2000      	movs	r0, #0
    148e:	681b      	ldr	r3, [r3, #0]
    1490:	4798      	blx	r3
    1492:	bd10      	pop	{r4, pc}
    1494:	2000013c 	.word	0x2000013c

00001498 <SERCOM1_Handler>:
    1498:	b510      	push	{r4, lr}
    149a:	4b02      	ldr	r3, [pc, #8]	; (14a4 <SERCOM1_Handler+0xc>)
    149c:	2001      	movs	r0, #1
    149e:	685b      	ldr	r3, [r3, #4]
    14a0:	4798      	blx	r3
    14a2:	bd10      	pop	{r4, pc}
    14a4:	2000013c 	.word	0x2000013c

000014a8 <SERCOM2_Handler>:
    14a8:	b510      	push	{r4, lr}
    14aa:	4b02      	ldr	r3, [pc, #8]	; (14b4 <SERCOM2_Handler+0xc>)
    14ac:	2002      	movs	r0, #2
    14ae:	689b      	ldr	r3, [r3, #8]
    14b0:	4798      	blx	r3
    14b2:	bd10      	pop	{r4, pc}
    14b4:	2000013c 	.word	0x2000013c

000014b8 <SERCOM3_Handler>:
    14b8:	b510      	push	{r4, lr}
    14ba:	4b02      	ldr	r3, [pc, #8]	; (14c4 <SERCOM3_Handler+0xc>)
    14bc:	2003      	movs	r0, #3
    14be:	68db      	ldr	r3, [r3, #12]
    14c0:	4798      	blx	r3
    14c2:	bd10      	pop	{r4, pc}
    14c4:	2000013c 	.word	0x2000013c

000014c8 <SERCOM4_Handler>:
    14c8:	b510      	push	{r4, lr}
    14ca:	4b02      	ldr	r3, [pc, #8]	; (14d4 <SERCOM4_Handler+0xc>)
    14cc:	2004      	movs	r0, #4
    14ce:	691b      	ldr	r3, [r3, #16]
    14d0:	4798      	blx	r3
    14d2:	bd10      	pop	{r4, pc}
    14d4:	2000013c 	.word	0x2000013c

000014d8 <SERCOM5_Handler>:
    14d8:	b510      	push	{r4, lr}
    14da:	4b02      	ldr	r3, [pc, #8]	; (14e4 <SERCOM5_Handler+0xc>)
    14dc:	2005      	movs	r0, #5
    14de:	695b      	ldr	r3, [r3, #20]
    14e0:	4798      	blx	r3
    14e2:	bd10      	pop	{r4, pc}
    14e4:	2000013c 	.word	0x2000013c

000014e8 <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    14e8:	2300      	movs	r3, #0
{
    14ea:	b570      	push	{r4, r5, r6, lr}
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    14ec:	2501      	movs	r5, #1
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    14ee:	4c0b      	ldr	r4, [pc, #44]	; (151c <EIC_Handler+0x34>)
    14f0:	7023      	strb	r3, [r4, #0]
    14f2:	7823      	ldrb	r3, [r4, #0]
    14f4:	2b0f      	cmp	r3, #15
    14f6:	d900      	bls.n	14fa <EIC_Handler+0x12>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    14f8:	bd70      	pop	{r4, r5, r6, pc}
    14fa:	0029      	movs	r1, r5
    14fc:	4099      	lsls	r1, r3

	return (eic_module->INTFLAG.reg & eic_mask);
    14fe:	4a08      	ldr	r2, [pc, #32]	; (1520 <EIC_Handler+0x38>)
    1500:	6910      	ldr	r0, [r2, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1502:	4208      	tst	r0, r1
    1504:	d006      	beq.n	1514 <EIC_Handler+0x2c>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1506:	6111      	str	r1, [r2, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1508:	4a06      	ldr	r2, [pc, #24]	; (1524 <EIC_Handler+0x3c>)
    150a:	009b      	lsls	r3, r3, #2
    150c:	589b      	ldr	r3, [r3, r2]
    150e:	2b00      	cmp	r3, #0
    1510:	d000      	beq.n	1514 <EIC_Handler+0x2c>
				_extint_dev.callbacks[_current_channel]();
    1512:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1514:	7823      	ldrb	r3, [r4, #0]
    1516:	3301      	adds	r3, #1
    1518:	7023      	strb	r3, [r4, #0]
    151a:	e7ea      	b.n	14f2 <EIC_Handler+0xa>
    151c:	20000444 	.word	0x20000444
    1520:	40001800 	.word	0x40001800
    1524:	200002e4 	.word	0x200002e4

00001528 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    1528:	4770      	bx	lr
	...

0000152c <nvm_is_ready>:
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    152c:	4b02      	ldr	r3, [pc, #8]	; (1538 <nvm_is_ready+0xc>)
    152e:	7d18      	ldrb	r0, [r3, #20]
    1530:	2301      	movs	r3, #1
    1532:	4018      	ands	r0, r3
}
    1534:	4770      	bx	lr
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	41004000 	.word	0x41004000

0000153c <nvm_set_config>:
			PM->APBBMASK.reg |= mask;
    153c:	2304      	movs	r3, #4
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    153e:	b570      	push	{r4, r5, r6, lr}
    1540:	4a1c      	ldr	r2, [pc, #112]	; (15b4 <nvm_set_config+0x78>)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1542:	4d1d      	ldr	r5, [pc, #116]	; (15b8 <nvm_set_config+0x7c>)
    1544:	69d1      	ldr	r1, [r2, #28]
{
    1546:	0004      	movs	r4, r0
    1548:	430b      	orrs	r3, r1
    154a:	61d3      	str	r3, [r2, #28]
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    154c:	2320      	movs	r3, #32
    154e:	33ff      	adds	r3, #255	; 0xff
    1550:	832b      	strh	r3, [r5, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1552:	4b1a      	ldr	r3, [pc, #104]	; (15bc <nvm_set_config+0x80>)
    1554:	4798      	blx	r3
    1556:	0003      	movs	r3, r0
		return STATUS_BUSY;
    1558:	2005      	movs	r0, #5
	if (!nvm_is_ready()) {
    155a:	2b00      	cmp	r3, #0
    155c:	d028      	beq.n	15b0 <nvm_set_config+0x74>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    155e:	22c0      	movs	r2, #192	; 0xc0
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1560:	211e      	movs	r1, #30
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1562:	7823      	ldrb	r3, [r4, #0]
    1564:	0092      	lsls	r2, r2, #2
    1566:	021b      	lsls	r3, r3, #8
    1568:	4013      	ands	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    156a:	78a2      	ldrb	r2, [r4, #2]
    156c:	0052      	lsls	r2, r2, #1
    156e:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1570:	2180      	movs	r1, #128	; 0x80
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1572:	4313      	orrs	r3, r2
    1574:	7862      	ldrb	r2, [r4, #1]
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1576:	02c9      	lsls	r1, r1, #11
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1578:	01d2      	lsls	r2, r2, #7
    157a:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    157c:	78e2      	ldrb	r2, [r4, #3]
    157e:	0492      	lsls	r2, r2, #18
    1580:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1582:	21c0      	movs	r1, #192	; 0xc0
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1584:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1586:	7922      	ldrb	r2, [r4, #4]
    1588:	0289      	lsls	r1, r1, #10
    158a:	0412      	lsls	r2, r2, #16
    158c:	400a      	ands	r2, r1
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    158e:	2108      	movs	r1, #8
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1590:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    1592:	606b      	str	r3, [r5, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    1594:	68ab      	ldr	r3, [r5, #8]
    1596:	4a0a      	ldr	r2, [pc, #40]	; (15c0 <nvm_set_config+0x84>)
    1598:	035b      	lsls	r3, r3, #13
    159a:	0f5b      	lsrs	r3, r3, #29
    159c:	4099      	lsls	r1, r3
    159e:	8011      	strh	r1, [r2, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    15a0:	68ab      	ldr	r3, [r5, #8]
    15a2:	8053      	strh	r3, [r2, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    15a4:	7863      	ldrb	r3, [r4, #1]
    15a6:	7113      	strb	r3, [r2, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    15a8:	8b28      	ldrh	r0, [r5, #24]
    15aa:	05c0      	lsls	r0, r0, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
    15ac:	0fc0      	lsrs	r0, r0, #31
    15ae:	0100      	lsls	r0, r0, #4
}
    15b0:	bd70      	pop	{r4, r5, r6, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	40000400 	.word	0x40000400
    15b8:	41004000 	.word	0x41004000
    15bc:	0000152d 	.word	0x0000152d
    15c0:	20000154 	.word	0x20000154

000015c4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    15c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    15c6:	4a24      	ldr	r2, [pc, #144]	; (1658 <nvm_execute_command+0x94>)
{
    15c8:	9101      	str	r1, [sp, #4]
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    15ca:	8853      	ldrh	r3, [r2, #2]
    15cc:	8811      	ldrh	r1, [r2, #0]
    15ce:	9a01      	ldr	r2, [sp, #4]
    15d0:	434b      	muls	r3, r1
{
    15d2:	0004      	movs	r4, r0
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    15d4:	4293      	cmp	r3, r2
    15d6:	d207      	bcs.n	15e8 <nvm_execute_command+0x24>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    15d8:	2280      	movs	r2, #128	; 0x80
    15da:	9b01      	ldr	r3, [sp, #4]
    15dc:	491f      	ldr	r1, [pc, #124]	; (165c <nvm_execute_command+0x98>)
    15de:	0192      	lsls	r2, r2, #6
    15e0:	185b      	adds	r3, r3, r1
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    15e2:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    15e4:	4293      	cmp	r3, r2
    15e6:	d80f      	bhi.n	1608 <nvm_execute_command+0x44>
	ctrlb_bak = nvm_module->CTRLB.reg;
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    15e8:	2380      	movs	r3, #128	; 0x80
	ctrlb_bak = nvm_module->CTRLB.reg;
    15ea:	4d1d      	ldr	r5, [pc, #116]	; (1660 <nvm_execute_command+0x9c>)
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    15ec:	02db      	lsls	r3, r3, #11
	ctrlb_bak = nvm_module->CTRLB.reg;
    15ee:	686f      	ldr	r7, [r5, #4]
    15f0:	002e      	movs	r6, r5
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    15f2:	433b      	orrs	r3, r7
    15f4:	606b      	str	r3, [r5, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    15f6:	2320      	movs	r3, #32
    15f8:	33ff      	adds	r3, #255	; 0xff
    15fa:	832b      	strh	r3, [r5, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    15fc:	4b19      	ldr	r3, [pc, #100]	; (1664 <nvm_execute_command+0xa0>)
    15fe:	4798      	blx	r3
    1600:	2800      	cmp	r0, #0
    1602:	d102      	bne.n	160a <nvm_execute_command+0x46>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    1604:	606f      	str	r7, [r5, #4]
		return STATUS_BUSY;
    1606:	3005      	adds	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    1608:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	switch (command) {
    160a:	2c06      	cmp	r4, #6
    160c:	d814      	bhi.n	1638 <nvm_execute_command+0x74>
    160e:	2c05      	cmp	r4, #5
    1610:	d21b      	bcs.n	164a <nvm_execute_command+0x86>
    1612:	2c02      	cmp	r4, #2
    1614:	d001      	beq.n	161a <nvm_execute_command+0x56>
    1616:	2c04      	cmp	r4, #4
    1618:	d114      	bne.n	1644 <nvm_execute_command+0x80>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    161a:	9b01      	ldr	r3, [sp, #4]
    161c:	089b      	lsrs	r3, r3, #2
    161e:	005b      	lsls	r3, r3, #1
    1620:	61f3      	str	r3, [r6, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    1622:	23a5      	movs	r3, #165	; 0xa5
    1624:	021b      	lsls	r3, r3, #8
    1626:	431c      	orrs	r4, r3
    1628:	8034      	strh	r4, [r6, #0]
	while (!nvm_is_ready()) {
    162a:	4b0e      	ldr	r3, [pc, #56]	; (1664 <nvm_execute_command+0xa0>)
    162c:	4798      	blx	r3
    162e:	2800      	cmp	r0, #0
    1630:	d0fb      	beq.n	162a <nvm_execute_command+0x66>
	nvm_module->CTRLB.reg = ctrlb_bak;
    1632:	6077      	str	r7, [r6, #4]
	return STATUS_OK;
    1634:	2000      	movs	r0, #0
    1636:	e7e7      	b.n	1608 <nvm_execute_command+0x44>
	switch (command) {
    1638:	2c40      	cmp	r4, #64	; 0x40
    163a:	d303      	bcc.n	1644 <nvm_execute_command+0x80>
    163c:	2c41      	cmp	r4, #65	; 0x41
    163e:	d9ec      	bls.n	161a <nvm_execute_command+0x56>
    1640:	2c45      	cmp	r4, #69	; 0x45
    1642:	d9ee      	bls.n	1622 <nvm_execute_command+0x5e>
			nvm_module->CTRLB.reg = ctrlb_bak;
    1644:	6077      	str	r7, [r6, #4]
			return STATUS_ERR_INVALID_ARG;
    1646:	2017      	movs	r0, #23
    1648:	e7de      	b.n	1608 <nvm_execute_command+0x44>
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    164a:	8b2b      	ldrh	r3, [r5, #24]
    164c:	05db      	lsls	r3, r3, #23
    164e:	d5e4      	bpl.n	161a <nvm_execute_command+0x56>
				nvm_module->CTRLB.reg = ctrlb_bak;
    1650:	606f      	str	r7, [r5, #4]
				return STATUS_ERR_IO;
    1652:	2010      	movs	r0, #16
    1654:	e7d8      	b.n	1608 <nvm_execute_command+0x44>
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	20000154 	.word	0x20000154
    165c:	ff7fc000 	.word	0xff7fc000
    1660:	41004000 	.word	0x41004000
    1664:	0000152d 	.word	0x0000152d

00001668 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    1668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    166a:	4e21      	ldr	r6, [pc, #132]	; (16f0 <nvm_write_buffer+0x88>)
{
    166c:	9100      	str	r1, [sp, #0]
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    166e:	8833      	ldrh	r3, [r6, #0]
    1670:	8871      	ldrh	r1, [r6, #2]
{
    1672:	0015      	movs	r5, r2
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1674:	4359      	muls	r1, r3
{
    1676:	0004      	movs	r4, r0
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    1678:	2218      	movs	r2, #24
	if (destination_address >
    167a:	4281      	cmp	r1, r0
    167c:	d326      	bcc.n	16cc <nvm_write_buffer+0x64>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    167e:	1e59      	subs	r1, r3, #1
    1680:	4208      	tst	r0, r1
    1682:	d123      	bne.n	16cc <nvm_write_buffer+0x64>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    1684:	3a01      	subs	r2, #1
	if (length > _nvm_dev.page_size) {
    1686:	42ab      	cmp	r3, r5
    1688:	d320      	bcc.n	16cc <nvm_write_buffer+0x64>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    168a:	4f1a      	ldr	r7, [pc, #104]	; (16f4 <nvm_write_buffer+0x8c>)
    168c:	47b8      	blx	r7
		return STATUS_BUSY;
    168e:	2205      	movs	r2, #5
	if (!nvm_is_ready()) {
    1690:	2800      	cmp	r0, #0
    1692:	d01b      	beq.n	16cc <nvm_write_buffer+0x64>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    1694:	4b18      	ldr	r3, [pc, #96]	; (16f8 <nvm_write_buffer+0x90>)
    1696:	4a19      	ldr	r2, [pc, #100]	; (16fc <nvm_write_buffer+0x94>)
    1698:	801a      	strh	r2, [r3, #0]
    169a:	9301      	str	r3, [sp, #4]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    169c:	47b8      	blx	r7
    169e:	2800      	cmp	r0, #0
    16a0:	d0fc      	beq.n	169c <nvm_write_buffer+0x34>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    16a2:	2320      	movs	r3, #32
    16a4:	9a01      	ldr	r2, [sp, #4]
    16a6:	33ff      	adds	r3, #255	; 0xff
    16a8:	8313      	strh	r3, [r2, #24]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    16aa:	2300      	movs	r3, #0
	uint32_t nvm_address = destination_address / 2;
    16ac:	0862      	lsrs	r2, r4, #1
    16ae:	0052      	lsls	r2, r2, #1
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    16b0:	1e68      	subs	r0, r5, #1
	for (uint16_t i = 0; i < length; i += 2) {
    16b2:	429d      	cmp	r5, r3
    16b4:	d80c      	bhi.n	16d0 <nvm_write_buffer+0x68>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    16b6:	2200      	movs	r2, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    16b8:	7933      	ldrb	r3, [r6, #4]
    16ba:	4293      	cmp	r3, r2
    16bc:	d106      	bne.n	16cc <nvm_write_buffer+0x64>
    16be:	2d3f      	cmp	r5, #63	; 0x3f
    16c0:	d804      	bhi.n	16cc <nvm_write_buffer+0x64>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    16c2:	0021      	movs	r1, r4
    16c4:	2004      	movs	r0, #4
    16c6:	4b0e      	ldr	r3, [pc, #56]	; (1700 <nvm_write_buffer+0x98>)
    16c8:	4798      	blx	r3
    16ca:	0002      	movs	r2, r0
}
    16cc:	0010      	movs	r0, r2
    16ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		data = buffer[i];
    16d0:	9900      	ldr	r1, [sp, #0]
    16d2:	5cc9      	ldrb	r1, [r1, r3]
		if (i < (length - 1)) {
    16d4:	4283      	cmp	r3, r0
    16d6:	db05      	blt.n	16e4 <nvm_write_buffer+0x7c>
		data = buffer[i];
    16d8:	b289      	uxth	r1, r1
	for (uint16_t i = 0; i < length; i += 2) {
    16da:	3302      	adds	r3, #2
		NVM_MEMORY[nvm_address++] = data;
    16dc:	8011      	strh	r1, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    16de:	b29b      	uxth	r3, r3
    16e0:	3202      	adds	r2, #2
    16e2:	e7e6      	b.n	16b2 <nvm_write_buffer+0x4a>
			data |= (buffer[i + 1] << 8);
    16e4:	9f00      	ldr	r7, [sp, #0]
    16e6:	18ff      	adds	r7, r7, r3
    16e8:	787f      	ldrb	r7, [r7, #1]
    16ea:	023f      	lsls	r7, r7, #8
    16ec:	4339      	orrs	r1, r7
    16ee:	e7f4      	b.n	16da <nvm_write_buffer+0x72>
    16f0:	20000154 	.word	0x20000154
    16f4:	0000152d 	.word	0x0000152d
    16f8:	41004000 	.word	0x41004000
    16fc:	ffffa544 	.word	0xffffa544
    1700:	000015c5 	.word	0x000015c5

00001704 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    1704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1706:	4b16      	ldr	r3, [pc, #88]	; (1760 <nvm_read_buffer+0x5c>)
{
    1708:	000f      	movs	r7, r1
    170a:	0016      	movs	r6, r2
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    170c:	8859      	ldrh	r1, [r3, #2]
    170e:	881a      	ldrh	r2, [r3, #0]
{
    1710:	0005      	movs	r5, r0
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1712:	4351      	muls	r1, r2
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    1714:	2318      	movs	r3, #24
	if (source_address >
    1716:	4281      	cmp	r1, r0
    1718:	d314      	bcc.n	1744 <nvm_read_buffer+0x40>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    171a:	1e54      	subs	r4, r2, #1
    171c:	4004      	ands	r4, r0
    171e:	d111      	bne.n	1744 <nvm_read_buffer+0x40>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    1720:	3b01      	subs	r3, #1
	if (length > _nvm_dev.page_size) {
    1722:	42b2      	cmp	r2, r6
    1724:	d30e      	bcc.n	1744 <nvm_read_buffer+0x40>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1726:	4b0f      	ldr	r3, [pc, #60]	; (1764 <nvm_read_buffer+0x60>)
    1728:	4798      	blx	r3
		return STATUS_BUSY;
    172a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    172c:	2800      	cmp	r0, #0
    172e:	d009      	beq.n	1744 <nvm_read_buffer+0x40>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1730:	2220      	movs	r2, #32
    1732:	4b0d      	ldr	r3, [pc, #52]	; (1768 <nvm_read_buffer+0x64>)
    1734:	32ff      	adds	r2, #255	; 0xff

	uint32_t page_address = source_address / 2;
    1736:	086d      	lsrs	r5, r5, #1
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1738:	831a      	strh	r2, [r3, #24]
    173a:	006d      	lsls	r5, r5, #1
		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    173c:	1e71      	subs	r1, r6, #1
	for (uint16_t i = 0; i < length; i += 2) {
    173e:	42a6      	cmp	r6, r4
    1740:	d802      	bhi.n	1748 <nvm_read_buffer+0x44>
    1742:	2300      	movs	r3, #0
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    1744:	0018      	movs	r0, r3
    1746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint16_t data = NVM_MEMORY[page_address++];
    1748:	882b      	ldrh	r3, [r5, #0]
    174a:	b29b      	uxth	r3, r3
		buffer[i] = (data & 0xFF);
    174c:	553b      	strb	r3, [r7, r4]
		if (i < (length - 1)) {
    174e:	428c      	cmp	r4, r1
    1750:	da02      	bge.n	1758 <nvm_read_buffer+0x54>
			buffer[i + 1] = (data >> 8);
    1752:	193a      	adds	r2, r7, r4
    1754:	0a1b      	lsrs	r3, r3, #8
    1756:	7053      	strb	r3, [r2, #1]
	for (uint16_t i = 0; i < length; i += 2) {
    1758:	3402      	adds	r4, #2
    175a:	b2a4      	uxth	r4, r4
    175c:	3502      	adds	r5, #2
    175e:	e7ee      	b.n	173e <nvm_read_buffer+0x3a>
    1760:	20000154 	.word	0x20000154
    1764:	0000152d 	.word	0x0000152d
    1768:	41004000 	.word	0x41004000

0000176c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    176c:	b570      	push	{r4, r5, r6, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    176e:	4a13      	ldr	r2, [pc, #76]	; (17bc <nvm_erase_row+0x50>)
{
    1770:	0004      	movs	r4, r0
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1772:	8813      	ldrh	r3, [r2, #0]
    1774:	8852      	ldrh	r2, [r2, #2]
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    1776:	2018      	movs	r0, #24
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1778:	435a      	muls	r2, r3
	if (row_address >
    177a:	42a2      	cmp	r2, r4
    177c:	d31c      	bcc.n	17b8 <nvm_erase_row+0x4c>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    177e:	009b      	lsls	r3, r3, #2
    1780:	3b01      	subs	r3, #1
    1782:	421c      	tst	r4, r3
    1784:	d118      	bne.n	17b8 <nvm_erase_row+0x4c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1786:	4d0e      	ldr	r5, [pc, #56]	; (17c0 <nvm_erase_row+0x54>)
    1788:	47a8      	blx	r5
    178a:	0003      	movs	r3, r0
		return STATUS_BUSY;
    178c:	2005      	movs	r0, #5
	if (!nvm_is_ready()) {
    178e:	2b00      	cmp	r3, #0
    1790:	d012      	beq.n	17b8 <nvm_erase_row+0x4c>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1792:	2220      	movs	r2, #32
    1794:	4b0b      	ldr	r3, [pc, #44]	; (17c4 <nvm_erase_row+0x58>)

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    1796:	08a4      	lsrs	r4, r4, #2
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1798:	32ff      	adds	r2, #255	; 0xff
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    179a:	0064      	lsls	r4, r4, #1
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    179c:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    179e:	61dc      	str	r4, [r3, #28]
    17a0:	001c      	movs	r4, r3
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    17a2:	4a09      	ldr	r2, [pc, #36]	; (17c8 <nvm_erase_row+0x5c>)
    17a4:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    17a6:	47a8      	blx	r5
    17a8:	2800      	cmp	r0, #0
    17aa:	d0fc      	beq.n	17a6 <nvm_erase_row+0x3a>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    17ac:	231c      	movs	r3, #28
    17ae:	8b20      	ldrh	r0, [r4, #24]
    17b0:	4018      	ands	r0, r3
		return STATUS_ABORTED;
	}

	return STATUS_OK;
    17b2:	1e43      	subs	r3, r0, #1
    17b4:	4198      	sbcs	r0, r3
    17b6:	0080      	lsls	r0, r0, #2
}
    17b8:	bd70      	pop	{r4, r5, r6, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	20000154 	.word	0x20000154
    17c0:	0000152d 	.word	0x0000152d
    17c4:	41004000 	.word	0x41004000
    17c8:	ffffa502 	.word	0xffffa502

000017cc <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    17cc:	2220      	movs	r2, #32
{
    17ce:	b510      	push	{r4, lr}
	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    17d0:	2407      	movs	r4, #7
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    17d2:	4b12      	ldr	r3, [pc, #72]	; (181c <nvm_get_parameters+0x50>)
    17d4:	32ff      	adds	r2, #255	; 0xff
    17d6:	831a      	strh	r2, [r3, #24]
	uint32_t param_reg = nvm_module->PARAM.reg;
    17d8:	689b      	ldr	r3, [r3, #8]
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    17da:	3a18      	subs	r2, #24
    17dc:	0c19      	lsrs	r1, r3, #16
    17de:	4021      	ands	r1, r4
    17e0:	3aff      	subs	r2, #255	; 0xff
    17e2:	408a      	lsls	r2, r1
	parameters->page_size =
    17e4:	7002      	strb	r2, [r0, #0]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    17e6:	4a0e      	ldr	r2, [pc, #56]	; (1820 <nvm_get_parameters+0x54>)
	parameters->nvm_number_of_pages =
    17e8:	8043      	strh	r3, [r0, #2]
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    17ea:	8813      	ldrh	r3, [r2, #0]
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    17ec:	091b      	lsrs	r3, r3, #4
	uint16_t eeprom_fuse_value =
    17ee:	4023      	ands	r3, r4

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    17f0:	42a3      	cmp	r3, r4
    17f2:	d109      	bne.n	1808 <nvm_get_parameters+0x3c>
		parameters->eeprom_number_of_pages = 0;
    17f4:	2300      	movs	r3, #0
	}
	else {
		parameters->eeprom_number_of_pages =
    17f6:	6043      	str	r3, [r0, #4]
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
    17f8:	2307      	movs	r3, #7
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    17fa:	8812      	ldrh	r2, [r2, #0]
	uint16_t boot_fuse_value =
    17fc:	401a      	ands	r2, r3
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    17fe:	429a      	cmp	r2, r3
    1800:	d107      	bne.n	1812 <nvm_get_parameters+0x46>
		parameters->bootloader_number_of_pages = 0;
    1802:	2300      	movs	r3, #0
    1804:	6083      	str	r3, [r0, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    1806:	bd10      	pop	{r4, pc}
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    1808:	2106      	movs	r1, #6
    180a:	1ac9      	subs	r1, r1, r3
    180c:	2304      	movs	r3, #4
    180e:	408b      	lsls	r3, r1
    1810:	e7f1      	b.n	17f6 <nvm_get_parameters+0x2a>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    1812:	1a9b      	subs	r3, r3, r2
    1814:	2204      	movs	r2, #4
    1816:	409a      	lsls	r2, r3
		parameters->bootloader_number_of_pages =
    1818:	6082      	str	r2, [r0, #8]
}
    181a:	e7f4      	b.n	1806 <nvm_get_parameters+0x3a>
    181c:	41004000 	.word	0x41004000
    1820:	00804000 	.word	0x00804000

00001824 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1824:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1826:	2280      	movs	r2, #128	; 0x80
    1828:	ab01      	add	r3, sp, #4
    182a:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    182c:	780a      	ldrb	r2, [r1, #0]
    182e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1830:	784a      	ldrb	r2, [r1, #1]
    1832:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1834:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1836:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
    1838:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    183a:	4b01      	ldr	r3, [pc, #4]	; (1840 <port_pin_set_config+0x1c>)
    183c:	4798      	blx	r3
}
    183e:	bd07      	pop	{r0, r1, r2, pc}
    1840:	000024d5 	.word	0x000024d5

00001844 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    1844:	b510      	push	{r4, lr}
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    1846:	0204      	lsls	r4, r0, #8
    1848:	4b03      	ldr	r3, [pc, #12]	; (1858 <_eeprom_emulator_nvm_erase_row+0x14>)
    184a:	6858      	ldr	r0, [r3, #4]
		error_code = nvm_erase_row(
    184c:	4b03      	ldr	r3, [pc, #12]	; (185c <_eeprom_emulator_nvm_erase_row+0x18>)
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    184e:	1900      	adds	r0, r0, r4
		error_code = nvm_erase_row(
    1850:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    1852:	2805      	cmp	r0, #5
    1854:	d0f8      	beq.n	1848 <_eeprom_emulator_nvm_erase_row+0x4>
}
    1856:	bd10      	pop	{r4, pc}
    1858:	2000015c 	.word	0x2000015c
    185c:	0000176d 	.word	0x0000176d

00001860 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    1860:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    1862:	2500      	movs	r5, #0
{
    1864:	b085      	sub	sp, #20
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    1866:	4a38      	ldr	r2, [pc, #224]	; (1948 <_eeprom_emulator_update_page_mapping+0xe8>)
    1868:	8911      	ldrh	r1, [r2, #8]
    186a:	428d      	cmp	r5, r1
    186c:	d32b      	bcc.n	18c6 <_eeprom_emulator_update_page_mapping+0x66>
		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
				(logical_page < _eeprom_instance.logical_pages)) {
    186e:	2300      	movs	r3, #0
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    1870:	6856      	ldr	r6, [r2, #4]
				(logical_page < _eeprom_instance.logical_pages)) {
    1872:	7a95      	ldrb	r5, [r2, #10]
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    1874:	1e4f      	subs	r7, r1, #1
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    1876:	b298      	uxth	r0, r3
    1878:	4281      	cmp	r1, r0
    187a:	d855      	bhi.n	1928 <_eeprom_emulator_update_page_mapping+0xc8>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    187c:	0013      	movs	r3, r2
    187e:	203f      	movs	r0, #63	; 0x3f
    1880:	3387      	adds	r3, #135	; 0x87
    1882:	7018      	strb	r0, [r3, #0]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    1884:	2000      	movs	r0, #0

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    1886:	1e4b      	subs	r3, r1, #1
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    1888:	088f      	lsrs	r7, r1, #2
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    188a:	9302      	str	r3, [sp, #8]
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    188c:	42b8      	cmp	r0, r7
    188e:	d018      	beq.n	18c2 <_eeprom_emulator_update_page_mapping+0x62>
    1890:	0083      	lsls	r3, r0, #2
    1892:	b29b      	uxth	r3, r3
    1894:	1d1d      	adds	r5, r3, #4
    1896:	b2a9      	uxth	r1, r5
    1898:	2501      	movs	r5, #1
    189a:	1c44      	adds	r4, r0, #1
    189c:	b2a4      	uxth	r4, r4
    189e:	9101      	str	r1, [sp, #4]
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    18a0:	9902      	ldr	r1, [sp, #8]
    18a2:	428b      	cmp	r3, r1
    18a4:	d004      	beq.n	18b0 <_eeprom_emulator_update_page_mapping+0x50>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    18a6:	0199      	lsls	r1, r3, #6
    18a8:	5d89      	ldrb	r1, [r1, r6]
    18aa:	29ff      	cmp	r1, #255	; 0xff
    18ac:	d000      	beq.n	18b0 <_eeprom_emulator_update_page_mapping+0x50>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    18ae:	2500      	movs	r5, #0
    18b0:	3301      	adds	r3, #1
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    18b2:	9901      	ldr	r1, [sp, #4]
    18b4:	b29b      	uxth	r3, r3
    18b6:	428b      	cmp	r3, r1
    18b8:	d1f2      	bne.n	18a0 <_eeprom_emulator_update_page_mapping+0x40>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    18ba:	2d00      	cmp	r5, #0
    18bc:	d041      	beq.n	1942 <_eeprom_emulator_update_page_mapping+0xe2>
			_eeprom_instance.spare_row = c;
    18be:	3287      	adds	r2, #135	; 0x87
    18c0:	7010      	strb	r0, [r2, #0]
			break;
		}
	}
}
    18c2:	b005      	add	sp, #20
    18c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    18c6:	6853      	ldr	r3, [r2, #4]
    18c8:	01ae      	lsls	r6, r5, #6
    18ca:	5d9f      	ldrb	r7, [r3, r6]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    18cc:	2fff      	cmp	r7, #255	; 0xff
    18ce:	d102      	bne.n	18d6 <_eeprom_emulator_update_page_mapping+0x76>
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    18d0:	3504      	adds	r5, #4
    18d2:	b2ad      	uxth	r5, r5
    18d4:	e7c7      	b.n	1866 <_eeprom_emulator_update_page_mapping+0x6>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    18d6:	0033      	movs	r3, r6
    18d8:	3380      	adds	r3, #128	; 0x80
    18da:	9302      	str	r3, [sp, #8]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    18dc:	3b40      	subs	r3, #64	; 0x40
    18de:	9303      	str	r3, [sp, #12]
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    18e0:	08ab      	lsrs	r3, r5, #2
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    18e2:	1d2c      	adds	r4, r5, #4
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    18e4:	b2db      	uxtb	r3, r3
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    18e6:	b2a4      	uxth	r4, r4
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    18e8:	9301      	str	r3, [sp, #4]
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    18ea:	4a17      	ldr	r2, [pc, #92]	; (1948 <_eeprom_emulator_update_page_mapping+0xe8>)
    18ec:	8913      	ldrh	r3, [r2, #8]
    18ee:	429c      	cmp	r4, r3
    18f0:	d2ee      	bcs.n	18d0 <_eeprom_emulator_update_page_mapping+0x70>
			if (j == EEPROM_MASTER_PAGE_NUMBER) {
    18f2:	3b01      	subs	r3, #1
    18f4:	429c      	cmp	r4, r3
    18f6:	d014      	beq.n	1922 <_eeprom_emulator_update_page_mapping+0xc2>
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    18f8:	6853      	ldr	r3, [r2, #4]
    18fa:	01a2      	lsls	r2, r4, #6
    18fc:	5c9a      	ldrb	r2, [r3, r2]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    18fe:	2aff      	cmp	r2, #255	; 0xff
    1900:	d00f      	beq.n	1922 <_eeprom_emulator_update_page_mapping+0xc2>
			if(pre_logical_page == next_logical_page) {
    1902:	4297      	cmp	r7, r2
    1904:	d10d      	bne.n	1922 <_eeprom_emulator_update_page_mapping+0xc2>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    1906:	9a02      	ldr	r2, [sp, #8]
	if((_eeprom_instance.flash[phy_page].header.logical_page
    1908:	5d99      	ldrb	r1, [r3, r6]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    190a:	5c9a      	ldrb	r2, [r3, r2]
	if((_eeprom_instance.flash[phy_page].header.logical_page
    190c:	4291      	cmp	r1, r2
    190e:	d005      	beq.n	191c <_eeprom_emulator_update_page_mapping+0xbc>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    1910:	9903      	ldr	r1, [sp, #12]
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    1912:	08a0      	lsrs	r0, r4, #2
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    1914:	5c5b      	ldrb	r3, [r3, r1]
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    1916:	b2c0      	uxtb	r0, r0
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    1918:	4293      	cmp	r3, r2
    191a:	d100      	bne.n	191e <_eeprom_emulator_update_page_mapping+0xbe>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    191c:	9801      	ldr	r0, [sp, #4]
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    191e:	4b0b      	ldr	r3, [pc, #44]	; (194c <_eeprom_emulator_update_page_mapping+0xec>)
    1920:	4798      	blx	r3
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    1922:	3404      	adds	r4, #4
    1924:	b2a4      	uxth	r4, r4
    1926:	e7e0      	b.n	18ea <_eeprom_emulator_update_page_mapping+0x8a>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    1928:	429f      	cmp	r7, r3
    192a:	d008      	beq.n	193e <_eeprom_emulator_update_page_mapping+0xde>
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    192c:	0198      	lsls	r0, r3, #6
    192e:	5c30      	ldrb	r0, [r6, r0]
    1930:	b284      	uxth	r4, r0
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    1932:	2cff      	cmp	r4, #255	; 0xff
    1934:	d003      	beq.n	193e <_eeprom_emulator_update_page_mapping+0xde>
    1936:	42ac      	cmp	r4, r5
    1938:	d201      	bcs.n	193e <_eeprom_emulator_update_page_mapping+0xde>
			_eeprom_instance.page_map[logical_page] = c;
    193a:	1810      	adds	r0, r2, r0
    193c:	72c3      	strb	r3, [r0, #11]
    193e:	3301      	adds	r3, #1
    1940:	e799      	b.n	1876 <_eeprom_emulator_update_page_mapping+0x16>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    1942:	0020      	movs	r0, r4
    1944:	e7a2      	b.n	188c <_eeprom_emulator_update_page_mapping+0x2c>
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	2000015c 	.word	0x2000015c
    194c:	00001845 	.word	0x00001845

00001950 <_eeprom_emulator_nvm_read_page>:
{
    1950:	b570      	push	{r4, r5, r6, lr}
    1952:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    1954:	0184      	lsls	r4, r0, #6
    1956:	4b05      	ldr	r3, [pc, #20]	; (196c <_eeprom_emulator_nvm_read_page+0x1c>)
		error_code = nvm_read_buffer(
    1958:	2240      	movs	r2, #64	; 0x40
				(uint32_t)&_eeprom_instance.flash[physical_page],
    195a:	6858      	ldr	r0, [r3, #4]
		error_code = nvm_read_buffer(
    195c:	0029      	movs	r1, r5
				(uint32_t)&_eeprom_instance.flash[physical_page],
    195e:	1900      	adds	r0, r0, r4
		error_code = nvm_read_buffer(
    1960:	4b03      	ldr	r3, [pc, #12]	; (1970 <_eeprom_emulator_nvm_read_page+0x20>)
    1962:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    1964:	2805      	cmp	r0, #5
    1966:	d0f6      	beq.n	1956 <_eeprom_emulator_nvm_read_page+0x6>
}
    1968:	bd70      	pop	{r4, r5, r6, pc}
    196a:	46c0      	nop			; (mov r8, r8)
    196c:	2000015c 	.word	0x2000015c
    1970:	00001705 	.word	0x00001705

00001974 <_eeprom_emulator_nvm_fill_cache>:
{
    1974:	b570      	push	{r4, r5, r6, lr}
    1976:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    1978:	0184      	lsls	r4, r0, #6
    197a:	4b05      	ldr	r3, [pc, #20]	; (1990 <_eeprom_emulator_nvm_fill_cache+0x1c>)
		error_code = nvm_write_buffer(
    197c:	2240      	movs	r2, #64	; 0x40
				(uint32_t)&_eeprom_instance.flash[physical_page],
    197e:	6858      	ldr	r0, [r3, #4]
		error_code = nvm_write_buffer(
    1980:	0029      	movs	r1, r5
				(uint32_t)&_eeprom_instance.flash[physical_page],
    1982:	1900      	adds	r0, r0, r4
		error_code = nvm_write_buffer(
    1984:	4b03      	ldr	r3, [pc, #12]	; (1994 <_eeprom_emulator_nvm_fill_cache+0x20>)
    1986:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    1988:	2805      	cmp	r0, #5
    198a:	d0f6      	beq.n	197a <_eeprom_emulator_nvm_fill_cache+0x6>
}
    198c:	bd70      	pop	{r4, r5, r6, pc}
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	2000015c 	.word	0x2000015c
    1994:	00001669 	.word	0x00001669

00001998 <_eeprom_emulator_nvm_commit_cache>:
{
    1998:	b510      	push	{r4, lr}
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    199a:	0184      	lsls	r4, r0, #6
    199c:	4b04      	ldr	r3, [pc, #16]	; (19b0 <_eeprom_emulator_nvm_commit_cache+0x18>)
		error_code = nvm_execute_command(
    199e:	2200      	movs	r2, #0
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    19a0:	6859      	ldr	r1, [r3, #4]
		error_code = nvm_execute_command(
    19a2:	2004      	movs	r0, #4
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    19a4:	1909      	adds	r1, r1, r4
		error_code = nvm_execute_command(
    19a6:	4b03      	ldr	r3, [pc, #12]	; (19b4 <_eeprom_emulator_nvm_commit_cache+0x1c>)
    19a8:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    19aa:	2805      	cmp	r0, #5
    19ac:	d0f6      	beq.n	199c <_eeprom_emulator_nvm_commit_cache+0x4>
}
    19ae:	bd10      	pop	{r4, pc}
    19b0:	2000015c 	.word	0x2000015c
    19b4:	000015c5 	.word	0x000015c5

000019b8 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    19b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ba:	b099      	sub	sp, #100	; 0x64
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    19bc:	2200      	movs	r2, #0
    19be:	466b      	mov	r3, sp
	config->manual_page_write = true;
    19c0:	4669      	mov	r1, sp
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    19c2:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    19c4:	2301      	movs	r3, #1
    19c6:	704b      	strb	r3, [r1, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    19c8:	4b27      	ldr	r3, [pc, #156]	; (1a68 <eeprom_emulator_init+0xb0>)
    19ca:	685b      	ldr	r3, [r3, #4]
	config->disable_cache     = false;
    19cc:	70ca      	strb	r2, [r1, #3]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    19ce:	06db      	lsls	r3, r3, #27
    19d0:	0f1b      	lsrs	r3, r3, #28
    19d2:	708b      	strb	r3, [r1, #2]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    19d4:	710a      	strb	r2, [r1, #4]
	nvm_get_config_defaults(&config);
	config.manual_page_write = true;

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    19d6:	4668      	mov	r0, sp
    19d8:	4b24      	ldr	r3, [pc, #144]	; (1a6c <eeprom_emulator_init+0xb4>)
    19da:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    19dc:	2805      	cmp	r0, #5
    19de:	d0fa      	beq.n	19d6 <eeprom_emulator_init+0x1e>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    19e0:	a802      	add	r0, sp, #8
    19e2:	4b23      	ldr	r3, [pc, #140]	; (1a70 <eeprom_emulator_init+0xb8>)
    19e4:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    19e6:	9b03      	ldr	r3, [sp, #12]
		return STATUS_ERR_NO_MEMORY;
    19e8:	2016      	movs	r0, #22
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    19ea:	2b0b      	cmp	r3, #11
    19ec:	d937      	bls.n	1a5e <eeprom_emulator_init+0xa6>
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    19ee:	001a      	movs	r2, r3
	_eeprom_instance.physical_pages =
    19f0:	4c20      	ldr	r4, [pc, #128]	; (1a74 <eeprom_emulator_init+0xbc>)
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    19f2:	3a08      	subs	r2, #8
    19f4:	0852      	lsrs	r2, r2, #1
	_eeprom_instance.logical_pages  =
    19f6:	72a2      	strb	r2, [r4, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
    19f8:	2280      	movs	r2, #128	; 0x80
	_eeprom_instance.physical_pages =
    19fa:	8123      	strh	r3, [r4, #8]
			(void*)(FLASH_SIZE -
    19fc:	b29b      	uxth	r3, r3
    19fe:	019b      	lsls	r3, r3, #6
    1a00:	02d2      	lsls	r2, r2, #11
    1a02:	425b      	negs	r3, r3
    1a04:	189b      	adds	r3, r3, r2
	_eeprom_instance.flash =
    1a06:	6063      	str	r3, [r4, #4]
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
    1a08:	0023      	movs	r3, r4
    1a0a:	2700      	movs	r7, #0
    1a0c:	33c8      	adds	r3, #200	; 0xc8
    1a0e:	701f      	strb	r7, [r3, #0]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
    1a10:	4b19      	ldr	r3, [pc, #100]	; (1a78 <eeprom_emulator_init+0xc0>)
    1a12:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    1a14:	0023      	movs	r3, r4
    1a16:	3387      	adds	r3, #135	; 0x87
    1a18:	781b      	ldrb	r3, [r3, #0]
		return STATUS_ERR_BAD_FORMAT;
    1a1a:	201a      	movs	r0, #26
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    1a1c:	2b3f      	cmp	r3, #63	; 0x3f
    1a1e:	d01e      	beq.n	1a5e <eeprom_emulator_init+0xa6>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    1a20:	ae05      	add	r6, sp, #20
    1a22:	0032      	movs	r2, r6
    1a24:	4b15      	ldr	r3, [pc, #84]	; (1a7c <eeprom_emulator_init+0xc4>)
    1a26:	cb23      	ldmia	r3!, {r0, r1, r5}
    1a28:	c223      	stmia	r2!, {r0, r1, r5}
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    1a2a:	8920      	ldrh	r0, [r4, #8]
    1a2c:	ad08      	add	r5, sp, #32
    1a2e:	3801      	subs	r0, #1
    1a30:	b280      	uxth	r0, r0
    1a32:	0029      	movs	r1, r5
    1a34:	4b12      	ldr	r3, [pc, #72]	; (1a80 <eeprom_emulator_init+0xc8>)
    1a36:	4798      	blx	r3
		if (master_page.magic_key[c] != magic_key[c]) {
    1a38:	59eb      	ldr	r3, [r5, r7]
    1a3a:	59f2      	ldr	r2, [r6, r7]
    1a3c:	4293      	cmp	r3, r2
    1a3e:	d110      	bne.n	1a62 <eeprom_emulator_init+0xaa>
    1a40:	3704      	adds	r7, #4
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    1a42:	2f0c      	cmp	r7, #12
    1a44:	d1f8      	bne.n	1a38 <eeprom_emulator_init+0x80>
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    1a46:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_IO;
    1a48:	2010      	movs	r0, #16
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    1a4a:	2b01      	cmp	r3, #1
    1a4c:	d107      	bne.n	1a5e <eeprom_emulator_init+0xa6>
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    1a4e:	7b2a      	ldrb	r2, [r5, #12]
    1a50:	2a01      	cmp	r2, #1
    1a52:	d104      	bne.n	1a5e <eeprom_emulator_init+0xa6>
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    1a54:	7b6b      	ldrb	r3, [r5, #13]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d101      	bne.n	1a5e <eeprom_emulator_init+0xa6>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;

	return error_code;
    1a5a:	0018      	movs	r0, r3
	_eeprom_instance.initialized = true;
    1a5c:	7022      	strb	r2, [r4, #0]
}
    1a5e:	b019      	add	sp, #100	; 0x64
    1a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return STATUS_ERR_BAD_FORMAT;
    1a62:	201a      	movs	r0, #26
    1a64:	e7fb      	b.n	1a5e <eeprom_emulator_init+0xa6>
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	41004000 	.word	0x41004000
    1a6c:	0000153d 	.word	0x0000153d
    1a70:	000017cd 	.word	0x000017cd
    1a74:	2000015c 	.word	0x2000015c
    1a78:	00001861 	.word	0x00001861
    1a7c:	000037ac 	.word	0x000037ac
    1a80:	00001951 	.word	0x00001951

00001a84 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    1a84:	b5f0      	push	{r4, r5, r6, r7, lr}
	_eeprom_instance.spare_row = 0;
    1a86:	4e2b      	ldr	r6, [pc, #172]	; (1b34 <eeprom_emulator_erase_memory+0xb0>)
    1a88:	2500      	movs	r5, #0
    1a8a:	0033      	movs	r3, r6
    1a8c:	3387      	adds	r3, #135	; 0x87
    1a8e:	701d      	strb	r5, [r3, #0]
{
    1a90:	b091      	sub	sp, #68	; 0x44
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    1a92:	0028      	movs	r0, r5
    1a94:	4b28      	ldr	r3, [pc, #160]	; (1b38 <eeprom_emulator_erase_memory+0xb4>)
    1a96:	4798      	blx	r3
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    1a98:	2404      	movs	r4, #4
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    1a9a:	8933      	ldrh	r3, [r6, #8]
    1a9c:	1e5f      	subs	r7, r3, #1
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    1a9e:	429c      	cmp	r4, r3
    1aa0:	d328      	bcc.n	1af4 <eeprom_emulator_erase_memory+0x70>
	memset(&master_page, 0xFF, sizeof(master_page));
    1aa2:	21ff      	movs	r1, #255	; 0xff
    1aa4:	2240      	movs	r2, #64	; 0x40
    1aa6:	4668      	mov	r0, sp
    1aa8:	4b24      	ldr	r3, [pc, #144]	; (1b3c <eeprom_emulator_erase_memory+0xb8>)
    1aaa:	4798      	blx	r3
		master_page.magic_key[c] = magic_key[c];
    1aac:	4b24      	ldr	r3, [pc, #144]	; (1b40 <eeprom_emulator_erase_memory+0xbc>)
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    1aae:	466a      	mov	r2, sp
		master_page.magic_key[c] = magic_key[c];
    1ab0:	9300      	str	r3, [sp, #0]
    1ab2:	4b24      	ldr	r3, [pc, #144]	; (1b44 <eeprom_emulator_erase_memory+0xc0>)
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    1ab4:	17f8      	asrs	r0, r7, #31
		master_page.magic_key[c] = magic_key[c];
    1ab6:	9301      	str	r3, [sp, #4]
    1ab8:	4b23      	ldr	r3, [pc, #140]	; (1b48 <eeprom_emulator_erase_memory+0xc4>)
    1aba:	9302      	str	r3, [sp, #8]
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    1abc:	2301      	movs	r3, #1
    1abe:	73d3      	strb	r3, [r2, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    1ac0:	7313      	strb	r3, [r2, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    1ac2:	2300      	movs	r3, #0
    1ac4:	7353      	strb	r3, [r2, #13]
	master_page.revision      = EEPROM_REVISION;
    1ac6:	7393      	strb	r3, [r2, #14]
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    1ac8:	3303      	adds	r3, #3
    1aca:	4018      	ands	r0, r3
    1acc:	19c7      	adds	r7, r0, r7
    1ace:	10bf      	asrs	r7, r7, #2
	_eeprom_emulator_nvm_erase_row(
    1ad0:	b2f8      	uxtb	r0, r7
    1ad2:	4b19      	ldr	r3, [pc, #100]	; (1b38 <eeprom_emulator_erase_memory+0xb4>)
    1ad4:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    1ad6:	8930      	ldrh	r0, [r6, #8]
    1ad8:	4669      	mov	r1, sp
    1ada:	3801      	subs	r0, #1
    1adc:	b280      	uxth	r0, r0
    1ade:	4b1b      	ldr	r3, [pc, #108]	; (1b4c <eeprom_emulator_erase_memory+0xc8>)
    1ae0:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    1ae2:	8930      	ldrh	r0, [r6, #8]
    1ae4:	4b1a      	ldr	r3, [pc, #104]	; (1b50 <eeprom_emulator_erase_memory+0xcc>)
    1ae6:	3801      	subs	r0, #1
    1ae8:	b280      	uxth	r0, r0
    1aea:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    1aec:	4b19      	ldr	r3, [pc, #100]	; (1b54 <eeprom_emulator_erase_memory+0xd0>)
    1aee:	4798      	blx	r3
}
    1af0:	b011      	add	sp, #68	; 0x44
    1af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    1af4:	42bc      	cmp	r4, r7
    1af6:	d019      	beq.n	1b2c <eeprom_emulator_erase_memory+0xa8>
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    1af8:	2303      	movs	r3, #3
    1afa:	4023      	ands	r3, r4
    1afc:	d114      	bne.n	1b28 <eeprom_emulator_erase_memory+0xa4>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    1afe:	08a0      	lsrs	r0, r4, #2
    1b00:	b2c0      	uxtb	r0, r0
    1b02:	4b0d      	ldr	r3, [pc, #52]	; (1b38 <eeprom_emulator_erase_memory+0xb4>)
    1b04:	4798      	blx	r3
			memset(&data, 0xFF, sizeof(data));
    1b06:	2240      	movs	r2, #64	; 0x40
    1b08:	21ff      	movs	r1, #255	; 0xff
    1b0a:	4b0c      	ldr	r3, [pc, #48]	; (1b3c <eeprom_emulator_erase_memory+0xb8>)
    1b0c:	4668      	mov	r0, sp
    1b0e:	4798      	blx	r3
			data.header.logical_page = logical_page;
    1b10:	466b      	mov	r3, sp
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    1b12:	4669      	mov	r1, sp
			data.header.logical_page = logical_page;
    1b14:	701d      	strb	r5, [r3, #0]
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    1b16:	0020      	movs	r0, r4
    1b18:	4b0c      	ldr	r3, [pc, #48]	; (1b4c <eeprom_emulator_erase_memory+0xc8>)
    1b1a:	4798      	blx	r3
			logical_page++;
    1b1c:	3501      	adds	r5, #1
			_eeprom_emulator_nvm_commit_cache(physical_page);
    1b1e:	0020      	movs	r0, r4
    1b20:	4b0b      	ldr	r3, [pc, #44]	; (1b50 <eeprom_emulator_erase_memory+0xcc>)
    1b22:	4798      	blx	r3
			logical_page++;
    1b24:	b2ad      	uxth	r5, r5
    1b26:	e001      	b.n	1b2c <eeprom_emulator_erase_memory+0xa8>
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    1b28:	2b01      	cmp	r3, #1
    1b2a:	d0ec      	beq.n	1b06 <eeprom_emulator_erase_memory+0x82>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    1b2c:	3401      	adds	r4, #1
    1b2e:	b2a4      	uxth	r4, r4
    1b30:	e7b3      	b.n	1a9a <eeprom_emulator_erase_memory+0x16>
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	2000015c 	.word	0x2000015c
    1b38:	00001845 	.word	0x00001845
    1b3c:	00002f1f 	.word	0x00002f1f
    1b40:	41744545 	.word	0x41744545
    1b44:	50524f4d 	.word	0x50524f4d
    1b48:	456d752e 	.word	0x456d752e
    1b4c:	00001975 	.word	0x00001975
    1b50:	00001999 	.word	0x00001999
    1b54:	00001861 	.word	0x00001861

00001b58 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    1b58:	b530      	push	{r4, r5, lr}
    1b5a:	000c      	movs	r4, r1
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    1b5c:	4912      	ldr	r1, [pc, #72]	; (1ba8 <eeprom_emulator_read_page+0x50>)
{
    1b5e:	b091      	sub	sp, #68	; 0x44
	if (_eeprom_instance.initialized == false) {
    1b60:	780a      	ldrb	r2, [r1, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    1b62:	231f      	movs	r3, #31
	if (_eeprom_instance.initialized == false) {
    1b64:	2a00      	cmp	r2, #0
    1b66:	d013      	beq.n	1b90 <eeprom_emulator_read_page+0x38>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    1b68:	7a8a      	ldrb	r2, [r1, #10]
		return STATUS_ERR_BAD_ADDRESS;
    1b6a:	3b07      	subs	r3, #7
	if (logical_page >= _eeprom_instance.logical_pages) {
    1b6c:	4282      	cmp	r2, r0
    1b6e:	d90f      	bls.n	1b90 <eeprom_emulator_read_page+0x38>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
    1b70:	000b      	movs	r3, r1
    1b72:	33c8      	adds	r3, #200	; 0xc8
    1b74:	781b      	ldrb	r3, [r3, #0]
    1b76:	4d0d      	ldr	r5, [pc, #52]	; (1bac <eeprom_emulator_read_page+0x54>)
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d00c      	beq.n	1b96 <eeprom_emulator_read_page+0x3e>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    1b7c:	000b      	movs	r3, r1
    1b7e:	3388      	adds	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    1b80:	781b      	ldrb	r3, [r3, #0]
    1b82:	4283      	cmp	r3, r0
    1b84:	d107      	bne.n	1b96 <eeprom_emulator_read_page+0x3e>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    1b86:	223c      	movs	r2, #60	; 0x3c
    1b88:	318c      	adds	r1, #140	; 0x8c
		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    1b8a:	0020      	movs	r0, r4
    1b8c:	47a8      	blx	r5
	}

	return STATUS_OK;
    1b8e:	2300      	movs	r3, #0
}
    1b90:	0018      	movs	r0, r3
    1b92:	b011      	add	sp, #68	; 0x44
    1b94:	bd30      	pop	{r4, r5, pc}
				_eeprom_instance.page_map[logical_page], &temp);
    1b96:	1809      	adds	r1, r1, r0
		_eeprom_emulator_nvm_read_page(
    1b98:	7ac8      	ldrb	r0, [r1, #11]
    1b9a:	4b05      	ldr	r3, [pc, #20]	; (1bb0 <eeprom_emulator_read_page+0x58>)
    1b9c:	4669      	mov	r1, sp
    1b9e:	4798      	blx	r3
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    1ba0:	223c      	movs	r2, #60	; 0x3c
    1ba2:	a901      	add	r1, sp, #4
    1ba4:	e7f1      	b.n	1b8a <eeprom_emulator_read_page+0x32>
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	2000015c 	.word	0x2000015c
    1bac:	00002f0d 	.word	0x00002f0d
    1bb0:	00001951 	.word	0x00001951

00001bb4 <eeprom_emulator_commit_page_buffer>:
enum status_code eeprom_emulator_commit_page_buffer(void)
{
	enum status_code error_code = STATUS_OK;

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    1bb4:	4b08      	ldr	r3, [pc, #32]	; (1bd8 <eeprom_emulator_commit_page_buffer+0x24>)
{
    1bb6:	b510      	push	{r4, lr}
	if (_eeprom_instance.cache_active == false) {
    1bb8:	001c      	movs	r4, r3
    1bba:	34c8      	adds	r4, #200	; 0xc8
    1bbc:	7822      	ldrb	r2, [r4, #0]
    1bbe:	2a00      	cmp	r2, #0
    1bc0:	d008      	beq.n	1bd4 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    1bc2:	001a      	movs	r2, r3
    1bc4:	3288      	adds	r2, #136	; 0x88

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
    1bc6:	7812      	ldrb	r2, [r2, #0]
    1bc8:	189b      	adds	r3, r3, r2
	_eeprom_emulator_nvm_commit_cache(
    1bca:	7ad8      	ldrb	r0, [r3, #11]
    1bcc:	4b03      	ldr	r3, [pc, #12]	; (1bdc <eeprom_emulator_commit_page_buffer+0x28>)
    1bce:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
    1bd0:	2300      	movs	r3, #0
    1bd2:	7023      	strb	r3, [r4, #0]

	return error_code;
}
    1bd4:	2000      	movs	r0, #0
    1bd6:	bd10      	pop	{r4, pc}
    1bd8:	2000015c 	.word	0x2000015c
    1bdc:	00001999 	.word	0x00001999

00001be0 <eeprom_emulator_write_page>:
{
    1be0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_eeprom_instance.initialized == false) {
    1be2:	4c4c      	ldr	r4, [pc, #304]	; (1d14 <eeprom_emulator_write_page+0x134>)
{
    1be4:	b087      	sub	sp, #28
	if (_eeprom_instance.initialized == false) {
    1be6:	7823      	ldrb	r3, [r4, #0]
{
    1be8:	0005      	movs	r5, r0
    1bea:	9103      	str	r1, [sp, #12]
		return STATUS_ERR_NOT_INITIALIZED;
    1bec:	201f      	movs	r0, #31
	if (_eeprom_instance.initialized == false) {
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d077      	beq.n	1ce2 <eeprom_emulator_write_page+0x102>
	if (logical_page >= _eeprom_instance.logical_pages) {
    1bf2:	7aa3      	ldrb	r3, [r4, #10]
		return STATUS_ERR_BAD_ADDRESS;
    1bf4:	3807      	subs	r0, #7
	if (logical_page >= _eeprom_instance.logical_pages) {
    1bf6:	42ab      	cmp	r3, r5
    1bf8:	d973      	bls.n	1ce2 <eeprom_emulator_write_page+0x102>
	if ((_eeprom_instance.cache_active == true) &&
    1bfa:	0023      	movs	r3, r4
    1bfc:	33c8      	adds	r3, #200	; 0xc8
    1bfe:	781b      	ldrb	r3, [r3, #0]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d006      	beq.n	1c12 <eeprom_emulator_write_page+0x32>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    1c04:	0023      	movs	r3, r4
    1c06:	3388      	adds	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    1c08:	781b      	ldrb	r3, [r3, #0]
    1c0a:	42ab      	cmp	r3, r5
    1c0c:	d001      	beq.n	1c12 <eeprom_emulator_write_page+0x32>
		eeprom_emulator_commit_page_buffer();
    1c0e:	4b42      	ldr	r3, [pc, #264]	; (1d18 <eeprom_emulator_write_page+0x138>)
    1c10:	4798      	blx	r3
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    1c12:	1963      	adds	r3, r4, r5
    1c14:	7ad9      	ldrb	r1, [r3, #11]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    1c16:	2303      	movs	r3, #3
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    1c18:	000e      	movs	r6, r1
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    1c1a:	000a      	movs	r2, r1
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    1c1c:	439e      	bics	r6, r3
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    1c1e:	401a      	ands	r2, r3
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    1c20:	0033      	movs	r3, r6
		if (_eeprom_instance.flash[page].header.logical_page ==
    1c22:	6860      	ldr	r0, [r4, #4]
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    1c24:	189e      	adds	r6, r3, r2
    1c26:	b2f6      	uxtb	r6, r6
		if (_eeprom_instance.flash[page].header.logical_page ==
    1c28:	01b7      	lsls	r7, r6, #6
    1c2a:	5c3f      	ldrb	r7, [r7, r0]
    1c2c:	2fff      	cmp	r7, #255	; 0xff
    1c2e:	d05f      	beq.n	1cf0 <eeprom_emulator_write_page+0x110>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    1c30:	3201      	adds	r2, #1
    1c32:	b2d2      	uxtb	r2, r2
    1c34:	2a04      	cmp	r2, #4
    1c36:	d1f5      	bne.n	1c24 <eeprom_emulator_write_page+0x44>
		_eeprom_emulator_move_data_to_spare(
    1c38:	088a      	lsrs	r2, r1, #2
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    1c3a:	0214      	lsls	r4, r2, #8
	const struct _eeprom_page *row_data =
    1c3c:	1904      	adds	r4, r0, r4
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    1c3e:	1c5e      	adds	r6, r3, #1
		_eeprom_emulator_move_data_to_spare(
    1c40:	9201      	str	r2, [sp, #4]
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    1c42:	aa05      	add	r2, sp, #20
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    1c44:	0021      	movs	r1, r4
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    1c46:	70d6      	strb	r6, [r2, #3]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    1c48:	0026      	movs	r6, r4
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    1c4a:	3140      	adds	r1, #64	; 0x40
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    1c4c:	3680      	adds	r6, #128	; 0x80
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    1c4e:	7820      	ldrb	r0, [r4, #0]
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    1c50:	7809      	ldrb	r1, [r1, #0]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    1c52:	7836      	ldrb	r6, [r6, #0]
    1c54:	34c0      	adds	r4, #192	; 0xc0
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    1c56:	7010      	strb	r0, [r2, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    1c58:	7053      	strb	r3, [r2, #1]
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    1c5a:	7091      	strb	r1, [r2, #2]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    1c5c:	7824      	ldrb	r4, [r4, #0]
    1c5e:	4286      	cmp	r6, r0
    1c60:	d101      	bne.n	1c66 <eeprom_emulator_write_page+0x86>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    1c62:	1c9f      	adds	r7, r3, #2
				page_trans[c].physical_page =
    1c64:	7057      	strb	r7, [r2, #1]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    1c66:	42a0      	cmp	r0, r4
    1c68:	d101      	bne.n	1c6e <eeprom_emulator_write_page+0x8e>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    1c6a:	1cd8      	adds	r0, r3, #3
				page_trans[c].physical_page =
    1c6c:	7050      	strb	r0, [r2, #1]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    1c6e:	428e      	cmp	r6, r1
    1c70:	d101      	bne.n	1c76 <eeprom_emulator_write_page+0x96>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    1c72:	1c98      	adds	r0, r3, #2
				page_trans[c].physical_page =
    1c74:	70d0      	strb	r0, [r2, #3]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    1c76:	42a1      	cmp	r1, r4
    1c78:	d101      	bne.n	1c7e <eeprom_emulator_write_page+0x9e>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    1c7a:	3303      	adds	r3, #3
				page_trans[c].physical_page =
    1c7c:	70d3      	strb	r3, [r2, #3]
{
    1c7e:	2600      	movs	r6, #0
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    1c80:	4c24      	ldr	r4, [pc, #144]	; (1d14 <eeprom_emulator_write_page+0x134>)
    1c82:	0023      	movs	r3, r4
    1c84:	3387      	adds	r3, #135	; 0x87
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	009b      	lsls	r3, r3, #2
    1c8a:	199b      	adds	r3, r3, r6
    1c8c:	9302      	str	r3, [sp, #8]
		eeprom_emulator_commit_page_buffer();
    1c8e:	4b22      	ldr	r3, [pc, #136]	; (1d18 <eeprom_emulator_write_page+0x138>)
    1c90:	4798      	blx	r3
    1c92:	0021      	movs	r1, r4
    1c94:	0072      	lsls	r2, r6, #1
		if (logical_page == page_trans[c].logical_page) {
    1c96:	ab05      	add	r3, sp, #20
    1c98:	5cd7      	ldrb	r7, [r2, r3]
    1c9a:	3188      	adds	r1, #136	; 0x88
    1c9c:	42bd      	cmp	r5, r7
    1c9e:	d122      	bne.n	1ce6 <eeprom_emulator_write_page+0x106>
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    1ca0:	0020      	movs	r0, r4
			_eeprom_instance.cache.header.logical_page = logical_page;
    1ca2:	700d      	strb	r5, [r1, #0]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    1ca4:	308c      	adds	r0, #140	; 0x8c
    1ca6:	223c      	movs	r2, #60	; 0x3c
    1ca8:	9903      	ldr	r1, [sp, #12]
    1caa:	4b1c      	ldr	r3, [pc, #112]	; (1d1c <eeprom_emulator_write_page+0x13c>)
    1cac:	4798      	blx	r3
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    1cae:	4c19      	ldr	r4, [pc, #100]	; (1d14 <eeprom_emulator_write_page+0x134>)
    1cb0:	466b      	mov	r3, sp
    1cb2:	0021      	movs	r1, r4
    1cb4:	8918      	ldrh	r0, [r3, #8]
    1cb6:	3188      	adds	r1, #136	; 0x88
    1cb8:	4b19      	ldr	r3, [pc, #100]	; (1d20 <eeprom_emulator_write_page+0x140>)
    1cba:	4798      	blx	r3
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    1cbc:	466b      	mov	r3, sp
    1cbe:	7a1b      	ldrb	r3, [r3, #8]
    1cc0:	19e7      	adds	r7, r4, r7
    1cc2:	72fb      	strb	r3, [r7, #11]
		_eeprom_instance.cache_active = true;
    1cc4:	0023      	movs	r3, r4
    1cc6:	2201      	movs	r2, #1
    1cc8:	33c8      	adds	r3, #200	; 0xc8
    1cca:	3601      	adds	r6, #1
    1ccc:	701a      	strb	r2, [r3, #0]
	for (uint8_t c = 0; c < 2; c++) {
    1cce:	2e02      	cmp	r6, #2
    1cd0:	d1d6      	bne.n	1c80 <eeprom_emulator_write_page+0xa0>
	_eeprom_emulator_nvm_erase_row(row_number);
    1cd2:	4b14      	ldr	r3, [pc, #80]	; (1d24 <eeprom_emulator_write_page+0x144>)
    1cd4:	9801      	ldr	r0, [sp, #4]
    1cd6:	4798      	blx	r3
	_eeprom_instance.spare_row = row_number;
    1cd8:	466b      	mov	r3, sp
    1cda:	791b      	ldrb	r3, [r3, #4]
    1cdc:	3487      	adds	r4, #135	; 0x87
	_eeprom_instance.cache_active           = true;
    1cde:	2000      	movs	r0, #0
    1ce0:	7023      	strb	r3, [r4, #0]
}
    1ce2:	b007      	add	sp, #28
    1ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					page_trans[c].physical_page, &_eeprom_instance.cache);
    1ce6:	189b      	adds	r3, r3, r2
			_eeprom_emulator_nvm_read_page(
    1ce8:	7858      	ldrb	r0, [r3, #1]
    1cea:	4b0f      	ldr	r3, [pc, #60]	; (1d28 <eeprom_emulator_write_page+0x148>)
    1cec:	4798      	blx	r3
    1cee:	e7de      	b.n	1cae <eeprom_emulator_write_page+0xce>
	_eeprom_instance.cache.header.logical_page = logical_page;
    1cf0:	0027      	movs	r7, r4
	memcpy(&_eeprom_instance.cache.data,
    1cf2:	0020      	movs	r0, r4
	_eeprom_instance.cache.header.logical_page = logical_page;
    1cf4:	3788      	adds	r7, #136	; 0x88
	memcpy(&_eeprom_instance.cache.data,
    1cf6:	223c      	movs	r2, #60	; 0x3c
    1cf8:	9903      	ldr	r1, [sp, #12]
    1cfa:	4b08      	ldr	r3, [pc, #32]	; (1d1c <eeprom_emulator_write_page+0x13c>)
    1cfc:	308c      	adds	r0, #140	; 0x8c
	_eeprom_instance.cache.header.logical_page = logical_page;
    1cfe:	703d      	strb	r5, [r7, #0]
	memcpy(&_eeprom_instance.cache.data,
    1d00:	4798      	blx	r3
	_eeprom_instance.page_map[logical_page] = new_page;
    1d02:	1965      	adds	r5, r4, r5
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    1d04:	b2b0      	uxth	r0, r6
    1d06:	0039      	movs	r1, r7
    1d08:	4b05      	ldr	r3, [pc, #20]	; (1d20 <eeprom_emulator_write_page+0x140>)
    1d0a:	4798      	blx	r3
	_eeprom_instance.page_map[logical_page] = new_page;
    1d0c:	72ee      	strb	r6, [r5, #11]
	_eeprom_instance.cache_active           = true;
    1d0e:	2301      	movs	r3, #1
    1d10:	34c8      	adds	r4, #200	; 0xc8
    1d12:	e7e4      	b.n	1cde <eeprom_emulator_write_page+0xfe>
    1d14:	2000015c 	.word	0x2000015c
    1d18:	00001bb5 	.word	0x00001bb5
    1d1c:	00002f0d 	.word	0x00002f0d
    1d20:	00001975 	.word	0x00001975
    1d24:	00001845 	.word	0x00001845
    1d28:	00001951 	.word	0x00001951

00001d2c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1d2c:	4770      	bx	lr
	...

00001d30 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1d30:	4b09      	ldr	r3, [pc, #36]	; (1d58 <cpu_irq_enter_critical+0x28>)
    1d32:	6819      	ldr	r1, [r3, #0]
    1d34:	2900      	cmp	r1, #0
    1d36:	d10b      	bne.n	1d50 <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d38:	f3ef 8010 	mrs	r0, PRIMASK
    1d3c:	4a07      	ldr	r2, [pc, #28]	; (1d5c <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
    1d3e:	2800      	cmp	r0, #0
    1d40:	d105      	bne.n	1d4e <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
    1d42:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1d44:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1d48:	4905      	ldr	r1, [pc, #20]	; (1d60 <cpu_irq_enter_critical+0x30>)
    1d4a:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
    1d4c:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1d4e:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1d50:	681a      	ldr	r2, [r3, #0]
    1d52:	3201      	adds	r2, #1
    1d54:	601a      	str	r2, [r3, #0]
}
    1d56:	4770      	bx	lr
    1d58:	20000228 	.word	0x20000228
    1d5c:	2000022c 	.word	0x2000022c
    1d60:	2000000c 	.word	0x2000000c

00001d64 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1d64:	4b08      	ldr	r3, [pc, #32]	; (1d88 <cpu_irq_leave_critical+0x24>)
    1d66:	681a      	ldr	r2, [r3, #0]
    1d68:	3a01      	subs	r2, #1
    1d6a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1d6c:	681b      	ldr	r3, [r3, #0]
    1d6e:	2b00      	cmp	r3, #0
    1d70:	d109      	bne.n	1d86 <cpu_irq_leave_critical+0x22>
    1d72:	4b06      	ldr	r3, [pc, #24]	; (1d8c <cpu_irq_leave_critical+0x28>)
    1d74:	781b      	ldrb	r3, [r3, #0]
    1d76:	2b00      	cmp	r3, #0
    1d78:	d005      	beq.n	1d86 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1d7a:	2201      	movs	r2, #1
    1d7c:	4b04      	ldr	r3, [pc, #16]	; (1d90 <cpu_irq_leave_critical+0x2c>)
    1d7e:	701a      	strb	r2, [r3, #0]
    1d80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d84:	b662      	cpsie	i
	}
}
    1d86:	4770      	bx	lr
    1d88:	20000228 	.word	0x20000228
    1d8c:	2000022c 	.word	0x2000022c
    1d90:	2000000c 	.word	0x2000000c

00001d94 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d94:	2310      	movs	r3, #16
    1d96:	4902      	ldr	r1, [pc, #8]	; (1da0 <_system_dfll_wait_for_sync+0xc>)
    1d98:	68ca      	ldr	r2, [r1, #12]
    1d9a:	421a      	tst	r2, r3
    1d9c:	d0fc      	beq.n	1d98 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    1d9e:	4770      	bx	lr
    1da0:	40000800 	.word	0x40000800

00001da4 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1da4:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
    1da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
    1da8:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1daa:	4d09      	ldr	r5, [pc, #36]	; (1dd0 <system_clock_source_enable.part.0+0x2c>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1dac:	4c09      	ldr	r4, [pc, #36]	; (1dd4 <system_clock_source_enable.part.0+0x30>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1dae:	682b      	ldr	r3, [r5, #0]
	_system_dfll_wait_for_sync();
    1db0:	4f09      	ldr	r7, [pc, #36]	; (1dd8 <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1db2:	4313      	orrs	r3, r2
    1db4:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1db6:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1db8:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1dba:	68ab      	ldr	r3, [r5, #8]
    1dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1dbe:	686b      	ldr	r3, [r5, #4]
    1dc0:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1dc2:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1dc4:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1dc6:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1dc8:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1dca:	b29b      	uxth	r3, r3
    1dcc:	84a3      	strh	r3, [r4, #36]	; 0x24
}
    1dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dd0:	20000230 	.word	0x20000230
    1dd4:	40000800 	.word	0x40000800
    1dd8:	00001d95 	.word	0x00001d95

00001ddc <system_clock_source_get_hz>:
{
    1ddc:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    1dde:	2808      	cmp	r0, #8
    1de0:	d806      	bhi.n	1df0 <system_clock_source_get_hz+0x14>
    1de2:	f000 fe71 	bl	2ac8 <__gnu_thumb1_case_uqi>
    1de6:	0508      	.short	0x0508
    1de8:	12303005 	.word	0x12303005
    1dec:	150b      	.short	0x150b
    1dee:	28          	.byte	0x28
    1def:	00          	.byte	0x00
		return 0;
    1df0:	2400      	movs	r4, #0
}
    1df2:	0020      	movs	r0, r4
    1df4:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    1df6:	4b16      	ldr	r3, [pc, #88]	; (1e50 <system_clock_source_get_hz+0x74>)
    1df8:	691c      	ldr	r4, [r3, #16]
    1dfa:	e7fa      	b.n	1df2 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1dfc:	4b15      	ldr	r3, [pc, #84]	; (1e54 <system_clock_source_get_hz+0x78>)
    1dfe:	4c16      	ldr	r4, [pc, #88]	; (1e58 <system_clock_source_get_hz+0x7c>)
    1e00:	6a1b      	ldr	r3, [r3, #32]
    1e02:	059b      	lsls	r3, r3, #22
    1e04:	0f9b      	lsrs	r3, r3, #30
    1e06:	40dc      	lsrs	r4, r3
    1e08:	e7f3      	b.n	1df2 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    1e0a:	4b11      	ldr	r3, [pc, #68]	; (1e50 <system_clock_source_get_hz+0x74>)
    1e0c:	695c      	ldr	r4, [r3, #20]
    1e0e:	e7f0      	b.n	1df2 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1e10:	4d0f      	ldr	r5, [pc, #60]	; (1e50 <system_clock_source_get_hz+0x74>)
			return 0;
    1e12:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1e14:	682b      	ldr	r3, [r5, #0]
    1e16:	079b      	lsls	r3, r3, #30
    1e18:	d5eb      	bpl.n	1df2 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    1e1a:	4b10      	ldr	r3, [pc, #64]	; (1e5c <system_clock_source_get_hz+0x80>)
    1e1c:	4798      	blx	r3
		switch(_system_clock_inst.dfll.control &
    1e1e:	2224      	movs	r2, #36	; 0x24
    1e20:	682b      	ldr	r3, [r5, #0]
    1e22:	4013      	ands	r3, r2
    1e24:	2b04      	cmp	r3, #4
    1e26:	d111      	bne.n	1e4c <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1e28:	0020      	movs	r0, r4
    1e2a:	4b0d      	ldr	r3, [pc, #52]	; (1e60 <system_clock_source_get_hz+0x84>)
    1e2c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1e2e:	68ac      	ldr	r4, [r5, #8]
    1e30:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1e32:	4344      	muls	r4, r0
    1e34:	e7dd      	b.n	1df2 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1e36:	4b0b      	ldr	r3, [pc, #44]	; (1e64 <system_clock_source_get_hz+0x88>)
			return 0;
    1e38:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1e3a:	781b      	ldrb	r3, [r3, #0]
    1e3c:	075b      	lsls	r3, r3, #29
    1e3e:	d5d8      	bpl.n	1df2 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    1e40:	4b03      	ldr	r3, [pc, #12]	; (1e50 <system_clock_source_get_hz+0x74>)
    1e42:	68dc      	ldr	r4, [r3, #12]
    1e44:	e7d5      	b.n	1df2 <system_clock_source_get_hz+0x16>
		return 32768UL;
    1e46:	2480      	movs	r4, #128	; 0x80
    1e48:	0224      	lsls	r4, r4, #8
    1e4a:	e7d2      	b.n	1df2 <system_clock_source_get_hz+0x16>
			return 48000000UL;
    1e4c:	4c06      	ldr	r4, [pc, #24]	; (1e68 <system_clock_source_get_hz+0x8c>)
    1e4e:	e7d0      	b.n	1df2 <system_clock_source_get_hz+0x16>
    1e50:	20000230 	.word	0x20000230
    1e54:	40000800 	.word	0x40000800
    1e58:	007a1200 	.word	0x007a1200
    1e5c:	00001d95 	.word	0x00001d95
    1e60:	0000241d 	.word	0x0000241d
    1e64:	40000850 	.word	0x40000850
    1e68:	02dc6c00 	.word	0x02dc6c00

00001e6c <system_clock_source_osc8m_set_config>:
{
    1e6c:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
    1e6e:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    1e70:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
    1e72:	7845      	ldrb	r5, [r0, #1]
    1e74:	2001      	movs	r0, #1
    1e76:	2640      	movs	r6, #64	; 0x40
    1e78:	4005      	ands	r5, r0
    1e7a:	4020      	ands	r0, r4
    1e7c:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1e7e:	4908      	ldr	r1, [pc, #32]	; (1ea0 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    1e80:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1e82:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    1e84:	01c0      	lsls	r0, r0, #7
    1e86:	43b3      	bics	r3, r6
    1e88:	432b      	orrs	r3, r5
    1e8a:	43a3      	bics	r3, r4
    1e8c:	4303      	orrs	r3, r0
    1e8e:	2003      	movs	r0, #3
    1e90:	4002      	ands	r2, r0
    1e92:	4804      	ldr	r0, [pc, #16]	; (1ea4 <system_clock_source_osc8m_set_config+0x38>)
    1e94:	0212      	lsls	r2, r2, #8
    1e96:	4003      	ands	r3, r0
    1e98:	4313      	orrs	r3, r2
    1e9a:	620b      	str	r3, [r1, #32]
}
    1e9c:	bd70      	pop	{r4, r5, r6, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	40000800 	.word	0x40000800
    1ea4:	fffffcff 	.word	0xfffffcff

00001ea8 <system_clock_source_xosc32k_set_config>:
{
    1ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1eaa:	4b22      	ldr	r3, [pc, #136]	; (1f34 <system_clock_source_xosc32k_set_config+0x8c>)
	temp.bit.STARTUP = config->startup_time;
    1eac:	7842      	ldrb	r2, [r0, #1]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1eae:	7807      	ldrb	r7, [r0, #0]
{
    1eb0:	b085      	sub	sp, #20
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1eb2:	469c      	mov	ip, r3
    1eb4:	8a9b      	ldrh	r3, [r3, #20]
	temp.bit.STARTUP = config->startup_time;
    1eb6:	9203      	str	r2, [sp, #12]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1eb8:	427a      	negs	r2, r7
    1eba:	4157      	adcs	r7, r2
	temp.bit.ONDEMAND = config->on_demand;
    1ebc:	7b42      	ldrb	r2, [r0, #13]
	temp.bit.AAMPEN = config->auto_gain_control;
    1ebe:	7884      	ldrb	r4, [r0, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1ec0:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1ec2:	7906      	ldrb	r6, [r0, #4]
	temp.bit.ONDEMAND = config->on_demand;
    1ec4:	9201      	str	r2, [sp, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1ec6:	7b02      	ldrb	r2, [r0, #12]
    1ec8:	9202      	str	r2, [sp, #8]
	temp.bit.WRTLOCK  = config->write_once;
    1eca:	7b81      	ldrb	r1, [r0, #14]
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1ecc:	4a1a      	ldr	r2, [pc, #104]	; (1f38 <system_clock_source_xosc32k_set_config+0x90>)
    1ece:	6880      	ldr	r0, [r0, #8]
    1ed0:	6150      	str	r0, [r2, #20]
	SYSCTRL->XOSC32K = temp;
    1ed2:	00b8      	lsls	r0, r7, #2
    1ed4:	2704      	movs	r7, #4
    1ed6:	2201      	movs	r2, #1
    1ed8:	43bb      	bics	r3, r7
    1eda:	4318      	orrs	r0, r3
    1edc:	2308      	movs	r3, #8
    1ede:	4015      	ands	r5, r2
    1ee0:	40bd      	lsls	r5, r7
    1ee2:	4016      	ands	r6, r2
    1ee4:	4398      	bics	r0, r3
    1ee6:	00f6      	lsls	r6, r6, #3
    1ee8:	4306      	orrs	r6, r0
    1eea:	18db      	adds	r3, r3, r3
    1eec:	439e      	bics	r6, r3
    1eee:	4335      	orrs	r5, r6
    1ef0:	3310      	adds	r3, #16
    1ef2:	439d      	bics	r5, r3
    1ef4:	002b      	movs	r3, r5
    1ef6:	2040      	movs	r0, #64	; 0x40
    1ef8:	4014      	ands	r4, r2
    1efa:	0164      	lsls	r4, r4, #5
    1efc:	4323      	orrs	r3, r4
    1efe:	9c02      	ldr	r4, [sp, #8]
    1f00:	4383      	bics	r3, r0
    1f02:	4014      	ands	r4, r2
    1f04:	01a4      	lsls	r4, r4, #6
    1f06:	4323      	orrs	r3, r4
    1f08:	2480      	movs	r4, #128	; 0x80
    1f0a:	9801      	ldr	r0, [sp, #4]
    1f0c:	43a3      	bics	r3, r4
    1f0e:	4010      	ands	r0, r2
    1f10:	01c0      	lsls	r0, r0, #7
    1f12:	4303      	orrs	r3, r0
    1f14:	2007      	movs	r0, #7
    1f16:	9c03      	ldr	r4, [sp, #12]
    1f18:	4011      	ands	r1, r2
    1f1a:	4020      	ands	r0, r4
    1f1c:	4c07      	ldr	r4, [pc, #28]	; (1f3c <system_clock_source_xosc32k_set_config+0x94>)
    1f1e:	0200      	lsls	r0, r0, #8
    1f20:	4023      	ands	r3, r4
    1f22:	4a07      	ldr	r2, [pc, #28]	; (1f40 <system_clock_source_xosc32k_set_config+0x98>)
    1f24:	4303      	orrs	r3, r0
    1f26:	401a      	ands	r2, r3
    1f28:	4663      	mov	r3, ip
    1f2a:	0309      	lsls	r1, r1, #12
    1f2c:	430a      	orrs	r2, r1
    1f2e:	829a      	strh	r2, [r3, #20]
}
    1f30:	b005      	add	sp, #20
    1f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f34:	40000800 	.word	0x40000800
    1f38:	20000230 	.word	0x20000230
    1f3c:	fffff8ff 	.word	0xfffff8ff
    1f40:	ffffefff 	.word	0xffffefff

00001f44 <system_clock_source_dfll_set_config>:
{
    1f44:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1f46:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1f48:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1f4a:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1f4c:	059b      	lsls	r3, r3, #22
    1f4e:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1f50:	0c12      	lsrs	r2, r2, #16
    1f52:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    1f54:	4b17      	ldr	r3, [pc, #92]	; (1fb4 <system_clock_source_dfll_set_config+0x70>)
    1f56:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
    1f58:	79c1      	ldrb	r1, [r0, #7]
    1f5a:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
    1f5c:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    1f5e:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
    1f60:	8841      	ldrh	r1, [r0, #2]
    1f62:	4321      	orrs	r1, r4
    1f64:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1f66:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1f68:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1f6a:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    1f6c:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
    1f6e:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1f70:	2c04      	cmp	r4, #4
    1f72:	d10d      	bne.n	1f90 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1f74:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1f76:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1f78:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1f7a:	430a      	orrs	r2, r1
    1f7c:	89c1      	ldrh	r1, [r0, #14]
    1f7e:	480e      	ldr	r0, [pc, #56]	; (1fb8 <system_clock_source_dfll_set_config+0x74>)
    1f80:	0409      	lsls	r1, r1, #16
    1f82:	4001      	ands	r1, r0
    1f84:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    1f86:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1f88:	681a      	ldr	r2, [r3, #0]
    1f8a:	4314      	orrs	r4, r2
    1f8c:	601c      	str	r4, [r3, #0]
}
    1f8e:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1f90:	2c20      	cmp	r4, #32
    1f92:	d1fc      	bne.n	1f8e <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1f94:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1f96:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1f98:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1f9a:	430a      	orrs	r2, r1
    1f9c:	89c1      	ldrh	r1, [r0, #14]
    1f9e:	4806      	ldr	r0, [pc, #24]	; (1fb8 <system_clock_source_dfll_set_config+0x74>)
    1fa0:	0409      	lsls	r1, r1, #16
    1fa2:	4001      	ands	r1, r0
    1fa4:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    1fa6:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    1fa8:	6819      	ldr	r1, [r3, #0]
    1faa:	4a04      	ldr	r2, [pc, #16]	; (1fbc <system_clock_source_dfll_set_config+0x78>)
    1fac:	430a      	orrs	r2, r1
    1fae:	601a      	str	r2, [r3, #0]
}
    1fb0:	e7ed      	b.n	1f8e <system_clock_source_dfll_set_config+0x4a>
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	20000230 	.word	0x20000230
    1fb8:	03ff0000 	.word	0x03ff0000
    1fbc:	00000424 	.word	0x00000424

00001fc0 <system_clock_source_enable>:
{
    1fc0:	b510      	push	{r4, lr}
	switch (clock_source) {
    1fc2:	2808      	cmp	r0, #8
    1fc4:	d806      	bhi.n	1fd4 <system_clock_source_enable+0x14>
    1fc6:	f000 fd7f 	bl	2ac8 <__gnu_thumb1_case_uqi>
    1fca:	0514      	.short	0x0514
    1fcc:	1a0e0c05 	.word	0x1a0e0c05
    1fd0:	2007      	.short	0x2007
    1fd2:	23          	.byte	0x23
    1fd3:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
    1fd4:	2017      	movs	r0, #23
}
    1fd6:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1fd8:	2302      	movs	r3, #2
    1fda:	4a10      	ldr	r2, [pc, #64]	; (201c <STACK_SIZE+0x1c>)
    1fdc:	6a11      	ldr	r1, [r2, #32]
    1fde:	430b      	orrs	r3, r1
    1fe0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1fe2:	2000      	movs	r0, #0
    1fe4:	e7f7      	b.n	1fd6 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1fe6:	2302      	movs	r3, #2
    1fe8:	4a0c      	ldr	r2, [pc, #48]	; (201c <STACK_SIZE+0x1c>)
    1fea:	6991      	ldr	r1, [r2, #24]
    1fec:	430b      	orrs	r3, r1
    1fee:	6193      	str	r3, [r2, #24]
    1ff0:	e7f7      	b.n	1fe2 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1ff2:	2302      	movs	r3, #2
    1ff4:	4a09      	ldr	r2, [pc, #36]	; (201c <STACK_SIZE+0x1c>)
    1ff6:	8a11      	ldrh	r1, [r2, #16]
    1ff8:	430b      	orrs	r3, r1
    1ffa:	8213      	strh	r3, [r2, #16]
    1ffc:	e7f1      	b.n	1fe2 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1ffe:	2302      	movs	r3, #2
    2000:	4a06      	ldr	r2, [pc, #24]	; (201c <STACK_SIZE+0x1c>)
    2002:	8a91      	ldrh	r1, [r2, #20]
    2004:	430b      	orrs	r3, r1
    2006:	8293      	strh	r3, [r2, #20]
    2008:	e7eb      	b.n	1fe2 <system_clock_source_enable+0x22>
    200a:	4b05      	ldr	r3, [pc, #20]	; (2020 <STACK_SIZE+0x20>)
    200c:	4798      	blx	r3
    200e:	e7e2      	b.n	1fd6 <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2010:	2302      	movs	r3, #2
    2012:	4a04      	ldr	r2, [pc, #16]	; (2024 <STACK_SIZE+0x24>)
    2014:	7811      	ldrb	r1, [r2, #0]
    2016:	430b      	orrs	r3, r1
    2018:	7013      	strb	r3, [r2, #0]
    201a:	e7e2      	b.n	1fe2 <system_clock_source_enable+0x22>
    201c:	40000800 	.word	0x40000800
    2020:	00001da5 	.word	0x00001da5
    2024:	40000844 	.word	0x40000844

00002028 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2028:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    202a:	221e      	movs	r2, #30
{
    202c:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    202e:	495e      	ldr	r1, [pc, #376]	; (21a8 <system_clock_init+0x180>)
    2030:	00db      	lsls	r3, r3, #3
    2032:	485e      	ldr	r0, [pc, #376]	; (21ac <system_clock_init+0x184>)
    2034:	608b      	str	r3, [r1, #8]
    2036:	6843      	ldr	r3, [r0, #4]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2038:	2500      	movs	r5, #0
    203a:	4393      	bics	r3, r2
    203c:	001a      	movs	r2, r3
    203e:	2304      	movs	r3, #4
    2040:	4313      	orrs	r3, r2
    2042:	6043      	str	r3, [r0, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2044:	2302      	movs	r3, #2
{
    2046:	b091      	sub	sp, #68	; 0x44
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2048:	ac0b      	add	r4, sp, #44	; 0x2c
    204a:	7023      	strb	r3, [r4, #0]
    204c:	9101      	str	r1, [sp, #4]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    204e:	b2e8      	uxtb	r0, r5
    2050:	0021      	movs	r1, r4
    2052:	4b57      	ldr	r3, [pc, #348]	; (21b0 <system_clock_init+0x188>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2054:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2056:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2058:	2d25      	cmp	r5, #37	; 0x25
    205a:	d1f8      	bne.n	204e <system_clock_init+0x26>
	config->frequency           = 32768UL;
    205c:	2280      	movs	r2, #128	; 0x80
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    205e:	a807      	add	r0, sp, #28
    2060:	2300      	movs	r3, #0
	config->frequency           = 32768UL;
    2062:	0212      	lsls	r2, r2, #8
    2064:	6082      	str	r2, [r0, #8]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2066:	2106      	movs	r1, #6
	config->enable_32khz_output = true;
    2068:	2201      	movs	r2, #1
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    206a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    206c:	7083      	strb	r3, [r0, #2]
	config->enable_1khz_output  = false;
    206e:	70c3      	strb	r3, [r0, #3]
	config->write_once          = false;
    2070:	7383      	strb	r3, [r0, #14]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2072:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2074:	4b4f      	ldr	r3, [pc, #316]	; (21b4 <system_clock_init+0x18c>)
	config->enable_32khz_output = true;
    2076:	7102      	strb	r2, [r0, #4]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2078:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    207a:	7302      	strb	r2, [r0, #12]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    207c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    207e:	4b4e      	ldr	r3, [pc, #312]	; (21b8 <system_clock_init+0x190>)
    2080:	2005      	movs	r0, #5
    2082:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2084:	2302      	movs	r3, #2
    2086:	9a01      	ldr	r2, [sp, #4]
    2088:	68d2      	ldr	r2, [r2, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    208a:	421a      	tst	r2, r3
    208c:	d0fb      	beq.n	2086 <system_clock_init+0x5e>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    208e:	2300      	movs	r3, #0
	config->fine_value      = 0xff / 4; /* Midpoint */
    2090:	223f      	movs	r2, #63	; 0x3f
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2092:	8063      	strh	r3, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2094:	80a3      	strh	r3, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2096:	71a3      	strb	r3, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2098:	71e3      	strb	r3, [r4, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    209a:	8162      	strh	r2, [r4, #10]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    209c:	7063      	strb	r3, [r4, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    209e:	3a3b      	subs	r2, #59	; 0x3b
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    20a0:	4b46      	ldr	r3, [pc, #280]	; (21bc <system_clock_init+0x194>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    20a2:	7022      	strb	r2, [r4, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    20a4:	681b      	ldr	r3, [r3, #0]
    20a6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    20a8:	2b3f      	cmp	r3, #63	; 0x3f
    20aa:	d100      	bne.n	20ae <system_clock_init+0x86>
		coarse = 0x1f;
    20ac:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    20ae:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    20b0:	23b7      	movs	r3, #183	; 0xb7
    20b2:	00db      	lsls	r3, r3, #3
    20b4:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    20b6:	2303      	movs	r3, #3
    20b8:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    20ba:	231f      	movs	r3, #31

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    20bc:	2500      	movs	r5, #0
	config->on_demand       = true;
    20be:	2601      	movs	r6, #1
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    20c0:	81e3      	strh	r3, [r4, #14]
	system_clock_source_dfll_set_config(&dfll_conf);
    20c2:	0020      	movs	r0, r4
    20c4:	4b3e      	ldr	r3, [pc, #248]	; (21c0 <system_clock_init+0x198>)
    20c6:	4798      	blx	r3
    20c8:	a803      	add	r0, sp, #12
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    20ca:	4b3e      	ldr	r3, [pc, #248]	; (21c4 <system_clock_init+0x19c>)
    20cc:	7086      	strb	r6, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    20ce:	7005      	strb	r5, [r0, #0]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    20d0:	7046      	strb	r6, [r0, #1]
	system_clock_source_osc8m_set_config(&osc8m_conf);
    20d2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    20d4:	4b38      	ldr	r3, [pc, #224]	; (21b8 <system_clock_init+0x190>)
    20d6:	2006      	movs	r0, #6
    20d8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    20da:	4b3b      	ldr	r3, [pc, #236]	; (21c8 <system_clock_init+0x1a0>)
    20dc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    20de:	2305      	movs	r3, #5
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    20e0:	ac04      	add	r4, sp, #16
    20e2:	0021      	movs	r1, r4
    20e4:	7023      	strb	r3, [r4, #0]
    20e6:	0030      	movs	r0, r6
    20e8:	4b38      	ldr	r3, [pc, #224]	; (21cc <system_clock_init+0x1a4>)
    20ea:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    20ec:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    20ee:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    20f0:	7265      	strb	r5, [r4, #9]
    20f2:	4798      	blx	r3
    20f4:	4f36      	ldr	r7, [pc, #216]	; (21d0 <system_clock_init+0x1a8>)
    20f6:	0030      	movs	r0, r6
    20f8:	47b8      	blx	r7
	config->source_clock       = GCLK_SOURCE_OSC8M;
    20fa:	2306      	movs	r3, #6
    20fc:	7023      	strb	r3, [r4, #0]
    20fe:	2310      	movs	r3, #16
    2100:	0021      	movs	r1, r4
    2102:	6063      	str	r3, [r4, #4]
    2104:	2003      	movs	r0, #3
    2106:	4b31      	ldr	r3, [pc, #196]	; (21cc <system_clock_init+0x1a4>)
	config->high_when_disabled = false;
    2108:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    210a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    210c:	7265      	strb	r5, [r4, #9]
    210e:	4798      	blx	r3
    2110:	2003      	movs	r0, #3
    2112:	47b8      	blx	r7
    2114:	2303      	movs	r3, #3
    2116:	7023      	strb	r3, [r4, #0]
    2118:	2320      	movs	r3, #32
    211a:	0021      	movs	r1, r4
    211c:	6063      	str	r3, [r4, #4]
    211e:	2004      	movs	r0, #4
    2120:	4b2a      	ldr	r3, [pc, #168]	; (21cc <system_clock_init+0x1a4>)
	config->high_when_disabled = false;
    2122:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    2124:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2126:	7265      	strb	r5, [r4, #9]
    2128:	4798      	blx	r3
    212a:	2004      	movs	r0, #4
    212c:	47b8      	blx	r7
    212e:	2307      	movs	r3, #7
    2130:	0021      	movs	r1, r4
    2132:	7023      	strb	r3, [r4, #0]
    2134:	2005      	movs	r0, #5
    2136:	4b25      	ldr	r3, [pc, #148]	; (21cc <system_clock_init+0x1a4>)
	config->division_factor    = 1;
    2138:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    213a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    213c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    213e:	7265      	strb	r5, [r4, #9]
    2140:	4798      	blx	r3
    2142:	2005      	movs	r0, #5
    2144:	47b8      	blx	r7
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2146:	2306      	movs	r3, #6
    2148:	0021      	movs	r1, r4
    214a:	7023      	strb	r3, [r4, #0]
    214c:	2006      	movs	r0, #6
    214e:	4b1f      	ldr	r3, [pc, #124]	; (21cc <system_clock_init+0x1a4>)
	config->division_factor    = 1;
    2150:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2152:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    2154:	7265      	strb	r5, [r4, #9]
    2156:	7226      	strb	r6, [r4, #8]
    2158:	4798      	blx	r3
    215a:	2006      	movs	r0, #6
    215c:	47b8      	blx	r7
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    215e:	0021      	movs	r1, r4
    2160:	0028      	movs	r0, r5
    2162:	4b13      	ldr	r3, [pc, #76]	; (21b0 <system_clock_init+0x188>)
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2164:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2166:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2168:	0028      	movs	r0, r5
    216a:	4b1a      	ldr	r3, [pc, #104]	; (21d4 <system_clock_init+0x1ac>)
    216c:	4798      	blx	r3
    216e:	4b1a      	ldr	r3, [pc, #104]	; (21d8 <system_clock_init+0x1b0>)
    2170:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2172:	22d0      	movs	r2, #208	; 0xd0
    2174:	9b01      	ldr	r3, [sp, #4]
    2176:	68db      	ldr	r3, [r3, #12]
    2178:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    217a:	2bd0      	cmp	r3, #208	; 0xd0
    217c:	d1fa      	bne.n	2174 <system_clock_init+0x14c>
	PM->CPUSEL.reg = (uint32_t)divider;
    217e:	2500      	movs	r5, #0
    2180:	4b16      	ldr	r3, [pc, #88]	; (21dc <system_clock_init+0x1b4>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2182:	2207      	movs	r2, #7
    2184:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2186:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2188:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    218a:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
    218c:	2301      	movs	r3, #1
    218e:	0021      	movs	r1, r4
    2190:	6063      	str	r3, [r4, #4]
    2192:	7223      	strb	r3, [r4, #8]
    2194:	0028      	movs	r0, r5
    2196:	4b0d      	ldr	r3, [pc, #52]	; (21cc <system_clock_init+0x1a4>)
    2198:	7022      	strb	r2, [r4, #0]
	config->high_when_disabled = false;
    219a:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    219c:	7265      	strb	r5, [r4, #9]
    219e:	4798      	blx	r3
    21a0:	0028      	movs	r0, r5
    21a2:	47b8      	blx	r7
#endif
}
    21a4:	b011      	add	sp, #68	; 0x44
    21a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21a8:	40000800 	.word	0x40000800
    21ac:	41004000 	.word	0x41004000
    21b0:	00002401 	.word	0x00002401
    21b4:	00001ea9 	.word	0x00001ea9
    21b8:	00001fc1 	.word	0x00001fc1
    21bc:	00806024 	.word	0x00806024
    21c0:	00001f45 	.word	0x00001f45
    21c4:	00001e6d 	.word	0x00001e6d
    21c8:	000021ed 	.word	0x000021ed
    21cc:	0000220d 	.word	0x0000220d
    21d0:	000022b1 	.word	0x000022b1
    21d4:	00002379 	.word	0x00002379
    21d8:	00001da5 	.word	0x00001da5
    21dc:	40000400 	.word	0x40000400

000021e0 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21e0:	4b01      	ldr	r3, [pc, #4]	; (21e8 <system_gclk_is_syncing+0x8>)
    21e2:	7858      	ldrb	r0, [r3, #1]
    21e4:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    21e6:	4770      	bx	lr
    21e8:	40000c00 	.word	0x40000c00

000021ec <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    21ec:	2308      	movs	r3, #8
    21ee:	4a05      	ldr	r2, [pc, #20]	; (2204 <system_gclk_init+0x18>)
    21f0:	6991      	ldr	r1, [r2, #24]
    21f2:	430b      	orrs	r3, r1
    21f4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    21f6:	2301      	movs	r3, #1
    21f8:	4a03      	ldr	r2, [pc, #12]	; (2208 <system_gclk_init+0x1c>)
    21fa:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    21fc:	7811      	ldrb	r1, [r2, #0]
    21fe:	4219      	tst	r1, r3
    2200:	d1fc      	bne.n	21fc <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    2202:	4770      	bx	lr
    2204:	40000400 	.word	0x40000400
    2208:	40000c00 	.word	0x40000c00

0000220c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    220e:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2210:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2212:	0224      	lsls	r4, r4, #8
{
    2214:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2216:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2218:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    221a:	2b00      	cmp	r3, #0
    221c:	d002      	beq.n	2224 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    221e:	2380      	movs	r3, #128	; 0x80
    2220:	02db      	lsls	r3, r3, #11
    2222:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2224:	7a4b      	ldrb	r3, [r1, #9]
    2226:	2b00      	cmp	r3, #0
    2228:	d002      	beq.n	2230 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    222a:	2380      	movs	r3, #128	; 0x80
    222c:	031b      	lsls	r3, r3, #12
    222e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2230:	684b      	ldr	r3, [r1, #4]
    2232:	2b01      	cmp	r3, #1
    2234:	d912      	bls.n	225c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2236:	1e5d      	subs	r5, r3, #1
    2238:	401d      	ands	r5, r3
    223a:	2202      	movs	r2, #2
    223c:	2d00      	cmp	r5, #0
    223e:	d006      	beq.n	224e <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2240:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2242:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    2244:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2246:	029b      	lsls	r3, r3, #10
    2248:	e007      	b.n	225a <system_gclk_gen_set_config+0x4e>
				div2_count++;
    224a:	3501      	adds	r5, #1
						mask <<= 1) {
    224c:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    224e:	429a      	cmp	r2, r3
    2250:	d3fb      	bcc.n	224a <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2252:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2254:	022d      	lsls	r5, r5, #8
    2256:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2258:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    225a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    225c:	7a0b      	ldrb	r3, [r1, #8]
    225e:	2b00      	cmp	r3, #0
    2260:	d002      	beq.n	2268 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2262:	2380      	movs	r3, #128	; 0x80
    2264:	039b      	lsls	r3, r3, #14
    2266:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    2268:	4f0c      	ldr	r7, [pc, #48]	; (229c <system_gclk_gen_set_config+0x90>)
    226a:	47b8      	blx	r7
    226c:	2800      	cmp	r0, #0
    226e:	d1fb      	bne.n	2268 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    2270:	4b0b      	ldr	r3, [pc, #44]	; (22a0 <system_gclk_gen_set_config+0x94>)
    2272:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2274:	4b0b      	ldr	r3, [pc, #44]	; (22a4 <system_gclk_gen_set_config+0x98>)
    2276:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2278:	47b8      	blx	r7
    227a:	2800      	cmp	r0, #0
    227c:	d1fc      	bne.n	2278 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    227e:	4b0a      	ldr	r3, [pc, #40]	; (22a8 <system_gclk_gen_set_config+0x9c>)
    2280:	609d      	str	r5, [r3, #8]
    2282:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    2284:	47b8      	blx	r7
    2286:	2800      	cmp	r0, #0
    2288:	d1fc      	bne.n	2284 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    228a:	2280      	movs	r2, #128	; 0x80
    228c:	686b      	ldr	r3, [r5, #4]
    228e:	0252      	lsls	r2, r2, #9
    2290:	4013      	ands	r3, r2
    2292:	431c      	orrs	r4, r3
    2294:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    2296:	4b05      	ldr	r3, [pc, #20]	; (22ac <system_gclk_gen_set_config+0xa0>)
    2298:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    229a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    229c:	000021e1 	.word	0x000021e1
    22a0:	00001d31 	.word	0x00001d31
    22a4:	40000c08 	.word	0x40000c08
    22a8:	40000c00 	.word	0x40000c00
    22ac:	00001d65 	.word	0x00001d65

000022b0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    22b0:	b570      	push	{r4, r5, r6, lr}
    22b2:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    22b4:	4c09      	ldr	r4, [pc, #36]	; (22dc <system_gclk_gen_enable+0x2c>)
    22b6:	47a0      	blx	r4
    22b8:	2800      	cmp	r0, #0
    22ba:	d1fb      	bne.n	22b4 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    22bc:	4b08      	ldr	r3, [pc, #32]	; (22e0 <system_gclk_gen_enable+0x30>)
    22be:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    22c0:	4b08      	ldr	r3, [pc, #32]	; (22e4 <system_gclk_gen_enable+0x34>)
    22c2:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    22c4:	47a0      	blx	r4
    22c6:	2800      	cmp	r0, #0
    22c8:	d1fc      	bne.n	22c4 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    22ca:	2380      	movs	r3, #128	; 0x80
    22cc:	4a06      	ldr	r2, [pc, #24]	; (22e8 <system_gclk_gen_enable+0x38>)
    22ce:	025b      	lsls	r3, r3, #9
    22d0:	6851      	ldr	r1, [r2, #4]
    22d2:	430b      	orrs	r3, r1
    22d4:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    22d6:	4b05      	ldr	r3, [pc, #20]	; (22ec <system_gclk_gen_enable+0x3c>)
    22d8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    22da:	bd70      	pop	{r4, r5, r6, pc}
    22dc:	000021e1 	.word	0x000021e1
    22e0:	00001d31 	.word	0x00001d31
    22e4:	40000c04 	.word	0x40000c04
    22e8:	40000c00 	.word	0x40000c00
    22ec:	00001d65 	.word	0x00001d65

000022f0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    22f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    22f2:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    22f4:	4e18      	ldr	r6, [pc, #96]	; (2358 <system_gclk_gen_get_hz+0x68>)
    22f6:	47b0      	blx	r6
    22f8:	2800      	cmp	r0, #0
    22fa:	d1fb      	bne.n	22f4 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    22fc:	4b17      	ldr	r3, [pc, #92]	; (235c <system_gclk_gen_get_hz+0x6c>)
    22fe:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2300:	4b17      	ldr	r3, [pc, #92]	; (2360 <system_gclk_gen_get_hz+0x70>)
    2302:	701f      	strb	r7, [r3, #0]
    2304:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    2306:	47b0      	blx	r6
    2308:	2800      	cmp	r0, #0
    230a:	d1fc      	bne.n	2306 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    230c:	4d15      	ldr	r5, [pc, #84]	; (2364 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    230e:	4b16      	ldr	r3, [pc, #88]	; (2368 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2310:	6868      	ldr	r0, [r5, #4]
    2312:	04c0      	lsls	r0, r0, #19
    2314:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2316:	4798      	blx	r3
    2318:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    231a:	9b01      	ldr	r3, [sp, #4]
    231c:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    231e:	686b      	ldr	r3, [r5, #4]
    2320:	02db      	lsls	r3, r3, #11
    2322:	0fdb      	lsrs	r3, r3, #31
    2324:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2326:	4b11      	ldr	r3, [pc, #68]	; (236c <system_gclk_gen_get_hz+0x7c>)
    2328:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    232a:	47b0      	blx	r6
    232c:	2800      	cmp	r0, #0
    232e:	d1fc      	bne.n	232a <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2330:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    2332:	4b0f      	ldr	r3, [pc, #60]	; (2370 <system_gclk_gen_get_hz+0x80>)
    2334:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2336:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2338:	022d      	lsls	r5, r5, #8
    233a:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    233c:	2b00      	cmp	r3, #0
    233e:	d108      	bne.n	2352 <system_gclk_gen_get_hz+0x62>
    2340:	2d01      	cmp	r5, #1
    2342:	d904      	bls.n	234e <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    2344:	0020      	movs	r0, r4
    2346:	0029      	movs	r1, r5
    2348:	4b0a      	ldr	r3, [pc, #40]	; (2374 <system_gclk_gen_get_hz+0x84>)
    234a:	4798      	blx	r3
    234c:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    234e:	0020      	movs	r0, r4
    2350:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    2352:	3501      	adds	r5, #1
    2354:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    2356:	e7fa      	b.n	234e <system_gclk_gen_get_hz+0x5e>
    2358:	000021e1 	.word	0x000021e1
    235c:	00001d31 	.word	0x00001d31
    2360:	40000c04 	.word	0x40000c04
    2364:	40000c00 	.word	0x40000c00
    2368:	00001ddd 	.word	0x00001ddd
    236c:	40000c08 	.word	0x40000c08
    2370:	00001d65 	.word	0x00001d65
    2374:	00002add 	.word	0x00002add

00002378 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2378:	b510      	push	{r4, lr}
    237a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    237c:	4b06      	ldr	r3, [pc, #24]	; (2398 <system_gclk_chan_enable+0x20>)
    237e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2380:	4b06      	ldr	r3, [pc, #24]	; (239c <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2382:	4a07      	ldr	r2, [pc, #28]	; (23a0 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2384:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2386:	2380      	movs	r3, #128	; 0x80
    2388:	8851      	ldrh	r1, [r2, #2]
    238a:	01db      	lsls	r3, r3, #7
    238c:	430b      	orrs	r3, r1
    238e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2390:	4b04      	ldr	r3, [pc, #16]	; (23a4 <system_gclk_chan_enable+0x2c>)
    2392:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2394:	bd10      	pop	{r4, pc}
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	00001d31 	.word	0x00001d31
    239c:	40000c02 	.word	0x40000c02
    23a0:	40000c00 	.word	0x40000c00
    23a4:	00001d65 	.word	0x00001d65

000023a8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    23a8:	b510      	push	{r4, lr}
    23aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    23ac:	4b0e      	ldr	r3, [pc, #56]	; (23e8 <system_gclk_chan_disable+0x40>)
    23ae:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    23b0:	4b0e      	ldr	r3, [pc, #56]	; (23ec <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    23b2:	4a0f      	ldr	r2, [pc, #60]	; (23f0 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    23b4:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    23b6:	4b0f      	ldr	r3, [pc, #60]	; (23f4 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    23b8:	4c0f      	ldr	r4, [pc, #60]	; (23f8 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    23ba:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    23bc:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    23be:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    23c0:	4011      	ands	r1, r2
    23c2:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    23c4:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    23c6:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    23c8:	4021      	ands	r1, r4
    23ca:	8059      	strh	r1, [r3, #2]
    23cc:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    23ce:	2280      	movs	r2, #128	; 0x80
    23d0:	01d2      	lsls	r2, r2, #7
    23d2:	885c      	ldrh	r4, [r3, #2]
    23d4:	4214      	tst	r4, r2
    23d6:	d1fc      	bne.n	23d2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    23d8:	885a      	ldrh	r2, [r3, #2]
    23da:	0200      	lsls	r0, r0, #8
    23dc:	400a      	ands	r2, r1
    23de:	4302      	orrs	r2, r0
    23e0:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    23e2:	4b06      	ldr	r3, [pc, #24]	; (23fc <system_gclk_chan_disable+0x54>)
    23e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    23e6:	bd10      	pop	{r4, pc}
    23e8:	00001d31 	.word	0x00001d31
    23ec:	40000c02 	.word	0x40000c02
    23f0:	fffff0ff 	.word	0xfffff0ff
    23f4:	40000c00 	.word	0x40000c00
    23f8:	ffffbfff 	.word	0xffffbfff
    23fc:	00001d65 	.word	0x00001d65

00002400 <system_gclk_chan_set_config>:
{
    2400:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2402:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    2404:	4b03      	ldr	r3, [pc, #12]	; (2414 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2406:	0224      	lsls	r4, r4, #8
    2408:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    240a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    240c:	4b02      	ldr	r3, [pc, #8]	; (2418 <system_gclk_chan_set_config+0x18>)
    240e:	b2a4      	uxth	r4, r4
    2410:	805c      	strh	r4, [r3, #2]
}
    2412:	bd10      	pop	{r4, pc}
    2414:	000023a9 	.word	0x000023a9
    2418:	40000c00 	.word	0x40000c00

0000241c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    241c:	b510      	push	{r4, lr}
    241e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2420:	4b06      	ldr	r3, [pc, #24]	; (243c <system_gclk_chan_get_hz+0x20>)
    2422:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2424:	4b06      	ldr	r3, [pc, #24]	; (2440 <system_gclk_chan_get_hz+0x24>)
    2426:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2428:	4b06      	ldr	r3, [pc, #24]	; (2444 <system_gclk_chan_get_hz+0x28>)
    242a:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    242c:	4b06      	ldr	r3, [pc, #24]	; (2448 <system_gclk_chan_get_hz+0x2c>)
    242e:	0524      	lsls	r4, r4, #20
    2430:	0f24      	lsrs	r4, r4, #28
    2432:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2434:	0020      	movs	r0, r4
    2436:	4b05      	ldr	r3, [pc, #20]	; (244c <system_gclk_chan_get_hz+0x30>)
    2438:	4798      	blx	r3
}
    243a:	bd10      	pop	{r4, pc}
    243c:	00001d31 	.word	0x00001d31
    2440:	40000c02 	.word	0x40000c02
    2444:	40000c00 	.word	0x40000c00
    2448:	00001d65 	.word	0x00001d65
    244c:	000022f1 	.word	0x000022f1

00002450 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2450:	78d3      	ldrb	r3, [r2, #3]
{
    2452:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    2454:	2b00      	cmp	r3, #0
    2456:	d135      	bne.n	24c4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2458:	7814      	ldrb	r4, [r2, #0]
    245a:	2c80      	cmp	r4, #128	; 0x80
    245c:	d003      	beq.n	2466 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    245e:	2380      	movs	r3, #128	; 0x80
    2460:	0624      	lsls	r4, r4, #24
    2462:	025b      	lsls	r3, r3, #9
    2464:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2466:	2502      	movs	r5, #2
    2468:	7854      	ldrb	r4, [r2, #1]
    246a:	43ac      	bics	r4, r5
    246c:	d106      	bne.n	247c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    246e:	7894      	ldrb	r4, [r2, #2]
    2470:	2c00      	cmp	r4, #0
    2472:	d124      	bne.n	24be <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2474:	2480      	movs	r4, #128	; 0x80
    2476:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2478:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    247a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    247c:	7854      	ldrb	r4, [r2, #1]
    247e:	3c01      	subs	r4, #1
    2480:	2c01      	cmp	r4, #1
    2482:	d801      	bhi.n	2488 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2484:	4c12      	ldr	r4, [pc, #72]	; (24d0 <_system_pinmux_config+0x80>)
    2486:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2488:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    248a:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    248c:	05e4      	lsls	r4, r4, #23
    248e:	432c      	orrs	r4, r5
    2490:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2492:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2494:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2496:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2498:	0624      	lsls	r4, r4, #24
    249a:	432c      	orrs	r4, r5
    249c:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    249e:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    24a0:	78d4      	ldrb	r4, [r2, #3]
    24a2:	2c00      	cmp	r4, #0
    24a4:	d10a      	bne.n	24bc <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    24a6:	035b      	lsls	r3, r3, #13
    24a8:	d503      	bpl.n	24b2 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    24aa:	7893      	ldrb	r3, [r2, #2]
    24ac:	2b01      	cmp	r3, #1
    24ae:	d10c      	bne.n	24ca <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    24b0:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    24b2:	7853      	ldrb	r3, [r2, #1]
    24b4:	3b01      	subs	r3, #1
    24b6:	2b01      	cmp	r3, #1
    24b8:	d800      	bhi.n	24bc <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    24ba:	6081      	str	r1, [r0, #8]
		}
	}
}
    24bc:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    24be:	24c0      	movs	r4, #192	; 0xc0
    24c0:	02e4      	lsls	r4, r4, #11
    24c2:	e7d9      	b.n	2478 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    24c4:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    24c6:	2300      	movs	r3, #0
    24c8:	e7de      	b.n	2488 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    24ca:	6141      	str	r1, [r0, #20]
    24cc:	e7f1      	b.n	24b2 <_system_pinmux_config+0x62>
    24ce:	46c0      	nop			; (mov r8, r8)
    24d0:	fffbffff 	.word	0xfffbffff

000024d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    24d4:	b510      	push	{r4, lr}
    24d6:	0003      	movs	r3, r0
    24d8:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    24da:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    24dc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    24de:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    24e0:	4281      	cmp	r1, r0
    24e2:	d102      	bne.n	24ea <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    24e4:	4904      	ldr	r1, [pc, #16]	; (24f8 <system_pinmux_pin_set_config+0x24>)
    24e6:	01e0      	lsls	r0, r4, #7
    24e8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    24ea:	211f      	movs	r1, #31
    24ec:	400b      	ands	r3, r1
    24ee:	391e      	subs	r1, #30
    24f0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    24f2:	4b02      	ldr	r3, [pc, #8]	; (24fc <system_pinmux_pin_set_config+0x28>)
    24f4:	4798      	blx	r3
}
    24f6:	bd10      	pop	{r4, pc}
    24f8:	41004400 	.word	0x41004400
    24fc:	00002451 	.word	0x00002451

00002500 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2500:	4770      	bx	lr
	...

00002504 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2504:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2506:	4b05      	ldr	r3, [pc, #20]	; (251c <system_init+0x18>)
    2508:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    250a:	4b05      	ldr	r3, [pc, #20]	; (2520 <system_init+0x1c>)
    250c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    250e:	4b05      	ldr	r3, [pc, #20]	; (2524 <system_init+0x20>)
    2510:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2512:	4b05      	ldr	r3, [pc, #20]	; (2528 <system_init+0x24>)
    2514:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2516:	4b05      	ldr	r3, [pc, #20]	; (252c <system_init+0x28>)
    2518:	4798      	blx	r3
}
    251a:	bd10      	pop	{r4, pc}
    251c:	00002029 	.word	0x00002029
    2520:	00001d2d 	.word	0x00001d2d
    2524:	00002501 	.word	0x00002501
    2528:	00000591 	.word	0x00000591
    252c:	00002501 	.word	0x00002501

00002530 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2530:	e7fe      	b.n	2530 <Dummy_Handler>
	...

00002534 <Reset_Handler>:
        if (pSrc != pDest) {
    2534:	4821      	ldr	r0, [pc, #132]	; (25bc <Reset_Handler+0x88>)
    2536:	4922      	ldr	r1, [pc, #136]	; (25c0 <Reset_Handler+0x8c>)
{
    2538:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    253a:	4288      	cmp	r0, r1
    253c:	d004      	beq.n	2548 <Reset_Handler+0x14>
    253e:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    2540:	4c20      	ldr	r4, [pc, #128]	; (25c4 <Reset_Handler+0x90>)
    2542:	18ca      	adds	r2, r1, r3
    2544:	42a2      	cmp	r2, r4
    2546:	d332      	bcc.n	25ae <Reset_Handler+0x7a>
                *pDest++ = 0;
    2548:	2100      	movs	r1, #0
    254a:	4b1f      	ldr	r3, [pc, #124]	; (25c8 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    254c:	4a1f      	ldr	r2, [pc, #124]	; (25cc <Reset_Handler+0x98>)
    254e:	4293      	cmp	r3, r2
    2550:	d331      	bcc.n	25b6 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2552:	21ff      	movs	r1, #255	; 0xff
    2554:	4b1e      	ldr	r3, [pc, #120]	; (25d0 <Reset_Handler+0x9c>)
    2556:	4a1f      	ldr	r2, [pc, #124]	; (25d4 <Reset_Handler+0xa0>)
    2558:	438b      	bics	r3, r1
    255a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    255c:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    255e:	250c      	movs	r5, #12
    2560:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    2562:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2564:	4b1c      	ldr	r3, [pc, #112]	; (25d8 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2566:	481d      	ldr	r0, [pc, #116]	; (25dc <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2568:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    256a:	78c3      	ldrb	r3, [r0, #3]
    256c:	39fc      	subs	r1, #252	; 0xfc
    256e:	438b      	bics	r3, r1
    2570:	4313      	orrs	r3, r2
    2572:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2574:	78c3      	ldrb	r3, [r0, #3]
    2576:	43ab      	bics	r3, r5
    2578:	4323      	orrs	r3, r4
    257a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    257c:	4b18      	ldr	r3, [pc, #96]	; (25e0 <Reset_Handler+0xac>)
    257e:	7b98      	ldrb	r0, [r3, #14]
    2580:	43b0      	bics	r0, r6
    2582:	0006      	movs	r6, r0
    2584:	2020      	movs	r0, #32
    2586:	4330      	orrs	r0, r6
    2588:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    258a:	7b98      	ldrb	r0, [r3, #14]
    258c:	43a8      	bics	r0, r5
    258e:	4304      	orrs	r4, r0
    2590:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2592:	7b98      	ldrb	r0, [r3, #14]
    2594:	4388      	bics	r0, r1
    2596:	4302      	orrs	r2, r0
    2598:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    259a:	2380      	movs	r3, #128	; 0x80
    259c:	4a11      	ldr	r2, [pc, #68]	; (25e4 <Reset_Handler+0xb0>)
    259e:	6851      	ldr	r1, [r2, #4]
    25a0:	430b      	orrs	r3, r1
    25a2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    25a4:	4b10      	ldr	r3, [pc, #64]	; (25e8 <Reset_Handler+0xb4>)
    25a6:	4798      	blx	r3
        main();
    25a8:	4b10      	ldr	r3, [pc, #64]	; (25ec <Reset_Handler+0xb8>)
    25aa:	4798      	blx	r3
    25ac:	e7fe      	b.n	25ac <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    25ae:	58c5      	ldr	r5, [r0, r3]
    25b0:	3304      	adds	r3, #4
    25b2:	6015      	str	r5, [r2, #0]
    25b4:	e7c5      	b.n	2542 <Reset_Handler+0xe>
                *pDest++ = 0;
    25b6:	c302      	stmia	r3!, {r1}
    25b8:	e7c9      	b.n	254e <Reset_Handler+0x1a>
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	00003884 	.word	0x00003884
    25c0:	20000000 	.word	0x20000000
    25c4:	20000074 	.word	0x20000074
    25c8:	20000074 	.word	0x20000074
    25cc:	20000568 	.word	0x20000568
    25d0:	00000000 	.word	0x00000000
    25d4:	e000ed00 	.word	0xe000ed00
    25d8:	410070fc 	.word	0x410070fc
    25dc:	41005000 	.word	0x41005000
    25e0:	41004800 	.word	0x41004800
    25e4:	41004000 	.word	0x41004000
    25e8:	00002e9d 	.word	0x00002e9d
    25ec:	000028ad 	.word	0x000028ad

000025f0 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    25f0:	4b05      	ldr	r3, [pc, #20]	; (2608 <_sbrk+0x18>)
{
    25f2:	0002      	movs	r2, r0
	if (heap == NULL) {
    25f4:	6819      	ldr	r1, [r3, #0]
    25f6:	2900      	cmp	r1, #0
    25f8:	d101      	bne.n	25fe <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    25fa:	4904      	ldr	r1, [pc, #16]	; (260c <_sbrk+0x1c>)
    25fc:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
    25fe:	6818      	ldr	r0, [r3, #0]

	heap += incr;
    2600:	1882      	adds	r2, r0, r2
    2602:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
}
    2604:	4770      	bx	lr
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	20000248 	.word	0x20000248
    260c:	20002568 	.word	0x20002568

00002610 <configure_eeprom>:
}struct_audio_details_page;

void configure_eeprom(void);

void configure_eeprom(void)
{
    2610:	b510      	push	{r4, lr}
	enum status_code error_code = eeprom_emulator_init();
    2612:	4c07      	ldr	r4, [pc, #28]	; (2630 <configure_eeprom+0x20>)
    2614:	47a0      	blx	r4
	if (error_code == STATUS_ERR_NO_MEMORY)
    2616:	2816      	cmp	r0, #22
    2618:	d103      	bne.n	2622 <configure_eeprom+0x12>
	{
		#ifdef LCD_SUPPORT
		lcd_printf("SET EEPROM FUSE");
    261a:	4806      	ldr	r0, [pc, #24]	; (2634 <configure_eeprom+0x24>)
    261c:	4b06      	ldr	r3, [pc, #24]	; (2638 <configure_eeprom+0x28>)
    261e:	4798      	blx	r3
    2620:	e7fe      	b.n	2620 <configure_eeprom+0x10>
		while (true);
		#endif
	}
	else if (error_code != STATUS_OK)
    2622:	2800      	cmp	r0, #0
    2624:	d002      	beq.n	262c <configure_eeprom+0x1c>
	{
		eeprom_emulator_erase_memory();
    2626:	4b05      	ldr	r3, [pc, #20]	; (263c <configure_eeprom+0x2c>)
    2628:	4798      	blx	r3
		eeprom_emulator_init();
    262a:	47a0      	blx	r4
	}
}
    262c:	bd10      	pop	{r4, pc}
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	000019b9 	.word	0x000019b9
    2634:	00003805 	.word	0x00003805
    2638:	0000051d 	.word	0x0000051d
    263c:	00001a85 	.word	0x00001a85

00002640 <Read_EEprom>:

uint8_t page_data[EEPROM_PAGE_SIZE];

void Read_EEprom(void);
void Read_EEprom(void)
{
    2640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configure_eeprom();
    2642:	4b4b      	ldr	r3, [pc, #300]	; (2770 <Read_EEprom+0x130>)
    2644:	4798      	blx	r3
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    2646:	4c4b      	ldr	r4, [pc, #300]	; (2774 <Read_EEprom+0x134>)
    2648:	4b4b      	ldr	r3, [pc, #300]	; (2778 <Read_EEprom+0x138>)
    264a:	0021      	movs	r1, r4
    264c:	2000      	movs	r0, #0
    264e:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
    2650:	4d4a      	ldr	r5, [pc, #296]	; (277c <Read_EEprom+0x13c>)
    2652:	4b4b      	ldr	r3, [pc, #300]	; (2780 <Read_EEprom+0x140>)
    2654:	221c      	movs	r2, #28
    2656:	0021      	movs	r1, r4
    2658:	0028      	movs	r0, r5
    265a:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
    265c:	792b      	ldrb	r3, [r5, #4]
    265e:	2b55      	cmp	r3, #85	; 0x55
    2660:	d01c      	beq.n	269c <Read_EEprom+0x5c>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
    2662:	2600      	movs	r6, #0
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
    2664:	2355      	movs	r3, #85	; 0x55
		bootloader_parameter.firmware_update_process_completed = false;
		bootloader_parameter.firmware_update_error_code = 0;
		bootloader_parameter.retries= 0;
		
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
    2666:	4f47      	ldr	r7, [pc, #284]	; (2784 <Read_EEprom+0x144>)
    2668:	2210      	movs	r2, #16
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
    266a:	712b      	strb	r3, [r5, #4]
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
    266c:	0031      	movs	r1, r6
    266e:	4b46      	ldr	r3, [pc, #280]	; (2788 <Read_EEprom+0x148>)
    2670:	0038      	movs	r0, r7
		bootloader_parameter.ulongintDiscard		   = 0;
    2672:	602e      	str	r6, [r5, #0]
		bootloader_parameter.firmware_download_pending = false;
    2674:	716e      	strb	r6, [r5, #5]
		bootloader_parameter.firmware_update_process_completed = false;
    2676:	71ae      	strb	r6, [r5, #6]
		bootloader_parameter.firmware_update_error_code = 0;
    2678:	71ee      	strb	r6, [r5, #7]
		bootloader_parameter.retries= 0;
    267a:	722e      	strb	r6, [r5, #8]
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
    267c:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
    267e:	4943      	ldr	r1, [pc, #268]	; (278c <Read_EEprom+0x14c>)
    2680:	4b43      	ldr	r3, [pc, #268]	; (2790 <Read_EEprom+0x150>)
    2682:	0038      	movs	r0, r7
    2684:	4798      	blx	r3
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    2686:	221c      	movs	r2, #28
    2688:	0029      	movs	r1, r5
    268a:	4b3d      	ldr	r3, [pc, #244]	; (2780 <Read_EEprom+0x140>)
    268c:	0020      	movs	r0, r4
    268e:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    2690:	4b40      	ldr	r3, [pc, #256]	; (2794 <Read_EEprom+0x154>)
    2692:	0021      	movs	r1, r4
    2694:	0030      	movs	r0, r6
    2696:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    2698:	4b3f      	ldr	r3, [pc, #252]	; (2798 <Read_EEprom+0x158>)
    269a:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
    269c:	0021      	movs	r1, r4
    269e:	4b36      	ldr	r3, [pc, #216]	; (2778 <Read_EEprom+0x138>)
    26a0:	2001      	movs	r0, #1
    26a2:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
    26a4:	4d3d      	ldr	r5, [pc, #244]	; (279c <Read_EEprom+0x15c>)
    26a6:	4b36      	ldr	r3, [pc, #216]	; (2780 <Read_EEprom+0x140>)
    26a8:	2238      	movs	r2, #56	; 0x38
    26aa:	0021      	movs	r1, r4
    26ac:	0028      	movs	r0, r5
    26ae:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
    26b0:	792b      	ldrb	r3, [r5, #4]
    26b2:	2b55      	cmp	r3, #85	; 0x55
    26b4:	d020      	beq.n	26f8 <Read_EEprom+0xb8>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
    26b6:	2600      	movs	r6, #0
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
    26b8:	2355      	movs	r3, #85	; 0x55
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
    26ba:	4f39      	ldr	r7, [pc, #228]	; (27a0 <Read_EEprom+0x160>)
    26bc:	221e      	movs	r2, #30
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
    26be:	712b      	strb	r3, [r5, #4]
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
    26c0:	0031      	movs	r1, r6
    26c2:	4b31      	ldr	r3, [pc, #196]	; (2788 <Read_EEprom+0x148>)
    26c4:	0038      	movs	r0, r7
		ftp_path_parameter.ulongintDiscard			   = 0;
    26c6:	602e      	str	r6, [r5, #0]
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
    26c8:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
    26ca:	4936      	ldr	r1, [pc, #216]	; (27a4 <Read_EEprom+0x164>)
    26cc:	0038      	movs	r0, r7
    26ce:	4f30      	ldr	r7, [pc, #192]	; (2790 <Read_EEprom+0x150>)
    26d0:	47b8      	blx	r7
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
    26d2:	2214      	movs	r2, #20
    26d4:	4b2c      	ldr	r3, [pc, #176]	; (2788 <Read_EEprom+0x148>)
    26d6:	0031      	movs	r1, r6
    26d8:	4833      	ldr	r0, [pc, #204]	; (27a8 <Read_EEprom+0x168>)
    26da:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
    26dc:	4933      	ldr	r1, [pc, #204]	; (27ac <Read_EEprom+0x16c>)
    26de:	4832      	ldr	r0, [pc, #200]	; (27a8 <Read_EEprom+0x168>)
    26e0:	47b8      	blx	r7
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
    26e2:	2238      	movs	r2, #56	; 0x38
    26e4:	0029      	movs	r1, r5
    26e6:	4b26      	ldr	r3, [pc, #152]	; (2780 <Read_EEprom+0x140>)
    26e8:	0020      	movs	r0, r4
    26ea:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
    26ec:	4b29      	ldr	r3, [pc, #164]	; (2794 <Read_EEprom+0x154>)
    26ee:	0021      	movs	r1, r4
    26f0:	2001      	movs	r0, #1
    26f2:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    26f4:	4b28      	ldr	r3, [pc, #160]	; (2798 <Read_EEprom+0x158>)
    26f6:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
    26f8:	4d1e      	ldr	r5, [pc, #120]	; (2774 <Read_EEprom+0x134>)
    26fa:	4b1f      	ldr	r3, [pc, #124]	; (2778 <Read_EEprom+0x138>)
    26fc:	0029      	movs	r1, r5
    26fe:	2002      	movs	r0, #2
    2700:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
    2702:	4c2b      	ldr	r4, [pc, #172]	; (27b0 <Read_EEprom+0x170>)
    2704:	4b1e      	ldr	r3, [pc, #120]	; (2780 <Read_EEprom+0x140>)
    2706:	2238      	movs	r2, #56	; 0x38
    2708:	0029      	movs	r1, r5
    270a:	0020      	movs	r0, r4
    270c:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
    270e:	7923      	ldrb	r3, [r4, #4]
    2710:	2b55      	cmp	r3, #85	; 0x55
    2712:	d02c      	beq.n	276e <Read_EEprom+0x12e>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
    2714:	2600      	movs	r6, #0
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
    2716:	2355      	movs	r3, #85	; 0x55
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
    2718:	4f26      	ldr	r7, [pc, #152]	; (27b4 <Read_EEprom+0x174>)
    271a:	2210      	movs	r2, #16
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
    271c:	7123      	strb	r3, [r4, #4]
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
    271e:	0031      	movs	r1, r6
    2720:	0038      	movs	r0, r7
    2722:	4b19      	ldr	r3, [pc, #100]	; (2788 <Read_EEprom+0x148>)
		ftp_user_parameter.ulongintDiscard			   = 0;
    2724:	6026      	str	r6, [r4, #0]
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
    2726:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
    2728:	4923      	ldr	r1, [pc, #140]	; (27b8 <Read_EEprom+0x178>)
    272a:	0038      	movs	r0, r7
    272c:	4b18      	ldr	r3, [pc, #96]	; (2790 <Read_EEprom+0x150>)
    272e:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_password, '\0', sizeof(ftp_user_parameter.ftp_password));
    2730:	4f22      	ldr	r7, [pc, #136]	; (27bc <Read_EEprom+0x17c>)
    2732:	2210      	movs	r2, #16
    2734:	0031      	movs	r1, r6
    2736:	0038      	movs	r0, r7
    2738:	4b13      	ldr	r3, [pc, #76]	; (2788 <Read_EEprom+0x148>)
    273a:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
    273c:	4920      	ldr	r1, [pc, #128]	; (27c0 <Read_EEprom+0x180>)
    273e:	0038      	movs	r0, r7
    2740:	4b13      	ldr	r3, [pc, #76]	; (2790 <Read_EEprom+0x150>)
    2742:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
    2744:	4f1f      	ldr	r7, [pc, #124]	; (27c4 <Read_EEprom+0x184>)
    2746:	2210      	movs	r2, #16
    2748:	0031      	movs	r1, r6
    274a:	4b0f      	ldr	r3, [pc, #60]	; (2788 <Read_EEprom+0x148>)
    274c:	0038      	movs	r0, r7
    274e:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
    2750:	491d      	ldr	r1, [pc, #116]	; (27c8 <Read_EEprom+0x188>)
    2752:	4b0f      	ldr	r3, [pc, #60]	; (2790 <Read_EEprom+0x150>)
    2754:	0038      	movs	r0, r7
    2756:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
    2758:	2238      	movs	r2, #56	; 0x38
    275a:	0021      	movs	r1, r4
    275c:	4b08      	ldr	r3, [pc, #32]	; (2780 <Read_EEprom+0x140>)
    275e:	0028      	movs	r0, r5
    2760:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
    2762:	4b0c      	ldr	r3, [pc, #48]	; (2794 <Read_EEprom+0x154>)
    2764:	0029      	movs	r1, r5
    2766:	2002      	movs	r0, #2
    2768:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    276a:	4b0b      	ldr	r3, [pc, #44]	; (2798 <Read_EEprom+0x158>)
    276c:	4798      	blx	r3
	}
}
    276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2770:	00002611 	.word	0x00002611
    2774:	20000484 	.word	0x20000484
    2778:	00001b59 	.word	0x00001b59
    277c:	200004f8 	.word	0x200004f8
    2780:	00002f0d 	.word	0x00002f0d
    2784:	20000504 	.word	0x20000504
    2788:	00002f1f 	.word	0x00002f1f
    278c:	000037b8 	.word	0x000037b8
    2790:	000030a5 	.word	0x000030a5
    2794:	00001be1 	.word	0x00001be1
    2798:	00001bb5 	.word	0x00001bb5
    279c:	2000044c 	.word	0x2000044c
    27a0:	20000451 	.word	0x20000451
    27a4:	000037c3 	.word	0x000037c3
    27a8:	2000046f 	.word	0x2000046f
    27ac:	000037d3 	.word	0x000037d3
    27b0:	200004c0 	.word	0x200004c0
    27b4:	200004c5 	.word	0x200004c5
    27b8:	000037de 	.word	0x000037de
    27bc:	200004d5 	.word	0x200004d5
    27c0:	000037ee 	.word	0x000037ee
    27c4:	200004e5 	.word	0x200004e5
    27c8:	000037f8 	.word	0x000037f8

000027cc <spiflash_init>:
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    27cc:	230d      	movs	r3, #13
	config->data_order       = SPI_DATA_ORDER_MSB;
    27ce:	2100      	movs	r1, #0
		}
	}
}

void spiflash_init(void)
{
    27d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	config->mode             = SPI_MODE_MASTER;
    27d2:	2501      	movs	r5, #1
    27d4:	b091      	sub	sp, #68	; 0x44
	config->generator_source = GCLK_GENERATOR_0;
    27d6:	446b      	add	r3, sp
	config->mode             = SPI_MODE_MASTER;
    27d8:	ac02      	add	r4, sp, #8
	config->generator_source = GCLK_GENERATOR_0;
    27da:	77d9      	strb	r1, [r3, #31]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    27dc:	220c      	movs	r2, #12
    27de:	4b26      	ldr	r3, [pc, #152]	; (2878 <spiflash_init+0xac>)
    27e0:	a808      	add	r0, sp, #32
	config->mode             = SPI_MODE_MASTER;
    27e2:	7025      	strb	r5, [r4, #0]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    27e4:	7421      	strb	r1, [r4, #16]
	config->run_in_standby   = false;
    27e6:	7461      	strb	r1, [r4, #17]
	config->receiver_enable  = true;
    27e8:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    27ea:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    27ec:	7521      	strb	r1, [r4, #20]
	config->data_order       = SPI_DATA_ORDER_MSB;
    27ee:	9103      	str	r1, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    27f0:	9104      	str	r1, [sp, #16]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    27f2:	4798      	blx	r3
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	
	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    27f4:	4b21      	ldr	r3, [pc, #132]	; (287c <spiflash_init+0xb0>)
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;

	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    27f6:	4e22      	ldr	r6, [pc, #136]	; (2880 <spiflash_init+0xb4>)
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    27f8:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    27fa:	2380      	movs	r3, #128	; 0x80
    27fc:	039b      	lsls	r3, r3, #14
    27fe:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    2800:	4b20      	ldr	r3, [pc, #128]	; (2884 <spiflash_init+0xb8>)
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    2802:	0022      	movs	r2, r4
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    2804:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    2806:	4b20      	ldr	r3, [pc, #128]	; (2888 <spiflash_init+0xbc>)
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    2808:	4920      	ldr	r1, [pc, #128]	; (288c <spiflash_init+0xc0>)
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    280a:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    280c:	4b20      	ldr	r3, [pc, #128]	; (2890 <spiflash_init+0xc4>)
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    280e:	0030      	movs	r0, r6
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    2810:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    2812:	2301      	movs	r3, #1
    2814:	425b      	negs	r3, r3
    2816:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    2818:	4b1e      	ldr	r3, [pc, #120]	; (2894 <spiflash_init+0xc8>)
    281a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    281c:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    281e:	4b1e      	ldr	r3, [pc, #120]	; (2898 <spiflash_init+0xcc>)
    2820:	0020      	movs	r0, r4
    2822:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2824:	231f      	movs	r3, #31
    2826:	4018      	ands	r0, r3
    2828:	4085      	lsls	r5, r0
    282a:	4b1c      	ldr	r3, [pc, #112]	; (289c <spiflash_init+0xd0>)
    282c:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    282e:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    2830:	69dd      	ldr	r5, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
    2832:	2d00      	cmp	r5, #0
    2834:	d1fc      	bne.n	2830 <spiflash_init+0x64>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2836:	2302      	movs	r3, #2
    2838:	6822      	ldr	r2, [r4, #0]
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
	module->cs_pin = config->cs_pin;
    283a:	2013      	movs	r0, #19
    283c:	4313      	orrs	r3, r2
    283e:	6023      	str	r3, [r4, #0]
	module->type = config->type;
    2840:	2304      	movs	r3, #4
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2842:	2401      	movs	r4, #1
    2844:	4f16      	ldr	r7, [pc, #88]	; (28a0 <spiflash_init+0xd4>)
    2846:	a901      	add	r1, sp, #4
    2848:	713b      	strb	r3, [r7, #4]
	module->spi = spi_module;

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(module->cs_pin, &port_config);
    284a:	4b16      	ldr	r3, [pc, #88]	; (28a4 <spiflash_init+0xd8>)
    284c:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
    284e:	708d      	strb	r5, [r1, #2]
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    2850:	700c      	strb	r4, [r1, #0]
	module->cs_pin = config->cs_pin;
    2852:	7178      	strb	r0, [r7, #5]
	module->spi = spi_module;
    2854:	603e      	str	r6, [r7, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    2856:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    2858:	797a      	ldrb	r2, [r7, #5]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    285a:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    285c:	09d1      	lsrs	r1, r2, #7
    285e:	d108      	bne.n	2872 <spiflash_init+0xa6>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2860:	311f      	adds	r1, #31
    2862:	400a      	ands	r2, r1
    2864:	4094      	lsls	r4, r2

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2866:	4a10      	ldr	r2, [pc, #64]	; (28a8 <spiflash_init+0xdc>)
    2868:	01db      	lsls	r3, r3, #7
    286a:	189b      	adds	r3, r3, r2
    286c:	619c      	str	r4, [r3, #24]

	at25dfx_chip_config.type = AT25DFX_MEM_TYPE;
	at25dfx_chip_config.cs_pin = AT25DFX_CS;

	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
}
    286e:	b011      	add	sp, #68	; 0x44
    2870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2872:	61ad      	str	r5, [r5, #24]
    2874:	deff      	udf	#255	; 0xff
    2876:	46c0      	nop			; (mov r8, r8)
    2878:	00002f1f 	.word	0x00002f1f
    287c:	0030d400 	.word	0x0030d400
    2880:	20000264 	.word	0x20000264
    2884:	00100002 	.word	0x00100002
    2888:	00110002 	.word	0x00110002
    288c:	42000c00 	.word	0x42000c00
    2890:	00120002 	.word	0x00120002
    2894:	0000101d 	.word	0x0000101d
    2898:	0000145d 	.word	0x0000145d
    289c:	e000e100 	.word	0xe000e100
    28a0:	2000025c 	.word	0x2000025c
    28a4:	00001825 	.word	0x00001825
    28a8:	41004400 	.word	0x41004400

000028ac <main>:
{
    28ac:	b5f0      	push	{r4, r5, r6, r7, lr}
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    28ae:	2400      	movs	r4, #0
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    28b0:	2501      	movs	r5, #1
    28b2:	b08b      	sub	sp, #44	; 0x2c
	system_init();
    28b4:	4b67      	ldr	r3, [pc, #412]	; (2a54 <main+0x1a8>)
    28b6:	4798      	blx	r3
		sleepmgr_locks[i] = 0;
    28b8:	4b67      	ldr	r3, [pc, #412]	; (2a58 <main+0x1ac>)
    28ba:	701c      	strb	r4, [r3, #0]
    28bc:	705c      	strb	r4, [r3, #1]
    28be:	709c      	strb	r4, [r3, #2]
    28c0:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    28c2:	711d      	strb	r5, [r3, #4]
	cpu_irq_enable();
    28c4:	4b65      	ldr	r3, [pc, #404]	; (2a5c <main+0x1b0>)
    28c6:	701d      	strb	r5, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    28c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    28cc:	b662      	cpsie	i
	delay_init();
    28ce:	4b64      	ldr	r3, [pc, #400]	; (2a60 <main+0x1b4>)
    28d0:	4798      	blx	r3
	LCD_PWR_CONFIG();
    28d2:	4b64      	ldr	r3, [pc, #400]	; (2a64 <main+0x1b8>)
    28d4:	4798      	blx	r3
	LCD_PWR_EN();
    28d6:	4b64      	ldr	r3, [pc, #400]	; (2a68 <main+0x1bc>)
    28d8:	4798      	blx	r3
	delay_ms(200);
    28da:	0020      	movs	r0, r4
    28dc:	4f63      	ldr	r7, [pc, #396]	; (2a6c <main+0x1c0>)
    28de:	47b8      	blx	r7
    28e0:	4e63      	ldr	r6, [pc, #396]	; (2a70 <main+0x1c4>)
    28e2:	22c8      	movs	r2, #200	; 0xc8
    28e4:	2300      	movs	r3, #0
    28e6:	0021      	movs	r1, r4
    28e8:	47b0      	blx	r6
    28ea:	2300      	movs	r3, #0
    28ec:	4a61      	ldr	r2, [pc, #388]	; (2a74 <main+0x1c8>)
    28ee:	4e62      	ldr	r6, [pc, #392]	; (2a78 <main+0x1cc>)
    28f0:	1880      	adds	r0, r0, r2
    28f2:	4159      	adcs	r1, r3
    28f4:	4a61      	ldr	r2, [pc, #388]	; (2a7c <main+0x1d0>)
    28f6:	2300      	movs	r3, #0
    28f8:	47b0      	blx	r6
    28fa:	4b61      	ldr	r3, [pc, #388]	; (2a80 <main+0x1d4>)
    28fc:	4798      	blx	r3
	LCD_init();
    28fe:	4b61      	ldr	r3, [pc, #388]	; (2a84 <main+0x1d8>)
    2900:	4798      	blx	r3
	Read_EEprom();
    2902:	4b61      	ldr	r3, [pc, #388]	; (2a88 <main+0x1dc>)
    2904:	4798      	blx	r3
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2906:	a806      	add	r0, sp, #24
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    2908:	4b60      	ldr	r3, [pc, #384]	; (2a8c <main+0x1e0>)
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    290a:	7004      	strb	r4, [r0, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    290c:	685b      	ldr	r3, [r3, #4]
	byte progressbar[8] = {
    290e:	ae08      	add	r6, sp, #32
    2910:	06db      	lsls	r3, r3, #27
    2912:	0f1b      	lsrs	r3, r3, #28
    2914:	7083      	strb	r3, [r0, #2]
	nvm_set_config(&nvm_cfg);
    2916:	4b5e      	ldr	r3, [pc, #376]	; (2a90 <main+0x1e4>)
	config->disable_cache     = false;
    2918:	70c4      	strb	r4, [r0, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    291a:	7104      	strb	r4, [r0, #4]
	nvm_cfg.manual_page_write = false;
    291c:	7044      	strb	r4, [r0, #1]
	nvm_set_config(&nvm_cfg);
    291e:	4798      	blx	r3
	spiflash_init();
    2920:	4b5c      	ldr	r3, [pc, #368]	; (2a94 <main+0x1e8>)
    2922:	4798      	blx	r3
	byte progressbar[8] = {
    2924:	2208      	movs	r2, #8
    2926:	0021      	movs	r1, r4
    2928:	0030      	movs	r0, r6
    292a:	4b5b      	ldr	r3, [pc, #364]	; (2a98 <main+0x1ec>)
    292c:	4798      	blx	r3
    292e:	230f      	movs	r3, #15
	LCD_Create_Custom_createChar(0,progressbar);
    2930:	0031      	movs	r1, r6
    2932:	0020      	movs	r0, r4
	byte progressbar[8] = {
    2934:	7033      	strb	r3, [r6, #0]
    2936:	7073      	strb	r3, [r6, #1]
    2938:	70b3      	strb	r3, [r6, #2]
    293a:	70f3      	strb	r3, [r6, #3]
    293c:	7133      	strb	r3, [r6, #4]
    293e:	7173      	strb	r3, [r6, #5]
    2940:	71b3      	strb	r3, [r6, #6]
	LCD_Create_Custom_createChar(0,progressbar);
    2942:	4b56      	ldr	r3, [pc, #344]	; (2a9c <main+0x1f0>)
    2944:	4798      	blx	r3
	LCD_clear();
    2946:	4e56      	ldr	r6, [pc, #344]	; (2aa0 <main+0x1f4>)
    2948:	47b0      	blx	r6
	lcd_printf("   BOOTING UP   ");
    294a:	4856      	ldr	r0, [pc, #344]	; (2aa4 <main+0x1f8>)
    294c:	4b56      	ldr	r3, [pc, #344]	; (2aa8 <main+0x1fc>)
    294e:	4798      	blx	r3
	LCD_setCursor(0,1);
    2950:	0020      	movs	r0, r4
    2952:	2400      	movs	r4, #0
    2954:	0029      	movs	r1, r5
    2956:	4b55      	ldr	r3, [pc, #340]	; (2aac <main+0x200>)
    2958:	4798      	blx	r3
    295a:	4b46      	ldr	r3, [pc, #280]	; (2a74 <main+0x1c8>)
    295c:	350f      	adds	r5, #15
    295e:	9300      	str	r3, [sp, #0]
    2960:	9401      	str	r4, [sp, #4]
		LCD_write(0);
    2962:	4b53      	ldr	r3, [pc, #332]	; (2ab0 <main+0x204>)
    2964:	2000      	movs	r0, #0
    2966:	4798      	blx	r3
		delay_ms(50);
    2968:	2000      	movs	r0, #0
    296a:	47b8      	blx	r7
    296c:	4c40      	ldr	r4, [pc, #256]	; (2a70 <main+0x1c4>)
    296e:	2232      	movs	r2, #50	; 0x32
    2970:	2300      	movs	r3, #0
    2972:	2100      	movs	r1, #0
    2974:	47a0      	blx	r4
    2976:	9b00      	ldr	r3, [sp, #0]
    2978:	9c01      	ldr	r4, [sp, #4]
    297a:	4a40      	ldr	r2, [pc, #256]	; (2a7c <main+0x1d0>)
    297c:	18c0      	adds	r0, r0, r3
    297e:	4161      	adcs	r1, r4
    2980:	3d01      	subs	r5, #1
    2982:	2300      	movs	r3, #0
    2984:	4c3c      	ldr	r4, [pc, #240]	; (2a78 <main+0x1cc>)
    2986:	47a0      	blx	r4
    2988:	b2ed      	uxtb	r5, r5
    298a:	4b3d      	ldr	r3, [pc, #244]	; (2a80 <main+0x1d4>)
    298c:	4798      	blx	r3
	for (uint8_t i=0;i<16;i++)
    298e:	2d00      	cmp	r5, #0
    2990:	d1e7      	bne.n	2962 <main+0xb6>
	config->input_pull = PORT_PIN_PULL_UP;
    2992:	2401      	movs	r4, #1
	LCD_clear();
    2994:	47b0      	blx	r6
    2996:	ae05      	add	r6, sp, #20
port_pin_set_config(AUTO_LED, &pin_conf_LED);
    2998:	4f46      	ldr	r7, [pc, #280]	; (2ab4 <main+0x208>)
    299a:	0031      	movs	r1, r6
    299c:	2028      	movs	r0, #40	; 0x28
    299e:	7074      	strb	r4, [r6, #1]
	config->powersave  = false;
    29a0:	70b5      	strb	r5, [r6, #2]
pin_conf_LED.direction  = PORT_PIN_DIR_OUTPUT;
    29a2:	7034      	strb	r4, [r6, #0]
port_pin_set_config(AUTO_LED, &pin_conf_LED);
    29a4:	47b8      	blx	r7
port_pin_set_config(PHASE_LED, &pin_conf_LED);
    29a6:	0031      	movs	r1, r6
    29a8:	2027      	movs	r0, #39	; 0x27
    29aa:	47b8      	blx	r7
port_pin_set_config(MOTOR_LED, &pin_conf_LED);
    29ac:	0031      	movs	r1, r6
    29ae:	2005      	movs	r0, #5
    29b0:	47b8      	blx	r7
port_pin_set_config(AUTO_BUTTON, &pin_conf_LED);
    29b2:	0031      	movs	r1, r6
    29b4:	201c      	movs	r0, #28
	config->direction  = PORT_PIN_DIR_INPUT;
    29b6:	7035      	strb	r5, [r6, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    29b8:	7074      	strb	r4, [r6, #1]
	config->powersave  = false;
    29ba:	70b5      	strb	r5, [r6, #2]
    29bc:	47b8      	blx	r7
port_pin_set_config(ON_BUTTON, &pin_conf_LED);
    29be:	0031      	movs	r1, r6
    29c0:	2026      	movs	r0, #38	; 0x26
    29c2:	47b8      	blx	r7
port_pin_set_config(OFF_BUTTON, &pin_conf_LED);
    29c4:	0031      	movs	r1, r6
    29c6:	2025      	movs	r0, #37	; 0x25
    29c8:	47b8      	blx	r7
port_pin_set_config(LCD_BUTTON, &pin_conf_LED);
    29ca:	0031      	movs	r1, r6
    29cc:	2029      	movs	r0, #41	; 0x29
    29ce:	47b8      	blx	r7
	} else {
		port_base->OUTCLR.reg = pin_mask;
    29d0:	2380      	movs	r3, #128	; 0x80
    29d2:	005b      	lsls	r3, r3, #1
    29d4:	469c      	mov	ip, r3
    29d6:	2720      	movs	r7, #32
    29d8:	4837      	ldr	r0, [pc, #220]	; (2ab8 <main+0x20c>)
    29da:	4a38      	ldr	r2, [pc, #224]	; (2abc <main+0x210>)
    29dc:	6003      	str	r3, [r0, #0]
    29de:	3b80      	subs	r3, #128	; 0x80
    29e0:	6003      	str	r3, [r0, #0]
    29e2:	6157      	str	r7, [r2, #20]
    29e4:	9002      	str	r0, [sp, #8]
    29e6:	4660      	mov	r0, ip
autoLed=phaseLed=MotorLed=false;
    29e8:	002b      	movs	r3, r5
    29ea:	002e      	movs	r6, r5
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    29ec:	0021      	movs	r1, r4
    29ee:	9003      	str	r0, [sp, #12]
	return (port_base->IN.reg & pin_mask);
    29f0:	9700      	str	r7, [sp, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    29f2:	000f      	movs	r7, r1
    29f4:	40af      	lsls	r7, r5
	return (port_base->IN.reg & pin_mask);
    29f6:	6a10      	ldr	r0, [r2, #32]
	if (level) {
    29f8:	4238      	tst	r0, r7
    29fa:	d01e      	beq.n	2a3a <main+0x18e>
		port_base->OUTSET.reg = pin_mask;
    29fc:	4f30      	ldr	r7, [pc, #192]	; (2ac0 <main+0x214>)
    29fe:	9803      	ldr	r0, [sp, #12]
		port_base->OUTCLR.reg = pin_mask;
    2a00:	6038      	str	r0, [r7, #0]
	return (port_base->IN.reg & pin_mask);
    2a02:	4f30      	ldr	r7, [pc, #192]	; (2ac4 <main+0x218>)
    2a04:	6838      	ldr	r0, [r7, #0]
		if(port_pin_get_input_level(LCD_BUTTON))
    2a06:	0580      	lsls	r0, r0, #22
    2a08:	d41a      	bmi.n	2a40 <main+0x194>
    2a0a:	6a10      	ldr	r0, [r2, #32]
					if(port_pin_get_input_level(AUTO_BUTTON))
    2a0c:	00c0      	lsls	r0, r0, #3
    2a0e:	d500      	bpl.n	2a12 <main+0x166>
					autoLed=!autoLed;
    2a10:	404d      	eors	r5, r1
    2a12:	6838      	ldr	r0, [r7, #0]
					if(port_pin_get_input_level(ON_BUTTON))
    2a14:	0640      	lsls	r0, r0, #25
    2a16:	d500      	bpl.n	2a1a <main+0x16e>
					phaseLed=!phaseLed;
    2a18:	404e      	eors	r6, r1
    2a1a:	683f      	ldr	r7, [r7, #0]
					if(port_pin_get_input_level(OFF_BUTTON))
    2a1c:	9800      	ldr	r0, [sp, #0]
    2a1e:	4207      	tst	r7, r0
    2a20:	d000      	beq.n	2a24 <main+0x178>
					MotorLed=!MotorLed;
    2a22:	404b      	eors	r3, r1
	if (level) {
    2a24:	2e00      	cmp	r6, #0
    2a26:	d00e      	beq.n	2a46 <main+0x19a>
		port_base->OUTSET.reg = pin_mask;
    2a28:	2780      	movs	r7, #128	; 0x80
    2a2a:	4e25      	ldr	r6, [pc, #148]	; (2ac0 <main+0x214>)
    2a2c:	6037      	str	r7, [r6, #0]
    2a2e:	000e      	movs	r6, r1
    2a30:	9800      	ldr	r0, [sp, #0]
	if (level) {
    2a32:	2b00      	cmp	r3, #0
    2a34:	d00b      	beq.n	2a4e <main+0x1a2>
		port_base->OUTSET.reg = pin_mask;
    2a36:	6190      	str	r0, [r2, #24]
    2a38:	e7db      	b.n	29f2 <main+0x146>
		port_base->OUTCLR.reg = pin_mask;
    2a3a:	9803      	ldr	r0, [sp, #12]
    2a3c:	9f02      	ldr	r7, [sp, #8]
    2a3e:	e7df      	b.n	2a00 <main+0x154>
			MotorLed=true;
    2a40:	000b      	movs	r3, r1
			autoLed=true;
    2a42:	0025      	movs	r5, r4
    2a44:	e7f0      	b.n	2a28 <main+0x17c>
    2a46:	2780      	movs	r7, #128	; 0x80
    2a48:	9802      	ldr	r0, [sp, #8]
    2a4a:	6007      	str	r7, [r0, #0]
    2a4c:	e7f0      	b.n	2a30 <main+0x184>
    2a4e:	6150      	str	r0, [r2, #20]
    2a50:	e7cf      	b.n	29f2 <main+0x146>
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	00002505 	.word	0x00002505
    2a58:	20000445 	.word	0x20000445
    2a5c:	2000000c 	.word	0x2000000c
    2a60:	00001529 	.word	0x00001529
    2a64:	00000141 	.word	0x00000141
    2a68:	0000015d 	.word	0x0000015d
    2a6c:	000022f1 	.word	0x000022f1
    2a70:	00002cb1 	.word	0x00002cb1
    2a74:	00001b57 	.word	0x00001b57
    2a78:	00002c71 	.word	0x00002c71
    2a7c:	00001b58 	.word	0x00001b58
    2a80:	20000001 	.word	0x20000001
    2a84:	00000325 	.word	0x00000325
    2a88:	00002641 	.word	0x00002641
    2a8c:	41004000 	.word	0x41004000
    2a90:	0000153d 	.word	0x0000153d
    2a94:	000027cd 	.word	0x000027cd
    2a98:	00002f1f 	.word	0x00002f1f
    2a9c:	000004f1 	.word	0x000004f1
    2aa0:	00000281 	.word	0x00000281
    2aa4:	00003815 	.word	0x00003815
    2aa8:	0000051d 	.word	0x0000051d
    2aac:	000002cd 	.word	0x000002cd
    2ab0:	00000271 	.word	0x00000271
    2ab4:	00001825 	.word	0x00001825
    2ab8:	41004494 	.word	0x41004494
    2abc:	41004400 	.word	0x41004400
    2ac0:	41004498 	.word	0x41004498
    2ac4:	410044a0 	.word	0x410044a0

00002ac8 <__gnu_thumb1_case_uqi>:
    2ac8:	b402      	push	{r1}
    2aca:	4671      	mov	r1, lr
    2acc:	0849      	lsrs	r1, r1, #1
    2ace:	0049      	lsls	r1, r1, #1
    2ad0:	5c09      	ldrb	r1, [r1, r0]
    2ad2:	0049      	lsls	r1, r1, #1
    2ad4:	448e      	add	lr, r1
    2ad6:	bc02      	pop	{r1}
    2ad8:	4770      	bx	lr
    2ada:	46c0      	nop			; (mov r8, r8)

00002adc <__udivsi3>:
    2adc:	2200      	movs	r2, #0
    2ade:	0843      	lsrs	r3, r0, #1
    2ae0:	428b      	cmp	r3, r1
    2ae2:	d374      	bcc.n	2bce <__udivsi3+0xf2>
    2ae4:	0903      	lsrs	r3, r0, #4
    2ae6:	428b      	cmp	r3, r1
    2ae8:	d35f      	bcc.n	2baa <__udivsi3+0xce>
    2aea:	0a03      	lsrs	r3, r0, #8
    2aec:	428b      	cmp	r3, r1
    2aee:	d344      	bcc.n	2b7a <__udivsi3+0x9e>
    2af0:	0b03      	lsrs	r3, r0, #12
    2af2:	428b      	cmp	r3, r1
    2af4:	d328      	bcc.n	2b48 <__udivsi3+0x6c>
    2af6:	0c03      	lsrs	r3, r0, #16
    2af8:	428b      	cmp	r3, r1
    2afa:	d30d      	bcc.n	2b18 <__udivsi3+0x3c>
    2afc:	22ff      	movs	r2, #255	; 0xff
    2afe:	0209      	lsls	r1, r1, #8
    2b00:	ba12      	rev	r2, r2
    2b02:	0c03      	lsrs	r3, r0, #16
    2b04:	428b      	cmp	r3, r1
    2b06:	d302      	bcc.n	2b0e <__udivsi3+0x32>
    2b08:	1212      	asrs	r2, r2, #8
    2b0a:	0209      	lsls	r1, r1, #8
    2b0c:	d065      	beq.n	2bda <__udivsi3+0xfe>
    2b0e:	0b03      	lsrs	r3, r0, #12
    2b10:	428b      	cmp	r3, r1
    2b12:	d319      	bcc.n	2b48 <__udivsi3+0x6c>
    2b14:	e000      	b.n	2b18 <__udivsi3+0x3c>
    2b16:	0a09      	lsrs	r1, r1, #8
    2b18:	0bc3      	lsrs	r3, r0, #15
    2b1a:	428b      	cmp	r3, r1
    2b1c:	d301      	bcc.n	2b22 <__udivsi3+0x46>
    2b1e:	03cb      	lsls	r3, r1, #15
    2b20:	1ac0      	subs	r0, r0, r3
    2b22:	4152      	adcs	r2, r2
    2b24:	0b83      	lsrs	r3, r0, #14
    2b26:	428b      	cmp	r3, r1
    2b28:	d301      	bcc.n	2b2e <__udivsi3+0x52>
    2b2a:	038b      	lsls	r3, r1, #14
    2b2c:	1ac0      	subs	r0, r0, r3
    2b2e:	4152      	adcs	r2, r2
    2b30:	0b43      	lsrs	r3, r0, #13
    2b32:	428b      	cmp	r3, r1
    2b34:	d301      	bcc.n	2b3a <__udivsi3+0x5e>
    2b36:	034b      	lsls	r3, r1, #13
    2b38:	1ac0      	subs	r0, r0, r3
    2b3a:	4152      	adcs	r2, r2
    2b3c:	0b03      	lsrs	r3, r0, #12
    2b3e:	428b      	cmp	r3, r1
    2b40:	d301      	bcc.n	2b46 <__udivsi3+0x6a>
    2b42:	030b      	lsls	r3, r1, #12
    2b44:	1ac0      	subs	r0, r0, r3
    2b46:	4152      	adcs	r2, r2
    2b48:	0ac3      	lsrs	r3, r0, #11
    2b4a:	428b      	cmp	r3, r1
    2b4c:	d301      	bcc.n	2b52 <__udivsi3+0x76>
    2b4e:	02cb      	lsls	r3, r1, #11
    2b50:	1ac0      	subs	r0, r0, r3
    2b52:	4152      	adcs	r2, r2
    2b54:	0a83      	lsrs	r3, r0, #10
    2b56:	428b      	cmp	r3, r1
    2b58:	d301      	bcc.n	2b5e <__udivsi3+0x82>
    2b5a:	028b      	lsls	r3, r1, #10
    2b5c:	1ac0      	subs	r0, r0, r3
    2b5e:	4152      	adcs	r2, r2
    2b60:	0a43      	lsrs	r3, r0, #9
    2b62:	428b      	cmp	r3, r1
    2b64:	d301      	bcc.n	2b6a <__udivsi3+0x8e>
    2b66:	024b      	lsls	r3, r1, #9
    2b68:	1ac0      	subs	r0, r0, r3
    2b6a:	4152      	adcs	r2, r2
    2b6c:	0a03      	lsrs	r3, r0, #8
    2b6e:	428b      	cmp	r3, r1
    2b70:	d301      	bcc.n	2b76 <__udivsi3+0x9a>
    2b72:	020b      	lsls	r3, r1, #8
    2b74:	1ac0      	subs	r0, r0, r3
    2b76:	4152      	adcs	r2, r2
    2b78:	d2cd      	bcs.n	2b16 <__udivsi3+0x3a>
    2b7a:	09c3      	lsrs	r3, r0, #7
    2b7c:	428b      	cmp	r3, r1
    2b7e:	d301      	bcc.n	2b84 <__udivsi3+0xa8>
    2b80:	01cb      	lsls	r3, r1, #7
    2b82:	1ac0      	subs	r0, r0, r3
    2b84:	4152      	adcs	r2, r2
    2b86:	0983      	lsrs	r3, r0, #6
    2b88:	428b      	cmp	r3, r1
    2b8a:	d301      	bcc.n	2b90 <__udivsi3+0xb4>
    2b8c:	018b      	lsls	r3, r1, #6
    2b8e:	1ac0      	subs	r0, r0, r3
    2b90:	4152      	adcs	r2, r2
    2b92:	0943      	lsrs	r3, r0, #5
    2b94:	428b      	cmp	r3, r1
    2b96:	d301      	bcc.n	2b9c <__udivsi3+0xc0>
    2b98:	014b      	lsls	r3, r1, #5
    2b9a:	1ac0      	subs	r0, r0, r3
    2b9c:	4152      	adcs	r2, r2
    2b9e:	0903      	lsrs	r3, r0, #4
    2ba0:	428b      	cmp	r3, r1
    2ba2:	d301      	bcc.n	2ba8 <__udivsi3+0xcc>
    2ba4:	010b      	lsls	r3, r1, #4
    2ba6:	1ac0      	subs	r0, r0, r3
    2ba8:	4152      	adcs	r2, r2
    2baa:	08c3      	lsrs	r3, r0, #3
    2bac:	428b      	cmp	r3, r1
    2bae:	d301      	bcc.n	2bb4 <__udivsi3+0xd8>
    2bb0:	00cb      	lsls	r3, r1, #3
    2bb2:	1ac0      	subs	r0, r0, r3
    2bb4:	4152      	adcs	r2, r2
    2bb6:	0883      	lsrs	r3, r0, #2
    2bb8:	428b      	cmp	r3, r1
    2bba:	d301      	bcc.n	2bc0 <__udivsi3+0xe4>
    2bbc:	008b      	lsls	r3, r1, #2
    2bbe:	1ac0      	subs	r0, r0, r3
    2bc0:	4152      	adcs	r2, r2
    2bc2:	0843      	lsrs	r3, r0, #1
    2bc4:	428b      	cmp	r3, r1
    2bc6:	d301      	bcc.n	2bcc <__udivsi3+0xf0>
    2bc8:	004b      	lsls	r3, r1, #1
    2bca:	1ac0      	subs	r0, r0, r3
    2bcc:	4152      	adcs	r2, r2
    2bce:	1a41      	subs	r1, r0, r1
    2bd0:	d200      	bcs.n	2bd4 <__udivsi3+0xf8>
    2bd2:	4601      	mov	r1, r0
    2bd4:	4152      	adcs	r2, r2
    2bd6:	4610      	mov	r0, r2
    2bd8:	4770      	bx	lr
    2bda:	e7ff      	b.n	2bdc <__udivsi3+0x100>
    2bdc:	b501      	push	{r0, lr}
    2bde:	2000      	movs	r0, #0
    2be0:	f000 f806 	bl	2bf0 <__aeabi_idiv0>
    2be4:	bd02      	pop	{r1, pc}
    2be6:	46c0      	nop			; (mov r8, r8)

00002be8 <__aeabi_uidivmod>:
    2be8:	2900      	cmp	r1, #0
    2bea:	d0f7      	beq.n	2bdc <__udivsi3+0x100>
    2bec:	e776      	b.n	2adc <__udivsi3>
    2bee:	4770      	bx	lr

00002bf0 <__aeabi_idiv0>:
    2bf0:	4770      	bx	lr
    2bf2:	46c0      	nop			; (mov r8, r8)

00002bf4 <__clzsi2>:
    2bf4:	211c      	movs	r1, #28
    2bf6:	2301      	movs	r3, #1
    2bf8:	041b      	lsls	r3, r3, #16
    2bfa:	4298      	cmp	r0, r3
    2bfc:	d301      	bcc.n	2c02 <__clzsi2+0xe>
    2bfe:	0c00      	lsrs	r0, r0, #16
    2c00:	3910      	subs	r1, #16
    2c02:	0a1b      	lsrs	r3, r3, #8
    2c04:	4298      	cmp	r0, r3
    2c06:	d301      	bcc.n	2c0c <__clzsi2+0x18>
    2c08:	0a00      	lsrs	r0, r0, #8
    2c0a:	3908      	subs	r1, #8
    2c0c:	091b      	lsrs	r3, r3, #4
    2c0e:	4298      	cmp	r0, r3
    2c10:	d301      	bcc.n	2c16 <__clzsi2+0x22>
    2c12:	0900      	lsrs	r0, r0, #4
    2c14:	3904      	subs	r1, #4
    2c16:	a202      	add	r2, pc, #8	; (adr r2, 2c20 <__clzsi2+0x2c>)
    2c18:	5c10      	ldrb	r0, [r2, r0]
    2c1a:	1840      	adds	r0, r0, r1
    2c1c:	4770      	bx	lr
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	02020304 	.word	0x02020304
    2c24:	01010101 	.word	0x01010101
	...

00002c30 <__ctzsi2>:
    2c30:	4241      	negs	r1, r0
    2c32:	4008      	ands	r0, r1
    2c34:	211c      	movs	r1, #28
    2c36:	2301      	movs	r3, #1
    2c38:	041b      	lsls	r3, r3, #16
    2c3a:	4298      	cmp	r0, r3
    2c3c:	d301      	bcc.n	2c42 <__ctzsi2+0x12>
    2c3e:	0c00      	lsrs	r0, r0, #16
    2c40:	3910      	subs	r1, #16
    2c42:	0a1b      	lsrs	r3, r3, #8
    2c44:	4298      	cmp	r0, r3
    2c46:	d301      	bcc.n	2c4c <__ctzsi2+0x1c>
    2c48:	0a00      	lsrs	r0, r0, #8
    2c4a:	3908      	subs	r1, #8
    2c4c:	091b      	lsrs	r3, r3, #4
    2c4e:	4298      	cmp	r0, r3
    2c50:	d301      	bcc.n	2c56 <__ctzsi2+0x26>
    2c52:	0900      	lsrs	r0, r0, #4
    2c54:	3904      	subs	r1, #4
    2c56:	a202      	add	r2, pc, #8	; (adr r2, 2c60 <__ctzsi2+0x30>)
    2c58:	5c10      	ldrb	r0, [r2, r0]
    2c5a:	1a40      	subs	r0, r0, r1
    2c5c:	4770      	bx	lr
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	1d1d1c1b 	.word	0x1d1d1c1b
    2c64:	1e1e1e1e 	.word	0x1e1e1e1e
    2c68:	1f1f1f1f 	.word	0x1f1f1f1f
    2c6c:	1f1f1f1f 	.word	0x1f1f1f1f

00002c70 <__aeabi_uldivmod>:
    2c70:	2b00      	cmp	r3, #0
    2c72:	d111      	bne.n	2c98 <__aeabi_uldivmod+0x28>
    2c74:	2a00      	cmp	r2, #0
    2c76:	d10f      	bne.n	2c98 <__aeabi_uldivmod+0x28>
    2c78:	2900      	cmp	r1, #0
    2c7a:	d100      	bne.n	2c7e <__aeabi_uldivmod+0xe>
    2c7c:	2800      	cmp	r0, #0
    2c7e:	d002      	beq.n	2c86 <__aeabi_uldivmod+0x16>
    2c80:	2100      	movs	r1, #0
    2c82:	43c9      	mvns	r1, r1
    2c84:	1c08      	adds	r0, r1, #0
    2c86:	b407      	push	{r0, r1, r2}
    2c88:	4802      	ldr	r0, [pc, #8]	; (2c94 <__aeabi_uldivmod+0x24>)
    2c8a:	a102      	add	r1, pc, #8	; (adr r1, 2c94 <__aeabi_uldivmod+0x24>)
    2c8c:	1840      	adds	r0, r0, r1
    2c8e:	9002      	str	r0, [sp, #8]
    2c90:	bd03      	pop	{r0, r1, pc}
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	ffffff5d 	.word	0xffffff5d
    2c98:	b403      	push	{r0, r1}
    2c9a:	4668      	mov	r0, sp
    2c9c:	b501      	push	{r0, lr}
    2c9e:	9802      	ldr	r0, [sp, #8]
    2ca0:	f000 f830 	bl	2d04 <__udivmoddi4>
    2ca4:	9b01      	ldr	r3, [sp, #4]
    2ca6:	469e      	mov	lr, r3
    2ca8:	b002      	add	sp, #8
    2caa:	bc0c      	pop	{r2, r3}
    2cac:	4770      	bx	lr
    2cae:	46c0      	nop			; (mov r8, r8)

00002cb0 <__aeabi_lmul>:
    2cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cb2:	46ce      	mov	lr, r9
    2cb4:	4647      	mov	r7, r8
    2cb6:	0415      	lsls	r5, r2, #16
    2cb8:	0c2d      	lsrs	r5, r5, #16
    2cba:	002e      	movs	r6, r5
    2cbc:	b580      	push	{r7, lr}
    2cbe:	0407      	lsls	r7, r0, #16
    2cc0:	0c14      	lsrs	r4, r2, #16
    2cc2:	0c3f      	lsrs	r7, r7, #16
    2cc4:	4699      	mov	r9, r3
    2cc6:	0c03      	lsrs	r3, r0, #16
    2cc8:	437e      	muls	r6, r7
    2cca:	435d      	muls	r5, r3
    2ccc:	4367      	muls	r7, r4
    2cce:	4363      	muls	r3, r4
    2cd0:	197f      	adds	r7, r7, r5
    2cd2:	0c34      	lsrs	r4, r6, #16
    2cd4:	19e4      	adds	r4, r4, r7
    2cd6:	469c      	mov	ip, r3
    2cd8:	42a5      	cmp	r5, r4
    2cda:	d903      	bls.n	2ce4 <__aeabi_lmul+0x34>
    2cdc:	2380      	movs	r3, #128	; 0x80
    2cde:	025b      	lsls	r3, r3, #9
    2ce0:	4698      	mov	r8, r3
    2ce2:	44c4      	add	ip, r8
    2ce4:	464b      	mov	r3, r9
    2ce6:	4351      	muls	r1, r2
    2ce8:	4343      	muls	r3, r0
    2cea:	0436      	lsls	r6, r6, #16
    2cec:	0c36      	lsrs	r6, r6, #16
    2cee:	0c25      	lsrs	r5, r4, #16
    2cf0:	0424      	lsls	r4, r4, #16
    2cf2:	4465      	add	r5, ip
    2cf4:	19a4      	adds	r4, r4, r6
    2cf6:	1859      	adds	r1, r3, r1
    2cf8:	1949      	adds	r1, r1, r5
    2cfa:	0020      	movs	r0, r4
    2cfc:	bc0c      	pop	{r2, r3}
    2cfe:	4690      	mov	r8, r2
    2d00:	4699      	mov	r9, r3
    2d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d04 <__udivmoddi4>:
    2d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d06:	4657      	mov	r7, sl
    2d08:	464e      	mov	r6, r9
    2d0a:	4645      	mov	r5, r8
    2d0c:	46de      	mov	lr, fp
    2d0e:	b5e0      	push	{r5, r6, r7, lr}
    2d10:	0004      	movs	r4, r0
    2d12:	b083      	sub	sp, #12
    2d14:	000d      	movs	r5, r1
    2d16:	4692      	mov	sl, r2
    2d18:	4699      	mov	r9, r3
    2d1a:	428b      	cmp	r3, r1
    2d1c:	d82f      	bhi.n	2d7e <__udivmoddi4+0x7a>
    2d1e:	d02c      	beq.n	2d7a <__udivmoddi4+0x76>
    2d20:	4649      	mov	r1, r9
    2d22:	4650      	mov	r0, sl
    2d24:	f000 f8ae 	bl	2e84 <__clzdi2>
    2d28:	0029      	movs	r1, r5
    2d2a:	0006      	movs	r6, r0
    2d2c:	0020      	movs	r0, r4
    2d2e:	f000 f8a9 	bl	2e84 <__clzdi2>
    2d32:	1a33      	subs	r3, r6, r0
    2d34:	4698      	mov	r8, r3
    2d36:	3b20      	subs	r3, #32
    2d38:	469b      	mov	fp, r3
    2d3a:	d500      	bpl.n	2d3e <__udivmoddi4+0x3a>
    2d3c:	e074      	b.n	2e28 <__udivmoddi4+0x124>
    2d3e:	4653      	mov	r3, sl
    2d40:	465a      	mov	r2, fp
    2d42:	4093      	lsls	r3, r2
    2d44:	001f      	movs	r7, r3
    2d46:	4653      	mov	r3, sl
    2d48:	4642      	mov	r2, r8
    2d4a:	4093      	lsls	r3, r2
    2d4c:	001e      	movs	r6, r3
    2d4e:	42af      	cmp	r7, r5
    2d50:	d829      	bhi.n	2da6 <__udivmoddi4+0xa2>
    2d52:	d026      	beq.n	2da2 <__udivmoddi4+0x9e>
    2d54:	465b      	mov	r3, fp
    2d56:	1ba4      	subs	r4, r4, r6
    2d58:	41bd      	sbcs	r5, r7
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	da00      	bge.n	2d60 <__udivmoddi4+0x5c>
    2d5e:	e079      	b.n	2e54 <__udivmoddi4+0x150>
    2d60:	2200      	movs	r2, #0
    2d62:	2300      	movs	r3, #0
    2d64:	9200      	str	r2, [sp, #0]
    2d66:	9301      	str	r3, [sp, #4]
    2d68:	2301      	movs	r3, #1
    2d6a:	465a      	mov	r2, fp
    2d6c:	4093      	lsls	r3, r2
    2d6e:	9301      	str	r3, [sp, #4]
    2d70:	2301      	movs	r3, #1
    2d72:	4642      	mov	r2, r8
    2d74:	4093      	lsls	r3, r2
    2d76:	9300      	str	r3, [sp, #0]
    2d78:	e019      	b.n	2dae <__udivmoddi4+0xaa>
    2d7a:	4282      	cmp	r2, r0
    2d7c:	d9d0      	bls.n	2d20 <__udivmoddi4+0x1c>
    2d7e:	2200      	movs	r2, #0
    2d80:	2300      	movs	r3, #0
    2d82:	9200      	str	r2, [sp, #0]
    2d84:	9301      	str	r3, [sp, #4]
    2d86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d001      	beq.n	2d90 <__udivmoddi4+0x8c>
    2d8c:	601c      	str	r4, [r3, #0]
    2d8e:	605d      	str	r5, [r3, #4]
    2d90:	9800      	ldr	r0, [sp, #0]
    2d92:	9901      	ldr	r1, [sp, #4]
    2d94:	b003      	add	sp, #12
    2d96:	bc3c      	pop	{r2, r3, r4, r5}
    2d98:	4690      	mov	r8, r2
    2d9a:	4699      	mov	r9, r3
    2d9c:	46a2      	mov	sl, r4
    2d9e:	46ab      	mov	fp, r5
    2da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2da2:	42a3      	cmp	r3, r4
    2da4:	d9d6      	bls.n	2d54 <__udivmoddi4+0x50>
    2da6:	2200      	movs	r2, #0
    2da8:	2300      	movs	r3, #0
    2daa:	9200      	str	r2, [sp, #0]
    2dac:	9301      	str	r3, [sp, #4]
    2dae:	4643      	mov	r3, r8
    2db0:	2b00      	cmp	r3, #0
    2db2:	d0e8      	beq.n	2d86 <__udivmoddi4+0x82>
    2db4:	07fb      	lsls	r3, r7, #31
    2db6:	0872      	lsrs	r2, r6, #1
    2db8:	431a      	orrs	r2, r3
    2dba:	4646      	mov	r6, r8
    2dbc:	087b      	lsrs	r3, r7, #1
    2dbe:	e00e      	b.n	2dde <__udivmoddi4+0xda>
    2dc0:	42ab      	cmp	r3, r5
    2dc2:	d101      	bne.n	2dc8 <__udivmoddi4+0xc4>
    2dc4:	42a2      	cmp	r2, r4
    2dc6:	d80c      	bhi.n	2de2 <__udivmoddi4+0xde>
    2dc8:	1aa4      	subs	r4, r4, r2
    2dca:	419d      	sbcs	r5, r3
    2dcc:	2001      	movs	r0, #1
    2dce:	1924      	adds	r4, r4, r4
    2dd0:	416d      	adcs	r5, r5
    2dd2:	2100      	movs	r1, #0
    2dd4:	3e01      	subs	r6, #1
    2dd6:	1824      	adds	r4, r4, r0
    2dd8:	414d      	adcs	r5, r1
    2dda:	2e00      	cmp	r6, #0
    2ddc:	d006      	beq.n	2dec <__udivmoddi4+0xe8>
    2dde:	42ab      	cmp	r3, r5
    2de0:	d9ee      	bls.n	2dc0 <__udivmoddi4+0xbc>
    2de2:	3e01      	subs	r6, #1
    2de4:	1924      	adds	r4, r4, r4
    2de6:	416d      	adcs	r5, r5
    2de8:	2e00      	cmp	r6, #0
    2dea:	d1f8      	bne.n	2dde <__udivmoddi4+0xda>
    2dec:	465b      	mov	r3, fp
    2dee:	9800      	ldr	r0, [sp, #0]
    2df0:	9901      	ldr	r1, [sp, #4]
    2df2:	1900      	adds	r0, r0, r4
    2df4:	4169      	adcs	r1, r5
    2df6:	2b00      	cmp	r3, #0
    2df8:	db22      	blt.n	2e40 <__udivmoddi4+0x13c>
    2dfa:	002b      	movs	r3, r5
    2dfc:	465a      	mov	r2, fp
    2dfe:	40d3      	lsrs	r3, r2
    2e00:	002a      	movs	r2, r5
    2e02:	4644      	mov	r4, r8
    2e04:	40e2      	lsrs	r2, r4
    2e06:	001c      	movs	r4, r3
    2e08:	465b      	mov	r3, fp
    2e0a:	0015      	movs	r5, r2
    2e0c:	2b00      	cmp	r3, #0
    2e0e:	db2c      	blt.n	2e6a <__udivmoddi4+0x166>
    2e10:	0026      	movs	r6, r4
    2e12:	409e      	lsls	r6, r3
    2e14:	0033      	movs	r3, r6
    2e16:	0026      	movs	r6, r4
    2e18:	4647      	mov	r7, r8
    2e1a:	40be      	lsls	r6, r7
    2e1c:	0032      	movs	r2, r6
    2e1e:	1a80      	subs	r0, r0, r2
    2e20:	4199      	sbcs	r1, r3
    2e22:	9000      	str	r0, [sp, #0]
    2e24:	9101      	str	r1, [sp, #4]
    2e26:	e7ae      	b.n	2d86 <__udivmoddi4+0x82>
    2e28:	4642      	mov	r2, r8
    2e2a:	2320      	movs	r3, #32
    2e2c:	1a9b      	subs	r3, r3, r2
    2e2e:	4652      	mov	r2, sl
    2e30:	40da      	lsrs	r2, r3
    2e32:	4641      	mov	r1, r8
    2e34:	0013      	movs	r3, r2
    2e36:	464a      	mov	r2, r9
    2e38:	408a      	lsls	r2, r1
    2e3a:	0017      	movs	r7, r2
    2e3c:	431f      	orrs	r7, r3
    2e3e:	e782      	b.n	2d46 <__udivmoddi4+0x42>
    2e40:	4642      	mov	r2, r8
    2e42:	2320      	movs	r3, #32
    2e44:	1a9b      	subs	r3, r3, r2
    2e46:	002a      	movs	r2, r5
    2e48:	4646      	mov	r6, r8
    2e4a:	409a      	lsls	r2, r3
    2e4c:	0023      	movs	r3, r4
    2e4e:	40f3      	lsrs	r3, r6
    2e50:	4313      	orrs	r3, r2
    2e52:	e7d5      	b.n	2e00 <__udivmoddi4+0xfc>
    2e54:	4642      	mov	r2, r8
    2e56:	2320      	movs	r3, #32
    2e58:	2100      	movs	r1, #0
    2e5a:	1a9b      	subs	r3, r3, r2
    2e5c:	2200      	movs	r2, #0
    2e5e:	9100      	str	r1, [sp, #0]
    2e60:	9201      	str	r2, [sp, #4]
    2e62:	2201      	movs	r2, #1
    2e64:	40da      	lsrs	r2, r3
    2e66:	9201      	str	r2, [sp, #4]
    2e68:	e782      	b.n	2d70 <__udivmoddi4+0x6c>
    2e6a:	4642      	mov	r2, r8
    2e6c:	2320      	movs	r3, #32
    2e6e:	0026      	movs	r6, r4
    2e70:	1a9b      	subs	r3, r3, r2
    2e72:	40de      	lsrs	r6, r3
    2e74:	002f      	movs	r7, r5
    2e76:	46b4      	mov	ip, r6
    2e78:	4097      	lsls	r7, r2
    2e7a:	4666      	mov	r6, ip
    2e7c:	003b      	movs	r3, r7
    2e7e:	4333      	orrs	r3, r6
    2e80:	e7c9      	b.n	2e16 <__udivmoddi4+0x112>
    2e82:	46c0      	nop			; (mov r8, r8)

00002e84 <__clzdi2>:
    2e84:	b510      	push	{r4, lr}
    2e86:	2900      	cmp	r1, #0
    2e88:	d103      	bne.n	2e92 <__clzdi2+0xe>
    2e8a:	f7ff feb3 	bl	2bf4 <__clzsi2>
    2e8e:	3020      	adds	r0, #32
    2e90:	e002      	b.n	2e98 <__clzdi2+0x14>
    2e92:	1c08      	adds	r0, r1, #0
    2e94:	f7ff feae 	bl	2bf4 <__clzsi2>
    2e98:	bd10      	pop	{r4, pc}
    2e9a:	46c0      	nop			; (mov r8, r8)

00002e9c <__libc_init_array>:
    2e9c:	b570      	push	{r4, r5, r6, lr}
    2e9e:	2600      	movs	r6, #0
    2ea0:	4d0c      	ldr	r5, [pc, #48]	; (2ed4 <__libc_init_array+0x38>)
    2ea2:	4c0d      	ldr	r4, [pc, #52]	; (2ed8 <__libc_init_array+0x3c>)
    2ea4:	1b64      	subs	r4, r4, r5
    2ea6:	10a4      	asrs	r4, r4, #2
    2ea8:	42a6      	cmp	r6, r4
    2eaa:	d109      	bne.n	2ec0 <__libc_init_array+0x24>
    2eac:	2600      	movs	r6, #0
    2eae:	f000 fcd5 	bl	385c <_init>
    2eb2:	4d0a      	ldr	r5, [pc, #40]	; (2edc <__libc_init_array+0x40>)
    2eb4:	4c0a      	ldr	r4, [pc, #40]	; (2ee0 <__libc_init_array+0x44>)
    2eb6:	1b64      	subs	r4, r4, r5
    2eb8:	10a4      	asrs	r4, r4, #2
    2eba:	42a6      	cmp	r6, r4
    2ebc:	d105      	bne.n	2eca <__libc_init_array+0x2e>
    2ebe:	bd70      	pop	{r4, r5, r6, pc}
    2ec0:	00b3      	lsls	r3, r6, #2
    2ec2:	58eb      	ldr	r3, [r5, r3]
    2ec4:	4798      	blx	r3
    2ec6:	3601      	adds	r6, #1
    2ec8:	e7ee      	b.n	2ea8 <__libc_init_array+0xc>
    2eca:	00b3      	lsls	r3, r6, #2
    2ecc:	58eb      	ldr	r3, [r5, r3]
    2ece:	4798      	blx	r3
    2ed0:	3601      	adds	r6, #1
    2ed2:	e7f2      	b.n	2eba <__libc_init_array+0x1e>
    2ed4:	00003868 	.word	0x00003868
    2ed8:	00003868 	.word	0x00003868
    2edc:	00003868 	.word	0x00003868
    2ee0:	0000386c 	.word	0x0000386c

00002ee4 <malloc>:
    2ee4:	b510      	push	{r4, lr}
    2ee6:	4b03      	ldr	r3, [pc, #12]	; (2ef4 <malloc+0x10>)
    2ee8:	0001      	movs	r1, r0
    2eea:	6818      	ldr	r0, [r3, #0]
    2eec:	f000 f86a 	bl	2fc4 <_malloc_r>
    2ef0:	bd10      	pop	{r4, pc}
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	20000010 	.word	0x20000010

00002ef8 <free>:
    2ef8:	b510      	push	{r4, lr}
    2efa:	4b03      	ldr	r3, [pc, #12]	; (2f08 <free+0x10>)
    2efc:	0001      	movs	r1, r0
    2efe:	6818      	ldr	r0, [r3, #0]
    2f00:	f000 f816 	bl	2f30 <_free_r>
    2f04:	bd10      	pop	{r4, pc}
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	20000010 	.word	0x20000010

00002f0c <memcpy>:
    2f0c:	2300      	movs	r3, #0
    2f0e:	b510      	push	{r4, lr}
    2f10:	429a      	cmp	r2, r3
    2f12:	d100      	bne.n	2f16 <memcpy+0xa>
    2f14:	bd10      	pop	{r4, pc}
    2f16:	5ccc      	ldrb	r4, [r1, r3]
    2f18:	54c4      	strb	r4, [r0, r3]
    2f1a:	3301      	adds	r3, #1
    2f1c:	e7f8      	b.n	2f10 <memcpy+0x4>

00002f1e <memset>:
    2f1e:	0003      	movs	r3, r0
    2f20:	1882      	adds	r2, r0, r2
    2f22:	4293      	cmp	r3, r2
    2f24:	d100      	bne.n	2f28 <memset+0xa>
    2f26:	4770      	bx	lr
    2f28:	7019      	strb	r1, [r3, #0]
    2f2a:	3301      	adds	r3, #1
    2f2c:	e7f9      	b.n	2f22 <memset+0x4>
	...

00002f30 <_free_r>:
    2f30:	b570      	push	{r4, r5, r6, lr}
    2f32:	0005      	movs	r5, r0
    2f34:	2900      	cmp	r1, #0
    2f36:	d010      	beq.n	2f5a <_free_r+0x2a>
    2f38:	1f0c      	subs	r4, r1, #4
    2f3a:	6823      	ldr	r3, [r4, #0]
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	da00      	bge.n	2f42 <_free_r+0x12>
    2f40:	18e4      	adds	r4, r4, r3
    2f42:	0028      	movs	r0, r5
    2f44:	f000 f8e2 	bl	310c <__malloc_lock>
    2f48:	4a1d      	ldr	r2, [pc, #116]	; (2fc0 <_free_r+0x90>)
    2f4a:	6813      	ldr	r3, [r2, #0]
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d105      	bne.n	2f5c <_free_r+0x2c>
    2f50:	6063      	str	r3, [r4, #4]
    2f52:	6014      	str	r4, [r2, #0]
    2f54:	0028      	movs	r0, r5
    2f56:	f000 f8da 	bl	310e <__malloc_unlock>
    2f5a:	bd70      	pop	{r4, r5, r6, pc}
    2f5c:	42a3      	cmp	r3, r4
    2f5e:	d909      	bls.n	2f74 <_free_r+0x44>
    2f60:	6821      	ldr	r1, [r4, #0]
    2f62:	1860      	adds	r0, r4, r1
    2f64:	4283      	cmp	r3, r0
    2f66:	d1f3      	bne.n	2f50 <_free_r+0x20>
    2f68:	6818      	ldr	r0, [r3, #0]
    2f6a:	685b      	ldr	r3, [r3, #4]
    2f6c:	1841      	adds	r1, r0, r1
    2f6e:	6021      	str	r1, [r4, #0]
    2f70:	e7ee      	b.n	2f50 <_free_r+0x20>
    2f72:	0013      	movs	r3, r2
    2f74:	685a      	ldr	r2, [r3, #4]
    2f76:	2a00      	cmp	r2, #0
    2f78:	d001      	beq.n	2f7e <_free_r+0x4e>
    2f7a:	42a2      	cmp	r2, r4
    2f7c:	d9f9      	bls.n	2f72 <_free_r+0x42>
    2f7e:	6819      	ldr	r1, [r3, #0]
    2f80:	1858      	adds	r0, r3, r1
    2f82:	42a0      	cmp	r0, r4
    2f84:	d10b      	bne.n	2f9e <_free_r+0x6e>
    2f86:	6820      	ldr	r0, [r4, #0]
    2f88:	1809      	adds	r1, r1, r0
    2f8a:	1858      	adds	r0, r3, r1
    2f8c:	6019      	str	r1, [r3, #0]
    2f8e:	4282      	cmp	r2, r0
    2f90:	d1e0      	bne.n	2f54 <_free_r+0x24>
    2f92:	6810      	ldr	r0, [r2, #0]
    2f94:	6852      	ldr	r2, [r2, #4]
    2f96:	1841      	adds	r1, r0, r1
    2f98:	6019      	str	r1, [r3, #0]
    2f9a:	605a      	str	r2, [r3, #4]
    2f9c:	e7da      	b.n	2f54 <_free_r+0x24>
    2f9e:	42a0      	cmp	r0, r4
    2fa0:	d902      	bls.n	2fa8 <_free_r+0x78>
    2fa2:	230c      	movs	r3, #12
    2fa4:	602b      	str	r3, [r5, #0]
    2fa6:	e7d5      	b.n	2f54 <_free_r+0x24>
    2fa8:	6821      	ldr	r1, [r4, #0]
    2faa:	1860      	adds	r0, r4, r1
    2fac:	4282      	cmp	r2, r0
    2fae:	d103      	bne.n	2fb8 <_free_r+0x88>
    2fb0:	6810      	ldr	r0, [r2, #0]
    2fb2:	6852      	ldr	r2, [r2, #4]
    2fb4:	1841      	adds	r1, r0, r1
    2fb6:	6021      	str	r1, [r4, #0]
    2fb8:	6062      	str	r2, [r4, #4]
    2fba:	605c      	str	r4, [r3, #4]
    2fbc:	e7ca      	b.n	2f54 <_free_r+0x24>
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	2000024c 	.word	0x2000024c

00002fc4 <_malloc_r>:
    2fc4:	2303      	movs	r3, #3
    2fc6:	b570      	push	{r4, r5, r6, lr}
    2fc8:	1ccd      	adds	r5, r1, #3
    2fca:	439d      	bics	r5, r3
    2fcc:	3508      	adds	r5, #8
    2fce:	0006      	movs	r6, r0
    2fd0:	2d0c      	cmp	r5, #12
    2fd2:	d21e      	bcs.n	3012 <_malloc_r+0x4e>
    2fd4:	250c      	movs	r5, #12
    2fd6:	42a9      	cmp	r1, r5
    2fd8:	d81d      	bhi.n	3016 <_malloc_r+0x52>
    2fda:	0030      	movs	r0, r6
    2fdc:	f000 f896 	bl	310c <__malloc_lock>
    2fe0:	4a25      	ldr	r2, [pc, #148]	; (3078 <_malloc_r+0xb4>)
    2fe2:	6814      	ldr	r4, [r2, #0]
    2fe4:	0021      	movs	r1, r4
    2fe6:	2900      	cmp	r1, #0
    2fe8:	d119      	bne.n	301e <_malloc_r+0x5a>
    2fea:	4c24      	ldr	r4, [pc, #144]	; (307c <_malloc_r+0xb8>)
    2fec:	6823      	ldr	r3, [r4, #0]
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d103      	bne.n	2ffa <_malloc_r+0x36>
    2ff2:	0030      	movs	r0, r6
    2ff4:	f000 f844 	bl	3080 <_sbrk_r>
    2ff8:	6020      	str	r0, [r4, #0]
    2ffa:	0029      	movs	r1, r5
    2ffc:	0030      	movs	r0, r6
    2ffe:	f000 f83f 	bl	3080 <_sbrk_r>
    3002:	1c43      	adds	r3, r0, #1
    3004:	d12c      	bne.n	3060 <_malloc_r+0x9c>
    3006:	230c      	movs	r3, #12
    3008:	0030      	movs	r0, r6
    300a:	6033      	str	r3, [r6, #0]
    300c:	f000 f87f 	bl	310e <__malloc_unlock>
    3010:	e003      	b.n	301a <_malloc_r+0x56>
    3012:	2d00      	cmp	r5, #0
    3014:	dadf      	bge.n	2fd6 <_malloc_r+0x12>
    3016:	230c      	movs	r3, #12
    3018:	6033      	str	r3, [r6, #0]
    301a:	2000      	movs	r0, #0
    301c:	bd70      	pop	{r4, r5, r6, pc}
    301e:	680b      	ldr	r3, [r1, #0]
    3020:	1b5b      	subs	r3, r3, r5
    3022:	d41a      	bmi.n	305a <_malloc_r+0x96>
    3024:	2b0b      	cmp	r3, #11
    3026:	d903      	bls.n	3030 <_malloc_r+0x6c>
    3028:	600b      	str	r3, [r1, #0]
    302a:	18cc      	adds	r4, r1, r3
    302c:	6025      	str	r5, [r4, #0]
    302e:	e003      	b.n	3038 <_malloc_r+0x74>
    3030:	428c      	cmp	r4, r1
    3032:	d10e      	bne.n	3052 <_malloc_r+0x8e>
    3034:	6863      	ldr	r3, [r4, #4]
    3036:	6013      	str	r3, [r2, #0]
    3038:	0030      	movs	r0, r6
    303a:	f000 f868 	bl	310e <__malloc_unlock>
    303e:	0020      	movs	r0, r4
    3040:	2207      	movs	r2, #7
    3042:	300b      	adds	r0, #11
    3044:	1d23      	adds	r3, r4, #4
    3046:	4390      	bics	r0, r2
    3048:	1ac3      	subs	r3, r0, r3
    304a:	d0e7      	beq.n	301c <_malloc_r+0x58>
    304c:	425a      	negs	r2, r3
    304e:	50e2      	str	r2, [r4, r3]
    3050:	e7e4      	b.n	301c <_malloc_r+0x58>
    3052:	684b      	ldr	r3, [r1, #4]
    3054:	6063      	str	r3, [r4, #4]
    3056:	000c      	movs	r4, r1
    3058:	e7ee      	b.n	3038 <_malloc_r+0x74>
    305a:	000c      	movs	r4, r1
    305c:	6849      	ldr	r1, [r1, #4]
    305e:	e7c2      	b.n	2fe6 <_malloc_r+0x22>
    3060:	2303      	movs	r3, #3
    3062:	1cc4      	adds	r4, r0, #3
    3064:	439c      	bics	r4, r3
    3066:	42a0      	cmp	r0, r4
    3068:	d0e0      	beq.n	302c <_malloc_r+0x68>
    306a:	1a21      	subs	r1, r4, r0
    306c:	0030      	movs	r0, r6
    306e:	f000 f807 	bl	3080 <_sbrk_r>
    3072:	1c43      	adds	r3, r0, #1
    3074:	d1da      	bne.n	302c <_malloc_r+0x68>
    3076:	e7c6      	b.n	3006 <_malloc_r+0x42>
    3078:	2000024c 	.word	0x2000024c
    307c:	20000250 	.word	0x20000250

00003080 <_sbrk_r>:
    3080:	2300      	movs	r3, #0
    3082:	b570      	push	{r4, r5, r6, lr}
    3084:	4c06      	ldr	r4, [pc, #24]	; (30a0 <_sbrk_r+0x20>)
    3086:	0005      	movs	r5, r0
    3088:	0008      	movs	r0, r1
    308a:	6023      	str	r3, [r4, #0]
    308c:	f7ff fab0 	bl	25f0 <_sbrk>
    3090:	1c43      	adds	r3, r0, #1
    3092:	d103      	bne.n	309c <_sbrk_r+0x1c>
    3094:	6823      	ldr	r3, [r4, #0]
    3096:	2b00      	cmp	r3, #0
    3098:	d000      	beq.n	309c <_sbrk_r+0x1c>
    309a:	602b      	str	r3, [r5, #0]
    309c:	bd70      	pop	{r4, r5, r6, pc}
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	20000564 	.word	0x20000564

000030a4 <strcpy>:
    30a4:	1c03      	adds	r3, r0, #0
    30a6:	780a      	ldrb	r2, [r1, #0]
    30a8:	3101      	adds	r1, #1
    30aa:	701a      	strb	r2, [r3, #0]
    30ac:	3301      	adds	r3, #1
    30ae:	2a00      	cmp	r2, #0
    30b0:	d1f9      	bne.n	30a6 <strcpy+0x2>
    30b2:	4770      	bx	lr

000030b4 <strlen>:
    30b4:	2300      	movs	r3, #0
    30b6:	5cc2      	ldrb	r2, [r0, r3]
    30b8:	3301      	adds	r3, #1
    30ba:	2a00      	cmp	r2, #0
    30bc:	d1fb      	bne.n	30b6 <strlen+0x2>
    30be:	1e58      	subs	r0, r3, #1
    30c0:	4770      	bx	lr
	...

000030c4 <_vsiprintf_r>:
    30c4:	b530      	push	{r4, r5, lr}
    30c6:	b09b      	sub	sp, #108	; 0x6c
    30c8:	9100      	str	r1, [sp, #0]
    30ca:	9104      	str	r1, [sp, #16]
    30cc:	4908      	ldr	r1, [pc, #32]	; (30f0 <_vsiprintf_r+0x2c>)
    30ce:	466d      	mov	r5, sp
    30d0:	9102      	str	r1, [sp, #8]
    30d2:	9105      	str	r1, [sp, #20]
    30d4:	2101      	movs	r1, #1
    30d6:	2482      	movs	r4, #130	; 0x82
    30d8:	4249      	negs	r1, r1
    30da:	81e9      	strh	r1, [r5, #14]
    30dc:	00a4      	lsls	r4, r4, #2
    30de:	4669      	mov	r1, sp
    30e0:	81ac      	strh	r4, [r5, #12]
    30e2:	f000 f877 	bl	31d4 <_svfiprintf_r>
    30e6:	2300      	movs	r3, #0
    30e8:	9a00      	ldr	r2, [sp, #0]
    30ea:	7013      	strb	r3, [r2, #0]
    30ec:	b01b      	add	sp, #108	; 0x6c
    30ee:	bd30      	pop	{r4, r5, pc}
    30f0:	7fffffff 	.word	0x7fffffff

000030f4 <vsiprintf>:
    30f4:	b510      	push	{r4, lr}
    30f6:	0013      	movs	r3, r2
    30f8:	000a      	movs	r2, r1
    30fa:	0001      	movs	r1, r0
    30fc:	4802      	ldr	r0, [pc, #8]	; (3108 <vsiprintf+0x14>)
    30fe:	6800      	ldr	r0, [r0, #0]
    3100:	f7ff ffe0 	bl	30c4 <_vsiprintf_r>
    3104:	bd10      	pop	{r4, pc}
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	20000010 	.word	0x20000010

0000310c <__malloc_lock>:
    310c:	4770      	bx	lr

0000310e <__malloc_unlock>:
    310e:	4770      	bx	lr

00003110 <__ssputs_r>:
    3110:	b5f0      	push	{r4, r5, r6, r7, lr}
    3112:	688e      	ldr	r6, [r1, #8]
    3114:	b085      	sub	sp, #20
    3116:	0007      	movs	r7, r0
    3118:	000c      	movs	r4, r1
    311a:	9203      	str	r2, [sp, #12]
    311c:	9301      	str	r3, [sp, #4]
    311e:	429e      	cmp	r6, r3
    3120:	d839      	bhi.n	3196 <__ssputs_r+0x86>
    3122:	2390      	movs	r3, #144	; 0x90
    3124:	898a      	ldrh	r2, [r1, #12]
    3126:	00db      	lsls	r3, r3, #3
    3128:	421a      	tst	r2, r3
    312a:	d034      	beq.n	3196 <__ssputs_r+0x86>
    312c:	2503      	movs	r5, #3
    312e:	6909      	ldr	r1, [r1, #16]
    3130:	6823      	ldr	r3, [r4, #0]
    3132:	1a5b      	subs	r3, r3, r1
    3134:	9302      	str	r3, [sp, #8]
    3136:	6963      	ldr	r3, [r4, #20]
    3138:	9802      	ldr	r0, [sp, #8]
    313a:	435d      	muls	r5, r3
    313c:	0feb      	lsrs	r3, r5, #31
    313e:	195d      	adds	r5, r3, r5
    3140:	9b01      	ldr	r3, [sp, #4]
    3142:	106d      	asrs	r5, r5, #1
    3144:	3301      	adds	r3, #1
    3146:	181b      	adds	r3, r3, r0
    3148:	42ab      	cmp	r3, r5
    314a:	d900      	bls.n	314e <__ssputs_r+0x3e>
    314c:	001d      	movs	r5, r3
    314e:	0553      	lsls	r3, r2, #21
    3150:	d532      	bpl.n	31b8 <__ssputs_r+0xa8>
    3152:	0029      	movs	r1, r5
    3154:	0038      	movs	r0, r7
    3156:	f7ff ff35 	bl	2fc4 <_malloc_r>
    315a:	1e06      	subs	r6, r0, #0
    315c:	d109      	bne.n	3172 <__ssputs_r+0x62>
    315e:	230c      	movs	r3, #12
    3160:	603b      	str	r3, [r7, #0]
    3162:	2340      	movs	r3, #64	; 0x40
    3164:	2001      	movs	r0, #1
    3166:	89a2      	ldrh	r2, [r4, #12]
    3168:	4240      	negs	r0, r0
    316a:	4313      	orrs	r3, r2
    316c:	81a3      	strh	r3, [r4, #12]
    316e:	b005      	add	sp, #20
    3170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3172:	9a02      	ldr	r2, [sp, #8]
    3174:	6921      	ldr	r1, [r4, #16]
    3176:	f7ff fec9 	bl	2f0c <memcpy>
    317a:	89a3      	ldrh	r3, [r4, #12]
    317c:	4a14      	ldr	r2, [pc, #80]	; (31d0 <__ssputs_r+0xc0>)
    317e:	401a      	ands	r2, r3
    3180:	2380      	movs	r3, #128	; 0x80
    3182:	4313      	orrs	r3, r2
    3184:	81a3      	strh	r3, [r4, #12]
    3186:	9b02      	ldr	r3, [sp, #8]
    3188:	6126      	str	r6, [r4, #16]
    318a:	18f6      	adds	r6, r6, r3
    318c:	6026      	str	r6, [r4, #0]
    318e:	6165      	str	r5, [r4, #20]
    3190:	9e01      	ldr	r6, [sp, #4]
    3192:	1aed      	subs	r5, r5, r3
    3194:	60a5      	str	r5, [r4, #8]
    3196:	9b01      	ldr	r3, [sp, #4]
    3198:	42b3      	cmp	r3, r6
    319a:	d200      	bcs.n	319e <__ssputs_r+0x8e>
    319c:	001e      	movs	r6, r3
    319e:	0032      	movs	r2, r6
    31a0:	9903      	ldr	r1, [sp, #12]
    31a2:	6820      	ldr	r0, [r4, #0]
    31a4:	f000 faad 	bl	3702 <memmove>
    31a8:	68a3      	ldr	r3, [r4, #8]
    31aa:	2000      	movs	r0, #0
    31ac:	1b9b      	subs	r3, r3, r6
    31ae:	60a3      	str	r3, [r4, #8]
    31b0:	6823      	ldr	r3, [r4, #0]
    31b2:	199e      	adds	r6, r3, r6
    31b4:	6026      	str	r6, [r4, #0]
    31b6:	e7da      	b.n	316e <__ssputs_r+0x5e>
    31b8:	002a      	movs	r2, r5
    31ba:	0038      	movs	r0, r7
    31bc:	f000 fab3 	bl	3726 <_realloc_r>
    31c0:	1e06      	subs	r6, r0, #0
    31c2:	d1e0      	bne.n	3186 <__ssputs_r+0x76>
    31c4:	6921      	ldr	r1, [r4, #16]
    31c6:	0038      	movs	r0, r7
    31c8:	f7ff feb2 	bl	2f30 <_free_r>
    31cc:	e7c7      	b.n	315e <__ssputs_r+0x4e>
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	fffffb7f 	.word	0xfffffb7f

000031d4 <_svfiprintf_r>:
    31d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31d6:	b09f      	sub	sp, #124	; 0x7c
    31d8:	9002      	str	r0, [sp, #8]
    31da:	9305      	str	r3, [sp, #20]
    31dc:	898b      	ldrh	r3, [r1, #12]
    31de:	000f      	movs	r7, r1
    31e0:	0016      	movs	r6, r2
    31e2:	061b      	lsls	r3, r3, #24
    31e4:	d511      	bpl.n	320a <_svfiprintf_r+0x36>
    31e6:	690b      	ldr	r3, [r1, #16]
    31e8:	2b00      	cmp	r3, #0
    31ea:	d10e      	bne.n	320a <_svfiprintf_r+0x36>
    31ec:	2140      	movs	r1, #64	; 0x40
    31ee:	f7ff fee9 	bl	2fc4 <_malloc_r>
    31f2:	6038      	str	r0, [r7, #0]
    31f4:	6138      	str	r0, [r7, #16]
    31f6:	2800      	cmp	r0, #0
    31f8:	d105      	bne.n	3206 <_svfiprintf_r+0x32>
    31fa:	230c      	movs	r3, #12
    31fc:	9a02      	ldr	r2, [sp, #8]
    31fe:	3801      	subs	r0, #1
    3200:	6013      	str	r3, [r2, #0]
    3202:	b01f      	add	sp, #124	; 0x7c
    3204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3206:	2340      	movs	r3, #64	; 0x40
    3208:	617b      	str	r3, [r7, #20]
    320a:	2300      	movs	r3, #0
    320c:	ad06      	add	r5, sp, #24
    320e:	616b      	str	r3, [r5, #20]
    3210:	3320      	adds	r3, #32
    3212:	766b      	strb	r3, [r5, #25]
    3214:	3310      	adds	r3, #16
    3216:	76ab      	strb	r3, [r5, #26]
    3218:	0034      	movs	r4, r6
    321a:	7823      	ldrb	r3, [r4, #0]
    321c:	2b00      	cmp	r3, #0
    321e:	d147      	bne.n	32b0 <_svfiprintf_r+0xdc>
    3220:	1ba3      	subs	r3, r4, r6
    3222:	9304      	str	r3, [sp, #16]
    3224:	d00d      	beq.n	3242 <_svfiprintf_r+0x6e>
    3226:	1ba3      	subs	r3, r4, r6
    3228:	0032      	movs	r2, r6
    322a:	0039      	movs	r1, r7
    322c:	9802      	ldr	r0, [sp, #8]
    322e:	f7ff ff6f 	bl	3110 <__ssputs_r>
    3232:	1c43      	adds	r3, r0, #1
    3234:	d100      	bne.n	3238 <_svfiprintf_r+0x64>
    3236:	e0b5      	b.n	33a4 <_svfiprintf_r+0x1d0>
    3238:	696a      	ldr	r2, [r5, #20]
    323a:	9b04      	ldr	r3, [sp, #16]
    323c:	4694      	mov	ip, r2
    323e:	4463      	add	r3, ip
    3240:	616b      	str	r3, [r5, #20]
    3242:	7823      	ldrb	r3, [r4, #0]
    3244:	2b00      	cmp	r3, #0
    3246:	d100      	bne.n	324a <_svfiprintf_r+0x76>
    3248:	e0ac      	b.n	33a4 <_svfiprintf_r+0x1d0>
    324a:	2201      	movs	r2, #1
    324c:	2300      	movs	r3, #0
    324e:	4252      	negs	r2, r2
    3250:	606a      	str	r2, [r5, #4]
    3252:	a902      	add	r1, sp, #8
    3254:	3254      	adds	r2, #84	; 0x54
    3256:	1852      	adds	r2, r2, r1
    3258:	3401      	adds	r4, #1
    325a:	602b      	str	r3, [r5, #0]
    325c:	60eb      	str	r3, [r5, #12]
    325e:	60ab      	str	r3, [r5, #8]
    3260:	7013      	strb	r3, [r2, #0]
    3262:	65ab      	str	r3, [r5, #88]	; 0x58
    3264:	4e58      	ldr	r6, [pc, #352]	; (33c8 <_svfiprintf_r+0x1f4>)
    3266:	2205      	movs	r2, #5
    3268:	7821      	ldrb	r1, [r4, #0]
    326a:	0030      	movs	r0, r6
    326c:	f000 fa3e 	bl	36ec <memchr>
    3270:	1c62      	adds	r2, r4, #1
    3272:	2800      	cmp	r0, #0
    3274:	d120      	bne.n	32b8 <_svfiprintf_r+0xe4>
    3276:	6829      	ldr	r1, [r5, #0]
    3278:	06cb      	lsls	r3, r1, #27
    327a:	d504      	bpl.n	3286 <_svfiprintf_r+0xb2>
    327c:	2353      	movs	r3, #83	; 0x53
    327e:	ae02      	add	r6, sp, #8
    3280:	3020      	adds	r0, #32
    3282:	199b      	adds	r3, r3, r6
    3284:	7018      	strb	r0, [r3, #0]
    3286:	070b      	lsls	r3, r1, #28
    3288:	d504      	bpl.n	3294 <_svfiprintf_r+0xc0>
    328a:	2353      	movs	r3, #83	; 0x53
    328c:	202b      	movs	r0, #43	; 0x2b
    328e:	ae02      	add	r6, sp, #8
    3290:	199b      	adds	r3, r3, r6
    3292:	7018      	strb	r0, [r3, #0]
    3294:	7823      	ldrb	r3, [r4, #0]
    3296:	2b2a      	cmp	r3, #42	; 0x2a
    3298:	d016      	beq.n	32c8 <_svfiprintf_r+0xf4>
    329a:	2000      	movs	r0, #0
    329c:	210a      	movs	r1, #10
    329e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    32a0:	7822      	ldrb	r2, [r4, #0]
    32a2:	3a30      	subs	r2, #48	; 0x30
    32a4:	2a09      	cmp	r2, #9
    32a6:	d955      	bls.n	3354 <_svfiprintf_r+0x180>
    32a8:	2800      	cmp	r0, #0
    32aa:	d015      	beq.n	32d8 <_svfiprintf_r+0x104>
    32ac:	9309      	str	r3, [sp, #36]	; 0x24
    32ae:	e013      	b.n	32d8 <_svfiprintf_r+0x104>
    32b0:	2b25      	cmp	r3, #37	; 0x25
    32b2:	d0b5      	beq.n	3220 <_svfiprintf_r+0x4c>
    32b4:	3401      	adds	r4, #1
    32b6:	e7b0      	b.n	321a <_svfiprintf_r+0x46>
    32b8:	2301      	movs	r3, #1
    32ba:	1b80      	subs	r0, r0, r6
    32bc:	4083      	lsls	r3, r0
    32be:	6829      	ldr	r1, [r5, #0]
    32c0:	0014      	movs	r4, r2
    32c2:	430b      	orrs	r3, r1
    32c4:	602b      	str	r3, [r5, #0]
    32c6:	e7cd      	b.n	3264 <_svfiprintf_r+0x90>
    32c8:	9b05      	ldr	r3, [sp, #20]
    32ca:	1d18      	adds	r0, r3, #4
    32cc:	681b      	ldr	r3, [r3, #0]
    32ce:	9005      	str	r0, [sp, #20]
    32d0:	2b00      	cmp	r3, #0
    32d2:	db39      	blt.n	3348 <_svfiprintf_r+0x174>
    32d4:	9309      	str	r3, [sp, #36]	; 0x24
    32d6:	0014      	movs	r4, r2
    32d8:	7823      	ldrb	r3, [r4, #0]
    32da:	2b2e      	cmp	r3, #46	; 0x2e
    32dc:	d10b      	bne.n	32f6 <_svfiprintf_r+0x122>
    32de:	7863      	ldrb	r3, [r4, #1]
    32e0:	1c62      	adds	r2, r4, #1
    32e2:	2b2a      	cmp	r3, #42	; 0x2a
    32e4:	d13e      	bne.n	3364 <_svfiprintf_r+0x190>
    32e6:	9b05      	ldr	r3, [sp, #20]
    32e8:	3402      	adds	r4, #2
    32ea:	1d1a      	adds	r2, r3, #4
    32ec:	681b      	ldr	r3, [r3, #0]
    32ee:	9205      	str	r2, [sp, #20]
    32f0:	2b00      	cmp	r3, #0
    32f2:	db34      	blt.n	335e <_svfiprintf_r+0x18a>
    32f4:	9307      	str	r3, [sp, #28]
    32f6:	4e35      	ldr	r6, [pc, #212]	; (33cc <_svfiprintf_r+0x1f8>)
    32f8:	7821      	ldrb	r1, [r4, #0]
    32fa:	2203      	movs	r2, #3
    32fc:	0030      	movs	r0, r6
    32fe:	f000 f9f5 	bl	36ec <memchr>
    3302:	2800      	cmp	r0, #0
    3304:	d006      	beq.n	3314 <_svfiprintf_r+0x140>
    3306:	2340      	movs	r3, #64	; 0x40
    3308:	1b80      	subs	r0, r0, r6
    330a:	4083      	lsls	r3, r0
    330c:	682a      	ldr	r2, [r5, #0]
    330e:	3401      	adds	r4, #1
    3310:	4313      	orrs	r3, r2
    3312:	602b      	str	r3, [r5, #0]
    3314:	7821      	ldrb	r1, [r4, #0]
    3316:	2206      	movs	r2, #6
    3318:	482d      	ldr	r0, [pc, #180]	; (33d0 <_svfiprintf_r+0x1fc>)
    331a:	1c66      	adds	r6, r4, #1
    331c:	7629      	strb	r1, [r5, #24]
    331e:	f000 f9e5 	bl	36ec <memchr>
    3322:	2800      	cmp	r0, #0
    3324:	d046      	beq.n	33b4 <_svfiprintf_r+0x1e0>
    3326:	4b2b      	ldr	r3, [pc, #172]	; (33d4 <_svfiprintf_r+0x200>)
    3328:	2b00      	cmp	r3, #0
    332a:	d12f      	bne.n	338c <_svfiprintf_r+0x1b8>
    332c:	6829      	ldr	r1, [r5, #0]
    332e:	9b05      	ldr	r3, [sp, #20]
    3330:	2207      	movs	r2, #7
    3332:	05c9      	lsls	r1, r1, #23
    3334:	d528      	bpl.n	3388 <_svfiprintf_r+0x1b4>
    3336:	189b      	adds	r3, r3, r2
    3338:	4393      	bics	r3, r2
    333a:	3308      	adds	r3, #8
    333c:	9305      	str	r3, [sp, #20]
    333e:	696b      	ldr	r3, [r5, #20]
    3340:	9a03      	ldr	r2, [sp, #12]
    3342:	189b      	adds	r3, r3, r2
    3344:	616b      	str	r3, [r5, #20]
    3346:	e767      	b.n	3218 <_svfiprintf_r+0x44>
    3348:	425b      	negs	r3, r3
    334a:	60eb      	str	r3, [r5, #12]
    334c:	2302      	movs	r3, #2
    334e:	430b      	orrs	r3, r1
    3350:	602b      	str	r3, [r5, #0]
    3352:	e7c0      	b.n	32d6 <_svfiprintf_r+0x102>
    3354:	434b      	muls	r3, r1
    3356:	3401      	adds	r4, #1
    3358:	189b      	adds	r3, r3, r2
    335a:	2001      	movs	r0, #1
    335c:	e7a0      	b.n	32a0 <_svfiprintf_r+0xcc>
    335e:	2301      	movs	r3, #1
    3360:	425b      	negs	r3, r3
    3362:	e7c7      	b.n	32f4 <_svfiprintf_r+0x120>
    3364:	2300      	movs	r3, #0
    3366:	0014      	movs	r4, r2
    3368:	200a      	movs	r0, #10
    336a:	001a      	movs	r2, r3
    336c:	606b      	str	r3, [r5, #4]
    336e:	7821      	ldrb	r1, [r4, #0]
    3370:	3930      	subs	r1, #48	; 0x30
    3372:	2909      	cmp	r1, #9
    3374:	d903      	bls.n	337e <_svfiprintf_r+0x1aa>
    3376:	2b00      	cmp	r3, #0
    3378:	d0bd      	beq.n	32f6 <_svfiprintf_r+0x122>
    337a:	9207      	str	r2, [sp, #28]
    337c:	e7bb      	b.n	32f6 <_svfiprintf_r+0x122>
    337e:	4342      	muls	r2, r0
    3380:	3401      	adds	r4, #1
    3382:	1852      	adds	r2, r2, r1
    3384:	2301      	movs	r3, #1
    3386:	e7f2      	b.n	336e <_svfiprintf_r+0x19a>
    3388:	3307      	adds	r3, #7
    338a:	e7d5      	b.n	3338 <_svfiprintf_r+0x164>
    338c:	ab05      	add	r3, sp, #20
    338e:	9300      	str	r3, [sp, #0]
    3390:	003a      	movs	r2, r7
    3392:	4b11      	ldr	r3, [pc, #68]	; (33d8 <_svfiprintf_r+0x204>)
    3394:	0029      	movs	r1, r5
    3396:	9802      	ldr	r0, [sp, #8]
    3398:	e000      	b.n	339c <_svfiprintf_r+0x1c8>
    339a:	bf00      	nop
    339c:	9003      	str	r0, [sp, #12]
    339e:	9b03      	ldr	r3, [sp, #12]
    33a0:	3301      	adds	r3, #1
    33a2:	d1cc      	bne.n	333e <_svfiprintf_r+0x16a>
    33a4:	89bb      	ldrh	r3, [r7, #12]
    33a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    33a8:	065b      	lsls	r3, r3, #25
    33aa:	d400      	bmi.n	33ae <_svfiprintf_r+0x1da>
    33ac:	e729      	b.n	3202 <_svfiprintf_r+0x2e>
    33ae:	2001      	movs	r0, #1
    33b0:	4240      	negs	r0, r0
    33b2:	e726      	b.n	3202 <_svfiprintf_r+0x2e>
    33b4:	ab05      	add	r3, sp, #20
    33b6:	9300      	str	r3, [sp, #0]
    33b8:	003a      	movs	r2, r7
    33ba:	4b07      	ldr	r3, [pc, #28]	; (33d8 <_svfiprintf_r+0x204>)
    33bc:	0029      	movs	r1, r5
    33be:	9802      	ldr	r0, [sp, #8]
    33c0:	f000 f87a 	bl	34b8 <_printf_i>
    33c4:	e7ea      	b.n	339c <_svfiprintf_r+0x1c8>
    33c6:	46c0      	nop			; (mov r8, r8)
    33c8:	00003826 	.word	0x00003826
    33cc:	0000382c 	.word	0x0000382c
    33d0:	00003830 	.word	0x00003830
    33d4:	00000000 	.word	0x00000000
    33d8:	00003111 	.word	0x00003111

000033dc <_printf_common>:
    33dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    33de:	0015      	movs	r5, r2
    33e0:	9301      	str	r3, [sp, #4]
    33e2:	688a      	ldr	r2, [r1, #8]
    33e4:	690b      	ldr	r3, [r1, #16]
    33e6:	9000      	str	r0, [sp, #0]
    33e8:	000c      	movs	r4, r1
    33ea:	4293      	cmp	r3, r2
    33ec:	da00      	bge.n	33f0 <_printf_common+0x14>
    33ee:	0013      	movs	r3, r2
    33f0:	0022      	movs	r2, r4
    33f2:	602b      	str	r3, [r5, #0]
    33f4:	3243      	adds	r2, #67	; 0x43
    33f6:	7812      	ldrb	r2, [r2, #0]
    33f8:	2a00      	cmp	r2, #0
    33fa:	d001      	beq.n	3400 <_printf_common+0x24>
    33fc:	3301      	adds	r3, #1
    33fe:	602b      	str	r3, [r5, #0]
    3400:	6823      	ldr	r3, [r4, #0]
    3402:	069b      	lsls	r3, r3, #26
    3404:	d502      	bpl.n	340c <_printf_common+0x30>
    3406:	682b      	ldr	r3, [r5, #0]
    3408:	3302      	adds	r3, #2
    340a:	602b      	str	r3, [r5, #0]
    340c:	2706      	movs	r7, #6
    340e:	6823      	ldr	r3, [r4, #0]
    3410:	401f      	ands	r7, r3
    3412:	d027      	beq.n	3464 <_printf_common+0x88>
    3414:	0023      	movs	r3, r4
    3416:	3343      	adds	r3, #67	; 0x43
    3418:	781b      	ldrb	r3, [r3, #0]
    341a:	1e5a      	subs	r2, r3, #1
    341c:	4193      	sbcs	r3, r2
    341e:	6822      	ldr	r2, [r4, #0]
    3420:	0692      	lsls	r2, r2, #26
    3422:	d430      	bmi.n	3486 <_printf_common+0xaa>
    3424:	0022      	movs	r2, r4
    3426:	9901      	ldr	r1, [sp, #4]
    3428:	3243      	adds	r2, #67	; 0x43
    342a:	9800      	ldr	r0, [sp, #0]
    342c:	9e08      	ldr	r6, [sp, #32]
    342e:	47b0      	blx	r6
    3430:	1c43      	adds	r3, r0, #1
    3432:	d025      	beq.n	3480 <_printf_common+0xa4>
    3434:	2306      	movs	r3, #6
    3436:	6820      	ldr	r0, [r4, #0]
    3438:	682a      	ldr	r2, [r5, #0]
    343a:	68e1      	ldr	r1, [r4, #12]
    343c:	4003      	ands	r3, r0
    343e:	2500      	movs	r5, #0
    3440:	2b04      	cmp	r3, #4
    3442:	d103      	bne.n	344c <_printf_common+0x70>
    3444:	1a8d      	subs	r5, r1, r2
    3446:	43eb      	mvns	r3, r5
    3448:	17db      	asrs	r3, r3, #31
    344a:	401d      	ands	r5, r3
    344c:	68a3      	ldr	r3, [r4, #8]
    344e:	6922      	ldr	r2, [r4, #16]
    3450:	4293      	cmp	r3, r2
    3452:	dd01      	ble.n	3458 <_printf_common+0x7c>
    3454:	1a9b      	subs	r3, r3, r2
    3456:	18ed      	adds	r5, r5, r3
    3458:	2700      	movs	r7, #0
    345a:	42bd      	cmp	r5, r7
    345c:	d120      	bne.n	34a0 <_printf_common+0xc4>
    345e:	2000      	movs	r0, #0
    3460:	e010      	b.n	3484 <_printf_common+0xa8>
    3462:	3701      	adds	r7, #1
    3464:	68e3      	ldr	r3, [r4, #12]
    3466:	682a      	ldr	r2, [r5, #0]
    3468:	1a9b      	subs	r3, r3, r2
    346a:	429f      	cmp	r7, r3
    346c:	dad2      	bge.n	3414 <_printf_common+0x38>
    346e:	0022      	movs	r2, r4
    3470:	2301      	movs	r3, #1
    3472:	3219      	adds	r2, #25
    3474:	9901      	ldr	r1, [sp, #4]
    3476:	9800      	ldr	r0, [sp, #0]
    3478:	9e08      	ldr	r6, [sp, #32]
    347a:	47b0      	blx	r6
    347c:	1c43      	adds	r3, r0, #1
    347e:	d1f0      	bne.n	3462 <_printf_common+0x86>
    3480:	2001      	movs	r0, #1
    3482:	4240      	negs	r0, r0
    3484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3486:	2030      	movs	r0, #48	; 0x30
    3488:	18e1      	adds	r1, r4, r3
    348a:	3143      	adds	r1, #67	; 0x43
    348c:	7008      	strb	r0, [r1, #0]
    348e:	0021      	movs	r1, r4
    3490:	1c5a      	adds	r2, r3, #1
    3492:	3145      	adds	r1, #69	; 0x45
    3494:	7809      	ldrb	r1, [r1, #0]
    3496:	18a2      	adds	r2, r4, r2
    3498:	3243      	adds	r2, #67	; 0x43
    349a:	3302      	adds	r3, #2
    349c:	7011      	strb	r1, [r2, #0]
    349e:	e7c1      	b.n	3424 <_printf_common+0x48>
    34a0:	0022      	movs	r2, r4
    34a2:	2301      	movs	r3, #1
    34a4:	321a      	adds	r2, #26
    34a6:	9901      	ldr	r1, [sp, #4]
    34a8:	9800      	ldr	r0, [sp, #0]
    34aa:	9e08      	ldr	r6, [sp, #32]
    34ac:	47b0      	blx	r6
    34ae:	1c43      	adds	r3, r0, #1
    34b0:	d0e6      	beq.n	3480 <_printf_common+0xa4>
    34b2:	3701      	adds	r7, #1
    34b4:	e7d1      	b.n	345a <_printf_common+0x7e>
	...

000034b8 <_printf_i>:
    34b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ba:	b08b      	sub	sp, #44	; 0x2c
    34bc:	9206      	str	r2, [sp, #24]
    34be:	000a      	movs	r2, r1
    34c0:	3243      	adds	r2, #67	; 0x43
    34c2:	9307      	str	r3, [sp, #28]
    34c4:	9005      	str	r0, [sp, #20]
    34c6:	9204      	str	r2, [sp, #16]
    34c8:	7e0a      	ldrb	r2, [r1, #24]
    34ca:	000c      	movs	r4, r1
    34cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34ce:	2a6e      	cmp	r2, #110	; 0x6e
    34d0:	d100      	bne.n	34d4 <_printf_i+0x1c>
    34d2:	e08f      	b.n	35f4 <_printf_i+0x13c>
    34d4:	d817      	bhi.n	3506 <_printf_i+0x4e>
    34d6:	2a63      	cmp	r2, #99	; 0x63
    34d8:	d02c      	beq.n	3534 <_printf_i+0x7c>
    34da:	d808      	bhi.n	34ee <_printf_i+0x36>
    34dc:	2a00      	cmp	r2, #0
    34de:	d100      	bne.n	34e2 <_printf_i+0x2a>
    34e0:	e099      	b.n	3616 <_printf_i+0x15e>
    34e2:	2a58      	cmp	r2, #88	; 0x58
    34e4:	d054      	beq.n	3590 <_printf_i+0xd8>
    34e6:	0026      	movs	r6, r4
    34e8:	3642      	adds	r6, #66	; 0x42
    34ea:	7032      	strb	r2, [r6, #0]
    34ec:	e029      	b.n	3542 <_printf_i+0x8a>
    34ee:	2a64      	cmp	r2, #100	; 0x64
    34f0:	d001      	beq.n	34f6 <_printf_i+0x3e>
    34f2:	2a69      	cmp	r2, #105	; 0x69
    34f4:	d1f7      	bne.n	34e6 <_printf_i+0x2e>
    34f6:	6821      	ldr	r1, [r4, #0]
    34f8:	681a      	ldr	r2, [r3, #0]
    34fa:	0608      	lsls	r0, r1, #24
    34fc:	d523      	bpl.n	3546 <_printf_i+0x8e>
    34fe:	1d11      	adds	r1, r2, #4
    3500:	6019      	str	r1, [r3, #0]
    3502:	6815      	ldr	r5, [r2, #0]
    3504:	e025      	b.n	3552 <_printf_i+0x9a>
    3506:	2a73      	cmp	r2, #115	; 0x73
    3508:	d100      	bne.n	350c <_printf_i+0x54>
    350a:	e088      	b.n	361e <_printf_i+0x166>
    350c:	d808      	bhi.n	3520 <_printf_i+0x68>
    350e:	2a6f      	cmp	r2, #111	; 0x6f
    3510:	d029      	beq.n	3566 <_printf_i+0xae>
    3512:	2a70      	cmp	r2, #112	; 0x70
    3514:	d1e7      	bne.n	34e6 <_printf_i+0x2e>
    3516:	2220      	movs	r2, #32
    3518:	6809      	ldr	r1, [r1, #0]
    351a:	430a      	orrs	r2, r1
    351c:	6022      	str	r2, [r4, #0]
    351e:	e003      	b.n	3528 <_printf_i+0x70>
    3520:	2a75      	cmp	r2, #117	; 0x75
    3522:	d020      	beq.n	3566 <_printf_i+0xae>
    3524:	2a78      	cmp	r2, #120	; 0x78
    3526:	d1de      	bne.n	34e6 <_printf_i+0x2e>
    3528:	0022      	movs	r2, r4
    352a:	2178      	movs	r1, #120	; 0x78
    352c:	3245      	adds	r2, #69	; 0x45
    352e:	7011      	strb	r1, [r2, #0]
    3530:	4a6c      	ldr	r2, [pc, #432]	; (36e4 <_printf_i+0x22c>)
    3532:	e030      	b.n	3596 <_printf_i+0xde>
    3534:	000e      	movs	r6, r1
    3536:	681a      	ldr	r2, [r3, #0]
    3538:	3642      	adds	r6, #66	; 0x42
    353a:	1d11      	adds	r1, r2, #4
    353c:	6019      	str	r1, [r3, #0]
    353e:	6813      	ldr	r3, [r2, #0]
    3540:	7033      	strb	r3, [r6, #0]
    3542:	2301      	movs	r3, #1
    3544:	e079      	b.n	363a <_printf_i+0x182>
    3546:	0649      	lsls	r1, r1, #25
    3548:	d5d9      	bpl.n	34fe <_printf_i+0x46>
    354a:	1d11      	adds	r1, r2, #4
    354c:	6019      	str	r1, [r3, #0]
    354e:	2300      	movs	r3, #0
    3550:	5ed5      	ldrsh	r5, [r2, r3]
    3552:	2d00      	cmp	r5, #0
    3554:	da03      	bge.n	355e <_printf_i+0xa6>
    3556:	232d      	movs	r3, #45	; 0x2d
    3558:	9a04      	ldr	r2, [sp, #16]
    355a:	426d      	negs	r5, r5
    355c:	7013      	strb	r3, [r2, #0]
    355e:	4b62      	ldr	r3, [pc, #392]	; (36e8 <_printf_i+0x230>)
    3560:	270a      	movs	r7, #10
    3562:	9303      	str	r3, [sp, #12]
    3564:	e02f      	b.n	35c6 <_printf_i+0x10e>
    3566:	6820      	ldr	r0, [r4, #0]
    3568:	6819      	ldr	r1, [r3, #0]
    356a:	0605      	lsls	r5, r0, #24
    356c:	d503      	bpl.n	3576 <_printf_i+0xbe>
    356e:	1d08      	adds	r0, r1, #4
    3570:	6018      	str	r0, [r3, #0]
    3572:	680d      	ldr	r5, [r1, #0]
    3574:	e005      	b.n	3582 <_printf_i+0xca>
    3576:	0640      	lsls	r0, r0, #25
    3578:	d5f9      	bpl.n	356e <_printf_i+0xb6>
    357a:	680d      	ldr	r5, [r1, #0]
    357c:	1d08      	adds	r0, r1, #4
    357e:	6018      	str	r0, [r3, #0]
    3580:	b2ad      	uxth	r5, r5
    3582:	4b59      	ldr	r3, [pc, #356]	; (36e8 <_printf_i+0x230>)
    3584:	2708      	movs	r7, #8
    3586:	9303      	str	r3, [sp, #12]
    3588:	2a6f      	cmp	r2, #111	; 0x6f
    358a:	d018      	beq.n	35be <_printf_i+0x106>
    358c:	270a      	movs	r7, #10
    358e:	e016      	b.n	35be <_printf_i+0x106>
    3590:	3145      	adds	r1, #69	; 0x45
    3592:	700a      	strb	r2, [r1, #0]
    3594:	4a54      	ldr	r2, [pc, #336]	; (36e8 <_printf_i+0x230>)
    3596:	9203      	str	r2, [sp, #12]
    3598:	681a      	ldr	r2, [r3, #0]
    359a:	6821      	ldr	r1, [r4, #0]
    359c:	1d10      	adds	r0, r2, #4
    359e:	6018      	str	r0, [r3, #0]
    35a0:	6815      	ldr	r5, [r2, #0]
    35a2:	0608      	lsls	r0, r1, #24
    35a4:	d522      	bpl.n	35ec <_printf_i+0x134>
    35a6:	07cb      	lsls	r3, r1, #31
    35a8:	d502      	bpl.n	35b0 <_printf_i+0xf8>
    35aa:	2320      	movs	r3, #32
    35ac:	4319      	orrs	r1, r3
    35ae:	6021      	str	r1, [r4, #0]
    35b0:	2710      	movs	r7, #16
    35b2:	2d00      	cmp	r5, #0
    35b4:	d103      	bne.n	35be <_printf_i+0x106>
    35b6:	2320      	movs	r3, #32
    35b8:	6822      	ldr	r2, [r4, #0]
    35ba:	439a      	bics	r2, r3
    35bc:	6022      	str	r2, [r4, #0]
    35be:	0023      	movs	r3, r4
    35c0:	2200      	movs	r2, #0
    35c2:	3343      	adds	r3, #67	; 0x43
    35c4:	701a      	strb	r2, [r3, #0]
    35c6:	6863      	ldr	r3, [r4, #4]
    35c8:	60a3      	str	r3, [r4, #8]
    35ca:	2b00      	cmp	r3, #0
    35cc:	db5c      	blt.n	3688 <_printf_i+0x1d0>
    35ce:	2204      	movs	r2, #4
    35d0:	6821      	ldr	r1, [r4, #0]
    35d2:	4391      	bics	r1, r2
    35d4:	6021      	str	r1, [r4, #0]
    35d6:	2d00      	cmp	r5, #0
    35d8:	d158      	bne.n	368c <_printf_i+0x1d4>
    35da:	9e04      	ldr	r6, [sp, #16]
    35dc:	2b00      	cmp	r3, #0
    35de:	d064      	beq.n	36aa <_printf_i+0x1f2>
    35e0:	0026      	movs	r6, r4
    35e2:	9b03      	ldr	r3, [sp, #12]
    35e4:	3642      	adds	r6, #66	; 0x42
    35e6:	781b      	ldrb	r3, [r3, #0]
    35e8:	7033      	strb	r3, [r6, #0]
    35ea:	e05e      	b.n	36aa <_printf_i+0x1f2>
    35ec:	0648      	lsls	r0, r1, #25
    35ee:	d5da      	bpl.n	35a6 <_printf_i+0xee>
    35f0:	b2ad      	uxth	r5, r5
    35f2:	e7d8      	b.n	35a6 <_printf_i+0xee>
    35f4:	6809      	ldr	r1, [r1, #0]
    35f6:	681a      	ldr	r2, [r3, #0]
    35f8:	0608      	lsls	r0, r1, #24
    35fa:	d505      	bpl.n	3608 <_printf_i+0x150>
    35fc:	1d11      	adds	r1, r2, #4
    35fe:	6019      	str	r1, [r3, #0]
    3600:	6813      	ldr	r3, [r2, #0]
    3602:	6962      	ldr	r2, [r4, #20]
    3604:	601a      	str	r2, [r3, #0]
    3606:	e006      	b.n	3616 <_printf_i+0x15e>
    3608:	0649      	lsls	r1, r1, #25
    360a:	d5f7      	bpl.n	35fc <_printf_i+0x144>
    360c:	1d11      	adds	r1, r2, #4
    360e:	6019      	str	r1, [r3, #0]
    3610:	6813      	ldr	r3, [r2, #0]
    3612:	8aa2      	ldrh	r2, [r4, #20]
    3614:	801a      	strh	r2, [r3, #0]
    3616:	2300      	movs	r3, #0
    3618:	9e04      	ldr	r6, [sp, #16]
    361a:	6123      	str	r3, [r4, #16]
    361c:	e054      	b.n	36c8 <_printf_i+0x210>
    361e:	681a      	ldr	r2, [r3, #0]
    3620:	1d11      	adds	r1, r2, #4
    3622:	6019      	str	r1, [r3, #0]
    3624:	6816      	ldr	r6, [r2, #0]
    3626:	2100      	movs	r1, #0
    3628:	6862      	ldr	r2, [r4, #4]
    362a:	0030      	movs	r0, r6
    362c:	f000 f85e 	bl	36ec <memchr>
    3630:	2800      	cmp	r0, #0
    3632:	d001      	beq.n	3638 <_printf_i+0x180>
    3634:	1b80      	subs	r0, r0, r6
    3636:	6060      	str	r0, [r4, #4]
    3638:	6863      	ldr	r3, [r4, #4]
    363a:	6123      	str	r3, [r4, #16]
    363c:	2300      	movs	r3, #0
    363e:	9a04      	ldr	r2, [sp, #16]
    3640:	7013      	strb	r3, [r2, #0]
    3642:	e041      	b.n	36c8 <_printf_i+0x210>
    3644:	6923      	ldr	r3, [r4, #16]
    3646:	0032      	movs	r2, r6
    3648:	9906      	ldr	r1, [sp, #24]
    364a:	9805      	ldr	r0, [sp, #20]
    364c:	9d07      	ldr	r5, [sp, #28]
    364e:	47a8      	blx	r5
    3650:	1c43      	adds	r3, r0, #1
    3652:	d043      	beq.n	36dc <_printf_i+0x224>
    3654:	6823      	ldr	r3, [r4, #0]
    3656:	2500      	movs	r5, #0
    3658:	079b      	lsls	r3, r3, #30
    365a:	d40f      	bmi.n	367c <_printf_i+0x1c4>
    365c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    365e:	68e0      	ldr	r0, [r4, #12]
    3660:	4298      	cmp	r0, r3
    3662:	da3d      	bge.n	36e0 <_printf_i+0x228>
    3664:	0018      	movs	r0, r3
    3666:	e03b      	b.n	36e0 <_printf_i+0x228>
    3668:	0022      	movs	r2, r4
    366a:	2301      	movs	r3, #1
    366c:	3219      	adds	r2, #25
    366e:	9906      	ldr	r1, [sp, #24]
    3670:	9805      	ldr	r0, [sp, #20]
    3672:	9e07      	ldr	r6, [sp, #28]
    3674:	47b0      	blx	r6
    3676:	1c43      	adds	r3, r0, #1
    3678:	d030      	beq.n	36dc <_printf_i+0x224>
    367a:	3501      	adds	r5, #1
    367c:	68e3      	ldr	r3, [r4, #12]
    367e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3680:	1a9b      	subs	r3, r3, r2
    3682:	429d      	cmp	r5, r3
    3684:	dbf0      	blt.n	3668 <_printf_i+0x1b0>
    3686:	e7e9      	b.n	365c <_printf_i+0x1a4>
    3688:	2d00      	cmp	r5, #0
    368a:	d0a9      	beq.n	35e0 <_printf_i+0x128>
    368c:	9e04      	ldr	r6, [sp, #16]
    368e:	0028      	movs	r0, r5
    3690:	0039      	movs	r1, r7
    3692:	f7ff faa9 	bl	2be8 <__aeabi_uidivmod>
    3696:	9b03      	ldr	r3, [sp, #12]
    3698:	3e01      	subs	r6, #1
    369a:	5c5b      	ldrb	r3, [r3, r1]
    369c:	0028      	movs	r0, r5
    369e:	7033      	strb	r3, [r6, #0]
    36a0:	0039      	movs	r1, r7
    36a2:	f7ff fa1b 	bl	2adc <__udivsi3>
    36a6:	1e05      	subs	r5, r0, #0
    36a8:	d1f1      	bne.n	368e <_printf_i+0x1d6>
    36aa:	2f08      	cmp	r7, #8
    36ac:	d109      	bne.n	36c2 <_printf_i+0x20a>
    36ae:	6823      	ldr	r3, [r4, #0]
    36b0:	07db      	lsls	r3, r3, #31
    36b2:	d506      	bpl.n	36c2 <_printf_i+0x20a>
    36b4:	6863      	ldr	r3, [r4, #4]
    36b6:	6922      	ldr	r2, [r4, #16]
    36b8:	4293      	cmp	r3, r2
    36ba:	dc02      	bgt.n	36c2 <_printf_i+0x20a>
    36bc:	2330      	movs	r3, #48	; 0x30
    36be:	3e01      	subs	r6, #1
    36c0:	7033      	strb	r3, [r6, #0]
    36c2:	9b04      	ldr	r3, [sp, #16]
    36c4:	1b9b      	subs	r3, r3, r6
    36c6:	6123      	str	r3, [r4, #16]
    36c8:	9b07      	ldr	r3, [sp, #28]
    36ca:	aa09      	add	r2, sp, #36	; 0x24
    36cc:	9300      	str	r3, [sp, #0]
    36ce:	0021      	movs	r1, r4
    36d0:	9b06      	ldr	r3, [sp, #24]
    36d2:	9805      	ldr	r0, [sp, #20]
    36d4:	f7ff fe82 	bl	33dc <_printf_common>
    36d8:	1c43      	adds	r3, r0, #1
    36da:	d1b3      	bne.n	3644 <_printf_i+0x18c>
    36dc:	2001      	movs	r0, #1
    36de:	4240      	negs	r0, r0
    36e0:	b00b      	add	sp, #44	; 0x2c
    36e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36e4:	00003848 	.word	0x00003848
    36e8:	00003837 	.word	0x00003837

000036ec <memchr>:
    36ec:	b2c9      	uxtb	r1, r1
    36ee:	1882      	adds	r2, r0, r2
    36f0:	4290      	cmp	r0, r2
    36f2:	d101      	bne.n	36f8 <memchr+0xc>
    36f4:	2000      	movs	r0, #0
    36f6:	4770      	bx	lr
    36f8:	7803      	ldrb	r3, [r0, #0]
    36fa:	428b      	cmp	r3, r1
    36fc:	d0fb      	beq.n	36f6 <memchr+0xa>
    36fe:	3001      	adds	r0, #1
    3700:	e7f6      	b.n	36f0 <memchr+0x4>

00003702 <memmove>:
    3702:	b510      	push	{r4, lr}
    3704:	4288      	cmp	r0, r1
    3706:	d902      	bls.n	370e <memmove+0xc>
    3708:	188b      	adds	r3, r1, r2
    370a:	4298      	cmp	r0, r3
    370c:	d308      	bcc.n	3720 <memmove+0x1e>
    370e:	2300      	movs	r3, #0
    3710:	429a      	cmp	r2, r3
    3712:	d007      	beq.n	3724 <memmove+0x22>
    3714:	5ccc      	ldrb	r4, [r1, r3]
    3716:	54c4      	strb	r4, [r0, r3]
    3718:	3301      	adds	r3, #1
    371a:	e7f9      	b.n	3710 <memmove+0xe>
    371c:	5c8b      	ldrb	r3, [r1, r2]
    371e:	5483      	strb	r3, [r0, r2]
    3720:	3a01      	subs	r2, #1
    3722:	d2fb      	bcs.n	371c <memmove+0x1a>
    3724:	bd10      	pop	{r4, pc}

00003726 <_realloc_r>:
    3726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3728:	0007      	movs	r7, r0
    372a:	000d      	movs	r5, r1
    372c:	0016      	movs	r6, r2
    372e:	2900      	cmp	r1, #0
    3730:	d105      	bne.n	373e <_realloc_r+0x18>
    3732:	0011      	movs	r1, r2
    3734:	f7ff fc46 	bl	2fc4 <_malloc_r>
    3738:	0004      	movs	r4, r0
    373a:	0020      	movs	r0, r4
    373c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    373e:	2a00      	cmp	r2, #0
    3740:	d103      	bne.n	374a <_realloc_r+0x24>
    3742:	f7ff fbf5 	bl	2f30 <_free_r>
    3746:	0034      	movs	r4, r6
    3748:	e7f7      	b.n	373a <_realloc_r+0x14>
    374a:	f000 f812 	bl	3772 <_malloc_usable_size_r>
    374e:	002c      	movs	r4, r5
    3750:	4286      	cmp	r6, r0
    3752:	d9f2      	bls.n	373a <_realloc_r+0x14>
    3754:	0031      	movs	r1, r6
    3756:	0038      	movs	r0, r7
    3758:	f7ff fc34 	bl	2fc4 <_malloc_r>
    375c:	1e04      	subs	r4, r0, #0
    375e:	d0ec      	beq.n	373a <_realloc_r+0x14>
    3760:	0029      	movs	r1, r5
    3762:	0032      	movs	r2, r6
    3764:	f7ff fbd2 	bl	2f0c <memcpy>
    3768:	0029      	movs	r1, r5
    376a:	0038      	movs	r0, r7
    376c:	f7ff fbe0 	bl	2f30 <_free_r>
    3770:	e7e3      	b.n	373a <_realloc_r+0x14>

00003772 <_malloc_usable_size_r>:
    3772:	1f0b      	subs	r3, r1, #4
    3774:	681b      	ldr	r3, [r3, #0]
    3776:	1f18      	subs	r0, r3, #4
    3778:	2b00      	cmp	r3, #0
    377a:	da01      	bge.n	3780 <_malloc_usable_size_r+0xe>
    377c:	580b      	ldr	r3, [r1, r0]
    377e:	18c0      	adds	r0, r0, r3
    3780:	4770      	bx	lr
    3782:	0000      	movs	r0, r0
    3784:	42000800 	.word	0x42000800
    3788:	42000c00 	.word	0x42000c00
    378c:	42001000 	.word	0x42001000
    3790:	42001400 	.word	0x42001400
    3794:	42001800 	.word	0x42001800
    3798:	42001c00 	.word	0x42001c00

0000379c <_usb_device_irq_bits>:
    379c:	00080004 00800070 01000001 00000200     ....p...........
    37ac:	41744545 50524f4d 456d752e 30303030     EEtAMORP.umE0000
    37bc:	30303030 66003030 642e7074 65766972     000000.ftp.drive
    37cc:	632e7168 2f006d6f 6d726966 65726177     hq.com./firmware
    37dc:	6172002f 6e6c7568 68746172 636b646f     /.rahulnrathodkc
    37ec:	3231006c 36353433 00393837 6d726966     l.123456789.firm
    37fc:	65726177 6e69622e 54455300 50454520     ware.bin.SET EEP
    380c:	204d4f52 45535546 20202000 544f4f42     ROM FUSE.   BOOT
    381c:	20474e49 20205055 2d230020 00202b30     ING UP   .#-0+ .
    382c:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    383c:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    384c:	37363534 62613938 66656463 00000000     456789abcdef....

0000385c <_init>:
    385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3862:	bc08      	pop	{r3}
    3864:	469e      	mov	lr, r3
    3866:	4770      	bx	lr

00003868 <__init_array_start>:
    3868:	000000dd 	.word	0x000000dd

0000386c <_fini>:
    386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3872:	bc08      	pop	{r3}
    3874:	469e      	mov	lr, r3
    3876:	4770      	bx	lr

00003878 <__fini_array_start>:
    3878:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <_impure_ptr>:
20000010:	0014 2000                                   ... 

20000014 <impure_data>:
	...
