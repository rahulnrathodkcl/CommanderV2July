
samd21_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a720  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000a720  0000a720  0001a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000002f4  20000000  0000a728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000e8c  200002f4  0000aa1c  000202f4  2**2
                  ALLOC
  4 .stack        00002000  20001180  0000b8a8  000202f4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00074a6a  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00009674  00000000  00000000  00094ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00014a49  00000000  00000000  0009e453  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001508  00000000  00000000  000b2e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002890  00000000  00000000  000b43a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00027606  00000000  00000000  000b6c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024322  00000000  00000000  000de23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a2ecf  00000000  00000000  0010255c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000420c  00000000  00000000  001a542c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 31 00 20 f1 7c 00 00 ed 7c 00 00 ed 7c 00 00     .1. .|...|...|..
	...
      2c:	b5 2e 00 00 00 00 00 00 00 00 00 00 a1 2f 00 00     ............./..
      3c:	e5 2f 00 00 ed 7c 00 00 ed 7c 00 00 31 45 00 00     ./...|...|..1E..
      4c:	ed 7c 00 00 e1 5e 00 00 ed 7c 00 00 ed 7c 00 00     .|...^...|...|..
      5c:	51 4a 00 00 ed 7c 00 00 81 5e 00 00 91 5e 00 00     QJ...|...^...^..
      6c:	a1 5e 00 00 b1 5e 00 00 c1 5e 00 00 d1 5e 00 00     .^...^...^...^..
      7c:	ed 7c 00 00 ed 7c 00 00 ed 7c 00 00 ed 7c 00 00     .|...|...|...|..
      8c:	ed 7c 00 00 ed 7c 00 00 ed 7c 00 00 ed 7c 00 00     .|...|...|...|..
      9c:	ed 7c 00 00 ed 7c 00 00 ed 7c 00 00 ed 7c 00 00     .|...|...|...|..
      ac:	ed 7c 00 00 00 00 00 00                             .|......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002f4 	.word	0x200002f4
      d4:	00000000 	.word	0x00000000
      d8:	0000a728 	.word	0x0000a728

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002f8 	.word	0x200002f8
     108:	0000a728 	.word	0x0000a728
     10c:	0000a728 	.word	0x0000a728
     110:	00000000 	.word	0x00000000

00000114 <gsm_timer_callback>:
		free(cmdx);
		return GSM_ERROR_SMS_NOT_AVAILABLE; 
	}
	free(cmdx);
	return GSM_ERROR_NONE; 
}
     114:	4770      	bx	lr
	...

00000118 <gsm_rx_handler>:
     118:	b513      	push	{r0, r1, r4, lr}
     11a:	4b0a      	ldr	r3, [pc, #40]	; (144 <gsm_rx_handler+0x2c>)
     11c:	7e1a      	ldrb	r2, [r3, #24]
     11e:	0752      	lsls	r2, r2, #29
     120:	d505      	bpl.n	12e <gsm_rx_handler+0x16>
     122:	2106      	movs	r1, #6
     124:	8b5a      	ldrh	r2, [r3, #26]
     126:	400a      	ands	r2, r1
     128:	d002      	beq.n	130 <gsm_rx_handler+0x18>
     12a:	b292      	uxth	r2, r2
     12c:	835a      	strh	r2, [r3, #26]
     12e:	bd13      	pop	{r0, r1, r4, pc}
     130:	4669      	mov	r1, sp
     132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
     134:	4804      	ldr	r0, [pc, #16]	; (148 <gsm_rx_handler+0x30>)
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     136:	3107      	adds	r1, #7
     138:	700b      	strb	r3, [r1, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
     13a:	4c04      	ldr	r4, [pc, #16]	; (14c <gsm_rx_handler+0x34>)
     13c:	0013      	movs	r3, r2
     13e:	6800      	ldr	r0, [r0, #0]
     140:	47a0      	blx	r4
}
     142:	e7f4      	b.n	12e <gsm_rx_handler+0x16>
     144:	42001400 	.word	0x42001400
     148:	20000318 	.word	0x20000318
     14c:	000034b1 	.word	0x000034b1

00000150 <Flush_RX_Buffer>:
{
     150:	b507      	push	{r0, r1, r2, lr}
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
     152:	466b      	mov	r3, sp
     154:	1dd9      	adds	r1, r3, #7
     156:	4b04      	ldr	r3, [pc, #16]	; (168 <Flush_RX_Buffer+0x18>)
     158:	2200      	movs	r2, #0
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b03      	ldr	r3, [pc, #12]	; (16c <Flush_RX_Buffer+0x1c>)
     15e:	4798      	blx	r3
		if (xStatus==errQUEUE_EMPTY)
     160:	2800      	cmp	r0, #0
     162:	d1f6      	bne.n	152 <Flush_RX_Buffer+0x2>
}
     164:	bd07      	pop	{r0, r1, r2, pc}
     166:	46c0      	nop			; (mov r8, r8)
     168:	20000318 	.word	0x20000318
     16c:	00003569 	.word	0x00003569

00000170 <gsm_init>:
{
     170:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
     172:	2400      	movs	r4, #0
	config->input_pull = PORT_PIN_PULL_UP;
     174:	2501      	movs	r5, #1
     176:	b095      	sub	sp, #84	; 0x54
     178:	a903      	add	r1, sp, #12
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
     17a:	2014      	movs	r0, #20
     17c:	4b4b      	ldr	r3, [pc, #300]	; (2ac <gsm_init+0x13c>)
     17e:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
     180:	708c      	strb	r4, [r1, #2]
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
     182:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
     184:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     186:	2280      	movs	r2, #128	; 0x80
     188:	4b49      	ldr	r3, [pc, #292]	; (2b0 <gsm_init+0x140>)
     18a:	0352      	lsls	r2, r2, #13
     18c:	615a      	str	r2, [r3, #20]
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
     18e:	0029      	movs	r1, r5
     190:	0022      	movs	r2, r4
     192:	4e48      	ldr	r6, [pc, #288]	; (2b4 <gsm_init+0x144>)
     194:	20f0      	movs	r0, #240	; 0xf0
     196:	47b0      	blx	r6
     198:	4b47      	ldr	r3, [pc, #284]	; (2b8 <gsm_init+0x148>)
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
     19a:	0022      	movs	r2, r4
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
     19c:	6018      	str	r0, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
     19e:	4b47      	ldr	r3, [pc, #284]	; (2bc <gsm_init+0x14c>)
     1a0:	4947      	ldr	r1, [pc, #284]	; (2c0 <gsm_init+0x150>)
     1a2:	9300      	str	r3, [sp, #0]
     1a4:	4847      	ldr	r0, [pc, #284]	; (2c4 <gsm_init+0x154>)
     1a6:	0023      	movs	r3, r4
     1a8:	4f47      	ldr	r7, [pc, #284]	; (2c8 <gsm_init+0x158>)
     1aa:	47b8      	blx	r7
     1ac:	4b47      	ldr	r3, [pc, #284]	; (2cc <gsm_init+0x15c>)
	vSemaphoreCreateBinary(gsm_busy_semaphore);
     1ae:	2203      	movs	r2, #3
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
     1b0:	6018      	str	r0, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
     1b2:	0021      	movs	r1, r4
     1b4:	0028      	movs	r0, r5
     1b6:	47b0      	blx	r6
     1b8:	4b45      	ldr	r3, [pc, #276]	; (2d0 <gsm_init+0x160>)
     1ba:	6018      	str	r0, [r3, #0]
     1bc:	42a0      	cmp	r0, r4
     1be:	d004      	beq.n	1ca <gsm_init+0x5a>
     1c0:	0023      	movs	r3, r4
     1c2:	0022      	movs	r2, r4
     1c4:	0021      	movs	r1, r4
     1c6:	4c43      	ldr	r4, [pc, #268]	; (2d4 <gsm_init+0x164>)
     1c8:	47a0      	blx	r4
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
     1ca:	22ff      	movs	r2, #255	; 0xff
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     1cc:	2115      	movs	r1, #21
	config->data_order       = USART_DATAORDER_LSB;
     1ce:	ac04      	add	r4, sp, #16
	config->receiver_enable  = true;
     1d0:	4469      	add	r1, sp
	config->parity           = USART_PARITY_NONE;
     1d2:	8122      	strh	r2, [r4, #8]
	config->receiver_enable  = true;
     1d4:	3afe      	subs	r2, #254	; 0xfe
     1d6:	77ca      	strb	r2, [r1, #31]
	config->transmitter_enable = true;
     1d8:	2116      	movs	r1, #22
	config->data_order       = USART_DATAORDER_LSB;
     1da:	2380      	movs	r3, #128	; 0x80
	config->transmitter_enable = true;
     1dc:	4469      	add	r1, sp
     1de:	77ca      	strb	r2, [r1, #31]
	config->data_order       = USART_DATAORDER_LSB;
     1e0:	05db      	lsls	r3, r3, #23
	config->clock_polarity_inverted = false;
     1e2:	2117      	movs	r1, #23
	config->data_order       = USART_DATAORDER_LSB;
     1e4:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     1e6:	2300      	movs	r3, #0
	config->clock_polarity_inverted = false;
     1e8:	4469      	add	r1, sp
     1ea:	77cb      	strb	r3, [r1, #31]
	config->use_external_clock = false;
     1ec:	a906      	add	r1, sp, #24
     1ee:	77cb      	strb	r3, [r1, #31]
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
     1f0:	213d      	movs	r1, #61	; 0x3d
     1f2:	4469      	add	r1, sp
     1f4:	700b      	strb	r3, [r1, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     1f6:	6063      	str	r3, [r4, #4]
	config->stopbits         = USART_STOPBITS_1;
     1f8:	72a3      	strb	r3, [r4, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     1fa:	72e3      	strb	r3, [r4, #11]
	config->ext_clock_freq   = 0;
     1fc:	62a3      	str	r3, [r4, #40]	; 0x28
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     1fe:	6163      	str	r3, [r4, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     200:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     202:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     204:	7623      	strb	r3, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     206:	7723      	strb	r3, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     208:	7663      	strb	r3, [r4, #25]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     20a:	7763      	strb	r3, [r4, #29]
	config_usart.baudrate		= GSM_BAUDRATE;
     20c:	23e1      	movs	r3, #225	; 0xe1
     20e:	025b      	lsls	r3, r3, #9
     210:	6223      	str	r3, [r4, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
     212:	2380      	movs	r3, #128	; 0x80
     214:	035b      	lsls	r3, r3, #13
     216:	60e3      	str	r3, [r4, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
     218:	4b2f      	ldr	r3, [pc, #188]	; (2d8 <gsm_init+0x168>)
	config->receive_pulse_length                    = 19;
     21a:	2113      	movs	r1, #19
     21c:	6323      	str	r3, [r4, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
     21e:	4b2f      	ldr	r3, [pc, #188]	; (2dc <gsm_init+0x16c>)
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     220:	271f      	movs	r7, #31
     222:	6363      	str	r3, [r4, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
     224:	2301      	movs	r3, #1
     226:	425b      	negs	r3, r3
     228:	63a3      	str	r3, [r4, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
     22a:	63e3      	str	r3, [r4, #60]	; 0x3c
	config_usart.run_in_standby = true;
     22c:	ab0f      	add	r3, sp, #60	; 0x3c
     22e:	76a1      	strb	r1, [r4, #26]
     230:	701a      	strb	r2, [r3, #0]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
     232:	4d2b      	ldr	r5, [pc, #172]	; (2e0 <gsm_init+0x170>)
     234:	4b2b      	ldr	r3, [pc, #172]	; (2e4 <gsm_init+0x174>)
     236:	0022      	movs	r2, r4
     238:	492b      	ldr	r1, [pc, #172]	; (2e8 <gsm_init+0x178>)
     23a:	0028      	movs	r0, r5
     23c:	4798      	blx	r3
     23e:	4b2b      	ldr	r3, [pc, #172]	; (2ec <gsm_init+0x17c>)
     240:	2800      	cmp	r0, #0
     242:	d11b      	bne.n	27c <gsm_init+0x10c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     244:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     246:	0020      	movs	r0, r4
     248:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     24a:	231f      	movs	r3, #31
     24c:	4018      	ands	r0, r3
     24e:	3b1e      	subs	r3, #30
     250:	4083      	lsls	r3, r0
     252:	4a27      	ldr	r2, [pc, #156]	; (2f0 <gsm_init+0x180>)
     254:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     256:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     258:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     25a:	2b00      	cmp	r3, #0
     25c:	d1fc      	bne.n	258 <gsm_init+0xe8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     25e:	6822      	ldr	r2, [r4, #0]
     260:	3302      	adds	r3, #2
     262:	4313      	orrs	r3, r2
     264:	6023      	str	r3, [r4, #0]
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
     266:	4c20      	ldr	r4, [pc, #128]	; (2e8 <gsm_init+0x178>)
     268:	4b22      	ldr	r3, [pc, #136]	; (2f4 <gsm_init+0x184>)
     26a:	0020      	movs	r0, r4
     26c:	4798      	blx	r3
     26e:	4922      	ldr	r1, [pc, #136]	; (2f8 <gsm_init+0x188>)
     270:	4b22      	ldr	r3, [pc, #136]	; (2fc <gsm_init+0x18c>)
     272:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
     274:	2304      	movs	r3, #4
     276:	75a3      	strb	r3, [r4, #22]
}
     278:	b015      	add	sp, #84	; 0x54
     27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     27c:	682e      	ldr	r6, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     27e:	0030      	movs	r0, r6
     280:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     282:	2301      	movs	r3, #1
     284:	4038      	ands	r0, r7
     286:	4083      	lsls	r3, r0
     288:	4a1d      	ldr	r2, [pc, #116]	; (300 <gsm_init+0x190>)
     28a:	67d3      	str	r3, [r2, #124]	; 0x7c
	SercomUsart *const usart_hw = &(module->hw->USART);
     28c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     28e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     290:	2b00      	cmp	r3, #0
     292:	d1fc      	bne.n	28e <gsm_init+0x11e>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     294:	2202      	movs	r2, #2
     296:	6833      	ldr	r3, [r6, #0]
     298:	4393      	bics	r3, r2
     29a:	6033      	str	r3, [r6, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     29c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     29e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     2a0:	2b00      	cmp	r3, #0
     2a2:	d1fc      	bne.n	29e <gsm_init+0x12e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
     2a4:	3301      	adds	r3, #1
     2a6:	6033      	str	r3, [r6, #0]
     2a8:	e7c3      	b.n	232 <gsm_init+0xc2>
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	00006fe1 	.word	0x00006fe1
     2b0:	41004400 	.word	0x41004400
     2b4:	0000330d 	.word	0x0000330d
     2b8:	20000318 	.word	0x20000318
     2bc:	00000115 	.word	0x00000115
     2c0:	00001388 	.word	0x00001388
     2c4:	00009f66 	.word	0x00009f66
     2c8:	00004251 	.word	0x00004251
     2cc:	20000314 	.word	0x20000314
     2d0:	20000310 	.word	0x20000310
     2d4:	00003355 	.word	0x00003355
     2d8:	00160002 	.word	0x00160002
     2dc:	00170002 	.word	0x00170002
     2e0:	20000bc4 	.word	0x20000bc4
     2e4:	00005201 	.word	0x00005201
     2e8:	42001400 	.word	0x42001400
     2ec:	00005e55 	.word	0x00005e55
     2f0:	e000e100 	.word	0xe000e100
     2f4:	0000221d 	.word	0x0000221d
     2f8:	00000119 	.word	0x00000119
     2fc:	00005e1d 	.word	0x00005e1d
     300:	e000e104 	.word	0xe000e104

00000304 <gsm_send_at_command>:
{
     304:	b5f0      	push	{r4, r5, r6, r7, lr}
     306:	b089      	sub	sp, #36	; 0x24
     308:	9304      	str	r3, [sp, #16]
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
     30a:	4b41      	ldr	r3, [pc, #260]	; (410 <gsm_send_at_command+0x10c>)
{
     30c:	9103      	str	r1, [sp, #12]
     30e:	0006      	movs	r6, r0
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
     310:	2101      	movs	r1, #1
     312:	6818      	ldr	r0, [r3, #0]
     314:	4b3f      	ldr	r3, [pc, #252]	; (414 <gsm_send_at_command+0x110>)
{
     316:	9205      	str	r2, [sp, #20]
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
     318:	4798      	blx	r3
		return GSM_ERROR_OPERATION_IN_PROGRESS;
     31a:	2402      	movs	r4, #2
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
     31c:	2800      	cmp	r0, #0
     31e:	d071      	beq.n	404 <gsm_send_at_command+0x100>
	Flush_RX_Buffer();
     320:	4b3d      	ldr	r3, [pc, #244]	; (418 <gsm_send_at_command+0x114>)
     322:	4798      	blx	r3
	char u8tTemp_Char=0;
     324:	230f      	movs	r3, #15
     326:	2700      	movs	r7, #0
     328:	aa04      	add	r2, sp, #16
     32a:	189b      	adds	r3, r3, r2
     32c:	701f      	strb	r7, [r3, #0]
	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
     32e:	2101      	movs	r1, #1
     330:	20f0      	movs	r0, #240	; 0xf0
     332:	4b3a      	ldr	r3, [pc, #232]	; (41c <gsm_send_at_command+0x118>)
     334:	4798      	blx	r3
     336:	0005      	movs	r5, r0
		return 0;
     338:	0004      	movs	r4, r0
	if (aDataBuffer == NULL)
     33a:	42b8      	cmp	r0, r7
     33c:	d062      	beq.n	404 <gsm_send_at_command+0x100>
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
     33e:	22f0      	movs	r2, #240	; 0xf0
     340:	0039      	movs	r1, r7
     342:	4b37      	ldr	r3, [pc, #220]	; (420 <gsm_send_at_command+0x11c>)
     344:	4798      	blx	r3
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));	
     346:	4b37      	ldr	r3, [pc, #220]	; (424 <gsm_send_at_command+0x120>)
     348:	0030      	movs	r0, r6
     34a:	4798      	blx	r3
     34c:	0031      	movs	r1, r6
     34e:	b282      	uxth	r2, r0
     350:	4b35      	ldr	r3, [pc, #212]	; (428 <gsm_send_at_command+0x124>)
     352:	4836      	ldr	r0, [pc, #216]	; (42c <gsm_send_at_command+0x128>)
     354:	4798      	blx	r3
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
     356:	2301      	movs	r3, #1
     358:	4c35      	ldr	r4, [pc, #212]	; (430 <gsm_send_at_command+0x12c>)
     35a:	425b      	negs	r3, r3
     35c:	9300      	str	r3, [sp, #0]
     35e:	4e35      	ldr	r6, [pc, #212]	; (434 <gsm_send_at_command+0x130>)
     360:	003b      	movs	r3, r7
     362:	9a05      	ldr	r2, [sp, #20]
     364:	2104      	movs	r1, #4
     366:	6820      	ldr	r0, [r4, #0]
     368:	47b0      	blx	r6
	uint8_t u8tRx_Index=0;
     36a:	003e      	movs	r6, r7
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
     36c:	6820      	ldr	r0, [r4, #0]
     36e:	4b32      	ldr	r3, [pc, #200]	; (438 <gsm_send_at_command+0x134>)
     370:	4798      	blx	r3
     372:	1e02      	subs	r2, r0, #0
     374:	d020      	beq.n	3b8 <gsm_send_at_command+0xb4>
			if (u8tRx_Index<240)
     376:	2eef      	cmp	r6, #239	; 0xef
     378:	d80e      	bhi.n	398 <gsm_send_at_command+0x94>
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
     37a:	270f      	movs	r7, #15
     37c:	ab04      	add	r3, sp, #16
     37e:	18ff      	adds	r7, r7, r3
     380:	4b2e      	ldr	r3, [pc, #184]	; (43c <gsm_send_at_command+0x138>)
     382:	2200      	movs	r2, #0
     384:	6818      	ldr	r0, [r3, #0]
     386:	0039      	movs	r1, r7
     388:	4b2d      	ldr	r3, [pc, #180]	; (440 <gsm_send_at_command+0x13c>)
     38a:	4798      	blx	r3
				if(xStatus!=errQUEUE_EMPTY)
     38c:	2800      	cmp	r0, #0
     38e:	d003      	beq.n	398 <gsm_send_at_command+0x94>
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
     390:	783b      	ldrb	r3, [r7, #0]
     392:	55ab      	strb	r3, [r5, r6]
					u8tRx_Index++;
     394:	3601      	adds	r6, #1
     396:	b2f6      	uxtb	r6, r6
			if (aResponExit != NULL)
     398:	9b03      	ldr	r3, [sp, #12]
     39a:	4f2a      	ldr	r7, [pc, #168]	; (444 <gsm_send_at_command+0x140>)
     39c:	2b00      	cmp	r3, #0
     39e:	d004      	beq.n	3aa <gsm_send_at_command+0xa6>
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
     3a0:	0019      	movs	r1, r3
     3a2:	0028      	movs	r0, r5
     3a4:	47b8      	blx	r7
     3a6:	2800      	cmp	r0, #0
     3a8:	d12f      	bne.n	40a <gsm_send_at_command+0x106>
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
     3aa:	4927      	ldr	r1, [pc, #156]	; (448 <gsm_send_at_command+0x144>)
     3ac:	0028      	movs	r0, r5
     3ae:	47b8      	blx	r7
     3b0:	2800      	cmp	r0, #0
     3b2:	d0db      	beq.n	36c <gsm_send_at_command+0x68>
				err_no = GSM_ERROR_COMMAND_ERROR;
     3b4:	240b      	movs	r4, #11
     3b6:	e00b      	b.n	3d0 <gsm_send_at_command+0xcc>
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
     3b8:	2301      	movs	r3, #1
     3ba:	425b      	negs	r3, r3
     3bc:	9300      	str	r3, [sp, #0]
     3be:	2103      	movs	r1, #3
     3c0:	0003      	movs	r3, r0
     3c2:	6820      	ldr	r0, [r4, #0]
     3c4:	4c1b      	ldr	r4, [pc, #108]	; (434 <gsm_send_at_command+0x130>)
     3c6:	47a0      	blx	r4
				err_no = GSM_ERROR_UNKWON;
     3c8:	0034      	movs	r4, r6
     3ca:	1e63      	subs	r3, r4, #1
     3cc:	419c      	sbcs	r4, r3
     3ce:	3407      	adds	r4, #7
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
     3d0:	9b04      	ldr	r3, [sp, #16]
     3d2:	2b00      	cmp	r3, #0
     3d4:	d00c      	beq.n	3f0 <gsm_send_at_command+0xec>
     3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     3d8:	2b00      	cmp	r3, #0
     3da:	d009      	beq.n	3f0 <gsm_send_at_command+0xec>
     3dc:	9b04      	ldr	r3, [sp, #16]
     3de:	42b3      	cmp	r3, r6
     3e0:	d906      	bls.n	3f0 <gsm_send_at_command+0xec>
     3e2:	2c00      	cmp	r4, #0
     3e4:	d104      	bne.n	3f0 <gsm_send_at_command+0xec>
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
     3e6:	0032      	movs	r2, r6
     3e8:	0029      	movs	r1, r5
     3ea:	980e      	ldr	r0, [sp, #56]	; 0x38
     3ec:	4b17      	ldr	r3, [pc, #92]	; (44c <gsm_send_at_command+0x148>)
     3ee:	4798      	blx	r3
	xSemaphoreGive(gsm_busy_semaphore);
     3f0:	2300      	movs	r3, #0
     3f2:	4807      	ldr	r0, [pc, #28]	; (410 <gsm_send_at_command+0x10c>)
     3f4:	001a      	movs	r2, r3
     3f6:	0019      	movs	r1, r3
     3f8:	6800      	ldr	r0, [r0, #0]
     3fa:	4e15      	ldr	r6, [pc, #84]	; (450 <gsm_send_at_command+0x14c>)
     3fc:	47b0      	blx	r6
	free(aDataBuffer);
     3fe:	0028      	movs	r0, r5
     400:	4b14      	ldr	r3, [pc, #80]	; (454 <gsm_send_at_command+0x150>)
     402:	4798      	blx	r3
}
     404:	0020      	movs	r0, r4
     406:	b009      	add	sp, #36	; 0x24
     408:	bdf0      	pop	{r4, r5, r6, r7, pc}
					err_no = GSM_ERROR_NONE;
     40a:	2400      	movs	r4, #0
     40c:	e7e0      	b.n	3d0 <gsm_send_at_command+0xcc>
     40e:	46c0      	nop			; (mov r8, r8)
     410:	20000310 	.word	0x20000310
     414:	00003695 	.word	0x00003695
     418:	00000151 	.word	0x00000151
     41c:	0000916d 	.word	0x0000916d
     420:	0000924b 	.word	0x0000924b
     424:	000094c1 	.word	0x000094c1
     428:	000054f5 	.word	0x000054f5
     42c:	20000bc4 	.word	0x20000bc4
     430:	20000314 	.word	0x20000314
     434:	00004295 	.word	0x00004295
     438:	0000450d 	.word	0x0000450d
     43c:	20000318 	.word	0x20000318
     440:	00003569 	.word	0x00003569
     444:	000094cf 	.word	0x000094cf
     448:	0000a02b 	.word	0x0000a02b
     44c:	00009239 	.word	0x00009239
     450:	00003355 	.word	0x00003355
     454:	00009201 	.word	0x00009201

00000458 <gsm_check_module>:
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
     458:	2300      	movs	r3, #0
{
     45a:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
     45c:	4a03      	ldr	r2, [pc, #12]	; (46c <gsm_check_module+0x14>)
     45e:	9300      	str	r3, [sp, #0]
     460:	4903      	ldr	r1, [pc, #12]	; (470 <gsm_check_module+0x18>)
     462:	4c04      	ldr	r4, [pc, #16]	; (474 <gsm_check_module+0x1c>)
     464:	4804      	ldr	r0, [pc, #16]	; (478 <gsm_check_module+0x20>)
     466:	47a0      	blx	r4
}
     468:	bd16      	pop	{r1, r2, r4, pc}
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	00001388 	.word	0x00001388
     470:	00009dc6 	.word	0x00009dc6
     474:	00000305 	.word	0x00000305
     478:	00009dc9 	.word	0x00009dc9

0000047c <gsm_is_network_registered>:
{
     47c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
     47e:	2400      	movs	r4, #0
     480:	4e0a      	ldr	r6, [pc, #40]	; (4ac <gsm_is_network_registered+0x30>)
     482:	9400      	str	r4, [sp, #0]
     484:	0023      	movs	r3, r4
     486:	4a0a      	ldr	r2, [pc, #40]	; (4b0 <gsm_is_network_registered+0x34>)
     488:	490a      	ldr	r1, [pc, #40]	; (4b4 <gsm_is_network_registered+0x38>)
     48a:	0030      	movs	r0, r6
     48c:	4d0a      	ldr	r5, [pc, #40]	; (4b8 <gsm_is_network_registered+0x3c>)
     48e:	47a8      	blx	r5
	if (errHomeNw==GSM_ERROR_NONE)
     490:	42a0      	cmp	r0, r4
     492:	d101      	bne.n	498 <gsm_is_network_registered+0x1c>
		return GSM_NETWORK_REGISTERED;	
     494:	2009      	movs	r0, #9
}
     496:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
     498:	9400      	str	r4, [sp, #0]
     49a:	0023      	movs	r3, r4
     49c:	4a04      	ldr	r2, [pc, #16]	; (4b0 <gsm_is_network_registered+0x34>)
     49e:	4907      	ldr	r1, [pc, #28]	; (4bc <gsm_is_network_registered+0x40>)
     4a0:	0030      	movs	r0, r6
     4a2:	47a8      	blx	r5
			if (errRomNw==GSM_ERROR_NONE)
     4a4:	2800      	cmp	r0, #0
     4a6:	d0f5      	beq.n	494 <gsm_is_network_registered+0x18>
				return GSM_NETWORK_NOT_REGISTERED;
     4a8:	200a      	movs	r0, #10
     4aa:	e7f4      	b.n	496 <gsm_is_network_registered+0x1a>
     4ac:	00009f7d 	.word	0x00009f7d
     4b0:	00001388 	.word	0x00001388
     4b4:	00009f72 	.word	0x00009f72
     4b8:	00000305 	.word	0x00000305
     4bc:	00009f87 	.word	0x00009f87

000004c0 <gsm_set_baudrate>:
{
     4c0:	b510      	push	{r4, lr}
     4c2:	b088      	sub	sp, #32
	char baurate_at_command[20]={0};
     4c4:	2214      	movs	r2, #20
     4c6:	2100      	movs	r1, #0
     4c8:	a803      	add	r0, sp, #12
     4ca:	4b08      	ldr	r3, [pc, #32]	; (4ec <gsm_set_baudrate+0x2c>)
     4cc:	4798      	blx	r3
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
     4ce:	22e1      	movs	r2, #225	; 0xe1
     4d0:	4907      	ldr	r1, [pc, #28]	; (4f0 <gsm_set_baudrate+0x30>)
     4d2:	0252      	lsls	r2, r2, #9
     4d4:	a803      	add	r0, sp, #12
     4d6:	4b07      	ldr	r3, [pc, #28]	; (4f4 <gsm_set_baudrate+0x34>)
     4d8:	4798      	blx	r3
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
     4da:	2300      	movs	r3, #0
     4dc:	4a06      	ldr	r2, [pc, #24]	; (4f8 <gsm_set_baudrate+0x38>)
     4de:	9300      	str	r3, [sp, #0]
     4e0:	4906      	ldr	r1, [pc, #24]	; (4fc <gsm_set_baudrate+0x3c>)
     4e2:	a803      	add	r0, sp, #12
     4e4:	4c06      	ldr	r4, [pc, #24]	; (500 <gsm_set_baudrate+0x40>)
     4e6:	47a0      	blx	r4
}
     4e8:	b008      	add	sp, #32
     4ea:	bd10      	pop	{r4, pc}
     4ec:	0000924b 	.word	0x0000924b
     4f0:	0000a031 	.word	0x0000a031
     4f4:	00009451 	.word	0x00009451
     4f8:	00001388 	.word	0x00001388
     4fc:	00009dc6 	.word	0x00009dc6
     500:	00000305 	.word	0x00000305

00000504 <gsm_detect_simcard>:
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
     504:	2300      	movs	r3, #0
{
     506:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
     508:	4a03      	ldr	r2, [pc, #12]	; (518 <gsm_detect_simcard+0x14>)
     50a:	9300      	str	r3, [sp, #0]
     50c:	4903      	ldr	r1, [pc, #12]	; (51c <gsm_detect_simcard+0x18>)
     50e:	4c04      	ldr	r4, [pc, #16]	; (520 <gsm_detect_simcard+0x1c>)
     510:	4804      	ldr	r0, [pc, #16]	; (524 <gsm_detect_simcard+0x20>)
     512:	47a0      	blx	r4
}
     514:	bd16      	pop	{r1, r2, r4, pc}
     516:	46c0      	nop			; (mov r8, r8)
     518:	00001388 	.word	0x00001388
     51c:	00009eb4 	.word	0x00009eb4
     520:	00000305 	.word	0x00000305
     524:	00009ec1 	.word	0x00009ec1

00000528 <gsm_store_active_profile>:
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
     528:	2300      	movs	r3, #0
{
     52a:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
     52c:	4a03      	ldr	r2, [pc, #12]	; (53c <gsm_store_active_profile+0x14>)
     52e:	9300      	str	r3, [sp, #0]
     530:	4903      	ldr	r1, [pc, #12]	; (540 <gsm_store_active_profile+0x18>)
     532:	4c04      	ldr	r4, [pc, #16]	; (544 <gsm_store_active_profile+0x1c>)
     534:	4804      	ldr	r0, [pc, #16]	; (548 <gsm_store_active_profile+0x20>)
     536:	47a0      	blx	r4
}
     538:	bd16      	pop	{r1, r2, r4, pc}
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	00001388 	.word	0x00001388
     540:	00009dc6 	.word	0x00009dc6
     544:	00000305 	.word	0x00000305
     548:	0000a0a7 	.word	0x0000a0a7

0000054c <gsm_enable_calling_line_identification>:
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
     54c:	2300      	movs	r3, #0
{
     54e:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
     550:	4a03      	ldr	r2, [pc, #12]	; (560 <gsm_enable_calling_line_identification+0x14>)
     552:	9300      	str	r3, [sp, #0]
     554:	4903      	ldr	r1, [pc, #12]	; (564 <gsm_enable_calling_line_identification+0x18>)
     556:	4c04      	ldr	r4, [pc, #16]	; (568 <gsm_enable_calling_line_identification+0x1c>)
     558:	4804      	ldr	r0, [pc, #16]	; (56c <gsm_enable_calling_line_identification+0x20>)
     55a:	47a0      	blx	r4
}
     55c:	bd16      	pop	{r1, r2, r4, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	00003a98 	.word	0x00003a98
     564:	00009dc6 	.word	0x00009dc6
     568:	00000305 	.word	0x00000305
     56c:	00009f08 	.word	0x00009f08

00000570 <gsm_enable_connected_line_identification_presentation>:
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
     570:	2300      	movs	r3, #0
{
     572:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
     574:	4a03      	ldr	r2, [pc, #12]	; (584 <gsm_enable_connected_line_identification_presentation+0x14>)
     576:	9300      	str	r3, [sp, #0]
     578:	4903      	ldr	r1, [pc, #12]	; (588 <gsm_enable_connected_line_identification_presentation+0x18>)
     57a:	4c04      	ldr	r4, [pc, #16]	; (58c <gsm_enable_connected_line_identification_presentation+0x1c>)
     57c:	4804      	ldr	r0, [pc, #16]	; (590 <gsm_enable_connected_line_identification_presentation+0x20>)
     57e:	47a0      	blx	r4
}
     580:	bd16      	pop	{r1, r2, r4, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	00001388 	.word	0x00001388
     588:	00009dc6 	.word	0x00009dc6
     58c:	00000305 	.word	0x00000305
     590:	00009f13 	.word	0x00009f13

00000594 <gsm_enable_list_current_calls_of_ME>:
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
     594:	2300      	movs	r3, #0
{
     596:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
     598:	4a03      	ldr	r2, [pc, #12]	; (5a8 <gsm_enable_list_current_calls_of_ME+0x14>)
     59a:	9300      	str	r3, [sp, #0]
     59c:	4903      	ldr	r1, [pc, #12]	; (5ac <gsm_enable_list_current_calls_of_ME+0x18>)
     59e:	4c04      	ldr	r4, [pc, #16]	; (5b0 <gsm_enable_list_current_calls_of_ME+0x1c>)
     5a0:	4804      	ldr	r0, [pc, #16]	; (5b4 <gsm_enable_list_current_calls_of_ME+0x20>)
     5a2:	47a0      	blx	r4
}
     5a4:	bd16      	pop	{r1, r2, r4, pc}
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	00001388 	.word	0x00001388
     5ac:	00009dc6 	.word	0x00009dc6
     5b0:	00000305 	.word	0x00000305
     5b4:	00009f1e 	.word	0x00009f1e

000005b8 <gsm_factory_reset>:
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
     5b8:	2300      	movs	r3, #0
{
     5ba:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
     5bc:	4a03      	ldr	r2, [pc, #12]	; (5cc <gsm_factory_reset+0x14>)
     5be:	9300      	str	r3, [sp, #0]
     5c0:	4903      	ldr	r1, [pc, #12]	; (5d0 <gsm_factory_reset+0x18>)
     5c2:	4c04      	ldr	r4, [pc, #16]	; (5d4 <gsm_factory_reset+0x1c>)
     5c4:	4804      	ldr	r0, [pc, #16]	; (5d8 <gsm_factory_reset+0x20>)
     5c6:	47a0      	blx	r4
}
     5c8:	bd16      	pop	{r1, r2, r4, pc}
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	00003a98 	.word	0x00003a98
     5d0:	00009dc6 	.word	0x00009dc6
     5d4:	00000305 	.word	0x00000305
     5d8:	00009f47 	.word	0x00009f47

000005dc <gsm_echo_off>:
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
     5dc:	2300      	movs	r3, #0
{
     5de:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
     5e0:	4a03      	ldr	r2, [pc, #12]	; (5f0 <gsm_echo_off+0x14>)
     5e2:	9300      	str	r3, [sp, #0]
     5e4:	4903      	ldr	r1, [pc, #12]	; (5f4 <gsm_echo_off+0x18>)
     5e6:	4c04      	ldr	r4, [pc, #16]	; (5f8 <gsm_echo_off+0x1c>)
     5e8:	4804      	ldr	r0, [pc, #16]	; (5fc <gsm_echo_off+0x20>)
     5ea:	47a0      	blx	r4
}
     5ec:	bd16      	pop	{r1, r2, r4, pc}
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	00001388 	.word	0x00001388
     5f4:	00009dc6 	.word	0x00009dc6
     5f8:	00000305 	.word	0x00000305
     5fc:	00009ee9 	.word	0x00009ee9

00000600 <gsm_select_sms_message_formate_text_mode>:
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
     600:	2300      	movs	r3, #0
{
     602:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
     604:	4a03      	ldr	r2, [pc, #12]	; (614 <gsm_select_sms_message_formate_text_mode+0x14>)
     606:	9300      	str	r3, [sp, #0]
     608:	4903      	ldr	r1, [pc, #12]	; (618 <gsm_select_sms_message_formate_text_mode+0x18>)
     60a:	4c04      	ldr	r4, [pc, #16]	; (61c <gsm_select_sms_message_formate_text_mode+0x1c>)
     60c:	4804      	ldr	r0, [pc, #16]	; (620 <gsm_select_sms_message_formate_text_mode+0x20>)
     60e:	47a0      	blx	r4
}
     610:	bd16      	pop	{r1, r2, r4, pc}
     612:	46c0      	nop			; (mov r8, r8)
     614:	00001388 	.word	0x00001388
     618:	00009dc6 	.word	0x00009dc6
     61c:	00000305 	.word	0x00000305
     620:	0000a020 	.word	0x0000a020

00000624 <gsm_set_sms_text_mode_parameter>:
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
     624:	2300      	movs	r3, #0
{
     626:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
     628:	4a03      	ldr	r2, [pc, #12]	; (638 <gsm_set_sms_text_mode_parameter+0x14>)
     62a:	9300      	str	r3, [sp, #0]
     62c:	4903      	ldr	r1, [pc, #12]	; (63c <gsm_set_sms_text_mode_parameter+0x18>)
     62e:	4c04      	ldr	r4, [pc, #16]	; (640 <gsm_set_sms_text_mode_parameter+0x1c>)
     630:	4804      	ldr	r0, [pc, #16]	; (644 <gsm_set_sms_text_mode_parameter+0x20>)
     632:	47a0      	blx	r4
}
     634:	bd16      	pop	{r1, r2, r4, pc}
     636:	46c0      	nop			; (mov r8, r8)
     638:	00001b58 	.word	0x00001b58
     63c:	00009dc6 	.word	0x00009dc6
     640:	00000305 	.word	0x00000305
     644:	0000a093 	.word	0x0000a093

00000648 <gsm_enable_new_sms_message_indications>:
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
     648:	2300      	movs	r3, #0
{
     64a:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
     64c:	4a03      	ldr	r2, [pc, #12]	; (65c <gsm_enable_new_sms_message_indications+0x14>)
     64e:	9300      	str	r3, [sp, #0]
     650:	4903      	ldr	r1, [pc, #12]	; (660 <gsm_enable_new_sms_message_indications+0x18>)
     652:	4c04      	ldr	r4, [pc, #16]	; (664 <gsm_enable_new_sms_message_indications+0x1c>)
     654:	4804      	ldr	r0, [pc, #16]	; (668 <gsm_enable_new_sms_message_indications+0x20>)
     656:	47a0      	blx	r4
}
     658:	bd16      	pop	{r1, r2, r4, pc}
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	00001388 	.word	0x00001388
     660:	00009dc6 	.word	0x00009dc6
     664:	00000305 	.word	0x00000305
     668:	00009f34 	.word	0x00009f34

0000066c <gsm_disable_new_sms_message_indications>:
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
     66c:	2300      	movs	r3, #0
{
     66e:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
     670:	4a03      	ldr	r2, [pc, #12]	; (680 <gsm_disable_new_sms_message_indications+0x14>)
     672:	9300      	str	r3, [sp, #0]
     674:	4903      	ldr	r1, [pc, #12]	; (684 <gsm_disable_new_sms_message_indications+0x18>)
     676:	4c04      	ldr	r4, [pc, #16]	; (688 <gsm_disable_new_sms_message_indications+0x1c>)
     678:	4804      	ldr	r0, [pc, #16]	; (68c <gsm_disable_new_sms_message_indications+0x20>)
     67a:	47a0      	blx	r4
}
     67c:	bd16      	pop	{r1, r2, r4, pc}
     67e:	46c0      	nop			; (mov r8, r8)
     680:	00001388 	.word	0x00001388
     684:	00009dc6 	.word	0x00009dc6
     688:	00000305 	.word	0x00000305
     68c:	00009ed6 	.word	0x00009ed6

00000690 <gsm_enable_network_time_update>:
}


enum gsm_error gsm_enable_network_time_update(void)
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
     690:	2300      	movs	r3, #0
{
     692:	b513      	push	{r0, r1, r4, lr}
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
     694:	4a03      	ldr	r2, [pc, #12]	; (6a4 <gsm_enable_network_time_update+0x14>)
     696:	9300      	str	r3, [sp, #0]
     698:	4903      	ldr	r1, [pc, #12]	; (6a8 <gsm_enable_network_time_update+0x18>)
     69a:	4c04      	ldr	r4, [pc, #16]	; (6ac <gsm_enable_network_time_update+0x1c>)
     69c:	4804      	ldr	r0, [pc, #16]	; (6b0 <gsm_enable_network_time_update+0x20>)
     69e:	47a0      	blx	r4
}
     6a0:	bd16      	pop	{r1, r2, r4, pc}
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	00002710 	.word	0x00002710
     6a8:	00009dc6 	.word	0x00009dc6
     6ac:	00000305 	.word	0x00000305
     6b0:	00009f29 	.word	0x00009f29

000006b4 <gsm_disable_network_time_update>:

enum gsm_error gsm_disable_network_time_update(void)
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
     6b4:	2300      	movs	r3, #0
{
     6b6:	b513      	push	{r0, r1, r4, lr}
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
     6b8:	4a03      	ldr	r2, [pc, #12]	; (6c8 <gsm_disable_network_time_update+0x14>)
     6ba:	9300      	str	r3, [sp, #0]
     6bc:	4903      	ldr	r1, [pc, #12]	; (6cc <gsm_disable_network_time_update+0x18>)
     6be:	4c04      	ldr	r4, [pc, #16]	; (6d0 <gsm_disable_network_time_update+0x1c>)
     6c0:	4804      	ldr	r0, [pc, #16]	; (6d4 <gsm_disable_network_time_update+0x20>)
     6c2:	47a0      	blx	r4
}
     6c4:	bd16      	pop	{r1, r2, r4, pc}
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	00002710 	.word	0x00002710
     6cc:	00009dc6 	.word	0x00009dc6
     6d0:	00000305 	.word	0x00000305
     6d4:	00009ecb 	.word	0x00009ecb

000006d8 <gsm_enable_DTMF_detection>:

enum gsm_error gsm_enable_DTMF_detection(void)
{
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
     6d8:	2300      	movs	r3, #0
{
     6da:	b513      	push	{r0, r1, r4, lr}
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
     6dc:	4a03      	ldr	r2, [pc, #12]	; (6ec <gsm_enable_DTMF_detection+0x14>)
     6de:	9300      	str	r3, [sp, #0]
     6e0:	4903      	ldr	r1, [pc, #12]	; (6f0 <gsm_enable_DTMF_detection+0x18>)
     6e2:	4c04      	ldr	r4, [pc, #16]	; (6f4 <gsm_enable_DTMF_detection+0x1c>)
     6e4:	4804      	ldr	r0, [pc, #16]	; (6f8 <gsm_enable_DTMF_detection+0x20>)
     6e6:	47a0      	blx	r4
}
     6e8:	bd16      	pop	{r1, r2, r4, pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	00001388 	.word	0x00001388
     6f0:	00009dc6 	.word	0x00009dc6
     6f4:	00000305 	.word	0x00000305
     6f8:	00009eef 	.word	0x00009eef

000006fc <gsm_reject_all_incomming_calls>:
}


enum gsm_error gsm_reject_all_incomming_calls(void)
{
	return gsm_send_at_command((const char*)("AT+GSMBUSY=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
     6fc:	2300      	movs	r3, #0
{
     6fe:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+GSMBUSY=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
     700:	4a03      	ldr	r2, [pc, #12]	; (710 <gsm_reject_all_incomming_calls+0x14>)
     702:	9300      	str	r3, [sp, #0]
     704:	4903      	ldr	r1, [pc, #12]	; (714 <gsm_reject_all_incomming_calls+0x18>)
     706:	4c04      	ldr	r4, [pc, #16]	; (718 <gsm_reject_all_incomming_calls+0x1c>)
     708:	4804      	ldr	r0, [pc, #16]	; (71c <gsm_reject_all_incomming_calls+0x20>)
     70a:	47a0      	blx	r4
}
     70c:	bd16      	pop	{r1, r2, r4, pc}
     70e:	46c0      	nop			; (mov r8, r8)
     710:	00001388 	.word	0x00001388
     714:	00009dc6 	.word	0x00009dc6
     718:	00000305 	.word	0x00000305
     71c:	0000a012 	.word	0x0000a012

00000720 <gsm_enable_all_incomming_calls>:

enum gsm_error gsm_enable_all_incomming_calls(void)
{
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
     720:	2300      	movs	r3, #0
{
     722:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+GSMBUSY=0\r"), (const char*)RESPONS_OK,5000,0, NULL);
     724:	4a03      	ldr	r2, [pc, #12]	; (734 <gsm_enable_all_incomming_calls+0x14>)
     726:	9300      	str	r3, [sp, #0]
     728:	4903      	ldr	r1, [pc, #12]	; (738 <gsm_enable_all_incomming_calls+0x18>)
     72a:	4c04      	ldr	r4, [pc, #16]	; (73c <gsm_enable_all_incomming_calls+0x1c>)
     72c:	4804      	ldr	r0, [pc, #16]	; (740 <gsm_enable_all_incomming_calls+0x20>)
     72e:	47a0      	blx	r4
}
     730:	bd16      	pop	{r1, r2, r4, pc}
     732:	46c0      	nop			; (mov r8, r8)
     734:	00001388 	.word	0x00001388
     738:	00009dc6 	.word	0x00009dc6
     73c:	00000305 	.word	0x00000305
     740:	00009efa 	.word	0x00009efa

00000744 <gsm_config_module>:
	return err;
}


enum gsm_error gsm_config_module(void)
{
     744:	b510      	push	{r4, lr}
	if (gsm_check_module() == GSM_ERROR_NONE)
     746:	4b20      	ldr	r3, [pc, #128]	; (7c8 <gsm_config_module+0x84>)
     748:	4798      	blx	r3
     74a:	2800      	cmp	r0, #0
     74c:	d13a      	bne.n	7c4 <gsm_config_module+0x80>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
     74e:	4b1f      	ldr	r3, [pc, #124]	; (7cc <gsm_config_module+0x88>)
     750:	4798      	blx	r3
     752:	2800      	cmp	r0, #0
     754:	d136      	bne.n	7c4 <gsm_config_module+0x80>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
     756:	20fa      	movs	r0, #250	; 0xfa
     758:	4c1d      	ldr	r4, [pc, #116]	; (7d0 <gsm_config_module+0x8c>)
     75a:	00c0      	lsls	r0, r0, #3
     75c:	47a0      	blx	r4
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
     75e:	4b1d      	ldr	r3, [pc, #116]	; (7d4 <gsm_config_module+0x90>)
     760:	4798      	blx	r3
     762:	2800      	cmp	r0, #0
     764:	d12e      	bne.n	7c4 <gsm_config_module+0x80>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
     766:	4b1c      	ldr	r3, [pc, #112]	; (7d8 <gsm_config_module+0x94>)
     768:	4798      	blx	r3
     76a:	2800      	cmp	r0, #0
     76c:	d12a      	bne.n	7c4 <gsm_config_module+0x80>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
     76e:	4b1b      	ldr	r3, [pc, #108]	; (7dc <gsm_config_module+0x98>)
     770:	4798      	blx	r3
     772:	2800      	cmp	r0, #0
     774:	d126      	bne.n	7c4 <gsm_config_module+0x80>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
     776:	20fa      	movs	r0, #250	; 0xfa
     778:	00c0      	lsls	r0, r0, #3
     77a:	47a0      	blx	r4
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
     77c:	4b18      	ldr	r3, [pc, #96]	; (7e0 <gsm_config_module+0x9c>)
     77e:	4798      	blx	r3
     780:	2800      	cmp	r0, #0
     782:	d11f      	bne.n	7c4 <gsm_config_module+0x80>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
     784:	4b17      	ldr	r3, [pc, #92]	; (7e4 <gsm_config_module+0xa0>)
     786:	4798      	blx	r3
     788:	2800      	cmp	r0, #0
     78a:	d11b      	bne.n	7c4 <gsm_config_module+0x80>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
     78c:	4b16      	ldr	r3, [pc, #88]	; (7e8 <gsm_config_module+0xa4>)
     78e:	4798      	blx	r3
     790:	2800      	cmp	r0, #0
     792:	d117      	bne.n	7c4 <gsm_config_module+0x80>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
     794:	4b15      	ldr	r3, [pc, #84]	; (7ec <gsm_config_module+0xa8>)
     796:	4798      	blx	r3
     798:	2800      	cmp	r0, #0
     79a:	d113      	bne.n	7c4 <gsm_config_module+0x80>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
     79c:	4b14      	ldr	r3, [pc, #80]	; (7f0 <gsm_config_module+0xac>)
     79e:	4798      	blx	r3
     7a0:	2800      	cmp	r0, #0
     7a2:	d10f      	bne.n	7c4 <gsm_config_module+0x80>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
     7a4:	4b13      	ldr	r3, [pc, #76]	; (7f4 <gsm_config_module+0xb0>)
     7a6:	4798      	blx	r3
     7a8:	2800      	cmp	r0, #0
     7aa:	d10b      	bne.n	7c4 <gsm_config_module+0x80>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
     7ac:	4b12      	ldr	r3, [pc, #72]	; (7f8 <gsm_config_module+0xb4>)
     7ae:	4798      	blx	r3
     7b0:	2800      	cmp	r0, #0
     7b2:	d107      	bne.n	7c4 <gsm_config_module+0x80>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
     7b4:	4b11      	ldr	r3, [pc, #68]	; (7fc <gsm_config_module+0xb8>)
     7b6:	4798      	blx	r3
     7b8:	2800      	cmp	r0, #0
     7ba:	d103      	bne.n	7c4 <gsm_config_module+0x80>
													{
														//if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
     7bc:	4b10      	ldr	r3, [pc, #64]	; (800 <gsm_config_module+0xbc>)
     7be:	4798      	blx	r3
     7c0:	2800      	cmp	r0, #0
     7c2:	d000      	beq.n	7c6 <gsm_config_module+0x82>
															{
																return GSM_ERROR_NONE; 
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
     7c4:	2010      	movs	r0, #16
	{
		return GSM_ERROR_CONFIG_FAILED;
	}
	
	return GSM_ERROR_CONFIG_FAILED;
}
     7c6:	bd10      	pop	{r4, pc}
     7c8:	00000459 	.word	0x00000459
     7cc:	000005b9 	.word	0x000005b9
     7d0:	00003d99 	.word	0x00003d99
     7d4:	00000505 	.word	0x00000505
     7d8:	000005dd 	.word	0x000005dd
     7dc:	000004c1 	.word	0x000004c1
     7e0:	0000054d 	.word	0x0000054d
     7e4:	00000571 	.word	0x00000571
     7e8:	00000595 	.word	0x00000595
     7ec:	00000601 	.word	0x00000601
     7f0:	00000625 	.word	0x00000625
     7f4:	00000649 	.word	0x00000649
     7f8:	00000691 	.word	0x00000691
     7fc:	000006d9 	.word	0x000006d9
     800:	00000529 	.word	0x00000529

00000804 <gsm_configure_contype_gprs>:
//FTP
//////////////////////////////////////////////////////////////////////////

enum gsm_error gsm_configure_contype_gprs(void)
{
	return gsm_send_at_command((const char*)("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r"), (const char*)RESPONS_OK,5000,0, NULL);
     804:	2300      	movs	r3, #0
{
     806:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r"), (const char*)RESPONS_OK,5000,0, NULL);
     808:	4a03      	ldr	r2, [pc, #12]	; (818 <gsm_configure_contype_gprs+0x14>)
     80a:	9300      	str	r3, [sp, #0]
     80c:	4903      	ldr	r1, [pc, #12]	; (81c <gsm_configure_contype_gprs+0x18>)
     80e:	4c04      	ldr	r4, [pc, #16]	; (820 <gsm_configure_contype_gprs+0x1c>)
     810:	4804      	ldr	r0, [pc, #16]	; (824 <gsm_configure_contype_gprs+0x20>)
     812:	47a0      	blx	r4
}
     814:	bd16      	pop	{r1, r2, r4, pc}
     816:	46c0      	nop			; (mov r8, r8)
     818:	00001388 	.word	0x00001388
     81c:	00009dc6 	.word	0x00009dc6
     820:	00000305 	.word	0x00000305
     824:	00009e95 	.word	0x00009e95

00000828 <gsm_configure_bearer_apn>:

enum gsm_error gsm_configure_bearer_apn(void)
{
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
	char buffer[100];
	
	uint8_t i = 0;
	char *p, *s;
	const uint8_t MAX_BUFFER = 100;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     82a:	2101      	movs	r1, #1
{
     82c:	b09d      	sub	sp, #116	; 0x74
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     82e:	2064      	movs	r0, #100	; 0x64
     830:	4b39      	ldr	r3, [pc, #228]	; (918 <gsm_configure_bearer_apn+0xf0>)
     832:	4798      	blx	r3
     834:	0004      	movs	r4, r0
	if (cmdx == NULL)
	{
		return GSM_ERROR_UNKWON;
     836:	2008      	movs	r0, #8
	if (cmdx == NULL)
     838:	2c00      	cmp	r4, #0
     83a:	d035      	beq.n	8a8 <gsm_configure_bearer_apn+0x80>
	}
	memset(cmdx, '\0', MAX_BUFFER);
     83c:	2264      	movs	r2, #100	; 0x64
     83e:	2100      	movs	r1, #0
     840:	4b36      	ldr	r3, [pc, #216]	; (91c <gsm_configure_bearer_apn+0xf4>)
     842:	0020      	movs	r0, r4
     844:	4798      	blx	r3
	
	gsm_send_at_command((const char*)("AT+COPS?\r"),(const char*)RESPONS_OK,75000,MAX_BUFFER,cmdx);
     846:	2364      	movs	r3, #100	; 0x64
     848:	4935      	ldr	r1, [pc, #212]	; (920 <gsm_configure_bearer_apn+0xf8>)
     84a:	9400      	str	r4, [sp, #0]
     84c:	4a35      	ldr	r2, [pc, #212]	; (924 <gsm_configure_bearer_apn+0xfc>)
     84e:	4836      	ldr	r0, [pc, #216]	; (928 <gsm_configure_bearer_apn+0x100>)
     850:	4d36      	ldr	r5, [pc, #216]	; (92c <gsm_configure_bearer_apn+0x104>)
     852:	47a8      	blx	r5
	
	if (NULL != (s = strstr(cmdx, "+COPS:")))
     854:	4936      	ldr	r1, [pc, #216]	; (930 <gsm_configure_bearer_apn+0x108>)
     856:	0020      	movs	r0, r4
     858:	4b36      	ldr	r3, [pc, #216]	; (934 <gsm_configure_bearer_apn+0x10c>)
     85a:	4798      	blx	r3
     85c:	2800      	cmp	r0, #0
     85e:	d010      	beq.n	882 <gsm_configure_bearer_apn+0x5a>
	{
		s = strstr((char *)(s),"\"");
     860:	2122      	movs	r1, #34	; 0x22
     862:	4d35      	ldr	r5, [pc, #212]	; (938 <gsm_configure_bearer_apn+0x110>)
     864:	47a8      	blx	r5
		s = s + 1;
		p = strstr((char *)(s),"\"");
     866:	2122      	movs	r1, #34	; 0x22
		s = strstr((char *)(s),"\"");
     868:	0006      	movs	r6, r0
		s = s + 1;
     86a:	3001      	adds	r0, #1
		p = strstr((char *)(s),"\"");
     86c:	47a8      	blx	r5
     86e:	27ff      	movs	r7, #255	; 0xff
     870:	2300      	movs	r3, #0
     872:	a903      	add	r1, sp, #12
     874:	1c5a      	adds	r2, r3, #1
		if (NULL != s)
		{
			i = 0;
			while (s < p)
     876:	18b5      	adds	r5, r6, r2
			{
				buffer[i++] = *(s++);
     878:	403b      	ands	r3, r7
			while (s < p)
     87a:	42a8      	cmp	r0, r5
     87c:	d816      	bhi.n	8ac <gsm_configure_bearer_apn+0x84>
			}
			buffer[i] = '\0';
     87e:	2200      	movs	r2, #0
     880:	54ca      	strb	r2, [r1, r3]
		}
	}
	
	StringtoUpperCase(buffer);
     882:	a803      	add	r0, sp, #12
     884:	4b2d      	ldr	r3, [pc, #180]	; (93c <gsm_configure_bearer_apn+0x114>)
     886:	4798      	blx	r3
	
	if(strstr(buffer,"IDEA"))
     888:	492d      	ldr	r1, [pc, #180]	; (940 <gsm_configure_bearer_apn+0x118>)
     88a:	a803      	add	r0, sp, #12
     88c:	4b29      	ldr	r3, [pc, #164]	; (934 <gsm_configure_bearer_apn+0x10c>)
     88e:	4798      	blx	r3
     890:	4d2c      	ldr	r5, [pc, #176]	; (944 <gsm_configure_bearer_apn+0x11c>)
     892:	1e07      	subs	r7, r0, #0
     894:	d00e      	beq.n	8b4 <gsm_configure_bearer_apn+0x8c>
	{
		free(cmdx);
     896:	0020      	movs	r0, r4
     898:	47a8      	blx	r5
		return 	gsm_send_at_command((const char*)("AT+SAPBR=3,1,\"APN\",\"internet\"\r"), (const char*)RESPONS_OK,3000,0, NULL);
     89a:	2300      	movs	r3, #0
     89c:	4a2a      	ldr	r2, [pc, #168]	; (948 <gsm_configure_bearer_apn+0x120>)
     89e:	4920      	ldr	r1, [pc, #128]	; (920 <gsm_configure_bearer_apn+0xf8>)
     8a0:	482a      	ldr	r0, [pc, #168]	; (94c <gsm_configure_bearer_apn+0x124>)
     8a2:	9300      	str	r3, [sp, #0]
		return 	gsm_send_at_command((const char*)("AT+SAPBR=3,1,\"APN\",\"airtelgprs.com\"\r"), (const char*)RESPONS_OK,3000,0, NULL);
	}
	else
	{
		free(cmdx);
		return 	gsm_send_at_command((const char*)("AT+SAPBR=3,1,\"APN\",\"\"\r"), (const char*)RESPONS_OK,3000,0, NULL);
     8a4:	4c21      	ldr	r4, [pc, #132]	; (92c <gsm_configure_bearer_apn+0x104>)
     8a6:	47a0      	blx	r4
	}
}
     8a8:	b01d      	add	sp, #116	; 0x74
     8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				buffer[i++] = *(s++);
     8ac:	5cb5      	ldrb	r5, [r6, r2]
     8ae:	54cd      	strb	r5, [r1, r3]
     8b0:	0013      	movs	r3, r2
     8b2:	e7df      	b.n	874 <gsm_configure_bearer_apn+0x4c>
	else if (strstr(buffer,"VODA"))
     8b4:	4926      	ldr	r1, [pc, #152]	; (950 <gsm_configure_bearer_apn+0x128>)
     8b6:	a803      	add	r0, sp, #12
     8b8:	4b1e      	ldr	r3, [pc, #120]	; (934 <gsm_configure_bearer_apn+0x10c>)
     8ba:	4798      	blx	r3
     8bc:	1e06      	subs	r6, r0, #0
     8be:	d007      	beq.n	8d0 <gsm_configure_bearer_apn+0xa8>
		free(cmdx);
     8c0:	0020      	movs	r0, r4
     8c2:	47a8      	blx	r5
		return 	gsm_send_at_command((const char*)("AT+SAPBR=3,1,\"APN\",\"www\"\r"), (const char*)RESPONS_OK,3000,0, NULL);
     8c4:	9700      	str	r7, [sp, #0]
     8c6:	003b      	movs	r3, r7
     8c8:	4a1f      	ldr	r2, [pc, #124]	; (948 <gsm_configure_bearer_apn+0x120>)
     8ca:	4915      	ldr	r1, [pc, #84]	; (920 <gsm_configure_bearer_apn+0xf8>)
     8cc:	4821      	ldr	r0, [pc, #132]	; (954 <gsm_configure_bearer_apn+0x12c>)
     8ce:	e7e9      	b.n	8a4 <gsm_configure_bearer_apn+0x7c>
	else if (strstr(buffer,"BSNL"))
     8d0:	4921      	ldr	r1, [pc, #132]	; (958 <gsm_configure_bearer_apn+0x130>)
     8d2:	a803      	add	r0, sp, #12
     8d4:	4b17      	ldr	r3, [pc, #92]	; (934 <gsm_configure_bearer_apn+0x10c>)
     8d6:	4798      	blx	r3
     8d8:	1e07      	subs	r7, r0, #0
     8da:	d007      	beq.n	8ec <gsm_configure_bearer_apn+0xc4>
		free(cmdx);
     8dc:	0020      	movs	r0, r4
     8de:	47a8      	blx	r5
		return 	gsm_send_at_command((const char*)("AT+SAPBR=3,1,\"APN\",\"bsnlnet\"\r"), (const char*)RESPONS_OK,3000,0, NULL);
     8e0:	9600      	str	r6, [sp, #0]
     8e2:	0033      	movs	r3, r6
     8e4:	4a18      	ldr	r2, [pc, #96]	; (948 <gsm_configure_bearer_apn+0x120>)
     8e6:	490e      	ldr	r1, [pc, #56]	; (920 <gsm_configure_bearer_apn+0xf8>)
     8e8:	481c      	ldr	r0, [pc, #112]	; (95c <gsm_configure_bearer_apn+0x134>)
     8ea:	e7db      	b.n	8a4 <gsm_configure_bearer_apn+0x7c>
	else if (strstr(buffer,"AIRTEL"))
     8ec:	491c      	ldr	r1, [pc, #112]	; (960 <gsm_configure_bearer_apn+0x138>)
     8ee:	a803      	add	r0, sp, #12
     8f0:	4b10      	ldr	r3, [pc, #64]	; (934 <gsm_configure_bearer_apn+0x10c>)
     8f2:	4798      	blx	r3
     8f4:	0006      	movs	r6, r0
		free(cmdx);
     8f6:	0020      	movs	r0, r4
	else if (strstr(buffer,"AIRTEL"))
     8f8:	2e00      	cmp	r6, #0
     8fa:	d006      	beq.n	90a <gsm_configure_bearer_apn+0xe2>
		free(cmdx);
     8fc:	47a8      	blx	r5
		return 	gsm_send_at_command((const char*)("AT+SAPBR=3,1,\"APN\",\"airtelgprs.com\"\r"), (const char*)RESPONS_OK,3000,0, NULL);
     8fe:	9700      	str	r7, [sp, #0]
     900:	003b      	movs	r3, r7
     902:	4a11      	ldr	r2, [pc, #68]	; (948 <gsm_configure_bearer_apn+0x120>)
     904:	4906      	ldr	r1, [pc, #24]	; (920 <gsm_configure_bearer_apn+0xf8>)
     906:	4817      	ldr	r0, [pc, #92]	; (964 <gsm_configure_bearer_apn+0x13c>)
     908:	e7cc      	b.n	8a4 <gsm_configure_bearer_apn+0x7c>
		free(cmdx);
     90a:	47a8      	blx	r5
		return 	gsm_send_at_command((const char*)("AT+SAPBR=3,1,\"APN\",\"\"\r"), (const char*)RESPONS_OK,3000,0, NULL);
     90c:	9600      	str	r6, [sp, #0]
     90e:	0033      	movs	r3, r6
     910:	4a0d      	ldr	r2, [pc, #52]	; (948 <gsm_configure_bearer_apn+0x120>)
     912:	4903      	ldr	r1, [pc, #12]	; (920 <gsm_configure_bearer_apn+0xf8>)
     914:	4814      	ldr	r0, [pc, #80]	; (968 <gsm_configure_bearer_apn+0x140>)
     916:	e7c5      	b.n	8a4 <gsm_configure_bearer_apn+0x7c>
     918:	0000916d 	.word	0x0000916d
     91c:	0000924b 	.word	0x0000924b
     920:	00009dc6 	.word	0x00009dc6
     924:	000124f8 	.word	0x000124f8
     928:	00009ddb 	.word	0x00009ddb
     92c:	00000305 	.word	0x00000305
     930:	00009de5 	.word	0x00009de5
     934:	000094cf 	.word	0x000094cf
     938:	00009495 	.word	0x00009495
     93c:	00001af5 	.word	0x00001af5
     940:	00009dec 	.word	0x00009dec
     944:	00009201 	.word	0x00009201
     948:	00000bb8 	.word	0x00000bb8
     94c:	00009df1 	.word	0x00009df1
     950:	00009e10 	.word	0x00009e10
     954:	00009e15 	.word	0x00009e15
     958:	00009e2f 	.word	0x00009e2f
     95c:	00009e34 	.word	0x00009e34
     960:	00009e52 	.word	0x00009e52
     964:	00009e59 	.word	0x00009e59
     968:	00009e7e 	.word	0x00009e7e

0000096c <gsm_query_gprs_contex>:

enum gsm_error gsm_query_gprs_contex(void)
{
     96c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const uint8_t MAX_BUFFER = 50;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     96e:	4b1a      	ldr	r3, [pc, #104]	; (9d8 <gsm_query_gprs_contex+0x6c>)
     970:	2101      	movs	r1, #1
     972:	2032      	movs	r0, #50	; 0x32
     974:	4798      	blx	r3
     976:	0004      	movs	r4, r0
	if (cmdx == NULL)
	{
		free(cmdx);
		return 0;
     978:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
     97a:	d025      	beq.n	9c8 <gsm_query_gprs_contex+0x5c>
	}
	memset(cmdx, '\0', MAX_BUFFER);
     97c:	2232      	movs	r2, #50	; 0x32
     97e:	2100      	movs	r1, #0
     980:	4b16      	ldr	r3, [pc, #88]	; (9dc <gsm_query_gprs_contex+0x70>)
     982:	4798      	blx	r3
	
	enum gsm_error err;
	
	err = gsm_send_at_command((const char*)("AT+SAPBR=2,1\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
     984:	4d16      	ldr	r5, [pc, #88]	; (9e0 <gsm_query_gprs_contex+0x74>)
     986:	9400      	str	r4, [sp, #0]
     988:	2332      	movs	r3, #50	; 0x32
     98a:	4a16      	ldr	r2, [pc, #88]	; (9e4 <gsm_query_gprs_contex+0x78>)
     98c:	4916      	ldr	r1, [pc, #88]	; (9e8 <gsm_query_gprs_contex+0x7c>)
     98e:	4817      	ldr	r0, [pc, #92]	; (9ec <gsm_query_gprs_contex+0x80>)
     990:	47a8      	blx	r5
     992:	1e05      	subs	r5, r0, #0
	
	if (err == GSM_ERROR_NONE)
     994:	d115      	bne.n	9c2 <gsm_query_gprs_contex+0x56>
	{
		if (strstr(cmdx,"+SAPBR: 1,0") != NULL)
     996:	4916      	ldr	r1, [pc, #88]	; (9f0 <gsm_query_gprs_contex+0x84>)
     998:	0020      	movs	r0, r4
     99a:	4e16      	ldr	r6, [pc, #88]	; (9f4 <gsm_query_gprs_contex+0x88>)
     99c:	47b0      	blx	r6
     99e:	2800      	cmp	r0, #0
     9a0:	d114      	bne.n	9cc <gsm_query_gprs_contex+0x60>
		{
			err = GSM_GPRS_BEARER_IS_CONNECTING;
		}
		else if (strstr(cmdx,"+SAPBR: 1,1") != NULL)
     9a2:	4915      	ldr	r1, [pc, #84]	; (9f8 <gsm_query_gprs_contex+0x8c>)
     9a4:	0020      	movs	r0, r4
     9a6:	47b0      	blx	r6
     9a8:	2800      	cmp	r0, #0
     9aa:	d111      	bne.n	9d0 <gsm_query_gprs_contex+0x64>
		{
			err = GSM_GPRS_BEARER_IS_CONNECTED;
		}
		else if (strstr(cmdx,"+SAPBR: 1,2") != NULL)
     9ac:	4913      	ldr	r1, [pc, #76]	; (9fc <gsm_query_gprs_contex+0x90>)
     9ae:	0020      	movs	r0, r4
     9b0:	47b0      	blx	r6
     9b2:	2800      	cmp	r0, #0
     9b4:	d10e      	bne.n	9d4 <gsm_query_gprs_contex+0x68>
		{
			err = GSM_GPRS_BEARER_IS_CLOSING;
		}
		else if (strstr(cmdx,"+SAPBR: 1,3") != NULL)
     9b6:	4912      	ldr	r1, [pc, #72]	; (a00 <gsm_query_gprs_contex+0x94>)
     9b8:	0020      	movs	r0, r4
     9ba:	47b0      	blx	r6
     9bc:	2800      	cmp	r0, #0
     9be:	d000      	beq.n	9c2 <gsm_query_gprs_contex+0x56>
		{
			err = GSM_GPRS_BEARER_IS_CLOSED;
     9c0:	3514      	adds	r5, #20
		}
		
	}
	
	free(cmdx);
     9c2:	0020      	movs	r0, r4
     9c4:	4b0f      	ldr	r3, [pc, #60]	; (a04 <gsm_query_gprs_contex+0x98>)
     9c6:	4798      	blx	r3
	
	return err;
	
}
     9c8:	0028      	movs	r0, r5
     9ca:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			err = GSM_GPRS_BEARER_IS_CONNECTING;
     9cc:	2511      	movs	r5, #17
     9ce:	e7f8      	b.n	9c2 <gsm_query_gprs_contex+0x56>
			err = GSM_GPRS_BEARER_IS_CONNECTED;
     9d0:	2512      	movs	r5, #18
     9d2:	e7f6      	b.n	9c2 <gsm_query_gprs_contex+0x56>
			err = GSM_GPRS_BEARER_IS_CLOSING;
     9d4:	2513      	movs	r5, #19
     9d6:	e7f4      	b.n	9c2 <gsm_query_gprs_contex+0x56>
     9d8:	0000916d 	.word	0x0000916d
     9dc:	0000924b 	.word	0x0000924b
     9e0:	00000305 	.word	0x00000305
     9e4:	00001388 	.word	0x00001388
     9e8:	00009dc6 	.word	0x00009dc6
     9ec:	00009fba 	.word	0x00009fba
     9f0:	00009fc8 	.word	0x00009fc8
     9f4:	000094cf 	.word	0x000094cf
     9f8:	00009fd4 	.word	0x00009fd4
     9fc:	00009fe0 	.word	0x00009fe0
     a00:	00009fec 	.word	0x00009fec
     a04:	00009201 	.word	0x00009201

00000a08 <gsm_open_gprs_contex>:

enum gsm_error gsm_open_gprs_contex(void)
{
	return gsm_send_at_command((const char*)("AT+SAPBR=1,1\r"), (const char*)RESPONS_OK,85000,0, NULL);
     a08:	2300      	movs	r3, #0
{
     a0a:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+SAPBR=1,1\r"), (const char*)RESPONS_OK,85000,0, NULL);
     a0c:	4a03      	ldr	r2, [pc, #12]	; (a1c <gsm_open_gprs_contex+0x14>)
     a0e:	9300      	str	r3, [sp, #0]
     a10:	4903      	ldr	r1, [pc, #12]	; (a20 <gsm_open_gprs_contex+0x18>)
     a12:	4c04      	ldr	r4, [pc, #16]	; (a24 <gsm_open_gprs_contex+0x1c>)
     a14:	4804      	ldr	r0, [pc, #16]	; (a28 <gsm_open_gprs_contex+0x20>)
     a16:	47a0      	blx	r4
}
     a18:	bd16      	pop	{r1, r2, r4, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	00014c08 	.word	0x00014c08
     a20:	00009dc6 	.word	0x00009dc6
     a24:	00000305 	.word	0x00000305
     a28:	00009fac 	.word	0x00009fac

00000a2c <gsm_close_gprs_contex>:

enum gsm_error gsm_close_gprs_contex(void)
{
	return gsm_send_at_command((const char*)("AT+SAPBR=0,1\r"), (const char*)RESPONS_OK,65000,0, NULL);
     a2c:	2300      	movs	r3, #0
{
     a2e:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+SAPBR=0,1\r"), (const char*)RESPONS_OK,65000,0, NULL);
     a30:	4a03      	ldr	r2, [pc, #12]	; (a40 <gsm_close_gprs_contex+0x14>)
     a32:	9300      	str	r3, [sp, #0]
     a34:	4903      	ldr	r1, [pc, #12]	; (a44 <gsm_close_gprs_contex+0x18>)
     a36:	4c04      	ldr	r4, [pc, #16]	; (a48 <gsm_close_gprs_contex+0x1c>)
     a38:	4804      	ldr	r0, [pc, #16]	; (a4c <gsm_close_gprs_contex+0x20>)
     a3a:	47a0      	blx	r4
}
     a3c:	bd16      	pop	{r1, r2, r4, pc}
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	0000fde8 	.word	0x0000fde8
     a44:	00009dc6 	.word	0x00009dc6
     a48:	00000305 	.word	0x00000305
     a4c:	00009dcd 	.word	0x00009dcd

00000a50 <gsm_set_ftp_server_address>:
{
	return gsm_send_at_command((const char*)("AT+FTPCID=1\r"), (const char*)RESPONS_OK,3000,0, NULL);
}

enum gsm_error gsm_set_ftp_server_address(char *address)
{
     a50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 50;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     a52:	4b0f      	ldr	r3, [pc, #60]	; (a90 <gsm_set_ftp_server_address+0x40>)
{
     a54:	0006      	movs	r6, r0
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     a56:	2101      	movs	r1, #1
     a58:	2032      	movs	r0, #50	; 0x32
     a5a:	4798      	blx	r3
     a5c:	0004      	movs	r4, r0
	//buffer created???
	if (cmdx == NULL)
	{
		return 0;
     a5e:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
     a60:	d014      	beq.n	a8c <gsm_set_ftp_server_address+0x3c>
	}
	memset(cmdx, '\0', MAX_BUFFER);
     a62:	2232      	movs	r2, #50	; 0x32
     a64:	2100      	movs	r1, #0
     a66:	4b0b      	ldr	r3, [pc, #44]	; (a94 <gsm_set_ftp_server_address+0x44>)
     a68:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+FTPSERV=\"%s\"\r",address);
     a6a:	0033      	movs	r3, r6
     a6c:	4a0a      	ldr	r2, [pc, #40]	; (a98 <gsm_set_ftp_server_address+0x48>)
     a6e:	2132      	movs	r1, #50	; 0x32
     a70:	4d0a      	ldr	r5, [pc, #40]	; (a9c <gsm_set_ftp_server_address+0x4c>)
     a72:	0020      	movs	r0, r4
     a74:	47a8      	blx	r5
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,3000,0,NULL);
     a76:	2300      	movs	r3, #0
     a78:	4d09      	ldr	r5, [pc, #36]	; (aa0 <gsm_set_ftp_server_address+0x50>)
     a7a:	9300      	str	r3, [sp, #0]
     a7c:	4a09      	ldr	r2, [pc, #36]	; (aa4 <gsm_set_ftp_server_address+0x54>)
     a7e:	490a      	ldr	r1, [pc, #40]	; (aa8 <gsm_set_ftp_server_address+0x58>)
     a80:	0020      	movs	r0, r4
     a82:	47a8      	blx	r5
	free(cmdx);
     a84:	4b09      	ldr	r3, [pc, #36]	; (aac <gsm_set_ftp_server_address+0x5c>)
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,3000,0,NULL);
     a86:	0005      	movs	r5, r0
	free(cmdx);
     a88:	0020      	movs	r0, r4
     a8a:	4798      	blx	r3
	return err;
}
     a8c:	0028      	movs	r0, r5
     a8e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     a90:	0000916d 	.word	0x0000916d
     a94:	0000924b 	.word	0x0000924b
     a98:	0000a064 	.word	0x0000a064
     a9c:	000093ed 	.word	0x000093ed
     aa0:	00000305 	.word	0x00000305
     aa4:	00000bb8 	.word	0x00000bb8
     aa8:	00009dc6 	.word	0x00009dc6
     aac:	00009201 	.word	0x00009201

00000ab0 <gsm_set_ftp_user_name>:

enum gsm_error gsm_set_ftp_user_name(char *username)
{
     ab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 50;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     ab2:	4b0f      	ldr	r3, [pc, #60]	; (af0 <gsm_set_ftp_user_name+0x40>)
{
     ab4:	0006      	movs	r6, r0
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     ab6:	2101      	movs	r1, #1
     ab8:	2032      	movs	r0, #50	; 0x32
     aba:	4798      	blx	r3
     abc:	0004      	movs	r4, r0
	//buffer created???
	if (cmdx == NULL)
	{
		return 0;
     abe:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
     ac0:	d014      	beq.n	aec <gsm_set_ftp_user_name+0x3c>
	}
	memset(cmdx, '\0', MAX_BUFFER);
     ac2:	2232      	movs	r2, #50	; 0x32
     ac4:	2100      	movs	r1, #0
     ac6:	4b0b      	ldr	r3, [pc, #44]	; (af4 <gsm_set_ftp_user_name+0x44>)
     ac8:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+FTPUN=\"%s\"\r",username);
     aca:	0033      	movs	r3, r6
     acc:	4a0a      	ldr	r2, [pc, #40]	; (af8 <gsm_set_ftp_user_name+0x48>)
     ace:	2132      	movs	r1, #50	; 0x32
     ad0:	4d0a      	ldr	r5, [pc, #40]	; (afc <gsm_set_ftp_user_name+0x4c>)
     ad2:	0020      	movs	r0, r4
     ad4:	47a8      	blx	r5
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,3000,0,NULL);
     ad6:	2300      	movs	r3, #0
     ad8:	4d09      	ldr	r5, [pc, #36]	; (b00 <gsm_set_ftp_user_name+0x50>)
     ada:	9300      	str	r3, [sp, #0]
     adc:	4a09      	ldr	r2, [pc, #36]	; (b04 <gsm_set_ftp_user_name+0x54>)
     ade:	490a      	ldr	r1, [pc, #40]	; (b08 <gsm_set_ftp_user_name+0x58>)
     ae0:	0020      	movs	r0, r4
     ae2:	47a8      	blx	r5
	free(cmdx);
     ae4:	4b09      	ldr	r3, [pc, #36]	; (b0c <gsm_set_ftp_user_name+0x5c>)
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,3000,0,NULL);
     ae6:	0005      	movs	r5, r0
	free(cmdx);
     ae8:	0020      	movs	r0, r4
     aea:	4798      	blx	r3
	return err;
}
     aec:	0028      	movs	r0, r5
     aee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     af0:	0000916d 	.word	0x0000916d
     af4:	0000924b 	.word	0x0000924b
     af8:	0000a075 	.word	0x0000a075
     afc:	000093ed 	.word	0x000093ed
     b00:	00000305 	.word	0x00000305
     b04:	00000bb8 	.word	0x00000bb8
     b08:	00009dc6 	.word	0x00009dc6
     b0c:	00009201 	.word	0x00009201

00000b10 <gsm_set_ftp_user_password>:

enum gsm_error gsm_set_ftp_user_password(char *password)
{
     b10:	b573      	push	{r0, r1, r4, r5, r6, lr}
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 50;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     b12:	4b0f      	ldr	r3, [pc, #60]	; (b50 <gsm_set_ftp_user_password+0x40>)
{
     b14:	0006      	movs	r6, r0
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     b16:	2101      	movs	r1, #1
     b18:	2032      	movs	r0, #50	; 0x32
     b1a:	4798      	blx	r3
     b1c:	0004      	movs	r4, r0
	//buffer created???
	if (cmdx == NULL)
	{
		return 0;
     b1e:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
     b20:	d014      	beq.n	b4c <gsm_set_ftp_user_password+0x3c>
	}
	memset(cmdx, '\0', MAX_BUFFER);
     b22:	2232      	movs	r2, #50	; 0x32
     b24:	2100      	movs	r1, #0
     b26:	4b0b      	ldr	r3, [pc, #44]	; (b54 <gsm_set_ftp_user_password+0x44>)
     b28:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+FTPPW=\"%s\"\r",password);
     b2a:	0033      	movs	r3, r6
     b2c:	4a0a      	ldr	r2, [pc, #40]	; (b58 <gsm_set_ftp_user_password+0x48>)
     b2e:	2132      	movs	r1, #50	; 0x32
     b30:	4d0a      	ldr	r5, [pc, #40]	; (b5c <gsm_set_ftp_user_password+0x4c>)
     b32:	0020      	movs	r0, r4
     b34:	47a8      	blx	r5
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,3000,0,NULL);
     b36:	2300      	movs	r3, #0
     b38:	4d09      	ldr	r5, [pc, #36]	; (b60 <gsm_set_ftp_user_password+0x50>)
     b3a:	9300      	str	r3, [sp, #0]
     b3c:	4a09      	ldr	r2, [pc, #36]	; (b64 <gsm_set_ftp_user_password+0x54>)
     b3e:	490a      	ldr	r1, [pc, #40]	; (b68 <gsm_set_ftp_user_password+0x58>)
     b40:	0020      	movs	r0, r4
     b42:	47a8      	blx	r5
	free(cmdx);
     b44:	4b09      	ldr	r3, [pc, #36]	; (b6c <gsm_set_ftp_user_password+0x5c>)
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,3000,0,NULL);
     b46:	0005      	movs	r5, r0
	free(cmdx);
     b48:	0020      	movs	r0, r4
     b4a:	4798      	blx	r3
	return err;
}
     b4c:	0028      	movs	r0, r5
     b4e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     b50:	0000916d 	.word	0x0000916d
     b54:	0000924b 	.word	0x0000924b
     b58:	0000a084 	.word	0x0000a084
     b5c:	000093ed 	.word	0x000093ed
     b60:	00000305 	.word	0x00000305
     b64:	00000bb8 	.word	0x00000bb8
     b68:	00009dc6 	.word	0x00009dc6
     b6c:	00009201 	.word	0x00009201

00000b70 <gsm_set_ftp_download_file_name>:

enum gsm_error gsm_set_ftp_download_file_name(char *filename)
{
     b70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 50;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     b72:	4b0f      	ldr	r3, [pc, #60]	; (bb0 <gsm_set_ftp_download_file_name+0x40>)
{
     b74:	0006      	movs	r6, r0
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     b76:	2101      	movs	r1, #1
     b78:	2032      	movs	r0, #50	; 0x32
     b7a:	4798      	blx	r3
     b7c:	0004      	movs	r4, r0
	//buffer created???
	if (cmdx == NULL)
	{
		return 0;
     b7e:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
     b80:	d014      	beq.n	bac <gsm_set_ftp_download_file_name+0x3c>
	}
	memset(cmdx, '\0', MAX_BUFFER);
     b82:	2232      	movs	r2, #50	; 0x32
     b84:	2100      	movs	r1, #0
     b86:	4b0b      	ldr	r3, [pc, #44]	; (bb4 <gsm_set_ftp_download_file_name+0x44>)
     b88:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+FTPGETNAME=\"%s\"\r",filename);
     b8a:	0033      	movs	r3, r6
     b8c:	4a0a      	ldr	r2, [pc, #40]	; (bb8 <gsm_set_ftp_download_file_name+0x48>)
     b8e:	2132      	movs	r1, #50	; 0x32
     b90:	4d0a      	ldr	r5, [pc, #40]	; (bbc <gsm_set_ftp_download_file_name+0x4c>)
     b92:	0020      	movs	r0, r4
     b94:	47a8      	blx	r5
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,3000,0,NULL);
     b96:	2300      	movs	r3, #0
     b98:	4d09      	ldr	r5, [pc, #36]	; (bc0 <gsm_set_ftp_download_file_name+0x50>)
     b9a:	9300      	str	r3, [sp, #0]
     b9c:	4a09      	ldr	r2, [pc, #36]	; (bc4 <gsm_set_ftp_download_file_name+0x54>)
     b9e:	490a      	ldr	r1, [pc, #40]	; (bc8 <gsm_set_ftp_download_file_name+0x58>)
     ba0:	0020      	movs	r0, r4
     ba2:	47a8      	blx	r5
	free(cmdx);
     ba4:	4b09      	ldr	r3, [pc, #36]	; (bcc <gsm_set_ftp_download_file_name+0x5c>)
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,3000,0,NULL);
     ba6:	0005      	movs	r5, r0
	free(cmdx);
     ba8:	0020      	movs	r0, r4
     baa:	4798      	blx	r3
	return err;
}
     bac:	0028      	movs	r0, r5
     bae:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     bb0:	0000916d 	.word	0x0000916d
     bb4:	0000924b 	.word	0x0000924b
     bb8:	0000a03c 	.word	0x0000a03c
     bbc:	000093ed 	.word	0x000093ed
     bc0:	00000305 	.word	0x00000305
     bc4:	00000bb8 	.word	0x00000bb8
     bc8:	00009dc6 	.word	0x00009dc6
     bcc:	00009201 	.word	0x00009201

00000bd0 <gsm_set_ftp_download_file_path>:

enum gsm_error gsm_set_ftp_download_file_path(char *path)
{
     bd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 50;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     bd2:	4b0f      	ldr	r3, [pc, #60]	; (c10 <gsm_set_ftp_download_file_path+0x40>)
{
     bd4:	0006      	movs	r6, r0
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
     bd6:	2101      	movs	r1, #1
     bd8:	2032      	movs	r0, #50	; 0x32
     bda:	4798      	blx	r3
     bdc:	0004      	movs	r4, r0
	//buffer created???
	if (cmdx == NULL)
	{
		return 0;
     bde:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
     be0:	d014      	beq.n	c0c <gsm_set_ftp_download_file_path+0x3c>
	}
	memset(cmdx, '\0', MAX_BUFFER);
     be2:	2232      	movs	r2, #50	; 0x32
     be4:	2100      	movs	r1, #0
     be6:	4b0b      	ldr	r3, [pc, #44]	; (c14 <gsm_set_ftp_download_file_path+0x44>)
     be8:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+FTPGETPATH=\"%s\"\r",path);
     bea:	0033      	movs	r3, r6
     bec:	4a0a      	ldr	r2, [pc, #40]	; (c18 <gsm_set_ftp_download_file_path+0x48>)
     bee:	2132      	movs	r1, #50	; 0x32
     bf0:	4d0a      	ldr	r5, [pc, #40]	; (c1c <gsm_set_ftp_download_file_path+0x4c>)
     bf2:	0020      	movs	r0, r4
     bf4:	47a8      	blx	r5
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,3000,0,NULL);
     bf6:	2300      	movs	r3, #0
     bf8:	4d09      	ldr	r5, [pc, #36]	; (c20 <gsm_set_ftp_download_file_path+0x50>)
     bfa:	9300      	str	r3, [sp, #0]
     bfc:	4a09      	ldr	r2, [pc, #36]	; (c24 <gsm_set_ftp_download_file_path+0x54>)
     bfe:	490a      	ldr	r1, [pc, #40]	; (c28 <gsm_set_ftp_download_file_path+0x58>)
     c00:	0020      	movs	r0, r4
     c02:	47a8      	blx	r5
	free(cmdx);
     c04:	4b09      	ldr	r3, [pc, #36]	; (c2c <gsm_set_ftp_download_file_path+0x5c>)
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,3000,0,NULL);
     c06:	0005      	movs	r5, r0
	free(cmdx);
     c08:	0020      	movs	r0, r4
     c0a:	4798      	blx	r3
	return err;
}
     c0c:	0028      	movs	r0, r5
     c0e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     c10:	0000916d 	.word	0x0000916d
     c14:	0000924b 	.word	0x0000924b
     c18:	0000a050 	.word	0x0000a050
     c1c:	000093ed 	.word	0x000093ed
     c20:	00000305 	.word	0x00000305
     c24:	00000bb8 	.word	0x00000bb8
     c28:	00009dc6 	.word	0x00009dc6
     c2c:	00009201 	.word	0x00009201

00000c30 <gsm_get_the_size_of_specified_file_in_ftp_server>:


enum gsm_error gsm_get_the_size_of_specified_file_in_ftp_server(uint32_t *file_size)
{
     c30:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum gsm_error err;
	
	err = gsm_send_at_command((const char*)("AT+FTPSIZE\r"), (const char*)"+FTPSIZE: 1,",76000,0,NULL);
     c32:	2500      	movs	r5, #0
{
     c34:	b087      	sub	sp, #28
     c36:	9002      	str	r0, [sp, #8]
	err = gsm_send_at_command((const char*)("AT+FTPSIZE\r"), (const char*)"+FTPSIZE: 1,",76000,0,NULL);
     c38:	002b      	movs	r3, r5
     c3a:	4a4a      	ldr	r2, [pc, #296]	; (d64 <gsm_get_the_size_of_specified_file_in_ftp_server+0x134>)
     c3c:	494a      	ldr	r1, [pc, #296]	; (d68 <gsm_get_the_size_of_specified_file_in_ftp_server+0x138>)
     c3e:	4c4b      	ldr	r4, [pc, #300]	; (d6c <gsm_get_the_size_of_specified_file_in_ftp_server+0x13c>)
     c40:	9500      	str	r5, [sp, #0]
     c42:	484b      	ldr	r0, [pc, #300]	; (d70 <gsm_get_the_size_of_specified_file_in_ftp_server+0x140>)
     c44:	47a0      	blx	r4
	
	const uint8_t MAX_BUFFER = 50;
	char *aDataBuffer = (char*) calloc(MAX_BUFFER,sizeof(char));
     c46:	2101      	movs	r1, #1
	err = gsm_send_at_command((const char*)("AT+FTPSIZE\r"), (const char*)"+FTPSIZE: 1,",76000,0,NULL);
     c48:	0004      	movs	r4, r0
	char *aDataBuffer = (char*) calloc(MAX_BUFFER,sizeof(char));
     c4a:	4b4a      	ldr	r3, [pc, #296]	; (d74 <gsm_get_the_size_of_specified_file_in_ftp_server+0x144>)
     c4c:	2032      	movs	r0, #50	; 0x32
     c4e:	4798      	blx	r3
     c50:	0007      	movs	r7, r0
	//buffer created???
	if (aDataBuffer == NULL)
     c52:	42a8      	cmp	r0, r5
     c54:	d100      	bne.n	c58 <gsm_get_the_size_of_specified_file_in_ftp_server+0x28>
     c56:	e083      	b.n	d60 <gsm_get_the_size_of_specified_file_in_ftp_server+0x130>
	{
		return 0;
	}
	memset(aDataBuffer, '\0', MAX_BUFFER);
     c58:	2232      	movs	r2, #50	; 0x32
     c5a:	0029      	movs	r1, r5
     c5c:	4b46      	ldr	r3, [pc, #280]	; (d78 <gsm_get_the_size_of_specified_file_in_ftp_server+0x148>)
     c5e:	4798      	blx	r3
	
	if (err == GSM_ERROR_NONE)
     c60:	42ac      	cmp	r4, r5
     c62:	d136      	bne.n	cd2 <gsm_get_the_size_of_specified_file_in_ftp_server+0xa2>
	{
		if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
     c64:	4b45      	ldr	r3, [pc, #276]	; (d7c <gsm_get_the_size_of_specified_file_in_ftp_server+0x14c>)
     c66:	2101      	movs	r1, #1
     c68:	6818      	ldr	r0, [r3, #0]
     c6a:	4b45      	ldr	r3, [pc, #276]	; (d80 <gsm_get_the_size_of_specified_file_in_ftp_server+0x150>)
     c6c:	4798      	blx	r3
     c6e:	42a8      	cmp	r0, r5
     c70:	d103      	bne.n	c7a <gsm_get_the_size_of_specified_file_in_ftp_server+0x4a>
		{
			return GSM_ERROR_OPERATION_IN_PROGRESS;
     c72:	2402      	movs	r4, #2
	
	free(aDataBuffer);
	
	return err;
	
}
     c74:	0020      	movs	r0, r4
     c76:	b007      	add	sp, #28
     c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		vTaskDelay(100/portTICK_PERIOD_MS);
     c7a:	4b42      	ldr	r3, [pc, #264]	; (d84 <gsm_get_the_size_of_specified_file_in_ftp_server+0x154>)
     c7c:	2064      	movs	r0, #100	; 0x64
     c7e:	4798      	blx	r3
		char u8tTemp_Char=0;
     c80:	230f      	movs	r3, #15
     c82:	aa02      	add	r2, sp, #8
     c84:	189b      	adds	r3, r3, r2
     c86:	701c      	strb	r4, [r3, #0]
     c88:	003b      	movs	r3, r7
     c8a:	003d      	movs	r5, r7
     c8c:	3332      	adds	r3, #50	; 0x32
     c8e:	9303      	str	r3, [sp, #12]
			xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
     c90:	260f      	movs	r6, #15
     c92:	ab02      	add	r3, sp, #8
     c94:	18f6      	adds	r6, r6, r3
     c96:	4b3c      	ldr	r3, [pc, #240]	; (d88 <gsm_get_the_size_of_specified_file_in_ftp_server+0x158>)
     c98:	2200      	movs	r2, #0
     c9a:	6818      	ldr	r0, [r3, #0]
     c9c:	0031      	movs	r1, r6
     c9e:	4b3b      	ldr	r3, [pc, #236]	; (d8c <gsm_get_the_size_of_specified_file_in_ftp_server+0x15c>)
     ca0:	4798      	blx	r3
			if(xStatus!=errQUEUE_EMPTY)
     ca2:	2800      	cmp	r0, #0
     ca4:	d119      	bne.n	cda <gsm_get_the_size_of_specified_file_in_ftp_server+0xaa>
		ptrfilesize = strtok(aDataBuffer,",");
     ca6:	493a      	ldr	r1, [pc, #232]	; (d90 <gsm_get_the_size_of_specified_file_in_ftp_server+0x160>)
     ca8:	0038      	movs	r0, r7
     caa:	4e3a      	ldr	r6, [pc, #232]	; (d94 <gsm_get_the_size_of_specified_file_in_ftp_server+0x164>)
     cac:	47b0      	blx	r6
		uint16_t size_err_code = atoi(ptrfilesize);
     cae:	4d3a      	ldr	r5, [pc, #232]	; (d98 <gsm_get_the_size_of_specified_file_in_ftp_server+0x168>)
     cb0:	47a8      	blx	r5
		if (size_err_code == 0)
     cb2:	b283      	uxth	r3, r0
     cb4:	2b00      	cmp	r3, #0
     cb6:	d119      	bne.n	cec <gsm_get_the_size_of_specified_file_in_ftp_server+0xbc>
			ptrfilesize = strtok(NULL,",");
     cb8:	0018      	movs	r0, r3
     cba:	4935      	ldr	r1, [pc, #212]	; (d90 <gsm_get_the_size_of_specified_file_in_ftp_server+0x160>)
     cbc:	47b0      	blx	r6
			*file_size = atoi(ptrfilesize);
     cbe:	47a8      	blx	r5
     cc0:	9b02      	ldr	r3, [sp, #8]
     cc2:	6018      	str	r0, [r3, #0]
		xSemaphoreGive(gsm_busy_semaphore);
     cc4:	2300      	movs	r3, #0
     cc6:	482d      	ldr	r0, [pc, #180]	; (d7c <gsm_get_the_size_of_specified_file_in_ftp_server+0x14c>)
     cc8:	001a      	movs	r2, r3
     cca:	0019      	movs	r1, r3
     ccc:	6800      	ldr	r0, [r0, #0]
     cce:	4d33      	ldr	r5, [pc, #204]	; (d9c <gsm_get_the_size_of_specified_file_in_ftp_server+0x16c>)
     cd0:	47a8      	blx	r5
	free(aDataBuffer);
     cd2:	0038      	movs	r0, r7
     cd4:	4b32      	ldr	r3, [pc, #200]	; (da0 <gsm_get_the_size_of_specified_file_in_ftp_server+0x170>)
     cd6:	4798      	blx	r3
	return err;
     cd8:	e7cc      	b.n	c74 <gsm_get_the_size_of_specified_file_in_ftp_server+0x44>
				if (u8tTemp_Char == '\r')
     cda:	7833      	ldrb	r3, [r6, #0]
     cdc:	2b0d      	cmp	r3, #13
     cde:	d0e2      	beq.n	ca6 <gsm_get_the_size_of_specified_file_in_ftp_server+0x76>
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
     ce0:	702b      	strb	r3, [r5, #0]
		for (uint8_t i=0;i<50;i++)
     ce2:	9b03      	ldr	r3, [sp, #12]
     ce4:	3501      	adds	r5, #1
     ce6:	429d      	cmp	r5, r3
     ce8:	d1d2      	bne.n	c90 <gsm_get_the_size_of_specified_file_in_ftp_server+0x60>
     cea:	e7dc      	b.n	ca6 <gsm_get_the_size_of_specified_file_in_ftp_server+0x76>
			*file_size = 0;
     cec:	2300      	movs	r3, #0
     cee:	9a02      	ldr	r2, [sp, #8]
			switch(size_err_code)
     cf0:	b280      	uxth	r0, r0
     cf2:	383d      	subs	r0, #61	; 0x3d
			*file_size = 0;
     cf4:	6013      	str	r3, [r2, #0]
			switch(size_err_code)
     cf6:	2819      	cmp	r0, #25
     cf8:	d82e      	bhi.n	d58 <gsm_get_the_size_of_specified_file_in_ftp_server+0x128>
     cfa:	f007 ff47 	bl	8b8c <__gnu_thumb1_case_uqi>
     cfe:	0d2f      	.short	0x0d2f
     d00:	1513110f 	.word	0x1513110f
     d04:	172d2d2d 	.word	0x172d2d2d
     d08:	1f1d1b19 	.word	0x1f1d1b19
     d0c:	27252321 	.word	0x27252321
     d10:	2d2d2d29 	.word	0x2d2d2d29
     d14:	2b2d2d2d 	.word	0x2b2d2d2d
				err = GSM_FTP_DNS_ERROR;
     d18:	243e      	movs	r4, #62	; 0x3e
     d1a:	e7d3      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_CONNECT_ERROR;
     d1c:	243f      	movs	r4, #63	; 0x3f
				break;
     d1e:	e7d1      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_TIMEOUT_ERROR;
     d20:	2440      	movs	r4, #64	; 0x40
				break;
     d22:	e7cf      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_SERVER_ERROR;
     d24:	2441      	movs	r4, #65	; 0x41
				break;
     d26:	e7cd      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_OPERATION_NOT_ALLOW;
     d28:	2442      	movs	r4, #66	; 0x42
				break;
     d2a:	e7cb      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_REPLAY_ERROR;
     d2c:	2446      	movs	r4, #70	; 0x46
				break;
     d2e:	e7c9      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_USER_ERROR;
     d30:	2447      	movs	r4, #71	; 0x47
				break;
     d32:	e7c7      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_PASSWORD_ERROR;
     d34:	2448      	movs	r4, #72	; 0x48
				break;
     d36:	e7c5      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_TYPE_ERROR;
     d38:	2449      	movs	r4, #73	; 0x49
				break;
     d3a:	e7c3      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_REST_ERROR;
     d3c:	244a      	movs	r4, #74	; 0x4a
				break;
     d3e:	e7c1      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_PASSIVE_ERROR;
     d40:	244b      	movs	r4, #75	; 0x4b
				break;
     d42:	e7bf      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_ACTIVE_ERROR;
     d44:	244c      	movs	r4, #76	; 0x4c
				break;
     d46:	e7bd      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_OPERATE_ERROR;
     d48:	244d      	movs	r4, #77	; 0x4d
				break;
     d4a:	e7bb      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_UPLOAD_ERROR;
     d4c:	244e      	movs	r4, #78	; 0x4e
				break;
     d4e:	e7b9      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_DOWNLOAD_ERROR;
     d50:	244f      	movs	r4, #79	; 0x4f
				break;
     d52:	e7b7      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_MANUAL_QUIT_ERROR;
     d54:	2456      	movs	r4, #86	; 0x56
				break;
     d56:	e7b5      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err = GSM_FTP_UNKNOWN_ERROR;
     d58:	245a      	movs	r4, #90	; 0x5a
				break;
     d5a:	e7b3      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
				err =  GSM_FTP_NET_ERROR;
     d5c:	243d      	movs	r4, #61	; 0x3d
     d5e:	e7b1      	b.n	cc4 <gsm_get_the_size_of_specified_file_in_ftp_server+0x94>
		return 0;
     d60:	0004      	movs	r4, r0
     d62:	e787      	b.n	c74 <gsm_get_the_size_of_specified_file_in_ftp_server+0x44>
     d64:	000128e0 	.word	0x000128e0
     d68:	00009f4d 	.word	0x00009f4d
     d6c:	00000305 	.word	0x00000305
     d70:	00009f5a 	.word	0x00009f5a
     d74:	0000916d 	.word	0x0000916d
     d78:	0000924b 	.word	0x0000924b
     d7c:	20000310 	.word	0x20000310
     d80:	00003695 	.word	0x00003695
     d84:	00003d99 	.word	0x00003d99
     d88:	20000318 	.word	0x20000318
     d8c:	00003569 	.word	0x00003569
     d90:	00009f58 	.word	0x00009f58
     d94:	00009501 	.word	0x00009501
     d98:	00009161 	.word	0x00009161
     d9c:	00003355 	.word	0x00003355
     da0:	00009201 	.word	0x00009201

00000da4 <gsm_open_ftp_get_session>:

enum gsm_error gsm_open_ftp_get_session(void)
{
	return gsm_send_at_command((const char*)"AT+FTPGET=1\r", (const char*)"+FTPGET: 1,1",76000,0,NULL);
     da4:	2300      	movs	r3, #0
{
     da6:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)"AT+FTPGET=1\r", (const char*)"+FTPGET: 1,1",76000,0,NULL);
     da8:	4a03      	ldr	r2, [pc, #12]	; (db8 <gsm_open_ftp_get_session+0x14>)
     daa:	9300      	str	r3, [sp, #0]
     dac:	4903      	ldr	r1, [pc, #12]	; (dbc <gsm_open_ftp_get_session+0x18>)
     dae:	4c04      	ldr	r4, [pc, #16]	; (dc0 <gsm_open_ftp_get_session+0x1c>)
     db0:	4804      	ldr	r0, [pc, #16]	; (dc4 <gsm_open_ftp_get_session+0x20>)
     db2:	47a0      	blx	r4
}
     db4:	bd16      	pop	{r1, r2, r4, pc}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	000128e0 	.word	0x000128e0
     dbc:	00009f92 	.word	0x00009f92
     dc0:	00000305 	.word	0x00000305
     dc4:	00009f9f 	.word	0x00009f9f

00000dc8 <gsm_read_ftp_download_data>:

enum gsm_error gsm_read_ftp_download_data(uint16_t size_to_download, char *recv_data,uint16_t *downloaded_data_size)
{	
     dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dca:	0004      	movs	r4, r0
	enum gsm_error err;
	
	char ftpget[20] = {0};
	snprintf(ftpget,20,"AT+FTPGET=2,%d\r",size_to_download);

	err = gsm_send_at_command((const char*)(ftpget), (const char*)"+FTPGET: ",76000,0,NULL);
     dcc:	2500      	movs	r5, #0
{	
     dce:	b08d      	sub	sp, #52	; 0x34
     dd0:	9105      	str	r1, [sp, #20]
     dd2:	9203      	str	r2, [sp, #12]
	char ftpget[20] = {0};
     dd4:	2100      	movs	r1, #0
     dd6:	2214      	movs	r2, #20
     dd8:	a807      	add	r0, sp, #28
     dda:	4e52      	ldr	r6, [pc, #328]	; (f24 <gsm_read_ftp_download_data+0x15c>)
     ddc:	47b0      	blx	r6
	snprintf(ftpget,20,"AT+FTPGET=2,%d\r",size_to_download);
     dde:	0023      	movs	r3, r4
     de0:	4a51      	ldr	r2, [pc, #324]	; (f28 <gsm_read_ftp_download_data+0x160>)
     de2:	2114      	movs	r1, #20
     de4:	4c51      	ldr	r4, [pc, #324]	; (f2c <gsm_read_ftp_download_data+0x164>)
     de6:	a807      	add	r0, sp, #28
     de8:	47a0      	blx	r4
	err = gsm_send_at_command((const char*)(ftpget), (const char*)"+FTPGET: ",76000,0,NULL);
     dea:	002b      	movs	r3, r5
     dec:	4a50      	ldr	r2, [pc, #320]	; (f30 <gsm_read_ftp_download_data+0x168>)
     dee:	4951      	ldr	r1, [pc, #324]	; (f34 <gsm_read_ftp_download_data+0x16c>)
     df0:	4c51      	ldr	r4, [pc, #324]	; (f38 <gsm_read_ftp_download_data+0x170>)
     df2:	9500      	str	r5, [sp, #0]
     df4:	a807      	add	r0, sp, #28
     df6:	47a0      	blx	r4
	
	const uint8_t MAX_BUFFER = 50;
	char *aDataBuffer = (char*) calloc(MAX_BUFFER,sizeof(char));
     df8:	2101      	movs	r1, #1
	err = gsm_send_at_command((const char*)(ftpget), (const char*)"+FTPGET: ",76000,0,NULL);
     dfa:	0004      	movs	r4, r0
	char *aDataBuffer = (char*) calloc(MAX_BUFFER,sizeof(char));
     dfc:	4b4f      	ldr	r3, [pc, #316]	; (f3c <gsm_read_ftp_download_data+0x174>)
     dfe:	2032      	movs	r0, #50	; 0x32
     e00:	4798      	blx	r3
     e02:	9002      	str	r0, [sp, #8]
	//buffer created???
	if (aDataBuffer == NULL)
     e04:	42a8      	cmp	r0, r5
     e06:	d100      	bne.n	e0a <gsm_read_ftp_download_data+0x42>
     e08:	e089      	b.n	f1e <gsm_read_ftp_download_data+0x156>
	{
		return 0;
	}
	memset(aDataBuffer, '\0', MAX_BUFFER);
     e0a:	2232      	movs	r2, #50	; 0x32
     e0c:	0029      	movs	r1, r5
     e0e:	47b0      	blx	r6
	
	if (err == GSM_ERROR_NONE)
     e10:	42ac      	cmp	r4, r5
     e12:	d13f      	bne.n	e94 <gsm_read_ftp_download_data+0xcc>
	{
		if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE)
     e14:	4b4a      	ldr	r3, [pc, #296]	; (f40 <gsm_read_ftp_download_data+0x178>)
     e16:	2101      	movs	r1, #1
     e18:	6818      	ldr	r0, [r3, #0]
     e1a:	4b4a      	ldr	r3, [pc, #296]	; (f44 <gsm_read_ftp_download_data+0x17c>)
     e1c:	4798      	blx	r3
     e1e:	42a8      	cmp	r0, r5
     e20:	d103      	bne.n	e2a <gsm_read_ftp_download_data+0x62>
		{
			return GSM_ERROR_OPERATION_IN_PROGRESS;
     e22:	2402      	movs	r4, #2
	}
	
	free(aDataBuffer);
	return err;

}
     e24:	0020      	movs	r0, r4
     e26:	b00d      	add	sp, #52	; 0x34
     e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		char u8tTemp_Char=0;
     e2a:	230b      	movs	r3, #11
     e2c:	aa04      	add	r2, sp, #16
     e2e:	9d02      	ldr	r5, [sp, #8]
     e30:	189b      	adds	r3, r3, r2
     e32:	701c      	strb	r4, [r3, #0]
     e34:	002b      	movs	r3, r5
     e36:	3332      	adds	r3, #50	; 0x32
     e38:	9304      	str	r3, [sp, #16]
			xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 10);
     e3a:	240b      	movs	r4, #11
     e3c:	ab04      	add	r3, sp, #16
     e3e:	4e42      	ldr	r6, [pc, #264]	; (f48 <gsm_read_ftp_download_data+0x180>)
     e40:	18e4      	adds	r4, r4, r3
     e42:	220a      	movs	r2, #10
     e44:	0021      	movs	r1, r4
     e46:	6830      	ldr	r0, [r6, #0]
     e48:	4f40      	ldr	r7, [pc, #256]	; (f4c <gsm_read_ftp_download_data+0x184>)
     e4a:	47b8      	blx	r7
			if(xStatus!=errQUEUE_EMPTY)
     e4c:	2800      	cmp	r0, #0
     e4e:	d006      	beq.n	e5e <gsm_read_ftp_download_data+0x96>
				if (u8tTemp_Char == '\r')
     e50:	7823      	ldrb	r3, [r4, #0]
     e52:	2b0d      	cmp	r3, #13
     e54:	d122      	bne.n	e9c <gsm_read_ftp_download_data+0xd4>
					xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 10); //remove \n fom buffer				
     e56:	220a      	movs	r2, #10
     e58:	0021      	movs	r1, r4
     e5a:	6830      	ldr	r0, [r6, #0]
     e5c:	47b8      	blx	r7
		ptrtkn = strtok(aDataBuffer,",");
     e5e:	4f3c      	ldr	r7, [pc, #240]	; (f50 <gsm_read_ftp_download_data+0x188>)
     e60:	9802      	ldr	r0, [sp, #8]
     e62:	0039      	movs	r1, r7
     e64:	4e3b      	ldr	r6, [pc, #236]	; (f54 <gsm_read_ftp_download_data+0x18c>)
     e66:	47b0      	blx	r6
		uint16_t err_code = atoi(ptrtkn);
     e68:	4d3b      	ldr	r5, [pc, #236]	; (f58 <gsm_read_ftp_download_data+0x190>)
     e6a:	47a8      	blx	r5
     e6c:	b280      	uxth	r0, r0
		if (err_code == 1)
     e6e:	2801      	cmp	r0, #1
     e70:	d11f      	bne.n	eb2 <gsm_read_ftp_download_data+0xea>
			ptrtkn = strtok(NULL,",");
     e72:	0039      	movs	r1, r7
     e74:	2000      	movs	r0, #0
     e76:	47b0      	blx	r6
			if (atoi(ptrtkn) == 1)
     e78:	47a8      	blx	r5
     e7a:	2801      	cmp	r0, #1
     e7c:	d114      	bne.n	ea8 <gsm_read_ftp_download_data+0xe0>
				*downloaded_data_size = 0;
     e7e:	2300      	movs	r3, #0
				err = GSM_FTP_DOWNLOAD_DATA_AVAILABLE;
     e80:	2419      	movs	r4, #25
				*downloaded_data_size = 0;
     e82:	9a03      	ldr	r2, [sp, #12]
     e84:	8013      	strh	r3, [r2, #0]
		xSemaphoreGive(gsm_busy_semaphore);
     e86:	2300      	movs	r3, #0
     e88:	482d      	ldr	r0, [pc, #180]	; (f40 <gsm_read_ftp_download_data+0x178>)
     e8a:	001a      	movs	r2, r3
     e8c:	0019      	movs	r1, r3
     e8e:	6800      	ldr	r0, [r0, #0]
     e90:	4d32      	ldr	r5, [pc, #200]	; (f5c <gsm_read_ftp_download_data+0x194>)
     e92:	47a8      	blx	r5
	free(aDataBuffer);
     e94:	9802      	ldr	r0, [sp, #8]
     e96:	4b32      	ldr	r3, [pc, #200]	; (f60 <gsm_read_ftp_download_data+0x198>)
     e98:	4798      	blx	r3
	return err;
     e9a:	e7c3      	b.n	e24 <gsm_read_ftp_download_data+0x5c>
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
     e9c:	702b      	strb	r3, [r5, #0]
		for (uint8_t i=0;i<50;i++)
     e9e:	9b04      	ldr	r3, [sp, #16]
     ea0:	3501      	adds	r5, #1
     ea2:	42ab      	cmp	r3, r5
     ea4:	d1c9      	bne.n	e3a <gsm_read_ftp_download_data+0x72>
     ea6:	e7da      	b.n	e5e <gsm_read_ftp_download_data+0x96>
				*downloaded_data_size = 0;
     ea8:	2300      	movs	r3, #0
     eaa:	9a03      	ldr	r2, [sp, #12]
     eac:	8013      	strh	r3, [r2, #0]
						err = GSM_FTP_DOWNLOAD_FAILED;
     eae:	2417      	movs	r4, #23
     eb0:	e7e9      	b.n	e86 <gsm_read_ftp_download_data+0xbe>
		else if (err_code == 2)
     eb2:	2802      	cmp	r0, #2
     eb4:	d1f8      	bne.n	ea8 <gsm_read_ftp_download_data+0xe0>
			ptrtkn = strtok(NULL,",");
     eb6:	0039      	movs	r1, r7
     eb8:	2000      	movs	r0, #0
     eba:	47b0      	blx	r6
			uint16_t recv_data_size = atoi(ptrtkn);
     ebc:	47a8      	blx	r5
				*downloaded_data_size = 0;
     ebe:	9b03      	ldr	r3, [sp, #12]
			uint16_t recv_data_size = atoi(ptrtkn);
     ec0:	b287      	uxth	r7, r0
				*downloaded_data_size = 0;
     ec2:	801f      	strh	r7, [r3, #0]
			if (recv_data_size == 0)
     ec4:	2f00      	cmp	r7, #0
     ec6:	d101      	bne.n	ecc <gsm_read_ftp_download_data+0x104>
				err = GSM_FTP_DOWNLOAD_NO_DATA_AVAILABLE_IN_BUFFER;
     ec8:	2418      	movs	r4, #24
     eca:	e7dc      	b.n	e86 <gsm_read_ftp_download_data+0xbe>
				xTimerChangePeriod(gsm_cmd_timeout_timer,((5*1000)/portTICK_PERIOD_MS),portMAX_DELAY);	
     ecc:	2301      	movs	r3, #1
     ece:	4d25      	ldr	r5, [pc, #148]	; (f64 <gsm_read_ftp_download_data+0x19c>)
     ed0:	425b      	negs	r3, r3
     ed2:	9300      	str	r3, [sp, #0]
     ed4:	4a24      	ldr	r2, [pc, #144]	; (f68 <gsm_read_ftp_download_data+0x1a0>)
     ed6:	2300      	movs	r3, #0
     ed8:	2104      	movs	r1, #4
     eda:	6828      	ldr	r0, [r5, #0]
     edc:	4e23      	ldr	r6, [pc, #140]	; (f6c <gsm_read_ftp_download_data+0x1a4>)
     ede:	47b0      	blx	r6
				u8tTemp_Char=0;
     ee0:	2300      	movs	r3, #0
     ee2:	7023      	strb	r3, [r4, #0]
     ee4:	001c      	movs	r4, r3
     ee6:	b2e3      	uxtb	r3, r4
     ee8:	9303      	str	r3, [sp, #12]
					if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
     eea:	6828      	ldr	r0, [r5, #0]
     eec:	4b20      	ldr	r3, [pc, #128]	; (f70 <gsm_read_ftp_download_data+0x1a8>)
     eee:	4798      	blx	r3
     ef0:	2800      	cmp	r0, #0
     ef2:	d0dc      	beq.n	eae <gsm_read_ftp_download_data+0xe6>
						if (u8tRx_Index<recv_data_size)
     ef4:	9b03      	ldr	r3, [sp, #12]
     ef6:	429f      	cmp	r7, r3
     ef8:	d90f      	bls.n	f1a <gsm_read_ftp_download_data+0x152>
							xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
     efa:	260b      	movs	r6, #11
     efc:	ab04      	add	r3, sp, #16
     efe:	18f6      	adds	r6, r6, r3
     f00:	4b11      	ldr	r3, [pc, #68]	; (f48 <gsm_read_ftp_download_data+0x180>)
     f02:	2200      	movs	r2, #0
     f04:	6818      	ldr	r0, [r3, #0]
     f06:	0031      	movs	r1, r6
     f08:	4b10      	ldr	r3, [pc, #64]	; (f4c <gsm_read_ftp_download_data+0x184>)
     f0a:	4798      	blx	r3
							if(xStatus!=errQUEUE_EMPTY)
     f0c:	2800      	cmp	r0, #0
     f0e:	d0ec      	beq.n	eea <gsm_read_ftp_download_data+0x122>
								*recv_data=u8tTemp_Char;
     f10:	7833      	ldrb	r3, [r6, #0]
     f12:	9a05      	ldr	r2, [sp, #20]
     f14:	5513      	strb	r3, [r2, r4]
     f16:	3401      	adds	r4, #1
     f18:	e7e5      	b.n	ee6 <gsm_read_ftp_download_data+0x11e>
							err = GSM_FTP_DOWNLOAD_SUCCESS;
     f1a:	2416      	movs	r4, #22
     f1c:	e7b3      	b.n	e86 <gsm_read_ftp_download_data+0xbe>
		return 0;
     f1e:	9c02      	ldr	r4, [sp, #8]
     f20:	e780      	b.n	e24 <gsm_read_ftp_download_data+0x5c>
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	0000924b 	.word	0x0000924b
     f28:	00009ff8 	.word	0x00009ff8
     f2c:	000093ed 	.word	0x000093ed
     f30:	000128e0 	.word	0x000128e0
     f34:	0000a008 	.word	0x0000a008
     f38:	00000305 	.word	0x00000305
     f3c:	0000916d 	.word	0x0000916d
     f40:	20000310 	.word	0x20000310
     f44:	00003695 	.word	0x00003695
     f48:	20000318 	.word	0x20000318
     f4c:	00003569 	.word	0x00003569
     f50:	00009f58 	.word	0x00009f58
     f54:	00009501 	.word	0x00009501
     f58:	00009161 	.word	0x00009161
     f5c:	00003355 	.word	0x00003355
     f60:	00009201 	.word	0x00009201
     f64:	20000314 	.word	0x20000314
     f68:	00001388 	.word	0x00001388
     f6c:	00004295 	.word	0x00004295
     f70:	0000450d 	.word	0x0000450d

00000f74 <gsm_config_gprs>:

enum gsm_error gsm_config_gprs(void)
{
     f74:	b510      	push	{r4, lr}
	if (gsm_configure_contype_gprs() == GSM_ERROR_NONE)
     f76:	4b05      	ldr	r3, [pc, #20]	; (f8c <gsm_config_gprs+0x18>)
     f78:	4798      	blx	r3
     f7a:	2800      	cmp	r0, #0
     f7c:	d103      	bne.n	f86 <gsm_config_gprs+0x12>
	{
		if (gsm_configure_bearer_apn() == GSM_ERROR_NONE)
     f7e:	4b04      	ldr	r3, [pc, #16]	; (f90 <gsm_config_gprs+0x1c>)
     f80:	4798      	blx	r3
     f82:	2800      	cmp	r0, #0
     f84:	d000      	beq.n	f88 <gsm_config_gprs+0x14>
		{
			return GSM_ERROR_NONE;
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
     f86:	2010      	movs	r0, #16
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
	}
}
     f88:	bd10      	pop	{r4, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	00000805 	.word	0x00000805
     f90:	00000829 	.word	0x00000829

00000f94 <gsm_start_gprs>:

enum gsm_error gsm_start_gprs(void)
{
     f94:	b510      	push	{r4, lr}
	if (gsm_query_gprs_contex() == GSM_GPRS_BEARER_IS_CLOSED)
     f96:	4b05      	ldr	r3, [pc, #20]	; (fac <gsm_start_gprs+0x18>)
     f98:	4798      	blx	r3
     f9a:	2814      	cmp	r0, #20
     f9c:	d103      	bne.n	fa6 <gsm_start_gprs+0x12>
	{
		if (gsm_open_gprs_contex() == GSM_ERROR_NONE)
     f9e:	4b04      	ldr	r3, [pc, #16]	; (fb0 <gsm_start_gprs+0x1c>)
     fa0:	4798      	blx	r3
     fa2:	2800      	cmp	r0, #0
     fa4:	d000      	beq.n	fa8 <gsm_start_gprs+0x14>
		{
			return GSM_ERROR_NONE;
		}
		else
		{
			return GSM_ERROR_CONFIG_FAILED;
     fa6:	2010      	movs	r0, #16
	}
	else
	{
		return GSM_ERROR_CONFIG_FAILED;
	}
}
     fa8:	bd10      	pop	{r4, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	0000096d 	.word	0x0000096d
     fb0:	00000a09 	.word	0x00000a09

00000fb4 <gsm_stop_gprs>:

enum gsm_error gsm_stop_gprs(void)
{
	if (gsm_query_gprs_contex() == GSM_GPRS_BEARER_IS_CLOSED)
     fb4:	4b04      	ldr	r3, [pc, #16]	; (fc8 <gsm_stop_gprs+0x14>)
{
     fb6:	b510      	push	{r4, lr}
	if (gsm_query_gprs_contex() == GSM_GPRS_BEARER_IS_CLOSED)
     fb8:	4798      	blx	r3
     fba:	0003      	movs	r3, r0
	{
		return GSM_ERROR_NONE;
     fbc:	2000      	movs	r0, #0
	if (gsm_query_gprs_contex() == GSM_GPRS_BEARER_IS_CLOSED)
     fbe:	2b14      	cmp	r3, #20
     fc0:	d001      	beq.n	fc6 <gsm_stop_gprs+0x12>
	}
	else
	{
		return gsm_close_gprs_contex();
     fc2:	4b02      	ldr	r3, [pc, #8]	; (fcc <gsm_stop_gprs+0x18>)
     fc4:	4798      	blx	r3
	}
}
     fc6:	bd10      	pop	{r4, pc}
     fc8:	0000096d 	.word	0x0000096d
     fcc:	00000a2d 	.word	0x00000a2d

00000fd0 <config_ftp>:

enum gsm_error config_ftp(char *address,char *username,char *password,char *filename,char *path)
{
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	001c      	movs	r4, r3
	if (gsm_set_ftp_server_address(address) == GSM_ERROR_NONE)
     fd4:	4b0d      	ldr	r3, [pc, #52]	; (100c <config_ftp+0x3c>)
{
     fd6:	000e      	movs	r6, r1
     fd8:	0015      	movs	r5, r2
	if (gsm_set_ftp_server_address(address) == GSM_ERROR_NONE)
     fda:	4798      	blx	r3
     fdc:	2800      	cmp	r0, #0
     fde:	d113      	bne.n	1008 <config_ftp+0x38>
	{
		if (gsm_set_ftp_user_name(username) == GSM_ERROR_NONE)
     fe0:	0030      	movs	r0, r6
     fe2:	4b0b      	ldr	r3, [pc, #44]	; (1010 <config_ftp+0x40>)
     fe4:	4798      	blx	r3
     fe6:	2800      	cmp	r0, #0
     fe8:	d10e      	bne.n	1008 <config_ftp+0x38>
		{
			if (gsm_set_ftp_user_password(password) == GSM_ERROR_NONE)
     fea:	0028      	movs	r0, r5
     fec:	4b09      	ldr	r3, [pc, #36]	; (1014 <config_ftp+0x44>)
     fee:	4798      	blx	r3
     ff0:	2800      	cmp	r0, #0
     ff2:	d109      	bne.n	1008 <config_ftp+0x38>
			{
				if (gsm_set_ftp_download_file_name(filename) == GSM_ERROR_NONE)
     ff4:	0020      	movs	r0, r4
     ff6:	4b08      	ldr	r3, [pc, #32]	; (1018 <config_ftp+0x48>)
     ff8:	4798      	blx	r3
     ffa:	2800      	cmp	r0, #0
     ffc:	d104      	bne.n	1008 <config_ftp+0x38>
				{
					if (gsm_set_ftp_download_file_path(path) == GSM_ERROR_NONE)
     ffe:	9804      	ldr	r0, [sp, #16]
    1000:	4b06      	ldr	r3, [pc, #24]	; (101c <config_ftp+0x4c>)
    1002:	4798      	blx	r3
    1004:	2800      	cmp	r0, #0
    1006:	d000      	beq.n	100a <config_ftp+0x3a>
					{
						return GSM_ERROR_NONE;
					}
					else
					{
						return GSM_FTP_ERROR;
    1008:	2015      	movs	r0, #21
	}
	else
	{
		return GSM_FTP_ERROR;
	}
    100a:	bd70      	pop	{r4, r5, r6, pc}
    100c:	00000a51 	.word	0x00000a51
    1010:	00000ab1 	.word	0x00000ab1
    1014:	00000b11 	.word	0x00000b11
    1018:	00000b71 	.word	0x00000b71
    101c:	00000bd1 	.word	0x00000bd1

00001020 <port_pin_set_output_level>:

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1020:	2200      	movs	r2, #0
{
    1022:	b510      	push	{r4, lr}
	uint8_t group_index = (gpio_pin / 32);
    1024:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    1026:	09c4      	lsrs	r4, r0, #7
    1028:	4294      	cmp	r4, r2
    102a:	d102      	bne.n	1032 <port_pin_set_output_level+0x12>
		return &(ports[port_index]->Group[group_index]);
    102c:	01da      	lsls	r2, r3, #7
    102e:	4b06      	ldr	r3, [pc, #24]	; (1048 <port_pin_set_output_level+0x28>)
    1030:	18d2      	adds	r2, r2, r3
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1032:	231f      	movs	r3, #31
    1034:	4018      	ands	r0, r3
    1036:	3b1e      	subs	r3, #30
    1038:	4083      	lsls	r3, r0
	if (level) {
    103a:	2900      	cmp	r1, #0
    103c:	d001      	beq.n	1042 <port_pin_set_output_level+0x22>
		port_base->OUTSET.reg = pin_mask;
    103e:	6193      	str	r3, [r2, #24]
	}
}
    1040:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
    1042:	6153      	str	r3, [r2, #20]
}
    1044:	e7fc      	b.n	1040 <port_pin_set_output_level+0x20>
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	41004400 	.word	0x41004400

0000104c <LCD_PWR_CONFIG>:
	config->powersave  = false;
    104c:	2300      	movs	r3, #0
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	command(LCD_ENTRYMODESET | _displaymode);
}

void LCD_PWR_CONFIG()
{
    104e:	b507      	push	{r0, r1, r2, lr}
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
    1050:	2201      	movs	r2, #1
    1052:	a901      	add	r1, sp, #4
    1054:	708b      	strb	r3, [r1, #2]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    1056:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
    1058:	2024      	movs	r0, #36	; 0x24
    105a:	4b02      	ldr	r3, [pc, #8]	; (1064 <LCD_PWR_CONFIG+0x18>)
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
    105c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
    105e:	4798      	blx	r3
}
    1060:	bd07      	pop	{r0, r1, r2, pc}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	00006fe1 	.word	0x00006fe1

00001068 <LCD_PWR_EN>:
		port_base->OUTSET.reg = pin_mask;
    1068:	2210      	movs	r2, #16
    106a:	4b01      	ldr	r3, [pc, #4]	; (1070 <LCD_PWR_EN+0x8>)
    106c:	601a      	str	r2, [r3, #0]

void LCD_PWR_EN()
{
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
}
    106e:	4770      	bx	lr
    1070:	41004498 	.word	0x41004498

00001074 <pulseEnable>:
}



void pulseEnable(void)
{
    1074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 	port_pin_set_output_level(_enable_pin, LOW);
    1076:	4f1e      	ldr	r7, [pc, #120]	; (10f0 <pulseEnable+0x7c>)
    1078:	4e1e      	ldr	r6, [pc, #120]	; (10f4 <pulseEnable+0x80>)
    107a:	7838      	ldrb	r0, [r7, #0]
    107c:	2100      	movs	r1, #0
    107e:	47b0      	blx	r6
 	delay_us(1);
    1080:	4b1d      	ldr	r3, [pc, #116]	; (10f8 <pulseEnable+0x84>)
    1082:	2000      	movs	r0, #0
    1084:	4798      	blx	r3
    1086:	2400      	movs	r4, #0
    1088:	0002      	movs	r2, r0
    108a:	0023      	movs	r3, r4
    108c:	2100      	movs	r1, #0
    108e:	481b      	ldr	r0, [pc, #108]	; (10fc <pulseEnable+0x88>)
    1090:	4d1b      	ldr	r5, [pc, #108]	; (1100 <pulseEnable+0x8c>)
    1092:	1880      	adds	r0, r0, r2
    1094:	4159      	adcs	r1, r3
    1096:	4a1b      	ldr	r2, [pc, #108]	; (1104 <pulseEnable+0x90>)
    1098:	2300      	movs	r3, #0
    109a:	47a8      	blx	r5
    109c:	4b1a      	ldr	r3, [pc, #104]	; (1108 <pulseEnable+0x94>)
    109e:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
    10a0:	7838      	ldrb	r0, [r7, #0]
    10a2:	2101      	movs	r1, #1
    10a4:	47b0      	blx	r6
 	delay_us(1);
    10a6:	0020      	movs	r0, r4
    10a8:	4b13      	ldr	r3, [pc, #76]	; (10f8 <pulseEnable+0x84>)
    10aa:	4798      	blx	r3
    10ac:	0023      	movs	r3, r4
    10ae:	0002      	movs	r2, r0
    10b0:	2100      	movs	r1, #0
    10b2:	4812      	ldr	r0, [pc, #72]	; (10fc <pulseEnable+0x88>)
    10b4:	4d12      	ldr	r5, [pc, #72]	; (1100 <pulseEnable+0x8c>)
    10b6:	1880      	adds	r0, r0, r2
    10b8:	4159      	adcs	r1, r3
    10ba:	4a12      	ldr	r2, [pc, #72]	; (1104 <pulseEnable+0x90>)
    10bc:	2300      	movs	r3, #0
    10be:	47a8      	blx	r5
    10c0:	4b11      	ldr	r3, [pc, #68]	; (1108 <pulseEnable+0x94>)
    10c2:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
    10c4:	7838      	ldrb	r0, [r7, #0]
    10c6:	0021      	movs	r1, r4
    10c8:	47b0      	blx	r6
 	delay_us(100);
    10ca:	0020      	movs	r0, r4
    10cc:	4b0a      	ldr	r3, [pc, #40]	; (10f8 <pulseEnable+0x84>)
    10ce:	4798      	blx	r3
    10d0:	2264      	movs	r2, #100	; 0x64
    10d2:	2300      	movs	r3, #0
    10d4:	0021      	movs	r1, r4
    10d6:	4c0d      	ldr	r4, [pc, #52]	; (110c <pulseEnable+0x98>)
    10d8:	47a0      	blx	r4
    10da:	2400      	movs	r4, #0
    10dc:	4b07      	ldr	r3, [pc, #28]	; (10fc <pulseEnable+0x88>)
    10de:	4a09      	ldr	r2, [pc, #36]	; (1104 <pulseEnable+0x90>)
    10e0:	18c0      	adds	r0, r0, r3
    10e2:	4161      	adcs	r1, r4
    10e4:	4c06      	ldr	r4, [pc, #24]	; (1100 <pulseEnable+0x8c>)
    10e6:	2300      	movs	r3, #0
    10e8:	47a0      	blx	r4
    10ea:	4b07      	ldr	r3, [pc, #28]	; (1108 <pulseEnable+0x94>)
    10ec:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
    10ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10f0:	20000c05 	.word	0x20000c05
    10f4:	00001021 	.word	0x00001021
    10f8:	00007aad 	.word	0x00007aad
    10fc:	006acfbf 	.word	0x006acfbf
    1100:	00008f35 	.word	0x00008f35
    1104:	006acfc0 	.word	0x006acfc0
    1108:	20000001 	.word	0x20000001
    110c:	00008f75 	.word	0x00008f75

00001110 <write4bits>:
{
    1110:	b570      	push	{r4, r5, r6, lr}
    1112:	0006      	movs	r6, r0
	for (int i = 0; i < 4; i++) 
    1114:	2400      	movs	r4, #0
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
    1116:	2501      	movs	r5, #1
    1118:	0031      	movs	r1, r6
    111a:	4121      	asrs	r1, r4
    111c:	4b05      	ldr	r3, [pc, #20]	; (1134 <write4bits+0x24>)
    111e:	4029      	ands	r1, r5
    1120:	5d18      	ldrb	r0, [r3, r4]
    1122:	4b05      	ldr	r3, [pc, #20]	; (1138 <write4bits+0x28>)
	for (int i = 0; i < 4; i++) 
    1124:	3401      	adds	r4, #1
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
    1126:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
    1128:	2c04      	cmp	r4, #4
    112a:	d1f5      	bne.n	1118 <write4bits+0x8>
	pulseEnable();
    112c:	4b03      	ldr	r3, [pc, #12]	; (113c <write4bits+0x2c>)
    112e:	4798      	blx	r3
}
    1130:	bd70      	pop	{r4, r5, r6, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	20000bff 	.word	0x20000bff
    1138:	00001021 	.word	0x00001021
    113c:	00001075 	.word	0x00001075

00001140 <send>:
	return 1;
}

void send(uint8_t value, uint8_t mode) 
{
	port_pin_set_output_level(_rs_pin, mode);
    1140:	1e4b      	subs	r3, r1, #1
    1142:	4199      	sbcs	r1, r3
{
    1144:	b570      	push	{r4, r5, r6, lr}
    1146:	0004      	movs	r4, r0
	port_pin_set_output_level(_rs_pin, mode);
    1148:	4b05      	ldr	r3, [pc, #20]	; (1160 <send+0x20>)
    114a:	b2c9      	uxtb	r1, r1
    114c:	7818      	ldrb	r0, [r3, #0]
    114e:	4b05      	ldr	r3, [pc, #20]	; (1164 <send+0x24>)
    1150:	4798      	blx	r3
	
	{
		write4bits(value>>4);
    1152:	4d05      	ldr	r5, [pc, #20]	; (1168 <send+0x28>)
    1154:	0920      	lsrs	r0, r4, #4
    1156:	47a8      	blx	r5
		write4bits(value);
    1158:	0020      	movs	r0, r4
    115a:	47a8      	blx	r5
	}
}
    115c:	bd70      	pop	{r4, r5, r6, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	20000c06 	.word	0x20000c06
    1164:	00001021 	.word	0x00001021
    1168:	00001111 	.word	0x00001111

0000116c <command>:
{
    116c:	b510      	push	{r4, lr}
	send(value, LOW);
    116e:	2100      	movs	r1, #0
    1170:	4b01      	ldr	r3, [pc, #4]	; (1178 <command+0xc>)
    1172:	4798      	blx	r3
}
    1174:	bd10      	pop	{r4, pc}
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	00001141 	.word	0x00001141

0000117c <LCD_write>:
    117c:	b510      	push	{r4, lr}
    117e:	2101      	movs	r1, #1
    1180:	4b01      	ldr	r3, [pc, #4]	; (1188 <LCD_write+0xc>)
    1182:	4798      	blx	r3
    1184:	2001      	movs	r0, #1
    1186:	bd10      	pop	{r4, pc}
    1188:	00001141 	.word	0x00001141

0000118c <LCD_clear>:

void LCD_clear(void)
{
    118c:	b510      	push	{r4, lr}
	command(LCD_CLEARDISPLAY);
    118e:	2001      	movs	r0, #1
    1190:	4b0a      	ldr	r3, [pc, #40]	; (11bc <LCD_clear+0x30>)
    1192:	4798      	blx	r3
	delay_us(2000);
    1194:	4b0a      	ldr	r3, [pc, #40]	; (11c0 <LCD_clear+0x34>)
    1196:	2000      	movs	r0, #0
    1198:	4798      	blx	r3
    119a:	22fa      	movs	r2, #250	; 0xfa
    119c:	4c09      	ldr	r4, [pc, #36]	; (11c4 <LCD_clear+0x38>)
    119e:	00d2      	lsls	r2, r2, #3
    11a0:	2300      	movs	r3, #0
    11a2:	2100      	movs	r1, #0
    11a4:	47a0      	blx	r4
    11a6:	2300      	movs	r3, #0
    11a8:	4a07      	ldr	r2, [pc, #28]	; (11c8 <LCD_clear+0x3c>)
    11aa:	4c08      	ldr	r4, [pc, #32]	; (11cc <LCD_clear+0x40>)
    11ac:	1880      	adds	r0, r0, r2
    11ae:	4159      	adcs	r1, r3
    11b0:	4a07      	ldr	r2, [pc, #28]	; (11d0 <LCD_clear+0x44>)
    11b2:	2300      	movs	r3, #0
    11b4:	47a0      	blx	r4
    11b6:	4b07      	ldr	r3, [pc, #28]	; (11d4 <LCD_clear+0x48>)
    11b8:	4798      	blx	r3
}
    11ba:	bd10      	pop	{r4, pc}
    11bc:	0000116d 	.word	0x0000116d
    11c0:	00007aad 	.word	0x00007aad
    11c4:	00008f75 	.word	0x00008f75
    11c8:	006acfbf 	.word	0x006acfbf
    11cc:	00008f35 	.word	0x00008f35
    11d0:	006acfc0 	.word	0x006acfc0
    11d4:	20000001 	.word	0x20000001

000011d8 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
    11d8:	b510      	push	{r4, lr}
    11da:	1c0b      	adds	r3, r1, #0
    11dc:	2903      	cmp	r1, #3
    11de:	d900      	bls.n	11e2 <LCD_setCursor+0xa>
    11e0:	2303      	movs	r3, #3
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
	if ( row >= max_lines ) 
	{
		row = max_lines - 1; 
	}
	if ( row >= _numlines )
    11e2:	4a08      	ldr	r2, [pc, #32]	; (1204 <LCD_setCursor+0x2c>)
    11e4:	b2db      	uxtb	r3, r3
    11e6:	7812      	ldrb	r2, [r2, #0]
    11e8:	429a      	cmp	r2, r3
    11ea:	d801      	bhi.n	11f0 <LCD_setCursor+0x18>
	{
		row = _numlines - 1;
    11ec:	3a01      	subs	r2, #1
    11ee:	b2d3      	uxtb	r3, r2
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
    11f0:	4a05      	ldr	r2, [pc, #20]	; (1208 <LCD_setCursor+0x30>)
    11f2:	5cd3      	ldrb	r3, [r2, r3]
    11f4:	18c3      	adds	r3, r0, r3
    11f6:	2080      	movs	r0, #128	; 0x80
    11f8:	4240      	negs	r0, r0
    11fa:	4318      	orrs	r0, r3
    11fc:	b2c0      	uxtb	r0, r0
    11fe:	4b03      	ldr	r3, [pc, #12]	; (120c <LCD_setCursor+0x34>)
    1200:	4798      	blx	r3
}
    1202:	bd10      	pop	{r4, pc}
    1204:	20000bfe 	.word	0x20000bfe
    1208:	20000bf8 	.word	0x20000bf8
    120c:	0000116d 	.word	0x0000116d

00001210 <LCD_display>:
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
	_displaycontrol |= LCD_DISPLAYON;
    1210:	2304      	movs	r3, #4
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    1212:	200c      	movs	r0, #12
{
    1214:	b510      	push	{r4, lr}
	_displaycontrol |= LCD_DISPLAYON;
    1216:	4904      	ldr	r1, [pc, #16]	; (1228 <LCD_display+0x18>)
    1218:	780a      	ldrb	r2, [r1, #0]
    121a:	4313      	orrs	r3, r2
    121c:	700b      	strb	r3, [r1, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    121e:	4310      	orrs	r0, r2
    1220:	4b02      	ldr	r3, [pc, #8]	; (122c <LCD_display+0x1c>)
    1222:	4798      	blx	r3
}
    1224:	bd10      	pop	{r4, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	20000bfd 	.word	0x20000bfd
    122c:	0000116d 	.word	0x0000116d

00001230 <LCD_init>:
{
    1230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	delay_init();
    1232:	4b4d      	ldr	r3, [pc, #308]	; (1368 <LCD_init+0x138>)
    1234:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
    1236:	203f      	movs	r0, #63	; 0x3f
    1238:	4b4c      	ldr	r3, [pc, #304]	; (136c <LCD_init+0x13c>)
	_enable_pin = LCD_EN_PIN;
    123a:	4a4d      	ldr	r2, [pc, #308]	; (1370 <LCD_init+0x140>)
	_rs_pin     = LCD_RS_PIN;
    123c:	7018      	strb	r0, [r3, #0]
	_enable_pin = LCD_EN_PIN;
    123e:	233e      	movs	r3, #62	; 0x3e
    1240:	7013      	strb	r3, [r2, #0]
		_displayfunction |= LCD_2LINE;
    1242:	2208      	movs	r2, #8
	_row_offsets[0] = row0;
    1244:	2400      	movs	r4, #0
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
    1246:	4e4b      	ldr	r6, [pc, #300]	; (1374 <LCD_init+0x144>)
    1248:	3b1d      	subs	r3, #29
    124a:	7033      	strb	r3, [r6, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
    124c:	3b01      	subs	r3, #1
    124e:	7073      	strb	r3, [r6, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
    1250:	3303      	adds	r3, #3
    1252:	70b3      	strb	r3, [r6, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
    1254:	3b01      	subs	r3, #1
    1256:	70f3      	strb	r3, [r6, #3]
		_displayfunction |= LCD_2LINE;
    1258:	4b47      	ldr	r3, [pc, #284]	; (1378 <LCD_init+0x148>)
	config->input_pull = PORT_PIN_PULL_UP;
    125a:	ad01      	add	r5, sp, #4
    125c:	701a      	strb	r2, [r3, #0]
	_numlines = lines;
    125e:	4b47      	ldr	r3, [pc, #284]	; (137c <LCD_init+0x14c>)
    1260:	3a06      	subs	r2, #6
    1262:	701a      	strb	r2, [r3, #0]
	_row_offsets[0] = row0;
    1264:	4b46      	ldr	r3, [pc, #280]	; (1380 <LCD_init+0x150>)
	_row_offsets[1] = row1;
    1266:	323e      	adds	r2, #62	; 0x3e
    1268:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
    126a:	3a30      	subs	r2, #48	; 0x30
    126c:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
    126e:	3240      	adds	r2, #64	; 0x40
	_row_offsets[0] = row0;
    1270:	701c      	strb	r4, [r3, #0]
	_row_offsets[3] = row3;
    1272:	70da      	strb	r2, [r3, #3]
    1274:	2301      	movs	r3, #1
	port_pin_set_config(_rs_pin,&config_port_pin);
    1276:	0029      	movs	r1, r5
    1278:	4f42      	ldr	r7, [pc, #264]	; (1384 <LCD_init+0x154>)
    127a:	706b      	strb	r3, [r5, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    127c:	702b      	strb	r3, [r5, #0]
	config->powersave  = false;
    127e:	70ac      	strb	r4, [r5, #2]
	port_pin_set_config(_rs_pin,&config_port_pin);
    1280:	47b8      	blx	r7
	port_pin_set_config(_enable_pin,&config_port_pin);
    1282:	4b3b      	ldr	r3, [pc, #236]	; (1370 <LCD_init+0x140>)
    1284:	0029      	movs	r1, r5
    1286:	7818      	ldrb	r0, [r3, #0]
    1288:	47b8      	blx	r7
		port_pin_set_config(_data_pins[i],&config_port_pin);
    128a:	5d30      	ldrb	r0, [r6, r4]
    128c:	0029      	movs	r1, r5
	for (int i=0; i<4; ++i)
    128e:	3401      	adds	r4, #1
		port_pin_set_config(_data_pins[i],&config_port_pin);
    1290:	47b8      	blx	r7
	for (int i=0; i<4; ++i)
    1292:	2c04      	cmp	r4, #4
    1294:	d1f9      	bne.n	128a <LCD_init+0x5a>
	delay_us(50000);
    1296:	4f3c      	ldr	r7, [pc, #240]	; (1388 <LCD_init+0x158>)
    1298:	2000      	movs	r0, #0
    129a:	47b8      	blx	r7
    129c:	4d3b      	ldr	r5, [pc, #236]	; (138c <LCD_init+0x15c>)
    129e:	4a3c      	ldr	r2, [pc, #240]	; (1390 <LCD_init+0x160>)
    12a0:	2300      	movs	r3, #0
    12a2:	2100      	movs	r1, #0
    12a4:	47a8      	blx	r5
    12a6:	2300      	movs	r3, #0
    12a8:	4a3a      	ldr	r2, [pc, #232]	; (1394 <LCD_init+0x164>)
    12aa:	4d3b      	ldr	r5, [pc, #236]	; (1398 <LCD_init+0x168>)
    12ac:	1880      	adds	r0, r0, r2
    12ae:	4159      	adcs	r1, r3
    12b0:	4a3a      	ldr	r2, [pc, #232]	; (139c <LCD_init+0x16c>)
    12b2:	2300      	movs	r3, #0
    12b4:	47a8      	blx	r5
    12b6:	4e3a      	ldr	r6, [pc, #232]	; (13a0 <LCD_init+0x170>)
    12b8:	47b0      	blx	r6
	port_pin_set_output_level(_rs_pin,LOW);
    12ba:	4b2c      	ldr	r3, [pc, #176]	; (136c <LCD_init+0x13c>)
    12bc:	4d39      	ldr	r5, [pc, #228]	; (13a4 <LCD_init+0x174>)
    12be:	7818      	ldrb	r0, [r3, #0]
    12c0:	2100      	movs	r1, #0
    12c2:	47a8      	blx	r5
	port_pin_set_output_level(_enable_pin,LOW);
    12c4:	4b2a      	ldr	r3, [pc, #168]	; (1370 <LCD_init+0x140>)
    12c6:	2100      	movs	r1, #0
    12c8:	7818      	ldrb	r0, [r3, #0]
    12ca:	47a8      	blx	r5
	 write4bits(0x03);
    12cc:	4b36      	ldr	r3, [pc, #216]	; (13a8 <LCD_init+0x178>)
    12ce:	2003      	movs	r0, #3
    12d0:	4798      	blx	r3
	 delay_us(4500); 
    12d2:	2000      	movs	r0, #0
    12d4:	47b8      	blx	r7
    12d6:	4d2d      	ldr	r5, [pc, #180]	; (138c <LCD_init+0x15c>)
    12d8:	4a34      	ldr	r2, [pc, #208]	; (13ac <LCD_init+0x17c>)
    12da:	2300      	movs	r3, #0
    12dc:	2100      	movs	r1, #0
    12de:	47a8      	blx	r5
    12e0:	2300      	movs	r3, #0
    12e2:	4a2c      	ldr	r2, [pc, #176]	; (1394 <LCD_init+0x164>)
    12e4:	4d2c      	ldr	r5, [pc, #176]	; (1398 <LCD_init+0x168>)
    12e6:	1880      	adds	r0, r0, r2
    12e8:	4159      	adcs	r1, r3
    12ea:	4a2c      	ldr	r2, [pc, #176]	; (139c <LCD_init+0x16c>)
    12ec:	2300      	movs	r3, #0
    12ee:	47a8      	blx	r5
    12f0:	47b0      	blx	r6
	 write4bits(0x03);
    12f2:	4b2d      	ldr	r3, [pc, #180]	; (13a8 <LCD_init+0x178>)
    12f4:	2003      	movs	r0, #3
    12f6:	4798      	blx	r3
	 delay_us(4500); 
    12f8:	2000      	movs	r0, #0
    12fa:	47b8      	blx	r7
    12fc:	4d23      	ldr	r5, [pc, #140]	; (138c <LCD_init+0x15c>)
    12fe:	4a2b      	ldr	r2, [pc, #172]	; (13ac <LCD_init+0x17c>)
    1300:	2300      	movs	r3, #0
    1302:	2100      	movs	r1, #0
    1304:	47a8      	blx	r5
    1306:	2300      	movs	r3, #0
    1308:	4a22      	ldr	r2, [pc, #136]	; (1394 <LCD_init+0x164>)
    130a:	4d23      	ldr	r5, [pc, #140]	; (1398 <LCD_init+0x168>)
    130c:	1880      	adds	r0, r0, r2
    130e:	4159      	adcs	r1, r3
    1310:	4a22      	ldr	r2, [pc, #136]	; (139c <LCD_init+0x16c>)
    1312:	2300      	movs	r3, #0
    1314:	47a8      	blx	r5
    1316:	47b0      	blx	r6
	 write4bits(0x03);
    1318:	4b23      	ldr	r3, [pc, #140]	; (13a8 <LCD_init+0x178>)
    131a:	2003      	movs	r0, #3
    131c:	4798      	blx	r3
	 delay_us(150);
    131e:	2000      	movs	r0, #0
    1320:	47b8      	blx	r7
    1322:	4d1a      	ldr	r5, [pc, #104]	; (138c <LCD_init+0x15c>)
    1324:	2296      	movs	r2, #150	; 0x96
    1326:	2300      	movs	r3, #0
    1328:	2100      	movs	r1, #0
    132a:	47a8      	blx	r5
    132c:	2300      	movs	r3, #0
    132e:	4a19      	ldr	r2, [pc, #100]	; (1394 <LCD_init+0x164>)
    1330:	4d19      	ldr	r5, [pc, #100]	; (1398 <LCD_init+0x168>)
    1332:	1880      	adds	r0, r0, r2
    1334:	4159      	adcs	r1, r3
    1336:	4a19      	ldr	r2, [pc, #100]	; (139c <LCD_init+0x16c>)
    1338:	2300      	movs	r3, #0
    133a:	47a8      	blx	r5
    133c:	47b0      	blx	r6
	 write4bits(0x02);
    133e:	2002      	movs	r0, #2
    1340:	4b19      	ldr	r3, [pc, #100]	; (13a8 <LCD_init+0x178>)
    1342:	4798      	blx	r3
	 command(LCD_FUNCTIONSET | _displayfunction);
    1344:	2020      	movs	r0, #32
    1346:	4b0c      	ldr	r3, [pc, #48]	; (1378 <LCD_init+0x148>)
    1348:	4d19      	ldr	r5, [pc, #100]	; (13b0 <LCD_init+0x180>)
    134a:	781b      	ldrb	r3, [r3, #0]
    134c:	4318      	orrs	r0, r3
    134e:	47a8      	blx	r5
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    1350:	4b18      	ldr	r3, [pc, #96]	; (13b4 <LCD_init+0x184>)
    1352:	701c      	strb	r4, [r3, #0]
	LCD_display();
    1354:	4b18      	ldr	r3, [pc, #96]	; (13b8 <LCD_init+0x188>)
    1356:	4798      	blx	r3
	LCD_clear();
    1358:	4b18      	ldr	r3, [pc, #96]	; (13bc <LCD_init+0x18c>)
    135a:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    135c:	2202      	movs	r2, #2
    135e:	4b18      	ldr	r3, [pc, #96]	; (13c0 <LCD_init+0x190>)
	command(LCD_ENTRYMODESET | _displaymode);
    1360:	2006      	movs	r0, #6
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    1362:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
    1364:	47a8      	blx	r5
}
    1366:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1368:	00005f21 	.word	0x00005f21
    136c:	20000c06 	.word	0x20000c06
    1370:	20000c05 	.word	0x20000c05
    1374:	20000bff 	.word	0x20000bff
    1378:	20000c04 	.word	0x20000c04
    137c:	20000bfe 	.word	0x20000bfe
    1380:	20000bf8 	.word	0x20000bf8
    1384:	00006fe1 	.word	0x00006fe1
    1388:	00007aad 	.word	0x00007aad
    138c:	00008f75 	.word	0x00008f75
    1390:	0000c350 	.word	0x0000c350
    1394:	006acfbf 	.word	0x006acfbf
    1398:	00008f35 	.word	0x00008f35
    139c:	006acfc0 	.word	0x006acfc0
    13a0:	20000001 	.word	0x20000001
    13a4:	00001021 	.word	0x00001021
    13a8:	00001111 	.word	0x00001111
    13ac:	00001194 	.word	0x00001194
    13b0:	0000116d 	.word	0x0000116d
    13b4:	20000bfd 	.word	0x20000bfd
    13b8:	00001211 	.word	0x00001211
    13bc:	0000118d 	.word	0x0000118d
    13c0:	20000c03 	.word	0x20000c03

000013c4 <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
    13c4:	b570      	push	{r4, r5, r6, lr}
	size_t size = strlen(buffer);
    13c6:	4b07      	ldr	r3, [pc, #28]	; (13e4 <Buffer_writer+0x20>)
{
    13c8:	0004      	movs	r4, r0
	size_t size = strlen(buffer);
    13ca:	4798      	blx	r3
    13cc:	0005      	movs	r5, r0
    13ce:	1826      	adds	r6, r4, r0
	size_t n = 0;
	while (size--) {
    13d0:	42b4      	cmp	r4, r6
    13d2:	d101      	bne.n	13d8 <Buffer_writer+0x14>
		if (LCD_write(*buffer++)) n++;
		else break;
	}
	return n;
}
    13d4:	0028      	movs	r0, r5
    13d6:	bd70      	pop	{r4, r5, r6, pc}
	send(value, HIGH);
    13d8:	7820      	ldrb	r0, [r4, #0]
    13da:	2101      	movs	r1, #1
    13dc:	4b02      	ldr	r3, [pc, #8]	; (13e8 <Buffer_writer+0x24>)
    13de:	4798      	blx	r3
    13e0:	3401      	adds	r4, #1
    13e2:	e7f5      	b.n	13d0 <Buffer_writer+0xc>
    13e4:	000094c1 	.word	0x000094c1
    13e8:	00001141 	.word	0x00001141

000013ec <print_ch>:
{
	return Buffer_writer(str);
}

size_t print_ch(char c)
{
    13ec:	b510      	push	{r4, lr}
	send(value, HIGH);
    13ee:	2101      	movs	r1, #1
    13f0:	4b01      	ldr	r3, [pc, #4]	; (13f8 <print_ch+0xc>)
    13f2:	4798      	blx	r3
	return LCD_write(c);
}
    13f4:	2001      	movs	r0, #1
    13f6:	bd10      	pop	{r4, pc}
    13f8:	00001141 	.word	0x00001141

000013fc <LCD_Create_Custom_createChar>:
	command(LCD_SETCGRAMADDR | (location << 3));
    13fc:	2307      	movs	r3, #7
{
    13fe:	b570      	push	{r4, r5, r6, lr}
    1400:	000c      	movs	r4, r1
	command(LCD_SETCGRAMADDR | (location << 3));
    1402:	4018      	ands	r0, r3
    1404:	00c0      	lsls	r0, r0, #3
    1406:	3339      	adds	r3, #57	; 0x39
    1408:	4318      	orrs	r0, r3
    140a:	0025      	movs	r5, r4
    140c:	4b04      	ldr	r3, [pc, #16]	; (1420 <LCD_Create_Custom_createChar+0x24>)
    140e:	4798      	blx	r3
    1410:	3508      	adds	r5, #8
		LCD_write(charmap[i]);
    1412:	7820      	ldrb	r0, [r4, #0]
    1414:	4b03      	ldr	r3, [pc, #12]	; (1424 <LCD_Create_Custom_createChar+0x28>)
    1416:	3401      	adds	r4, #1
    1418:	4798      	blx	r3
	for (int i=0; i<8; i++)
    141a:	42ac      	cmp	r4, r5
    141c:	d1f9      	bne.n	1412 <LCD_Create_Custom_createChar+0x16>
}
    141e:	bd70      	pop	{r4, r5, r6, pc}
    1420:	0000116d 	.word	0x0000116d
    1424:	000013ed 	.word	0x000013ed

00001428 <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
    1428:	b40f      	push	{r0, r1, r2, r3}
    142a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    142c:	ac06      	add	r4, sp, #24
    142e:	cc40      	ldmia	r4!, {r6}
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
    1430:	4b0a      	ldr	r3, [pc, #40]	; (145c <lcd_printf+0x34>)
    1432:	0030      	movs	r0, r6
    1434:	4798      	blx	r3
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
    1436:	4b0a      	ldr	r3, [pc, #40]	; (1460 <lcd_printf+0x38>)
	num_chars = strlen(fmt) + 3;
    1438:	3003      	adds	r0, #3
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
    143a:	4798      	blx	r3
    143c:	0005      	movs	r5, r0
	va_list args;
	va_start(args, fmt);
	vsprintf(lcd_buff,fmt,args);
    143e:	0031      	movs	r1, r6
    1440:	0022      	movs	r2, r4
	va_start(args, fmt);
    1442:	9401      	str	r4, [sp, #4]
	vsprintf(lcd_buff,fmt,args);
    1444:	4b07      	ldr	r3, [pc, #28]	; (1464 <lcd_printf+0x3c>)
    1446:	4798      	blx	r3
	Buffer_writer(lcd_buff);
    1448:	0028      	movs	r0, r5
    144a:	4b07      	ldr	r3, [pc, #28]	; (1468 <lcd_printf+0x40>)
    144c:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
    144e:	0028      	movs	r0, r5
    1450:	4b06      	ldr	r3, [pc, #24]	; (146c <lcd_printf+0x44>)
    1452:	4798      	blx	r3
}
    1454:	bc73      	pop	{r0, r1, r4, r5, r6}
    1456:	bc08      	pop	{r3}
    1458:	b004      	add	sp, #16
    145a:	4718      	bx	r3
    145c:	000094c1 	.word	0x000094c1
    1460:	000091ed 	.word	0x000091ed
    1464:	00009711 	.word	0x00009711
    1468:	000013c5 	.word	0x000013c5
    146c:	00009201 	.word	0x00009201

00001470 <sam_ba_monitor_init>:
 * \param com_interface  Communication interface to be used.
 */
void sam_ba_monitor_init(uint8_t com_interface)
{

	if (com_interface == SAM_BA_INTERFACE_USBCDC)
    1470:	2800      	cmp	r0, #0
    1472:	d102      	bne.n	147a <sam_ba_monitor_init+0xa>
		ptr_monitor_if = (t_monitor_if*) &usbcdc_if;
    1474:	4a01      	ldr	r2, [pc, #4]	; (147c <sam_ba_monitor_init+0xc>)
    1476:	4b02      	ldr	r3, [pc, #8]	; (1480 <sam_ba_monitor_init+0x10>)
    1478:	601a      	str	r2, [r3, #0]
}
    147a:	4770      	bx	lr
    147c:	0000a30c 	.word	0x0000a30c
    1480:	20000c68 	.word	0x20000c68

00001484 <sam_ba_putdata_term>:
 *
 * \param *data  Data pointer
 * \param length Length of the data
 */
void sam_ba_putdata_term(uint8_t* data, uint32_t length)
{
    1484:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t temp, buf[12], *data_ascii;
	uint32_t i, int_value;

	if (b_terminal_mode)
    1486:	4b19      	ldr	r3, [pc, #100]	; (14ec <sam_ba_putdata_term+0x68>)
    1488:	781b      	ldrb	r3, [r3, #0]
    148a:	2b00      	cmp	r3, #0
    148c:	d017      	beq.n	14be <sam_ba_putdata_term+0x3a>
	{
		if (length == 4)
    148e:	2904      	cmp	r1, #4
    1490:	d11a      	bne.n	14c8 <sam_ba_putdata_term+0x44>
			int_value = *(uint32_t *) data;
    1492:	6800      	ldr	r0, [r0, #0]
    1494:	466a      	mov	r2, sp
		data_ascii = buf + 2;
		data_ascii += length * 2 - 1;

		for (i = 0; i < length * 2; i++)
		{
			temp = (uint8_t) (int_value & 0xf);
    1496:	250f      	movs	r5, #15

			if (temp <= 0x9)
				*data_ascii = temp | 0x30;
    1498:	2630      	movs	r6, #48	; 0x30
		data_ascii += length * 2 - 1;
    149a:	0049      	lsls	r1, r1, #1
    149c:	ab04      	add	r3, sp, #16
    149e:	185b      	adds	r3, r3, r1
    14a0:	3b0b      	subs	r3, #11
    14a2:	1d54      	adds	r4, r2, #5
		for (i = 0; i < length * 2; i++)
    14a4:	42a3      	cmp	r3, r4
    14a6:	d115      	bne.n	14d4 <sam_ba_putdata_term+0x50>
				*data_ascii = temp + 0x37;

			int_value >>= 4;
			data_ascii--;
		}
		buf[0] = '0';
    14a8:	2330      	movs	r3, #48	; 0x30
		buf[1] = 'x';
		buf[length * 2 + 2] = '\n';
    14aa:	220a      	movs	r2, #10
		buf[0] = '0';
    14ac:	a801      	add	r0, sp, #4
    14ae:	7003      	strb	r3, [r0, #0]
		buf[1] = 'x';
    14b0:	3348      	adds	r3, #72	; 0x48
    14b2:	7043      	strb	r3, [r0, #1]
		buf[length * 2 + 2] = '\n';
    14b4:	1843      	adds	r3, r0, r1
    14b6:	709a      	strb	r2, [r3, #2]
		buf[length * 2 + 3] = '\r';
    14b8:	3203      	adds	r2, #3
    14ba:	70da      	strb	r2, [r3, #3]
		ptr_monitor_if->putdata(buf, length * 2 + 4);
    14bc:	3104      	adds	r1, #4
	}
	else
		ptr_monitor_if->putdata(data, length);
    14be:	4b0c      	ldr	r3, [pc, #48]	; (14f0 <sam_ba_putdata_term+0x6c>)
    14c0:	681b      	ldr	r3, [r3, #0]
    14c2:	68db      	ldr	r3, [r3, #12]
    14c4:	4798      	blx	r3
	return;
}
    14c6:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
		else if (length == 2)
    14c8:	2902      	cmp	r1, #2
    14ca:	d101      	bne.n	14d0 <sam_ba_putdata_term+0x4c>
			int_value = *(uint16_t *) data;
    14cc:	8800      	ldrh	r0, [r0, #0]
    14ce:	e7e1      	b.n	1494 <sam_ba_putdata_term+0x10>
			int_value = *(uint8_t *) data;
    14d0:	7800      	ldrb	r0, [r0, #0]
    14d2:	e7df      	b.n	1494 <sam_ba_putdata_term+0x10>
			temp = (uint8_t) (int_value & 0xf);
    14d4:	0002      	movs	r2, r0
    14d6:	402a      	ands	r2, r5
			if (temp <= 0x9)
    14d8:	2a09      	cmp	r2, #9
    14da:	d804      	bhi.n	14e6 <sam_ba_putdata_term+0x62>
				*data_ascii = temp | 0x30;
    14dc:	4332      	orrs	r2, r6
				*data_ascii = temp + 0x37;
    14de:	701a      	strb	r2, [r3, #0]
			int_value >>= 4;
    14e0:	0900      	lsrs	r0, r0, #4
			data_ascii--;
    14e2:	3b01      	subs	r3, #1
    14e4:	e7de      	b.n	14a4 <sam_ba_putdata_term+0x20>
				*data_ascii = temp + 0x37;
    14e6:	3237      	adds	r2, #55	; 0x37
    14e8:	e7f9      	b.n	14de <sam_ba_putdata_term+0x5a>
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	2000031c 	.word	0x2000031c
    14f0:	20000c68 	.word	0x20000c68

000014f4 <call_applet>:
 * \brief Execute an applet from the specified address
 *
 * \param address Applet address
 */
void call_applet(uint32_t address)
{
    14f4:	b580      	push	{r7, lr}
    14f6:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    14f8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    14fa:	f3bf 8f5f 	dmb	sy
	uint32_t app_start_address;

	cpu_irq_disable();
    14fe:	2200      	movs	r2, #0
    1500:	4b06      	ldr	r3, [pc, #24]	; (151c <call_applet+0x28>)
    1502:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
    1504:	f3ef 8308 	mrs	r3, MSP

	sp = __get_MSP();
    1508:	4a05      	ldr	r2, [pc, #20]	; (1520 <call_applet+0x2c>)
    150a:	6013      	str	r3, [r2, #0]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    150c:	6803      	ldr	r3, [r0, #0]
    150e:	f383 8808 	msr	MSP, r3

	/* Load the Reset Handler address of the application */
	app_start_address = *(uint32_t *)(address + 4);

	/* Jump to application Reset Handler in the application */
	asm("bx %0"::"r"(app_start_address));
    1512:	6843      	ldr	r3, [r0, #4]
    1514:	4718      	bx	r3
}
    1516:	46bd      	mov	sp, r7
    1518:	bd80      	pop	{r7, pc}
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	20000120 	.word	0x20000120
    1520:	20000c6c 	.word	0x20000c6c

00001524 <serial_add_crc>:
//*----------------------------------------------------------------------------
//* \brief Compute the CRC
//*----------------------------------------------------------------------------
unsigned short serial_add_crc(char ptr, unsigned short crc)
{
	return (crc << 8) ^ crc16Table[((crc >> 8) ^ ptr) & 0xff];
    1524:	0a0b      	lsrs	r3, r1, #8
    1526:	4043      	eors	r3, r0
    1528:	4a03      	ldr	r2, [pc, #12]	; (1538 <serial_add_crc+0x14>)
    152a:	005b      	lsls	r3, r3, #1
    152c:	5a98      	ldrh	r0, [r3, r2]
    152e:	0209      	lsls	r1, r1, #8
    1530:	4048      	eors	r0, r1
    1532:	b280      	uxth	r0, r0
}
    1534:	4770      	bx	lr
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	0000a0d6 	.word	0x0000a0d6

0000153c <sam_ba_monitor_run>:
 * \brief This function starts the SAM-BA monitor.
 */

void sam_ba_monitor_run(void)
{
	uint32_t pageSizes[] = { 8, 16, 32, 64, 128, 256, 512, 1024 };
    153c:	2314      	movs	r3, #20
{
    153e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1540:	b09d      	sub	sp, #116	; 0x74
    1542:	af00      	add	r7, sp, #0
	uint32_t pageSizes[] = { 8, 16, 32, 64, 128, 256, 512, 1024 };
    1544:	18f9      	adds	r1, r7, r3
    1546:	000a      	movs	r2, r1
    1548:	4bd1      	ldr	r3, [pc, #836]	; (1890 <sam_ba_monitor_run+0x354>)
    154a:	cb31      	ldmia	r3!, {r0, r4, r5}
    154c:	c231      	stmia	r2!, {r0, r4, r5}
    154e:	cb31      	ldmia	r3!, {r0, r4, r5}
    1550:	c231      	stmia	r2!, {r0, r4, r5}
    1552:	cb11      	ldmia	r3!, {r0, r4}
    1554:	c211      	stmia	r2!, {r0, r4}
	PAGE_SIZE = pageSizes[NVMCTRL->PARAM.bit.PSZ];
    1556:	4acf      	ldr	r2, [pc, #828]	; (1894 <sam_ba_monitor_run+0x358>)
    1558:	6893      	ldr	r3, [r2, #8]
    155a:	035b      	lsls	r3, r3, #13
    155c:	0f5b      	lsrs	r3, r3, #29
    155e:	009b      	lsls	r3, r3, #2
    1560:	5858      	ldr	r0, [r3, r1]
    1562:	4bcd      	ldr	r3, [pc, #820]	; (1898 <sam_ba_monitor_run+0x35c>)
	PAGES = NVMCTRL->PARAM.bit.NVMP;
    1564:	49cd      	ldr	r1, [pc, #820]	; (189c <sam_ba_monitor_run+0x360>)
	PAGE_SIZE = pageSizes[NVMCTRL->PARAM.bit.PSZ];
    1566:	6018      	str	r0, [r3, #0]
	PAGES = NVMCTRL->PARAM.bit.NVMP;
    1568:	6893      	ldr	r3, [r2, #8]
    156a:	60fa      	str	r2, [r7, #12]
    156c:	b29b      	uxth	r3, r3
    156e:	600b      	str	r3, [r1, #0]
	MAX_FLASH = PAGE_SIZE * PAGES;
    1570:	4343      	muls	r3, r0
    1572:	49cb      	ldr	r1, [pc, #812]	; (18a0 <sam_ba_monitor_run+0x364>)
    1574:	600b      	str	r3, [r1, #0]

	ptr_data = NULL;
    1576:	2100      	movs	r1, #0
    1578:	4bca      	ldr	r3, [pc, #808]	; (18a4 <sam_ba_monitor_run+0x368>)
    157a:	6019      	str	r1, [r3, #0]
	cmd = 'z';
    157c:	237a      	movs	r3, #122	; 0x7a
    157e:	49ca      	ldr	r1, [pc, #808]	; (18a8 <sam_ba_monitor_run+0x36c>)
    1580:	700b      	strb	r3, [r1, #0]
				 ptr_monitor_if->putdata("Z", 1);
				 put_uint32(crc);
				 ptr_monitor_if->putdata("#\n\r", 1);
			 }
			 
			 cmd = 'z';
    1582:	607b      	str	r3, [r7, #4]
	length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    1584:	4bc9      	ldr	r3, [pc, #804]	; (18ac <sam_ba_monitor_run+0x370>)
    1586:	4cca      	ldr	r4, [pc, #808]	; (18b0 <sam_ba_monitor_run+0x374>)
    1588:	681b      	ldr	r3, [r3, #0]
    158a:	2140      	movs	r1, #64	; 0x40
    158c:	691b      	ldr	r3, [r3, #16]
    158e:	0020      	movs	r0, r4
    1590:	4798      	blx	r3
	 for (i = 0; i < length; i++, ptr++)
    1592:	2200      	movs	r2, #0
	length = ptr_monitor_if->getdata(data, SIZEBUFMAX);
    1594:	4bc7      	ldr	r3, [pc, #796]	; (18b4 <sam_ba_monitor_run+0x378>)
    1596:	6018      	str	r0, [r3, #0]
	ptr = data;
    1598:	4bc7      	ldr	r3, [pc, #796]	; (18b8 <sam_ba_monitor_run+0x37c>)
    159a:	601c      	str	r4, [r3, #0]
	 for (i = 0; i < length; i++, ptr++)
    159c:	4bc7      	ldr	r3, [pc, #796]	; (18bc <sam_ba_monitor_run+0x380>)
    159e:	601a      	str	r2, [r3, #0]
    15a0:	4cc6      	ldr	r4, [pc, #792]	; (18bc <sam_ba_monitor_run+0x380>)
    15a2:	4ec4      	ldr	r6, [pc, #784]	; (18b4 <sam_ba_monitor_run+0x378>)
    15a4:	6823      	ldr	r3, [r4, #0]
    15a6:	6832      	ldr	r2, [r6, #0]
    15a8:	4293      	cmp	r3, r2
    15aa:	d2eb      	bcs.n	1584 <sam_ba_monitor_run+0x48>
		 if (*ptr == 0xff) continue;
    15ac:	4dc2      	ldr	r5, [pc, #776]	; (18b8 <sam_ba_monitor_run+0x37c>)
    15ae:	682b      	ldr	r3, [r5, #0]
    15b0:	781b      	ldrb	r3, [r3, #0]
    15b2:	2bff      	cmp	r3, #255	; 0xff
    15b4:	d054      	beq.n	1660 <sam_ba_monitor_run+0x124>
		 if (*ptr == '#')
    15b6:	2b23      	cmp	r3, #35	; 0x23
    15b8:	d000      	beq.n	15bc <sam_ba_monitor_run+0x80>
    15ba:	e250      	b.n	1a5e <sam_ba_monitor_run+0x522>
			 if (b_terminal_mode)
    15bc:	4bc0      	ldr	r3, [pc, #768]	; (18c0 <sam_ba_monitor_run+0x384>)
    15be:	781b      	ldrb	r3, [r3, #0]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d005      	beq.n	15d0 <sam_ba_monitor_run+0x94>
				 ptr_monitor_if->putdata("\n\r", 2);
    15c4:	4bb9      	ldr	r3, [pc, #740]	; (18ac <sam_ba_monitor_run+0x370>)
    15c6:	2102      	movs	r1, #2
    15c8:	681b      	ldr	r3, [r3, #0]
    15ca:	48be      	ldr	r0, [pc, #760]	; (18c4 <sam_ba_monitor_run+0x388>)
    15cc:	68db      	ldr	r3, [r3, #12]
    15ce:	4798      	blx	r3
			 if (cmd == 'S')
    15d0:	4bb5      	ldr	r3, [pc, #724]	; (18a8 <sam_ba_monitor_run+0x36c>)
    15d2:	781b      	ldrb	r3, [r3, #0]
    15d4:	2b53      	cmp	r3, #83	; 0x53
    15d6:	d14e      	bne.n	1676 <sam_ba_monitor_run+0x13a>
				 if(length>i)
    15d8:	6832      	ldr	r2, [r6, #0]
    15da:	6823      	ldr	r3, [r4, #0]
    15dc:	429a      	cmp	r2, r3
    15de:	d91a      	bls.n	1616 <sam_ba_monitor_run+0xda>
					 i++;
    15e0:	3301      	adds	r3, #1
    15e2:	6023      	str	r3, [r4, #0]
					 if ((length-i) < current_number)
    15e4:	1ad3      	subs	r3, r2, r3
    15e6:	4ab8      	ldr	r2, [pc, #736]	; (18c8 <sam_ba_monitor_run+0x38c>)
					 ptr++;
    15e8:	6829      	ldr	r1, [r5, #0]
					 if ((length-i) < current_number)
    15ea:	6812      	ldr	r2, [r2, #0]
					 ptr++;
    15ec:	3101      	adds	r1, #1
    15ee:	6029      	str	r1, [r5, #0]
    15f0:	4db6      	ldr	r5, [pc, #728]	; (18cc <sam_ba_monitor_run+0x390>)
					 if ((length-i) < current_number)
    15f2:	4293      	cmp	r3, r2
    15f4:	d23d      	bcs.n	1672 <sam_ba_monitor_run+0x136>
						 u32tmp=(length-i);
    15f6:	602b      	str	r3, [r5, #0]
					 memcpy(ptr_data, ptr, u32tmp);
    15f8:	4baa      	ldr	r3, [pc, #680]	; (18a4 <sam_ba_monitor_run+0x368>)
    15fa:	682a      	ldr	r2, [r5, #0]
    15fc:	6818      	ldr	r0, [r3, #0]
    15fe:	4bb4      	ldr	r3, [pc, #720]	; (18d0 <sam_ba_monitor_run+0x394>)
    1600:	4798      	blx	r3
					 i += u32tmp;
    1602:	682b      	ldr	r3, [r5, #0]
    1604:	6822      	ldr	r2, [r4, #0]
					 ptr += u32tmp;
    1606:	49ac      	ldr	r1, [pc, #688]	; (18b8 <sam_ba_monitor_run+0x37c>)
					 i += u32tmp;
    1608:	18d2      	adds	r2, r2, r3
    160a:	6022      	str	r2, [r4, #0]
					 ptr += u32tmp;
    160c:	680a      	ldr	r2, [r1, #0]
    160e:	18d2      	adds	r2, r2, r3
    1610:	600a      	str	r2, [r1, #0]
					 j = u32tmp;
    1612:	4ab0      	ldr	r2, [pc, #704]	; (18d4 <sam_ba_monitor_run+0x398>)
    1614:	7013      	strb	r3, [r2, #0]
				 i--;
    1616:	6823      	ldr	r3, [r4, #0]
				 ptr--;
    1618:	4aa7      	ldr	r2, [pc, #668]	; (18b8 <sam_ba_monitor_run+0x37c>)
				 i--;
    161a:	3b01      	subs	r3, #1
    161c:	6023      	str	r3, [r4, #0]
				 ptr--;
    161e:	6813      	ldr	r3, [r2, #0]
    1620:	3b01      	subs	r3, #1
    1622:	6013      	str	r3, [r2, #0]
				 if(j<current_number)
    1624:	4bab      	ldr	r3, [pc, #684]	; (18d4 <sam_ba_monitor_run+0x398>)
    1626:	4aa8      	ldr	r2, [pc, #672]	; (18c8 <sam_ba_monitor_run+0x38c>)
    1628:	781b      	ldrb	r3, [r3, #0]
    162a:	6811      	ldr	r1, [r2, #0]
    162c:	428b      	cmp	r3, r1
    162e:	d206      	bcs.n	163e <sam_ba_monitor_run+0x102>
				ptr_monitor_if->getdata_xmd(ptr_data, current_number-j);
    1630:	1ac9      	subs	r1, r1, r3
    1632:	4b9e      	ldr	r3, [pc, #632]	; (18ac <sam_ba_monitor_run+0x370>)
    1634:	4a9b      	ldr	r2, [pc, #620]	; (18a4 <sam_ba_monitor_run+0x368>)
    1636:	681b      	ldr	r3, [r3, #0]
    1638:	6810      	ldr	r0, [r2, #0]
    163a:	699b      	ldr	r3, [r3, #24]
    163c:	4798      	blx	r3
				 __asm("nop");
    163e:	46c0      	nop			; (mov r8, r8)
			 cmd = 'z';
    1640:	4b99      	ldr	r3, [pc, #612]	; (18a8 <sam_ba_monitor_run+0x36c>)
    1642:	793a      	ldrb	r2, [r7, #4]
    1644:	701a      	strb	r2, [r3, #0]
			 current_number = 0;
    1646:	2200      	movs	r2, #0
    1648:	4b9f      	ldr	r3, [pc, #636]	; (18c8 <sam_ba_monitor_run+0x38c>)
    164a:	601a      	str	r2, [r3, #0]

			if (b_terminal_mode)
    164c:	4b9c      	ldr	r3, [pc, #624]	; (18c0 <sam_ba_monitor_run+0x384>)
    164e:	781b      	ldrb	r3, [r3, #0]
    1650:	4293      	cmp	r3, r2
    1652:	d005      	beq.n	1660 <sam_ba_monitor_run+0x124>
			{
				ptr_monitor_if->putdata(">", 1);
    1654:	4b95      	ldr	r3, [pc, #596]	; (18ac <sam_ba_monitor_run+0x370>)
    1656:	2101      	movs	r1, #1
    1658:	681b      	ldr	r3, [r3, #0]
    165a:	489f      	ldr	r0, [pc, #636]	; (18d8 <sam_ba_monitor_run+0x39c>)
    165c:	68db      	ldr	r3, [r3, #12]
    165e:	4798      	blx	r3
	 for (i = 0; i < length; i++, ptr++)
    1660:	4a96      	ldr	r2, [pc, #600]	; (18bc <sam_ba_monitor_run+0x380>)
    1662:	6813      	ldr	r3, [r2, #0]
    1664:	3301      	adds	r3, #1
    1666:	6013      	str	r3, [r2, #0]
    1668:	4a93      	ldr	r2, [pc, #588]	; (18b8 <sam_ba_monitor_run+0x37c>)
    166a:	6813      	ldr	r3, [r2, #0]
    166c:	3301      	adds	r3, #1
    166e:	6013      	str	r3, [r2, #0]
    1670:	e796      	b.n	15a0 <sam_ba_monitor_run+0x64>
						 u32tmp=current_number;
    1672:	602a      	str	r2, [r5, #0]
    1674:	e7c0      	b.n	15f8 <sam_ba_monitor_run+0xbc>
			 else if (cmd == 'R')
    1676:	2b52      	cmp	r3, #82	; 0x52
    1678:	d108      	bne.n	168c <sam_ba_monitor_run+0x150>
				 ptr_monitor_if->putdata_xmd(ptr_data, current_number);
    167a:	4a93      	ldr	r2, [pc, #588]	; (18c8 <sam_ba_monitor_run+0x38c>)
    167c:	4b8b      	ldr	r3, [pc, #556]	; (18ac <sam_ba_monitor_run+0x370>)
    167e:	6811      	ldr	r1, [r2, #0]
    1680:	681b      	ldr	r3, [r3, #0]
    1682:	4a88      	ldr	r2, [pc, #544]	; (18a4 <sam_ba_monitor_run+0x368>)
    1684:	695b      	ldr	r3, [r3, #20]
    1686:	6810      	ldr	r0, [r2, #0]
				 ptr_monitor_if->putdata("#\n\r", 1);
    1688:	4798      	blx	r3
    168a:	e7d9      	b.n	1640 <sam_ba_monitor_run+0x104>
			 else if (cmd == 'O')
    168c:	2b4f      	cmp	r3, #79	; 0x4f
    168e:	d105      	bne.n	169c <sam_ba_monitor_run+0x160>
				 *ptr_data = (char) current_number;
    1690:	4b84      	ldr	r3, [pc, #528]	; (18a4 <sam_ba_monitor_run+0x368>)
    1692:	4a8d      	ldr	r2, [pc, #564]	; (18c8 <sam_ba_monitor_run+0x38c>)
    1694:	681b      	ldr	r3, [r3, #0]
    1696:	6812      	ldr	r2, [r2, #0]
				 b_terminal_mode = 0;
    1698:	701a      	strb	r2, [r3, #0]
    169a:	e7d1      	b.n	1640 <sam_ba_monitor_run+0x104>
			 else if (cmd == 'H')
    169c:	2b48      	cmp	r3, #72	; 0x48
    169e:	d105      	bne.n	16ac <sam_ba_monitor_run+0x170>
				 *((uint16_t *) ptr_data) = (uint16_t) current_number;
    16a0:	4b80      	ldr	r3, [pc, #512]	; (18a4 <sam_ba_monitor_run+0x368>)
    16a2:	4a89      	ldr	r2, [pc, #548]	; (18c8 <sam_ba_monitor_run+0x38c>)
    16a4:	681b      	ldr	r3, [r3, #0]
    16a6:	6812      	ldr	r2, [r2, #0]
    16a8:	801a      	strh	r2, [r3, #0]
    16aa:	e7c9      	b.n	1640 <sam_ba_monitor_run+0x104>
			 else if (cmd == 'W')
    16ac:	2b57      	cmp	r3, #87	; 0x57
    16ae:	d105      	bne.n	16bc <sam_ba_monitor_run+0x180>
				 *((int *) ptr_data) = current_number;
    16b0:	4b7c      	ldr	r3, [pc, #496]	; (18a4 <sam_ba_monitor_run+0x368>)
    16b2:	4a85      	ldr	r2, [pc, #532]	; (18c8 <sam_ba_monitor_run+0x38c>)
    16b4:	681b      	ldr	r3, [r3, #0]
    16b6:	6812      	ldr	r2, [r2, #0]
    16b8:	601a      	str	r2, [r3, #0]
    16ba:	e7c1      	b.n	1640 <sam_ba_monitor_run+0x104>
			 else if (cmd == 'o')
    16bc:	2b6f      	cmp	r3, #111	; 0x6f
    16be:	d105      	bne.n	16cc <sam_ba_monitor_run+0x190>
				 sam_ba_putdata_term(ptr_data, 1);
    16c0:	2101      	movs	r1, #1
    16c2:	4b78      	ldr	r3, [pc, #480]	; (18a4 <sam_ba_monitor_run+0x368>)
    16c4:	6818      	ldr	r0, [r3, #0]
				 sam_ba_putdata_term((uint8_t*) &current_number, 2);
    16c6:	4b85      	ldr	r3, [pc, #532]	; (18dc <sam_ba_monitor_run+0x3a0>)
    16c8:	4798      	blx	r3
    16ca:	e7b9      	b.n	1640 <sam_ba_monitor_run+0x104>
			 else if (cmd == 'h')
    16cc:	2b68      	cmp	r3, #104	; 0x68
    16ce:	d106      	bne.n	16de <sam_ba_monitor_run+0x1a2>
				 current_number = *((uint16_t *) ptr_data);
    16d0:	4b74      	ldr	r3, [pc, #464]	; (18a4 <sam_ba_monitor_run+0x368>)
    16d2:	487d      	ldr	r0, [pc, #500]	; (18c8 <sam_ba_monitor_run+0x38c>)
    16d4:	681b      	ldr	r3, [r3, #0]
				 sam_ba_putdata_term((uint8_t*) &current_number, 2);
    16d6:	2102      	movs	r1, #2
				 current_number = *((uint16_t *) ptr_data);
    16d8:	881b      	ldrh	r3, [r3, #0]
    16da:	6003      	str	r3, [r0, #0]
    16dc:	e7f3      	b.n	16c6 <sam_ba_monitor_run+0x18a>
			 else if (cmd == 'w')
    16de:	2b77      	cmp	r3, #119	; 0x77
    16e0:	d106      	bne.n	16f0 <sam_ba_monitor_run+0x1b4>
				 current_number = *((uint32_t *) ptr_data);
    16e2:	4b70      	ldr	r3, [pc, #448]	; (18a4 <sam_ba_monitor_run+0x368>)
    16e4:	4878      	ldr	r0, [pc, #480]	; (18c8 <sam_ba_monitor_run+0x38c>)
    16e6:	681b      	ldr	r3, [r3, #0]
				 sam_ba_putdata_term((uint8_t*) &current_number, 4);
    16e8:	2104      	movs	r1, #4
				 current_number = *((uint32_t *) ptr_data);
    16ea:	681b      	ldr	r3, [r3, #0]
    16ec:	6003      	str	r3, [r0, #0]
    16ee:	e7ea      	b.n	16c6 <sam_ba_monitor_run+0x18a>
			 else if (cmd == 'G')
    16f0:	2b47      	cmp	r3, #71	; 0x47
    16f2:	d109      	bne.n	1708 <sam_ba_monitor_run+0x1cc>
				 call_applet(current_number);
    16f4:	4b74      	ldr	r3, [pc, #464]	; (18c8 <sam_ba_monitor_run+0x38c>)
    16f6:	6818      	ldr	r0, [r3, #0]
    16f8:	4b79      	ldr	r3, [pc, #484]	; (18e0 <sam_ba_monitor_run+0x3a4>)
    16fa:	4798      	blx	r3
				 __set_MSP(sp);
    16fc:	4b79      	ldr	r3, [pc, #484]	; (18e4 <sam_ba_monitor_run+0x3a8>)
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	f383 8808 	msr	MSP, r3
  __ASM volatile ("cpsie i" : : : "memory");
    1704:	b662      	cpsie	i
    1706:	e79b      	b.n	1640 <sam_ba_monitor_run+0x104>
			 else if (cmd == 'T')
    1708:	2b54      	cmp	r3, #84	; 0x54
    170a:	d108      	bne.n	171e <sam_ba_monitor_run+0x1e2>
				b_terminal_mode = 1;
    170c:	4a6c      	ldr	r2, [pc, #432]	; (18c0 <sam_ba_monitor_run+0x384>)
    170e:	3b53      	subs	r3, #83	; 0x53
    1710:	7013      	strb	r3, [r2, #0]
				ptr_monitor_if->putdata("\n\r", 2);
    1712:	4b66      	ldr	r3, [pc, #408]	; (18ac <sam_ba_monitor_run+0x370>)
    1714:	681b      	ldr	r3, [r3, #0]
				 ptr_monitor_if->putdata("\n\r", 2);
    1716:	68db      	ldr	r3, [r3, #12]
    1718:	2102      	movs	r1, #2
    171a:	486a      	ldr	r0, [pc, #424]	; (18c4 <sam_ba_monitor_run+0x388>)
    171c:	e7b4      	b.n	1688 <sam_ba_monitor_run+0x14c>
			 else if (cmd == 'N')
    171e:	2b4e      	cmp	r3, #78	; 0x4e
    1720:	d10c      	bne.n	173c <sam_ba_monitor_run+0x200>
				 if (b_terminal_mode == 0)
    1722:	4b67      	ldr	r3, [pc, #412]	; (18c0 <sam_ba_monitor_run+0x384>)
    1724:	781b      	ldrb	r3, [r3, #0]
    1726:	2b00      	cmp	r3, #0
    1728:	d105      	bne.n	1736 <sam_ba_monitor_run+0x1fa>
					 ptr_monitor_if->putdata("\n\r", 2);
    172a:	4b60      	ldr	r3, [pc, #384]	; (18ac <sam_ba_monitor_run+0x370>)
    172c:	2102      	movs	r1, #2
    172e:	681b      	ldr	r3, [r3, #0]
    1730:	4864      	ldr	r0, [pc, #400]	; (18c4 <sam_ba_monitor_run+0x388>)
    1732:	68db      	ldr	r3, [r3, #12]
    1734:	4798      	blx	r3
				 b_terminal_mode = 0;
    1736:	2200      	movs	r2, #0
    1738:	4b61      	ldr	r3, [pc, #388]	; (18c0 <sam_ba_monitor_run+0x384>)
    173a:	e7ad      	b.n	1698 <sam_ba_monitor_run+0x15c>
			 else if (cmd == 'V')
    173c:	2b56      	cmp	r3, #86	; 0x56
    173e:	d13f      	bne.n	17c0 <sam_ba_monitor_run+0x284>
				 ptr_monitor_if->putdata("v", 1);
    1740:	4b5a      	ldr	r3, [pc, #360]	; (18ac <sam_ba_monitor_run+0x370>)
    1742:	2101      	movs	r1, #1
    1744:	681b      	ldr	r3, [r3, #0]
    1746:	4868      	ldr	r0, [pc, #416]	; (18e8 <sam_ba_monitor_run+0x3ac>)
    1748:	68db      	ldr	r3, [r3, #12]
    174a:	4798      	blx	r3
				 ptr_monitor_if->putdata((uint8_t *) RomBOOT_Version,
    174c:	4b57      	ldr	r3, [pc, #348]	; (18ac <sam_ba_monitor_run+0x370>)
    174e:	2104      	movs	r1, #4
    1750:	681b      	ldr	r3, [r3, #0]
    1752:	4866      	ldr	r0, [pc, #408]	; (18ec <sam_ba_monitor_run+0x3b0>)
    1754:	68db      	ldr	r3, [r3, #12]
    1756:	4798      	blx	r3
				 ptr_monitor_if->putdata(" ", 1);
    1758:	4b54      	ldr	r3, [pc, #336]	; (18ac <sam_ba_monitor_run+0x370>)
    175a:	2101      	movs	r1, #1
    175c:	681b      	ldr	r3, [r3, #0]
    175e:	4864      	ldr	r0, [pc, #400]	; (18f0 <sam_ba_monitor_run+0x3b4>)
    1760:	68db      	ldr	r3, [r3, #12]
    1762:	4798      	blx	r3
				 i = 0;
    1764:	2300      	movs	r3, #0
				 ptr = (uint8_t*) &(__DATE__);
    1766:	4863      	ldr	r0, [pc, #396]	; (18f4 <sam_ba_monitor_run+0x3b8>)
    1768:	6028      	str	r0, [r5, #0]
				 i++;
    176a:	6023      	str	r3, [r4, #0]
				 while (*ptr++ != '\0')
    176c:	682b      	ldr	r3, [r5, #0]
    176e:	1c5a      	adds	r2, r3, #1
    1770:	602a      	str	r2, [r5, #0]
    1772:	781b      	ldrb	r3, [r3, #0]
    1774:	60bb      	str	r3, [r7, #8]
    1776:	2b00      	cmp	r3, #0
    1778:	d11b      	bne.n	17b2 <sam_ba_monitor_run+0x276>
				 ptr_monitor_if->putdata((uint8_t *) &(__DATE__), i);
    177a:	4e4c      	ldr	r6, [pc, #304]	; (18ac <sam_ba_monitor_run+0x370>)
    177c:	6821      	ldr	r1, [r4, #0]
    177e:	6833      	ldr	r3, [r6, #0]
    1780:	68db      	ldr	r3, [r3, #12]
    1782:	4798      	blx	r3
				 ptr_monitor_if->putdata(" ", 1);
    1784:	6833      	ldr	r3, [r6, #0]
    1786:	2101      	movs	r1, #1
    1788:	68db      	ldr	r3, [r3, #12]
    178a:	4859      	ldr	r0, [pc, #356]	; (18f0 <sam_ba_monitor_run+0x3b4>)
    178c:	4798      	blx	r3
				 i = 0;
    178e:	68bb      	ldr	r3, [r7, #8]
				 ptr = (uint8_t*) &(__TIME__);
    1790:	4859      	ldr	r0, [pc, #356]	; (18f8 <sam_ba_monitor_run+0x3bc>)
				 while (*ptr++ != '\0')
    1792:	4a49      	ldr	r2, [pc, #292]	; (18b8 <sam_ba_monitor_run+0x37c>)
				 i++;
    1794:	4949      	ldr	r1, [pc, #292]	; (18bc <sam_ba_monitor_run+0x380>)
				 i = 0;
    1796:	6023      	str	r3, [r4, #0]
				 ptr = (uint8_t*) &(__TIME__);
    1798:	6028      	str	r0, [r5, #0]
				 while (*ptr++ != '\0')
    179a:	6813      	ldr	r3, [r2, #0]
    179c:	1c5d      	adds	r5, r3, #1
    179e:	6015      	str	r5, [r2, #0]
    17a0:	781b      	ldrb	r3, [r3, #0]
    17a2:	2b00      	cmp	r3, #0
    17a4:	d108      	bne.n	17b8 <sam_ba_monitor_run+0x27c>
				 ptr_monitor_if->putdata((uint8_t *) &(__TIME__), i);
    17a6:	6833      	ldr	r3, [r6, #0]
    17a8:	6821      	ldr	r1, [r4, #0]
    17aa:	68db      	ldr	r3, [r3, #12]
    17ac:	4798      	blx	r3
				 ptr_monitor_if->putdata("\n\r", 2);
    17ae:	6833      	ldr	r3, [r6, #0]
    17b0:	e7b1      	b.n	1716 <sam_ba_monitor_run+0x1da>
				 i++;
    17b2:	6823      	ldr	r3, [r4, #0]
    17b4:	3301      	adds	r3, #1
    17b6:	e7d8      	b.n	176a <sam_ba_monitor_run+0x22e>
				 i++;
    17b8:	680b      	ldr	r3, [r1, #0]
    17ba:	3301      	adds	r3, #1
    17bc:	600b      	str	r3, [r1, #0]
    17be:	e7ec      	b.n	179a <sam_ba_monitor_run+0x25e>
    17c0:	4d41      	ldr	r5, [pc, #260]	; (18c8 <sam_ba_monitor_run+0x38c>)
			 else if (cmd == 'J')
    17c2:	2b4a      	cmp	r3, #74	; 0x4a
    17c4:	d113      	bne.n	17ee <sam_ba_monitor_run+0x2b2>
				 if (current_number == 0)
    17c6:	682b      	ldr	r3, [r5, #0]
    17c8:	4936      	ldr	r1, [pc, #216]	; (18a4 <sam_ba_monitor_run+0x368>)
    17ca:	4a4c      	ldr	r2, [pc, #304]	; (18fc <sam_ba_monitor_run+0x3c0>)
    17cc:	2b00      	cmp	r3, #0
    17ce:	d107      	bne.n	17e0 <sam_ba_monitor_run+0x2a4>
					 src_buff_addr = (uint32_t*)ptr_data;
    17d0:	680b      	ldr	r3, [r1, #0]
    17d2:	6013      	str	r3, [r2, #0]
				 ptr_monitor_if->putdata("J\n\r", 3);
    17d4:	4b35      	ldr	r3, [pc, #212]	; (18ac <sam_ba_monitor_run+0x370>)
    17d6:	2103      	movs	r1, #3
    17d8:	681b      	ldr	r3, [r3, #0]
    17da:	4849      	ldr	r0, [pc, #292]	; (1900 <sam_ba_monitor_run+0x3c4>)
    17dc:	68db      	ldr	r3, [r3, #12]
    17de:	e753      	b.n	1688 <sam_ba_monitor_run+0x14c>
					 at25dfx_chip_write_buffer(&at25dfx_chip,dst_address,&data[0],size);
    17e0:	b29b      	uxth	r3, r3
    17e2:	6812      	ldr	r2, [r2, #0]
    17e4:	6809      	ldr	r1, [r1, #0]
    17e6:	4c47      	ldr	r4, [pc, #284]	; (1904 <sam_ba_monitor_run+0x3c8>)
    17e8:	4847      	ldr	r0, [pc, #284]	; (1908 <sam_ba_monitor_run+0x3cc>)
    17ea:	47a0      	blx	r4
    17ec:	e7f2      	b.n	17d4 <sam_ba_monitor_run+0x298>
			 else if (cmd == 'K')
    17ee:	2b4b      	cmp	r3, #75	; 0x4b
    17f0:	d113      	bne.n	181a <sam_ba_monitor_run+0x2de>
				 for (uint32_t address=ptr_data;address<=current_number;(address=address+0x001000))
    17f2:	4b2c      	ldr	r3, [pc, #176]	; (18a4 <sam_ba_monitor_run+0x368>)
    17f4:	681c      	ldr	r4, [r3, #0]
    17f6:	682b      	ldr	r3, [r5, #0]
    17f8:	429c      	cmp	r4, r3
    17fa:	d905      	bls.n	1808 <sam_ba_monitor_run+0x2cc>
				ptr_monitor_if->putdata("K\n\r", 3);
    17fc:	4b2b      	ldr	r3, [pc, #172]	; (18ac <sam_ba_monitor_run+0x370>)
    17fe:	2103      	movs	r1, #3
    1800:	681b      	ldr	r3, [r3, #0]
    1802:	4842      	ldr	r0, [pc, #264]	; (190c <sam_ba_monitor_run+0x3d0>)
    1804:	68db      	ldr	r3, [r3, #12]
    1806:	e73f      	b.n	1688 <sam_ba_monitor_run+0x14c>
					 at25dfx_chip_erase_block(&at25dfx_chip,address,AT25DFX_BLOCK_SIZE_4KB);
    1808:	0021      	movs	r1, r4
    180a:	4b41      	ldr	r3, [pc, #260]	; (1910 <sam_ba_monitor_run+0x3d4>)
    180c:	2200      	movs	r2, #0
    180e:	483e      	ldr	r0, [pc, #248]	; (1908 <sam_ba_monitor_run+0x3cc>)
    1810:	4798      	blx	r3
				 for (uint32_t address=ptr_data;address<=current_number;(address=address+0x001000))
    1812:	2380      	movs	r3, #128	; 0x80
    1814:	015b      	lsls	r3, r3, #5
    1816:	18e4      	adds	r4, r4, r3
    1818:	e7ed      	b.n	17f6 <sam_ba_monitor_run+0x2ba>
			 else if (cmd =='P')
    181a:	2b50      	cmp	r3, #80	; 0x50
    181c:	d115      	bne.n	184a <sam_ba_monitor_run+0x30e>
			 {
    181e:	466e      	mov	r6, sp
				 uint32_t size = current_number;
    1820:	682c      	ldr	r4, [r5, #0]
				 uint32_t dst_address = (uint32_t*)ptr_data;
    1822:	4b20      	ldr	r3, [pc, #128]	; (18a4 <sam_ba_monitor_run+0x368>)
				 at25dfx_chip_read_buffer(&at25dfx_chip,dst_address,page_buffer,size);
    1824:	4838      	ldr	r0, [pc, #224]	; (1908 <sam_ba_monitor_run+0x3cc>)
				 uint32_t dst_address = (uint32_t*)ptr_data;
    1826:	6819      	ldr	r1, [r3, #0]
				 uint8_t page_buffer[size];
    1828:	1de3      	adds	r3, r4, #7
    182a:	08db      	lsrs	r3, r3, #3
    182c:	00db      	lsls	r3, r3, #3
    182e:	1af3      	subs	r3, r6, r3
    1830:	469d      	mov	sp, r3
				 at25dfx_chip_read_buffer(&at25dfx_chip,dst_address,page_buffer,size);
    1832:	4d38      	ldr	r5, [pc, #224]	; (1914 <sam_ba_monitor_run+0x3d8>)
    1834:	466a      	mov	r2, sp
    1836:	b2a3      	uxth	r3, r4
    1838:	47a8      	blx	r5
				 ptr_monitor_if->putdata(page_buffer,size);
    183a:	4b1c      	ldr	r3, [pc, #112]	; (18ac <sam_ba_monitor_run+0x370>)
    183c:	4668      	mov	r0, sp
    183e:	681b      	ldr	r3, [r3, #0]
    1840:	0021      	movs	r1, r4
    1842:	68db      	ldr	r3, [r3, #12]
    1844:	4798      	blx	r3
    1846:	46b5      	mov	sp, r6
    1848:	e6fa      	b.n	1640 <sam_ba_monitor_run+0x104>
			 else if (cmd == 'I')
    184a:	2b49      	cmp	r3, #73	; 0x49
    184c:	d110      	bne.n	1870 <sam_ba_monitor_run+0x334>
					 eeprom_emulator_read_page((uint8_t)current_number, page_data);
    184e:	2210      	movs	r2, #16
    1850:	6828      	ldr	r0, [r5, #0]
    1852:	18ba      	adds	r2, r7, r2
    1854:	3b25      	subs	r3, #37	; 0x25
    1856:	18d1      	adds	r1, r2, r3
    1858:	b2c0      	uxtb	r0, r0
    185a:	4b2f      	ldr	r3, [pc, #188]	; (1918 <sam_ba_monitor_run+0x3dc>)
    185c:	4798      	blx	r3
					 ptr_monitor_if->putdata(page_data,EEPROM_PAGE_SIZE);
    185e:	2010      	movs	r0, #16
    1860:	2224      	movs	r2, #36	; 0x24
    1862:	4b12      	ldr	r3, [pc, #72]	; (18ac <sam_ba_monitor_run+0x370>)
    1864:	1838      	adds	r0, r7, r0
    1866:	681b      	ldr	r3, [r3, #0]
    1868:	213c      	movs	r1, #60	; 0x3c
    186a:	68db      	ldr	r3, [r3, #12]
    186c:	1880      	adds	r0, r0, r2
    186e:	e70b      	b.n	1688 <sam_ba_monitor_run+0x14c>
			 else if (cmd == 'L')
    1870:	2b4c      	cmp	r3, #76	; 0x4c
    1872:	d169      	bne.n	1948 <sam_ba_monitor_run+0x40c>
				 if (current_number == 0)
    1874:	682a      	ldr	r2, [r5, #0]
    1876:	490b      	ldr	r1, [pc, #44]	; (18a4 <sam_ba_monitor_run+0x368>)
    1878:	4b28      	ldr	r3, [pc, #160]	; (191c <sam_ba_monitor_run+0x3e0>)
    187a:	2a00      	cmp	r2, #0
    187c:	d152      	bne.n	1924 <sam_ba_monitor_run+0x3e8>
					 src_buff_addr = (uint32_t*)ptr_data;
    187e:	680a      	ldr	r2, [r1, #0]
    1880:	601a      	str	r2, [r3, #0]
				 ptr_monitor_if->putdata("L\n\r", 3);
    1882:	4b0a      	ldr	r3, [pc, #40]	; (18ac <sam_ba_monitor_run+0x370>)
    1884:	2103      	movs	r1, #3
    1886:	681b      	ldr	r3, [r3, #0]
    1888:	4825      	ldr	r0, [pc, #148]	; (1920 <sam_ba_monitor_run+0x3e4>)
    188a:	68db      	ldr	r3, [r3, #12]
    188c:	e6fc      	b.n	1688 <sam_ba_monitor_run+0x14c>
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	0000a0b0 	.word	0x0000a0b0
    1894:	41004000 	.word	0x41004000
    1898:	20000c20 	.word	0x20000c20
    189c:	20000c18 	.word	0x20000c18
    18a0:	20000c14 	.word	0x20000c14
    18a4:	20000c64 	.word	0x20000c64
    18a8:	20000c78 	.word	0x20000c78
    18ac:	20000c68 	.word	0x20000c68
    18b0:	20000c24 	.word	0x20000c24
    18b4:	20000c0c 	.word	0x20000c0c
    18b8:	20000c10 	.word	0x20000c10
    18bc:	20000c1c 	.word	0x20000c1c
    18c0:	2000031c 	.word	0x2000031c
    18c4:	0000a304 	.word	0x0000a304
    18c8:	20000c70 	.word	0x20000c70
    18cc:	20000c74 	.word	0x20000c74
    18d0:	00009239 	.word	0x00009239
    18d4:	20000c08 	.word	0x20000c08
    18d8:	0000a307 	.word	0x0000a307
    18dc:	00001485 	.word	0x00001485
    18e0:	000014f5 	.word	0x000014f5
    18e4:	20000c6c 	.word	0x20000c6c
    18e8:	0000a2d6 	.word	0x0000a2d6
    18ec:	0000a0d0 	.word	0x0000a0d0
    18f0:	0000a498 	.word	0x0000a498
    18f4:	0000a2d8 	.word	0x0000a2d8
    18f8:	0000a2e4 	.word	0x0000a2e4
    18fc:	20000320 	.word	0x20000320
    1900:	0000a2ed 	.word	0x0000a2ed
    1904:	00001d45 	.word	0x00001d45
    1908:	20000b80 	.word	0x20000b80
    190c:	0000a2f1 	.word	0x0000a2f1
    1910:	00001e15 	.word	0x00001e15
    1914:	00001cf5 	.word	0x00001cf5
    1918:	00007315 	.word	0x00007315
    191c:	20000324 	.word	0x20000324
    1920:	0000a2f5 	.word	0x0000a2f5
					 memcpy(page_data,&databuff[0],size);
    1924:	2010      	movs	r0, #16
					 uint32_t dst_address = (uint32_t*)ptr_data;
    1926:	680c      	ldr	r4, [r1, #0]
					 memcpy(page_data,&databuff[0],size);
    1928:	6819      	ldr	r1, [r3, #0]
    192a:	2324      	movs	r3, #36	; 0x24
    192c:	1838      	adds	r0, r7, r0
    192e:	18c0      	adds	r0, r0, r3
    1930:	4b5d      	ldr	r3, [pc, #372]	; (1aa8 <sam_ba_monitor_run+0x56c>)
    1932:	4798      	blx	r3
					 eeprom_emulator_write_page((uint8_t)dst_address, page_data);
    1934:	2210      	movs	r2, #16
    1936:	2324      	movs	r3, #36	; 0x24
    1938:	18ba      	adds	r2, r7, r2
    193a:	18d1      	adds	r1, r2, r3
    193c:	b2e0      	uxtb	r0, r4
    193e:	4b5b      	ldr	r3, [pc, #364]	; (1aac <sam_ba_monitor_run+0x570>)
    1940:	4798      	blx	r3
					 eeprom_emulator_commit_page_buffer();
    1942:	4b5b      	ldr	r3, [pc, #364]	; (1ab0 <sam_ba_monitor_run+0x574>)
    1944:	4798      	blx	r3
    1946:	e79c      	b.n	1882 <sam_ba_monitor_run+0x346>
			 else if (cmd == 'X')
    1948:	2b58      	cmp	r3, #88	; 0x58
    194a:	d11b      	bne.n	1984 <sam_ba_monitor_run+0x448>
				 uint32_t dst_addr = current_number; // starting address
    194c:	682b      	ldr	r3, [r5, #0]
					 NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
    194e:	4959      	ldr	r1, [pc, #356]	; (1ab4 <sam_ba_monitor_run+0x578>)
				 while (dst_addr < MAX_FLASH)
    1950:	4a59      	ldr	r2, [pc, #356]	; (1ab8 <sam_ba_monitor_run+0x57c>)
    1952:	6812      	ldr	r2, [r2, #0]
    1954:	60ba      	str	r2, [r7, #8]
    1956:	4293      	cmp	r3, r2
    1958:	d305      	bcc.n	1966 <sam_ba_monitor_run+0x42a>
				 ptr_monitor_if->putdata("X\n\r", 3);
    195a:	4b58      	ldr	r3, [pc, #352]	; (1abc <sam_ba_monitor_run+0x580>)
    195c:	2103      	movs	r1, #3
    195e:	681b      	ldr	r3, [r3, #0]
    1960:	4857      	ldr	r0, [pc, #348]	; (1ac0 <sam_ba_monitor_run+0x584>)
    1962:	68db      	ldr	r3, [r3, #12]
    1964:	e690      	b.n	1688 <sam_ba_monitor_run+0x14c>
					 NVMCTRL->ADDR.reg = dst_addr / 2;
    1966:	68f8      	ldr	r0, [r7, #12]
    1968:	085a      	lsrs	r2, r3, #1
    196a:	61c2      	str	r2, [r0, #28]
					 NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_ER;
    196c:	68fa      	ldr	r2, [r7, #12]
    196e:	8011      	strh	r1, [r2, #0]
					 while (NVMCTRL->INTFLAG.bit.READY == 0)
    1970:	68fa      	ldr	r2, [r7, #12]
    1972:	7d12      	ldrb	r2, [r2, #20]
    1974:	07d2      	lsls	r2, r2, #31
    1976:	d5fb      	bpl.n	1970 <sam_ba_monitor_run+0x434>
					 dst_addr += PAGE_SIZE * 4; // Skip a ROW
    1978:	4a52      	ldr	r2, [pc, #328]	; (1ac4 <sam_ba_monitor_run+0x588>)
    197a:	6812      	ldr	r2, [r2, #0]
    197c:	60ba      	str	r2, [r7, #8]
    197e:	0092      	lsls	r2, r2, #2
    1980:	189b      	adds	r3, r3, r2
    1982:	e7e5      	b.n	1950 <sam_ba_monitor_run+0x414>
			 else if (cmd == 'Y')
    1984:	2b59      	cmp	r3, #89	; 0x59
    1986:	d138      	bne.n	19fa <sam_ba_monitor_run+0x4be>
				 if (current_number == 0)
    1988:	682b      	ldr	r3, [r5, #0]
    198a:	4a4f      	ldr	r2, [pc, #316]	; (1ac8 <sam_ba_monitor_run+0x58c>)
    198c:	494f      	ldr	r1, [pc, #316]	; (1acc <sam_ba_monitor_run+0x590>)
    198e:	2b00      	cmp	r3, #0
    1990:	d107      	bne.n	19a2 <sam_ba_monitor_run+0x466>
					 src_buff_addr = (uint32_t*)ptr_data;
    1992:	6813      	ldr	r3, [r2, #0]
    1994:	600b      	str	r3, [r1, #0]
				 ptr_monitor_if->putdata("Y\n\r", 3);
    1996:	4b49      	ldr	r3, [pc, #292]	; (1abc <sam_ba_monitor_run+0x580>)
    1998:	2103      	movs	r1, #3
    199a:	681b      	ldr	r3, [r3, #0]
    199c:	484c      	ldr	r0, [pc, #304]	; (1ad0 <sam_ba_monitor_run+0x594>)
    199e:	68db      	ldr	r3, [r3, #12]
    19a0:	e672      	b.n	1688 <sam_ba_monitor_run+0x14c>
					 NVMCTRL->CTRLB.bit.MANW = 0;
    19a2:	2480      	movs	r4, #128	; 0x80
					 uint32_t *src_addr = src_buff_addr;
    19a4:	6808      	ldr	r0, [r1, #0]
					 uint32_t *dst_addr = (uint32_t*)ptr_data;
    19a6:	6811      	ldr	r1, [r2, #0]
					 NVMCTRL->CTRLB.bit.MANW = 0;
    19a8:	68fa      	ldr	r2, [r7, #12]
						 NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    19aa:	4d4a      	ldr	r5, [pc, #296]	; (1ad4 <sam_ba_monitor_run+0x598>)
					 NVMCTRL->CTRLB.bit.MANW = 0;
    19ac:	6852      	ldr	r2, [r2, #4]
					 uint32_t size = current_number/4;
    19ae:	089b      	lsrs	r3, r3, #2
					 NVMCTRL->CTRLB.bit.MANW = 0;
    19b0:	43a2      	bics	r2, r4
    19b2:	68fc      	ldr	r4, [r7, #12]
    19b4:	6062      	str	r2, [r4, #4]
						 NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    19b6:	4a48      	ldr	r2, [pc, #288]	; (1ad8 <sam_ba_monitor_run+0x59c>)
    19b8:	4694      	mov	ip, r2
					 while (size)
    19ba:	2b00      	cmp	r3, #0
    19bc:	d0eb      	beq.n	1996 <sam_ba_monitor_run+0x45a>
						 NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_PBC;
    19be:	68fa      	ldr	r2, [r7, #12]
    19c0:	4c46      	ldr	r4, [pc, #280]	; (1adc <sam_ba_monitor_run+0x5a0>)
    19c2:	8014      	strh	r4, [r2, #0]
						 while (NVMCTRL->INTFLAG.bit.READY == 0)
    19c4:	68fa      	ldr	r2, [r7, #12]
    19c6:	7d12      	ldrb	r2, [r2, #20]
    19c8:	07d2      	lsls	r2, r2, #31
    19ca:	d5fb      	bpl.n	19c4 <sam_ba_monitor_run+0x488>
    19cc:	2200      	movs	r2, #0
						 for (i=0; i<(PAGE_SIZE/4) && i<size; i++)
    19ce:	4c3d      	ldr	r4, [pc, #244]	; (1ac4 <sam_ba_monitor_run+0x588>)
    19d0:	6824      	ldr	r4, [r4, #0]
    19d2:	08a4      	lsrs	r4, r4, #2
    19d4:	42a2      	cmp	r2, r4
    19d6:	d309      	bcc.n	19ec <sam_ba_monitor_run+0x4b0>
						 NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMDEX_KEY | NVMCTRL_CTRLA_CMD_WP;
    19d8:	4664      	mov	r4, ip
    19da:	802c      	strh	r4, [r5, #0]
						 while (NVMCTRL->INTFLAG.bit.READY == 0)
    19dc:	7d2c      	ldrb	r4, [r5, #20]
    19de:	07e4      	lsls	r4, r4, #31
    19e0:	d5fc      	bpl.n	19dc <sam_ba_monitor_run+0x4a0>
						 dst_addr += i;
    19e2:	0094      	lsls	r4, r2, #2
    19e4:	1909      	adds	r1, r1, r4
						 src_addr += i;
    19e6:	1900      	adds	r0, r0, r4
						 size     -= i;
    19e8:	1a9b      	subs	r3, r3, r2
    19ea:	e7e6      	b.n	19ba <sam_ba_monitor_run+0x47e>
						 for (i=0; i<(PAGE_SIZE/4) && i<size; i++)
    19ec:	429a      	cmp	r2, r3
    19ee:	d0f3      	beq.n	19d8 <sam_ba_monitor_run+0x49c>
    19f0:	0094      	lsls	r4, r2, #2
							 dst_addr[i] = src_addr[i];
    19f2:	5906      	ldr	r6, [r0, r4]
						 for (i=0; i<(PAGE_SIZE/4) && i<size; i++)
    19f4:	3201      	adds	r2, #1
							 dst_addr[i] = src_addr[i];
    19f6:	510e      	str	r6, [r1, r4]
    19f8:	e7e9      	b.n	19ce <sam_ba_monitor_run+0x492>
			 else if (cmd == 'Z')
    19fa:	2b5a      	cmp	r3, #90	; 0x5a
    19fc:	d000      	beq.n	1a00 <sam_ba_monitor_run+0x4c4>
    19fe:	e61f      	b.n	1640 <sam_ba_monitor_run+0x104>
				 uint16_t crc = 0;
    1a00:	2600      	movs	r6, #0
				 uint8_t *data = (uint8_t *)ptr_data;
    1a02:	4b31      	ldr	r3, [pc, #196]	; (1ac8 <sam_ba_monitor_run+0x58c>)
    1a04:	682d      	ldr	r5, [r5, #0]
    1a06:	681c      	ldr	r4, [r3, #0]
    1a08:	1965      	adds	r5, r4, r5
				 for (i=0; i<size; i++)
    1a0a:	42a5      	cmp	r5, r4
    1a0c:	d120      	bne.n	1a50 <sam_ba_monitor_run+0x514>
				 ptr_monitor_if->putdata("Z", 1);
    1a0e:	4c2b      	ldr	r4, [pc, #172]	; (1abc <sam_ba_monitor_run+0x580>)
    1a10:	2101      	movs	r1, #1
    1a12:	6823      	ldr	r3, [r4, #0]
    1a14:	4832      	ldr	r0, [pc, #200]	; (1ae0 <sam_ba_monitor_run+0x5a4>)
    1a16:	68db      	ldr	r3, [r3, #12]
    1a18:	4798      	blx	r3
		buff[7-i] = d > 9 ? 'A' + d - 10 : '0' + d;
    1a1a:	2010      	movs	r0, #16
    1a1c:	2124      	movs	r1, #36	; 0x24
				 put_uint32(crc);
    1a1e:	0033      	movs	r3, r6
    1a20:	2207      	movs	r2, #7
		buff[7-i] = d > 9 ? 'A' + d - 10 : '0' + d;
    1a22:	1838      	adds	r0, r7, r0
    1a24:	1840      	adds	r0, r0, r1
		int d = n & 0XF;
    1a26:	210f      	movs	r1, #15
    1a28:	4019      	ands	r1, r3
		buff[7-i] = d > 9 ? 'A' + d - 10 : '0' + d;
    1a2a:	000d      	movs	r5, r1
		n = (n >> 4);
    1a2c:	091b      	lsrs	r3, r3, #4
		buff[7-i] = d > 9 ? 'A' + d - 10 : '0' + d;
    1a2e:	3530      	adds	r5, #48	; 0x30
    1a30:	2909      	cmp	r1, #9
    1a32:	dd01      	ble.n	1a38 <sam_ba_monitor_run+0x4fc>
    1a34:	3137      	adds	r1, #55	; 0x37
    1a36:	000d      	movs	r5, r1
    1a38:	5415      	strb	r5, [r2, r0]
	for (i=0; i<8; i++)
    1a3a:	3a01      	subs	r2, #1
    1a3c:	d2f3      	bcs.n	1a26 <sam_ba_monitor_run+0x4ea>
	ptr_monitor_if->putdata(buff,8);
    1a3e:	6823      	ldr	r3, [r4, #0]
    1a40:	2108      	movs	r1, #8
    1a42:	68db      	ldr	r3, [r3, #12]
    1a44:	4798      	blx	r3
				 ptr_monitor_if->putdata("#\n\r", 1);
    1a46:	6823      	ldr	r3, [r4, #0]
    1a48:	2101      	movs	r1, #1
    1a4a:	68db      	ldr	r3, [r3, #12]
    1a4c:	4825      	ldr	r0, [pc, #148]	; (1ae4 <sam_ba_monitor_run+0x5a8>)
    1a4e:	e61b      	b.n	1688 <sam_ba_monitor_run+0x14c>
				 crc = serial_add_crc(*data++, crc);
    1a50:	7820      	ldrb	r0, [r4, #0]
    1a52:	0031      	movs	r1, r6
    1a54:	4b24      	ldr	r3, [pc, #144]	; (1ae8 <sam_ba_monitor_run+0x5ac>)
    1a56:	4798      	blx	r3
    1a58:	3401      	adds	r4, #1
    1a5a:	0006      	movs	r6, r0
    1a5c:	e7d5      	b.n	1a0a <sam_ba_monitor_run+0x4ce>
			}
		 }
		 else
		 {
			 if (('0' <= *ptr) && (*ptr <= '9'))
    1a5e:	0019      	movs	r1, r3
    1a60:	3930      	subs	r1, #48	; 0x30
    1a62:	b2c8      	uxtb	r0, r1
    1a64:	4a21      	ldr	r2, [pc, #132]	; (1aec <sam_ba_monitor_run+0x5b0>)
    1a66:	2809      	cmp	r0, #9
    1a68:	d804      	bhi.n	1a74 <sam_ba_monitor_run+0x538>
			 {
				 current_number = (current_number << 4) | (*ptr - '0');
    1a6a:	6813      	ldr	r3, [r2, #0]
    1a6c:	011b      	lsls	r3, r3, #4
			 {
				 current_number = (current_number << 4) | (*ptr - 'A' + 0xa);
			 }
			 else if (('a' <= *ptr) && (*ptr <= 'f'))
			 {
				 current_number = (current_number << 4) | (*ptr - 'a' + 0xa);
    1a6e:	430b      	orrs	r3, r1
				 current_number = 0;
			 }
			 else
			 {
				 cmd = *ptr;
				 current_number = 0;
    1a70:	6013      	str	r3, [r2, #0]
    1a72:	e5f5      	b.n	1660 <sam_ba_monitor_run+0x124>
			 else if (('A' <= *ptr) && (*ptr <= 'F'))
    1a74:	0019      	movs	r1, r3
    1a76:	3941      	subs	r1, #65	; 0x41
    1a78:	2905      	cmp	r1, #5
    1a7a:	d803      	bhi.n	1a84 <sam_ba_monitor_run+0x548>
				 current_number = (current_number << 4) | (*ptr - 'A' + 0xa);
    1a7c:	6811      	ldr	r1, [r2, #0]
    1a7e:	3b37      	subs	r3, #55	; 0x37
    1a80:	0109      	lsls	r1, r1, #4
    1a82:	e7f4      	b.n	1a6e <sam_ba_monitor_run+0x532>
			 else if (('a' <= *ptr) && (*ptr <= 'f'))
    1a84:	0019      	movs	r1, r3
    1a86:	3961      	subs	r1, #97	; 0x61
    1a88:	2905      	cmp	r1, #5
    1a8a:	d803      	bhi.n	1a94 <sam_ba_monitor_run+0x558>
				 current_number = (current_number << 4) | (*ptr - 'a' + 0xa);
    1a8c:	6811      	ldr	r1, [r2, #0]
    1a8e:	3b57      	subs	r3, #87	; 0x57
    1a90:	0109      	lsls	r1, r1, #4
    1a92:	e7ec      	b.n	1a6e <sam_ba_monitor_run+0x532>
			 else if (*ptr == ',')
    1a94:	2b2c      	cmp	r3, #44	; 0x2c
    1a96:	d104      	bne.n	1aa2 <sam_ba_monitor_run+0x566>
				 ptr_data = (uint8_t *) current_number;
    1a98:	4b0b      	ldr	r3, [pc, #44]	; (1ac8 <sam_ba_monitor_run+0x58c>)
    1a9a:	6811      	ldr	r1, [r2, #0]
    1a9c:	6019      	str	r1, [r3, #0]
				 current_number = 0;
    1a9e:	2300      	movs	r3, #0
    1aa0:	e7e6      	b.n	1a70 <sam_ba_monitor_run+0x534>
				 cmd = *ptr;
    1aa2:	4913      	ldr	r1, [pc, #76]	; (1af0 <sam_ba_monitor_run+0x5b4>)
    1aa4:	700b      	strb	r3, [r1, #0]
    1aa6:	e7fa      	b.n	1a9e <sam_ba_monitor_run+0x562>
    1aa8:	00009239 	.word	0x00009239
    1aac:	0000739d 	.word	0x0000739d
    1ab0:	00007371 	.word	0x00007371
    1ab4:	ffffa502 	.word	0xffffa502
    1ab8:	20000c14 	.word	0x20000c14
    1abc:	20000c68 	.word	0x20000c68
    1ac0:	0000a2f9 	.word	0x0000a2f9
    1ac4:	20000c20 	.word	0x20000c20
    1ac8:	20000c64 	.word	0x20000c64
    1acc:	20000328 	.word	0x20000328
    1ad0:	0000a2fd 	.word	0x0000a2fd
    1ad4:	41004000 	.word	0x41004000
    1ad8:	ffffa504 	.word	0xffffa504
    1adc:	ffffa544 	.word	0xffffa544
    1ae0:	0000a301 	.word	0x0000a301
    1ae4:	0000a303 	.word	0x0000a303
    1ae8:	00001525 	.word	0x00001525
    1aec:	20000c70 	.word	0x20000c70
    1af0:	20000c78 	.word	0x20000c78

00001af4 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
    1af4:	b570      	push	{r4, r5, r6, lr}
    1af6:	0005      	movs	r5, r0
	if (!str) return;
	for (char *p = str; *p; p++) {
		*p = toupper(*p);
    1af8:	2603      	movs	r6, #3
	if (!str) return;
    1afa:	2800      	cmp	r0, #0
    1afc:	d10a      	bne.n	1b14 <StringtoUpperCase+0x20>
	}
}
    1afe:	bd70      	pop	{r4, r5, r6, pc}
		*p = toupper(*p);
    1b00:	4b06      	ldr	r3, [pc, #24]	; (1b1c <StringtoUpperCase+0x28>)
    1b02:	4798      	blx	r3
    1b04:	1900      	adds	r0, r0, r4
    1b06:	7843      	ldrb	r3, [r0, #1]
    1b08:	4033      	ands	r3, r6
    1b0a:	2b02      	cmp	r3, #2
    1b0c:	d100      	bne.n	1b10 <StringtoUpperCase+0x1c>
    1b0e:	3c20      	subs	r4, #32
    1b10:	702c      	strb	r4, [r5, #0]
	for (char *p = str; *p; p++) {
    1b12:	3501      	adds	r5, #1
    1b14:	782c      	ldrb	r4, [r5, #0]
    1b16:	2c00      	cmp	r4, #0
    1b18:	d1f2      	bne.n	1b00 <StringtoUpperCase+0xc>
    1b1a:	e7f0      	b.n	1afe <StringtoUpperCase+0xa>
    1b1c:	000091d1 	.word	0x000091d1

00001b20 <port_pin_set_output_level>:
		return NULL;
    1b20:	2200      	movs	r2, #0
{
    1b22:	b510      	push	{r4, lr}
	uint8_t group_index = (gpio_pin / 32);
    1b24:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    1b26:	09c4      	lsrs	r4, r0, #7
    1b28:	4294      	cmp	r4, r2
    1b2a:	d102      	bne.n	1b32 <port_pin_set_output_level+0x12>
		return &(ports[port_index]->Group[group_index]);
    1b2c:	01da      	lsls	r2, r3, #7
    1b2e:	4b06      	ldr	r3, [pc, #24]	; (1b48 <port_pin_set_output_level+0x28>)
    1b30:	18d2      	adds	r2, r2, r3
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b32:	231f      	movs	r3, #31
    1b34:	4018      	ands	r0, r3
    1b36:	3b1e      	subs	r3, #30
    1b38:	4083      	lsls	r3, r0
	if (level) {
    1b3a:	2900      	cmp	r1, #0
    1b3c:	d001      	beq.n	1b42 <port_pin_set_output_level+0x22>
		port_base->OUTSET.reg = pin_mask;
    1b3e:	6193      	str	r3, [r2, #24]
}
    1b40:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
    1b42:	6153      	str	r3, [r2, #20]
}
    1b44:	e7fc      	b.n	1b40 <port_pin_set_output_level+0x20>
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	41004400 	.word	0x41004400

00001b4c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    1b4c:	b530      	push	{r4, r5, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1b4e:	2404      	movs	r4, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
    1b50:	6803      	ldr	r3, [r0, #0]
		/* No data has been received, return */
		return STATUS_ERR_IO;
    1b52:	2210      	movs	r2, #16
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1b54:	7e1d      	ldrb	r5, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1b56:	4225      	tst	r5, r4
    1b58:	d00c      	beq.n	1b74 <spi_read+0x28>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1b5a:	8b5d      	ldrh	r5, [r3, #26]
	enum status_code retval = STATUS_OK;
    1b5c:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1b5e:	4225      	tst	r5, r4
    1b60:	d001      	beq.n	1b66 <spi_read+0x1a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1b62:	835c      	strh	r4, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1b64:	321e      	adds	r2, #30
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b66:	7980      	ldrb	r0, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b6a:	2801      	cmp	r0, #1
    1b6c:	d104      	bne.n	1b78 <spi_read+0x2c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1b6e:	05db      	lsls	r3, r3, #23
    1b70:	0ddb      	lsrs	r3, r3, #23
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1b72:	800b      	strh	r3, [r1, #0]
	}

	return retval;
}
    1b74:	0010      	movs	r0, r2
    1b76:	bd30      	pop	{r4, r5, pc}
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1b78:	b2db      	uxtb	r3, r3
    1b7a:	e7fa      	b.n	1b72 <spi_read+0x26>

00001b7c <spi_lock>:
{
    1b7c:	b570      	push	{r4, r5, r6, lr}
    1b7e:	0005      	movs	r5, r0
	cpu_irq_enter_critical();
    1b80:	4b06      	ldr	r3, [pc, #24]	; (1b9c <spi_lock+0x20>)
    1b82:	4798      	blx	r3
	if (module->locked) {
    1b84:	792b      	ldrb	r3, [r5, #4]
		status = STATUS_BUSY;
    1b86:	2405      	movs	r4, #5
	if (module->locked) {
    1b88:	b2db      	uxtb	r3, r3
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d102      	bne.n	1b94 <spi_lock+0x18>
		module->locked = true;
    1b8e:	2201      	movs	r2, #1
		status = STATUS_OK;
    1b90:	001c      	movs	r4, r3
		module->locked = true;
    1b92:	712a      	strb	r2, [r5, #4]
	cpu_irq_leave_critical();
    1b94:	4b02      	ldr	r3, [pc, #8]	; (1ba0 <spi_lock+0x24>)
    1b96:	4798      	blx	r3
}
    1b98:	0020      	movs	r0, r4
    1b9a:	bd70      	pop	{r4, r5, r6, pc}
    1b9c:	000074ed 	.word	0x000074ed
    1ba0:	00007521 	.word	0x00007521

00001ba4 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
    1ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum status_code status;
	uint16_t status_reg = 0;
    1ba6:	466b      	mov	r3, sp
    1ba8:	1d9d      	adds	r5, r3, #6
    1baa:	2300      	movs	r3, #0
{
    1bac:	0004      	movs	r4, r0

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    1bae:	2601      	movs	r6, #1
	uint16_t status_reg = 0;
    1bb0:	802b      	strh	r3, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1bb2:	6803      	ldr	r3, [r0, #0]
    1bb4:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1bb6:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
    1bb8:	4233      	tst	r3, r6
    1bba:	d0fc      	beq.n	1bb6 <_at25dfx_chip_get_nonbusy_status+0x12>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    1bbc:	4b19      	ldr	r3, [pc, #100]	; (1c24 <_at25dfx_chip_get_nonbusy_status+0x80>)
    1bbe:	7960      	ldrb	r0, [r4, #5]
    1bc0:	2100      	movs	r1, #0
    1bc2:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1bc4:	6823      	ldr	r3, [r4, #0]
    1bc6:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1bc8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1bca:	4232      	tst	r2, r6
    1bcc:	d001      	beq.n	1bd2 <_at25dfx_chip_get_nonbusy_status+0x2e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1bce:	2205      	movs	r2, #5
    1bd0:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    1bd2:	2304      	movs	r3, #4
    1bd4:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1bd6:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1bd8:	7e0a      	ldrb	r2, [r1, #24]
    1bda:	421a      	tst	r2, r3
    1bdc:	d0fc      	beq.n	1bd8 <_at25dfx_chip_get_nonbusy_status+0x34>
	}
	status = spi_read(chip->spi, &status_reg);
    1bde:	0029      	movs	r1, r5
    1be0:	4f11      	ldr	r7, [pc, #68]	; (1c28 <_at25dfx_chip_get_nonbusy_status+0x84>)
    1be2:	47b8      	blx	r7

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    1be4:	2601      	movs	r6, #1
	SercomSpi *const spi_module = &(module->hw->SPI);
    1be6:	6823      	ldr	r3, [r4, #0]
    1be8:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1bea:	7e1a      	ldrb	r2, [r3, #24]
    1bec:	4232      	tst	r2, r6
    1bee:	d0fc      	beq.n	1bea <_at25dfx_chip_get_nonbusy_status+0x46>
    1bf0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1bf2:	4232      	tst	r2, r6
    1bf4:	d001      	beq.n	1bfa <_at25dfx_chip_get_nonbusy_status+0x56>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1bf6:	2200      	movs	r2, #0
    1bf8:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    1bfa:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1bfc:	6802      	ldr	r2, [r0, #0]
    1bfe:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1c00:	7e13      	ldrb	r3, [r2, #24]
    1c02:	420b      	tst	r3, r1
    1c04:	d0fb      	beq.n	1bfe <_at25dfx_chip_get_nonbusy_status+0x5a>
		}
		status = spi_read(chip->spi, &status_reg);
    1c06:	0029      	movs	r1, r5
    1c08:	47b8      	blx	r7
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    1c0a:	882b      	ldrh	r3, [r5, #0]
    1c0c:	4233      	tst	r3, r6
    1c0e:	d1ea      	bne.n	1be6 <_at25dfx_chip_get_nonbusy_status+0x42>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    1c10:	7960      	ldrb	r0, [r4, #5]
    1c12:	2101      	movs	r1, #1
    1c14:	4b03      	ldr	r3, [pc, #12]	; (1c24 <_at25dfx_chip_get_nonbusy_status+0x80>)
    1c16:	4798      	blx	r3

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
    1c18:	8828      	ldrh	r0, [r5, #0]
    1c1a:	0680      	lsls	r0, r0, #26
		return STATUS_ERR_IO;
	}
	return STATUS_OK;
    1c1c:	0fc0      	lsrs	r0, r0, #31
    1c1e:	0100      	lsls	r0, r0, #4
}
    1c20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	00001b21 	.word	0x00001b21
    1c28:	00001b4d 	.word	0x00001b4d

00001c2c <_at25dfx_chip_issue_write_command_wait.isra.2>:
static inline void _at25dfx_chip_issue_write_command_wait(
    1c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c2e:	b085      	sub	sp, #20
    1c30:	0015      	movs	r5, r2
    1c32:	aa0a      	add	r2, sp, #40	; 0x28
    1c34:	0004      	movs	r4, r0
    1c36:	ca01      	ldmia	r2!, {r0}
    1c38:	8816      	ldrh	r6, [r2, #0]
	cmd_buffer[0] = cmd.opcode;
    1c3a:	aa02      	add	r2, sp, #8
static inline void _at25dfx_chip_issue_write_command_wait(
    1c3c:	9001      	str	r0, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
    1c3e:	7011      	strb	r1, [r2, #0]
	if (cmd.command_size > 1) {
    1c40:	2d01      	cmp	r5, #1
    1c42:	d905      	bls.n	1c50 <_at25dfx_chip_issue_write_command_wait.isra.2+0x24>
		cmd_buffer[3] = cmd.address & 0xff;
    1c44:	70d3      	strb	r3, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    1c46:	a902      	add	r1, sp, #8
    1c48:	0a1a      	lsrs	r2, r3, #8
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    1c4a:	0c1b      	lsrs	r3, r3, #16
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    1c4c:	708a      	strb	r2, [r1, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    1c4e:	704b      	strb	r3, [r1, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    1c50:	7960      	ldrb	r0, [r4, #5]
    1c52:	2100      	movs	r1, #0
    1c54:	4f08      	ldr	r7, [pc, #32]	; (1c78 <_at25dfx_chip_issue_write_command_wait.isra.2+0x4c>)
    1c56:	47b8      	blx	r7
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1c58:	b2aa      	uxth	r2, r5
    1c5a:	a902      	add	r1, sp, #8
    1c5c:	6820      	ldr	r0, [r4, #0]
    1c5e:	4d07      	ldr	r5, [pc, #28]	; (1c7c <_at25dfx_chip_issue_write_command_wait.isra.2+0x50>)
    1c60:	47a8      	blx	r5
	if (cmd.length) {
    1c62:	2e00      	cmp	r6, #0
    1c64:	d003      	beq.n	1c6e <_at25dfx_chip_issue_write_command_wait.isra.2+0x42>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    1c66:	0032      	movs	r2, r6
    1c68:	9901      	ldr	r1, [sp, #4]
    1c6a:	6820      	ldr	r0, [r4, #0]
    1c6c:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    1c6e:	7960      	ldrb	r0, [r4, #5]
    1c70:	2101      	movs	r1, #1
    1c72:	47b8      	blx	r7
}
    1c74:	b005      	add	sp, #20
    1c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c78:	00001b21 	.word	0x00001b21
    1c7c:	00005a5d 	.word	0x00005a5d

00001c80 <_at25dfx_chip_enable_write>:

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    1c80:	2300      	movs	r3, #0
{
    1c82:	b513      	push	{r0, r1, r4, lr}
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    1c84:	2201      	movs	r2, #1
    1c86:	9301      	str	r3, [sp, #4]
    1c88:	9300      	str	r3, [sp, #0]
    1c8a:	2106      	movs	r1, #6
    1c8c:	4c01      	ldr	r4, [pc, #4]	; (1c94 <_at25dfx_chip_enable_write+0x14>)
    1c8e:	47a0      	blx	r4
}
    1c90:	bd13      	pop	{r0, r1, r4, pc}
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	00001c2d 	.word	0x00001c2d

00001c98 <_at25dfx_chip_issue_read_command_wait.isra.3>:
static inline void _at25dfx_chip_issue_read_command_wait(
    1c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c9a:	b085      	sub	sp, #20
    1c9c:	0015      	movs	r5, r2
    1c9e:	aa0a      	add	r2, sp, #40	; 0x28
    1ca0:	0004      	movs	r4, r0
    1ca2:	ca01      	ldmia	r2!, {r0}
    1ca4:	8816      	ldrh	r6, [r2, #0]
	cmd_buffer[0] = cmd.opcode;
    1ca6:	aa02      	add	r2, sp, #8
static inline void _at25dfx_chip_issue_read_command_wait(
    1ca8:	9001      	str	r0, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
    1caa:	7011      	strb	r1, [r2, #0]
	if (cmd.command_size > 1) {
    1cac:	2d01      	cmp	r5, #1
    1cae:	d905      	bls.n	1cbc <_at25dfx_chip_issue_read_command_wait.isra.3+0x24>
		cmd_buffer[3] = cmd.address & 0xff;
    1cb0:	70d3      	strb	r3, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    1cb2:	a902      	add	r1, sp, #8
    1cb4:	0a1a      	lsrs	r2, r3, #8
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    1cb6:	0c1b      	lsrs	r3, r3, #16
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    1cb8:	708a      	strb	r2, [r1, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    1cba:	704b      	strb	r3, [r1, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    1cbc:	7960      	ldrb	r0, [r4, #5]
    1cbe:	2100      	movs	r1, #0
    1cc0:	4f09      	ldr	r7, [pc, #36]	; (1ce8 <_at25dfx_chip_issue_read_command_wait.isra.3+0x50>)
    1cc2:	47b8      	blx	r7
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    1cc4:	b2aa      	uxth	r2, r5
    1cc6:	a902      	add	r1, sp, #8
    1cc8:	6820      	ldr	r0, [r4, #0]
    1cca:	4b08      	ldr	r3, [pc, #32]	; (1cec <_at25dfx_chip_issue_read_command_wait.isra.3+0x54>)
    1ccc:	4798      	blx	r3
	if (cmd.length) {
    1cce:	2e00      	cmp	r6, #0
    1cd0:	d005      	beq.n	1cde <_at25dfx_chip_issue_read_command_wait.isra.3+0x46>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    1cd2:	2300      	movs	r3, #0
    1cd4:	0032      	movs	r2, r6
    1cd6:	9901      	ldr	r1, [sp, #4]
    1cd8:	6820      	ldr	r0, [r4, #0]
    1cda:	4d05      	ldr	r5, [pc, #20]	; (1cf0 <_at25dfx_chip_issue_read_command_wait.isra.3+0x58>)
    1cdc:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    1cde:	7960      	ldrb	r0, [r4, #5]
    1ce0:	2101      	movs	r1, #1
    1ce2:	47b8      	blx	r7
}
    1ce4:	b005      	add	sp, #20
    1ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ce8:	00001b21 	.word	0x00001b21
    1cec:	00005a5d 	.word	0x00005a5d
    1cf0:	00005969 	.word	0x00005969

00001cf4 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    1cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1cf6:	000d      	movs	r5, r1
    1cf8:	001e      	movs	r6, r3
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1cfa:	1859      	adds	r1, r3, r1
    1cfc:	7903      	ldrb	r3, [r0, #4]
{
    1cfe:	0017      	movs	r7, r2
    1d00:	0004      	movs	r4, r0
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1d02:	2200      	movs	r2, #0
    1d04:	2b0a      	cmp	r3, #10
    1d06:	d802      	bhi.n	1d0e <at25dfx_chip_read_buffer+0x1a>
    1d08:	4a0b      	ldr	r2, [pc, #44]	; (1d38 <at25dfx_chip_read_buffer+0x44>)
    1d0a:	009b      	lsls	r3, r3, #2
    1d0c:	589a      	ldr	r2, [r3, r2]
		return STATUS_ERR_INVALID_ARG;
    1d0e:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1d10:	4291      	cmp	r1, r2
    1d12:	d80f      	bhi.n	1d34 <at25dfx_chip_read_buffer+0x40>
	}

	status = _at25dfx_spi_lock(chip->spi);
    1d14:	6820      	ldr	r0, [r4, #0]
    1d16:	4b09      	ldr	r3, [pc, #36]	; (1d3c <at25dfx_chip_read_buffer+0x48>)
    1d18:	4798      	blx	r3
	if (status == STATUS_BUSY) {
    1d1a:	2805      	cmp	r0, #5
    1d1c:	d00a      	beq.n	1d34 <at25dfx_chip_read_buffer+0x40>
	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
	cmd.command_size = 5;
	cmd.address = address;
	cmd.data.rx = (uint8_t *)data;
	cmd.length = length;
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    1d1e:	002b      	movs	r3, r5
    1d20:	0020      	movs	r0, r4
    1d22:	9601      	str	r6, [sp, #4]
    1d24:	9700      	str	r7, [sp, #0]
    1d26:	2205      	movs	r2, #5
    1d28:	210b      	movs	r1, #11
    1d2a:	4d05      	ldr	r5, [pc, #20]	; (1d40 <at25dfx_chip_read_buffer+0x4c>)
    1d2c:	47a8      	blx	r5
	module->locked = false;
    1d2e:	2000      	movs	r0, #0

	_at25dfx_spi_unlock(chip->spi);
    1d30:	6823      	ldr	r3, [r4, #0]
    1d32:	7118      	strb	r0, [r3, #4]

	return STATUS_OK;
}
    1d34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	0000a32c 	.word	0x0000a32c
    1d3c:	00001b7d 	.word	0x00001b7d
    1d40:	00001c99 	.word	0x00001c99

00001d44 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    1d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d46:	001d      	movs	r5, r3
    1d48:	b085      	sub	sp, #20
    1d4a:	9102      	str	r1, [sp, #8]
    1d4c:	9203      	str	r2, [sp, #12]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1d4e:	7903      	ldrb	r3, [r0, #4]
{
    1d50:	0004      	movs	r4, r0
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1d52:	1869      	adds	r1, r5, r1
    1d54:	2200      	movs	r2, #0
    1d56:	2b0a      	cmp	r3, #10
    1d58:	d802      	bhi.n	1d60 <at25dfx_chip_write_buffer+0x1c>
    1d5a:	4a28      	ldr	r2, [pc, #160]	; (1dfc <at25dfx_chip_write_buffer+0xb8>)
    1d5c:	009b      	lsls	r3, r3, #2
    1d5e:	589a      	ldr	r2, [r3, r2]
		return STATUS_ERR_INVALID_ARG;
    1d60:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    1d62:	4291      	cmp	r1, r2
    1d64:	d825      	bhi.n	1db2 <at25dfx_chip_write_buffer+0x6e>
	}

	status = _at25dfx_spi_lock(chip->spi);
    1d66:	6820      	ldr	r0, [r4, #0]
    1d68:	4b25      	ldr	r3, [pc, #148]	; (1e00 <at25dfx_chip_write_buffer+0xbc>)
    1d6a:	4798      	blx	r3
	if (status == STATUS_BUSY) {
    1d6c:	2805      	cmp	r0, #5
    1d6e:	d020      	beq.n	1db2 <at25dfx_chip_write_buffer+0x6e>
		return status;
	}

	_at25dfx_chip_enable_write(chip);
    1d70:	4b24      	ldr	r3, [pc, #144]	; (1e04 <at25dfx_chip_write_buffer+0xc0>)
    1d72:	0020      	movs	r0, r4
    1d74:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
	cmd.command_size = 4;
	cmd.address = address;
	cmd.data.tx = (uint8_t *)data;
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    1d76:	466b      	mov	r3, sp
    1d78:	7a1a      	ldrb	r2, [r3, #8]
    1d7a:	2380      	movs	r3, #128	; 0x80
    1d7c:	005b      	lsls	r3, r3, #1
    1d7e:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
    1d80:	1c1e      	adds	r6, r3, #0
    1d82:	b29b      	uxth	r3, r3
    1d84:	42ab      	cmp	r3, r5
    1d86:	d900      	bls.n	1d8a <at25dfx_chip_write_buffer+0x46>
    1d88:	1c2e      	adds	r6, r5, #0
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    1d8a:	9b03      	ldr	r3, [sp, #12]
	cmd.length = min(page_bytes, length);
    1d8c:	b2b6      	uxth	r6, r6
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    1d8e:	9300      	str	r3, [sp, #0]
    1d90:	2204      	movs	r2, #4
    1d92:	9b02      	ldr	r3, [sp, #8]
    1d94:	2102      	movs	r1, #2
    1d96:	0020      	movs	r0, r4
    1d98:	4f1b      	ldr	r7, [pc, #108]	; (1e08 <at25dfx_chip_write_buffer+0xc4>)
    1d9a:	9601      	str	r6, [sp, #4]
    1d9c:	47b8      	blx	r7

	status = _at25dfx_chip_get_nonbusy_status(chip);
    1d9e:	0020      	movs	r0, r4
    1da0:	4b1a      	ldr	r3, [pc, #104]	; (1e0c <at25dfx_chip_write_buffer+0xc8>)
    1da2:	4798      	blx	r3

	length -= cmd.length;
    1da4:	1bad      	subs	r5, r5, r6
    1da6:	b2af      	uxth	r7, r5

	while (length && (status == STATUS_OK)) {
    1da8:	2f00      	cmp	r7, #0
    1daa:	d104      	bne.n	1db6 <at25dfx_chip_write_buffer+0x72>
    1dac:	2200      	movs	r2, #0
		status = _at25dfx_chip_get_nonbusy_status(chip);

		length -= cmd.length;
	}

	_at25dfx_spi_unlock(chip->spi);
    1dae:	6823      	ldr	r3, [r4, #0]
    1db0:	711a      	strb	r2, [r3, #4]

	return status;
}
    1db2:	b005      	add	sp, #20
    1db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (length && (status == STATUS_OK)) {
    1db6:	2800      	cmp	r0, #0
    1db8:	d1f8      	bne.n	1dac <at25dfx_chip_write_buffer+0x68>
		_at25dfx_chip_enable_write(chip);
    1dba:	4b12      	ldr	r3, [pc, #72]	; (1e04 <at25dfx_chip_write_buffer+0xc0>)
    1dbc:	0020      	movs	r0, r4
    1dbe:	4798      	blx	r3
		cmd.address += cmd.length;
    1dc0:	9b02      	ldr	r3, [sp, #8]
    1dc2:	199b      	adds	r3, r3, r6
    1dc4:	9302      	str	r3, [sp, #8]
		cmd.data.tx += cmd.length;
    1dc6:	9b03      	ldr	r3, [sp, #12]
    1dc8:	199b      	adds	r3, r3, r6
    1dca:	9303      	str	r3, [sp, #12]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    1dcc:	2380      	movs	r3, #128	; 0x80
    1dce:	1c3e      	adds	r6, r7, #0
    1dd0:	005b      	lsls	r3, r3, #1
    1dd2:	429f      	cmp	r7, r3
    1dd4:	d901      	bls.n	1dda <at25dfx_chip_write_buffer+0x96>
    1dd6:	4b0e      	ldr	r3, [pc, #56]	; (1e10 <at25dfx_chip_write_buffer+0xcc>)
    1dd8:	881e      	ldrh	r6, [r3, #0]
		_at25dfx_chip_issue_write_command_wait(chip, cmd);
    1dda:	9b03      	ldr	r3, [sp, #12]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    1ddc:	b2b6      	uxth	r6, r6
		_at25dfx_chip_issue_write_command_wait(chip, cmd);
    1dde:	9300      	str	r3, [sp, #0]
    1de0:	2204      	movs	r2, #4
    1de2:	9b02      	ldr	r3, [sp, #8]
    1de4:	2102      	movs	r1, #2
    1de6:	0020      	movs	r0, r4
    1de8:	9601      	str	r6, [sp, #4]
    1dea:	4d07      	ldr	r5, [pc, #28]	; (1e08 <at25dfx_chip_write_buffer+0xc4>)
    1dec:	47a8      	blx	r5
		length -= cmd.length;
    1dee:	1bbf      	subs	r7, r7, r6
		status = _at25dfx_chip_get_nonbusy_status(chip);
    1df0:	0020      	movs	r0, r4
    1df2:	4b06      	ldr	r3, [pc, #24]	; (1e0c <at25dfx_chip_write_buffer+0xc8>)
    1df4:	4798      	blx	r3
		length -= cmd.length;
    1df6:	b2bf      	uxth	r7, r7
    1df8:	e7d6      	b.n	1da8 <at25dfx_chip_write_buffer+0x64>
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	0000a32c 	.word	0x0000a32c
    1e00:	00001b7d 	.word	0x00001b7d
    1e04:	00001c81 	.word	0x00001c81
    1e08:	00001c2d 	.word	0x00001c2d
    1e0c:	00001ba5 	.word	0x00001ba5
    1e10:	0000a328 	.word	0x0000a328

00001e14 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    1e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
    1e16:	7903      	ldrb	r3, [r0, #4]
{
    1e18:	0004      	movs	r4, r0
    1e1a:	000e      	movs	r6, r1
    1e1c:	0017      	movs	r7, r2
		return STATUS_ERR_INVALID_ARG;
    1e1e:	2017      	movs	r0, #23
    1e20:	2b0a      	cmp	r3, #10
    1e22:	d81e      	bhi.n	1e62 <at25dfx_chip_erase_block+0x4e>
	if (address >= _at25dfx_get_device_size(chip->type)) {
    1e24:	4a0f      	ldr	r2, [pc, #60]	; (1e64 <at25dfx_chip_erase_block+0x50>)
    1e26:	009b      	lsls	r3, r3, #2
    1e28:	589b      	ldr	r3, [r3, r2]
    1e2a:	4299      	cmp	r1, r3
    1e2c:	d219      	bcs.n	1e62 <at25dfx_chip_erase_block+0x4e>
	}

	status = _at25dfx_spi_lock(chip->spi);
    1e2e:	6820      	ldr	r0, [r4, #0]
    1e30:	4b0d      	ldr	r3, [pc, #52]	; (1e68 <at25dfx_chip_erase_block+0x54>)
    1e32:	4798      	blx	r3
	if (status == STATUS_BUSY) {
    1e34:	2805      	cmp	r0, #5
    1e36:	d014      	beq.n	1e62 <at25dfx_chip_erase_block+0x4e>
    1e38:	2500      	movs	r5, #0
		return status;
	}

	_at25dfx_chip_enable_write(chip);
    1e3a:	0020      	movs	r0, r4
    1e3c:	4b0b      	ldr	r3, [pc, #44]	; (1e6c <at25dfx_chip_erase_block+0x58>)
    1e3e:	4798      	blx	r3
    1e40:	0029      	movs	r1, r5
    1e42:	2f02      	cmp	r7, #2
    1e44:	d801      	bhi.n	1e4a <at25dfx_chip_erase_block+0x36>
    1e46:	4b0a      	ldr	r3, [pc, #40]	; (1e70 <at25dfx_chip_erase_block+0x5c>)
    1e48:	5dd9      	ldrb	r1, [r3, r7]
	cmd.length = 0;

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
    1e4a:	0033      	movs	r3, r6
    1e4c:	2204      	movs	r2, #4
    1e4e:	0020      	movs	r0, r4
    1e50:	9501      	str	r5, [sp, #4]
    1e52:	9500      	str	r5, [sp, #0]
    1e54:	4e07      	ldr	r6, [pc, #28]	; (1e74 <at25dfx_chip_erase_block+0x60>)
    1e56:	47b0      	blx	r6

	status = _at25dfx_chip_get_nonbusy_status(chip);
    1e58:	4b07      	ldr	r3, [pc, #28]	; (1e78 <at25dfx_chip_erase_block+0x64>)
    1e5a:	0020      	movs	r0, r4
    1e5c:	4798      	blx	r3

	_at25dfx_spi_unlock(chip->spi);
    1e5e:	6823      	ldr	r3, [r4, #0]
    1e60:	711d      	strb	r5, [r3, #4]

	return status;
}
    1e62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1e64:	0000a32c 	.word	0x0000a32c
    1e68:	00001b7d 	.word	0x00001b7d
    1e6c:	00001c81 	.word	0x00001c81
    1e70:	0000a358 	.word	0x0000a358
    1e74:	00001c2d 	.word	0x00001c2d
    1e78:	00001ba5 	.word	0x00001ba5

00001e7c <at25dfx_read_id>:

	return STATUS_OK;
}

uint8_t at25dfx_read_id(struct at25dfx_chip_module *chip)
{
    1e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    1e7e:	2400      	movs	r4, #0

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    1e80:	4b0c      	ldr	r3, [pc, #48]	; (1eb4 <at25dfx_read_id+0x38>)
{
    1e82:	0005      	movs	r5, r0
	status = _at25dfx_spi_lock(chip->spi);
    1e84:	6800      	ldr	r0, [r0, #0]
	uint32_t id = 0;
    1e86:	9403      	str	r4, [sp, #12]
	status = _at25dfx_spi_lock(chip->spi);
    1e88:	4798      	blx	r3
    1e8a:	2305      	movs	r3, #5
	if (status == STATUS_BUSY) {
    1e8c:	4298      	cmp	r0, r3
    1e8e:	d00d      	beq.n	1eac <at25dfx_read_id+0x30>
	cmd.length = 3;

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
    1e90:	3b02      	subs	r3, #2
    1e92:	9301      	str	r3, [sp, #4]
    1e94:	ab03      	add	r3, sp, #12
    1e96:	9300      	str	r3, [sp, #0]
    1e98:	2201      	movs	r2, #1
    1e9a:	0023      	movs	r3, r4
    1e9c:	219f      	movs	r1, #159	; 0x9f
    1e9e:	0028      	movs	r0, r5
    1ea0:	4e05      	ldr	r6, [pc, #20]	; (1eb8 <at25dfx_read_id+0x3c>)
    1ea2:	47b0      	blx	r6

	_at25dfx_spi_unlock(chip->spi);
    1ea4:	682b      	ldr	r3, [r5, #0]
    1ea6:	711c      	strb	r4, [r3, #4]
	
	return (id&0xFF);
    1ea8:	466b      	mov	r3, sp
    1eaa:	7b1b      	ldrb	r3, [r3, #12]
    1eac:	0018      	movs	r0, r3
    1eae:	b004      	add	sp, #16
    1eb0:	bd70      	pop	{r4, r5, r6, pc}
    1eb2:	46c0      	nop			; (mov r8, r8)
    1eb4:	00001b7d 	.word	0x00001b7d
    1eb8:	00001c99 	.word	0x00001c99

00001ebc <extint_is_syncing>:
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1ebc:	4b01      	ldr	r3, [pc, #4]	; (1ec4 <extint_is_syncing+0x8>)
    1ebe:	7858      	ldrb	r0, [r3, #1]
    1ec0:	09c0      	lsrs	r0, r0, #7
			return true;
		}
	}
	return false;
}
    1ec2:	4770      	bx	lr
    1ec4:	40001800 	.word	0x40001800

00001ec8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1ec8:	2302      	movs	r3, #2
{
    1eca:	b510      	push	{r4, lr}
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1ecc:	4a04      	ldr	r2, [pc, #16]	; (1ee0 <_extint_enable+0x18>)
    1ece:	7811      	ldrb	r1, [r2, #0]
    1ed0:	430b      	orrs	r3, r1
    1ed2:	7013      	strb	r3, [r2, #0]
	}

	while (extint_is_syncing()) {
    1ed4:	4b03      	ldr	r3, [pc, #12]	; (1ee4 <_extint_enable+0x1c>)
    1ed6:	4798      	blx	r3
    1ed8:	2800      	cmp	r0, #0
    1eda:	d1fb      	bne.n	1ed4 <_extint_enable+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1edc:	bd10      	pop	{r4, pc}
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	40001800 	.word	0x40001800
    1ee4:	00001ebd 	.word	0x00001ebd

00001ee8 <_system_extint_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1ee8:	2340      	movs	r3, #64	; 0x40
{
    1eea:	b507      	push	{r0, r1, r2, lr}
    1eec:	4a10      	ldr	r2, [pc, #64]	; (1f30 <_system_extint_init+0x48>)
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1eee:	2005      	movs	r0, #5
    1ef0:	6991      	ldr	r1, [r2, #24]
    1ef2:	430b      	orrs	r3, r1
    1ef4:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    1ef6:	2306      	movs	r3, #6
    1ef8:	a901      	add	r1, sp, #4
    1efa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1efc:	4b0d      	ldr	r3, [pc, #52]	; (1f34 <_system_extint_init+0x4c>)
    1efe:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1f00:	4b0d      	ldr	r3, [pc, #52]	; (1f38 <_system_extint_init+0x50>)
    1f02:	2005      	movs	r0, #5
    1f04:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1f06:	2301      	movs	r3, #1
    1f08:	4a0c      	ldr	r2, [pc, #48]	; (1f3c <_system_extint_init+0x54>)
    1f0a:	7811      	ldrb	r1, [r2, #0]
    1f0c:	430b      	orrs	r3, r1
    1f0e:	7013      	strb	r3, [r2, #0]
	while (extint_is_syncing()) {
    1f10:	4b0b      	ldr	r3, [pc, #44]	; (1f40 <_system_extint_init+0x58>)
    1f12:	4798      	blx	r3
    1f14:	2800      	cmp	r0, #0
    1f16:	d1fb      	bne.n	1f10 <_system_extint_init+0x28>
		_extint_dev.callbacks[j] = NULL;
    1f18:	0002      	movs	r2, r0
    1f1a:	4b0a      	ldr	r3, [pc, #40]	; (1f44 <_system_extint_init+0x5c>)
    1f1c:	501a      	str	r2, [r3, r0]
    1f1e:	3004      	adds	r0, #4
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1f20:	2840      	cmp	r0, #64	; 0x40
    1f22:	d1fb      	bne.n	1f1c <_system_extint_init+0x34>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1f24:	2210      	movs	r2, #16
    1f26:	4b08      	ldr	r3, [pc, #32]	; (1f48 <_system_extint_init+0x60>)
    1f28:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1f2a:	4b08      	ldr	r3, [pc, #32]	; (1f4c <_system_extint_init+0x64>)
    1f2c:	4798      	blx	r3
}
    1f2e:	bd07      	pop	{r0, r1, r2, pc}
    1f30:	40000400 	.word	0x40000400
    1f34:	00007bbd 	.word	0x00007bbd
    1f38:	00007b35 	.word	0x00007b35
    1f3c:	40001800 	.word	0x40001800
    1f40:	00001ebd 	.word	0x00001ebd
    1f44:	20000c7c 	.word	0x20000c7c
    1f48:	e000e100 	.word	0xe000e100
    1f4c:	00001ec9 	.word	0x00001ec9

00001f50 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1f52:	2400      	movs	r4, #0
{
    1f54:	b089      	sub	sp, #36	; 0x24
    1f56:	9200      	str	r2, [sp, #0]
    1f58:	9301      	str	r3, [sp, #4]
	for (i = 63; i >= 0; i--) {
    1f5a:	233f      	movs	r3, #63	; 0x3f
	uint64_t q = 0, r = 0, bit_shift;
    1f5c:	2600      	movs	r6, #0
    1f5e:	2700      	movs	r7, #0
    1f60:	0025      	movs	r5, r4
{
    1f62:	9006      	str	r0, [sp, #24]
    1f64:	9107      	str	r1, [sp, #28]
	for (i = 63; i >= 0; i--) {
    1f66:	9303      	str	r3, [sp, #12]
		bit_shift = (uint64_t)1 << i;
    1f68:	9a03      	ldr	r2, [sp, #12]
    1f6a:	4b13      	ldr	r3, [pc, #76]	; (1fb8 <long_division+0x68>)
    1f6c:	2001      	movs	r0, #1
    1f6e:	2100      	movs	r1, #0
    1f70:	4798      	blx	r3

		r = r << 1;
    1f72:	19b6      	adds	r6, r6, r6
    1f74:	417f      	adcs	r7, r7

		if (n & bit_shift) {
    1f76:	9b06      	ldr	r3, [sp, #24]
    1f78:	9a07      	ldr	r2, [sp, #28]
    1f7a:	4003      	ands	r3, r0
    1f7c:	400a      	ands	r2, r1
		r = r << 1;
    1f7e:	9604      	str	r6, [sp, #16]
    1f80:	9705      	str	r7, [sp, #20]
		if (n & bit_shift) {
    1f82:	4313      	orrs	r3, r2
    1f84:	d003      	beq.n	1f8e <long_division+0x3e>
			r |= 0x01;
    1f86:	2301      	movs	r3, #1
    1f88:	4333      	orrs	r3, r6
    1f8a:	001e      	movs	r6, r3
    1f8c:	9f05      	ldr	r7, [sp, #20]
		}

		if (r >= d) {
    1f8e:	9b01      	ldr	r3, [sp, #4]
    1f90:	42bb      	cmp	r3, r7
    1f92:	d809      	bhi.n	1fa8 <long_division+0x58>
    1f94:	d102      	bne.n	1f9c <long_division+0x4c>
    1f96:	9b00      	ldr	r3, [sp, #0]
    1f98:	42b3      	cmp	r3, r6
    1f9a:	d805      	bhi.n	1fa8 <long_division+0x58>
			r = r - d;
    1f9c:	9a00      	ldr	r2, [sp, #0]
    1f9e:	9b01      	ldr	r3, [sp, #4]
    1fa0:	1ab6      	subs	r6, r6, r2
    1fa2:	419f      	sbcs	r7, r3
			q |= bit_shift;
    1fa4:	4304      	orrs	r4, r0
    1fa6:	430d      	orrs	r5, r1
	for (i = 63; i >= 0; i--) {
    1fa8:	9b03      	ldr	r3, [sp, #12]
    1faa:	1e5a      	subs	r2, r3, #1
    1fac:	9203      	str	r2, [sp, #12]
    1fae:	d2db      	bcs.n	1f68 <long_division+0x18>
		}
	}

	return q;
}
    1fb0:	0020      	movs	r0, r4
    1fb2:	0029      	movs	r1, r5
    1fb4:	b009      	add	sp, #36	; 0x24
    1fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fb8:	00008ea1 	.word	0x00008ea1

00001fbc <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1fbc:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1fbe:	0849      	lsrs	r1, r1, #1
{
    1fc0:	0004      	movs	r4, r0
    1fc2:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1fc4:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
    1fc6:	42a1      	cmp	r1, r4
    1fc8:	d201      	bcs.n	1fce <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1fca:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1fcc:	0003      	movs	r3, r0
    1fce:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
    1fd0:	1b09      	subs	r1, r1, r4
		baud_calculated++;
    1fd2:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
    1fd4:	428c      	cmp	r4, r1
    1fd6:	d9f9      	bls.n	1fcc <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1fd8:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1fda:	2bff      	cmp	r3, #255	; 0xff
    1fdc:	d8f5      	bhi.n	1fca <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
    1fde:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    1fe0:	2000      	movs	r0, #0
    1fe2:	e7f2      	b.n	1fca <_sercom_get_sync_baud_val+0xe>

00001fe4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fe6:	b085      	sub	sp, #20
    1fe8:	001e      	movs	r6, r3
    1fea:	ab0a      	add	r3, sp, #40	; 0x28
    1fec:	000d      	movs	r5, r1
    1fee:	7819      	ldrb	r1, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1ff0:	0003      	movs	r3, r0
    1ff2:	434b      	muls	r3, r1
{
    1ff4:	9203      	str	r2, [sp, #12]
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ff6:	2740      	movs	r7, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1ff8:	42ab      	cmp	r3, r5
    1ffa:	d817      	bhi.n	202c <STACK_SIZE+0x2c>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1ffc:	2e00      	cmp	r6, #0
    1ffe:	d118      	bne.n	2032 <STACK_SIZE+0x32>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2000:	0002      	movs	r2, r0
    2002:	0033      	movs	r3, r6
    2004:	0008      	movs	r0, r1
    2006:	4c1b      	ldr	r4, [pc, #108]	; (2074 <STACK_SIZE+0x74>)
    2008:	0031      	movs	r1, r6
    200a:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
    200c:	002a      	movs	r2, r5
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    200e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    2010:	0033      	movs	r3, r6
    2012:	4c19      	ldr	r4, [pc, #100]	; (2078 <STACK_SIZE+0x78>)
    2014:	0030      	movs	r0, r6
    2016:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2018:	2200      	movs	r2, #0
    201a:	2301      	movs	r3, #1
    201c:	1a12      	subs	r2, r2, r0
    201e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    2020:	0c14      	lsrs	r4, r2, #16
    2022:	0418      	lsls	r0, r3, #16
    2024:	4304      	orrs	r4, r0
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
    2026:	2700      	movs	r7, #0
	*baudval = baud_calculated;
    2028:	9b03      	ldr	r3, [sp, #12]
    202a:	801c      	strh	r4, [r3, #0]
}
    202c:	0038      	movs	r0, r7
    202e:	b005      	add	sp, #20
    2030:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint64_t baud_calculated = 0;
    2032:	2400      	movs	r4, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2034:	2e01      	cmp	r6, #1
    2036:	d1f6      	bne.n	2026 <STACK_SIZE+0x26>
		temp1 = ((uint64_t)baudrate * sample_num);
    2038:	000a      	movs	r2, r1
    203a:	0023      	movs	r3, r4
    203c:	0021      	movs	r1, r4
    203e:	4e0d      	ldr	r6, [pc, #52]	; (2074 <STACK_SIZE+0x74>)
    2040:	47b0      	blx	r6
    2042:	9000      	str	r0, [sp, #0]
    2044:	9101      	str	r1, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    2046:	000b      	movs	r3, r1
    2048:	0002      	movs	r2, r0
    204a:	0021      	movs	r1, r4
    204c:	0028      	movs	r0, r5
    204e:	4c0a      	ldr	r4, [pc, #40]	; (2078 <STACK_SIZE+0x78>)
    2050:	47a0      	blx	r4
		if(baud_int > BAUD_INT_MAX) {
    2052:	2380      	movs	r3, #128	; 0x80
		baud_int = long_division( peripheral_clock, temp1);
    2054:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
    2056:	019b      	lsls	r3, r3, #6
    2058:	4298      	cmp	r0, r3
    205a:	d8e7      	bhi.n	202c <STACK_SIZE+0x2c>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    205c:	9a00      	ldr	r2, [sp, #0]
    205e:	9b01      	ldr	r3, [sp, #4]
    2060:	0f69      	lsrs	r1, r5, #29
    2062:	00e8      	lsls	r0, r5, #3
    2064:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2066:	00f4      	lsls	r4, r6, #3
    2068:	1b04      	subs	r4, r0, r4
		baud_calculated = baud_int | (baud_fp << 13);
    206a:	b2e4      	uxtb	r4, r4
    206c:	0364      	lsls	r4, r4, #13
    206e:	4334      	orrs	r4, r6
    2070:	e7d9      	b.n	2026 <STACK_SIZE+0x26>
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	00008f75 	.word	0x00008f75
    2078:	00001f51 	.word	0x00001f51

0000207c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    207c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    207e:	4c0d      	ldr	r4, [pc, #52]	; (20b4 <sercom_set_gclk_generator+0x38>)
{
    2080:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    2082:	7823      	ldrb	r3, [r4, #0]
    2084:	2b00      	cmp	r3, #0
    2086:	d001      	beq.n	208c <sercom_set_gclk_generator+0x10>
    2088:	2900      	cmp	r1, #0
    208a:	d00c      	beq.n	20a6 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    208c:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    208e:	2013      	movs	r0, #19
    2090:	4b09      	ldr	r3, [pc, #36]	; (20b8 <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
    2092:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2094:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2096:	2013      	movs	r0, #19
    2098:	4b08      	ldr	r3, [pc, #32]	; (20bc <sercom_set_gclk_generator+0x40>)
    209a:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    209c:	2301      	movs	r3, #1

		return STATUS_OK;
    209e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    20a0:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    20a2:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    20a4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
    20a6:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    20a8:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
    20aa:	42ab      	cmp	r3, r5
    20ac:	d0fa      	beq.n	20a4 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
    20ae:	201d      	movs	r0, #29
    20b0:	e7f8      	b.n	20a4 <sercom_set_gclk_generator+0x28>
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	2000032c 	.word	0x2000032c
    20b8:	00007bbd 	.word	0x00007bbd
    20bc:	00007b35 	.word	0x00007b35

000020c0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    20c0:	4a39      	ldr	r2, [pc, #228]	; (21a8 <_sercom_get_default_pad+0xe8>)
{
    20c2:	0003      	movs	r3, r0
    20c4:	b500      	push	{lr}
    20c6:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
    20c8:	4293      	cmp	r3, r2
    20ca:	d033      	beq.n	2134 <_sercom_get_default_pad+0x74>
    20cc:	d807      	bhi.n	20de <_sercom_get_default_pad+0x1e>
    20ce:	4a37      	ldr	r2, [pc, #220]	; (21ac <_sercom_get_default_pad+0xec>)
    20d0:	4293      	cmp	r3, r2
    20d2:	d014      	beq.n	20fe <_sercom_get_default_pad+0x3e>
    20d4:	4a36      	ldr	r2, [pc, #216]	; (21b0 <_sercom_get_default_pad+0xf0>)
    20d6:	4293      	cmp	r3, r2
    20d8:	d01f      	beq.n	211a <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    20da:	2300      	movs	r3, #0
    20dc:	e017      	b.n	210e <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
    20de:	4a35      	ldr	r2, [pc, #212]	; (21b4 <_sercom_get_default_pad+0xf4>)
    20e0:	4293      	cmp	r3, r2
    20e2:	d03a      	beq.n	215a <_sercom_get_default_pad+0x9a>
    20e4:	4a34      	ldr	r2, [pc, #208]	; (21b8 <_sercom_get_default_pad+0xf8>)
    20e6:	4293      	cmp	r3, r2
    20e8:	d044      	beq.n	2174 <_sercom_get_default_pad+0xb4>
    20ea:	4a34      	ldr	r2, [pc, #208]	; (21bc <_sercom_get_default_pad+0xfc>)
    20ec:	4293      	cmp	r3, r2
    20ee:	d1f4      	bne.n	20da <_sercom_get_default_pad+0x1a>
	return 0;
    20f0:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    20f2:	2903      	cmp	r1, #3
    20f4:	d80b      	bhi.n	210e <_sercom_get_default_pad+0x4e>
    20f6:	f006 fd49 	bl	8b8c <__gnu_thumb1_case_uqi>
    20fa:	2a50      	.short	0x2a50
    20fc:	2e2c      	.short	0x2e2c
	return 0;
    20fe:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2100:	2903      	cmp	r1, #3
    2102:	d804      	bhi.n	210e <_sercom_get_default_pad+0x4e>
    2104:	f006 fd42 	bl	8b8c <__gnu_thumb1_case_uqi>
    2108:	07050243 	.word	0x07050243
    210c:	4b2c      	ldr	r3, [pc, #176]	; (21c0 <_sercom_get_default_pad+0x100>)
}
    210e:	0018      	movs	r0, r3
    2110:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2112:	4b2c      	ldr	r3, [pc, #176]	; (21c4 <_sercom_get_default_pad+0x104>)
    2114:	e7fb      	b.n	210e <_sercom_get_default_pad+0x4e>
    2116:	4b2c      	ldr	r3, [pc, #176]	; (21c8 <_sercom_get_default_pad+0x108>)
    2118:	e7f9      	b.n	210e <_sercom_get_default_pad+0x4e>
	return 0;
    211a:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    211c:	2903      	cmp	r1, #3
    211e:	d8f6      	bhi.n	210e <_sercom_get_default_pad+0x4e>
    2120:	f006 fd34 	bl	8b8c <__gnu_thumb1_case_uqi>
    2124:	06040237 	.word	0x06040237
    2128:	4b28      	ldr	r3, [pc, #160]	; (21cc <_sercom_get_default_pad+0x10c>)
    212a:	e7f0      	b.n	210e <_sercom_get_default_pad+0x4e>
    212c:	4b28      	ldr	r3, [pc, #160]	; (21d0 <_sercom_get_default_pad+0x110>)
    212e:	e7ee      	b.n	210e <_sercom_get_default_pad+0x4e>
    2130:	4b28      	ldr	r3, [pc, #160]	; (21d4 <_sercom_get_default_pad+0x114>)
    2132:	e7ec      	b.n	210e <_sercom_get_default_pad+0x4e>
	return 0;
    2134:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2136:	2903      	cmp	r1, #3
    2138:	d8e9      	bhi.n	210e <_sercom_get_default_pad+0x4e>
    213a:	f006 fd27 	bl	8b8c <__gnu_thumb1_case_uqi>
    213e:	022c      	.short	0x022c
    2140:	0604      	.short	0x0604
    2142:	4b25      	ldr	r3, [pc, #148]	; (21d8 <_sercom_get_default_pad+0x118>)
    2144:	e7e3      	b.n	210e <_sercom_get_default_pad+0x4e>
    2146:	4b25      	ldr	r3, [pc, #148]	; (21dc <_sercom_get_default_pad+0x11c>)
    2148:	e7e1      	b.n	210e <_sercom_get_default_pad+0x4e>
    214a:	4b25      	ldr	r3, [pc, #148]	; (21e0 <_sercom_get_default_pad+0x120>)
    214c:	e7df      	b.n	210e <_sercom_get_default_pad+0x4e>
    214e:	4b25      	ldr	r3, [pc, #148]	; (21e4 <_sercom_get_default_pad+0x124>)
    2150:	e7dd      	b.n	210e <_sercom_get_default_pad+0x4e>
    2152:	4b25      	ldr	r3, [pc, #148]	; (21e8 <_sercom_get_default_pad+0x128>)
    2154:	e7db      	b.n	210e <_sercom_get_default_pad+0x4e>
    2156:	4b25      	ldr	r3, [pc, #148]	; (21ec <_sercom_get_default_pad+0x12c>)
    2158:	e7d9      	b.n	210e <_sercom_get_default_pad+0x4e>
	return 0;
    215a:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    215c:	2903      	cmp	r1, #3
    215e:	d8d6      	bhi.n	210e <_sercom_get_default_pad+0x4e>
    2160:	f006 fd14 	bl	8b8c <__gnu_thumb1_case_uqi>
    2164:	0604021d 	.word	0x0604021d
    2168:	4b21      	ldr	r3, [pc, #132]	; (21f0 <_sercom_get_default_pad+0x130>)
    216a:	e7d0      	b.n	210e <_sercom_get_default_pad+0x4e>
    216c:	4b21      	ldr	r3, [pc, #132]	; (21f4 <_sercom_get_default_pad+0x134>)
    216e:	e7ce      	b.n	210e <_sercom_get_default_pad+0x4e>
    2170:	4b21      	ldr	r3, [pc, #132]	; (21f8 <_sercom_get_default_pad+0x138>)
    2172:	e7cc      	b.n	210e <_sercom_get_default_pad+0x4e>
	return 0;
    2174:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2176:	2903      	cmp	r1, #3
    2178:	d8c9      	bhi.n	210e <_sercom_get_default_pad+0x4e>
    217a:	f006 fd07 	bl	8b8c <__gnu_thumb1_case_uqi>
    217e:	0212      	.short	0x0212
    2180:	0604      	.short	0x0604
    2182:	4b1e      	ldr	r3, [pc, #120]	; (21fc <_sercom_get_default_pad+0x13c>)
    2184:	e7c3      	b.n	210e <_sercom_get_default_pad+0x4e>
    2186:	4b1e      	ldr	r3, [pc, #120]	; (2200 <_sercom_get_default_pad+0x140>)
    2188:	e7c1      	b.n	210e <_sercom_get_default_pad+0x4e>
    218a:	4b1e      	ldr	r3, [pc, #120]	; (2204 <_sercom_get_default_pad+0x144>)
    218c:	e7bf      	b.n	210e <_sercom_get_default_pad+0x4e>
    218e:	4b1e      	ldr	r3, [pc, #120]	; (2208 <_sercom_get_default_pad+0x148>)
    2190:	e7bd      	b.n	210e <_sercom_get_default_pad+0x4e>
    2192:	2303      	movs	r3, #3
    2194:	e7bb      	b.n	210e <_sercom_get_default_pad+0x4e>
    2196:	4b1d      	ldr	r3, [pc, #116]	; (220c <_sercom_get_default_pad+0x14c>)
    2198:	e7b9      	b.n	210e <_sercom_get_default_pad+0x4e>
    219a:	4b1d      	ldr	r3, [pc, #116]	; (2210 <_sercom_get_default_pad+0x150>)
    219c:	e7b7      	b.n	210e <_sercom_get_default_pad+0x4e>
    219e:	4b1d      	ldr	r3, [pc, #116]	; (2214 <_sercom_get_default_pad+0x154>)
    21a0:	e7b5      	b.n	210e <_sercom_get_default_pad+0x4e>
    21a2:	4b1d      	ldr	r3, [pc, #116]	; (2218 <_sercom_get_default_pad+0x158>)
    21a4:	e7b3      	b.n	210e <_sercom_get_default_pad+0x4e>
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	42001000 	.word	0x42001000
    21ac:	42000800 	.word	0x42000800
    21b0:	42000c00 	.word	0x42000c00
    21b4:	42001800 	.word	0x42001800
    21b8:	42001c00 	.word	0x42001c00
    21bc:	42001400 	.word	0x42001400
    21c0:	00050003 	.word	0x00050003
    21c4:	00060003 	.word	0x00060003
    21c8:	00070003 	.word	0x00070003
    21cc:	00010003 	.word	0x00010003
    21d0:	001e0003 	.word	0x001e0003
    21d4:	001f0003 	.word	0x001f0003
    21d8:	00090003 	.word	0x00090003
    21dc:	000a0003 	.word	0x000a0003
    21e0:	000b0003 	.word	0x000b0003
    21e4:	00110003 	.word	0x00110003
    21e8:	00120003 	.word	0x00120003
    21ec:	00130003 	.word	0x00130003
    21f0:	000d0003 	.word	0x000d0003
    21f4:	000e0003 	.word	0x000e0003
    21f8:	000f0003 	.word	0x000f0003
    21fc:	00170003 	.word	0x00170003
    2200:	00180003 	.word	0x00180003
    2204:	00190003 	.word	0x00190003
    2208:	00040003 	.word	0x00040003
    220c:	00080003 	.word	0x00080003
    2210:	00100003 	.word	0x00100003
    2214:	000c0003 	.word	0x000c0003
    2218:	00160003 	.word	0x00160003

0000221c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    221c:	b570      	push	{r4, r5, r6, lr}
    221e:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2220:	4669      	mov	r1, sp
    2222:	4b09      	ldr	r3, [pc, #36]	; (2248 <_sercom_get_sercom_inst_index+0x2c>)
    2224:	466a      	mov	r2, sp
    2226:	cb70      	ldmia	r3!, {r4, r5, r6}
    2228:	c170      	stmia	r1!, {r4, r5, r6}
    222a:	cb70      	ldmia	r3!, {r4, r5, r6}
    222c:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    222e:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2230:	0099      	lsls	r1, r3, #2
    2232:	5851      	ldr	r1, [r2, r1]
    2234:	4281      	cmp	r1, r0
    2236:	d102      	bne.n	223e <_sercom_get_sercom_inst_index+0x22>
			return i;
    2238:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
    223a:	b006      	add	sp, #24
    223c:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    223e:	3301      	adds	r3, #1
    2240:	2b06      	cmp	r3, #6
    2242:	d1f5      	bne.n	2230 <_sercom_get_sercom_inst_index+0x14>
	return 0;
    2244:	2000      	movs	r0, #0
    2246:	e7f8      	b.n	223a <_sercom_get_sercom_inst_index+0x1e>
    2248:	0000a35c 	.word	0x0000a35c

0000224c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    224c:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    224e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2252:	425a      	negs	r2, r3
    2254:	4153      	adcs	r3, r2
    2256:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2258:	b672      	cpsid	i
    225a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    225e:	2200      	movs	r2, #0
    2260:	4b02      	ldr	r3, [pc, #8]	; (226c <cpu_irq_save+0x20>)
    2262:	701a      	strb	r2, [r3, #0]
	return flags;
    2264:	9801      	ldr	r0, [sp, #4]
}
    2266:	b002      	add	sp, #8
    2268:	4770      	bx	lr
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	20000120 	.word	0x20000120

00002270 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    2270:	227f      	movs	r2, #127	; 0x7f
    2272:	4002      	ands	r2, r0
		return NULL;
    2274:	1e13      	subs	r3, r2, #0
	if ((ep == 0) || (ep == 0x80)) {
    2276:	d009      	beq.n	228c <udd_ep_get_job+0x1c>
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2278:	230f      	movs	r3, #15
    227a:	4003      	ands	r3, r0
    227c:	005b      	lsls	r3, r3, #1
    227e:	09c0      	lsrs	r0, r0, #7
    2280:	1818      	adds	r0, r3, r0
    2282:	2314      	movs	r3, #20
    2284:	3802      	subs	r0, #2
    2286:	4358      	muls	r0, r3
    2288:	4b01      	ldr	r3, [pc, #4]	; (2290 <udd_ep_get_job+0x20>)
    228a:	181b      	adds	r3, r3, r0
	}
}
    228c:	0018      	movs	r0, r3
    228e:	4770      	bx	lr
    2290:	20000338 	.word	0x20000338

00002294 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2294:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2296:	798d      	ldrb	r5, [r1, #6]
{
    2298:	b085      	sub	sp, #20

	if (ep & USB_EP_DIR_IN) {
    229a:	b26a      	sxtb	r2, r5
{
    229c:	000e      	movs	r6, r1
    229e:	4b54      	ldr	r3, [pc, #336]	; (23f0 <udd_ep_transfer_process+0x15c>)
	ptr_job = udd_ep_get_job(ep);
    22a0:	0028      	movs	r0, r5
	if (ep & USB_EP_DIR_IN) {
    22a2:	2a00      	cmp	r2, #0
    22a4:	da48      	bge.n	2338 <udd_ep_transfer_process+0xa4>
	ep_num = ep & USB_EP_ADDR_MASK;
    22a6:	270f      	movs	r7, #15
	ptr_job = udd_ep_get_job(ep);
    22a8:	4798      	blx	r3
	ep_num = ep & USB_EP_ADDR_MASK;
    22aa:	402f      	ands	r7, r5
    22ac:	9701      	str	r7, [sp, #4]
	ep_size = ptr_job->ep_size;
    22ae:	8a03      	ldrh	r3, [r0, #16]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    22b0:	6881      	ldr	r1, [r0, #8]
	ep_size = ptr_job->ep_size;
    22b2:	9302      	str	r3, [sp, #8]
	ptr_job->nb_trans += nb_trans;
    22b4:	8876      	ldrh	r6, [r6, #2]
    22b6:	68c3      	ldr	r3, [r0, #12]
	ptr_job = udd_ep_get_job(ep);
    22b8:	0004      	movs	r4, r0
	ptr_job->nb_trans += nb_trans;
    22ba:	18f6      	adds	r6, r6, r3
    22bc:	60c6      	str	r6, [r0, #12]
    22be:	7c87      	ldrb	r7, [r0, #18]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    22c0:	428e      	cmp	r6, r1
    22c2:	d025      	beq.n	2310 <udd_ep_transfer_process+0x7c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    22c4:	1b8d      	subs	r5, r1, r6
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    22c6:	4b4b      	ldr	r3, [pc, #300]	; (23f4 <udd_ep_transfer_process+0x160>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    22c8:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    22ca:	429d      	cmp	r5, r3
    22cc:	d906      	bls.n	22dc <udd_ep_transfer_process+0x48>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    22ce:	0018      	movs	r0, r3
    22d0:	9902      	ldr	r1, [sp, #8]
    22d2:	4b49      	ldr	r3, [pc, #292]	; (23f8 <udd_ep_transfer_process+0x164>)
    22d4:	4798      	blx	r3
    22d6:	4b47      	ldr	r3, [pc, #284]	; (23f4 <udd_ep_transfer_process+0x160>)
    22d8:	1a5d      	subs	r5, r3, r1
    22da:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    22dc:	2100      	movs	r1, #0
    22de:	07bb      	lsls	r3, r7, #30
    22e0:	d507      	bpl.n	22f2 <udd_ep_transfer_process+0x5e>
    22e2:	4b46      	ldr	r3, [pc, #280]	; (23fc <udd_ep_transfer_process+0x168>)
    22e4:	9902      	ldr	r1, [sp, #8]
    22e6:	0028      	movs	r0, r5
    22e8:	4798      	blx	r3
    22ea:	b28b      	uxth	r3, r1
    22ec:	4259      	negs	r1, r3
    22ee:	4159      	adcs	r1, r3
    22f0:	b2c9      	uxtb	r1, r1
    22f2:	2202      	movs	r2, #2
    22f4:	7ca3      	ldrb	r3, [r4, #18]
    22f6:	0049      	lsls	r1, r1, #1
    22f8:	4393      	bics	r3, r2
    22fa:	4319      	orrs	r1, r3
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    22fc:	002b      	movs	r3, r5
    22fe:	6862      	ldr	r2, [r4, #4]
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2300:	74a1      	strb	r1, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2302:	1992      	adds	r2, r2, r6
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2304:	9901      	ldr	r1, [sp, #4]
    2306:	483e      	ldr	r0, [pc, #248]	; (2400 <udd_ep_transfer_process+0x16c>)
    2308:	4c3e      	ldr	r4, [pc, #248]	; (2404 <udd_ep_transfer_process+0x170>)
    230a:	47a0      	blx	r4
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    230c:	b005      	add	sp, #20
    230e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ptr_job->b_shortpacket) {
    2310:	2302      	movs	r3, #2
    2312:	0038      	movs	r0, r7
    2314:	4018      	ands	r0, r3
    2316:	d005      	beq.n	2324 <udd_ep_transfer_process+0x90>
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2318:	6862      	ldr	r2, [r4, #4]
		ptr_job->b_shortpacket = false;
    231a:	439f      	bics	r7, r3
    231c:	74a7      	strb	r7, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    231e:	1992      	adds	r2, r2, r6
    2320:	2300      	movs	r3, #0
    2322:	e7ef      	b.n	2304 <udd_ep_transfer_process+0x70>
	ptr_job->busy = false;
    2324:	2301      	movs	r3, #1
    2326:	439f      	bics	r7, r3
	if (NULL != ptr_job->call_trans) {
    2328:	6823      	ldr	r3, [r4, #0]
	ptr_job->busy = false;
    232a:	74a7      	strb	r7, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    232c:	2b00      	cmp	r3, #0
    232e:	d0ed      	beq.n	230c <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2330:	002a      	movs	r2, r5
    2332:	0031      	movs	r1, r6
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2334:	4798      	blx	r3
}
    2336:	e7e9      	b.n	230c <udd_ep_transfer_process+0x78>
	ptr_job = udd_ep_get_job(ep);
    2338:	4798      	blx	r3
	ep_num = ep & USB_EP_ADDR_MASK;
    233a:	230f      	movs	r3, #15
    233c:	402b      	ands	r3, r5
    233e:	9302      	str	r3, [sp, #8]
	ep_size = ptr_job->ep_size;
    2340:	8a03      	ldrh	r3, [r0, #16]
	ptr_job = udd_ep_get_job(ep);
    2342:	0004      	movs	r4, r0
	ep_size = ptr_job->ep_size;
    2344:	9301      	str	r3, [sp, #4]
	if (ptr_job->b_use_out_cache_buffer) {
    2346:	7c83      	ldrb	r3, [r0, #18]
	nb_trans = ep_callback_para->received_bytes;
    2348:	8837      	ldrh	r7, [r6, #0]
	if (ptr_job->b_use_out_cache_buffer) {
    234a:	075b      	lsls	r3, r3, #29
    234c:	d511      	bpl.n	2372 <udd_ep_transfer_process+0xde>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    234e:	68c2      	ldr	r2, [r0, #12]
    2350:	6843      	ldr	r3, [r0, #4]
    2352:	4694      	mov	ip, r2
    2354:	4463      	add	r3, ip
    2356:	9303      	str	r3, [sp, #12]
    2358:	9901      	ldr	r1, [sp, #4]
    235a:	4b28      	ldr	r3, [pc, #160]	; (23fc <udd_ep_transfer_process+0x168>)
    235c:	6880      	ldr	r0, [r0, #8]
    235e:	4798      	blx	r3
    2360:	9b02      	ldr	r3, [sp, #8]
    2362:	000a      	movs	r2, r1
    2364:	3b01      	subs	r3, #1
    2366:	4928      	ldr	r1, [pc, #160]	; (2408 <udd_ep_transfer_process+0x174>)
    2368:	019b      	lsls	r3, r3, #6
    236a:	1859      	adds	r1, r3, r1
    236c:	9803      	ldr	r0, [sp, #12]
    236e:	4b27      	ldr	r3, [pc, #156]	; (240c <udd_ep_transfer_process+0x178>)
    2370:	4798      	blx	r3
	ptr_job->nb_trans += nb_trans;
    2372:	68e3      	ldr	r3, [r4, #12]
    2374:	18fa      	adds	r2, r7, r3
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2376:	68a3      	ldr	r3, [r4, #8]
	ptr_job->nb_trans += nb_trans;
    2378:	60e2      	str	r2, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    237a:	429a      	cmp	r2, r3
    237c:	d900      	bls.n	2380 <udd_ep_transfer_process+0xec>
		ptr_job->nb_trans = ptr_job->buf_size;
    237e:	60e3      	str	r3, [r4, #12]
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2380:	88b2      	ldrh	r2, [r6, #4]
    2382:	42ba      	cmp	r2, r7
    2384:	d127      	bne.n	23d6 <udd_ep_transfer_process+0x142>
    2386:	68e6      	ldr	r6, [r4, #12]
    2388:	42b3      	cmp	r3, r6
    238a:	d024      	beq.n	23d6 <udd_ep_transfer_process+0x142>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    238c:	1b9d      	subs	r5, r3, r6
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    238e:	4f19      	ldr	r7, [pc, #100]	; (23f4 <udd_ep_transfer_process+0x160>)
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2390:	b2ad      	uxth	r5, r5
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2392:	9901      	ldr	r1, [sp, #4]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2394:	42bd      	cmp	r5, r7
    2396:	d916      	bls.n	23c6 <udd_ep_transfer_process+0x132>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2398:	4b17      	ldr	r3, [pc, #92]	; (23f8 <udd_ep_transfer_process+0x164>)
    239a:	0038      	movs	r0, r7
    239c:	4798      	blx	r3
    239e:	1a7b      	subs	r3, r7, r1
		if (next_trans < ep_size) {
    23a0:	9a01      	ldr	r2, [sp, #4]
			next_trans -= next_trans % ep_size;
    23a2:	b29b      	uxth	r3, r3
    23a4:	4816      	ldr	r0, [pc, #88]	; (2400 <udd_ep_transfer_process+0x16c>)
    23a6:	4f1a      	ldr	r7, [pc, #104]	; (2410 <udd_ep_transfer_process+0x17c>)
		if (next_trans < ep_size) {
    23a8:	429a      	cmp	r2, r3
    23aa:	d911      	bls.n	23d0 <udd_ep_transfer_process+0x13c>
			ptr_job->b_use_out_cache_buffer = true;
    23ac:	2304      	movs	r3, #4
    23ae:	7ca2      	ldrb	r2, [r4, #18]
    23b0:	4313      	orrs	r3, r2
    23b2:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    23b4:	9b02      	ldr	r3, [sp, #8]
    23b6:	1e5a      	subs	r2, r3, #1
    23b8:	4b13      	ldr	r3, [pc, #76]	; (2408 <udd_ep_transfer_process+0x174>)
    23ba:	0192      	lsls	r2, r2, #6
    23bc:	18d2      	adds	r2, r2, r3
    23be:	9b01      	ldr	r3, [sp, #4]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    23c0:	9902      	ldr	r1, [sp, #8]
    23c2:	47b8      	blx	r7
    23c4:	e7a2      	b.n	230c <udd_ep_transfer_process+0x78>
			next_trans -= next_trans % ep_size;
    23c6:	4b0d      	ldr	r3, [pc, #52]	; (23fc <udd_ep_transfer_process+0x168>)
    23c8:	0028      	movs	r0, r5
    23ca:	4798      	blx	r3
    23cc:	1a6b      	subs	r3, r5, r1
    23ce:	e7e7      	b.n	23a0 <udd_ep_transfer_process+0x10c>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    23d0:	6862      	ldr	r2, [r4, #4]
    23d2:	1992      	adds	r2, r2, r6
    23d4:	e7f4      	b.n	23c0 <udd_ep_transfer_process+0x12c>
	ptr_job->busy = false;
    23d6:	2201      	movs	r2, #1
    23d8:	7ca3      	ldrb	r3, [r4, #18]
    23da:	4393      	bics	r3, r2
    23dc:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    23de:	6823      	ldr	r3, [r4, #0]
    23e0:	2b00      	cmp	r3, #0
    23e2:	d100      	bne.n	23e6 <udd_ep_transfer_process+0x152>
    23e4:	e792      	b.n	230c <udd_ep_transfer_process+0x78>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    23e6:	002a      	movs	r2, r5
    23e8:	68e1      	ldr	r1, [r4, #12]
    23ea:	2000      	movs	r0, #0
    23ec:	e7a2      	b.n	2334 <udd_ep_transfer_process+0xa0>
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	00002271 	.word	0x00002271
    23f4:	00001fff 	.word	0x00001fff
    23f8:	00008e95 	.word	0x00008e95
    23fc:	00008cc1 	.word	0x00008cc1
    2400:	20000d7c 	.word	0x20000d7c
    2404:	00004979 	.word	0x00004979
    2408:	20000cbc 	.word	0x20000cbc
    240c:	00009239 	.word	0x00009239
    2410:	000049c5 	.word	0x000049c5

00002414 <udd_ctrl_stall_data>:
/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2414:	2205      	movs	r2, #5
{
    2416:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2418:	4b05      	ldr	r3, [pc, #20]	; (2430 <udd_ctrl_stall_data+0x1c>)

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    241a:	4c06      	ldr	r4, [pc, #24]	; (2434 <udd_ctrl_stall_data+0x20>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    241c:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    241e:	0020      	movs	r0, r4
    2420:	2180      	movs	r1, #128	; 0x80
    2422:	4b05      	ldr	r3, [pc, #20]	; (2438 <udd_ctrl_stall_data+0x24>)
    2424:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2426:	2100      	movs	r1, #0
    2428:	0020      	movs	r0, r4
    242a:	4b04      	ldr	r3, [pc, #16]	; (243c <udd_ctrl_stall_data+0x28>)
    242c:	4798      	blx	r3
}
    242e:	bd10      	pop	{r4, pc}
    2430:	20000334 	.word	0x20000334
    2434:	20000d7c 	.word	0x20000d7c
    2438:	000048ff 	.word	0x000048ff
    243c:	00004919 	.word	0x00004919

00002440 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    2440:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2442:	0004      	movs	r4, r0
	// Reset USB Device Stack Core
	udc_reset();
    2444:	4b1d      	ldr	r3, [pc, #116]	; (24bc <_usb_on_bus_reset+0x7c>)
    2446:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2448:	2380      	movs	r3, #128	; 0x80
    244a:	6822      	ldr	r2, [r4, #0]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    244c:	ad01      	add	r5, sp, #4
    244e:	7293      	strb	r3, [r2, #10]
    2450:	0028      	movs	r0, r5
    2452:	4b1b      	ldr	r3, [pc, #108]	; (24c0 <_usb_on_bus_reset+0x80>)
    2454:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    2456:	2303      	movs	r3, #3
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    2458:	0029      	movs	r1, r5
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    245a:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    245c:	0020      	movs	r0, r4
    245e:	4b19      	ldr	r3, [pc, #100]	; (24c4 <_usb_on_bus_reset+0x84>)
    2460:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    2462:	4919      	ldr	r1, [pc, #100]	; (24c8 <_usb_on_bus_reset+0x88>)
    2464:	0020      	movs	r0, r4
    2466:	4b19      	ldr	r3, [pc, #100]	; (24cc <_usb_on_bus_reset+0x8c>)
    2468:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    246a:	4d19      	ldr	r5, [pc, #100]	; (24d0 <_usb_on_bus_reset+0x90>)
    246c:	4b19      	ldr	r3, [pc, #100]	; (24d4 <_usb_on_bus_reset+0x94>)
    246e:	2202      	movs	r2, #2
    2470:	2100      	movs	r1, #0
    2472:	0020      	movs	r0, r4
    2474:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    2476:	2200      	movs	r2, #0
    2478:	4b17      	ldr	r3, [pc, #92]	; (24d8 <_usb_on_bus_reset+0x98>)
    247a:	0011      	movs	r1, r2
    247c:	0020      	movs	r0, r4
    247e:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    2480:	4b16      	ldr	r3, [pc, #88]	; (24dc <_usb_on_bus_reset+0x9c>)
    2482:	2201      	movs	r2, #1
    2484:	2100      	movs	r1, #0
    2486:	0020      	movs	r0, r4
    2488:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    248a:	4d15      	ldr	r5, [pc, #84]	; (24e0 <_usb_on_bus_reset+0xa0>)
    248c:	2202      	movs	r2, #2
    248e:	2100      	movs	r1, #0
    2490:	0020      	movs	r0, r4
    2492:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2494:	2200      	movs	r2, #0
    2496:	0020      	movs	r0, r4
    2498:	0011      	movs	r1, r2
    249a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    249c:	2201      	movs	r2, #1
    249e:	2100      	movs	r1, #0
    24a0:	0020      	movs	r0, r4
    24a2:	47a8      	blx	r5
    24a4:	6821      	ldr	r1, [r4, #0]
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    24a6:	4a0f      	ldr	r2, [pc, #60]	; (24e4 <_usb_on_bus_reset+0xa4>)
    24a8:	890b      	ldrh	r3, [r1, #8]
    24aa:	401a      	ands	r2, r3
    24ac:	2380      	movs	r3, #128	; 0x80
    24ae:	00db      	lsls	r3, r3, #3
    24b0:	4313      	orrs	r3, r2
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    24b2:	2200      	movs	r2, #0
    24b4:	810b      	strh	r3, [r1, #8]
    24b6:	4b0c      	ldr	r3, [pc, #48]	; (24e8 <_usb_on_bus_reset+0xa8>)
    24b8:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    24ba:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    24bc:	000068b1 	.word	0x000068b1
    24c0:	00004715 	.word	0x00004715
    24c4:	00004725 	.word	0x00004725
    24c8:	20000efc 	.word	0x20000efc
    24cc:	00004a0d 	.word	0x00004a0d
    24d0:	000045ad 	.word	0x000045ad
    24d4:	00002651 	.word	0x00002651
    24d8:	00002a2d 	.word	0x00002a2d
    24dc:	00002529 	.word	0x00002529
    24e0:	000045fd 	.word	0x000045fd
    24e4:	fffff3ff 	.word	0xfffff3ff
    24e8:	20000334 	.word	0x20000334

000024ec <udd_ctrl_send_zlp_in>:
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    24ec:	2203      	movs	r2, #3
{
    24ee:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    24f0:	4b07      	ldr	r3, [pc, #28]	; (2510 <udd_ctrl_send_zlp_in+0x24>)
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    24f2:	4c08      	ldr	r4, [pc, #32]	; (2514 <udd_ctrl_send_zlp_in+0x28>)
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    24f4:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    24f6:	4908      	ldr	r1, [pc, #32]	; (2518 <udd_ctrl_send_zlp_in+0x2c>)
    24f8:	0020      	movs	r0, r4
    24fa:	4b08      	ldr	r3, [pc, #32]	; (251c <udd_ctrl_send_zlp_in+0x30>)
    24fc:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    24fe:	2300      	movs	r3, #0
    2500:	4a07      	ldr	r2, [pc, #28]	; (2520 <udd_ctrl_send_zlp_in+0x34>)
    2502:	0019      	movs	r1, r3
    2504:	6892      	ldr	r2, [r2, #8]
    2506:	0020      	movs	r0, r4
    2508:	4c06      	ldr	r4, [pc, #24]	; (2524 <udd_ctrl_send_zlp_in+0x38>)
    250a:	47a0      	blx	r4
}
    250c:	bd10      	pop	{r4, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	20000334 	.word	0x20000334
    2514:	20000d7c 	.word	0x20000d7c
    2518:	20000efc 	.word	0x20000efc
    251c:	00004a0d 	.word	0x00004a0d
    2520:	20000ee4 	.word	0x20000ee4
    2524:	00004979 	.word	0x00004979

00002528 <_usb_ep0_on_tansfer_fail>:
{
    2528:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    252a:	7989      	ldrb	r1, [r1, #6]
    252c:	4b0c      	ldr	r3, [pc, #48]	; (2560 <_usb_ep0_on_tansfer_fail+0x38>)
    252e:	b24a      	sxtb	r2, r1
    2530:	2a00      	cmp	r2, #0
    2532:	da0b      	bge.n	254c <_usb_ep0_on_tansfer_fail+0x24>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2534:	781b      	ldrb	r3, [r3, #0]
    2536:	2b01      	cmp	r3, #1
    2538:	d102      	bne.n	2540 <_usb_ep0_on_tansfer_fail+0x18>
		udd_ctrl_send_zlp_in();
    253a:	4b0a      	ldr	r3, [pc, #40]	; (2564 <_usb_ep0_on_tansfer_fail+0x3c>)
    253c:	4798      	blx	r3
}
    253e:	bd10      	pop	{r4, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2540:	2b04      	cmp	r3, #4
    2542:	d1fc      	bne.n	253e <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2544:	4808      	ldr	r0, [pc, #32]	; (2568 <_usb_ep0_on_tansfer_fail+0x40>)
    2546:	4b09      	ldr	r3, [pc, #36]	; (256c <_usb_ep0_on_tansfer_fail+0x44>)
    2548:	4798      	blx	r3
}
    254a:	e7f8      	b.n	253e <_usb_ep0_on_tansfer_fail+0x16>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    254c:	781a      	ldrb	r2, [r3, #0]
    254e:	2a02      	cmp	r2, #2
    2550:	d102      	bne.n	2558 <_usb_ep0_on_tansfer_fail+0x30>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2552:	3202      	adds	r2, #2
    2554:	701a      	strb	r2, [r3, #0]
    2556:	e7f2      	b.n	253e <_usb_ep0_on_tansfer_fail+0x16>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2558:	2a03      	cmp	r2, #3
    255a:	d1f0      	bne.n	253e <_usb_ep0_on_tansfer_fail+0x16>
    255c:	e7f2      	b.n	2544 <_usb_ep0_on_tansfer_fail+0x1c>
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	20000334 	.word	0x20000334
    2564:	000024ed 	.word	0x000024ed
    2568:	20000d7c 	.word	0x20000d7c
    256c:	000048ff 	.word	0x000048ff

00002570 <udd_ctrl_in_sent>:
{
    2570:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2572:	4d1d      	ldr	r5, [pc, #116]	; (25e8 <udd_ctrl_in_sent+0x78>)
    2574:	4e1d      	ldr	r6, [pc, #116]	; (25ec <udd_ctrl_in_sent+0x7c>)
    2576:	882b      	ldrh	r3, [r5, #0]
    2578:	89b4      	ldrh	r4, [r6, #12]
    257a:	1ae4      	subs	r4, r4, r3
    257c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    257e:	2c00      	cmp	r4, #0
    2580:	d11b      	bne.n	25ba <udd_ctrl_in_sent+0x4a>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2582:	4a1b      	ldr	r2, [pc, #108]	; (25f0 <udd_ctrl_in_sent+0x80>)
    2584:	8811      	ldrh	r1, [r2, #0]
    2586:	185b      	adds	r3, r3, r1
    2588:	b29b      	uxth	r3, r3
    258a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    258c:	88f2      	ldrh	r2, [r6, #6]
    258e:	429a      	cmp	r2, r3
    2590:	d003      	beq.n	259a <udd_ctrl_in_sent+0x2a>
    2592:	4b18      	ldr	r3, [pc, #96]	; (25f4 <udd_ctrl_in_sent+0x84>)
    2594:	781b      	ldrb	r3, [r3, #0]
    2596:	2b00      	cmp	r3, #0
    2598:	d007      	beq.n	25aa <udd_ctrl_in_sent+0x3a>
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    259a:	2204      	movs	r2, #4
    259c:	4b16      	ldr	r3, [pc, #88]	; (25f8 <udd_ctrl_in_sent+0x88>)
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    259e:	4917      	ldr	r1, [pc, #92]	; (25fc <udd_ctrl_in_sent+0x8c>)
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    25a0:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    25a2:	4817      	ldr	r0, [pc, #92]	; (2600 <udd_ctrl_in_sent+0x90>)
    25a4:	4b17      	ldr	r3, [pc, #92]	; (2604 <udd_ctrl_in_sent+0x94>)
    25a6:	4798      	blx	r3
}
    25a8:	bd70      	pop	{r4, r5, r6, pc}
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    25aa:	6973      	ldr	r3, [r6, #20]
    25ac:	2b00      	cmp	r3, #0
    25ae:	d016      	beq.n	25de <udd_ctrl_in_sent+0x6e>
    25b0:	4798      	blx	r3
    25b2:	2800      	cmp	r0, #0
    25b4:	d013      	beq.n	25de <udd_ctrl_in_sent+0x6e>
			udd_ctrl_payload_nb_trans = 0;
    25b6:	802c      	strh	r4, [r5, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    25b8:	89b4      	ldrh	r4, [r6, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    25ba:	2c3f      	cmp	r4, #63	; 0x3f
    25bc:	d90f      	bls.n	25de <udd_ctrl_in_sent+0x6e>
		b_shortpacket = false;
    25be:	2200      	movs	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    25c0:	2440      	movs	r4, #64	; 0x40
		b_shortpacket = false;
    25c2:	4b0c      	ldr	r3, [pc, #48]	; (25f4 <udd_ctrl_in_sent+0x84>)
    25c4:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    25c6:	882b      	ldrh	r3, [r5, #0]
    25c8:	68b2      	ldr	r2, [r6, #8]
    25ca:	2100      	movs	r1, #0
    25cc:	18d2      	adds	r2, r2, r3
    25ce:	480c      	ldr	r0, [pc, #48]	; (2600 <udd_ctrl_in_sent+0x90>)
    25d0:	0023      	movs	r3, r4
    25d2:	4e0d      	ldr	r6, [pc, #52]	; (2608 <udd_ctrl_in_sent+0x98>)
    25d4:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    25d6:	882b      	ldrh	r3, [r5, #0]
    25d8:	18e4      	adds	r4, r4, r3
    25da:	802c      	strh	r4, [r5, #0]
    25dc:	e7e4      	b.n	25a8 <udd_ctrl_in_sent+0x38>
		b_shortpacket = true;
    25de:	2201      	movs	r2, #1
    25e0:	4b04      	ldr	r3, [pc, #16]	; (25f4 <udd_ctrl_in_sent+0x84>)
    25e2:	701a      	strb	r2, [r3, #0]
    25e4:	e7ef      	b.n	25c6 <udd_ctrl_in_sent+0x56>
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	20000330 	.word	0x20000330
    25ec:	20000ee4 	.word	0x20000ee4
    25f0:	20000332 	.word	0x20000332
    25f4:	2000032e 	.word	0x2000032e
    25f8:	20000334 	.word	0x20000334
    25fc:	20000efc 	.word	0x20000efc
    2600:	20000d7c 	.word	0x20000d7c
    2604:	00004a0d 	.word	0x00004a0d
    2608:	00004979 	.word	0x00004979

0000260c <_usb_on_sof_notify>:
{
    260c:	b510      	push	{r4, lr}
	udc_sof_notify();
    260e:	4b01      	ldr	r3, [pc, #4]	; (2614 <_usb_on_sof_notify+0x8>)
    2610:	4798      	blx	r3
}
    2612:	bd10      	pop	{r4, pc}
    2614:	00006905 	.word	0x00006905

00002618 <cpu_irq_restore.part.0>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
		cpu_irq_enable();
    2618:	2201      	movs	r2, #1
    261a:	4b03      	ldr	r3, [pc, #12]	; (2628 <cpu_irq_restore.part.0+0x10>)
    261c:	701a      	strb	r2, [r3, #0]
    261e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2622:	b662      	cpsie	i
}
    2624:	4770      	bx	lr
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	20000120 	.word	0x20000120

0000262c <udd_wait_clock_ready>:
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    262c:	4b07      	ldr	r3, [pc, #28]	; (264c <udd_wait_clock_ready+0x20>)
    262e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    2630:	0692      	lsls	r2, r2, #26
    2632:	d405      	bmi.n	2640 <udd_wait_clock_ready+0x14>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2634:	21d0      	movs	r1, #208	; 0xd0
    2636:	68da      	ldr	r2, [r3, #12]
    2638:	400a      	ands	r2, r1
    263a:	2ad0      	cmp	r2, #208	; 0xd0
    263c:	d1fb      	bne.n	2636 <udd_wait_clock_ready+0xa>
}
    263e:	4770      	bx	lr
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2640:	2210      	movs	r2, #16
    2642:	68d9      	ldr	r1, [r3, #12]
    2644:	4211      	tst	r1, r2
    2646:	d0fc      	beq.n	2642 <udd_wait_clock_ready+0x16>
    2648:	e7f9      	b.n	263e <udd_wait_clock_ready+0x12>
    264a:	46c0      	nop			; (mov r8, r8)
    264c:	40000800 	.word	0x40000800

00002650 <_usb_ep0_on_setup>:
{
    2650:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2652:	4e27      	ldr	r6, [pc, #156]	; (26f0 <_usb_ep0_on_setup+0xa0>)
{
    2654:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2656:	7833      	ldrb	r3, [r6, #0]
    2658:	2b00      	cmp	r3, #0
    265a:	d006      	beq.n	266a <_usb_ep0_on_setup+0x1a>
		if (NULL != udd_g_ctrlreq.callback) {
    265c:	4b25      	ldr	r3, [pc, #148]	; (26f4 <_usb_ep0_on_setup+0xa4>)
    265e:	691b      	ldr	r3, [r3, #16]
    2660:	2b00      	cmp	r3, #0
    2662:	d000      	beq.n	2666 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2664:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2666:	2300      	movs	r3, #0
    2668:	7033      	strb	r3, [r6, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    266a:	8823      	ldrh	r3, [r4, #0]
    266c:	2b08      	cmp	r3, #8
    266e:	d002      	beq.n	2676 <_usb_ep0_on_setup+0x26>
		udd_ctrl_stall_data();
    2670:	4b21      	ldr	r3, [pc, #132]	; (26f8 <_usb_ep0_on_setup+0xa8>)
				udd_ctrl_send_zlp_in();
    2672:	4798      	blx	r3
}
    2674:	bd70      	pop	{r4, r5, r6, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2676:	4c21      	ldr	r4, [pc, #132]	; (26fc <_usb_ep0_on_setup+0xac>)
    2678:	4d1e      	ldr	r5, [pc, #120]	; (26f4 <_usb_ep0_on_setup+0xa4>)
    267a:	7823      	ldrb	r3, [r4, #0]
    267c:	702b      	strb	r3, [r5, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    267e:	7863      	ldrb	r3, [r4, #1]
    2680:	706b      	strb	r3, [r5, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2682:	78e2      	ldrb	r2, [r4, #3]
    2684:	78a3      	ldrb	r3, [r4, #2]
    2686:	0212      	lsls	r2, r2, #8
    2688:	189b      	adds	r3, r3, r2
    268a:	806b      	strh	r3, [r5, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    268c:	7962      	ldrb	r2, [r4, #5]
    268e:	7923      	ldrb	r3, [r4, #4]
    2690:	0212      	lsls	r2, r2, #8
    2692:	189b      	adds	r3, r3, r2
    2694:	80ab      	strh	r3, [r5, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2696:	79e2      	ldrb	r2, [r4, #7]
    2698:	79a3      	ldrb	r3, [r4, #6]
    269a:	0212      	lsls	r2, r2, #8
    269c:	189b      	adds	r3, r3, r2
    269e:	80eb      	strh	r3, [r5, #6]
		if (false == udc_process_setup()) {
    26a0:	4b17      	ldr	r3, [pc, #92]	; (2700 <_usb_ep0_on_setup+0xb0>)
    26a2:	4798      	blx	r3
    26a4:	2800      	cmp	r0, #0
    26a6:	d0e3      	beq.n	2670 <_usb_ep0_on_setup+0x20>
		} else if (Udd_setup_is_in()) {
    26a8:	782b      	ldrb	r3, [r5, #0]
    26aa:	2b7f      	cmp	r3, #127	; 0x7f
    26ac:	d90d      	bls.n	26ca <_usb_ep0_on_setup+0x7a>
			udd_ctrl_prev_payload_nb_trans = 0;
    26ae:	2100      	movs	r1, #0
    26b0:	4b14      	ldr	r3, [pc, #80]	; (2704 <_usb_ep0_on_setup+0xb4>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    26b2:	0022      	movs	r2, r4
			udd_ctrl_prev_payload_nb_trans = 0;
    26b4:	8019      	strh	r1, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    26b6:	4b14      	ldr	r3, [pc, #80]	; (2708 <_usb_ep0_on_setup+0xb8>)
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    26b8:	4814      	ldr	r0, [pc, #80]	; (270c <_usb_ep0_on_setup+0xbc>)
			udd_ctrl_payload_nb_trans = 0;
    26ba:	8019      	strh	r1, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    26bc:	2302      	movs	r3, #2
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    26be:	4c14      	ldr	r4, [pc, #80]	; (2710 <_usb_ep0_on_setup+0xc0>)
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    26c0:	7033      	strb	r3, [r6, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    26c2:	333e      	adds	r3, #62	; 0x3e
    26c4:	47a0      	blx	r4
			udd_ctrl_in_sent();
    26c6:	4b13      	ldr	r3, [pc, #76]	; (2714 <_usb_ep0_on_setup+0xc4>)
    26c8:	e7d3      	b.n	2672 <_usb_ep0_on_setup+0x22>
			if(0 == udd_g_ctrlreq.req.wLength) {
    26ca:	88eb      	ldrh	r3, [r5, #6]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d101      	bne.n	26d4 <_usb_ep0_on_setup+0x84>
				udd_ctrl_send_zlp_in();
    26d0:	4b11      	ldr	r3, [pc, #68]	; (2718 <_usb_ep0_on_setup+0xc8>)
    26d2:	e7ce      	b.n	2672 <_usb_ep0_on_setup+0x22>
				udd_ctrl_prev_payload_nb_trans = 0;
    26d4:	2100      	movs	r1, #0
    26d6:	4b0b      	ldr	r3, [pc, #44]	; (2704 <_usb_ep0_on_setup+0xb4>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    26d8:	0022      	movs	r2, r4
				udd_ctrl_prev_payload_nb_trans = 0;
    26da:	8019      	strh	r1, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    26dc:	4b0a      	ldr	r3, [pc, #40]	; (2708 <_usb_ep0_on_setup+0xb8>)
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    26de:	4c0c      	ldr	r4, [pc, #48]	; (2710 <_usb_ep0_on_setup+0xc0>)
				udd_ctrl_payload_nb_trans = 0;
    26e0:	8019      	strh	r1, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    26e2:	2301      	movs	r3, #1
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    26e4:	4809      	ldr	r0, [pc, #36]	; (270c <_usb_ep0_on_setup+0xbc>)
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    26e6:	7033      	strb	r3, [r6, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    26e8:	333f      	adds	r3, #63	; 0x3f
    26ea:	47a0      	blx	r4
    26ec:	e7c2      	b.n	2674 <_usb_ep0_on_setup+0x24>
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	20000334 	.word	0x20000334
    26f4:	20000ee4 	.word	0x20000ee4
    26f8:	00002415 	.word	0x00002415
    26fc:	20000efc 	.word	0x20000efc
    2700:	0000693d 	.word	0x0000693d
    2704:	20000332 	.word	0x20000332
    2708:	20000330 	.word	0x20000330
    270c:	20000d7c 	.word	0x20000d7c
    2710:	000049c5 	.word	0x000049c5
    2714:	00002571 	.word	0x00002571
    2718:	000024ed 	.word	0x000024ed

0000271c <udd_sleep_mode>:
	enum sleepmgr_mode sleep_mode[] = {
    271c:	2300      	movs	r3, #0
{
    271e:	b5f0      	push	{r4, r5, r6, r7, lr}
    2720:	b085      	sub	sp, #20
	enum sleepmgr_mode sleep_mode[] = {
    2722:	ac03      	add	r4, sp, #12
    2724:	7023      	strb	r3, [r4, #0]
    2726:	3303      	adds	r3, #3
    2728:	7063      	strb	r3, [r4, #1]
    272a:	3b01      	subs	r3, #1
    272c:	70a3      	strb	r3, [r4, #2]
    272e:	3b01      	subs	r3, #1
    2730:	70e3      	strb	r3, [r4, #3]
	if (udd_state == new_state) {
    2732:	4b16      	ldr	r3, [pc, #88]	; (278c <udd_sleep_mode+0x70>)
{
    2734:	0005      	movs	r5, r0
	if (udd_state == new_state) {
    2736:	781b      	ldrb	r3, [r3, #0]
    2738:	9301      	str	r3, [sp, #4]
    273a:	4283      	cmp	r3, r0
    273c:	d024      	beq.n	2788 <udd_sleep_mode+0x6c>
	if (new_state != UDD_STATE_OFF) {
    273e:	2800      	cmp	r0, #0
    2740:	d00e      	beq.n	2760 <udd_sleep_mode+0x44>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2742:	5c26      	ldrb	r6, [r4, r0]
    2744:	4f12      	ldr	r7, [pc, #72]	; (2790 <udd_sleep_mode+0x74>)
    2746:	5dbb      	ldrb	r3, [r7, r6]
    2748:	2bff      	cmp	r3, #255	; 0xff
    274a:	d100      	bne.n	274e <udd_sleep_mode+0x32>
    274c:	e7fe      	b.n	274c <udd_sleep_mode+0x30>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    274e:	4b11      	ldr	r3, [pc, #68]	; (2794 <udd_sleep_mode+0x78>)
    2750:	4798      	blx	r3

	++sleepmgr_locks[mode];
    2752:	5dbb      	ldrb	r3, [r7, r6]
    2754:	3301      	adds	r3, #1
    2756:	55bb      	strb	r3, [r7, r6]
	if (cpu_irq_is_enabled_flags(flags))
    2758:	2800      	cmp	r0, #0
    275a:	d001      	beq.n	2760 <udd_sleep_mode+0x44>
    275c:	4b0e      	ldr	r3, [pc, #56]	; (2798 <udd_sleep_mode+0x7c>)
    275e:	4798      	blx	r3
	if (udd_state != UDD_STATE_OFF) {
    2760:	9b01      	ldr	r3, [sp, #4]
    2762:	2b00      	cmp	r3, #0
    2764:	d00e      	beq.n	2784 <udd_sleep_mode+0x68>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2766:	5ce4      	ldrb	r4, [r4, r3]
    2768:	4e09      	ldr	r6, [pc, #36]	; (2790 <udd_sleep_mode+0x74>)
    276a:	5d33      	ldrb	r3, [r6, r4]
    276c:	2b00      	cmp	r3, #0
    276e:	d100      	bne.n	2772 <udd_sleep_mode+0x56>
    2770:	e7fe      	b.n	2770 <udd_sleep_mode+0x54>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    2772:	4b08      	ldr	r3, [pc, #32]	; (2794 <udd_sleep_mode+0x78>)
    2774:	4798      	blx	r3

	--sleepmgr_locks[mode];
    2776:	5d33      	ldrb	r3, [r6, r4]
    2778:	3b01      	subs	r3, #1
    277a:	5533      	strb	r3, [r6, r4]
    277c:	2800      	cmp	r0, #0
    277e:	d001      	beq.n	2784 <udd_sleep_mode+0x68>
    2780:	4b05      	ldr	r3, [pc, #20]	; (2798 <udd_sleep_mode+0x7c>)
    2782:	4798      	blx	r3
	udd_state = new_state;
    2784:	4b01      	ldr	r3, [pc, #4]	; (278c <udd_sleep_mode+0x70>)
    2786:	701d      	strb	r5, [r3, #0]
}
    2788:	b005      	add	sp, #20
    278a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    278c:	200003b0 	.word	0x200003b0
    2790:	2000105d 	.word	0x2000105d
    2794:	0000224d 	.word	0x0000224d
    2798:	00002619 	.word	0x00002619

0000279c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    279c:	b570      	push	{r4, r5, r6, lr}
	udd_wait_clock_ready();
    279e:	4b0b      	ldr	r3, [pc, #44]	; (27cc <_usb_on_wakeup+0x30>)
    27a0:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    27a2:	4c0b      	ldr	r4, [pc, #44]	; (27d0 <_usb_on_wakeup+0x34>)
    27a4:	4b0b      	ldr	r3, [pc, #44]	; (27d4 <_usb_on_wakeup+0x38>)
    27a6:	2102      	movs	r1, #2
    27a8:	0020      	movs	r0, r4
    27aa:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    27ac:	4d0a      	ldr	r5, [pc, #40]	; (27d8 <_usb_on_wakeup+0x3c>)
    27ae:	2104      	movs	r1, #4
    27b0:	0020      	movs	r0, r4
    27b2:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    27b4:	4a09      	ldr	r2, [pc, #36]	; (27dc <_usb_on_wakeup+0x40>)
    27b6:	4b0a      	ldr	r3, [pc, #40]	; (27e0 <_usb_on_wakeup+0x44>)
    27b8:	2106      	movs	r1, #6
    27ba:	0020      	movs	r0, r4
    27bc:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    27be:	2106      	movs	r1, #6
    27c0:	0020      	movs	r0, r4
    27c2:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    27c4:	2003      	movs	r0, #3
    27c6:	4b07      	ldr	r3, [pc, #28]	; (27e4 <_usb_on_wakeup+0x48>)
    27c8:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    27ca:	bd70      	pop	{r4, r5, r6, pc}
    27cc:	0000262d 	.word	0x0000262d
    27d0:	20000d7c 	.word	0x20000d7c
    27d4:	00004591 	.word	0x00004591
    27d8:	00004571 	.word	0x00004571
    27dc:	00002815 	.word	0x00002815
    27e0:	0000454d 	.word	0x0000454d
    27e4:	0000271d 	.word	0x0000271d

000027e8 <_usb_on_suspend>:
{
    27e8:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    27ea:	4c06      	ldr	r4, [pc, #24]	; (2804 <_usb_on_suspend+0x1c>)
    27ec:	2104      	movs	r1, #4
    27ee:	0020      	movs	r0, r4
    27f0:	4b05      	ldr	r3, [pc, #20]	; (2808 <_usb_on_suspend+0x20>)
    27f2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    27f4:	2102      	movs	r1, #2
    27f6:	0020      	movs	r0, r4
    27f8:	4b04      	ldr	r3, [pc, #16]	; (280c <_usb_on_suspend+0x24>)
    27fa:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    27fc:	2001      	movs	r0, #1
    27fe:	4b04      	ldr	r3, [pc, #16]	; (2810 <_usb_on_suspend+0x28>)
    2800:	4798      	blx	r3
}
    2802:	bd10      	pop	{r4, pc}
    2804:	20000d7c 	.word	0x20000d7c
    2808:	00004591 	.word	0x00004591
    280c:	00004571 	.word	0x00004571
    2810:	0000271d 	.word	0x0000271d

00002814 <_usb_device_lpm_suspend>:
{
    2814:	b570      	push	{r4, r5, r6, lr}
    2816:	000d      	movs	r5, r1
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2818:	4c0d      	ldr	r4, [pc, #52]	; (2850 <_usb_device_lpm_suspend+0x3c>)
    281a:	2106      	movs	r1, #6
    281c:	4e0d      	ldr	r6, [pc, #52]	; (2854 <_usb_device_lpm_suspend+0x40>)
    281e:	0020      	movs	r0, r4
    2820:	47b0      	blx	r6
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2822:	2104      	movs	r1, #4
    2824:	0020      	movs	r0, r4
    2826:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2828:	2102      	movs	r1, #2
    282a:	4b0b      	ldr	r3, [pc, #44]	; (2858 <_usb_device_lpm_suspend+0x44>)
    282c:	0020      	movs	r0, r4
    282e:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    2830:	4b0a      	ldr	r3, [pc, #40]	; (285c <_usb_device_lpm_suspend+0x48>)
    2832:	2002      	movs	r0, #2
    2834:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    2836:	682b      	ldr	r3, [r5, #0]
    2838:	2b00      	cmp	r3, #0
    283a:	d001      	beq.n	2840 <_usb_device_lpm_suspend+0x2c>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    283c:	4b08      	ldr	r3, [pc, #32]	; (2860 <_usb_device_lpm_suspend+0x4c>)
    283e:	4798      	blx	r3
	if (!(*lpm_wakeup_enable)) {
    2840:	682b      	ldr	r3, [r5, #0]
    2842:	2b00      	cmp	r3, #0
    2844:	d101      	bne.n	284a <_usb_device_lpm_suspend+0x36>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    2846:	4b07      	ldr	r3, [pc, #28]	; (2864 <_usb_device_lpm_suspend+0x50>)
    2848:	4798      	blx	r3
	UDC_SUSPEND_LPM_EVENT();
    284a:	4b07      	ldr	r3, [pc, #28]	; (2868 <_usb_device_lpm_suspend+0x54>)
    284c:	4798      	blx	r3
}
    284e:	bd70      	pop	{r4, r5, r6, pc}
    2850:	20000d7c 	.word	0x20000d7c
    2854:	00004591 	.word	0x00004591
    2858:	00004571 	.word	0x00004571
    285c:	0000271d 	.word	0x0000271d
    2860:	00008b69 	.word	0x00008b69
    2864:	00008b67 	.word	0x00008b67
    2868:	00008b65 	.word	0x00008b65

0000286c <udd_ep_abort>:
{
    286c:	b570      	push	{r4, r5, r6, lr}
    286e:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2870:	0001      	movs	r1, r0
    2872:	4b0a      	ldr	r3, [pc, #40]	; (289c <udd_ep_abort+0x30>)
    2874:	480a      	ldr	r0, [pc, #40]	; (28a0 <udd_ep_abort+0x34>)
    2876:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2878:	4b0a      	ldr	r3, [pc, #40]	; (28a4 <udd_ep_abort+0x38>)
    287a:	0020      	movs	r0, r4
    287c:	4798      	blx	r3
    287e:	0003      	movs	r3, r0
	if (!ptr_job->busy) {
    2880:	7c82      	ldrb	r2, [r0, #18]
    2882:	2001      	movs	r0, #1
    2884:	4202      	tst	r2, r0
    2886:	d007      	beq.n	2898 <udd_ep_abort+0x2c>
	if (NULL != ptr_job->call_trans) {
    2888:	681d      	ldr	r5, [r3, #0]
	ptr_job->busy = false;
    288a:	4382      	bics	r2, r0
    288c:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    288e:	2d00      	cmp	r5, #0
    2890:	d002      	beq.n	2898 <udd_ep_abort+0x2c>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2892:	0022      	movs	r2, r4
    2894:	68d9      	ldr	r1, [r3, #12]
    2896:	47a8      	blx	r5
}
    2898:	bd70      	pop	{r4, r5, r6, pc}
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	000048b5 	.word	0x000048b5
    28a0:	20000d7c 	.word	0x20000d7c
    28a4:	00002271 	.word	0x00002271

000028a8 <udd_is_high_speed>:
    28a8:	2000      	movs	r0, #0
    28aa:	4770      	bx	lr

000028ac <udd_get_frame_number>:
{
    28ac:	4b02      	ldr	r3, [pc, #8]	; (28b8 <udd_get_frame_number+0xc>)
}
    28ae:	681b      	ldr	r3, [r3, #0]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    28b0:	8a18      	ldrh	r0, [r3, #16]
    28b2:	0480      	lsls	r0, r0, #18
    28b4:	0d40      	lsrs	r0, r0, #21
    28b6:	4770      	bx	lr
    28b8:	20000d7c 	.word	0x20000d7c

000028bc <udd_get_micro_frame_number>:
{
    28bc:	4b02      	ldr	r3, [pc, #8]	; (28c8 <udd_get_micro_frame_number+0xc>)
}
    28be:	681b      	ldr	r3, [r3, #0]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    28c0:	8a18      	ldrh	r0, [r3, #16]
    28c2:	b280      	uxth	r0, r0
    28c4:	4770      	bx	lr
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	20000d7c 	.word	0x20000d7c

000028cc <udd_ep_free>:
{
    28cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    28ce:	0004      	movs	r4, r0
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    28d0:	2700      	movs	r7, #0
	usb_device_endpoint_get_config_defaults(&config_ep);
    28d2:	ad01      	add	r5, sp, #4
    28d4:	0028      	movs	r0, r5
    28d6:	4b0c      	ldr	r3, [pc, #48]	; (2908 <udd_ep_free+0x3c>)
    28d8:	4798      	blx	r3
	udd_ep_abort(ep);
    28da:	0020      	movs	r0, r4
    28dc:	4b0b      	ldr	r3, [pc, #44]	; (290c <udd_ep_free+0x40>)
    28de:	4798      	blx	r3
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    28e0:	4e0b      	ldr	r6, [pc, #44]	; (2910 <udd_ep_free+0x44>)
    28e2:	0029      	movs	r1, r5
    28e4:	0030      	movs	r0, r6
    28e6:	4b0b      	ldr	r3, [pc, #44]	; (2914 <udd_ep_free+0x48>)
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    28e8:	70ef      	strb	r7, [r5, #3]
	config_ep.ep_address = ep;
    28ea:	702c      	strb	r4, [r5, #0]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    28ec:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    28ee:	210f      	movs	r1, #15
    28f0:	003a      	movs	r2, r7
    28f2:	4021      	ands	r1, r4
    28f4:	0030      	movs	r0, r6
    28f6:	4b08      	ldr	r3, [pc, #32]	; (2918 <udd_ep_free+0x4c>)
    28f8:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    28fa:	003a      	movs	r2, r7
    28fc:	0030      	movs	r0, r6
    28fe:	0021      	movs	r1, r4
    2900:	4b06      	ldr	r3, [pc, #24]	; (291c <udd_ep_free+0x50>)
    2902:	4798      	blx	r3
}
    2904:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	00004715 	.word	0x00004715
    290c:	0000286d 	.word	0x0000286d
    2910:	20000d7c 	.word	0x20000d7c
    2914:	00004725 	.word	0x00004725
    2918:	000045d5 	.word	0x000045d5
    291c:	00004689 	.word	0x00004689

00002920 <udd_ep_alloc>:
{
    2920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2922:	0006      	movs	r6, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    2924:	ac01      	add	r4, sp, #4
    2926:	4b29      	ldr	r3, [pc, #164]	; (29cc <udd_ep_alloc+0xac>)
    2928:	0020      	movs	r0, r4
{
    292a:	000f      	movs	r7, r1
    292c:	0015      	movs	r5, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    292e:	4798      	blx	r3
	config_ep.ep_address = ep;
    2930:	7026      	strb	r6, [r4, #0]
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2932:	2300      	movs	r3, #0
	if(MaxEndpointSize <= 8) {
    2934:	2d08      	cmp	r5, #8
    2936:	d910      	bls.n	295a <udd_ep_alloc+0x3a>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2938:	2301      	movs	r3, #1
	} else if(MaxEndpointSize <= 16) {
    293a:	2d10      	cmp	r5, #16
    293c:	d90d      	bls.n	295a <udd_ep_alloc+0x3a>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    293e:	2302      	movs	r3, #2
	} else if(MaxEndpointSize <= 32) {
    2940:	2d20      	cmp	r5, #32
    2942:	d90a      	bls.n	295a <udd_ep_alloc+0x3a>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2944:	2303      	movs	r3, #3
	} else if(MaxEndpointSize <= 64) {
    2946:	2d40      	cmp	r5, #64	; 0x40
    2948:	d907      	bls.n	295a <udd_ep_alloc+0x3a>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    294a:	2304      	movs	r3, #4
	} else if(MaxEndpointSize <= 128) {
    294c:	2d80      	cmp	r5, #128	; 0x80
    294e:	d904      	bls.n	295a <udd_ep_alloc+0x3a>
	} else if(MaxEndpointSize <= 256) {
    2950:	2380      	movs	r3, #128	; 0x80
    2952:	005b      	lsls	r3, r3, #1
    2954:	429d      	cmp	r5, r3
    2956:	d824      	bhi.n	29a2 <udd_ep_alloc+0x82>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2958:	3bfb      	subs	r3, #251	; 0xfb
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    295a:	7063      	strb	r3, [r4, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    295c:	0030      	movs	r0, r6
    295e:	4b1c      	ldr	r3, [pc, #112]	; (29d0 <udd_ep_alloc+0xb0>)
    2960:	4798      	blx	r3
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2962:	2303      	movs	r3, #3
	ptr_job->ep_size = MaxEndpointSize;
    2964:	8205      	strh	r5, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2966:	401f      	ands	r7, r3
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2968:	2f01      	cmp	r7, #1
    296a:	d128      	bne.n	29be <udd_ep_alloc+0x9e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    296c:	3b01      	subs	r3, #1
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    296e:	4d19      	ldr	r5, [pc, #100]	; (29d4 <udd_ep_alloc+0xb4>)
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2970:	70e3      	strb	r3, [r4, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    2972:	0021      	movs	r1, r4
    2974:	0028      	movs	r0, r5
    2976:	4b18      	ldr	r3, [pc, #96]	; (29d8 <udd_ep_alloc+0xb8>)
    2978:	4798      	blx	r3
    297a:	1e04      	subs	r4, r0, #0
    297c:	d11b      	bne.n	29b6 <udd_ep_alloc+0x96>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    297e:	210f      	movs	r1, #15
    2980:	4b16      	ldr	r3, [pc, #88]	; (29dc <udd_ep_alloc+0xbc>)
    2982:	0002      	movs	r2, r0
    2984:	4031      	ands	r1, r6
    2986:	0028      	movs	r0, r5
    2988:	4f15      	ldr	r7, [pc, #84]	; (29e0 <udd_ep_alloc+0xc0>)
    298a:	47b8      	blx	r7
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    298c:	0022      	movs	r2, r4
    298e:	0031      	movs	r1, r6
    2990:	4c14      	ldr	r4, [pc, #80]	; (29e4 <udd_ep_alloc+0xc4>)
    2992:	0028      	movs	r0, r5
    2994:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2996:	2201      	movs	r2, #1
    2998:	0031      	movs	r1, r6
    299a:	0028      	movs	r0, r5
    299c:	47a0      	blx	r4
	return true;
    299e:	2001      	movs	r0, #1
    29a0:	e00a      	b.n	29b8 <udd_ep_alloc+0x98>
	} else if(MaxEndpointSize <= 512) {
    29a2:	2380      	movs	r3, #128	; 0x80
    29a4:	009b      	lsls	r3, r3, #2
    29a6:	429d      	cmp	r5, r3
    29a8:	d802      	bhi.n	29b0 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    29aa:	3bfb      	subs	r3, #251	; 0xfb
    29ac:	3bff      	subs	r3, #255	; 0xff
    29ae:	e7d4      	b.n	295a <udd_ep_alloc+0x3a>
	} else if(MaxEndpointSize <= 1023) {
    29b0:	4b0d      	ldr	r3, [pc, #52]	; (29e8 <udd_ep_alloc+0xc8>)
    29b2:	429d      	cmp	r5, r3
    29b4:	d901      	bls.n	29ba <udd_ep_alloc+0x9a>
		return false;
    29b6:	2000      	movs	r0, #0
}
    29b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    29ba:	2307      	movs	r3, #7
    29bc:	e7cd      	b.n	295a <udd_ep_alloc+0x3a>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    29be:	2f02      	cmp	r7, #2
    29c0:	d0d5      	beq.n	296e <udd_ep_alloc+0x4e>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    29c2:	2f03      	cmp	r7, #3
    29c4:	d1f7      	bne.n	29b6 <udd_ep_alloc+0x96>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    29c6:	2304      	movs	r3, #4
    29c8:	e7d1      	b.n	296e <udd_ep_alloc+0x4e>
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	00004715 	.word	0x00004715
    29d0:	00002271 	.word	0x00002271
    29d4:	20000d7c 	.word	0x20000d7c
    29d8:	00004725 	.word	0x00004725
    29dc:	00002295 	.word	0x00002295
    29e0:	000045ad 	.word	0x000045ad
    29e4:	000045fd 	.word	0x000045fd
    29e8:	000003ff 	.word	0x000003ff

000029ec <udd_ep_is_halted>:
{
    29ec:	b510      	push	{r4, lr}
    29ee:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    29f0:	4b01      	ldr	r3, [pc, #4]	; (29f8 <udd_ep_is_halted+0xc>)
    29f2:	4802      	ldr	r0, [pc, #8]	; (29fc <udd_ep_is_halted+0x10>)
    29f4:	4798      	blx	r3
}
    29f6:	bd10      	pop	{r4, pc}
    29f8:	000048e1 	.word	0x000048e1
    29fc:	20000d7c 	.word	0x20000d7c

00002a00 <udd_ep_set_halt>:
	if (USB_DEVICE_MAX_EP < ep_num) {
    2a00:	230f      	movs	r3, #15
{
    2a02:	b510      	push	{r4, lr}
	if (USB_DEVICE_MAX_EP < ep_num) {
    2a04:	4003      	ands	r3, r0
{
    2a06:	0004      	movs	r4, r0
		return false;
    2a08:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2a0a:	2b03      	cmp	r3, #3
    2a0c:	d807      	bhi.n	2a1e <udd_ep_set_halt+0x1e>
	usb_device_endpoint_set_halt(&usb_device, ep);
    2a0e:	0021      	movs	r1, r4
    2a10:	4803      	ldr	r0, [pc, #12]	; (2a20 <udd_ep_set_halt+0x20>)
    2a12:	4b04      	ldr	r3, [pc, #16]	; (2a24 <udd_ep_set_halt+0x24>)
    2a14:	4798      	blx	r3
	udd_ep_abort(ep);
    2a16:	0020      	movs	r0, r4
    2a18:	4b03      	ldr	r3, [pc, #12]	; (2a28 <udd_ep_set_halt+0x28>)
    2a1a:	4798      	blx	r3
    2a1c:	2001      	movs	r0, #1
}
    2a1e:	bd10      	pop	{r4, pc}
    2a20:	20000d7c 	.word	0x20000d7c
    2a24:	000048ff 	.word	0x000048ff
    2a28:	0000286d 	.word	0x0000286d

00002a2c <_usb_ep0_on_tansfer_ok>:
{
    2a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    2a2e:	4f29      	ldr	r7, [pc, #164]	; (2ad4 <_usb_ep0_on_tansfer_ok+0xa8>)
    2a30:	783b      	ldrb	r3, [r7, #0]
    2a32:	2b01      	cmp	r3, #1
    2a34:	d141      	bne.n	2aba <_usb_ep0_on_tansfer_ok+0x8e>
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2a36:	4a28      	ldr	r2, [pc, #160]	; (2ad8 <_usb_ep0_on_tansfer_ok+0xac>)
    2a38:	4d28      	ldr	r5, [pc, #160]	; (2adc <_usb_ep0_on_tansfer_ok+0xb0>)
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2a3a:	880e      	ldrh	r6, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2a3c:	8814      	ldrh	r4, [r2, #0]
    2a3e:	89ab      	ldrh	r3, [r5, #12]
    2a40:	19a2      	adds	r2, r4, r6
    2a42:	4293      	cmp	r3, r2
    2a44:	da01      	bge.n	2a4a <_usb_ep0_on_tansfer_ok+0x1e>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2a46:	1b1e      	subs	r6, r3, r4
    2a48:	b2b6      	uxth	r6, r6
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2a4a:	68ab      	ldr	r3, [r5, #8]
    2a4c:	0032      	movs	r2, r6
    2a4e:	1918      	adds	r0, r3, r4
    2a50:	4923      	ldr	r1, [pc, #140]	; (2ae0 <_usb_ep0_on_tansfer_ok+0xb4>)
    2a52:	4b24      	ldr	r3, [pc, #144]	; (2ae4 <_usb_ep0_on_tansfer_ok+0xb8>)
	udd_ctrl_payload_nb_trans += nb_data;
    2a54:	19a4      	adds	r4, r4, r6
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2a56:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2a58:	b2a3      	uxth	r3, r4
    2a5a:	4c1f      	ldr	r4, [pc, #124]	; (2ad8 <_usb_ep0_on_tansfer_ok+0xac>)
    2a5c:	8023      	strh	r3, [r4, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2a5e:	2e40      	cmp	r6, #64	; 0x40
    2a60:	d105      	bne.n	2a6e <_usb_ep0_on_tansfer_ok+0x42>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2a62:	4e21      	ldr	r6, [pc, #132]	; (2ae8 <_usb_ep0_on_tansfer_ok+0xbc>)
    2a64:	88e9      	ldrh	r1, [r5, #6]
    2a66:	8832      	ldrh	r2, [r6, #0]
    2a68:	18d2      	adds	r2, r2, r3
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2a6a:	4291      	cmp	r1, r2
    2a6c:	dc0f      	bgt.n	2a8e <_usb_ep0_on_tansfer_ok+0x62>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2a6e:	81ab      	strh	r3, [r5, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2a70:	696b      	ldr	r3, [r5, #20]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d008      	beq.n	2a88 <_usb_ep0_on_tansfer_ok+0x5c>
			if (!udd_g_ctrlreq.over_under_run()) {
    2a76:	4798      	blx	r3
    2a78:	2800      	cmp	r0, #0
    2a7a:	d105      	bne.n	2a88 <_usb_ep0_on_tansfer_ok+0x5c>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2a7c:	2305      	movs	r3, #5
				udd_ep_set_halt(0);
    2a7e:	2000      	movs	r0, #0
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2a80:	703b      	strb	r3, [r7, #0]
				udd_ep_set_halt(0);
    2a82:	4b1a      	ldr	r3, [pc, #104]	; (2aec <_usb_ep0_on_tansfer_ok+0xc0>)
    2a84:	4798      	blx	r3
}
    2a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_ctrl_send_zlp_in();
    2a88:	4b19      	ldr	r3, [pc, #100]	; (2af0 <_usb_ep0_on_tansfer_ok+0xc4>)
			udd_ctrl_in_sent();
    2a8a:	4798      	blx	r3
    2a8c:	e7fb      	b.n	2a86 <_usb_ep0_on_tansfer_ok+0x5a>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2a8e:	89aa      	ldrh	r2, [r5, #12]
    2a90:	429a      	cmp	r2, r3
    2a92:	d10b      	bne.n	2aac <_usb_ep0_on_tansfer_ok+0x80>
		if (!udd_g_ctrlreq.over_under_run) {
    2a94:	696b      	ldr	r3, [r5, #20]
    2a96:	2b00      	cmp	r3, #0
    2a98:	d0f0      	beq.n	2a7c <_usb_ep0_on_tansfer_ok+0x50>
		if (!udd_g_ctrlreq.over_under_run()) {
    2a9a:	4798      	blx	r3
    2a9c:	2800      	cmp	r0, #0
    2a9e:	d0ed      	beq.n	2a7c <_usb_ep0_on_tansfer_ok+0x50>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2aa0:	8833      	ldrh	r3, [r6, #0]
    2aa2:	8822      	ldrh	r2, [r4, #0]
    2aa4:	189b      	adds	r3, r3, r2
    2aa6:	8033      	strh	r3, [r6, #0]
		udd_ctrl_payload_nb_trans = 0;
    2aa8:	2300      	movs	r3, #0
    2aaa:	8023      	strh	r3, [r4, #0]
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2aac:	2340      	movs	r3, #64	; 0x40
    2aae:	4a0c      	ldr	r2, [pc, #48]	; (2ae0 <_usb_ep0_on_tansfer_ok+0xb4>)
    2ab0:	2100      	movs	r1, #0
    2ab2:	4c10      	ldr	r4, [pc, #64]	; (2af4 <_usb_ep0_on_tansfer_ok+0xc8>)
    2ab4:	4810      	ldr	r0, [pc, #64]	; (2af8 <_usb_ep0_on_tansfer_ok+0xcc>)
    2ab6:	47a0      	blx	r4
    2ab8:	e7e5      	b.n	2a86 <_usb_ep0_on_tansfer_ok+0x5a>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    2aba:	2b02      	cmp	r3, #2
    2abc:	d101      	bne.n	2ac2 <_usb_ep0_on_tansfer_ok+0x96>
			udd_ctrl_in_sent();
    2abe:	4b0f      	ldr	r3, [pc, #60]	; (2afc <_usb_ep0_on_tansfer_ok+0xd0>)
    2ac0:	e7e3      	b.n	2a8a <_usb_ep0_on_tansfer_ok+0x5e>
			if (NULL != udd_g_ctrlreq.callback) {
    2ac2:	4b06      	ldr	r3, [pc, #24]	; (2adc <_usb_ep0_on_tansfer_ok+0xb0>)
    2ac4:	691b      	ldr	r3, [r3, #16]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d000      	beq.n	2acc <_usb_ep0_on_tansfer_ok+0xa0>
				udd_g_ctrlreq.callback();
    2aca:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2acc:	2300      	movs	r3, #0
    2ace:	703b      	strb	r3, [r7, #0]
}
    2ad0:	e7d9      	b.n	2a86 <_usb_ep0_on_tansfer_ok+0x5a>
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	20000334 	.word	0x20000334
    2ad8:	20000330 	.word	0x20000330
    2adc:	20000ee4 	.word	0x20000ee4
    2ae0:	20000efc 	.word	0x20000efc
    2ae4:	00009239 	.word	0x00009239
    2ae8:	20000332 	.word	0x20000332
    2aec:	00002a01 	.word	0x00002a01
    2af0:	000024ed 	.word	0x000024ed
    2af4:	000049c5 	.word	0x000049c5
    2af8:	20000d7c 	.word	0x20000d7c
    2afc:	00002571 	.word	0x00002571

00002b00 <udd_ep_clear_halt>:
	if (USB_DEVICE_MAX_EP < ep_num) {
    2b00:	230f      	movs	r3, #15
{
    2b02:	b570      	push	{r4, r5, r6, lr}
	if (USB_DEVICE_MAX_EP < ep_num) {
    2b04:	4003      	ands	r3, r0
{
    2b06:	0006      	movs	r6, r0
		return false;
    2b08:	2400      	movs	r4, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2b0a:	2b03      	cmp	r3, #3
    2b0c:	d80e      	bhi.n	2b2c <udd_ep_clear_halt+0x2c>
	ptr_job = udd_ep_get_job(ep);
    2b0e:	4b08      	ldr	r3, [pc, #32]	; (2b30 <udd_ep_clear_halt+0x30>)
    2b10:	4798      	blx	r3
    2b12:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2b14:	4b07      	ldr	r3, [pc, #28]	; (2b34 <udd_ep_clear_halt+0x34>)
    2b16:	0031      	movs	r1, r6
    2b18:	4807      	ldr	r0, [pc, #28]	; (2b38 <udd_ep_clear_halt+0x38>)
    2b1a:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2b1c:	7cab      	ldrb	r3, [r5, #18]
	return true;
    2b1e:	3401      	adds	r4, #1
	if (ptr_job->busy == true) {
    2b20:	4223      	tst	r3, r4
    2b22:	d003      	beq.n	2b2c <udd_ep_clear_halt+0x2c>
		ptr_job->busy = false;
    2b24:	43a3      	bics	r3, r4
    2b26:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    2b28:	682b      	ldr	r3, [r5, #0]
    2b2a:	4798      	blx	r3
}
    2b2c:	0020      	movs	r0, r4
    2b2e:	bd70      	pop	{r4, r5, r6, pc}
    2b30:	00002271 	.word	0x00002271
    2b34:	00004919 	.word	0x00004919
    2b38:	20000d7c 	.word	0x20000d7c

00002b3c <udd_ep_run>:
{
    2b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b3e:	b085      	sub	sp, #20
    2b40:	9203      	str	r2, [sp, #12]
    2b42:	001e      	movs	r6, r3
	ep_num = ep & USB_EP_ADDR_MASK;
    2b44:	0002      	movs	r2, r0
    2b46:	230f      	movs	r3, #15
    2b48:	401a      	ands	r2, r3
{
    2b4a:	9002      	str	r0, [sp, #8]
    2b4c:	000d      	movs	r5, r1
	ep_num = ep & USB_EP_ADDR_MASK;
    2b4e:	9201      	str	r2, [sp, #4]
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2b50:	2a03      	cmp	r2, #3
    2b52:	d903      	bls.n	2b5c <udd_ep_run+0x20>
		return false;
    2b54:	2700      	movs	r7, #0
}
    2b56:	0038      	movs	r0, r7
    2b58:	b005      	add	sp, #20
    2b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2b5c:	9802      	ldr	r0, [sp, #8]
    2b5e:	4b4a      	ldr	r3, [pc, #296]	; (2c88 <udd_ep_run+0x14c>)
    2b60:	4798      	blx	r3
    2b62:	1e07      	subs	r7, r0, #0
    2b64:	d1f6      	bne.n	2b54 <udd_ep_run+0x18>
	ptr_job = udd_ep_get_job(ep);
    2b66:	4b49      	ldr	r3, [pc, #292]	; (2c8c <udd_ep_run+0x150>)
    2b68:	9802      	ldr	r0, [sp, #8]
    2b6a:	4798      	blx	r3
    2b6c:	0004      	movs	r4, r0
	flags = cpu_irq_save();
    2b6e:	4b48      	ldr	r3, [pc, #288]	; (2c90 <udd_ep_run+0x154>)
    2b70:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2b72:	2301      	movs	r3, #1
    2b74:	7ca2      	ldrb	r2, [r4, #18]
    2b76:	421a      	tst	r2, r3
    2b78:	d004      	beq.n	2b84 <udd_ep_run+0x48>
    2b7a:	2800      	cmp	r0, #0
    2b7c:	d0ea      	beq.n	2b54 <udd_ep_run+0x18>
    2b7e:	4b45      	ldr	r3, [pc, #276]	; (2c94 <udd_ep_run+0x158>)
    2b80:	4798      	blx	r3
    2b82:	e7e8      	b.n	2b56 <udd_ep_run+0x1a>
	ptr_job->busy = true;
    2b84:	4313      	orrs	r3, r2
    2b86:	74a3      	strb	r3, [r4, #18]
    2b88:	2800      	cmp	r0, #0
    2b8a:	d001      	beq.n	2b90 <udd_ep_run+0x54>
    2b8c:	4b41      	ldr	r3, [pc, #260]	; (2c94 <udd_ep_run+0x158>)
    2b8e:	4798      	blx	r3
	ptr_job->buf = buf;
    2b90:	9b03      	ldr	r3, [sp, #12]
	ptr_job->b_shortpacket = b_shortpacket;
    2b92:	2202      	movs	r2, #2
	ptr_job->buf = buf;
    2b94:	6063      	str	r3, [r4, #4]
	ptr_job->nb_trans = 0;
    2b96:	2300      	movs	r3, #0
    2b98:	60e3      	str	r3, [r4, #12]
	ptr_job->call_trans = callback;
    2b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ptr_job->buf_size = buf_size;
    2b9c:	60a6      	str	r6, [r4, #8]
	ptr_job->call_trans = callback;
    2b9e:	6023      	str	r3, [r4, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    2ba0:	2301      	movs	r3, #1
    2ba2:	401d      	ands	r5, r3
    2ba4:	0069      	lsls	r1, r5, #1
    2ba6:	7ca5      	ldrb	r5, [r4, #18]
    2ba8:	4395      	bics	r5, r2
	ptr_job->b_use_out_cache_buffer = false;
    2baa:	430d      	orrs	r5, r1
    2bac:	2104      	movs	r1, #4
    2bae:	438d      	bics	r5, r1
	if (ep & USB_EP_DIR_IN) {
    2bb0:	4669      	mov	r1, sp
    2bb2:	7a09      	ldrb	r1, [r1, #8]
	ptr_job->b_use_out_cache_buffer = false;
    2bb4:	74a5      	strb	r5, [r4, #18]
	if (ep & USB_EP_DIR_IN) {
    2bb6:	b249      	sxtb	r1, r1
    2bb8:	2900      	cmp	r1, #0
    2bba:	da3b      	bge.n	2c34 <udd_ep_run+0xf8>
    2bbc:	b2ed      	uxtb	r5, r5
		if (0 != ptr_job->buf_size) {
    2bbe:	2e00      	cmp	r6, #0
    2bc0:	d026      	beq.n	2c10 <udd_ep_run+0xd4>
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2bc2:	4b35      	ldr	r3, [pc, #212]	; (2c98 <udd_ep_run+0x15c>)
			next_trans = ptr_job->buf_size;
    2bc4:	b2b6      	uxth	r6, r6
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2bc6:	429e      	cmp	r6, r3
    2bc8:	d906      	bls.n	2bd8 <udd_ep_run+0x9c>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2bca:	0018      	movs	r0, r3
    2bcc:	8a21      	ldrh	r1, [r4, #16]
    2bce:	4b33      	ldr	r3, [pc, #204]	; (2c9c <udd_ep_run+0x160>)
    2bd0:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2bd2:	4b31      	ldr	r3, [pc, #196]	; (2c98 <udd_ep_run+0x15c>)
    2bd4:	1a5e      	subs	r6, r3, r1
    2bd6:	b2b6      	uxth	r6, r6
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2bd8:	07ab      	lsls	r3, r5, #30
    2bda:	d507      	bpl.n	2bec <udd_ep_run+0xb0>
					(0 == (next_trans % ptr_job->ep_size));
    2bdc:	8a21      	ldrh	r1, [r4, #16]
    2bde:	0030      	movs	r0, r6
    2be0:	4b2f      	ldr	r3, [pc, #188]	; (2ca0 <udd_ep_run+0x164>)
    2be2:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2be4:	b289      	uxth	r1, r1
    2be6:	4248      	negs	r0, r1
    2be8:	4148      	adcs	r0, r1
    2bea:	b2c7      	uxtb	r7, r0
    2bec:	2001      	movs	r0, #1
    2bee:	2302      	movs	r3, #2
    2bf0:	4038      	ands	r0, r7
    2bf2:	0041      	lsls	r1, r0, #1
    2bf4:	7ca0      	ldrb	r0, [r4, #18]
    2bf6:	4398      	bics	r0, r3
    2bf8:	4308      	orrs	r0, r1
    2bfa:	74a0      	strb	r0, [r4, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    2bfc:	0033      	movs	r3, r6
    2bfe:	9a03      	ldr	r2, [sp, #12]
    2c00:	9901      	ldr	r1, [sp, #4]
    2c02:	4828      	ldr	r0, [pc, #160]	; (2ca4 <udd_ep_run+0x168>)
    2c04:	4c28      	ldr	r4, [pc, #160]	; (2ca8 <udd_ep_run+0x16c>)
    2c06:	47a0      	blx	r4
				return (STATUS_OK ==
    2c08:	4243      	negs	r3, r0
    2c0a:	4158      	adcs	r0, r3
    2c0c:	b2c7      	uxtb	r7, r0
    2c0e:	e7a2      	b.n	2b56 <udd_ep_run+0x1a>
		} else if (true == ptr_job->b_shortpacket) {
    2c10:	4215      	tst	r5, r2
    2c12:	d002      	beq.n	2c1a <udd_ep_run+0xde>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2c14:	4395      	bics	r5, r2
    2c16:	74a5      	strb	r5, [r4, #18]
    2c18:	e7f0      	b.n	2bfc <udd_ep_run+0xc0>
			ptr_job->busy = false;
    2c1a:	439d      	bics	r5, r3
    2c1c:	74a5      	strb	r5, [r4, #18]
			if (NULL != ptr_job->call_trans) {
    2c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2c20:	2b00      	cmp	r3, #0
    2c22:	d101      	bne.n	2c28 <udd_ep_run+0xec>
			return true;
    2c24:	2701      	movs	r7, #1
    2c26:	e796      	b.n	2b56 <udd_ep_run+0x1a>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2c28:	2100      	movs	r1, #0
    2c2a:	9a02      	ldr	r2, [sp, #8]
    2c2c:	0008      	movs	r0, r1
    2c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2c30:	4798      	blx	r3
    2c32:	e7f7      	b.n	2c24 <udd_ep_run+0xe8>
		if (0 != ptr_job->buf_size) {
    2c34:	2e00      	cmp	r6, #0
    2c36:	d022      	beq.n	2c7e <udd_ep_run+0x142>
    2c38:	8a27      	ldrh	r7, [r4, #16]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2c3a:	4d17      	ldr	r5, [pc, #92]	; (2c98 <udd_ep_run+0x15c>)
			next_trans = ptr_job->buf_size;
    2c3c:	b2b6      	uxth	r6, r6
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2c3e:	0039      	movs	r1, r7
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2c40:	42ae      	cmp	r6, r5
    2c42:	d916      	bls.n	2c72 <udd_ep_run+0x136>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2c44:	4b15      	ldr	r3, [pc, #84]	; (2c9c <udd_ep_run+0x160>)
    2c46:	0028      	movs	r0, r5
    2c48:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2c4a:	1a6b      	subs	r3, r5, r1
    2c4c:	b29b      	uxth	r3, r3
    2c4e:	4815      	ldr	r0, [pc, #84]	; (2ca4 <udd_ep_run+0x168>)
    2c50:	4d16      	ldr	r5, [pc, #88]	; (2cac <udd_ep_run+0x170>)
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2c52:	9a03      	ldr	r2, [sp, #12]
			if (next_trans < ptr_job->ep_size) {
    2c54:	42bb      	cmp	r3, r7
    2c56:	d209      	bcs.n	2c6c <udd_ep_run+0x130>
				ptr_job->b_use_out_cache_buffer = true;
    2c58:	2304      	movs	r3, #4
    2c5a:	7ca2      	ldrb	r2, [r4, #18]
    2c5c:	4313      	orrs	r3, r2
    2c5e:	74a3      	strb	r3, [r4, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    2c60:	9b01      	ldr	r3, [sp, #4]
    2c62:	1e5a      	subs	r2, r3, #1
    2c64:	4b12      	ldr	r3, [pc, #72]	; (2cb0 <udd_ep_run+0x174>)
    2c66:	0192      	lsls	r2, r2, #6
    2c68:	18d2      	adds	r2, r2, r3
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2c6a:	003b      	movs	r3, r7
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2c6c:	9901      	ldr	r1, [sp, #4]
    2c6e:	47a8      	blx	r5
    2c70:	e7ca      	b.n	2c08 <udd_ep_run+0xcc>
				next_trans -= next_trans % ptr_job->ep_size;
    2c72:	0030      	movs	r0, r6
    2c74:	4b0a      	ldr	r3, [pc, #40]	; (2ca0 <udd_ep_run+0x164>)
    2c76:	4798      	blx	r3
    2c78:	1a76      	subs	r6, r6, r1
    2c7a:	b2b3      	uxth	r3, r6
    2c7c:	e7e7      	b.n	2c4e <udd_ep_run+0x112>
			ptr_job->busy = false;
    2c7e:	7ca2      	ldrb	r2, [r4, #18]
    2c80:	439a      	bics	r2, r3
    2c82:	74a2      	strb	r2, [r4, #18]
    2c84:	e7cb      	b.n	2c1e <udd_ep_run+0xe2>
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	000029ed 	.word	0x000029ed
    2c8c:	00002271 	.word	0x00002271
    2c90:	0000224d 	.word	0x0000224d
    2c94:	00002619 	.word	0x00002619
    2c98:	00001fff 	.word	0x00001fff
    2c9c:	00008e95 	.word	0x00008e95
    2ca0:	00008cc1 	.word	0x00008cc1
    2ca4:	20000d7c 	.word	0x20000d7c
    2ca8:	00004979 	.word	0x00004979
    2cac:	000049c5 	.word	0x000049c5
    2cb0:	20000cbc 	.word	0x20000cbc

00002cb4 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2cb4:	2280      	movs	r2, #128	; 0x80
    2cb6:	4b02      	ldr	r3, [pc, #8]	; (2cc0 <udd_set_address+0xc>)
    2cb8:	4310      	orrs	r0, r2
    2cba:	681b      	ldr	r3, [r3, #0]
    2cbc:	7298      	strb	r0, [r3, #10]
}
    2cbe:	4770      	bx	lr
    2cc0:	20000d7c 	.word	0x20000d7c

00002cc4 <udd_getaddress>:
{
    2cc4:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <udd_getaddress+0xc>)
}
    2cc6:	681b      	ldr	r3, [r3, #0]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    2cc8:	7a98      	ldrb	r0, [r3, #10]
    2cca:	0640      	lsls	r0, r0, #25
    2ccc:	0e40      	lsrs	r0, r0, #25
    2cce:	4770      	bx	lr
    2cd0:	20000d7c 	.word	0x20000d7c

00002cd4 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    2cd4:	4b01      	ldr	r3, [pc, #4]	; (2cdc <udd_set_setup_payload+0x8>)
    2cd6:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2cd8:	8199      	strh	r1, [r3, #12]
}
    2cda:	4770      	bx	lr
    2cdc:	20000ee4 	.word	0x20000ee4

00002ce0 <udd_detach>:
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    2ce0:	2001      	movs	r0, #1

void udd_detach(void)
{
    2ce2:	b510      	push	{r4, lr}
    2ce4:	4b03      	ldr	r3, [pc, #12]	; (2cf4 <udd_detach+0x14>)
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}
    2ce6:	681a      	ldr	r2, [r3, #0]
    2ce8:	8913      	ldrh	r3, [r2, #8]
    2cea:	4303      	orrs	r3, r0
    2cec:	8113      	strh	r3, [r2, #8]
	udd_sleep_mode(UDD_STATE_SUSPEND);
    2cee:	4b02      	ldr	r3, [pc, #8]	; (2cf8 <udd_detach+0x18>)
    2cf0:	4798      	blx	r3
}
    2cf2:	bd10      	pop	{r4, pc}
    2cf4:	20000d7c 	.word	0x20000d7c
    2cf8:	0000271d 	.word	0x0000271d

00002cfc <udd_attach>:

void udd_attach(void)
{
    2cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2cfe:	2701      	movs	r7, #1
	udd_sleep_mode(UDD_STATE_IDLE);
    2d00:	2003      	movs	r0, #3
    2d02:	4b16      	ldr	r3, [pc, #88]	; (2d5c <udd_attach+0x60>)
    2d04:	4798      	blx	r3
    2d06:	4c16      	ldr	r4, [pc, #88]	; (2d60 <udd_attach+0x64>)
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    2d08:	4e16      	ldr	r6, [pc, #88]	; (2d64 <udd_attach+0x68>)
    2d0a:	6822      	ldr	r2, [r4, #0]
    2d0c:	2104      	movs	r1, #4
    2d0e:	8913      	ldrh	r3, [r2, #8]
    2d10:	0020      	movs	r0, r4
    2d12:	43bb      	bics	r3, r7
    2d14:	8113      	strh	r3, [r2, #8]
    2d16:	4a14      	ldr	r2, [pc, #80]	; (2d68 <udd_attach+0x6c>)
    2d18:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    2d1a:	4a14      	ldr	r2, [pc, #80]	; (2d6c <udd_attach+0x70>)
    2d1c:	2100      	movs	r1, #0
    2d1e:	0020      	movs	r0, r4
    2d20:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    2d22:	0039      	movs	r1, r7
    2d24:	4a12      	ldr	r2, [pc, #72]	; (2d70 <udd_attach+0x74>)
    2d26:	0020      	movs	r0, r4
    2d28:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    2d2a:	4a12      	ldr	r2, [pc, #72]	; (2d74 <udd_attach+0x78>)
    2d2c:	2102      	movs	r1, #2
    2d2e:	0020      	movs	r0, r4
    2d30:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2d32:	4d11      	ldr	r5, [pc, #68]	; (2d78 <udd_attach+0x7c>)
    2d34:	2104      	movs	r1, #4
    2d36:	0020      	movs	r0, r4
    2d38:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    2d3a:	2100      	movs	r1, #0
    2d3c:	0020      	movs	r0, r4
    2d3e:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    2d40:	0039      	movs	r1, r7
    2d42:	0020      	movs	r0, r4
    2d44:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2d46:	2102      	movs	r1, #2
    2d48:	0020      	movs	r0, r4
    2d4a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2d4c:	4a0b      	ldr	r2, [pc, #44]	; (2d7c <udd_attach+0x80>)
    2d4e:	2106      	movs	r1, #6
    2d50:	0020      	movs	r0, r4
    2d52:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2d54:	2106      	movs	r1, #6
    2d56:	0020      	movs	r0, r4
    2d58:	47a8      	blx	r5
#endif
}
    2d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d5c:	0000271d 	.word	0x0000271d
    2d60:	20000d7c 	.word	0x20000d7c
    2d64:	0000454d 	.word	0x0000454d
    2d68:	000027e9 	.word	0x000027e9
    2d6c:	0000260d 	.word	0x0000260d
    2d70:	00002441 	.word	0x00002441
    2d74:	0000279d 	.word	0x0000279d
    2d78:	00004571 	.word	0x00004571
    2d7c:	00002815 	.word	0x00002815

00002d80 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    2d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    2d82:	4b0f      	ldr	r3, [pc, #60]	; (2dc0 <udd_enable+0x40>)
    2d84:	4798      	blx	r3
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    2d86:	ac01      	add	r4, sp, #4
	flags = cpu_irq_save();
    2d88:	0006      	movs	r6, r0
	usb_get_config_defaults(&config_usb);
    2d8a:	4b0e      	ldr	r3, [pc, #56]	; (2dc4 <udd_enable+0x44>)
    2d8c:	0020      	movs	r0, r4
    2d8e:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    2d90:	2305      	movs	r3, #5
	usb_init(&usb_device, USB, &config_usb);
    2d92:	4d0d      	ldr	r5, [pc, #52]	; (2dc8 <udd_enable+0x48>)
    2d94:	0022      	movs	r2, r4
    2d96:	490d      	ldr	r1, [pc, #52]	; (2dcc <udd_enable+0x4c>)
	config_usb.source_generator = UDD_CLOCK_GEN;
    2d98:	70a3      	strb	r3, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    2d9a:	0028      	movs	r0, r5
    2d9c:	4b0c      	ldr	r3, [pc, #48]	; (2dd0 <udd_enable+0x50>)
    2d9e:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    2da0:	0028      	movs	r0, r5
    2da2:	4b0c      	ldr	r3, [pc, #48]	; (2dd4 <udd_enable+0x54>)
    2da4:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    2da6:	4b0c      	ldr	r3, [pc, #48]	; (2dd8 <udd_enable+0x58>)
    2da8:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    2daa:	4b0c      	ldr	r3, [pc, #48]	; (2ddc <udd_enable+0x5c>)
    2dac:	2001      	movs	r0, #1
    2dae:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    2db0:	4b0b      	ldr	r3, [pc, #44]	; (2de0 <udd_enable+0x60>)
    2db2:	4798      	blx	r3
    2db4:	2e00      	cmp	r6, #0
    2db6:	d001      	beq.n	2dbc <udd_enable+0x3c>
    2db8:	4b0a      	ldr	r3, [pc, #40]	; (2de4 <udd_enable+0x64>)
    2dba:	4798      	blx	r3
# endif
#endif

	cpu_irq_restore(flags);
}
    2dbc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	0000224d 	.word	0x0000224d
    2dc4:	00005001 	.word	0x00005001
    2dc8:	20000d7c 	.word	0x20000d7c
    2dcc:	41005000 	.word	0x41005000
    2dd0:	00005011 	.word	0x00005011
    2dd4:	00004a3d 	.word	0x00004a3d
    2dd8:	0000262d 	.word	0x0000262d
    2ddc:	0000271d 	.word	0x0000271d
    2de0:	00002cfd 	.word	0x00002cfd
    2de4:	00002619 	.word	0x00002619

00002de8 <udd_disable>:

void udd_disable(void)
{
    2de8:	b510      	push	{r4, lr}
	irqflags_t flags;

	udd_detach();
    2dea:	4b07      	ldr	r3, [pc, #28]	; (2e08 <udd_disable+0x20>)
    2dec:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_OFF);
    2dee:	2000      	movs	r0, #0
    2df0:	4b06      	ldr	r3, [pc, #24]	; (2e0c <udd_disable+0x24>)
    2df2:	4798      	blx	r3

	flags = cpu_irq_save();
    2df4:	4b06      	ldr	r3, [pc, #24]	; (2e10 <udd_disable+0x28>)
    2df6:	4798      	blx	r3
	usb_dual_disable();
    2df8:	4b06      	ldr	r3, [pc, #24]	; (2e14 <udd_disable+0x2c>)
	flags = cpu_irq_save();
    2dfa:	0004      	movs	r4, r0
	usb_dual_disable();
    2dfc:	4798      	blx	r3
    2dfe:	2c00      	cmp	r4, #0
    2e00:	d001      	beq.n	2e06 <udd_disable+0x1e>
    2e02:	4b05      	ldr	r3, [pc, #20]	; (2e18 <udd_disable+0x30>)
    2e04:	4798      	blx	r3
	cpu_irq_restore(flags);
}
    2e06:	bd10      	pop	{r4, pc}
    2e08:	00002ce1 	.word	0x00002ce1
    2e0c:	0000271d 	.word	0x0000271d
    2e10:	0000224d 	.word	0x0000224d
    2e14:	00002e1d 	.word	0x00002e1d
    2e18:	00002619 	.word	0x00002619

00002e1c <usb_dual_disable>:
/**
 * \brief Deinitialize the dual role driver
 */
void usb_dual_disable(void)
{
	if (!_initialized) {
    2e1c:	4b03      	ldr	r3, [pc, #12]	; (2e2c <usb_dual_disable+0x10>)
    2e1e:	781a      	ldrb	r2, [r3, #0]
    2e20:	2a00      	cmp	r2, #0
    2e22:	d001      	beq.n	2e28 <usb_dual_disable+0xc>
		return; // Dual role not initialized
	}
	_initialized = false;
    2e24:	2200      	movs	r2, #0
    2e26:	701a      	strb	r2, [r3, #0]

#if USB_ID_EIC
	extint_chan_disable_callback(USB_ID_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
#endif
}
    2e28:	4770      	bx	lr
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	200003b1 	.word	0x200003b1

00002e30 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
    2e30:	2300      	movs	r3, #0
{
    2e32:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    2e34:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    2e36:	4b06      	ldr	r3, [pc, #24]	; (2e50 <prvTaskExitError+0x20>)
    2e38:	681b      	ldr	r3, [r3, #0]
    2e3a:	3301      	adds	r3, #1
    2e3c:	d001      	beq.n	2e42 <prvTaskExitError+0x12>
    2e3e:	b672      	cpsid	i
    2e40:	e7fe      	b.n	2e40 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    2e42:	b672      	cpsid	i
	while( ulDummy == 0 )
    2e44:	9b01      	ldr	r3, [sp, #4]
    2e46:	2b00      	cmp	r3, #0
    2e48:	d0fc      	beq.n	2e44 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    2e4a:	b002      	add	sp, #8
    2e4c:	4770      	bx	lr
    2e4e:	46c0      	nop			; (mov r8, r8)
    2e50:	2000000c 	.word	0x2000000c
	...

00002e60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    2e60:	4a0b      	ldr	r2, [pc, #44]	; (2e90 <pxCurrentTCBConst2>)
    2e62:	6813      	ldr	r3, [r2, #0]
    2e64:	6818      	ldr	r0, [r3, #0]
    2e66:	3020      	adds	r0, #32
    2e68:	f380 8809 	msr	PSP, r0
    2e6c:	2002      	movs	r0, #2
    2e6e:	f380 8814 	msr	CONTROL, r0
    2e72:	f3bf 8f6f 	isb	sy
    2e76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    2e78:	46ae      	mov	lr, r5
    2e7a:	bc08      	pop	{r3}
    2e7c:	bc04      	pop	{r2}
    2e7e:	b662      	cpsie	i
    2e80:	4718      	bx	r3
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	46c0      	nop			; (mov r8, r8)
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	46c0      	nop			; (mov r8, r8)
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	46c0      	nop			; (mov r8, r8)
    2e8e:	46c0      	nop			; (mov r8, r8)

00002e90 <pxCurrentTCBConst2>:
    2e90:	200003b4 	.word	0x200003b4

00002e94 <pxPortInitialiseStack>:
{
    2e94:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    2e96:	2480      	movs	r4, #128	; 0x80
    2e98:	1f03      	subs	r3, r0, #4
    2e9a:	0464      	lsls	r4, r4, #17
    2e9c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    2e9e:	3b04      	subs	r3, #4
    2ea0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    2ea2:	4903      	ldr	r1, [pc, #12]	; (2eb0 <pxPortInitialiseStack+0x1c>)
    2ea4:	3b04      	subs	r3, #4
    2ea6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    2ea8:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
    2eaa:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    2eac:	601a      	str	r2, [r3, #0]
}
    2eae:	bd10      	pop	{r4, pc}
    2eb0:	00002e31 	.word	0x00002e31

00002eb4 <SVC_Handler>:
}
    2eb4:	4770      	bx	lr
	...

00002eb8 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2eb8:	22ff      	movs	r2, #255	; 0xff
{
    2eba:	b570      	push	{r4, r5, r6, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2ebc:	4b13      	ldr	r3, [pc, #76]	; (2f0c <xPortStartScheduler+0x54>)
    2ebe:	0412      	lsls	r2, r2, #16
    2ec0:	6819      	ldr	r1, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    2ec2:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2ec4:	430a      	orrs	r2, r1
    2ec6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    2ec8:	22ff      	movs	r2, #255	; 0xff
    2eca:	6819      	ldr	r1, [r3, #0]
    2ecc:	0612      	lsls	r2, r2, #24
    2ece:	430a      	orrs	r2, r1
    2ed0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    2ed2:	4d0f      	ldr	r5, [pc, #60]	; (2f10 <xPortStartScheduler+0x58>)
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    2ed4:	4b0f      	ldr	r3, [pc, #60]	; (2f14 <xPortStartScheduler+0x5c>)
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    2ed6:	602c      	str	r4, [r5, #0]
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    2ed8:	0020      	movs	r0, r4
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    2eda:	601c      	str	r4, [r3, #0]
    2edc:	4b0e      	ldr	r3, [pc, #56]	; (2f18 <xPortStartScheduler+0x60>)
    2ede:	4798      	blx	r3

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2ee0:	21fa      	movs	r1, #250	; 0xfa
    2ee2:	4b0e      	ldr	r3, [pc, #56]	; (2f1c <xPortStartScheduler+0x64>)
    2ee4:	0089      	lsls	r1, r1, #2
    2ee6:	7a1b      	ldrb	r3, [r3, #8]
    2ee8:	40d8      	lsrs	r0, r3
    2eea:	4b0d      	ldr	r3, [pc, #52]	; (2f20 <xPortStartScheduler+0x68>)
    2eec:	4798      	blx	r3
    2eee:	4b0d      	ldr	r3, [pc, #52]	; (2f24 <xPortStartScheduler+0x6c>)
    2ef0:	3801      	subs	r0, #1
    2ef2:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    2ef4:	2307      	movs	r3, #7
    2ef6:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    2ef8:	4b0b      	ldr	r3, [pc, #44]	; (2f28 <xPortStartScheduler+0x70>)
    2efa:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    2efc:	4b0b      	ldr	r3, [pc, #44]	; (2f2c <xPortStartScheduler+0x74>)
    2efe:	4798      	blx	r3
	vTaskSwitchContext();
    2f00:	4b0b      	ldr	r3, [pc, #44]	; (2f30 <xPortStartScheduler+0x78>)
    2f02:	4798      	blx	r3
	prvTaskExitError();
    2f04:	4b0b      	ldr	r3, [pc, #44]	; (2f34 <xPortStartScheduler+0x7c>)
    2f06:	4798      	blx	r3
}
    2f08:	0020      	movs	r0, r4
    2f0a:	bd70      	pop	{r4, r5, r6, pc}
    2f0c:	e000ed20 	.word	0xe000ed20
    2f10:	e000e010 	.word	0xe000e010
    2f14:	e000e018 	.word	0xe000e018
    2f18:	00007aad 	.word	0x00007aad
    2f1c:	40000400 	.word	0x40000400
    2f20:	00008bb5 	.word	0x00008bb5
    2f24:	e000e014 	.word	0xe000e014
    2f28:	2000000c 	.word	0x2000000c
    2f2c:	00002e61 	.word	0x00002e61
    2f30:	00003ddd 	.word	0x00003ddd
    2f34:	00002e31 	.word	0x00002e31

00002f38 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    2f38:	2280      	movs	r2, #128	; 0x80
    2f3a:	4b04      	ldr	r3, [pc, #16]	; (2f4c <vPortYield+0x14>)
    2f3c:	0552      	lsls	r2, r2, #21
    2f3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    2f40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2f44:	f3bf 8f6f 	isb	sy
}
    2f48:	4770      	bx	lr
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	e000ed04 	.word	0xe000ed04

00002f50 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    2f50:	b672      	cpsid	i
    uxCriticalNesting++;
    2f52:	4a04      	ldr	r2, [pc, #16]	; (2f64 <vPortEnterCritical+0x14>)
    2f54:	6813      	ldr	r3, [r2, #0]
    2f56:	3301      	adds	r3, #1
    2f58:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    2f5a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2f5e:	f3bf 8f6f 	isb	sy
}
    2f62:	4770      	bx	lr
    2f64:	2000000c 	.word	0x2000000c

00002f68 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    2f68:	4a05      	ldr	r2, [pc, #20]	; (2f80 <vPortExitCritical+0x18>)
    2f6a:	6813      	ldr	r3, [r2, #0]
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d101      	bne.n	2f74 <vPortExitCritical+0xc>
    2f70:	b672      	cpsid	i
    2f72:	e7fe      	b.n	2f72 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    2f74:	3b01      	subs	r3, #1
    2f76:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d100      	bne.n	2f7e <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
    2f7c:	b662      	cpsie	i
}
    2f7e:	4770      	bx	lr
    2f80:	2000000c 	.word	0x2000000c

00002f84 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    2f84:	f3ef 8010 	mrs	r0, PRIMASK
    2f88:	b672      	cpsid	i
    2f8a:	4770      	bx	lr

00002f8c <vClearInterruptMaskFromISR>:
	__asm volatile(
    2f8c:	f380 8810 	msr	PRIMASK, r0
    2f90:	4770      	bx	lr
	...

00002fa0 <PendSV_Handler>:
	__asm volatile
    2fa0:	f3ef 8009 	mrs	r0, PSP
    2fa4:	4b0e      	ldr	r3, [pc, #56]	; (2fe0 <pxCurrentTCBConst>)
    2fa6:	681a      	ldr	r2, [r3, #0]
    2fa8:	3820      	subs	r0, #32
    2faa:	6010      	str	r0, [r2, #0]
    2fac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2fae:	4644      	mov	r4, r8
    2fb0:	464d      	mov	r5, r9
    2fb2:	4656      	mov	r6, sl
    2fb4:	465f      	mov	r7, fp
    2fb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2fb8:	b508      	push	{r3, lr}
    2fba:	b672      	cpsid	i
    2fbc:	f000 ff0e 	bl	3ddc <vTaskSwitchContext>
    2fc0:	b662      	cpsie	i
    2fc2:	bc0c      	pop	{r2, r3}
    2fc4:	6811      	ldr	r1, [r2, #0]
    2fc6:	6808      	ldr	r0, [r1, #0]
    2fc8:	3010      	adds	r0, #16
    2fca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2fcc:	46a0      	mov	r8, r4
    2fce:	46a9      	mov	r9, r5
    2fd0:	46b2      	mov	sl, r6
    2fd2:	46bb      	mov	fp, r7
    2fd4:	f380 8809 	msr	PSP, r0
    2fd8:	3820      	subs	r0, #32
    2fda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2fdc:	4718      	bx	r3
    2fde:	46c0      	nop			; (mov r8, r8)

00002fe0 <pxCurrentTCBConst>:
    2fe0:	200003b4 	.word	0x200003b4

00002fe4 <SysTick_Handler>:
{
    2fe4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    2fe6:	4b07      	ldr	r3, [pc, #28]	; (3004 <SysTick_Handler+0x20>)
    2fe8:	4798      	blx	r3
		if( xTaskIncrementTick() != pdFALSE )
    2fea:	4b07      	ldr	r3, [pc, #28]	; (3008 <SysTick_Handler+0x24>)
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    2fec:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    2fee:	4798      	blx	r3
    2ff0:	2800      	cmp	r0, #0
    2ff2:	d003      	beq.n	2ffc <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    2ff4:	2280      	movs	r2, #128	; 0x80
    2ff6:	4b05      	ldr	r3, [pc, #20]	; (300c <SysTick_Handler+0x28>)
    2ff8:	0552      	lsls	r2, r2, #21
    2ffa:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    2ffc:	0020      	movs	r0, r4
    2ffe:	4b04      	ldr	r3, [pc, #16]	; (3010 <SysTick_Handler+0x2c>)
    3000:	4798      	blx	r3
}
    3002:	bd10      	pop	{r4, pc}
    3004:	00002f85 	.word	0x00002f85
    3008:	00003ba5 	.word	0x00003ba5
    300c:	e000ed04 	.word	0xe000ed04
    3010:	00002f8d 	.word	0x00002f8d

00003014 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3014:	b510      	push	{r4, lr}
    3016:	0004      	movs	r4, r0
void *pvReturn;

	vTaskSuspendAll();
    3018:	4b04      	ldr	r3, [pc, #16]	; (302c <pvPortMalloc+0x18>)
    301a:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
    301c:	0020      	movs	r0, r4
    301e:	4b04      	ldr	r3, [pc, #16]	; (3030 <pvPortMalloc+0x1c>)
    3020:	4798      	blx	r3
    3022:	0004      	movs	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    3024:	4b03      	ldr	r3, [pc, #12]	; (3034 <pvPortMalloc+0x20>)
    3026:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    3028:	0020      	movs	r0, r4
    302a:	bd10      	pop	{r4, pc}
    302c:	00003b89 	.word	0x00003b89
    3030:	000091ed 	.word	0x000091ed
    3034:	00003cad 	.word	0x00003cad

00003038 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    3038:	b510      	push	{r4, lr}
    303a:	1e04      	subs	r4, r0, #0
	if( pv )
    303c:	d006      	beq.n	304c <vPortFree+0x14>
	{
		vTaskSuspendAll();
    303e:	4b04      	ldr	r3, [pc, #16]	; (3050 <vPortFree+0x18>)
    3040:	4798      	blx	r3
		{
			free( pv );
    3042:	4b04      	ldr	r3, [pc, #16]	; (3054 <vPortFree+0x1c>)
    3044:	0020      	movs	r0, r4
    3046:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    3048:	4b03      	ldr	r3, [pc, #12]	; (3058 <vPortFree+0x20>)
    304a:	4798      	blx	r3
	}
}
    304c:	bd10      	pop	{r4, pc}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	00003b89 	.word	0x00003b89
    3054:	00009201 	.word	0x00009201
    3058:	00003cad 	.word	0x00003cad

0000305c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    305c:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    305e:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3060:	3308      	adds	r3, #8
    3062:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3064:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3066:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    3068:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    306a:	4252      	negs	r2, r2
    306c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    306e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    3070:	4770      	bx	lr

00003072 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3072:	2300      	movs	r3, #0
    3074:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    3076:	4770      	bx	lr

00003078 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    3078:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    307a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    307c:	689a      	ldr	r2, [r3, #8]
    307e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3080:	689a      	ldr	r2, [r3, #8]
    3082:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    3084:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3086:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    3088:	6803      	ldr	r3, [r0, #0]
    308a:	3301      	adds	r3, #1
    308c:	6003      	str	r3, [r0, #0]
}
    308e:	4770      	bx	lr

00003090 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3090:	0003      	movs	r3, r0
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3092:	680a      	ldr	r2, [r1, #0]
{
    3094:	b530      	push	{r4, r5, lr}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3096:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
    3098:	1c54      	adds	r4, r2, #1
    309a:	d10b      	bne.n	30b4 <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
    309c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    309e:	685a      	ldr	r2, [r3, #4]
    30a0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    30a2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
    30a4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    30a6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    30a8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    30aa:	6803      	ldr	r3, [r0, #0]
    30ac:	3301      	adds	r3, #1
    30ae:	6003      	str	r3, [r0, #0]
}
    30b0:	bd30      	pop	{r4, r5, pc}
    30b2:	0023      	movs	r3, r4
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    30b4:	685c      	ldr	r4, [r3, #4]
    30b6:	6825      	ldr	r5, [r4, #0]
    30b8:	42aa      	cmp	r2, r5
    30ba:	d2fa      	bcs.n	30b2 <vListInsert+0x22>
    30bc:	e7ef      	b.n	309e <vListInsert+0xe>

000030be <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    30be:	6842      	ldr	r2, [r0, #4]
    30c0:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    30c2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    30c4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    30c6:	6882      	ldr	r2, [r0, #8]
    30c8:	6841      	ldr	r1, [r0, #4]
    30ca:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    30cc:	685a      	ldr	r2, [r3, #4]
    30ce:	4290      	cmp	r0, r2
    30d0:	d101      	bne.n	30d6 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    30d2:	6882      	ldr	r2, [r0, #8]
    30d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    30d6:	2200      	movs	r2, #0
    30d8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    30da:	681a      	ldr	r2, [r3, #0]
    30dc:	3a01      	subs	r2, #1
    30de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    30e0:	6818      	ldr	r0, [r3, #0]
}
    30e2:	4770      	bx	lr

000030e4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    30e4:	b510      	push	{r4, lr}
    30e6:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    30e8:	4b03      	ldr	r3, [pc, #12]	; (30f8 <prvIsQueueEmpty+0x14>)
    30ea:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    30ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    30ee:	4b03      	ldr	r3, [pc, #12]	; (30fc <prvIsQueueEmpty+0x18>)
    30f0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    30f2:	4260      	negs	r0, r4
    30f4:	4160      	adcs	r0, r4

	return xReturn;
}
    30f6:	bd10      	pop	{r4, pc}
    30f8:	00002f51 	.word	0x00002f51
    30fc:	00002f69 	.word	0x00002f69

00003100 <prvCopyDataToQueue>:
{
    3100:	b570      	push	{r4, r5, r6, lr}
    3102:	0016      	movs	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    3104:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
    3106:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3108:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    310a:	2a00      	cmp	r2, #0
    310c:	d10a      	bne.n	3124 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    310e:	6806      	ldr	r6, [r0, #0]
BaseType_t xReturn = pdFALSE;
    3110:	0010      	movs	r0, r2
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3112:	2e00      	cmp	r6, #0
    3114:	d103      	bne.n	311e <prvCopyDataToQueue+0x1e>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3116:	6860      	ldr	r0, [r4, #4]
    3118:	4b15      	ldr	r3, [pc, #84]	; (3170 <prvCopyDataToQueue+0x70>)
    311a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    311c:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    311e:	3501      	adds	r5, #1
    3120:	63a5      	str	r5, [r4, #56]	; 0x38
}
    3122:	bd70      	pop	{r4, r5, r6, pc}
    3124:	4b13      	ldr	r3, [pc, #76]	; (3174 <prvCopyDataToQueue+0x74>)
	else if( xPosition == queueSEND_TO_BACK )
    3126:	2e00      	cmp	r6, #0
    3128:	d10c      	bne.n	3144 <prvCopyDataToQueue+0x44>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    312a:	6880      	ldr	r0, [r0, #8]
    312c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    312e:	68a3      	ldr	r3, [r4, #8]
    3130:	6c22      	ldr	r2, [r4, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
    3132:	0030      	movs	r0, r6
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3134:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3136:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3138:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    313a:	4293      	cmp	r3, r2
    313c:	d3ef      	bcc.n	311e <prvCopyDataToQueue+0x1e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    313e:	6823      	ldr	r3, [r4, #0]
    3140:	60a3      	str	r3, [r4, #8]
    3142:	e7ec      	b.n	311e <prvCopyDataToQueue+0x1e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3144:	68c0      	ldr	r0, [r0, #12]
    3146:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    3148:	6c23      	ldr	r3, [r4, #64]	; 0x40
    314a:	68e2      	ldr	r2, [r4, #12]
    314c:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    314e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    3150:	18d2      	adds	r2, r2, r3
    3152:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3154:	428a      	cmp	r2, r1
    3156:	d202      	bcs.n	315e <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    3158:	6862      	ldr	r2, [r4, #4]
    315a:	18d3      	adds	r3, r2, r3
    315c:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    315e:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    3160:	2e02      	cmp	r6, #2
    3162:	d1dc      	bne.n	311e <prvCopyDataToQueue+0x1e>
				--uxMessagesWaiting;
    3164:	002b      	movs	r3, r5
    3166:	1e5a      	subs	r2, r3, #1
    3168:	4193      	sbcs	r3, r2
    316a:	1aed      	subs	r5, r5, r3
    316c:	e7d7      	b.n	311e <prvCopyDataToQueue+0x1e>
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	00004061 	.word	0x00004061
    3174:	00009239 	.word	0x00009239

00003178 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    3178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    317a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	{
    317c:	9001      	str	r0, [sp, #4]
    317e:	000a      	movs	r2, r1
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    3180:	2c00      	cmp	r4, #0
    3182:	d101      	bne.n	3188 <prvNotifyQueueSetContainer+0x10>
    3184:	b672      	cpsid	i
    3186:	e7fe      	b.n	3186 <prvNotifyQueueSetContainer+0xe>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    3188:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    318a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    318c:	4299      	cmp	r1, r3
    318e:	d301      	bcc.n	3194 <prvNotifyQueueSetContainer+0x1c>
    3190:	b672      	cpsid	i
    3192:	e7fe      	b.n	3192 <prvNotifyQueueSetContainer+0x1a>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    3194:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    3196:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    3198:	428b      	cmp	r3, r1
    319a:	d914      	bls.n	31c6 <prvNotifyQueueSetContainer+0x4e>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    319c:	0027      	movs	r7, r4

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    319e:	a901      	add	r1, sp, #4
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    31a0:	3745      	adds	r7, #69	; 0x45
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    31a2:	0020      	movs	r0, r4
    31a4:	4b0b      	ldr	r3, [pc, #44]	; (31d4 <prvNotifyQueueSetContainer+0x5c>)
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    31a6:	783d      	ldrb	r5, [r7, #0]
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    31a8:	4798      	blx	r3
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    31aa:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    31ac:	0006      	movs	r6, r0

			if( cTxLock == queueUNLOCKED )
    31ae:	1c6b      	adds	r3, r5, #1
    31b0:	d10b      	bne.n	31ca <prvNotifyQueueSetContainer+0x52>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    31b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    31b4:	2b00      	cmp	r3, #0
    31b6:	d006      	beq.n	31c6 <prvNotifyQueueSetContainer+0x4e>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    31b8:	0020      	movs	r0, r4
    31ba:	4b07      	ldr	r3, [pc, #28]	; (31d8 <prvNotifyQueueSetContainer+0x60>)
    31bc:	3024      	adds	r0, #36	; 0x24
    31be:	4798      	blx	r3
    31c0:	2800      	cmp	r0, #0
    31c2:	d000      	beq.n	31c6 <prvNotifyQueueSetContainer+0x4e>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    31c4:	2601      	movs	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    31c6:	0030      	movs	r0, r6
    31c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    31ca:	3501      	adds	r5, #1
    31cc:	b26d      	sxtb	r5, r5
    31ce:	703d      	strb	r5, [r7, #0]
    31d0:	e7f9      	b.n	31c6 <prvNotifyQueueSetContainer+0x4e>
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	00003101 	.word	0x00003101
    31d8:	00003ead 	.word	0x00003ead

000031dc <prvCopyDataFromQueue>:
{
    31dc:	0003      	movs	r3, r0
    31de:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    31e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
    31e2:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    31e4:	2a00      	cmp	r2, #0
    31e6:	d00a      	beq.n	31fe <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    31e8:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    31ea:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    31ec:	1889      	adds	r1, r1, r2
    31ee:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    31f0:	42a1      	cmp	r1, r4
    31f2:	d301      	bcc.n	31f8 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    31f4:	6819      	ldr	r1, [r3, #0]
    31f6:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    31f8:	68d9      	ldr	r1, [r3, #12]
    31fa:	4b01      	ldr	r3, [pc, #4]	; (3200 <prvCopyDataFromQueue+0x24>)
    31fc:	4798      	blx	r3
}
    31fe:	bd10      	pop	{r4, pc}
    3200:	00009239 	.word	0x00009239

00003204 <prvUnlockQueue>:
{
    3204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3206:	0004      	movs	r4, r0
		int8_t cTxLock = pxQueue->cTxLock;
    3208:	0026      	movs	r6, r4
	taskENTER_CRITICAL();
    320a:	4f1c      	ldr	r7, [pc, #112]	; (327c <prvUnlockQueue+0x78>)
		int8_t cTxLock = pxQueue->cTxLock;
    320c:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
    320e:	47b8      	blx	r7
		int8_t cTxLock = pxQueue->cTxLock;
    3210:	7835      	ldrb	r5, [r6, #0]
    3212:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
    3214:	2d00      	cmp	r5, #0
    3216:	dc0e      	bgt.n	3236 <prvUnlockQueue+0x32>
		pxQueue->cTxLock = queueUNLOCKED;
    3218:	23ff      	movs	r3, #255	; 0xff
    321a:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();
    321c:	4e18      	ldr	r6, [pc, #96]	; (3280 <prvUnlockQueue+0x7c>)
    321e:	47b0      	blx	r6
	taskENTER_CRITICAL();
    3220:	47b8      	blx	r7
		int8_t cRxLock = pxQueue->cRxLock;
    3222:	0027      	movs	r7, r4
    3224:	3744      	adds	r7, #68	; 0x44
    3226:	783d      	ldrb	r5, [r7, #0]
    3228:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
    322a:	2d00      	cmp	r5, #0
    322c:	dc18      	bgt.n	3260 <prvUnlockQueue+0x5c>
		pxQueue->cRxLock = queueUNLOCKED;
    322e:	23ff      	movs	r3, #255	; 0xff
    3230:	703b      	strb	r3, [r7, #0]
	taskEXIT_CRITICAL();
    3232:	47b0      	blx	r6
}
    3234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxQueue->pxQueueSetContainer != NULL )
    3236:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3238:	2b00      	cmp	r3, #0
    323a:	d009      	beq.n	3250 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    323c:	2100      	movs	r1, #0
    323e:	0020      	movs	r0, r4
    3240:	4b10      	ldr	r3, [pc, #64]	; (3284 <prvUnlockQueue+0x80>)
    3242:	4798      	blx	r3
    3244:	2800      	cmp	r0, #0
    3246:	d001      	beq.n	324c <prvUnlockQueue+0x48>
						vTaskMissedYield();
    3248:	4b0f      	ldr	r3, [pc, #60]	; (3288 <prvUnlockQueue+0x84>)
    324a:	4798      	blx	r3
    324c:	3d01      	subs	r5, #1
    324e:	e7e0      	b.n	3212 <prvUnlockQueue+0xe>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3250:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3252:	2b00      	cmp	r3, #0
    3254:	d0e0      	beq.n	3218 <prvUnlockQueue+0x14>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3256:	0020      	movs	r0, r4
    3258:	4b0c      	ldr	r3, [pc, #48]	; (328c <prvUnlockQueue+0x88>)
    325a:	3024      	adds	r0, #36	; 0x24
    325c:	4798      	blx	r3
    325e:	e7f1      	b.n	3244 <prvUnlockQueue+0x40>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3260:	6923      	ldr	r3, [r4, #16]
    3262:	2b00      	cmp	r3, #0
    3264:	d0e3      	beq.n	322e <prvUnlockQueue+0x2a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3266:	0020      	movs	r0, r4
    3268:	4b08      	ldr	r3, [pc, #32]	; (328c <prvUnlockQueue+0x88>)
    326a:	3010      	adds	r0, #16
    326c:	4798      	blx	r3
    326e:	2800      	cmp	r0, #0
    3270:	d001      	beq.n	3276 <prvUnlockQueue+0x72>
					vTaskMissedYield();
    3272:	4b05      	ldr	r3, [pc, #20]	; (3288 <prvUnlockQueue+0x84>)
    3274:	4798      	blx	r3
    3276:	3d01      	subs	r5, #1
    3278:	e7d6      	b.n	3228 <prvUnlockQueue+0x24>
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	00002f51 	.word	0x00002f51
    3280:	00002f69 	.word	0x00002f69
    3284:	00003179 	.word	0x00003179
    3288:	00003fb1 	.word	0x00003fb1
    328c:	00003ead 	.word	0x00003ead

00003290 <xQueueGenericReset>:
{
    3290:	b570      	push	{r4, r5, r6, lr}
    3292:	0004      	movs	r4, r0
    3294:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    3296:	2800      	cmp	r0, #0
    3298:	d101      	bne.n	329e <xQueueGenericReset+0xe>
    329a:	b672      	cpsid	i
    329c:	e7fe      	b.n	329c <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
    329e:	4b16      	ldr	r3, [pc, #88]	; (32f8 <xQueueGenericReset+0x68>)
    32a0:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    32a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    32a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    32a6:	6822      	ldr	r2, [r4, #0]
    32a8:	434b      	muls	r3, r1
    32aa:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    32ac:	1a5b      	subs	r3, r3, r1
    32ae:	18d3      	adds	r3, r2, r3
    32b0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    32b2:	0023      	movs	r3, r4
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    32b4:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
    32b6:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    32b8:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
    32ba:	22ff      	movs	r2, #255	; 0xff
    32bc:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    32be:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
    32c0:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
    32c2:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
    32c4:	4285      	cmp	r5, r0
    32c6:	d10e      	bne.n	32e6 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    32c8:	6923      	ldr	r3, [r4, #16]
    32ca:	4283      	cmp	r3, r0
    32cc:	d007      	beq.n	32de <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    32ce:	0020      	movs	r0, r4
    32d0:	4b0a      	ldr	r3, [pc, #40]	; (32fc <xQueueGenericReset+0x6c>)
    32d2:	3010      	adds	r0, #16
    32d4:	4798      	blx	r3
    32d6:	2800      	cmp	r0, #0
    32d8:	d001      	beq.n	32de <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
    32da:	4b09      	ldr	r3, [pc, #36]	; (3300 <xQueueGenericReset+0x70>)
    32dc:	4798      	blx	r3
	taskEXIT_CRITICAL();
    32de:	4b09      	ldr	r3, [pc, #36]	; (3304 <xQueueGenericReset+0x74>)
    32e0:	4798      	blx	r3
}
    32e2:	2001      	movs	r0, #1
    32e4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    32e6:	0020      	movs	r0, r4
    32e8:	4d07      	ldr	r5, [pc, #28]	; (3308 <xQueueGenericReset+0x78>)
    32ea:	3010      	adds	r0, #16
    32ec:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    32ee:	0020      	movs	r0, r4
    32f0:	3024      	adds	r0, #36	; 0x24
    32f2:	47a8      	blx	r5
    32f4:	e7f3      	b.n	32de <xQueueGenericReset+0x4e>
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	00002f51 	.word	0x00002f51
    32fc:	00003ead 	.word	0x00003ead
    3300:	00002f39 	.word	0x00002f39
    3304:	00002f69 	.word	0x00002f69
    3308:	0000305d 	.word	0x0000305d

0000330c <xQueueGenericCreate>:
	{
    330c:	b570      	push	{r4, r5, r6, lr}
    330e:	0006      	movs	r6, r0
    3310:	000d      	movs	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    3312:	2800      	cmp	r0, #0
    3314:	d101      	bne.n	331a <xQueueGenericCreate+0xe>
    3316:	b672      	cpsid	i
    3318:	e7fe      	b.n	3318 <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    331a:	0008      	movs	r0, r1
    331c:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    331e:	4b0b      	ldr	r3, [pc, #44]	; (334c <xQueueGenericCreate+0x40>)
    3320:	304c      	adds	r0, #76	; 0x4c
    3322:	4798      	blx	r3
    3324:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    3326:	d00a      	beq.n	333e <xQueueGenericCreate+0x32>
	if( uxItemSize == ( UBaseType_t ) 0 )
    3328:	2d00      	cmp	r5, #0
    332a:	d10a      	bne.n	3342 <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    332c:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    332e:	4b08      	ldr	r3, [pc, #32]	; (3350 <xQueueGenericCreate+0x44>)
	pxNewQueue->uxLength = uxQueueLength;
    3330:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    3332:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    3334:	2101      	movs	r1, #1
    3336:	0020      	movs	r0, r4
    3338:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
    333a:	2300      	movs	r3, #0
    333c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    333e:	0020      	movs	r0, r4
    3340:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    3342:	0003      	movs	r3, r0
    3344:	334c      	adds	r3, #76	; 0x4c
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    3346:	6003      	str	r3, [r0, #0]
    3348:	e7f1      	b.n	332e <xQueueGenericCreate+0x22>
    334a:	46c0      	nop			; (mov r8, r8)
    334c:	00003015 	.word	0x00003015
    3350:	00003291 	.word	0x00003291

00003354 <xQueueGenericSend>:
{
    3354:	b5f0      	push	{r4, r5, r6, r7, lr}
    3356:	b089      	sub	sp, #36	; 0x24
    3358:	1e04      	subs	r4, r0, #0
    335a:	9102      	str	r1, [sp, #8]
    335c:	9205      	str	r2, [sp, #20]
    335e:	9301      	str	r3, [sp, #4]
	configASSERT( pxQueue );
    3360:	d101      	bne.n	3366 <xQueueGenericSend+0x12>
    3362:	b672      	cpsid	i
    3364:	e7fe      	b.n	3364 <xQueueGenericSend+0x10>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3366:	9b02      	ldr	r3, [sp, #8]
    3368:	2b00      	cmp	r3, #0
    336a:	d000      	beq.n	336e <xQueueGenericSend+0x1a>
    336c:	e074      	b.n	3458 <xQueueGenericSend+0x104>
    336e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3370:	2b00      	cmp	r3, #0
    3372:	d100      	bne.n	3376 <xQueueGenericSend+0x22>
    3374:	e070      	b.n	3458 <xQueueGenericSend+0x104>
    3376:	b672      	cpsid	i
    3378:	e7fe      	b.n	3378 <xQueueGenericSend+0x24>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    337a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    337c:	2b00      	cmp	r3, #0
    337e:	d05b      	beq.n	3438 <xQueueGenericSend+0xe4>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3380:	0020      	movs	r0, r4
    3382:	4b3e      	ldr	r3, [pc, #248]	; (347c <xQueueGenericSend+0x128>)
    3384:	3024      	adds	r0, #36	; 0x24
    3386:	4798      	blx	r3
    3388:	e056      	b.n	3438 <xQueueGenericSend+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
    338a:	9d05      	ldr	r5, [sp, #20]
    338c:	2d00      	cmp	r5, #0
    338e:	d102      	bne.n	3396 <xQueueGenericSend+0x42>
					taskEXIT_CRITICAL();
    3390:	47b8      	blx	r7
			return errQUEUE_FULL;
    3392:	2000      	movs	r0, #0
    3394:	e056      	b.n	3444 <xQueueGenericSend+0xf0>
				else if( xEntryTimeSet == pdFALSE )
    3396:	2e00      	cmp	r6, #0
    3398:	d102      	bne.n	33a0 <xQueueGenericSend+0x4c>
					vTaskInternalSetTimeOutState( &xTimeOut );
    339a:	a806      	add	r0, sp, #24
    339c:	4b38      	ldr	r3, [pc, #224]	; (3480 <xQueueGenericSend+0x12c>)
    339e:	4798      	blx	r3
		taskEXIT_CRITICAL();
    33a0:	47b8      	blx	r7
		vTaskSuspendAll();
    33a2:	4b38      	ldr	r3, [pc, #224]	; (3484 <xQueueGenericSend+0x130>)
    33a4:	4798      	blx	r3
		prvLockQueue( pxQueue );
    33a6:	4b38      	ldr	r3, [pc, #224]	; (3488 <xQueueGenericSend+0x134>)
    33a8:	4798      	blx	r3
    33aa:	0022      	movs	r2, r4
    33ac:	3244      	adds	r2, #68	; 0x44
    33ae:	7813      	ldrb	r3, [r2, #0]
    33b0:	b25b      	sxtb	r3, r3
    33b2:	3301      	adds	r3, #1
    33b4:	d101      	bne.n	33ba <xQueueGenericSend+0x66>
    33b6:	2300      	movs	r3, #0
    33b8:	7013      	strb	r3, [r2, #0]
    33ba:	0022      	movs	r2, r4
    33bc:	3245      	adds	r2, #69	; 0x45
    33be:	7813      	ldrb	r3, [r2, #0]
    33c0:	b25b      	sxtb	r3, r3
    33c2:	3301      	adds	r3, #1
    33c4:	d101      	bne.n	33ca <xQueueGenericSend+0x76>
    33c6:	2300      	movs	r3, #0
    33c8:	7013      	strb	r3, [r2, #0]
    33ca:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    33cc:	a905      	add	r1, sp, #20
    33ce:	a806      	add	r0, sp, #24
    33d0:	4b2e      	ldr	r3, [pc, #184]	; (348c <xQueueGenericSend+0x138>)
    33d2:	4798      	blx	r3
    33d4:	4e2e      	ldr	r6, [pc, #184]	; (3490 <xQueueGenericSend+0x13c>)
    33d6:	4d2f      	ldr	r5, [pc, #188]	; (3494 <xQueueGenericSend+0x140>)
    33d8:	2800      	cmp	r0, #0
    33da:	d139      	bne.n	3450 <xQueueGenericSend+0xfc>
	taskENTER_CRITICAL();
    33dc:	4b2a      	ldr	r3, [pc, #168]	; (3488 <xQueueGenericSend+0x134>)
    33de:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    33e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    33e2:	9303      	str	r3, [sp, #12]
    33e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    33e6:	9304      	str	r3, [sp, #16]
	taskEXIT_CRITICAL();
    33e8:	47b8      	blx	r7
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    33ea:	9b03      	ldr	r3, [sp, #12]
    33ec:	9a04      	ldr	r2, [sp, #16]
    33ee:	4293      	cmp	r3, r2
    33f0:	d12a      	bne.n	3448 <xQueueGenericSend+0xf4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    33f2:	0020      	movs	r0, r4
    33f4:	9905      	ldr	r1, [sp, #20]
    33f6:	3010      	adds	r0, #16
    33f8:	4b27      	ldr	r3, [pc, #156]	; (3498 <xQueueGenericSend+0x144>)
    33fa:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    33fc:	0020      	movs	r0, r4
    33fe:	47b0      	blx	r6
				if( xTaskResumeAll() == pdFALSE )
    3400:	47a8      	blx	r5
    3402:	2800      	cmp	r0, #0
    3404:	d101      	bne.n	340a <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
    3406:	4b25      	ldr	r3, [pc, #148]	; (349c <xQueueGenericSend+0x148>)
    3408:	4798      	blx	r3
    340a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    340c:	4b1e      	ldr	r3, [pc, #120]	; (3488 <xQueueGenericSend+0x134>)
    340e:	4798      	blx	r3
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3410:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3412:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3414:	4f22      	ldr	r7, [pc, #136]	; (34a0 <xQueueGenericSend+0x14c>)
    3416:	4293      	cmp	r3, r2
    3418:	d302      	bcc.n	3420 <xQueueGenericSend+0xcc>
    341a:	9b01      	ldr	r3, [sp, #4]
    341c:	2b02      	cmp	r3, #2
    341e:	d1b4      	bne.n	338a <xQueueGenericSend+0x36>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3420:	4b20      	ldr	r3, [pc, #128]	; (34a4 <xQueueGenericSend+0x150>)
    3422:	9a01      	ldr	r2, [sp, #4]
    3424:	9902      	ldr	r1, [sp, #8]
    3426:	0020      	movs	r0, r4
    3428:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    342a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    342c:	2b00      	cmp	r3, #0
    342e:	d0a4      	beq.n	337a <xQueueGenericSend+0x26>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3430:	9901      	ldr	r1, [sp, #4]
    3432:	0020      	movs	r0, r4
    3434:	4b1c      	ldr	r3, [pc, #112]	; (34a8 <xQueueGenericSend+0x154>)
    3436:	4798      	blx	r3
    3438:	2800      	cmp	r0, #0
    343a:	d001      	beq.n	3440 <xQueueGenericSend+0xec>
							queueYIELD_IF_USING_PREEMPTION();
    343c:	4b17      	ldr	r3, [pc, #92]	; (349c <xQueueGenericSend+0x148>)
    343e:	4798      	blx	r3
				taskEXIT_CRITICAL();
    3440:	47b8      	blx	r7
				return pdPASS;
    3442:	2001      	movs	r0, #1
}
    3444:	b009      	add	sp, #36	; 0x24
    3446:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
    3448:	0020      	movs	r0, r4
    344a:	47b0      	blx	r6
				( void ) xTaskResumeAll();
    344c:	47a8      	blx	r5
    344e:	e7dc      	b.n	340a <xQueueGenericSend+0xb6>
			prvUnlockQueue( pxQueue );
    3450:	0020      	movs	r0, r4
    3452:	47b0      	blx	r6
			( void ) xTaskResumeAll();
    3454:	47a8      	blx	r5
    3456:	e79c      	b.n	3392 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3458:	9b01      	ldr	r3, [sp, #4]
    345a:	2b02      	cmp	r3, #2
    345c:	d102      	bne.n	3464 <xQueueGenericSend+0x110>
    345e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3460:	2b01      	cmp	r3, #1
    3462:	d109      	bne.n	3478 <xQueueGenericSend+0x124>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3464:	4b11      	ldr	r3, [pc, #68]	; (34ac <xQueueGenericSend+0x158>)
    3466:	4798      	blx	r3
    3468:	2600      	movs	r6, #0
    346a:	2800      	cmp	r0, #0
    346c:	d1ce      	bne.n	340c <xQueueGenericSend+0xb8>
    346e:	9e05      	ldr	r6, [sp, #20]
    3470:	2e00      	cmp	r6, #0
    3472:	d0cb      	beq.n	340c <xQueueGenericSend+0xb8>
    3474:	b672      	cpsid	i
    3476:	e7fe      	b.n	3476 <xQueueGenericSend+0x122>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3478:	b672      	cpsid	i
    347a:	e7fe      	b.n	347a <xQueueGenericSend+0x126>
    347c:	00003ead 	.word	0x00003ead
    3480:	00003f29 	.word	0x00003f29
    3484:	00003b89 	.word	0x00003b89
    3488:	00002f51 	.word	0x00002f51
    348c:	00003f41 	.word	0x00003f41
    3490:	00003205 	.word	0x00003205
    3494:	00003cad 	.word	0x00003cad
    3498:	00003e49 	.word	0x00003e49
    349c:	00002f39 	.word	0x00002f39
    34a0:	00002f69 	.word	0x00002f69
    34a4:	00003101 	.word	0x00003101
    34a8:	00003179 	.word	0x00003179
    34ac:	00003fbd 	.word	0x00003fbd

000034b0 <xQueueGenericSendFromISR>:
{
    34b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34b2:	b085      	sub	sp, #20
    34b4:	0004      	movs	r4, r0
    34b6:	9101      	str	r1, [sp, #4]
    34b8:	0017      	movs	r7, r2
    34ba:	001e      	movs	r6, r3
	configASSERT( pxQueue );
    34bc:	2800      	cmp	r0, #0
    34be:	d101      	bne.n	34c4 <xQueueGenericSendFromISR+0x14>
    34c0:	b672      	cpsid	i
    34c2:	e7fe      	b.n	34c2 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    34c4:	9b01      	ldr	r3, [sp, #4]
    34c6:	2b00      	cmp	r3, #0
    34c8:	d11b      	bne.n	3502 <xQueueGenericSendFromISR+0x52>
    34ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
    34cc:	2b00      	cmp	r3, #0
    34ce:	d018      	beq.n	3502 <xQueueGenericSendFromISR+0x52>
    34d0:	b672      	cpsid	i
    34d2:	e7fe      	b.n	34d2 <xQueueGenericSendFromISR+0x22>
							if( pxHigherPriorityTaskWoken != NULL )
    34d4:	2f00      	cmp	r7, #0
    34d6:	d038      	beq.n	354a <xQueueGenericSendFromISR+0x9a>
								*pxHigherPriorityTaskWoken = pdTRUE;
    34d8:	2501      	movs	r5, #1
    34da:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    34dc:	9803      	ldr	r0, [sp, #12]
    34de:	4b1d      	ldr	r3, [pc, #116]	; (3554 <xQueueGenericSendFromISR+0xa4>)
    34e0:	4798      	blx	r3
}
    34e2:	0028      	movs	r0, r5
    34e4:	b005      	add	sp, #20
    34e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    34e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    34ea:	2b00      	cmp	r3, #0
    34ec:	d02d      	beq.n	354a <xQueueGenericSendFromISR+0x9a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    34ee:	0020      	movs	r0, r4
    34f0:	4b19      	ldr	r3, [pc, #100]	; (3558 <xQueueGenericSendFromISR+0xa8>)
    34f2:	3024      	adds	r0, #36	; 0x24
    34f4:	4798      	blx	r3
    34f6:	e026      	b.n	3546 <xQueueGenericSendFromISR+0x96>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    34f8:	3501      	adds	r5, #1
    34fa:	9b02      	ldr	r3, [sp, #8]
    34fc:	b26d      	sxtb	r5, r5
    34fe:	701d      	strb	r5, [r3, #0]
    3500:	e023      	b.n	354a <xQueueGenericSendFromISR+0x9a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3502:	2e02      	cmp	r6, #2
    3504:	d102      	bne.n	350c <xQueueGenericSendFromISR+0x5c>
    3506:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3508:	2b01      	cmp	r3, #1
    350a:	d120      	bne.n	354e <xQueueGenericSendFromISR+0x9e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    350c:	4b13      	ldr	r3, [pc, #76]	; (355c <xQueueGenericSendFromISR+0xac>)
    350e:	4798      	blx	r3
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3512:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3514:	9003      	str	r0, [sp, #12]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3516:	4293      	cmp	r3, r2
    3518:	d302      	bcc.n	3520 <xQueueGenericSendFromISR+0x70>
			xReturn = errQUEUE_FULL;
    351a:	2500      	movs	r5, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    351c:	2e02      	cmp	r6, #2
    351e:	d1dd      	bne.n	34dc <xQueueGenericSendFromISR+0x2c>
			const int8_t cTxLock = pxQueue->cTxLock;
    3520:	0023      	movs	r3, r4
    3522:	3345      	adds	r3, #69	; 0x45
    3524:	9302      	str	r3, [sp, #8]
    3526:	781d      	ldrb	r5, [r3, #0]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3528:	0032      	movs	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
    352a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    352c:	4b0c      	ldr	r3, [pc, #48]	; (3560 <xQueueGenericSendFromISR+0xb0>)
    352e:	9901      	ldr	r1, [sp, #4]
    3530:	0020      	movs	r0, r4
    3532:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    3534:	1c6b      	adds	r3, r5, #1
    3536:	d1df      	bne.n	34f8 <xQueueGenericSendFromISR+0x48>
					if( pxQueue->pxQueueSetContainer != NULL )
    3538:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    353a:	2b00      	cmp	r3, #0
    353c:	d0d4      	beq.n	34e8 <xQueueGenericSendFromISR+0x38>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    353e:	0031      	movs	r1, r6
    3540:	0020      	movs	r0, r4
    3542:	4b08      	ldr	r3, [pc, #32]	; (3564 <xQueueGenericSendFromISR+0xb4>)
    3544:	4798      	blx	r3
    3546:	2800      	cmp	r0, #0
    3548:	d1c4      	bne.n	34d4 <xQueueGenericSendFromISR+0x24>
			xReturn = pdPASS;
    354a:	2501      	movs	r5, #1
    354c:	e7c6      	b.n	34dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    354e:	b672      	cpsid	i
    3550:	e7fe      	b.n	3550 <xQueueGenericSendFromISR+0xa0>
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	00002f8d 	.word	0x00002f8d
    3558:	00003ead 	.word	0x00003ead
    355c:	00002f85 	.word	0x00002f85
    3560:	00003101 	.word	0x00003101
    3564:	00003179 	.word	0x00003179

00003568 <xQueueReceive>:
{
    3568:	b5f0      	push	{r4, r5, r6, r7, lr}
    356a:	b085      	sub	sp, #20
    356c:	1e04      	subs	r4, r0, #0
    356e:	9100      	str	r1, [sp, #0]
    3570:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    3572:	d101      	bne.n	3578 <xQueueReceive+0x10>
    3574:	b672      	cpsid	i
    3576:	e7fe      	b.n	3576 <xQueueReceive+0xe>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3578:	9b00      	ldr	r3, [sp, #0]
    357a:	2b00      	cmp	r3, #0
    357c:	d166      	bne.n	364c <xQueueReceive+0xe4>
    357e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3580:	2b00      	cmp	r3, #0
    3582:	d063      	beq.n	364c <xQueueReceive+0xe4>
    3584:	b672      	cpsid	i
    3586:	e7fe      	b.n	3586 <xQueueReceive+0x1e>
				if( xTicksToWait == ( TickType_t ) 0 )
    3588:	9d01      	ldr	r5, [sp, #4]
    358a:	2d00      	cmp	r5, #0
    358c:	d102      	bne.n	3594 <xQueueReceive+0x2c>
					taskEXIT_CRITICAL();
    358e:	47b8      	blx	r7
				return errQUEUE_EMPTY;
    3590:	2000      	movs	r0, #0
    3592:	e04d      	b.n	3630 <xQueueReceive+0xc8>
				else if( xEntryTimeSet == pdFALSE )
    3594:	2e00      	cmp	r6, #0
    3596:	d102      	bne.n	359e <xQueueReceive+0x36>
					vTaskInternalSetTimeOutState( &xTimeOut );
    3598:	a802      	add	r0, sp, #8
    359a:	4b31      	ldr	r3, [pc, #196]	; (3660 <xQueueReceive+0xf8>)
    359c:	4798      	blx	r3
		taskEXIT_CRITICAL();
    359e:	47b8      	blx	r7
		vTaskSuspendAll();
    35a0:	4b30      	ldr	r3, [pc, #192]	; (3664 <xQueueReceive+0xfc>)
    35a2:	4798      	blx	r3
		prvLockQueue( pxQueue );
    35a4:	4b30      	ldr	r3, [pc, #192]	; (3668 <xQueueReceive+0x100>)
    35a6:	4798      	blx	r3
    35a8:	0022      	movs	r2, r4
    35aa:	3244      	adds	r2, #68	; 0x44
    35ac:	7813      	ldrb	r3, [r2, #0]
    35ae:	b25b      	sxtb	r3, r3
    35b0:	3301      	adds	r3, #1
    35b2:	d101      	bne.n	35b8 <xQueueReceive+0x50>
    35b4:	2300      	movs	r3, #0
    35b6:	7013      	strb	r3, [r2, #0]
    35b8:	0022      	movs	r2, r4
    35ba:	3245      	adds	r2, #69	; 0x45
    35bc:	7813      	ldrb	r3, [r2, #0]
    35be:	b25b      	sxtb	r3, r3
    35c0:	3301      	adds	r3, #1
    35c2:	d101      	bne.n	35c8 <xQueueReceive+0x60>
    35c4:	2300      	movs	r3, #0
    35c6:	7013      	strb	r3, [r2, #0]
    35c8:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    35ca:	a901      	add	r1, sp, #4
    35cc:	a802      	add	r0, sp, #8
    35ce:	4b27      	ldr	r3, [pc, #156]	; (366c <xQueueReceive+0x104>)
    35d0:	4798      	blx	r3
    35d2:	4f27      	ldr	r7, [pc, #156]	; (3670 <xQueueReceive+0x108>)
    35d4:	4d27      	ldr	r5, [pc, #156]	; (3674 <xQueueReceive+0x10c>)
    35d6:	4e28      	ldr	r6, [pc, #160]	; (3678 <xQueueReceive+0x110>)
    35d8:	2800      	cmp	r0, #0
    35da:	d12f      	bne.n	363c <xQueueReceive+0xd4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    35dc:	0020      	movs	r0, r4
    35de:	47b8      	blx	r7
    35e0:	2800      	cmp	r0, #0
    35e2:	d027      	beq.n	3634 <xQueueReceive+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    35e4:	0020      	movs	r0, r4
    35e6:	9901      	ldr	r1, [sp, #4]
    35e8:	3024      	adds	r0, #36	; 0x24
    35ea:	4b24      	ldr	r3, [pc, #144]	; (367c <xQueueReceive+0x114>)
    35ec:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    35ee:	0020      	movs	r0, r4
    35f0:	47a8      	blx	r5
				if( xTaskResumeAll() == pdFALSE )
    35f2:	47b0      	blx	r6
    35f4:	2800      	cmp	r0, #0
    35f6:	d101      	bne.n	35fc <xQueueReceive+0x94>
					portYIELD_WITHIN_API();
    35f8:	4b21      	ldr	r3, [pc, #132]	; (3680 <xQueueReceive+0x118>)
    35fa:	4798      	blx	r3
    35fc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    35fe:	4b1a      	ldr	r3, [pc, #104]	; (3668 <xQueueReceive+0x100>)
    3600:	4798      	blx	r3
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3602:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    3604:	4f1f      	ldr	r7, [pc, #124]	; (3684 <xQueueReceive+0x11c>)
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3606:	2d00      	cmp	r5, #0
    3608:	d0be      	beq.n	3588 <xQueueReceive+0x20>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    360a:	4b1f      	ldr	r3, [pc, #124]	; (3688 <xQueueReceive+0x120>)
    360c:	9900      	ldr	r1, [sp, #0]
    360e:	0020      	movs	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    3610:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3612:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    3614:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3616:	6923      	ldr	r3, [r4, #16]
    3618:	2b00      	cmp	r3, #0
    361a:	d007      	beq.n	362c <xQueueReceive+0xc4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    361c:	0020      	movs	r0, r4
    361e:	4b1b      	ldr	r3, [pc, #108]	; (368c <xQueueReceive+0x124>)
    3620:	3010      	adds	r0, #16
    3622:	4798      	blx	r3
    3624:	2800      	cmp	r0, #0
    3626:	d001      	beq.n	362c <xQueueReceive+0xc4>
						queueYIELD_IF_USING_PREEMPTION();
    3628:	4b15      	ldr	r3, [pc, #84]	; (3680 <xQueueReceive+0x118>)
    362a:	4798      	blx	r3
				taskEXIT_CRITICAL();
    362c:	47b8      	blx	r7
				return pdPASS;
    362e:	2001      	movs	r0, #1
}
    3630:	b005      	add	sp, #20
    3632:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
    3634:	0020      	movs	r0, r4
    3636:	47a8      	blx	r5
				( void ) xTaskResumeAll();
    3638:	47b0      	blx	r6
    363a:	e7df      	b.n	35fc <xQueueReceive+0x94>
			prvUnlockQueue( pxQueue );
    363c:	0020      	movs	r0, r4
    363e:	47a8      	blx	r5
			( void ) xTaskResumeAll();
    3640:	47b0      	blx	r6
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3642:	0020      	movs	r0, r4
    3644:	47b8      	blx	r7
    3646:	2800      	cmp	r0, #0
    3648:	d0d8      	beq.n	35fc <xQueueReceive+0x94>
    364a:	e7a1      	b.n	3590 <xQueueReceive+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    364c:	4b10      	ldr	r3, [pc, #64]	; (3690 <xQueueReceive+0x128>)
    364e:	4798      	blx	r3
    3650:	2600      	movs	r6, #0
    3652:	2800      	cmp	r0, #0
    3654:	d1d3      	bne.n	35fe <xQueueReceive+0x96>
    3656:	9e01      	ldr	r6, [sp, #4]
    3658:	2e00      	cmp	r6, #0
    365a:	d0d0      	beq.n	35fe <xQueueReceive+0x96>
    365c:	b672      	cpsid	i
    365e:	e7fe      	b.n	365e <xQueueReceive+0xf6>
    3660:	00003f29 	.word	0x00003f29
    3664:	00003b89 	.word	0x00003b89
    3668:	00002f51 	.word	0x00002f51
    366c:	00003f41 	.word	0x00003f41
    3670:	000030e5 	.word	0x000030e5
    3674:	00003205 	.word	0x00003205
    3678:	00003cad 	.word	0x00003cad
    367c:	00003e49 	.word	0x00003e49
    3680:	00002f39 	.word	0x00002f39
    3684:	00002f69 	.word	0x00002f69
    3688:	000031dd 	.word	0x000031dd
    368c:	00003ead 	.word	0x00003ead
    3690:	00003fbd 	.word	0x00003fbd

00003694 <xQueueSemaphoreTake>:
{
    3694:	b5f0      	push	{r4, r5, r6, r7, lr}
    3696:	b085      	sub	sp, #20
    3698:	1e04      	subs	r4, r0, #0
    369a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    369c:	d101      	bne.n	36a2 <xQueueSemaphoreTake+0xe>
    369e:	b672      	cpsid	i
    36a0:	e7fe      	b.n	36a0 <xQueueSemaphoreTake+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
    36a2:	6c05      	ldr	r5, [r0, #64]	; 0x40
    36a4:	2d00      	cmp	r5, #0
    36a6:	d001      	beq.n	36ac <xQueueSemaphoreTake+0x18>
    36a8:	b672      	cpsid	i
    36aa:	e7fe      	b.n	36aa <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    36ac:	4b49      	ldr	r3, [pc, #292]	; (37d4 <xQueueSemaphoreTake+0x140>)
    36ae:	4798      	blx	r3
    36b0:	2800      	cmp	r0, #0
    36b2:	d103      	bne.n	36bc <xQueueSemaphoreTake+0x28>
    36b4:	9d01      	ldr	r5, [sp, #4]
    36b6:	2d00      	cmp	r5, #0
    36b8:	d000      	beq.n	36bc <xQueueSemaphoreTake+0x28>
    36ba:	e088      	b.n	37ce <xQueueSemaphoreTake+0x13a>
    36bc:	002f      	movs	r7, r5
		taskENTER_CRITICAL();
    36be:	4e46      	ldr	r6, [pc, #280]	; (37d8 <xQueueSemaphoreTake+0x144>)
    36c0:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    36c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    36c4:	2b00      	cmp	r3, #0
    36c6:	d018      	beq.n	36fa <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    36c8:	3b01      	subs	r3, #1
    36ca:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    36cc:	6823      	ldr	r3, [r4, #0]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d102      	bne.n	36d8 <xQueueSemaphoreTake+0x44>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    36d2:	4b42      	ldr	r3, [pc, #264]	; (37dc <xQueueSemaphoreTake+0x148>)
    36d4:	4798      	blx	r3
    36d6:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    36d8:	6923      	ldr	r3, [r4, #16]
    36da:	2b00      	cmp	r3, #0
    36dc:	d007      	beq.n	36ee <xQueueSemaphoreTake+0x5a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    36de:	0020      	movs	r0, r4
    36e0:	4b3f      	ldr	r3, [pc, #252]	; (37e0 <xQueueSemaphoreTake+0x14c>)
    36e2:	3010      	adds	r0, #16
    36e4:	4798      	blx	r3
    36e6:	2800      	cmp	r0, #0
    36e8:	d001      	beq.n	36ee <xQueueSemaphoreTake+0x5a>
						queueYIELD_IF_USING_PREEMPTION();
    36ea:	4b3e      	ldr	r3, [pc, #248]	; (37e4 <xQueueSemaphoreTake+0x150>)
    36ec:	4798      	blx	r3
				taskEXIT_CRITICAL();
    36ee:	4b3e      	ldr	r3, [pc, #248]	; (37e8 <xQueueSemaphoreTake+0x154>)
    36f0:	4798      	blx	r3
				return pdPASS;
    36f2:	2501      	movs	r5, #1
}
    36f4:	0028      	movs	r0, r5
    36f6:	b005      	add	sp, #20
    36f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
    36fa:	9b01      	ldr	r3, [sp, #4]
    36fc:	2b00      	cmp	r3, #0
    36fe:	d106      	bne.n	370e <xQueueSemaphoreTake+0x7a>
						configASSERT( xInheritanceOccurred == pdFALSE );
    3700:	2d00      	cmp	r5, #0
    3702:	d001      	beq.n	3708 <xQueueSemaphoreTake+0x74>
    3704:	b672      	cpsid	i
    3706:	e7fe      	b.n	3706 <xQueueSemaphoreTake+0x72>
					taskEXIT_CRITICAL();
    3708:	4b37      	ldr	r3, [pc, #220]	; (37e8 <xQueueSemaphoreTake+0x154>)
    370a:	4798      	blx	r3
					return errQUEUE_EMPTY;
    370c:	e7f2      	b.n	36f4 <xQueueSemaphoreTake+0x60>
				else if( xEntryTimeSet == pdFALSE )
    370e:	2f00      	cmp	r7, #0
    3710:	d102      	bne.n	3718 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
    3712:	a802      	add	r0, sp, #8
    3714:	4b35      	ldr	r3, [pc, #212]	; (37ec <xQueueSemaphoreTake+0x158>)
    3716:	4798      	blx	r3
		taskEXIT_CRITICAL();
    3718:	4f33      	ldr	r7, [pc, #204]	; (37e8 <xQueueSemaphoreTake+0x154>)
    371a:	47b8      	blx	r7
		vTaskSuspendAll();
    371c:	4b34      	ldr	r3, [pc, #208]	; (37f0 <xQueueSemaphoreTake+0x15c>)
    371e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    3720:	47b0      	blx	r6
    3722:	0022      	movs	r2, r4
    3724:	3244      	adds	r2, #68	; 0x44
    3726:	7813      	ldrb	r3, [r2, #0]
    3728:	b25b      	sxtb	r3, r3
    372a:	3301      	adds	r3, #1
    372c:	d101      	bne.n	3732 <xQueueSemaphoreTake+0x9e>
    372e:	2300      	movs	r3, #0
    3730:	7013      	strb	r3, [r2, #0]
    3732:	0022      	movs	r2, r4
    3734:	3245      	adds	r2, #69	; 0x45
    3736:	7813      	ldrb	r3, [r2, #0]
    3738:	b25b      	sxtb	r3, r3
    373a:	3301      	adds	r3, #1
    373c:	d101      	bne.n	3742 <xQueueSemaphoreTake+0xae>
    373e:	2300      	movs	r3, #0
    3740:	7013      	strb	r3, [r2, #0]
    3742:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3744:	a901      	add	r1, sp, #4
    3746:	a802      	add	r0, sp, #8
    3748:	4b2a      	ldr	r3, [pc, #168]	; (37f4 <xQueueSemaphoreTake+0x160>)
    374a:	4798      	blx	r3
    374c:	2800      	cmp	r0, #0
    374e:	d123      	bne.n	3798 <xQueueSemaphoreTake+0x104>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3750:	0020      	movs	r0, r4
    3752:	4b29      	ldr	r3, [pc, #164]	; (37f8 <xQueueSemaphoreTake+0x164>)
    3754:	4798      	blx	r3
    3756:	2800      	cmp	r0, #0
    3758:	d018      	beq.n	378c <xQueueSemaphoreTake+0xf8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    375a:	6823      	ldr	r3, [r4, #0]
    375c:	2b00      	cmp	r3, #0
    375e:	d105      	bne.n	376c <xQueueSemaphoreTake+0xd8>
						taskENTER_CRITICAL();
    3760:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3762:	6860      	ldr	r0, [r4, #4]
    3764:	4b25      	ldr	r3, [pc, #148]	; (37fc <xQueueSemaphoreTake+0x168>)
    3766:	4798      	blx	r3
    3768:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    376a:	47b8      	blx	r7
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    376c:	0020      	movs	r0, r4
    376e:	9901      	ldr	r1, [sp, #4]
    3770:	3024      	adds	r0, #36	; 0x24
    3772:	4b23      	ldr	r3, [pc, #140]	; (3800 <xQueueSemaphoreTake+0x16c>)
    3774:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    3776:	4b23      	ldr	r3, [pc, #140]	; (3804 <xQueueSemaphoreTake+0x170>)
    3778:	0020      	movs	r0, r4
    377a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    377c:	4b22      	ldr	r3, [pc, #136]	; (3808 <xQueueSemaphoreTake+0x174>)
    377e:	4798      	blx	r3
    3780:	2800      	cmp	r0, #0
    3782:	d101      	bne.n	3788 <xQueueSemaphoreTake+0xf4>
					portYIELD_WITHIN_API();
    3784:	4b17      	ldr	r3, [pc, #92]	; (37e4 <xQueueSemaphoreTake+0x150>)
    3786:	4798      	blx	r3
    3788:	2701      	movs	r7, #1
    378a:	e798      	b.n	36be <xQueueSemaphoreTake+0x2a>
				prvUnlockQueue( pxQueue );
    378c:	0020      	movs	r0, r4
    378e:	4b1d      	ldr	r3, [pc, #116]	; (3804 <xQueueSemaphoreTake+0x170>)
    3790:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3792:	4b1d      	ldr	r3, [pc, #116]	; (3808 <xQueueSemaphoreTake+0x174>)
    3794:	4798      	blx	r3
    3796:	e7f7      	b.n	3788 <xQueueSemaphoreTake+0xf4>
			prvUnlockQueue( pxQueue );
    3798:	0020      	movs	r0, r4
    379a:	4b1a      	ldr	r3, [pc, #104]	; (3804 <xQueueSemaphoreTake+0x170>)
    379c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    379e:	4b1a      	ldr	r3, [pc, #104]	; (3808 <xQueueSemaphoreTake+0x174>)
    37a0:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    37a2:	0020      	movs	r0, r4
    37a4:	4b14      	ldr	r3, [pc, #80]	; (37f8 <xQueueSemaphoreTake+0x164>)
    37a6:	4798      	blx	r3
    37a8:	2800      	cmp	r0, #0
    37aa:	d0ed      	beq.n	3788 <xQueueSemaphoreTake+0xf4>
					if( xInheritanceOccurred != pdFALSE )
    37ac:	2d00      	cmp	r5, #0
    37ae:	d0a1      	beq.n	36f4 <xQueueSemaphoreTake+0x60>
						taskENTER_CRITICAL();
    37b0:	47b0      	blx	r6
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    37b2:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    37b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    37b6:	428b      	cmp	r3, r1
    37b8:	d003      	beq.n	37c2 <xQueueSemaphoreTake+0x12e>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    37ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    37bc:	3105      	adds	r1, #5
    37be:	681b      	ldr	r3, [r3, #0]
    37c0:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    37c2:	6860      	ldr	r0, [r4, #4]
    37c4:	4b11      	ldr	r3, [pc, #68]	; (380c <xQueueSemaphoreTake+0x178>)
    37c6:	4798      	blx	r3
				return errQUEUE_EMPTY;
    37c8:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
    37ca:	47b8      	blx	r7
    37cc:	e792      	b.n	36f4 <xQueueSemaphoreTake+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    37ce:	b672      	cpsid	i
    37d0:	e7fe      	b.n	37d0 <xQueueSemaphoreTake+0x13c>
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	00003fbd 	.word	0x00003fbd
    37d8:	00002f51 	.word	0x00002f51
    37dc:	00004155 	.word	0x00004155
    37e0:	00003ead 	.word	0x00003ead
    37e4:	00002f39 	.word	0x00002f39
    37e8:	00002f69 	.word	0x00002f69
    37ec:	00003f29 	.word	0x00003f29
    37f0:	00003b89 	.word	0x00003b89
    37f4:	00003f41 	.word	0x00003f41
    37f8:	000030e5 	.word	0x000030e5
    37fc:	00003fdd 	.word	0x00003fdd
    3800:	00003e49 	.word	0x00003e49
    3804:	00003205 	.word	0x00003205
    3808:	00003cad 	.word	0x00003cad
    380c:	000040d5 	.word	0x000040d5

00003810 <vQueueWaitForMessageRestricted>:
	{
    3810:	b570      	push	{r4, r5, r6, lr}
    3812:	0004      	movs	r4, r0
		prvLockQueue( pxQueue );
    3814:	4b11      	ldr	r3, [pc, #68]	; (385c <vQueueWaitForMessageRestricted+0x4c>)
	{
    3816:	0016      	movs	r6, r2
    3818:	000d      	movs	r5, r1
		prvLockQueue( pxQueue );
    381a:	4798      	blx	r3
    381c:	0022      	movs	r2, r4
    381e:	3244      	adds	r2, #68	; 0x44
    3820:	7813      	ldrb	r3, [r2, #0]
    3822:	b25b      	sxtb	r3, r3
    3824:	3301      	adds	r3, #1
    3826:	d101      	bne.n	382c <vQueueWaitForMessageRestricted+0x1c>
    3828:	2300      	movs	r3, #0
    382a:	7013      	strb	r3, [r2, #0]
    382c:	0022      	movs	r2, r4
    382e:	3245      	adds	r2, #69	; 0x45
    3830:	7813      	ldrb	r3, [r2, #0]
    3832:	b25b      	sxtb	r3, r3
    3834:	3301      	adds	r3, #1
    3836:	d101      	bne.n	383c <vQueueWaitForMessageRestricted+0x2c>
    3838:	2300      	movs	r3, #0
    383a:	7013      	strb	r3, [r2, #0]
    383c:	4b08      	ldr	r3, [pc, #32]	; (3860 <vQueueWaitForMessageRestricted+0x50>)
    383e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    3840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3842:	2b00      	cmp	r3, #0
    3844:	d105      	bne.n	3852 <vQueueWaitForMessageRestricted+0x42>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    3846:	0020      	movs	r0, r4
    3848:	0032      	movs	r2, r6
    384a:	0029      	movs	r1, r5
    384c:	3024      	adds	r0, #36	; 0x24
    384e:	4b05      	ldr	r3, [pc, #20]	; (3864 <vQueueWaitForMessageRestricted+0x54>)
    3850:	4798      	blx	r3
		prvUnlockQueue( pxQueue );
    3852:	0020      	movs	r0, r4
    3854:	4b04      	ldr	r3, [pc, #16]	; (3868 <vQueueWaitForMessageRestricted+0x58>)
    3856:	4798      	blx	r3
	}
    3858:	bd70      	pop	{r4, r5, r6, pc}
    385a:	46c0      	nop			; (mov r8, r8)
    385c:	00002f51 	.word	0x00002f51
    3860:	00002f69 	.word	0x00002f69
    3864:	00003e75 	.word	0x00003e75
    3868:	00003205 	.word	0x00003205

0000386c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    386c:	4a07      	ldr	r2, [pc, #28]	; (388c <prvResetNextTaskUnblockTime+0x20>)
    386e:	6813      	ldr	r3, [r2, #0]
    3870:	6819      	ldr	r1, [r3, #0]
    3872:	4b07      	ldr	r3, [pc, #28]	; (3890 <prvResetNextTaskUnblockTime+0x24>)
    3874:	2900      	cmp	r1, #0
    3876:	d103      	bne.n	3880 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3878:	2201      	movs	r2, #1
    387a:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    387c:	601a      	str	r2, [r3, #0]
	}
}
    387e:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3880:	6812      	ldr	r2, [r2, #0]
    3882:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    3884:	68d2      	ldr	r2, [r2, #12]
    3886:	6852      	ldr	r2, [r2, #4]
    3888:	e7f8      	b.n	387c <prvResetNextTaskUnblockTime+0x10>
    388a:	46c0      	nop			; (mov r8, r8)
    388c:	200003b8 	.word	0x200003b8
    3890:	20000468 	.word	0x20000468

00003894 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3896:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3898:	4b13      	ldr	r3, [pc, #76]	; (38e8 <prvAddCurrentTaskToDelayedList+0x54>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    389a:	4d14      	ldr	r5, [pc, #80]	; (38ec <prvAddCurrentTaskToDelayedList+0x58>)
const TickType_t xConstTickCount = xTickCount;
    389c:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    389e:	6828      	ldr	r0, [r5, #0]
    38a0:	4b13      	ldr	r3, [pc, #76]	; (38f0 <prvAddCurrentTaskToDelayedList+0x5c>)
    38a2:	3004      	adds	r0, #4
{
    38a4:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    38a6:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    38a8:	1c63      	adds	r3, r4, #1
    38aa:	d107      	bne.n	38bc <prvAddCurrentTaskToDelayedList+0x28>
    38ac:	2f00      	cmp	r7, #0
    38ae:	d005      	beq.n	38bc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    38b0:	6829      	ldr	r1, [r5, #0]
    38b2:	4810      	ldr	r0, [pc, #64]	; (38f4 <prvAddCurrentTaskToDelayedList+0x60>)
    38b4:	4b10      	ldr	r3, [pc, #64]	; (38f8 <prvAddCurrentTaskToDelayedList+0x64>)
    38b6:	3104      	adds	r1, #4

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    38b8:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    38ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    38bc:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
    38be:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    38c0:	605c      	str	r4, [r3, #4]
    38c2:	4b0e      	ldr	r3, [pc, #56]	; (38fc <prvAddCurrentTaskToDelayedList+0x68>)
			if( xTimeToWake < xConstTickCount )
    38c4:	42a6      	cmp	r6, r4
    38c6:	d904      	bls.n	38d2 <prvAddCurrentTaskToDelayedList+0x3e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    38c8:	4a0d      	ldr	r2, [pc, #52]	; (3900 <prvAddCurrentTaskToDelayedList+0x6c>)
    38ca:	6810      	ldr	r0, [r2, #0]
    38cc:	6829      	ldr	r1, [r5, #0]
    38ce:	3104      	adds	r1, #4
    38d0:	e7f2      	b.n	38b8 <prvAddCurrentTaskToDelayedList+0x24>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    38d2:	4a0c      	ldr	r2, [pc, #48]	; (3904 <prvAddCurrentTaskToDelayedList+0x70>)
    38d4:	6810      	ldr	r0, [r2, #0]
    38d6:	6829      	ldr	r1, [r5, #0]
    38d8:	3104      	adds	r1, #4
    38da:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    38dc:	4b0a      	ldr	r3, [pc, #40]	; (3908 <prvAddCurrentTaskToDelayedList+0x74>)
    38de:	681a      	ldr	r2, [r3, #0]
    38e0:	4294      	cmp	r4, r2
    38e2:	d2ea      	bcs.n	38ba <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
    38e4:	601c      	str	r4, [r3, #0]
}
    38e6:	e7e8      	b.n	38ba <prvAddCurrentTaskToDelayedList+0x26>
    38e8:	200004b0 	.word	0x200004b0
    38ec:	200003b4 	.word	0x200003b4
    38f0:	000030bf 	.word	0x000030bf
    38f4:	20000488 	.word	0x20000488
    38f8:	00003079 	.word	0x00003079
    38fc:	00003091 	.word	0x00003091
    3900:	200003bc 	.word	0x200003bc
    3904:	200003b8 	.word	0x200003b8
    3908:	20000468 	.word	0x20000468

0000390c <prvIdleTask>:
{
    390c:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    390e:	4c11      	ldr	r4, [pc, #68]	; (3954 <prvIdleTask+0x48>)
    3910:	6823      	ldr	r3, [r4, #0]
    3912:	2b00      	cmp	r3, #0
    3914:	d106      	bne.n	3924 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    3916:	4b10      	ldr	r3, [pc, #64]	; (3958 <prvIdleTask+0x4c>)
    3918:	681b      	ldr	r3, [r3, #0]
    391a:	2b01      	cmp	r3, #1
    391c:	d9f7      	bls.n	390e <prvIdleTask+0x2>
				taskYIELD();
    391e:	4b0f      	ldr	r3, [pc, #60]	; (395c <prvIdleTask+0x50>)
    3920:	4798      	blx	r3
    3922:	e7f4      	b.n	390e <prvIdleTask+0x2>
			taskENTER_CRITICAL();
    3924:	4b0e      	ldr	r3, [pc, #56]	; (3960 <prvIdleTask+0x54>)
    3926:	4798      	blx	r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3928:	4b0e      	ldr	r3, [pc, #56]	; (3964 <prvIdleTask+0x58>)
    392a:	68db      	ldr	r3, [r3, #12]
    392c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    392e:	4b0e      	ldr	r3, [pc, #56]	; (3968 <prvIdleTask+0x5c>)
    3930:	1d28      	adds	r0, r5, #4
    3932:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    3934:	4a0d      	ldr	r2, [pc, #52]	; (396c <prvIdleTask+0x60>)
    3936:	6813      	ldr	r3, [r2, #0]
    3938:	3b01      	subs	r3, #1
    393a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    393c:	6823      	ldr	r3, [r4, #0]
    393e:	3b01      	subs	r3, #1
    3940:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    3942:	4b0b      	ldr	r3, [pc, #44]	; (3970 <prvIdleTask+0x64>)
    3944:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    3946:	6b28      	ldr	r0, [r5, #48]	; 0x30
    3948:	4c0a      	ldr	r4, [pc, #40]	; (3974 <prvIdleTask+0x68>)
    394a:	47a0      	blx	r4
			vPortFree( pxTCB );
    394c:	0028      	movs	r0, r5
    394e:	47a0      	blx	r4
    3950:	e7dd      	b.n	390e <prvIdleTask+0x2>
    3952:	46c0      	nop			; (mov r8, r8)
    3954:	20000428 	.word	0x20000428
    3958:	200003c0 	.word	0x200003c0
    395c:	00002f39 	.word	0x00002f39
    3960:	00002f51 	.word	0x00002f51
    3964:	2000049c 	.word	0x2000049c
    3968:	000030bf 	.word	0x000030bf
    396c:	20000424 	.word	0x20000424
    3970:	00002f69 	.word	0x00002f69
    3974:	00003039 	.word	0x00003039

00003978 <xTaskCreate>:
	{
    3978:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    397a:	0095      	lsls	r5, r2, #2
	{
    397c:	b085      	sub	sp, #20
    397e:	9001      	str	r0, [sp, #4]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3980:	4c51      	ldr	r4, [pc, #324]	; (3ac8 <xTaskCreate+0x150>)
    3982:	0028      	movs	r0, r5
	{
    3984:	000f      	movs	r7, r1
    3986:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3988:	47a0      	blx	r4
    398a:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    398c:	d100      	bne.n	3990 <xTaskCreate+0x18>
    398e:	e08d      	b.n	3aac <xTaskCreate+0x134>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    3990:	2050      	movs	r0, #80	; 0x50
    3992:	47a0      	blx	r4
    3994:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    3996:	d100      	bne.n	399a <xTaskCreate+0x22>
    3998:	e085      	b.n	3aa6 <xTaskCreate+0x12e>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    399a:	2307      	movs	r3, #7
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    399c:	3d04      	subs	r5, #4
					pxNewTCB->pxStack = pxStack;
    399e:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    39a0:	1976      	adds	r6, r6, r5
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    39a2:	439e      	bics	r6, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    39a4:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    39a6:	9600      	str	r6, [sp, #0]
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    39a8:	001a      	movs	r2, r3
    39aa:	5cf9      	ldrb	r1, [r7, r3]
    39ac:	3234      	adds	r2, #52	; 0x34
    39ae:	54a1      	strb	r1, [r4, r2]
		if( pcName[ x ] == 0x00 )
    39b0:	5cfa      	ldrb	r2, [r7, r3]
    39b2:	2a00      	cmp	r2, #0
    39b4:	d002      	beq.n	39bc <xTaskCreate+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    39b6:	3301      	adds	r3, #1
    39b8:	2b0a      	cmp	r3, #10
    39ba:	d1f5      	bne.n	39a8 <xTaskCreate+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    39bc:	0023      	movs	r3, r4
    39be:	2700      	movs	r7, #0
    39c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    39c2:	333d      	adds	r3, #61	; 0x3d
    39c4:	701f      	strb	r7, [r3, #0]
    39c6:	2d04      	cmp	r5, #4
    39c8:	d900      	bls.n	39cc <xTaskCreate+0x54>
    39ca:	2504      	movs	r5, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    39cc:	1d23      	adds	r3, r4, #4
    39ce:	0018      	movs	r0, r3
	pxNewTCB->uxPriority = uxPriority;
    39d0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    39d2:	6425      	str	r5, [r4, #64]	; 0x40
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    39d4:	4e3d      	ldr	r6, [pc, #244]	; (3acc <xTaskCreate+0x154>)
		pxNewTCB->uxMutexesHeld = 0;
    39d6:	6467      	str	r7, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    39d8:	9303      	str	r3, [sp, #12]
    39da:	47b0      	blx	r6
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    39dc:	0020      	movs	r0, r4
    39de:	3018      	adds	r0, #24
    39e0:	47b0      	blx	r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    39e2:	2305      	movs	r3, #5
    39e4:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    39e6:	0023      	movs	r3, r4
    39e8:	334c      	adds	r3, #76	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    39ea:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    39ec:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    39ee:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    39f0:	64a7      	str	r7, [r4, #72]	; 0x48
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    39f2:	9a02      	ldr	r2, [sp, #8]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    39f4:	701f      	strb	r7, [r3, #0]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    39f6:	9901      	ldr	r1, [sp, #4]
    39f8:	4b35      	ldr	r3, [pc, #212]	; (3ad0 <xTaskCreate+0x158>)
    39fa:	9800      	ldr	r0, [sp, #0]
    39fc:	4798      	blx	r3
	if( ( void * ) pxCreatedTask != NULL )
    39fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3a00:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    3a02:	2b00      	cmp	r3, #0
    3a04:	d000      	beq.n	3a08 <xTaskCreate+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    3a06:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    3a08:	4b32      	ldr	r3, [pc, #200]	; (3ad4 <xTaskCreate+0x15c>)
    3a0a:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    3a0c:	4b32      	ldr	r3, [pc, #200]	; (3ad8 <xTaskCreate+0x160>)
		if( pxCurrentTCB == NULL )
    3a0e:	4f33      	ldr	r7, [pc, #204]	; (3adc <xTaskCreate+0x164>)
		uxCurrentNumberOfTasks++;
    3a10:	681a      	ldr	r2, [r3, #0]
    3a12:	4e33      	ldr	r6, [pc, #204]	; (3ae0 <xTaskCreate+0x168>)
    3a14:	3201      	adds	r2, #1
    3a16:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    3a18:	683a      	ldr	r2, [r7, #0]
    3a1a:	2a00      	cmp	r2, #0
    3a1c:	d149      	bne.n	3ab2 <xTaskCreate+0x13a>
			pxCurrentTCB = pxNewTCB;
    3a1e:	603c      	str	r4, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3a20:	681b      	ldr	r3, [r3, #0]
    3a22:	2b01      	cmp	r3, #1
    3a24:	d11e      	bne.n	3a64 <xTaskCreate+0xec>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3a26:	4d2f      	ldr	r5, [pc, #188]	; (3ae4 <xTaskCreate+0x16c>)
    3a28:	0030      	movs	r0, r6
    3a2a:	47a8      	blx	r5
    3a2c:	0030      	movs	r0, r6
    3a2e:	3014      	adds	r0, #20
    3a30:	47a8      	blx	r5
    3a32:	0030      	movs	r0, r6
    3a34:	3028      	adds	r0, #40	; 0x28
    3a36:	47a8      	blx	r5
    3a38:	0030      	movs	r0, r6
    3a3a:	303c      	adds	r0, #60	; 0x3c
    3a3c:	47a8      	blx	r5
    3a3e:	0030      	movs	r0, r6
    3a40:	3050      	adds	r0, #80	; 0x50
    3a42:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
    3a44:	4828      	ldr	r0, [pc, #160]	; (3ae8 <xTaskCreate+0x170>)
    3a46:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
    3a48:	4828      	ldr	r0, [pc, #160]	; (3aec <xTaskCreate+0x174>)
    3a4a:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
    3a4c:	4828      	ldr	r0, [pc, #160]	; (3af0 <xTaskCreate+0x178>)
    3a4e:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
    3a50:	4828      	ldr	r0, [pc, #160]	; (3af4 <xTaskCreate+0x17c>)
    3a52:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
    3a54:	4828      	ldr	r0, [pc, #160]	; (3af8 <xTaskCreate+0x180>)
    3a56:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
    3a58:	4b28      	ldr	r3, [pc, #160]	; (3afc <xTaskCreate+0x184>)
    3a5a:	4a23      	ldr	r2, [pc, #140]	; (3ae8 <xTaskCreate+0x170>)
    3a5c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3a5e:	4b28      	ldr	r3, [pc, #160]	; (3b00 <xTaskCreate+0x188>)
    3a60:	4a22      	ldr	r2, [pc, #136]	; (3aec <xTaskCreate+0x174>)
    3a62:	601a      	str	r2, [r3, #0]
		uxTaskNumber++;
    3a64:	4a27      	ldr	r2, [pc, #156]	; (3b04 <xTaskCreate+0x18c>)
    3a66:	6813      	ldr	r3, [r2, #0]
    3a68:	3301      	adds	r3, #1
    3a6a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
    3a6c:	4a26      	ldr	r2, [pc, #152]	; (3b08 <xTaskCreate+0x190>)
    3a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3a70:	6811      	ldr	r1, [r2, #0]
    3a72:	428b      	cmp	r3, r1
    3a74:	d900      	bls.n	3a78 <xTaskCreate+0x100>
    3a76:	6013      	str	r3, [r2, #0]
    3a78:	2014      	movs	r0, #20
    3a7a:	4358      	muls	r0, r3
    3a7c:	1d21      	adds	r1, r4, #4
    3a7e:	1830      	adds	r0, r6, r0
    3a80:	4b22      	ldr	r3, [pc, #136]	; (3b0c <xTaskCreate+0x194>)
    3a82:	4798      	blx	r3
	taskEXIT_CRITICAL();
    3a84:	4b22      	ldr	r3, [pc, #136]	; (3b10 <xTaskCreate+0x198>)
    3a86:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    3a88:	4b22      	ldr	r3, [pc, #136]	; (3b14 <xTaskCreate+0x19c>)
			xReturn = pdPASS;
    3a8a:	2501      	movs	r5, #1
	if( xSchedulerRunning != pdFALSE )
    3a8c:	681b      	ldr	r3, [r3, #0]
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d006      	beq.n	3aa0 <xTaskCreate+0x128>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    3a92:	683b      	ldr	r3, [r7, #0]
    3a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3a98:	429a      	cmp	r2, r3
    3a9a:	d201      	bcs.n	3aa0 <xTaskCreate+0x128>
			taskYIELD_IF_USING_PREEMPTION();
    3a9c:	4b1e      	ldr	r3, [pc, #120]	; (3b18 <xTaskCreate+0x1a0>)
    3a9e:	4798      	blx	r3
	}
    3aa0:	0028      	movs	r0, r5
    3aa2:	b005      	add	sp, #20
    3aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    3aa6:	0030      	movs	r0, r6
    3aa8:	4b1c      	ldr	r3, [pc, #112]	; (3b1c <xTaskCreate+0x1a4>)
    3aaa:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3aac:	2501      	movs	r5, #1
    3aae:	426d      	negs	r5, r5
    3ab0:	e7f6      	b.n	3aa0 <xTaskCreate+0x128>
			if( xSchedulerRunning == pdFALSE )
    3ab2:	4b18      	ldr	r3, [pc, #96]	; (3b14 <xTaskCreate+0x19c>)
    3ab4:	681b      	ldr	r3, [r3, #0]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d1d4      	bne.n	3a64 <xTaskCreate+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3aba:	683b      	ldr	r3, [r7, #0]
    3abc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ac0:	4293      	cmp	r3, r2
    3ac2:	d8cf      	bhi.n	3a64 <xTaskCreate+0xec>
					pxCurrentTCB = pxNewTCB;
    3ac4:	603c      	str	r4, [r7, #0]
    3ac6:	e7cd      	b.n	3a64 <xTaskCreate+0xec>
    3ac8:	00003015 	.word	0x00003015
    3acc:	00003073 	.word	0x00003073
    3ad0:	00002e95 	.word	0x00002e95
    3ad4:	00002f51 	.word	0x00002f51
    3ad8:	20000424 	.word	0x20000424
    3adc:	200003b4 	.word	0x200003b4
    3ae0:	200003c0 	.word	0x200003c0
    3ae4:	0000305d 	.word	0x0000305d
    3ae8:	2000043c 	.word	0x2000043c
    3aec:	20000450 	.word	0x20000450
    3af0:	20000470 	.word	0x20000470
    3af4:	2000049c 	.word	0x2000049c
    3af8:	20000488 	.word	0x20000488
    3afc:	200003b8 	.word	0x200003b8
    3b00:	200003bc 	.word	0x200003bc
    3b04:	20000434 	.word	0x20000434
    3b08:	20000438 	.word	0x20000438
    3b0c:	00003079 	.word	0x00003079
    3b10:	00002f69 	.word	0x00002f69
    3b14:	20000484 	.word	0x20000484
    3b18:	00002f39 	.word	0x00002f39
    3b1c:	00003039 	.word	0x00003039

00003b20 <vTaskStartScheduler>:
{
    3b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
    3b22:	2400      	movs	r4, #0
    3b24:	4b0f      	ldr	r3, [pc, #60]	; (3b64 <vTaskStartScheduler+0x44>)
    3b26:	9400      	str	r4, [sp, #0]
    3b28:	9301      	str	r3, [sp, #4]
    3b2a:	2282      	movs	r2, #130	; 0x82
    3b2c:	0023      	movs	r3, r4
    3b2e:	490e      	ldr	r1, [pc, #56]	; (3b68 <vTaskStartScheduler+0x48>)
    3b30:	480e      	ldr	r0, [pc, #56]	; (3b6c <vTaskStartScheduler+0x4c>)
    3b32:	4d0f      	ldr	r5, [pc, #60]	; (3b70 <vTaskStartScheduler+0x50>)
    3b34:	47a8      	blx	r5
		if( xReturn == pdPASS )
    3b36:	2801      	cmp	r0, #1
    3b38:	d10f      	bne.n	3b5a <vTaskStartScheduler+0x3a>
			xReturn = xTimerCreateTimerTask();
    3b3a:	4b0e      	ldr	r3, [pc, #56]	; (3b74 <vTaskStartScheduler+0x54>)
    3b3c:	4798      	blx	r3
	if( xReturn == pdPASS )
    3b3e:	2801      	cmp	r0, #1
    3b40:	d10b      	bne.n	3b5a <vTaskStartScheduler+0x3a>
		portDISABLE_INTERRUPTS();
    3b42:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    3b44:	2201      	movs	r2, #1
    3b46:	4b0c      	ldr	r3, [pc, #48]	; (3b78 <vTaskStartScheduler+0x58>)
    3b48:	4252      	negs	r2, r2
    3b4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    3b4c:	4b0b      	ldr	r3, [pc, #44]	; (3b7c <vTaskStartScheduler+0x5c>)
    3b4e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    3b50:	4b0b      	ldr	r3, [pc, #44]	; (3b80 <vTaskStartScheduler+0x60>)
    3b52:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    3b54:	4b0b      	ldr	r3, [pc, #44]	; (3b84 <vTaskStartScheduler+0x64>)
    3b56:	4798      	blx	r3
}
    3b58:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    3b5a:	1c43      	adds	r3, r0, #1
    3b5c:	d1fc      	bne.n	3b58 <vTaskStartScheduler+0x38>
    3b5e:	b672      	cpsid	i
    3b60:	e7fe      	b.n	3b60 <vTaskStartScheduler+0x40>
    3b62:	46c0      	nop			; (mov r8, r8)
    3b64:	20000464 	.word	0x20000464
    3b68:	0000a374 	.word	0x0000a374
    3b6c:	0000390d 	.word	0x0000390d
    3b70:	00003979 	.word	0x00003979
    3b74:	00004209 	.word	0x00004209
    3b78:	20000468 	.word	0x20000468
    3b7c:	20000484 	.word	0x20000484
    3b80:	200004b0 	.word	0x200004b0
    3b84:	00002eb9 	.word	0x00002eb9

00003b88 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    3b88:	4a02      	ldr	r2, [pc, #8]	; (3b94 <vTaskSuspendAll+0xc>)
    3b8a:	6813      	ldr	r3, [r2, #0]
    3b8c:	3301      	adds	r3, #1
    3b8e:	6013      	str	r3, [r2, #0]
}
    3b90:	4770      	bx	lr
    3b92:	46c0      	nop			; (mov r8, r8)
    3b94:	20000430 	.word	0x20000430

00003b98 <xTaskGetTickCount>:
    3b98:	4b01      	ldr	r3, [pc, #4]	; (3ba0 <xTaskGetTickCount+0x8>)
    3b9a:	6818      	ldr	r0, [r3, #0]
    3b9c:	4770      	bx	lr
    3b9e:	46c0      	nop			; (mov r8, r8)
    3ba0:	200004b0 	.word	0x200004b0

00003ba4 <xTaskIncrementTick>:
{
    3ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3ba6:	4b33      	ldr	r3, [pc, #204]	; (3c74 <xTaskIncrementTick+0xd0>)
    3ba8:	681b      	ldr	r3, [r3, #0]
    3baa:	2b00      	cmp	r3, #0
    3bac:	d135      	bne.n	3c1a <xTaskIncrementTick+0x76>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    3bae:	4b32      	ldr	r3, [pc, #200]	; (3c78 <xTaskIncrementTick+0xd4>)
    3bb0:	681f      	ldr	r7, [r3, #0]
    3bb2:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
    3bb4:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    3bb6:	2f00      	cmp	r7, #0
    3bb8:	d111      	bne.n	3bde <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
    3bba:	4b30      	ldr	r3, [pc, #192]	; (3c7c <xTaskIncrementTick+0xd8>)
    3bbc:	681a      	ldr	r2, [r3, #0]
    3bbe:	6812      	ldr	r2, [r2, #0]
    3bc0:	2a00      	cmp	r2, #0
    3bc2:	d001      	beq.n	3bc8 <xTaskIncrementTick+0x24>
    3bc4:	b672      	cpsid	i
    3bc6:	e7fe      	b.n	3bc6 <xTaskIncrementTick+0x22>
    3bc8:	4a2d      	ldr	r2, [pc, #180]	; (3c80 <xTaskIncrementTick+0xdc>)
    3bca:	6819      	ldr	r1, [r3, #0]
    3bcc:	6810      	ldr	r0, [r2, #0]
    3bce:	6018      	str	r0, [r3, #0]
    3bd0:	6011      	str	r1, [r2, #0]
    3bd2:	4a2c      	ldr	r2, [pc, #176]	; (3c84 <xTaskIncrementTick+0xe0>)
    3bd4:	6813      	ldr	r3, [r2, #0]
    3bd6:	3301      	adds	r3, #1
    3bd8:	6013      	str	r3, [r2, #0]
    3bda:	4b2b      	ldr	r3, [pc, #172]	; (3c88 <xTaskIncrementTick+0xe4>)
    3bdc:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    3bde:	4e2b      	ldr	r6, [pc, #172]	; (3c8c <xTaskIncrementTick+0xe8>)
BaseType_t xSwitchRequired = pdFALSE;
    3be0:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    3be2:	6833      	ldr	r3, [r6, #0]
    3be4:	429f      	cmp	r7, r3
    3be6:	d307      	bcc.n	3bf8 <xTaskIncrementTick+0x54>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3be8:	4b24      	ldr	r3, [pc, #144]	; (3c7c <xTaskIncrementTick+0xd8>)
    3bea:	681a      	ldr	r2, [r3, #0]
    3bec:	6812      	ldr	r2, [r2, #0]
    3bee:	2a00      	cmp	r2, #0
    3bf0:	d119      	bne.n	3c26 <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3bf2:	2301      	movs	r3, #1
    3bf4:	425b      	negs	r3, r3
    3bf6:	6033      	str	r3, [r6, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    3bf8:	4b25      	ldr	r3, [pc, #148]	; (3c90 <xTaskIncrementTick+0xec>)
    3bfa:	681b      	ldr	r3, [r3, #0]
    3bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3bfe:	2314      	movs	r3, #20
    3c00:	4353      	muls	r3, r2
    3c02:	4a24      	ldr	r2, [pc, #144]	; (3c94 <xTaskIncrementTick+0xf0>)
    3c04:	58d3      	ldr	r3, [r2, r3]
    3c06:	2b01      	cmp	r3, #1
    3c08:	d900      	bls.n	3c0c <xTaskIncrementTick+0x68>
				xSwitchRequired = pdTRUE;
    3c0a:	2501      	movs	r5, #1
		if( xYieldPending != pdFALSE )
    3c0c:	4b22      	ldr	r3, [pc, #136]	; (3c98 <xTaskIncrementTick+0xf4>)
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	2b00      	cmp	r3, #0
    3c12:	d000      	beq.n	3c16 <xTaskIncrementTick+0x72>
			xSwitchRequired = pdTRUE;
    3c14:	2501      	movs	r5, #1
}
    3c16:	0028      	movs	r0, r5
    3c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		++uxPendedTicks;
    3c1a:	4a20      	ldr	r2, [pc, #128]	; (3c9c <xTaskIncrementTick+0xf8>)
BaseType_t xSwitchRequired = pdFALSE;
    3c1c:	2500      	movs	r5, #0
		++uxPendedTicks;
    3c1e:	6813      	ldr	r3, [r2, #0]
    3c20:	3301      	adds	r3, #1
    3c22:	6013      	str	r3, [r2, #0]
    3c24:	e7f2      	b.n	3c0c <xTaskIncrementTick+0x68>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3c26:	681b      	ldr	r3, [r3, #0]
    3c28:	68db      	ldr	r3, [r3, #12]
    3c2a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    3c2c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
    3c2e:	429f      	cmp	r7, r3
    3c30:	d3e1      	bcc.n	3bf6 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3c32:	1d23      	adds	r3, r4, #4
    3c34:	9301      	str	r3, [sp, #4]
    3c36:	0018      	movs	r0, r3
    3c38:	4b19      	ldr	r3, [pc, #100]	; (3ca0 <xTaskIncrementTick+0xfc>)
    3c3a:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3c3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d003      	beq.n	3c4a <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3c42:	0020      	movs	r0, r4
    3c44:	4b16      	ldr	r3, [pc, #88]	; (3ca0 <xTaskIncrementTick+0xfc>)
    3c46:	3018      	adds	r0, #24
    3c48:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    3c4a:	4b16      	ldr	r3, [pc, #88]	; (3ca4 <xTaskIncrementTick+0x100>)
    3c4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3c4e:	681a      	ldr	r2, [r3, #0]
    3c50:	4290      	cmp	r0, r2
    3c52:	d900      	bls.n	3c56 <xTaskIncrementTick+0xb2>
    3c54:	6018      	str	r0, [r3, #0]
    3c56:	2314      	movs	r3, #20
    3c58:	4358      	muls	r0, r3
    3c5a:	4b0e      	ldr	r3, [pc, #56]	; (3c94 <xTaskIncrementTick+0xf0>)
    3c5c:	1d21      	adds	r1, r4, #4
    3c5e:	1818      	adds	r0, r3, r0
    3c60:	4b11      	ldr	r3, [pc, #68]	; (3ca8 <xTaskIncrementTick+0x104>)
    3c62:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3c64:	4b0a      	ldr	r3, [pc, #40]	; (3c90 <xTaskIncrementTick+0xec>)
    3c66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3c68:	681b      	ldr	r3, [r3, #0]
    3c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c6c:	429a      	cmp	r2, r3
    3c6e:	d3bb      	bcc.n	3be8 <xTaskIncrementTick+0x44>
							xSwitchRequired = pdTRUE;
    3c70:	2501      	movs	r5, #1
    3c72:	e7b9      	b.n	3be8 <xTaskIncrementTick+0x44>
    3c74:	20000430 	.word	0x20000430
    3c78:	200004b0 	.word	0x200004b0
    3c7c:	200003b8 	.word	0x200003b8
    3c80:	200003bc 	.word	0x200003bc
    3c84:	2000046c 	.word	0x2000046c
    3c88:	0000386d 	.word	0x0000386d
    3c8c:	20000468 	.word	0x20000468
    3c90:	200003b4 	.word	0x200003b4
    3c94:	200003c0 	.word	0x200003c0
    3c98:	200004b4 	.word	0x200004b4
    3c9c:	2000042c 	.word	0x2000042c
    3ca0:	000030bf 	.word	0x000030bf
    3ca4:	20000438 	.word	0x20000438
    3ca8:	00003079 	.word	0x00003079

00003cac <xTaskResumeAll>:
{
    3cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    3cae:	4c2b      	ldr	r4, [pc, #172]	; (3d5c <xTaskResumeAll+0xb0>)
    3cb0:	6823      	ldr	r3, [r4, #0]
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	d101      	bne.n	3cba <xTaskResumeAll+0xe>
    3cb6:	b672      	cpsid	i
    3cb8:	e7fe      	b.n	3cb8 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    3cba:	4b29      	ldr	r3, [pc, #164]	; (3d60 <xTaskResumeAll+0xb4>)
    3cbc:	4798      	blx	r3
		--uxSchedulerSuspended;
    3cbe:	6823      	ldr	r3, [r4, #0]
    3cc0:	3b01      	subs	r3, #1
    3cc2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3cc4:	6824      	ldr	r4, [r4, #0]
    3cc6:	2c00      	cmp	r4, #0
    3cc8:	d004      	beq.n	3cd4 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
    3cca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    3ccc:	4b25      	ldr	r3, [pc, #148]	; (3d64 <xTaskResumeAll+0xb8>)
    3cce:	4798      	blx	r3
}
    3cd0:	0020      	movs	r0, r4
    3cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3cd4:	4b24      	ldr	r3, [pc, #144]	; (3d68 <xTaskResumeAll+0xbc>)
						xYieldPending = pdTRUE;
    3cd6:	2701      	movs	r7, #1
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	2b00      	cmp	r3, #0
    3cdc:	d0f5      	beq.n	3cca <xTaskResumeAll+0x1e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3cde:	4b23      	ldr	r3, [pc, #140]	; (3d6c <xTaskResumeAll+0xc0>)
    3ce0:	681a      	ldr	r2, [r3, #0]
    3ce2:	2a00      	cmp	r2, #0
    3ce4:	d11a      	bne.n	3d1c <xTaskResumeAll+0x70>
				if( pxTCB != NULL )
    3ce6:	2c00      	cmp	r4, #0
    3ce8:	d001      	beq.n	3cee <xTaskResumeAll+0x42>
					prvResetNextTaskUnblockTime();
    3cea:	4b21      	ldr	r3, [pc, #132]	; (3d70 <xTaskResumeAll+0xc4>)
    3cec:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    3cee:	4d21      	ldr	r5, [pc, #132]	; (3d74 <xTaskResumeAll+0xc8>)
    3cf0:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    3cf2:	2c00      	cmp	r4, #0
    3cf4:	d00a      	beq.n	3d0c <xTaskResumeAll+0x60>
								xYieldPending = pdTRUE;
    3cf6:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
    3cf8:	4b1f      	ldr	r3, [pc, #124]	; (3d78 <xTaskResumeAll+0xcc>)
    3cfa:	4798      	blx	r3
    3cfc:	2800      	cmp	r0, #0
    3cfe:	d001      	beq.n	3d04 <xTaskResumeAll+0x58>
								xYieldPending = pdTRUE;
    3d00:	4b1e      	ldr	r3, [pc, #120]	; (3d7c <xTaskResumeAll+0xd0>)
    3d02:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
    3d04:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    3d06:	2c00      	cmp	r4, #0
    3d08:	d1f6      	bne.n	3cf8 <xTaskResumeAll+0x4c>
						uxPendedTicks = 0;
    3d0a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
    3d0c:	4b1b      	ldr	r3, [pc, #108]	; (3d7c <xTaskResumeAll+0xd0>)
    3d0e:	681b      	ldr	r3, [r3, #0]
    3d10:	2b00      	cmp	r3, #0
    3d12:	d0da      	beq.n	3cca <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
    3d14:	4b1a      	ldr	r3, [pc, #104]	; (3d80 <xTaskResumeAll+0xd4>)
    3d16:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    3d18:	2401      	movs	r4, #1
    3d1a:	e7d7      	b.n	3ccc <xTaskResumeAll+0x20>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3d1c:	68db      	ldr	r3, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3d1e:	4e19      	ldr	r6, [pc, #100]	; (3d84 <xTaskResumeAll+0xd8>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3d20:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3d22:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3d24:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3d26:	3018      	adds	r0, #24
    3d28:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3d2a:	0028      	movs	r0, r5
    3d2c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
    3d2e:	4b16      	ldr	r3, [pc, #88]	; (3d88 <xTaskResumeAll+0xdc>)
    3d30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3d32:	681a      	ldr	r2, [r3, #0]
    3d34:	4290      	cmp	r0, r2
    3d36:	d900      	bls.n	3d3a <xTaskResumeAll+0x8e>
    3d38:	6018      	str	r0, [r3, #0]
    3d3a:	2314      	movs	r3, #20
    3d3c:	4358      	muls	r0, r3
    3d3e:	4b13      	ldr	r3, [pc, #76]	; (3d8c <xTaskResumeAll+0xe0>)
    3d40:	0029      	movs	r1, r5
    3d42:	1818      	adds	r0, r3, r0
    3d44:	4b12      	ldr	r3, [pc, #72]	; (3d90 <xTaskResumeAll+0xe4>)
    3d46:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3d48:	4b12      	ldr	r3, [pc, #72]	; (3d94 <xTaskResumeAll+0xe8>)
    3d4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3d4c:	681b      	ldr	r3, [r3, #0]
    3d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d50:	429a      	cmp	r2, r3
    3d52:	d3c4      	bcc.n	3cde <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
    3d54:	4b09      	ldr	r3, [pc, #36]	; (3d7c <xTaskResumeAll+0xd0>)
    3d56:	601f      	str	r7, [r3, #0]
    3d58:	e7c1      	b.n	3cde <xTaskResumeAll+0x32>
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	20000430 	.word	0x20000430
    3d60:	00002f51 	.word	0x00002f51
    3d64:	00002f69 	.word	0x00002f69
    3d68:	20000424 	.word	0x20000424
    3d6c:	20000470 	.word	0x20000470
    3d70:	0000386d 	.word	0x0000386d
    3d74:	2000042c 	.word	0x2000042c
    3d78:	00003ba5 	.word	0x00003ba5
    3d7c:	200004b4 	.word	0x200004b4
    3d80:	00002f39 	.word	0x00002f39
    3d84:	000030bf 	.word	0x000030bf
    3d88:	20000438 	.word	0x20000438
    3d8c:	200003c0 	.word	0x200003c0
    3d90:	00003079 	.word	0x00003079
    3d94:	200003b4 	.word	0x200003b4

00003d98 <vTaskDelay>:
	{
    3d98:	b570      	push	{r4, r5, r6, lr}
    3d9a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    3d9c:	d102      	bne.n	3da4 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
    3d9e:	4b0a      	ldr	r3, [pc, #40]	; (3dc8 <vTaskDelay+0x30>)
    3da0:	4798      	blx	r3
	}
    3da2:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
    3da4:	4b09      	ldr	r3, [pc, #36]	; (3dcc <vTaskDelay+0x34>)
    3da6:	681d      	ldr	r5, [r3, #0]
    3da8:	2d00      	cmp	r5, #0
    3daa:	d001      	beq.n	3db0 <vTaskDelay+0x18>
    3dac:	b672      	cpsid	i
    3dae:	e7fe      	b.n	3dae <vTaskDelay+0x16>
			vTaskSuspendAll();
    3db0:	4b07      	ldr	r3, [pc, #28]	; (3dd0 <vTaskDelay+0x38>)
    3db2:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    3db4:	4b07      	ldr	r3, [pc, #28]	; (3dd4 <vTaskDelay+0x3c>)
    3db6:	0029      	movs	r1, r5
    3db8:	0020      	movs	r0, r4
    3dba:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    3dbc:	4b06      	ldr	r3, [pc, #24]	; (3dd8 <vTaskDelay+0x40>)
    3dbe:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    3dc0:	2800      	cmp	r0, #0
    3dc2:	d1ee      	bne.n	3da2 <vTaskDelay+0xa>
    3dc4:	e7eb      	b.n	3d9e <vTaskDelay+0x6>
    3dc6:	46c0      	nop			; (mov r8, r8)
    3dc8:	00002f39 	.word	0x00002f39
    3dcc:	20000430 	.word	0x20000430
    3dd0:	00003b89 	.word	0x00003b89
    3dd4:	00003895 	.word	0x00003895
    3dd8:	00003cad 	.word	0x00003cad

00003ddc <vTaskSwitchContext>:
{
    3ddc:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3dde:	4b15      	ldr	r3, [pc, #84]	; (3e34 <vTaskSwitchContext+0x58>)
    3de0:	681a      	ldr	r2, [r3, #0]
    3de2:	4b15      	ldr	r3, [pc, #84]	; (3e38 <vTaskSwitchContext+0x5c>)
    3de4:	2a00      	cmp	r2, #0
    3de6:	d002      	beq.n	3dee <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
    3de8:	2201      	movs	r2, #1
    3dea:	601a      	str	r2, [r3, #0]
}
    3dec:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3dee:	2514      	movs	r5, #20
    3df0:	4812      	ldr	r0, [pc, #72]	; (3e3c <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
    3df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3df4:	6802      	ldr	r2, [r0, #0]
    3df6:	4912      	ldr	r1, [pc, #72]	; (3e40 <vTaskSwitchContext+0x64>)
    3df8:	002b      	movs	r3, r5
    3dfa:	4353      	muls	r3, r2
    3dfc:	585c      	ldr	r4, [r3, r1]
    3dfe:	2c00      	cmp	r4, #0
    3e00:	d012      	beq.n	3e28 <vTaskSwitchContext+0x4c>
    3e02:	18cc      	adds	r4, r1, r3
    3e04:	6865      	ldr	r5, [r4, #4]
    3e06:	3308      	adds	r3, #8
    3e08:	686d      	ldr	r5, [r5, #4]
    3e0a:	18cb      	adds	r3, r1, r3
    3e0c:	6065      	str	r5, [r4, #4]
    3e0e:	429d      	cmp	r5, r3
    3e10:	d101      	bne.n	3e16 <vTaskSwitchContext+0x3a>
    3e12:	686b      	ldr	r3, [r5, #4]
    3e14:	6063      	str	r3, [r4, #4]
    3e16:	2314      	movs	r3, #20
    3e18:	4353      	muls	r3, r2
    3e1a:	18c9      	adds	r1, r1, r3
    3e1c:	684b      	ldr	r3, [r1, #4]
    3e1e:	68d9      	ldr	r1, [r3, #12]
    3e20:	4b08      	ldr	r3, [pc, #32]	; (3e44 <vTaskSwitchContext+0x68>)
    3e22:	6019      	str	r1, [r3, #0]
    3e24:	6002      	str	r2, [r0, #0]
}
    3e26:	e7e1      	b.n	3dec <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3e28:	2a00      	cmp	r2, #0
    3e2a:	d101      	bne.n	3e30 <vTaskSwitchContext+0x54>
    3e2c:	b672      	cpsid	i
    3e2e:	e7fe      	b.n	3e2e <vTaskSwitchContext+0x52>
    3e30:	3a01      	subs	r2, #1
    3e32:	e7e1      	b.n	3df8 <vTaskSwitchContext+0x1c>
    3e34:	20000430 	.word	0x20000430
    3e38:	200004b4 	.word	0x200004b4
    3e3c:	20000438 	.word	0x20000438
    3e40:	200003c0 	.word	0x200003c0
    3e44:	200003b4 	.word	0x200003b4

00003e48 <vTaskPlaceOnEventList>:
{
    3e48:	b510      	push	{r4, lr}
    3e4a:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    3e4c:	2800      	cmp	r0, #0
    3e4e:	d101      	bne.n	3e54 <vTaskPlaceOnEventList+0xc>
    3e50:	b672      	cpsid	i
    3e52:	e7fe      	b.n	3e52 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3e54:	4b04      	ldr	r3, [pc, #16]	; (3e68 <vTaskPlaceOnEventList+0x20>)
    3e56:	6819      	ldr	r1, [r3, #0]
    3e58:	4b04      	ldr	r3, [pc, #16]	; (3e6c <vTaskPlaceOnEventList+0x24>)
    3e5a:	3118      	adds	r1, #24
    3e5c:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3e5e:	2101      	movs	r1, #1
    3e60:	0020      	movs	r0, r4
    3e62:	4b03      	ldr	r3, [pc, #12]	; (3e70 <vTaskPlaceOnEventList+0x28>)
    3e64:	4798      	blx	r3
}
    3e66:	bd10      	pop	{r4, pc}
    3e68:	200003b4 	.word	0x200003b4
    3e6c:	00003091 	.word	0x00003091
    3e70:	00003895 	.word	0x00003895

00003e74 <vTaskPlaceOnEventListRestricted>:
	{
    3e74:	b570      	push	{r4, r5, r6, lr}
    3e76:	000c      	movs	r4, r1
    3e78:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    3e7a:	2800      	cmp	r0, #0
    3e7c:	d101      	bne.n	3e82 <vTaskPlaceOnEventListRestricted+0xe>
    3e7e:	b672      	cpsid	i
    3e80:	e7fe      	b.n	3e80 <vTaskPlaceOnEventListRestricted+0xc>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3e82:	4b07      	ldr	r3, [pc, #28]	; (3ea0 <vTaskPlaceOnEventListRestricted+0x2c>)
    3e84:	6819      	ldr	r1, [r3, #0]
    3e86:	4b07      	ldr	r3, [pc, #28]	; (3ea4 <vTaskPlaceOnEventListRestricted+0x30>)
    3e88:	3118      	adds	r1, #24
    3e8a:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    3e8c:	2d00      	cmp	r5, #0
    3e8e:	d001      	beq.n	3e94 <vTaskPlaceOnEventListRestricted+0x20>
			xTicksToWait = portMAX_DELAY;
    3e90:	2401      	movs	r4, #1
    3e92:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    3e94:	0029      	movs	r1, r5
    3e96:	0020      	movs	r0, r4
    3e98:	4b03      	ldr	r3, [pc, #12]	; (3ea8 <vTaskPlaceOnEventListRestricted+0x34>)
    3e9a:	4798      	blx	r3
	}
    3e9c:	bd70      	pop	{r4, r5, r6, pc}
    3e9e:	46c0      	nop			; (mov r8, r8)
    3ea0:	200003b4 	.word	0x200003b4
    3ea4:	00003079 	.word	0x00003079
    3ea8:	00003895 	.word	0x00003895

00003eac <xTaskRemoveFromEventList>:
{
    3eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3eae:	68c3      	ldr	r3, [r0, #12]
    3eb0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    3eb2:	2c00      	cmp	r4, #0
    3eb4:	d101      	bne.n	3eba <xTaskRemoveFromEventList+0xe>
    3eb6:	b672      	cpsid	i
    3eb8:	e7fe      	b.n	3eb8 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3eba:	0026      	movs	r6, r4
    3ebc:	3618      	adds	r6, #24
    3ebe:	0030      	movs	r0, r6
    3ec0:	4f11      	ldr	r7, [pc, #68]	; (3f08 <xTaskRemoveFromEventList+0x5c>)
    3ec2:	47b8      	blx	r7
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3ec4:	4b11      	ldr	r3, [pc, #68]	; (3f0c <xTaskRemoveFromEventList+0x60>)
    3ec6:	4d12      	ldr	r5, [pc, #72]	; (3f10 <xTaskRemoveFromEventList+0x64>)
    3ec8:	681b      	ldr	r3, [r3, #0]
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d119      	bne.n	3f02 <xTaskRemoveFromEventList+0x56>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    3ece:	1d26      	adds	r6, r4, #4
    3ed0:	0030      	movs	r0, r6
    3ed2:	47b8      	blx	r7
		prvAddTaskToReadyList( pxUnblockedTCB );
    3ed4:	4a0f      	ldr	r2, [pc, #60]	; (3f14 <xTaskRemoveFromEventList+0x68>)
    3ed6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3ed8:	6811      	ldr	r1, [r2, #0]
    3eda:	428b      	cmp	r3, r1
    3edc:	d900      	bls.n	3ee0 <xTaskRemoveFromEventList+0x34>
    3ede:	6013      	str	r3, [r2, #0]
    3ee0:	2014      	movs	r0, #20
    3ee2:	0031      	movs	r1, r6
    3ee4:	4343      	muls	r3, r0
    3ee6:	480c      	ldr	r0, [pc, #48]	; (3f18 <xTaskRemoveFromEventList+0x6c>)
    3ee8:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3eea:	47a8      	blx	r5
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3eec:	4b0b      	ldr	r3, [pc, #44]	; (3f1c <xTaskRemoveFromEventList+0x70>)
    3eee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3ef0:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
    3ef2:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ef6:	429a      	cmp	r2, r3
    3ef8:	d902      	bls.n	3f00 <xTaskRemoveFromEventList+0x54>
		xYieldPending = pdTRUE;
    3efa:	4b09      	ldr	r3, [pc, #36]	; (3f20 <xTaskRemoveFromEventList+0x74>)
    3efc:	3001      	adds	r0, #1
    3efe:	6018      	str	r0, [r3, #0]
}
    3f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3f02:	0031      	movs	r1, r6
    3f04:	4807      	ldr	r0, [pc, #28]	; (3f24 <xTaskRemoveFromEventList+0x78>)
    3f06:	e7f0      	b.n	3eea <xTaskRemoveFromEventList+0x3e>
    3f08:	000030bf 	.word	0x000030bf
    3f0c:	20000430 	.word	0x20000430
    3f10:	00003079 	.word	0x00003079
    3f14:	20000438 	.word	0x20000438
    3f18:	200003c0 	.word	0x200003c0
    3f1c:	200003b4 	.word	0x200003b4
    3f20:	200004b4 	.word	0x200004b4
    3f24:	20000470 	.word	0x20000470

00003f28 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3f28:	4b03      	ldr	r3, [pc, #12]	; (3f38 <vTaskInternalSetTimeOutState+0x10>)
    3f2a:	681b      	ldr	r3, [r3, #0]
    3f2c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    3f2e:	4b03      	ldr	r3, [pc, #12]	; (3f3c <vTaskInternalSetTimeOutState+0x14>)
    3f30:	681b      	ldr	r3, [r3, #0]
    3f32:	6043      	str	r3, [r0, #4]
}
    3f34:	4770      	bx	lr
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	2000046c 	.word	0x2000046c
    3f3c:	200004b0 	.word	0x200004b0

00003f40 <xTaskCheckForTimeOut>:
{
    3f40:	b570      	push	{r4, r5, r6, lr}
    3f42:	0005      	movs	r5, r0
    3f44:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
    3f46:	2800      	cmp	r0, #0
    3f48:	d101      	bne.n	3f4e <xTaskCheckForTimeOut+0xe>
    3f4a:	b672      	cpsid	i
    3f4c:	e7fe      	b.n	3f4c <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    3f4e:	2900      	cmp	r1, #0
    3f50:	d101      	bne.n	3f56 <xTaskCheckForTimeOut+0x16>
    3f52:	b672      	cpsid	i
    3f54:	e7fe      	b.n	3f54 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
    3f56:	4b11      	ldr	r3, [pc, #68]	; (3f9c <xTaskCheckForTimeOut+0x5c>)
    3f58:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    3f5a:	4b11      	ldr	r3, [pc, #68]	; (3fa0 <xTaskCheckForTimeOut+0x60>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3f5c:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
    3f5e:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
    3f60:	6823      	ldr	r3, [r4, #0]
				xReturn = pdFALSE;
    3f62:	2600      	movs	r6, #0
			if( *pxTicksToWait == portMAX_DELAY )
    3f64:	1c58      	adds	r0, r3, #1
    3f66:	d010      	beq.n	3f8a <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3f68:	480e      	ldr	r0, [pc, #56]	; (3fa4 <xTaskCheckForTimeOut+0x64>)
    3f6a:	682e      	ldr	r6, [r5, #0]
    3f6c:	6800      	ldr	r0, [r0, #0]
    3f6e:	4286      	cmp	r6, r0
    3f70:	d002      	beq.n	3f78 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
    3f72:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3f74:	428a      	cmp	r2, r1
    3f76:	d208      	bcs.n	3f8a <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3f78:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    3f7a:	429a      	cmp	r2, r3
    3f7c:	d209      	bcs.n	3f92 <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= xElapsedTime;
    3f7e:	1a9b      	subs	r3, r3, r2
    3f80:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    3f82:	0028      	movs	r0, r5
    3f84:	4b08      	ldr	r3, [pc, #32]	; (3fa8 <xTaskCheckForTimeOut+0x68>)
    3f86:	4798      	blx	r3
			xReturn = pdFALSE;
    3f88:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
    3f8a:	4b08      	ldr	r3, [pc, #32]	; (3fac <xTaskCheckForTimeOut+0x6c>)
    3f8c:	4798      	blx	r3
}
    3f8e:	0030      	movs	r0, r6
    3f90:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
    3f92:	2300      	movs	r3, #0
			xReturn = pdTRUE;
    3f94:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
    3f96:	6023      	str	r3, [r4, #0]
    3f98:	e7f7      	b.n	3f8a <xTaskCheckForTimeOut+0x4a>
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	00002f51 	.word	0x00002f51
    3fa0:	200004b0 	.word	0x200004b0
    3fa4:	2000046c 	.word	0x2000046c
    3fa8:	00003f29 	.word	0x00003f29
    3fac:	00002f69 	.word	0x00002f69

00003fb0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    3fb0:	2201      	movs	r2, #1
    3fb2:	4b01      	ldr	r3, [pc, #4]	; (3fb8 <vTaskMissedYield+0x8>)
    3fb4:	601a      	str	r2, [r3, #0]
}
    3fb6:	4770      	bx	lr
    3fb8:	200004b4 	.word	0x200004b4

00003fbc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    3fbc:	4b05      	ldr	r3, [pc, #20]	; (3fd4 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
    3fbe:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    3fc0:	681b      	ldr	r3, [r3, #0]
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	d004      	beq.n	3fd0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3fc6:	4b04      	ldr	r3, [pc, #16]	; (3fd8 <xTaskGetSchedulerState+0x1c>)
    3fc8:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    3fca:	4243      	negs	r3, r0
    3fcc:	4158      	adcs	r0, r3
    3fce:	0040      	lsls	r0, r0, #1
	}
    3fd0:	4770      	bx	lr
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	20000484 	.word	0x20000484
    3fd8:	20000430 	.word	0x20000430

00003fdc <xTaskPriorityInherit>:
	{
    3fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fde:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    3fe0:	d02e      	beq.n	4040 <xTaskPriorityInherit+0x64>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    3fe2:	4d1a      	ldr	r5, [pc, #104]	; (404c <xTaskPriorityInherit+0x70>)
    3fe4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    3fe6:	682b      	ldr	r3, [r5, #0]
    3fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3fea:	4299      	cmp	r1, r3
    3fec:	d222      	bcs.n	4034 <xTaskPriorityInherit+0x58>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3fee:	6983      	ldr	r3, [r0, #24]
    3ff0:	2b00      	cmp	r3, #0
    3ff2:	db04      	blt.n	3ffe <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3ff4:	2205      	movs	r2, #5
    3ff6:	682b      	ldr	r3, [r5, #0]
    3ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ffa:	1ad2      	subs	r2, r2, r3
    3ffc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    3ffe:	2314      	movs	r3, #20
    4000:	434b      	muls	r3, r1
    4002:	4f13      	ldr	r7, [pc, #76]	; (4050 <xTaskPriorityInherit+0x74>)
    4004:	6962      	ldr	r2, [r4, #20]
    4006:	18fb      	adds	r3, r7, r3
    4008:	429a      	cmp	r2, r3
    400a:	d11a      	bne.n	4042 <xTaskPriorityInherit+0x66>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    400c:	1d26      	adds	r6, r4, #4
    400e:	4b11      	ldr	r3, [pc, #68]	; (4054 <xTaskPriorityInherit+0x78>)
    4010:	0030      	movs	r0, r6
    4012:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4014:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
    4016:	4a10      	ldr	r2, [pc, #64]	; (4058 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    401a:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    401c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    401e:	428b      	cmp	r3, r1
    4020:	d900      	bls.n	4024 <xTaskPriorityInherit+0x48>
    4022:	6013      	str	r3, [r2, #0]
    4024:	2014      	movs	r0, #20
    4026:	4358      	muls	r0, r3
    4028:	0031      	movs	r1, r6
    402a:	1838      	adds	r0, r7, r0
    402c:	4b0b      	ldr	r3, [pc, #44]	; (405c <xTaskPriorityInherit+0x80>)
    402e:	4798      	blx	r3
				xReturn = pdTRUE;
    4030:	2001      	movs	r0, #1
    4032:	e005      	b.n	4040 <xTaskPriorityInherit+0x64>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    4034:	682b      	ldr	r3, [r5, #0]
    4036:	6c00      	ldr	r0, [r0, #64]	; 0x40
    4038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    403a:	4298      	cmp	r0, r3
    403c:	4180      	sbcs	r0, r0
    403e:	4240      	negs	r0, r0
	}
    4040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4042:	682b      	ldr	r3, [r5, #0]
    4044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4046:	62e3      	str	r3, [r4, #44]	; 0x2c
    4048:	e7f2      	b.n	4030 <xTaskPriorityInherit+0x54>
    404a:	46c0      	nop			; (mov r8, r8)
    404c:	200003b4 	.word	0x200003b4
    4050:	200003c0 	.word	0x200003c0
    4054:	000030bf 	.word	0x000030bf
    4058:	20000438 	.word	0x20000438
    405c:	00003079 	.word	0x00003079

00004060 <xTaskPriorityDisinherit>:
	{
    4060:	b570      	push	{r4, r5, r6, lr}
    4062:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    4064:	d101      	bne.n	406a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
    4066:	2000      	movs	r0, #0
	}
    4068:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
    406a:	4b15      	ldr	r3, [pc, #84]	; (40c0 <xTaskPriorityDisinherit+0x60>)
    406c:	681b      	ldr	r3, [r3, #0]
    406e:	4298      	cmp	r0, r3
    4070:	d001      	beq.n	4076 <xTaskPriorityDisinherit+0x16>
    4072:	b672      	cpsid	i
    4074:	e7fe      	b.n	4074 <xTaskPriorityDisinherit+0x14>
			configASSERT( pxTCB->uxMutexesHeld );
    4076:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4078:	2b00      	cmp	r3, #0
    407a:	d101      	bne.n	4080 <xTaskPriorityDisinherit+0x20>
    407c:	b672      	cpsid	i
    407e:	e7fe      	b.n	407e <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4080:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4082:	6c01      	ldr	r1, [r0, #64]	; 0x40
			( pxTCB->uxMutexesHeld )--;
    4084:	3b01      	subs	r3, #1
    4086:	6443      	str	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4088:	428a      	cmp	r2, r1
    408a:	d0ec      	beq.n	4066 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    408c:	2b00      	cmp	r3, #0
    408e:	d1ea      	bne.n	4066 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4090:	1d05      	adds	r5, r0, #4
    4092:	4b0c      	ldr	r3, [pc, #48]	; (40c4 <xTaskPriorityDisinherit+0x64>)
    4094:	0028      	movs	r0, r5
    4096:	4798      	blx	r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4098:	2305      	movs	r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    409a:	6c20      	ldr	r0, [r4, #64]	; 0x40
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    409c:	1a1b      	subs	r3, r3, r0
    409e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    40a0:	4b09      	ldr	r3, [pc, #36]	; (40c8 <xTaskPriorityDisinherit+0x68>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    40a2:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    40a4:	681a      	ldr	r2, [r3, #0]
    40a6:	4290      	cmp	r0, r2
    40a8:	d900      	bls.n	40ac <xTaskPriorityDisinherit+0x4c>
    40aa:	6018      	str	r0, [r3, #0]
    40ac:	2314      	movs	r3, #20
    40ae:	4343      	muls	r3, r0
    40b0:	4806      	ldr	r0, [pc, #24]	; (40cc <xTaskPriorityDisinherit+0x6c>)
    40b2:	0029      	movs	r1, r5
    40b4:	18c0      	adds	r0, r0, r3
    40b6:	4b06      	ldr	r3, [pc, #24]	; (40d0 <xTaskPriorityDisinherit+0x70>)
    40b8:	4798      	blx	r3
					xReturn = pdTRUE;
    40ba:	2001      	movs	r0, #1
		return xReturn;
    40bc:	e7d4      	b.n	4068 <xTaskPriorityDisinherit+0x8>
    40be:	46c0      	nop			; (mov r8, r8)
    40c0:	200003b4 	.word	0x200003b4
    40c4:	000030bf 	.word	0x000030bf
    40c8:	20000438 	.word	0x20000438
    40cc:	200003c0 	.word	0x200003c0
    40d0:	00003079 	.word	0x00003079

000040d4 <vTaskPriorityDisinheritAfterTimeout>:
	{
    40d4:	b570      	push	{r4, r5, r6, lr}
    40d6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    40d8:	d031      	beq.n	413e <vTaskPriorityDisinheritAfterTimeout+0x6a>
			configASSERT( pxTCB->uxMutexesHeld );
    40da:	6c43      	ldr	r3, [r0, #68]	; 0x44
    40dc:	2b00      	cmp	r3, #0
    40de:	d101      	bne.n	40e4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    40e0:	b672      	cpsid	i
    40e2:	e7fe      	b.n	40e2 <vTaskPriorityDisinheritAfterTimeout+0xe>
    40e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    40e6:	428a      	cmp	r2, r1
    40e8:	d200      	bcs.n	40ec <vTaskPriorityDisinheritAfterTimeout+0x18>
    40ea:	000a      	movs	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    40ec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    40ee:	4290      	cmp	r0, r2
    40f0:	d025      	beq.n	413e <vTaskPriorityDisinheritAfterTimeout+0x6a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    40f2:	2b01      	cmp	r3, #1
    40f4:	d123      	bne.n	413e <vTaskPriorityDisinheritAfterTimeout+0x6a>
					configASSERT( pxTCB != pxCurrentTCB );
    40f6:	4b12      	ldr	r3, [pc, #72]	; (4140 <vTaskPriorityDisinheritAfterTimeout+0x6c>)
    40f8:	681b      	ldr	r3, [r3, #0]
    40fa:	429c      	cmp	r4, r3
    40fc:	d101      	bne.n	4102 <vTaskPriorityDisinheritAfterTimeout+0x2e>
    40fe:	b672      	cpsid	i
    4100:	e7fe      	b.n	4100 <vTaskPriorityDisinheritAfterTimeout+0x2c>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4102:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
    4104:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4106:	2b00      	cmp	r3, #0
    4108:	db02      	blt.n	4110 <vTaskPriorityDisinheritAfterTimeout+0x3c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    410a:	2105      	movs	r1, #5
    410c:	1a8a      	subs	r2, r1, r2
    410e:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    4110:	2314      	movs	r3, #20
    4112:	4343      	muls	r3, r0
    4114:	4e0b      	ldr	r6, [pc, #44]	; (4144 <vTaskPriorityDisinheritAfterTimeout+0x70>)
    4116:	6962      	ldr	r2, [r4, #20]
    4118:	18f3      	adds	r3, r6, r3
    411a:	429a      	cmp	r2, r3
    411c:	d10f      	bne.n	413e <vTaskPriorityDisinheritAfterTimeout+0x6a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    411e:	1d25      	adds	r5, r4, #4
    4120:	4b09      	ldr	r3, [pc, #36]	; (4148 <vTaskPriorityDisinheritAfterTimeout+0x74>)
    4122:	0028      	movs	r0, r5
    4124:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    4126:	4a09      	ldr	r2, [pc, #36]	; (414c <vTaskPriorityDisinheritAfterTimeout+0x78>)
    4128:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    412a:	6811      	ldr	r1, [r2, #0]
    412c:	428b      	cmp	r3, r1
    412e:	d900      	bls.n	4132 <vTaskPriorityDisinheritAfterTimeout+0x5e>
    4130:	6013      	str	r3, [r2, #0]
    4132:	2014      	movs	r0, #20
    4134:	4358      	muls	r0, r3
    4136:	0029      	movs	r1, r5
    4138:	1830      	adds	r0, r6, r0
    413a:	4b05      	ldr	r3, [pc, #20]	; (4150 <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    413c:	4798      	blx	r3
	}
    413e:	bd70      	pop	{r4, r5, r6, pc}
    4140:	200003b4 	.word	0x200003b4
    4144:	200003c0 	.word	0x200003c0
    4148:	000030bf 	.word	0x000030bf
    414c:	20000438 	.word	0x20000438
    4150:	00003079 	.word	0x00003079

00004154 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    4154:	4b04      	ldr	r3, [pc, #16]	; (4168 <pvTaskIncrementMutexHeldCount+0x14>)
    4156:	681a      	ldr	r2, [r3, #0]
    4158:	2a00      	cmp	r2, #0
    415a:	d003      	beq.n	4164 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
    415c:	6819      	ldr	r1, [r3, #0]
    415e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    4160:	3201      	adds	r2, #1
    4162:	644a      	str	r2, [r1, #68]	; 0x44
		return pxCurrentTCB;
    4164:	6818      	ldr	r0, [r3, #0]
	}
    4166:	4770      	bx	lr
    4168:	200003b4 	.word	0x200003b4

0000416c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    416c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    416e:	4b0d      	ldr	r3, [pc, #52]	; (41a4 <prvCheckForValidListAndQueue+0x38>)
    4170:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    4172:	4c0d      	ldr	r4, [pc, #52]	; (41a8 <prvCheckForValidListAndQueue+0x3c>)
    4174:	6823      	ldr	r3, [r4, #0]
    4176:	9301      	str	r3, [sp, #4]
    4178:	2b00      	cmp	r3, #0
    417a:	d110      	bne.n	419e <prvCheckForValidListAndQueue+0x32>
		{
			vListInitialise( &xActiveTimerList1 );
    417c:	4e0b      	ldr	r6, [pc, #44]	; (41ac <prvCheckForValidListAndQueue+0x40>)
    417e:	4f0c      	ldr	r7, [pc, #48]	; (41b0 <prvCheckForValidListAndQueue+0x44>)
    4180:	0030      	movs	r0, r6
    4182:	47b8      	blx	r7
			vListInitialise( &xActiveTimerList2 );
    4184:	4d0b      	ldr	r5, [pc, #44]	; (41b4 <prvCheckForValidListAndQueue+0x48>)
    4186:	0028      	movs	r0, r5
    4188:	47b8      	blx	r7
			pxCurrentTimerList = &xActiveTimerList1;
    418a:	4b0b      	ldr	r3, [pc, #44]	; (41b8 <prvCheckForValidListAndQueue+0x4c>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    418c:	9a01      	ldr	r2, [sp, #4]
			pxCurrentTimerList = &xActiveTimerList1;
    418e:	601e      	str	r6, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    4190:	4b0a      	ldr	r3, [pc, #40]	; (41bc <prvCheckForValidListAndQueue+0x50>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    4192:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
    4194:	601d      	str	r5, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    4196:	2005      	movs	r0, #5
    4198:	4b09      	ldr	r3, [pc, #36]	; (41c0 <prvCheckForValidListAndQueue+0x54>)
    419a:	4798      	blx	r3
    419c:	6020      	str	r0, [r4, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    419e:	4b09      	ldr	r3, [pc, #36]	; (41c4 <prvCheckForValidListAndQueue+0x58>)
    41a0:	4798      	blx	r3
}
    41a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    41a4:	00002f51 	.word	0x00002f51
    41a8:	200004ec 	.word	0x200004ec
    41ac:	200004c0 	.word	0x200004c0
    41b0:	0000305d 	.word	0x0000305d
    41b4:	200004d4 	.word	0x200004d4
    41b8:	200004b8 	.word	0x200004b8
    41bc:	200004bc 	.word	0x200004bc
    41c0:	0000330d 	.word	0x0000330d
    41c4:	00002f69 	.word	0x00002f69

000041c8 <prvInsertTimerInActiveList>:
{
    41c8:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    41ca:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    41cc:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
    41ce:	4291      	cmp	r1, r2
    41d0:	d80c      	bhi.n	41ec <prvInsertTimerInActiveList+0x24>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    41d2:	1ad2      	subs	r2, r2, r3
    41d4:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
    41d6:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    41d8:	429a      	cmp	r2, r3
    41da:	d205      	bcs.n	41e8 <prvInsertTimerInActiveList+0x20>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    41dc:	4b07      	ldr	r3, [pc, #28]	; (41fc <prvInsertTimerInActiveList+0x34>)
    41de:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    41e0:	6818      	ldr	r0, [r3, #0]
    41e2:	4b07      	ldr	r3, [pc, #28]	; (4200 <prvInsertTimerInActiveList+0x38>)
    41e4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    41e6:	2400      	movs	r4, #0
}
    41e8:	0020      	movs	r0, r4
    41ea:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    41ec:	429a      	cmp	r2, r3
    41ee:	d202      	bcs.n	41f6 <prvInsertTimerInActiveList+0x2e>
			xProcessTimerNow = pdTRUE;
    41f0:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    41f2:	4299      	cmp	r1, r3
    41f4:	d2f8      	bcs.n	41e8 <prvInsertTimerInActiveList+0x20>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    41f6:	1d01      	adds	r1, r0, #4
    41f8:	4b02      	ldr	r3, [pc, #8]	; (4204 <prvInsertTimerInActiveList+0x3c>)
    41fa:	e7f1      	b.n	41e0 <prvInsertTimerInActiveList+0x18>
    41fc:	200004bc 	.word	0x200004bc
    4200:	00003091 	.word	0x00003091
    4204:	200004b8 	.word	0x200004b8

00004208 <xTimerCreateTimerTask>:
	prvCheckForValidListAndQueue();
    4208:	4b0b      	ldr	r3, [pc, #44]	; (4238 <xTimerCreateTimerTask+0x30>)
{
    420a:	b513      	push	{r0, r1, r4, lr}
	prvCheckForValidListAndQueue();
    420c:	4798      	blx	r3
	if( xTimerQueue != NULL )
    420e:	4b0b      	ldr	r3, [pc, #44]	; (423c <xTimerCreateTimerTask+0x34>)
    4210:	681b      	ldr	r3, [r3, #0]
    4212:	2b00      	cmp	r3, #0
    4214:	d101      	bne.n	421a <xTimerCreateTimerTask+0x12>
	configASSERT( xReturn );
    4216:	b672      	cpsid	i
    4218:	e7fe      	b.n	4218 <xTimerCreateTimerTask+0x10>
			xReturn = xTaskCreate(	prvTimerTask,
    421a:	4b09      	ldr	r3, [pc, #36]	; (4240 <xTimerCreateTimerTask+0x38>)
    421c:	2282      	movs	r2, #130	; 0x82
    421e:	9301      	str	r3, [sp, #4]
    4220:	2304      	movs	r3, #4
    4222:	0052      	lsls	r2, r2, #1
    4224:	9300      	str	r3, [sp, #0]
    4226:	4907      	ldr	r1, [pc, #28]	; (4244 <xTimerCreateTimerTask+0x3c>)
    4228:	2300      	movs	r3, #0
    422a:	4807      	ldr	r0, [pc, #28]	; (4248 <xTimerCreateTimerTask+0x40>)
    422c:	4c07      	ldr	r4, [pc, #28]	; (424c <xTimerCreateTimerTask+0x44>)
    422e:	47a0      	blx	r4
	configASSERT( xReturn );
    4230:	2800      	cmp	r0, #0
    4232:	d0f0      	beq.n	4216 <xTimerCreateTimerTask+0xe>
}
    4234:	bd16      	pop	{r1, r2, r4, pc}
    4236:	46c0      	nop			; (mov r8, r8)
    4238:	0000416d 	.word	0x0000416d
    423c:	200004ec 	.word	0x200004ec
    4240:	200004f0 	.word	0x200004f0
    4244:	0000a379 	.word	0x0000a379
    4248:	0000435d 	.word	0x0000435d
    424c:	00003979 	.word	0x00003979

00004250 <xTimerCreate>:
	{
    4250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4252:	0007      	movs	r7, r0
    4254:	9301      	str	r3, [sp, #4]
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    4256:	2028      	movs	r0, #40	; 0x28
    4258:	4b0b      	ldr	r3, [pc, #44]	; (4288 <xTimerCreate+0x38>)
	{
    425a:	000d      	movs	r5, r1
    425c:	0016      	movs	r6, r2
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    425e:	4798      	blx	r3
    4260:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
    4262:	d00f      	beq.n	4284 <xTimerCreate+0x34>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    4264:	2d00      	cmp	r5, #0
    4266:	d101      	bne.n	426c <xTimerCreate+0x1c>
    4268:	b672      	cpsid	i
    426a:	e7fe      	b.n	426a <xTimerCreate+0x1a>
		prvCheckForValidListAndQueue();
    426c:	4b07      	ldr	r3, [pc, #28]	; (428c <xTimerCreate+0x3c>)
    426e:	4798      	blx	r3
		pxNewTimer->pvTimerID = pvTimerID;
    4270:	9b01      	ldr	r3, [sp, #4]
		pxNewTimer->pcTimerName = pcTimerName;
    4272:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
    4274:	6223      	str	r3, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    4276:	9b08      	ldr	r3, [sp, #32]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    4278:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    427a:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
    427c:	61e6      	str	r6, [r4, #28]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    427e:	1d20      	adds	r0, r4, #4
    4280:	4b03      	ldr	r3, [pc, #12]	; (4290 <xTimerCreate+0x40>)
    4282:	4798      	blx	r3
	}
    4284:	0020      	movs	r0, r4
    4286:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4288:	00003015 	.word	0x00003015
    428c:	0000416d 	.word	0x0000416d
    4290:	00003073 	.word	0x00003073

00004294 <xTimerGenericCommand>:
{
    4294:	b5f0      	push	{r4, r5, r6, r7, lr}
    4296:	0017      	movs	r7, r2
    4298:	b085      	sub	sp, #20
    429a:	0006      	movs	r6, r0
    429c:	001a      	movs	r2, r3
	configASSERT( xTimer );
    429e:	2800      	cmp	r0, #0
    42a0:	d101      	bne.n	42a6 <xTimerGenericCommand+0x12>
    42a2:	b672      	cpsid	i
    42a4:	e7fe      	b.n	42a4 <xTimerGenericCommand+0x10>
	if( xTimerQueue != NULL )
    42a6:	4d0d      	ldr	r5, [pc, #52]	; (42dc <xTimerGenericCommand+0x48>)
    42a8:	682c      	ldr	r4, [r5, #0]
BaseType_t xReturn = pdFAIL;
    42aa:	1e20      	subs	r0, r4, #0
	if( xTimerQueue != NULL )
    42ac:	d00f      	beq.n	42ce <xTimerGenericCommand+0x3a>
		xMessage.xMessageID = xCommandID;
    42ae:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    42b0:	9701      	str	r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    42b2:	9602      	str	r6, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    42b4:	2905      	cmp	r1, #5
    42b6:	dc0c      	bgt.n	42d2 <xTimerGenericCommand+0x3e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    42b8:	4b09      	ldr	r3, [pc, #36]	; (42e0 <xTimerGenericCommand+0x4c>)
    42ba:	4798      	blx	r3
    42bc:	4c09      	ldr	r4, [pc, #36]	; (42e4 <xTimerGenericCommand+0x50>)
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    42be:	2300      	movs	r3, #0
    42c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    42c2:	2802      	cmp	r0, #2
    42c4:	d000      	beq.n	42c8 <xTimerGenericCommand+0x34>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    42c6:	001a      	movs	r2, r3
    42c8:	4669      	mov	r1, sp
    42ca:	6828      	ldr	r0, [r5, #0]
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    42cc:	47a0      	blx	r4
}
    42ce:	b005      	add	sp, #20
    42d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    42d2:	0020      	movs	r0, r4
    42d4:	2300      	movs	r3, #0
    42d6:	4669      	mov	r1, sp
    42d8:	4c03      	ldr	r4, [pc, #12]	; (42e8 <xTimerGenericCommand+0x54>)
    42da:	e7f7      	b.n	42cc <xTimerGenericCommand+0x38>
    42dc:	200004ec 	.word	0x200004ec
    42e0:	00003fbd 	.word	0x00003fbd
    42e4:	00003355 	.word	0x00003355
    42e8:	000034b1 	.word	0x000034b1

000042ec <prvSwitchTimerLists>:
{
    42ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    42ee:	4d16      	ldr	r5, [pc, #88]	; (4348 <prvSwitchTimerLists+0x5c>)
    42f0:	682b      	ldr	r3, [r5, #0]
    42f2:	681a      	ldr	r2, [r3, #0]
    42f4:	2a00      	cmp	r2, #0
    42f6:	d104      	bne.n	4302 <prvSwitchTimerLists+0x16>
	pxCurrentTimerList = pxOverflowTimerList;
    42f8:	4a14      	ldr	r2, [pc, #80]	; (434c <prvSwitchTimerLists+0x60>)
    42fa:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    42fc:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
    42fe:	6029      	str	r1, [r5, #0]
}
    4300:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4302:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4304:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4306:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4308:	1d27      	adds	r7, r4, #4
    430a:	4b11      	ldr	r3, [pc, #68]	; (4350 <prvSwitchTimerLists+0x64>)
    430c:	0038      	movs	r0, r7
    430e:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4310:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4312:	0020      	movs	r0, r4
    4314:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4316:	69e3      	ldr	r3, [r4, #28]
    4318:	2b01      	cmp	r3, #1
    431a:	d1e8      	bne.n	42ee <prvSwitchTimerLists+0x2>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    431c:	69a3      	ldr	r3, [r4, #24]
    431e:	18f3      	adds	r3, r6, r3
			if( xReloadTime > xNextExpireTime )
    4320:	429e      	cmp	r6, r3
    4322:	d206      	bcs.n	4332 <prvSwitchTimerLists+0x46>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    4324:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4326:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4328:	0039      	movs	r1, r7
    432a:	6828      	ldr	r0, [r5, #0]
    432c:	4b09      	ldr	r3, [pc, #36]	; (4354 <prvSwitchTimerLists+0x68>)
    432e:	4798      	blx	r3
    4330:	e7dd      	b.n	42ee <prvSwitchTimerLists+0x2>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4332:	2100      	movs	r1, #0
    4334:	0020      	movs	r0, r4
    4336:	9100      	str	r1, [sp, #0]
    4338:	000b      	movs	r3, r1
    433a:	0032      	movs	r2, r6
    433c:	4c06      	ldr	r4, [pc, #24]	; (4358 <prvSwitchTimerLists+0x6c>)
    433e:	47a0      	blx	r4
				configASSERT( xResult );
    4340:	2800      	cmp	r0, #0
    4342:	d1d4      	bne.n	42ee <prvSwitchTimerLists+0x2>
    4344:	b672      	cpsid	i
    4346:	e7fe      	b.n	4346 <prvSwitchTimerLists+0x5a>
    4348:	200004b8 	.word	0x200004b8
    434c:	200004bc 	.word	0x200004bc
    4350:	000030bf 	.word	0x000030bf
    4354:	00003091 	.word	0x00003091
    4358:	00004295 	.word	0x00004295

0000435c <prvTimerTask>:
{
    435c:	b5f0      	push	{r4, r5, r6, r7, lr}
    435e:	b089      	sub	sp, #36	; 0x24
		xNextExpireTime = ( TickType_t ) 0U;
    4360:	2700      	movs	r7, #0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4362:	4b5b      	ldr	r3, [pc, #364]	; (44d0 <prvTimerTask+0x174>)
    4364:	681b      	ldr	r3, [r3, #0]
    4366:	681a      	ldr	r2, [r3, #0]
    4368:	9203      	str	r2, [sp, #12]
	if( *pxListWasEmpty == pdFALSE )
    436a:	42ba      	cmp	r2, r7
    436c:	d001      	beq.n	4372 <prvTimerTask+0x16>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    436e:	68db      	ldr	r3, [r3, #12]
    4370:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
    4372:	4b58      	ldr	r3, [pc, #352]	; (44d4 <prvTimerTask+0x178>)
    4374:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
    4376:	4b58      	ldr	r3, [pc, #352]	; (44d8 <prvTimerTask+0x17c>)
    4378:	4798      	blx	r3
	if( xTimeNow < xLastTime )
    437a:	4d58      	ldr	r5, [pc, #352]	; (44dc <prvTimerTask+0x180>)
	xTimeNow = xTaskGetTickCount();
    437c:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
    437e:	682b      	ldr	r3, [r5, #0]
		*pxTimerListsWereSwitched = pdFALSE;
    4380:	2600      	movs	r6, #0
	if( xTimeNow < xLastTime )
    4382:	4298      	cmp	r0, r3
    4384:	d202      	bcs.n	438c <prvTimerTask+0x30>
		prvSwitchTimerLists();
    4386:	4b56      	ldr	r3, [pc, #344]	; (44e0 <prvTimerTask+0x184>)
    4388:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    438a:	3601      	adds	r6, #1
	xLastTime = xTimeNow;
    438c:	602c      	str	r4, [r5, #0]
    438e:	4d55      	ldr	r5, [pc, #340]	; (44e4 <prvTimerTask+0x188>)
		if( xTimerListsWereSwitched == pdFALSE )
    4390:	2e00      	cmp	r6, #0
    4392:	d171      	bne.n	4478 <prvTimerTask+0x11c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4394:	9b03      	ldr	r3, [sp, #12]
    4396:	2b00      	cmp	r3, #0
    4398:	d05d      	beq.n	4456 <prvTimerTask+0xfa>
    439a:	0030      	movs	r0, r6
    439c:	42a7      	cmp	r7, r4
    439e:	d85f      	bhi.n	4460 <prvTimerTask+0x104>
				( void ) xTaskResumeAll();
    43a0:	47a8      	blx	r5
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    43a2:	4b4b      	ldr	r3, [pc, #300]	; (44d0 <prvTimerTask+0x174>)
    43a4:	681b      	ldr	r3, [r3, #0]
    43a6:	68db      	ldr	r3, [r3, #12]
    43a8:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    43aa:	4b4f      	ldr	r3, [pc, #316]	; (44e8 <prvTimerTask+0x18c>)
    43ac:	1d28      	adds	r0, r5, #4
    43ae:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    43b0:	69eb      	ldr	r3, [r5, #28]
    43b2:	2b01      	cmp	r3, #1
    43b4:	d113      	bne.n	43de <prvTimerTask+0x82>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    43b6:	69ab      	ldr	r3, [r5, #24]
    43b8:	0022      	movs	r2, r4
    43ba:	18f9      	adds	r1, r7, r3
    43bc:	0028      	movs	r0, r5
    43be:	003b      	movs	r3, r7
    43c0:	4c4a      	ldr	r4, [pc, #296]	; (44ec <prvTimerTask+0x190>)
    43c2:	47a0      	blx	r4
    43c4:	2800      	cmp	r0, #0
    43c6:	d00a      	beq.n	43de <prvTimerTask+0x82>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    43c8:	9600      	str	r6, [sp, #0]
    43ca:	0033      	movs	r3, r6
    43cc:	003a      	movs	r2, r7
    43ce:	0031      	movs	r1, r6
    43d0:	0028      	movs	r0, r5
    43d2:	4c47      	ldr	r4, [pc, #284]	; (44f0 <prvTimerTask+0x194>)
    43d4:	47a0      	blx	r4
			configASSERT( xResult );
    43d6:	2800      	cmp	r0, #0
    43d8:	d101      	bne.n	43de <prvTimerTask+0x82>
    43da:	b672      	cpsid	i
    43dc:	e7fe      	b.n	43dc <prvTimerTask+0x80>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    43de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    43e0:	0028      	movs	r0, r5
    43e2:	4798      	blx	r3
    43e4:	2784      	movs	r7, #132	; 0x84
    43e6:	00bf      	lsls	r7, r7, #2
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    43e8:	4b42      	ldr	r3, [pc, #264]	; (44f4 <prvTimerTask+0x198>)
    43ea:	2200      	movs	r2, #0
    43ec:	6818      	ldr	r0, [r3, #0]
    43ee:	a904      	add	r1, sp, #16
    43f0:	4b41      	ldr	r3, [pc, #260]	; (44f8 <prvTimerTask+0x19c>)
    43f2:	4798      	blx	r3
    43f4:	2800      	cmp	r0, #0
    43f6:	d0b3      	beq.n	4360 <prvTimerTask+0x4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    43f8:	9b04      	ldr	r3, [sp, #16]
    43fa:	2b00      	cmp	r3, #0
    43fc:	da04      	bge.n	4408 <prvTimerTask+0xac>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    43fe:	9b05      	ldr	r3, [sp, #20]
    4400:	9907      	ldr	r1, [sp, #28]
    4402:	9806      	ldr	r0, [sp, #24]
    4404:	9303      	str	r3, [sp, #12]
    4406:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4408:	9b04      	ldr	r3, [sp, #16]
    440a:	9303      	str	r3, [sp, #12]
    440c:	2b00      	cmp	r3, #0
    440e:	dbeb      	blt.n	43e8 <prvTimerTask+0x8c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4410:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    4412:	6963      	ldr	r3, [r4, #20]
    4414:	2b00      	cmp	r3, #0
    4416:	d002      	beq.n	441e <prvTimerTask+0xc2>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4418:	1d20      	adds	r0, r4, #4
    441a:	4b33      	ldr	r3, [pc, #204]	; (44e8 <prvTimerTask+0x18c>)
    441c:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
    441e:	4b2e      	ldr	r3, [pc, #184]	; (44d8 <prvTimerTask+0x17c>)
    4420:	4798      	blx	r3
	if( xTimeNow < xLastTime )
    4422:	4e2e      	ldr	r6, [pc, #184]	; (44dc <prvTimerTask+0x180>)
	xTimeNow = xTaskGetTickCount();
    4424:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
    4426:	6833      	ldr	r3, [r6, #0]
    4428:	4298      	cmp	r0, r3
    442a:	d201      	bcs.n	4430 <prvTimerTask+0xd4>
		prvSwitchTimerLists();
    442c:	4b2c      	ldr	r3, [pc, #176]	; (44e0 <prvTimerTask+0x184>)
    442e:	4798      	blx	r3
    4430:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
    4432:	6035      	str	r5, [r6, #0]
    4434:	2b09      	cmp	r3, #9
    4436:	d8d7      	bhi.n	43e8 <prvTimerTask+0x8c>
    4438:	2201      	movs	r2, #1
    443a:	409a      	lsls	r2, r3
    443c:	0016      	movs	r6, r2
    443e:	0013      	movs	r3, r2
    4440:	403e      	ands	r6, r7
    4442:	d138      	bne.n	44b6 <prvTimerTask+0x15a>
    4444:	22c7      	movs	r2, #199	; 0xc7
    4446:	4213      	tst	r3, r2
    4448:	d118      	bne.n	447c <prvTimerTask+0x120>
    444a:	069b      	lsls	r3, r3, #26
    444c:	d5cc      	bpl.n	43e8 <prvTimerTask+0x8c>
						vPortFree( pxTimer );
    444e:	0020      	movs	r0, r4
    4450:	4b2a      	ldr	r3, [pc, #168]	; (44fc <prvTimerTask+0x1a0>)
    4452:	4798      	blx	r3
    4454:	e7c8      	b.n	43e8 <prvTimerTask+0x8c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4456:	4b2a      	ldr	r3, [pc, #168]	; (4500 <prvTimerTask+0x1a4>)
    4458:	681b      	ldr	r3, [r3, #0]
    445a:	681a      	ldr	r2, [r3, #0]
    445c:	4250      	negs	r0, r2
    445e:	4150      	adcs	r0, r2
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    4460:	4b24      	ldr	r3, [pc, #144]	; (44f4 <prvTimerTask+0x198>)
    4462:	0002      	movs	r2, r0
    4464:	1b39      	subs	r1, r7, r4
    4466:	6818      	ldr	r0, [r3, #0]
    4468:	4b26      	ldr	r3, [pc, #152]	; (4504 <prvTimerTask+0x1a8>)
    446a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    446c:	47a8      	blx	r5
    446e:	2800      	cmp	r0, #0
    4470:	d1b8      	bne.n	43e4 <prvTimerTask+0x88>
					portYIELD_WITHIN_API();
    4472:	4b25      	ldr	r3, [pc, #148]	; (4508 <prvTimerTask+0x1ac>)
    4474:	4798      	blx	r3
    4476:	e7b5      	b.n	43e4 <prvTimerTask+0x88>
			( void ) xTaskResumeAll();
    4478:	47a8      	blx	r5
    447a:	e7b3      	b.n	43e4 <prvTimerTask+0x88>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    447c:	9b05      	ldr	r3, [sp, #20]
    447e:	69a2      	ldr	r2, [r4, #24]
    4480:	0020      	movs	r0, r4
    4482:	1899      	adds	r1, r3, r2
    4484:	002a      	movs	r2, r5
    4486:	4d19      	ldr	r5, [pc, #100]	; (44ec <prvTimerTask+0x190>)
    4488:	9303      	str	r3, [sp, #12]
    448a:	47a8      	blx	r5
    448c:	2800      	cmp	r0, #0
    448e:	d0ab      	beq.n	43e8 <prvTimerTask+0x8c>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4490:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4492:	0020      	movs	r0, r4
    4494:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4496:	69e3      	ldr	r3, [r4, #28]
    4498:	2b01      	cmp	r3, #1
    449a:	d1a5      	bne.n	43e8 <prvTimerTask+0x8c>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    449c:	69a3      	ldr	r3, [r4, #24]
    449e:	9a05      	ldr	r2, [sp, #20]
    44a0:	0020      	movs	r0, r4
    44a2:	18d2      	adds	r2, r2, r3
    44a4:	9600      	str	r6, [sp, #0]
    44a6:	0033      	movs	r3, r6
    44a8:	0031      	movs	r1, r6
    44aa:	4c11      	ldr	r4, [pc, #68]	; (44f0 <prvTimerTask+0x194>)
    44ac:	47a0      	blx	r4
							configASSERT( xResult );
    44ae:	2800      	cmp	r0, #0
    44b0:	d19a      	bne.n	43e8 <prvTimerTask+0x8c>
    44b2:	b672      	cpsid	i
    44b4:	e7fe      	b.n	44b4 <prvTimerTask+0x158>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    44b6:	9905      	ldr	r1, [sp, #20]
    44b8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    44ba:	2900      	cmp	r1, #0
    44bc:	d101      	bne.n	44c2 <prvTimerTask+0x166>
    44be:	b672      	cpsid	i
    44c0:	e7fe      	b.n	44c0 <prvTimerTask+0x164>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    44c2:	1949      	adds	r1, r1, r5
    44c4:	002b      	movs	r3, r5
    44c6:	002a      	movs	r2, r5
    44c8:	0020      	movs	r0, r4
    44ca:	4c08      	ldr	r4, [pc, #32]	; (44ec <prvTimerTask+0x190>)
    44cc:	47a0      	blx	r4
    44ce:	e78b      	b.n	43e8 <prvTimerTask+0x8c>
    44d0:	200004b8 	.word	0x200004b8
    44d4:	00003b89 	.word	0x00003b89
    44d8:	00003b99 	.word	0x00003b99
    44dc:	200004e8 	.word	0x200004e8
    44e0:	000042ed 	.word	0x000042ed
    44e4:	00003cad 	.word	0x00003cad
    44e8:	000030bf 	.word	0x000030bf
    44ec:	000041c9 	.word	0x000041c9
    44f0:	00004295 	.word	0x00004295
    44f4:	200004ec 	.word	0x200004ec
    44f8:	00003569 	.word	0x00003569
    44fc:	00003039 	.word	0x00003039
    4500:	200004bc 	.word	0x200004bc
    4504:	00003811 	.word	0x00003811
    4508:	00002f39 	.word	0x00002f39

0000450c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    450c:	b510      	push	{r4, lr}
    450e:	1e04      	subs	r4, r0, #0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
    4510:	d101      	bne.n	4516 <xTimerIsTimerActive+0xa>
    4512:	b672      	cpsid	i
    4514:	e7fe      	b.n	4514 <xTimerIsTimerActive+0x8>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    4516:	4b04      	ldr	r3, [pc, #16]	; (4528 <xTimerIsTimerActive+0x1c>)
    4518:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
    451a:	6964      	ldr	r4, [r4, #20]
    451c:	1e63      	subs	r3, r4, #1
    451e:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
    4520:	4b02      	ldr	r3, [pc, #8]	; (452c <xTimerIsTimerActive+0x20>)
    4522:	4798      	blx	r3

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    4524:	0020      	movs	r0, r4
    4526:	bd10      	pop	{r4, pc}
    4528:	00002f51 	.word	0x00002f51
    452c:	00002f69 	.word	0x00002f69

00004530 <WDT_Handler>:
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    4530:	2201      	movs	r2, #1
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    4532:	b510      	push	{r4, lr}
    4534:	4b03      	ldr	r3, [pc, #12]	; (4544 <WDT_Handler+0x14>)
    4536:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    4538:	4b03      	ldr	r3, [pc, #12]	; (4548 <WDT_Handler+0x18>)
    453a:	681b      	ldr	r3, [r3, #0]
    453c:	2b00      	cmp	r3, #0
    453e:	d000      	beq.n	4542 <WDT_Handler+0x12>
		wdt_early_warning_callback();
    4540:	4798      	blx	r3
	}
}
    4542:	bd10      	pop	{r4, pc}
    4544:	40001000 	.word	0x40001000
    4548:	20000f3c 	.word	0x20000f3c

0000454c <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    454c:	000b      	movs	r3, r1
    454e:	332e      	adds	r3, #46	; 0x2e
    4550:	009b      	lsls	r3, r3, #2
{
    4552:	b510      	push	{r4, lr}
	module_inst->device_callback[callback_type] = callback_func;
    4554:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    4556:	22aa      	movs	r2, #170	; 0xaa
    4558:	4c04      	ldr	r4, [pc, #16]	; (456c <usb_device_register_callback+0x20>)
    455a:	0052      	lsls	r2, r2, #1
    455c:	0049      	lsls	r1, r1, #1
    455e:	5a83      	ldrh	r3, [r0, r2]
    4560:	5b09      	ldrh	r1, [r1, r4]
    4562:	430b      	orrs	r3, r1
    4564:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    4566:	2000      	movs	r0, #0
    4568:	bd10      	pop	{r4, pc}
    456a:	46c0      	nop			; (mov r8, r8)
    456c:	0000a382 	.word	0x0000a382

00004570 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    4570:	4b06      	ldr	r3, [pc, #24]	; (458c <usb_device_enable_callback+0x1c>)
    4572:	0049      	lsls	r1, r1, #1
    4574:	5acb      	ldrh	r3, [r1, r3]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    4576:	21ab      	movs	r1, #171	; 0xab
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    4578:	6802      	ldr	r2, [r0, #0]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    457a:	0049      	lsls	r1, r1, #1
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    457c:	8393      	strh	r3, [r2, #28]
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    457e:	5a42      	ldrh	r2, [r0, r1]
    4580:	431a      	orrs	r2, r3
    4582:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    4584:	6802      	ldr	r2, [r0, #0]

	return STATUS_OK;
}
    4586:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    4588:	8313      	strh	r3, [r2, #24]
}
    458a:	4770      	bx	lr
    458c:	0000a382 	.word	0x0000a382

00004590 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    4590:	4b05      	ldr	r3, [pc, #20]	; (45a8 <usb_device_disable_callback+0x18>)
    4592:	0049      	lsls	r1, r1, #1
    4594:	5aca      	ldrh	r2, [r1, r3]
    4596:	21ab      	movs	r1, #171	; 0xab
    4598:	0049      	lsls	r1, r1, #1
    459a:	5a43      	ldrh	r3, [r0, r1]
    459c:	4393      	bics	r3, r2
    459e:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    45a0:	6803      	ldr	r3, [r0, #0]

	return STATUS_OK;
}
    45a2:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    45a4:	829a      	strh	r2, [r3, #20]
}
    45a6:	4770      	bx	lr
    45a8:	0000a382 	.word	0x0000a382

000045ac <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    45ac:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    45ae:	008c      	lsls	r4, r1, #2
    45b0:	18a4      	adds	r4, r4, r2
    45b2:	3434      	adds	r4, #52	; 0x34
    45b4:	00a4      	lsls	r4, r4, #2
    45b6:	1904      	adds	r4, r0, r4

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    45b8:	1840      	adds	r0, r0, r1
    45ba:	3059      	adds	r0, #89	; 0x59
    45bc:	4904      	ldr	r1, [pc, #16]	; (45d0 <usb_device_endpoint_register_callback+0x24>)
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    45be:	6063      	str	r3, [r4, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    45c0:	30ff      	adds	r0, #255	; 0xff
    45c2:	7803      	ldrb	r3, [r0, #0]
    45c4:	5c8a      	ldrb	r2, [r1, r2]
    45c6:	4313      	orrs	r3, r2
    45c8:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    45ca:	2000      	movs	r0, #0
    45cc:	bd10      	pop	{r4, pc}
    45ce:	46c0      	nop			; (mov r8, r8)
    45d0:	0000a390 	.word	0x0000a390

000045d4 <usb_device_endpoint_unregister_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    45d4:	008b      	lsls	r3, r1, #2
    45d6:	189b      	adds	r3, r3, r2
    45d8:	3334      	adds	r3, #52	; 0x34
{
    45da:	b510      	push	{r4, lr}
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    45dc:	009b      	lsls	r3, r3, #2
{
    45de:	0004      	movs	r4, r0
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    45e0:	18c3      	adds	r3, r0, r3
    45e2:	2000      	movs	r0, #0

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    45e4:	1864      	adds	r4, r4, r1
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    45e6:	6058      	str	r0, [r3, #4]
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    45e8:	3459      	adds	r4, #89	; 0x59
    45ea:	4b03      	ldr	r3, [pc, #12]	; (45f8 <usb_device_endpoint_unregister_callback+0x24>)
    45ec:	34ff      	adds	r4, #255	; 0xff
    45ee:	5c9a      	ldrb	r2, [r3, r2]
    45f0:	7823      	ldrb	r3, [r4, #0]
    45f2:	4393      	bics	r3, r2
    45f4:	7023      	strb	r3, [r4, #0]

	return STATUS_OK;
}
    45f6:	bd10      	pop	{r4, pc}
    45f8:	0000a390 	.word	0x0000a390

000045fc <usb_device_endpoint_enable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    45fc:	230f      	movs	r3, #15
{
    45fe:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4600:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    4602:	18c4      	adds	r4, r0, r3
    4604:	3461      	adds	r4, #97	; 0x61
    4606:	4e1f      	ldr	r6, [pc, #124]	; (4684 <usb_device_endpoint_enable_callback+0x88>)
    4608:	34ff      	adds	r4, #255	; 0xff
    460a:	7825      	ldrb	r5, [r4, #0]
    460c:	5cb6      	ldrb	r6, [r6, r2]
    460e:	4335      	orrs	r5, r6
    4610:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    4612:	2a00      	cmp	r2, #0
    4614:	d10f      	bne.n	4636 <usb_device_endpoint_enable_callback+0x3a>
    4616:	6802      	ldr	r2, [r0, #0]
		if (ep_num == 0) { // control endpoint
    4618:	2b00      	cmp	r3, #0
    461a:	d103      	bne.n	4624 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    461c:	32ff      	adds	r2, #255	; 0xff
    461e:	3303      	adds	r3, #3

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
		if (ep & USB_EP_DIR_IN) {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    4620:	7293      	strb	r3, [r2, #10]
    4622:	e021      	b.n	4668 <usb_device_endpoint_enable_callback+0x6c>
    4624:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    4626:	18d2      	adds	r2, r2, r3
		} else if (ep & USB_EP_DIR_IN) {
    4628:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    462a:	32ff      	adds	r2, #255	; 0xff
    462c:	2302      	movs	r3, #2
		} else if (ep & USB_EP_DIR_IN) {
    462e:	2900      	cmp	r1, #0
    4630:	dbf6      	blt.n	4620 <usb_device_endpoint_enable_callback+0x24>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    4632:	2301      	movs	r3, #1
    4634:	e7f4      	b.n	4620 <usb_device_endpoint_enable_callback+0x24>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    4636:	2a01      	cmp	r2, #1
    4638:	d10e      	bne.n	4658 <usb_device_endpoint_enable_callback+0x5c>
    463a:	6802      	ldr	r2, [r0, #0]
		if (ep_num == 0) { // control endpoint
    463c:	2b00      	cmp	r3, #0
    463e:	d102      	bne.n	4646 <usb_device_endpoint_enable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    4640:	32ff      	adds	r2, #255	; 0xff
    4642:	330c      	adds	r3, #12
    4644:	e7ec      	b.n	4620 <usb_device_endpoint_enable_callback+0x24>
    4646:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    4648:	18d2      	adds	r2, r2, r3
		} else if (ep & USB_EP_DIR_IN) {
    464a:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    464c:	32ff      	adds	r2, #255	; 0xff
    464e:	2308      	movs	r3, #8
		} else if (ep & USB_EP_DIR_IN) {
    4650:	2900      	cmp	r1, #0
    4652:	dbe5      	blt.n	4620 <usb_device_endpoint_enable_callback+0x24>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    4654:	2304      	movs	r3, #4
    4656:	e7e3      	b.n	4620 <usb_device_endpoint_enable_callback+0x24>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4658:	2a02      	cmp	r2, #2
    465a:	d107      	bne.n	466c <usb_device_endpoint_enable_callback+0x70>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    465c:	6802      	ldr	r2, [r0, #0]
    465e:	015b      	lsls	r3, r3, #5
    4660:	18d3      	adds	r3, r2, r3
    4662:	2210      	movs	r2, #16
    4664:	33ff      	adds	r3, #255	; 0xff
    4666:	729a      	strb	r2, [r3, #10]
		}
	}

	return STATUS_OK;
}
    4668:	2000      	movs	r0, #0
    466a:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    466c:	2a03      	cmp	r2, #3
    466e:	d1fb      	bne.n	4668 <usb_device_endpoint_enable_callback+0x6c>
    4670:	6802      	ldr	r2, [r0, #0]
    4672:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    4674:	18d2      	adds	r2, r2, r3
		if (ep & USB_EP_DIR_IN) {
    4676:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    4678:	32ff      	adds	r2, #255	; 0xff
    467a:	2340      	movs	r3, #64	; 0x40
		if (ep & USB_EP_DIR_IN) {
    467c:	2900      	cmp	r1, #0
    467e:	dbcf      	blt.n	4620 <usb_device_endpoint_enable_callback+0x24>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    4680:	2320      	movs	r3, #32
    4682:	e7cd      	b.n	4620 <usb_device_endpoint_enable_callback+0x24>
    4684:	0000a390 	.word	0x0000a390

00004688 <usb_device_endpoint_disable_callback>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4688:	230f      	movs	r3, #15
{
    468a:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    468c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    468e:	18c4      	adds	r4, r0, r3
    4690:	4d1f      	ldr	r5, [pc, #124]	; (4710 <usb_device_endpoint_disable_callback+0x88>)
    4692:	3461      	adds	r4, #97	; 0x61
    4694:	34ff      	adds	r4, #255	; 0xff
    4696:	5cae      	ldrb	r6, [r5, r2]
    4698:	7825      	ldrb	r5, [r4, #0]
    469a:	43b5      	bics	r5, r6
    469c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    469e:	2a00      	cmp	r2, #0
    46a0:	d10f      	bne.n	46c2 <usb_device_endpoint_disable_callback+0x3a>
    46a2:	6802      	ldr	r2, [r0, #0]
		if (ep_num == 0) { // control endpoint
    46a4:	2b00      	cmp	r3, #0
    46a6:	d103      	bne.n	46b0 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    46a8:	32ff      	adds	r2, #255	; 0xff
    46aa:	3303      	adds	r3, #3

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
		if (ep & USB_EP_DIR_IN) {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    46ac:	7253      	strb	r3, [r2, #9]
    46ae:	e021      	b.n	46f4 <usb_device_endpoint_disable_callback+0x6c>
    46b0:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    46b2:	18d2      	adds	r2, r2, r3
		} else if (ep & USB_EP_DIR_IN) {
    46b4:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    46b6:	32ff      	adds	r2, #255	; 0xff
    46b8:	2302      	movs	r3, #2
		} else if (ep & USB_EP_DIR_IN) {
    46ba:	2900      	cmp	r1, #0
    46bc:	dbf6      	blt.n	46ac <usb_device_endpoint_disable_callback+0x24>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    46be:	2301      	movs	r3, #1
    46c0:	e7f4      	b.n	46ac <usb_device_endpoint_disable_callback+0x24>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    46c2:	2a01      	cmp	r2, #1
    46c4:	d10e      	bne.n	46e4 <usb_device_endpoint_disable_callback+0x5c>
    46c6:	6802      	ldr	r2, [r0, #0]
		if (ep_num == 0) { // control endpoint
    46c8:	2b00      	cmp	r3, #0
    46ca:	d102      	bne.n	46d2 <usb_device_endpoint_disable_callback+0x4a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    46cc:	32ff      	adds	r2, #255	; 0xff
    46ce:	330c      	adds	r3, #12
    46d0:	e7ec      	b.n	46ac <usb_device_endpoint_disable_callback+0x24>
    46d2:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    46d4:	18d2      	adds	r2, r2, r3
		} else if (ep & USB_EP_DIR_IN) {
    46d6:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    46d8:	32ff      	adds	r2, #255	; 0xff
    46da:	2308      	movs	r3, #8
		} else if (ep & USB_EP_DIR_IN) {
    46dc:	2900      	cmp	r1, #0
    46de:	dbe5      	blt.n	46ac <usb_device_endpoint_disable_callback+0x24>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    46e0:	2304      	movs	r3, #4
    46e2:	e7e3      	b.n	46ac <usb_device_endpoint_disable_callback+0x24>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    46e4:	2a02      	cmp	r2, #2
    46e6:	d107      	bne.n	46f8 <usb_device_endpoint_disable_callback+0x70>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    46e8:	6802      	ldr	r2, [r0, #0]
    46ea:	015b      	lsls	r3, r3, #5
    46ec:	18d3      	adds	r3, r2, r3
    46ee:	2210      	movs	r2, #16
    46f0:	33ff      	adds	r3, #255	; 0xff
    46f2:	725a      	strb	r2, [r3, #9]
		}
	}

	return STATUS_OK;
}
    46f4:	2000      	movs	r0, #0
    46f6:	bd70      	pop	{r4, r5, r6, pc}
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    46f8:	2a03      	cmp	r2, #3
    46fa:	d1fb      	bne.n	46f4 <usb_device_endpoint_disable_callback+0x6c>
    46fc:	6802      	ldr	r2, [r0, #0]
    46fe:	015b      	lsls	r3, r3, #5
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    4700:	18d2      	adds	r2, r2, r3
		if (ep & USB_EP_DIR_IN) {
    4702:	b249      	sxtb	r1, r1
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    4704:	32ff      	adds	r2, #255	; 0xff
    4706:	2340      	movs	r3, #64	; 0x40
		if (ep & USB_EP_DIR_IN) {
    4708:	2900      	cmp	r1, #0
    470a:	dbcf      	blt.n	46ac <usb_device_endpoint_disable_callback+0x24>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    470c:	2320      	movs	r3, #32
    470e:	e7cd      	b.n	46ac <usb_device_endpoint_disable_callback+0x24>
    4710:	0000a390 	.word	0x0000a390

00004714 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    4714:	2300      	movs	r3, #0
    4716:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    4718:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    471a:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    471c:	3301      	adds	r3, #1
    471e:	70c3      	strb	r3, [r0, #3]
}
    4720:	4770      	bx	lr
	...

00004724 <usb_device_endpoint_set_config>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    4724:	230f      	movs	r3, #15
{
    4726:	b5f0      	push	{r4, r5, r6, r7, lr}
    4728:	0004      	movs	r4, r0
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    472a:	780d      	ldrb	r5, [r1, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;

	switch (ep_config->ep_type) {
    472c:	78c8      	ldrb	r0, [r1, #3]
	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    472e:	402b      	ands	r3, r5
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    4730:	b26d      	sxtb	r5, r5
	switch (ep_config->ep_type) {
    4732:	2804      	cmp	r0, #4
    4734:	d860      	bhi.n	47f8 <usb_device_endpoint_set_config+0xd4>
    4736:	6822      	ldr	r2, [r4, #0]
    4738:	f004 fa28 	bl	8b8c <__gnu_thumb1_case_uqi>
    473c:	87490803 	.word	0x87490803
    4740:	9d          	.byte	0x9d
    4741:	00          	.byte	0x00
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    4742:	2000      	movs	r0, #0
    4744:	3308      	adds	r3, #8
    4746:	015b      	lsls	r3, r3, #5
    4748:	54d0      	strb	r0, [r2, r3]
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
}
    474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    474c:	015e      	lsls	r6, r3, #5
    474e:	1992      	adds	r2, r2, r6
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4750:	32ff      	adds	r2, #255	; 0xff
    4752:	7855      	ldrb	r5, [r2, #1]
				return STATUS_ERR_DENIED;
    4754:	201c      	movs	r0, #28
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4756:	076d      	lsls	r5, r5, #29
    4758:	d1f7      	bne.n	474a <usb_device_endpoint_set_config+0x26>
    475a:	2570      	movs	r5, #112	; 0x70
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    475c:	7857      	ldrb	r7, [r2, #1]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    475e:	422f      	tst	r7, r5
    4760:	d1f3      	bne.n	474a <usb_device_endpoint_set_config+0x26>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    4762:	380b      	subs	r0, #11
    4764:	7050      	strb	r0, [r2, #1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4766:	6822      	ldr	r2, [r4, #0]
    4768:	3308      	adds	r3, #8
    476a:	015b      	lsls	r3, r3, #5
    476c:	18d2      	adds	r2, r2, r3
    476e:	302f      	adds	r0, #47	; 0x2f
    4770:	7150      	strb	r0, [r2, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4772:	6822      	ldr	r2, [r4, #0]
    4774:	18d3      	adds	r3, r2, r3
    4776:	2280      	movs	r2, #128	; 0x80
    4778:	711a      	strb	r2, [r3, #4]
			if (true == ep_config->auto_zlp) {
    477a:	788a      	ldrb	r2, [r1, #2]
    477c:	4b4b      	ldr	r3, [pc, #300]	; (48ac <usb_device_endpoint_set_config+0x188>)
    477e:	2a00      	cmp	r2, #0
    4780:	d01b      	beq.n	47ba <usb_device_endpoint_set_config+0x96>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4782:	2080      	movs	r0, #128	; 0x80
    4784:	199a      	adds	r2, r3, r6
    4786:	6854      	ldr	r4, [r2, #4]
    4788:	0600      	lsls	r0, r0, #24
    478a:	4304      	orrs	r4, r0
    478c:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    478e:	6954      	ldr	r4, [r2, #20]
    4790:	4320      	orrs	r0, r4
    4792:	6150      	str	r0, [r2, #20]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4794:	2507      	movs	r5, #7
    4796:	784a      	ldrb	r2, [r1, #1]
    4798:	199b      	adds	r3, r3, r6
    479a:	6858      	ldr	r0, [r3, #4]
    479c:	4c44      	ldr	r4, [pc, #272]	; (48b0 <usb_device_endpoint_set_config+0x18c>)
    479e:	402a      	ands	r2, r5
    47a0:	0712      	lsls	r2, r2, #28
    47a2:	4020      	ands	r0, r4
    47a4:	4310      	orrs	r0, r2
    47a6:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    47a8:	7849      	ldrb	r1, [r1, #1]
    47aa:	695a      	ldr	r2, [r3, #20]
    47ac:	4029      	ands	r1, r5
    47ae:	0709      	lsls	r1, r1, #28
    47b0:	4022      	ands	r2, r4
    47b2:	430a      	orrs	r2, r1
    47b4:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    47b6:	2000      	movs	r0, #0
    47b8:	e7c7      	b.n	474a <usb_device_endpoint_set_config+0x26>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    47ba:	1998      	adds	r0, r3, r6
    47bc:	6842      	ldr	r2, [r0, #4]
    47be:	0052      	lsls	r2, r2, #1
    47c0:	0852      	lsrs	r2, r2, #1
    47c2:	6042      	str	r2, [r0, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    47c4:	6942      	ldr	r2, [r0, #20]
    47c6:	0052      	lsls	r2, r2, #1
    47c8:	0852      	lsrs	r2, r2, #1
    47ca:	6142      	str	r2, [r0, #20]
    47cc:	e7e2      	b.n	4794 <usb_device_endpoint_set_config+0x70>
    47ce:	0158      	lsls	r0, r3, #5
    47d0:	1812      	adds	r2, r2, r0
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    47d2:	32ff      	adds	r2, #255	; 0xff
			if (ep_bank) {
    47d4:	2d00      	cmp	r5, #0
    47d6:	da27      	bge.n	4828 <usb_device_endpoint_set_config+0x104>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    47d8:	2670      	movs	r6, #112	; 0x70
    47da:	7857      	ldrb	r7, [r2, #1]
				return STATUS_ERR_DENIED;
    47dc:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    47de:	4237      	tst	r7, r6
    47e0:	d1b3      	bne.n	474a <usb_device_endpoint_set_config+0x26>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    47e2:	7856      	ldrb	r6, [r2, #1]
    47e4:	3004      	adds	r0, #4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    47e6:	4330      	orrs	r0, r6
    47e8:	7050      	strb	r0, [r2, #1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    47ea:	0018      	movs	r0, r3
    47ec:	6822      	ldr	r2, [r4, #0]
    47ee:	3008      	adds	r0, #8
    47f0:	0140      	lsls	r0, r0, #5
    47f2:	1812      	adds	r2, r2, r0
    47f4:	2080      	movs	r0, #128	; 0x80
    47f6:	7110      	strb	r0, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    47f8:	2407      	movs	r4, #7
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    47fa:	0fed      	lsrs	r5, r5, #31
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    47fc:	005b      	lsls	r3, r3, #1
    47fe:	4a2b      	ldr	r2, [pc, #172]	; (48ac <usb_device_endpoint_set_config+0x188>)
    4800:	195b      	adds	r3, r3, r5
    4802:	7848      	ldrb	r0, [r1, #1]
    4804:	011b      	lsls	r3, r3, #4
    4806:	18d3      	adds	r3, r2, r3
    4808:	685a      	ldr	r2, [r3, #4]
    480a:	4020      	ands	r0, r4
    480c:	4c28      	ldr	r4, [pc, #160]	; (48b0 <usb_device_endpoint_set_config+0x18c>)
    480e:	0700      	lsls	r0, r0, #28
    4810:	4022      	ands	r2, r4
    4812:	4302      	orrs	r2, r0
    4814:	605a      	str	r2, [r3, #4]
	if (true == ep_config->auto_zlp) {
    4816:	7888      	ldrb	r0, [r1, #2]
    4818:	2800      	cmp	r0, #0
    481a:	d042      	beq.n	48a2 <usb_device_endpoint_set_config+0x17e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    481c:	2280      	movs	r2, #128	; 0x80
    481e:	6859      	ldr	r1, [r3, #4]
    4820:	0612      	lsls	r2, r2, #24
    4822:	430a      	orrs	r2, r1
    4824:	605a      	str	r2, [r3, #4]
    4826:	e7c6      	b.n	47b6 <usb_device_endpoint_set_config+0x92>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4828:	7856      	ldrb	r6, [r2, #1]
				return STATUS_ERR_DENIED;
    482a:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    482c:	0776      	lsls	r6, r6, #29
    482e:	d000      	beq.n	4832 <usb_device_endpoint_set_config+0x10e>
    4830:	e78b      	b.n	474a <usb_device_endpoint_set_config+0x26>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    4832:	7856      	ldrb	r6, [r2, #1]
    4834:	381a      	subs	r0, #26
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    4836:	4330      	orrs	r0, r6
    4838:	7050      	strb	r0, [r2, #1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    483a:	0018      	movs	r0, r3
    483c:	6822      	ldr	r2, [r4, #0]
    483e:	3008      	adds	r0, #8
    4840:	0140      	lsls	r0, r0, #5
    4842:	1812      	adds	r2, r2, r0
    4844:	2040      	movs	r0, #64	; 0x40
    4846:	7150      	strb	r0, [r2, #5]
    4848:	e7d6      	b.n	47f8 <usb_device_endpoint_set_config+0xd4>
    484a:	0158      	lsls	r0, r3, #5
    484c:	1812      	adds	r2, r2, r0
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    484e:	32ff      	adds	r2, #255	; 0xff
			if (ep_bank) {
    4850:	2d00      	cmp	r5, #0
    4852:	da08      	bge.n	4866 <usb_device_endpoint_set_config+0x142>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4854:	2670      	movs	r6, #112	; 0x70
    4856:	7857      	ldrb	r7, [r2, #1]
				return STATUS_ERR_DENIED;
    4858:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    485a:	4237      	tst	r7, r6
    485c:	d000      	beq.n	4860 <usb_device_endpoint_set_config+0x13c>
    485e:	e774      	b.n	474a <usb_device_endpoint_set_config+0x26>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    4860:	7856      	ldrb	r6, [r2, #1]
    4862:	3014      	adds	r0, #20
    4864:	e7bf      	b.n	47e6 <usb_device_endpoint_set_config+0xc2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4866:	7856      	ldrb	r6, [r2, #1]
				return STATUS_ERR_DENIED;
    4868:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    486a:	0776      	lsls	r6, r6, #29
    486c:	d000      	beq.n	4870 <usb_device_endpoint_set_config+0x14c>
    486e:	e76c      	b.n	474a <usb_device_endpoint_set_config+0x26>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    4870:	7856      	ldrb	r6, [r2, #1]
    4872:	3819      	subs	r0, #25
    4874:	e7df      	b.n	4836 <usb_device_endpoint_set_config+0x112>
    4876:	0158      	lsls	r0, r3, #5
    4878:	1812      	adds	r2, r2, r0
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    487a:	32ff      	adds	r2, #255	; 0xff
			if (ep_bank) {
    487c:	2d00      	cmp	r5, #0
    487e:	da08      	bge.n	4892 <usb_device_endpoint_set_config+0x16e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4880:	2670      	movs	r6, #112	; 0x70
    4882:	7857      	ldrb	r7, [r2, #1]
				return STATUS_ERR_DENIED;
    4884:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4886:	4237      	tst	r7, r6
    4888:	d000      	beq.n	488c <usb_device_endpoint_set_config+0x168>
    488a:	e75e      	b.n	474a <usb_device_endpoint_set_config+0x26>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    488c:	7856      	ldrb	r6, [r2, #1]
    488e:	3024      	adds	r0, #36	; 0x24
    4890:	e7a9      	b.n	47e6 <usb_device_endpoint_set_config+0xc2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4892:	7856      	ldrb	r6, [r2, #1]
				return STATUS_ERR_DENIED;
    4894:	201c      	movs	r0, #28
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4896:	0776      	lsls	r6, r6, #29
    4898:	d000      	beq.n	489c <usb_device_endpoint_set_config+0x178>
    489a:	e756      	b.n	474a <usb_device_endpoint_set_config+0x26>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    489c:	7856      	ldrb	r6, [r2, #1]
    489e:	3818      	subs	r0, #24
    48a0:	e7c9      	b.n	4836 <usb_device_endpoint_set_config+0x112>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    48a2:	685a      	ldr	r2, [r3, #4]
    48a4:	0052      	lsls	r2, r2, #1
    48a6:	0852      	lsrs	r2, r2, #1
    48a8:	605a      	str	r2, [r3, #4]
    48aa:	e74e      	b.n	474a <usb_device_endpoint_set_config+0x26>
    48ac:	20000f40 	.word	0x20000f40
    48b0:	8fffffff 	.word	0x8fffffff

000048b4 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    48b4:	230f      	movs	r3, #15
    48b6:	400b      	ands	r3, r1
    48b8:	6802      	ldr	r2, [r0, #0]
    48ba:	3308      	adds	r3, #8

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    48bc:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    48be:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    48c0:	18d2      	adds	r2, r2, r3
	if (ep & USB_EP_DIR_IN) {
    48c2:	2900      	cmp	r1, #0
    48c4:	da06      	bge.n	48d4 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    48c6:	2180      	movs	r1, #128	; 0x80
    48c8:	7111      	strb	r1, [r2, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    48ca:	6802      	ldr	r2, [r0, #0]
    48cc:	18d3      	adds	r3, r2, r3
    48ce:	2202      	movs	r2, #2
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    48d0:	71da      	strb	r2, [r3, #7]
	}
}
    48d2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    48d4:	2140      	movs	r1, #64	; 0x40
    48d6:	7151      	strb	r1, [r2, #5]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    48d8:	6802      	ldr	r2, [r0, #0]
    48da:	18d3      	adds	r3, r2, r3
    48dc:	2201      	movs	r2, #1
    48de:	e7f7      	b.n	48d0 <usb_device_endpoint_abort_job+0x1c>

000048e0 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    48e0:	230f      	movs	r3, #15
    48e2:	400b      	ands	r3, r1
    48e4:	6800      	ldr	r0, [r0, #0]
    48e6:	3308      	adds	r3, #8

	if (ep & USB_EP_DIR_IN) {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    48e8:	015b      	lsls	r3, r3, #5
    48ea:	18c3      	adds	r3, r0, r3
	if (ep & USB_EP_DIR_IN) {
    48ec:	b249      	sxtb	r1, r1
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    48ee:	7998      	ldrb	r0, [r3, #6]
	if (ep & USB_EP_DIR_IN) {
    48f0:	2900      	cmp	r1, #0
    48f2:	da02      	bge.n	48fa <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    48f4:	0680      	lsls	r0, r0, #26
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    48f6:	0fc0      	lsrs	r0, r0, #31
	}
}
    48f8:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    48fa:	06c0      	lsls	r0, r0, #27
    48fc:	e7fb      	b.n	48f6 <usb_device_endpoint_is_halted+0x16>

000048fe <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    48fe:	230f      	movs	r3, #15
    4900:	400b      	ands	r3, r1
    4902:	6800      	ldr	r0, [r0, #0]
    4904:	3308      	adds	r3, #8

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4906:	015b      	lsls	r3, r3, #5
	if (ep & USB_EP_DIR_IN) {
    4908:	b249      	sxtb	r1, r1
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    490a:	18c3      	adds	r3, r0, r3
    490c:	2220      	movs	r2, #32
	if (ep & USB_EP_DIR_IN) {
    490e:	2900      	cmp	r1, #0
    4910:	db00      	blt.n	4914 <usb_device_endpoint_set_halt+0x16>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4912:	2210      	movs	r2, #16
    4914:	715a      	strb	r2, [r3, #5]
	}
}
    4916:	4770      	bx	lr

00004918 <usb_device_endpoint_clear_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4918:	230f      	movs	r3, #15
{
    491a:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    491c:	400b      	ands	r3, r1
    491e:	6802      	ldr	r2, [r0, #0]
    4920:	015c      	lsls	r4, r3, #5
    4922:	1912      	adds	r2, r2, r4

	if (ep & USB_EP_DIR_IN) {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    4924:	32ff      	adds	r2, #255	; 0xff
	if (ep & USB_EP_DIR_IN) {
    4926:	b249      	sxtb	r1, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    4928:	79d5      	ldrb	r5, [r2, #7]
	if (ep & USB_EP_DIR_IN) {
    492a:	2900      	cmp	r1, #0
    492c:	da12      	bge.n	4954 <usb_device_endpoint_clear_halt+0x3c>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    492e:	2120      	movs	r1, #32
    4930:	420d      	tst	r5, r1
    4932:	d00e      	beq.n	4952 <usb_device_endpoint_clear_halt+0x3a>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    4934:	7151      	strb	r1, [r2, #5]
    4936:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4938:	1849      	adds	r1, r1, r1
    493a:	1912      	adds	r2, r2, r4
    493c:	32ff      	adds	r2, #255	; 0xff
    493e:	7a14      	ldrb	r4, [r2, #8]
    4940:	420c      	tst	r4, r1
    4942:	d006      	beq.n	4952 <usb_device_endpoint_clear_halt+0x3a>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4944:	7211      	strb	r1, [r2, #8]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    4946:	6802      	ldr	r2, [r0, #0]
    4948:	3308      	adds	r3, #8
    494a:	015b      	lsls	r3, r3, #5
    494c:	18d3      	adds	r3, r2, r3
    494e:	2202      	movs	r2, #2
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    4950:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    4952:	bd30      	pop	{r4, r5, pc}
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    4954:	2110      	movs	r1, #16
    4956:	420d      	tst	r5, r1
    4958:	d0fb      	beq.n	4952 <usb_device_endpoint_clear_halt+0x3a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    495a:	7151      	strb	r1, [r2, #5]
    495c:	6802      	ldr	r2, [r0, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    495e:	1849      	adds	r1, r1, r1
    4960:	1912      	adds	r2, r2, r4
    4962:	32ff      	adds	r2, #255	; 0xff
    4964:	7a14      	ldrb	r4, [r2, #8]
    4966:	420c      	tst	r4, r1
    4968:	d0f3      	beq.n	4952 <usb_device_endpoint_clear_halt+0x3a>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    496a:	7211      	strb	r1, [r2, #8]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    496c:	6802      	ldr	r2, [r0, #0]
    496e:	3308      	adds	r3, #8
    4970:	015b      	lsls	r3, r3, #5
    4972:	18d3      	adds	r3, r2, r3
    4974:	2201      	movs	r2, #1
    4976:	e7eb      	b.n	4950 <usb_device_endpoint_clear_halt+0x38>

00004978 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4978:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    497a:	000c      	movs	r4, r1
    497c:	6805      	ldr	r5, [r0, #0]
    497e:	3408      	adds	r4, #8
    4980:	0164      	lsls	r4, r4, #5
    4982:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4984:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4986:	066d      	lsls	r5, r5, #25
    4988:	0f6d      	lsrs	r5, r5, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    498a:	d014      	beq.n	49b6 <usb_device_endpoint_write_buffer_job+0x3e>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    498c:	014d      	lsls	r5, r1, #5
    498e:	490b      	ldr	r1, [pc, #44]	; (49bc <usb_device_endpoint_write_buffer_job+0x44>)
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4990:	049b      	lsls	r3, r3, #18
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    4992:	1949      	adds	r1, r1, r5
    4994:	000d      	movs	r5, r1
    4996:	610a      	str	r2, [r1, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4998:	694a      	ldr	r2, [r1, #20]
    499a:	4909      	ldr	r1, [pc, #36]	; (49c0 <usb_device_endpoint_write_buffer_job+0x48>)
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
    499c:	2600      	movs	r6, #0
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    499e:	400a      	ands	r2, r1
    49a0:	616a      	str	r2, [r5, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    49a2:	696a      	ldr	r2, [r5, #20]
    49a4:	0c99      	lsrs	r1, r3, #18
    49a6:	0b93      	lsrs	r3, r2, #14
    49a8:	039b      	lsls	r3, r3, #14
    49aa:	430b      	orrs	r3, r1
    49ac:	616b      	str	r3, [r5, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    49ae:	6803      	ldr	r3, [r0, #0]
    49b0:	191c      	adds	r4, r3, r4
    49b2:	2380      	movs	r3, #128	; 0x80
    49b4:	7163      	strb	r3, [r4, #5]
}
    49b6:	0030      	movs	r0, r6
    49b8:	bd70      	pop	{r4, r5, r6, pc}
    49ba:	46c0      	nop			; (mov r8, r8)
    49bc:	20000f40 	.word	0x20000f40
    49c0:	f0003fff 	.word	0xf0003fff

000049c4 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    49c4:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    49c6:	000c      	movs	r4, r1
    49c8:	6805      	ldr	r5, [r0, #0]
    49ca:	3408      	adds	r4, #8
    49cc:	0164      	lsls	r4, r4, #5
    49ce:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    49d0:	261c      	movs	r6, #28
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    49d2:	076d      	lsls	r5, r5, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    49d4:	d013      	beq.n	49fe <usb_device_endpoint_read_buffer_job+0x3a>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    49d6:	4d0b      	ldr	r5, [pc, #44]	; (4a04 <usb_device_endpoint_read_buffer_job+0x40>)
    49d8:	0149      	lsls	r1, r1, #5
    49da:	514a      	str	r2, [r1, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    49dc:	049b      	lsls	r3, r3, #18
    49de:	1869      	adds	r1, r5, r1
    49e0:	684a      	ldr	r2, [r1, #4]
    49e2:	091d      	lsrs	r5, r3, #4
    49e4:	4b08      	ldr	r3, [pc, #32]	; (4a08 <usb_device_endpoint_read_buffer_job+0x44>)
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
    49e6:	2600      	movs	r6, #0
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    49e8:	4013      	ands	r3, r2
    49ea:	432b      	orrs	r3, r5
    49ec:	604b      	str	r3, [r1, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    49ee:	684b      	ldr	r3, [r1, #4]
    49f0:	0b9b      	lsrs	r3, r3, #14
    49f2:	039b      	lsls	r3, r3, #14
    49f4:	604b      	str	r3, [r1, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    49f6:	6803      	ldr	r3, [r0, #0]
    49f8:	191c      	adds	r4, r3, r4
    49fa:	2340      	movs	r3, #64	; 0x40
    49fc:	7123      	strb	r3, [r4, #4]
}
    49fe:	0030      	movs	r0, r6
    4a00:	bd70      	pop	{r4, r5, r6, pc}
    4a02:	46c0      	nop			; (mov r8, r8)
    4a04:	20000f40 	.word	0x20000f40
    4a08:	f0003fff 	.word	0xf0003fff

00004a0c <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4a0c:	4b09      	ldr	r3, [pc, #36]	; (4a34 <usb_device_endpoint_setup_buffer_job+0x28>)
    4a0e:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    4a10:	685a      	ldr	r2, [r3, #4]
    4a12:	4909      	ldr	r1, [pc, #36]	; (4a38 <usb_device_endpoint_setup_buffer_job+0x2c>)
    4a14:	4011      	ands	r1, r2
    4a16:	2280      	movs	r2, #128	; 0x80
    4a18:	0292      	lsls	r2, r2, #10
    4a1a:	430a      	orrs	r2, r1
    4a1c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4a1e:	685a      	ldr	r2, [r3, #4]
    4a20:	0b92      	lsrs	r2, r2, #14
    4a22:	0392      	lsls	r2, r2, #14
    4a24:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4a26:	2240      	movs	r2, #64	; 0x40
    4a28:	6803      	ldr	r3, [r0, #0]

	return STATUS_OK;
}
    4a2a:	2000      	movs	r0, #0
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4a2c:	33ff      	adds	r3, #255	; 0xff
    4a2e:	715a      	strb	r2, [r3, #5]
}
    4a30:	4770      	bx	lr
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	20000f40 	.word	0x20000f40
    4a38:	f0003fff 	.word	0xf0003fff

00004a3c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    4a3c:	2302      	movs	r3, #2
    4a3e:	6802      	ldr	r2, [r0, #0]
    4a40:	7811      	ldrb	r1, [r2, #0]
    4a42:	430b      	orrs	r3, r1
    4a44:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    4a46:	6802      	ldr	r2, [r0, #0]
    4a48:	7893      	ldrb	r3, [r2, #2]
    4a4a:	2b02      	cmp	r3, #2
    4a4c:	d0fc      	beq.n	4a48 <usb_enable+0xc>
}
    4a4e:	4770      	bx	lr

00004a50 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    4a50:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4a52:	4ed7      	ldr	r6, [pc, #860]	; (4db0 <USB_Handler+0x360>)
{
    4a54:	b085      	sub	sp, #20
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4a56:	6837      	ldr	r7, [r6, #0]
    4a58:	683d      	ldr	r5, [r7, #0]
    4a5a:	782b      	ldrb	r3, [r5, #0]
    4a5c:	09db      	lsrs	r3, r3, #7
    4a5e:	d100      	bne.n	4a62 <USB_Handler+0x12>
    4a60:	e122      	b.n	4ca8 <USB_Handler+0x258>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4a62:	8c2b      	ldrh	r3, [r5, #32]
    4a64:	2b00      	cmp	r3, #0
    4a66:	d100      	bne.n	4a6a <USB_Handler+0x1a>
    4a68:	e22d      	b.n	4ec6 <USB_Handler+0x476>
    4a6a:	8c28      	ldrh	r0, [r5, #32]
    4a6c:	4bd1      	ldr	r3, [pc, #836]	; (4db4 <USB_Handler+0x364>)
    4a6e:	b280      	uxth	r0, r0
    4a70:	4798      	blx	r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    4a72:	0003      	movs	r3, r0
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4a74:	0004      	movs	r4, r0
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    4a76:	2003      	movs	r0, #3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    4a78:	3308      	adds	r3, #8
    4a7a:	015b      	lsls	r3, r3, #5
    4a7c:	18ed      	adds	r5, r5, r3
    4a7e:	79ed      	ldrb	r5, [r5, #7]
    4a80:	b2ea      	uxtb	r2, r5
    4a82:	9201      	str	r2, [sp, #4]
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    4a84:	4202      	tst	r2, r0
    4a86:	d031      	beq.n	4aec <USB_Handler+0x9c>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4a88:	2101      	movs	r1, #1
    4a8a:	4acb      	ldr	r2, [pc, #812]	; (4db8 <USB_Handler+0x368>)
    4a8c:	4694      	mov	ip, r2
    4a8e:	000a      	movs	r2, r1
    4a90:	4665      	mov	r5, ip
    4a92:	40a2      	lsls	r2, r4
    4a94:	682d      	ldr	r5, [r5, #0]
    4a96:	4395      	bics	r5, r2
    4a98:	002a      	movs	r2, r5
    4a9a:	4665      	mov	r5, ip
    4a9c:	602a      	str	r2, [r5, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4a9e:	683a      	ldr	r2, [r7, #0]
    4aa0:	18d2      	adds	r2, r2, r3
    4aa2:	71d0      	strb	r0, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4aa4:	193a      	adds	r2, r7, r4
    4aa6:	32ae      	adds	r2, #174	; 0xae
    4aa8:	7812      	ldrb	r2, [r2, #0]
    4aaa:	420a      	tst	r2, r1
    4aac:	d01e      	beq.n	4aec <USB_Handler+0x9c>
				pipe_callback_para.pipe_num = pipe_int;
    4aae:	4ac3      	ldr	r2, [pc, #780]	; (4dbc <USB_Handler+0x36c>)
    4ab0:	0160      	lsls	r0, r4, #5
    4ab2:	7014      	strb	r4, [r2, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4ab4:	6839      	ldr	r1, [r7, #0]
    4ab6:	5c59      	ldrb	r1, [r3, r1]
    4ab8:	4bc1      	ldr	r3, [pc, #772]	; (4dc0 <USB_Handler+0x370>)
    4aba:	0789      	lsls	r1, r1, #30
    4abc:	0f89      	lsrs	r1, r1, #30
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4abe:	181b      	adds	r3, r3, r0
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4ac0:	2901      	cmp	r1, #1
    4ac2:	d000      	beq.n	4ac6 <USB_Handler+0x76>
    4ac4:	e0b4      	b.n	4c30 <USB_Handler+0x1e0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4ac6:	6859      	ldr	r1, [r3, #4]
    4ac8:	0489      	lsls	r1, r1, #18
    4aca:	0c89      	lsrs	r1, r1, #18
    4acc:	8051      	strh	r1, [r2, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4ace:	6859      	ldr	r1, [r3, #4]
    4ad0:	0109      	lsls	r1, r1, #4
    4ad2:	0c89      	lsrs	r1, r1, #18
    4ad4:	8091      	strh	r1, [r2, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4ad6:	685a      	ldr	r2, [r3, #4]
    4ad8:	0b92      	lsrs	r2, r2, #14
    4ada:	0392      	lsls	r2, r2, #14
    4adc:	605a      	str	r2, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    4ade:	1ca3      	adds	r3, r4, #2
    4ae0:	011b      	lsls	r3, r3, #4
    4ae2:	18fb      	adds	r3, r7, r3
    4ae4:	685b      	ldr	r3, [r3, #4]
    4ae6:	49b5      	ldr	r1, [pc, #724]	; (4dbc <USB_Handler+0x36c>)
    4ae8:	0038      	movs	r0, r7
    4aea:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    4aec:	2304      	movs	r3, #4
    4aee:	9a01      	ldr	r2, [sp, #4]
    4af0:	421a      	tst	r2, r3
    4af2:	d038      	beq.n	4b66 <USB_Handler+0x116>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    4af4:	0022      	movs	r2, r4
    4af6:	4bae      	ldr	r3, [pc, #696]	; (4db0 <USB_Handler+0x360>)
    4af8:	3208      	adds	r2, #8
    4afa:	6818      	ldr	r0, [r3, #0]
    4afc:	0153      	lsls	r3, r2, #5
    4afe:	6801      	ldr	r1, [r0, #0]
    4b00:	469c      	mov	ip, r3
    4b02:	5c5b      	ldrb	r3, [r3, r1]
    4b04:	069b      	lsls	r3, r3, #26
    4b06:	0f5b      	lsrs	r3, r3, #29
    4b08:	9302      	str	r3, [sp, #8]
    4b0a:	2b02      	cmp	r3, #2
    4b0c:	d000      	beq.n	4b10 <USB_Handler+0xc0>
    4b0e:	e0a4      	b.n	4c5a <USB_Handler+0x20a>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    4b10:	4663      	mov	r3, ip
    4b12:	5c5b      	ldrb	r3, [r3, r1]
    4b14:	079b      	lsls	r3, r3, #30
    4b16:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    4b18:	2b01      	cmp	r3, #1
    4b1a:	d000      	beq.n	4b1e <USB_Handler+0xce>
    4b1c:	e09d      	b.n	4c5a <USB_Handler+0x20a>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    4b1e:	4fa8      	ldr	r7, [pc, #672]	; (4dc0 <USB_Handler+0x370>)
    4b20:	0165      	lsls	r5, r4, #5
    4b22:	197d      	adds	r5, r7, r5
    4b24:	002f      	movs	r7, r5
    4b26:	9503      	str	r5, [sp, #12]
    4b28:	3708      	adds	r7, #8
    4b2a:	78bf      	ldrb	r7, [r7, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    4b2c:	07fd      	lsls	r5, r7, #31
    4b2e:	d400      	bmi.n	4b32 <USB_Handler+0xe2>
    4b30:	e093      	b.n	4c5a <USB_Handler+0x20a>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    4b32:	40a3      	lsls	r3, r4
    4b34:	4aa0      	ldr	r2, [pc, #640]	; (4db8 <USB_Handler+0x368>)
    4b36:	6811      	ldr	r1, [r2, #0]
    4b38:	4399      	bics	r1, r3
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    4b3a:	2300      	movs	r3, #0
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    4b3c:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    4b3e:	9a03      	ldr	r2, [sp, #12]
    4b40:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4b42:	2204      	movs	r2, #4
    4b44:	6803      	ldr	r3, [r0, #0]
    4b46:	4463      	add	r3, ip
    4b48:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4b4a:	1903      	adds	r3, r0, r4
    4b4c:	33ae      	adds	r3, #174	; 0xae
    4b4e:	781b      	ldrb	r3, [r3, #0]
    4b50:	9a02      	ldr	r2, [sp, #8]
    4b52:	4213      	tst	r3, r2
    4b54:	d007      	beq.n	4b66 <USB_Handler+0x116>
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    4b56:	2310      	movs	r3, #16
					pipe_callback_para.pipe_num = pipe_int;
    4b58:	4998      	ldr	r1, [pc, #608]	; (4dbc <USB_Handler+0x36c>)
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    4b5a:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    4b5c:	0123      	lsls	r3, r4, #4
    4b5e:	18c3      	adds	r3, r0, r3
					pipe_callback_para.pipe_num = pipe_int;
    4b60:	700c      	strb	r4, [r1, #0]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    4b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b64:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_PERR) {
    4b66:	2208      	movs	r2, #8
    4b68:	9b01      	ldr	r3, [sp, #4]
    4b6a:	4213      	tst	r3, r2
    4b6c:	d01d      	beq.n	4baa <USB_Handler+0x15a>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4b6e:	2301      	movs	r3, #1
    4b70:	40a3      	lsls	r3, r4
    4b72:	4991      	ldr	r1, [pc, #580]	; (4db8 <USB_Handler+0x368>)
    4b74:	6808      	ldr	r0, [r1, #0]
    4b76:	4398      	bics	r0, r3
    4b78:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4b7a:	6830      	ldr	r0, [r6, #0]
    4b7c:	18a3      	adds	r3, r4, r2
    4b7e:	6801      	ldr	r1, [r0, #0]
    4b80:	015b      	lsls	r3, r3, #5
    4b82:	18cb      	adds	r3, r1, r3
    4b84:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4b86:	1903      	adds	r3, r0, r4
    4b88:	33ae      	adds	r3, #174	; 0xae
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	079b      	lsls	r3, r3, #30
    4b8e:	d50c      	bpl.n	4baa <USB_Handler+0x15a>
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    4b90:	4b8b      	ldr	r3, [pc, #556]	; (4dc0 <USB_Handler+0x370>)
    4b92:	0162      	lsls	r2, r4, #5
    4b94:	189b      	adds	r3, r3, r2
    4b96:	221f      	movs	r2, #31
    4b98:	89db      	ldrh	r3, [r3, #14]
				pipe_callback_para.pipe_num = pipe_int;
    4b9a:	4988      	ldr	r1, [pc, #544]	; (4dbc <USB_Handler+0x36c>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    4b9c:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    4b9e:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    4ba0:	0123      	lsls	r3, r4, #4
    4ba2:	18c3      	adds	r3, r0, r3
				pipe_callback_para.pipe_num = pipe_int;
    4ba4:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    4ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ba8:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    4baa:	2210      	movs	r2, #16
    4bac:	9b01      	ldr	r3, [sp, #4]
    4bae:	4213      	tst	r3, r2
    4bb0:	d01f      	beq.n	4bf2 <USB_Handler+0x1a2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4bb2:	2301      	movs	r3, #1
    4bb4:	40a3      	lsls	r3, r4
    4bb6:	4980      	ldr	r1, [pc, #512]	; (4db8 <USB_Handler+0x368>)
    4bb8:	6808      	ldr	r0, [r1, #0]
    4bba:	4398      	bics	r0, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4bbc:	0023      	movs	r3, r4
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4bbe:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4bc0:	6830      	ldr	r0, [r6, #0]
    4bc2:	3308      	adds	r3, #8
    4bc4:	6801      	ldr	r1, [r0, #0]
    4bc6:	015b      	lsls	r3, r3, #5
    4bc8:	18cb      	adds	r3, r1, r3
    4bca:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4bcc:	1903      	adds	r3, r0, r4
    4bce:	33ae      	adds	r3, #174	; 0xae
    4bd0:	781b      	ldrb	r3, [r3, #0]
    4bd2:	075b      	lsls	r3, r3, #29
    4bd4:	d50d      	bpl.n	4bf2 <USB_Handler+0x1a2>
				pipe_callback_para.pipe_num = pipe_int;
    4bd6:	4a79      	ldr	r2, [pc, #484]	; (4dbc <USB_Handler+0x36c>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4bd8:	4b79      	ldr	r3, [pc, #484]	; (4dc0 <USB_Handler+0x370>)
    4bda:	0161      	lsls	r1, r4, #5
    4bdc:	185b      	adds	r3, r3, r1
				pipe_callback_para.pipe_num = pipe_int;
    4bde:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4be0:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    4be2:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4be4:	011b      	lsls	r3, r3, #4
    4be6:	0c9b      	lsrs	r3, r3, #18
    4be8:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    4bea:	0123      	lsls	r3, r4, #4
    4bec:	18c3      	adds	r3, r0, r3
    4bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bf0:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_STALL) {
    4bf2:	2220      	movs	r2, #32
    4bf4:	9b01      	ldr	r3, [sp, #4]
    4bf6:	4213      	tst	r3, r2
    4bf8:	d100      	bne.n	4bfc <USB_Handler+0x1ac>
    4bfa:	e1f9      	b.n	4ff0 <USB_Handler+0x5a0>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4bfc:	2301      	movs	r3, #1
    4bfe:	40a3      	lsls	r3, r4
    4c00:	496d      	ldr	r1, [pc, #436]	; (4db8 <USB_Handler+0x368>)
    4c02:	6808      	ldr	r0, [r1, #0]
    4c04:	4398      	bics	r0, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4c06:	0023      	movs	r3, r4
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4c08:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4c0a:	6830      	ldr	r0, [r6, #0]
    4c0c:	3308      	adds	r3, #8
    4c0e:	6801      	ldr	r1, [r0, #0]
    4c10:	015b      	lsls	r3, r3, #5
    4c12:	18cb      	adds	r3, r1, r3
    4c14:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4c16:	1903      	adds	r3, r0, r4
    4c18:	33ae      	adds	r3, #174	; 0xae
    4c1a:	781b      	ldrb	r3, [r3, #0]
    4c1c:	071b      	lsls	r3, r3, #28
    4c1e:	d400      	bmi.n	4c22 <USB_Handler+0x1d2>
    4c20:	e1e6      	b.n	4ff0 <USB_Handler+0x5a0>
				pipe_callback_para.pipe_num = pipe_int;
    4c22:	4966      	ldr	r1, [pc, #408]	; (4dbc <USB_Handler+0x36c>)
    4c24:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    4c26:	0124      	lsls	r4, r4, #4
    4c28:	1904      	adds	r4, r0, r4
    4c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4c2c:	4798      	blx	r3
    4c2e:	e1df      	b.n	4ff0 <USB_Handler+0x5a0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4c30:	6859      	ldr	r1, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4c32:	4d64      	ldr	r5, [pc, #400]	; (4dc4 <USB_Handler+0x374>)
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4c34:	0109      	lsls	r1, r1, #4
    4c36:	0c89      	lsrs	r1, r1, #18
    4c38:	8051      	strh	r1, [r2, #2]
    4c3a:	b288      	uxth	r0, r1
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4c3c:	6859      	ldr	r1, [r3, #4]
    4c3e:	0489      	lsls	r1, r1, #18
    4c40:	0c89      	lsrs	r1, r1, #18
    4c42:	8091      	strh	r1, [r2, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4c44:	6859      	ldr	r1, [r3, #4]
    4c46:	4029      	ands	r1, r5
    4c48:	6059      	str	r1, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    4c4a:	2800      	cmp	r0, #0
    4c4c:	d000      	beq.n	4c50 <USB_Handler+0x200>
    4c4e:	e746      	b.n	4ade <USB_Handler+0x8e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4c50:	685b      	ldr	r3, [r3, #4]
    4c52:	049b      	lsls	r3, r3, #18
    4c54:	0c9b      	lsrs	r3, r3, #18
    4c56:	8053      	strh	r3, [r2, #2]
    4c58:	e741      	b.n	4ade <USB_Handler+0x8e>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    4c5a:	0152      	lsls	r2, r2, #5
    4c5c:	5c53      	ldrb	r3, [r2, r1]
    4c5e:	4d58      	ldr	r5, [pc, #352]	; (4dc0 <USB_Handler+0x370>)
    4c60:	069b      	lsls	r3, r3, #26
    4c62:	0f5b      	lsrs	r3, r3, #29
    4c64:	46ac      	mov	ip, r5
    4c66:	0167      	lsls	r7, r4, #5
    4c68:	2b03      	cmp	r3, #3
    4c6a:	d111      	bne.n	4c90 <USB_Handler+0x240>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    4c6c:	5c53      	ldrb	r3, [r2, r1]
    4c6e:	079b      	lsls	r3, r3, #30
    4c70:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    4c72:	2b01      	cmp	r3, #1
    4c74:	d10c      	bne.n	4c90 <USB_Handler+0x240>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    4c76:	0039      	movs	r1, r7
    4c78:	2300      	movs	r3, #0
    4c7a:	4461      	add	r1, ip
    4c7c:	728b      	strb	r3, [r1, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4c7e:	2104      	movs	r1, #4
    4c80:	6803      	ldr	r3, [r0, #0]
    4c82:	189b      	adds	r3, r3, r2
    4c84:	71d9      	strb	r1, [r3, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    4c86:	6803      	ldr	r3, [r0, #0]
    4c88:	189a      	adds	r2, r3, r2
    4c8a:	2310      	movs	r3, #16
    4c8c:	7153      	strb	r3, [r2, #5]
    4c8e:	e76a      	b.n	4b66 <USB_Handler+0x116>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    4c90:	003a      	movs	r2, r7
    4c92:	2300      	movs	r3, #0
    4c94:	4462      	add	r2, ip
    4c96:	7293      	strb	r3, [r2, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4c98:	0022      	movs	r2, r4
    4c9a:	6803      	ldr	r3, [r0, #0]
    4c9c:	3208      	adds	r2, #8
    4c9e:	0152      	lsls	r2, r2, #5
    4ca0:	189b      	adds	r3, r3, r2
    4ca2:	2204      	movs	r2, #4
    4ca4:	71da      	strb	r2, [r3, #7]
    4ca6:	e75e      	b.n	4b66 <USB_Handler+0x116>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    4ca8:	8c2c      	ldrh	r4, [r5, #32]
    4caa:	b2a2      	uxth	r2, r4
    4cac:	9201      	str	r2, [sp, #4]
	if (0 == ep_inst) {
    4cae:	2a00      	cmp	r2, #0
    4cb0:	d12c      	bne.n	4d0c <USB_Handler+0x2bc>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4cb2:	8bab      	ldrh	r3, [r5, #28]
		flags_run = flags &
    4cb4:	3255      	adds	r2, #85	; 0x55
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4cb6:	b29b      	uxth	r3, r3
    4cb8:	9302      	str	r3, [sp, #8]
				_usb_instances->device_enabled_callback_mask &
    4cba:	23ab      	movs	r3, #171	; 0xab
		flags_run = flags &
    4cbc:	32ff      	adds	r2, #255	; 0xff
				_usb_instances->device_enabled_callback_mask &
    4cbe:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    4cc0:	5afb      	ldrh	r3, [r7, r3]
    4cc2:	5abd      	ldrh	r5, [r7, r2]
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4cc4:	2780      	movs	r7, #128	; 0x80
		flags_run = flags &
    4cc6:	401d      	ands	r5, r3
    4cc8:	9b02      	ldr	r3, [sp, #8]
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4cca:	9c01      	ldr	r4, [sp, #4]
		flags_run = flags &
    4ccc:	401d      	ands	r5, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4cce:	007f      	lsls	r7, r7, #1
			if (flags & _usb_device_irq_bits[i]) {
    4cd0:	4b3d      	ldr	r3, [pc, #244]	; (4dc8 <USB_Handler+0x378>)
    4cd2:	0062      	lsls	r2, r4, #1
    4cd4:	5ad3      	ldrh	r3, [r2, r3]
    4cd6:	9a02      	ldr	r2, [sp, #8]
    4cd8:	4213      	tst	r3, r2
    4cda:	d002      	beq.n	4ce2 <USB_Handler+0x292>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4cdc:	6832      	ldr	r2, [r6, #0]
    4cde:	6812      	ldr	r2, [r2, #0]
    4ce0:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    4ce2:	422b      	tst	r3, r5
    4ce4:	d00e      	beq.n	4d04 <USB_Handler+0x2b4>
    4ce6:	4939      	ldr	r1, [pc, #228]	; (4dcc <USB_Handler+0x37c>)
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4ce8:	2c06      	cmp	r4, #6
    4cea:	d104      	bne.n	4cf6 <USB_Handler+0x2a6>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4cec:	4b34      	ldr	r3, [pc, #208]	; (4dc0 <USB_Handler+0x370>)
    4cee:	891b      	ldrh	r3, [r3, #8]
    4cf0:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4cf2:	403b      	ands	r3, r7
    4cf4:	600b      	str	r3, [r1, #0]
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4cf6:	0023      	movs	r3, r4
    4cf8:	6832      	ldr	r2, [r6, #0]
    4cfa:	332e      	adds	r3, #46	; 0x2e
    4cfc:	009b      	lsls	r3, r3, #2
    4cfe:	589b      	ldr	r3, [r3, r2]
    4d00:	0010      	movs	r0, r2
    4d02:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4d04:	3401      	adds	r4, #1
    4d06:	2c07      	cmp	r4, #7
    4d08:	d1e2      	bne.n	4cd0 <USB_Handler+0x280>
    4d0a:	e171      	b.n	4ff0 <USB_Handler+0x5a0>
    4d0c:	003e      	movs	r6, r7
    4d0e:	3659      	adds	r6, #89	; 0x59
    4d10:	36ff      	adds	r6, #255	; 0xff
			if (ep_inst & (1 << i)) {
    4d12:	9a01      	ldr	r2, [sp, #4]
    4d14:	2101      	movs	r1, #1
    4d16:	411a      	asrs	r2, r3
    4d18:	b2dc      	uxtb	r4, r3
    4d1a:	420a      	tst	r2, r1
    4d1c:	d100      	bne.n	4d20 <USB_Handler+0x2d0>
    4d1e:	e0cc      	b.n	4eba <USB_Handler+0x46a>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4d20:	001a      	movs	r2, r3
    4d22:	3208      	adds	r2, #8
    4d24:	0151      	lsls	r1, r2, #5
    4d26:	1869      	adds	r1, r5, r1
    4d28:	1dc8      	adds	r0, r1, #7
    4d2a:	9003      	str	r0, [sp, #12]
    4d2c:	79c8      	ldrb	r0, [r1, #7]
    4d2e:	7a31      	ldrb	r1, [r6, #8]
    4d30:	9202      	str	r2, [sp, #8]
    4d32:	b2c0      	uxtb	r0, r0
    4d34:	7832      	ldrb	r2, [r6, #0]
    4d36:	4001      	ands	r1, r0
    4d38:	4011      	ands	r1, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4d3a:	2260      	movs	r2, #96	; 0x60
    4d3c:	4210      	tst	r0, r2
    4d3e:	d01a      	beq.n	4d76 <USB_Handler+0x326>
    4d40:	015a      	lsls	r2, r3, #5
    4d42:	18ad      	adds	r5, r5, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4d44:	2240      	movs	r2, #64	; 0x40
    4d46:	35ff      	adds	r5, #255	; 0xff
    4d48:	7a28      	ldrb	r0, [r5, #8]
    4d4a:	4210      	tst	r0, r2
    4d4c:	d00d      	beq.n	4d6a <USB_Handler+0x31a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4d4e:	722a      	strb	r2, [r5, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4d50:	3ac0      	subs	r2, #192	; 0xc0
    4d52:	4314      	orrs	r4, r2
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4d54:	4a1e      	ldr	r2, [pc, #120]	; (4dd0 <USB_Handler+0x380>)
    4d56:	7194      	strb	r4, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4d58:	2260      	movs	r2, #96	; 0x60
    4d5a:	4211      	tst	r1, r2
    4d5c:	d100      	bne.n	4d60 <USB_Handler+0x310>
    4d5e:	e147      	b.n	4ff0 <USB_Handler+0x5a0>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4d60:	011b      	lsls	r3, r3, #4
    4d62:	18fb      	adds	r3, r7, r3
    4d64:	33e0      	adds	r3, #224	; 0xe0
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4d66:	681b      	ldr	r3, [r3, #0]
    4d68:	e052      	b.n	4e10 <USB_Handler+0x3c0>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4d6a:	2220      	movs	r2, #32
    4d6c:	7a28      	ldrb	r0, [r5, #8]
    4d6e:	4210      	tst	r0, r2
    4d70:	d0f2      	beq.n	4d58 <USB_Handler+0x308>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4d72:	722a      	strb	r2, [r5, #8]
    4d74:	e7ee      	b.n	4d54 <USB_Handler+0x304>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4d76:	2210      	movs	r2, #16
    4d78:	4210      	tst	r0, r2
    4d7a:	d02b      	beq.n	4dd4 <USB_Handler+0x384>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4d7c:	2110      	movs	r1, #16
    4d7e:	9a03      	ldr	r2, [sp, #12]
    4d80:	7011      	strb	r1, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4d82:	2110      	movs	r1, #16
    4d84:	18fa      	adds	r2, r7, r3
    4d86:	3261      	adds	r2, #97	; 0x61
    4d88:	32ff      	adds	r2, #255	; 0xff
    4d8a:	7812      	ldrb	r2, [r2, #0]
    4d8c:	420a      	tst	r2, r1
    4d8e:	d100      	bne.n	4d92 <USB_Handler+0x342>
    4d90:	e12e      	b.n	4ff0 <USB_Handler+0x5a0>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4d92:	4a0b      	ldr	r2, [pc, #44]	; (4dc0 <USB_Handler+0x370>)
    4d94:	0159      	lsls	r1, r3, #5
    4d96:	1852      	adds	r2, r2, r1
    4d98:	6852      	ldr	r2, [r2, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4d9a:	011b      	lsls	r3, r3, #4
    4d9c:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4d9e:	0492      	lsls	r2, r2, #18
    4da0:	490b      	ldr	r1, [pc, #44]	; (4dd0 <USB_Handler+0x380>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4da2:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4da4:	0c92      	lsrs	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4da6:	681b      	ldr	r3, [r3, #0]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4da8:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4daa:	0038      	movs	r0, r7
    4dac:	e73e      	b.n	4c2c <USB_Handler+0x1dc>
    4dae:	46c0      	nop			; (mov r8, r8)
    4db0:	200004f4 	.word	0x200004f4
    4db4:	00008ef5 	.word	0x00008ef5
    4db8:	20000504 	.word	0x20000504
    4dbc:	20000508 	.word	0x20000508
    4dc0:	20000f40 	.word	0x20000f40
    4dc4:	f0003fff 	.word	0xf0003fff
    4dc8:	0000a382 	.word	0x0000a382
    4dcc:	200004f8 	.word	0x200004f8
    4dd0:	200004fc 	.word	0x200004fc
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4dd4:	2203      	movs	r2, #3
    4dd6:	4210      	tst	r0, r2
    4dd8:	d02e      	beq.n	4e38 <USB_Handler+0x3e8>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4dda:	2002      	movs	r0, #2
    4ddc:	015a      	lsls	r2, r3, #5
    4dde:	18ad      	adds	r5, r5, r2
    4de0:	35ff      	adds	r5, #255	; 0xff
    4de2:	7a2e      	ldrb	r6, [r5, #8]
    4de4:	4206      	tst	r6, r0
    4de6:	d015      	beq.n	4e14 <USB_Handler+0x3c4>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4de8:	7228      	strb	r0, [r5, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4dea:	2580      	movs	r5, #128	; 0x80
    4dec:	4881      	ldr	r0, [pc, #516]	; (4ff4 <USB_Handler+0x5a4>)
    4dee:	426d      	negs	r5, r5
    4df0:	432c      	orrs	r4, r5
    4df2:	7184      	strb	r4, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4df4:	4c80      	ldr	r4, [pc, #512]	; (4ff8 <USB_Handler+0x5a8>)
    4df6:	18a2      	adds	r2, r4, r2
    4df8:	3210      	adds	r2, #16
    4dfa:	6852      	ldr	r2, [r2, #4]
    4dfc:	0492      	lsls	r2, r2, #18
    4dfe:	0c92      	lsrs	r2, r2, #18
    4e00:	8042      	strh	r2, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4e02:	078a      	lsls	r2, r1, #30
    4e04:	d100      	bne.n	4e08 <USB_Handler+0x3b8>
    4e06:	e0f3      	b.n	4ff0 <USB_Handler+0x5a0>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    4e08:	330d      	adds	r3, #13
    4e0a:	011b      	lsls	r3, r3, #4
    4e0c:	18fb      	adds	r3, r7, r3
    4e0e:	685b      	ldr	r3, [r3, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4e10:	4978      	ldr	r1, [pc, #480]	; (4ff4 <USB_Handler+0x5a4>)
    4e12:	e7ca      	b.n	4daa <USB_Handler+0x35a>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4e14:	2601      	movs	r6, #1
    4e16:	7a28      	ldrb	r0, [r5, #8]
    4e18:	4230      	tst	r0, r6
    4e1a:	d0f2      	beq.n	4e02 <USB_Handler+0x3b2>
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4e1c:	4875      	ldr	r0, [pc, #468]	; (4ff4 <USB_Handler+0x5a4>)
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4e1e:	722e      	strb	r6, [r5, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4e20:	7184      	strb	r4, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4e22:	4c75      	ldr	r4, [pc, #468]	; (4ff8 <USB_Handler+0x5a8>)
    4e24:	18a4      	adds	r4, r4, r2
    4e26:	6862      	ldr	r2, [r4, #4]
    4e28:	0492      	lsls	r2, r2, #18
    4e2a:	0c92      	lsrs	r2, r2, #18
    4e2c:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4e2e:	6862      	ldr	r2, [r4, #4]
    4e30:	0112      	lsls	r2, r2, #4
    4e32:	0c92      	lsrs	r2, r2, #18
    4e34:	8082      	strh	r2, [r0, #4]
    4e36:	e7e4      	b.n	4e02 <USB_Handler+0x3b2>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4e38:	220c      	movs	r2, #12
    4e3a:	4210      	tst	r0, r2
    4e3c:	d03d      	beq.n	4eba <USB_Handler+0x46a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4e3e:	2008      	movs	r0, #8
    4e40:	015e      	lsls	r6, r3, #5
    4e42:	19ad      	adds	r5, r5, r6
    4e44:	35ff      	adds	r5, #255	; 0xff
    4e46:	7a2a      	ldrb	r2, [r5, #8]
    4e48:	4202      	tst	r2, r0
    4e4a:	d01e      	beq.n	4e8a <USB_Handler+0x43a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4e4c:	7228      	strb	r0, [r5, #8]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4e4e:	486a      	ldr	r0, [pc, #424]	; (4ff8 <USB_Handler+0x5a8>)
    4e50:	1980      	adds	r0, r0, r6
    4e52:	2602      	movs	r6, #2
    4e54:	7e85      	ldrb	r5, [r0, #26]
    4e56:	4235      	tst	r5, r6
    4e58:	d002      	beq.n	4e60 <USB_Handler+0x410>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4e5a:	7e85      	ldrb	r5, [r0, #26]
    4e5c:	43b5      	bics	r5, r6
    4e5e:	7685      	strb	r5, [r0, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4e60:	2080      	movs	r0, #128	; 0x80
    4e62:	4240      	negs	r0, r0
    4e64:	4304      	orrs	r4, r0
    4e66:	4863      	ldr	r0, [pc, #396]	; (4ff4 <USB_Handler+0x5a4>)
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4e68:	9a02      	ldr	r2, [sp, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4e6a:	7184      	strb	r4, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4e6c:	6838      	ldr	r0, [r7, #0]
    4e6e:	0152      	lsls	r2, r2, #5
    4e70:	1882      	adds	r2, r0, r2
    4e72:	79d2      	ldrb	r2, [r2, #7]
    4e74:	0792      	lsls	r2, r2, #30
    4e76:	d500      	bpl.n	4e7a <USB_Handler+0x42a>
    4e78:	e0ba      	b.n	4ff0 <USB_Handler+0x5a0>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4e7a:	220c      	movs	r2, #12
    4e7c:	4211      	tst	r1, r2
    4e7e:	d100      	bne.n	4e82 <USB_Handler+0x432>
    4e80:	e0b6      	b.n	4ff0 <USB_Handler+0x5a0>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4e82:	011b      	lsls	r3, r3, #4
    4e84:	18fb      	adds	r3, r7, r3
    4e86:	33d8      	adds	r3, #216	; 0xd8
    4e88:	e76d      	b.n	4d66 <USB_Handler+0x316>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4e8a:	2004      	movs	r0, #4
    4e8c:	7a2a      	ldrb	r2, [r5, #8]
    4e8e:	4202      	tst	r2, r0
    4e90:	d0f3      	beq.n	4e7a <USB_Handler+0x42a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4e92:	7228      	strb	r0, [r5, #8]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4e94:	4858      	ldr	r0, [pc, #352]	; (4ff8 <USB_Handler+0x5a8>)
    4e96:	1980      	adds	r0, r0, r6
    4e98:	2602      	movs	r6, #2
    4e9a:	7a85      	ldrb	r5, [r0, #10]
    4e9c:	4235      	tst	r5, r6
    4e9e:	d002      	beq.n	4ea6 <USB_Handler+0x456>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4ea0:	7a85      	ldrb	r5, [r0, #10]
    4ea2:	43b5      	bics	r5, r6
    4ea4:	7285      	strb	r5, [r0, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4ea6:	4853      	ldr	r0, [pc, #332]	; (4ff4 <USB_Handler+0x5a4>)
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4ea8:	9a02      	ldr	r2, [sp, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4eaa:	7184      	strb	r4, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4eac:	6838      	ldr	r0, [r7, #0]
    4eae:	0152      	lsls	r2, r2, #5
    4eb0:	1882      	adds	r2, r0, r2
    4eb2:	79d2      	ldrb	r2, [r2, #7]
    4eb4:	07d2      	lsls	r2, r2, #31
    4eb6:	d5e0      	bpl.n	4e7a <USB_Handler+0x42a>
    4eb8:	e09a      	b.n	4ff0 <USB_Handler+0x5a0>
    4eba:	3301      	adds	r3, #1
    4ebc:	3601      	adds	r6, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4ebe:	2b08      	cmp	r3, #8
    4ec0:	d000      	beq.n	4ec4 <USB_Handler+0x474>
    4ec2:	e726      	b.n	4d12 <USB_Handler+0x2c2>
    4ec4:	e094      	b.n	4ff0 <USB_Handler+0x5a0>
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4ec6:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4ec8:	8bac      	ldrh	r4, [r5, #28]
    4eca:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4ecc:	421c      	tst	r4, r3
    4ece:	d026      	beq.n	4f1e <USB_Handler+0x4ce>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4ed0:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    4ed2:	4b4a      	ldr	r3, [pc, #296]	; (4ffc <USB_Handler+0x5ac>)
    4ed4:	681b      	ldr	r3, [r3, #0]
    4ed6:	469c      	mov	ip, r3
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    4ed8:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    4eda:	001d      	movs	r5, r3
    4edc:	002a      	movs	r2, r5
    4ede:	4661      	mov	r1, ip
    4ee0:	409a      	lsls	r2, r3
    4ee2:	4211      	tst	r1, r2
    4ee4:	d010      	beq.n	4f08 <USB_Handler+0x4b8>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    4ee6:	0019      	movs	r1, r3
    4ee8:	683a      	ldr	r2, [r7, #0]
    4eea:	3108      	adds	r1, #8
    4eec:	0149      	lsls	r1, r1, #5
    4eee:	5c88      	ldrb	r0, [r1, r2]
    4ef0:	0680      	lsls	r0, r0, #26
    4ef2:	0f40      	lsrs	r0, r0, #29
    4ef4:	2803      	cmp	r0, #3
    4ef6:	d107      	bne.n	4f08 <USB_Handler+0x4b8>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    4ef8:	5c88      	ldrb	r0, [r1, r2]
    4efa:	0780      	lsls	r0, r0, #30
    4efc:	0f80      	lsrs	r0, r0, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    4efe:	2801      	cmp	r0, #1
    4f00:	d102      	bne.n	4f08 <USB_Handler+0x4b8>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    4f02:	1852      	adds	r2, r2, r1
    4f04:	2110      	movs	r1, #16
    4f06:	7111      	strb	r1, [r2, #4]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    4f08:	3301      	adds	r3, #1
    4f0a:	2b08      	cmp	r3, #8
    4f0c:	d1e6      	bne.n	4edc <USB_Handler+0x48c>
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4f0e:	003b      	movs	r3, r7
    4f10:	33a5      	adds	r3, #165	; 0xa5
    4f12:	781b      	ldrb	r3, [r3, #0]
    4f14:	07db      	lsls	r3, r3, #31
    4f16:	d502      	bpl.n	4f1e <USB_Handler+0x4ce>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    4f18:	687b      	ldr	r3, [r7, #4]
    4f1a:	0038      	movs	r0, r7
    4f1c:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_RST) {
    4f1e:	2308      	movs	r3, #8
    4f20:	421c      	tst	r4, r3
    4f22:	d00c      	beq.n	4f3e <USB_Handler+0x4ee>
			host_pipe_job_busy_status = 0;
    4f24:	2100      	movs	r1, #0
    4f26:	4a35      	ldr	r2, [pc, #212]	; (4ffc <USB_Handler+0x5ac>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    4f28:	6830      	ldr	r0, [r6, #0]
			host_pipe_job_busy_status = 0;
    4f2a:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    4f2c:	6802      	ldr	r2, [r0, #0]
    4f2e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4f30:	0003      	movs	r3, r0
    4f32:	33a5      	adds	r3, #165	; 0xa5
    4f34:	781b      	ldrb	r3, [r3, #0]
    4f36:	079b      	lsls	r3, r3, #30
    4f38:	d501      	bpl.n	4f3e <USB_Handler+0x4ee>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    4f3a:	6883      	ldr	r3, [r0, #8]
    4f3c:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    4f3e:	2340      	movs	r3, #64	; 0x40
    4f40:	421c      	tst	r4, r3
    4f42:	d009      	beq.n	4f58 <USB_Handler+0x508>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    4f44:	6830      	ldr	r0, [r6, #0]
    4f46:	6802      	ldr	r2, [r0, #0]
    4f48:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    4f4a:	0003      	movs	r3, r0
    4f4c:	33a5      	adds	r3, #165	; 0xa5
    4f4e:	781b      	ldrb	r3, [r3, #0]
    4f50:	06db      	lsls	r3, r3, #27
    4f52:	d501      	bpl.n	4f58 <USB_Handler+0x508>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    4f54:	6943      	ldr	r3, [r0, #20]
    4f56:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    4f58:	2320      	movs	r3, #32
    4f5a:	421c      	tst	r4, r3
    4f5c:	d009      	beq.n	4f72 <USB_Handler+0x522>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    4f5e:	6830      	ldr	r0, [r6, #0]
    4f60:	6802      	ldr	r2, [r0, #0]
    4f62:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    4f64:	0003      	movs	r3, r0
    4f66:	33a5      	adds	r3, #165	; 0xa5
    4f68:	781b      	ldrb	r3, [r3, #0]
    4f6a:	071b      	lsls	r3, r3, #28
    4f6c:	d501      	bpl.n	4f72 <USB_Handler+0x522>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    4f6e:	6903      	ldr	r3, [r0, #16]
    4f70:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4f72:	2310      	movs	r3, #16
    4f74:	421c      	tst	r4, r3
    4f76:	d009      	beq.n	4f8c <USB_Handler+0x53c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4f78:	6830      	ldr	r0, [r6, #0]
    4f7a:	6802      	ldr	r2, [r0, #0]
    4f7c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    4f7e:	0003      	movs	r3, r0
    4f80:	33a5      	adds	r3, #165	; 0xa5
    4f82:	781b      	ldrb	r3, [r3, #0]
    4f84:	075b      	lsls	r3, r3, #29
    4f86:	d501      	bpl.n	4f8c <USB_Handler+0x53c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    4f88:	68c3      	ldr	r3, [r0, #12]
    4f8a:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    4f8c:	2380      	movs	r3, #128	; 0x80
    4f8e:	421c      	tst	r4, r3
    4f90:	d00c      	beq.n	4fac <USB_Handler+0x55c>
			host_pipe_job_busy_status = 0;
    4f92:	2100      	movs	r1, #0
    4f94:	4a19      	ldr	r2, [pc, #100]	; (4ffc <USB_Handler+0x5ac>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4f96:	6830      	ldr	r0, [r6, #0]
			host_pipe_job_busy_status = 0;
    4f98:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4f9a:	6802      	ldr	r2, [r0, #0]
    4f9c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    4f9e:	0003      	movs	r3, r0
    4fa0:	33a5      	adds	r3, #165	; 0xa5
    4fa2:	781b      	ldrb	r3, [r3, #0]
    4fa4:	069b      	lsls	r3, r3, #26
    4fa6:	d501      	bpl.n	4fac <USB_Handler+0x55c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    4fa8:	6983      	ldr	r3, [r0, #24]
    4faa:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4fac:	2380      	movs	r3, #128	; 0x80
    4fae:	005b      	lsls	r3, r3, #1
    4fb0:	421c      	tst	r4, r3
    4fb2:	d00c      	beq.n	4fce <USB_Handler+0x57e>
			host_pipe_job_busy_status = 0;
    4fb4:	2100      	movs	r1, #0
    4fb6:	4a11      	ldr	r2, [pc, #68]	; (4ffc <USB_Handler+0x5ac>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4fb8:	6830      	ldr	r0, [r6, #0]
			host_pipe_job_busy_status = 0;
    4fba:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4fbc:	6802      	ldr	r2, [r0, #0]
    4fbe:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4fc0:	0003      	movs	r3, r0
    4fc2:	33a5      	adds	r3, #165	; 0xa5
    4fc4:	781b      	ldrb	r3, [r3, #0]
    4fc6:	065b      	lsls	r3, r3, #25
    4fc8:	d501      	bpl.n	4fce <USB_Handler+0x57e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    4fca:	69c3      	ldr	r3, [r0, #28]
    4fcc:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4fce:	2380      	movs	r3, #128	; 0x80
    4fd0:	009b      	lsls	r3, r3, #2
    4fd2:	421c      	tst	r4, r3
    4fd4:	d00c      	beq.n	4ff0 <USB_Handler+0x5a0>
			host_pipe_job_busy_status = 0;
    4fd6:	2100      	movs	r1, #0
    4fd8:	4a08      	ldr	r2, [pc, #32]	; (4ffc <USB_Handler+0x5ac>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    4fda:	6830      	ldr	r0, [r6, #0]
			host_pipe_job_busy_status = 0;
    4fdc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    4fde:	6802      	ldr	r2, [r0, #0]
    4fe0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4fe2:	0003      	movs	r3, r0
    4fe4:	33a5      	adds	r3, #165	; 0xa5
    4fe6:	781b      	ldrb	r3, [r3, #0]
    4fe8:	2b7f      	cmp	r3, #127	; 0x7f
    4fea:	d901      	bls.n	4ff0 <USB_Handler+0x5a0>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    4fec:	6a03      	ldr	r3, [r0, #32]
    4fee:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4ff0:	b005      	add	sp, #20
    4ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ff4:	200004fc 	.word	0x200004fc
    4ff8:	20000f40 	.word	0x20000f40
    4ffc:	20000504 	.word	0x20000504

00005000 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    5000:	2200      	movs	r2, #0
	module_config->run_in_standby = 1;
    5002:	2301      	movs	r3, #1
	module_config->select_host_mode = 0;
    5004:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    5006:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    5008:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    500a:	70c3      	strb	r3, [r0, #3]
}
    500c:	4770      	bx	lr
	...

00005010 <usb_init>:
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    5010:	2300      	movs	r3, #0
{
    5012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5014:	0004      	movs	r4, r0
    5016:	0017      	movs	r7, r2
	host_pipe_job_busy_status = 0;
    5018:	4a69      	ldr	r2, [pc, #420]	; (51c0 <usb_init+0x1b0>)
{
    501a:	000d      	movs	r5, r1
	host_pipe_job_busy_status = 0;
    501c:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    501e:	4a69      	ldr	r2, [pc, #420]	; (51c4 <usb_init+0x1b4>)

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    5020:	6021      	str	r1, [r4, #0]
	_usb_instances = module_inst;
    5022:	6010      	str	r0, [r2, #0]
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5024:	2220      	movs	r2, #32
    5026:	4968      	ldr	r1, [pc, #416]	; (51c8 <usb_init+0x1b8>)
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5028:	ae01      	add	r6, sp, #4
    502a:	69c8      	ldr	r0, [r1, #28]
    502c:	4302      	orrs	r2, r0
    502e:	61ca      	str	r2, [r1, #28]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5030:	2201      	movs	r2, #1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5032:	7073      	strb	r3, [r6, #1]
	config->powersave    = false;
    5034:	70f3      	strb	r3, [r6, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    5036:	3306      	adds	r3, #6
    5038:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    503a:	0031      	movs	r1, r6
    503c:	2018      	movs	r0, #24
    503e:	4b63      	ldr	r3, [pc, #396]	; (51cc <usb_init+0x1bc>)
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5040:	70b2      	strb	r2, [r6, #2]
    5042:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    5044:	2306      	movs	r3, #6
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    5046:	0031      	movs	r1, r6
	pin_config.mux_position = MUX_PA25G_USB_DP;
    5048:	7033      	strb	r3, [r6, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    504a:	2019      	movs	r0, #25
    504c:	4b5f      	ldr	r3, [pc, #380]	; (51cc <usb_init+0x1bc>)
    504e:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    5050:	466a      	mov	r2, sp
    5052:	78bb      	ldrb	r3, [r7, #2]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    5054:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = module_config->source_generator;
    5056:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    5058:	2006      	movs	r0, #6
    505a:	4b5d      	ldr	r3, [pc, #372]	; (51d0 <usb_init+0x1c0>)
    505c:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    505e:	4b5d      	ldr	r3, [pc, #372]	; (51d4 <usb_init+0x1c4>)
    5060:	2006      	movs	r0, #6
    5062:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    5064:	2201      	movs	r2, #1
    5066:	782b      	ldrb	r3, [r5, #0]
    5068:	4313      	orrs	r3, r2
    506a:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    506c:	78ab      	ldrb	r3, [r5, #2]
    506e:	07db      	lsls	r3, r3, #31
    5070:	d4fc      	bmi.n	506c <usb_init+0x5c>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5072:	2103      	movs	r1, #3
    5074:	4b58      	ldr	r3, [pc, #352]	; (51d8 <usb_init+0x1c8>)
    5076:	78da      	ldrb	r2, [r3, #3]
    5078:	438a      	bics	r2, r1
    507a:	0011      	movs	r1, r2
    507c:	2202      	movs	r2, #2
    507e:	430a      	orrs	r2, r1
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5080:	210c      	movs	r1, #12
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5082:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5084:	78da      	ldrb	r2, [r3, #3]
    5086:	438a      	bics	r2, r1
    5088:	0011      	movs	r1, r2
    508a:	2208      	movs	r2, #8
    508c:	430a      	orrs	r2, r1

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    508e:	211f      	movs	r1, #31
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5090:	70da      	strb	r2, [r3, #3]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    5092:	4a52      	ldr	r2, [pc, #328]	; (51dc <usb_init+0x1cc>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    5094:	6813      	ldr	r3, [r2, #0]
    5096:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    5098:	400b      	ands	r3, r1
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    509a:	428b      	cmp	r3, r1
    509c:	d100      	bne.n	50a0 <usb_init+0x90>
		pad_transn = 5;
    509e:	2305      	movs	r3, #5
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    50a0:	8d28      	ldrh	r0, [r5, #40]	; 0x28
    50a2:	4e4f      	ldr	r6, [pc, #316]	; (51e0 <usb_init+0x1d0>)
    50a4:	400b      	ands	r3, r1
    50a6:	019b      	lsls	r3, r3, #6
    50a8:	4030      	ands	r0, r6
    50aa:	4303      	orrs	r3, r0
    50ac:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    50ae:	6813      	ldr	r3, [r2, #0]
    50b0:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    50b2:	400b      	ands	r3, r1
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    50b4:	2b1f      	cmp	r3, #31
    50b6:	d100      	bne.n	50ba <usb_init+0xaa>
		pad_transp = 29;
    50b8:	3b02      	subs	r3, #2
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    50ba:	201f      	movs	r0, #31
    50bc:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    50be:	4003      	ands	r3, r0
    50c0:	4381      	bics	r1, r0
    50c2:	430b      	orrs	r3, r1

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    50c4:	2107      	movs	r1, #7
	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    50c6:	852b      	strh	r3, [r5, #40]	; 0x28
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    50c8:	6813      	ldr	r3, [r2, #0]
    50ca:	0ddb      	lsrs	r3, r3, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    50cc:	400b      	ands	r3, r1
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    50ce:	428b      	cmp	r3, r1
    50d0:	d100      	bne.n	50d4 <usb_init+0xc4>
		pad_trim = 3;
    50d2:	2303      	movs	r3, #3
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    50d4:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    50d6:	400b      	ands	r3, r1
    50d8:	4942      	ldr	r1, [pc, #264]	; (51e4 <usb_init+0x1d4>)
    50da:	031b      	lsls	r3, r3, #12
    50dc:	400a      	ands	r2, r1

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    50de:	217f      	movs	r1, #127	; 0x7f
	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    50e0:	4313      	orrs	r3, r2
    50e2:	852b      	strh	r3, [r5, #40]	; 0x28
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    50e4:	782b      	ldrb	r3, [r5, #0]
    50e6:	783a      	ldrb	r2, [r7, #0]
    50e8:	400b      	ands	r3, r1
    50ea:	01d2      	lsls	r2, r2, #7
    50ec:	4313      	orrs	r3, r2
    50ee:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    50f0:	787a      	ldrb	r2, [r7, #1]
    50f2:	782b      	ldrb	r3, [r5, #0]
    50f4:	397e      	subs	r1, #126	; 0x7e
    50f6:	400a      	ands	r2, r1
    50f8:	3103      	adds	r1, #3
    50fa:	0092      	lsls	r2, r2, #2
    50fc:	438b      	bics	r3, r1
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    50fe:	483a      	ldr	r0, [pc, #232]	; (51e8 <usb_init+0x1d8>)
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    5100:	4313      	orrs	r3, r2
    5102:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    5104:	6268      	str	r0, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    5106:	78fb      	ldrb	r3, [r7, #3]
    5108:	2b01      	cmp	r3, #1
    510a:	d14f      	bne.n	51ac <usb_init+0x19c>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    510c:	6822      	ldr	r2, [r4, #0]
    510e:	3108      	adds	r1, #8
    5110:	8913      	ldrh	r3, [r2, #8]
    5112:	438b      	bics	r3, r1
    5114:	8113      	strh	r3, [r2, #8]
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    5116:	2280      	movs	r2, #128	; 0x80
    5118:	2100      	movs	r1, #0
    511a:	0052      	lsls	r2, r2, #1
    511c:	4b33      	ldr	r3, [pc, #204]	; (51ec <usb_init+0x1dc>)
    511e:	4798      	blx	r3
    5120:	0022      	movs	r2, r4
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    5122:	2100      	movs	r1, #0
    5124:	1d23      	adds	r3, r4, #4
    5126:	3224      	adds	r2, #36	; 0x24
    5128:	c302      	stmia	r3!, {r1}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    512a:	4293      	cmp	r3, r2
    512c:	d1fc      	bne.n	5128 <usb_init+0x118>
    512e:	0021      	movs	r1, r4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    5130:	2200      	movs	r2, #0
    5132:	31a4      	adds	r1, #164	; 0xa4
    5134:	601a      	str	r2, [r3, #0]
    5136:	605a      	str	r2, [r3, #4]
    5138:	609a      	str	r2, [r3, #8]
    513a:	60da      	str	r2, [r3, #12]
    513c:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    513e:	428b      	cmp	r3, r1
    5140:	d1f8      	bne.n	5134 <usb_init+0x124>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    5142:	701a      	strb	r2, [r3, #0]
	module_inst->host_enabled_callback_mask = 0;
    5144:	0023      	movs	r3, r4
    5146:	0021      	movs	r1, r4
    5148:	33a5      	adds	r3, #165	; 0xa5
    514a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    514c:	2200      	movs	r2, #0
    514e:	3301      	adds	r3, #1
    5150:	31ae      	adds	r1, #174	; 0xae
    5152:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    5154:	721a      	strb	r2, [r3, #8]
    5156:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    5158:	428b      	cmp	r3, r1
    515a:	d1fa      	bne.n	5152 <usb_init+0x142>
    515c:	0023      	movs	r3, r4
    515e:	0022      	movs	r2, r4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    5160:	2100      	movs	r1, #0
    5162:	33b8      	adds	r3, #184	; 0xb8
    5164:	32d4      	adds	r2, #212	; 0xd4
    5166:	c302      	stmia	r3!, {r1}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    5168:	4293      	cmp	r3, r2
    516a:	d1fc      	bne.n	5166 <usb_init+0x156>
    516c:	0021      	movs	r1, r4
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    516e:	2200      	movs	r2, #0
    5170:	3155      	adds	r1, #85	; 0x55
    5172:	31ff      	adds	r1, #255	; 0xff
    5174:	601a      	str	r2, [r3, #0]
    5176:	605a      	str	r2, [r3, #4]
    5178:	609a      	str	r2, [r3, #8]
    517a:	60da      	str	r2, [r3, #12]
    517c:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    517e:	4299      	cmp	r1, r3
    5180:	d1f8      	bne.n	5174 <usb_init+0x164>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    5182:	23aa      	movs	r3, #170	; 0xaa
    5184:	005b      	lsls	r3, r3, #1
    5186:	52e2      	strh	r2, [r4, r3]
	module_inst->device_enabled_callback_mask = 0;
    5188:	3302      	adds	r3, #2
    518a:	52e2      	strh	r2, [r4, r3]
    518c:	0023      	movs	r3, r4
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    518e:	2200      	movs	r2, #0
    5190:	3359      	adds	r3, #89	; 0x59
    5192:	3461      	adds	r4, #97	; 0x61
    5194:	33ff      	adds	r3, #255	; 0xff
    5196:	34ff      	adds	r4, #255	; 0xff
    5198:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    519a:	721a      	strb	r2, [r3, #8]
    519c:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    519e:	429c      	cmp	r4, r3
    51a0:	d1fa      	bne.n	5198 <usb_init+0x188>
    51a2:	2280      	movs	r2, #128	; 0x80
    51a4:	4b12      	ldr	r3, [pc, #72]	; (51f0 <usb_init+0x1e0>)

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    51a6:	2000      	movs	r0, #0
    51a8:	601a      	str	r2, [r3, #0]
    51aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    51ac:	2b00      	cmp	r3, #0
    51ae:	d1b2      	bne.n	5116 <usb_init+0x106>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    51b0:	250c      	movs	r5, #12
    51b2:	6822      	ldr	r2, [r4, #0]
    51b4:	8913      	ldrh	r3, [r2, #8]
    51b6:	43ab      	bics	r3, r5
    51b8:	4319      	orrs	r1, r3
    51ba:	8111      	strh	r1, [r2, #8]
    51bc:	e7ab      	b.n	5116 <usb_init+0x106>
    51be:	46c0      	nop			; (mov r8, r8)
    51c0:	20000504 	.word	0x20000504
    51c4:	200004f4 	.word	0x200004f4
    51c8:	40000400 	.word	0x40000400
    51cc:	00007c91 	.word	0x00007c91
    51d0:	00007bbd 	.word	0x00007bbd
    51d4:	00007b35 	.word	0x00007b35
    51d8:	41005000 	.word	0x41005000
    51dc:	00806024 	.word	0x00806024
    51e0:	fffff83f 	.word	0xfffff83f
    51e4:	ffff8fff 	.word	0xffff8fff
    51e8:	20000f40 	.word	0x20000f40
    51ec:	0000924b 	.word	0x0000924b
    51f0:	e000e100 	.word	0xe000e100

000051f4 <_usart_wait_for_sync>:
	SercomUsart *const usart_hw = &(module->hw->USART);
    51f4:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    51f6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    51f8:	2b00      	cmp	r3, #0
    51fa:	d1fc      	bne.n	51f6 <_usart_wait_for_sync+0x2>
}
    51fc:	4770      	bx	lr
	...

00005200 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5200:	b5f0      	push	{r4, r5, r6, r7, lr}
    5202:	0007      	movs	r7, r0
    5204:	b093      	sub	sp, #76	; 0x4c
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5206:	4ba0      	ldr	r3, [pc, #640]	; (5488 <usart_init+0x288>)
	module->hw = hw;
    5208:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    520a:	0008      	movs	r0, r1
{
    520c:	0016      	movs	r6, r2
    520e:	9104      	str	r1, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5210:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5212:	2201      	movs	r2, #1
    5214:	9b04      	ldr	r3, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5216:	0005      	movs	r5, r0
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5218:	681b      	ldr	r3, [r3, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    521a:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    521c:	4213      	tst	r3, r2
    521e:	d000      	beq.n	5222 <usart_init+0x22>
    5220:	e10f      	b.n	5442 <usart_init+0x242>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5222:	9b04      	ldr	r3, [sp, #16]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    5224:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5226:	681c      	ldr	r4, [r3, #0]
    5228:	2302      	movs	r3, #2
    522a:	401c      	ands	r4, r3
    522c:	d000      	beq.n	5230 <usart_init+0x30>
    522e:	e108      	b.n	5442 <usart_init+0x242>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5230:	18eb      	adds	r3, r5, r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5232:	381b      	subs	r0, #27
    5234:	4098      	lsls	r0, r3
    5236:	0003      	movs	r3, r0
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5238:	4a94      	ldr	r2, [pc, #592]	; (548c <usart_init+0x28c>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    523a:	3514      	adds	r5, #20
    523c:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    523e:	b2ed      	uxtb	r5, r5
    5240:	430b      	orrs	r3, r1
    5242:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    5244:	0033      	movs	r3, r6
    5246:	332d      	adds	r3, #45	; 0x2d
    5248:	9302      	str	r3, [sp, #8]
    524a:	781b      	ldrb	r3, [r3, #0]
    524c:	a90c      	add	r1, sp, #48	; 0x30
    524e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5250:	0028      	movs	r0, r5
    5252:	4b8f      	ldr	r3, [pc, #572]	; (5490 <usart_init+0x290>)
    5254:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5256:	0028      	movs	r0, r5
    5258:	4b8e      	ldr	r3, [pc, #568]	; (5494 <usart_init+0x294>)
    525a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    525c:	9b02      	ldr	r3, [sp, #8]
    525e:	0021      	movs	r1, r4
    5260:	7818      	ldrb	r0, [r3, #0]
    5262:	4b8d      	ldr	r3, [pc, #564]	; (5498 <usart_init+0x298>)
    5264:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5266:	7af3      	ldrb	r3, [r6, #11]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5268:	2508      	movs	r5, #8
	module->character_size = config->character_size;
    526a:	717b      	strb	r3, [r7, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    526c:	1d73      	adds	r3, r6, #5
    526e:	7fdb      	ldrb	r3, [r3, #31]
    5270:	71bb      	strb	r3, [r7, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5272:	1db3      	adds	r3, r6, #6
    5274:	7fdb      	ldrb	r3, [r3, #31]
    5276:	71fb      	strb	r3, [r7, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5278:	7ef3      	ldrb	r3, [r6, #27]
    527a:	723b      	strb	r3, [r7, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    527c:	7f33      	ldrb	r3, [r6, #28]
    527e:	727b      	strb	r3, [r7, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5280:	683b      	ldr	r3, [r7, #0]
    5282:	9303      	str	r3, [sp, #12]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5284:	0018      	movs	r0, r3
    5286:	4b80      	ldr	r3, [pc, #512]	; (5488 <usart_init+0x288>)
    5288:	4798      	blx	r3
	uint16_t baud  = 0;
    528a:	ab0e      	add	r3, sp, #56	; 0x38
    528c:	801c      	strh	r4, [r3, #0]
	switch (config->sample_rate) {
    528e:	8a33      	ldrh	r3, [r6, #16]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5290:	3014      	adds	r0, #20
	switch (config->sample_rate) {
    5292:	9302      	str	r3, [sp, #8]
    5294:	2380      	movs	r3, #128	; 0x80
    5296:	9a02      	ldr	r2, [sp, #8]
    5298:	01db      	lsls	r3, r3, #7
    529a:	429a      	cmp	r2, r3
    529c:	d014      	beq.n	52c8 <usart_init+0xc8>
    529e:	d808      	bhi.n	52b2 <usart_init+0xb2>
    52a0:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    52a2:	2510      	movs	r5, #16
	switch (config->sample_rate) {
    52a4:	019b      	lsls	r3, r3, #6
    52a6:	429a      	cmp	r2, r3
    52a8:	d100      	bne.n	52ac <usart_init+0xac>
    52aa:	e0cd      	b.n	5448 <usart_init+0x248>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    52ac:	2510      	movs	r5, #16
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    52ae:	2400      	movs	r4, #0
    52b0:	e00a      	b.n	52c8 <usart_init+0xc8>
	switch (config->sample_rate) {
    52b2:	23c0      	movs	r3, #192	; 0xc0
    52b4:	9a02      	ldr	r2, [sp, #8]
    52b6:	01db      	lsls	r3, r3, #7
    52b8:	429a      	cmp	r2, r3
    52ba:	d100      	bne.n	52be <usart_init+0xbe>
    52bc:	e0c3      	b.n	5446 <usart_init+0x246>
    52be:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    52c0:	2503      	movs	r5, #3
	switch (config->sample_rate) {
    52c2:	021b      	lsls	r3, r3, #8
    52c4:	429a      	cmp	r2, r3
    52c6:	d1f1      	bne.n	52ac <usart_init+0xac>
	ctrla = (uint32_t)config->data_order |
    52c8:	6833      	ldr	r3, [r6, #0]
    52ca:	9306      	str	r3, [sp, #24]
		(uint32_t)config->mux_setting |
    52cc:	68f3      	ldr	r3, [r6, #12]
    52ce:	9307      	str	r3, [sp, #28]
		config->sample_adjustment |
    52d0:	6973      	ldr	r3, [r6, #20]
    52d2:	9308      	str	r3, [sp, #32]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    52d4:	7e33      	ldrb	r3, [r6, #24]
    52d6:	9309      	str	r3, [sp, #36]	; 0x24
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    52d8:	1df3      	adds	r3, r6, #7
    52da:	7fdb      	ldrb	r3, [r3, #31]
    52dc:	930a      	str	r3, [sp, #40]	; 0x28
	transfer_mode = (uint32_t)config->transfer_mode;
    52de:	6873      	ldr	r3, [r6, #4]
    52e0:	9305      	str	r3, [sp, #20]
    52e2:	0033      	movs	r3, r6
	switch (transfer_mode)
    52e4:	9a05      	ldr	r2, [sp, #20]
    52e6:	3308      	adds	r3, #8
    52e8:	2a00      	cmp	r2, #0
    52ea:	d100      	bne.n	52ee <usart_init+0xee>
    52ec:	e0ae      	b.n	544c <usart_init+0x24c>
    52ee:	2280      	movs	r2, #128	; 0x80
    52f0:	9905      	ldr	r1, [sp, #20]
    52f2:	0552      	lsls	r2, r2, #21
    52f4:	4291      	cmp	r1, r2
    52f6:	d10e      	bne.n	5316 <usart_init+0x116>
			if (!config->use_external_clock) {
    52f8:	7fdb      	ldrb	r3, [r3, #31]
    52fa:	2b00      	cmp	r3, #0
    52fc:	d10b      	bne.n	5316 <usart_init+0x116>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    52fe:	4b67      	ldr	r3, [pc, #412]	; (549c <usart_init+0x29c>)
    5300:	b2c0      	uxtb	r0, r0
    5302:	6a34      	ldr	r4, [r6, #32]
    5304:	4798      	blx	r3
    5306:	aa0e      	add	r2, sp, #56	; 0x38
    5308:	0001      	movs	r1, r0
    530a:	4b65      	ldr	r3, [pc, #404]	; (54a0 <usart_init+0x2a0>)
    530c:	0020      	movs	r0, r4
    530e:	4798      	blx	r3
	if (status_code != STATUS_OK) {
    5310:	2800      	cmp	r0, #0
    5312:	d000      	beq.n	5316 <usart_init+0x116>
    5314:	e095      	b.n	5442 <usart_init+0x242>
	if(config->encoding_format_enable) {
    5316:	7e73      	ldrb	r3, [r6, #25]
    5318:	2b00      	cmp	r3, #0
    531a:	d002      	beq.n	5322 <usart_init+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    531c:	7eb3      	ldrb	r3, [r6, #26]
    531e:	9a03      	ldr	r2, [sp, #12]
    5320:	7393      	strb	r3, [r2, #14]
	_usart_wait_for_sync(module);
    5322:	4b60      	ldr	r3, [pc, #384]	; (54a4 <usart_init+0x2a4>)
    5324:	0038      	movs	r0, r7
    5326:	4798      	blx	r3
	usart_hw->BAUD.reg = baud;
    5328:	ab0a      	add	r3, sp, #40	; 0x28
    532a:	8a1b      	ldrh	r3, [r3, #16]
    532c:	9a03      	ldr	r2, [sp, #12]
	ctrla |= transfer_mode;
    532e:	9c06      	ldr	r4, [sp, #24]
	usart_hw->BAUD.reg = baud;
    5330:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5332:	9b07      	ldr	r3, [sp, #28]
    5334:	431c      	orrs	r4, r3
    5336:	9b08      	ldr	r3, [sp, #32]
    5338:	431c      	orrs	r4, r3
    533a:	9b05      	ldr	r3, [sp, #20]
    533c:	431c      	orrs	r4, r3
    533e:	9b02      	ldr	r3, [sp, #8]
    5340:	431c      	orrs	r4, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5342:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5344:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5346:	431c      	orrs	r4, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    534a:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    534c:	431c      	orrs	r4, r3
	if (config->use_external_clock == false) {
    534e:	0033      	movs	r3, r6
    5350:	3308      	adds	r3, #8
    5352:	7fdb      	ldrb	r3, [r3, #31]
    5354:	2b00      	cmp	r3, #0
    5356:	d101      	bne.n	535c <usart_init+0x15c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5358:	3304      	adds	r3, #4
    535a:	431c      	orrs	r4, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    535c:	7e75      	ldrb	r5, [r6, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    535e:	7f33      	ldrb	r3, [r6, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5360:	02ad      	lsls	r5, r5, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5362:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5364:	431d      	orrs	r5, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5366:	7f73      	ldrb	r3, [r6, #29]
	ctrlb |= (uint32_t)config->character_size;
    5368:	7af2      	ldrb	r2, [r6, #11]
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    536a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    536c:	431d      	orrs	r5, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    536e:	1d73      	adds	r3, r6, #5
    5370:	7fdb      	ldrb	r3, [r3, #31]
    5372:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5374:	431d      	orrs	r5, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5376:	1db3      	adds	r3, r6, #6
    5378:	7fdb      	ldrb	r3, [r3, #31]
    537a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    537c:	432b      	orrs	r3, r5
	ctrlb |= (uint32_t)config->character_size;
    537e:	7ab5      	ldrb	r5, [r6, #10]
    5380:	4315      	orrs	r5, r2
    5382:	431d      	orrs	r5, r3
	if (config->parity != USART_PARITY_NONE) {
    5384:	8933      	ldrh	r3, [r6, #8]
    5386:	2bff      	cmp	r3, #255	; 0xff
    5388:	d100      	bne.n	538c <usart_init+0x18c>
    538a:	e075      	b.n	5478 <usart_init+0x278>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    538c:	2280      	movs	r2, #128	; 0x80
    538e:	0452      	lsls	r2, r2, #17
    5390:	4314      	orrs	r4, r2
		ctrlb |= config->parity;
    5392:	431d      	orrs	r5, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5394:	0033      	movs	r3, r6
    5396:	332c      	adds	r3, #44	; 0x2c
    5398:	781b      	ldrb	r3, [r3, #0]
    539a:	2b00      	cmp	r3, #0
    539c:	d103      	bne.n	53a6 <usart_init+0x1a6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    539e:	4b42      	ldr	r3, [pc, #264]	; (54a8 <usart_init+0x2a8>)
    53a0:	789b      	ldrb	r3, [r3, #2]
    53a2:	079b      	lsls	r3, r3, #30
    53a4:	d501      	bpl.n	53aa <usart_init+0x1aa>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    53a6:	2380      	movs	r3, #128	; 0x80
    53a8:	431c      	orrs	r4, r3
	_usart_wait_for_sync(module);
    53aa:	0038      	movs	r0, r7
    53ac:	4b3d      	ldr	r3, [pc, #244]	; (54a4 <usart_init+0x2a4>)
    53ae:	4798      	blx	r3
	usart_hw->CTRLB.reg = ctrlb;
    53b0:	9b03      	ldr	r3, [sp, #12]
	_usart_wait_for_sync(module);
    53b2:	0038      	movs	r0, r7
	usart_hw->CTRLB.reg = ctrlb;
    53b4:	605d      	str	r5, [r3, #4]
	_usart_wait_for_sync(module);
    53b6:	4b3b      	ldr	r3, [pc, #236]	; (54a4 <usart_init+0x2a4>)
    53b8:	4798      	blx	r3
	usart_hw->CTRLA.reg = ctrla;
    53ba:	9b03      	ldr	r3, [sp, #12]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    53bc:	2500      	movs	r5, #0
    53be:	601c      	str	r4, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    53c0:	2380      	movs	r3, #128	; 0x80
    53c2:	ac0d      	add	r4, sp, #52	; 0x34
    53c4:	7023      	strb	r3, [r4, #0]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    53c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    53c8:	7065      	strb	r5, [r4, #1]
    53ca:	930e      	str	r3, [sp, #56]	; 0x38
    53cc:	6b73      	ldr	r3, [r6, #52]	; 0x34
	config->powersave    = false;
    53ce:	70e5      	strb	r5, [r4, #3]
    53d0:	930f      	str	r3, [sp, #60]	; 0x3c
    53d2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    53d4:	70a5      	strb	r5, [r4, #2]
	uint32_t pad_pinmuxes[] = {
    53d6:	9310      	str	r3, [sp, #64]	; 0x40
    53d8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    53da:	9302      	str	r3, [sp, #8]
    53dc:	9311      	str	r3, [sp, #68]	; 0x44
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    53de:	2010      	movs	r0, #16
    53e0:	aa0a      	add	r2, sp, #40	; 0x28
    53e2:	00ab      	lsls	r3, r5, #2
    53e4:	1812      	adds	r2, r2, r0
    53e6:	58d0      	ldr	r0, [r2, r3]
    53e8:	b2e9      	uxtb	r1, r5

		if (current_pinmux == PINMUX_DEFAULT) {
    53ea:	2800      	cmp	r0, #0
    53ec:	d102      	bne.n	53f4 <usart_init+0x1f4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    53ee:	9804      	ldr	r0, [sp, #16]
    53f0:	4b2e      	ldr	r3, [pc, #184]	; (54ac <usart_init+0x2ac>)
    53f2:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    53f4:	1c43      	adds	r3, r0, #1
    53f6:	d005      	beq.n	5404 <usart_init+0x204>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    53f8:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    53fa:	0c00      	lsrs	r0, r0, #16
    53fc:	b2c0      	uxtb	r0, r0
    53fe:	0021      	movs	r1, r4
    5400:	4b2b      	ldr	r3, [pc, #172]	; (54b0 <usart_init+0x2b0>)
    5402:	4798      	blx	r3
    5404:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5406:	2d04      	cmp	r5, #4
    5408:	d1e9      	bne.n	53de <usart_init+0x1de>

	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->callback_reg_mask          = 0x00;
    540a:	003b      	movs	r3, r7
		module->callback[i]            = NULL;
    540c:	2400      	movs	r4, #0
	module->callback_reg_mask          = 0x00;
    540e:	3330      	adds	r3, #48	; 0x30
	module->remaining_tx_buffer_length = 0x0000;
    5410:	85fc      	strh	r4, [r7, #46]	; 0x2e
		module->callback[i]            = NULL;
    5412:	60fc      	str	r4, [r7, #12]
    5414:	613c      	str	r4, [r7, #16]
    5416:	617c      	str	r4, [r7, #20]
    5418:	61bc      	str	r4, [r7, #24]
    541a:	61fc      	str	r4, [r7, #28]
    541c:	623c      	str	r4, [r7, #32]
	module->tx_buffer_ptr              = NULL;
    541e:	62bc      	str	r4, [r7, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5420:	627c      	str	r4, [r7, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
    5422:	85bc      	strh	r4, [r7, #44]	; 0x2c
	module->callback_enable_mask       = 0x00;
	module->rx_status                  = STATUS_OK;
    5424:	709c      	strb	r4, [r3, #2]
	module->callback_reg_mask          = 0x00;
    5426:	701c      	strb	r4, [r3, #0]
	module->callback_enable_mask       = 0x00;
    5428:	705c      	strb	r4, [r3, #1]
	module->tx_status                  = STATUS_OK;
    542a:	70dc      	strb	r4, [r3, #3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    542c:	6838      	ldr	r0, [r7, #0]
    542e:	4b16      	ldr	r3, [pc, #88]	; (5488 <usart_init+0x288>)
    5430:	4798      	blx	r3
    5432:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5434:	4b1f      	ldr	r3, [pc, #124]	; (54b4 <usart_init+0x2b4>)
    5436:	4920      	ldr	r1, [pc, #128]	; (54b8 <usart_init+0x2b8>)
    5438:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
    543a:	0020      	movs	r0, r4
	_sercom_instances[instance_index] = module;
    543c:	4b1f      	ldr	r3, [pc, #124]	; (54bc <usart_init+0x2bc>)
    543e:	00ad      	lsls	r5, r5, #2
    5440:	50ef      	str	r7, [r5, r3]
}
    5442:	b013      	add	sp, #76	; 0x4c
    5444:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5446:	2508      	movs	r5, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5448:	2401      	movs	r4, #1
    544a:	e73d      	b.n	52c8 <usart_init+0xc8>
			if (config->use_external_clock) {
    544c:	7fdb      	ldrb	r3, [r3, #31]
    544e:	2b00      	cmp	r3, #0
    5450:	d007      	beq.n	5462 <usart_init+0x262>
				status_code =
    5452:	0023      	movs	r3, r4
    5454:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5456:	6a30      	ldr	r0, [r6, #32]
    5458:	9500      	str	r5, [sp, #0]
    545a:	aa0e      	add	r2, sp, #56	; 0x38
				status_code =
    545c:	4c18      	ldr	r4, [pc, #96]	; (54c0 <usart_init+0x2c0>)
    545e:	47a0      	blx	r4
    5460:	e756      	b.n	5310 <usart_init+0x110>
						_sercom_get_async_baud_val(config->baudrate,
    5462:	6a33      	ldr	r3, [r6, #32]
    5464:	b2c0      	uxtb	r0, r0
    5466:	930b      	str	r3, [sp, #44]	; 0x2c
    5468:	4b0c      	ldr	r3, [pc, #48]	; (549c <usart_init+0x29c>)
    546a:	4798      	blx	r3
				status_code =
    546c:	9500      	str	r5, [sp, #0]
						_sercom_get_async_baud_val(config->baudrate,
    546e:	0001      	movs	r1, r0
				status_code =
    5470:	0023      	movs	r3, r4
    5472:	aa0e      	add	r2, sp, #56	; 0x38
    5474:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5476:	e7f1      	b.n	545c <usart_init+0x25c>
		if(config->lin_slave_enable) {
    5478:	7ef3      	ldrb	r3, [r6, #27]
    547a:	2b00      	cmp	r3, #0
    547c:	d100      	bne.n	5480 <usart_init+0x280>
    547e:	e789      	b.n	5394 <usart_init+0x194>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5480:	2380      	movs	r3, #128	; 0x80
    5482:	04db      	lsls	r3, r3, #19
    5484:	431c      	orrs	r4, r3
    5486:	e785      	b.n	5394 <usart_init+0x194>
    5488:	0000221d 	.word	0x0000221d
    548c:	40000400 	.word	0x40000400
    5490:	00007bbd 	.word	0x00007bbd
    5494:	00007b35 	.word	0x00007b35
    5498:	0000207d 	.word	0x0000207d
    549c:	00007bd9 	.word	0x00007bd9
    54a0:	00001fbd 	.word	0x00001fbd
    54a4:	000051f5 	.word	0x000051f5
    54a8:	41002000 	.word	0x41002000
    54ac:	000020c1 	.word	0x000020c1
    54b0:	00007c91 	.word	0x00007c91
    54b4:	00005e1d 	.word	0x00005e1d
    54b8:	0000557d 	.word	0x0000557d
    54bc:	20001044 	.word	0x20001044
    54c0:	00001fe5 	.word	0x00001fe5

000054c4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    54c4:	b570      	push	{r4, r5, r6, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    54c6:	79c2      	ldrb	r2, [r0, #7]
{
    54c8:	000d      	movs	r5, r1
		return STATUS_ERR_DENIED;
    54ca:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    54cc:	2a00      	cmp	r2, #0
    54ce:	d00c      	beq.n	54ea <usart_write_wait+0x26>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    54d0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
		return STATUS_BUSY;
    54d2:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    54d4:	2a00      	cmp	r2, #0
    54d6:	d108      	bne.n	54ea <usart_write_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    54d8:	4b05      	ldr	r3, [pc, #20]	; (54f0 <usart_write_wait+0x2c>)
	SercomUsart *const usart_hw = &(module->hw->USART);
    54da:	6804      	ldr	r4, [r0, #0]
	_usart_wait_for_sync(module);
    54dc:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    54de:	2302      	movs	r3, #2
	usart_hw->DATA.reg = tx_data;
    54e0:	8525      	strh	r5, [r4, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    54e2:	7e22      	ldrb	r2, [r4, #24]
    54e4:	421a      	tst	r2, r3
    54e6:	d0fc      	beq.n	54e2 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    54e8:	2300      	movs	r3, #0
}
    54ea:	0018      	movs	r0, r3
    54ec:	bd70      	pop	{r4, r5, r6, pc}
    54ee:	46c0      	nop			; (mov r8, r8)
    54f0:	000051f5 	.word	0x000051f5

000054f4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    54f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    54f6:	0006      	movs	r6, r0
    54f8:	000f      	movs	r7, r1
    54fa:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    54fc:	2017      	movs	r0, #23
	if (length == 0) {
    54fe:	2a00      	cmp	r2, #0
    5500:	d027      	beq.n	5552 <usart_write_buffer_wait+0x5e>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5502:	79f3      	ldrb	r3, [r6, #7]
		return STATUS_ERR_DENIED;
    5504:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    5506:	2b00      	cmp	r3, #0
    5508:	d023      	beq.n	5552 <usart_write_buffer_wait+0x5e>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    550a:	6833      	ldr	r3, [r6, #0]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    550c:	0030      	movs	r0, r6
	SercomUsart *const usart_hw = &(module->hw->USART);
    550e:	9301      	str	r3, [sp, #4]
	_usart_wait_for_sync(module);
    5510:	4b18      	ldr	r3, [pc, #96]	; (5574 <usart_write_buffer_wait+0x80>)
    5512:	4798      	blx	r3

	uint16_t tx_pos = 0;
    5514:	2400      	movs	r4, #0
    5516:	2380      	movs	r3, #128	; 0x80
    5518:	025b      	lsls	r3, r3, #9
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    551a:	2101      	movs	r1, #1
    551c:	9a01      	ldr	r2, [sp, #4]
    551e:	7e12      	ldrb	r2, [r2, #24]
    5520:	420a      	tst	r2, r1
    5522:	d017      	beq.n	5554 <usart_write_buffer_wait+0x60>

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5524:	7972      	ldrb	r2, [r6, #5]
		uint16_t data_to_send = tx_data[tx_pos++];
    5526:	1863      	adds	r3, r4, r1
    5528:	b29b      	uxth	r3, r3
    552a:	5d39      	ldrb	r1, [r7, r4]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    552c:	2a01      	cmp	r2, #1
    552e:	d016      	beq.n	555e <usart_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    5530:	001c      	movs	r4, r3
    5532:	b289      	uxth	r1, r1
    5534:	3d01      	subs	r5, #1
			data_to_send |= (tx_data[tx_pos++] << 8);
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    5536:	0030      	movs	r0, r6
    5538:	4b0f      	ldr	r3, [pc, #60]	; (5578 <usart_write_buffer_wait+0x84>)
    553a:	b2ad      	uxth	r5, r5
    553c:	4798      	blx	r3
	while (length--) {
    553e:	2d00      	cmp	r5, #0
    5540:	d1e9      	bne.n	5516 <usart_write_buffer_wait+0x22>
    5542:	2380      	movs	r3, #128	; 0x80
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    5544:	2202      	movs	r2, #2
    5546:	025b      	lsls	r3, r3, #9
    5548:	9901      	ldr	r1, [sp, #4]
    554a:	7e09      	ldrb	r1, [r1, #24]
    554c:	4211      	tst	r1, r2
    554e:	d00c      	beq.n	556a <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    5550:	2000      	movs	r0, #0
}
    5552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5554:	3b01      	subs	r3, #1
			} else if (i == USART_TIMEOUT) {
    5556:	2b00      	cmp	r3, #0
    5558:	d1df      	bne.n	551a <usart_write_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
    555a:	2012      	movs	r0, #18
    555c:	e7f9      	b.n	5552 <usart_write_buffer_wait+0x5e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    555e:	5cfb      	ldrb	r3, [r7, r3]
    5560:	3402      	adds	r4, #2
    5562:	021b      	lsls	r3, r3, #8
    5564:	b2a4      	uxth	r4, r4
    5566:	4319      	orrs	r1, r3
    5568:	e7e4      	b.n	5534 <usart_write_buffer_wait+0x40>
    556a:	3b01      	subs	r3, #1
		} else if (i == USART_TIMEOUT) {
    556c:	2b00      	cmp	r3, #0
    556e:	d1eb      	bne.n	5548 <usart_write_buffer_wait+0x54>
    5570:	e7f3      	b.n	555a <usart_write_buffer_wait+0x66>
    5572:	46c0      	nop			; (mov r8, r8)
    5574:	000051f5 	.word	0x000051f5
    5578:	000054c5 	.word	0x000054c5

0000557c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    557e:	4b58      	ldr	r3, [pc, #352]	; (56e0 <_usart_interrupt_handler+0x164>)
    5580:	0080      	lsls	r0, r0, #2
    5582:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5584:	6825      	ldr	r5, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    5586:	69eb      	ldr	r3, [r5, #28]
	while (usart_is_syncing(module)) {
    5588:	2b00      	cmp	r3, #0
    558a:	d1fc      	bne.n	5586 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    558c:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    558e:	7daf      	ldrb	r7, [r5, #22]
    5590:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
    5592:	0023      	movs	r3, r4
    5594:	3330      	adds	r3, #48	; 0x30
    5596:	781a      	ldrb	r2, [r3, #0]
    5598:	785e      	ldrb	r6, [r3, #1]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    559a:	2301      	movs	r3, #1
	callback_status = module->callback_reg_mask &
    559c:	4016      	ands	r6, r2
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    559e:	421f      	tst	r7, r3
    55a0:	d019      	beq.n	55d6 <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
    55a2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    55a4:	2a00      	cmp	r2, #0
    55a6:	d100      	bne.n	55aa <_usart_interrupt_handler+0x2e>
    55a8:	e072      	b.n	5690 <_usart_interrupt_handler+0x114>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    55aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    55ac:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    55ae:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
    55b0:	62a1      	str	r1, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    55b2:	7961      	ldrb	r1, [r4, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    55b4:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    55b6:	2901      	cmp	r1, #1
    55b8:	d064      	beq.n	5684 <_usart_interrupt_handler+0x108>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    55ba:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    55bc:	05db      	lsls	r3, r3, #23
    55be:	0ddb      	lsrs	r3, r3, #23
    55c0:	852b      	strh	r3, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    55c2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    55c4:	3b01      	subs	r3, #1
    55c6:	b29b      	uxth	r3, r3
    55c8:	85e3      	strh	r3, [r4, #46]	; 0x2e
    55ca:	2b00      	cmp	r3, #0
    55cc:	d103      	bne.n	55d6 <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    55ce:	3301      	adds	r3, #1
    55d0:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    55d2:	3301      	adds	r3, #1
    55d4:	75ab      	strb	r3, [r5, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    55d6:	2302      	movs	r3, #2
    55d8:	421f      	tst	r7, r3
    55da:	d009      	beq.n	55f0 <_usart_interrupt_handler+0x74>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    55dc:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
    55de:	0023      	movs	r3, r4
    55e0:	2200      	movs	r2, #0
    55e2:	3333      	adds	r3, #51	; 0x33
    55e4:	701a      	strb	r2, [r3, #0]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    55e6:	07f3      	lsls	r3, r6, #31
    55e8:	d502      	bpl.n	55f0 <_usart_interrupt_handler+0x74>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    55ea:	0020      	movs	r0, r4
    55ec:	68e3      	ldr	r3, [r4, #12]
    55ee:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    55f0:	2304      	movs	r3, #4
    55f2:	421f      	tst	r7, r3
    55f4:	d027      	beq.n	5646 <_usart_interrupt_handler+0xca>

		if (module->remaining_rx_buffer_length) {
    55f6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    55f8:	2a00      	cmp	r2, #0
    55fa:	d100      	bne.n	55fe <_usart_interrupt_handler+0x82>
    55fc:	e06d      	b.n	56da <_usart_interrupt_handler+0x15e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    55fe:	8b6b      	ldrh	r3, [r5, #26]
    5600:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5602:	071a      	lsls	r2, r3, #28
    5604:	d446      	bmi.n	5694 <_usart_interrupt_handler+0x118>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5606:	223f      	movs	r2, #63	; 0x3f
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5608:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    560a:	d045      	beq.n	5698 <_usart_interrupt_handler+0x11c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    560c:	2202      	movs	r2, #2
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    560e:	211a      	movs	r1, #26
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5610:	4213      	tst	r3, r2
    5612:	d10f      	bne.n	5634 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5614:	2204      	movs	r2, #4
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5616:	211e      	movs	r1, #30
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5618:	4213      	tst	r3, r2
    561a:	d10b      	bne.n	5634 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    561c:	2201      	movs	r2, #1
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    561e:	2113      	movs	r1, #19
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5620:	4213      	tst	r3, r2
    5622:	d107      	bne.n	5634 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5624:	2210      	movs	r2, #16
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5626:	2142      	movs	r1, #66	; 0x42
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5628:	4213      	tst	r3, r2
    562a:	d103      	bne.n	5634 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    562c:	2220      	movs	r2, #32
    562e:	4213      	tst	r3, r2
    5630:	d004      	beq.n	563c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5632:	2141      	movs	r1, #65	; 0x41
    5634:	0023      	movs	r3, r4
    5636:	3332      	adds	r3, #50	; 0x32
    5638:	7019      	strb	r1, [r3, #0]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    563a:	836a      	strh	r2, [r5, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    563c:	0773      	lsls	r3, r6, #29
    563e:	d502      	bpl.n	5646 <_usart_interrupt_handler+0xca>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5640:	0020      	movs	r0, r4
    5642:	6963      	ldr	r3, [r4, #20]
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5644:	4798      	blx	r3
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5646:	2310      	movs	r3, #16
    5648:	421f      	tst	r7, r3
    564a:	d006      	beq.n	565a <_usart_interrupt_handler+0xde>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    564c:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    564e:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5650:	421e      	tst	r6, r3
    5652:	d002      	beq.n	565a <_usart_interrupt_handler+0xde>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5654:	0020      	movs	r0, r4
    5656:	69e3      	ldr	r3, [r4, #28]
    5658:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    565a:	2320      	movs	r3, #32
    565c:	421f      	tst	r7, r3
    565e:	d006      	beq.n	566e <_usart_interrupt_handler+0xf2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5660:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5662:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5664:	0733      	lsls	r3, r6, #28
    5666:	d502      	bpl.n	566e <_usart_interrupt_handler+0xf2>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5668:	0020      	movs	r0, r4
    566a:	69a3      	ldr	r3, [r4, #24]
    566c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    566e:	2308      	movs	r3, #8
    5670:	421f      	tst	r7, r3
    5672:	d006      	beq.n	5682 <_usart_interrupt_handler+0x106>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5674:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5676:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5678:	06b3      	lsls	r3, r6, #26
    567a:	d502      	bpl.n	5682 <_usart_interrupt_handler+0x106>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    567c:	6a23      	ldr	r3, [r4, #32]
    567e:	0020      	movs	r0, r4
    5680:	4798      	blx	r3
		}
	}
#endif
}
    5682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5684:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
    5686:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5688:	0209      	lsls	r1, r1, #8
    568a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    568c:	62a2      	str	r2, [r4, #40]	; 0x28
    568e:	e795      	b.n	55bc <_usart_interrupt_handler+0x40>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5690:	752b      	strb	r3, [r5, #20]
    5692:	e7a0      	b.n	55d6 <_usart_interrupt_handler+0x5a>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5694:	2237      	movs	r2, #55	; 0x37
    5696:	e7b7      	b.n	5608 <_usart_interrupt_handler+0x8c>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5698:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
    569a:	6a61      	ldr	r1, [r4, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    569c:	05db      	lsls	r3, r3, #23
    569e:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
    56a0:	b2da      	uxtb	r2, r3
    56a2:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
    56a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    56a6:	1c51      	adds	r1, r2, #1
    56a8:	6261      	str	r1, [r4, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    56aa:	7961      	ldrb	r1, [r4, #5]
    56ac:	2901      	cmp	r1, #1
    56ae:	d104      	bne.n	56ba <_usart_interrupt_handler+0x13e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    56b0:	0a1b      	lsrs	r3, r3, #8
    56b2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    56b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    56b6:	3301      	adds	r3, #1
    56b8:	6263      	str	r3, [r4, #36]	; 0x24
				if(--(module->remaining_rx_buffer_length) == 0) {
    56ba:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    56bc:	3b01      	subs	r3, #1
    56be:	b29b      	uxth	r3, r3
    56c0:	85a3      	strh	r3, [r4, #44]	; 0x2c
    56c2:	2b00      	cmp	r3, #0
    56c4:	d1bf      	bne.n	5646 <_usart_interrupt_handler+0xca>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    56c6:	2204      	movs	r2, #4
    56c8:	752a      	strb	r2, [r5, #20]
					module->rx_status = STATUS_OK;
    56ca:	0022      	movs	r2, r4
    56cc:	3232      	adds	r2, #50	; 0x32
    56ce:	7013      	strb	r3, [r2, #0]
					if (callback_status
    56d0:	07b3      	lsls	r3, r6, #30
    56d2:	d5b8      	bpl.n	5646 <_usart_interrupt_handler+0xca>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    56d4:	0020      	movs	r0, r4
    56d6:	6923      	ldr	r3, [r4, #16]
    56d8:	e7b4      	b.n	5644 <_usart_interrupt_handler+0xc8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    56da:	752b      	strb	r3, [r5, #20]
    56dc:	e7b3      	b.n	5646 <_usart_interrupt_handler+0xca>
    56de:	46c0      	nop			; (mov r8, r8)
    56e0:	20001044 	.word	0x20001044

000056e4 <spi_is_write_complete>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    56e4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    56e6:	7e18      	ldrb	r0, [r3, #24]
    56e8:	0780      	lsls	r0, r0, #30
    56ea:	0fc0      	lsrs	r0, r0, #31
}
    56ec:	4770      	bx	lr

000056ee <spi_is_ready_to_write>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    56ee:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    56f0:	7e18      	ldrb	r0, [r3, #24]
    56f2:	2301      	movs	r3, #1
    56f4:	4018      	ands	r0, r3
}
    56f6:	4770      	bx	lr

000056f8 <spi_is_ready_to_read>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    56f8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    56fa:	7e18      	ldrb	r0, [r3, #24]
    56fc:	0740      	lsls	r0, r0, #29
    56fe:	0fc0      	lsrs	r0, r0, #31
}
    5700:	4770      	bx	lr
	...

00005704 <spi_write>:
{
    5704:	b570      	push	{r4, r5, r6, lr}
	if (!spi_is_ready_to_write(module)) {
    5706:	4b06      	ldr	r3, [pc, #24]	; (5720 <spi_write+0x1c>)
{
    5708:	000c      	movs	r4, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
    570a:	6805      	ldr	r5, [r0, #0]
	if (!spi_is_ready_to_write(module)) {
    570c:	4798      	blx	r3
		return STATUS_BUSY;
    570e:	2305      	movs	r3, #5
	if (!spi_is_ready_to_write(module)) {
    5710:	2800      	cmp	r0, #0
    5712:	d003      	beq.n	571c <spi_write+0x18>
	return STATUS_OK;
    5714:	2300      	movs	r3, #0
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5716:	05e4      	lsls	r4, r4, #23
    5718:	0de4      	lsrs	r4, r4, #23
    571a:	62ac      	str	r4, [r5, #40]	; 0x28
}
    571c:	0018      	movs	r0, r3
    571e:	bd70      	pop	{r4, r5, r6, pc}
    5720:	000056ef 	.word	0x000056ef

00005724 <spi_read>:
{
    5724:	b570      	push	{r4, r5, r6, lr}
	if (!spi_is_ready_to_read(module)) {
    5726:	4b0d      	ldr	r3, [pc, #52]	; (575c <spi_read+0x38>)
{
    5728:	0006      	movs	r6, r0
    572a:	000c      	movs	r4, r1
	SercomSpi *const spi_module = &(module->hw->SPI);
    572c:	6805      	ldr	r5, [r0, #0]
	if (!spi_is_ready_to_read(module)) {
    572e:	4798      	blx	r3
		return STATUS_ERR_IO;
    5730:	2210      	movs	r2, #16
	if (!spi_is_ready_to_read(module)) {
    5732:	2800      	cmp	r0, #0
    5734:	d00d      	beq.n	5752 <spi_read+0x2e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5736:	2304      	movs	r3, #4
    5738:	8b69      	ldrh	r1, [r5, #26]
	enum status_code retval = STATUS_OK;
    573a:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    573c:	4219      	tst	r1, r3
    573e:	d001      	beq.n	5744 <spi_read+0x20>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5740:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    5742:	321e      	adds	r2, #30
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5744:	79b3      	ldrb	r3, [r6, #6]
    5746:	2b01      	cmp	r3, #1
    5748:	d105      	bne.n	5756 <spi_read+0x32>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    574a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    574c:	05db      	lsls	r3, r3, #23
    574e:	0ddb      	lsrs	r3, r3, #23
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5750:	8023      	strh	r3, [r4, #0]
}
    5752:	0010      	movs	r0, r2
    5754:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5756:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5758:	b2db      	uxtb	r3, r3
    575a:	e7f9      	b.n	5750 <spi_read+0x2c>
    575c:	000056f9 	.word	0x000056f9

00005760 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5760:	b5f0      	push	{r4, r5, r6, r7, lr}
    5762:	0005      	movs	r5, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5764:	6029      	str	r1, [r5, #0]
{
    5766:	0014      	movs	r4, r2

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5768:	680a      	ldr	r2, [r1, #0]
{
    576a:	b089      	sub	sp, #36	; 0x24
    576c:	000e      	movs	r6, r1
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    576e:	231c      	movs	r3, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5770:	0792      	lsls	r2, r2, #30
    5772:	d500      	bpl.n	5776 <spi_init+0x16>
    5774:	e0d4      	b.n	5920 <spi_init+0x1c0>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5776:	2701      	movs	r7, #1
    5778:	680b      	ldr	r3, [r1, #0]
    577a:	403b      	ands	r3, r7
    577c:	9301      	str	r3, [sp, #4]
    577e:	9a01      	ldr	r2, [sp, #4]
		return STATUS_BUSY;
    5780:	2305      	movs	r3, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    5782:	2a00      	cmp	r2, #0
    5784:	d000      	beq.n	5788 <spi_init+0x28>
    5786:	e0cb      	b.n	5920 <spi_init+0x1c0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5788:	0008      	movs	r0, r1
    578a:	4b6a      	ldr	r3, [pc, #424]	; (5934 <spi_init+0x1d4>)
    578c:	4798      	blx	r3
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    578e:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5790:	408f      	lsls	r7, r1
    5792:	4b69      	ldr	r3, [pc, #420]	; (5938 <spi_init+0x1d8>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5794:	3014      	adds	r0, #20
    5796:	6a1a      	ldr	r2, [r3, #32]
    5798:	4317      	orrs	r7, r2
    579a:	621f      	str	r7, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    579c:	1d63      	adds	r3, r4, #5
    579e:	7fdb      	ldrb	r3, [r3, #31]
    57a0:	aa02      	add	r2, sp, #8
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    57a2:	b2c7      	uxtb	r7, r0
	gclk_chan_conf.source_generator = config->generator_source;
    57a4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    57a6:	0011      	movs	r1, r2
    57a8:	0038      	movs	r0, r7
    57aa:	4b64      	ldr	r3, [pc, #400]	; (593c <spi_init+0x1dc>)
    57ac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    57ae:	0038      	movs	r0, r7
    57b0:	4b63      	ldr	r3, [pc, #396]	; (5940 <spi_init+0x1e0>)
    57b2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    57b4:	1d63      	adds	r3, r4, #5
    57b6:	7fd8      	ldrb	r0, [r3, #31]
    57b8:	9901      	ldr	r1, [sp, #4]
    57ba:	4b62      	ldr	r3, [pc, #392]	; (5944 <spi_init+0x1e4>)
    57bc:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    57be:	7823      	ldrb	r3, [r4, #0]
    57c0:	2b01      	cmp	r3, #1
    57c2:	d103      	bne.n	57cc <spi_init+0x6c>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    57c4:	6832      	ldr	r2, [r6, #0]
    57c6:	330b      	adds	r3, #11
    57c8:	4313      	orrs	r3, r2
    57ca:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    57cc:	7823      	ldrb	r3, [r4, #0]
    57ce:	2b00      	cmp	r3, #0
    57d0:	d103      	bne.n	57da <spi_init+0x7a>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    57d2:	6832      	ldr	r2, [r6, #0]
    57d4:	3308      	adds	r3, #8
    57d6:	4313      	orrs	r3, r2
    57d8:	6033      	str	r3, [r6, #0]
    57da:	002b      	movs	r3, r5
    57dc:	002a      	movs	r2, r5
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    57de:	2600      	movs	r6, #0
    57e0:	330c      	adds	r3, #12
    57e2:	3228      	adds	r2, #40	; 0x28
    57e4:	c340      	stmia	r3!, {r6}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    57e6:	429a      	cmp	r2, r3
    57e8:	d1fc      	bne.n	57e4 <spi_init+0x84>
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
    57ea:	002b      	movs	r3, r5
    57ec:	3336      	adds	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
    57ee:	86ae      	strh	r6, [r5, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
    57f0:	62ee      	str	r6, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
    57f2:	862e      	strh	r6, [r5, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
    57f4:	62ae      	str	r6, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
    57f6:	701e      	strb	r6, [r3, #0]
	module->enabled_callback           = 0x00;
    57f8:	705e      	strb	r6, [r3, #1]
	module->status                     = STATUS_OK;
    57fa:	709e      	strb	r6, [r3, #2]
	module->dir                        = SPI_DIRECTION_IDLE;
    57fc:	2303      	movs	r3, #3
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    57fe:	6828      	ldr	r0, [r5, #0]
	module->dir                        = SPI_DIRECTION_IDLE;
    5800:	726b      	strb	r3, [r5, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    5802:	4b4c      	ldr	r3, [pc, #304]	; (5934 <spi_init+0x1d4>)
	module->locked                     = false;
    5804:	712e      	strb	r6, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    5806:	4798      	blx	r3
    5808:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    580a:	4b4f      	ldr	r3, [pc, #316]	; (5948 <spi_init+0x1e8>)
    580c:	494f      	ldr	r1, [pc, #316]	; (594c <spi_init+0x1ec>)
    580e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5810:	4b4f      	ldr	r3, [pc, #316]	; (5950 <spi_init+0x1f0>)
    5812:	00bf      	lsls	r7, r7, #2
    5814:	50fd      	str	r5, [r7, r3]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5816:	2380      	movs	r3, #128	; 0x80
    5818:	aa02      	add	r2, sp, #8
    581a:	7113      	strb	r3, [r2, #4]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    581c:	2301      	movs	r3, #1
    581e:	7193      	strb	r3, [r2, #6]
	if(config->mode == SPI_MODE_SLAVE) {
    5820:	7823      	ldrb	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5822:	682f      	ldr	r7, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5824:	7156      	strb	r6, [r2, #5]
	config->powersave    = false;
    5826:	71d6      	strb	r6, [r2, #7]
	if(config->mode == SPI_MODE_SLAVE) {
    5828:	2b00      	cmp	r3, #0
    582a:	d100      	bne.n	582e <spi_init+0xce>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    582c:	7196      	strb	r6, [r2, #6]
	uint32_t pad_pinmuxes[] = {
    582e:	2600      	movs	r6, #0
    5830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5832:	9304      	str	r3, [sp, #16]
    5834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5836:	9305      	str	r3, [sp, #20]
    5838:	6b23      	ldr	r3, [r4, #48]	; 0x30
    583a:	9306      	str	r3, [sp, #24]
    583c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    583e:	9307      	str	r3, [sp, #28]
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5840:	00b3      	lsls	r3, r6, #2
    5842:	aa04      	add	r2, sp, #16
    5844:	5898      	ldr	r0, [r3, r2]
    5846:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
    5848:	2800      	cmp	r0, #0
    584a:	d102      	bne.n	5852 <spi_init+0xf2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    584c:	0038      	movs	r0, r7
    584e:	4b41      	ldr	r3, [pc, #260]	; (5954 <spi_init+0x1f4>)
    5850:	4798      	blx	r3
		if (current_pinmux != PINMUX_UNUSED) {
    5852:	1c43      	adds	r3, r0, #1
    5854:	d006      	beq.n	5864 <spi_init+0x104>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5856:	ab02      	add	r3, sp, #8
    5858:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    585a:	0c00      	lsrs	r0, r0, #16
    585c:	b2c0      	uxtb	r0, r0
    585e:	a903      	add	r1, sp, #12
    5860:	4b3d      	ldr	r3, [pc, #244]	; (5958 <spi_init+0x1f8>)
    5862:	4798      	blx	r3
    5864:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5866:	2e04      	cmp	r6, #4
    5868:	d1ea      	bne.n	5840 <spi_init+0xe0>
	module->mode             = config->mode;
    586a:	7823      	ldrb	r3, [r4, #0]
    586c:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    586e:	7c23      	ldrb	r3, [r4, #16]
    5870:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    5872:	7ca3      	ldrb	r3, [r4, #18]
    5874:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5876:	7d23      	ldrb	r3, [r4, #20]
    5878:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    587a:	ab02      	add	r3, sp, #8
    587c:	1c9e      	adds	r6, r3, #2
    587e:	2300      	movs	r3, #0
    5880:	8033      	strh	r3, [r6, #0]
	if (config->mode == SPI_MODE_MASTER) {
    5882:	7823      	ldrb	r3, [r4, #0]
    5884:	2b01      	cmp	r3, #1
    5886:	d110      	bne.n	58aa <spi_init+0x14a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5888:	4b2a      	ldr	r3, [pc, #168]	; (5934 <spi_init+0x1d4>)
    588a:	6828      	ldr	r0, [r5, #0]
    588c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    588e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5890:	4b32      	ldr	r3, [pc, #200]	; (595c <spi_init+0x1fc>)
    5892:	b2c0      	uxtb	r0, r0
    5894:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
    5896:	4b32      	ldr	r3, [pc, #200]	; (5960 <spi_init+0x200>)
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5898:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    589a:	0032      	movs	r2, r6
    589c:	69a0      	ldr	r0, [r4, #24]
    589e:	4798      	blx	r3
			return STATUS_ERR_INVALID_ARG;
    58a0:	2317      	movs	r3, #23
		if (error_code != STATUS_OK) {
    58a2:	2800      	cmp	r0, #0
    58a4:	d13c      	bne.n	5920 <spi_init+0x1c0>
		spi_module->BAUD.reg = (uint8_t)baud;
    58a6:	7833      	ldrb	r3, [r6, #0]
    58a8:	733b      	strb	r3, [r7, #12]
	if (config->mode == SPI_MODE_SLAVE) {
    58aa:	7823      	ldrb	r3, [r4, #0]
    58ac:	2b00      	cmp	r3, #0
    58ae:	d13d      	bne.n	592c <spi_init+0x1cc>
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    58b0:	7fe1      	ldrb	r1, [r4, #31]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    58b2:	7fa5      	ldrb	r5, [r4, #30]
		spi_module->ADDR.reg |=
    58b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    58b6:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    58b8:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    58ba:	4319      	orrs	r1, r3
		ctrla = config->mode_specific.slave.frame_format;
    58bc:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    58be:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    58c0:	1c63      	adds	r3, r4, #1
		spi_module->ADDR.reg |=
    58c2:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    58c4:	7fdb      	ldrb	r3, [r3, #31]
    58c6:	2b00      	cmp	r3, #0
    58c8:	d12d      	bne.n	5926 <spi_init+0x1c6>
		ctrlb = config->mode_specific.slave.address_mode;
    58ca:	0013      	movs	r3, r2
	ctrla |= config->mux_setting;
    58cc:	68a1      	ldr	r1, [r4, #8]
    58ce:	6862      	ldr	r2, [r4, #4]
    58d0:	430a      	orrs	r2, r1
    58d2:	68e1      	ldr	r1, [r4, #12]
    58d4:	430a      	orrs	r2, r1
	ctrlb |= config->character_size;
    58d6:	7c21      	ldrb	r1, [r4, #16]
	ctrla |= config->mux_setting;
    58d8:	4302      	orrs	r2, r0
	ctrlb |= config->character_size;
    58da:	430b      	orrs	r3, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    58dc:	7c61      	ldrb	r1, [r4, #17]
    58de:	2900      	cmp	r1, #0
    58e0:	d103      	bne.n	58ea <spi_init+0x18a>
    58e2:	4920      	ldr	r1, [pc, #128]	; (5964 <spi_init+0x204>)
    58e4:	7889      	ldrb	r1, [r1, #2]
    58e6:	0789      	lsls	r1, r1, #30
    58e8:	d501      	bpl.n	58ee <spi_init+0x18e>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    58ea:	2180      	movs	r1, #128	; 0x80
    58ec:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
    58ee:	7ca1      	ldrb	r1, [r4, #18]
    58f0:	2900      	cmp	r1, #0
    58f2:	d002      	beq.n	58fa <spi_init+0x19a>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    58f4:	2180      	movs	r1, #128	; 0x80
    58f6:	0289      	lsls	r1, r1, #10
    58f8:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
    58fa:	7ce1      	ldrb	r1, [r4, #19]
    58fc:	2900      	cmp	r1, #0
    58fe:	d002      	beq.n	5906 <spi_init+0x1a6>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5900:	2180      	movs	r1, #128	; 0x80
    5902:	0089      	lsls	r1, r1, #2
    5904:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
    5906:	7d21      	ldrb	r1, [r4, #20]
    5908:	2900      	cmp	r1, #0
    590a:	d002      	beq.n	5912 <spi_init+0x1b2>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    590c:	2180      	movs	r1, #128	; 0x80
    590e:	0189      	lsls	r1, r1, #6
    5910:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
    5912:	6839      	ldr	r1, [r7, #0]
    5914:	430a      	orrs	r2, r1
    5916:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5918:	687a      	ldr	r2, [r7, #4]
    591a:	4313      	orrs	r3, r2
    591c:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    591e:	2300      	movs	r3, #0
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    5920:	0018      	movs	r0, r3
    5922:	b009      	add	sp, #36	; 0x24
    5924:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5926:	2340      	movs	r3, #64	; 0x40
    5928:	4313      	orrs	r3, r2
    592a:	e7cf      	b.n	58cc <spi_init+0x16c>
	uint32_t ctrlb = 0;
    592c:	2300      	movs	r3, #0
	uint32_t ctrla = 0;
    592e:	0018      	movs	r0, r3
    5930:	e7cc      	b.n	58cc <spi_init+0x16c>
    5932:	46c0      	nop			; (mov r8, r8)
    5934:	0000221d 	.word	0x0000221d
    5938:	40000400 	.word	0x40000400
    593c:	00007bbd 	.word	0x00007bbd
    5940:	00007b35 	.word	0x00007b35
    5944:	0000207d 	.word	0x0000207d
    5948:	00005e1d 	.word	0x00005e1d
    594c:	00005c1d 	.word	0x00005c1d
    5950:	20001044 	.word	0x20001044
    5954:	000020c1 	.word	0x000020c1
    5958:	00007c91 	.word	0x00007c91
    595c:	00007bd9 	.word	0x00007bd9
    5960:	00001fbd 	.word	0x00001fbd
    5964:	41002000 	.word	0x41002000

00005968 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    5968:	b5f0      	push	{r4, r5, r6, r7, lr}
    596a:	b087      	sub	sp, #28
    596c:	9303      	str	r3, [sp, #12]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    596e:	0003      	movs	r3, r0
{
    5970:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    5972:	2005      	movs	r0, #5
{
    5974:	9102      	str	r1, [sp, #8]
	if (module->status == STATUS_BUSY) {
    5976:	3338      	adds	r3, #56	; 0x38
    5978:	781b      	ldrb	r3, [r3, #0]
{
    597a:	0017      	movs	r7, r2
	if (module->status == STATUS_BUSY) {
    597c:	4283      	cmp	r3, r0
    597e:	d036      	beq.n	59ee <spi_read_buffer_wait+0x86>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5980:	3012      	adds	r0, #18
	if (length == 0) {
    5982:	2a00      	cmp	r2, #0
    5984:	d033      	beq.n	59ee <spi_read_buffer_wait+0x86>
	}

	if (!(module->receiver_enabled)) {
    5986:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    5988:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    598a:	2b00      	cmp	r3, #0
    598c:	d02f      	beq.n	59ee <spi_read_buffer_wait+0x86>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    598e:	7963      	ldrb	r3, [r4, #5]
    5990:	2b00      	cmp	r3, #0
    5992:	d107      	bne.n	59a4 <spi_read_buffer_wait+0x3c>
    5994:	0020      	movs	r0, r4
    5996:	4b2b      	ldr	r3, [pc, #172]	; (5a44 <spi_read_buffer_wait+0xdc>)
    5998:	4798      	blx	r3
    599a:	2800      	cmp	r0, #0
    599c:	d002      	beq.n	59a4 <spi_read_buffer_wait+0x3c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    599e:	2302      	movs	r3, #2
    59a0:	6822      	ldr	r2, [r4, #0]
    59a2:	7613      	strb	r3, [r2, #24]
{
    59a4:	2500      	movs	r5, #0
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    59a6:	7963      	ldrb	r3, [r4, #5]
    59a8:	2b01      	cmp	r3, #1
    59aa:	d108      	bne.n	59be <spi_read_buffer_wait+0x56>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    59ac:	0020      	movs	r0, r4
    59ae:	4b26      	ldr	r3, [pc, #152]	; (5a48 <spi_read_buffer_wait+0xe0>)
    59b0:	4798      	blx	r3
    59b2:	2800      	cmp	r0, #0
    59b4:	d0fa      	beq.n	59ac <spi_read_buffer_wait+0x44>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    59b6:	9903      	ldr	r1, [sp, #12]
    59b8:	0020      	movs	r0, r4
    59ba:	4b24      	ldr	r3, [pc, #144]	; (5a4c <spi_read_buffer_wait+0xe4>)
    59bc:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    59be:	7963      	ldrb	r3, [r4, #5]
    59c0:	4e23      	ldr	r6, [pc, #140]	; (5a50 <spi_read_buffer_wait+0xe8>)
    59c2:	2b00      	cmp	r3, #0
    59c4:	d11b      	bne.n	59fe <spi_read_buffer_wait+0x96>
    59c6:	4b23      	ldr	r3, [pc, #140]	; (5a54 <spi_read_buffer_wait+0xec>)
    59c8:	9301      	str	r3, [sp, #4]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    59ca:	0020      	movs	r0, r4
    59cc:	47b0      	blx	r6
    59ce:	2800      	cmp	r0, #0
    59d0:	d104      	bne.n	59dc <spi_read_buffer_wait+0x74>
    59d2:	9b01      	ldr	r3, [sp, #4]
    59d4:	3b01      	subs	r3, #1
    59d6:	9301      	str	r3, [sp, #4]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    59d8:	2b00      	cmp	r3, #0
    59da:	d1f6      	bne.n	59ca <spi_read_buffer_wait+0x62>
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    59dc:	0020      	movs	r0, r4
    59de:	4b19      	ldr	r3, [pc, #100]	; (5a44 <spi_read_buffer_wait+0xdc>)
    59e0:	4798      	blx	r3
    59e2:	2800      	cmp	r0, #0
    59e4:	d005      	beq.n	59f2 <spi_read_buffer_wait+0x8a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    59e6:	2202      	movs	r2, #2
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
    59e8:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
    59ea:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    59ec:	761a      	strb	r2, [r3, #24]
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    59ee:	b007      	add	sp, #28
    59f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_read(module)) {
    59f2:	0020      	movs	r0, r4
    59f4:	47b0      	blx	r6
    59f6:	2800      	cmp	r0, #0
    59f8:	d101      	bne.n	59fe <spi_read_buffer_wait+0x96>
				return STATUS_ERR_TIMEOUT;
    59fa:	3012      	adds	r0, #18
    59fc:	e7f7      	b.n	59ee <spi_read_buffer_wait+0x86>
		while (!spi_is_ready_to_read(module)) {
    59fe:	0020      	movs	r0, r4
    5a00:	47b0      	blx	r6
    5a02:	2800      	cmp	r0, #0
    5a04:	d0fb      	beq.n	59fe <spi_read_buffer_wait+0x96>
		uint16_t received_data = 0;
    5a06:	ab04      	add	r3, sp, #16
    5a08:	1d9e      	adds	r6, r3, #6
    5a0a:	2300      	movs	r3, #0
		enum status_code retval = spi_read(module, &received_data);
    5a0c:	0031      	movs	r1, r6
		uint16_t received_data = 0;
    5a0e:	8033      	strh	r3, [r6, #0]
		enum status_code retval = spi_read(module, &received_data);
    5a10:	0020      	movs	r0, r4
    5a12:	4b11      	ldr	r3, [pc, #68]	; (5a58 <spi_read_buffer_wait+0xf0>)
    5a14:	4798      	blx	r3
		if (retval != STATUS_OK) {
    5a16:	2800      	cmp	r0, #0
    5a18:	d1e9      	bne.n	59ee <spi_read_buffer_wait+0x86>
		rx_data[rx_pos++] = received_data;
    5a1a:	9902      	ldr	r1, [sp, #8]
    5a1c:	8832      	ldrh	r2, [r6, #0]
    5a1e:	1c6b      	adds	r3, r5, #1
    5a20:	554a      	strb	r2, [r1, r5]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5a22:	79a1      	ldrb	r1, [r4, #6]
		rx_data[rx_pos++] = received_data;
    5a24:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5a26:	2901      	cmp	r1, #1
    5a28:	d109      	bne.n	5a3e <spi_read_buffer_wait+0xd6>
			rx_data[rx_pos++] = (received_data >> 8);
    5a2a:	9902      	ldr	r1, [sp, #8]
    5a2c:	3502      	adds	r5, #2
    5a2e:	0a12      	lsrs	r2, r2, #8
    5a30:	b2ad      	uxth	r5, r5
    5a32:	54ca      	strb	r2, [r1, r3]
    5a34:	3f01      	subs	r7, #1
    5a36:	b2bf      	uxth	r7, r7
	while (length--) {
    5a38:	2f00      	cmp	r7, #0
    5a3a:	d1b4      	bne.n	59a6 <spi_read_buffer_wait+0x3e>
    5a3c:	e7d7      	b.n	59ee <spi_read_buffer_wait+0x86>
		rx_data[rx_pos++] = received_data;
    5a3e:	001d      	movs	r5, r3
    5a40:	e7f8      	b.n	5a34 <spi_read_buffer_wait+0xcc>
    5a42:	46c0      	nop			; (mov r8, r8)
    5a44:	000056e5 	.word	0x000056e5
    5a48:	000056ef 	.word	0x000056ef
    5a4c:	00005705 	.word	0x00005705
    5a50:	000056f9 	.word	0x000056f9
    5a54:	00002711 	.word	0x00002711
    5a58:	00005725 	.word	0x00005725

00005a5c <spi_write_buffer_wait>:
{
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    5a5c:	0003      	movs	r3, r0
{
    5a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a60:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    5a62:	2005      	movs	r0, #5
{
    5a64:	b087      	sub	sp, #28
    5a66:	9102      	str	r1, [sp, #8]
	if (module->status == STATUS_BUSY) {
    5a68:	3338      	adds	r3, #56	; 0x38
    5a6a:	781b      	ldrb	r3, [r3, #0]
{
    5a6c:	0015      	movs	r5, r2
	if (module->status == STATUS_BUSY) {
    5a6e:	4283      	cmp	r3, r0
    5a70:	d032      	beq.n	5ad8 <spi_write_buffer_wait+0x7c>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5a72:	3012      	adds	r0, #18
	if (length == 0) {
    5a74:	2a00      	cmp	r2, #0
    5a76:	d02f      	beq.n	5ad8 <spi_write_buffer_wait+0x7c>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5a78:	7963      	ldrb	r3, [r4, #5]
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	d107      	bne.n	5a8e <spi_write_buffer_wait+0x32>
    5a7e:	0020      	movs	r0, r4
    5a80:	4b5f      	ldr	r3, [pc, #380]	; (5c00 <spi_write_buffer_wait+0x1a4>)
    5a82:	4798      	blx	r3
    5a84:	2800      	cmp	r0, #0
    5a86:	d002      	beq.n	5a8e <spi_write_buffer_wait+0x32>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5a88:	2302      	movs	r3, #2
    5a8a:	6822      	ldr	r2, [r4, #0]
    5a8c:	7613      	strb	r3, [r2, #24]
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    5a8e:	2600      	movs	r6, #0
    5a90:	9501      	str	r5, [sp, #4]
    5a92:	3d01      	subs	r5, #1
    5a94:	b2ad      	uxth	r5, r5
	while (length--) {
    5a96:	4a5b      	ldr	r2, [pc, #364]	; (5c04 <spi_write_buffer_wait+0x1a8>)
    5a98:	7963      	ldrb	r3, [r4, #5]
    5a9a:	4295      	cmp	r5, r2
    5a9c:	d108      	bne.n	5ab0 <spi_write_buffer_wait+0x54>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    5a9e:	2b01      	cmp	r3, #1
    5aa0:	d100      	bne.n	5aa4 <spi_write_buffer_wait+0x48>
    5aa2:	e087      	b.n	5bb4 <spi_write_buffer_wait+0x158>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    5aa4:	7963      	ldrb	r3, [r4, #5]
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d100      	bne.n	5aac <spi_write_buffer_wait+0x50>
    5aaa:	e089      	b.n	5bc0 <spi_write_buffer_wait+0x164>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    5aac:	2000      	movs	r0, #0
    5aae:	e013      	b.n	5ad8 <spi_write_buffer_wait+0x7c>
		if (module->mode == SPI_MODE_SLAVE) {
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	d11a      	bne.n	5aea <spi_write_buffer_wait+0x8e>
    5ab4:	4f54      	ldr	r7, [pc, #336]	; (5c08 <spi_write_buffer_wait+0x1ac>)
				if (spi_is_ready_to_write(module)) {
    5ab6:	0020      	movs	r0, r4
    5ab8:	4b54      	ldr	r3, [pc, #336]	; (5c0c <spi_write_buffer_wait+0x1b0>)
    5aba:	4798      	blx	r3
    5abc:	2800      	cmp	r0, #0
    5abe:	d102      	bne.n	5ac6 <spi_write_buffer_wait+0x6a>
    5ac0:	3f01      	subs	r7, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5ac2:	2f00      	cmp	r7, #0
    5ac4:	d1f7      	bne.n	5ab6 <spi_write_buffer_wait+0x5a>
			if (spi_is_write_complete(module)) {
    5ac6:	0020      	movs	r0, r4
    5ac8:	4b4d      	ldr	r3, [pc, #308]	; (5c00 <spi_write_buffer_wait+0x1a4>)
    5aca:	4798      	blx	r3
    5acc:	2800      	cmp	r0, #0
    5ace:	d005      	beq.n	5adc <spi_write_buffer_wait+0x80>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5ad0:	2202      	movs	r2, #2
					return STATUS_ABORTED;
    5ad2:	2004      	movs	r0, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ad4:	6823      	ldr	r3, [r4, #0]
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5ad6:	761a      	strb	r2, [r3, #24]
}
    5ad8:	b007      	add	sp, #28
    5ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!spi_is_ready_to_write(module)) {
    5adc:	0020      	movs	r0, r4
    5ade:	4b4b      	ldr	r3, [pc, #300]	; (5c0c <spi_write_buffer_wait+0x1b0>)
    5ae0:	4798      	blx	r3
    5ae2:	2800      	cmp	r0, #0
    5ae4:	d101      	bne.n	5aea <spi_write_buffer_wait+0x8e>
					return STATUS_ERR_TIMEOUT;
    5ae6:	3012      	adds	r0, #18
    5ae8:	e7f6      	b.n	5ad8 <spi_write_buffer_wait+0x7c>
		while (!spi_is_ready_to_write(module)) {
    5aea:	0020      	movs	r0, r4
    5aec:	4b47      	ldr	r3, [pc, #284]	; (5c0c <spi_write_buffer_wait+0x1b0>)
    5aee:	4798      	blx	r3
    5af0:	2800      	cmp	r0, #0
    5af2:	d0fa      	beq.n	5aea <spi_write_buffer_wait+0x8e>
		uint16_t data_to_send = tx_data[tx_pos++];
    5af4:	9a02      	ldr	r2, [sp, #8]
    5af6:	1c73      	adds	r3, r6, #1
    5af8:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5afa:	79a2      	ldrb	r2, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
    5afc:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5afe:	2a01      	cmp	r2, #1
    5b00:	d040      	beq.n	5b84 <spi_write_buffer_wait+0x128>
		uint16_t data_to_send = tx_data[tx_pos++];
    5b02:	001e      	movs	r6, r3
    5b04:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
    5b06:	4b42      	ldr	r3, [pc, #264]	; (5c10 <spi_write_buffer_wait+0x1b4>)
    5b08:	0020      	movs	r0, r4
    5b0a:	4798      	blx	r3
		if (module->receiver_enabled) {
    5b0c:	79e2      	ldrb	r2, [r4, #7]
    5b0e:	1e6b      	subs	r3, r5, #1
    5b10:	b29b      	uxth	r3, r3
    5b12:	2a00      	cmp	r2, #0
    5b14:	d04c      	beq.n	5bb0 <spi_write_buffer_wait+0x154>
			if (module->mode == SPI_MODE_SLAVE) {
    5b16:	7963      	ldrb	r3, [r4, #5]
    5b18:	2b00      	cmp	r3, #0
    5b1a:	d124      	bne.n	5b66 <spi_write_buffer_wait+0x10a>
    5b1c:	4b3a      	ldr	r3, [pc, #232]	; (5c08 <spi_write_buffer_wait+0x1ac>)
    5b1e:	9303      	str	r3, [sp, #12]
					if (length && spi_is_ready_to_write(module)) {
    5b20:	2d00      	cmp	r5, #0
    5b22:	d012      	beq.n	5b4a <spi_write_buffer_wait+0xee>
    5b24:	0020      	movs	r0, r4
    5b26:	4b39      	ldr	r3, [pc, #228]	; (5c0c <spi_write_buffer_wait+0x1b0>)
    5b28:	4798      	blx	r3
    5b2a:	2800      	cmp	r0, #0
    5b2c:	d00d      	beq.n	5b4a <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    5b2e:	9b02      	ldr	r3, [sp, #8]
    5b30:	1c77      	adds	r7, r6, #1
    5b32:	5d99      	ldrb	r1, [r3, r6]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b34:	79a3      	ldrb	r3, [r4, #6]
						data_to_send = tx_data[tx_pos++];
    5b36:	b2bf      	uxth	r7, r7
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5b38:	2b01      	cmp	r3, #1
    5b3a:	d02a      	beq.n	5b92 <spi_write_buffer_wait+0x136>
						data_to_send = tx_data[tx_pos++];
    5b3c:	b289      	uxth	r1, r1
						spi_write(module, data_to_send);
    5b3e:	0020      	movs	r0, r4
    5b40:	4b33      	ldr	r3, [pc, #204]	; (5c10 <spi_write_buffer_wait+0x1b4>)
    5b42:	4798      	blx	r3
						length--;
    5b44:	003e      	movs	r6, r7
    5b46:	3d01      	subs	r5, #1
    5b48:	b2ad      	uxth	r5, r5
					if (spi_is_ready_to_read(module)) {
    5b4a:	0020      	movs	r0, r4
    5b4c:	4f31      	ldr	r7, [pc, #196]	; (5c14 <spi_write_buffer_wait+0x1b8>)
    5b4e:	47b8      	blx	r7
    5b50:	2800      	cmp	r0, #0
    5b52:	d025      	beq.n	5ba0 <spi_write_buffer_wait+0x144>
				if (spi_is_write_complete(module)) {
    5b54:	0020      	movs	r0, r4
    5b56:	4b2a      	ldr	r3, [pc, #168]	; (5c00 <spi_write_buffer_wait+0x1a4>)
    5b58:	4798      	blx	r3
    5b5a:	2800      	cmp	r0, #0
    5b5c:	d1b8      	bne.n	5ad0 <spi_write_buffer_wait+0x74>
				if (!spi_is_ready_to_read(module)) {
    5b5e:	0020      	movs	r0, r4
    5b60:	47b8      	blx	r7
    5b62:	2800      	cmp	r0, #0
    5b64:	d022      	beq.n	5bac <spi_write_buffer_wait+0x150>
			while (!spi_is_ready_to_read(module)) {
    5b66:	0020      	movs	r0, r4
    5b68:	4b2a      	ldr	r3, [pc, #168]	; (5c14 <spi_write_buffer_wait+0x1b8>)
    5b6a:	4798      	blx	r3
    5b6c:	2800      	cmp	r0, #0
    5b6e:	d0fa      	beq.n	5b66 <spi_write_buffer_wait+0x10a>
			spi_read(module, &flush);
    5b70:	ab04      	add	r3, sp, #16
    5b72:	1d99      	adds	r1, r3, #6
    5b74:	0020      	movs	r0, r4
    5b76:	4b28      	ldr	r3, [pc, #160]	; (5c18 <spi_write_buffer_wait+0x1bc>)
    5b78:	4798      	blx	r3
			flush_length--;
    5b7a:	9b01      	ldr	r3, [sp, #4]
    5b7c:	3b01      	subs	r3, #1
    5b7e:	b29b      	uxth	r3, r3
    5b80:	9301      	str	r3, [sp, #4]
    5b82:	e786      	b.n	5a92 <spi_write_buffer_wait+0x36>
			data_to_send |= (tx_data[tx_pos++] << 8);
    5b84:	9a02      	ldr	r2, [sp, #8]
    5b86:	3602      	adds	r6, #2
    5b88:	5cd3      	ldrb	r3, [r2, r3]
    5b8a:	b2b6      	uxth	r6, r6
    5b8c:	021b      	lsls	r3, r3, #8
    5b8e:	4319      	orrs	r1, r3
    5b90:	e7b9      	b.n	5b06 <spi_write_buffer_wait+0xaa>
							data_to_send |= (tx_data[tx_pos++] << 8);
    5b92:	9b02      	ldr	r3, [sp, #8]
    5b94:	3602      	adds	r6, #2
    5b96:	5ddb      	ldrb	r3, [r3, r7]
    5b98:	b2b7      	uxth	r7, r6
    5b9a:	021b      	lsls	r3, r3, #8
    5b9c:	4319      	orrs	r1, r3
    5b9e:	e7ce      	b.n	5b3e <spi_write_buffer_wait+0xe2>
    5ba0:	9b03      	ldr	r3, [sp, #12]
    5ba2:	3b01      	subs	r3, #1
    5ba4:	9303      	str	r3, [sp, #12]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d1ba      	bne.n	5b20 <spi_write_buffer_wait+0xc4>
    5baa:	e7d3      	b.n	5b54 <spi_write_buffer_wait+0xf8>
					return STATUS_ERR_TIMEOUT;
    5bac:	2012      	movs	r0, #18
    5bae:	e793      	b.n	5ad8 <spi_write_buffer_wait+0x7c>
		if (module->receiver_enabled) {
    5bb0:	001d      	movs	r5, r3
    5bb2:	e770      	b.n	5a96 <spi_write_buffer_wait+0x3a>
		while (!spi_is_write_complete(module)) {
    5bb4:	0020      	movs	r0, r4
    5bb6:	4b12      	ldr	r3, [pc, #72]	; (5c00 <spi_write_buffer_wait+0x1a4>)
    5bb8:	4798      	blx	r3
    5bba:	2800      	cmp	r0, #0
    5bbc:	d0fa      	beq.n	5bb4 <spi_write_buffer_wait+0x158>
    5bbe:	e771      	b.n	5aa4 <spi_write_buffer_wait+0x48>
		if (module->receiver_enabled) {
    5bc0:	79e3      	ldrb	r3, [r4, #7]
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d100      	bne.n	5bc8 <spi_write_buffer_wait+0x16c>
    5bc6:	e771      	b.n	5aac <spi_write_buffer_wait+0x50>
			while (flush_length) {
    5bc8:	9b01      	ldr	r3, [sp, #4]
    5bca:	2b00      	cmp	r3, #0
    5bcc:	d100      	bne.n	5bd0 <spi_write_buffer_wait+0x174>
    5bce:	e76d      	b.n	5aac <spi_write_buffer_wait+0x50>
    5bd0:	4d0d      	ldr	r5, [pc, #52]	; (5c08 <spi_write_buffer_wait+0x1ac>)
					if (spi_is_ready_to_read(module)) {
    5bd2:	0020      	movs	r0, r4
    5bd4:	4e0f      	ldr	r6, [pc, #60]	; (5c14 <spi_write_buffer_wait+0x1b8>)
    5bd6:	47b0      	blx	r6
    5bd8:	2800      	cmp	r0, #0
    5bda:	d102      	bne.n	5be2 <spi_write_buffer_wait+0x186>
    5bdc:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5bde:	2d00      	cmp	r5, #0
    5be0:	d1f7      	bne.n	5bd2 <spi_write_buffer_wait+0x176>
				if (!spi_is_ready_to_read(module)) {
    5be2:	0020      	movs	r0, r4
    5be4:	47b0      	blx	r6
    5be6:	2800      	cmp	r0, #0
    5be8:	d100      	bne.n	5bec <spi_write_buffer_wait+0x190>
    5bea:	e77c      	b.n	5ae6 <spi_write_buffer_wait+0x8a>
				spi_read(module, &flush);
    5bec:	ab04      	add	r3, sp, #16
    5bee:	1d99      	adds	r1, r3, #6
    5bf0:	0020      	movs	r0, r4
    5bf2:	4b09      	ldr	r3, [pc, #36]	; (5c18 <spi_write_buffer_wait+0x1bc>)
    5bf4:	4798      	blx	r3
				flush_length--;
    5bf6:	9b01      	ldr	r3, [sp, #4]
    5bf8:	3b01      	subs	r3, #1
    5bfa:	b29b      	uxth	r3, r3
    5bfc:	9301      	str	r3, [sp, #4]
    5bfe:	e7e3      	b.n	5bc8 <spi_write_buffer_wait+0x16c>
    5c00:	000056e5 	.word	0x000056e5
    5c04:	0000ffff 	.word	0x0000ffff
    5c08:	00002711 	.word	0x00002711
    5c0c:	000056ef 	.word	0x000056ef
    5c10:	00005705 	.word	0x00005705
    5c14:	000056f9 	.word	0x000056f9
    5c18:	00005725 	.word	0x00005725

00005c1c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    5c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    5c1e:	4b7c      	ldr	r3, [pc, #496]	; (5e10 <_spi_interrupt_handler+0x1f4>)
    5c20:	0080      	lsls	r0, r0, #2
    5c22:	58c4      	ldr	r4, [r0, r3]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    5c24:	0023      	movs	r3, r4
    5c26:	0022      	movs	r2, r4
    5c28:	3337      	adds	r3, #55	; 0x37
    5c2a:	3236      	adds	r2, #54	; 0x36
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5c2c:	6825      	ldr	r5, [r4, #0]
	uint8_t callback_mask =
    5c2e:	781b      	ldrb	r3, [r3, #0]
    5c30:	7816      	ldrb	r6, [r2, #0]
    5c32:	401e      	ands	r6, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    5c34:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    5c36:	7daf      	ldrb	r7, [r5, #22]
    5c38:	401f      	ands	r7, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    5c3a:	07fb      	lsls	r3, r7, #31
    5c3c:	d539      	bpl.n	5cb2 <_spi_interrupt_handler+0x96>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5c3e:	7962      	ldrb	r2, [r4, #5]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    5c40:	0013      	movs	r3, r2
		if ((module->mode == SPI_MODE_MASTER) &&
    5c42:	2a01      	cmp	r2, #1
    5c44:	d133      	bne.n	5cae <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
    5c46:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    5c48:	2b00      	cmp	r3, #0
    5c4a:	d10d      	bne.n	5c68 <_spi_interrupt_handler+0x4c>
	spi_hw->DATA.reg = dummy_write;
    5c4c:	4b71      	ldr	r3, [pc, #452]	; (5e14 <_spi_interrupt_handler+0x1f8>)
    5c4e:	881b      	ldrh	r3, [r3, #0]
    5c50:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    5c52:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5c54:	3b01      	subs	r3, #1
    5c56:	b29b      	uxth	r3, r3
    5c58:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    5c5a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5c5c:	2b00      	cmp	r3, #0
    5c5e:	d100      	bne.n	5c62 <_spi_interrupt_handler+0x46>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5c60:	752a      	strb	r2, [r5, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    5c62:	7963      	ldrb	r3, [r4, #5]
		if (0
    5c64:	2b01      	cmp	r3, #1
    5c66:	d122      	bne.n	5cae <_spi_interrupt_handler+0x92>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
    5c68:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d021      	beq.n	5cb2 <_spi_interrupt_handler+0x96>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5c6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5c70:	6822      	ldr	r2, [r4, #0]
	(module->tx_buffer_ptr)++;
    5c72:	1c48      	adds	r0, r1, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5c74:	780b      	ldrb	r3, [r1, #0]
	(module->tx_buffer_ptr)++;
    5c76:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c78:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5c7a:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5c7c:	2801      	cmp	r0, #1
    5c7e:	d100      	bne.n	5c82 <_spi_interrupt_handler+0x66>
    5c80:	e074      	b.n	5d6c <_spi_interrupt_handler+0x150>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5c82:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    5c84:	05db      	lsls	r3, r3, #23
    5c86:	0ddb      	lsrs	r3, r3, #23
    5c88:	6293      	str	r3, [r2, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    5c8a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    5c8c:	3b01      	subs	r3, #1
    5c8e:	b29b      	uxth	r3, r3
    5c90:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    5c92:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    5c94:	2b00      	cmp	r3, #0
    5c96:	d10c      	bne.n	5cb2 <_spi_interrupt_handler+0x96>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5c98:	3301      	adds	r3, #1
    5c9a:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    5c9c:	7a63      	ldrb	r3, [r4, #9]
    5c9e:	2b01      	cmp	r3, #1
    5ca0:	d107      	bne.n	5cb2 <_spi_interrupt_handler+0x96>
    5ca2:	79e3      	ldrb	r3, [r4, #7]
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	d104      	bne.n	5cb2 <_spi_interrupt_handler+0x96>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5ca8:	3302      	adds	r3, #2
    5caa:	75ab      	strb	r3, [r5, #22]
    5cac:	e001      	b.n	5cb2 <_spi_interrupt_handler+0x96>
		|| ((module->mode == SPI_MODE_SLAVE) &&
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d0da      	beq.n	5c68 <_spi_interrupt_handler+0x4c>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    5cb2:	2104      	movs	r1, #4
    5cb4:	420f      	tst	r7, r1
    5cb6:	d015      	beq.n	5ce4 <_spi_interrupt_handler+0xc8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5cb8:	8b6b      	ldrh	r3, [r5, #26]
    5cba:	420b      	tst	r3, r1
    5cbc:	d05c      	beq.n	5d78 <_spi_interrupt_handler+0x15c>
			if (module->dir != SPI_DIRECTION_WRITE) {
    5cbe:	7a63      	ldrb	r3, [r4, #9]
    5cc0:	2b01      	cmp	r3, #1
    5cc2:	d00c      	beq.n	5cde <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5cc4:	0023      	movs	r3, r4
    5cc6:	221e      	movs	r2, #30
    5cc8:	3338      	adds	r3, #56	; 0x38
    5cca:	701a      	strb	r2, [r3, #0]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    5ccc:	2303      	movs	r3, #3
    5cce:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    5cd0:	3302      	adds	r3, #2
    5cd2:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    5cd4:	0733      	lsls	r3, r6, #28
    5cd6:	d502      	bpl.n	5cde <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    5cd8:	0020      	movs	r0, r4
    5cda:	69a3      	ldr	r3, [r4, #24]
    5cdc:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    5cde:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5ce0:	2304      	movs	r3, #4
    5ce2:	836b      	strh	r3, [r5, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    5ce4:	2202      	movs	r2, #2
    5ce6:	4217      	tst	r7, r2
    5ce8:	d027      	beq.n	5d3a <_spi_interrupt_handler+0x11e>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    5cea:	7963      	ldrb	r3, [r4, #5]
    5cec:	2b00      	cmp	r3, #0
    5cee:	d10e      	bne.n	5d0e <_spi_interrupt_handler+0xf2>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    5cf0:	2107      	movs	r1, #7
    5cf2:	7529      	strb	r1, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5cf4:	762a      	strb	r2, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    5cf6:	3201      	adds	r2, #1
    5cf8:	7262      	strb	r2, [r4, #9]
			module->remaining_tx_buffer_length = 0;
			module->remaining_rx_buffer_length = 0;
			module->status = STATUS_OK;
    5cfa:	0022      	movs	r2, r4
    5cfc:	3238      	adds	r2, #56	; 0x38
			module->remaining_tx_buffer_length = 0;
    5cfe:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    5d00:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    5d02:	7013      	strb	r3, [r2, #0]

			if (callback_mask &
    5d04:	06f3      	lsls	r3, r6, #27
    5d06:	d502      	bpl.n	5d0e <_spi_interrupt_handler+0xf2>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    5d08:	0020      	movs	r0, r4
    5d0a:	69e3      	ldr	r3, [r4, #28]
    5d0c:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5d0e:	7963      	ldrb	r3, [r4, #5]
    5d10:	2b01      	cmp	r3, #1
    5d12:	d112      	bne.n	5d3a <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5d14:	7a63      	ldrb	r3, [r4, #9]
    5d16:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    5d18:	2b01      	cmp	r3, #1
    5d1a:	d10e      	bne.n	5d3a <_spi_interrupt_handler+0x11e>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5d1c:	79e2      	ldrb	r2, [r4, #7]
    5d1e:	2a00      	cmp	r2, #0
    5d20:	d10b      	bne.n	5d3a <_spi_interrupt_handler+0x11e>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5d22:	2102      	movs	r1, #2
    5d24:	7529      	strb	r1, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    5d26:	3101      	adds	r1, #1
    5d28:	7261      	strb	r1, [r4, #9]
			module->status = STATUS_OK;
    5d2a:	0021      	movs	r1, r4
    5d2c:	3138      	adds	r1, #56	; 0x38
    5d2e:	700a      	strb	r2, [r1, #0]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    5d30:	421e      	tst	r6, r3
    5d32:	d002      	beq.n	5d3a <_spi_interrupt_handler+0x11e>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    5d34:	0020      	movs	r0, r4
    5d36:	68e3      	ldr	r3, [r4, #12]
    5d38:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    5d3a:	2308      	movs	r3, #8
    5d3c:	421f      	tst	r7, r3
    5d3e:	d009      	beq.n	5d54 <_spi_interrupt_handler+0x138>
			if (module->mode == SPI_MODE_SLAVE) {
    5d40:	7962      	ldrb	r2, [r4, #5]
    5d42:	2a00      	cmp	r2, #0
    5d44:	d106      	bne.n	5d54 <_spi_interrupt_handler+0x138>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    5d46:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    5d48:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    5d4a:	06b3      	lsls	r3, r6, #26
    5d4c:	d502      	bpl.n	5d54 <_spi_interrupt_handler+0x138>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    5d4e:	0020      	movs	r0, r4
    5d50:	6a23      	ldr	r3, [r4, #32]
    5d52:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    5d54:	b27f      	sxtb	r7, r7
    5d56:	2f00      	cmp	r7, #0
    5d58:	da07      	bge.n	5d6a <_spi_interrupt_handler+0x14e>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5d5a:	2380      	movs	r3, #128	; 0x80
    5d5c:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5d5e:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    5d60:	0673      	lsls	r3, r6, #25
    5d62:	d502      	bpl.n	5d6a <_spi_interrupt_handler+0x14e>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    5d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5d66:	0020      	movs	r0, r4
    5d68:	4798      	blx	r3
		}
	}
#  endif
}
    5d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    5d6c:	7848      	ldrb	r0, [r1, #1]
		(module->tx_buffer_ptr)++;
    5d6e:	3102      	adds	r1, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    5d70:	0200      	lsls	r0, r0, #8
    5d72:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    5d74:	62e1      	str	r1, [r4, #44]	; 0x2c
    5d76:	e785      	b.n	5c84 <_spi_interrupt_handler+0x68>
			if (module->dir == SPI_DIRECTION_WRITE) {
    5d78:	7a62      	ldrb	r2, [r4, #9]
    5d7a:	6823      	ldr	r3, [r4, #0]
    5d7c:	b2d2      	uxtb	r2, r2
	flush = spi_hw->DATA.reg;
    5d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			if (module->dir == SPI_DIRECTION_WRITE) {
    5d80:	2a01      	cmp	r2, #1
    5d82:	d113      	bne.n	5dac <_spi_interrupt_handler+0x190>
	module->remaining_dummy_buffer_length--;
    5d84:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5d86:	3b01      	subs	r3, #1
    5d88:	b29b      	uxth	r3, r3
    5d8a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    5d8c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5d8e:	b29b      	uxth	r3, r3
    5d90:	2b00      	cmp	r3, #0
    5d92:	d1a7      	bne.n	5ce4 <_spi_interrupt_handler+0xc8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5d94:	7529      	strb	r1, [r5, #20]
					module->status = STATUS_OK;
    5d96:	0021      	movs	r1, r4
    5d98:	3138      	adds	r1, #56	; 0x38
    5d9a:	700b      	strb	r3, [r1, #0]
					module->dir = SPI_DIRECTION_IDLE;
    5d9c:	3303      	adds	r3, #3
    5d9e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    5da0:	4216      	tst	r6, r2
    5da2:	d09f      	beq.n	5ce4 <_spi_interrupt_handler+0xc8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    5da4:	0020      	movs	r0, r4
    5da6:	68e3      	ldr	r3, [r4, #12]
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5da8:	4798      	blx	r3
    5daa:	e79b      	b.n	5ce4 <_spi_interrupt_handler+0xc8>
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    5dac:	05db      	lsls	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    5dae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    5db0:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    5db2:	b2da      	uxtb	r2, r3
    5db4:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    5db6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5db8:	1c51      	adds	r1, r2, #1
    5dba:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5dbc:	79a1      	ldrb	r1, [r4, #6]
    5dbe:	2901      	cmp	r1, #1
    5dc0:	d104      	bne.n	5dcc <_spi_interrupt_handler+0x1b0>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    5dc2:	0a1b      	lsrs	r3, r3, #8
    5dc4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    5dc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5dc8:	3301      	adds	r3, #1
    5dca:	62a3      	str	r3, [r4, #40]	; 0x28
	module->remaining_rx_buffer_length--;
    5dcc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    5dce:	3b01      	subs	r3, #1
    5dd0:	b29b      	uxth	r3, r3
    5dd2:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    5dd4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    5dd6:	b29b      	uxth	r3, r3
    5dd8:	2b00      	cmp	r3, #0
    5dda:	d000      	beq.n	5dde <_spi_interrupt_handler+0x1c2>
    5ddc:	e782      	b.n	5ce4 <_spi_interrupt_handler+0xc8>
					module->status = STATUS_OK;
    5dde:	0022      	movs	r2, r4
    5de0:	3238      	adds	r2, #56	; 0x38
    5de2:	7013      	strb	r3, [r2, #0]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5de4:	3304      	adds	r3, #4
    5de6:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    5de8:	7a62      	ldrb	r2, [r4, #9]
    5dea:	2a02      	cmp	r2, #2
    5dec:	d105      	bne.n	5dfa <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    5dee:	421e      	tst	r6, r3
    5df0:	d100      	bne.n	5df4 <_spi_interrupt_handler+0x1d8>
    5df2:	e777      	b.n	5ce4 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    5df4:	0020      	movs	r0, r4
    5df6:	6963      	ldr	r3, [r4, #20]
    5df8:	e7d6      	b.n	5da8 <_spi_interrupt_handler+0x18c>
					} else if (module->dir == SPI_DIRECTION_READ) {
    5dfa:	7a63      	ldrb	r3, [r4, #9]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d000      	beq.n	5e02 <_spi_interrupt_handler+0x1e6>
    5e00:	e770      	b.n	5ce4 <_spi_interrupt_handler+0xc8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    5e02:	07b3      	lsls	r3, r6, #30
    5e04:	d400      	bmi.n	5e08 <_spi_interrupt_handler+0x1ec>
    5e06:	e76d      	b.n	5ce4 <_spi_interrupt_handler+0xc8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5e08:	0020      	movs	r0, r4
    5e0a:	6923      	ldr	r3, [r4, #16]
    5e0c:	e7cc      	b.n	5da8 <_spi_interrupt_handler+0x18c>
    5e0e:	46c0      	nop			; (mov r8, r8)
    5e10:	20001044 	.word	0x20001044
    5e14:	20001040 	.word	0x20001040

00005e18 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5e18:	4770      	bx	lr
	...

00005e1c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5e1e:	4c09      	ldr	r4, [pc, #36]	; (5e44 <_sercom_set_handler+0x28>)
    5e20:	4a09      	ldr	r2, [pc, #36]	; (5e48 <_sercom_set_handler+0x2c>)
    5e22:	7823      	ldrb	r3, [r4, #0]
    5e24:	2b00      	cmp	r3, #0
    5e26:	d109      	bne.n	5e3c <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    5e28:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5e2a:	4f08      	ldr	r7, [pc, #32]	; (5e4c <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    5e2c:	4d08      	ldr	r5, [pc, #32]	; (5e50 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5e2e:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
    5e30:	50ee      	str	r6, [r5, r3]
    5e32:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5e34:	2b18      	cmp	r3, #24
    5e36:	d1fa      	bne.n	5e2e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    5e38:	3b17      	subs	r3, #23
    5e3a:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5e3c:	0080      	lsls	r0, r0, #2
    5e3e:	5011      	str	r1, [r2, r0]
}
    5e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e42:	46c0      	nop			; (mov r8, r8)
    5e44:	2000050e 	.word	0x2000050e
    5e48:	20000510 	.word	0x20000510
    5e4c:	00005e19 	.word	0x00005e19
    5e50:	20001044 	.word	0x20001044

00005e54 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5e54:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5e56:	2309      	movs	r3, #9
    5e58:	466a      	mov	r2, sp
    5e5a:	7013      	strb	r3, [r2, #0]
    5e5c:	3301      	adds	r3, #1
    5e5e:	7053      	strb	r3, [r2, #1]
    5e60:	3301      	adds	r3, #1
    5e62:	7093      	strb	r3, [r2, #2]
    5e64:	3301      	adds	r3, #1
    5e66:	70d3      	strb	r3, [r2, #3]
    5e68:	3301      	adds	r3, #1
    5e6a:	7113      	strb	r3, [r2, #4]
    5e6c:	3301      	adds	r3, #1
    5e6e:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5e70:	4b02      	ldr	r3, [pc, #8]	; (5e7c <_sercom_get_interrupt_vector+0x28>)
    5e72:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5e74:	466b      	mov	r3, sp
    5e76:	5618      	ldrsb	r0, [r3, r0]
}
    5e78:	bd0e      	pop	{r1, r2, r3, pc}
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	0000221d 	.word	0x0000221d

00005e80 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5e80:	b510      	push	{r4, lr}
    5e82:	4b02      	ldr	r3, [pc, #8]	; (5e8c <SERCOM0_Handler+0xc>)
    5e84:	2000      	movs	r0, #0
    5e86:	681b      	ldr	r3, [r3, #0]
    5e88:	4798      	blx	r3
    5e8a:	bd10      	pop	{r4, pc}
    5e8c:	20000510 	.word	0x20000510

00005e90 <SERCOM1_Handler>:
    5e90:	b510      	push	{r4, lr}
    5e92:	4b02      	ldr	r3, [pc, #8]	; (5e9c <SERCOM1_Handler+0xc>)
    5e94:	2001      	movs	r0, #1
    5e96:	685b      	ldr	r3, [r3, #4]
    5e98:	4798      	blx	r3
    5e9a:	bd10      	pop	{r4, pc}
    5e9c:	20000510 	.word	0x20000510

00005ea0 <SERCOM2_Handler>:
    5ea0:	b510      	push	{r4, lr}
    5ea2:	4b02      	ldr	r3, [pc, #8]	; (5eac <SERCOM2_Handler+0xc>)
    5ea4:	2002      	movs	r0, #2
    5ea6:	689b      	ldr	r3, [r3, #8]
    5ea8:	4798      	blx	r3
    5eaa:	bd10      	pop	{r4, pc}
    5eac:	20000510 	.word	0x20000510

00005eb0 <SERCOM3_Handler>:
    5eb0:	b510      	push	{r4, lr}
    5eb2:	4b02      	ldr	r3, [pc, #8]	; (5ebc <SERCOM3_Handler+0xc>)
    5eb4:	2003      	movs	r0, #3
    5eb6:	68db      	ldr	r3, [r3, #12]
    5eb8:	4798      	blx	r3
    5eba:	bd10      	pop	{r4, pc}
    5ebc:	20000510 	.word	0x20000510

00005ec0 <SERCOM4_Handler>:
    5ec0:	b510      	push	{r4, lr}
    5ec2:	4b02      	ldr	r3, [pc, #8]	; (5ecc <SERCOM4_Handler+0xc>)
    5ec4:	2004      	movs	r0, #4
    5ec6:	691b      	ldr	r3, [r3, #16]
    5ec8:	4798      	blx	r3
    5eca:	bd10      	pop	{r4, pc}
    5ecc:	20000510 	.word	0x20000510

00005ed0 <SERCOM5_Handler>:
    5ed0:	b510      	push	{r4, lr}
    5ed2:	4b02      	ldr	r3, [pc, #8]	; (5edc <SERCOM5_Handler+0xc>)
    5ed4:	2005      	movs	r0, #5
    5ed6:	695b      	ldr	r3, [r3, #20]
    5ed8:	4798      	blx	r3
    5eda:	bd10      	pop	{r4, pc}
    5edc:	20000510 	.word	0x20000510

00005ee0 <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5ee0:	2300      	movs	r3, #0
{
    5ee2:	b570      	push	{r4, r5, r6, lr}
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    5ee4:	2501      	movs	r5, #1
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5ee6:	4c0b      	ldr	r4, [pc, #44]	; (5f14 <EIC_Handler+0x34>)
    5ee8:	7023      	strb	r3, [r4, #0]
    5eea:	7823      	ldrb	r3, [r4, #0]
    5eec:	2b0f      	cmp	r3, #15
    5eee:	d900      	bls.n	5ef2 <EIC_Handler+0x12>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    5ef0:	bd70      	pop	{r4, r5, r6, pc}
    5ef2:	0029      	movs	r1, r5
    5ef4:	4099      	lsls	r1, r3

	return (eic_module->INTFLAG.reg & eic_mask);
    5ef6:	4a08      	ldr	r2, [pc, #32]	; (5f18 <EIC_Handler+0x38>)
    5ef8:	6910      	ldr	r0, [r2, #16]
		if (extint_chan_is_detected(_current_channel)) {
    5efa:	4208      	tst	r0, r1
    5efc:	d006      	beq.n	5f0c <EIC_Handler+0x2c>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    5efe:	6111      	str	r1, [r2, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5f00:	4a06      	ldr	r2, [pc, #24]	; (5f1c <EIC_Handler+0x3c>)
    5f02:	009b      	lsls	r3, r3, #2
    5f04:	589b      	ldr	r3, [r3, r2]
    5f06:	2b00      	cmp	r3, #0
    5f08:	d000      	beq.n	5f0c <EIC_Handler+0x2c>
				_extint_dev.callbacks[_current_channel]();
    5f0a:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5f0c:	7823      	ldrb	r3, [r4, #0]
    5f0e:	3301      	adds	r3, #1
    5f10:	7023      	strb	r3, [r4, #0]
    5f12:	e7ea      	b.n	5eea <EIC_Handler+0xa>
    5f14:	2000105c 	.word	0x2000105c
    5f18:	40001800 	.word	0x40001800
    5f1c:	20000c7c 	.word	0x20000c7c

00005f20 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    5f20:	4770      	bx	lr
	...

00005f24 <cpu_irq_save>:
{
    5f24:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5f26:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    5f2a:	425a      	negs	r2, r3
    5f2c:	4153      	adcs	r3, r2
    5f2e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    5f30:	b672      	cpsid	i
    5f32:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5f36:	2200      	movs	r2, #0
    5f38:	4b02      	ldr	r3, [pc, #8]	; (5f44 <cpu_irq_save+0x20>)
    5f3a:	701a      	strb	r2, [r3, #0]
	return flags;
    5f3c:	9801      	ldr	r0, [sp, #4]
}
    5f3e:	b002      	add	sp, #8
    5f40:	4770      	bx	lr
    5f42:	46c0      	nop			; (mov r8, r8)
    5f44:	20000120 	.word	0x20000120

00005f48 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    5f48:	4a02      	ldr	r2, [pc, #8]	; (5f54 <udi_cdc_comm_disable+0xc>)
    5f4a:	7813      	ldrb	r3, [r2, #0]
    5f4c:	3b01      	subs	r3, #1
    5f4e:	b2db      	uxtb	r3, r3
    5f50:	7013      	strb	r3, [r2, #0]
}
    5f52:	4770      	bx	lr
    5f54:	20000533 	.word	0x20000533

00005f58 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
    5f58:	2000      	movs	r0, #0
    5f5a:	4770      	bx	lr

00005f5c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
    5f5c:	2000      	movs	r0, #0
    5f5e:	4770      	bx	lr

00005f60 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
    5f60:	b510      	push	{r4, lr}
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
    5f62:	4902      	ldr	r1, [pc, #8]	; (5f6c <udi_cdc_line_coding_received+0xc>)
    5f64:	2000      	movs	r0, #0
    5f66:	4b02      	ldr	r3, [pc, #8]	; (5f70 <udi_cdc_line_coding_received+0x10>)
    5f68:	4798      	blx	r3
}
    5f6a:	bd10      	pop	{r4, pc}
    5f6c:	2000052c 	.word	0x2000052c
    5f70:	00008b89 	.word	0x00008b89

00005f74 <udi_cdc_data_disable>:
{
    5f74:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled--;
    5f76:	4a06      	ldr	r2, [pc, #24]	; (5f90 <udi_cdc_data_disable+0x1c>)
    5f78:	7813      	ldrb	r3, [r2, #0]
    5f7a:	3b01      	subs	r3, #1
    5f7c:	b2db      	uxtb	r3, r3
    5f7e:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
    5f80:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
    5f82:	4b04      	ldr	r3, [pc, #16]	; (5f94 <udi_cdc_data_disable+0x20>)
	port = udi_cdc_nb_data_enabled;
    5f84:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
    5f86:	4798      	blx	r3
	udi_cdc_data_running = false;
    5f88:	2200      	movs	r2, #0
    5f8a:	4b03      	ldr	r3, [pc, #12]	; (5f98 <udi_cdc_data_disable+0x24>)
    5f8c:	701a      	strb	r2, [r3, #0]
}
    5f8e:	bd10      	pop	{r4, pc}
    5f90:	20000534 	.word	0x20000534
    5f94:	00008b79 	.word	0x00008b79
    5f98:	2000052a 	.word	0x2000052a

00005f9c <cpu_irq_restore>:
	if (cpu_irq_is_enabled_flags(flags))
    5f9c:	2800      	cmp	r0, #0
    5f9e:	d005      	beq.n	5fac <cpu_irq_restore+0x10>
		cpu_irq_enable();
    5fa0:	2201      	movs	r2, #1
    5fa2:	4b03      	ldr	r3, [pc, #12]	; (5fb0 <cpu_irq_restore+0x14>)
    5fa4:	701a      	strb	r2, [r3, #0]
    5fa6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5faa:	b662      	cpsie	i
}
    5fac:	4770      	bx	lr
    5fae:	46c0      	nop			; (mov r8, r8)
    5fb0:	20000120 	.word	0x20000120

00005fb4 <udi_cdc_comm_enable>:
{
    5fb4:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_comm_enabled = 0;
    5fb6:	2400      	movs	r4, #0
	uid_cdc_state_msg[port].header.bmRequestType =
    5fb8:	22a1      	movs	r2, #161	; 0xa1
	udi_cdc_state[port] = CPU_TO_LE16(0);
    5fba:	4b11      	ldr	r3, [pc, #68]	; (6000 <udi_cdc_comm_enable+0x4c>)
	udi_cdc_nb_comm_enabled = 0;
    5fbc:	4d11      	ldr	r5, [pc, #68]	; (6004 <udi_cdc_comm_enable+0x50>)
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    5fbe:	4912      	ldr	r1, [pc, #72]	; (6008 <udi_cdc_comm_enable+0x54>)
	udi_cdc_nb_comm_enabled = 0;
    5fc0:	702c      	strb	r4, [r5, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
    5fc2:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
    5fc4:	4b11      	ldr	r3, [pc, #68]	; (600c <udi_cdc_comm_enable+0x58>)
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
    5fc6:	0020      	movs	r0, r4
	uid_cdc_state_msg[port].header.bmRequestType =
    5fc8:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    5fca:	3a81      	subs	r2, #129	; 0x81
    5fcc:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    5fce:	3a1e      	subs	r2, #30
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    5fd0:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    5fd2:	809c      	strh	r4, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    5fd4:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    5fd6:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    5fd8:	23e1      	movs	r3, #225	; 0xe1
    5fda:	025b      	lsls	r3, r3, #9
    5fdc:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    5fde:	2308      	movs	r3, #8
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    5fe0:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    5fe2:	718b      	strb	r3, [r1, #6]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    5fe4:	714c      	strb	r4, [r1, #5]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
    5fe6:	4b0a      	ldr	r3, [pc, #40]	; (6010 <udi_cdc_comm_enable+0x5c>)
    5fe8:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
    5fea:	0020      	movs	r0, r4
    5fec:	4b09      	ldr	r3, [pc, #36]	; (6014 <udi_cdc_comm_enable+0x60>)
    5fee:	4798      	blx	r3
    5ff0:	42a0      	cmp	r0, r4
    5ff2:	d003      	beq.n	5ffc <udi_cdc_comm_enable+0x48>
	udi_cdc_nb_comm_enabled++;
    5ff4:	782b      	ldrb	r3, [r5, #0]
    5ff6:	3301      	adds	r3, #1
    5ff8:	b2db      	uxtb	r3, r3
    5ffa:	702b      	strb	r3, [r5, #0]
}
    5ffc:	bd70      	pop	{r4, r5, r6, pc}
    5ffe:	46c0      	nop			; (mov r8, r8)
    6000:	200007c2 	.word	0x200007c2
    6004:	20000533 	.word	0x20000533
    6008:	2000052c 	.word	0x2000052c
    600c:	20000a54 	.word	0x20000a54
    6010:	00008b89 	.word	0x00008b89
    6014:	00008b6d 	.word	0x00008b6d

00006018 <udi_cdc_tx_send.isra.2>:
	}
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
    6018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    601a:	4b36      	ldr	r3, [pc, #216]	; (60f4 <udi_cdc_tx_send.isra.2+0xdc>)
    601c:	781b      	ldrb	r3, [r3, #0]
    601e:	2b00      	cmp	r3, #0
    6020:	d123      	bne.n	606a <udi_cdc_tx_send.isra.2+0x52>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
    6022:	4b35      	ldr	r3, [pc, #212]	; (60f8 <udi_cdc_tx_send.isra.2+0xe0>)
    6024:	4798      	blx	r3
    6026:	4e35      	ldr	r6, [pc, #212]	; (60fc <udi_cdc_tx_send.isra.2+0xe4>)
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    6028:	4b35      	ldr	r3, [pc, #212]	; (6100 <udi_cdc_tx_send.isra.2+0xe8>)
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    602a:	8834      	ldrh	r4, [r6, #0]
	if (udd_is_high_speed()) {
    602c:	2800      	cmp	r0, #0
    602e:	d000      	beq.n	6032 <udi_cdc_tx_send.isra.2+0x1a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    6030:	4b34      	ldr	r3, [pc, #208]	; (6104 <udi_cdc_tx_send.isra.2+0xec>)
    6032:	4798      	blx	r3
    6034:	4284      	cmp	r4, r0
    6036:	d018      	beq.n	606a <udi_cdc_tx_send.isra.2+0x52>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    6038:	4b33      	ldr	r3, [pc, #204]	; (6108 <udi_cdc_tx_send.isra.2+0xf0>)
    603a:	4798      	blx	r3
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    603c:	4b33      	ldr	r3, [pc, #204]	; (610c <udi_cdc_tx_send.isra.2+0xf4>)
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    603e:	4a34      	ldr	r2, [pc, #208]	; (6110 <udi_cdc_tx_send.isra.2+0xf8>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    6040:	781c      	ldrb	r4, [r3, #0]
	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    6042:	0007      	movs	r7, r0
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    6044:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    6046:	0063      	lsls	r3, r4, #1
    6048:	5a9b      	ldrh	r3, [r3, r2]
    604a:	2b00      	cmp	r3, #0
    604c:	d116      	bne.n	607c <udi_cdc_tx_send.isra.2+0x64>
		sof_zlp_counter++;
    604e:	4d31      	ldr	r5, [pc, #196]	; (6114 <udi_cdc_tx_send.isra.2+0xfc>)
    6050:	882b      	ldrh	r3, [r5, #0]
    6052:	3301      	adds	r3, #1
    6054:	802b      	strh	r3, [r5, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    6056:	4b28      	ldr	r3, [pc, #160]	; (60f8 <udi_cdc_tx_send.isra.2+0xe0>)
    6058:	4798      	blx	r3
    605a:	2800      	cmp	r0, #0
    605c:	d106      	bne.n	606c <udi_cdc_tx_send.isra.2+0x54>
    605e:	882b      	ldrh	r3, [r5, #0]
    6060:	2b63      	cmp	r3, #99	; 0x63
    6062:	d803      	bhi.n	606c <udi_cdc_tx_send.isra.2+0x54>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
    6064:	0038      	movs	r0, r7
    6066:	4b2c      	ldr	r3, [pc, #176]	; (6118 <udi_cdc_tx_send.isra.2+0x100>)
    6068:	4798      	blx	r3
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    606a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    606c:	4b22      	ldr	r3, [pc, #136]	; (60f8 <udi_cdc_tx_send.isra.2+0xe0>)
    606e:	4798      	blx	r3
    6070:	2800      	cmp	r0, #0
    6072:	d003      	beq.n	607c <udi_cdc_tx_send.isra.2+0x64>
    6074:	4b29      	ldr	r3, [pc, #164]	; (611c <udi_cdc_tx_send.isra.2+0x104>)
    6076:	882a      	ldrh	r2, [r5, #0]
    6078:	429a      	cmp	r2, r3
    607a:	d9f3      	bls.n	6064 <udi_cdc_tx_send.isra.2+0x4c>
	sof_zlp_counter = 0;
    607c:	2200      	movs	r2, #0
    607e:	4b25      	ldr	r3, [pc, #148]	; (6114 <udi_cdc_tx_send.isra.2+0xfc>)
    6080:	801a      	strh	r2, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
    6082:	4b27      	ldr	r3, [pc, #156]	; (6120 <udi_cdc_tx_send.isra.2+0x108>)
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	4293      	cmp	r3, r2
    6088:	d12d      	bne.n	60e6 <udi_cdc_tx_send.isra.2+0xce>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    608a:	4263      	negs	r3, r4
    608c:	4163      	adcs	r3, r4
    608e:	4a1f      	ldr	r2, [pc, #124]	; (610c <udi_cdc_tx_send.isra.2+0xf4>)
    6090:	b2db      	uxtb	r3, r3
    6092:	7013      	strb	r3, [r2, #0]
	udi_cdc_tx_trans_ongoing[port] = true;
    6094:	2301      	movs	r3, #1
    6096:	4a17      	ldr	r2, [pc, #92]	; (60f4 <udi_cdc_tx_send.isra.2+0xdc>)
	cpu_irq_restore(flags);
    6098:	0038      	movs	r0, r7
	udi_cdc_tx_trans_ongoing[port] = true;
    609a:	7013      	strb	r3, [r2, #0]
	cpu_irq_restore(flags);
    609c:	4b1e      	ldr	r3, [pc, #120]	; (6118 <udi_cdc_tx_send.isra.2+0x100>)
    609e:	4798      	blx	r3
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    60a0:	4b1b      	ldr	r3, [pc, #108]	; (6110 <udi_cdc_tx_send.isra.2+0xf8>)
    60a2:	0067      	lsls	r7, r4, #1
    60a4:	5bdb      	ldrh	r3, [r3, r7]
    60a6:	001d      	movs	r5, r3
    60a8:	3d41      	subs	r5, #65	; 0x41
    60aa:	3dff      	subs	r5, #255	; 0xff
    60ac:	1e6a      	subs	r2, r5, #1
    60ae:	4195      	sbcs	r5, r2
	if (b_short_packet) {
    60b0:	22a0      	movs	r2, #160	; 0xa0
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    60b2:	b2ed      	uxtb	r5, r5
	if (b_short_packet) {
    60b4:	0052      	lsls	r2, r2, #1
    60b6:	4293      	cmp	r3, r2
    60b8:	d019      	beq.n	60ee <udi_cdc_tx_send.isra.2+0xd6>
		if (udd_is_high_speed()) {
    60ba:	4b0f      	ldr	r3, [pc, #60]	; (60f8 <udi_cdc_tx_send.isra.2+0xe0>)
    60bc:	4798      	blx	r3
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    60be:	4b11      	ldr	r3, [pc, #68]	; (6104 <udi_cdc_tx_send.isra.2+0xec>)
		if (udd_is_high_speed()) {
    60c0:	2800      	cmp	r0, #0
    60c2:	d100      	bne.n	60c6 <udi_cdc_tx_send.isra.2+0xae>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    60c4:	4b0e      	ldr	r3, [pc, #56]	; (6100 <udi_cdc_tx_send.isra.2+0xe8>)
    60c6:	4798      	blx	r3
    60c8:	8030      	strh	r0, [r6, #0]
			udi_cdc_tx_buf[port][buf_sel_trans],
    60ca:	22a0      	movs	r2, #160	; 0xa0
    60cc:	0052      	lsls	r2, r2, #1
    60ce:	4354      	muls	r4, r2
	udd_ep_run( ep,
    60d0:	4914      	ldr	r1, [pc, #80]	; (6124 <udi_cdc_tx_send.isra.2+0x10c>)
    60d2:	4b0f      	ldr	r3, [pc, #60]	; (6110 <udi_cdc_tx_send.isra.2+0xf8>)
			udi_cdc_tx_buf[port][buf_sel_trans],
    60d4:	4a14      	ldr	r2, [pc, #80]	; (6128 <udi_cdc_tx_send.isra.2+0x110>)
	udd_ep_run( ep,
    60d6:	5bdb      	ldrh	r3, [r3, r7]
			udi_cdc_tx_buf[port][buf_sel_trans],
    60d8:	1912      	adds	r2, r2, r4
	udd_ep_run( ep,
    60da:	9100      	str	r1, [sp, #0]
    60dc:	4c13      	ldr	r4, [pc, #76]	; (612c <udi_cdc_tx_send.isra.2+0x114>)
    60de:	0029      	movs	r1, r5
    60e0:	2081      	movs	r0, #129	; 0x81
    60e2:	47a0      	blx	r4
    60e4:	e7c1      	b.n	606a <udi_cdc_tx_send.isra.2+0x52>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    60e6:	4262      	negs	r2, r4
    60e8:	4154      	adcs	r4, r2
    60ea:	b2e4      	uxtb	r4, r4
    60ec:	e7d2      	b.n	6094 <udi_cdc_tx_send.isra.2+0x7c>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    60ee:	2300      	movs	r3, #0
    60f0:	8033      	strh	r3, [r6, #0]
    60f2:	e7ea      	b.n	60ca <udi_cdc_tx_send.isra.2+0xb2>
    60f4:	20000a50 	.word	0x20000a50
    60f8:	000028a9 	.word	0x000028a9
    60fc:	20000a4e 	.word	0x20000a4e
    6100:	000028ad 	.word	0x000028ad
    6104:	000028bd 	.word	0x000028bd
    6108:	00005f25 	.word	0x00005f25
    610c:	20000a4c 	.word	0x20000a4c
    6110:	20000a48 	.word	0x20000a48
    6114:	20000528 	.word	0x20000528
    6118:	00005f9d 	.word	0x00005f9d
    611c:	0000031f 	.word	0x0000031f
    6120:	200007c4 	.word	0x200007c4
    6124:	0000613d 	.word	0x0000613d
    6128:	200007c8 	.word	0x200007c8
    612c:	00002b3d 	.word	0x00002b3d

00006130 <udi_cdc_data_sof_notify>:
{
    6130:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
    6132:	4b01      	ldr	r3, [pc, #4]	; (6138 <udi_cdc_data_sof_notify+0x8>)
    6134:	4798      	blx	r3
}
    6136:	bd10      	pop	{r4, pc}
    6138:	00006019 	.word	0x00006019

0000613c <udi_cdc_data_sent>:
{
    613c:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    613e:	2800      	cmp	r0, #0
    6140:	d10c      	bne.n	615c <udi_cdc_data_sent+0x20>
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    6142:	4b07      	ldr	r3, [pc, #28]	; (6160 <udi_cdc_data_sent+0x24>)
    6144:	781b      	ldrb	r3, [r3, #0]
    6146:	425a      	negs	r2, r3
    6148:	4153      	adcs	r3, r2
    614a:	4a06      	ldr	r2, [pc, #24]	; (6164 <udi_cdc_data_sent+0x28>)
    614c:	005b      	lsls	r3, r3, #1
    614e:	5298      	strh	r0, [r3, r2]
	udi_cdc_tx_both_buf_to_send[port] = false;
    6150:	4b05      	ldr	r3, [pc, #20]	; (6168 <udi_cdc_data_sent+0x2c>)
    6152:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    6154:	4b05      	ldr	r3, [pc, #20]	; (616c <udi_cdc_data_sent+0x30>)
    6156:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
    6158:	4b05      	ldr	r3, [pc, #20]	; (6170 <udi_cdc_data_sent+0x34>)
    615a:	4798      	blx	r3
}
    615c:	bd10      	pop	{r4, pc}
    615e:	46c0      	nop			; (mov r8, r8)
    6160:	20000a4c 	.word	0x20000a4c
    6164:	20000a48 	.word	0x20000a48
    6168:	200007c4 	.word	0x200007c4
    616c:	20000a50 	.word	0x20000a50
    6170:	00006019 	.word	0x00006019

00006174 <udi_cdc_comm_setup>:
{
    6174:	2160      	movs	r1, #96	; 0x60
    6176:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    6178:	4b14      	ldr	r3, [pc, #80]	; (61cc <udi_cdc_comm_setup+0x58>)
    617a:	781a      	ldrb	r2, [r3, #0]
    617c:	b250      	sxtb	r0, r2
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    617e:	400a      	ands	r2, r1
	if (Udd_setup_is_in()) {
    6180:	2800      	cmp	r0, #0
    6182:	da0d      	bge.n	61a0 <udi_cdc_comm_setup+0x2c>
	return false;  // request Not supported
    6184:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    6186:	2a20      	cmp	r2, #32
    6188:	d112      	bne.n	61b0 <udi_cdc_comm_setup+0x3c>
			switch (udd_g_ctrlreq.req.bRequest) {
    618a:	785a      	ldrb	r2, [r3, #1]
    618c:	2a21      	cmp	r2, #33	; 0x21
    618e:	d10f      	bne.n	61b0 <udi_cdc_comm_setup+0x3c>
				if (sizeof(usb_cdc_line_coding_t) !=
    6190:	88da      	ldrh	r2, [r3, #6]
    6192:	2a07      	cmp	r2, #7
    6194:	d10c      	bne.n	61b0 <udi_cdc_comm_setup+0x3c>
				udd_g_ctrlreq.payload =
    6196:	490e      	ldr	r1, [pc, #56]	; (61d0 <udi_cdc_comm_setup+0x5c>)
				udd_g_ctrlreq.payload_size =
    6198:	819a      	strh	r2, [r3, #12]
				udd_g_ctrlreq.payload =
    619a:	6099      	str	r1, [r3, #8]
				return true;
    619c:	2001      	movs	r0, #1
    619e:	e007      	b.n	61b0 <udi_cdc_comm_setup+0x3c>
	return false;  // request Not supported
    61a0:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    61a2:	2a20      	cmp	r2, #32
    61a4:	d104      	bne.n	61b0 <udi_cdc_comm_setup+0x3c>
			switch (udd_g_ctrlreq.req.bRequest) {
    61a6:	785a      	ldrb	r2, [r3, #1]
    61a8:	2a20      	cmp	r2, #32
    61aa:	d002      	beq.n	61b2 <udi_cdc_comm_setup+0x3e>
    61ac:	2a22      	cmp	r2, #34	; 0x22
    61ae:	d006      	beq.n	61be <udi_cdc_comm_setup+0x4a>
}
    61b0:	bd10      	pop	{r4, pc}
				if (sizeof(usb_cdc_line_coding_t) !=
    61b2:	88da      	ldrh	r2, [r3, #6]
    61b4:	2a07      	cmp	r2, #7
    61b6:	d1fb      	bne.n	61b0 <udi_cdc_comm_setup+0x3c>
				udd_g_ctrlreq.callback =
    61b8:	4906      	ldr	r1, [pc, #24]	; (61d4 <udi_cdc_comm_setup+0x60>)
    61ba:	6119      	str	r1, [r3, #16]
    61bc:	e7eb      	b.n	6196 <udi_cdc_comm_setup+0x22>
				UDI_CDC_SET_DTR_EXT(port, (0 !=
    61be:	2401      	movs	r4, #1
    61c0:	8859      	ldrh	r1, [r3, #2]
    61c2:	4b05      	ldr	r3, [pc, #20]	; (61d8 <udi_cdc_comm_setup+0x64>)
    61c4:	4021      	ands	r1, r4
    61c6:	4798      	blx	r3
				return true;
    61c8:	0020      	movs	r0, r4
    61ca:	e7f1      	b.n	61b0 <udi_cdc_comm_setup+0x3c>
    61cc:	20000ee4 	.word	0x20000ee4
    61d0:	2000052c 	.word	0x2000052c
    61d4:	00005f61 	.word	0x00005f61
    61d8:	00008b85 	.word	0x00008b85

000061dc <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    61dc:	b570      	push	{r4, r5, r6, lr}
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
    61de:	4b07      	ldr	r3, [pc, #28]	; (61fc <udi_cdc_multi_get_nb_received_data+0x20>)
    61e0:	4798      	blx	r3
	pos = udi_cdc_rx_pos[port];
    61e2:	4b07      	ldr	r3, [pc, #28]	; (6200 <udi_cdc_multi_get_nb_received_data+0x24>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    61e4:	4a07      	ldr	r2, [pc, #28]	; (6204 <udi_cdc_multi_get_nb_received_data+0x28>)
	pos = udi_cdc_rx_pos[port];
    61e6:	881d      	ldrh	r5, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    61e8:	4b07      	ldr	r3, [pc, #28]	; (6208 <udi_cdc_multi_get_nb_received_data+0x2c>)
	pos = udi_cdc_rx_pos[port];
    61ea:	b2ad      	uxth	r5, r5
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    61ec:	781b      	ldrb	r3, [r3, #0]
    61ee:	005b      	lsls	r3, r3, #1
    61f0:	5a9c      	ldrh	r4, [r3, r2]
	cpu_irq_restore(flags);
    61f2:	4b06      	ldr	r3, [pc, #24]	; (620c <udi_cdc_multi_get_nb_received_data+0x30>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    61f4:	b2a4      	uxth	r4, r4
	cpu_irq_restore(flags);
    61f6:	4798      	blx	r3
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    61f8:	1b60      	subs	r0, r4, r5
	return nb_received;
}
    61fa:	bd70      	pop	{r4, r5, r6, pc}
    61fc:	00005f25 	.word	0x00005f25
    6200:	200007be 	.word	0x200007be
    6204:	200007b8 	.word	0x200007b8
    6208:	200007bc 	.word	0x200007bc
    620c:	00005f9d 	.word	0x00005f9d

00006210 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    6210:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    6212:	4b03      	ldr	r3, [pc, #12]	; (6220 <udi_cdc_multi_is_rx_ready+0x10>)
    6214:	4798      	blx	r3
    6216:	1e43      	subs	r3, r0, #1
    6218:	4198      	sbcs	r0, r3
    621a:	b2c0      	uxtb	r0, r0
}
    621c:	bd10      	pop	{r4, pc}
    621e:	46c0      	nop			; (mov r8, r8)
    6220:	000061dd 	.word	0x000061dd

00006224 <udi_cdc_rx_start.isra.9>:
static bool udi_cdc_rx_start(uint8_t port)
    6224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	flags = cpu_irq_save();
    6226:	4b1a      	ldr	r3, [pc, #104]	; (6290 <udi_cdc_rx_start.isra.9+0x6c>)
    6228:	4798      	blx	r3
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    622a:	491a      	ldr	r1, [pc, #104]	; (6294 <udi_cdc_rx_start.isra.9+0x70>)
	if (udi_cdc_rx_trans_ongoing[port] ||
    622c:	4b1a      	ldr	r3, [pc, #104]	; (6298 <udi_cdc_rx_start.isra.9+0x74>)
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    622e:	780c      	ldrb	r4, [r1, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    6230:	781d      	ldrb	r5, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    6232:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
    6234:	b2ed      	uxtb	r5, r5
    6236:	2d00      	cmp	r5, #0
    6238:	d106      	bne.n	6248 <udi_cdc_rx_start.isra.9+0x24>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    623a:	4e18      	ldr	r6, [pc, #96]	; (629c <udi_cdc_rx_start.isra.9+0x78>)
    623c:	4a18      	ldr	r2, [pc, #96]	; (62a0 <udi_cdc_rx_start.isra.9+0x7c>)
    623e:	0063      	lsls	r3, r4, #1
    6240:	8837      	ldrh	r7, [r6, #0]
    6242:	5a9b      	ldrh	r3, [r3, r2]
	if (udi_cdc_rx_trans_ongoing[port] ||
    6244:	429f      	cmp	r7, r3
    6246:	d203      	bcs.n	6250 <udi_cdc_rx_start.isra.9+0x2c>
		cpu_irq_restore(flags);
    6248:	4b16      	ldr	r3, [pc, #88]	; (62a4 <udi_cdc_rx_start.isra.9+0x80>)
    624a:	4798      	blx	r3
		return false;
    624c:	2000      	movs	r0, #0
}
    624e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	udi_cdc_rx_pos[port] = 0;
    6250:	8035      	strh	r5, [r6, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    6252:	4263      	negs	r3, r4
    6254:	4163      	adcs	r3, r4
    6256:	b2db      	uxtb	r3, r3
    6258:	700b      	strb	r3, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
    625a:	2301      	movs	r3, #1
    625c:	4a0e      	ldr	r2, [pc, #56]	; (6298 <udi_cdc_rx_start.isra.9+0x74>)
    625e:	7013      	strb	r3, [r2, #0]
	cpu_irq_restore(flags);
    6260:	4b10      	ldr	r3, [pc, #64]	; (62a4 <udi_cdc_rx_start.isra.9+0x80>)
    6262:	4798      	blx	r3
	if (udi_cdc_multi_is_rx_ready(port)) {
    6264:	0028      	movs	r0, r5
    6266:	4b10      	ldr	r3, [pc, #64]	; (62a8 <udi_cdc_rx_start.isra.9+0x84>)
    6268:	4798      	blx	r3
    626a:	2800      	cmp	r0, #0
    626c:	d002      	beq.n	6274 <udi_cdc_rx_start.isra.9+0x50>
		UDI_CDC_RX_NOTIFY(port);
    626e:	0028      	movs	r0, r5
    6270:	4b0e      	ldr	r3, [pc, #56]	; (62ac <udi_cdc_rx_start.isra.9+0x88>)
    6272:	4798      	blx	r3
	return udd_ep_run(ep,
    6274:	23a0      	movs	r3, #160	; 0xa0
    6276:	005b      	lsls	r3, r3, #1
			udi_cdc_rx_buf[port][buf_sel_trans],
    6278:	435c      	muls	r4, r3
    627a:	4a0d      	ldr	r2, [pc, #52]	; (62b0 <udi_cdc_rx_start.isra.9+0x8c>)
	return udd_ep_run(ep,
    627c:	2101      	movs	r1, #1
			udi_cdc_rx_buf[port][buf_sel_trans],
    627e:	1914      	adds	r4, r2, r4
	return udd_ep_run(ep,
    6280:	4a0c      	ldr	r2, [pc, #48]	; (62b4 <udi_cdc_rx_start.isra.9+0x90>)
    6282:	2002      	movs	r0, #2
    6284:	9200      	str	r2, [sp, #0]
    6286:	0022      	movs	r2, r4
    6288:	4c0b      	ldr	r4, [pc, #44]	; (62b8 <udi_cdc_rx_start.isra.9+0x94>)
    628a:	47a0      	blx	r4
    628c:	e7df      	b.n	624e <udi_cdc_rx_start.isra.9+0x2a>
    628e:	46c0      	nop			; (mov r8, r8)
    6290:	00005f25 	.word	0x00005f25
    6294:	200007bc 	.word	0x200007bc
    6298:	200007c0 	.word	0x200007c0
    629c:	200007be 	.word	0x200007be
    62a0:	200007b8 	.word	0x200007b8
    62a4:	00005f9d 	.word	0x00005f9d
    62a8:	00006211 	.word	0x00006211
    62ac:	00008b87 	.word	0x00008b87
    62b0:	20000538 	.word	0x20000538
    62b4:	00006345 	.word	0x00006345
    62b8:	00002b3d 	.word	0x00002b3d

000062bc <udi_cdc_data_enable>:
{
    62bc:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_data_enabled = 0;
    62be:	2400      	movs	r4, #0
	udi_cdc_tx_trans_ongoing[port] = false;
    62c0:	4b13      	ldr	r3, [pc, #76]	; (6310 <udi_cdc_data_enable+0x54>)
	udi_cdc_nb_data_enabled = 0;
    62c2:	4d14      	ldr	r5, [pc, #80]	; (6314 <udi_cdc_data_enable+0x58>)
    62c4:	702c      	strb	r4, [r5, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
    62c6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
    62c8:	4b13      	ldr	r3, [pc, #76]	; (6318 <udi_cdc_data_enable+0x5c>)
    62ca:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
    62cc:	4b13      	ldr	r3, [pc, #76]	; (631c <udi_cdc_data_enable+0x60>)
    62ce:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
    62d0:	4b13      	ldr	r3, [pc, #76]	; (6320 <udi_cdc_data_enable+0x64>)
    62d2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
    62d4:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
    62d6:	4b13      	ldr	r3, [pc, #76]	; (6324 <udi_cdc_data_enable+0x68>)
    62d8:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
    62da:	4b13      	ldr	r3, [pc, #76]	; (6328 <udi_cdc_data_enable+0x6c>)
    62dc:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
    62de:	4b13      	ldr	r3, [pc, #76]	; (632c <udi_cdc_data_enable+0x70>)
    62e0:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
    62e2:	4b13      	ldr	r3, [pc, #76]	; (6330 <udi_cdc_data_enable+0x74>)
    62e4:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
    62e6:	4b13      	ldr	r3, [pc, #76]	; (6334 <udi_cdc_data_enable+0x78>)
    62e8:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
    62ea:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
    62ec:	4b12      	ldr	r3, [pc, #72]	; (6338 <udi_cdc_data_enable+0x7c>)
    62ee:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
    62f0:	4b12      	ldr	r3, [pc, #72]	; (633c <udi_cdc_data_enable+0x80>)
    62f2:	4798      	blx	r3
    62f4:	42a0      	cmp	r0, r4
    62f6:	d009      	beq.n	630c <udi_cdc_data_enable+0x50>
	udi_cdc_nb_data_enabled++;
    62f8:	782b      	ldrb	r3, [r5, #0]
    62fa:	3301      	adds	r3, #1
    62fc:	b2db      	uxtb	r3, r3
    62fe:	702b      	strb	r3, [r5, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    6300:	782b      	ldrb	r3, [r5, #0]
    6302:	b2db      	uxtb	r3, r3
    6304:	2b01      	cmp	r3, #1
    6306:	d101      	bne.n	630c <udi_cdc_data_enable+0x50>
		udi_cdc_data_running = true;
    6308:	4a0d      	ldr	r2, [pc, #52]	; (6340 <udi_cdc_data_enable+0x84>)
    630a:	7013      	strb	r3, [r2, #0]
}
    630c:	bd70      	pop	{r4, r5, r6, pc}
    630e:	46c0      	nop			; (mov r8, r8)
    6310:	20000a50 	.word	0x20000a50
    6314:	20000534 	.word	0x20000534
    6318:	200007c4 	.word	0x200007c4
    631c:	20000a4c 	.word	0x20000a4c
    6320:	20000a48 	.word	0x20000a48
    6324:	20000a4e 	.word	0x20000a4e
    6328:	00006019 	.word	0x00006019
    632c:	200007c0 	.word	0x200007c0
    6330:	200007bc 	.word	0x200007bc
    6334:	200007b8 	.word	0x200007b8
    6338:	200007be 	.word	0x200007be
    633c:	00006225 	.word	0x00006225
    6340:	2000052a 	.word	0x2000052a

00006344 <udi_cdc_data_received>:
{
    6344:	b513      	push	{r0, r1, r4, lr}
    6346:	0003      	movs	r3, r0
    6348:	0010      	movs	r0, r2
	if (UDD_EP_TRANSFER_OK != status) {
    634a:	2b00      	cmp	r3, #0
    634c:	d110      	bne.n	6370 <udi_cdc_data_received+0x2c>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    634e:	4a0d      	ldr	r2, [pc, #52]	; (6384 <udi_cdc_data_received+0x40>)
    6350:	7812      	ldrb	r2, [r2, #0]
    6352:	4254      	negs	r4, r2
    6354:	4162      	adcs	r2, r4
    6356:	b2d2      	uxtb	r2, r2
	if (!n) {
    6358:	2900      	cmp	r1, #0
    635a:	d10a      	bne.n	6372 <udi_cdc_data_received+0x2e>
		udd_ep_run( ep,
    635c:	3341      	adds	r3, #65	; 0x41
    635e:	33ff      	adds	r3, #255	; 0xff
				udi_cdc_rx_buf[port][buf_sel_trans],
    6360:	435a      	muls	r2, r3
    6362:	4909      	ldr	r1, [pc, #36]	; (6388 <udi_cdc_data_received+0x44>)
		udd_ep_run( ep,
    6364:	4c09      	ldr	r4, [pc, #36]	; (638c <udi_cdc_data_received+0x48>)
				udi_cdc_rx_buf[port][buf_sel_trans],
    6366:	188a      	adds	r2, r1, r2
		udd_ep_run( ep,
    6368:	4909      	ldr	r1, [pc, #36]	; (6390 <udi_cdc_data_received+0x4c>)
    636a:	9100      	str	r1, [sp, #0]
    636c:	2101      	movs	r1, #1
    636e:	47a0      	blx	r4
}
    6370:	bd13      	pop	{r0, r1, r4, pc}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    6372:	4808      	ldr	r0, [pc, #32]	; (6394 <udi_cdc_data_received+0x50>)
    6374:	b289      	uxth	r1, r1
    6376:	0052      	lsls	r2, r2, #1
    6378:	5211      	strh	r1, [r2, r0]
	udi_cdc_rx_trans_ongoing[port] = false;
    637a:	4a07      	ldr	r2, [pc, #28]	; (6398 <udi_cdc_data_received+0x54>)
    637c:	7013      	strb	r3, [r2, #0]
	udi_cdc_rx_start(port);
    637e:	4b07      	ldr	r3, [pc, #28]	; (639c <udi_cdc_data_received+0x58>)
    6380:	4798      	blx	r3
    6382:	e7f5      	b.n	6370 <udi_cdc_data_received+0x2c>
    6384:	200007bc 	.word	0x200007bc
    6388:	20000538 	.word	0x20000538
    638c:	00002b3d 	.word	0x00002b3d
    6390:	00006345 	.word	0x00006345
    6394:	200007b8 	.word	0x200007b8
    6398:	200007c0 	.word	0x200007c0
    639c:	00006225 	.word	0x00006225

000063a0 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
    63a0:	b510      	push	{r4, lr}
	return udi_cdc_multi_is_rx_ready(0);
    63a2:	2000      	movs	r0, #0
    63a4:	4b01      	ldr	r3, [pc, #4]	; (63ac <udi_cdc_is_rx_ready+0xc>)
    63a6:	4798      	blx	r3
}
    63a8:	bd10      	pop	{r4, pc}
    63aa:	46c0      	nop			; (mov r8, r8)
    63ac:	00006211 	.word	0x00006211

000063b0 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
    63b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    63b2:	4b1a      	ldr	r3, [pc, #104]	; (641c <udi_cdc_multi_getc+0x6c>)
	int rx_data = 0;
    63b4:	2600      	movs	r6, #0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    63b6:	799b      	ldrb	r3, [r3, #6]
    63b8:	3b09      	subs	r3, #9
    63ba:	425a      	negs	r2, r3
    63bc:	4153      	adcs	r3, r2
    63be:	b2db      	uxtb	r3, r3
    63c0:	9300      	str	r3, [sp, #0]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
    63c2:	4b17      	ldr	r3, [pc, #92]	; (6420 <udi_cdc_multi_getc+0x70>)
    63c4:	4798      	blx	r3
	pos = udi_cdc_rx_pos[port];
	buf_sel = udi_cdc_rx_buf_sel[port];
    63c6:	4b17      	ldr	r3, [pc, #92]	; (6424 <udi_cdc_multi_getc+0x74>)
	pos = udi_cdc_rx_pos[port];
    63c8:	4f17      	ldr	r7, [pc, #92]	; (6428 <udi_cdc_multi_getc+0x78>)
    63ca:	883c      	ldrh	r4, [r7, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    63cc:	781d      	ldrb	r5, [r3, #0]
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    63ce:	4b17      	ldr	r3, [pc, #92]	; (642c <udi_cdc_multi_getc+0x7c>)
	buf_sel = udi_cdc_rx_buf_sel[port];
    63d0:	b2ed      	uxtb	r5, r5
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    63d2:	006a      	lsls	r2, r5, #1
    63d4:	5ad3      	ldrh	r3, [r2, r3]
	pos = udi_cdc_rx_pos[port];
    63d6:	b2a4      	uxth	r4, r4
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    63d8:	b29b      	uxth	r3, r3
    63da:	9301      	str	r3, [sp, #4]
	cpu_irq_restore(flags);
    63dc:	4b14      	ldr	r3, [pc, #80]	; (6430 <udi_cdc_multi_getc+0x80>)
    63de:	4798      	blx	r3
	while (again) {
    63e0:	9b01      	ldr	r3, [sp, #4]
    63e2:	429c      	cmp	r4, r3
    63e4:	d307      	bcc.n	63f6 <udi_cdc_multi_getc+0x46>
		if (!udi_cdc_data_running) {
    63e6:	4b13      	ldr	r3, [pc, #76]	; (6434 <udi_cdc_multi_getc+0x84>)
    63e8:	781b      	ldrb	r3, [r3, #0]
    63ea:	b2db      	uxtb	r3, r3
    63ec:	2b00      	cmp	r3, #0
    63ee:	d1e8      	bne.n	63c2 <udi_cdc_multi_getc+0x12>
			return 0;
    63f0:	001e      	movs	r6, r3
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
    63f2:	0030      	movs	r0, r6
    63f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    63f6:	23a0      	movs	r3, #160	; 0xa0
    63f8:	005b      	lsls	r3, r3, #1
    63fa:	435d      	muls	r5, r3
    63fc:	4b0e      	ldr	r3, [pc, #56]	; (6438 <udi_cdc_multi_getc+0x88>)
    63fe:	195d      	adds	r5, r3, r5
    6400:	5d2b      	ldrb	r3, [r5, r4]
	udi_cdc_rx_pos[port] = pos+1;
    6402:	3401      	adds	r4, #1
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    6404:	431e      	orrs	r6, r3
	udi_cdc_rx_pos[port] = pos+1;
    6406:	b2a4      	uxth	r4, r4
	udi_cdc_rx_start(port);
    6408:	4b0c      	ldr	r3, [pc, #48]	; (643c <udi_cdc_multi_getc+0x8c>)
	udi_cdc_rx_pos[port] = pos+1;
    640a:	803c      	strh	r4, [r7, #0]
	udi_cdc_rx_start(port);
    640c:	4798      	blx	r3
	if (b_databit_9) {
    640e:	9b00      	ldr	r3, [sp, #0]
    6410:	2b00      	cmp	r3, #0
    6412:	d0ee      	beq.n	63f2 <udi_cdc_multi_getc+0x42>
		b_databit_9 = false;
    6414:	2300      	movs	r3, #0
		rx_data = rx_data << 8;
    6416:	0236      	lsls	r6, r6, #8
		b_databit_9 = false;
    6418:	9300      	str	r3, [sp, #0]
		goto udi_cdc_getc_process_one_byte;
    641a:	e7d2      	b.n	63c2 <udi_cdc_multi_getc+0x12>
    641c:	2000052c 	.word	0x2000052c
    6420:	00005f25 	.word	0x00005f25
    6424:	200007bc 	.word	0x200007bc
    6428:	200007be 	.word	0x200007be
    642c:	200007b8 	.word	0x200007b8
    6430:	00005f9d 	.word	0x00005f9d
    6434:	2000052a 	.word	0x2000052a
    6438:	20000538 	.word	0x20000538
    643c:	00006225 	.word	0x00006225

00006440 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    6440:	b510      	push	{r4, lr}
	return udi_cdc_multi_getc(0);
    6442:	2000      	movs	r0, #0
    6444:	4b01      	ldr	r3, [pc, #4]	; (644c <udi_cdc_getc+0xc>)
    6446:	4798      	blx	r3
}
    6448:	bd10      	pop	{r4, pc}
    644a:	46c0      	nop			; (mov r8, r8)
    644c:	000063b1 	.word	0x000063b1

00006450 <udi_cdc_multi_read_buf>:

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
    6450:	b5f0      	push	{r4, r5, r6, r7, lr}
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
    6452:	0014      	movs	r4, r2
{
    6454:	b085      	sub	sp, #20
	uint8_t *ptr_buf = (uint8_t *)buf;
    6456:	9101      	str	r1, [sp, #4]
	port = 0;
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
    6458:	4b1c      	ldr	r3, [pc, #112]	; (64cc <udi_cdc_multi_read_buf+0x7c>)
    645a:	4798      	blx	r3
	pos = udi_cdc_rx_pos[port];
	buf_sel = udi_cdc_rx_buf_sel[port];
    645c:	4b1c      	ldr	r3, [pc, #112]	; (64d0 <udi_cdc_multi_read_buf+0x80>)
	pos = udi_cdc_rx_pos[port];
    645e:	4f1d      	ldr	r7, [pc, #116]	; (64d4 <udi_cdc_multi_read_buf+0x84>)
    6460:	883e      	ldrh	r6, [r7, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    6462:	7819      	ldrb	r1, [r3, #0]
	pos = udi_cdc_rx_pos[port];
    6464:	b2b6      	uxth	r6, r6
	buf_sel = udi_cdc_rx_buf_sel[port];
    6466:	b2cb      	uxtb	r3, r1
    6468:	9302      	str	r3, [sp, #8]
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    646a:	005d      	lsls	r5, r3, #1
    646c:	4b1a      	ldr	r3, [pc, #104]	; (64d8 <udi_cdc_multi_read_buf+0x88>)
    646e:	5aeb      	ldrh	r3, [r5, r3]
    6470:	b29b      	uxth	r3, r3
    6472:	9303      	str	r3, [sp, #12]
	cpu_irq_restore(flags);
    6474:	4b19      	ldr	r3, [pc, #100]	; (64dc <udi_cdc_multi_read_buf+0x8c>)
    6476:	4798      	blx	r3
	while (again) {
    6478:	9b03      	ldr	r3, [sp, #12]
    647a:	429e      	cmp	r6, r3
    647c:	d306      	bcc.n	648c <udi_cdc_multi_read_buf+0x3c>
		if (!udi_cdc_data_running) {
    647e:	4b18      	ldr	r3, [pc, #96]	; (64e0 <udi_cdc_multi_read_buf+0x90>)
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	2b00      	cmp	r3, #0
    6484:	d1e8      	bne.n	6458 <udi_cdc_multi_read_buf+0x8>

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
    6486:	0020      	movs	r0, r4
    6488:	b005      	add	sp, #20
    648a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    648c:	4b12      	ldr	r3, [pc, #72]	; (64d8 <udi_cdc_multi_read_buf+0x88>)
    648e:	5aeb      	ldrh	r3, [r5, r3]
    6490:	0025      	movs	r5, r4
    6492:	1b9b      	subs	r3, r3, r6
    6494:	429c      	cmp	r4, r3
    6496:	d900      	bls.n	649a <udi_cdc_multi_read_buf+0x4a>
    6498:	001d      	movs	r5, r3
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
    649a:	23a0      	movs	r3, #160	; 0xa0
    649c:	9902      	ldr	r1, [sp, #8]
    649e:	005b      	lsls	r3, r3, #1
    64a0:	4359      	muls	r1, r3
    64a2:	198e      	adds	r6, r1, r6
    64a4:	490f      	ldr	r1, [pc, #60]	; (64e4 <udi_cdc_multi_read_buf+0x94>)
    64a6:	4b10      	ldr	r3, [pc, #64]	; (64e8 <udi_cdc_multi_read_buf+0x98>)
    64a8:	1989      	adds	r1, r1, r6
    64aa:	002a      	movs	r2, r5
    64ac:	9801      	ldr	r0, [sp, #4]
    64ae:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
    64b0:	883b      	ldrh	r3, [r7, #0]
	size -= copy_nb;
    64b2:	1b64      	subs	r4, r4, r5
	udi_cdc_rx_pos[port] += copy_nb;
    64b4:	195b      	adds	r3, r3, r5
    64b6:	b29b      	uxth	r3, r3
    64b8:	803b      	strh	r3, [r7, #0]
	ptr_buf += copy_nb;
    64ba:	9b01      	ldr	r3, [sp, #4]
    64bc:	195b      	adds	r3, r3, r5
    64be:	9301      	str	r3, [sp, #4]
	udi_cdc_rx_start(port);
    64c0:	4b0a      	ldr	r3, [pc, #40]	; (64ec <udi_cdc_multi_read_buf+0x9c>)
    64c2:	4798      	blx	r3
	if (size) {
    64c4:	2c00      	cmp	r4, #0
    64c6:	d1c7      	bne.n	6458 <udi_cdc_multi_read_buf+0x8>
    64c8:	e7dd      	b.n	6486 <udi_cdc_multi_read_buf+0x36>
    64ca:	46c0      	nop			; (mov r8, r8)
    64cc:	00005f25 	.word	0x00005f25
    64d0:	200007bc 	.word	0x200007bc
    64d4:	200007be 	.word	0x200007be
    64d8:	200007b8 	.word	0x200007b8
    64dc:	00005f9d 	.word	0x00005f9d
    64e0:	2000052a 	.word	0x2000052a
    64e4:	20000538 	.word	0x20000538
    64e8:	00009239 	.word	0x00009239
    64ec:	00006225 	.word	0x00006225

000064f0 <udi_cdc_read_no_polling>:
	}
	return(nb_avail_data);
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
    64f0:	b5f0      	push	{r4, r5, r6, r7, lr}
		return 0;
    64f2:	2500      	movs	r5, #0
	if (!udi_cdc_data_running) {
    64f4:	4b1a      	ldr	r3, [pc, #104]	; (6560 <udi_cdc_read_no_polling+0x70>)
{
    64f6:	b085      	sub	sp, #20
	if (!udi_cdc_data_running) {
    64f8:	781b      	ldrb	r3, [r3, #0]
{
    64fa:	9003      	str	r0, [sp, #12]
    64fc:	000c      	movs	r4, r1
	if (!udi_cdc_data_running) {
    64fe:	42ab      	cmp	r3, r5
    6500:	d02a      	beq.n	6558 <udi_cdc_read_no_polling+0x68>
	flags = cpu_irq_save(); // to protect udi_cdc_rx_pos & udi_cdc_rx_buf_sel
    6502:	4f18      	ldr	r7, [pc, #96]	; (6564 <udi_cdc_read_no_polling+0x74>)
    6504:	47b8      	blx	r7
	pos = udi_cdc_rx_pos[port];
    6506:	4e18      	ldr	r6, [pc, #96]	; (6568 <udi_cdc_read_no_polling+0x78>)
    6508:	8831      	ldrh	r1, [r6, #0]
    650a:	b28b      	uxth	r3, r1
    650c:	9301      	str	r3, [sp, #4]
	buf_sel = udi_cdc_rx_buf_sel[port];
    650e:	4b17      	ldr	r3, [pc, #92]	; (656c <udi_cdc_read_no_polling+0x7c>)
    6510:	7819      	ldrb	r1, [r3, #0]
    6512:	b2cb      	uxtb	r3, r1
	nb_avail_data = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    6514:	005a      	lsls	r2, r3, #1
	buf_sel = udi_cdc_rx_buf_sel[port];
    6516:	9302      	str	r3, [sp, #8]
	nb_avail_data = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    6518:	4b15      	ldr	r3, [pc, #84]	; (6570 <udi_cdc_read_no_polling+0x80>)
    651a:	5ad5      	ldrh	r5, [r2, r3]
    651c:	9b01      	ldr	r3, [sp, #4]
    651e:	1aed      	subs	r5, r5, r3
	cpu_irq_restore(flags);
    6520:	4b14      	ldr	r3, [pc, #80]	; (6574 <udi_cdc_read_no_polling+0x84>)
    6522:	4798      	blx	r3
    6524:	42ac      	cmp	r4, r5
    6526:	d900      	bls.n	652a <udi_cdc_read_no_polling+0x3a>
    6528:	002c      	movs	r4, r5
	if(size>0) {
    652a:	2c00      	cmp	r4, #0
    652c:	d014      	beq.n	6558 <udi_cdc_read_no_polling+0x68>
		memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], size);
    652e:	21a0      	movs	r1, #160	; 0xa0
    6530:	9b02      	ldr	r3, [sp, #8]
    6532:	0049      	lsls	r1, r1, #1
    6534:	4359      	muls	r1, r3
    6536:	9b01      	ldr	r3, [sp, #4]
    6538:	0022      	movs	r2, r4
    653a:	18c9      	adds	r1, r1, r3
    653c:	4b0e      	ldr	r3, [pc, #56]	; (6578 <udi_cdc_read_no_polling+0x88>)
    653e:	9803      	ldr	r0, [sp, #12]
    6540:	1859      	adds	r1, r3, r1
    6542:	4b0e      	ldr	r3, [pc, #56]	; (657c <udi_cdc_read_no_polling+0x8c>)
    6544:	4798      	blx	r3
		flags = cpu_irq_save(); // to protect udi_cdc_rx_pos
    6546:	47b8      	blx	r7
		udi_cdc_rx_pos[port] += size;
    6548:	8833      	ldrh	r3, [r6, #0]
    654a:	191c      	adds	r4, r3, r4
    654c:	b2a4      	uxth	r4, r4
		cpu_irq_restore(flags);
    654e:	4b09      	ldr	r3, [pc, #36]	; (6574 <udi_cdc_read_no_polling+0x84>)
		udi_cdc_rx_pos[port] += size;
    6550:	8034      	strh	r4, [r6, #0]
		cpu_irq_restore(flags);
    6552:	4798      	blx	r3
		udi_cdc_rx_start(port);
    6554:	4b0a      	ldr	r3, [pc, #40]	; (6580 <udi_cdc_read_no_polling+0x90>)
    6556:	4798      	blx	r3
	return udi_cdc_multi_read_no_polling(0, buf, size);
}
    6558:	0028      	movs	r0, r5
    655a:	b005      	add	sp, #20
    655c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    655e:	46c0      	nop			; (mov r8, r8)
    6560:	2000052a 	.word	0x2000052a
    6564:	00005f25 	.word	0x00005f25
    6568:	200007be 	.word	0x200007be
    656c:	200007bc 	.word	0x200007bc
    6570:	200007b8 	.word	0x200007b8
    6574:	00005f9d 	.word	0x00005f9d
    6578:	20000538 	.word	0x20000538
    657c:	00009239 	.word	0x00009239
    6580:	00006225 	.word	0x00006225

00006584 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
    6584:	b510      	push	{r4, lr}
    6586:	000a      	movs	r2, r1
	return udi_cdc_multi_read_buf(0, buf, size);
    6588:	4b02      	ldr	r3, [pc, #8]	; (6594 <udi_cdc_read_buf+0x10>)
    658a:	0001      	movs	r1, r0
    658c:	2000      	movs	r0, #0
    658e:	4798      	blx	r3
}
    6590:	bd10      	pop	{r4, pc}
    6592:	46c0      	nop			; (mov r8, r8)
    6594:	00006451 	.word	0x00006451

00006598 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    6598:	b570      	push	{r4, r5, r6, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
    659a:	4b11      	ldr	r3, [pc, #68]	; (65e0 <udi_cdc_multi_get_free_tx_buffer+0x48>)
    659c:	4798      	blx	r3
	buf_sel = udi_cdc_tx_buf_sel[port];
    659e:	4911      	ldr	r1, [pc, #68]	; (65e4 <udi_cdc_multi_get_free_tx_buffer+0x4c>)
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    65a0:	4a11      	ldr	r2, [pc, #68]	; (65e8 <udi_cdc_multi_get_free_tx_buffer+0x50>)
	buf_sel = udi_cdc_tx_buf_sel[port];
    65a2:	780b      	ldrb	r3, [r1, #0]
    65a4:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    65a6:	005c      	lsls	r4, r3, #1
    65a8:	5aa4      	ldrh	r4, [r4, r2]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    65aa:	22a0      	movs	r2, #160	; 0xa0
    65ac:	0052      	lsls	r2, r2, #1
    65ae:	4294      	cmp	r4, r2
    65b0:	d10f      	bne.n	65d2 <udi_cdc_multi_get_free_tx_buffer+0x3a>
		if ((!udi_cdc_tx_trans_ongoing[port])
    65b2:	4a0e      	ldr	r2, [pc, #56]	; (65ec <udi_cdc_multi_get_free_tx_buffer+0x54>)
    65b4:	7812      	ldrb	r2, [r2, #0]
    65b6:	2a00      	cmp	r2, #0
    65b8:	d10b      	bne.n	65d2 <udi_cdc_multi_get_free_tx_buffer+0x3a>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    65ba:	4d0d      	ldr	r5, [pc, #52]	; (65f0 <udi_cdc_multi_get_free_tx_buffer+0x58>)
    65bc:	782a      	ldrb	r2, [r5, #0]
    65be:	b2d2      	uxtb	r2, r2
    65c0:	2a00      	cmp	r2, #0
    65c2:	d106      	bne.n	65d2 <udi_cdc_multi_get_free_tx_buffer+0x3a>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    65c4:	2401      	movs	r4, #1
    65c6:	702c      	strb	r4, [r5, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    65c8:	425c      	negs	r4, r3
    65ca:	4163      	adcs	r3, r4
			buf_sel_nb = 0;
    65cc:	0014      	movs	r4, r2
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    65ce:	b2db      	uxtb	r3, r3
    65d0:	700b      	strb	r3, [r1, #0]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
	cpu_irq_restore(flags);
    65d2:	4b08      	ldr	r3, [pc, #32]	; (65f4 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
    65d4:	4798      	blx	r3
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    65d6:	20a0      	movs	r0, #160	; 0xa0
    65d8:	0040      	lsls	r0, r0, #1
    65da:	1b00      	subs	r0, r0, r4
	return retval;
}
    65dc:	bd70      	pop	{r4, r5, r6, pc}
    65de:	46c0      	nop			; (mov r8, r8)
    65e0:	00005f25 	.word	0x00005f25
    65e4:	20000a4c 	.word	0x20000a4c
    65e8:	20000a48 	.word	0x20000a48
    65ec:	20000a50 	.word	0x20000a50
    65f0:	200007c4 	.word	0x200007c4
    65f4:	00005f9d 	.word	0x00005f9d

000065f8 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    65f8:	b510      	push	{r4, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    65fa:	4b03      	ldr	r3, [pc, #12]	; (6608 <udi_cdc_multi_is_tx_ready+0x10>)
    65fc:	4798      	blx	r3
    65fe:	1e43      	subs	r3, r0, #1
    6600:	4198      	sbcs	r0, r3
    6602:	b2c0      	uxtb	r0, r0
}
    6604:	bd10      	pop	{r4, pc}
    6606:	46c0      	nop			; (mov r8, r8)
    6608:	00006599 	.word	0x00006599

0000660c <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
    660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    660e:	4b15      	ldr	r3, [pc, #84]	; (6664 <udi_cdc_multi_putc+0x58>)
{
    6610:	000d      	movs	r5, r1
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    6612:	799c      	ldrb	r4, [r3, #6]
    6614:	3c09      	subs	r4, #9
    6616:	4263      	negs	r3, r4
    6618:	415c      	adcs	r4, r3
    661a:	b2e4      	uxtb	r4, r4

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    661c:	2000      	movs	r0, #0
    661e:	4b12      	ldr	r3, [pc, #72]	; (6668 <udi_cdc_multi_putc+0x5c>)
    6620:	4798      	blx	r3
    6622:	2800      	cmp	r0, #0
    6624:	d105      	bne.n	6632 <udi_cdc_multi_putc+0x26>
		if (!udi_cdc_data_running) {
    6626:	4b11      	ldr	r3, [pc, #68]	; (666c <udi_cdc_multi_putc+0x60>)
    6628:	7818      	ldrb	r0, [r3, #0]
    662a:	b2c0      	uxtb	r0, r0
    662c:	2800      	cmp	r0, #0
    662e:	d1f5      	bne.n	661c <udi_cdc_multi_putc+0x10>
		b_databit_9 = false;
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
    6630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	flags = cpu_irq_save();
    6632:	4b0f      	ldr	r3, [pc, #60]	; (6670 <udi_cdc_multi_putc+0x64>)
    6634:	4798      	blx	r3
	buf_sel = udi_cdc_tx_buf_sel[port];
    6636:	4b0f      	ldr	r3, [pc, #60]	; (6674 <udi_cdc_multi_putc+0x68>)
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    6638:	4a0f      	ldr	r2, [pc, #60]	; (6678 <udi_cdc_multi_putc+0x6c>)
	buf_sel = udi_cdc_tx_buf_sel[port];
    663a:	781b      	ldrb	r3, [r3, #0]
    663c:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    663e:	005f      	lsls	r7, r3, #1
    6640:	5ab9      	ldrh	r1, [r7, r2]
    6642:	1c4e      	adds	r6, r1, #1
    6644:	52be      	strh	r6, [r7, r2]
    6646:	22a0      	movs	r2, #160	; 0xa0
    6648:	0052      	lsls	r2, r2, #1
    664a:	4353      	muls	r3, r2
    664c:	4a0b      	ldr	r2, [pc, #44]	; (667c <udi_cdc_multi_putc+0x70>)
    664e:	18d3      	adds	r3, r2, r3
    6650:	545d      	strb	r5, [r3, r1]
	cpu_irq_restore(flags);
    6652:	4b0b      	ldr	r3, [pc, #44]	; (6680 <udi_cdc_multi_putc+0x74>)
    6654:	4798      	blx	r3
	if (b_databit_9) {
    6656:	2c00      	cmp	r4, #0
    6658:	d002      	beq.n	6660 <udi_cdc_multi_putc+0x54>
		value = value >> 8;
    665a:	122d      	asrs	r5, r5, #8
		b_databit_9 = false;
    665c:	2400      	movs	r4, #0
		goto udi_cdc_putc_process_one_byte;
    665e:	e7dd      	b.n	661c <udi_cdc_multi_putc+0x10>
	return true;
    6660:	2001      	movs	r0, #1
    6662:	e7e5      	b.n	6630 <udi_cdc_multi_putc+0x24>
    6664:	2000052c 	.word	0x2000052c
    6668:	000065f9 	.word	0x000065f9
    666c:	2000052a 	.word	0x2000052a
    6670:	00005f25 	.word	0x00005f25
    6674:	20000a4c 	.word	0x20000a4c
    6678:	20000a48 	.word	0x20000a48
    667c:	200007c8 	.word	0x200007c8
    6680:	00005f9d 	.word	0x00005f9d

00006684 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    6684:	b510      	push	{r4, lr}
    6686:	0001      	movs	r1, r0
	return udi_cdc_multi_putc(0, value);
    6688:	4b01      	ldr	r3, [pc, #4]	; (6690 <udi_cdc_putc+0xc>)
    668a:	2000      	movs	r0, #0
    668c:	4798      	blx	r3
}
    668e:	bd10      	pop	{r4, pc}
    6690:	0000660d 	.word	0x0000660d

00006694 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
    6694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
    6696:	4b1d      	ldr	r3, [pc, #116]	; (670c <udi_cdc_multi_write_buf+0x78>)
    6698:	799b      	ldrb	r3, [r3, #6]
    669a:	2b09      	cmp	r3, #9
    669c:	d100      	bne.n	66a0 <udi_cdc_multi_write_buf+0xc>
		size *=2;
    669e:	0052      	lsls	r2, r2, #1
{
    66a0:	0014      	movs	r4, r2
    66a2:	9100      	str	r1, [sp, #0]
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    66a4:	2000      	movs	r0, #0
    66a6:	4b1a      	ldr	r3, [pc, #104]	; (6710 <udi_cdc_multi_write_buf+0x7c>)
    66a8:	4798      	blx	r3
    66aa:	2800      	cmp	r0, #0
    66ac:	d105      	bne.n	66ba <udi_cdc_multi_write_buf+0x26>
		if (!udi_cdc_data_running) {
    66ae:	4b19      	ldr	r3, [pc, #100]	; (6714 <udi_cdc_multi_write_buf+0x80>)
    66b0:	781b      	ldrb	r3, [r3, #0]
    66b2:	2b00      	cmp	r3, #0
    66b4:	d1f6      	bne.n	66a4 <udi_cdc_multi_write_buf+0x10>
	if (size) {
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
}
    66b6:	0020      	movs	r0, r4
    66b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	flags = cpu_irq_save();
    66ba:	4b17      	ldr	r3, [pc, #92]	; (6718 <udi_cdc_multi_write_buf+0x84>)
    66bc:	4798      	blx	r3
	buf_sel = udi_cdc_tx_buf_sel[port];
    66be:	4b17      	ldr	r3, [pc, #92]	; (671c <udi_cdc_multi_write_buf+0x88>)
	flags = cpu_irq_save();
    66c0:	9001      	str	r0, [sp, #4]
	buf_sel = udi_cdc_tx_buf_sel[port];
    66c2:	781d      	ldrb	r5, [r3, #0]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    66c4:	4b16      	ldr	r3, [pc, #88]	; (6720 <udi_cdc_multi_write_buf+0x8c>)
	buf_sel = udi_cdc_tx_buf_sel[port];
    66c6:	b2ed      	uxtb	r5, r5
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    66c8:	006a      	lsls	r2, r5, #1
    66ca:	5ad7      	ldrh	r7, [r2, r3]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    66cc:	23a0      	movs	r3, #160	; 0xa0
    66ce:	005b      	lsls	r3, r3, #1
    66d0:	1bdb      	subs	r3, r3, r7
    66d2:	0026      	movs	r6, r4
    66d4:	429c      	cmp	r4, r3
    66d6:	d900      	bls.n	66da <udi_cdc_multi_write_buf+0x46>
    66d8:	001e      	movs	r6, r3
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
    66da:	23a0      	movs	r3, #160	; 0xa0
    66dc:	005b      	lsls	r3, r3, #1
    66de:	436b      	muls	r3, r5
    66e0:	4810      	ldr	r0, [pc, #64]	; (6724 <udi_cdc_multi_write_buf+0x90>)
    66e2:	19db      	adds	r3, r3, r7
    66e4:	18c0      	adds	r0, r0, r3
    66e6:	0032      	movs	r2, r6
    66e8:	9900      	ldr	r1, [sp, #0]
    66ea:	4b0f      	ldr	r3, [pc, #60]	; (6728 <udi_cdc_multi_write_buf+0x94>)
    66ec:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
    66ee:	4b0c      	ldr	r3, [pc, #48]	; (6720 <udi_cdc_multi_write_buf+0x8c>)
    66f0:	006d      	lsls	r5, r5, #1
    66f2:	19bf      	adds	r7, r7, r6
    66f4:	52ef      	strh	r7, [r5, r3]
	cpu_irq_restore(flags);
    66f6:	9801      	ldr	r0, [sp, #4]
    66f8:	4b0c      	ldr	r3, [pc, #48]	; (672c <udi_cdc_multi_write_buf+0x98>)
    66fa:	4798      	blx	r3
	ptr_buf = ptr_buf + copy_nb;
    66fc:	9b00      	ldr	r3, [sp, #0]
	size -= copy_nb;
    66fe:	1ba4      	subs	r4, r4, r6
	ptr_buf = ptr_buf + copy_nb;
    6700:	199b      	adds	r3, r3, r6
    6702:	9300      	str	r3, [sp, #0]
	if (size) {
    6704:	2c00      	cmp	r4, #0
    6706:	d1cd      	bne.n	66a4 <udi_cdc_multi_write_buf+0x10>
    6708:	e7d5      	b.n	66b6 <udi_cdc_multi_write_buf+0x22>
    670a:	46c0      	nop			; (mov r8, r8)
    670c:	2000052c 	.word	0x2000052c
    6710:	000065f9 	.word	0x000065f9
    6714:	2000052a 	.word	0x2000052a
    6718:	00005f25 	.word	0x00005f25
    671c:	20000a4c 	.word	0x20000a4c
    6720:	20000a48 	.word	0x20000a48
    6724:	200007c8 	.word	0x200007c8
    6728:	00009239 	.word	0x00009239
    672c:	00005f9d 	.word	0x00005f9d

00006730 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
    6730:	b510      	push	{r4, lr}
    6732:	000a      	movs	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
    6734:	4b02      	ldr	r3, [pc, #8]	; (6740 <udi_cdc_write_buf+0x10>)
    6736:	0001      	movs	r1, r0
    6738:	2000      	movs	r0, #0
    673a:	4798      	blx	r3
}
    673c:	bd10      	pop	{r4, pc}
    673e:	46c0      	nop			; (mov r8, r8)
    6740:	00006695 	.word	0x00006695

00006744 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    6744:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    6746:	4b03      	ldr	r3, [pc, #12]	; (6754 <udc_valid_address+0x10>)
    6748:	8858      	ldrh	r0, [r3, #2]
    674a:	237f      	movs	r3, #127	; 0x7f
    674c:	4018      	ands	r0, r3
    674e:	4b02      	ldr	r3, [pc, #8]	; (6758 <udc_valid_address+0x14>)
    6750:	4798      	blx	r3
}
    6752:	bd10      	pop	{r4, pc}
    6754:	20000ee4 	.word	0x20000ee4
    6758:	00002cb5 	.word	0x00002cb5

0000675c <udc_update_iface_desc>:
{
    675c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (0 == udc_num_configuration) {
    675e:	4b16      	ldr	r3, [pc, #88]	; (67b8 <udc_update_iface_desc+0x5c>)
    6760:	781b      	ldrb	r3, [r3, #0]
    6762:	2b00      	cmp	r3, #0
    6764:	d101      	bne.n	676a <udc_update_iface_desc+0xe>
		return false;
    6766:	2000      	movs	r0, #0
}
    6768:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    676a:	4b14      	ldr	r3, [pc, #80]	; (67bc <udc_update_iface_desc+0x60>)
    676c:	681b      	ldr	r3, [r3, #0]
    676e:	681b      	ldr	r3, [r3, #0]
    6770:	791a      	ldrb	r2, [r3, #4]
    6772:	4282      	cmp	r2, r0
    6774:	d9f7      	bls.n	6766 <udc_update_iface_desc+0xa>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    6776:	4c12      	ldr	r4, [pc, #72]	; (67c0 <udc_update_iface_desc+0x64>)
    6778:	2601      	movs	r6, #1
    677a:	6023      	str	r3, [r4, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    677c:	78da      	ldrb	r2, [r3, #3]
    677e:	789d      	ldrb	r5, [r3, #2]
    6780:	0212      	lsls	r2, r2, #8
    6782:	432a      	orrs	r2, r5
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    6784:	2500      	movs	r5, #0
    6786:	189a      	adds	r2, r3, r2
	while (ptr_end_desc >
    6788:	429a      	cmp	r2, r3
    678a:	d803      	bhi.n	6794 <udc_update_iface_desc+0x38>
    678c:	2d00      	cmp	r5, #0
    678e:	d0ea      	beq.n	6766 <udc_update_iface_desc+0xa>
    6790:	6023      	str	r3, [r4, #0]
    6792:	e7e8      	b.n	6766 <udc_update_iface_desc+0xa>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    6794:	785f      	ldrb	r7, [r3, #1]
    6796:	2f04      	cmp	r7, #4
    6798:	d10a      	bne.n	67b0 <udc_update_iface_desc+0x54>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    679a:	789f      	ldrb	r7, [r3, #2]
    679c:	4287      	cmp	r7, r0
    679e:	d107      	bne.n	67b0 <udc_update_iface_desc+0x54>
    67a0:	78df      	ldrb	r7, [r3, #3]
    67a2:	428f      	cmp	r7, r1
    67a4:	d104      	bne.n	67b0 <udc_update_iface_desc+0x54>
    67a6:	2d00      	cmp	r5, #0
    67a8:	d000      	beq.n	67ac <udc_update_iface_desc+0x50>
    67aa:	6023      	str	r3, [r4, #0]
				return true; // Interface found
    67ac:	2001      	movs	r0, #1
    67ae:	e7db      	b.n	6768 <udc_update_iface_desc+0xc>
				udc_ptr_iface->bLength);
    67b0:	781d      	ldrb	r5, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    67b2:	195b      	adds	r3, r3, r5
    67b4:	0035      	movs	r5, r6
    67b6:	e7e7      	b.n	6788 <udc_update_iface_desc+0x2c>
    67b8:	20000a68 	.word	0x20000a68
    67bc:	20000a6c 	.word	0x20000a6c
    67c0:	20000a70 	.word	0x20000a70

000067c4 <udc_next_desc_in_iface.constprop.3>:
			udc_ptr_conf->desc +
    67c4:	4b09      	ldr	r3, [pc, #36]	; (67ec <udc_next_desc_in_iface.constprop.3+0x28>)
    67c6:	681b      	ldr	r3, [r3, #0]
    67c8:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    67ca:	78da      	ldrb	r2, [r3, #3]
    67cc:	7899      	ldrb	r1, [r3, #2]
    67ce:	0212      	lsls	r2, r2, #8
    67d0:	430a      	orrs	r2, r1
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    67d2:	189b      	adds	r3, r3, r2
				desc->bLength);
    67d4:	7802      	ldrb	r2, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    67d6:	1880      	adds	r0, r0, r2
	while (ptr_eof_desc > desc) {
    67d8:	4298      	cmp	r0, r3
    67da:	d301      	bcc.n	67e0 <udc_next_desc_in_iface.constprop.3+0x1c>
	return NULL; // No specific descriptor found
    67dc:	2000      	movs	r0, #0
    67de:	e004      	b.n	67ea <udc_next_desc_in_iface.constprop.3+0x26>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    67e0:	7842      	ldrb	r2, [r0, #1]
    67e2:	2a04      	cmp	r2, #4
    67e4:	d0fa      	beq.n	67dc <udc_next_desc_in_iface.constprop.3+0x18>
		if (desc_id == desc->bDescriptorType) {
    67e6:	2a05      	cmp	r2, #5
    67e8:	d1f4      	bne.n	67d4 <udc_next_desc_in_iface.constprop.3+0x10>
}
    67ea:	4770      	bx	lr
    67ec:	20000a6c 	.word	0x20000a6c

000067f0 <udc_iface_enable>:
{
    67f0:	b570      	push	{r4, r5, r6, lr}
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    67f2:	4b10      	ldr	r3, [pc, #64]	; (6834 <udc_iface_enable+0x44>)
{
    67f4:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    67f6:	4798      	blx	r3
    67f8:	2800      	cmp	r0, #0
    67fa:	d101      	bne.n	6800 <udc_iface_enable+0x10>
		return false;
    67fc:	2000      	movs	r0, #0
}
    67fe:	bd70      	pop	{r4, r5, r6, pc}
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    6800:	4b0d      	ldr	r3, [pc, #52]	; (6838 <udc_iface_enable+0x48>)
    6802:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    6804:	0020      	movs	r0, r4
    6806:	4b0d      	ldr	r3, [pc, #52]	; (683c <udc_iface_enable+0x4c>)
    6808:	4798      	blx	r3
    680a:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    680c:	d00a      	beq.n	6824 <udc_iface_enable+0x34>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    680e:	7942      	ldrb	r2, [r0, #5]
    6810:	7903      	ldrb	r3, [r0, #4]
    6812:	0212      	lsls	r2, r2, #8
    6814:	431a      	orrs	r2, r3
    6816:	78c1      	ldrb	r1, [r0, #3]
    6818:	4b09      	ldr	r3, [pc, #36]	; (6840 <udc_iface_enable+0x50>)
    681a:	7880      	ldrb	r0, [r0, #2]
    681c:	4798      	blx	r3
    681e:	2800      	cmp	r0, #0
    6820:	d1f0      	bne.n	6804 <udc_iface_enable+0x14>
    6822:	e7eb      	b.n	67fc <udc_iface_enable+0xc>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    6824:	4b07      	ldr	r3, [pc, #28]	; (6844 <udc_iface_enable+0x54>)
    6826:	00ad      	lsls	r5, r5, #2
    6828:	681b      	ldr	r3, [r3, #0]
    682a:	685b      	ldr	r3, [r3, #4]
    682c:	58eb      	ldr	r3, [r5, r3]
    682e:	681b      	ldr	r3, [r3, #0]
    6830:	4798      	blx	r3
    6832:	e7e4      	b.n	67fe <udc_iface_enable+0xe>
    6834:	0000675d 	.word	0x0000675d
    6838:	20000a70 	.word	0x20000a70
    683c:	000067c5 	.word	0x000067c5
    6840:	00002921 	.word	0x00002921
    6844:	20000a6c 	.word	0x20000a6c

00006848 <udc_iface_disable>:
{
    6848:	b570      	push	{r4, r5, r6, lr}
	if (!udc_update_iface_desc(iface_num, 0)) {
    684a:	2100      	movs	r1, #0
    684c:	4d10      	ldr	r5, [pc, #64]	; (6890 <udc_iface_disable+0x48>)
{
    684e:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    6850:	47a8      	blx	r5
    6852:	2800      	cmp	r0, #0
    6854:	d102      	bne.n	685c <udc_iface_disable+0x14>
		return false;
    6856:	2500      	movs	r5, #0
}
    6858:	0028      	movs	r0, r5
    685a:	bd70      	pop	{r4, r5, r6, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    685c:	4b0d      	ldr	r3, [pc, #52]	; (6894 <udc_iface_disable+0x4c>)
    685e:	00a2      	lsls	r2, r4, #2
    6860:	681b      	ldr	r3, [r3, #0]
    6862:	685b      	ldr	r3, [r3, #4]
    6864:	58d6      	ldr	r6, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    6866:	68f3      	ldr	r3, [r6, #12]
    6868:	4798      	blx	r3
    686a:	0001      	movs	r1, r0
    686c:	0020      	movs	r0, r4
    686e:	47a8      	blx	r5
    6870:	1e05      	subs	r5, r0, #0
    6872:	d0f0      	beq.n	6856 <udc_iface_disable+0xe>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    6874:	4b08      	ldr	r3, [pc, #32]	; (6898 <udc_iface_disable+0x50>)
    6876:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    6878:	0020      	movs	r0, r4
    687a:	4b08      	ldr	r3, [pc, #32]	; (689c <udc_iface_disable+0x54>)
    687c:	4798      	blx	r3
    687e:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    6880:	d003      	beq.n	688a <udc_iface_disable+0x42>
			udd_ep_free(ep_desc->bEndpointAddress);
    6882:	7880      	ldrb	r0, [r0, #2]
    6884:	4b06      	ldr	r3, [pc, #24]	; (68a0 <udc_iface_disable+0x58>)
    6886:	4798      	blx	r3
    6888:	e7f6      	b.n	6878 <udc_iface_disable+0x30>
	udi_api->disable();
    688a:	6873      	ldr	r3, [r6, #4]
    688c:	4798      	blx	r3
    688e:	e7e3      	b.n	6858 <udc_iface_disable+0x10>
    6890:	0000675d 	.word	0x0000675d
    6894:	20000a6c 	.word	0x20000a6c
    6898:	20000a70 	.word	0x20000a70
    689c:	000067c5 	.word	0x000067c5
    68a0:	000028cd 	.word	0x000028cd

000068a4 <udc_start>:
{
    68a4:	b510      	push	{r4, lr}
	udd_enable();
    68a6:	4b01      	ldr	r3, [pc, #4]	; (68ac <udc_start+0x8>)
    68a8:	4798      	blx	r3
}
    68aa:	bd10      	pop	{r4, pc}
    68ac:	00002d81 	.word	0x00002d81

000068b0 <udc_reset>:
{
    68b0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    68b2:	4d0b      	ldr	r5, [pc, #44]	; (68e0 <udc_reset+0x30>)
    68b4:	2400      	movs	r4, #0
    68b6:	782b      	ldrb	r3, [r5, #0]
    68b8:	2b00      	cmp	r3, #0
    68ba:	d10a      	bne.n	68d2 <udc_reset+0x22>
	udc_num_configuration = 0;
    68bc:	2300      	movs	r3, #0
	udc_device_status =
    68be:	2201      	movs	r2, #1
	udc_num_configuration = 0;
    68c0:	702b      	strb	r3, [r5, #0]
	udc_device_status =
    68c2:	4b08      	ldr	r3, [pc, #32]	; (68e4 <udc_reset+0x34>)
    68c4:	801a      	strh	r2, [r3, #0]
}
    68c6:	bd70      	pop	{r4, r5, r6, pc}
			udc_iface_disable(iface_num);
    68c8:	0020      	movs	r0, r4
    68ca:	4b07      	ldr	r3, [pc, #28]	; (68e8 <udc_reset+0x38>)
    68cc:	4798      	blx	r3
				iface_num++) {
    68ce:	3401      	adds	r4, #1
    68d0:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    68d2:	4b06      	ldr	r3, [pc, #24]	; (68ec <udc_reset+0x3c>)
    68d4:	681b      	ldr	r3, [r3, #0]
    68d6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    68d8:	791b      	ldrb	r3, [r3, #4]
    68da:	42a3      	cmp	r3, r4
    68dc:	d8f4      	bhi.n	68c8 <udc_reset+0x18>
    68de:	e7ed      	b.n	68bc <udc_reset+0xc>
    68e0:	20000a68 	.word	0x20000a68
    68e4:	20000a5e 	.word	0x20000a5e
    68e8:	00006849 	.word	0x00006849
    68ec:	20000a6c 	.word	0x20000a6c

000068f0 <udc_stop>:
{
    68f0:	b510      	push	{r4, lr}
	udd_disable();
    68f2:	4b02      	ldr	r3, [pc, #8]	; (68fc <udc_stop+0xc>)
    68f4:	4798      	blx	r3
	udc_reset();
    68f6:	4b02      	ldr	r3, [pc, #8]	; (6900 <udc_stop+0x10>)
    68f8:	4798      	blx	r3
}
    68fa:	bd10      	pop	{r4, pc}
    68fc:	00002de9 	.word	0x00002de9
    6900:	000068b1 	.word	0x000068b1

00006904 <udc_sof_notify>:
{
    6904:	b510      	push	{r4, lr}
	if (udc_num_configuration) {
    6906:	4b0b      	ldr	r3, [pc, #44]	; (6934 <udc_sof_notify+0x30>)
    6908:	2400      	movs	r4, #0
    690a:	781b      	ldrb	r3, [r3, #0]
    690c:	2b00      	cmp	r3, #0
    690e:	d109      	bne.n	6924 <udc_sof_notify+0x20>
}
    6910:	bd10      	pop	{r4, pc}
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    6912:	685b      	ldr	r3, [r3, #4]
    6914:	00a2      	lsls	r2, r4, #2
    6916:	58d3      	ldr	r3, [r2, r3]
    6918:	691b      	ldr	r3, [r3, #16]
    691a:	2b00      	cmp	r3, #0
    691c:	d000      	beq.n	6920 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    691e:	4798      	blx	r3
				iface_num++) {
    6920:	3401      	adds	r4, #1
    6922:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    6924:	4b04      	ldr	r3, [pc, #16]	; (6938 <udc_sof_notify+0x34>)
    6926:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    6928:	681a      	ldr	r2, [r3, #0]
    692a:	7912      	ldrb	r2, [r2, #4]
    692c:	42a2      	cmp	r2, r4
    692e:	d8f0      	bhi.n	6912 <udc_sof_notify+0xe>
    6930:	e7ee      	b.n	6910 <udc_sof_notify+0xc>
    6932:	46c0      	nop			; (mov r8, r8)
    6934:	20000a68 	.word	0x20000a68
    6938:	20000a6c 	.word	0x20000a6c

0000693c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    693e:	2300      	movs	r3, #0
    6940:	4ca9      	ldr	r4, [pc, #676]	; (6be8 <udc_process_setup+0x2ac>)
    6942:	81a3      	strh	r3, [r4, #12]
	udd_g_ctrlreq.callback = NULL;
    6944:	6123      	str	r3, [r4, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    6946:	6163      	str	r3, [r4, #20]

	if (Udd_setup_is_in()) {
    6948:	7823      	ldrb	r3, [r4, #0]
    694a:	b258      	sxtb	r0, r3
    694c:	2800      	cmp	r0, #0
    694e:	da05      	bge.n	695c <udc_process_setup+0x20>
		if (udd_g_ctrlreq.req.wLength == 0) {
    6950:	88e2      	ldrh	r2, [r4, #6]
    6952:	2a00      	cmp	r2, #0
    6954:	d102      	bne.n	695c <udc_process_setup+0x20>
			return false; // Error from USB host
    6956:	2500      	movs	r5, #0
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    6958:	0028      	movs	r0, r5
    695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    695c:	2160      	movs	r1, #96	; 0x60
    695e:	4019      	ands	r1, r3
    6960:	d120      	bne.n	69a4 <udc_process_setup+0x68>
    6962:	221f      	movs	r2, #31
	if (Udd_setup_is_in()) {
    6964:	2800      	cmp	r0, #0
    6966:	db00      	blt.n	696a <udc_process_setup+0x2e>
    6968:	e0cb      	b.n	6b02 <udc_process_setup+0x1c6>
		if (udd_g_ctrlreq.req.wLength == 0) {
    696a:	88e5      	ldrh	r5, [r4, #6]
    696c:	2d00      	cmp	r5, #0
    696e:	d019      	beq.n	69a4 <udc_process_setup+0x68>
    6970:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    6972:	d000      	beq.n	6976 <udc_process_setup+0x3a>
    6974:	e08b      	b.n	6a8e <udc_process_setup+0x152>
			switch (udd_g_ctrlreq.req.bRequest) {
    6976:	7863      	ldrb	r3, [r4, #1]
    6978:	2b06      	cmp	r3, #6
    697a:	d00c      	beq.n	6996 <udc_process_setup+0x5a>
    697c:	2b08      	cmp	r3, #8
    697e:	d100      	bne.n	6982 <udc_process_setup+0x46>
    6980:	e07e      	b.n	6a80 <udc_process_setup+0x144>
    6982:	2b00      	cmp	r3, #0
    6984:	d10e      	bne.n	69a4 <udc_process_setup+0x68>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    6986:	2d02      	cmp	r5, #2
    6988:	d112      	bne.n	69b0 <udc_process_setup+0x74>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    698a:	0029      	movs	r1, r5
    698c:	4897      	ldr	r0, [pc, #604]	; (6bec <udc_process_setup+0x2b0>)
    698e:	4b98      	ldr	r3, [pc, #608]	; (6bf0 <udc_process_setup+0x2b4>)
    6990:	4798      	blx	r3
			return true;
    6992:	2501      	movs	r5, #1
    6994:	e7e0      	b.n	6958 <udc_process_setup+0x1c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    6996:	8863      	ldrh	r3, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    6998:	0a1d      	lsrs	r5, r3, #8
    699a:	2d02      	cmp	r5, #2
    699c:	d03d      	beq.n	6a1a <udc_process_setup+0xde>
    699e:	d829      	bhi.n	69f4 <udc_process_setup+0xb8>
    69a0:	2d01      	cmp	r5, #1
    69a2:	d034      	beq.n	6a0e <udc_process_setup+0xd2>
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    69a4:	221f      	movs	r2, #31
    69a6:	7823      	ldrb	r3, [r4, #0]
    69a8:	4013      	ands	r3, r2
    69aa:	2b01      	cmp	r3, #1
    69ac:	d100      	bne.n	69b0 <udc_process_setup+0x74>
    69ae:	e164      	b.n	6c7a <udc_process_setup+0x33e>
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    69b0:	221f      	movs	r2, #31
    69b2:	7823      	ldrb	r3, [r4, #0]
    69b4:	4013      	ands	r3, r2
    69b6:	2b02      	cmp	r3, #2
    69b8:	d1cd      	bne.n	6956 <udc_process_setup+0x1a>
	if (0 == udc_num_configuration) {
    69ba:	4b8e      	ldr	r3, [pc, #568]	; (6bf4 <udc_process_setup+0x2b8>)
    69bc:	2400      	movs	r4, #0
    69be:	781b      	ldrb	r3, [r3, #0]
    69c0:	2b00      	cmp	r3, #0
    69c2:	d0c8      	beq.n	6956 <udc_process_setup+0x1a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    69c4:	4b8c      	ldr	r3, [pc, #560]	; (6bf8 <udc_process_setup+0x2bc>)
    69c6:	681b      	ldr	r3, [r3, #0]
    69c8:	681a      	ldr	r2, [r3, #0]
    69ca:	7912      	ldrb	r2, [r2, #4]
    69cc:	42a2      	cmp	r2, r4
    69ce:	d9c2      	bls.n	6956 <udc_process_setup+0x1a>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    69d0:	685b      	ldr	r3, [r3, #4]
    69d2:	00a2      	lsls	r2, r4, #2
    69d4:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    69d6:	68eb      	ldr	r3, [r5, #12]
    69d8:	4798      	blx	r3
    69da:	4b88      	ldr	r3, [pc, #544]	; (6bfc <udc_process_setup+0x2c0>)
    69dc:	0001      	movs	r1, r0
    69de:	0020      	movs	r0, r4
    69e0:	4798      	blx	r3
    69e2:	2800      	cmp	r0, #0
    69e4:	d0b7      	beq.n	6956 <udc_process_setup+0x1a>
		if (udi_api->setup()) {
    69e6:	68ab      	ldr	r3, [r5, #8]
    69e8:	4798      	blx	r3
    69ea:	2800      	cmp	r0, #0
    69ec:	d1d1      	bne.n	6992 <udc_process_setup+0x56>
			iface_num++) {
    69ee:	3401      	adds	r4, #1
    69f0:	b2e4      	uxtb	r4, r4
    69f2:	e7e7      	b.n	69c4 <udc_process_setup+0x88>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    69f4:	2d03      	cmp	r5, #3
    69f6:	d027      	beq.n	6a48 <udc_process_setup+0x10c>
    69f8:	2d0f      	cmp	r5, #15
    69fa:	d1d3      	bne.n	69a4 <udc_process_setup+0x68>
		if (udc_config.conf_bos == NULL) {
    69fc:	4b80      	ldr	r3, [pc, #512]	; (6c00 <udc_process_setup+0x2c4>)
    69fe:	6898      	ldr	r0, [r3, #8]
    6a00:	2800      	cmp	r0, #0
    6a02:	d0d5      	beq.n	69b0 <udc_process_setup+0x74>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    6a04:	78c1      	ldrb	r1, [r0, #3]
    6a06:	7883      	ldrb	r3, [r0, #2]
    6a08:	0209      	lsls	r1, r1, #8
    6a0a:	4319      	orrs	r1, r3
    6a0c:	e002      	b.n	6a14 <udc_process_setup+0xd8>
				(uint8_t *) udc_config.confdev_lsfs,
    6a0e:	4b7c      	ldr	r3, [pc, #496]	; (6c00 <udc_process_setup+0x2c4>)
    6a10:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    6a12:	7801      	ldrb	r1, [r0, #0]
		udd_set_setup_payload(
    6a14:	4b76      	ldr	r3, [pc, #472]	; (6bf0 <udc_process_setup+0x2b4>)
    6a16:	4798      	blx	r3
    6a18:	e010      	b.n	6a3c <udc_process_setup+0x100>
			if (conf_num >= udc_config.confdev_lsfs->
    6a1a:	4a79      	ldr	r2, [pc, #484]	; (6c00 <udc_process_setup+0x2c4>)
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    6a1c:	b2db      	uxtb	r3, r3
			if (conf_num >= udc_config.confdev_lsfs->
    6a1e:	6811      	ldr	r1, [r2, #0]
    6a20:	7c49      	ldrb	r1, [r1, #17]
    6a22:	4299      	cmp	r1, r3
    6a24:	d9c4      	bls.n	69b0 <udc_process_setup+0x74>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    6a26:	6852      	ldr	r2, [r2, #4]
    6a28:	00db      	lsls	r3, r3, #3
    6a2a:	5898      	ldr	r0, [r3, r2]
			udd_set_setup_payload(
    6a2c:	78c1      	ldrb	r1, [r0, #3]
    6a2e:	7883      	ldrb	r3, [r0, #2]
    6a30:	0209      	lsls	r1, r1, #8
    6a32:	4319      	orrs	r1, r3
    6a34:	4b6e      	ldr	r3, [pc, #440]	; (6bf0 <udc_process_setup+0x2b4>)
    6a36:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    6a38:	68a3      	ldr	r3, [r4, #8]
    6a3a:	705d      	strb	r5, [r3, #1]
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    6a3c:	88e3      	ldrh	r3, [r4, #6]
    6a3e:	89a2      	ldrh	r2, [r4, #12]
    6a40:	429a      	cmp	r2, r3
    6a42:	d9a6      	bls.n	6992 <udc_process_setup+0x56>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    6a44:	81a3      	strh	r3, [r4, #12]
    6a46:	e7a4      	b.n	6992 <udc_process_setup+0x56>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    6a48:	b2db      	uxtb	r3, r3
    6a4a:	2b01      	cmp	r3, #1
    6a4c:	d100      	bne.n	6a50 <udc_process_setup+0x114>
    6a4e:	e139      	b.n	6cc4 <udc_process_setup+0x388>
    6a50:	2b00      	cmp	r3, #0
    6a52:	d012      	beq.n	6a7a <udc_process_setup+0x13e>
    6a54:	2b02      	cmp	r3, #2
    6a56:	d1a5      	bne.n	69a4 <udc_process_setup+0x68>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    6a58:	211d      	movs	r1, #29
		str = udc_string_product_name;
    6a5a:	4d6a      	ldr	r5, [pc, #424]	; (6c04 <udc_process_setup+0x2c8>)
{
    6a5c:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    6a5e:	486a      	ldr	r0, [pc, #424]	; (6c08 <udc_process_setup+0x2cc>)
    6a60:	005a      	lsls	r2, r3, #1
    6a62:	5cee      	ldrb	r6, [r5, r3]
    6a64:	1882      	adds	r2, r0, r2
    6a66:	3301      	adds	r3, #1
    6a68:	8056      	strh	r6, [r2, #2]
		for(i = 0; i < str_length; i++) {
    6a6a:	b2da      	uxtb	r2, r3
    6a6c:	4291      	cmp	r1, r2
    6a6e:	d8f7      	bhi.n	6a60 <udc_process_setup+0x124>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    6a70:	0049      	lsls	r1, r1, #1
    6a72:	3102      	adds	r1, #2
    6a74:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    6a76:	b289      	uxth	r1, r1
    6a78:	e7cc      	b.n	6a14 <udc_process_setup+0xd8>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    6a7a:	2104      	movs	r1, #4
    6a7c:	4863      	ldr	r0, [pc, #396]	; (6c0c <udc_process_setup+0x2d0>)
    6a7e:	e7c9      	b.n	6a14 <udc_process_setup+0xd8>
	if (udd_g_ctrlreq.req.wLength != 1) {
    6a80:	2d01      	cmp	r5, #1
    6a82:	d195      	bne.n	69b0 <udc_process_setup+0x74>
	udd_set_setup_payload(&udc_num_configuration,1);
    6a84:	0029      	movs	r1, r5
    6a86:	485b      	ldr	r0, [pc, #364]	; (6bf4 <udc_process_setup+0x2b8>)
	udd_set_setup_payload(&udc_iface_setting,1);
    6a88:	4b59      	ldr	r3, [pc, #356]	; (6bf0 <udc_process_setup+0x2b4>)
    6a8a:	4798      	blx	r3
    6a8c:	e764      	b.n	6958 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    6a8e:	2b01      	cmp	r3, #1
    6a90:	d122      	bne.n	6ad8 <udc_process_setup+0x19c>
			switch (udd_g_ctrlreq.req.bRequest) {
    6a92:	7863      	ldrb	r3, [r4, #1]
    6a94:	2b0a      	cmp	r3, #10
    6a96:	d185      	bne.n	69a4 <udc_process_setup+0x68>
	if (udd_g_ctrlreq.req.wLength != 1) {
    6a98:	2d01      	cmp	r5, #1
    6a9a:	d000      	beq.n	6a9e <udc_process_setup+0x162>
    6a9c:	e0ed      	b.n	6c7a <udc_process_setup+0x33e>
	if (!udc_num_configuration) {
    6a9e:	4b55      	ldr	r3, [pc, #340]	; (6bf4 <udc_process_setup+0x2b8>)
    6aa0:	781b      	ldrb	r3, [r3, #0]
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	d100      	bne.n	6aa8 <udc_process_setup+0x16c>
    6aa6:	e0e8      	b.n	6c7a <udc_process_setup+0x33e>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    6aa8:	4b53      	ldr	r3, [pc, #332]	; (6bf8 <udc_process_setup+0x2bc>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    6aaa:	7926      	ldrb	r6, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    6aac:	681f      	ldr	r7, [r3, #0]
    6aae:	683b      	ldr	r3, [r7, #0]
    6ab0:	791b      	ldrb	r3, [r3, #4]
    6ab2:	42b3      	cmp	r3, r6
    6ab4:	d800      	bhi.n	6ab8 <udc_process_setup+0x17c>
    6ab6:	e0e0      	b.n	6c7a <udc_process_setup+0x33e>
	if (!udc_update_iface_desc(iface_num, 0)) {
    6ab8:	0030      	movs	r0, r6
    6aba:	4b50      	ldr	r3, [pc, #320]	; (6bfc <udc_process_setup+0x2c0>)
    6abc:	4798      	blx	r3
    6abe:	1e05      	subs	r5, r0, #0
    6ac0:	d100      	bne.n	6ac4 <udc_process_setup+0x188>
    6ac2:	e76f      	b.n	69a4 <udc_process_setup+0x68>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    6ac4:	687b      	ldr	r3, [r7, #4]
    6ac6:	00b6      	lsls	r6, r6, #2
	udc_iface_setting = udi_api->getsetting();
    6ac8:	58f3      	ldr	r3, [r6, r3]
    6aca:	68db      	ldr	r3, [r3, #12]
    6acc:	4798      	blx	r3
    6ace:	4b50      	ldr	r3, [pc, #320]	; (6c10 <udc_process_setup+0x2d4>)
	udd_set_setup_payload(&udc_iface_setting,1);
    6ad0:	2101      	movs	r1, #1
	udc_iface_setting = udi_api->getsetting();
    6ad2:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    6ad4:	0018      	movs	r0, r3
    6ad6:	e7d7      	b.n	6a88 <udc_process_setup+0x14c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    6ad8:	2b02      	cmp	r3, #2
    6ada:	d000      	beq.n	6ade <udc_process_setup+0x1a2>
    6adc:	e762      	b.n	69a4 <udc_process_setup+0x68>
			switch (udd_g_ctrlreq.req.bRequest) {
    6ade:	7863      	ldrb	r3, [r4, #1]
    6ae0:	2b00      	cmp	r3, #0
    6ae2:	d000      	beq.n	6ae6 <udc_process_setup+0x1aa>
    6ae4:	e75e      	b.n	69a4 <udc_process_setup+0x68>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    6ae6:	2d02      	cmp	r5, #2
    6ae8:	d000      	beq.n	6aec <udc_process_setup+0x1b0>
    6aea:	e761      	b.n	69b0 <udc_process_setup+0x74>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    6aec:	4b49      	ldr	r3, [pc, #292]	; (6c14 <udc_process_setup+0x2d8>)
    6aee:	7920      	ldrb	r0, [r4, #4]
    6af0:	4798      	blx	r3
    6af2:	4b49      	ldr	r3, [pc, #292]	; (6c18 <udc_process_setup+0x2dc>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    6af4:	0029      	movs	r1, r5
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    6af6:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    6af8:	0018      	movs	r0, r3
    6afa:	4b3d      	ldr	r3, [pc, #244]	; (6bf0 <udc_process_setup+0x2b4>)
    6afc:	4798      	blx	r3
			return true;
    6afe:	3d01      	subs	r5, #1
    6b00:	e72a      	b.n	6958 <udc_process_setup+0x1c>
    6b02:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    6b04:	d153      	bne.n	6bae <udc_process_setup+0x272>
			switch (udd_g_ctrlreq.req.bRequest) {
    6b06:	7860      	ldrb	r0, [r4, #1]
    6b08:	3801      	subs	r0, #1
    6b0a:	2808      	cmp	r0, #8
    6b0c:	d900      	bls.n	6b10 <udc_process_setup+0x1d4>
    6b0e:	e749      	b.n	69a4 <udc_process_setup+0x68>
    6b10:	f002 f846 	bl	8ba0 <__gnu_thumb1_case_shi>
    6b14:	ff480010 	.word	0xff480010
    6b18:	ff48ff48 	.word	0xff48ff48
    6b1c:	ff480009 	.word	0xff480009
    6b20:	ff48ff48 	.word	0xff48ff48
    6b24:	001e      	.short	0x001e
	if (udd_g_ctrlreq.req.wLength) {
    6b26:	88e3      	ldrh	r3, [r4, #6]
    6b28:	2b00      	cmp	r3, #0
    6b2a:	d000      	beq.n	6b2e <udc_process_setup+0x1f2>
    6b2c:	e740      	b.n	69b0 <udc_process_setup+0x74>
	udd_g_ctrlreq.callback = udc_valid_address;
    6b2e:	4b3b      	ldr	r3, [pc, #236]	; (6c1c <udc_process_setup+0x2e0>)
    6b30:	6123      	str	r3, [r4, #16]
    6b32:	e72e      	b.n	6992 <udc_process_setup+0x56>
	if (udd_g_ctrlreq.req.wLength) {
    6b34:	88e3      	ldrh	r3, [r4, #6]
    6b36:	2b00      	cmp	r3, #0
    6b38:	d000      	beq.n	6b3c <udc_process_setup+0x200>
    6b3a:	e739      	b.n	69b0 <udc_process_setup+0x74>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    6b3c:	8865      	ldrh	r5, [r4, #2]
    6b3e:	2d01      	cmp	r5, #1
    6b40:	d000      	beq.n	6b44 <udc_process_setup+0x208>
    6b42:	e735      	b.n	69b0 <udc_process_setup+0x74>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    6b44:	2102      	movs	r1, #2
    6b46:	4a29      	ldr	r2, [pc, #164]	; (6bec <udc_process_setup+0x2b0>)
    6b48:	8813      	ldrh	r3, [r2, #0]
    6b4a:	438b      	bics	r3, r1
    6b4c:	8013      	strh	r3, [r2, #0]
    6b4e:	e703      	b.n	6958 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wLength) {
    6b50:	88e5      	ldrh	r5, [r4, #6]
    6b52:	2d00      	cmp	r5, #0
    6b54:	d000      	beq.n	6b58 <udc_process_setup+0x21c>
    6b56:	e72b      	b.n	69b0 <udc_process_setup+0x74>
	if (!udd_getaddress()) {
    6b58:	4b31      	ldr	r3, [pc, #196]	; (6c20 <udc_process_setup+0x2e4>)
    6b5a:	4798      	blx	r3
    6b5c:	2800      	cmp	r0, #0
    6b5e:	d100      	bne.n	6b62 <udc_process_setup+0x226>
    6b60:	e720      	b.n	69a4 <udc_process_setup+0x68>
				udc_config.confdev_lsfs->bNumConfigurations) {
    6b62:	4f27      	ldr	r7, [pc, #156]	; (6c00 <udc_process_setup+0x2c4>)
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    6b64:	78a2      	ldrb	r2, [r4, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    6b66:	683b      	ldr	r3, [r7, #0]
    6b68:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    6b6a:	429a      	cmp	r2, r3
    6b6c:	dd00      	ble.n	6b70 <udc_process_setup+0x234>
    6b6e:	e719      	b.n	69a4 <udc_process_setup+0x68>
	udc_reset();
    6b70:	4b2c      	ldr	r3, [pc, #176]	; (6c24 <udc_process_setup+0x2e8>)
    6b72:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    6b74:	78a3      	ldrb	r3, [r4, #2]
    6b76:	4a1f      	ldr	r2, [pc, #124]	; (6bf4 <udc_process_setup+0x2b8>)
    6b78:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	d100      	bne.n	6b80 <udc_process_setup+0x244>
    6b7e:	e708      	b.n	6992 <udc_process_setup+0x56>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    6b80:	4a29      	ldr	r2, [pc, #164]	; (6c28 <udc_process_setup+0x2ec>)
    6b82:	4e1d      	ldr	r6, [pc, #116]	; (6bf8 <udc_process_setup+0x2bc>)
    6b84:	189b      	adds	r3, r3, r2
    6b86:	687a      	ldr	r2, [r7, #4]
    6b88:	00db      	lsls	r3, r3, #3
    6b8a:	18d3      	adds	r3, r2, r3
    6b8c:	6033      	str	r3, [r6, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    6b8e:	6833      	ldr	r3, [r6, #0]
    6b90:	681b      	ldr	r3, [r3, #0]
    6b92:	791b      	ldrb	r3, [r3, #4]
    6b94:	42ab      	cmp	r3, r5
    6b96:	d800      	bhi.n	6b9a <udc_process_setup+0x25e>
    6b98:	e6fb      	b.n	6992 <udc_process_setup+0x56>
		if (!udc_iface_enable(iface_num, 0)) {
    6b9a:	2100      	movs	r1, #0
    6b9c:	0028      	movs	r0, r5
    6b9e:	4b23      	ldr	r3, [pc, #140]	; (6c2c <udc_process_setup+0x2f0>)
    6ba0:	4798      	blx	r3
    6ba2:	2800      	cmp	r0, #0
    6ba4:	d100      	bne.n	6ba8 <udc_process_setup+0x26c>
    6ba6:	e6fd      	b.n	69a4 <udc_process_setup+0x68>
			iface_num++) {
    6ba8:	3501      	adds	r5, #1
    6baa:	b2ed      	uxtb	r5, r5
    6bac:	e7ef      	b.n	6b8e <udc_process_setup+0x252>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    6bae:	2b01      	cmp	r3, #1
    6bb0:	d140      	bne.n	6c34 <udc_process_setup+0x2f8>
			switch (udd_g_ctrlreq.req.bRequest) {
    6bb2:	7863      	ldrb	r3, [r4, #1]
    6bb4:	2b0b      	cmp	r3, #11
    6bb6:	d000      	beq.n	6bba <udc_process_setup+0x27e>
    6bb8:	e6f4      	b.n	69a4 <udc_process_setup+0x68>
	if (udd_g_ctrlreq.req.wLength) {
    6bba:	88e3      	ldrh	r3, [r4, #6]
    6bbc:	2b00      	cmp	r3, #0
    6bbe:	d15c      	bne.n	6c7a <udc_process_setup+0x33e>
	if (!udc_num_configuration) {
    6bc0:	4b0c      	ldr	r3, [pc, #48]	; (6bf4 <udc_process_setup+0x2b8>)
    6bc2:	781b      	ldrb	r3, [r3, #0]
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	d058      	beq.n	6c7a <udc_process_setup+0x33e>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    6bc8:	7926      	ldrb	r6, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
    6bca:	4b19      	ldr	r3, [pc, #100]	; (6c30 <udc_process_setup+0x2f4>)
    6bcc:	0030      	movs	r0, r6
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    6bce:	8865      	ldrh	r5, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
    6bd0:	4798      	blx	r3
    6bd2:	2800      	cmp	r0, #0
    6bd4:	d100      	bne.n	6bd8 <udc_process_setup+0x29c>
    6bd6:	e6e5      	b.n	69a4 <udc_process_setup+0x68>
	return udc_iface_enable(iface_num, setting_num);
    6bd8:	b2e9      	uxtb	r1, r5
    6bda:	0030      	movs	r0, r6
    6bdc:	4b13      	ldr	r3, [pc, #76]	; (6c2c <udc_process_setup+0x2f0>)
    6bde:	4798      	blx	r3
		if (udc_reqstd()) {
    6be0:	2800      	cmp	r0, #0
    6be2:	d000      	beq.n	6be6 <udc_process_setup+0x2aa>
    6be4:	e6d5      	b.n	6992 <udc_process_setup+0x56>
    6be6:	e6dd      	b.n	69a4 <udc_process_setup+0x68>
    6be8:	20000ee4 	.word	0x20000ee4
    6bec:	20000a5e 	.word	0x20000a5e
    6bf0:	00002cd5 	.word	0x00002cd5
    6bf4:	20000a68 	.word	0x20000a68
    6bf8:	20000a6c 	.word	0x20000a6c
    6bfc:	0000675d 	.word	0x0000675d
    6c00:	200000a0 	.word	0x200000a0
    6c04:	20000082 	.word	0x20000082
    6c08:	20000038 	.word	0x20000038
    6c0c:	20000074 	.word	0x20000074
    6c10:	20000a64 	.word	0x20000a64
    6c14:	000029ed 	.word	0x000029ed
    6c18:	20000a60 	.word	0x20000a60
    6c1c:	00006745 	.word	0x00006745
    6c20:	00002cc5 	.word	0x00002cc5
    6c24:	000068b1 	.word	0x000068b1
    6c28:	1fffffff 	.word	0x1fffffff
    6c2c:	000067f1 	.word	0x000067f1
    6c30:	00006849 	.word	0x00006849
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    6c34:	2b02      	cmp	r3, #2
    6c36:	d000      	beq.n	6c3a <udc_process_setup+0x2fe>
    6c38:	e6b4      	b.n	69a4 <udc_process_setup+0x68>
			switch (udd_g_ctrlreq.req.bRequest) {
    6c3a:	7863      	ldrb	r3, [r4, #1]
    6c3c:	2b01      	cmp	r3, #1
    6c3e:	d010      	beq.n	6c62 <udc_process_setup+0x326>
    6c40:	2b03      	cmp	r3, #3
    6c42:	d000      	beq.n	6c46 <udc_process_setup+0x30a>
    6c44:	e6ae      	b.n	69a4 <udc_process_setup+0x68>
	if (udd_g_ctrlreq.req.wLength) {
    6c46:	88e3      	ldrh	r3, [r4, #6]
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d000      	beq.n	6c4e <udc_process_setup+0x312>
    6c4c:	e6b0      	b.n	69b0 <udc_process_setup+0x74>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    6c4e:	8863      	ldrh	r3, [r4, #2]
    6c50:	2b00      	cmp	r3, #0
    6c52:	d000      	beq.n	6c56 <udc_process_setup+0x31a>
    6c54:	e6ac      	b.n	69b0 <udc_process_setup+0x74>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    6c56:	7920      	ldrb	r0, [r4, #4]
    6c58:	4b1c      	ldr	r3, [pc, #112]	; (6ccc <udc_process_setup+0x390>)
    6c5a:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    6c5c:	7920      	ldrb	r0, [r4, #4]
    6c5e:	4b1c      	ldr	r3, [pc, #112]	; (6cd0 <udc_process_setup+0x394>)
    6c60:	e009      	b.n	6c76 <udc_process_setup+0x33a>
	if (udd_g_ctrlreq.req.wLength) {
    6c62:	88e3      	ldrh	r3, [r4, #6]
    6c64:	2b00      	cmp	r3, #0
    6c66:	d000      	beq.n	6c6a <udc_process_setup+0x32e>
    6c68:	e6a2      	b.n	69b0 <udc_process_setup+0x74>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    6c6a:	8863      	ldrh	r3, [r4, #2]
    6c6c:	2b00      	cmp	r3, #0
    6c6e:	d000      	beq.n	6c72 <udc_process_setup+0x336>
    6c70:	e69e      	b.n	69b0 <udc_process_setup+0x74>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    6c72:	7920      	ldrb	r0, [r4, #4]
    6c74:	4b17      	ldr	r3, [pc, #92]	; (6cd4 <udc_process_setup+0x398>)
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    6c76:	4798      	blx	r3
    6c78:	e7b2      	b.n	6be0 <udc_process_setup+0x2a4>
	if (0 == udc_num_configuration) {
    6c7a:	4b17      	ldr	r3, [pc, #92]	; (6cd8 <udc_process_setup+0x39c>)
    6c7c:	781b      	ldrb	r3, [r3, #0]
    6c7e:	2b00      	cmp	r3, #0
    6c80:	d100      	bne.n	6c84 <udc_process_setup+0x348>
    6c82:	e695      	b.n	69b0 <udc_process_setup+0x74>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    6c84:	4b15      	ldr	r3, [pc, #84]	; (6cdc <udc_process_setup+0x3a0>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    6c86:	7925      	ldrb	r5, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    6c88:	681e      	ldr	r6, [r3, #0]
    6c8a:	6833      	ldr	r3, [r6, #0]
    6c8c:	791b      	ldrb	r3, [r3, #4]
    6c8e:	42ab      	cmp	r3, r5
    6c90:	d800      	bhi.n	6c94 <udc_process_setup+0x358>
    6c92:	e68d      	b.n	69b0 <udc_process_setup+0x74>
	if (!udc_update_iface_desc(iface_num, 0)) {
    6c94:	2100      	movs	r1, #0
    6c96:	0028      	movs	r0, r5
    6c98:	4f11      	ldr	r7, [pc, #68]	; (6ce0 <udc_process_setup+0x3a4>)
    6c9a:	47b8      	blx	r7
    6c9c:	2800      	cmp	r0, #0
    6c9e:	d100      	bne.n	6ca2 <udc_process_setup+0x366>
    6ca0:	e686      	b.n	69b0 <udc_process_setup+0x74>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    6ca2:	6873      	ldr	r3, [r6, #4]
    6ca4:	00aa      	lsls	r2, r5, #2
    6ca6:	58d6      	ldr	r6, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    6ca8:	68f3      	ldr	r3, [r6, #12]
    6caa:	4798      	blx	r3
    6cac:	0001      	movs	r1, r0
    6cae:	0028      	movs	r0, r5
    6cb0:	47b8      	blx	r7
    6cb2:	2800      	cmp	r0, #0
    6cb4:	d100      	bne.n	6cb8 <udc_process_setup+0x37c>
    6cb6:	e67b      	b.n	69b0 <udc_process_setup+0x74>
	return udi_api->setup();
    6cb8:	68b3      	ldr	r3, [r6, #8]
    6cba:	4798      	blx	r3
		if (udc_req_iface()) {
    6cbc:	2800      	cmp	r0, #0
    6cbe:	d000      	beq.n	6cc2 <udc_process_setup+0x386>
    6cc0:	e667      	b.n	6992 <udc_process_setup+0x56>
    6cc2:	e675      	b.n	69b0 <udc_process_setup+0x74>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    6cc4:	2109      	movs	r1, #9
		str = udc_string_manufacturer_name;
    6cc6:	4d07      	ldr	r5, [pc, #28]	; (6ce4 <udc_process_setup+0x3a8>)
    6cc8:	e6c8      	b.n	6a5c <udc_process_setup+0x120>
    6cca:	46c0      	nop			; (mov r8, r8)
    6ccc:	0000286d 	.word	0x0000286d
    6cd0:	00002a01 	.word	0x00002a01
    6cd4:	00002b01 	.word	0x00002b01
    6cd8:	20000a68 	.word	0x20000a68
    6cdc:	20000a6c 	.word	0x20000a6c
    6ce0:	0000675d 	.word	0x0000675d
    6ce4:	20000078 	.word	0x20000078

00006ce8 <nvm_is_ready>:
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    6ce8:	4b02      	ldr	r3, [pc, #8]	; (6cf4 <nvm_is_ready+0xc>)
    6cea:	7d18      	ldrb	r0, [r3, #20]
    6cec:	2301      	movs	r3, #1
    6cee:	4018      	ands	r0, r3
}
    6cf0:	4770      	bx	lr
    6cf2:	46c0      	nop			; (mov r8, r8)
    6cf4:	41004000 	.word	0x41004000

00006cf8 <nvm_set_config>:
			PM->APBBMASK.reg |= mask;
    6cf8:	2304      	movs	r3, #4
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    6cfa:	b570      	push	{r4, r5, r6, lr}
    6cfc:	4a1c      	ldr	r2, [pc, #112]	; (6d70 <nvm_set_config+0x78>)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6cfe:	4d1d      	ldr	r5, [pc, #116]	; (6d74 <nvm_set_config+0x7c>)
    6d00:	69d1      	ldr	r1, [r2, #28]
{
    6d02:	0004      	movs	r4, r0
    6d04:	430b      	orrs	r3, r1
    6d06:	61d3      	str	r3, [r2, #28]
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6d08:	2320      	movs	r3, #32
    6d0a:	33ff      	adds	r3, #255	; 0xff
    6d0c:	832b      	strh	r3, [r5, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    6d0e:	4b1a      	ldr	r3, [pc, #104]	; (6d78 <nvm_set_config+0x80>)
    6d10:	4798      	blx	r3
    6d12:	0003      	movs	r3, r0
		return STATUS_BUSY;
    6d14:	2005      	movs	r0, #5
	if (!nvm_is_ready()) {
    6d16:	2b00      	cmp	r3, #0
    6d18:	d028      	beq.n	6d6c <nvm_set_config+0x74>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    6d1a:	22c0      	movs	r2, #192	; 0xc0
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    6d1c:	211e      	movs	r1, #30
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    6d1e:	7823      	ldrb	r3, [r4, #0]
    6d20:	0092      	lsls	r2, r2, #2
    6d22:	021b      	lsls	r3, r3, #8
    6d24:	4013      	ands	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    6d26:	78a2      	ldrb	r2, [r4, #2]
    6d28:	0052      	lsls	r2, r2, #1
    6d2a:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    6d2c:	2180      	movs	r1, #128	; 0x80
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    6d2e:	4313      	orrs	r3, r2
    6d30:	7862      	ldrb	r2, [r4, #1]
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    6d32:	02c9      	lsls	r1, r1, #11
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    6d34:	01d2      	lsls	r2, r2, #7
    6d36:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    6d38:	78e2      	ldrb	r2, [r4, #3]
    6d3a:	0492      	lsls	r2, r2, #18
    6d3c:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    6d3e:	21c0      	movs	r1, #192	; 0xc0
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    6d40:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    6d42:	7922      	ldrb	r2, [r4, #4]
    6d44:	0289      	lsls	r1, r1, #10
    6d46:	0412      	lsls	r2, r2, #16
    6d48:	400a      	ands	r2, r1
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    6d4a:	2108      	movs	r1, #8
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    6d4c:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    6d4e:	606b      	str	r3, [r5, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    6d50:	68ab      	ldr	r3, [r5, #8]
    6d52:	4a0a      	ldr	r2, [pc, #40]	; (6d7c <nvm_set_config+0x84>)
    6d54:	035b      	lsls	r3, r3, #13
    6d56:	0f5b      	lsrs	r3, r3, #29
    6d58:	4099      	lsls	r1, r3
    6d5a:	8011      	strh	r1, [r2, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    6d5c:	68ab      	ldr	r3, [r5, #8]
    6d5e:	8053      	strh	r3, [r2, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    6d60:	7863      	ldrb	r3, [r4, #1]
    6d62:	7113      	strb	r3, [r2, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    6d64:	8b28      	ldrh	r0, [r5, #24]
    6d66:	05c0      	lsls	r0, r0, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
    6d68:	0fc0      	lsrs	r0, r0, #31
    6d6a:	0100      	lsls	r0, r0, #4
}
    6d6c:	bd70      	pop	{r4, r5, r6, pc}
    6d6e:	46c0      	nop			; (mov r8, r8)
    6d70:	40000400 	.word	0x40000400
    6d74:	41004000 	.word	0x41004000
    6d78:	00006ce9 	.word	0x00006ce9
    6d7c:	20000a74 	.word	0x20000a74

00006d80 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    6d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    6d82:	4a24      	ldr	r2, [pc, #144]	; (6e14 <nvm_execute_command+0x94>)
{
    6d84:	9101      	str	r1, [sp, #4]
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    6d86:	8853      	ldrh	r3, [r2, #2]
    6d88:	8811      	ldrh	r1, [r2, #0]
    6d8a:	9a01      	ldr	r2, [sp, #4]
    6d8c:	434b      	muls	r3, r1
{
    6d8e:	0004      	movs	r4, r0
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    6d90:	4293      	cmp	r3, r2
    6d92:	d207      	bcs.n	6da4 <nvm_execute_command+0x24>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    6d94:	2280      	movs	r2, #128	; 0x80
    6d96:	9b01      	ldr	r3, [sp, #4]
    6d98:	491f      	ldr	r1, [pc, #124]	; (6e18 <nvm_execute_command+0x98>)
    6d9a:	0192      	lsls	r2, r2, #6
    6d9c:	185b      	adds	r3, r3, r1
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    6d9e:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    6da0:	4293      	cmp	r3, r2
    6da2:	d80f      	bhi.n	6dc4 <nvm_execute_command+0x44>
	ctrlb_bak = nvm_module->CTRLB.reg;
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    6da4:	2380      	movs	r3, #128	; 0x80
	ctrlb_bak = nvm_module->CTRLB.reg;
    6da6:	4d1d      	ldr	r5, [pc, #116]	; (6e1c <nvm_execute_command+0x9c>)
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    6da8:	02db      	lsls	r3, r3, #11
	ctrlb_bak = nvm_module->CTRLB.reg;
    6daa:	686f      	ldr	r7, [r5, #4]
    6dac:	002e      	movs	r6, r5
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    6dae:	433b      	orrs	r3, r7
    6db0:	606b      	str	r3, [r5, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6db2:	2320      	movs	r3, #32
    6db4:	33ff      	adds	r3, #255	; 0xff
    6db6:	832b      	strh	r3, [r5, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    6db8:	4b19      	ldr	r3, [pc, #100]	; (6e20 <nvm_execute_command+0xa0>)
    6dba:	4798      	blx	r3
    6dbc:	2800      	cmp	r0, #0
    6dbe:	d102      	bne.n	6dc6 <nvm_execute_command+0x46>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    6dc0:	606f      	str	r7, [r5, #4]
		return STATUS_BUSY;
    6dc2:	3005      	adds	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    6dc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	switch (command) {
    6dc6:	2c06      	cmp	r4, #6
    6dc8:	d814      	bhi.n	6df4 <nvm_execute_command+0x74>
    6dca:	2c05      	cmp	r4, #5
    6dcc:	d21b      	bcs.n	6e06 <nvm_execute_command+0x86>
    6dce:	2c02      	cmp	r4, #2
    6dd0:	d001      	beq.n	6dd6 <nvm_execute_command+0x56>
    6dd2:	2c04      	cmp	r4, #4
    6dd4:	d114      	bne.n	6e00 <nvm_execute_command+0x80>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    6dd6:	9b01      	ldr	r3, [sp, #4]
    6dd8:	089b      	lsrs	r3, r3, #2
    6dda:	005b      	lsls	r3, r3, #1
    6ddc:	61f3      	str	r3, [r6, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    6dde:	23a5      	movs	r3, #165	; 0xa5
    6de0:	021b      	lsls	r3, r3, #8
    6de2:	431c      	orrs	r4, r3
    6de4:	8034      	strh	r4, [r6, #0]
	while (!nvm_is_ready()) {
    6de6:	4b0e      	ldr	r3, [pc, #56]	; (6e20 <nvm_execute_command+0xa0>)
    6de8:	4798      	blx	r3
    6dea:	2800      	cmp	r0, #0
    6dec:	d0fb      	beq.n	6de6 <nvm_execute_command+0x66>
	nvm_module->CTRLB.reg = ctrlb_bak;
    6dee:	6077      	str	r7, [r6, #4]
	return STATUS_OK;
    6df0:	2000      	movs	r0, #0
    6df2:	e7e7      	b.n	6dc4 <nvm_execute_command+0x44>
	switch (command) {
    6df4:	2c40      	cmp	r4, #64	; 0x40
    6df6:	d303      	bcc.n	6e00 <nvm_execute_command+0x80>
    6df8:	2c41      	cmp	r4, #65	; 0x41
    6dfa:	d9ec      	bls.n	6dd6 <nvm_execute_command+0x56>
    6dfc:	2c45      	cmp	r4, #69	; 0x45
    6dfe:	d9ee      	bls.n	6dde <nvm_execute_command+0x5e>
			nvm_module->CTRLB.reg = ctrlb_bak;
    6e00:	6077      	str	r7, [r6, #4]
			return STATUS_ERR_INVALID_ARG;
    6e02:	2017      	movs	r0, #23
    6e04:	e7de      	b.n	6dc4 <nvm_execute_command+0x44>
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    6e06:	8b2b      	ldrh	r3, [r5, #24]
    6e08:	05db      	lsls	r3, r3, #23
    6e0a:	d5e4      	bpl.n	6dd6 <nvm_execute_command+0x56>
				nvm_module->CTRLB.reg = ctrlb_bak;
    6e0c:	606f      	str	r7, [r5, #4]
				return STATUS_ERR_IO;
    6e0e:	2010      	movs	r0, #16
    6e10:	e7d8      	b.n	6dc4 <nvm_execute_command+0x44>
    6e12:	46c0      	nop			; (mov r8, r8)
    6e14:	20000a74 	.word	0x20000a74
    6e18:	ff7fc000 	.word	0xff7fc000
    6e1c:	41004000 	.word	0x41004000
    6e20:	00006ce9 	.word	0x00006ce9

00006e24 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    6e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6e26:	4e21      	ldr	r6, [pc, #132]	; (6eac <nvm_write_buffer+0x88>)
{
    6e28:	9100      	str	r1, [sp, #0]
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6e2a:	8833      	ldrh	r3, [r6, #0]
    6e2c:	8871      	ldrh	r1, [r6, #2]
{
    6e2e:	0015      	movs	r5, r2
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6e30:	4359      	muls	r1, r3
{
    6e32:	0004      	movs	r4, r0
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    6e34:	2218      	movs	r2, #24
	if (destination_address >
    6e36:	4281      	cmp	r1, r0
    6e38:	d326      	bcc.n	6e88 <nvm_write_buffer+0x64>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    6e3a:	1e59      	subs	r1, r3, #1
    6e3c:	4208      	tst	r0, r1
    6e3e:	d123      	bne.n	6e88 <nvm_write_buffer+0x64>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    6e40:	3a01      	subs	r2, #1
	if (length > _nvm_dev.page_size) {
    6e42:	42ab      	cmp	r3, r5
    6e44:	d320      	bcc.n	6e88 <nvm_write_buffer+0x64>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    6e46:	4f1a      	ldr	r7, [pc, #104]	; (6eb0 <nvm_write_buffer+0x8c>)
    6e48:	47b8      	blx	r7
		return STATUS_BUSY;
    6e4a:	2205      	movs	r2, #5
	if (!nvm_is_ready()) {
    6e4c:	2800      	cmp	r0, #0
    6e4e:	d01b      	beq.n	6e88 <nvm_write_buffer+0x64>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    6e50:	4b18      	ldr	r3, [pc, #96]	; (6eb4 <nvm_write_buffer+0x90>)
    6e52:	4a19      	ldr	r2, [pc, #100]	; (6eb8 <nvm_write_buffer+0x94>)
    6e54:	801a      	strh	r2, [r3, #0]
    6e56:	9301      	str	r3, [sp, #4]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    6e58:	47b8      	blx	r7
    6e5a:	2800      	cmp	r0, #0
    6e5c:	d0fc      	beq.n	6e58 <nvm_write_buffer+0x34>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6e5e:	2320      	movs	r3, #32
    6e60:	9a01      	ldr	r2, [sp, #4]
    6e62:	33ff      	adds	r3, #255	; 0xff
    6e64:	8313      	strh	r3, [r2, #24]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    6e66:	2300      	movs	r3, #0
	uint32_t nvm_address = destination_address / 2;
    6e68:	0862      	lsrs	r2, r4, #1
    6e6a:	0052      	lsls	r2, r2, #1
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    6e6c:	1e68      	subs	r0, r5, #1
	for (uint16_t i = 0; i < length; i += 2) {
    6e6e:	429d      	cmp	r5, r3
    6e70:	d80c      	bhi.n	6e8c <nvm_write_buffer+0x68>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    6e72:	2200      	movs	r2, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    6e74:	7933      	ldrb	r3, [r6, #4]
    6e76:	4293      	cmp	r3, r2
    6e78:	d106      	bne.n	6e88 <nvm_write_buffer+0x64>
    6e7a:	2d3f      	cmp	r5, #63	; 0x3f
    6e7c:	d804      	bhi.n	6e88 <nvm_write_buffer+0x64>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    6e7e:	0021      	movs	r1, r4
    6e80:	2004      	movs	r0, #4
    6e82:	4b0e      	ldr	r3, [pc, #56]	; (6ebc <nvm_write_buffer+0x98>)
    6e84:	4798      	blx	r3
    6e86:	0002      	movs	r2, r0
}
    6e88:	0010      	movs	r0, r2
    6e8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		data = buffer[i];
    6e8c:	9900      	ldr	r1, [sp, #0]
    6e8e:	5cc9      	ldrb	r1, [r1, r3]
		if (i < (length - 1)) {
    6e90:	4283      	cmp	r3, r0
    6e92:	db05      	blt.n	6ea0 <nvm_write_buffer+0x7c>
		data = buffer[i];
    6e94:	b289      	uxth	r1, r1
	for (uint16_t i = 0; i < length; i += 2) {
    6e96:	3302      	adds	r3, #2
		NVM_MEMORY[nvm_address++] = data;
    6e98:	8011      	strh	r1, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    6e9a:	b29b      	uxth	r3, r3
    6e9c:	3202      	adds	r2, #2
    6e9e:	e7e6      	b.n	6e6e <nvm_write_buffer+0x4a>
			data |= (buffer[i + 1] << 8);
    6ea0:	9f00      	ldr	r7, [sp, #0]
    6ea2:	18ff      	adds	r7, r7, r3
    6ea4:	787f      	ldrb	r7, [r7, #1]
    6ea6:	023f      	lsls	r7, r7, #8
    6ea8:	4339      	orrs	r1, r7
    6eaa:	e7f4      	b.n	6e96 <nvm_write_buffer+0x72>
    6eac:	20000a74 	.word	0x20000a74
    6eb0:	00006ce9 	.word	0x00006ce9
    6eb4:	41004000 	.word	0x41004000
    6eb8:	ffffa544 	.word	0xffffa544
    6ebc:	00006d81 	.word	0x00006d81

00006ec0 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    6ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6ec2:	4b16      	ldr	r3, [pc, #88]	; (6f1c <nvm_read_buffer+0x5c>)
{
    6ec4:	000f      	movs	r7, r1
    6ec6:	0016      	movs	r6, r2
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6ec8:	8859      	ldrh	r1, [r3, #2]
    6eca:	881a      	ldrh	r2, [r3, #0]
{
    6ecc:	0005      	movs	r5, r0
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6ece:	4351      	muls	r1, r2
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    6ed0:	2318      	movs	r3, #24
	if (source_address >
    6ed2:	4281      	cmp	r1, r0
    6ed4:	d314      	bcc.n	6f00 <nvm_read_buffer+0x40>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    6ed6:	1e54      	subs	r4, r2, #1
    6ed8:	4004      	ands	r4, r0
    6eda:	d111      	bne.n	6f00 <nvm_read_buffer+0x40>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    6edc:	3b01      	subs	r3, #1
	if (length > _nvm_dev.page_size) {
    6ede:	42b2      	cmp	r2, r6
    6ee0:	d30e      	bcc.n	6f00 <nvm_read_buffer+0x40>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    6ee2:	4b0f      	ldr	r3, [pc, #60]	; (6f20 <nvm_read_buffer+0x60>)
    6ee4:	4798      	blx	r3
		return STATUS_BUSY;
    6ee6:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    6ee8:	2800      	cmp	r0, #0
    6eea:	d009      	beq.n	6f00 <nvm_read_buffer+0x40>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6eec:	2220      	movs	r2, #32
    6eee:	4b0d      	ldr	r3, [pc, #52]	; (6f24 <nvm_read_buffer+0x64>)
    6ef0:	32ff      	adds	r2, #255	; 0xff

	uint32_t page_address = source_address / 2;
    6ef2:	086d      	lsrs	r5, r5, #1
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6ef4:	831a      	strh	r2, [r3, #24]
    6ef6:	006d      	lsls	r5, r5, #1
		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    6ef8:	1e71      	subs	r1, r6, #1
	for (uint16_t i = 0; i < length; i += 2) {
    6efa:	42a6      	cmp	r6, r4
    6efc:	d802      	bhi.n	6f04 <nvm_read_buffer+0x44>
    6efe:	2300      	movs	r3, #0
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    6f00:	0018      	movs	r0, r3
    6f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint16_t data = NVM_MEMORY[page_address++];
    6f04:	882b      	ldrh	r3, [r5, #0]
    6f06:	b29b      	uxth	r3, r3
		buffer[i] = (data & 0xFF);
    6f08:	553b      	strb	r3, [r7, r4]
		if (i < (length - 1)) {
    6f0a:	428c      	cmp	r4, r1
    6f0c:	da02      	bge.n	6f14 <nvm_read_buffer+0x54>
			buffer[i + 1] = (data >> 8);
    6f0e:	193a      	adds	r2, r7, r4
    6f10:	0a1b      	lsrs	r3, r3, #8
    6f12:	7053      	strb	r3, [r2, #1]
	for (uint16_t i = 0; i < length; i += 2) {
    6f14:	3402      	adds	r4, #2
    6f16:	b2a4      	uxth	r4, r4
    6f18:	3502      	adds	r5, #2
    6f1a:	e7ee      	b.n	6efa <nvm_read_buffer+0x3a>
    6f1c:	20000a74 	.word	0x20000a74
    6f20:	00006ce9 	.word	0x00006ce9
    6f24:	41004000 	.word	0x41004000

00006f28 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    6f28:	b570      	push	{r4, r5, r6, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6f2a:	4a13      	ldr	r2, [pc, #76]	; (6f78 <nvm_erase_row+0x50>)
{
    6f2c:	0004      	movs	r4, r0
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6f2e:	8813      	ldrh	r3, [r2, #0]
    6f30:	8852      	ldrh	r2, [r2, #2]
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    6f32:	2018      	movs	r0, #24
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    6f34:	435a      	muls	r2, r3
	if (row_address >
    6f36:	42a2      	cmp	r2, r4
    6f38:	d31c      	bcc.n	6f74 <nvm_erase_row+0x4c>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    6f3a:	009b      	lsls	r3, r3, #2
    6f3c:	3b01      	subs	r3, #1
    6f3e:	421c      	tst	r4, r3
    6f40:	d118      	bne.n	6f74 <nvm_erase_row+0x4c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    6f42:	4d0e      	ldr	r5, [pc, #56]	; (6f7c <nvm_erase_row+0x54>)
    6f44:	47a8      	blx	r5
    6f46:	0003      	movs	r3, r0
		return STATUS_BUSY;
    6f48:	2005      	movs	r0, #5
	if (!nvm_is_ready()) {
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	d012      	beq.n	6f74 <nvm_erase_row+0x4c>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6f4e:	2220      	movs	r2, #32
    6f50:	4b0b      	ldr	r3, [pc, #44]	; (6f80 <nvm_erase_row+0x58>)

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    6f52:	08a4      	lsrs	r4, r4, #2
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6f54:	32ff      	adds	r2, #255	; 0xff
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    6f56:	0064      	lsls	r4, r4, #1
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6f58:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    6f5a:	61dc      	str	r4, [r3, #28]
    6f5c:	001c      	movs	r4, r3
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    6f5e:	4a09      	ldr	r2, [pc, #36]	; (6f84 <nvm_erase_row+0x5c>)
    6f60:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    6f62:	47a8      	blx	r5
    6f64:	2800      	cmp	r0, #0
    6f66:	d0fc      	beq.n	6f62 <nvm_erase_row+0x3a>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    6f68:	231c      	movs	r3, #28
    6f6a:	8b20      	ldrh	r0, [r4, #24]
    6f6c:	4018      	ands	r0, r3
		return STATUS_ABORTED;
	}

	return STATUS_OK;
    6f6e:	1e43      	subs	r3, r0, #1
    6f70:	4198      	sbcs	r0, r3
    6f72:	0080      	lsls	r0, r0, #2
}
    6f74:	bd70      	pop	{r4, r5, r6, pc}
    6f76:	46c0      	nop			; (mov r8, r8)
    6f78:	20000a74 	.word	0x20000a74
    6f7c:	00006ce9 	.word	0x00006ce9
    6f80:	41004000 	.word	0x41004000
    6f84:	ffffa502 	.word	0xffffa502

00006f88 <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6f88:	2220      	movs	r2, #32
{
    6f8a:	b510      	push	{r4, lr}
	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    6f8c:	2407      	movs	r4, #7
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6f8e:	4b12      	ldr	r3, [pc, #72]	; (6fd8 <nvm_get_parameters+0x50>)
    6f90:	32ff      	adds	r2, #255	; 0xff
    6f92:	831a      	strh	r2, [r3, #24]
	uint32_t param_reg = nvm_module->PARAM.reg;
    6f94:	689b      	ldr	r3, [r3, #8]
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    6f96:	3a18      	subs	r2, #24
    6f98:	0c19      	lsrs	r1, r3, #16
    6f9a:	4021      	ands	r1, r4
    6f9c:	3aff      	subs	r2, #255	; 0xff
    6f9e:	408a      	lsls	r2, r1
	parameters->page_size =
    6fa0:	7002      	strb	r2, [r0, #0]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    6fa2:	4a0e      	ldr	r2, [pc, #56]	; (6fdc <nvm_get_parameters+0x54>)
	parameters->nvm_number_of_pages =
    6fa4:	8043      	strh	r3, [r0, #2]
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    6fa6:	8813      	ldrh	r3, [r2, #0]
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    6fa8:	091b      	lsrs	r3, r3, #4
	uint16_t eeprom_fuse_value =
    6faa:	4023      	ands	r3, r4

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    6fac:	42a3      	cmp	r3, r4
    6fae:	d109      	bne.n	6fc4 <nvm_get_parameters+0x3c>
		parameters->eeprom_number_of_pages = 0;
    6fb0:	2300      	movs	r3, #0
	}
	else {
		parameters->eeprom_number_of_pages =
    6fb2:	6043      	str	r3, [r0, #4]
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
    6fb4:	2307      	movs	r3, #7
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    6fb6:	8812      	ldrh	r2, [r2, #0]
	uint16_t boot_fuse_value =
    6fb8:	401a      	ands	r2, r3
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    6fba:	429a      	cmp	r2, r3
    6fbc:	d107      	bne.n	6fce <nvm_get_parameters+0x46>
		parameters->bootloader_number_of_pages = 0;
    6fbe:	2300      	movs	r3, #0
    6fc0:	6083      	str	r3, [r0, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    6fc2:	bd10      	pop	{r4, pc}
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    6fc4:	2106      	movs	r1, #6
    6fc6:	1ac9      	subs	r1, r1, r3
    6fc8:	2304      	movs	r3, #4
    6fca:	408b      	lsls	r3, r1
    6fcc:	e7f1      	b.n	6fb2 <nvm_get_parameters+0x2a>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    6fce:	1a9b      	subs	r3, r3, r2
    6fd0:	2204      	movs	r2, #4
    6fd2:	409a      	lsls	r2, r3
		parameters->bootloader_number_of_pages =
    6fd4:	6082      	str	r2, [r0, #8]
}
    6fd6:	e7f4      	b.n	6fc2 <nvm_get_parameters+0x3a>
    6fd8:	41004000 	.word	0x41004000
    6fdc:	00804000 	.word	0x00804000

00006fe0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6fe0:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6fe2:	2280      	movs	r2, #128	; 0x80
    6fe4:	ab01      	add	r3, sp, #4
    6fe6:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6fe8:	780a      	ldrb	r2, [r1, #0]
    6fea:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6fec:	784a      	ldrb	r2, [r1, #1]
    6fee:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6ff0:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6ff2:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
    6ff4:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6ff6:	4b01      	ldr	r3, [pc, #4]	; (6ffc <port_pin_set_config+0x1c>)
    6ff8:	4798      	blx	r3
}
    6ffa:	bd07      	pop	{r0, r1, r2, pc}
    6ffc:	00007c91 	.word	0x00007c91

00007000 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    7000:	b510      	push	{r4, lr}
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    7002:	0204      	lsls	r4, r0, #8
    7004:	4b03      	ldr	r3, [pc, #12]	; (7014 <_eeprom_emulator_nvm_erase_row+0x14>)
    7006:	6858      	ldr	r0, [r3, #4]
		error_code = nvm_erase_row(
    7008:	4b03      	ldr	r3, [pc, #12]	; (7018 <_eeprom_emulator_nvm_erase_row+0x18>)
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    700a:	1900      	adds	r0, r0, r4
		error_code = nvm_erase_row(
    700c:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    700e:	2805      	cmp	r0, #5
    7010:	d0f8      	beq.n	7004 <_eeprom_emulator_nvm_erase_row+0x4>
}
    7012:	bd10      	pop	{r4, pc}
    7014:	20000a7c 	.word	0x20000a7c
    7018:	00006f29 	.word	0x00006f29

0000701c <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    701c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    701e:	2500      	movs	r5, #0
{
    7020:	b085      	sub	sp, #20
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    7022:	4a38      	ldr	r2, [pc, #224]	; (7104 <_eeprom_emulator_update_page_mapping+0xe8>)
    7024:	8911      	ldrh	r1, [r2, #8]
    7026:	428d      	cmp	r5, r1
    7028:	d32b      	bcc.n	7082 <_eeprom_emulator_update_page_mapping+0x66>
		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
				(logical_page < _eeprom_instance.logical_pages)) {
    702a:	2300      	movs	r3, #0
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    702c:	6856      	ldr	r6, [r2, #4]
				(logical_page < _eeprom_instance.logical_pages)) {
    702e:	7a95      	ldrb	r5, [r2, #10]
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    7030:	1e4f      	subs	r7, r1, #1
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    7032:	b298      	uxth	r0, r3
    7034:	4281      	cmp	r1, r0
    7036:	d855      	bhi.n	70e4 <_eeprom_emulator_update_page_mapping+0xc8>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    7038:	0013      	movs	r3, r2
    703a:	203f      	movs	r0, #63	; 0x3f
    703c:	3387      	adds	r3, #135	; 0x87
    703e:	7018      	strb	r0, [r3, #0]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    7040:	2000      	movs	r0, #0

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    7042:	1e4b      	subs	r3, r1, #1
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    7044:	088f      	lsrs	r7, r1, #2
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    7046:	9302      	str	r3, [sp, #8]
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    7048:	42b8      	cmp	r0, r7
    704a:	d018      	beq.n	707e <_eeprom_emulator_update_page_mapping+0x62>
    704c:	0083      	lsls	r3, r0, #2
    704e:	b29b      	uxth	r3, r3
    7050:	1d1d      	adds	r5, r3, #4
    7052:	b2a9      	uxth	r1, r5
    7054:	2501      	movs	r5, #1
    7056:	1c44      	adds	r4, r0, #1
    7058:	b2a4      	uxth	r4, r4
    705a:	9101      	str	r1, [sp, #4]
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    705c:	9902      	ldr	r1, [sp, #8]
    705e:	428b      	cmp	r3, r1
    7060:	d004      	beq.n	706c <_eeprom_emulator_update_page_mapping+0x50>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    7062:	0199      	lsls	r1, r3, #6
    7064:	5d89      	ldrb	r1, [r1, r6]
    7066:	29ff      	cmp	r1, #255	; 0xff
    7068:	d000      	beq.n	706c <_eeprom_emulator_update_page_mapping+0x50>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    706a:	2500      	movs	r5, #0
    706c:	3301      	adds	r3, #1
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    706e:	9901      	ldr	r1, [sp, #4]
    7070:	b29b      	uxth	r3, r3
    7072:	428b      	cmp	r3, r1
    7074:	d1f2      	bne.n	705c <_eeprom_emulator_update_page_mapping+0x40>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    7076:	2d00      	cmp	r5, #0
    7078:	d041      	beq.n	70fe <_eeprom_emulator_update_page_mapping+0xe2>
			_eeprom_instance.spare_row = c;
    707a:	3287      	adds	r2, #135	; 0x87
    707c:	7010      	strb	r0, [r2, #0]
			break;
		}
	}
}
    707e:	b005      	add	sp, #20
    7080:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    7082:	6853      	ldr	r3, [r2, #4]
    7084:	01ae      	lsls	r6, r5, #6
    7086:	5d9f      	ldrb	r7, [r3, r6]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    7088:	2fff      	cmp	r7, #255	; 0xff
    708a:	d102      	bne.n	7092 <_eeprom_emulator_update_page_mapping+0x76>
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    708c:	3504      	adds	r5, #4
    708e:	b2ad      	uxth	r5, r5
    7090:	e7c7      	b.n	7022 <_eeprom_emulator_update_page_mapping+0x6>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    7092:	0033      	movs	r3, r6
    7094:	3380      	adds	r3, #128	; 0x80
    7096:	9302      	str	r3, [sp, #8]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    7098:	3b40      	subs	r3, #64	; 0x40
    709a:	9303      	str	r3, [sp, #12]
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    709c:	08ab      	lsrs	r3, r5, #2
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    709e:	1d2c      	adds	r4, r5, #4
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    70a0:	b2db      	uxtb	r3, r3
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    70a2:	b2a4      	uxth	r4, r4
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    70a4:	9301      	str	r3, [sp, #4]
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    70a6:	4a17      	ldr	r2, [pc, #92]	; (7104 <_eeprom_emulator_update_page_mapping+0xe8>)
    70a8:	8913      	ldrh	r3, [r2, #8]
    70aa:	429c      	cmp	r4, r3
    70ac:	d2ee      	bcs.n	708c <_eeprom_emulator_update_page_mapping+0x70>
			if (j == EEPROM_MASTER_PAGE_NUMBER) {
    70ae:	3b01      	subs	r3, #1
    70b0:	429c      	cmp	r4, r3
    70b2:	d014      	beq.n	70de <_eeprom_emulator_update_page_mapping+0xc2>
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    70b4:	6853      	ldr	r3, [r2, #4]
    70b6:	01a2      	lsls	r2, r4, #6
    70b8:	5c9a      	ldrb	r2, [r3, r2]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    70ba:	2aff      	cmp	r2, #255	; 0xff
    70bc:	d00f      	beq.n	70de <_eeprom_emulator_update_page_mapping+0xc2>
			if(pre_logical_page == next_logical_page) {
    70be:	4297      	cmp	r7, r2
    70c0:	d10d      	bne.n	70de <_eeprom_emulator_update_page_mapping+0xc2>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    70c2:	9a02      	ldr	r2, [sp, #8]
	if((_eeprom_instance.flash[phy_page].header.logical_page
    70c4:	5d99      	ldrb	r1, [r3, r6]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    70c6:	5c9a      	ldrb	r2, [r3, r2]
	if((_eeprom_instance.flash[phy_page].header.logical_page
    70c8:	4291      	cmp	r1, r2
    70ca:	d005      	beq.n	70d8 <_eeprom_emulator_update_page_mapping+0xbc>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    70cc:	9903      	ldr	r1, [sp, #12]
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    70ce:	08a0      	lsrs	r0, r4, #2
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    70d0:	5c5b      	ldrb	r3, [r3, r1]
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    70d2:	b2c0      	uxtb	r0, r0
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    70d4:	4293      	cmp	r3, r2
    70d6:	d100      	bne.n	70da <_eeprom_emulator_update_page_mapping+0xbe>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    70d8:	9801      	ldr	r0, [sp, #4]
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    70da:	4b0b      	ldr	r3, [pc, #44]	; (7108 <_eeprom_emulator_update_page_mapping+0xec>)
    70dc:	4798      	blx	r3
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    70de:	3404      	adds	r4, #4
    70e0:	b2a4      	uxth	r4, r4
    70e2:	e7e0      	b.n	70a6 <_eeprom_emulator_update_page_mapping+0x8a>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    70e4:	429f      	cmp	r7, r3
    70e6:	d008      	beq.n	70fa <_eeprom_emulator_update_page_mapping+0xde>
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    70e8:	0198      	lsls	r0, r3, #6
    70ea:	5c30      	ldrb	r0, [r6, r0]
    70ec:	b284      	uxth	r4, r0
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    70ee:	2cff      	cmp	r4, #255	; 0xff
    70f0:	d003      	beq.n	70fa <_eeprom_emulator_update_page_mapping+0xde>
    70f2:	42ac      	cmp	r4, r5
    70f4:	d201      	bcs.n	70fa <_eeprom_emulator_update_page_mapping+0xde>
			_eeprom_instance.page_map[logical_page] = c;
    70f6:	1810      	adds	r0, r2, r0
    70f8:	72c3      	strb	r3, [r0, #11]
    70fa:	3301      	adds	r3, #1
    70fc:	e799      	b.n	7032 <_eeprom_emulator_update_page_mapping+0x16>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    70fe:	0020      	movs	r0, r4
    7100:	e7a2      	b.n	7048 <_eeprom_emulator_update_page_mapping+0x2c>
    7102:	46c0      	nop			; (mov r8, r8)
    7104:	20000a7c 	.word	0x20000a7c
    7108:	00007001 	.word	0x00007001

0000710c <_eeprom_emulator_nvm_read_page>:
{
    710c:	b570      	push	{r4, r5, r6, lr}
    710e:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    7110:	0184      	lsls	r4, r0, #6
    7112:	4b05      	ldr	r3, [pc, #20]	; (7128 <_eeprom_emulator_nvm_read_page+0x1c>)
		error_code = nvm_read_buffer(
    7114:	2240      	movs	r2, #64	; 0x40
				(uint32_t)&_eeprom_instance.flash[physical_page],
    7116:	6858      	ldr	r0, [r3, #4]
		error_code = nvm_read_buffer(
    7118:	0029      	movs	r1, r5
				(uint32_t)&_eeprom_instance.flash[physical_page],
    711a:	1900      	adds	r0, r0, r4
		error_code = nvm_read_buffer(
    711c:	4b03      	ldr	r3, [pc, #12]	; (712c <_eeprom_emulator_nvm_read_page+0x20>)
    711e:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    7120:	2805      	cmp	r0, #5
    7122:	d0f6      	beq.n	7112 <_eeprom_emulator_nvm_read_page+0x6>
}
    7124:	bd70      	pop	{r4, r5, r6, pc}
    7126:	46c0      	nop			; (mov r8, r8)
    7128:	20000a7c 	.word	0x20000a7c
    712c:	00006ec1 	.word	0x00006ec1

00007130 <_eeprom_emulator_nvm_fill_cache>:
{
    7130:	b570      	push	{r4, r5, r6, lr}
    7132:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    7134:	0184      	lsls	r4, r0, #6
    7136:	4b05      	ldr	r3, [pc, #20]	; (714c <_eeprom_emulator_nvm_fill_cache+0x1c>)
		error_code = nvm_write_buffer(
    7138:	2240      	movs	r2, #64	; 0x40
				(uint32_t)&_eeprom_instance.flash[physical_page],
    713a:	6858      	ldr	r0, [r3, #4]
		error_code = nvm_write_buffer(
    713c:	0029      	movs	r1, r5
				(uint32_t)&_eeprom_instance.flash[physical_page],
    713e:	1900      	adds	r0, r0, r4
		error_code = nvm_write_buffer(
    7140:	4b03      	ldr	r3, [pc, #12]	; (7150 <_eeprom_emulator_nvm_fill_cache+0x20>)
    7142:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    7144:	2805      	cmp	r0, #5
    7146:	d0f6      	beq.n	7136 <_eeprom_emulator_nvm_fill_cache+0x6>
}
    7148:	bd70      	pop	{r4, r5, r6, pc}
    714a:	46c0      	nop			; (mov r8, r8)
    714c:	20000a7c 	.word	0x20000a7c
    7150:	00006e25 	.word	0x00006e25

00007154 <_eeprom_emulator_nvm_commit_cache>:
{
    7154:	b510      	push	{r4, lr}
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    7156:	0184      	lsls	r4, r0, #6
    7158:	4b04      	ldr	r3, [pc, #16]	; (716c <_eeprom_emulator_nvm_commit_cache+0x18>)
		error_code = nvm_execute_command(
    715a:	2200      	movs	r2, #0
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    715c:	6859      	ldr	r1, [r3, #4]
		error_code = nvm_execute_command(
    715e:	2004      	movs	r0, #4
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    7160:	1909      	adds	r1, r1, r4
		error_code = nvm_execute_command(
    7162:	4b03      	ldr	r3, [pc, #12]	; (7170 <_eeprom_emulator_nvm_commit_cache+0x1c>)
    7164:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    7166:	2805      	cmp	r0, #5
    7168:	d0f6      	beq.n	7158 <_eeprom_emulator_nvm_commit_cache+0x4>
}
    716a:	bd10      	pop	{r4, pc}
    716c:	20000a7c 	.word	0x20000a7c
    7170:	00006d81 	.word	0x00006d81

00007174 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    7174:	b5f0      	push	{r4, r5, r6, r7, lr}
    7176:	b099      	sub	sp, #100	; 0x64
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    7178:	2200      	movs	r2, #0
    717a:	466b      	mov	r3, sp
	config->manual_page_write = true;
    717c:	4669      	mov	r1, sp
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    717e:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    7180:	2301      	movs	r3, #1
    7182:	704b      	strb	r3, [r1, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    7184:	4b27      	ldr	r3, [pc, #156]	; (7224 <eeprom_emulator_init+0xb0>)
    7186:	685b      	ldr	r3, [r3, #4]
	config->disable_cache     = false;
    7188:	70ca      	strb	r2, [r1, #3]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    718a:	06db      	lsls	r3, r3, #27
    718c:	0f1b      	lsrs	r3, r3, #28
    718e:	708b      	strb	r3, [r1, #2]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    7190:	710a      	strb	r2, [r1, #4]
	nvm_get_config_defaults(&config);
	config.manual_page_write = true;

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    7192:	4668      	mov	r0, sp
    7194:	4b24      	ldr	r3, [pc, #144]	; (7228 <eeprom_emulator_init+0xb4>)
    7196:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    7198:	2805      	cmp	r0, #5
    719a:	d0fa      	beq.n	7192 <eeprom_emulator_init+0x1e>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    719c:	a802      	add	r0, sp, #8
    719e:	4b23      	ldr	r3, [pc, #140]	; (722c <eeprom_emulator_init+0xb8>)
    71a0:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    71a2:	9b03      	ldr	r3, [sp, #12]
		return STATUS_ERR_NO_MEMORY;
    71a4:	2016      	movs	r0, #22
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    71a6:	2b0b      	cmp	r3, #11
    71a8:	d937      	bls.n	721a <eeprom_emulator_init+0xa6>
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    71aa:	001a      	movs	r2, r3
	_eeprom_instance.physical_pages =
    71ac:	4c20      	ldr	r4, [pc, #128]	; (7230 <eeprom_emulator_init+0xbc>)
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    71ae:	3a08      	subs	r2, #8
    71b0:	0852      	lsrs	r2, r2, #1
	_eeprom_instance.logical_pages  =
    71b2:	72a2      	strb	r2, [r4, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
    71b4:	2280      	movs	r2, #128	; 0x80
	_eeprom_instance.physical_pages =
    71b6:	8123      	strh	r3, [r4, #8]
			(void*)(FLASH_SIZE -
    71b8:	b29b      	uxth	r3, r3
    71ba:	019b      	lsls	r3, r3, #6
    71bc:	02d2      	lsls	r2, r2, #11
    71be:	425b      	negs	r3, r3
    71c0:	189b      	adds	r3, r3, r2
	_eeprom_instance.flash =
    71c2:	6063      	str	r3, [r4, #4]
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
    71c4:	0023      	movs	r3, r4
    71c6:	2700      	movs	r7, #0
    71c8:	33c8      	adds	r3, #200	; 0xc8
    71ca:	701f      	strb	r7, [r3, #0]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
    71cc:	4b19      	ldr	r3, [pc, #100]	; (7234 <eeprom_emulator_init+0xc0>)
    71ce:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    71d0:	0023      	movs	r3, r4
    71d2:	3387      	adds	r3, #135	; 0x87
    71d4:	781b      	ldrb	r3, [r3, #0]
		return STATUS_ERR_BAD_FORMAT;
    71d6:	201a      	movs	r0, #26
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    71d8:	2b3f      	cmp	r3, #63	; 0x3f
    71da:	d01e      	beq.n	721a <eeprom_emulator_init+0xa6>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    71dc:	ae05      	add	r6, sp, #20
    71de:	0032      	movs	r2, r6
    71e0:	4b15      	ldr	r3, [pc, #84]	; (7238 <eeprom_emulator_init+0xc4>)
    71e2:	cb23      	ldmia	r3!, {r0, r1, r5}
    71e4:	c223      	stmia	r2!, {r0, r1, r5}
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    71e6:	8920      	ldrh	r0, [r4, #8]
    71e8:	ad08      	add	r5, sp, #32
    71ea:	3801      	subs	r0, #1
    71ec:	b280      	uxth	r0, r0
    71ee:	0029      	movs	r1, r5
    71f0:	4b12      	ldr	r3, [pc, #72]	; (723c <eeprom_emulator_init+0xc8>)
    71f2:	4798      	blx	r3
		if (master_page.magic_key[c] != magic_key[c]) {
    71f4:	59eb      	ldr	r3, [r5, r7]
    71f6:	59f2      	ldr	r2, [r6, r7]
    71f8:	4293      	cmp	r3, r2
    71fa:	d110      	bne.n	721e <eeprom_emulator_init+0xaa>
    71fc:	3704      	adds	r7, #4
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    71fe:	2f0c      	cmp	r7, #12
    7200:	d1f8      	bne.n	71f4 <eeprom_emulator_init+0x80>
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    7202:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_IO;
    7204:	2010      	movs	r0, #16
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    7206:	2b01      	cmp	r3, #1
    7208:	d107      	bne.n	721a <eeprom_emulator_init+0xa6>
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    720a:	7b2a      	ldrb	r2, [r5, #12]
    720c:	2a01      	cmp	r2, #1
    720e:	d104      	bne.n	721a <eeprom_emulator_init+0xa6>
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    7210:	7b6b      	ldrb	r3, [r5, #13]
    7212:	2b00      	cmp	r3, #0
    7214:	d101      	bne.n	721a <eeprom_emulator_init+0xa6>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;

	return error_code;
    7216:	0018      	movs	r0, r3
	_eeprom_instance.initialized = true;
    7218:	7022      	strb	r2, [r4, #0]
}
    721a:	b019      	add	sp, #100	; 0x64
    721c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return STATUS_ERR_BAD_FORMAT;
    721e:	201a      	movs	r0, #26
    7220:	e7fb      	b.n	721a <eeprom_emulator_init+0xa6>
    7222:	46c0      	nop			; (mov r8, r8)
    7224:	41004000 	.word	0x41004000
    7228:	00006cf9 	.word	0x00006cf9
    722c:	00006f89 	.word	0x00006f89
    7230:	20000a7c 	.word	0x20000a7c
    7234:	0000701d 	.word	0x0000701d
    7238:	0000a394 	.word	0x0000a394
    723c:	0000710d 	.word	0x0000710d

00007240 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    7240:	b5f0      	push	{r4, r5, r6, r7, lr}
	_eeprom_instance.spare_row = 0;
    7242:	4e2b      	ldr	r6, [pc, #172]	; (72f0 <eeprom_emulator_erase_memory+0xb0>)
    7244:	2500      	movs	r5, #0
    7246:	0033      	movs	r3, r6
    7248:	3387      	adds	r3, #135	; 0x87
    724a:	701d      	strb	r5, [r3, #0]
{
    724c:	b091      	sub	sp, #68	; 0x44
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    724e:	0028      	movs	r0, r5
    7250:	4b28      	ldr	r3, [pc, #160]	; (72f4 <eeprom_emulator_erase_memory+0xb4>)
    7252:	4798      	blx	r3
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    7254:	2404      	movs	r4, #4
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    7256:	8933      	ldrh	r3, [r6, #8]
    7258:	1e5f      	subs	r7, r3, #1
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    725a:	429c      	cmp	r4, r3
    725c:	d328      	bcc.n	72b0 <eeprom_emulator_erase_memory+0x70>
	memset(&master_page, 0xFF, sizeof(master_page));
    725e:	21ff      	movs	r1, #255	; 0xff
    7260:	2240      	movs	r2, #64	; 0x40
    7262:	4668      	mov	r0, sp
    7264:	4b24      	ldr	r3, [pc, #144]	; (72f8 <eeprom_emulator_erase_memory+0xb8>)
    7266:	4798      	blx	r3
		master_page.magic_key[c] = magic_key[c];
    7268:	4b24      	ldr	r3, [pc, #144]	; (72fc <eeprom_emulator_erase_memory+0xbc>)
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    726a:	466a      	mov	r2, sp
		master_page.magic_key[c] = magic_key[c];
    726c:	9300      	str	r3, [sp, #0]
    726e:	4b24      	ldr	r3, [pc, #144]	; (7300 <eeprom_emulator_erase_memory+0xc0>)
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    7270:	17f8      	asrs	r0, r7, #31
		master_page.magic_key[c] = magic_key[c];
    7272:	9301      	str	r3, [sp, #4]
    7274:	4b23      	ldr	r3, [pc, #140]	; (7304 <eeprom_emulator_erase_memory+0xc4>)
    7276:	9302      	str	r3, [sp, #8]
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    7278:	2301      	movs	r3, #1
    727a:	73d3      	strb	r3, [r2, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    727c:	7313      	strb	r3, [r2, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    727e:	2300      	movs	r3, #0
    7280:	7353      	strb	r3, [r2, #13]
	master_page.revision      = EEPROM_REVISION;
    7282:	7393      	strb	r3, [r2, #14]
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    7284:	3303      	adds	r3, #3
    7286:	4018      	ands	r0, r3
    7288:	19c7      	adds	r7, r0, r7
    728a:	10bf      	asrs	r7, r7, #2
	_eeprom_emulator_nvm_erase_row(
    728c:	b2f8      	uxtb	r0, r7
    728e:	4b19      	ldr	r3, [pc, #100]	; (72f4 <eeprom_emulator_erase_memory+0xb4>)
    7290:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    7292:	8930      	ldrh	r0, [r6, #8]
    7294:	4669      	mov	r1, sp
    7296:	3801      	subs	r0, #1
    7298:	b280      	uxth	r0, r0
    729a:	4b1b      	ldr	r3, [pc, #108]	; (7308 <eeprom_emulator_erase_memory+0xc8>)
    729c:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    729e:	8930      	ldrh	r0, [r6, #8]
    72a0:	4b1a      	ldr	r3, [pc, #104]	; (730c <eeprom_emulator_erase_memory+0xcc>)
    72a2:	3801      	subs	r0, #1
    72a4:	b280      	uxth	r0, r0
    72a6:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    72a8:	4b19      	ldr	r3, [pc, #100]	; (7310 <eeprom_emulator_erase_memory+0xd0>)
    72aa:	4798      	blx	r3
}
    72ac:	b011      	add	sp, #68	; 0x44
    72ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    72b0:	42bc      	cmp	r4, r7
    72b2:	d019      	beq.n	72e8 <eeprom_emulator_erase_memory+0xa8>
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    72b4:	2303      	movs	r3, #3
    72b6:	4023      	ands	r3, r4
    72b8:	d114      	bne.n	72e4 <eeprom_emulator_erase_memory+0xa4>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    72ba:	08a0      	lsrs	r0, r4, #2
    72bc:	b2c0      	uxtb	r0, r0
    72be:	4b0d      	ldr	r3, [pc, #52]	; (72f4 <eeprom_emulator_erase_memory+0xb4>)
    72c0:	4798      	blx	r3
			memset(&data, 0xFF, sizeof(data));
    72c2:	2240      	movs	r2, #64	; 0x40
    72c4:	21ff      	movs	r1, #255	; 0xff
    72c6:	4b0c      	ldr	r3, [pc, #48]	; (72f8 <eeprom_emulator_erase_memory+0xb8>)
    72c8:	4668      	mov	r0, sp
    72ca:	4798      	blx	r3
			data.header.logical_page = logical_page;
    72cc:	466b      	mov	r3, sp
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    72ce:	4669      	mov	r1, sp
			data.header.logical_page = logical_page;
    72d0:	701d      	strb	r5, [r3, #0]
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    72d2:	0020      	movs	r0, r4
    72d4:	4b0c      	ldr	r3, [pc, #48]	; (7308 <eeprom_emulator_erase_memory+0xc8>)
    72d6:	4798      	blx	r3
			logical_page++;
    72d8:	3501      	adds	r5, #1
			_eeprom_emulator_nvm_commit_cache(physical_page);
    72da:	0020      	movs	r0, r4
    72dc:	4b0b      	ldr	r3, [pc, #44]	; (730c <eeprom_emulator_erase_memory+0xcc>)
    72de:	4798      	blx	r3
			logical_page++;
    72e0:	b2ad      	uxth	r5, r5
    72e2:	e001      	b.n	72e8 <eeprom_emulator_erase_memory+0xa8>
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    72e4:	2b01      	cmp	r3, #1
    72e6:	d0ec      	beq.n	72c2 <eeprom_emulator_erase_memory+0x82>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    72e8:	3401      	adds	r4, #1
    72ea:	b2a4      	uxth	r4, r4
    72ec:	e7b3      	b.n	7256 <eeprom_emulator_erase_memory+0x16>
    72ee:	46c0      	nop			; (mov r8, r8)
    72f0:	20000a7c 	.word	0x20000a7c
    72f4:	00007001 	.word	0x00007001
    72f8:	0000924b 	.word	0x0000924b
    72fc:	41744545 	.word	0x41744545
    7300:	50524f4d 	.word	0x50524f4d
    7304:	456d752e 	.word	0x456d752e
    7308:	00007131 	.word	0x00007131
    730c:	00007155 	.word	0x00007155
    7310:	0000701d 	.word	0x0000701d

00007314 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    7314:	b530      	push	{r4, r5, lr}
    7316:	000c      	movs	r4, r1
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    7318:	4912      	ldr	r1, [pc, #72]	; (7364 <eeprom_emulator_read_page+0x50>)
{
    731a:	b091      	sub	sp, #68	; 0x44
	if (_eeprom_instance.initialized == false) {
    731c:	780a      	ldrb	r2, [r1, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    731e:	231f      	movs	r3, #31
	if (_eeprom_instance.initialized == false) {
    7320:	2a00      	cmp	r2, #0
    7322:	d013      	beq.n	734c <eeprom_emulator_read_page+0x38>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    7324:	7a8a      	ldrb	r2, [r1, #10]
		return STATUS_ERR_BAD_ADDRESS;
    7326:	3b07      	subs	r3, #7
	if (logical_page >= _eeprom_instance.logical_pages) {
    7328:	4282      	cmp	r2, r0
    732a:	d90f      	bls.n	734c <eeprom_emulator_read_page+0x38>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
    732c:	000b      	movs	r3, r1
    732e:	33c8      	adds	r3, #200	; 0xc8
    7330:	781b      	ldrb	r3, [r3, #0]
    7332:	4d0d      	ldr	r5, [pc, #52]	; (7368 <eeprom_emulator_read_page+0x54>)
    7334:	2b00      	cmp	r3, #0
    7336:	d00c      	beq.n	7352 <eeprom_emulator_read_page+0x3e>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    7338:	000b      	movs	r3, r1
    733a:	3388      	adds	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    733c:	781b      	ldrb	r3, [r3, #0]
    733e:	4283      	cmp	r3, r0
    7340:	d107      	bne.n	7352 <eeprom_emulator_read_page+0x3e>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    7342:	223c      	movs	r2, #60	; 0x3c
    7344:	318c      	adds	r1, #140	; 0x8c
		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    7346:	0020      	movs	r0, r4
    7348:	47a8      	blx	r5
	}

	return STATUS_OK;
    734a:	2300      	movs	r3, #0
}
    734c:	0018      	movs	r0, r3
    734e:	b011      	add	sp, #68	; 0x44
    7350:	bd30      	pop	{r4, r5, pc}
				_eeprom_instance.page_map[logical_page], &temp);
    7352:	1809      	adds	r1, r1, r0
		_eeprom_emulator_nvm_read_page(
    7354:	7ac8      	ldrb	r0, [r1, #11]
    7356:	4b05      	ldr	r3, [pc, #20]	; (736c <eeprom_emulator_read_page+0x58>)
    7358:	4669      	mov	r1, sp
    735a:	4798      	blx	r3
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    735c:	223c      	movs	r2, #60	; 0x3c
    735e:	a901      	add	r1, sp, #4
    7360:	e7f1      	b.n	7346 <eeprom_emulator_read_page+0x32>
    7362:	46c0      	nop			; (mov r8, r8)
    7364:	20000a7c 	.word	0x20000a7c
    7368:	00009239 	.word	0x00009239
    736c:	0000710d 	.word	0x0000710d

00007370 <eeprom_emulator_commit_page_buffer>:
enum status_code eeprom_emulator_commit_page_buffer(void)
{
	enum status_code error_code = STATUS_OK;

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    7370:	4b08      	ldr	r3, [pc, #32]	; (7394 <eeprom_emulator_commit_page_buffer+0x24>)
{
    7372:	b510      	push	{r4, lr}
	if (_eeprom_instance.cache_active == false) {
    7374:	001c      	movs	r4, r3
    7376:	34c8      	adds	r4, #200	; 0xc8
    7378:	7822      	ldrb	r2, [r4, #0]
    737a:	2a00      	cmp	r2, #0
    737c:	d008      	beq.n	7390 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    737e:	001a      	movs	r2, r3
    7380:	3288      	adds	r2, #136	; 0x88

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
    7382:	7812      	ldrb	r2, [r2, #0]
    7384:	189b      	adds	r3, r3, r2
	_eeprom_emulator_nvm_commit_cache(
    7386:	7ad8      	ldrb	r0, [r3, #11]
    7388:	4b03      	ldr	r3, [pc, #12]	; (7398 <eeprom_emulator_commit_page_buffer+0x28>)
    738a:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
    738c:	2300      	movs	r3, #0
    738e:	7023      	strb	r3, [r4, #0]

	return error_code;
}
    7390:	2000      	movs	r0, #0
    7392:	bd10      	pop	{r4, pc}
    7394:	20000a7c 	.word	0x20000a7c
    7398:	00007155 	.word	0x00007155

0000739c <eeprom_emulator_write_page>:
{
    739c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_eeprom_instance.initialized == false) {
    739e:	4c4c      	ldr	r4, [pc, #304]	; (74d0 <eeprom_emulator_write_page+0x134>)
{
    73a0:	b087      	sub	sp, #28
	if (_eeprom_instance.initialized == false) {
    73a2:	7823      	ldrb	r3, [r4, #0]
{
    73a4:	0005      	movs	r5, r0
    73a6:	9103      	str	r1, [sp, #12]
		return STATUS_ERR_NOT_INITIALIZED;
    73a8:	201f      	movs	r0, #31
	if (_eeprom_instance.initialized == false) {
    73aa:	2b00      	cmp	r3, #0
    73ac:	d077      	beq.n	749e <eeprom_emulator_write_page+0x102>
	if (logical_page >= _eeprom_instance.logical_pages) {
    73ae:	7aa3      	ldrb	r3, [r4, #10]
		return STATUS_ERR_BAD_ADDRESS;
    73b0:	3807      	subs	r0, #7
	if (logical_page >= _eeprom_instance.logical_pages) {
    73b2:	42ab      	cmp	r3, r5
    73b4:	d973      	bls.n	749e <eeprom_emulator_write_page+0x102>
	if ((_eeprom_instance.cache_active == true) &&
    73b6:	0023      	movs	r3, r4
    73b8:	33c8      	adds	r3, #200	; 0xc8
    73ba:	781b      	ldrb	r3, [r3, #0]
    73bc:	2b00      	cmp	r3, #0
    73be:	d006      	beq.n	73ce <eeprom_emulator_write_page+0x32>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    73c0:	0023      	movs	r3, r4
    73c2:	3388      	adds	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    73c4:	781b      	ldrb	r3, [r3, #0]
    73c6:	42ab      	cmp	r3, r5
    73c8:	d001      	beq.n	73ce <eeprom_emulator_write_page+0x32>
		eeprom_emulator_commit_page_buffer();
    73ca:	4b42      	ldr	r3, [pc, #264]	; (74d4 <eeprom_emulator_write_page+0x138>)
    73cc:	4798      	blx	r3
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    73ce:	1963      	adds	r3, r4, r5
    73d0:	7ad9      	ldrb	r1, [r3, #11]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    73d2:	2303      	movs	r3, #3
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    73d4:	000e      	movs	r6, r1
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    73d6:	000a      	movs	r2, r1
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    73d8:	439e      	bics	r6, r3
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    73da:	401a      	ands	r2, r3
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    73dc:	0033      	movs	r3, r6
		if (_eeprom_instance.flash[page].header.logical_page ==
    73de:	6860      	ldr	r0, [r4, #4]
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    73e0:	189e      	adds	r6, r3, r2
    73e2:	b2f6      	uxtb	r6, r6
		if (_eeprom_instance.flash[page].header.logical_page ==
    73e4:	01b7      	lsls	r7, r6, #6
    73e6:	5c3f      	ldrb	r7, [r7, r0]
    73e8:	2fff      	cmp	r7, #255	; 0xff
    73ea:	d05f      	beq.n	74ac <eeprom_emulator_write_page+0x110>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    73ec:	3201      	adds	r2, #1
    73ee:	b2d2      	uxtb	r2, r2
    73f0:	2a04      	cmp	r2, #4
    73f2:	d1f5      	bne.n	73e0 <eeprom_emulator_write_page+0x44>
		_eeprom_emulator_move_data_to_spare(
    73f4:	088a      	lsrs	r2, r1, #2
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    73f6:	0214      	lsls	r4, r2, #8
	const struct _eeprom_page *row_data =
    73f8:	1904      	adds	r4, r0, r4
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    73fa:	1c5e      	adds	r6, r3, #1
		_eeprom_emulator_move_data_to_spare(
    73fc:	9201      	str	r2, [sp, #4]
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    73fe:	aa05      	add	r2, sp, #20
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    7400:	0021      	movs	r1, r4
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    7402:	70d6      	strb	r6, [r2, #3]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    7404:	0026      	movs	r6, r4
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    7406:	3140      	adds	r1, #64	; 0x40
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    7408:	3680      	adds	r6, #128	; 0x80
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    740a:	7820      	ldrb	r0, [r4, #0]
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    740c:	7809      	ldrb	r1, [r1, #0]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    740e:	7836      	ldrb	r6, [r6, #0]
    7410:	34c0      	adds	r4, #192	; 0xc0
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    7412:	7010      	strb	r0, [r2, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    7414:	7053      	strb	r3, [r2, #1]
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    7416:	7091      	strb	r1, [r2, #2]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    7418:	7824      	ldrb	r4, [r4, #0]
    741a:	4286      	cmp	r6, r0
    741c:	d101      	bne.n	7422 <eeprom_emulator_write_page+0x86>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    741e:	1c9f      	adds	r7, r3, #2
				page_trans[c].physical_page =
    7420:	7057      	strb	r7, [r2, #1]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    7422:	42a0      	cmp	r0, r4
    7424:	d101      	bne.n	742a <eeprom_emulator_write_page+0x8e>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    7426:	1cd8      	adds	r0, r3, #3
				page_trans[c].physical_page =
    7428:	7050      	strb	r0, [r2, #1]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    742a:	428e      	cmp	r6, r1
    742c:	d101      	bne.n	7432 <eeprom_emulator_write_page+0x96>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    742e:	1c98      	adds	r0, r3, #2
				page_trans[c].physical_page =
    7430:	70d0      	strb	r0, [r2, #3]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    7432:	42a1      	cmp	r1, r4
    7434:	d101      	bne.n	743a <eeprom_emulator_write_page+0x9e>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    7436:	3303      	adds	r3, #3
				page_trans[c].physical_page =
    7438:	70d3      	strb	r3, [r2, #3]
{
    743a:	2600      	movs	r6, #0
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    743c:	4c24      	ldr	r4, [pc, #144]	; (74d0 <eeprom_emulator_write_page+0x134>)
    743e:	0023      	movs	r3, r4
    7440:	3387      	adds	r3, #135	; 0x87
    7442:	781b      	ldrb	r3, [r3, #0]
    7444:	009b      	lsls	r3, r3, #2
    7446:	199b      	adds	r3, r3, r6
    7448:	9302      	str	r3, [sp, #8]
		eeprom_emulator_commit_page_buffer();
    744a:	4b22      	ldr	r3, [pc, #136]	; (74d4 <eeprom_emulator_write_page+0x138>)
    744c:	4798      	blx	r3
    744e:	0021      	movs	r1, r4
    7450:	0072      	lsls	r2, r6, #1
		if (logical_page == page_trans[c].logical_page) {
    7452:	ab05      	add	r3, sp, #20
    7454:	5cd7      	ldrb	r7, [r2, r3]
    7456:	3188      	adds	r1, #136	; 0x88
    7458:	42bd      	cmp	r5, r7
    745a:	d122      	bne.n	74a2 <eeprom_emulator_write_page+0x106>
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    745c:	0020      	movs	r0, r4
			_eeprom_instance.cache.header.logical_page = logical_page;
    745e:	700d      	strb	r5, [r1, #0]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    7460:	308c      	adds	r0, #140	; 0x8c
    7462:	223c      	movs	r2, #60	; 0x3c
    7464:	9903      	ldr	r1, [sp, #12]
    7466:	4b1c      	ldr	r3, [pc, #112]	; (74d8 <eeprom_emulator_write_page+0x13c>)
    7468:	4798      	blx	r3
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    746a:	4c19      	ldr	r4, [pc, #100]	; (74d0 <eeprom_emulator_write_page+0x134>)
    746c:	466b      	mov	r3, sp
    746e:	0021      	movs	r1, r4
    7470:	8918      	ldrh	r0, [r3, #8]
    7472:	3188      	adds	r1, #136	; 0x88
    7474:	4b19      	ldr	r3, [pc, #100]	; (74dc <eeprom_emulator_write_page+0x140>)
    7476:	4798      	blx	r3
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    7478:	466b      	mov	r3, sp
    747a:	7a1b      	ldrb	r3, [r3, #8]
    747c:	19e7      	adds	r7, r4, r7
    747e:	72fb      	strb	r3, [r7, #11]
		_eeprom_instance.cache_active = true;
    7480:	0023      	movs	r3, r4
    7482:	2201      	movs	r2, #1
    7484:	33c8      	adds	r3, #200	; 0xc8
    7486:	3601      	adds	r6, #1
    7488:	701a      	strb	r2, [r3, #0]
	for (uint8_t c = 0; c < 2; c++) {
    748a:	2e02      	cmp	r6, #2
    748c:	d1d6      	bne.n	743c <eeprom_emulator_write_page+0xa0>
	_eeprom_emulator_nvm_erase_row(row_number);
    748e:	4b14      	ldr	r3, [pc, #80]	; (74e0 <eeprom_emulator_write_page+0x144>)
    7490:	9801      	ldr	r0, [sp, #4]
    7492:	4798      	blx	r3
	_eeprom_instance.spare_row = row_number;
    7494:	466b      	mov	r3, sp
    7496:	791b      	ldrb	r3, [r3, #4]
    7498:	3487      	adds	r4, #135	; 0x87
	_eeprom_instance.cache_active           = true;
    749a:	2000      	movs	r0, #0
    749c:	7023      	strb	r3, [r4, #0]
}
    749e:	b007      	add	sp, #28
    74a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					page_trans[c].physical_page, &_eeprom_instance.cache);
    74a2:	189b      	adds	r3, r3, r2
			_eeprom_emulator_nvm_read_page(
    74a4:	7858      	ldrb	r0, [r3, #1]
    74a6:	4b0f      	ldr	r3, [pc, #60]	; (74e4 <eeprom_emulator_write_page+0x148>)
    74a8:	4798      	blx	r3
    74aa:	e7de      	b.n	746a <eeprom_emulator_write_page+0xce>
	_eeprom_instance.cache.header.logical_page = logical_page;
    74ac:	0027      	movs	r7, r4
	memcpy(&_eeprom_instance.cache.data,
    74ae:	0020      	movs	r0, r4
	_eeprom_instance.cache.header.logical_page = logical_page;
    74b0:	3788      	adds	r7, #136	; 0x88
	memcpy(&_eeprom_instance.cache.data,
    74b2:	223c      	movs	r2, #60	; 0x3c
    74b4:	9903      	ldr	r1, [sp, #12]
    74b6:	4b08      	ldr	r3, [pc, #32]	; (74d8 <eeprom_emulator_write_page+0x13c>)
    74b8:	308c      	adds	r0, #140	; 0x8c
	_eeprom_instance.cache.header.logical_page = logical_page;
    74ba:	703d      	strb	r5, [r7, #0]
	memcpy(&_eeprom_instance.cache.data,
    74bc:	4798      	blx	r3
	_eeprom_instance.page_map[logical_page] = new_page;
    74be:	1965      	adds	r5, r4, r5
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    74c0:	b2b0      	uxth	r0, r6
    74c2:	0039      	movs	r1, r7
    74c4:	4b05      	ldr	r3, [pc, #20]	; (74dc <eeprom_emulator_write_page+0x140>)
    74c6:	4798      	blx	r3
	_eeprom_instance.page_map[logical_page] = new_page;
    74c8:	72ee      	strb	r6, [r5, #11]
	_eeprom_instance.cache_active           = true;
    74ca:	2301      	movs	r3, #1
    74cc:	34c8      	adds	r4, #200	; 0xc8
    74ce:	e7e4      	b.n	749a <eeprom_emulator_write_page+0xfe>
    74d0:	20000a7c 	.word	0x20000a7c
    74d4:	00007371 	.word	0x00007371
    74d8:	00009239 	.word	0x00009239
    74dc:	00007131 	.word	0x00007131
    74e0:	00007001 	.word	0x00007001
    74e4:	0000710d 	.word	0x0000710d

000074e8 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    74e8:	4770      	bx	lr
	...

000074ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    74ec:	4b09      	ldr	r3, [pc, #36]	; (7514 <cpu_irq_enter_critical+0x28>)
    74ee:	6819      	ldr	r1, [r3, #0]
    74f0:	2900      	cmp	r1, #0
    74f2:	d10b      	bne.n	750c <cpu_irq_enter_critical+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    74f4:	f3ef 8010 	mrs	r0, PRIMASK
    74f8:	4a07      	ldr	r2, [pc, #28]	; (7518 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
    74fa:	2800      	cmp	r0, #0
    74fc:	d105      	bne.n	750a <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
    74fe:	b672      	cpsid	i
    7500:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    7504:	4905      	ldr	r1, [pc, #20]	; (751c <cpu_irq_enter_critical+0x30>)
    7506:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
    7508:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    750a:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    750c:	681a      	ldr	r2, [r3, #0]
    750e:	3201      	adds	r2, #1
    7510:	601a      	str	r2, [r3, #0]
}
    7512:	4770      	bx	lr
    7514:	20000b48 	.word	0x20000b48
    7518:	20000b4c 	.word	0x20000b4c
    751c:	20000120 	.word	0x20000120

00007520 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    7520:	4b08      	ldr	r3, [pc, #32]	; (7544 <cpu_irq_leave_critical+0x24>)
    7522:	681a      	ldr	r2, [r3, #0]
    7524:	3a01      	subs	r2, #1
    7526:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    7528:	681b      	ldr	r3, [r3, #0]
    752a:	2b00      	cmp	r3, #0
    752c:	d109      	bne.n	7542 <cpu_irq_leave_critical+0x22>
    752e:	4b06      	ldr	r3, [pc, #24]	; (7548 <cpu_irq_leave_critical+0x28>)
    7530:	781b      	ldrb	r3, [r3, #0]
    7532:	2b00      	cmp	r3, #0
    7534:	d005      	beq.n	7542 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    7536:	2201      	movs	r2, #1
    7538:	4b04      	ldr	r3, [pc, #16]	; (754c <cpu_irq_leave_critical+0x2c>)
    753a:	701a      	strb	r2, [r3, #0]
    753c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7540:	b662      	cpsie	i
	}
}
    7542:	4770      	bx	lr
    7544:	20000b48 	.word	0x20000b48
    7548:	20000b4c 	.word	0x20000b4c
    754c:	20000120 	.word	0x20000120

00007550 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    7550:	2310      	movs	r3, #16
    7552:	4902      	ldr	r1, [pc, #8]	; (755c <_system_dfll_wait_for_sync+0xc>)
    7554:	68ca      	ldr	r2, [r1, #12]
    7556:	421a      	tst	r2, r3
    7558:	d0fc      	beq.n	7554 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    755a:	4770      	bx	lr
    755c:	40000800 	.word	0x40000800

00007560 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    7560:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
    7562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
    7564:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    7566:	4d09      	ldr	r5, [pc, #36]	; (758c <system_clock_source_enable.part.0+0x2c>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    7568:	4c09      	ldr	r4, [pc, #36]	; (7590 <system_clock_source_enable.part.0+0x30>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    756a:	682b      	ldr	r3, [r5, #0]
	_system_dfll_wait_for_sync();
    756c:	4f09      	ldr	r7, [pc, #36]	; (7594 <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    756e:	4313      	orrs	r3, r2
    7570:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    7572:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7574:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7576:	68ab      	ldr	r3, [r5, #8]
    7578:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    757a:	686b      	ldr	r3, [r5, #4]
    757c:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    757e:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    7580:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7582:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    7584:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7586:	b29b      	uxth	r3, r3
    7588:	84a3      	strh	r3, [r4, #36]	; 0x24
}
    758a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    758c:	20000b50 	.word	0x20000b50
    7590:	40000800 	.word	0x40000800
    7594:	00007551 	.word	0x00007551

00007598 <system_clock_source_get_hz>:
{
    7598:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    759a:	2808      	cmp	r0, #8
    759c:	d806      	bhi.n	75ac <system_clock_source_get_hz+0x14>
    759e:	f001 faf5 	bl	8b8c <__gnu_thumb1_case_uqi>
    75a2:	0508      	.short	0x0508
    75a4:	12303005 	.word	0x12303005
    75a8:	150b      	.short	0x150b
    75aa:	28          	.byte	0x28
    75ab:	00          	.byte	0x00
		return 0;
    75ac:	2400      	movs	r4, #0
}
    75ae:	0020      	movs	r0, r4
    75b0:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    75b2:	4b16      	ldr	r3, [pc, #88]	; (760c <system_clock_source_get_hz+0x74>)
    75b4:	691c      	ldr	r4, [r3, #16]
    75b6:	e7fa      	b.n	75ae <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    75b8:	4b15      	ldr	r3, [pc, #84]	; (7610 <system_clock_source_get_hz+0x78>)
    75ba:	4c16      	ldr	r4, [pc, #88]	; (7614 <system_clock_source_get_hz+0x7c>)
    75bc:	6a1b      	ldr	r3, [r3, #32]
    75be:	059b      	lsls	r3, r3, #22
    75c0:	0f9b      	lsrs	r3, r3, #30
    75c2:	40dc      	lsrs	r4, r3
    75c4:	e7f3      	b.n	75ae <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    75c6:	4b11      	ldr	r3, [pc, #68]	; (760c <system_clock_source_get_hz+0x74>)
    75c8:	695c      	ldr	r4, [r3, #20]
    75ca:	e7f0      	b.n	75ae <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    75cc:	4d0f      	ldr	r5, [pc, #60]	; (760c <system_clock_source_get_hz+0x74>)
			return 0;
    75ce:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    75d0:	682b      	ldr	r3, [r5, #0]
    75d2:	079b      	lsls	r3, r3, #30
    75d4:	d5eb      	bpl.n	75ae <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    75d6:	4b10      	ldr	r3, [pc, #64]	; (7618 <system_clock_source_get_hz+0x80>)
    75d8:	4798      	blx	r3
		switch(_system_clock_inst.dfll.control &
    75da:	2224      	movs	r2, #36	; 0x24
    75dc:	682b      	ldr	r3, [r5, #0]
    75de:	4013      	ands	r3, r2
    75e0:	2b04      	cmp	r3, #4
    75e2:	d111      	bne.n	7608 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    75e4:	0020      	movs	r0, r4
    75e6:	4b0d      	ldr	r3, [pc, #52]	; (761c <system_clock_source_get_hz+0x84>)
    75e8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    75ea:	68ac      	ldr	r4, [r5, #8]
    75ec:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    75ee:	4344      	muls	r4, r0
    75f0:	e7dd      	b.n	75ae <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    75f2:	4b0b      	ldr	r3, [pc, #44]	; (7620 <system_clock_source_get_hz+0x88>)
			return 0;
    75f4:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    75f6:	781b      	ldrb	r3, [r3, #0]
    75f8:	075b      	lsls	r3, r3, #29
    75fa:	d5d8      	bpl.n	75ae <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    75fc:	4b03      	ldr	r3, [pc, #12]	; (760c <system_clock_source_get_hz+0x74>)
    75fe:	68dc      	ldr	r4, [r3, #12]
    7600:	e7d5      	b.n	75ae <system_clock_source_get_hz+0x16>
		return 32768UL;
    7602:	2480      	movs	r4, #128	; 0x80
    7604:	0224      	lsls	r4, r4, #8
    7606:	e7d2      	b.n	75ae <system_clock_source_get_hz+0x16>
			return 48000000UL;
    7608:	4c06      	ldr	r4, [pc, #24]	; (7624 <system_clock_source_get_hz+0x8c>)
    760a:	e7d0      	b.n	75ae <system_clock_source_get_hz+0x16>
    760c:	20000b50 	.word	0x20000b50
    7610:	40000800 	.word	0x40000800
    7614:	007a1200 	.word	0x007a1200
    7618:	00007551 	.word	0x00007551
    761c:	00007bd9 	.word	0x00007bd9
    7620:	40000850 	.word	0x40000850
    7624:	02dc6c00 	.word	0x02dc6c00

00007628 <system_clock_source_osc8m_set_config>:
{
    7628:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
    762a:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    762c:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
    762e:	7845      	ldrb	r5, [r0, #1]
    7630:	2001      	movs	r0, #1
    7632:	2640      	movs	r6, #64	; 0x40
    7634:	4005      	ands	r5, r0
    7636:	4020      	ands	r0, r4
    7638:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    763a:	4908      	ldr	r1, [pc, #32]	; (765c <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    763c:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    763e:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    7640:	01c0      	lsls	r0, r0, #7
    7642:	43b3      	bics	r3, r6
    7644:	432b      	orrs	r3, r5
    7646:	43a3      	bics	r3, r4
    7648:	4303      	orrs	r3, r0
    764a:	2003      	movs	r0, #3
    764c:	4002      	ands	r2, r0
    764e:	4804      	ldr	r0, [pc, #16]	; (7660 <system_clock_source_osc8m_set_config+0x38>)
    7650:	0212      	lsls	r2, r2, #8
    7652:	4003      	ands	r3, r0
    7654:	4313      	orrs	r3, r2
    7656:	620b      	str	r3, [r1, #32]
}
    7658:	bd70      	pop	{r4, r5, r6, pc}
    765a:	46c0      	nop			; (mov r8, r8)
    765c:	40000800 	.word	0x40000800
    7660:	fffffcff 	.word	0xfffffcff

00007664 <system_clock_source_xosc32k_set_config>:
{
    7664:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    7666:	4b22      	ldr	r3, [pc, #136]	; (76f0 <system_clock_source_xosc32k_set_config+0x8c>)
	temp.bit.STARTUP = config->startup_time;
    7668:	7842      	ldrb	r2, [r0, #1]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    766a:	7807      	ldrb	r7, [r0, #0]
{
    766c:	b085      	sub	sp, #20
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    766e:	469c      	mov	ip, r3
    7670:	8a9b      	ldrh	r3, [r3, #20]
	temp.bit.STARTUP = config->startup_time;
    7672:	9203      	str	r2, [sp, #12]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    7674:	427a      	negs	r2, r7
    7676:	4157      	adcs	r7, r2
	temp.bit.ONDEMAND = config->on_demand;
    7678:	7b42      	ldrb	r2, [r0, #13]
	temp.bit.AAMPEN = config->auto_gain_control;
    767a:	7884      	ldrb	r4, [r0, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    767c:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    767e:	7906      	ldrb	r6, [r0, #4]
	temp.bit.ONDEMAND = config->on_demand;
    7680:	9201      	str	r2, [sp, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7682:	7b02      	ldrb	r2, [r0, #12]
    7684:	9202      	str	r2, [sp, #8]
	temp.bit.WRTLOCK  = config->write_once;
    7686:	7b81      	ldrb	r1, [r0, #14]
	_system_clock_inst.xosc32k.frequency = config->frequency;
    7688:	4a1a      	ldr	r2, [pc, #104]	; (76f4 <system_clock_source_xosc32k_set_config+0x90>)
    768a:	6880      	ldr	r0, [r0, #8]
    768c:	6150      	str	r0, [r2, #20]
	SYSCTRL->XOSC32K = temp;
    768e:	00b8      	lsls	r0, r7, #2
    7690:	2704      	movs	r7, #4
    7692:	2201      	movs	r2, #1
    7694:	43bb      	bics	r3, r7
    7696:	4318      	orrs	r0, r3
    7698:	2308      	movs	r3, #8
    769a:	4015      	ands	r5, r2
    769c:	40bd      	lsls	r5, r7
    769e:	4016      	ands	r6, r2
    76a0:	4398      	bics	r0, r3
    76a2:	00f6      	lsls	r6, r6, #3
    76a4:	4306      	orrs	r6, r0
    76a6:	18db      	adds	r3, r3, r3
    76a8:	439e      	bics	r6, r3
    76aa:	4335      	orrs	r5, r6
    76ac:	3310      	adds	r3, #16
    76ae:	439d      	bics	r5, r3
    76b0:	002b      	movs	r3, r5
    76b2:	2040      	movs	r0, #64	; 0x40
    76b4:	4014      	ands	r4, r2
    76b6:	0164      	lsls	r4, r4, #5
    76b8:	4323      	orrs	r3, r4
    76ba:	9c02      	ldr	r4, [sp, #8]
    76bc:	4383      	bics	r3, r0
    76be:	4014      	ands	r4, r2
    76c0:	01a4      	lsls	r4, r4, #6
    76c2:	4323      	orrs	r3, r4
    76c4:	2480      	movs	r4, #128	; 0x80
    76c6:	9801      	ldr	r0, [sp, #4]
    76c8:	43a3      	bics	r3, r4
    76ca:	4010      	ands	r0, r2
    76cc:	01c0      	lsls	r0, r0, #7
    76ce:	4303      	orrs	r3, r0
    76d0:	2007      	movs	r0, #7
    76d2:	9c03      	ldr	r4, [sp, #12]
    76d4:	4011      	ands	r1, r2
    76d6:	4020      	ands	r0, r4
    76d8:	4c07      	ldr	r4, [pc, #28]	; (76f8 <system_clock_source_xosc32k_set_config+0x94>)
    76da:	0200      	lsls	r0, r0, #8
    76dc:	4023      	ands	r3, r4
    76de:	4a07      	ldr	r2, [pc, #28]	; (76fc <system_clock_source_xosc32k_set_config+0x98>)
    76e0:	4303      	orrs	r3, r0
    76e2:	401a      	ands	r2, r3
    76e4:	4663      	mov	r3, ip
    76e6:	0309      	lsls	r1, r1, #12
    76e8:	430a      	orrs	r2, r1
    76ea:	829a      	strh	r2, [r3, #20]
}
    76ec:	b005      	add	sp, #20
    76ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76f0:	40000800 	.word	0x40000800
    76f4:	20000b50 	.word	0x20000b50
    76f8:	fffff8ff 	.word	0xfffff8ff
    76fc:	ffffefff 	.word	0xffffefff

00007700 <system_clock_source_dfll_set_config>:
{
    7700:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    7702:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    7704:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    7706:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    7708:	059b      	lsls	r3, r3, #22
    770a:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    770c:	0c12      	lsrs	r2, r2, #16
    770e:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    7710:	4b17      	ldr	r3, [pc, #92]	; (7770 <system_clock_source_dfll_set_config+0x70>)
    7712:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
    7714:	79c1      	ldrb	r1, [r0, #7]
    7716:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
    7718:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    771a:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
    771c:	8841      	ldrh	r1, [r0, #2]
    771e:	4321      	orrs	r1, r4
    7720:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    7722:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    7724:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    7726:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    7728:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
    772a:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    772c:	2c04      	cmp	r4, #4
    772e:	d10d      	bne.n	774c <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    7730:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    7732:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    7734:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    7736:	430a      	orrs	r2, r1
    7738:	89c1      	ldrh	r1, [r0, #14]
    773a:	480e      	ldr	r0, [pc, #56]	; (7774 <system_clock_source_dfll_set_config+0x74>)
    773c:	0409      	lsls	r1, r1, #16
    773e:	4001      	ands	r1, r0
    7740:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    7742:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    7744:	681a      	ldr	r2, [r3, #0]
    7746:	4314      	orrs	r4, r2
    7748:	601c      	str	r4, [r3, #0]
}
    774a:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    774c:	2c20      	cmp	r4, #32
    774e:	d1fc      	bne.n	774a <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    7750:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    7752:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    7754:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    7756:	430a      	orrs	r2, r1
    7758:	89c1      	ldrh	r1, [r0, #14]
    775a:	4806      	ldr	r0, [pc, #24]	; (7774 <system_clock_source_dfll_set_config+0x74>)
    775c:	0409      	lsls	r1, r1, #16
    775e:	4001      	ands	r1, r0
    7760:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    7762:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    7764:	6819      	ldr	r1, [r3, #0]
    7766:	4a04      	ldr	r2, [pc, #16]	; (7778 <system_clock_source_dfll_set_config+0x78>)
    7768:	430a      	orrs	r2, r1
    776a:	601a      	str	r2, [r3, #0]
}
    776c:	e7ed      	b.n	774a <system_clock_source_dfll_set_config+0x4a>
    776e:	46c0      	nop			; (mov r8, r8)
    7770:	20000b50 	.word	0x20000b50
    7774:	03ff0000 	.word	0x03ff0000
    7778:	00000424 	.word	0x00000424

0000777c <system_clock_source_enable>:
{
    777c:	b510      	push	{r4, lr}
	switch (clock_source) {
    777e:	2808      	cmp	r0, #8
    7780:	d806      	bhi.n	7790 <system_clock_source_enable+0x14>
    7782:	f001 fa03 	bl	8b8c <__gnu_thumb1_case_uqi>
    7786:	0514      	.short	0x0514
    7788:	1a0e0c05 	.word	0x1a0e0c05
    778c:	2007      	.short	0x2007
    778e:	23          	.byte	0x23
    778f:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
    7790:	2017      	movs	r0, #23
}
    7792:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    7794:	2302      	movs	r3, #2
    7796:	4a10      	ldr	r2, [pc, #64]	; (77d8 <system_clock_source_enable+0x5c>)
    7798:	6a11      	ldr	r1, [r2, #32]
    779a:	430b      	orrs	r3, r1
    779c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    779e:	2000      	movs	r0, #0
    77a0:	e7f7      	b.n	7792 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    77a2:	2302      	movs	r3, #2
    77a4:	4a0c      	ldr	r2, [pc, #48]	; (77d8 <system_clock_source_enable+0x5c>)
    77a6:	6991      	ldr	r1, [r2, #24]
    77a8:	430b      	orrs	r3, r1
    77aa:	6193      	str	r3, [r2, #24]
    77ac:	e7f7      	b.n	779e <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    77ae:	2302      	movs	r3, #2
    77b0:	4a09      	ldr	r2, [pc, #36]	; (77d8 <system_clock_source_enable+0x5c>)
    77b2:	8a11      	ldrh	r1, [r2, #16]
    77b4:	430b      	orrs	r3, r1
    77b6:	8213      	strh	r3, [r2, #16]
    77b8:	e7f1      	b.n	779e <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    77ba:	2302      	movs	r3, #2
    77bc:	4a06      	ldr	r2, [pc, #24]	; (77d8 <system_clock_source_enable+0x5c>)
    77be:	8a91      	ldrh	r1, [r2, #20]
    77c0:	430b      	orrs	r3, r1
    77c2:	8293      	strh	r3, [r2, #20]
    77c4:	e7eb      	b.n	779e <system_clock_source_enable+0x22>
    77c6:	4b05      	ldr	r3, [pc, #20]	; (77dc <system_clock_source_enable+0x60>)
    77c8:	4798      	blx	r3
    77ca:	e7e2      	b.n	7792 <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    77cc:	2302      	movs	r3, #2
    77ce:	4a04      	ldr	r2, [pc, #16]	; (77e0 <system_clock_source_enable+0x64>)
    77d0:	7811      	ldrb	r1, [r2, #0]
    77d2:	430b      	orrs	r3, r1
    77d4:	7013      	strb	r3, [r2, #0]
    77d6:	e7e2      	b.n	779e <system_clock_source_enable+0x22>
    77d8:	40000800 	.word	0x40000800
    77dc:	00007561 	.word	0x00007561
    77e0:	40000844 	.word	0x40000844

000077e4 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    77e4:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    77e6:	221e      	movs	r2, #30
{
    77e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    77ea:	495e      	ldr	r1, [pc, #376]	; (7964 <system_clock_init+0x180>)
    77ec:	00db      	lsls	r3, r3, #3
    77ee:	485e      	ldr	r0, [pc, #376]	; (7968 <system_clock_init+0x184>)
    77f0:	608b      	str	r3, [r1, #8]
    77f2:	6843      	ldr	r3, [r0, #4]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    77f4:	2500      	movs	r5, #0
    77f6:	4393      	bics	r3, r2
    77f8:	001a      	movs	r2, r3
    77fa:	2304      	movs	r3, #4
    77fc:	4313      	orrs	r3, r2
    77fe:	6043      	str	r3, [r0, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    7800:	2302      	movs	r3, #2
{
    7802:	b091      	sub	sp, #68	; 0x44
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    7804:	ac0b      	add	r4, sp, #44	; 0x2c
    7806:	7023      	strb	r3, [r4, #0]
    7808:	9101      	str	r1, [sp, #4]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    780a:	b2e8      	uxtb	r0, r5
    780c:	0021      	movs	r1, r4
    780e:	4b57      	ldr	r3, [pc, #348]	; (796c <system_clock_init+0x188>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7810:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    7812:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7814:	2d25      	cmp	r5, #37	; 0x25
    7816:	d1f8      	bne.n	780a <system_clock_init+0x26>
	config->frequency           = 32768UL;
    7818:	2280      	movs	r2, #128	; 0x80
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    781a:	a807      	add	r0, sp, #28
    781c:	2300      	movs	r3, #0
	config->frequency           = 32768UL;
    781e:	0212      	lsls	r2, r2, #8
    7820:	6082      	str	r2, [r0, #8]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    7822:	2106      	movs	r1, #6
	config->enable_32khz_output = true;
    7824:	2201      	movs	r2, #1
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    7826:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    7828:	7083      	strb	r3, [r0, #2]
	config->enable_1khz_output  = false;
    782a:	70c3      	strb	r3, [r0, #3]
	config->write_once          = false;
    782c:	7383      	strb	r3, [r0, #14]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    782e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    7830:	4b4f      	ldr	r3, [pc, #316]	; (7970 <system_clock_init+0x18c>)
	config->enable_32khz_output = true;
    7832:	7102      	strb	r2, [r0, #4]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    7834:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    7836:	7302      	strb	r2, [r0, #12]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    7838:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    783a:	4b4e      	ldr	r3, [pc, #312]	; (7974 <system_clock_init+0x190>)
    783c:	2005      	movs	r0, #5
    783e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    7840:	2302      	movs	r3, #2
    7842:	9a01      	ldr	r2, [sp, #4]
    7844:	68d2      	ldr	r2, [r2, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    7846:	421a      	tst	r2, r3
    7848:	d0fb      	beq.n	7842 <system_clock_init+0x5e>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    784a:	2300      	movs	r3, #0
	config->fine_value      = 0xff / 4; /* Midpoint */
    784c:	223f      	movs	r2, #63	; 0x3f
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    784e:	8063      	strh	r3, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    7850:	80a3      	strh	r3, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    7852:	71a3      	strb	r3, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    7854:	71e3      	strb	r3, [r4, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    7856:	8162      	strh	r2, [r4, #10]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    7858:	7063      	strb	r3, [r4, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    785a:	3a3b      	subs	r2, #59	; 0x3b
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    785c:	4b46      	ldr	r3, [pc, #280]	; (7978 <system_clock_init+0x194>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    785e:	7022      	strb	r2, [r4, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    7860:	681b      	ldr	r3, [r3, #0]
    7862:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    7864:	2b3f      	cmp	r3, #63	; 0x3f
    7866:	d100      	bne.n	786a <system_clock_init+0x86>
		coarse = 0x1f;
    7868:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    786a:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    786c:	23b7      	movs	r3, #183	; 0xb7
    786e:	00db      	lsls	r3, r3, #3
    7870:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    7872:	2303      	movs	r3, #3
    7874:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    7876:	231f      	movs	r3, #31

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    7878:	2500      	movs	r5, #0
	config->on_demand       = true;
    787a:	2601      	movs	r6, #1
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    787c:	81e3      	strh	r3, [r4, #14]
	system_clock_source_dfll_set_config(&dfll_conf);
    787e:	0020      	movs	r0, r4
    7880:	4b3e      	ldr	r3, [pc, #248]	; (797c <system_clock_init+0x198>)
    7882:	4798      	blx	r3
    7884:	a803      	add	r0, sp, #12
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    7886:	4b3e      	ldr	r3, [pc, #248]	; (7980 <system_clock_init+0x19c>)
    7888:	7086      	strb	r6, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    788a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    788c:	7046      	strb	r6, [r0, #1]
	system_clock_source_osc8m_set_config(&osc8m_conf);
    788e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    7890:	4b38      	ldr	r3, [pc, #224]	; (7974 <system_clock_init+0x190>)
    7892:	2006      	movs	r0, #6
    7894:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    7896:	4b3b      	ldr	r3, [pc, #236]	; (7984 <system_clock_init+0x1a0>)
    7898:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    789a:	2305      	movs	r3, #5
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    789c:	ac04      	add	r4, sp, #16
    789e:	0021      	movs	r1, r4
    78a0:	7023      	strb	r3, [r4, #0]
    78a2:	0030      	movs	r0, r6
    78a4:	4b38      	ldr	r3, [pc, #224]	; (7988 <system_clock_init+0x1a4>)
    78a6:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    78a8:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    78aa:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    78ac:	7265      	strb	r5, [r4, #9]
    78ae:	4798      	blx	r3
    78b0:	4f36      	ldr	r7, [pc, #216]	; (798c <system_clock_init+0x1a8>)
    78b2:	0030      	movs	r0, r6
    78b4:	47b8      	blx	r7
	config->source_clock       = GCLK_SOURCE_OSC8M;
    78b6:	2306      	movs	r3, #6
    78b8:	7023      	strb	r3, [r4, #0]
    78ba:	2310      	movs	r3, #16
    78bc:	0021      	movs	r1, r4
    78be:	6063      	str	r3, [r4, #4]
    78c0:	2003      	movs	r0, #3
    78c2:	4b31      	ldr	r3, [pc, #196]	; (7988 <system_clock_init+0x1a4>)
	config->high_when_disabled = false;
    78c4:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    78c6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    78c8:	7265      	strb	r5, [r4, #9]
    78ca:	4798      	blx	r3
    78cc:	2003      	movs	r0, #3
    78ce:	47b8      	blx	r7
    78d0:	2303      	movs	r3, #3
    78d2:	7023      	strb	r3, [r4, #0]
    78d4:	2320      	movs	r3, #32
    78d6:	0021      	movs	r1, r4
    78d8:	6063      	str	r3, [r4, #4]
    78da:	2004      	movs	r0, #4
    78dc:	4b2a      	ldr	r3, [pc, #168]	; (7988 <system_clock_init+0x1a4>)
	config->high_when_disabled = false;
    78de:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    78e0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    78e2:	7265      	strb	r5, [r4, #9]
    78e4:	4798      	blx	r3
    78e6:	2004      	movs	r0, #4
    78e8:	47b8      	blx	r7
    78ea:	2307      	movs	r3, #7
    78ec:	0021      	movs	r1, r4
    78ee:	7023      	strb	r3, [r4, #0]
    78f0:	2005      	movs	r0, #5
    78f2:	4b25      	ldr	r3, [pc, #148]	; (7988 <system_clock_init+0x1a4>)
	config->division_factor    = 1;
    78f4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    78f6:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    78f8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    78fa:	7265      	strb	r5, [r4, #9]
    78fc:	4798      	blx	r3
    78fe:	2005      	movs	r0, #5
    7900:	47b8      	blx	r7
	config->source_clock       = GCLK_SOURCE_OSC8M;
    7902:	2306      	movs	r3, #6
    7904:	0021      	movs	r1, r4
    7906:	7023      	strb	r3, [r4, #0]
    7908:	2006      	movs	r0, #6
    790a:	4b1f      	ldr	r3, [pc, #124]	; (7988 <system_clock_init+0x1a4>)
	config->division_factor    = 1;
    790c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    790e:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    7910:	7265      	strb	r5, [r4, #9]
    7912:	7226      	strb	r6, [r4, #8]
    7914:	4798      	blx	r3
    7916:	2006      	movs	r0, #6
    7918:	47b8      	blx	r7
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    791a:	0021      	movs	r1, r4
    791c:	0028      	movs	r0, r5
    791e:	4b13      	ldr	r3, [pc, #76]	; (796c <system_clock_init+0x188>)
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    7920:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    7922:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    7924:	0028      	movs	r0, r5
    7926:	4b1a      	ldr	r3, [pc, #104]	; (7990 <system_clock_init+0x1ac>)
    7928:	4798      	blx	r3
    792a:	4b1a      	ldr	r3, [pc, #104]	; (7994 <system_clock_init+0x1b0>)
    792c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    792e:	22d0      	movs	r2, #208	; 0xd0
    7930:	9b01      	ldr	r3, [sp, #4]
    7932:	68db      	ldr	r3, [r3, #12]
    7934:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    7936:	2bd0      	cmp	r3, #208	; 0xd0
    7938:	d1fa      	bne.n	7930 <system_clock_init+0x14c>
	PM->CPUSEL.reg = (uint32_t)divider;
    793a:	2500      	movs	r5, #0
    793c:	4b16      	ldr	r3, [pc, #88]	; (7998 <system_clock_init+0x1b4>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    793e:	2207      	movs	r2, #7
    7940:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    7942:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    7944:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    7946:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
    7948:	2301      	movs	r3, #1
    794a:	0021      	movs	r1, r4
    794c:	6063      	str	r3, [r4, #4]
    794e:	7223      	strb	r3, [r4, #8]
    7950:	0028      	movs	r0, r5
    7952:	4b0d      	ldr	r3, [pc, #52]	; (7988 <system_clock_init+0x1a4>)
    7954:	7022      	strb	r2, [r4, #0]
	config->high_when_disabled = false;
    7956:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    7958:	7265      	strb	r5, [r4, #9]
    795a:	4798      	blx	r3
    795c:	0028      	movs	r0, r5
    795e:	47b8      	blx	r7
#endif
}
    7960:	b011      	add	sp, #68	; 0x44
    7962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7964:	40000800 	.word	0x40000800
    7968:	41004000 	.word	0x41004000
    796c:	00007bbd 	.word	0x00007bbd
    7970:	00007665 	.word	0x00007665
    7974:	0000777d 	.word	0x0000777d
    7978:	00806024 	.word	0x00806024
    797c:	00007701 	.word	0x00007701
    7980:	00007629 	.word	0x00007629
    7984:	000079a9 	.word	0x000079a9
    7988:	000079c9 	.word	0x000079c9
    798c:	00007a6d 	.word	0x00007a6d
    7990:	00007b35 	.word	0x00007b35
    7994:	00007561 	.word	0x00007561
    7998:	40000400 	.word	0x40000400

0000799c <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    799c:	4b01      	ldr	r3, [pc, #4]	; (79a4 <system_gclk_is_syncing+0x8>)
    799e:	7858      	ldrb	r0, [r3, #1]
    79a0:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    79a2:	4770      	bx	lr
    79a4:	40000c00 	.word	0x40000c00

000079a8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    79a8:	2308      	movs	r3, #8
    79aa:	4a05      	ldr	r2, [pc, #20]	; (79c0 <system_gclk_init+0x18>)
    79ac:	6991      	ldr	r1, [r2, #24]
    79ae:	430b      	orrs	r3, r1
    79b0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    79b2:	2301      	movs	r3, #1
    79b4:	4a03      	ldr	r2, [pc, #12]	; (79c4 <system_gclk_init+0x1c>)
    79b6:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    79b8:	7811      	ldrb	r1, [r2, #0]
    79ba:	4219      	tst	r1, r3
    79bc:	d1fc      	bne.n	79b8 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    79be:	4770      	bx	lr
    79c0:	40000400 	.word	0x40000400
    79c4:	40000c00 	.word	0x40000c00

000079c8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    79c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    79ca:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    79cc:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    79ce:	0224      	lsls	r4, r4, #8
{
    79d0:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    79d2:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    79d4:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    79d6:	2b00      	cmp	r3, #0
    79d8:	d002      	beq.n	79e0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    79da:	2380      	movs	r3, #128	; 0x80
    79dc:	02db      	lsls	r3, r3, #11
    79de:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    79e0:	7a4b      	ldrb	r3, [r1, #9]
    79e2:	2b00      	cmp	r3, #0
    79e4:	d002      	beq.n	79ec <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    79e6:	2380      	movs	r3, #128	; 0x80
    79e8:	031b      	lsls	r3, r3, #12
    79ea:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    79ec:	684b      	ldr	r3, [r1, #4]
    79ee:	2b01      	cmp	r3, #1
    79f0:	d912      	bls.n	7a18 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    79f2:	1e5d      	subs	r5, r3, #1
    79f4:	401d      	ands	r5, r3
    79f6:	2202      	movs	r2, #2
    79f8:	2d00      	cmp	r5, #0
    79fa:	d006      	beq.n	7a0a <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    79fc:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    79fe:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    7a00:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7a02:	029b      	lsls	r3, r3, #10
    7a04:	e007      	b.n	7a16 <system_gclk_gen_set_config+0x4e>
				div2_count++;
    7a06:	3501      	adds	r5, #1
						mask <<= 1) {
    7a08:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    7a0a:	429a      	cmp	r2, r3
    7a0c:	d3fb      	bcc.n	7a06 <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7a0e:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    7a10:	022d      	lsls	r5, r5, #8
    7a12:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7a14:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7a16:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7a18:	7a0b      	ldrb	r3, [r1, #8]
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	d002      	beq.n	7a24 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    7a1e:	2380      	movs	r3, #128	; 0x80
    7a20:	039b      	lsls	r3, r3, #14
    7a22:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    7a24:	4f0c      	ldr	r7, [pc, #48]	; (7a58 <system_gclk_gen_set_config+0x90>)
    7a26:	47b8      	blx	r7
    7a28:	2800      	cmp	r0, #0
    7a2a:	d1fb      	bne.n	7a24 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    7a2c:	4b0b      	ldr	r3, [pc, #44]	; (7a5c <system_gclk_gen_set_config+0x94>)
    7a2e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7a30:	4b0b      	ldr	r3, [pc, #44]	; (7a60 <system_gclk_gen_set_config+0x98>)
    7a32:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    7a34:	47b8      	blx	r7
    7a36:	2800      	cmp	r0, #0
    7a38:	d1fc      	bne.n	7a34 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    7a3a:	4b0a      	ldr	r3, [pc, #40]	; (7a64 <system_gclk_gen_set_config+0x9c>)
    7a3c:	609d      	str	r5, [r3, #8]
    7a3e:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    7a40:	47b8      	blx	r7
    7a42:	2800      	cmp	r0, #0
    7a44:	d1fc      	bne.n	7a40 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    7a46:	2280      	movs	r2, #128	; 0x80
    7a48:	686b      	ldr	r3, [r5, #4]
    7a4a:	0252      	lsls	r2, r2, #9
    7a4c:	4013      	ands	r3, r2
    7a4e:	431c      	orrs	r4, r3
    7a50:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    7a52:	4b05      	ldr	r3, [pc, #20]	; (7a68 <system_gclk_gen_set_config+0xa0>)
    7a54:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    7a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a58:	0000799d 	.word	0x0000799d
    7a5c:	000074ed 	.word	0x000074ed
    7a60:	40000c08 	.word	0x40000c08
    7a64:	40000c00 	.word	0x40000c00
    7a68:	00007521 	.word	0x00007521

00007a6c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    7a6c:	b570      	push	{r4, r5, r6, lr}
    7a6e:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    7a70:	4c09      	ldr	r4, [pc, #36]	; (7a98 <system_gclk_gen_enable+0x2c>)
    7a72:	47a0      	blx	r4
    7a74:	2800      	cmp	r0, #0
    7a76:	d1fb      	bne.n	7a70 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    7a78:	4b08      	ldr	r3, [pc, #32]	; (7a9c <system_gclk_gen_enable+0x30>)
    7a7a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7a7c:	4b08      	ldr	r3, [pc, #32]	; (7aa0 <system_gclk_gen_enable+0x34>)
    7a7e:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    7a80:	47a0      	blx	r4
    7a82:	2800      	cmp	r0, #0
    7a84:	d1fc      	bne.n	7a80 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    7a86:	2380      	movs	r3, #128	; 0x80
    7a88:	4a06      	ldr	r2, [pc, #24]	; (7aa4 <system_gclk_gen_enable+0x38>)
    7a8a:	025b      	lsls	r3, r3, #9
    7a8c:	6851      	ldr	r1, [r2, #4]
    7a8e:	430b      	orrs	r3, r1
    7a90:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    7a92:	4b05      	ldr	r3, [pc, #20]	; (7aa8 <system_gclk_gen_enable+0x3c>)
    7a94:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    7a96:	bd70      	pop	{r4, r5, r6, pc}
    7a98:	0000799d 	.word	0x0000799d
    7a9c:	000074ed 	.word	0x000074ed
    7aa0:	40000c04 	.word	0x40000c04
    7aa4:	40000c00 	.word	0x40000c00
    7aa8:	00007521 	.word	0x00007521

00007aac <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7aae:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    7ab0:	4e18      	ldr	r6, [pc, #96]	; (7b14 <system_gclk_gen_get_hz+0x68>)
    7ab2:	47b0      	blx	r6
    7ab4:	2800      	cmp	r0, #0
    7ab6:	d1fb      	bne.n	7ab0 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    7ab8:	4b17      	ldr	r3, [pc, #92]	; (7b18 <system_gclk_gen_get_hz+0x6c>)
    7aba:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7abc:	4b17      	ldr	r3, [pc, #92]	; (7b1c <system_gclk_gen_get_hz+0x70>)
    7abe:	701f      	strb	r7, [r3, #0]
    7ac0:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    7ac2:	47b0      	blx	r6
    7ac4:	2800      	cmp	r0, #0
    7ac6:	d1fc      	bne.n	7ac2 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7ac8:	4d15      	ldr	r5, [pc, #84]	; (7b20 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7aca:	4b16      	ldr	r3, [pc, #88]	; (7b24 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7acc:	6868      	ldr	r0, [r5, #4]
    7ace:	04c0      	lsls	r0, r0, #19
    7ad0:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7ad2:	4798      	blx	r3
    7ad4:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7ad6:	9b01      	ldr	r3, [sp, #4]
    7ad8:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    7ada:	686b      	ldr	r3, [r5, #4]
    7adc:	02db      	lsls	r3, r3, #11
    7ade:	0fdb      	lsrs	r3, r3, #31
    7ae0:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7ae2:	4b11      	ldr	r3, [pc, #68]	; (7b28 <system_gclk_gen_get_hz+0x7c>)
    7ae4:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    7ae6:	47b0      	blx	r6
    7ae8:	2800      	cmp	r0, #0
    7aea:	d1fc      	bne.n	7ae6 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    7aec:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    7aee:	4b0f      	ldr	r3, [pc, #60]	; (7b2c <system_gclk_gen_get_hz+0x80>)
    7af0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7af2:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    7af4:	022d      	lsls	r5, r5, #8
    7af6:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    7af8:	2b00      	cmp	r3, #0
    7afa:	d108      	bne.n	7b0e <system_gclk_gen_get_hz+0x62>
    7afc:	2d01      	cmp	r5, #1
    7afe:	d904      	bls.n	7b0a <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    7b00:	0020      	movs	r0, r4
    7b02:	0029      	movs	r1, r5
    7b04:	4b0a      	ldr	r3, [pc, #40]	; (7b30 <system_gclk_gen_get_hz+0x84>)
    7b06:	4798      	blx	r3
    7b08:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    7b0a:	0020      	movs	r0, r4
    7b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    7b0e:	3501      	adds	r5, #1
    7b10:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    7b12:	e7fa      	b.n	7b0a <system_gclk_gen_get_hz+0x5e>
    7b14:	0000799d 	.word	0x0000799d
    7b18:	000074ed 	.word	0x000074ed
    7b1c:	40000c04 	.word	0x40000c04
    7b20:	40000c00 	.word	0x40000c00
    7b24:	00007599 	.word	0x00007599
    7b28:	40000c08 	.word	0x40000c08
    7b2c:	00007521 	.word	0x00007521
    7b30:	00008bb5 	.word	0x00008bb5

00007b34 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7b34:	b510      	push	{r4, lr}
    7b36:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7b38:	4b06      	ldr	r3, [pc, #24]	; (7b54 <system_gclk_chan_enable+0x20>)
    7b3a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7b3c:	4b06      	ldr	r3, [pc, #24]	; (7b58 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    7b3e:	4a07      	ldr	r2, [pc, #28]	; (7b5c <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7b40:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    7b42:	2380      	movs	r3, #128	; 0x80
    7b44:	8851      	ldrh	r1, [r2, #2]
    7b46:	01db      	lsls	r3, r3, #7
    7b48:	430b      	orrs	r3, r1
    7b4a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    7b4c:	4b04      	ldr	r3, [pc, #16]	; (7b60 <system_gclk_chan_enable+0x2c>)
    7b4e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    7b50:	bd10      	pop	{r4, pc}
    7b52:	46c0      	nop			; (mov r8, r8)
    7b54:	000074ed 	.word	0x000074ed
    7b58:	40000c02 	.word	0x40000c02
    7b5c:	40000c00 	.word	0x40000c00
    7b60:	00007521 	.word	0x00007521

00007b64 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7b64:	b510      	push	{r4, lr}
    7b66:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7b68:	4b0e      	ldr	r3, [pc, #56]	; (7ba4 <system_gclk_chan_disable+0x40>)
    7b6a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7b6c:	4b0e      	ldr	r3, [pc, #56]	; (7ba8 <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    7b6e:	4a0f      	ldr	r2, [pc, #60]	; (7bac <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7b70:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    7b72:	4b0f      	ldr	r3, [pc, #60]	; (7bb0 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    7b74:	4c0f      	ldr	r4, [pc, #60]	; (7bb4 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    7b76:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    7b78:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    7b7a:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    7b7c:	4011      	ands	r1, r2
    7b7e:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    7b80:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    7b82:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    7b84:	4021      	ands	r1, r4
    7b86:	8059      	strh	r1, [r3, #2]
    7b88:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    7b8a:	2280      	movs	r2, #128	; 0x80
    7b8c:	01d2      	lsls	r2, r2, #7
    7b8e:	885c      	ldrh	r4, [r3, #2]
    7b90:	4214      	tst	r4, r2
    7b92:	d1fc      	bne.n	7b8e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    7b94:	885a      	ldrh	r2, [r3, #2]
    7b96:	0200      	lsls	r0, r0, #8
    7b98:	400a      	ands	r2, r1
    7b9a:	4302      	orrs	r2, r0
    7b9c:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    7b9e:	4b06      	ldr	r3, [pc, #24]	; (7bb8 <system_gclk_chan_disable+0x54>)
    7ba0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    7ba2:	bd10      	pop	{r4, pc}
    7ba4:	000074ed 	.word	0x000074ed
    7ba8:	40000c02 	.word	0x40000c02
    7bac:	fffff0ff 	.word	0xfffff0ff
    7bb0:	40000c00 	.word	0x40000c00
    7bb4:	ffffbfff 	.word	0xffffbfff
    7bb8:	00007521 	.word	0x00007521

00007bbc <system_gclk_chan_set_config>:
{
    7bbc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    7bbe:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    7bc0:	4b03      	ldr	r3, [pc, #12]	; (7bd0 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    7bc2:	0224      	lsls	r4, r4, #8
    7bc4:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    7bc6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    7bc8:	4b02      	ldr	r3, [pc, #8]	; (7bd4 <system_gclk_chan_set_config+0x18>)
    7bca:	b2a4      	uxth	r4, r4
    7bcc:	805c      	strh	r4, [r3, #2]
}
    7bce:	bd10      	pop	{r4, pc}
    7bd0:	00007b65 	.word	0x00007b65
    7bd4:	40000c00 	.word	0x40000c00

00007bd8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7bd8:	b510      	push	{r4, lr}
    7bda:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7bdc:	4b06      	ldr	r3, [pc, #24]	; (7bf8 <system_gclk_chan_get_hz+0x20>)
    7bde:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7be0:	4b06      	ldr	r3, [pc, #24]	; (7bfc <system_gclk_chan_get_hz+0x24>)
    7be2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    7be4:	4b06      	ldr	r3, [pc, #24]	; (7c00 <system_gclk_chan_get_hz+0x28>)
    7be6:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    7be8:	4b06      	ldr	r3, [pc, #24]	; (7c04 <system_gclk_chan_get_hz+0x2c>)
    7bea:	0524      	lsls	r4, r4, #20
    7bec:	0f24      	lsrs	r4, r4, #28
    7bee:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7bf0:	0020      	movs	r0, r4
    7bf2:	4b05      	ldr	r3, [pc, #20]	; (7c08 <system_gclk_chan_get_hz+0x30>)
    7bf4:	4798      	blx	r3
}
    7bf6:	bd10      	pop	{r4, pc}
    7bf8:	000074ed 	.word	0x000074ed
    7bfc:	40000c02 	.word	0x40000c02
    7c00:	40000c00 	.word	0x40000c00
    7c04:	00007521 	.word	0x00007521
    7c08:	00007aad 	.word	0x00007aad

00007c0c <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    7c0c:	78d3      	ldrb	r3, [r2, #3]
{
    7c0e:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    7c10:	2b00      	cmp	r3, #0
    7c12:	d135      	bne.n	7c80 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7c14:	7814      	ldrb	r4, [r2, #0]
    7c16:	2c80      	cmp	r4, #128	; 0x80
    7c18:	d003      	beq.n	7c22 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7c1a:	2380      	movs	r3, #128	; 0x80
    7c1c:	0624      	lsls	r4, r4, #24
    7c1e:	025b      	lsls	r3, r3, #9
    7c20:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7c22:	2502      	movs	r5, #2
    7c24:	7854      	ldrb	r4, [r2, #1]
    7c26:	43ac      	bics	r4, r5
    7c28:	d106      	bne.n	7c38 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7c2a:	7894      	ldrb	r4, [r2, #2]
    7c2c:	2c00      	cmp	r4, #0
    7c2e:	d124      	bne.n	7c7a <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    7c30:	2480      	movs	r4, #128	; 0x80
    7c32:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7c34:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7c36:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7c38:	7854      	ldrb	r4, [r2, #1]
    7c3a:	3c01      	subs	r4, #1
    7c3c:	2c01      	cmp	r4, #1
    7c3e:	d801      	bhi.n	7c44 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7c40:	4c12      	ldr	r4, [pc, #72]	; (7c8c <_system_pinmux_config+0x80>)
    7c42:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7c44:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7c46:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7c48:	05e4      	lsls	r4, r4, #23
    7c4a:	432c      	orrs	r4, r5
    7c4c:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7c4e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7c50:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7c52:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7c54:	0624      	lsls	r4, r4, #24
    7c56:	432c      	orrs	r4, r5
    7c58:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7c5a:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7c5c:	78d4      	ldrb	r4, [r2, #3]
    7c5e:	2c00      	cmp	r4, #0
    7c60:	d10a      	bne.n	7c78 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7c62:	035b      	lsls	r3, r3, #13
    7c64:	d503      	bpl.n	7c6e <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7c66:	7893      	ldrb	r3, [r2, #2]
    7c68:	2b01      	cmp	r3, #1
    7c6a:	d10c      	bne.n	7c86 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    7c6c:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7c6e:	7853      	ldrb	r3, [r2, #1]
    7c70:	3b01      	subs	r3, #1
    7c72:	2b01      	cmp	r3, #1
    7c74:	d800      	bhi.n	7c78 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    7c76:	6081      	str	r1, [r0, #8]
		}
	}
}
    7c78:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7c7a:	24c0      	movs	r4, #192	; 0xc0
    7c7c:	02e4      	lsls	r4, r4, #11
    7c7e:	e7d9      	b.n	7c34 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    7c80:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    7c82:	2300      	movs	r3, #0
    7c84:	e7de      	b.n	7c44 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    7c86:	6141      	str	r1, [r0, #20]
    7c88:	e7f1      	b.n	7c6e <_system_pinmux_config+0x62>
    7c8a:	46c0      	nop			; (mov r8, r8)
    7c8c:	fffbffff 	.word	0xfffbffff

00007c90 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7c90:	b510      	push	{r4, lr}
    7c92:	0003      	movs	r3, r0
    7c94:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);
    7c96:	0944      	lsrs	r4, r0, #5
	if (port_index < PORT_INST_NUM) {
    7c98:	09c1      	lsrs	r1, r0, #7
		return NULL;
    7c9a:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    7c9c:	4281      	cmp	r1, r0
    7c9e:	d102      	bne.n	7ca6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    7ca0:	4904      	ldr	r1, [pc, #16]	; (7cb4 <system_pinmux_pin_set_config+0x24>)
    7ca2:	01e0      	lsls	r0, r4, #7
    7ca4:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7ca6:	211f      	movs	r1, #31
    7ca8:	400b      	ands	r3, r1
    7caa:	391e      	subs	r1, #30
    7cac:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    7cae:	4b02      	ldr	r3, [pc, #8]	; (7cb8 <system_pinmux_pin_set_config+0x28>)
    7cb0:	4798      	blx	r3
}
    7cb2:	bd10      	pop	{r4, pc}
    7cb4:	41004400 	.word	0x41004400
    7cb8:	00007c0d 	.word	0x00007c0d

00007cbc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    7cbc:	4770      	bx	lr
	...

00007cc0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7cc0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7cc2:	4b05      	ldr	r3, [pc, #20]	; (7cd8 <system_init+0x18>)
    7cc4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7cc6:	4b05      	ldr	r3, [pc, #20]	; (7cdc <system_init+0x1c>)
    7cc8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7cca:	4b05      	ldr	r3, [pc, #20]	; (7ce0 <system_init+0x20>)
    7ccc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7cce:	4b05      	ldr	r3, [pc, #20]	; (7ce4 <system_init+0x24>)
    7cd0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7cd2:	4b05      	ldr	r3, [pc, #20]	; (7ce8 <system_init+0x28>)
    7cd4:	4798      	blx	r3
}
    7cd6:	bd10      	pop	{r4, pc}
    7cd8:	000077e5 	.word	0x000077e5
    7cdc:	000074e9 	.word	0x000074e9
    7ce0:	00007cbd 	.word	0x00007cbd
    7ce4:	00001ee9 	.word	0x00001ee9
    7ce8:	00007cbd 	.word	0x00007cbd

00007cec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    7cec:	e7fe      	b.n	7cec <Dummy_Handler>
	...

00007cf0 <Reset_Handler>:
        if (pSrc != pDest) {
    7cf0:	4821      	ldr	r0, [pc, #132]	; (7d78 <Reset_Handler+0x88>)
    7cf2:	4922      	ldr	r1, [pc, #136]	; (7d7c <Reset_Handler+0x8c>)
{
    7cf4:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    7cf6:	4288      	cmp	r0, r1
    7cf8:	d004      	beq.n	7d04 <Reset_Handler+0x14>
    7cfa:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    7cfc:	4c20      	ldr	r4, [pc, #128]	; (7d80 <Reset_Handler+0x90>)
    7cfe:	18ca      	adds	r2, r1, r3
    7d00:	42a2      	cmp	r2, r4
    7d02:	d332      	bcc.n	7d6a <Reset_Handler+0x7a>
                *pDest++ = 0;
    7d04:	2100      	movs	r1, #0
    7d06:	4b1f      	ldr	r3, [pc, #124]	; (7d84 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    7d08:	4a1f      	ldr	r2, [pc, #124]	; (7d88 <Reset_Handler+0x98>)
    7d0a:	4293      	cmp	r3, r2
    7d0c:	d331      	bcc.n	7d72 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7d0e:	21ff      	movs	r1, #255	; 0xff
    7d10:	4b1e      	ldr	r3, [pc, #120]	; (7d8c <Reset_Handler+0x9c>)
    7d12:	4a1f      	ldr	r2, [pc, #124]	; (7d90 <Reset_Handler+0xa0>)
    7d14:	438b      	bics	r3, r1
    7d16:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    7d18:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    7d1a:	250c      	movs	r5, #12
    7d1c:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    7d1e:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    7d20:	4b1c      	ldr	r3, [pc, #112]	; (7d94 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    7d22:	481d      	ldr	r0, [pc, #116]	; (7d98 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    7d24:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    7d26:	78c3      	ldrb	r3, [r0, #3]
    7d28:	39fc      	subs	r1, #252	; 0xfc
    7d2a:	438b      	bics	r3, r1
    7d2c:	4313      	orrs	r3, r2
    7d2e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    7d30:	78c3      	ldrb	r3, [r0, #3]
    7d32:	43ab      	bics	r3, r5
    7d34:	4323      	orrs	r3, r4
    7d36:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    7d38:	4b18      	ldr	r3, [pc, #96]	; (7d9c <Reset_Handler+0xac>)
    7d3a:	7b98      	ldrb	r0, [r3, #14]
    7d3c:	43b0      	bics	r0, r6
    7d3e:	0006      	movs	r6, r0
    7d40:	2020      	movs	r0, #32
    7d42:	4330      	orrs	r0, r6
    7d44:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    7d46:	7b98      	ldrb	r0, [r3, #14]
    7d48:	43a8      	bics	r0, r5
    7d4a:	4304      	orrs	r4, r0
    7d4c:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    7d4e:	7b98      	ldrb	r0, [r3, #14]
    7d50:	4388      	bics	r0, r1
    7d52:	4302      	orrs	r2, r0
    7d54:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    7d56:	2380      	movs	r3, #128	; 0x80
    7d58:	4a11      	ldr	r2, [pc, #68]	; (7da0 <Reset_Handler+0xb0>)
    7d5a:	6851      	ldr	r1, [r2, #4]
    7d5c:	430b      	orrs	r3, r1
    7d5e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    7d60:	4b10      	ldr	r3, [pc, #64]	; (7da4 <Reset_Handler+0xb4>)
    7d62:	4798      	blx	r3
        main();
    7d64:	4b10      	ldr	r3, [pc, #64]	; (7da8 <Reset_Handler+0xb8>)
    7d66:	4798      	blx	r3
    7d68:	e7fe      	b.n	7d68 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    7d6a:	58c5      	ldr	r5, [r0, r3]
    7d6c:	3304      	adds	r3, #4
    7d6e:	6015      	str	r5, [r2, #0]
    7d70:	e7c5      	b.n	7cfe <Reset_Handler+0xe>
                *pDest++ = 0;
    7d72:	c302      	stmia	r3!, {r1}
    7d74:	e7c9      	b.n	7d0a <Reset_Handler+0x1a>
    7d76:	46c0      	nop			; (mov r8, r8)
    7d78:	0000a728 	.word	0x0000a728
    7d7c:	20000000 	.word	0x20000000
    7d80:	200002f4 	.word	0x200002f4
    7d84:	200002f4 	.word	0x200002f4
    7d88:	20001180 	.word	0x20001180
    7d8c:	00000000 	.word	0x00000000
    7d90:	e000ed00 	.word	0xe000ed00
    7d94:	410070fc 	.word	0x410070fc
    7d98:	41005000 	.word	0x41005000
    7d9c:	41004800 	.word	0x41004800
    7da0:	41004000 	.word	0x41004000
    7da4:	00009181 	.word	0x00009181
    7da8:	00008251 	.word	0x00008251

00007dac <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7dac:	4b05      	ldr	r3, [pc, #20]	; (7dc4 <_sbrk+0x18>)
{
    7dae:	0002      	movs	r2, r0
	if (heap == NULL) {
    7db0:	6819      	ldr	r1, [r3, #0]
    7db2:	2900      	cmp	r1, #0
    7db4:	d101      	bne.n	7dba <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    7db6:	4904      	ldr	r1, [pc, #16]	; (7dc8 <_sbrk+0x1c>)
    7db8:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
    7dba:	6818      	ldr	r0, [r3, #0]

	heap += incr;
    7dbc:	1882      	adds	r2, r0, r2
    7dbe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
}
    7dc0:	4770      	bx	lr
    7dc2:	46c0      	nop			; (mov r8, r8)
    7dc4:	20000b68 	.word	0x20000b68
    7dc8:	20003180 	.word	0x20003180

00007dcc <NVIC_SystemReset>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    7dcc:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    7dd0:	4a02      	ldr	r2, [pc, #8]	; (7ddc <NVIC_SystemReset+0x10>)
    7dd2:	4b03      	ldr	r3, [pc, #12]	; (7de0 <NVIC_SystemReset+0x14>)
    7dd4:	60da      	str	r2, [r3, #12]
    7dd6:	f3bf 8f4f 	dsb	sy
    7dda:	e7fe      	b.n	7dda <NVIC_SystemReset+0xe>
    7ddc:	05fa0004 	.word	0x05fa0004
    7de0:	e000ed00 	.word	0xe000ed00

00007de4 <configure_eeprom>:
}struct_audio_details_page;

void configure_eeprom(void);

void configure_eeprom(void)
{
    7de4:	b510      	push	{r4, lr}
	enum status_code error_code = eeprom_emulator_init();
    7de6:	4c07      	ldr	r4, [pc, #28]	; (7e04 <configure_eeprom+0x20>)
    7de8:	47a0      	blx	r4
	if (error_code == STATUS_ERR_NO_MEMORY)
    7dea:	2816      	cmp	r0, #22
    7dec:	d103      	bne.n	7df6 <configure_eeprom+0x12>
	{
		#ifdef LCD_SUPPORT
		lcd_printf("SET EEPROM FUSE");
    7dee:	4806      	ldr	r0, [pc, #24]	; (7e08 <configure_eeprom+0x24>)
    7df0:	4b06      	ldr	r3, [pc, #24]	; (7e0c <configure_eeprom+0x28>)
    7df2:	4798      	blx	r3
    7df4:	e7fe      	b.n	7df4 <configure_eeprom+0x10>
		while (true);
		#endif
	}
	else if (error_code != STATUS_OK)
    7df6:	2800      	cmp	r0, #0
    7df8:	d002      	beq.n	7e00 <configure_eeprom+0x1c>
	{
		eeprom_emulator_erase_memory();
    7dfa:	4b05      	ldr	r3, [pc, #20]	; (7e10 <configure_eeprom+0x2c>)
    7dfc:	4798      	blx	r3
		eeprom_emulator_init();
    7dfe:	47a0      	blx	r4
	}
}
    7e00:	bd10      	pop	{r4, pc}
    7e02:	46c0      	nop			; (mov r8, r8)
    7e04:	00007175 	.word	0x00007175
    7e08:	0000a40e 	.word	0x0000a40e
    7e0c:	00001429 	.word	0x00001429
    7e10:	00007241 	.word	0x00007241

00007e14 <Read_EEprom>:

uint8_t page_data[EEPROM_PAGE_SIZE];

void Read_EEprom(void);
void Read_EEprom(void)
{
    7e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configure_eeprom();
    7e16:	4b4b      	ldr	r3, [pc, #300]	; (7f44 <Read_EEprom+0x130>)
    7e18:	4798      	blx	r3
	eeprom_emulator_read_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    7e1a:	4c4b      	ldr	r4, [pc, #300]	; (7f48 <Read_EEprom+0x134>)
    7e1c:	4b4b      	ldr	r3, [pc, #300]	; (7f4c <Read_EEprom+0x138>)
    7e1e:	0021      	movs	r1, r4
    7e20:	2000      	movs	r0, #0
    7e22:	4798      	blx	r3
	memcpy(&bootloader_parameter,page_data,sizeof(bootloader_parameter));
    7e24:	4d4a      	ldr	r5, [pc, #296]	; (7f50 <Read_EEprom+0x13c>)
    7e26:	4b4b      	ldr	r3, [pc, #300]	; (7f54 <Read_EEprom+0x140>)
    7e28:	221c      	movs	r2, #28
    7e2a:	0021      	movs	r1, r4
    7e2c:	0028      	movs	r0, r5
    7e2e:	4798      	blx	r3
	if (bootloader_parameter.ucharFirst_Time_Write != 85)
    7e30:	792b      	ldrb	r3, [r5, #4]
    7e32:	2b55      	cmp	r3, #85	; 0x55
    7e34:	d01c      	beq.n	7e70 <Read_EEprom+0x5c>
	{
		bootloader_parameter.ulongintDiscard		   = 0;
    7e36:	2600      	movs	r6, #0
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
    7e38:	2355      	movs	r3, #85	; 0x55
		bootloader_parameter.firmware_update_process_completed = false;
		bootloader_parameter.firmware_update_error_code = 0;
		bootloader_parameter.retries= 0;
		
		
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
    7e3a:	4f47      	ldr	r7, [pc, #284]	; (7f58 <Read_EEprom+0x144>)
    7e3c:	2210      	movs	r2, #16
		bootloader_parameter.ucharFirst_Time_Write	   = 85;
    7e3e:	712b      	strb	r3, [r5, #4]
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
    7e40:	0031      	movs	r1, r6
    7e42:	4b46      	ldr	r3, [pc, #280]	; (7f5c <Read_EEprom+0x148>)
    7e44:	0038      	movs	r0, r7
		bootloader_parameter.ulongintDiscard		   = 0;
    7e46:	602e      	str	r6, [r5, #0]
		bootloader_parameter.firmware_download_pending = false;
    7e48:	716e      	strb	r6, [r5, #5]
		bootloader_parameter.firmware_update_process_completed = false;
    7e4a:	71ae      	strb	r6, [r5, #6]
		bootloader_parameter.firmware_update_error_code = 0;
    7e4c:	71ee      	strb	r6, [r5, #7]
		bootloader_parameter.retries= 0;
    7e4e:	722e      	strb	r6, [r5, #8]
		memset(bootloader_parameter.firmware_updater_mobile_no, '\0', sizeof(bootloader_parameter.firmware_updater_mobile_no));
    7e50:	4798      	blx	r3
		strcpy(bootloader_parameter.firmware_updater_mobile_no,"0000000000");
    7e52:	4943      	ldr	r1, [pc, #268]	; (7f60 <Read_EEprom+0x14c>)
    7e54:	4b43      	ldr	r3, [pc, #268]	; (7f64 <Read_EEprom+0x150>)
    7e56:	0038      	movs	r0, r7
    7e58:	4798      	blx	r3
		
		memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    7e5a:	221c      	movs	r2, #28
    7e5c:	0029      	movs	r1, r5
    7e5e:	4b3d      	ldr	r3, [pc, #244]	; (7f54 <Read_EEprom+0x140>)
    7e60:	0020      	movs	r0, r4
    7e62:	4798      	blx	r3
		eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    7e64:	4b40      	ldr	r3, [pc, #256]	; (7f68 <Read_EEprom+0x154>)
    7e66:	0021      	movs	r1, r4
    7e68:	0030      	movs	r0, r6
    7e6a:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    7e6c:	4b3f      	ldr	r3, [pc, #252]	; (7f6c <Read_EEprom+0x158>)
    7e6e:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_PATH_PARAMETER_PAGE, page_data);
    7e70:	0021      	movs	r1, r4
    7e72:	4b36      	ldr	r3, [pc, #216]	; (7f4c <Read_EEprom+0x138>)
    7e74:	2001      	movs	r0, #1
    7e76:	4798      	blx	r3
	memcpy(&ftp_path_parameter,page_data,sizeof(ftp_path_parameter));
    7e78:	4d3d      	ldr	r5, [pc, #244]	; (7f70 <Read_EEprom+0x15c>)
    7e7a:	4b36      	ldr	r3, [pc, #216]	; (7f54 <Read_EEprom+0x140>)
    7e7c:	2238      	movs	r2, #56	; 0x38
    7e7e:	0021      	movs	r1, r4
    7e80:	0028      	movs	r0, r5
    7e82:	4798      	blx	r3
	if (ftp_path_parameter.ucharFirst_Time_Write !=85)
    7e84:	792b      	ldrb	r3, [r5, #4]
    7e86:	2b55      	cmp	r3, #85	; 0x55
    7e88:	d020      	beq.n	7ecc <Read_EEprom+0xb8>
	{
		ftp_path_parameter.ulongintDiscard			   = 0;
    7e8a:	2600      	movs	r6, #0
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
    7e8c:	2355      	movs	r3, #85	; 0x55
		
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
    7e8e:	4f39      	ldr	r7, [pc, #228]	; (7f74 <Read_EEprom+0x160>)
    7e90:	221e      	movs	r2, #30
		ftp_path_parameter.ucharFirst_Time_Write	   = 85;
    7e92:	712b      	strb	r3, [r5, #4]
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
    7e94:	0031      	movs	r1, r6
    7e96:	4b31      	ldr	r3, [pc, #196]	; (7f5c <Read_EEprom+0x148>)
    7e98:	0038      	movs	r0, r7
		ftp_path_parameter.ulongintDiscard			   = 0;
    7e9a:	602e      	str	r6, [r5, #0]
		memset(ftp_path_parameter.ftp_address, '\0', sizeof(ftp_path_parameter.ftp_address));
    7e9c:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_address,"ftp.drivehq.com");
    7e9e:	4936      	ldr	r1, [pc, #216]	; (7f78 <Read_EEprom+0x164>)
    7ea0:	0038      	movs	r0, r7
    7ea2:	4f30      	ldr	r7, [pc, #192]	; (7f64 <Read_EEprom+0x150>)
    7ea4:	47b8      	blx	r7
		
		memset(ftp_path_parameter.ftp_path, '\0', sizeof(ftp_path_parameter.ftp_path));
    7ea6:	2214      	movs	r2, #20
    7ea8:	4b2c      	ldr	r3, [pc, #176]	; (7f5c <Read_EEprom+0x148>)
    7eaa:	0031      	movs	r1, r6
    7eac:	4833      	ldr	r0, [pc, #204]	; (7f7c <Read_EEprom+0x168>)
    7eae:	4798      	blx	r3
		strcpy(ftp_path_parameter.ftp_path,"/firmware/");
    7eb0:	4933      	ldr	r1, [pc, #204]	; (7f80 <Read_EEprom+0x16c>)
    7eb2:	4832      	ldr	r0, [pc, #200]	; (7f7c <Read_EEprom+0x168>)
    7eb4:	47b8      	blx	r7
		
		memcpy(page_data,&ftp_path_parameter,sizeof(ftp_path_parameter));
    7eb6:	2238      	movs	r2, #56	; 0x38
    7eb8:	0029      	movs	r1, r5
    7eba:	4b26      	ldr	r3, [pc, #152]	; (7f54 <Read_EEprom+0x140>)
    7ebc:	0020      	movs	r0, r4
    7ebe:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_PATH_PARAMETER_PAGE, page_data);
    7ec0:	4b29      	ldr	r3, [pc, #164]	; (7f68 <Read_EEprom+0x154>)
    7ec2:	0021      	movs	r1, r4
    7ec4:	2001      	movs	r0, #1
    7ec6:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    7ec8:	4b28      	ldr	r3, [pc, #160]	; (7f6c <Read_EEprom+0x158>)
    7eca:	4798      	blx	r3
	}
	
	eeprom_emulator_read_page(FTP_USER_PARAMETER_PAGE, page_data);
    7ecc:	4d1e      	ldr	r5, [pc, #120]	; (7f48 <Read_EEprom+0x134>)
    7ece:	4b1f      	ldr	r3, [pc, #124]	; (7f4c <Read_EEprom+0x138>)
    7ed0:	0029      	movs	r1, r5
    7ed2:	2002      	movs	r0, #2
    7ed4:	4798      	blx	r3
	memcpy(&ftp_user_parameter,page_data,sizeof(ftp_user_parameter));
    7ed6:	4c2b      	ldr	r4, [pc, #172]	; (7f84 <Read_EEprom+0x170>)
    7ed8:	4b1e      	ldr	r3, [pc, #120]	; (7f54 <Read_EEprom+0x140>)
    7eda:	2238      	movs	r2, #56	; 0x38
    7edc:	0029      	movs	r1, r5
    7ede:	0020      	movs	r0, r4
    7ee0:	4798      	blx	r3
	if (ftp_user_parameter.ucharFirst_Time_Write !=85)
    7ee2:	7923      	ldrb	r3, [r4, #4]
    7ee4:	2b55      	cmp	r3, #85	; 0x55
    7ee6:	d02c      	beq.n	7f42 <Read_EEprom+0x12e>
	{
		ftp_user_parameter.ulongintDiscard			   = 0;
    7ee8:	2600      	movs	r6, #0
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
    7eea:	2355      	movs	r3, #85	; 0x55
		
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
    7eec:	4f26      	ldr	r7, [pc, #152]	; (7f88 <Read_EEprom+0x174>)
    7eee:	2210      	movs	r2, #16
		ftp_user_parameter.ucharFirst_Time_Write	   = 85;
    7ef0:	7123      	strb	r3, [r4, #4]
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
    7ef2:	0031      	movs	r1, r6
    7ef4:	0038      	movs	r0, r7
    7ef6:	4b19      	ldr	r3, [pc, #100]	; (7f5c <Read_EEprom+0x148>)
		ftp_user_parameter.ulongintDiscard			   = 0;
    7ef8:	6026      	str	r6, [r4, #0]
		memset(ftp_user_parameter.ftp_username, '\0', sizeof(ftp_user_parameter.ftp_username));
    7efa:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_username,"rahulnrathodkcl");
    7efc:	4923      	ldr	r1, [pc, #140]	; (7f8c <Read_EEprom+0x178>)
    7efe:	0038      	movs	r0, r7
    7f00:	4b18      	ldr	r3, [pc, #96]	; (7f64 <Read_EEprom+0x150>)
    7f02:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_password, '\0', sizeof(ftp_user_parameter.ftp_password));
    7f04:	4f22      	ldr	r7, [pc, #136]	; (7f90 <Read_EEprom+0x17c>)
    7f06:	2210      	movs	r2, #16
    7f08:	0031      	movs	r1, r6
    7f0a:	0038      	movs	r0, r7
    7f0c:	4b13      	ldr	r3, [pc, #76]	; (7f5c <Read_EEprom+0x148>)
    7f0e:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_password,"123456789");
    7f10:	4920      	ldr	r1, [pc, #128]	; (7f94 <Read_EEprom+0x180>)
    7f12:	0038      	movs	r0, r7
    7f14:	4b13      	ldr	r3, [pc, #76]	; (7f64 <Read_EEprom+0x150>)
    7f16:	4798      	blx	r3
		
		memset(ftp_user_parameter.ftp_filename, '\0', sizeof(ftp_user_parameter.ftp_filename));
    7f18:	4f1f      	ldr	r7, [pc, #124]	; (7f98 <Read_EEprom+0x184>)
    7f1a:	2210      	movs	r2, #16
    7f1c:	0031      	movs	r1, r6
    7f1e:	4b0f      	ldr	r3, [pc, #60]	; (7f5c <Read_EEprom+0x148>)
    7f20:	0038      	movs	r0, r7
    7f22:	4798      	blx	r3
		strcpy(ftp_user_parameter.ftp_filename,"firmware.bin");
    7f24:	491d      	ldr	r1, [pc, #116]	; (7f9c <Read_EEprom+0x188>)
    7f26:	4b0f      	ldr	r3, [pc, #60]	; (7f64 <Read_EEprom+0x150>)
    7f28:	0038      	movs	r0, r7
    7f2a:	4798      	blx	r3
		
		memcpy(page_data,&ftp_user_parameter,sizeof(ftp_user_parameter));
    7f2c:	2238      	movs	r2, #56	; 0x38
    7f2e:	0021      	movs	r1, r4
    7f30:	4b08      	ldr	r3, [pc, #32]	; (7f54 <Read_EEprom+0x140>)
    7f32:	0028      	movs	r0, r5
    7f34:	4798      	blx	r3
		eeprom_emulator_write_page(FTP_USER_PARAMETER_PAGE, page_data);
    7f36:	4b0c      	ldr	r3, [pc, #48]	; (7f68 <Read_EEprom+0x154>)
    7f38:	0029      	movs	r1, r5
    7f3a:	2002      	movs	r0, #2
    7f3c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
    7f3e:	4b0b      	ldr	r3, [pc, #44]	; (7f6c <Read_EEprom+0x158>)
    7f40:	4798      	blx	r3
	}
}
    7f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f44:	00007de5 	.word	0x00007de5
    7f48:	2000109c 	.word	0x2000109c
    7f4c:	00007315 	.word	0x00007315
    7f50:	20001110 	.word	0x20001110
    7f54:	00009239 	.word	0x00009239
    7f58:	2000111c 	.word	0x2000111c
    7f5c:	0000924b 	.word	0x0000924b
    7f60:	0000a3a0 	.word	0x0000a3a0
    7f64:	000094b1 	.word	0x000094b1
    7f68:	0000739d 	.word	0x0000739d
    7f6c:	00007371 	.word	0x00007371
    7f70:	20001064 	.word	0x20001064
    7f74:	20001069 	.word	0x20001069
    7f78:	0000a3ab 	.word	0x0000a3ab
    7f7c:	20001087 	.word	0x20001087
    7f80:	0000a3bb 	.word	0x0000a3bb
    7f84:	200010d8 	.word	0x200010d8
    7f88:	200010dd 	.word	0x200010dd
    7f8c:	0000a3c6 	.word	0x0000a3c6
    7f90:	200010ed 	.word	0x200010ed
    7f94:	0000a3d6 	.word	0x0000a3d6
    7f98:	200010fd 	.word	0x200010fd
    7f9c:	0000a3e0 	.word	0x0000a3e0

00007fa0 <spiflash_init>:
	config->select_slave_low_detect_enable= true;
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    7fa0:	230d      	movs	r3, #13
	config->data_order       = SPI_DATA_ORDER_MSB;
    7fa2:	2100      	movs	r1, #0
		}
	}
}

void spiflash_init(void)
{
    7fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	config->mode             = SPI_MODE_MASTER;
    7fa6:	2501      	movs	r5, #1
    7fa8:	b091      	sub	sp, #68	; 0x44
	config->generator_source = GCLK_GENERATOR_0;
    7faa:	446b      	add	r3, sp
	config->mode             = SPI_MODE_MASTER;
    7fac:	ac02      	add	r4, sp, #8
	config->generator_source = GCLK_GENERATOR_0;
    7fae:	77d9      	strb	r1, [r3, #31]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    7fb0:	220c      	movs	r2, #12
    7fb2:	4b26      	ldr	r3, [pc, #152]	; (804c <spiflash_init+0xac>)
    7fb4:	a808      	add	r0, sp, #32
	config->mode             = SPI_MODE_MASTER;
    7fb6:	7025      	strb	r5, [r4, #0]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    7fb8:	7421      	strb	r1, [r4, #16]
	config->run_in_standby   = false;
    7fba:	7461      	strb	r1, [r4, #17]
	config->receiver_enable  = true;
    7fbc:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    7fbe:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    7fc0:	7521      	strb	r1, [r4, #20]
	config->data_order       = SPI_DATA_ORDER_MSB;
    7fc2:	9103      	str	r1, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    7fc4:	9104      	str	r1, [sp, #16]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    7fc6:	4798      	blx	r3
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	
	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    7fc8:	4b21      	ldr	r3, [pc, #132]	; (8050 <spiflash_init+0xb0>)
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;

	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    7fca:	4e22      	ldr	r6, [pc, #136]	; (8054 <spiflash_init+0xb4>)
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    7fcc:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    7fce:	2380      	movs	r3, #128	; 0x80
    7fd0:	039b      	lsls	r3, r3, #14
    7fd2:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    7fd4:	4b20      	ldr	r3, [pc, #128]	; (8058 <spiflash_init+0xb8>)
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    7fd6:	0022      	movs	r2, r4
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    7fd8:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    7fda:	4b20      	ldr	r3, [pc, #128]	; (805c <spiflash_init+0xbc>)
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    7fdc:	4920      	ldr	r1, [pc, #128]	; (8060 <spiflash_init+0xc0>)
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    7fde:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    7fe0:	4b20      	ldr	r3, [pc, #128]	; (8064 <spiflash_init+0xc4>)
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    7fe2:	0030      	movs	r0, r6
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    7fe4:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    7fe6:	2301      	movs	r3, #1
    7fe8:	425b      	negs	r3, r3
    7fea:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    7fec:	4b1e      	ldr	r3, [pc, #120]	; (8068 <spiflash_init+0xc8>)
    7fee:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7ff0:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7ff2:	4b1e      	ldr	r3, [pc, #120]	; (806c <spiflash_init+0xcc>)
    7ff4:	0020      	movs	r0, r4
    7ff6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7ff8:	231f      	movs	r3, #31
    7ffa:	4018      	ands	r0, r3
    7ffc:	4085      	lsls	r5, r0
    7ffe:	4b1c      	ldr	r3, [pc, #112]	; (8070 <spiflash_init+0xd0>)
    8000:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8002:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    8004:	69dd      	ldr	r5, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
    8006:	2d00      	cmp	r5, #0
    8008:	d1fc      	bne.n	8004 <spiflash_init+0x64>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    800a:	2302      	movs	r3, #2
    800c:	6822      	ldr	r2, [r4, #0]
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
	module->cs_pin = config->cs_pin;
    800e:	2013      	movs	r0, #19
    8010:	4313      	orrs	r3, r2
    8012:	6023      	str	r3, [r4, #0]
	module->type = config->type;
    8014:	2304      	movs	r3, #4
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    8016:	2401      	movs	r4, #1
    8018:	4f16      	ldr	r7, [pc, #88]	; (8074 <spiflash_init+0xd4>)
    801a:	a901      	add	r1, sp, #4
    801c:	713b      	strb	r3, [r7, #4]
	module->spi = spi_module;

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(module->cs_pin, &port_config);
    801e:	4b16      	ldr	r3, [pc, #88]	; (8078 <spiflash_init+0xd8>)
    8020:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
    8022:	708d      	strb	r5, [r1, #2]
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    8024:	700c      	strb	r4, [r1, #0]
	module->cs_pin = config->cs_pin;
    8026:	7178      	strb	r0, [r7, #5]
	module->spi = spi_module;
    8028:	603e      	str	r6, [r7, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    802a:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    802c:	797a      	ldrb	r2, [r7, #5]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    802e:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8030:	09d1      	lsrs	r1, r2, #7
    8032:	d108      	bne.n	8046 <spiflash_init+0xa6>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8034:	311f      	adds	r1, #31
    8036:	400a      	ands	r2, r1
    8038:	4094      	lsls	r4, r2

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    803a:	4a10      	ldr	r2, [pc, #64]	; (807c <spiflash_init+0xdc>)
    803c:	01db      	lsls	r3, r3, #7
    803e:	189b      	adds	r3, r3, r2
    8040:	619c      	str	r4, [r3, #24]

	at25dfx_chip_config.type = AT25DFX_MEM_TYPE;
	at25dfx_chip_config.cs_pin = AT25DFX_CS;

	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
}
    8042:	b011      	add	sp, #68	; 0x44
    8044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8046:	61ad      	str	r5, [r5, #24]
    8048:	deff      	udf	#255	; 0xff
    804a:	46c0      	nop			; (mov r8, r8)
    804c:	0000924b 	.word	0x0000924b
    8050:	0030d400 	.word	0x0030d400
    8054:	20000b88 	.word	0x20000b88
    8058:	00100002 	.word	0x00100002
    805c:	00110002 	.word	0x00110002
    8060:	42000c00 	.word	0x42000c00
    8064:	00120002 	.word	0x00120002
    8068:	00005761 	.word	0x00005761
    806c:	00005e55 	.word	0x00005e55
    8070:	e000e100 	.word	0xe000e100
    8074:	20000b80 	.word	0x20000b80
    8078:	00006fe1 	.word	0x00006fe1
    807c:	41004400 	.word	0x41004400

00008080 <start_application>:

void start_application(void)
{
    8080:	b5b0      	push	{r4, r5, r7, lr}
	void (*application_code_entry)(void);
	
	#ifdef LCD_SUPPORT
	LCD_setCursor(0,1);
    8082:	2101      	movs	r1, #1
{
    8084:	af00      	add	r7, sp, #0
	LCD_setCursor(0,1);
    8086:	2000      	movs	r0, #0
    8088:	4b11      	ldr	r3, [pc, #68]	; (80d0 <start_application+0x50>)
    808a:	4798      	blx	r3
	lcd_printf("APPLICATION MODE");
    808c:	4811      	ldr	r0, [pc, #68]	; (80d4 <start_application+0x54>)
    808e:	4b12      	ldr	r3, [pc, #72]	; (80d8 <start_application+0x58>)
    8090:	4798      	blx	r3
	delay_ms(2000);
    8092:	4b12      	ldr	r3, [pc, #72]	; (80dc <start_application+0x5c>)
    8094:	2000      	movs	r0, #0
    8096:	4798      	blx	r3
    8098:	22fa      	movs	r2, #250	; 0xfa
    809a:	4c11      	ldr	r4, [pc, #68]	; (80e0 <start_application+0x60>)
    809c:	00d2      	lsls	r2, r2, #3
    809e:	2300      	movs	r3, #0
    80a0:	2100      	movs	r1, #0
    80a2:	47a0      	blx	r4
    80a4:	2300      	movs	r3, #0
    80a6:	4a0f      	ldr	r2, [pc, #60]	; (80e4 <start_application+0x64>)
    80a8:	4c0f      	ldr	r4, [pc, #60]	; (80e8 <start_application+0x68>)
    80aa:	1880      	adds	r0, r0, r2
    80ac:	4159      	adcs	r1, r3
    80ae:	4a0f      	ldr	r2, [pc, #60]	; (80ec <start_application+0x6c>)
    80b0:	2300      	movs	r3, #0
    80b2:	47a0      	blx	r4
    80b4:	4b0e      	ldr	r3, [pc, #56]	; (80f0 <start_application+0x70>)
    80b6:	4798      	blx	r3
	#endif
	
	/* Re base the Stack Pointer */
	__set_MSP(*(uint32_t *)APP_START_ADDRESS);
    80b8:	2380      	movs	r3, #128	; 0x80
    80ba:	025b      	lsls	r3, r3, #9

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    80bc:	681a      	ldr	r2, [r3, #0]
    80be:	f382 8808 	msr	MSP, r2

	/* Re base the vector table base address */
	SCB->VTOR = ((uint32_t)APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    80c2:	4a0c      	ldr	r2, [pc, #48]	; (80f4 <start_application+0x74>)
    80c4:	6093      	str	r3, [r2, #8]

	/* Load the Reset Handler address of the application */
	application_code_entry = (void (*)(void))(unsigned *)(*(unsigned *)
    80c6:	4b0c      	ldr	r3, [pc, #48]	; (80f8 <start_application+0x78>)
	(APP_START_ADDRESS + 4));

	/* Jump to user Reset Handler in the application */
	application_code_entry();
    80c8:	681b      	ldr	r3, [r3, #0]
    80ca:	4798      	blx	r3
}
    80cc:	46bd      	mov	sp, r7
    80ce:	bdb0      	pop	{r4, r5, r7, pc}
    80d0:	000011d9 	.word	0x000011d9
    80d4:	0000a4bc 	.word	0x0000a4bc
    80d8:	00001429 	.word	0x00001429
    80dc:	00007aad 	.word	0x00007aad
    80e0:	00008f75 	.word	0x00008f75
    80e4:	00001b57 	.word	0x00001b57
    80e8:	00008f35 	.word	0x00008f35
    80ec:	00001b58 	.word	0x00001b58
    80f0:	20000001 	.word	0x20000001
    80f4:	e000ed00 	.word	0xe000ed00
    80f8:	00010004 	.word	0x00010004

000080fc <check_boot_mode>:

void check_boot_mode(void)
{
    80fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check if WDT is locked */
	if (!(WDT->CTRL.reg & WDT_CTRL_ALWAYSON))
    80fe:	4b3b      	ldr	r3, [pc, #236]	; (81ec <check_boot_mode+0xf0>)
    8100:	781a      	ldrb	r2, [r3, #0]
    8102:	b252      	sxtb	r2, r2
    8104:	2a00      	cmp	r2, #0
    8106:	db03      	blt.n	8110 <check_boot_mode+0x14>
	{
		/* Disable the Watchdog module */
		WDT->CTRL.reg &= ~WDT_CTRL_ENABLE;
    8108:	2102      	movs	r1, #2
    810a:	781a      	ldrb	r2, [r3, #0]
    810c:	438a      	bics	r2, r1
    810e:	701a      	strb	r2, [r3, #0]
	}
	
	#ifdef USB_DEVIDE_MODE_BOOT_SUPPORT
	udc_start();
    8110:	4b37      	ldr	r3, [pc, #220]	; (81f0 <check_boot_mode+0xf4>)
    8112:	4798      	blx	r3
	delay_ms(2000);
    8114:	4b37      	ldr	r3, [pc, #220]	; (81f4 <check_boot_mode+0xf8>)
    8116:	2000      	movs	r0, #0
    8118:	4798      	blx	r3
    811a:	22fa      	movs	r2, #250	; 0xfa
    811c:	4c36      	ldr	r4, [pc, #216]	; (81f8 <check_boot_mode+0xfc>)
    811e:	00d2      	lsls	r2, r2, #3
    8120:	2300      	movs	r3, #0
    8122:	2100      	movs	r1, #0
    8124:	47a0      	blx	r4
    8126:	2300      	movs	r3, #0
    8128:	4a34      	ldr	r2, [pc, #208]	; (81fc <check_boot_mode+0x100>)
    812a:	4c35      	ldr	r4, [pc, #212]	; (8200 <check_boot_mode+0x104>)
    812c:	1880      	adds	r0, r0, r2
    812e:	4159      	adcs	r1, r3
    8130:	4a34      	ldr	r2, [pc, #208]	; (8204 <check_boot_mode+0x108>)
    8132:	2300      	movs	r3, #0
    8134:	47a0      	blx	r4
    8136:	4b34      	ldr	r3, [pc, #208]	; (8208 <check_boot_mode+0x10c>)
    8138:	4798      	blx	r3
	if (main_b_cdc_enable)
    813a:	4b34      	ldr	r3, [pc, #208]	; (820c <check_boot_mode+0x110>)
    813c:	781d      	ldrb	r5, [r3, #0]
    813e:	b2ed      	uxtb	r5, r5
    8140:	2d00      	cmp	r5, #0
    8142:	d00c      	beq.n	815e <check_boot_mode+0x62>
	{
		#ifdef LCD_SUPPORT
		LCD_setCursor(0,1);
    8144:	2101      	movs	r1, #1
    8146:	2000      	movs	r0, #0
    8148:	4b31      	ldr	r3, [pc, #196]	; (8210 <check_boot_mode+0x114>)
    814a:	4798      	blx	r3
		lcd_printf("USB DEVICE MODE");
    814c:	4831      	ldr	r0, [pc, #196]	; (8214 <check_boot_mode+0x118>)
    814e:	4b32      	ldr	r3, [pc, #200]	; (8218 <check_boot_mode+0x11c>)
    8150:	4798      	blx	r3
		#endif
		
		sam_ba_monitor_init(SAM_BA_INTERFACE_USBCDC);
    8152:	2000      	movs	r0, #0
    8154:	4b31      	ldr	r3, [pc, #196]	; (821c <check_boot_mode+0x120>)
    8156:	4798      	blx	r3
		while(1)
		{
			sam_ba_monitor_run();
    8158:	4b31      	ldr	r3, [pc, #196]	; (8220 <check_boot_mode+0x124>)
    815a:	4798      	blx	r3
    815c:	e7fc      	b.n	8158 <check_boot_mode+0x5c>
		}
	}
	else
	{
		udc_stop();
    815e:	4b31      	ldr	r3, [pc, #196]	; (8224 <check_boot_mode+0x128>)
    8160:	4798      	blx	r3
	}
	#endif

	#ifdef FTP_MODE_BOOT_SUPPORT
	if (bootloader_parameter.firmware_download_pending == true)
    8162:	4c31      	ldr	r4, [pc, #196]	; (8228 <check_boot_mode+0x12c>)
    8164:	7967      	ldrb	r7, [r4, #5]
    8166:	2f01      	cmp	r7, #1
    8168:	d126      	bne.n	81b8 <check_boot_mode+0xbc>
	{
		#ifdef LCD_SUPPORT
		LCD_setCursor(0,1);
    816a:	0039      	movs	r1, r7
    816c:	0028      	movs	r0, r5
    816e:	4b28      	ldr	r3, [pc, #160]	; (8210 <check_boot_mode+0x114>)
    8170:	4798      	blx	r3
		lcd_printf(" FTP BOOT MODE  ");
    8172:	4b29      	ldr	r3, [pc, #164]	; (8218 <check_boot_mode+0x11c>)
    8174:	482d      	ldr	r0, [pc, #180]	; (822c <check_boot_mode+0x130>)
    8176:	4798      	blx	r3
		
		#endif
		if(bootloader_parameter.retries<2)
    8178:	7a22      	ldrb	r2, [r4, #8]
    817a:	4e2d      	ldr	r6, [pc, #180]	; (8230 <check_boot_mode+0x134>)
    817c:	4b2d      	ldr	r3, [pc, #180]	; (8234 <check_boot_mode+0x138>)
    817e:	2a01      	cmp	r2, #1
    8180:	d80c      	bhi.n	819c <check_boot_mode+0xa0>
		{
			bootloader_parameter.retries++;
    8182:	3201      	adds	r2, #1
    8184:	7222      	strb	r2, [r4, #8]
			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    8186:	0021      	movs	r1, r4
    8188:	221c      	movs	r2, #28
    818a:	0030      	movs	r0, r6
    818c:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    818e:	4b2a      	ldr	r3, [pc, #168]	; (8238 <check_boot_mode+0x13c>)
    8190:	0031      	movs	r1, r6
    8192:	0028      	movs	r0, r5
    8194:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    8196:	4b29      	ldr	r3, [pc, #164]	; (823c <check_boot_mode+0x140>)
    8198:	4798      	blx	r3
	spi_disable(&at25dfx_spi);
	
	/* Enters application mode*/
	start_application();
	
}
    819a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bootloader_parameter.firmware_update_error_code = 0xFE;
    819c:	22fe      	movs	r2, #254	; 0xfe
			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    819e:	0021      	movs	r1, r4
			bootloader_parameter.firmware_update_error_code = 0xFE;
    81a0:	71e2      	strb	r2, [r4, #7]
			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    81a2:	0030      	movs	r0, r6
    81a4:	3ae2      	subs	r2, #226	; 0xe2
			bootloader_parameter.firmware_download_pending = false;
    81a6:	7165      	strb	r5, [r4, #5]
			bootloader_parameter.firmware_update_process_completed = true;
    81a8:	71a7      	strb	r7, [r4, #6]
			memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    81aa:	4798      	blx	r3
			eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    81ac:	4b22      	ldr	r3, [pc, #136]	; (8238 <check_boot_mode+0x13c>)
    81ae:	0031      	movs	r1, r6
    81b0:	0028      	movs	r0, r5
    81b2:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
    81b4:	4b21      	ldr	r3, [pc, #132]	; (823c <check_boot_mode+0x140>)
    81b6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    81b8:	4d21      	ldr	r5, [pc, #132]	; (8240 <check_boot_mode+0x144>)

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    81ba:	4b22      	ldr	r3, [pc, #136]	; (8244 <check_boot_mode+0x148>)
	SercomSpi *const spi_module = &(module->hw->SPI);
    81bc:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    81be:	0020      	movs	r0, r4
    81c0:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    81c2:	231f      	movs	r3, #31
    81c4:	4018      	ands	r0, r3
    81c6:	3b1e      	subs	r3, #30
    81c8:	4083      	lsls	r3, r0
    81ca:	4a1f      	ldr	r2, [pc, #124]	; (8248 <check_boot_mode+0x14c>)
    81cc:	67d3      	str	r3, [r2, #124]	; 0x7c
	SercomSpi *const spi_module = &(module->hw->SPI);
    81ce:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    81d0:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    81d2:	2b00      	cmp	r3, #0
    81d4:	d1fc      	bne.n	81d0 <check_boot_mode+0xd4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    81d6:	2202      	movs	r2, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    81d8:	338f      	adds	r3, #143	; 0x8f
    81da:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    81dc:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    81de:	6823      	ldr	r3, [r4, #0]
    81e0:	4393      	bics	r3, r2
    81e2:	6023      	str	r3, [r4, #0]
	start_application();
    81e4:	4b19      	ldr	r3, [pc, #100]	; (824c <check_boot_mode+0x150>)
    81e6:	4798      	blx	r3
    81e8:	e7d7      	b.n	819a <check_boot_mode+0x9e>
    81ea:	46c0      	nop			; (mov r8, r8)
    81ec:	40001000 	.word	0x40001000
    81f0:	000068a5 	.word	0x000068a5
    81f4:	00007aad 	.word	0x00007aad
    81f8:	00008f75 	.word	0x00008f75
    81fc:	00001b57 	.word	0x00001b57
    8200:	00008f35 	.word	0x00008f35
    8204:	00001b58 	.word	0x00001b58
    8208:	20000001 	.word	0x20000001
    820c:	20000b6c 	.word	0x20000b6c
    8210:	000011d9 	.word	0x000011d9
    8214:	0000a3ed 	.word	0x0000a3ed
    8218:	00001429 	.word	0x00001429
    821c:	00001471 	.word	0x00001471
    8220:	0000153d 	.word	0x0000153d
    8224:	000068f1 	.word	0x000068f1
    8228:	20001110 	.word	0x20001110
    822c:	0000a3fd 	.word	0x0000a3fd
    8230:	2000109c 	.word	0x2000109c
    8234:	00009239 	.word	0x00009239
    8238:	0000739d 	.word	0x0000739d
    823c:	00007371 	.word	0x00007371
    8240:	20000b88 	.word	0x20000b88
    8244:	00005e55 	.word	0x00005e55
    8248:	e000e104 	.word	0xe000e104
    824c:	00008081 	.word	0x00008081

00008250 <main>:
{
    8250:	b5f0      	push	{r4, r5, r6, r7, lr}
	system_init();
    8252:	4b7c      	ldr	r3, [pc, #496]	; (8444 <main+0x1f4>)
{
    8254:	b089      	sub	sp, #36	; 0x24
	system_init();
    8256:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    8258:	2201      	movs	r2, #1
		sleepmgr_locks[i] = 0;
    825a:	4b7b      	ldr	r3, [pc, #492]	; (8448 <main+0x1f8>)
    825c:	2400      	movs	r4, #0
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    825e:	711a      	strb	r2, [r3, #4]
	cpu_irq_enable();
    8260:	2201      	movs	r2, #1
		sleepmgr_locks[i] = 0;
    8262:	701c      	strb	r4, [r3, #0]
    8264:	705c      	strb	r4, [r3, #1]
    8266:	709c      	strb	r4, [r3, #2]
    8268:	70dc      	strb	r4, [r3, #3]
    826a:	4b78      	ldr	r3, [pc, #480]	; (844c <main+0x1fc>)
    826c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    826e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8272:	b662      	cpsie	i
	delay_init();
    8274:	4b76      	ldr	r3, [pc, #472]	; (8450 <main+0x200>)
    8276:	4798      	blx	r3
	LCD_PWR_CONFIG();
    8278:	4b76      	ldr	r3, [pc, #472]	; (8454 <main+0x204>)
    827a:	4798      	blx	r3
	LCD_PWR_EN();
    827c:	4b76      	ldr	r3, [pc, #472]	; (8458 <main+0x208>)
    827e:	4798      	blx	r3
	delay_ms(200);
    8280:	0020      	movs	r0, r4
    8282:	4b76      	ldr	r3, [pc, #472]	; (845c <main+0x20c>)
    8284:	4798      	blx	r3
    8286:	4d76      	ldr	r5, [pc, #472]	; (8460 <main+0x210>)
    8288:	22c8      	movs	r2, #200	; 0xc8
    828a:	2300      	movs	r3, #0
    828c:	0021      	movs	r1, r4
    828e:	47a8      	blx	r5
    8290:	2700      	movs	r7, #0
    8292:	4e74      	ldr	r6, [pc, #464]	; (8464 <main+0x214>)
    8294:	4a74      	ldr	r2, [pc, #464]	; (8468 <main+0x218>)
    8296:	4d75      	ldr	r5, [pc, #468]	; (846c <main+0x21c>)
    8298:	2300      	movs	r3, #0
    829a:	1980      	adds	r0, r0, r6
    829c:	4179      	adcs	r1, r7
    829e:	47a8      	blx	r5
    82a0:	4b73      	ldr	r3, [pc, #460]	; (8470 <main+0x220>)
    82a2:	4798      	blx	r3
	LCD_init();
    82a4:	4b73      	ldr	r3, [pc, #460]	; (8474 <main+0x224>)
    82a6:	4798      	blx	r3
	Read_EEprom();
    82a8:	4b73      	ldr	r3, [pc, #460]	; (8478 <main+0x228>)
    82aa:	4798      	blx	r3
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    82ac:	a804      	add	r0, sp, #16
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    82ae:	4b73      	ldr	r3, [pc, #460]	; (847c <main+0x22c>)
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    82b0:	7004      	strb	r4, [r0, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    82b2:	685b      	ldr	r3, [r3, #4]
	byte progressbar[8] = {
    82b4:	ad06      	add	r5, sp, #24
    82b6:	06db      	lsls	r3, r3, #27
    82b8:	0f1b      	lsrs	r3, r3, #28
    82ba:	7083      	strb	r3, [r0, #2]
	nvm_set_config(&nvm_cfg);
    82bc:	4b70      	ldr	r3, [pc, #448]	; (8480 <main+0x230>)
	config->disable_cache     = false;
    82be:	70c4      	strb	r4, [r0, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    82c0:	7104      	strb	r4, [r0, #4]
	nvm_cfg.manual_page_write = false;
    82c2:	7044      	strb	r4, [r0, #1]
	nvm_set_config(&nvm_cfg);
    82c4:	4798      	blx	r3
	spiflash_init();
    82c6:	4b6f      	ldr	r3, [pc, #444]	; (8484 <main+0x234>)
    82c8:	4798      	blx	r3
	byte progressbar[8] = {
    82ca:	2208      	movs	r2, #8
    82cc:	0021      	movs	r1, r4
    82ce:	4b6e      	ldr	r3, [pc, #440]	; (8488 <main+0x238>)
    82d0:	0028      	movs	r0, r5
    82d2:	4798      	blx	r3
    82d4:	230f      	movs	r3, #15
	LCD_Create_Custom_createChar(0,progressbar);
    82d6:	0029      	movs	r1, r5
    82d8:	0020      	movs	r0, r4
	byte progressbar[8] = {
    82da:	702b      	strb	r3, [r5, #0]
    82dc:	706b      	strb	r3, [r5, #1]
    82de:	70ab      	strb	r3, [r5, #2]
    82e0:	70eb      	strb	r3, [r5, #3]
    82e2:	712b      	strb	r3, [r5, #4]
    82e4:	716b      	strb	r3, [r5, #5]
    82e6:	71ab      	strb	r3, [r5, #6]
	LCD_Create_Custom_createChar(0,progressbar);
    82e8:	4b68      	ldr	r3, [pc, #416]	; (848c <main+0x23c>)
    82ea:	4798      	blx	r3
	LCD_clear();
    82ec:	4b68      	ldr	r3, [pc, #416]	; (8490 <main+0x240>)
    82ee:	4798      	blx	r3
	lcd_printf("   BOOTING UP   ");
    82f0:	4868      	ldr	r0, [pc, #416]	; (8494 <main+0x244>)
    82f2:	4b69      	ldr	r3, [pc, #420]	; (8498 <main+0x248>)
    82f4:	4798      	blx	r3
	LCD_setCursor(0,1);
    82f6:	0020      	movs	r0, r4
    82f8:	2101      	movs	r1, #1
    82fa:	4b68      	ldr	r3, [pc, #416]	; (849c <main+0x24c>)
    82fc:	4798      	blx	r3
    82fe:	9602      	str	r6, [sp, #8]
    8300:	9703      	str	r7, [sp, #12]
    8302:	3410      	adds	r4, #16
		LCD_write(0);
    8304:	4b66      	ldr	r3, [pc, #408]	; (84a0 <main+0x250>)
    8306:	2000      	movs	r0, #0
    8308:	4798      	blx	r3
		delay_ms(100);
    830a:	2000      	movs	r0, #0
    830c:	4f53      	ldr	r7, [pc, #332]	; (845c <main+0x20c>)
    830e:	47b8      	blx	r7
    8310:	2264      	movs	r2, #100	; 0x64
    8312:	2300      	movs	r3, #0
    8314:	4d52      	ldr	r5, [pc, #328]	; (8460 <main+0x210>)
    8316:	2100      	movs	r1, #0
    8318:	47a8      	blx	r5
    831a:	9a02      	ldr	r2, [sp, #8]
    831c:	9b03      	ldr	r3, [sp, #12]
    831e:	4e53      	ldr	r6, [pc, #332]	; (846c <main+0x21c>)
    8320:	1880      	adds	r0, r0, r2
    8322:	4159      	adcs	r1, r3
    8324:	3c01      	subs	r4, #1
    8326:	4a50      	ldr	r2, [pc, #320]	; (8468 <main+0x218>)
    8328:	2300      	movs	r3, #0
    832a:	47b0      	blx	r6
    832c:	b2e4      	uxtb	r4, r4
    832e:	4b50      	ldr	r3, [pc, #320]	; (8470 <main+0x220>)
    8330:	4798      	blx	r3
	for (uint8_t i=0;i<16;i++)
    8332:	2c00      	cmp	r4, #0
    8334:	d1e6      	bne.n	8304 <main+0xb4>
	LCD_clear();
    8336:	4b56      	ldr	r3, [pc, #344]	; (8490 <main+0x240>)
    8338:	4798      	blx	r3
	lcd_printf(" CHECKING MODE ");
    833a:	4b57      	ldr	r3, [pc, #348]	; (8498 <main+0x248>)
    833c:	4859      	ldr	r0, [pc, #356]	; (84a4 <main+0x254>)
    833e:	4798      	blx	r3
	delay_ms(1000);
    8340:	0020      	movs	r0, r4
    8342:	47b8      	blx	r7
    8344:	22fa      	movs	r2, #250	; 0xfa
    8346:	4d46      	ldr	r5, [pc, #280]	; (8460 <main+0x210>)
    8348:	0092      	lsls	r2, r2, #2
    834a:	2300      	movs	r3, #0
    834c:	0021      	movs	r1, r4
    834e:	47a8      	blx	r5
    8350:	9a02      	ldr	r2, [sp, #8]
    8352:	9b03      	ldr	r3, [sp, #12]
    8354:	1880      	adds	r0, r0, r2
    8356:	4159      	adcs	r1, r3
    8358:	4a43      	ldr	r2, [pc, #268]	; (8468 <main+0x218>)
    835a:	2300      	movs	r3, #0
    835c:	47b0      	blx	r6
    835e:	4b44      	ldr	r3, [pc, #272]	; (8470 <main+0x220>)
    8360:	4798      	blx	r3
	check_boot_mode();
    8362:	4b51      	ldr	r3, [pc, #324]	; (84a8 <main+0x258>)
    8364:	4798      	blx	r3
	delay_ms(1000);
    8366:	0020      	movs	r0, r4
    8368:	47b8      	blx	r7
    836a:	22fa      	movs	r2, #250	; 0xfa
    836c:	2300      	movs	r3, #0
    836e:	0092      	lsls	r2, r2, #2
    8370:	4d3b      	ldr	r5, [pc, #236]	; (8460 <main+0x210>)
    8372:	0021      	movs	r1, r4
    8374:	47a8      	blx	r5
    8376:	9a02      	ldr	r2, [sp, #8]
    8378:	9b03      	ldr	r3, [sp, #12]
    837a:	1880      	adds	r0, r0, r2
    837c:	4159      	adcs	r1, r3
    837e:	4a3a      	ldr	r2, [pc, #232]	; (8468 <main+0x218>)
    8380:	2300      	movs	r3, #0
    8382:	47b0      	blx	r6
    8384:	4b3a      	ldr	r3, [pc, #232]	; (8470 <main+0x220>)
    8386:	4798      	blx	r3
	LCD_clear();
    8388:	4b41      	ldr	r3, [pc, #260]	; (8490 <main+0x240>)
    838a:	4798      	blx	r3
	lcd_printf(" CHECKING FLASH  ");
    838c:	4847      	ldr	r0, [pc, #284]	; (84ac <main+0x25c>)
    838e:	4b42      	ldr	r3, [pc, #264]	; (8498 <main+0x248>)
    8390:	4798      	blx	r3
	LCD_setCursor(0,1);
    8392:	0020      	movs	r0, r4
    8394:	4b41      	ldr	r3, [pc, #260]	; (849c <main+0x24c>)
    8396:	2101      	movs	r1, #1
    8398:	4798      	blx	r3
	if (at25dfx_read_id(&at25dfx_chip)!=SPI_FLASH_ID)
    839a:	4845      	ldr	r0, [pc, #276]	; (84b0 <main+0x260>)
    839c:	4b45      	ldr	r3, [pc, #276]	; (84b4 <main+0x264>)
    839e:	4798      	blx	r3
    83a0:	28ef      	cmp	r0, #239	; 0xef
    83a2:	d03a      	beq.n	841a <main+0x1ca>
		lcd_printf("     FAILED     ");
    83a4:	4b3c      	ldr	r3, [pc, #240]	; (8498 <main+0x248>)
    83a6:	4844      	ldr	r0, [pc, #272]	; (84b8 <main+0x268>)
    83a8:	4798      	blx	r3
		delay_ms(2000);
    83aa:	0020      	movs	r0, r4
    83ac:	47b8      	blx	r7
    83ae:	22fa      	movs	r2, #250	; 0xfa
    83b0:	2300      	movs	r3, #0
    83b2:	00d2      	lsls	r2, r2, #3
    83b4:	0021      	movs	r1, r4
    83b6:	4c2a      	ldr	r4, [pc, #168]	; (8460 <main+0x210>)
    83b8:	47a0      	blx	r4
    83ba:	9b02      	ldr	r3, [sp, #8]
    83bc:	9c03      	ldr	r4, [sp, #12]
    83be:	4a2a      	ldr	r2, [pc, #168]	; (8468 <main+0x218>)
    83c0:	18c0      	adds	r0, r0, r3
    83c2:	4161      	adcs	r1, r4
    83c4:	2300      	movs	r3, #0
    83c6:	47b0      	blx	r6
    83c8:	4b29      	ldr	r3, [pc, #164]	; (8470 <main+0x220>)
    83ca:	4798      	blx	r3
		start_application();
    83cc:	4b3b      	ldr	r3, [pc, #236]	; (84bc <main+0x26c>)
    83ce:	4798      	blx	r3
	LCD_clear();
    83d0:	4d2f      	ldr	r5, [pc, #188]	; (8490 <main+0x240>)
    83d2:	47a8      	blx	r5
	lcd_printf("    ERASING     ");
    83d4:	4c30      	ldr	r4, [pc, #192]	; (8498 <main+0x248>)
    83d6:	483a      	ldr	r0, [pc, #232]	; (84c0 <main+0x270>)
    83d8:	47a0      	blx	r4
	LCD_setCursor(0,1);
    83da:	2101      	movs	r1, #1
    83dc:	2000      	movs	r0, #0
    83de:	4b2f      	ldr	r3, [pc, #188]	; (849c <main+0x24c>)
    83e0:	4798      	blx	r3
	for (uint32_t address=0x000000;address<=MAX_FIRMWARESIZE;(address=address+0x001000))
    83e2:	26c8      	movs	r6, #200	; 0xc8
	lcd_printf(" EXTERNAL FLASH ");
    83e4:	4837      	ldr	r0, [pc, #220]	; (84c4 <main+0x274>)
    83e6:	47a0      	blx	r4
	for (uint32_t address=0x000000;address<=MAX_FIRMWARESIZE;(address=address+0x001000))
    83e8:	2400      	movs	r4, #0
    83ea:	02b6      	lsls	r6, r6, #10
		at25dfx_chip_erase_block(&at25dfx_chip,address,AT25DFX_BLOCK_SIZE_4KB);
    83ec:	0021      	movs	r1, r4
    83ee:	4b36      	ldr	r3, [pc, #216]	; (84c8 <main+0x278>)
    83f0:	2200      	movs	r2, #0
    83f2:	482f      	ldr	r0, [pc, #188]	; (84b0 <main+0x260>)
    83f4:	4798      	blx	r3
	for (uint32_t address=0x000000;address<=MAX_FIRMWARESIZE;(address=address+0x001000))
    83f6:	2380      	movs	r3, #128	; 0x80
    83f8:	015b      	lsls	r3, r3, #5
    83fa:	18e4      	adds	r4, r4, r3
    83fc:	42b4      	cmp	r4, r6
    83fe:	d1f5      	bne.n	83ec <main+0x19c>
	LCD_clear();
    8400:	47a8      	blx	r5
	xTaskCreate(vTask_FTP,NULL,(uint16_t)3000,NULL,1,NULL);
    8402:	2100      	movs	r1, #0
    8404:	2301      	movs	r3, #1
    8406:	9101      	str	r1, [sp, #4]
    8408:	9300      	str	r3, [sp, #0]
    840a:	4a30      	ldr	r2, [pc, #192]	; (84cc <main+0x27c>)
    840c:	000b      	movs	r3, r1
    840e:	4830      	ldr	r0, [pc, #192]	; (84d0 <main+0x280>)
    8410:	4c30      	ldr	r4, [pc, #192]	; (84d4 <main+0x284>)
    8412:	47a0      	blx	r4
	vTaskStartScheduler();
    8414:	4b30      	ldr	r3, [pc, #192]	; (84d8 <main+0x288>)
    8416:	4798      	blx	r3
    8418:	e7fe      	b.n	8418 <main+0x1c8>
		lcd_printf("       OK       ");
    841a:	4b1f      	ldr	r3, [pc, #124]	; (8498 <main+0x248>)
    841c:	482f      	ldr	r0, [pc, #188]	; (84dc <main+0x28c>)
    841e:	4798      	blx	r3
		delay_ms(2000);
    8420:	0020      	movs	r0, r4
    8422:	47b8      	blx	r7
    8424:	22fa      	movs	r2, #250	; 0xfa
    8426:	2300      	movs	r3, #0
    8428:	00d2      	lsls	r2, r2, #3
    842a:	0021      	movs	r1, r4
    842c:	4c0c      	ldr	r4, [pc, #48]	; (8460 <main+0x210>)
    842e:	47a0      	blx	r4
    8430:	9b02      	ldr	r3, [sp, #8]
    8432:	9c03      	ldr	r4, [sp, #12]
    8434:	4a0c      	ldr	r2, [pc, #48]	; (8468 <main+0x218>)
    8436:	18c0      	adds	r0, r0, r3
    8438:	4161      	adcs	r1, r4
    843a:	2300      	movs	r3, #0
    843c:	47b0      	blx	r6
    843e:	4b0c      	ldr	r3, [pc, #48]	; (8470 <main+0x220>)
    8440:	4798      	blx	r3
    8442:	e7c5      	b.n	83d0 <main+0x180>
    8444:	00007cc1 	.word	0x00007cc1
    8448:	2000105d 	.word	0x2000105d
    844c:	20000120 	.word	0x20000120
    8450:	00005f21 	.word	0x00005f21
    8454:	0000104d 	.word	0x0000104d
    8458:	00001069 	.word	0x00001069
    845c:	00007aad 	.word	0x00007aad
    8460:	00008f75 	.word	0x00008f75
    8464:	00001b57 	.word	0x00001b57
    8468:	00001b58 	.word	0x00001b58
    846c:	00008f35 	.word	0x00008f35
    8470:	20000001 	.word	0x20000001
    8474:	00001231 	.word	0x00001231
    8478:	00007e15 	.word	0x00007e15
    847c:	41004000 	.word	0x41004000
    8480:	00006cf9 	.word	0x00006cf9
    8484:	00007fa1 	.word	0x00007fa1
    8488:	0000924b 	.word	0x0000924b
    848c:	000013fd 	.word	0x000013fd
    8490:	0000118d 	.word	0x0000118d
    8494:	0000a445 	.word	0x0000a445
    8498:	00001429 	.word	0x00001429
    849c:	000011d9 	.word	0x000011d9
    84a0:	0000117d 	.word	0x0000117d
    84a4:	0000a456 	.word	0x0000a456
    84a8:	000080fd 	.word	0x000080fd
    84ac:	0000a466 	.word	0x0000a466
    84b0:	20000b80 	.word	0x20000b80
    84b4:	00001e7d 	.word	0x00001e7d
    84b8:	0000a478 	.word	0x0000a478
    84bc:	00008081 	.word	0x00008081
    84c0:	0000a49a 	.word	0x0000a49a
    84c4:	0000a4ab 	.word	0x0000a4ab
    84c8:	00001e15 	.word	0x00001e15
    84cc:	00000bb8 	.word	0x00000bb8
    84d0:	000086a9 	.word	0x000086a9
    84d4:	00003979 	.word	0x00003979
    84d8:	00003b21 	.word	0x00003b21
    84dc:	0000a489 	.word	0x0000a489

000084e0 <download_firmware_into_flash>:


char download_firmware_into_flash(uint32_t firmware_size)
{
    84e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t download_Size=0;
	
	uint16_t request_bytes = 128;
	uint16_t received_bytes = 0;
    84e2:	2400      	movs	r4, #0
{
    84e4:	0007      	movs	r7, r0
    84e6:	b0c1      	sub	sp, #260	; 0x104
	uint16_t received_bytes = 0;
    84e8:	ab02      	add	r3, sp, #8
    84ea:	80dc      	strh	r4, [r3, #6]
	uint32_t current_page=0;
	
	uint32_t current_address = FIRMWARE_START_ADDRESS_IN_FLASH;
	
	#ifdef LCD_SUPPORT
	LCD_clear();
    84ec:	4b2a      	ldr	r3, [pc, #168]	; (8598 <download_firmware_into_flash+0xb8>)
    84ee:	4798      	blx	r3
	lcd_printf("f_Size:%lu",firmware_size);
    84f0:	4d2a      	ldr	r5, [pc, #168]	; (859c <download_firmware_into_flash+0xbc>)
    84f2:	0039      	movs	r1, r7
    84f4:	482a      	ldr	r0, [pc, #168]	; (85a0 <download_firmware_into_flash+0xc0>)
    84f6:	47a8      	blx	r5
	LCD_setCursor(0,1);
    84f8:	4b2a      	ldr	r3, [pc, #168]	; (85a4 <download_firmware_into_flash+0xc4>)
    84fa:	2101      	movs	r1, #1
    84fc:	0020      	movs	r0, r4
    84fe:	4798      	blx	r3
	lcd_printf("d_Size:%lu",download_Size);
    8500:	0021      	movs	r1, r4
    8502:	4829      	ldr	r0, [pc, #164]	; (85a8 <download_firmware_into_flash+0xc8>)
    8504:	47a8      	blx	r5
	#endif
	
	char buff[240]={0};
    8506:	22f0      	movs	r2, #240	; 0xf0
    8508:	0021      	movs	r1, r4
    850a:	4b28      	ldr	r3, [pc, #160]	; (85ac <download_firmware_into_flash+0xcc>)
    850c:	a804      	add	r0, sp, #16
    850e:	4798      	blx	r3
	
	enum gsm_error err;
	
	err = gsm_open_ftp_get_session();
    8510:	4b27      	ldr	r3, [pc, #156]	; (85b0 <download_firmware_into_flash+0xd0>)
    8512:	4798      	blx	r3
    8514:	0005      	movs	r5, r0
	
	if (err == GSM_ERROR_NONE)
    8516:	42a0      	cmp	r0, r4
    8518:	d131      	bne.n	857e <download_firmware_into_flash+0x9e>
    851a:	0004      	movs	r4, r0
	{
		while((download_Size < firmware_size))
    851c:	42bc      	cmp	r4, r7
    851e:	d303      	bcc.n	8528 <download_firmware_into_flash+0x48>
				vTaskDelay(2000);
				#endif
				return ('E');
			}
		}
		if (err == GSM_FTP_DOWNLOAD_SUCCESS)
    8520:	2d16      	cmp	r5, #22
    8522:	d12c      	bne.n	857e <download_firmware_into_flash+0x9e>
		{
			return ('O');
    8524:	204f      	movs	r0, #79	; 0x4f
    8526:	e034      	b.n	8592 <download_firmware_into_flash+0xb2>
				request_bytes=128;
    8528:	2080      	movs	r0, #128	; 0x80
			if((download_Size+128) < firmware_size)
    852a:	1823      	adds	r3, r4, r0
    852c:	429f      	cmp	r7, r3
    852e:	d801      	bhi.n	8534 <download_firmware_into_flash+0x54>
				request_bytes=firmware_size-download_Size;
    8530:	1b38      	subs	r0, r7, r4
    8532:	b280      	uxth	r0, r0
			err = gsm_read_ftp_download_data(request_bytes,buff,&received_bytes);
    8534:	ab02      	add	r3, sp, #8
    8536:	3306      	adds	r3, #6
    8538:	9301      	str	r3, [sp, #4]
    853a:	001a      	movs	r2, r3
    853c:	a904      	add	r1, sp, #16
    853e:	4b1d      	ldr	r3, [pc, #116]	; (85b4 <download_firmware_into_flash+0xd4>)
    8540:	4798      	blx	r3
    8542:	0005      	movs	r5, r0
			if (err == GSM_FTP_DOWNLOAD_NO_DATA_AVAILABLE_IN_BUFFER)
    8544:	2818      	cmp	r0, #24
    8546:	d104      	bne.n	8552 <download_firmware_into_flash+0x72>
				vTaskDelay(1000/portTICK_PERIOD_MS);
    8548:	20fa      	movs	r0, #250	; 0xfa
    854a:	0080      	lsls	r0, r0, #2
				vTaskDelay(50/portTICK_PERIOD_MS);
    854c:	4b1a      	ldr	r3, [pc, #104]	; (85b8 <download_firmware_into_flash+0xd8>)
    854e:	4798      	blx	r3
    8550:	e7e4      	b.n	851c <download_firmware_into_flash+0x3c>
			else if (err == GSM_FTP_DOWNLOAD_SUCCESS)
    8552:	2816      	cmp	r0, #22
    8554:	d113      	bne.n	857e <download_firmware_into_flash+0x9e>
				at25dfx_chip_write_buffer(&at25dfx_chip,current_address,&buff[0],received_bytes);
    8556:	9b01      	ldr	r3, [sp, #4]
    8558:	aa04      	add	r2, sp, #16
    855a:	0021      	movs	r1, r4
    855c:	881b      	ldrh	r3, [r3, #0]
    855e:	4817      	ldr	r0, [pc, #92]	; (85bc <download_firmware_into_flash+0xdc>)
    8560:	4e17      	ldr	r6, [pc, #92]	; (85c0 <download_firmware_into_flash+0xe0>)
    8562:	47b0      	blx	r6
				download_Size +=received_bytes;
    8564:	9b01      	ldr	r3, [sp, #4]
				LCD_setCursor(0,1);
    8566:	2101      	movs	r1, #1
				download_Size +=received_bytes;
    8568:	881b      	ldrh	r3, [r3, #0]
				LCD_setCursor(0,1);
    856a:	2000      	movs	r0, #0
				download_Size +=received_bytes;
    856c:	18e4      	adds	r4, r4, r3
				LCD_setCursor(0,1);
    856e:	4b0d      	ldr	r3, [pc, #52]	; (85a4 <download_firmware_into_flash+0xc4>)
    8570:	4798      	blx	r3
				lcd_printf("d_Size:%lu",download_Size);
    8572:	480d      	ldr	r0, [pc, #52]	; (85a8 <download_firmware_into_flash+0xc8>)
    8574:	0021      	movs	r1, r4
    8576:	4b09      	ldr	r3, [pc, #36]	; (859c <download_firmware_into_flash+0xbc>)
    8578:	4798      	blx	r3
				vTaskDelay(50/portTICK_PERIOD_MS);
    857a:	2032      	movs	r0, #50	; 0x32
    857c:	e7e6      	b.n	854c <download_firmware_into_flash+0x6c>
				LCD_clear();
    857e:	4b06      	ldr	r3, [pc, #24]	; (8598 <download_firmware_into_flash+0xb8>)
    8580:	4798      	blx	r3
				lcd_printf("   FTP ERROR    ");
    8582:	4810      	ldr	r0, [pc, #64]	; (85c4 <download_firmware_into_flash+0xe4>)
    8584:	4b05      	ldr	r3, [pc, #20]	; (859c <download_firmware_into_flash+0xbc>)
    8586:	4798      	blx	r3
				vTaskDelay(2000);
    8588:	20fa      	movs	r0, #250	; 0xfa
    858a:	4b0b      	ldr	r3, [pc, #44]	; (85b8 <download_firmware_into_flash+0xd8>)
    858c:	00c0      	lsls	r0, r0, #3
    858e:	4798      	blx	r3
				return ('E');
    8590:	2045      	movs	r0, #69	; 0x45
		lcd_printf("   FTP ERROR    ");
		vTaskDelay(2000);
		#endif
		return ('E');
	}
}
    8592:	b041      	add	sp, #260	; 0x104
    8594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8596:	46c0      	nop			; (mov r8, r8)
    8598:	0000118d 	.word	0x0000118d
    859c:	00001429 	.word	0x00001429
    85a0:	0000a41e 	.word	0x0000a41e
    85a4:	000011d9 	.word	0x000011d9
    85a8:	0000a429 	.word	0x0000a429
    85ac:	0000924b 	.word	0x0000924b
    85b0:	00000da5 	.word	0x00000da5
    85b4:	00000dc9 	.word	0x00000dc9
    85b8:	00003d99 	.word	0x00003d99
    85bc:	20000b80 	.word	0x20000b80
    85c0:	00001d45 	.word	0x00001d45
    85c4:	0000a434 	.word	0x0000a434

000085c8 <program_memory>:


bool program_memory(uint32_t firmware_size)
{
    85c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	current_page = APP_START_ADDRESS / NVMCTRL_PAGE_SIZE;
	curr_address = 0;
	
	/* Erase flash rows to fit new firmware */
	rows_clear = ((firmware_size / NVMCTRL_ROW_SIZE) + 1);
	for (i = 0; i < rows_clear; i++)
    85ca:	2580      	movs	r5, #128	; 0x80
	rows_clear = ((firmware_size / NVMCTRL_ROW_SIZE) + 1);
    85cc:	0a04      	lsrs	r4, r0, #8
    85ce:	3401      	adds	r4, #1
    85d0:	b2a4      	uxth	r4, r4
    85d2:	3401      	adds	r4, #1
{
    85d4:	b095      	sub	sp, #84	; 0x54
    85d6:	34ff      	adds	r4, #255	; 0xff
    85d8:	9001      	str	r0, [sp, #4]
    85da:	0224      	lsls	r4, r4, #8
	for (i = 0; i < rows_clear; i++)
    85dc:	026d      	lsls	r5, r5, #9
    85de:	42a5      	cmp	r5, r4
    85e0:	d12d      	bne.n	863e <program_memory+0x76>
	
	/* Program the flash memory page by page */
	do
	{
		/* Open the input file */
		if (j<(firmware_size/64))
    85e2:	2400      	movs	r4, #0
    85e4:	9b01      	ldr	r3, [sp, #4]
    85e6:	4d28      	ldr	r5, [pc, #160]	; (8688 <program_memory+0xc0>)
    85e8:	099b      	lsrs	r3, r3, #6
    85ea:	9302      	str	r3, [sp, #8]
    85ec:	4b27      	ldr	r3, [pc, #156]	; (868c <program_memory+0xc4>)
    85ee:	9a02      	ldr	r2, [sp, #8]
    85f0:	18eb      	adds	r3, r5, r3
    85f2:	b29b      	uxth	r3, r3
    85f4:	0199      	lsls	r1, r3, #6
    85f6:	4293      	cmp	r3, r2
    85f8:	d229      	bcs.n	864e <program_memory+0x86>
		{
			uint32_t address = j * 64;
			at25dfx_chip_read_buffer(&at25dfx_chip,address,page_buffer,64);
    85fa:	2340      	movs	r3, #64	; 0x40
    85fc:	aa04      	add	r2, sp, #16
    85fe:	4e24      	ldr	r6, [pc, #144]	; (8690 <program_memory+0xc8>)
    8600:	4824      	ldr	r0, [pc, #144]	; (8694 <program_memory+0xcc>)
    8602:	47b0      	blx	r6
			
			curr_address +=64;
    8604:	3440      	adds	r4, #64	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
    8606:	b672      	cpsid	i
    8608:	f3bf 8f5f 	dmb	sy
			j++;
			
			/* Disable the global interrupts */
			cpu_irq_disable();
    860c:	2300      	movs	r3, #0
    860e:	4f22      	ldr	r7, [pc, #136]	; (8698 <program_memory+0xd0>)
    8610:	703b      	strb	r3, [r7, #0]
    8612:	4b22      	ldr	r3, [pc, #136]	; (869c <program_memory+0xd4>)
    8614:	18ee      	adds	r6, r5, r3
    8616:	01b6      	lsls	r6, r6, #6
			
			/* Program the Flash Memory. */
			/* Write page buffer to flash */
			do {
				error_code = nvm_write_buffer(current_page * NVMCTRL_PAGE_SIZE,page_buffer, 64);
    8618:	2240      	movs	r2, #64	; 0x40
    861a:	a904      	add	r1, sp, #16
    861c:	0030      	movs	r0, r6
    861e:	4b20      	ldr	r3, [pc, #128]	; (86a0 <program_memory+0xd8>)
    8620:	4798      	blx	r3
			} while (error_code == STATUS_BUSY);
    8622:	2805      	cmp	r0, #5
    8624:	d0f8      	beq.n	8618 <program_memory+0x50>

			/* Enable the global interrupts */
			cpu_irq_enable();
    8626:	2301      	movs	r3, #1
    8628:	703b      	strb	r3, [r7, #0]
    862a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    862e:	b662      	cpsie	i
			cpu_irq_enable();
			
			current_page++;
		}
		
	} while (curr_address < firmware_size);
    8630:	9b01      	ldr	r3, [sp, #4]
    8632:	3501      	adds	r5, #1
    8634:	429c      	cmp	r4, r3
    8636:	d3d9      	bcc.n	85ec <program_memory+0x24>
	
	return true;
}
    8638:	2001      	movs	r0, #1
    863a:	b015      	add	sp, #84	; 0x54
    863c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			error_code = nvm_erase_row((APP_START_ADDRESS) + (NVMCTRL_ROW_SIZE * i));
    863e:	0028      	movs	r0, r5
    8640:	4b18      	ldr	r3, [pc, #96]	; (86a4 <program_memory+0xdc>)
    8642:	4798      	blx	r3
		} while (error_code == STATUS_BUSY);
    8644:	2805      	cmp	r0, #5
    8646:	d0fa      	beq.n	863e <program_memory+0x76>
    8648:	3501      	adds	r5, #1
    864a:	35ff      	adds	r5, #255	; 0xff
    864c:	e7c7      	b.n	85de <program_memory+0x16>
			at25dfx_chip_read_buffer(&at25dfx_chip,address,page_buffer,(firmware_size % 64));
    864e:	233f      	movs	r3, #63	; 0x3f
    8650:	9e01      	ldr	r6, [sp, #4]
    8652:	aa04      	add	r2, sp, #16
    8654:	401e      	ands	r6, r3
    8656:	b2b3      	uxth	r3, r6
    8658:	4f0d      	ldr	r7, [pc, #52]	; (8690 <program_memory+0xc8>)
    865a:	480e      	ldr	r0, [pc, #56]	; (8694 <program_memory+0xcc>)
    865c:	9303      	str	r3, [sp, #12]
			curr_address += (firmware_size % 64);
    865e:	19a4      	adds	r4, r4, r6
			at25dfx_chip_read_buffer(&at25dfx_chip,address,page_buffer,(firmware_size % 64));
    8660:	47b8      	blx	r7
  __ASM volatile ("cpsid i" : : : "memory");
    8662:	b672      	cpsid	i
    8664:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    8668:	2300      	movs	r3, #0
    866a:	4e0b      	ldr	r6, [pc, #44]	; (8698 <program_memory+0xd0>)
    866c:	7033      	strb	r3, [r6, #0]
    866e:	4b0b      	ldr	r3, [pc, #44]	; (869c <program_memory+0xd4>)
    8670:	18ef      	adds	r7, r5, r3
    8672:	01bf      	lsls	r7, r7, #6
				error_code = nvm_write_buffer(current_page * NVMCTRL_PAGE_SIZE,page_buffer, (firmware_size % 64));
    8674:	9a03      	ldr	r2, [sp, #12]
    8676:	a904      	add	r1, sp, #16
    8678:	0038      	movs	r0, r7
    867a:	4b09      	ldr	r3, [pc, #36]	; (86a0 <program_memory+0xd8>)
    867c:	4798      	blx	r3
			} while (error_code == STATUS_BUSY);
    867e:	2805      	cmp	r0, #5
    8680:	d0f8      	beq.n	8674 <program_memory+0xac>
			cpu_irq_enable();
    8682:	2301      	movs	r3, #1
    8684:	7033      	strb	r3, [r6, #0]
    8686:	e7d0      	b.n	862a <program_memory+0x62>
    8688:	00000401 	.word	0x00000401
    868c:	fffffbff 	.word	0xfffffbff
    8690:	00001cf5 	.word	0x00001cf5
    8694:	20000b80 	.word	0x20000b80
    8698:	20000120 	.word	0x20000120
    869c:	03ffffff 	.word	0x03ffffff
    86a0:	00006e25 	.word	0x00006e25
    86a4:	00006f29 	.word	0x00006f29

000086a8 <vTask_FTP>:
{
    86a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t firmware_size = 0;
    86aa:	2400      	movs	r4, #0
	GSM_PWR_AS_OP;
    86ac:	2580      	movs	r5, #128	; 0x80
{
    86ae:	b089      	sub	sp, #36	; 0x24
	GSM_PWR_AS_OP;
    86b0:	4ae0      	ldr	r2, [pc, #896]	; (8a34 <vTask_FTP+0x38c>)
	uint32_t firmware_size = 0;
    86b2:	9407      	str	r4, [sp, #28]
	GSM_PWR_AS_OP;
    86b4:	6813      	ldr	r3, [r2, #0]
    86b6:	026d      	lsls	r5, r5, #9
    86b8:	432b      	orrs	r3, r5
    86ba:	6013      	str	r3, [r2, #0]
	gsm_init();
    86bc:	4bde      	ldr	r3, [pc, #888]	; (8a38 <vTask_FTP+0x390>)
    86be:	4798      	blx	r3
	LCD_clear();
    86c0:	4bde      	ldr	r3, [pc, #888]	; (8a3c <vTask_FTP+0x394>)
    86c2:	4798      	blx	r3
	lcd_printf("    STARTING    ");
    86c4:	48de      	ldr	r0, [pc, #888]	; (8a40 <vTask_FTP+0x398>)
    86c6:	4edf      	ldr	r6, [pc, #892]	; (8a44 <vTask_FTP+0x39c>)
    86c8:	47b0      	blx	r6
	LCD_setCursor(0,1);
    86ca:	2101      	movs	r1, #1
    86cc:	4bde      	ldr	r3, [pc, #888]	; (8a48 <vTask_FTP+0x3a0>)
    86ce:	0020      	movs	r0, r4
    86d0:	4798      	blx	r3
	lcd_printf("   GSM SERVICE  ");
    86d2:	48de      	ldr	r0, [pc, #888]	; (8a4c <vTask_FTP+0x3a4>)
    86d4:	47b0      	blx	r6
	config->direction  = PORT_PIN_DIR_INPUT;
    86d6:	a906      	add	r1, sp, #24
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
    86d8:	4bdd      	ldr	r3, [pc, #884]	; (8a50 <vTask_FTP+0x3a8>)
    86da:	201b      	movs	r0, #27
    86dc:	700c      	strb	r4, [r1, #0]
	config->powersave  = false;
    86de:	708c      	strb	r4, [r1, #2]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    86e0:	704c      	strb	r4, [r1, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
    86e2:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    86e4:	4bdb      	ldr	r3, [pc, #876]	; (8a54 <vTask_FTP+0x3ac>)
    86e6:	6a1a      	ldr	r2, [r3, #32]
    86e8:	9305      	str	r3, [sp, #20]
	if(GSM_STATUS_OK)
    86ea:	0113      	lsls	r3, r2, #4
    86ec:	d50c      	bpl.n	8708 <vTask_FTP+0x60>
		GSM_PWR_ON;
    86ee:	4cda      	ldr	r4, [pc, #872]	; (8a58 <vTask_FTP+0x3b0>)
		vTaskDelay(3000);
    86f0:	48da      	ldr	r0, [pc, #872]	; (8a5c <vTask_FTP+0x3b4>)
		GSM_PWR_ON;
    86f2:	6823      	ldr	r3, [r4, #0]
    86f4:	431d      	orrs	r5, r3
    86f6:	6025      	str	r5, [r4, #0]
		vTaskDelay(3000);
    86f8:	4dd9      	ldr	r5, [pc, #868]	; (8a60 <vTask_FTP+0x3b8>)
    86fa:	47a8      	blx	r5
		GSM_PWR_OFF;
    86fc:	6823      	ldr	r3, [r4, #0]
    86fe:	4ad9      	ldr	r2, [pc, #868]	; (8a64 <vTask_FTP+0x3bc>)
		vTaskDelay(5000);
    8700:	48d9      	ldr	r0, [pc, #868]	; (8a68 <vTask_FTP+0x3c0>)
		GSM_PWR_OFF;
    8702:	4013      	ands	r3, r2
    8704:	6023      	str	r3, [r4, #0]
		vTaskDelay(5000);
    8706:	47a8      	blx	r5
						boolconfig_gprs  = true;
    8708:	2300      	movs	r3, #0
    870a:	001d      	movs	r5, r3
    870c:	001e      	movs	r6, r3
    870e:	9304      	str	r3, [sp, #16]
    8710:	9303      	str	r3, [sp, #12]
    8712:	0034      	movs	r4, r6
    8714:	9b05      	ldr	r3, [sp, #20]
    8716:	6a1f      	ldr	r7, [r3, #32]
    8718:	2380      	movs	r3, #128	; 0x80
    871a:	051b      	lsls	r3, r3, #20
    871c:	401f      	ands	r7, r3
		if (GSM_STATUS_OK)
    871e:	d100      	bne.n	8722 <vTask_FTP+0x7a>
    8720:	e202      	b.n	8b28 <vTask_FTP+0x480>
			if (boolGsm_config_flag == false)
    8722:	2c00      	cmp	r4, #0
    8724:	d132      	bne.n	878c <vTask_FTP+0xe4>
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
    8726:	4bd1      	ldr	r3, [pc, #836]	; (8a6c <vTask_FTP+0x3c4>)
    8728:	4798      	blx	r3
    872a:	2809      	cmp	r0, #9
    872c:	d129      	bne.n	8782 <vTask_FTP+0xda>
					if(gsm_config_module()==GSM_ERROR_NONE)
    872e:	4bd0      	ldr	r3, [pc, #832]	; (8a70 <vTask_FTP+0x3c8>)
    8730:	4798      	blx	r3
    8732:	2800      	cmp	r0, #0
    8734:	d1ee      	bne.n	8714 <vTask_FTP+0x6c>
						LCD_clear();
    8736:	4bc1      	ldr	r3, [pc, #772]	; (8a3c <vTask_FTP+0x394>)
    8738:	4798      	blx	r3
						lcd_printf("    DISABLE     ");
    873a:	4fc2      	ldr	r7, [pc, #776]	; (8a44 <vTask_FTP+0x39c>)
    873c:	48cd      	ldr	r0, [pc, #820]	; (8a74 <vTask_FTP+0x3cc>)
    873e:	47b8      	blx	r7
						LCD_setCursor(0,1);
    8740:	2101      	movs	r1, #1
    8742:	0020      	movs	r0, r4
    8744:	4bc0      	ldr	r3, [pc, #768]	; (8a48 <vTask_FTP+0x3a0>)
    8746:	4798      	blx	r3
						lcd_printf(" CALL,SMS,TIME  ");
    8748:	48cb      	ldr	r0, [pc, #812]	; (8a78 <vTask_FTP+0x3d0>)
    874a:	47b8      	blx	r7
						vTaskDelay(2000);
    874c:	20fa      	movs	r0, #250	; 0xfa
    874e:	4bc4      	ldr	r3, [pc, #784]	; (8a60 <vTask_FTP+0x3b8>)
    8750:	00c0      	lsls	r0, r0, #3
    8752:	4798      	blx	r3
						gsm_reject_all_incomming_calls();
    8754:	4bc9      	ldr	r3, [pc, #804]	; (8a7c <vTask_FTP+0x3d4>)
    8756:	4798      	blx	r3
						gsm_disable_new_sms_message_indications();
    8758:	4bc9      	ldr	r3, [pc, #804]	; (8a80 <vTask_FTP+0x3d8>)
    875a:	4798      	blx	r3
						gsm_disable_network_time_update();
    875c:	4bc9      	ldr	r3, [pc, #804]	; (8a84 <vTask_FTP+0x3dc>)
    875e:	4798      	blx	r3
						LCD_clear();
    8760:	4bb6      	ldr	r3, [pc, #728]	; (8a3c <vTask_FTP+0x394>)
    8762:	4798      	blx	r3
						lcd_printf("   CONNECTING  ");
    8764:	48c8      	ldr	r0, [pc, #800]	; (8a88 <vTask_FTP+0x3e0>)
    8766:	47b8      	blx	r7
						LCD_setCursor(0,1);
    8768:	0020      	movs	r0, r4
    876a:	2101      	movs	r1, #1
    876c:	4bb6      	ldr	r3, [pc, #728]	; (8a48 <vTask_FTP+0x3a0>)
    876e:	4798      	blx	r3
						lcd_printf("     SERVER    ");
    8770:	48c6      	ldr	r0, [pc, #792]	; (8a8c <vTask_FTP+0x3e4>)
    8772:	47b8      	blx	r7
						boolGsm_config_flag = true;
    8774:	3401      	adds	r4, #1
    8776:	e7cd      	b.n	8714 <vTask_FTP+0x6c>
								boolserver_connect  = true;
    8778:	9d03      	ldr	r5, [sp, #12]
    877a:	002e      	movs	r6, r5
    877c:	e7c9      	b.n	8712 <vTask_FTP+0x6a>
    877e:	9e03      	ldr	r6, [sp, #12]
    8780:	e7c7      	b.n	8712 <vTask_FTP+0x6a>
					vTaskDelay(2000/portTICK_PERIOD_MS);
    8782:	20fa      	movs	r0, #250	; 0xfa
    8784:	4bb6      	ldr	r3, [pc, #728]	; (8a60 <vTask_FTP+0x3b8>)
    8786:	00c0      	lsls	r0, r0, #3
    8788:	4798      	blx	r3
    878a:	e7c3      	b.n	8714 <vTask_FTP+0x6c>
				if (boolconfig_gprs == false)
    878c:	2e00      	cmp	r6, #0
    878e:	d109      	bne.n	87a4 <vTask_FTP+0xfc>
					if (gsm_config_gprs() == GSM_ERROR_NONE)
    8790:	4bbf      	ldr	r3, [pc, #764]	; (8a90 <vTask_FTP+0x3e8>)
    8792:	4798      	blx	r3
    8794:	2800      	cmp	r0, #0
    8796:	d1bd      	bne.n	8714 <vTask_FTP+0x6c>
						vTaskDelay(1000/portTICK_PERIOD_MS);
    8798:	20fa      	movs	r0, #250	; 0xfa
    879a:	4bb1      	ldr	r3, [pc, #708]	; (8a60 <vTask_FTP+0x3b8>)
    879c:	0080      	lsls	r0, r0, #2
    879e:	4798      	blx	r3
						boolconfig_gprs  = true;
    87a0:	0026      	movs	r6, r4
    87a2:	e7b7      	b.n	8714 <vTask_FTP+0x6c>
					if (boolstart_gprs == false)
    87a4:	9b03      	ldr	r3, [sp, #12]
    87a6:	2b00      	cmp	r3, #0
    87a8:	d10a      	bne.n	87c0 <vTask_FTP+0x118>
						if (gsm_start_gprs() == GSM_ERROR_NONE)
    87aa:	4bba      	ldr	r3, [pc, #744]	; (8a94 <vTask_FTP+0x3ec>)
    87ac:	4798      	blx	r3
    87ae:	0034      	movs	r4, r6
    87b0:	2800      	cmp	r0, #0
    87b2:	d1af      	bne.n	8714 <vTask_FTP+0x6c>
							vTaskDelay(1000/portTICK_PERIOD_MS);
    87b4:	20fa      	movs	r0, #250	; 0xfa
    87b6:	4baa      	ldr	r3, [pc, #680]	; (8a60 <vTask_FTP+0x3b8>)
    87b8:	0080      	lsls	r0, r0, #2
    87ba:	4798      	blx	r3
							boolstart_gprs  = true;
    87bc:	9603      	str	r6, [sp, #12]
    87be:	e7a9      	b.n	8714 <vTask_FTP+0x6c>
						if (boolserver_connect == false)
    87c0:	2d00      	cmp	r5, #0
    87c2:	d141      	bne.n	8848 <vTask_FTP+0x1a0>
							if (config_ftp(ftp_path_parameter.ftp_address,ftp_user_parameter.ftp_username,
    87c4:	4bb4      	ldr	r3, [pc, #720]	; (8a98 <vTask_FTP+0x3f0>)
    87c6:	4ab5      	ldr	r2, [pc, #724]	; (8a9c <vTask_FTP+0x3f4>)
    87c8:	9300      	str	r3, [sp, #0]
    87ca:	49b5      	ldr	r1, [pc, #724]	; (8aa0 <vTask_FTP+0x3f8>)
    87cc:	4bb5      	ldr	r3, [pc, #724]	; (8aa4 <vTask_FTP+0x3fc>)
    87ce:	48b6      	ldr	r0, [pc, #728]	; (8aa8 <vTask_FTP+0x400>)
    87d0:	4cb6      	ldr	r4, [pc, #728]	; (8aac <vTask_FTP+0x404>)
    87d2:	47a0      	blx	r4
    87d4:	2800      	cmp	r0, #0
    87d6:	d0cf      	beq.n	8778 <vTask_FTP+0xd0>
								if (++ucharCounter>=100)
    87d8:	9b04      	ldr	r3, [sp, #16]
    87da:	3301      	adds	r3, #1
    87dc:	b2db      	uxtb	r3, r3
    87de:	9304      	str	r3, [sp, #16]
    87e0:	2b63      	cmp	r3, #99	; 0x63
    87e2:	d9cc      	bls.n	877e <vTask_FTP+0xd6>
									bootloader_parameter.firmware_update_error_code = 0xFF;
    87e4:	23ff      	movs	r3, #255	; 0xff
									bootloader_parameter.firmware_update_process_completed = true;
    87e6:	2601      	movs	r6, #1
									bootloader_parameter.firmware_download_pending = false;
    87e8:	49b1      	ldr	r1, [pc, #708]	; (8ab0 <vTask_FTP+0x408>)
									memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    87ea:	4cb2      	ldr	r4, [pc, #712]	; (8ab4 <vTask_FTP+0x40c>)
    87ec:	221c      	movs	r2, #28
									bootloader_parameter.firmware_update_error_code = 0xFF;
    87ee:	71cb      	strb	r3, [r1, #7]
									memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    87f0:	0020      	movs	r0, r4
    87f2:	4bb1      	ldr	r3, [pc, #708]	; (8ab8 <vTask_FTP+0x410>)
									bootloader_parameter.firmware_download_pending = false;
    87f4:	714d      	strb	r5, [r1, #5]
									bootloader_parameter.firmware_update_process_completed = true;
    87f6:	718e      	strb	r6, [r1, #6]
									memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    87f8:	4798      	blx	r3
									eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    87fa:	0021      	movs	r1, r4
    87fc:	4baf      	ldr	r3, [pc, #700]	; (8abc <vTask_FTP+0x414>)
    87fe:	0028      	movs	r0, r5
    8800:	4798      	blx	r3
									eeprom_emulator_commit_page_buffer();
    8802:	4baf      	ldr	r3, [pc, #700]	; (8ac0 <vTask_FTP+0x418>)
    8804:	4798      	blx	r3
									vTaskDelay(2000/portTICK_PERIOD_MS);
    8806:	20fa      	movs	r0, #250	; 0xfa
    8808:	4c95      	ldr	r4, [pc, #596]	; (8a60 <vTask_FTP+0x3b8>)
    880a:	00c0      	lsls	r0, r0, #3
    880c:	47a0      	blx	r4
									gsm_stop_gprs();
    880e:	4bad      	ldr	r3, [pc, #692]	; (8ac4 <vTask_FTP+0x41c>)
    8810:	4798      	blx	r3
									LCD_clear();
    8812:	4b8a      	ldr	r3, [pc, #552]	; (8a3c <vTask_FTP+0x394>)
    8814:	4798      	blx	r3
									lcd_printf("    ENABLE     ");
    8816:	48ac      	ldr	r0, [pc, #688]	; (8ac8 <vTask_FTP+0x420>)
    8818:	4f8a      	ldr	r7, [pc, #552]	; (8a44 <vTask_FTP+0x39c>)
    881a:	47b8      	blx	r7
									LCD_setCursor(0,1);
    881c:	0031      	movs	r1, r6
    881e:	0028      	movs	r0, r5
    8820:	4b89      	ldr	r3, [pc, #548]	; (8a48 <vTask_FTP+0x3a0>)
    8822:	4798      	blx	r3
									lcd_printf(" CALL,SMS,TIME  ");
    8824:	4894      	ldr	r0, [pc, #592]	; (8a78 <vTask_FTP+0x3d0>)
    8826:	47b8      	blx	r7
									vTaskDelay(2000);
    8828:	20fa      	movs	r0, #250	; 0xfa
    882a:	00c0      	lsls	r0, r0, #3
    882c:	47a0      	blx	r4
										gsm_enable_all_incomming_calls();
    882e:	4ba7      	ldr	r3, [pc, #668]	; (8acc <vTask_FTP+0x424>)
    8830:	4798      	blx	r3
										gsm_enable_new_sms_message_indications();
    8832:	4ba7      	ldr	r3, [pc, #668]	; (8ad0 <vTask_FTP+0x428>)
    8834:	4798      	blx	r3
										gsm_enable_network_time_update();
    8836:	4ba7      	ldr	r3, [pc, #668]	; (8ad4 <vTask_FTP+0x42c>)
    8838:	4798      	blx	r3
    883a:	b672      	cpsid	i
    883c:	f3bf 8f5f 	dmb	sy
										cpu_irq_disable();
    8840:	4ba5      	ldr	r3, [pc, #660]	; (8ad8 <vTask_FTP+0x430>)
    8842:	701d      	strb	r5, [r3, #0]
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
	NVIC_SystemReset();
    8844:	4ba5      	ldr	r3, [pc, #660]	; (8adc <vTask_FTP+0x434>)
    8846:	4798      	blx	r3
							LCD_clear();
    8848:	4b7c      	ldr	r3, [pc, #496]	; (8a3c <vTask_FTP+0x394>)
    884a:	4798      	blx	r3
							lcd_printf(" GET FILE SIZE:");
    884c:	48a4      	ldr	r0, [pc, #656]	; (8ae0 <vTask_FTP+0x438>)
    884e:	4c7d      	ldr	r4, [pc, #500]	; (8a44 <vTask_FTP+0x39c>)
    8850:	47a0      	blx	r4
							LCD_setCursor(0,1);
    8852:	2101      	movs	r1, #1
    8854:	2000      	movs	r0, #0
    8856:	4b7c      	ldr	r3, [pc, #496]	; (8a48 <vTask_FTP+0x3a0>)
    8858:	4798      	blx	r3
							ftp_size_error = gsm_get_the_size_of_specified_file_in_ftp_server(&firmware_size);
    885a:	a807      	add	r0, sp, #28
    885c:	4ba1      	ldr	r3, [pc, #644]	; (8ae4 <vTask_FTP+0x43c>)
    885e:	4798      	blx	r3
    8860:	4f7f      	ldr	r7, [pc, #508]	; (8a60 <vTask_FTP+0x3b8>)
    8862:	1e05      	subs	r5, r0, #0
							if (ftp_size_error == GSM_ERROR_NONE)
    8864:	d000      	beq.n	8868 <vTask_FTP+0x1c0>
    8866:	e0c2      	b.n	89ee <vTask_FTP+0x346>
								if (firmware_size != 0)
    8868:	9e07      	ldr	r6, [sp, #28]
    886a:	2e00      	cmp	r6, #0
    886c:	d100      	bne.n	8870 <vTask_FTP+0x1c8>
    886e:	e096      	b.n	899e <vTask_FTP+0x2f6>
									lcd_printf(" %lubyte",firmware_size);
    8870:	0031      	movs	r1, r6
    8872:	489d      	ldr	r0, [pc, #628]	; (8ae8 <vTask_FTP+0x440>)
    8874:	47a0      	blx	r4
									vTaskDelay(2000/portTICK_PERIOD_MS);
    8876:	20fa      	movs	r0, #250	; 0xfa
    8878:	00c0      	lsls	r0, r0, #3
    887a:	47b8      	blx	r7
									LCD_clear();
    887c:	4b6f      	ldr	r3, [pc, #444]	; (8a3c <vTask_FTP+0x394>)
    887e:	4798      	blx	r3
									lcd_printf("  DOWNLOADING   ");
    8880:	489a      	ldr	r0, [pc, #616]	; (8aec <vTask_FTP+0x444>)
    8882:	47a0      	blx	r4
									LCD_setCursor(0,1);
    8884:	4b70      	ldr	r3, [pc, #448]	; (8a48 <vTask_FTP+0x3a0>)
    8886:	2101      	movs	r1, #1
    8888:	0028      	movs	r0, r5
    888a:	4798      	blx	r3
									lcd_printf(" FIRMWARE FILE  ");
    888c:	4898      	ldr	r0, [pc, #608]	; (8af0 <vTask_FTP+0x448>)
    888e:	47a0      	blx	r4
									char ucharTemp_Var = download_firmware_into_flash(firmware_size);
    8890:	9807      	ldr	r0, [sp, #28]
    8892:	4b98      	ldr	r3, [pc, #608]	; (8af4 <vTask_FTP+0x44c>)
    8894:	4798      	blx	r3
									if (ucharTemp_Var != 'O')
    8896:	284f      	cmp	r0, #79	; 0x4f
    8898:	d023      	beq.n	88e2 <vTask_FTP+0x23a>
										bootloader_parameter.firmware_update_process_completed = true;
    889a:	2301      	movs	r3, #1
										bootloader_parameter.firmware_download_pending = false;
    889c:	4984      	ldr	r1, [pc, #528]	; (8ab0 <vTask_FTP+0x408>)
										memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    889e:	4e85      	ldr	r6, [pc, #532]	; (8ab4 <vTask_FTP+0x40c>)
										bootloader_parameter.firmware_update_process_completed = true;
    88a0:	718b      	strb	r3, [r1, #6]
										bootloader_parameter.firmware_update_error_code = 0xFF;
    88a2:	23ff      	movs	r3, #255	; 0xff
										memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    88a4:	221c      	movs	r2, #28
										bootloader_parameter.firmware_update_error_code = 0xFF;
    88a6:	71cb      	strb	r3, [r1, #7]
										memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    88a8:	0030      	movs	r0, r6
    88aa:	4b83      	ldr	r3, [pc, #524]	; (8ab8 <vTask_FTP+0x410>)
										bootloader_parameter.firmware_download_pending = false;
    88ac:	714d      	strb	r5, [r1, #5]
										memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    88ae:	4798      	blx	r3
										eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    88b0:	0031      	movs	r1, r6
    88b2:	0028      	movs	r0, r5
    88b4:	4b81      	ldr	r3, [pc, #516]	; (8abc <vTask_FTP+0x414>)
    88b6:	4798      	blx	r3
										eeprom_emulator_commit_page_buffer();
    88b8:	4b81      	ldr	r3, [pc, #516]	; (8ac0 <vTask_FTP+0x418>)
    88ba:	4798      	blx	r3
										vTaskDelay(2000/portTICK_PERIOD_MS);
    88bc:	20fa      	movs	r0, #250	; 0xfa
    88be:	00c0      	lsls	r0, r0, #3
    88c0:	47b8      	blx	r7
										gsm_stop_gprs();
    88c2:	4b80      	ldr	r3, [pc, #512]	; (8ac4 <vTask_FTP+0x41c>)
    88c4:	4798      	blx	r3
										LCD_clear();
    88c6:	4b5d      	ldr	r3, [pc, #372]	; (8a3c <vTask_FTP+0x394>)
    88c8:	4798      	blx	r3
										lcd_printf("    ENABLE     ");
    88ca:	487f      	ldr	r0, [pc, #508]	; (8ac8 <vTask_FTP+0x420>)
    88cc:	47a0      	blx	r4
										LCD_setCursor(0,1);
    88ce:	2101      	movs	r1, #1
    88d0:	0028      	movs	r0, r5
    88d2:	4b5d      	ldr	r3, [pc, #372]	; (8a48 <vTask_FTP+0x3a0>)
    88d4:	4798      	blx	r3
										lcd_printf(" CALL,SMS,TIME  ");
    88d6:	4868      	ldr	r0, [pc, #416]	; (8a78 <vTask_FTP+0x3d0>)
    88d8:	47a0      	blx	r4
										vTaskDelay(2000);
    88da:	20fa      	movs	r0, #250	; 0xfa
    88dc:	00c0      	lsls	r0, r0, #3
    88de:	47b8      	blx	r7
    88e0:	e7a5      	b.n	882e <vTask_FTP+0x186>
									LCD_clear();
    88e2:	4b56      	ldr	r3, [pc, #344]	; (8a3c <vTask_FTP+0x394>)
    88e4:	4798      	blx	r3
									lcd_printf("  PROGRAMMING   ");
    88e6:	4884      	ldr	r0, [pc, #528]	; (8af8 <vTask_FTP+0x450>)
    88e8:	47a0      	blx	r4
									if (!program_memory(firmware_size))
    88ea:	4b84      	ldr	r3, [pc, #528]	; (8afc <vTask_FTP+0x454>)
    88ec:	9807      	ldr	r0, [sp, #28]
    88ee:	4798      	blx	r3
									LCD_setCursor(0,1);
    88f0:	2101      	movs	r1, #1
    88f2:	0028      	movs	r0, r5
    88f4:	4b54      	ldr	r3, [pc, #336]	; (8a48 <vTask_FTP+0x3a0>)
    88f6:	4798      	blx	r3
    88f8:	2410      	movs	r4, #16
										LCD_write(0);
    88fa:	4b81      	ldr	r3, [pc, #516]	; (8b00 <vTask_FTP+0x458>)
    88fc:	2000      	movs	r0, #0
    88fe:	4798      	blx	r3
										delay_ms(100);
    8900:	4b80      	ldr	r3, [pc, #512]	; (8b04 <vTask_FTP+0x45c>)
    8902:	2000      	movs	r0, #0
    8904:	4798      	blx	r3
    8906:	4d80      	ldr	r5, [pc, #512]	; (8b08 <vTask_FTP+0x460>)
    8908:	2264      	movs	r2, #100	; 0x64
    890a:	2300      	movs	r3, #0
    890c:	2100      	movs	r1, #0
    890e:	47a8      	blx	r5
    8910:	2300      	movs	r3, #0
    8912:	4a7e      	ldr	r2, [pc, #504]	; (8b0c <vTask_FTP+0x464>)
    8914:	4d7e      	ldr	r5, [pc, #504]	; (8b10 <vTask_FTP+0x468>)
    8916:	1880      	adds	r0, r0, r2
    8918:	4159      	adcs	r1, r3
    891a:	3c01      	subs	r4, #1
    891c:	4a7d      	ldr	r2, [pc, #500]	; (8b14 <vTask_FTP+0x46c>)
    891e:	2300      	movs	r3, #0
    8920:	47a8      	blx	r5
    8922:	b2e4      	uxtb	r4, r4
    8924:	4b7c      	ldr	r3, [pc, #496]	; (8b18 <vTask_FTP+0x470>)
    8926:	4798      	blx	r3
									for (uint8_t i=0;i<16;i++)
    8928:	2c00      	cmp	r4, #0
    892a:	d1e6      	bne.n	88fa <vTask_FTP+0x252>
									LCD_clear();
    892c:	4b43      	ldr	r3, [pc, #268]	; (8a3c <vTask_FTP+0x394>)
    892e:	4798      	blx	r3
									lcd_printf("    ENABLE     ");
    8930:	4d44      	ldr	r5, [pc, #272]	; (8a44 <vTask_FTP+0x39c>)
    8932:	4865      	ldr	r0, [pc, #404]	; (8ac8 <vTask_FTP+0x420>)
    8934:	47a8      	blx	r5
									LCD_setCursor(0,1);
    8936:	2101      	movs	r1, #1
    8938:	0020      	movs	r0, r4
    893a:	4f43      	ldr	r7, [pc, #268]	; (8a48 <vTask_FTP+0x3a0>)
    893c:	47b8      	blx	r7
									lcd_printf(" CALL,SMS,TIME  ");
    893e:	484e      	ldr	r0, [pc, #312]	; (8a78 <vTask_FTP+0x3d0>)
    8940:	47a8      	blx	r5
									vTaskDelay(2000);
    8942:	20fa      	movs	r0, #250	; 0xfa
    8944:	4e46      	ldr	r6, [pc, #280]	; (8a60 <vTask_FTP+0x3b8>)
    8946:	00c0      	lsls	r0, r0, #3
    8948:	47b0      	blx	r6
									gsm_enable_all_incomming_calls();
    894a:	4b60      	ldr	r3, [pc, #384]	; (8acc <vTask_FTP+0x424>)
    894c:	4798      	blx	r3
									gsm_enable_new_sms_message_indications();
    894e:	4b60      	ldr	r3, [pc, #384]	; (8ad0 <vTask_FTP+0x428>)
    8950:	4798      	blx	r3
									gsm_enable_network_time_update();
    8952:	4b60      	ldr	r3, [pc, #384]	; (8ad4 <vTask_FTP+0x42c>)
    8954:	4798      	blx	r3
									LCD_clear();
    8956:	4b39      	ldr	r3, [pc, #228]	; (8a3c <vTask_FTP+0x394>)
    8958:	4798      	blx	r3
									lcd_printf("    STARTING    ");
    895a:	4839      	ldr	r0, [pc, #228]	; (8a40 <vTask_FTP+0x398>)
    895c:	47a8      	blx	r5
									LCD_setCursor(0,1);
    895e:	2101      	movs	r1, #1
    8960:	0020      	movs	r0, r4
    8962:	47b8      	blx	r7
									lcd_printf("  APPLICATION   ");
    8964:	486d      	ldr	r0, [pc, #436]	; (8b1c <vTask_FTP+0x474>)
    8966:	47a8      	blx	r5
									bootloader_parameter.firmware_update_process_completed = true;
    8968:	2301      	movs	r3, #1
									bootloader_parameter.firmware_download_pending = false;
    896a:	4951      	ldr	r1, [pc, #324]	; (8ab0 <vTask_FTP+0x408>)
									memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    896c:	4d51      	ldr	r5, [pc, #324]	; (8ab4 <vTask_FTP+0x40c>)
									bootloader_parameter.firmware_update_process_completed = true;
    896e:	718b      	strb	r3, [r1, #6]
									memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    8970:	221c      	movs	r2, #28
    8972:	4b51      	ldr	r3, [pc, #324]	; (8ab8 <vTask_FTP+0x410>)
    8974:	0028      	movs	r0, r5
									bootloader_parameter.firmware_download_pending = false;
    8976:	714c      	strb	r4, [r1, #5]
									bootloader_parameter.firmware_update_error_code = 0;
    8978:	71cc      	strb	r4, [r1, #7]
									memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    897a:	4798      	blx	r3
									eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    897c:	0029      	movs	r1, r5
    897e:	4b4f      	ldr	r3, [pc, #316]	; (8abc <vTask_FTP+0x414>)
    8980:	0020      	movs	r0, r4
    8982:	4798      	blx	r3
									eeprom_emulator_commit_page_buffer();
    8984:	4b4e      	ldr	r3, [pc, #312]	; (8ac0 <vTask_FTP+0x418>)
    8986:	4798      	blx	r3
									vTaskDelay(2000/portTICK_PERIOD_MS);
    8988:	20fa      	movs	r0, #250	; 0xfa
    898a:	00c0      	lsls	r0, r0, #3
    898c:	47b0      	blx	r6
								gsm_stop_gprs();
    898e:	4b4d      	ldr	r3, [pc, #308]	; (8ac4 <vTask_FTP+0x41c>)
    8990:	4798      	blx	r3
    8992:	b672      	cpsid	i
    8994:	f3bf 8f5f 	dmb	sy
								cpu_irq_disable();
    8998:	4b4f      	ldr	r3, [pc, #316]	; (8ad8 <vTask_FTP+0x430>)
    899a:	701c      	strb	r4, [r3, #0]
    899c:	e752      	b.n	8844 <vTask_FTP+0x19c>
									LCD_clear();
    899e:	4b27      	ldr	r3, [pc, #156]	; (8a3c <vTask_FTP+0x394>)
    89a0:	4798      	blx	r3
									lcd_printf("     ERROR:     ");
    89a2:	485f      	ldr	r0, [pc, #380]	; (8b20 <vTask_FTP+0x478>)
    89a4:	47a0      	blx	r4
									LCD_setCursor(0,1);
    89a6:	4b28      	ldr	r3, [pc, #160]	; (8a48 <vTask_FTP+0x3a0>)
    89a8:	0030      	movs	r0, r6
    89aa:	2101      	movs	r1, #1
    89ac:	4798      	blx	r3
									lcd_printf("       %d       ",ftp_size_error);
    89ae:	0031      	movs	r1, r6
    89b0:	485c      	ldr	r0, [pc, #368]	; (8b24 <vTask_FTP+0x47c>)
    89b2:	47a0      	blx	r4
									vTaskDelay(5000);
    89b4:	482c      	ldr	r0, [pc, #176]	; (8a68 <vTask_FTP+0x3c0>)
    89b6:	47b8      	blx	r7
									bootloader_parameter.firmware_update_process_completed = true;
    89b8:	2301      	movs	r3, #1
									bootloader_parameter.firmware_download_pending = false;
    89ba:	493d      	ldr	r1, [pc, #244]	; (8ab0 <vTask_FTP+0x408>)
									memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    89bc:	4c3d      	ldr	r4, [pc, #244]	; (8ab4 <vTask_FTP+0x40c>)
    89be:	221c      	movs	r2, #28
									bootloader_parameter.firmware_update_process_completed = true;
    89c0:	718b      	strb	r3, [r1, #6]
									memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    89c2:	0020      	movs	r0, r4
    89c4:	4b3c      	ldr	r3, [pc, #240]	; (8ab8 <vTask_FTP+0x410>)
									bootloader_parameter.firmware_download_pending = false;
    89c6:	714e      	strb	r6, [r1, #5]
									bootloader_parameter.firmware_update_error_code = ftp_size_error;
    89c8:	71ce      	strb	r6, [r1, #7]
									memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    89ca:	4798      	blx	r3
									eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    89cc:	0021      	movs	r1, r4
    89ce:	0030      	movs	r0, r6
    89d0:	4b3a      	ldr	r3, [pc, #232]	; (8abc <vTask_FTP+0x414>)
    89d2:	4798      	blx	r3
									eeprom_emulator_commit_page_buffer();
    89d4:	4b3a      	ldr	r3, [pc, #232]	; (8ac0 <vTask_FTP+0x418>)
    89d6:	4798      	blx	r3
									vTaskDelay(2000/portTICK_PERIOD_MS);
    89d8:	20fa      	movs	r0, #250	; 0xfa
    89da:	00c0      	lsls	r0, r0, #3
    89dc:	47b8      	blx	r7
									gsm_stop_gprs();
    89de:	4b39      	ldr	r3, [pc, #228]	; (8ac4 <vTask_FTP+0x41c>)
    89e0:	4798      	blx	r3
    89e2:	b672      	cpsid	i
    89e4:	f3bf 8f5f 	dmb	sy
									cpu_irq_disable();
    89e8:	4b3b      	ldr	r3, [pc, #236]	; (8ad8 <vTask_FTP+0x430>)
    89ea:	701e      	strb	r6, [r3, #0]
    89ec:	e72a      	b.n	8844 <vTask_FTP+0x19c>
								LCD_clear();
    89ee:	4b13      	ldr	r3, [pc, #76]	; (8a3c <vTask_FTP+0x394>)
    89f0:	4798      	blx	r3
								lcd_printf("     ERROR:     ");
    89f2:	484b      	ldr	r0, [pc, #300]	; (8b20 <vTask_FTP+0x478>)
    89f4:	47a0      	blx	r4
								LCD_setCursor(0,1);
    89f6:	4b14      	ldr	r3, [pc, #80]	; (8a48 <vTask_FTP+0x3a0>)
    89f8:	2101      	movs	r1, #1
    89fa:	2000      	movs	r0, #0
    89fc:	4798      	blx	r3
								lcd_printf("       %d       ",ftp_size_error);
    89fe:	0029      	movs	r1, r5
    8a00:	4848      	ldr	r0, [pc, #288]	; (8b24 <vTask_FTP+0x47c>)
    8a02:	47a0      	blx	r4
								vTaskDelay(5000);
    8a04:	4818      	ldr	r0, [pc, #96]	; (8a68 <vTask_FTP+0x3c0>)
    8a06:	47b8      	blx	r7
								bootloader_parameter.firmware_update_process_completed = true;
    8a08:	2301      	movs	r3, #1
								bootloader_parameter.firmware_download_pending = false;
    8a0a:	2400      	movs	r4, #0
    8a0c:	4928      	ldr	r1, [pc, #160]	; (8ab0 <vTask_FTP+0x408>)
								memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    8a0e:	221c      	movs	r2, #28
								bootloader_parameter.firmware_update_error_code = ftp_size_error;
    8a10:	71cd      	strb	r5, [r1, #7]
								memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    8a12:	4d28      	ldr	r5, [pc, #160]	; (8ab4 <vTask_FTP+0x40c>)
								bootloader_parameter.firmware_update_process_completed = true;
    8a14:	718b      	strb	r3, [r1, #6]
								memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    8a16:	0028      	movs	r0, r5
    8a18:	4b27      	ldr	r3, [pc, #156]	; (8ab8 <vTask_FTP+0x410>)
								bootloader_parameter.firmware_download_pending = false;
    8a1a:	714c      	strb	r4, [r1, #5]
								memcpy(page_data,&bootloader_parameter,sizeof(bootloader_parameter));
    8a1c:	4798      	blx	r3
								eeprom_emulator_write_page(BOOTLOADER_PARAMETER_PAGE, page_data);
    8a1e:	0029      	movs	r1, r5
    8a20:	0020      	movs	r0, r4
    8a22:	4b26      	ldr	r3, [pc, #152]	; (8abc <vTask_FTP+0x414>)
    8a24:	4798      	blx	r3
								eeprom_emulator_commit_page_buffer();
    8a26:	4b26      	ldr	r3, [pc, #152]	; (8ac0 <vTask_FTP+0x418>)
    8a28:	4798      	blx	r3
								vTaskDelay(2000/portTICK_PERIOD_MS);
    8a2a:	20fa      	movs	r0, #250	; 0xfa
    8a2c:	00c0      	lsls	r0, r0, #3
    8a2e:	47b8      	blx	r7
    8a30:	e7ad      	b.n	898e <vTask_FTP+0x2e6>
    8a32:	46c0      	nop			; (mov r8, r8)
    8a34:	41004480 	.word	0x41004480
    8a38:	00000171 	.word	0x00000171
    8a3c:	0000118d 	.word	0x0000118d
    8a40:	0000a4cd 	.word	0x0000a4cd
    8a44:	00001429 	.word	0x00001429
    8a48:	000011d9 	.word	0x000011d9
    8a4c:	0000a4de 	.word	0x0000a4de
    8a50:	00006fe1 	.word	0x00006fe1
    8a54:	41004400 	.word	0x41004400
    8a58:	41004490 	.word	0x41004490
    8a5c:	00000bb8 	.word	0x00000bb8
    8a60:	00003d99 	.word	0x00003d99
    8a64:	fffeffff 	.word	0xfffeffff
    8a68:	00001388 	.word	0x00001388
    8a6c:	0000047d 	.word	0x0000047d
    8a70:	00000745 	.word	0x00000745
    8a74:	0000a4ef 	.word	0x0000a4ef
    8a78:	0000a500 	.word	0x0000a500
    8a7c:	000006fd 	.word	0x000006fd
    8a80:	0000066d 	.word	0x0000066d
    8a84:	000006b5 	.word	0x000006b5
    8a88:	0000a511 	.word	0x0000a511
    8a8c:	0000a521 	.word	0x0000a521
    8a90:	00000f75 	.word	0x00000f75
    8a94:	00000f95 	.word	0x00000f95
    8a98:	20001087 	.word	0x20001087
    8a9c:	200010ed 	.word	0x200010ed
    8aa0:	200010dd 	.word	0x200010dd
    8aa4:	200010fd 	.word	0x200010fd
    8aa8:	20001069 	.word	0x20001069
    8aac:	00000fd1 	.word	0x00000fd1
    8ab0:	20001110 	.word	0x20001110
    8ab4:	2000109c 	.word	0x2000109c
    8ab8:	00009239 	.word	0x00009239
    8abc:	0000739d 	.word	0x0000739d
    8ac0:	00007371 	.word	0x00007371
    8ac4:	00000fb5 	.word	0x00000fb5
    8ac8:	0000a531 	.word	0x0000a531
    8acc:	00000721 	.word	0x00000721
    8ad0:	00000649 	.word	0x00000649
    8ad4:	00000691 	.word	0x00000691
    8ad8:	20000120 	.word	0x20000120
    8adc:	00007dcd 	.word	0x00007dcd
    8ae0:	0000a541 	.word	0x0000a541
    8ae4:	00000c31 	.word	0x00000c31
    8ae8:	0000a551 	.word	0x0000a551
    8aec:	0000a55a 	.word	0x0000a55a
    8af0:	0000a56b 	.word	0x0000a56b
    8af4:	000084e1 	.word	0x000084e1
    8af8:	0000a57c 	.word	0x0000a57c
    8afc:	000085c9 	.word	0x000085c9
    8b00:	0000117d 	.word	0x0000117d
    8b04:	00007aad 	.word	0x00007aad
    8b08:	00008f75 	.word	0x00008f75
    8b0c:	00001b57 	.word	0x00001b57
    8b10:	00008f35 	.word	0x00008f35
    8b14:	00001b58 	.word	0x00001b58
    8b18:	20000001 	.word	0x20000001
    8b1c:	0000a58d 	.word	0x0000a58d
    8b20:	0000a59e 	.word	0x0000a59e
    8b24:	0000a5af 	.word	0x0000a5af
			GSM_PWR_ON;
    8b28:	2380      	movs	r3, #128	; 0x80
    8b2a:	4c09      	ldr	r4, [pc, #36]	; (8b50 <vTask_FTP+0x4a8>)
    8b2c:	025b      	lsls	r3, r3, #9
    8b2e:	6822      	ldr	r2, [r4, #0]
			vTaskDelay(3000);
    8b30:	4d08      	ldr	r5, [pc, #32]	; (8b54 <vTask_FTP+0x4ac>)
			GSM_PWR_ON;
    8b32:	4313      	orrs	r3, r2
    8b34:	6023      	str	r3, [r4, #0]
			vTaskDelay(3000);
    8b36:	4808      	ldr	r0, [pc, #32]	; (8b58 <vTask_FTP+0x4b0>)
    8b38:	47a8      	blx	r5
			GSM_PWR_OFF;
    8b3a:	6823      	ldr	r3, [r4, #0]
    8b3c:	4a07      	ldr	r2, [pc, #28]	; (8b5c <vTask_FTP+0x4b4>)
			vTaskDelay(5000);
    8b3e:	4808      	ldr	r0, [pc, #32]	; (8b60 <vTask_FTP+0x4b8>)
			GSM_PWR_OFF;
    8b40:	4013      	ands	r3, r2
    8b42:	6023      	str	r3, [r4, #0]
			vTaskDelay(5000);
    8b44:	47a8      	blx	r5
			boolconfig_gprs				=false;
    8b46:	003e      	movs	r6, r7
			boolserver_connect			=false;
    8b48:	003d      	movs	r5, r7
			boolstart_gprs				=false;
    8b4a:	9703      	str	r7, [sp, #12]
			boolGsm_config_flag			=false;
    8b4c:	003c      	movs	r4, r7
    8b4e:	e5e1      	b.n	8714 <vTask_FTP+0x6c>
    8b50:	41004490 	.word	0x41004490
    8b54:	00003d99 	.word	0x00003d99
    8b58:	00000bb8 	.word	0x00000bb8
    8b5c:	fffeffff 	.word	0xfffeffff
    8b60:	00001388 	.word	0x00001388

00008b64 <main_suspend_lpm_action>:
    8b64:	4770      	bx	lr

00008b66 <main_remotewakeup_lpm_disable>:
    8b66:	4770      	bx	lr

00008b68 <main_remotewakeup_lpm_enable>:
{
}

void main_remotewakeup_lpm_enable(void)
{
}
    8b68:	4770      	bx	lr
	...

00008b6c <main_cdc_enable>:


bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    8b6c:	2001      	movs	r0, #1
    8b6e:	4b01      	ldr	r3, [pc, #4]	; (8b74 <main_cdc_enable+0x8>)
    8b70:	7018      	strb	r0, [r3, #0]
	return true;
}
    8b72:	4770      	bx	lr
    8b74:	20000b6c 	.word	0x20000b6c

00008b78 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    8b78:	2200      	movs	r2, #0
    8b7a:	4b01      	ldr	r3, [pc, #4]	; (8b80 <main_cdc_disable+0x8>)
    8b7c:	701a      	strb	r2, [r3, #0]
}
    8b7e:	4770      	bx	lr
    8b80:	20000b6c 	.word	0x20000b6c

00008b84 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
}
    8b84:	4770      	bx	lr

00008b86 <main_cdc_rx_notify>:

void main_cdc_rx_notify(uint8_t port)
{
}
    8b86:	4770      	bx	lr

00008b88 <main_cdc_set_coding>:

void main_cdc_set_coding(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    8b88:	4770      	bx	lr
	...

00008b8c <__gnu_thumb1_case_uqi>:
    8b8c:	b402      	push	{r1}
    8b8e:	4671      	mov	r1, lr
    8b90:	0849      	lsrs	r1, r1, #1
    8b92:	0049      	lsls	r1, r1, #1
    8b94:	5c09      	ldrb	r1, [r1, r0]
    8b96:	0049      	lsls	r1, r1, #1
    8b98:	448e      	add	lr, r1
    8b9a:	bc02      	pop	{r1}
    8b9c:	4770      	bx	lr
    8b9e:	46c0      	nop			; (mov r8, r8)

00008ba0 <__gnu_thumb1_case_shi>:
    8ba0:	b403      	push	{r0, r1}
    8ba2:	4671      	mov	r1, lr
    8ba4:	0849      	lsrs	r1, r1, #1
    8ba6:	0040      	lsls	r0, r0, #1
    8ba8:	0049      	lsls	r1, r1, #1
    8baa:	5e09      	ldrsh	r1, [r1, r0]
    8bac:	0049      	lsls	r1, r1, #1
    8bae:	448e      	add	lr, r1
    8bb0:	bc03      	pop	{r0, r1}
    8bb2:	4770      	bx	lr

00008bb4 <__udivsi3>:
    8bb4:	2200      	movs	r2, #0
    8bb6:	0843      	lsrs	r3, r0, #1
    8bb8:	428b      	cmp	r3, r1
    8bba:	d374      	bcc.n	8ca6 <__udivsi3+0xf2>
    8bbc:	0903      	lsrs	r3, r0, #4
    8bbe:	428b      	cmp	r3, r1
    8bc0:	d35f      	bcc.n	8c82 <__udivsi3+0xce>
    8bc2:	0a03      	lsrs	r3, r0, #8
    8bc4:	428b      	cmp	r3, r1
    8bc6:	d344      	bcc.n	8c52 <__udivsi3+0x9e>
    8bc8:	0b03      	lsrs	r3, r0, #12
    8bca:	428b      	cmp	r3, r1
    8bcc:	d328      	bcc.n	8c20 <__udivsi3+0x6c>
    8bce:	0c03      	lsrs	r3, r0, #16
    8bd0:	428b      	cmp	r3, r1
    8bd2:	d30d      	bcc.n	8bf0 <__udivsi3+0x3c>
    8bd4:	22ff      	movs	r2, #255	; 0xff
    8bd6:	0209      	lsls	r1, r1, #8
    8bd8:	ba12      	rev	r2, r2
    8bda:	0c03      	lsrs	r3, r0, #16
    8bdc:	428b      	cmp	r3, r1
    8bde:	d302      	bcc.n	8be6 <__udivsi3+0x32>
    8be0:	1212      	asrs	r2, r2, #8
    8be2:	0209      	lsls	r1, r1, #8
    8be4:	d065      	beq.n	8cb2 <__udivsi3+0xfe>
    8be6:	0b03      	lsrs	r3, r0, #12
    8be8:	428b      	cmp	r3, r1
    8bea:	d319      	bcc.n	8c20 <__udivsi3+0x6c>
    8bec:	e000      	b.n	8bf0 <__udivsi3+0x3c>
    8bee:	0a09      	lsrs	r1, r1, #8
    8bf0:	0bc3      	lsrs	r3, r0, #15
    8bf2:	428b      	cmp	r3, r1
    8bf4:	d301      	bcc.n	8bfa <__udivsi3+0x46>
    8bf6:	03cb      	lsls	r3, r1, #15
    8bf8:	1ac0      	subs	r0, r0, r3
    8bfa:	4152      	adcs	r2, r2
    8bfc:	0b83      	lsrs	r3, r0, #14
    8bfe:	428b      	cmp	r3, r1
    8c00:	d301      	bcc.n	8c06 <__udivsi3+0x52>
    8c02:	038b      	lsls	r3, r1, #14
    8c04:	1ac0      	subs	r0, r0, r3
    8c06:	4152      	adcs	r2, r2
    8c08:	0b43      	lsrs	r3, r0, #13
    8c0a:	428b      	cmp	r3, r1
    8c0c:	d301      	bcc.n	8c12 <__udivsi3+0x5e>
    8c0e:	034b      	lsls	r3, r1, #13
    8c10:	1ac0      	subs	r0, r0, r3
    8c12:	4152      	adcs	r2, r2
    8c14:	0b03      	lsrs	r3, r0, #12
    8c16:	428b      	cmp	r3, r1
    8c18:	d301      	bcc.n	8c1e <__udivsi3+0x6a>
    8c1a:	030b      	lsls	r3, r1, #12
    8c1c:	1ac0      	subs	r0, r0, r3
    8c1e:	4152      	adcs	r2, r2
    8c20:	0ac3      	lsrs	r3, r0, #11
    8c22:	428b      	cmp	r3, r1
    8c24:	d301      	bcc.n	8c2a <__udivsi3+0x76>
    8c26:	02cb      	lsls	r3, r1, #11
    8c28:	1ac0      	subs	r0, r0, r3
    8c2a:	4152      	adcs	r2, r2
    8c2c:	0a83      	lsrs	r3, r0, #10
    8c2e:	428b      	cmp	r3, r1
    8c30:	d301      	bcc.n	8c36 <__udivsi3+0x82>
    8c32:	028b      	lsls	r3, r1, #10
    8c34:	1ac0      	subs	r0, r0, r3
    8c36:	4152      	adcs	r2, r2
    8c38:	0a43      	lsrs	r3, r0, #9
    8c3a:	428b      	cmp	r3, r1
    8c3c:	d301      	bcc.n	8c42 <__udivsi3+0x8e>
    8c3e:	024b      	lsls	r3, r1, #9
    8c40:	1ac0      	subs	r0, r0, r3
    8c42:	4152      	adcs	r2, r2
    8c44:	0a03      	lsrs	r3, r0, #8
    8c46:	428b      	cmp	r3, r1
    8c48:	d301      	bcc.n	8c4e <__udivsi3+0x9a>
    8c4a:	020b      	lsls	r3, r1, #8
    8c4c:	1ac0      	subs	r0, r0, r3
    8c4e:	4152      	adcs	r2, r2
    8c50:	d2cd      	bcs.n	8bee <__udivsi3+0x3a>
    8c52:	09c3      	lsrs	r3, r0, #7
    8c54:	428b      	cmp	r3, r1
    8c56:	d301      	bcc.n	8c5c <__udivsi3+0xa8>
    8c58:	01cb      	lsls	r3, r1, #7
    8c5a:	1ac0      	subs	r0, r0, r3
    8c5c:	4152      	adcs	r2, r2
    8c5e:	0983      	lsrs	r3, r0, #6
    8c60:	428b      	cmp	r3, r1
    8c62:	d301      	bcc.n	8c68 <__udivsi3+0xb4>
    8c64:	018b      	lsls	r3, r1, #6
    8c66:	1ac0      	subs	r0, r0, r3
    8c68:	4152      	adcs	r2, r2
    8c6a:	0943      	lsrs	r3, r0, #5
    8c6c:	428b      	cmp	r3, r1
    8c6e:	d301      	bcc.n	8c74 <__udivsi3+0xc0>
    8c70:	014b      	lsls	r3, r1, #5
    8c72:	1ac0      	subs	r0, r0, r3
    8c74:	4152      	adcs	r2, r2
    8c76:	0903      	lsrs	r3, r0, #4
    8c78:	428b      	cmp	r3, r1
    8c7a:	d301      	bcc.n	8c80 <__udivsi3+0xcc>
    8c7c:	010b      	lsls	r3, r1, #4
    8c7e:	1ac0      	subs	r0, r0, r3
    8c80:	4152      	adcs	r2, r2
    8c82:	08c3      	lsrs	r3, r0, #3
    8c84:	428b      	cmp	r3, r1
    8c86:	d301      	bcc.n	8c8c <__udivsi3+0xd8>
    8c88:	00cb      	lsls	r3, r1, #3
    8c8a:	1ac0      	subs	r0, r0, r3
    8c8c:	4152      	adcs	r2, r2
    8c8e:	0883      	lsrs	r3, r0, #2
    8c90:	428b      	cmp	r3, r1
    8c92:	d301      	bcc.n	8c98 <__udivsi3+0xe4>
    8c94:	008b      	lsls	r3, r1, #2
    8c96:	1ac0      	subs	r0, r0, r3
    8c98:	4152      	adcs	r2, r2
    8c9a:	0843      	lsrs	r3, r0, #1
    8c9c:	428b      	cmp	r3, r1
    8c9e:	d301      	bcc.n	8ca4 <__udivsi3+0xf0>
    8ca0:	004b      	lsls	r3, r1, #1
    8ca2:	1ac0      	subs	r0, r0, r3
    8ca4:	4152      	adcs	r2, r2
    8ca6:	1a41      	subs	r1, r0, r1
    8ca8:	d200      	bcs.n	8cac <__udivsi3+0xf8>
    8caa:	4601      	mov	r1, r0
    8cac:	4152      	adcs	r2, r2
    8cae:	4610      	mov	r0, r2
    8cb0:	4770      	bx	lr
    8cb2:	e7ff      	b.n	8cb4 <__udivsi3+0x100>
    8cb4:	b501      	push	{r0, lr}
    8cb6:	2000      	movs	r0, #0
    8cb8:	f000 f8f0 	bl	8e9c <__aeabi_idiv0>
    8cbc:	bd02      	pop	{r1, pc}
    8cbe:	46c0      	nop			; (mov r8, r8)

00008cc0 <__aeabi_uidivmod>:
    8cc0:	2900      	cmp	r1, #0
    8cc2:	d0f7      	beq.n	8cb4 <__udivsi3+0x100>
    8cc4:	e776      	b.n	8bb4 <__udivsi3>
    8cc6:	4770      	bx	lr

00008cc8 <__divsi3>:
    8cc8:	4603      	mov	r3, r0
    8cca:	430b      	orrs	r3, r1
    8ccc:	d47f      	bmi.n	8dce <__divsi3+0x106>
    8cce:	2200      	movs	r2, #0
    8cd0:	0843      	lsrs	r3, r0, #1
    8cd2:	428b      	cmp	r3, r1
    8cd4:	d374      	bcc.n	8dc0 <__divsi3+0xf8>
    8cd6:	0903      	lsrs	r3, r0, #4
    8cd8:	428b      	cmp	r3, r1
    8cda:	d35f      	bcc.n	8d9c <__divsi3+0xd4>
    8cdc:	0a03      	lsrs	r3, r0, #8
    8cde:	428b      	cmp	r3, r1
    8ce0:	d344      	bcc.n	8d6c <__divsi3+0xa4>
    8ce2:	0b03      	lsrs	r3, r0, #12
    8ce4:	428b      	cmp	r3, r1
    8ce6:	d328      	bcc.n	8d3a <__divsi3+0x72>
    8ce8:	0c03      	lsrs	r3, r0, #16
    8cea:	428b      	cmp	r3, r1
    8cec:	d30d      	bcc.n	8d0a <__divsi3+0x42>
    8cee:	22ff      	movs	r2, #255	; 0xff
    8cf0:	0209      	lsls	r1, r1, #8
    8cf2:	ba12      	rev	r2, r2
    8cf4:	0c03      	lsrs	r3, r0, #16
    8cf6:	428b      	cmp	r3, r1
    8cf8:	d302      	bcc.n	8d00 <__divsi3+0x38>
    8cfa:	1212      	asrs	r2, r2, #8
    8cfc:	0209      	lsls	r1, r1, #8
    8cfe:	d065      	beq.n	8dcc <__divsi3+0x104>
    8d00:	0b03      	lsrs	r3, r0, #12
    8d02:	428b      	cmp	r3, r1
    8d04:	d319      	bcc.n	8d3a <__divsi3+0x72>
    8d06:	e000      	b.n	8d0a <__divsi3+0x42>
    8d08:	0a09      	lsrs	r1, r1, #8
    8d0a:	0bc3      	lsrs	r3, r0, #15
    8d0c:	428b      	cmp	r3, r1
    8d0e:	d301      	bcc.n	8d14 <__divsi3+0x4c>
    8d10:	03cb      	lsls	r3, r1, #15
    8d12:	1ac0      	subs	r0, r0, r3
    8d14:	4152      	adcs	r2, r2
    8d16:	0b83      	lsrs	r3, r0, #14
    8d18:	428b      	cmp	r3, r1
    8d1a:	d301      	bcc.n	8d20 <__divsi3+0x58>
    8d1c:	038b      	lsls	r3, r1, #14
    8d1e:	1ac0      	subs	r0, r0, r3
    8d20:	4152      	adcs	r2, r2
    8d22:	0b43      	lsrs	r3, r0, #13
    8d24:	428b      	cmp	r3, r1
    8d26:	d301      	bcc.n	8d2c <__divsi3+0x64>
    8d28:	034b      	lsls	r3, r1, #13
    8d2a:	1ac0      	subs	r0, r0, r3
    8d2c:	4152      	adcs	r2, r2
    8d2e:	0b03      	lsrs	r3, r0, #12
    8d30:	428b      	cmp	r3, r1
    8d32:	d301      	bcc.n	8d38 <__divsi3+0x70>
    8d34:	030b      	lsls	r3, r1, #12
    8d36:	1ac0      	subs	r0, r0, r3
    8d38:	4152      	adcs	r2, r2
    8d3a:	0ac3      	lsrs	r3, r0, #11
    8d3c:	428b      	cmp	r3, r1
    8d3e:	d301      	bcc.n	8d44 <__divsi3+0x7c>
    8d40:	02cb      	lsls	r3, r1, #11
    8d42:	1ac0      	subs	r0, r0, r3
    8d44:	4152      	adcs	r2, r2
    8d46:	0a83      	lsrs	r3, r0, #10
    8d48:	428b      	cmp	r3, r1
    8d4a:	d301      	bcc.n	8d50 <__divsi3+0x88>
    8d4c:	028b      	lsls	r3, r1, #10
    8d4e:	1ac0      	subs	r0, r0, r3
    8d50:	4152      	adcs	r2, r2
    8d52:	0a43      	lsrs	r3, r0, #9
    8d54:	428b      	cmp	r3, r1
    8d56:	d301      	bcc.n	8d5c <__divsi3+0x94>
    8d58:	024b      	lsls	r3, r1, #9
    8d5a:	1ac0      	subs	r0, r0, r3
    8d5c:	4152      	adcs	r2, r2
    8d5e:	0a03      	lsrs	r3, r0, #8
    8d60:	428b      	cmp	r3, r1
    8d62:	d301      	bcc.n	8d68 <__divsi3+0xa0>
    8d64:	020b      	lsls	r3, r1, #8
    8d66:	1ac0      	subs	r0, r0, r3
    8d68:	4152      	adcs	r2, r2
    8d6a:	d2cd      	bcs.n	8d08 <__divsi3+0x40>
    8d6c:	09c3      	lsrs	r3, r0, #7
    8d6e:	428b      	cmp	r3, r1
    8d70:	d301      	bcc.n	8d76 <__divsi3+0xae>
    8d72:	01cb      	lsls	r3, r1, #7
    8d74:	1ac0      	subs	r0, r0, r3
    8d76:	4152      	adcs	r2, r2
    8d78:	0983      	lsrs	r3, r0, #6
    8d7a:	428b      	cmp	r3, r1
    8d7c:	d301      	bcc.n	8d82 <__divsi3+0xba>
    8d7e:	018b      	lsls	r3, r1, #6
    8d80:	1ac0      	subs	r0, r0, r3
    8d82:	4152      	adcs	r2, r2
    8d84:	0943      	lsrs	r3, r0, #5
    8d86:	428b      	cmp	r3, r1
    8d88:	d301      	bcc.n	8d8e <__divsi3+0xc6>
    8d8a:	014b      	lsls	r3, r1, #5
    8d8c:	1ac0      	subs	r0, r0, r3
    8d8e:	4152      	adcs	r2, r2
    8d90:	0903      	lsrs	r3, r0, #4
    8d92:	428b      	cmp	r3, r1
    8d94:	d301      	bcc.n	8d9a <__divsi3+0xd2>
    8d96:	010b      	lsls	r3, r1, #4
    8d98:	1ac0      	subs	r0, r0, r3
    8d9a:	4152      	adcs	r2, r2
    8d9c:	08c3      	lsrs	r3, r0, #3
    8d9e:	428b      	cmp	r3, r1
    8da0:	d301      	bcc.n	8da6 <__divsi3+0xde>
    8da2:	00cb      	lsls	r3, r1, #3
    8da4:	1ac0      	subs	r0, r0, r3
    8da6:	4152      	adcs	r2, r2
    8da8:	0883      	lsrs	r3, r0, #2
    8daa:	428b      	cmp	r3, r1
    8dac:	d301      	bcc.n	8db2 <__divsi3+0xea>
    8dae:	008b      	lsls	r3, r1, #2
    8db0:	1ac0      	subs	r0, r0, r3
    8db2:	4152      	adcs	r2, r2
    8db4:	0843      	lsrs	r3, r0, #1
    8db6:	428b      	cmp	r3, r1
    8db8:	d301      	bcc.n	8dbe <__divsi3+0xf6>
    8dba:	004b      	lsls	r3, r1, #1
    8dbc:	1ac0      	subs	r0, r0, r3
    8dbe:	4152      	adcs	r2, r2
    8dc0:	1a41      	subs	r1, r0, r1
    8dc2:	d200      	bcs.n	8dc6 <__divsi3+0xfe>
    8dc4:	4601      	mov	r1, r0
    8dc6:	4152      	adcs	r2, r2
    8dc8:	4610      	mov	r0, r2
    8dca:	4770      	bx	lr
    8dcc:	e05d      	b.n	8e8a <__divsi3+0x1c2>
    8dce:	0fca      	lsrs	r2, r1, #31
    8dd0:	d000      	beq.n	8dd4 <__divsi3+0x10c>
    8dd2:	4249      	negs	r1, r1
    8dd4:	1003      	asrs	r3, r0, #32
    8dd6:	d300      	bcc.n	8dda <__divsi3+0x112>
    8dd8:	4240      	negs	r0, r0
    8dda:	4053      	eors	r3, r2
    8ddc:	2200      	movs	r2, #0
    8dde:	469c      	mov	ip, r3
    8de0:	0903      	lsrs	r3, r0, #4
    8de2:	428b      	cmp	r3, r1
    8de4:	d32d      	bcc.n	8e42 <__divsi3+0x17a>
    8de6:	0a03      	lsrs	r3, r0, #8
    8de8:	428b      	cmp	r3, r1
    8dea:	d312      	bcc.n	8e12 <__divsi3+0x14a>
    8dec:	22fc      	movs	r2, #252	; 0xfc
    8dee:	0189      	lsls	r1, r1, #6
    8df0:	ba12      	rev	r2, r2
    8df2:	0a03      	lsrs	r3, r0, #8
    8df4:	428b      	cmp	r3, r1
    8df6:	d30c      	bcc.n	8e12 <__divsi3+0x14a>
    8df8:	0189      	lsls	r1, r1, #6
    8dfa:	1192      	asrs	r2, r2, #6
    8dfc:	428b      	cmp	r3, r1
    8dfe:	d308      	bcc.n	8e12 <__divsi3+0x14a>
    8e00:	0189      	lsls	r1, r1, #6
    8e02:	1192      	asrs	r2, r2, #6
    8e04:	428b      	cmp	r3, r1
    8e06:	d304      	bcc.n	8e12 <__divsi3+0x14a>
    8e08:	0189      	lsls	r1, r1, #6
    8e0a:	d03a      	beq.n	8e82 <__divsi3+0x1ba>
    8e0c:	1192      	asrs	r2, r2, #6
    8e0e:	e000      	b.n	8e12 <__divsi3+0x14a>
    8e10:	0989      	lsrs	r1, r1, #6
    8e12:	09c3      	lsrs	r3, r0, #7
    8e14:	428b      	cmp	r3, r1
    8e16:	d301      	bcc.n	8e1c <__divsi3+0x154>
    8e18:	01cb      	lsls	r3, r1, #7
    8e1a:	1ac0      	subs	r0, r0, r3
    8e1c:	4152      	adcs	r2, r2
    8e1e:	0983      	lsrs	r3, r0, #6
    8e20:	428b      	cmp	r3, r1
    8e22:	d301      	bcc.n	8e28 <__divsi3+0x160>
    8e24:	018b      	lsls	r3, r1, #6
    8e26:	1ac0      	subs	r0, r0, r3
    8e28:	4152      	adcs	r2, r2
    8e2a:	0943      	lsrs	r3, r0, #5
    8e2c:	428b      	cmp	r3, r1
    8e2e:	d301      	bcc.n	8e34 <__divsi3+0x16c>
    8e30:	014b      	lsls	r3, r1, #5
    8e32:	1ac0      	subs	r0, r0, r3
    8e34:	4152      	adcs	r2, r2
    8e36:	0903      	lsrs	r3, r0, #4
    8e38:	428b      	cmp	r3, r1
    8e3a:	d301      	bcc.n	8e40 <__divsi3+0x178>
    8e3c:	010b      	lsls	r3, r1, #4
    8e3e:	1ac0      	subs	r0, r0, r3
    8e40:	4152      	adcs	r2, r2
    8e42:	08c3      	lsrs	r3, r0, #3
    8e44:	428b      	cmp	r3, r1
    8e46:	d301      	bcc.n	8e4c <__divsi3+0x184>
    8e48:	00cb      	lsls	r3, r1, #3
    8e4a:	1ac0      	subs	r0, r0, r3
    8e4c:	4152      	adcs	r2, r2
    8e4e:	0883      	lsrs	r3, r0, #2
    8e50:	428b      	cmp	r3, r1
    8e52:	d301      	bcc.n	8e58 <__divsi3+0x190>
    8e54:	008b      	lsls	r3, r1, #2
    8e56:	1ac0      	subs	r0, r0, r3
    8e58:	4152      	adcs	r2, r2
    8e5a:	d2d9      	bcs.n	8e10 <__divsi3+0x148>
    8e5c:	0843      	lsrs	r3, r0, #1
    8e5e:	428b      	cmp	r3, r1
    8e60:	d301      	bcc.n	8e66 <__divsi3+0x19e>
    8e62:	004b      	lsls	r3, r1, #1
    8e64:	1ac0      	subs	r0, r0, r3
    8e66:	4152      	adcs	r2, r2
    8e68:	1a41      	subs	r1, r0, r1
    8e6a:	d200      	bcs.n	8e6e <__divsi3+0x1a6>
    8e6c:	4601      	mov	r1, r0
    8e6e:	4663      	mov	r3, ip
    8e70:	4152      	adcs	r2, r2
    8e72:	105b      	asrs	r3, r3, #1
    8e74:	4610      	mov	r0, r2
    8e76:	d301      	bcc.n	8e7c <__divsi3+0x1b4>
    8e78:	4240      	negs	r0, r0
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d500      	bpl.n	8e80 <__divsi3+0x1b8>
    8e7e:	4249      	negs	r1, r1
    8e80:	4770      	bx	lr
    8e82:	4663      	mov	r3, ip
    8e84:	105b      	asrs	r3, r3, #1
    8e86:	d300      	bcc.n	8e8a <__divsi3+0x1c2>
    8e88:	4240      	negs	r0, r0
    8e8a:	b501      	push	{r0, lr}
    8e8c:	2000      	movs	r0, #0
    8e8e:	f000 f805 	bl	8e9c <__aeabi_idiv0>
    8e92:	bd02      	pop	{r1, pc}

00008e94 <__aeabi_idivmod>:
    8e94:	2900      	cmp	r1, #0
    8e96:	d0f8      	beq.n	8e8a <__divsi3+0x1c2>
    8e98:	e716      	b.n	8cc8 <__divsi3>
    8e9a:	4770      	bx	lr

00008e9c <__aeabi_idiv0>:
    8e9c:	4770      	bx	lr
    8e9e:	46c0      	nop			; (mov r8, r8)

00008ea0 <__aeabi_llsl>:
    8ea0:	4091      	lsls	r1, r2
    8ea2:	1c03      	adds	r3, r0, #0
    8ea4:	4090      	lsls	r0, r2
    8ea6:	469c      	mov	ip, r3
    8ea8:	3a20      	subs	r2, #32
    8eaa:	4093      	lsls	r3, r2
    8eac:	4319      	orrs	r1, r3
    8eae:	4252      	negs	r2, r2
    8eb0:	4663      	mov	r3, ip
    8eb2:	40d3      	lsrs	r3, r2
    8eb4:	4319      	orrs	r1, r3
    8eb6:	4770      	bx	lr

00008eb8 <__clzsi2>:
    8eb8:	211c      	movs	r1, #28
    8eba:	2301      	movs	r3, #1
    8ebc:	041b      	lsls	r3, r3, #16
    8ebe:	4298      	cmp	r0, r3
    8ec0:	d301      	bcc.n	8ec6 <__clzsi2+0xe>
    8ec2:	0c00      	lsrs	r0, r0, #16
    8ec4:	3910      	subs	r1, #16
    8ec6:	0a1b      	lsrs	r3, r3, #8
    8ec8:	4298      	cmp	r0, r3
    8eca:	d301      	bcc.n	8ed0 <__clzsi2+0x18>
    8ecc:	0a00      	lsrs	r0, r0, #8
    8ece:	3908      	subs	r1, #8
    8ed0:	091b      	lsrs	r3, r3, #4
    8ed2:	4298      	cmp	r0, r3
    8ed4:	d301      	bcc.n	8eda <__clzsi2+0x22>
    8ed6:	0900      	lsrs	r0, r0, #4
    8ed8:	3904      	subs	r1, #4
    8eda:	a202      	add	r2, pc, #8	; (adr r2, 8ee4 <__clzsi2+0x2c>)
    8edc:	5c10      	ldrb	r0, [r2, r0]
    8ede:	1840      	adds	r0, r0, r1
    8ee0:	4770      	bx	lr
    8ee2:	46c0      	nop			; (mov r8, r8)
    8ee4:	02020304 	.word	0x02020304
    8ee8:	01010101 	.word	0x01010101
	...

00008ef4 <__ctzsi2>:
    8ef4:	4241      	negs	r1, r0
    8ef6:	4008      	ands	r0, r1
    8ef8:	211c      	movs	r1, #28
    8efa:	2301      	movs	r3, #1
    8efc:	041b      	lsls	r3, r3, #16
    8efe:	4298      	cmp	r0, r3
    8f00:	d301      	bcc.n	8f06 <__ctzsi2+0x12>
    8f02:	0c00      	lsrs	r0, r0, #16
    8f04:	3910      	subs	r1, #16
    8f06:	0a1b      	lsrs	r3, r3, #8
    8f08:	4298      	cmp	r0, r3
    8f0a:	d301      	bcc.n	8f10 <__ctzsi2+0x1c>
    8f0c:	0a00      	lsrs	r0, r0, #8
    8f0e:	3908      	subs	r1, #8
    8f10:	091b      	lsrs	r3, r3, #4
    8f12:	4298      	cmp	r0, r3
    8f14:	d301      	bcc.n	8f1a <__ctzsi2+0x26>
    8f16:	0900      	lsrs	r0, r0, #4
    8f18:	3904      	subs	r1, #4
    8f1a:	a202      	add	r2, pc, #8	; (adr r2, 8f24 <__ctzsi2+0x30>)
    8f1c:	5c10      	ldrb	r0, [r2, r0]
    8f1e:	1a40      	subs	r0, r0, r1
    8f20:	4770      	bx	lr
    8f22:	46c0      	nop			; (mov r8, r8)
    8f24:	1d1d1c1b 	.word	0x1d1d1c1b
    8f28:	1e1e1e1e 	.word	0x1e1e1e1e
    8f2c:	1f1f1f1f 	.word	0x1f1f1f1f
    8f30:	1f1f1f1f 	.word	0x1f1f1f1f

00008f34 <__aeabi_uldivmod>:
    8f34:	2b00      	cmp	r3, #0
    8f36:	d111      	bne.n	8f5c <__aeabi_uldivmod+0x28>
    8f38:	2a00      	cmp	r2, #0
    8f3a:	d10f      	bne.n	8f5c <__aeabi_uldivmod+0x28>
    8f3c:	2900      	cmp	r1, #0
    8f3e:	d100      	bne.n	8f42 <__aeabi_uldivmod+0xe>
    8f40:	2800      	cmp	r0, #0
    8f42:	d002      	beq.n	8f4a <__aeabi_uldivmod+0x16>
    8f44:	2100      	movs	r1, #0
    8f46:	43c9      	mvns	r1, r1
    8f48:	1c08      	adds	r0, r1, #0
    8f4a:	b407      	push	{r0, r1, r2}
    8f4c:	4802      	ldr	r0, [pc, #8]	; (8f58 <__aeabi_uldivmod+0x24>)
    8f4e:	a102      	add	r1, pc, #8	; (adr r1, 8f58 <__aeabi_uldivmod+0x24>)
    8f50:	1840      	adds	r0, r0, r1
    8f52:	9002      	str	r0, [sp, #8]
    8f54:	bd03      	pop	{r0, r1, pc}
    8f56:	46c0      	nop			; (mov r8, r8)
    8f58:	ffffff45 	.word	0xffffff45
    8f5c:	b403      	push	{r0, r1}
    8f5e:	4668      	mov	r0, sp
    8f60:	b501      	push	{r0, lr}
    8f62:	9802      	ldr	r0, [sp, #8]
    8f64:	f000 f830 	bl	8fc8 <__udivmoddi4>
    8f68:	9b01      	ldr	r3, [sp, #4]
    8f6a:	469e      	mov	lr, r3
    8f6c:	b002      	add	sp, #8
    8f6e:	bc0c      	pop	{r2, r3}
    8f70:	4770      	bx	lr
    8f72:	46c0      	nop			; (mov r8, r8)

00008f74 <__aeabi_lmul>:
    8f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f76:	46ce      	mov	lr, r9
    8f78:	4647      	mov	r7, r8
    8f7a:	0415      	lsls	r5, r2, #16
    8f7c:	0c2d      	lsrs	r5, r5, #16
    8f7e:	002e      	movs	r6, r5
    8f80:	b580      	push	{r7, lr}
    8f82:	0407      	lsls	r7, r0, #16
    8f84:	0c14      	lsrs	r4, r2, #16
    8f86:	0c3f      	lsrs	r7, r7, #16
    8f88:	4699      	mov	r9, r3
    8f8a:	0c03      	lsrs	r3, r0, #16
    8f8c:	437e      	muls	r6, r7
    8f8e:	435d      	muls	r5, r3
    8f90:	4367      	muls	r7, r4
    8f92:	4363      	muls	r3, r4
    8f94:	197f      	adds	r7, r7, r5
    8f96:	0c34      	lsrs	r4, r6, #16
    8f98:	19e4      	adds	r4, r4, r7
    8f9a:	469c      	mov	ip, r3
    8f9c:	42a5      	cmp	r5, r4
    8f9e:	d903      	bls.n	8fa8 <__aeabi_lmul+0x34>
    8fa0:	2380      	movs	r3, #128	; 0x80
    8fa2:	025b      	lsls	r3, r3, #9
    8fa4:	4698      	mov	r8, r3
    8fa6:	44c4      	add	ip, r8
    8fa8:	464b      	mov	r3, r9
    8faa:	4351      	muls	r1, r2
    8fac:	4343      	muls	r3, r0
    8fae:	0436      	lsls	r6, r6, #16
    8fb0:	0c36      	lsrs	r6, r6, #16
    8fb2:	0c25      	lsrs	r5, r4, #16
    8fb4:	0424      	lsls	r4, r4, #16
    8fb6:	4465      	add	r5, ip
    8fb8:	19a4      	adds	r4, r4, r6
    8fba:	1859      	adds	r1, r3, r1
    8fbc:	1949      	adds	r1, r1, r5
    8fbe:	0020      	movs	r0, r4
    8fc0:	bc0c      	pop	{r2, r3}
    8fc2:	4690      	mov	r8, r2
    8fc4:	4699      	mov	r9, r3
    8fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008fc8 <__udivmoddi4>:
    8fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fca:	4657      	mov	r7, sl
    8fcc:	464e      	mov	r6, r9
    8fce:	4645      	mov	r5, r8
    8fd0:	46de      	mov	lr, fp
    8fd2:	b5e0      	push	{r5, r6, r7, lr}
    8fd4:	0004      	movs	r4, r0
    8fd6:	b083      	sub	sp, #12
    8fd8:	000d      	movs	r5, r1
    8fda:	4692      	mov	sl, r2
    8fdc:	4699      	mov	r9, r3
    8fde:	428b      	cmp	r3, r1
    8fe0:	d82f      	bhi.n	9042 <__udivmoddi4+0x7a>
    8fe2:	d02c      	beq.n	903e <__udivmoddi4+0x76>
    8fe4:	4649      	mov	r1, r9
    8fe6:	4650      	mov	r0, sl
    8fe8:	f000 f8ae 	bl	9148 <__clzdi2>
    8fec:	0029      	movs	r1, r5
    8fee:	0006      	movs	r6, r0
    8ff0:	0020      	movs	r0, r4
    8ff2:	f000 f8a9 	bl	9148 <__clzdi2>
    8ff6:	1a33      	subs	r3, r6, r0
    8ff8:	4698      	mov	r8, r3
    8ffa:	3b20      	subs	r3, #32
    8ffc:	469b      	mov	fp, r3
    8ffe:	d500      	bpl.n	9002 <__udivmoddi4+0x3a>
    9000:	e074      	b.n	90ec <__udivmoddi4+0x124>
    9002:	4653      	mov	r3, sl
    9004:	465a      	mov	r2, fp
    9006:	4093      	lsls	r3, r2
    9008:	001f      	movs	r7, r3
    900a:	4653      	mov	r3, sl
    900c:	4642      	mov	r2, r8
    900e:	4093      	lsls	r3, r2
    9010:	001e      	movs	r6, r3
    9012:	42af      	cmp	r7, r5
    9014:	d829      	bhi.n	906a <__udivmoddi4+0xa2>
    9016:	d026      	beq.n	9066 <__udivmoddi4+0x9e>
    9018:	465b      	mov	r3, fp
    901a:	1ba4      	subs	r4, r4, r6
    901c:	41bd      	sbcs	r5, r7
    901e:	2b00      	cmp	r3, #0
    9020:	da00      	bge.n	9024 <__udivmoddi4+0x5c>
    9022:	e079      	b.n	9118 <__udivmoddi4+0x150>
    9024:	2200      	movs	r2, #0
    9026:	2300      	movs	r3, #0
    9028:	9200      	str	r2, [sp, #0]
    902a:	9301      	str	r3, [sp, #4]
    902c:	2301      	movs	r3, #1
    902e:	465a      	mov	r2, fp
    9030:	4093      	lsls	r3, r2
    9032:	9301      	str	r3, [sp, #4]
    9034:	2301      	movs	r3, #1
    9036:	4642      	mov	r2, r8
    9038:	4093      	lsls	r3, r2
    903a:	9300      	str	r3, [sp, #0]
    903c:	e019      	b.n	9072 <__udivmoddi4+0xaa>
    903e:	4282      	cmp	r2, r0
    9040:	d9d0      	bls.n	8fe4 <__udivmoddi4+0x1c>
    9042:	2200      	movs	r2, #0
    9044:	2300      	movs	r3, #0
    9046:	9200      	str	r2, [sp, #0]
    9048:	9301      	str	r3, [sp, #4]
    904a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    904c:	2b00      	cmp	r3, #0
    904e:	d001      	beq.n	9054 <__udivmoddi4+0x8c>
    9050:	601c      	str	r4, [r3, #0]
    9052:	605d      	str	r5, [r3, #4]
    9054:	9800      	ldr	r0, [sp, #0]
    9056:	9901      	ldr	r1, [sp, #4]
    9058:	b003      	add	sp, #12
    905a:	bc3c      	pop	{r2, r3, r4, r5}
    905c:	4690      	mov	r8, r2
    905e:	4699      	mov	r9, r3
    9060:	46a2      	mov	sl, r4
    9062:	46ab      	mov	fp, r5
    9064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9066:	42a3      	cmp	r3, r4
    9068:	d9d6      	bls.n	9018 <__udivmoddi4+0x50>
    906a:	2200      	movs	r2, #0
    906c:	2300      	movs	r3, #0
    906e:	9200      	str	r2, [sp, #0]
    9070:	9301      	str	r3, [sp, #4]
    9072:	4643      	mov	r3, r8
    9074:	2b00      	cmp	r3, #0
    9076:	d0e8      	beq.n	904a <__udivmoddi4+0x82>
    9078:	07fb      	lsls	r3, r7, #31
    907a:	0872      	lsrs	r2, r6, #1
    907c:	431a      	orrs	r2, r3
    907e:	4646      	mov	r6, r8
    9080:	087b      	lsrs	r3, r7, #1
    9082:	e00e      	b.n	90a2 <__udivmoddi4+0xda>
    9084:	42ab      	cmp	r3, r5
    9086:	d101      	bne.n	908c <__udivmoddi4+0xc4>
    9088:	42a2      	cmp	r2, r4
    908a:	d80c      	bhi.n	90a6 <__udivmoddi4+0xde>
    908c:	1aa4      	subs	r4, r4, r2
    908e:	419d      	sbcs	r5, r3
    9090:	2001      	movs	r0, #1
    9092:	1924      	adds	r4, r4, r4
    9094:	416d      	adcs	r5, r5
    9096:	2100      	movs	r1, #0
    9098:	3e01      	subs	r6, #1
    909a:	1824      	adds	r4, r4, r0
    909c:	414d      	adcs	r5, r1
    909e:	2e00      	cmp	r6, #0
    90a0:	d006      	beq.n	90b0 <__udivmoddi4+0xe8>
    90a2:	42ab      	cmp	r3, r5
    90a4:	d9ee      	bls.n	9084 <__udivmoddi4+0xbc>
    90a6:	3e01      	subs	r6, #1
    90a8:	1924      	adds	r4, r4, r4
    90aa:	416d      	adcs	r5, r5
    90ac:	2e00      	cmp	r6, #0
    90ae:	d1f8      	bne.n	90a2 <__udivmoddi4+0xda>
    90b0:	465b      	mov	r3, fp
    90b2:	9800      	ldr	r0, [sp, #0]
    90b4:	9901      	ldr	r1, [sp, #4]
    90b6:	1900      	adds	r0, r0, r4
    90b8:	4169      	adcs	r1, r5
    90ba:	2b00      	cmp	r3, #0
    90bc:	db22      	blt.n	9104 <__udivmoddi4+0x13c>
    90be:	002b      	movs	r3, r5
    90c0:	465a      	mov	r2, fp
    90c2:	40d3      	lsrs	r3, r2
    90c4:	002a      	movs	r2, r5
    90c6:	4644      	mov	r4, r8
    90c8:	40e2      	lsrs	r2, r4
    90ca:	001c      	movs	r4, r3
    90cc:	465b      	mov	r3, fp
    90ce:	0015      	movs	r5, r2
    90d0:	2b00      	cmp	r3, #0
    90d2:	db2c      	blt.n	912e <__udivmoddi4+0x166>
    90d4:	0026      	movs	r6, r4
    90d6:	409e      	lsls	r6, r3
    90d8:	0033      	movs	r3, r6
    90da:	0026      	movs	r6, r4
    90dc:	4647      	mov	r7, r8
    90de:	40be      	lsls	r6, r7
    90e0:	0032      	movs	r2, r6
    90e2:	1a80      	subs	r0, r0, r2
    90e4:	4199      	sbcs	r1, r3
    90e6:	9000      	str	r0, [sp, #0]
    90e8:	9101      	str	r1, [sp, #4]
    90ea:	e7ae      	b.n	904a <__udivmoddi4+0x82>
    90ec:	4642      	mov	r2, r8
    90ee:	2320      	movs	r3, #32
    90f0:	1a9b      	subs	r3, r3, r2
    90f2:	4652      	mov	r2, sl
    90f4:	40da      	lsrs	r2, r3
    90f6:	4641      	mov	r1, r8
    90f8:	0013      	movs	r3, r2
    90fa:	464a      	mov	r2, r9
    90fc:	408a      	lsls	r2, r1
    90fe:	0017      	movs	r7, r2
    9100:	431f      	orrs	r7, r3
    9102:	e782      	b.n	900a <__udivmoddi4+0x42>
    9104:	4642      	mov	r2, r8
    9106:	2320      	movs	r3, #32
    9108:	1a9b      	subs	r3, r3, r2
    910a:	002a      	movs	r2, r5
    910c:	4646      	mov	r6, r8
    910e:	409a      	lsls	r2, r3
    9110:	0023      	movs	r3, r4
    9112:	40f3      	lsrs	r3, r6
    9114:	4313      	orrs	r3, r2
    9116:	e7d5      	b.n	90c4 <__udivmoddi4+0xfc>
    9118:	4642      	mov	r2, r8
    911a:	2320      	movs	r3, #32
    911c:	2100      	movs	r1, #0
    911e:	1a9b      	subs	r3, r3, r2
    9120:	2200      	movs	r2, #0
    9122:	9100      	str	r1, [sp, #0]
    9124:	9201      	str	r2, [sp, #4]
    9126:	2201      	movs	r2, #1
    9128:	40da      	lsrs	r2, r3
    912a:	9201      	str	r2, [sp, #4]
    912c:	e782      	b.n	9034 <__udivmoddi4+0x6c>
    912e:	4642      	mov	r2, r8
    9130:	2320      	movs	r3, #32
    9132:	0026      	movs	r6, r4
    9134:	1a9b      	subs	r3, r3, r2
    9136:	40de      	lsrs	r6, r3
    9138:	002f      	movs	r7, r5
    913a:	46b4      	mov	ip, r6
    913c:	4097      	lsls	r7, r2
    913e:	4666      	mov	r6, ip
    9140:	003b      	movs	r3, r7
    9142:	4333      	orrs	r3, r6
    9144:	e7c9      	b.n	90da <__udivmoddi4+0x112>
    9146:	46c0      	nop			; (mov r8, r8)

00009148 <__clzdi2>:
    9148:	b510      	push	{r4, lr}
    914a:	2900      	cmp	r1, #0
    914c:	d103      	bne.n	9156 <__clzdi2+0xe>
    914e:	f7ff feb3 	bl	8eb8 <__clzsi2>
    9152:	3020      	adds	r0, #32
    9154:	e002      	b.n	915c <__clzdi2+0x14>
    9156:	1c08      	adds	r0, r1, #0
    9158:	f7ff feae 	bl	8eb8 <__clzsi2>
    915c:	bd10      	pop	{r4, pc}
    915e:	46c0      	nop			; (mov r8, r8)

00009160 <atoi>:
    9160:	b510      	push	{r4, lr}
    9162:	220a      	movs	r2, #10
    9164:	2100      	movs	r1, #0
    9166:	f000 faa7 	bl	96b8 <strtol>
    916a:	bd10      	pop	{r4, pc}

0000916c <calloc>:
    916c:	b510      	push	{r4, lr}
    916e:	4b03      	ldr	r3, [pc, #12]	; (917c <calloc+0x10>)
    9170:	000a      	movs	r2, r1
    9172:	0001      	movs	r1, r0
    9174:	6818      	ldr	r0, [r3, #0]
    9176:	f000 f870 	bl	925a <_calloc_r>
    917a:	bd10      	pop	{r4, pc}
    917c:	20000124 	.word	0x20000124

00009180 <__libc_init_array>:
    9180:	b570      	push	{r4, r5, r6, lr}
    9182:	2600      	movs	r6, #0
    9184:	4d0c      	ldr	r5, [pc, #48]	; (91b8 <__libc_init_array+0x38>)
    9186:	4c0d      	ldr	r4, [pc, #52]	; (91bc <__libc_init_array+0x3c>)
    9188:	1b64      	subs	r4, r4, r5
    918a:	10a4      	asrs	r4, r4, #2
    918c:	42a6      	cmp	r6, r4
    918e:	d109      	bne.n	91a4 <__libc_init_array+0x24>
    9190:	2600      	movs	r6, #0
    9192:	f001 fab5 	bl	a700 <_init>
    9196:	4d0a      	ldr	r5, [pc, #40]	; (91c0 <__libc_init_array+0x40>)
    9198:	4c0a      	ldr	r4, [pc, #40]	; (91c4 <__libc_init_array+0x44>)
    919a:	1b64      	subs	r4, r4, r5
    919c:	10a4      	asrs	r4, r4, #2
    919e:	42a6      	cmp	r6, r4
    91a0:	d105      	bne.n	91ae <__libc_init_array+0x2e>
    91a2:	bd70      	pop	{r4, r5, r6, pc}
    91a4:	00b3      	lsls	r3, r6, #2
    91a6:	58eb      	ldr	r3, [r5, r3]
    91a8:	4798      	blx	r3
    91aa:	3601      	adds	r6, #1
    91ac:	e7ee      	b.n	918c <__libc_init_array+0xc>
    91ae:	00b3      	lsls	r3, r6, #2
    91b0:	58eb      	ldr	r3, [r5, r3]
    91b2:	4798      	blx	r3
    91b4:	3601      	adds	r6, #1
    91b6:	e7f2      	b.n	919e <__libc_init_array+0x1e>
    91b8:	0000a70c 	.word	0x0000a70c
    91bc:	0000a70c 	.word	0x0000a70c
    91c0:	0000a70c 	.word	0x0000a70c
    91c4:	0000a710 	.word	0x0000a710

000091c8 <__locale_ctype_ptr_l>:
    91c8:	30ec      	adds	r0, #236	; 0xec
    91ca:	6800      	ldr	r0, [r0, #0]
    91cc:	4770      	bx	lr
	...

000091d0 <__locale_ctype_ptr>:
    91d0:	4b04      	ldr	r3, [pc, #16]	; (91e4 <__locale_ctype_ptr+0x14>)
    91d2:	681b      	ldr	r3, [r3, #0]
    91d4:	6a1b      	ldr	r3, [r3, #32]
    91d6:	2b00      	cmp	r3, #0
    91d8:	d100      	bne.n	91dc <__locale_ctype_ptr+0xc>
    91da:	4b03      	ldr	r3, [pc, #12]	; (91e8 <__locale_ctype_ptr+0x18>)
    91dc:	33ec      	adds	r3, #236	; 0xec
    91de:	6818      	ldr	r0, [r3, #0]
    91e0:	4770      	bx	lr
    91e2:	46c0      	nop			; (mov r8, r8)
    91e4:	20000124 	.word	0x20000124
    91e8:	20000188 	.word	0x20000188

000091ec <malloc>:
    91ec:	b510      	push	{r4, lr}
    91ee:	4b03      	ldr	r3, [pc, #12]	; (91fc <malloc+0x10>)
    91f0:	0001      	movs	r1, r0
    91f2:	6818      	ldr	r0, [r3, #0]
    91f4:	f000 f88a 	bl	930c <_malloc_r>
    91f8:	bd10      	pop	{r4, pc}
    91fa:	46c0      	nop			; (mov r8, r8)
    91fc:	20000124 	.word	0x20000124

00009200 <free>:
    9200:	b510      	push	{r4, lr}
    9202:	4b03      	ldr	r3, [pc, #12]	; (9210 <free+0x10>)
    9204:	0001      	movs	r1, r0
    9206:	6818      	ldr	r0, [r3, #0]
    9208:	f000 f836 	bl	9278 <_free_r>
    920c:	bd10      	pop	{r4, pc}
    920e:	46c0      	nop			; (mov r8, r8)
    9210:	20000124 	.word	0x20000124

00009214 <__ascii_mbtowc>:
    9214:	b082      	sub	sp, #8
    9216:	2900      	cmp	r1, #0
    9218:	d100      	bne.n	921c <__ascii_mbtowc+0x8>
    921a:	a901      	add	r1, sp, #4
    921c:	1e10      	subs	r0, r2, #0
    921e:	d006      	beq.n	922e <__ascii_mbtowc+0x1a>
    9220:	2b00      	cmp	r3, #0
    9222:	d006      	beq.n	9232 <__ascii_mbtowc+0x1e>
    9224:	7813      	ldrb	r3, [r2, #0]
    9226:	600b      	str	r3, [r1, #0]
    9228:	7810      	ldrb	r0, [r2, #0]
    922a:	1e43      	subs	r3, r0, #1
    922c:	4198      	sbcs	r0, r3
    922e:	b002      	add	sp, #8
    9230:	4770      	bx	lr
    9232:	2002      	movs	r0, #2
    9234:	4240      	negs	r0, r0
    9236:	e7fa      	b.n	922e <__ascii_mbtowc+0x1a>

00009238 <memcpy>:
    9238:	2300      	movs	r3, #0
    923a:	b510      	push	{r4, lr}
    923c:	429a      	cmp	r2, r3
    923e:	d100      	bne.n	9242 <memcpy+0xa>
    9240:	bd10      	pop	{r4, pc}
    9242:	5ccc      	ldrb	r4, [r1, r3]
    9244:	54c4      	strb	r4, [r0, r3]
    9246:	3301      	adds	r3, #1
    9248:	e7f8      	b.n	923c <memcpy+0x4>

0000924a <memset>:
    924a:	0003      	movs	r3, r0
    924c:	1882      	adds	r2, r0, r2
    924e:	4293      	cmp	r3, r2
    9250:	d100      	bne.n	9254 <memset+0xa>
    9252:	4770      	bx	lr
    9254:	7019      	strb	r1, [r3, #0]
    9256:	3301      	adds	r3, #1
    9258:	e7f9      	b.n	924e <memset+0x4>

0000925a <_calloc_r>:
    925a:	434a      	muls	r2, r1
    925c:	b570      	push	{r4, r5, r6, lr}
    925e:	0011      	movs	r1, r2
    9260:	0014      	movs	r4, r2
    9262:	f000 f853 	bl	930c <_malloc_r>
    9266:	1e05      	subs	r5, r0, #0
    9268:	d003      	beq.n	9272 <_calloc_r+0x18>
    926a:	0022      	movs	r2, r4
    926c:	2100      	movs	r1, #0
    926e:	f7ff ffec 	bl	924a <memset>
    9272:	0028      	movs	r0, r5
    9274:	bd70      	pop	{r4, r5, r6, pc}
	...

00009278 <_free_r>:
    9278:	b570      	push	{r4, r5, r6, lr}
    927a:	0005      	movs	r5, r0
    927c:	2900      	cmp	r1, #0
    927e:	d010      	beq.n	92a2 <_free_r+0x2a>
    9280:	1f0c      	subs	r4, r1, #4
    9282:	6823      	ldr	r3, [r4, #0]
    9284:	2b00      	cmp	r3, #0
    9286:	da00      	bge.n	928a <_free_r+0x12>
    9288:	18e4      	adds	r4, r4, r3
    928a:	0028      	movs	r0, r5
    928c:	f000 fa58 	bl	9740 <__malloc_lock>
    9290:	4a1d      	ldr	r2, [pc, #116]	; (9308 <_free_r+0x90>)
    9292:	6813      	ldr	r3, [r2, #0]
    9294:	2b00      	cmp	r3, #0
    9296:	d105      	bne.n	92a4 <_free_r+0x2c>
    9298:	6063      	str	r3, [r4, #4]
    929a:	6014      	str	r4, [r2, #0]
    929c:	0028      	movs	r0, r5
    929e:	f000 fa50 	bl	9742 <__malloc_unlock>
    92a2:	bd70      	pop	{r4, r5, r6, pc}
    92a4:	42a3      	cmp	r3, r4
    92a6:	d909      	bls.n	92bc <_free_r+0x44>
    92a8:	6821      	ldr	r1, [r4, #0]
    92aa:	1860      	adds	r0, r4, r1
    92ac:	4283      	cmp	r3, r0
    92ae:	d1f3      	bne.n	9298 <_free_r+0x20>
    92b0:	6818      	ldr	r0, [r3, #0]
    92b2:	685b      	ldr	r3, [r3, #4]
    92b4:	1841      	adds	r1, r0, r1
    92b6:	6021      	str	r1, [r4, #0]
    92b8:	e7ee      	b.n	9298 <_free_r+0x20>
    92ba:	0013      	movs	r3, r2
    92bc:	685a      	ldr	r2, [r3, #4]
    92be:	2a00      	cmp	r2, #0
    92c0:	d001      	beq.n	92c6 <_free_r+0x4e>
    92c2:	42a2      	cmp	r2, r4
    92c4:	d9f9      	bls.n	92ba <_free_r+0x42>
    92c6:	6819      	ldr	r1, [r3, #0]
    92c8:	1858      	adds	r0, r3, r1
    92ca:	42a0      	cmp	r0, r4
    92cc:	d10b      	bne.n	92e6 <_free_r+0x6e>
    92ce:	6820      	ldr	r0, [r4, #0]
    92d0:	1809      	adds	r1, r1, r0
    92d2:	1858      	adds	r0, r3, r1
    92d4:	6019      	str	r1, [r3, #0]
    92d6:	4282      	cmp	r2, r0
    92d8:	d1e0      	bne.n	929c <_free_r+0x24>
    92da:	6810      	ldr	r0, [r2, #0]
    92dc:	6852      	ldr	r2, [r2, #4]
    92de:	1841      	adds	r1, r0, r1
    92e0:	6019      	str	r1, [r3, #0]
    92e2:	605a      	str	r2, [r3, #4]
    92e4:	e7da      	b.n	929c <_free_r+0x24>
    92e6:	42a0      	cmp	r0, r4
    92e8:	d902      	bls.n	92f0 <_free_r+0x78>
    92ea:	230c      	movs	r3, #12
    92ec:	602b      	str	r3, [r5, #0]
    92ee:	e7d5      	b.n	929c <_free_r+0x24>
    92f0:	6821      	ldr	r1, [r4, #0]
    92f2:	1860      	adds	r0, r4, r1
    92f4:	4282      	cmp	r2, r0
    92f6:	d103      	bne.n	9300 <_free_r+0x88>
    92f8:	6810      	ldr	r0, [r2, #0]
    92fa:	6852      	ldr	r2, [r2, #4]
    92fc:	1841      	adds	r1, r0, r1
    92fe:	6021      	str	r1, [r4, #0]
    9300:	6062      	str	r2, [r4, #4]
    9302:	605c      	str	r4, [r3, #4]
    9304:	e7ca      	b.n	929c <_free_r+0x24>
    9306:	46c0      	nop			; (mov r8, r8)
    9308:	20000b70 	.word	0x20000b70

0000930c <_malloc_r>:
    930c:	2303      	movs	r3, #3
    930e:	b570      	push	{r4, r5, r6, lr}
    9310:	1ccd      	adds	r5, r1, #3
    9312:	439d      	bics	r5, r3
    9314:	3508      	adds	r5, #8
    9316:	0006      	movs	r6, r0
    9318:	2d0c      	cmp	r5, #12
    931a:	d21e      	bcs.n	935a <_malloc_r+0x4e>
    931c:	250c      	movs	r5, #12
    931e:	42a9      	cmp	r1, r5
    9320:	d81d      	bhi.n	935e <_malloc_r+0x52>
    9322:	0030      	movs	r0, r6
    9324:	f000 fa0c 	bl	9740 <__malloc_lock>
    9328:	4a25      	ldr	r2, [pc, #148]	; (93c0 <_malloc_r+0xb4>)
    932a:	6814      	ldr	r4, [r2, #0]
    932c:	0021      	movs	r1, r4
    932e:	2900      	cmp	r1, #0
    9330:	d119      	bne.n	9366 <_malloc_r+0x5a>
    9332:	4c24      	ldr	r4, [pc, #144]	; (93c4 <_malloc_r+0xb8>)
    9334:	6823      	ldr	r3, [r4, #0]
    9336:	2b00      	cmp	r3, #0
    9338:	d103      	bne.n	9342 <_malloc_r+0x36>
    933a:	0030      	movs	r0, r6
    933c:	f000 f844 	bl	93c8 <_sbrk_r>
    9340:	6020      	str	r0, [r4, #0]
    9342:	0029      	movs	r1, r5
    9344:	0030      	movs	r0, r6
    9346:	f000 f83f 	bl	93c8 <_sbrk_r>
    934a:	1c43      	adds	r3, r0, #1
    934c:	d12c      	bne.n	93a8 <_malloc_r+0x9c>
    934e:	230c      	movs	r3, #12
    9350:	0030      	movs	r0, r6
    9352:	6033      	str	r3, [r6, #0]
    9354:	f000 f9f5 	bl	9742 <__malloc_unlock>
    9358:	e003      	b.n	9362 <_malloc_r+0x56>
    935a:	2d00      	cmp	r5, #0
    935c:	dadf      	bge.n	931e <_malloc_r+0x12>
    935e:	230c      	movs	r3, #12
    9360:	6033      	str	r3, [r6, #0]
    9362:	2000      	movs	r0, #0
    9364:	bd70      	pop	{r4, r5, r6, pc}
    9366:	680b      	ldr	r3, [r1, #0]
    9368:	1b5b      	subs	r3, r3, r5
    936a:	d41a      	bmi.n	93a2 <_malloc_r+0x96>
    936c:	2b0b      	cmp	r3, #11
    936e:	d903      	bls.n	9378 <_malloc_r+0x6c>
    9370:	600b      	str	r3, [r1, #0]
    9372:	18cc      	adds	r4, r1, r3
    9374:	6025      	str	r5, [r4, #0]
    9376:	e003      	b.n	9380 <_malloc_r+0x74>
    9378:	428c      	cmp	r4, r1
    937a:	d10e      	bne.n	939a <_malloc_r+0x8e>
    937c:	6863      	ldr	r3, [r4, #4]
    937e:	6013      	str	r3, [r2, #0]
    9380:	0030      	movs	r0, r6
    9382:	f000 f9de 	bl	9742 <__malloc_unlock>
    9386:	0020      	movs	r0, r4
    9388:	2207      	movs	r2, #7
    938a:	300b      	adds	r0, #11
    938c:	1d23      	adds	r3, r4, #4
    938e:	4390      	bics	r0, r2
    9390:	1ac3      	subs	r3, r0, r3
    9392:	d0e7      	beq.n	9364 <_malloc_r+0x58>
    9394:	425a      	negs	r2, r3
    9396:	50e2      	str	r2, [r4, r3]
    9398:	e7e4      	b.n	9364 <_malloc_r+0x58>
    939a:	684b      	ldr	r3, [r1, #4]
    939c:	6063      	str	r3, [r4, #4]
    939e:	000c      	movs	r4, r1
    93a0:	e7ee      	b.n	9380 <_malloc_r+0x74>
    93a2:	000c      	movs	r4, r1
    93a4:	6849      	ldr	r1, [r1, #4]
    93a6:	e7c2      	b.n	932e <_malloc_r+0x22>
    93a8:	2303      	movs	r3, #3
    93aa:	1cc4      	adds	r4, r0, #3
    93ac:	439c      	bics	r4, r3
    93ae:	42a0      	cmp	r0, r4
    93b0:	d0e0      	beq.n	9374 <_malloc_r+0x68>
    93b2:	1a21      	subs	r1, r4, r0
    93b4:	0030      	movs	r0, r6
    93b6:	f000 f807 	bl	93c8 <_sbrk_r>
    93ba:	1c43      	adds	r3, r0, #1
    93bc:	d1da      	bne.n	9374 <_malloc_r+0x68>
    93be:	e7c6      	b.n	934e <_malloc_r+0x42>
    93c0:	20000b70 	.word	0x20000b70
    93c4:	20000b74 	.word	0x20000b74

000093c8 <_sbrk_r>:
    93c8:	2300      	movs	r3, #0
    93ca:	b570      	push	{r4, r5, r6, lr}
    93cc:	4c06      	ldr	r4, [pc, #24]	; (93e8 <_sbrk_r+0x20>)
    93ce:	0005      	movs	r5, r0
    93d0:	0008      	movs	r0, r1
    93d2:	6023      	str	r3, [r4, #0]
    93d4:	f7fe fcea 	bl	7dac <_sbrk>
    93d8:	1c43      	adds	r3, r0, #1
    93da:	d103      	bne.n	93e4 <_sbrk_r+0x1c>
    93dc:	6823      	ldr	r3, [r4, #0]
    93de:	2b00      	cmp	r3, #0
    93e0:	d000      	beq.n	93e4 <_sbrk_r+0x1c>
    93e2:	602b      	str	r3, [r5, #0]
    93e4:	bd70      	pop	{r4, r5, r6, pc}
    93e6:	46c0      	nop			; (mov r8, r8)
    93e8:	2000117c 	.word	0x2000117c

000093ec <sniprintf>:
    93ec:	b40c      	push	{r2, r3}
    93ee:	b530      	push	{r4, r5, lr}
    93f0:	4b16      	ldr	r3, [pc, #88]	; (944c <sniprintf+0x60>)
    93f2:	b09d      	sub	sp, #116	; 0x74
    93f4:	1e0c      	subs	r4, r1, #0
    93f6:	681d      	ldr	r5, [r3, #0]
    93f8:	da08      	bge.n	940c <sniprintf+0x20>
    93fa:	238b      	movs	r3, #139	; 0x8b
    93fc:	2001      	movs	r0, #1
    93fe:	602b      	str	r3, [r5, #0]
    9400:	4240      	negs	r0, r0
    9402:	b01d      	add	sp, #116	; 0x74
    9404:	bc30      	pop	{r4, r5}
    9406:	bc08      	pop	{r3}
    9408:	b002      	add	sp, #8
    940a:	4718      	bx	r3
    940c:	2382      	movs	r3, #130	; 0x82
    940e:	a902      	add	r1, sp, #8
    9410:	009b      	lsls	r3, r3, #2
    9412:	818b      	strh	r3, [r1, #12]
    9414:	2300      	movs	r3, #0
    9416:	9002      	str	r0, [sp, #8]
    9418:	6108      	str	r0, [r1, #16]
    941a:	429c      	cmp	r4, r3
    941c:	d000      	beq.n	9420 <sniprintf+0x34>
    941e:	1e63      	subs	r3, r4, #1
    9420:	608b      	str	r3, [r1, #8]
    9422:	614b      	str	r3, [r1, #20]
    9424:	2301      	movs	r3, #1
    9426:	425b      	negs	r3, r3
    9428:	81cb      	strh	r3, [r1, #14]
    942a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    942c:	ab21      	add	r3, sp, #132	; 0x84
    942e:	0028      	movs	r0, r5
    9430:	9301      	str	r3, [sp, #4]
    9432:	f000 f9e9 	bl	9808 <_svfiprintf_r>
    9436:	1c43      	adds	r3, r0, #1
    9438:	da01      	bge.n	943e <sniprintf+0x52>
    943a:	238b      	movs	r3, #139	; 0x8b
    943c:	602b      	str	r3, [r5, #0]
    943e:	2c00      	cmp	r4, #0
    9440:	d0df      	beq.n	9402 <sniprintf+0x16>
    9442:	2300      	movs	r3, #0
    9444:	9a02      	ldr	r2, [sp, #8]
    9446:	7013      	strb	r3, [r2, #0]
    9448:	e7db      	b.n	9402 <sniprintf+0x16>
    944a:	46c0      	nop			; (mov r8, r8)
    944c:	20000124 	.word	0x20000124

00009450 <siprintf>:
    9450:	b40e      	push	{r1, r2, r3}
    9452:	b510      	push	{r4, lr}
    9454:	b09d      	sub	sp, #116	; 0x74
    9456:	a902      	add	r1, sp, #8
    9458:	9002      	str	r0, [sp, #8]
    945a:	6108      	str	r0, [r1, #16]
    945c:	480b      	ldr	r0, [pc, #44]	; (948c <siprintf+0x3c>)
    945e:	2482      	movs	r4, #130	; 0x82
    9460:	6088      	str	r0, [r1, #8]
    9462:	6148      	str	r0, [r1, #20]
    9464:	2001      	movs	r0, #1
    9466:	4240      	negs	r0, r0
    9468:	ab1f      	add	r3, sp, #124	; 0x7c
    946a:	81c8      	strh	r0, [r1, #14]
    946c:	4808      	ldr	r0, [pc, #32]	; (9490 <siprintf+0x40>)
    946e:	cb04      	ldmia	r3!, {r2}
    9470:	00a4      	lsls	r4, r4, #2
    9472:	6800      	ldr	r0, [r0, #0]
    9474:	9301      	str	r3, [sp, #4]
    9476:	818c      	strh	r4, [r1, #12]
    9478:	f000 f9c6 	bl	9808 <_svfiprintf_r>
    947c:	2300      	movs	r3, #0
    947e:	9a02      	ldr	r2, [sp, #8]
    9480:	7013      	strb	r3, [r2, #0]
    9482:	b01d      	add	sp, #116	; 0x74
    9484:	bc10      	pop	{r4}
    9486:	bc08      	pop	{r3}
    9488:	b003      	add	sp, #12
    948a:	4718      	bx	r3
    948c:	7fffffff 	.word	0x7fffffff
    9490:	20000124 	.word	0x20000124

00009494 <strchr>:
    9494:	b2c9      	uxtb	r1, r1
    9496:	7803      	ldrb	r3, [r0, #0]
    9498:	2b00      	cmp	r3, #0
    949a:	d004      	beq.n	94a6 <strchr+0x12>
    949c:	4299      	cmp	r1, r3
    949e:	d100      	bne.n	94a2 <strchr+0xe>
    94a0:	4770      	bx	lr
    94a2:	3001      	adds	r0, #1
    94a4:	e7f7      	b.n	9496 <strchr+0x2>
    94a6:	424b      	negs	r3, r1
    94a8:	4159      	adcs	r1, r3
    94aa:	4249      	negs	r1, r1
    94ac:	4008      	ands	r0, r1
    94ae:	e7f7      	b.n	94a0 <strchr+0xc>

000094b0 <strcpy>:
    94b0:	1c03      	adds	r3, r0, #0
    94b2:	780a      	ldrb	r2, [r1, #0]
    94b4:	3101      	adds	r1, #1
    94b6:	701a      	strb	r2, [r3, #0]
    94b8:	3301      	adds	r3, #1
    94ba:	2a00      	cmp	r2, #0
    94bc:	d1f9      	bne.n	94b2 <strcpy+0x2>
    94be:	4770      	bx	lr

000094c0 <strlen>:
    94c0:	2300      	movs	r3, #0
    94c2:	5cc2      	ldrb	r2, [r0, r3]
    94c4:	3301      	adds	r3, #1
    94c6:	2a00      	cmp	r2, #0
    94c8:	d1fb      	bne.n	94c2 <strlen+0x2>
    94ca:	1e58      	subs	r0, r3, #1
    94cc:	4770      	bx	lr

000094ce <strstr>:
    94ce:	b510      	push	{r4, lr}
    94d0:	0002      	movs	r2, r0
    94d2:	7800      	ldrb	r0, [r0, #0]
    94d4:	2800      	cmp	r0, #0
    94d6:	d104      	bne.n	94e2 <strstr+0x14>
    94d8:	7809      	ldrb	r1, [r1, #0]
    94da:	2900      	cmp	r1, #0
    94dc:	d00d      	beq.n	94fa <strstr+0x2c>
    94de:	bd10      	pop	{r4, pc}
    94e0:	3201      	adds	r2, #1
    94e2:	7810      	ldrb	r0, [r2, #0]
    94e4:	2800      	cmp	r0, #0
    94e6:	d0fa      	beq.n	94de <strstr+0x10>
    94e8:	2300      	movs	r3, #0
    94ea:	5cc8      	ldrb	r0, [r1, r3]
    94ec:	2800      	cmp	r0, #0
    94ee:	d004      	beq.n	94fa <strstr+0x2c>
    94f0:	5cd4      	ldrb	r4, [r2, r3]
    94f2:	4284      	cmp	r4, r0
    94f4:	d1f4      	bne.n	94e0 <strstr+0x12>
    94f6:	3301      	adds	r3, #1
    94f8:	e7f7      	b.n	94ea <strstr+0x1c>
    94fa:	0010      	movs	r0, r2
    94fc:	e7ef      	b.n	94de <strstr+0x10>
	...

00009500 <strtok>:
    9500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9502:	4b12      	ldr	r3, [pc, #72]	; (954c <strtok+0x4c>)
    9504:	0006      	movs	r6, r0
    9506:	681d      	ldr	r5, [r3, #0]
    9508:	000f      	movs	r7, r1
    950a:	6dac      	ldr	r4, [r5, #88]	; 0x58
    950c:	2c00      	cmp	r4, #0
    950e:	d116      	bne.n	953e <strtok+0x3e>
    9510:	2050      	movs	r0, #80	; 0x50
    9512:	f7ff fe6b 	bl	91ec <malloc>
    9516:	65a8      	str	r0, [r5, #88]	; 0x58
    9518:	6004      	str	r4, [r0, #0]
    951a:	6044      	str	r4, [r0, #4]
    951c:	6084      	str	r4, [r0, #8]
    951e:	60c4      	str	r4, [r0, #12]
    9520:	6104      	str	r4, [r0, #16]
    9522:	6144      	str	r4, [r0, #20]
    9524:	6184      	str	r4, [r0, #24]
    9526:	6284      	str	r4, [r0, #40]	; 0x28
    9528:	62c4      	str	r4, [r0, #44]	; 0x2c
    952a:	6304      	str	r4, [r0, #48]	; 0x30
    952c:	6344      	str	r4, [r0, #52]	; 0x34
    952e:	6384      	str	r4, [r0, #56]	; 0x38
    9530:	63c4      	str	r4, [r0, #60]	; 0x3c
    9532:	6404      	str	r4, [r0, #64]	; 0x40
    9534:	6444      	str	r4, [r0, #68]	; 0x44
    9536:	6484      	str	r4, [r0, #72]	; 0x48
    9538:	64c4      	str	r4, [r0, #76]	; 0x4c
    953a:	7704      	strb	r4, [r0, #28]
    953c:	6244      	str	r4, [r0, #36]	; 0x24
    953e:	6daa      	ldr	r2, [r5, #88]	; 0x58
    9540:	0039      	movs	r1, r7
    9542:	0030      	movs	r0, r6
    9544:	2301      	movs	r3, #1
    9546:	f000 f803 	bl	9550 <__strtok_r>
    954a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    954c:	20000124 	.word	0x20000124

00009550 <__strtok_r>:
    9550:	b5f0      	push	{r4, r5, r6, r7, lr}
    9552:	2800      	cmp	r0, #0
    9554:	d104      	bne.n	9560 <__strtok_r+0x10>
    9556:	6810      	ldr	r0, [r2, #0]
    9558:	2800      	cmp	r0, #0
    955a:	d101      	bne.n	9560 <__strtok_r+0x10>
    955c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    955e:	0020      	movs	r0, r4
    9560:	000e      	movs	r6, r1
    9562:	7805      	ldrb	r5, [r0, #0]
    9564:	1c44      	adds	r4, r0, #1
    9566:	7837      	ldrb	r7, [r6, #0]
    9568:	2f00      	cmp	r7, #0
    956a:	d104      	bne.n	9576 <__strtok_r+0x26>
    956c:	2d00      	cmp	r5, #0
    956e:	d110      	bne.n	9592 <__strtok_r+0x42>
    9570:	6015      	str	r5, [r2, #0]
    9572:	0028      	movs	r0, r5
    9574:	e7f2      	b.n	955c <__strtok_r+0xc>
    9576:	3601      	adds	r6, #1
    9578:	42bd      	cmp	r5, r7
    957a:	d1f4      	bne.n	9566 <__strtok_r+0x16>
    957c:	2b00      	cmp	r3, #0
    957e:	d1ee      	bne.n	955e <__strtok_r+0xe>
    9580:	6014      	str	r4, [r2, #0]
    9582:	7003      	strb	r3, [r0, #0]
    9584:	e7ea      	b.n	955c <__strtok_r+0xc>
    9586:	0033      	movs	r3, r6
    9588:	e00e      	b.n	95a8 <__strtok_r+0x58>
    958a:	3501      	adds	r5, #1
    958c:	001c      	movs	r4, r3
    958e:	2f00      	cmp	r7, #0
    9590:	d102      	bne.n	9598 <__strtok_r+0x48>
    9592:	000d      	movs	r5, r1
    9594:	7826      	ldrb	r6, [r4, #0]
    9596:	1c63      	adds	r3, r4, #1
    9598:	782f      	ldrb	r7, [r5, #0]
    959a:	42be      	cmp	r6, r7
    959c:	d1f5      	bne.n	958a <__strtok_r+0x3a>
    959e:	2e00      	cmp	r6, #0
    95a0:	d0f1      	beq.n	9586 <__strtok_r+0x36>
    95a2:	2400      	movs	r4, #0
    95a4:	1e59      	subs	r1, r3, #1
    95a6:	700c      	strb	r4, [r1, #0]
    95a8:	6013      	str	r3, [r2, #0]
    95aa:	e7d7      	b.n	955c <__strtok_r+0xc>

000095ac <_strtol_l.isra.0>:
    95ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    95ae:	001f      	movs	r7, r3
    95b0:	000e      	movs	r6, r1
    95b2:	b087      	sub	sp, #28
    95b4:	9005      	str	r0, [sp, #20]
    95b6:	9103      	str	r1, [sp, #12]
    95b8:	9202      	str	r2, [sp, #8]
    95ba:	980c      	ldr	r0, [sp, #48]	; 0x30
    95bc:	7834      	ldrb	r4, [r6, #0]
    95be:	f7ff fe03 	bl	91c8 <__locale_ctype_ptr_l>
    95c2:	2208      	movs	r2, #8
    95c4:	1900      	adds	r0, r0, r4
    95c6:	7843      	ldrb	r3, [r0, #1]
    95c8:	1c75      	adds	r5, r6, #1
    95ca:	4013      	ands	r3, r2
    95cc:	d10c      	bne.n	95e8 <_strtol_l.isra.0+0x3c>
    95ce:	2c2d      	cmp	r4, #45	; 0x2d
    95d0:	d10c      	bne.n	95ec <_strtol_l.isra.0+0x40>
    95d2:	3301      	adds	r3, #1
    95d4:	782c      	ldrb	r4, [r5, #0]
    95d6:	9301      	str	r3, [sp, #4]
    95d8:	1cb5      	adds	r5, r6, #2
    95da:	2f00      	cmp	r7, #0
    95dc:	d00c      	beq.n	95f8 <_strtol_l.isra.0+0x4c>
    95de:	2f10      	cmp	r7, #16
    95e0:	d114      	bne.n	960c <_strtol_l.isra.0+0x60>
    95e2:	2c30      	cmp	r4, #48	; 0x30
    95e4:	d00a      	beq.n	95fc <_strtol_l.isra.0+0x50>
    95e6:	e011      	b.n	960c <_strtol_l.isra.0+0x60>
    95e8:	002e      	movs	r6, r5
    95ea:	e7e6      	b.n	95ba <_strtol_l.isra.0+0xe>
    95ec:	9301      	str	r3, [sp, #4]
    95ee:	2c2b      	cmp	r4, #43	; 0x2b
    95f0:	d1f3      	bne.n	95da <_strtol_l.isra.0+0x2e>
    95f2:	782c      	ldrb	r4, [r5, #0]
    95f4:	1cb5      	adds	r5, r6, #2
    95f6:	e7f0      	b.n	95da <_strtol_l.isra.0+0x2e>
    95f8:	2c30      	cmp	r4, #48	; 0x30
    95fa:	d12f      	bne.n	965c <_strtol_l.isra.0+0xb0>
    95fc:	2220      	movs	r2, #32
    95fe:	782b      	ldrb	r3, [r5, #0]
    9600:	4393      	bics	r3, r2
    9602:	2b58      	cmp	r3, #88	; 0x58
    9604:	d151      	bne.n	96aa <_strtol_l.isra.0+0xfe>
    9606:	2710      	movs	r7, #16
    9608:	786c      	ldrb	r4, [r5, #1]
    960a:	3502      	adds	r5, #2
    960c:	9b01      	ldr	r3, [sp, #4]
    960e:	4a29      	ldr	r2, [pc, #164]	; (96b4 <_strtol_l.isra.0+0x108>)
    9610:	0039      	movs	r1, r7
    9612:	189e      	adds	r6, r3, r2
    9614:	0030      	movs	r0, r6
    9616:	f7ff fb53 	bl	8cc0 <__aeabi_uidivmod>
    961a:	0030      	movs	r0, r6
    961c:	9104      	str	r1, [sp, #16]
    961e:	0039      	movs	r1, r7
    9620:	f7ff fac8 	bl	8bb4 <__udivsi3>
    9624:	2101      	movs	r1, #1
    9626:	2300      	movs	r3, #0
    9628:	4249      	negs	r1, r1
    962a:	0002      	movs	r2, r0
    962c:	468c      	mov	ip, r1
    962e:	0018      	movs	r0, r3
    9630:	0021      	movs	r1, r4
    9632:	3930      	subs	r1, #48	; 0x30
    9634:	2909      	cmp	r1, #9
    9636:	d813      	bhi.n	9660 <_strtol_l.isra.0+0xb4>
    9638:	000c      	movs	r4, r1
    963a:	42a7      	cmp	r7, r4
    963c:	dd1c      	ble.n	9678 <_strtol_l.isra.0+0xcc>
    963e:	1c59      	adds	r1, r3, #1
    9640:	d009      	beq.n	9656 <_strtol_l.isra.0+0xaa>
    9642:	4663      	mov	r3, ip
    9644:	4282      	cmp	r2, r0
    9646:	d306      	bcc.n	9656 <_strtol_l.isra.0+0xaa>
    9648:	d102      	bne.n	9650 <_strtol_l.isra.0+0xa4>
    964a:	9904      	ldr	r1, [sp, #16]
    964c:	42a1      	cmp	r1, r4
    964e:	db02      	blt.n	9656 <_strtol_l.isra.0+0xaa>
    9650:	2301      	movs	r3, #1
    9652:	4378      	muls	r0, r7
    9654:	1820      	adds	r0, r4, r0
    9656:	782c      	ldrb	r4, [r5, #0]
    9658:	3501      	adds	r5, #1
    965a:	e7e9      	b.n	9630 <_strtol_l.isra.0+0x84>
    965c:	270a      	movs	r7, #10
    965e:	e7d5      	b.n	960c <_strtol_l.isra.0+0x60>
    9660:	0021      	movs	r1, r4
    9662:	3941      	subs	r1, #65	; 0x41
    9664:	2919      	cmp	r1, #25
    9666:	d801      	bhi.n	966c <_strtol_l.isra.0+0xc0>
    9668:	3c37      	subs	r4, #55	; 0x37
    966a:	e7e6      	b.n	963a <_strtol_l.isra.0+0x8e>
    966c:	0021      	movs	r1, r4
    966e:	3961      	subs	r1, #97	; 0x61
    9670:	2919      	cmp	r1, #25
    9672:	d801      	bhi.n	9678 <_strtol_l.isra.0+0xcc>
    9674:	3c57      	subs	r4, #87	; 0x57
    9676:	e7e0      	b.n	963a <_strtol_l.isra.0+0x8e>
    9678:	1c5a      	adds	r2, r3, #1
    967a:	d108      	bne.n	968e <_strtol_l.isra.0+0xe2>
    967c:	9a05      	ldr	r2, [sp, #20]
    967e:	3323      	adds	r3, #35	; 0x23
    9680:	6013      	str	r3, [r2, #0]
    9682:	9b02      	ldr	r3, [sp, #8]
    9684:	0030      	movs	r0, r6
    9686:	2b00      	cmp	r3, #0
    9688:	d10b      	bne.n	96a2 <_strtol_l.isra.0+0xf6>
    968a:	b007      	add	sp, #28
    968c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    968e:	9a01      	ldr	r2, [sp, #4]
    9690:	2a00      	cmp	r2, #0
    9692:	d000      	beq.n	9696 <_strtol_l.isra.0+0xea>
    9694:	4240      	negs	r0, r0
    9696:	9a02      	ldr	r2, [sp, #8]
    9698:	2a00      	cmp	r2, #0
    969a:	d0f6      	beq.n	968a <_strtol_l.isra.0+0xde>
    969c:	9a03      	ldr	r2, [sp, #12]
    969e:	2b00      	cmp	r3, #0
    96a0:	d000      	beq.n	96a4 <_strtol_l.isra.0+0xf8>
    96a2:	1e6a      	subs	r2, r5, #1
    96a4:	9b02      	ldr	r3, [sp, #8]
    96a6:	601a      	str	r2, [r3, #0]
    96a8:	e7ef      	b.n	968a <_strtol_l.isra.0+0xde>
    96aa:	2430      	movs	r4, #48	; 0x30
    96ac:	2f00      	cmp	r7, #0
    96ae:	d1ad      	bne.n	960c <_strtol_l.isra.0+0x60>
    96b0:	3708      	adds	r7, #8
    96b2:	e7ab      	b.n	960c <_strtol_l.isra.0+0x60>
    96b4:	7fffffff 	.word	0x7fffffff

000096b8 <strtol>:
    96b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    96ba:	0013      	movs	r3, r2
    96bc:	4a06      	ldr	r2, [pc, #24]	; (96d8 <strtol+0x20>)
    96be:	0005      	movs	r5, r0
    96c0:	6810      	ldr	r0, [r2, #0]
    96c2:	6a04      	ldr	r4, [r0, #32]
    96c4:	2c00      	cmp	r4, #0
    96c6:	d100      	bne.n	96ca <strtol+0x12>
    96c8:	4c04      	ldr	r4, [pc, #16]	; (96dc <strtol+0x24>)
    96ca:	000a      	movs	r2, r1
    96cc:	9400      	str	r4, [sp, #0]
    96ce:	0029      	movs	r1, r5
    96d0:	f7ff ff6c 	bl	95ac <_strtol_l.isra.0>
    96d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    96d6:	46c0      	nop			; (mov r8, r8)
    96d8:	20000124 	.word	0x20000124
    96dc:	20000188 	.word	0x20000188

000096e0 <_vsiprintf_r>:
    96e0:	b530      	push	{r4, r5, lr}
    96e2:	b09b      	sub	sp, #108	; 0x6c
    96e4:	9100      	str	r1, [sp, #0]
    96e6:	9104      	str	r1, [sp, #16]
    96e8:	4908      	ldr	r1, [pc, #32]	; (970c <_vsiprintf_r+0x2c>)
    96ea:	466d      	mov	r5, sp
    96ec:	9102      	str	r1, [sp, #8]
    96ee:	9105      	str	r1, [sp, #20]
    96f0:	2101      	movs	r1, #1
    96f2:	2482      	movs	r4, #130	; 0x82
    96f4:	4249      	negs	r1, r1
    96f6:	81e9      	strh	r1, [r5, #14]
    96f8:	00a4      	lsls	r4, r4, #2
    96fa:	4669      	mov	r1, sp
    96fc:	81ac      	strh	r4, [r5, #12]
    96fe:	f000 f883 	bl	9808 <_svfiprintf_r>
    9702:	2300      	movs	r3, #0
    9704:	9a00      	ldr	r2, [sp, #0]
    9706:	7013      	strb	r3, [r2, #0]
    9708:	b01b      	add	sp, #108	; 0x6c
    970a:	bd30      	pop	{r4, r5, pc}
    970c:	7fffffff 	.word	0x7fffffff

00009710 <vsiprintf>:
    9710:	b510      	push	{r4, lr}
    9712:	0013      	movs	r3, r2
    9714:	000a      	movs	r2, r1
    9716:	0001      	movs	r1, r0
    9718:	4802      	ldr	r0, [pc, #8]	; (9724 <vsiprintf+0x14>)
    971a:	6800      	ldr	r0, [r0, #0]
    971c:	f7ff ffe0 	bl	96e0 <_vsiprintf_r>
    9720:	bd10      	pop	{r4, pc}
    9722:	46c0      	nop			; (mov r8, r8)
    9724:	20000124 	.word	0x20000124

00009728 <__ascii_wctomb>:
    9728:	1e0b      	subs	r3, r1, #0
    972a:	d004      	beq.n	9736 <__ascii_wctomb+0xe>
    972c:	2aff      	cmp	r2, #255	; 0xff
    972e:	d904      	bls.n	973a <__ascii_wctomb+0x12>
    9730:	238a      	movs	r3, #138	; 0x8a
    9732:	6003      	str	r3, [r0, #0]
    9734:	3b8b      	subs	r3, #139	; 0x8b
    9736:	0018      	movs	r0, r3
    9738:	4770      	bx	lr
    973a:	700a      	strb	r2, [r1, #0]
    973c:	2301      	movs	r3, #1
    973e:	e7fa      	b.n	9736 <__ascii_wctomb+0xe>

00009740 <__malloc_lock>:
    9740:	4770      	bx	lr

00009742 <__malloc_unlock>:
    9742:	4770      	bx	lr

00009744 <__ssputs_r>:
    9744:	b5f0      	push	{r4, r5, r6, r7, lr}
    9746:	688e      	ldr	r6, [r1, #8]
    9748:	b085      	sub	sp, #20
    974a:	0007      	movs	r7, r0
    974c:	000c      	movs	r4, r1
    974e:	9203      	str	r2, [sp, #12]
    9750:	9301      	str	r3, [sp, #4]
    9752:	429e      	cmp	r6, r3
    9754:	d839      	bhi.n	97ca <__ssputs_r+0x86>
    9756:	2390      	movs	r3, #144	; 0x90
    9758:	898a      	ldrh	r2, [r1, #12]
    975a:	00db      	lsls	r3, r3, #3
    975c:	421a      	tst	r2, r3
    975e:	d034      	beq.n	97ca <__ssputs_r+0x86>
    9760:	2503      	movs	r5, #3
    9762:	6909      	ldr	r1, [r1, #16]
    9764:	6823      	ldr	r3, [r4, #0]
    9766:	1a5b      	subs	r3, r3, r1
    9768:	9302      	str	r3, [sp, #8]
    976a:	6963      	ldr	r3, [r4, #20]
    976c:	9802      	ldr	r0, [sp, #8]
    976e:	435d      	muls	r5, r3
    9770:	0feb      	lsrs	r3, r5, #31
    9772:	195d      	adds	r5, r3, r5
    9774:	9b01      	ldr	r3, [sp, #4]
    9776:	106d      	asrs	r5, r5, #1
    9778:	3301      	adds	r3, #1
    977a:	181b      	adds	r3, r3, r0
    977c:	42ab      	cmp	r3, r5
    977e:	d900      	bls.n	9782 <__ssputs_r+0x3e>
    9780:	001d      	movs	r5, r3
    9782:	0553      	lsls	r3, r2, #21
    9784:	d532      	bpl.n	97ec <__ssputs_r+0xa8>
    9786:	0029      	movs	r1, r5
    9788:	0038      	movs	r0, r7
    978a:	f7ff fdbf 	bl	930c <_malloc_r>
    978e:	1e06      	subs	r6, r0, #0
    9790:	d109      	bne.n	97a6 <__ssputs_r+0x62>
    9792:	230c      	movs	r3, #12
    9794:	603b      	str	r3, [r7, #0]
    9796:	2340      	movs	r3, #64	; 0x40
    9798:	2001      	movs	r0, #1
    979a:	89a2      	ldrh	r2, [r4, #12]
    979c:	4240      	negs	r0, r0
    979e:	4313      	orrs	r3, r2
    97a0:	81a3      	strh	r3, [r4, #12]
    97a2:	b005      	add	sp, #20
    97a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97a6:	9a02      	ldr	r2, [sp, #8]
    97a8:	6921      	ldr	r1, [r4, #16]
    97aa:	f7ff fd45 	bl	9238 <memcpy>
    97ae:	89a3      	ldrh	r3, [r4, #12]
    97b0:	4a14      	ldr	r2, [pc, #80]	; (9804 <__ssputs_r+0xc0>)
    97b2:	401a      	ands	r2, r3
    97b4:	2380      	movs	r3, #128	; 0x80
    97b6:	4313      	orrs	r3, r2
    97b8:	81a3      	strh	r3, [r4, #12]
    97ba:	9b02      	ldr	r3, [sp, #8]
    97bc:	6126      	str	r6, [r4, #16]
    97be:	18f6      	adds	r6, r6, r3
    97c0:	6026      	str	r6, [r4, #0]
    97c2:	6165      	str	r5, [r4, #20]
    97c4:	9e01      	ldr	r6, [sp, #4]
    97c6:	1aed      	subs	r5, r5, r3
    97c8:	60a5      	str	r5, [r4, #8]
    97ca:	9b01      	ldr	r3, [sp, #4]
    97cc:	42b3      	cmp	r3, r6
    97ce:	d200      	bcs.n	97d2 <__ssputs_r+0x8e>
    97d0:	001e      	movs	r6, r3
    97d2:	0032      	movs	r2, r6
    97d4:	9903      	ldr	r1, [sp, #12]
    97d6:	6820      	ldr	r0, [r4, #0]
    97d8:	f000 faad 	bl	9d36 <memmove>
    97dc:	68a3      	ldr	r3, [r4, #8]
    97de:	2000      	movs	r0, #0
    97e0:	1b9b      	subs	r3, r3, r6
    97e2:	60a3      	str	r3, [r4, #8]
    97e4:	6823      	ldr	r3, [r4, #0]
    97e6:	199e      	adds	r6, r3, r6
    97e8:	6026      	str	r6, [r4, #0]
    97ea:	e7da      	b.n	97a2 <__ssputs_r+0x5e>
    97ec:	002a      	movs	r2, r5
    97ee:	0038      	movs	r0, r7
    97f0:	f000 fab3 	bl	9d5a <_realloc_r>
    97f4:	1e06      	subs	r6, r0, #0
    97f6:	d1e0      	bne.n	97ba <__ssputs_r+0x76>
    97f8:	6921      	ldr	r1, [r4, #16]
    97fa:	0038      	movs	r0, r7
    97fc:	f7ff fd3c 	bl	9278 <_free_r>
    9800:	e7c7      	b.n	9792 <__ssputs_r+0x4e>
    9802:	46c0      	nop			; (mov r8, r8)
    9804:	fffffb7f 	.word	0xfffffb7f

00009808 <_svfiprintf_r>:
    9808:	b5f0      	push	{r4, r5, r6, r7, lr}
    980a:	b09f      	sub	sp, #124	; 0x7c
    980c:	9002      	str	r0, [sp, #8]
    980e:	9305      	str	r3, [sp, #20]
    9810:	898b      	ldrh	r3, [r1, #12]
    9812:	000f      	movs	r7, r1
    9814:	0016      	movs	r6, r2
    9816:	061b      	lsls	r3, r3, #24
    9818:	d511      	bpl.n	983e <_svfiprintf_r+0x36>
    981a:	690b      	ldr	r3, [r1, #16]
    981c:	2b00      	cmp	r3, #0
    981e:	d10e      	bne.n	983e <_svfiprintf_r+0x36>
    9820:	2140      	movs	r1, #64	; 0x40
    9822:	f7ff fd73 	bl	930c <_malloc_r>
    9826:	6038      	str	r0, [r7, #0]
    9828:	6138      	str	r0, [r7, #16]
    982a:	2800      	cmp	r0, #0
    982c:	d105      	bne.n	983a <_svfiprintf_r+0x32>
    982e:	230c      	movs	r3, #12
    9830:	9a02      	ldr	r2, [sp, #8]
    9832:	3801      	subs	r0, #1
    9834:	6013      	str	r3, [r2, #0]
    9836:	b01f      	add	sp, #124	; 0x7c
    9838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    983a:	2340      	movs	r3, #64	; 0x40
    983c:	617b      	str	r3, [r7, #20]
    983e:	2300      	movs	r3, #0
    9840:	ad06      	add	r5, sp, #24
    9842:	616b      	str	r3, [r5, #20]
    9844:	3320      	adds	r3, #32
    9846:	766b      	strb	r3, [r5, #25]
    9848:	3310      	adds	r3, #16
    984a:	76ab      	strb	r3, [r5, #26]
    984c:	0034      	movs	r4, r6
    984e:	7823      	ldrb	r3, [r4, #0]
    9850:	2b00      	cmp	r3, #0
    9852:	d147      	bne.n	98e4 <_svfiprintf_r+0xdc>
    9854:	1ba3      	subs	r3, r4, r6
    9856:	9304      	str	r3, [sp, #16]
    9858:	d00d      	beq.n	9876 <_svfiprintf_r+0x6e>
    985a:	1ba3      	subs	r3, r4, r6
    985c:	0032      	movs	r2, r6
    985e:	0039      	movs	r1, r7
    9860:	9802      	ldr	r0, [sp, #8]
    9862:	f7ff ff6f 	bl	9744 <__ssputs_r>
    9866:	1c43      	adds	r3, r0, #1
    9868:	d100      	bne.n	986c <_svfiprintf_r+0x64>
    986a:	e0b5      	b.n	99d8 <_svfiprintf_r+0x1d0>
    986c:	696a      	ldr	r2, [r5, #20]
    986e:	9b04      	ldr	r3, [sp, #16]
    9870:	4694      	mov	ip, r2
    9872:	4463      	add	r3, ip
    9874:	616b      	str	r3, [r5, #20]
    9876:	7823      	ldrb	r3, [r4, #0]
    9878:	2b00      	cmp	r3, #0
    987a:	d100      	bne.n	987e <_svfiprintf_r+0x76>
    987c:	e0ac      	b.n	99d8 <_svfiprintf_r+0x1d0>
    987e:	2201      	movs	r2, #1
    9880:	2300      	movs	r3, #0
    9882:	4252      	negs	r2, r2
    9884:	606a      	str	r2, [r5, #4]
    9886:	a902      	add	r1, sp, #8
    9888:	3254      	adds	r2, #84	; 0x54
    988a:	1852      	adds	r2, r2, r1
    988c:	3401      	adds	r4, #1
    988e:	602b      	str	r3, [r5, #0]
    9890:	60eb      	str	r3, [r5, #12]
    9892:	60ab      	str	r3, [r5, #8]
    9894:	7013      	strb	r3, [r2, #0]
    9896:	65ab      	str	r3, [r5, #88]	; 0x58
    9898:	4e58      	ldr	r6, [pc, #352]	; (99fc <_svfiprintf_r+0x1f4>)
    989a:	2205      	movs	r2, #5
    989c:	7821      	ldrb	r1, [r4, #0]
    989e:	0030      	movs	r0, r6
    98a0:	f000 fa3e 	bl	9d20 <memchr>
    98a4:	1c62      	adds	r2, r4, #1
    98a6:	2800      	cmp	r0, #0
    98a8:	d120      	bne.n	98ec <_svfiprintf_r+0xe4>
    98aa:	6829      	ldr	r1, [r5, #0]
    98ac:	06cb      	lsls	r3, r1, #27
    98ae:	d504      	bpl.n	98ba <_svfiprintf_r+0xb2>
    98b0:	2353      	movs	r3, #83	; 0x53
    98b2:	ae02      	add	r6, sp, #8
    98b4:	3020      	adds	r0, #32
    98b6:	199b      	adds	r3, r3, r6
    98b8:	7018      	strb	r0, [r3, #0]
    98ba:	070b      	lsls	r3, r1, #28
    98bc:	d504      	bpl.n	98c8 <_svfiprintf_r+0xc0>
    98be:	2353      	movs	r3, #83	; 0x53
    98c0:	202b      	movs	r0, #43	; 0x2b
    98c2:	ae02      	add	r6, sp, #8
    98c4:	199b      	adds	r3, r3, r6
    98c6:	7018      	strb	r0, [r3, #0]
    98c8:	7823      	ldrb	r3, [r4, #0]
    98ca:	2b2a      	cmp	r3, #42	; 0x2a
    98cc:	d016      	beq.n	98fc <_svfiprintf_r+0xf4>
    98ce:	2000      	movs	r0, #0
    98d0:	210a      	movs	r1, #10
    98d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    98d4:	7822      	ldrb	r2, [r4, #0]
    98d6:	3a30      	subs	r2, #48	; 0x30
    98d8:	2a09      	cmp	r2, #9
    98da:	d955      	bls.n	9988 <_svfiprintf_r+0x180>
    98dc:	2800      	cmp	r0, #0
    98de:	d015      	beq.n	990c <_svfiprintf_r+0x104>
    98e0:	9309      	str	r3, [sp, #36]	; 0x24
    98e2:	e013      	b.n	990c <_svfiprintf_r+0x104>
    98e4:	2b25      	cmp	r3, #37	; 0x25
    98e6:	d0b5      	beq.n	9854 <_svfiprintf_r+0x4c>
    98e8:	3401      	adds	r4, #1
    98ea:	e7b0      	b.n	984e <_svfiprintf_r+0x46>
    98ec:	2301      	movs	r3, #1
    98ee:	1b80      	subs	r0, r0, r6
    98f0:	4083      	lsls	r3, r0
    98f2:	6829      	ldr	r1, [r5, #0]
    98f4:	0014      	movs	r4, r2
    98f6:	430b      	orrs	r3, r1
    98f8:	602b      	str	r3, [r5, #0]
    98fa:	e7cd      	b.n	9898 <_svfiprintf_r+0x90>
    98fc:	9b05      	ldr	r3, [sp, #20]
    98fe:	1d18      	adds	r0, r3, #4
    9900:	681b      	ldr	r3, [r3, #0]
    9902:	9005      	str	r0, [sp, #20]
    9904:	2b00      	cmp	r3, #0
    9906:	db39      	blt.n	997c <_svfiprintf_r+0x174>
    9908:	9309      	str	r3, [sp, #36]	; 0x24
    990a:	0014      	movs	r4, r2
    990c:	7823      	ldrb	r3, [r4, #0]
    990e:	2b2e      	cmp	r3, #46	; 0x2e
    9910:	d10b      	bne.n	992a <_svfiprintf_r+0x122>
    9912:	7863      	ldrb	r3, [r4, #1]
    9914:	1c62      	adds	r2, r4, #1
    9916:	2b2a      	cmp	r3, #42	; 0x2a
    9918:	d13e      	bne.n	9998 <_svfiprintf_r+0x190>
    991a:	9b05      	ldr	r3, [sp, #20]
    991c:	3402      	adds	r4, #2
    991e:	1d1a      	adds	r2, r3, #4
    9920:	681b      	ldr	r3, [r3, #0]
    9922:	9205      	str	r2, [sp, #20]
    9924:	2b00      	cmp	r3, #0
    9926:	db34      	blt.n	9992 <_svfiprintf_r+0x18a>
    9928:	9307      	str	r3, [sp, #28]
    992a:	4e35      	ldr	r6, [pc, #212]	; (9a00 <_svfiprintf_r+0x1f8>)
    992c:	7821      	ldrb	r1, [r4, #0]
    992e:	2203      	movs	r2, #3
    9930:	0030      	movs	r0, r6
    9932:	f000 f9f5 	bl	9d20 <memchr>
    9936:	2800      	cmp	r0, #0
    9938:	d006      	beq.n	9948 <_svfiprintf_r+0x140>
    993a:	2340      	movs	r3, #64	; 0x40
    993c:	1b80      	subs	r0, r0, r6
    993e:	4083      	lsls	r3, r0
    9940:	682a      	ldr	r2, [r5, #0]
    9942:	3401      	adds	r4, #1
    9944:	4313      	orrs	r3, r2
    9946:	602b      	str	r3, [r5, #0]
    9948:	7821      	ldrb	r1, [r4, #0]
    994a:	2206      	movs	r2, #6
    994c:	482d      	ldr	r0, [pc, #180]	; (9a04 <_svfiprintf_r+0x1fc>)
    994e:	1c66      	adds	r6, r4, #1
    9950:	7629      	strb	r1, [r5, #24]
    9952:	f000 f9e5 	bl	9d20 <memchr>
    9956:	2800      	cmp	r0, #0
    9958:	d046      	beq.n	99e8 <_svfiprintf_r+0x1e0>
    995a:	4b2b      	ldr	r3, [pc, #172]	; (9a08 <_svfiprintf_r+0x200>)
    995c:	2b00      	cmp	r3, #0
    995e:	d12f      	bne.n	99c0 <_svfiprintf_r+0x1b8>
    9960:	6829      	ldr	r1, [r5, #0]
    9962:	9b05      	ldr	r3, [sp, #20]
    9964:	2207      	movs	r2, #7
    9966:	05c9      	lsls	r1, r1, #23
    9968:	d528      	bpl.n	99bc <_svfiprintf_r+0x1b4>
    996a:	189b      	adds	r3, r3, r2
    996c:	4393      	bics	r3, r2
    996e:	3308      	adds	r3, #8
    9970:	9305      	str	r3, [sp, #20]
    9972:	696b      	ldr	r3, [r5, #20]
    9974:	9a03      	ldr	r2, [sp, #12]
    9976:	189b      	adds	r3, r3, r2
    9978:	616b      	str	r3, [r5, #20]
    997a:	e767      	b.n	984c <_svfiprintf_r+0x44>
    997c:	425b      	negs	r3, r3
    997e:	60eb      	str	r3, [r5, #12]
    9980:	2302      	movs	r3, #2
    9982:	430b      	orrs	r3, r1
    9984:	602b      	str	r3, [r5, #0]
    9986:	e7c0      	b.n	990a <_svfiprintf_r+0x102>
    9988:	434b      	muls	r3, r1
    998a:	3401      	adds	r4, #1
    998c:	189b      	adds	r3, r3, r2
    998e:	2001      	movs	r0, #1
    9990:	e7a0      	b.n	98d4 <_svfiprintf_r+0xcc>
    9992:	2301      	movs	r3, #1
    9994:	425b      	negs	r3, r3
    9996:	e7c7      	b.n	9928 <_svfiprintf_r+0x120>
    9998:	2300      	movs	r3, #0
    999a:	0014      	movs	r4, r2
    999c:	200a      	movs	r0, #10
    999e:	001a      	movs	r2, r3
    99a0:	606b      	str	r3, [r5, #4]
    99a2:	7821      	ldrb	r1, [r4, #0]
    99a4:	3930      	subs	r1, #48	; 0x30
    99a6:	2909      	cmp	r1, #9
    99a8:	d903      	bls.n	99b2 <_svfiprintf_r+0x1aa>
    99aa:	2b00      	cmp	r3, #0
    99ac:	d0bd      	beq.n	992a <_svfiprintf_r+0x122>
    99ae:	9207      	str	r2, [sp, #28]
    99b0:	e7bb      	b.n	992a <_svfiprintf_r+0x122>
    99b2:	4342      	muls	r2, r0
    99b4:	3401      	adds	r4, #1
    99b6:	1852      	adds	r2, r2, r1
    99b8:	2301      	movs	r3, #1
    99ba:	e7f2      	b.n	99a2 <_svfiprintf_r+0x19a>
    99bc:	3307      	adds	r3, #7
    99be:	e7d5      	b.n	996c <_svfiprintf_r+0x164>
    99c0:	ab05      	add	r3, sp, #20
    99c2:	9300      	str	r3, [sp, #0]
    99c4:	003a      	movs	r2, r7
    99c6:	4b11      	ldr	r3, [pc, #68]	; (9a0c <_svfiprintf_r+0x204>)
    99c8:	0029      	movs	r1, r5
    99ca:	9802      	ldr	r0, [sp, #8]
    99cc:	e000      	b.n	99d0 <_svfiprintf_r+0x1c8>
    99ce:	bf00      	nop
    99d0:	9003      	str	r0, [sp, #12]
    99d2:	9b03      	ldr	r3, [sp, #12]
    99d4:	3301      	adds	r3, #1
    99d6:	d1cc      	bne.n	9972 <_svfiprintf_r+0x16a>
    99d8:	89bb      	ldrh	r3, [r7, #12]
    99da:	980b      	ldr	r0, [sp, #44]	; 0x2c
    99dc:	065b      	lsls	r3, r3, #25
    99de:	d400      	bmi.n	99e2 <_svfiprintf_r+0x1da>
    99e0:	e729      	b.n	9836 <_svfiprintf_r+0x2e>
    99e2:	2001      	movs	r0, #1
    99e4:	4240      	negs	r0, r0
    99e6:	e726      	b.n	9836 <_svfiprintf_r+0x2e>
    99e8:	ab05      	add	r3, sp, #20
    99ea:	9300      	str	r3, [sp, #0]
    99ec:	003a      	movs	r2, r7
    99ee:	4b07      	ldr	r3, [pc, #28]	; (9a0c <_svfiprintf_r+0x204>)
    99f0:	0029      	movs	r1, r5
    99f2:	9802      	ldr	r0, [sp, #8]
    99f4:	f000 f87a 	bl	9aec <_printf_i>
    99f8:	e7ea      	b.n	99d0 <_svfiprintf_r+0x1c8>
    99fa:	46c0      	nop			; (mov r8, r8)
    99fc:	0000a6cb 	.word	0x0000a6cb
    9a00:	0000a6d1 	.word	0x0000a6d1
    9a04:	0000a6d5 	.word	0x0000a6d5
    9a08:	00000000 	.word	0x00000000
    9a0c:	00009745 	.word	0x00009745

00009a10 <_printf_common>:
    9a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9a12:	0015      	movs	r5, r2
    9a14:	9301      	str	r3, [sp, #4]
    9a16:	688a      	ldr	r2, [r1, #8]
    9a18:	690b      	ldr	r3, [r1, #16]
    9a1a:	9000      	str	r0, [sp, #0]
    9a1c:	000c      	movs	r4, r1
    9a1e:	4293      	cmp	r3, r2
    9a20:	da00      	bge.n	9a24 <_printf_common+0x14>
    9a22:	0013      	movs	r3, r2
    9a24:	0022      	movs	r2, r4
    9a26:	602b      	str	r3, [r5, #0]
    9a28:	3243      	adds	r2, #67	; 0x43
    9a2a:	7812      	ldrb	r2, [r2, #0]
    9a2c:	2a00      	cmp	r2, #0
    9a2e:	d001      	beq.n	9a34 <_printf_common+0x24>
    9a30:	3301      	adds	r3, #1
    9a32:	602b      	str	r3, [r5, #0]
    9a34:	6823      	ldr	r3, [r4, #0]
    9a36:	069b      	lsls	r3, r3, #26
    9a38:	d502      	bpl.n	9a40 <_printf_common+0x30>
    9a3a:	682b      	ldr	r3, [r5, #0]
    9a3c:	3302      	adds	r3, #2
    9a3e:	602b      	str	r3, [r5, #0]
    9a40:	2706      	movs	r7, #6
    9a42:	6823      	ldr	r3, [r4, #0]
    9a44:	401f      	ands	r7, r3
    9a46:	d027      	beq.n	9a98 <_printf_common+0x88>
    9a48:	0023      	movs	r3, r4
    9a4a:	3343      	adds	r3, #67	; 0x43
    9a4c:	781b      	ldrb	r3, [r3, #0]
    9a4e:	1e5a      	subs	r2, r3, #1
    9a50:	4193      	sbcs	r3, r2
    9a52:	6822      	ldr	r2, [r4, #0]
    9a54:	0692      	lsls	r2, r2, #26
    9a56:	d430      	bmi.n	9aba <_printf_common+0xaa>
    9a58:	0022      	movs	r2, r4
    9a5a:	9901      	ldr	r1, [sp, #4]
    9a5c:	3243      	adds	r2, #67	; 0x43
    9a5e:	9800      	ldr	r0, [sp, #0]
    9a60:	9e08      	ldr	r6, [sp, #32]
    9a62:	47b0      	blx	r6
    9a64:	1c43      	adds	r3, r0, #1
    9a66:	d025      	beq.n	9ab4 <_printf_common+0xa4>
    9a68:	2306      	movs	r3, #6
    9a6a:	6820      	ldr	r0, [r4, #0]
    9a6c:	682a      	ldr	r2, [r5, #0]
    9a6e:	68e1      	ldr	r1, [r4, #12]
    9a70:	4003      	ands	r3, r0
    9a72:	2500      	movs	r5, #0
    9a74:	2b04      	cmp	r3, #4
    9a76:	d103      	bne.n	9a80 <_printf_common+0x70>
    9a78:	1a8d      	subs	r5, r1, r2
    9a7a:	43eb      	mvns	r3, r5
    9a7c:	17db      	asrs	r3, r3, #31
    9a7e:	401d      	ands	r5, r3
    9a80:	68a3      	ldr	r3, [r4, #8]
    9a82:	6922      	ldr	r2, [r4, #16]
    9a84:	4293      	cmp	r3, r2
    9a86:	dd01      	ble.n	9a8c <_printf_common+0x7c>
    9a88:	1a9b      	subs	r3, r3, r2
    9a8a:	18ed      	adds	r5, r5, r3
    9a8c:	2700      	movs	r7, #0
    9a8e:	42bd      	cmp	r5, r7
    9a90:	d120      	bne.n	9ad4 <_printf_common+0xc4>
    9a92:	2000      	movs	r0, #0
    9a94:	e010      	b.n	9ab8 <_printf_common+0xa8>
    9a96:	3701      	adds	r7, #1
    9a98:	68e3      	ldr	r3, [r4, #12]
    9a9a:	682a      	ldr	r2, [r5, #0]
    9a9c:	1a9b      	subs	r3, r3, r2
    9a9e:	429f      	cmp	r7, r3
    9aa0:	dad2      	bge.n	9a48 <_printf_common+0x38>
    9aa2:	0022      	movs	r2, r4
    9aa4:	2301      	movs	r3, #1
    9aa6:	3219      	adds	r2, #25
    9aa8:	9901      	ldr	r1, [sp, #4]
    9aaa:	9800      	ldr	r0, [sp, #0]
    9aac:	9e08      	ldr	r6, [sp, #32]
    9aae:	47b0      	blx	r6
    9ab0:	1c43      	adds	r3, r0, #1
    9ab2:	d1f0      	bne.n	9a96 <_printf_common+0x86>
    9ab4:	2001      	movs	r0, #1
    9ab6:	4240      	negs	r0, r0
    9ab8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9aba:	2030      	movs	r0, #48	; 0x30
    9abc:	18e1      	adds	r1, r4, r3
    9abe:	3143      	adds	r1, #67	; 0x43
    9ac0:	7008      	strb	r0, [r1, #0]
    9ac2:	0021      	movs	r1, r4
    9ac4:	1c5a      	adds	r2, r3, #1
    9ac6:	3145      	adds	r1, #69	; 0x45
    9ac8:	7809      	ldrb	r1, [r1, #0]
    9aca:	18a2      	adds	r2, r4, r2
    9acc:	3243      	adds	r2, #67	; 0x43
    9ace:	3302      	adds	r3, #2
    9ad0:	7011      	strb	r1, [r2, #0]
    9ad2:	e7c1      	b.n	9a58 <_printf_common+0x48>
    9ad4:	0022      	movs	r2, r4
    9ad6:	2301      	movs	r3, #1
    9ad8:	321a      	adds	r2, #26
    9ada:	9901      	ldr	r1, [sp, #4]
    9adc:	9800      	ldr	r0, [sp, #0]
    9ade:	9e08      	ldr	r6, [sp, #32]
    9ae0:	47b0      	blx	r6
    9ae2:	1c43      	adds	r3, r0, #1
    9ae4:	d0e6      	beq.n	9ab4 <_printf_common+0xa4>
    9ae6:	3701      	adds	r7, #1
    9ae8:	e7d1      	b.n	9a8e <_printf_common+0x7e>
	...

00009aec <_printf_i>:
    9aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aee:	b08b      	sub	sp, #44	; 0x2c
    9af0:	9206      	str	r2, [sp, #24]
    9af2:	000a      	movs	r2, r1
    9af4:	3243      	adds	r2, #67	; 0x43
    9af6:	9307      	str	r3, [sp, #28]
    9af8:	9005      	str	r0, [sp, #20]
    9afa:	9204      	str	r2, [sp, #16]
    9afc:	7e0a      	ldrb	r2, [r1, #24]
    9afe:	000c      	movs	r4, r1
    9b00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b02:	2a6e      	cmp	r2, #110	; 0x6e
    9b04:	d100      	bne.n	9b08 <_printf_i+0x1c>
    9b06:	e08f      	b.n	9c28 <_printf_i+0x13c>
    9b08:	d817      	bhi.n	9b3a <_printf_i+0x4e>
    9b0a:	2a63      	cmp	r2, #99	; 0x63
    9b0c:	d02c      	beq.n	9b68 <_printf_i+0x7c>
    9b0e:	d808      	bhi.n	9b22 <_printf_i+0x36>
    9b10:	2a00      	cmp	r2, #0
    9b12:	d100      	bne.n	9b16 <_printf_i+0x2a>
    9b14:	e099      	b.n	9c4a <_printf_i+0x15e>
    9b16:	2a58      	cmp	r2, #88	; 0x58
    9b18:	d054      	beq.n	9bc4 <_printf_i+0xd8>
    9b1a:	0026      	movs	r6, r4
    9b1c:	3642      	adds	r6, #66	; 0x42
    9b1e:	7032      	strb	r2, [r6, #0]
    9b20:	e029      	b.n	9b76 <_printf_i+0x8a>
    9b22:	2a64      	cmp	r2, #100	; 0x64
    9b24:	d001      	beq.n	9b2a <_printf_i+0x3e>
    9b26:	2a69      	cmp	r2, #105	; 0x69
    9b28:	d1f7      	bne.n	9b1a <_printf_i+0x2e>
    9b2a:	6821      	ldr	r1, [r4, #0]
    9b2c:	681a      	ldr	r2, [r3, #0]
    9b2e:	0608      	lsls	r0, r1, #24
    9b30:	d523      	bpl.n	9b7a <_printf_i+0x8e>
    9b32:	1d11      	adds	r1, r2, #4
    9b34:	6019      	str	r1, [r3, #0]
    9b36:	6815      	ldr	r5, [r2, #0]
    9b38:	e025      	b.n	9b86 <_printf_i+0x9a>
    9b3a:	2a73      	cmp	r2, #115	; 0x73
    9b3c:	d100      	bne.n	9b40 <_printf_i+0x54>
    9b3e:	e088      	b.n	9c52 <_printf_i+0x166>
    9b40:	d808      	bhi.n	9b54 <_printf_i+0x68>
    9b42:	2a6f      	cmp	r2, #111	; 0x6f
    9b44:	d029      	beq.n	9b9a <_printf_i+0xae>
    9b46:	2a70      	cmp	r2, #112	; 0x70
    9b48:	d1e7      	bne.n	9b1a <_printf_i+0x2e>
    9b4a:	2220      	movs	r2, #32
    9b4c:	6809      	ldr	r1, [r1, #0]
    9b4e:	430a      	orrs	r2, r1
    9b50:	6022      	str	r2, [r4, #0]
    9b52:	e003      	b.n	9b5c <_printf_i+0x70>
    9b54:	2a75      	cmp	r2, #117	; 0x75
    9b56:	d020      	beq.n	9b9a <_printf_i+0xae>
    9b58:	2a78      	cmp	r2, #120	; 0x78
    9b5a:	d1de      	bne.n	9b1a <_printf_i+0x2e>
    9b5c:	0022      	movs	r2, r4
    9b5e:	2178      	movs	r1, #120	; 0x78
    9b60:	3245      	adds	r2, #69	; 0x45
    9b62:	7011      	strb	r1, [r2, #0]
    9b64:	4a6c      	ldr	r2, [pc, #432]	; (9d18 <_printf_i+0x22c>)
    9b66:	e030      	b.n	9bca <_printf_i+0xde>
    9b68:	000e      	movs	r6, r1
    9b6a:	681a      	ldr	r2, [r3, #0]
    9b6c:	3642      	adds	r6, #66	; 0x42
    9b6e:	1d11      	adds	r1, r2, #4
    9b70:	6019      	str	r1, [r3, #0]
    9b72:	6813      	ldr	r3, [r2, #0]
    9b74:	7033      	strb	r3, [r6, #0]
    9b76:	2301      	movs	r3, #1
    9b78:	e079      	b.n	9c6e <_printf_i+0x182>
    9b7a:	0649      	lsls	r1, r1, #25
    9b7c:	d5d9      	bpl.n	9b32 <_printf_i+0x46>
    9b7e:	1d11      	adds	r1, r2, #4
    9b80:	6019      	str	r1, [r3, #0]
    9b82:	2300      	movs	r3, #0
    9b84:	5ed5      	ldrsh	r5, [r2, r3]
    9b86:	2d00      	cmp	r5, #0
    9b88:	da03      	bge.n	9b92 <_printf_i+0xa6>
    9b8a:	232d      	movs	r3, #45	; 0x2d
    9b8c:	9a04      	ldr	r2, [sp, #16]
    9b8e:	426d      	negs	r5, r5
    9b90:	7013      	strb	r3, [r2, #0]
    9b92:	4b62      	ldr	r3, [pc, #392]	; (9d1c <_printf_i+0x230>)
    9b94:	270a      	movs	r7, #10
    9b96:	9303      	str	r3, [sp, #12]
    9b98:	e02f      	b.n	9bfa <_printf_i+0x10e>
    9b9a:	6820      	ldr	r0, [r4, #0]
    9b9c:	6819      	ldr	r1, [r3, #0]
    9b9e:	0605      	lsls	r5, r0, #24
    9ba0:	d503      	bpl.n	9baa <_printf_i+0xbe>
    9ba2:	1d08      	adds	r0, r1, #4
    9ba4:	6018      	str	r0, [r3, #0]
    9ba6:	680d      	ldr	r5, [r1, #0]
    9ba8:	e005      	b.n	9bb6 <_printf_i+0xca>
    9baa:	0640      	lsls	r0, r0, #25
    9bac:	d5f9      	bpl.n	9ba2 <_printf_i+0xb6>
    9bae:	680d      	ldr	r5, [r1, #0]
    9bb0:	1d08      	adds	r0, r1, #4
    9bb2:	6018      	str	r0, [r3, #0]
    9bb4:	b2ad      	uxth	r5, r5
    9bb6:	4b59      	ldr	r3, [pc, #356]	; (9d1c <_printf_i+0x230>)
    9bb8:	2708      	movs	r7, #8
    9bba:	9303      	str	r3, [sp, #12]
    9bbc:	2a6f      	cmp	r2, #111	; 0x6f
    9bbe:	d018      	beq.n	9bf2 <_printf_i+0x106>
    9bc0:	270a      	movs	r7, #10
    9bc2:	e016      	b.n	9bf2 <_printf_i+0x106>
    9bc4:	3145      	adds	r1, #69	; 0x45
    9bc6:	700a      	strb	r2, [r1, #0]
    9bc8:	4a54      	ldr	r2, [pc, #336]	; (9d1c <_printf_i+0x230>)
    9bca:	9203      	str	r2, [sp, #12]
    9bcc:	681a      	ldr	r2, [r3, #0]
    9bce:	6821      	ldr	r1, [r4, #0]
    9bd0:	1d10      	adds	r0, r2, #4
    9bd2:	6018      	str	r0, [r3, #0]
    9bd4:	6815      	ldr	r5, [r2, #0]
    9bd6:	0608      	lsls	r0, r1, #24
    9bd8:	d522      	bpl.n	9c20 <_printf_i+0x134>
    9bda:	07cb      	lsls	r3, r1, #31
    9bdc:	d502      	bpl.n	9be4 <_printf_i+0xf8>
    9bde:	2320      	movs	r3, #32
    9be0:	4319      	orrs	r1, r3
    9be2:	6021      	str	r1, [r4, #0]
    9be4:	2710      	movs	r7, #16
    9be6:	2d00      	cmp	r5, #0
    9be8:	d103      	bne.n	9bf2 <_printf_i+0x106>
    9bea:	2320      	movs	r3, #32
    9bec:	6822      	ldr	r2, [r4, #0]
    9bee:	439a      	bics	r2, r3
    9bf0:	6022      	str	r2, [r4, #0]
    9bf2:	0023      	movs	r3, r4
    9bf4:	2200      	movs	r2, #0
    9bf6:	3343      	adds	r3, #67	; 0x43
    9bf8:	701a      	strb	r2, [r3, #0]
    9bfa:	6863      	ldr	r3, [r4, #4]
    9bfc:	60a3      	str	r3, [r4, #8]
    9bfe:	2b00      	cmp	r3, #0
    9c00:	db5c      	blt.n	9cbc <_printf_i+0x1d0>
    9c02:	2204      	movs	r2, #4
    9c04:	6821      	ldr	r1, [r4, #0]
    9c06:	4391      	bics	r1, r2
    9c08:	6021      	str	r1, [r4, #0]
    9c0a:	2d00      	cmp	r5, #0
    9c0c:	d158      	bne.n	9cc0 <_printf_i+0x1d4>
    9c0e:	9e04      	ldr	r6, [sp, #16]
    9c10:	2b00      	cmp	r3, #0
    9c12:	d064      	beq.n	9cde <_printf_i+0x1f2>
    9c14:	0026      	movs	r6, r4
    9c16:	9b03      	ldr	r3, [sp, #12]
    9c18:	3642      	adds	r6, #66	; 0x42
    9c1a:	781b      	ldrb	r3, [r3, #0]
    9c1c:	7033      	strb	r3, [r6, #0]
    9c1e:	e05e      	b.n	9cde <_printf_i+0x1f2>
    9c20:	0648      	lsls	r0, r1, #25
    9c22:	d5da      	bpl.n	9bda <_printf_i+0xee>
    9c24:	b2ad      	uxth	r5, r5
    9c26:	e7d8      	b.n	9bda <_printf_i+0xee>
    9c28:	6809      	ldr	r1, [r1, #0]
    9c2a:	681a      	ldr	r2, [r3, #0]
    9c2c:	0608      	lsls	r0, r1, #24
    9c2e:	d505      	bpl.n	9c3c <_printf_i+0x150>
    9c30:	1d11      	adds	r1, r2, #4
    9c32:	6019      	str	r1, [r3, #0]
    9c34:	6813      	ldr	r3, [r2, #0]
    9c36:	6962      	ldr	r2, [r4, #20]
    9c38:	601a      	str	r2, [r3, #0]
    9c3a:	e006      	b.n	9c4a <_printf_i+0x15e>
    9c3c:	0649      	lsls	r1, r1, #25
    9c3e:	d5f7      	bpl.n	9c30 <_printf_i+0x144>
    9c40:	1d11      	adds	r1, r2, #4
    9c42:	6019      	str	r1, [r3, #0]
    9c44:	6813      	ldr	r3, [r2, #0]
    9c46:	8aa2      	ldrh	r2, [r4, #20]
    9c48:	801a      	strh	r2, [r3, #0]
    9c4a:	2300      	movs	r3, #0
    9c4c:	9e04      	ldr	r6, [sp, #16]
    9c4e:	6123      	str	r3, [r4, #16]
    9c50:	e054      	b.n	9cfc <_printf_i+0x210>
    9c52:	681a      	ldr	r2, [r3, #0]
    9c54:	1d11      	adds	r1, r2, #4
    9c56:	6019      	str	r1, [r3, #0]
    9c58:	6816      	ldr	r6, [r2, #0]
    9c5a:	2100      	movs	r1, #0
    9c5c:	6862      	ldr	r2, [r4, #4]
    9c5e:	0030      	movs	r0, r6
    9c60:	f000 f85e 	bl	9d20 <memchr>
    9c64:	2800      	cmp	r0, #0
    9c66:	d001      	beq.n	9c6c <_printf_i+0x180>
    9c68:	1b80      	subs	r0, r0, r6
    9c6a:	6060      	str	r0, [r4, #4]
    9c6c:	6863      	ldr	r3, [r4, #4]
    9c6e:	6123      	str	r3, [r4, #16]
    9c70:	2300      	movs	r3, #0
    9c72:	9a04      	ldr	r2, [sp, #16]
    9c74:	7013      	strb	r3, [r2, #0]
    9c76:	e041      	b.n	9cfc <_printf_i+0x210>
    9c78:	6923      	ldr	r3, [r4, #16]
    9c7a:	0032      	movs	r2, r6
    9c7c:	9906      	ldr	r1, [sp, #24]
    9c7e:	9805      	ldr	r0, [sp, #20]
    9c80:	9d07      	ldr	r5, [sp, #28]
    9c82:	47a8      	blx	r5
    9c84:	1c43      	adds	r3, r0, #1
    9c86:	d043      	beq.n	9d10 <_printf_i+0x224>
    9c88:	6823      	ldr	r3, [r4, #0]
    9c8a:	2500      	movs	r5, #0
    9c8c:	079b      	lsls	r3, r3, #30
    9c8e:	d40f      	bmi.n	9cb0 <_printf_i+0x1c4>
    9c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9c92:	68e0      	ldr	r0, [r4, #12]
    9c94:	4298      	cmp	r0, r3
    9c96:	da3d      	bge.n	9d14 <_printf_i+0x228>
    9c98:	0018      	movs	r0, r3
    9c9a:	e03b      	b.n	9d14 <_printf_i+0x228>
    9c9c:	0022      	movs	r2, r4
    9c9e:	2301      	movs	r3, #1
    9ca0:	3219      	adds	r2, #25
    9ca2:	9906      	ldr	r1, [sp, #24]
    9ca4:	9805      	ldr	r0, [sp, #20]
    9ca6:	9e07      	ldr	r6, [sp, #28]
    9ca8:	47b0      	blx	r6
    9caa:	1c43      	adds	r3, r0, #1
    9cac:	d030      	beq.n	9d10 <_printf_i+0x224>
    9cae:	3501      	adds	r5, #1
    9cb0:	68e3      	ldr	r3, [r4, #12]
    9cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9cb4:	1a9b      	subs	r3, r3, r2
    9cb6:	429d      	cmp	r5, r3
    9cb8:	dbf0      	blt.n	9c9c <_printf_i+0x1b0>
    9cba:	e7e9      	b.n	9c90 <_printf_i+0x1a4>
    9cbc:	2d00      	cmp	r5, #0
    9cbe:	d0a9      	beq.n	9c14 <_printf_i+0x128>
    9cc0:	9e04      	ldr	r6, [sp, #16]
    9cc2:	0028      	movs	r0, r5
    9cc4:	0039      	movs	r1, r7
    9cc6:	f7fe fffb 	bl	8cc0 <__aeabi_uidivmod>
    9cca:	9b03      	ldr	r3, [sp, #12]
    9ccc:	3e01      	subs	r6, #1
    9cce:	5c5b      	ldrb	r3, [r3, r1]
    9cd0:	0028      	movs	r0, r5
    9cd2:	7033      	strb	r3, [r6, #0]
    9cd4:	0039      	movs	r1, r7
    9cd6:	f7fe ff6d 	bl	8bb4 <__udivsi3>
    9cda:	1e05      	subs	r5, r0, #0
    9cdc:	d1f1      	bne.n	9cc2 <_printf_i+0x1d6>
    9cde:	2f08      	cmp	r7, #8
    9ce0:	d109      	bne.n	9cf6 <_printf_i+0x20a>
    9ce2:	6823      	ldr	r3, [r4, #0]
    9ce4:	07db      	lsls	r3, r3, #31
    9ce6:	d506      	bpl.n	9cf6 <_printf_i+0x20a>
    9ce8:	6863      	ldr	r3, [r4, #4]
    9cea:	6922      	ldr	r2, [r4, #16]
    9cec:	4293      	cmp	r3, r2
    9cee:	dc02      	bgt.n	9cf6 <_printf_i+0x20a>
    9cf0:	2330      	movs	r3, #48	; 0x30
    9cf2:	3e01      	subs	r6, #1
    9cf4:	7033      	strb	r3, [r6, #0]
    9cf6:	9b04      	ldr	r3, [sp, #16]
    9cf8:	1b9b      	subs	r3, r3, r6
    9cfa:	6123      	str	r3, [r4, #16]
    9cfc:	9b07      	ldr	r3, [sp, #28]
    9cfe:	aa09      	add	r2, sp, #36	; 0x24
    9d00:	9300      	str	r3, [sp, #0]
    9d02:	0021      	movs	r1, r4
    9d04:	9b06      	ldr	r3, [sp, #24]
    9d06:	9805      	ldr	r0, [sp, #20]
    9d08:	f7ff fe82 	bl	9a10 <_printf_common>
    9d0c:	1c43      	adds	r3, r0, #1
    9d0e:	d1b3      	bne.n	9c78 <_printf_i+0x18c>
    9d10:	2001      	movs	r0, #1
    9d12:	4240      	negs	r0, r0
    9d14:	b00b      	add	sp, #44	; 0x2c
    9d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d18:	0000a6ed 	.word	0x0000a6ed
    9d1c:	0000a6dc 	.word	0x0000a6dc

00009d20 <memchr>:
    9d20:	b2c9      	uxtb	r1, r1
    9d22:	1882      	adds	r2, r0, r2
    9d24:	4290      	cmp	r0, r2
    9d26:	d101      	bne.n	9d2c <memchr+0xc>
    9d28:	2000      	movs	r0, #0
    9d2a:	4770      	bx	lr
    9d2c:	7803      	ldrb	r3, [r0, #0]
    9d2e:	428b      	cmp	r3, r1
    9d30:	d0fb      	beq.n	9d2a <memchr+0xa>
    9d32:	3001      	adds	r0, #1
    9d34:	e7f6      	b.n	9d24 <memchr+0x4>

00009d36 <memmove>:
    9d36:	b510      	push	{r4, lr}
    9d38:	4288      	cmp	r0, r1
    9d3a:	d902      	bls.n	9d42 <memmove+0xc>
    9d3c:	188b      	adds	r3, r1, r2
    9d3e:	4298      	cmp	r0, r3
    9d40:	d308      	bcc.n	9d54 <memmove+0x1e>
    9d42:	2300      	movs	r3, #0
    9d44:	429a      	cmp	r2, r3
    9d46:	d007      	beq.n	9d58 <memmove+0x22>
    9d48:	5ccc      	ldrb	r4, [r1, r3]
    9d4a:	54c4      	strb	r4, [r0, r3]
    9d4c:	3301      	adds	r3, #1
    9d4e:	e7f9      	b.n	9d44 <memmove+0xe>
    9d50:	5c8b      	ldrb	r3, [r1, r2]
    9d52:	5483      	strb	r3, [r0, r2]
    9d54:	3a01      	subs	r2, #1
    9d56:	d2fb      	bcs.n	9d50 <memmove+0x1a>
    9d58:	bd10      	pop	{r4, pc}

00009d5a <_realloc_r>:
    9d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d5c:	0007      	movs	r7, r0
    9d5e:	000d      	movs	r5, r1
    9d60:	0016      	movs	r6, r2
    9d62:	2900      	cmp	r1, #0
    9d64:	d105      	bne.n	9d72 <_realloc_r+0x18>
    9d66:	0011      	movs	r1, r2
    9d68:	f7ff fad0 	bl	930c <_malloc_r>
    9d6c:	0004      	movs	r4, r0
    9d6e:	0020      	movs	r0, r4
    9d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d72:	2a00      	cmp	r2, #0
    9d74:	d103      	bne.n	9d7e <_realloc_r+0x24>
    9d76:	f7ff fa7f 	bl	9278 <_free_r>
    9d7a:	0034      	movs	r4, r6
    9d7c:	e7f7      	b.n	9d6e <_realloc_r+0x14>
    9d7e:	f000 f812 	bl	9da6 <_malloc_usable_size_r>
    9d82:	002c      	movs	r4, r5
    9d84:	4286      	cmp	r6, r0
    9d86:	d9f2      	bls.n	9d6e <_realloc_r+0x14>
    9d88:	0031      	movs	r1, r6
    9d8a:	0038      	movs	r0, r7
    9d8c:	f7ff fabe 	bl	930c <_malloc_r>
    9d90:	1e04      	subs	r4, r0, #0
    9d92:	d0ec      	beq.n	9d6e <_realloc_r+0x14>
    9d94:	0029      	movs	r1, r5
    9d96:	0032      	movs	r2, r6
    9d98:	f7ff fa4e 	bl	9238 <memcpy>
    9d9c:	0029      	movs	r1, r5
    9d9e:	0038      	movs	r0, r7
    9da0:	f7ff fa6a 	bl	9278 <_free_r>
    9da4:	e7e3      	b.n	9d6e <_realloc_r+0x14>

00009da6 <_malloc_usable_size_r>:
    9da6:	1f0b      	subs	r3, r1, #4
    9da8:	681b      	ldr	r3, [r3, #0]
    9daa:	1f18      	subs	r0, r3, #4
    9dac:	2b00      	cmp	r3, #0
    9dae:	da01      	bge.n	9db4 <_malloc_usable_size_r+0xe>
    9db0:	580b      	ldr	r3, [r1, r0]
    9db2:	18c0      	adds	r0, r0, r3
    9db4:	4770      	bx	lr
    9db6:	5441      	.short	0x5441
    9db8:	4c4f432b 	.word	0x4c4f432b
    9dbc:	000d3f50 	.word	0x000d3f50
    9dc0:	4c4f432b 	.word	0x4c4f432b
    9dc4:	0050      	.short	0x0050
    9dc6:	4b4f      	.short	0x4b4f
    9dc8:	0d544100 	.word	0x0d544100
    9dcc:	00          	.byte	0x00
    9dcd:	41          	.byte	0x41
    9dce:	2b54      	.short	0x2b54
    9dd0:	42504153 	.word	0x42504153
    9dd4:	2c303d52 	.word	0x2c303d52
    9dd8:	0d31      	.short	0x0d31
    9dda:	00          	.byte	0x00
    9ddb:	41          	.byte	0x41
    9ddc:	4f432b54 	.word	0x4f432b54
    9de0:	0d3f5350 	.word	0x0d3f5350
    9de4:	4f432b00 	.word	0x4f432b00
    9de8:	003a5350 	.word	0x003a5350
    9dec:	41454449 	.word	0x41454449
    9df0:	2b544100 	.word	0x2b544100
    9df4:	42504153 	.word	0x42504153
    9df8:	2c333d52 	.word	0x2c333d52
    9dfc:	41222c31 	.word	0x41222c31
    9e00:	2c224e50 	.word	0x2c224e50
    9e04:	746e6922 	.word	0x746e6922
    9e08:	656e7265 	.word	0x656e7265
    9e0c:	000d2274 	.word	0x000d2274
    9e10:	41444f56 	.word	0x41444f56
    9e14:	2b544100 	.word	0x2b544100
    9e18:	42504153 	.word	0x42504153
    9e1c:	2c333d52 	.word	0x2c333d52
    9e20:	41222c31 	.word	0x41222c31
    9e24:	2c224e50 	.word	0x2c224e50
    9e28:	77777722 	.word	0x77777722
    9e2c:	42000d22 	.word	0x42000d22
    9e30:	004c4e53 	.word	0x004c4e53
    9e34:	532b5441 	.word	0x532b5441
    9e38:	52425041 	.word	0x52425041
    9e3c:	312c333d 	.word	0x312c333d
    9e40:	5041222c 	.word	0x5041222c
    9e44:	222c224e 	.word	0x222c224e
    9e48:	6c6e7362 	.word	0x6c6e7362
    9e4c:	2274656e 	.word	0x2274656e
    9e50:	4941000d 	.word	0x4941000d
    9e54:	4c455452 	.word	0x4c455452
    9e58:	2b544100 	.word	0x2b544100
    9e5c:	42504153 	.word	0x42504153
    9e60:	2c333d52 	.word	0x2c333d52
    9e64:	41222c31 	.word	0x41222c31
    9e68:	2c224e50 	.word	0x2c224e50
    9e6c:	72696122 	.word	0x72696122
    9e70:	676c6574 	.word	0x676c6574
    9e74:	2e737270 	.word	0x2e737270
    9e78:	226d6f63 	.word	0x226d6f63
    9e7c:	5441000d 	.word	0x5441000d
    9e80:	5041532b 	.word	0x5041532b
    9e84:	333d5242 	.word	0x333d5242
    9e88:	222c312c 	.word	0x222c312c
    9e8c:	224e5041 	.word	0x224e5041
    9e90:	0d22222c 	.word	0x0d22222c
    9e94:	00          	.byte	0x00
    9e95:	41          	.byte	0x41
    9e96:	2b54      	.short	0x2b54
    9e98:	42504153 	.word	0x42504153
    9e9c:	2c333d52 	.word	0x2c333d52
    9ea0:	43222c31 	.word	0x43222c31
    9ea4:	59544e4f 	.word	0x59544e4f
    9ea8:	2c224550 	.word	0x2c224550
    9eac:	52504722 	.word	0x52504722
    9eb0:	000d2253 	.word	0x000d2253
    9eb4:	4950432b 	.word	0x4950432b
    9eb8:	52203a4e 	.word	0x52203a4e
    9ebc:	59444145 	.word	0x59444145
    9ec0:	2b544100 	.word	0x2b544100
    9ec4:	4e495043 	.word	0x4e495043
    9ec8:	0d3f      	.short	0x0d3f
    9eca:	00          	.byte	0x00
    9ecb:	41          	.byte	0x41
    9ecc:	4c432b54 	.word	0x4c432b54
    9ed0:	303d5354 	.word	0x303d5354
    9ed4:	000d      	.short	0x000d
    9ed6:	5441      	.short	0x5441
    9ed8:	4d4e432b 	.word	0x4d4e432b
    9edc:	2c313d49 	.word	0x2c313d49
    9ee0:	2c302c30 	.word	0x2c302c30
    9ee4:	0d302c30 	.word	0x0d302c30
    9ee8:	00          	.byte	0x00
    9ee9:	41          	.byte	0x41
    9eea:	4554      	.short	0x4554
    9eec:	0d30      	.short	0x0d30
    9eee:	00          	.byte	0x00
    9eef:	41          	.byte	0x41
    9ef0:	44442b54 	.word	0x44442b54
    9ef4:	313d5445 	.word	0x313d5445
    9ef8:	000d      	.short	0x000d
    9efa:	5441      	.short	0x5441
    9efc:	4d53472b 	.word	0x4d53472b
    9f00:	59535542 	.word	0x59535542
    9f04:	000d303d 	.word	0x000d303d
    9f08:	432b5441 	.word	0x432b5441
    9f0c:	3d50494c 	.word	0x3d50494c
    9f10:	0d31      	.short	0x0d31
    9f12:	00          	.byte	0x00
    9f13:	41          	.byte	0x41
    9f14:	4f432b54 	.word	0x4f432b54
    9f18:	313d504c 	.word	0x313d504c
    9f1c:	000d      	.short	0x000d
    9f1e:	5441      	.short	0x5441
    9f20:	434c432b 	.word	0x434c432b
    9f24:	0d313d43 	.word	0x0d313d43
    9f28:	00          	.byte	0x00
    9f29:	41          	.byte	0x41
    9f2a:	2b54      	.short	0x2b54
    9f2c:	53544c43 	.word	0x53544c43
    9f30:	000d313d 	.word	0x000d313d
    9f34:	432b5441 	.word	0x432b5441
    9f38:	3d494d4e 	.word	0x3d494d4e
    9f3c:	2c312c32 	.word	0x2c312c32
    9f40:	2c302c30 	.word	0x2c302c30
    9f44:	0d30      	.short	0x0d30
    9f46:	00          	.byte	0x00
    9f47:	41          	.byte	0x41
    9f48:	0d462654 	.word	0x0d462654
    9f4c:	00          	.byte	0x00
    9f4d:	2b          	.byte	0x2b
    9f4e:	5446      	.short	0x5446
    9f50:	5a495350 	.word	0x5a495350
    9f54:	31203a45 	.word	0x31203a45
    9f58:	5441002c 	.word	0x5441002c
    9f5c:	5054462b 	.word	0x5054462b
    9f60:	455a4953 	.word	0x455a4953
    9f64:	000d      	.short	0x000d
    9f66:	5347      	.short	0x5347
    9f68:	6954204d 	.word	0x6954204d
    9f6c:	756f656d 	.word	0x756f656d
    9f70:	0074      	.short	0x0074
    9f72:	432b      	.short	0x432b
    9f74:	3a474552 	.word	0x3a474552
    9f78:	312c3020 	.word	0x312c3020
    9f7c:	2b544100 	.word	0x2b544100
    9f80:	47455243 	.word	0x47455243
    9f84:	2b000d3f 	.word	0x2b000d3f
    9f88:	47455243 	.word	0x47455243
    9f8c:	2c30203a 	.word	0x2c30203a
    9f90:	0035      	.short	0x0035
    9f92:	462b      	.short	0x462b
    9f94:	45475054 	.word	0x45475054
    9f98:	31203a54 	.word	0x31203a54
    9f9c:	4100312c 	.word	0x4100312c
    9fa0:	54462b54 	.word	0x54462b54
    9fa4:	54454750 	.word	0x54454750
    9fa8:	000d313d 	.word	0x000d313d
    9fac:	532b5441 	.word	0x532b5441
    9fb0:	52425041 	.word	0x52425041
    9fb4:	312c313d 	.word	0x312c313d
    9fb8:	000d      	.short	0x000d
    9fba:	5441      	.short	0x5441
    9fbc:	5041532b 	.word	0x5041532b
    9fc0:	323d5242 	.word	0x323d5242
    9fc4:	000d312c 	.word	0x000d312c
    9fc8:	5041532b 	.word	0x5041532b
    9fcc:	203a5242 	.word	0x203a5242
    9fd0:	00302c31 	.word	0x00302c31
    9fd4:	5041532b 	.word	0x5041532b
    9fd8:	203a5242 	.word	0x203a5242
    9fdc:	00312c31 	.word	0x00312c31
    9fe0:	5041532b 	.word	0x5041532b
    9fe4:	203a5242 	.word	0x203a5242
    9fe8:	00322c31 	.word	0x00322c31
    9fec:	5041532b 	.word	0x5041532b
    9ff0:	203a5242 	.word	0x203a5242
    9ff4:	00332c31 	.word	0x00332c31
    9ff8:	462b5441 	.word	0x462b5441
    9ffc:	45475054 	.word	0x45475054
    a000:	2c323d54 	.word	0x2c323d54
    a004:	000d6425 	.word	0x000d6425
    a008:	5054462b 	.word	0x5054462b
    a00c:	3a544547 	.word	0x3a544547
    a010:	0020      	.short	0x0020
    a012:	5441      	.short	0x5441
    a014:	4d53472b 	.word	0x4d53472b
    a018:	59535542 	.word	0x59535542
    a01c:	000d313d 	.word	0x000d313d
    a020:	432b5441 	.word	0x432b5441
    a024:	3d46474d 	.word	0x3d46474d
    a028:	0d31      	.short	0x0d31
    a02a:	00          	.byte	0x00
    a02b:	45          	.byte	0x45
    a02c:	524f5252 	.word	0x524f5252
    a030:	00          	.byte	0x00
    a031:	41          	.byte	0x41
    a032:	2b54      	.short	0x2b54
    a034:	3d525049 	.word	0x3d525049
    a038:	000d6425 	.word	0x000d6425
    a03c:	462b5441 	.word	0x462b5441
    a040:	45475054 	.word	0x45475054
    a044:	4d414e54 	.word	0x4d414e54
    a048:	25223d45 	.word	0x25223d45
    a04c:	000d2273 	.word	0x000d2273
    a050:	462b5441 	.word	0x462b5441
    a054:	45475054 	.word	0x45475054
    a058:	54415054 	.word	0x54415054
    a05c:	25223d48 	.word	0x25223d48
    a060:	000d2273 	.word	0x000d2273
    a064:	462b5441 	.word	0x462b5441
    a068:	45535054 	.word	0x45535054
    a06c:	223d5652 	.word	0x223d5652
    a070:	0d227325 	.word	0x0d227325
    a074:	00          	.byte	0x00
    a075:	41          	.byte	0x41
    a076:	2b54      	.short	0x2b54
    a078:	55505446 	.word	0x55505446
    a07c:	25223d4e 	.word	0x25223d4e
    a080:	000d2273 	.word	0x000d2273
    a084:	462b5441 	.word	0x462b5441
    a088:	57505054 	.word	0x57505054
    a08c:	7325223d 	.word	0x7325223d
    a090:	0d22      	.short	0x0d22
    a092:	00          	.byte	0x00
    a093:	41          	.byte	0x41
    a094:	53432b54 	.word	0x53432b54
    a098:	313d504d 	.word	0x313d504d
    a09c:	36312c37 	.word	0x36312c37
    a0a0:	2c302c37 	.word	0x2c302c37
    a0a4:	0d30      	.short	0x0d30
    a0a6:	00          	.byte	0x00
    a0a7:	41          	.byte	0x41
    a0a8:	0d572654 	.word	0x0d572654
    a0ac:	00000000 	.word	0x00000000
    a0b0:	00000008 	.word	0x00000008
    a0b4:	00000010 	.word	0x00000010
    a0b8:	00000020 	.word	0x00000020
    a0bc:	00000040 	.word	0x00000040
    a0c0:	00000080 	.word	0x00000080
    a0c4:	00000100 	.word	0x00000100
    a0c8:	00000200 	.word	0x00000200
    a0cc:	00000400 	.word	0x00000400

0000a0d0 <RomBOOT_Version>:
    a0d0:	36312e32 00000000                                2.16..

0000a0d6 <crc16Table>:
    a0d6:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
    a0e6:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
    a0f6:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
    a106:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
    a116:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
    a126:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
    a136:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
    a146:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
    a156:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
    a166:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
    a176:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
    a186:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
    a196:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
    a1a6:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
    a1b6:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
    a1c6:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
    a1d6:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
    a1e6:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
    a1f6:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
    a206:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
    a216:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
    a226:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
    a236:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
    a246:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
    a256:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
    a266:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
    a276:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
    a286:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
    a296:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
    a2a6:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
    a2b6:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
    a2c6:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....
    a2d6:	65460076 33322062 31303220 32310039     v.Feb 23 2019.12
    a2e6:	3a34343a 4a003233 4b000d0a 4c000d0a     :44:32.J...K...L
    a2f6:	58000d0a 59000d0a 5a000d0a 0d0a2300     ...X...Y...Z.#..
    a306:	00003e00 66850000                                .>....

0000a30c <usbcdc_if>:
    a30c:	00006685 00006441 000063a1 00006731     .f..Ad...c..1g..
    a31c:	000064f1 00006731 00006585 00000100     .d..1g...e......

0000a32c <CSWTCH.17>:
    a32c:	00010000 00040000 00080000 00100000     ................
    a33c:	00100000 00200000 00200000 00200000     ...... ... ... .
    a34c:	00400000 00800000 00080000              ..@.........

0000a358 <CSWTCH.80>:
    a358:	00d85220 42000800 42000c00 42001000      R.....B...B...B
    a368:	42001400 42001800 42001c00 454c4449     ...B...B...BIDLE
    a378:	726d5400 63765320 00040000                       .Tmr Svc..

0000a382 <_usb_device_irq_bits>:
    a382:	00080004 00800070 01000001 0c030200              ....p.........

0000a390 <_usb_endpoint_irq_bits>:
    a390:	60100c03 41744545 50524f4d 456d752e     ...`EEtAMORP.umE
    a3a0:	30303030 30303030 66003030 642e7074     0000000000.ftp.d
    a3b0:	65766972 632e7168 2f006d6f 6d726966     rivehq.com./firm
    a3c0:	65726177 6172002f 6e6c7568 68746172     ware/.rahulnrath
    a3d0:	636b646f 3231006c 36353433 00393837     odkcl.123456789.
    a3e0:	6d726966 65726177 6e69622e 42535500     firmware.bin.USB
    a3f0:	56454420 20454349 45444f4d 54462000      DEVICE MODE. FT
    a400:	4f422050 4d20544f 2045444f 45530020     P BOOT MODE  .SE
    a410:	45452054 4d4f5250 53554620 5f660045     T EEPROM FUSE.f_
    a420:	657a6953 756c253a 535f6400 3a657a69     Size:%lu.d_Size:
    a430:	00756c25 46202020 45205054 524f5252     %lu.   FTP ERROR
    a440:	20202020 20202000 544f4f42 20474e49         .   BOOTING 
    a450:	20205055 43200020 4b434548 20474e49     UP   . CHECKING 
    a460:	45444f4d 43200020 4b434548 20474e49     MODE . CHECKING 
    a470:	53414c46 00202048 20202020 49414620     FLASH  .     FAI
    a480:	2044454c 20202020 20202000 20202020     LED     .       
    a490:	20204b4f 20202020 20200020 52452020     OK       .    ER
    a4a0:	4e495341 20202047 20002020 45545845     ASING     . EXTE
    a4b0:	4c414e52 414c4620 00204853 4c505041     RNAL FLASH .APPL
    a4c0:	54414349 204e4f49 45444f4d 20202000     ICATION MODE.   
    a4d0:	41545320 4e495452 20202047 20200020      STARTING    .  
    a4e0:	4d534720 52455320 45434956 20002020      GSM SERVICE  . 
    a4f0:	44202020 42415349 2020454c 00202020        DISABLE     .
    a500:	4c414320 4d532c4c 49542c53 2020454d      CALL,SMS,TIME  
    a510:	20202000 4e4e4f43 49544345 2020474e     .   CONNECTING  
    a520:	20202000 45532020 52455652 20202020     .     SERVER    
    a530:	20202000 414e4520 20454c42 20202020     .    ENABLE     
    a540:	45472000 49462054 5320454c 3a455a49     . GET FILE SIZE:
    a550:	6c252000 74796275 20200065 4e574f44     . %lubyte.  DOWN
    a560:	44414f4c 20474e49 20002020 4d524946     LOADING   . FIRM
    a570:	45524157 4c494620 00202045 52502020     WARE FILE  .  PR
    a580:	4152474f 4e494d4d 20202047 41202000     OGRAMMING   .  A
    a590:	494c5050 49544143 20204e4f 20200020     PPLICATION   .  
    a5a0:	45202020 524f5252 2020203a 20002020        ERROR:     . 
    a5b0:	20202020 64252020 20202020 00202020           %d       .
    a5c0:	4f500043 00584953 2000002e                       C.POSIX...

0000a5ca <_ctype_>:
    a5ca:	20202000 20202020 28282020 20282828     .         ((((( 
    a5da:	20202020 20202020 20202020 20202020                     
    a5ea:	10108820 10101010 10101010 10101010      ...............
    a5fa:	04040410 04040404 10040404 10101010     ................
    a60a:	41411010 41414141 01010101 01010101     ..AAAAAA........
    a61a:	01010101 01010101 01010101 10101010     ................
    a62a:	42421010 42424242 02020202 02020202     ..BBBBBB........
    a63a:	02020202 02020202 02020202 10101010     ................
    a64a:	00000020 00000000 00000000 00000000      ...............
	...
    a6ca:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
    a6da:	31300047 35343332 39383736 44434241     G.0123456789ABCD
    a6ea:	30004645 34333231 38373635 63626139     EF.0123456789abc
    a6fa:	00666564 b5f80000                                def...

0000a700 <_init>:
    a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a702:	46c0      	nop			; (mov r8, r8)
    a704:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a706:	bc08      	pop	{r3}
    a708:	469e      	mov	lr, r3
    a70a:	4770      	bx	lr

0000a70c <__init_array_start>:
    a70c:	000000dd 	.word	0x000000dd

0000a710 <_fini>:
    a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a712:	46c0      	nop			; (mov r8, r8)
    a714:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a716:	bc08      	pop	{r3}
    a718:	469e      	mov	lr, r3
    a71a:	4770      	bx	lr

0000a71c <__fini_array_start>:
    a71c:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <uxCriticalNesting>:
2000000c:	aaaa aaaa                                   ....

20000010 <udi_api_cdc_comm>:
20000010:	5fb5 0000 5f49 0000 6175 0000 5f5d 0000     ._..I_..ua..]_..
20000020:	0000 0000                                   ....

20000024 <udi_api_cdc_data>:
20000024:	62bd 0000 5f75 0000 5f59 0000 5f5d 0000     .b..u_..Y_..]_..
20000034:	6131 0000                                   1a..

20000038 <udc_string_desc>:
20000038:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000074 <udc_string_desc_languageid>:
20000074:	0304 0409                                   ....

20000078 <udc_string_manufacturer_name>:
20000078:	5441 454d 204c 5341 0046                    ATMEL ASF.

20000082 <udc_string_product_name>:
20000082:	5441 4153 204d 5355 2042 6f74 5320 7265     ATSAM USB to Ser
20000092:	6169 206c 6f43 766e 7265 6574 0072          ial Converter.

200000a0 <udc_config>:
200000a0:	00f8 2000 00ac 2000 010c 2000               ... ... ... 

200000ac <udc_config_fs>:
200000ac:	00b4 2000 0118 2000                         ... ... 

200000b4 <udc_desc_fs>:
200000b4:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
200000c4:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
200000d4:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
200000e4:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
200000f4:	0040 0000                                   @...

200000f8 <udc_device_desc>:
200000f8:	0112 0201 0002 4000 03eb 6124 0100 0201     .......@..$a....
20000108:	0100 0000                                   ....

2000010c <udc_device_lpm>:
2000010c:	0f05 000c 0701 0210 0002 0000               ............

20000118 <udi_apis>:
20000118:	0010 2000 0024 2000                         ... $.. 

20000120 <g_interrupt_enabled>:
20000120:	0001 0000                                   ....

20000124 <_impure_ptr>:
20000124:	0128 2000                                   (.. 

20000128 <impure_data>:
	...

20000188 <__global_locale>:
20000188:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200001a8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200001c8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200001e8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000208:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000228:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000248:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000268:	9729 0000 9215 0000 0000 0000 a5ca 0000     )...............
20000278:	a5c8 0000 a306 0000 a306 0000 a306 0000     ................
20000288:	a306 0000 a306 0000 a306 0000 a306 0000     ................
20000298:	a306 0000 a306 0000 ffff ffff ffff ffff     ................
200002a8:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200002d0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
